; ModuleID = '../../third_party/libjxl/src/lib/jxl/enc_xyb.cc'
source_filename = "../../third_party/libjxl/src/lib/jxl/enc_xyb.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.hwy::N_SSE4::Simd" = type { i8 }
%"struct.hwy::N_AVX2::Simd" = type { i8 }
%"struct.hwy::N_AVX3::Simd" = type { i8 }
%"struct.hwy::N_SCALAR::Simd" = type { i8 }
%"class.jxl::ThreadPool" = type { i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)*, i8* }
%"class.jxl::Image3" = type { [3 x %"class.jxl::Plane"] }
%"class.jxl::Plane" = type { %"struct.jxl::PlaneBase" }
%"struct.jxl::PlaneBase" = type { i32, i32, i32, i32, i64, %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%"class.jxl::ImageBundle" = type { %"class.std::__1::unique_ptr.3", i32, [4 x i8], %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::FrameOrigin", i32, i8, i8, %"class.std::__1::basic_string", %"struct.jxl::ImageMetadata"*, %"class.jxl::Image3", %"struct.jxl::ColorEncoding", %"class.std::__1::vector.87", i64 }
%"class.std::__1::unique_ptr.3" = type { %"class.std::__1::__compressed_pair.4" }
%"class.std::__1::__compressed_pair.4" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"struct.std::__1::__compressed_pair_elem.5" = type { %"struct.jxl::jpeg::JPEGData"* }
%"struct.jxl::jpeg::JPEGData" = type { %"class.jxl::Fields", i32, i32, i32, %"class.std::__1::vector", %"class.std::__1::vector.15", %"class.std::__1::vector", %"class.std::__1::vector.22", %"class.std::__1::vector.29", %"class.std::__1::vector.38", %"class.std::__1::vector.52", %"class.std::__1::vector.6", %"class.std::__1::vector", %"class.std::__1::vector.6", i32, i8, %"class.std::__1::vector.6" }
%"class.jxl::Fields" = type { i32 (...)** }
%"class.std::__1::vector.15" = type { %"class.std::__1::__vector_base.16" }
%"class.std::__1::__vector_base.16" = type { i32*, i32*, %"class.std::__1::__compressed_pair.17" }
%"class.std::__1::__compressed_pair.17" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"struct.std::__1::__compressed_pair_elem.18" = type { i32* }
%"class.std::__1::vector.22" = type { %"class.std::__1::__vector_base.23" }
%"class.std::__1::__vector_base.23" = type { %"struct.jxl::jpeg::JPEGQuantTable"*, %"struct.jxl::jpeg::JPEGQuantTable"*, %"class.std::__1::__compressed_pair.24" }
%"struct.jxl::jpeg::JPEGQuantTable" = type <{ %"struct.std::__1::array", i32, i32, i8, [3 x i8] }>
%"struct.std::__1::array" = type { [64 x i32] }
%"class.std::__1::__compressed_pair.24" = type { %"struct.std::__1::__compressed_pair_elem.25" }
%"struct.std::__1::__compressed_pair_elem.25" = type { %"struct.jxl::jpeg::JPEGQuantTable"* }
%"class.std::__1::vector.29" = type { %"class.std::__1::__vector_base.30" }
%"class.std::__1::__vector_base.30" = type { %"struct.jxl::jpeg::JPEGHuffmanCode"*, %"struct.jxl::jpeg::JPEGHuffmanCode"*, %"class.std::__1::__compressed_pair.33" }
%"struct.jxl::jpeg::JPEGHuffmanCode" = type <{ %"struct.std::__1::array.31", %"struct.std::__1::array.32", i32, i8, [3 x i8] }>
%"struct.std::__1::array.31" = type { [17 x i32] }
%"struct.std::__1::array.32" = type { [257 x i32] }
%"class.std::__1::__compressed_pair.33" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%"struct.std::__1::__compressed_pair_elem.34" = type { %"struct.jxl::jpeg::JPEGHuffmanCode"* }
%"class.std::__1::vector.38" = type { %"class.std::__1::__vector_base.39" }
%"class.std::__1::__vector_base.39" = type { %"struct.jxl::jpeg::JPEGComponent"*, %"struct.jxl::jpeg::JPEGComponent"*, %"class.std::__1::__compressed_pair.47" }
%"struct.jxl::jpeg::JPEGComponent" = type { i32, i32, i32, i32, i32, i32, %"class.std::__1::vector.40" }
%"class.std::__1::vector.40" = type { %"class.std::__1::__vector_base.41" }
%"class.std::__1::__vector_base.41" = type { i16*, i16*, %"class.std::__1::__compressed_pair.42" }
%"class.std::__1::__compressed_pair.42" = type { %"struct.std::__1::__compressed_pair_elem.43" }
%"struct.std::__1::__compressed_pair_elem.43" = type { i16* }
%"class.std::__1::__compressed_pair.47" = type { %"struct.std::__1::__compressed_pair_elem.48" }
%"struct.std::__1::__compressed_pair_elem.48" = type { %"struct.jxl::jpeg::JPEGComponent"* }
%"class.std::__1::vector.52" = type { %"class.std::__1::__vector_base.53" }
%"class.std::__1::__vector_base.53" = type { %"struct.jxl::jpeg::JPEGScanInfo"*, %"struct.jxl::jpeg::JPEGScanInfo"*, %"class.std::__1::__compressed_pair.69" }
%"struct.jxl::jpeg::JPEGScanInfo" = type { i32, i32, i32, i32, i32, %"struct.std::__1::array.54", i32, %"class.std::__1::vector.55", %"class.std::__1::vector.62" }
%"struct.std::__1::array.54" = type { [4 x %"struct.jxl::jpeg::JPEGComponentScanInfo"] }
%"struct.jxl::jpeg::JPEGComponentScanInfo" = type { i32, i32, i32 }
%"class.std::__1::vector.55" = type { %"class.std::__1::__vector_base.56" }
%"class.std::__1::__vector_base.56" = type { i32*, i32*, %"class.std::__1::__compressed_pair.57" }
%"class.std::__1::__compressed_pair.57" = type { %"struct.std::__1::__compressed_pair_elem.58" }
%"struct.std::__1::__compressed_pair_elem.58" = type { i32* }
%"class.std::__1::vector.62" = type { %"class.std::__1::__vector_base.63" }
%"class.std::__1::__vector_base.63" = type { %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"*, %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"*, %"class.std::__1::__compressed_pair.64" }
%"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo" = type { i32, i32 }
%"class.std::__1::__compressed_pair.64" = type { %"struct.std::__1::__compressed_pair_elem.65" }
%"struct.std::__1::__compressed_pair_elem.65" = type { %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"* }
%"class.std::__1::__compressed_pair.69" = type { %"struct.std::__1::__compressed_pair_elem.70" }
%"struct.std::__1::__compressed_pair_elem.70" = type { %"struct.jxl::jpeg::JPEGScanInfo"* }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.std::__1::vector.6"*, %"class.std::__1::vector.6"*, %"class.std::__1::__compressed_pair.10" }
%"class.std::__1::__compressed_pair.10" = type { %"struct.std::__1::__compressed_pair_elem.11" }
%"struct.std::__1::__compressed_pair_elem.11" = type { %"class.std::__1::vector.6"* }
%"class.std::__1::vector.6" = type { %"class.std::__1::__vector_base.7" }
%"class.std::__1::__vector_base.7" = type { i8*, i8*, %"class.std::__1::__compressed_pair.8" }
%"class.std::__1::__compressed_pair.8" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.jxl::YCbCrChromaSubsampling" = type <{ %"class.jxl::Fields", [3 x i32], i8, i8, [2 x i8] }>
%"struct.jxl::FrameOrigin" = type { i32, i32 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.75" }
%"class.std::__1::__compressed_pair.75" = type { %"struct.std::__1::__compressed_pair_elem.76" }
%"struct.std::__1::__compressed_pair_elem.76" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"struct.jxl::ImageMetadata" = type <{ %"class.jxl::Fields", i8, [7 x i8], %"struct.jxl::BitDepth", i8, i8, [6 x i8], %"struct.jxl::ColorEncoding", i32, i8, i8, i8, i8, %"class.jxl::SizeHeader", %"struct.jxl::ToneMapping", i32, [4 x i8], %"class.std::__1::vector.80", %"struct.jxl::CustomTransformData", %"class.jxl::PreviewHeader", %"struct.jxl::AnimationHeader", i64, i8, [7 x i8] }>
%"struct.jxl::BitDepth" = type <{ %"class.jxl::Fields", i8, [3 x i8], i32, i32, [4 x i8] }>
%"class.jxl::SizeHeader" = type { %"class.jxl::Fields", i8, i32, i32, i32, i32, i32 }
%"struct.jxl::ToneMapping" = type <{ %"class.jxl::Fields", i8, [3 x i8], float, float, i8, [3 x i8], float, [4 x i8] }>
%"class.std::__1::vector.80" = type { %"class.std::__1::__vector_base.81" }
%"class.std::__1::__vector_base.81" = type { %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"*, %"class.std::__1::__compressed_pair.82" }
%"struct.jxl::ExtraChannelInfo" = type { %"class.jxl::Fields", i8, i32, %"struct.jxl::BitDepth", i32, %"class.std::__1::basic_string", i8, [4 x float], i32 }
%"class.std::__1::__compressed_pair.82" = type { %"struct.std::__1::__compressed_pair_elem.83" }
%"struct.std::__1::__compressed_pair_elem.83" = type { %"struct.jxl::ExtraChannelInfo"* }
%"struct.jxl::CustomTransformData" = type <{ %"class.jxl::Fields", i8, i8, [6 x i8], %"struct.jxl::OpsinInverseMatrix", i32, [15 x float], [55 x float], [210 x float], [4 x i8] }>
%"struct.jxl::OpsinInverseMatrix" = type <{ %"class.jxl::Fields", i8, [3 x i8], [9 x float], [3 x float], [4 x float], [4 x i8] }>
%"class.jxl::PreviewHeader" = type { %"class.jxl::Fields", i8, i32, i32, i32, i32, i32 }
%"struct.jxl::AnimationHeader" = type <{ %"class.jxl::Fields", i32, i32, i32, i8, [3 x i8] }>
%"struct.jxl::ColorEncoding" = type { %"class.jxl::Fields", i8, i32, i32, %"struct.jxl::CustomTransferFunction", i32, i8, i8, %"class.jxl::PaddedBytes", i32, %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy" }
%"struct.jxl::CustomTransferFunction" = type { %"class.jxl::Fields", i32, i8, i32, i32 }
%"class.jxl::PaddedBytes" = type { i64, i64, %"class.std::__1::unique_ptr" }
%"struct.jxl::Customxy" = type { %"class.jxl::Fields", i32, i32 }
%"class.std::__1::vector.87" = type { %"class.std::__1::__vector_base.88" }
%"class.std::__1::__vector_base.88" = type { %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.std::__1::__compressed_pair.89" }
%"class.std::__1::__compressed_pair.89" = type { %"struct.std::__1::__compressed_pair_elem.90" }
%"struct.std::__1::__compressed_pair_elem.90" = type { %"class.jxl::Plane"* }
%"struct.hwy::ChosenTarget" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.107" }
%"struct.std::__1::__atomic_base.107" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.jxl::ThreadPool::RunCallState" = type { i32 (i64)*, %class.anon* }
%class.anon = type { %"class.jxl::Image3"*, %"class.jxl::Image3"**, i64*, %"struct.hwy::N_SSE4::Simd"*, float** }
%"class.jxl::ThreadPool::RunCallState.120" = type { i32 (i64)*, %class.anon.1* }
%class.anon.1 = type { %"class.jxl::Image3"*, %"class.jxl::Image3"**, i64*, %"struct.hwy::N_SSE4::Simd"*, float** }
%"class.jxl::ThreadPool::RunCallState.124" = type { i32 (i64)*, %class.anon.2* }
%class.anon.2 = type { %"class.jxl::Image3"*, %"class.jxl::Image3"**, %"class.jxl::Image3"**, i64*, %"struct.hwy::N_SSE4::Simd"*, float** }
%"class.jxl::Rect" = type { i64, i64, i64, i64 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.jxl::ThreadPool::RunCallState.125" = type { i32 (i64)*, %class.anon.94* }
%class.anon.94 = type { i64*, i64*, %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::Plane"**, %"class.jxl::Plane"**, %"class.jxl::Plane"**, i64*, i64*, %"struct.hwy::N_SSE4::Simd"*, %"class.hwy::N_SSE4::Vec128"*, %"class.hwy::N_SSE4::Vec128"*, %"class.hwy::N_SSE4::Vec128"*, %"class.hwy::N_SSE4::Vec128"*, %"class.hwy::N_SSE4::Vec128"*, %"class.hwy::N_SSE4::Vec128"*, %"class.hwy::N_SSE4::Vec128"*, %"class.hwy::N_SSE4::Vec128"* }
%"class.hwy::N_SSE4::Vec128" = type { <4 x float> }
%"class.jxl::ThreadPool::RunCallState.131" = type { i32 (i64)*, %class.anon.95* }
%class.anon.95 = type { %"class.jxl::Image3"*, %"class.jxl::Image3"**, i64*, %"struct.hwy::N_AVX2::Simd"*, float** }
%"class.jxl::ThreadPool::RunCallState.133" = type { i32 (i64)*, %class.anon.96* }
%class.anon.96 = type { %"class.jxl::Image3"*, %"class.jxl::Image3"**, i64*, %"struct.hwy::N_AVX2::Simd"*, float** }
%"class.jxl::ThreadPool::RunCallState.137" = type { i32 (i64)*, %class.anon.97* }
%class.anon.97 = type { %"class.jxl::Image3"*, %"class.jxl::Image3"**, %"class.jxl::Image3"**, i64*, %"struct.hwy::N_AVX2::Simd"*, float** }
%"class.jxl::ThreadPool::RunCallState.138" = type { i32 (i64)*, %class.anon.98* }
%class.anon.98 = type { i64*, i64*, %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::Plane"**, %"class.jxl::Plane"**, %"class.jxl::Plane"**, i64*, i64*, %"struct.hwy::N_AVX2::Simd"*, %"class.hwy::N_AVX2::Vec256"*, %"class.hwy::N_AVX2::Vec256"*, %"class.hwy::N_AVX2::Vec256"*, %"class.hwy::N_AVX2::Vec256"*, %"class.hwy::N_AVX2::Vec256"*, %"class.hwy::N_AVX2::Vec256"*, %"class.hwy::N_AVX2::Vec256"*, %"class.hwy::N_AVX2::Vec256"* }
%"class.hwy::N_AVX2::Vec256" = type { <8 x float> }
%"class.jxl::ThreadPool::RunCallState.144" = type { i32 (i64)*, %class.anon.99* }
%class.anon.99 = type { %"class.jxl::Image3"*, %"class.jxl::Image3"**, i64*, %"struct.hwy::N_AVX3::Simd"*, float** }
%"class.jxl::ThreadPool::RunCallState.146" = type { i32 (i64)*, %class.anon.100* }
%class.anon.100 = type { %"class.jxl::Image3"*, %"class.jxl::Image3"**, i64*, %"struct.hwy::N_AVX3::Simd"*, float** }
%"class.jxl::ThreadPool::RunCallState.150" = type { i32 (i64)*, %class.anon.101* }
%class.anon.101 = type { %"class.jxl::Image3"*, %"class.jxl::Image3"**, %"class.jxl::Image3"**, i64*, %"struct.hwy::N_AVX3::Simd"*, float** }
%"class.jxl::ThreadPool::RunCallState.151" = type { i32 (i64)*, %class.anon.102* }
%class.anon.102 = type { i64*, i64*, %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::Plane"**, %"class.jxl::Plane"**, %"class.jxl::Plane"**, i64*, i64*, %"struct.hwy::N_AVX3::Simd"*, %"class.hwy::N_AVX3::Vec512"*, %"class.hwy::N_AVX3::Vec512"*, %"class.hwy::N_AVX3::Vec512"*, %"class.hwy::N_AVX3::Vec512"*, %"class.hwy::N_AVX3::Vec512"*, %"class.hwy::N_AVX3::Vec512"*, %"class.hwy::N_AVX3::Vec512"*, %"class.hwy::N_AVX3::Vec512"* }
%"class.hwy::N_AVX3::Vec512" = type { <16 x float> }
%"class.jxl::ThreadPool::RunCallState.158" = type { i32 (i64)*, %class.anon.103* }
%class.anon.103 = type { %"class.jxl::Image3"*, %"class.jxl::Image3"**, i64*, %"struct.hwy::N_SCALAR::Simd"*, float** }
%"class.jxl::ThreadPool::RunCallState.159" = type { i32 (i64)*, %class.anon.104* }
%class.anon.104 = type { %"class.jxl::Image3"*, %"class.jxl::Image3"**, i64*, %"struct.hwy::N_SCALAR::Simd"*, float** }
%"class.jxl::ThreadPool::RunCallState.161" = type { i32 (i64)*, %class.anon.105* }
%class.anon.105 = type { %"class.jxl::Image3"*, %"class.jxl::Image3"**, %"class.jxl::Image3"**, i64*, %"struct.hwy::N_SCALAR::Simd"*, float** }
%"class.jxl::ThreadPool::RunCallState.162" = type { i32 (i64)*, %class.anon.106* }
%class.anon.106 = type { i64*, i64*, %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::Plane"**, %"class.jxl::Plane"**, %"class.jxl::Plane"**, i64*, i64*, %"struct.hwy::N_SCALAR::Simd"*, %"struct.hwy::N_SCALAR::Vec1"*, %"struct.hwy::N_SCALAR::Vec1"*, %"struct.hwy::N_SCALAR::Vec1"*, %"struct.hwy::N_SCALAR::Vec1"*, %"struct.hwy::N_SCALAR::Vec1"*, %"struct.hwy::N_SCALAR::Vec1"*, %"struct.hwy::N_SCALAR::Vec1"*, %"struct.hwy::N_SCALAR::Vec1"* }
%"struct.hwy::N_SCALAR::Vec1" = type { float }
%"class.jxl::Image3.108" = type { [3 x %"class.jxl::Plane.109"] }
%"class.jxl::Plane.109" = type { %"struct.jxl::PlaneBase" }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.std::__1::allocator.72" = type { i8 }

$_ZNK3jxl13ColorEncoding17SameColorEncodingERKS0_ = comdat any

$_ZNK3jxl11ImageBundle4CopyEv = comdat any

$_ZN3jxl11ImageBundleaSEOS0_ = comdat any

$_ZN3jxl11ImageBundleD2Ev = comdat any

$_ZN3jxl14ConvertToFloatIhEENS_6Image3IfEERKNS1_IT_EE = comdat any

$_ZNSt3__16vectorIN3jxl5PlaneIfEENS_9allocatorIS3_EEE7reserveEm = comdat any

$_ZN3jxl9CopyImageIfEENS_5PlaneIT_EERKS3_ = comdat any

$_ZN3jxl11CopyImageToIfEEvRKNS_4RectERKNS_6Image3IT_EES3_PS6_ = comdat any

$_ZNSt3__16vectorIN3jxl5PlaneIfEENS_9allocatorIS3_EEE24__emplace_back_slow_pathIJS3_EEEvDpOT_ = comdat any

$_ZN3jxl4jpeg8JPEGDataC2ERKS1_ = comdat any

$_ZNSt3__16vectorINS0_IhNS_9allocatorIhEEEENS1_IS3_EEEC2ERKS5_ = comdat any

$_ZNSt3__16vectorIN3jxl4jpeg13JPEGComponentENS_9allocatorIS3_EEEC2ERKS6_ = comdat any

$_ZNSt3__19allocatorIN3jxl4jpeg12JPEGScanInfoEE9constructIS3_JRS3_EEEvPT_DpOT0_ = comdat any

$_ZN3jxl10ThreadPool14ReturnTrueInitEm = comdat any

$_ZN3jxl8N_SCALAR14LinearRGBToXYBIN3hwy8N_SCALAR4Vec1IfEEEEvT_S6_S6_PKfPfS9_S9_ = comdat any

$_ZN3jxl6Image3IfEC2EONS_5PlaneIfEES4_S4_ = comdat any

@.str = private unnamed_addr constant [23 x i8] c"%s:%d: JXL_ASSERT: %s\0A\00", align 1
@.str.1 = private unnamed_addr constant [48 x i8] c"../../third_party/libjxl/src/lib/jxl/enc_xyb.cc\00", align 1
@.str.2 = private unnamed_addr constant [43 x i8] c"std::abs(approx[0] - approx[i]) <= 1.2E-7f\00", align 1
@.str.3 = private unnamed_addr constant [16 x i8] c"max_err < 8E-7f\00", align 1
@_ZZN3jxl6N_SSE415LinearSRGBToXYBERKNS_6Image3IfEEPKfPNS_10ThreadPoolEPS2_E1d = internal constant %"struct.hwy::N_SSE4::Simd" undef, align 1
@.str.4 = private unnamed_addr constant [12 x i8] c"LinearToXYB\00", align 1
@_ZZN3jxl6N_SSE49SRGBToXYBERKNS_6Image3IfEEPKfPNS_10ThreadPoolEPS2_E1d = internal constant %"struct.hwy::N_SSE4::Simd" undef, align 1
@.str.5 = private unnamed_addr constant [10 x i8] c"SRGBToXYB\00", align 1
@_ZZN3jxl6N_SSE418SRGBToXYBAndLinearERKNS_6Image3IfEEPKfPNS_10ThreadPoolEPS2_S9_E1d = internal constant %"struct.hwy::N_SSE4::Simd" undef, align 1
@.str.6 = private unnamed_addr constant [19 x i8] c"SRGBToXYBAndLinear\00", align 1
@.str.7 = private unnamed_addr constant [19 x i8] c"SameSize(in, *xyb)\00", align 1
@.str.8 = private unnamed_addr constant [22 x i8] c"%s:%d: JXL_CHECK: %s\0A\00", align 1
@.str.9 = private unnamed_addr constant [69 x i8] c"TransformIfNeeded(in, c_linear_srgb, pool, linear_storage_ptr, &ptr)\00", align 1
@.str.10 = private unnamed_addr constant [26 x i8] c"ptr == linear_storage_ptr\00", align 1
@_ZZN3jxl6N_SSE410RgbToYcbcrERKNS_5PlaneIfEES4_S4_PS2_S5_S5_PNS_10ThreadPoolEE2df = internal constant %"struct.hwy::N_SSE4::Simd" undef, align 1
@.str.11 = private unnamed_addr constant [11 x i8] c"RgbToYcbCr\00", align 1
@_ZZN3jxl6N_AVX215LinearSRGBToXYBERKNS_6Image3IfEEPKfPNS_10ThreadPoolEPS2_E1d = internal constant %"struct.hwy::N_AVX2::Simd" undef, align 1
@_ZZN3jxl6N_AVX29SRGBToXYBERKNS_6Image3IfEEPKfPNS_10ThreadPoolEPS2_E1d = internal constant %"struct.hwy::N_AVX2::Simd" undef, align 1
@_ZZN3jxl6N_AVX218SRGBToXYBAndLinearERKNS_6Image3IfEEPKfPNS_10ThreadPoolEPS2_S9_E1d = internal constant %"struct.hwy::N_AVX2::Simd" undef, align 1
@_ZZN3jxl6N_AVX210RgbToYcbcrERKNS_5PlaneIfEES4_S4_PS2_S5_S5_PNS_10ThreadPoolEE2df = internal constant %"struct.hwy::N_AVX2::Simd" undef, align 1
@_ZZN3jxl6N_AVX315LinearSRGBToXYBERKNS_6Image3IfEEPKfPNS_10ThreadPoolEPS2_E1d = internal constant %"struct.hwy::N_AVX3::Simd" undef, align 1
@_ZZN3jxl6N_AVX39SRGBToXYBERKNS_6Image3IfEEPKfPNS_10ThreadPoolEPS2_E1d = internal constant %"struct.hwy::N_AVX3::Simd" undef, align 1
@_ZZN3jxl6N_AVX318SRGBToXYBAndLinearERKNS_6Image3IfEEPKfPNS_10ThreadPoolEPS2_S9_E1d = internal constant %"struct.hwy::N_AVX3::Simd" undef, align 1
@_ZZN3jxl6N_AVX310RgbToYcbcrERKNS_5PlaneIfEES4_S4_PS2_S5_S5_PNS_10ThreadPoolEE2df = internal constant %"struct.hwy::N_AVX3::Simd" undef, align 1
@_ZZN3jxl8N_SCALAR15LinearSRGBToXYBERKNS_6Image3IfEEPKfPNS_10ThreadPoolEPS2_E1d = internal constant %"struct.hwy::N_SCALAR::Simd" undef, align 1
@_ZZN3jxl8N_SCALAR9SRGBToXYBERKNS_6Image3IfEEPKfPNS_10ThreadPoolEPS2_E1d = internal constant %"struct.hwy::N_SCALAR::Simd" undef, align 1
@_ZZN3jxl8N_SCALAR18SRGBToXYBAndLinearERKNS_6Image3IfEEPKfPNS_10ThreadPoolEPS2_S9_E1d = internal constant %"struct.hwy::N_SCALAR::Simd" undef, align 1
@_ZZN3jxl8N_SCALAR10RgbToYcbcrERKNS_5PlaneIfEES4_S4_PS2_S5_S5_PNS_10ThreadPoolEE2df = internal constant %"struct.hwy::N_SCALAR::Simd" undef, align 1
@_ZN3jxlL25ToXYBHighwayDispatchTableE = internal unnamed_addr constant [12 x %"class.jxl::ImageBundle"* (%"class.jxl::ImageBundle"*, %"class.jxl::ThreadPool"*, %"class.jxl::Image3"*, %"class.jxl::ImageBundle"*)*] [%"class.jxl::ImageBundle"* (%"class.jxl::ImageBundle"*, %"class.jxl::ThreadPool"*, %"class.jxl::Image3"*, %"class.jxl::ImageBundle"*)* @_ZN3hwy13FunctionCacheIPKN3jxl11ImageBundleEJRS3_PNS1_10ThreadPoolEPNS1_6Image3IfEEPS2_EE13ChooseAndCallIXadL_ZNS1_L25ToXYBHighwayDispatchTableEEEEES4_S5_S7_SA_SB_, %"class.jxl::ImageBundle"* (%"class.jxl::ImageBundle"*, %"class.jxl::ThreadPool"*, %"class.jxl::Image3"*, %"class.jxl::ImageBundle"*)* null, %"class.jxl::ImageBundle"* (%"class.jxl::ImageBundle"*, %"class.jxl::ThreadPool"*, %"class.jxl::Image3"*, %"class.jxl::ImageBundle"*)* null, %"class.jxl::ImageBundle"* (%"class.jxl::ImageBundle"*, %"class.jxl::ThreadPool"*, %"class.jxl::Image3"*, %"class.jxl::ImageBundle"*)* null, %"class.jxl::ImageBundle"* (%"class.jxl::ImageBundle"*, %"class.jxl::ThreadPool"*, %"class.jxl::Image3"*, %"class.jxl::ImageBundle"*)* @_ZN3jxl6N_AVX35ToXYBERKNS_11ImageBundleEPNS_10ThreadPoolEPNS_6Image3IfEEPS1_, %"class.jxl::ImageBundle"* (%"class.jxl::ImageBundle"*, %"class.jxl::ThreadPool"*, %"class.jxl::Image3"*, %"class.jxl::ImageBundle"*)* @_ZN3jxl6N_AVX25ToXYBERKNS_11ImageBundleEPNS_10ThreadPoolEPNS_6Image3IfEEPS1_, %"class.jxl::ImageBundle"* (%"class.jxl::ImageBundle"*, %"class.jxl::ThreadPool"*, %"class.jxl::Image3"*, %"class.jxl::ImageBundle"*)* null, %"class.jxl::ImageBundle"* (%"class.jxl::ImageBundle"*, %"class.jxl::ThreadPool"*, %"class.jxl::Image3"*, %"class.jxl::ImageBundle"*)* @_ZN3jxl6N_SSE45ToXYBERKNS_11ImageBundleEPNS_10ThreadPoolEPNS_6Image3IfEEPS1_, %"class.jxl::ImageBundle"* (%"class.jxl::ImageBundle"*, %"class.jxl::ThreadPool"*, %"class.jxl::Image3"*, %"class.jxl::ImageBundle"*)* null, %"class.jxl::ImageBundle"* (%"class.jxl::ImageBundle"*, %"class.jxl::ThreadPool"*, %"class.jxl::Image3"*, %"class.jxl::ImageBundle"*)* null, %"class.jxl::ImageBundle"* (%"class.jxl::ImageBundle"*, %"class.jxl::ThreadPool"*, %"class.jxl::Image3"*, %"class.jxl::ImageBundle"*)* null, %"class.jxl::ImageBundle"* (%"class.jxl::ImageBundle"*, %"class.jxl::ThreadPool"*, %"class.jxl::Image3"*, %"class.jxl::ImageBundle"*)* @_ZN3jxl8N_SCALAR5ToXYBERKNS_11ImageBundleEPNS_10ThreadPoolEPNS_6Image3IfEEPS1_], align 16
@_ZN3hwy13chosen_targetE = external global %"struct.hwy::ChosenTarget", align 4
@_ZN3jxlL30RgbToYcbcrHighwayDispatchTableE = internal unnamed_addr constant [12 x void (%"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::ThreadPool"*)*] [void (%"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::ThreadPool"*)* @_ZN3hwy13FunctionCacheIvJRKN3jxl5PlaneIfEES5_S5_PS3_S6_S6_PNS1_10ThreadPoolEEE13ChooseAndCallIXadL_ZNS1_L30RgbToYcbcrHighwayDispatchTableEEEEEvS5_S5_S5_S6_S6_S6_S8_, void (%"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::ThreadPool"*)* null, void (%"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::ThreadPool"*)* null, void (%"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::ThreadPool"*)* null, void (%"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::ThreadPool"*)* @_ZN3jxl6N_AVX310RgbToYcbcrERKNS_5PlaneIfEES4_S4_PS2_S5_S5_PNS_10ThreadPoolE, void (%"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::ThreadPool"*)* @_ZN3jxl6N_AVX210RgbToYcbcrERKNS_5PlaneIfEES4_S4_PS2_S5_S5_PNS_10ThreadPoolE, void (%"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::ThreadPool"*)* null, void (%"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::ThreadPool"*)* @_ZN3jxl6N_SSE410RgbToYcbcrERKNS_5PlaneIfEES4_S4_PS2_S5_S5_PNS_10ThreadPoolE, void (%"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::ThreadPool"*)* null, void (%"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::ThreadPool"*)* null, void (%"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::ThreadPool"*)* null, void (%"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::ThreadPool"*)* @_ZN3jxl8N_SCALAR10RgbToYcbcrERKNS_5PlaneIfEES4_S4_PS2_S5_S5_PNS_10ThreadPoolE], align 16
@_ZN3jxlL32TestCubeRootHighwayDispatchTableE = internal unnamed_addr constant [12 x void ()*] [void ()* @_ZN3hwy13FunctionCacheIvJEE13ChooseAndCallIXadL_ZN3jxlL32TestCubeRootHighwayDispatchTableEEEEEvv, void ()* null, void ()* null, void ()* null, void ()* @_ZN3jxl6N_AVX312TestCubeRootEv, void ()* @_ZN3jxl6N_AVX212TestCubeRootEv, void ()* null, void ()* @_ZN3jxl6N_SSE412TestCubeRootEv, void ()* null, void ()* null, void ()* null, void ()* @_ZN3jxl8N_SCALAR12TestCubeRootEv], align 16
@__const._ZN3jxl18OpsinDynamicsImageERKNS_6Image3IhEE.metadata = private unnamed_addr constant <{ %"class.jxl::Fields", i8, [7 x i8], %"struct.jxl::BitDepth", i8, i8, [6 x i8], { %"class.jxl::Fields", i8, [3 x i8], i32, i32, [4 x i8], { %"class.jxl::Fields", i32, i8, [3 x i8], i32, i32 }, i32, i8, i8, [2 x i8], %"class.jxl::PaddedBytes", i32, [4 x i8], %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy" }, i32, i8, i8, i8, i8, { %"class.jxl::Fields", i8, [3 x i8], i32, i32, i32, i32, i32 }, %"struct.jxl::ToneMapping", i32, [4 x i8], %"class.std::__1::vector.80", %"struct.jxl::CustomTransformData", { %"class.jxl::Fields", i8, [3 x i8], i32, i32, i32, i32, i32 }, %"struct.jxl::AnimationHeader", i64, i8, [7 x i8] }> <{ %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i8 -86, [7 x i8] c"\AA\AA\AA\AA\AA\AA\AA", %"struct.jxl::BitDepth" <{ %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i8 -86, [3 x i8] c"\AA\AA\AA", i32 -1431655766, i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA" }>, i8 -86, i8 -86, [6 x i8] c"\AA\AA\AA\AA\AA\AA", { %"class.jxl::Fields", i8, [3 x i8], i32, i32, [4 x i8], { %"class.jxl::Fields", i32, i8, [3 x i8], i32, i32 }, i32, i8, i8, [2 x i8], %"class.jxl::PaddedBytes", i32, [4 x i8], %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy" } { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i8 -86, [3 x i8] c"\AA\AA\AA", i32 -1431655766, i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", { %"class.jxl::Fields", i32, i8, [3 x i8], i32, i32 } { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i32 -1431655766, i8 -86, [3 x i8] c"\AA\AA\AA", i32 -1431655766, i32 -1431655766 }, i32 -1431655766, i8 -86, i8 -86, [2 x i8] c"\AA\AA", %"class.jxl::PaddedBytes" { i64 -6148914691236517206, i64 -6148914691236517206, %"class.std::__1::unique_ptr" { %"class.std::__1::__compressed_pair" { %"struct.std::__1::__compressed_pair_elem" { i8* inttoptr (i64 -6148914691236517206 to i8*) } } } }, i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", %"struct.jxl::Customxy" { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i32 -1431655766, i32 -1431655766 }, %"struct.jxl::Customxy" { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i32 -1431655766, i32 -1431655766 }, %"struct.jxl::Customxy" { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i32 -1431655766, i32 -1431655766 }, %"struct.jxl::Customxy" { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i32 -1431655766, i32 -1431655766 } }, i32 -1431655766, i8 -86, i8 -86, i8 -86, i8 -86, { %"class.jxl::Fields", i8, [3 x i8], i32, i32, i32, i32, i32 } { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i8 -86, [3 x i8] c"\AA\AA\AA", i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766 }, %"struct.jxl::ToneMapping" <{ %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i8 -86, [3 x i8] c"\AA\AA\AA", float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, i8 -86, [3 x i8] c"\AA\AA\AA", float 0xFFFFFFFFE0000000, [4 x i8] c"\AA\AA\AA\AA" }>, i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", %"class.std::__1::vector.80" { %"class.std::__1::__vector_base.81" { %"struct.jxl::ExtraChannelInfo"* inttoptr (i64 -6148914691236517206 to %"struct.jxl::ExtraChannelInfo"*), %"struct.jxl::ExtraChannelInfo"* inttoptr (i64 -6148914691236517206 to %"struct.jxl::ExtraChannelInfo"*), %"class.std::__1::__compressed_pair.82" { %"struct.std::__1::__compressed_pair_elem.83" { %"struct.jxl::ExtraChannelInfo"* inttoptr (i64 -6148914691236517206 to %"struct.jxl::ExtraChannelInfo"*) } } } }, %"struct.jxl::CustomTransformData" <{ %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i8 -86, i8 -86, [6 x i8] c"\AA\AA\AA\AA\AA\AA", %"struct.jxl::OpsinInverseMatrix" <{ %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i8 -86, [3 x i8] c"\AA\AA\AA", [9 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [3 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [4 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [4 x i8] c"\AA\AA\AA\AA" }>, i32 -1431655766, [15 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [55 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [210 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [4 x i8] c"\AA\AA\AA\AA" }>, { %"class.jxl::Fields", i8, [3 x i8], i32, i32, i32, i32, i32 } { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i8 -86, [3 x i8] c"\AA\AA\AA", i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766 }, %"struct.jxl::AnimationHeader" <{ %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i32 -1431655766, i32 -1431655766, i32 -1431655766, i8 -86, [3 x i8] c"\AA\AA\AA" }>, i64 -6148914691236517206, i8 -86, [7 x i8] c"\AA\AA\AA\AA\AA\AA\AA" }>, align 8
@.str.12 = private unnamed_addr constant [55 x i8] c"ib.TransformTo(ColorEncoding::LinearSRGB(ib.IsGray()))\00", align 1
@.str.13 = private unnamed_addr constant [54 x i8] c"../../third_party/libjxl/src/lib/jxl/image_metadata.h\00", align 1
@.str.14 = private unnamed_addr constant [35 x i8] c"tone_mapping.intensity_target != 0\00", align 1
@.str.15 = private unnamed_addr constant [49 x i8] c"../../third_party/libjxl/src/lib/jxl/image_ops.h\00", align 1
@.str.16 = private unnamed_addr constant [29 x i8] c"SameSize(rect_from, rect_to)\00", align 1
@.str.18 = private unnamed_addr constant [20 x i8] c"SameSize(from, *to)\00", align 1
@_ZTVN3jxl4jpeg8JPEGDataE = external unnamed_addr constant { [6 x i8*] }, align 8
@_ZTVN3jxl13ColorEncodingE = external unnamed_addr constant { [6 x i8*] }, align 8
@_ZTVN3jxl13ImageMetadataE = external unnamed_addr constant { [6 x i8*] }, align 8
@.str.21 = private unnamed_addr constant [45 x i8] c"../../third_party/libjxl/src/lib/jxl/image.h\00", align 1
@.str.22 = private unnamed_addr constant [25 x i8] c"SameSize(plane0, plane1)\00", align 1
@.str.23 = private unnamed_addr constant [25 x i8] c"SameSize(plane0, plane2)\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl6N_SSE412TestCubeRootEv() #0 {
  br label %3

1:                                                ; preds = %69
  %2 = fcmp olt float %73, 0x3EAAD7F2A0000000
  br i1 %2, label %64, label %61

3:                                                ; preds = %69, %0
  %4 = phi float [ 0.000000e+00, %0 ], [ %73, %69 ]
  %5 = phi i64 [ 0, %0 ], [ %74, %69 ]
  %6 = uitofp i64 %5 to float
  %7 = fmul float %6, 0x3EE4F8B580000000
  %8 = tail call float @cbrtf(float %7) #18
  %9 = insertelement <4 x float> undef, float %7, i32 0
  %10 = shufflevector <4 x float> %9, <4 x float> undef, <4 x i32> zeroinitializer
  %11 = fmul <4 x float> %10, <float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000>
  %12 = bitcast <4 x float> %10 to <4 x i32>
  %13 = icmp eq <4 x i32> %12, zeroinitializer
  %14 = sext <4 x i1> %13 to <4 x i32>
  %15 = bitcast <4 x i32> %14 to <2 x i64>
  %16 = ashr <4 x i32> %12, <i32 23, i32 23, i32 23, i32 23>
  %17 = mul nsw <4 x i32> %16, <i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202>
  %18 = add <4 x i32> %17, <i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752>
  %19 = bitcast <4 x i32> %18 to <2 x i64>
  %20 = xor <2 x i64> %15, <i64 -1, i64 -1>
  %21 = and <2 x i64> %19, %20
  %22 = bitcast <2 x i64> %21 to <4 x float>
  %23 = fmul <4 x float> %22, %22
  %24 = fmul <4 x float> %23, %23
  %25 = fmul <4 x float> %22, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %26 = fmul <4 x float> %11, %24
  %27 = fsub <4 x float> %25, %26
  %28 = fmul <4 x float> %27, %27
  %29 = fmul <4 x float> %28, %28
  %30 = fmul <4 x float> %27, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %31 = fmul <4 x float> %11, %29
  %32 = fsub <4 x float> %30, %31
  %33 = fmul <4 x float> %32, %32
  %34 = fmul <4 x float> %33, %33
  %35 = fmul <4 x float> %32, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %36 = fmul <4 x float> %11, %34
  %37 = fsub <4 x float> %35, %36
  %38 = fmul <4 x float> %37, %37
  %39 = fmul <4 x float> %38, %38
  %40 = fmul <4 x float> %10, %39
  %41 = fsub <4 x float> %37, %40
  %42 = fmul <4 x float> %41, <float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000>
  %43 = fadd <4 x float> %37, %42
  %44 = fmul <4 x float> %43, %43
  %45 = fmul <4 x float> %10, %44
  %46 = fadd <4 x float> %45, zeroinitializer
  %47 = extractelement <4 x float> %46, i32 0
  %48 = extractelement <4 x float> %46, i32 1
  %49 = fsub float %47, %48
  %50 = tail call float @llvm.fabs.f32(float %49) #13
  %51 = fcmp ugt float %50, 0x3E801B2B20000000
  %52 = extractelement <4 x float> %46, i32 3
  br i1 %51, label %58, label %53

53:                                               ; preds = %3
  %54 = extractelement <4 x float> %46, i32 2
  %55 = fsub float %47, %54
  %56 = tail call float @llvm.fabs.f32(float %55) #13
  %57 = fcmp ugt float %56, 0x3E801B2B20000000
  br i1 %57, label %58, label %65

58:                                               ; preds = %65, %53, %3
  %59 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.1, i64 0, i64 0), i32 97, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.2, i64 0, i64 0)) #13
  %60 = tail call zeroext i1 @_ZN3jxl5AbortEv() #21
  unreachable

61:                                               ; preds = %1
  %62 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.1, i64 0, i64 0), i32 104, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.3, i64 0, i64 0)) #13
  %63 = tail call zeroext i1 @_ZN3jxl5AbortEv() #21
  unreachable

64:                                               ; preds = %1
  ret void

65:                                               ; preds = %53
  %66 = fsub float %47, %52
  %67 = tail call float @llvm.fabs.f32(float %66) #13
  %68 = fcmp ugt float %67, 0x3E801B2B20000000
  br i1 %68, label %58, label %69

69:                                               ; preds = %65
  %70 = fsub float %47, %8
  %71 = tail call float @llvm.fabs.f32(float %70) #13
  %72 = fcmp olt float %4, %71
  %73 = select i1 %72, float %71, float %4
  %74 = add nuw nsw i64 %5, 1
  %75 = icmp eq i64 %74, 2000000
  br i1 %75, label %1, label %3
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree nounwind readnone
declare float @cbrtf(float) local_unnamed_addr #2

declare zeroext i1 @_ZN3jxl5DebugEPKcz(i8*, ...) local_unnamed_addr #3

; Function Attrs: noreturn
declare zeroext i1 @_ZN3jxl5AbortEv() local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl6N_SSE415LinearSRGBToXYBERKNS_6Image3IfEEPKfPNS_10ThreadPoolEPS2_(%"class.jxl::Image3"* dereferenceable(96), float* noalias, %"class.jxl::ThreadPool"* readonly, %"class.jxl::Image3"* noalias) local_unnamed_addr #5 {
  %5 = alloca %"class.jxl::ThreadPool::RunCallState", align 8
  %6 = alloca %"class.jxl::ThreadPool::RunCallState", align 8
  %7 = alloca double, align 8
  %8 = alloca %"class.jxl::ThreadPool", align 8
  %9 = alloca float*, align 8
  %10 = alloca %"class.jxl::Image3"*, align 8
  %11 = alloca i64, align 8
  %12 = alloca %class.anon, align 8
  store float* %1, float** %9, align 8
  store %"class.jxl::Image3"* %3, %"class.jxl::Image3"** %10, align 8
  %13 = bitcast i64* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %13) #13
  %14 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 0, i32 0, i32 0
  %15 = load i32, i32* %14, align 8
  %16 = zext i32 %15 to i64
  store i64 %16, i64* %11, align 8
  %17 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 0, i32 0, i32 1
  %18 = load i32, i32* %17, align 4
  %19 = bitcast %class.anon* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %19) #13
  %20 = getelementptr inbounds %class.anon, %class.anon* %12, i64 0, i32 0
  store %"class.jxl::Image3"* %0, %"class.jxl::Image3"** %20, align 8
  %21 = getelementptr inbounds %class.anon, %class.anon* %12, i64 0, i32 1
  store %"class.jxl::Image3"** %10, %"class.jxl::Image3"*** %21, align 8
  %22 = getelementptr inbounds %class.anon, %class.anon* %12, i64 0, i32 2
  store i64* %11, i64** %22, align 8
  %23 = getelementptr inbounds %class.anon, %class.anon* %12, i64 0, i32 3
  store %"struct.hwy::N_SSE4::Simd"* @_ZZN3jxl6N_SSE415LinearSRGBToXYBERKNS_6Image3IfEEPKfPNS_10ThreadPoolEPS2_E1d, %"struct.hwy::N_SSE4::Simd"** %23, align 8
  %24 = getelementptr inbounds %class.anon, %class.anon* %12, i64 0, i32 4
  store float** %9, float*** %24, align 8
  %25 = bitcast double* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %25) #13
  store double 0xFFFFFFFFFFFFFFFF, double* %7, align 8
  call void @_ZN3jxl13TraceRunBeginEPKcPd(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i64 0, i64 0), double* nonnull %7) #13
  %26 = icmp eq %"class.jxl::ThreadPool"* %2, null
  br i1 %26, label %27, label %38

27:                                               ; preds = %4
  %28 = bitcast %"class.jxl::ThreadPool"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %28) #13
  %29 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %8, i64 0, i32 0
  %30 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %8, i64 0, i32 1
  store i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)* @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %29, align 8
  %31 = bitcast i8** %30 to %"class.jxl::ThreadPool"**
  store %"class.jxl::ThreadPool"* %8, %"class.jxl::ThreadPool"** %31, align 8
  %32 = icmp eq i32 %18, 0
  br i1 %32, label %49, label %33

33:                                               ; preds = %27
  %34 = bitcast %"class.jxl::ThreadPool::RunCallState"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %34) #13
  %35 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState", %"class.jxl::ThreadPool::RunCallState"* %5, i64 0, i32 0
  %36 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState", %"class.jxl::ThreadPool::RunCallState"* %5, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %35, align 8
  store %class.anon* %12, %class.anon** %36, align 8
  %37 = call i32 @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj(i8* nonnull %28, i8* nonnull %34, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_SSE415LinearSRGBToXYBERKNS_6Image3IfEEPKfPS0_PS6_E3$_0E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_SSE415LinearSRGBToXYBERKNS_6Image3IfEEPKfPS0_PS6_E3$_0E12CallDataFuncEPvjm", i32 0, i32 %18) #13
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %34) #13
  br label %49

38:                                               ; preds = %4
  %39 = icmp eq i32 %18, 0
  br i1 %39, label %51, label %40

40:                                               ; preds = %38
  %41 = bitcast %"class.jxl::ThreadPool::RunCallState"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %41) #13
  %42 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState", %"class.jxl::ThreadPool::RunCallState"* %6, i64 0, i32 0
  %43 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState", %"class.jxl::ThreadPool::RunCallState"* %6, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %42, align 8
  store %class.anon* %12, %class.anon** %43, align 8
  %44 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %2, i64 0, i32 0
  %45 = load i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)*, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %44, align 8
  %46 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %2, i64 0, i32 1
  %47 = load i8*, i8** %46, align 8
  %48 = call i32 %45(i8* %47, i8* nonnull %41, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_SSE415LinearSRGBToXYBERKNS_6Image3IfEEPKfPS0_PS6_E3$_0E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_SSE415LinearSRGBToXYBERKNS_6Image3IfEEPKfPS0_PS6_E3$_0E12CallDataFuncEPvjm", i32 0, i32 %18) #13
  br label %49

49:                                               ; preds = %27, %33, %40
  %50 = phi i8* [ %41, %40 ], [ %28, %33 ], [ %28, %27 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %50) #13
  br label %51

51:                                               ; preds = %49, %38
  %52 = load double, double* %7, align 8
  call void @_ZN3jxl11TraceRunEndEPKcd(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i64 0, i64 0), double %52) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %25) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %19) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %13) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl6N_SSE49SRGBToXYBERKNS_6Image3IfEEPKfPNS_10ThreadPoolEPS2_(%"class.jxl::Image3"* dereferenceable(96), float* noalias, %"class.jxl::ThreadPool"* readonly, %"class.jxl::Image3"* noalias) local_unnamed_addr #5 {
  %5 = alloca %"class.jxl::ThreadPool::RunCallState.120", align 8
  %6 = alloca %"class.jxl::ThreadPool::RunCallState.120", align 8
  %7 = alloca double, align 8
  %8 = alloca %"class.jxl::ThreadPool", align 8
  %9 = alloca float*, align 8
  %10 = alloca %"class.jxl::Image3"*, align 8
  %11 = alloca i64, align 8
  %12 = alloca %class.anon.1, align 8
  store float* %1, float** %9, align 8
  store %"class.jxl::Image3"* %3, %"class.jxl::Image3"** %10, align 8
  %13 = bitcast i64* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %13) #13
  %14 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 0, i32 0, i32 0
  %15 = load i32, i32* %14, align 8
  %16 = zext i32 %15 to i64
  store i64 %16, i64* %11, align 8
  %17 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 0, i32 0, i32 1
  %18 = load i32, i32* %17, align 4
  %19 = bitcast %class.anon.1* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %19) #13
  %20 = getelementptr inbounds %class.anon.1, %class.anon.1* %12, i64 0, i32 0
  store %"class.jxl::Image3"* %0, %"class.jxl::Image3"** %20, align 8
  %21 = getelementptr inbounds %class.anon.1, %class.anon.1* %12, i64 0, i32 1
  store %"class.jxl::Image3"** %10, %"class.jxl::Image3"*** %21, align 8
  %22 = getelementptr inbounds %class.anon.1, %class.anon.1* %12, i64 0, i32 2
  store i64* %11, i64** %22, align 8
  %23 = getelementptr inbounds %class.anon.1, %class.anon.1* %12, i64 0, i32 3
  store %"struct.hwy::N_SSE4::Simd"* @_ZZN3jxl6N_SSE49SRGBToXYBERKNS_6Image3IfEEPKfPNS_10ThreadPoolEPS2_E1d, %"struct.hwy::N_SSE4::Simd"** %23, align 8
  %24 = getelementptr inbounds %class.anon.1, %class.anon.1* %12, i64 0, i32 4
  store float** %9, float*** %24, align 8
  %25 = bitcast double* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %25) #13
  store double 0xFFFFFFFFFFFFFFFF, double* %7, align 8
  call void @_ZN3jxl13TraceRunBeginEPKcPd(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.5, i64 0, i64 0), double* nonnull %7) #13
  %26 = icmp eq %"class.jxl::ThreadPool"* %2, null
  br i1 %26, label %27, label %38

27:                                               ; preds = %4
  %28 = bitcast %"class.jxl::ThreadPool"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %28) #13
  %29 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %8, i64 0, i32 0
  %30 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %8, i64 0, i32 1
  store i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)* @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %29, align 8
  %31 = bitcast i8** %30 to %"class.jxl::ThreadPool"**
  store %"class.jxl::ThreadPool"* %8, %"class.jxl::ThreadPool"** %31, align 8
  %32 = icmp eq i32 %18, 0
  br i1 %32, label %49, label %33

33:                                               ; preds = %27
  %34 = bitcast %"class.jxl::ThreadPool::RunCallState.120"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %34) #13
  %35 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.120", %"class.jxl::ThreadPool::RunCallState.120"* %5, i64 0, i32 0
  %36 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.120", %"class.jxl::ThreadPool::RunCallState.120"* %5, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %35, align 8
  store %class.anon.1* %12, %class.anon.1** %36, align 8
  %37 = call i32 @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj(i8* nonnull %28, i8* nonnull %34, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_SSE49SRGBToXYBERKNS_6Image3IfEEPKfPS0_PS6_E3$_1E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_SSE49SRGBToXYBERKNS_6Image3IfEEPKfPS0_PS6_E3$_1E12CallDataFuncEPvjm", i32 0, i32 %18) #13
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %34) #13
  br label %49

38:                                               ; preds = %4
  %39 = icmp eq i32 %18, 0
  br i1 %39, label %51, label %40

40:                                               ; preds = %38
  %41 = bitcast %"class.jxl::ThreadPool::RunCallState.120"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %41) #13
  %42 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.120", %"class.jxl::ThreadPool::RunCallState.120"* %6, i64 0, i32 0
  %43 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.120", %"class.jxl::ThreadPool::RunCallState.120"* %6, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %42, align 8
  store %class.anon.1* %12, %class.anon.1** %43, align 8
  %44 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %2, i64 0, i32 0
  %45 = load i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)*, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %44, align 8
  %46 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %2, i64 0, i32 1
  %47 = load i8*, i8** %46, align 8
  %48 = call i32 %45(i8* %47, i8* nonnull %41, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_SSE49SRGBToXYBERKNS_6Image3IfEEPKfPS0_PS6_E3$_1E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_SSE49SRGBToXYBERKNS_6Image3IfEEPKfPS0_PS6_E3$_1E12CallDataFuncEPvjm", i32 0, i32 %18) #13
  br label %49

49:                                               ; preds = %27, %33, %40
  %50 = phi i8* [ %41, %40 ], [ %28, %33 ], [ %28, %27 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %50) #13
  br label %51

51:                                               ; preds = %49, %38
  %52 = load double, double* %7, align 8
  call void @_ZN3jxl11TraceRunEndEPKcd(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.5, i64 0, i64 0), double %52) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %25) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %19) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %13) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl6N_SSE418SRGBToXYBAndLinearERKNS_6Image3IfEEPKfPNS_10ThreadPoolEPS2_S9_(%"class.jxl::Image3"* dereferenceable(96), float* noalias, %"class.jxl::ThreadPool"* readonly, %"class.jxl::Image3"* noalias, %"class.jxl::Image3"* noalias) local_unnamed_addr #5 {
  %6 = alloca %"class.jxl::ThreadPool::RunCallState.124", align 8
  %7 = alloca %"class.jxl::ThreadPool::RunCallState.124", align 8
  %8 = alloca double, align 8
  %9 = alloca %"class.jxl::ThreadPool", align 8
  %10 = alloca float*, align 8
  %11 = alloca %"class.jxl::Image3"*, align 8
  %12 = alloca %"class.jxl::Image3"*, align 8
  %13 = alloca i64, align 8
  %14 = alloca %class.anon.2, align 8
  store float* %1, float** %10, align 8
  store %"class.jxl::Image3"* %3, %"class.jxl::Image3"** %11, align 8
  store %"class.jxl::Image3"* %4, %"class.jxl::Image3"** %12, align 8
  %15 = bitcast i64* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %15) #13
  %16 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 0, i32 0, i32 0
  %17 = load i32, i32* %16, align 8
  %18 = zext i32 %17 to i64
  store i64 %18, i64* %13, align 8
  %19 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 0, i32 0, i32 1
  %20 = load i32, i32* %19, align 4
  %21 = bitcast %class.anon.2* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %21) #13
  %22 = getelementptr inbounds %class.anon.2, %class.anon.2* %14, i64 0, i32 0
  store %"class.jxl::Image3"* %0, %"class.jxl::Image3"** %22, align 8
  %23 = getelementptr inbounds %class.anon.2, %class.anon.2* %14, i64 0, i32 1
  store %"class.jxl::Image3"** %12, %"class.jxl::Image3"*** %23, align 8
  %24 = getelementptr inbounds %class.anon.2, %class.anon.2* %14, i64 0, i32 2
  store %"class.jxl::Image3"** %11, %"class.jxl::Image3"*** %24, align 8
  %25 = getelementptr inbounds %class.anon.2, %class.anon.2* %14, i64 0, i32 3
  store i64* %13, i64** %25, align 8
  %26 = getelementptr inbounds %class.anon.2, %class.anon.2* %14, i64 0, i32 4
  store %"struct.hwy::N_SSE4::Simd"* @_ZZN3jxl6N_SSE418SRGBToXYBAndLinearERKNS_6Image3IfEEPKfPNS_10ThreadPoolEPS2_S9_E1d, %"struct.hwy::N_SSE4::Simd"** %26, align 8
  %27 = getelementptr inbounds %class.anon.2, %class.anon.2* %14, i64 0, i32 5
  store float** %10, float*** %27, align 8
  %28 = bitcast double* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %28) #13
  store double 0xFFFFFFFFFFFFFFFF, double* %8, align 8
  call void @_ZN3jxl13TraceRunBeginEPKcPd(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.6, i64 0, i64 0), double* nonnull %8) #13
  %29 = icmp eq %"class.jxl::ThreadPool"* %2, null
  br i1 %29, label %30, label %41

30:                                               ; preds = %5
  %31 = bitcast %"class.jxl::ThreadPool"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %31) #13
  %32 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %9, i64 0, i32 0
  %33 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %9, i64 0, i32 1
  store i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)* @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %32, align 8
  %34 = bitcast i8** %33 to %"class.jxl::ThreadPool"**
  store %"class.jxl::ThreadPool"* %9, %"class.jxl::ThreadPool"** %34, align 8
  %35 = icmp eq i32 %20, 0
  br i1 %35, label %52, label %36

36:                                               ; preds = %30
  %37 = bitcast %"class.jxl::ThreadPool::RunCallState.124"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %37) #13
  %38 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.124", %"class.jxl::ThreadPool::RunCallState.124"* %6, i64 0, i32 0
  %39 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.124", %"class.jxl::ThreadPool::RunCallState.124"* %6, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %38, align 8
  store %class.anon.2* %14, %class.anon.2** %39, align 8
  %40 = call i32 @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj(i8* nonnull %31, i8* nonnull %37, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_SSE418SRGBToXYBAndLinearERKNS_6Image3IfEEPKfPS0_PS6_SC_E3$_2E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_SSE418SRGBToXYBAndLinearERKNS_6Image3IfEEPKfPS0_PS6_SC_E3$_2E12CallDataFuncEPvjm", i32 0, i32 %20) #13
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %37) #13
  br label %52

41:                                               ; preds = %5
  %42 = icmp eq i32 %20, 0
  br i1 %42, label %54, label %43

43:                                               ; preds = %41
  %44 = bitcast %"class.jxl::ThreadPool::RunCallState.124"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %44) #13
  %45 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.124", %"class.jxl::ThreadPool::RunCallState.124"* %7, i64 0, i32 0
  %46 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.124", %"class.jxl::ThreadPool::RunCallState.124"* %7, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %45, align 8
  store %class.anon.2* %14, %class.anon.2** %46, align 8
  %47 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %2, i64 0, i32 0
  %48 = load i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)*, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %47, align 8
  %49 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %2, i64 0, i32 1
  %50 = load i8*, i8** %49, align 8
  %51 = call i32 %48(i8* %50, i8* nonnull %44, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_SSE418SRGBToXYBAndLinearERKNS_6Image3IfEEPKfPS0_PS6_SC_E3$_2E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_SSE418SRGBToXYBAndLinearERKNS_6Image3IfEEPKfPS0_PS6_SC_E3$_2E12CallDataFuncEPvjm", i32 0, i32 %20) #13
  br label %52

52:                                               ; preds = %30, %36, %43
  %53 = phi i8* [ %44, %43 ], [ %31, %36 ], [ %31, %30 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %53) #13
  br label %54

54:                                               ; preds = %52, %41
  %55 = load double, double* %8, align 8
  call void @_ZN3jxl11TraceRunEndEPKcd(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.6, i64 0, i64 0), double %55) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %28) #13
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %21) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %15) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.jxl::ImageBundle"* @_ZN3jxl6N_SSE45ToXYBERKNS_11ImageBundleEPNS_10ThreadPoolEPNS_6Image3IfEEPS1_(%"class.jxl::ImageBundle"* dereferenceable(368), %"class.jxl::ThreadPool"*, %"class.jxl::Image3"* noalias, %"class.jxl::ImageBundle"* noalias) #0 {
  %5 = alloca [48 x float], align 16
  %6 = alloca %"class.jxl::ImageBundle", align 8
  %7 = alloca %"class.jxl::Image3", align 8
  %8 = alloca %"class.jxl::ImageBundle", align 8
  %9 = alloca %"class.jxl::ImageBundle", align 8
  %10 = alloca %"class.jxl::ImageBundle"*, align 8
  %11 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %12 = load %"struct.jxl::jpeg::JPEGData"*, %"struct.jxl::jpeg::JPEGData"** %11, align 8
  %13 = icmp eq %"struct.jxl::jpeg::JPEGData"* %12, null
  br i1 %13, label %14, label %42

14:                                               ; preds = %4
  %15 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 0, i32 0, i32 0
  %16 = load i32, i32* %15, align 8
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %18, label %27

18:                                               ; preds = %14
  %19 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12, i32 0, i32 0
  %20 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %19, align 8
  %21 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12, i32 0, i32 1
  %22 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %21, align 8
  %23 = icmp eq %"class.jxl::Plane"* %20, %22
  br i1 %23, label %27, label %24

24:                                               ; preds = %18
  %25 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %20, i64 0, i32 0, i32 0
  %26 = load i32, i32* %25, align 8
  br label %27

27:                                               ; preds = %14, %18, %24
  %28 = phi i32 [ %16, %14 ], [ 0, %18 ], [ %26, %24 ]
  %29 = zext i32 %28 to i64
  %30 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 0, i32 0, i32 1
  %31 = load i32, i32* %30, align 4
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %33, label %49

33:                                               ; preds = %27
  %34 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12, i32 0, i32 0
  %35 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %34, align 8
  %36 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12, i32 0, i32 1
  %37 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %36, align 8
  %38 = icmp eq %"class.jxl::Plane"* %35, %37
  br i1 %38, label %49, label %39

39:                                               ; preds = %33
  %40 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %35, i64 0, i32 0, i32 1
  %41 = load i32, i32* %40, align 4
  br label %49

42:                                               ; preds = %4
  %43 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %12, i64 0, i32 1
  %44 = load i32, i32* %43, align 8
  %45 = sext i32 %44 to i64
  %46 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %12, i64 0, i32 2
  %47 = load i32, i32* %46, align 4
  %48 = sext i32 %47 to i64
  br label %63

49:                                               ; preds = %27, %33, %39
  %50 = phi i32 [ %31, %27 ], [ 0, %33 ], [ %41, %39 ]
  %51 = zext i32 %50 to i64
  %52 = zext i32 %16 to i64
  br i1 %17, label %53, label %63

53:                                               ; preds = %49
  %54 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12, i32 0, i32 0
  %55 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %54, align 8
  %56 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12, i32 0, i32 1
  %57 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %56, align 8
  %58 = icmp eq %"class.jxl::Plane"* %55, %57
  br i1 %58, label %63, label %59

59:                                               ; preds = %53
  %60 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %55, i64 0, i32 0, i32 0
  %61 = load i32, i32* %60, align 8
  %62 = zext i32 %61 to i64
  br label %63

63:                                               ; preds = %59, %53, %49, %42
  %64 = phi i64 [ %48, %42 ], [ %51, %59 ], [ %51, %53 ], [ %51, %49 ]
  %65 = phi i64 [ %45, %42 ], [ %29, %59 ], [ %29, %53 ], [ %29, %49 ]
  %66 = phi i64 [ %45, %42 ], [ %62, %59 ], [ 0, %53 ], [ %52, %49 ]
  %67 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %2, i64 0, i32 0, i64 0, i32 0, i32 0
  %68 = load i32, i32* %67, align 8
  %69 = zext i32 %68 to i64
  %70 = icmp eq i64 %66, %69
  br i1 %70, label %71, label %97

71:                                               ; preds = %63
  br i1 %13, label %76, label %72

72:                                               ; preds = %71
  %73 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %12, i64 0, i32 2
  %74 = load i32, i32* %73, align 4
  %75 = sext i32 %74 to i64
  br label %91

76:                                               ; preds = %71
  %77 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 0, i32 0, i32 1
  %78 = load i32, i32* %77, align 4
  %79 = zext i32 %78 to i64
  %80 = icmp eq i32 %78, 0
  br i1 %80, label %81, label %91

81:                                               ; preds = %76
  %82 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12, i32 0, i32 0
  %83 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %82, align 8
  %84 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12, i32 0, i32 1
  %85 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %84, align 8
  %86 = icmp eq %"class.jxl::Plane"* %83, %85
  br i1 %86, label %91, label %87

87:                                               ; preds = %81
  %88 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %83, i64 0, i32 0, i32 1
  %89 = load i32, i32* %88, align 4
  %90 = zext i32 %89 to i64
  br label %91

91:                                               ; preds = %72, %76, %81, %87
  %92 = phi i64 [ %75, %72 ], [ %90, %87 ], [ 0, %81 ], [ %79, %76 ]
  %93 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %2, i64 0, i32 0, i64 0, i32 0, i32 1
  %94 = load i32, i32* %93, align 4
  %95 = zext i32 %94 to i64
  %96 = icmp eq i64 %92, %95
  br i1 %96, label %100, label %97

97:                                               ; preds = %63, %91
  %98 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.1, i64 0, i64 0), i32 273, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.7, i64 0, i64 0)) #13
  %99 = tail call zeroext i1 @_ZN3jxl5AbortEv() #21
  unreachable

100:                                              ; preds = %91
  %101 = bitcast [48 x float]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 192, i8* nonnull %101) #13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %101, i8 -1, i64 192, i1 false)
  %102 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 9
  %103 = load %"struct.jxl::ImageMetadata"*, %"struct.jxl::ImageMetadata"** %102, align 8
  %104 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %103, i64 0, i32 14, i32 3
  %105 = load float, float* %104, align 4
  %106 = fcmp une float %105, 0.000000e+00
  br i1 %106, label %213, label %107

107:                                              ; preds = %100
  %108 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.13, i64 0, i64 0), i32 250, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.14, i64 0, i64 0)) #13
  %109 = tail call zeroext i1 @_ZN3jxl5AbortEv() #21
  unreachable

110:                                              ; preds = %213
  %111 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10
  call void @_ZN3jxl6N_SSE415LinearSRGBToXYBERKNS_6Image3IfEEPKfPNS_10ThreadPoolEPS2_(%"class.jxl::Image3"* dereferenceable(96) %111, float* nonnull %218, %"class.jxl::ThreadPool"* %1, %"class.jxl::Image3"* %2)
  br i1 %267, label %112, label %211

112:                                              ; preds = %110
  %113 = bitcast %"class.jxl::ImageBundle"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 368, i8* nonnull %113) #13
  call void @_ZNK3jxl11ImageBundle4CopyEv(%"class.jxl::ImageBundle"* nonnull sret %6, %"class.jxl::ImageBundle"* %0)
  %114 = call dereferenceable(368) %"class.jxl::ImageBundle"* @_ZN3jxl11ImageBundleaSEOS0_(%"class.jxl::ImageBundle"* nonnull %3, %"class.jxl::ImageBundle"* nonnull dereferenceable(368) %6) #13
  call void @_ZN3jxl11ImageBundleD2Ev(%"class.jxl::ImageBundle"* nonnull %6) #13
  call void @llvm.lifetime.end.p0i8(i64 368, i8* nonnull %113) #13
  br label %211

115:                                              ; preds = %213
  %116 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 7
  %117 = load i8, i8* %116, align 1, !range !2
  %118 = icmp ne i8 %117, 0
  %119 = load i32, i32* %268, align 8
  %120 = icmp ult i32 %119, 2
  %121 = and i1 %118, %120
  br i1 %121, label %122, label %163

122:                                              ; preds = %115
  %123 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 2
  %124 = load i32, i32* %123, align 4
  %125 = icmp eq i32 %124, 1
  br i1 %125, label %126, label %163

126:                                              ; preds = %122
  %127 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 3
  %128 = load i32, i32* %127, align 8
  %129 = icmp eq i32 %128, 1
  br i1 %129, label %130, label %163

130:                                              ; preds = %126
  %131 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 4, i32 2
  %132 = load i8, i8* %131, align 4, !range !2
  %133 = icmp eq i8 %132, 0
  br i1 %133, label %134, label %163

134:                                              ; preds = %130
  %135 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 4, i32 4
  %136 = load i32, i32* %135, align 4
  %137 = icmp eq i32 %136, 13
  br i1 %137, label %138, label %163

138:                                              ; preds = %134
  br i1 %267, label %141, label %139

139:                                              ; preds = %138
  %140 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10
  call void @_ZN3jxl6N_SSE49SRGBToXYBERKNS_6Image3IfEEPKfPNS_10ThreadPoolEPS2_(%"class.jxl::Image3"* dereferenceable(96) %140, float* nonnull %218, %"class.jxl::ThreadPool"* %1, %"class.jxl::Image3"* %2)
  br label %211

141:                                              ; preds = %138
  %142 = bitcast %"class.jxl::Image3"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %142) #13
  %143 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %7, i64 0, i32 0, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %143, i64 %65, i64 %64, i64 4) #13
  %144 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %7, i64 0, i32 0, i64 1, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %144, i64 %65, i64 %64, i64 4) #13
  %145 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %7, i64 0, i32 0, i64 2, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %145, i64 %65, i64 %64, i64 4) #13
  call void @_ZN3jxl11ImageBundle12SetFromImageEONS_6Image3IfEERKNS_13ColorEncodingE(%"class.jxl::ImageBundle"* nonnull %3, %"class.jxl::Image3"* nonnull dereferenceable(96) %7, %"struct.jxl::ColorEncoding"* dereferenceable(152) %271) #13
  %146 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %7, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %147 = load i8*, i8** %146, align 8
  store i8* null, i8** %146, align 8
  %148 = icmp eq i8* %147, null
  br i1 %148, label %150, label %149

149:                                              ; preds = %141
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %147) #13
  br label %150

150:                                              ; preds = %149, %141
  %151 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %7, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %152 = load i8*, i8** %151, align 8
  store i8* null, i8** %151, align 8
  %153 = icmp eq i8* %152, null
  br i1 %153, label %155, label %154

154:                                              ; preds = %150
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %152) #13
  br label %155

155:                                              ; preds = %154, %150
  %156 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %7, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %157 = load i8*, i8** %156, align 8
  store i8* null, i8** %156, align 8
  %158 = icmp eq i8* %157, null
  br i1 %158, label %160, label %159

159:                                              ; preds = %155
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %157) #13
  br label %160

160:                                              ; preds = %155, %159
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %142) #13
  %161 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10
  %162 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %3, i64 0, i32 10
  call void @_ZN3jxl6N_SSE418SRGBToXYBAndLinearERKNS_6Image3IfEEPKfPNS_10ThreadPoolEPS2_S9_(%"class.jxl::Image3"* dereferenceable(96) %161, float* nonnull %218, %"class.jxl::ThreadPool"* %1, %"class.jxl::Image3"* %2, %"class.jxl::Image3"* %162)
  br label %211

163:                                              ; preds = %115, %122, %126, %130, %134
  %164 = bitcast %"class.jxl::ImageBundle"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 368, i8* nonnull %164) #13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %164, i8 -86, i64 368, i1 false)
  %165 = bitcast %"class.jxl::ImageBundle"* %8 to i64*
  store i64 0, i64* %165, align 8
  %166 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %8, i64 0, i32 1
  store i32 1, i32* %166, align 8
  %167 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %8, i64 0, i32 3
  call void @_ZN3jxl22YCbCrChromaSubsamplingC1Ev(%"struct.jxl::YCbCrChromaSubsampling"* %167) #13
  %168 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %8, i64 0, i32 4, i32 0
  %169 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %8, i64 0, i32 8
  %170 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %8, i64 0, i32 11
  %171 = bitcast i32* %168 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %171, i8 0, i64 14, i1 false) #13
  %172 = bitcast %"class.std::__1::basic_string"* %169 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %172, i8 0, i64 128, i1 false) #13
  call void @_ZN3jxl13ColorEncodingC1Ev(%"struct.jxl::ColorEncoding"* %170) #13
  %173 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %8, i64 0, i32 12
  %174 = bitcast %"class.std::__1::vector.87"* %173 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %174, i8 0, i64 32, i1 false) #13
  br i1 %267, label %194, label %175

175:                                              ; preds = %163
  %176 = bitcast %"class.jxl::ImageBundle"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 368, i8* nonnull %176) #13
  %177 = bitcast %"struct.jxl::ImageMetadata"** %102 to i64*
  %178 = load i64, i64* %177, align 8
  %179 = bitcast %"class.jxl::ImageBundle"* %9 to i64*
  store i64 0, i64* %179, align 8
  %180 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %9, i64 0, i32 1
  store i32 1, i32* %180, align 8
  %181 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %9, i64 0, i32 3
  call void @_ZN3jxl22YCbCrChromaSubsamplingC1Ev(%"struct.jxl::YCbCrChromaSubsampling"* %181) #13
  %182 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %9, i64 0, i32 4, i32 0
  %183 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %9, i64 0, i32 8
  %184 = bitcast %"class.std::__1::basic_string"* %183 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %184, i8 0, i64 24, i1 false) #13
  %185 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %9, i64 0, i32 9
  %186 = bitcast i32* %182 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %186, i8 0, i64 14, i1 false) #13
  %187 = bitcast %"struct.jxl::ImageMetadata"** %185 to i64*
  store i64 %178, i64* %187, align 8
  %188 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %9, i64 0, i32 10
  %189 = bitcast %"class.jxl::Image3"* %188 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %189, i8 0, i64 96, i1 false) #13
  %190 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %9, i64 0, i32 11
  call void @_ZN3jxl13ColorEncodingC1Ev(%"struct.jxl::ColorEncoding"* %190) #13
  %191 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %9, i64 0, i32 12
  %192 = bitcast %"class.std::__1::vector.87"* %191 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %192, i8 0, i64 32, i1 false) #13
  %193 = call dereferenceable(368) %"class.jxl::ImageBundle"* @_ZN3jxl11ImageBundleaSEOS0_(%"class.jxl::ImageBundle"* nonnull %8, %"class.jxl::ImageBundle"* nonnull dereferenceable(368) %9) #13
  call void @_ZN3jxl11ImageBundleD2Ev(%"class.jxl::ImageBundle"* nonnull %9) #13
  call void @llvm.lifetime.end.p0i8(i64 368, i8* nonnull %176) #13
  br label %194

194:                                              ; preds = %163, %175
  %195 = phi %"class.jxl::ImageBundle"* [ %8, %175 ], [ %3, %163 ]
  %196 = bitcast %"class.jxl::ImageBundle"** %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %196) #13
  store %"class.jxl::ImageBundle"* inttoptr (i64 -6148914691236517206 to %"class.jxl::ImageBundle"*), %"class.jxl::ImageBundle"** %10, align 8
  %197 = call i32 @_ZN3jxl17TransformIfNeededERKNS_11ImageBundleERKNS_13ColorEncodingEPNS_10ThreadPoolEPS0_PPS1_(%"class.jxl::ImageBundle"* dereferenceable(368) %0, %"struct.jxl::ColorEncoding"* dereferenceable(152) %271, %"class.jxl::ThreadPool"* %1, %"class.jxl::ImageBundle"* nonnull %195, %"class.jxl::ImageBundle"** nonnull %10) #13
  %198 = icmp eq i32 %197, 0
  br i1 %198, label %202, label %199

199:                                              ; preds = %194
  %200 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.1, i64 0, i64 0), i32 335, i8* getelementptr inbounds ([69 x i8], [69 x i8]* @.str.9, i64 0, i64 0)) #13
  %201 = call zeroext i1 @_ZN3jxl5AbortEv() #21
  unreachable

202:                                              ; preds = %194
  %203 = load %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"** %10, align 8
  %204 = icmp eq %"class.jxl::ImageBundle"* %203, %195
  br i1 %204, label %208, label %205

205:                                              ; preds = %202
  %206 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.1, i64 0, i64 0), i32 337, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.10, i64 0, i64 0)) #13
  %207 = call zeroext i1 @_ZN3jxl5AbortEv() #21
  unreachable

208:                                              ; preds = %202
  %209 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %195, i64 0, i32 10
  call void @_ZN3jxl6N_SSE415LinearSRGBToXYBERKNS_6Image3IfEEPKfPNS_10ThreadPoolEPS2_(%"class.jxl::Image3"* dereferenceable(96) %209, float* nonnull %218, %"class.jxl::ThreadPool"* %1, %"class.jxl::Image3"* %2)
  %210 = select i1 %267, %"class.jxl::ImageBundle"* %3, %"class.jxl::ImageBundle"* %0
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %196) #13
  call void @_ZN3jxl11ImageBundleD2Ev(%"class.jxl::ImageBundle"* nonnull %8) #13
  call void @llvm.lifetime.end.p0i8(i64 368, i8* nonnull %164) #13
  br label %211

211:                                              ; preds = %110, %208, %160, %139, %112
  %212 = phi %"class.jxl::ImageBundle"* [ %3, %112 ], [ %3, %160 ], [ %0, %139 ], [ %210, %208 ], [ %0, %110 ]
  call void @llvm.lifetime.end.p0i8(i64 192, i8* nonnull %101) #13
  ret %"class.jxl::ImageBundle"* %212

213:                                              ; preds = %100
  %214 = fdiv float %105, 2.550000e+02
  %215 = fmul float %214, 0x3FD3333340000000
  %216 = insertelement <4 x float> undef, float %215, i32 0
  %217 = shufflevector <4 x float> %216, <4 x float> undef, <4 x i32> zeroinitializer
  %218 = getelementptr inbounds [48 x float], [48 x float]* %5, i64 0, i64 0
  %219 = bitcast [48 x float]* %5 to <4 x float>*
  store <4 x float> %217, <4 x float>* %219, align 16, !alias.scope !3
  %220 = fmul float %214, 0x3FE3E76C80000000
  %221 = insertelement <4 x float> undef, float %220, i32 0
  %222 = shufflevector <4 x float> %221, <4 x float> undef, <4 x i32> zeroinitializer
  %223 = getelementptr inbounds [48 x float], [48 x float]* %5, i64 0, i64 4
  %224 = bitcast float* %223 to <4 x float>*
  store <4 x float> %222, <4 x float>* %224, align 16, !alias.scope !3
  %225 = fmul float %214, 0x3FB3F7CEE0000000
  %226 = insertelement <4 x float> undef, float %225, i32 0
  %227 = shufflevector <4 x float> %226, <4 x float> undef, <4 x i32> zeroinitializer
  %228 = getelementptr inbounds [48 x float], [48 x float]* %5, i64 0, i64 8
  %229 = bitcast float* %228 to <4 x float>*
  store <4 x float> %227, <4 x float>* %229, align 16, !alias.scope !3
  %230 = fmul float %214, 0x3FCD70A3E0000000
  %231 = insertelement <4 x float> undef, float %230, i32 0
  %232 = shufflevector <4 x float> %231, <4 x float> undef, <4 x i32> zeroinitializer
  %233 = getelementptr inbounds [48 x float], [48 x float]* %5, i64 0, i64 12
  %234 = bitcast float* %233 to <4 x float>*
  store <4 x float> %232, <4 x float>* %234, align 16, !alias.scope !3
  %235 = fmul float %214, 0x3FE624DD20000000
  %236 = insertelement <4 x float> undef, float %235, i32 0
  %237 = shufflevector <4 x float> %236, <4 x float> undef, <4 x i32> zeroinitializer
  %238 = getelementptr inbounds [48 x float], [48 x float]* %5, i64 0, i64 16
  %239 = bitcast float* %238 to <4 x float>*
  store <4 x float> %237, <4 x float>* %239, align 16, !alias.scope !3
  %240 = getelementptr inbounds [48 x float], [48 x float]* %5, i64 0, i64 20
  %241 = bitcast float* %240 to <4 x float>*
  store <4 x float> %227, <4 x float>* %241, align 16, !alias.scope !3
  %242 = fmul float %214, 0x3FCF287980000000
  %243 = insertelement <4 x float> undef, float %242, i32 0
  %244 = shufflevector <4 x float> %243, <4 x float> undef, <4 x i32> zeroinitializer
  %245 = getelementptr inbounds [48 x float], [48 x float]* %5, i64 0, i64 24
  %246 = bitcast float* %245 to <4 x float>*
  store <4 x float> %244, <4 x float>* %246, align 16, !alias.scope !3
  %247 = fmul float %214, 0x3FCA35D1E0000000
  %248 = insertelement <4 x float> undef, float %247, i32 0
  %249 = shufflevector <4 x float> %248, <4 x float> undef, <4 x i32> zeroinitializer
  %250 = getelementptr inbounds [48 x float], [48 x float]* %5, i64 0, i64 28
  %251 = bitcast float* %250 to <4 x float>*
  store <4 x float> %249, <4 x float>* %251, align 16, !alias.scope !3
  %252 = fmul float %214, 0x3FE1A86D20000000
  %253 = insertelement <4 x float> undef, float %252, i32 0
  %254 = shufflevector <4 x float> %253, <4 x float> undef, <4 x i32> zeroinitializer
  %255 = getelementptr inbounds [48 x float], [48 x float]* %5, i64 0, i64 32
  %256 = bitcast float* %255 to <4 x float>*
  store <4 x float> %254, <4 x float>* %256, align 16, !alias.scope !3
  %257 = tail call float @cbrtf(float 0x3F6F12A6C0000000) #18
  %258 = fsub float -0.000000e+00, %257
  %259 = insertelement <4 x float> undef, float %258, i32 0
  %260 = shufflevector <4 x float> %259, <4 x float> undef, <4 x i32> zeroinitializer
  %261 = getelementptr inbounds [48 x float], [48 x float]* %5, i64 0, i64 36
  %262 = bitcast float* %261 to <4 x float>*
  store <4 x float> %260, <4 x float>* %262, align 16, !alias.scope !6
  %263 = getelementptr inbounds [48 x float], [48 x float]* %5, i64 0, i64 40
  %264 = bitcast float* %263 to <4 x float>*
  store <4 x float> %260, <4 x float>* %264, align 16, !alias.scope !6
  %265 = getelementptr inbounds [48 x float], [48 x float]* %5, i64 0, i64 44
  %266 = bitcast float* %265 to <4 x float>*
  store <4 x float> %260, <4 x float>* %266, align 16, !alias.scope !6
  %267 = icmp ne %"class.jxl::ImageBundle"* %3, null
  %268 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 9
  %269 = load i32, i32* %268, align 8
  %270 = icmp eq i32 %269, 1
  %271 = tail call dereferenceable(152) %"struct.jxl::ColorEncoding"* @_ZN3jxl13ColorEncoding10LinearSRGBEb(i1 zeroext %270) #13
  %272 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11
  %273 = tail call zeroext i1 @_ZNK3jxl13ColorEncoding17SameColorEncodingERKS0_(%"struct.jxl::ColorEncoding"* %271, %"struct.jxl::ColorEncoding"* dereferenceable(152) %272)
  br i1 %273, label %110, label %115
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare dereferenceable(152) %"struct.jxl::ColorEncoding"* @_ZN3jxl13ColorEncoding10LinearSRGBEb(i1 zeroext) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK3jxl13ColorEncoding17SameColorEncodingERKS0_(%"struct.jxl::ColorEncoding"*, %"struct.jxl::ColorEncoding"* dereferenceable(152)) local_unnamed_addr #6 comdat align 2 {
  %3 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %0, i64 0, i32 9
  %4 = load i32, i32* %3, align 8
  %5 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %1, i64 0, i32 9
  %6 = load i32, i32* %5, align 8
  %7 = icmp eq i32 %4, %6
  br i1 %7, label %8, label %96

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %0, i64 0, i32 2
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %1, i64 0, i32 2
  %12 = load i32, i32* %11, align 4
  %13 = icmp eq i32 %10, %12
  br i1 %13, label %14, label %96

14:                                               ; preds = %8
  %15 = icmp eq i32 %10, 2
  br i1 %15, label %16, label %28

16:                                               ; preds = %14
  %17 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %0, i64 0, i32 10, i32 1
  %18 = load i32, i32* %17, align 8
  %19 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %1, i64 0, i32 10, i32 1
  %20 = load i32, i32* %19, align 8
  %21 = icmp eq i32 %18, %20
  br i1 %21, label %22, label %96

22:                                               ; preds = %16
  %23 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %0, i64 0, i32 10, i32 2
  %24 = load i32, i32* %23, align 4
  %25 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %1, i64 0, i32 10, i32 2
  %26 = load i32, i32* %25, align 4
  %27 = icmp eq i32 %24, %26
  br i1 %27, label %28, label %96

28:                                               ; preds = %22, %14
  %29 = add i32 %4, -1
  %30 = icmp ugt i32 %29, 1
  br i1 %30, label %31, label %75

31:                                               ; preds = %28
  %32 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %0, i64 0, i32 3
  %33 = load i32, i32* %32, align 8
  %34 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %1, i64 0, i32 3
  %35 = load i32, i32* %34, align 8
  %36 = icmp eq i32 %33, %35
  br i1 %36, label %37, label %96

37:                                               ; preds = %31
  %38 = icmp eq i32 %33, 2
  br i1 %38, label %39, label %75

39:                                               ; preds = %37
  %40 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %0, i64 0, i32 11, i32 1
  %41 = load i32, i32* %40, align 8
  %42 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %1, i64 0, i32 11, i32 1
  %43 = load i32, i32* %42, align 8
  %44 = icmp eq i32 %41, %43
  br i1 %44, label %45, label %96

45:                                               ; preds = %39
  %46 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %0, i64 0, i32 11, i32 2
  %47 = load i32, i32* %46, align 4
  %48 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %1, i64 0, i32 11, i32 2
  %49 = load i32, i32* %48, align 4
  %50 = icmp eq i32 %47, %49
  br i1 %50, label %51, label %96

51:                                               ; preds = %45
  %52 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %0, i64 0, i32 12, i32 1
  %53 = load i32, i32* %52, align 8
  %54 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %1, i64 0, i32 12, i32 1
  %55 = load i32, i32* %54, align 8
  %56 = icmp eq i32 %53, %55
  br i1 %56, label %57, label %96

57:                                               ; preds = %51
  %58 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %0, i64 0, i32 12, i32 2
  %59 = load i32, i32* %58, align 4
  %60 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %1, i64 0, i32 12, i32 2
  %61 = load i32, i32* %60, align 4
  %62 = icmp eq i32 %59, %61
  br i1 %62, label %63, label %96

63:                                               ; preds = %57
  %64 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %0, i64 0, i32 13, i32 1
  %65 = load i32, i32* %64, align 8
  %66 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %1, i64 0, i32 13, i32 1
  %67 = load i32, i32* %66, align 8
  %68 = icmp eq i32 %65, %67
  br i1 %68, label %69, label %96

69:                                               ; preds = %63
  %70 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %0, i64 0, i32 13, i32 2
  %71 = load i32, i32* %70, align 4
  %72 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %1, i64 0, i32 13, i32 2
  %73 = load i32, i32* %72, align 4
  %74 = icmp eq i32 %71, %73
  br i1 %74, label %75, label %96

75:                                               ; preds = %69, %37, %28
  %76 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %0, i64 0, i32 4, i32 2
  %77 = load i8, i8* %76, align 4, !range !2
  %78 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %1, i64 0, i32 4, i32 2
  %79 = load i8, i8* %78, align 4, !range !2
  %80 = icmp eq i8 %77, %79
  br i1 %80, label %81, label %96

81:                                               ; preds = %75
  %82 = icmp eq i8 %77, 0
  br i1 %82, label %89, label %83

83:                                               ; preds = %81
  %84 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %0, i64 0, i32 4, i32 3
  %85 = load i32, i32* %84, align 8
  %86 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %1, i64 0, i32 4, i32 3
  %87 = load i32, i32* %86, align 8
  %88 = icmp eq i32 %85, %87
  br i1 %88, label %95, label %96

89:                                               ; preds = %81
  %90 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %0, i64 0, i32 4, i32 4
  %91 = load i32, i32* %90, align 4
  %92 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %1, i64 0, i32 4, i32 4
  %93 = load i32, i32* %92, align 4
  %94 = icmp eq i32 %91, %93
  br i1 %94, label %95, label %96

95:                                               ; preds = %89, %83
  br label %96

96:                                               ; preds = %63, %69, %51, %57, %39, %45, %31, %16, %22, %8, %2, %95, %89, %83, %75
  %97 = phi i1 [ true, %95 ], [ false, %75 ], [ false, %83 ], [ false, %89 ], [ false, %2 ], [ false, %8 ], [ false, %22 ], [ false, %16 ], [ false, %31 ], [ false, %45 ], [ false, %39 ], [ false, %57 ], [ false, %51 ], [ false, %69 ], [ false, %63 ]
  ret i1 %97
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK3jxl11ImageBundle4CopyEv(%"class.jxl::ImageBundle"* noalias sret, %"class.jxl::ImageBundle"*) local_unnamed_addr #6 comdat align 2 {
  %3 = alloca %"class.jxl::Rect", align 8
  %4 = alloca %"class.jxl::Rect", align 8
  %5 = alloca %"class.jxl::Image3", align 8
  %6 = alloca %"class.jxl::Plane", align 8
  %7 = bitcast %"class.jxl::ImageBundle"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 -86, i64 368, i1 false)
  %8 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 9
  %9 = bitcast %"struct.jxl::ImageMetadata"** %8 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = bitcast %"class.jxl::ImageBundle"* %0 to i64*
  store i64 0, i64* %11, align 8
  %12 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 1
  store i32 1, i32* %12, align 8
  %13 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 3
  tail call void @_ZN3jxl22YCbCrChromaSubsamplingC1Ev(%"struct.jxl::YCbCrChromaSubsampling"* %13) #13
  %14 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 4, i32 0
  %15 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 8
  %16 = bitcast %"class.std::__1::basic_string"* %15 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %16, i8 0, i64 24, i1 false) #13
  %17 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 9
  %18 = bitcast i32* %14 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %18, i8 0, i64 14, i1 false) #13
  %19 = bitcast %"struct.jxl::ImageMetadata"** %17 to i64*
  store i64 %10, i64* %19, align 8
  %20 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10
  %21 = bitcast %"class.jxl::Image3"* %20 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %21, i8 0, i64 96, i1 false) #13
  %22 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11
  tail call void @_ZN3jxl13ColorEncodingC1Ev(%"struct.jxl::ColorEncoding"* %22) #13
  %23 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12
  %24 = bitcast %"class.std::__1::vector.87"* %23 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %24, i8 0, i64 32, i1 false) #13
  %25 = bitcast %"class.jxl::Image3"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %25) #13
  %26 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %25, i8 -86, i64 96, i1 false) #13, !alias.scope !9
  %27 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %26, i64 0, i32 0, i64 0, i32 0, i32 0
  %28 = load i32, i32* %27, align 8, !noalias !9
  %29 = zext i32 %28 to i64
  %30 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 10, i32 0, i64 0, i32 0, i32 1
  %31 = load i32, i32* %30, align 4, !noalias !9
  %32 = zext i32 %31 to i64
  %33 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %33, i64 %29, i64 %32, i64 4) #13
  %34 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 1, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %34, i64 %29, i64 %32, i64 4) #13
  %35 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 2, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %35, i64 %29, i64 %32, i64 4) #13
  %36 = bitcast %"class.jxl::Rect"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %36) #13, !noalias !12
  %37 = bitcast %"class.jxl::Image3"* %26 to <2 x i32>*
  %38 = load <2 x i32>, <2 x i32>* %37, align 8, !noalias !12
  %39 = zext <2 x i32> %38 to <2 x i64>
  %40 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %3, i64 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %36, i8 0, i64 16, i1 false) #13, !noalias !12
  %41 = bitcast i64* %40 to <2 x i64>*
  store <2 x i64> %39, <2 x i64>* %41, align 8, !noalias !12
  %42 = bitcast %"class.jxl::Rect"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %42) #13, !noalias !12
  %43 = bitcast %"class.jxl::Image3"* %5 to <2 x i32>*
  %44 = load <2 x i32>, <2 x i32>* %43, align 8, !alias.scope !12
  %45 = zext <2 x i32> %44 to <2 x i64>
  %46 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %4, i64 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %42, i8 0, i64 16, i1 false) #13, !noalias !12
  %47 = bitcast i64* %46 to <2 x i64>*
  store <2 x i64> %45, <2 x i64>* %47, align 8, !noalias !12
  call void @_ZN3jxl11CopyImageToIfEEvRKNS_4RectERKNS_6Image3IT_EES3_PS6_(%"class.jxl::Rect"* nonnull dereferenceable(32) %3, %"class.jxl::Image3"* dereferenceable(96) %26, %"class.jxl::Rect"* nonnull dereferenceable(32) %4, %"class.jxl::Image3"* nonnull %5) #13
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %42) #13, !noalias !12
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %36) #13, !noalias !12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %21, i8* nonnull align 8 %25, i64 24, i1 false) #13
  %48 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 0, i32 0, i32 5
  %49 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 0, i32 0, i32 5
  %50 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %49, i64 0, i32 0, i32 0, i32 0
  %51 = bitcast %"class.std::__1::unique_ptr"* %49 to i64*
  %52 = load i64, i64* %51, align 8
  store i8* null, i8** %50, align 8
  %53 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %48, i64 0, i32 0, i32 0, i32 0
  %54 = load i8*, i8** %53, align 8
  %55 = bitcast %"class.std::__1::unique_ptr"* %48 to i64*
  store i64 %52, i64* %55, align 8
  %56 = icmp eq i8* %54, null
  br i1 %56, label %58, label %57

57:                                               ; preds = %2
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %54) #13
  br label %58

58:                                               ; preds = %57, %2
  %59 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 1
  %60 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 1
  %61 = bitcast %"class.jxl::Plane"* %60 to i8*
  %62 = bitcast %"class.jxl::Plane"* %59 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %61, i8* align 8 %62, i64 24, i1 false) #13
  %63 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 1, i32 0, i32 5
  %64 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 1, i32 0, i32 5
  %65 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %64, i64 0, i32 0, i32 0, i32 0
  %66 = bitcast %"class.std::__1::unique_ptr"* %64 to i64*
  %67 = load i64, i64* %66, align 8
  store i8* null, i8** %65, align 8
  %68 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %63, i64 0, i32 0, i32 0, i32 0
  %69 = load i8*, i8** %68, align 8
  %70 = bitcast %"class.std::__1::unique_ptr"* %63 to i64*
  store i64 %67, i64* %70, align 8
  %71 = icmp eq i8* %69, null
  br i1 %71, label %73, label %72

72:                                               ; preds = %58
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %69) #13
  br label %73

73:                                               ; preds = %72, %58
  %74 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 2
  %75 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 2
  %76 = bitcast %"class.jxl::Plane"* %75 to i8*
  %77 = bitcast %"class.jxl::Plane"* %74 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %76, i8* align 8 %77, i64 24, i1 false) #13
  %78 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 2, i32 0, i32 5
  %79 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 2, i32 0, i32 5
  %80 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %79, i64 0, i32 0, i32 0, i32 0
  %81 = bitcast %"class.std::__1::unique_ptr"* %79 to i64*
  %82 = load i64, i64* %81, align 8
  store i8* null, i8** %80, align 8
  %83 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %78, i64 0, i32 0, i32 0, i32 0
  %84 = load i8*, i8** %83, align 8
  %85 = bitcast %"class.std::__1::unique_ptr"* %78 to i64*
  store i64 %82, i64* %85, align 8
  %86 = icmp eq i8* %84, null
  br i1 %86, label %87, label %89

87:                                               ; preds = %73
  %88 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  store i8* null, i8** %88, align 8
  br label %95

89:                                               ; preds = %73
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %84) #13
  %90 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %91 = load i8*, i8** %90, align 8
  %92 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  store i8* null, i8** %92, align 8
  %93 = icmp eq i8* %91, null
  br i1 %93, label %95, label %94

94:                                               ; preds = %89
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %91) #13
  br label %95

95:                                               ; preds = %87, %94, %89
  %96 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %97 = load i8*, i8** %96, align 8
  store i8* null, i8** %96, align 8
  %98 = icmp eq i8* %97, null
  br i1 %98, label %100, label %99

99:                                               ; preds = %95
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %97) #13
  br label %100

100:                                              ; preds = %99, %95
  %101 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %102 = load i8*, i8** %101, align 8
  store i8* null, i8** %101, align 8
  %103 = icmp eq i8* %102, null
  br i1 %103, label %105, label %104

104:                                              ; preds = %100
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %102) #13
  br label %105

105:                                              ; preds = %100, %104
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %25) #13
  %106 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 1
  %107 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %106, i8* align 8 %107, i64 12, i1 false) #13
  %108 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 4, i32 1
  %109 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 4, i32 1
  %110 = bitcast i32* %108 to i8*
  %111 = bitcast i32* %109 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %110, i8* align 8 %111, i64 16, i1 false) #13
  %112 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 5
  %113 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 5
  %114 = bitcast i32* %112 to i8*
  %115 = bitcast i32* %113 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %114, i8* align 8 %115, i64 6, i1 false) #13
  %116 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 8
  %117 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 8, i32 0
  %118 = load i64, i64* %117, align 8
  %119 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 8, i32 1
  %120 = load i64, i64* %119, align 8
  %121 = icmp ult i64 %120, %118
  br i1 %121, label %122, label %123

122:                                              ; preds = %105
  call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* %116, i64 %118) #13
  br label %123

123:                                              ; preds = %122, %105
  %124 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 8, i32 2, i32 0, i32 0, i32 0
  %125 = load i8*, i8** %124, align 8
  %126 = icmp eq i8* %125, null
  %127 = select i1 %126, i64 0, i64 %118
  %128 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %116, i64 0, i32 0
  store i64 %127, i64* %128, align 8
  br i1 %126, label %132, label %129

129:                                              ; preds = %123
  %130 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 8, i32 2, i32 0, i32 0, i32 0
  %131 = load i8*, i8** %130, align 8
  call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 1 %125, i8* align 1 %131, i64 %127, i1 false) #13
  br label %132

132:                                              ; preds = %123, %129
  %133 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 9
  %134 = load i32, i32* %133, align 8
  %135 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 9
  store i32 %134, i32* %135, align 8
  %136 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 10, i32 1
  %137 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 10, i32 1
  %138 = bitcast i32* %137 to i64*
  %139 = bitcast i32* %136 to i64*
  %140 = load i64, i64* %138, align 8
  store i64 %140, i64* %139, align 8
  %141 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 11, i32 1
  %142 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 11, i32 1
  %143 = bitcast i32* %142 to i64*
  %144 = bitcast i32* %141 to i64*
  %145 = load i64, i64* %143, align 8
  store i64 %145, i64* %144, align 8
  %146 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 12, i32 1
  %147 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 12, i32 1
  %148 = bitcast i32* %147 to i64*
  %149 = bitcast i32* %146 to i64*
  %150 = load i64, i64* %148, align 8
  store i64 %150, i64* %149, align 8
  %151 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 13, i32 1
  %152 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 13, i32 1
  %153 = bitcast i32* %152 to i64*
  %154 = bitcast i32* %151 to i64*
  %155 = load i64, i64* %153, align 8
  store i64 %155, i64* %154, align 8
  %156 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 12
  %157 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 12, i32 0, i32 1
  %158 = bitcast %"class.jxl::Plane"** %157 to i64*
  %159 = load i64, i64* %158, align 8
  %160 = bitcast %"class.std::__1::vector.87"* %156 to i64*
  %161 = load i64, i64* %160, align 8
  %162 = sub i64 %159, %161
  %163 = ashr exact i64 %162, 5
  call void @_ZNSt3__16vectorIN3jxl5PlaneIfEENS_9allocatorIS3_EEE7reserveEm(%"class.std::__1::vector.87"* %23, i64 %163)
  %164 = getelementptr inbounds %"class.std::__1::vector.87", %"class.std::__1::vector.87"* %156, i64 0, i32 0, i32 0
  %165 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %164, align 8
  %166 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %157, align 8
  %167 = icmp eq %"class.jxl::Plane"* %165, %166
  br i1 %167, label %177, label %168

168:                                              ; preds = %132
  %169 = bitcast %"class.jxl::Plane"* %6 to i8*
  %170 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12, i32 0, i32 1
  %171 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12, i32 0, i32 2, i32 0, i32 0
  %172 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %6, i64 0, i32 0, i32 5
  %173 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %172, i64 0, i32 0, i32 0, i32 0
  %174 = bitcast %"class.std::__1::unique_ptr"* %172 to i64*
  %175 = bitcast %"class.jxl::Plane"** %170 to i64*
  %176 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %6, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  br label %181

177:                                              ; preds = %198, %132
  %178 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %179 = load %"struct.jxl::jpeg::JPEGData"*, %"struct.jxl::jpeg::JPEGData"** %178, align 8
  %180 = icmp eq %"struct.jxl::jpeg::JPEGData"* %179, null
  br i1 %180, label %205, label %201

181:                                              ; preds = %168, %198
  %182 = phi %"class.jxl::Plane"* [ %165, %168 ], [ %199, %198 ]
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %169) #13
  call void @_ZN3jxl9CopyImageIfEENS_5PlaneIT_EERKS3_(%"class.jxl::Plane"* nonnull sret %6, %"class.jxl::Plane"* dereferenceable(32) %182)
  %183 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %170, align 8
  %184 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %171, align 8
  %185 = icmp ult %"class.jxl::Plane"* %183, %184
  br i1 %185, label %186, label %193

186:                                              ; preds = %181
  %187 = bitcast %"class.jxl::Plane"* %183 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %187, i8* nonnull align 8 %169, i64 24, i1 false) #13
  %188 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %183, i64 0, i32 0, i32 5
  %189 = load i64, i64* %174, align 8
  store i8* null, i8** %173, align 8
  %190 = bitcast %"class.std::__1::unique_ptr"* %188 to i64*
  store i64 %189, i64* %190, align 8
  %191 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %183, i64 1
  %192 = ptrtoint %"class.jxl::Plane"* %191 to i64
  store i64 %192, i64* %175, align 8
  br label %194

193:                                              ; preds = %181
  call void @_ZNSt3__16vectorIN3jxl5PlaneIfEENS_9allocatorIS3_EEE24__emplace_back_slow_pathIJS3_EEEvDpOT_(%"class.std::__1::vector.87"* %23, %"class.jxl::Plane"* nonnull dereferenceable(32) %6) #13
  br label %194

194:                                              ; preds = %186, %193
  %195 = load i8*, i8** %176, align 8
  store i8* null, i8** %176, align 8
  %196 = icmp eq i8* %195, null
  br i1 %196, label %198, label %197

197:                                              ; preds = %194
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %195) #13
  br label %198

198:                                              ; preds = %194, %197
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %169) #13
  %199 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %182, i64 1
  %200 = icmp eq %"class.jxl::Plane"* %199, %166
  br i1 %200, label %177, label %181

201:                                              ; preds = %177
  %202 = call i8* @_Znwm(i64 296) #22
  %203 = bitcast i8* %202 to %"struct.jxl::jpeg::JPEGData"*
  call void @_ZN3jxl4jpeg8JPEGDataC2ERKS1_(%"struct.jxl::jpeg::JPEGData"* nonnull %203, %"struct.jxl::jpeg::JPEGData"* nonnull dereferenceable(296) %179) #13
  %204 = ptrtoint i8* %202 to i64
  br label %205

205:                                              ; preds = %177, %201
  %206 = phi i64 [ %204, %201 ], [ 0, %177 ]
  %207 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %208 = load %"struct.jxl::jpeg::JPEGData"*, %"struct.jxl::jpeg::JPEGData"** %207, align 8
  store i64 %206, i64* %11, align 8
  %209 = icmp eq %"struct.jxl::jpeg::JPEGData"* %208, null
  br i1 %209, label %215, label %210

210:                                              ; preds = %205
  %211 = bitcast %"struct.jxl::jpeg::JPEGData"* %208 to void (%"struct.jxl::jpeg::JPEGData"*)***
  %212 = load void (%"struct.jxl::jpeg::JPEGData"*)**, void (%"struct.jxl::jpeg::JPEGData"*)*** %211, align 8
  %213 = getelementptr inbounds void (%"struct.jxl::jpeg::JPEGData"*)*, void (%"struct.jxl::jpeg::JPEGData"*)** %212, i64 1
  %214 = load void (%"struct.jxl::jpeg::JPEGData"*)*, void (%"struct.jxl::jpeg::JPEGData"*)** %213, align 8
  call void %214(%"struct.jxl::jpeg::JPEGData"* nonnull %208) #13
  br label %215

215:                                              ; preds = %210, %205
  %216 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 1
  %217 = load i32, i32* %216, align 8
  store i32 %217, i32* %12, align 8
  %218 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 3, i32 1
  %219 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 3, i32 1
  %220 = bitcast [3 x i32]* %218 to i8*
  %221 = bitcast [3 x i32]* %219 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %220, i8* align 8 %221, i64 14, i1 false) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(368) %"class.jxl::ImageBundle"* @_ZN3jxl11ImageBundleaSEOS0_(%"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"* dereferenceable(368)) local_unnamed_addr #6 comdat align 2 {
  %3 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %4 = bitcast %"class.jxl::ImageBundle"* %1 to i64*
  %5 = load i64, i64* %4, align 8
  store %"struct.jxl::jpeg::JPEGData"* null, %"struct.jxl::jpeg::JPEGData"** %3, align 8
  %6 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %7 = load %"struct.jxl::jpeg::JPEGData"*, %"struct.jxl::jpeg::JPEGData"** %6, align 8
  %8 = bitcast %"class.jxl::ImageBundle"* %0 to i64*
  store i64 %5, i64* %8, align 8
  %9 = icmp eq %"struct.jxl::jpeg::JPEGData"* %7, null
  br i1 %9, label %15, label %10

10:                                               ; preds = %2
  %11 = bitcast %"struct.jxl::jpeg::JPEGData"* %7 to void (%"struct.jxl::jpeg::JPEGData"*)***
  %12 = load void (%"struct.jxl::jpeg::JPEGData"*)**, void (%"struct.jxl::jpeg::JPEGData"*)*** %11, align 8
  %13 = getelementptr inbounds void (%"struct.jxl::jpeg::JPEGData"*)*, void (%"struct.jxl::jpeg::JPEGData"*)** %12, i64 1
  %14 = load void (%"struct.jxl::jpeg::JPEGData"*)*, void (%"struct.jxl::jpeg::JPEGData"*)** %13, align 8
  tail call void %14(%"struct.jxl::jpeg::JPEGData"* nonnull %7) #13
  br label %15

15:                                               ; preds = %2, %10
  %16 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 1
  %17 = load i32, i32* %16, align 8
  %18 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 1
  store i32 %17, i32* %18, align 8
  %19 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 3, i32 1
  %20 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 3, i32 1
  %21 = bitcast [3 x i32]* %19 to i8*
  %22 = bitcast [3 x i32]* %20 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %21, i8* align 8 %22, i64 14, i1 false) #13
  %23 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 4
  %24 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 4
  %25 = bitcast %"struct.jxl::FrameOrigin"* %23 to i8*
  %26 = bitcast %"struct.jxl::FrameOrigin"* %24 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %25, i8* align 8 %26, i64 14, i1 false)
  %27 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 8
  %28 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 8
  %29 = bitcast %"class.std::__1::basic_string"* %27 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %30 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %29, i64 0, i32 1, i32 0
  %31 = load i8, i8* %30, align 1
  %32 = icmp slt i8 %31, 0
  br i1 %32, label %33, label %36

33:                                               ; preds = %15
  %34 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %27, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %35 = load i8*, i8** %34, align 8
  tail call void @_ZdlPv(i8* %35) #22
  br label %36

36:                                               ; preds = %15, %33
  %37 = bitcast %"class.std::__1::basic_string"* %27 to i8*
  %38 = bitcast %"class.std::__1::basic_string"* %28 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %37, i8* align 8 %38, i64 24, i1 false) #13
  %39 = bitcast %"class.std::__1::basic_string"* %28 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %40 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %39, i64 0, i32 1, i32 0
  store i8 0, i8* %40, align 1
  store i8 0, i8* %38, align 1
  %41 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 9
  %42 = bitcast %"struct.jxl::ImageMetadata"** %41 to i64*
  %43 = load i64, i64* %42, align 8
  %44 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 9
  %45 = bitcast %"struct.jxl::ImageMetadata"** %44 to i64*
  store i64 %43, i64* %45, align 8
  %46 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10
  %47 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 10
  %48 = bitcast %"class.jxl::Image3"* %46 to i8*
  %49 = bitcast %"class.jxl::Image3"* %47 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %48, i8* align 8 %49, i64 24, i1 false) #13
  %50 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 0, i32 0, i32 5
  %51 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 10, i32 0, i64 0, i32 0, i32 5
  %52 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %51, i64 0, i32 0, i32 0, i32 0
  %53 = bitcast %"class.std::__1::unique_ptr"* %51 to i64*
  %54 = load i64, i64* %53, align 8
  store i8* null, i8** %52, align 8
  %55 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %50, i64 0, i32 0, i32 0, i32 0
  %56 = load i8*, i8** %55, align 8
  %57 = bitcast %"class.std::__1::unique_ptr"* %50 to i64*
  store i64 %54, i64* %57, align 8
  %58 = icmp eq i8* %56, null
  br i1 %58, label %60, label %59

59:                                               ; preds = %36
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %56) #13
  br label %60

60:                                               ; preds = %59, %36
  %61 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 10, i32 0, i64 1
  %62 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 1
  %63 = bitcast %"class.jxl::Plane"* %62 to i8*
  %64 = bitcast %"class.jxl::Plane"* %61 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %63, i8* align 8 %64, i64 24, i1 false) #13
  %65 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 1, i32 0, i32 5
  %66 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 10, i32 0, i64 1, i32 0, i32 5
  %67 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %66, i64 0, i32 0, i32 0, i32 0
  %68 = bitcast %"class.std::__1::unique_ptr"* %66 to i64*
  %69 = load i64, i64* %68, align 8
  store i8* null, i8** %67, align 8
  %70 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %65, i64 0, i32 0, i32 0, i32 0
  %71 = load i8*, i8** %70, align 8
  %72 = bitcast %"class.std::__1::unique_ptr"* %65 to i64*
  store i64 %69, i64* %72, align 8
  %73 = icmp eq i8* %71, null
  br i1 %73, label %75, label %74

74:                                               ; preds = %60
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %71) #13
  br label %75

75:                                               ; preds = %74, %60
  %76 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 10, i32 0, i64 2
  %77 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 2
  %78 = bitcast %"class.jxl::Plane"* %77 to i8*
  %79 = bitcast %"class.jxl::Plane"* %76 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %78, i8* align 8 %79, i64 24, i1 false) #13
  %80 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 2, i32 0, i32 5
  %81 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 10, i32 0, i64 2, i32 0, i32 5
  %82 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %81, i64 0, i32 0, i32 0, i32 0
  %83 = bitcast %"class.std::__1::unique_ptr"* %81 to i64*
  %84 = load i64, i64* %83, align 8
  store i8* null, i8** %82, align 8
  %85 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %80, i64 0, i32 0, i32 0, i32 0
  %86 = load i8*, i8** %85, align 8
  %87 = bitcast %"class.std::__1::unique_ptr"* %80 to i64*
  store i64 %84, i64* %87, align 8
  %88 = icmp eq i8* %86, null
  br i1 %88, label %90, label %89

89:                                               ; preds = %75
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %86) #13
  br label %90

90:                                               ; preds = %75, %89
  %91 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 1
  %92 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %91, i8* align 8 %92, i64 12, i1 false) #13
  %93 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 4, i32 1
  %94 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 4, i32 1
  %95 = bitcast i32* %93 to i8*
  %96 = bitcast i32* %94 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %95, i8* align 8 %96, i64 16, i1 false) #13
  %97 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 5
  %98 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 5
  %99 = bitcast i32* %97 to i8*
  %100 = bitcast i32* %98 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %99, i8* align 8 %100, i64 6, i1 false) #13
  %101 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 8
  %102 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %101, i64 0, i32 0
  %103 = load i64, i64* %102, align 8
  %104 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 8, i32 0
  store i64 %103, i64* %104, align 8
  %105 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 8, i32 1
  %106 = load i64, i64* %105, align 8
  %107 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 8, i32 1
  store i64 %106, i64* %107, align 8
  %108 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 8, i32 2
  %109 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 8, i32 2
  %110 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %108, i64 0, i32 0, i32 0, i32 0
  %111 = bitcast %"class.std::__1::unique_ptr"* %108 to i64*
  %112 = load i64, i64* %111, align 8
  store i8* null, i8** %110, align 8
  %113 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %109, i64 0, i32 0, i32 0, i32 0
  %114 = load i8*, i8** %113, align 8
  %115 = bitcast %"class.std::__1::unique_ptr"* %109 to i64*
  store i64 %112, i64* %115, align 8
  %116 = icmp eq i8* %114, null
  br i1 %116, label %118, label %117

117:                                              ; preds = %90
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %114) #13
  br label %118

118:                                              ; preds = %117, %90
  %119 = icmp eq %"class.jxl::ImageBundle"* %1, %0
  br i1 %119, label %122, label %120

120:                                              ; preds = %118
  %121 = bitcast %"class.jxl::PaddedBytes"* %101 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %121, i8 0, i64 16, i1 false) #13
  br label %122

122:                                              ; preds = %118, %120
  %123 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 9
  %124 = load i32, i32* %123, align 8
  %125 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 9
  store i32 %124, i32* %125, align 8
  %126 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 10, i32 1
  %127 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 10, i32 1
  %128 = bitcast i32* %127 to i64*
  %129 = bitcast i32* %126 to i64*
  %130 = load i64, i64* %128, align 8
  store i64 %130, i64* %129, align 8
  %131 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 11, i32 1
  %132 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 11, i32 1
  %133 = bitcast i32* %132 to i64*
  %134 = bitcast i32* %131 to i64*
  %135 = load i64, i64* %133, align 8
  store i64 %135, i64* %134, align 8
  %136 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 12, i32 1
  %137 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 12, i32 1
  %138 = bitcast i32* %137 to i64*
  %139 = bitcast i32* %136 to i64*
  %140 = load i64, i64* %138, align 8
  store i64 %140, i64* %139, align 8
  %141 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 13, i32 1
  %142 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 13, i32 1
  %143 = bitcast i32* %142 to i64*
  %144 = bitcast i32* %141 to i64*
  %145 = load i64, i64* %143, align 8
  store i64 %145, i64* %144, align 8
  %146 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12
  %147 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 12
  %148 = getelementptr inbounds %"class.std::__1::vector.87", %"class.std::__1::vector.87"* %146, i64 0, i32 0, i32 0
  %149 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %148, align 8
  %150 = icmp eq %"class.jxl::Plane"* %149, null
  br i1 %150, label %171, label %151

151:                                              ; preds = %122
  %152 = bitcast %"class.jxl::Plane"* %149 to i8*
  %153 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12, i32 0, i32 1
  %154 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %153, align 8
  %155 = icmp eq %"class.jxl::Plane"* %154, %149
  br i1 %155, label %168, label %156

156:                                              ; preds = %151, %163
  %157 = phi %"class.jxl::Plane"* [ %158, %163 ], [ %154, %151 ]
  %158 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %157, i64 -1
  %159 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %157, i64 -1, i32 0, i32 5, i32 0, i32 0, i32 0
  %160 = load i8*, i8** %159, align 8
  store i8* null, i8** %159, align 8
  %161 = icmp eq i8* %160, null
  br i1 %161, label %163, label %162

162:                                              ; preds = %156
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %160) #13
  br label %163

163:                                              ; preds = %162, %156
  %164 = icmp eq %"class.jxl::Plane"* %158, %149
  br i1 %164, label %165, label %156

165:                                              ; preds = %163
  %166 = bitcast %"class.std::__1::vector.87"* %146 to i8**
  %167 = load i8*, i8** %166, align 8
  br label %168

168:                                              ; preds = %165, %151
  %169 = phi i8* [ %167, %165 ], [ %152, %151 ]
  store %"class.jxl::Plane"* %149, %"class.jxl::Plane"** %153, align 8
  tail call void @_ZdlPv(i8* %169) #22
  %170 = bitcast %"class.std::__1::vector.87"* %146 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %170, i8 0, i64 24, i1 false) #13
  br label %171

171:                                              ; preds = %122, %168
  %172 = bitcast %"class.std::__1::vector.87"* %147 to i64*
  %173 = load i64, i64* %172, align 8
  %174 = bitcast %"class.std::__1::vector.87"* %146 to i64*
  store i64 %173, i64* %174, align 8
  %175 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 12, i32 0, i32 1
  %176 = bitcast %"class.jxl::Plane"** %175 to i64*
  %177 = load i64, i64* %176, align 8
  %178 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12, i32 0, i32 1
  %179 = bitcast %"class.jxl::Plane"** %178 to i64*
  store i64 %177, i64* %179, align 8
  %180 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 12, i32 0, i32 2, i32 0, i32 0
  %181 = bitcast %"class.jxl::Plane"** %180 to i64*
  %182 = load i64, i64* %181, align 8
  %183 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12, i32 0, i32 2, i32 0, i32 0
  %184 = bitcast %"class.jxl::Plane"** %183 to i64*
  store i64 %182, i64* %184, align 8
  %185 = bitcast %"class.std::__1::vector.87"* %147 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %185, i8 0, i64 24, i1 false) #13
  %186 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 13
  %187 = load i64, i64* %186, align 8
  %188 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 13
  store i64 %187, i64* %188, align 8
  ret %"class.jxl::ImageBundle"* %0
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl11ImageBundleD2Ev(%"class.jxl::ImageBundle"*) unnamed_addr #7 comdat align 2 {
  %2 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12
  %3 = getelementptr inbounds %"class.std::__1::vector.87", %"class.std::__1::vector.87"* %2, i64 0, i32 0, i32 0
  %4 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %3, align 8
  %5 = icmp eq %"class.jxl::Plane"* %4, null
  br i1 %5, label %25, label %6

6:                                                ; preds = %1
  %7 = bitcast %"class.jxl::Plane"* %4 to i8*
  %8 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12, i32 0, i32 1
  %9 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %8, align 8
  %10 = icmp eq %"class.jxl::Plane"* %9, %4
  br i1 %10, label %23, label %11

11:                                               ; preds = %6, %18
  %12 = phi %"class.jxl::Plane"* [ %13, %18 ], [ %9, %6 ]
  %13 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %12, i64 -1
  %14 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %12, i64 -1, i32 0, i32 5, i32 0, i32 0, i32 0
  %15 = load i8*, i8** %14, align 8
  store i8* null, i8** %14, align 8
  %16 = icmp eq i8* %15, null
  br i1 %16, label %18, label %17

17:                                               ; preds = %11
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %15) #13
  br label %18

18:                                               ; preds = %17, %11
  %19 = icmp eq %"class.jxl::Plane"* %13, %4
  br i1 %19, label %20, label %11

20:                                               ; preds = %18
  %21 = bitcast %"class.std::__1::vector.87"* %2 to i8**
  %22 = load i8*, i8** %21, align 8
  br label %23

23:                                               ; preds = %20, %6
  %24 = phi i8* [ %22, %20 ], [ %7, %6 ]
  store %"class.jxl::Plane"* %4, %"class.jxl::Plane"** %8, align 8
  tail call void @_ZdlPv(i8* %24) #22
  br label %25

25:                                               ; preds = %1, %23
  %26 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl13ColorEncodingE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %26, align 8
  %27 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 8, i32 2, i32 0, i32 0, i32 0
  %28 = load i8*, i8** %27, align 8
  store i8* null, i8** %27, align 8
  %29 = icmp eq i8* %28, null
  br i1 %29, label %31, label %30

30:                                               ; preds = %25
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %28) #13
  br label %31

31:                                               ; preds = %25, %30
  %32 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %33 = load i8*, i8** %32, align 8
  store i8* null, i8** %32, align 8
  %34 = icmp eq i8* %33, null
  br i1 %34, label %36, label %35

35:                                               ; preds = %31
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %33) #13
  br label %36

36:                                               ; preds = %35, %31
  %37 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %38 = load i8*, i8** %37, align 8
  store i8* null, i8** %37, align 8
  %39 = icmp eq i8* %38, null
  br i1 %39, label %41, label %40

40:                                               ; preds = %36
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %38) #13
  br label %41

41:                                               ; preds = %40, %36
  %42 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %43 = load i8*, i8** %42, align 8
  store i8* null, i8** %42, align 8
  %44 = icmp eq i8* %43, null
  br i1 %44, label %46, label %45

45:                                               ; preds = %41
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %43) #13
  br label %46

46:                                               ; preds = %41, %45
  %47 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 8
  %48 = bitcast %"class.std::__1::basic_string"* %47 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %49 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %48, i64 0, i32 1, i32 0
  %50 = load i8, i8* %49, align 1
  %51 = icmp slt i8 %50, 0
  br i1 %51, label %52, label %55

52:                                               ; preds = %46
  %53 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %47, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %54 = load i8*, i8** %53, align 8
  tail call void @_ZdlPv(i8* %54) #22
  br label %55

55:                                               ; preds = %46, %52
  %56 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %57 = load %"struct.jxl::jpeg::JPEGData"*, %"struct.jxl::jpeg::JPEGData"** %56, align 8
  store %"struct.jxl::jpeg::JPEGData"* null, %"struct.jxl::jpeg::JPEGData"** %56, align 8
  %58 = icmp eq %"struct.jxl::jpeg::JPEGData"* %57, null
  br i1 %58, label %64, label %59

59:                                               ; preds = %55
  %60 = bitcast %"struct.jxl::jpeg::JPEGData"* %57 to void (%"struct.jxl::jpeg::JPEGData"*)***
  %61 = load void (%"struct.jxl::jpeg::JPEGData"*)**, void (%"struct.jxl::jpeg::JPEGData"*)*** %60, align 8
  %62 = getelementptr inbounds void (%"struct.jxl::jpeg::JPEGData"*)*, void (%"struct.jxl::jpeg::JPEGData"*)** %61, i64 1
  %63 = load void (%"struct.jxl::jpeg::JPEGData"*)*, void (%"struct.jxl::jpeg::JPEGData"*)** %62, align 8
  tail call void %63(%"struct.jxl::jpeg::JPEGData"* nonnull %57) #13
  br label %64

64:                                               ; preds = %55, %59
  ret void
}

declare void @_ZN3jxl11ImageBundle12SetFromImageEONS_6Image3IfEERKNS_13ColorEncodingE(%"class.jxl::ImageBundle"*, %"class.jxl::Image3"* dereferenceable(96), %"struct.jxl::ColorEncoding"* dereferenceable(152)) local_unnamed_addr #3

declare i32 @_ZN3jxl17TransformIfNeededERKNS_11ImageBundleERKNS_13ColorEncodingEPNS_10ThreadPoolEPS0_PPS1_(%"class.jxl::ImageBundle"* dereferenceable(368), %"struct.jxl::ColorEncoding"* dereferenceable(152), %"class.jxl::ThreadPool"*, %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"**) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl6N_SSE410RgbToYcbcrERKNS_5PlaneIfEES4_S4_PS2_S5_S5_PNS_10ThreadPoolE(%"class.jxl::Plane"* dereferenceable(32), %"class.jxl::Plane"* dereferenceable(32), %"class.jxl::Plane"* dereferenceable(32), %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::ThreadPool"* readonly) #0 {
  %8 = alloca %"class.jxl::ThreadPool::RunCallState.125", align 8
  %9 = alloca %"class.jxl::ThreadPool::RunCallState.125", align 8
  %10 = alloca double, align 8
  %11 = alloca %"class.jxl::ThreadPool", align 8
  %12 = alloca %"class.jxl::Plane"*, align 8
  %13 = alloca %"class.jxl::Plane"*, align 8
  %14 = alloca %"class.jxl::Plane"*, align 8
  %15 = alloca i64, align 8
  %16 = alloca i64, align 8
  %17 = alloca i64, align 8
  %18 = alloca %"class.hwy::N_SSE4::Vec128", align 16
  %19 = alloca %"class.hwy::N_SSE4::Vec128", align 16
  %20 = alloca %"class.hwy::N_SSE4::Vec128", align 16
  %21 = alloca %"class.hwy::N_SSE4::Vec128", align 16
  %22 = alloca %"class.hwy::N_SSE4::Vec128", align 16
  %23 = alloca %"class.hwy::N_SSE4::Vec128", align 16
  %24 = alloca %"class.hwy::N_SSE4::Vec128", align 16
  %25 = alloca %"class.hwy::N_SSE4::Vec128", align 16
  %26 = alloca i64, align 8
  %27 = alloca %class.anon.94, align 8
  store %"class.jxl::Plane"* %3, %"class.jxl::Plane"** %12, align 8
  store %"class.jxl::Plane"* %4, %"class.jxl::Plane"** %13, align 8
  store %"class.jxl::Plane"* %5, %"class.jxl::Plane"** %14, align 8
  %28 = bitcast i64* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %28) #13
  store i64 4, i64* %15, align 8
  %29 = bitcast i64* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %29) #13
  %30 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %0, i64 0, i32 0, i32 0
  %31 = load i32, i32* %30, align 8
  %32 = zext i32 %31 to i64
  store i64 %32, i64* %16, align 8
  %33 = bitcast i64* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %33) #13
  %34 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %0, i64 0, i32 0, i32 1
  %35 = load i32, i32* %34, align 4
  %36 = zext i32 %35 to i64
  store i64 %36, i64* %17, align 8
  %37 = icmp eq i32 %31, 0
  %38 = icmp eq i32 %35, 0
  %39 = or i1 %37, %38
  br i1 %39, label %112, label %40

40:                                               ; preds = %7
  %41 = bitcast %"class.hwy::N_SSE4::Vec128"* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %41) #13
  %42 = getelementptr inbounds %"class.hwy::N_SSE4::Vec128", %"class.hwy::N_SSE4::Vec128"* %18, i64 0, i32 0
  store <4 x float> <float 0x3FE0101020000000, float 0x3FE0101020000000, float 0x3FE0101020000000, float 0x3FE0101020000000>, <4 x float>* %42, align 16
  %43 = bitcast %"class.hwy::N_SSE4::Vec128"* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %43) #13
  %44 = getelementptr inbounds %"class.hwy::N_SSE4::Vec128", %"class.hwy::N_SSE4::Vec128"* %19, i64 0, i32 0
  store <4 x float> <float 0x3FD322D0E0000000, float 0x3FD322D0E0000000, float 0x3FD322D0E0000000, float 0x3FD322D0E0000000>, <4 x float>* %44, align 16
  %45 = bitcast %"class.hwy::N_SSE4::Vec128"* %20 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %45) #13
  %46 = getelementptr inbounds %"class.hwy::N_SSE4::Vec128", %"class.hwy::N_SSE4::Vec128"* %20, i64 0, i32 0
  store <4 x float> <float 0x3FE2C8B440000000, float 0x3FE2C8B440000000, float 0x3FE2C8B440000000, float 0x3FE2C8B440000000>, <4 x float>* %46, align 16
  %47 = bitcast %"class.hwy::N_SSE4::Vec128"* %21 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %47) #13
  %48 = getelementptr inbounds %"class.hwy::N_SSE4::Vec128", %"class.hwy::N_SSE4::Vec128"* %21, i64 0, i32 0
  store <4 x float> <float 0x3FBD2F1AA0000000, float 0x3FBD2F1AA0000000, float 0x3FBD2F1AA0000000, float 0x3FBD2F1AA0000000>, <4 x float>* %48, align 16
  %49 = bitcast %"class.hwy::N_SSE4::Vec128"* %22 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %49) #13
  %50 = getelementptr inbounds %"class.hwy::N_SSE4::Vec128", %"class.hwy::N_SSE4::Vec128"* %22, i64 0, i32 0
  store <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float>* %50, align 16
  %51 = bitcast %"class.hwy::N_SSE4::Vec128"* %23 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %51) #13
  %52 = getelementptr inbounds %"class.hwy::N_SSE4::Vec128", %"class.hwy::N_SSE4::Vec128"* %23, i64 0, i32 0
  store <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float>* %52, align 16
  %53 = bitcast %"class.hwy::N_SSE4::Vec128"* %24 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %53) #13
  %54 = getelementptr inbounds %"class.hwy::N_SSE4::Vec128", %"class.hwy::N_SSE4::Vec128"* %24, i64 0, i32 0
  store <4 x float> <float 0x3FE6D314E0000000, float 0x3FE6D314E0000000, float 0x3FE6D314E0000000, float 0x3FE6D314E0000000>, <4 x float>* %54, align 16
  %55 = bitcast %"class.hwy::N_SSE4::Vec128"* %25 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %55) #13
  %56 = getelementptr inbounds %"class.hwy::N_SSE4::Vec128", %"class.hwy::N_SSE4::Vec128"* %25, i64 0, i32 0
  store <4 x float> <float 0x3FE20F0640000000, float 0x3FE20F0640000000, float 0x3FE20F0640000000, float 0x3FE20F0640000000>, <4 x float>* %56, align 16
  %57 = bitcast i64* %26 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %57) #13
  %58 = add nuw nsw i64 %32, 65535
  %59 = udiv i64 %58, %32
  store i64 %59, i64* %26, align 8
  %60 = add nsw i64 %36, -1
  %61 = add nuw nsw i64 %60, %59
  %62 = udiv i64 %61, %59
  %63 = bitcast %class.anon.94* %27 to i8*
  call void @llvm.lifetime.start.p0i8(i64 152, i8* nonnull %63) #13
  %64 = getelementptr inbounds %class.anon.94, %class.anon.94* %27, i64 0, i32 0
  store i64* %26, i64** %64, align 8
  %65 = getelementptr inbounds %class.anon.94, %class.anon.94* %27, i64 0, i32 1
  store i64* %17, i64** %65, align 8
  %66 = getelementptr inbounds %class.anon.94, %class.anon.94* %27, i64 0, i32 2
  store %"class.jxl::Plane"* %0, %"class.jxl::Plane"** %66, align 8
  %67 = getelementptr inbounds %class.anon.94, %class.anon.94* %27, i64 0, i32 3
  store %"class.jxl::Plane"* %1, %"class.jxl::Plane"** %67, align 8
  %68 = getelementptr inbounds %class.anon.94, %class.anon.94* %27, i64 0, i32 4
  store %"class.jxl::Plane"* %2, %"class.jxl::Plane"** %68, align 8
  %69 = getelementptr inbounds %class.anon.94, %class.anon.94* %27, i64 0, i32 5
  store %"class.jxl::Plane"** %12, %"class.jxl::Plane"*** %69, align 8
  %70 = getelementptr inbounds %class.anon.94, %class.anon.94* %27, i64 0, i32 6
  store %"class.jxl::Plane"** %13, %"class.jxl::Plane"*** %70, align 8
  %71 = getelementptr inbounds %class.anon.94, %class.anon.94* %27, i64 0, i32 7
  store %"class.jxl::Plane"** %14, %"class.jxl::Plane"*** %71, align 8
  %72 = getelementptr inbounds %class.anon.94, %class.anon.94* %27, i64 0, i32 8
  store i64* %16, i64** %72, align 8
  %73 = getelementptr inbounds %class.anon.94, %class.anon.94* %27, i64 0, i32 9
  store i64* %15, i64** %73, align 8
  %74 = getelementptr inbounds %class.anon.94, %class.anon.94* %27, i64 0, i32 10
  store %"struct.hwy::N_SSE4::Simd"* @_ZZN3jxl6N_SSE410RgbToYcbcrERKNS_5PlaneIfEES4_S4_PS2_S5_S5_PNS_10ThreadPoolEE2df, %"struct.hwy::N_SSE4::Simd"** %74, align 8
  %75 = getelementptr inbounds %class.anon.94, %class.anon.94* %27, i64 0, i32 11
  store %"class.hwy::N_SSE4::Vec128"* %19, %"class.hwy::N_SSE4::Vec128"** %75, align 8
  %76 = getelementptr inbounds %class.anon.94, %class.anon.94* %27, i64 0, i32 12
  store %"class.hwy::N_SSE4::Vec128"* %22, %"class.hwy::N_SSE4::Vec128"** %76, align 8
  %77 = getelementptr inbounds %class.anon.94, %class.anon.94* %27, i64 0, i32 13
  store %"class.hwy::N_SSE4::Vec128"* %20, %"class.hwy::N_SSE4::Vec128"** %77, align 8
  %78 = getelementptr inbounds %class.anon.94, %class.anon.94* %27, i64 0, i32 14
  store %"class.hwy::N_SSE4::Vec128"* %21, %"class.hwy::N_SSE4::Vec128"** %78, align 8
  %79 = getelementptr inbounds %class.anon.94, %class.anon.94* %27, i64 0, i32 15
  store %"class.hwy::N_SSE4::Vec128"* %23, %"class.hwy::N_SSE4::Vec128"** %79, align 8
  %80 = getelementptr inbounds %class.anon.94, %class.anon.94* %27, i64 0, i32 16
  store %"class.hwy::N_SSE4::Vec128"* %18, %"class.hwy::N_SSE4::Vec128"** %80, align 8
  %81 = getelementptr inbounds %class.anon.94, %class.anon.94* %27, i64 0, i32 17
  store %"class.hwy::N_SSE4::Vec128"* %25, %"class.hwy::N_SSE4::Vec128"** %81, align 8
  %82 = getelementptr inbounds %class.anon.94, %class.anon.94* %27, i64 0, i32 18
  store %"class.hwy::N_SSE4::Vec128"* %24, %"class.hwy::N_SSE4::Vec128"** %82, align 8
  %83 = trunc i64 %62 to i32
  %84 = bitcast double* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %84) #13
  store double 0xFFFFFFFFFFFFFFFF, double* %10, align 8
  call void @_ZN3jxl13TraceRunBeginEPKcPd(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.11, i64 0, i64 0), double* nonnull %10) #13
  %85 = icmp eq %"class.jxl::ThreadPool"* %6, null
  br i1 %85, label %86, label %97

86:                                               ; preds = %40
  %87 = bitcast %"class.jxl::ThreadPool"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %87) #13
  %88 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %11, i64 0, i32 0
  %89 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %11, i64 0, i32 1
  store i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)* @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %88, align 8
  %90 = bitcast i8** %89 to %"class.jxl::ThreadPool"**
  store %"class.jxl::ThreadPool"* %11, %"class.jxl::ThreadPool"** %90, align 8
  %91 = icmp eq i32 %83, 0
  br i1 %91, label %108, label %92

92:                                               ; preds = %86
  %93 = bitcast %"class.jxl::ThreadPool::RunCallState.125"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %93) #13
  %94 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.125", %"class.jxl::ThreadPool::RunCallState.125"* %8, i64 0, i32 0
  %95 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.125", %"class.jxl::ThreadPool::RunCallState.125"* %8, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %94, align 8
  store %class.anon.94* %27, %class.anon.94** %95, align 8
  %96 = call i32 @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj(i8* nonnull %87, i8* nonnull %93, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_SSE410RgbToYcbcrERKNS_5PlaneIfEES8_S8_PS6_S9_S9_PS0_E3$_3E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_SSE410RgbToYcbcrERKNS_5PlaneIfEES8_S8_PS6_S9_S9_PS0_E3$_3E12CallDataFuncEPvjm", i32 0, i32 %83) #13
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %93) #13
  br label %108

97:                                               ; preds = %40
  %98 = icmp eq i32 %83, 0
  br i1 %98, label %110, label %99

99:                                               ; preds = %97
  %100 = bitcast %"class.jxl::ThreadPool::RunCallState.125"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %100) #13
  %101 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.125", %"class.jxl::ThreadPool::RunCallState.125"* %9, i64 0, i32 0
  %102 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.125", %"class.jxl::ThreadPool::RunCallState.125"* %9, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %101, align 8
  store %class.anon.94* %27, %class.anon.94** %102, align 8
  %103 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %6, i64 0, i32 0
  %104 = load i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)*, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %103, align 8
  %105 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %6, i64 0, i32 1
  %106 = load i8*, i8** %105, align 8
  %107 = call i32 %104(i8* %106, i8* nonnull %100, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_SSE410RgbToYcbcrERKNS_5PlaneIfEES8_S8_PS6_S9_S9_PS0_E3$_3E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_SSE410RgbToYcbcrERKNS_5PlaneIfEES8_S8_PS6_S9_S9_PS0_E3$_3E12CallDataFuncEPvjm", i32 0, i32 %83) #13
  br label %108

108:                                              ; preds = %86, %92, %99
  %109 = phi i8* [ %100, %99 ], [ %87, %92 ], [ %87, %86 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %109) #13
  br label %110

110:                                              ; preds = %108, %97
  %111 = load double, double* %10, align 8
  call void @_ZN3jxl11TraceRunEndEPKcd(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.11, i64 0, i64 0), double %111) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %84) #13
  call void @llvm.lifetime.end.p0i8(i64 152, i8* nonnull %63) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %57) #13
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %55) #13
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %53) #13
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %51) #13
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %49) #13
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %47) #13
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %45) #13
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %43) #13
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %41) #13
  br label %112

112:                                              ; preds = %7, %110
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %33) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %29) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %28) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl6N_AVX212TestCubeRootEv() #8 {
  br label %3

1:                                                ; preds = %84
  %2 = fcmp olt float %88, 0x3EAAD7F2A0000000
  br i1 %2, label %63, label %60

3:                                                ; preds = %84, %0
  %4 = phi float [ 0.000000e+00, %0 ], [ %88, %84 ]
  %5 = phi i64 [ 0, %0 ], [ %89, %84 ]
  %6 = uitofp i64 %5 to float
  %7 = fmul float %6, 0x3EE4F8B580000000
  %8 = tail call float @cbrtf(float %7) #18
  %9 = insertelement <8 x float> undef, float %7, i32 0
  %10 = shufflevector <8 x float> %9, <8 x float> undef, <8 x i32> zeroinitializer
  %11 = bitcast <8 x float> %10 to <8 x i32>
  %12 = icmp eq <8 x i32> %11, zeroinitializer
  %13 = sext <8 x i1> %12 to <8 x i32>
  %14 = ashr <8 x i32> %11, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %15 = mul nsw <8 x i32> %14, <i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202>
  %16 = add <8 x i32> %15, <i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752>
  %17 = bitcast <8 x i32> %16 to <4 x i64>
  %18 = bitcast <8 x i32> %13 to <4 x i64>
  %19 = xor <4 x i64> %18, <i64 -1, i64 -1, i64 -1, i64 -1>
  %20 = and <4 x i64> %17, %19
  %21 = bitcast <4 x i64> %20 to <8 x float>
  %22 = fmul <8 x float> %21, %21
  %23 = fmul <8 x float> %22, %22
  %24 = fmul <8 x float> %10, <float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000>
  %25 = fmul <8 x float> %21, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %26 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %24, <8 x float> %23, <8 x float> %25) #13
  %27 = fmul <8 x float> %26, %26
  %28 = fmul <8 x float> %27, %27
  %29 = fmul <8 x float> %26, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %30 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %24, <8 x float> %28, <8 x float> %29) #13
  %31 = fmul <8 x float> %30, %30
  %32 = fmul <8 x float> %31, %31
  %33 = fmul <8 x float> %30, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %34 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %24, <8 x float> %32, <8 x float> %33) #13
  %35 = fmul <8 x float> %34, %34
  %36 = fmul <8 x float> %35, %35
  %37 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %10
  %38 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %37, <8 x float> %36, <8 x float> %34) #13
  %39 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %38, <8 x float> <float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000>, <8 x float> %34) #13
  %40 = fmul <8 x float> %39, %39
  %41 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %40, <8 x float> %10, <8 x float> zeroinitializer) #13
  %42 = extractelement <8 x float> %41, i32 0
  %43 = extractelement <8 x float> %41, i32 1
  %44 = fsub float %42, %43
  %45 = tail call float @llvm.fabs.f32(float %44) #13
  %46 = fcmp ugt float %45, 0x3E801B2B20000000
  %47 = extractelement <8 x float> %41, i32 3
  %48 = extractelement <8 x float> %41, i32 4
  %49 = extractelement <8 x float> %41, i32 5
  %50 = extractelement <8 x float> %41, i32 6
  %51 = extractelement <8 x float> %41, i32 7
  br i1 %46, label %57, label %52

52:                                               ; preds = %3
  %53 = extractelement <8 x float> %41, i32 2
  %54 = fsub float %42, %53
  %55 = tail call float @llvm.fabs.f32(float %54) #13
  %56 = fcmp ugt float %55, 0x3E801B2B20000000
  br i1 %56, label %57, label %64

57:                                               ; preds = %80, %76, %72, %68, %64, %52, %3
  %58 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.1, i64 0, i64 0), i32 97, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.2, i64 0, i64 0)) #13
  %59 = tail call zeroext i1 @_ZN3jxl5AbortEv() #21
  unreachable

60:                                               ; preds = %1
  %61 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.1, i64 0, i64 0), i32 104, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.3, i64 0, i64 0)) #13
  %62 = tail call zeroext i1 @_ZN3jxl5AbortEv() #21
  unreachable

63:                                               ; preds = %1
  ret void

64:                                               ; preds = %52
  %65 = fsub float %42, %47
  %66 = tail call float @llvm.fabs.f32(float %65) #13
  %67 = fcmp ugt float %66, 0x3E801B2B20000000
  br i1 %67, label %57, label %68

68:                                               ; preds = %64
  %69 = fsub float %42, %48
  %70 = tail call float @llvm.fabs.f32(float %69) #13
  %71 = fcmp ugt float %70, 0x3E801B2B20000000
  br i1 %71, label %57, label %72

72:                                               ; preds = %68
  %73 = fsub float %42, %49
  %74 = tail call float @llvm.fabs.f32(float %73) #13
  %75 = fcmp ugt float %74, 0x3E801B2B20000000
  br i1 %75, label %57, label %76

76:                                               ; preds = %72
  %77 = fsub float %42, %50
  %78 = tail call float @llvm.fabs.f32(float %77) #13
  %79 = fcmp ugt float %78, 0x3E801B2B20000000
  br i1 %79, label %57, label %80

80:                                               ; preds = %76
  %81 = fsub float %42, %51
  %82 = tail call float @llvm.fabs.f32(float %81) #13
  %83 = fcmp ugt float %82, 0x3E801B2B20000000
  br i1 %83, label %57, label %84

84:                                               ; preds = %80
  %85 = fsub float %42, %8
  %86 = tail call float @llvm.fabs.f32(float %85) #13
  %87 = fcmp olt float %4, %86
  %88 = select i1 %87, float %86, float %4
  %89 = add nuw nsw i64 %5, 1
  %90 = icmp eq i64 %89, 2000000
  br i1 %90, label %1, label %3
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl6N_AVX215LinearSRGBToXYBERKNS_6Image3IfEEPKfPNS_10ThreadPoolEPS2_(%"class.jxl::Image3"* dereferenceable(96), float* noalias, %"class.jxl::ThreadPool"* readonly, %"class.jxl::Image3"* noalias) local_unnamed_addr #9 {
  %5 = alloca %"class.jxl::ThreadPool::RunCallState.131", align 8
  %6 = alloca %"class.jxl::ThreadPool::RunCallState.131", align 8
  %7 = alloca double, align 8
  %8 = alloca %"class.jxl::ThreadPool", align 8
  %9 = alloca float*, align 8
  %10 = alloca %"class.jxl::Image3"*, align 8
  %11 = alloca i64, align 8
  %12 = alloca %class.anon.95, align 8
  store float* %1, float** %9, align 8
  store %"class.jxl::Image3"* %3, %"class.jxl::Image3"** %10, align 8
  %13 = bitcast i64* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %13) #13
  %14 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 0, i32 0, i32 0
  %15 = load i32, i32* %14, align 8
  %16 = zext i32 %15 to i64
  store i64 %16, i64* %11, align 8
  %17 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 0, i32 0, i32 1
  %18 = load i32, i32* %17, align 4
  %19 = bitcast %class.anon.95* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %19) #13
  %20 = getelementptr inbounds %class.anon.95, %class.anon.95* %12, i64 0, i32 0
  store %"class.jxl::Image3"* %0, %"class.jxl::Image3"** %20, align 8
  %21 = getelementptr inbounds %class.anon.95, %class.anon.95* %12, i64 0, i32 1
  store %"class.jxl::Image3"** %10, %"class.jxl::Image3"*** %21, align 8
  %22 = getelementptr inbounds %class.anon.95, %class.anon.95* %12, i64 0, i32 2
  store i64* %11, i64** %22, align 8
  %23 = getelementptr inbounds %class.anon.95, %class.anon.95* %12, i64 0, i32 3
  store %"struct.hwy::N_AVX2::Simd"* @_ZZN3jxl6N_AVX215LinearSRGBToXYBERKNS_6Image3IfEEPKfPNS_10ThreadPoolEPS2_E1d, %"struct.hwy::N_AVX2::Simd"** %23, align 8
  %24 = getelementptr inbounds %class.anon.95, %class.anon.95* %12, i64 0, i32 4
  store float** %9, float*** %24, align 8
  %25 = bitcast double* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %25) #13
  store double 0xFFFFFFFFFFFFFFFF, double* %7, align 8
  call void @_ZN3jxl13TraceRunBeginEPKcPd(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i64 0, i64 0), double* nonnull %7) #13
  %26 = icmp eq %"class.jxl::ThreadPool"* %2, null
  br i1 %26, label %27, label %38

27:                                               ; preds = %4
  %28 = bitcast %"class.jxl::ThreadPool"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %28) #13
  %29 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %8, i64 0, i32 0
  %30 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %8, i64 0, i32 1
  store i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)* @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %29, align 8
  %31 = bitcast i8** %30 to %"class.jxl::ThreadPool"**
  store %"class.jxl::ThreadPool"* %8, %"class.jxl::ThreadPool"** %31, align 8
  %32 = icmp eq i32 %18, 0
  br i1 %32, label %49, label %33

33:                                               ; preds = %27
  %34 = bitcast %"class.jxl::ThreadPool::RunCallState.131"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %34) #13
  %35 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.131", %"class.jxl::ThreadPool::RunCallState.131"* %5, i64 0, i32 0
  %36 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.131", %"class.jxl::ThreadPool::RunCallState.131"* %5, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %35, align 8
  store %class.anon.95* %12, %class.anon.95** %36, align 8
  %37 = call i32 @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj(i8* nonnull %28, i8* nonnull %34, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX215LinearSRGBToXYBERKNS_6Image3IfEEPKfPS0_PS6_E3$_4E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX215LinearSRGBToXYBERKNS_6Image3IfEEPKfPS0_PS6_E3$_4E12CallDataFuncEPvjm", i32 0, i32 %18) #13
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %34) #13
  br label %49

38:                                               ; preds = %4
  %39 = icmp eq i32 %18, 0
  br i1 %39, label %51, label %40

40:                                               ; preds = %38
  %41 = bitcast %"class.jxl::ThreadPool::RunCallState.131"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %41) #13
  %42 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.131", %"class.jxl::ThreadPool::RunCallState.131"* %6, i64 0, i32 0
  %43 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.131", %"class.jxl::ThreadPool::RunCallState.131"* %6, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %42, align 8
  store %class.anon.95* %12, %class.anon.95** %43, align 8
  %44 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %2, i64 0, i32 0
  %45 = load i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)*, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %44, align 8
  %46 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %2, i64 0, i32 1
  %47 = load i8*, i8** %46, align 8
  %48 = call i32 %45(i8* %47, i8* nonnull %41, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX215LinearSRGBToXYBERKNS_6Image3IfEEPKfPS0_PS6_E3$_4E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX215LinearSRGBToXYBERKNS_6Image3IfEEPKfPS0_PS6_E3$_4E12CallDataFuncEPvjm", i32 0, i32 %18) #13
  br label %49

49:                                               ; preds = %27, %33, %40
  %50 = phi i8* [ %41, %40 ], [ %28, %33 ], [ %28, %27 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %50) #13
  br label %51

51:                                               ; preds = %49, %38
  %52 = load double, double* %7, align 8
  call void @_ZN3jxl11TraceRunEndEPKcd(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i64 0, i64 0), double %52) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %25) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %19) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %13) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl6N_AVX29SRGBToXYBERKNS_6Image3IfEEPKfPNS_10ThreadPoolEPS2_(%"class.jxl::Image3"* dereferenceable(96), float* noalias, %"class.jxl::ThreadPool"* readonly, %"class.jxl::Image3"* noalias) local_unnamed_addr #9 {
  %5 = alloca %"class.jxl::ThreadPool::RunCallState.133", align 8
  %6 = alloca %"class.jxl::ThreadPool::RunCallState.133", align 8
  %7 = alloca double, align 8
  %8 = alloca %"class.jxl::ThreadPool", align 8
  %9 = alloca float*, align 8
  %10 = alloca %"class.jxl::Image3"*, align 8
  %11 = alloca i64, align 8
  %12 = alloca %class.anon.96, align 8
  store float* %1, float** %9, align 8
  store %"class.jxl::Image3"* %3, %"class.jxl::Image3"** %10, align 8
  %13 = bitcast i64* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %13) #13
  %14 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 0, i32 0, i32 0
  %15 = load i32, i32* %14, align 8
  %16 = zext i32 %15 to i64
  store i64 %16, i64* %11, align 8
  %17 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 0, i32 0, i32 1
  %18 = load i32, i32* %17, align 4
  %19 = bitcast %class.anon.96* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %19) #13
  %20 = getelementptr inbounds %class.anon.96, %class.anon.96* %12, i64 0, i32 0
  store %"class.jxl::Image3"* %0, %"class.jxl::Image3"** %20, align 8
  %21 = getelementptr inbounds %class.anon.96, %class.anon.96* %12, i64 0, i32 1
  store %"class.jxl::Image3"** %10, %"class.jxl::Image3"*** %21, align 8
  %22 = getelementptr inbounds %class.anon.96, %class.anon.96* %12, i64 0, i32 2
  store i64* %11, i64** %22, align 8
  %23 = getelementptr inbounds %class.anon.96, %class.anon.96* %12, i64 0, i32 3
  store %"struct.hwy::N_AVX2::Simd"* @_ZZN3jxl6N_AVX29SRGBToXYBERKNS_6Image3IfEEPKfPNS_10ThreadPoolEPS2_E1d, %"struct.hwy::N_AVX2::Simd"** %23, align 8
  %24 = getelementptr inbounds %class.anon.96, %class.anon.96* %12, i64 0, i32 4
  store float** %9, float*** %24, align 8
  %25 = bitcast double* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %25) #13
  store double 0xFFFFFFFFFFFFFFFF, double* %7, align 8
  call void @_ZN3jxl13TraceRunBeginEPKcPd(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.5, i64 0, i64 0), double* nonnull %7) #13
  %26 = icmp eq %"class.jxl::ThreadPool"* %2, null
  br i1 %26, label %27, label %38

27:                                               ; preds = %4
  %28 = bitcast %"class.jxl::ThreadPool"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %28) #13
  %29 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %8, i64 0, i32 0
  %30 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %8, i64 0, i32 1
  store i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)* @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %29, align 8
  %31 = bitcast i8** %30 to %"class.jxl::ThreadPool"**
  store %"class.jxl::ThreadPool"* %8, %"class.jxl::ThreadPool"** %31, align 8
  %32 = icmp eq i32 %18, 0
  br i1 %32, label %49, label %33

33:                                               ; preds = %27
  %34 = bitcast %"class.jxl::ThreadPool::RunCallState.133"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %34) #13
  %35 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.133", %"class.jxl::ThreadPool::RunCallState.133"* %5, i64 0, i32 0
  %36 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.133", %"class.jxl::ThreadPool::RunCallState.133"* %5, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %35, align 8
  store %class.anon.96* %12, %class.anon.96** %36, align 8
  %37 = call i32 @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj(i8* nonnull %28, i8* nonnull %34, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX29SRGBToXYBERKNS_6Image3IfEEPKfPS0_PS6_E3$_5E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX29SRGBToXYBERKNS_6Image3IfEEPKfPS0_PS6_E3$_5E12CallDataFuncEPvjm", i32 0, i32 %18) #13
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %34) #13
  br label %49

38:                                               ; preds = %4
  %39 = icmp eq i32 %18, 0
  br i1 %39, label %51, label %40

40:                                               ; preds = %38
  %41 = bitcast %"class.jxl::ThreadPool::RunCallState.133"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %41) #13
  %42 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.133", %"class.jxl::ThreadPool::RunCallState.133"* %6, i64 0, i32 0
  %43 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.133", %"class.jxl::ThreadPool::RunCallState.133"* %6, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %42, align 8
  store %class.anon.96* %12, %class.anon.96** %43, align 8
  %44 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %2, i64 0, i32 0
  %45 = load i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)*, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %44, align 8
  %46 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %2, i64 0, i32 1
  %47 = load i8*, i8** %46, align 8
  %48 = call i32 %45(i8* %47, i8* nonnull %41, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX29SRGBToXYBERKNS_6Image3IfEEPKfPS0_PS6_E3$_5E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX29SRGBToXYBERKNS_6Image3IfEEPKfPS0_PS6_E3$_5E12CallDataFuncEPvjm", i32 0, i32 %18) #13
  br label %49

49:                                               ; preds = %27, %33, %40
  %50 = phi i8* [ %41, %40 ], [ %28, %33 ], [ %28, %27 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %50) #13
  br label %51

51:                                               ; preds = %49, %38
  %52 = load double, double* %7, align 8
  call void @_ZN3jxl11TraceRunEndEPKcd(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.5, i64 0, i64 0), double %52) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %25) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %19) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %13) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl6N_AVX218SRGBToXYBAndLinearERKNS_6Image3IfEEPKfPNS_10ThreadPoolEPS2_S9_(%"class.jxl::Image3"* dereferenceable(96), float* noalias, %"class.jxl::ThreadPool"* readonly, %"class.jxl::Image3"* noalias, %"class.jxl::Image3"* noalias) local_unnamed_addr #9 {
  %6 = alloca %"class.jxl::ThreadPool::RunCallState.137", align 8
  %7 = alloca %"class.jxl::ThreadPool::RunCallState.137", align 8
  %8 = alloca double, align 8
  %9 = alloca %"class.jxl::ThreadPool", align 8
  %10 = alloca float*, align 8
  %11 = alloca %"class.jxl::Image3"*, align 8
  %12 = alloca %"class.jxl::Image3"*, align 8
  %13 = alloca i64, align 8
  %14 = alloca %class.anon.97, align 8
  store float* %1, float** %10, align 8
  store %"class.jxl::Image3"* %3, %"class.jxl::Image3"** %11, align 8
  store %"class.jxl::Image3"* %4, %"class.jxl::Image3"** %12, align 8
  %15 = bitcast i64* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %15) #13
  %16 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 0, i32 0, i32 0
  %17 = load i32, i32* %16, align 8
  %18 = zext i32 %17 to i64
  store i64 %18, i64* %13, align 8
  %19 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 0, i32 0, i32 1
  %20 = load i32, i32* %19, align 4
  %21 = bitcast %class.anon.97* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %21) #13
  %22 = getelementptr inbounds %class.anon.97, %class.anon.97* %14, i64 0, i32 0
  store %"class.jxl::Image3"* %0, %"class.jxl::Image3"** %22, align 8
  %23 = getelementptr inbounds %class.anon.97, %class.anon.97* %14, i64 0, i32 1
  store %"class.jxl::Image3"** %12, %"class.jxl::Image3"*** %23, align 8
  %24 = getelementptr inbounds %class.anon.97, %class.anon.97* %14, i64 0, i32 2
  store %"class.jxl::Image3"** %11, %"class.jxl::Image3"*** %24, align 8
  %25 = getelementptr inbounds %class.anon.97, %class.anon.97* %14, i64 0, i32 3
  store i64* %13, i64** %25, align 8
  %26 = getelementptr inbounds %class.anon.97, %class.anon.97* %14, i64 0, i32 4
  store %"struct.hwy::N_AVX2::Simd"* @_ZZN3jxl6N_AVX218SRGBToXYBAndLinearERKNS_6Image3IfEEPKfPNS_10ThreadPoolEPS2_S9_E1d, %"struct.hwy::N_AVX2::Simd"** %26, align 8
  %27 = getelementptr inbounds %class.anon.97, %class.anon.97* %14, i64 0, i32 5
  store float** %10, float*** %27, align 8
  %28 = bitcast double* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %28) #13
  store double 0xFFFFFFFFFFFFFFFF, double* %8, align 8
  call void @_ZN3jxl13TraceRunBeginEPKcPd(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.6, i64 0, i64 0), double* nonnull %8) #13
  %29 = icmp eq %"class.jxl::ThreadPool"* %2, null
  br i1 %29, label %30, label %41

30:                                               ; preds = %5
  %31 = bitcast %"class.jxl::ThreadPool"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %31) #13
  %32 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %9, i64 0, i32 0
  %33 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %9, i64 0, i32 1
  store i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)* @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %32, align 8
  %34 = bitcast i8** %33 to %"class.jxl::ThreadPool"**
  store %"class.jxl::ThreadPool"* %9, %"class.jxl::ThreadPool"** %34, align 8
  %35 = icmp eq i32 %20, 0
  br i1 %35, label %52, label %36

36:                                               ; preds = %30
  %37 = bitcast %"class.jxl::ThreadPool::RunCallState.137"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %37) #13
  %38 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.137", %"class.jxl::ThreadPool::RunCallState.137"* %6, i64 0, i32 0
  %39 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.137", %"class.jxl::ThreadPool::RunCallState.137"* %6, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %38, align 8
  store %class.anon.97* %14, %class.anon.97** %39, align 8
  %40 = call i32 @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj(i8* nonnull %31, i8* nonnull %37, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX218SRGBToXYBAndLinearERKNS_6Image3IfEEPKfPS0_PS6_SC_E3$_6E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX218SRGBToXYBAndLinearERKNS_6Image3IfEEPKfPS0_PS6_SC_E3$_6E12CallDataFuncEPvjm", i32 0, i32 %20) #13
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %37) #13
  br label %52

41:                                               ; preds = %5
  %42 = icmp eq i32 %20, 0
  br i1 %42, label %54, label %43

43:                                               ; preds = %41
  %44 = bitcast %"class.jxl::ThreadPool::RunCallState.137"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %44) #13
  %45 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.137", %"class.jxl::ThreadPool::RunCallState.137"* %7, i64 0, i32 0
  %46 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.137", %"class.jxl::ThreadPool::RunCallState.137"* %7, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %45, align 8
  store %class.anon.97* %14, %class.anon.97** %46, align 8
  %47 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %2, i64 0, i32 0
  %48 = load i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)*, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %47, align 8
  %49 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %2, i64 0, i32 1
  %50 = load i8*, i8** %49, align 8
  %51 = call i32 %48(i8* %50, i8* nonnull %44, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX218SRGBToXYBAndLinearERKNS_6Image3IfEEPKfPS0_PS6_SC_E3$_6E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX218SRGBToXYBAndLinearERKNS_6Image3IfEEPKfPS0_PS6_SC_E3$_6E12CallDataFuncEPvjm", i32 0, i32 %20) #13
  br label %52

52:                                               ; preds = %30, %36, %43
  %53 = phi i8* [ %44, %43 ], [ %31, %36 ], [ %31, %30 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %53) #13
  br label %54

54:                                               ; preds = %52, %41
  %55 = load double, double* %8, align 8
  call void @_ZN3jxl11TraceRunEndEPKcd(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.6, i64 0, i64 0), double %55) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %28) #13
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %21) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %15) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.jxl::ImageBundle"* @_ZN3jxl6N_AVX25ToXYBERKNS_11ImageBundleEPNS_10ThreadPoolEPNS_6Image3IfEEPS1_(%"class.jxl::ImageBundle"* dereferenceable(368), %"class.jxl::ThreadPool"*, %"class.jxl::Image3"* noalias, %"class.jxl::ImageBundle"* noalias) #8 {
  %5 = alloca [96 x float], align 32
  %6 = alloca %"class.jxl::ImageBundle", align 8
  %7 = alloca %"class.jxl::Image3", align 8
  %8 = alloca %"class.jxl::ImageBundle", align 8
  %9 = alloca %"class.jxl::ImageBundle", align 8
  %10 = alloca %"class.jxl::ImageBundle"*, align 8
  %11 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %12 = load %"struct.jxl::jpeg::JPEGData"*, %"struct.jxl::jpeg::JPEGData"** %11, align 8
  %13 = icmp eq %"struct.jxl::jpeg::JPEGData"* %12, null
  br i1 %13, label %14, label %42

14:                                               ; preds = %4
  %15 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 0, i32 0, i32 0
  %16 = load i32, i32* %15, align 8
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %18, label %27

18:                                               ; preds = %14
  %19 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12, i32 0, i32 0
  %20 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %19, align 8
  %21 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12, i32 0, i32 1
  %22 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %21, align 8
  %23 = icmp eq %"class.jxl::Plane"* %20, %22
  br i1 %23, label %27, label %24

24:                                               ; preds = %18
  %25 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %20, i64 0, i32 0, i32 0
  %26 = load i32, i32* %25, align 8
  br label %27

27:                                               ; preds = %14, %18, %24
  %28 = phi i32 [ %16, %14 ], [ 0, %18 ], [ %26, %24 ]
  %29 = zext i32 %28 to i64
  %30 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 0, i32 0, i32 1
  %31 = load i32, i32* %30, align 4
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %33, label %49

33:                                               ; preds = %27
  %34 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12, i32 0, i32 0
  %35 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %34, align 8
  %36 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12, i32 0, i32 1
  %37 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %36, align 8
  %38 = icmp eq %"class.jxl::Plane"* %35, %37
  br i1 %38, label %49, label %39

39:                                               ; preds = %33
  %40 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %35, i64 0, i32 0, i32 1
  %41 = load i32, i32* %40, align 4
  br label %49

42:                                               ; preds = %4
  %43 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %12, i64 0, i32 1
  %44 = load i32, i32* %43, align 8
  %45 = sext i32 %44 to i64
  %46 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %12, i64 0, i32 2
  %47 = load i32, i32* %46, align 4
  %48 = sext i32 %47 to i64
  br label %63

49:                                               ; preds = %27, %33, %39
  %50 = phi i32 [ %31, %27 ], [ 0, %33 ], [ %41, %39 ]
  %51 = zext i32 %50 to i64
  %52 = zext i32 %16 to i64
  br i1 %17, label %53, label %63

53:                                               ; preds = %49
  %54 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12, i32 0, i32 0
  %55 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %54, align 8
  %56 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12, i32 0, i32 1
  %57 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %56, align 8
  %58 = icmp eq %"class.jxl::Plane"* %55, %57
  br i1 %58, label %63, label %59

59:                                               ; preds = %53
  %60 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %55, i64 0, i32 0, i32 0
  %61 = load i32, i32* %60, align 8
  %62 = zext i32 %61 to i64
  br label %63

63:                                               ; preds = %59, %53, %49, %42
  %64 = phi i64 [ %48, %42 ], [ %51, %59 ], [ %51, %53 ], [ %51, %49 ]
  %65 = phi i64 [ %45, %42 ], [ %29, %59 ], [ %29, %53 ], [ %29, %49 ]
  %66 = phi i64 [ %45, %42 ], [ %62, %59 ], [ 0, %53 ], [ %52, %49 ]
  %67 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %2, i64 0, i32 0, i64 0, i32 0, i32 0
  %68 = load i32, i32* %67, align 8
  %69 = zext i32 %68 to i64
  %70 = icmp eq i64 %66, %69
  br i1 %70, label %71, label %97

71:                                               ; preds = %63
  br i1 %13, label %76, label %72

72:                                               ; preds = %71
  %73 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %12, i64 0, i32 2
  %74 = load i32, i32* %73, align 4
  %75 = sext i32 %74 to i64
  br label %91

76:                                               ; preds = %71
  %77 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 0, i32 0, i32 1
  %78 = load i32, i32* %77, align 4
  %79 = zext i32 %78 to i64
  %80 = icmp eq i32 %78, 0
  br i1 %80, label %81, label %91

81:                                               ; preds = %76
  %82 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12, i32 0, i32 0
  %83 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %82, align 8
  %84 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12, i32 0, i32 1
  %85 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %84, align 8
  %86 = icmp eq %"class.jxl::Plane"* %83, %85
  br i1 %86, label %91, label %87

87:                                               ; preds = %81
  %88 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %83, i64 0, i32 0, i32 1
  %89 = load i32, i32* %88, align 4
  %90 = zext i32 %89 to i64
  br label %91

91:                                               ; preds = %72, %76, %81, %87
  %92 = phi i64 [ %75, %72 ], [ %90, %87 ], [ 0, %81 ], [ %79, %76 ]
  %93 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %2, i64 0, i32 0, i64 0, i32 0, i32 1
  %94 = load i32, i32* %93, align 4
  %95 = zext i32 %94 to i64
  %96 = icmp eq i64 %92, %95
  br i1 %96, label %100, label %97

97:                                               ; preds = %63, %91
  %98 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.1, i64 0, i64 0), i32 273, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.7, i64 0, i64 0)) #13
  %99 = tail call zeroext i1 @_ZN3jxl5AbortEv() #21
  unreachable

100:                                              ; preds = %91
  %101 = bitcast [96 x float]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 384, i8* nonnull %101) #13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %101, i8 -1, i64 384, i1 false)
  %102 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 9
  %103 = load %"struct.jxl::ImageMetadata"*, %"struct.jxl::ImageMetadata"** %102, align 8
  %104 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %103, i64 0, i32 14, i32 3
  %105 = load float, float* %104, align 4
  %106 = fcmp une float %105, 0.000000e+00
  br i1 %106, label %213, label %107

107:                                              ; preds = %213, %100
  %108 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.13, i64 0, i64 0), i32 250, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.14, i64 0, i64 0)) #13
  %109 = tail call zeroext i1 @_ZN3jxl5AbortEv() #21
  unreachable

110:                                              ; preds = %254
  %111 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10
  call void @_ZN3jxl6N_AVX215LinearSRGBToXYBERKNS_6Image3IfEEPKfPNS_10ThreadPoolEPS2_(%"class.jxl::Image3"* dereferenceable(96) %111, float* nonnull %218, %"class.jxl::ThreadPool"* %1, %"class.jxl::Image3"* %2)
  br i1 %271, label %112, label %211

112:                                              ; preds = %110
  %113 = bitcast %"class.jxl::ImageBundle"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 368, i8* nonnull %113) #13
  call void @_ZNK3jxl11ImageBundle4CopyEv(%"class.jxl::ImageBundle"* nonnull sret %6, %"class.jxl::ImageBundle"* %0)
  %114 = call dereferenceable(368) %"class.jxl::ImageBundle"* @_ZN3jxl11ImageBundleaSEOS0_(%"class.jxl::ImageBundle"* nonnull %3, %"class.jxl::ImageBundle"* nonnull dereferenceable(368) %6) #13
  call void @_ZN3jxl11ImageBundleD2Ev(%"class.jxl::ImageBundle"* nonnull %6) #13
  call void @llvm.lifetime.end.p0i8(i64 368, i8* nonnull %113) #13
  br label %211

115:                                              ; preds = %254
  %116 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 7
  %117 = load i8, i8* %116, align 1, !range !2
  %118 = icmp ne i8 %117, 0
  %119 = load i32, i32* %272, align 8
  %120 = icmp ult i32 %119, 2
  %121 = and i1 %118, %120
  br i1 %121, label %122, label %163

122:                                              ; preds = %115
  %123 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 2
  %124 = load i32, i32* %123, align 4
  %125 = icmp eq i32 %124, 1
  br i1 %125, label %126, label %163

126:                                              ; preds = %122
  %127 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 3
  %128 = load i32, i32* %127, align 8
  %129 = icmp eq i32 %128, 1
  br i1 %129, label %130, label %163

130:                                              ; preds = %126
  %131 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 4, i32 2
  %132 = load i8, i8* %131, align 4, !range !2
  %133 = icmp eq i8 %132, 0
  br i1 %133, label %134, label %163

134:                                              ; preds = %130
  %135 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 4, i32 4
  %136 = load i32, i32* %135, align 4
  %137 = icmp eq i32 %136, 13
  br i1 %137, label %138, label %163

138:                                              ; preds = %134
  br i1 %271, label %141, label %139

139:                                              ; preds = %138
  %140 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10
  call void @_ZN3jxl6N_AVX29SRGBToXYBERKNS_6Image3IfEEPKfPNS_10ThreadPoolEPS2_(%"class.jxl::Image3"* dereferenceable(96) %140, float* nonnull %218, %"class.jxl::ThreadPool"* %1, %"class.jxl::Image3"* %2)
  br label %211

141:                                              ; preds = %138
  %142 = bitcast %"class.jxl::Image3"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %142) #13
  %143 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %7, i64 0, i32 0, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %143, i64 %65, i64 %64, i64 4) #13
  %144 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %7, i64 0, i32 0, i64 1, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %144, i64 %65, i64 %64, i64 4) #13
  %145 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %7, i64 0, i32 0, i64 2, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %145, i64 %65, i64 %64, i64 4) #13
  call void @_ZN3jxl11ImageBundle12SetFromImageEONS_6Image3IfEERKNS_13ColorEncodingE(%"class.jxl::ImageBundle"* nonnull %3, %"class.jxl::Image3"* nonnull dereferenceable(96) %7, %"struct.jxl::ColorEncoding"* dereferenceable(152) %275) #13
  %146 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %7, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %147 = load i8*, i8** %146, align 8
  store i8* null, i8** %146, align 8
  %148 = icmp eq i8* %147, null
  br i1 %148, label %150, label %149

149:                                              ; preds = %141
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %147) #13
  br label %150

150:                                              ; preds = %149, %141
  %151 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %7, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %152 = load i8*, i8** %151, align 8
  store i8* null, i8** %151, align 8
  %153 = icmp eq i8* %152, null
  br i1 %153, label %155, label %154

154:                                              ; preds = %150
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %152) #13
  br label %155

155:                                              ; preds = %154, %150
  %156 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %7, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %157 = load i8*, i8** %156, align 8
  store i8* null, i8** %156, align 8
  %158 = icmp eq i8* %157, null
  br i1 %158, label %160, label %159

159:                                              ; preds = %155
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %157) #13
  br label %160

160:                                              ; preds = %155, %159
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %142) #13
  %161 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10
  %162 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %3, i64 0, i32 10
  call void @_ZN3jxl6N_AVX218SRGBToXYBAndLinearERKNS_6Image3IfEEPKfPNS_10ThreadPoolEPS2_S9_(%"class.jxl::Image3"* dereferenceable(96) %161, float* nonnull %218, %"class.jxl::ThreadPool"* %1, %"class.jxl::Image3"* %2, %"class.jxl::Image3"* %162)
  br label %211

163:                                              ; preds = %115, %122, %126, %130, %134
  %164 = bitcast %"class.jxl::ImageBundle"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 368, i8* nonnull %164) #13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %164, i8 -86, i64 368, i1 false)
  %165 = bitcast %"class.jxl::ImageBundle"* %8 to i64*
  store i64 0, i64* %165, align 8
  %166 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %8, i64 0, i32 1
  store i32 1, i32* %166, align 8
  %167 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %8, i64 0, i32 3
  call void @_ZN3jxl22YCbCrChromaSubsamplingC1Ev(%"struct.jxl::YCbCrChromaSubsampling"* %167) #13
  %168 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %8, i64 0, i32 4, i32 0
  %169 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %8, i64 0, i32 8
  %170 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %8, i64 0, i32 11
  %171 = bitcast i32* %168 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %171, i8 0, i64 14, i1 false) #13
  %172 = bitcast %"class.std::__1::basic_string"* %169 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %172, i8 0, i64 128, i1 false) #13
  call void @_ZN3jxl13ColorEncodingC1Ev(%"struct.jxl::ColorEncoding"* %170) #13
  %173 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %8, i64 0, i32 12
  %174 = bitcast %"class.std::__1::vector.87"* %173 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %174, i8 0, i64 32, i1 false) #13
  br i1 %271, label %194, label %175

175:                                              ; preds = %163
  %176 = bitcast %"class.jxl::ImageBundle"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 368, i8* nonnull %176) #13
  %177 = bitcast %"struct.jxl::ImageMetadata"** %102 to i64*
  %178 = load i64, i64* %177, align 8
  %179 = bitcast %"class.jxl::ImageBundle"* %9 to i64*
  store i64 0, i64* %179, align 8
  %180 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %9, i64 0, i32 1
  store i32 1, i32* %180, align 8
  %181 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %9, i64 0, i32 3
  call void @_ZN3jxl22YCbCrChromaSubsamplingC1Ev(%"struct.jxl::YCbCrChromaSubsampling"* %181) #13
  %182 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %9, i64 0, i32 4, i32 0
  %183 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %9, i64 0, i32 8
  %184 = bitcast %"class.std::__1::basic_string"* %183 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %184, i8 0, i64 24, i1 false) #13
  %185 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %9, i64 0, i32 9
  %186 = bitcast i32* %182 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %186, i8 0, i64 14, i1 false) #13
  %187 = bitcast %"struct.jxl::ImageMetadata"** %185 to i64*
  store i64 %178, i64* %187, align 8
  %188 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %9, i64 0, i32 10
  %189 = bitcast %"class.jxl::Image3"* %188 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %189, i8 0, i64 96, i1 false) #13
  %190 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %9, i64 0, i32 11
  call void @_ZN3jxl13ColorEncodingC1Ev(%"struct.jxl::ColorEncoding"* %190) #13
  %191 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %9, i64 0, i32 12
  %192 = bitcast %"class.std::__1::vector.87"* %191 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %192, i8 0, i64 32, i1 false) #13
  %193 = call dereferenceable(368) %"class.jxl::ImageBundle"* @_ZN3jxl11ImageBundleaSEOS0_(%"class.jxl::ImageBundle"* nonnull %8, %"class.jxl::ImageBundle"* nonnull dereferenceable(368) %9) #13
  call void @_ZN3jxl11ImageBundleD2Ev(%"class.jxl::ImageBundle"* nonnull %9) #13
  call void @llvm.lifetime.end.p0i8(i64 368, i8* nonnull %176) #13
  br label %194

194:                                              ; preds = %163, %175
  %195 = phi %"class.jxl::ImageBundle"* [ %8, %175 ], [ %3, %163 ]
  %196 = bitcast %"class.jxl::ImageBundle"** %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %196) #13
  store %"class.jxl::ImageBundle"* inttoptr (i64 -6148914691236517206 to %"class.jxl::ImageBundle"*), %"class.jxl::ImageBundle"** %10, align 8
  %197 = call i32 @_ZN3jxl17TransformIfNeededERKNS_11ImageBundleERKNS_13ColorEncodingEPNS_10ThreadPoolEPS0_PPS1_(%"class.jxl::ImageBundle"* dereferenceable(368) %0, %"struct.jxl::ColorEncoding"* dereferenceable(152) %275, %"class.jxl::ThreadPool"* %1, %"class.jxl::ImageBundle"* nonnull %195, %"class.jxl::ImageBundle"** nonnull %10) #13
  %198 = icmp eq i32 %197, 0
  br i1 %198, label %202, label %199

199:                                              ; preds = %194
  %200 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.1, i64 0, i64 0), i32 335, i8* getelementptr inbounds ([69 x i8], [69 x i8]* @.str.9, i64 0, i64 0)) #13
  %201 = call zeroext i1 @_ZN3jxl5AbortEv() #21
  unreachable

202:                                              ; preds = %194
  %203 = load %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"** %10, align 8
  %204 = icmp eq %"class.jxl::ImageBundle"* %203, %195
  br i1 %204, label %208, label %205

205:                                              ; preds = %202
  %206 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.1, i64 0, i64 0), i32 337, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.10, i64 0, i64 0)) #13
  %207 = call zeroext i1 @_ZN3jxl5AbortEv() #21
  unreachable

208:                                              ; preds = %202
  %209 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %195, i64 0, i32 10
  call void @_ZN3jxl6N_AVX215LinearSRGBToXYBERKNS_6Image3IfEEPKfPNS_10ThreadPoolEPS2_(%"class.jxl::Image3"* dereferenceable(96) %209, float* nonnull %218, %"class.jxl::ThreadPool"* %1, %"class.jxl::Image3"* %2)
  %210 = select i1 %271, %"class.jxl::ImageBundle"* %3, %"class.jxl::ImageBundle"* %0
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %196) #13
  call void @_ZN3jxl11ImageBundleD2Ev(%"class.jxl::ImageBundle"* nonnull %8) #13
  call void @llvm.lifetime.end.p0i8(i64 368, i8* nonnull %164) #13
  br label %211

211:                                              ; preds = %110, %208, %160, %139, %112
  %212 = phi %"class.jxl::ImageBundle"* [ %3, %112 ], [ %3, %160 ], [ %0, %139 ], [ %210, %208 ], [ %0, %110 ]
  call void @llvm.lifetime.end.p0i8(i64 384, i8* nonnull %101) #13
  ret %"class.jxl::ImageBundle"* %212

213:                                              ; preds = %100
  %214 = fdiv float %105, 2.550000e+02
  %215 = fmul float %214, 0x3FD3333340000000
  %216 = insertelement <8 x float> undef, float %215, i32 0
  %217 = shufflevector <8 x float> %216, <8 x float> undef, <8 x i32> zeroinitializer
  %218 = getelementptr inbounds [96 x float], [96 x float]* %5, i64 0, i64 0
  %219 = bitcast [96 x float]* %5 to <8 x float>*
  store <8 x float> %217, <8 x float>* %219, align 32, !alias.scope !15
  %220 = fmul float %214, 0x3FE3E76C80000000
  %221 = insertelement <8 x float> undef, float %220, i32 0
  %222 = shufflevector <8 x float> %221, <8 x float> undef, <8 x i32> zeroinitializer
  %223 = getelementptr inbounds [96 x float], [96 x float]* %5, i64 0, i64 8
  %224 = bitcast float* %223 to <8 x float>*
  store <8 x float> %222, <8 x float>* %224, align 32, !alias.scope !15
  %225 = fmul float %214, 0x3FB3F7CEE0000000
  %226 = insertelement <8 x float> undef, float %225, i32 0
  %227 = shufflevector <8 x float> %226, <8 x float> undef, <8 x i32> zeroinitializer
  %228 = getelementptr inbounds [96 x float], [96 x float]* %5, i64 0, i64 16
  %229 = bitcast float* %228 to <8 x float>*
  store <8 x float> %227, <8 x float>* %229, align 32, !alias.scope !15
  %230 = fmul float %214, 0x3FCD70A3E0000000
  %231 = insertelement <8 x float> undef, float %230, i32 0
  %232 = shufflevector <8 x float> %231, <8 x float> undef, <8 x i32> zeroinitializer
  %233 = getelementptr inbounds [96 x float], [96 x float]* %5, i64 0, i64 24
  %234 = bitcast float* %233 to <8 x float>*
  store <8 x float> %232, <8 x float>* %234, align 32, !alias.scope !15
  %235 = fmul float %214, 0x3FE624DD20000000
  %236 = insertelement <8 x float> undef, float %235, i32 0
  %237 = shufflevector <8 x float> %236, <8 x float> undef, <8 x i32> zeroinitializer
  %238 = getelementptr inbounds [96 x float], [96 x float]* %5, i64 0, i64 32
  %239 = bitcast float* %238 to <8 x float>*
  store <8 x float> %237, <8 x float>* %239, align 32, !alias.scope !15
  %240 = getelementptr inbounds [96 x float], [96 x float]* %5, i64 0, i64 40
  %241 = bitcast float* %240 to <8 x float>*
  store <8 x float> %227, <8 x float>* %241, align 32, !alias.scope !15
  %242 = fmul float %214, 0x3FCF287980000000
  %243 = insertelement <8 x float> undef, float %242, i32 0
  %244 = shufflevector <8 x float> %243, <8 x float> undef, <8 x i32> zeroinitializer
  %245 = getelementptr inbounds [96 x float], [96 x float]* %5, i64 0, i64 48
  %246 = bitcast float* %245 to <8 x float>*
  store <8 x float> %244, <8 x float>* %246, align 32, !alias.scope !15
  %247 = fmul float %214, 0x3FCA35D1E0000000
  %248 = insertelement <8 x float> undef, float %247, i32 0
  %249 = shufflevector <8 x float> %248, <8 x float> undef, <8 x i32> zeroinitializer
  %250 = getelementptr inbounds [96 x float], [96 x float]* %5, i64 0, i64 56
  %251 = bitcast float* %250 to <8 x float>*
  store <8 x float> %249, <8 x float>* %251, align 32, !alias.scope !15
  %252 = load float, float* %104, align 4
  %253 = fcmp une float %252, 0.000000e+00
  br i1 %253, label %254, label %107

254:                                              ; preds = %213
  %255 = fdiv float %252, 2.550000e+02
  %256 = fmul float %255, 0x3FE1A86D20000000
  %257 = insertelement <8 x float> undef, float %256, i32 0
  %258 = shufflevector <8 x float> %257, <8 x float> undef, <8 x i32> zeroinitializer
  %259 = getelementptr inbounds [96 x float], [96 x float]* %5, i64 0, i64 64
  %260 = bitcast float* %259 to <8 x float>*
  store <8 x float> %258, <8 x float>* %260, align 32, !alias.scope !15
  %261 = tail call float @cbrtf(float 0x3F6F12A6C0000000) #18
  %262 = fsub float -0.000000e+00, %261
  %263 = insertelement <8 x float> undef, float %262, i32 0
  %264 = shufflevector <8 x float> %263, <8 x float> undef, <8 x i32> zeroinitializer
  %265 = getelementptr inbounds [96 x float], [96 x float]* %5, i64 0, i64 72
  %266 = bitcast float* %265 to <8 x float>*
  store <8 x float> %264, <8 x float>* %266, align 32, !alias.scope !18
  %267 = getelementptr inbounds [96 x float], [96 x float]* %5, i64 0, i64 80
  %268 = bitcast float* %267 to <8 x float>*
  store <8 x float> %264, <8 x float>* %268, align 32, !alias.scope !18
  %269 = getelementptr inbounds [96 x float], [96 x float]* %5, i64 0, i64 88
  %270 = bitcast float* %269 to <8 x float>*
  store <8 x float> %264, <8 x float>* %270, align 32, !alias.scope !18
  %271 = icmp ne %"class.jxl::ImageBundle"* %3, null
  %272 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 9
  %273 = load i32, i32* %272, align 8
  %274 = icmp eq i32 %273, 1
  %275 = tail call dereferenceable(152) %"struct.jxl::ColorEncoding"* @_ZN3jxl13ColorEncoding10LinearSRGBEb(i1 zeroext %274) #13
  %276 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11
  %277 = tail call zeroext i1 @_ZNK3jxl13ColorEncoding17SameColorEncodingERKS0_(%"struct.jxl::ColorEncoding"* %275, %"struct.jxl::ColorEncoding"* dereferenceable(152) %276)
  br i1 %277, label %110, label %115
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl6N_AVX210RgbToYcbcrERKNS_5PlaneIfEES4_S4_PS2_S5_S5_PNS_10ThreadPoolE(%"class.jxl::Plane"* dereferenceable(32), %"class.jxl::Plane"* dereferenceable(32), %"class.jxl::Plane"* dereferenceable(32), %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::ThreadPool"* readonly) #8 {
  %8 = alloca %"class.jxl::ThreadPool::RunCallState.138", align 8
  %9 = alloca %"class.jxl::ThreadPool::RunCallState.138", align 8
  %10 = alloca double, align 8
  %11 = alloca %"class.jxl::ThreadPool", align 8
  %12 = alloca %"class.jxl::Plane"*, align 8
  %13 = alloca %"class.jxl::Plane"*, align 8
  %14 = alloca %"class.jxl::Plane"*, align 8
  %15 = alloca i64, align 8
  %16 = alloca i64, align 8
  %17 = alloca i64, align 8
  %18 = alloca %"class.hwy::N_AVX2::Vec256", align 32
  %19 = alloca %"class.hwy::N_AVX2::Vec256", align 32
  %20 = alloca %"class.hwy::N_AVX2::Vec256", align 32
  %21 = alloca %"class.hwy::N_AVX2::Vec256", align 32
  %22 = alloca %"class.hwy::N_AVX2::Vec256", align 32
  %23 = alloca %"class.hwy::N_AVX2::Vec256", align 32
  %24 = alloca %"class.hwy::N_AVX2::Vec256", align 32
  %25 = alloca %"class.hwy::N_AVX2::Vec256", align 32
  %26 = alloca i64, align 8
  %27 = alloca %class.anon.98, align 8
  store %"class.jxl::Plane"* %3, %"class.jxl::Plane"** %12, align 8
  store %"class.jxl::Plane"* %4, %"class.jxl::Plane"** %13, align 8
  store %"class.jxl::Plane"* %5, %"class.jxl::Plane"** %14, align 8
  %28 = bitcast i64* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %28) #13
  store i64 8, i64* %15, align 8
  %29 = bitcast i64* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %29) #13
  %30 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %0, i64 0, i32 0, i32 0
  %31 = load i32, i32* %30, align 8
  %32 = zext i32 %31 to i64
  store i64 %32, i64* %16, align 8
  %33 = bitcast i64* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %33) #13
  %34 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %0, i64 0, i32 0, i32 1
  %35 = load i32, i32* %34, align 4
  %36 = zext i32 %35 to i64
  store i64 %36, i64* %17, align 8
  %37 = icmp eq i32 %31, 0
  %38 = icmp eq i32 %35, 0
  %39 = or i1 %37, %38
  br i1 %39, label %112, label %40

40:                                               ; preds = %7
  %41 = bitcast %"class.hwy::N_AVX2::Vec256"* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %41) #13
  %42 = getelementptr inbounds %"class.hwy::N_AVX2::Vec256", %"class.hwy::N_AVX2::Vec256"* %18, i64 0, i32 0
  store <8 x float> <float 0x3FE0101020000000, float 0x3FE0101020000000, float 0x3FE0101020000000, float 0x3FE0101020000000, float 0x3FE0101020000000, float 0x3FE0101020000000, float 0x3FE0101020000000, float 0x3FE0101020000000>, <8 x float>* %42, align 32, !alias.scope !21
  %43 = bitcast %"class.hwy::N_AVX2::Vec256"* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %43) #13
  %44 = getelementptr inbounds %"class.hwy::N_AVX2::Vec256", %"class.hwy::N_AVX2::Vec256"* %19, i64 0, i32 0
  store <8 x float> <float 0x3FD322D0E0000000, float 0x3FD322D0E0000000, float 0x3FD322D0E0000000, float 0x3FD322D0E0000000, float 0x3FD322D0E0000000, float 0x3FD322D0E0000000, float 0x3FD322D0E0000000, float 0x3FD322D0E0000000>, <8 x float>* %44, align 32, !alias.scope !24
  %45 = bitcast %"class.hwy::N_AVX2::Vec256"* %20 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %45) #13
  %46 = getelementptr inbounds %"class.hwy::N_AVX2::Vec256", %"class.hwy::N_AVX2::Vec256"* %20, i64 0, i32 0
  store <8 x float> <float 0x3FE2C8B440000000, float 0x3FE2C8B440000000, float 0x3FE2C8B440000000, float 0x3FE2C8B440000000, float 0x3FE2C8B440000000, float 0x3FE2C8B440000000, float 0x3FE2C8B440000000, float 0x3FE2C8B440000000>, <8 x float>* %46, align 32, !alias.scope !27
  %47 = bitcast %"class.hwy::N_AVX2::Vec256"* %21 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %47) #13
  %48 = getelementptr inbounds %"class.hwy::N_AVX2::Vec256", %"class.hwy::N_AVX2::Vec256"* %21, i64 0, i32 0
  store <8 x float> <float 0x3FBD2F1AA0000000, float 0x3FBD2F1AA0000000, float 0x3FBD2F1AA0000000, float 0x3FBD2F1AA0000000, float 0x3FBD2F1AA0000000, float 0x3FBD2F1AA0000000, float 0x3FBD2F1AA0000000, float 0x3FBD2F1AA0000000>, <8 x float>* %48, align 32, !alias.scope !30
  %49 = bitcast %"class.hwy::N_AVX2::Vec256"* %22 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %49) #13
  %50 = getelementptr inbounds %"class.hwy::N_AVX2::Vec256", %"class.hwy::N_AVX2::Vec256"* %22, i64 0, i32 0
  store <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float>* %50, align 32, !alias.scope !33
  %51 = bitcast %"class.hwy::N_AVX2::Vec256"* %23 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %51) #13
  %52 = getelementptr inbounds %"class.hwy::N_AVX2::Vec256", %"class.hwy::N_AVX2::Vec256"* %23, i64 0, i32 0
  store <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float>* %52, align 32, !alias.scope !36
  %53 = bitcast %"class.hwy::N_AVX2::Vec256"* %24 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %53) #13
  %54 = getelementptr inbounds %"class.hwy::N_AVX2::Vec256", %"class.hwy::N_AVX2::Vec256"* %24, i64 0, i32 0
  store <8 x float> <float 0x3FE6D314E0000000, float 0x3FE6D314E0000000, float 0x3FE6D314E0000000, float 0x3FE6D314E0000000, float 0x3FE6D314E0000000, float 0x3FE6D314E0000000, float 0x3FE6D314E0000000, float 0x3FE6D314E0000000>, <8 x float>* %54, align 32, !alias.scope !39
  %55 = bitcast %"class.hwy::N_AVX2::Vec256"* %25 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %55) #13
  %56 = getelementptr inbounds %"class.hwy::N_AVX2::Vec256", %"class.hwy::N_AVX2::Vec256"* %25, i64 0, i32 0
  store <8 x float> <float 0x3FE20F0640000000, float 0x3FE20F0640000000, float 0x3FE20F0640000000, float 0x3FE20F0640000000, float 0x3FE20F0640000000, float 0x3FE20F0640000000, float 0x3FE20F0640000000, float 0x3FE20F0640000000>, <8 x float>* %56, align 32, !alias.scope !42
  %57 = bitcast i64* %26 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %57) #13
  %58 = add nuw nsw i64 %32, 65535
  %59 = udiv i64 %58, %32
  store i64 %59, i64* %26, align 8
  %60 = add nsw i64 %36, -1
  %61 = add nuw nsw i64 %60, %59
  %62 = udiv i64 %61, %59
  %63 = bitcast %class.anon.98* %27 to i8*
  call void @llvm.lifetime.start.p0i8(i64 152, i8* nonnull %63) #13
  %64 = getelementptr inbounds %class.anon.98, %class.anon.98* %27, i64 0, i32 0
  store i64* %26, i64** %64, align 8
  %65 = getelementptr inbounds %class.anon.98, %class.anon.98* %27, i64 0, i32 1
  store i64* %17, i64** %65, align 8
  %66 = getelementptr inbounds %class.anon.98, %class.anon.98* %27, i64 0, i32 2
  store %"class.jxl::Plane"* %0, %"class.jxl::Plane"** %66, align 8
  %67 = getelementptr inbounds %class.anon.98, %class.anon.98* %27, i64 0, i32 3
  store %"class.jxl::Plane"* %1, %"class.jxl::Plane"** %67, align 8
  %68 = getelementptr inbounds %class.anon.98, %class.anon.98* %27, i64 0, i32 4
  store %"class.jxl::Plane"* %2, %"class.jxl::Plane"** %68, align 8
  %69 = getelementptr inbounds %class.anon.98, %class.anon.98* %27, i64 0, i32 5
  store %"class.jxl::Plane"** %12, %"class.jxl::Plane"*** %69, align 8
  %70 = getelementptr inbounds %class.anon.98, %class.anon.98* %27, i64 0, i32 6
  store %"class.jxl::Plane"** %13, %"class.jxl::Plane"*** %70, align 8
  %71 = getelementptr inbounds %class.anon.98, %class.anon.98* %27, i64 0, i32 7
  store %"class.jxl::Plane"** %14, %"class.jxl::Plane"*** %71, align 8
  %72 = getelementptr inbounds %class.anon.98, %class.anon.98* %27, i64 0, i32 8
  store i64* %16, i64** %72, align 8
  %73 = getelementptr inbounds %class.anon.98, %class.anon.98* %27, i64 0, i32 9
  store i64* %15, i64** %73, align 8
  %74 = getelementptr inbounds %class.anon.98, %class.anon.98* %27, i64 0, i32 10
  store %"struct.hwy::N_AVX2::Simd"* @_ZZN3jxl6N_AVX210RgbToYcbcrERKNS_5PlaneIfEES4_S4_PS2_S5_S5_PNS_10ThreadPoolEE2df, %"struct.hwy::N_AVX2::Simd"** %74, align 8
  %75 = getelementptr inbounds %class.anon.98, %class.anon.98* %27, i64 0, i32 11
  store %"class.hwy::N_AVX2::Vec256"* %19, %"class.hwy::N_AVX2::Vec256"** %75, align 8
  %76 = getelementptr inbounds %class.anon.98, %class.anon.98* %27, i64 0, i32 12
  store %"class.hwy::N_AVX2::Vec256"* %22, %"class.hwy::N_AVX2::Vec256"** %76, align 8
  %77 = getelementptr inbounds %class.anon.98, %class.anon.98* %27, i64 0, i32 13
  store %"class.hwy::N_AVX2::Vec256"* %20, %"class.hwy::N_AVX2::Vec256"** %77, align 8
  %78 = getelementptr inbounds %class.anon.98, %class.anon.98* %27, i64 0, i32 14
  store %"class.hwy::N_AVX2::Vec256"* %21, %"class.hwy::N_AVX2::Vec256"** %78, align 8
  %79 = getelementptr inbounds %class.anon.98, %class.anon.98* %27, i64 0, i32 15
  store %"class.hwy::N_AVX2::Vec256"* %23, %"class.hwy::N_AVX2::Vec256"** %79, align 8
  %80 = getelementptr inbounds %class.anon.98, %class.anon.98* %27, i64 0, i32 16
  store %"class.hwy::N_AVX2::Vec256"* %18, %"class.hwy::N_AVX2::Vec256"** %80, align 8
  %81 = getelementptr inbounds %class.anon.98, %class.anon.98* %27, i64 0, i32 17
  store %"class.hwy::N_AVX2::Vec256"* %25, %"class.hwy::N_AVX2::Vec256"** %81, align 8
  %82 = getelementptr inbounds %class.anon.98, %class.anon.98* %27, i64 0, i32 18
  store %"class.hwy::N_AVX2::Vec256"* %24, %"class.hwy::N_AVX2::Vec256"** %82, align 8
  %83 = trunc i64 %62 to i32
  %84 = bitcast double* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %84) #13
  store double 0xFFFFFFFFFFFFFFFF, double* %10, align 8
  call void @_ZN3jxl13TraceRunBeginEPKcPd(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.11, i64 0, i64 0), double* nonnull %10) #13
  %85 = icmp eq %"class.jxl::ThreadPool"* %6, null
  br i1 %85, label %86, label %97

86:                                               ; preds = %40
  %87 = bitcast %"class.jxl::ThreadPool"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %87) #13
  %88 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %11, i64 0, i32 0
  %89 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %11, i64 0, i32 1
  store i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)* @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %88, align 8
  %90 = bitcast i8** %89 to %"class.jxl::ThreadPool"**
  store %"class.jxl::ThreadPool"* %11, %"class.jxl::ThreadPool"** %90, align 8
  %91 = icmp eq i32 %83, 0
  br i1 %91, label %108, label %92

92:                                               ; preds = %86
  %93 = bitcast %"class.jxl::ThreadPool::RunCallState.138"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %93) #13
  %94 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.138", %"class.jxl::ThreadPool::RunCallState.138"* %8, i64 0, i32 0
  %95 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.138", %"class.jxl::ThreadPool::RunCallState.138"* %8, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %94, align 8
  store %class.anon.98* %27, %class.anon.98** %95, align 8
  %96 = call i32 @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj(i8* nonnull %87, i8* nonnull %93, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX210RgbToYcbcrERKNS_5PlaneIfEES8_S8_PS6_S9_S9_PS0_E3$_7E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX210RgbToYcbcrERKNS_5PlaneIfEES8_S8_PS6_S9_S9_PS0_E3$_7E12CallDataFuncEPvjm", i32 0, i32 %83) #13
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %93) #13
  br label %108

97:                                               ; preds = %40
  %98 = icmp eq i32 %83, 0
  br i1 %98, label %110, label %99

99:                                               ; preds = %97
  %100 = bitcast %"class.jxl::ThreadPool::RunCallState.138"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %100) #13
  %101 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.138", %"class.jxl::ThreadPool::RunCallState.138"* %9, i64 0, i32 0
  %102 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.138", %"class.jxl::ThreadPool::RunCallState.138"* %9, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %101, align 8
  store %class.anon.98* %27, %class.anon.98** %102, align 8
  %103 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %6, i64 0, i32 0
  %104 = load i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)*, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %103, align 8
  %105 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %6, i64 0, i32 1
  %106 = load i8*, i8** %105, align 8
  %107 = call i32 %104(i8* %106, i8* nonnull %100, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX210RgbToYcbcrERKNS_5PlaneIfEES8_S8_PS6_S9_S9_PS0_E3$_7E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX210RgbToYcbcrERKNS_5PlaneIfEES8_S8_PS6_S9_S9_PS0_E3$_7E12CallDataFuncEPvjm", i32 0, i32 %83) #13
  br label %108

108:                                              ; preds = %86, %92, %99
  %109 = phi i8* [ %100, %99 ], [ %87, %92 ], [ %87, %86 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %109) #13
  br label %110

110:                                              ; preds = %108, %97
  %111 = load double, double* %10, align 8
  call void @_ZN3jxl11TraceRunEndEPKcd(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.11, i64 0, i64 0), double %111) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %84) #13
  call void @llvm.lifetime.end.p0i8(i64 152, i8* nonnull %63) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %57) #13
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %55) #13
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %53) #13
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %51) #13
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %49) #13
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %47) #13
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %45) #13
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %43) #13
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %41) #13
  br label %112

112:                                              ; preds = %7, %110
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %33) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %29) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %28) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl6N_AVX312TestCubeRootEv() #10 {
  br label %3

1:                                                ; preds = %123
  %2 = fcmp olt float %127, 0x3EAAD7F2A0000000
  br i1 %2, label %70, label %67

3:                                                ; preds = %123, %0
  %4 = phi float [ 0.000000e+00, %0 ], [ %127, %123 ]
  %5 = phi i64 [ 0, %0 ], [ %128, %123 ]
  %6 = uitofp i64 %5 to float
  %7 = fmul float %6, 0x3EE4F8B580000000
  %8 = tail call float @cbrtf(float %7) #18
  %9 = insertelement <16 x float> undef, float %7, i32 0
  %10 = shufflevector <16 x float> %9, <16 x float> undef, <16 x i32> zeroinitializer
  %11 = fmul <16 x float> %10, <float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000>
  %12 = bitcast <16 x float> %10 to <16 x i32>
  %13 = icmp eq <16 x i32> %12, zeroinitializer
  %14 = ashr <16 x i32> %12, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %15 = mul nsw <16 x i32> %14, <i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202>
  %16 = add <16 x i32> %15, <i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752>
  %17 = select <16 x i1> %13, <16 x i32> zeroinitializer, <16 x i32> %16
  %18 = bitcast <16 x i32> %17 to <16 x float>
  %19 = fmul <16 x float> %18, %18
  %20 = fmul <16 x float> %19, %19
  %21 = fmul <16 x float> %18, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %22 = fsub <16 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %20
  %23 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %11, <16 x float> %22, <16 x float> %21) #13
  %24 = fmul <16 x float> %23, %23
  %25 = fmul <16 x float> %24, %24
  %26 = fmul <16 x float> %23, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %27 = fsub <16 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %25
  %28 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %11, <16 x float> %27, <16 x float> %26) #13
  %29 = fmul <16 x float> %28, %28
  %30 = fmul <16 x float> %29, %29
  %31 = fmul <16 x float> %28, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %32 = fsub <16 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %30
  %33 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %11, <16 x float> %32, <16 x float> %31) #13
  %34 = fmul <16 x float> %33, %33
  %35 = fmul <16 x float> %34, %34
  %36 = fsub <16 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %35
  %37 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %10, <16 x float> %36, <16 x float> %33) #13
  %38 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %37, <16 x float> <float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000>, <16 x float> %33) #13
  %39 = fmul <16 x float> %38, %38
  %40 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %39, <16 x float> %10, <16 x float> zeroinitializer) #13
  %41 = extractelement <16 x float> %40, i32 0
  %42 = extractelement <16 x float> %40, i32 1
  %43 = fsub float %41, %42
  %44 = tail call float @llvm.fabs.f32(float %43) #13
  %45 = fcmp ugt float %44, 0x3E801B2B20000000
  %46 = extractelement <16 x float> %40, i32 3
  %47 = extractelement <16 x float> %40, i32 4
  %48 = extractelement <16 x float> %40, i32 5
  %49 = extractelement <16 x float> %40, i32 6
  %50 = extractelement <16 x float> %40, i32 7
  %51 = extractelement <16 x float> %40, i32 8
  %52 = extractelement <16 x float> %40, i32 9
  %53 = extractelement <16 x float> %40, i32 10
  %54 = extractelement <16 x float> %40, i32 11
  %55 = extractelement <16 x float> %40, i32 12
  %56 = extractelement <16 x float> %40, i32 13
  %57 = extractelement <16 x float> %40, i32 14
  %58 = extractelement <16 x float> %40, i32 15
  br i1 %45, label %64, label %59

59:                                               ; preds = %3
  %60 = extractelement <16 x float> %40, i32 2
  %61 = fsub float %41, %60
  %62 = tail call float @llvm.fabs.f32(float %61) #13
  %63 = fcmp ugt float %62, 0x3E801B2B20000000
  br i1 %63, label %64, label %71

64:                                               ; preds = %119, %115, %111, %107, %103, %99, %95, %91, %87, %83, %79, %75, %71, %59, %3
  %65 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.1, i64 0, i64 0), i32 97, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.2, i64 0, i64 0)) #13
  %66 = tail call zeroext i1 @_ZN3jxl5AbortEv() #21
  unreachable

67:                                               ; preds = %1
  %68 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.1, i64 0, i64 0), i32 104, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.3, i64 0, i64 0)) #13
  %69 = tail call zeroext i1 @_ZN3jxl5AbortEv() #21
  unreachable

70:                                               ; preds = %1
  ret void

71:                                               ; preds = %59
  %72 = fsub float %41, %46
  %73 = tail call float @llvm.fabs.f32(float %72) #13
  %74 = fcmp ugt float %73, 0x3E801B2B20000000
  br i1 %74, label %64, label %75

75:                                               ; preds = %71
  %76 = fsub float %41, %47
  %77 = tail call float @llvm.fabs.f32(float %76) #13
  %78 = fcmp ugt float %77, 0x3E801B2B20000000
  br i1 %78, label %64, label %79

79:                                               ; preds = %75
  %80 = fsub float %41, %48
  %81 = tail call float @llvm.fabs.f32(float %80) #13
  %82 = fcmp ugt float %81, 0x3E801B2B20000000
  br i1 %82, label %64, label %83

83:                                               ; preds = %79
  %84 = fsub float %41, %49
  %85 = tail call float @llvm.fabs.f32(float %84) #13
  %86 = fcmp ugt float %85, 0x3E801B2B20000000
  br i1 %86, label %64, label %87

87:                                               ; preds = %83
  %88 = fsub float %41, %50
  %89 = tail call float @llvm.fabs.f32(float %88) #13
  %90 = fcmp ugt float %89, 0x3E801B2B20000000
  br i1 %90, label %64, label %91

91:                                               ; preds = %87
  %92 = fsub float %41, %51
  %93 = tail call float @llvm.fabs.f32(float %92) #13
  %94 = fcmp ugt float %93, 0x3E801B2B20000000
  br i1 %94, label %64, label %95

95:                                               ; preds = %91
  %96 = fsub float %41, %52
  %97 = tail call float @llvm.fabs.f32(float %96) #13
  %98 = fcmp ugt float %97, 0x3E801B2B20000000
  br i1 %98, label %64, label %99

99:                                               ; preds = %95
  %100 = fsub float %41, %53
  %101 = tail call float @llvm.fabs.f32(float %100) #13
  %102 = fcmp ugt float %101, 0x3E801B2B20000000
  br i1 %102, label %64, label %103

103:                                              ; preds = %99
  %104 = fsub float %41, %54
  %105 = tail call float @llvm.fabs.f32(float %104) #13
  %106 = fcmp ugt float %105, 0x3E801B2B20000000
  br i1 %106, label %64, label %107

107:                                              ; preds = %103
  %108 = fsub float %41, %55
  %109 = tail call float @llvm.fabs.f32(float %108) #13
  %110 = fcmp ugt float %109, 0x3E801B2B20000000
  br i1 %110, label %64, label %111

111:                                              ; preds = %107
  %112 = fsub float %41, %56
  %113 = tail call float @llvm.fabs.f32(float %112) #13
  %114 = fcmp ugt float %113, 0x3E801B2B20000000
  br i1 %114, label %64, label %115

115:                                              ; preds = %111
  %116 = fsub float %41, %57
  %117 = tail call float @llvm.fabs.f32(float %116) #13
  %118 = fcmp ugt float %117, 0x3E801B2B20000000
  br i1 %118, label %64, label %119

119:                                              ; preds = %115
  %120 = fsub float %41, %58
  %121 = tail call float @llvm.fabs.f32(float %120) #13
  %122 = fcmp ugt float %121, 0x3E801B2B20000000
  br i1 %122, label %64, label %123

123:                                              ; preds = %119
  %124 = fsub float %41, %8
  %125 = tail call float @llvm.fabs.f32(float %124) #13
  %126 = fcmp olt float %4, %125
  %127 = select i1 %126, float %125, float %4
  %128 = add nuw nsw i64 %5, 1
  %129 = icmp eq i64 %128, 2000000
  br i1 %129, label %1, label %3
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl6N_AVX315LinearSRGBToXYBERKNS_6Image3IfEEPKfPNS_10ThreadPoolEPS2_(%"class.jxl::Image3"* dereferenceable(96), float* noalias, %"class.jxl::ThreadPool"* readonly, %"class.jxl::Image3"* noalias) local_unnamed_addr #11 {
  %5 = alloca %"class.jxl::ThreadPool::RunCallState.144", align 8
  %6 = alloca %"class.jxl::ThreadPool::RunCallState.144", align 8
  %7 = alloca double, align 8
  %8 = alloca %"class.jxl::ThreadPool", align 8
  %9 = alloca float*, align 8
  %10 = alloca %"class.jxl::Image3"*, align 8
  %11 = alloca i64, align 8
  %12 = alloca %class.anon.99, align 8
  store float* %1, float** %9, align 8
  store %"class.jxl::Image3"* %3, %"class.jxl::Image3"** %10, align 8
  %13 = bitcast i64* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %13) #13
  %14 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 0, i32 0, i32 0
  %15 = load i32, i32* %14, align 8
  %16 = zext i32 %15 to i64
  store i64 %16, i64* %11, align 8
  %17 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 0, i32 0, i32 1
  %18 = load i32, i32* %17, align 4
  %19 = bitcast %class.anon.99* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %19) #13
  %20 = getelementptr inbounds %class.anon.99, %class.anon.99* %12, i64 0, i32 0
  store %"class.jxl::Image3"* %0, %"class.jxl::Image3"** %20, align 8
  %21 = getelementptr inbounds %class.anon.99, %class.anon.99* %12, i64 0, i32 1
  store %"class.jxl::Image3"** %10, %"class.jxl::Image3"*** %21, align 8
  %22 = getelementptr inbounds %class.anon.99, %class.anon.99* %12, i64 0, i32 2
  store i64* %11, i64** %22, align 8
  %23 = getelementptr inbounds %class.anon.99, %class.anon.99* %12, i64 0, i32 3
  store %"struct.hwy::N_AVX3::Simd"* @_ZZN3jxl6N_AVX315LinearSRGBToXYBERKNS_6Image3IfEEPKfPNS_10ThreadPoolEPS2_E1d, %"struct.hwy::N_AVX3::Simd"** %23, align 8
  %24 = getelementptr inbounds %class.anon.99, %class.anon.99* %12, i64 0, i32 4
  store float** %9, float*** %24, align 8
  %25 = bitcast double* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %25) #13
  store double 0xFFFFFFFFFFFFFFFF, double* %7, align 8
  call void @_ZN3jxl13TraceRunBeginEPKcPd(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i64 0, i64 0), double* nonnull %7) #13
  %26 = icmp eq %"class.jxl::ThreadPool"* %2, null
  br i1 %26, label %27, label %38

27:                                               ; preds = %4
  %28 = bitcast %"class.jxl::ThreadPool"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %28) #13
  %29 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %8, i64 0, i32 0
  %30 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %8, i64 0, i32 1
  store i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)* @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %29, align 8
  %31 = bitcast i8** %30 to %"class.jxl::ThreadPool"**
  store %"class.jxl::ThreadPool"* %8, %"class.jxl::ThreadPool"** %31, align 8
  %32 = icmp eq i32 %18, 0
  br i1 %32, label %49, label %33

33:                                               ; preds = %27
  %34 = bitcast %"class.jxl::ThreadPool::RunCallState.144"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %34) #13
  %35 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.144", %"class.jxl::ThreadPool::RunCallState.144"* %5, i64 0, i32 0
  %36 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.144", %"class.jxl::ThreadPool::RunCallState.144"* %5, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %35, align 8
  store %class.anon.99* %12, %class.anon.99** %36, align 8
  %37 = call i32 @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj(i8* nonnull %28, i8* nonnull %34, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX315LinearSRGBToXYBERKNS_6Image3IfEEPKfPS0_PS6_E3$_8E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX315LinearSRGBToXYBERKNS_6Image3IfEEPKfPS0_PS6_E3$_8E12CallDataFuncEPvjm", i32 0, i32 %18) #13
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %34) #13
  br label %49

38:                                               ; preds = %4
  %39 = icmp eq i32 %18, 0
  br i1 %39, label %51, label %40

40:                                               ; preds = %38
  %41 = bitcast %"class.jxl::ThreadPool::RunCallState.144"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %41) #13
  %42 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.144", %"class.jxl::ThreadPool::RunCallState.144"* %6, i64 0, i32 0
  %43 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.144", %"class.jxl::ThreadPool::RunCallState.144"* %6, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %42, align 8
  store %class.anon.99* %12, %class.anon.99** %43, align 8
  %44 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %2, i64 0, i32 0
  %45 = load i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)*, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %44, align 8
  %46 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %2, i64 0, i32 1
  %47 = load i8*, i8** %46, align 8
  %48 = call i32 %45(i8* %47, i8* nonnull %41, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX315LinearSRGBToXYBERKNS_6Image3IfEEPKfPS0_PS6_E3$_8E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX315LinearSRGBToXYBERKNS_6Image3IfEEPKfPS0_PS6_E3$_8E12CallDataFuncEPvjm", i32 0, i32 %18) #13
  br label %49

49:                                               ; preds = %27, %33, %40
  %50 = phi i8* [ %41, %40 ], [ %28, %33 ], [ %28, %27 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %50) #13
  br label %51

51:                                               ; preds = %49, %38
  %52 = load double, double* %7, align 8
  call void @_ZN3jxl11TraceRunEndEPKcd(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i64 0, i64 0), double %52) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %25) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %19) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %13) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl6N_AVX39SRGBToXYBERKNS_6Image3IfEEPKfPNS_10ThreadPoolEPS2_(%"class.jxl::Image3"* dereferenceable(96), float* noalias, %"class.jxl::ThreadPool"* readonly, %"class.jxl::Image3"* noalias) local_unnamed_addr #11 {
  %5 = alloca %"class.jxl::ThreadPool::RunCallState.146", align 8
  %6 = alloca %"class.jxl::ThreadPool::RunCallState.146", align 8
  %7 = alloca double, align 8
  %8 = alloca %"class.jxl::ThreadPool", align 8
  %9 = alloca float*, align 8
  %10 = alloca %"class.jxl::Image3"*, align 8
  %11 = alloca i64, align 8
  %12 = alloca %class.anon.100, align 8
  store float* %1, float** %9, align 8
  store %"class.jxl::Image3"* %3, %"class.jxl::Image3"** %10, align 8
  %13 = bitcast i64* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %13) #13
  %14 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 0, i32 0, i32 0
  %15 = load i32, i32* %14, align 8
  %16 = zext i32 %15 to i64
  store i64 %16, i64* %11, align 8
  %17 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 0, i32 0, i32 1
  %18 = load i32, i32* %17, align 4
  %19 = bitcast %class.anon.100* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %19) #13
  %20 = getelementptr inbounds %class.anon.100, %class.anon.100* %12, i64 0, i32 0
  store %"class.jxl::Image3"* %0, %"class.jxl::Image3"** %20, align 8
  %21 = getelementptr inbounds %class.anon.100, %class.anon.100* %12, i64 0, i32 1
  store %"class.jxl::Image3"** %10, %"class.jxl::Image3"*** %21, align 8
  %22 = getelementptr inbounds %class.anon.100, %class.anon.100* %12, i64 0, i32 2
  store i64* %11, i64** %22, align 8
  %23 = getelementptr inbounds %class.anon.100, %class.anon.100* %12, i64 0, i32 3
  store %"struct.hwy::N_AVX3::Simd"* @_ZZN3jxl6N_AVX39SRGBToXYBERKNS_6Image3IfEEPKfPNS_10ThreadPoolEPS2_E1d, %"struct.hwy::N_AVX3::Simd"** %23, align 8
  %24 = getelementptr inbounds %class.anon.100, %class.anon.100* %12, i64 0, i32 4
  store float** %9, float*** %24, align 8
  %25 = bitcast double* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %25) #13
  store double 0xFFFFFFFFFFFFFFFF, double* %7, align 8
  call void @_ZN3jxl13TraceRunBeginEPKcPd(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.5, i64 0, i64 0), double* nonnull %7) #13
  %26 = icmp eq %"class.jxl::ThreadPool"* %2, null
  br i1 %26, label %27, label %38

27:                                               ; preds = %4
  %28 = bitcast %"class.jxl::ThreadPool"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %28) #13
  %29 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %8, i64 0, i32 0
  %30 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %8, i64 0, i32 1
  store i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)* @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %29, align 8
  %31 = bitcast i8** %30 to %"class.jxl::ThreadPool"**
  store %"class.jxl::ThreadPool"* %8, %"class.jxl::ThreadPool"** %31, align 8
  %32 = icmp eq i32 %18, 0
  br i1 %32, label %49, label %33

33:                                               ; preds = %27
  %34 = bitcast %"class.jxl::ThreadPool::RunCallState.146"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %34) #13
  %35 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.146", %"class.jxl::ThreadPool::RunCallState.146"* %5, i64 0, i32 0
  %36 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.146", %"class.jxl::ThreadPool::RunCallState.146"* %5, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %35, align 8
  store %class.anon.100* %12, %class.anon.100** %36, align 8
  %37 = call i32 @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj(i8* nonnull %28, i8* nonnull %34, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX39SRGBToXYBERKNS_6Image3IfEEPKfPS0_PS6_E3$_9E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX39SRGBToXYBERKNS_6Image3IfEEPKfPS0_PS6_E3$_9E12CallDataFuncEPvjm", i32 0, i32 %18) #13
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %34) #13
  br label %49

38:                                               ; preds = %4
  %39 = icmp eq i32 %18, 0
  br i1 %39, label %51, label %40

40:                                               ; preds = %38
  %41 = bitcast %"class.jxl::ThreadPool::RunCallState.146"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %41) #13
  %42 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.146", %"class.jxl::ThreadPool::RunCallState.146"* %6, i64 0, i32 0
  %43 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.146", %"class.jxl::ThreadPool::RunCallState.146"* %6, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %42, align 8
  store %class.anon.100* %12, %class.anon.100** %43, align 8
  %44 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %2, i64 0, i32 0
  %45 = load i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)*, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %44, align 8
  %46 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %2, i64 0, i32 1
  %47 = load i8*, i8** %46, align 8
  %48 = call i32 %45(i8* %47, i8* nonnull %41, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX39SRGBToXYBERKNS_6Image3IfEEPKfPS0_PS6_E3$_9E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX39SRGBToXYBERKNS_6Image3IfEEPKfPS0_PS6_E3$_9E12CallDataFuncEPvjm", i32 0, i32 %18) #13
  br label %49

49:                                               ; preds = %27, %33, %40
  %50 = phi i8* [ %41, %40 ], [ %28, %33 ], [ %28, %27 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %50) #13
  br label %51

51:                                               ; preds = %49, %38
  %52 = load double, double* %7, align 8
  call void @_ZN3jxl11TraceRunEndEPKcd(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.5, i64 0, i64 0), double %52) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %25) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %19) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %13) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl6N_AVX318SRGBToXYBAndLinearERKNS_6Image3IfEEPKfPNS_10ThreadPoolEPS2_S9_(%"class.jxl::Image3"* dereferenceable(96), float* noalias, %"class.jxl::ThreadPool"* readonly, %"class.jxl::Image3"* noalias, %"class.jxl::Image3"* noalias) local_unnamed_addr #11 {
  %6 = alloca %"class.jxl::ThreadPool::RunCallState.150", align 8
  %7 = alloca %"class.jxl::ThreadPool::RunCallState.150", align 8
  %8 = alloca double, align 8
  %9 = alloca %"class.jxl::ThreadPool", align 8
  %10 = alloca float*, align 8
  %11 = alloca %"class.jxl::Image3"*, align 8
  %12 = alloca %"class.jxl::Image3"*, align 8
  %13 = alloca i64, align 8
  %14 = alloca %class.anon.101, align 8
  store float* %1, float** %10, align 8
  store %"class.jxl::Image3"* %3, %"class.jxl::Image3"** %11, align 8
  store %"class.jxl::Image3"* %4, %"class.jxl::Image3"** %12, align 8
  %15 = bitcast i64* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %15) #13
  %16 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 0, i32 0, i32 0
  %17 = load i32, i32* %16, align 8
  %18 = zext i32 %17 to i64
  store i64 %18, i64* %13, align 8
  %19 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 0, i32 0, i32 1
  %20 = load i32, i32* %19, align 4
  %21 = bitcast %class.anon.101* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %21) #13
  %22 = getelementptr inbounds %class.anon.101, %class.anon.101* %14, i64 0, i32 0
  store %"class.jxl::Image3"* %0, %"class.jxl::Image3"** %22, align 8
  %23 = getelementptr inbounds %class.anon.101, %class.anon.101* %14, i64 0, i32 1
  store %"class.jxl::Image3"** %12, %"class.jxl::Image3"*** %23, align 8
  %24 = getelementptr inbounds %class.anon.101, %class.anon.101* %14, i64 0, i32 2
  store %"class.jxl::Image3"** %11, %"class.jxl::Image3"*** %24, align 8
  %25 = getelementptr inbounds %class.anon.101, %class.anon.101* %14, i64 0, i32 3
  store i64* %13, i64** %25, align 8
  %26 = getelementptr inbounds %class.anon.101, %class.anon.101* %14, i64 0, i32 4
  store %"struct.hwy::N_AVX3::Simd"* @_ZZN3jxl6N_AVX318SRGBToXYBAndLinearERKNS_6Image3IfEEPKfPNS_10ThreadPoolEPS2_S9_E1d, %"struct.hwy::N_AVX3::Simd"** %26, align 8
  %27 = getelementptr inbounds %class.anon.101, %class.anon.101* %14, i64 0, i32 5
  store float** %10, float*** %27, align 8
  %28 = bitcast double* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %28) #13
  store double 0xFFFFFFFFFFFFFFFF, double* %8, align 8
  call void @_ZN3jxl13TraceRunBeginEPKcPd(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.6, i64 0, i64 0), double* nonnull %8) #13
  %29 = icmp eq %"class.jxl::ThreadPool"* %2, null
  br i1 %29, label %30, label %41

30:                                               ; preds = %5
  %31 = bitcast %"class.jxl::ThreadPool"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %31) #13
  %32 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %9, i64 0, i32 0
  %33 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %9, i64 0, i32 1
  store i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)* @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %32, align 8
  %34 = bitcast i8** %33 to %"class.jxl::ThreadPool"**
  store %"class.jxl::ThreadPool"* %9, %"class.jxl::ThreadPool"** %34, align 8
  %35 = icmp eq i32 %20, 0
  br i1 %35, label %52, label %36

36:                                               ; preds = %30
  %37 = bitcast %"class.jxl::ThreadPool::RunCallState.150"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %37) #13
  %38 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.150", %"class.jxl::ThreadPool::RunCallState.150"* %6, i64 0, i32 0
  %39 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.150", %"class.jxl::ThreadPool::RunCallState.150"* %6, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %38, align 8
  store %class.anon.101* %14, %class.anon.101** %39, align 8
  %40 = call i32 @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj(i8* nonnull %31, i8* nonnull %37, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX318SRGBToXYBAndLinearERKNS_6Image3IfEEPKfPS0_PS6_SC_E4$_10E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX318SRGBToXYBAndLinearERKNS_6Image3IfEEPKfPS0_PS6_SC_E4$_10E12CallDataFuncEPvjm", i32 0, i32 %20) #13
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %37) #13
  br label %52

41:                                               ; preds = %5
  %42 = icmp eq i32 %20, 0
  br i1 %42, label %54, label %43

43:                                               ; preds = %41
  %44 = bitcast %"class.jxl::ThreadPool::RunCallState.150"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %44) #13
  %45 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.150", %"class.jxl::ThreadPool::RunCallState.150"* %7, i64 0, i32 0
  %46 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.150", %"class.jxl::ThreadPool::RunCallState.150"* %7, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %45, align 8
  store %class.anon.101* %14, %class.anon.101** %46, align 8
  %47 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %2, i64 0, i32 0
  %48 = load i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)*, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %47, align 8
  %49 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %2, i64 0, i32 1
  %50 = load i8*, i8** %49, align 8
  %51 = call i32 %48(i8* %50, i8* nonnull %44, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX318SRGBToXYBAndLinearERKNS_6Image3IfEEPKfPS0_PS6_SC_E4$_10E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX318SRGBToXYBAndLinearERKNS_6Image3IfEEPKfPS0_PS6_SC_E4$_10E12CallDataFuncEPvjm", i32 0, i32 %20) #13
  br label %52

52:                                               ; preds = %30, %36, %43
  %53 = phi i8* [ %44, %43 ], [ %31, %36 ], [ %31, %30 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %53) #13
  br label %54

54:                                               ; preds = %52, %41
  %55 = load double, double* %8, align 8
  call void @_ZN3jxl11TraceRunEndEPKcd(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.6, i64 0, i64 0), double %55) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %28) #13
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %21) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %15) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.jxl::ImageBundle"* @_ZN3jxl6N_AVX35ToXYBERKNS_11ImageBundleEPNS_10ThreadPoolEPNS_6Image3IfEEPS1_(%"class.jxl::ImageBundle"* dereferenceable(368), %"class.jxl::ThreadPool"*, %"class.jxl::Image3"* noalias, %"class.jxl::ImageBundle"* noalias) #10 {
  %5 = alloca [192 x float], align 64
  %6 = alloca %"class.jxl::ImageBundle", align 8
  %7 = alloca %"class.jxl::Image3", align 8
  %8 = alloca %"class.jxl::ImageBundle", align 8
  %9 = alloca %"class.jxl::ImageBundle", align 8
  %10 = alloca %"class.jxl::ImageBundle"*, align 8
  %11 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %12 = load %"struct.jxl::jpeg::JPEGData"*, %"struct.jxl::jpeg::JPEGData"** %11, align 8
  %13 = icmp eq %"struct.jxl::jpeg::JPEGData"* %12, null
  br i1 %13, label %14, label %42

14:                                               ; preds = %4
  %15 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 0, i32 0, i32 0
  %16 = load i32, i32* %15, align 8
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %18, label %27

18:                                               ; preds = %14
  %19 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12, i32 0, i32 0
  %20 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %19, align 8
  %21 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12, i32 0, i32 1
  %22 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %21, align 8
  %23 = icmp eq %"class.jxl::Plane"* %20, %22
  br i1 %23, label %27, label %24

24:                                               ; preds = %18
  %25 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %20, i64 0, i32 0, i32 0
  %26 = load i32, i32* %25, align 8
  br label %27

27:                                               ; preds = %14, %18, %24
  %28 = phi i32 [ %16, %14 ], [ 0, %18 ], [ %26, %24 ]
  %29 = zext i32 %28 to i64
  %30 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 0, i32 0, i32 1
  %31 = load i32, i32* %30, align 4
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %33, label %49

33:                                               ; preds = %27
  %34 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12, i32 0, i32 0
  %35 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %34, align 8
  %36 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12, i32 0, i32 1
  %37 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %36, align 8
  %38 = icmp eq %"class.jxl::Plane"* %35, %37
  br i1 %38, label %49, label %39

39:                                               ; preds = %33
  %40 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %35, i64 0, i32 0, i32 1
  %41 = load i32, i32* %40, align 4
  br label %49

42:                                               ; preds = %4
  %43 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %12, i64 0, i32 1
  %44 = load i32, i32* %43, align 8
  %45 = sext i32 %44 to i64
  %46 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %12, i64 0, i32 2
  %47 = load i32, i32* %46, align 4
  %48 = sext i32 %47 to i64
  br label %63

49:                                               ; preds = %27, %33, %39
  %50 = phi i32 [ %31, %27 ], [ 0, %33 ], [ %41, %39 ]
  %51 = zext i32 %50 to i64
  %52 = zext i32 %16 to i64
  br i1 %17, label %53, label %63

53:                                               ; preds = %49
  %54 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12, i32 0, i32 0
  %55 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %54, align 8
  %56 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12, i32 0, i32 1
  %57 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %56, align 8
  %58 = icmp eq %"class.jxl::Plane"* %55, %57
  br i1 %58, label %63, label %59

59:                                               ; preds = %53
  %60 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %55, i64 0, i32 0, i32 0
  %61 = load i32, i32* %60, align 8
  %62 = zext i32 %61 to i64
  br label %63

63:                                               ; preds = %59, %53, %49, %42
  %64 = phi i64 [ %48, %42 ], [ %51, %59 ], [ %51, %53 ], [ %51, %49 ]
  %65 = phi i64 [ %45, %42 ], [ %29, %59 ], [ %29, %53 ], [ %29, %49 ]
  %66 = phi i64 [ %45, %42 ], [ %62, %59 ], [ 0, %53 ], [ %52, %49 ]
  %67 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %2, i64 0, i32 0, i64 0, i32 0, i32 0
  %68 = load i32, i32* %67, align 8
  %69 = zext i32 %68 to i64
  %70 = icmp eq i64 %66, %69
  br i1 %70, label %71, label %97

71:                                               ; preds = %63
  br i1 %13, label %76, label %72

72:                                               ; preds = %71
  %73 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %12, i64 0, i32 2
  %74 = load i32, i32* %73, align 4
  %75 = sext i32 %74 to i64
  br label %91

76:                                               ; preds = %71
  %77 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 0, i32 0, i32 1
  %78 = load i32, i32* %77, align 4
  %79 = zext i32 %78 to i64
  %80 = icmp eq i32 %78, 0
  br i1 %80, label %81, label %91

81:                                               ; preds = %76
  %82 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12, i32 0, i32 0
  %83 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %82, align 8
  %84 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12, i32 0, i32 1
  %85 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %84, align 8
  %86 = icmp eq %"class.jxl::Plane"* %83, %85
  br i1 %86, label %91, label %87

87:                                               ; preds = %81
  %88 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %83, i64 0, i32 0, i32 1
  %89 = load i32, i32* %88, align 4
  %90 = zext i32 %89 to i64
  br label %91

91:                                               ; preds = %72, %76, %81, %87
  %92 = phi i64 [ %75, %72 ], [ %90, %87 ], [ 0, %81 ], [ %79, %76 ]
  %93 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %2, i64 0, i32 0, i64 0, i32 0, i32 1
  %94 = load i32, i32* %93, align 4
  %95 = zext i32 %94 to i64
  %96 = icmp eq i64 %92, %95
  br i1 %96, label %100, label %97

97:                                               ; preds = %63, %91
  %98 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.1, i64 0, i64 0), i32 273, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.7, i64 0, i64 0)) #13
  %99 = tail call zeroext i1 @_ZN3jxl5AbortEv() #21
  unreachable

100:                                              ; preds = %91
  %101 = bitcast [192 x float]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 768, i8* nonnull %101) #13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 64 %101, i8 -1, i64 768, i1 false)
  %102 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 9
  %103 = load %"struct.jxl::ImageMetadata"*, %"struct.jxl::ImageMetadata"** %102, align 8
  %104 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %103, i64 0, i32 14, i32 3
  %105 = load float, float* %104, align 4
  %106 = fcmp une float %105, 0.000000e+00
  br i1 %106, label %213, label %107

107:                                              ; preds = %264, %255, %246, %237, %213, %100
  %108 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.13, i64 0, i64 0), i32 250, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.14, i64 0, i64 0)) #13
  %109 = tail call zeroext i1 @_ZN3jxl5AbortEv() #21
  unreachable

110:                                              ; preds = %273
  %111 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10
  call void @_ZN3jxl6N_AVX315LinearSRGBToXYBERKNS_6Image3IfEEPKfPNS_10ThreadPoolEPS2_(%"class.jxl::Image3"* dereferenceable(96) %111, float* nonnull %218, %"class.jxl::ThreadPool"* %1, %"class.jxl::Image3"* %2)
  br i1 %290, label %112, label %211

112:                                              ; preds = %110
  %113 = bitcast %"class.jxl::ImageBundle"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 368, i8* nonnull %113) #13
  call void @_ZNK3jxl11ImageBundle4CopyEv(%"class.jxl::ImageBundle"* nonnull sret %6, %"class.jxl::ImageBundle"* %0)
  %114 = call dereferenceable(368) %"class.jxl::ImageBundle"* @_ZN3jxl11ImageBundleaSEOS0_(%"class.jxl::ImageBundle"* nonnull %3, %"class.jxl::ImageBundle"* nonnull dereferenceable(368) %6) #13
  call void @_ZN3jxl11ImageBundleD2Ev(%"class.jxl::ImageBundle"* nonnull %6) #13
  call void @llvm.lifetime.end.p0i8(i64 368, i8* nonnull %113) #13
  br label %211

115:                                              ; preds = %273
  %116 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 7
  %117 = load i8, i8* %116, align 1, !range !2
  %118 = icmp ne i8 %117, 0
  %119 = load i32, i32* %291, align 8
  %120 = icmp ult i32 %119, 2
  %121 = and i1 %118, %120
  br i1 %121, label %122, label %163

122:                                              ; preds = %115
  %123 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 2
  %124 = load i32, i32* %123, align 4
  %125 = icmp eq i32 %124, 1
  br i1 %125, label %126, label %163

126:                                              ; preds = %122
  %127 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 3
  %128 = load i32, i32* %127, align 8
  %129 = icmp eq i32 %128, 1
  br i1 %129, label %130, label %163

130:                                              ; preds = %126
  %131 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 4, i32 2
  %132 = load i8, i8* %131, align 4, !range !2
  %133 = icmp eq i8 %132, 0
  br i1 %133, label %134, label %163

134:                                              ; preds = %130
  %135 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 4, i32 4
  %136 = load i32, i32* %135, align 4
  %137 = icmp eq i32 %136, 13
  br i1 %137, label %138, label %163

138:                                              ; preds = %134
  br i1 %290, label %141, label %139

139:                                              ; preds = %138
  %140 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10
  call void @_ZN3jxl6N_AVX39SRGBToXYBERKNS_6Image3IfEEPKfPNS_10ThreadPoolEPS2_(%"class.jxl::Image3"* dereferenceable(96) %140, float* nonnull %218, %"class.jxl::ThreadPool"* %1, %"class.jxl::Image3"* %2)
  br label %211

141:                                              ; preds = %138
  %142 = bitcast %"class.jxl::Image3"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %142) #13
  %143 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %7, i64 0, i32 0, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %143, i64 %65, i64 %64, i64 4) #13
  %144 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %7, i64 0, i32 0, i64 1, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %144, i64 %65, i64 %64, i64 4) #13
  %145 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %7, i64 0, i32 0, i64 2, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %145, i64 %65, i64 %64, i64 4) #13
  call void @_ZN3jxl11ImageBundle12SetFromImageEONS_6Image3IfEERKNS_13ColorEncodingE(%"class.jxl::ImageBundle"* nonnull %3, %"class.jxl::Image3"* nonnull dereferenceable(96) %7, %"struct.jxl::ColorEncoding"* dereferenceable(152) %294) #13
  %146 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %7, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %147 = load i8*, i8** %146, align 8
  store i8* null, i8** %146, align 8
  %148 = icmp eq i8* %147, null
  br i1 %148, label %150, label %149

149:                                              ; preds = %141
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %147) #13
  br label %150

150:                                              ; preds = %149, %141
  %151 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %7, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %152 = load i8*, i8** %151, align 8
  store i8* null, i8** %151, align 8
  %153 = icmp eq i8* %152, null
  br i1 %153, label %155, label %154

154:                                              ; preds = %150
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %152) #13
  br label %155

155:                                              ; preds = %154, %150
  %156 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %7, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %157 = load i8*, i8** %156, align 8
  store i8* null, i8** %156, align 8
  %158 = icmp eq i8* %157, null
  br i1 %158, label %160, label %159

159:                                              ; preds = %155
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %157) #13
  br label %160

160:                                              ; preds = %155, %159
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %142) #13
  %161 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10
  %162 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %3, i64 0, i32 10
  call void @_ZN3jxl6N_AVX318SRGBToXYBAndLinearERKNS_6Image3IfEEPKfPNS_10ThreadPoolEPS2_S9_(%"class.jxl::Image3"* dereferenceable(96) %161, float* nonnull %218, %"class.jxl::ThreadPool"* %1, %"class.jxl::Image3"* %2, %"class.jxl::Image3"* %162)
  br label %211

163:                                              ; preds = %115, %122, %126, %130, %134
  %164 = bitcast %"class.jxl::ImageBundle"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 368, i8* nonnull %164) #13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %164, i8 -86, i64 368, i1 false)
  %165 = bitcast %"class.jxl::ImageBundle"* %8 to i64*
  store i64 0, i64* %165, align 8
  %166 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %8, i64 0, i32 1
  store i32 1, i32* %166, align 8
  %167 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %8, i64 0, i32 3
  call void @_ZN3jxl22YCbCrChromaSubsamplingC1Ev(%"struct.jxl::YCbCrChromaSubsampling"* %167) #13
  %168 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %8, i64 0, i32 4, i32 0
  %169 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %8, i64 0, i32 8
  %170 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %8, i64 0, i32 11
  %171 = bitcast i32* %168 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %171, i8 0, i64 14, i1 false) #13
  %172 = bitcast %"class.std::__1::basic_string"* %169 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %172, i8 0, i64 128, i1 false) #13
  call void @_ZN3jxl13ColorEncodingC1Ev(%"struct.jxl::ColorEncoding"* %170) #13
  %173 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %8, i64 0, i32 12
  %174 = bitcast %"class.std::__1::vector.87"* %173 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %174, i8 0, i64 32, i1 false) #13
  br i1 %290, label %194, label %175

175:                                              ; preds = %163
  %176 = bitcast %"class.jxl::ImageBundle"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 368, i8* nonnull %176) #13
  %177 = bitcast %"struct.jxl::ImageMetadata"** %102 to i64*
  %178 = load i64, i64* %177, align 8
  %179 = bitcast %"class.jxl::ImageBundle"* %9 to i64*
  store i64 0, i64* %179, align 8
  %180 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %9, i64 0, i32 1
  store i32 1, i32* %180, align 8
  %181 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %9, i64 0, i32 3
  call void @_ZN3jxl22YCbCrChromaSubsamplingC1Ev(%"struct.jxl::YCbCrChromaSubsampling"* %181) #13
  %182 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %9, i64 0, i32 4, i32 0
  %183 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %9, i64 0, i32 8
  %184 = bitcast %"class.std::__1::basic_string"* %183 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %184, i8 0, i64 24, i1 false) #13
  %185 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %9, i64 0, i32 9
  %186 = bitcast i32* %182 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %186, i8 0, i64 14, i1 false) #13
  %187 = bitcast %"struct.jxl::ImageMetadata"** %185 to i64*
  store i64 %178, i64* %187, align 8
  %188 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %9, i64 0, i32 10
  %189 = bitcast %"class.jxl::Image3"* %188 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %189, i8 0, i64 96, i1 false) #13
  %190 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %9, i64 0, i32 11
  call void @_ZN3jxl13ColorEncodingC1Ev(%"struct.jxl::ColorEncoding"* %190) #13
  %191 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %9, i64 0, i32 12
  %192 = bitcast %"class.std::__1::vector.87"* %191 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %192, i8 0, i64 32, i1 false) #13
  %193 = call dereferenceable(368) %"class.jxl::ImageBundle"* @_ZN3jxl11ImageBundleaSEOS0_(%"class.jxl::ImageBundle"* nonnull %8, %"class.jxl::ImageBundle"* nonnull dereferenceable(368) %9) #13
  call void @_ZN3jxl11ImageBundleD2Ev(%"class.jxl::ImageBundle"* nonnull %9) #13
  call void @llvm.lifetime.end.p0i8(i64 368, i8* nonnull %176) #13
  br label %194

194:                                              ; preds = %163, %175
  %195 = phi %"class.jxl::ImageBundle"* [ %8, %175 ], [ %3, %163 ]
  %196 = bitcast %"class.jxl::ImageBundle"** %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %196) #13
  store %"class.jxl::ImageBundle"* inttoptr (i64 -6148914691236517206 to %"class.jxl::ImageBundle"*), %"class.jxl::ImageBundle"** %10, align 8
  %197 = call i32 @_ZN3jxl17TransformIfNeededERKNS_11ImageBundleERKNS_13ColorEncodingEPNS_10ThreadPoolEPS0_PPS1_(%"class.jxl::ImageBundle"* dereferenceable(368) %0, %"struct.jxl::ColorEncoding"* dereferenceable(152) %294, %"class.jxl::ThreadPool"* %1, %"class.jxl::ImageBundle"* nonnull %195, %"class.jxl::ImageBundle"** nonnull %10) #13
  %198 = icmp eq i32 %197, 0
  br i1 %198, label %202, label %199

199:                                              ; preds = %194
  %200 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.1, i64 0, i64 0), i32 335, i8* getelementptr inbounds ([69 x i8], [69 x i8]* @.str.9, i64 0, i64 0)) #13
  %201 = call zeroext i1 @_ZN3jxl5AbortEv() #21
  unreachable

202:                                              ; preds = %194
  %203 = load %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"** %10, align 8
  %204 = icmp eq %"class.jxl::ImageBundle"* %203, %195
  br i1 %204, label %208, label %205

205:                                              ; preds = %202
  %206 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.1, i64 0, i64 0), i32 337, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.10, i64 0, i64 0)) #13
  %207 = call zeroext i1 @_ZN3jxl5AbortEv() #21
  unreachable

208:                                              ; preds = %202
  %209 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %195, i64 0, i32 10
  call void @_ZN3jxl6N_AVX315LinearSRGBToXYBERKNS_6Image3IfEEPKfPNS_10ThreadPoolEPS2_(%"class.jxl::Image3"* dereferenceable(96) %209, float* nonnull %218, %"class.jxl::ThreadPool"* %1, %"class.jxl::Image3"* %2)
  %210 = select i1 %290, %"class.jxl::ImageBundle"* %3, %"class.jxl::ImageBundle"* %0
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %196) #13
  call void @_ZN3jxl11ImageBundleD2Ev(%"class.jxl::ImageBundle"* nonnull %8) #13
  call void @llvm.lifetime.end.p0i8(i64 368, i8* nonnull %164) #13
  br label %211

211:                                              ; preds = %110, %208, %160, %139, %112
  %212 = phi %"class.jxl::ImageBundle"* [ %3, %112 ], [ %3, %160 ], [ %0, %139 ], [ %210, %208 ], [ %0, %110 ]
  call void @llvm.lifetime.end.p0i8(i64 768, i8* nonnull %101) #13
  ret %"class.jxl::ImageBundle"* %212

213:                                              ; preds = %100
  %214 = fdiv float %105, 2.550000e+02
  %215 = fmul float %214, 0x3FD3333340000000
  %216 = insertelement <16 x float> undef, float %215, i32 0
  %217 = shufflevector <16 x float> %216, <16 x float> undef, <16 x i32> zeroinitializer
  %218 = getelementptr inbounds [192 x float], [192 x float]* %5, i64 0, i64 0
  %219 = bitcast [192 x float]* %5 to <16 x float>*
  store <16 x float> %217, <16 x float>* %219, align 64, !alias.scope !45
  %220 = fmul float %214, 0x3FE3E76C80000000
  %221 = insertelement <16 x float> undef, float %220, i32 0
  %222 = shufflevector <16 x float> %221, <16 x float> undef, <16 x i32> zeroinitializer
  %223 = getelementptr inbounds [192 x float], [192 x float]* %5, i64 0, i64 16
  %224 = bitcast float* %223 to <16 x float>*
  store <16 x float> %222, <16 x float>* %224, align 64, !alias.scope !45
  %225 = fmul float %214, 0x3FB3F7CEE0000000
  %226 = insertelement <16 x float> undef, float %225, i32 0
  %227 = shufflevector <16 x float> %226, <16 x float> undef, <16 x i32> zeroinitializer
  %228 = getelementptr inbounds [192 x float], [192 x float]* %5, i64 0, i64 32
  %229 = bitcast float* %228 to <16 x float>*
  store <16 x float> %227, <16 x float>* %229, align 64, !alias.scope !45
  %230 = fmul float %214, 0x3FCD70A3E0000000
  %231 = insertelement <16 x float> undef, float %230, i32 0
  %232 = shufflevector <16 x float> %231, <16 x float> undef, <16 x i32> zeroinitializer
  %233 = getelementptr inbounds [192 x float], [192 x float]* %5, i64 0, i64 48
  %234 = bitcast float* %233 to <16 x float>*
  store <16 x float> %232, <16 x float>* %234, align 64, !alias.scope !45
  %235 = load float, float* %104, align 4
  %236 = fcmp une float %235, 0.000000e+00
  br i1 %236, label %237, label %107

237:                                              ; preds = %213
  %238 = fdiv float %235, 2.550000e+02
  %239 = fmul float %238, 0x3FE624DD20000000
  %240 = insertelement <16 x float> undef, float %239, i32 0
  %241 = shufflevector <16 x float> %240, <16 x float> undef, <16 x i32> zeroinitializer
  %242 = getelementptr inbounds [192 x float], [192 x float]* %5, i64 0, i64 64
  %243 = bitcast float* %242 to <16 x float>*
  store <16 x float> %241, <16 x float>* %243, align 64, !alias.scope !45
  %244 = load float, float* %104, align 4
  %245 = fcmp une float %244, 0.000000e+00
  br i1 %245, label %246, label %107

246:                                              ; preds = %237
  %247 = fdiv float %244, 2.550000e+02
  %248 = fmul float %247, 0x3FB3F7CEE0000000
  %249 = insertelement <16 x float> undef, float %248, i32 0
  %250 = shufflevector <16 x float> %249, <16 x float> undef, <16 x i32> zeroinitializer
  %251 = getelementptr inbounds [192 x float], [192 x float]* %5, i64 0, i64 80
  %252 = bitcast float* %251 to <16 x float>*
  store <16 x float> %250, <16 x float>* %252, align 64, !alias.scope !45
  %253 = load float, float* %104, align 4
  %254 = fcmp une float %253, 0.000000e+00
  br i1 %254, label %255, label %107

255:                                              ; preds = %246
  %256 = fdiv float %253, 2.550000e+02
  %257 = fmul float %256, 0x3FCF287980000000
  %258 = insertelement <16 x float> undef, float %257, i32 0
  %259 = shufflevector <16 x float> %258, <16 x float> undef, <16 x i32> zeroinitializer
  %260 = getelementptr inbounds [192 x float], [192 x float]* %5, i64 0, i64 96
  %261 = bitcast float* %260 to <16 x float>*
  store <16 x float> %259, <16 x float>* %261, align 64, !alias.scope !45
  %262 = load float, float* %104, align 4
  %263 = fcmp une float %262, 0.000000e+00
  br i1 %263, label %264, label %107

264:                                              ; preds = %255
  %265 = fdiv float %262, 2.550000e+02
  %266 = fmul float %265, 0x3FCA35D1E0000000
  %267 = insertelement <16 x float> undef, float %266, i32 0
  %268 = shufflevector <16 x float> %267, <16 x float> undef, <16 x i32> zeroinitializer
  %269 = getelementptr inbounds [192 x float], [192 x float]* %5, i64 0, i64 112
  %270 = bitcast float* %269 to <16 x float>*
  store <16 x float> %268, <16 x float>* %270, align 64, !alias.scope !45
  %271 = load float, float* %104, align 4
  %272 = fcmp une float %271, 0.000000e+00
  br i1 %272, label %273, label %107

273:                                              ; preds = %264
  %274 = fdiv float %271, 2.550000e+02
  %275 = fmul float %274, 0x3FE1A86D20000000
  %276 = insertelement <16 x float> undef, float %275, i32 0
  %277 = shufflevector <16 x float> %276, <16 x float> undef, <16 x i32> zeroinitializer
  %278 = getelementptr inbounds [192 x float], [192 x float]* %5, i64 0, i64 128
  %279 = bitcast float* %278 to <16 x float>*
  store <16 x float> %277, <16 x float>* %279, align 64, !alias.scope !45
  %280 = tail call float @cbrtf(float 0x3F6F12A6C0000000) #18
  %281 = fsub float -0.000000e+00, %280
  %282 = insertelement <16 x float> undef, float %281, i32 0
  %283 = shufflevector <16 x float> %282, <16 x float> undef, <16 x i32> zeroinitializer
  %284 = getelementptr inbounds [192 x float], [192 x float]* %5, i64 0, i64 144
  %285 = bitcast float* %284 to <16 x float>*
  store <16 x float> %283, <16 x float>* %285, align 64, !alias.scope !48
  %286 = getelementptr inbounds [192 x float], [192 x float]* %5, i64 0, i64 160
  %287 = bitcast float* %286 to <16 x float>*
  store <16 x float> %283, <16 x float>* %287, align 64, !alias.scope !48
  %288 = getelementptr inbounds [192 x float], [192 x float]* %5, i64 0, i64 176
  %289 = bitcast float* %288 to <16 x float>*
  store <16 x float> %283, <16 x float>* %289, align 64, !alias.scope !48
  %290 = icmp ne %"class.jxl::ImageBundle"* %3, null
  %291 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 9
  %292 = load i32, i32* %291, align 8
  %293 = icmp eq i32 %292, 1
  %294 = tail call dereferenceable(152) %"struct.jxl::ColorEncoding"* @_ZN3jxl13ColorEncoding10LinearSRGBEb(i1 zeroext %293) #13
  %295 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11
  %296 = tail call zeroext i1 @_ZNK3jxl13ColorEncoding17SameColorEncodingERKS0_(%"struct.jxl::ColorEncoding"* %294, %"struct.jxl::ColorEncoding"* dereferenceable(152) %295)
  br i1 %296, label %110, label %115
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl6N_AVX310RgbToYcbcrERKNS_5PlaneIfEES4_S4_PS2_S5_S5_PNS_10ThreadPoolE(%"class.jxl::Plane"* dereferenceable(32), %"class.jxl::Plane"* dereferenceable(32), %"class.jxl::Plane"* dereferenceable(32), %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::ThreadPool"* readonly) #10 {
  %8 = alloca %"class.jxl::ThreadPool::RunCallState.151", align 8
  %9 = alloca %"class.jxl::ThreadPool::RunCallState.151", align 8
  %10 = alloca double, align 8
  %11 = alloca %"class.jxl::ThreadPool", align 8
  %12 = alloca %"class.jxl::Plane"*, align 8
  %13 = alloca %"class.jxl::Plane"*, align 8
  %14 = alloca %"class.jxl::Plane"*, align 8
  %15 = alloca i64, align 8
  %16 = alloca i64, align 8
  %17 = alloca i64, align 8
  %18 = alloca %"class.hwy::N_AVX3::Vec512", align 64
  %19 = alloca %"class.hwy::N_AVX3::Vec512", align 64
  %20 = alloca %"class.hwy::N_AVX3::Vec512", align 64
  %21 = alloca %"class.hwy::N_AVX3::Vec512", align 64
  %22 = alloca %"class.hwy::N_AVX3::Vec512", align 64
  %23 = alloca %"class.hwy::N_AVX3::Vec512", align 64
  %24 = alloca %"class.hwy::N_AVX3::Vec512", align 64
  %25 = alloca %"class.hwy::N_AVX3::Vec512", align 64
  %26 = alloca i64, align 8
  %27 = alloca %class.anon.102, align 8
  store %"class.jxl::Plane"* %3, %"class.jxl::Plane"** %12, align 8
  store %"class.jxl::Plane"* %4, %"class.jxl::Plane"** %13, align 8
  store %"class.jxl::Plane"* %5, %"class.jxl::Plane"** %14, align 8
  %28 = bitcast i64* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %28) #13
  store i64 16, i64* %15, align 8
  %29 = bitcast i64* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %29) #13
  %30 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %0, i64 0, i32 0, i32 0
  %31 = load i32, i32* %30, align 8
  %32 = zext i32 %31 to i64
  store i64 %32, i64* %16, align 8
  %33 = bitcast i64* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %33) #13
  %34 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %0, i64 0, i32 0, i32 1
  %35 = load i32, i32* %34, align 4
  %36 = zext i32 %35 to i64
  store i64 %36, i64* %17, align 8
  %37 = icmp eq i32 %31, 0
  %38 = icmp eq i32 %35, 0
  %39 = or i1 %37, %38
  br i1 %39, label %112, label %40

40:                                               ; preds = %7
  %41 = bitcast %"class.hwy::N_AVX3::Vec512"* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %41) #13
  %42 = getelementptr inbounds %"class.hwy::N_AVX3::Vec512", %"class.hwy::N_AVX3::Vec512"* %18, i64 0, i32 0
  store <16 x float> <float 0x3FE0101020000000, float 0x3FE0101020000000, float 0x3FE0101020000000, float 0x3FE0101020000000, float 0x3FE0101020000000, float 0x3FE0101020000000, float 0x3FE0101020000000, float 0x3FE0101020000000, float 0x3FE0101020000000, float 0x3FE0101020000000, float 0x3FE0101020000000, float 0x3FE0101020000000, float 0x3FE0101020000000, float 0x3FE0101020000000, float 0x3FE0101020000000, float 0x3FE0101020000000>, <16 x float>* %42, align 64, !alias.scope !51
  %43 = bitcast %"class.hwy::N_AVX3::Vec512"* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %43) #13
  %44 = getelementptr inbounds %"class.hwy::N_AVX3::Vec512", %"class.hwy::N_AVX3::Vec512"* %19, i64 0, i32 0
  store <16 x float> <float 0x3FD322D0E0000000, float 0x3FD322D0E0000000, float 0x3FD322D0E0000000, float 0x3FD322D0E0000000, float 0x3FD322D0E0000000, float 0x3FD322D0E0000000, float 0x3FD322D0E0000000, float 0x3FD322D0E0000000, float 0x3FD322D0E0000000, float 0x3FD322D0E0000000, float 0x3FD322D0E0000000, float 0x3FD322D0E0000000, float 0x3FD322D0E0000000, float 0x3FD322D0E0000000, float 0x3FD322D0E0000000, float 0x3FD322D0E0000000>, <16 x float>* %44, align 64, !alias.scope !54
  %45 = bitcast %"class.hwy::N_AVX3::Vec512"* %20 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %45) #13
  %46 = getelementptr inbounds %"class.hwy::N_AVX3::Vec512", %"class.hwy::N_AVX3::Vec512"* %20, i64 0, i32 0
  store <16 x float> <float 0x3FE2C8B440000000, float 0x3FE2C8B440000000, float 0x3FE2C8B440000000, float 0x3FE2C8B440000000, float 0x3FE2C8B440000000, float 0x3FE2C8B440000000, float 0x3FE2C8B440000000, float 0x3FE2C8B440000000, float 0x3FE2C8B440000000, float 0x3FE2C8B440000000, float 0x3FE2C8B440000000, float 0x3FE2C8B440000000, float 0x3FE2C8B440000000, float 0x3FE2C8B440000000, float 0x3FE2C8B440000000, float 0x3FE2C8B440000000>, <16 x float>* %46, align 64, !alias.scope !57
  %47 = bitcast %"class.hwy::N_AVX3::Vec512"* %21 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %47) #13
  %48 = getelementptr inbounds %"class.hwy::N_AVX3::Vec512", %"class.hwy::N_AVX3::Vec512"* %21, i64 0, i32 0
  store <16 x float> <float 0x3FBD2F1AA0000000, float 0x3FBD2F1AA0000000, float 0x3FBD2F1AA0000000, float 0x3FBD2F1AA0000000, float 0x3FBD2F1AA0000000, float 0x3FBD2F1AA0000000, float 0x3FBD2F1AA0000000, float 0x3FBD2F1AA0000000, float 0x3FBD2F1AA0000000, float 0x3FBD2F1AA0000000, float 0x3FBD2F1AA0000000, float 0x3FBD2F1AA0000000, float 0x3FBD2F1AA0000000, float 0x3FBD2F1AA0000000, float 0x3FBD2F1AA0000000, float 0x3FBD2F1AA0000000>, <16 x float>* %48, align 64, !alias.scope !60
  %49 = bitcast %"class.hwy::N_AVX3::Vec512"* %22 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %49) #13
  %50 = getelementptr inbounds %"class.hwy::N_AVX3::Vec512", %"class.hwy::N_AVX3::Vec512"* %22, i64 0, i32 0
  store <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <16 x float>* %50, align 64, !alias.scope !63
  %51 = bitcast %"class.hwy::N_AVX3::Vec512"* %23 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %51) #13
  %52 = getelementptr inbounds %"class.hwy::N_AVX3::Vec512", %"class.hwy::N_AVX3::Vec512"* %23, i64 0, i32 0
  store <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <16 x float>* %52, align 64, !alias.scope !66
  %53 = bitcast %"class.hwy::N_AVX3::Vec512"* %24 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %53) #13
  %54 = getelementptr inbounds %"class.hwy::N_AVX3::Vec512", %"class.hwy::N_AVX3::Vec512"* %24, i64 0, i32 0
  store <16 x float> <float 0x3FE6D314E0000000, float 0x3FE6D314E0000000, float 0x3FE6D314E0000000, float 0x3FE6D314E0000000, float 0x3FE6D314E0000000, float 0x3FE6D314E0000000, float 0x3FE6D314E0000000, float 0x3FE6D314E0000000, float 0x3FE6D314E0000000, float 0x3FE6D314E0000000, float 0x3FE6D314E0000000, float 0x3FE6D314E0000000, float 0x3FE6D314E0000000, float 0x3FE6D314E0000000, float 0x3FE6D314E0000000, float 0x3FE6D314E0000000>, <16 x float>* %54, align 64, !alias.scope !69
  %55 = bitcast %"class.hwy::N_AVX3::Vec512"* %25 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %55) #13
  %56 = getelementptr inbounds %"class.hwy::N_AVX3::Vec512", %"class.hwy::N_AVX3::Vec512"* %25, i64 0, i32 0
  store <16 x float> <float 0x3FE20F0640000000, float 0x3FE20F0640000000, float 0x3FE20F0640000000, float 0x3FE20F0640000000, float 0x3FE20F0640000000, float 0x3FE20F0640000000, float 0x3FE20F0640000000, float 0x3FE20F0640000000, float 0x3FE20F0640000000, float 0x3FE20F0640000000, float 0x3FE20F0640000000, float 0x3FE20F0640000000, float 0x3FE20F0640000000, float 0x3FE20F0640000000, float 0x3FE20F0640000000, float 0x3FE20F0640000000>, <16 x float>* %56, align 64, !alias.scope !72
  %57 = bitcast i64* %26 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %57) #13
  %58 = add nuw nsw i64 %32, 65535
  %59 = udiv i64 %58, %32
  store i64 %59, i64* %26, align 8
  %60 = add nsw i64 %36, -1
  %61 = add nuw nsw i64 %60, %59
  %62 = udiv i64 %61, %59
  %63 = bitcast %class.anon.102* %27 to i8*
  call void @llvm.lifetime.start.p0i8(i64 152, i8* nonnull %63) #13
  %64 = getelementptr inbounds %class.anon.102, %class.anon.102* %27, i64 0, i32 0
  store i64* %26, i64** %64, align 8
  %65 = getelementptr inbounds %class.anon.102, %class.anon.102* %27, i64 0, i32 1
  store i64* %17, i64** %65, align 8
  %66 = getelementptr inbounds %class.anon.102, %class.anon.102* %27, i64 0, i32 2
  store %"class.jxl::Plane"* %0, %"class.jxl::Plane"** %66, align 8
  %67 = getelementptr inbounds %class.anon.102, %class.anon.102* %27, i64 0, i32 3
  store %"class.jxl::Plane"* %1, %"class.jxl::Plane"** %67, align 8
  %68 = getelementptr inbounds %class.anon.102, %class.anon.102* %27, i64 0, i32 4
  store %"class.jxl::Plane"* %2, %"class.jxl::Plane"** %68, align 8
  %69 = getelementptr inbounds %class.anon.102, %class.anon.102* %27, i64 0, i32 5
  store %"class.jxl::Plane"** %12, %"class.jxl::Plane"*** %69, align 8
  %70 = getelementptr inbounds %class.anon.102, %class.anon.102* %27, i64 0, i32 6
  store %"class.jxl::Plane"** %13, %"class.jxl::Plane"*** %70, align 8
  %71 = getelementptr inbounds %class.anon.102, %class.anon.102* %27, i64 0, i32 7
  store %"class.jxl::Plane"** %14, %"class.jxl::Plane"*** %71, align 8
  %72 = getelementptr inbounds %class.anon.102, %class.anon.102* %27, i64 0, i32 8
  store i64* %16, i64** %72, align 8
  %73 = getelementptr inbounds %class.anon.102, %class.anon.102* %27, i64 0, i32 9
  store i64* %15, i64** %73, align 8
  %74 = getelementptr inbounds %class.anon.102, %class.anon.102* %27, i64 0, i32 10
  store %"struct.hwy::N_AVX3::Simd"* @_ZZN3jxl6N_AVX310RgbToYcbcrERKNS_5PlaneIfEES4_S4_PS2_S5_S5_PNS_10ThreadPoolEE2df, %"struct.hwy::N_AVX3::Simd"** %74, align 8
  %75 = getelementptr inbounds %class.anon.102, %class.anon.102* %27, i64 0, i32 11
  store %"class.hwy::N_AVX3::Vec512"* %19, %"class.hwy::N_AVX3::Vec512"** %75, align 8
  %76 = getelementptr inbounds %class.anon.102, %class.anon.102* %27, i64 0, i32 12
  store %"class.hwy::N_AVX3::Vec512"* %22, %"class.hwy::N_AVX3::Vec512"** %76, align 8
  %77 = getelementptr inbounds %class.anon.102, %class.anon.102* %27, i64 0, i32 13
  store %"class.hwy::N_AVX3::Vec512"* %20, %"class.hwy::N_AVX3::Vec512"** %77, align 8
  %78 = getelementptr inbounds %class.anon.102, %class.anon.102* %27, i64 0, i32 14
  store %"class.hwy::N_AVX3::Vec512"* %21, %"class.hwy::N_AVX3::Vec512"** %78, align 8
  %79 = getelementptr inbounds %class.anon.102, %class.anon.102* %27, i64 0, i32 15
  store %"class.hwy::N_AVX3::Vec512"* %23, %"class.hwy::N_AVX3::Vec512"** %79, align 8
  %80 = getelementptr inbounds %class.anon.102, %class.anon.102* %27, i64 0, i32 16
  store %"class.hwy::N_AVX3::Vec512"* %18, %"class.hwy::N_AVX3::Vec512"** %80, align 8
  %81 = getelementptr inbounds %class.anon.102, %class.anon.102* %27, i64 0, i32 17
  store %"class.hwy::N_AVX3::Vec512"* %25, %"class.hwy::N_AVX3::Vec512"** %81, align 8
  %82 = getelementptr inbounds %class.anon.102, %class.anon.102* %27, i64 0, i32 18
  store %"class.hwy::N_AVX3::Vec512"* %24, %"class.hwy::N_AVX3::Vec512"** %82, align 8
  %83 = trunc i64 %62 to i32
  %84 = bitcast double* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %84) #13
  store double 0xFFFFFFFFFFFFFFFF, double* %10, align 8
  call void @_ZN3jxl13TraceRunBeginEPKcPd(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.11, i64 0, i64 0), double* nonnull %10) #13
  %85 = icmp eq %"class.jxl::ThreadPool"* %6, null
  br i1 %85, label %86, label %97

86:                                               ; preds = %40
  %87 = bitcast %"class.jxl::ThreadPool"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %87) #13
  %88 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %11, i64 0, i32 0
  %89 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %11, i64 0, i32 1
  store i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)* @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %88, align 8
  %90 = bitcast i8** %89 to %"class.jxl::ThreadPool"**
  store %"class.jxl::ThreadPool"* %11, %"class.jxl::ThreadPool"** %90, align 8
  %91 = icmp eq i32 %83, 0
  br i1 %91, label %108, label %92

92:                                               ; preds = %86
  %93 = bitcast %"class.jxl::ThreadPool::RunCallState.151"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %93) #13
  %94 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.151", %"class.jxl::ThreadPool::RunCallState.151"* %8, i64 0, i32 0
  %95 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.151", %"class.jxl::ThreadPool::RunCallState.151"* %8, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %94, align 8
  store %class.anon.102* %27, %class.anon.102** %95, align 8
  %96 = call i32 @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj(i8* nonnull %87, i8* nonnull %93, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX310RgbToYcbcrERKNS_5PlaneIfEES8_S8_PS6_S9_S9_PS0_E4$_11E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX310RgbToYcbcrERKNS_5PlaneIfEES8_S8_PS6_S9_S9_PS0_E4$_11E12CallDataFuncEPvjm", i32 0, i32 %83) #13
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %93) #13
  br label %108

97:                                               ; preds = %40
  %98 = icmp eq i32 %83, 0
  br i1 %98, label %110, label %99

99:                                               ; preds = %97
  %100 = bitcast %"class.jxl::ThreadPool::RunCallState.151"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %100) #13
  %101 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.151", %"class.jxl::ThreadPool::RunCallState.151"* %9, i64 0, i32 0
  %102 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.151", %"class.jxl::ThreadPool::RunCallState.151"* %9, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %101, align 8
  store %class.anon.102* %27, %class.anon.102** %102, align 8
  %103 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %6, i64 0, i32 0
  %104 = load i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)*, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %103, align 8
  %105 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %6, i64 0, i32 1
  %106 = load i8*, i8** %105, align 8
  %107 = call i32 %104(i8* %106, i8* nonnull %100, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX310RgbToYcbcrERKNS_5PlaneIfEES8_S8_PS6_S9_S9_PS0_E4$_11E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX310RgbToYcbcrERKNS_5PlaneIfEES8_S8_PS6_S9_S9_PS0_E4$_11E12CallDataFuncEPvjm", i32 0, i32 %83) #13
  br label %108

108:                                              ; preds = %86, %92, %99
  %109 = phi i8* [ %100, %99 ], [ %87, %92 ], [ %87, %86 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %109) #13
  br label %110

110:                                              ; preds = %108, %97
  %111 = load double, double* %10, align 8
  call void @_ZN3jxl11TraceRunEndEPKcd(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.11, i64 0, i64 0), double %111) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %84) #13
  call void @llvm.lifetime.end.p0i8(i64 152, i8* nonnull %63) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %57) #13
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %55) #13
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %53) #13
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %51) #13
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %49) #13
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %47) #13
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %45) #13
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %43) #13
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %41) #13
  br label %112

112:                                              ; preds = %7, %110
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %33) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %29) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %28) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl8N_SCALAR12TestCubeRootEv() #6 {
  br label %3

1:                                                ; preds = %3
  %2 = fcmp olt float %47, 0x3EAAD7F2A0000000
  br i1 %2, label %53, label %50

3:                                                ; preds = %3, %0
  %4 = phi float [ 0.000000e+00, %0 ], [ %47, %3 ]
  %5 = phi i64 [ 0, %0 ], [ %48, %3 ]
  %6 = uitofp i64 %5 to float
  %7 = fmul float %6, 0x3EE4F8B580000000
  %8 = tail call float @cbrtf(float %7) #18
  %9 = fmul float %7, 0x3FD5555560000000
  %10 = bitcast float %7 to i32
  %11 = icmp eq i32 %10, 0
  %12 = lshr i32 %10, 23
  %13 = ashr i32 %10, 31
  %14 = shl nsw i32 %13, 8
  %15 = or i32 %14, %12
  %16 = mul i32 %15, -2796202
  %17 = add i32 %16, 1417674752
  %18 = select i1 %11, i32 0, i32 %17
  %19 = bitcast i32 %18 to float
  %20 = fmul float %19, %19
  %21 = fmul float %20, %20
  %22 = fmul float %19, 0x3FF5555560000000
  %23 = fmul float %9, %21
  %24 = fsub float %22, %23
  %25 = fmul float %24, %24
  %26 = fmul float %25, %25
  %27 = fmul float %24, 0x3FF5555560000000
  %28 = fmul float %9, %26
  %29 = fsub float %27, %28
  %30 = fmul float %29, %29
  %31 = fmul float %30, %30
  %32 = fmul float %29, 0x3FF5555560000000
  %33 = fmul float %9, %31
  %34 = fsub float %32, %33
  %35 = fmul float %34, %34
  %36 = fmul float %35, %35
  %37 = fmul float %7, %36
  %38 = fsub float %34, %37
  %39 = fmul float %38, 0x3FD5555560000000
  %40 = fadd float %34, %39
  %41 = fmul float %40, %40
  %42 = fmul float %7, %41
  %43 = fadd float %42, 0.000000e+00
  %44 = fsub float %43, %8
  %45 = tail call float @llvm.fabs.f32(float %44) #13
  %46 = fcmp olt float %4, %45
  %47 = select i1 %46, float %45, float %4
  %48 = add nuw nsw i64 %5, 1
  %49 = icmp eq i64 %48, 2000000
  br i1 %49, label %1, label %3

50:                                               ; preds = %1
  %51 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.1, i64 0, i64 0), i32 104, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.3, i64 0, i64 0)) #13
  %52 = tail call zeroext i1 @_ZN3jxl5AbortEv() #21
  unreachable

53:                                               ; preds = %1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl8N_SCALAR15LinearSRGBToXYBERKNS_6Image3IfEEPKfPNS_10ThreadPoolEPS2_(%"class.jxl::Image3"* dereferenceable(96), float* noalias, %"class.jxl::ThreadPool"* readonly, %"class.jxl::Image3"* noalias) local_unnamed_addr #6 {
  %5 = alloca %"class.jxl::ThreadPool::RunCallState.158", align 8
  %6 = alloca %"class.jxl::ThreadPool::RunCallState.158", align 8
  %7 = alloca double, align 8
  %8 = alloca %"class.jxl::ThreadPool", align 8
  %9 = alloca float*, align 8
  %10 = alloca %"class.jxl::Image3"*, align 8
  %11 = alloca i64, align 8
  %12 = alloca %class.anon.103, align 8
  store float* %1, float** %9, align 8
  store %"class.jxl::Image3"* %3, %"class.jxl::Image3"** %10, align 8
  %13 = bitcast i64* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %13) #13
  %14 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 0, i32 0, i32 0
  %15 = load i32, i32* %14, align 8
  %16 = zext i32 %15 to i64
  store i64 %16, i64* %11, align 8
  %17 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 0, i32 0, i32 1
  %18 = load i32, i32* %17, align 4
  %19 = bitcast %class.anon.103* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %19) #13
  %20 = getelementptr inbounds %class.anon.103, %class.anon.103* %12, i64 0, i32 0
  store %"class.jxl::Image3"* %0, %"class.jxl::Image3"** %20, align 8
  %21 = getelementptr inbounds %class.anon.103, %class.anon.103* %12, i64 0, i32 1
  store %"class.jxl::Image3"** %10, %"class.jxl::Image3"*** %21, align 8
  %22 = getelementptr inbounds %class.anon.103, %class.anon.103* %12, i64 0, i32 2
  store i64* %11, i64** %22, align 8
  %23 = getelementptr inbounds %class.anon.103, %class.anon.103* %12, i64 0, i32 3
  store %"struct.hwy::N_SCALAR::Simd"* @_ZZN3jxl8N_SCALAR15LinearSRGBToXYBERKNS_6Image3IfEEPKfPNS_10ThreadPoolEPS2_E1d, %"struct.hwy::N_SCALAR::Simd"** %23, align 8
  %24 = getelementptr inbounds %class.anon.103, %class.anon.103* %12, i64 0, i32 4
  store float** %9, float*** %24, align 8
  %25 = bitcast double* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %25) #13
  store double 0xFFFFFFFFFFFFFFFF, double* %7, align 8
  call void @_ZN3jxl13TraceRunBeginEPKcPd(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i64 0, i64 0), double* nonnull %7) #13
  %26 = icmp eq %"class.jxl::ThreadPool"* %2, null
  br i1 %26, label %27, label %38

27:                                               ; preds = %4
  %28 = bitcast %"class.jxl::ThreadPool"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %28) #13
  %29 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %8, i64 0, i32 0
  %30 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %8, i64 0, i32 1
  store i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)* @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %29, align 8
  %31 = bitcast i8** %30 to %"class.jxl::ThreadPool"**
  store %"class.jxl::ThreadPool"* %8, %"class.jxl::ThreadPool"** %31, align 8
  %32 = icmp eq i32 %18, 0
  br i1 %32, label %49, label %33

33:                                               ; preds = %27
  %34 = bitcast %"class.jxl::ThreadPool::RunCallState.158"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %34) #13
  %35 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.158", %"class.jxl::ThreadPool::RunCallState.158"* %5, i64 0, i32 0
  %36 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.158", %"class.jxl::ThreadPool::RunCallState.158"* %5, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %35, align 8
  store %class.anon.103* %12, %class.anon.103** %36, align 8
  %37 = call i32 @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj(i8* nonnull %28, i8* nonnull %34, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_8N_SCALAR15LinearSRGBToXYBERKNS_6Image3IfEEPKfPS0_PS6_E4$_12E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_8N_SCALAR15LinearSRGBToXYBERKNS_6Image3IfEEPKfPS0_PS6_E4$_12E12CallDataFuncEPvjm", i32 0, i32 %18) #13
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %34) #13
  br label %49

38:                                               ; preds = %4
  %39 = icmp eq i32 %18, 0
  br i1 %39, label %51, label %40

40:                                               ; preds = %38
  %41 = bitcast %"class.jxl::ThreadPool::RunCallState.158"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %41) #13
  %42 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.158", %"class.jxl::ThreadPool::RunCallState.158"* %6, i64 0, i32 0
  %43 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.158", %"class.jxl::ThreadPool::RunCallState.158"* %6, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %42, align 8
  store %class.anon.103* %12, %class.anon.103** %43, align 8
  %44 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %2, i64 0, i32 0
  %45 = load i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)*, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %44, align 8
  %46 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %2, i64 0, i32 1
  %47 = load i8*, i8** %46, align 8
  %48 = call i32 %45(i8* %47, i8* nonnull %41, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_8N_SCALAR15LinearSRGBToXYBERKNS_6Image3IfEEPKfPS0_PS6_E4$_12E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_8N_SCALAR15LinearSRGBToXYBERKNS_6Image3IfEEPKfPS0_PS6_E4$_12E12CallDataFuncEPvjm", i32 0, i32 %18) #13
  br label %49

49:                                               ; preds = %27, %33, %40
  %50 = phi i8* [ %41, %40 ], [ %28, %33 ], [ %28, %27 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %50) #13
  br label %51

51:                                               ; preds = %49, %38
  %52 = load double, double* %7, align 8
  call void @_ZN3jxl11TraceRunEndEPKcd(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i64 0, i64 0), double %52) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %25) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %19) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %13) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl8N_SCALAR9SRGBToXYBERKNS_6Image3IfEEPKfPNS_10ThreadPoolEPS2_(%"class.jxl::Image3"* dereferenceable(96), float* noalias, %"class.jxl::ThreadPool"* readonly, %"class.jxl::Image3"* noalias) local_unnamed_addr #6 {
  %5 = alloca %"class.jxl::ThreadPool::RunCallState.159", align 8
  %6 = alloca %"class.jxl::ThreadPool::RunCallState.159", align 8
  %7 = alloca double, align 8
  %8 = alloca %"class.jxl::ThreadPool", align 8
  %9 = alloca float*, align 8
  %10 = alloca %"class.jxl::Image3"*, align 8
  %11 = alloca i64, align 8
  %12 = alloca %class.anon.104, align 8
  store float* %1, float** %9, align 8
  store %"class.jxl::Image3"* %3, %"class.jxl::Image3"** %10, align 8
  %13 = bitcast i64* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %13) #13
  %14 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 0, i32 0, i32 0
  %15 = load i32, i32* %14, align 8
  %16 = zext i32 %15 to i64
  store i64 %16, i64* %11, align 8
  %17 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 0, i32 0, i32 1
  %18 = load i32, i32* %17, align 4
  %19 = bitcast %class.anon.104* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %19) #13
  %20 = getelementptr inbounds %class.anon.104, %class.anon.104* %12, i64 0, i32 0
  store %"class.jxl::Image3"* %0, %"class.jxl::Image3"** %20, align 8
  %21 = getelementptr inbounds %class.anon.104, %class.anon.104* %12, i64 0, i32 1
  store %"class.jxl::Image3"** %10, %"class.jxl::Image3"*** %21, align 8
  %22 = getelementptr inbounds %class.anon.104, %class.anon.104* %12, i64 0, i32 2
  store i64* %11, i64** %22, align 8
  %23 = getelementptr inbounds %class.anon.104, %class.anon.104* %12, i64 0, i32 3
  store %"struct.hwy::N_SCALAR::Simd"* @_ZZN3jxl8N_SCALAR9SRGBToXYBERKNS_6Image3IfEEPKfPNS_10ThreadPoolEPS2_E1d, %"struct.hwy::N_SCALAR::Simd"** %23, align 8
  %24 = getelementptr inbounds %class.anon.104, %class.anon.104* %12, i64 0, i32 4
  store float** %9, float*** %24, align 8
  %25 = bitcast double* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %25) #13
  store double 0xFFFFFFFFFFFFFFFF, double* %7, align 8
  call void @_ZN3jxl13TraceRunBeginEPKcPd(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.5, i64 0, i64 0), double* nonnull %7) #13
  %26 = icmp eq %"class.jxl::ThreadPool"* %2, null
  br i1 %26, label %27, label %38

27:                                               ; preds = %4
  %28 = bitcast %"class.jxl::ThreadPool"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %28) #13
  %29 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %8, i64 0, i32 0
  %30 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %8, i64 0, i32 1
  store i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)* @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %29, align 8
  %31 = bitcast i8** %30 to %"class.jxl::ThreadPool"**
  store %"class.jxl::ThreadPool"* %8, %"class.jxl::ThreadPool"** %31, align 8
  %32 = icmp eq i32 %18, 0
  br i1 %32, label %49, label %33

33:                                               ; preds = %27
  %34 = bitcast %"class.jxl::ThreadPool::RunCallState.159"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %34) #13
  %35 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.159", %"class.jxl::ThreadPool::RunCallState.159"* %5, i64 0, i32 0
  %36 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.159", %"class.jxl::ThreadPool::RunCallState.159"* %5, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %35, align 8
  store %class.anon.104* %12, %class.anon.104** %36, align 8
  %37 = call i32 @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj(i8* nonnull %28, i8* nonnull %34, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_8N_SCALAR9SRGBToXYBERKNS_6Image3IfEEPKfPS0_PS6_E4$_13E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_8N_SCALAR9SRGBToXYBERKNS_6Image3IfEEPKfPS0_PS6_E4$_13E12CallDataFuncEPvjm", i32 0, i32 %18) #13
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %34) #13
  br label %49

38:                                               ; preds = %4
  %39 = icmp eq i32 %18, 0
  br i1 %39, label %51, label %40

40:                                               ; preds = %38
  %41 = bitcast %"class.jxl::ThreadPool::RunCallState.159"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %41) #13
  %42 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.159", %"class.jxl::ThreadPool::RunCallState.159"* %6, i64 0, i32 0
  %43 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.159", %"class.jxl::ThreadPool::RunCallState.159"* %6, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %42, align 8
  store %class.anon.104* %12, %class.anon.104** %43, align 8
  %44 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %2, i64 0, i32 0
  %45 = load i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)*, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %44, align 8
  %46 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %2, i64 0, i32 1
  %47 = load i8*, i8** %46, align 8
  %48 = call i32 %45(i8* %47, i8* nonnull %41, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_8N_SCALAR9SRGBToXYBERKNS_6Image3IfEEPKfPS0_PS6_E4$_13E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_8N_SCALAR9SRGBToXYBERKNS_6Image3IfEEPKfPS0_PS6_E4$_13E12CallDataFuncEPvjm", i32 0, i32 %18) #13
  br label %49

49:                                               ; preds = %27, %33, %40
  %50 = phi i8* [ %41, %40 ], [ %28, %33 ], [ %28, %27 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %50) #13
  br label %51

51:                                               ; preds = %49, %38
  %52 = load double, double* %7, align 8
  call void @_ZN3jxl11TraceRunEndEPKcd(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.5, i64 0, i64 0), double %52) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %25) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %19) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %13) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl8N_SCALAR18SRGBToXYBAndLinearERKNS_6Image3IfEEPKfPNS_10ThreadPoolEPS2_S9_(%"class.jxl::Image3"* dereferenceable(96), float* noalias, %"class.jxl::ThreadPool"* readonly, %"class.jxl::Image3"* noalias, %"class.jxl::Image3"* noalias) local_unnamed_addr #6 {
  %6 = alloca %"class.jxl::ThreadPool::RunCallState.161", align 8
  %7 = alloca %"class.jxl::ThreadPool::RunCallState.161", align 8
  %8 = alloca double, align 8
  %9 = alloca %"class.jxl::ThreadPool", align 8
  %10 = alloca float*, align 8
  %11 = alloca %"class.jxl::Image3"*, align 8
  %12 = alloca %"class.jxl::Image3"*, align 8
  %13 = alloca i64, align 8
  %14 = alloca %class.anon.105, align 8
  store float* %1, float** %10, align 8
  store %"class.jxl::Image3"* %3, %"class.jxl::Image3"** %11, align 8
  store %"class.jxl::Image3"* %4, %"class.jxl::Image3"** %12, align 8
  %15 = bitcast i64* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %15) #13
  %16 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 0, i32 0, i32 0
  %17 = load i32, i32* %16, align 8
  %18 = zext i32 %17 to i64
  store i64 %18, i64* %13, align 8
  %19 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 0, i32 0, i32 1
  %20 = load i32, i32* %19, align 4
  %21 = bitcast %class.anon.105* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %21) #13
  %22 = getelementptr inbounds %class.anon.105, %class.anon.105* %14, i64 0, i32 0
  store %"class.jxl::Image3"* %0, %"class.jxl::Image3"** %22, align 8
  %23 = getelementptr inbounds %class.anon.105, %class.anon.105* %14, i64 0, i32 1
  store %"class.jxl::Image3"** %12, %"class.jxl::Image3"*** %23, align 8
  %24 = getelementptr inbounds %class.anon.105, %class.anon.105* %14, i64 0, i32 2
  store %"class.jxl::Image3"** %11, %"class.jxl::Image3"*** %24, align 8
  %25 = getelementptr inbounds %class.anon.105, %class.anon.105* %14, i64 0, i32 3
  store i64* %13, i64** %25, align 8
  %26 = getelementptr inbounds %class.anon.105, %class.anon.105* %14, i64 0, i32 4
  store %"struct.hwy::N_SCALAR::Simd"* @_ZZN3jxl8N_SCALAR18SRGBToXYBAndLinearERKNS_6Image3IfEEPKfPNS_10ThreadPoolEPS2_S9_E1d, %"struct.hwy::N_SCALAR::Simd"** %26, align 8
  %27 = getelementptr inbounds %class.anon.105, %class.anon.105* %14, i64 0, i32 5
  store float** %10, float*** %27, align 8
  %28 = bitcast double* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %28) #13
  store double 0xFFFFFFFFFFFFFFFF, double* %8, align 8
  call void @_ZN3jxl13TraceRunBeginEPKcPd(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.6, i64 0, i64 0), double* nonnull %8) #13
  %29 = icmp eq %"class.jxl::ThreadPool"* %2, null
  br i1 %29, label %30, label %41

30:                                               ; preds = %5
  %31 = bitcast %"class.jxl::ThreadPool"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %31) #13
  %32 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %9, i64 0, i32 0
  %33 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %9, i64 0, i32 1
  store i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)* @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %32, align 8
  %34 = bitcast i8** %33 to %"class.jxl::ThreadPool"**
  store %"class.jxl::ThreadPool"* %9, %"class.jxl::ThreadPool"** %34, align 8
  %35 = icmp eq i32 %20, 0
  br i1 %35, label %52, label %36

36:                                               ; preds = %30
  %37 = bitcast %"class.jxl::ThreadPool::RunCallState.161"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %37) #13
  %38 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.161", %"class.jxl::ThreadPool::RunCallState.161"* %6, i64 0, i32 0
  %39 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.161", %"class.jxl::ThreadPool::RunCallState.161"* %6, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %38, align 8
  store %class.anon.105* %14, %class.anon.105** %39, align 8
  %40 = call i32 @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj(i8* nonnull %31, i8* nonnull %37, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_8N_SCALAR18SRGBToXYBAndLinearERKNS_6Image3IfEEPKfPS0_PS6_SC_E4$_14E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_8N_SCALAR18SRGBToXYBAndLinearERKNS_6Image3IfEEPKfPS0_PS6_SC_E4$_14E12CallDataFuncEPvjm", i32 0, i32 %20) #13
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %37) #13
  br label %52

41:                                               ; preds = %5
  %42 = icmp eq i32 %20, 0
  br i1 %42, label %54, label %43

43:                                               ; preds = %41
  %44 = bitcast %"class.jxl::ThreadPool::RunCallState.161"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %44) #13
  %45 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.161", %"class.jxl::ThreadPool::RunCallState.161"* %7, i64 0, i32 0
  %46 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.161", %"class.jxl::ThreadPool::RunCallState.161"* %7, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %45, align 8
  store %class.anon.105* %14, %class.anon.105** %46, align 8
  %47 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %2, i64 0, i32 0
  %48 = load i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)*, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %47, align 8
  %49 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %2, i64 0, i32 1
  %50 = load i8*, i8** %49, align 8
  %51 = call i32 %48(i8* %50, i8* nonnull %44, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_8N_SCALAR18SRGBToXYBAndLinearERKNS_6Image3IfEEPKfPS0_PS6_SC_E4$_14E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_8N_SCALAR18SRGBToXYBAndLinearERKNS_6Image3IfEEPKfPS0_PS6_SC_E4$_14E12CallDataFuncEPvjm", i32 0, i32 %20) #13
  br label %52

52:                                               ; preds = %30, %36, %43
  %53 = phi i8* [ %44, %43 ], [ %31, %36 ], [ %31, %30 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %53) #13
  br label %54

54:                                               ; preds = %52, %41
  %55 = load double, double* %8, align 8
  call void @_ZN3jxl11TraceRunEndEPKcd(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.6, i64 0, i64 0), double %55) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %28) #13
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %21) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %15) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.jxl::ImageBundle"* @_ZN3jxl8N_SCALAR5ToXYBERKNS_11ImageBundleEPNS_10ThreadPoolEPNS_6Image3IfEEPS1_(%"class.jxl::ImageBundle"* dereferenceable(368), %"class.jxl::ThreadPool"*, %"class.jxl::Image3"* noalias, %"class.jxl::ImageBundle"* noalias) #6 {
  %5 = alloca [12 x float], align 16
  %6 = alloca %"class.jxl::ImageBundle", align 8
  %7 = alloca %"class.jxl::Image3", align 8
  %8 = alloca %"class.jxl::ImageBundle", align 8
  %9 = alloca %"class.jxl::ImageBundle", align 8
  %10 = alloca %"class.jxl::ImageBundle"*, align 8
  %11 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %12 = load %"struct.jxl::jpeg::JPEGData"*, %"struct.jxl::jpeg::JPEGData"** %11, align 8
  %13 = icmp eq %"struct.jxl::jpeg::JPEGData"* %12, null
  br i1 %13, label %14, label %42

14:                                               ; preds = %4
  %15 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 0, i32 0, i32 0
  %16 = load i32, i32* %15, align 8
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %18, label %27

18:                                               ; preds = %14
  %19 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12, i32 0, i32 0
  %20 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %19, align 8
  %21 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12, i32 0, i32 1
  %22 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %21, align 8
  %23 = icmp eq %"class.jxl::Plane"* %20, %22
  br i1 %23, label %27, label %24

24:                                               ; preds = %18
  %25 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %20, i64 0, i32 0, i32 0
  %26 = load i32, i32* %25, align 8
  br label %27

27:                                               ; preds = %14, %18, %24
  %28 = phi i32 [ %16, %14 ], [ 0, %18 ], [ %26, %24 ]
  %29 = zext i32 %28 to i64
  %30 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 0, i32 0, i32 1
  %31 = load i32, i32* %30, align 4
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %33, label %49

33:                                               ; preds = %27
  %34 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12, i32 0, i32 0
  %35 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %34, align 8
  %36 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12, i32 0, i32 1
  %37 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %36, align 8
  %38 = icmp eq %"class.jxl::Plane"* %35, %37
  br i1 %38, label %49, label %39

39:                                               ; preds = %33
  %40 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %35, i64 0, i32 0, i32 1
  %41 = load i32, i32* %40, align 4
  br label %49

42:                                               ; preds = %4
  %43 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %12, i64 0, i32 1
  %44 = load i32, i32* %43, align 8
  %45 = sext i32 %44 to i64
  %46 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %12, i64 0, i32 2
  %47 = load i32, i32* %46, align 4
  %48 = sext i32 %47 to i64
  br label %63

49:                                               ; preds = %27, %33, %39
  %50 = phi i32 [ %31, %27 ], [ 0, %33 ], [ %41, %39 ]
  %51 = zext i32 %50 to i64
  %52 = zext i32 %16 to i64
  br i1 %17, label %53, label %63

53:                                               ; preds = %49
  %54 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12, i32 0, i32 0
  %55 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %54, align 8
  %56 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12, i32 0, i32 1
  %57 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %56, align 8
  %58 = icmp eq %"class.jxl::Plane"* %55, %57
  br i1 %58, label %63, label %59

59:                                               ; preds = %53
  %60 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %55, i64 0, i32 0, i32 0
  %61 = load i32, i32* %60, align 8
  %62 = zext i32 %61 to i64
  br label %63

63:                                               ; preds = %59, %53, %49, %42
  %64 = phi i64 [ %48, %42 ], [ %51, %59 ], [ %51, %53 ], [ %51, %49 ]
  %65 = phi i64 [ %45, %42 ], [ %29, %59 ], [ %29, %53 ], [ %29, %49 ]
  %66 = phi i64 [ %45, %42 ], [ %62, %59 ], [ 0, %53 ], [ %52, %49 ]
  %67 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %2, i64 0, i32 0, i64 0, i32 0, i32 0
  %68 = load i32, i32* %67, align 8
  %69 = zext i32 %68 to i64
  %70 = icmp eq i64 %66, %69
  br i1 %70, label %71, label %97

71:                                               ; preds = %63
  br i1 %13, label %76, label %72

72:                                               ; preds = %71
  %73 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %12, i64 0, i32 2
  %74 = load i32, i32* %73, align 4
  %75 = sext i32 %74 to i64
  br label %91

76:                                               ; preds = %71
  %77 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 0, i32 0, i32 1
  %78 = load i32, i32* %77, align 4
  %79 = zext i32 %78 to i64
  %80 = icmp eq i32 %78, 0
  br i1 %80, label %81, label %91

81:                                               ; preds = %76
  %82 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12, i32 0, i32 0
  %83 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %82, align 8
  %84 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12, i32 0, i32 1
  %85 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %84, align 8
  %86 = icmp eq %"class.jxl::Plane"* %83, %85
  br i1 %86, label %91, label %87

87:                                               ; preds = %81
  %88 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %83, i64 0, i32 0, i32 1
  %89 = load i32, i32* %88, align 4
  %90 = zext i32 %89 to i64
  br label %91

91:                                               ; preds = %72, %76, %81, %87
  %92 = phi i64 [ %75, %72 ], [ %90, %87 ], [ 0, %81 ], [ %79, %76 ]
  %93 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %2, i64 0, i32 0, i64 0, i32 0, i32 1
  %94 = load i32, i32* %93, align 4
  %95 = zext i32 %94 to i64
  %96 = icmp eq i64 %92, %95
  br i1 %96, label %100, label %97

97:                                               ; preds = %63, %91
  %98 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.1, i64 0, i64 0), i32 273, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.7, i64 0, i64 0)) #13
  %99 = tail call zeroext i1 @_ZN3jxl5AbortEv() #21
  unreachable

100:                                              ; preds = %91
  %101 = bitcast [12 x float]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %101) #13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %101, i8 -1, i64 48, i1 false)
  %102 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 9
  %103 = load %"struct.jxl::ImageMetadata"*, %"struct.jxl::ImageMetadata"** %102, align 8
  %104 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %103, i64 0, i32 14, i32 3
  %105 = load float, float* %104, align 4
  %106 = fcmp une float %105, 0.000000e+00
  br i1 %106, label %213, label %107

107:                                              ; preds = %100
  %108 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.13, i64 0, i64 0), i32 250, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.14, i64 0, i64 0)) #13
  %109 = tail call zeroext i1 @_ZN3jxl5AbortEv() #21
  unreachable

110:                                              ; preds = %213
  %111 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10
  call void @_ZN3jxl8N_SCALAR15LinearSRGBToXYBERKNS_6Image3IfEEPKfPNS_10ThreadPoolEPS2_(%"class.jxl::Image3"* dereferenceable(96) %111, float* nonnull %215, %"class.jxl::ThreadPool"* %1, %"class.jxl::Image3"* %2)
  br i1 %236, label %112, label %211

112:                                              ; preds = %110
  %113 = bitcast %"class.jxl::ImageBundle"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 368, i8* nonnull %113) #13
  call void @_ZNK3jxl11ImageBundle4CopyEv(%"class.jxl::ImageBundle"* nonnull sret %6, %"class.jxl::ImageBundle"* %0)
  %114 = call dereferenceable(368) %"class.jxl::ImageBundle"* @_ZN3jxl11ImageBundleaSEOS0_(%"class.jxl::ImageBundle"* nonnull %3, %"class.jxl::ImageBundle"* nonnull dereferenceable(368) %6) #13
  call void @_ZN3jxl11ImageBundleD2Ev(%"class.jxl::ImageBundle"* nonnull %6) #13
  call void @llvm.lifetime.end.p0i8(i64 368, i8* nonnull %113) #13
  br label %211

115:                                              ; preds = %213
  %116 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 7
  %117 = load i8, i8* %116, align 1, !range !2
  %118 = icmp ne i8 %117, 0
  %119 = load i32, i32* %237, align 8
  %120 = icmp ult i32 %119, 2
  %121 = and i1 %118, %120
  br i1 %121, label %122, label %163

122:                                              ; preds = %115
  %123 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 2
  %124 = load i32, i32* %123, align 4
  %125 = icmp eq i32 %124, 1
  br i1 %125, label %126, label %163

126:                                              ; preds = %122
  %127 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 3
  %128 = load i32, i32* %127, align 8
  %129 = icmp eq i32 %128, 1
  br i1 %129, label %130, label %163

130:                                              ; preds = %126
  %131 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 4, i32 2
  %132 = load i8, i8* %131, align 4, !range !2
  %133 = icmp eq i8 %132, 0
  br i1 %133, label %134, label %163

134:                                              ; preds = %130
  %135 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 4, i32 4
  %136 = load i32, i32* %135, align 4
  %137 = icmp eq i32 %136, 13
  br i1 %137, label %138, label %163

138:                                              ; preds = %134
  br i1 %236, label %141, label %139

139:                                              ; preds = %138
  %140 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10
  call void @_ZN3jxl8N_SCALAR9SRGBToXYBERKNS_6Image3IfEEPKfPNS_10ThreadPoolEPS2_(%"class.jxl::Image3"* dereferenceable(96) %140, float* nonnull %215, %"class.jxl::ThreadPool"* %1, %"class.jxl::Image3"* %2)
  br label %211

141:                                              ; preds = %138
  %142 = bitcast %"class.jxl::Image3"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %142) #13
  %143 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %7, i64 0, i32 0, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %143, i64 %65, i64 %64, i64 4) #13
  %144 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %7, i64 0, i32 0, i64 1, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %144, i64 %65, i64 %64, i64 4) #13
  %145 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %7, i64 0, i32 0, i64 2, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %145, i64 %65, i64 %64, i64 4) #13
  call void @_ZN3jxl11ImageBundle12SetFromImageEONS_6Image3IfEERKNS_13ColorEncodingE(%"class.jxl::ImageBundle"* nonnull %3, %"class.jxl::Image3"* nonnull dereferenceable(96) %7, %"struct.jxl::ColorEncoding"* dereferenceable(152) %240) #13
  %146 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %7, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %147 = load i8*, i8** %146, align 8
  store i8* null, i8** %146, align 8
  %148 = icmp eq i8* %147, null
  br i1 %148, label %150, label %149

149:                                              ; preds = %141
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %147) #13
  br label %150

150:                                              ; preds = %149, %141
  %151 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %7, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %152 = load i8*, i8** %151, align 8
  store i8* null, i8** %151, align 8
  %153 = icmp eq i8* %152, null
  br i1 %153, label %155, label %154

154:                                              ; preds = %150
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %152) #13
  br label %155

155:                                              ; preds = %154, %150
  %156 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %7, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %157 = load i8*, i8** %156, align 8
  store i8* null, i8** %156, align 8
  %158 = icmp eq i8* %157, null
  br i1 %158, label %160, label %159

159:                                              ; preds = %155
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %157) #13
  br label %160

160:                                              ; preds = %155, %159
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %142) #13
  %161 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10
  %162 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %3, i64 0, i32 10
  call void @_ZN3jxl8N_SCALAR18SRGBToXYBAndLinearERKNS_6Image3IfEEPKfPNS_10ThreadPoolEPS2_S9_(%"class.jxl::Image3"* dereferenceable(96) %161, float* nonnull %215, %"class.jxl::ThreadPool"* %1, %"class.jxl::Image3"* %2, %"class.jxl::Image3"* %162)
  br label %211

163:                                              ; preds = %115, %122, %126, %130, %134
  %164 = bitcast %"class.jxl::ImageBundle"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 368, i8* nonnull %164) #13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %164, i8 -86, i64 368, i1 false)
  %165 = bitcast %"class.jxl::ImageBundle"* %8 to i64*
  store i64 0, i64* %165, align 8
  %166 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %8, i64 0, i32 1
  store i32 1, i32* %166, align 8
  %167 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %8, i64 0, i32 3
  call void @_ZN3jxl22YCbCrChromaSubsamplingC1Ev(%"struct.jxl::YCbCrChromaSubsampling"* %167) #13
  %168 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %8, i64 0, i32 4, i32 0
  %169 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %8, i64 0, i32 8
  %170 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %8, i64 0, i32 11
  %171 = bitcast i32* %168 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %171, i8 0, i64 14, i1 false) #13
  %172 = bitcast %"class.std::__1::basic_string"* %169 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %172, i8 0, i64 128, i1 false) #13
  call void @_ZN3jxl13ColorEncodingC1Ev(%"struct.jxl::ColorEncoding"* %170) #13
  %173 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %8, i64 0, i32 12
  %174 = bitcast %"class.std::__1::vector.87"* %173 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %174, i8 0, i64 32, i1 false) #13
  br i1 %236, label %194, label %175

175:                                              ; preds = %163
  %176 = bitcast %"class.jxl::ImageBundle"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 368, i8* nonnull %176) #13
  %177 = bitcast %"struct.jxl::ImageMetadata"** %102 to i64*
  %178 = load i64, i64* %177, align 8
  %179 = bitcast %"class.jxl::ImageBundle"* %9 to i64*
  store i64 0, i64* %179, align 8
  %180 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %9, i64 0, i32 1
  store i32 1, i32* %180, align 8
  %181 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %9, i64 0, i32 3
  call void @_ZN3jxl22YCbCrChromaSubsamplingC1Ev(%"struct.jxl::YCbCrChromaSubsampling"* %181) #13
  %182 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %9, i64 0, i32 4, i32 0
  %183 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %9, i64 0, i32 8
  %184 = bitcast %"class.std::__1::basic_string"* %183 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %184, i8 0, i64 24, i1 false) #13
  %185 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %9, i64 0, i32 9
  %186 = bitcast i32* %182 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %186, i8 0, i64 14, i1 false) #13
  %187 = bitcast %"struct.jxl::ImageMetadata"** %185 to i64*
  store i64 %178, i64* %187, align 8
  %188 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %9, i64 0, i32 10
  %189 = bitcast %"class.jxl::Image3"* %188 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %189, i8 0, i64 96, i1 false) #13
  %190 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %9, i64 0, i32 11
  call void @_ZN3jxl13ColorEncodingC1Ev(%"struct.jxl::ColorEncoding"* %190) #13
  %191 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %9, i64 0, i32 12
  %192 = bitcast %"class.std::__1::vector.87"* %191 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %192, i8 0, i64 32, i1 false) #13
  %193 = call dereferenceable(368) %"class.jxl::ImageBundle"* @_ZN3jxl11ImageBundleaSEOS0_(%"class.jxl::ImageBundle"* nonnull %8, %"class.jxl::ImageBundle"* nonnull dereferenceable(368) %9) #13
  call void @_ZN3jxl11ImageBundleD2Ev(%"class.jxl::ImageBundle"* nonnull %9) #13
  call void @llvm.lifetime.end.p0i8(i64 368, i8* nonnull %176) #13
  br label %194

194:                                              ; preds = %163, %175
  %195 = phi %"class.jxl::ImageBundle"* [ %8, %175 ], [ %3, %163 ]
  %196 = bitcast %"class.jxl::ImageBundle"** %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %196) #13
  store %"class.jxl::ImageBundle"* inttoptr (i64 -6148914691236517206 to %"class.jxl::ImageBundle"*), %"class.jxl::ImageBundle"** %10, align 8
  %197 = call i32 @_ZN3jxl17TransformIfNeededERKNS_11ImageBundleERKNS_13ColorEncodingEPNS_10ThreadPoolEPS0_PPS1_(%"class.jxl::ImageBundle"* dereferenceable(368) %0, %"struct.jxl::ColorEncoding"* dereferenceable(152) %240, %"class.jxl::ThreadPool"* %1, %"class.jxl::ImageBundle"* nonnull %195, %"class.jxl::ImageBundle"** nonnull %10) #13
  %198 = icmp eq i32 %197, 0
  br i1 %198, label %202, label %199

199:                                              ; preds = %194
  %200 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.1, i64 0, i64 0), i32 335, i8* getelementptr inbounds ([69 x i8], [69 x i8]* @.str.9, i64 0, i64 0)) #13
  %201 = call zeroext i1 @_ZN3jxl5AbortEv() #21
  unreachable

202:                                              ; preds = %194
  %203 = load %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"** %10, align 8
  %204 = icmp eq %"class.jxl::ImageBundle"* %203, %195
  br i1 %204, label %208, label %205

205:                                              ; preds = %202
  %206 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.1, i64 0, i64 0), i32 337, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.10, i64 0, i64 0)) #13
  %207 = call zeroext i1 @_ZN3jxl5AbortEv() #21
  unreachable

208:                                              ; preds = %202
  %209 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %195, i64 0, i32 10
  call void @_ZN3jxl8N_SCALAR15LinearSRGBToXYBERKNS_6Image3IfEEPKfPNS_10ThreadPoolEPS2_(%"class.jxl::Image3"* dereferenceable(96) %209, float* nonnull %215, %"class.jxl::ThreadPool"* %1, %"class.jxl::Image3"* %2)
  %210 = select i1 %236, %"class.jxl::ImageBundle"* %3, %"class.jxl::ImageBundle"* %0
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %196) #13
  call void @_ZN3jxl11ImageBundleD2Ev(%"class.jxl::ImageBundle"* nonnull %8) #13
  call void @llvm.lifetime.end.p0i8(i64 368, i8* nonnull %164) #13
  br label %211

211:                                              ; preds = %110, %208, %160, %139, %112
  %212 = phi %"class.jxl::ImageBundle"* [ %3, %112 ], [ %3, %160 ], [ %0, %139 ], [ %210, %208 ], [ %0, %110 ]
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %101) #13
  ret %"class.jxl::ImageBundle"* %212

213:                                              ; preds = %100
  %214 = fdiv float %105, 2.550000e+02
  %215 = getelementptr inbounds [12 x float], [12 x float]* %5, i64 0, i64 0
  %216 = insertelement <4 x float> undef, float %214, i32 0
  %217 = shufflevector <4 x float> %216, <4 x float> undef, <4 x i32> zeroinitializer
  %218 = fmul <4 x float> %217, <float 0x3FD3333340000000, float 0x3FE3E76C80000000, float 0x3FB3F7CEE0000000, float 0x3FCD70A3E0000000>
  %219 = bitcast [12 x float]* %5 to <4 x float>*
  store <4 x float> %218, <4 x float>* %219, align 16, !alias.scope !75
  %220 = fmul float %214, 0x3FE624DD20000000
  %221 = getelementptr inbounds [12 x float], [12 x float]* %5, i64 0, i64 4
  store float %220, float* %221, align 16, !alias.scope !75
  %222 = getelementptr inbounds [12 x float], [12 x float]* %5, i64 0, i64 5
  %223 = extractelement <4 x float> %218, i32 2
  store float %223, float* %222, align 4, !alias.scope !75
  %224 = getelementptr inbounds [12 x float], [12 x float]* %5, i64 0, i64 6
  %225 = tail call float @cbrtf(float 0x3F6F12A6C0000000) #18
  %226 = insertelement <2 x float> undef, float %214, i32 0
  %227 = insertelement <2 x float> %226, float %225, i32 1
  %228 = shufflevector <2 x float> %227, <2 x float> undef, <4 x i32> <i32 0, i32 0, i32 0, i32 1>
  %229 = fmul <4 x float> %228, <float 0x3FCF287980000000, float 0x3FCA35D1E0000000, float 0x3FE1A86D20000000, float undef>
  %230 = fsub <4 x float> <float undef, float undef, float undef, float -0.000000e+00>, %228
  %231 = shufflevector <4 x float> %229, <4 x float> %230, <4 x i32> <i32 0, i32 1, i32 2, i32 7>
  %232 = bitcast float* %224 to <4 x float>*
  store <4 x float> %231, <4 x float>* %232, align 8, !alias.scope !78
  %233 = getelementptr inbounds [12 x float], [12 x float]* %5, i64 0, i64 10
  %234 = extractelement <4 x float> %230, i32 3
  store float %234, float* %233, align 8, !alias.scope !81
  %235 = getelementptr inbounds [12 x float], [12 x float]* %5, i64 0, i64 11
  store float %234, float* %235, align 4, !alias.scope !81
  %236 = icmp ne %"class.jxl::ImageBundle"* %3, null
  %237 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 9
  %238 = load i32, i32* %237, align 8
  %239 = icmp eq i32 %238, 1
  %240 = tail call dereferenceable(152) %"struct.jxl::ColorEncoding"* @_ZN3jxl13ColorEncoding10LinearSRGBEb(i1 zeroext %239) #13
  %241 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11
  %242 = tail call zeroext i1 @_ZNK3jxl13ColorEncoding17SameColorEncodingERKS0_(%"struct.jxl::ColorEncoding"* %240, %"struct.jxl::ColorEncoding"* dereferenceable(152) %241)
  br i1 %242, label %110, label %115
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl8N_SCALAR10RgbToYcbcrERKNS_5PlaneIfEES4_S4_PS2_S5_S5_PNS_10ThreadPoolE(%"class.jxl::Plane"* dereferenceable(32), %"class.jxl::Plane"* dereferenceable(32), %"class.jxl::Plane"* dereferenceable(32), %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::ThreadPool"* readonly) #6 {
  %8 = alloca %"class.jxl::ThreadPool::RunCallState.162", align 8
  %9 = alloca %"class.jxl::ThreadPool::RunCallState.162", align 8
  %10 = alloca double, align 8
  %11 = alloca %"class.jxl::ThreadPool", align 8
  %12 = alloca %"class.jxl::Plane"*, align 8
  %13 = alloca %"class.jxl::Plane"*, align 8
  %14 = alloca %"class.jxl::Plane"*, align 8
  %15 = alloca i64, align 8
  %16 = alloca i64, align 8
  %17 = alloca i64, align 8
  %18 = alloca %"struct.hwy::N_SCALAR::Vec1", align 4
  %19 = alloca %"struct.hwy::N_SCALAR::Vec1", align 4
  %20 = alloca %"struct.hwy::N_SCALAR::Vec1", align 4
  %21 = alloca %"struct.hwy::N_SCALAR::Vec1", align 4
  %22 = alloca %"struct.hwy::N_SCALAR::Vec1", align 4
  %23 = alloca %"struct.hwy::N_SCALAR::Vec1", align 4
  %24 = alloca %"struct.hwy::N_SCALAR::Vec1", align 4
  %25 = alloca %"struct.hwy::N_SCALAR::Vec1", align 4
  %26 = alloca i64, align 8
  %27 = alloca %class.anon.106, align 8
  store %"class.jxl::Plane"* %3, %"class.jxl::Plane"** %12, align 8
  store %"class.jxl::Plane"* %4, %"class.jxl::Plane"** %13, align 8
  store %"class.jxl::Plane"* %5, %"class.jxl::Plane"** %14, align 8
  %28 = bitcast i64* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %28) #13
  store i64 1, i64* %15, align 8
  %29 = bitcast i64* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %29) #13
  %30 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %0, i64 0, i32 0, i32 0
  %31 = load i32, i32* %30, align 8
  %32 = zext i32 %31 to i64
  store i64 %32, i64* %16, align 8
  %33 = bitcast i64* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %33) #13
  %34 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %0, i64 0, i32 0, i32 1
  %35 = load i32, i32* %34, align 4
  %36 = zext i32 %35 to i64
  store i64 %36, i64* %17, align 8
  %37 = icmp eq i32 %31, 0
  %38 = icmp eq i32 %35, 0
  %39 = or i1 %37, %38
  br i1 %39, label %112, label %40

40:                                               ; preds = %7
  %41 = bitcast %"struct.hwy::N_SCALAR::Vec1"* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %41) #13
  %42 = getelementptr inbounds %"struct.hwy::N_SCALAR::Vec1", %"struct.hwy::N_SCALAR::Vec1"* %18, i64 0, i32 0
  store float 0x3FE0101020000000, float* %42, align 4
  %43 = bitcast %"struct.hwy::N_SCALAR::Vec1"* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %43) #13
  %44 = getelementptr inbounds %"struct.hwy::N_SCALAR::Vec1", %"struct.hwy::N_SCALAR::Vec1"* %19, i64 0, i32 0
  store float 0x3FD322D0E0000000, float* %44, align 4
  %45 = bitcast %"struct.hwy::N_SCALAR::Vec1"* %20 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %45) #13
  %46 = getelementptr inbounds %"struct.hwy::N_SCALAR::Vec1", %"struct.hwy::N_SCALAR::Vec1"* %20, i64 0, i32 0
  store float 0x3FE2C8B440000000, float* %46, align 4
  %47 = bitcast %"struct.hwy::N_SCALAR::Vec1"* %21 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %47) #13
  %48 = getelementptr inbounds %"struct.hwy::N_SCALAR::Vec1", %"struct.hwy::N_SCALAR::Vec1"* %21, i64 0, i32 0
  store float 0x3FBD2F1AA0000000, float* %48, align 4
  %49 = bitcast %"struct.hwy::N_SCALAR::Vec1"* %22 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %49) #13
  %50 = getelementptr inbounds %"struct.hwy::N_SCALAR::Vec1", %"struct.hwy::N_SCALAR::Vec1"* %22, i64 0, i32 0
  store float 1.000000e+00, float* %50, align 4
  %51 = bitcast %"struct.hwy::N_SCALAR::Vec1"* %23 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %51) #13
  %52 = getelementptr inbounds %"struct.hwy::N_SCALAR::Vec1", %"struct.hwy::N_SCALAR::Vec1"* %23, i64 0, i32 0
  store float 1.000000e+00, float* %52, align 4
  %53 = bitcast %"struct.hwy::N_SCALAR::Vec1"* %24 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %53) #13
  %54 = getelementptr inbounds %"struct.hwy::N_SCALAR::Vec1", %"struct.hwy::N_SCALAR::Vec1"* %24, i64 0, i32 0
  store float 0x3FE6D314E0000000, float* %54, align 4
  %55 = bitcast %"struct.hwy::N_SCALAR::Vec1"* %25 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %55) #13
  %56 = getelementptr inbounds %"struct.hwy::N_SCALAR::Vec1", %"struct.hwy::N_SCALAR::Vec1"* %25, i64 0, i32 0
  store float 0x3FE20F0640000000, float* %56, align 4
  %57 = bitcast i64* %26 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %57) #13
  %58 = add nuw nsw i64 %32, 65535
  %59 = udiv i64 %58, %32
  store i64 %59, i64* %26, align 8
  %60 = add nsw i64 %36, -1
  %61 = add nuw nsw i64 %60, %59
  %62 = udiv i64 %61, %59
  %63 = bitcast %class.anon.106* %27 to i8*
  call void @llvm.lifetime.start.p0i8(i64 152, i8* nonnull %63) #13
  %64 = getelementptr inbounds %class.anon.106, %class.anon.106* %27, i64 0, i32 0
  store i64* %26, i64** %64, align 8
  %65 = getelementptr inbounds %class.anon.106, %class.anon.106* %27, i64 0, i32 1
  store i64* %17, i64** %65, align 8
  %66 = getelementptr inbounds %class.anon.106, %class.anon.106* %27, i64 0, i32 2
  store %"class.jxl::Plane"* %0, %"class.jxl::Plane"** %66, align 8
  %67 = getelementptr inbounds %class.anon.106, %class.anon.106* %27, i64 0, i32 3
  store %"class.jxl::Plane"* %1, %"class.jxl::Plane"** %67, align 8
  %68 = getelementptr inbounds %class.anon.106, %class.anon.106* %27, i64 0, i32 4
  store %"class.jxl::Plane"* %2, %"class.jxl::Plane"** %68, align 8
  %69 = getelementptr inbounds %class.anon.106, %class.anon.106* %27, i64 0, i32 5
  store %"class.jxl::Plane"** %12, %"class.jxl::Plane"*** %69, align 8
  %70 = getelementptr inbounds %class.anon.106, %class.anon.106* %27, i64 0, i32 6
  store %"class.jxl::Plane"** %13, %"class.jxl::Plane"*** %70, align 8
  %71 = getelementptr inbounds %class.anon.106, %class.anon.106* %27, i64 0, i32 7
  store %"class.jxl::Plane"** %14, %"class.jxl::Plane"*** %71, align 8
  %72 = getelementptr inbounds %class.anon.106, %class.anon.106* %27, i64 0, i32 8
  store i64* %16, i64** %72, align 8
  %73 = getelementptr inbounds %class.anon.106, %class.anon.106* %27, i64 0, i32 9
  store i64* %15, i64** %73, align 8
  %74 = getelementptr inbounds %class.anon.106, %class.anon.106* %27, i64 0, i32 10
  store %"struct.hwy::N_SCALAR::Simd"* @_ZZN3jxl8N_SCALAR10RgbToYcbcrERKNS_5PlaneIfEES4_S4_PS2_S5_S5_PNS_10ThreadPoolEE2df, %"struct.hwy::N_SCALAR::Simd"** %74, align 8
  %75 = getelementptr inbounds %class.anon.106, %class.anon.106* %27, i64 0, i32 11
  store %"struct.hwy::N_SCALAR::Vec1"* %19, %"struct.hwy::N_SCALAR::Vec1"** %75, align 8
  %76 = getelementptr inbounds %class.anon.106, %class.anon.106* %27, i64 0, i32 12
  store %"struct.hwy::N_SCALAR::Vec1"* %22, %"struct.hwy::N_SCALAR::Vec1"** %76, align 8
  %77 = getelementptr inbounds %class.anon.106, %class.anon.106* %27, i64 0, i32 13
  store %"struct.hwy::N_SCALAR::Vec1"* %20, %"struct.hwy::N_SCALAR::Vec1"** %77, align 8
  %78 = getelementptr inbounds %class.anon.106, %class.anon.106* %27, i64 0, i32 14
  store %"struct.hwy::N_SCALAR::Vec1"* %21, %"struct.hwy::N_SCALAR::Vec1"** %78, align 8
  %79 = getelementptr inbounds %class.anon.106, %class.anon.106* %27, i64 0, i32 15
  store %"struct.hwy::N_SCALAR::Vec1"* %23, %"struct.hwy::N_SCALAR::Vec1"** %79, align 8
  %80 = getelementptr inbounds %class.anon.106, %class.anon.106* %27, i64 0, i32 16
  store %"struct.hwy::N_SCALAR::Vec1"* %18, %"struct.hwy::N_SCALAR::Vec1"** %80, align 8
  %81 = getelementptr inbounds %class.anon.106, %class.anon.106* %27, i64 0, i32 17
  store %"struct.hwy::N_SCALAR::Vec1"* %25, %"struct.hwy::N_SCALAR::Vec1"** %81, align 8
  %82 = getelementptr inbounds %class.anon.106, %class.anon.106* %27, i64 0, i32 18
  store %"struct.hwy::N_SCALAR::Vec1"* %24, %"struct.hwy::N_SCALAR::Vec1"** %82, align 8
  %83 = trunc i64 %62 to i32
  %84 = bitcast double* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %84) #13
  store double 0xFFFFFFFFFFFFFFFF, double* %10, align 8
  call void @_ZN3jxl13TraceRunBeginEPKcPd(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.11, i64 0, i64 0), double* nonnull %10) #13
  %85 = icmp eq %"class.jxl::ThreadPool"* %6, null
  br i1 %85, label %86, label %97

86:                                               ; preds = %40
  %87 = bitcast %"class.jxl::ThreadPool"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %87) #13
  %88 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %11, i64 0, i32 0
  %89 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %11, i64 0, i32 1
  store i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)* @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %88, align 8
  %90 = bitcast i8** %89 to %"class.jxl::ThreadPool"**
  store %"class.jxl::ThreadPool"* %11, %"class.jxl::ThreadPool"** %90, align 8
  %91 = icmp eq i32 %83, 0
  br i1 %91, label %108, label %92

92:                                               ; preds = %86
  %93 = bitcast %"class.jxl::ThreadPool::RunCallState.162"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %93) #13
  %94 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.162", %"class.jxl::ThreadPool::RunCallState.162"* %8, i64 0, i32 0
  %95 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.162", %"class.jxl::ThreadPool::RunCallState.162"* %8, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %94, align 8
  store %class.anon.106* %27, %class.anon.106** %95, align 8
  %96 = call i32 @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj(i8* nonnull %87, i8* nonnull %93, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_8N_SCALAR10RgbToYcbcrERKNS_5PlaneIfEES8_S8_PS6_S9_S9_PS0_E4$_15E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_8N_SCALAR10RgbToYcbcrERKNS_5PlaneIfEES8_S8_PS6_S9_S9_PS0_E4$_15E12CallDataFuncEPvjm", i32 0, i32 %83) #13
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %93) #13
  br label %108

97:                                               ; preds = %40
  %98 = icmp eq i32 %83, 0
  br i1 %98, label %110, label %99

99:                                               ; preds = %97
  %100 = bitcast %"class.jxl::ThreadPool::RunCallState.162"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %100) #13
  %101 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.162", %"class.jxl::ThreadPool::RunCallState.162"* %9, i64 0, i32 0
  %102 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.162", %"class.jxl::ThreadPool::RunCallState.162"* %9, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %101, align 8
  store %class.anon.106* %27, %class.anon.106** %102, align 8
  %103 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %6, i64 0, i32 0
  %104 = load i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)*, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %103, align 8
  %105 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %6, i64 0, i32 1
  %106 = load i8*, i8** %105, align 8
  %107 = call i32 %104(i8* %106, i8* nonnull %100, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_8N_SCALAR10RgbToYcbcrERKNS_5PlaneIfEES8_S8_PS6_S9_S9_PS0_E4$_15E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_8N_SCALAR10RgbToYcbcrERKNS_5PlaneIfEES8_S8_PS6_S9_S9_PS0_E4$_15E12CallDataFuncEPvjm", i32 0, i32 %83) #13
  br label %108

108:                                              ; preds = %86, %92, %99
  %109 = phi i8* [ %100, %99 ], [ %87, %92 ], [ %87, %86 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %109) #13
  br label %110

110:                                              ; preds = %108, %97
  %111 = load double, double* %10, align 8
  call void @_ZN3jxl11TraceRunEndEPKcd(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.11, i64 0, i64 0), double %111) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %84) #13
  call void @llvm.lifetime.end.p0i8(i64 152, i8* nonnull %63) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %57) #13
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %55) #13
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %53) #13
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %51) #13
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %49) #13
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %47) #13
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %45) #13
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %43) #13
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %41) #13
  br label %112

112:                                              ; preds = %7, %110
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %33) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %29) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %28) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.jxl::ImageBundle"* @_ZN3jxl5ToXYBERKNS_11ImageBundleEPNS_10ThreadPoolEPNS_6Image3IfEEPS0_(%"class.jxl::ImageBundle"* dereferenceable(368), %"class.jxl::ThreadPool"*, %"class.jxl::Image3"* noalias, %"class.jxl::ImageBundle"* noalias) local_unnamed_addr #6 {
  %5 = load atomic i32, i32* getelementptr inbounds (%"struct.hwy::ChosenTarget", %"struct.hwy::ChosenTarget"* @_ZN3hwy13chosen_targetE, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) seq_cst, align 4
  %6 = and i32 %5, 2225
  %7 = tail call i32 @llvm.cttz.i32(i32 %6, i1 true) #13, !range !82
  %8 = zext i32 %7 to i64
  %9 = getelementptr inbounds [12 x %"class.jxl::ImageBundle"* (%"class.jxl::ImageBundle"*, %"class.jxl::ThreadPool"*, %"class.jxl::Image3"*, %"class.jxl::ImageBundle"*)*], [12 x %"class.jxl::ImageBundle"* (%"class.jxl::ImageBundle"*, %"class.jxl::ThreadPool"*, %"class.jxl::Image3"*, %"class.jxl::ImageBundle"*)*]* @_ZN3jxlL25ToXYBHighwayDispatchTableE, i64 0, i64 %8
  %10 = load %"class.jxl::ImageBundle"* (%"class.jxl::ImageBundle"*, %"class.jxl::ThreadPool"*, %"class.jxl::Image3"*, %"class.jxl::ImageBundle"*)*, %"class.jxl::ImageBundle"* (%"class.jxl::ImageBundle"*, %"class.jxl::ThreadPool"*, %"class.jxl::Image3"*, %"class.jxl::ImageBundle"*)** %9, align 8
  %11 = tail call %"class.jxl::ImageBundle"* %10(%"class.jxl::ImageBundle"* dereferenceable(368) %0, %"class.jxl::ThreadPool"* %1, %"class.jxl::Image3"* %2, %"class.jxl::ImageBundle"* %3) #13
  ret %"class.jxl::ImageBundle"* %11
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl10RgbToYcbcrERKNS_5PlaneIfEES3_S3_PS1_S4_S4_PNS_10ThreadPoolE(%"class.jxl::Plane"* dereferenceable(32), %"class.jxl::Plane"* dereferenceable(32), %"class.jxl::Plane"* dereferenceable(32), %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::ThreadPool"*) local_unnamed_addr #6 {
  %8 = load atomic i32, i32* getelementptr inbounds (%"struct.hwy::ChosenTarget", %"struct.hwy::ChosenTarget"* @_ZN3hwy13chosen_targetE, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) seq_cst, align 4
  %9 = and i32 %8, 2225
  %10 = tail call i32 @llvm.cttz.i32(i32 %9, i1 true) #13, !range !82
  %11 = zext i32 %10 to i64
  %12 = getelementptr inbounds [12 x void (%"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::ThreadPool"*)*], [12 x void (%"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::ThreadPool"*)*]* @_ZN3jxlL30RgbToYcbcrHighwayDispatchTableE, i64 0, i64 %11
  %13 = load void (%"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::ThreadPool"*)*, void (%"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::ThreadPool"*)** %12, align 8
  tail call void %13(%"class.jxl::Plane"* dereferenceable(32) %0, %"class.jxl::Plane"* dereferenceable(32) %1, %"class.jxl::Plane"* dereferenceable(32) %2, %"class.jxl::Plane"* %3, %"class.jxl::Plane"* %4, %"class.jxl::Plane"* %5, %"class.jxl::ThreadPool"* %6) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl12TestCubeRootEv() local_unnamed_addr #6 {
  %1 = load atomic i32, i32* getelementptr inbounds (%"struct.hwy::ChosenTarget", %"struct.hwy::ChosenTarget"* @_ZN3hwy13chosen_targetE, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) seq_cst, align 4
  %2 = and i32 %1, 2225
  %3 = tail call i32 @llvm.cttz.i32(i32 %2, i1 true) #13, !range !82
  %4 = zext i32 %3 to i64
  %5 = getelementptr inbounds [12 x void ()*], [12 x void ()*]* @_ZN3jxlL32TestCubeRootHighwayDispatchTableE, i64 0, i64 %4
  %6 = load void ()*, void ()** %5, align 8
  tail call void %6() #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl18OpsinDynamicsImageERKNS_6Image3IhEE(%"class.jxl::Image3"* noalias sret, %"class.jxl::Image3.108"* dereferenceable(96)) local_unnamed_addr #6 {
  %3 = alloca %"struct.jxl::ImageMetadata", align 8
  %4 = alloca %"class.jxl::ImageBundle", align 8
  %5 = alloca %"class.jxl::Image3", align 8
  %6 = alloca %"class.jxl::ImageBundle", align 8
  %7 = bitcast %"struct.jxl::ImageMetadata"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1600, i8* nonnull %7) #13
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %7, i8* align 8 bitcast (<{ %"class.jxl::Fields", i8, [7 x i8], %"struct.jxl::BitDepth", i8, i8, [6 x i8], { %"class.jxl::Fields", i8, [3 x i8], i32, i32, [4 x i8], { %"class.jxl::Fields", i32, i8, [3 x i8], i32, i32 }, i32, i8, i8, [2 x i8], %"class.jxl::PaddedBytes", i32, [4 x i8], %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy" }, i32, i8, i8, i8, i8, { %"class.jxl::Fields", i8, [3 x i8], i32, i32, i32, i32, i32 }, %"struct.jxl::ToneMapping", i32, [4 x i8], %"class.std::__1::vector.80", %"struct.jxl::CustomTransformData", { %"class.jxl::Fields", i8, [3 x i8], i32, i32, i32, i32, i32 }, %"struct.jxl::AnimationHeader", i64, i8, [7 x i8] }>* @__const._ZN3jxl18OpsinDynamicsImageERKNS_6Image3IhEE.metadata to i8*), i64 1600, i1 false)
  call void @_ZN3jxl13ImageMetadataC1Ev(%"struct.jxl::ImageMetadata"* nonnull %3) #13
  %8 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %3, i64 0, i32 3, i32 3
  store i32 8, i32* %8, align 4
  %9 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %3, i64 0, i32 3, i32 4
  store i32 0, i32* %9, align 8
  %10 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %3, i64 0, i32 3, i32 1
  store i8 0, i8* %10, align 8
  %11 = call dereferenceable(152) %"struct.jxl::ColorEncoding"* @_ZN3jxl13ColorEncoding4SRGBEb(i1 zeroext false) #13
  %12 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %3, i64 0, i32 7
  %13 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %3, i64 0, i32 7, i32 1
  %14 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %11, i64 0, i32 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %13, i8* align 8 %14, i64 12, i1 false) #13
  %15 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %3, i64 0, i32 7, i32 4, i32 1
  %16 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %11, i64 0, i32 4, i32 1
  %17 = bitcast i32* %15 to i8*
  %18 = bitcast i32* %16 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %17, i8* align 8 %18, i64 16, i1 false) #13
  %19 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %3, i64 0, i32 7, i32 5
  %20 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %11, i64 0, i32 5
  %21 = bitcast i32* %19 to i8*
  %22 = bitcast i32* %20 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %21, i8* align 8 %22, i64 6, i1 false) #13
  %23 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %3, i64 0, i32 7, i32 8
  %24 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %11, i64 0, i32 8, i32 0
  %25 = load i64, i64* %24, align 8
  %26 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %3, i64 0, i32 7, i32 8, i32 1
  %27 = load i64, i64* %26, align 8
  %28 = icmp ult i64 %27, %25
  br i1 %28, label %29, label %30

29:                                               ; preds = %2
  call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* %23, i64 %25) #13
  br label %30

30:                                               ; preds = %29, %2
  %31 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %3, i64 0, i32 7, i32 8, i32 2, i32 0, i32 0, i32 0
  %32 = load i8*, i8** %31, align 8
  %33 = icmp eq i8* %32, null
  %34 = select i1 %33, i64 0, i64 %25
  %35 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %23, i64 0, i32 0
  store i64 %34, i64* %35, align 8
  br i1 %33, label %39, label %36

36:                                               ; preds = %30
  %37 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %11, i64 0, i32 8, i32 2, i32 0, i32 0, i32 0
  %38 = load i8*, i8** %37, align 8
  call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 1 %32, i8* align 1 %38, i64 %34, i1 false) #13
  br label %39

39:                                               ; preds = %30, %36
  %40 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %11, i64 0, i32 9
  %41 = load i32, i32* %40, align 8
  %42 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %3, i64 0, i32 7, i32 9
  store i32 %41, i32* %42, align 8
  %43 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %3, i64 0, i32 7, i32 10, i32 1
  %44 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %11, i64 0, i32 10, i32 1
  %45 = bitcast i32* %44 to i64*
  %46 = bitcast i32* %43 to i64*
  %47 = load i64, i64* %45, align 8
  store i64 %47, i64* %46, align 8
  %48 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %3, i64 0, i32 7, i32 11, i32 1
  %49 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %11, i64 0, i32 11, i32 1
  %50 = bitcast i32* %49 to i64*
  %51 = bitcast i32* %48 to i64*
  %52 = load i64, i64* %50, align 8
  store i64 %52, i64* %51, align 8
  %53 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %3, i64 0, i32 7, i32 12, i32 1
  %54 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %11, i64 0, i32 12, i32 1
  %55 = bitcast i32* %54 to i64*
  %56 = bitcast i32* %53 to i64*
  %57 = load i64, i64* %55, align 8
  store i64 %57, i64* %56, align 8
  %58 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %3, i64 0, i32 7, i32 13, i32 1
  %59 = getelementptr inbounds %"struct.jxl::ColorEncoding", %"struct.jxl::ColorEncoding"* %11, i64 0, i32 13, i32 1
  %60 = bitcast i32* %59 to i64*
  %61 = bitcast i32* %58 to i64*
  %62 = load i64, i64* %60, align 8
  store i64 %62, i64* %61, align 8
  %63 = bitcast %"class.jxl::ImageBundle"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 368, i8* nonnull %63) #13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %63, i8 -86, i64 368, i1 false)
  %64 = bitcast %"class.jxl::ImageBundle"* %4 to i64*
  store i64 0, i64* %64, align 8
  %65 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %4, i64 0, i32 1
  store i32 1, i32* %65, align 8
  %66 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %4, i64 0, i32 3
  call void @_ZN3jxl22YCbCrChromaSubsamplingC1Ev(%"struct.jxl::YCbCrChromaSubsampling"* %66) #13
  %67 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %4, i64 0, i32 4, i32 0
  %68 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %4, i64 0, i32 8
  %69 = bitcast %"class.std::__1::basic_string"* %68 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %69, i8 0, i64 24, i1 false) #13
  %70 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %4, i64 0, i32 9
  %71 = bitcast i32* %67 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %71, i8 0, i64 14, i1 false) #13
  store %"struct.jxl::ImageMetadata"* %3, %"struct.jxl::ImageMetadata"** %70, align 8
  %72 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %4, i64 0, i32 10
  %73 = bitcast %"class.jxl::Image3"* %72 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %73, i8 0, i64 96, i1 false) #13
  %74 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %4, i64 0, i32 11
  call void @_ZN3jxl13ColorEncodingC1Ev(%"struct.jxl::ColorEncoding"* %74) #13
  %75 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %4, i64 0, i32 12
  %76 = bitcast %"class.std::__1::vector.87"* %75 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %76, i8 0, i64 32, i1 false) #13
  %77 = bitcast %"class.jxl::Image3"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %77) #13
  call void @_ZN3jxl14ConvertToFloatIhEENS_6Image3IfEERKNS1_IT_EE(%"class.jxl::Image3"* nonnull sret %5, %"class.jxl::Image3.108"* dereferenceable(96) %1)
  call void @_ZN3jxl11ImageBundle12SetFromImageEONS_6Image3IfEERKNS_13ColorEncodingE(%"class.jxl::ImageBundle"* nonnull %4, %"class.jxl::Image3"* nonnull dereferenceable(96) %5, %"struct.jxl::ColorEncoding"* dereferenceable(152) %12) #13
  %78 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %79 = load i8*, i8** %78, align 8
  store i8* null, i8** %78, align 8
  %80 = icmp eq i8* %79, null
  br i1 %80, label %82, label %81

81:                                               ; preds = %39
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %79) #13
  br label %82

82:                                               ; preds = %81, %39
  %83 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %84 = load i8*, i8** %83, align 8
  store i8* null, i8** %83, align 8
  %85 = icmp eq i8* %84, null
  br i1 %85, label %87, label %86

86:                                               ; preds = %82
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %84) #13
  br label %87

87:                                               ; preds = %86, %82
  %88 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %89 = load i8*, i8** %88, align 8
  store i8* null, i8** %88, align 8
  %90 = icmp eq i8* %89, null
  br i1 %90, label %92, label %91

91:                                               ; preds = %87
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %89) #13
  br label %92

92:                                               ; preds = %87, %91
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %77) #13
  %93 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %4, i64 0, i32 11, i32 9
  %94 = load i32, i32* %93, align 8
  %95 = icmp eq i32 %94, 1
  %96 = call dereferenceable(152) %"struct.jxl::ColorEncoding"* @_ZN3jxl13ColorEncoding10LinearSRGBEb(i1 zeroext %95) #13
  %97 = call i32 @_ZN3jxl11ImageBundle11TransformToERKNS_13ColorEncodingEPNS_10ThreadPoolE(%"class.jxl::ImageBundle"* nonnull %4, %"struct.jxl::ColorEncoding"* dereferenceable(152) %96, %"class.jxl::ThreadPool"* null) #13
  %98 = icmp eq i32 %97, 0
  br i1 %98, label %102, label %99

99:                                               ; preds = %92
  %100 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.1, i64 0, i64 0), i32 436, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.12, i64 0, i64 0)) #13
  %101 = call zeroext i1 @_ZN3jxl5AbortEv() #21
  unreachable

102:                                              ; preds = %92
  %103 = bitcast %"class.jxl::Image3"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %103, i8 -86, i64 96, i1 false)
  %104 = getelementptr inbounds %"class.jxl::Image3.108", %"class.jxl::Image3.108"* %1, i64 0, i32 0, i64 0, i32 0, i32 0
  %105 = load i32, i32* %104, align 8
  %106 = zext i32 %105 to i64
  %107 = getelementptr inbounds %"class.jxl::Image3.108", %"class.jxl::Image3.108"* %1, i64 0, i32 0, i64 0, i32 0, i32 1
  %108 = load i32, i32* %107, align 4
  %109 = zext i32 %108 to i64
  %110 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %110, i64 %106, i64 %109, i64 4) #13
  %111 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 1, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %111, i64 %106, i64 %109, i64 4) #13
  %112 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 2, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %112, i64 %106, i64 %109, i64 4) #13
  %113 = bitcast %"class.jxl::ImageBundle"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 368, i8* nonnull %113) #13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %113, i8 -86, i64 368, i1 false)
  %114 = bitcast %"class.jxl::ImageBundle"* %6 to i64*
  store i64 0, i64* %114, align 8
  %115 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %6, i64 0, i32 1
  store i32 1, i32* %115, align 8
  %116 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %6, i64 0, i32 3
  call void @_ZN3jxl22YCbCrChromaSubsamplingC1Ev(%"struct.jxl::YCbCrChromaSubsampling"* %116) #13
  %117 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %6, i64 0, i32 4, i32 0
  %118 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %6, i64 0, i32 8
  %119 = bitcast %"class.std::__1::basic_string"* %118 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %119, i8 0, i64 24, i1 false) #13
  %120 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %6, i64 0, i32 9
  %121 = bitcast i32* %117 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %121, i8 0, i64 14, i1 false) #13
  store %"struct.jxl::ImageMetadata"* %3, %"struct.jxl::ImageMetadata"** %120, align 8
  %122 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %6, i64 0, i32 10
  %123 = bitcast %"class.jxl::Image3"* %122 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %123, i8 0, i64 96, i1 false) #13
  %124 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %6, i64 0, i32 11
  call void @_ZN3jxl13ColorEncodingC1Ev(%"struct.jxl::ColorEncoding"* %124) #13
  %125 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %6, i64 0, i32 12
  %126 = bitcast %"class.std::__1::vector.87"* %125 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %126, i8 0, i64 32, i1 false) #13
  %127 = load atomic i32, i32* getelementptr inbounds (%"struct.hwy::ChosenTarget", %"struct.hwy::ChosenTarget"* @_ZN3hwy13chosen_targetE, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) seq_cst, align 4, !noalias !83
  %128 = and i32 %127, 2225
  %129 = call i32 @llvm.cttz.i32(i32 %128, i1 true) #13, !range !82
  %130 = zext i32 %129 to i64
  %131 = getelementptr inbounds [12 x %"class.jxl::ImageBundle"* (%"class.jxl::ImageBundle"*, %"class.jxl::ThreadPool"*, %"class.jxl::Image3"*, %"class.jxl::ImageBundle"*)*], [12 x %"class.jxl::ImageBundle"* (%"class.jxl::ImageBundle"*, %"class.jxl::ThreadPool"*, %"class.jxl::Image3"*, %"class.jxl::ImageBundle"*)*]* @_ZN3jxlL25ToXYBHighwayDispatchTableE, i64 0, i64 %130
  %132 = load %"class.jxl::ImageBundle"* (%"class.jxl::ImageBundle"*, %"class.jxl::ThreadPool"*, %"class.jxl::Image3"*, %"class.jxl::ImageBundle"*)*, %"class.jxl::ImageBundle"* (%"class.jxl::ImageBundle"*, %"class.jxl::ThreadPool"*, %"class.jxl::Image3"*, %"class.jxl::ImageBundle"*)** %131, align 8, !noalias !83
  %133 = call %"class.jxl::ImageBundle"* %132(%"class.jxl::ImageBundle"* nonnull dereferenceable(368) %4, %"class.jxl::ThreadPool"* null, %"class.jxl::Image3"* %0, %"class.jxl::ImageBundle"* nonnull %6) #13
  call void @_ZN3jxl11ImageBundleD2Ev(%"class.jxl::ImageBundle"* nonnull %6) #13
  call void @llvm.lifetime.end.p0i8(i64 368, i8* nonnull %113) #13
  call void @_ZN3jxl11ImageBundleD2Ev(%"class.jxl::ImageBundle"* nonnull %4) #13
  call void @llvm.lifetime.end.p0i8(i64 368, i8* nonnull %63) #13
  %134 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %3, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl13ImageMetadataE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %134, align 8
  %135 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %3, i64 0, i32 17
  %136 = getelementptr inbounds %"class.std::__1::vector.80", %"class.std::__1::vector.80"* %135, i64 0, i32 0, i32 0
  %137 = load %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"** %136, align 8
  %138 = icmp eq %"struct.jxl::ExtraChannelInfo"* %137, null
  br i1 %138, label %156, label %139

139:                                              ; preds = %102
  %140 = bitcast %"struct.jxl::ExtraChannelInfo"* %137 to i8*
  %141 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %3, i64 0, i32 17, i32 0, i32 1
  %142 = load %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"** %141, align 8
  %143 = icmp eq %"struct.jxl::ExtraChannelInfo"* %142, %137
  br i1 %143, label %154, label %144

144:                                              ; preds = %139, %144
  %145 = phi %"struct.jxl::ExtraChannelInfo"* [ %146, %144 ], [ %142, %139 ]
  %146 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %145, i64 -1
  %147 = bitcast %"struct.jxl::ExtraChannelInfo"* %146 to void (%"struct.jxl::ExtraChannelInfo"*)***
  %148 = load void (%"struct.jxl::ExtraChannelInfo"*)**, void (%"struct.jxl::ExtraChannelInfo"*)*** %147, align 8
  %149 = load void (%"struct.jxl::ExtraChannelInfo"*)*, void (%"struct.jxl::ExtraChannelInfo"*)** %148, align 8
  call void %149(%"struct.jxl::ExtraChannelInfo"* %146) #13
  %150 = icmp eq %"struct.jxl::ExtraChannelInfo"* %146, %137
  br i1 %150, label %151, label %144

151:                                              ; preds = %144
  %152 = bitcast %"class.std::__1::vector.80"* %135 to i8**
  %153 = load i8*, i8** %152, align 8
  br label %154

154:                                              ; preds = %151, %139
  %155 = phi i8* [ %153, %151 ], [ %140, %139 ]
  store %"struct.jxl::ExtraChannelInfo"* %137, %"struct.jxl::ExtraChannelInfo"** %141, align 8
  call void @_ZdlPv(i8* %155) #22
  br label %156

156:                                              ; preds = %154, %102
  %157 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %3, i64 0, i32 7, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl13ColorEncodingE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %157, align 8
  %158 = load i8*, i8** %31, align 8
  store i8* null, i8** %31, align 8
  %159 = icmp eq i8* %158, null
  br i1 %159, label %161, label %160

160:                                              ; preds = %156
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %158) #13
  br label %161

161:                                              ; preds = %156, %160
  call void @llvm.lifetime.end.p0i8(i64 1600, i8* nonnull %7) #13
  ret void
}

declare void @_ZN3jxl13ImageMetadataC1Ev(%"struct.jxl::ImageMetadata"*) unnamed_addr #3

declare dereferenceable(152) %"struct.jxl::ColorEncoding"* @_ZN3jxl13ColorEncoding4SRGBEb(i1 zeroext) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl14ConvertToFloatIhEENS_6Image3IfEERKNS1_IT_EE(%"class.jxl::Image3"* noalias sret, %"class.jxl::Image3.108"* dereferenceable(96)) local_unnamed_addr #6 comdat {
  %3 = alloca %"class.jxl::Plane", align 8
  %4 = alloca %"class.jxl::Plane", align 8
  %5 = alloca %"class.jxl::Plane", align 8
  %6 = bitcast %"class.jxl::Plane"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %6) #13
  %7 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %3, i64 0, i32 0, i32 4
  %8 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %3, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %9 = getelementptr inbounds %"class.jxl::Image3.108", %"class.jxl::Image3.108"* %1, i64 0, i32 0, i64 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 -86, i64 32, i1 false) #13, !alias.scope !87
  %10 = load i32, i32* %9, align 8, !noalias !87
  %11 = zext i32 %10 to i64
  %12 = getelementptr inbounds %"class.jxl::Image3.108", %"class.jxl::Image3.108"* %1, i64 0, i32 0, i64 0, i32 0, i32 1
  %13 = load i32, i32* %12, align 4, !noalias !87
  %14 = zext i32 %13 to i64
  %15 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %3, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %15, i64 %11, i64 %14, i64 4) #13
  %16 = load i32, i32* %12, align 4, !noalias !87
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %61, label %18

18:                                               ; preds = %2
  %19 = getelementptr inbounds %"class.jxl::Image3.108", %"class.jxl::Image3.108"* %1, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %20 = getelementptr inbounds %"class.jxl::Image3.108", %"class.jxl::Image3.108"* %1, i64 0, i32 0, i64 0, i32 0, i32 4
  %21 = load i32, i32* %9, align 8, !noalias !87
  br label %22

22:                                               ; preds = %44, %18
  %23 = phi i32 [ %16, %18 ], [ %45, %44 ]
  %24 = phi i32 [ %21, %18 ], [ %46, %44 ]
  %25 = phi i64 [ 0, %18 ], [ %47, %44 ]
  %26 = load i8*, i8** %19, align 8, !noalias !87
  %27 = load i64, i64* %20, align 8, !noalias !87
  %28 = mul i64 %27, %25
  %29 = getelementptr inbounds i8, i8* %26, i64 %28
  %30 = ptrtoint i8* %29 to i64
  %31 = and i64 %30, 63
  %32 = icmp eq i64 %31, 0
  call void @llvm.assume(i1 %32) #13
  %33 = load i8*, i8** %8, align 8, !alias.scope !87
  %34 = load i64, i64* %7, align 8, !alias.scope !87
  %35 = mul i64 %34, %25
  %36 = getelementptr inbounds i8, i8* %33, i64 %35
  %37 = ptrtoint i8* %36 to i64
  %38 = and i64 %37, 63
  %39 = icmp eq i64 %38, 0
  call void @llvm.assume(i1 %39) #13
  %40 = bitcast i8* %36 to float*
  %41 = icmp eq i32 %24, 0
  br i1 %41, label %44, label %50

42:                                               ; preds = %50
  %43 = load i32, i32* %12, align 4, !noalias !87
  br label %44

44:                                               ; preds = %42, %22
  %45 = phi i32 [ %43, %42 ], [ %23, %22 ]
  %46 = phi i32 [ %58, %42 ], [ 0, %22 ]
  %47 = add nuw nsw i64 %25, 1
  %48 = zext i32 %45 to i64
  %49 = icmp ult i64 %47, %48
  br i1 %49, label %22, label %61

50:                                               ; preds = %22, %50
  %51 = phi i64 [ %57, %50 ], [ 0, %22 ]
  %52 = getelementptr inbounds i8, i8* %29, i64 %51
  %53 = load i8, i8* %52, align 1
  %54 = uitofp i8 %53 to float
  %55 = fmul float %54, 0x3F70101020000000
  %56 = getelementptr inbounds float, float* %40, i64 %51
  store float %55, float* %56, align 4
  %57 = add nuw nsw i64 %51, 1
  %58 = load i32, i32* %9, align 8, !noalias !87
  %59 = zext i32 %58 to i64
  %60 = icmp ult i64 %57, %59
  br i1 %60, label %50, label %42

61:                                               ; preds = %44, %2
  %62 = bitcast %"class.jxl::Plane"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %62) #13
  %63 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %4, i64 0, i32 0, i32 4
  %64 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %4, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %65 = getelementptr inbounds %"class.jxl::Image3.108", %"class.jxl::Image3.108"* %1, i64 0, i32 0, i64 1, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %62, i8 -86, i64 32, i1 false) #13, !alias.scope !90
  %66 = load i32, i32* %65, align 8, !noalias !90
  %67 = zext i32 %66 to i64
  %68 = getelementptr inbounds %"class.jxl::Image3.108", %"class.jxl::Image3.108"* %1, i64 0, i32 0, i64 1, i32 0, i32 1
  %69 = load i32, i32* %68, align 4, !noalias !90
  %70 = zext i32 %69 to i64
  %71 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %4, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %71, i64 %67, i64 %70, i64 4) #13
  %72 = load i32, i32* %68, align 4, !noalias !90
  %73 = icmp eq i32 %72, 0
  br i1 %73, label %117, label %74

74:                                               ; preds = %61
  %75 = getelementptr inbounds %"class.jxl::Image3.108", %"class.jxl::Image3.108"* %1, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %76 = getelementptr inbounds %"class.jxl::Image3.108", %"class.jxl::Image3.108"* %1, i64 0, i32 0, i64 1, i32 0, i32 4
  %77 = load i32, i32* %65, align 8, !noalias !90
  br label %78

78:                                               ; preds = %100, %74
  %79 = phi i32 [ %72, %74 ], [ %101, %100 ]
  %80 = phi i32 [ %77, %74 ], [ %102, %100 ]
  %81 = phi i64 [ 0, %74 ], [ %103, %100 ]
  %82 = load i8*, i8** %75, align 8, !noalias !90
  %83 = load i64, i64* %76, align 8, !noalias !90
  %84 = mul i64 %83, %81
  %85 = getelementptr inbounds i8, i8* %82, i64 %84
  %86 = ptrtoint i8* %85 to i64
  %87 = and i64 %86, 63
  %88 = icmp eq i64 %87, 0
  call void @llvm.assume(i1 %88) #13
  %89 = load i8*, i8** %64, align 8, !alias.scope !90
  %90 = load i64, i64* %63, align 8, !alias.scope !90
  %91 = mul i64 %90, %81
  %92 = getelementptr inbounds i8, i8* %89, i64 %91
  %93 = ptrtoint i8* %92 to i64
  %94 = and i64 %93, 63
  %95 = icmp eq i64 %94, 0
  call void @llvm.assume(i1 %95) #13
  %96 = bitcast i8* %92 to float*
  %97 = icmp eq i32 %80, 0
  br i1 %97, label %100, label %106

98:                                               ; preds = %106
  %99 = load i32, i32* %68, align 4, !noalias !90
  br label %100

100:                                              ; preds = %98, %78
  %101 = phi i32 [ %99, %98 ], [ %79, %78 ]
  %102 = phi i32 [ %114, %98 ], [ 0, %78 ]
  %103 = add nuw nsw i64 %81, 1
  %104 = zext i32 %101 to i64
  %105 = icmp ult i64 %103, %104
  br i1 %105, label %78, label %117

106:                                              ; preds = %78, %106
  %107 = phi i64 [ %113, %106 ], [ 0, %78 ]
  %108 = getelementptr inbounds i8, i8* %85, i64 %107
  %109 = load i8, i8* %108, align 1
  %110 = uitofp i8 %109 to float
  %111 = fmul float %110, 0x3F70101020000000
  %112 = getelementptr inbounds float, float* %96, i64 %107
  store float %111, float* %112, align 4
  %113 = add nuw nsw i64 %107, 1
  %114 = load i32, i32* %65, align 8, !noalias !90
  %115 = zext i32 %114 to i64
  %116 = icmp ult i64 %113, %115
  br i1 %116, label %106, label %98

117:                                              ; preds = %100, %61
  %118 = bitcast %"class.jxl::Plane"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %118) #13
  %119 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %5, i64 0, i32 0, i32 4
  %120 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %5, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %121 = getelementptr inbounds %"class.jxl::Image3.108", %"class.jxl::Image3.108"* %1, i64 0, i32 0, i64 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %118, i8 -86, i64 32, i1 false) #13, !alias.scope !93
  %122 = load i32, i32* %121, align 8, !noalias !93
  %123 = zext i32 %122 to i64
  %124 = getelementptr inbounds %"class.jxl::Image3.108", %"class.jxl::Image3.108"* %1, i64 0, i32 0, i64 2, i32 0, i32 1
  %125 = load i32, i32* %124, align 4, !noalias !93
  %126 = zext i32 %125 to i64
  %127 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %5, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %127, i64 %123, i64 %126, i64 4) #13
  %128 = load i32, i32* %124, align 4, !noalias !93
  %129 = icmp eq i32 %128, 0
  br i1 %129, label %173, label %130

130:                                              ; preds = %117
  %131 = getelementptr inbounds %"class.jxl::Image3.108", %"class.jxl::Image3.108"* %1, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %132 = getelementptr inbounds %"class.jxl::Image3.108", %"class.jxl::Image3.108"* %1, i64 0, i32 0, i64 2, i32 0, i32 4
  %133 = load i32, i32* %121, align 8, !noalias !93
  br label %134

134:                                              ; preds = %156, %130
  %135 = phi i32 [ %128, %130 ], [ %157, %156 ]
  %136 = phi i32 [ %133, %130 ], [ %158, %156 ]
  %137 = phi i64 [ 0, %130 ], [ %159, %156 ]
  %138 = load i8*, i8** %131, align 8, !noalias !93
  %139 = load i64, i64* %132, align 8, !noalias !93
  %140 = mul i64 %139, %137
  %141 = getelementptr inbounds i8, i8* %138, i64 %140
  %142 = ptrtoint i8* %141 to i64
  %143 = and i64 %142, 63
  %144 = icmp eq i64 %143, 0
  call void @llvm.assume(i1 %144) #13
  %145 = load i8*, i8** %120, align 8, !alias.scope !93
  %146 = load i64, i64* %119, align 8, !alias.scope !93
  %147 = mul i64 %146, %137
  %148 = getelementptr inbounds i8, i8* %145, i64 %147
  %149 = ptrtoint i8* %148 to i64
  %150 = and i64 %149, 63
  %151 = icmp eq i64 %150, 0
  call void @llvm.assume(i1 %151) #13
  %152 = bitcast i8* %148 to float*
  %153 = icmp eq i32 %136, 0
  br i1 %153, label %156, label %162

154:                                              ; preds = %162
  %155 = load i32, i32* %124, align 4, !noalias !93
  br label %156

156:                                              ; preds = %154, %134
  %157 = phi i32 [ %155, %154 ], [ %135, %134 ]
  %158 = phi i32 [ %170, %154 ], [ 0, %134 ]
  %159 = add nuw nsw i64 %137, 1
  %160 = zext i32 %157 to i64
  %161 = icmp ult i64 %159, %160
  br i1 %161, label %134, label %173

162:                                              ; preds = %134, %162
  %163 = phi i64 [ %169, %162 ], [ 0, %134 ]
  %164 = getelementptr inbounds i8, i8* %141, i64 %163
  %165 = load i8, i8* %164, align 1
  %166 = uitofp i8 %165 to float
  %167 = fmul float %166, 0x3F70101020000000
  %168 = getelementptr inbounds float, float* %152, i64 %163
  store float %167, float* %168, align 4
  %169 = add nuw nsw i64 %163, 1
  %170 = load i32, i32* %121, align 8, !noalias !93
  %171 = zext i32 %170 to i64
  %172 = icmp ult i64 %169, %171
  br i1 %172, label %162, label %154

173:                                              ; preds = %156, %117
  call void @_ZN3jxl6Image3IfEC2EONS_5PlaneIfEES4_S4_(%"class.jxl::Image3"* %0, %"class.jxl::Plane"* nonnull dereferenceable(32) %3, %"class.jxl::Plane"* nonnull dereferenceable(32) %4, %"class.jxl::Plane"* nonnull dereferenceable(32) %5)
  %174 = load i8*, i8** %120, align 8
  store i8* null, i8** %120, align 8
  %175 = icmp eq i8* %174, null
  br i1 %175, label %177, label %176

176:                                              ; preds = %173
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %174) #13
  br label %177

177:                                              ; preds = %173, %176
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %118) #13
  %178 = load i8*, i8** %64, align 8
  store i8* null, i8** %64, align 8
  %179 = icmp eq i8* %178, null
  br i1 %179, label %181, label %180

180:                                              ; preds = %177
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %178) #13
  br label %181

181:                                              ; preds = %177, %180
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %62) #13
  %182 = load i8*, i8** %8, align 8
  store i8* null, i8** %8, align 8
  %183 = icmp eq i8* %182, null
  br i1 %183, label %185, label %184

184:                                              ; preds = %181
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %182) #13
  br label %185

185:                                              ; preds = %181, %184
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %6) #13
  ret void
}

declare i32 @_ZN3jxl11ImageBundle11TransformToERKNS_13ColorEncodingEPNS_10ThreadPoolE(%"class.jxl::ImageBundle"*, %"struct.jxl::ColorEncoding"* dereferenceable(152), %"class.jxl::ThreadPool"*) local_unnamed_addr #3

; Function Attrs: nounwind readnone speculatable
declare float @llvm.fabs.f32(float) #12

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3jxl5PlaneIfEENS_9allocatorIS3_EEE7reserveEm(%"class.std::__1::vector.87"*, i64) local_unnamed_addr #6 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.87", %"class.std::__1::vector.87"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast %"class.jxl::Plane"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector.87"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = ashr exact i64 %8, 5
  %10 = icmp ult i64 %9, %1
  %11 = inttoptr i64 %7 to %"class.jxl::Plane"*
  br i1 %10, label %12, label %103

12:                                               ; preds = %2
  %13 = getelementptr inbounds %"class.std::__1::vector.87", %"class.std::__1::vector.87"* %0, i64 0, i32 0, i32 1
  %14 = bitcast %"class.jxl::Plane"** %13 to i64*
  %15 = icmp ugt i64 %1, 576460752303423487
  br i1 %15, label %16, label %17

16:                                               ; preds = %12
  tail call void @abort() #21
  unreachable

17:                                               ; preds = %12
  %18 = load i64, i64* %14, align 8
  %19 = sub i64 %18, %7
  %20 = ashr exact i64 %19, 5
  %21 = shl i64 %1, 5
  %22 = tail call i8* @_Znwm(i64 %21) #22
  %23 = bitcast i8* %22 to %"class.jxl::Plane"*
  %24 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %23, i64 %20
  %25 = ptrtoint %"class.jxl::Plane"* %24 to i64
  %26 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %23, i64 %1
  %27 = ptrtoint %"class.jxl::Plane"* %26 to i64
  %28 = inttoptr i64 %18 to %"class.jxl::Plane"*
  %29 = icmp eq %"class.jxl::Plane"* %28, %11
  br i1 %29, label %84, label %30

30:                                               ; preds = %17
  %31 = getelementptr %"class.jxl::Plane", %"class.jxl::Plane"* %28, i64 -1, i32 0, i32 0
  %32 = bitcast i32* %31 to i8*
  %33 = sub i64 0, %7
  %34 = getelementptr i8, i8* %32, i64 %33
  %35 = ptrtoint i8* %34 to i64
  %36 = and i64 %35, 32
  %37 = icmp eq i64 %36, 0
  br i1 %37, label %38, label %49

38:                                               ; preds = %30
  %39 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %24, i64 -1
  %40 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %28, i64 -1
  %41 = bitcast %"class.jxl::Plane"* %39 to i8*
  %42 = bitcast %"class.jxl::Plane"* %40 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %41, i8* align 8 %42, i64 24, i1 false) #13
  %43 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %24, i64 -1, i32 0, i32 5
  %44 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %28, i64 -1, i32 0, i32 5
  %45 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %44, i64 0, i32 0, i32 0, i32 0
  %46 = bitcast %"class.std::__1::unique_ptr"* %44 to i64*
  %47 = load i64, i64* %46, align 8
  store i8* null, i8** %45, align 8
  %48 = bitcast %"class.std::__1::unique_ptr"* %43 to i64*
  store i64 %47, i64* %48, align 8
  br label %49

49:                                               ; preds = %38, %30
  %50 = phi %"class.jxl::Plane"* [ undef, %30 ], [ %39, %38 ]
  %51 = phi %"class.jxl::Plane"* [ %24, %30 ], [ %39, %38 ]
  %52 = phi %"class.jxl::Plane"* [ %28, %30 ], [ %40, %38 ]
  %53 = icmp ult i8* %34, inttoptr (i64 32 to i8*)
  br i1 %53, label %78, label %54

54:                                               ; preds = %49, %54
  %55 = phi %"class.jxl::Plane"* [ %67, %54 ], [ %51, %49 ]
  %56 = phi %"class.jxl::Plane"* [ %68, %54 ], [ %52, %49 ]
  %57 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %55, i64 -1
  %58 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %56, i64 -1
  %59 = bitcast %"class.jxl::Plane"* %57 to i8*
  %60 = bitcast %"class.jxl::Plane"* %58 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %59, i8* align 8 %60, i64 24, i1 false) #13
  %61 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %55, i64 -1, i32 0, i32 5
  %62 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %56, i64 -1, i32 0, i32 5
  %63 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %62, i64 0, i32 0, i32 0, i32 0
  %64 = bitcast %"class.std::__1::unique_ptr"* %62 to i64*
  %65 = load i64, i64* %64, align 8
  store i8* null, i8** %63, align 8
  %66 = bitcast %"class.std::__1::unique_ptr"* %61 to i64*
  store i64 %65, i64* %66, align 8
  %67 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %55, i64 -2
  %68 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %56, i64 -2
  %69 = bitcast %"class.jxl::Plane"* %67 to i8*
  %70 = bitcast %"class.jxl::Plane"* %68 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %69, i8* align 8 %70, i64 24, i1 false) #13
  %71 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %55, i64 -2, i32 0, i32 5
  %72 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %56, i64 -2, i32 0, i32 5
  %73 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %72, i64 0, i32 0, i32 0, i32 0
  %74 = bitcast %"class.std::__1::unique_ptr"* %72 to i64*
  %75 = load i64, i64* %74, align 8
  store i8* null, i8** %73, align 8
  %76 = bitcast %"class.std::__1::unique_ptr"* %71 to i64*
  store i64 %75, i64* %76, align 8
  %77 = icmp eq %"class.jxl::Plane"* %68, %11
  br i1 %77, label %78, label %54

78:                                               ; preds = %54, %49
  %79 = phi %"class.jxl::Plane"* [ %50, %49 ], [ %67, %54 ]
  %80 = ptrtoint %"class.jxl::Plane"* %79 to i64
  %81 = load i64, i64* %6, align 8
  %82 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %13, align 8
  %83 = inttoptr i64 %81 to %"class.jxl::Plane"*
  br label %84

84:                                               ; preds = %17, %78
  %85 = phi %"class.jxl::Plane"* [ %83, %78 ], [ %28, %17 ]
  %86 = phi %"class.jxl::Plane"* [ %82, %78 ], [ %11, %17 ]
  %87 = phi i64 [ %80, %78 ], [ %25, %17 ]
  %88 = phi i64 [ %81, %78 ], [ %18, %17 ]
  store i64 %87, i64* %6, align 8
  store i64 %25, i64* %14, align 8
  store i64 %27, i64* %4, align 8
  %89 = icmp eq %"class.jxl::Plane"* %86, %85
  br i1 %89, label %99, label %90

90:                                               ; preds = %84, %97
  %91 = phi %"class.jxl::Plane"* [ %92, %97 ], [ %86, %84 ]
  %92 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %91, i64 -1
  %93 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %91, i64 -1, i32 0, i32 5, i32 0, i32 0, i32 0
  %94 = load i8*, i8** %93, align 8
  store i8* null, i8** %93, align 8
  %95 = icmp eq i8* %94, null
  br i1 %95, label %97, label %96

96:                                               ; preds = %90
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %94) #13
  br label %97

97:                                               ; preds = %96, %90
  %98 = icmp eq %"class.jxl::Plane"* %92, %85
  br i1 %98, label %99, label %90

99:                                               ; preds = %97, %84
  %100 = icmp eq i64 %88, 0
  br i1 %100, label %103, label %101

101:                                              ; preds = %99
  %102 = inttoptr i64 %88 to i8*
  tail call void @_ZdlPv(i8* %102) #22
  br label %103

103:                                              ; preds = %101, %99, %2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl9CopyImageIfEENS_5PlaneIT_EERKS3_(%"class.jxl::Plane"* noalias sret, %"class.jxl::Plane"* dereferenceable(32)) local_unnamed_addr #6 comdat {
  %3 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %0, i64 0, i32 0, i32 0
  %4 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %0, i64 0, i32 0, i32 4
  %5 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %6 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %1, i64 0, i32 0, i32 0
  %7 = bitcast %"class.jxl::Plane"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 -86, i64 32, i1 false)
  %8 = load i32, i32* %6, align 8
  %9 = zext i32 %8 to i64
  %10 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %1, i64 0, i32 0, i32 1
  %11 = load i32, i32* %10, align 4
  %12 = zext i32 %11 to i64
  %13 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %0, i64 0, i32 0
  tail call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %13, i64 %9, i64 %12, i64 4) #13
  %14 = load i32, i32* %6, align 8, !noalias !96
  %15 = load i32, i32* %3, align 8, !alias.scope !96
  %16 = icmp eq i32 %14, %15
  br i1 %16, label %17, label %22

17:                                               ; preds = %2
  %18 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %0, i64 0, i32 0, i32 1
  %19 = load i32, i32* %10, align 4, !noalias !96
  %20 = load i32, i32* %18, align 4, !alias.scope !96
  %21 = icmp eq i32 %19, %20
  br i1 %21, label %25, label %22

22:                                               ; preds = %17, %2
  %23 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.15, i64 0, i64 0), i32 34, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.18, i64 0, i64 0)) #13, !noalias !96
  %24 = tail call zeroext i1 @_ZN3jxl5AbortEv() #21, !noalias !96
  unreachable

25:                                               ; preds = %17
  %26 = icmp eq i32 %19, 0
  %27 = icmp eq i32 %14, 0
  %28 = or i1 %27, %26
  br i1 %28, label %66, label %29

29:                                               ; preds = %25
  %30 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %1, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %31 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %1, i64 0, i32 0, i32 4
  %32 = load i8*, i8** %5, align 8, !alias.scope !96
  %33 = load i64, i64* %4, align 8, !alias.scope !96
  %34 = load i8*, i8** %30, align 8, !noalias !96
  %35 = ptrtoint i8* %34 to i64
  %36 = and i64 %35, 63
  %37 = icmp eq i64 %36, 0
  tail call void @llvm.assume(i1 %37) #13, !noalias !96
  %38 = ptrtoint i8* %32 to i64
  %39 = and i64 %38, 63
  %40 = icmp eq i64 %39, 0
  tail call void @llvm.assume(i1 %40) #13, !noalias !96
  %41 = zext i32 %14 to i64
  %42 = shl nuw nsw i64 %41, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 64 %32, i8* align 64 %34, i64 %42, i1 false) #13, !noalias !96
  %43 = load i32, i32* %10, align 4, !noalias !96
  %44 = icmp ugt i32 %43, 1
  br i1 %44, label %45, label %66

45:                                               ; preds = %29, %45
  %46 = phi i64 [ %62, %45 ], [ 1, %29 ]
  %47 = load i32, i32* %6, align 8, !noalias !96
  %48 = load i8*, i8** %30, align 8, !noalias !96
  %49 = load i64, i64* %31, align 8, !noalias !96
  %50 = mul i64 %49, %46
  %51 = getelementptr inbounds i8, i8* %48, i64 %50
  %52 = ptrtoint i8* %51 to i64
  %53 = and i64 %52, 63
  %54 = icmp eq i64 %53, 0
  tail call void @llvm.assume(i1 %54) #13, !noalias !96
  %55 = mul i64 %46, %33
  %56 = getelementptr inbounds i8, i8* %32, i64 %55
  %57 = ptrtoint i8* %56 to i64
  %58 = and i64 %57, 63
  %59 = icmp eq i64 %58, 0
  tail call void @llvm.assume(i1 %59) #13, !noalias !96
  %60 = zext i32 %47 to i64
  %61 = shl nuw nsw i64 %60, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 64 %56, i8* align 64 %51, i64 %61, i1 false) #13, !noalias !96
  %62 = add nuw nsw i64 %46, 1
  %63 = load i32, i32* %10, align 4, !noalias !96
  %64 = zext i32 %63 to i64
  %65 = icmp ult i64 %62, %64
  br i1 %65, label %45, label %66

66:                                               ; preds = %45, %29, %25
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl11CopyImageToIfEEvRKNS_4RectERKNS_6Image3IT_EES3_PS6_(%"class.jxl::Rect"* dereferenceable(32), %"class.jxl::Image3"* dereferenceable(96), %"class.jxl::Rect"* dereferenceable(32), %"class.jxl::Image3"* noalias) local_unnamed_addr #6 comdat {
  %5 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %0, i64 0, i32 2
  %6 = load i64, i64* %5, align 8
  %7 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %2, i64 0, i32 2
  %8 = load i64, i64* %7, align 8
  %9 = icmp eq i64 %6, %8
  br i1 %9, label %10, label %24

10:                                               ; preds = %4
  %11 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %0, i64 0, i32 3
  %12 = load i64, i64* %11, align 8
  %13 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %2, i64 0, i32 3
  %14 = load i64, i64* %13, align 8
  %15 = icmp eq i64 %12, %14
  br i1 %15, label %16, label %24

16:                                               ; preds = %10
  %17 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %0, i64 0, i32 1
  %18 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %0, i64 0, i32 0
  %19 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %2, i64 0, i32 1
  %20 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %2, i64 0, i32 0
  %21 = icmp eq i64 %6, 0
  %22 = icmp eq i64 %12, 0
  %23 = or i1 %21, %22
  br i1 %23, label %66, label %27

24:                                               ; preds = %4, %10
  %25 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.15, i64 0, i64 0), i32 80, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.16, i64 0, i64 0)) #13
  %26 = tail call zeroext i1 @_ZN3jxl5AbortEv() #21
  unreachable

27:                                               ; preds = %16
  %28 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %1, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %29 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %1, i64 0, i32 0, i64 0, i32 0, i32 4
  %30 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %31 = load i8*, i8** %30, align 8, !alias.scope !99
  %32 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 0, i32 0, i32 4
  %33 = load i64, i64* %32, align 8, !alias.scope !99
  br label %34

34:                                               ; preds = %34, %27
  %35 = phi i64 [ %6, %27 ], [ %65, %34 ]
  %36 = phi i64 [ 0, %27 ], [ %62, %34 ]
  %37 = load i64, i64* %17, align 8, !noalias !99
  %38 = add i64 %37, %36
  %39 = load i8*, i8** %28, align 8, !noalias !99
  %40 = load i64, i64* %29, align 8, !noalias !99
  %41 = mul i64 %40, %38
  %42 = getelementptr inbounds i8, i8* %39, i64 %41
  %43 = ptrtoint i8* %42 to i64
  %44 = and i64 %43, 63
  %45 = icmp eq i64 %44, 0
  tail call void @llvm.assume(i1 %45) #13, !noalias !99
  %46 = bitcast i8* %42 to float*
  %47 = load i64, i64* %18, align 8, !noalias !99
  %48 = getelementptr inbounds float, float* %46, i64 %47
  %49 = load i64, i64* %19, align 8, !noalias !99
  %50 = add i64 %49, %36
  %51 = mul i64 %50, %33
  %52 = getelementptr inbounds i8, i8* %31, i64 %51
  %53 = ptrtoint i8* %52 to i64
  %54 = and i64 %53, 63
  %55 = icmp eq i64 %54, 0
  tail call void @llvm.assume(i1 %55) #13, !noalias !99
  %56 = bitcast i8* %52 to float*
  %57 = load i64, i64* %20, align 8, !noalias !99
  %58 = getelementptr inbounds float, float* %56, i64 %57
  %59 = bitcast float* %58 to i8*
  %60 = bitcast float* %48 to i8*
  %61 = shl i64 %35, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %59, i8* align 4 %60, i64 %61, i1 false) #13, !noalias !99
  %62 = add nuw i64 %36, 1
  %63 = load i64, i64* %11, align 8, !noalias !99
  %64 = icmp ult i64 %62, %63
  %65 = load i64, i64* %5, align 8
  br i1 %64, label %34, label %66

66:                                               ; preds = %34, %16
  %67 = phi i64 [ %12, %16 ], [ %63, %34 ]
  %68 = phi i64 [ %6, %16 ], [ %65, %34 ]
  %69 = icmp eq i64 %68, 0
  %70 = icmp eq i64 %67, 0
  %71 = or i1 %69, %70
  br i1 %71, label %111, label %72

72:                                               ; preds = %66
  %73 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %1, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %74 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %1, i64 0, i32 0, i64 1, i32 0, i32 4
  %75 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %76 = load i8*, i8** %75, align 8, !alias.scope !99
  %77 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 1, i32 0, i32 4
  %78 = load i64, i64* %77, align 8, !alias.scope !99
  br label %79

79:                                               ; preds = %79, %72
  %80 = phi i64 [ %68, %72 ], [ %110, %79 ]
  %81 = phi i64 [ 0, %72 ], [ %107, %79 ]
  %82 = load i64, i64* %17, align 8, !noalias !99
  %83 = add i64 %82, %81
  %84 = load i8*, i8** %73, align 8, !noalias !99
  %85 = load i64, i64* %74, align 8, !noalias !99
  %86 = mul i64 %85, %83
  %87 = getelementptr inbounds i8, i8* %84, i64 %86
  %88 = ptrtoint i8* %87 to i64
  %89 = and i64 %88, 63
  %90 = icmp eq i64 %89, 0
  tail call void @llvm.assume(i1 %90) #13, !noalias !99
  %91 = bitcast i8* %87 to float*
  %92 = load i64, i64* %18, align 8, !noalias !99
  %93 = getelementptr inbounds float, float* %91, i64 %92
  %94 = load i64, i64* %19, align 8, !noalias !99
  %95 = add i64 %94, %81
  %96 = mul i64 %95, %78
  %97 = getelementptr inbounds i8, i8* %76, i64 %96
  %98 = ptrtoint i8* %97 to i64
  %99 = and i64 %98, 63
  %100 = icmp eq i64 %99, 0
  tail call void @llvm.assume(i1 %100) #13, !noalias !99
  %101 = bitcast i8* %97 to float*
  %102 = load i64, i64* %20, align 8, !noalias !99
  %103 = getelementptr inbounds float, float* %101, i64 %102
  %104 = bitcast float* %103 to i8*
  %105 = bitcast float* %93 to i8*
  %106 = shl i64 %80, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %104, i8* align 4 %105, i64 %106, i1 false) #13, !noalias !99
  %107 = add nuw i64 %81, 1
  %108 = load i64, i64* %11, align 8, !noalias !99
  %109 = icmp ult i64 %107, %108
  %110 = load i64, i64* %5, align 8
  br i1 %109, label %79, label %111

111:                                              ; preds = %79, %66
  %112 = phi i64 [ %67, %66 ], [ %108, %79 ]
  %113 = phi i64 [ %68, %66 ], [ %110, %79 ]
  %114 = icmp eq i64 %113, 0
  %115 = icmp eq i64 %112, 0
  %116 = or i1 %114, %115
  br i1 %116, label %157, label %117

117:                                              ; preds = %111
  %118 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %1, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %119 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %1, i64 0, i32 0, i64 2, i32 0, i32 4
  %120 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %121 = load i8*, i8** %120, align 8, !alias.scope !99
  %122 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 2, i32 0, i32 4
  %123 = load i64, i64* %122, align 8, !alias.scope !99
  br label %124

124:                                              ; preds = %155, %117
  %125 = phi i64 [ %113, %117 ], [ %156, %155 ]
  %126 = phi i64 [ 0, %117 ], [ %152, %155 ]
  %127 = load i64, i64* %17, align 8, !noalias !99
  %128 = add i64 %127, %126
  %129 = load i8*, i8** %118, align 8, !noalias !99
  %130 = load i64, i64* %119, align 8, !noalias !99
  %131 = mul i64 %130, %128
  %132 = getelementptr inbounds i8, i8* %129, i64 %131
  %133 = ptrtoint i8* %132 to i64
  %134 = and i64 %133, 63
  %135 = icmp eq i64 %134, 0
  tail call void @llvm.assume(i1 %135) #13, !noalias !99
  %136 = bitcast i8* %132 to float*
  %137 = load i64, i64* %18, align 8, !noalias !99
  %138 = getelementptr inbounds float, float* %136, i64 %137
  %139 = load i64, i64* %19, align 8, !noalias !99
  %140 = add i64 %139, %126
  %141 = mul i64 %140, %123
  %142 = getelementptr inbounds i8, i8* %121, i64 %141
  %143 = ptrtoint i8* %142 to i64
  %144 = and i64 %143, 63
  %145 = icmp eq i64 %144, 0
  tail call void @llvm.assume(i1 %145) #13, !noalias !99
  %146 = bitcast i8* %142 to float*
  %147 = load i64, i64* %20, align 8, !noalias !99
  %148 = getelementptr inbounds float, float* %146, i64 %147
  %149 = bitcast float* %148 to i8*
  %150 = bitcast float* %138 to i8*
  %151 = shl i64 %125, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %149, i8* align 4 %150, i64 %151, i1 false) #13, !noalias !99
  %152 = add nuw i64 %126, 1
  %153 = load i64, i64* %11, align 8, !noalias !99
  %154 = icmp ult i64 %152, %153
  br i1 %154, label %155, label %157

155:                                              ; preds = %124
  %156 = load i64, i64* %5, align 8, !noalias !99
  br label %124

157:                                              ; preds = %124, %111
  ret void
}

; Function Attrs: nounwind
declare void @llvm.assume(i1) #13

declare void @_ZN3jxl12CacheAligned4FreeEPKv(i8*) local_unnamed_addr #3

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #14

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #15

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #16

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3jxl5PlaneIfEENS_9allocatorIS3_EEE24__emplace_back_slow_pathIJS3_EEEvDpOT_(%"class.std::__1::vector.87"*, %"class.jxl::Plane"* dereferenceable(32)) local_unnamed_addr #7 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.87", %"class.std::__1::vector.87"* %0, i64 0, i32 0, i32 1
  %4 = bitcast %"class.jxl::Plane"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector.87"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = ashr exact i64 %8, 5
  %10 = add nsw i64 %9, 1
  %11 = icmp ugt i64 %10, 576460752303423487
  br i1 %11, label %12, label %14

12:                                               ; preds = %2
  %13 = bitcast %"class.std::__1::vector.87"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %13) #21
  unreachable

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.std::__1::vector.87", %"class.std::__1::vector.87"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast %"class.jxl::Plane"** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %17, %7
  %19 = ashr exact i64 %18, 5
  %20 = icmp ult i64 %19, 288230376151711743
  br i1 %20, label %21, label %29

21:                                               ; preds = %14
  %22 = ashr exact i64 %18, 4
  %23 = icmp ult i64 %22, %10
  %24 = select i1 %23, i64 %10, i64 %22
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %34, label %26

26:                                               ; preds = %21
  %27 = icmp ugt i64 %24, 576460752303423487
  br i1 %27, label %28, label %29

28:                                               ; preds = %26
  tail call void @abort() #21
  unreachable

29:                                               ; preds = %14, %26
  %30 = phi i64 [ %24, %26 ], [ 576460752303423487, %14 ]
  %31 = shl i64 %30, 5
  %32 = tail call i8* @_Znwm(i64 %31) #22
  %33 = bitcast i8* %32 to %"class.jxl::Plane"*
  br label %34

34:                                               ; preds = %21, %29
  %35 = phi i64 [ %30, %29 ], [ 0, %21 ]
  %36 = phi %"class.jxl::Plane"* [ %33, %29 ], [ null, %21 ]
  %37 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %36, i64 %9
  %38 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %36, i64 %35
  %39 = ptrtoint %"class.jxl::Plane"* %38 to i64
  %40 = bitcast %"class.jxl::Plane"* %37 to i8*
  %41 = bitcast %"class.jxl::Plane"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %40, i8* align 8 %41, i64 24, i1 false) #13
  %42 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %36, i64 %9, i32 0, i32 5
  %43 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %1, i64 0, i32 0, i32 5
  %44 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %43, i64 0, i32 0, i32 0, i32 0
  %45 = bitcast %"class.std::__1::unique_ptr"* %43 to i64*
  %46 = load i64, i64* %45, align 8
  store i8* null, i8** %44, align 8
  %47 = bitcast %"class.std::__1::unique_ptr"* %42 to i64*
  store i64 %46, i64* %47, align 8
  %48 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %37, i64 1
  %49 = ptrtoint %"class.jxl::Plane"* %48 to i64
  %50 = getelementptr inbounds %"class.std::__1::vector.87", %"class.std::__1::vector.87"* %0, i64 0, i32 0, i32 0
  %51 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %50, align 8
  %52 = ptrtoint %"class.jxl::Plane"* %51 to i64
  %53 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %3, align 8
  %54 = icmp eq %"class.jxl::Plane"* %53, %51
  br i1 %54, label %105, label %55

55:                                               ; preds = %34
  %56 = getelementptr %"class.jxl::Plane", %"class.jxl::Plane"* %53, i64 -1, i32 0, i32 0
  %57 = ptrtoint i32* %56 to i64
  %58 = sub i64 %57, %52
  %59 = and i64 %58, 32
  %60 = icmp eq i64 %59, 0
  br i1 %60, label %61, label %72

61:                                               ; preds = %55
  %62 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %37, i64 -1
  %63 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %53, i64 -1
  %64 = bitcast %"class.jxl::Plane"* %62 to i8*
  %65 = bitcast %"class.jxl::Plane"* %63 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %64, i8* align 8 %65, i64 24, i1 false) #13
  %66 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %37, i64 -1, i32 0, i32 5
  %67 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %53, i64 -1, i32 0, i32 5
  %68 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %67, i64 0, i32 0, i32 0, i32 0
  %69 = bitcast %"class.std::__1::unique_ptr"* %67 to i64*
  %70 = load i64, i64* %69, align 8
  store i8* null, i8** %68, align 8
  %71 = bitcast %"class.std::__1::unique_ptr"* %66 to i64*
  store i64 %70, i64* %71, align 8
  br label %72

72:                                               ; preds = %61, %55
  %73 = phi %"class.jxl::Plane"* [ undef, %55 ], [ %62, %61 ]
  %74 = phi %"class.jxl::Plane"* [ %37, %55 ], [ %62, %61 ]
  %75 = phi %"class.jxl::Plane"* [ %53, %55 ], [ %63, %61 ]
  %76 = icmp ult i64 %58, 32
  br i1 %76, label %101, label %77

77:                                               ; preds = %72, %77
  %78 = phi %"class.jxl::Plane"* [ %90, %77 ], [ %74, %72 ]
  %79 = phi %"class.jxl::Plane"* [ %91, %77 ], [ %75, %72 ]
  %80 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %78, i64 -1
  %81 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %79, i64 -1
  %82 = bitcast %"class.jxl::Plane"* %80 to i8*
  %83 = bitcast %"class.jxl::Plane"* %81 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %82, i8* align 8 %83, i64 24, i1 false) #13
  %84 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %78, i64 -1, i32 0, i32 5
  %85 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %79, i64 -1, i32 0, i32 5
  %86 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %85, i64 0, i32 0, i32 0, i32 0
  %87 = bitcast %"class.std::__1::unique_ptr"* %85 to i64*
  %88 = load i64, i64* %87, align 8
  store i8* null, i8** %86, align 8
  %89 = bitcast %"class.std::__1::unique_ptr"* %84 to i64*
  store i64 %88, i64* %89, align 8
  %90 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %78, i64 -2
  %91 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %79, i64 -2
  %92 = bitcast %"class.jxl::Plane"* %90 to i8*
  %93 = bitcast %"class.jxl::Plane"* %91 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %92, i8* align 8 %93, i64 24, i1 false) #13
  %94 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %78, i64 -2, i32 0, i32 5
  %95 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %79, i64 -2, i32 0, i32 5
  %96 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %95, i64 0, i32 0, i32 0, i32 0
  %97 = bitcast %"class.std::__1::unique_ptr"* %95 to i64*
  %98 = load i64, i64* %97, align 8
  store i8* null, i8** %96, align 8
  %99 = bitcast %"class.std::__1::unique_ptr"* %94 to i64*
  store i64 %98, i64* %99, align 8
  %100 = icmp eq %"class.jxl::Plane"* %91, %51
  br i1 %100, label %101, label %77

101:                                              ; preds = %77, %72
  %102 = phi %"class.jxl::Plane"* [ %73, %72 ], [ %90, %77 ]
  %103 = load i64, i64* %6, align 8
  %104 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %3, align 8
  br label %105

105:                                              ; preds = %34, %101
  %106 = phi %"class.jxl::Plane"* [ %104, %101 ], [ %51, %34 ]
  %107 = phi %"class.jxl::Plane"* [ %102, %101 ], [ %37, %34 ]
  %108 = phi i64 [ %103, %101 ], [ %52, %34 ]
  %109 = ptrtoint %"class.jxl::Plane"* %107 to i64
  store i64 %109, i64* %6, align 8
  store i64 %49, i64* %4, align 8
  store i64 %39, i64* %16, align 8
  %110 = inttoptr i64 %108 to %"class.jxl::Plane"*
  %111 = icmp eq %"class.jxl::Plane"* %106, %110
  br i1 %111, label %121, label %112

112:                                              ; preds = %105, %119
  %113 = phi %"class.jxl::Plane"* [ %114, %119 ], [ %106, %105 ]
  %114 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %113, i64 -1
  %115 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %113, i64 -1, i32 0, i32 5, i32 0, i32 0, i32 0
  %116 = load i8*, i8** %115, align 8
  store i8* null, i8** %115, align 8
  %117 = icmp eq i8* %116, null
  br i1 %117, label %119, label %118

118:                                              ; preds = %112
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %116) #13
  br label %119

119:                                              ; preds = %118, %112
  %120 = icmp eq %"class.jxl::Plane"* %114, %110
  br i1 %120, label %121, label %112

121:                                              ; preds = %119, %105
  %122 = icmp eq i64 %108, 0
  br i1 %122, label %125, label %123

123:                                              ; preds = %121
  %124 = inttoptr i64 %108 to i8*
  tail call void @_ZdlPv(i8* %124) #22
  br label %125

125:                                              ; preds = %121, %123
  ret void
}

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #4

declare void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"*, i64, i64, i64) unnamed_addr #3

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl4jpeg8JPEGDataC2ERKS1_(%"struct.jxl::jpeg::JPEGData"*, %"struct.jxl::jpeg::JPEGData"* dereferenceable(296)) unnamed_addr #7 comdat align 2 {
  %3 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl4jpeg8JPEGDataE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %4 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 1
  %5 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %1, i64 0, i32 1
  %6 = bitcast i32* %4 to i8*
  %7 = bitcast i32* %5 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* align 8 %7, i64 12, i1 false)
  %8 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 4
  %9 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %1, i64 0, i32 4
  tail call void @_ZNSt3__16vectorINS0_IhNS_9allocatorIhEEEENS1_IS3_EEEC2ERKS5_(%"class.std::__1::vector"* %8, %"class.std::__1::vector"* dereferenceable(24) %9)
  %10 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 5
  %11 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %1, i64 0, i32 5
  %12 = bitcast %"class.std::__1::vector.15"* %10 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %12, i8 0, i64 24, i1 false) #13
  %13 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %1, i64 0, i32 5, i32 0, i32 1
  %14 = bitcast i32** %13 to i64*
  %15 = load i64, i64* %14, align 8
  %16 = bitcast %"class.std::__1::vector.15"* %11 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %15, %17
  %19 = ashr exact i64 %18, 2
  %20 = icmp eq i64 %18, 0
  br i1 %20, label %48, label %21

21:                                               ; preds = %2
  %22 = icmp ugt i64 %19, 4611686018427387903
  br i1 %22, label %23, label %25

23:                                               ; preds = %21
  %24 = bitcast %"class.std::__1::vector.15"* %10 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %24) #21
  unreachable

25:                                               ; preds = %21
  %26 = tail call i8* @_Znwm(i64 %18) #22
  %27 = bitcast i8* %26 to i32*
  %28 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 5, i32 0, i32 1
  %29 = bitcast i32** %28 to i8**
  store i8* %26, i8** %29, align 8
  %30 = bitcast %"class.std::__1::vector.15"* %10 to i8**
  store i8* %26, i8** %30, align 8
  %31 = getelementptr inbounds i32, i32* %27, i64 %19
  %32 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 5, i32 0, i32 2, i32 0, i32 0
  store i32* %31, i32** %32, align 8
  %33 = getelementptr inbounds %"class.std::__1::vector.15", %"class.std::__1::vector.15"* %11, i64 0, i32 0, i32 0
  %34 = load i32*, i32** %33, align 8
  %35 = load i64, i64* %14, align 8
  %36 = bitcast i32** %28 to i64*
  %37 = ptrtoint i8* %26 to i64
  %38 = ptrtoint i32* %34 to i64
  %39 = sub i64 %35, %38
  %40 = icmp sgt i64 %39, 0
  br i1 %40, label %41, label %46

41:                                               ; preds = %25
  %42 = lshr exact i64 %39, 2
  %43 = bitcast i32* %34 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %26, i8* align 4 %43, i64 %39, i1 false) #13
  %44 = getelementptr inbounds i32, i32* %27, i64 %42
  %45 = ptrtoint i32* %44 to i64
  br label %46

46:                                               ; preds = %41, %25
  %47 = phi i64 [ %45, %41 ], [ %37, %25 ]
  store i64 %47, i64* %36, align 8
  br label %48

48:                                               ; preds = %2, %46
  %49 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 6
  %50 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %1, i64 0, i32 6
  tail call void @_ZNSt3__16vectorINS0_IhNS_9allocatorIhEEEENS1_IS3_EEEC2ERKS5_(%"class.std::__1::vector"* %49, %"class.std::__1::vector"* dereferenceable(24) %50)
  %51 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 7
  %52 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %1, i64 0, i32 7
  %53 = bitcast %"class.std::__1::vector.22"* %51 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %53, i8 0, i64 24, i1 false) #13
  %54 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %1, i64 0, i32 7, i32 0, i32 1
  %55 = bitcast %"struct.jxl::jpeg::JPEGQuantTable"** %54 to i64*
  %56 = load i64, i64* %55, align 8
  %57 = bitcast %"class.std::__1::vector.22"* %52 to i64*
  %58 = load i64, i64* %57, align 8
  %59 = sub i64 %56, %58
  %60 = sdiv exact i64 %59, 268
  %61 = icmp eq i64 %59, 0
  br i1 %61, label %89, label %62

62:                                               ; preds = %48
  %63 = icmp ugt i64 %60, 68831134603393849
  br i1 %63, label %64, label %66

64:                                               ; preds = %62
  %65 = bitcast %"class.std::__1::vector.22"* %51 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %65) #21
  unreachable

66:                                               ; preds = %62
  %67 = tail call i8* @_Znwm(i64 %59) #22
  %68 = bitcast i8* %67 to %"struct.jxl::jpeg::JPEGQuantTable"*
  %69 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 7, i32 0, i32 1
  %70 = bitcast %"struct.jxl::jpeg::JPEGQuantTable"** %69 to i8**
  store i8* %67, i8** %70, align 8
  %71 = bitcast %"class.std::__1::vector.22"* %51 to i8**
  store i8* %67, i8** %71, align 8
  %72 = getelementptr inbounds %"struct.jxl::jpeg::JPEGQuantTable", %"struct.jxl::jpeg::JPEGQuantTable"* %68, i64 %60
  %73 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 7, i32 0, i32 2, i32 0, i32 0
  store %"struct.jxl::jpeg::JPEGQuantTable"* %72, %"struct.jxl::jpeg::JPEGQuantTable"** %73, align 8
  %74 = getelementptr inbounds %"class.std::__1::vector.22", %"class.std::__1::vector.22"* %52, i64 0, i32 0, i32 0
  %75 = load %"struct.jxl::jpeg::JPEGQuantTable"*, %"struct.jxl::jpeg::JPEGQuantTable"** %74, align 8
  %76 = load i64, i64* %55, align 8
  %77 = bitcast %"struct.jxl::jpeg::JPEGQuantTable"** %69 to i64*
  %78 = ptrtoint i8* %67 to i64
  %79 = ptrtoint %"struct.jxl::jpeg::JPEGQuantTable"* %75 to i64
  %80 = sub i64 %76, %79
  %81 = icmp sgt i64 %80, 0
  br i1 %81, label %82, label %87

82:                                               ; preds = %66
  %83 = udiv exact i64 %80, 268
  %84 = bitcast %"struct.jxl::jpeg::JPEGQuantTable"* %75 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %67, i8* align 4 %84, i64 %80, i1 false) #13
  %85 = getelementptr inbounds %"struct.jxl::jpeg::JPEGQuantTable", %"struct.jxl::jpeg::JPEGQuantTable"* %68, i64 %83
  %86 = ptrtoint %"struct.jxl::jpeg::JPEGQuantTable"* %85 to i64
  br label %87

87:                                               ; preds = %82, %66
  %88 = phi i64 [ %86, %82 ], [ %78, %66 ]
  store i64 %88, i64* %77, align 8
  br label %89

89:                                               ; preds = %48, %87
  %90 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 8
  %91 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %1, i64 0, i32 8
  %92 = bitcast %"class.std::__1::vector.29"* %90 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %92, i8 0, i64 24, i1 false) #13
  %93 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %1, i64 0, i32 8, i32 0, i32 1
  %94 = bitcast %"struct.jxl::jpeg::JPEGHuffmanCode"** %93 to i64*
  %95 = load i64, i64* %94, align 8
  %96 = bitcast %"class.std::__1::vector.29"* %91 to i64*
  %97 = load i64, i64* %96, align 8
  %98 = sub i64 %95, %97
  %99 = sdiv exact i64 %98, 1104
  %100 = icmp eq i64 %98, 0
  br i1 %100, label %128, label %101

101:                                              ; preds = %89
  %102 = icmp ugt i64 %99, 16709007313142709
  br i1 %102, label %103, label %105

103:                                              ; preds = %101
  %104 = bitcast %"class.std::__1::vector.29"* %90 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %104) #21
  unreachable

105:                                              ; preds = %101
  %106 = tail call i8* @_Znwm(i64 %98) #22
  %107 = bitcast i8* %106 to %"struct.jxl::jpeg::JPEGHuffmanCode"*
  %108 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 8, i32 0, i32 1
  %109 = bitcast %"struct.jxl::jpeg::JPEGHuffmanCode"** %108 to i8**
  store i8* %106, i8** %109, align 8
  %110 = bitcast %"class.std::__1::vector.29"* %90 to i8**
  store i8* %106, i8** %110, align 8
  %111 = getelementptr inbounds %"struct.jxl::jpeg::JPEGHuffmanCode", %"struct.jxl::jpeg::JPEGHuffmanCode"* %107, i64 %99
  %112 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 8, i32 0, i32 2, i32 0, i32 0
  store %"struct.jxl::jpeg::JPEGHuffmanCode"* %111, %"struct.jxl::jpeg::JPEGHuffmanCode"** %112, align 8
  %113 = getelementptr inbounds %"class.std::__1::vector.29", %"class.std::__1::vector.29"* %91, i64 0, i32 0, i32 0
  %114 = load %"struct.jxl::jpeg::JPEGHuffmanCode"*, %"struct.jxl::jpeg::JPEGHuffmanCode"** %113, align 8
  %115 = load i64, i64* %94, align 8
  %116 = bitcast %"struct.jxl::jpeg::JPEGHuffmanCode"** %108 to i64*
  %117 = ptrtoint i8* %106 to i64
  %118 = ptrtoint %"struct.jxl::jpeg::JPEGHuffmanCode"* %114 to i64
  %119 = sub i64 %115, %118
  %120 = icmp sgt i64 %119, 0
  br i1 %120, label %121, label %126

121:                                              ; preds = %105
  %122 = udiv exact i64 %119, 1104
  %123 = bitcast %"struct.jxl::jpeg::JPEGHuffmanCode"* %114 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %106, i8* align 4 %123, i64 %119, i1 false) #13
  %124 = getelementptr inbounds %"struct.jxl::jpeg::JPEGHuffmanCode", %"struct.jxl::jpeg::JPEGHuffmanCode"* %107, i64 %122
  %125 = ptrtoint %"struct.jxl::jpeg::JPEGHuffmanCode"* %124 to i64
  br label %126

126:                                              ; preds = %121, %105
  %127 = phi i64 [ %125, %121 ], [ %117, %105 ]
  store i64 %127, i64* %116, align 8
  br label %128

128:                                              ; preds = %89, %126
  %129 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 9
  %130 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %1, i64 0, i32 9
  tail call void @_ZNSt3__16vectorIN3jxl4jpeg13JPEGComponentENS_9allocatorIS3_EEEC2ERKS6_(%"class.std::__1::vector.38"* %129, %"class.std::__1::vector.38"* dereferenceable(24) %130)
  %131 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 10
  %132 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %1, i64 0, i32 10
  %133 = bitcast %"class.std::__1::vector.52"* %131 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %133, i8 0, i64 24, i1 false) #13
  %134 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %1, i64 0, i32 10, i32 0, i32 1
  %135 = bitcast %"struct.jxl::jpeg::JPEGScanInfo"** %134 to i64*
  %136 = load i64, i64* %135, align 8
  %137 = bitcast %"class.std::__1::vector.52"* %132 to i64*
  %138 = load i64, i64* %137, align 8
  %139 = sub i64 %136, %138
  %140 = sdiv exact i64 %139, 120
  %141 = icmp eq i64 %139, 0
  br i1 %141, label %172, label %142

142:                                              ; preds = %128
  %143 = icmp ugt i64 %140, 153722867280912930
  br i1 %143, label %144, label %146

144:                                              ; preds = %142
  %145 = bitcast %"class.std::__1::vector.52"* %131 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %145) #21
  unreachable

146:                                              ; preds = %142
  %147 = tail call i8* @_Znwm(i64 %139) #22
  %148 = bitcast i8* %147 to %"struct.jxl::jpeg::JPEGScanInfo"*
  %149 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 10, i32 0, i32 1
  %150 = bitcast %"struct.jxl::jpeg::JPEGScanInfo"** %149 to i8**
  store i8* %147, i8** %150, align 8
  %151 = bitcast %"class.std::__1::vector.52"* %131 to i8**
  store i8* %147, i8** %151, align 8
  %152 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %148, i64 %140
  %153 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 10, i32 0, i32 2, i32 0, i32 0
  store %"struct.jxl::jpeg::JPEGScanInfo"* %152, %"struct.jxl::jpeg::JPEGScanInfo"** %153, align 8
  %154 = getelementptr inbounds %"class.std::__1::vector.52", %"class.std::__1::vector.52"* %132, i64 0, i32 0, i32 0
  %155 = load %"struct.jxl::jpeg::JPEGScanInfo"*, %"struct.jxl::jpeg::JPEGScanInfo"** %154, align 8
  %156 = load %"struct.jxl::jpeg::JPEGScanInfo"*, %"struct.jxl::jpeg::JPEGScanInfo"** %134, align 8
  %157 = bitcast %"struct.jxl::jpeg::JPEGScanInfo"** %149 to i64*
  %158 = ptrtoint i8* %147 to i64
  %159 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 10, i32 0, i32 2
  %160 = bitcast %"class.std::__1::__compressed_pair.69"* %159 to %"class.std::__1::allocator.72"*
  %161 = icmp eq %"struct.jxl::jpeg::JPEGScanInfo"* %155, %156
  br i1 %161, label %170, label %162

162:                                              ; preds = %146, %162
  %163 = phi %"struct.jxl::jpeg::JPEGScanInfo"* [ %166, %162 ], [ %148, %146 ]
  %164 = phi %"struct.jxl::jpeg::JPEGScanInfo"* [ %165, %162 ], [ %155, %146 ]
  tail call void @_ZNSt3__19allocatorIN3jxl4jpeg12JPEGScanInfoEE9constructIS3_JRS3_EEEvPT_DpOT0_(%"class.std::__1::allocator.72"* %160, %"struct.jxl::jpeg::JPEGScanInfo"* %163, %"struct.jxl::jpeg::JPEGScanInfo"* dereferenceable(120) %164) #13
  %165 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %164, i64 1
  %166 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %163, i64 1
  %167 = icmp eq %"struct.jxl::jpeg::JPEGScanInfo"* %165, %156
  br i1 %167, label %168, label %162

168:                                              ; preds = %162
  %169 = ptrtoint %"struct.jxl::jpeg::JPEGScanInfo"* %166 to i64
  br label %170

170:                                              ; preds = %168, %146
  %171 = phi i64 [ %158, %146 ], [ %169, %168 ]
  store i64 %171, i64* %157, align 8
  br label %172

172:                                              ; preds = %128, %170
  %173 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 11
  %174 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %1, i64 0, i32 11
  %175 = bitcast %"class.std::__1::vector.6"* %173 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %175, i8 0, i64 24, i1 false) #13
  %176 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %1, i64 0, i32 11, i32 0, i32 1
  %177 = bitcast i8** %176 to i64*
  %178 = load i64, i64* %177, align 8
  %179 = bitcast %"class.std::__1::vector.6"* %174 to i64*
  %180 = load i64, i64* %179, align 8
  %181 = sub i64 %178, %180
  %182 = icmp eq i64 %181, 0
  br i1 %182, label %205, label %183

183:                                              ; preds = %172
  %184 = icmp slt i64 %181, 0
  br i1 %184, label %185, label %187

185:                                              ; preds = %183
  %186 = bitcast %"class.std::__1::vector.6"* %173 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %186) #21
  unreachable

187:                                              ; preds = %183
  %188 = tail call i8* @_Znwm(i64 %181) #22
  %189 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 11, i32 0, i32 1
  store i8* %188, i8** %189, align 8
  %190 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %173, i64 0, i32 0, i32 0
  store i8* %188, i8** %190, align 8
  %191 = getelementptr inbounds i8, i8* %188, i64 %181
  %192 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 11, i32 0, i32 2, i32 0, i32 0
  store i8* %191, i8** %192, align 8
  %193 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %174, i64 0, i32 0, i32 0
  %194 = load i8*, i8** %193, align 8
  %195 = load i64, i64* %177, align 8
  %196 = bitcast i8** %189 to i64*
  %197 = ptrtoint i8* %194 to i64
  %198 = sub i64 %195, %197
  %199 = icmp sgt i64 %198, 0
  br i1 %199, label %200, label %202

200:                                              ; preds = %187
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %188, i8* align 1 %194, i64 %198, i1 false) #13
  %201 = getelementptr inbounds i8, i8* %188, i64 %198
  br label %202

202:                                              ; preds = %200, %187
  %203 = phi i8* [ %201, %200 ], [ %188, %187 ]
  %204 = ptrtoint i8* %203 to i64
  store i64 %204, i64* %196, align 8
  br label %205

205:                                              ; preds = %172, %202
  %206 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 12
  %207 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %1, i64 0, i32 12
  tail call void @_ZNSt3__16vectorINS0_IhNS_9allocatorIhEEEENS1_IS3_EEEC2ERKS5_(%"class.std::__1::vector"* %206, %"class.std::__1::vector"* dereferenceable(24) %207)
  %208 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 13
  %209 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %1, i64 0, i32 13
  %210 = bitcast %"class.std::__1::vector.6"* %208 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %210, i8 0, i64 24, i1 false) #13
  %211 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %1, i64 0, i32 13, i32 0, i32 1
  %212 = bitcast i8** %211 to i64*
  %213 = load i64, i64* %212, align 8
  %214 = bitcast %"class.std::__1::vector.6"* %209 to i64*
  %215 = load i64, i64* %214, align 8
  %216 = sub i64 %213, %215
  %217 = icmp eq i64 %216, 0
  br i1 %217, label %240, label %218

218:                                              ; preds = %205
  %219 = icmp slt i64 %216, 0
  br i1 %219, label %220, label %222

220:                                              ; preds = %218
  %221 = bitcast %"class.std::__1::vector.6"* %208 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %221) #21
  unreachable

222:                                              ; preds = %218
  %223 = tail call i8* @_Znwm(i64 %216) #22
  %224 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 13, i32 0, i32 1
  store i8* %223, i8** %224, align 8
  %225 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %208, i64 0, i32 0, i32 0
  store i8* %223, i8** %225, align 8
  %226 = getelementptr inbounds i8, i8* %223, i64 %216
  %227 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 13, i32 0, i32 2, i32 0, i32 0
  store i8* %226, i8** %227, align 8
  %228 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %209, i64 0, i32 0, i32 0
  %229 = load i8*, i8** %228, align 8
  %230 = load i64, i64* %212, align 8
  %231 = bitcast i8** %224 to i64*
  %232 = ptrtoint i8* %229 to i64
  %233 = sub i64 %230, %232
  %234 = icmp sgt i64 %233, 0
  br i1 %234, label %235, label %237

235:                                              ; preds = %222
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %223, i8* align 1 %229, i64 %233, i1 false) #13
  %236 = getelementptr inbounds i8, i8* %223, i64 %233
  br label %237

237:                                              ; preds = %235, %222
  %238 = phi i8* [ %236, %235 ], [ %223, %222 ]
  %239 = ptrtoint i8* %238 to i64
  store i64 %239, i64* %231, align 8
  br label %240

240:                                              ; preds = %205, %237
  %241 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 14
  %242 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %1, i64 0, i32 14
  %243 = bitcast i32* %241 to i8*
  %244 = bitcast i32* %242 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %243, i8* align 8 %244, i64 5, i1 false)
  %245 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 16
  %246 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %1, i64 0, i32 16
  %247 = bitcast %"class.std::__1::vector.6"* %245 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %247, i8 0, i64 24, i1 false) #13
  %248 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %1, i64 0, i32 16, i32 0, i32 1
  %249 = bitcast i8** %248 to i64*
  %250 = load i64, i64* %249, align 8
  %251 = bitcast %"class.std::__1::vector.6"* %246 to i64*
  %252 = load i64, i64* %251, align 8
  %253 = sub i64 %250, %252
  %254 = icmp eq i64 %253, 0
  br i1 %254, label %277, label %255

255:                                              ; preds = %240
  %256 = icmp slt i64 %253, 0
  br i1 %256, label %257, label %259

257:                                              ; preds = %255
  %258 = bitcast %"class.std::__1::vector.6"* %245 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %258) #21
  unreachable

259:                                              ; preds = %255
  %260 = tail call i8* @_Znwm(i64 %253) #22
  %261 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 16, i32 0, i32 1
  store i8* %260, i8** %261, align 8
  %262 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %245, i64 0, i32 0, i32 0
  store i8* %260, i8** %262, align 8
  %263 = getelementptr inbounds i8, i8* %260, i64 %253
  %264 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 16, i32 0, i32 2, i32 0, i32 0
  store i8* %263, i8** %264, align 8
  %265 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %246, i64 0, i32 0, i32 0
  %266 = load i8*, i8** %265, align 8
  %267 = load i64, i64* %249, align 8
  %268 = bitcast i8** %261 to i64*
  %269 = ptrtoint i8* %266 to i64
  %270 = sub i64 %267, %269
  %271 = icmp sgt i64 %270, 0
  br i1 %271, label %272, label %274

272:                                              ; preds = %259
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %260, i8* align 1 %266, i64 %270, i1 false) #13
  %273 = getelementptr inbounds i8, i8* %260, i64 %270
  br label %274

274:                                              ; preds = %272, %259
  %275 = phi i8* [ %273, %272 ], [ %260, %259 ]
  %276 = ptrtoint i8* %275 to i64
  store i64 %276, i64* %268, align 8
  br label %277

277:                                              ; preds = %240, %274
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorINS0_IhNS_9allocatorIhEEEENS1_IS3_EEEC2ERKS5_(%"class.std::__1::vector"*, %"class.std::__1::vector"* dereferenceable(24)) unnamed_addr #6 comdat align 2 {
  %3 = bitcast %"class.std::__1::vector"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %3, i8 0, i64 24, i1 false) #13
  %4 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 1
  %5 = bitcast %"class.std::__1::vector.6"** %4 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = bitcast %"class.std::__1::vector"* %1 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %6, %8
  %10 = sdiv exact i64 %9, 24
  %11 = icmp eq i64 %9, 0
  br i1 %11, label %73, label %12

12:                                               ; preds = %2
  %13 = icmp ugt i64 %10, 768614336404564650
  br i1 %13, label %14, label %16

14:                                               ; preds = %12
  %15 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %15) #21
  unreachable

16:                                               ; preds = %12
  %17 = tail call i8* @_Znwm(i64 %9) #22
  %18 = bitcast i8* %17 to %"class.std::__1::vector.6"*
  %19 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %20 = bitcast %"class.std::__1::vector.6"** %19 to i8**
  store i8* %17, i8** %20, align 8
  %21 = bitcast %"class.std::__1::vector"* %0 to i8**
  store i8* %17, i8** %21, align 8
  %22 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %18, i64 %10
  %23 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  store %"class.std::__1::vector.6"* %22, %"class.std::__1::vector.6"** %23, align 8
  %24 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 0
  %25 = load %"class.std::__1::vector.6"*, %"class.std::__1::vector.6"** %24, align 8
  %26 = load %"class.std::__1::vector.6"*, %"class.std::__1::vector.6"** %4, align 8
  %27 = bitcast %"class.std::__1::vector.6"** %19 to i64*
  %28 = ptrtoint i8* %17 to i64
  %29 = icmp eq %"class.std::__1::vector.6"* %25, %26
  br i1 %29, label %71, label %30

30:                                               ; preds = %16
  %31 = bitcast i8* %17 to %"class.std::__1::vector.6"*
  br label %32

32:                                               ; preds = %65, %30
  %33 = phi %"class.std::__1::vector.6"* [ %67, %65 ], [ %31, %30 ]
  %34 = phi %"class.std::__1::vector.6"* [ %66, %65 ], [ %25, %30 ]
  %35 = bitcast %"class.std::__1::vector.6"* %33 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %35, i8 0, i64 24, i1 false) #13
  %36 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %34, i64 0, i32 0, i32 1
  %37 = bitcast i8** %36 to i64*
  %38 = load i64, i64* %37, align 8
  %39 = bitcast %"class.std::__1::vector.6"* %34 to i64*
  %40 = load i64, i64* %39, align 8
  %41 = sub i64 %38, %40
  %42 = icmp eq i64 %41, 0
  br i1 %42, label %65, label %43

43:                                               ; preds = %32
  %44 = icmp slt i64 %41, 0
  br i1 %44, label %45, label %47

45:                                               ; preds = %43
  %46 = bitcast %"class.std::__1::vector.6"* %33 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %46) #21
  unreachable

47:                                               ; preds = %43
  %48 = tail call i8* @_Znwm(i64 %41) #22
  %49 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %33, i64 0, i32 0, i32 1
  store i8* %48, i8** %49, align 8
  %50 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %33, i64 0, i32 0, i32 0
  store i8* %48, i8** %50, align 8
  %51 = getelementptr inbounds i8, i8* %48, i64 %41
  %52 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %33, i64 0, i32 0, i32 2, i32 0, i32 0
  store i8* %51, i8** %52, align 8
  %53 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %34, i64 0, i32 0, i32 0
  %54 = load i8*, i8** %53, align 8
  %55 = load i64, i64* %37, align 8
  %56 = bitcast i8** %49 to i64*
  %57 = ptrtoint i8* %54 to i64
  %58 = sub i64 %55, %57
  %59 = icmp sgt i64 %58, 0
  br i1 %59, label %60, label %62

60:                                               ; preds = %47
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %48, i8* align 1 %54, i64 %58, i1 false) #13
  %61 = getelementptr inbounds i8, i8* %48, i64 %58
  br label %62

62:                                               ; preds = %60, %47
  %63 = phi i8* [ %61, %60 ], [ %48, %47 ]
  %64 = ptrtoint i8* %63 to i64
  store i64 %64, i64* %56, align 8
  br label %65

65:                                               ; preds = %62, %32
  %66 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %34, i64 1
  %67 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %33, i64 1
  %68 = icmp eq %"class.std::__1::vector.6"* %66, %26
  br i1 %68, label %69, label %32

69:                                               ; preds = %65
  %70 = ptrtoint %"class.std::__1::vector.6"* %67 to i64
  br label %71

71:                                               ; preds = %16, %69
  %72 = phi i64 [ %28, %16 ], [ %70, %69 ]
  store i64 %72, i64* %27, align 8
  br label %73

73:                                               ; preds = %2, %71
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3jxl4jpeg13JPEGComponentENS_9allocatorIS3_EEEC2ERKS6_(%"class.std::__1::vector.38"*, %"class.std::__1::vector.38"* dereferenceable(24)) unnamed_addr #6 comdat align 2 {
  %3 = bitcast %"class.std::__1::vector.38"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %3, i8 0, i64 24, i1 false) #13
  %4 = getelementptr inbounds %"class.std::__1::vector.38", %"class.std::__1::vector.38"* %1, i64 0, i32 0, i32 1
  %5 = bitcast %"struct.jxl::jpeg::JPEGComponent"** %4 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = bitcast %"class.std::__1::vector.38"* %1 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %6, %8
  %10 = sdiv exact i64 %9, 48
  %11 = icmp eq i64 %9, 0
  br i1 %11, label %83, label %12

12:                                               ; preds = %2
  %13 = icmp ugt i64 %10, 384307168202282325
  br i1 %13, label %14, label %16

14:                                               ; preds = %12
  %15 = bitcast %"class.std::__1::vector.38"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %15) #21
  unreachable

16:                                               ; preds = %12
  %17 = tail call i8* @_Znwm(i64 %9) #22
  %18 = bitcast i8* %17 to %"struct.jxl::jpeg::JPEGComponent"*
  %19 = getelementptr inbounds %"class.std::__1::vector.38", %"class.std::__1::vector.38"* %0, i64 0, i32 0, i32 1
  %20 = bitcast %"struct.jxl::jpeg::JPEGComponent"** %19 to i8**
  store i8* %17, i8** %20, align 8
  %21 = bitcast %"class.std::__1::vector.38"* %0 to i8**
  store i8* %17, i8** %21, align 8
  %22 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %18, i64 %10
  %23 = getelementptr inbounds %"class.std::__1::vector.38", %"class.std::__1::vector.38"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  store %"struct.jxl::jpeg::JPEGComponent"* %22, %"struct.jxl::jpeg::JPEGComponent"** %23, align 8
  %24 = getelementptr inbounds %"class.std::__1::vector.38", %"class.std::__1::vector.38"* %1, i64 0, i32 0, i32 0
  %25 = load %"struct.jxl::jpeg::JPEGComponent"*, %"struct.jxl::jpeg::JPEGComponent"** %24, align 8
  %26 = load %"struct.jxl::jpeg::JPEGComponent"*, %"struct.jxl::jpeg::JPEGComponent"** %4, align 8
  %27 = bitcast %"struct.jxl::jpeg::JPEGComponent"** %19 to i64*
  %28 = ptrtoint i8* %17 to i64
  %29 = icmp eq %"struct.jxl::jpeg::JPEGComponent"* %25, %26
  br i1 %29, label %81, label %30

30:                                               ; preds = %16
  %31 = bitcast i8* %17 to %"struct.jxl::jpeg::JPEGComponent"*
  br label %32

32:                                               ; preds = %75, %30
  %33 = phi %"struct.jxl::jpeg::JPEGComponent"* [ %77, %75 ], [ %31, %30 ]
  %34 = phi %"struct.jxl::jpeg::JPEGComponent"* [ %76, %75 ], [ %25, %30 ]
  %35 = bitcast %"struct.jxl::jpeg::JPEGComponent"* %33 to i8*
  %36 = bitcast %"struct.jxl::jpeg::JPEGComponent"* %34 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %35, i8* align 8 %36, i64 24, i1 false) #13
  %37 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %33, i64 0, i32 6
  %38 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %34, i64 0, i32 6
  %39 = bitcast %"class.std::__1::vector.40"* %37 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %39, i8 0, i64 24, i1 false) #13
  %40 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %34, i64 0, i32 6, i32 0, i32 1
  %41 = bitcast i16** %40 to i64*
  %42 = load i64, i64* %41, align 8
  %43 = bitcast %"class.std::__1::vector.40"* %38 to i64*
  %44 = load i64, i64* %43, align 8
  %45 = sub i64 %42, %44
  %46 = ashr exact i64 %45, 1
  %47 = icmp eq i64 %45, 0
  br i1 %47, label %75, label %48

48:                                               ; preds = %32
  %49 = icmp slt i64 %45, 0
  br i1 %49, label %50, label %52

50:                                               ; preds = %48
  %51 = bitcast %"class.std::__1::vector.40"* %37 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %51) #21
  unreachable

52:                                               ; preds = %48
  %53 = tail call i8* @_Znwm(i64 %45) #22
  %54 = bitcast i8* %53 to i16*
  %55 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %33, i64 0, i32 6, i32 0, i32 1
  %56 = bitcast i16** %55 to i8**
  store i8* %53, i8** %56, align 8
  %57 = bitcast %"class.std::__1::vector.40"* %37 to i8**
  store i8* %53, i8** %57, align 8
  %58 = getelementptr inbounds i16, i16* %54, i64 %46
  %59 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %33, i64 0, i32 6, i32 0, i32 2, i32 0, i32 0
  store i16* %58, i16** %59, align 8
  %60 = getelementptr inbounds %"class.std::__1::vector.40", %"class.std::__1::vector.40"* %38, i64 0, i32 0, i32 0
  %61 = load i16*, i16** %60, align 8
  %62 = load i64, i64* %41, align 8
  %63 = bitcast i16** %55 to i64*
  %64 = ptrtoint i8* %53 to i64
  %65 = ptrtoint i16* %61 to i64
  %66 = sub i64 %62, %65
  %67 = icmp sgt i64 %66, 0
  br i1 %67, label %68, label %73

68:                                               ; preds = %52
  %69 = lshr exact i64 %66, 1
  %70 = bitcast i16* %61 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 2 %53, i8* align 2 %70, i64 %66, i1 false) #13
  %71 = getelementptr inbounds i16, i16* %54, i64 %69
  %72 = ptrtoint i16* %71 to i64
  br label %73

73:                                               ; preds = %68, %52
  %74 = phi i64 [ %72, %68 ], [ %64, %52 ]
  store i64 %74, i64* %63, align 8
  br label %75

75:                                               ; preds = %73, %32
  %76 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %34, i64 1
  %77 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %33, i64 1
  %78 = icmp eq %"struct.jxl::jpeg::JPEGComponent"* %76, %26
  br i1 %78, label %79, label %32

79:                                               ; preds = %75
  %80 = ptrtoint %"struct.jxl::jpeg::JPEGComponent"* %77 to i64
  br label %81

81:                                               ; preds = %16, %79
  %82 = phi i64 [ %28, %16 ], [ %80, %79 ]
  store i64 %82, i64* %27, align 8
  br label %83

83:                                               ; preds = %2, %81
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__19allocatorIN3jxl4jpeg12JPEGScanInfoEE9constructIS3_JRS3_EEEvPT_DpOT0_(%"class.std::__1::allocator.72"*, %"struct.jxl::jpeg::JPEGScanInfo"*, %"struct.jxl::jpeg::JPEGScanInfo"* dereferenceable(120)) local_unnamed_addr #6 comdat align 2 {
  %4 = bitcast %"struct.jxl::jpeg::JPEGScanInfo"* %1 to i8*
  %5 = bitcast %"struct.jxl::jpeg::JPEGScanInfo"* %2 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %4, i8* align 8 %5, i64 72, i1 false) #13
  %6 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %1, i64 0, i32 7
  %7 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %2, i64 0, i32 7
  %8 = bitcast %"class.std::__1::vector.55"* %6 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %8, i8 0, i64 24, i1 false) #13
  %9 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %2, i64 0, i32 7, i32 0, i32 1
  %10 = bitcast i32** %9 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = bitcast %"class.std::__1::vector.55"* %7 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = sub i64 %11, %13
  %15 = ashr exact i64 %14, 2
  %16 = icmp eq i64 %14, 0
  br i1 %16, label %44, label %17

17:                                               ; preds = %3
  %18 = icmp ugt i64 %15, 4611686018427387903
  br i1 %18, label %19, label %21

19:                                               ; preds = %17
  %20 = bitcast %"class.std::__1::vector.55"* %6 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %20) #21
  unreachable

21:                                               ; preds = %17
  %22 = tail call i8* @_Znwm(i64 %14) #22
  %23 = bitcast i8* %22 to i32*
  %24 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %1, i64 0, i32 7, i32 0, i32 1
  %25 = bitcast i32** %24 to i8**
  store i8* %22, i8** %25, align 8
  %26 = bitcast %"class.std::__1::vector.55"* %6 to i8**
  store i8* %22, i8** %26, align 8
  %27 = getelementptr inbounds i32, i32* %23, i64 %15
  %28 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %1, i64 0, i32 7, i32 0, i32 2, i32 0, i32 0
  store i32* %27, i32** %28, align 8
  %29 = getelementptr inbounds %"class.std::__1::vector.55", %"class.std::__1::vector.55"* %7, i64 0, i32 0, i32 0
  %30 = load i32*, i32** %29, align 8
  %31 = load i64, i64* %10, align 8
  %32 = bitcast i32** %24 to i64*
  %33 = ptrtoint i8* %22 to i64
  %34 = ptrtoint i32* %30 to i64
  %35 = sub i64 %31, %34
  %36 = icmp sgt i64 %35, 0
  br i1 %36, label %37, label %42

37:                                               ; preds = %21
  %38 = lshr exact i64 %35, 2
  %39 = bitcast i32* %30 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %22, i8* align 4 %39, i64 %35, i1 false) #13
  %40 = getelementptr inbounds i32, i32* %23, i64 %38
  %41 = ptrtoint i32* %40 to i64
  br label %42

42:                                               ; preds = %37, %21
  %43 = phi i64 [ %41, %37 ], [ %33, %21 ]
  store i64 %43, i64* %32, align 8
  br label %44

44:                                               ; preds = %42, %3
  %45 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %1, i64 0, i32 8
  %46 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %2, i64 0, i32 8
  %47 = bitcast %"class.std::__1::vector.62"* %45 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %47, i8 0, i64 24, i1 false) #13
  %48 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %2, i64 0, i32 8, i32 0, i32 1
  %49 = bitcast %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"** %48 to i64*
  %50 = load i64, i64* %49, align 8
  %51 = bitcast %"class.std::__1::vector.62"* %46 to i64*
  %52 = load i64, i64* %51, align 8
  %53 = sub i64 %50, %52
  %54 = ashr exact i64 %53, 3
  %55 = icmp eq i64 %53, 0
  br i1 %55, label %83, label %56

56:                                               ; preds = %44
  %57 = icmp ugt i64 %54, 2305843009213693951
  br i1 %57, label %58, label %60

58:                                               ; preds = %56
  %59 = bitcast %"class.std::__1::vector.62"* %45 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %59) #21
  unreachable

60:                                               ; preds = %56
  %61 = tail call i8* @_Znwm(i64 %53) #22
  %62 = bitcast i8* %61 to %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"*
  %63 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %1, i64 0, i32 8, i32 0, i32 1
  %64 = bitcast %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"** %63 to i8**
  store i8* %61, i8** %64, align 8
  %65 = bitcast %"class.std::__1::vector.62"* %45 to i8**
  store i8* %61, i8** %65, align 8
  %66 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo", %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"* %62, i64 %54
  %67 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %1, i64 0, i32 8, i32 0, i32 2, i32 0, i32 0
  store %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"* %66, %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"** %67, align 8
  %68 = getelementptr inbounds %"class.std::__1::vector.62", %"class.std::__1::vector.62"* %46, i64 0, i32 0, i32 0
  %69 = load %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"*, %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"** %68, align 8
  %70 = load i64, i64* %49, align 8
  %71 = bitcast %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"** %63 to i64*
  %72 = ptrtoint i8* %61 to i64
  %73 = ptrtoint %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"* %69 to i64
  %74 = sub i64 %70, %73
  %75 = icmp sgt i64 %74, 0
  br i1 %75, label %76, label %81

76:                                               ; preds = %60
  %77 = lshr exact i64 %74, 3
  %78 = bitcast %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"* %69 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %61, i8* align 4 %78, i64 %74, i1 false) #13
  %79 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo", %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"* %62, i64 %77
  %80 = ptrtoint %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"* %79 to i64
  br label %81

81:                                               ; preds = %76, %60
  %82 = phi i64 [ %80, %76 ], [ %72, %60 ]
  store i64 %82, i64* %71, align 8
  br label %83

83:                                               ; preds = %44, %81
  ret void
}

declare void @_ZN3jxl22YCbCrChromaSubsamplingC1Ev(%"struct.jxl::YCbCrChromaSubsampling"*) unnamed_addr #3

declare void @_ZN3jxl13ColorEncodingC1Ev(%"struct.jxl::ColorEncoding"*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define internal %"class.jxl::ImageBundle"* @_ZN3hwy13FunctionCacheIPKN3jxl11ImageBundleEJRS3_PNS1_10ThreadPoolEPNS1_6Image3IfEEPS2_EE13ChooseAndCallIXadL_ZNS1_L25ToXYBHighwayDispatchTableEEEEES4_S5_S7_SA_SB_(%"class.jxl::ImageBundle"* dereferenceable(368), %"class.jxl::ThreadPool"*, %"class.jxl::Image3"*, %"class.jxl::ImageBundle"*) #6 align 2 {
  tail call void @_ZN3hwy12ChosenTarget6UpdateEv(%"struct.hwy::ChosenTarget"* nonnull @_ZN3hwy13chosen_targetE) #13
  %5 = load atomic i32, i32* getelementptr inbounds (%"struct.hwy::ChosenTarget", %"struct.hwy::ChosenTarget"* @_ZN3hwy13chosen_targetE, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) seq_cst, align 4
  %6 = and i32 %5, 2225
  %7 = tail call i32 @llvm.cttz.i32(i32 %6, i1 true) #13, !range !82
  %8 = zext i32 %7 to i64
  %9 = getelementptr inbounds [12 x %"class.jxl::ImageBundle"* (%"class.jxl::ImageBundle"*, %"class.jxl::ThreadPool"*, %"class.jxl::Image3"*, %"class.jxl::ImageBundle"*)*], [12 x %"class.jxl::ImageBundle"* (%"class.jxl::ImageBundle"*, %"class.jxl::ThreadPool"*, %"class.jxl::Image3"*, %"class.jxl::ImageBundle"*)*]* @_ZN3jxlL25ToXYBHighwayDispatchTableE, i64 0, i64 %8
  %10 = load %"class.jxl::ImageBundle"* (%"class.jxl::ImageBundle"*, %"class.jxl::ThreadPool"*, %"class.jxl::Image3"*, %"class.jxl::ImageBundle"*)*, %"class.jxl::ImageBundle"* (%"class.jxl::ImageBundle"*, %"class.jxl::ThreadPool"*, %"class.jxl::Image3"*, %"class.jxl::ImageBundle"*)** %9, align 8
  %11 = tail call %"class.jxl::ImageBundle"* %10(%"class.jxl::ImageBundle"* dereferenceable(368) %0, %"class.jxl::ThreadPool"* %1, %"class.jxl::Image3"* %2, %"class.jxl::ImageBundle"* %3) #13
  ret %"class.jxl::ImageBundle"* %11
}

declare void @_ZN3hwy12ChosenTarget6UpdateEv(%"struct.hwy::ChosenTarget"*) local_unnamed_addr #3

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.cttz.i32(i32, i1 immarg) #12

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hwy13FunctionCacheIvJRKN3jxl5PlaneIfEES5_S5_PS3_S6_S6_PNS1_10ThreadPoolEEE13ChooseAndCallIXadL_ZNS1_L30RgbToYcbcrHighwayDispatchTableEEEEEvS5_S5_S5_S6_S6_S6_S8_(%"class.jxl::Plane"* dereferenceable(32), %"class.jxl::Plane"* dereferenceable(32), %"class.jxl::Plane"* dereferenceable(32), %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::ThreadPool"*) #6 align 2 {
  tail call void @_ZN3hwy12ChosenTarget6UpdateEv(%"struct.hwy::ChosenTarget"* nonnull @_ZN3hwy13chosen_targetE) #13
  %8 = load atomic i32, i32* getelementptr inbounds (%"struct.hwy::ChosenTarget", %"struct.hwy::ChosenTarget"* @_ZN3hwy13chosen_targetE, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) seq_cst, align 4
  %9 = and i32 %8, 2225
  %10 = tail call i32 @llvm.cttz.i32(i32 %9, i1 true) #13, !range !82
  %11 = zext i32 %10 to i64
  %12 = getelementptr inbounds [12 x void (%"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::ThreadPool"*)*], [12 x void (%"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::ThreadPool"*)*]* @_ZN3jxlL30RgbToYcbcrHighwayDispatchTableE, i64 0, i64 %11
  %13 = load void (%"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::ThreadPool"*)*, void (%"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.jxl::ThreadPool"*)** %12, align 8
  tail call void %13(%"class.jxl::Plane"* dereferenceable(32) %0, %"class.jxl::Plane"* dereferenceable(32) %1, %"class.jxl::Plane"* dereferenceable(32) %2, %"class.jxl::Plane"* %3, %"class.jxl::Plane"* %4, %"class.jxl::Plane"* %5, %"class.jxl::ThreadPool"* %6) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hwy13FunctionCacheIvJEE13ChooseAndCallIXadL_ZN3jxlL32TestCubeRootHighwayDispatchTableEEEEEvv() #6 align 2 {
  tail call void @_ZN3hwy12ChosenTarget6UpdateEv(%"struct.hwy::ChosenTarget"* nonnull @_ZN3hwy13chosen_targetE) #13
  %1 = load atomic i32, i32* getelementptr inbounds (%"struct.hwy::ChosenTarget", %"struct.hwy::ChosenTarget"* @_ZN3hwy13chosen_targetE, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) seq_cst, align 4
  %2 = and i32 %1, 2225
  %3 = tail call i32 @llvm.cttz.i32(i32 %2, i1 true) #13, !range !82
  %4 = zext i32 %3 to i64
  %5 = getelementptr inbounds [12 x void ()*], [12 x void ()*]* @_ZN3jxlL32TestCubeRootHighwayDispatchTableE, i64 0, i64 %4
  %6 = load void ()*, void ()** %5, align 8
  tail call void %6() #13
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #1

declare void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"*, i64) local_unnamed_addr #3

declare void @_ZN3jxl13TraceRunBeginEPKcPd(i8*, double*) local_unnamed_addr #3

declare void @_ZN3jxl11TraceRunEndEPKcd(i8*, double) local_unnamed_addr #3

declare i32 @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj(i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32) #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN3jxl10ThreadPool14ReturnTrueInitEm(i64) #6 comdat align 2 {
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_SSE415LinearSRGBToXYBERKNS_6Image3IfEEPKfPS0_PS6_E3$_0E12CallInitFuncEPvm"(i8* nocapture readonly, i64) #6 align 2 {
  %3 = bitcast i8* %0 to i32 (i64)**
  %4 = load i32 (i64)*, i32 (i64)** %3, align 8
  %5 = tail call i32 %4(i64 %1) #13
  %6 = icmp ne i32 %5, 0
  %7 = sext i1 %6 to i32
  ret i32 %7
}

; Function Attrs: nounwind ssp uwtable
define internal void @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_SSE415LinearSRGBToXYBERKNS_6Image3IfEEPKfPS0_PS6_E3$_0E12CallDataFuncEPvjm"(i8* nocapture readonly, i32, i64) #6 align 2 {
  %4 = getelementptr inbounds i8, i8* %0, i64 8
  %5 = bitcast i8* %4 to %class.anon**
  %6 = load %class.anon*, %class.anon** %5, align 8
  tail call fastcc void @"_ZZN3jxl6N_SSE415LinearSRGBToXYBERKNS_6Image3IfEEPKfPNS_10ThreadPoolEPS2_ENK3$_0clEii"(%class.anon* %6, i32 %1)
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal fastcc void @"_ZZN3jxl6N_SSE415LinearSRGBToXYBERKNS_6Image3IfEEPKfPNS_10ThreadPoolEPS2_ENK3$_0clEii"(%class.anon* nocapture readonly, i32) unnamed_addr #17 align 2 {
  %3 = sext i32 %1 to i64
  %4 = getelementptr inbounds %class.anon, %class.anon* %0, i64 0, i32 0
  %5 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %4, align 8
  %6 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 0, i32 0, i32 4
  %7 = load i64, i64* %6, align 8
  %8 = mul i64 %7, %3
  %9 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %10 = load i8*, i8** %9, align 8
  %11 = ptrtoint i8* %10 to i64
  %12 = and i64 %11, 63
  %13 = icmp eq i64 %12, 0
  tail call void @llvm.assume(i1 %13) #13
  %14 = getelementptr inbounds i8, i8* %10, i64 %8
  %15 = ptrtoint i8* %14 to i64
  %16 = and i64 %15, 63
  %17 = icmp eq i64 %16, 0
  tail call void @llvm.assume(i1 %17) #13
  %18 = bitcast i8* %14 to float*
  %19 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %20 = load i8*, i8** %19, align 8
  %21 = ptrtoint i8* %20 to i64
  %22 = and i64 %21, 63
  %23 = icmp eq i64 %22, 0
  tail call void @llvm.assume(i1 %23) #13
  %24 = getelementptr inbounds i8, i8* %20, i64 %8
  %25 = ptrtoint i8* %24 to i64
  %26 = and i64 %25, 63
  %27 = icmp eq i64 %26, 0
  tail call void @llvm.assume(i1 %27) #13
  %28 = bitcast i8* %24 to float*
  %29 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %30 = load i8*, i8** %29, align 8
  %31 = ptrtoint i8* %30 to i64
  %32 = and i64 %31, 63
  %33 = icmp eq i64 %32, 0
  tail call void @llvm.assume(i1 %33) #13
  %34 = getelementptr inbounds i8, i8* %30, i64 %8
  %35 = ptrtoint i8* %34 to i64
  %36 = and i64 %35, 63
  %37 = icmp eq i64 %36, 0
  tail call void @llvm.assume(i1 %37) #13
  %38 = bitcast i8* %34 to float*
  %39 = getelementptr inbounds %class.anon, %class.anon* %0, i64 0, i32 1
  %40 = load %"class.jxl::Image3"**, %"class.jxl::Image3"*** %39, align 8
  %41 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %40, align 8
  %42 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %41, i64 0, i32 0, i64 0, i32 0, i32 4
  %43 = load i64, i64* %42, align 8
  %44 = mul i64 %43, %3
  %45 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %41, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %46 = load i8*, i8** %45, align 8
  %47 = ptrtoint i8* %46 to i64
  %48 = and i64 %47, 63
  %49 = icmp eq i64 %48, 0
  tail call void @llvm.assume(i1 %49) #13
  %50 = getelementptr inbounds i8, i8* %46, i64 %44
  %51 = ptrtoint i8* %50 to i64
  %52 = and i64 %51, 63
  %53 = icmp eq i64 %52, 0
  tail call void @llvm.assume(i1 %53) #13
  %54 = bitcast i8* %50 to float*
  %55 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %41, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %56 = load i8*, i8** %55, align 8
  %57 = ptrtoint i8* %56 to i64
  %58 = and i64 %57, 63
  %59 = icmp eq i64 %58, 0
  tail call void @llvm.assume(i1 %59) #13
  %60 = getelementptr inbounds i8, i8* %56, i64 %44
  %61 = ptrtoint i8* %60 to i64
  %62 = and i64 %61, 63
  %63 = icmp eq i64 %62, 0
  tail call void @llvm.assume(i1 %63) #13
  %64 = bitcast i8* %60 to float*
  %65 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %41, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %66 = load i8*, i8** %65, align 8
  %67 = ptrtoint i8* %66 to i64
  %68 = and i64 %67, 63
  %69 = icmp eq i64 %68, 0
  tail call void @llvm.assume(i1 %69) #13
  %70 = getelementptr inbounds i8, i8* %66, i64 %44
  %71 = ptrtoint i8* %70 to i64
  %72 = and i64 %71, 63
  %73 = icmp eq i64 %72, 0
  tail call void @llvm.assume(i1 %73) #13
  %74 = bitcast i8* %70 to float*
  %75 = getelementptr inbounds %class.anon, %class.anon* %0, i64 0, i32 2
  %76 = load i64*, i64** %75, align 8
  %77 = load i64, i64* %76, align 8
  %78 = icmp eq i64 %77, 0
  br i1 %78, label %81, label %79

79:                                               ; preds = %2
  %80 = getelementptr inbounds %class.anon, %class.anon* %0, i64 0, i32 4
  br label %82

81:                                               ; preds = %82, %2
  ret void

82:                                               ; preds = %79, %82
  %83 = phi i64 [ 0, %79 ], [ %269, %82 ]
  %84 = getelementptr inbounds float, float* %18, i64 %83
  %85 = bitcast float* %84 to <4 x float>*
  %86 = load <4 x float>, <4 x float>* %85, align 16, !alias.scope !102
  %87 = getelementptr inbounds float, float* %28, i64 %83
  %88 = bitcast float* %87 to <4 x float>*
  %89 = load <4 x float>, <4 x float>* %88, align 16, !alias.scope !105
  %90 = getelementptr inbounds float, float* %38, i64 %83
  %91 = bitcast float* %90 to <4 x float>*
  %92 = load <4 x float>, <4 x float>* %91, align 16, !alias.scope !108
  %93 = load float**, float*** %80, align 8
  %94 = load float*, float** %93, align 8
  %95 = getelementptr inbounds float, float* %54, i64 %83
  %96 = getelementptr inbounds float, float* %64, i64 %83
  %97 = getelementptr inbounds float, float* %74, i64 %83
  %98 = bitcast float* %94 to <4 x float>*
  %99 = load <4 x float>, <4 x float>* %98, align 16, !alias.scope !111, !noalias !118
  %100 = getelementptr inbounds float, float* %94, i64 4
  %101 = bitcast float* %100 to <4 x float>*
  %102 = load <4 x float>, <4 x float>* %101, align 16, !alias.scope !125, !noalias !118
  %103 = getelementptr inbounds float, float* %94, i64 8
  %104 = bitcast float* %103 to <4 x float>*
  %105 = load <4 x float>, <4 x float>* %104, align 16, !alias.scope !128, !noalias !118
  %106 = getelementptr inbounds float, float* %94, i64 12
  %107 = bitcast float* %106 to <4 x float>*
  %108 = load <4 x float>, <4 x float>* %107, align 16, !alias.scope !131, !noalias !118
  %109 = getelementptr inbounds float, float* %94, i64 16
  %110 = bitcast float* %109 to <4 x float>*
  %111 = load <4 x float>, <4 x float>* %110, align 16, !alias.scope !134, !noalias !118
  %112 = getelementptr inbounds float, float* %94, i64 20
  %113 = bitcast float* %112 to <4 x float>*
  %114 = load <4 x float>, <4 x float>* %113, align 16, !alias.scope !137, !noalias !118
  %115 = getelementptr inbounds float, float* %94, i64 24
  %116 = bitcast float* %115 to <4 x float>*
  %117 = load <4 x float>, <4 x float>* %116, align 16, !alias.scope !140, !noalias !118
  %118 = getelementptr inbounds float, float* %94, i64 28
  %119 = bitcast float* %118 to <4 x float>*
  %120 = load <4 x float>, <4 x float>* %119, align 16, !alias.scope !143, !noalias !118
  %121 = getelementptr inbounds float, float* %94, i64 32
  %122 = bitcast float* %121 to <4 x float>*
  %123 = load <4 x float>, <4 x float>* %122, align 16, !alias.scope !146, !noalias !118
  %124 = fmul <4 x float> %92, %105
  %125 = fadd <4 x float> %124, <float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000>
  %126 = fmul <4 x float> %89, %102
  %127 = fadd <4 x float> %126, %125
  %128 = fmul <4 x float> %86, %99
  %129 = fadd <4 x float> %128, %127
  %130 = fmul <4 x float> %92, %114
  %131 = fadd <4 x float> %130, <float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000>
  %132 = fmul <4 x float> %89, %111
  %133 = fadd <4 x float> %132, %131
  %134 = fmul <4 x float> %86, %108
  %135 = fadd <4 x float> %134, %133
  %136 = fmul <4 x float> %92, %123
  %137 = fadd <4 x float> %136, <float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000>
  %138 = fmul <4 x float> %89, %120
  %139 = fadd <4 x float> %138, %137
  %140 = fmul <4 x float> %86, %117
  %141 = fadd <4 x float> %140, %139
  %142 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %129, <4 x float> zeroinitializer, <4 x float> %129) #13
  %143 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %135, <4 x float> zeroinitializer, <4 x float> %135) #13
  %144 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %141, <4 x float> zeroinitializer, <4 x float> %141) #13
  %145 = getelementptr inbounds float, float* %94, i64 36
  %146 = bitcast float* %145 to <4 x float>*
  %147 = load <4 x float>, <4 x float>* %146, align 16, !alias.scope !149, !noalias !152
  %148 = fmul <4 x float> %142, <float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000>
  %149 = bitcast <4 x float> %142 to <4 x i32>
  %150 = icmp eq <4 x i32> %149, zeroinitializer
  %151 = sext <4 x i1> %150 to <4 x i32>
  %152 = bitcast <4 x i32> %151 to <2 x i64>
  %153 = ashr <4 x i32> %149, <i32 23, i32 23, i32 23, i32 23>
  %154 = mul nsw <4 x i32> %153, <i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202>
  %155 = add <4 x i32> %154, <i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752>
  %156 = bitcast <4 x i32> %155 to <2 x i64>
  %157 = xor <2 x i64> %152, <i64 -1, i64 -1>
  %158 = and <2 x i64> %156, %157
  %159 = bitcast <2 x i64> %158 to <4 x float>
  %160 = fmul <4 x float> %159, %159
  %161 = fmul <4 x float> %160, %160
  %162 = fmul <4 x float> %159, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %163 = fmul <4 x float> %148, %161
  %164 = fsub <4 x float> %162, %163
  %165 = fmul <4 x float> %164, %164
  %166 = fmul <4 x float> %165, %165
  %167 = fmul <4 x float> %164, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %168 = fmul <4 x float> %148, %166
  %169 = fsub <4 x float> %167, %168
  %170 = fmul <4 x float> %169, %169
  %171 = fmul <4 x float> %170, %170
  %172 = fmul <4 x float> %169, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %173 = fmul <4 x float> %148, %171
  %174 = fsub <4 x float> %172, %173
  %175 = fmul <4 x float> %174, %174
  %176 = fmul <4 x float> %175, %175
  %177 = fmul <4 x float> %142, %176
  %178 = fsub <4 x float> %174, %177
  %179 = fmul <4 x float> %178, <float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000>
  %180 = fadd <4 x float> %174, %179
  %181 = fmul <4 x float> %180, %180
  %182 = fmul <4 x float> %142, %181
  %183 = fadd <4 x float> %147, %182
  %184 = getelementptr inbounds float, float* %94, i64 40
  %185 = bitcast float* %184 to <4 x float>*
  %186 = load <4 x float>, <4 x float>* %185, align 16, !alias.scope !153, !noalias !152
  %187 = fmul <4 x float> %143, <float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000>
  %188 = bitcast <4 x float> %143 to <4 x i32>
  %189 = icmp eq <4 x i32> %188, zeroinitializer
  %190 = sext <4 x i1> %189 to <4 x i32>
  %191 = bitcast <4 x i32> %190 to <2 x i64>
  %192 = ashr <4 x i32> %188, <i32 23, i32 23, i32 23, i32 23>
  %193 = mul nsw <4 x i32> %192, <i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202>
  %194 = add <4 x i32> %193, <i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752>
  %195 = bitcast <4 x i32> %194 to <2 x i64>
  %196 = xor <2 x i64> %191, <i64 -1, i64 -1>
  %197 = and <2 x i64> %195, %196
  %198 = bitcast <2 x i64> %197 to <4 x float>
  %199 = fmul <4 x float> %198, %198
  %200 = fmul <4 x float> %199, %199
  %201 = fmul <4 x float> %198, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %202 = fmul <4 x float> %187, %200
  %203 = fsub <4 x float> %201, %202
  %204 = fmul <4 x float> %203, %203
  %205 = fmul <4 x float> %204, %204
  %206 = fmul <4 x float> %203, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %207 = fmul <4 x float> %187, %205
  %208 = fsub <4 x float> %206, %207
  %209 = fmul <4 x float> %208, %208
  %210 = fmul <4 x float> %209, %209
  %211 = fmul <4 x float> %208, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %212 = fmul <4 x float> %187, %210
  %213 = fsub <4 x float> %211, %212
  %214 = fmul <4 x float> %213, %213
  %215 = fmul <4 x float> %214, %214
  %216 = fmul <4 x float> %143, %215
  %217 = fsub <4 x float> %213, %216
  %218 = fmul <4 x float> %217, <float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000>
  %219 = fadd <4 x float> %213, %218
  %220 = fmul <4 x float> %219, %219
  %221 = fmul <4 x float> %143, %220
  %222 = fadd <4 x float> %186, %221
  %223 = getelementptr inbounds float, float* %94, i64 44
  %224 = bitcast float* %223 to <4 x float>*
  %225 = load <4 x float>, <4 x float>* %224, align 16, !alias.scope !156, !noalias !152
  %226 = fmul <4 x float> %144, <float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000>
  %227 = bitcast <4 x float> %144 to <4 x i32>
  %228 = icmp eq <4 x i32> %227, zeroinitializer
  %229 = sext <4 x i1> %228 to <4 x i32>
  %230 = bitcast <4 x i32> %229 to <2 x i64>
  %231 = ashr <4 x i32> %227, <i32 23, i32 23, i32 23, i32 23>
  %232 = mul nsw <4 x i32> %231, <i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202>
  %233 = add <4 x i32> %232, <i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752>
  %234 = bitcast <4 x i32> %233 to <2 x i64>
  %235 = xor <2 x i64> %230, <i64 -1, i64 -1>
  %236 = and <2 x i64> %234, %235
  %237 = bitcast <2 x i64> %236 to <4 x float>
  %238 = fmul <4 x float> %237, %237
  %239 = fmul <4 x float> %238, %238
  %240 = fmul <4 x float> %237, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %241 = fmul <4 x float> %226, %239
  %242 = fsub <4 x float> %240, %241
  %243 = fmul <4 x float> %242, %242
  %244 = fmul <4 x float> %243, %243
  %245 = fmul <4 x float> %242, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %246 = fmul <4 x float> %226, %244
  %247 = fsub <4 x float> %245, %246
  %248 = fmul <4 x float> %247, %247
  %249 = fmul <4 x float> %248, %248
  %250 = fmul <4 x float> %247, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %251 = fmul <4 x float> %226, %249
  %252 = fsub <4 x float> %250, %251
  %253 = fmul <4 x float> %252, %252
  %254 = fmul <4 x float> %253, %253
  %255 = fmul <4 x float> %144, %254
  %256 = fsub <4 x float> %252, %255
  %257 = fmul <4 x float> %256, <float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000>
  %258 = fadd <4 x float> %252, %257
  %259 = fmul <4 x float> %258, %258
  %260 = fmul <4 x float> %144, %259
  %261 = fadd <4 x float> %225, %260
  %262 = fsub <4 x float> %183, %222
  %263 = fmul <4 x float> %262, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %264 = bitcast float* %95 to <4 x float>*
  store <4 x float> %263, <4 x float>* %264, align 16, !alias.scope !159, !noalias !164
  %265 = fadd <4 x float> %183, %222
  %266 = fmul <4 x float> %265, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %267 = bitcast float* %96 to <4 x float>*
  store <4 x float> %266, <4 x float>* %267, align 16, !alias.scope !167, !noalias !170
  %268 = bitcast float* %97 to <4 x float>*
  store <4 x float> %261, <4 x float>* %268, align 16, !alias.scope !171, !noalias !174
  %269 = add i64 %83, 4
  %270 = load i64*, i64** %75, align 8
  %271 = load i64, i64* %270, align 8
  %272 = icmp ult i64 %269, %271
  br i1 %272, label %82, label %81
}

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.x86.sse41.blendvps(<4 x float>, <4 x float>, <4 x float>) #18

; Function Attrs: nounwind ssp uwtable
define internal i32 @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_SSE49SRGBToXYBERKNS_6Image3IfEEPKfPS0_PS6_E3$_1E12CallInitFuncEPvm"(i8* nocapture readonly, i64) #6 align 2 {
  %3 = bitcast i8* %0 to i32 (i64)**
  %4 = load i32 (i64)*, i32 (i64)** %3, align 8
  %5 = tail call i32 %4(i64 %1) #13
  %6 = icmp ne i32 %5, 0
  %7 = sext i1 %6 to i32
  ret i32 %7
}

; Function Attrs: nounwind ssp uwtable
define internal void @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_SSE49SRGBToXYBERKNS_6Image3IfEEPKfPS0_PS6_E3$_1E12CallDataFuncEPvjm"(i8* nocapture readonly, i32, i64) #6 align 2 {
  %4 = getelementptr inbounds i8, i8* %0, i64 8
  %5 = bitcast i8* %4 to %class.anon.1**
  %6 = load %class.anon.1*, %class.anon.1** %5, align 8
  tail call fastcc void @"_ZZN3jxl6N_SSE49SRGBToXYBERKNS_6Image3IfEEPKfPNS_10ThreadPoolEPS2_ENK3$_1clEii"(%class.anon.1* %6, i32 %1)
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal fastcc void @"_ZZN3jxl6N_SSE49SRGBToXYBERKNS_6Image3IfEEPKfPNS_10ThreadPoolEPS2_ENK3$_1clEii"(%class.anon.1* nocapture readonly, i32) unnamed_addr #17 align 2 {
  %3 = sext i32 %1 to i64
  %4 = getelementptr inbounds %class.anon.1, %class.anon.1* %0, i64 0, i32 0
  %5 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %4, align 8
  %6 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 0, i32 0, i32 4
  %7 = load i64, i64* %6, align 8
  %8 = mul i64 %7, %3
  %9 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %10 = load i8*, i8** %9, align 8
  %11 = ptrtoint i8* %10 to i64
  %12 = and i64 %11, 63
  %13 = icmp eq i64 %12, 0
  tail call void @llvm.assume(i1 %13) #13
  %14 = getelementptr inbounds i8, i8* %10, i64 %8
  %15 = ptrtoint i8* %14 to i64
  %16 = and i64 %15, 63
  %17 = icmp eq i64 %16, 0
  tail call void @llvm.assume(i1 %17) #13
  %18 = bitcast i8* %14 to float*
  %19 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %20 = load i8*, i8** %19, align 8
  %21 = ptrtoint i8* %20 to i64
  %22 = and i64 %21, 63
  %23 = icmp eq i64 %22, 0
  tail call void @llvm.assume(i1 %23) #13
  %24 = getelementptr inbounds i8, i8* %20, i64 %8
  %25 = ptrtoint i8* %24 to i64
  %26 = and i64 %25, 63
  %27 = icmp eq i64 %26, 0
  tail call void @llvm.assume(i1 %27) #13
  %28 = bitcast i8* %24 to float*
  %29 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %30 = load i8*, i8** %29, align 8
  %31 = ptrtoint i8* %30 to i64
  %32 = and i64 %31, 63
  %33 = icmp eq i64 %32, 0
  tail call void @llvm.assume(i1 %33) #13
  %34 = getelementptr inbounds i8, i8* %30, i64 %8
  %35 = ptrtoint i8* %34 to i64
  %36 = and i64 %35, 63
  %37 = icmp eq i64 %36, 0
  tail call void @llvm.assume(i1 %37) #13
  %38 = bitcast i8* %34 to float*
  %39 = getelementptr inbounds %class.anon.1, %class.anon.1* %0, i64 0, i32 1
  %40 = load %"class.jxl::Image3"**, %"class.jxl::Image3"*** %39, align 8
  %41 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %40, align 8
  %42 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %41, i64 0, i32 0, i64 0, i32 0, i32 4
  %43 = load i64, i64* %42, align 8
  %44 = mul i64 %43, %3
  %45 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %41, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %46 = load i8*, i8** %45, align 8
  %47 = ptrtoint i8* %46 to i64
  %48 = and i64 %47, 63
  %49 = icmp eq i64 %48, 0
  tail call void @llvm.assume(i1 %49) #13
  %50 = getelementptr inbounds i8, i8* %46, i64 %44
  %51 = ptrtoint i8* %50 to i64
  %52 = and i64 %51, 63
  %53 = icmp eq i64 %52, 0
  tail call void @llvm.assume(i1 %53) #13
  %54 = bitcast i8* %50 to float*
  %55 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %41, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %56 = load i8*, i8** %55, align 8
  %57 = ptrtoint i8* %56 to i64
  %58 = and i64 %57, 63
  %59 = icmp eq i64 %58, 0
  tail call void @llvm.assume(i1 %59) #13
  %60 = getelementptr inbounds i8, i8* %56, i64 %44
  %61 = ptrtoint i8* %60 to i64
  %62 = and i64 %61, 63
  %63 = icmp eq i64 %62, 0
  tail call void @llvm.assume(i1 %63) #13
  %64 = bitcast i8* %60 to float*
  %65 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %41, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %66 = load i8*, i8** %65, align 8
  %67 = ptrtoint i8* %66 to i64
  %68 = and i64 %67, 63
  %69 = icmp eq i64 %68, 0
  tail call void @llvm.assume(i1 %69) #13
  %70 = getelementptr inbounds i8, i8* %66, i64 %44
  %71 = ptrtoint i8* %70 to i64
  %72 = and i64 %71, 63
  %73 = icmp eq i64 %72, 0
  tail call void @llvm.assume(i1 %73) #13
  %74 = bitcast i8* %70 to float*
  %75 = getelementptr inbounds %class.anon.1, %class.anon.1* %0, i64 0, i32 2
  %76 = load i64*, i64** %75, align 8
  %77 = load i64, i64* %76, align 8
  %78 = icmp eq i64 %77, 0
  br i1 %78, label %81, label %79

79:                                               ; preds = %2
  %80 = getelementptr inbounds %class.anon.1, %class.anon.1* %0, i64 0, i32 4
  br label %82

81:                                               ; preds = %82, %2
  ret void

82:                                               ; preds = %79, %82
  %83 = phi i64 [ 0, %79 ], [ %350, %82 ]
  %84 = getelementptr inbounds float, float* %18, i64 %83
  %85 = bitcast float* %84 to <4 x i32>*
  %86 = load <4 x i32>, <4 x i32>* %85, align 16, !alias.scope !175
  %87 = and <4 x i32> %86, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %88 = and <4 x i32> %86, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %89 = bitcast <4 x i32> %88 to <4 x float>
  %90 = fmul <4 x float> %89, <float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000>
  fence acq_rel
  %91 = fmul <4 x float> %89, <float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000>
  %92 = fadd <4 x float> %91, <float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000>
  %93 = fmul <4 x float> %89, <float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000>
  %94 = fadd <4 x float> %93, <float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000>
  fence acq_rel
  %95 = fmul <4 x float> %92, %89
  %96 = fadd <4 x float> %95, <float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000>
  %97 = fmul <4 x float> %94, %89
  %98 = fadd <4 x float> %97, <float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000>
  fence acq_rel
  %99 = fmul <4 x float> %96, %89
  %100 = fadd <4 x float> %99, <float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000>
  %101 = fmul <4 x float> %98, %89
  %102 = fadd <4 x float> %101, <float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000>
  fence acq_rel
  %103 = fmul <4 x float> %100, %89
  %104 = fadd <4 x float> %103, <float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000>
  %105 = fmul <4 x float> %102, %89
  %106 = fadd <4 x float> %105, <float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000>
  fence acq_rel
  %107 = fdiv <4 x float> %104, %106
  %108 = fcmp ogt <4 x float> %89, <float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000>
  %109 = select <4 x i1> %108, <4 x float> %107, <4 x float> %90
  %110 = bitcast <4 x float> %109 to <4 x i32>
  %111 = and <4 x i32> %110, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %112 = or <4 x i32> %111, %87
  %113 = bitcast <4 x i32> %112 to <4 x float>
  %114 = getelementptr inbounds float, float* %28, i64 %83
  %115 = bitcast float* %114 to <4 x i32>*
  %116 = load <4 x i32>, <4 x i32>* %115, align 16, !alias.scope !178
  %117 = and <4 x i32> %116, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %118 = and <4 x i32> %116, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %119 = bitcast <4 x i32> %118 to <4 x float>
  %120 = fmul <4 x float> %119, <float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000>
  fence acq_rel
  %121 = fmul <4 x float> %119, <float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000>
  %122 = fadd <4 x float> %121, <float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000>
  %123 = fmul <4 x float> %119, <float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000>
  %124 = fadd <4 x float> %123, <float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000>
  fence acq_rel
  %125 = fmul <4 x float> %122, %119
  %126 = fadd <4 x float> %125, <float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000>
  %127 = fmul <4 x float> %124, %119
  %128 = fadd <4 x float> %127, <float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000>
  fence acq_rel
  %129 = fmul <4 x float> %126, %119
  %130 = fadd <4 x float> %129, <float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000>
  %131 = fmul <4 x float> %128, %119
  %132 = fadd <4 x float> %131, <float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000>
  fence acq_rel
  %133 = fmul <4 x float> %130, %119
  %134 = fadd <4 x float> %133, <float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000>
  %135 = fmul <4 x float> %132, %119
  %136 = fadd <4 x float> %135, <float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000>
  fence acq_rel
  %137 = fdiv <4 x float> %134, %136
  %138 = fcmp ogt <4 x float> %119, <float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000>
  %139 = select <4 x i1> %138, <4 x float> %137, <4 x float> %120
  %140 = bitcast <4 x float> %139 to <4 x i32>
  %141 = and <4 x i32> %140, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %142 = or <4 x i32> %141, %117
  %143 = bitcast <4 x i32> %142 to <4 x float>
  %144 = getelementptr inbounds float, float* %38, i64 %83
  %145 = bitcast float* %144 to <4 x i32>*
  %146 = load <4 x i32>, <4 x i32>* %145, align 16, !alias.scope !181
  %147 = and <4 x i32> %146, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %148 = and <4 x i32> %146, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %149 = bitcast <4 x i32> %148 to <4 x float>
  %150 = fmul <4 x float> %149, <float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000>
  fence acq_rel
  %151 = fmul <4 x float> %149, <float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000>
  %152 = fadd <4 x float> %151, <float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000>
  %153 = fmul <4 x float> %149, <float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000>
  %154 = fadd <4 x float> %153, <float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000>
  fence acq_rel
  %155 = fmul <4 x float> %152, %149
  %156 = fadd <4 x float> %155, <float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000>
  %157 = fmul <4 x float> %154, %149
  %158 = fadd <4 x float> %157, <float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000>
  fence acq_rel
  %159 = fmul <4 x float> %156, %149
  %160 = fadd <4 x float> %159, <float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000>
  %161 = fmul <4 x float> %158, %149
  %162 = fadd <4 x float> %161, <float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000>
  fence acq_rel
  %163 = fmul <4 x float> %160, %149
  %164 = fadd <4 x float> %163, <float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000>
  %165 = fmul <4 x float> %162, %149
  %166 = fadd <4 x float> %165, <float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000>
  fence acq_rel
  %167 = fdiv <4 x float> %164, %166
  %168 = fcmp ogt <4 x float> %149, <float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000>
  %169 = select <4 x i1> %168, <4 x float> %167, <4 x float> %150
  %170 = bitcast <4 x float> %169 to <4 x i32>
  %171 = and <4 x i32> %170, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %172 = or <4 x i32> %171, %147
  %173 = bitcast <4 x i32> %172 to <4 x float>
  %174 = load float**, float*** %80, align 8
  %175 = load float*, float** %174, align 8
  %176 = getelementptr inbounds float, float* %54, i64 %83
  %177 = getelementptr inbounds float, float* %64, i64 %83
  %178 = getelementptr inbounds float, float* %74, i64 %83
  %179 = bitcast float* %175 to <4 x float>*
  %180 = load <4 x float>, <4 x float>* %179, align 16, !alias.scope !184, !noalias !191
  %181 = getelementptr inbounds float, float* %175, i64 4
  %182 = bitcast float* %181 to <4 x float>*
  %183 = load <4 x float>, <4 x float>* %182, align 16, !alias.scope !198, !noalias !191
  %184 = getelementptr inbounds float, float* %175, i64 8
  %185 = bitcast float* %184 to <4 x float>*
  %186 = load <4 x float>, <4 x float>* %185, align 16, !alias.scope !201, !noalias !191
  %187 = getelementptr inbounds float, float* %175, i64 12
  %188 = bitcast float* %187 to <4 x float>*
  %189 = load <4 x float>, <4 x float>* %188, align 16, !alias.scope !204, !noalias !191
  %190 = getelementptr inbounds float, float* %175, i64 16
  %191 = bitcast float* %190 to <4 x float>*
  %192 = load <4 x float>, <4 x float>* %191, align 16, !alias.scope !207, !noalias !191
  %193 = getelementptr inbounds float, float* %175, i64 20
  %194 = bitcast float* %193 to <4 x float>*
  %195 = load <4 x float>, <4 x float>* %194, align 16, !alias.scope !210, !noalias !191
  %196 = getelementptr inbounds float, float* %175, i64 24
  %197 = bitcast float* %196 to <4 x float>*
  %198 = load <4 x float>, <4 x float>* %197, align 16, !alias.scope !213, !noalias !191
  %199 = getelementptr inbounds float, float* %175, i64 28
  %200 = bitcast float* %199 to <4 x float>*
  %201 = load <4 x float>, <4 x float>* %200, align 16, !alias.scope !216, !noalias !191
  %202 = getelementptr inbounds float, float* %175, i64 32
  %203 = bitcast float* %202 to <4 x float>*
  %204 = load <4 x float>, <4 x float>* %203, align 16, !alias.scope !219, !noalias !191
  %205 = fmul <4 x float> %186, %173
  %206 = fadd <4 x float> %205, <float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000>
  %207 = fmul <4 x float> %183, %143
  %208 = fadd <4 x float> %207, %206
  %209 = fmul <4 x float> %180, %113
  %210 = fadd <4 x float> %209, %208
  %211 = fmul <4 x float> %195, %173
  %212 = fadd <4 x float> %211, <float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000>
  %213 = fmul <4 x float> %192, %143
  %214 = fadd <4 x float> %213, %212
  %215 = fmul <4 x float> %189, %113
  %216 = fadd <4 x float> %215, %214
  %217 = fmul <4 x float> %204, %173
  %218 = fadd <4 x float> %217, <float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000>
  %219 = fmul <4 x float> %201, %143
  %220 = fadd <4 x float> %219, %218
  %221 = fmul <4 x float> %198, %113
  %222 = fadd <4 x float> %221, %220
  %223 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %210, <4 x float> zeroinitializer, <4 x float> %210) #13
  %224 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %216, <4 x float> zeroinitializer, <4 x float> %216) #13
  %225 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %222, <4 x float> zeroinitializer, <4 x float> %222) #13
  %226 = getelementptr inbounds float, float* %175, i64 36
  %227 = bitcast float* %226 to <4 x float>*
  %228 = load <4 x float>, <4 x float>* %227, align 16, !alias.scope !222, !noalias !225
  %229 = fmul <4 x float> %223, <float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000>
  %230 = bitcast <4 x float> %223 to <4 x i32>
  %231 = icmp eq <4 x i32> %230, zeroinitializer
  %232 = sext <4 x i1> %231 to <4 x i32>
  %233 = bitcast <4 x i32> %232 to <2 x i64>
  %234 = ashr <4 x i32> %230, <i32 23, i32 23, i32 23, i32 23>
  %235 = mul nsw <4 x i32> %234, <i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202>
  %236 = add <4 x i32> %235, <i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752>
  %237 = bitcast <4 x i32> %236 to <2 x i64>
  %238 = xor <2 x i64> %233, <i64 -1, i64 -1>
  %239 = and <2 x i64> %237, %238
  %240 = bitcast <2 x i64> %239 to <4 x float>
  %241 = fmul <4 x float> %240, %240
  %242 = fmul <4 x float> %241, %241
  %243 = fmul <4 x float> %240, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %244 = fmul <4 x float> %229, %242
  %245 = fsub <4 x float> %243, %244
  %246 = fmul <4 x float> %245, %245
  %247 = fmul <4 x float> %246, %246
  %248 = fmul <4 x float> %245, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %249 = fmul <4 x float> %229, %247
  %250 = fsub <4 x float> %248, %249
  %251 = fmul <4 x float> %250, %250
  %252 = fmul <4 x float> %251, %251
  %253 = fmul <4 x float> %250, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %254 = fmul <4 x float> %229, %252
  %255 = fsub <4 x float> %253, %254
  %256 = fmul <4 x float> %255, %255
  %257 = fmul <4 x float> %256, %256
  %258 = fmul <4 x float> %223, %257
  %259 = fsub <4 x float> %255, %258
  %260 = fmul <4 x float> %259, <float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000>
  %261 = fadd <4 x float> %255, %260
  %262 = fmul <4 x float> %261, %261
  %263 = fmul <4 x float> %223, %262
  %264 = fadd <4 x float> %228, %263
  %265 = getelementptr inbounds float, float* %175, i64 40
  %266 = bitcast float* %265 to <4 x float>*
  %267 = load <4 x float>, <4 x float>* %266, align 16, !alias.scope !226, !noalias !225
  %268 = fmul <4 x float> %224, <float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000>
  %269 = bitcast <4 x float> %224 to <4 x i32>
  %270 = icmp eq <4 x i32> %269, zeroinitializer
  %271 = sext <4 x i1> %270 to <4 x i32>
  %272 = bitcast <4 x i32> %271 to <2 x i64>
  %273 = ashr <4 x i32> %269, <i32 23, i32 23, i32 23, i32 23>
  %274 = mul nsw <4 x i32> %273, <i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202>
  %275 = add <4 x i32> %274, <i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752>
  %276 = bitcast <4 x i32> %275 to <2 x i64>
  %277 = xor <2 x i64> %272, <i64 -1, i64 -1>
  %278 = and <2 x i64> %276, %277
  %279 = bitcast <2 x i64> %278 to <4 x float>
  %280 = fmul <4 x float> %279, %279
  %281 = fmul <4 x float> %280, %280
  %282 = fmul <4 x float> %279, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %283 = fmul <4 x float> %268, %281
  %284 = fsub <4 x float> %282, %283
  %285 = fmul <4 x float> %284, %284
  %286 = fmul <4 x float> %285, %285
  %287 = fmul <4 x float> %284, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %288 = fmul <4 x float> %268, %286
  %289 = fsub <4 x float> %287, %288
  %290 = fmul <4 x float> %289, %289
  %291 = fmul <4 x float> %290, %290
  %292 = fmul <4 x float> %289, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %293 = fmul <4 x float> %268, %291
  %294 = fsub <4 x float> %292, %293
  %295 = fmul <4 x float> %294, %294
  %296 = fmul <4 x float> %295, %295
  %297 = fmul <4 x float> %224, %296
  %298 = fsub <4 x float> %294, %297
  %299 = fmul <4 x float> %298, <float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000>
  %300 = fadd <4 x float> %294, %299
  %301 = fmul <4 x float> %300, %300
  %302 = fmul <4 x float> %224, %301
  %303 = fadd <4 x float> %267, %302
  %304 = getelementptr inbounds float, float* %175, i64 44
  %305 = bitcast float* %304 to <4 x float>*
  %306 = load <4 x float>, <4 x float>* %305, align 16, !alias.scope !229, !noalias !225
  %307 = fmul <4 x float> %225, <float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000>
  %308 = bitcast <4 x float> %225 to <4 x i32>
  %309 = icmp eq <4 x i32> %308, zeroinitializer
  %310 = sext <4 x i1> %309 to <4 x i32>
  %311 = bitcast <4 x i32> %310 to <2 x i64>
  %312 = ashr <4 x i32> %308, <i32 23, i32 23, i32 23, i32 23>
  %313 = mul nsw <4 x i32> %312, <i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202>
  %314 = add <4 x i32> %313, <i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752>
  %315 = bitcast <4 x i32> %314 to <2 x i64>
  %316 = xor <2 x i64> %311, <i64 -1, i64 -1>
  %317 = and <2 x i64> %315, %316
  %318 = bitcast <2 x i64> %317 to <4 x float>
  %319 = fmul <4 x float> %318, %318
  %320 = fmul <4 x float> %319, %319
  %321 = fmul <4 x float> %318, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %322 = fmul <4 x float> %307, %320
  %323 = fsub <4 x float> %321, %322
  %324 = fmul <4 x float> %323, %323
  %325 = fmul <4 x float> %324, %324
  %326 = fmul <4 x float> %323, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %327 = fmul <4 x float> %307, %325
  %328 = fsub <4 x float> %326, %327
  %329 = fmul <4 x float> %328, %328
  %330 = fmul <4 x float> %329, %329
  %331 = fmul <4 x float> %328, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %332 = fmul <4 x float> %307, %330
  %333 = fsub <4 x float> %331, %332
  %334 = fmul <4 x float> %333, %333
  %335 = fmul <4 x float> %334, %334
  %336 = fmul <4 x float> %225, %335
  %337 = fsub <4 x float> %333, %336
  %338 = fmul <4 x float> %337, <float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000>
  %339 = fadd <4 x float> %333, %338
  %340 = fmul <4 x float> %339, %339
  %341 = fmul <4 x float> %225, %340
  %342 = fadd <4 x float> %306, %341
  %343 = fsub <4 x float> %264, %303
  %344 = fmul <4 x float> %343, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %345 = bitcast float* %176 to <4 x float>*
  store <4 x float> %344, <4 x float>* %345, align 16, !alias.scope !232, !noalias !237
  %346 = fadd <4 x float> %264, %303
  %347 = fmul <4 x float> %346, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %348 = bitcast float* %177 to <4 x float>*
  store <4 x float> %347, <4 x float>* %348, align 16, !alias.scope !240, !noalias !243
  %349 = bitcast float* %178 to <4 x float>*
  store <4 x float> %342, <4 x float>* %349, align 16, !alias.scope !244, !noalias !247
  %350 = add i64 %83, 4
  %351 = load i64*, i64** %75, align 8
  %352 = load i64, i64* %351, align 8
  %353 = icmp ult i64 %350, %352
  br i1 %353, label %82, label %81
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_SSE418SRGBToXYBAndLinearERKNS_6Image3IfEEPKfPS0_PS6_SC_E3$_2E12CallInitFuncEPvm"(i8* nocapture readonly, i64) #6 align 2 {
  %3 = bitcast i8* %0 to i32 (i64)**
  %4 = load i32 (i64)*, i32 (i64)** %3, align 8
  %5 = tail call i32 %4(i64 %1) #13
  %6 = icmp ne i32 %5, 0
  %7 = sext i1 %6 to i32
  ret i32 %7
}

; Function Attrs: nounwind ssp uwtable
define internal void @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_SSE418SRGBToXYBAndLinearERKNS_6Image3IfEEPKfPS0_PS6_SC_E3$_2E12CallDataFuncEPvjm"(i8* nocapture readonly, i32, i64) #6 align 2 {
  %4 = getelementptr inbounds i8, i8* %0, i64 8
  %5 = bitcast i8* %4 to %class.anon.2**
  %6 = load %class.anon.2*, %class.anon.2** %5, align 8
  tail call fastcc void @"_ZZN3jxl6N_SSE418SRGBToXYBAndLinearERKNS_6Image3IfEEPKfPNS_10ThreadPoolEPS2_S9_ENK3$_2clEii"(%class.anon.2* %6, i32 %1)
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal fastcc void @"_ZZN3jxl6N_SSE418SRGBToXYBAndLinearERKNS_6Image3IfEEPKfPNS_10ThreadPoolEPS2_S9_ENK3$_2clEii"(%class.anon.2* nocapture readonly, i32) unnamed_addr #17 align 2 {
  %3 = sext i32 %1 to i64
  %4 = getelementptr inbounds %class.anon.2, %class.anon.2* %0, i64 0, i32 0
  %5 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %4, align 8
  %6 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 0, i32 0, i32 4
  %7 = load i64, i64* %6, align 8
  %8 = mul i64 %7, %3
  %9 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %10 = load i8*, i8** %9, align 8
  %11 = ptrtoint i8* %10 to i64
  %12 = and i64 %11, 63
  %13 = icmp eq i64 %12, 0
  tail call void @llvm.assume(i1 %13) #13
  %14 = getelementptr inbounds i8, i8* %10, i64 %8
  %15 = ptrtoint i8* %14 to i64
  %16 = and i64 %15, 63
  %17 = icmp eq i64 %16, 0
  tail call void @llvm.assume(i1 %17) #13
  %18 = bitcast i8* %14 to float*
  %19 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %20 = load i8*, i8** %19, align 8
  %21 = ptrtoint i8* %20 to i64
  %22 = and i64 %21, 63
  %23 = icmp eq i64 %22, 0
  tail call void @llvm.assume(i1 %23) #13
  %24 = getelementptr inbounds i8, i8* %20, i64 %8
  %25 = ptrtoint i8* %24 to i64
  %26 = and i64 %25, 63
  %27 = icmp eq i64 %26, 0
  tail call void @llvm.assume(i1 %27) #13
  %28 = bitcast i8* %24 to float*
  %29 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %30 = load i8*, i8** %29, align 8
  %31 = ptrtoint i8* %30 to i64
  %32 = and i64 %31, 63
  %33 = icmp eq i64 %32, 0
  tail call void @llvm.assume(i1 %33) #13
  %34 = getelementptr inbounds i8, i8* %30, i64 %8
  %35 = ptrtoint i8* %34 to i64
  %36 = and i64 %35, 63
  %37 = icmp eq i64 %36, 0
  tail call void @llvm.assume(i1 %37) #13
  %38 = bitcast i8* %34 to float*
  %39 = getelementptr inbounds %class.anon.2, %class.anon.2* %0, i64 0, i32 1
  %40 = load %"class.jxl::Image3"**, %"class.jxl::Image3"*** %39, align 8
  %41 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %40, align 8
  %42 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %41, i64 0, i32 0, i64 0, i32 0, i32 4
  %43 = load i64, i64* %42, align 8
  %44 = mul i64 %43, %3
  %45 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %41, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %46 = load i8*, i8** %45, align 8
  %47 = ptrtoint i8* %46 to i64
  %48 = and i64 %47, 63
  %49 = icmp eq i64 %48, 0
  tail call void @llvm.assume(i1 %49) #13
  %50 = getelementptr inbounds i8, i8* %46, i64 %44
  %51 = ptrtoint i8* %50 to i64
  %52 = and i64 %51, 63
  %53 = icmp eq i64 %52, 0
  tail call void @llvm.assume(i1 %53) #13
  %54 = bitcast i8* %50 to float*
  %55 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %41, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %56 = load i8*, i8** %55, align 8
  %57 = ptrtoint i8* %56 to i64
  %58 = and i64 %57, 63
  %59 = icmp eq i64 %58, 0
  tail call void @llvm.assume(i1 %59) #13
  %60 = getelementptr inbounds i8, i8* %56, i64 %44
  %61 = ptrtoint i8* %60 to i64
  %62 = and i64 %61, 63
  %63 = icmp eq i64 %62, 0
  tail call void @llvm.assume(i1 %63) #13
  %64 = bitcast i8* %60 to float*
  %65 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %41, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %66 = load i8*, i8** %65, align 8
  %67 = ptrtoint i8* %66 to i64
  %68 = and i64 %67, 63
  %69 = icmp eq i64 %68, 0
  tail call void @llvm.assume(i1 %69) #13
  %70 = getelementptr inbounds i8, i8* %66, i64 %44
  %71 = ptrtoint i8* %70 to i64
  %72 = and i64 %71, 63
  %73 = icmp eq i64 %72, 0
  tail call void @llvm.assume(i1 %73) #13
  %74 = bitcast i8* %70 to float*
  %75 = getelementptr inbounds %class.anon.2, %class.anon.2* %0, i64 0, i32 2
  %76 = load %"class.jxl::Image3"**, %"class.jxl::Image3"*** %75, align 8
  %77 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %76, align 8
  %78 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %77, i64 0, i32 0, i64 0, i32 0, i32 4
  %79 = load i64, i64* %78, align 8
  %80 = mul i64 %79, %3
  %81 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %77, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %82 = load i8*, i8** %81, align 8
  %83 = ptrtoint i8* %82 to i64
  %84 = and i64 %83, 63
  %85 = icmp eq i64 %84, 0
  tail call void @llvm.assume(i1 %85) #13
  %86 = getelementptr inbounds i8, i8* %82, i64 %80
  %87 = ptrtoint i8* %86 to i64
  %88 = and i64 %87, 63
  %89 = icmp eq i64 %88, 0
  tail call void @llvm.assume(i1 %89) #13
  %90 = bitcast i8* %86 to float*
  %91 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %77, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %92 = load i8*, i8** %91, align 8
  %93 = ptrtoint i8* %92 to i64
  %94 = and i64 %93, 63
  %95 = icmp eq i64 %94, 0
  tail call void @llvm.assume(i1 %95) #13
  %96 = getelementptr inbounds i8, i8* %92, i64 %80
  %97 = ptrtoint i8* %96 to i64
  %98 = and i64 %97, 63
  %99 = icmp eq i64 %98, 0
  tail call void @llvm.assume(i1 %99) #13
  %100 = bitcast i8* %96 to float*
  %101 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %77, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %102 = load i8*, i8** %101, align 8
  %103 = ptrtoint i8* %102 to i64
  %104 = and i64 %103, 63
  %105 = icmp eq i64 %104, 0
  tail call void @llvm.assume(i1 %105) #13
  %106 = getelementptr inbounds i8, i8* %102, i64 %80
  %107 = ptrtoint i8* %106 to i64
  %108 = and i64 %107, 63
  %109 = icmp eq i64 %108, 0
  tail call void @llvm.assume(i1 %109) #13
  %110 = bitcast i8* %106 to float*
  %111 = getelementptr inbounds %class.anon.2, %class.anon.2* %0, i64 0, i32 3
  %112 = load i64*, i64** %111, align 8
  %113 = load i64, i64* %112, align 8
  %114 = icmp eq i64 %113, 0
  br i1 %114, label %117, label %115

115:                                              ; preds = %2
  %116 = getelementptr inbounds %class.anon.2, %class.anon.2* %0, i64 0, i32 5
  br label %118

117:                                              ; preds = %118, %2
  ret void

118:                                              ; preds = %115, %118
  %119 = phi i64 [ 0, %115 ], [ %392, %118 ]
  %120 = getelementptr inbounds float, float* %18, i64 %119
  %121 = bitcast float* %120 to <4 x i32>*
  %122 = load <4 x i32>, <4 x i32>* %121, align 16, !alias.scope !248
  %123 = and <4 x i32> %122, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %124 = and <4 x i32> %122, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %125 = bitcast <4 x i32> %124 to <4 x float>
  %126 = fmul <4 x float> %125, <float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000>
  fence acq_rel
  %127 = fmul <4 x float> %125, <float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000>
  %128 = fadd <4 x float> %127, <float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000>
  %129 = fmul <4 x float> %125, <float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000>
  %130 = fadd <4 x float> %129, <float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000>
  fence acq_rel
  %131 = fmul <4 x float> %128, %125
  %132 = fadd <4 x float> %131, <float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000>
  %133 = fmul <4 x float> %130, %125
  %134 = fadd <4 x float> %133, <float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000>
  fence acq_rel
  %135 = fmul <4 x float> %132, %125
  %136 = fadd <4 x float> %135, <float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000>
  %137 = fmul <4 x float> %134, %125
  %138 = fadd <4 x float> %137, <float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000>
  fence acq_rel
  %139 = fmul <4 x float> %136, %125
  %140 = fadd <4 x float> %139, <float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000>
  %141 = fmul <4 x float> %138, %125
  %142 = fadd <4 x float> %141, <float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000>
  fence acq_rel
  %143 = fdiv <4 x float> %140, %142
  %144 = fcmp ogt <4 x float> %125, <float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000>
  %145 = select <4 x i1> %144, <4 x float> %143, <4 x float> %126
  %146 = bitcast <4 x float> %145 to <4 x i32>
  %147 = and <4 x i32> %146, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %148 = or <4 x i32> %147, %123
  %149 = bitcast <4 x i32> %148 to <4 x float>
  %150 = getelementptr inbounds float, float* %28, i64 %119
  %151 = bitcast float* %150 to <4 x i32>*
  %152 = load <4 x i32>, <4 x i32>* %151, align 16, !alias.scope !251
  %153 = and <4 x i32> %152, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %154 = and <4 x i32> %152, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %155 = bitcast <4 x i32> %154 to <4 x float>
  %156 = fmul <4 x float> %155, <float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000>
  fence acq_rel
  %157 = fmul <4 x float> %155, <float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000>
  %158 = fadd <4 x float> %157, <float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000>
  %159 = fmul <4 x float> %155, <float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000>
  %160 = fadd <4 x float> %159, <float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000>
  fence acq_rel
  %161 = fmul <4 x float> %158, %155
  %162 = fadd <4 x float> %161, <float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000>
  %163 = fmul <4 x float> %160, %155
  %164 = fadd <4 x float> %163, <float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000>
  fence acq_rel
  %165 = fmul <4 x float> %162, %155
  %166 = fadd <4 x float> %165, <float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000>
  %167 = fmul <4 x float> %164, %155
  %168 = fadd <4 x float> %167, <float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000>
  fence acq_rel
  %169 = fmul <4 x float> %166, %155
  %170 = fadd <4 x float> %169, <float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000>
  %171 = fmul <4 x float> %168, %155
  %172 = fadd <4 x float> %171, <float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000>
  fence acq_rel
  %173 = fdiv <4 x float> %170, %172
  %174 = fcmp ogt <4 x float> %155, <float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000>
  %175 = select <4 x i1> %174, <4 x float> %173, <4 x float> %156
  %176 = bitcast <4 x float> %175 to <4 x i32>
  %177 = and <4 x i32> %176, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %178 = or <4 x i32> %177, %153
  %179 = bitcast <4 x i32> %178 to <4 x float>
  %180 = getelementptr inbounds float, float* %38, i64 %119
  %181 = bitcast float* %180 to <4 x i32>*
  %182 = load <4 x i32>, <4 x i32>* %181, align 16, !alias.scope !254
  %183 = and <4 x i32> %182, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %184 = and <4 x i32> %182, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %185 = bitcast <4 x i32> %184 to <4 x float>
  %186 = fmul <4 x float> %185, <float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000>
  fence acq_rel
  %187 = fmul <4 x float> %185, <float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000>
  %188 = fadd <4 x float> %187, <float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000>
  %189 = fmul <4 x float> %185, <float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000>
  %190 = fadd <4 x float> %189, <float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000>
  fence acq_rel
  %191 = fmul <4 x float> %188, %185
  %192 = fadd <4 x float> %191, <float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000>
  %193 = fmul <4 x float> %190, %185
  %194 = fadd <4 x float> %193, <float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000>
  fence acq_rel
  %195 = fmul <4 x float> %192, %185
  %196 = fadd <4 x float> %195, <float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000>
  %197 = fmul <4 x float> %194, %185
  %198 = fadd <4 x float> %197, <float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000>
  fence acq_rel
  %199 = fmul <4 x float> %196, %185
  %200 = fadd <4 x float> %199, <float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000>
  %201 = fmul <4 x float> %198, %185
  %202 = fadd <4 x float> %201, <float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000>
  fence acq_rel
  %203 = fdiv <4 x float> %200, %202
  %204 = fcmp ogt <4 x float> %185, <float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000>
  %205 = select <4 x i1> %204, <4 x float> %203, <4 x float> %186
  %206 = bitcast <4 x float> %205 to <4 x i32>
  %207 = and <4 x i32> %206, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %208 = or <4 x i32> %207, %183
  %209 = bitcast <4 x i32> %208 to <4 x float>
  %210 = getelementptr inbounds float, float* %54, i64 %119
  %211 = bitcast float* %210 to <4 x i32>*
  store <4 x i32> %148, <4 x i32>* %211, align 16, !alias.scope !257
  %212 = getelementptr inbounds float, float* %64, i64 %119
  %213 = bitcast float* %212 to <4 x i32>*
  store <4 x i32> %178, <4 x i32>* %213, align 16, !alias.scope !260
  %214 = getelementptr inbounds float, float* %74, i64 %119
  %215 = bitcast float* %214 to <4 x i32>*
  store <4 x i32> %208, <4 x i32>* %215, align 16, !alias.scope !263
  %216 = load float**, float*** %116, align 8
  %217 = load float*, float** %216, align 8
  %218 = getelementptr inbounds float, float* %90, i64 %119
  %219 = getelementptr inbounds float, float* %100, i64 %119
  %220 = getelementptr inbounds float, float* %110, i64 %119
  %221 = bitcast float* %217 to <4 x float>*
  %222 = load <4 x float>, <4 x float>* %221, align 16, !alias.scope !266, !noalias !273
  %223 = getelementptr inbounds float, float* %217, i64 4
  %224 = bitcast float* %223 to <4 x float>*
  %225 = load <4 x float>, <4 x float>* %224, align 16, !alias.scope !280, !noalias !273
  %226 = getelementptr inbounds float, float* %217, i64 8
  %227 = bitcast float* %226 to <4 x float>*
  %228 = load <4 x float>, <4 x float>* %227, align 16, !alias.scope !283, !noalias !273
  %229 = getelementptr inbounds float, float* %217, i64 12
  %230 = bitcast float* %229 to <4 x float>*
  %231 = load <4 x float>, <4 x float>* %230, align 16, !alias.scope !286, !noalias !273
  %232 = getelementptr inbounds float, float* %217, i64 16
  %233 = bitcast float* %232 to <4 x float>*
  %234 = load <4 x float>, <4 x float>* %233, align 16, !alias.scope !289, !noalias !273
  %235 = getelementptr inbounds float, float* %217, i64 20
  %236 = bitcast float* %235 to <4 x float>*
  %237 = load <4 x float>, <4 x float>* %236, align 16, !alias.scope !292, !noalias !273
  %238 = getelementptr inbounds float, float* %217, i64 24
  %239 = bitcast float* %238 to <4 x float>*
  %240 = load <4 x float>, <4 x float>* %239, align 16, !alias.scope !295, !noalias !273
  %241 = getelementptr inbounds float, float* %217, i64 28
  %242 = bitcast float* %241 to <4 x float>*
  %243 = load <4 x float>, <4 x float>* %242, align 16, !alias.scope !298, !noalias !273
  %244 = getelementptr inbounds float, float* %217, i64 32
  %245 = bitcast float* %244 to <4 x float>*
  %246 = load <4 x float>, <4 x float>* %245, align 16, !alias.scope !301, !noalias !273
  %247 = fmul <4 x float> %228, %209
  %248 = fadd <4 x float> %247, <float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000>
  %249 = fmul <4 x float> %225, %179
  %250 = fadd <4 x float> %249, %248
  %251 = fmul <4 x float> %222, %149
  %252 = fadd <4 x float> %251, %250
  %253 = fmul <4 x float> %237, %209
  %254 = fadd <4 x float> %253, <float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000>
  %255 = fmul <4 x float> %234, %179
  %256 = fadd <4 x float> %255, %254
  %257 = fmul <4 x float> %231, %149
  %258 = fadd <4 x float> %257, %256
  %259 = fmul <4 x float> %246, %209
  %260 = fadd <4 x float> %259, <float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000>
  %261 = fmul <4 x float> %243, %179
  %262 = fadd <4 x float> %261, %260
  %263 = fmul <4 x float> %240, %149
  %264 = fadd <4 x float> %263, %262
  %265 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %252, <4 x float> zeroinitializer, <4 x float> %252) #13
  %266 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %258, <4 x float> zeroinitializer, <4 x float> %258) #13
  %267 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %264, <4 x float> zeroinitializer, <4 x float> %264) #13
  %268 = getelementptr inbounds float, float* %217, i64 36
  %269 = bitcast float* %268 to <4 x float>*
  %270 = load <4 x float>, <4 x float>* %269, align 16, !alias.scope !304, !noalias !307
  %271 = fmul <4 x float> %265, <float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000>
  %272 = bitcast <4 x float> %265 to <4 x i32>
  %273 = icmp eq <4 x i32> %272, zeroinitializer
  %274 = sext <4 x i1> %273 to <4 x i32>
  %275 = bitcast <4 x i32> %274 to <2 x i64>
  %276 = ashr <4 x i32> %272, <i32 23, i32 23, i32 23, i32 23>
  %277 = mul nsw <4 x i32> %276, <i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202>
  %278 = add <4 x i32> %277, <i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752>
  %279 = bitcast <4 x i32> %278 to <2 x i64>
  %280 = xor <2 x i64> %275, <i64 -1, i64 -1>
  %281 = and <2 x i64> %279, %280
  %282 = bitcast <2 x i64> %281 to <4 x float>
  %283 = fmul <4 x float> %282, %282
  %284 = fmul <4 x float> %283, %283
  %285 = fmul <4 x float> %282, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %286 = fmul <4 x float> %271, %284
  %287 = fsub <4 x float> %285, %286
  %288 = fmul <4 x float> %287, %287
  %289 = fmul <4 x float> %288, %288
  %290 = fmul <4 x float> %287, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %291 = fmul <4 x float> %271, %289
  %292 = fsub <4 x float> %290, %291
  %293 = fmul <4 x float> %292, %292
  %294 = fmul <4 x float> %293, %293
  %295 = fmul <4 x float> %292, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %296 = fmul <4 x float> %271, %294
  %297 = fsub <4 x float> %295, %296
  %298 = fmul <4 x float> %297, %297
  %299 = fmul <4 x float> %298, %298
  %300 = fmul <4 x float> %265, %299
  %301 = fsub <4 x float> %297, %300
  %302 = fmul <4 x float> %301, <float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000>
  %303 = fadd <4 x float> %297, %302
  %304 = fmul <4 x float> %303, %303
  %305 = fmul <4 x float> %265, %304
  %306 = fadd <4 x float> %270, %305
  %307 = getelementptr inbounds float, float* %217, i64 40
  %308 = bitcast float* %307 to <4 x float>*
  %309 = load <4 x float>, <4 x float>* %308, align 16, !alias.scope !308, !noalias !307
  %310 = fmul <4 x float> %266, <float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000>
  %311 = bitcast <4 x float> %266 to <4 x i32>
  %312 = icmp eq <4 x i32> %311, zeroinitializer
  %313 = sext <4 x i1> %312 to <4 x i32>
  %314 = bitcast <4 x i32> %313 to <2 x i64>
  %315 = ashr <4 x i32> %311, <i32 23, i32 23, i32 23, i32 23>
  %316 = mul nsw <4 x i32> %315, <i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202>
  %317 = add <4 x i32> %316, <i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752>
  %318 = bitcast <4 x i32> %317 to <2 x i64>
  %319 = xor <2 x i64> %314, <i64 -1, i64 -1>
  %320 = and <2 x i64> %318, %319
  %321 = bitcast <2 x i64> %320 to <4 x float>
  %322 = fmul <4 x float> %321, %321
  %323 = fmul <4 x float> %322, %322
  %324 = fmul <4 x float> %321, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %325 = fmul <4 x float> %310, %323
  %326 = fsub <4 x float> %324, %325
  %327 = fmul <4 x float> %326, %326
  %328 = fmul <4 x float> %327, %327
  %329 = fmul <4 x float> %326, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %330 = fmul <4 x float> %310, %328
  %331 = fsub <4 x float> %329, %330
  %332 = fmul <4 x float> %331, %331
  %333 = fmul <4 x float> %332, %332
  %334 = fmul <4 x float> %331, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %335 = fmul <4 x float> %310, %333
  %336 = fsub <4 x float> %334, %335
  %337 = fmul <4 x float> %336, %336
  %338 = fmul <4 x float> %337, %337
  %339 = fmul <4 x float> %266, %338
  %340 = fsub <4 x float> %336, %339
  %341 = fmul <4 x float> %340, <float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000>
  %342 = fadd <4 x float> %336, %341
  %343 = fmul <4 x float> %342, %342
  %344 = fmul <4 x float> %266, %343
  %345 = fadd <4 x float> %309, %344
  %346 = getelementptr inbounds float, float* %217, i64 44
  %347 = bitcast float* %346 to <4 x float>*
  %348 = load <4 x float>, <4 x float>* %347, align 16, !alias.scope !311, !noalias !307
  %349 = fmul <4 x float> %267, <float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000>
  %350 = bitcast <4 x float> %267 to <4 x i32>
  %351 = icmp eq <4 x i32> %350, zeroinitializer
  %352 = sext <4 x i1> %351 to <4 x i32>
  %353 = bitcast <4 x i32> %352 to <2 x i64>
  %354 = ashr <4 x i32> %350, <i32 23, i32 23, i32 23, i32 23>
  %355 = mul nsw <4 x i32> %354, <i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202>
  %356 = add <4 x i32> %355, <i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752>
  %357 = bitcast <4 x i32> %356 to <2 x i64>
  %358 = xor <2 x i64> %353, <i64 -1, i64 -1>
  %359 = and <2 x i64> %357, %358
  %360 = bitcast <2 x i64> %359 to <4 x float>
  %361 = fmul <4 x float> %360, %360
  %362 = fmul <4 x float> %361, %361
  %363 = fmul <4 x float> %360, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %364 = fmul <4 x float> %349, %362
  %365 = fsub <4 x float> %363, %364
  %366 = fmul <4 x float> %365, %365
  %367 = fmul <4 x float> %366, %366
  %368 = fmul <4 x float> %365, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %369 = fmul <4 x float> %349, %367
  %370 = fsub <4 x float> %368, %369
  %371 = fmul <4 x float> %370, %370
  %372 = fmul <4 x float> %371, %371
  %373 = fmul <4 x float> %370, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %374 = fmul <4 x float> %349, %372
  %375 = fsub <4 x float> %373, %374
  %376 = fmul <4 x float> %375, %375
  %377 = fmul <4 x float> %376, %376
  %378 = fmul <4 x float> %267, %377
  %379 = fsub <4 x float> %375, %378
  %380 = fmul <4 x float> %379, <float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000>
  %381 = fadd <4 x float> %375, %380
  %382 = fmul <4 x float> %381, %381
  %383 = fmul <4 x float> %267, %382
  %384 = fadd <4 x float> %348, %383
  %385 = fsub <4 x float> %306, %345
  %386 = fmul <4 x float> %385, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %387 = bitcast float* %218 to <4 x float>*
  store <4 x float> %386, <4 x float>* %387, align 16, !alias.scope !314, !noalias !319
  %388 = fadd <4 x float> %306, %345
  %389 = fmul <4 x float> %388, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %390 = bitcast float* %219 to <4 x float>*
  store <4 x float> %389, <4 x float>* %390, align 16, !alias.scope !322, !noalias !325
  %391 = bitcast float* %220 to <4 x float>*
  store <4 x float> %384, <4 x float>* %391, align 16, !alias.scope !326, !noalias !329
  %392 = add i64 %119, 4
  %393 = load i64*, i64** %111, align 8
  %394 = load i64, i64* %393, align 8
  %395 = icmp ult i64 %392, %394
  br i1 %395, label %118, label %117
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_SSE410RgbToYcbcrERKNS_5PlaneIfEES8_S8_PS6_S9_S9_PS0_E3$_3E12CallInitFuncEPvm"(i8* nocapture readonly, i64) #6 align 2 {
  %3 = bitcast i8* %0 to i32 (i64)**
  %4 = load i32 (i64)*, i32 (i64)** %3, align 8
  %5 = tail call i32 %4(i64 %1) #13
  %6 = icmp ne i32 %5, 0
  %7 = sext i1 %6 to i32
  ret i32 %7
}

; Function Attrs: nounwind ssp uwtable
define internal void @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_SSE410RgbToYcbcrERKNS_5PlaneIfEES8_S8_PS6_S9_S9_PS0_E3$_3E12CallDataFuncEPvjm"(i8* nocapture readonly, i32, i64) #6 align 2 {
  %4 = getelementptr inbounds i8, i8* %0, i64 8
  %5 = bitcast i8* %4 to %class.anon.94**
  %6 = load %class.anon.94*, %class.anon.94** %5, align 8
  tail call fastcc void @"_ZZN3jxl6N_SSE410RgbToYcbcrERKNS_5PlaneIfEES4_S4_PS2_S5_S5_PNS_10ThreadPoolEENK3$_3clEii"(%class.anon.94* %6, i32 %1)
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal fastcc void @"_ZZN3jxl6N_SSE410RgbToYcbcrERKNS_5PlaneIfEES4_S4_PS2_S5_S5_PNS_10ThreadPoolEENK3$_3clEii"(%class.anon.94* nocapture readonly, i32) unnamed_addr #17 align 2 {
  %3 = sext i32 %1 to i64
  %4 = getelementptr inbounds %class.anon.94, %class.anon.94* %0, i64 0, i32 0
  %5 = load i64*, i64** %4, align 8
  %6 = load i64, i64* %5, align 8
  %7 = mul i64 %6, %3
  %8 = add i64 %7, %6
  %9 = getelementptr inbounds %class.anon.94, %class.anon.94* %0, i64 0, i32 1
  %10 = load i64*, i64** %9, align 8
  %11 = load i64, i64* %10, align 8
  %12 = icmp ult i64 %11, %8
  %13 = select i1 %12, i64 %11, i64 %8
  %14 = icmp ult i64 %7, %13
  br i1 %14, label %15, label %34

15:                                               ; preds = %2
  %16 = getelementptr inbounds %class.anon.94, %class.anon.94* %0, i64 0, i32 2
  %17 = getelementptr inbounds %class.anon.94, %class.anon.94* %0, i64 0, i32 3
  %18 = getelementptr inbounds %class.anon.94, %class.anon.94* %0, i64 0, i32 4
  %19 = getelementptr inbounds %class.anon.94, %class.anon.94* %0, i64 0, i32 5
  %20 = getelementptr inbounds %class.anon.94, %class.anon.94* %0, i64 0, i32 6
  %21 = getelementptr inbounds %class.anon.94, %class.anon.94* %0, i64 0, i32 7
  %22 = getelementptr inbounds %class.anon.94, %class.anon.94* %0, i64 0, i32 8
  %23 = getelementptr inbounds %class.anon.94, %class.anon.94* %0, i64 0, i32 11
  %24 = getelementptr inbounds %class.anon.94, %class.anon.94* %0, i64 0, i32 12
  %25 = getelementptr inbounds %class.anon.94, %class.anon.94* %0, i64 0, i32 13
  %26 = getelementptr inbounds %class.anon.94, %class.anon.94* %0, i64 0, i32 14
  %27 = getelementptr inbounds %class.anon.94, %class.anon.94* %0, i64 0, i32 15
  %28 = getelementptr inbounds %class.anon.94, %class.anon.94* %0, i64 0, i32 16
  %29 = getelementptr inbounds %class.anon.94, %class.anon.94* %0, i64 0, i32 17
  %30 = getelementptr inbounds %class.anon.94, %class.anon.94* %0, i64 0, i32 18
  %31 = getelementptr inbounds %class.anon.94, %class.anon.94* %0, i64 0, i32 9
  %32 = load i64*, i64** %22, align 8
  %33 = load i64, i64* %32, align 8
  br label %35

34:                                               ; preds = %108, %2
  ret void

35:                                               ; preds = %15, %108
  %36 = phi i64 [ %33, %15 ], [ %109, %108 ]
  %37 = phi i64 [ %7, %15 ], [ %110, %108 ]
  %38 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %16, align 8
  %39 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %38, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %40 = load i8*, i8** %39, align 8
  %41 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %38, i64 0, i32 0, i32 4
  %42 = load i64, i64* %41, align 8
  %43 = mul i64 %42, %37
  %44 = getelementptr inbounds i8, i8* %40, i64 %43
  %45 = ptrtoint i8* %44 to i64
  %46 = and i64 %45, 63
  %47 = icmp eq i64 %46, 0
  tail call void @llvm.assume(i1 %47) #13
  %48 = bitcast i8* %44 to float*
  %49 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %17, align 8
  %50 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %49, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %51 = load i8*, i8** %50, align 8
  %52 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %49, i64 0, i32 0, i32 4
  %53 = load i64, i64* %52, align 8
  %54 = mul i64 %53, %37
  %55 = getelementptr inbounds i8, i8* %51, i64 %54
  %56 = ptrtoint i8* %55 to i64
  %57 = and i64 %56, 63
  %58 = icmp eq i64 %57, 0
  tail call void @llvm.assume(i1 %58) #13
  %59 = bitcast i8* %55 to float*
  %60 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %18, align 8
  %61 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %60, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %62 = load i8*, i8** %61, align 8
  %63 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %60, i64 0, i32 0, i32 4
  %64 = load i64, i64* %63, align 8
  %65 = mul i64 %64, %37
  %66 = getelementptr inbounds i8, i8* %62, i64 %65
  %67 = ptrtoint i8* %66 to i64
  %68 = and i64 %67, 63
  %69 = icmp eq i64 %68, 0
  tail call void @llvm.assume(i1 %69) #13
  %70 = bitcast i8* %66 to float*
  %71 = load %"class.jxl::Plane"**, %"class.jxl::Plane"*** %19, align 8
  %72 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %71, align 8
  %73 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %72, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %74 = load i8*, i8** %73, align 8
  %75 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %72, i64 0, i32 0, i32 4
  %76 = load i64, i64* %75, align 8
  %77 = mul i64 %76, %37
  %78 = getelementptr inbounds i8, i8* %74, i64 %77
  %79 = ptrtoint i8* %78 to i64
  %80 = and i64 %79, 63
  %81 = icmp eq i64 %80, 0
  tail call void @llvm.assume(i1 %81) #13
  %82 = bitcast i8* %78 to float*
  %83 = load %"class.jxl::Plane"**, %"class.jxl::Plane"*** %20, align 8
  %84 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %83, align 8
  %85 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %84, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %86 = load i8*, i8** %85, align 8
  %87 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %84, i64 0, i32 0, i32 4
  %88 = load i64, i64* %87, align 8
  %89 = mul i64 %88, %37
  %90 = getelementptr inbounds i8, i8* %86, i64 %89
  %91 = ptrtoint i8* %90 to i64
  %92 = and i64 %91, 63
  %93 = icmp eq i64 %92, 0
  tail call void @llvm.assume(i1 %93) #13
  %94 = bitcast i8* %90 to float*
  %95 = load %"class.jxl::Plane"**, %"class.jxl::Plane"*** %21, align 8
  %96 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %95, align 8
  %97 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %96, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %98 = load i8*, i8** %97, align 8
  %99 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %96, i64 0, i32 0, i32 4
  %100 = load i64, i64* %99, align 8
  %101 = mul i64 %100, %37
  %102 = getelementptr inbounds i8, i8* %98, i64 %101
  %103 = ptrtoint i8* %102 to i64
  %104 = and i64 %103, 63
  %105 = icmp eq i64 %104, 0
  tail call void @llvm.assume(i1 %105) #13
  %106 = bitcast i8* %102 to float*
  %107 = icmp eq i64 %36, 0
  br i1 %107, label %108, label %112

108:                                              ; preds = %112, %35
  %109 = phi i64 [ 0, %35 ], [ %169, %112 ]
  %110 = add nuw i64 %37, 1
  %111 = icmp ult i64 %110, %13
  br i1 %111, label %35, label %34

112:                                              ; preds = %35, %112
  %113 = phi i64 [ %167, %112 ], [ 0, %35 ]
  %114 = getelementptr inbounds float, float* %48, i64 %113
  %115 = bitcast float* %114 to <4 x float>*
  %116 = load <4 x float>, <4 x float>* %115, align 16, !alias.scope !330
  %117 = getelementptr inbounds float, float* %59, i64 %113
  %118 = bitcast float* %117 to <4 x float>*
  %119 = load <4 x float>, <4 x float>* %118, align 16, !alias.scope !333
  %120 = getelementptr inbounds float, float* %70, i64 %113
  %121 = bitcast float* %120 to <4 x float>*
  %122 = load <4 x float>, <4 x float>* %121, align 16, !alias.scope !336
  %123 = load %"class.hwy::N_SSE4::Vec128"*, %"class.hwy::N_SSE4::Vec128"** %23, align 8
  %124 = getelementptr inbounds %"class.hwy::N_SSE4::Vec128", %"class.hwy::N_SSE4::Vec128"* %123, i64 0, i32 0
  %125 = load <4 x float>, <4 x float>* %124, align 16
  %126 = fmul <4 x float> %116, %125
  %127 = load %"class.hwy::N_SSE4::Vec128"*, %"class.hwy::N_SSE4::Vec128"** %24, align 8
  %128 = getelementptr inbounds %"class.hwy::N_SSE4::Vec128", %"class.hwy::N_SSE4::Vec128"* %127, i64 0, i32 0
  %129 = load <4 x float>, <4 x float>* %128, align 16
  %130 = fmul <4 x float> %116, %129
  %131 = load %"class.hwy::N_SSE4::Vec128"*, %"class.hwy::N_SSE4::Vec128"** %25, align 8
  %132 = getelementptr inbounds %"class.hwy::N_SSE4::Vec128", %"class.hwy::N_SSE4::Vec128"* %131, i64 0, i32 0
  %133 = load <4 x float>, <4 x float>* %132, align 16
  %134 = fmul <4 x float> %119, %133
  %135 = load %"class.hwy::N_SSE4::Vec128"*, %"class.hwy::N_SSE4::Vec128"** %26, align 8
  %136 = getelementptr inbounds %"class.hwy::N_SSE4::Vec128", %"class.hwy::N_SSE4::Vec128"* %135, i64 0, i32 0
  %137 = load <4 x float>, <4 x float>* %136, align 16
  %138 = fmul <4 x float> %122, %137
  %139 = load %"class.hwy::N_SSE4::Vec128"*, %"class.hwy::N_SSE4::Vec128"** %27, align 8
  %140 = getelementptr inbounds %"class.hwy::N_SSE4::Vec128", %"class.hwy::N_SSE4::Vec128"* %139, i64 0, i32 0
  %141 = load <4 x float>, <4 x float>* %140, align 16
  %142 = fmul <4 x float> %122, %141
  %143 = fadd <4 x float> %126, %134
  %144 = fadd <4 x float> %143, %138
  %145 = load %"class.hwy::N_SSE4::Vec128"*, %"class.hwy::N_SSE4::Vec128"** %28, align 8
  %146 = getelementptr inbounds %"class.hwy::N_SSE4::Vec128", %"class.hwy::N_SSE4::Vec128"* %145, i64 0, i32 0
  %147 = load <4 x float>, <4 x float>* %146, align 16
  %148 = fsub <4 x float> %144, %147
  %149 = fsub <4 x float> %142, %144
  %150 = load %"class.hwy::N_SSE4::Vec128"*, %"class.hwy::N_SSE4::Vec128"** %29, align 8
  %151 = getelementptr inbounds %"class.hwy::N_SSE4::Vec128", %"class.hwy::N_SSE4::Vec128"* %150, i64 0, i32 0
  %152 = load <4 x float>, <4 x float>* %151, align 16
  %153 = fmul <4 x float> %149, %152
  %154 = fsub <4 x float> %130, %144
  %155 = load %"class.hwy::N_SSE4::Vec128"*, %"class.hwy::N_SSE4::Vec128"** %30, align 8
  %156 = getelementptr inbounds %"class.hwy::N_SSE4::Vec128", %"class.hwy::N_SSE4::Vec128"* %155, i64 0, i32 0
  %157 = load <4 x float>, <4 x float>* %156, align 16
  %158 = fmul <4 x float> %154, %157
  %159 = getelementptr inbounds float, float* %82, i64 %113
  %160 = bitcast float* %159 to <4 x float>*
  store <4 x float> %148, <4 x float>* %160, align 16, !alias.scope !339
  %161 = getelementptr inbounds float, float* %94, i64 %113
  %162 = bitcast float* %161 to <4 x float>*
  store <4 x float> %153, <4 x float>* %162, align 16, !alias.scope !342
  %163 = getelementptr inbounds float, float* %106, i64 %113
  %164 = bitcast float* %163 to <4 x float>*
  store <4 x float> %158, <4 x float>* %164, align 16, !alias.scope !345
  %165 = load i64*, i64** %31, align 8
  %166 = load i64, i64* %165, align 8
  %167 = add i64 %166, %113
  %168 = load i64*, i64** %22, align 8
  %169 = load i64, i64* %168, align 8
  %170 = icmp ult i64 %167, %169
  br i1 %170, label %112, label %108
}

; Function Attrs: nounwind readnone speculatable
declare <8 x float> @llvm.fma.v8f32(<8 x float>, <8 x float>, <8 x float>) #12

; Function Attrs: nounwind ssp uwtable
define internal i32 @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX215LinearSRGBToXYBERKNS_6Image3IfEEPKfPS0_PS6_E3$_4E12CallInitFuncEPvm"(i8* nocapture readonly, i64) #6 align 2 {
  %3 = bitcast i8* %0 to i32 (i64)**
  %4 = load i32 (i64)*, i32 (i64)** %3, align 8
  %5 = tail call i32 %4(i64 %1) #13
  %6 = icmp ne i32 %5, 0
  %7 = sext i1 %6 to i32
  ret i32 %7
}

; Function Attrs: nounwind ssp uwtable
define internal void @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX215LinearSRGBToXYBERKNS_6Image3IfEEPKfPS0_PS6_E3$_4E12CallDataFuncEPvjm"(i8* nocapture readonly, i32, i64) #6 align 2 {
  %4 = getelementptr inbounds i8, i8* %0, i64 8
  %5 = bitcast i8* %4 to %class.anon.95**
  %6 = load %class.anon.95*, %class.anon.95** %5, align 8
  tail call fastcc void @"_ZZN3jxl6N_AVX215LinearSRGBToXYBERKNS_6Image3IfEEPKfPNS_10ThreadPoolEPS2_ENK3$_4clEii"(%class.anon.95* %6, i32 %1)
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal fastcc void @"_ZZN3jxl6N_AVX215LinearSRGBToXYBERKNS_6Image3IfEEPKfPNS_10ThreadPoolEPS2_ENK3$_4clEii"(%class.anon.95* nocapture readonly, i32) unnamed_addr #19 align 2 {
  %3 = sext i32 %1 to i64
  %4 = getelementptr inbounds %class.anon.95, %class.anon.95* %0, i64 0, i32 0
  %5 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %4, align 8
  %6 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 0, i32 0, i32 4
  %7 = load i64, i64* %6, align 8
  %8 = mul i64 %7, %3
  %9 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %10 = load i8*, i8** %9, align 8
  %11 = ptrtoint i8* %10 to i64
  %12 = and i64 %11, 63
  %13 = icmp eq i64 %12, 0
  tail call void @llvm.assume(i1 %13) #13
  %14 = getelementptr inbounds i8, i8* %10, i64 %8
  %15 = ptrtoint i8* %14 to i64
  %16 = and i64 %15, 63
  %17 = icmp eq i64 %16, 0
  tail call void @llvm.assume(i1 %17) #13
  %18 = bitcast i8* %14 to float*
  %19 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %20 = load i8*, i8** %19, align 8
  %21 = ptrtoint i8* %20 to i64
  %22 = and i64 %21, 63
  %23 = icmp eq i64 %22, 0
  tail call void @llvm.assume(i1 %23) #13
  %24 = getelementptr inbounds i8, i8* %20, i64 %8
  %25 = ptrtoint i8* %24 to i64
  %26 = and i64 %25, 63
  %27 = icmp eq i64 %26, 0
  tail call void @llvm.assume(i1 %27) #13
  %28 = bitcast i8* %24 to float*
  %29 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %30 = load i8*, i8** %29, align 8
  %31 = ptrtoint i8* %30 to i64
  %32 = and i64 %31, 63
  %33 = icmp eq i64 %32, 0
  tail call void @llvm.assume(i1 %33) #13
  %34 = getelementptr inbounds i8, i8* %30, i64 %8
  %35 = ptrtoint i8* %34 to i64
  %36 = and i64 %35, 63
  %37 = icmp eq i64 %36, 0
  tail call void @llvm.assume(i1 %37) #13
  %38 = bitcast i8* %34 to float*
  %39 = getelementptr inbounds %class.anon.95, %class.anon.95* %0, i64 0, i32 1
  %40 = load %"class.jxl::Image3"**, %"class.jxl::Image3"*** %39, align 8
  %41 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %40, align 8
  %42 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %41, i64 0, i32 0, i64 0, i32 0, i32 4
  %43 = load i64, i64* %42, align 8
  %44 = mul i64 %43, %3
  %45 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %41, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %46 = load i8*, i8** %45, align 8
  %47 = ptrtoint i8* %46 to i64
  %48 = and i64 %47, 63
  %49 = icmp eq i64 %48, 0
  tail call void @llvm.assume(i1 %49) #13
  %50 = getelementptr inbounds i8, i8* %46, i64 %44
  %51 = ptrtoint i8* %50 to i64
  %52 = and i64 %51, 63
  %53 = icmp eq i64 %52, 0
  tail call void @llvm.assume(i1 %53) #13
  %54 = bitcast i8* %50 to float*
  %55 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %41, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %56 = load i8*, i8** %55, align 8
  %57 = ptrtoint i8* %56 to i64
  %58 = and i64 %57, 63
  %59 = icmp eq i64 %58, 0
  tail call void @llvm.assume(i1 %59) #13
  %60 = getelementptr inbounds i8, i8* %56, i64 %44
  %61 = ptrtoint i8* %60 to i64
  %62 = and i64 %61, 63
  %63 = icmp eq i64 %62, 0
  tail call void @llvm.assume(i1 %63) #13
  %64 = bitcast i8* %60 to float*
  %65 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %41, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %66 = load i8*, i8** %65, align 8
  %67 = ptrtoint i8* %66 to i64
  %68 = and i64 %67, 63
  %69 = icmp eq i64 %68, 0
  tail call void @llvm.assume(i1 %69) #13
  %70 = getelementptr inbounds i8, i8* %66, i64 %44
  %71 = ptrtoint i8* %70 to i64
  %72 = and i64 %71, 63
  %73 = icmp eq i64 %72, 0
  tail call void @llvm.assume(i1 %73) #13
  %74 = bitcast i8* %70 to float*
  %75 = getelementptr inbounds %class.anon.95, %class.anon.95* %0, i64 0, i32 2
  %76 = load i64*, i64** %75, align 8
  %77 = load i64, i64* %76, align 8
  %78 = icmp eq i64 %77, 0
  br i1 %78, label %81, label %79

79:                                               ; preds = %2
  %80 = getelementptr inbounds %class.anon.95, %class.anon.95* %0, i64 0, i32 4
  br label %82

81:                                               ; preds = %82, %2
  ret void

82:                                               ; preds = %79, %82
  %83 = phi i64 [ 0, %79 ], [ %245, %82 ]
  %84 = getelementptr inbounds float, float* %18, i64 %83
  %85 = bitcast float* %84 to <8 x float>*
  %86 = load <8 x float>, <8 x float>* %85, align 32, !alias.scope !348, !noalias !351
  %87 = getelementptr inbounds float, float* %28, i64 %83
  %88 = bitcast float* %87 to <8 x float>*
  %89 = load <8 x float>, <8 x float>* %88, align 32, !alias.scope !353, !noalias !356
  %90 = getelementptr inbounds float, float* %38, i64 %83
  %91 = bitcast float* %90 to <8 x float>*
  %92 = load <8 x float>, <8 x float>* %91, align 32, !alias.scope !358, !noalias !361
  %93 = load float**, float*** %80, align 8
  %94 = load float*, float** %93, align 8
  %95 = getelementptr inbounds float, float* %54, i64 %83
  %96 = getelementptr inbounds float, float* %64, i64 %83
  %97 = getelementptr inbounds float, float* %74, i64 %83
  %98 = bitcast float* %94 to <8 x float>*
  %99 = load <8 x float>, <8 x float>* %98, align 32, !alias.scope !363, !noalias !370
  %100 = getelementptr inbounds float, float* %94, i64 8
  %101 = bitcast float* %100 to <8 x float>*
  %102 = load <8 x float>, <8 x float>* %101, align 32, !alias.scope !378, !noalias !381
  %103 = getelementptr inbounds float, float* %94, i64 16
  %104 = bitcast float* %103 to <8 x float>*
  %105 = load <8 x float>, <8 x float>* %104, align 32, !alias.scope !383, !noalias !386
  %106 = getelementptr inbounds float, float* %94, i64 24
  %107 = bitcast float* %106 to <8 x float>*
  %108 = load <8 x float>, <8 x float>* %107, align 32, !alias.scope !388, !noalias !391
  %109 = getelementptr inbounds float, float* %94, i64 32
  %110 = bitcast float* %109 to <8 x float>*
  %111 = load <8 x float>, <8 x float>* %110, align 32, !alias.scope !393, !noalias !396
  %112 = getelementptr inbounds float, float* %94, i64 40
  %113 = bitcast float* %112 to <8 x float>*
  %114 = load <8 x float>, <8 x float>* %113, align 32, !alias.scope !398, !noalias !401
  %115 = getelementptr inbounds float, float* %94, i64 48
  %116 = bitcast float* %115 to <8 x float>*
  %117 = load <8 x float>, <8 x float>* %116, align 32, !alias.scope !403, !noalias !406
  %118 = getelementptr inbounds float, float* %94, i64 56
  %119 = bitcast float* %118 to <8 x float>*
  %120 = load <8 x float>, <8 x float>* %119, align 32, !alias.scope !408, !noalias !411
  %121 = getelementptr inbounds float, float* %94, i64 64
  %122 = bitcast float* %121 to <8 x float>*
  %123 = load <8 x float>, <8 x float>* %122, align 32, !alias.scope !413, !noalias !416
  %124 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %105, <8 x float> %92, <8 x float> <float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000>) #13
  %125 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %102, <8 x float> %89, <8 x float> %124) #13
  %126 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %99, <8 x float> %86, <8 x float> %125) #13
  %127 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %114, <8 x float> %92, <8 x float> <float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000>) #13
  %128 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %111, <8 x float> %89, <8 x float> %127) #13
  %129 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %108, <8 x float> %86, <8 x float> %128) #13
  %130 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %123, <8 x float> %92, <8 x float> <float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000>) #13
  %131 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %120, <8 x float> %89, <8 x float> %130) #13
  %132 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %117, <8 x float> %86, <8 x float> %131) #13
  %133 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %126, <8 x float> zeroinitializer, <8 x float> %126) #13
  %134 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %129, <8 x float> zeroinitializer, <8 x float> %129) #13
  %135 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %132, <8 x float> zeroinitializer, <8 x float> %132) #13
  %136 = getelementptr inbounds float, float* %94, i64 72
  %137 = bitcast float* %136 to <8 x float>*
  %138 = load <8 x float>, <8 x float>* %137, align 32, !alias.scope !418, !noalias !421
  %139 = bitcast <8 x float> %133 to <8 x i32>
  %140 = icmp eq <8 x i32> %139, zeroinitializer
  %141 = sext <8 x i1> %140 to <8 x i32>
  %142 = ashr <8 x i32> %139, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %143 = mul nsw <8 x i32> %142, <i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202>
  %144 = add <8 x i32> %143, <i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752>
  %145 = bitcast <8 x i32> %144 to <4 x i64>
  %146 = bitcast <8 x i32> %141 to <4 x i64>
  %147 = xor <4 x i64> %146, <i64 -1, i64 -1, i64 -1, i64 -1>
  %148 = and <4 x i64> %145, %147
  %149 = bitcast <4 x i64> %148 to <8 x float>
  %150 = fmul <8 x float> %149, %149
  %151 = fmul <8 x float> %150, %150
  %152 = fmul <8 x float> %133, <float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000>
  %153 = fmul <8 x float> %149, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %154 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %152, <8 x float> %151, <8 x float> %153) #13
  %155 = fmul <8 x float> %154, %154
  %156 = fmul <8 x float> %155, %155
  %157 = fmul <8 x float> %154, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %158 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %152, <8 x float> %156, <8 x float> %157) #13
  %159 = fmul <8 x float> %158, %158
  %160 = fmul <8 x float> %159, %159
  %161 = fmul <8 x float> %158, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %162 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %152, <8 x float> %160, <8 x float> %161) #13
  %163 = fmul <8 x float> %162, %162
  %164 = fmul <8 x float> %163, %163
  %165 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %133
  %166 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %165, <8 x float> %164, <8 x float> %162) #13
  %167 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %166, <8 x float> <float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000>, <8 x float> %162) #13
  %168 = fmul <8 x float> %167, %167
  %169 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %168, <8 x float> %133, <8 x float> %138) #13
  %170 = getelementptr inbounds float, float* %94, i64 80
  %171 = bitcast float* %170 to <8 x float>*
  %172 = load <8 x float>, <8 x float>* %171, align 32, !alias.scope !423, !noalias !426
  %173 = bitcast <8 x float> %134 to <8 x i32>
  %174 = icmp eq <8 x i32> %173, zeroinitializer
  %175 = sext <8 x i1> %174 to <8 x i32>
  %176 = ashr <8 x i32> %173, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %177 = mul nsw <8 x i32> %176, <i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202>
  %178 = add <8 x i32> %177, <i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752>
  %179 = bitcast <8 x i32> %178 to <4 x i64>
  %180 = bitcast <8 x i32> %175 to <4 x i64>
  %181 = xor <4 x i64> %180, <i64 -1, i64 -1, i64 -1, i64 -1>
  %182 = and <4 x i64> %179, %181
  %183 = bitcast <4 x i64> %182 to <8 x float>
  %184 = fmul <8 x float> %183, %183
  %185 = fmul <8 x float> %184, %184
  %186 = fmul <8 x float> %134, <float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000>
  %187 = fmul <8 x float> %183, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %188 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %186, <8 x float> %185, <8 x float> %187) #13
  %189 = fmul <8 x float> %188, %188
  %190 = fmul <8 x float> %189, %189
  %191 = fmul <8 x float> %188, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %192 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %186, <8 x float> %190, <8 x float> %191) #13
  %193 = fmul <8 x float> %192, %192
  %194 = fmul <8 x float> %193, %193
  %195 = fmul <8 x float> %192, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %196 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %186, <8 x float> %194, <8 x float> %195) #13
  %197 = fmul <8 x float> %196, %196
  %198 = fmul <8 x float> %197, %197
  %199 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %134
  %200 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %199, <8 x float> %198, <8 x float> %196) #13
  %201 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %200, <8 x float> <float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000>, <8 x float> %196) #13
  %202 = fmul <8 x float> %201, %201
  %203 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %202, <8 x float> %134, <8 x float> %172) #13
  %204 = getelementptr inbounds float, float* %94, i64 88
  %205 = bitcast float* %204 to <8 x float>*
  %206 = load <8 x float>, <8 x float>* %205, align 32, !alias.scope !428, !noalias !431
  %207 = bitcast <8 x float> %135 to <8 x i32>
  %208 = icmp eq <8 x i32> %207, zeroinitializer
  %209 = sext <8 x i1> %208 to <8 x i32>
  %210 = ashr <8 x i32> %207, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %211 = mul nsw <8 x i32> %210, <i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202>
  %212 = add <8 x i32> %211, <i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752>
  %213 = bitcast <8 x i32> %212 to <4 x i64>
  %214 = bitcast <8 x i32> %209 to <4 x i64>
  %215 = xor <4 x i64> %214, <i64 -1, i64 -1, i64 -1, i64 -1>
  %216 = and <4 x i64> %213, %215
  %217 = bitcast <4 x i64> %216 to <8 x float>
  %218 = fmul <8 x float> %217, %217
  %219 = fmul <8 x float> %218, %218
  %220 = fmul <8 x float> %135, <float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000>
  %221 = fmul <8 x float> %217, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %222 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %220, <8 x float> %219, <8 x float> %221) #13
  %223 = fmul <8 x float> %222, %222
  %224 = fmul <8 x float> %223, %223
  %225 = fmul <8 x float> %222, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %226 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %220, <8 x float> %224, <8 x float> %225) #13
  %227 = fmul <8 x float> %226, %226
  %228 = fmul <8 x float> %227, %227
  %229 = fmul <8 x float> %226, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %230 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %220, <8 x float> %228, <8 x float> %229) #13
  %231 = fmul <8 x float> %230, %230
  %232 = fmul <8 x float> %231, %231
  %233 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %135
  %234 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %233, <8 x float> %232, <8 x float> %230) #13
  %235 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %234, <8 x float> <float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000>, <8 x float> %230) #13
  %236 = fmul <8 x float> %235, %235
  %237 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %236, <8 x float> %135, <8 x float> %206) #13
  %238 = fsub <8 x float> %169, %203
  %239 = fmul <8 x float> %238, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %240 = bitcast float* %95 to <8 x float>*
  store <8 x float> %239, <8 x float>* %240, align 32, !alias.scope !433, !noalias !438
  %241 = fadd <8 x float> %169, %203
  %242 = fmul <8 x float> %241, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %243 = bitcast float* %96 to <8 x float>*
  store <8 x float> %242, <8 x float>* %243, align 32, !alias.scope !441, !noalias !444
  %244 = bitcast float* %97 to <8 x float>*
  store <8 x float> %237, <8 x float>* %244, align 32, !alias.scope !445, !noalias !448
  %245 = add i64 %83, 8
  %246 = load i64*, i64** %75, align 8
  %247 = load i64, i64* %246, align 8
  %248 = icmp ult i64 %245, %247
  br i1 %248, label %82, label %81
}

; Function Attrs: nounwind readnone
declare <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float>, <8 x float>, <8 x float>) #18

; Function Attrs: nounwind ssp uwtable
define internal i32 @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX29SRGBToXYBERKNS_6Image3IfEEPKfPS0_PS6_E3$_5E12CallInitFuncEPvm"(i8* nocapture readonly, i64) #6 align 2 {
  %3 = bitcast i8* %0 to i32 (i64)**
  %4 = load i32 (i64)*, i32 (i64)** %3, align 8
  %5 = tail call i32 %4(i64 %1) #13
  %6 = icmp ne i32 %5, 0
  %7 = sext i1 %6 to i32
  ret i32 %7
}

; Function Attrs: nounwind ssp uwtable
define internal void @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX29SRGBToXYBERKNS_6Image3IfEEPKfPS0_PS6_E3$_5E12CallDataFuncEPvjm"(i8* nocapture readonly, i32, i64) #6 align 2 {
  %4 = getelementptr inbounds i8, i8* %0, i64 8
  %5 = bitcast i8* %4 to %class.anon.96**
  %6 = load %class.anon.96*, %class.anon.96** %5, align 8
  tail call fastcc void @"_ZZN3jxl6N_AVX29SRGBToXYBERKNS_6Image3IfEEPKfPNS_10ThreadPoolEPS2_ENK3$_5clEii"(%class.anon.96* %6, i32 %1)
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal fastcc void @"_ZZN3jxl6N_AVX29SRGBToXYBERKNS_6Image3IfEEPKfPNS_10ThreadPoolEPS2_ENK3$_5clEii"(%class.anon.96* nocapture readonly, i32) unnamed_addr #19 align 2 {
  %3 = sext i32 %1 to i64
  %4 = getelementptr inbounds %class.anon.96, %class.anon.96* %0, i64 0, i32 0
  %5 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %4, align 8
  %6 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 0, i32 0, i32 4
  %7 = load i64, i64* %6, align 8
  %8 = mul i64 %7, %3
  %9 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %10 = load i8*, i8** %9, align 8
  %11 = ptrtoint i8* %10 to i64
  %12 = and i64 %11, 63
  %13 = icmp eq i64 %12, 0
  tail call void @llvm.assume(i1 %13) #13
  %14 = getelementptr inbounds i8, i8* %10, i64 %8
  %15 = ptrtoint i8* %14 to i64
  %16 = and i64 %15, 63
  %17 = icmp eq i64 %16, 0
  tail call void @llvm.assume(i1 %17) #13
  %18 = bitcast i8* %14 to float*
  %19 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %20 = load i8*, i8** %19, align 8
  %21 = ptrtoint i8* %20 to i64
  %22 = and i64 %21, 63
  %23 = icmp eq i64 %22, 0
  tail call void @llvm.assume(i1 %23) #13
  %24 = getelementptr inbounds i8, i8* %20, i64 %8
  %25 = ptrtoint i8* %24 to i64
  %26 = and i64 %25, 63
  %27 = icmp eq i64 %26, 0
  tail call void @llvm.assume(i1 %27) #13
  %28 = bitcast i8* %24 to float*
  %29 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %30 = load i8*, i8** %29, align 8
  %31 = ptrtoint i8* %30 to i64
  %32 = and i64 %31, 63
  %33 = icmp eq i64 %32, 0
  tail call void @llvm.assume(i1 %33) #13
  %34 = getelementptr inbounds i8, i8* %30, i64 %8
  %35 = ptrtoint i8* %34 to i64
  %36 = and i64 %35, 63
  %37 = icmp eq i64 %36, 0
  tail call void @llvm.assume(i1 %37) #13
  %38 = bitcast i8* %34 to float*
  %39 = getelementptr inbounds %class.anon.96, %class.anon.96* %0, i64 0, i32 1
  %40 = load %"class.jxl::Image3"**, %"class.jxl::Image3"*** %39, align 8
  %41 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %40, align 8
  %42 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %41, i64 0, i32 0, i64 0, i32 0, i32 4
  %43 = load i64, i64* %42, align 8
  %44 = mul i64 %43, %3
  %45 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %41, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %46 = load i8*, i8** %45, align 8
  %47 = ptrtoint i8* %46 to i64
  %48 = and i64 %47, 63
  %49 = icmp eq i64 %48, 0
  tail call void @llvm.assume(i1 %49) #13
  %50 = getelementptr inbounds i8, i8* %46, i64 %44
  %51 = ptrtoint i8* %50 to i64
  %52 = and i64 %51, 63
  %53 = icmp eq i64 %52, 0
  tail call void @llvm.assume(i1 %53) #13
  %54 = bitcast i8* %50 to float*
  %55 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %41, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %56 = load i8*, i8** %55, align 8
  %57 = ptrtoint i8* %56 to i64
  %58 = and i64 %57, 63
  %59 = icmp eq i64 %58, 0
  tail call void @llvm.assume(i1 %59) #13
  %60 = getelementptr inbounds i8, i8* %56, i64 %44
  %61 = ptrtoint i8* %60 to i64
  %62 = and i64 %61, 63
  %63 = icmp eq i64 %62, 0
  tail call void @llvm.assume(i1 %63) #13
  %64 = bitcast i8* %60 to float*
  %65 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %41, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %66 = load i8*, i8** %65, align 8
  %67 = ptrtoint i8* %66 to i64
  %68 = and i64 %67, 63
  %69 = icmp eq i64 %68, 0
  tail call void @llvm.assume(i1 %69) #13
  %70 = getelementptr inbounds i8, i8* %66, i64 %44
  %71 = ptrtoint i8* %70 to i64
  %72 = and i64 %71, 63
  %73 = icmp eq i64 %72, 0
  tail call void @llvm.assume(i1 %73) #13
  %74 = bitcast i8* %70 to float*
  %75 = getelementptr inbounds %class.anon.96, %class.anon.96* %0, i64 0, i32 2
  %76 = load i64*, i64** %75, align 8
  %77 = load i64, i64* %76, align 8
  %78 = icmp eq i64 %77, 0
  br i1 %78, label %81, label %79

79:                                               ; preds = %2
  %80 = getelementptr inbounds %class.anon.96, %class.anon.96* %0, i64 0, i32 4
  br label %82

81:                                               ; preds = %82, %2
  ret void

82:                                               ; preds = %79, %82
  %83 = phi i64 [ 0, %79 ], [ %302, %82 ]
  %84 = getelementptr inbounds float, float* %18, i64 %83
  %85 = bitcast float* %84 to <8 x i32>*
  %86 = load <8 x i32>, <8 x i32>* %85, align 32, !alias.scope !449, !noalias !452
  %87 = and <8 x i32> %86, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %88 = and <8 x i32> %86, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %89 = bitcast <8 x i32> %88 to <8 x float>
  %90 = fmul <8 x float> %89, <float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000>
  fence acq_rel
  %91 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %89, <8 x float> <float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000>, <8 x float> <float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000>) #13
  %92 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %89, <8 x float> <float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000>, <8 x float> <float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000>) #13
  fence acq_rel
  %93 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %91, <8 x float> %89, <8 x float> <float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000>) #13
  %94 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %92, <8 x float> %89, <8 x float> <float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000>) #13
  fence acq_rel
  %95 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %93, <8 x float> %89, <8 x float> <float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000>) #13
  %96 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %94, <8 x float> %89, <8 x float> <float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000>) #13
  fence acq_rel
  %97 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %95, <8 x float> %89, <8 x float> <float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000>) #13
  %98 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %96, <8 x float> %89, <8 x float> <float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000>) #13
  fence acq_rel
  %99 = fdiv <8 x float> %97, %98
  %100 = fcmp ogt <8 x float> %89, <float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000>
  %101 = select <8 x i1> %100, <8 x float> %99, <8 x float> %90
  %102 = bitcast <8 x float> %101 to <8 x i32>
  %103 = and <8 x i32> %102, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %104 = or <8 x i32> %103, %87
  %105 = getelementptr inbounds float, float* %28, i64 %83
  %106 = bitcast float* %105 to <8 x i32>*
  %107 = load <8 x i32>, <8 x i32>* %106, align 32, !alias.scope !454, !noalias !457
  %108 = and <8 x i32> %107, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %109 = and <8 x i32> %107, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %110 = bitcast <8 x i32> %109 to <8 x float>
  %111 = fmul <8 x float> %110, <float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000>
  fence acq_rel
  %112 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %110, <8 x float> <float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000>, <8 x float> <float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000>) #13
  %113 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %110, <8 x float> <float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000>, <8 x float> <float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000>) #13
  fence acq_rel
  %114 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %112, <8 x float> %110, <8 x float> <float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000>) #13
  %115 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %113, <8 x float> %110, <8 x float> <float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000>) #13
  fence acq_rel
  %116 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %114, <8 x float> %110, <8 x float> <float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000>) #13
  %117 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %115, <8 x float> %110, <8 x float> <float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000>) #13
  fence acq_rel
  %118 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %116, <8 x float> %110, <8 x float> <float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000>) #13
  %119 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %117, <8 x float> %110, <8 x float> <float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000>) #13
  fence acq_rel
  %120 = fdiv <8 x float> %118, %119
  %121 = fcmp ogt <8 x float> %110, <float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000>
  %122 = select <8 x i1> %121, <8 x float> %120, <8 x float> %111
  %123 = bitcast <8 x float> %122 to <8 x i32>
  %124 = and <8 x i32> %123, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %125 = or <8 x i32> %124, %108
  %126 = getelementptr inbounds float, float* %38, i64 %83
  %127 = bitcast float* %126 to <8 x i32>*
  %128 = load <8 x i32>, <8 x i32>* %127, align 32, !alias.scope !459, !noalias !462
  %129 = and <8 x i32> %128, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %130 = and <8 x i32> %128, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %131 = bitcast <8 x i32> %130 to <8 x float>
  %132 = fmul <8 x float> %131, <float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000>
  fence acq_rel
  %133 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %131, <8 x float> <float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000>, <8 x float> <float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000>) #13
  %134 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %131, <8 x float> <float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000>, <8 x float> <float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000>) #13
  fence acq_rel
  %135 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %133, <8 x float> %131, <8 x float> <float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000>) #13
  %136 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %134, <8 x float> %131, <8 x float> <float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000>) #13
  fence acq_rel
  %137 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %135, <8 x float> %131, <8 x float> <float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000>) #13
  %138 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %136, <8 x float> %131, <8 x float> <float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000>) #13
  fence acq_rel
  %139 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %137, <8 x float> %131, <8 x float> <float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000>) #13
  %140 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %138, <8 x float> %131, <8 x float> <float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000>) #13
  fence acq_rel
  %141 = fdiv <8 x float> %139, %140
  %142 = fcmp ogt <8 x float> %131, <float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000>
  %143 = select <8 x i1> %142, <8 x float> %141, <8 x float> %132
  %144 = bitcast <8 x float> %143 to <8 x i32>
  %145 = and <8 x i32> %144, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %146 = or <8 x i32> %145, %129
  %147 = bitcast <8 x i32> %104 to <8 x float>
  %148 = bitcast <8 x i32> %125 to <8 x float>
  %149 = bitcast <8 x i32> %146 to <8 x float>
  %150 = load float**, float*** %80, align 8
  %151 = load float*, float** %150, align 8
  %152 = getelementptr inbounds float, float* %54, i64 %83
  %153 = getelementptr inbounds float, float* %64, i64 %83
  %154 = getelementptr inbounds float, float* %74, i64 %83
  %155 = bitcast float* %151 to <8 x float>*
  %156 = load <8 x float>, <8 x float>* %155, align 32, !alias.scope !464, !noalias !471
  %157 = getelementptr inbounds float, float* %151, i64 8
  %158 = bitcast float* %157 to <8 x float>*
  %159 = load <8 x float>, <8 x float>* %158, align 32, !alias.scope !479, !noalias !482
  %160 = getelementptr inbounds float, float* %151, i64 16
  %161 = bitcast float* %160 to <8 x float>*
  %162 = load <8 x float>, <8 x float>* %161, align 32, !alias.scope !484, !noalias !487
  %163 = getelementptr inbounds float, float* %151, i64 24
  %164 = bitcast float* %163 to <8 x float>*
  %165 = load <8 x float>, <8 x float>* %164, align 32, !alias.scope !489, !noalias !492
  %166 = getelementptr inbounds float, float* %151, i64 32
  %167 = bitcast float* %166 to <8 x float>*
  %168 = load <8 x float>, <8 x float>* %167, align 32, !alias.scope !494, !noalias !497
  %169 = getelementptr inbounds float, float* %151, i64 40
  %170 = bitcast float* %169 to <8 x float>*
  %171 = load <8 x float>, <8 x float>* %170, align 32, !alias.scope !499, !noalias !502
  %172 = getelementptr inbounds float, float* %151, i64 48
  %173 = bitcast float* %172 to <8 x float>*
  %174 = load <8 x float>, <8 x float>* %173, align 32, !alias.scope !504, !noalias !507
  %175 = getelementptr inbounds float, float* %151, i64 56
  %176 = bitcast float* %175 to <8 x float>*
  %177 = load <8 x float>, <8 x float>* %176, align 32, !alias.scope !509, !noalias !512
  %178 = getelementptr inbounds float, float* %151, i64 64
  %179 = bitcast float* %178 to <8 x float>*
  %180 = load <8 x float>, <8 x float>* %179, align 32, !alias.scope !514, !noalias !517
  %181 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %162, <8 x float> %149, <8 x float> <float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000>) #13
  %182 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %159, <8 x float> %148, <8 x float> %181) #13
  %183 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %156, <8 x float> %147, <8 x float> %182) #13
  %184 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %171, <8 x float> %149, <8 x float> <float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000>) #13
  %185 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %168, <8 x float> %148, <8 x float> %184) #13
  %186 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %165, <8 x float> %147, <8 x float> %185) #13
  %187 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %180, <8 x float> %149, <8 x float> <float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000>) #13
  %188 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %177, <8 x float> %148, <8 x float> %187) #13
  %189 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %174, <8 x float> %147, <8 x float> %188) #13
  %190 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %183, <8 x float> zeroinitializer, <8 x float> %183) #13
  %191 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %186, <8 x float> zeroinitializer, <8 x float> %186) #13
  %192 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %189, <8 x float> zeroinitializer, <8 x float> %189) #13
  %193 = getelementptr inbounds float, float* %151, i64 72
  %194 = bitcast float* %193 to <8 x float>*
  %195 = load <8 x float>, <8 x float>* %194, align 32, !alias.scope !519, !noalias !522
  %196 = bitcast <8 x float> %190 to <8 x i32>
  %197 = icmp eq <8 x i32> %196, zeroinitializer
  %198 = sext <8 x i1> %197 to <8 x i32>
  %199 = ashr <8 x i32> %196, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %200 = mul nsw <8 x i32> %199, <i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202>
  %201 = add <8 x i32> %200, <i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752>
  %202 = bitcast <8 x i32> %201 to <4 x i64>
  %203 = bitcast <8 x i32> %198 to <4 x i64>
  %204 = xor <4 x i64> %203, <i64 -1, i64 -1, i64 -1, i64 -1>
  %205 = and <4 x i64> %202, %204
  %206 = bitcast <4 x i64> %205 to <8 x float>
  %207 = fmul <8 x float> %206, %206
  %208 = fmul <8 x float> %207, %207
  %209 = fmul <8 x float> %190, <float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000>
  %210 = fmul <8 x float> %206, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %211 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %209, <8 x float> %208, <8 x float> %210) #13
  %212 = fmul <8 x float> %211, %211
  %213 = fmul <8 x float> %212, %212
  %214 = fmul <8 x float> %211, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %215 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %209, <8 x float> %213, <8 x float> %214) #13
  %216 = fmul <8 x float> %215, %215
  %217 = fmul <8 x float> %216, %216
  %218 = fmul <8 x float> %215, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %219 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %209, <8 x float> %217, <8 x float> %218) #13
  %220 = fmul <8 x float> %219, %219
  %221 = fmul <8 x float> %220, %220
  %222 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %190
  %223 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %222, <8 x float> %221, <8 x float> %219) #13
  %224 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %223, <8 x float> <float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000>, <8 x float> %219) #13
  %225 = fmul <8 x float> %224, %224
  %226 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %225, <8 x float> %190, <8 x float> %195) #13
  %227 = getelementptr inbounds float, float* %151, i64 80
  %228 = bitcast float* %227 to <8 x float>*
  %229 = load <8 x float>, <8 x float>* %228, align 32, !alias.scope !524, !noalias !527
  %230 = bitcast <8 x float> %191 to <8 x i32>
  %231 = icmp eq <8 x i32> %230, zeroinitializer
  %232 = sext <8 x i1> %231 to <8 x i32>
  %233 = ashr <8 x i32> %230, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %234 = mul nsw <8 x i32> %233, <i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202>
  %235 = add <8 x i32> %234, <i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752>
  %236 = bitcast <8 x i32> %235 to <4 x i64>
  %237 = bitcast <8 x i32> %232 to <4 x i64>
  %238 = xor <4 x i64> %237, <i64 -1, i64 -1, i64 -1, i64 -1>
  %239 = and <4 x i64> %236, %238
  %240 = bitcast <4 x i64> %239 to <8 x float>
  %241 = fmul <8 x float> %240, %240
  %242 = fmul <8 x float> %241, %241
  %243 = fmul <8 x float> %191, <float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000>
  %244 = fmul <8 x float> %240, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %245 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %243, <8 x float> %242, <8 x float> %244) #13
  %246 = fmul <8 x float> %245, %245
  %247 = fmul <8 x float> %246, %246
  %248 = fmul <8 x float> %245, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %249 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %243, <8 x float> %247, <8 x float> %248) #13
  %250 = fmul <8 x float> %249, %249
  %251 = fmul <8 x float> %250, %250
  %252 = fmul <8 x float> %249, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %253 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %243, <8 x float> %251, <8 x float> %252) #13
  %254 = fmul <8 x float> %253, %253
  %255 = fmul <8 x float> %254, %254
  %256 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %191
  %257 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %256, <8 x float> %255, <8 x float> %253) #13
  %258 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %257, <8 x float> <float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000>, <8 x float> %253) #13
  %259 = fmul <8 x float> %258, %258
  %260 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %259, <8 x float> %191, <8 x float> %229) #13
  %261 = getelementptr inbounds float, float* %151, i64 88
  %262 = bitcast float* %261 to <8 x float>*
  %263 = load <8 x float>, <8 x float>* %262, align 32, !alias.scope !529, !noalias !532
  %264 = bitcast <8 x float> %192 to <8 x i32>
  %265 = icmp eq <8 x i32> %264, zeroinitializer
  %266 = sext <8 x i1> %265 to <8 x i32>
  %267 = ashr <8 x i32> %264, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %268 = mul nsw <8 x i32> %267, <i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202>
  %269 = add <8 x i32> %268, <i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752>
  %270 = bitcast <8 x i32> %269 to <4 x i64>
  %271 = bitcast <8 x i32> %266 to <4 x i64>
  %272 = xor <4 x i64> %271, <i64 -1, i64 -1, i64 -1, i64 -1>
  %273 = and <4 x i64> %270, %272
  %274 = bitcast <4 x i64> %273 to <8 x float>
  %275 = fmul <8 x float> %274, %274
  %276 = fmul <8 x float> %275, %275
  %277 = fmul <8 x float> %192, <float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000>
  %278 = fmul <8 x float> %274, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %279 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %277, <8 x float> %276, <8 x float> %278) #13
  %280 = fmul <8 x float> %279, %279
  %281 = fmul <8 x float> %280, %280
  %282 = fmul <8 x float> %279, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %283 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %277, <8 x float> %281, <8 x float> %282) #13
  %284 = fmul <8 x float> %283, %283
  %285 = fmul <8 x float> %284, %284
  %286 = fmul <8 x float> %283, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %287 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %277, <8 x float> %285, <8 x float> %286) #13
  %288 = fmul <8 x float> %287, %287
  %289 = fmul <8 x float> %288, %288
  %290 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %192
  %291 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %290, <8 x float> %289, <8 x float> %287) #13
  %292 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %291, <8 x float> <float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000>, <8 x float> %287) #13
  %293 = fmul <8 x float> %292, %292
  %294 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %293, <8 x float> %192, <8 x float> %263) #13
  %295 = fsub <8 x float> %226, %260
  %296 = fmul <8 x float> %295, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %297 = bitcast float* %152 to <8 x float>*
  store <8 x float> %296, <8 x float>* %297, align 32, !alias.scope !534, !noalias !539
  %298 = fadd <8 x float> %226, %260
  %299 = fmul <8 x float> %298, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %300 = bitcast float* %153 to <8 x float>*
  store <8 x float> %299, <8 x float>* %300, align 32, !alias.scope !542, !noalias !545
  %301 = bitcast float* %154 to <8 x float>*
  store <8 x float> %294, <8 x float>* %301, align 32, !alias.scope !546, !noalias !549
  %302 = add i64 %83, 8
  %303 = load i64*, i64** %75, align 8
  %304 = load i64, i64* %303, align 8
  %305 = icmp ult i64 %302, %304
  br i1 %305, label %82, label %81
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX218SRGBToXYBAndLinearERKNS_6Image3IfEEPKfPS0_PS6_SC_E3$_6E12CallInitFuncEPvm"(i8* nocapture readonly, i64) #6 align 2 {
  %3 = bitcast i8* %0 to i32 (i64)**
  %4 = load i32 (i64)*, i32 (i64)** %3, align 8
  %5 = tail call i32 %4(i64 %1) #13
  %6 = icmp ne i32 %5, 0
  %7 = sext i1 %6 to i32
  ret i32 %7
}

; Function Attrs: nounwind ssp uwtable
define internal void @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX218SRGBToXYBAndLinearERKNS_6Image3IfEEPKfPS0_PS6_SC_E3$_6E12CallDataFuncEPvjm"(i8* nocapture readonly, i32, i64) #6 align 2 {
  %4 = getelementptr inbounds i8, i8* %0, i64 8
  %5 = bitcast i8* %4 to %class.anon.97**
  %6 = load %class.anon.97*, %class.anon.97** %5, align 8
  tail call fastcc void @"_ZZN3jxl6N_AVX218SRGBToXYBAndLinearERKNS_6Image3IfEEPKfPNS_10ThreadPoolEPS2_S9_ENK3$_6clEii"(%class.anon.97* %6, i32 %1)
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal fastcc void @"_ZZN3jxl6N_AVX218SRGBToXYBAndLinearERKNS_6Image3IfEEPKfPNS_10ThreadPoolEPS2_S9_ENK3$_6clEii"(%class.anon.97* nocapture readonly, i32) unnamed_addr #19 align 2 {
  %3 = sext i32 %1 to i64
  %4 = getelementptr inbounds %class.anon.97, %class.anon.97* %0, i64 0, i32 0
  %5 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %4, align 8
  %6 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 0, i32 0, i32 4
  %7 = load i64, i64* %6, align 8
  %8 = mul i64 %7, %3
  %9 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %10 = load i8*, i8** %9, align 8
  %11 = ptrtoint i8* %10 to i64
  %12 = and i64 %11, 63
  %13 = icmp eq i64 %12, 0
  tail call void @llvm.assume(i1 %13) #13
  %14 = getelementptr inbounds i8, i8* %10, i64 %8
  %15 = ptrtoint i8* %14 to i64
  %16 = and i64 %15, 63
  %17 = icmp eq i64 %16, 0
  tail call void @llvm.assume(i1 %17) #13
  %18 = bitcast i8* %14 to float*
  %19 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %20 = load i8*, i8** %19, align 8
  %21 = ptrtoint i8* %20 to i64
  %22 = and i64 %21, 63
  %23 = icmp eq i64 %22, 0
  tail call void @llvm.assume(i1 %23) #13
  %24 = getelementptr inbounds i8, i8* %20, i64 %8
  %25 = ptrtoint i8* %24 to i64
  %26 = and i64 %25, 63
  %27 = icmp eq i64 %26, 0
  tail call void @llvm.assume(i1 %27) #13
  %28 = bitcast i8* %24 to float*
  %29 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %30 = load i8*, i8** %29, align 8
  %31 = ptrtoint i8* %30 to i64
  %32 = and i64 %31, 63
  %33 = icmp eq i64 %32, 0
  tail call void @llvm.assume(i1 %33) #13
  %34 = getelementptr inbounds i8, i8* %30, i64 %8
  %35 = ptrtoint i8* %34 to i64
  %36 = and i64 %35, 63
  %37 = icmp eq i64 %36, 0
  tail call void @llvm.assume(i1 %37) #13
  %38 = bitcast i8* %34 to float*
  %39 = getelementptr inbounds %class.anon.97, %class.anon.97* %0, i64 0, i32 1
  %40 = load %"class.jxl::Image3"**, %"class.jxl::Image3"*** %39, align 8
  %41 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %40, align 8
  %42 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %41, i64 0, i32 0, i64 0, i32 0, i32 4
  %43 = load i64, i64* %42, align 8
  %44 = mul i64 %43, %3
  %45 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %41, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %46 = load i8*, i8** %45, align 8
  %47 = ptrtoint i8* %46 to i64
  %48 = and i64 %47, 63
  %49 = icmp eq i64 %48, 0
  tail call void @llvm.assume(i1 %49) #13
  %50 = getelementptr inbounds i8, i8* %46, i64 %44
  %51 = ptrtoint i8* %50 to i64
  %52 = and i64 %51, 63
  %53 = icmp eq i64 %52, 0
  tail call void @llvm.assume(i1 %53) #13
  %54 = bitcast i8* %50 to float*
  %55 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %41, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %56 = load i8*, i8** %55, align 8
  %57 = ptrtoint i8* %56 to i64
  %58 = and i64 %57, 63
  %59 = icmp eq i64 %58, 0
  tail call void @llvm.assume(i1 %59) #13
  %60 = getelementptr inbounds i8, i8* %56, i64 %44
  %61 = ptrtoint i8* %60 to i64
  %62 = and i64 %61, 63
  %63 = icmp eq i64 %62, 0
  tail call void @llvm.assume(i1 %63) #13
  %64 = bitcast i8* %60 to float*
  %65 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %41, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %66 = load i8*, i8** %65, align 8
  %67 = ptrtoint i8* %66 to i64
  %68 = and i64 %67, 63
  %69 = icmp eq i64 %68, 0
  tail call void @llvm.assume(i1 %69) #13
  %70 = getelementptr inbounds i8, i8* %66, i64 %44
  %71 = ptrtoint i8* %70 to i64
  %72 = and i64 %71, 63
  %73 = icmp eq i64 %72, 0
  tail call void @llvm.assume(i1 %73) #13
  %74 = bitcast i8* %70 to float*
  %75 = getelementptr inbounds %class.anon.97, %class.anon.97* %0, i64 0, i32 2
  %76 = load %"class.jxl::Image3"**, %"class.jxl::Image3"*** %75, align 8
  %77 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %76, align 8
  %78 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %77, i64 0, i32 0, i64 0, i32 0, i32 4
  %79 = load i64, i64* %78, align 8
  %80 = mul i64 %79, %3
  %81 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %77, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %82 = load i8*, i8** %81, align 8
  %83 = ptrtoint i8* %82 to i64
  %84 = and i64 %83, 63
  %85 = icmp eq i64 %84, 0
  tail call void @llvm.assume(i1 %85) #13
  %86 = getelementptr inbounds i8, i8* %82, i64 %80
  %87 = ptrtoint i8* %86 to i64
  %88 = and i64 %87, 63
  %89 = icmp eq i64 %88, 0
  tail call void @llvm.assume(i1 %89) #13
  %90 = bitcast i8* %86 to float*
  %91 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %77, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %92 = load i8*, i8** %91, align 8
  %93 = ptrtoint i8* %92 to i64
  %94 = and i64 %93, 63
  %95 = icmp eq i64 %94, 0
  tail call void @llvm.assume(i1 %95) #13
  %96 = getelementptr inbounds i8, i8* %92, i64 %80
  %97 = ptrtoint i8* %96 to i64
  %98 = and i64 %97, 63
  %99 = icmp eq i64 %98, 0
  tail call void @llvm.assume(i1 %99) #13
  %100 = bitcast i8* %96 to float*
  %101 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %77, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %102 = load i8*, i8** %101, align 8
  %103 = ptrtoint i8* %102 to i64
  %104 = and i64 %103, 63
  %105 = icmp eq i64 %104, 0
  tail call void @llvm.assume(i1 %105) #13
  %106 = getelementptr inbounds i8, i8* %102, i64 %80
  %107 = ptrtoint i8* %106 to i64
  %108 = and i64 %107, 63
  %109 = icmp eq i64 %108, 0
  tail call void @llvm.assume(i1 %109) #13
  %110 = bitcast i8* %106 to float*
  %111 = getelementptr inbounds %class.anon.97, %class.anon.97* %0, i64 0, i32 3
  %112 = load i64*, i64** %111, align 8
  %113 = load i64, i64* %112, align 8
  %114 = icmp eq i64 %113, 0
  br i1 %114, label %117, label %115

115:                                              ; preds = %2
  %116 = getelementptr inbounds %class.anon.97, %class.anon.97* %0, i64 0, i32 5
  br label %118

117:                                              ; preds = %118, %2
  ret void

118:                                              ; preds = %115, %118
  %119 = phi i64 [ 0, %115 ], [ %344, %118 ]
  %120 = getelementptr inbounds float, float* %18, i64 %119
  %121 = bitcast float* %120 to <8 x i32>*
  %122 = load <8 x i32>, <8 x i32>* %121, align 32, !alias.scope !550, !noalias !553
  %123 = and <8 x i32> %122, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %124 = and <8 x i32> %122, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %125 = bitcast <8 x i32> %124 to <8 x float>
  %126 = fmul <8 x float> %125, <float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000>
  fence acq_rel
  %127 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %125, <8 x float> <float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000>, <8 x float> <float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000>) #13
  %128 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %125, <8 x float> <float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000>, <8 x float> <float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000>) #13
  fence acq_rel
  %129 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %127, <8 x float> %125, <8 x float> <float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000>) #13
  %130 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %128, <8 x float> %125, <8 x float> <float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000>) #13
  fence acq_rel
  %131 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %129, <8 x float> %125, <8 x float> <float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000>) #13
  %132 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %130, <8 x float> %125, <8 x float> <float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000>) #13
  fence acq_rel
  %133 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %131, <8 x float> %125, <8 x float> <float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000>) #13
  %134 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %132, <8 x float> %125, <8 x float> <float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000>) #13
  fence acq_rel
  %135 = fdiv <8 x float> %133, %134
  %136 = fcmp ogt <8 x float> %125, <float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000>
  %137 = select <8 x i1> %136, <8 x float> %135, <8 x float> %126
  %138 = bitcast <8 x float> %137 to <8 x i32>
  %139 = and <8 x i32> %138, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %140 = or <8 x i32> %139, %123
  %141 = getelementptr inbounds float, float* %28, i64 %119
  %142 = bitcast float* %141 to <8 x i32>*
  %143 = load <8 x i32>, <8 x i32>* %142, align 32, !alias.scope !555, !noalias !558
  %144 = and <8 x i32> %143, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %145 = and <8 x i32> %143, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %146 = bitcast <8 x i32> %145 to <8 x float>
  %147 = fmul <8 x float> %146, <float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000>
  fence acq_rel
  %148 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %146, <8 x float> <float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000>, <8 x float> <float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000>) #13
  %149 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %146, <8 x float> <float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000>, <8 x float> <float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000>) #13
  fence acq_rel
  %150 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %148, <8 x float> %146, <8 x float> <float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000>) #13
  %151 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %149, <8 x float> %146, <8 x float> <float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000>) #13
  fence acq_rel
  %152 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %150, <8 x float> %146, <8 x float> <float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000>) #13
  %153 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %151, <8 x float> %146, <8 x float> <float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000>) #13
  fence acq_rel
  %154 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %152, <8 x float> %146, <8 x float> <float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000>) #13
  %155 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %153, <8 x float> %146, <8 x float> <float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000>) #13
  fence acq_rel
  %156 = fdiv <8 x float> %154, %155
  %157 = fcmp ogt <8 x float> %146, <float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000>
  %158 = select <8 x i1> %157, <8 x float> %156, <8 x float> %147
  %159 = bitcast <8 x float> %158 to <8 x i32>
  %160 = and <8 x i32> %159, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %161 = or <8 x i32> %160, %144
  %162 = getelementptr inbounds float, float* %38, i64 %119
  %163 = bitcast float* %162 to <8 x i32>*
  %164 = load <8 x i32>, <8 x i32>* %163, align 32, !alias.scope !560, !noalias !563
  %165 = and <8 x i32> %164, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %166 = and <8 x i32> %164, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %167 = bitcast <8 x i32> %166 to <8 x float>
  %168 = fmul <8 x float> %167, <float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000>
  fence acq_rel
  %169 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %167, <8 x float> <float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000>, <8 x float> <float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000>) #13
  %170 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %167, <8 x float> <float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000>, <8 x float> <float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000>) #13
  fence acq_rel
  %171 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %169, <8 x float> %167, <8 x float> <float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000>) #13
  %172 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %170, <8 x float> %167, <8 x float> <float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000>) #13
  fence acq_rel
  %173 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %171, <8 x float> %167, <8 x float> <float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000>) #13
  %174 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %172, <8 x float> %167, <8 x float> <float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000>) #13
  fence acq_rel
  %175 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %173, <8 x float> %167, <8 x float> <float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000>) #13
  %176 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %174, <8 x float> %167, <8 x float> <float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000>) #13
  fence acq_rel
  %177 = fdiv <8 x float> %175, %176
  %178 = fcmp ogt <8 x float> %167, <float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000>
  %179 = select <8 x i1> %178, <8 x float> %177, <8 x float> %168
  %180 = bitcast <8 x float> %179 to <8 x i32>
  %181 = and <8 x i32> %180, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %182 = or <8 x i32> %181, %165
  %183 = bitcast <8 x i32> %140 to <8 x float>
  %184 = getelementptr inbounds float, float* %54, i64 %119
  %185 = bitcast float* %184 to <8 x i32>*
  store <8 x i32> %140, <8 x i32>* %185, align 32, !alias.scope !565
  %186 = bitcast <8 x i32> %161 to <8 x float>
  %187 = getelementptr inbounds float, float* %64, i64 %119
  %188 = bitcast float* %187 to <8 x i32>*
  store <8 x i32> %161, <8 x i32>* %188, align 32, !alias.scope !568
  %189 = bitcast <8 x i32> %182 to <8 x float>
  %190 = getelementptr inbounds float, float* %74, i64 %119
  %191 = bitcast float* %190 to <8 x i32>*
  store <8 x i32> %182, <8 x i32>* %191, align 32, !alias.scope !571
  %192 = load float**, float*** %116, align 8
  %193 = load float*, float** %192, align 8
  %194 = getelementptr inbounds float, float* %90, i64 %119
  %195 = getelementptr inbounds float, float* %100, i64 %119
  %196 = getelementptr inbounds float, float* %110, i64 %119
  %197 = bitcast float* %193 to <8 x float>*
  %198 = load <8 x float>, <8 x float>* %197, align 32, !alias.scope !574, !noalias !581
  %199 = getelementptr inbounds float, float* %193, i64 8
  %200 = bitcast float* %199 to <8 x float>*
  %201 = load <8 x float>, <8 x float>* %200, align 32, !alias.scope !589, !noalias !592
  %202 = getelementptr inbounds float, float* %193, i64 16
  %203 = bitcast float* %202 to <8 x float>*
  %204 = load <8 x float>, <8 x float>* %203, align 32, !alias.scope !594, !noalias !597
  %205 = getelementptr inbounds float, float* %193, i64 24
  %206 = bitcast float* %205 to <8 x float>*
  %207 = load <8 x float>, <8 x float>* %206, align 32, !alias.scope !599, !noalias !602
  %208 = getelementptr inbounds float, float* %193, i64 32
  %209 = bitcast float* %208 to <8 x float>*
  %210 = load <8 x float>, <8 x float>* %209, align 32, !alias.scope !604, !noalias !607
  %211 = getelementptr inbounds float, float* %193, i64 40
  %212 = bitcast float* %211 to <8 x float>*
  %213 = load <8 x float>, <8 x float>* %212, align 32, !alias.scope !609, !noalias !612
  %214 = getelementptr inbounds float, float* %193, i64 48
  %215 = bitcast float* %214 to <8 x float>*
  %216 = load <8 x float>, <8 x float>* %215, align 32, !alias.scope !614, !noalias !617
  %217 = getelementptr inbounds float, float* %193, i64 56
  %218 = bitcast float* %217 to <8 x float>*
  %219 = load <8 x float>, <8 x float>* %218, align 32, !alias.scope !619, !noalias !622
  %220 = getelementptr inbounds float, float* %193, i64 64
  %221 = bitcast float* %220 to <8 x float>*
  %222 = load <8 x float>, <8 x float>* %221, align 32, !alias.scope !624, !noalias !627
  %223 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %204, <8 x float> %189, <8 x float> <float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000>) #13
  %224 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %201, <8 x float> %186, <8 x float> %223) #13
  %225 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %198, <8 x float> %183, <8 x float> %224) #13
  %226 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %213, <8 x float> %189, <8 x float> <float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000>) #13
  %227 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %210, <8 x float> %186, <8 x float> %226) #13
  %228 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %207, <8 x float> %183, <8 x float> %227) #13
  %229 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %222, <8 x float> %189, <8 x float> <float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000>) #13
  %230 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %219, <8 x float> %186, <8 x float> %229) #13
  %231 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %216, <8 x float> %183, <8 x float> %230) #13
  %232 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %225, <8 x float> zeroinitializer, <8 x float> %225) #13
  %233 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %228, <8 x float> zeroinitializer, <8 x float> %228) #13
  %234 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %231, <8 x float> zeroinitializer, <8 x float> %231) #13
  %235 = getelementptr inbounds float, float* %193, i64 72
  %236 = bitcast float* %235 to <8 x float>*
  %237 = load <8 x float>, <8 x float>* %236, align 32, !alias.scope !629, !noalias !632
  %238 = bitcast <8 x float> %232 to <8 x i32>
  %239 = icmp eq <8 x i32> %238, zeroinitializer
  %240 = sext <8 x i1> %239 to <8 x i32>
  %241 = ashr <8 x i32> %238, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %242 = mul nsw <8 x i32> %241, <i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202>
  %243 = add <8 x i32> %242, <i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752>
  %244 = bitcast <8 x i32> %243 to <4 x i64>
  %245 = bitcast <8 x i32> %240 to <4 x i64>
  %246 = xor <4 x i64> %245, <i64 -1, i64 -1, i64 -1, i64 -1>
  %247 = and <4 x i64> %244, %246
  %248 = bitcast <4 x i64> %247 to <8 x float>
  %249 = fmul <8 x float> %248, %248
  %250 = fmul <8 x float> %249, %249
  %251 = fmul <8 x float> %232, <float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000>
  %252 = fmul <8 x float> %248, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %253 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %251, <8 x float> %250, <8 x float> %252) #13
  %254 = fmul <8 x float> %253, %253
  %255 = fmul <8 x float> %254, %254
  %256 = fmul <8 x float> %253, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %257 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %251, <8 x float> %255, <8 x float> %256) #13
  %258 = fmul <8 x float> %257, %257
  %259 = fmul <8 x float> %258, %258
  %260 = fmul <8 x float> %257, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %261 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %251, <8 x float> %259, <8 x float> %260) #13
  %262 = fmul <8 x float> %261, %261
  %263 = fmul <8 x float> %262, %262
  %264 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %232
  %265 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %264, <8 x float> %263, <8 x float> %261) #13
  %266 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %265, <8 x float> <float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000>, <8 x float> %261) #13
  %267 = fmul <8 x float> %266, %266
  %268 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %267, <8 x float> %232, <8 x float> %237) #13
  %269 = getelementptr inbounds float, float* %193, i64 80
  %270 = bitcast float* %269 to <8 x float>*
  %271 = load <8 x float>, <8 x float>* %270, align 32, !alias.scope !634, !noalias !637
  %272 = bitcast <8 x float> %233 to <8 x i32>
  %273 = icmp eq <8 x i32> %272, zeroinitializer
  %274 = sext <8 x i1> %273 to <8 x i32>
  %275 = ashr <8 x i32> %272, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %276 = mul nsw <8 x i32> %275, <i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202>
  %277 = add <8 x i32> %276, <i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752>
  %278 = bitcast <8 x i32> %277 to <4 x i64>
  %279 = bitcast <8 x i32> %274 to <4 x i64>
  %280 = xor <4 x i64> %279, <i64 -1, i64 -1, i64 -1, i64 -1>
  %281 = and <4 x i64> %278, %280
  %282 = bitcast <4 x i64> %281 to <8 x float>
  %283 = fmul <8 x float> %282, %282
  %284 = fmul <8 x float> %283, %283
  %285 = fmul <8 x float> %233, <float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000>
  %286 = fmul <8 x float> %282, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %287 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %285, <8 x float> %284, <8 x float> %286) #13
  %288 = fmul <8 x float> %287, %287
  %289 = fmul <8 x float> %288, %288
  %290 = fmul <8 x float> %287, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %291 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %285, <8 x float> %289, <8 x float> %290) #13
  %292 = fmul <8 x float> %291, %291
  %293 = fmul <8 x float> %292, %292
  %294 = fmul <8 x float> %291, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %295 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %285, <8 x float> %293, <8 x float> %294) #13
  %296 = fmul <8 x float> %295, %295
  %297 = fmul <8 x float> %296, %296
  %298 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %233
  %299 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %298, <8 x float> %297, <8 x float> %295) #13
  %300 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %299, <8 x float> <float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000>, <8 x float> %295) #13
  %301 = fmul <8 x float> %300, %300
  %302 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %301, <8 x float> %233, <8 x float> %271) #13
  %303 = getelementptr inbounds float, float* %193, i64 88
  %304 = bitcast float* %303 to <8 x float>*
  %305 = load <8 x float>, <8 x float>* %304, align 32, !alias.scope !639, !noalias !642
  %306 = bitcast <8 x float> %234 to <8 x i32>
  %307 = icmp eq <8 x i32> %306, zeroinitializer
  %308 = sext <8 x i1> %307 to <8 x i32>
  %309 = ashr <8 x i32> %306, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %310 = mul nsw <8 x i32> %309, <i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202>
  %311 = add <8 x i32> %310, <i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752>
  %312 = bitcast <8 x i32> %311 to <4 x i64>
  %313 = bitcast <8 x i32> %308 to <4 x i64>
  %314 = xor <4 x i64> %313, <i64 -1, i64 -1, i64 -1, i64 -1>
  %315 = and <4 x i64> %312, %314
  %316 = bitcast <4 x i64> %315 to <8 x float>
  %317 = fmul <8 x float> %316, %316
  %318 = fmul <8 x float> %317, %317
  %319 = fmul <8 x float> %234, <float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000>
  %320 = fmul <8 x float> %316, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %321 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %319, <8 x float> %318, <8 x float> %320) #13
  %322 = fmul <8 x float> %321, %321
  %323 = fmul <8 x float> %322, %322
  %324 = fmul <8 x float> %321, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %325 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %319, <8 x float> %323, <8 x float> %324) #13
  %326 = fmul <8 x float> %325, %325
  %327 = fmul <8 x float> %326, %326
  %328 = fmul <8 x float> %325, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %329 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %319, <8 x float> %327, <8 x float> %328) #13
  %330 = fmul <8 x float> %329, %329
  %331 = fmul <8 x float> %330, %330
  %332 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %234
  %333 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %332, <8 x float> %331, <8 x float> %329) #13
  %334 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %333, <8 x float> <float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000>, <8 x float> %329) #13
  %335 = fmul <8 x float> %334, %334
  %336 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %335, <8 x float> %234, <8 x float> %305) #13
  %337 = fsub <8 x float> %268, %302
  %338 = fmul <8 x float> %337, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %339 = bitcast float* %194 to <8 x float>*
  store <8 x float> %338, <8 x float>* %339, align 32, !alias.scope !644, !noalias !649
  %340 = fadd <8 x float> %268, %302
  %341 = fmul <8 x float> %340, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %342 = bitcast float* %195 to <8 x float>*
  store <8 x float> %341, <8 x float>* %342, align 32, !alias.scope !652, !noalias !655
  %343 = bitcast float* %196 to <8 x float>*
  store <8 x float> %336, <8 x float>* %343, align 32, !alias.scope !656, !noalias !659
  %344 = add i64 %119, 8
  %345 = load i64*, i64** %111, align 8
  %346 = load i64, i64* %345, align 8
  %347 = icmp ult i64 %344, %346
  br i1 %347, label %118, label %117
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX210RgbToYcbcrERKNS_5PlaneIfEES8_S8_PS6_S9_S9_PS0_E3$_7E12CallInitFuncEPvm"(i8* nocapture readonly, i64) #6 align 2 {
  %3 = bitcast i8* %0 to i32 (i64)**
  %4 = load i32 (i64)*, i32 (i64)** %3, align 8
  %5 = tail call i32 %4(i64 %1) #13
  %6 = icmp ne i32 %5, 0
  %7 = sext i1 %6 to i32
  ret i32 %7
}

; Function Attrs: nounwind ssp uwtable
define internal void @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX210RgbToYcbcrERKNS_5PlaneIfEES8_S8_PS6_S9_S9_PS0_E3$_7E12CallDataFuncEPvjm"(i8* nocapture readonly, i32, i64) #6 align 2 {
  %4 = getelementptr inbounds i8, i8* %0, i64 8
  %5 = bitcast i8* %4 to %class.anon.98**
  %6 = load %class.anon.98*, %class.anon.98** %5, align 8
  tail call fastcc void @"_ZZN3jxl6N_AVX210RgbToYcbcrERKNS_5PlaneIfEES4_S4_PS2_S5_S5_PNS_10ThreadPoolEENK3$_7clEii"(%class.anon.98* %6, i32 %1)
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal fastcc void @"_ZZN3jxl6N_AVX210RgbToYcbcrERKNS_5PlaneIfEES4_S4_PS2_S5_S5_PNS_10ThreadPoolEENK3$_7clEii"(%class.anon.98* nocapture readonly, i32) unnamed_addr #19 align 2 {
  %3 = sext i32 %1 to i64
  %4 = getelementptr inbounds %class.anon.98, %class.anon.98* %0, i64 0, i32 0
  %5 = load i64*, i64** %4, align 8
  %6 = load i64, i64* %5, align 8
  %7 = mul i64 %6, %3
  %8 = add i64 %7, %6
  %9 = getelementptr inbounds %class.anon.98, %class.anon.98* %0, i64 0, i32 1
  %10 = load i64*, i64** %9, align 8
  %11 = load i64, i64* %10, align 8
  %12 = icmp ult i64 %11, %8
  %13 = select i1 %12, i64 %11, i64 %8
  %14 = icmp ult i64 %7, %13
  br i1 %14, label %15, label %42

15:                                               ; preds = %2
  %16 = getelementptr inbounds %class.anon.98, %class.anon.98* %0, i64 0, i32 2
  %17 = getelementptr inbounds %class.anon.98, %class.anon.98* %0, i64 0, i32 3
  %18 = getelementptr inbounds %class.anon.98, %class.anon.98* %0, i64 0, i32 4
  %19 = getelementptr inbounds %class.anon.98, %class.anon.98* %0, i64 0, i32 5
  %20 = getelementptr inbounds %class.anon.98, %class.anon.98* %0, i64 0, i32 6
  %21 = getelementptr inbounds %class.anon.98, %class.anon.98* %0, i64 0, i32 7
  %22 = getelementptr inbounds %class.anon.98, %class.anon.98* %0, i64 0, i32 8
  %23 = getelementptr inbounds %class.anon.98, %class.anon.98* %0, i64 0, i32 11
  %24 = bitcast %"class.hwy::N_AVX2::Vec256"** %23 to <8 x float>**
  %25 = getelementptr inbounds %class.anon.98, %class.anon.98* %0, i64 0, i32 12
  %26 = bitcast %"class.hwy::N_AVX2::Vec256"** %25 to <8 x float>**
  %27 = getelementptr inbounds %class.anon.98, %class.anon.98* %0, i64 0, i32 13
  %28 = bitcast %"class.hwy::N_AVX2::Vec256"** %27 to <8 x float>**
  %29 = getelementptr inbounds %class.anon.98, %class.anon.98* %0, i64 0, i32 14
  %30 = bitcast %"class.hwy::N_AVX2::Vec256"** %29 to <8 x float>**
  %31 = getelementptr inbounds %class.anon.98, %class.anon.98* %0, i64 0, i32 15
  %32 = bitcast %"class.hwy::N_AVX2::Vec256"** %31 to <8 x float>**
  %33 = getelementptr inbounds %class.anon.98, %class.anon.98* %0, i64 0, i32 16
  %34 = bitcast %"class.hwy::N_AVX2::Vec256"** %33 to <8 x float>**
  %35 = getelementptr inbounds %class.anon.98, %class.anon.98* %0, i64 0, i32 17
  %36 = bitcast %"class.hwy::N_AVX2::Vec256"** %35 to <8 x float>**
  %37 = getelementptr inbounds %class.anon.98, %class.anon.98* %0, i64 0, i32 18
  %38 = bitcast %"class.hwy::N_AVX2::Vec256"** %37 to <8 x float>**
  %39 = getelementptr inbounds %class.anon.98, %class.anon.98* %0, i64 0, i32 9
  %40 = load i64*, i64** %22, align 8
  %41 = load i64, i64* %40, align 8
  br label %43

42:                                               ; preds = %116, %2
  ret void

43:                                               ; preds = %15, %116
  %44 = phi i64 [ %41, %15 ], [ %117, %116 ]
  %45 = phi i64 [ %7, %15 ], [ %118, %116 ]
  %46 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %16, align 8
  %47 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %46, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %48 = load i8*, i8** %47, align 8
  %49 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %46, i64 0, i32 0, i32 4
  %50 = load i64, i64* %49, align 8
  %51 = mul i64 %50, %45
  %52 = getelementptr inbounds i8, i8* %48, i64 %51
  %53 = ptrtoint i8* %52 to i64
  %54 = and i64 %53, 63
  %55 = icmp eq i64 %54, 0
  tail call void @llvm.assume(i1 %55) #13
  %56 = bitcast i8* %52 to float*
  %57 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %17, align 8
  %58 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %57, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %59 = load i8*, i8** %58, align 8
  %60 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %57, i64 0, i32 0, i32 4
  %61 = load i64, i64* %60, align 8
  %62 = mul i64 %61, %45
  %63 = getelementptr inbounds i8, i8* %59, i64 %62
  %64 = ptrtoint i8* %63 to i64
  %65 = and i64 %64, 63
  %66 = icmp eq i64 %65, 0
  tail call void @llvm.assume(i1 %66) #13
  %67 = bitcast i8* %63 to float*
  %68 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %18, align 8
  %69 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %68, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %70 = load i8*, i8** %69, align 8
  %71 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %68, i64 0, i32 0, i32 4
  %72 = load i64, i64* %71, align 8
  %73 = mul i64 %72, %45
  %74 = getelementptr inbounds i8, i8* %70, i64 %73
  %75 = ptrtoint i8* %74 to i64
  %76 = and i64 %75, 63
  %77 = icmp eq i64 %76, 0
  tail call void @llvm.assume(i1 %77) #13
  %78 = bitcast i8* %74 to float*
  %79 = load %"class.jxl::Plane"**, %"class.jxl::Plane"*** %19, align 8
  %80 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %79, align 8
  %81 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %80, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %82 = load i8*, i8** %81, align 8
  %83 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %80, i64 0, i32 0, i32 4
  %84 = load i64, i64* %83, align 8
  %85 = mul i64 %84, %45
  %86 = getelementptr inbounds i8, i8* %82, i64 %85
  %87 = ptrtoint i8* %86 to i64
  %88 = and i64 %87, 63
  %89 = icmp eq i64 %88, 0
  tail call void @llvm.assume(i1 %89) #13
  %90 = bitcast i8* %86 to float*
  %91 = load %"class.jxl::Plane"**, %"class.jxl::Plane"*** %20, align 8
  %92 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %91, align 8
  %93 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %92, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %94 = load i8*, i8** %93, align 8
  %95 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %92, i64 0, i32 0, i32 4
  %96 = load i64, i64* %95, align 8
  %97 = mul i64 %96, %45
  %98 = getelementptr inbounds i8, i8* %94, i64 %97
  %99 = ptrtoint i8* %98 to i64
  %100 = and i64 %99, 63
  %101 = icmp eq i64 %100, 0
  tail call void @llvm.assume(i1 %101) #13
  %102 = bitcast i8* %98 to float*
  %103 = load %"class.jxl::Plane"**, %"class.jxl::Plane"*** %21, align 8
  %104 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %103, align 8
  %105 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %104, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %106 = load i8*, i8** %105, align 8
  %107 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %104, i64 0, i32 0, i32 4
  %108 = load i64, i64* %107, align 8
  %109 = mul i64 %108, %45
  %110 = getelementptr inbounds i8, i8* %106, i64 %109
  %111 = ptrtoint i8* %110 to i64
  %112 = and i64 %111, 63
  %113 = icmp eq i64 %112, 0
  tail call void @llvm.assume(i1 %113) #13
  %114 = bitcast i8* %110 to float*
  %115 = icmp eq i64 %44, 0
  br i1 %115, label %116, label %120

116:                                              ; preds = %120, %43
  %117 = phi i64 [ 0, %43 ], [ %169, %120 ]
  %118 = add nuw i64 %45, 1
  %119 = icmp ult i64 %118, %13
  br i1 %119, label %43, label %42

120:                                              ; preds = %43, %120
  %121 = phi i64 [ %167, %120 ], [ 0, %43 ]
  %122 = getelementptr inbounds float, float* %56, i64 %121
  %123 = bitcast float* %122 to <8 x float>*
  %124 = load <8 x float>, <8 x float>* %123, align 32, !alias.scope !660, !noalias !663
  %125 = getelementptr inbounds float, float* %67, i64 %121
  %126 = bitcast float* %125 to <8 x float>*
  %127 = load <8 x float>, <8 x float>* %126, align 32, !alias.scope !665, !noalias !668
  %128 = getelementptr inbounds float, float* %78, i64 %121
  %129 = bitcast float* %128 to <8 x float>*
  %130 = load <8 x float>, <8 x float>* %129, align 32, !alias.scope !670, !noalias !673
  %131 = load <8 x float>*, <8 x float>** %24, align 8
  %132 = load <8 x float>, <8 x float>* %131, align 32
  %133 = fmul <8 x float> %124, %132
  %134 = load <8 x float>*, <8 x float>** %26, align 8
  %135 = load <8 x float>, <8 x float>* %134, align 32
  %136 = fmul <8 x float> %124, %135
  %137 = load <8 x float>*, <8 x float>** %28, align 8
  %138 = load <8 x float>, <8 x float>* %137, align 32
  %139 = fmul <8 x float> %127, %138
  %140 = load <8 x float>*, <8 x float>** %30, align 8
  %141 = load <8 x float>, <8 x float>* %140, align 32
  %142 = fmul <8 x float> %130, %141
  %143 = load <8 x float>*, <8 x float>** %32, align 8
  %144 = load <8 x float>, <8 x float>* %143, align 32
  %145 = fmul <8 x float> %130, %144
  %146 = fadd <8 x float> %133, %139
  %147 = fadd <8 x float> %146, %142
  %148 = load <8 x float>*, <8 x float>** %34, align 8
  %149 = load <8 x float>, <8 x float>* %148, align 32
  %150 = fsub <8 x float> %147, %149
  %151 = fsub <8 x float> %145, %147
  %152 = load <8 x float>*, <8 x float>** %36, align 8
  %153 = load <8 x float>, <8 x float>* %152, align 32
  %154 = fmul <8 x float> %151, %153
  %155 = fsub <8 x float> %136, %147
  %156 = load <8 x float>*, <8 x float>** %38, align 8
  %157 = load <8 x float>, <8 x float>* %156, align 32
  %158 = fmul <8 x float> %155, %157
  %159 = getelementptr inbounds float, float* %90, i64 %121
  %160 = bitcast float* %159 to <8 x float>*
  store <8 x float> %150, <8 x float>* %160, align 32, !alias.scope !675
  %161 = getelementptr inbounds float, float* %102, i64 %121
  %162 = bitcast float* %161 to <8 x float>*
  store <8 x float> %154, <8 x float>* %162, align 32, !alias.scope !678
  %163 = getelementptr inbounds float, float* %114, i64 %121
  %164 = bitcast float* %163 to <8 x float>*
  store <8 x float> %158, <8 x float>* %164, align 32, !alias.scope !681
  %165 = load i64*, i64** %39, align 8
  %166 = load i64, i64* %165, align 8
  %167 = add i64 %166, %121
  %168 = load i64*, i64** %22, align 8
  %169 = load i64, i64* %168, align 8
  %170 = icmp ult i64 %167, %169
  br i1 %170, label %120, label %116
}

; Function Attrs: nounwind readnone speculatable
declare <16 x float> @llvm.fma.v16f32(<16 x float>, <16 x float>, <16 x float>) #12

; Function Attrs: nounwind ssp uwtable
define internal i32 @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX315LinearSRGBToXYBERKNS_6Image3IfEEPKfPS0_PS6_E3$_8E12CallInitFuncEPvm"(i8* nocapture readonly, i64) #6 align 2 {
  %3 = bitcast i8* %0 to i32 (i64)**
  %4 = load i32 (i64)*, i32 (i64)** %3, align 8
  %5 = tail call i32 %4(i64 %1) #13
  %6 = icmp ne i32 %5, 0
  %7 = sext i1 %6 to i32
  ret i32 %7
}

; Function Attrs: nounwind ssp uwtable
define internal void @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX315LinearSRGBToXYBERKNS_6Image3IfEEPKfPS0_PS6_E3$_8E12CallDataFuncEPvjm"(i8* nocapture readonly, i32, i64) #6 align 2 {
  %4 = getelementptr inbounds i8, i8* %0, i64 8
  %5 = bitcast i8* %4 to %class.anon.99**
  %6 = load %class.anon.99*, %class.anon.99** %5, align 8
  tail call fastcc void @"_ZZN3jxl6N_AVX315LinearSRGBToXYBERKNS_6Image3IfEEPKfPNS_10ThreadPoolEPS2_ENK3$_8clEii"(%class.anon.99* %6, i32 %1)
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal fastcc void @"_ZZN3jxl6N_AVX315LinearSRGBToXYBERKNS_6Image3IfEEPKfPNS_10ThreadPoolEPS2_ENK3$_8clEii"(%class.anon.99* nocapture readonly, i32) unnamed_addr #20 align 2 {
  %3 = sext i32 %1 to i64
  %4 = getelementptr inbounds %class.anon.99, %class.anon.99* %0, i64 0, i32 0
  %5 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %4, align 8
  %6 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 0, i32 0, i32 4
  %7 = load i64, i64* %6, align 8
  %8 = mul i64 %7, %3
  %9 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %10 = load i8*, i8** %9, align 8
  %11 = ptrtoint i8* %10 to i64
  %12 = and i64 %11, 63
  %13 = icmp eq i64 %12, 0
  tail call void @llvm.assume(i1 %13) #13
  %14 = getelementptr inbounds i8, i8* %10, i64 %8
  %15 = ptrtoint i8* %14 to i64
  %16 = and i64 %15, 63
  %17 = icmp eq i64 %16, 0
  tail call void @llvm.assume(i1 %17) #13
  %18 = bitcast i8* %14 to float*
  %19 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %20 = load i8*, i8** %19, align 8
  %21 = ptrtoint i8* %20 to i64
  %22 = and i64 %21, 63
  %23 = icmp eq i64 %22, 0
  tail call void @llvm.assume(i1 %23) #13
  %24 = getelementptr inbounds i8, i8* %20, i64 %8
  %25 = ptrtoint i8* %24 to i64
  %26 = and i64 %25, 63
  %27 = icmp eq i64 %26, 0
  tail call void @llvm.assume(i1 %27) #13
  %28 = bitcast i8* %24 to float*
  %29 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %30 = load i8*, i8** %29, align 8
  %31 = ptrtoint i8* %30 to i64
  %32 = and i64 %31, 63
  %33 = icmp eq i64 %32, 0
  tail call void @llvm.assume(i1 %33) #13
  %34 = getelementptr inbounds i8, i8* %30, i64 %8
  %35 = ptrtoint i8* %34 to i64
  %36 = and i64 %35, 63
  %37 = icmp eq i64 %36, 0
  tail call void @llvm.assume(i1 %37) #13
  %38 = bitcast i8* %34 to float*
  %39 = getelementptr inbounds %class.anon.99, %class.anon.99* %0, i64 0, i32 1
  %40 = load %"class.jxl::Image3"**, %"class.jxl::Image3"*** %39, align 8
  %41 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %40, align 8
  %42 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %41, i64 0, i32 0, i64 0, i32 0, i32 4
  %43 = load i64, i64* %42, align 8
  %44 = mul i64 %43, %3
  %45 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %41, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %46 = load i8*, i8** %45, align 8
  %47 = ptrtoint i8* %46 to i64
  %48 = and i64 %47, 63
  %49 = icmp eq i64 %48, 0
  tail call void @llvm.assume(i1 %49) #13
  %50 = getelementptr inbounds i8, i8* %46, i64 %44
  %51 = ptrtoint i8* %50 to i64
  %52 = and i64 %51, 63
  %53 = icmp eq i64 %52, 0
  tail call void @llvm.assume(i1 %53) #13
  %54 = bitcast i8* %50 to float*
  %55 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %41, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %56 = load i8*, i8** %55, align 8
  %57 = ptrtoint i8* %56 to i64
  %58 = and i64 %57, 63
  %59 = icmp eq i64 %58, 0
  tail call void @llvm.assume(i1 %59) #13
  %60 = getelementptr inbounds i8, i8* %56, i64 %44
  %61 = ptrtoint i8* %60 to i64
  %62 = and i64 %61, 63
  %63 = icmp eq i64 %62, 0
  tail call void @llvm.assume(i1 %63) #13
  %64 = bitcast i8* %60 to float*
  %65 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %41, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %66 = load i8*, i8** %65, align 8
  %67 = ptrtoint i8* %66 to i64
  %68 = and i64 %67, 63
  %69 = icmp eq i64 %68, 0
  tail call void @llvm.assume(i1 %69) #13
  %70 = getelementptr inbounds i8, i8* %66, i64 %44
  %71 = ptrtoint i8* %70 to i64
  %72 = and i64 %71, 63
  %73 = icmp eq i64 %72, 0
  tail call void @llvm.assume(i1 %73) #13
  %74 = bitcast i8* %70 to float*
  %75 = getelementptr inbounds %class.anon.99, %class.anon.99* %0, i64 0, i32 2
  %76 = load i64*, i64** %75, align 8
  %77 = load i64, i64* %76, align 8
  %78 = icmp eq i64 %77, 0
  br i1 %78, label %81, label %79

79:                                               ; preds = %2
  %80 = getelementptr inbounds %class.anon.99, %class.anon.99* %0, i64 0, i32 4
  br label %82

81:                                               ; preds = %82, %2
  ret void

82:                                               ; preds = %79, %82
  %83 = phi i64 [ 0, %79 ], [ %248, %82 ]
  %84 = getelementptr inbounds float, float* %18, i64 %83
  %85 = bitcast float* %84 to <16 x float>*
  %86 = load <16 x float>, <16 x float>* %85, align 64, !alias.scope !684, !noalias !687
  %87 = getelementptr inbounds float, float* %28, i64 %83
  %88 = bitcast float* %87 to <16 x float>*
  %89 = load <16 x float>, <16 x float>* %88, align 64, !alias.scope !689, !noalias !692
  %90 = getelementptr inbounds float, float* %38, i64 %83
  %91 = bitcast float* %90 to <16 x float>*
  %92 = load <16 x float>, <16 x float>* %91, align 64, !alias.scope !694, !noalias !697
  %93 = load float**, float*** %80, align 8
  %94 = load float*, float** %93, align 8
  %95 = getelementptr inbounds float, float* %54, i64 %83
  %96 = getelementptr inbounds float, float* %64, i64 %83
  %97 = getelementptr inbounds float, float* %74, i64 %83
  %98 = bitcast float* %94 to <16 x float>*
  %99 = load <16 x float>, <16 x float>* %98, align 64, !alias.scope !699, !noalias !706
  %100 = getelementptr inbounds float, float* %94, i64 16
  %101 = bitcast float* %100 to <16 x float>*
  %102 = load <16 x float>, <16 x float>* %101, align 64, !alias.scope !714, !noalias !717
  %103 = getelementptr inbounds float, float* %94, i64 32
  %104 = bitcast float* %103 to <16 x float>*
  %105 = load <16 x float>, <16 x float>* %104, align 64, !alias.scope !719, !noalias !722
  %106 = getelementptr inbounds float, float* %94, i64 48
  %107 = bitcast float* %106 to <16 x float>*
  %108 = load <16 x float>, <16 x float>* %107, align 64, !alias.scope !724, !noalias !727
  %109 = getelementptr inbounds float, float* %94, i64 64
  %110 = bitcast float* %109 to <16 x float>*
  %111 = load <16 x float>, <16 x float>* %110, align 64, !alias.scope !729, !noalias !732
  %112 = getelementptr inbounds float, float* %94, i64 80
  %113 = bitcast float* %112 to <16 x float>*
  %114 = load <16 x float>, <16 x float>* %113, align 64, !alias.scope !734, !noalias !737
  %115 = getelementptr inbounds float, float* %94, i64 96
  %116 = bitcast float* %115 to <16 x float>*
  %117 = load <16 x float>, <16 x float>* %116, align 64, !alias.scope !739, !noalias !742
  %118 = getelementptr inbounds float, float* %94, i64 112
  %119 = bitcast float* %118 to <16 x float>*
  %120 = load <16 x float>, <16 x float>* %119, align 64, !alias.scope !744, !noalias !747
  %121 = getelementptr inbounds float, float* %94, i64 128
  %122 = bitcast float* %121 to <16 x float>*
  %123 = load <16 x float>, <16 x float>* %122, align 64, !alias.scope !749, !noalias !752
  %124 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %105, <16 x float> %92, <16 x float> <float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000>) #13
  %125 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %102, <16 x float> %89, <16 x float> %124) #13
  %126 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %99, <16 x float> %86, <16 x float> %125) #13
  %127 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %114, <16 x float> %92, <16 x float> <float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000>) #13
  %128 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %111, <16 x float> %89, <16 x float> %127) #13
  %129 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %108, <16 x float> %86, <16 x float> %128) #13
  %130 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %123, <16 x float> %92, <16 x float> <float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000>) #13
  %131 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %120, <16 x float> %89, <16 x float> %130) #13
  %132 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %117, <16 x float> %86, <16 x float> %131) #13
  %133 = bitcast <16 x float> %126 to <16 x i32>
  %134 = icmp slt <16 x i32> %133, zeroinitializer
  %135 = select <16 x i1> %134, <16 x float> zeroinitializer, <16 x float> %126
  %136 = bitcast <16 x float> %129 to <16 x i32>
  %137 = icmp slt <16 x i32> %136, zeroinitializer
  %138 = select <16 x i1> %137, <16 x float> zeroinitializer, <16 x float> %129
  %139 = bitcast <16 x float> %132 to <16 x i32>
  %140 = icmp slt <16 x i32> %139, zeroinitializer
  %141 = select <16 x i1> %140, <16 x float> zeroinitializer, <16 x float> %132
  %142 = getelementptr inbounds float, float* %94, i64 144
  %143 = bitcast float* %142 to <16 x float>*
  %144 = load <16 x float>, <16 x float>* %143, align 64, !alias.scope !754, !noalias !757
  %145 = fmul <16 x float> %135, <float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000>
  %146 = bitcast <16 x float> %135 to <16 x i32>
  %147 = icmp eq <16 x i32> %146, zeroinitializer
  %148 = ashr <16 x i32> %146, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %149 = mul nsw <16 x i32> %148, <i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202>
  %150 = add <16 x i32> %149, <i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752>
  %151 = select <16 x i1> %147, <16 x i32> zeroinitializer, <16 x i32> %150
  %152 = bitcast <16 x i32> %151 to <16 x float>
  %153 = fmul <16 x float> %152, %152
  %154 = fmul <16 x float> %153, %153
  %155 = fmul <16 x float> %152, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %156 = fsub <16 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %154
  %157 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %145, <16 x float> %156, <16 x float> %155) #13
  %158 = fmul <16 x float> %157, %157
  %159 = fmul <16 x float> %158, %158
  %160 = fmul <16 x float> %157, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %161 = fsub <16 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %159
  %162 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %145, <16 x float> %161, <16 x float> %160) #13
  %163 = fmul <16 x float> %162, %162
  %164 = fmul <16 x float> %163, %163
  %165 = fmul <16 x float> %162, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %166 = fsub <16 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %164
  %167 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %145, <16 x float> %166, <16 x float> %165) #13
  %168 = fmul <16 x float> %167, %167
  %169 = fmul <16 x float> %168, %168
  %170 = fsub <16 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %169
  %171 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %135, <16 x float> %170, <16 x float> %167) #13
  %172 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %171, <16 x float> <float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000>, <16 x float> %167) #13
  %173 = fmul <16 x float> %172, %172
  %174 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %173, <16 x float> %135, <16 x float> %144) #13
  %175 = getelementptr inbounds float, float* %94, i64 160
  %176 = bitcast float* %175 to <16 x float>*
  %177 = load <16 x float>, <16 x float>* %176, align 64, !alias.scope !759, !noalias !762
  %178 = fmul <16 x float> %138, <float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000>
  %179 = bitcast <16 x float> %138 to <16 x i32>
  %180 = icmp eq <16 x i32> %179, zeroinitializer
  %181 = ashr <16 x i32> %179, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %182 = mul nsw <16 x i32> %181, <i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202>
  %183 = add <16 x i32> %182, <i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752>
  %184 = select <16 x i1> %180, <16 x i32> zeroinitializer, <16 x i32> %183
  %185 = bitcast <16 x i32> %184 to <16 x float>
  %186 = fmul <16 x float> %185, %185
  %187 = fmul <16 x float> %186, %186
  %188 = fmul <16 x float> %185, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %189 = fsub <16 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %187
  %190 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %178, <16 x float> %189, <16 x float> %188) #13
  %191 = fmul <16 x float> %190, %190
  %192 = fmul <16 x float> %191, %191
  %193 = fmul <16 x float> %190, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %194 = fsub <16 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %192
  %195 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %178, <16 x float> %194, <16 x float> %193) #13
  %196 = fmul <16 x float> %195, %195
  %197 = fmul <16 x float> %196, %196
  %198 = fmul <16 x float> %195, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %199 = fsub <16 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %197
  %200 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %178, <16 x float> %199, <16 x float> %198) #13
  %201 = fmul <16 x float> %200, %200
  %202 = fmul <16 x float> %201, %201
  %203 = fsub <16 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %202
  %204 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %138, <16 x float> %203, <16 x float> %200) #13
  %205 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %204, <16 x float> <float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000>, <16 x float> %200) #13
  %206 = fmul <16 x float> %205, %205
  %207 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %206, <16 x float> %138, <16 x float> %177) #13
  %208 = getelementptr inbounds float, float* %94, i64 176
  %209 = bitcast float* %208 to <16 x float>*
  %210 = load <16 x float>, <16 x float>* %209, align 64, !alias.scope !764, !noalias !767
  %211 = fmul <16 x float> %141, <float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000>
  %212 = bitcast <16 x float> %141 to <16 x i32>
  %213 = icmp eq <16 x i32> %212, zeroinitializer
  %214 = ashr <16 x i32> %212, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %215 = mul nsw <16 x i32> %214, <i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202>
  %216 = add <16 x i32> %215, <i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752>
  %217 = select <16 x i1> %213, <16 x i32> zeroinitializer, <16 x i32> %216
  %218 = bitcast <16 x i32> %217 to <16 x float>
  %219 = fmul <16 x float> %218, %218
  %220 = fmul <16 x float> %219, %219
  %221 = fmul <16 x float> %218, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %222 = fsub <16 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %220
  %223 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %211, <16 x float> %222, <16 x float> %221) #13
  %224 = fmul <16 x float> %223, %223
  %225 = fmul <16 x float> %224, %224
  %226 = fmul <16 x float> %223, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %227 = fsub <16 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %225
  %228 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %211, <16 x float> %227, <16 x float> %226) #13
  %229 = fmul <16 x float> %228, %228
  %230 = fmul <16 x float> %229, %229
  %231 = fmul <16 x float> %228, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %232 = fsub <16 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %230
  %233 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %211, <16 x float> %232, <16 x float> %231) #13
  %234 = fmul <16 x float> %233, %233
  %235 = fmul <16 x float> %234, %234
  %236 = fsub <16 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %235
  %237 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %141, <16 x float> %236, <16 x float> %233) #13
  %238 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %237, <16 x float> <float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000>, <16 x float> %233) #13
  %239 = fmul <16 x float> %238, %238
  %240 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %239, <16 x float> %141, <16 x float> %210) #13
  %241 = fsub <16 x float> %174, %207
  %242 = fmul <16 x float> %241, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %243 = bitcast float* %95 to <16 x float>*
  store <16 x float> %242, <16 x float>* %243, align 64, !alias.scope !769, !noalias !774
  %244 = fadd <16 x float> %174, %207
  %245 = fmul <16 x float> %244, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %246 = bitcast float* %96 to <16 x float>*
  store <16 x float> %245, <16 x float>* %246, align 64, !alias.scope !777, !noalias !780
  %247 = bitcast float* %97 to <16 x float>*
  store <16 x float> %240, <16 x float>* %247, align 64, !alias.scope !781, !noalias !784
  %248 = add i64 %83, 16
  %249 = load i64*, i64** %75, align 8
  %250 = load i64, i64* %249, align 8
  %251 = icmp ult i64 %248, %250
  br i1 %251, label %82, label %81
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX39SRGBToXYBERKNS_6Image3IfEEPKfPS0_PS6_E3$_9E12CallInitFuncEPvm"(i8* nocapture readonly, i64) #6 align 2 {
  %3 = bitcast i8* %0 to i32 (i64)**
  %4 = load i32 (i64)*, i32 (i64)** %3, align 8
  %5 = tail call i32 %4(i64 %1) #13
  %6 = icmp ne i32 %5, 0
  %7 = sext i1 %6 to i32
  ret i32 %7
}

; Function Attrs: nounwind ssp uwtable
define internal void @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX39SRGBToXYBERKNS_6Image3IfEEPKfPS0_PS6_E3$_9E12CallDataFuncEPvjm"(i8* nocapture readonly, i32, i64) #6 align 2 {
  %4 = getelementptr inbounds i8, i8* %0, i64 8
  %5 = bitcast i8* %4 to %class.anon.100**
  %6 = load %class.anon.100*, %class.anon.100** %5, align 8
  tail call fastcc void @"_ZZN3jxl6N_AVX39SRGBToXYBERKNS_6Image3IfEEPKfPNS_10ThreadPoolEPS2_ENK3$_9clEii"(%class.anon.100* %6, i32 %1)
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal fastcc void @"_ZZN3jxl6N_AVX39SRGBToXYBERKNS_6Image3IfEEPKfPNS_10ThreadPoolEPS2_ENK3$_9clEii"(%class.anon.100* nocapture readonly, i32) unnamed_addr #20 align 2 {
  %3 = sext i32 %1 to i64
  %4 = getelementptr inbounds %class.anon.100, %class.anon.100* %0, i64 0, i32 0
  %5 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %4, align 8
  %6 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 0, i32 0, i32 4
  %7 = load i64, i64* %6, align 8
  %8 = mul i64 %7, %3
  %9 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %10 = load i8*, i8** %9, align 8
  %11 = ptrtoint i8* %10 to i64
  %12 = and i64 %11, 63
  %13 = icmp eq i64 %12, 0
  tail call void @llvm.assume(i1 %13) #13
  %14 = getelementptr inbounds i8, i8* %10, i64 %8
  %15 = ptrtoint i8* %14 to i64
  %16 = and i64 %15, 63
  %17 = icmp eq i64 %16, 0
  tail call void @llvm.assume(i1 %17) #13
  %18 = bitcast i8* %14 to float*
  %19 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %20 = load i8*, i8** %19, align 8
  %21 = ptrtoint i8* %20 to i64
  %22 = and i64 %21, 63
  %23 = icmp eq i64 %22, 0
  tail call void @llvm.assume(i1 %23) #13
  %24 = getelementptr inbounds i8, i8* %20, i64 %8
  %25 = ptrtoint i8* %24 to i64
  %26 = and i64 %25, 63
  %27 = icmp eq i64 %26, 0
  tail call void @llvm.assume(i1 %27) #13
  %28 = bitcast i8* %24 to float*
  %29 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %30 = load i8*, i8** %29, align 8
  %31 = ptrtoint i8* %30 to i64
  %32 = and i64 %31, 63
  %33 = icmp eq i64 %32, 0
  tail call void @llvm.assume(i1 %33) #13
  %34 = getelementptr inbounds i8, i8* %30, i64 %8
  %35 = ptrtoint i8* %34 to i64
  %36 = and i64 %35, 63
  %37 = icmp eq i64 %36, 0
  tail call void @llvm.assume(i1 %37) #13
  %38 = bitcast i8* %34 to float*
  %39 = getelementptr inbounds %class.anon.100, %class.anon.100* %0, i64 0, i32 1
  %40 = load %"class.jxl::Image3"**, %"class.jxl::Image3"*** %39, align 8
  %41 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %40, align 8
  %42 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %41, i64 0, i32 0, i64 0, i32 0, i32 4
  %43 = load i64, i64* %42, align 8
  %44 = mul i64 %43, %3
  %45 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %41, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %46 = load i8*, i8** %45, align 8
  %47 = ptrtoint i8* %46 to i64
  %48 = and i64 %47, 63
  %49 = icmp eq i64 %48, 0
  tail call void @llvm.assume(i1 %49) #13
  %50 = getelementptr inbounds i8, i8* %46, i64 %44
  %51 = ptrtoint i8* %50 to i64
  %52 = and i64 %51, 63
  %53 = icmp eq i64 %52, 0
  tail call void @llvm.assume(i1 %53) #13
  %54 = bitcast i8* %50 to float*
  %55 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %41, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %56 = load i8*, i8** %55, align 8
  %57 = ptrtoint i8* %56 to i64
  %58 = and i64 %57, 63
  %59 = icmp eq i64 %58, 0
  tail call void @llvm.assume(i1 %59) #13
  %60 = getelementptr inbounds i8, i8* %56, i64 %44
  %61 = ptrtoint i8* %60 to i64
  %62 = and i64 %61, 63
  %63 = icmp eq i64 %62, 0
  tail call void @llvm.assume(i1 %63) #13
  %64 = bitcast i8* %60 to float*
  %65 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %41, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %66 = load i8*, i8** %65, align 8
  %67 = ptrtoint i8* %66 to i64
  %68 = and i64 %67, 63
  %69 = icmp eq i64 %68, 0
  tail call void @llvm.assume(i1 %69) #13
  %70 = getelementptr inbounds i8, i8* %66, i64 %44
  %71 = ptrtoint i8* %70 to i64
  %72 = and i64 %71, 63
  %73 = icmp eq i64 %72, 0
  tail call void @llvm.assume(i1 %73) #13
  %74 = bitcast i8* %70 to float*
  %75 = getelementptr inbounds %class.anon.100, %class.anon.100* %0, i64 0, i32 2
  %76 = load i64*, i64** %75, align 8
  %77 = load i64, i64* %76, align 8
  %78 = icmp eq i64 %77, 0
  br i1 %78, label %81, label %79

79:                                               ; preds = %2
  %80 = getelementptr inbounds %class.anon.100, %class.anon.100* %0, i64 0, i32 4
  br label %82

81:                                               ; preds = %82, %2
  ret void

82:                                               ; preds = %79, %82
  %83 = phi i64 [ 0, %79 ], [ %305, %82 ]
  %84 = getelementptr inbounds float, float* %18, i64 %83
  %85 = bitcast float* %84 to <16 x i32>*
  %86 = load <16 x i32>, <16 x i32>* %85, align 64, !alias.scope !785, !noalias !788
  %87 = and <16 x i32> %86, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %88 = and <16 x i32> %86, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %89 = bitcast <16 x i32> %88 to <16 x float>
  %90 = fmul <16 x float> %89, <float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000>
  fence acq_rel
  %91 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %89, <16 x float> <float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000>, <16 x float> <float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000>) #13
  %92 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %89, <16 x float> <float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000>, <16 x float> <float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000>) #13
  fence acq_rel
  %93 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %91, <16 x float> %89, <16 x float> <float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000>) #13
  %94 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %92, <16 x float> %89, <16 x float> <float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000>) #13
  fence acq_rel
  %95 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %93, <16 x float> %89, <16 x float> <float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000>) #13
  %96 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %94, <16 x float> %89, <16 x float> <float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000>) #13
  fence acq_rel
  %97 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %95, <16 x float> %89, <16 x float> <float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000>) #13
  %98 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %96, <16 x float> %89, <16 x float> <float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000>) #13
  fence acq_rel
  %99 = fdiv <16 x float> %97, %98
  %100 = fcmp ogt <16 x float> %89, <float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000>
  %101 = select <16 x i1> %100, <16 x float> %99, <16 x float> %90
  %102 = bitcast <16 x float> %101 to <16 x i32>
  %103 = and <16 x i32> %102, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %104 = or <16 x i32> %103, %87
  %105 = getelementptr inbounds float, float* %28, i64 %83
  %106 = bitcast float* %105 to <16 x i32>*
  %107 = load <16 x i32>, <16 x i32>* %106, align 64, !alias.scope !790, !noalias !793
  %108 = and <16 x i32> %107, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %109 = and <16 x i32> %107, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %110 = bitcast <16 x i32> %109 to <16 x float>
  %111 = fmul <16 x float> %110, <float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000>
  fence acq_rel
  %112 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %110, <16 x float> <float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000>, <16 x float> <float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000>) #13
  %113 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %110, <16 x float> <float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000>, <16 x float> <float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000>) #13
  fence acq_rel
  %114 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %112, <16 x float> %110, <16 x float> <float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000>) #13
  %115 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %113, <16 x float> %110, <16 x float> <float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000>) #13
  fence acq_rel
  %116 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %114, <16 x float> %110, <16 x float> <float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000>) #13
  %117 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %115, <16 x float> %110, <16 x float> <float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000>) #13
  fence acq_rel
  %118 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %116, <16 x float> %110, <16 x float> <float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000>) #13
  %119 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %117, <16 x float> %110, <16 x float> <float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000>) #13
  fence acq_rel
  %120 = fdiv <16 x float> %118, %119
  %121 = fcmp ogt <16 x float> %110, <float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000>
  %122 = select <16 x i1> %121, <16 x float> %120, <16 x float> %111
  %123 = bitcast <16 x float> %122 to <16 x i32>
  %124 = and <16 x i32> %123, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %125 = or <16 x i32> %124, %108
  %126 = getelementptr inbounds float, float* %38, i64 %83
  %127 = bitcast float* %126 to <16 x i32>*
  %128 = load <16 x i32>, <16 x i32>* %127, align 64, !alias.scope !795, !noalias !798
  %129 = and <16 x i32> %128, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %130 = and <16 x i32> %128, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %131 = bitcast <16 x i32> %130 to <16 x float>
  %132 = fmul <16 x float> %131, <float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000>
  fence acq_rel
  %133 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %131, <16 x float> <float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000>, <16 x float> <float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000>) #13
  %134 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %131, <16 x float> <float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000>, <16 x float> <float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000>) #13
  fence acq_rel
  %135 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %133, <16 x float> %131, <16 x float> <float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000>) #13
  %136 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %134, <16 x float> %131, <16 x float> <float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000>) #13
  fence acq_rel
  %137 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %135, <16 x float> %131, <16 x float> <float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000>) #13
  %138 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %136, <16 x float> %131, <16 x float> <float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000>) #13
  fence acq_rel
  %139 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %137, <16 x float> %131, <16 x float> <float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000>) #13
  %140 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %138, <16 x float> %131, <16 x float> <float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000>) #13
  fence acq_rel
  %141 = fdiv <16 x float> %139, %140
  %142 = fcmp ogt <16 x float> %131, <float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000>
  %143 = select <16 x i1> %142, <16 x float> %141, <16 x float> %132
  %144 = bitcast <16 x float> %143 to <16 x i32>
  %145 = and <16 x i32> %144, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %146 = or <16 x i32> %145, %129
  %147 = bitcast <16 x i32> %104 to <16 x float>
  %148 = bitcast <16 x i32> %125 to <16 x float>
  %149 = bitcast <16 x i32> %146 to <16 x float>
  %150 = load float**, float*** %80, align 8
  %151 = load float*, float** %150, align 8
  %152 = getelementptr inbounds float, float* %54, i64 %83
  %153 = getelementptr inbounds float, float* %64, i64 %83
  %154 = getelementptr inbounds float, float* %74, i64 %83
  %155 = bitcast float* %151 to <16 x float>*
  %156 = load <16 x float>, <16 x float>* %155, align 64, !alias.scope !800, !noalias !807
  %157 = getelementptr inbounds float, float* %151, i64 16
  %158 = bitcast float* %157 to <16 x float>*
  %159 = load <16 x float>, <16 x float>* %158, align 64, !alias.scope !815, !noalias !818
  %160 = getelementptr inbounds float, float* %151, i64 32
  %161 = bitcast float* %160 to <16 x float>*
  %162 = load <16 x float>, <16 x float>* %161, align 64, !alias.scope !820, !noalias !823
  %163 = getelementptr inbounds float, float* %151, i64 48
  %164 = bitcast float* %163 to <16 x float>*
  %165 = load <16 x float>, <16 x float>* %164, align 64, !alias.scope !825, !noalias !828
  %166 = getelementptr inbounds float, float* %151, i64 64
  %167 = bitcast float* %166 to <16 x float>*
  %168 = load <16 x float>, <16 x float>* %167, align 64, !alias.scope !830, !noalias !833
  %169 = getelementptr inbounds float, float* %151, i64 80
  %170 = bitcast float* %169 to <16 x float>*
  %171 = load <16 x float>, <16 x float>* %170, align 64, !alias.scope !835, !noalias !838
  %172 = getelementptr inbounds float, float* %151, i64 96
  %173 = bitcast float* %172 to <16 x float>*
  %174 = load <16 x float>, <16 x float>* %173, align 64, !alias.scope !840, !noalias !843
  %175 = getelementptr inbounds float, float* %151, i64 112
  %176 = bitcast float* %175 to <16 x float>*
  %177 = load <16 x float>, <16 x float>* %176, align 64, !alias.scope !845, !noalias !848
  %178 = getelementptr inbounds float, float* %151, i64 128
  %179 = bitcast float* %178 to <16 x float>*
  %180 = load <16 x float>, <16 x float>* %179, align 64, !alias.scope !850, !noalias !853
  %181 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %162, <16 x float> %149, <16 x float> <float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000>) #13
  %182 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %159, <16 x float> %148, <16 x float> %181) #13
  %183 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %156, <16 x float> %147, <16 x float> %182) #13
  %184 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %171, <16 x float> %149, <16 x float> <float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000>) #13
  %185 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %168, <16 x float> %148, <16 x float> %184) #13
  %186 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %165, <16 x float> %147, <16 x float> %185) #13
  %187 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %180, <16 x float> %149, <16 x float> <float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000>) #13
  %188 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %177, <16 x float> %148, <16 x float> %187) #13
  %189 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %174, <16 x float> %147, <16 x float> %188) #13
  %190 = bitcast <16 x float> %183 to <16 x i32>
  %191 = icmp slt <16 x i32> %190, zeroinitializer
  %192 = select <16 x i1> %191, <16 x float> zeroinitializer, <16 x float> %183
  %193 = bitcast <16 x float> %186 to <16 x i32>
  %194 = icmp slt <16 x i32> %193, zeroinitializer
  %195 = select <16 x i1> %194, <16 x float> zeroinitializer, <16 x float> %186
  %196 = bitcast <16 x float> %189 to <16 x i32>
  %197 = icmp slt <16 x i32> %196, zeroinitializer
  %198 = select <16 x i1> %197, <16 x float> zeroinitializer, <16 x float> %189
  %199 = getelementptr inbounds float, float* %151, i64 144
  %200 = bitcast float* %199 to <16 x float>*
  %201 = load <16 x float>, <16 x float>* %200, align 64, !alias.scope !855, !noalias !858
  %202 = fmul <16 x float> %192, <float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000>
  %203 = bitcast <16 x float> %192 to <16 x i32>
  %204 = icmp eq <16 x i32> %203, zeroinitializer
  %205 = ashr <16 x i32> %203, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %206 = mul nsw <16 x i32> %205, <i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202>
  %207 = add <16 x i32> %206, <i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752>
  %208 = select <16 x i1> %204, <16 x i32> zeroinitializer, <16 x i32> %207
  %209 = bitcast <16 x i32> %208 to <16 x float>
  %210 = fmul <16 x float> %209, %209
  %211 = fmul <16 x float> %210, %210
  %212 = fmul <16 x float> %209, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %213 = fsub <16 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %211
  %214 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %202, <16 x float> %213, <16 x float> %212) #13
  %215 = fmul <16 x float> %214, %214
  %216 = fmul <16 x float> %215, %215
  %217 = fmul <16 x float> %214, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %218 = fsub <16 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %216
  %219 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %202, <16 x float> %218, <16 x float> %217) #13
  %220 = fmul <16 x float> %219, %219
  %221 = fmul <16 x float> %220, %220
  %222 = fmul <16 x float> %219, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %223 = fsub <16 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %221
  %224 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %202, <16 x float> %223, <16 x float> %222) #13
  %225 = fmul <16 x float> %224, %224
  %226 = fmul <16 x float> %225, %225
  %227 = fsub <16 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %226
  %228 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %192, <16 x float> %227, <16 x float> %224) #13
  %229 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %228, <16 x float> <float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000>, <16 x float> %224) #13
  %230 = fmul <16 x float> %229, %229
  %231 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %230, <16 x float> %192, <16 x float> %201) #13
  %232 = getelementptr inbounds float, float* %151, i64 160
  %233 = bitcast float* %232 to <16 x float>*
  %234 = load <16 x float>, <16 x float>* %233, align 64, !alias.scope !860, !noalias !863
  %235 = fmul <16 x float> %195, <float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000>
  %236 = bitcast <16 x float> %195 to <16 x i32>
  %237 = icmp eq <16 x i32> %236, zeroinitializer
  %238 = ashr <16 x i32> %236, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %239 = mul nsw <16 x i32> %238, <i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202>
  %240 = add <16 x i32> %239, <i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752>
  %241 = select <16 x i1> %237, <16 x i32> zeroinitializer, <16 x i32> %240
  %242 = bitcast <16 x i32> %241 to <16 x float>
  %243 = fmul <16 x float> %242, %242
  %244 = fmul <16 x float> %243, %243
  %245 = fmul <16 x float> %242, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %246 = fsub <16 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %244
  %247 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %235, <16 x float> %246, <16 x float> %245) #13
  %248 = fmul <16 x float> %247, %247
  %249 = fmul <16 x float> %248, %248
  %250 = fmul <16 x float> %247, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %251 = fsub <16 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %249
  %252 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %235, <16 x float> %251, <16 x float> %250) #13
  %253 = fmul <16 x float> %252, %252
  %254 = fmul <16 x float> %253, %253
  %255 = fmul <16 x float> %252, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %256 = fsub <16 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %254
  %257 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %235, <16 x float> %256, <16 x float> %255) #13
  %258 = fmul <16 x float> %257, %257
  %259 = fmul <16 x float> %258, %258
  %260 = fsub <16 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %259
  %261 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %195, <16 x float> %260, <16 x float> %257) #13
  %262 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %261, <16 x float> <float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000>, <16 x float> %257) #13
  %263 = fmul <16 x float> %262, %262
  %264 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %263, <16 x float> %195, <16 x float> %234) #13
  %265 = getelementptr inbounds float, float* %151, i64 176
  %266 = bitcast float* %265 to <16 x float>*
  %267 = load <16 x float>, <16 x float>* %266, align 64, !alias.scope !865, !noalias !868
  %268 = fmul <16 x float> %198, <float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000>
  %269 = bitcast <16 x float> %198 to <16 x i32>
  %270 = icmp eq <16 x i32> %269, zeroinitializer
  %271 = ashr <16 x i32> %269, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %272 = mul nsw <16 x i32> %271, <i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202>
  %273 = add <16 x i32> %272, <i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752>
  %274 = select <16 x i1> %270, <16 x i32> zeroinitializer, <16 x i32> %273
  %275 = bitcast <16 x i32> %274 to <16 x float>
  %276 = fmul <16 x float> %275, %275
  %277 = fmul <16 x float> %276, %276
  %278 = fmul <16 x float> %275, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %279 = fsub <16 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %277
  %280 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %268, <16 x float> %279, <16 x float> %278) #13
  %281 = fmul <16 x float> %280, %280
  %282 = fmul <16 x float> %281, %281
  %283 = fmul <16 x float> %280, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %284 = fsub <16 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %282
  %285 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %268, <16 x float> %284, <16 x float> %283) #13
  %286 = fmul <16 x float> %285, %285
  %287 = fmul <16 x float> %286, %286
  %288 = fmul <16 x float> %285, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %289 = fsub <16 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %287
  %290 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %268, <16 x float> %289, <16 x float> %288) #13
  %291 = fmul <16 x float> %290, %290
  %292 = fmul <16 x float> %291, %291
  %293 = fsub <16 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %292
  %294 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %198, <16 x float> %293, <16 x float> %290) #13
  %295 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %294, <16 x float> <float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000>, <16 x float> %290) #13
  %296 = fmul <16 x float> %295, %295
  %297 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %296, <16 x float> %198, <16 x float> %267) #13
  %298 = fsub <16 x float> %231, %264
  %299 = fmul <16 x float> %298, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %300 = bitcast float* %152 to <16 x float>*
  store <16 x float> %299, <16 x float>* %300, align 64, !alias.scope !870, !noalias !875
  %301 = fadd <16 x float> %231, %264
  %302 = fmul <16 x float> %301, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %303 = bitcast float* %153 to <16 x float>*
  store <16 x float> %302, <16 x float>* %303, align 64, !alias.scope !878, !noalias !881
  %304 = bitcast float* %154 to <16 x float>*
  store <16 x float> %297, <16 x float>* %304, align 64, !alias.scope !882, !noalias !885
  %305 = add i64 %83, 16
  %306 = load i64*, i64** %75, align 8
  %307 = load i64, i64* %306, align 8
  %308 = icmp ult i64 %305, %307
  br i1 %308, label %82, label %81
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX318SRGBToXYBAndLinearERKNS_6Image3IfEEPKfPS0_PS6_SC_E4$_10E12CallInitFuncEPvm"(i8* nocapture readonly, i64) #6 align 2 {
  %3 = bitcast i8* %0 to i32 (i64)**
  %4 = load i32 (i64)*, i32 (i64)** %3, align 8
  %5 = tail call i32 %4(i64 %1) #13
  %6 = icmp ne i32 %5, 0
  %7 = sext i1 %6 to i32
  ret i32 %7
}

; Function Attrs: nounwind ssp uwtable
define internal void @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX318SRGBToXYBAndLinearERKNS_6Image3IfEEPKfPS0_PS6_SC_E4$_10E12CallDataFuncEPvjm"(i8* nocapture readonly, i32, i64) #6 align 2 {
  %4 = getelementptr inbounds i8, i8* %0, i64 8
  %5 = bitcast i8* %4 to %class.anon.101**
  %6 = load %class.anon.101*, %class.anon.101** %5, align 8
  tail call fastcc void @"_ZZN3jxl6N_AVX318SRGBToXYBAndLinearERKNS_6Image3IfEEPKfPNS_10ThreadPoolEPS2_S9_ENK4$_10clEii"(%class.anon.101* %6, i32 %1)
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal fastcc void @"_ZZN3jxl6N_AVX318SRGBToXYBAndLinearERKNS_6Image3IfEEPKfPNS_10ThreadPoolEPS2_S9_ENK4$_10clEii"(%class.anon.101* nocapture readonly, i32) unnamed_addr #20 align 2 {
  %3 = sext i32 %1 to i64
  %4 = getelementptr inbounds %class.anon.101, %class.anon.101* %0, i64 0, i32 0
  %5 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %4, align 8
  %6 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 0, i32 0, i32 4
  %7 = load i64, i64* %6, align 8
  %8 = mul i64 %7, %3
  %9 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %10 = load i8*, i8** %9, align 8
  %11 = ptrtoint i8* %10 to i64
  %12 = and i64 %11, 63
  %13 = icmp eq i64 %12, 0
  tail call void @llvm.assume(i1 %13) #13
  %14 = getelementptr inbounds i8, i8* %10, i64 %8
  %15 = ptrtoint i8* %14 to i64
  %16 = and i64 %15, 63
  %17 = icmp eq i64 %16, 0
  tail call void @llvm.assume(i1 %17) #13
  %18 = bitcast i8* %14 to float*
  %19 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %20 = load i8*, i8** %19, align 8
  %21 = ptrtoint i8* %20 to i64
  %22 = and i64 %21, 63
  %23 = icmp eq i64 %22, 0
  tail call void @llvm.assume(i1 %23) #13
  %24 = getelementptr inbounds i8, i8* %20, i64 %8
  %25 = ptrtoint i8* %24 to i64
  %26 = and i64 %25, 63
  %27 = icmp eq i64 %26, 0
  tail call void @llvm.assume(i1 %27) #13
  %28 = bitcast i8* %24 to float*
  %29 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %30 = load i8*, i8** %29, align 8
  %31 = ptrtoint i8* %30 to i64
  %32 = and i64 %31, 63
  %33 = icmp eq i64 %32, 0
  tail call void @llvm.assume(i1 %33) #13
  %34 = getelementptr inbounds i8, i8* %30, i64 %8
  %35 = ptrtoint i8* %34 to i64
  %36 = and i64 %35, 63
  %37 = icmp eq i64 %36, 0
  tail call void @llvm.assume(i1 %37) #13
  %38 = bitcast i8* %34 to float*
  %39 = getelementptr inbounds %class.anon.101, %class.anon.101* %0, i64 0, i32 1
  %40 = load %"class.jxl::Image3"**, %"class.jxl::Image3"*** %39, align 8
  %41 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %40, align 8
  %42 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %41, i64 0, i32 0, i64 0, i32 0, i32 4
  %43 = load i64, i64* %42, align 8
  %44 = mul i64 %43, %3
  %45 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %41, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %46 = load i8*, i8** %45, align 8
  %47 = ptrtoint i8* %46 to i64
  %48 = and i64 %47, 63
  %49 = icmp eq i64 %48, 0
  tail call void @llvm.assume(i1 %49) #13
  %50 = getelementptr inbounds i8, i8* %46, i64 %44
  %51 = ptrtoint i8* %50 to i64
  %52 = and i64 %51, 63
  %53 = icmp eq i64 %52, 0
  tail call void @llvm.assume(i1 %53) #13
  %54 = bitcast i8* %50 to float*
  %55 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %41, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %56 = load i8*, i8** %55, align 8
  %57 = ptrtoint i8* %56 to i64
  %58 = and i64 %57, 63
  %59 = icmp eq i64 %58, 0
  tail call void @llvm.assume(i1 %59) #13
  %60 = getelementptr inbounds i8, i8* %56, i64 %44
  %61 = ptrtoint i8* %60 to i64
  %62 = and i64 %61, 63
  %63 = icmp eq i64 %62, 0
  tail call void @llvm.assume(i1 %63) #13
  %64 = bitcast i8* %60 to float*
  %65 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %41, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %66 = load i8*, i8** %65, align 8
  %67 = ptrtoint i8* %66 to i64
  %68 = and i64 %67, 63
  %69 = icmp eq i64 %68, 0
  tail call void @llvm.assume(i1 %69) #13
  %70 = getelementptr inbounds i8, i8* %66, i64 %44
  %71 = ptrtoint i8* %70 to i64
  %72 = and i64 %71, 63
  %73 = icmp eq i64 %72, 0
  tail call void @llvm.assume(i1 %73) #13
  %74 = bitcast i8* %70 to float*
  %75 = getelementptr inbounds %class.anon.101, %class.anon.101* %0, i64 0, i32 2
  %76 = load %"class.jxl::Image3"**, %"class.jxl::Image3"*** %75, align 8
  %77 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %76, align 8
  %78 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %77, i64 0, i32 0, i64 0, i32 0, i32 4
  %79 = load i64, i64* %78, align 8
  %80 = mul i64 %79, %3
  %81 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %77, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %82 = load i8*, i8** %81, align 8
  %83 = ptrtoint i8* %82 to i64
  %84 = and i64 %83, 63
  %85 = icmp eq i64 %84, 0
  tail call void @llvm.assume(i1 %85) #13
  %86 = getelementptr inbounds i8, i8* %82, i64 %80
  %87 = ptrtoint i8* %86 to i64
  %88 = and i64 %87, 63
  %89 = icmp eq i64 %88, 0
  tail call void @llvm.assume(i1 %89) #13
  %90 = bitcast i8* %86 to float*
  %91 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %77, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %92 = load i8*, i8** %91, align 8
  %93 = ptrtoint i8* %92 to i64
  %94 = and i64 %93, 63
  %95 = icmp eq i64 %94, 0
  tail call void @llvm.assume(i1 %95) #13
  %96 = getelementptr inbounds i8, i8* %92, i64 %80
  %97 = ptrtoint i8* %96 to i64
  %98 = and i64 %97, 63
  %99 = icmp eq i64 %98, 0
  tail call void @llvm.assume(i1 %99) #13
  %100 = bitcast i8* %96 to float*
  %101 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %77, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %102 = load i8*, i8** %101, align 8
  %103 = ptrtoint i8* %102 to i64
  %104 = and i64 %103, 63
  %105 = icmp eq i64 %104, 0
  tail call void @llvm.assume(i1 %105) #13
  %106 = getelementptr inbounds i8, i8* %102, i64 %80
  %107 = ptrtoint i8* %106 to i64
  %108 = and i64 %107, 63
  %109 = icmp eq i64 %108, 0
  tail call void @llvm.assume(i1 %109) #13
  %110 = bitcast i8* %106 to float*
  %111 = getelementptr inbounds %class.anon.101, %class.anon.101* %0, i64 0, i32 3
  %112 = load i64*, i64** %111, align 8
  %113 = load i64, i64* %112, align 8
  %114 = icmp eq i64 %113, 0
  br i1 %114, label %117, label %115

115:                                              ; preds = %2
  %116 = getelementptr inbounds %class.anon.101, %class.anon.101* %0, i64 0, i32 5
  br label %118

117:                                              ; preds = %118, %2
  ret void

118:                                              ; preds = %115, %118
  %119 = phi i64 [ 0, %115 ], [ %347, %118 ]
  %120 = getelementptr inbounds float, float* %18, i64 %119
  %121 = bitcast float* %120 to <16 x i32>*
  %122 = load <16 x i32>, <16 x i32>* %121, align 64, !alias.scope !886, !noalias !889
  %123 = and <16 x i32> %122, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %124 = and <16 x i32> %122, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %125 = bitcast <16 x i32> %124 to <16 x float>
  %126 = fmul <16 x float> %125, <float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000>
  fence acq_rel
  %127 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %125, <16 x float> <float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000>, <16 x float> <float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000>) #13
  %128 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %125, <16 x float> <float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000>, <16 x float> <float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000>) #13
  fence acq_rel
  %129 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %127, <16 x float> %125, <16 x float> <float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000>) #13
  %130 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %128, <16 x float> %125, <16 x float> <float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000>) #13
  fence acq_rel
  %131 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %129, <16 x float> %125, <16 x float> <float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000>) #13
  %132 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %130, <16 x float> %125, <16 x float> <float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000>) #13
  fence acq_rel
  %133 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %131, <16 x float> %125, <16 x float> <float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000>) #13
  %134 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %132, <16 x float> %125, <16 x float> <float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000>) #13
  fence acq_rel
  %135 = fdiv <16 x float> %133, %134
  %136 = fcmp ogt <16 x float> %125, <float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000>
  %137 = select <16 x i1> %136, <16 x float> %135, <16 x float> %126
  %138 = bitcast <16 x float> %137 to <16 x i32>
  %139 = and <16 x i32> %138, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %140 = or <16 x i32> %139, %123
  %141 = getelementptr inbounds float, float* %28, i64 %119
  %142 = bitcast float* %141 to <16 x i32>*
  %143 = load <16 x i32>, <16 x i32>* %142, align 64, !alias.scope !891, !noalias !894
  %144 = and <16 x i32> %143, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %145 = and <16 x i32> %143, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %146 = bitcast <16 x i32> %145 to <16 x float>
  %147 = fmul <16 x float> %146, <float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000>
  fence acq_rel
  %148 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %146, <16 x float> <float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000>, <16 x float> <float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000>) #13
  %149 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %146, <16 x float> <float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000>, <16 x float> <float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000>) #13
  fence acq_rel
  %150 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %148, <16 x float> %146, <16 x float> <float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000>) #13
  %151 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %149, <16 x float> %146, <16 x float> <float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000>) #13
  fence acq_rel
  %152 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %150, <16 x float> %146, <16 x float> <float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000>) #13
  %153 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %151, <16 x float> %146, <16 x float> <float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000>) #13
  fence acq_rel
  %154 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %152, <16 x float> %146, <16 x float> <float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000>) #13
  %155 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %153, <16 x float> %146, <16 x float> <float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000>) #13
  fence acq_rel
  %156 = fdiv <16 x float> %154, %155
  %157 = fcmp ogt <16 x float> %146, <float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000>
  %158 = select <16 x i1> %157, <16 x float> %156, <16 x float> %147
  %159 = bitcast <16 x float> %158 to <16 x i32>
  %160 = and <16 x i32> %159, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %161 = or <16 x i32> %160, %144
  %162 = getelementptr inbounds float, float* %38, i64 %119
  %163 = bitcast float* %162 to <16 x i32>*
  %164 = load <16 x i32>, <16 x i32>* %163, align 64, !alias.scope !896, !noalias !899
  %165 = and <16 x i32> %164, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %166 = and <16 x i32> %164, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %167 = bitcast <16 x i32> %166 to <16 x float>
  %168 = fmul <16 x float> %167, <float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000, float 0x3FB3D07220000000>
  fence acq_rel
  %169 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %167, <16 x float> <float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000, float 0x3FEA45C1E0000000>, <16 x float> <float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000, float 0x3FE97A1D40000000>) #13
  %170 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %167, <16 x float> <float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000, float 0x3F7AB5FBC0000000>, <16 x float> <float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000, float 0xBFAC395780000000>) #13
  fence acq_rel
  %171 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %169, <16 x float> %167, <16 x float> <float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000, float 0x3FC4CC3620000000>) #13
  %172 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %170, <16 x float> %167, <16 x float> <float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000, float 0x3FDFEB9100000000>) #13
  fence acq_rel
  %173 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %171, <16 x float> %167, <16 x float> <float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000, float 0x3F855FAAA0000000>) #13
  %174 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %172, <16 x float> %167, <16 x float> <float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000, float 0x3FF13B4BC0000000>) #13
  fence acq_rel
  %175 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %173, <16 x float> %167, <16 x float> <float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000, float 0x3F2CD6CEE0000000>) #13
  %176 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %174, <16 x float> %167, <16 x float> <float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000, float 0x3FD0D804A0000000>) #13
  fence acq_rel
  %177 = fdiv <16 x float> %175, %176
  %178 = fcmp ogt <16 x float> %167, <float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000, float 0x3FA4B5DCC0000000>
  %179 = select <16 x i1> %178, <16 x float> %177, <16 x float> %168
  %180 = bitcast <16 x float> %179 to <16 x i32>
  %181 = and <16 x i32> %180, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %182 = or <16 x i32> %181, %165
  %183 = bitcast <16 x i32> %140 to <16 x float>
  %184 = getelementptr inbounds float, float* %54, i64 %119
  %185 = bitcast float* %184 to <16 x i32>*
  store <16 x i32> %140, <16 x i32>* %185, align 64, !alias.scope !901
  %186 = bitcast <16 x i32> %161 to <16 x float>
  %187 = getelementptr inbounds float, float* %64, i64 %119
  %188 = bitcast float* %187 to <16 x i32>*
  store <16 x i32> %161, <16 x i32>* %188, align 64, !alias.scope !904
  %189 = bitcast <16 x i32> %182 to <16 x float>
  %190 = getelementptr inbounds float, float* %74, i64 %119
  %191 = bitcast float* %190 to <16 x i32>*
  store <16 x i32> %182, <16 x i32>* %191, align 64, !alias.scope !907
  %192 = load float**, float*** %116, align 8
  %193 = load float*, float** %192, align 8
  %194 = getelementptr inbounds float, float* %90, i64 %119
  %195 = getelementptr inbounds float, float* %100, i64 %119
  %196 = getelementptr inbounds float, float* %110, i64 %119
  %197 = bitcast float* %193 to <16 x float>*
  %198 = load <16 x float>, <16 x float>* %197, align 64, !alias.scope !910, !noalias !917
  %199 = getelementptr inbounds float, float* %193, i64 16
  %200 = bitcast float* %199 to <16 x float>*
  %201 = load <16 x float>, <16 x float>* %200, align 64, !alias.scope !925, !noalias !928
  %202 = getelementptr inbounds float, float* %193, i64 32
  %203 = bitcast float* %202 to <16 x float>*
  %204 = load <16 x float>, <16 x float>* %203, align 64, !alias.scope !930, !noalias !933
  %205 = getelementptr inbounds float, float* %193, i64 48
  %206 = bitcast float* %205 to <16 x float>*
  %207 = load <16 x float>, <16 x float>* %206, align 64, !alias.scope !935, !noalias !938
  %208 = getelementptr inbounds float, float* %193, i64 64
  %209 = bitcast float* %208 to <16 x float>*
  %210 = load <16 x float>, <16 x float>* %209, align 64, !alias.scope !940, !noalias !943
  %211 = getelementptr inbounds float, float* %193, i64 80
  %212 = bitcast float* %211 to <16 x float>*
  %213 = load <16 x float>, <16 x float>* %212, align 64, !alias.scope !945, !noalias !948
  %214 = getelementptr inbounds float, float* %193, i64 96
  %215 = bitcast float* %214 to <16 x float>*
  %216 = load <16 x float>, <16 x float>* %215, align 64, !alias.scope !950, !noalias !953
  %217 = getelementptr inbounds float, float* %193, i64 112
  %218 = bitcast float* %217 to <16 x float>*
  %219 = load <16 x float>, <16 x float>* %218, align 64, !alias.scope !955, !noalias !958
  %220 = getelementptr inbounds float, float* %193, i64 128
  %221 = bitcast float* %220 to <16 x float>*
  %222 = load <16 x float>, <16 x float>* %221, align 64, !alias.scope !960, !noalias !963
  %223 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %204, <16 x float> %189, <16 x float> <float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000>) #13
  %224 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %201, <16 x float> %186, <16 x float> %223) #13
  %225 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %198, <16 x float> %183, <16 x float> %224) #13
  %226 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %213, <16 x float> %189, <16 x float> <float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000>) #13
  %227 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %210, <16 x float> %186, <16 x float> %226) #13
  %228 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %207, <16 x float> %183, <16 x float> %227) #13
  %229 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %222, <16 x float> %189, <16 x float> <float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000, float 0x3F6F12A6C0000000>) #13
  %230 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %219, <16 x float> %186, <16 x float> %229) #13
  %231 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %216, <16 x float> %183, <16 x float> %230) #13
  %232 = bitcast <16 x float> %225 to <16 x i32>
  %233 = icmp slt <16 x i32> %232, zeroinitializer
  %234 = select <16 x i1> %233, <16 x float> zeroinitializer, <16 x float> %225
  %235 = bitcast <16 x float> %228 to <16 x i32>
  %236 = icmp slt <16 x i32> %235, zeroinitializer
  %237 = select <16 x i1> %236, <16 x float> zeroinitializer, <16 x float> %228
  %238 = bitcast <16 x float> %231 to <16 x i32>
  %239 = icmp slt <16 x i32> %238, zeroinitializer
  %240 = select <16 x i1> %239, <16 x float> zeroinitializer, <16 x float> %231
  %241 = getelementptr inbounds float, float* %193, i64 144
  %242 = bitcast float* %241 to <16 x float>*
  %243 = load <16 x float>, <16 x float>* %242, align 64, !alias.scope !965, !noalias !968
  %244 = fmul <16 x float> %234, <float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000>
  %245 = bitcast <16 x float> %234 to <16 x i32>
  %246 = icmp eq <16 x i32> %245, zeroinitializer
  %247 = ashr <16 x i32> %245, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %248 = mul nsw <16 x i32> %247, <i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202>
  %249 = add <16 x i32> %248, <i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752>
  %250 = select <16 x i1> %246, <16 x i32> zeroinitializer, <16 x i32> %249
  %251 = bitcast <16 x i32> %250 to <16 x float>
  %252 = fmul <16 x float> %251, %251
  %253 = fmul <16 x float> %252, %252
  %254 = fmul <16 x float> %251, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %255 = fsub <16 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %253
  %256 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %244, <16 x float> %255, <16 x float> %254) #13
  %257 = fmul <16 x float> %256, %256
  %258 = fmul <16 x float> %257, %257
  %259 = fmul <16 x float> %256, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %260 = fsub <16 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %258
  %261 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %244, <16 x float> %260, <16 x float> %259) #13
  %262 = fmul <16 x float> %261, %261
  %263 = fmul <16 x float> %262, %262
  %264 = fmul <16 x float> %261, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %265 = fsub <16 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %263
  %266 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %244, <16 x float> %265, <16 x float> %264) #13
  %267 = fmul <16 x float> %266, %266
  %268 = fmul <16 x float> %267, %267
  %269 = fsub <16 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %268
  %270 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %234, <16 x float> %269, <16 x float> %266) #13
  %271 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %270, <16 x float> <float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000>, <16 x float> %266) #13
  %272 = fmul <16 x float> %271, %271
  %273 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %272, <16 x float> %234, <16 x float> %243) #13
  %274 = getelementptr inbounds float, float* %193, i64 160
  %275 = bitcast float* %274 to <16 x float>*
  %276 = load <16 x float>, <16 x float>* %275, align 64, !alias.scope !970, !noalias !973
  %277 = fmul <16 x float> %237, <float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000>
  %278 = bitcast <16 x float> %237 to <16 x i32>
  %279 = icmp eq <16 x i32> %278, zeroinitializer
  %280 = ashr <16 x i32> %278, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %281 = mul nsw <16 x i32> %280, <i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202>
  %282 = add <16 x i32> %281, <i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752>
  %283 = select <16 x i1> %279, <16 x i32> zeroinitializer, <16 x i32> %282
  %284 = bitcast <16 x i32> %283 to <16 x float>
  %285 = fmul <16 x float> %284, %284
  %286 = fmul <16 x float> %285, %285
  %287 = fmul <16 x float> %284, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %288 = fsub <16 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %286
  %289 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %277, <16 x float> %288, <16 x float> %287) #13
  %290 = fmul <16 x float> %289, %289
  %291 = fmul <16 x float> %290, %290
  %292 = fmul <16 x float> %289, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %293 = fsub <16 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %291
  %294 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %277, <16 x float> %293, <16 x float> %292) #13
  %295 = fmul <16 x float> %294, %294
  %296 = fmul <16 x float> %295, %295
  %297 = fmul <16 x float> %294, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %298 = fsub <16 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %296
  %299 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %277, <16 x float> %298, <16 x float> %297) #13
  %300 = fmul <16 x float> %299, %299
  %301 = fmul <16 x float> %300, %300
  %302 = fsub <16 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %301
  %303 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %237, <16 x float> %302, <16 x float> %299) #13
  %304 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %303, <16 x float> <float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000>, <16 x float> %299) #13
  %305 = fmul <16 x float> %304, %304
  %306 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %305, <16 x float> %237, <16 x float> %276) #13
  %307 = getelementptr inbounds float, float* %193, i64 176
  %308 = bitcast float* %307 to <16 x float>*
  %309 = load <16 x float>, <16 x float>* %308, align 64, !alias.scope !975, !noalias !978
  %310 = fmul <16 x float> %240, <float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000>
  %311 = bitcast <16 x float> %240 to <16 x i32>
  %312 = icmp eq <16 x i32> %311, zeroinitializer
  %313 = ashr <16 x i32> %311, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %314 = mul nsw <16 x i32> %313, <i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202, i32 -2796202>
  %315 = add <16 x i32> %314, <i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752, i32 1417674752>
  %316 = select <16 x i1> %312, <16 x i32> zeroinitializer, <16 x i32> %315
  %317 = bitcast <16 x i32> %316 to <16 x float>
  %318 = fmul <16 x float> %317, %317
  %319 = fmul <16 x float> %318, %318
  %320 = fmul <16 x float> %317, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %321 = fsub <16 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %319
  %322 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %310, <16 x float> %321, <16 x float> %320) #13
  %323 = fmul <16 x float> %322, %322
  %324 = fmul <16 x float> %323, %323
  %325 = fmul <16 x float> %322, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %326 = fsub <16 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %324
  %327 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %310, <16 x float> %326, <16 x float> %325) #13
  %328 = fmul <16 x float> %327, %327
  %329 = fmul <16 x float> %328, %328
  %330 = fmul <16 x float> %327, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %331 = fsub <16 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %329
  %332 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %310, <16 x float> %331, <16 x float> %330) #13
  %333 = fmul <16 x float> %332, %332
  %334 = fmul <16 x float> %333, %333
  %335 = fsub <16 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %334
  %336 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %240, <16 x float> %335, <16 x float> %332) #13
  %337 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %336, <16 x float> <float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000>, <16 x float> %332) #13
  %338 = fmul <16 x float> %337, %337
  %339 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %338, <16 x float> %240, <16 x float> %309) #13
  %340 = fsub <16 x float> %273, %306
  %341 = fmul <16 x float> %340, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %342 = bitcast float* %194 to <16 x float>*
  store <16 x float> %341, <16 x float>* %342, align 64, !alias.scope !980, !noalias !985
  %343 = fadd <16 x float> %273, %306
  %344 = fmul <16 x float> %343, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %345 = bitcast float* %195 to <16 x float>*
  store <16 x float> %344, <16 x float>* %345, align 64, !alias.scope !988, !noalias !991
  %346 = bitcast float* %196 to <16 x float>*
  store <16 x float> %339, <16 x float>* %346, align 64, !alias.scope !992, !noalias !995
  %347 = add i64 %119, 16
  %348 = load i64*, i64** %111, align 8
  %349 = load i64, i64* %348, align 8
  %350 = icmp ult i64 %347, %349
  br i1 %350, label %118, label %117
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX310RgbToYcbcrERKNS_5PlaneIfEES8_S8_PS6_S9_S9_PS0_E4$_11E12CallInitFuncEPvm"(i8* nocapture readonly, i64) #6 align 2 {
  %3 = bitcast i8* %0 to i32 (i64)**
  %4 = load i32 (i64)*, i32 (i64)** %3, align 8
  %5 = tail call i32 %4(i64 %1) #13
  %6 = icmp ne i32 %5, 0
  %7 = sext i1 %6 to i32
  ret i32 %7
}

; Function Attrs: nounwind ssp uwtable
define internal void @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX310RgbToYcbcrERKNS_5PlaneIfEES8_S8_PS6_S9_S9_PS0_E4$_11E12CallDataFuncEPvjm"(i8* nocapture readonly, i32, i64) #6 align 2 {
  %4 = getelementptr inbounds i8, i8* %0, i64 8
  %5 = bitcast i8* %4 to %class.anon.102**
  %6 = load %class.anon.102*, %class.anon.102** %5, align 8
  tail call fastcc void @"_ZZN3jxl6N_AVX310RgbToYcbcrERKNS_5PlaneIfEES4_S4_PS2_S5_S5_PNS_10ThreadPoolEENK4$_11clEii"(%class.anon.102* %6, i32 %1)
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal fastcc void @"_ZZN3jxl6N_AVX310RgbToYcbcrERKNS_5PlaneIfEES4_S4_PS2_S5_S5_PNS_10ThreadPoolEENK4$_11clEii"(%class.anon.102* nocapture readonly, i32) unnamed_addr #20 align 2 {
  %3 = sext i32 %1 to i64
  %4 = getelementptr inbounds %class.anon.102, %class.anon.102* %0, i64 0, i32 0
  %5 = load i64*, i64** %4, align 8
  %6 = load i64, i64* %5, align 8
  %7 = mul i64 %6, %3
  %8 = add i64 %7, %6
  %9 = getelementptr inbounds %class.anon.102, %class.anon.102* %0, i64 0, i32 1
  %10 = load i64*, i64** %9, align 8
  %11 = load i64, i64* %10, align 8
  %12 = icmp ult i64 %11, %8
  %13 = select i1 %12, i64 %11, i64 %8
  %14 = icmp ult i64 %7, %13
  br i1 %14, label %15, label %42

15:                                               ; preds = %2
  %16 = getelementptr inbounds %class.anon.102, %class.anon.102* %0, i64 0, i32 2
  %17 = getelementptr inbounds %class.anon.102, %class.anon.102* %0, i64 0, i32 3
  %18 = getelementptr inbounds %class.anon.102, %class.anon.102* %0, i64 0, i32 4
  %19 = getelementptr inbounds %class.anon.102, %class.anon.102* %0, i64 0, i32 5
  %20 = getelementptr inbounds %class.anon.102, %class.anon.102* %0, i64 0, i32 6
  %21 = getelementptr inbounds %class.anon.102, %class.anon.102* %0, i64 0, i32 7
  %22 = getelementptr inbounds %class.anon.102, %class.anon.102* %0, i64 0, i32 8
  %23 = getelementptr inbounds %class.anon.102, %class.anon.102* %0, i64 0, i32 11
  %24 = bitcast %"class.hwy::N_AVX3::Vec512"** %23 to <16 x float>**
  %25 = getelementptr inbounds %class.anon.102, %class.anon.102* %0, i64 0, i32 12
  %26 = bitcast %"class.hwy::N_AVX3::Vec512"** %25 to <16 x float>**
  %27 = getelementptr inbounds %class.anon.102, %class.anon.102* %0, i64 0, i32 13
  %28 = bitcast %"class.hwy::N_AVX3::Vec512"** %27 to <16 x float>**
  %29 = getelementptr inbounds %class.anon.102, %class.anon.102* %0, i64 0, i32 14
  %30 = bitcast %"class.hwy::N_AVX3::Vec512"** %29 to <16 x float>**
  %31 = getelementptr inbounds %class.anon.102, %class.anon.102* %0, i64 0, i32 15
  %32 = bitcast %"class.hwy::N_AVX3::Vec512"** %31 to <16 x float>**
  %33 = getelementptr inbounds %class.anon.102, %class.anon.102* %0, i64 0, i32 16
  %34 = bitcast %"class.hwy::N_AVX3::Vec512"** %33 to <16 x float>**
  %35 = getelementptr inbounds %class.anon.102, %class.anon.102* %0, i64 0, i32 17
  %36 = bitcast %"class.hwy::N_AVX3::Vec512"** %35 to <16 x float>**
  %37 = getelementptr inbounds %class.anon.102, %class.anon.102* %0, i64 0, i32 18
  %38 = bitcast %"class.hwy::N_AVX3::Vec512"** %37 to <16 x float>**
  %39 = getelementptr inbounds %class.anon.102, %class.anon.102* %0, i64 0, i32 9
  %40 = load i64*, i64** %22, align 8
  %41 = load i64, i64* %40, align 8
  br label %43

42:                                               ; preds = %116, %2
  ret void

43:                                               ; preds = %15, %116
  %44 = phi i64 [ %41, %15 ], [ %117, %116 ]
  %45 = phi i64 [ %7, %15 ], [ %118, %116 ]
  %46 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %16, align 8
  %47 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %46, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %48 = load i8*, i8** %47, align 8
  %49 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %46, i64 0, i32 0, i32 4
  %50 = load i64, i64* %49, align 8
  %51 = mul i64 %50, %45
  %52 = getelementptr inbounds i8, i8* %48, i64 %51
  %53 = ptrtoint i8* %52 to i64
  %54 = and i64 %53, 63
  %55 = icmp eq i64 %54, 0
  tail call void @llvm.assume(i1 %55) #13
  %56 = bitcast i8* %52 to float*
  %57 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %17, align 8
  %58 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %57, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %59 = load i8*, i8** %58, align 8
  %60 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %57, i64 0, i32 0, i32 4
  %61 = load i64, i64* %60, align 8
  %62 = mul i64 %61, %45
  %63 = getelementptr inbounds i8, i8* %59, i64 %62
  %64 = ptrtoint i8* %63 to i64
  %65 = and i64 %64, 63
  %66 = icmp eq i64 %65, 0
  tail call void @llvm.assume(i1 %66) #13
  %67 = bitcast i8* %63 to float*
  %68 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %18, align 8
  %69 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %68, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %70 = load i8*, i8** %69, align 8
  %71 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %68, i64 0, i32 0, i32 4
  %72 = load i64, i64* %71, align 8
  %73 = mul i64 %72, %45
  %74 = getelementptr inbounds i8, i8* %70, i64 %73
  %75 = ptrtoint i8* %74 to i64
  %76 = and i64 %75, 63
  %77 = icmp eq i64 %76, 0
  tail call void @llvm.assume(i1 %77) #13
  %78 = bitcast i8* %74 to float*
  %79 = load %"class.jxl::Plane"**, %"class.jxl::Plane"*** %19, align 8
  %80 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %79, align 8
  %81 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %80, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %82 = load i8*, i8** %81, align 8
  %83 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %80, i64 0, i32 0, i32 4
  %84 = load i64, i64* %83, align 8
  %85 = mul i64 %84, %45
  %86 = getelementptr inbounds i8, i8* %82, i64 %85
  %87 = ptrtoint i8* %86 to i64
  %88 = and i64 %87, 63
  %89 = icmp eq i64 %88, 0
  tail call void @llvm.assume(i1 %89) #13
  %90 = bitcast i8* %86 to float*
  %91 = load %"class.jxl::Plane"**, %"class.jxl::Plane"*** %20, align 8
  %92 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %91, align 8
  %93 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %92, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %94 = load i8*, i8** %93, align 8
  %95 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %92, i64 0, i32 0, i32 4
  %96 = load i64, i64* %95, align 8
  %97 = mul i64 %96, %45
  %98 = getelementptr inbounds i8, i8* %94, i64 %97
  %99 = ptrtoint i8* %98 to i64
  %100 = and i64 %99, 63
  %101 = icmp eq i64 %100, 0
  tail call void @llvm.assume(i1 %101) #13
  %102 = bitcast i8* %98 to float*
  %103 = load %"class.jxl::Plane"**, %"class.jxl::Plane"*** %21, align 8
  %104 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %103, align 8
  %105 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %104, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %106 = load i8*, i8** %105, align 8
  %107 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %104, i64 0, i32 0, i32 4
  %108 = load i64, i64* %107, align 8
  %109 = mul i64 %108, %45
  %110 = getelementptr inbounds i8, i8* %106, i64 %109
  %111 = ptrtoint i8* %110 to i64
  %112 = and i64 %111, 63
  %113 = icmp eq i64 %112, 0
  tail call void @llvm.assume(i1 %113) #13
  %114 = bitcast i8* %110 to float*
  %115 = icmp eq i64 %44, 0
  br i1 %115, label %116, label %120

116:                                              ; preds = %120, %43
  %117 = phi i64 [ 0, %43 ], [ %169, %120 ]
  %118 = add nuw i64 %45, 1
  %119 = icmp ult i64 %118, %13
  br i1 %119, label %43, label %42

120:                                              ; preds = %43, %120
  %121 = phi i64 [ %167, %120 ], [ 0, %43 ]
  %122 = getelementptr inbounds float, float* %56, i64 %121
  %123 = bitcast float* %122 to <16 x float>*
  %124 = load <16 x float>, <16 x float>* %123, align 64, !alias.scope !996, !noalias !999
  %125 = getelementptr inbounds float, float* %67, i64 %121
  %126 = bitcast float* %125 to <16 x float>*
  %127 = load <16 x float>, <16 x float>* %126, align 64, !alias.scope !1001, !noalias !1004
  %128 = getelementptr inbounds float, float* %78, i64 %121
  %129 = bitcast float* %128 to <16 x float>*
  %130 = load <16 x float>, <16 x float>* %129, align 64, !alias.scope !1006, !noalias !1009
  %131 = load <16 x float>*, <16 x float>** %24, align 8
  %132 = load <16 x float>, <16 x float>* %131, align 64
  %133 = fmul <16 x float> %124, %132
  %134 = load <16 x float>*, <16 x float>** %26, align 8
  %135 = load <16 x float>, <16 x float>* %134, align 64
  %136 = fmul <16 x float> %124, %135
  %137 = load <16 x float>*, <16 x float>** %28, align 8
  %138 = load <16 x float>, <16 x float>* %137, align 64
  %139 = fmul <16 x float> %127, %138
  %140 = load <16 x float>*, <16 x float>** %30, align 8
  %141 = load <16 x float>, <16 x float>* %140, align 64
  %142 = fmul <16 x float> %130, %141
  %143 = load <16 x float>*, <16 x float>** %32, align 8
  %144 = load <16 x float>, <16 x float>* %143, align 64
  %145 = fmul <16 x float> %130, %144
  %146 = fadd <16 x float> %133, %139
  %147 = fadd <16 x float> %146, %142
  %148 = load <16 x float>*, <16 x float>** %34, align 8
  %149 = load <16 x float>, <16 x float>* %148, align 64
  %150 = fsub <16 x float> %147, %149
  %151 = fsub <16 x float> %145, %147
  %152 = load <16 x float>*, <16 x float>** %36, align 8
  %153 = load <16 x float>, <16 x float>* %152, align 64
  %154 = fmul <16 x float> %151, %153
  %155 = fsub <16 x float> %136, %147
  %156 = load <16 x float>*, <16 x float>** %38, align 8
  %157 = load <16 x float>, <16 x float>* %156, align 64
  %158 = fmul <16 x float> %155, %157
  %159 = getelementptr inbounds float, float* %90, i64 %121
  %160 = bitcast float* %159 to <16 x float>*
  store <16 x float> %150, <16 x float>* %160, align 64, !alias.scope !1011
  %161 = getelementptr inbounds float, float* %102, i64 %121
  %162 = bitcast float* %161 to <16 x float>*
  store <16 x float> %154, <16 x float>* %162, align 64, !alias.scope !1014
  %163 = getelementptr inbounds float, float* %114, i64 %121
  %164 = bitcast float* %163 to <16 x float>*
  store <16 x float> %158, <16 x float>* %164, align 64, !alias.scope !1017
  %165 = load i64*, i64** %39, align 8
  %166 = load i64, i64* %165, align 8
  %167 = add i64 %166, %121
  %168 = load i64*, i64** %22, align 8
  %169 = load i64, i64* %168, align 8
  %170 = icmp ult i64 %167, %169
  br i1 %170, label %120, label %116
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_8N_SCALAR15LinearSRGBToXYBERKNS_6Image3IfEEPKfPS0_PS6_E4$_12E12CallInitFuncEPvm"(i8* nocapture readonly, i64) #6 align 2 {
  %3 = bitcast i8* %0 to i32 (i64)**
  %4 = load i32 (i64)*, i32 (i64)** %3, align 8
  %5 = tail call i32 %4(i64 %1) #13
  %6 = icmp ne i32 %5, 0
  %7 = sext i1 %6 to i32
  ret i32 %7
}

; Function Attrs: nounwind ssp uwtable
define internal void @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_8N_SCALAR15LinearSRGBToXYBERKNS_6Image3IfEEPKfPS0_PS6_E4$_12E12CallDataFuncEPvjm"(i8* nocapture readonly, i32, i64) #6 align 2 {
  %4 = getelementptr inbounds i8, i8* %0, i64 8
  %5 = bitcast i8* %4 to %class.anon.103**
  %6 = load %class.anon.103*, %class.anon.103** %5, align 8
  %7 = sext i32 %1 to i64
  %8 = getelementptr inbounds %class.anon.103, %class.anon.103* %6, i64 0, i32 0
  %9 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %8, align 8
  %10 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %9, i64 0, i32 0, i64 0, i32 0, i32 4
  %11 = load i64, i64* %10, align 8
  %12 = mul i64 %11, %7
  %13 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %9, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = ptrtoint i8* %14 to i64
  %16 = and i64 %15, 63
  %17 = icmp eq i64 %16, 0
  tail call void @llvm.assume(i1 %17) #13
  %18 = getelementptr inbounds i8, i8* %14, i64 %12
  %19 = ptrtoint i8* %18 to i64
  %20 = and i64 %19, 63
  %21 = icmp eq i64 %20, 0
  tail call void @llvm.assume(i1 %21) #13
  %22 = bitcast i8* %18 to float*
  %23 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %9, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %24 = load i8*, i8** %23, align 8
  %25 = ptrtoint i8* %24 to i64
  %26 = and i64 %25, 63
  %27 = icmp eq i64 %26, 0
  tail call void @llvm.assume(i1 %27) #13
  %28 = getelementptr inbounds i8, i8* %24, i64 %12
  %29 = ptrtoint i8* %28 to i64
  %30 = and i64 %29, 63
  %31 = icmp eq i64 %30, 0
  tail call void @llvm.assume(i1 %31) #13
  %32 = bitcast i8* %28 to float*
  %33 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %9, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %34 = load i8*, i8** %33, align 8
  %35 = ptrtoint i8* %34 to i64
  %36 = and i64 %35, 63
  %37 = icmp eq i64 %36, 0
  tail call void @llvm.assume(i1 %37) #13
  %38 = getelementptr inbounds i8, i8* %34, i64 %12
  %39 = ptrtoint i8* %38 to i64
  %40 = and i64 %39, 63
  %41 = icmp eq i64 %40, 0
  tail call void @llvm.assume(i1 %41) #13
  %42 = bitcast i8* %38 to float*
  %43 = getelementptr inbounds %class.anon.103, %class.anon.103* %6, i64 0, i32 1
  %44 = load %"class.jxl::Image3"**, %"class.jxl::Image3"*** %43, align 8
  %45 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %44, align 8
  %46 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %45, i64 0, i32 0, i64 0, i32 0, i32 4
  %47 = load i64, i64* %46, align 8
  %48 = mul i64 %47, %7
  %49 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %45, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %50 = load i8*, i8** %49, align 8
  %51 = ptrtoint i8* %50 to i64
  %52 = and i64 %51, 63
  %53 = icmp eq i64 %52, 0
  tail call void @llvm.assume(i1 %53) #13
  %54 = getelementptr inbounds i8, i8* %50, i64 %48
  %55 = ptrtoint i8* %54 to i64
  %56 = and i64 %55, 63
  %57 = icmp eq i64 %56, 0
  tail call void @llvm.assume(i1 %57) #13
  %58 = bitcast i8* %54 to float*
  %59 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %45, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %60 = load i8*, i8** %59, align 8
  %61 = ptrtoint i8* %60 to i64
  %62 = and i64 %61, 63
  %63 = icmp eq i64 %62, 0
  tail call void @llvm.assume(i1 %63) #13
  %64 = getelementptr inbounds i8, i8* %60, i64 %48
  %65 = ptrtoint i8* %64 to i64
  %66 = and i64 %65, 63
  %67 = icmp eq i64 %66, 0
  tail call void @llvm.assume(i1 %67) #13
  %68 = bitcast i8* %64 to float*
  %69 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %45, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %70 = load i8*, i8** %69, align 8
  %71 = ptrtoint i8* %70 to i64
  %72 = and i64 %71, 63
  %73 = icmp eq i64 %72, 0
  tail call void @llvm.assume(i1 %73) #13
  %74 = getelementptr inbounds i8, i8* %70, i64 %48
  %75 = ptrtoint i8* %74 to i64
  %76 = and i64 %75, 63
  %77 = icmp eq i64 %76, 0
  tail call void @llvm.assume(i1 %77) #13
  %78 = bitcast i8* %74 to float*
  %79 = getelementptr inbounds %class.anon.103, %class.anon.103* %6, i64 0, i32 2
  %80 = load i64*, i64** %79, align 8
  %81 = load i64, i64* %80, align 8
  %82 = icmp eq i64 %81, 0
  br i1 %82, label %102, label %83

83:                                               ; preds = %3
  %84 = getelementptr inbounds %class.anon.103, %class.anon.103* %6, i64 0, i32 4
  br label %85

85:                                               ; preds = %85, %83
  %86 = phi i64 [ 0, %83 ], [ %98, %85 ]
  %87 = getelementptr inbounds float, float* %22, i64 %86
  %88 = load float, float* %87, align 4, !alias.scope !1020
  %89 = getelementptr inbounds float, float* %32, i64 %86
  %90 = load float, float* %89, align 4, !alias.scope !1023
  %91 = getelementptr inbounds float, float* %42, i64 %86
  %92 = load float, float* %91, align 4, !alias.scope !1026
  %93 = load float**, float*** %84, align 8
  %94 = load float*, float** %93, align 8
  %95 = getelementptr inbounds float, float* %58, i64 %86
  %96 = getelementptr inbounds float, float* %68, i64 %86
  %97 = getelementptr inbounds float, float* %78, i64 %86
  tail call void @_ZN3jxl8N_SCALAR14LinearRGBToXYBIN3hwy8N_SCALAR4Vec1IfEEEEvT_S6_S6_PKfPfS9_S9_(float %88, float %90, float %92, float* %94, float* %95, float* %96, float* %97) #13
  %98 = add nuw i64 %86, 1
  %99 = load i64*, i64** %79, align 8
  %100 = load i64, i64* %99, align 8
  %101 = icmp ult i64 %98, %100
  br i1 %101, label %85, label %102

102:                                              ; preds = %85, %3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl8N_SCALAR14LinearRGBToXYBIN3hwy8N_SCALAR4Vec1IfEEEEvT_S6_S6_PKfPfS9_S9_(float, float, float, float* noalias, float* noalias, float* noalias, float* noalias) local_unnamed_addr #6 comdat {
  %8 = bitcast float* %3 to <2 x float>*
  %9 = load <2 x float>, <2 x float>* %8, align 4, !alias.scope !1029, !noalias !1036
  %10 = getelementptr inbounds float, float* %3, i64 2
  %11 = load float, float* %10, align 4, !alias.scope !1040, !noalias !1036
  %12 = getelementptr inbounds float, float* %3, i64 3
  %13 = bitcast float* %12 to <2 x float>*
  %14 = load <2 x float>, <2 x float>* %13, align 4, !alias.scope !1043, !noalias !1036
  %15 = getelementptr inbounds float, float* %3, i64 5
  %16 = load float, float* %15, align 4, !alias.scope !1048, !noalias !1036
  %17 = getelementptr inbounds float, float* %3, i64 6
  %18 = bitcast float* %17 to <2 x float>*
  %19 = load <2 x float>, <2 x float>* %18, align 4, !alias.scope !1051, !noalias !1036
  %20 = getelementptr inbounds float, float* %3, i64 8
  %21 = load float, float* %20, align 4, !alias.scope !1056, !noalias !1036
  %22 = fmul float %11, %2
  %23 = fadd float %22, 0x3F6F12A6C0000000
  %24 = insertelement <2 x float> undef, float %0, i32 0
  %25 = insertelement <2 x float> %24, float %1, i32 1
  %26 = fmul <2 x float> %9, %25
  %27 = extractelement <2 x float> %26, i32 1
  %28 = fadd float %27, %23
  %29 = extractelement <2 x float> %26, i32 0
  %30 = fadd float %29, %28
  %31 = fmul float %16, %2
  %32 = fadd float %31, 0x3F6F12A6C0000000
  %33 = fmul <2 x float> %14, %25
  %34 = extractelement <2 x float> %33, i32 1
  %35 = fadd float %34, %32
  %36 = extractelement <2 x float> %33, i32 0
  %37 = fadd float %36, %35
  %38 = fmul float %21, %2
  %39 = fadd float %38, 0x3F6F12A6C0000000
  %40 = fmul <2 x float> %19, %25
  %41 = extractelement <2 x float> %40, i32 1
  %42 = fadd float %41, %39
  %43 = extractelement <2 x float> %40, i32 0
  %44 = fadd float %43, %42
  %45 = fcmp olt float %30, 0.000000e+00
  %46 = select i1 %45, float 0.000000e+00, float %30
  %47 = fcmp olt float %37, 0.000000e+00
  %48 = select i1 %47, float 0.000000e+00, float %37
  %49 = fcmp olt float %44, 0.000000e+00
  %50 = select i1 %49, float 0.000000e+00, float %44
  %51 = getelementptr inbounds float, float* %3, i64 9
  %52 = load float, float* %51, align 4, !alias.scope !1059
  %53 = fmul float %46, 0x3FD5555560000000
  %54 = bitcast float %46 to i32
  %55 = icmp eq i32 %54, 0
  %56 = lshr i32 %54, 23
  %57 = ashr i32 %54, 31
  %58 = shl nsw i32 %57, 8
  %59 = or i32 %58, %56
  %60 = mul i32 %59, -2796202
  %61 = add i32 %60, 1417674752
  %62 = select i1 %55, i32 0, i32 %61
  %63 = bitcast i32 %62 to float
  %64 = fmul float %63, %63
  %65 = fmul float %64, %64
  %66 = fmul float %63, 0x3FF5555560000000
  %67 = fmul float %53, %65
  %68 = fsub float %66, %67
  %69 = fmul float %68, %68
  %70 = fmul float %69, %69
  %71 = fmul float %68, 0x3FF5555560000000
  %72 = fmul float %53, %70
  %73 = fsub float %71, %72
  %74 = fmul float %73, %73
  %75 = fmul float %74, %74
  %76 = fmul float %73, 0x3FF5555560000000
  %77 = fmul float %53, %75
  %78 = fsub float %76, %77
  %79 = fmul float %78, %78
  %80 = fmul float %79, %79
  %81 = fmul float %46, %80
  %82 = fsub float %78, %81
  %83 = fmul float %82, 0x3FD5555560000000
  %84 = fadd float %78, %83
  %85 = fmul float %84, %84
  %86 = fmul float %46, %85
  %87 = fadd float %52, %86
  %88 = getelementptr inbounds float, float* %3, i64 10
  %89 = load float, float* %88, align 4, !alias.scope !1062
  %90 = fmul float %48, 0x3FD5555560000000
  %91 = bitcast float %48 to i32
  %92 = icmp eq i32 %91, 0
  %93 = lshr i32 %91, 23
  %94 = ashr i32 %91, 31
  %95 = shl nsw i32 %94, 8
  %96 = or i32 %95, %93
  %97 = mul i32 %96, -2796202
  %98 = add i32 %97, 1417674752
  %99 = select i1 %92, i32 0, i32 %98
  %100 = bitcast i32 %99 to float
  %101 = fmul float %100, %100
  %102 = fmul float %101, %101
  %103 = fmul float %100, 0x3FF5555560000000
  %104 = fmul float %90, %102
  %105 = fsub float %103, %104
  %106 = fmul float %105, %105
  %107 = fmul float %106, %106
  %108 = fmul float %105, 0x3FF5555560000000
  %109 = fmul float %90, %107
  %110 = fsub float %108, %109
  %111 = fmul float %110, %110
  %112 = fmul float %111, %111
  %113 = fmul float %110, 0x3FF5555560000000
  %114 = fmul float %90, %112
  %115 = fsub float %113, %114
  %116 = fmul float %115, %115
  %117 = fmul float %116, %116
  %118 = fmul float %48, %117
  %119 = fsub float %115, %118
  %120 = fmul float %119, 0x3FD5555560000000
  %121 = fadd float %115, %120
  %122 = fmul float %121, %121
  %123 = fmul float %48, %122
  %124 = fadd float %89, %123
  %125 = getelementptr inbounds float, float* %3, i64 11
  %126 = load float, float* %125, align 4, !alias.scope !1065
  %127 = fmul float %50, 0x3FD5555560000000
  %128 = bitcast float %50 to i32
  %129 = icmp eq i32 %128, 0
  %130 = lshr i32 %128, 23
  %131 = ashr i32 %128, 31
  %132 = shl nsw i32 %131, 8
  %133 = or i32 %132, %130
  %134 = mul i32 %133, -2796202
  %135 = add i32 %134, 1417674752
  %136 = select i1 %129, i32 0, i32 %135
  %137 = bitcast i32 %136 to float
  %138 = fmul float %137, %137
  %139 = fmul float %138, %138
  %140 = fmul float %137, 0x3FF5555560000000
  %141 = fmul float %127, %139
  %142 = fsub float %140, %141
  %143 = fmul float %142, %142
  %144 = fmul float %143, %143
  %145 = fmul float %142, 0x3FF5555560000000
  %146 = fmul float %127, %144
  %147 = fsub float %145, %146
  %148 = fmul float %147, %147
  %149 = fmul float %148, %148
  %150 = fmul float %147, 0x3FF5555560000000
  %151 = fmul float %127, %149
  %152 = fsub float %150, %151
  %153 = fmul float %152, %152
  %154 = fmul float %153, %153
  %155 = fmul float %50, %154
  %156 = fsub float %152, %155
  %157 = fmul float %156, 0x3FD5555560000000
  %158 = fadd float %152, %157
  %159 = fmul float %158, %158
  %160 = fmul float %50, %159
  %161 = fadd float %126, %160
  %162 = fsub float %87, %124
  %163 = fmul float %162, 5.000000e-01
  store float %163, float* %4, align 4, !alias.scope !1068, !noalias !1073
  %164 = fadd float %87, %124
  %165 = fmul float %164, 5.000000e-01
  store float %165, float* %5, align 4, !alias.scope !1076, !noalias !1079
  store float %161, float* %6, align 4, !alias.scope !1080, !noalias !1083
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_8N_SCALAR9SRGBToXYBERKNS_6Image3IfEEPKfPS0_PS6_E4$_13E12CallInitFuncEPvm"(i8* nocapture readonly, i64) #6 align 2 {
  %3 = bitcast i8* %0 to i32 (i64)**
  %4 = load i32 (i64)*, i32 (i64)** %3, align 8
  %5 = tail call i32 %4(i64 %1) #13
  %6 = icmp ne i32 %5, 0
  %7 = sext i1 %6 to i32
  ret i32 %7
}

; Function Attrs: nounwind ssp uwtable
define internal void @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_8N_SCALAR9SRGBToXYBERKNS_6Image3IfEEPKfPS0_PS6_E4$_13E12CallDataFuncEPvjm"(i8* nocapture readonly, i32, i64) #6 align 2 {
  %4 = getelementptr inbounds i8, i8* %0, i64 8
  %5 = bitcast i8* %4 to %class.anon.104**
  %6 = load %class.anon.104*, %class.anon.104** %5, align 8
  %7 = sext i32 %1 to i64
  %8 = getelementptr inbounds %class.anon.104, %class.anon.104* %6, i64 0, i32 0
  %9 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %8, align 8
  %10 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %9, i64 0, i32 0, i64 0, i32 0, i32 4
  %11 = load i64, i64* %10, align 8
  %12 = mul i64 %11, %7
  %13 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %9, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = ptrtoint i8* %14 to i64
  %16 = and i64 %15, 63
  %17 = icmp eq i64 %16, 0
  tail call void @llvm.assume(i1 %17) #13
  %18 = getelementptr inbounds i8, i8* %14, i64 %12
  %19 = ptrtoint i8* %18 to i64
  %20 = and i64 %19, 63
  %21 = icmp eq i64 %20, 0
  tail call void @llvm.assume(i1 %21) #13
  %22 = bitcast i8* %18 to float*
  %23 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %9, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %24 = load i8*, i8** %23, align 8
  %25 = ptrtoint i8* %24 to i64
  %26 = and i64 %25, 63
  %27 = icmp eq i64 %26, 0
  tail call void @llvm.assume(i1 %27) #13
  %28 = getelementptr inbounds i8, i8* %24, i64 %12
  %29 = ptrtoint i8* %28 to i64
  %30 = and i64 %29, 63
  %31 = icmp eq i64 %30, 0
  tail call void @llvm.assume(i1 %31) #13
  %32 = bitcast i8* %28 to float*
  %33 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %9, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %34 = load i8*, i8** %33, align 8
  %35 = ptrtoint i8* %34 to i64
  %36 = and i64 %35, 63
  %37 = icmp eq i64 %36, 0
  tail call void @llvm.assume(i1 %37) #13
  %38 = getelementptr inbounds i8, i8* %34, i64 %12
  %39 = ptrtoint i8* %38 to i64
  %40 = and i64 %39, 63
  %41 = icmp eq i64 %40, 0
  tail call void @llvm.assume(i1 %41) #13
  %42 = bitcast i8* %38 to float*
  %43 = getelementptr inbounds %class.anon.104, %class.anon.104* %6, i64 0, i32 1
  %44 = load %"class.jxl::Image3"**, %"class.jxl::Image3"*** %43, align 8
  %45 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %44, align 8
  %46 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %45, i64 0, i32 0, i64 0, i32 0, i32 4
  %47 = load i64, i64* %46, align 8
  %48 = mul i64 %47, %7
  %49 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %45, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %50 = load i8*, i8** %49, align 8
  %51 = ptrtoint i8* %50 to i64
  %52 = and i64 %51, 63
  %53 = icmp eq i64 %52, 0
  tail call void @llvm.assume(i1 %53) #13
  %54 = getelementptr inbounds i8, i8* %50, i64 %48
  %55 = ptrtoint i8* %54 to i64
  %56 = and i64 %55, 63
  %57 = icmp eq i64 %56, 0
  tail call void @llvm.assume(i1 %57) #13
  %58 = bitcast i8* %54 to float*
  %59 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %45, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %60 = load i8*, i8** %59, align 8
  %61 = ptrtoint i8* %60 to i64
  %62 = and i64 %61, 63
  %63 = icmp eq i64 %62, 0
  tail call void @llvm.assume(i1 %63) #13
  %64 = getelementptr inbounds i8, i8* %60, i64 %48
  %65 = ptrtoint i8* %64 to i64
  %66 = and i64 %65, 63
  %67 = icmp eq i64 %66, 0
  tail call void @llvm.assume(i1 %67) #13
  %68 = bitcast i8* %64 to float*
  %69 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %45, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %70 = load i8*, i8** %69, align 8
  %71 = ptrtoint i8* %70 to i64
  %72 = and i64 %71, 63
  %73 = icmp eq i64 %72, 0
  tail call void @llvm.assume(i1 %73) #13
  %74 = getelementptr inbounds i8, i8* %70, i64 %48
  %75 = ptrtoint i8* %74 to i64
  %76 = and i64 %75, 63
  %77 = icmp eq i64 %76, 0
  tail call void @llvm.assume(i1 %77) #13
  %78 = bitcast i8* %74 to float*
  %79 = getelementptr inbounds %class.anon.104, %class.anon.104* %6, i64 0, i32 2
  %80 = load i64*, i64** %79, align 8
  %81 = load i64, i64* %80, align 8
  %82 = icmp eq i64 %81, 0
  br i1 %82, label %174, label %83

83:                                               ; preds = %3
  %84 = getelementptr inbounds %class.anon.104, %class.anon.104* %6, i64 0, i32 4
  br label %85

85:                                               ; preds = %85, %83
  %86 = phi i64 [ 0, %83 ], [ %170, %85 ]
  %87 = getelementptr inbounds float, float* %22, i64 %86
  %88 = bitcast float* %87 to i32*
  %89 = load i32, i32* %88, align 4, !alias.scope !1084
  %90 = and i32 %89, -2147483648
  %91 = and i32 %89, 2147483647
  %92 = bitcast i32 %91 to float
  %93 = fmul float %92, 0x3FB3D07220000000
  fence acq_rel
  %94 = insertelement <2 x float> undef, float %92, i32 0
  %95 = shufflevector <2 x float> %94, <2 x float> undef, <2 x i32> zeroinitializer
  %96 = fmul <2 x float> %95, <float 0x3FEA45C1E0000000, float 0x3F7AB5FBC0000000>
  %97 = fadd <2 x float> %96, <float 0x3FE97A1D40000000, float 0xBFAC395780000000>
  fence acq_rel
  %98 = fmul <2 x float> %97, %95
  %99 = fadd <2 x float> %98, <float 0x3FC4CC3620000000, float 0x3FDFEB9100000000>
  fence acq_rel
  %100 = fmul <2 x float> %99, %95
  %101 = fadd <2 x float> %100, <float 0x3F855FAAA0000000, float 0x3FF13B4BC0000000>
  fence acq_rel
  %102 = fmul <2 x float> %101, %95
  %103 = fadd <2 x float> %102, <float 0x3F2CD6CEE0000000, float 0x3FD0D804A0000000>
  fence acq_rel
  %104 = extractelement <2 x float> %103, i32 0
  %105 = extractelement <2 x float> %103, i32 1
  %106 = fdiv float %104, %105
  %107 = fcmp ule float %92, 0x3FA4B5DCC0000000
  %108 = select i1 %107, float %93, float %106
  %109 = bitcast float %108 to i32
  %110 = and i32 %109, 2147483647
  %111 = or i32 %110, %90
  %112 = bitcast i32 %111 to float
  %113 = getelementptr inbounds float, float* %32, i64 %86
  %114 = bitcast float* %113 to i32*
  %115 = load i32, i32* %114, align 4, !alias.scope !1087
  %116 = and i32 %115, -2147483648
  %117 = and i32 %115, 2147483647
  %118 = bitcast i32 %117 to float
  %119 = fmul float %118, 0x3FB3D07220000000
  fence acq_rel
  %120 = insertelement <2 x float> undef, float %118, i32 0
  %121 = shufflevector <2 x float> %120, <2 x float> undef, <2 x i32> zeroinitializer
  %122 = fmul <2 x float> %121, <float 0x3FEA45C1E0000000, float 0x3F7AB5FBC0000000>
  %123 = fadd <2 x float> %122, <float 0x3FE97A1D40000000, float 0xBFAC395780000000>
  fence acq_rel
  %124 = fmul <2 x float> %123, %121
  %125 = fadd <2 x float> %124, <float 0x3FC4CC3620000000, float 0x3FDFEB9100000000>
  fence acq_rel
  %126 = fmul <2 x float> %125, %121
  %127 = fadd <2 x float> %126, <float 0x3F855FAAA0000000, float 0x3FF13B4BC0000000>
  fence acq_rel
  %128 = fmul <2 x float> %127, %121
  %129 = fadd <2 x float> %128, <float 0x3F2CD6CEE0000000, float 0x3FD0D804A0000000>
  fence acq_rel
  %130 = extractelement <2 x float> %129, i32 0
  %131 = extractelement <2 x float> %129, i32 1
  %132 = fdiv float %130, %131
  %133 = fcmp ule float %118, 0x3FA4B5DCC0000000
  %134 = select i1 %133, float %119, float %132
  %135 = bitcast float %134 to i32
  %136 = and i32 %135, 2147483647
  %137 = or i32 %136, %116
  %138 = bitcast i32 %137 to float
  %139 = getelementptr inbounds float, float* %42, i64 %86
  %140 = bitcast float* %139 to i32*
  %141 = load i32, i32* %140, align 4, !alias.scope !1090
  %142 = and i32 %141, -2147483648
  %143 = and i32 %141, 2147483647
  %144 = bitcast i32 %143 to float
  %145 = fmul float %144, 0x3FB3D07220000000
  fence acq_rel
  %146 = insertelement <2 x float> undef, float %144, i32 0
  %147 = shufflevector <2 x float> %146, <2 x float> undef, <2 x i32> zeroinitializer
  %148 = fmul <2 x float> %147, <float 0x3FEA45C1E0000000, float 0x3F7AB5FBC0000000>
  %149 = fadd <2 x float> %148, <float 0x3FE97A1D40000000, float 0xBFAC395780000000>
  fence acq_rel
  %150 = fmul <2 x float> %149, %147
  %151 = fadd <2 x float> %150, <float 0x3FC4CC3620000000, float 0x3FDFEB9100000000>
  fence acq_rel
  %152 = fmul <2 x float> %151, %147
  %153 = fadd <2 x float> %152, <float 0x3F855FAAA0000000, float 0x3FF13B4BC0000000>
  fence acq_rel
  %154 = fmul <2 x float> %153, %147
  %155 = fadd <2 x float> %154, <float 0x3F2CD6CEE0000000, float 0x3FD0D804A0000000>
  fence acq_rel
  %156 = extractelement <2 x float> %155, i32 0
  %157 = extractelement <2 x float> %155, i32 1
  %158 = fdiv float %156, %157
  %159 = fcmp ule float %144, 0x3FA4B5DCC0000000
  %160 = select i1 %159, float %145, float %158
  %161 = bitcast float %160 to i32
  %162 = and i32 %161, 2147483647
  %163 = or i32 %162, %142
  %164 = bitcast i32 %163 to float
  %165 = load float**, float*** %84, align 8
  %166 = load float*, float** %165, align 8
  %167 = getelementptr inbounds float, float* %58, i64 %86
  %168 = getelementptr inbounds float, float* %68, i64 %86
  %169 = getelementptr inbounds float, float* %78, i64 %86
  tail call void @_ZN3jxl8N_SCALAR14LinearRGBToXYBIN3hwy8N_SCALAR4Vec1IfEEEEvT_S6_S6_PKfPfS9_S9_(float %112, float %138, float %164, float* %166, float* %167, float* %168, float* %169) #13
  %170 = add nuw i64 %86, 1
  %171 = load i64*, i64** %79, align 8
  %172 = load i64, i64* %171, align 8
  %173 = icmp ult i64 %170, %172
  br i1 %173, label %85, label %174

174:                                              ; preds = %85, %3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_8N_SCALAR18SRGBToXYBAndLinearERKNS_6Image3IfEEPKfPS0_PS6_SC_E4$_14E12CallInitFuncEPvm"(i8* nocapture readonly, i64) #6 align 2 {
  %3 = bitcast i8* %0 to i32 (i64)**
  %4 = load i32 (i64)*, i32 (i64)** %3, align 8
  %5 = tail call i32 %4(i64 %1) #13
  %6 = icmp ne i32 %5, 0
  %7 = sext i1 %6 to i32
  ret i32 %7
}

; Function Attrs: nounwind ssp uwtable
define internal void @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_8N_SCALAR18SRGBToXYBAndLinearERKNS_6Image3IfEEPKfPS0_PS6_SC_E4$_14E12CallDataFuncEPvjm"(i8* nocapture readonly, i32, i64) #6 align 2 {
  %4 = getelementptr inbounds i8, i8* %0, i64 8
  %5 = bitcast i8* %4 to %class.anon.105**
  %6 = load %class.anon.105*, %class.anon.105** %5, align 8
  %7 = sext i32 %1 to i64
  %8 = getelementptr inbounds %class.anon.105, %class.anon.105* %6, i64 0, i32 0
  %9 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %8, align 8
  %10 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %9, i64 0, i32 0, i64 0, i32 0, i32 4
  %11 = load i64, i64* %10, align 8
  %12 = mul i64 %11, %7
  %13 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %9, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = ptrtoint i8* %14 to i64
  %16 = and i64 %15, 63
  %17 = icmp eq i64 %16, 0
  tail call void @llvm.assume(i1 %17) #13
  %18 = getelementptr inbounds i8, i8* %14, i64 %12
  %19 = ptrtoint i8* %18 to i64
  %20 = and i64 %19, 63
  %21 = icmp eq i64 %20, 0
  tail call void @llvm.assume(i1 %21) #13
  %22 = bitcast i8* %18 to float*
  %23 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %9, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %24 = load i8*, i8** %23, align 8
  %25 = ptrtoint i8* %24 to i64
  %26 = and i64 %25, 63
  %27 = icmp eq i64 %26, 0
  tail call void @llvm.assume(i1 %27) #13
  %28 = getelementptr inbounds i8, i8* %24, i64 %12
  %29 = ptrtoint i8* %28 to i64
  %30 = and i64 %29, 63
  %31 = icmp eq i64 %30, 0
  tail call void @llvm.assume(i1 %31) #13
  %32 = bitcast i8* %28 to float*
  %33 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %9, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %34 = load i8*, i8** %33, align 8
  %35 = ptrtoint i8* %34 to i64
  %36 = and i64 %35, 63
  %37 = icmp eq i64 %36, 0
  tail call void @llvm.assume(i1 %37) #13
  %38 = getelementptr inbounds i8, i8* %34, i64 %12
  %39 = ptrtoint i8* %38 to i64
  %40 = and i64 %39, 63
  %41 = icmp eq i64 %40, 0
  tail call void @llvm.assume(i1 %41) #13
  %42 = bitcast i8* %38 to float*
  %43 = getelementptr inbounds %class.anon.105, %class.anon.105* %6, i64 0, i32 1
  %44 = load %"class.jxl::Image3"**, %"class.jxl::Image3"*** %43, align 8
  %45 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %44, align 8
  %46 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %45, i64 0, i32 0, i64 0, i32 0, i32 4
  %47 = load i64, i64* %46, align 8
  %48 = mul i64 %47, %7
  %49 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %45, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %50 = load i8*, i8** %49, align 8
  %51 = ptrtoint i8* %50 to i64
  %52 = and i64 %51, 63
  %53 = icmp eq i64 %52, 0
  tail call void @llvm.assume(i1 %53) #13
  %54 = getelementptr inbounds i8, i8* %50, i64 %48
  %55 = ptrtoint i8* %54 to i64
  %56 = and i64 %55, 63
  %57 = icmp eq i64 %56, 0
  tail call void @llvm.assume(i1 %57) #13
  %58 = bitcast i8* %54 to float*
  %59 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %45, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %60 = load i8*, i8** %59, align 8
  %61 = ptrtoint i8* %60 to i64
  %62 = and i64 %61, 63
  %63 = icmp eq i64 %62, 0
  tail call void @llvm.assume(i1 %63) #13
  %64 = getelementptr inbounds i8, i8* %60, i64 %48
  %65 = ptrtoint i8* %64 to i64
  %66 = and i64 %65, 63
  %67 = icmp eq i64 %66, 0
  tail call void @llvm.assume(i1 %67) #13
  %68 = bitcast i8* %64 to float*
  %69 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %45, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %70 = load i8*, i8** %69, align 8
  %71 = ptrtoint i8* %70 to i64
  %72 = and i64 %71, 63
  %73 = icmp eq i64 %72, 0
  tail call void @llvm.assume(i1 %73) #13
  %74 = getelementptr inbounds i8, i8* %70, i64 %48
  %75 = ptrtoint i8* %74 to i64
  %76 = and i64 %75, 63
  %77 = icmp eq i64 %76, 0
  tail call void @llvm.assume(i1 %77) #13
  %78 = bitcast i8* %74 to float*
  %79 = getelementptr inbounds %class.anon.105, %class.anon.105* %6, i64 0, i32 2
  %80 = load %"class.jxl::Image3"**, %"class.jxl::Image3"*** %79, align 8
  %81 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %80, align 8
  %82 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %81, i64 0, i32 0, i64 0, i32 0, i32 4
  %83 = load i64, i64* %82, align 8
  %84 = mul i64 %83, %7
  %85 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %81, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %86 = load i8*, i8** %85, align 8
  %87 = ptrtoint i8* %86 to i64
  %88 = and i64 %87, 63
  %89 = icmp eq i64 %88, 0
  tail call void @llvm.assume(i1 %89) #13
  %90 = getelementptr inbounds i8, i8* %86, i64 %84
  %91 = ptrtoint i8* %90 to i64
  %92 = and i64 %91, 63
  %93 = icmp eq i64 %92, 0
  tail call void @llvm.assume(i1 %93) #13
  %94 = bitcast i8* %90 to float*
  %95 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %81, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %96 = load i8*, i8** %95, align 8
  %97 = ptrtoint i8* %96 to i64
  %98 = and i64 %97, 63
  %99 = icmp eq i64 %98, 0
  tail call void @llvm.assume(i1 %99) #13
  %100 = getelementptr inbounds i8, i8* %96, i64 %84
  %101 = ptrtoint i8* %100 to i64
  %102 = and i64 %101, 63
  %103 = icmp eq i64 %102, 0
  tail call void @llvm.assume(i1 %103) #13
  %104 = bitcast i8* %100 to float*
  %105 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %81, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %106 = load i8*, i8** %105, align 8
  %107 = ptrtoint i8* %106 to i64
  %108 = and i64 %107, 63
  %109 = icmp eq i64 %108, 0
  tail call void @llvm.assume(i1 %109) #13
  %110 = getelementptr inbounds i8, i8* %106, i64 %84
  %111 = ptrtoint i8* %110 to i64
  %112 = and i64 %111, 63
  %113 = icmp eq i64 %112, 0
  tail call void @llvm.assume(i1 %113) #13
  %114 = bitcast i8* %110 to float*
  %115 = getelementptr inbounds %class.anon.105, %class.anon.105* %6, i64 0, i32 3
  %116 = load i64*, i64** %115, align 8
  %117 = load i64, i64* %116, align 8
  %118 = icmp eq i64 %117, 0
  br i1 %118, label %216, label %119

119:                                              ; preds = %3
  %120 = getelementptr inbounds %class.anon.105, %class.anon.105* %6, i64 0, i32 5
  br label %121

121:                                              ; preds = %121, %119
  %122 = phi i64 [ 0, %119 ], [ %212, %121 ]
  %123 = getelementptr inbounds float, float* %22, i64 %122
  %124 = bitcast float* %123 to i32*
  %125 = load i32, i32* %124, align 4, !alias.scope !1093
  %126 = and i32 %125, -2147483648
  %127 = and i32 %125, 2147483647
  %128 = bitcast i32 %127 to float
  %129 = fmul float %128, 0x3FB3D07220000000
  fence acq_rel
  %130 = insertelement <2 x float> undef, float %128, i32 0
  %131 = shufflevector <2 x float> %130, <2 x float> undef, <2 x i32> zeroinitializer
  %132 = fmul <2 x float> %131, <float 0x3FEA45C1E0000000, float 0x3F7AB5FBC0000000>
  %133 = fadd <2 x float> %132, <float 0x3FE97A1D40000000, float 0xBFAC395780000000>
  fence acq_rel
  %134 = fmul <2 x float> %133, %131
  %135 = fadd <2 x float> %134, <float 0x3FC4CC3620000000, float 0x3FDFEB9100000000>
  fence acq_rel
  %136 = fmul <2 x float> %135, %131
  %137 = fadd <2 x float> %136, <float 0x3F855FAAA0000000, float 0x3FF13B4BC0000000>
  fence acq_rel
  %138 = fmul <2 x float> %137, %131
  %139 = fadd <2 x float> %138, <float 0x3F2CD6CEE0000000, float 0x3FD0D804A0000000>
  fence acq_rel
  %140 = extractelement <2 x float> %139, i32 0
  %141 = extractelement <2 x float> %139, i32 1
  %142 = fdiv float %140, %141
  %143 = fcmp ule float %128, 0x3FA4B5DCC0000000
  %144 = select i1 %143, float %129, float %142
  %145 = bitcast float %144 to i32
  %146 = and i32 %145, 2147483647
  %147 = or i32 %146, %126
  %148 = bitcast i32 %147 to float
  %149 = getelementptr inbounds float, float* %32, i64 %122
  %150 = bitcast float* %149 to i32*
  %151 = load i32, i32* %150, align 4, !alias.scope !1096
  %152 = and i32 %151, -2147483648
  %153 = and i32 %151, 2147483647
  %154 = bitcast i32 %153 to float
  %155 = fmul float %154, 0x3FB3D07220000000
  fence acq_rel
  %156 = insertelement <2 x float> undef, float %154, i32 0
  %157 = shufflevector <2 x float> %156, <2 x float> undef, <2 x i32> zeroinitializer
  %158 = fmul <2 x float> %157, <float 0x3FEA45C1E0000000, float 0x3F7AB5FBC0000000>
  %159 = fadd <2 x float> %158, <float 0x3FE97A1D40000000, float 0xBFAC395780000000>
  fence acq_rel
  %160 = fmul <2 x float> %159, %157
  %161 = fadd <2 x float> %160, <float 0x3FC4CC3620000000, float 0x3FDFEB9100000000>
  fence acq_rel
  %162 = fmul <2 x float> %161, %157
  %163 = fadd <2 x float> %162, <float 0x3F855FAAA0000000, float 0x3FF13B4BC0000000>
  fence acq_rel
  %164 = fmul <2 x float> %163, %157
  %165 = fadd <2 x float> %164, <float 0x3F2CD6CEE0000000, float 0x3FD0D804A0000000>
  fence acq_rel
  %166 = extractelement <2 x float> %165, i32 0
  %167 = extractelement <2 x float> %165, i32 1
  %168 = fdiv float %166, %167
  %169 = fcmp ule float %154, 0x3FA4B5DCC0000000
  %170 = select i1 %169, float %155, float %168
  %171 = bitcast float %170 to i32
  %172 = and i32 %171, 2147483647
  %173 = or i32 %172, %152
  %174 = bitcast i32 %173 to float
  %175 = getelementptr inbounds float, float* %42, i64 %122
  %176 = bitcast float* %175 to i32*
  %177 = load i32, i32* %176, align 4, !alias.scope !1099
  %178 = and i32 %177, -2147483648
  %179 = and i32 %177, 2147483647
  %180 = bitcast i32 %179 to float
  %181 = fmul float %180, 0x3FB3D07220000000
  fence acq_rel
  %182 = insertelement <2 x float> undef, float %180, i32 0
  %183 = shufflevector <2 x float> %182, <2 x float> undef, <2 x i32> zeroinitializer
  %184 = fmul <2 x float> %183, <float 0x3FEA45C1E0000000, float 0x3F7AB5FBC0000000>
  %185 = fadd <2 x float> %184, <float 0x3FE97A1D40000000, float 0xBFAC395780000000>
  fence acq_rel
  %186 = fmul <2 x float> %185, %183
  %187 = fadd <2 x float> %186, <float 0x3FC4CC3620000000, float 0x3FDFEB9100000000>
  fence acq_rel
  %188 = fmul <2 x float> %187, %183
  %189 = fadd <2 x float> %188, <float 0x3F855FAAA0000000, float 0x3FF13B4BC0000000>
  fence acq_rel
  %190 = fmul <2 x float> %189, %183
  %191 = fadd <2 x float> %190, <float 0x3F2CD6CEE0000000, float 0x3FD0D804A0000000>
  fence acq_rel
  %192 = extractelement <2 x float> %191, i32 0
  %193 = extractelement <2 x float> %191, i32 1
  %194 = fdiv float %192, %193
  %195 = fcmp ule float %180, 0x3FA4B5DCC0000000
  %196 = select i1 %195, float %181, float %194
  %197 = bitcast float %196 to i32
  %198 = and i32 %197, 2147483647
  %199 = or i32 %198, %178
  %200 = bitcast i32 %199 to float
  %201 = getelementptr inbounds float, float* %58, i64 %122
  %202 = bitcast float* %201 to i32*
  store i32 %147, i32* %202, align 4, !alias.scope !1102
  %203 = getelementptr inbounds float, float* %68, i64 %122
  %204 = bitcast float* %203 to i32*
  store i32 %173, i32* %204, align 4, !alias.scope !1105
  %205 = getelementptr inbounds float, float* %78, i64 %122
  %206 = bitcast float* %205 to i32*
  store i32 %199, i32* %206, align 4, !alias.scope !1108
  %207 = load float**, float*** %120, align 8
  %208 = load float*, float** %207, align 8
  %209 = getelementptr inbounds float, float* %94, i64 %122
  %210 = getelementptr inbounds float, float* %104, i64 %122
  %211 = getelementptr inbounds float, float* %114, i64 %122
  tail call void @_ZN3jxl8N_SCALAR14LinearRGBToXYBIN3hwy8N_SCALAR4Vec1IfEEEEvT_S6_S6_PKfPfS9_S9_(float %148, float %174, float %200, float* %208, float* %209, float* %210, float* %211) #13
  %212 = add nuw i64 %122, 1
  %213 = load i64*, i64** %115, align 8
  %214 = load i64, i64* %213, align 8
  %215 = icmp ult i64 %212, %214
  br i1 %215, label %121, label %216

216:                                              ; preds = %121, %3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_8N_SCALAR10RgbToYcbcrERKNS_5PlaneIfEES8_S8_PS6_S9_S9_PS0_E4$_15E12CallInitFuncEPvm"(i8* nocapture readonly, i64) #6 align 2 {
  %3 = bitcast i8* %0 to i32 (i64)**
  %4 = load i32 (i64)*, i32 (i64)** %3, align 8
  %5 = tail call i32 %4(i64 %1) #13
  %6 = icmp ne i32 %5, 0
  %7 = sext i1 %6 to i32
  ret i32 %7
}

; Function Attrs: nounwind ssp uwtable
define internal void @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_8N_SCALAR10RgbToYcbcrERKNS_5PlaneIfEES8_S8_PS6_S9_S9_PS0_E4$_15E12CallDataFuncEPvjm"(i8* nocapture readonly, i32, i64) #6 align 2 {
  %4 = getelementptr inbounds i8, i8* %0, i64 8
  %5 = bitcast i8* %4 to %class.anon.106**
  %6 = load %class.anon.106*, %class.anon.106** %5, align 8
  %7 = sext i32 %1 to i64
  %8 = getelementptr inbounds %class.anon.106, %class.anon.106* %6, i64 0, i32 0
  %9 = load i64*, i64** %8, align 8
  %10 = load i64, i64* %9, align 8
  %11 = mul i64 %10, %7
  %12 = add i64 %11, %10
  %13 = getelementptr inbounds %class.anon.106, %class.anon.106* %6, i64 0, i32 1
  %14 = load i64*, i64** %13, align 8
  %15 = load i64, i64* %14, align 8
  %16 = icmp ult i64 %15, %12
  %17 = select i1 %16, i64 %15, i64 %12
  %18 = icmp ult i64 %11, %17
  br i1 %18, label %19, label %168

19:                                               ; preds = %3
  %20 = getelementptr inbounds %class.anon.106, %class.anon.106* %6, i64 0, i32 2
  %21 = getelementptr inbounds %class.anon.106, %class.anon.106* %6, i64 0, i32 3
  %22 = getelementptr inbounds %class.anon.106, %class.anon.106* %6, i64 0, i32 4
  %23 = getelementptr inbounds %class.anon.106, %class.anon.106* %6, i64 0, i32 5
  %24 = getelementptr inbounds %class.anon.106, %class.anon.106* %6, i64 0, i32 6
  %25 = getelementptr inbounds %class.anon.106, %class.anon.106* %6, i64 0, i32 7
  %26 = getelementptr inbounds %class.anon.106, %class.anon.106* %6, i64 0, i32 8
  %27 = getelementptr inbounds %class.anon.106, %class.anon.106* %6, i64 0, i32 11
  %28 = getelementptr inbounds %class.anon.106, %class.anon.106* %6, i64 0, i32 12
  %29 = getelementptr inbounds %class.anon.106, %class.anon.106* %6, i64 0, i32 13
  %30 = getelementptr inbounds %class.anon.106, %class.anon.106* %6, i64 0, i32 14
  %31 = getelementptr inbounds %class.anon.106, %class.anon.106* %6, i64 0, i32 15
  %32 = getelementptr inbounds %class.anon.106, %class.anon.106* %6, i64 0, i32 16
  %33 = getelementptr inbounds %class.anon.106, %class.anon.106* %6, i64 0, i32 17
  %34 = getelementptr inbounds %class.anon.106, %class.anon.106* %6, i64 0, i32 18
  %35 = getelementptr inbounds %class.anon.106, %class.anon.106* %6, i64 0, i32 9
  %36 = load i64*, i64** %26, align 8
  %37 = load i64, i64* %36, align 8
  br label %38

38:                                               ; preds = %111, %19
  %39 = phi i64 [ %37, %19 ], [ %112, %111 ]
  %40 = phi i64 [ %11, %19 ], [ %113, %111 ]
  %41 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %20, align 8
  %42 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %41, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %43 = load i8*, i8** %42, align 8
  %44 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %41, i64 0, i32 0, i32 4
  %45 = load i64, i64* %44, align 8
  %46 = mul i64 %45, %40
  %47 = getelementptr inbounds i8, i8* %43, i64 %46
  %48 = ptrtoint i8* %47 to i64
  %49 = and i64 %48, 63
  %50 = icmp eq i64 %49, 0
  tail call void @llvm.assume(i1 %50) #13
  %51 = bitcast i8* %47 to float*
  %52 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %21, align 8
  %53 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %52, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %54 = load i8*, i8** %53, align 8
  %55 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %52, i64 0, i32 0, i32 4
  %56 = load i64, i64* %55, align 8
  %57 = mul i64 %56, %40
  %58 = getelementptr inbounds i8, i8* %54, i64 %57
  %59 = ptrtoint i8* %58 to i64
  %60 = and i64 %59, 63
  %61 = icmp eq i64 %60, 0
  tail call void @llvm.assume(i1 %61) #13
  %62 = bitcast i8* %58 to float*
  %63 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %22, align 8
  %64 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %63, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %65 = load i8*, i8** %64, align 8
  %66 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %63, i64 0, i32 0, i32 4
  %67 = load i64, i64* %66, align 8
  %68 = mul i64 %67, %40
  %69 = getelementptr inbounds i8, i8* %65, i64 %68
  %70 = ptrtoint i8* %69 to i64
  %71 = and i64 %70, 63
  %72 = icmp eq i64 %71, 0
  tail call void @llvm.assume(i1 %72) #13
  %73 = bitcast i8* %69 to float*
  %74 = load %"class.jxl::Plane"**, %"class.jxl::Plane"*** %23, align 8
  %75 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %74, align 8
  %76 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %75, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %77 = load i8*, i8** %76, align 8
  %78 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %75, i64 0, i32 0, i32 4
  %79 = load i64, i64* %78, align 8
  %80 = mul i64 %79, %40
  %81 = getelementptr inbounds i8, i8* %77, i64 %80
  %82 = ptrtoint i8* %81 to i64
  %83 = and i64 %82, 63
  %84 = icmp eq i64 %83, 0
  tail call void @llvm.assume(i1 %84) #13
  %85 = bitcast i8* %81 to float*
  %86 = load %"class.jxl::Plane"**, %"class.jxl::Plane"*** %24, align 8
  %87 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %86, align 8
  %88 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %87, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %89 = load i8*, i8** %88, align 8
  %90 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %87, i64 0, i32 0, i32 4
  %91 = load i64, i64* %90, align 8
  %92 = mul i64 %91, %40
  %93 = getelementptr inbounds i8, i8* %89, i64 %92
  %94 = ptrtoint i8* %93 to i64
  %95 = and i64 %94, 63
  %96 = icmp eq i64 %95, 0
  tail call void @llvm.assume(i1 %96) #13
  %97 = bitcast i8* %93 to float*
  %98 = load %"class.jxl::Plane"**, %"class.jxl::Plane"*** %25, align 8
  %99 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %98, align 8
  %100 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %99, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %101 = load i8*, i8** %100, align 8
  %102 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %99, i64 0, i32 0, i32 4
  %103 = load i64, i64* %102, align 8
  %104 = mul i64 %103, %40
  %105 = getelementptr inbounds i8, i8* %101, i64 %104
  %106 = ptrtoint i8* %105 to i64
  %107 = and i64 %106, 63
  %108 = icmp eq i64 %107, 0
  tail call void @llvm.assume(i1 %108) #13
  %109 = bitcast i8* %105 to float*
  %110 = icmp eq i64 %39, 0
  br i1 %110, label %111, label %115

111:                                              ; preds = %115, %38
  %112 = phi i64 [ 0, %38 ], [ %166, %115 ]
  %113 = add nuw i64 %40, 1
  %114 = icmp ult i64 %113, %17
  br i1 %114, label %38, label %168

115:                                              ; preds = %38, %115
  %116 = phi i64 [ %164, %115 ], [ 0, %38 ]
  %117 = getelementptr inbounds float, float* %51, i64 %116
  %118 = load float, float* %117, align 4, !alias.scope !1111
  %119 = getelementptr inbounds float, float* %62, i64 %116
  %120 = load float, float* %119, align 4, !alias.scope !1114
  %121 = getelementptr inbounds float, float* %73, i64 %116
  %122 = load float, float* %121, align 4, !alias.scope !1117
  %123 = load %"struct.hwy::N_SCALAR::Vec1"*, %"struct.hwy::N_SCALAR::Vec1"** %27, align 8
  %124 = getelementptr inbounds %"struct.hwy::N_SCALAR::Vec1", %"struct.hwy::N_SCALAR::Vec1"* %123, i64 0, i32 0
  %125 = load float, float* %124, align 4
  %126 = fmul float %118, %125
  %127 = load %"struct.hwy::N_SCALAR::Vec1"*, %"struct.hwy::N_SCALAR::Vec1"** %28, align 8
  %128 = getelementptr inbounds %"struct.hwy::N_SCALAR::Vec1", %"struct.hwy::N_SCALAR::Vec1"* %127, i64 0, i32 0
  %129 = load float, float* %128, align 4
  %130 = fmul float %118, %129
  %131 = load %"struct.hwy::N_SCALAR::Vec1"*, %"struct.hwy::N_SCALAR::Vec1"** %29, align 8
  %132 = getelementptr inbounds %"struct.hwy::N_SCALAR::Vec1", %"struct.hwy::N_SCALAR::Vec1"* %131, i64 0, i32 0
  %133 = load float, float* %132, align 4
  %134 = fmul float %120, %133
  %135 = load %"struct.hwy::N_SCALAR::Vec1"*, %"struct.hwy::N_SCALAR::Vec1"** %30, align 8
  %136 = getelementptr inbounds %"struct.hwy::N_SCALAR::Vec1", %"struct.hwy::N_SCALAR::Vec1"* %135, i64 0, i32 0
  %137 = load float, float* %136, align 4
  %138 = fmul float %122, %137
  %139 = load %"struct.hwy::N_SCALAR::Vec1"*, %"struct.hwy::N_SCALAR::Vec1"** %31, align 8
  %140 = getelementptr inbounds %"struct.hwy::N_SCALAR::Vec1", %"struct.hwy::N_SCALAR::Vec1"* %139, i64 0, i32 0
  %141 = load float, float* %140, align 4
  %142 = fmul float %122, %141
  %143 = fadd float %126, %134
  %144 = fadd float %143, %138
  %145 = load %"struct.hwy::N_SCALAR::Vec1"*, %"struct.hwy::N_SCALAR::Vec1"** %32, align 8
  %146 = getelementptr inbounds %"struct.hwy::N_SCALAR::Vec1", %"struct.hwy::N_SCALAR::Vec1"* %145, i64 0, i32 0
  %147 = load float, float* %146, align 4
  %148 = fsub float %144, %147
  %149 = fsub float %142, %144
  %150 = load %"struct.hwy::N_SCALAR::Vec1"*, %"struct.hwy::N_SCALAR::Vec1"** %33, align 8
  %151 = getelementptr inbounds %"struct.hwy::N_SCALAR::Vec1", %"struct.hwy::N_SCALAR::Vec1"* %150, i64 0, i32 0
  %152 = load float, float* %151, align 4
  %153 = fmul float %149, %152
  %154 = fsub float %130, %144
  %155 = load %"struct.hwy::N_SCALAR::Vec1"*, %"struct.hwy::N_SCALAR::Vec1"** %34, align 8
  %156 = getelementptr inbounds %"struct.hwy::N_SCALAR::Vec1", %"struct.hwy::N_SCALAR::Vec1"* %155, i64 0, i32 0
  %157 = load float, float* %156, align 4
  %158 = fmul float %154, %157
  %159 = getelementptr inbounds float, float* %85, i64 %116
  store float %148, float* %159, align 4, !alias.scope !1120
  %160 = getelementptr inbounds float, float* %97, i64 %116
  store float %153, float* %160, align 4, !alias.scope !1123
  %161 = getelementptr inbounds float, float* %109, i64 %116
  store float %158, float* %161, align 4, !alias.scope !1126
  %162 = load i64*, i64** %35, align 8
  %163 = load i64, i64* %162, align 8
  %164 = add i64 %163, %116
  %165 = load i64*, i64** %26, align 8
  %166 = load i64, i64* %165, align 8
  %167 = icmp ult i64 %164, %166
  br i1 %167, label %115, label %111

168:                                              ; preds = %111, %3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl6Image3IfEC2EONS_5PlaneIfEES4_S4_(%"class.jxl::Image3"*, %"class.jxl::Plane"* dereferenceable(32), %"class.jxl::Plane"* dereferenceable(32), %"class.jxl::Plane"* dereferenceable(32)) unnamed_addr #6 comdat align 2 {
  %5 = bitcast %"class.jxl::Image3"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 0, i64 96, i1 false)
  %6 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %1, i64 0, i32 0, i32 0
  %7 = load i32, i32* %6, align 8
  %8 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %2, i64 0, i32 0, i32 0
  %9 = load i32, i32* %8, align 8
  %10 = icmp eq i32 %7, %9
  br i1 %10, label %11, label %17

11:                                               ; preds = %4
  %12 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %1, i64 0, i32 0, i32 1
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %2, i64 0, i32 0, i32 1
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %13, %15
  br i1 %16, label %20, label %17

17:                                               ; preds = %4, %11
  %18 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.21, i64 0, i64 0), i32 343, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.22, i64 0, i64 0)) #13
  %19 = tail call zeroext i1 @_ZN3jxl5AbortEv() #21
  unreachable

20:                                               ; preds = %11
  %21 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %3, i64 0, i32 0, i32 0
  %22 = load i32, i32* %21, align 8
  %23 = icmp eq i32 %7, %22
  br i1 %23, label %24, label %28

24:                                               ; preds = %20
  %25 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %3, i64 0, i32 0, i32 1
  %26 = load i32, i32* %25, align 4
  %27 = icmp eq i32 %13, %26
  br i1 %27, label %31, label %28

28:                                               ; preds = %20, %24
  %29 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.21, i64 0, i64 0), i32 344, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.23, i64 0, i64 0)) #13
  %30 = tail call zeroext i1 @_ZN3jxl5AbortEv() #21
  unreachable

31:                                               ; preds = %24
  %32 = bitcast %"class.jxl::Plane"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %5, i8* align 8 %32, i64 24, i1 false) #13
  %33 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 0, i32 0, i32 5
  %34 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %1, i64 0, i32 0, i32 5
  %35 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %34, i64 0, i32 0, i32 0, i32 0
  %36 = bitcast %"class.std::__1::unique_ptr"* %34 to i64*
  %37 = load i64, i64* %36, align 8
  store i8* null, i8** %35, align 8
  %38 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %33, i64 0, i32 0, i32 0, i32 0
  %39 = load i8*, i8** %38, align 8
  %40 = bitcast %"class.std::__1::unique_ptr"* %33 to i64*
  store i64 %37, i64* %40, align 8
  %41 = icmp eq i8* %39, null
  br i1 %41, label %43, label %42

42:                                               ; preds = %31
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %39) #13
  br label %43

43:                                               ; preds = %31, %42
  %44 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 1
  %45 = bitcast %"class.jxl::Plane"* %44 to i8*
  %46 = bitcast %"class.jxl::Plane"* %2 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %45, i8* align 8 %46, i64 24, i1 false) #13
  %47 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 1, i32 0, i32 5
  %48 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %2, i64 0, i32 0, i32 5
  %49 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %48, i64 0, i32 0, i32 0, i32 0
  %50 = bitcast %"class.std::__1::unique_ptr"* %48 to i64*
  %51 = load i64, i64* %50, align 8
  store i8* null, i8** %49, align 8
  %52 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %47, i64 0, i32 0, i32 0, i32 0
  %53 = load i8*, i8** %52, align 8
  %54 = bitcast %"class.std::__1::unique_ptr"* %47 to i64*
  store i64 %51, i64* %54, align 8
  %55 = icmp eq i8* %53, null
  br i1 %55, label %57, label %56

56:                                               ; preds = %43
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %53) #13
  br label %57

57:                                               ; preds = %43, %56
  %58 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 2
  %59 = bitcast %"class.jxl::Plane"* %58 to i8*
  %60 = bitcast %"class.jxl::Plane"* %3 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %59, i8* align 8 %60, i64 24, i1 false) #13
  %61 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 2, i32 0, i32 5
  %62 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %3, i64 0, i32 0, i32 5
  %63 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %62, i64 0, i32 0, i32 0, i32 0
  %64 = bitcast %"class.std::__1::unique_ptr"* %62 to i64*
  %65 = load i64, i64* %64, align 8
  store i8* null, i8** %63, align 8
  %66 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %61, i64 0, i32 0, i32 0, i32 0
  %67 = load i8*, i8** %66, align 8
  %68 = bitcast %"class.std::__1::unique_ptr"* %61 to i64*
  store i64 %65, i64* %68, align 8
  %69 = icmp eq i8* %67, null
  br i1 %69, label %71, label %70

70:                                               ; preds = %57
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %67) #13
  br label %71

71:                                               ; preds = %57, %70
  ret void
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nofree nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="256" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+bmi,+bmi2,+cx8,+f16c,+fma,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+bmi,+bmi2,+cx8,+f16c,+fma,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="512" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+avx512bw,+avx512dq,+avx512f,+avx512vl,+bmi,+bmi2,+cx8,+f16c,+fma,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+avx512bw,+avx512dq,+avx512f,+avx512vl,+bmi,+bmi2,+cx8,+f16c,+fma,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { nounwind readnone speculatable }
attributes #13 = { nounwind }
attributes #14 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #15 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #16 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #17 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #18 = { nounwind readnone }
attributes #19 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="256" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+bmi,+bmi2,+cx8,+f16c,+fma,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #20 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="512" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+avx512bw,+avx512dq,+avx512f,+avx512vl,+bmi,+bmi2,+cx8,+f16c,+fma,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #21 = { noreturn nounwind }
attributes #22 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!4}
!4 = distinct !{!4, !5, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf: argument 0"}
!5 = distinct !{!5, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf"}
!6 = !{!7}
!7 = distinct !{!7, !8, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf: argument 0"}
!8 = distinct !{!8, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf"}
!9 = !{!10}
!10 = distinct !{!10, !11, !"_ZN3jxl9CopyImageIfEENS_6Image3IT_EERKS3_: argument 0"}
!11 = distinct !{!11, !"_ZN3jxl9CopyImageIfEENS_6Image3IT_EERKS3_"}
!12 = !{!13, !10}
!13 = distinct !{!13, !14, !"_ZN3jxl11CopyImageToINS_6Image3IfEEEEvRKT_PS3_: argument 0"}
!14 = distinct !{!14, !"_ZN3jxl11CopyImageToINS_6Image3IfEEEEvRKT_PS3_"}
!15 = !{!16}
!16 = distinct !{!16, !17, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf: argument 0"}
!17 = distinct !{!17, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf"}
!18 = !{!19}
!19 = distinct !{!19, !20, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf: argument 0"}
!20 = distinct !{!20, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf"}
!21 = !{!22}
!22 = distinct !{!22, !23, !"_ZN3hwy6N_AVX2L3SetENS0_4SimdIfLm8EEEf: argument 0"}
!23 = distinct !{!23, !"_ZN3hwy6N_AVX2L3SetENS0_4SimdIfLm8EEEf"}
!24 = !{!25}
!25 = distinct !{!25, !26, !"_ZN3hwy6N_AVX2L3SetENS0_4SimdIfLm8EEEf: argument 0"}
!26 = distinct !{!26, !"_ZN3hwy6N_AVX2L3SetENS0_4SimdIfLm8EEEf"}
!27 = !{!28}
!28 = distinct !{!28, !29, !"_ZN3hwy6N_AVX2L3SetENS0_4SimdIfLm8EEEf: argument 0"}
!29 = distinct !{!29, !"_ZN3hwy6N_AVX2L3SetENS0_4SimdIfLm8EEEf"}
!30 = !{!31}
!31 = distinct !{!31, !32, !"_ZN3hwy6N_AVX2L3SetENS0_4SimdIfLm8EEEf: argument 0"}
!32 = distinct !{!32, !"_ZN3hwy6N_AVX2L3SetENS0_4SimdIfLm8EEEf"}
!33 = !{!34}
!34 = distinct !{!34, !35, !"_ZN3hwy6N_AVX2plENS0_6Vec256IfEES2_: argument 0"}
!35 = distinct !{!35, !"_ZN3hwy6N_AVX2plENS0_6Vec256IfEES2_"}
!36 = !{!37}
!37 = distinct !{!37, !38, !"_ZN3hwy6N_AVX2plENS0_6Vec256IfEES2_: argument 0"}
!38 = distinct !{!38, !"_ZN3hwy6N_AVX2plENS0_6Vec256IfEES2_"}
!39 = !{!40}
!40 = distinct !{!40, !41, !"_ZN3hwy6N_AVX2dvENS0_6Vec256IfEES2_: argument 0"}
!41 = distinct !{!41, !"_ZN3hwy6N_AVX2dvENS0_6Vec256IfEES2_"}
!42 = !{!43}
!43 = distinct !{!43, !44, !"_ZN3hwy6N_AVX2dvENS0_6Vec256IfEES2_: argument 0"}
!44 = distinct !{!44, !"_ZN3hwy6N_AVX2dvENS0_6Vec256IfEES2_"}
!45 = !{!46}
!46 = distinct !{!46, !47, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec512IfEENS0_4SimdIfLm16EEEPf: argument 0"}
!47 = distinct !{!47, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec512IfEENS0_4SimdIfLm16EEEPf"}
!48 = !{!49}
!49 = distinct !{!49, !50, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec512IfEENS0_4SimdIfLm16EEEPf: argument 0"}
!50 = distinct !{!50, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec512IfEENS0_4SimdIfLm16EEEPf"}
!51 = !{!52}
!52 = distinct !{!52, !53, !"_ZN3hwy6N_AVX3L3SetENS0_4SimdIfLm16EEEf: argument 0"}
!53 = distinct !{!53, !"_ZN3hwy6N_AVX3L3SetENS0_4SimdIfLm16EEEf"}
!54 = !{!55}
!55 = distinct !{!55, !56, !"_ZN3hwy6N_AVX3L3SetENS0_4SimdIfLm16EEEf: argument 0"}
!56 = distinct !{!56, !"_ZN3hwy6N_AVX3L3SetENS0_4SimdIfLm16EEEf"}
!57 = !{!58}
!58 = distinct !{!58, !59, !"_ZN3hwy6N_AVX3L3SetENS0_4SimdIfLm16EEEf: argument 0"}
!59 = distinct !{!59, !"_ZN3hwy6N_AVX3L3SetENS0_4SimdIfLm16EEEf"}
!60 = !{!61}
!61 = distinct !{!61, !62, !"_ZN3hwy6N_AVX3L3SetENS0_4SimdIfLm16EEEf: argument 0"}
!62 = distinct !{!62, !"_ZN3hwy6N_AVX3L3SetENS0_4SimdIfLm16EEEf"}
!63 = !{!64}
!64 = distinct !{!64, !65, !"_ZN3hwy6N_AVX3plENS0_6Vec512IfEES2_: argument 0"}
!65 = distinct !{!65, !"_ZN3hwy6N_AVX3plENS0_6Vec512IfEES2_"}
!66 = !{!67}
!67 = distinct !{!67, !68, !"_ZN3hwy6N_AVX3plENS0_6Vec512IfEES2_: argument 0"}
!68 = distinct !{!68, !"_ZN3hwy6N_AVX3plENS0_6Vec512IfEES2_"}
!69 = !{!70}
!70 = distinct !{!70, !71, !"_ZN3hwy6N_AVX3dvENS0_6Vec512IfEES2_: argument 0"}
!71 = distinct !{!71, !"_ZN3hwy6N_AVX3dvENS0_6Vec512IfEES2_"}
!72 = !{!73}
!73 = distinct !{!73, !74, !"_ZN3hwy6N_AVX3dvENS0_6Vec512IfEES2_: argument 0"}
!74 = distinct !{!74, !"_ZN3hwy6N_AVX3dvENS0_6Vec512IfEES2_"}
!75 = !{!76}
!76 = distinct !{!76, !77, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_: argument 0"}
!77 = distinct !{!77, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_"}
!78 = !{!76, !79}
!79 = distinct !{!79, !80, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_: argument 0"}
!80 = distinct !{!80, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_"}
!81 = !{!79}
!82 = !{i32 0, i32 33}
!83 = !{!84, !86}
!84 = distinct !{!84, !85, !"_ZN3jxl5ToXYBERKNS_11ImageBundleEPNS_10ThreadPoolEPNS_6Image3IfEEPS0_: argument 0"}
!85 = distinct !{!85, !"_ZN3jxl5ToXYBERKNS_11ImageBundleEPNS_10ThreadPoolEPNS_6Image3IfEEPS0_"}
!86 = distinct !{!86, !85, !"_ZN3jxl5ToXYBERKNS_11ImageBundleEPNS_10ThreadPoolEPNS_6Image3IfEEPS0_: argument 1"}
!87 = !{!88}
!88 = distinct !{!88, !89, !"_ZN3jxl14ConvertToFloatIhEENS_5PlaneIfEERKNS1_IT_EE: argument 0"}
!89 = distinct !{!89, !"_ZN3jxl14ConvertToFloatIhEENS_5PlaneIfEERKNS1_IT_EE"}
!90 = !{!91}
!91 = distinct !{!91, !92, !"_ZN3jxl14ConvertToFloatIhEENS_5PlaneIfEERKNS1_IT_EE: argument 0"}
!92 = distinct !{!92, !"_ZN3jxl14ConvertToFloatIhEENS_5PlaneIfEERKNS1_IT_EE"}
!93 = !{!94}
!94 = distinct !{!94, !95, !"_ZN3jxl14ConvertToFloatIhEENS_5PlaneIfEERKNS1_IT_EE: argument 0"}
!95 = distinct !{!95, !"_ZN3jxl14ConvertToFloatIhEENS_5PlaneIfEERKNS1_IT_EE"}
!96 = !{!97}
!97 = distinct !{!97, !98, !"_ZN3jxl11CopyImageToIfEEvRKNS_5PlaneIT_EEPS3_: argument 0"}
!98 = distinct !{!98, !"_ZN3jxl11CopyImageToIfEEvRKNS_5PlaneIT_EEPS3_"}
!99 = !{!100}
!100 = distinct !{!100, !101, !"_ZN3jxl11CopyImageToIfEEvRKNS_4RectERKNS_5PlaneIT_EES3_PS6_: argument 0"}
!101 = distinct !{!101, !"_ZN3jxl11CopyImageToIfEEvRKNS_4RectERKNS_5PlaneIT_EES3_PS6_"}
!102 = !{!103}
!103 = distinct !{!103, !104, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!104 = distinct !{!104, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!105 = !{!106}
!106 = distinct !{!106, !107, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!107 = distinct !{!107, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!108 = !{!109}
!109 = distinct !{!109, !110, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!110 = distinct !{!110, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!111 = !{!112, !114, !116}
!112 = distinct !{!112, !113, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!113 = distinct !{!113, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!114 = distinct !{!114, !115, !"_ZN3jxl6N_SSE415OpsinAbsorbanceIN3hwy6N_SSE46Vec128IfLm4EEEEEvT_S6_S6_PKfPS6_S9_S9_: argument 0"}
!115 = distinct !{!115, !"_ZN3jxl6N_SSE415OpsinAbsorbanceIN3hwy6N_SSE46Vec128IfLm4EEEEEvT_S6_S6_PKfPS6_S9_S9_"}
!116 = distinct !{!116, !117, !"_ZN3jxl6N_SSE414LinearRGBToXYBIN3hwy6N_SSE46Vec128IfLm4EEEEEvT_S6_S6_PKfPfS9_S9_: argument 0"}
!117 = distinct !{!117, !"_ZN3jxl6N_SSE414LinearRGBToXYBIN3hwy6N_SSE46Vec128IfLm4EEEEEvT_S6_S6_PKfPfS9_S9_"}
!118 = !{!119, !120, !121, !122, !123, !124}
!119 = distinct !{!119, !115, !"_ZN3jxl6N_SSE415OpsinAbsorbanceIN3hwy6N_SSE46Vec128IfLm4EEEEEvT_S6_S6_PKfPS6_S9_S9_: argument 1"}
!120 = distinct !{!120, !115, !"_ZN3jxl6N_SSE415OpsinAbsorbanceIN3hwy6N_SSE46Vec128IfLm4EEEEEvT_S6_S6_PKfPS6_S9_S9_: argument 2"}
!121 = distinct !{!121, !115, !"_ZN3jxl6N_SSE415OpsinAbsorbanceIN3hwy6N_SSE46Vec128IfLm4EEEEEvT_S6_S6_PKfPS6_S9_S9_: argument 3"}
!122 = distinct !{!122, !117, !"_ZN3jxl6N_SSE414LinearRGBToXYBIN3hwy6N_SSE46Vec128IfLm4EEEEEvT_S6_S6_PKfPfS9_S9_: argument 1"}
!123 = distinct !{!123, !117, !"_ZN3jxl6N_SSE414LinearRGBToXYBIN3hwy6N_SSE46Vec128IfLm4EEEEEvT_S6_S6_PKfPfS9_S9_: argument 2"}
!124 = distinct !{!124, !117, !"_ZN3jxl6N_SSE414LinearRGBToXYBIN3hwy6N_SSE46Vec128IfLm4EEEEEvT_S6_S6_PKfPfS9_S9_: argument 3"}
!125 = !{!126, !114, !116}
!126 = distinct !{!126, !127, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!127 = distinct !{!127, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!128 = !{!129, !114, !116}
!129 = distinct !{!129, !130, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!130 = distinct !{!130, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!131 = !{!132, !114, !116}
!132 = distinct !{!132, !133, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!133 = distinct !{!133, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!134 = !{!135, !114, !116}
!135 = distinct !{!135, !136, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!136 = distinct !{!136, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!137 = !{!138, !114, !116}
!138 = distinct !{!138, !139, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!139 = distinct !{!139, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!140 = !{!141, !114, !116}
!141 = distinct !{!141, !142, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!142 = distinct !{!142, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!143 = !{!144, !114, !116}
!144 = distinct !{!144, !145, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!145 = distinct !{!145, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!146 = !{!147, !114, !116}
!147 = distinct !{!147, !148, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!148 = distinct !{!148, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!149 = !{!150, !116}
!150 = distinct !{!150, !151, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!151 = distinct !{!151, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!152 = !{!122, !123, !124}
!153 = !{!154, !116}
!154 = distinct !{!154, !155, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!155 = distinct !{!155, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!156 = !{!157, !116}
!157 = distinct !{!157, !158, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!158 = distinct !{!158, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!159 = !{!160, !162, !122}
!160 = distinct !{!160, !161, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf: argument 0"}
!161 = distinct !{!161, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf"}
!162 = distinct !{!162, !163, !"_ZN3jxl6N_SSE48StoreXYBIN3hwy6N_SSE46Vec128IfLm4EEEEEvT_S6_S6_PfS7_S7_: argument 0"}
!163 = distinct !{!163, !"_ZN3jxl6N_SSE48StoreXYBIN3hwy6N_SSE46Vec128IfLm4EEEEEvT_S6_S6_PfS7_S7_"}
!164 = !{!165, !166, !116, !123, !124}
!165 = distinct !{!165, !163, !"_ZN3jxl6N_SSE48StoreXYBIN3hwy6N_SSE46Vec128IfLm4EEEEEvT_S6_S6_PfS7_S7_: argument 1"}
!166 = distinct !{!166, !163, !"_ZN3jxl6N_SSE48StoreXYBIN3hwy6N_SSE46Vec128IfLm4EEEEEvT_S6_S6_PfS7_S7_: argument 2"}
!167 = !{!168, !165, !123}
!168 = distinct !{!168, !169, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf: argument 0"}
!169 = distinct !{!169, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf"}
!170 = !{!162, !166, !116, !122, !124}
!171 = !{!172, !166, !124}
!172 = distinct !{!172, !173, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf: argument 0"}
!173 = distinct !{!173, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf"}
!174 = !{!162, !165, !116, !122, !123}
!175 = !{!176}
!176 = distinct !{!176, !177, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!177 = distinct !{!177, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!178 = !{!179}
!179 = distinct !{!179, !180, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!180 = distinct !{!180, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!181 = !{!182}
!182 = distinct !{!182, !183, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!183 = distinct !{!183, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!184 = !{!185, !187, !189}
!185 = distinct !{!185, !186, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!186 = distinct !{!186, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!187 = distinct !{!187, !188, !"_ZN3jxl6N_SSE415OpsinAbsorbanceIN3hwy6N_SSE46Vec128IfLm4EEEEEvT_S6_S6_PKfPS6_S9_S9_: argument 0"}
!188 = distinct !{!188, !"_ZN3jxl6N_SSE415OpsinAbsorbanceIN3hwy6N_SSE46Vec128IfLm4EEEEEvT_S6_S6_PKfPS6_S9_S9_"}
!189 = distinct !{!189, !190, !"_ZN3jxl6N_SSE414LinearRGBToXYBIN3hwy6N_SSE46Vec128IfLm4EEEEEvT_S6_S6_PKfPfS9_S9_: argument 0"}
!190 = distinct !{!190, !"_ZN3jxl6N_SSE414LinearRGBToXYBIN3hwy6N_SSE46Vec128IfLm4EEEEEvT_S6_S6_PKfPfS9_S9_"}
!191 = !{!192, !193, !194, !195, !196, !197}
!192 = distinct !{!192, !188, !"_ZN3jxl6N_SSE415OpsinAbsorbanceIN3hwy6N_SSE46Vec128IfLm4EEEEEvT_S6_S6_PKfPS6_S9_S9_: argument 1"}
!193 = distinct !{!193, !188, !"_ZN3jxl6N_SSE415OpsinAbsorbanceIN3hwy6N_SSE46Vec128IfLm4EEEEEvT_S6_S6_PKfPS6_S9_S9_: argument 2"}
!194 = distinct !{!194, !188, !"_ZN3jxl6N_SSE415OpsinAbsorbanceIN3hwy6N_SSE46Vec128IfLm4EEEEEvT_S6_S6_PKfPS6_S9_S9_: argument 3"}
!195 = distinct !{!195, !190, !"_ZN3jxl6N_SSE414LinearRGBToXYBIN3hwy6N_SSE46Vec128IfLm4EEEEEvT_S6_S6_PKfPfS9_S9_: argument 1"}
!196 = distinct !{!196, !190, !"_ZN3jxl6N_SSE414LinearRGBToXYBIN3hwy6N_SSE46Vec128IfLm4EEEEEvT_S6_S6_PKfPfS9_S9_: argument 2"}
!197 = distinct !{!197, !190, !"_ZN3jxl6N_SSE414LinearRGBToXYBIN3hwy6N_SSE46Vec128IfLm4EEEEEvT_S6_S6_PKfPfS9_S9_: argument 3"}
!198 = !{!199, !187, !189}
!199 = distinct !{!199, !200, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!200 = distinct !{!200, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!201 = !{!202, !187, !189}
!202 = distinct !{!202, !203, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!203 = distinct !{!203, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!204 = !{!205, !187, !189}
!205 = distinct !{!205, !206, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!206 = distinct !{!206, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!207 = !{!208, !187, !189}
!208 = distinct !{!208, !209, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!209 = distinct !{!209, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!210 = !{!211, !187, !189}
!211 = distinct !{!211, !212, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!212 = distinct !{!212, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!213 = !{!214, !187, !189}
!214 = distinct !{!214, !215, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!215 = distinct !{!215, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!216 = !{!217, !187, !189}
!217 = distinct !{!217, !218, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!218 = distinct !{!218, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!219 = !{!220, !187, !189}
!220 = distinct !{!220, !221, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!221 = distinct !{!221, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!222 = !{!223, !189}
!223 = distinct !{!223, !224, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!224 = distinct !{!224, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!225 = !{!195, !196, !197}
!226 = !{!227, !189}
!227 = distinct !{!227, !228, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!228 = distinct !{!228, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!229 = !{!230, !189}
!230 = distinct !{!230, !231, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!231 = distinct !{!231, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!232 = !{!233, !235, !195}
!233 = distinct !{!233, !234, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf: argument 0"}
!234 = distinct !{!234, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf"}
!235 = distinct !{!235, !236, !"_ZN3jxl6N_SSE48StoreXYBIN3hwy6N_SSE46Vec128IfLm4EEEEEvT_S6_S6_PfS7_S7_: argument 0"}
!236 = distinct !{!236, !"_ZN3jxl6N_SSE48StoreXYBIN3hwy6N_SSE46Vec128IfLm4EEEEEvT_S6_S6_PfS7_S7_"}
!237 = !{!238, !239, !189, !196, !197}
!238 = distinct !{!238, !236, !"_ZN3jxl6N_SSE48StoreXYBIN3hwy6N_SSE46Vec128IfLm4EEEEEvT_S6_S6_PfS7_S7_: argument 1"}
!239 = distinct !{!239, !236, !"_ZN3jxl6N_SSE48StoreXYBIN3hwy6N_SSE46Vec128IfLm4EEEEEvT_S6_S6_PfS7_S7_: argument 2"}
!240 = !{!241, !238, !196}
!241 = distinct !{!241, !242, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf: argument 0"}
!242 = distinct !{!242, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf"}
!243 = !{!235, !239, !189, !195, !197}
!244 = !{!245, !239, !197}
!245 = distinct !{!245, !246, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf: argument 0"}
!246 = distinct !{!246, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf"}
!247 = !{!235, !238, !189, !195, !196}
!248 = !{!249}
!249 = distinct !{!249, !250, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!250 = distinct !{!250, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!251 = !{!252}
!252 = distinct !{!252, !253, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!253 = distinct !{!253, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!254 = !{!255}
!255 = distinct !{!255, !256, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!256 = distinct !{!256, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!257 = !{!258}
!258 = distinct !{!258, !259, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf: argument 0"}
!259 = distinct !{!259, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf"}
!260 = !{!261}
!261 = distinct !{!261, !262, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf: argument 0"}
!262 = distinct !{!262, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf"}
!263 = !{!264}
!264 = distinct !{!264, !265, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf: argument 0"}
!265 = distinct !{!265, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf"}
!266 = !{!267, !269, !271}
!267 = distinct !{!267, !268, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!268 = distinct !{!268, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!269 = distinct !{!269, !270, !"_ZN3jxl6N_SSE415OpsinAbsorbanceIN3hwy6N_SSE46Vec128IfLm4EEEEEvT_S6_S6_PKfPS6_S9_S9_: argument 0"}
!270 = distinct !{!270, !"_ZN3jxl6N_SSE415OpsinAbsorbanceIN3hwy6N_SSE46Vec128IfLm4EEEEEvT_S6_S6_PKfPS6_S9_S9_"}
!271 = distinct !{!271, !272, !"_ZN3jxl6N_SSE414LinearRGBToXYBIN3hwy6N_SSE46Vec128IfLm4EEEEEvT_S6_S6_PKfPfS9_S9_: argument 0"}
!272 = distinct !{!272, !"_ZN3jxl6N_SSE414LinearRGBToXYBIN3hwy6N_SSE46Vec128IfLm4EEEEEvT_S6_S6_PKfPfS9_S9_"}
!273 = !{!274, !275, !276, !277, !278, !279}
!274 = distinct !{!274, !270, !"_ZN3jxl6N_SSE415OpsinAbsorbanceIN3hwy6N_SSE46Vec128IfLm4EEEEEvT_S6_S6_PKfPS6_S9_S9_: argument 1"}
!275 = distinct !{!275, !270, !"_ZN3jxl6N_SSE415OpsinAbsorbanceIN3hwy6N_SSE46Vec128IfLm4EEEEEvT_S6_S6_PKfPS6_S9_S9_: argument 2"}
!276 = distinct !{!276, !270, !"_ZN3jxl6N_SSE415OpsinAbsorbanceIN3hwy6N_SSE46Vec128IfLm4EEEEEvT_S6_S6_PKfPS6_S9_S9_: argument 3"}
!277 = distinct !{!277, !272, !"_ZN3jxl6N_SSE414LinearRGBToXYBIN3hwy6N_SSE46Vec128IfLm4EEEEEvT_S6_S6_PKfPfS9_S9_: argument 1"}
!278 = distinct !{!278, !272, !"_ZN3jxl6N_SSE414LinearRGBToXYBIN3hwy6N_SSE46Vec128IfLm4EEEEEvT_S6_S6_PKfPfS9_S9_: argument 2"}
!279 = distinct !{!279, !272, !"_ZN3jxl6N_SSE414LinearRGBToXYBIN3hwy6N_SSE46Vec128IfLm4EEEEEvT_S6_S6_PKfPfS9_S9_: argument 3"}
!280 = !{!281, !269, !271}
!281 = distinct !{!281, !282, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!282 = distinct !{!282, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!283 = !{!284, !269, !271}
!284 = distinct !{!284, !285, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!285 = distinct !{!285, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!286 = !{!287, !269, !271}
!287 = distinct !{!287, !288, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!288 = distinct !{!288, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!289 = !{!290, !269, !271}
!290 = distinct !{!290, !291, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!291 = distinct !{!291, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!292 = !{!293, !269, !271}
!293 = distinct !{!293, !294, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!294 = distinct !{!294, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!295 = !{!296, !269, !271}
!296 = distinct !{!296, !297, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!297 = distinct !{!297, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!298 = !{!299, !269, !271}
!299 = distinct !{!299, !300, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!300 = distinct !{!300, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!301 = !{!302, !269, !271}
!302 = distinct !{!302, !303, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!303 = distinct !{!303, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!304 = !{!305, !271}
!305 = distinct !{!305, !306, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!306 = distinct !{!306, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!307 = !{!277, !278, !279}
!308 = !{!309, !271}
!309 = distinct !{!309, !310, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!310 = distinct !{!310, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!311 = !{!312, !271}
!312 = distinct !{!312, !313, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!313 = distinct !{!313, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!314 = !{!315, !317, !277}
!315 = distinct !{!315, !316, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf: argument 0"}
!316 = distinct !{!316, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf"}
!317 = distinct !{!317, !318, !"_ZN3jxl6N_SSE48StoreXYBIN3hwy6N_SSE46Vec128IfLm4EEEEEvT_S6_S6_PfS7_S7_: argument 0"}
!318 = distinct !{!318, !"_ZN3jxl6N_SSE48StoreXYBIN3hwy6N_SSE46Vec128IfLm4EEEEEvT_S6_S6_PfS7_S7_"}
!319 = !{!320, !321, !271, !278, !279}
!320 = distinct !{!320, !318, !"_ZN3jxl6N_SSE48StoreXYBIN3hwy6N_SSE46Vec128IfLm4EEEEEvT_S6_S6_PfS7_S7_: argument 1"}
!321 = distinct !{!321, !318, !"_ZN3jxl6N_SSE48StoreXYBIN3hwy6N_SSE46Vec128IfLm4EEEEEvT_S6_S6_PfS7_S7_: argument 2"}
!322 = !{!323, !320, !278}
!323 = distinct !{!323, !324, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf: argument 0"}
!324 = distinct !{!324, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf"}
!325 = !{!317, !321, !271, !277, !279}
!326 = !{!327, !321, !279}
!327 = distinct !{!327, !328, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf: argument 0"}
!328 = distinct !{!328, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf"}
!329 = !{!317, !320, !271, !277, !278}
!330 = !{!331}
!331 = distinct !{!331, !332, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!332 = distinct !{!332, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!333 = !{!334}
!334 = distinct !{!334, !335, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!335 = distinct !{!335, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!336 = !{!337}
!337 = distinct !{!337, !338, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!338 = distinct !{!338, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!339 = !{!340}
!340 = distinct !{!340, !341, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf: argument 0"}
!341 = distinct !{!341, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf"}
!342 = !{!343}
!343 = distinct !{!343, !344, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf: argument 0"}
!344 = distinct !{!344, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf"}
!345 = !{!346}
!346 = distinct !{!346, !347, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf: argument 0"}
!347 = distinct !{!347, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf"}
!348 = !{!349}
!349 = distinct !{!349, !350, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!350 = distinct !{!350, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!351 = !{!352}
!352 = distinct !{!352, !350, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!353 = !{!354}
!354 = distinct !{!354, !355, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!355 = distinct !{!355, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!356 = !{!357}
!357 = distinct !{!357, !355, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!358 = !{!359}
!359 = distinct !{!359, !360, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!360 = distinct !{!360, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!361 = !{!362}
!362 = distinct !{!362, !360, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!363 = !{!364, !366, !368}
!364 = distinct !{!364, !365, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!365 = distinct !{!365, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!366 = distinct !{!366, !367, !"_ZN3jxl6N_AVX215OpsinAbsorbanceIN3hwy6N_AVX26Vec256IfEEEEvT_S6_S6_PKfPS6_S9_S9_: argument 0"}
!367 = distinct !{!367, !"_ZN3jxl6N_AVX215OpsinAbsorbanceIN3hwy6N_AVX26Vec256IfEEEEvT_S6_S6_PKfPS6_S9_S9_"}
!368 = distinct !{!368, !369, !"_ZN3jxl6N_AVX214LinearRGBToXYBIN3hwy6N_AVX26Vec256IfEEEEvT_S6_S6_PKfPfS9_S9_: argument 0"}
!369 = distinct !{!369, !"_ZN3jxl6N_AVX214LinearRGBToXYBIN3hwy6N_AVX26Vec256IfEEEEvT_S6_S6_PKfPfS9_S9_"}
!370 = !{!371, !372, !373, !374, !375, !376, !377}
!371 = distinct !{!371, !365, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!372 = distinct !{!372, !367, !"_ZN3jxl6N_AVX215OpsinAbsorbanceIN3hwy6N_AVX26Vec256IfEEEEvT_S6_S6_PKfPS6_S9_S9_: argument 1"}
!373 = distinct !{!373, !367, !"_ZN3jxl6N_AVX215OpsinAbsorbanceIN3hwy6N_AVX26Vec256IfEEEEvT_S6_S6_PKfPS6_S9_S9_: argument 2"}
!374 = distinct !{!374, !367, !"_ZN3jxl6N_AVX215OpsinAbsorbanceIN3hwy6N_AVX26Vec256IfEEEEvT_S6_S6_PKfPS6_S9_S9_: argument 3"}
!375 = distinct !{!375, !369, !"_ZN3jxl6N_AVX214LinearRGBToXYBIN3hwy6N_AVX26Vec256IfEEEEvT_S6_S6_PKfPfS9_S9_: argument 1"}
!376 = distinct !{!376, !369, !"_ZN3jxl6N_AVX214LinearRGBToXYBIN3hwy6N_AVX26Vec256IfEEEEvT_S6_S6_PKfPfS9_S9_: argument 2"}
!377 = distinct !{!377, !369, !"_ZN3jxl6N_AVX214LinearRGBToXYBIN3hwy6N_AVX26Vec256IfEEEEvT_S6_S6_PKfPfS9_S9_: argument 3"}
!378 = !{!379, !366, !368}
!379 = distinct !{!379, !380, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!380 = distinct !{!380, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!381 = !{!382, !372, !373, !374, !375, !376, !377}
!382 = distinct !{!382, !380, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!383 = !{!384, !366, !368}
!384 = distinct !{!384, !385, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!385 = distinct !{!385, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!386 = !{!387, !372, !373, !374, !375, !376, !377}
!387 = distinct !{!387, !385, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!388 = !{!389, !366, !368}
!389 = distinct !{!389, !390, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!390 = distinct !{!390, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!391 = !{!392, !372, !373, !374, !375, !376, !377}
!392 = distinct !{!392, !390, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!393 = !{!394, !366, !368}
!394 = distinct !{!394, !395, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!395 = distinct !{!395, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!396 = !{!397, !372, !373, !374, !375, !376, !377}
!397 = distinct !{!397, !395, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!398 = !{!399, !366, !368}
!399 = distinct !{!399, !400, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!400 = distinct !{!400, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!401 = !{!402, !372, !373, !374, !375, !376, !377}
!402 = distinct !{!402, !400, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!403 = !{!404, !366, !368}
!404 = distinct !{!404, !405, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!405 = distinct !{!405, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!406 = !{!407, !372, !373, !374, !375, !376, !377}
!407 = distinct !{!407, !405, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!408 = !{!409, !366, !368}
!409 = distinct !{!409, !410, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!410 = distinct !{!410, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!411 = !{!412, !372, !373, !374, !375, !376, !377}
!412 = distinct !{!412, !410, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!413 = !{!414, !366, !368}
!414 = distinct !{!414, !415, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!415 = distinct !{!415, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!416 = !{!417, !372, !373, !374, !375, !376, !377}
!417 = distinct !{!417, !415, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!418 = !{!419, !368}
!419 = distinct !{!419, !420, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!420 = distinct !{!420, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!421 = !{!422, !375, !376, !377}
!422 = distinct !{!422, !420, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!423 = !{!424, !368}
!424 = distinct !{!424, !425, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!425 = distinct !{!425, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!426 = !{!427, !375, !376, !377}
!427 = distinct !{!427, !425, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!428 = !{!429, !368}
!429 = distinct !{!429, !430, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!430 = distinct !{!430, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!431 = !{!432, !375, !376, !377}
!432 = distinct !{!432, !430, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!433 = !{!434, !436, !375}
!434 = distinct !{!434, !435, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf: argument 0"}
!435 = distinct !{!435, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf"}
!436 = distinct !{!436, !437, !"_ZN3jxl6N_AVX28StoreXYBIN3hwy6N_AVX26Vec256IfEEEEvT_S6_S6_PfS7_S7_: argument 0"}
!437 = distinct !{!437, !"_ZN3jxl6N_AVX28StoreXYBIN3hwy6N_AVX26Vec256IfEEEEvT_S6_S6_PfS7_S7_"}
!438 = !{!439, !440, !368, !376, !377}
!439 = distinct !{!439, !437, !"_ZN3jxl6N_AVX28StoreXYBIN3hwy6N_AVX26Vec256IfEEEEvT_S6_S6_PfS7_S7_: argument 1"}
!440 = distinct !{!440, !437, !"_ZN3jxl6N_AVX28StoreXYBIN3hwy6N_AVX26Vec256IfEEEEvT_S6_S6_PfS7_S7_: argument 2"}
!441 = !{!442, !439, !376}
!442 = distinct !{!442, !443, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf: argument 0"}
!443 = distinct !{!443, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf"}
!444 = !{!436, !440, !368, !375, !377}
!445 = !{!446, !440, !377}
!446 = distinct !{!446, !447, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf: argument 0"}
!447 = distinct !{!447, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf"}
!448 = !{!436, !439, !368, !375, !376}
!449 = !{!450}
!450 = distinct !{!450, !451, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!451 = distinct !{!451, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!452 = !{!453}
!453 = distinct !{!453, !451, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!454 = !{!455}
!455 = distinct !{!455, !456, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!456 = distinct !{!456, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!457 = !{!458}
!458 = distinct !{!458, !456, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!459 = !{!460}
!460 = distinct !{!460, !461, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!461 = distinct !{!461, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!462 = !{!463}
!463 = distinct !{!463, !461, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!464 = !{!465, !467, !469}
!465 = distinct !{!465, !466, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!466 = distinct !{!466, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!467 = distinct !{!467, !468, !"_ZN3jxl6N_AVX215OpsinAbsorbanceIN3hwy6N_AVX26Vec256IfEEEEvT_S6_S6_PKfPS6_S9_S9_: argument 0"}
!468 = distinct !{!468, !"_ZN3jxl6N_AVX215OpsinAbsorbanceIN3hwy6N_AVX26Vec256IfEEEEvT_S6_S6_PKfPS6_S9_S9_"}
!469 = distinct !{!469, !470, !"_ZN3jxl6N_AVX214LinearRGBToXYBIN3hwy6N_AVX26Vec256IfEEEEvT_S6_S6_PKfPfS9_S9_: argument 0"}
!470 = distinct !{!470, !"_ZN3jxl6N_AVX214LinearRGBToXYBIN3hwy6N_AVX26Vec256IfEEEEvT_S6_S6_PKfPfS9_S9_"}
!471 = !{!472, !473, !474, !475, !476, !477, !478}
!472 = distinct !{!472, !466, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!473 = distinct !{!473, !468, !"_ZN3jxl6N_AVX215OpsinAbsorbanceIN3hwy6N_AVX26Vec256IfEEEEvT_S6_S6_PKfPS6_S9_S9_: argument 1"}
!474 = distinct !{!474, !468, !"_ZN3jxl6N_AVX215OpsinAbsorbanceIN3hwy6N_AVX26Vec256IfEEEEvT_S6_S6_PKfPS6_S9_S9_: argument 2"}
!475 = distinct !{!475, !468, !"_ZN3jxl6N_AVX215OpsinAbsorbanceIN3hwy6N_AVX26Vec256IfEEEEvT_S6_S6_PKfPS6_S9_S9_: argument 3"}
!476 = distinct !{!476, !470, !"_ZN3jxl6N_AVX214LinearRGBToXYBIN3hwy6N_AVX26Vec256IfEEEEvT_S6_S6_PKfPfS9_S9_: argument 1"}
!477 = distinct !{!477, !470, !"_ZN3jxl6N_AVX214LinearRGBToXYBIN3hwy6N_AVX26Vec256IfEEEEvT_S6_S6_PKfPfS9_S9_: argument 2"}
!478 = distinct !{!478, !470, !"_ZN3jxl6N_AVX214LinearRGBToXYBIN3hwy6N_AVX26Vec256IfEEEEvT_S6_S6_PKfPfS9_S9_: argument 3"}
!479 = !{!480, !467, !469}
!480 = distinct !{!480, !481, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!481 = distinct !{!481, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!482 = !{!483, !473, !474, !475, !476, !477, !478}
!483 = distinct !{!483, !481, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!484 = !{!485, !467, !469}
!485 = distinct !{!485, !486, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!486 = distinct !{!486, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!487 = !{!488, !473, !474, !475, !476, !477, !478}
!488 = distinct !{!488, !486, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!489 = !{!490, !467, !469}
!490 = distinct !{!490, !491, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!491 = distinct !{!491, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!492 = !{!493, !473, !474, !475, !476, !477, !478}
!493 = distinct !{!493, !491, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!494 = !{!495, !467, !469}
!495 = distinct !{!495, !496, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!496 = distinct !{!496, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!497 = !{!498, !473, !474, !475, !476, !477, !478}
!498 = distinct !{!498, !496, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!499 = !{!500, !467, !469}
!500 = distinct !{!500, !501, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!501 = distinct !{!501, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!502 = !{!503, !473, !474, !475, !476, !477, !478}
!503 = distinct !{!503, !501, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!504 = !{!505, !467, !469}
!505 = distinct !{!505, !506, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!506 = distinct !{!506, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!507 = !{!508, !473, !474, !475, !476, !477, !478}
!508 = distinct !{!508, !506, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!509 = !{!510, !467, !469}
!510 = distinct !{!510, !511, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!511 = distinct !{!511, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!512 = !{!513, !473, !474, !475, !476, !477, !478}
!513 = distinct !{!513, !511, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!514 = !{!515, !467, !469}
!515 = distinct !{!515, !516, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!516 = distinct !{!516, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!517 = !{!518, !473, !474, !475, !476, !477, !478}
!518 = distinct !{!518, !516, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!519 = !{!520, !469}
!520 = distinct !{!520, !521, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!521 = distinct !{!521, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!522 = !{!523, !476, !477, !478}
!523 = distinct !{!523, !521, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!524 = !{!525, !469}
!525 = distinct !{!525, !526, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!526 = distinct !{!526, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!527 = !{!528, !476, !477, !478}
!528 = distinct !{!528, !526, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!529 = !{!530, !469}
!530 = distinct !{!530, !531, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!531 = distinct !{!531, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!532 = !{!533, !476, !477, !478}
!533 = distinct !{!533, !531, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!534 = !{!535, !537, !476}
!535 = distinct !{!535, !536, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf: argument 0"}
!536 = distinct !{!536, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf"}
!537 = distinct !{!537, !538, !"_ZN3jxl6N_AVX28StoreXYBIN3hwy6N_AVX26Vec256IfEEEEvT_S6_S6_PfS7_S7_: argument 0"}
!538 = distinct !{!538, !"_ZN3jxl6N_AVX28StoreXYBIN3hwy6N_AVX26Vec256IfEEEEvT_S6_S6_PfS7_S7_"}
!539 = !{!540, !541, !469, !477, !478}
!540 = distinct !{!540, !538, !"_ZN3jxl6N_AVX28StoreXYBIN3hwy6N_AVX26Vec256IfEEEEvT_S6_S6_PfS7_S7_: argument 1"}
!541 = distinct !{!541, !538, !"_ZN3jxl6N_AVX28StoreXYBIN3hwy6N_AVX26Vec256IfEEEEvT_S6_S6_PfS7_S7_: argument 2"}
!542 = !{!543, !540, !477}
!543 = distinct !{!543, !544, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf: argument 0"}
!544 = distinct !{!544, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf"}
!545 = !{!537, !541, !469, !476, !478}
!546 = !{!547, !541, !478}
!547 = distinct !{!547, !548, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf: argument 0"}
!548 = distinct !{!548, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf"}
!549 = !{!537, !540, !469, !476, !477}
!550 = !{!551}
!551 = distinct !{!551, !552, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!552 = distinct !{!552, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!553 = !{!554}
!554 = distinct !{!554, !552, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!555 = !{!556}
!556 = distinct !{!556, !557, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!557 = distinct !{!557, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!558 = !{!559}
!559 = distinct !{!559, !557, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!560 = !{!561}
!561 = distinct !{!561, !562, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!562 = distinct !{!562, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!563 = !{!564}
!564 = distinct !{!564, !562, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!565 = !{!566}
!566 = distinct !{!566, !567, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf: argument 0"}
!567 = distinct !{!567, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf"}
!568 = !{!569}
!569 = distinct !{!569, !570, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf: argument 0"}
!570 = distinct !{!570, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf"}
!571 = !{!572}
!572 = distinct !{!572, !573, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf: argument 0"}
!573 = distinct !{!573, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf"}
!574 = !{!575, !577, !579}
!575 = distinct !{!575, !576, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!576 = distinct !{!576, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!577 = distinct !{!577, !578, !"_ZN3jxl6N_AVX215OpsinAbsorbanceIN3hwy6N_AVX26Vec256IfEEEEvT_S6_S6_PKfPS6_S9_S9_: argument 0"}
!578 = distinct !{!578, !"_ZN3jxl6N_AVX215OpsinAbsorbanceIN3hwy6N_AVX26Vec256IfEEEEvT_S6_S6_PKfPS6_S9_S9_"}
!579 = distinct !{!579, !580, !"_ZN3jxl6N_AVX214LinearRGBToXYBIN3hwy6N_AVX26Vec256IfEEEEvT_S6_S6_PKfPfS9_S9_: argument 0"}
!580 = distinct !{!580, !"_ZN3jxl6N_AVX214LinearRGBToXYBIN3hwy6N_AVX26Vec256IfEEEEvT_S6_S6_PKfPfS9_S9_"}
!581 = !{!582, !583, !584, !585, !586, !587, !588}
!582 = distinct !{!582, !576, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!583 = distinct !{!583, !578, !"_ZN3jxl6N_AVX215OpsinAbsorbanceIN3hwy6N_AVX26Vec256IfEEEEvT_S6_S6_PKfPS6_S9_S9_: argument 1"}
!584 = distinct !{!584, !578, !"_ZN3jxl6N_AVX215OpsinAbsorbanceIN3hwy6N_AVX26Vec256IfEEEEvT_S6_S6_PKfPS6_S9_S9_: argument 2"}
!585 = distinct !{!585, !578, !"_ZN3jxl6N_AVX215OpsinAbsorbanceIN3hwy6N_AVX26Vec256IfEEEEvT_S6_S6_PKfPS6_S9_S9_: argument 3"}
!586 = distinct !{!586, !580, !"_ZN3jxl6N_AVX214LinearRGBToXYBIN3hwy6N_AVX26Vec256IfEEEEvT_S6_S6_PKfPfS9_S9_: argument 1"}
!587 = distinct !{!587, !580, !"_ZN3jxl6N_AVX214LinearRGBToXYBIN3hwy6N_AVX26Vec256IfEEEEvT_S6_S6_PKfPfS9_S9_: argument 2"}
!588 = distinct !{!588, !580, !"_ZN3jxl6N_AVX214LinearRGBToXYBIN3hwy6N_AVX26Vec256IfEEEEvT_S6_S6_PKfPfS9_S9_: argument 3"}
!589 = !{!590, !577, !579}
!590 = distinct !{!590, !591, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!591 = distinct !{!591, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!592 = !{!593, !583, !584, !585, !586, !587, !588}
!593 = distinct !{!593, !591, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!594 = !{!595, !577, !579}
!595 = distinct !{!595, !596, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!596 = distinct !{!596, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!597 = !{!598, !583, !584, !585, !586, !587, !588}
!598 = distinct !{!598, !596, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!599 = !{!600, !577, !579}
!600 = distinct !{!600, !601, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!601 = distinct !{!601, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!602 = !{!603, !583, !584, !585, !586, !587, !588}
!603 = distinct !{!603, !601, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!604 = !{!605, !577, !579}
!605 = distinct !{!605, !606, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!606 = distinct !{!606, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!607 = !{!608, !583, !584, !585, !586, !587, !588}
!608 = distinct !{!608, !606, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!609 = !{!610, !577, !579}
!610 = distinct !{!610, !611, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!611 = distinct !{!611, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!612 = !{!613, !583, !584, !585, !586, !587, !588}
!613 = distinct !{!613, !611, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!614 = !{!615, !577, !579}
!615 = distinct !{!615, !616, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!616 = distinct !{!616, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!617 = !{!618, !583, !584, !585, !586, !587, !588}
!618 = distinct !{!618, !616, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!619 = !{!620, !577, !579}
!620 = distinct !{!620, !621, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!621 = distinct !{!621, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!622 = !{!623, !583, !584, !585, !586, !587, !588}
!623 = distinct !{!623, !621, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!624 = !{!625, !577, !579}
!625 = distinct !{!625, !626, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!626 = distinct !{!626, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!627 = !{!628, !583, !584, !585, !586, !587, !588}
!628 = distinct !{!628, !626, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!629 = !{!630, !579}
!630 = distinct !{!630, !631, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!631 = distinct !{!631, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!632 = !{!633, !586, !587, !588}
!633 = distinct !{!633, !631, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!634 = !{!635, !579}
!635 = distinct !{!635, !636, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!636 = distinct !{!636, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!637 = !{!638, !586, !587, !588}
!638 = distinct !{!638, !636, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!639 = !{!640, !579}
!640 = distinct !{!640, !641, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!641 = distinct !{!641, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!642 = !{!643, !586, !587, !588}
!643 = distinct !{!643, !641, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!644 = !{!645, !647, !586}
!645 = distinct !{!645, !646, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf: argument 0"}
!646 = distinct !{!646, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf"}
!647 = distinct !{!647, !648, !"_ZN3jxl6N_AVX28StoreXYBIN3hwy6N_AVX26Vec256IfEEEEvT_S6_S6_PfS7_S7_: argument 0"}
!648 = distinct !{!648, !"_ZN3jxl6N_AVX28StoreXYBIN3hwy6N_AVX26Vec256IfEEEEvT_S6_S6_PfS7_S7_"}
!649 = !{!650, !651, !579, !587, !588}
!650 = distinct !{!650, !648, !"_ZN3jxl6N_AVX28StoreXYBIN3hwy6N_AVX26Vec256IfEEEEvT_S6_S6_PfS7_S7_: argument 1"}
!651 = distinct !{!651, !648, !"_ZN3jxl6N_AVX28StoreXYBIN3hwy6N_AVX26Vec256IfEEEEvT_S6_S6_PfS7_S7_: argument 2"}
!652 = !{!653, !650, !587}
!653 = distinct !{!653, !654, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf: argument 0"}
!654 = distinct !{!654, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf"}
!655 = !{!647, !651, !579, !586, !588}
!656 = !{!657, !651, !588}
!657 = distinct !{!657, !658, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf: argument 0"}
!658 = distinct !{!658, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf"}
!659 = !{!647, !650, !579, !586, !587}
!660 = !{!661}
!661 = distinct !{!661, !662, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!662 = distinct !{!662, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!663 = !{!664}
!664 = distinct !{!664, !662, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!665 = !{!666}
!666 = distinct !{!666, !667, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!667 = distinct !{!667, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!668 = !{!669}
!669 = distinct !{!669, !667, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!670 = !{!671}
!671 = distinct !{!671, !672, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!672 = distinct !{!672, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!673 = !{!674}
!674 = distinct !{!674, !672, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!675 = !{!676}
!676 = distinct !{!676, !677, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf: argument 0"}
!677 = distinct !{!677, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf"}
!678 = !{!679}
!679 = distinct !{!679, !680, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf: argument 0"}
!680 = distinct !{!680, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf"}
!681 = !{!682}
!682 = distinct !{!682, !683, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf: argument 0"}
!683 = distinct !{!683, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf"}
!684 = !{!685}
!685 = distinct !{!685, !686, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 1"}
!686 = distinct !{!686, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf"}
!687 = !{!688}
!688 = distinct !{!688, !686, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 0"}
!689 = !{!690}
!690 = distinct !{!690, !691, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 1"}
!691 = distinct !{!691, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf"}
!692 = !{!693}
!693 = distinct !{!693, !691, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 0"}
!694 = !{!695}
!695 = distinct !{!695, !696, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 1"}
!696 = distinct !{!696, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf"}
!697 = !{!698}
!698 = distinct !{!698, !696, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 0"}
!699 = !{!700, !702, !704}
!700 = distinct !{!700, !701, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 1"}
!701 = distinct !{!701, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf"}
!702 = distinct !{!702, !703, !"_ZN3jxl6N_AVX315OpsinAbsorbanceIN3hwy6N_AVX36Vec512IfEEEEvT_S6_S6_PKfPS6_S9_S9_: argument 0"}
!703 = distinct !{!703, !"_ZN3jxl6N_AVX315OpsinAbsorbanceIN3hwy6N_AVX36Vec512IfEEEEvT_S6_S6_PKfPS6_S9_S9_"}
!704 = distinct !{!704, !705, !"_ZN3jxl6N_AVX314LinearRGBToXYBIN3hwy6N_AVX36Vec512IfEEEEvT_S6_S6_PKfPfS9_S9_: argument 0"}
!705 = distinct !{!705, !"_ZN3jxl6N_AVX314LinearRGBToXYBIN3hwy6N_AVX36Vec512IfEEEEvT_S6_S6_PKfPfS9_S9_"}
!706 = !{!707, !708, !709, !710, !711, !712, !713}
!707 = distinct !{!707, !701, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 0"}
!708 = distinct !{!708, !703, !"_ZN3jxl6N_AVX315OpsinAbsorbanceIN3hwy6N_AVX36Vec512IfEEEEvT_S6_S6_PKfPS6_S9_S9_: argument 1"}
!709 = distinct !{!709, !703, !"_ZN3jxl6N_AVX315OpsinAbsorbanceIN3hwy6N_AVX36Vec512IfEEEEvT_S6_S6_PKfPS6_S9_S9_: argument 2"}
!710 = distinct !{!710, !703, !"_ZN3jxl6N_AVX315OpsinAbsorbanceIN3hwy6N_AVX36Vec512IfEEEEvT_S6_S6_PKfPS6_S9_S9_: argument 3"}
!711 = distinct !{!711, !705, !"_ZN3jxl6N_AVX314LinearRGBToXYBIN3hwy6N_AVX36Vec512IfEEEEvT_S6_S6_PKfPfS9_S9_: argument 1"}
!712 = distinct !{!712, !705, !"_ZN3jxl6N_AVX314LinearRGBToXYBIN3hwy6N_AVX36Vec512IfEEEEvT_S6_S6_PKfPfS9_S9_: argument 2"}
!713 = distinct !{!713, !705, !"_ZN3jxl6N_AVX314LinearRGBToXYBIN3hwy6N_AVX36Vec512IfEEEEvT_S6_S6_PKfPfS9_S9_: argument 3"}
!714 = !{!715, !702, !704}
!715 = distinct !{!715, !716, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 1"}
!716 = distinct !{!716, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf"}
!717 = !{!718, !708, !709, !710, !711, !712, !713}
!718 = distinct !{!718, !716, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 0"}
!719 = !{!720, !702, !704}
!720 = distinct !{!720, !721, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 1"}
!721 = distinct !{!721, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf"}
!722 = !{!723, !708, !709, !710, !711, !712, !713}
!723 = distinct !{!723, !721, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 0"}
!724 = !{!725, !702, !704}
!725 = distinct !{!725, !726, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 1"}
!726 = distinct !{!726, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf"}
!727 = !{!728, !708, !709, !710, !711, !712, !713}
!728 = distinct !{!728, !726, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 0"}
!729 = !{!730, !702, !704}
!730 = distinct !{!730, !731, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 1"}
!731 = distinct !{!731, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf"}
!732 = !{!733, !708, !709, !710, !711, !712, !713}
!733 = distinct !{!733, !731, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 0"}
!734 = !{!735, !702, !704}
!735 = distinct !{!735, !736, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 1"}
!736 = distinct !{!736, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf"}
!737 = !{!738, !708, !709, !710, !711, !712, !713}
!738 = distinct !{!738, !736, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 0"}
!739 = !{!740, !702, !704}
!740 = distinct !{!740, !741, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 1"}
!741 = distinct !{!741, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf"}
!742 = !{!743, !708, !709, !710, !711, !712, !713}
!743 = distinct !{!743, !741, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 0"}
!744 = !{!745, !702, !704}
!745 = distinct !{!745, !746, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 1"}
!746 = distinct !{!746, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf"}
!747 = !{!748, !708, !709, !710, !711, !712, !713}
!748 = distinct !{!748, !746, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 0"}
!749 = !{!750, !702, !704}
!750 = distinct !{!750, !751, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 1"}
!751 = distinct !{!751, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf"}
!752 = !{!753, !708, !709, !710, !711, !712, !713}
!753 = distinct !{!753, !751, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 0"}
!754 = !{!755, !704}
!755 = distinct !{!755, !756, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 1"}
!756 = distinct !{!756, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf"}
!757 = !{!758, !711, !712, !713}
!758 = distinct !{!758, !756, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 0"}
!759 = !{!760, !704}
!760 = distinct !{!760, !761, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 1"}
!761 = distinct !{!761, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf"}
!762 = !{!763, !711, !712, !713}
!763 = distinct !{!763, !761, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 0"}
!764 = !{!765, !704}
!765 = distinct !{!765, !766, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 1"}
!766 = distinct !{!766, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf"}
!767 = !{!768, !711, !712, !713}
!768 = distinct !{!768, !766, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 0"}
!769 = !{!770, !772, !711}
!770 = distinct !{!770, !771, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec512IfEENS0_4SimdIfLm16EEEPf: argument 0"}
!771 = distinct !{!771, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec512IfEENS0_4SimdIfLm16EEEPf"}
!772 = distinct !{!772, !773, !"_ZN3jxl6N_AVX38StoreXYBIN3hwy6N_AVX36Vec512IfEEEEvT_S6_S6_PfS7_S7_: argument 0"}
!773 = distinct !{!773, !"_ZN3jxl6N_AVX38StoreXYBIN3hwy6N_AVX36Vec512IfEEEEvT_S6_S6_PfS7_S7_"}
!774 = !{!775, !776, !704, !712, !713}
!775 = distinct !{!775, !773, !"_ZN3jxl6N_AVX38StoreXYBIN3hwy6N_AVX36Vec512IfEEEEvT_S6_S6_PfS7_S7_: argument 1"}
!776 = distinct !{!776, !773, !"_ZN3jxl6N_AVX38StoreXYBIN3hwy6N_AVX36Vec512IfEEEEvT_S6_S6_PfS7_S7_: argument 2"}
!777 = !{!778, !775, !712}
!778 = distinct !{!778, !779, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec512IfEENS0_4SimdIfLm16EEEPf: argument 0"}
!779 = distinct !{!779, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec512IfEENS0_4SimdIfLm16EEEPf"}
!780 = !{!772, !776, !704, !711, !713}
!781 = !{!782, !776, !713}
!782 = distinct !{!782, !783, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec512IfEENS0_4SimdIfLm16EEEPf: argument 0"}
!783 = distinct !{!783, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec512IfEENS0_4SimdIfLm16EEEPf"}
!784 = !{!772, !775, !704, !711, !712}
!785 = !{!786}
!786 = distinct !{!786, !787, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 1"}
!787 = distinct !{!787, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf"}
!788 = !{!789}
!789 = distinct !{!789, !787, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 0"}
!790 = !{!791}
!791 = distinct !{!791, !792, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 1"}
!792 = distinct !{!792, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf"}
!793 = !{!794}
!794 = distinct !{!794, !792, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 0"}
!795 = !{!796}
!796 = distinct !{!796, !797, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 1"}
!797 = distinct !{!797, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf"}
!798 = !{!799}
!799 = distinct !{!799, !797, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 0"}
!800 = !{!801, !803, !805}
!801 = distinct !{!801, !802, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 1"}
!802 = distinct !{!802, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf"}
!803 = distinct !{!803, !804, !"_ZN3jxl6N_AVX315OpsinAbsorbanceIN3hwy6N_AVX36Vec512IfEEEEvT_S6_S6_PKfPS6_S9_S9_: argument 0"}
!804 = distinct !{!804, !"_ZN3jxl6N_AVX315OpsinAbsorbanceIN3hwy6N_AVX36Vec512IfEEEEvT_S6_S6_PKfPS6_S9_S9_"}
!805 = distinct !{!805, !806, !"_ZN3jxl6N_AVX314LinearRGBToXYBIN3hwy6N_AVX36Vec512IfEEEEvT_S6_S6_PKfPfS9_S9_: argument 0"}
!806 = distinct !{!806, !"_ZN3jxl6N_AVX314LinearRGBToXYBIN3hwy6N_AVX36Vec512IfEEEEvT_S6_S6_PKfPfS9_S9_"}
!807 = !{!808, !809, !810, !811, !812, !813, !814}
!808 = distinct !{!808, !802, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 0"}
!809 = distinct !{!809, !804, !"_ZN3jxl6N_AVX315OpsinAbsorbanceIN3hwy6N_AVX36Vec512IfEEEEvT_S6_S6_PKfPS6_S9_S9_: argument 1"}
!810 = distinct !{!810, !804, !"_ZN3jxl6N_AVX315OpsinAbsorbanceIN3hwy6N_AVX36Vec512IfEEEEvT_S6_S6_PKfPS6_S9_S9_: argument 2"}
!811 = distinct !{!811, !804, !"_ZN3jxl6N_AVX315OpsinAbsorbanceIN3hwy6N_AVX36Vec512IfEEEEvT_S6_S6_PKfPS6_S9_S9_: argument 3"}
!812 = distinct !{!812, !806, !"_ZN3jxl6N_AVX314LinearRGBToXYBIN3hwy6N_AVX36Vec512IfEEEEvT_S6_S6_PKfPfS9_S9_: argument 1"}
!813 = distinct !{!813, !806, !"_ZN3jxl6N_AVX314LinearRGBToXYBIN3hwy6N_AVX36Vec512IfEEEEvT_S6_S6_PKfPfS9_S9_: argument 2"}
!814 = distinct !{!814, !806, !"_ZN3jxl6N_AVX314LinearRGBToXYBIN3hwy6N_AVX36Vec512IfEEEEvT_S6_S6_PKfPfS9_S9_: argument 3"}
!815 = !{!816, !803, !805}
!816 = distinct !{!816, !817, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 1"}
!817 = distinct !{!817, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf"}
!818 = !{!819, !809, !810, !811, !812, !813, !814}
!819 = distinct !{!819, !817, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 0"}
!820 = !{!821, !803, !805}
!821 = distinct !{!821, !822, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 1"}
!822 = distinct !{!822, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf"}
!823 = !{!824, !809, !810, !811, !812, !813, !814}
!824 = distinct !{!824, !822, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 0"}
!825 = !{!826, !803, !805}
!826 = distinct !{!826, !827, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 1"}
!827 = distinct !{!827, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf"}
!828 = !{!829, !809, !810, !811, !812, !813, !814}
!829 = distinct !{!829, !827, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 0"}
!830 = !{!831, !803, !805}
!831 = distinct !{!831, !832, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 1"}
!832 = distinct !{!832, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf"}
!833 = !{!834, !809, !810, !811, !812, !813, !814}
!834 = distinct !{!834, !832, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 0"}
!835 = !{!836, !803, !805}
!836 = distinct !{!836, !837, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 1"}
!837 = distinct !{!837, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf"}
!838 = !{!839, !809, !810, !811, !812, !813, !814}
!839 = distinct !{!839, !837, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 0"}
!840 = !{!841, !803, !805}
!841 = distinct !{!841, !842, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 1"}
!842 = distinct !{!842, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf"}
!843 = !{!844, !809, !810, !811, !812, !813, !814}
!844 = distinct !{!844, !842, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 0"}
!845 = !{!846, !803, !805}
!846 = distinct !{!846, !847, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 1"}
!847 = distinct !{!847, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf"}
!848 = !{!849, !809, !810, !811, !812, !813, !814}
!849 = distinct !{!849, !847, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 0"}
!850 = !{!851, !803, !805}
!851 = distinct !{!851, !852, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 1"}
!852 = distinct !{!852, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf"}
!853 = !{!854, !809, !810, !811, !812, !813, !814}
!854 = distinct !{!854, !852, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 0"}
!855 = !{!856, !805}
!856 = distinct !{!856, !857, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 1"}
!857 = distinct !{!857, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf"}
!858 = !{!859, !812, !813, !814}
!859 = distinct !{!859, !857, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 0"}
!860 = !{!861, !805}
!861 = distinct !{!861, !862, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 1"}
!862 = distinct !{!862, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf"}
!863 = !{!864, !812, !813, !814}
!864 = distinct !{!864, !862, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 0"}
!865 = !{!866, !805}
!866 = distinct !{!866, !867, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 1"}
!867 = distinct !{!867, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf"}
!868 = !{!869, !812, !813, !814}
!869 = distinct !{!869, !867, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 0"}
!870 = !{!871, !873, !812}
!871 = distinct !{!871, !872, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec512IfEENS0_4SimdIfLm16EEEPf: argument 0"}
!872 = distinct !{!872, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec512IfEENS0_4SimdIfLm16EEEPf"}
!873 = distinct !{!873, !874, !"_ZN3jxl6N_AVX38StoreXYBIN3hwy6N_AVX36Vec512IfEEEEvT_S6_S6_PfS7_S7_: argument 0"}
!874 = distinct !{!874, !"_ZN3jxl6N_AVX38StoreXYBIN3hwy6N_AVX36Vec512IfEEEEvT_S6_S6_PfS7_S7_"}
!875 = !{!876, !877, !805, !813, !814}
!876 = distinct !{!876, !874, !"_ZN3jxl6N_AVX38StoreXYBIN3hwy6N_AVX36Vec512IfEEEEvT_S6_S6_PfS7_S7_: argument 1"}
!877 = distinct !{!877, !874, !"_ZN3jxl6N_AVX38StoreXYBIN3hwy6N_AVX36Vec512IfEEEEvT_S6_S6_PfS7_S7_: argument 2"}
!878 = !{!879, !876, !813}
!879 = distinct !{!879, !880, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec512IfEENS0_4SimdIfLm16EEEPf: argument 0"}
!880 = distinct !{!880, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec512IfEENS0_4SimdIfLm16EEEPf"}
!881 = !{!873, !877, !805, !812, !814}
!882 = !{!883, !877, !814}
!883 = distinct !{!883, !884, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec512IfEENS0_4SimdIfLm16EEEPf: argument 0"}
!884 = distinct !{!884, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec512IfEENS0_4SimdIfLm16EEEPf"}
!885 = !{!873, !876, !805, !812, !813}
!886 = !{!887}
!887 = distinct !{!887, !888, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 1"}
!888 = distinct !{!888, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf"}
!889 = !{!890}
!890 = distinct !{!890, !888, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 0"}
!891 = !{!892}
!892 = distinct !{!892, !893, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 1"}
!893 = distinct !{!893, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf"}
!894 = !{!895}
!895 = distinct !{!895, !893, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 0"}
!896 = !{!897}
!897 = distinct !{!897, !898, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 1"}
!898 = distinct !{!898, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf"}
!899 = !{!900}
!900 = distinct !{!900, !898, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 0"}
!901 = !{!902}
!902 = distinct !{!902, !903, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec512IfEENS0_4SimdIfLm16EEEPf: argument 0"}
!903 = distinct !{!903, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec512IfEENS0_4SimdIfLm16EEEPf"}
!904 = !{!905}
!905 = distinct !{!905, !906, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec512IfEENS0_4SimdIfLm16EEEPf: argument 0"}
!906 = distinct !{!906, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec512IfEENS0_4SimdIfLm16EEEPf"}
!907 = !{!908}
!908 = distinct !{!908, !909, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec512IfEENS0_4SimdIfLm16EEEPf: argument 0"}
!909 = distinct !{!909, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec512IfEENS0_4SimdIfLm16EEEPf"}
!910 = !{!911, !913, !915}
!911 = distinct !{!911, !912, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 1"}
!912 = distinct !{!912, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf"}
!913 = distinct !{!913, !914, !"_ZN3jxl6N_AVX315OpsinAbsorbanceIN3hwy6N_AVX36Vec512IfEEEEvT_S6_S6_PKfPS6_S9_S9_: argument 0"}
!914 = distinct !{!914, !"_ZN3jxl6N_AVX315OpsinAbsorbanceIN3hwy6N_AVX36Vec512IfEEEEvT_S6_S6_PKfPS6_S9_S9_"}
!915 = distinct !{!915, !916, !"_ZN3jxl6N_AVX314LinearRGBToXYBIN3hwy6N_AVX36Vec512IfEEEEvT_S6_S6_PKfPfS9_S9_: argument 0"}
!916 = distinct !{!916, !"_ZN3jxl6N_AVX314LinearRGBToXYBIN3hwy6N_AVX36Vec512IfEEEEvT_S6_S6_PKfPfS9_S9_"}
!917 = !{!918, !919, !920, !921, !922, !923, !924}
!918 = distinct !{!918, !912, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 0"}
!919 = distinct !{!919, !914, !"_ZN3jxl6N_AVX315OpsinAbsorbanceIN3hwy6N_AVX36Vec512IfEEEEvT_S6_S6_PKfPS6_S9_S9_: argument 1"}
!920 = distinct !{!920, !914, !"_ZN3jxl6N_AVX315OpsinAbsorbanceIN3hwy6N_AVX36Vec512IfEEEEvT_S6_S6_PKfPS6_S9_S9_: argument 2"}
!921 = distinct !{!921, !914, !"_ZN3jxl6N_AVX315OpsinAbsorbanceIN3hwy6N_AVX36Vec512IfEEEEvT_S6_S6_PKfPS6_S9_S9_: argument 3"}
!922 = distinct !{!922, !916, !"_ZN3jxl6N_AVX314LinearRGBToXYBIN3hwy6N_AVX36Vec512IfEEEEvT_S6_S6_PKfPfS9_S9_: argument 1"}
!923 = distinct !{!923, !916, !"_ZN3jxl6N_AVX314LinearRGBToXYBIN3hwy6N_AVX36Vec512IfEEEEvT_S6_S6_PKfPfS9_S9_: argument 2"}
!924 = distinct !{!924, !916, !"_ZN3jxl6N_AVX314LinearRGBToXYBIN3hwy6N_AVX36Vec512IfEEEEvT_S6_S6_PKfPfS9_S9_: argument 3"}
!925 = !{!926, !913, !915}
!926 = distinct !{!926, !927, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 1"}
!927 = distinct !{!927, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf"}
!928 = !{!929, !919, !920, !921, !922, !923, !924}
!929 = distinct !{!929, !927, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 0"}
!930 = !{!931, !913, !915}
!931 = distinct !{!931, !932, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 1"}
!932 = distinct !{!932, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf"}
!933 = !{!934, !919, !920, !921, !922, !923, !924}
!934 = distinct !{!934, !932, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 0"}
!935 = !{!936, !913, !915}
!936 = distinct !{!936, !937, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 1"}
!937 = distinct !{!937, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf"}
!938 = !{!939, !919, !920, !921, !922, !923, !924}
!939 = distinct !{!939, !937, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 0"}
!940 = !{!941, !913, !915}
!941 = distinct !{!941, !942, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 1"}
!942 = distinct !{!942, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf"}
!943 = !{!944, !919, !920, !921, !922, !923, !924}
!944 = distinct !{!944, !942, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 0"}
!945 = !{!946, !913, !915}
!946 = distinct !{!946, !947, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 1"}
!947 = distinct !{!947, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf"}
!948 = !{!949, !919, !920, !921, !922, !923, !924}
!949 = distinct !{!949, !947, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 0"}
!950 = !{!951, !913, !915}
!951 = distinct !{!951, !952, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 1"}
!952 = distinct !{!952, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf"}
!953 = !{!954, !919, !920, !921, !922, !923, !924}
!954 = distinct !{!954, !952, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 0"}
!955 = !{!956, !913, !915}
!956 = distinct !{!956, !957, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 1"}
!957 = distinct !{!957, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf"}
!958 = !{!959, !919, !920, !921, !922, !923, !924}
!959 = distinct !{!959, !957, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 0"}
!960 = !{!961, !913, !915}
!961 = distinct !{!961, !962, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 1"}
!962 = distinct !{!962, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf"}
!963 = !{!964, !919, !920, !921, !922, !923, !924}
!964 = distinct !{!964, !962, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 0"}
!965 = !{!966, !915}
!966 = distinct !{!966, !967, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 1"}
!967 = distinct !{!967, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf"}
!968 = !{!969, !922, !923, !924}
!969 = distinct !{!969, !967, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 0"}
!970 = !{!971, !915}
!971 = distinct !{!971, !972, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 1"}
!972 = distinct !{!972, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf"}
!973 = !{!974, !922, !923, !924}
!974 = distinct !{!974, !972, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 0"}
!975 = !{!976, !915}
!976 = distinct !{!976, !977, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 1"}
!977 = distinct !{!977, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf"}
!978 = !{!979, !922, !923, !924}
!979 = distinct !{!979, !977, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 0"}
!980 = !{!981, !983, !922}
!981 = distinct !{!981, !982, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec512IfEENS0_4SimdIfLm16EEEPf: argument 0"}
!982 = distinct !{!982, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec512IfEENS0_4SimdIfLm16EEEPf"}
!983 = distinct !{!983, !984, !"_ZN3jxl6N_AVX38StoreXYBIN3hwy6N_AVX36Vec512IfEEEEvT_S6_S6_PfS7_S7_: argument 0"}
!984 = distinct !{!984, !"_ZN3jxl6N_AVX38StoreXYBIN3hwy6N_AVX36Vec512IfEEEEvT_S6_S6_PfS7_S7_"}
!985 = !{!986, !987, !915, !923, !924}
!986 = distinct !{!986, !984, !"_ZN3jxl6N_AVX38StoreXYBIN3hwy6N_AVX36Vec512IfEEEEvT_S6_S6_PfS7_S7_: argument 1"}
!987 = distinct !{!987, !984, !"_ZN3jxl6N_AVX38StoreXYBIN3hwy6N_AVX36Vec512IfEEEEvT_S6_S6_PfS7_S7_: argument 2"}
!988 = !{!989, !986, !923}
!989 = distinct !{!989, !990, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec512IfEENS0_4SimdIfLm16EEEPf: argument 0"}
!990 = distinct !{!990, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec512IfEENS0_4SimdIfLm16EEEPf"}
!991 = !{!983, !987, !915, !922, !924}
!992 = !{!993, !987, !924}
!993 = distinct !{!993, !994, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec512IfEENS0_4SimdIfLm16EEEPf: argument 0"}
!994 = distinct !{!994, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec512IfEENS0_4SimdIfLm16EEEPf"}
!995 = !{!983, !986, !915, !922, !923}
!996 = !{!997}
!997 = distinct !{!997, !998, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 1"}
!998 = distinct !{!998, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf"}
!999 = !{!1000}
!1000 = distinct !{!1000, !998, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 0"}
!1001 = !{!1002}
!1002 = distinct !{!1002, !1003, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 1"}
!1003 = distinct !{!1003, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf"}
!1004 = !{!1005}
!1005 = distinct !{!1005, !1003, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 0"}
!1006 = !{!1007}
!1007 = distinct !{!1007, !1008, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 1"}
!1008 = distinct !{!1008, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf"}
!1009 = !{!1010}
!1010 = distinct !{!1010, !1008, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 0"}
!1011 = !{!1012}
!1012 = distinct !{!1012, !1013, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec512IfEENS0_4SimdIfLm16EEEPf: argument 0"}
!1013 = distinct !{!1013, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec512IfEENS0_4SimdIfLm16EEEPf"}
!1014 = !{!1015}
!1015 = distinct !{!1015, !1016, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec512IfEENS0_4SimdIfLm16EEEPf: argument 0"}
!1016 = distinct !{!1016, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec512IfEENS0_4SimdIfLm16EEEPf"}
!1017 = !{!1018}
!1018 = distinct !{!1018, !1019, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec512IfEENS0_4SimdIfLm16EEEPf: argument 0"}
!1019 = distinct !{!1019, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec512IfEENS0_4SimdIfLm16EEEPf"}
!1020 = !{!1021}
!1021 = distinct !{!1021, !1022, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1022 = distinct !{!1022, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1023 = !{!1024}
!1024 = distinct !{!1024, !1025, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1025 = distinct !{!1025, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1026 = !{!1027}
!1027 = distinct !{!1027, !1028, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1028 = distinct !{!1028, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1029 = !{!1030, !1032, !1034}
!1030 = distinct !{!1030, !1031, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1031 = distinct !{!1031, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1032 = distinct !{!1032, !1033, !"_ZN3jxl8N_SCALAR15OpsinAbsorbanceIN3hwy8N_SCALAR4Vec1IfEEEEvT_S6_S6_PKfPS6_S9_S9_: argument 0"}
!1033 = distinct !{!1033, !"_ZN3jxl8N_SCALAR15OpsinAbsorbanceIN3hwy8N_SCALAR4Vec1IfEEEEvT_S6_S6_PKfPS6_S9_S9_"}
!1034 = distinct !{!1034, !1035, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1035 = distinct !{!1035, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1036 = !{!1037, !1038, !1039}
!1037 = distinct !{!1037, !1033, !"_ZN3jxl8N_SCALAR15OpsinAbsorbanceIN3hwy8N_SCALAR4Vec1IfEEEEvT_S6_S6_PKfPS6_S9_S9_: argument 1"}
!1038 = distinct !{!1038, !1033, !"_ZN3jxl8N_SCALAR15OpsinAbsorbanceIN3hwy8N_SCALAR4Vec1IfEEEEvT_S6_S6_PKfPS6_S9_S9_: argument 2"}
!1039 = distinct !{!1039, !1033, !"_ZN3jxl8N_SCALAR15OpsinAbsorbanceIN3hwy8N_SCALAR4Vec1IfEEEEvT_S6_S6_PKfPS6_S9_S9_: argument 3"}
!1040 = !{!1041, !1032}
!1041 = distinct !{!1041, !1042, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1042 = distinct !{!1042, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1043 = !{!1044, !1032, !1046}
!1044 = distinct !{!1044, !1045, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1045 = distinct !{!1045, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1046 = distinct !{!1046, !1047, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1047 = distinct !{!1047, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1048 = !{!1049, !1032}
!1049 = distinct !{!1049, !1050, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1050 = distinct !{!1050, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1051 = !{!1052, !1032, !1054}
!1052 = distinct !{!1052, !1053, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1053 = distinct !{!1053, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1054 = distinct !{!1054, !1055, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1055 = distinct !{!1055, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1056 = !{!1057, !1032}
!1057 = distinct !{!1057, !1058, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1058 = distinct !{!1058, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1059 = !{!1060}
!1060 = distinct !{!1060, !1061, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1061 = distinct !{!1061, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1062 = !{!1063}
!1063 = distinct !{!1063, !1064, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1064 = distinct !{!1064, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1065 = !{!1066}
!1066 = distinct !{!1066, !1067, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1067 = distinct !{!1067, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1068 = !{!1069, !1071}
!1069 = distinct !{!1069, !1070, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_: argument 0"}
!1070 = distinct !{!1070, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_"}
!1071 = distinct !{!1071, !1072, !"_ZN3jxl8N_SCALAR8StoreXYBIN3hwy8N_SCALAR4Vec1IfEEEEvT_S6_S6_PfS7_S7_: argument 0"}
!1072 = distinct !{!1072, !"_ZN3jxl8N_SCALAR8StoreXYBIN3hwy8N_SCALAR4Vec1IfEEEEvT_S6_S6_PfS7_S7_"}
!1073 = !{!1074, !1075}
!1074 = distinct !{!1074, !1072, !"_ZN3jxl8N_SCALAR8StoreXYBIN3hwy8N_SCALAR4Vec1IfEEEEvT_S6_S6_PfS7_S7_: argument 1"}
!1075 = distinct !{!1075, !1072, !"_ZN3jxl8N_SCALAR8StoreXYBIN3hwy8N_SCALAR4Vec1IfEEEEvT_S6_S6_PfS7_S7_: argument 2"}
!1076 = !{!1077, !1074}
!1077 = distinct !{!1077, !1078, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_: argument 0"}
!1078 = distinct !{!1078, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_"}
!1079 = !{!1071, !1075}
!1080 = !{!1081, !1075}
!1081 = distinct !{!1081, !1082, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_: argument 0"}
!1082 = distinct !{!1082, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_"}
!1083 = !{!1071, !1074}
!1084 = !{!1085}
!1085 = distinct !{!1085, !1086, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1086 = distinct !{!1086, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1087 = !{!1088}
!1088 = distinct !{!1088, !1089, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1089 = distinct !{!1089, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1090 = !{!1091}
!1091 = distinct !{!1091, !1092, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1092 = distinct !{!1092, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1093 = !{!1094}
!1094 = distinct !{!1094, !1095, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1095 = distinct !{!1095, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1096 = !{!1097}
!1097 = distinct !{!1097, !1098, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1098 = distinct !{!1098, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1099 = !{!1100}
!1100 = distinct !{!1100, !1101, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1101 = distinct !{!1101, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1102 = !{!1103}
!1103 = distinct !{!1103, !1104, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_: argument 0"}
!1104 = distinct !{!1104, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_"}
!1105 = !{!1106}
!1106 = distinct !{!1106, !1107, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_: argument 0"}
!1107 = distinct !{!1107, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_"}
!1108 = !{!1109}
!1109 = distinct !{!1109, !1110, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_: argument 0"}
!1110 = distinct !{!1110, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_"}
!1111 = !{!1112}
!1112 = distinct !{!1112, !1113, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1113 = distinct !{!1113, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1114 = !{!1115}
!1115 = distinct !{!1115, !1116, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1116 = distinct !{!1116, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1117 = !{!1118}
!1118 = distinct !{!1118, !1119, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1119 = distinct !{!1119, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1120 = !{!1121}
!1121 = distinct !{!1121, !1122, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_: argument 0"}
!1122 = distinct !{!1122, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_"}
!1123 = !{!1124}
!1124 = distinct !{!1124, !1125, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_: argument 0"}
!1125 = distinct !{!1125, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_"}
!1126 = !{!1127}
!1127 = distinct !{!1127, !1128, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_: argument 0"}
!1128 = distinct !{!1128, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_"}
