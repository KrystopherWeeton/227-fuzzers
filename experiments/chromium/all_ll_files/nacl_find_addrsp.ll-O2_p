; ModuleID = '../../native_client/src/shared/platform/posix/nacl_find_addrsp.c'
source_filename = "../../native_client/src/shared/platform/posix/nacl_find_addrsp.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [40 x i8] c"Fatal error in file %s, line %d: !(%s)\0A\00", align 1
@.str.1 = private unnamed_addr constant [65 x i8] c"../../native_client/src/shared/platform/posix/nacl_find_addrsp.c\00", align 1
@.str.2 = private unnamed_addr constant [15 x i8] c"max_tries >= 0\00", align 1
@.str.3 = private unnamed_addr constant [55 x i8] c"NaClFindAddressSpaceRandomized: looking for %lx bytes\0A\00", align 1
@.str.4 = private unnamed_addr constant [46 x i8] c"NaClFindAddressSpaceRandomized: max %d tries\0A\00", align 1
@.str.5 = private unnamed_addr constant [82 x i8] c"NaClFindAddressSpaceRandomized: non-MAP_FAILED tries remaining %d, hint addr %lx\0A\00", align 1
@.str.6 = private unnamed_addr constant [44 x i8] c"NaClFindAddressSpaceRandomized: MAP_FAILED\0A\00", align 1
@.str.7 = private unnamed_addr constant [53 x i8] c"NaClFindAddressSpaceRandomized: too many MAP_FAILED\0A\00", align 1
@.str.8 = private unnamed_addr constant [58 x i8] c"NaClFindAddressSpaceRandomized: high order bits matched.\0A\00", align 1
@.str.9 = private unnamed_addr constant [57 x i8] c"NaClFindAddressSpaceRandomized: last try, taking as is.\0A\00", align 1
@.str.10 = private unnamed_addr constant [67 x i8] c"NaClFindAddressSpaceRandomized: could not unmap non-random memory\0A\00", align 1
@.str.11 = private unnamed_addr constant [46 x i8] c"NaClFindAddressSpaceRandomized: got addr %lx\0A\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @NaClFindAddressSpaceRandomized(i64* nocapture, i64, i32) local_unnamed_addr #0 {
  %4 = icmp sgt i32 %2, -1
  br i1 %4, label %6, label %5

5:                                                ; preds = %3
  tail call void (i32, i8*, ...) @NaClLog(i32 -4, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.1, i64 0, i64 0), i32 79, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0)) #3
  br label %6

6:                                                ; preds = %5, %3
  tail call void (i32, i8*, ...) @NaClLog(i32 4, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.3, i64 0, i64 0), i64 %1) #3
  tail call void (i32, i8*, ...) @NaClLog(i32 4, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.4, i64 0, i64 0), i32 %2) #3
  br label %7

7:                                                ; preds = %38, %6
  %8 = phi i32 [ %2, %6 ], [ %32, %38 ]
  %9 = phi i64 [ 10000, %6 ], [ %11, %38 ]
  br label %10

10:                                               ; preds = %7, %25
  %11 = phi i64 [ %23, %25 ], [ %9, %7 ]
  %12 = tail call i32 @NaClGlobalSecureRngUint32() #3
  %13 = zext i32 %12 to i64
  %14 = shl nuw i64 %13, 32
  %15 = tail call i32 @NaClGlobalSecureRngUint32() #3
  %16 = zext i32 %15 to i64
  %17 = or i64 %14, %16
  %18 = and i64 %17, 140737488351232
  tail call void (i32, i8*, ...) @NaClLog(i32 4, i8* getelementptr inbounds ([82 x i8], [82 x i8]* @.str.5, i64 0, i64 0), i32 %8, i64 %18) #3
  %19 = inttoptr i64 %18 to i8*
  %20 = tail call i8* @mmap64(i8* %19, i64 %1, i32 0, i32 16418, i32 -1, i64 0) #3
  %21 = icmp eq i8* %20, inttoptr (i64 -1 to i8*)
  br i1 %21, label %22, label %27

22:                                               ; preds = %10
  %23 = add i64 %11, -1
  %24 = icmp eq i64 %23, 0
  br i1 %24, label %26, label %25

25:                                               ; preds = %22
  tail call void (i32, i8*, ...) @NaClLog(i32 -1, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.6, i64 0, i64 0)) #3
  br label %10

26:                                               ; preds = %22
  tail call void (i32, i8*, ...) @NaClLog(i32 -3, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.7, i64 0, i64 0)) #3
  br label %42

27:                                               ; preds = %10
  %28 = ptrtoint i8* %20 to i64
  %29 = and i64 %28, 140737488351232
  %30 = icmp eq i64 %29, %18
  br i1 %30, label %39, label %31

31:                                               ; preds = %27
  %32 = add nsw i32 %8, -1
  %33 = icmp eq i32 %8, 0
  br i1 %33, label %39, label %34

34:                                               ; preds = %31
  %35 = tail call i32 @munmap(i8* %20, i64 %1) #3
  %36 = icmp eq i32 %35, -1
  br i1 %36, label %37, label %38

37:                                               ; preds = %34
  tail call void (i32, i8*, ...) @NaClLog(i32 -4, i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.10, i64 0, i64 0)) #3
  br label %38

38:                                               ; preds = %37, %34
  br label %7

39:                                               ; preds = %31, %27
  %40 = phi i8* [ getelementptr inbounds ([58 x i8], [58 x i8]* @.str.8, i64 0, i64 0), %27 ], [ getelementptr inbounds ([57 x i8], [57 x i8]* @.str.9, i64 0, i64 0), %31 ]
  tail call void (i32, i8*, ...) @NaClLog(i32 5, i8* %40) #3
  %41 = ptrtoint i8* %20 to i64
  tail call void (i32, i8*, ...) @NaClLog(i32 4, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.11, i64 0, i64 0), i64 %41) #3
  store i64 %41, i64* %0, align 8
  br label %42

42:                                               ; preds = %39, %26
  %43 = phi i32 [ 0, %26 ], [ 1, %39 ]
  ret i32 %43
}

declare void @NaClLog(i32, i8*, ...) local_unnamed_addr #1

declare i32 @NaClGlobalSecureRngUint32() local_unnamed_addr #1

; Function Attrs: nounwind
declare i8* @mmap64(i8*, i64, i32, i32, i32, i64) local_unnamed_addr #2

; Function Attrs: nounwind
declare i32 @munmap(i8*, i64) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @NaClFindAddressSpace(i64* nocapture, i64) local_unnamed_addr #0 {
  %3 = tail call i32 @NaClFindAddressSpaceRandomized(i64* %0, i64 %1, i32 0)
  ret i32 %3
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
