; ModuleID = '../../third_party/swiftshader/third_party/astc-encoder/Source/astc_symbolic_physical.cpp'
source_filename = "../../third_party/swiftshader/third_party/astc-encoder/Source/astc_symbolic_physical.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.block_size_descriptor = type { i32, i32, i32, i32, i32, [87 x %struct.decimation_table*], [2048 x %struct.block_mode], [3073 x %struct.partition_info] }
%struct.decimation_table = type { i32, [216 x i8], [216 x [4 x i8]], [216 x [4 x i8]] }
%struct.block_mode = type { i8, i8, i8, i8 }
%struct.partition_info = type { i32, [216 x i8] }
%struct.symbolic_compressed_block = type { i32, i32, i32, i32, [4 x i32], i32, [4 x [12 x i32]], i32, [64 x i8], [64 x i8], i32, [4 x i32] }

@_ZZ20physical_to_symbolicPK21block_size_descriptor25physical_compressed_blockP25symbolic_compressed_blockE14color_bits_arr = internal unnamed_addr constant [5 x i32] [i32 -1, i32 111, i32 99, i32 99, i32 99], align 16
@quantization_mode_table = external local_unnamed_addr global [17 x [128 x i32]], align 16

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_Z20physical_to_symbolicPK21block_size_descriptor25physical_compressed_blockP25symbolic_compressed_block(%struct.block_size_descriptor* nocapture readonly, i64, i64, %struct.symbolic_compressed_block*) local_unnamed_addr #0 {
  %5 = alloca <16 x i8>, align 16
  %6 = bitcast <16 x i8>* %5 to { i64, i64 }*
  %7 = alloca <16 x i8>, align 16
  %8 = alloca [64 x i8], align 16
  %9 = alloca [4 x i32], align 16
  %10 = bitcast [4 x i32]* %9 to i8*
  %11 = alloca [32 x i8], align 16
  %12 = bitcast <16 x i8>* %5 to i64*
  store i64 %1, i64* %12, align 16
  %13 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i64 0, i32 1
  store i64 %2, i64* %13, align 8
  %14 = getelementptr inbounds <16 x i8>, <16 x i8>* %7, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %14) #3
  %15 = getelementptr inbounds %struct.symbolic_compressed_block, %struct.symbolic_compressed_block* %3, i64 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %14, i8 -86, i64 16, i1 false)
  store i32 0, i32* %15, align 4
  %16 = getelementptr inbounds <16 x i8>, <16 x i8>* %5, i64 0, i64 0
  %17 = trunc i64 %1 to i32
  %18 = and i32 %17, 255
  %19 = getelementptr inbounds <16 x i8>, <16 x i8>* %5, i64 0, i64 1
  %20 = lshr i64 %1, 8
  %21 = trunc i64 %20 to i32
  %22 = and i32 %21, 255
  %23 = shl nuw nsw i32 %22, 8
  %24 = and i32 %23, 1792
  %25 = or i32 %24, %18
  %26 = and i32 %25, 511
  %27 = icmp eq i32 %26, 508
  %28 = lshr i64 %1, 16
  %29 = trunc i64 %28 to i32
  %30 = lshr i64 %1, 24
  %31 = trunc i64 %30 to i32
  %32 = lshr i64 %1, 32
  %33 = trunc i64 %32 to i32
  %34 = lshr i64 %1, 40
  %35 = trunc i64 %34 to i32
  %36 = lshr i64 %1, 48
  %37 = trunc i64 %36 to i32
  %38 = lshr i64 %1, 56
  br i1 %27, label %39, label %159

39:                                               ; preds = %4
  %40 = and i32 %21, 2
  %41 = icmp eq i32 %40, 0
  %42 = getelementptr inbounds %struct.symbolic_compressed_block, %struct.symbolic_compressed_block* %3, i64 0, i32 1
  %43 = select i1 %41, i32 -2, i32 -1
  store i32 %43, i32* %42, align 4
  %44 = getelementptr inbounds %struct.symbolic_compressed_block, %struct.symbolic_compressed_block* %3, i64 0, i32 2
  store i32 0, i32* %44, align 4
  %45 = getelementptr inbounds <16 x i8>, <16 x i8>* %5, i64 0, i64 8
  %46 = bitcast i8* %45 to <8 x i8>*
  %47 = load <8 x i8>, <8 x i8>* %46, align 8
  %48 = shufflevector <8 x i8> %47, <8 x i8> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %49 = shufflevector <8 x i8> %47, <8 x i8> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %50 = zext <4 x i8> %48 to <4 x i32>
  %51 = zext <4 x i8> %49 to <4 x i32>
  %52 = shl nuw nsw <4 x i32> %51, <i32 8, i32 8, i32 8, i32 8>
  %53 = or <4 x i32> %52, %50
  %54 = getelementptr inbounds %struct.symbolic_compressed_block, %struct.symbolic_compressed_block* %3, i64 0, i32 11, i64 0
  %55 = bitcast i32* %54 to <4 x i32>*
  store <4 x i32> %53, <4 x i32>* %55, align 4
  %56 = getelementptr inbounds %struct.block_size_descriptor, %struct.block_size_descriptor* %0, i64 0, i32 2
  %57 = load i32, i32* %56, align 8
  %58 = icmp eq i32 %57, 1
  %59 = and i32 %29, 255
  %60 = shl nuw nsw i32 %59, 8
  %61 = or i32 %60, %22
  br i1 %58, label %62, label %114

62:                                               ; preds = %39
  %63 = and i32 %21, 12
  %64 = icmp ne i32 %63, 12
  %65 = lshr i32 %61, 4
  %66 = and i32 %65, 255
  %67 = and i32 %31, 255
  %68 = shl nuw nsw i32 %67, 8
  %69 = or i32 %68, %59
  %70 = shl nuw nsw i32 %69, 4
  %71 = and i32 %70, 7936
  %72 = or i32 %71, %66
  %73 = and i32 %33, 255
  %74 = shl nuw nsw i32 %73, 8
  %75 = or i32 %74, %67
  %76 = lshr i32 %75, 1
  %77 = and i32 %76, 255
  %78 = and i32 %35, 255
  %79 = shl nuw nsw i32 %78, 8
  %80 = or i32 %79, %73
  %81 = shl nuw nsw i32 %73, 7
  %82 = and i32 %81, 7936
  %83 = or i32 %77, %82
  %84 = lshr i32 %80, 6
  %85 = and i32 %84, 255
  %86 = and i32 %37, 255
  %87 = shl nuw nsw i32 %86, 8
  %88 = or i32 %87, %78
  %89 = shl nuw nsw i32 %88, 2
  %90 = and i32 %89, 7936
  %91 = or i32 %90, %85
  %92 = shl nuw nsw i64 %38, 8
  %93 = trunc i64 %92 to i32
  %94 = or i32 %86, %93
  %95 = lshr i32 %94, 3
  %96 = and i32 %95, 255
  %97 = lshr i64 %1, 51
  %98 = trunc i64 %97 to i32
  %99 = and i32 %98, 7936
  %100 = or i32 %96, %99
  %101 = icmp eq i32 %72, 8191
  %102 = icmp eq i32 %83, 8191
  %103 = and i1 %101, %102
  %104 = icmp eq i32 %91, 8191
  %105 = and i1 %103, %104
  %106 = icmp eq i32 %100, 8191
  %107 = and i1 %105, %106
  %108 = icmp ult i32 %72, %83
  %109 = icmp ult i32 %91, %100
  %110 = and i1 %108, %109
  %111 = or i1 %110, %107
  %112 = xor i1 %111, true
  %113 = or i1 %64, %112
  br i1 %113, label %411, label %412

114:                                              ; preds = %39
  %115 = lshr i32 %61, 2
  %116 = and i32 %115, 511
  %117 = trunc i64 %30 to i32
  %118 = and i32 %117, 255
  %119 = shl nuw nsw i32 %118, 8
  %120 = or i32 %119, %59
  %121 = lshr i32 %120, 3
  %122 = and i32 %121, 511
  %123 = trunc i64 %32 to i32
  %124 = and i32 %123, 255
  %125 = shl nuw nsw i32 %124, 8
  %126 = or i32 %125, %118
  %127 = lshr i32 %126, 4
  %128 = and i32 %127, 511
  %129 = trunc i64 %34 to i32
  %130 = and i32 %129, 255
  %131 = shl nuw nsw i32 %130, 8
  %132 = or i32 %131, %124
  %133 = lshr i32 %132, 5
  %134 = and i32 %133, 511
  %135 = trunc i64 %36 to i32
  %136 = and i32 %135, 255
  %137 = shl nuw nsw i32 %136, 8
  %138 = or i32 %137, %130
  %139 = lshr i32 %138, 6
  %140 = and i32 %139, 511
  %141 = shl nuw nsw i64 %38, 8
  %142 = trunc i64 %141 to i32
  %143 = or i32 %136, %142
  %144 = lshr i32 %143, 7
  %145 = and i32 %116, %121
  %146 = and i32 %145, %127
  %147 = and i32 %146, %133
  %148 = and i32 %147, %139
  %149 = icmp eq i32 %148, 511
  %150 = icmp eq i32 %144, 511
  %151 = and i1 %149, %150
  %152 = icmp ult i32 %116, %122
  %153 = icmp ult i32 %128, %134
  %154 = and i1 %152, %153
  %155 = icmp ult i32 %140, %144
  %156 = and i1 %154, %155
  %157 = or i1 %156, %151
  br i1 %157, label %412, label %158

158:                                              ; preds = %114
  store i32 1, i32* %15, align 4
  br label %412

159:                                              ; preds = %4
  %160 = zext i32 %25 to i64
  %161 = getelementptr inbounds %struct.block_size_descriptor, %struct.block_size_descriptor* %0, i64 0, i32 6, i64 %160, i32 3
  %162 = load i8, i8* %161, align 1
  %163 = icmp eq i8 %162, 0
  br i1 %163, label %164, label %165

164:                                              ; preds = %159
  store i32 1, i32* %15, align 4
  br label %412

165:                                              ; preds = %159
  %166 = getelementptr inbounds %struct.block_size_descriptor, %struct.block_size_descriptor* %0, i64 0, i32 6, i64 %160, i32 0
  %167 = load i8, i8* %166, align 4
  %168 = sext i8 %167 to i64
  %169 = getelementptr inbounds %struct.block_size_descriptor, %struct.block_size_descriptor* %0, i64 0, i32 5, i64 %168
  %170 = load %struct.decimation_table*, %struct.decimation_table** %169, align 8
  %171 = getelementptr inbounds %struct.decimation_table, %struct.decimation_table* %170, i64 0, i32 0
  %172 = load i32, i32* %171, align 4
  %173 = getelementptr inbounds %struct.block_size_descriptor, %struct.block_size_descriptor* %0, i64 0, i32 6, i64 %160, i32 1
  %174 = load i8, i8* %173, align 1
  %175 = getelementptr inbounds %struct.block_size_descriptor, %struct.block_size_descriptor* %0, i64 0, i32 6, i64 %160, i32 2
  %176 = load i8, i8* %175, align 2
  %177 = icmp ne i8 %176, 0
  %178 = zext i1 %177 to i32
  %179 = shl nsw i32 %172, %178
  %180 = lshr i32 %22, 3
  %181 = and i32 %180, 3
  %182 = add nuw nsw i32 %181, 1
  %183 = getelementptr inbounds %struct.symbolic_compressed_block, %struct.symbolic_compressed_block* %3, i64 0, i32 1
  store i32 %25, i32* %183, align 4
  %184 = getelementptr inbounds %struct.symbolic_compressed_block, %struct.symbolic_compressed_block* %3, i64 0, i32 2
  store i32 %182, i32* %184, align 4
  %185 = load <16 x i8>, <16 x i8>* %5, align 16
  %186 = shufflevector <16 x i8> %185, <16 x i8> undef, <16 x i32> <i32 15, i32 14, i32 13, i32 12, i32 11, i32 10, i32 9, i32 8, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %187 = zext <16 x i8> %186 to <16 x i32>
  %188 = shl nuw nsw <16 x i32> %187, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>
  %189 = and <16 x i32> %188, <i32 240, i32 240, i32 240, i32 240, i32 240, i32 240, i32 240, i32 240, i32 240, i32 240, i32 240, i32 240, i32 240, i32 240, i32 240, i32 240>
  %190 = lshr <16 x i32> %187, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>
  %191 = or <16 x i32> %189, %190
  %192 = shl nuw nsw <16 x i32> %191, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %193 = and <16 x i32> %192, <i32 204, i32 204, i32 204, i32 204, i32 204, i32 204, i32 204, i32 204, i32 204, i32 204, i32 204, i32 204, i32 204, i32 204, i32 204, i32 204>
  %194 = lshr <16 x i32> %191, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %195 = and <16 x i32> %194, <i32 51, i32 51, i32 51, i32 51, i32 51, i32 51, i32 51, i32 51, i32 51, i32 51, i32 51, i32 51, i32 51, i32 51, i32 51, i32 51>
  %196 = or <16 x i32> %193, %195
  %197 = shl nuw nsw <16 x i32> %196, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %198 = and <16 x i32> %197, <i32 170, i32 170, i32 170, i32 170, i32 170, i32 170, i32 170, i32 170, i32 170, i32 170, i32 170, i32 170, i32 170, i32 170, i32 170, i32 170>
  %199 = lshr <16 x i32> %196, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %200 = and <16 x i32> %199, <i32 85, i32 85, i32 85, i32 85, i32 85, i32 85, i32 85, i32 85, i32 85, i32 85, i32 85, i32 85, i32 85, i32 85, i32 85, i32 85>
  %201 = or <16 x i32> %198, %200
  %202 = trunc <16 x i32> %201 to <16 x i8>
  store <16 x i8> %202, <16 x i8>* %7, align 16
  %203 = sext i8 %174 to i32
  %204 = getelementptr inbounds <16 x i8>, <16 x i8>* %5, i64 0, i64 2
  %205 = tail call i32 @_Z20compute_ise_bitcounti19quantization_method(i32 %179, i32 %203) #4
  %206 = sub nsw i32 128, %205
  br i1 %177, label %207, label %224

207:                                              ; preds = %165
  %208 = getelementptr inbounds [64 x i8], [64 x i8]* %8, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %208) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %208, i8 -86, i64 64, i1 false)
  call void @_Z10decode_iseiiPKhPhi(i32 %203, i32 %179, i8* nonnull %14, i8* nonnull %208, i32 0) #4
  %209 = icmp sgt i32 %172, 0
  br i1 %209, label %210, label %226

210:                                              ; preds = %207
  %211 = zext i32 %172 to i64
  br label %212

212:                                              ; preds = %212, %210
  %213 = phi i64 [ 0, %210 ], [ %222, %212 ]
  %214 = shl nuw nsw i64 %213, 1
  %215 = getelementptr inbounds [64 x i8], [64 x i8]* %8, i64 0, i64 %214
  %216 = load i8, i8* %215, align 2
  %217 = getelementptr inbounds %struct.symbolic_compressed_block, %struct.symbolic_compressed_block* %3, i64 0, i32 8, i64 %213
  store i8 %216, i8* %217, align 1
  %218 = or i64 %214, 1
  %219 = getelementptr inbounds [64 x i8], [64 x i8]* %8, i64 0, i64 %218
  %220 = load i8, i8* %219, align 1
  %221 = getelementptr inbounds %struct.symbolic_compressed_block, %struct.symbolic_compressed_block* %3, i64 0, i32 9, i64 %213
  store i8 %220, i8* %221, align 1
  %222 = add nuw nsw i64 %213, 1
  %223 = icmp eq i64 %222, %211
  br i1 %223, label %226, label %212

224:                                              ; preds = %165
  %225 = getelementptr inbounds %struct.symbolic_compressed_block, %struct.symbolic_compressed_block* %3, i64 0, i32 8, i64 0
  call void @_Z10decode_iseiiPKhPhi(i32 %203, i32 %172, i8* nonnull %14, i8* %225, i32 0) #4
  br label %229

226:                                              ; preds = %212, %207
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %208) #3
  %227 = icmp eq i32 %182, 4
  br i1 %227, label %228, label %229

228:                                              ; preds = %226
  store i32 1, i32* %15, align 4
  br label %229

229:                                              ; preds = %224, %228, %226
  %230 = getelementptr inbounds %struct.symbolic_compressed_block, %struct.symbolic_compressed_block* %3, i64 0, i32 5
  store i32 0, i32* %230, align 4
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %10) #3
  %231 = icmp eq i32 %181, 0
  %232 = bitcast [4 x i32]* %9 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %232, i8 -86, i64 16, i1 false)
  br i1 %231, label %233, label %243

233:                                              ; preds = %229
  %234 = getelementptr inbounds [4 x i32], [4 x i32]* %9, i64 0, i64 0
  %235 = load i8, i8* %19, align 1
  %236 = zext i8 %235 to i32
  %237 = load i8, i8* %204, align 2
  %238 = zext i8 %237 to i32
  %239 = shl nuw nsw i32 %238, 8
  %240 = or i32 %239, %236
  %241 = lshr i32 %240, 5
  %242 = and i32 %241, 15
  store i32 %242, i32* %234, align 16
  br label %322

243:                                              ; preds = %229
  %244 = mul nuw nsw i32 %182, 3
  %245 = add nsw i32 %244, -4
  %246 = sub nsw i32 %206, %245
  %247 = load i8, i8* %204, align 2
  %248 = zext i8 %247 to i32
  %249 = getelementptr inbounds <16 x i8>, <16 x i8>* %5, i64 0, i64 3
  %250 = load i8, i8* %249, align 1
  %251 = zext i8 %250 to i32
  %252 = shl nuw nsw i32 %251, 8
  %253 = or i32 %252, %248
  %254 = lshr i32 %253, 7
  %255 = and i32 %254, 63
  %256 = shl nsw i32 -1, %245
  %257 = xor i32 %256, 67108863
  %258 = ashr i32 %246, 3
  %259 = sext i32 %258 to i64
  %260 = getelementptr inbounds <16 x i8>, <16 x i8>* %5, i64 0, i64 %259
  %261 = and i32 %246, 7
  %262 = load i8, i8* %260, align 1
  %263 = zext i8 %262 to i32
  %264 = getelementptr inbounds i8, i8* %260, i64 1
  %265 = load i8, i8* %264, align 1
  %266 = zext i8 %265 to i32
  %267 = shl nuw nsw i32 %266, 8
  %268 = or i32 %267, %263
  %269 = lshr i32 %268, %261
  %270 = and i32 %269, %257
  %271 = shl nuw nsw i32 %270, 6
  %272 = or i32 %271, %255
  %273 = and i32 %254, 3
  %274 = icmp eq i32 %273, 0
  br i1 %274, label %275, label %285

275:                                              ; preds = %243
  %276 = lshr i32 %251, 1
  %277 = and i32 %276, 15
  %278 = zext i32 %182 to i64
  br label %279

279:                                              ; preds = %279, %275
  %280 = phi i64 [ %282, %279 ], [ 0, %275 ]
  %281 = getelementptr inbounds [4 x i32], [4 x i32]* %9, i64 0, i64 %280
  store i32 %277, i32* %281, align 4
  %282 = add nuw nsw i64 %280, 1
  %283 = icmp eq i64 %282, %278
  br i1 %283, label %284, label %279

284:                                              ; preds = %279
  store i32 1, i32* %230, align 4
  br label %310

285:                                              ; preds = %243
  %286 = add nuw nsw i32 %273, 1073741823
  %287 = zext i32 %182 to i64
  br label %288

288:                                              ; preds = %288, %285
  %289 = phi i64 [ %297, %288 ], [ 0, %285 ]
  %290 = phi i32 [ %296, %288 ], [ 2, %285 ]
  %291 = lshr i32 %272, %290
  %292 = and i32 %291, 1
  %293 = add nuw i32 %286, %292
  %294 = shl i32 %293, 2
  %295 = getelementptr inbounds [4 x i32], [4 x i32]* %9, i64 0, i64 %289
  store i32 %294, i32* %295, align 4
  %296 = add nuw nsw i32 %290, 1
  %297 = add nuw nsw i64 %289, 1
  %298 = icmp eq i64 %297, %287
  br i1 %298, label %299, label %288

299:                                              ; preds = %288, %299
  %300 = phi i64 [ %308, %299 ], [ 0, %288 ]
  %301 = phi i32 [ %307, %299 ], [ %296, %288 ]
  %302 = ashr i32 %272, %301
  %303 = and i32 %302, 3
  %304 = getelementptr inbounds [4 x i32], [4 x i32]* %9, i64 0, i64 %300
  %305 = load i32, i32* %304, align 4
  %306 = or i32 %305, %303
  store i32 %306, i32* %304, align 4
  %307 = add nuw nsw i32 %301, 2
  %308 = add nuw nsw i64 %300, 1
  %309 = icmp eq i64 %308, %287
  br i1 %309, label %310, label %299

310:                                              ; preds = %299, %284
  %311 = phi i32 [ %206, %284 ], [ %246, %299 ]
  %312 = phi i32 [ 0, %284 ], [ %245, %299 ]
  %313 = load i8, i8* %19, align 1
  %314 = zext i8 %313 to i32
  %315 = shl nuw nsw i32 %248, 8
  %316 = or i32 %315, %314
  %317 = lshr i32 %316, 5
  %318 = and i32 %317, 63
  %319 = shl nuw nsw i32 %248, 3
  %320 = and i32 %319, 960
  %321 = or i32 %318, %320
  br label %322

322:                                              ; preds = %310, %233
  %323 = phi i32 [ %321, %310 ], [ 0, %233 ]
  %324 = phi i32 [ %311, %310 ], [ %206, %233 ]
  %325 = phi i32 [ %312, %310 ], [ 0, %233 ]
  %326 = getelementptr inbounds %struct.symbolic_compressed_block, %struct.symbolic_compressed_block* %3, i64 0, i32 3
  store i32 %323, i32* %326, align 4
  %327 = zext i32 %182 to i64
  %328 = getelementptr %struct.symbolic_compressed_block, %struct.symbolic_compressed_block* %3, i64 0, i32 4, i64 0
  %329 = bitcast i32* %328 to i8*
  %330 = shl nuw nsw i32 %180, 2
  %331 = and i32 %330, 12
  %332 = add nuw nsw i32 %331, 4
  %333 = zext i32 %332 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %329, i8* nonnull align 16 %10, i64 %333, i1 false)
  br label %334

334:                                              ; preds = %334, %322
  %335 = phi i64 [ 0, %322 ], [ %343, %334 ]
  %336 = phi i32 [ 0, %322 ], [ %342, %334 ]
  %337 = getelementptr inbounds [4 x i32], [4 x i32]* %9, i64 0, i64 %335
  %338 = load i32, i32* %337, align 4
  %339 = ashr i32 %338, 2
  %340 = shl nsw i32 %339, 1
  %341 = add i32 %336, 2
  %342 = add i32 %341, %340
  %343 = add nuw nsw i64 %335, 1
  %344 = icmp eq i64 %343, %327
  br i1 %344, label %345, label %334

345:                                              ; preds = %334
  %346 = icmp sgt i32 %342, 18
  br i1 %346, label %347, label %348

347:                                              ; preds = %345
  store i32 1, i32* %15, align 4
  br label %348

348:                                              ; preds = %347, %345
  %349 = getelementptr inbounds [5 x i32], [5 x i32]* @_ZZ20physical_to_symbolicPK21block_size_descriptor25physical_compressed_blockP25symbolic_compressed_blockE14color_bits_arr, i64 0, i64 %327
  %350 = load i32, i32* %349, align 4
  %351 = sub nsw i32 %350, %205
  %352 = sub i32 %351, %325
  %353 = add nsw i32 %352, -2
  %354 = select i1 %177, i32 %353, i32 %352
  %355 = icmp sgt i32 %354, 0
  %356 = select i1 %355, i32 %354, i32 0
  %357 = ashr exact i32 %342, 1
  %358 = sext i32 %357 to i64
  %359 = zext i32 %356 to i64
  %360 = getelementptr inbounds [17 x [128 x i32]], [17 x [128 x i32]]* @quantization_mode_table, i64 0, i64 %358, i64 %359
  %361 = load i32, i32* %360, align 4
  %362 = getelementptr inbounds %struct.symbolic_compressed_block, %struct.symbolic_compressed_block* %3, i64 0, i32 7
  store i32 %361, i32* %362, align 4
  %363 = icmp slt i32 %361, 4
  br i1 %363, label %364, label %365

364:                                              ; preds = %348
  store i32 1, i32* %15, align 4
  br label %365

365:                                              ; preds = %364, %348
  %366 = getelementptr inbounds [32 x i8], [32 x i8]* %11, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %366) #3
  %367 = select i1 %231, i32 17, i32 29
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %366, i8 -86, i64 32, i1 false)
  call void @_Z10decode_iseiiPKhPhi(i32 %361, i32 %342, i8* nonnull %16, i8* nonnull %366, i32 %367) #4
  br label %368

368:                                              ; preds = %389, %365
  %369 = phi i64 [ %391, %389 ], [ 0, %365 ]
  %370 = phi i32 [ %390, %389 ], [ 0, %365 ]
  %371 = getelementptr inbounds [4 x i32], [4 x i32]* %9, i64 0, i64 %369
  %372 = load i32, i32* %371, align 4
  %373 = ashr i32 %372, 2
  %374 = shl nsw i32 %373, 1
  %375 = add nsw i32 %374, 2
  %376 = icmp sgt i32 %375, 0
  br i1 %376, label %377, label %389

377:                                              ; preds = %368
  %378 = sext i32 %370 to i64
  %379 = zext i32 %375 to i64
  br label %380

380:                                              ; preds = %380, %377
  %381 = phi i64 [ 0, %377 ], [ %387, %380 ]
  %382 = add nsw i64 %381, %378
  %383 = getelementptr inbounds [32 x i8], [32 x i8]* %11, i64 0, i64 %382
  %384 = load i8, i8* %383, align 1
  %385 = zext i8 %384 to i32
  %386 = getelementptr inbounds %struct.symbolic_compressed_block, %struct.symbolic_compressed_block* %3, i64 0, i32 6, i64 %369, i64 %381
  store i32 %385, i32* %386, align 4
  %387 = add nuw nsw i64 %381, 1
  %388 = icmp eq i64 %387, %379
  br i1 %388, label %389, label %380

389:                                              ; preds = %380, %368
  %390 = add nsw i32 %375, %370
  %391 = add nuw nsw i64 %369, 1
  %392 = icmp eq i64 %391, %327
  br i1 %392, label %393, label %368

393:                                              ; preds = %389
  br i1 %177, label %394, label %410

394:                                              ; preds = %393
  %395 = add nsw i32 %324, -2
  %396 = ashr i32 %395, 3
  %397 = sext i32 %396 to i64
  %398 = getelementptr inbounds <16 x i8>, <16 x i8>* %5, i64 0, i64 %397
  %399 = and i32 %395, 7
  %400 = load i8, i8* %398, align 1
  %401 = zext i8 %400 to i32
  %402 = getelementptr inbounds i8, i8* %398, i64 1
  %403 = load i8, i8* %402, align 1
  %404 = zext i8 %403 to i32
  %405 = shl nuw nsw i32 %404, 8
  %406 = or i32 %405, %401
  %407 = lshr i32 %406, %399
  %408 = and i32 %407, 3
  %409 = getelementptr inbounds %struct.symbolic_compressed_block, %struct.symbolic_compressed_block* %3, i64 0, i32 10
  store i32 %408, i32* %409, align 4
  br label %410

410:                                              ; preds = %394, %393
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %366) #3
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %10) #3
  br label %412

411:                                              ; preds = %62
  store i32 1, i32* %15, align 4
  br label %412

412:                                              ; preds = %411, %62, %114, %158, %410, %164
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %14) #3
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: optsize
declare i32 @_Z20compute_ise_bitcounti19quantization_method(i32, i32) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: optsize
declare void @_Z10decode_iseiiPKhPhi(i32, i32, i8*, i8*, i32) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

attributes #0 = { nounwind optsize ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { optsize "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }
attributes #4 = { nounwind optsize }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
