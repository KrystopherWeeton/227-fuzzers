; ModuleID = '../../third_party/blink/renderer/core/css/cssom/cross_thread_keyword_value.cc'
source_filename = "../../third_party/blink/renderer/core/css/cssom/cross_thread_keyword_value.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.blink::CSSStyleValue" = type { %"class.blink::ScriptWrappable", %"class.WTF::String" }
%"class.blink::ScriptWrappable" = type { %"class.blink::NameClient", %"class.blink::TraceWrapperV8Reference" }
%"class.blink::NameClient" = type { i32 (...)** }
%"class.blink::TraceWrapperV8Reference" = type { %"class.v8::TracedReference" }
%"class.v8::TracedReference" = type { %"class.v8::BasicTracedReference" }
%"class.v8::BasicTracedReference" = type { %"class.v8::TracedReferenceBase" }
%"class.v8::TracedReferenceBase" = type { i64* }
%"class.WTF::String" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.WTF::StringImpl"* }
%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.blink::CrossThreadKeywordValue" = type { %"class.blink::CrossThreadStyleValue", %"class.WTF::String" }
%"class.blink::CrossThreadStyleValue" = type { i32 (...)** }
%"class.blink::CSSKeywordValue" = type { %"class.blink::CSSStyleValue", %"class.WTF::String" }

$_ZN5blink23CrossThreadKeywordValueD2Ev = comdat any

$_ZN5blink23CrossThreadKeywordValueD0Ev = comdat any

$_ZNK5blink23CrossThreadKeywordValue7GetTypeEv = comdat any

@_ZTVN5blink23CrossThreadKeywordValueE = hidden unnamed_addr constant { [8 x i8*] } { [8 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.blink::CrossThreadKeywordValue"*)* @_ZN5blink23CrossThreadKeywordValueD2Ev to i8*), i8* bitcast (void (%"class.blink::CrossThreadKeywordValue"*)* @_ZN5blink23CrossThreadKeywordValueD0Ev to i8*), i8* bitcast (i32 (%"class.blink::CrossThreadKeywordValue"*)* @_ZNK5blink23CrossThreadKeywordValue7GetTypeEv to i8*), i8* bitcast (%"class.blink::CSSStyleValue"* (%"class.blink::CrossThreadKeywordValue"*)* @_ZN5blink23CrossThreadKeywordValue15ToCSSStyleValueEv to i8*), i8* bitcast (%"class.blink::CrossThreadStyleValue"* (%"class.blink::CrossThreadKeywordValue"*)* @_ZNK5blink23CrossThreadKeywordValue12IsolatedCopyEv to i8*), i8* bitcast (i1 (%"class.blink::CrossThreadKeywordValue"*, %"class.blink::CrossThreadStyleValue"*)* @_ZNK5blink23CrossThreadKeywordValueeqERKNS_21CrossThreadStyleValueE to i8*)] }, align 8

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::CSSStyleValue"* @_ZN5blink23CrossThreadKeywordValue15ToCSSStyleValueEv(%"class.blink::CrossThreadKeywordValue"*) unnamed_addr #0 align 2 {
  %2 = alloca %"class.WTF::String", align 8
  %3 = bitcast %"class.WTF::String"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %3) #7
  %4 = getelementptr inbounds %"class.blink::CrossThreadKeywordValue", %"class.blink::CrossThreadKeywordValue"* %0, i64 0, i32 1
  %5 = tail call %"class.WTF::StringImpl"* @_ZNK3WTF6String12IsolatedCopyEv(%"class.WTF::String"* %4) #7
  %6 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %2, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %5, %"class.WTF::StringImpl"** %6, align 8
  %7 = call %"class.blink::CSSKeywordValue"* @_ZN5blink15CSSKeywordValue6CreateERKN3WTF6StringE(%"class.WTF::String"* nonnull dereferenceable(8) %2) #7
  %8 = getelementptr inbounds %"class.blink::CSSKeywordValue", %"class.blink::CSSKeywordValue"* %7, i64 0, i32 0
  %9 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %6, align 8
  %10 = icmp eq %"class.WTF::StringImpl"* %9, null
  br i1 %10, label %24, label %11

11:                                               ; preds = %1
  %12 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %9, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %13 = load atomic i32, i32* %12 monotonic, align 4
  %14 = and i32 %13, 2
  %15 = icmp eq i32 %14, 0
  %16 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %9, i64 0, i32 0
  %17 = load i32, i32* %16, align 4
  br i1 %15, label %18, label %20

18:                                               ; preds = %11
  %19 = add i32 %17, -1
  store i32 %19, i32* %16, align 4
  br label %20

20:                                               ; preds = %18, %11
  %21 = phi i32 [ %19, %18 ], [ %17, %11 ]
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %23, label %24

23:                                               ; preds = %20
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %9) #7
  br label %24

24:                                               ; preds = %1, %20, %23
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %3) #7
  ret %"class.blink::CSSStyleValue"* %8
}

declare %"class.blink::CSSKeywordValue"* @_ZN5blink15CSSKeywordValue6CreateERKN3WTF6StringE(%"class.WTF::String"* dereferenceable(8)) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

declare %"class.WTF::StringImpl"* @_ZNK3WTF6String12IsolatedCopyEv(%"class.WTF::String"*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK5blink23CrossThreadKeywordValueeqERKNS_21CrossThreadStyleValueE(%"class.blink::CrossThreadKeywordValue"* nocapture readonly, %"class.blink::CrossThreadStyleValue"* dereferenceable(8)) unnamed_addr #0 align 2 {
  %3 = bitcast %"class.blink::CrossThreadStyleValue"* %1 to i32 (%"class.blink::CrossThreadStyleValue"*)***
  %4 = load i32 (%"class.blink::CrossThreadStyleValue"*)**, i32 (%"class.blink::CrossThreadStyleValue"*)*** %3, align 8
  %5 = getelementptr inbounds i32 (%"class.blink::CrossThreadStyleValue"*)*, i32 (%"class.blink::CrossThreadStyleValue"*)** %4, i64 2
  %6 = load i32 (%"class.blink::CrossThreadStyleValue"*)*, i32 (%"class.blink::CrossThreadStyleValue"*)** %5, align 8
  %7 = tail call i32 %6(%"class.blink::CrossThreadStyleValue"* %1) #7
  %8 = icmp ne i32 %7, 2
  %9 = icmp eq %"class.blink::CrossThreadStyleValue"* %1, null
  %10 = or i1 %9, %8
  br i1 %10, label %18, label %11

11:                                               ; preds = %2
  %12 = getelementptr inbounds %"class.blink::CrossThreadStyleValue", %"class.blink::CrossThreadStyleValue"* %1, i64 1
  %13 = getelementptr inbounds %"class.blink::CrossThreadKeywordValue", %"class.blink::CrossThreadKeywordValue"* %0, i64 0, i32 1, i32 0, i32 0
  %14 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %13, align 8
  %15 = bitcast %"class.blink::CrossThreadStyleValue"* %12 to %"class.WTF::StringImpl"**
  %16 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %15, align 8
  %17 = tail call zeroext i1 @_ZN3WTF5EqualEPKNS_10StringImplES2_(%"class.WTF::StringImpl"* %14, %"class.WTF::StringImpl"* %16) #7
  br label %18

18:                                               ; preds = %2, %11
  %19 = phi i1 [ %17, %11 ], [ false, %2 ]
  ret i1 %19
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::CrossThreadStyleValue"* @_ZNK5blink23CrossThreadKeywordValue12IsolatedCopyEv(%"class.blink::CrossThreadKeywordValue"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::CrossThreadKeywordValue", %"class.blink::CrossThreadKeywordValue"* %0, i64 0, i32 1
  %3 = tail call %"class.WTF::StringImpl"* @_ZNK3WTF6String12IsolatedCopyEv(%"class.WTF::String"* %2) #7
  %4 = tail call i8* @_Znwm(i64 16) #8
  %5 = bitcast i8* %4 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*] }, { [8 x i8*] }* @_ZTVN5blink23CrossThreadKeywordValueE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  %6 = getelementptr inbounds i8, i8* %4, i64 8
  %7 = bitcast i8* %6 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %3, %"class.WTF::StringImpl"** %7, align 8
  %8 = icmp eq %"class.WTF::StringImpl"* %3, null
  br i1 %8, label %26, label %9

9:                                                ; preds = %1
  %10 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %3, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %11 = load atomic i32, i32* %10 monotonic, align 4
  %12 = and i32 %11, 2
  %13 = icmp eq i32 %12, 0
  %14 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %3, i64 0, i32 0
  %15 = load i32, i32* %14, align 4
  br i1 %13, label %16, label %28

16:                                               ; preds = %9
  %17 = zext i32 %15 to i33
  %18 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %17, i33 1) #7
  %19 = extractvalue { i33, i1 } %18, 1
  %20 = extractvalue { i33, i1 } %18, 0
  %21 = icmp slt i33 %20, 0
  %22 = or i1 %19, %21
  br i1 %22, label %23, label %24, !prof !2

23:                                               ; preds = %16
  tail call void @llvm.trap() #7
  unreachable

24:                                               ; preds = %16
  %25 = trunc i33 %20 to i32
  store i32 %25, i32* %14, align 4
  br label %28

26:                                               ; preds = %1
  %27 = ptrtoint i8* %4 to i64
  br label %41

28:                                               ; preds = %9, %24
  %29 = phi i32 [ %25, %24 ], [ %15, %9 ]
  %30 = ptrtoint i8* %4 to i64
  %31 = load atomic i32, i32* %10 monotonic, align 4
  %32 = and i32 %31, 2
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %34, label %37

34:                                               ; preds = %28
  %35 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %3, i64 0, i32 0
  %36 = add i32 %29, -1
  store i32 %36, i32* %35, align 4
  br label %37

37:                                               ; preds = %34, %28
  %38 = phi i32 [ %36, %34 ], [ %29, %28 ]
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %40, label %41

40:                                               ; preds = %37
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %3) #7
  br label %41

41:                                               ; preds = %26, %37, %40
  %42 = phi i64 [ %27, %26 ], [ %30, %37 ], [ %30, %40 ]
  %43 = inttoptr i64 %42 to %"class.blink::CrossThreadStyleValue"*
  ret %"class.blink::CrossThreadStyleValue"* %43
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink23CrossThreadKeywordValueD2Ev(%"class.blink::CrossThreadKeywordValue"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::CrossThreadKeywordValue", %"class.blink::CrossThreadKeywordValue"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*] }, { [8 x i8*] }* @_ZTVN5blink23CrossThreadKeywordValueE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.blink::CrossThreadKeywordValue", %"class.blink::CrossThreadKeywordValue"* %0, i64 0, i32 1, i32 0, i32 0
  %4 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %3, align 8
  %5 = icmp eq %"class.WTF::StringImpl"* %4, null
  br i1 %5, label %19, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %4, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %8 = load atomic i32, i32* %7 monotonic, align 4
  %9 = and i32 %8, 2
  %10 = icmp eq i32 %9, 0
  %11 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %4, i64 0, i32 0
  %12 = load i32, i32* %11, align 4
  br i1 %10, label %13, label %15

13:                                               ; preds = %6
  %14 = add i32 %12, -1
  store i32 %14, i32* %11, align 4
  br label %15

15:                                               ; preds = %13, %6
  %16 = phi i32 [ %14, %13 ], [ %12, %6 ]
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %18, label %19

18:                                               ; preds = %15
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %4) #7
  br label %19

19:                                               ; preds = %1, %15, %18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink23CrossThreadKeywordValueD0Ev(%"class.blink::CrossThreadKeywordValue"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::CrossThreadKeywordValue", %"class.blink::CrossThreadKeywordValue"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*] }, { [8 x i8*] }* @_ZTVN5blink23CrossThreadKeywordValueE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.blink::CrossThreadKeywordValue", %"class.blink::CrossThreadKeywordValue"* %0, i64 0, i32 1, i32 0, i32 0
  %4 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %3, align 8
  %5 = icmp eq %"class.WTF::StringImpl"* %4, null
  br i1 %5, label %19, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %4, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %8 = load atomic i32, i32* %7 monotonic, align 4
  %9 = and i32 %8, 2
  %10 = icmp eq i32 %9, 0
  %11 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %4, i64 0, i32 0
  %12 = load i32, i32* %11, align 4
  br i1 %10, label %13, label %15

13:                                               ; preds = %6
  %14 = add i32 %12, -1
  store i32 %14, i32* %11, align 4
  br label %15

15:                                               ; preds = %13, %6
  %16 = phi i32 [ %14, %13 ], [ %12, %6 ]
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %18, label %19

18:                                               ; preds = %15
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %4) #7
  br label %19

19:                                               ; preds = %1, %15, %18
  %20 = bitcast %"class.blink::CrossThreadKeywordValue"* %0 to i8*
  tail call void @_ZdlPv(i8* %20) #8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK5blink23CrossThreadKeywordValue7GetTypeEv(%"class.blink::CrossThreadKeywordValue"*) unnamed_addr #0 comdat align 2 {
  ret i32 2
}

declare void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"*) local_unnamed_addr #1

declare zeroext i1 @_ZN3WTF5EqualEPKNS_10StringImplES2_(%"class.WTF::StringImpl"*, %"class.WTF::StringImpl"*) local_unnamed_addr #1

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #4

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #5

; Function Attrs: nounwind readnone speculatable
declare { i33, i1 } @llvm.sadd.with.overflow.i33(i33, i33) #6

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { cold noreturn nounwind }
attributes #6 = { nounwind readnone speculatable }
attributes #7 = { nounwind }
attributes #8 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
