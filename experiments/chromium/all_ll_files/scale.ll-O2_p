; ModuleID = '../../third_party/libyuv/source/scale.cc'
source_filename = "../../third_party/libyuv/source/scale.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@cpu_info_ = external local_unnamed_addr global i32, align 4

; Function Attrs: nounwind ssp uwtable
define hidden void @ScalePlaneBilinearDown(i32, i32, i32, i32, i32, i32, i8*, i8*, i32) local_unnamed_addr #0 {
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %14) #6
  store i32 0, i32* %10, align 4
  %15 = bitcast i32* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %15) #6
  store i32 0, i32* %11, align 4
  %16 = bitcast i32* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %16) #6
  store i32 0, i32* %12, align 4
  %17 = bitcast i32* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %17) #6
  store i32 0, i32* %13, align 4
  %18 = add nsw i32 %0, 63
  %19 = sext i32 %18 to i64
  %20 = tail call noalias i8* @malloc(i64 %19) #6
  %21 = ptrtoint i8* %20 to i64
  %22 = add nsw i64 %21, 63
  %23 = and i64 %22, -64
  %24 = inttoptr i64 %23 to i8*
  %25 = shl i32 %1, 16
  %26 = add i32 %25, -65536
  %27 = icmp sgt i32 %0, 32767
  %28 = select i1 %27, void (i8*, i8*, i32, i32, i32)* @ScaleFilterCols64_C, void (i8*, i8*, i32, i32, i32)* @ScaleFilterCols_C
  call void @ScaleSlope(i32 %0, i32 %1, i32 %2, i32 %3, i32 %8, i32* nonnull %10, i32* nonnull %11, i32* nonnull %12, i32* nonnull %13) #6
  %29 = icmp slt i32 %0, 0
  %30 = sub nsw i32 0, %0
  %31 = select i1 %29, i32 %30, i32 %0
  %32 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %34, label %36

34:                                               ; preds = %9
  %35 = call i32 @InitCpuFlags() #6
  br label %36

36:                                               ; preds = %9, %34
  %37 = phi i32 [ %35, %34 ], [ %32, %9 ]
  %38 = and i32 %37, 64
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %44, label %40

40:                                               ; preds = %36
  %41 = and i32 %31, 15
  %42 = icmp eq i32 %41, 0
  %43 = select i1 %42, void (i8*, i8*, i64, i32, i32)* @InterpolateRow_SSSE3, void (i8*, i8*, i64, i32, i32)* @InterpolateRow_Any_SSSE3
  br label %44

44:                                               ; preds = %36, %40
  %45 = phi void (i8*, i8*, i64, i32, i32)* [ %43, %40 ], [ @InterpolateRow_C, %36 ]
  %46 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %48, label %50

48:                                               ; preds = %44
  %49 = call i32 @InitCpuFlags() #6
  br label %50

50:                                               ; preds = %44, %48
  %51 = phi i32 [ %49, %48 ], [ %46, %44 ]
  %52 = and i32 %51, 1024
  %53 = icmp eq i32 %52, 0
  br i1 %53, label %58, label %54

54:                                               ; preds = %50
  %55 = and i32 %31, 31
  %56 = icmp eq i32 %55, 0
  %57 = select i1 %56, void (i8*, i8*, i64, i32, i32)* @InterpolateRow_AVX2, void (i8*, i8*, i64, i32, i32)* @InterpolateRow_Any_AVX2
  br label %58

58:                                               ; preds = %50, %54
  %59 = phi void (i8*, i8*, i64, i32, i32)* [ %57, %54 ], [ %45, %50 ]
  %60 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %62, label %64

62:                                               ; preds = %58
  %63 = call i32 @InitCpuFlags() #6
  br label %64

64:                                               ; preds = %58, %62
  %65 = phi i32 [ %63, %62 ], [ %60, %58 ]
  %66 = and i32 %65, 64
  %67 = icmp ne i32 %66, 0
  %68 = icmp slt i32 %31, 32768
  %69 = and i1 %68, %67
  %70 = select i1 %69, void (i8*, i8*, i32, i32, i32)* @ScaleFilterCols_SSSE3, void (i8*, i8*, i32, i32, i32)* %28
  %71 = load i32, i32* %11, align 4
  %72 = icmp sgt i32 %71, %26
  br i1 %72, label %73, label %74

73:                                               ; preds = %64
  store i32 %26, i32* %11, align 4
  br label %74

74:                                               ; preds = %73, %64
  %75 = phi i32 [ %26, %73 ], [ %71, %64 ]
  %76 = icmp sgt i32 %3, 0
  br i1 %76, label %77, label %106

77:                                               ; preds = %74
  %78 = icmp eq i32 %8, 1
  %79 = sext i32 %4 to i64
  %80 = sext i32 %5 to i64
  br label %81

81:                                               ; preds = %97, %77
  %82 = phi i32 [ %75, %77 ], [ %103, %97 ]
  %83 = phi i8* [ %7, %77 ], [ %98, %97 ]
  %84 = phi i32 [ 0, %77 ], [ %104, %97 ]
  %85 = ashr i32 %82, 16
  %86 = mul nsw i32 %85, %4
  %87 = sext i32 %86 to i64
  %88 = getelementptr inbounds i8, i8* %6, i64 %87
  br i1 %78, label %89, label %92

89:                                               ; preds = %81
  %90 = load i32, i32* %10, align 4
  %91 = load i32, i32* %12, align 4
  call void %70(i8* %83, i8* %88, i32 %2, i32 %90, i32 %91) #6, !callees !2
  br label %97

92:                                               ; preds = %81
  %93 = lshr i32 %82, 8
  %94 = and i32 %93, 255
  call void %59(i8* %24, i8* %88, i64 %79, i32 %31, i32 %94) #6
  %95 = load i32, i32* %10, align 4
  %96 = load i32, i32* %12, align 4
  call void %70(i8* %83, i8* %24, i32 %2, i32 %95, i32 %96) #6, !callees !2
  br label %97

97:                                               ; preds = %92, %89
  %98 = getelementptr inbounds i8, i8* %83, i64 %80
  %99 = load i32, i32* %13, align 4
  %100 = load i32, i32* %11, align 4
  %101 = add nsw i32 %100, %99
  %102 = icmp sgt i32 %101, %26
  %103 = select i1 %102, i32 %26, i32 %101
  store i32 %103, i32* %11, align 4
  %104 = add nuw nsw i32 %84, 1
  %105 = icmp eq i32 %104, %3
  br i1 %105, label %106, label %81

106:                                              ; preds = %97, %74
  call void @free(i8* %20) #6
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %17) #6
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %16) #6
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %15) #6
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %14) #6
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree nounwind
declare noalias i8* @malloc(i64) local_unnamed_addr #2

declare void @ScaleFilterCols64_C(i8*, i8*, i32, i32, i32) local_unnamed_addr #3

declare void @ScaleFilterCols_C(i8*, i8*, i32, i32, i32) local_unnamed_addr #3

declare void @InterpolateRow_C(i8*, i8*, i64, i32, i32) local_unnamed_addr #3

declare void @ScaleSlope(i32, i32, i32, i32, i32, i32*, i32*, i32*, i32*) local_unnamed_addr #3

declare void @InterpolateRow_Any_SSSE3(i8*, i8*, i64, i32, i32) local_unnamed_addr #3

declare void @InterpolateRow_SSSE3(i8*, i8*, i64, i32, i32) local_unnamed_addr #3

declare void @InterpolateRow_Any_AVX2(i8*, i8*, i64, i32, i32) local_unnamed_addr #3

declare void @InterpolateRow_AVX2(i8*, i8*, i64, i32, i32) local_unnamed_addr #3

declare void @ScaleFilterCols_SSSE3(i8*, i8*, i32, i32, i32) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @ScalePlaneBilinearDown_16(i32, i32, i32, i32, i32, i32, i16*, i16*, i32) local_unnamed_addr #0 {
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %14) #6
  store i32 0, i32* %10, align 4
  %15 = bitcast i32* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %15) #6
  store i32 0, i32* %11, align 4
  %16 = bitcast i32* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %16) #6
  store i32 0, i32* %12, align 4
  %17 = bitcast i32* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %17) #6
  store i32 0, i32* %13, align 4
  %18 = shl i32 %0, 1
  %19 = add nsw i32 %18, 63
  %20 = sext i32 %19 to i64
  %21 = tail call noalias i8* @malloc(i64 %20) #6
  %22 = ptrtoint i8* %21 to i64
  %23 = add nsw i64 %22, 63
  %24 = and i64 %23, -64
  %25 = shl i32 %1, 16
  %26 = add i32 %25, -65536
  %27 = icmp sgt i32 %0, 32767
  %28 = select i1 %27, void (i16*, i16*, i32, i32, i32)* @ScaleFilterCols64_16_C, void (i16*, i16*, i32, i32, i32)* @ScaleFilterCols_16_C
  call void @ScaleSlope(i32 %0, i32 %1, i32 %2, i32 %3, i32 %8, i32* nonnull %10, i32* nonnull %11, i32* nonnull %12, i32* nonnull %13) #6
  %29 = icmp slt i32 %0, 0
  %30 = sub nsw i32 0, %0
  %31 = select i1 %29, i32 %30, i32 %0
  %32 = load i32, i32* %11, align 4
  %33 = icmp sgt i32 %32, %26
  br i1 %33, label %34, label %35

34:                                               ; preds = %9
  store i32 %26, i32* %11, align 4
  br label %35

35:                                               ; preds = %34, %9
  %36 = phi i32 [ %26, %34 ], [ %32, %9 ]
  %37 = icmp sgt i32 %3, 0
  br i1 %37, label %38, label %68

38:                                               ; preds = %35
  %39 = icmp eq i32 %8, 1
  %40 = inttoptr i64 %24 to i16*
  %41 = sext i32 %4 to i64
  %42 = sext i32 %5 to i64
  br label %43

43:                                               ; preds = %59, %38
  %44 = phi i32 [ %36, %38 ], [ %65, %59 ]
  %45 = phi i16* [ %7, %38 ], [ %60, %59 ]
  %46 = phi i32 [ 0, %38 ], [ %66, %59 ]
  %47 = ashr i32 %44, 16
  %48 = mul nsw i32 %47, %4
  %49 = sext i32 %48 to i64
  %50 = getelementptr inbounds i16, i16* %6, i64 %49
  br i1 %39, label %51, label %54

51:                                               ; preds = %43
  %52 = load i32, i32* %10, align 4
  %53 = load i32, i32* %12, align 4
  call void %28(i16* %45, i16* %50, i32 %2, i32 %52, i32 %53) #6, !callees !3
  br label %59

54:                                               ; preds = %43
  %55 = lshr i32 %44, 8
  %56 = and i32 %55, 255
  call void @InterpolateRow_16_C(i16* %40, i16* %50, i64 %41, i32 %31, i32 %56) #6
  %57 = load i32, i32* %10, align 4
  %58 = load i32, i32* %12, align 4
  call void %28(i16* %45, i16* %40, i32 %2, i32 %57, i32 %58) #6, !callees !3
  br label %59

59:                                               ; preds = %54, %51
  %60 = getelementptr inbounds i16, i16* %45, i64 %42
  %61 = load i32, i32* %13, align 4
  %62 = load i32, i32* %11, align 4
  %63 = add nsw i32 %62, %61
  %64 = icmp sgt i32 %63, %26
  %65 = select i1 %64, i32 %26, i32 %63
  store i32 %65, i32* %11, align 4
  %66 = add nuw nsw i32 %46, 1
  %67 = icmp eq i32 %66, %3
  br i1 %67, label %68, label %43

68:                                               ; preds = %59, %35
  call void @free(i8* %21) #6
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %17) #6
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %16) #6
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %15) #6
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %14) #6
  ret void
}

declare void @ScaleFilterCols64_16_C(i16*, i16*, i32, i32, i32) local_unnamed_addr #3

declare void @ScaleFilterCols_16_C(i16*, i16*, i32, i32, i32) local_unnamed_addr #3

declare void @InterpolateRow_16_C(i16*, i16*, i64, i32, i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @ScalePlaneBilinearUp(i32, i32, i32, i32, i32, i32, i8*, i8*, i32) local_unnamed_addr #0 {
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %14) #6
  store i32 0, i32* %10, align 4
  %15 = bitcast i32* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %15) #6
  store i32 0, i32* %11, align 4
  %16 = bitcast i32* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %16) #6
  store i32 0, i32* %12, align 4
  %17 = bitcast i32* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %17) #6
  store i32 0, i32* %13, align 4
  %18 = shl i32 %1, 16
  %19 = add i32 %18, -65536
  %20 = icmp ne i32 %8, 0
  %21 = select i1 %20, void (i8*, i8*, i32, i32, i32)* @ScaleFilterCols_C, void (i8*, i8*, i32, i32, i32)* @ScaleCols_C
  call void @ScaleSlope(i32 %0, i32 %1, i32 %2, i32 %3, i32 %8, i32* nonnull %10, i32* nonnull %11, i32* nonnull %12, i32* nonnull %13) #6
  %22 = icmp slt i32 %0, 0
  %23 = sub nsw i32 0, %0
  %24 = select i1 %22, i32 %23, i32 %0
  %25 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %27, label %29

27:                                               ; preds = %9
  %28 = call i32 @InitCpuFlags() #6
  br label %29

29:                                               ; preds = %9, %27
  %30 = phi i32 [ %28, %27 ], [ %25, %9 ]
  %31 = and i32 %30, 64
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %37, label %33

33:                                               ; preds = %29
  %34 = and i32 %2, 15
  %35 = icmp eq i32 %34, 0
  %36 = select i1 %35, void (i8*, i8*, i64, i32, i32)* @InterpolateRow_SSSE3, void (i8*, i8*, i64, i32, i32)* @InterpolateRow_Any_SSSE3
  br label %37

37:                                               ; preds = %29, %33
  %38 = phi void (i8*, i8*, i64, i32, i32)* [ %36, %33 ], [ @InterpolateRow_C, %29 ]
  %39 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %41, label %43

41:                                               ; preds = %37
  %42 = call i32 @InitCpuFlags() #6
  br label %43

43:                                               ; preds = %37, %41
  %44 = phi i32 [ %42, %41 ], [ %39, %37 ]
  %45 = and i32 %44, 1024
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %51, label %47

47:                                               ; preds = %43
  %48 = and i32 %2, 31
  %49 = icmp eq i32 %48, 0
  %50 = select i1 %49, void (i8*, i8*, i64, i32, i32)* @InterpolateRow_AVX2, void (i8*, i8*, i64, i32, i32)* @InterpolateRow_Any_AVX2
  br label %51

51:                                               ; preds = %43, %47
  %52 = phi void (i8*, i8*, i64, i32, i32)* [ %50, %47 ], [ %38, %43 ]
  %53 = icmp sgt i32 %24, 32767
  %54 = and i1 %53, %20
  %55 = select i1 %54, void (i8*, i8*, i32, i32, i32)* @ScaleFilterCols64_C, void (i8*, i8*, i32, i32, i32)* %21
  br i1 %20, label %56, label %68

56:                                               ; preds = %51
  %57 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %59, label %61

59:                                               ; preds = %56
  %60 = call i32 @InitCpuFlags() #6
  br label %61

61:                                               ; preds = %59, %56
  %62 = phi i32 [ %60, %59 ], [ %57, %56 ]
  %63 = and i32 %62, 64
  %64 = icmp ne i32 %63, 0
  %65 = icmp slt i32 %24, 32768
  %66 = and i1 %65, %64
  %67 = select i1 %66, void (i8*, i8*, i32, i32, i32)* @ScaleFilterCols_SSSE3, void (i8*, i8*, i32, i32, i32)* %55
  br label %75

68:                                               ; preds = %51
  %69 = shl nuw nsw i32 %24, 1
  %70 = icmp eq i32 %69, %2
  %71 = load i32, i32* %10, align 4
  %72 = icmp slt i32 %71, 32768
  %73 = and i1 %70, %72
  %74 = select i1 %73, void (i8*, i8*, i32, i32, i32)* @ScaleColsUp2_C, void (i8*, i8*, i32, i32, i32)* %21
  br label %75

75:                                               ; preds = %61, %68
  %76 = phi void (i8*, i8*, i32, i32, i32)* [ %74, %68 ], [ %67, %61 ]
  %77 = load i32, i32* %11, align 4
  %78 = icmp sgt i32 %77, %19
  br i1 %78, label %79, label %80

79:                                               ; preds = %75
  store i32 %19, i32* %11, align 4
  br label %80

80:                                               ; preds = %79, %75
  %81 = phi i32 [ %19, %79 ], [ %77, %75 ]
  %82 = ashr i32 %81, 16
  %83 = mul nsw i32 %82, %4
  %84 = sext i32 %83 to i64
  %85 = getelementptr inbounds i8, i8* %6, i64 %84
  %86 = add nsw i32 %2, 31
  %87 = and i32 %86, -32
  %88 = shl nsw i32 %86, 1
  %89 = or i32 %88, 63
  %90 = sext i32 %89 to i64
  %91 = call noalias i8* @malloc(i64 %90) #6
  %92 = ptrtoint i8* %91 to i64
  %93 = add nsw i64 %92, 63
  %94 = and i64 %93, -64
  %95 = inttoptr i64 %94 to i8*
  %96 = load i32, i32* %10, align 4
  %97 = load i32, i32* %12, align 4
  call void %76(i8* %95, i8* %85, i32 %2, i32 %96, i32 %97) #6
  %98 = icmp sgt i32 %1, 1
  %99 = sext i32 %4 to i64
  %100 = getelementptr inbounds i8, i8* %85, i64 %99
  %101 = select i1 %98, i8* %100, i8* %85
  %102 = sext i32 %87 to i64
  %103 = getelementptr inbounds i8, i8* %95, i64 %102
  %104 = load i32, i32* %10, align 4
  %105 = load i32, i32* %12, align 4
  call void %76(i8* %103, i8* %101, i32 %2, i32 %104, i32 %105) #6
  %106 = icmp sgt i32 %3, 0
  br i1 %106, label %107, label %158

107:                                              ; preds = %80
  %108 = getelementptr inbounds i8, i8* %101, i64 %99
  %109 = ashr exact i32 %19, 16
  %110 = mul nsw i32 %109, %4
  %111 = sext i32 %110 to i64
  %112 = getelementptr inbounds i8, i8* %6, i64 %111
  %113 = icmp eq i32 %8, 1
  %114 = sext i32 %5 to i64
  %115 = load i32, i32* %11, align 4
  br label %116

116:                                              ; preds = %151, %107
  %117 = phi i32 [ %115, %107 ], [ %155, %151 ]
  %118 = phi i32 [ %82, %107 ], [ %144, %151 ]
  %119 = phi i32 [ %87, %107 ], [ %143, %151 ]
  %120 = phi i8* [ %95, %107 ], [ %142, %151 ]
  %121 = phi i8* [ %7, %107 ], [ %152, %151 ]
  %122 = phi i8* [ %108, %107 ], [ %141, %151 ]
  %123 = phi i32 [ 0, %107 ], [ %156, %151 ]
  %124 = ashr i32 %117, 16
  %125 = icmp eq i32 %124, %118
  br i1 %125, label %140, label %126

126:                                              ; preds = %116
  %127 = icmp sgt i32 %117, %19
  br i1 %127, label %128, label %129

128:                                              ; preds = %126
  store i32 %19, i32* %11, align 4
  br label %129

129:                                              ; preds = %128, %126
  %130 = phi i32 [ %109, %128 ], [ %124, %126 ]
  %131 = phi i8* [ %112, %128 ], [ %122, %126 ]
  %132 = icmp eq i32 %130, %118
  br i1 %132, label %140, label %133

133:                                              ; preds = %129
  %134 = load i32, i32* %10, align 4
  %135 = load i32, i32* %12, align 4
  call void %76(i8* %120, i8* %131, i32 %2, i32 %134, i32 %135) #6
  %136 = sext i32 %119 to i64
  %137 = getelementptr inbounds i8, i8* %120, i64 %136
  %138 = sub nsw i32 0, %119
  %139 = getelementptr inbounds i8, i8* %131, i64 %99
  br label %140

140:                                              ; preds = %129, %116, %133
  %141 = phi i8* [ %139, %133 ], [ %131, %129 ], [ %122, %116 ]
  %142 = phi i8* [ %137, %133 ], [ %120, %129 ], [ %120, %116 ]
  %143 = phi i32 [ %138, %133 ], [ %119, %129 ], [ %119, %116 ]
  %144 = phi i32 [ %130, %133 ], [ %118, %129 ], [ %118, %116 ]
  br i1 %113, label %145, label %146

145:                                              ; preds = %140
  call void %52(i8* %121, i8* %142, i64 0, i32 %2, i32 0) #6
  br label %151

146:                                              ; preds = %140
  %147 = load i32, i32* %11, align 4
  %148 = lshr i32 %147, 8
  %149 = and i32 %148, 255
  %150 = sext i32 %143 to i64
  call void %52(i8* %121, i8* %142, i64 %150, i32 %2, i32 %149) #6
  br label %151

151:                                              ; preds = %146, %145
  %152 = getelementptr inbounds i8, i8* %121, i64 %114
  %153 = load i32, i32* %13, align 4
  %154 = load i32, i32* %11, align 4
  %155 = add nsw i32 %154, %153
  store i32 %155, i32* %11, align 4
  %156 = add nuw nsw i32 %123, 1
  %157 = icmp eq i32 %156, %3
  br i1 %157, label %158, label %116

158:                                              ; preds = %151, %80
  call void @free(i8* %91) #6
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %17) #6
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %16) #6
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %15) #6
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %14) #6
  ret void
}

declare void @ScaleCols_C(i8*, i8*, i32, i32, i32) local_unnamed_addr #3

declare void @ScaleColsUp2_C(i8*, i8*, i32, i32, i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @ScalePlaneUp2_Linear(i32, i32, i32, i32, i32, i32, i8*, i8*) local_unnamed_addr #0 {
  %9 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %13

11:                                               ; preds = %8
  %12 = tail call i32 @InitCpuFlags() #6
  br label %13

13:                                               ; preds = %8, %11
  %14 = phi i32 [ %12, %11 ], [ %9, %8 ]
  %15 = and i32 %14, 32
  %16 = icmp eq i32 %15, 0
  %17 = select i1 %16, void (i8*, i8*, i32)* @ScaleRowUp2_Linear_Any_C, void (i8*, i8*, i32)* @ScaleRowUp2_Linear_Any_SSE2
  %18 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %20, label %22

20:                                               ; preds = %13
  %21 = tail call i32 @InitCpuFlags() #6
  br label %22

22:                                               ; preds = %13, %20
  %23 = phi i32 [ %21, %20 ], [ %18, %13 ]
  %24 = and i32 %23, 64
  %25 = icmp eq i32 %24, 0
  %26 = select i1 %25, void (i8*, i8*, i32)* %17, void (i8*, i8*, i32)* @ScaleRowUp2_Linear_Any_SSSE3
  %27 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %29, label %31

29:                                               ; preds = %22
  %30 = tail call i32 @InitCpuFlags() #6
  br label %31

31:                                               ; preds = %22, %29
  %32 = phi i32 [ %30, %29 ], [ %27, %22 ]
  %33 = and i32 %32, 1024
  %34 = icmp eq i32 %33, 0
  %35 = select i1 %34, void (i8*, i8*, i32)* %26, void (i8*, i8*, i32)* @ScaleRowUp2_Linear_Any_AVX2
  %36 = icmp eq i32 %3, 1
  %37 = add nsw i32 %1, -1
  br i1 %36, label %38, label %43

38:                                               ; preds = %31
  %39 = sdiv i32 %37, 2
  %40 = mul nsw i32 %39, %4
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds i8, i8* %6, i64 %41
  tail call void %35(i8* %42, i8* %7, i32 %2) #6, !callees !4
  br label %61

43:                                               ; preds = %31
  %44 = add nsw i32 %3, -1
  %45 = tail call i32 @FixedDiv_X86(i32 %37, i32 %44) #6
  %46 = icmp sgt i32 %3, 0
  br i1 %46, label %47, label %61

47:                                               ; preds = %43
  %48 = sext i32 %5 to i64
  br label %49

49:                                               ; preds = %49, %47
  %50 = phi i32 [ 32767, %47 ], [ %58, %49 ]
  %51 = phi i32 [ 0, %47 ], [ %59, %49 ]
  %52 = phi i8* [ %7, %47 ], [ %57, %49 ]
  %53 = ashr i32 %50, 16
  %54 = mul nsw i32 %53, %4
  %55 = sext i32 %54 to i64
  %56 = getelementptr inbounds i8, i8* %6, i64 %55
  tail call void %35(i8* %56, i8* %52, i32 %2) #6, !callees !4
  %57 = getelementptr inbounds i8, i8* %52, i64 %48
  %58 = add nsw i32 %50, %45
  %59 = add nuw nsw i32 %51, 1
  %60 = icmp eq i32 %59, %3
  br i1 %60, label %61, label %49

61:                                               ; preds = %49, %43, %38
  ret void
}

declare void @ScaleRowUp2_Linear_Any_C(i8*, i8*, i32) local_unnamed_addr #3

declare void @ScaleRowUp2_Linear_Any_SSE2(i8*, i8*, i32) local_unnamed_addr #3

declare void @ScaleRowUp2_Linear_Any_SSSE3(i8*, i8*, i32) local_unnamed_addr #3

declare void @ScaleRowUp2_Linear_Any_AVX2(i8*, i8*, i32) local_unnamed_addr #3

declare i32 @FixedDiv_X86(i32, i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @ScalePlaneUp2_Bilinear(i32, i32, i32, i32, i32, i32, i8*, i8*) local_unnamed_addr #0 {
  %9 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %13

11:                                               ; preds = %8
  %12 = tail call i32 @InitCpuFlags() #6
  br label %13

13:                                               ; preds = %8, %11
  %14 = phi i32 [ %12, %11 ], [ %9, %8 ]
  %15 = and i32 %14, 32
  %16 = icmp eq i32 %15, 0
  %17 = select i1 %16, void (i8*, i64, i8*, i64, i32)* @ScaleRowUp2_Bilinear_Any_C, void (i8*, i64, i8*, i64, i32)* @ScaleRowUp2_Bilinear_Any_SSE2
  %18 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %20, label %22

20:                                               ; preds = %13
  %21 = tail call i32 @InitCpuFlags() #6
  br label %22

22:                                               ; preds = %13, %20
  %23 = phi i32 [ %21, %20 ], [ %18, %13 ]
  %24 = and i32 %23, 64
  %25 = icmp eq i32 %24, 0
  %26 = select i1 %25, void (i8*, i64, i8*, i64, i32)* %17, void (i8*, i64, i8*, i64, i32)* @ScaleRowUp2_Bilinear_Any_SSSE3
  %27 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %29, label %31

29:                                               ; preds = %22
  %30 = tail call i32 @InitCpuFlags() #6
  br label %31

31:                                               ; preds = %22, %29
  %32 = phi i32 [ %30, %29 ], [ %27, %22 ]
  %33 = and i32 %32, 1024
  %34 = icmp eq i32 %33, 0
  %35 = select i1 %34, void (i8*, i64, i8*, i64, i32)* %26, void (i8*, i64, i8*, i64, i32)* @ScaleRowUp2_Bilinear_Any_AVX2
  tail call void %35(i8* %6, i64 0, i8* %7, i64 0, i32 %2) #6, !callees !5
  %36 = sext i32 %5 to i64
  %37 = getelementptr inbounds i8, i8* %7, i64 %36
  %38 = add i32 %1, -1
  %39 = icmp sgt i32 %38, 0
  br i1 %39, label %40, label %52

40:                                               ; preds = %31
  %41 = sext i32 %4 to i64
  %42 = shl nsw i32 %5, 1
  %43 = sext i32 %42 to i64
  br label %44

44:                                               ; preds = %44, %40
  %45 = phi i32 [ 0, %40 ], [ %50, %44 ]
  %46 = phi i8* [ %37, %40 ], [ %49, %44 ]
  %47 = phi i8* [ %6, %40 ], [ %48, %44 ]
  tail call void %35(i8* %47, i64 %41, i8* %46, i64 %36, i32 %2) #6, !callees !5
  %48 = getelementptr inbounds i8, i8* %47, i64 %41
  %49 = getelementptr inbounds i8, i8* %46, i64 %43
  %50 = add nuw nsw i32 %45, 1
  %51 = icmp eq i32 %50, %38
  br i1 %51, label %52, label %44

52:                                               ; preds = %44, %31
  %53 = phi i8* [ %6, %31 ], [ %48, %44 ]
  %54 = phi i8* [ %37, %31 ], [ %49, %44 ]
  %55 = and i32 %3, 1
  %56 = icmp eq i32 %55, 0
  br i1 %56, label %57, label %58

57:                                               ; preds = %52
  tail call void %35(i8* %53, i64 0, i8* %54, i64 0, i32 %2) #6, !callees !5
  br label %58

58:                                               ; preds = %52, %57
  ret void
}

declare void @ScaleRowUp2_Bilinear_Any_C(i8*, i64, i8*, i64, i32) local_unnamed_addr #3

declare void @ScaleRowUp2_Bilinear_Any_SSE2(i8*, i64, i8*, i64, i32) local_unnamed_addr #3

declare void @ScaleRowUp2_Bilinear_Any_SSSE3(i8*, i64, i8*, i64, i32) local_unnamed_addr #3

declare void @ScaleRowUp2_Bilinear_Any_AVX2(i8*, i64, i8*, i64, i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @ScalePlaneUp2_12_Linear(i32, i32, i32, i32, i32, i32, i16*, i16*) local_unnamed_addr #0 {
  %9 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %13

11:                                               ; preds = %8
  %12 = tail call i32 @InitCpuFlags() #6
  br label %13

13:                                               ; preds = %8, %11
  %14 = phi i32 [ %12, %11 ], [ %9, %8 ]
  %15 = and i32 %14, 64
  %16 = icmp eq i32 %15, 0
  %17 = select i1 %16, void (i16*, i16*, i32)* @ScaleRowUp2_Linear_16_Any_C, void (i16*, i16*, i32)* @ScaleRowUp2_Linear_12_Any_SSSE3
  %18 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %20, label %22

20:                                               ; preds = %13
  %21 = tail call i32 @InitCpuFlags() #6
  br label %22

22:                                               ; preds = %13, %20
  %23 = phi i32 [ %21, %20 ], [ %18, %13 ]
  %24 = and i32 %23, 1024
  %25 = icmp eq i32 %24, 0
  %26 = select i1 %25, void (i16*, i16*, i32)* %17, void (i16*, i16*, i32)* @ScaleRowUp2_Linear_12_Any_AVX2
  %27 = icmp eq i32 %3, 1
  %28 = add nsw i32 %1, -1
  br i1 %27, label %29, label %34

29:                                               ; preds = %22
  %30 = sdiv i32 %28, 2
  %31 = mul nsw i32 %30, %4
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds i16, i16* %6, i64 %32
  tail call void %26(i16* %33, i16* %7, i32 %2) #6, !callees !6
  br label %52

34:                                               ; preds = %22
  %35 = add nsw i32 %3, -1
  %36 = tail call i32 @FixedDiv_X86(i32 %28, i32 %35) #6
  %37 = icmp sgt i32 %3, 0
  br i1 %37, label %38, label %52

38:                                               ; preds = %34
  %39 = sext i32 %5 to i64
  br label %40

40:                                               ; preds = %40, %38
  %41 = phi i32 [ 32767, %38 ], [ %49, %40 ]
  %42 = phi i32 [ 0, %38 ], [ %50, %40 ]
  %43 = phi i16* [ %7, %38 ], [ %48, %40 ]
  %44 = ashr i32 %41, 16
  %45 = mul nsw i32 %44, %4
  %46 = sext i32 %45 to i64
  %47 = getelementptr inbounds i16, i16* %6, i64 %46
  tail call void %26(i16* %47, i16* %43, i32 %2) #6, !callees !6
  %48 = getelementptr inbounds i16, i16* %43, i64 %39
  %49 = add nsw i32 %41, %36
  %50 = add nuw nsw i32 %42, 1
  %51 = icmp eq i32 %50, %3
  br i1 %51, label %52, label %40

52:                                               ; preds = %40, %34, %29
  ret void
}

declare void @ScaleRowUp2_Linear_16_Any_C(i16*, i16*, i32) local_unnamed_addr #3

declare void @ScaleRowUp2_Linear_12_Any_SSSE3(i16*, i16*, i32) local_unnamed_addr #3

declare void @ScaleRowUp2_Linear_12_Any_AVX2(i16*, i16*, i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @ScalePlaneUp2_12_Bilinear(i32, i32, i32, i32, i32, i32, i16*, i16*) local_unnamed_addr #0 {
  %9 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %13

11:                                               ; preds = %8
  %12 = tail call i32 @InitCpuFlags() #6
  br label %13

13:                                               ; preds = %8, %11
  %14 = phi i32 [ %12, %11 ], [ %9, %8 ]
  %15 = and i32 %14, 64
  %16 = icmp eq i32 %15, 0
  %17 = select i1 %16, void (i16*, i64, i16*, i64, i32)* @ScaleRowUp2_Bilinear_16_Any_C, void (i16*, i64, i16*, i64, i32)* @ScaleRowUp2_Bilinear_12_Any_SSSE3
  %18 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %20, label %22

20:                                               ; preds = %13
  %21 = tail call i32 @InitCpuFlags() #6
  br label %22

22:                                               ; preds = %13, %20
  %23 = phi i32 [ %21, %20 ], [ %18, %13 ]
  %24 = and i32 %23, 1024
  %25 = icmp eq i32 %24, 0
  %26 = select i1 %25, void (i16*, i64, i16*, i64, i32)* %17, void (i16*, i64, i16*, i64, i32)* @ScaleRowUp2_Bilinear_12_Any_AVX2
  tail call void %26(i16* %6, i64 0, i16* %7, i64 0, i32 %2) #6, !callees !7
  %27 = sext i32 %5 to i64
  %28 = getelementptr inbounds i16, i16* %7, i64 %27
  %29 = add i32 %1, -1
  %30 = icmp sgt i32 %29, 0
  br i1 %30, label %31, label %43

31:                                               ; preds = %22
  %32 = sext i32 %4 to i64
  %33 = shl nsw i32 %5, 1
  %34 = sext i32 %33 to i64
  br label %35

35:                                               ; preds = %35, %31
  %36 = phi i32 [ 0, %31 ], [ %41, %35 ]
  %37 = phi i16* [ %28, %31 ], [ %40, %35 ]
  %38 = phi i16* [ %6, %31 ], [ %39, %35 ]
  tail call void %26(i16* %38, i64 %32, i16* %37, i64 %27, i32 %2) #6, !callees !7
  %39 = getelementptr inbounds i16, i16* %38, i64 %32
  %40 = getelementptr inbounds i16, i16* %37, i64 %34
  %41 = add nuw nsw i32 %36, 1
  %42 = icmp eq i32 %41, %29
  br i1 %42, label %43, label %35

43:                                               ; preds = %35, %22
  %44 = phi i16* [ %6, %22 ], [ %39, %35 ]
  %45 = phi i16* [ %28, %22 ], [ %40, %35 ]
  %46 = and i32 %3, 1
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %48, label %49

48:                                               ; preds = %43
  tail call void %26(i16* %44, i64 0, i16* %45, i64 0, i32 %2) #6, !callees !7
  br label %49

49:                                               ; preds = %43, %48
  ret void
}

declare void @ScaleRowUp2_Bilinear_16_Any_C(i16*, i64, i16*, i64, i32) local_unnamed_addr #3

declare void @ScaleRowUp2_Bilinear_12_Any_SSSE3(i16*, i64, i16*, i64, i32) local_unnamed_addr #3

declare void @ScaleRowUp2_Bilinear_12_Any_AVX2(i16*, i64, i16*, i64, i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @ScalePlaneUp2_16_Linear(i32, i32, i32, i32, i32, i32, i16*, i16*) local_unnamed_addr #0 {
  %9 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %13

11:                                               ; preds = %8
  %12 = tail call i32 @InitCpuFlags() #6
  br label %13

13:                                               ; preds = %8, %11
  %14 = phi i32 [ %12, %11 ], [ %9, %8 ]
  %15 = and i32 %14, 32
  %16 = icmp eq i32 %15, 0
  %17 = select i1 %16, void (i16*, i16*, i32)* @ScaleRowUp2_Linear_16_Any_C, void (i16*, i16*, i32)* @ScaleRowUp2_Linear_16_Any_SSE2
  %18 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %20, label %22

20:                                               ; preds = %13
  %21 = tail call i32 @InitCpuFlags() #6
  br label %22

22:                                               ; preds = %13, %20
  %23 = phi i32 [ %21, %20 ], [ %18, %13 ]
  %24 = and i32 %23, 1024
  %25 = icmp eq i32 %24, 0
  %26 = select i1 %25, void (i16*, i16*, i32)* %17, void (i16*, i16*, i32)* @ScaleRowUp2_Linear_16_Any_AVX2
  %27 = icmp eq i32 %3, 1
  %28 = add nsw i32 %1, -1
  br i1 %27, label %29, label %34

29:                                               ; preds = %22
  %30 = sdiv i32 %28, 2
  %31 = mul nsw i32 %30, %4
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds i16, i16* %6, i64 %32
  tail call void %26(i16* %33, i16* %7, i32 %2) #6, !callees !8
  br label %52

34:                                               ; preds = %22
  %35 = add nsw i32 %3, -1
  %36 = tail call i32 @FixedDiv_X86(i32 %28, i32 %35) #6
  %37 = icmp sgt i32 %3, 0
  br i1 %37, label %38, label %52

38:                                               ; preds = %34
  %39 = sext i32 %5 to i64
  br label %40

40:                                               ; preds = %40, %38
  %41 = phi i32 [ 32767, %38 ], [ %49, %40 ]
  %42 = phi i32 [ 0, %38 ], [ %50, %40 ]
  %43 = phi i16* [ %7, %38 ], [ %48, %40 ]
  %44 = ashr i32 %41, 16
  %45 = mul nsw i32 %44, %4
  %46 = sext i32 %45 to i64
  %47 = getelementptr inbounds i16, i16* %6, i64 %46
  tail call void %26(i16* %47, i16* %43, i32 %2) #6, !callees !8
  %48 = getelementptr inbounds i16, i16* %43, i64 %39
  %49 = add nsw i32 %41, %36
  %50 = add nuw nsw i32 %42, 1
  %51 = icmp eq i32 %50, %3
  br i1 %51, label %52, label %40

52:                                               ; preds = %40, %34, %29
  ret void
}

declare void @ScaleRowUp2_Linear_16_Any_SSE2(i16*, i16*, i32) local_unnamed_addr #3

declare void @ScaleRowUp2_Linear_16_Any_AVX2(i16*, i16*, i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @ScalePlaneUp2_16_Bilinear(i32, i32, i32, i32, i32, i32, i16*, i16*) local_unnamed_addr #0 {
  %9 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %13

11:                                               ; preds = %8
  %12 = tail call i32 @InitCpuFlags() #6
  br label %13

13:                                               ; preds = %8, %11
  %14 = phi i32 [ %12, %11 ], [ %9, %8 ]
  %15 = and i32 %14, 64
  %16 = icmp eq i32 %15, 0
  %17 = select i1 %16, void (i16*, i64, i16*, i64, i32)* @ScaleRowUp2_Bilinear_16_Any_C, void (i16*, i64, i16*, i64, i32)* @ScaleRowUp2_Bilinear_16_Any_SSSE3
  %18 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %20, label %22

20:                                               ; preds = %13
  %21 = tail call i32 @InitCpuFlags() #6
  br label %22

22:                                               ; preds = %13, %20
  %23 = phi i32 [ %21, %20 ], [ %18, %13 ]
  %24 = and i32 %23, 1024
  %25 = icmp eq i32 %24, 0
  %26 = select i1 %25, void (i16*, i64, i16*, i64, i32)* %17, void (i16*, i64, i16*, i64, i32)* @ScaleRowUp2_Bilinear_16_Any_AVX2
  tail call void %26(i16* %6, i64 0, i16* %7, i64 0, i32 %2) #6, !callees !9
  %27 = sext i32 %5 to i64
  %28 = getelementptr inbounds i16, i16* %7, i64 %27
  %29 = add i32 %1, -1
  %30 = icmp sgt i32 %29, 0
  br i1 %30, label %31, label %43

31:                                               ; preds = %22
  %32 = sext i32 %4 to i64
  %33 = shl nsw i32 %5, 1
  %34 = sext i32 %33 to i64
  br label %35

35:                                               ; preds = %35, %31
  %36 = phi i32 [ 0, %31 ], [ %41, %35 ]
  %37 = phi i16* [ %28, %31 ], [ %40, %35 ]
  %38 = phi i16* [ %6, %31 ], [ %39, %35 ]
  tail call void %26(i16* %38, i64 %32, i16* %37, i64 %27, i32 %2) #6, !callees !9
  %39 = getelementptr inbounds i16, i16* %38, i64 %32
  %40 = getelementptr inbounds i16, i16* %37, i64 %34
  %41 = add nuw nsw i32 %36, 1
  %42 = icmp eq i32 %41, %29
  br i1 %42, label %43, label %35

43:                                               ; preds = %35, %22
  %44 = phi i16* [ %6, %22 ], [ %39, %35 ]
  %45 = phi i16* [ %28, %22 ], [ %40, %35 ]
  %46 = and i32 %3, 1
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %48, label %49

48:                                               ; preds = %43
  tail call void %26(i16* %44, i64 0, i16* %45, i64 0, i32 %2) #6, !callees !9
  br label %49

49:                                               ; preds = %43, %48
  ret void
}

declare void @ScaleRowUp2_Bilinear_16_Any_SSSE3(i16*, i64, i16*, i64, i32) local_unnamed_addr #3

declare void @ScaleRowUp2_Bilinear_16_Any_AVX2(i16*, i64, i16*, i64, i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @ScalePlaneBilinearUp_16(i32, i32, i32, i32, i32, i32, i16*, i16*, i32) local_unnamed_addr #0 {
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %14) #6
  store i32 0, i32* %10, align 4
  %15 = bitcast i32* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %15) #6
  store i32 0, i32* %11, align 4
  %16 = bitcast i32* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %16) #6
  store i32 0, i32* %12, align 4
  %17 = bitcast i32* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %17) #6
  store i32 0, i32* %13, align 4
  %18 = shl i32 %1, 16
  %19 = add i32 %18, -65536
  %20 = icmp ne i32 %8, 0
  %21 = select i1 %20, void (i16*, i16*, i32, i32, i32)* @ScaleFilterCols_16_C, void (i16*, i16*, i32, i32, i32)* @ScaleCols_16_C
  call void @ScaleSlope(i32 %0, i32 %1, i32 %2, i32 %3, i32 %8, i32* nonnull %10, i32* nonnull %11, i32* nonnull %12, i32* nonnull %13) #6
  %22 = icmp slt i32 %0, 0
  %23 = sub nsw i32 0, %0
  %24 = select i1 %22, i32 %23, i32 %0
  %25 = icmp sgt i32 %24, 32767
  %26 = and i1 %25, %20
  %27 = select i1 %26, void (i16*, i16*, i32, i32, i32)* @ScaleFilterCols64_16_C, void (i16*, i16*, i32, i32, i32)* %21
  br i1 %20, label %35, label %28

28:                                               ; preds = %9
  %29 = shl nuw nsw i32 %24, 1
  %30 = icmp eq i32 %29, %2
  %31 = load i32, i32* %10, align 4
  %32 = icmp slt i32 %31, 32768
  %33 = and i1 %30, %32
  %34 = select i1 %33, void (i16*, i16*, i32, i32, i32)* @ScaleColsUp2_16_C, void (i16*, i16*, i32, i32, i32)* %27
  br label %35

35:                                               ; preds = %28, %9
  %36 = phi void (i16*, i16*, i32, i32, i32)* [ %27, %9 ], [ %34, %28 ]
  %37 = load i32, i32* %11, align 4
  %38 = icmp sgt i32 %37, %19
  br i1 %38, label %39, label %40

39:                                               ; preds = %35
  store i32 %19, i32* %11, align 4
  br label %40

40:                                               ; preds = %39, %35
  %41 = phi i32 [ %19, %39 ], [ %37, %35 ]
  %42 = ashr i32 %41, 16
  %43 = mul nsw i32 %42, %4
  %44 = sext i32 %43 to i64
  %45 = getelementptr inbounds i16, i16* %6, i64 %44
  %46 = add nsw i32 %2, 31
  %47 = and i32 %46, -32
  %48 = shl nsw i32 %47, 2
  %49 = or i32 %48, 63
  %50 = sext i32 %49 to i64
  %51 = call noalias i8* @malloc(i64 %50) #6
  %52 = ptrtoint i8* %51 to i64
  %53 = add nsw i64 %52, 63
  %54 = and i64 %53, -64
  %55 = inttoptr i64 %54 to i16*
  %56 = load i32, i32* %10, align 4
  %57 = load i32, i32* %12, align 4
  call void %36(i16* %55, i16* %45, i32 %2, i32 %56, i32 %57) #6, !callees !10
  %58 = icmp sgt i32 %1, 1
  %59 = sext i32 %4 to i64
  %60 = getelementptr inbounds i16, i16* %45, i64 %59
  %61 = select i1 %58, i16* %60, i16* %45
  %62 = sext i32 %47 to i64
  %63 = getelementptr inbounds i16, i16* %55, i64 %62
  %64 = load i32, i32* %10, align 4
  %65 = load i32, i32* %12, align 4
  call void %36(i16* %63, i16* %61, i32 %2, i32 %64, i32 %65) #6, !callees !10
  %66 = icmp sgt i32 %3, 0
  br i1 %66, label %67, label %118

67:                                               ; preds = %40
  %68 = getelementptr inbounds i16, i16* %61, i64 %59
  %69 = ashr exact i32 %19, 16
  %70 = mul nsw i32 %69, %4
  %71 = sext i32 %70 to i64
  %72 = getelementptr inbounds i16, i16* %6, i64 %71
  %73 = icmp eq i32 %8, 1
  %74 = sext i32 %5 to i64
  %75 = load i32, i32* %11, align 4
  br label %76

76:                                               ; preds = %111, %67
  %77 = phi i32 [ %75, %67 ], [ %115, %111 ]
  %78 = phi i32 [ %42, %67 ], [ %104, %111 ]
  %79 = phi i32 [ %47, %67 ], [ %103, %111 ]
  %80 = phi i16* [ %55, %67 ], [ %102, %111 ]
  %81 = phi i16* [ %7, %67 ], [ %112, %111 ]
  %82 = phi i16* [ %68, %67 ], [ %101, %111 ]
  %83 = phi i32 [ 0, %67 ], [ %116, %111 ]
  %84 = ashr i32 %77, 16
  %85 = icmp eq i32 %84, %78
  br i1 %85, label %100, label %86

86:                                               ; preds = %76
  %87 = icmp sgt i32 %77, %19
  br i1 %87, label %88, label %89

88:                                               ; preds = %86
  store i32 %19, i32* %11, align 4
  br label %89

89:                                               ; preds = %88, %86
  %90 = phi i32 [ %69, %88 ], [ %84, %86 ]
  %91 = phi i16* [ %72, %88 ], [ %82, %86 ]
  %92 = icmp eq i32 %90, %78
  br i1 %92, label %100, label %93

93:                                               ; preds = %89
  %94 = load i32, i32* %10, align 4
  %95 = load i32, i32* %12, align 4
  call void %36(i16* %80, i16* %91, i32 %2, i32 %94, i32 %95) #6, !callees !10
  %96 = sext i32 %79 to i64
  %97 = getelementptr inbounds i16, i16* %80, i64 %96
  %98 = sub nsw i32 0, %79
  %99 = getelementptr inbounds i16, i16* %91, i64 %59
  br label %100

100:                                              ; preds = %89, %76, %93
  %101 = phi i16* [ %99, %93 ], [ %91, %89 ], [ %82, %76 ]
  %102 = phi i16* [ %97, %93 ], [ %80, %89 ], [ %80, %76 ]
  %103 = phi i32 [ %98, %93 ], [ %79, %89 ], [ %79, %76 ]
  %104 = phi i32 [ %90, %93 ], [ %78, %89 ], [ %78, %76 ]
  br i1 %73, label %105, label %106

105:                                              ; preds = %100
  call void @InterpolateRow_16_C(i16* %81, i16* %102, i64 0, i32 %2, i32 0) #6
  br label %111

106:                                              ; preds = %100
  %107 = load i32, i32* %11, align 4
  %108 = lshr i32 %107, 8
  %109 = and i32 %108, 255
  %110 = sext i32 %103 to i64
  call void @InterpolateRow_16_C(i16* %81, i16* %102, i64 %110, i32 %2, i32 %109) #6
  br label %111

111:                                              ; preds = %106, %105
  %112 = getelementptr inbounds i16, i16* %81, i64 %74
  %113 = load i32, i32* %13, align 4
  %114 = load i32, i32* %11, align 4
  %115 = add nsw i32 %114, %113
  store i32 %115, i32* %11, align 4
  %116 = add nuw nsw i32 %83, 1
  %117 = icmp eq i32 %116, %3
  br i1 %117, label %118, label %76

118:                                              ; preds = %111, %40
  call void @free(i8* %51) #6
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %17) #6
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %16) #6
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %15) #6
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %14) #6
  ret void
}

declare void @ScaleCols_16_C(i16*, i16*, i32, i32, i32) local_unnamed_addr #3

declare void @ScaleColsUp2_16_C(i16*, i16*, i32, i32, i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @ScalePlane(i8*, i32, i32, i32, i8*, i32, i32, i32, i32) local_unnamed_addr #0 {
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = tail call i32 @ScaleFilterReduce(i32 %2, i32 %3, i32 %6, i32 %7, i32 %8) #6
  %19 = icmp slt i32 %3, 0
  br i1 %19, label %20, label %27

20:                                               ; preds = %9
  %21 = sub nsw i32 0, %3
  %22 = xor i32 %3, -1
  %23 = mul nsw i32 %22, %1
  %24 = sext i32 %23 to i64
  %25 = getelementptr inbounds i8, i8* %0, i64 %24
  %26 = sub nsw i32 0, %1
  br label %27

27:                                               ; preds = %20, %9
  %28 = phi i32 [ %21, %20 ], [ %3, %9 ]
  %29 = phi i32 [ %26, %20 ], [ %1, %9 ]
  %30 = phi i8* [ %25, %20 ], [ %0, %9 ]
  %31 = icmp eq i32 %6, %2
  %32 = icmp eq i32 %28, %7
  %33 = and i1 %31, %32
  br i1 %33, label %34, label %35

34:                                               ; preds = %27
  tail call void @CopyPlane(i8* %30, i32 %29, i8* %4, i32 %5, i32 %6, i32 %7) #6
  br label %458

35:                                               ; preds = %27
  %36 = icmp ne i32 %18, 3
  %37 = and i1 %31, %36
  br i1 %37, label %38, label %40

38:                                               ; preds = %35
  %39 = tail call i32 @FixedDiv_X86(i32 %28, i32 %7) #6
  tail call void @ScalePlaneVertical(i32 %28, i32 %6, i32 %7, i32 %29, i32 %5, i8* %30, i8* %4, i32 0, i32 0, i32 %39, i32 1, i32 %18) #6
  br label %458

40:                                               ; preds = %35
  %41 = icmp slt i32 %2, 0
  %42 = sub nsw i32 0, %2
  %43 = select i1 %41, i32 %42, i32 %2
  %44 = icmp slt i32 %43, %6
  %45 = icmp slt i32 %28, %7
  %46 = or i1 %44, %45
  br i1 %46, label %47, label %49

47:                                               ; preds = %40
  %48 = shl nsw i32 %7, 1
  br label %314

49:                                               ; preds = %40
  %50 = shl nsw i32 %6, 2
  %51 = mul nsw i32 %2, 3
  %52 = icmp eq i32 %50, %51
  br i1 %52, label %53, label %116

53:                                               ; preds = %49
  %54 = shl nsw i32 %7, 2
  %55 = mul nsw i32 %28, 3
  %56 = icmp eq i32 %54, %55
  br i1 %56, label %57, label %116

57:                                               ; preds = %53
  %58 = icmp eq i32 %18, 1
  %59 = select i1 %58, i32 0, i32 %29
  %60 = icmp ne i32 %18, 0
  %61 = select i1 %60, void (i8*, i64, i8*, i32)* @ScaleRowDown34_0_Box_C, void (i8*, i64, i8*, i32)* @ScaleRowDown34_C
  %62 = select i1 %60, void (i8*, i64, i8*, i32)* @ScaleRowDown34_1_Box_C, void (i8*, i64, i8*, i32)* @ScaleRowDown34_C
  %63 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %64 = icmp eq i32 %63, 0
  br i1 %64, label %65, label %67

65:                                               ; preds = %57
  %66 = tail call i32 @InitCpuFlags() #6
  br label %67

67:                                               ; preds = %65, %57
  %68 = phi i32 [ %66, %65 ], [ %63, %57 ]
  %69 = and i32 %68, 64
  %70 = icmp eq i32 %69, 0
  br i1 %70, label %79, label %71

71:                                               ; preds = %67
  %72 = select i1 %60, void (i8*, i64, i8*, i32)* @ScaleRowDown34_0_Box_Any_SSSE3, void (i8*, i64, i8*, i32)* @ScaleRowDown34_Any_SSSE3
  %73 = select i1 %60, void (i8*, i64, i8*, i32)* @ScaleRowDown34_1_Box_Any_SSSE3, void (i8*, i64, i8*, i32)* @ScaleRowDown34_Any_SSSE3
  %74 = srem i32 %6, 24
  %75 = icmp eq i32 %74, 0
  br i1 %75, label %76, label %79

76:                                               ; preds = %71
  %77 = select i1 %60, void (i8*, i64, i8*, i32)* @ScaleRowDown34_0_Box_SSSE3, void (i8*, i64, i8*, i32)* @ScaleRowDown34_SSSE3
  %78 = select i1 %60, void (i8*, i64, i8*, i32)* @ScaleRowDown34_1_Box_SSSE3, void (i8*, i64, i8*, i32)* @ScaleRowDown34_SSSE3
  br label %79

79:                                               ; preds = %76, %71, %67
  %80 = phi void (i8*, i64, i8*, i32)* [ %72, %71 ], [ %61, %67 ], [ %77, %76 ]
  %81 = phi void (i8*, i64, i8*, i32)* [ %73, %71 ], [ %62, %67 ], [ %78, %76 ]
  %82 = add nsw i32 %7, -2
  %83 = icmp sgt i32 %82, 0
  br i1 %83, label %84, label %105

84:                                               ; preds = %79
  %85 = sext i32 %59 to i64
  %86 = sext i32 %29 to i64
  %87 = sext i32 %5 to i64
  %88 = sub nsw i32 0, %59
  %89 = sext i32 %88 to i64
  %90 = shl nsw i32 %29, 1
  %91 = sext i32 %90 to i64
  br label %92

92:                                               ; preds = %92, %84
  %93 = phi i32 [ 0, %84 ], [ %103, %92 ]
  %94 = phi i8* [ %30, %84 ], [ %101, %92 ]
  %95 = phi i8* [ %4, %84 ], [ %102, %92 ]
  tail call void %80(i8* %94, i64 %85, i8* %95, i32 %6) #6
  %96 = getelementptr inbounds i8, i8* %94, i64 %86
  %97 = getelementptr inbounds i8, i8* %95, i64 %87
  tail call void %81(i8* %96, i64 %85, i8* %97, i32 %6) #6
  %98 = getelementptr inbounds i8, i8* %96, i64 %86
  %99 = getelementptr inbounds i8, i8* %97, i64 %87
  %100 = getelementptr inbounds i8, i8* %98, i64 %86
  tail call void %80(i8* %100, i64 %89, i8* %99, i32 %6) #6
  %101 = getelementptr inbounds i8, i8* %98, i64 %91
  %102 = getelementptr inbounds i8, i8* %99, i64 %87
  %103 = add nuw nsw i32 %93, 3
  %104 = icmp slt i32 %103, %82
  br i1 %104, label %92, label %105

105:                                              ; preds = %92, %79
  %106 = phi i8* [ %4, %79 ], [ %102, %92 ]
  %107 = phi i8* [ %30, %79 ], [ %101, %92 ]
  %108 = srem i32 %7, 3
  switch i32 %108, label %458 [
    i32 2, label %109
    i32 1, label %115
  ]

109:                                              ; preds = %105
  %110 = sext i32 %59 to i64
  tail call void %80(i8* %107, i64 %110, i8* %106, i32 %6) #6
  %111 = sext i32 %29 to i64
  %112 = getelementptr inbounds i8, i8* %107, i64 %111
  %113 = sext i32 %5 to i64
  %114 = getelementptr inbounds i8, i8* %106, i64 %113
  tail call void %81(i8* %112, i64 0, i8* %114, i32 %6) #6
  br label %458

115:                                              ; preds = %105
  tail call void %80(i8* %107, i64 0, i8* %106, i32 %6) #6
  br label %458

116:                                              ; preds = %53, %49
  %117 = shl nsw i32 %6, 1
  %118 = icmp eq i32 %117, %2
  %119 = shl nsw i32 %7, 1
  %120 = icmp eq i32 %119, %28
  %121 = and i1 %118, %120
  br i1 %121, label %122, label %182

122:                                              ; preds = %116
  %123 = icmp eq i32 %18, 0
  %124 = icmp eq i32 %18, 1
  %125 = select i1 %124, void (i8*, i64, i8*, i32)* @ScaleRowDown2Linear_C, void (i8*, i64, i8*, i32)* @ScaleRowDown2Box_C
  %126 = select i1 %123, void (i8*, i64, i8*, i32)* @ScaleRowDown2_C, void (i8*, i64, i8*, i32)* %125
  %127 = shl i32 %29, 1
  %128 = sext i32 %29 to i64
  %129 = getelementptr inbounds i8, i8* %30, i64 %128
  %130 = select i1 %123, i8* %129, i8* %30
  %131 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %132 = icmp eq i32 %131, 0
  br i1 %132, label %133, label %135

133:                                              ; preds = %122
  %134 = tail call i32 @InitCpuFlags() #6
  br label %135

135:                                              ; preds = %133, %122
  %136 = phi i32 [ %134, %133 ], [ %131, %122 ]
  %137 = and i32 %136, 64
  %138 = icmp eq i32 %137, 0
  br i1 %138, label %147, label %139

139:                                              ; preds = %135
  %140 = select i1 %124, void (i8*, i64, i8*, i32)* @ScaleRowDown2Linear_Any_SSSE3, void (i8*, i64, i8*, i32)* @ScaleRowDown2Box_Any_SSSE3
  %141 = select i1 %123, void (i8*, i64, i8*, i32)* @ScaleRowDown2_Any_SSSE3, void (i8*, i64, i8*, i32)* %140
  %142 = and i32 %6, 15
  %143 = icmp eq i32 %142, 0
  br i1 %143, label %144, label %147

144:                                              ; preds = %139
  %145 = select i1 %124, void (i8*, i64, i8*, i32)* @ScaleRowDown2Linear_SSSE3, void (i8*, i64, i8*, i32)* @ScaleRowDown2Box_SSSE3
  %146 = select i1 %123, void (i8*, i64, i8*, i32)* @ScaleRowDown2_SSSE3, void (i8*, i64, i8*, i32)* %145
  br label %147

147:                                              ; preds = %144, %139, %135
  %148 = phi void (i8*, i64, i8*, i32)* [ %141, %139 ], [ %126, %135 ], [ %146, %144 ]
  %149 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %150 = icmp eq i32 %149, 0
  br i1 %150, label %151, label %153

151:                                              ; preds = %147
  %152 = tail call i32 @InitCpuFlags() #6
  br label %153

153:                                              ; preds = %151, %147
  %154 = phi i32 [ %152, %151 ], [ %149, %147 ]
  %155 = and i32 %154, 1024
  %156 = icmp eq i32 %155, 0
  br i1 %156, label %165, label %157

157:                                              ; preds = %153
  %158 = select i1 %124, void (i8*, i64, i8*, i32)* @ScaleRowDown2Linear_Any_AVX2, void (i8*, i64, i8*, i32)* @ScaleRowDown2Box_Any_AVX2
  %159 = select i1 %123, void (i8*, i64, i8*, i32)* @ScaleRowDown2_Any_AVX2, void (i8*, i64, i8*, i32)* %158
  %160 = and i32 %6, 31
  %161 = icmp eq i32 %160, 0
  br i1 %161, label %162, label %165

162:                                              ; preds = %157
  %163 = select i1 %124, void (i8*, i64, i8*, i32)* @ScaleRowDown2Linear_AVX2, void (i8*, i64, i8*, i32)* @ScaleRowDown2Box_AVX2
  %164 = select i1 %123, void (i8*, i64, i8*, i32)* @ScaleRowDown2_AVX2, void (i8*, i64, i8*, i32)* %163
  br label %165

165:                                              ; preds = %162, %157, %153
  %166 = phi void (i8*, i64, i8*, i32)* [ %159, %157 ], [ %148, %153 ], [ %164, %162 ]
  %167 = icmp sgt i32 %7, 0
  br i1 %167, label %168, label %458

168:                                              ; preds = %165
  %169 = icmp ult i32 %18, 2
  %170 = select i1 %169, i32 0, i32 %29
  %171 = sext i32 %170 to i64
  %172 = sext i32 %127 to i64
  %173 = sext i32 %5 to i64
  br label %174

174:                                              ; preds = %174, %168
  %175 = phi i32 [ 0, %168 ], [ %180, %174 ]
  %176 = phi i8* [ %4, %168 ], [ %179, %174 ]
  %177 = phi i8* [ %130, %168 ], [ %178, %174 ]
  tail call void %166(i8* %177, i64 %171, i8* %176, i32 %6) #6
  %178 = getelementptr inbounds i8, i8* %177, i64 %172
  %179 = getelementptr inbounds i8, i8* %176, i64 %173
  %180 = add nuw nsw i32 %175, 1
  %181 = icmp eq i32 %180, %7
  br i1 %181, label %458, label %174

182:                                              ; preds = %116
  %183 = shl nsw i32 %6, 3
  %184 = icmp eq i32 %183, %51
  br i1 %184, label %185, label %252

185:                                              ; preds = %182
  %186 = shl nsw i32 %7, 3
  %187 = mul nsw i32 %28, 3
  %188 = icmp eq i32 %186, %187
  br i1 %188, label %189, label %252

189:                                              ; preds = %185
  %190 = icmp eq i32 %18, 1
  %191 = select i1 %190, i32 0, i32 %29
  %192 = icmp ne i32 %18, 0
  %193 = select i1 %192, void (i8*, i64, i8*, i32)* @ScaleRowDown38_3_Box_C, void (i8*, i64, i8*, i32)* @ScaleRowDown38_C
  %194 = select i1 %192, void (i8*, i64, i8*, i32)* @ScaleRowDown38_2_Box_C, void (i8*, i64, i8*, i32)* @ScaleRowDown38_C
  %195 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %196 = icmp eq i32 %195, 0
  br i1 %196, label %197, label %199

197:                                              ; preds = %189
  %198 = tail call i32 @InitCpuFlags() #6
  br label %199

199:                                              ; preds = %197, %189
  %200 = phi i32 [ %198, %197 ], [ %195, %189 ]
  %201 = and i32 %200, 64
  %202 = icmp eq i32 %201, 0
  br i1 %202, label %216, label %203

203:                                              ; preds = %199
  %204 = select i1 %192, void (i8*, i64, i8*, i32)* @ScaleRowDown38_3_Box_Any_SSSE3, void (i8*, i64, i8*, i32)* @ScaleRowDown38_Any_SSSE3
  %205 = select i1 %192, void (i8*, i64, i8*, i32)* @ScaleRowDown38_2_Box_Any_SSSE3, void (i8*, i64, i8*, i32)* @ScaleRowDown38_Any_SSSE3
  %206 = srem i32 %6, 12
  %207 = or i32 %18, %206
  %208 = icmp eq i32 %207, 0
  %209 = select i1 %208, void (i8*, i64, i8*, i32)* @ScaleRowDown38_SSSE3, void (i8*, i64, i8*, i32)* %204
  %210 = select i1 %208, void (i8*, i64, i8*, i32)* @ScaleRowDown38_SSSE3, void (i8*, i64, i8*, i32)* %205
  %211 = srem i32 %6, 6
  %212 = icmp eq i32 %211, 0
  %213 = and i1 %212, %192
  %214 = select i1 %213, void (i8*, i64, i8*, i32)* @ScaleRowDown38_3_Box_SSSE3, void (i8*, i64, i8*, i32)* %209
  %215 = select i1 %213, void (i8*, i64, i8*, i32)* @ScaleRowDown38_2_Box_SSSE3, void (i8*, i64, i8*, i32)* %210
  br label %216

216:                                              ; preds = %203, %199
  %217 = phi void (i8*, i64, i8*, i32)* [ %193, %199 ], [ %214, %203 ]
  %218 = phi void (i8*, i64, i8*, i32)* [ %194, %199 ], [ %215, %203 ]
  %219 = add nsw i32 %7, -2
  %220 = icmp sgt i32 %219, 0
  br i1 %220, label %221, label %240

221:                                              ; preds = %216
  %222 = sext i32 %191 to i64
  %223 = mul nsw i32 %29, 3
  %224 = sext i32 %223 to i64
  %225 = sext i32 %5 to i64
  %226 = shl nsw i32 %29, 1
  %227 = sext i32 %226 to i64
  br label %228

228:                                              ; preds = %228, %221
  %229 = phi i32 [ 0, %221 ], [ %238, %228 ]
  %230 = phi i8* [ %30, %221 ], [ %236, %228 ]
  %231 = phi i8* [ %4, %221 ], [ %237, %228 ]
  tail call void %217(i8* %230, i64 %222, i8* %231, i32 %6) #6
  %232 = getelementptr inbounds i8, i8* %230, i64 %224
  %233 = getelementptr inbounds i8, i8* %231, i64 %225
  tail call void %217(i8* %232, i64 %222, i8* %233, i32 %6) #6
  %234 = getelementptr inbounds i8, i8* %232, i64 %224
  %235 = getelementptr inbounds i8, i8* %233, i64 %225
  tail call void %218(i8* %234, i64 %222, i8* %235, i32 %6) #6
  %236 = getelementptr inbounds i8, i8* %234, i64 %227
  %237 = getelementptr inbounds i8, i8* %235, i64 %225
  %238 = add nuw nsw i32 %229, 3
  %239 = icmp slt i32 %238, %219
  br i1 %239, label %228, label %240

240:                                              ; preds = %228, %216
  %241 = phi i8* [ %4, %216 ], [ %237, %228 ]
  %242 = phi i8* [ %30, %216 ], [ %236, %228 ]
  %243 = srem i32 %7, 3
  switch i32 %243, label %458 [
    i32 2, label %244
    i32 1, label %251
  ]

244:                                              ; preds = %240
  %245 = sext i32 %191 to i64
  tail call void %217(i8* %242, i64 %245, i8* %241, i32 %6) #6
  %246 = mul nsw i32 %29, 3
  %247 = sext i32 %246 to i64
  %248 = getelementptr inbounds i8, i8* %242, i64 %247
  %249 = sext i32 %5 to i64
  %250 = getelementptr inbounds i8, i8* %241, i64 %249
  tail call void %217(i8* %248, i64 0, i8* %250, i32 %6) #6
  br label %458

251:                                              ; preds = %240
  tail call void %217(i8* %242, i64 0, i8* %241, i32 %6) #6
  br label %458

252:                                              ; preds = %185, %182
  %253 = icmp eq i32 %50, %2
  %254 = shl nsw i32 %7, 2
  %255 = icmp eq i32 %254, %28
  %256 = and i1 %253, %255
  br i1 %256, label %257, label %314

257:                                              ; preds = %252
  switch i32 %18, label %402 [
    i32 3, label %258
    i32 0, label %258
  ]

258:                                              ; preds = %257, %257
  %259 = icmp ne i32 %18, 0
  %260 = select i1 %259, void (i8*, i64, i8*, i32)* @ScaleRowDown4Box_C, void (i8*, i64, i8*, i32)* @ScaleRowDown4_C
  %261 = shl i32 %29, 2
  %262 = shl nsw i32 %29, 1
  %263 = sext i32 %262 to i64
  %264 = getelementptr inbounds i8, i8* %30, i64 %263
  %265 = select i1 %259, i8* %30, i8* %264
  %266 = select i1 %259, i32 %29, i32 0
  %267 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %268 = icmp eq i32 %267, 0
  br i1 %268, label %269, label %271

269:                                              ; preds = %258
  %270 = tail call i32 @InitCpuFlags() #6
  br label %271

271:                                              ; preds = %269, %258
  %272 = phi i32 [ %270, %269 ], [ %267, %258 ]
  %273 = and i32 %272, 64
  %274 = icmp eq i32 %273, 0
  br i1 %274, label %281, label %275

275:                                              ; preds = %271
  %276 = select i1 %259, void (i8*, i64, i8*, i32)* @ScaleRowDown4Box_Any_SSSE3, void (i8*, i64, i8*, i32)* @ScaleRowDown4_Any_SSSE3
  %277 = and i32 %6, 7
  %278 = icmp eq i32 %277, 0
  %279 = select i1 %259, void (i8*, i64, i8*, i32)* @ScaleRowDown4Box_SSSE3, void (i8*, i64, i8*, i32)* @ScaleRowDown4_SSSE3
  %280 = select i1 %278, void (i8*, i64, i8*, i32)* %279, void (i8*, i64, i8*, i32)* %276
  br label %281

281:                                              ; preds = %275, %271
  %282 = phi void (i8*, i64, i8*, i32)* [ %260, %271 ], [ %280, %275 ]
  %283 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %284 = icmp eq i32 %283, 0
  br i1 %284, label %285, label %287

285:                                              ; preds = %281
  %286 = tail call i32 @InitCpuFlags() #6
  br label %287

287:                                              ; preds = %285, %281
  %288 = phi i32 [ %286, %285 ], [ %283, %281 ]
  %289 = and i32 %288, 1024
  %290 = icmp eq i32 %289, 0
  br i1 %290, label %297, label %291

291:                                              ; preds = %287
  %292 = select i1 %259, void (i8*, i64, i8*, i32)* @ScaleRowDown4Box_Any_AVX2, void (i8*, i64, i8*, i32)* @ScaleRowDown4_Any_AVX2
  %293 = and i32 %6, 15
  %294 = icmp eq i32 %293, 0
  %295 = select i1 %259, void (i8*, i64, i8*, i32)* @ScaleRowDown4Box_AVX2, void (i8*, i64, i8*, i32)* @ScaleRowDown4_AVX2
  %296 = select i1 %294, void (i8*, i64, i8*, i32)* %295, void (i8*, i64, i8*, i32)* %292
  br label %297

297:                                              ; preds = %291, %287
  %298 = phi void (i8*, i64, i8*, i32)* [ %282, %287 ], [ %296, %291 ]
  %299 = icmp sgt i32 %7, 0
  br i1 %299, label %300, label %458

300:                                              ; preds = %297
  %301 = icmp eq i32 %18, 1
  %302 = select i1 %301, i32 0, i32 %266
  %303 = sext i32 %302 to i64
  %304 = sext i32 %261 to i64
  %305 = sext i32 %5 to i64
  br label %306

306:                                              ; preds = %306, %300
  %307 = phi i32 [ 0, %300 ], [ %312, %306 ]
  %308 = phi i8* [ %4, %300 ], [ %311, %306 ]
  %309 = phi i8* [ %265, %300 ], [ %310, %306 ]
  tail call void %298(i8* %309, i64 %303, i8* %308, i32 %6) #6
  %310 = getelementptr inbounds i8, i8* %309, i64 %304
  %311 = getelementptr inbounds i8, i8* %308, i64 %305
  %312 = add nuw nsw i32 %307, 1
  %313 = icmp eq i32 %312, %7
  br i1 %313, label %458, label %306

314:                                              ; preds = %47, %252
  %315 = phi i32 [ %48, %47 ], [ %119, %252 ]
  %316 = icmp eq i32 %18, 3
  %317 = icmp slt i32 %315, %28
  %318 = and i1 %316, %317
  br i1 %318, label %319, label %402

319:                                              ; preds = %314
  %320 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %320) #6
  store i32 0, i32* %10, align 4
  %321 = bitcast i32* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %321) #6
  store i32 0, i32* %11, align 4
  %322 = bitcast i32* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %322) #6
  store i32 0, i32* %12, align 4
  %323 = bitcast i32* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %323) #6
  store i32 0, i32* %13, align 4
  %324 = shl i32 %28, 16
  call void @ScaleSlope(i32 %2, i32 %28, i32 %6, i32 %7, i32 3, i32* nonnull %10, i32* nonnull %11, i32* nonnull %12, i32* nonnull %13) #6
  %325 = shl nuw nsw i32 %43, 1
  %326 = add nuw nsw i32 %325, 63
  %327 = zext i32 %326 to i64
  %328 = call noalias i8* @malloc(i64 %327) #6
  %329 = ptrtoint i8* %328 to i64
  %330 = add nsw i64 %329, 63
  %331 = and i64 %330, -64
  %332 = inttoptr i64 %331 to i8*
  %333 = load i32, i32* %12, align 4
  %334 = and i32 %333, 65535
  %335 = icmp eq i32 %334, 0
  %336 = icmp eq i32 %333, 65536
  %337 = select i1 %336, void (i32, i32, i32, i32, i16*, i8*)* @_ZN6libyuvL15ScaleAddCols0_CEiiiiPKtPh, void (i32, i32, i32, i32, i16*, i8*)* @_ZN6libyuvL15ScaleAddCols1_CEiiiiPKtPh
  %338 = select i1 %335, void (i32, i32, i32, i32, i16*, i8*)* %337, void (i32, i32, i32, i32, i16*, i8*)* @_ZN6libyuvL15ScaleAddCols2_CEiiiiPKtPh
  %339 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %340 = icmp eq i32 %339, 0
  br i1 %340, label %341, label %343

341:                                              ; preds = %319
  %342 = call i32 @InitCpuFlags() #6
  br label %343

343:                                              ; preds = %341, %319
  %344 = phi i32 [ %342, %341 ], [ %339, %319 ]
  %345 = and i32 %344, 32
  %346 = icmp eq i32 %345, 0
  br i1 %346, label %351, label %347

347:                                              ; preds = %343
  %348 = and i32 %43, 15
  %349 = icmp eq i32 %348, 0
  %350 = select i1 %349, void (i8*, i16*, i32)* @ScaleAddRow_SSE2, void (i8*, i16*, i32)* @ScaleAddRow_Any_SSE2
  br label %351

351:                                              ; preds = %347, %343
  %352 = phi void (i8*, i16*, i32)* [ %350, %347 ], [ @ScaleAddRow_C, %343 ]
  %353 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %354 = icmp eq i32 %353, 0
  br i1 %354, label %355, label %357

355:                                              ; preds = %351
  %356 = call i32 @InitCpuFlags() #6
  br label %357

357:                                              ; preds = %355, %351
  %358 = phi i32 [ %356, %355 ], [ %353, %351 ]
  %359 = and i32 %358, 1024
  %360 = icmp eq i32 %359, 0
  br i1 %360, label %365, label %361

361:                                              ; preds = %357
  %362 = and i32 %43, 31
  %363 = icmp eq i32 %362, 0
  %364 = select i1 %363, void (i8*, i16*, i32)* @ScaleAddRow_AVX2, void (i8*, i16*, i32)* @ScaleAddRow_Any_AVX2
  br label %365

365:                                              ; preds = %361, %357
  %366 = phi void (i8*, i16*, i32)* [ %364, %361 ], [ %352, %357 ]
  %367 = icmp sgt i32 %7, 0
  br i1 %367, label %368, label %401

368:                                              ; preds = %365
  %369 = zext i32 %325 to i64
  %370 = inttoptr i64 %331 to i16*
  %371 = sext i32 %29 to i64
  %372 = sext i32 %5 to i64
  br label %373

373:                                              ; preds = %395, %368
  %374 = phi i32 [ 0, %368 ], [ %399, %395 ]
  %375 = phi i8* [ %4, %368 ], [ %398, %395 ]
  %376 = load i32, i32* %11, align 4
  %377 = ashr i32 %376, 16
  %378 = mul nsw i32 %377, %29
  %379 = sext i32 %378 to i64
  %380 = getelementptr inbounds i8, i8* %30, i64 %379
  %381 = load i32, i32* %13, align 4
  %382 = add nsw i32 %381, %376
  %383 = icmp sgt i32 %382, %324
  %384 = select i1 %383, i32 %324, i32 %382
  store i32 %384, i32* %11, align 4
  %385 = ashr i32 %384, 16
  %386 = sub nsw i32 %385, %377
  %387 = icmp sgt i32 %386, 1
  %388 = select i1 %387, i32 %386, i32 1
  call void @llvm.memset.p0i8.i64(i8* align 64 %332, i8 0, i64 %369, i1 false) #6
  br label %389

389:                                              ; preds = %389, %373
  %390 = phi i8* [ %380, %373 ], [ %392, %389 ]
  %391 = phi i32 [ 0, %373 ], [ %393, %389 ]
  call void %366(i8* %390, i16* %370, i32 %43) #6
  %392 = getelementptr inbounds i8, i8* %390, i64 %371
  %393 = add nuw nsw i32 %391, 1
  %394 = icmp ult i32 %393, %388
  br i1 %394, label %389, label %395

395:                                              ; preds = %389
  %396 = load i32, i32* %10, align 4
  %397 = load i32, i32* %12, align 4
  call void %338(i32 %6, i32 %388, i32 %396, i32 %397, i16* %370, i8* %375) #6, !callees !11
  %398 = getelementptr inbounds i8, i8* %375, i64 %372
  %399 = add nuw nsw i32 %374, 1
  %400 = icmp eq i32 %399, %7
  br i1 %400, label %401, label %373

401:                                              ; preds = %395, %365
  call void @free(i8* %328) #6
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %323) #6
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %322) #6
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %321) #6
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %320) #6
  br label %458

402:                                              ; preds = %257, %314
  %403 = add nsw i32 %6, 1
  %404 = sdiv i32 %403, 2
  %405 = icmp eq i32 %404, %2
  %406 = icmp eq i32 %18, 1
  %407 = and i1 %405, %406
  br i1 %407, label %408, label %409

408:                                              ; preds = %402
  tail call void @ScalePlaneUp2_Linear(i32 undef, i32 %28, i32 %6, i32 %7, i32 %29, i32 %5, i8* %30, i8* %4)
  br label %458

409:                                              ; preds = %402
  %410 = add nsw i32 %7, 1
  %411 = sdiv i32 %410, 2
  %412 = icmp eq i32 %411, %28
  %413 = and i1 %405, %412
  %414 = or i32 %18, 1
  %415 = icmp eq i32 %414, 3
  %416 = and i1 %415, %413
  br i1 %416, label %417, label %418

417:                                              ; preds = %409
  tail call void @ScalePlaneUp2_Bilinear(i32 undef, i32 %28, i32 %6, i32 %7, i32 %29, i32 %5, i8* %30, i8* %4)
  br label %458

418:                                              ; preds = %409
  %419 = icmp ne i32 %18, 0
  %420 = and i1 %419, %45
  br i1 %420, label %421, label %422

421:                                              ; preds = %418
  tail call void @ScalePlaneBilinearUp(i32 %2, i32 %28, i32 %6, i32 %7, i32 %29, i32 %5, i8* %30, i8* %4, i32 %18)
  br label %458

422:                                              ; preds = %418
  br i1 %419, label %423, label %424

423:                                              ; preds = %422
  tail call void @ScalePlaneBilinearDown(i32 %2, i32 %28, i32 %6, i32 %7, i32 %29, i32 %5, i8* %30, i8* %4, i32 %18)
  br label %458

424:                                              ; preds = %422
  %425 = bitcast i32* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %425) #6
  store i32 0, i32* %14, align 4
  %426 = bitcast i32* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %426) #6
  store i32 0, i32* %15, align 4
  %427 = bitcast i32* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %427) #6
  store i32 0, i32* %16, align 4
  %428 = bitcast i32* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %428) #6
  store i32 0, i32* %17, align 4
  call void @ScaleSlope(i32 %2, i32 %28, i32 %6, i32 %7, i32 0, i32* nonnull %14, i32* nonnull %15, i32* nonnull %16, i32* nonnull %17) #6
  %429 = shl nuw nsw i32 %43, 1
  %430 = icmp eq i32 %429, %6
  %431 = load i32, i32* %14, align 4
  %432 = icmp slt i32 %431, 32768
  %433 = and i1 %430, %432
  %434 = select i1 %433, void (i8*, i8*, i32, i32, i32)* @ScaleColsUp2_C, void (i8*, i8*, i32, i32, i32)* @ScaleCols_C
  %435 = icmp sgt i32 %7, 0
  br i1 %435, label %436, label %457

436:                                              ; preds = %424
  %437 = sext i32 %5 to i64
  %438 = load i32, i32* %15, align 4
  br label %439

439:                                              ; preds = %454, %436
  %440 = phi i32 [ %431, %436 ], [ %456, %454 ]
  %441 = phi i32 [ %438, %436 ], [ %451, %454 ]
  %442 = phi i32 [ 0, %436 ], [ %452, %454 ]
  %443 = phi i8* [ %4, %436 ], [ %455, %454 ]
  %444 = ashr i32 %441, 16
  %445 = mul nsw i32 %444, %29
  %446 = sext i32 %445 to i64
  %447 = getelementptr inbounds i8, i8* %30, i64 %446
  %448 = load i32, i32* %16, align 4
  call void %434(i8* %443, i8* %447, i32 %6, i32 %440, i32 %448) #6, !callees !12
  %449 = load i32, i32* %17, align 4
  %450 = load i32, i32* %15, align 4
  %451 = add nsw i32 %450, %449
  store i32 %451, i32* %15, align 4
  %452 = add nuw nsw i32 %442, 1
  %453 = icmp eq i32 %452, %7
  br i1 %453, label %457, label %454

454:                                              ; preds = %439
  %455 = getelementptr inbounds i8, i8* %443, i64 %437
  %456 = load i32, i32* %14, align 4
  br label %439

457:                                              ; preds = %439, %424
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %428) #6
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %427) #6
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %426) #6
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %425) #6
  br label %458

458:                                              ; preds = %306, %174, %297, %251, %244, %240, %165, %115, %109, %105, %457, %423, %421, %417, %408, %401, %38, %34
  ret void
}

declare i32 @ScaleFilterReduce(i32, i32, i32, i32, i32) local_unnamed_addr #3

declare void @CopyPlane(i8*, i32, i8*, i32, i32, i32) local_unnamed_addr #3

declare void @ScalePlaneVertical(i32, i32, i32, i32, i32, i8*, i8*, i32, i32, i32, i32, i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @ScalePlane_16(i16*, i32, i32, i32, i16*, i32, i32, i32, i32) local_unnamed_addr #0 {
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = tail call i32 @ScaleFilterReduce(i32 %2, i32 %3, i32 %6, i32 %7, i32 %8) #6
  %19 = icmp slt i32 %3, 0
  br i1 %19, label %20, label %27

20:                                               ; preds = %9
  %21 = sub nsw i32 0, %3
  %22 = xor i32 %3, -1
  %23 = mul nsw i32 %22, %1
  %24 = sext i32 %23 to i64
  %25 = getelementptr inbounds i16, i16* %0, i64 %24
  %26 = sub nsw i32 0, %1
  br label %27

27:                                               ; preds = %20, %9
  %28 = phi i32 [ %21, %20 ], [ %3, %9 ]
  %29 = phi i32 [ %26, %20 ], [ %1, %9 ]
  %30 = phi i16* [ %25, %20 ], [ %0, %9 ]
  %31 = icmp eq i32 %6, %2
  %32 = icmp eq i32 %28, %7
  %33 = and i1 %31, %32
  br i1 %33, label %34, label %35

34:                                               ; preds = %27
  tail call void @CopyPlane_16(i16* %30, i32 %29, i16* %4, i32 %5, i32 %6, i32 %7) #6
  br label %400

35:                                               ; preds = %27
  %36 = icmp ne i32 %18, 3
  %37 = and i1 %31, %36
  br i1 %37, label %38, label %40

38:                                               ; preds = %35
  %39 = tail call i32 @FixedDiv_X86(i32 %28, i32 %7) #6
  tail call void @ScalePlaneVertical_16(i32 %28, i32 %6, i32 %7, i32 %29, i32 %5, i16* %30, i16* %4, i32 0, i32 0, i32 %39, i32 1, i32 %18) #6
  br label %400

40:                                               ; preds = %35
  %41 = icmp slt i32 %2, 0
  %42 = sub nsw i32 0, %2
  %43 = select i1 %41, i32 %42, i32 %2
  %44 = icmp slt i32 %43, %6
  %45 = icmp slt i32 %28, %7
  %46 = or i1 %44, %45
  br i1 %46, label %47, label %49

47:                                               ; preds = %40
  %48 = shl nsw i32 %7, 1
  br label %203

49:                                               ; preds = %40
  %50 = shl nsw i32 %6, 2
  %51 = mul nsw i32 %2, 3
  %52 = icmp eq i32 %50, %51
  br i1 %52, label %53, label %97

53:                                               ; preds = %49
  %54 = shl nsw i32 %7, 2
  %55 = mul nsw i32 %28, 3
  %56 = icmp eq i32 %54, %55
  br i1 %56, label %57, label %97

57:                                               ; preds = %53
  %58 = icmp eq i32 %18, 1
  %59 = select i1 %58, i32 0, i32 %29
  %60 = icmp eq i32 %18, 0
  %61 = select i1 %60, void (i16*, i64, i16*, i32)* @ScaleRowDown34_16_C, void (i16*, i64, i16*, i32)* @ScaleRowDown34_0_Box_16_C
  %62 = select i1 %60, void (i16*, i64, i16*, i32)* @ScaleRowDown34_16_C, void (i16*, i64, i16*, i32)* @ScaleRowDown34_1_Box_16_C
  %63 = add nsw i32 %7, -2
  %64 = icmp sgt i32 %63, 0
  br i1 %64, label %65, label %86

65:                                               ; preds = %57
  %66 = sext i32 %59 to i64
  %67 = sext i32 %29 to i64
  %68 = sext i32 %5 to i64
  %69 = sub nsw i32 0, %59
  %70 = sext i32 %69 to i64
  %71 = shl nsw i32 %29, 1
  %72 = sext i32 %71 to i64
  br label %73

73:                                               ; preds = %73, %65
  %74 = phi i32 [ 0, %65 ], [ %84, %73 ]
  %75 = phi i16* [ %30, %65 ], [ %82, %73 ]
  %76 = phi i16* [ %4, %65 ], [ %83, %73 ]
  tail call void %61(i16* %75, i64 %66, i16* %76, i32 %6) #6, !callees !13
  %77 = getelementptr inbounds i16, i16* %75, i64 %67
  %78 = getelementptr inbounds i16, i16* %76, i64 %68
  tail call void %62(i16* %77, i64 %66, i16* %78, i32 %6) #6, !callees !14
  %79 = getelementptr inbounds i16, i16* %77, i64 %67
  %80 = getelementptr inbounds i16, i16* %78, i64 %68
  %81 = getelementptr inbounds i16, i16* %79, i64 %67
  tail call void %61(i16* %81, i64 %70, i16* %80, i32 %6) #6, !callees !13
  %82 = getelementptr inbounds i16, i16* %79, i64 %72
  %83 = getelementptr inbounds i16, i16* %80, i64 %68
  %84 = add nuw nsw i32 %74, 3
  %85 = icmp slt i32 %84, %63
  br i1 %85, label %73, label %86

86:                                               ; preds = %73, %57
  %87 = phi i16* [ %4, %57 ], [ %83, %73 ]
  %88 = phi i16* [ %30, %57 ], [ %82, %73 ]
  %89 = srem i32 %7, 3
  switch i32 %89, label %400 [
    i32 2, label %90
    i32 1, label %96
  ]

90:                                               ; preds = %86
  %91 = sext i32 %59 to i64
  tail call void %61(i16* %88, i64 %91, i16* %87, i32 %6) #6, !callees !13
  %92 = sext i32 %29 to i64
  %93 = getelementptr inbounds i16, i16* %88, i64 %92
  %94 = sext i32 %5 to i64
  %95 = getelementptr inbounds i16, i16* %87, i64 %94
  tail call void %62(i16* %93, i64 0, i16* %95, i32 %6) #6, !callees !14
  br label %400

96:                                               ; preds = %86
  tail call void %61(i16* %88, i64 0, i16* %87, i32 %6) #6, !callees !13
  br label %400

97:                                               ; preds = %53, %49
  %98 = shl nsw i32 %6, 1
  %99 = icmp eq i32 %98, %2
  %100 = shl nsw i32 %7, 1
  %101 = icmp eq i32 %100, %28
  %102 = and i1 %99, %101
  br i1 %102, label %103, label %127

103:                                              ; preds = %97
  %104 = icmp eq i32 %18, 0
  %105 = icmp eq i32 %18, 1
  %106 = select i1 %105, void (i16*, i64, i16*, i32)* @ScaleRowDown2Linear_16_C, void (i16*, i64, i16*, i32)* @ScaleRowDown2Box_16_C
  %107 = select i1 %104, void (i16*, i64, i16*, i32)* @ScaleRowDown2_16_C, void (i16*, i64, i16*, i32)* %106
  %108 = icmp sgt i32 %7, 0
  br i1 %108, label %109, label %400

109:                                              ; preds = %103
  %110 = icmp ult i32 %18, 2
  %111 = select i1 %110, i32 0, i32 %29
  %112 = sext i32 %29 to i64
  %113 = getelementptr inbounds i16, i16* %30, i64 %112
  %114 = select i1 %104, i16* %113, i16* %30
  %115 = shl i32 %29, 1
  %116 = sext i32 %111 to i64
  %117 = sext i32 %115 to i64
  %118 = sext i32 %5 to i64
  br label %119

119:                                              ; preds = %119, %109
  %120 = phi i32 [ 0, %109 ], [ %125, %119 ]
  %121 = phi i16* [ %4, %109 ], [ %124, %119 ]
  %122 = phi i16* [ %114, %109 ], [ %123, %119 ]
  tail call void %107(i16* %122, i64 %116, i16* %121, i32 %6) #6, !callees !15
  %123 = getelementptr inbounds i16, i16* %122, i64 %117
  %124 = getelementptr inbounds i16, i16* %121, i64 %118
  %125 = add nuw nsw i32 %120, 1
  %126 = icmp eq i32 %125, %7
  br i1 %126, label %400, label %119

127:                                              ; preds = %97
  %128 = shl nsw i32 %6, 3
  %129 = icmp eq i32 %128, %51
  br i1 %129, label %130, label %173

130:                                              ; preds = %127
  %131 = shl nsw i32 %7, 3
  %132 = mul nsw i32 %28, 3
  %133 = icmp eq i32 %131, %132
  br i1 %133, label %134, label %173

134:                                              ; preds = %130
  %135 = icmp eq i32 %18, 1
  %136 = select i1 %135, i32 0, i32 %29
  %137 = icmp eq i32 %18, 0
  %138 = select i1 %137, void (i16*, i64, i16*, i32)* @ScaleRowDown38_16_C, void (i16*, i64, i16*, i32)* @ScaleRowDown38_3_Box_16_C
  %139 = select i1 %137, void (i16*, i64, i16*, i32)* @ScaleRowDown38_16_C, void (i16*, i64, i16*, i32)* @ScaleRowDown38_2_Box_16_C
  %140 = add nsw i32 %7, -2
  %141 = icmp sgt i32 %140, 0
  br i1 %141, label %142, label %161

142:                                              ; preds = %134
  %143 = sext i32 %136 to i64
  %144 = mul nsw i32 %29, 3
  %145 = sext i32 %144 to i64
  %146 = sext i32 %5 to i64
  %147 = shl nsw i32 %29, 1
  %148 = sext i32 %147 to i64
  br label %149

149:                                              ; preds = %149, %142
  %150 = phi i32 [ 0, %142 ], [ %159, %149 ]
  %151 = phi i16* [ %30, %142 ], [ %157, %149 ]
  %152 = phi i16* [ %4, %142 ], [ %158, %149 ]
  tail call void %138(i16* %151, i64 %143, i16* %152, i32 %6) #6, !callees !16
  %153 = getelementptr inbounds i16, i16* %151, i64 %145
  %154 = getelementptr inbounds i16, i16* %152, i64 %146
  tail call void %138(i16* %153, i64 %143, i16* %154, i32 %6) #6, !callees !16
  %155 = getelementptr inbounds i16, i16* %153, i64 %145
  %156 = getelementptr inbounds i16, i16* %154, i64 %146
  tail call void %139(i16* %155, i64 %143, i16* %156, i32 %6) #6, !callees !17
  %157 = getelementptr inbounds i16, i16* %155, i64 %148
  %158 = getelementptr inbounds i16, i16* %156, i64 %146
  %159 = add nuw nsw i32 %150, 3
  %160 = icmp slt i32 %159, %140
  br i1 %160, label %149, label %161

161:                                              ; preds = %149, %134
  %162 = phi i16* [ %4, %134 ], [ %158, %149 ]
  %163 = phi i16* [ %30, %134 ], [ %157, %149 ]
  %164 = srem i32 %7, 3
  switch i32 %164, label %400 [
    i32 2, label %165
    i32 1, label %172
  ]

165:                                              ; preds = %161
  %166 = sext i32 %136 to i64
  tail call void %138(i16* %163, i64 %166, i16* %162, i32 %6) #6, !callees !16
  %167 = mul nsw i32 %29, 3
  %168 = sext i32 %167 to i64
  %169 = getelementptr inbounds i16, i16* %163, i64 %168
  %170 = sext i32 %5 to i64
  %171 = getelementptr inbounds i16, i16* %162, i64 %170
  tail call void %138(i16* %169, i64 0, i16* %171, i32 %6) #6, !callees !16
  br label %400

172:                                              ; preds = %161
  tail call void %138(i16* %163, i64 0, i16* %162, i32 %6) #6, !callees !16
  br label %400

173:                                              ; preds = %130, %127
  %174 = icmp eq i32 %50, %2
  %175 = shl nsw i32 %7, 2
  %176 = icmp eq i32 %175, %28
  %177 = and i1 %174, %176
  br i1 %177, label %178, label %203

178:                                              ; preds = %173
  switch i32 %18, label %261 [
    i32 3, label %179
    i32 0, label %179
  ]

179:                                              ; preds = %178, %178
  %180 = icmp ne i32 %18, 0
  %181 = select i1 %180, void (i16*, i64, i16*, i32)* @ScaleRowDown4Box_16_C, void (i16*, i64, i16*, i32)* @ScaleRowDown4_16_C
  %182 = icmp sgt i32 %7, 0
  br i1 %182, label %183, label %400

183:                                              ; preds = %179
  %184 = icmp eq i32 %18, 1
  %185 = select i1 %180, i32 %29, i32 0
  %186 = select i1 %184, i32 0, i32 %185
  %187 = shl nsw i32 %29, 1
  %188 = sext i32 %187 to i64
  %189 = getelementptr inbounds i16, i16* %30, i64 %188
  %190 = select i1 %180, i16* %30, i16* %189
  %191 = shl i32 %29, 2
  %192 = sext i32 %186 to i64
  %193 = sext i32 %191 to i64
  %194 = sext i32 %5 to i64
  br label %195

195:                                              ; preds = %195, %183
  %196 = phi i32 [ 0, %183 ], [ %201, %195 ]
  %197 = phi i16* [ %4, %183 ], [ %200, %195 ]
  %198 = phi i16* [ %190, %183 ], [ %199, %195 ]
  tail call void %181(i16* %198, i64 %192, i16* %197, i32 %6) #6, !callees !18
  %199 = getelementptr inbounds i16, i16* %198, i64 %193
  %200 = getelementptr inbounds i16, i16* %197, i64 %194
  %201 = add nuw nsw i32 %196, 1
  %202 = icmp eq i32 %201, %7
  br i1 %202, label %400, label %195

203:                                              ; preds = %47, %173
  %204 = phi i32 [ %48, %47 ], [ %100, %173 ]
  %205 = icmp eq i32 %18, 3
  %206 = icmp slt i32 %204, %28
  %207 = and i1 %205, %206
  br i1 %207, label %208, label %261

208:                                              ; preds = %203
  %209 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %209) #6
  store i32 0, i32* %10, align 4
  %210 = bitcast i32* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %210) #6
  store i32 0, i32* %11, align 4
  %211 = bitcast i32* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %211) #6
  store i32 0, i32* %12, align 4
  %212 = bitcast i32* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %212) #6
  store i32 0, i32* %13, align 4
  %213 = shl i32 %28, 16
  call void @ScaleSlope(i32 %2, i32 %28, i32 %6, i32 %7, i32 3, i32* nonnull %10, i32* nonnull %11, i32* nonnull %12, i32* nonnull %13) #6
  %214 = shl nsw i32 %43, 2
  %215 = add nuw nsw i32 %214, 63
  %216 = zext i32 %215 to i64
  %217 = call noalias i8* @malloc(i64 %216) #6
  %218 = ptrtoint i8* %217 to i64
  %219 = add nsw i64 %218, 63
  %220 = and i64 %219, -64
  %221 = inttoptr i64 %220 to i8*
  %222 = load i32, i32* %12, align 4
  %223 = and i32 %222, 65535
  %224 = icmp eq i32 %223, 0
  %225 = select i1 %224, void (i32, i32, i32, i32, i32*, i16*)* @_ZN6libyuvL18ScaleAddCols1_16_CEiiiiPKjPt, void (i32, i32, i32, i32, i32*, i16*)* @_ZN6libyuvL18ScaleAddCols2_16_CEiiiiPKjPt
  %226 = icmp sgt i32 %7, 0
  br i1 %226, label %227, label %260

227:                                              ; preds = %208
  %228 = zext i32 %214 to i64
  %229 = inttoptr i64 %220 to i32*
  %230 = sext i32 %29 to i64
  %231 = sext i32 %5 to i64
  br label %232

232:                                              ; preds = %254, %227
  %233 = phi i32 [ 0, %227 ], [ %258, %254 ]
  %234 = phi i16* [ %4, %227 ], [ %257, %254 ]
  %235 = load i32, i32* %11, align 4
  %236 = ashr i32 %235, 16
  %237 = mul nsw i32 %236, %29
  %238 = sext i32 %237 to i64
  %239 = getelementptr inbounds i16, i16* %30, i64 %238
  %240 = load i32, i32* %13, align 4
  %241 = add nsw i32 %240, %235
  %242 = icmp sgt i32 %241, %213
  %243 = select i1 %242, i32 %213, i32 %241
  store i32 %243, i32* %11, align 4
  %244 = ashr i32 %243, 16
  %245 = sub nsw i32 %244, %236
  %246 = icmp sgt i32 %245, 1
  %247 = select i1 %246, i32 %245, i32 1
  call void @llvm.memset.p0i8.i64(i8* align 64 %221, i8 0, i64 %228, i1 false) #6
  br label %248

248:                                              ; preds = %248, %232
  %249 = phi i16* [ %239, %232 ], [ %251, %248 ]
  %250 = phi i32 [ 0, %232 ], [ %252, %248 ]
  call void @ScaleAddRow_16_C(i16* %249, i32* %229, i32 %43) #6
  %251 = getelementptr inbounds i16, i16* %249, i64 %230
  %252 = add nuw nsw i32 %250, 1
  %253 = icmp ult i32 %252, %247
  br i1 %253, label %248, label %254

254:                                              ; preds = %248
  %255 = load i32, i32* %10, align 4
  %256 = load i32, i32* %12, align 4
  call void %225(i32 %6, i32 %247, i32 %255, i32 %256, i32* %229, i16* %234) #6, !callees !19
  %257 = getelementptr inbounds i16, i16* %234, i64 %231
  %258 = add nuw nsw i32 %233, 1
  %259 = icmp eq i32 %258, %7
  br i1 %259, label %260, label %232

260:                                              ; preds = %254, %208
  call void @free(i8* %217) #6
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %212) #6
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %211) #6
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %210) #6
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %209) #6
  br label %400

261:                                              ; preds = %178, %203
  %262 = add nsw i32 %6, 1
  %263 = sdiv i32 %262, 2
  %264 = icmp eq i32 %263, %2
  %265 = icmp eq i32 %18, 1
  %266 = and i1 %264, %265
  br i1 %266, label %267, label %311

267:                                              ; preds = %261
  %268 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %269 = icmp eq i32 %268, 0
  br i1 %269, label %270, label %272

270:                                              ; preds = %267
  %271 = tail call i32 @InitCpuFlags() #6
  br label %272

272:                                              ; preds = %270, %267
  %273 = phi i32 [ %271, %270 ], [ %268, %267 ]
  %274 = and i32 %273, 32
  %275 = icmp eq i32 %274, 0
  %276 = select i1 %275, void (i16*, i16*, i32)* @ScaleRowUp2_Linear_16_Any_C, void (i16*, i16*, i32)* @ScaleRowUp2_Linear_16_Any_SSE2
  %277 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %278 = icmp eq i32 %277, 0
  br i1 %278, label %279, label %281

279:                                              ; preds = %272
  %280 = tail call i32 @InitCpuFlags() #6
  br label %281

281:                                              ; preds = %279, %272
  %282 = phi i32 [ %280, %279 ], [ %277, %272 ]
  %283 = and i32 %282, 1024
  %284 = icmp eq i32 %283, 0
  %285 = select i1 %284, void (i16*, i16*, i32)* %276, void (i16*, i16*, i32)* @ScaleRowUp2_Linear_16_Any_AVX2
  %286 = icmp eq i32 %7, 1
  %287 = add nsw i32 %28, -1
  br i1 %286, label %288, label %293

288:                                              ; preds = %281
  %289 = sdiv i32 %287, 2
  %290 = mul nsw i32 %289, %29
  %291 = sext i32 %290 to i64
  %292 = getelementptr inbounds i16, i16* %30, i64 %291
  tail call void %285(i16* %292, i16* %4, i32 %6) #6, !callees !8
  br label %400

293:                                              ; preds = %281
  %294 = add nsw i32 %7, -1
  %295 = tail call i32 @FixedDiv_X86(i32 %287, i32 %294) #6
  %296 = icmp sgt i32 %7, 0
  br i1 %296, label %297, label %400

297:                                              ; preds = %293
  %298 = sext i32 %5 to i64
  br label %299

299:                                              ; preds = %299, %297
  %300 = phi i32 [ 32767, %297 ], [ %308, %299 ]
  %301 = phi i32 [ 0, %297 ], [ %309, %299 ]
  %302 = phi i16* [ %4, %297 ], [ %307, %299 ]
  %303 = ashr i32 %300, 16
  %304 = mul nsw i32 %303, %29
  %305 = sext i32 %304 to i64
  %306 = getelementptr inbounds i16, i16* %30, i64 %305
  tail call void %285(i16* %306, i16* %302, i32 %6) #6, !callees !8
  %307 = getelementptr inbounds i16, i16* %302, i64 %298
  %308 = add nsw i32 %300, %295
  %309 = add nuw nsw i32 %301, 1
  %310 = icmp eq i32 %309, %7
  br i1 %310, label %400, label %299

311:                                              ; preds = %261
  %312 = add nsw i32 %7, 1
  %313 = sdiv i32 %312, 2
  %314 = icmp eq i32 %313, %28
  %315 = and i1 %264, %314
  %316 = or i32 %18, 1
  %317 = icmp eq i32 %316, 3
  %318 = and i1 %317, %315
  br i1 %318, label %319, label %360

319:                                              ; preds = %311
  %320 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %321 = icmp eq i32 %320, 0
  br i1 %321, label %322, label %324

322:                                              ; preds = %319
  %323 = tail call i32 @InitCpuFlags() #6
  br label %324

324:                                              ; preds = %322, %319
  %325 = phi i32 [ %323, %322 ], [ %320, %319 ]
  %326 = and i32 %325, 64
  %327 = icmp eq i32 %326, 0
  %328 = select i1 %327, void (i16*, i64, i16*, i64, i32)* @ScaleRowUp2_Bilinear_16_Any_C, void (i16*, i64, i16*, i64, i32)* @ScaleRowUp2_Bilinear_16_Any_SSSE3
  %329 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %330 = icmp eq i32 %329, 0
  br i1 %330, label %331, label %333

331:                                              ; preds = %324
  %332 = tail call i32 @InitCpuFlags() #6
  br label %333

333:                                              ; preds = %331, %324
  %334 = phi i32 [ %332, %331 ], [ %329, %324 ]
  %335 = and i32 %334, 1024
  %336 = icmp eq i32 %335, 0
  %337 = select i1 %336, void (i16*, i64, i16*, i64, i32)* %328, void (i16*, i64, i16*, i64, i32)* @ScaleRowUp2_Bilinear_16_Any_AVX2
  tail call void %337(i16* %30, i64 0, i16* %4, i64 0, i32 %6) #6, !callees !9
  %338 = sext i32 %5 to i64
  %339 = getelementptr inbounds i16, i16* %4, i64 %338
  %340 = add i32 %28, -1
  %341 = icmp sgt i32 %340, 0
  br i1 %341, label %342, label %354

342:                                              ; preds = %333
  %343 = sext i32 %29 to i64
  %344 = shl nsw i32 %5, 1
  %345 = sext i32 %344 to i64
  br label %346

346:                                              ; preds = %346, %342
  %347 = phi i32 [ 0, %342 ], [ %352, %346 ]
  %348 = phi i16* [ %339, %342 ], [ %351, %346 ]
  %349 = phi i16* [ %30, %342 ], [ %350, %346 ]
  tail call void %337(i16* %349, i64 %343, i16* %348, i64 %338, i32 %6) #6, !callees !9
  %350 = getelementptr inbounds i16, i16* %349, i64 %343
  %351 = getelementptr inbounds i16, i16* %348, i64 %345
  %352 = add nuw nsw i32 %347, 1
  %353 = icmp eq i32 %352, %340
  br i1 %353, label %354, label %346

354:                                              ; preds = %346, %333
  %355 = phi i16* [ %30, %333 ], [ %350, %346 ]
  %356 = phi i16* [ %339, %333 ], [ %351, %346 ]
  %357 = and i32 %7, 1
  %358 = icmp eq i32 %357, 0
  br i1 %358, label %359, label %400

359:                                              ; preds = %354
  tail call void %337(i16* %355, i64 0, i16* %356, i64 0, i32 %6) #6, !callees !9
  br label %400

360:                                              ; preds = %311
  %361 = icmp ne i32 %18, 0
  %362 = and i1 %361, %45
  br i1 %362, label %363, label %364

363:                                              ; preds = %360
  tail call void @ScalePlaneBilinearUp_16(i32 %2, i32 %28, i32 %6, i32 %7, i32 %29, i32 %5, i16* %30, i16* %4, i32 %18)
  br label %400

364:                                              ; preds = %360
  br i1 %361, label %365, label %366

365:                                              ; preds = %364
  tail call void @ScalePlaneBilinearDown_16(i32 %2, i32 %28, i32 %6, i32 %7, i32 %29, i32 %5, i16* %30, i16* %4, i32 %18)
  br label %400

366:                                              ; preds = %364
  %367 = bitcast i32* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %367) #6
  store i32 0, i32* %14, align 4
  %368 = bitcast i32* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %368) #6
  store i32 0, i32* %15, align 4
  %369 = bitcast i32* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %369) #6
  store i32 0, i32* %16, align 4
  %370 = bitcast i32* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %370) #6
  store i32 0, i32* %17, align 4
  call void @ScaleSlope(i32 %2, i32 %28, i32 %6, i32 %7, i32 0, i32* nonnull %14, i32* nonnull %15, i32* nonnull %16, i32* nonnull %17) #6
  %371 = shl nuw nsw i32 %43, 1
  %372 = icmp eq i32 %371, %6
  %373 = load i32, i32* %14, align 4
  %374 = icmp slt i32 %373, 32768
  %375 = and i1 %372, %374
  %376 = select i1 %375, void (i16*, i16*, i32, i32, i32)* @ScaleColsUp2_16_C, void (i16*, i16*, i32, i32, i32)* @ScaleCols_16_C
  %377 = icmp sgt i32 %7, 0
  br i1 %377, label %378, label %399

378:                                              ; preds = %366
  %379 = sext i32 %5 to i64
  %380 = load i32, i32* %15, align 4
  br label %381

381:                                              ; preds = %396, %378
  %382 = phi i32 [ %373, %378 ], [ %398, %396 ]
  %383 = phi i32 [ %380, %378 ], [ %393, %396 ]
  %384 = phi i32 [ 0, %378 ], [ %394, %396 ]
  %385 = phi i16* [ %4, %378 ], [ %397, %396 ]
  %386 = ashr i32 %383, 16
  %387 = mul nsw i32 %386, %29
  %388 = sext i32 %387 to i64
  %389 = getelementptr inbounds i16, i16* %30, i64 %388
  %390 = load i32, i32* %16, align 4
  call void %376(i16* %385, i16* %389, i32 %6, i32 %382, i32 %390) #6, !callees !20
  %391 = load i32, i32* %17, align 4
  %392 = load i32, i32* %15, align 4
  %393 = add nsw i32 %392, %391
  store i32 %393, i32* %15, align 4
  %394 = add nuw nsw i32 %384, 1
  %395 = icmp eq i32 %394, %7
  br i1 %395, label %399, label %396

396:                                              ; preds = %381
  %397 = getelementptr inbounds i16, i16* %385, i64 %379
  %398 = load i32, i32* %14, align 4
  br label %381

399:                                              ; preds = %381, %366
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %370) #6
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %369) #6
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %368) #6
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %367) #6
  br label %400

400:                                              ; preds = %195, %119, %299, %359, %354, %293, %288, %179, %172, %165, %161, %103, %96, %90, %86, %399, %365, %363, %260, %38, %34
  ret void
}

declare void @CopyPlane_16(i16*, i32, i16*, i32, i32, i32) local_unnamed_addr #3

declare void @ScalePlaneVertical_16(i32, i32, i32, i32, i32, i16*, i16*, i32, i32, i32, i32, i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @ScalePlane_12(i16*, i32, i32, i32, i16*, i32, i32, i32, i32) local_unnamed_addr #0 {
  %10 = tail call i32 @ScaleFilterReduce(i32 %2, i32 %3, i32 %6, i32 %7, i32 %8) #6
  %11 = icmp slt i32 %3, 0
  br i1 %11, label %12, label %19

12:                                               ; preds = %9
  %13 = sub nsw i32 0, %3
  %14 = xor i32 %3, -1
  %15 = mul nsw i32 %14, %1
  %16 = sext i32 %15 to i64
  %17 = getelementptr inbounds i16, i16* %0, i64 %16
  %18 = sub nsw i32 0, %1
  br label %19

19:                                               ; preds = %12, %9
  %20 = phi i32 [ %13, %12 ], [ %3, %9 ]
  %21 = phi i32 [ %18, %12 ], [ %1, %9 ]
  %22 = phi i16* [ %17, %12 ], [ %0, %9 ]
  %23 = add nsw i32 %6, 1
  %24 = sdiv i32 %23, 2
  %25 = icmp eq i32 %24, %2
  %26 = icmp eq i32 %10, 1
  %27 = and i1 %25, %26
  br i1 %27, label %28, label %72

28:                                               ; preds = %19
  %29 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %31, label %33

31:                                               ; preds = %28
  %32 = tail call i32 @InitCpuFlags() #6
  br label %33

33:                                               ; preds = %31, %28
  %34 = phi i32 [ %32, %31 ], [ %29, %28 ]
  %35 = and i32 %34, 64
  %36 = icmp eq i32 %35, 0
  %37 = select i1 %36, void (i16*, i16*, i32)* @ScaleRowUp2_Linear_16_Any_C, void (i16*, i16*, i32)* @ScaleRowUp2_Linear_12_Any_SSSE3
  %38 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %40, label %42

40:                                               ; preds = %33
  %41 = tail call i32 @InitCpuFlags() #6
  br label %42

42:                                               ; preds = %40, %33
  %43 = phi i32 [ %41, %40 ], [ %38, %33 ]
  %44 = and i32 %43, 1024
  %45 = icmp eq i32 %44, 0
  %46 = select i1 %45, void (i16*, i16*, i32)* %37, void (i16*, i16*, i32)* @ScaleRowUp2_Linear_12_Any_AVX2
  %47 = icmp eq i32 %7, 1
  %48 = add nsw i32 %20, -1
  br i1 %47, label %49, label %54

49:                                               ; preds = %42
  %50 = sdiv i32 %48, 2
  %51 = mul nsw i32 %50, %21
  %52 = sext i32 %51 to i64
  %53 = getelementptr inbounds i16, i16* %22, i64 %52
  tail call void %46(i16* %53, i16* %4, i32 %6) #6, !callees !6
  br label %122

54:                                               ; preds = %42
  %55 = add nsw i32 %7, -1
  %56 = tail call i32 @FixedDiv_X86(i32 %48, i32 %55) #6
  %57 = icmp sgt i32 %7, 0
  br i1 %57, label %58, label %122

58:                                               ; preds = %54
  %59 = sext i32 %5 to i64
  br label %60

60:                                               ; preds = %60, %58
  %61 = phi i32 [ 32767, %58 ], [ %69, %60 ]
  %62 = phi i32 [ 0, %58 ], [ %70, %60 ]
  %63 = phi i16* [ %4, %58 ], [ %68, %60 ]
  %64 = ashr i32 %61, 16
  %65 = mul nsw i32 %64, %21
  %66 = sext i32 %65 to i64
  %67 = getelementptr inbounds i16, i16* %22, i64 %66
  tail call void %46(i16* %67, i16* %63, i32 %6) #6, !callees !6
  %68 = getelementptr inbounds i16, i16* %63, i64 %59
  %69 = add nsw i32 %61, %56
  %70 = add nuw nsw i32 %62, 1
  %71 = icmp eq i32 %70, %7
  br i1 %71, label %122, label %60

72:                                               ; preds = %19
  %73 = add nsw i32 %7, 1
  %74 = sdiv i32 %73, 2
  %75 = icmp eq i32 %74, %20
  %76 = and i1 %25, %75
  %77 = or i32 %10, 1
  %78 = icmp eq i32 %77, 3
  %79 = and i1 %78, %76
  br i1 %79, label %80, label %121

80:                                               ; preds = %72
  %81 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %83, label %85

83:                                               ; preds = %80
  %84 = tail call i32 @InitCpuFlags() #6
  br label %85

85:                                               ; preds = %83, %80
  %86 = phi i32 [ %84, %83 ], [ %81, %80 ]
  %87 = and i32 %86, 64
  %88 = icmp eq i32 %87, 0
  %89 = select i1 %88, void (i16*, i64, i16*, i64, i32)* @ScaleRowUp2_Bilinear_16_Any_C, void (i16*, i64, i16*, i64, i32)* @ScaleRowUp2_Bilinear_12_Any_SSSE3
  %90 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %91 = icmp eq i32 %90, 0
  br i1 %91, label %92, label %94

92:                                               ; preds = %85
  %93 = tail call i32 @InitCpuFlags() #6
  br label %94

94:                                               ; preds = %92, %85
  %95 = phi i32 [ %93, %92 ], [ %90, %85 ]
  %96 = and i32 %95, 1024
  %97 = icmp eq i32 %96, 0
  %98 = select i1 %97, void (i16*, i64, i16*, i64, i32)* %89, void (i16*, i64, i16*, i64, i32)* @ScaleRowUp2_Bilinear_12_Any_AVX2
  tail call void %98(i16* %22, i64 0, i16* %4, i64 0, i32 %6) #6, !callees !7
  %99 = sext i32 %5 to i64
  %100 = getelementptr inbounds i16, i16* %4, i64 %99
  %101 = add i32 %20, -1
  %102 = icmp sgt i32 %101, 0
  br i1 %102, label %103, label %115

103:                                              ; preds = %94
  %104 = sext i32 %21 to i64
  %105 = shl nsw i32 %5, 1
  %106 = sext i32 %105 to i64
  br label %107

107:                                              ; preds = %107, %103
  %108 = phi i32 [ 0, %103 ], [ %113, %107 ]
  %109 = phi i16* [ %100, %103 ], [ %112, %107 ]
  %110 = phi i16* [ %22, %103 ], [ %111, %107 ]
  tail call void %98(i16* %110, i64 %104, i16* %109, i64 %99, i32 %6) #6, !callees !7
  %111 = getelementptr inbounds i16, i16* %110, i64 %104
  %112 = getelementptr inbounds i16, i16* %109, i64 %106
  %113 = add nuw nsw i32 %108, 1
  %114 = icmp eq i32 %113, %101
  br i1 %114, label %115, label %107

115:                                              ; preds = %107, %94
  %116 = phi i16* [ %22, %94 ], [ %111, %107 ]
  %117 = phi i16* [ %100, %94 ], [ %112, %107 ]
  %118 = and i32 %7, 1
  %119 = icmp eq i32 %118, 0
  br i1 %119, label %120, label %122

120:                                              ; preds = %115
  tail call void %98(i16* %116, i64 0, i16* %117, i64 0, i32 %6) #6, !callees !7
  br label %122

121:                                              ; preds = %72
  tail call void @ScalePlane_16(i16* %22, i32 %21, i32 %2, i32 %20, i16* %4, i32 %5, i32 %6, i32 %7, i32 %10)
  br label %122

122:                                              ; preds = %60, %120, %115, %54, %49, %121
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @I420Scale(i8*, i32, i8*, i32, i8*, i32, i32, i32, i8*, i32, i8*, i32, i8*, i32, i32, i32, i32) local_unnamed_addr #0 {
  %18 = icmp slt i32 %6, 0
  br i1 %18, label %19, label %23

19:                                               ; preds = %17
  %20 = sub i32 1, %6
  %21 = ashr i32 %20, 1
  %22 = sub nsw i32 0, %21
  br label %26

23:                                               ; preds = %17
  %24 = add nuw nsw i32 %6, 1
  %25 = ashr i32 %24, 1
  br label %26

26:                                               ; preds = %23, %19
  %27 = phi i32 [ %22, %19 ], [ %25, %23 ]
  %28 = icmp slt i32 %7, 0
  br i1 %28, label %29, label %33

29:                                               ; preds = %26
  %30 = sub i32 1, %7
  %31 = ashr i32 %30, 1
  %32 = sub nsw i32 0, %31
  br label %36

33:                                               ; preds = %26
  %34 = add nuw nsw i32 %7, 1
  %35 = ashr i32 %34, 1
  br label %36

36:                                               ; preds = %33, %29
  %37 = phi i32 [ %32, %29 ], [ %35, %33 ]
  %38 = icmp slt i32 %14, 0
  br i1 %38, label %39, label %43

39:                                               ; preds = %36
  %40 = sub i32 1, %14
  %41 = ashr i32 %40, 1
  %42 = sub nsw i32 0, %41
  br label %46

43:                                               ; preds = %36
  %44 = add nuw nsw i32 %14, 1
  %45 = ashr i32 %44, 1
  br label %46

46:                                               ; preds = %43, %39
  %47 = phi i32 [ %42, %39 ], [ %45, %43 ]
  %48 = icmp slt i32 %15, 0
  br i1 %48, label %49, label %53

49:                                               ; preds = %46
  %50 = sub i32 1, %15
  %51 = ashr i32 %50, 1
  %52 = sub nsw i32 0, %51
  br label %56

53:                                               ; preds = %46
  %54 = add nuw nsw i32 %15, 1
  %55 = ashr i32 %54, 1
  br label %56

56:                                               ; preds = %53, %49
  %57 = phi i32 [ %52, %49 ], [ %55, %53 ]
  %58 = icmp ne i8* %0, null
  %59 = icmp ne i8* %2, null
  %60 = and i1 %58, %59
  %61 = icmp ne i8* %4, null
  %62 = and i1 %60, %61
  %63 = xor i1 %62, true
  %64 = icmp slt i32 %6, 1
  %65 = or i1 %64, %63
  %66 = icmp eq i32 %7, 0
  %67 = or i1 %65, %66
  %68 = icmp sgt i32 %6, 32768
  %69 = or i1 %68, %67
  %70 = icmp sgt i32 %7, 32768
  %71 = or i1 %70, %69
  %72 = xor i1 %71, true
  %73 = icmp ne i8* %8, null
  %74 = and i1 %73, %72
  %75 = icmp ne i8* %10, null
  %76 = and i1 %75, %74
  %77 = icmp ne i8* %12, null
  %78 = and i1 %76, %77
  %79 = xor i1 %78, true
  %80 = icmp slt i32 %14, 1
  %81 = or i1 %80, %79
  %82 = icmp slt i32 %15, 1
  %83 = or i1 %81, %82
  br i1 %83, label %85, label %84

84:                                               ; preds = %56
  tail call void @ScalePlane(i8* %0, i32 %1, i32 %6, i32 %7, i8* %8, i32 %9, i32 %14, i32 %15, i32 %16)
  tail call void @ScalePlane(i8* %2, i32 %3, i32 %27, i32 %37, i8* %10, i32 %11, i32 %47, i32 %57, i32 %16)
  tail call void @ScalePlane(i8* %4, i32 %5, i32 %27, i32 %37, i8* %12, i32 %13, i32 %47, i32 %57, i32 %16)
  br label %85

85:                                               ; preds = %56, %84
  %86 = phi i32 [ 0, %84 ], [ -1, %56 ]
  ret i32 %86
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @I420Scale_16(i16*, i32, i16*, i32, i16*, i32, i32, i32, i16*, i32, i16*, i32, i16*, i32, i32, i32, i32) local_unnamed_addr #0 {
  %18 = icmp slt i32 %6, 0
  br i1 %18, label %19, label %23

19:                                               ; preds = %17
  %20 = sub i32 1, %6
  %21 = ashr i32 %20, 1
  %22 = sub nsw i32 0, %21
  br label %26

23:                                               ; preds = %17
  %24 = add nuw nsw i32 %6, 1
  %25 = ashr i32 %24, 1
  br label %26

26:                                               ; preds = %23, %19
  %27 = phi i32 [ %22, %19 ], [ %25, %23 ]
  %28 = icmp slt i32 %7, 0
  br i1 %28, label %29, label %33

29:                                               ; preds = %26
  %30 = sub i32 1, %7
  %31 = ashr i32 %30, 1
  %32 = sub nsw i32 0, %31
  br label %36

33:                                               ; preds = %26
  %34 = add nuw nsw i32 %7, 1
  %35 = ashr i32 %34, 1
  br label %36

36:                                               ; preds = %33, %29
  %37 = phi i32 [ %32, %29 ], [ %35, %33 ]
  %38 = icmp slt i32 %14, 0
  br i1 %38, label %39, label %43

39:                                               ; preds = %36
  %40 = sub i32 1, %14
  %41 = ashr i32 %40, 1
  %42 = sub nsw i32 0, %41
  br label %46

43:                                               ; preds = %36
  %44 = add nuw nsw i32 %14, 1
  %45 = ashr i32 %44, 1
  br label %46

46:                                               ; preds = %43, %39
  %47 = phi i32 [ %42, %39 ], [ %45, %43 ]
  %48 = icmp slt i32 %15, 0
  br i1 %48, label %49, label %53

49:                                               ; preds = %46
  %50 = sub i32 1, %15
  %51 = ashr i32 %50, 1
  %52 = sub nsw i32 0, %51
  br label %56

53:                                               ; preds = %46
  %54 = add nuw nsw i32 %15, 1
  %55 = ashr i32 %54, 1
  br label %56

56:                                               ; preds = %53, %49
  %57 = phi i32 [ %52, %49 ], [ %55, %53 ]
  %58 = icmp ne i16* %0, null
  %59 = icmp ne i16* %2, null
  %60 = and i1 %58, %59
  %61 = icmp ne i16* %4, null
  %62 = and i1 %60, %61
  %63 = xor i1 %62, true
  %64 = icmp slt i32 %6, 1
  %65 = or i1 %64, %63
  %66 = icmp eq i32 %7, 0
  %67 = or i1 %65, %66
  %68 = icmp sgt i32 %6, 32768
  %69 = or i1 %68, %67
  %70 = icmp sgt i32 %7, 32768
  %71 = or i1 %70, %69
  %72 = xor i1 %71, true
  %73 = icmp ne i16* %8, null
  %74 = and i1 %73, %72
  %75 = icmp ne i16* %10, null
  %76 = and i1 %75, %74
  %77 = icmp ne i16* %12, null
  %78 = and i1 %76, %77
  %79 = xor i1 %78, true
  %80 = icmp slt i32 %14, 1
  %81 = or i1 %80, %79
  %82 = icmp slt i32 %15, 1
  %83 = or i1 %81, %82
  br i1 %83, label %85, label %84

84:                                               ; preds = %56
  tail call void @ScalePlane_16(i16* %0, i32 %1, i32 %6, i32 %7, i16* %8, i32 %9, i32 %14, i32 %15, i32 %16)
  tail call void @ScalePlane_16(i16* %2, i32 %3, i32 %27, i32 %37, i16* %10, i32 %11, i32 %47, i32 %57, i32 %16)
  tail call void @ScalePlane_16(i16* %4, i32 %5, i32 %27, i32 %37, i16* %12, i32 %13, i32 %47, i32 %57, i32 %16)
  br label %85

85:                                               ; preds = %56, %84
  %86 = phi i32 [ 0, %84 ], [ -1, %56 ]
  ret i32 %86
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @I420Scale_12(i16*, i32, i16*, i32, i16*, i32, i32, i32, i16*, i32, i16*, i32, i16*, i32, i32, i32, i32) local_unnamed_addr #0 {
  %18 = icmp slt i32 %6, 0
  br i1 %18, label %19, label %23

19:                                               ; preds = %17
  %20 = sub i32 1, %6
  %21 = ashr i32 %20, 1
  %22 = sub nsw i32 0, %21
  br label %26

23:                                               ; preds = %17
  %24 = add nuw nsw i32 %6, 1
  %25 = ashr i32 %24, 1
  br label %26

26:                                               ; preds = %23, %19
  %27 = phi i32 [ %22, %19 ], [ %25, %23 ]
  %28 = icmp slt i32 %7, 0
  br i1 %28, label %29, label %33

29:                                               ; preds = %26
  %30 = sub i32 1, %7
  %31 = ashr i32 %30, 1
  %32 = sub nsw i32 0, %31
  br label %36

33:                                               ; preds = %26
  %34 = add nuw nsw i32 %7, 1
  %35 = ashr i32 %34, 1
  br label %36

36:                                               ; preds = %33, %29
  %37 = phi i32 [ %32, %29 ], [ %35, %33 ]
  %38 = icmp slt i32 %14, 0
  br i1 %38, label %39, label %43

39:                                               ; preds = %36
  %40 = sub i32 1, %14
  %41 = ashr i32 %40, 1
  %42 = sub nsw i32 0, %41
  br label %46

43:                                               ; preds = %36
  %44 = add nuw nsw i32 %14, 1
  %45 = ashr i32 %44, 1
  br label %46

46:                                               ; preds = %43, %39
  %47 = phi i32 [ %42, %39 ], [ %45, %43 ]
  %48 = icmp slt i32 %15, 0
  br i1 %48, label %49, label %53

49:                                               ; preds = %46
  %50 = sub i32 1, %15
  %51 = ashr i32 %50, 1
  %52 = sub nsw i32 0, %51
  br label %56

53:                                               ; preds = %46
  %54 = add nuw nsw i32 %15, 1
  %55 = ashr i32 %54, 1
  br label %56

56:                                               ; preds = %53, %49
  %57 = phi i32 [ %52, %49 ], [ %55, %53 ]
  %58 = icmp ne i16* %0, null
  %59 = icmp ne i16* %2, null
  %60 = and i1 %58, %59
  %61 = icmp ne i16* %4, null
  %62 = and i1 %60, %61
  %63 = xor i1 %62, true
  %64 = icmp slt i32 %6, 1
  %65 = or i1 %64, %63
  %66 = icmp eq i32 %7, 0
  %67 = or i1 %65, %66
  %68 = icmp sgt i32 %6, 32768
  %69 = or i1 %68, %67
  %70 = icmp sgt i32 %7, 32768
  %71 = or i1 %70, %69
  %72 = xor i1 %71, true
  %73 = icmp ne i16* %8, null
  %74 = and i1 %73, %72
  %75 = icmp ne i16* %10, null
  %76 = and i1 %75, %74
  %77 = icmp ne i16* %12, null
  %78 = and i1 %76, %77
  %79 = xor i1 %78, true
  %80 = icmp slt i32 %14, 1
  %81 = or i1 %80, %79
  %82 = icmp slt i32 %15, 1
  %83 = or i1 %81, %82
  br i1 %83, label %85, label %84

84:                                               ; preds = %56
  tail call void @ScalePlane_12(i16* %0, i32 %1, i32 %6, i32 %7, i16* %8, i32 %9, i32 %14, i32 %15, i32 %16)
  tail call void @ScalePlane_12(i16* %2, i32 %3, i32 %27, i32 %37, i16* %10, i32 %11, i32 %47, i32 %57, i32 %16)
  tail call void @ScalePlane_12(i16* %4, i32 %5, i32 %27, i32 %37, i16* %12, i32 %13, i32 %47, i32 %57, i32 %16)
  br label %85

85:                                               ; preds = %56, %84
  %86 = phi i32 [ 0, %84 ], [ -1, %56 ]
  ret i32 %86
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @I444Scale(i8*, i32, i8*, i32, i8*, i32, i32, i32, i8*, i32, i8*, i32, i8*, i32, i32, i32, i32) local_unnamed_addr #0 {
  %18 = icmp ne i8* %0, null
  %19 = icmp ne i8* %2, null
  %20 = and i1 %18, %19
  %21 = icmp ne i8* %4, null
  %22 = and i1 %20, %21
  %23 = xor i1 %22, true
  %24 = icmp slt i32 %6, 1
  %25 = or i1 %24, %23
  %26 = icmp eq i32 %7, 0
  %27 = or i1 %25, %26
  %28 = icmp sgt i32 %6, 32768
  %29 = or i1 %28, %27
  %30 = icmp sgt i32 %7, 32768
  %31 = or i1 %30, %29
  %32 = xor i1 %31, true
  %33 = icmp ne i8* %8, null
  %34 = and i1 %33, %32
  %35 = icmp ne i8* %10, null
  %36 = and i1 %35, %34
  %37 = icmp ne i8* %12, null
  %38 = and i1 %36, %37
  %39 = xor i1 %38, true
  %40 = icmp slt i32 %14, 1
  %41 = or i1 %40, %39
  %42 = icmp slt i32 %15, 1
  %43 = or i1 %41, %42
  br i1 %43, label %45, label %44

44:                                               ; preds = %17
  tail call void @ScalePlane(i8* %0, i32 %1, i32 %6, i32 %7, i8* %8, i32 %9, i32 %14, i32 %15, i32 %16)
  tail call void @ScalePlane(i8* %2, i32 %3, i32 %6, i32 %7, i8* %10, i32 %11, i32 %14, i32 %15, i32 %16)
  tail call void @ScalePlane(i8* %4, i32 %5, i32 %6, i32 %7, i8* %12, i32 %13, i32 %14, i32 %15, i32 %16)
  br label %45

45:                                               ; preds = %17, %44
  %46 = phi i32 [ 0, %44 ], [ -1, %17 ]
  ret i32 %46
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @I444Scale_16(i16*, i32, i16*, i32, i16*, i32, i32, i32, i16*, i32, i16*, i32, i16*, i32, i32, i32, i32) local_unnamed_addr #0 {
  %18 = icmp ne i16* %0, null
  %19 = icmp ne i16* %2, null
  %20 = and i1 %18, %19
  %21 = icmp ne i16* %4, null
  %22 = and i1 %20, %21
  %23 = xor i1 %22, true
  %24 = icmp slt i32 %6, 1
  %25 = or i1 %24, %23
  %26 = icmp eq i32 %7, 0
  %27 = or i1 %25, %26
  %28 = icmp sgt i32 %6, 32768
  %29 = or i1 %28, %27
  %30 = icmp sgt i32 %7, 32768
  %31 = or i1 %30, %29
  %32 = xor i1 %31, true
  %33 = icmp ne i16* %8, null
  %34 = and i1 %33, %32
  %35 = icmp ne i16* %10, null
  %36 = and i1 %35, %34
  %37 = icmp ne i16* %12, null
  %38 = and i1 %36, %37
  %39 = xor i1 %38, true
  %40 = icmp slt i32 %14, 1
  %41 = or i1 %40, %39
  %42 = icmp slt i32 %15, 1
  %43 = or i1 %41, %42
  br i1 %43, label %45, label %44

44:                                               ; preds = %17
  tail call void @ScalePlane_16(i16* %0, i32 %1, i32 %6, i32 %7, i16* %8, i32 %9, i32 %14, i32 %15, i32 %16)
  tail call void @ScalePlane_16(i16* %2, i32 %3, i32 %6, i32 %7, i16* %10, i32 %11, i32 %14, i32 %15, i32 %16)
  tail call void @ScalePlane_16(i16* %4, i32 %5, i32 %6, i32 %7, i16* %12, i32 %13, i32 %14, i32 %15, i32 %16)
  br label %45

45:                                               ; preds = %17, %44
  %46 = phi i32 [ 0, %44 ], [ -1, %17 ]
  ret i32 %46
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @I444Scale_12(i16*, i32, i16*, i32, i16*, i32, i32, i32, i16*, i32, i16*, i32, i16*, i32, i32, i32, i32) local_unnamed_addr #0 {
  %18 = icmp ne i16* %0, null
  %19 = icmp ne i16* %2, null
  %20 = and i1 %18, %19
  %21 = icmp ne i16* %4, null
  %22 = and i1 %20, %21
  %23 = xor i1 %22, true
  %24 = icmp slt i32 %6, 1
  %25 = or i1 %24, %23
  %26 = icmp eq i32 %7, 0
  %27 = or i1 %25, %26
  %28 = icmp sgt i32 %6, 32768
  %29 = or i1 %28, %27
  %30 = icmp sgt i32 %7, 32768
  %31 = or i1 %30, %29
  %32 = xor i1 %31, true
  %33 = icmp ne i16* %8, null
  %34 = and i1 %33, %32
  %35 = icmp ne i16* %10, null
  %36 = and i1 %35, %34
  %37 = icmp ne i16* %12, null
  %38 = and i1 %36, %37
  %39 = xor i1 %38, true
  %40 = icmp slt i32 %14, 1
  %41 = or i1 %40, %39
  %42 = icmp slt i32 %15, 1
  %43 = or i1 %41, %42
  br i1 %43, label %45, label %44

44:                                               ; preds = %17
  tail call void @ScalePlane_12(i16* %0, i32 %1, i32 %6, i32 %7, i16* %8, i32 %9, i32 %14, i32 %15, i32 %16)
  tail call void @ScalePlane_12(i16* %2, i32 %3, i32 %6, i32 %7, i16* %10, i32 %11, i32 %14, i32 %15, i32 %16)
  tail call void @ScalePlane_12(i16* %4, i32 %5, i32 %6, i32 %7, i16* %12, i32 %13, i32 %14, i32 %15, i32 %16)
  br label %45

45:                                               ; preds = %17, %44
  %46 = phi i32 [ 0, %44 ], [ -1, %17 ]
  ret i32 %46
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @NV12Scale(i8*, i32, i8*, i32, i32, i32, i8*, i32, i8*, i32, i32, i32, i32) local_unnamed_addr #0 {
  %14 = icmp slt i32 %4, 0
  br i1 %14, label %15, label %19

15:                                               ; preds = %13
  %16 = sub i32 1, %4
  %17 = ashr i32 %16, 1
  %18 = sub nsw i32 0, %17
  br label %22

19:                                               ; preds = %13
  %20 = add nuw nsw i32 %4, 1
  %21 = ashr i32 %20, 1
  br label %22

22:                                               ; preds = %19, %15
  %23 = phi i32 [ %18, %15 ], [ %21, %19 ]
  %24 = icmp slt i32 %5, 0
  br i1 %24, label %25, label %29

25:                                               ; preds = %22
  %26 = sub i32 1, %5
  %27 = ashr i32 %26, 1
  %28 = sub nsw i32 0, %27
  br label %32

29:                                               ; preds = %22
  %30 = add nuw nsw i32 %5, 1
  %31 = ashr i32 %30, 1
  br label %32

32:                                               ; preds = %29, %25
  %33 = phi i32 [ %28, %25 ], [ %31, %29 ]
  %34 = icmp slt i32 %10, 0
  br i1 %34, label %35, label %39

35:                                               ; preds = %32
  %36 = sub i32 1, %10
  %37 = ashr i32 %36, 1
  %38 = sub nsw i32 0, %37
  br label %42

39:                                               ; preds = %32
  %40 = add nuw nsw i32 %10, 1
  %41 = ashr i32 %40, 1
  br label %42

42:                                               ; preds = %39, %35
  %43 = phi i32 [ %38, %35 ], [ %41, %39 ]
  %44 = icmp slt i32 %11, 0
  br i1 %44, label %45, label %49

45:                                               ; preds = %42
  %46 = sub i32 1, %11
  %47 = ashr i32 %46, 1
  %48 = sub nsw i32 0, %47
  br label %52

49:                                               ; preds = %42
  %50 = add nuw nsw i32 %11, 1
  %51 = ashr i32 %50, 1
  br label %52

52:                                               ; preds = %49, %45
  %53 = phi i32 [ %48, %45 ], [ %51, %49 ]
  %54 = icmp eq i8* %0, null
  %55 = icmp eq i8* %2, null
  %56 = or i1 %54, %55
  %57 = icmp slt i32 %4, 1
  %58 = or i1 %56, %57
  %59 = icmp eq i32 %5, 0
  %60 = or i1 %58, %59
  %61 = icmp sgt i32 %4, 32768
  %62 = or i1 %61, %60
  %63 = icmp sgt i32 %5, 32768
  %64 = or i1 %63, %62
  %65 = xor i1 %64, true
  %66 = icmp ne i8* %6, null
  %67 = and i1 %66, %65
  %68 = icmp ne i8* %8, null
  %69 = and i1 %68, %67
  %70 = xor i1 %69, true
  %71 = icmp slt i32 %10, 1
  %72 = or i1 %71, %70
  %73 = icmp slt i32 %11, 1
  %74 = or i1 %72, %73
  br i1 %74, label %77, label %75

75:                                               ; preds = %52
  tail call void @ScalePlane(i8* %0, i32 %1, i32 %4, i32 %5, i8* %6, i32 %7, i32 %10, i32 %11, i32 %12)
  %76 = tail call i32 @UVScale(i8* %2, i32 %3, i32 %23, i32 %33, i8* %8, i32 %9, i32 %43, i32 %53, i32 %12) #6
  br label %77

77:                                               ; preds = %52, %75
  %78 = phi i32 [ 0, %75 ], [ -1, %52 ]
  ret i32 %78
}

declare i32 @UVScale(i8*, i32, i32, i32, i8*, i32, i32, i32, i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden i32 @Scale(i8*, i8*, i8*, i32, i32, i32, i32, i32, i8*, i8*, i8*, i32, i32, i32, i32, i32, i32) local_unnamed_addr #0 {
  %18 = icmp eq i32 %16, 0
  %19 = select i1 %18, i32 0, i32 3
  %20 = tail call i32 @I420Scale(i8* %0, i32 %3, i8* %1, i32 %4, i8* %2, i32 %5, i32 %6, i32 %7, i8* %8, i32 %11, i8* %9, i32 %12, i8* %10, i32 %13, i32 %14, i32 %15, i32 %19)
  ret i32 %20
}

declare i32 @InitCpuFlags() local_unnamed_addr #3

declare void @ScaleRowDown34_C(i8*, i64, i8*, i32) local_unnamed_addr #3

declare void @ScaleRowDown34_0_Box_C(i8*, i64, i8*, i32) local_unnamed_addr #3

declare void @ScaleRowDown34_1_Box_C(i8*, i64, i8*, i32) local_unnamed_addr #3

declare void @ScaleRowDown34_Any_SSSE3(i8*, i64, i8*, i32) local_unnamed_addr #3

declare void @ScaleRowDown34_0_Box_Any_SSSE3(i8*, i64, i8*, i32) local_unnamed_addr #3

declare void @ScaleRowDown34_1_Box_Any_SSSE3(i8*, i64, i8*, i32) local_unnamed_addr #3

declare void @ScaleRowDown34_SSSE3(i8*, i64, i8*, i32) local_unnamed_addr #3

declare void @ScaleRowDown34_0_Box_SSSE3(i8*, i64, i8*, i32) local_unnamed_addr #3

declare void @ScaleRowDown34_1_Box_SSSE3(i8*, i64, i8*, i32) local_unnamed_addr #3

declare void @ScaleRowDown2_C(i8*, i64, i8*, i32) local_unnamed_addr #3

declare void @ScaleRowDown2Linear_C(i8*, i64, i8*, i32) local_unnamed_addr #3

declare void @ScaleRowDown2Box_C(i8*, i64, i8*, i32) local_unnamed_addr #3

declare void @ScaleRowDown2_Any_SSSE3(i8*, i64, i8*, i32) local_unnamed_addr #3

declare void @ScaleRowDown2Linear_Any_SSSE3(i8*, i64, i8*, i32) local_unnamed_addr #3

declare void @ScaleRowDown2Box_Any_SSSE3(i8*, i64, i8*, i32) local_unnamed_addr #3

declare void @ScaleRowDown2_SSSE3(i8*, i64, i8*, i32) local_unnamed_addr #3

declare void @ScaleRowDown2Linear_SSSE3(i8*, i64, i8*, i32) local_unnamed_addr #3

declare void @ScaleRowDown2Box_SSSE3(i8*, i64, i8*, i32) local_unnamed_addr #3

declare void @ScaleRowDown2_Any_AVX2(i8*, i64, i8*, i32) local_unnamed_addr #3

declare void @ScaleRowDown2Linear_Any_AVX2(i8*, i64, i8*, i32) local_unnamed_addr #3

declare void @ScaleRowDown2Box_Any_AVX2(i8*, i64, i8*, i32) local_unnamed_addr #3

declare void @ScaleRowDown2_AVX2(i8*, i64, i8*, i32) local_unnamed_addr #3

declare void @ScaleRowDown2Linear_AVX2(i8*, i64, i8*, i32) local_unnamed_addr #3

declare void @ScaleRowDown2Box_AVX2(i8*, i64, i8*, i32) local_unnamed_addr #3

declare void @ScaleRowDown38_C(i8*, i64, i8*, i32) local_unnamed_addr #3

declare void @ScaleRowDown38_3_Box_C(i8*, i64, i8*, i32) local_unnamed_addr #3

declare void @ScaleRowDown38_2_Box_C(i8*, i64, i8*, i32) local_unnamed_addr #3

declare void @ScaleRowDown38_Any_SSSE3(i8*, i64, i8*, i32) local_unnamed_addr #3

declare void @ScaleRowDown38_3_Box_Any_SSSE3(i8*, i64, i8*, i32) local_unnamed_addr #3

declare void @ScaleRowDown38_2_Box_Any_SSSE3(i8*, i64, i8*, i32) local_unnamed_addr #3

declare void @ScaleRowDown38_SSSE3(i8*, i64, i8*, i32) local_unnamed_addr #3

declare void @ScaleRowDown38_3_Box_SSSE3(i8*, i64, i8*, i32) local_unnamed_addr #3

declare void @ScaleRowDown38_2_Box_SSSE3(i8*, i64, i8*, i32) local_unnamed_addr #3

declare void @ScaleRowDown4Box_C(i8*, i64, i8*, i32) local_unnamed_addr #3

declare void @ScaleRowDown4_C(i8*, i64, i8*, i32) local_unnamed_addr #3

declare void @ScaleRowDown4Box_Any_SSSE3(i8*, i64, i8*, i32) local_unnamed_addr #3

declare void @ScaleRowDown4_Any_SSSE3(i8*, i64, i8*, i32) local_unnamed_addr #3

declare void @ScaleRowDown4Box_SSSE3(i8*, i64, i8*, i32) local_unnamed_addr #3

declare void @ScaleRowDown4_SSSE3(i8*, i64, i8*, i32) local_unnamed_addr #3

declare void @ScaleRowDown4Box_Any_AVX2(i8*, i64, i8*, i32) local_unnamed_addr #3

declare void @ScaleRowDown4_Any_AVX2(i8*, i64, i8*, i32) local_unnamed_addr #3

declare void @ScaleRowDown4Box_AVX2(i8*, i64, i8*, i32) local_unnamed_addr #3

declare void @ScaleRowDown4_AVX2(i8*, i64, i8*, i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN6libyuvL15ScaleAddCols2_CEiiiiPKtPh(i32, i32, i32, i32, i16* nocapture readonly, i8* nocapture) unnamed_addr #0 {
  %7 = alloca [2 x i32], align 4
  %8 = bitcast [2 x i32]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %8) #6
  %9 = getelementptr inbounds [2 x i32], [2 x i32]* %7, i64 0, i64 0
  %10 = getelementptr inbounds [2 x i32], [2 x i32]* %7, i64 0, i64 1
  %11 = ashr i32 %3, 16
  %12 = icmp sgt i32 %11, 1
  %13 = select i1 %12, i32 %11, i32 1
  %14 = mul nsw i32 %13, %1
  %15 = sdiv i32 65536, %14
  store i32 %15, i32* %9, align 4
  %16 = icmp sgt i32 %11, 0
  %17 = select i1 %16, i32 %11, i32 0
  %18 = add nuw nsw i32 %17, 1
  %19 = mul nsw i32 %18, %1
  %20 = sdiv i32 65536, %19
  store i32 %20, i32* %10, align 4
  %21 = icmp sgt i32 %0, 0
  br i1 %21, label %22, label %126

22:                                               ; preds = %6, %114
  %23 = phi i32 [ %124, %114 ], [ 0, %6 ]
  %24 = phi i8* [ %123, %114 ], [ %5, %6 ]
  %25 = phi i32 [ %27, %114 ], [ %2, %6 ]
  %26 = ashr i32 %25, 16
  %27 = add nsw i32 %25, %3
  %28 = ashr i32 %27, 16
  %29 = sub nsw i32 %28, %26
  %30 = icmp sgt i32 %29, 1
  %31 = select i1 %30, i32 %29, i32 1
  %32 = sext i32 %26 to i64
  %33 = getelementptr inbounds i16, i16* %4, i64 %32
  %34 = zext i32 %31 to i64
  %35 = icmp ult i32 %31, 8
  br i1 %35, label %102, label %36

36:                                               ; preds = %22
  %37 = and i64 %34, 2147483640
  %38 = add nsw i64 %37, -8
  %39 = lshr exact i64 %38, 3
  %40 = add nuw nsw i64 %39, 1
  %41 = and i64 %40, 1
  %42 = icmp eq i64 %38, 0
  br i1 %42, label %74, label %43

43:                                               ; preds = %36
  %44 = sub nuw nsw i64 %40, %41
  br label %45

45:                                               ; preds = %45, %43
  %46 = phi i64 [ 0, %43 ], [ %71, %45 ]
  %47 = phi <4 x i32> [ zeroinitializer, %43 ], [ %69, %45 ]
  %48 = phi <4 x i32> [ zeroinitializer, %43 ], [ %70, %45 ]
  %49 = phi i64 [ %44, %43 ], [ %72, %45 ]
  %50 = getelementptr inbounds i16, i16* %33, i64 %46
  %51 = bitcast i16* %50 to <4 x i16>*
  %52 = load <4 x i16>, <4 x i16>* %51, align 2
  %53 = getelementptr inbounds i16, i16* %50, i64 4
  %54 = bitcast i16* %53 to <4 x i16>*
  %55 = load <4 x i16>, <4 x i16>* %54, align 2
  %56 = zext <4 x i16> %52 to <4 x i32>
  %57 = zext <4 x i16> %55 to <4 x i32>
  %58 = add <4 x i32> %47, %56
  %59 = add <4 x i32> %48, %57
  %60 = or i64 %46, 8
  %61 = getelementptr inbounds i16, i16* %33, i64 %60
  %62 = bitcast i16* %61 to <4 x i16>*
  %63 = load <4 x i16>, <4 x i16>* %62, align 2
  %64 = getelementptr inbounds i16, i16* %61, i64 4
  %65 = bitcast i16* %64 to <4 x i16>*
  %66 = load <4 x i16>, <4 x i16>* %65, align 2
  %67 = zext <4 x i16> %63 to <4 x i32>
  %68 = zext <4 x i16> %66 to <4 x i32>
  %69 = add <4 x i32> %58, %67
  %70 = add <4 x i32> %59, %68
  %71 = add i64 %46, 16
  %72 = add i64 %49, -2
  %73 = icmp eq i64 %72, 0
  br i1 %73, label %74, label %45, !llvm.loop !21

74:                                               ; preds = %45, %36
  %75 = phi <4 x i32> [ undef, %36 ], [ %69, %45 ]
  %76 = phi <4 x i32> [ undef, %36 ], [ %70, %45 ]
  %77 = phi i64 [ 0, %36 ], [ %71, %45 ]
  %78 = phi <4 x i32> [ zeroinitializer, %36 ], [ %69, %45 ]
  %79 = phi <4 x i32> [ zeroinitializer, %36 ], [ %70, %45 ]
  %80 = icmp eq i64 %41, 0
  br i1 %80, label %92, label %81

81:                                               ; preds = %74
  %82 = getelementptr inbounds i16, i16* %33, i64 %77
  %83 = getelementptr inbounds i16, i16* %82, i64 4
  %84 = bitcast i16* %83 to <4 x i16>*
  %85 = load <4 x i16>, <4 x i16>* %84, align 2
  %86 = zext <4 x i16> %85 to <4 x i32>
  %87 = add <4 x i32> %79, %86
  %88 = bitcast i16* %82 to <4 x i16>*
  %89 = load <4 x i16>, <4 x i16>* %88, align 2
  %90 = zext <4 x i16> %89 to <4 x i32>
  %91 = add <4 x i32> %78, %90
  br label %92

92:                                               ; preds = %74, %81
  %93 = phi <4 x i32> [ %75, %74 ], [ %91, %81 ]
  %94 = phi <4 x i32> [ %76, %74 ], [ %87, %81 ]
  %95 = add <4 x i32> %94, %93
  %96 = shufflevector <4 x i32> %95, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %97 = add <4 x i32> %95, %96
  %98 = shufflevector <4 x i32> %97, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %99 = add <4 x i32> %97, %98
  %100 = extractelement <4 x i32> %99, i32 0
  %101 = icmp eq i64 %37, %34
  br i1 %101, label %114, label %102

102:                                              ; preds = %92, %22
  %103 = phi i64 [ 0, %22 ], [ %37, %92 ]
  %104 = phi i32 [ 0, %22 ], [ %100, %92 ]
  br label %105

105:                                              ; preds = %102, %105
  %106 = phi i64 [ %112, %105 ], [ %103, %102 ]
  %107 = phi i32 [ %111, %105 ], [ %104, %102 ]
  %108 = getelementptr inbounds i16, i16* %33, i64 %106
  %109 = load i16, i16* %108, align 2
  %110 = zext i16 %109 to i32
  %111 = add i32 %107, %110
  %112 = add nuw nsw i64 %106, 1
  %113 = icmp eq i64 %112, %34
  br i1 %113, label %114, label %105, !llvm.loop !23

114:                                              ; preds = %105, %92
  %115 = phi i32 [ %100, %92 ], [ %111, %105 ]
  %116 = sub nsw i32 %31, %11
  %117 = sext i32 %116 to i64
  %118 = getelementptr inbounds [2 x i32], [2 x i32]* %7, i64 0, i64 %117
  %119 = load i32, i32* %118, align 4
  %120 = mul i32 %119, %115
  %121 = lshr i32 %120, 16
  %122 = trunc i32 %121 to i8
  %123 = getelementptr inbounds i8, i8* %24, i64 1
  store i8 %122, i8* %24, align 1
  %124 = add nuw nsw i32 %23, 1
  %125 = icmp eq i32 %124, %0
  br i1 %125, label %126, label %22

126:                                              ; preds = %114, %6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %8) #6
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN6libyuvL15ScaleAddCols1_CEiiiiPKtPh(i32, i32, i32, i32, i16* nocapture readonly, i8* nocapture) unnamed_addr #5 {
  %7 = ashr i32 %3, 16
  %8 = icmp sgt i32 %7, 1
  %9 = select i1 %8, i32 %7, i32 1
  %10 = mul nsw i32 %9, %1
  %11 = sdiv i32 65536, %10
  %12 = icmp sgt i32 %0, 0
  br i1 %12, label %13, label %110

13:                                               ; preds = %6
  %14 = ashr i32 %2, 16
  %15 = zext i32 %9 to i64
  %16 = sext i32 %14 to i64
  %17 = and i64 %15, 2147483640
  %18 = add nsw i64 %17, -8
  %19 = lshr exact i64 %18, 3
  %20 = add nuw nsw i64 %19, 1
  %21 = icmp ult i32 %9, 8
  %22 = and i64 %15, 2147483640
  %23 = and i64 %20, 1
  %24 = icmp eq i64 %18, 0
  %25 = sub nuw nsw i64 %20, %23
  %26 = icmp eq i64 %23, 0
  %27 = icmp eq i64 %22, %15
  br label %28

28:                                               ; preds = %101, %13
  %29 = phi i64 [ %16, %13 ], [ %107, %101 ]
  %30 = phi i32 [ 0, %13 ], [ %108, %101 ]
  %31 = phi i8* [ %5, %13 ], [ %106, %101 ]
  %32 = getelementptr inbounds i16, i16* %4, i64 %29
  br i1 %21, label %89, label %33

33:                                               ; preds = %28
  br i1 %24, label %63, label %34

34:                                               ; preds = %33, %34
  %35 = phi i64 [ %60, %34 ], [ 0, %33 ]
  %36 = phi <4 x i32> [ %58, %34 ], [ zeroinitializer, %33 ]
  %37 = phi <4 x i32> [ %59, %34 ], [ zeroinitializer, %33 ]
  %38 = phi i64 [ %61, %34 ], [ %25, %33 ]
  %39 = getelementptr inbounds i16, i16* %32, i64 %35
  %40 = bitcast i16* %39 to <4 x i16>*
  %41 = load <4 x i16>, <4 x i16>* %40, align 2
  %42 = getelementptr inbounds i16, i16* %39, i64 4
  %43 = bitcast i16* %42 to <4 x i16>*
  %44 = load <4 x i16>, <4 x i16>* %43, align 2
  %45 = zext <4 x i16> %41 to <4 x i32>
  %46 = zext <4 x i16> %44 to <4 x i32>
  %47 = add <4 x i32> %36, %45
  %48 = add <4 x i32> %37, %46
  %49 = or i64 %35, 8
  %50 = getelementptr inbounds i16, i16* %32, i64 %49
  %51 = bitcast i16* %50 to <4 x i16>*
  %52 = load <4 x i16>, <4 x i16>* %51, align 2
  %53 = getelementptr inbounds i16, i16* %50, i64 4
  %54 = bitcast i16* %53 to <4 x i16>*
  %55 = load <4 x i16>, <4 x i16>* %54, align 2
  %56 = zext <4 x i16> %52 to <4 x i32>
  %57 = zext <4 x i16> %55 to <4 x i32>
  %58 = add <4 x i32> %47, %56
  %59 = add <4 x i32> %48, %57
  %60 = add i64 %35, 16
  %61 = add i64 %38, -2
  %62 = icmp eq i64 %61, 0
  br i1 %62, label %63, label %34, !llvm.loop !25

63:                                               ; preds = %34, %33
  %64 = phi <4 x i32> [ undef, %33 ], [ %58, %34 ]
  %65 = phi <4 x i32> [ undef, %33 ], [ %59, %34 ]
  %66 = phi i64 [ 0, %33 ], [ %60, %34 ]
  %67 = phi <4 x i32> [ zeroinitializer, %33 ], [ %58, %34 ]
  %68 = phi <4 x i32> [ zeroinitializer, %33 ], [ %59, %34 ]
  br i1 %26, label %80, label %69

69:                                               ; preds = %63
  %70 = getelementptr inbounds i16, i16* %32, i64 %66
  %71 = getelementptr inbounds i16, i16* %70, i64 4
  %72 = bitcast i16* %71 to <4 x i16>*
  %73 = load <4 x i16>, <4 x i16>* %72, align 2
  %74 = zext <4 x i16> %73 to <4 x i32>
  %75 = add <4 x i32> %68, %74
  %76 = bitcast i16* %70 to <4 x i16>*
  %77 = load <4 x i16>, <4 x i16>* %76, align 2
  %78 = zext <4 x i16> %77 to <4 x i32>
  %79 = add <4 x i32> %67, %78
  br label %80

80:                                               ; preds = %63, %69
  %81 = phi <4 x i32> [ %64, %63 ], [ %79, %69 ]
  %82 = phi <4 x i32> [ %65, %63 ], [ %75, %69 ]
  %83 = add <4 x i32> %82, %81
  %84 = shufflevector <4 x i32> %83, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %85 = add <4 x i32> %83, %84
  %86 = shufflevector <4 x i32> %85, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %87 = add <4 x i32> %85, %86
  %88 = extractelement <4 x i32> %87, i32 0
  br i1 %27, label %101, label %89

89:                                               ; preds = %80, %28
  %90 = phi i64 [ 0, %28 ], [ %22, %80 ]
  %91 = phi i32 [ 0, %28 ], [ %88, %80 ]
  br label %92

92:                                               ; preds = %89, %92
  %93 = phi i64 [ %99, %92 ], [ %90, %89 ]
  %94 = phi i32 [ %98, %92 ], [ %91, %89 ]
  %95 = getelementptr inbounds i16, i16* %32, i64 %93
  %96 = load i16, i16* %95, align 2
  %97 = zext i16 %96 to i32
  %98 = add i32 %94, %97
  %99 = add nuw nsw i64 %93, 1
  %100 = icmp eq i64 %99, %15
  br i1 %100, label %101, label %92, !llvm.loop !26

101:                                              ; preds = %92, %80
  %102 = phi i32 [ %88, %80 ], [ %98, %92 ]
  %103 = mul i32 %102, %11
  %104 = lshr i32 %103, 16
  %105 = trunc i32 %104 to i8
  %106 = getelementptr inbounds i8, i8* %31, i64 1
  store i8 %105, i8* %31, align 1
  %107 = add nsw i64 %29, %15
  %108 = add nuw nsw i32 %30, 1
  %109 = icmp eq i32 %108, %0
  br i1 %109, label %110, label %28

110:                                              ; preds = %101, %6
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN6libyuvL15ScaleAddCols0_CEiiiiPKtPh(i32, i32, i32, i32, i16* nocapture readonly, i8* nocapture) unnamed_addr #5 {
  %7 = sdiv i32 65536, %1
  %8 = ashr i32 %2, 16
  %9 = sext i32 %8 to i64
  %10 = getelementptr inbounds i16, i16* %4, i64 %9
  %11 = bitcast i16* %10 to i8*
  %12 = icmp sgt i32 %0, 0
  br i1 %12, label %13, label %137

13:                                               ; preds = %6
  %14 = zext i32 %0 to i64
  %15 = icmp ult i32 %0, 8
  br i1 %15, label %76, label %16

16:                                               ; preds = %13
  %17 = getelementptr i8, i8* %5, i64 %14
  %18 = add nsw i64 %9, %14
  %19 = getelementptr i16, i16* %4, i64 %18
  %20 = bitcast i16* %19 to i8*
  %21 = icmp ugt i8* %20, %5
  %22 = icmp ugt i8* %17, %11
  %23 = and i1 %21, %22
  br i1 %23, label %76, label %24

24:                                               ; preds = %16
  %25 = and i64 %14, 4294967288
  %26 = getelementptr i8, i8* %5, i64 %25
  %27 = insertelement <8 x i32> undef, i32 %7, i32 0
  %28 = shufflevector <8 x i32> %27, <8 x i32> undef, <8 x i32> zeroinitializer
  %29 = add nsw i64 %25, -8
  %30 = lshr exact i64 %29, 3
  %31 = add nuw nsw i64 %30, 1
  %32 = and i64 %31, 1
  %33 = icmp eq i64 %29, 0
  br i1 %33, label %61, label %34

34:                                               ; preds = %24
  %35 = sub nuw nsw i64 %31, %32
  br label %36

36:                                               ; preds = %36, %34
  %37 = phi i64 [ 0, %34 ], [ %58, %36 ]
  %38 = phi i64 [ %35, %34 ], [ %59, %36 ]
  %39 = getelementptr i8, i8* %5, i64 %37
  %40 = getelementptr inbounds i16, i16* %10, i64 %37
  %41 = bitcast i16* %40 to <8 x i16>*
  %42 = load <8 x i16>, <8 x i16>* %41, align 2, !alias.scope !27
  %43 = zext <8 x i16> %42 to <8 x i32>
  %44 = mul nsw <8 x i32> %28, %43
  %45 = lshr <8 x i32> %44, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %46 = trunc <8 x i32> %45 to <8 x i8>
  %47 = bitcast i8* %39 to <8 x i8>*
  store <8 x i8> %46, <8 x i8>* %47, align 1, !alias.scope !30, !noalias !27
  %48 = or i64 %37, 8
  %49 = getelementptr i8, i8* %5, i64 %48
  %50 = getelementptr inbounds i16, i16* %10, i64 %48
  %51 = bitcast i16* %50 to <8 x i16>*
  %52 = load <8 x i16>, <8 x i16>* %51, align 2, !alias.scope !27
  %53 = zext <8 x i16> %52 to <8 x i32>
  %54 = mul nsw <8 x i32> %28, %53
  %55 = lshr <8 x i32> %54, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %56 = trunc <8 x i32> %55 to <8 x i8>
  %57 = bitcast i8* %49 to <8 x i8>*
  store <8 x i8> %56, <8 x i8>* %57, align 1, !alias.scope !30, !noalias !27
  %58 = add i64 %37, 16
  %59 = add i64 %38, -2
  %60 = icmp eq i64 %59, 0
  br i1 %60, label %61, label %36, !llvm.loop !32

61:                                               ; preds = %36, %24
  %62 = phi i64 [ 0, %24 ], [ %58, %36 ]
  %63 = icmp eq i64 %32, 0
  br i1 %63, label %74, label %64

64:                                               ; preds = %61
  %65 = getelementptr i8, i8* %5, i64 %62
  %66 = getelementptr inbounds i16, i16* %10, i64 %62
  %67 = bitcast i16* %66 to <8 x i16>*
  %68 = load <8 x i16>, <8 x i16>* %67, align 2, !alias.scope !27
  %69 = zext <8 x i16> %68 to <8 x i32>
  %70 = mul nsw <8 x i32> %28, %69
  %71 = lshr <8 x i32> %70, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %72 = trunc <8 x i32> %71 to <8 x i8>
  %73 = bitcast i8* %65 to <8 x i8>*
  store <8 x i8> %72, <8 x i8>* %73, align 1, !alias.scope !30, !noalias !27
  br label %74

74:                                               ; preds = %61, %64
  %75 = icmp eq i64 %25, %14
  br i1 %75, label %137, label %76

76:                                               ; preds = %74, %16, %13
  %77 = phi i64 [ 0, %16 ], [ 0, %13 ], [ %25, %74 ]
  %78 = phi i8* [ %5, %16 ], [ %5, %13 ], [ %26, %74 ]
  %79 = xor i64 %77, -1
  %80 = add nsw i64 %79, %14
  %81 = and i64 %14, 3
  %82 = icmp eq i64 %81, 0
  br i1 %82, label %97, label %83

83:                                               ; preds = %76, %83
  %84 = phi i64 [ %94, %83 ], [ %77, %76 ]
  %85 = phi i8* [ %93, %83 ], [ %78, %76 ]
  %86 = phi i64 [ %95, %83 ], [ %81, %76 ]
  %87 = getelementptr inbounds i16, i16* %10, i64 %84
  %88 = load i16, i16* %87, align 2
  %89 = zext i16 %88 to i32
  %90 = mul nsw i32 %7, %89
  %91 = lshr i32 %90, 16
  %92 = trunc i32 %91 to i8
  %93 = getelementptr inbounds i8, i8* %85, i64 1
  store i8 %92, i8* %85, align 1
  %94 = add nuw nsw i64 %84, 1
  %95 = add i64 %86, -1
  %96 = icmp eq i64 %95, 0
  br i1 %96, label %97, label %83, !llvm.loop !33

97:                                               ; preds = %83, %76
  %98 = phi i64 [ %77, %76 ], [ %94, %83 ]
  %99 = phi i8* [ %78, %76 ], [ %93, %83 ]
  %100 = icmp ult i64 %80, 3
  br i1 %100, label %137, label %101

101:                                              ; preds = %97, %101
  %102 = phi i64 [ %135, %101 ], [ %98, %97 ]
  %103 = phi i8* [ %134, %101 ], [ %99, %97 ]
  %104 = getelementptr inbounds i16, i16* %10, i64 %102
  %105 = load i16, i16* %104, align 2
  %106 = zext i16 %105 to i32
  %107 = mul nsw i32 %7, %106
  %108 = lshr i32 %107, 16
  %109 = trunc i32 %108 to i8
  %110 = getelementptr inbounds i8, i8* %103, i64 1
  store i8 %109, i8* %103, align 1
  %111 = add nuw nsw i64 %102, 1
  %112 = getelementptr inbounds i16, i16* %10, i64 %111
  %113 = load i16, i16* %112, align 2
  %114 = zext i16 %113 to i32
  %115 = mul nsw i32 %7, %114
  %116 = lshr i32 %115, 16
  %117 = trunc i32 %116 to i8
  %118 = getelementptr inbounds i8, i8* %103, i64 2
  store i8 %117, i8* %110, align 1
  %119 = add nuw nsw i64 %102, 2
  %120 = getelementptr inbounds i16, i16* %10, i64 %119
  %121 = load i16, i16* %120, align 2
  %122 = zext i16 %121 to i32
  %123 = mul nsw i32 %7, %122
  %124 = lshr i32 %123, 16
  %125 = trunc i32 %124 to i8
  %126 = getelementptr inbounds i8, i8* %103, i64 3
  store i8 %125, i8* %118, align 1
  %127 = add nuw nsw i64 %102, 3
  %128 = getelementptr inbounds i16, i16* %10, i64 %127
  %129 = load i16, i16* %128, align 2
  %130 = zext i16 %129 to i32
  %131 = mul nsw i32 %7, %130
  %132 = lshr i32 %131, 16
  %133 = trunc i32 %132 to i8
  %134 = getelementptr inbounds i8, i8* %103, i64 4
  store i8 %133, i8* %126, align 1
  %135 = add nuw nsw i64 %102, 4
  %136 = icmp eq i64 %135, %14
  br i1 %136, label %137, label %101, !llvm.loop !35

137:                                              ; preds = %97, %101, %74, %6
  ret void
}

declare void @ScaleAddRow_C(i8*, i16*, i32) local_unnamed_addr #3

declare void @ScaleAddRow_Any_SSE2(i8*, i16*, i32) local_unnamed_addr #3

declare void @ScaleAddRow_SSE2(i8*, i16*, i32) local_unnamed_addr #3

declare void @ScaleAddRow_Any_AVX2(i8*, i16*, i32) local_unnamed_addr #3

declare void @ScaleAddRow_AVX2(i8*, i16*, i32) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @ScaleRowDown34_16_C(i16*, i64, i16*, i32) local_unnamed_addr #3

declare void @ScaleRowDown34_0_Box_16_C(i16*, i64, i16*, i32) local_unnamed_addr #3

declare void @ScaleRowDown34_1_Box_16_C(i16*, i64, i16*, i32) local_unnamed_addr #3

declare void @ScaleRowDown2_16_C(i16*, i64, i16*, i32) local_unnamed_addr #3

declare void @ScaleRowDown2Linear_16_C(i16*, i64, i16*, i32) local_unnamed_addr #3

declare void @ScaleRowDown2Box_16_C(i16*, i64, i16*, i32) local_unnamed_addr #3

declare void @ScaleRowDown38_16_C(i16*, i64, i16*, i32) local_unnamed_addr #3

declare void @ScaleRowDown38_3_Box_16_C(i16*, i64, i16*, i32) local_unnamed_addr #3

declare void @ScaleRowDown38_2_Box_16_C(i16*, i64, i16*, i32) local_unnamed_addr #3

declare void @ScaleRowDown4Box_16_C(i16*, i64, i16*, i32) local_unnamed_addr #3

declare void @ScaleRowDown4_16_C(i16*, i64, i16*, i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN6libyuvL18ScaleAddCols2_16_CEiiiiPKjPt(i32, i32, i32, i32, i32* nocapture readonly, i16* nocapture) unnamed_addr #0 {
  %7 = alloca [2 x i32], align 4
  %8 = bitcast [2 x i32]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %8) #6
  %9 = getelementptr inbounds [2 x i32], [2 x i32]* %7, i64 0, i64 0
  %10 = getelementptr inbounds [2 x i32], [2 x i32]* %7, i64 0, i64 1
  %11 = ashr i32 %3, 16
  %12 = icmp sgt i32 %11, 1
  %13 = select i1 %12, i32 %11, i32 1
  %14 = mul nsw i32 %13, %1
  %15 = sdiv i32 65536, %14
  store i32 %15, i32* %9, align 4
  %16 = icmp sgt i32 %11, 0
  %17 = select i1 %16, i32 %11, i32 0
  %18 = add nuw nsw i32 %17, 1
  %19 = mul nsw i32 %18, %1
  %20 = sdiv i32 65536, %19
  store i32 %20, i32* %10, align 4
  %21 = icmp sgt i32 %0, 0
  br i1 %21, label %22, label %144

22:                                               ; preds = %6, %132
  %23 = phi i32 [ %142, %132 ], [ 0, %6 ]
  %24 = phi i16* [ %141, %132 ], [ %5, %6 ]
  %25 = phi i32 [ %27, %132 ], [ %2, %6 ]
  %26 = ashr i32 %25, 16
  %27 = add nsw i32 %25, %3
  %28 = ashr i32 %27, 16
  %29 = sub nsw i32 %28, %26
  %30 = icmp sgt i32 %29, 1
  %31 = select i1 %30, i32 %29, i32 1
  %32 = sext i32 %26 to i64
  %33 = getelementptr inbounds i32, i32* %4, i64 %32
  %34 = zext i32 %31 to i64
  %35 = icmp ult i32 %31, 8
  br i1 %35, label %121, label %36

36:                                               ; preds = %22
  %37 = and i64 %34, 2147483640
  %38 = add nsw i64 %37, -8
  %39 = lshr exact i64 %38, 3
  %40 = add nuw nsw i64 %39, 1
  %41 = and i64 %40, 3
  %42 = icmp ult i64 %38, 24
  br i1 %42, label %88, label %43

43:                                               ; preds = %36
  %44 = sub nsw i64 %40, %41
  br label %45

45:                                               ; preds = %45, %43
  %46 = phi i64 [ 0, %43 ], [ %85, %45 ]
  %47 = phi <4 x i32> [ zeroinitializer, %43 ], [ %83, %45 ]
  %48 = phi <4 x i32> [ zeroinitializer, %43 ], [ %84, %45 ]
  %49 = phi i64 [ %44, %43 ], [ %86, %45 ]
  %50 = getelementptr inbounds i32, i32* %33, i64 %46
  %51 = bitcast i32* %50 to <4 x i32>*
  %52 = load <4 x i32>, <4 x i32>* %51, align 4
  %53 = getelementptr inbounds i32, i32* %50, i64 4
  %54 = bitcast i32* %53 to <4 x i32>*
  %55 = load <4 x i32>, <4 x i32>* %54, align 4
  %56 = add <4 x i32> %52, %47
  %57 = add <4 x i32> %55, %48
  %58 = or i64 %46, 8
  %59 = getelementptr inbounds i32, i32* %33, i64 %58
  %60 = bitcast i32* %59 to <4 x i32>*
  %61 = load <4 x i32>, <4 x i32>* %60, align 4
  %62 = getelementptr inbounds i32, i32* %59, i64 4
  %63 = bitcast i32* %62 to <4 x i32>*
  %64 = load <4 x i32>, <4 x i32>* %63, align 4
  %65 = add <4 x i32> %61, %56
  %66 = add <4 x i32> %64, %57
  %67 = or i64 %46, 16
  %68 = getelementptr inbounds i32, i32* %33, i64 %67
  %69 = bitcast i32* %68 to <4 x i32>*
  %70 = load <4 x i32>, <4 x i32>* %69, align 4
  %71 = getelementptr inbounds i32, i32* %68, i64 4
  %72 = bitcast i32* %71 to <4 x i32>*
  %73 = load <4 x i32>, <4 x i32>* %72, align 4
  %74 = add <4 x i32> %70, %65
  %75 = add <4 x i32> %73, %66
  %76 = or i64 %46, 24
  %77 = getelementptr inbounds i32, i32* %33, i64 %76
  %78 = bitcast i32* %77 to <4 x i32>*
  %79 = load <4 x i32>, <4 x i32>* %78, align 4
  %80 = getelementptr inbounds i32, i32* %77, i64 4
  %81 = bitcast i32* %80 to <4 x i32>*
  %82 = load <4 x i32>, <4 x i32>* %81, align 4
  %83 = add <4 x i32> %79, %74
  %84 = add <4 x i32> %82, %75
  %85 = add i64 %46, 32
  %86 = add i64 %49, -4
  %87 = icmp eq i64 %86, 0
  br i1 %87, label %88, label %45, !llvm.loop !36

88:                                               ; preds = %45, %36
  %89 = phi <4 x i32> [ undef, %36 ], [ %83, %45 ]
  %90 = phi <4 x i32> [ undef, %36 ], [ %84, %45 ]
  %91 = phi i64 [ 0, %36 ], [ %85, %45 ]
  %92 = phi <4 x i32> [ zeroinitializer, %36 ], [ %83, %45 ]
  %93 = phi <4 x i32> [ zeroinitializer, %36 ], [ %84, %45 ]
  %94 = icmp eq i64 %41, 0
  br i1 %94, label %111, label %95

95:                                               ; preds = %88, %95
  %96 = phi i64 [ %108, %95 ], [ %91, %88 ]
  %97 = phi <4 x i32> [ %106, %95 ], [ %92, %88 ]
  %98 = phi <4 x i32> [ %107, %95 ], [ %93, %88 ]
  %99 = phi i64 [ %109, %95 ], [ %41, %88 ]
  %100 = getelementptr inbounds i32, i32* %33, i64 %96
  %101 = bitcast i32* %100 to <4 x i32>*
  %102 = load <4 x i32>, <4 x i32>* %101, align 4
  %103 = getelementptr inbounds i32, i32* %100, i64 4
  %104 = bitcast i32* %103 to <4 x i32>*
  %105 = load <4 x i32>, <4 x i32>* %104, align 4
  %106 = add <4 x i32> %102, %97
  %107 = add <4 x i32> %105, %98
  %108 = add i64 %96, 8
  %109 = add i64 %99, -1
  %110 = icmp eq i64 %109, 0
  br i1 %110, label %111, label %95, !llvm.loop !37

111:                                              ; preds = %95, %88
  %112 = phi <4 x i32> [ %89, %88 ], [ %106, %95 ]
  %113 = phi <4 x i32> [ %90, %88 ], [ %107, %95 ]
  %114 = add <4 x i32> %113, %112
  %115 = shufflevector <4 x i32> %114, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %116 = add <4 x i32> %114, %115
  %117 = shufflevector <4 x i32> %116, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %118 = add <4 x i32> %116, %117
  %119 = extractelement <4 x i32> %118, i32 0
  %120 = icmp eq i64 %37, %34
  br i1 %120, label %132, label %121

121:                                              ; preds = %111, %22
  %122 = phi i64 [ 0, %22 ], [ %37, %111 ]
  %123 = phi i32 [ 0, %22 ], [ %119, %111 ]
  br label %124

124:                                              ; preds = %121, %124
  %125 = phi i64 [ %130, %124 ], [ %122, %121 ]
  %126 = phi i32 [ %129, %124 ], [ %123, %121 ]
  %127 = getelementptr inbounds i32, i32* %33, i64 %125
  %128 = load i32, i32* %127, align 4
  %129 = add i32 %128, %126
  %130 = add nuw nsw i64 %125, 1
  %131 = icmp eq i64 %130, %34
  br i1 %131, label %132, label %124, !llvm.loop !38

132:                                              ; preds = %124, %111
  %133 = phi i32 [ %119, %111 ], [ %129, %124 ]
  %134 = sub nsw i32 %31, %11
  %135 = sext i32 %134 to i64
  %136 = getelementptr inbounds [2 x i32], [2 x i32]* %7, i64 0, i64 %135
  %137 = load i32, i32* %136, align 4
  %138 = mul i32 %137, %133
  %139 = lshr i32 %138, 16
  %140 = trunc i32 %139 to i16
  %141 = getelementptr inbounds i16, i16* %24, i64 1
  store i16 %140, i16* %24, align 2
  %142 = add nuw nsw i32 %23, 1
  %143 = icmp eq i32 %142, %0
  br i1 %143, label %144, label %22

144:                                              ; preds = %132, %6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %8) #6
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN6libyuvL18ScaleAddCols1_16_CEiiiiPKjPt(i32, i32, i32, i32, i32* nocapture readonly, i16* nocapture) unnamed_addr #5 {
  %7 = ashr i32 %3, 16
  %8 = icmp sgt i32 %7, 1
  %9 = select i1 %8, i32 %7, i32 1
  %10 = mul nsw i32 %9, %1
  %11 = sdiv i32 65536, %10
  %12 = icmp sgt i32 %0, 0
  br i1 %12, label %13, label %127

13:                                               ; preds = %6
  %14 = zext i32 %9 to i64
  %15 = sext i32 %2 to i64
  %16 = and i64 %14, 2147483640
  %17 = add nsw i64 %16, -8
  %18 = lshr exact i64 %17, 3
  %19 = add nuw nsw i64 %18, 1
  %20 = icmp ult i32 %9, 8
  %21 = and i64 %14, 2147483640
  %22 = and i64 %19, 3
  %23 = icmp ult i64 %17, 24
  %24 = sub nsw i64 %19, %22
  %25 = icmp eq i64 %22, 0
  %26 = icmp eq i64 %21, %14
  br label %27

27:                                               ; preds = %118, %13
  %28 = phi i64 [ %15, %13 ], [ %124, %118 ]
  %29 = phi i32 [ 0, %13 ], [ %125, %118 ]
  %30 = phi i16* [ %5, %13 ], [ %123, %118 ]
  %31 = getelementptr inbounds i32, i32* %4, i64 %28
  br i1 %20, label %107, label %32

32:                                               ; preds = %27
  br i1 %23, label %76, label %33

33:                                               ; preds = %32, %33
  %34 = phi i64 [ %73, %33 ], [ 0, %32 ]
  %35 = phi <4 x i32> [ %71, %33 ], [ zeroinitializer, %32 ]
  %36 = phi <4 x i32> [ %72, %33 ], [ zeroinitializer, %32 ]
  %37 = phi i64 [ %74, %33 ], [ %24, %32 ]
  %38 = getelementptr inbounds i32, i32* %31, i64 %34
  %39 = bitcast i32* %38 to <4 x i32>*
  %40 = load <4 x i32>, <4 x i32>* %39, align 4
  %41 = getelementptr inbounds i32, i32* %38, i64 4
  %42 = bitcast i32* %41 to <4 x i32>*
  %43 = load <4 x i32>, <4 x i32>* %42, align 4
  %44 = add <4 x i32> %40, %35
  %45 = add <4 x i32> %43, %36
  %46 = or i64 %34, 8
  %47 = getelementptr inbounds i32, i32* %31, i64 %46
  %48 = bitcast i32* %47 to <4 x i32>*
  %49 = load <4 x i32>, <4 x i32>* %48, align 4
  %50 = getelementptr inbounds i32, i32* %47, i64 4
  %51 = bitcast i32* %50 to <4 x i32>*
  %52 = load <4 x i32>, <4 x i32>* %51, align 4
  %53 = add <4 x i32> %49, %44
  %54 = add <4 x i32> %52, %45
  %55 = or i64 %34, 16
  %56 = getelementptr inbounds i32, i32* %31, i64 %55
  %57 = bitcast i32* %56 to <4 x i32>*
  %58 = load <4 x i32>, <4 x i32>* %57, align 4
  %59 = getelementptr inbounds i32, i32* %56, i64 4
  %60 = bitcast i32* %59 to <4 x i32>*
  %61 = load <4 x i32>, <4 x i32>* %60, align 4
  %62 = add <4 x i32> %58, %53
  %63 = add <4 x i32> %61, %54
  %64 = or i64 %34, 24
  %65 = getelementptr inbounds i32, i32* %31, i64 %64
  %66 = bitcast i32* %65 to <4 x i32>*
  %67 = load <4 x i32>, <4 x i32>* %66, align 4
  %68 = getelementptr inbounds i32, i32* %65, i64 4
  %69 = bitcast i32* %68 to <4 x i32>*
  %70 = load <4 x i32>, <4 x i32>* %69, align 4
  %71 = add <4 x i32> %67, %62
  %72 = add <4 x i32> %70, %63
  %73 = add i64 %34, 32
  %74 = add i64 %37, -4
  %75 = icmp eq i64 %74, 0
  br i1 %75, label %76, label %33, !llvm.loop !39

76:                                               ; preds = %33, %32
  %77 = phi <4 x i32> [ undef, %32 ], [ %71, %33 ]
  %78 = phi <4 x i32> [ undef, %32 ], [ %72, %33 ]
  %79 = phi i64 [ 0, %32 ], [ %73, %33 ]
  %80 = phi <4 x i32> [ zeroinitializer, %32 ], [ %71, %33 ]
  %81 = phi <4 x i32> [ zeroinitializer, %32 ], [ %72, %33 ]
  br i1 %25, label %98, label %82

82:                                               ; preds = %76, %82
  %83 = phi i64 [ %95, %82 ], [ %79, %76 ]
  %84 = phi <4 x i32> [ %93, %82 ], [ %80, %76 ]
  %85 = phi <4 x i32> [ %94, %82 ], [ %81, %76 ]
  %86 = phi i64 [ %96, %82 ], [ %22, %76 ]
  %87 = getelementptr inbounds i32, i32* %31, i64 %83
  %88 = bitcast i32* %87 to <4 x i32>*
  %89 = load <4 x i32>, <4 x i32>* %88, align 4
  %90 = getelementptr inbounds i32, i32* %87, i64 4
  %91 = bitcast i32* %90 to <4 x i32>*
  %92 = load <4 x i32>, <4 x i32>* %91, align 4
  %93 = add <4 x i32> %89, %84
  %94 = add <4 x i32> %92, %85
  %95 = add i64 %83, 8
  %96 = add i64 %86, -1
  %97 = icmp eq i64 %96, 0
  br i1 %97, label %98, label %82, !llvm.loop !40

98:                                               ; preds = %82, %76
  %99 = phi <4 x i32> [ %77, %76 ], [ %93, %82 ]
  %100 = phi <4 x i32> [ %78, %76 ], [ %94, %82 ]
  %101 = add <4 x i32> %100, %99
  %102 = shufflevector <4 x i32> %101, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %103 = add <4 x i32> %101, %102
  %104 = shufflevector <4 x i32> %103, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %105 = add <4 x i32> %103, %104
  %106 = extractelement <4 x i32> %105, i32 0
  br i1 %26, label %118, label %107

107:                                              ; preds = %98, %27
  %108 = phi i64 [ 0, %27 ], [ %21, %98 ]
  %109 = phi i32 [ 0, %27 ], [ %106, %98 ]
  br label %110

110:                                              ; preds = %107, %110
  %111 = phi i64 [ %116, %110 ], [ %108, %107 ]
  %112 = phi i32 [ %115, %110 ], [ %109, %107 ]
  %113 = getelementptr inbounds i32, i32* %31, i64 %111
  %114 = load i32, i32* %113, align 4
  %115 = add i32 %114, %112
  %116 = add nuw nsw i64 %111, 1
  %117 = icmp eq i64 %116, %14
  br i1 %117, label %118, label %110, !llvm.loop !41

118:                                              ; preds = %110, %98
  %119 = phi i32 [ %106, %98 ], [ %115, %110 ]
  %120 = mul i32 %119, %11
  %121 = lshr i32 %120, 16
  %122 = trunc i32 %121 to i16
  %123 = getelementptr inbounds i16, i16* %30, i64 1
  store i16 %122, i16* %30, align 2
  %124 = add nsw i64 %28, %14
  %125 = add nuw nsw i32 %29, 1
  %126 = icmp eq i32 %125, %0
  br i1 %126, label %127, label %27

127:                                              ; preds = %118, %6
  ret void
}

declare void @ScaleAddRow_16_C(i16*, i32*, i32) local_unnamed_addr #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{void (i8*, i8*, i32, i32, i32)* @ScaleFilterCols64_C, void (i8*, i8*, i32, i32, i32)* @ScaleFilterCols_C, void (i8*, i8*, i32, i32, i32)* @ScaleFilterCols_SSSE3}
!3 = !{void (i16*, i16*, i32, i32, i32)* @ScaleFilterCols64_16_C, void (i16*, i16*, i32, i32, i32)* @ScaleFilterCols_16_C}
!4 = !{void (i8*, i8*, i32)* @ScaleRowUp2_Linear_Any_AVX2, void (i8*, i8*, i32)* @ScaleRowUp2_Linear_Any_C, void (i8*, i8*, i32)* @ScaleRowUp2_Linear_Any_SSE2, void (i8*, i8*, i32)* @ScaleRowUp2_Linear_Any_SSSE3}
!5 = !{void (i8*, i64, i8*, i64, i32)* @ScaleRowUp2_Bilinear_Any_AVX2, void (i8*, i64, i8*, i64, i32)* @ScaleRowUp2_Bilinear_Any_C, void (i8*, i64, i8*, i64, i32)* @ScaleRowUp2_Bilinear_Any_SSE2, void (i8*, i64, i8*, i64, i32)* @ScaleRowUp2_Bilinear_Any_SSSE3}
!6 = !{void (i16*, i16*, i32)* @ScaleRowUp2_Linear_12_Any_AVX2, void (i16*, i16*, i32)* @ScaleRowUp2_Linear_12_Any_SSSE3, void (i16*, i16*, i32)* @ScaleRowUp2_Linear_16_Any_C}
!7 = !{void (i16*, i64, i16*, i64, i32)* @ScaleRowUp2_Bilinear_12_Any_AVX2, void (i16*, i64, i16*, i64, i32)* @ScaleRowUp2_Bilinear_12_Any_SSSE3, void (i16*, i64, i16*, i64, i32)* @ScaleRowUp2_Bilinear_16_Any_C}
!8 = !{void (i16*, i16*, i32)* @ScaleRowUp2_Linear_16_Any_AVX2, void (i16*, i16*, i32)* @ScaleRowUp2_Linear_16_Any_C, void (i16*, i16*, i32)* @ScaleRowUp2_Linear_16_Any_SSE2}
!9 = !{void (i16*, i64, i16*, i64, i32)* @ScaleRowUp2_Bilinear_16_Any_AVX2, void (i16*, i64, i16*, i64, i32)* @ScaleRowUp2_Bilinear_16_Any_C, void (i16*, i64, i16*, i64, i32)* @ScaleRowUp2_Bilinear_16_Any_SSSE3}
!10 = !{void (i16*, i16*, i32, i32, i32)* @ScaleColsUp2_16_C, void (i16*, i16*, i32, i32, i32)* @ScaleCols_16_C, void (i16*, i16*, i32, i32, i32)* @ScaleFilterCols64_16_C, void (i16*, i16*, i32, i32, i32)* @ScaleFilterCols_16_C}
!11 = !{void (i32, i32, i32, i32, i16*, i8*)* @_ZN6libyuvL15ScaleAddCols0_CEiiiiPKtPh, void (i32, i32, i32, i32, i16*, i8*)* @_ZN6libyuvL15ScaleAddCols1_CEiiiiPKtPh, void (i32, i32, i32, i32, i16*, i8*)* @_ZN6libyuvL15ScaleAddCols2_CEiiiiPKtPh}
!12 = !{void (i8*, i8*, i32, i32, i32)* @ScaleColsUp2_C, void (i8*, i8*, i32, i32, i32)* @ScaleCols_C}
!13 = !{void (i16*, i64, i16*, i32)* @ScaleRowDown34_0_Box_16_C, void (i16*, i64, i16*, i32)* @ScaleRowDown34_16_C}
!14 = !{void (i16*, i64, i16*, i32)* @ScaleRowDown34_16_C, void (i16*, i64, i16*, i32)* @ScaleRowDown34_1_Box_16_C}
!15 = !{void (i16*, i64, i16*, i32)* @ScaleRowDown2Box_16_C, void (i16*, i64, i16*, i32)* @ScaleRowDown2Linear_16_C, void (i16*, i64, i16*, i32)* @ScaleRowDown2_16_C}
!16 = !{void (i16*, i64, i16*, i32)* @ScaleRowDown38_16_C, void (i16*, i64, i16*, i32)* @ScaleRowDown38_3_Box_16_C}
!17 = !{void (i16*, i64, i16*, i32)* @ScaleRowDown38_16_C, void (i16*, i64, i16*, i32)* @ScaleRowDown38_2_Box_16_C}
!18 = !{void (i16*, i64, i16*, i32)* @ScaleRowDown4Box_16_C, void (i16*, i64, i16*, i32)* @ScaleRowDown4_16_C}
!19 = !{void (i32, i32, i32, i32, i32*, i16*)* @_ZN6libyuvL18ScaleAddCols1_16_CEiiiiPKjPt, void (i32, i32, i32, i32, i32*, i16*)* @_ZN6libyuvL18ScaleAddCols2_16_CEiiiiPKjPt}
!20 = !{void (i16*, i16*, i32, i32, i32)* @ScaleColsUp2_16_C, void (i16*, i16*, i32, i32, i32)* @ScaleCols_16_C}
!21 = distinct !{!21, !22}
!22 = !{!"llvm.loop.isvectorized", i32 1}
!23 = distinct !{!23, !24, !22}
!24 = !{!"llvm.loop.unroll.runtime.disable"}
!25 = distinct !{!25, !22}
!26 = distinct !{!26, !24, !22}
!27 = !{!28}
!28 = distinct !{!28, !29}
!29 = distinct !{!29, !"LVerDomain"}
!30 = !{!31}
!31 = distinct !{!31, !29}
!32 = distinct !{!32, !22}
!33 = distinct !{!33, !34}
!34 = !{!"llvm.loop.unroll.disable"}
!35 = distinct !{!35, !22}
!36 = distinct !{!36, !22}
!37 = distinct !{!37, !34}
!38 = distinct !{!38, !24, !22}
!39 = distinct !{!39, !22}
!40 = distinct !{!40, !34}
!41 = distinct !{!41, !24, !22}
