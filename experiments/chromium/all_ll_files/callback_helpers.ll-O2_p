; ModuleID = '../../base/callback_helpers.cc'
source_filename = "../../base/callback_helpers.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.base::ScopedClosureRunner" = type { %"class.base::OnceCallback" }
%"class.base::OnceCallback" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }

@_ZN4base19ScopedClosureRunnerC1Ev = hidden unnamed_addr alias void (%"class.base::ScopedClosureRunner"*), void (%"class.base::ScopedClosureRunner"*)* @_ZN4base19ScopedClosureRunnerC2Ev
@_ZN4base19ScopedClosureRunnerC1ENS_12OnceCallbackIFvvEEE = hidden unnamed_addr alias void (%"class.base::ScopedClosureRunner"*, %"class.base::OnceCallback"*), void (%"class.base::ScopedClosureRunner"*, %"class.base::OnceCallback"*)* @_ZN4base19ScopedClosureRunnerC2ENS_12OnceCallbackIFvvEEE
@_ZN4base19ScopedClosureRunnerC1EOS0_ = hidden unnamed_addr alias void (%"class.base::ScopedClosureRunner"*, %"class.base::ScopedClosureRunner"*), void (%"class.base::ScopedClosureRunner"*, %"class.base::ScopedClosureRunner"*)* @_ZN4base19ScopedClosureRunnerC2EOS0_
@_ZN4base19ScopedClosureRunnerD1Ev = hidden unnamed_addr alias void (%"class.base::ScopedClosureRunner"*), void (%"class.base::ScopedClosureRunner"*)* @_ZN4base19ScopedClosureRunnerD2Ev

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN4base19ScopedClosureRunnerC2Ev(%"class.base::ScopedClosureRunner"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.base::ScopedClosureRunner", %"class.base::ScopedClosureRunner"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %2, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN4base19ScopedClosureRunnerC2ENS_12OnceCallbackIFvvEEE(%"class.base::ScopedClosureRunner"* nocapture, %"class.base::OnceCallback"* nocapture) unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %1, i64 0, i32 0, i32 0, i32 0
  %4 = bitcast %"class.base::OnceCallback"* %1 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.base::ScopedClosureRunner"* %0 to i64*
  store i64 %5, i64* %6, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %3, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN4base19ScopedClosureRunnerC2EOS0_(%"class.base::ScopedClosureRunner"* nocapture, %"class.base::ScopedClosureRunner"* nocapture dereferenceable(8)) unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.base::ScopedClosureRunner", %"class.base::ScopedClosureRunner"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %4 = bitcast %"class.base::ScopedClosureRunner"* %1 to i64*
  %5 = load i64, i64* %4, align 8, !noalias !2
  %6 = bitcast %"class.base::ScopedClosureRunner"* %0 to i64*
  store i64 %5, i64* %6, align 8, !alias.scope !2
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %3, align 8, !noalias !2
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN4base19ScopedClosureRunner7ReleaseEv(%"class.base::OnceCallback"* noalias nocapture sret, %"class.base::ScopedClosureRunner"* nocapture) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.base::ScopedClosureRunner", %"class.base::ScopedClosureRunner"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %4 = bitcast %"class.base::ScopedClosureRunner"* %1 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.base::OnceCallback"* %0 to i64*
  store i64 %5, i64* %6, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %3, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(8) %"class.base::ScopedClosureRunner"* @_ZN4base19ScopedClosureRunneraSEOS0_(%"class.base::ScopedClosureRunner"* returned, %"class.base::ScopedClosureRunner"* dereferenceable(8)) local_unnamed_addr #2 align 2 {
  %3 = alloca %"class.base::OnceCallback", align 8
  %4 = alloca %"class.base::OnceCallback", align 8
  %5 = icmp eq %"class.base::ScopedClosureRunner"* %0, %1
  br i1 %5, label %26, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.base::ScopedClosureRunner", %"class.base::ScopedClosureRunner"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %8 = load %"class.base::internal::BindStateBase"*, %"class.base::internal::BindStateBase"** %7, align 8
  %9 = icmp eq %"class.base::internal::BindStateBase"* %8, null
  br i1 %9, label %18, label %10

10:                                               ; preds = %6
  %11 = ptrtoint %"class.base::internal::BindStateBase"* %8 to i64
  %12 = bitcast %"class.base::OnceCallback"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %12) #5
  %13 = bitcast %"class.base::OnceCallback"* %3 to i64*
  store i64 %11, i64* %13, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %7, align 8
  %14 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %3, i64 0, i32 0
  %15 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %8, i64 0, i32 1
  %16 = bitcast void ()** %15 to void (%"class.base::internal::BindStateBase"*)**
  %17 = load void (%"class.base::internal::BindStateBase"*)*, void (%"class.base::internal::BindStateBase"*)** %16, align 8
  tail call void %17(%"class.base::internal::BindStateBase"* nonnull %8) #5
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %14) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %12) #5
  br label %18

18:                                               ; preds = %6, %10
  %19 = getelementptr inbounds %"class.base::ScopedClosureRunner", %"class.base::ScopedClosureRunner"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %20 = bitcast %"class.base::ScopedClosureRunner"* %1 to i64*
  %21 = load i64, i64* %20, align 8, !noalias !5
  %22 = bitcast %"class.base::OnceCallback"* %4 to i64*
  store i64 %21, i64* %22, align 8, !alias.scope !5
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %19, align 8, !noalias !5
  %23 = getelementptr inbounds %"class.base::ScopedClosureRunner", %"class.base::ScopedClosureRunner"* %0, i64 0, i32 0, i32 0
  %24 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %4, i64 0, i32 0
  %25 = call dereferenceable(8) %"class.base::internal::CallbackBase"* @_ZN4base8internal12CallbackBaseaSEOS1_(%"class.base::internal::CallbackBase"* %23, %"class.base::internal::CallbackBase"* nonnull dereferenceable(8) %24) #5
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %24) #5
  br label %26

26:                                               ; preds = %2, %18
  ret %"class.base::ScopedClosureRunner"* %0
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base19ScopedClosureRunner11RunAndResetEv(%"class.base::ScopedClosureRunner"* nocapture) local_unnamed_addr #2 align 2 {
  %2 = alloca %"class.base::OnceCallback", align 8
  %3 = getelementptr inbounds %"class.base::ScopedClosureRunner", %"class.base::ScopedClosureRunner"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %4 = load %"class.base::internal::BindStateBase"*, %"class.base::internal::BindStateBase"** %3, align 8
  %5 = icmp eq %"class.base::internal::BindStateBase"* %4, null
  br i1 %5, label %14, label %6

6:                                                ; preds = %1
  %7 = ptrtoint %"class.base::internal::BindStateBase"* %4 to i64
  %8 = bitcast %"class.base::OnceCallback"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %8) #5
  %9 = bitcast %"class.base::OnceCallback"* %2 to i64*
  store i64 %7, i64* %9, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %3, align 8
  %10 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %2, i64 0, i32 0
  %11 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %4, i64 0, i32 1
  %12 = bitcast void ()** %11 to void (%"class.base::internal::BindStateBase"*)**
  %13 = load void (%"class.base::internal::BindStateBase"*)*, void (%"class.base::internal::BindStateBase"*)** %12, align 8
  tail call void %13(%"class.base::internal::BindStateBase"* nonnull %4) #5
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %8) #5
  br label %14

14:                                               ; preds = %1, %6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base19ScopedClosureRunner14ReplaceClosureENS_12OnceCallbackIFvvEEE(%"class.base::ScopedClosureRunner"*, %"class.base::OnceCallback"*) local_unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"class.base::ScopedClosureRunner", %"class.base::ScopedClosureRunner"* %0, i64 0, i32 0, i32 0
  %4 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %1, i64 0, i32 0
  %5 = tail call dereferenceable(8) %"class.base::internal::CallbackBase"* @_ZN4base8internal12CallbackBaseaSEOS1_(%"class.base::internal::CallbackBase"* %3, %"class.base::internal::CallbackBase"* dereferenceable(8) %4) #5
  ret void
}

; Function Attrs: nounwind
declare void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base19ScopedClosureRunnerD2Ev(%"class.base::ScopedClosureRunner"*) unnamed_addr #2 align 2 {
  %2 = alloca %"class.base::OnceCallback", align 8
  %3 = getelementptr inbounds %"class.base::ScopedClosureRunner", %"class.base::ScopedClosureRunner"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %4 = load %"class.base::internal::BindStateBase"*, %"class.base::internal::BindStateBase"** %3, align 8
  %5 = icmp eq %"class.base::internal::BindStateBase"* %4, null
  br i1 %5, label %14, label %6

6:                                                ; preds = %1
  %7 = ptrtoint %"class.base::internal::BindStateBase"* %4 to i64
  %8 = bitcast %"class.base::OnceCallback"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %8) #5
  %9 = bitcast %"class.base::OnceCallback"* %2 to i64*
  store i64 %7, i64* %9, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %3, align 8
  %10 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %2, i64 0, i32 0
  %11 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %4, i64 0, i32 1
  %12 = bitcast void ()** %11 to void (%"class.base::internal::BindStateBase"*)**
  %13 = load void (%"class.base::internal::BindStateBase"*)*, void (%"class.base::internal::BindStateBase"*)** %12, align 8
  tail call void %13(%"class.base::internal::BindStateBase"* nonnull %4) #5
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %8) #5
  br label %14

14:                                               ; preds = %1, %6
  %15 = getelementptr inbounds %"class.base::ScopedClosureRunner", %"class.base::ScopedClosureRunner"* %0, i64 0, i32 0, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* %15) #5
  ret void
}

; Function Attrs: nounwind
declare dereferenceable(8) %"class.base::internal::CallbackBase"* @_ZN4base8internal12CallbackBaseaSEOS1_(%"class.base::internal::CallbackBase"*, %"class.base::internal::CallbackBase"* dereferenceable(8)) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #4

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #4

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZN4base19ScopedClosureRunner7ReleaseEv: argument 0"}
!4 = distinct !{!4, !"_ZN4base19ScopedClosureRunner7ReleaseEv"}
!5 = !{!6}
!6 = distinct !{!6, !7, !"_ZN4base19ScopedClosureRunner7ReleaseEv: argument 0"}
!7 = distinct !{!7, !"_ZN4base19ScopedClosureRunner7ReleaseEv"}
