; ModuleID = '../../third_party/libvpx/source/libvpx/vp9/encoder/vp9_skin_detection.c'
source_filename = "../../third_party/libvpx/source/libvpx/vp9/encoder/vp9_skin_detection.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.VP9_COMP = type { %struct.FRAME_INFO, [8 x i8], %struct.QUANTS, %struct.ThreadData, %struct.MB_MODE_INFO_EXT*, [8 x i8], [256 x [8 x i16]], [256 x [8 x i16]], %struct.VP9Common, %struct.VP9EncoderConfig, %struct.lookahead_ctx*, %struct.lookahead_entry*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config, %struct.yv12_buffer_config*, %struct.yv12_buffer_config, %struct.yv12_buffer_config*, i8, [50 x %struct.TplDepFrame], [8 x %struct.yv12_buffer_config*], [8 x %struct.EncFrameBuf], %union.pthread_mutex_t, i32, %struct.KMEANS_DATA*, i32, i32, [8 x double], [8 x double], [8 x i32], i32, %struct.TileDataEnc*, i32, i32, [3 x i32], i32, i32, i32, [8 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64*, i32, i32, double*, %struct.yv12_buffer_config, [4 x [64 x %struct.TOKENEXTRA*]], [4 x [64 x %struct.TOKENLIST*]], i64, %struct.RD_OPT, %struct.CODING_CONTEXT, [2 x i32*], [2 x i32*], [2 x i32*], [2 x i32*], i64, i64, i64, %struct.RATE_CONTROL, double, [8 x [4 x i32]], %struct.vpx_codec_pkt_list*, [25 x %struct.MBGRAPH_FRAME_STATS], i32, i32, i32, %struct.SPEED_FEATURES, i32, i32, i32, i32, i32, i8*, i8*, [8 x i32], %struct.CYCLIC_REFRESH*, %struct.ActiveMap, i32 (%struct.macroblock*, %struct.mv*, %struct.mv*, i32, i32, %struct.vp9_variance_vtable*, i32, i32, i32*, i32*, i32**, i32*, i32*, i8*, i32, i32, i32)*, %struct.scale_factors, i32 (%struct.macroblock*, %struct.search_site_config*, %struct.mv*, %struct.mv*, i32, i32, i32*, %struct.vp9_variance_vtable*, %struct.mv*)*, [13 x %struct.vp9_variance_vtable], i64, i64, i64, i64, %struct.TWO_PASS, i8, %struct.yv12_buffer_config, %struct.ALT_REF_AQ*, i32, i32, i32, i32, i32, i32, %struct.SVC, %struct.diff*, i32, i32, i32, %struct.search_site_config, [10 x i32], [7 x [4 x i32]], [2 x [10 x [10 x i32]]], [10 x [10 x [10 x i32]]], [4 x [3 x i32]], [16 x [4 x i32]], [3 x [2 x [4 x i32]]], %struct.vp9_denoiser, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.noise_estimate, i8*, [4 x i64], i64, i64, i64, i8, i32, %struct.VPxWorker*, %struct.EncWorkerData*, %struct.VP9LfSyncData, %struct.VP9BitstreamWorkerData*, i32, %struct.Vp9LevelInfo, %struct.MultiThreadHandle, void (%struct.VP9RowMTSyncData*, i32, i32)*, void (%struct.VP9RowMTSyncData*, i32, i32, i32)*, %struct.ARNRFilterData, i32, i32, i8*, i8*, i8*, i8*, i8, i8, i8*, i32, %struct.LevelConstraint, i8*, i8*, i32, %struct.vpx_roi_map, i32, %struct.EXT_RATECTRL, [8 x i8] }
%struct.FRAME_INFO = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.QUANTS = type { [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]] }
%struct.ThreadData = type { %struct.macroblock, %struct.RD_COUNTS, %struct.FRAME_COUNTS*, %struct.PICK_MODE_CONTEXT*, %struct.PC_TREE*, %struct.PC_TREE*, [8 x i8] }
%struct.macroblock = type { [3 x %struct.macroblock_plane], %struct.macroblockd, %struct.MB_MODE_INFO_EXT*, %struct.MB_MODE_INFO_EXT*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i8, [4 x i32], [4 x i32], i32, [4 x i32], [4 x i32], [4 x i32], [2 x i32*], [2 x i32*], i32**, [4 x i32], [2 x i32*], [2 x i32*], i32**, i32, i32, %struct.MvLimits, [4 x [256 x i8]], [4 x i32], i32, i32, [4 x [2 x [2 x [6 x [2 x [6 x [12 x i32]]]]]]], i32, i32, i32, i32, i32, [12 x i8], [12 x i64], [4 x %struct.mv], [2 x i8], i8, i8, i8, i8, i32, i32, i32, i32, i32, i8, [25 x i8], i8, i8, void (i16*, i32*, i32)*, void (i32*, i8*, i32, i32)*, void (i32*, i16*, i32, i32, i32)*, [8 x i8], [4096 x i8], %struct.scale_factors*, [8 x i8] }
%struct.macroblock_plane = type { [4096 x i16], i32*, i32*, i16*, %struct.buf_2d, [8 x i8], [8 x i16], i16*, i16*, i16*, i16*, i16*, [2 x i64], [8 x i8] }
%struct.buf_2d = type { i8*, i32 }
%struct.macroblockd = type { [3 x %struct.macroblockd_plane], i8, i8, %struct.FRAME_COUNTS*, %struct.TileInfo, i32, %struct.MODE_INFO**, %struct.MODE_INFO*, %struct.MODE_INFO*, i32, i32, [3 x i8]*, i32, i32, i32, i32, %struct.frame_contexts*, [2 x %struct.RefBuffer*], %struct.yv12_buffer_config*, [3 x i8*], [3 x [16 x i8]], i8*, [8 x i8], i32, i32, i32, %struct.vpx_internal_error_info*, i32* }
%struct.macroblockd_plane = type { i32*, i32, i32, %struct.buf_2d, [2 x %struct.buf_2d], i8*, i8*, [8 x [2 x i16]], i16, i16, i8, i8, i16*, i32* }
%struct.TileInfo = type { i32, i32, i32, i32 }
%struct.MODE_INFO = type { i8, i8, i8, i8, i8, i8, i8, i8, [2 x i8], [2 x %union.int_mv], [4 x %struct.b_mode_info] }
%union.int_mv = type { i32 }
%struct.b_mode_info = type { i8, [2 x %union.int_mv] }
%struct.frame_contexts = type { [4 x [9 x i8]], [10 x [9 x i8]], [16 x [3 x i8]], [4 x [2 x [2 x [6 x [6 x [3 x i8]]]]]], [4 x [2 x i8]], [7 x [3 x i8]], [4 x i8], [5 x i8], [5 x [2 x i8]], [5 x i8], %struct.tx_probs, [3 x i8], %struct.nmv_context, i32 }
%struct.tx_probs = type { [2 x [3 x i8]], [2 x [2 x i8]], [2 x [1 x i8]] }
%struct.nmv_context = type { [3 x i8], [2 x %struct.nmv_component] }
%struct.nmv_component = type { i8, [10 x i8], [1 x i8], [10 x i8], [2 x [3 x i8]], [3 x i8], i8, i8 }
%struct.RefBuffer = type { i32, %struct.yv12_buffer_config*, %struct.scale_factors }
%struct.vpx_internal_error_info = type { i32, i32, [80 x i8], i32, [1 x %struct.__jmp_buf_tag] }
%struct.__jmp_buf_tag = type { [8 x i64], i32, %struct.__sigset_t }
%struct.__sigset_t = type { [16 x i64] }
%struct.MvLimits = type { i32, i32, i32, i32 }
%struct.mv = type { i16, i16 }
%struct.RD_COUNTS = type { [4 x [2 x [2 x [6 x [6 x [12 x i32]]]]]], [3 x i64], [4 x i64] }
%struct.FRAME_COUNTS = type { [4 x [10 x i32]], [10 x [10 x i32]], [16 x [4 x i32]], [4 x [2 x [2 x [6 x [6 x [4 x i32]]]]]], [4 x [2 x [2 x [6 x [6 x i32]]]]], [4 x [3 x i32]], [7 x [4 x i32]], [4 x [2 x i32]], [5 x [2 x i32]], [5 x [2 x [2 x i32]]], [5 x [2 x i32]], %struct.tx_counts, [3 x [2 x i32]], %struct.nmv_context_counts }
%struct.tx_counts = type { [2 x [4 x i32]], [2 x [3 x i32]], [2 x [2 x i32]], [4 x i32] }
%struct.nmv_context_counts = type { [4 x i32], [2 x %struct.nmv_component_counts] }
%struct.nmv_component_counts = type { [2 x i32], [11 x i32], [2 x i32], [10 x [2 x i32]], [2 x [4 x i32]], [4 x i32], [2 x i32], [2 x i32] }
%struct.PICK_MODE_CONTEXT = type { %struct.MODE_INFO, %struct.MB_MODE_INFO_EXT, i8*, [3 x [3 x i32*]], [3 x [3 x i32*]], [3 x [3 x i32*]], [3 x [3 x i16*]], [3 x [3 x i32*]], [3 x [3 x i32*]], [3 x [3 x i32*]], [3 x [3 x i16*]], i32, i32, i32, i32, i32, [12 x i8], i32, i32, i32, i32, [4 x i64], i32, i64, i64, i32, i32, i32, i8, %union.int_mv, i8, i8, i32, [4 x %struct.mv], i8, i32, i8 }
%struct.MB_MODE_INFO_EXT = type { [4 x [2 x %union.int_mv]], [4 x i8] }
%struct.PC_TREE = type { i32, i32, i8, %struct.PICK_MODE_CONTEXT, [2 x %struct.PICK_MODE_CONTEXT], [2 x %struct.PICK_MODE_CONTEXT], %union.anon, %struct.mv }
%union.anon = type { [4 x %struct.PC_TREE*] }
%struct.VP9Common = type { %struct.vpx_internal_error_info, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.yv12_buffer_config*, %struct.RefCntBuffer*, %struct.RefCntBuffer*, [8 x i32], [8 x i32], [3 x %struct.RefBuffer], i32, i32, %struct.yv12_buffer_config, %struct.yv12_buffer_config, i32, i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [8 x [2 x i16]], [8 x [2 x i16]], i32, %struct.MODE_INFO*, %struct.MODE_INFO*, %struct.MODE_INFO*, %struct.MODE_INFO*, i32 (%struct.VP9Common*, i32)*, void (%struct.VP9Common*)*, void (%struct.VP9Common*)*, %struct.MODE_INFO**, %struct.MODE_INFO**, %struct.MODE_INFO**, %struct.MODE_INFO**, i32, i32, i32, [2 x i8*], i8*, i8*, i32, i8, [11 x i8], %struct.loop_filter_info_n, i32, [4 x i32], %struct.loopfilter, %struct.segmentation, i8, [2 x i8], i32, %struct.frame_contexts*, %struct.frame_contexts*, i32, %struct.FRAME_COUNTS, i32, i32, i32, i32, i32, %struct.postproc_state, i32, i32, i32, i32, i32, i32, %struct.BufferPool*, i8*, i8*, i32, i32, [8 x i8] }
%struct.RefCntBuffer = type { i32, %struct.MV_REF*, i32, i32, i8, i32, i32, %struct.vpx_codec_frame_buffer, %struct.yv12_buffer_config }
%struct.MV_REF = type { [2 x %union.int_mv], [2 x i8] }
%struct.vpx_codec_frame_buffer = type { i8*, i64, i8* }
%struct.loop_filter_info_n = type { [64 x %struct.loop_filter_thresh], [8 x [4 x [2 x i8]]] }
%struct.loop_filter_thresh = type { [16 x i8], [16 x i8], [16 x i8] }
%struct.loopfilter = type { i32, i32, i32, i32, i8, i8, [4 x i8], [4 x i8], [2 x i8], [2 x i8], %struct.LOOP_FILTER_MASK*, i32 }
%struct.LOOP_FILTER_MASK = type { [4 x i64], [4 x i64], i64, [4 x i16], [4 x i16], i16, [64 x i8] }
%struct.segmentation = type { i8, i8, i8, i8, i8, [7 x i8], [3 x i8], [8 x [4 x i16]], [8 x i32], i32 }
%struct.postproc_state = type { i32, i32, i32, i32, %struct.MODE_INFO*, %struct.MODE_INFO*, i32, i8*, i8* }
%struct.BufferPool = type { i8*, i32 (i8*, i64, %struct.vpx_codec_frame_buffer*)*, i32 (i8*, %struct.vpx_codec_frame_buffer*)*, [12 x %struct.RefCntBuffer], %struct.InternalFrameBufferList }
%struct.InternalFrameBufferList = type { i32, %struct.InternalFrameBuffer* }
%struct.InternalFrameBuffer = type { i8*, i64, i32 }
%struct.VP9EncoderConfig = type { i32, i32, i32, i32, i32, double, %struct.vpx_rational, %struct.vpx_rational64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [12 x i32], [5 x i32], [5 x i32], [5 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.vpx_fixed_buf, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.vpx_rational = type { i32, i32 }
%struct.vpx_rational64 = type { i64, i32 }
%struct.vpx_fixed_buf = type { i8*, i64 }
%struct.lookahead_ctx = type { i32, i32, i32, i32, i32, %struct.lookahead_entry* }
%struct.lookahead_entry = type { %struct.yv12_buffer_config, i64, i64, i32, i64 }
%struct.TplDepFrame = type { i8, %struct.TplDepStats*, i32, i32, i32, i32, i32, i32 }
%struct.TplDepStats = type { i64, i64, i64, i64, i64, i32, %union.int_mv }
%struct.EncFrameBuf = type { i32, i32, %struct.yv12_buffer_config }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%struct.KMEANS_DATA = type { double, i32, i32 }
%struct.TileDataEnc = type { %struct.TileInfo, [13 x [30 x i32]], [13 x [30 x i8]], %struct.FIRSTPASS_DATA, %struct.VP9RowMTSyncData, i32* }
%struct.FIRSTPASS_DATA = type { double, double, i64, i64, i64, i64, i32, i32, double, double, double, i32, i32, i32, i32, i32, i32, i32, i64, i64, i32, i32 }
%struct.VP9RowMTSyncData = type { %union.pthread_mutex_t*, %union.pthread_cond_t*, i32*, i32, i32 }
%union.pthread_cond_t = type { %struct.__pthread_cond_s }
%struct.__pthread_cond_s = type { %union.anon.0, %union.anon.1, [2 x i32], [2 x i32], i32, i32, [2 x i32] }
%union.anon.0 = type { i64 }
%union.anon.1 = type { i64 }
%struct.TOKENEXTRA = type { i8*, i16, i32 }
%struct.TOKENLIST = type { %struct.TOKENEXTRA*, %struct.TOKENEXTRA*, i32 }
%struct.RD_OPT = type { [30 x i32], [6 x i32], [8 x [13 x [30 x i32]]], [4 x [3 x i64]], [4 x [4 x i64]], i32, i32, double }
%struct.CODING_CONTEXT = type { [4 x i32], [2 x [32767 x i32]], [2 x [32767 x i32]], [3 x i8], i8*, [4 x i8], [2 x i8], %struct.frame_contexts }
%struct.RATE_CONTROL = type { i32, i32, i32, i32, [2 x i32], i32, i32, i32, i32, i32, [5 x double], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [2 x i32], double, double, i64, i64, i64, i64, i32, i32, i32, i32, i32, i32, i32, i64, i64, i64, i32, i32, i64, i64, i64, i32, i32, i32, i32, i32, i32, i32, [2 x i32], [2 x i32], [5 x i32], i32, i32, [25 x i64], i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, double, i32, i32, i32, i32, i32, [5 x i32], double, i32, i32, i32, i32 }
%struct.vpx_codec_pkt_list = type { i32, i32, [1 x %struct.vpx_codec_cx_pkt] }
%struct.vpx_codec_cx_pkt = type { i32, %union.anon.3 }
%union.anon.3 = type { %struct.anon.4, [40 x i8] }
%struct.anon.4 = type { i8*, i64, i64, i64, i32, i32, [5 x i32], [5 x i32], [5 x i8] }
%struct.MBGRAPH_FRAME_STATS = type { %struct.MBGRAPH_MB_STATS* }
%struct.MBGRAPH_MB_STATS = type { [4 x %struct.anon.5] }
%struct.anon.5 = type { i32, %union.anon.6 }
%union.anon.6 = type { %union.int_mv }
%struct.SPEED_FEATURES = type { %struct.MV_SPEED_FEATURES, i32, i32, i32, i32, i8, i32, i32, i32, i32, i32, i32, i32, double, i32, i32, i32, double, i32, i32, i32, i32, i32, i32, i32, i8, i32, i32, i8, i8, i32, i32, i8, i8, i8, i32, i32, i32, i32, i32, i32, [4 x %struct.MESH_PATTERN], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [4 x i32], [4 x i32], [13 x i32], i32, i32, i32, i32, i32, [13 x i32], i32, i32, i32, i8, i32, i32, i32, i8, i32, i32, i32, %struct.PARTITION_SEARCH_BREAKOUT_THR, %struct.anon.7, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.MV_SPEED_FEATURES = type { i32, i32, i32, i32, i32, i32, i32, %struct.ADAPT_SUBPEL_FORCE_STOP, i32 }
%struct.ADAPT_SUBPEL_FORCE_STOP = type { i32, i32, i32 }
%struct.MESH_PATTERN = type { i32, i32 }
%struct.PARTITION_SEARCH_BREAKOUT_THR = type { i64, i32 }
%struct.anon.7 = type { i32, [3 x float], i32, i32, [4 x i32] }
%struct.CYCLIC_REFRESH = type { i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i64, i64, i16, double, i32, double, [3 x i32], i32, double, i32, i32, i32 }
%struct.ActiveMap = type { i32, i32, i8* }
%struct.vp9_variance_vtable = type { i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32, i8*)*, i32 (i8*, i32, i8*, i32, i32*)*, i32 (i8*, i32, i32, i32, i8*, i32, i32*)*, i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*)*, void (i8*, i32, i8**, i32, i32*)*, void (i8*, i32, i8*, i32, i32*)* }
%struct.scale_factors = type { i32, i32, i32, i32, i32 (i32, %struct.scale_factors*)*, i32 (i32, %struct.scale_factors*)*, [2 x [2 x [2 x void (i8*, i64, i8*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32)*]]], [2 x [2 x [2 x void (i16*, i64, i16*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32, i32)*]]] }
%struct.TWO_PASS = type { i32, i32, %struct.FIRSTPASS_STATS, %struct.FIRSTPASS_STATS, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS*, %struct.FIRST_PASS_INFO, %struct.FIRSTPASS_STATS, i32, i64, double, double, double, double, %struct.FP_MB_FLOAT_STATS*, i32, i64, double, double, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [6 x i32], %struct.GF_GROUP }
%struct.FIRST_PASS_INFO = type { %struct.FIRSTPASS_STATS*, i32 }
%struct.FIRSTPASS_STATS = type { double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, i64 }
%struct.FP_MB_FLOAT_STATS = type { double, double, double }
%struct.GF_GROUP = type { i8, [252 x i32], [252 x i32], [252 x i8], [252 x i8], [252 x i8], [252 x i32], [252 x i32], i32, i32, [50 x i32], i32, i32, i32, i32, i32, i32 }
%struct.yv12_buffer_config = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i8*, i8*, i8*, i64, i32, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.ALT_REF_AQ = type opaque
%struct.SVC = type { i32, i32, i32, i32, i32, i32, %struct.lookahead_entry, i32, [25 x %struct.yv12_buffer_config], %struct.yv12_buffer_config, i32, i32, [12 x %struct.LAYER_CONTEXT], i32, [12 x i32], [12 x i32], [12 x i32], [12 x i32], i32, i32, i32, [2 x %struct.BUFFER_LONGTERM_REF], i32, i32, i32, i32, [5 x i8], [5 x i32], i8*, [12 x i32], [12 x i32], [12 x i32], i32, i32, i32, [12 x i32], [12 x i32], [12 x i32], [12 x i32], [12 x i32], i32, i32, i32, i32, i32, [5 x i32], [5 x i8], [5 x i8], [5 x i8], [5 x i8], [5 x i8], [5 x i8], [5 x i32], [8 x i8], [8 x i8], [5 x i32], i8, i8, i8, [8 x i8], i32, [5 x i32], i32, [5 x i64], i64, i64, [5 x i64], i32, i32, i32, i32 }
%struct.LAYER_CONTEXT = type { %struct.RATE_CONTROL, i32, i32, double, i32, i32, i32, i32, i32, i32, i32, %struct.TWO_PASS, %struct.vpx_fixed_buf, i32, i32, i32, i32, %struct.lookahead_entry*, i32, i32, i32, i64, i32, i8*, i8*, i8*, i32, i32, i32, i8, i32 }
%struct.BUFFER_LONGTERM_REF = type { i32, i32 }
%struct.diff = type { i32, i32, i32 }
%struct.search_site_config = type { [88 x %struct.mv], [88 x i64], i32, i32 }
%struct.vp9_denoiser = type { %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config, i32, i32, i32, i32, i32, i32, i32 }
%struct.noise_estimate = type { i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.VPxWorker = type { %struct.VPxWorkerImpl*, i32, i32 (i8*, i8*)*, i8*, i8*, i32 }
%struct.VPxWorkerImpl = type opaque
%struct.EncWorkerData = type { %struct.VP9_COMP*, %struct.ThreadData*, i32, i32, [64 x i32] }
%struct.VP9LfSyncData = type { %union.pthread_mutex_t*, %union.pthread_cond_t*, i32*, i32, i32, %struct.LoopFilterWorkerData*, i32, i32, %union.pthread_mutex_t*, %union.pthread_mutex_t*, %union.pthread_cond_t*, i32*, i32 }
%struct.LoopFilterWorkerData = type { %struct.yv12_buffer_config*, %struct.VP9Common*, [3 x %struct.macroblockd_plane], i32, i32, i32 }
%struct.VP9BitstreamWorkerData = type opaque
%struct.Vp9LevelInfo = type { %struct.Vp9LevelStats, %struct.Vp9LevelSpec }
%struct.Vp9LevelStats = type { i8, i32, i64, i64, double, %struct.FrameWindowBuffer, i32 }
%struct.FrameWindowBuffer = type { [128 x %struct.FrameRecord], i8, i8 }
%struct.FrameRecord = type { i64, i32, i32 }
%struct.Vp9LevelSpec = type { i32, i64, i32, i32, double, double, double, i8, i32, i8 }
%struct.MultiThreadHandle = type { i32, i32, i32, [4 x i32], %struct.JobQueue*, i32, [64 x %struct.RowMTInfo], [80 x i32] }
%struct.JobQueue = type { i8*, %struct.JobNode }
%struct.JobNode = type { i32, i32, i32 }
%struct.RowMTInfo = type { %struct.JobQueueHandle, %union.pthread_mutex_t }
%struct.JobQueueHandle = type { i8*, i32 }
%struct.ARNRFilterData = type { [25 x %struct.yv12_buffer_config*], i32, i32, i32, %struct.scale_factors }
%struct.LevelConstraint = type { i8, i8, i32, double }
%struct.vpx_roi_map = type { i8, i8*, i32, i32, [8 x i32], [8 x i32], [8 x i32], [8 x i32], [4 x i32] }
%struct.EXT_RATECTRL = type { i32, i8*, %struct.vpx_rc_funcs, %struct.vpx_rc_config, %struct.vpx_rc_firstpass_stats }
%struct.vpx_rc_funcs = type { i32 (i8*, %struct.vpx_rc_config*, i8**)*, i32 (i8*, %struct.vpx_rc_firstpass_stats*)*, i32 (i8*, %struct.vpx_rc_encodeframe_info*, %struct.vpx_rc_encodeframe_decision*)*, i32 (i8*, %struct.vpx_rc_encodeframe_result*)*, i32 (i8*)*, i8* }
%struct.vpx_rc_encodeframe_info = type { i32, i32, i32, i32, [3 x i32], [3 x i32] }
%struct.vpx_rc_encodeframe_decision = type { i32 }
%struct.vpx_rc_encodeframe_result = type { i64, i64, i64 }
%struct.vpx_rc_config = type { i32, i32, i32, i32, i32, i32 }
%struct.vpx_rc_firstpass_stats = type { %struct.vpx_rc_frame_stats*, i32 }
%struct.vpx_rc_frame_stats = type { double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double }

@b_width_log2_lookup = external local_unnamed_addr constant [13 x i8], align 1
@b_height_log2_lookup = external local_unnamed_addr constant [13 x i8], align 1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vp9_compute_skin_block(i8* nocapture readonly, i8* nocapture readonly, i8* nocapture readonly, i32, i32, i32, i32, i32) local_unnamed_addr #0 {
  %9 = icmp sgt i32 %6, 60
  %10 = icmp eq i32 %7, 0
  %11 = and i1 %9, %10
  br i1 %11, label %46, label %12

12:                                               ; preds = %8
  %13 = sext i32 %5 to i64
  %14 = getelementptr inbounds [13 x i8], [13 x i8]* @b_width_log2_lookup, i64 0, i64 %13
  %15 = load i8, i8* %14, align 1
  %16 = zext i8 %15 to i32
  %17 = shl i32 4, %16
  %18 = ashr i32 %17, 1
  %19 = getelementptr inbounds [13 x i8], [13 x i8]* @b_height_log2_lookup, i64 0, i64 %13
  %20 = load i8, i8* %19, align 1
  %21 = zext i8 %20 to i32
  %22 = shl i32 4, %21
  %23 = ashr i32 %22, 1
  %24 = ashr i32 %17, 2
  %25 = ashr i32 %22, 2
  %26 = mul nsw i32 %23, %3
  %27 = add nsw i32 %26, %18
  %28 = sext i32 %27 to i64
  %29 = getelementptr inbounds i8, i8* %0, i64 %28
  %30 = load i8, i8* %29, align 1
  %31 = mul nsw i32 %25, %4
  %32 = add nsw i32 %31, %24
  %33 = sext i32 %32 to i64
  %34 = getelementptr inbounds i8, i8* %1, i64 %33
  %35 = load i8, i8* %34, align 1
  %36 = getelementptr inbounds i8, i8* %2, i64 %33
  %37 = load i8, i8* %36, align 1
  %38 = icmp sgt i32 %6, 25
  %39 = and i1 %38, %10
  %40 = xor i1 %39, true
  %41 = zext i1 %40 to i32
  %42 = zext i8 %30 to i32
  %43 = zext i8 %35 to i32
  %44 = zext i8 %37 to i32
  %45 = tail call i32 @vpx_skin_pixel(i32 %42, i32 %43, i32 %44, i32 %41) #2
  br label %46

46:                                               ; preds = %8, %12
  %47 = phi i32 [ %45, %12 ], [ 0, %8 ]
  ret i32 %47
}

declare i32 @vpx_skin_pixel(i32, i32, i32, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @vp9_compute_skin_sb(%struct.VP9_COMP* nocapture readonly, i8 zeroext, i32, i32) local_unnamed_addr #0 {
  %5 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 12
  %6 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %5, align 8
  %7 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %6, i64 0, i32 4
  %8 = load i32, i32* %7, align 8
  %9 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %6, i64 0, i32 9
  %10 = load i32, i32* %9, align 4
  %11 = zext i8 %1 to i64
  %12 = getelementptr inbounds [13 x i8], [13 x i8]* @b_width_log2_lookup, i64 0, i64 %11
  %13 = load i8, i8* %12, align 1
  %14 = zext i8 %13 to i32
  %15 = shl i32 4, %14
  %16 = icmp eq i8 %13, 1
  %17 = select i1 %16, i32 3, i32 4
  %18 = add nsw i32 %17, -1
  %19 = sdiv i32 %15, 8
  %20 = mul i32 %10, %2
  %21 = add i32 %20, %3
  %22 = shl i32 %21, 2
  %23 = add nsw i32 %2, 8
  %24 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 33
  %25 = load i32, i32* %24, align 16
  %26 = add nsw i32 %25, -2
  %27 = icmp slt i32 %23, %26
  %28 = select i1 %27, i32 %23, i32 %26
  %29 = add nsw i32 %3, 8
  %30 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 35
  %31 = load i32, i32* %30, align 8
  %32 = add nsw i32 %31, -2
  %33 = icmp slt i32 %29, %32
  %34 = select i1 %33, i32 %29, i32 %32
  %35 = sext i32 %22 to i64
  %36 = icmp sgt i32 %28, %2
  br i1 %36, label %37, label %264

37:                                               ; preds = %4
  %38 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %6, i64 0, i32 15
  %39 = load i8*, i8** %38, align 8
  %40 = getelementptr inbounds i8, i8* %39, i64 %35
  %41 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %6, i64 0, i32 14
  %42 = load i8*, i8** %41, align 8
  %43 = getelementptr inbounds i8, i8* %42, i64 %35
  %44 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %6, i64 0, i32 13
  %45 = load i8*, i8** %44, align 8
  %46 = mul i32 %8, %2
  %47 = add i32 %46, %3
  %48 = shl i32 %47, 3
  %49 = sext i32 %48 to i64
  %50 = getelementptr inbounds i8, i8* %45, i64 %49
  %51 = ashr i32 %15, 1
  %52 = icmp sgt i32 %34, %3
  %53 = icmp eq i8 %1, 3
  %54 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 129
  %55 = getelementptr inbounds [13 x i8], [13 x i8]* @b_height_log2_lookup, i64 0, i64 %11
  %56 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 82
  %57 = sext i32 %15 to i64
  %58 = sext i32 %51 to i64
  %59 = shl i32 %8, %17
  %60 = shl i32 %10, %18
  %61 = ashr i32 %15, 2
  br label %62

62:                                               ; preds = %37, %160
  %63 = phi i32 [ %2, %37 ], [ %174, %160 ]
  %64 = phi i8* [ %40, %37 ], [ %173, %160 ]
  %65 = phi i8* [ %43, %37 ], [ %172, %160 ]
  %66 = phi i8* [ %50, %37 ], [ %168, %160 ]
  br i1 %52, label %67, label %160

67:                                               ; preds = %62
  %68 = icmp eq i32 %63, 0
  br label %82

69:                                               ; preds = %160
  br i1 %36, label %70, label %264

70:                                               ; preds = %69
  %71 = icmp sgt i32 %34, %3
  %72 = sub nsw i32 %34, %19
  %73 = sub nsw i32 %28, %19
  %74 = sub nsw i32 0, %19
  %75 = icmp slt i32 %19, %74
  %76 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 82
  %77 = sext i32 %74 to i64
  %78 = sext i32 %19 to i64
  %79 = sext i32 %3 to i64
  %80 = sext i32 %34 to i64
  %81 = sext i32 %72 to i64
  br label %176

82:                                               ; preds = %67, %153
  %83 = phi i8* [ %64, %67 ], [ %157, %153 ]
  %84 = phi i8* [ %65, %67 ], [ %156, %153 ]
  %85 = phi i8* [ %66, %67 ], [ %155, %153 ]
  %86 = phi i32 [ 0, %67 ], [ %154, %153 ]
  %87 = phi i32 [ %3, %67 ], [ %158, %153 ]
  %88 = load i32, i32* %30, align 8
  %89 = mul nsw i32 %88, %63
  %90 = add nsw i32 %89, %87
  %91 = add nsw i32 %90, 1
  %92 = add nsw i32 %90, %88
  %93 = add nsw i32 %92, 1
  %94 = icmp eq i32 %87, 0
  %95 = or i1 %68, %94
  br i1 %95, label %153, label %96

96:                                               ; preds = %82
  %97 = load i8*, i8** %54, align 16
  %98 = sext i32 %90 to i64
  %99 = getelementptr inbounds i8, i8* %97, i64 %98
  %100 = load i8, i8* %99, align 1
  br i1 %53, label %117, label %101

101:                                              ; preds = %96
  %102 = sext i32 %91 to i64
  %103 = getelementptr inbounds i8, i8* %97, i64 %102
  %104 = load i8, i8* %103, align 1
  %105 = sext i32 %92 to i64
  %106 = getelementptr inbounds i8, i8* %97, i64 %105
  %107 = load i8, i8* %106, align 1
  %108 = sext i32 %93 to i64
  %109 = getelementptr inbounds i8, i8* %97, i64 %108
  %110 = load i8, i8* %109, align 1
  %111 = icmp ult i8 %107, %110
  %112 = select i1 %111, i8 %107, i8 %110
  %113 = icmp ult i8 %104, %112
  %114 = select i1 %113, i8 %104, i8 %112
  %115 = icmp ult i8 %100, %114
  %116 = select i1 %115, i8 %100, i8 %114
  br label %117

117:                                              ; preds = %101, %96
  %118 = phi i8 [ %100, %96 ], [ %116, %101 ]
  %119 = icmp ugt i8 %118, 60
  br i1 %119, label %144, label %120

120:                                              ; preds = %117
  %121 = load i8, i8* %55, align 1
  %122 = zext i8 %121 to i32
  %123 = shl i32 4, %122
  %124 = ashr i32 %123, 1
  %125 = ashr i32 %123, 2
  %126 = mul nsw i32 %124, %8
  %127 = add nsw i32 %126, %51
  %128 = sext i32 %127 to i64
  %129 = getelementptr inbounds i8, i8* %85, i64 %128
  %130 = load i8, i8* %129, align 1
  %131 = mul nsw i32 %125, %10
  %132 = add nsw i32 %131, %61
  %133 = sext i32 %132 to i64
  %134 = getelementptr inbounds i8, i8* %84, i64 %133
  %135 = load i8, i8* %134, align 1
  %136 = getelementptr inbounds i8, i8* %83, i64 %133
  %137 = load i8, i8* %136, align 1
  %138 = icmp ult i8 %118, 26
  %139 = zext i1 %138 to i32
  %140 = zext i8 %130 to i32
  %141 = zext i8 %135 to i32
  %142 = zext i8 %137 to i32
  %143 = tail call i32 @vpx_skin_pixel(i32 %140, i32 %141, i32 %142, i32 %139) #2
  br label %144

144:                                              ; preds = %117, %120
  %145 = phi i32 [ %143, %120 ], [ 0, %117 ]
  %146 = trunc i32 %145 to i8
  %147 = load i8*, i8** %56, align 16
  %148 = getelementptr inbounds i8, i8* %147, i64 %98
  store i8 %146, i8* %148, align 1
  %149 = add nsw i32 %86, 1
  %150 = getelementptr inbounds i8, i8* %85, i64 %57
  %151 = getelementptr inbounds i8, i8* %84, i64 %58
  %152 = getelementptr inbounds i8, i8* %83, i64 %58
  br label %153

153:                                              ; preds = %82, %144
  %154 = phi i32 [ %149, %144 ], [ %86, %82 ]
  %155 = phi i8* [ %150, %144 ], [ %85, %82 ]
  %156 = phi i8* [ %151, %144 ], [ %84, %82 ]
  %157 = phi i8* [ %152, %144 ], [ %83, %82 ]
  %158 = add nsw i32 %87, %19
  %159 = icmp slt i32 %158, %34
  br i1 %159, label %82, label %160

160:                                              ; preds = %153, %62
  %161 = phi i32 [ 0, %62 ], [ %154, %153 ]
  %162 = phi i8* [ %66, %62 ], [ %155, %153 ]
  %163 = phi i8* [ %65, %62 ], [ %156, %153 ]
  %164 = phi i8* [ %64, %62 ], [ %157, %153 ]
  %165 = shl i32 %161, %17
  %166 = sub nsw i32 %59, %165
  %167 = sext i32 %166 to i64
  %168 = getelementptr inbounds i8, i8* %162, i64 %167
  %169 = shl i32 %161, %18
  %170 = sub nsw i32 %60, %169
  %171 = sext i32 %170 to i64
  %172 = getelementptr inbounds i8, i8* %163, i64 %171
  %173 = getelementptr inbounds i8, i8* %164, i64 %171
  %174 = add nsw i32 %63, %19
  %175 = icmp slt i32 %174, %28
  br i1 %175, label %62, label %69

176:                                              ; preds = %70, %261
  %177 = phi i32 [ %2, %70 ], [ %262, %261 ]
  br i1 %71, label %178, label %261

178:                                              ; preds = %176
  %179 = icmp eq i32 %177, %2
  %180 = icmp eq i32 %177, %73
  %181 = or i1 %179, %180
  br label %182

182:                                              ; preds = %178, %258
  %183 = phi i64 [ %79, %178 ], [ %259, %258 ]
  %184 = load i32, i32* %30, align 8
  %185 = mul nsw i32 %184, %177
  %186 = trunc i64 %183 to i32
  %187 = add nsw i32 %185, %186
  br i1 %179, label %188, label %192

188:                                              ; preds = %182
  %189 = icmp eq i64 %183, %79
  %190 = icmp eq i64 %183, %81
  %191 = or i1 %189, %190
  br i1 %191, label %258, label %192

192:                                              ; preds = %188, %182
  br i1 %180, label %193, label %197

193:                                              ; preds = %192
  %194 = icmp eq i64 %183, %79
  %195 = icmp eq i64 %183, %81
  %196 = or i1 %194, %195
  br i1 %196, label %258, label %197

197:                                              ; preds = %193, %192
  %198 = icmp eq i64 %183, %79
  %199 = or i1 %181, %198
  %200 = icmp eq i64 %183, %81
  %201 = or i1 %200, %199
  %202 = select i1 %201, i32 5, i32 8
  br i1 %75, label %237, label %203

203:                                              ; preds = %197, %234
  %204 = phi i32 [ %235, %234 ], [ %74, %197 ]
  %205 = phi i32 [ %231, %234 ], [ 0, %197 ]
  %206 = add nsw i32 %204, %177
  %207 = icmp sge i32 %206, %2
  %208 = icmp slt i32 %206, %28
  %209 = and i1 %207, %208
  %210 = mul nsw i32 %206, %184
  br label %211

211:                                              ; preds = %203, %230
  %212 = phi i64 [ %77, %203 ], [ %232, %230 ]
  %213 = phi i32 [ %205, %203 ], [ %231, %230 ]
  br i1 %209, label %214, label %230

214:                                              ; preds = %211
  %215 = add nsw i64 %212, %183
  %216 = icmp sge i64 %215, %79
  %217 = icmp slt i64 %215, %80
  %218 = and i1 %216, %217
  br i1 %218, label %219, label %230

219:                                              ; preds = %214
  %220 = trunc i64 %212 to i32
  %221 = add i32 %220, %186
  %222 = add i32 %221, %210
  %223 = load i8*, i8** %76, align 16
  %224 = sext i32 %222 to i64
  %225 = getelementptr inbounds i8, i8* %223, i64 %224
  %226 = load i8, i8* %225, align 1
  %227 = icmp ne i8 %226, 0
  %228 = zext i1 %227 to i32
  %229 = add nsw i32 %213, %228
  br label %230

230:                                              ; preds = %214, %211, %219
  %231 = phi i32 [ %229, %219 ], [ %213, %214 ], [ %213, %211 ]
  %232 = add i64 %212, %78
  %233 = icmp sgt i64 %212, 0
  br i1 %233, label %234, label %211

234:                                              ; preds = %230
  %235 = add nsw i32 %204, %19
  %236 = icmp sgt i32 %204, 0
  br i1 %236, label %237, label %203

237:                                              ; preds = %234, %197
  %238 = phi i32 [ 0, %197 ], [ %231, %234 ]
  %239 = load i8*, i8** %76, align 16
  %240 = sext i32 %187 to i64
  %241 = getelementptr inbounds i8, i8* %239, i64 %240
  %242 = load i8, i8* %241, align 1
  %243 = icmp ne i8 %242, 0
  %244 = icmp slt i32 %238, 2
  %245 = and i1 %244, %243
  br i1 %245, label %246, label %250

246:                                              ; preds = %237
  store i8 0, i8* %241, align 1
  %247 = load i8*, i8** %76, align 16
  %248 = getelementptr inbounds i8, i8* %247, i64 %240
  %249 = load i8, i8* %248, align 1
  br label %250

250:                                              ; preds = %246, %237
  %251 = phi i8 [ %249, %246 ], [ %242, %237 ]
  %252 = phi i8* [ %247, %246 ], [ %239, %237 ]
  %253 = icmp eq i8 %251, 0
  %254 = icmp eq i32 %238, %202
  %255 = and i1 %254, %253
  br i1 %255, label %256, label %258

256:                                              ; preds = %250
  %257 = getelementptr inbounds i8, i8* %252, i64 %240
  store i8 1, i8* %257, align 1
  br label %258

258:                                              ; preds = %256, %250, %188, %193
  %259 = add i64 %183, %78
  %260 = icmp slt i64 %259, %80
  br i1 %260, label %182, label %261

261:                                              ; preds = %258, %176
  %262 = add nsw i32 %177, %19
  %263 = icmp slt i32 %262, %28
  br i1 %263, label %176, label %264

264:                                              ; preds = %261, %4, %69
  ret void
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
