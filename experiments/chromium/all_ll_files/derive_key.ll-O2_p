; ModuleID = '../../third_party/boringssl/src/crypto/cipher_extra/derive_key.c'
source_filename = "../../third_party/boringssl/src/crypto/cipher_extra/derive_key.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.evp_cipher_st = type { i32, i32, i32, i32, i32, i32, i8*, i32 (%struct.evp_cipher_ctx_st*, i8*, i8*, i32)*, i32 (%struct.evp_cipher_ctx_st*, i8*, i8*, i64)*, void (%struct.evp_cipher_ctx_st*)*, i32 (%struct.evp_cipher_ctx_st*, i32, i32, i8*)* }
%struct.evp_cipher_ctx_st = type { %struct.evp_cipher_st*, i8*, i8*, i32, i32, i32, [16 x i8], [16 x i8], [32 x i8], i32, i32, i32, [32 x i8] }
%struct.env_md_st = type opaque
%struct.env_md_ctx_st = type { %struct.env_md_st*, i8*, %struct.evp_pkey_ctx_st*, %struct.evp_md_pctx_ops* }
%struct.evp_pkey_ctx_st = type opaque
%struct.evp_md_pctx_ops = type opaque
%struct.engine_st = type opaque

; Function Attrs: nounwind ssp uwtable
define hidden i32 @EVP_BytesToKey(%struct.evp_cipher_st* nocapture readonly, %struct.env_md_st*, i8*, i8*, i64, i32, i8*, i8*) local_unnamed_addr #0 {
  %9 = alloca %struct.env_md_ctx_st, align 8
  %10 = alloca [64 x i8], align 16
  %11 = alloca i32, align 4
  %12 = bitcast %struct.env_md_ctx_st* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %12) #3
  %13 = getelementptr inbounds [64 x i8], [64 x i8]* %10, i64 0, i64 0
  %14 = bitcast %struct.env_md_ctx_st* %9 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %14, i8 -86, i64 32, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %13) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %13, i8 -86, i64 64, i1 false)
  %15 = bitcast i32* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %15) #3
  store i32 0, i32* %11, align 4
  %16 = getelementptr inbounds %struct.evp_cipher_st, %struct.evp_cipher_st* %0, i64 0, i32 2
  %17 = load i32, i32* %16, align 8
  %18 = icmp eq i8* %3, null
  br i1 %18, label %126, label %19

19:                                               ; preds = %8
  %20 = getelementptr inbounds %struct.evp_cipher_st, %struct.evp_cipher_st* %0, i64 0, i32 3
  %21 = load i32, i32* %20, align 4
  call void @EVP_MD_CTX_init(%struct.env_md_ctx_st* nonnull %9) #3
  %22 = icmp eq i8* %2, null
  %23 = icmp ugt i32 %5, 1
  br label %24

24:                                               ; preds = %116, %19
  %25 = phi i8* [ %6, %19 ], [ %91, %116 ]
  %26 = phi i8* [ %7, %19 ], [ %117, %116 ]
  %27 = phi i32 [ %21, %19 ], [ %118, %116 ]
  %28 = phi i32 [ %17, %19 ], [ %92, %116 ]
  %29 = phi i32 [ 0, %19 ], [ %33, %116 ]
  %30 = call i32 @EVP_DigestInit_ex(%struct.env_md_ctx_st* nonnull %9, %struct.env_md_st* %1, %struct.engine_st* null) #3
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %123, label %32

32:                                               ; preds = %24
  %33 = add i32 %29, 1
  %34 = icmp eq i32 %29, 0
  br i1 %34, label %40, label %35

35:                                               ; preds = %32
  %36 = load i32, i32* %11, align 4
  %37 = zext i32 %36 to i64
  %38 = call i32 @EVP_DigestUpdate(%struct.env_md_ctx_st* nonnull %9, i8* nonnull %13, i64 %37) #3
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %123, label %40

40:                                               ; preds = %35, %32
  %41 = call i32 @EVP_DigestUpdate(%struct.env_md_ctx_st* nonnull %9, i8* nonnull %3, i64 %4) #3
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %123, label %43

43:                                               ; preds = %40
  br i1 %22, label %47, label %44

44:                                               ; preds = %43
  %45 = call i32 @EVP_DigestUpdate(%struct.env_md_ctx_st* nonnull %9, i8* nonnull %2, i64 8) #3
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %123, label %47

47:                                               ; preds = %44, %43
  %48 = call i32 @EVP_DigestFinal_ex(%struct.env_md_ctx_st* nonnull %9, i8* nonnull %13, i32* nonnull %11) #3
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %123, label %50

50:                                               ; preds = %47
  br i1 %23, label %53, label %66

51:                                               ; preds = %62
  %52 = icmp eq i32 %65, %5
  br i1 %52, label %66, label %53

53:                                               ; preds = %50, %51
  %54 = phi i32 [ %65, %51 ], [ 1, %50 ]
  %55 = call i32 @EVP_DigestInit_ex(%struct.env_md_ctx_st* nonnull %9, %struct.env_md_st* %1, %struct.engine_st* null) #3
  %56 = icmp eq i32 %55, 0
  br i1 %56, label %123, label %57

57:                                               ; preds = %53
  %58 = load i32, i32* %11, align 4
  %59 = zext i32 %58 to i64
  %60 = call i32 @EVP_DigestUpdate(%struct.env_md_ctx_st* nonnull %9, i8* nonnull %13, i64 %59) #3
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %123, label %62

62:                                               ; preds = %57
  %63 = call i32 @EVP_DigestFinal_ex(%struct.env_md_ctx_st* nonnull %9, i8* nonnull %13, i32* nonnull %11) #3
  %64 = icmp eq i32 %63, 0
  %65 = add nuw i32 %54, 1
  br i1 %64, label %123, label %51

66:                                               ; preds = %51, %50
  %67 = icmp eq i32 %28, 0
  br i1 %67, label %90, label %68

68:                                               ; preds = %66, %82
  %69 = phi i64 [ %85, %82 ], [ 0, %66 ]
  %70 = phi i32 [ %86, %82 ], [ 0, %66 ]
  %71 = phi i32 [ %84, %82 ], [ %28, %66 ]
  %72 = phi i8* [ %83, %82 ], [ %25, %66 ]
  %73 = load i32, i32* %11, align 4
  %74 = zext i32 %73 to i64
  %75 = icmp eq i64 %69, %74
  br i1 %75, label %88, label %76

76:                                               ; preds = %68
  %77 = icmp eq i8* %72, null
  br i1 %77, label %82, label %78

78:                                               ; preds = %76
  %79 = getelementptr inbounds [64 x i8], [64 x i8]* %10, i64 0, i64 %69
  %80 = load i8, i8* %79, align 1
  %81 = getelementptr inbounds i8, i8* %72, i64 1
  store i8 %80, i8* %72, align 1
  br label %82

82:                                               ; preds = %76, %78
  %83 = phi i8* [ %81, %78 ], [ null, %76 ]
  %84 = add i32 %71, -1
  %85 = add nuw nsw i64 %69, 1
  %86 = add nuw i32 %70, 1
  %87 = icmp eq i32 %84, 0
  br i1 %87, label %90, label %68

88:                                               ; preds = %68
  %89 = trunc i64 %69 to i32
  br label %90

90:                                               ; preds = %82, %88, %66
  %91 = phi i8* [ %25, %66 ], [ %72, %88 ], [ %83, %82 ]
  %92 = phi i32 [ 0, %66 ], [ %71, %88 ], [ 0, %82 ]
  %93 = phi i32 [ 0, %66 ], [ %89, %88 ], [ %86, %82 ]
  %94 = icmp eq i32 %27, 0
  br i1 %94, label %116, label %95

95:                                               ; preds = %90
  %96 = load i32, i32* %11, align 4
  %97 = icmp eq i32 %93, %96
  br i1 %97, label %116, label %98

98:                                               ; preds = %95, %112
  %99 = phi i8* [ %109, %112 ], [ %26, %95 ]
  %100 = phi i32 [ %110, %112 ], [ %27, %95 ]
  %101 = phi i32 [ %113, %112 ], [ %93, %95 ]
  %102 = icmp eq i8* %99, null
  br i1 %102, label %108, label %103

103:                                              ; preds = %98
  %104 = zext i32 %101 to i64
  %105 = getelementptr inbounds [64 x i8], [64 x i8]* %10, i64 0, i64 %104
  %106 = load i8, i8* %105, align 1
  %107 = getelementptr inbounds i8, i8* %99, i64 1
  store i8 %106, i8* %99, align 1
  br label %108

108:                                              ; preds = %98, %103
  %109 = phi i8* [ %107, %103 ], [ null, %98 ]
  %110 = add i32 %100, -1
  %111 = icmp eq i32 %110, 0
  br i1 %111, label %116, label %112

112:                                              ; preds = %108
  %113 = add i32 %101, 1
  %114 = load i32, i32* %11, align 4
  %115 = icmp eq i32 %113, %114
  br i1 %115, label %116, label %98

116:                                              ; preds = %112, %108, %95, %90
  %117 = phi i8* [ %26, %95 ], [ %26, %90 ], [ %109, %108 ], [ %109, %112 ]
  %118 = phi i32 [ %27, %95 ], [ 0, %90 ], [ %110, %112 ], [ 0, %108 ]
  %119 = or i32 %118, %92
  %120 = icmp eq i32 %119, 0
  br i1 %120, label %121, label %24

121:                                              ; preds = %116
  %122 = load i32, i32* %16, align 8
  br label %123

123:                                              ; preds = %35, %44, %47, %40, %24, %62, %57, %53, %121
  %124 = phi i32 [ %122, %121 ], [ 0, %53 ], [ 0, %57 ], [ 0, %62 ], [ 0, %24 ], [ 0, %40 ], [ 0, %47 ], [ 0, %44 ], [ 0, %35 ]
  %125 = call i32 @EVP_MD_CTX_cleanup(%struct.env_md_ctx_st* nonnull %9) #3
  call void @OPENSSL_cleanse(i8* nonnull %13, i64 64) #3
  br label %126

126:                                              ; preds = %8, %123
  %127 = phi i32 [ %124, %123 ], [ %17, %8 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %15) #3
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %13) #3
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %12) #3
  ret i32 %127
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @EVP_MD_CTX_init(%struct.env_md_ctx_st*) local_unnamed_addr #2

declare i32 @EVP_DigestInit_ex(%struct.env_md_ctx_st*, %struct.env_md_st*, %struct.engine_st*) local_unnamed_addr #2

declare i32 @EVP_DigestUpdate(%struct.env_md_ctx_st*, i8*, i64) local_unnamed_addr #2

declare i32 @EVP_DigestFinal_ex(%struct.env_md_ctx_st*, i8*, i32*) local_unnamed_addr #2

declare i32 @EVP_MD_CTX_cleanup(%struct.env_md_ctx_st*) local_unnamed_addr #2

declare void @OPENSSL_cleanse(i8*, i64) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
