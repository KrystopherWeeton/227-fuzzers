; ModuleID = '../../courgette/rel32_finder_x86.cc'
source_filename = "../../courgette/rel32_finder_x86.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.courgette::Rel32FinderX86" = type { %"class.courgette::Rel32Finder" }
%"class.courgette::Rel32Finder" = type { i32 (...)**, i32, i32, %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i32*, i32*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i32* }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZN9courgette11Rel32FinderD2Ev = comdat any

$_ZN9courgette14Rel32FinderX86D0Ev = comdat any

$_ZN9courgette11Rel32FinderD0Ev = comdat any

$_ZTVN9courgette11Rel32FinderE = comdat any

@_ZTVN9courgette14Rel32FinderX86E = hidden unnamed_addr constant { [5 x i8*] } { [5 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.courgette::Rel32Finder"*)* @_ZN9courgette11Rel32FinderD2Ev to i8*), i8* bitcast (void (%"class.courgette::Rel32FinderX86"*)* @_ZN9courgette14Rel32FinderX86D0Ev to i8*), i8* bitcast (void (%"class.courgette::Rel32FinderX86"*, i8*, i8*, i32, i32, %"class.std::__1::vector"*)* @_ZN9courgette14Rel32FinderX864FindEPKhS2_jjRKNSt3__16vectorIjNS3_9allocatorIjEEEE to i8*)] }, align 8
@_ZTVN9courgette11Rel32FinderE = linkonce_odr hidden unnamed_addr constant { [5 x i8*] } { [5 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.courgette::Rel32Finder"*)* @_ZN9courgette11Rel32FinderD2Ev to i8*), i8* bitcast (void (%"class.courgette::Rel32Finder"*)* @_ZN9courgette11Rel32FinderD0Ev to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*)] }, comdat, align 8

@_ZN9courgette14Rel32FinderX86C1Ejj = hidden unnamed_addr alias void (%"class.courgette::Rel32FinderX86"*, i32, i32), void (%"class.courgette::Rel32FinderX86"*, i32, i32)* @_ZN9courgette14Rel32FinderX86C2Ejj

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN9courgette14Rel32FinderX86C2Ejj(%"class.courgette::Rel32FinderX86"*, i32, i32) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.courgette::Rel32FinderX86", %"class.courgette::Rel32FinderX86"* %0, i64 0, i32 0
  tail call void @_ZN9courgette11Rel32FinderC2Ejj(%"class.courgette::Rel32Finder"* %4, i32 %1, i32 %2) #8
  %5 = getelementptr inbounds %"class.courgette::Rel32FinderX86", %"class.courgette::Rel32FinderX86"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN9courgette14Rel32FinderX86E, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  ret void
}

declare void @_ZN9courgette11Rel32FinderC2Ejj(%"class.courgette::Rel32Finder"*, i32, i32) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN9courgette14Rel32FinderX864FindEPKhS2_jjRKNSt3__16vectorIjNS3_9allocatorIjEEEE(%"class.courgette::Rel32FinderX86"*, i8*, i8* readnone, i32, i32, %"class.std::__1::vector"* nocapture readonly dereferenceable(24)) unnamed_addr #0 align 2 {
  %7 = icmp ult i8* %1, %2
  br i1 %7, label %8, label %170

8:                                                ; preds = %6
  %9 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %5, i64 0, i32 0, i32 0
  %10 = load i32*, i32** %9, align 8
  %11 = zext i32 %3 to i64
  %12 = sub nsw i64 0, %11
  %13 = getelementptr inbounds i8, i8* %1, i64 %12
  %14 = ptrtoint i8* %13 to i64
  %15 = getelementptr inbounds %"class.courgette::Rel32FinderX86", %"class.courgette::Rel32FinderX86"* %0, i64 0, i32 0, i32 1
  %16 = getelementptr inbounds %"class.courgette::Rel32FinderX86", %"class.courgette::Rel32FinderX86"* %0, i64 0, i32 0, i32 2
  %17 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %5, i64 0, i32 0, i32 1
  %18 = getelementptr inbounds %"class.courgette::Rel32FinderX86", %"class.courgette::Rel32FinderX86"* %0, i64 0, i32 0, i32 3
  %19 = getelementptr inbounds %"class.courgette::Rel32FinderX86", %"class.courgette::Rel32FinderX86"* %0, i64 0, i32 0, i32 3, i32 0, i32 1
  %20 = getelementptr inbounds %"class.courgette::Rel32FinderX86", %"class.courgette::Rel32FinderX86"* %0, i64 0, i32 0, i32 3, i32 0, i32 2, i32 0, i32 0
  %21 = bitcast i32** %19 to i64*
  %22 = bitcast %"class.std::__1::vector"* %18 to i64*
  %23 = bitcast i32** %20 to i64*
  %24 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %18, i64 0, i32 0, i32 0
  br label %25

25:                                               ; preds = %8, %166
  %26 = phi i8* [ %1, %8 ], [ %168, %166 ]
  %27 = phi i32* [ %10, %8 ], [ %167, %166 ]
  %28 = ptrtoint i8* %26 to i64
  %29 = sub i64 %28, %14
  %30 = trunc i64 %29 to i32
  %31 = load i32, i32* %15, align 8
  %32 = icmp ugt i32 %31, %30
  br i1 %32, label %40, label %33

33:                                               ; preds = %25
  %34 = load i32, i32* %16, align 4
  %35 = icmp ugt i32 %34, %30
  br i1 %35, label %36, label %40

36:                                               ; preds = %33
  %37 = sub i32 %34, %30
  %38 = zext i32 %37 to i64
  %39 = getelementptr inbounds i8, i8* %26, i64 %38
  br label %166

40:                                               ; preds = %25, %33
  %41 = getelementptr inbounds i8, i8* %26, i64 5
  %42 = icmp ugt i8* %41, %2
  br i1 %42, label %49, label %43

43:                                               ; preds = %40
  %44 = load i8, i8* %26, align 1
  %45 = and i8 %44, -2
  %46 = icmp eq i8 %45, -24
  %47 = getelementptr inbounds i8, i8* %26, i64 1
  %48 = select i1 %46, i8* %47, i8* null
  br label %49

49:                                               ; preds = %43, %40
  %50 = phi i8* [ null, %40 ], [ %48, %43 ]
  %51 = getelementptr inbounds i8, i8* %26, i64 6
  %52 = icmp ugt i8* %51, %2
  br i1 %52, label %66, label %53

53:                                               ; preds = %49
  %54 = load i8, i8* %26, align 1
  %55 = icmp eq i8 %54, 15
  br i1 %55, label %56, label %66

56:                                               ; preds = %53
  %57 = getelementptr inbounds i8, i8* %26, i64 1
  %58 = load i8, i8* %57, align 1
  %59 = and i8 %58, -16
  %60 = icmp ne i8 %59, -128
  %61 = and i8 %58, -2
  %62 = icmp eq i8 %61, -118
  %63 = or i1 %60, %62
  %64 = getelementptr inbounds i8, i8* %26, i64 2
  %65 = select i1 %63, i8* %50, i8* %64
  br label %66

66:                                               ; preds = %56, %49, %53
  %67 = phi i8* [ %50, %53 ], [ %50, %49 ], [ %65, %56 ]
  %68 = icmp eq i8* %67, null
  br i1 %68, label %163, label %69

69:                                               ; preds = %66
  %70 = ptrtoint i8* %67 to i64
  %71 = sub i64 %70, %14
  %72 = trunc i64 %71 to i32
  %73 = load i32*, i32** %17, align 8
  %74 = icmp eq i32* %27, %73
  br i1 %74, label %92, label %75

75:                                               ; preds = %69
  %76 = add i32 %72, -3
  br label %77

77:                                               ; preds = %75, %81
  %78 = phi i32* [ %27, %75 ], [ %82, %81 ]
  %79 = load i32, i32* %78, align 4
  %80 = icmp ult i32 %79, %76
  br i1 %80, label %81, label %84

81:                                               ; preds = %77
  %82 = getelementptr inbounds i32, i32* %78, i64 1
  %83 = icmp eq i32* %82, %73
  br i1 %83, label %92, label %77

84:                                               ; preds = %77
  %85 = add i32 %72, 4
  %86 = icmp ult i32 %79, %85
  br i1 %86, label %87, label %92

87:                                               ; preds = %84
  %88 = sub i32 4, %30
  %89 = add i32 %88, %79
  %90 = zext i32 %89 to i64
  %91 = getelementptr inbounds i8, i8* %26, i64 %90
  br label %166

92:                                               ; preds = %81, %69, %84
  %93 = phi i32* [ %78, %84 ], [ %27, %69 ], [ %73, %81 ]
  %94 = add i32 %72, 4
  %95 = bitcast i8* %67 to i32*
  %96 = load i32, i32* %95, align 4
  %97 = add i32 %94, %96
  %98 = icmp uge i32 %97, %3
  %99 = icmp ult i32 %97, %4
  %100 = and i1 %98, %99
  br i1 %100, label %101, label %163

101:                                              ; preds = %92
  %102 = load i32*, i32** %19, align 8
  %103 = load i32*, i32** %20, align 8
  %104 = icmp eq i32* %102, %103
  %105 = ptrtoint i32* %103 to i64
  br i1 %104, label %109, label %106

106:                                              ; preds = %101
  store i32 %72, i32* %102, align 4
  %107 = getelementptr inbounds i32, i32* %102, i64 1
  %108 = ptrtoint i32* %107 to i64
  store i64 %108, i64* %21, align 8
  br label %161

109:                                              ; preds = %101
  %110 = ptrtoint i32* %102 to i64
  %111 = load i64, i64* %22, align 8
  %112 = sub i64 %110, %111
  %113 = ashr exact i64 %112, 2
  %114 = add nsw i64 %113, 1
  %115 = icmp ugt i64 %114, 4611686018427387903
  br i1 %115, label %116, label %118

116:                                              ; preds = %109
  %117 = bitcast %"class.std::__1::vector"* %18 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %117) #9
  unreachable

118:                                              ; preds = %109
  %119 = sub i64 %105, %111
  %120 = ashr exact i64 %119, 2
  %121 = icmp ult i64 %120, 2305843009213693951
  br i1 %121, label %122, label %130

122:                                              ; preds = %118
  %123 = ashr exact i64 %119, 1
  %124 = icmp ult i64 %123, %114
  %125 = select i1 %124, i64 %114, i64 %123
  %126 = icmp eq i64 %125, 0
  br i1 %126, label %135, label %127

127:                                              ; preds = %122
  %128 = icmp ugt i64 %125, 4611686018427387903
  br i1 %128, label %129, label %130

129:                                              ; preds = %127
  tail call void @abort() #9
  unreachable

130:                                              ; preds = %127, %118
  %131 = phi i64 [ %125, %127 ], [ 4611686018427387903, %118 ]
  %132 = shl i64 %131, 2
  %133 = tail call i8* @_Znwm(i64 %132) #10
  %134 = bitcast i8* %133 to i32*
  br label %135

135:                                              ; preds = %130, %122
  %136 = phi i64 [ %131, %130 ], [ 0, %122 ]
  %137 = phi i32* [ %134, %130 ], [ null, %122 ]
  %138 = getelementptr inbounds i32, i32* %137, i64 %113
  %139 = getelementptr inbounds i32, i32* %137, i64 %136
  %140 = ptrtoint i32* %139 to i64
  store i32 %72, i32* %138, align 4
  %141 = getelementptr inbounds i32, i32* %138, i64 1
  %142 = ptrtoint i32* %141 to i64
  %143 = load i32*, i32** %24, align 8
  %144 = load i64, i64* %21, align 8
  %145 = ptrtoint i32* %143 to i64
  %146 = sub i64 %144, %145
  %147 = ashr exact i64 %146, 2
  %148 = sub nsw i64 0, %147
  %149 = getelementptr inbounds i32, i32* %138, i64 %148
  %150 = ptrtoint i32* %149 to i64
  %151 = icmp sgt i64 %146, 0
  br i1 %151, label %152, label %156

152:                                              ; preds = %135
  %153 = bitcast i32* %149 to i8*
  %154 = bitcast i32* %143 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %153, i8* align 4 %154, i64 %146, i1 false) #8
  %155 = load i32*, i32** %24, align 8
  br label %156

156:                                              ; preds = %152, %135
  %157 = phi i32* [ %143, %135 ], [ %155, %152 ]
  store i64 %150, i64* %22, align 8
  store i64 %142, i64* %21, align 8
  store i64 %140, i64* %23, align 8
  %158 = icmp eq i32* %157, null
  br i1 %158, label %161, label %159

159:                                              ; preds = %156
  %160 = bitcast i32* %157 to i8*
  tail call void @_ZdlPv(i8* %160) #10
  br label %161

161:                                              ; preds = %106, %156, %159
  %162 = getelementptr inbounds i8, i8* %67, i64 4
  br label %166

163:                                              ; preds = %92, %66
  %164 = phi i32* [ %27, %66 ], [ %93, %92 ]
  %165 = getelementptr inbounds i8, i8* %26, i64 1
  br label %166

166:                                              ; preds = %161, %87, %163, %36
  %167 = phi i32* [ %164, %163 ], [ %27, %36 ], [ %78, %87 ], [ %93, %161 ]
  %168 = phi i8* [ %165, %163 ], [ %39, %36 ], [ %91, %87 ], [ %162, %161 ]
  %169 = icmp ult i8* %168, %2
  br i1 %169, label %25, label %170

170:                                              ; preds = %166, %6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN9courgette11Rel32FinderD2Ev(%"class.courgette::Rel32Finder"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.courgette::Rel32Finder", %"class.courgette::Rel32Finder"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN9courgette11Rel32FinderE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.courgette::Rel32Finder", %"class.courgette::Rel32Finder"* %0, i64 0, i32 3, i32 0, i32 0
  %4 = load i32*, i32** %3, align 8
  %5 = icmp eq i32* %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %1
  %7 = ptrtoint i32* %4 to i64
  %8 = getelementptr inbounds %"class.courgette::Rel32Finder", %"class.courgette::Rel32Finder"* %0, i64 0, i32 3, i32 0, i32 1
  %9 = bitcast i32** %8 to i64*
  store i64 %7, i64* %9, align 8
  %10 = bitcast i32* %4 to i8*
  tail call void @_ZdlPv(i8* %10) #10
  br label %11

11:                                               ; preds = %1, %6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN9courgette14Rel32FinderX86D0Ev(%"class.courgette::Rel32FinderX86"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.courgette::Rel32FinderX86", %"class.courgette::Rel32FinderX86"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN9courgette11Rel32FinderE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.courgette::Rel32FinderX86", %"class.courgette::Rel32FinderX86"* %0, i64 0, i32 0, i32 3, i32 0, i32 0
  %4 = load i32*, i32** %3, align 8
  %5 = icmp eq i32* %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %1
  %7 = ptrtoint i32* %4 to i64
  %8 = getelementptr inbounds %"class.courgette::Rel32FinderX86", %"class.courgette::Rel32FinderX86"* %0, i64 0, i32 0, i32 3, i32 0, i32 1
  %9 = bitcast i32** %8 to i64*
  store i64 %7, i64* %9, align 8
  %10 = bitcast i32* %4 to i8*
  tail call void @_ZdlPv(i8* %10) #10
  br label %11

11:                                               ; preds = %1, %6
  %12 = bitcast %"class.courgette::Rel32FinderX86"* %0 to i8*
  tail call void @_ZdlPv(i8* %12) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN9courgette11Rel32FinderD0Ev(%"class.courgette::Rel32Finder"*) unnamed_addr #0 comdat align 2 {
  tail call void @llvm.trap() #9
  unreachable
}

declare void @__cxa_pure_virtual() unnamed_addr

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #2

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #3

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #4

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #5

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #6

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #7

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { cold noreturn nounwind }
attributes #4 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { argmemonly nounwind }
attributes #8 = { nounwind }
attributes #9 = { noreturn nounwind }
attributes #10 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
