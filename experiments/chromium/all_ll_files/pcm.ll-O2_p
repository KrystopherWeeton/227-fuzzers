; ModuleID = '../../third_party/ffmpeg/libavcodec/pcm.c'
source_filename = "../../third_party/ffmpeg/libavcodec/pcm.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.AVCodec = type { i8*, i8*, i32, i32, i32, %struct.AVRational*, i32*, i32*, i32*, i64*, i8, %struct.AVClass*, %struct.AVProfile*, i8*, i32, %struct.AVCodec*, i32 (%struct.AVCodecContext*, %struct.AVCodecContext*)*, %struct.AVCodecDefault*, void (%struct.AVCodec*)*, i32 (%struct.AVCodecContext*)*, i32 (%struct.AVCodecContext*, i8*, i32, %struct.AVSubtitle*)*, i32 (%struct.AVCodecContext*, %struct.AVPacket*, %struct.AVFrame*, i32*)*, i32 (%struct.AVCodecContext*, i8*, i32*, %struct.AVPacket*)*, i32 (%struct.AVCodecContext*)*, i32 (%struct.AVCodecContext*, %struct.AVPacket*)*, i32 (%struct.AVCodecContext*, %struct.AVFrame*)*, void (%struct.AVCodecContext*)*, i32, i8*, %struct.AVCodecHWConfigInternal**, i32* }
%struct.AVRational = type { i32, i32 }
%struct.AVClass = type { i8*, i8* (i8*)*, %struct.AVOption*, i32, i32, i32, i8* (i8*, i8*)*, %struct.AVClass* (%struct.AVClass*)*, i32, i32 (i8*)*, i32 (%struct.AVOptionRanges**, i8*, i8*, i32)*, %struct.AVClass* (i8**)* }
%struct.AVOption = type opaque
%struct.AVOptionRanges = type opaque
%struct.AVProfile = type { i32, i8* }
%struct.AVCodecContext = type { %struct.AVClass*, i32, i32, %struct.AVCodec*, i32, i32, i8*, %struct.AVCodecInternal*, i8*, i64, i32, i32, i32, i32, i32, i8*, i32, %struct.AVRational, i32, i32, i32, i32, i32, i32, i32, i32, void (%struct.AVCodecContext*, %struct.AVFrame*, i32*, i32, i32, i32)*, i32 (%struct.AVCodecContext*, i32*)*, i32, float, i32, float, i32, i32, float, float, float, float, float, float, float, i32, i32, i32*, %struct.AVRational, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16*, i16*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, i32, i32, i32 (%struct.AVCodecContext*, %struct.AVFrame*, i32)*, i32, float, float, i32, i32, i32, i32, i32, %struct.RcOverride*, i64, i64, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, void (%struct.AVCodecContext*, i8*, i32, i32)*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i32, i32, i32, i32, i32, i64, %struct.AVHWAccel*, i8*, [8 x i64], i32, i32, i32, i32, i32, %struct.AVFrame*, i32, i32, i32, i32, i32 (%struct.AVCodecContext*, i32 (%struct.AVCodecContext*, i8*)*, i8*, i32*, i32, i32)*, i32 (%struct.AVCodecContext*, i32 (%struct.AVCodecContext*, i8*, i32, i32)*, i8*, i32*, i32)*, i32, i32, i32, i32, i32, i32, i8*, i32, i64, i32, i32, %struct.AVRational, i32, %struct.AVRational, %struct.AVCodecDescriptor*, i64, i64, i64, i64, i8*, i32, i32, i32, i32, i16*, i8*, i8*, i32, %struct.AVPacketSideData*, i32, %struct.AVBufferRef*, i32, i32, i64, %struct.AVBufferRef*, i32, i32, i32, i32, i64, i32 }
%struct.AVCodecInternal = type { i32, i32, %struct.AVFrame*, %struct.AVBufferRef*, i8*, %struct.DecodeSimpleContext, %struct.AVBSFContext*, %struct.AVPacket*, %struct.AVFifoBuffer*, i8*, i32, i8*, %struct.EncodeSimpleContext, i32, i8*, i32, %struct.AVPacket*, %struct.AVFrame*, i32, i32, i64, i64, %struct.AVFrame*, %struct.AVPacket*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64 }
%struct.DecodeSimpleContext = type { %struct.AVPacket* }
%struct.AVBSFContext = type { %struct.AVClass*, %struct.AVBitStreamFilter*, %struct.AVBSFInternal*, i8*, %struct.AVCodecParameters*, %struct.AVCodecParameters*, %struct.AVRational, %struct.AVRational }
%struct.AVBitStreamFilter = type { i8*, i32*, %struct.AVClass*, i32, i32 (%struct.AVBSFContext*)*, i32 (%struct.AVBSFContext*, %struct.AVPacket*)*, void (%struct.AVBSFContext*)*, void (%struct.AVBSFContext*)* }
%struct.AVBSFInternal = type opaque
%struct.AVCodecParameters = type { i32, i32, i32, i8*, i32, i32, i64, i32, i32, i32, i32, i32, i32, %struct.AVRational, i32, i32, i32, i32, i32, i32, i32, i64, i32, i32, i32, i32, i32, i32, i32 }
%struct.AVFifoBuffer = type { i8*, i8*, i8*, i8*, i32, i32 }
%struct.EncodeSimpleContext = type { %struct.AVFrame* }
%struct.AVPacket = type { %struct.AVBufferRef*, i64, i64, i8*, i32, i32, i32, %struct.AVPacketSideData*, i32, i64, i64, i64 }
%struct.RcOverride = type { i32, i32, i32, float }
%struct.AVHWAccel = type { i8*, i32, i32, i32, i32, i32 (%struct.AVCodecContext*, %struct.AVFrame*)*, i32 (%struct.AVCodecContext*, i8*, i32)*, i32 (%struct.AVCodecContext*, i32, i8*, i32)*, i32 (%struct.AVCodecContext*, i8*, i32)*, i32 (%struct.AVCodecContext*)*, i32, void (%struct.MpegEncContext*)*, i32 (%struct.AVCodecContext*)*, i32 (%struct.AVCodecContext*)*, i32, i32, i32 (%struct.AVCodecContext*, %struct.AVBufferRef*)* }
%struct.MpegEncContext = type opaque
%struct.AVFrame = type { [8 x i8*], [8 x i32], i8**, i32, i32, i32, i32, i32, i32, %struct.AVRational, i64, i64, i64, i32, i32, i32, i8*, [8 x i64], i32, i32, i32, i32, i64, i32, i64, [8 x %struct.AVBufferRef*], %struct.AVBufferRef**, i32, %struct.AVFrameSideData**, i32, i32, i32, i32, i32, i32, i32, i64, i64, i64, %struct.AVDictionary*, i32, i32, i32, i8*, i32, i32, %struct.AVBufferRef*, %struct.AVBufferRef*, %struct.AVBufferRef*, i64, i64, i64, i64, %struct.AVBufferRef* }
%struct.AVFrameSideData = type { i32, i8*, i32, %struct.AVDictionary*, %struct.AVBufferRef* }
%struct.AVDictionary = type opaque
%struct.AVCodecDescriptor = type { i32, i32, i8*, i8*, i32, i8**, %struct.AVProfile* }
%struct.AVPacketSideData = type { i8*, i32, i32 }
%struct.AVBufferRef = type { %struct.AVBuffer*, i8*, i32 }
%struct.AVBuffer = type opaque
%struct.AVCodecDefault = type { i8*, i8* }
%struct.AVSubtitle = type { i16, i32, i32, i32, %struct.AVSubtitleRect**, i64 }
%struct.AVSubtitleRect = type { i32, i32, i32, i32, i32, %struct.AVPicture, [4 x i8*], [4 x i32], i32, i8*, i8*, i32 }
%struct.AVPicture = type { [8 x i8*], [8 x i32] }
%struct.AVCodecHWConfigInternal = type opaque
%struct.PCMDecode = type { [256 x i16], void (float*, float*, float, i32)*, float }
%struct.AVFloatDSPContext = type { void (float*, float*, float*, i32)*, void (float*, float*, float, i32)*, void (double*, double*, double, i32)*, void (float*, float*, float, i32)*, void (double*, double*, double, i32)*, void (float*, float*, float*, float*, i32)*, void (float*, float*, float*, float*, i32)*, void (float*, float*, float*, i32)*, void (float*, float*, i32)*, float (float*, float*, i32)*, void (double*, double*, double*, i32)* }

@.str = private unnamed_addr constant [9 x i8] c"pcm_alaw\00", align 1
@.str.1 = private unnamed_addr constant [24 x i8] c"PCM A-law / G.711 A-law\00", align 1
@.compoundliteral = internal constant [2 x i32] [i32 1, i32 -1], align 4
@ff_pcm_alaw_decoder = hidden local_unnamed_addr global %struct.AVCodec { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.1, i32 0, i32 0), i32 1, i32 65543, i32 2, %struct.AVRational* null, i32* null, i32* null, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.compoundliteral, i32 0, i32 0), i64* null, i8 0, %struct.AVClass* null, %struct.AVProfile* null, i8* null, i32 528, %struct.AVCodec* null, i32 (%struct.AVCodecContext*, %struct.AVCodecContext*)* null, %struct.AVCodecDefault* null, void (%struct.AVCodec*)* null, i32 (%struct.AVCodecContext*)* @pcm_decode_init, i32 (%struct.AVCodecContext*, i8*, i32, %struct.AVSubtitle*)* null, i32 (%struct.AVCodecContext*, %struct.AVPacket*, %struct.AVFrame*, i32*)* null, i32 (%struct.AVCodecContext*, i8*, i32*, %struct.AVPacket*)* @pcm_decode_frame, i32 (%struct.AVCodecContext*)* null, i32 (%struct.AVCodecContext*, %struct.AVPacket*)* null, i32 (%struct.AVCodecContext*, %struct.AVFrame*)* null, void (%struct.AVCodecContext*)* null, i32 1, i8* null, %struct.AVCodecHWConfigInternal** null, i32* null }, align 8
@.str.2 = private unnamed_addr constant [10 x i8] c"pcm_f32le\00", align 1
@.str.3 = private unnamed_addr constant [40 x i8] c"PCM 32-bit floating point little-endian\00", align 1
@.compoundliteral.4 = internal constant [2 x i32] [i32 3, i32 -1], align 4
@ff_pcm_f32le_decoder = hidden local_unnamed_addr global %struct.AVCodec { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.3, i32 0, i32 0), i32 1, i32 65557, i32 2, %struct.AVRational* null, i32* null, i32* null, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.compoundliteral.4, i32 0, i32 0), i64* null, i8 0, %struct.AVClass* null, %struct.AVProfile* null, i8* null, i32 528, %struct.AVCodec* null, i32 (%struct.AVCodecContext*, %struct.AVCodecContext*)* null, %struct.AVCodecDefault* null, void (%struct.AVCodec*)* null, i32 (%struct.AVCodecContext*)* @pcm_decode_init, i32 (%struct.AVCodecContext*, i8*, i32, %struct.AVSubtitle*)* null, i32 (%struct.AVCodecContext*, %struct.AVPacket*, %struct.AVFrame*, i32*)* null, i32 (%struct.AVCodecContext*, i8*, i32*, %struct.AVPacket*)* @pcm_decode_frame, i32 (%struct.AVCodecContext*)* null, i32 (%struct.AVCodecContext*, %struct.AVPacket*)* null, i32 (%struct.AVCodecContext*, %struct.AVFrame*)* null, void (%struct.AVCodecContext*)* null, i32 1, i8* null, %struct.AVCodecHWConfigInternal** null, i32* null }, align 8
@.str.5 = private unnamed_addr constant [10 x i8] c"pcm_mulaw\00", align 1
@.str.6 = private unnamed_addr constant [26 x i8] c"PCM mu-law / G.711 mu-law\00", align 1
@.compoundliteral.7 = internal constant [2 x i32] [i32 1, i32 -1], align 4
@ff_pcm_mulaw_decoder = hidden local_unnamed_addr global %struct.AVCodec { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.6, i32 0, i32 0), i32 1, i32 65542, i32 2, %struct.AVRational* null, i32* null, i32* null, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.compoundliteral.7, i32 0, i32 0), i64* null, i8 0, %struct.AVClass* null, %struct.AVProfile* null, i8* null, i32 528, %struct.AVCodec* null, i32 (%struct.AVCodecContext*, %struct.AVCodecContext*)* null, %struct.AVCodecDefault* null, void (%struct.AVCodec*)* null, i32 (%struct.AVCodecContext*)* @pcm_decode_init, i32 (%struct.AVCodecContext*, i8*, i32, %struct.AVSubtitle*)* null, i32 (%struct.AVCodecContext*, %struct.AVPacket*, %struct.AVFrame*, i32*)* null, i32 (%struct.AVCodecContext*, i8*, i32*, %struct.AVPacket*)* @pcm_decode_frame, i32 (%struct.AVCodecContext*)* null, i32 (%struct.AVCodecContext*, %struct.AVPacket*)* null, i32 (%struct.AVCodecContext*, %struct.AVFrame*)* null, void (%struct.AVCodecContext*)* null, i32 1, i8* null, %struct.AVCodecHWConfigInternal** null, i32* null }, align 8
@.str.8 = private unnamed_addr constant [10 x i8] c"pcm_s16be\00", align 1
@.str.9 = private unnamed_addr constant [29 x i8] c"PCM signed 16-bit big-endian\00", align 1
@.compoundliteral.10 = internal constant [2 x i32] [i32 1, i32 -1], align 4
@ff_pcm_s16be_decoder = hidden local_unnamed_addr global %struct.AVCodec { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.9, i32 0, i32 0), i32 1, i32 65537, i32 2, %struct.AVRational* null, i32* null, i32* null, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.compoundliteral.10, i32 0, i32 0), i64* null, i8 0, %struct.AVClass* null, %struct.AVProfile* null, i8* null, i32 528, %struct.AVCodec* null, i32 (%struct.AVCodecContext*, %struct.AVCodecContext*)* null, %struct.AVCodecDefault* null, void (%struct.AVCodec*)* null, i32 (%struct.AVCodecContext*)* @pcm_decode_init, i32 (%struct.AVCodecContext*, i8*, i32, %struct.AVSubtitle*)* null, i32 (%struct.AVCodecContext*, %struct.AVPacket*, %struct.AVFrame*, i32*)* null, i32 (%struct.AVCodecContext*, i8*, i32*, %struct.AVPacket*)* @pcm_decode_frame, i32 (%struct.AVCodecContext*)* null, i32 (%struct.AVCodecContext*, %struct.AVPacket*)* null, i32 (%struct.AVCodecContext*, %struct.AVFrame*)* null, void (%struct.AVCodecContext*)* null, i32 1, i8* null, %struct.AVCodecHWConfigInternal** null, i32* null }, align 8
@.str.11 = private unnamed_addr constant [10 x i8] c"pcm_s16le\00", align 1
@.str.12 = private unnamed_addr constant [32 x i8] c"PCM signed 16-bit little-endian\00", align 1
@.compoundliteral.13 = internal constant [2 x i32] [i32 1, i32 -1], align 4
@ff_pcm_s16le_decoder = hidden local_unnamed_addr global %struct.AVCodec { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.12, i32 0, i32 0), i32 1, i32 65536, i32 2, %struct.AVRational* null, i32* null, i32* null, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.compoundliteral.13, i32 0, i32 0), i64* null, i8 0, %struct.AVClass* null, %struct.AVProfile* null, i8* null, i32 528, %struct.AVCodec* null, i32 (%struct.AVCodecContext*, %struct.AVCodecContext*)* null, %struct.AVCodecDefault* null, void (%struct.AVCodec*)* null, i32 (%struct.AVCodecContext*)* @pcm_decode_init, i32 (%struct.AVCodecContext*, i8*, i32, %struct.AVSubtitle*)* null, i32 (%struct.AVCodecContext*, %struct.AVPacket*, %struct.AVFrame*, i32*)* null, i32 (%struct.AVCodecContext*, i8*, i32*, %struct.AVPacket*)* @pcm_decode_frame, i32 (%struct.AVCodecContext*)* null, i32 (%struct.AVCodecContext*, %struct.AVPacket*)* null, i32 (%struct.AVCodecContext*, %struct.AVFrame*)* null, void (%struct.AVCodecContext*)* null, i32 1, i8* null, %struct.AVCodecHWConfigInternal** null, i32* null }, align 8
@.str.14 = private unnamed_addr constant [10 x i8] c"pcm_s24be\00", align 1
@.str.15 = private unnamed_addr constant [29 x i8] c"PCM signed 24-bit big-endian\00", align 1
@.compoundliteral.16 = internal constant [2 x i32] [i32 2, i32 -1], align 4
@ff_pcm_s24be_decoder = hidden local_unnamed_addr global %struct.AVCodec { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.14, i32 0, i32 0), i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.15, i32 0, i32 0), i32 1, i32 65549, i32 2, %struct.AVRational* null, i32* null, i32* null, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.compoundliteral.16, i32 0, i32 0), i64* null, i8 0, %struct.AVClass* null, %struct.AVProfile* null, i8* null, i32 528, %struct.AVCodec* null, i32 (%struct.AVCodecContext*, %struct.AVCodecContext*)* null, %struct.AVCodecDefault* null, void (%struct.AVCodec*)* null, i32 (%struct.AVCodecContext*)* @pcm_decode_init, i32 (%struct.AVCodecContext*, i8*, i32, %struct.AVSubtitle*)* null, i32 (%struct.AVCodecContext*, %struct.AVPacket*, %struct.AVFrame*, i32*)* null, i32 (%struct.AVCodecContext*, i8*, i32*, %struct.AVPacket*)* @pcm_decode_frame, i32 (%struct.AVCodecContext*)* null, i32 (%struct.AVCodecContext*, %struct.AVPacket*)* null, i32 (%struct.AVCodecContext*, %struct.AVFrame*)* null, void (%struct.AVCodecContext*)* null, i32 1, i8* null, %struct.AVCodecHWConfigInternal** null, i32* null }, align 8
@.str.17 = private unnamed_addr constant [10 x i8] c"pcm_s24le\00", align 1
@.str.18 = private unnamed_addr constant [32 x i8] c"PCM signed 24-bit little-endian\00", align 1
@.compoundliteral.19 = internal constant [2 x i32] [i32 2, i32 -1], align 4
@ff_pcm_s24le_decoder = hidden local_unnamed_addr global %struct.AVCodec { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.17, i32 0, i32 0), i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.18, i32 0, i32 0), i32 1, i32 65548, i32 2, %struct.AVRational* null, i32* null, i32* null, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.compoundliteral.19, i32 0, i32 0), i64* null, i8 0, %struct.AVClass* null, %struct.AVProfile* null, i8* null, i32 528, %struct.AVCodec* null, i32 (%struct.AVCodecContext*, %struct.AVCodecContext*)* null, %struct.AVCodecDefault* null, void (%struct.AVCodec*)* null, i32 (%struct.AVCodecContext*)* @pcm_decode_init, i32 (%struct.AVCodecContext*, i8*, i32, %struct.AVSubtitle*)* null, i32 (%struct.AVCodecContext*, %struct.AVPacket*, %struct.AVFrame*, i32*)* null, i32 (%struct.AVCodecContext*, i8*, i32*, %struct.AVPacket*)* @pcm_decode_frame, i32 (%struct.AVCodecContext*)* null, i32 (%struct.AVCodecContext*, %struct.AVPacket*)* null, i32 (%struct.AVCodecContext*, %struct.AVFrame*)* null, void (%struct.AVCodecContext*)* null, i32 1, i8* null, %struct.AVCodecHWConfigInternal** null, i32* null }, align 8
@.str.20 = private unnamed_addr constant [10 x i8] c"pcm_s32le\00", align 1
@.str.21 = private unnamed_addr constant [32 x i8] c"PCM signed 32-bit little-endian\00", align 1
@.compoundliteral.22 = internal constant [2 x i32] [i32 2, i32 -1], align 4
@ff_pcm_s32le_decoder = hidden local_unnamed_addr global %struct.AVCodec { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.20, i32 0, i32 0), i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.21, i32 0, i32 0), i32 1, i32 65544, i32 2, %struct.AVRational* null, i32* null, i32* null, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.compoundliteral.22, i32 0, i32 0), i64* null, i8 0, %struct.AVClass* null, %struct.AVProfile* null, i8* null, i32 528, %struct.AVCodec* null, i32 (%struct.AVCodecContext*, %struct.AVCodecContext*)* null, %struct.AVCodecDefault* null, void (%struct.AVCodec*)* null, i32 (%struct.AVCodecContext*)* @pcm_decode_init, i32 (%struct.AVCodecContext*, i8*, i32, %struct.AVSubtitle*)* null, i32 (%struct.AVCodecContext*, %struct.AVPacket*, %struct.AVFrame*, i32*)* null, i32 (%struct.AVCodecContext*, i8*, i32*, %struct.AVPacket*)* @pcm_decode_frame, i32 (%struct.AVCodecContext*)* null, i32 (%struct.AVCodecContext*, %struct.AVPacket*)* null, i32 (%struct.AVCodecContext*, %struct.AVFrame*)* null, void (%struct.AVCodecContext*)* null, i32 1, i8* null, %struct.AVCodecHWConfigInternal** null, i32* null }, align 8
@.str.23 = private unnamed_addr constant [7 x i8] c"pcm_u8\00", align 1
@.str.24 = private unnamed_addr constant [19 x i8] c"PCM unsigned 8-bit\00", align 1
@.compoundliteral.25 = internal constant [2 x i32] [i32 0, i32 -1], align 4
@ff_pcm_u8_decoder = hidden local_unnamed_addr global %struct.AVCodec { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.23, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.24, i32 0, i32 0), i32 1, i32 65541, i32 2, %struct.AVRational* null, i32* null, i32* null, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.compoundliteral.25, i32 0, i32 0), i64* null, i8 0, %struct.AVClass* null, %struct.AVProfile* null, i8* null, i32 528, %struct.AVCodec* null, i32 (%struct.AVCodecContext*, %struct.AVCodecContext*)* null, %struct.AVCodecDefault* null, void (%struct.AVCodec*)* null, i32 (%struct.AVCodecContext*)* @pcm_decode_init, i32 (%struct.AVCodecContext*, i8*, i32, %struct.AVSubtitle*)* null, i32 (%struct.AVCodecContext*, %struct.AVPacket*, %struct.AVFrame*, i32*)* null, i32 (%struct.AVCodecContext*, i8*, i32*, %struct.AVPacket*)* @pcm_decode_frame, i32 (%struct.AVCodecContext*)* null, i32 (%struct.AVCodecContext*, %struct.AVPacket*)* null, i32 (%struct.AVCodecContext*, %struct.AVFrame*)* null, void (%struct.AVCodecContext*)* null, i32 1, i8* null, %struct.AVCodecHWConfigInternal** null, i32* null }, align 8
@.str.26 = private unnamed_addr constant [28 x i8] c"PCM channels out of bounds\0A\00", align 1
@.str.27 = private unnamed_addr constant [21 x i8] c"Invalid sample_size\0A\00", align 1
@.str.28 = private unnamed_addr constant [28 x i8] c"Invalid number of channels\0A\00", align 1
@.str.29 = private unnamed_addr constant [20 x i8] c"codec ids mismatch\0A\00", align 1
@.str.30 = private unnamed_addr constant [77 x i8] c"Invalid PCM packet, data has size %d but at least a size of %d was expected\0A\00", align 1
@ff_reverse = external local_unnamed_addr constant [256 x i8], align 16

; Function Attrs: cold nounwind optsize ssp uwtable
define internal i32 @pcm_decode_init(%struct.AVCodecContext*) #0 {
  %2 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 6
  %3 = bitcast i8** %2 to %struct.PCMDecode**
  %4 = load %struct.PCMDecode*, %struct.PCMDecode** %3, align 8
  %5 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 83
  %6 = load i32, i32* %5, align 4
  %7 = icmp slt i32 %6, 1
  br i1 %7, label %8, label %10

8:                                                ; preds = %1
  %9 = bitcast %struct.AVCodecContext* %0 to i8*
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %9, i32 16, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.26, i64 0, i64 0)) #6
  br label %94

10:                                               ; preds = %1
  %11 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 4
  %12 = load i32, i32* %11, align 8
  switch i32 %12, label %82 [
    i32 65543, label %13
    i32 65542, label %23
    i32 67588, label %44
    i32 67586, label %62
    i32 67587, label %62
  ]

13:                                               ; preds = %10, %13
  %14 = phi i64 [ %20, %13 ], [ 0, %10 ]
  %15 = phi i32 [ %21, %13 ], [ 0, %10 ]
  %16 = trunc i32 %15 to i8
  %17 = tail call fastcc i32 @alaw2linear(i8 zeroext %16) #7
  %18 = trunc i32 %17 to i16
  %19 = getelementptr inbounds %struct.PCMDecode, %struct.PCMDecode* %4, i64 0, i32 0, i64 %14
  store i16 %18, i16* %19, align 2
  %20 = add nuw nsw i64 %14, 1
  %21 = add nuw nsw i32 %15, 1
  %22 = icmp eq i64 %20, 256
  br i1 %22, label %82, label %13

23:                                               ; preds = %10, %23
  %24 = phi i64 [ %41, %23 ], [ 0, %10 ]
  %25 = phi i32 [ %42, %23 ], [ 0, %10 ]
  %26 = trunc i32 %25 to i8
  %27 = trunc i64 %24 to i32
  %28 = xor i32 %27, 255
  %29 = shl nuw nsw i32 %28, 3
  %30 = and i32 %29, 120
  %31 = or i32 %30, 132
  %32 = lshr i32 %28, 4
  %33 = and i32 %32, 7
  %34 = shl i32 %31, %33
  %35 = icmp sgt i8 %26, -1
  %36 = sub nsw i32 132, %34
  %37 = add nuw nsw i32 %34, 65404
  %38 = select i1 %35, i32 %36, i32 %37
  %39 = trunc i32 %38 to i16
  %40 = getelementptr inbounds %struct.PCMDecode, %struct.PCMDecode* %4, i64 0, i32 0, i64 %24
  store i16 %39, i16* %40, align 2
  %41 = add nuw nsw i64 %24, 1
  %42 = add nuw nsw i32 %25, 1
  %43 = icmp eq i64 %41, 256
  br i1 %43, label %82, label %23

44:                                               ; preds = %10, %44
  %45 = phi i64 [ %60, %44 ], [ 0, %10 ]
  %46 = trunc i64 %45 to i32
  %47 = shl i32 %46, 2
  %48 = and i32 %47, 120
  %49 = or i32 %48, 132
  %50 = trunc i64 %45 to i32
  %51 = lshr i32 %50, 5
  %52 = shl i32 %49, %51
  %53 = and i32 %50, 1
  %54 = icmp eq i32 %53, 0
  %55 = sub nsw i32 132, %52
  %56 = add nuw nsw i32 %52, 65404
  %57 = select i1 %54, i32 %56, i32 %55
  %58 = trunc i32 %57 to i16
  %59 = getelementptr inbounds %struct.PCMDecode, %struct.PCMDecode* %4, i64 0, i32 0, i64 %45
  store i16 %58, i16* %59, align 2
  %60 = add nuw nsw i64 %45, 1
  %61 = icmp eq i64 %60, 256
  br i1 %61, label %82, label %44

62:                                               ; preds = %10, %10
  %63 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 142
  %64 = load i32, i32* %63, align 8
  %65 = add i32 %64, -1
  %66 = icmp ugt i32 %65, 23
  br i1 %66, label %94, label %67

67:                                               ; preds = %62
  %68 = shl i32 1, %65
  %69 = sitofp i32 %68 to double
  %70 = fdiv nsz double 1.000000e+00, %69
  %71 = fptrunc double %70 to float
  %72 = getelementptr inbounds %struct.PCMDecode, %struct.PCMDecode* %4, i64 0, i32 2
  store float %71, float* %72, align 8
  %73 = tail call %struct.AVFloatDSPContext* @avpriv_float_dsp_alloc(i32 0) #6
  %74 = icmp eq %struct.AVFloatDSPContext* %73, null
  br i1 %74, label %94, label %75

75:                                               ; preds = %67
  %76 = getelementptr inbounds %struct.AVFloatDSPContext, %struct.AVFloatDSPContext* %73, i64 0, i32 3
  %77 = bitcast void (float*, float*, float, i32)** %76 to i64*
  %78 = load i64, i64* %77, align 8
  %79 = getelementptr inbounds %struct.PCMDecode, %struct.PCMDecode* %4, i64 0, i32 1
  %80 = bitcast void (float*, float*, float, i32)** %79 to i64*
  store i64 %78, i64* %80, align 8
  %81 = bitcast %struct.AVFloatDSPContext* %73 to i8*
  tail call void @av_free(i8* nonnull %81) #6
  br label %82

82:                                               ; preds = %44, %23, %13, %10, %75
  %83 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 3
  %84 = load %struct.AVCodec*, %struct.AVCodec** %83, align 8
  %85 = getelementptr inbounds %struct.AVCodec, %struct.AVCodec* %84, i64 0, i32 8
  %86 = load i32*, i32** %85, align 8
  %87 = load i32, i32* %86, align 4
  %88 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 84
  store i32 %87, i32* %88, align 8
  %89 = icmp eq i32 %87, 2
  br i1 %89, label %90, label %94

90:                                               ; preds = %82
  %91 = load i32, i32* %11, align 8
  %92 = tail call i32 @av_get_bits_per_sample(i32 %91) #6
  %93 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 143
  store i32 %92, i32* %93, align 4
  br label %94

94:                                               ; preds = %82, %90, %67, %62, %8
  %95 = phi i32 [ -22, %8 ], [ -1094995529, %62 ], [ -12, %67 ], [ 0, %90 ], [ 0, %82 ]
  ret i32 %95
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @pcm_decode_frame(%struct.AVCodecContext*, i8*, i32* nocapture, %struct.AVPacket* nocapture readonly) #1 {
  %5 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %3, i64 0, i32 3
  %6 = bitcast i8** %5 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %3, i64 0, i32 4
  %9 = load i32, i32* %8, align 8
  %10 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 6
  %11 = bitcast i8** %10 to %struct.PCMDecode**
  %12 = load %struct.PCMDecode*, %struct.PCMDecode** %11, align 8
  %13 = bitcast i8* %1 to %struct.AVFrame*
  %14 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 4
  %15 = load i32, i32* %14, align 8
  %16 = tail call i32 @av_get_bits_per_sample(i32 %15) #6
  %17 = sdiv i32 %16, 8
  %18 = load i32, i32* %14, align 8
  %19 = icmp eq i32 %18, 65561
  %20 = select i1 %19, i32 2, i32 1
  %21 = select i1 %19, i32 5, i32 %17
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %23, label %25

23:                                               ; preds = %4
  %24 = bitcast %struct.AVCodecContext* %0 to i8*
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %24, i32 16, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.27, i64 0, i64 0)) #6
  br label %1212

25:                                               ; preds = %4
  %26 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 83
  %27 = load i32, i32* %26, align 4
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %29, label %31

29:                                               ; preds = %25
  %30 = bitcast %struct.AVCodecContext* %0 to i8*
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %30, i32 16, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.28, i64 0, i64 0)) #6
  br label %1212

31:                                               ; preds = %25
  %32 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 3
  %33 = load %struct.AVCodec*, %struct.AVCodec** %32, align 8
  %34 = getelementptr inbounds %struct.AVCodec, %struct.AVCodec* %33, i64 0, i32 3
  %35 = load i32, i32* %34, align 4
  %36 = icmp eq i32 %18, %35
  br i1 %36, label %39, label %37

37:                                               ; preds = %31
  %38 = bitcast %struct.AVCodecContext* %0 to i8*
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %38, i32 16, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.29, i64 0, i64 0)) #6
  br label %1212

39:                                               ; preds = %31
  %40 = mul nsw i32 %27, %21
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %51, label %42

42:                                               ; preds = %39
  %43 = srem i32 %9, %40
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %51, label %45

45:                                               ; preds = %42
  %46 = icmp slt i32 %9, %40
  br i1 %46, label %47, label %49

47:                                               ; preds = %45
  %48 = bitcast %struct.AVCodecContext* %0 to i8*
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %48, i32 16, i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.30, i64 0, i64 0), i32 %9, i32 %40) #6
  br label %1212

49:                                               ; preds = %45
  %50 = sub nsw i32 %9, %43
  br label %51

51:                                               ; preds = %42, %39, %49
  %52 = phi i32 [ %50, %49 ], [ %9, %42 ], [ %9, %39 ]
  %53 = sdiv i32 %52, %21
  %54 = mul nsw i32 %53, %20
  %55 = sdiv i32 %54, %27
  %56 = getelementptr inbounds i8, i8* %1, i64 112
  %57 = bitcast i8* %56 to i32*
  store i32 %55, i32* %57, align 8
  %58 = tail call i32 @ff_get_buffer(%struct.AVCodecContext* %0, %struct.AVFrame* %13, i32 0) #6
  %59 = icmp slt i32 %58, 0
  br i1 %59, label %1212, label %60

60:                                               ; preds = %51
  %61 = bitcast i8* %1 to i8**
  %62 = load i8*, i8** %61, align 8
  %63 = load i32, i32* %14, align 8
  switch i32 %63, label %1212 [
    i32 65546, label %339
    i32 65547, label %337
    i32 65548, label %305
    i32 65564, label %453
    i32 65549, label %273
    i32 65550, label %240
    i32 65551, label %207
    i32 65552, label %205
    i32 65538, label %176
    i32 65539, label %146
    i32 65540, label %117
    i32 67589, label %93
    i32 65563, label %811
    i32 67585, label %881
    i32 65558, label %881
    i32 65556, label %897
    i32 65545, label %897
    i32 65537, label %64
    i32 65566, label %945
    i32 65559, label %1030
    i32 65557, label %1030
    i32 67587, label %1030
    i32 67586, label %1030
    i32 67584, label %1030
    i32 65544, label %1030
    i32 65536, label %1030
    i32 65541, label %1030
    i32 65554, label %1034
    i32 65565, label %1034
    i32 65543, label %1056
    i32 65542, label %1056
    i32 67588, label %1056
    i32 65561, label %1122
  ]

64:                                               ; preds = %60
  %65 = icmp sgt i32 %53, 0
  br i1 %65, label %66, label %1193

66:                                               ; preds = %64
  %67 = add nsw i32 %53, -1
  %68 = and i32 %53, 3
  %69 = icmp eq i32 %68, 0
  br i1 %69, label %88, label %70

70:                                               ; preds = %66, %70
  %71 = phi i32 [ %83, %70 ], [ %53, %66 ]
  %72 = phi i8* [ %82, %70 ], [ %62, %66 ]
  %73 = phi i64 [ %77, %70 ], [ %7, %66 ]
  %74 = phi i32 [ %84, %70 ], [ %68, %66 ]
  %75 = inttoptr i64 %73 to i8*
  %76 = getelementptr inbounds i8, i8* %75, i64 2
  %77 = ptrtoint i8* %76 to i64
  %78 = inttoptr i64 %73 to i16*
  %79 = load i16, i16* %78, align 1
  %80 = tail call i16 @llvm.bswap.i16(i16 %79) #6
  %81 = bitcast i8* %72 to i16*
  store i16 %80, i16* %81, align 2
  %82 = getelementptr inbounds i8, i8* %72, i64 2
  %83 = add nsw i32 %71, -1
  %84 = add i32 %74, -1
  %85 = icmp eq i32 %84, 0
  br i1 %85, label %86, label %70, !llvm.loop !2

86:                                               ; preds = %70
  %87 = ptrtoint i8* %76 to i64
  br label %88

88:                                               ; preds = %66, %86
  %89 = phi i32 [ %53, %66 ], [ %83, %86 ]
  %90 = phi i8* [ %62, %66 ], [ %82, %86 ]
  %91 = phi i64 [ %7, %66 ], [ %87, %86 ]
  %92 = icmp ult i32 %67, 3
  br i1 %92, label %1193, label %913

93:                                               ; preds = %60
  %94 = icmp sgt i32 %53, 0
  br i1 %94, label %95, label %1193

95:                                               ; preds = %93
  %96 = and i32 %53, 1
  %97 = icmp eq i32 %96, 0
  br i1 %97, label %110, label %98

98:                                               ; preds = %95
  %99 = inttoptr i64 %7 to i8*
  %100 = load i8, i8* %99, align 1
  %101 = and i8 %100, 127
  %102 = icmp slt i8 %100, 0
  %103 = sub nuw i8 -128, %101
  %104 = or i8 %100, -128
  %105 = select i1 %102, i8 %103, i8 %104
  %106 = getelementptr inbounds i8, i8* %62, i64 1
  store i8 %105, i8* %62, align 1
  %107 = getelementptr inbounds i8, i8* %99, i64 1
  %108 = ptrtoint i8* %107 to i64
  %109 = add nsw i32 %53, -1
  br label %110

110:                                              ; preds = %95, %98
  %111 = phi i32 [ %53, %95 ], [ %109, %98 ]
  %112 = phi i8* [ %62, %95 ], [ %106, %98 ]
  %113 = phi i64 [ %7, %95 ], [ %108, %98 ]
  %114 = icmp eq i32 %53, 1
  br i1 %114, label %1193, label %115

115:                                              ; preds = %110
  %116 = inttoptr i64 %113 to i8*
  br label %789

117:                                              ; preds = %60
  %118 = icmp sgt i32 %53, 0
  br i1 %118, label %119, label %1193

119:                                              ; preds = %117
  %120 = add nsw i32 %53, -1
  %121 = and i32 %53, 3
  %122 = icmp eq i32 %121, 0
  br i1 %122, label %139, label %123

123:                                              ; preds = %119, %123
  %124 = phi i32 [ %134, %123 ], [ %53, %119 ]
  %125 = phi i8* [ %133, %123 ], [ %62, %119 ]
  %126 = phi i64 [ %130, %123 ], [ %7, %119 ]
  %127 = phi i32 [ %135, %123 ], [ %121, %119 ]
  %128 = inttoptr i64 %126 to i8*
  %129 = getelementptr inbounds i8, i8* %128, i64 1
  %130 = ptrtoint i8* %129 to i64
  %131 = load i8, i8* %128, align 1
  %132 = xor i8 %131, -128
  %133 = getelementptr inbounds i8, i8* %125, i64 1
  store i8 %132, i8* %125, align 1
  %134 = add nsw i32 %124, -1
  %135 = add i32 %127, -1
  %136 = icmp eq i32 %135, 0
  br i1 %136, label %137, label %123, !llvm.loop !4

137:                                              ; preds = %123
  %138 = ptrtoint i8* %129 to i64
  br label %139

139:                                              ; preds = %119, %137
  %140 = phi i32 [ %53, %119 ], [ %134, %137 ]
  %141 = phi i8* [ %62, %119 ], [ %133, %137 ]
  %142 = phi i64 [ %7, %119 ], [ %138, %137 ]
  %143 = icmp ult i32 %120, 3
  br i1 %143, label %1193, label %144

144:                                              ; preds = %139
  %145 = inttoptr i64 %142 to i8*
  br label %767

146:                                              ; preds = %60
  %147 = icmp sgt i32 %53, 0
  br i1 %147, label %148, label %1193

148:                                              ; preds = %146
  %149 = add nsw i32 %53, -1
  %150 = and i32 %53, 3
  %151 = icmp eq i32 %150, 0
  br i1 %151, label %171, label %152

152:                                              ; preds = %148, %152
  %153 = phi i32 [ %166, %152 ], [ %53, %148 ]
  %154 = phi i8* [ %165, %152 ], [ %62, %148 ]
  %155 = phi i64 [ %159, %152 ], [ %7, %148 ]
  %156 = phi i32 [ %167, %152 ], [ %150, %148 ]
  %157 = inttoptr i64 %155 to i8*
  %158 = getelementptr inbounds i8, i8* %157, i64 2
  %159 = ptrtoint i8* %158 to i64
  %160 = inttoptr i64 %155 to i16*
  %161 = load i16, i16* %160, align 1
  %162 = xor i16 %161, 128
  %163 = tail call i16 @llvm.bswap.i16(i16 %162)
  %164 = bitcast i8* %154 to i16*
  store i16 %163, i16* %164, align 2
  %165 = getelementptr inbounds i8, i8* %154, i64 2
  %166 = add nsw i32 %153, -1
  %167 = add i32 %156, -1
  %168 = icmp eq i32 %167, 0
  br i1 %168, label %169, label %152, !llvm.loop !5

169:                                              ; preds = %152
  %170 = ptrtoint i8* %158 to i64
  br label %171

171:                                              ; preds = %148, %169
  %172 = phi i32 [ %53, %148 ], [ %166, %169 ]
  %173 = phi i8* [ %62, %148 ], [ %165, %169 ]
  %174 = phi i64 [ %7, %148 ], [ %170, %169 ]
  %175 = icmp ult i32 %149, 3
  br i1 %175, label %1193, label %731

176:                                              ; preds = %60
  %177 = icmp sgt i32 %53, 0
  br i1 %177, label %178, label %1193

178:                                              ; preds = %176
  %179 = add nsw i32 %53, -1
  %180 = and i32 %53, 3
  %181 = icmp eq i32 %180, 0
  br i1 %181, label %200, label %182

182:                                              ; preds = %178, %182
  %183 = phi i32 [ %195, %182 ], [ %53, %178 ]
  %184 = phi i8* [ %194, %182 ], [ %62, %178 ]
  %185 = phi i64 [ %189, %182 ], [ %7, %178 ]
  %186 = phi i32 [ %196, %182 ], [ %180, %178 ]
  %187 = inttoptr i64 %185 to i8*
  %188 = getelementptr inbounds i8, i8* %187, i64 2
  %189 = ptrtoint i8* %188 to i64
  %190 = inttoptr i64 %185 to i16*
  %191 = load i16, i16* %190, align 1
  %192 = xor i16 %191, -32768
  %193 = bitcast i8* %184 to i16*
  store i16 %192, i16* %193, align 2
  %194 = getelementptr inbounds i8, i8* %184, i64 2
  %195 = add nsw i32 %183, -1
  %196 = add i32 %186, -1
  %197 = icmp eq i32 %196, 0
  br i1 %197, label %198, label %182, !llvm.loop !6

198:                                              ; preds = %182
  %199 = ptrtoint i8* %188 to i64
  br label %200

200:                                              ; preds = %178, %198
  %201 = phi i32 [ %53, %178 ], [ %195, %198 ]
  %202 = phi i8* [ %62, %178 ], [ %194, %198 ]
  %203 = phi i64 [ %7, %178 ], [ %199, %198 ]
  %204 = icmp ult i32 %179, 3
  br i1 %204, label %1193, label %699

205:                                              ; preds = %60
  %206 = icmp sgt i32 %53, 0
  br i1 %206, label %662, label %1193

207:                                              ; preds = %60
  %208 = icmp sgt i32 %53, 0
  br i1 %208, label %209, label %1193

209:                                              ; preds = %207
  %210 = and i32 %53, 1
  %211 = icmp eq i32 %210, 0
  br i1 %211, label %233, label %212

212:                                              ; preds = %209
  %213 = inttoptr i64 %7 to i8*
  %214 = getelementptr inbounds i8, i8* %213, i64 3
  %215 = ptrtoint i8* %214 to i64
  %216 = load i8, i8* %213, align 1
  %217 = zext i8 %216 to i32
  %218 = shl nuw nsw i32 %217, 16
  %219 = getelementptr inbounds i8, i8* %213, i64 1
  %220 = load i8, i8* %219, align 1
  %221 = zext i8 %220 to i32
  %222 = shl nuw nsw i32 %221, 8
  %223 = or i32 %222, %218
  %224 = getelementptr inbounds i8, i8* %213, i64 2
  %225 = load i8, i8* %224, align 1
  %226 = zext i8 %225 to i32
  %227 = or i32 %223, %226
  %228 = shl nuw i32 %227, 8
  %229 = xor i32 %228, -2147483648
  %230 = bitcast i8* %62 to i32*
  store i32 %229, i32* %230, align 4
  %231 = getelementptr inbounds i8, i8* %62, i64 4
  %232 = add nsw i32 %53, -1
  br label %233

233:                                              ; preds = %209, %212
  %234 = phi i32 [ %53, %209 ], [ %232, %212 ]
  %235 = phi i8* [ %62, %209 ], [ %231, %212 ]
  %236 = phi i64 [ %7, %209 ], [ %215, %212 ]
  %237 = icmp eq i32 %53, 1
  br i1 %237, label %1193, label %238

238:                                              ; preds = %233
  %239 = inttoptr i64 %236 to i8*
  br label %622

240:                                              ; preds = %60
  %241 = icmp sgt i32 %53, 0
  br i1 %241, label %242, label %1193

242:                                              ; preds = %240
  %243 = and i32 %53, 1
  %244 = icmp eq i32 %243, 0
  br i1 %244, label %266, label %245

245:                                              ; preds = %242
  %246 = inttoptr i64 %7 to i8*
  %247 = getelementptr inbounds i8, i8* %246, i64 3
  %248 = ptrtoint i8* %247 to i64
  %249 = getelementptr inbounds i8, i8* %246, i64 2
  %250 = load i8, i8* %249, align 1
  %251 = zext i8 %250 to i32
  %252 = shl nuw nsw i32 %251, 16
  %253 = getelementptr inbounds i8, i8* %246, i64 1
  %254 = load i8, i8* %253, align 1
  %255 = zext i8 %254 to i32
  %256 = shl nuw nsw i32 %255, 8
  %257 = or i32 %256, %252
  %258 = load i8, i8* %246, align 1
  %259 = zext i8 %258 to i32
  %260 = or i32 %257, %259
  %261 = shl nuw i32 %260, 8
  %262 = xor i32 %261, -2147483648
  %263 = bitcast i8* %62 to i32*
  store i32 %262, i32* %263, align 4
  %264 = getelementptr inbounds i8, i8* %62, i64 4
  %265 = add nsw i32 %53, -1
  br label %266

266:                                              ; preds = %242, %245
  %267 = phi i32 [ %53, %242 ], [ %265, %245 ]
  %268 = phi i8* [ %62, %242 ], [ %264, %245 ]
  %269 = phi i64 [ %7, %242 ], [ %248, %245 ]
  %270 = icmp eq i32 %53, 1
  br i1 %270, label %1193, label %271

271:                                              ; preds = %266
  %272 = inttoptr i64 %269 to i8*
  br label %582

273:                                              ; preds = %60
  %274 = icmp sgt i32 %53, 0
  br i1 %274, label %275, label %1193

275:                                              ; preds = %273
  %276 = and i32 %53, 1
  %277 = icmp eq i32 %276, 0
  br i1 %277, label %298, label %278

278:                                              ; preds = %275
  %279 = inttoptr i64 %7 to i8*
  %280 = getelementptr inbounds i8, i8* %279, i64 3
  %281 = ptrtoint i8* %280 to i64
  %282 = load i8, i8* %279, align 1
  %283 = zext i8 %282 to i32
  %284 = shl nuw nsw i32 %283, 16
  %285 = getelementptr inbounds i8, i8* %279, i64 1
  %286 = load i8, i8* %285, align 1
  %287 = zext i8 %286 to i32
  %288 = shl nuw nsw i32 %287, 8
  %289 = or i32 %288, %284
  %290 = getelementptr inbounds i8, i8* %279, i64 2
  %291 = load i8, i8* %290, align 1
  %292 = zext i8 %291 to i32
  %293 = or i32 %289, %292
  %294 = shl nuw i32 %293, 8
  %295 = bitcast i8* %62 to i32*
  store i32 %294, i32* %295, align 4
  %296 = getelementptr inbounds i8, i8* %62, i64 4
  %297 = add nsw i32 %53, -1
  br label %298

298:                                              ; preds = %275, %278
  %299 = phi i32 [ %53, %275 ], [ %297, %278 ]
  %300 = phi i8* [ %62, %275 ], [ %296, %278 ]
  %301 = phi i64 [ %7, %275 ], [ %281, %278 ]
  %302 = icmp eq i32 %53, 1
  br i1 %302, label %1193, label %303

303:                                              ; preds = %298
  %304 = inttoptr i64 %301 to i8*
  br label %544

305:                                              ; preds = %60
  %306 = icmp sgt i32 %53, 0
  br i1 %306, label %307, label %1193

307:                                              ; preds = %305
  %308 = and i32 %53, 1
  %309 = icmp eq i32 %308, 0
  br i1 %309, label %330, label %310

310:                                              ; preds = %307
  %311 = inttoptr i64 %7 to i8*
  %312 = getelementptr inbounds i8, i8* %311, i64 3
  %313 = ptrtoint i8* %312 to i64
  %314 = getelementptr inbounds i8, i8* %311, i64 2
  %315 = load i8, i8* %314, align 1
  %316 = zext i8 %315 to i32
  %317 = shl nuw nsw i32 %316, 16
  %318 = getelementptr inbounds i8, i8* %311, i64 1
  %319 = load i8, i8* %318, align 1
  %320 = zext i8 %319 to i32
  %321 = shl nuw nsw i32 %320, 8
  %322 = or i32 %321, %317
  %323 = load i8, i8* %311, align 1
  %324 = zext i8 %323 to i32
  %325 = or i32 %322, %324
  %326 = shl nuw i32 %325, 8
  %327 = bitcast i8* %62 to i32*
  store i32 %326, i32* %327, align 4
  %328 = getelementptr inbounds i8, i8* %62, i64 4
  %329 = add nsw i32 %53, -1
  br label %330

330:                                              ; preds = %307, %310
  %331 = phi i32 [ %53, %307 ], [ %329, %310 ]
  %332 = phi i8* [ %62, %307 ], [ %328, %310 ]
  %333 = phi i64 [ %7, %307 ], [ %313, %310 ]
  %334 = icmp eq i32 %53, 1
  br i1 %334, label %1193, label %335

335:                                              ; preds = %330
  %336 = inttoptr i64 %333 to i8*
  br label %415

337:                                              ; preds = %60
  %338 = icmp sgt i32 %53, 0
  br i1 %338, label %400, label %1193

339:                                              ; preds = %60
  %340 = icmp sgt i32 %53, 0
  br i1 %340, label %341, label %1193

341:                                              ; preds = %339
  %342 = add nsw i32 %53, -1
  %343 = and i32 %53, 3
  %344 = icmp eq i32 %343, 0
  br i1 %344, label %363, label %345

345:                                              ; preds = %341, %345
  %346 = phi i32 [ %358, %345 ], [ %53, %341 ]
  %347 = phi i8* [ %357, %345 ], [ %62, %341 ]
  %348 = phi i64 [ %352, %345 ], [ %7, %341 ]
  %349 = phi i32 [ %359, %345 ], [ %343, %341 ]
  %350 = inttoptr i64 %348 to i8*
  %351 = getelementptr inbounds i8, i8* %350, i64 4
  %352 = ptrtoint i8* %351 to i64
  %353 = inttoptr i64 %348 to i32*
  %354 = load i32, i32* %353, align 1
  %355 = xor i32 %354, -2147483648
  %356 = bitcast i8* %347 to i32*
  store i32 %355, i32* %356, align 4
  %357 = getelementptr inbounds i8, i8* %347, i64 4
  %358 = add nsw i32 %346, -1
  %359 = add i32 %349, -1
  %360 = icmp eq i32 %359, 0
  br i1 %360, label %361, label %345, !llvm.loop !7

361:                                              ; preds = %345
  %362 = ptrtoint i8* %351 to i64
  br label %363

363:                                              ; preds = %341, %361
  %364 = phi i32 [ %53, %341 ], [ %358, %361 ]
  %365 = phi i8* [ %62, %341 ], [ %357, %361 ]
  %366 = phi i64 [ %7, %341 ], [ %362, %361 ]
  %367 = icmp ult i32 %342, 3
  br i1 %367, label %1193, label %368

368:                                              ; preds = %363, %368
  %369 = phi i32 [ %398, %368 ], [ %364, %363 ]
  %370 = phi i8* [ %397, %368 ], [ %365, %363 ]
  %371 = phi i64 [ %392, %368 ], [ %366, %363 ]
  %372 = inttoptr i64 %371 to i8*
  %373 = getelementptr inbounds i8, i8* %372, i64 4
  %374 = inttoptr i64 %371 to i32*
  %375 = load i32, i32* %374, align 1
  %376 = xor i32 %375, -2147483648
  %377 = bitcast i8* %370 to i32*
  store i32 %376, i32* %377, align 4
  %378 = getelementptr inbounds i8, i8* %370, i64 4
  %379 = getelementptr inbounds i8, i8* %372, i64 8
  %380 = bitcast i8* %373 to i32*
  %381 = load i32, i32* %380, align 1
  %382 = xor i32 %381, -2147483648
  %383 = bitcast i8* %378 to i32*
  store i32 %382, i32* %383, align 4
  %384 = getelementptr inbounds i8, i8* %370, i64 8
  %385 = getelementptr inbounds i8, i8* %372, i64 12
  %386 = bitcast i8* %379 to i32*
  %387 = load i32, i32* %386, align 1
  %388 = xor i32 %387, -2147483648
  %389 = bitcast i8* %384 to i32*
  store i32 %388, i32* %389, align 4
  %390 = getelementptr inbounds i8, i8* %370, i64 12
  %391 = getelementptr inbounds i8, i8* %372, i64 16
  %392 = ptrtoint i8* %391 to i64
  %393 = bitcast i8* %385 to i32*
  %394 = load i32, i32* %393, align 1
  %395 = xor i32 %394, -2147483648
  %396 = bitcast i8* %390 to i32*
  store i32 %395, i32* %396, align 4
  %397 = getelementptr inbounds i8, i8* %370, i64 16
  %398 = add nsw i32 %369, -4
  %399 = icmp sgt i32 %398, 0
  br i1 %399, label %368, label %1193

400:                                              ; preds = %337, %400
  %401 = phi i32 [ %413, %400 ], [ %53, %337 ]
  %402 = phi i8* [ %412, %400 ], [ %62, %337 ]
  %403 = phi i64 [ %406, %400 ], [ %7, %337 ]
  %404 = inttoptr i64 %403 to i8*
  %405 = getelementptr inbounds i8, i8* %404, i64 4
  %406 = ptrtoint i8* %405 to i64
  %407 = inttoptr i64 %403 to i32*
  %408 = load i32, i32* %407, align 1
  %409 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %408) #8, !srcloc !8
  %410 = xor i32 %409, -2147483648
  %411 = bitcast i8* %402 to i32*
  store i32 %410, i32* %411, align 4
  %412 = getelementptr inbounds i8, i8* %402, i64 4
  %413 = add nsw i32 %401, -1
  %414 = icmp sgt i32 %413, 0
  br i1 %414, label %400, label %1193

415:                                              ; preds = %415, %335
  %416 = phi i32 [ %331, %335 ], [ %451, %415 ]
  %417 = phi i8* [ %332, %335 ], [ %450, %415 ]
  %418 = phi i8* [ %336, %335 ], [ %435, %415 ]
  %419 = getelementptr inbounds i8, i8* %418, i64 3
  %420 = getelementptr inbounds i8, i8* %418, i64 2
  %421 = load i8, i8* %420, align 1
  %422 = zext i8 %421 to i32
  %423 = shl nuw nsw i32 %422, 16
  %424 = getelementptr inbounds i8, i8* %418, i64 1
  %425 = load i8, i8* %424, align 1
  %426 = zext i8 %425 to i32
  %427 = shl nuw nsw i32 %426, 8
  %428 = or i32 %427, %423
  %429 = load i8, i8* %418, align 1
  %430 = zext i8 %429 to i32
  %431 = or i32 %428, %430
  %432 = shl nuw i32 %431, 8
  %433 = bitcast i8* %417 to i32*
  store i32 %432, i32* %433, align 4
  %434 = getelementptr inbounds i8, i8* %417, i64 4
  %435 = getelementptr inbounds i8, i8* %418, i64 6
  %436 = getelementptr inbounds i8, i8* %418, i64 5
  %437 = load i8, i8* %436, align 1
  %438 = zext i8 %437 to i32
  %439 = shl nuw nsw i32 %438, 16
  %440 = getelementptr inbounds i8, i8* %418, i64 4
  %441 = load i8, i8* %440, align 1
  %442 = zext i8 %441 to i32
  %443 = shl nuw nsw i32 %442, 8
  %444 = or i32 %443, %439
  %445 = load i8, i8* %419, align 1
  %446 = zext i8 %445 to i32
  %447 = or i32 %444, %446
  %448 = shl nuw i32 %447, 8
  %449 = bitcast i8* %434 to i32*
  store i32 %448, i32* %449, align 4
  %450 = getelementptr inbounds i8, i8* %417, i64 8
  %451 = add nsw i32 %416, -2
  %452 = icmp sgt i32 %451, 0
  br i1 %452, label %415, label %1193

453:                                              ; preds = %60
  %454 = load i32, i32* %26, align 4
  %455 = sdiv i32 %53, %454
  %456 = icmp sgt i32 %454, 0
  br i1 %456, label %457, label %1193

457:                                              ; preds = %453
  %458 = getelementptr inbounds i8, i8* %1, i64 96
  %459 = bitcast i8* %458 to i8***
  %460 = icmp sgt i32 %455, 0
  %461 = and i32 %455, 1
  %462 = icmp eq i32 %461, 0
  %463 = add nsw i32 %455, -1
  %464 = icmp eq i32 %455, 1
  br label %465

465:                                              ; preds = %457, %538
  %466 = phi i32 [ %454, %457 ], [ %539, %538 ]
  %467 = phi i64 [ 0, %457 ], [ %541, %538 ]
  %468 = phi i64 [ %7, %457 ], [ %540, %538 ]
  br i1 %460, label %469, label %538

469:                                              ; preds = %465
  %470 = load i8**, i8*** %459, align 8
  %471 = getelementptr inbounds i8*, i8** %470, i64 %467
  %472 = load i8*, i8** %471, align 8
  %473 = inttoptr i64 %468 to i8*
  br i1 %462, label %491, label %474

474:                                              ; preds = %469
  %475 = getelementptr inbounds i8, i8* %473, i64 3
  %476 = getelementptr inbounds i8, i8* %473, i64 2
  %477 = load i8, i8* %476, align 1
  %478 = zext i8 %477 to i32
  %479 = shl nuw nsw i32 %478, 16
  %480 = getelementptr inbounds i8, i8* %473, i64 1
  %481 = load i8, i8* %480, align 1
  %482 = zext i8 %481 to i32
  %483 = shl nuw nsw i32 %482, 8
  %484 = or i32 %483, %479
  %485 = load i8, i8* %473, align 1
  %486 = zext i8 %485 to i32
  %487 = or i32 %484, %486
  %488 = shl nuw i32 %487, 8
  %489 = bitcast i8* %472 to i32*
  store i32 %488, i32* %489, align 4
  %490 = getelementptr inbounds i8, i8* %472, i64 4
  br label %491

491:                                              ; preds = %474, %469
  %492 = phi i8* [ %490, %474 ], [ %472, %469 ]
  %493 = phi i32 [ %463, %474 ], [ %455, %469 ]
  %494 = phi i8* [ %475, %474 ], [ %473, %469 ]
  %495 = phi i8* [ %475, %474 ], [ undef, %469 ]
  br i1 %464, label %534, label %496

496:                                              ; preds = %491, %496
  %497 = phi i8* [ %531, %496 ], [ %492, %491 ]
  %498 = phi i32 [ %532, %496 ], [ %493, %491 ]
  %499 = phi i8* [ %516, %496 ], [ %494, %491 ]
  %500 = getelementptr inbounds i8, i8* %499, i64 3
  %501 = getelementptr inbounds i8, i8* %499, i64 2
  %502 = load i8, i8* %501, align 1
  %503 = zext i8 %502 to i32
  %504 = shl nuw nsw i32 %503, 16
  %505 = getelementptr inbounds i8, i8* %499, i64 1
  %506 = load i8, i8* %505, align 1
  %507 = zext i8 %506 to i32
  %508 = shl nuw nsw i32 %507, 8
  %509 = or i32 %508, %504
  %510 = load i8, i8* %499, align 1
  %511 = zext i8 %510 to i32
  %512 = or i32 %509, %511
  %513 = shl nuw i32 %512, 8
  %514 = bitcast i8* %497 to i32*
  store i32 %513, i32* %514, align 4
  %515 = getelementptr inbounds i8, i8* %497, i64 4
  %516 = getelementptr inbounds i8, i8* %499, i64 6
  %517 = getelementptr inbounds i8, i8* %499, i64 5
  %518 = load i8, i8* %517, align 1
  %519 = zext i8 %518 to i32
  %520 = shl nuw nsw i32 %519, 16
  %521 = getelementptr inbounds i8, i8* %499, i64 4
  %522 = load i8, i8* %521, align 1
  %523 = zext i8 %522 to i32
  %524 = shl nuw nsw i32 %523, 8
  %525 = or i32 %524, %520
  %526 = load i8, i8* %500, align 1
  %527 = zext i8 %526 to i32
  %528 = or i32 %525, %527
  %529 = shl nuw i32 %528, 8
  %530 = bitcast i8* %515 to i32*
  store i32 %529, i32* %530, align 4
  %531 = getelementptr inbounds i8, i8* %497, i64 8
  %532 = add nsw i32 %498, -2
  %533 = icmp sgt i32 %532, 0
  br i1 %533, label %496, label %534

534:                                              ; preds = %496, %491
  %535 = phi i8* [ %495, %491 ], [ %516, %496 ]
  %536 = ptrtoint i8* %535 to i64
  %537 = load i32, i32* %26, align 4
  br label %538

538:                                              ; preds = %534, %465
  %539 = phi i32 [ %537, %534 ], [ %466, %465 ]
  %540 = phi i64 [ %536, %534 ], [ %468, %465 ]
  %541 = add nuw nsw i64 %467, 1
  %542 = sext i32 %539 to i64
  %543 = icmp slt i64 %541, %542
  br i1 %543, label %465, label %1193

544:                                              ; preds = %544, %303
  %545 = phi i32 [ %299, %303 ], [ %580, %544 ]
  %546 = phi i8* [ %300, %303 ], [ %579, %544 ]
  %547 = phi i8* [ %304, %303 ], [ %564, %544 ]
  %548 = getelementptr inbounds i8, i8* %547, i64 3
  %549 = load i8, i8* %547, align 1
  %550 = zext i8 %549 to i32
  %551 = shl nuw nsw i32 %550, 16
  %552 = getelementptr inbounds i8, i8* %547, i64 1
  %553 = load i8, i8* %552, align 1
  %554 = zext i8 %553 to i32
  %555 = shl nuw nsw i32 %554, 8
  %556 = or i32 %555, %551
  %557 = getelementptr inbounds i8, i8* %547, i64 2
  %558 = load i8, i8* %557, align 1
  %559 = zext i8 %558 to i32
  %560 = or i32 %556, %559
  %561 = shl nuw i32 %560, 8
  %562 = bitcast i8* %546 to i32*
  store i32 %561, i32* %562, align 4
  %563 = getelementptr inbounds i8, i8* %546, i64 4
  %564 = getelementptr inbounds i8, i8* %547, i64 6
  %565 = load i8, i8* %548, align 1
  %566 = zext i8 %565 to i32
  %567 = shl nuw nsw i32 %566, 16
  %568 = getelementptr inbounds i8, i8* %547, i64 4
  %569 = load i8, i8* %568, align 1
  %570 = zext i8 %569 to i32
  %571 = shl nuw nsw i32 %570, 8
  %572 = or i32 %571, %567
  %573 = getelementptr inbounds i8, i8* %547, i64 5
  %574 = load i8, i8* %573, align 1
  %575 = zext i8 %574 to i32
  %576 = or i32 %572, %575
  %577 = shl nuw i32 %576, 8
  %578 = bitcast i8* %563 to i32*
  store i32 %577, i32* %578, align 4
  %579 = getelementptr inbounds i8, i8* %546, i64 8
  %580 = add nsw i32 %545, -2
  %581 = icmp sgt i32 %580, 0
  br i1 %581, label %544, label %1193

582:                                              ; preds = %582, %271
  %583 = phi i32 [ %267, %271 ], [ %620, %582 ]
  %584 = phi i8* [ %268, %271 ], [ %619, %582 ]
  %585 = phi i8* [ %272, %271 ], [ %603, %582 ]
  %586 = getelementptr inbounds i8, i8* %585, i64 3
  %587 = getelementptr inbounds i8, i8* %585, i64 2
  %588 = load i8, i8* %587, align 1
  %589 = zext i8 %588 to i32
  %590 = shl nuw nsw i32 %589, 16
  %591 = getelementptr inbounds i8, i8* %585, i64 1
  %592 = load i8, i8* %591, align 1
  %593 = zext i8 %592 to i32
  %594 = shl nuw nsw i32 %593, 8
  %595 = or i32 %594, %590
  %596 = load i8, i8* %585, align 1
  %597 = zext i8 %596 to i32
  %598 = or i32 %595, %597
  %599 = shl nuw i32 %598, 8
  %600 = xor i32 %599, -2147483648
  %601 = bitcast i8* %584 to i32*
  store i32 %600, i32* %601, align 4
  %602 = getelementptr inbounds i8, i8* %584, i64 4
  %603 = getelementptr inbounds i8, i8* %585, i64 6
  %604 = getelementptr inbounds i8, i8* %585, i64 5
  %605 = load i8, i8* %604, align 1
  %606 = zext i8 %605 to i32
  %607 = shl nuw nsw i32 %606, 16
  %608 = getelementptr inbounds i8, i8* %585, i64 4
  %609 = load i8, i8* %608, align 1
  %610 = zext i8 %609 to i32
  %611 = shl nuw nsw i32 %610, 8
  %612 = or i32 %611, %607
  %613 = load i8, i8* %586, align 1
  %614 = zext i8 %613 to i32
  %615 = or i32 %612, %614
  %616 = shl nuw i32 %615, 8
  %617 = xor i32 %616, -2147483648
  %618 = bitcast i8* %602 to i32*
  store i32 %617, i32* %618, align 4
  %619 = getelementptr inbounds i8, i8* %584, i64 8
  %620 = add nsw i32 %583, -2
  %621 = icmp sgt i32 %620, 0
  br i1 %621, label %582, label %1193

622:                                              ; preds = %622, %238
  %623 = phi i32 [ %234, %238 ], [ %660, %622 ]
  %624 = phi i8* [ %235, %238 ], [ %659, %622 ]
  %625 = phi i8* [ %239, %238 ], [ %643, %622 ]
  %626 = getelementptr inbounds i8, i8* %625, i64 3
  %627 = load i8, i8* %625, align 1
  %628 = zext i8 %627 to i32
  %629 = shl nuw nsw i32 %628, 16
  %630 = getelementptr inbounds i8, i8* %625, i64 1
  %631 = load i8, i8* %630, align 1
  %632 = zext i8 %631 to i32
  %633 = shl nuw nsw i32 %632, 8
  %634 = or i32 %633, %629
  %635 = getelementptr inbounds i8, i8* %625, i64 2
  %636 = load i8, i8* %635, align 1
  %637 = zext i8 %636 to i32
  %638 = or i32 %634, %637
  %639 = shl nuw i32 %638, 8
  %640 = xor i32 %639, -2147483648
  %641 = bitcast i8* %624 to i32*
  store i32 %640, i32* %641, align 4
  %642 = getelementptr inbounds i8, i8* %624, i64 4
  %643 = getelementptr inbounds i8, i8* %625, i64 6
  %644 = load i8, i8* %626, align 1
  %645 = zext i8 %644 to i32
  %646 = shl nuw nsw i32 %645, 16
  %647 = getelementptr inbounds i8, i8* %625, i64 4
  %648 = load i8, i8* %647, align 1
  %649 = zext i8 %648 to i32
  %650 = shl nuw nsw i32 %649, 8
  %651 = or i32 %650, %646
  %652 = getelementptr inbounds i8, i8* %625, i64 5
  %653 = load i8, i8* %652, align 1
  %654 = zext i8 %653 to i32
  %655 = or i32 %651, %654
  %656 = shl nuw i32 %655, 8
  %657 = xor i32 %656, -2147483648
  %658 = bitcast i8* %642 to i32*
  store i32 %657, i32* %658, align 4
  %659 = getelementptr inbounds i8, i8* %624, i64 8
  %660 = add nsw i32 %623, -2
  %661 = icmp sgt i32 %660, 0
  br i1 %661, label %622, label %1193

662:                                              ; preds = %205, %662
  %663 = phi i32 [ %697, %662 ], [ %53, %205 ]
  %664 = phi i8* [ %696, %662 ], [ %62, %205 ]
  %665 = phi i64 [ %668, %662 ], [ %7, %205 ]
  %666 = inttoptr i64 %665 to i8*
  %667 = getelementptr inbounds i8, i8* %666, i64 3
  %668 = ptrtoint i8* %667 to i64
  %669 = load i8, i8* %666, align 1
  %670 = zext i8 %669 to i32
  %671 = shl nuw nsw i32 %670, 16
  %672 = getelementptr inbounds i8, i8* %666, i64 1
  %673 = load i8, i8* %672, align 1
  %674 = zext i8 %673 to i32
  %675 = shl nuw nsw i32 %674, 8
  %676 = or i32 %675, %671
  %677 = getelementptr inbounds i8, i8* %666, i64 2
  %678 = load i8, i8* %677, align 1
  %679 = zext i8 %678 to i32
  %680 = or i32 %675, %679
  %681 = lshr i32 %680, 4
  %682 = lshr i32 %676, 12
  %683 = and i32 %682, 255
  %684 = zext i32 %683 to i64
  %685 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_reverse, i64 0, i64 %684
  %686 = load i8, i8* %685, align 1
  %687 = zext i8 %686 to i16
  %688 = and i32 %681, 255
  %689 = zext i32 %688 to i64
  %690 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_reverse, i64 0, i64 %689
  %691 = load i8, i8* %690, align 1
  %692 = zext i8 %691 to i16
  %693 = shl nuw i16 %692, 8
  %694 = or i16 %693, %687
  %695 = bitcast i8* %664 to i16*
  store i16 %694, i16* %695, align 2
  %696 = getelementptr inbounds i8, i8* %664, i64 2
  %697 = add nsw i32 %663, -1
  %698 = icmp sgt i32 %697, 0
  br i1 %698, label %662, label %1193

699:                                              ; preds = %200, %699
  %700 = phi i32 [ %729, %699 ], [ %201, %200 ]
  %701 = phi i8* [ %728, %699 ], [ %202, %200 ]
  %702 = phi i64 [ %723, %699 ], [ %203, %200 ]
  %703 = inttoptr i64 %702 to i8*
  %704 = getelementptr inbounds i8, i8* %703, i64 2
  %705 = inttoptr i64 %702 to i16*
  %706 = load i16, i16* %705, align 1
  %707 = xor i16 %706, -32768
  %708 = bitcast i8* %701 to i16*
  store i16 %707, i16* %708, align 2
  %709 = getelementptr inbounds i8, i8* %701, i64 2
  %710 = getelementptr inbounds i8, i8* %703, i64 4
  %711 = bitcast i8* %704 to i16*
  %712 = load i16, i16* %711, align 1
  %713 = xor i16 %712, -32768
  %714 = bitcast i8* %709 to i16*
  store i16 %713, i16* %714, align 2
  %715 = getelementptr inbounds i8, i8* %701, i64 4
  %716 = getelementptr inbounds i8, i8* %703, i64 6
  %717 = bitcast i8* %710 to i16*
  %718 = load i16, i16* %717, align 1
  %719 = xor i16 %718, -32768
  %720 = bitcast i8* %715 to i16*
  store i16 %719, i16* %720, align 2
  %721 = getelementptr inbounds i8, i8* %701, i64 6
  %722 = getelementptr inbounds i8, i8* %703, i64 8
  %723 = ptrtoint i8* %722 to i64
  %724 = bitcast i8* %716 to i16*
  %725 = load i16, i16* %724, align 1
  %726 = xor i16 %725, -32768
  %727 = bitcast i8* %721 to i16*
  store i16 %726, i16* %727, align 2
  %728 = getelementptr inbounds i8, i8* %701, i64 8
  %729 = add nsw i32 %700, -4
  %730 = icmp sgt i32 %729, 0
  br i1 %730, label %699, label %1193

731:                                              ; preds = %171, %731
  %732 = phi i32 [ %765, %731 ], [ %172, %171 ]
  %733 = phi i8* [ %764, %731 ], [ %173, %171 ]
  %734 = phi i64 [ %758, %731 ], [ %174, %171 ]
  %735 = inttoptr i64 %734 to i8*
  %736 = getelementptr inbounds i8, i8* %735, i64 2
  %737 = inttoptr i64 %734 to i16*
  %738 = load i16, i16* %737, align 1
  %739 = xor i16 %738, 128
  %740 = tail call i16 @llvm.bswap.i16(i16 %739)
  %741 = bitcast i8* %733 to i16*
  store i16 %740, i16* %741, align 2
  %742 = getelementptr inbounds i8, i8* %733, i64 2
  %743 = getelementptr inbounds i8, i8* %735, i64 4
  %744 = bitcast i8* %736 to i16*
  %745 = load i16, i16* %744, align 1
  %746 = xor i16 %745, 128
  %747 = tail call i16 @llvm.bswap.i16(i16 %746)
  %748 = bitcast i8* %742 to i16*
  store i16 %747, i16* %748, align 2
  %749 = getelementptr inbounds i8, i8* %733, i64 4
  %750 = getelementptr inbounds i8, i8* %735, i64 6
  %751 = bitcast i8* %743 to i16*
  %752 = load i16, i16* %751, align 1
  %753 = xor i16 %752, 128
  %754 = tail call i16 @llvm.bswap.i16(i16 %753)
  %755 = bitcast i8* %749 to i16*
  store i16 %754, i16* %755, align 2
  %756 = getelementptr inbounds i8, i8* %733, i64 6
  %757 = getelementptr inbounds i8, i8* %735, i64 8
  %758 = ptrtoint i8* %757 to i64
  %759 = bitcast i8* %750 to i16*
  %760 = load i16, i16* %759, align 1
  %761 = xor i16 %760, 128
  %762 = tail call i16 @llvm.bswap.i16(i16 %761)
  %763 = bitcast i8* %756 to i16*
  store i16 %762, i16* %763, align 2
  %764 = getelementptr inbounds i8, i8* %733, i64 8
  %765 = add nsw i32 %732, -4
  %766 = icmp sgt i32 %765, 0
  br i1 %766, label %731, label %1193

767:                                              ; preds = %767, %144
  %768 = phi i32 [ %140, %144 ], [ %787, %767 ]
  %769 = phi i8* [ %141, %144 ], [ %786, %767 ]
  %770 = phi i8* [ %145, %144 ], [ %783, %767 ]
  %771 = getelementptr inbounds i8, i8* %770, i64 1
  %772 = load i8, i8* %770, align 1
  %773 = xor i8 %772, -128
  %774 = getelementptr inbounds i8, i8* %769, i64 1
  store i8 %773, i8* %769, align 1
  %775 = getelementptr inbounds i8, i8* %770, i64 2
  %776 = load i8, i8* %771, align 1
  %777 = xor i8 %776, -128
  %778 = getelementptr inbounds i8, i8* %769, i64 2
  store i8 %777, i8* %774, align 1
  %779 = getelementptr inbounds i8, i8* %770, i64 3
  %780 = load i8, i8* %775, align 1
  %781 = xor i8 %780, -128
  %782 = getelementptr inbounds i8, i8* %769, i64 3
  store i8 %781, i8* %778, align 1
  %783 = getelementptr inbounds i8, i8* %770, i64 4
  %784 = load i8, i8* %779, align 1
  %785 = xor i8 %784, -128
  %786 = getelementptr inbounds i8, i8* %769, i64 4
  store i8 %785, i8* %782, align 1
  %787 = add nsw i32 %768, -4
  %788 = icmp sgt i32 %787, 0
  br i1 %788, label %767, label %1193

789:                                              ; preds = %789, %115
  %790 = phi i32 [ %111, %115 ], [ %809, %789 ]
  %791 = phi i8* [ %112, %115 ], [ %807, %789 ]
  %792 = phi i8* [ %116, %115 ], [ %808, %789 ]
  %793 = load i8, i8* %792, align 1
  %794 = and i8 %793, 127
  %795 = icmp slt i8 %793, 0
  %796 = sub nuw i8 -128, %794
  %797 = or i8 %793, -128
  %798 = select i1 %795, i8 %796, i8 %797
  %799 = getelementptr inbounds i8, i8* %791, i64 1
  store i8 %798, i8* %791, align 1
  %800 = getelementptr inbounds i8, i8* %792, i64 1
  %801 = load i8, i8* %800, align 1
  %802 = and i8 %801, 127
  %803 = icmp slt i8 %801, 0
  %804 = sub nuw i8 -128, %802
  %805 = or i8 %801, -128
  %806 = select i1 %803, i8 %804, i8 %805
  %807 = getelementptr inbounds i8, i8* %791, i64 2
  store i8 %806, i8* %799, align 1
  %808 = getelementptr inbounds i8, i8* %792, i64 2
  %809 = add nsw i32 %790, -2
  %810 = icmp sgt i32 %809, 0
  br i1 %810, label %789, label %1193

811:                                              ; preds = %60
  %812 = load i32, i32* %26, align 4
  %813 = sdiv i32 %53, %812
  %814 = icmp sgt i32 %812, 0
  br i1 %814, label %815, label %1193

815:                                              ; preds = %811
  %816 = getelementptr inbounds i8, i8* %1, i64 96
  %817 = bitcast i8* %816 to i8***
  %818 = icmp sgt i32 %813, 0
  %819 = add nsw i32 %813, -1
  %820 = and i32 %813, 3
  %821 = icmp eq i32 %820, 0
  %822 = icmp ult i32 %819, 3
  br label %823

823:                                              ; preds = %815, %875
  %824 = phi i32 [ %812, %815 ], [ %876, %875 ]
  %825 = phi i64 [ 0, %815 ], [ %878, %875 ]
  %826 = phi i64 [ %7, %815 ], [ %877, %875 ]
  br i1 %818, label %827, label %875

827:                                              ; preds = %823
  %828 = load i8**, i8*** %817, align 8
  %829 = getelementptr inbounds i8*, i8** %828, i64 %825
  %830 = load i8*, i8** %829, align 8
  %831 = inttoptr i64 %826 to i8*
  br i1 %821, label %844, label %832

832:                                              ; preds = %827, %832
  %833 = phi i32 [ %841, %832 ], [ %813, %827 ]
  %834 = phi i8* [ %840, %832 ], [ %830, %827 ]
  %835 = phi i8* [ %837, %832 ], [ %831, %827 ]
  %836 = phi i32 [ %842, %832 ], [ %820, %827 ]
  %837 = getelementptr inbounds i8, i8* %835, i64 1
  %838 = load i8, i8* %835, align 1
  %839 = xor i8 %838, -128
  %840 = getelementptr inbounds i8, i8* %834, i64 1
  store i8 %839, i8* %834, align 1
  %841 = add nsw i32 %833, -1
  %842 = add i32 %836, -1
  %843 = icmp eq i32 %842, 0
  br i1 %843, label %844, label %832, !llvm.loop !9

844:                                              ; preds = %832, %827
  %845 = phi i32 [ %813, %827 ], [ %841, %832 ]
  %846 = phi i8* [ %830, %827 ], [ %840, %832 ]
  %847 = phi i8* [ %831, %827 ], [ %837, %832 ]
  %848 = phi i8* [ undef, %827 ], [ %837, %832 ]
  br i1 %822, label %871, label %849

849:                                              ; preds = %844, %849
  %850 = phi i32 [ %869, %849 ], [ %845, %844 ]
  %851 = phi i8* [ %868, %849 ], [ %846, %844 ]
  %852 = phi i8* [ %865, %849 ], [ %847, %844 ]
  %853 = getelementptr inbounds i8, i8* %852, i64 1
  %854 = load i8, i8* %852, align 1
  %855 = xor i8 %854, -128
  %856 = getelementptr inbounds i8, i8* %851, i64 1
  store i8 %855, i8* %851, align 1
  %857 = getelementptr inbounds i8, i8* %852, i64 2
  %858 = load i8, i8* %853, align 1
  %859 = xor i8 %858, -128
  %860 = getelementptr inbounds i8, i8* %851, i64 2
  store i8 %859, i8* %856, align 1
  %861 = getelementptr inbounds i8, i8* %852, i64 3
  %862 = load i8, i8* %857, align 1
  %863 = xor i8 %862, -128
  %864 = getelementptr inbounds i8, i8* %851, i64 3
  store i8 %863, i8* %860, align 1
  %865 = getelementptr inbounds i8, i8* %852, i64 4
  %866 = load i8, i8* %861, align 1
  %867 = xor i8 %866, -128
  %868 = getelementptr inbounds i8, i8* %851, i64 4
  store i8 %867, i8* %864, align 1
  %869 = add nsw i32 %850, -4
  %870 = icmp sgt i32 %869, 0
  br i1 %870, label %849, label %871

871:                                              ; preds = %849, %844
  %872 = phi i8* [ %848, %844 ], [ %865, %849 ]
  %873 = ptrtoint i8* %872 to i64
  %874 = load i32, i32* %26, align 4
  br label %875

875:                                              ; preds = %871, %823
  %876 = phi i32 [ %874, %871 ], [ %824, %823 ]
  %877 = phi i64 [ %873, %871 ], [ %826, %823 ]
  %878 = add nuw nsw i64 %825, 1
  %879 = sext i32 %876 to i64
  %880 = icmp slt i64 %878, %879
  br i1 %880, label %823, label %1193

881:                                              ; preds = %60, %60
  %882 = icmp sgt i32 %53, 0
  br i1 %882, label %883, label %1193

883:                                              ; preds = %881, %883
  %884 = phi i32 [ %895, %883 ], [ %53, %881 ]
  %885 = phi i8* [ %894, %883 ], [ %62, %881 ]
  %886 = phi i64 [ %889, %883 ], [ %7, %881 ]
  %887 = inttoptr i64 %886 to i8*
  %888 = getelementptr inbounds i8, i8* %887, i64 8
  %889 = ptrtoint i8* %888 to i64
  %890 = inttoptr i64 %886 to i64*
  %891 = load i64, i64* %890, align 1
  %892 = tail call i64 asm "bswap  $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i64 %891) #8, !srcloc !10
  %893 = bitcast i8* %885 to i64*
  store i64 %892, i64* %893, align 8
  %894 = getelementptr inbounds i8, i8* %885, i64 8
  %895 = add nsw i32 %884, -1
  %896 = icmp sgt i32 %895, 0
  br i1 %896, label %883, label %1193

897:                                              ; preds = %60, %60
  %898 = icmp sgt i32 %53, 0
  br i1 %898, label %899, label %1193

899:                                              ; preds = %897, %899
  %900 = phi i32 [ %911, %899 ], [ %53, %897 ]
  %901 = phi i8* [ %910, %899 ], [ %62, %897 ]
  %902 = phi i64 [ %905, %899 ], [ %7, %897 ]
  %903 = inttoptr i64 %902 to i8*
  %904 = getelementptr inbounds i8, i8* %903, i64 4
  %905 = ptrtoint i8* %904 to i64
  %906 = inttoptr i64 %902 to i32*
  %907 = load i32, i32* %906, align 1
  %908 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %907) #8, !srcloc !8
  %909 = bitcast i8* %901 to i32*
  store i32 %908, i32* %909, align 4
  %910 = getelementptr inbounds i8, i8* %901, i64 4
  %911 = add nsw i32 %900, -1
  %912 = icmp sgt i32 %911, 0
  br i1 %912, label %899, label %1193

913:                                              ; preds = %88, %913
  %914 = phi i32 [ %943, %913 ], [ %89, %88 ]
  %915 = phi i8* [ %942, %913 ], [ %90, %88 ]
  %916 = phi i64 [ %937, %913 ], [ %91, %88 ]
  %917 = inttoptr i64 %916 to i8*
  %918 = getelementptr inbounds i8, i8* %917, i64 2
  %919 = inttoptr i64 %916 to i16*
  %920 = load i16, i16* %919, align 1
  %921 = tail call i16 @llvm.bswap.i16(i16 %920) #6
  %922 = bitcast i8* %915 to i16*
  store i16 %921, i16* %922, align 2
  %923 = getelementptr inbounds i8, i8* %915, i64 2
  %924 = getelementptr inbounds i8, i8* %917, i64 4
  %925 = bitcast i8* %918 to i16*
  %926 = load i16, i16* %925, align 1
  %927 = tail call i16 @llvm.bswap.i16(i16 %926) #6
  %928 = bitcast i8* %923 to i16*
  store i16 %927, i16* %928, align 2
  %929 = getelementptr inbounds i8, i8* %915, i64 4
  %930 = getelementptr inbounds i8, i8* %917, i64 6
  %931 = bitcast i8* %924 to i16*
  %932 = load i16, i16* %931, align 1
  %933 = tail call i16 @llvm.bswap.i16(i16 %932) #6
  %934 = bitcast i8* %929 to i16*
  store i16 %933, i16* %934, align 2
  %935 = getelementptr inbounds i8, i8* %915, i64 6
  %936 = getelementptr inbounds i8, i8* %917, i64 8
  %937 = ptrtoint i8* %936 to i64
  %938 = bitcast i8* %930 to i16*
  %939 = load i16, i16* %938, align 1
  %940 = tail call i16 @llvm.bswap.i16(i16 %939) #6
  %941 = bitcast i8* %935 to i16*
  store i16 %940, i16* %941, align 2
  %942 = getelementptr inbounds i8, i8* %915, i64 8
  %943 = add nsw i32 %914, -4
  %944 = icmp sgt i32 %943, 0
  br i1 %944, label %913, label %1193

945:                                              ; preds = %60
  %946 = load i32, i32* %26, align 4
  %947 = sdiv i32 %53, %946
  %948 = icmp sgt i32 %946, 0
  br i1 %948, label %949, label %1193

949:                                              ; preds = %945
  %950 = getelementptr inbounds i8, i8* %1, i64 96
  %951 = bitcast i8* %950 to i8***
  %952 = icmp sgt i32 %947, 0
  %953 = add nsw i32 %947, -1
  %954 = and i32 %947, 3
  %955 = icmp eq i32 %954, 0
  %956 = icmp ult i32 %953, 3
  br label %957

957:                                              ; preds = %949, %1024
  %958 = phi i32 [ %946, %949 ], [ %1025, %1024 ]
  %959 = phi i64 [ 0, %949 ], [ %1027, %1024 ]
  %960 = phi i64 [ %7, %949 ], [ %1026, %1024 ]
  br i1 %952, label %961, label %1024

961:                                              ; preds = %957
  %962 = load i8**, i8*** %951, align 8
  %963 = getelementptr inbounds i8*, i8** %962, i64 %959
  %964 = load i8*, i8** %963, align 8
  br i1 %955, label %983, label %965

965:                                              ; preds = %961, %965
  %966 = phi i32 [ %978, %965 ], [ %947, %961 ]
  %967 = phi i8* [ %977, %965 ], [ %964, %961 ]
  %968 = phi i64 [ %972, %965 ], [ %960, %961 ]
  %969 = phi i32 [ %979, %965 ], [ %954, %961 ]
  %970 = inttoptr i64 %968 to i8*
  %971 = getelementptr inbounds i8, i8* %970, i64 2
  %972 = ptrtoint i8* %971 to i64
  %973 = inttoptr i64 %968 to i16*
  %974 = load i16, i16* %973, align 1
  %975 = tail call i16 @llvm.bswap.i16(i16 %974) #6
  %976 = bitcast i8* %967 to i16*
  store i16 %975, i16* %976, align 2
  %977 = getelementptr inbounds i8, i8* %967, i64 2
  %978 = add nsw i32 %966, -1
  %979 = add i32 %969, -1
  %980 = icmp eq i32 %979, 0
  br i1 %980, label %981, label %965, !llvm.loop !11

981:                                              ; preds = %965
  %982 = ptrtoint i8* %971 to i64
  br label %983

983:                                              ; preds = %961, %981
  %984 = phi i32 [ %947, %961 ], [ %978, %981 ]
  %985 = phi i8* [ %964, %961 ], [ %977, %981 ]
  %986 = phi i64 [ %960, %961 ], [ %982, %981 ]
  %987 = phi i8* [ undef, %961 ], [ %971, %981 ]
  br i1 %956, label %1020, label %988

988:                                              ; preds = %983, %988
  %989 = phi i32 [ %1018, %988 ], [ %984, %983 ]
  %990 = phi i8* [ %1017, %988 ], [ %985, %983 ]
  %991 = phi i64 [ %1012, %988 ], [ %986, %983 ]
  %992 = inttoptr i64 %991 to i8*
  %993 = getelementptr inbounds i8, i8* %992, i64 2
  %994 = inttoptr i64 %991 to i16*
  %995 = load i16, i16* %994, align 1
  %996 = tail call i16 @llvm.bswap.i16(i16 %995) #6
  %997 = bitcast i8* %990 to i16*
  store i16 %996, i16* %997, align 2
  %998 = getelementptr inbounds i8, i8* %990, i64 2
  %999 = getelementptr inbounds i8, i8* %992, i64 4
  %1000 = bitcast i8* %993 to i16*
  %1001 = load i16, i16* %1000, align 1
  %1002 = tail call i16 @llvm.bswap.i16(i16 %1001) #6
  %1003 = bitcast i8* %998 to i16*
  store i16 %1002, i16* %1003, align 2
  %1004 = getelementptr inbounds i8, i8* %990, i64 4
  %1005 = getelementptr inbounds i8, i8* %992, i64 6
  %1006 = bitcast i8* %999 to i16*
  %1007 = load i16, i16* %1006, align 1
  %1008 = tail call i16 @llvm.bswap.i16(i16 %1007) #6
  %1009 = bitcast i8* %1004 to i16*
  store i16 %1008, i16* %1009, align 2
  %1010 = getelementptr inbounds i8, i8* %990, i64 6
  %1011 = getelementptr inbounds i8, i8* %992, i64 8
  %1012 = ptrtoint i8* %1011 to i64
  %1013 = bitcast i8* %1005 to i16*
  %1014 = load i16, i16* %1013, align 1
  %1015 = tail call i16 @llvm.bswap.i16(i16 %1014) #6
  %1016 = bitcast i8* %1010 to i16*
  store i16 %1015, i16* %1016, align 2
  %1017 = getelementptr inbounds i8, i8* %990, i64 8
  %1018 = add nsw i32 %989, -4
  %1019 = icmp sgt i32 %1018, 0
  br i1 %1019, label %988, label %1020

1020:                                             ; preds = %988, %983
  %1021 = phi i8* [ %987, %983 ], [ %1011, %988 ]
  %1022 = ptrtoint i8* %1021 to i64
  %1023 = load i32, i32* %26, align 4
  br label %1024

1024:                                             ; preds = %1020, %957
  %1025 = phi i32 [ %1023, %1020 ], [ %958, %957 ]
  %1026 = phi i64 [ %1022, %1020 ], [ %960, %957 ]
  %1027 = add nuw nsw i64 %959, 1
  %1028 = sext i32 %1025 to i64
  %1029 = icmp slt i64 %1027, %1028
  br i1 %1029, label %957, label %1193

1030:                                             ; preds = %60, %60, %60, %60, %60, %60, %60, %60
  %1031 = inttoptr i64 %7 to i8*
  %1032 = mul nsw i32 %53, %21
  %1033 = sext i32 %1032 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %62, i8* align 1 %1031, i64 %1033, i1 false)
  br label %1193

1034:                                             ; preds = %60, %60
  %1035 = load i32, i32* %26, align 4
  %1036 = icmp sgt i32 %1035, 0
  br i1 %1036, label %1037, label %1193

1037:                                             ; preds = %1034
  %1038 = sdiv i32 %53, %1035
  %1039 = getelementptr inbounds i8, i8* %1, i64 96
  %1040 = bitcast i8* %1039 to i8***
  %1041 = mul nsw i32 %1038, %21
  %1042 = zext i32 %1041 to i64
  br label %1043

1043:                                             ; preds = %1037, %1043
  %1044 = phi i64 [ 0, %1037 ], [ %1052, %1043 ]
  %1045 = phi i64 [ %7, %1037 ], [ %1051, %1043 ]
  %1046 = load i8**, i8*** %1040, align 8
  %1047 = getelementptr inbounds i8*, i8** %1046, i64 %1044
  %1048 = load i8*, i8** %1047, align 8
  %1049 = inttoptr i64 %1045 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1048, i8* align 1 %1049, i64 %1042, i1 false) #6
  %1050 = getelementptr inbounds i8, i8* %1049, i64 %1042
  %1051 = ptrtoint i8* %1050 to i64
  %1052 = add nuw nsw i64 %1044, 1
  %1053 = load i32, i32* %26, align 4
  %1054 = sext i32 %1053 to i64
  %1055 = icmp slt i64 %1052, %1054
  br i1 %1055, label %1043, label %1193

1056:                                             ; preds = %60, %60, %60
  %1057 = icmp sgt i32 %53, 0
  br i1 %1057, label %1058, label %1193

1058:                                             ; preds = %1056
  %1059 = add nsw i32 %53, -1
  %1060 = and i32 %53, 3
  %1061 = icmp eq i32 %1060, 0
  br i1 %1061, label %1081, label %1062

1062:                                             ; preds = %1058, %1062
  %1063 = phi i32 [ %1076, %1062 ], [ %53, %1058 ]
  %1064 = phi i8* [ %1075, %1062 ], [ %62, %1058 ]
  %1065 = phi i64 [ %1069, %1062 ], [ %7, %1058 ]
  %1066 = phi i32 [ %1077, %1062 ], [ %1060, %1058 ]
  %1067 = inttoptr i64 %1065 to i8*
  %1068 = getelementptr inbounds i8, i8* %1067, i64 1
  %1069 = ptrtoint i8* %1068 to i64
  %1070 = load i8, i8* %1067, align 1
  %1071 = zext i8 %1070 to i64
  %1072 = getelementptr inbounds %struct.PCMDecode, %struct.PCMDecode* %12, i64 0, i32 0, i64 %1071
  %1073 = load i16, i16* %1072, align 2
  %1074 = bitcast i8* %1064 to i16*
  store i16 %1073, i16* %1074, align 2
  %1075 = getelementptr inbounds i8, i8* %1064, i64 2
  %1076 = add nsw i32 %1063, -1
  %1077 = add i32 %1066, -1
  %1078 = icmp eq i32 %1077, 0
  br i1 %1078, label %1079, label %1062, !llvm.loop !12

1079:                                             ; preds = %1062
  %1080 = ptrtoint i8* %1068 to i64
  br label %1081

1081:                                             ; preds = %1058, %1079
  %1082 = phi i32 [ %53, %1058 ], [ %1076, %1079 ]
  %1083 = phi i8* [ %62, %1058 ], [ %1075, %1079 ]
  %1084 = phi i64 [ %7, %1058 ], [ %1080, %1079 ]
  %1085 = icmp ult i32 %1059, 3
  br i1 %1085, label %1193, label %1086

1086:                                             ; preds = %1081
  %1087 = inttoptr i64 %1084 to i8*
  br label %1088

1088:                                             ; preds = %1088, %1086
  %1089 = phi i32 [ %1082, %1086 ], [ %1120, %1088 ]
  %1090 = phi i8* [ %1083, %1086 ], [ %1119, %1088 ]
  %1091 = phi i8* [ %1087, %1086 ], [ %1113, %1088 ]
  %1092 = getelementptr inbounds i8, i8* %1091, i64 1
  %1093 = load i8, i8* %1091, align 1
  %1094 = zext i8 %1093 to i64
  %1095 = getelementptr inbounds %struct.PCMDecode, %struct.PCMDecode* %12, i64 0, i32 0, i64 %1094
  %1096 = load i16, i16* %1095, align 2
  %1097 = bitcast i8* %1090 to i16*
  store i16 %1096, i16* %1097, align 2
  %1098 = getelementptr inbounds i8, i8* %1090, i64 2
  %1099 = getelementptr inbounds i8, i8* %1091, i64 2
  %1100 = load i8, i8* %1092, align 1
  %1101 = zext i8 %1100 to i64
  %1102 = getelementptr inbounds %struct.PCMDecode, %struct.PCMDecode* %12, i64 0, i32 0, i64 %1101
  %1103 = load i16, i16* %1102, align 2
  %1104 = bitcast i8* %1098 to i16*
  store i16 %1103, i16* %1104, align 2
  %1105 = getelementptr inbounds i8, i8* %1090, i64 4
  %1106 = getelementptr inbounds i8, i8* %1091, i64 3
  %1107 = load i8, i8* %1099, align 1
  %1108 = zext i8 %1107 to i64
  %1109 = getelementptr inbounds %struct.PCMDecode, %struct.PCMDecode* %12, i64 0, i32 0, i64 %1108
  %1110 = load i16, i16* %1109, align 2
  %1111 = bitcast i8* %1105 to i16*
  store i16 %1110, i16* %1111, align 2
  %1112 = getelementptr inbounds i8, i8* %1090, i64 6
  %1113 = getelementptr inbounds i8, i8* %1091, i64 4
  %1114 = load i8, i8* %1106, align 1
  %1115 = zext i8 %1114 to i64
  %1116 = getelementptr inbounds %struct.PCMDecode, %struct.PCMDecode* %12, i64 0, i32 0, i64 %1115
  %1117 = load i16, i16* %1116, align 2
  %1118 = bitcast i8* %1112 to i16*
  store i16 %1117, i16* %1118, align 2
  %1119 = getelementptr inbounds i8, i8* %1090, i64 8
  %1120 = add nsw i32 %1089, -4
  %1121 = icmp sgt i32 %1120, 0
  br i1 %1121, label %1088, label %1193

1122:                                             ; preds = %60
  %1123 = load i32, i32* %26, align 4
  %1124 = sdiv i32 %53, %1123
  %1125 = icmp sgt i32 %1123, 0
  br i1 %1125, label %1126, label %1193

1126:                                             ; preds = %1122
  %1127 = getelementptr inbounds i8, i8* %1, i64 96
  %1128 = bitcast i8* %1127 to i8***
  %1129 = icmp sgt i32 %1124, 0
  br label %1130

1130:                                             ; preds = %1126, %1187
  %1131 = phi i32 [ %1123, %1126 ], [ %1188, %1187 ]
  %1132 = phi i64 [ 0, %1126 ], [ %1190, %1187 ]
  %1133 = phi i64 [ %7, %1126 ], [ %1189, %1187 ]
  br i1 %1129, label %1134, label %1187

1134:                                             ; preds = %1130
  %1135 = load i8**, i8*** %1128, align 8
  %1136 = getelementptr inbounds i8*, i8** %1135, i64 %1132
  %1137 = bitcast i8** %1136 to i32**
  %1138 = load i32*, i32** %1137, align 8
  %1139 = inttoptr i64 %1133 to i8*
  br label %1140

1140:                                             ; preds = %1140, %1134
  %1141 = phi i32 [ %1182, %1140 ], [ 0, %1134 ]
  %1142 = phi i32* [ %1180, %1140 ], [ %1138, %1134 ]
  %1143 = phi i8* [ %1181, %1140 ], [ %1139, %1134 ]
  %1144 = getelementptr inbounds i8, i8* %1143, i64 2
  %1145 = load i8, i8* %1144, align 1
  %1146 = zext i8 %1145 to i32
  %1147 = shl i32 %1146, 28
  %1148 = getelementptr inbounds i8, i8* %1143, i64 1
  %1149 = load i8, i8* %1148, align 1
  %1150 = zext i8 %1149 to i32
  %1151 = shl nuw nsw i32 %1150, 20
  %1152 = load i8, i8* %1143, align 1
  %1153 = zext i8 %1152 to i32
  %1154 = shl nuw nsw i32 %1153, 12
  %1155 = shl nuw nsw i32 %1146, 8
  %1156 = and i32 %1155, 3840
  %1157 = or i32 %1147, %1150
  %1158 = or i32 %1157, %1151
  %1159 = or i32 %1158, %1156
  %1160 = or i32 %1159, %1154
  %1161 = getelementptr inbounds i32, i32* %1142, i64 1
  store i32 %1160, i32* %1142, align 4
  %1162 = getelementptr inbounds i8, i8* %1143, i64 4
  %1163 = load i8, i8* %1162, align 1
  %1164 = zext i8 %1163 to i32
  %1165 = shl nuw i32 %1164, 24
  %1166 = getelementptr inbounds i8, i8* %1143, i64 3
  %1167 = load i8, i8* %1166, align 1
  %1168 = zext i8 %1167 to i32
  %1169 = shl nuw nsw i32 %1168, 16
  %1170 = load i8, i8* %1144, align 1
  %1171 = and i8 %1170, -16
  %1172 = zext i8 %1171 to i32
  %1173 = shl nuw nsw i32 %1172, 8
  %1174 = shl nuw nsw i32 %1164, 4
  %1175 = lshr i32 %1168, 4
  %1176 = or i32 %1174, %1165
  %1177 = or i32 %1176, %1169
  %1178 = or i32 %1177, %1175
  %1179 = or i32 %1178, %1173
  %1180 = getelementptr inbounds i32, i32* %1142, i64 2
  store i32 %1179, i32* %1161, align 4
  %1181 = getelementptr inbounds i8, i8* %1143, i64 5
  %1182 = add nuw nsw i32 %1141, 1
  %1183 = icmp eq i32 %1182, %1124
  br i1 %1183, label %1184, label %1140

1184:                                             ; preds = %1140
  %1185 = ptrtoint i8* %1181 to i64
  %1186 = load i32, i32* %26, align 4
  br label %1187

1187:                                             ; preds = %1184, %1130
  %1188 = phi i32 [ %1186, %1184 ], [ %1131, %1130 ]
  %1189 = phi i64 [ %1185, %1184 ], [ %1133, %1130 ]
  %1190 = add nuw nsw i64 %1132, 1
  %1191 = sext i32 %1188 to i64
  %1192 = icmp slt i64 %1190, %1191
  br i1 %1192, label %1130, label %1193

1193:                                             ; preds = %1187, %1081, %1088, %1043, %1024, %88, %913, %899, %883, %875, %110, %789, %139, %767, %171, %731, %200, %699, %662, %233, %622, %266, %582, %298, %544, %538, %330, %415, %400, %363, %368, %1122, %1056, %1034, %945, %64, %897, %881, %811, %93, %117, %146, %176, %205, %207, %240, %273, %453, %305, %337, %339, %1030
  %1194 = load i32, i32* %14, align 8
  %1195 = and i32 %1194, -2
  %1196 = icmp eq i32 %1195, 67586
  br i1 %1196, label %1197, label %1211

1197:                                             ; preds = %1193
  %1198 = getelementptr inbounds %struct.PCMDecode, %struct.PCMDecode* %12, i64 0, i32 1
  %1199 = load void (float*, float*, float, i32)*, void (float*, float*, float, i32)** %1198, align 8
  %1200 = getelementptr inbounds i8, i8* %1, i64 96
  %1201 = bitcast i8* %1200 to float***
  %1202 = load float**, float*** %1201, align 8
  %1203 = load float*, float** %1202, align 8
  %1204 = getelementptr inbounds %struct.PCMDecode, %struct.PCMDecode* %12, i64 0, i32 2
  %1205 = load float, float* %1204, align 8
  %1206 = load i32, i32* %57, align 8
  %1207 = load i32, i32* %26, align 4
  %1208 = mul nsw i32 %1207, %1206
  %1209 = add nsw i32 %1208, 3
  %1210 = and i32 %1209, -4
  tail call void %1199(float* %1203, float* %1203, float %1205, i32 %1210) #6
  tail call void asm sideeffect "emms", "~{memory},~{dirflag},~{fpsr},~{flags}"() #6, !srcloc !13
  br label %1211

1211:                                             ; preds = %1193, %1197
  store i32 1, i32* %2, align 4
  br label %1212

1212:                                             ; preds = %60, %51, %1211, %47, %37, %29, %23
  %1213 = phi i32 [ -22, %23 ], [ -22, %29 ], [ -22, %37 ], [ -1094995529, %47 ], [ %52, %1211 ], [ %58, %51 ], [ -1, %60 ]
  ret i32 %1213
}

declare void @av_log(i8*, i32, i8*, ...) local_unnamed_addr #2

; Function Attrs: cold norecurse nounwind optsize readnone ssp uwtable
define internal fastcc i32 @alaw2linear(i8 zeroext) unnamed_addr #3 {
  %2 = xor i8 %0, 85
  %3 = zext i8 %2 to i32
  %4 = lshr i32 %3, 4
  %5 = and i32 %4, 7
  %6 = icmp eq i32 %5, 0
  %7 = shl nuw nsw i32 %3, 1
  %8 = and i32 %7, 30
  br i1 %6, label %13, label %9

9:                                                ; preds = %1
  %10 = or i32 %8, 33
  %11 = add nuw nsw i32 %5, 2
  %12 = shl i32 %10, %11
  br label %16

13:                                               ; preds = %1
  %14 = shl nuw nsw i32 %8, 3
  %15 = or i32 %14, 8
  br label %16

16:                                               ; preds = %13, %9
  %17 = phi i32 [ %12, %9 ], [ %15, %13 ]
  %18 = icmp slt i8 %0, 0
  %19 = sub nsw i32 0, %17
  %20 = select i1 %18, i32 %17, i32 %19
  ret i32 %20
}

declare %struct.AVFloatDSPContext* @avpriv_float_dsp_alloc(i32) local_unnamed_addr #2

declare void @av_free(i8*) local_unnamed_addr #2

declare i32 @av_get_bits_per_sample(i32) local_unnamed_addr #2

declare i32 @ff_get_buffer(%struct.AVCodecContext*, %struct.AVFrame*, i32) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #4

; Function Attrs: nounwind readnone speculatable
declare i16 @llvm.bswap.i16(i16) #5

attributes #0 = { cold nounwind optsize ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { cold norecurse nounwind optsize readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { nounwind readnone speculatable }
attributes #6 = { nounwind }
attributes #7 = { cold }
attributes #8 = { nounwind readnone }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = distinct !{!4, !3}
!5 = distinct !{!5, !3}
!6 = distinct !{!6, !3}
!7 = distinct !{!7, !3}
!8 = !{i32 1895416}
!9 = distinct !{!9, !3}
!10 = !{i32 1895574}
!11 = distinct !{!11, !3}
!12 = distinct !{!12, !3}
!13 = !{i32 1548178}
