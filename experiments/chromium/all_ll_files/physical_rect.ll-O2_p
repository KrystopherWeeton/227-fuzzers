; ModuleID = '../../third_party/blink/renderer/core/layout/geometry/physical_rect.cc'
source_filename = "../../third_party/blink/renderer/core/layout/geometry/physical_rect.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.blink::PhysicalRect" = type { %"struct.blink::PhysicalOffset", %"struct.blink::PhysicalSize" }
%"struct.blink::PhysicalOffset" = type { %"class.blink::LayoutUnit", %"class.blink::LayoutUnit" }
%"class.blink::LayoutUnit" = type { i32 }
%"struct.blink::PhysicalSize" = type { %"class.blink::LayoutUnit", %"class.blink::LayoutUnit" }
%"struct.blink::NGPhysicalBoxStrut" = type { %"class.blink::LayoutUnit", %"class.blink::LayoutUnit", %"class.blink::LayoutUnit", %"class.blink::LayoutUnit" }
%"class.blink::LayoutRectOutsets" = type { %"class.blink::LayoutUnit", %"class.blink::LayoutUnit", %"class.blink::LayoutUnit", %"class.blink::LayoutUnit" }
%"class.blink::ComputedStyle" = type { %"class.blink::ComputedStyleBase.base", %"class.WTF::RefCounted.601", %"class.std::__1::unique_ptr.603" }
%"class.blink::ComputedStyleBase.base" = type <{ %"class.blink::DataRef", %"class.blink::DataRef.243", %"class.blink::DataRef.315", %"class.blink::DataRef.319", %"class.blink::DataRef.519", %"class.blink::DataRef.584", %"class.blink::DataRef.588", %"class.blink::DataRef.592", %"class.blink::DataRef.596", [20 x i8] }>
%"class.blink::DataRef" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.blink::ComputedStyleBase::StyleInheritedData"* }
%"class.blink::ComputedStyleBase::StyleInheritedData" = type { %"class.WTF::RefCounted", %"class.blink::DataRef.0", %"class.blink::Length", float, %"class.blink::StyleColor", %"class.blink::StyleColor", i16, i16 }
%"class.WTF::RefCounted" = type { %"class.base::RefCounted" }
%"class.base::RefCounted" = type { %"class.base::subtle::RefCountedBase" }
%"class.base::subtle::RefCountedBase" = type { i32 }
%"class.blink::DataRef.0" = type { %class.scoped_refptr.1 }
%class.scoped_refptr.1 = type { %"class.blink::ComputedStyleBase::StyleFontData"* }
%"class.blink::ComputedStyleBase::StyleFontData" = type { %"class.WTF::RefCounted.2", %"class.blink::Font" }
%"class.WTF::RefCounted.2" = type { %"class.base::RefCounted.3" }
%"class.base::RefCounted.3" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::Font" = type { %"class.blink::FontDescription", %class.scoped_refptr.28 }
%"class.blink::FontDescription" = type { %"class.blink::FontFamily", %class.scoped_refptr.7, %class.scoped_refptr.10, %class.scoped_refptr.20, float, float, float, float, float, float, %"struct.blink::FontSelectionRequest", %"class.blink::FontSelectionValue", %union.anon.27 }
%"class.blink::FontFamily" = type { %"class.WTF::AtomicString", %class.scoped_refptr.6 }
%"class.WTF::AtomicString" = type { %"class.WTF::String" }
%"class.WTF::String" = type { %class.scoped_refptr.4 }
%class.scoped_refptr.4 = type { %"class.WTF::StringImpl"* }
%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.5" }
%"struct.std::__1::__atomic_base.5" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%class.scoped_refptr.6 = type { %"class.blink::SharedFontFamily"* }
%"class.blink::SharedFontFamily" = type <{ %"class.blink::FontFamily", %"class.WTF::RefCounted.623", [4 x i8] }>
%"class.WTF::RefCounted.623" = type { %"class.base::RefCounted.624" }
%"class.base::RefCounted.624" = type { %"class.base::subtle::RefCountedBase" }
%class.scoped_refptr.7 = type { %"class.blink::FontFeatureSettings"* }
%"class.blink::FontFeatureSettings" = type <{ %"class.blink::FontSettings", %"class.WTF::RefCounted.8", [4 x i8] }>
%"class.blink::FontSettings" = type { %"class.WTF::Vector" }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase" }
%"class.WTF::VectorBufferBase" = type { %"class.blink::FontTagValuePair"*, i32, i32 }
%"class.blink::FontTagValuePair" = type { i32, i32 }
%"class.WTF::RefCounted.8" = type { %"class.base::RefCounted.9" }
%"class.base::RefCounted.9" = type { %"class.base::subtle::RefCountedBase" }
%class.scoped_refptr.10 = type { %"class.blink::FontVariationSettings"* }
%"class.blink::FontVariationSettings" = type <{ %"class.blink::FontSettings.11", %"class.WTF::RefCounted.18", [4 x i8] }>
%"class.blink::FontSettings.11" = type { %"class.WTF::Vector.12" }
%"class.WTF::Vector.12" = type { %"class.WTF::VectorBuffer.13" }
%"class.WTF::VectorBuffer.13" = type { %"class.WTF::VectorBufferBase.14" }
%"class.WTF::VectorBufferBase.14" = type { %"class.blink::FontTagValuePair.15"*, i32, i32 }
%"class.blink::FontTagValuePair.15" = type { i32, float }
%"class.WTF::RefCounted.18" = type { %"class.base::RefCounted.19" }
%"class.base::RefCounted.19" = type { %"class.base::subtle::RefCountedBase" }
%class.scoped_refptr.20 = type { %"class.blink::LayoutLocale"* }
%"class.blink::LayoutLocale" = type <{ %"class.WTF::RefCounted.21", [4 x i8], %"class.WTF::AtomicString", %"class.std::__1::basic_string", %"class.WTF::CaseMap::Locale", %class.scoped_refptr.24, %struct.hb_language_impl_t*, i32, i32, i8, [7 x i8] }>
%"class.WTF::RefCounted.21" = type { %"class.base::RefCounted.22" }
%"class.base::RefCounted.22" = type { %"class.base::subtle::RefCountedBase" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.WTF::CaseMap::Locale" = type { i8* }
%class.scoped_refptr.24 = type { %"class.blink::Hyphenation"* }
%"class.blink::Hyphenation" = type <{ i32 (...)**, %"class.WTF::RefCounted.25", [4 x i8] }>
%"class.WTF::RefCounted.25" = type { %"class.base::RefCounted.26" }
%"class.base::RefCounted.26" = type { %"class.base::subtle::RefCountedBase" }
%struct.hb_language_impl_t = type opaque
%"struct.blink::FontSelectionRequest" = type { %"class.blink::FontSelectionValue", %"class.blink::FontSelectionValue", %"class.blink::FontSelectionValue" }
%"class.blink::FontSelectionValue" = type { i16 }
%union.anon.27 = type { %"struct.blink::FontDescription::BitFields" }
%"struct.blink::FontDescription::BitFields" = type { i56 }
%class.scoped_refptr.28 = type { %"class.blink::FontFallbackList"* }
%"class.blink::FontFallbackList" = type { %"class.WTF::RefCounted.29", %"class.WTF::Vector.31", %"class.blink::SimpleFontData"*, %"class.blink::WeakPersistent", i32, i16, i8, %"class.base::WeakPtr" }
%"class.WTF::RefCounted.29" = type { %"class.base::RefCounted.30" }
%"class.base::RefCounted.30" = type { %"class.base::subtle::RefCountedBase" }
%"class.WTF::Vector.31" = type { %"class.WTF::VectorBuffer.32" }
%"class.WTF::VectorBuffer.32" = type { %"class.WTF::VectorBufferBase.33", [8 x i8] }
%"class.WTF::VectorBufferBase.33" = type { %class.scoped_refptr.34*, i32, i32 }
%class.scoped_refptr.34 = type { %"class.blink::FontData"* }
%"class.blink::FontData" = type <{ i32 (...)**, %"class.WTF::RefCounted.35", [4 x i8] }>
%"class.WTF::RefCounted.35" = type { %"class.base::RefCounted.36" }
%"class.base::RefCounted.36" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::SimpleFontData" = type { %"class.blink::FontData.base", %"class.blink::FontMetrics", float, float, [4 x i8], %"class.blink::FontPlatformData", %class.SkFont, i16, float, i16, %"class.std::__1::unique_ptr", %class.scoped_refptr.55, i32, i32, %"struct.blink::FontHeight" }
%"class.blink::FontData.base" = type <{ i32 (...)**, %"class.WTF::RefCounted.35" }>
%"class.blink::FontMetrics" = type <{ i32, float, float, float, float, float, float, %"class.absl::optional", %"class.absl::optional", i32, i32, i8, i8, [2 x i8] }>
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon.39 }
%union.anon.39 = type { float }
%"class.blink::FontPlatformData" = type <{ %class.sk_sp, %"class.std::__1::basic_string", float, i8, i8, i8, i8, i32, %"struct.blink::WebFontRenderStyle", [5 x i8], %class.scoped_refptr.50, i8, [7 x i8] }>
%class.sk_sp = type { %class.SkTypeface* }
%class.SkTypeface = type <{ %class.SkWeakRefCnt, i32, %class.SkFontStyle, %struct.SkRect, %class.SkOnce, i8, [6 x i8] }>
%class.SkWeakRefCnt = type { %class.SkRefCnt.base, %"struct.std::__1::atomic.40" }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic.40" }>
%"struct.std::__1::atomic.40" = type { %"struct.std::__1::__atomic_base.41" }
%"struct.std::__1::__atomic_base.41" = type { %"struct.std::__1::__atomic_base.42" }
%"struct.std::__1::__atomic_base.42" = type { %"struct.std::__1::__cxx_atomic_impl.43" }
%"struct.std::__1::__cxx_atomic_impl.43" = type { %"struct.std::__1::__cxx_atomic_base_impl.44" }
%"struct.std::__1::__cxx_atomic_base_impl.44" = type { i32 }
%class.SkFontStyle = type { i32 }
%struct.SkRect = type { float, float, float, float }
%class.SkOnce = type { %"struct.std::__1::atomic.45" }
%"struct.std::__1::atomic.45" = type { %"struct.std::__1::__atomic_base.46" }
%"struct.std::__1::__atomic_base.46" = type { %"struct.std::__1::__atomic_base.47" }
%"struct.std::__1::__atomic_base.47" = type { %"struct.std::__1::__cxx_atomic_impl.48" }
%"struct.std::__1::__cxx_atomic_impl.48" = type { %"struct.std::__1::__cxx_atomic_base_impl.49" }
%"struct.std::__1::__cxx_atomic_base_impl.49" = type { i8 }
%"struct.blink::WebFontRenderStyle" = type { i8, i8, i8, i8, i8, i8, i8 }
%class.scoped_refptr.50 = type { %"class.blink::HarfBuzzFace"* }
%"class.blink::HarfBuzzFace" = type opaque
%class.SkFont = type <{ %class.sk_sp, float, float, float, i8, i8, i8, i8 }>
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.51" }
%"class.std::__1::__compressed_pair.51" = type { %"struct.std::__1::__compressed_pair_elem.52" }
%"struct.std::__1::__compressed_pair_elem.52" = type { %"struct.blink::SimpleFontData::DerivedFontData"* }
%"struct.blink::SimpleFontData::DerivedFontData" = type { %class.scoped_refptr.53, %class.scoped_refptr.53 }
%class.scoped_refptr.53 = type { %"class.blink::SimpleFontData"* }
%class.scoped_refptr.55 = type { %"class.blink::CustomFontData"* }
%"class.blink::CustomFontData" = type <{ i32 (...)**, %"class.WTF::RefCounted.56", [4 x i8] }>
%"class.WTF::RefCounted.56" = type { %"class.base::RefCounted.57" }
%"class.base::RefCounted.57" = type { %"class.base::subtle::RefCountedBase" }
%"struct.blink::FontHeight" = type { %"class.blink::LayoutUnit", %"class.blink::LayoutUnit" }
%"class.blink::WeakPersistent" = type { %"class.blink::PersistentBase" }
%"class.blink::PersistentBase" = type { %"class.blink::FontFallbackMap"*, %"class.blink::PersistentNodePtr" }
%"class.blink::FontFallbackMap" = type opaque
%"class.blink::PersistentNodePtr" = type { %"class.blink::PersistentNode"* }
%"class.blink::PersistentNode" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"class.blink::Visitor" = type { i32 (...)**, %"class.blink::ThreadState"* }
%"class.blink::ThreadState" = type <{ %"class.std::__1::unique_ptr.58", i32, [4 x i8], %"class.std::__1::unique_ptr.196", %"class.std::__1::unique_ptr.196", i8**, i8, i8, i8, i8, i8, i8, [2 x i8], i64, i64, i32, i32, i32, [4 x i8], %"class.WTF::Deque", %"class.v8::Isolate"*, void (%"class.v8::Isolate"*, %"class.v8::EmbedderGraph"*, i8*)*, %"class.std::__1::unique_ptr.206", %"class.std::__1::unique_ptr.212", %"struct.blink::ThreadState::GCData", %"class.std::__1::unique_ptr.224", %"class.std::__1::unique_ptr.230", %"class.base::JobHandle", %"class.base::JobHandle", %"struct.std::__1::atomic.237", [7 x i8], i64, i8, [7 x i8], i64, %"class.base::TimeTicks", i8, i8, [6 x i8] }>
%"class.std::__1::unique_ptr.58" = type { %"class.std::__1::__compressed_pair.59" }
%"class.std::__1::__compressed_pair.59" = type { %"struct.std::__1::__compressed_pair_elem.60" }
%"struct.std::__1::__compressed_pair_elem.60" = type { %"class.blink::ThreadHeap"* }
%"class.blink::ThreadHeap" = type { %"class.blink::ThreadState"*, %"class.std::__1::unique_ptr.61", %"class.std::__1::unique_ptr.67", %"class.std::__1::unique_ptr.73", %"class.std::__1::unique_ptr.79", %"class.std::__1::unique_ptr.85", %"class.std::__1::unique_ptr.91", %"class.std::__1::unique_ptr.102", %"class.std::__1::unique_ptr.109", %"class.std::__1::unique_ptr.109", %"class.std::__1::unique_ptr.116", %"class.std::__1::unique_ptr.123", %"class.std::__1::unique_ptr.130", %"class.std::__1::unique_ptr.130", %"class.std::__1::unique_ptr.137", %"class.std::__1::unique_ptr.144", %"class.std::__1::unique_ptr.151", %"class.std::__1::unique_ptr.176", %"struct.blink::ThreadHeap::LastAllocatedRegion", [9 x %"class.blink::BaseArena"*], i64, i64 }
%"class.std::__1::unique_ptr.61" = type { %"class.std::__1::__compressed_pair.62" }
%"class.std::__1::__compressed_pair.62" = type { %"struct.std::__1::__compressed_pair_elem.63" }
%"struct.std::__1::__compressed_pair_elem.63" = type { %"class.blink::ThreadHeapStatsCollector"* }
%"class.blink::ThreadHeapStatsCollector" = type opaque
%"class.std::__1::unique_ptr.67" = type { %"class.std::__1::__compressed_pair.68" }
%"class.std::__1::__compressed_pair.68" = type { %"struct.std::__1::__compressed_pair_elem.69" }
%"struct.std::__1::__compressed_pair_elem.69" = type { %"class.blink::RegionTree"* }
%"class.blink::RegionTree" = type opaque
%"class.std::__1::unique_ptr.73" = type { %"class.std::__1::__compressed_pair.74" }
%"class.std::__1::__compressed_pair.74" = type { %"struct.std::__1::__compressed_pair_elem.75" }
%"struct.std::__1::__compressed_pair_elem.75" = type { %"class.blink::PageBloomFilter"* }
%"class.blink::PageBloomFilter" = type opaque
%"class.std::__1::unique_ptr.79" = type { %"class.std::__1::__compressed_pair.80" }
%"class.std::__1::__compressed_pair.80" = type { %"struct.std::__1::__compressed_pair_elem.81" }
%"struct.std::__1::__compressed_pair_elem.81" = type { %"class.blink::PagePool"* }
%"class.blink::PagePool" = type opaque
%"class.std::__1::unique_ptr.85" = type { %"class.std::__1::__compressed_pair.86" }
%"class.std::__1::__compressed_pair.86" = type { %"struct.std::__1::__compressed_pair_elem.87" }
%"struct.std::__1::__compressed_pair_elem.87" = type { %"class.blink::ProcessHeapReporter"* }
%"class.blink::ProcessHeapReporter" = type opaque
%"class.std::__1::unique_ptr.91" = type { %"class.std::__1::__compressed_pair.92" }
%"class.std::__1::__compressed_pair.92" = type { %"struct.std::__1::__compressed_pair_elem.93" }
%"struct.std::__1::__compressed_pair_elem.93" = type { %"class.blink::Worklist"* }
%"class.blink::Worklist" = type { [4 x %"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, i64, [512 x %"struct.blink::TraceDescriptor"] }
%"struct.blink::TraceDescriptor" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"struct.std::__1::atomic.94" }
%"class.base::Lock" = type { %"class.base::internal::LockImpl" }
%"class.base::internal::LockImpl" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"struct.std::__1::atomic.94" = type { %"struct.std::__1::__atomic_base.95" }
%"struct.std::__1::__atomic_base.95" = type { %"struct.std::__1::__atomic_base.96" }
%"struct.std::__1::__atomic_base.96" = type { %"struct.std::__1::__cxx_atomic_impl.97" }
%"struct.std::__1::__cxx_atomic_impl.97" = type { %"struct.std::__1::__cxx_atomic_base_impl.98" }
%"struct.std::__1::__cxx_atomic_base_impl.98" = type { i64 }
%"class.std::__1::unique_ptr.102" = type { %"class.std::__1::__compressed_pair.103" }
%"class.std::__1::__compressed_pair.103" = type { %"struct.std::__1::__compressed_pair_elem.104" }
%"struct.std::__1::__compressed_pair_elem.104" = type { %"class.blink::Worklist.105"* }
%"class.blink::Worklist.105" = type { [4 x %"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"struct.std::__1::atomic.94" }
%"class.std::__1::unique_ptr.109" = type { %"class.std::__1::__compressed_pair.110" }
%"class.std::__1::__compressed_pair.110" = type { %"struct.std::__1::__compressed_pair_elem.111" }
%"struct.std::__1::__compressed_pair_elem.111" = type { %"class.blink::Worklist.112"* }
%"class.blink::Worklist.112" = type { [4 x %"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"class.blink::Worklist<const void *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *, 16, 4>::Segment" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, i64, [16 x i8*] }
%"class.blink::Worklist<const void *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"struct.std::__1::atomic.94" }
%"class.std::__1::unique_ptr.116" = type { %"class.std::__1::__compressed_pair.117" }
%"class.std::__1::__compressed_pair.117" = type { %"struct.std::__1::__compressed_pair_elem.118" }
%"struct.std::__1::__compressed_pair_elem.118" = type { %"class.blink::Worklist.119"* }
%"class.blink::Worklist.119" = type { [4 x %"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.94" }
%"class.std::__1::unique_ptr.123" = type { %"class.std::__1::__compressed_pair.124" }
%"class.std::__1::__compressed_pair.124" = type { %"struct.std::__1::__compressed_pair_elem.125" }
%"struct.std::__1::__compressed_pair_elem.125" = type { %"class.blink::Worklist.126"* }
%"class.blink::Worklist.126" = type { [4 x %"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *const *, 256, 4>::Segment" = type opaque
%"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"struct.std::__1::atomic.94" }
%"class.std::__1::unique_ptr.130" = type { %"class.std::__1::__compressed_pair.131" }
%"class.std::__1::__compressed_pair.131" = type { %"struct.std::__1::__compressed_pair_elem.132" }
%"struct.std::__1::__compressed_pair_elem.132" = type { %"class.blink::Worklist.133"* }
%"class.blink::Worklist.133" = type { [4 x %"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.94" }
%"class.std::__1::unique_ptr.137" = type { %"class.std::__1::__compressed_pair.138" }
%"class.std::__1::__compressed_pair.138" = type { %"struct.std::__1::__compressed_pair_elem.139" }
%"struct.std::__1::__compressed_pair_elem.139" = type { %"class.blink::Worklist.140"* }
%"class.blink::Worklist.140" = type { [4 x %"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment" = type opaque
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"struct.std::__1::atomic.94" }
%"class.std::__1::unique_ptr.144" = type { %"class.std::__1::__compressed_pair.145" }
%"class.std::__1::__compressed_pair.145" = type { %"struct.std::__1::__compressed_pair_elem.146" }
%"struct.std::__1::__compressed_pair_elem.146" = type { %"class.blink::Worklist.147"* }
%"class.blink::Worklist.147" = type { [4 x %"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, i64, [64 x %"struct.blink::NotSafeToConcurrentlyTraceItem"] }
%"struct.blink::NotSafeToConcurrentlyTraceItem" = type { %"struct.blink::TraceDescriptor", i64 }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.94" }
%"class.std::__1::unique_ptr.151" = type { %"class.std::__1::__compressed_pair.152" }
%"class.std::__1::__compressed_pair.152" = type { %"struct.std::__1::__compressed_pair_elem.153" }
%"struct.std::__1::__compressed_pair_elem.153" = type { %"class.blink::WeakContainersWorklist"* }
%"class.blink::WeakContainersWorklist" = type { %"class.WTF::Mutex", %"class.std::__1::unordered_set" }
%"class.WTF::Mutex" = type { %"class.WTF::MutexBase" }
%"class.WTF::MutexBase" = type { %"struct.WTF::PlatformMutex" }
%"struct.WTF::PlatformMutex" = type { %union.pthread_mutex_t }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.154", %"class.std::__1::__compressed_pair.163", %"class.std::__1::__compressed_pair.168", %"class.std::__1::__compressed_pair.170", [4 x i8] }>
%"class.std::__1::unique_ptr.154" = type { %"class.std::__1::__compressed_pair.155" }
%"class.std::__1::__compressed_pair.155" = type { %"struct.std::__1::__compressed_pair_elem.156", %"struct.std::__1::__compressed_pair_elem.157" }
%"struct.std::__1::__compressed_pair_elem.156" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.157" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.158" }
%"class.std::__1::__compressed_pair.158" = type { %"struct.std::__1::__compressed_pair_elem.159" }
%"struct.std::__1::__compressed_pair_elem.159" = type { i64 }
%"class.std::__1::__compressed_pair.163" = type { %"struct.std::__1::__compressed_pair_elem.164" }
%"struct.std::__1::__compressed_pair_elem.164" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.168" = type { %"struct.std::__1::__compressed_pair_elem.159" }
%"class.std::__1::__compressed_pair.170" = type { %"struct.std::__1::__compressed_pair_elem.171" }
%"struct.std::__1::__compressed_pair_elem.171" = type { float }
%"class.std::__1::unique_ptr.176" = type { %"class.std::__1::__compressed_pair.177" }
%"class.std::__1::__compressed_pair.177" = type { %"struct.std::__1::__compressed_pair_elem.178" }
%"struct.std::__1::__compressed_pair_elem.178" = type { %"class.blink::HeapCompact"* }
%"class.blink::HeapCompact" = type <{ %"class.blink::ThreadHeap"*, %"class.std::__1::unique_ptr.179", i8, [7 x i8], i64, i64, i32, [4 x i8], i64, i8, [7 x i8] }>
%"class.std::__1::unique_ptr.179" = type { %"class.std::__1::__compressed_pair.180" }
%"class.std::__1::__compressed_pair.180" = type { %"struct.std::__1::__compressed_pair_elem.181" }
%"struct.std::__1::__compressed_pair_elem.181" = type { %"class.blink::HeapCompact::MovableObjectFixups"* }
%"class.blink::HeapCompact::MovableObjectFixups" = type opaque
%"struct.blink::ThreadHeap::LastAllocatedRegion" = type { i8*, i64 }
%"class.blink::BaseArena" = type <{ i32 (...)**, %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::ThreadState"*, i32, [4 x i8] }>
%"class.blink::PageStackThreadSafe" = type { %"class.blink::PageStack", %"class.WTF::Mutex" }
%"class.blink::PageStack" = type { %"class.WTF::Vector.188" }
%"class.WTF::Vector.188" = type { %"class.WTF::VectorBuffer.189" }
%"class.WTF::VectorBuffer.189" = type { %"class.WTF::VectorBufferBase.190" }
%"class.WTF::VectorBufferBase.190" = type { %"class.blink::BasePage"**, i32, i32 }
%"class.blink::BasePage" = type <{ i32 (...)**, %"class.blink::PageMemory"*, %"class.blink::BaseArena"*, %"class.blink::ThreadState"*, i64, i8, i8, i8, [5 x i8] }>
%"class.blink::PageMemory" = type opaque
%"class.std::__1::unique_ptr.196" = type { %"class.std::__1::__compressed_pair.197" }
%"class.std::__1::__compressed_pair.197" = type { %"struct.std::__1::__compressed_pair_elem.198" }
%"struct.std::__1::__compressed_pair_elem.198" = type { %"class.blink::PersistentRegion"* }
%"class.blink::PersistentRegion" = type { %"class.blink::PersistentRegionBase" }
%"class.blink::PersistentRegionBase" = type { %"class.blink::PersistentNode"*, %"struct.blink::PersistentNodeSlots"* }
%"struct.blink::PersistentNodeSlots" = type { %"struct.blink::PersistentNodeSlots"*, [256 x %"class.blink::PersistentNode"] }
%"class.WTF::Deque" = type { %"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer", i32, i32 }
%"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer" = type { %"class.WTF::VectorBuffer.204" }
%"class.WTF::VectorBuffer.204" = type { %"class.WTF::VectorBufferBase.205" }
%"class.WTF::VectorBufferBase.205" = type { %"struct.std::__1::pair"*, i32, i32 }
%"struct.std::__1::pair" = type { i8*, i1 (%"class.blink::LivenessBroker"*, i8*)* }
%"class.blink::LivenessBroker" = type { i8 }
%"class.v8::Isolate" = type { i8 }
%"class.v8::EmbedderGraph" = type opaque
%"class.std::__1::unique_ptr.206" = type { %"class.std::__1::__compressed_pair.207" }
%"class.std::__1::__compressed_pair.207" = type { %"struct.std::__1::__compressed_pair_elem.208" }
%"struct.std::__1::__compressed_pair_elem.208" = type { %"class.blink::UnifiedHeapController"* }
%"class.blink::UnifiedHeapController" = type opaque
%"class.std::__1::unique_ptr.212" = type { %"class.std::__1::__compressed_pair.213" }
%"class.std::__1::__compressed_pair.213" = type { %"struct.std::__1::__compressed_pair_elem.214" }
%"struct.std::__1::__compressed_pair_elem.214" = type { %"class.v8::EmbedderRootsHandler"* }
%"class.v8::EmbedderRootsHandler" = type { i32 (...)** }
%"struct.blink::ThreadState::GCData" = type { i32, i32, i32, i32, %"class.std::__1::unique_ptr.218" }
%"class.std::__1::unique_ptr.218" = type { %"class.std::__1::__compressed_pair.219" }
%"class.std::__1::__compressed_pair.219" = type { %"struct.std::__1::__compressed_pair_elem.220" }
%"struct.std::__1::__compressed_pair_elem.220" = type { %"class.blink::MarkingVisitor"* }
%"class.blink::MarkingVisitor" = type { %"class.blink::MarkingVisitorBase", %"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" }
%"class.blink::MarkingVisitorBase" = type { %"class.blink::Visitor", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View", %"class.blink::Worklist<const void *, 16, 4>::View", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View", %"class.blink::Worklist<const void *const *, 256, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::WeakContainersWorklist"*, i64, i32, i32 }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View" = type <{ %"class.blink::Worklist"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View" = type <{ %"class.blink::Worklist.105"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *, 16, 4>::View" = type <{ %"class.blink::Worklist.112"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View" = type <{ %"class.blink::Worklist.119"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *const *, 256, 4>::View" = type <{ %"class.blink::Worklist.126"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View" = type <{ %"class.blink::Worklist.133"*, i32, [4 x i8] }>
%"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" = type { %"class.std::__1::vector", i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.blink::HeapObjectHeader"**, %"class.blink::HeapObjectHeader"**, %"class.std::__1::__compressed_pair.618" }
%"class.blink::HeapObjectHeader" = type { i32, i16, i16 }
%"class.std::__1::__compressed_pair.618" = type { %"struct.std::__1::__compressed_pair_elem.619" }
%"struct.std::__1::__compressed_pair_elem.619" = type { %"class.blink::HeapObjectHeader"** }
%"class.std::__1::unique_ptr.224" = type { %"class.std::__1::__compressed_pair.225" }
%"class.std::__1::__compressed_pair.225" = type { %"struct.std::__1::__compressed_pair_elem.226" }
%"struct.std::__1::__compressed_pair_elem.226" = type { %"class.blink::ThreadState::IncrementalMarkingScheduler"* }
%"class.blink::ThreadState::IncrementalMarkingScheduler" = type opaque
%"class.std::__1::unique_ptr.230" = type { %"class.std::__1::__compressed_pair.231" }
%"class.std::__1::__compressed_pair.231" = type { %"struct.std::__1::__compressed_pair_elem.232" }
%"struct.std::__1::__compressed_pair_elem.232" = type { %"class.blink::MarkingSchedulingOracle"* }
%"class.blink::MarkingSchedulingOracle" = type opaque
%"class.base::JobHandle" = type { %class.scoped_refptr.236 }
%class.scoped_refptr.236 = type { %"class.base::internal::JobTaskSource"* }
%"class.base::internal::JobTaskSource" = type opaque
%"struct.std::__1::atomic.237" = type { %"struct.std::__1::__atomic_base.238" }
%"struct.std::__1::__atomic_base.238" = type { %"struct.std::__1::__cxx_atomic_impl.239" }
%"struct.std::__1::__cxx_atomic_impl.239" = type { %"struct.std::__1::__cxx_atomic_base_impl.240" }
%"struct.std::__1::__cxx_atomic_base_impl.240" = type { i8 }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.base::WeakPtr" = type { %"class.base::internal::WeakPtrBase" }
%"class.base::internal::WeakPtrBase" = type { %"class.base::internal::WeakReference", i64 }
%"class.base::internal::WeakReference" = type { %class.scoped_refptr.241 }
%class.scoped_refptr.241 = type { %"class.base::internal::WeakReference::Flag"* }
%"class.base::internal::WeakReference::Flag" = type <{ %"class.base::RefCountedThreadSafe", %"class.base::AtomicFlag", [3 x i8] }>
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic.40" }
%"class.base::AtomicFlag" = type { %"struct.std::__1::atomic.45" }
%"class.blink::Length" = type <{ %union.anon.242, i8, i8, i8, i8 }>
%union.anon.242 = type { i32 }
%"class.blink::StyleColor" = type { %"class.blink::Color", i32 }
%"class.blink::Color" = type { i32 }
%"class.blink::DataRef.243" = type { %class.scoped_refptr.244 }
%class.scoped_refptr.244 = type { %"class.blink::ComputedStyleBase::StyleRareInheritedUsageLessThan64PercentData"* }
%"class.blink::ComputedStyleBase::StyleRareInheritedUsageLessThan64PercentData" = type <{ %"class.WTF::RefCounted.245", [4 x i8], %"class.blink::DataRef.247", %"class.blink::DataRef.279", %"class.WTF::Vector.283", %"class.WTF::AtomicString", %"class.WTF::AtomicString", %class.scoped_refptr.288, %class.scoped_refptr.297, %"class.blink::Persistent.305", %"class.blink::Persistent.307", %"class.blink::TextDecorationThickness", %"class.blink::Length", %"class.blink::Length", %"class.blink::TextSizeAdjust", %"struct.blink::TabSize", float, %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::StyleAutoColor", i16, i16, [5 x i8], [3 x i8] }>
%"class.WTF::RefCounted.245" = type { %"class.base::RefCounted.246" }
%"class.base::RefCounted.246" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::DataRef.247" = type { %class.scoped_refptr.248 }
%class.scoped_refptr.248 = type { %"class.blink::ComputedStyleBase::StyleRareInheritedUsageLessThan64PercentSubData"* }
%"class.blink::ComputedStyleBase::StyleRareInheritedUsageLessThan64PercentSubData" = type <{ %"class.WTF::RefCounted.249", [4 x i8], %"class.WTF::AtomicString", %class.scoped_refptr.251, %class.scoped_refptr.258, %"class.blink::Persistent.269", float, %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::StyleAutoColor", %"class.blink::StyleAutoColor", i16, i16, i16, i8, i8, i16, [2 x i8] }>
%"class.WTF::RefCounted.249" = type { %"class.base::RefCounted.250" }
%"class.base::RefCounted.250" = type { %"class.base::subtle::RefCountedBase" }
%class.scoped_refptr.251 = type { %"class.base::RefCountedData"* }
%"class.base::RefCountedData" = type { %"class.base::RefCountedThreadSafe.252", %"class.WTF::Vector.253" }
%"class.base::RefCountedThreadSafe.252" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.WTF::Vector.253" = type { %"class.WTF::VectorBuffer.254" }
%"class.WTF::VectorBuffer.254" = type { %"class.WTF::VectorBufferBase.255" }
%"class.WTF::VectorBufferBase.255" = type { %"class.blink::AppliedTextDecoration"*, i32, i32 }
%"class.blink::AppliedTextDecoration" = type { i8, %"class.blink::Color", %"class.blink::TextDecorationThickness", %"class.blink::Length" }
%class.scoped_refptr.258 = type { %"class.blink::StyleInitialData"* }
%"class.blink::StyleInitialData" = type { %"class.WTF::RefCounted.259", %"class.blink::StyleVariables" }
%"class.WTF::RefCounted.259" = type { %"class.base::RefCounted.260" }
%"class.base::RefCounted.260" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::StyleVariables" = type { %"class.WTF::HashMap", %"class.blink::Persistent" }
%"class.WTF::HashMap" = type { %"class.WTF::HashTable" }
%"class.WTF::HashTable" = type <{ %"struct.WTF::KeyValuePair"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair" = type { %"class.WTF::AtomicString", %class.scoped_refptr.651 }
%class.scoped_refptr.651 = type { %"class.blink::CSSVariableData"* }
%"class.blink::CSSVariableData" = type { %"class.WTF::RefCounted.652", %"class.WTF::Vector.502", %"class.WTF::Vector.654", %"class.WTF::String", i8, i8, i8, i8, %"class.WTF::String", %"class.WTF::TextEncoding" }
%"class.WTF::RefCounted.652" = type { %"class.base::RefCounted.653" }
%"class.base::RefCounted.653" = type { %"class.base::subtle::RefCountedBase" }
%"class.WTF::Vector.502" = type { %"class.WTF::VectorBuffer.503" }
%"class.WTF::VectorBuffer.503" = type { %"class.WTF::VectorBufferBase.504" }
%"class.WTF::VectorBufferBase.504" = type { %"class.WTF::String"*, i32, i32 }
%"class.WTF::Vector.654" = type { %"class.WTF::VectorBuffer.655" }
%"class.WTF::VectorBuffer.655" = type { %"class.WTF::VectorBufferBase.656" }
%"class.WTF::VectorBufferBase.656" = type { %"class.blink::CSSParserToken"*, i32, i32 }
%"class.blink::CSSParserToken" = type { i24, i32, i8*, %union.anon.657 }
%union.anon.657 = type { double }
%"class.WTF::TextEncoding" = type { i8* }
%"class.blink::Persistent" = type { %"class.blink::PersistentBase.263" }
%"class.blink::PersistentBase.263" = type { %"class.blink::HeapHashMap"*, %"class.blink::PersistentNodePtr.268" }
%"class.blink::HeapHashMap" = type { %"class.WTF::HashMap.264" }
%"class.WTF::HashMap.264" = type { %"class.WTF::HashTable.265" }
%"class.WTF::HashTable.265" = type <{ %"struct.WTF::KeyValuePair.267"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.267" = type opaque
%"class.blink::PersistentNodePtr.268" = type { %"class.blink::PersistentNode"* }
%"class.blink::Persistent.269" = type { %"class.blink::PersistentBase.270" }
%"class.blink::PersistentBase.270" = type { %"class.blink::HeapVector"*, %"class.blink::PersistentNodePtr.268" }
%"class.blink::HeapVector" = type { %"class.WTF::Vector.273" }
%"class.WTF::Vector.273" = type { %"class.WTF::VectorBuffer.274" }
%"class.WTF::VectorBuffer.274" = type { %"class.WTF::VectorBufferBase.275" }
%"class.WTF::VectorBufferBase.275" = type { %"class.blink::CursorData"*, i32, i32 }
%"class.blink::CursorData" = type <{ %"class.blink::Member", i8, [3 x i8], %"class.blink::IntPoint", [4 x i8] }>
%"class.blink::Member" = type { %"class.blink::MemberBase" }
%"class.blink::MemberBase" = type { %"class.blink::StyleImage"* }
%"class.blink::StyleImage" = type <{ i32 (...)**, i8, [7 x i8] }>
%"class.blink::IntPoint" = type { i32, i32 }
%"class.blink::DataRef.279" = type { %class.scoped_refptr.280 }
%class.scoped_refptr.280 = type { %"class.blink::ComputedStyleBase::StyleRareInheritedUsageLessThan100PercentData"* }
%"class.blink::ComputedStyleBase::StyleRareInheritedUsageLessThan100PercentData" = type <{ %"class.WTF::RefCounted.281", %"class.blink::StyleColor", i16, i8, i8 }>
%"class.WTF::RefCounted.281" = type { %"class.base::RefCounted.282" }
%"class.base::RefCounted.282" = type { %"class.base::subtle::RefCountedBase" }
%"class.WTF::Vector.283" = type { %"class.WTF::VectorBuffer.284" }
%"class.WTF::VectorBuffer.284" = type { %"class.WTF::VectorBufferBase.285" }
%"class.WTF::VectorBufferBase.285" = type { %"class.WTF::AtomicString"*, i32, i32 }
%class.scoped_refptr.288 = type { %"class.blink::QuotesData"* }
%"class.blink::QuotesData" = type { %"class.WTF::RefCounted.289", %"class.WTF::Vector.291" }
%"class.WTF::RefCounted.289" = type { %"class.base::RefCounted.290" }
%"class.base::RefCounted.290" = type { %"class.base::subtle::RefCountedBase" }
%"class.WTF::Vector.291" = type { %"class.WTF::VectorBuffer.292" }
%"class.WTF::VectorBuffer.292" = type { %"class.WTF::VectorBufferBase.293" }
%"class.WTF::VectorBufferBase.293" = type { %"struct.std::__1::pair.294"*, i32, i32 }
%"struct.std::__1::pair.294" = type { %"class.WTF::String", %"class.WTF::String" }
%class.scoped_refptr.297 = type { %"class.blink::ShadowList"* }
%"class.blink::ShadowList" = type { %"class.WTF::RefCounted.298", [4 x i8], %"class.WTF::Vector.300" }
%"class.WTF::RefCounted.298" = type { %"class.base::RefCounted.299" }
%"class.base::RefCounted.299" = type { %"class.base::subtle::RefCountedBase" }
%"class.WTF::Vector.300" = type { %"class.WTF::VectorBuffer.base", [4 x i8] }
%"class.WTF::VectorBuffer.base" = type <{ %"class.WTF::VectorBufferBase.302", [28 x i8] }>
%"class.WTF::VectorBufferBase.302" = type { %"class.blink::ShadowData"*, i32, i32 }
%"class.blink::ShadowData" = type { %"class.blink::FloatPoint", float, float, %"class.blink::StyleColor", i32 }
%"class.blink::FloatPoint" = type { float, float }
%"class.blink::Persistent.305" = type { %"class.blink::PersistentBase.306" }
%"class.blink::PersistentBase.306" = type { %"class.blink::StyleImage"*, %"class.blink::PersistentNodePtr.268" }
%"class.blink::Persistent.307" = type { %"class.blink::PersistentBase.308" }
%"class.blink::PersistentBase.308" = type { %"class.blink::ListStyleTypeData"*, %"class.blink::PersistentNodePtr.268" }
%"class.blink::ListStyleTypeData" = type { i32, %"class.WTF::AtomicString", %"class.blink::Member.311", %"class.blink::Member.313" }
%"class.blink::Member.311" = type { %"class.blink::MemberBase.312" }
%"class.blink::MemberBase.312" = type { %"class.blink::TreeScope"* }
%"class.blink::TreeScope" = type opaque
%"class.blink::Member.313" = type { %"class.blink::MemberBase.314" }
%"class.blink::MemberBase.314" = type { %"class.blink::CounterStyle"* }
%"class.blink::CounterStyle" = type opaque
%"class.blink::TextDecorationThickness" = type { %"class.blink::Length", i8, [3 x i8] }
%"class.blink::TextSizeAdjust" = type { float }
%"struct.blink::TabSize" = type <{ float, i8, [3 x i8] }>
%"class.blink::StyleAutoColor" = type { %"class.blink::StyleColor" }
%"class.blink::DataRef.315" = type { %class.scoped_refptr.316 }
%class.scoped_refptr.316 = type { %"class.blink::ComputedStyleBase::StyleVisualData"* }
%"class.blink::ComputedStyleBase::StyleVisualData" = type <{ %"class.WTF::RefCounted.317", %"class.blink::LengthBox", float, i8, [3 x i8] }>
%"class.WTF::RefCounted.317" = type { %"class.base::RefCounted.318" }
%"class.base::RefCounted.318" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::LengthBox" = type { %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length" }
%"class.blink::DataRef.319" = type { %class.scoped_refptr.320 }
%class.scoped_refptr.320 = type { %"class.blink::ComputedStyleBase::StyleRareNonInheritedUsageLessThan14PercentData"* }
%"class.blink::ComputedStyleBase::StyleRareNonInheritedUsageLessThan14PercentData" = type <{ %"class.WTF::RefCounted.321", [4 x i8], %"class.blink::DataRef.323", %"class.blink::DataRef.389", %"class.blink::TransformOperations", %class.scoped_refptr.297, %"class.blink::Persistent.513", %"class.blink::TransformOrigin", float, float, %"class.blink::StyleSelfAlignmentData", %"class.blink::StyleContentAlignmentData", i16, [2 x i8] }>
%"class.WTF::RefCounted.321" = type { %"class.base::RefCounted.322" }
%"class.base::RefCounted.322" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::DataRef.323" = type { %class.scoped_refptr.324 }
%class.scoped_refptr.324 = type { %"class.blink::ComputedStyleBase::StyleRareNonInheritedUsageLessThan22PercentData"* }
%"class.blink::ComputedStyleBase::StyleRareNonInheritedUsageLessThan22PercentData" = type <{ %"class.WTF::RefCounted.325", [4 x i8], %"class.blink::DataRef.327", %"class.blink::Persistent.365", %"class.blink::Length", float, float, %"class.blink::LayoutUnit", %"class.blink::LayoutUnit", i32, i32, %"class.blink::StyleSelfAlignmentData", %"class.blink::StyleContentAlignmentData", [3 x i8], [5 x i8] }>
%"class.WTF::RefCounted.325" = type { %"class.base::RefCounted.326" }
%"class.base::RefCounted.326" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::DataRef.327" = type { %class.scoped_refptr.328 }
%class.scoped_refptr.328 = type { %"class.blink::ComputedStyleBase::StyleRareNonInheritedUsageLessThan100PercentData"* }
%"class.blink::ComputedStyleBase::StyleRareNonInheritedUsageLessThan100PercentData" = type { %"class.WTF::RefCounted.329", %"class.blink::GridTrackList", %"class.blink::GridTrackList", %"class.blink::GridTrackList", %"class.blink::GridTrackList", %"class.blink::GridPosition", %"class.blink::GridPosition", %"class.blink::GridPosition", %"class.blink::GridPosition", %"class.WTF::AtomicString", %class.scoped_refptr.347, %class.scoped_refptr.350, %class.scoped_refptr.353, %class.scoped_refptr.356, %class.scoped_refptr.357, %class.scoped_refptr.358, %"class.blink::Persistent.365", %"class.blink::Persistent.380", %"class.absl::optional.384", %"class.absl::optional.384", %"struct.blink::StyleOffsetRotation", %"struct.blink::LengthPoint", %"struct.blink::LengthPoint", %"struct.blink::LengthPoint", %"struct.blink::LengthPoint", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", float, float, float, %"struct.cc::ScrollSnapType", %"struct.cc::ScrollSnapAlign", %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::LayoutUnit", i32, i16, [2 x i8], %"class.blink::StyleSelfAlignmentData", %"class.blink::StyleSelfAlignmentData", i32 }
%"class.WTF::RefCounted.329" = type { %"class.base::RefCounted.330" }
%"class.base::RefCounted.330" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::GridTrackList" = type { %"class.WTF::Vector.331", %"class.std::__1::unique_ptr.336" }
%"class.WTF::Vector.331" = type { %"class.WTF::VectorBuffer.332" }
%"class.WTF::VectorBuffer.332" = type { %"class.WTF::VectorBufferBase.333" }
%"class.WTF::VectorBufferBase.333" = type { %"class.blink::GridTrackSize"*, i32, i32 }
%"class.blink::GridTrackSize" = type <{ i32, [4 x i8], %"class.blink::GridLength", %"class.blink::GridLength", %"class.blink::GridLength", i16, [6 x i8] }>
%"class.blink::GridLength" = type <{ %"class.blink::Length", double, i32, [4 x i8] }>
%"class.std::__1::unique_ptr.336" = type { %"class.std::__1::__compressed_pair.337" }
%"class.std::__1::__compressed_pair.337" = type { %"struct.std::__1::__compressed_pair_elem.338" }
%"struct.std::__1::__compressed_pair_elem.338" = type { %"class.blink::NGGridTrackList"* }
%"class.blink::NGGridTrackList" = type { %"class.WTF::Vector.339", %"class.WTF::Vector.331", i32, i32 }
%"class.WTF::Vector.339" = type { %"class.WTF::VectorBuffer.340" }
%"class.WTF::VectorBuffer.340" = type { %"class.WTF::VectorBufferBase.341" }
%"class.WTF::VectorBufferBase.341" = type { %"struct.blink::NGGridTrackRepeater"*, i32, i32 }
%"struct.blink::NGGridTrackRepeater" = type { i32, i32, i32, i32 }
%"class.blink::GridPosition" = type { i32, i32, %"class.WTF::AtomicString" }
%class.scoped_refptr.347 = type { %"class.blink::ClipPathOperation"* }
%"class.blink::ClipPathOperation" = type <{ i32 (...)**, %"class.WTF::RefCounted.348", [4 x i8] }>
%"class.WTF::RefCounted.348" = type { %"class.base::RefCounted.349" }
%"class.base::RefCounted.349" = type { %"class.base::subtle::RefCountedBase" }
%class.scoped_refptr.350 = type { %"class.blink::BasicShape"* }
%"class.blink::BasicShape" = type <{ i32 (...)**, %"class.WTF::RefCounted.351", [4 x i8] }>
%"class.WTF::RefCounted.351" = type { %"class.base::RefCounted.352" }
%"class.base::RefCounted.352" = type { %"class.base::subtle::RefCountedBase" }
%class.scoped_refptr.353 = type { %"class.blink::RotateTransformOperation"* }
%"class.blink::RotateTransformOperation" = type <{ %"class.blink::TransformOperation.base", [4 x i8], %"struct.blink::Rotation", i32, [4 x i8] }>
%"class.blink::TransformOperation.base" = type <{ i32 (...)**, %"class.WTF::RefCounted.354" }>
%"class.WTF::RefCounted.354" = type { %"class.base::RefCounted.355" }
%"class.base::RefCounted.355" = type { %"class.base::subtle::RefCountedBase" }
%"struct.blink::Rotation" = type { %"class.blink::FloatPoint3D", double }
%"class.blink::FloatPoint3D" = type { float, float, float }
%class.scoped_refptr.356 = type { %"class.blink::ScaleTransformOperation"* }
%"class.blink::ScaleTransformOperation" = type <{ %"class.blink::TransformOperation.base", [4 x i8], double, double, double, i32, [4 x i8] }>
%class.scoped_refptr.357 = type { %"class.blink::TranslateTransformOperation"* }
%"class.blink::TranslateTransformOperation" = type <{ %"class.blink::TransformOperation.base", %"class.blink::Length", %"class.blink::Length", [4 x i8], double, i32, [4 x i8] }>
%class.scoped_refptr.358 = type { %"class.blink::StyleReflection"* }
%"class.blink::StyleReflection" = type { %"class.WTF::RefCounted.359", i32, %"class.blink::Length", %"class.blink::NinePieceImage" }
%"class.WTF::RefCounted.359" = type { %"class.base::RefCounted.360" }
%"class.base::RefCounted.360" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::NinePieceImage" = type { %"class.blink::DataRef.361" }
%"class.blink::DataRef.361" = type { %class.scoped_refptr.362 }
%class.scoped_refptr.362 = type { %"class.blink::NinePieceImageData"* }
%"class.blink::NinePieceImageData" = type { %"class.WTF::RefCountedCopyable", i8, %"class.blink::Persistent.305", %"class.blink::LengthBox", %"class.blink::BorderImageLengthBox", %"class.blink::BorderImageLengthBox" }
%"class.WTF::RefCountedCopyable" = type { %"class.WTF::RefCounted.363" }
%"class.WTF::RefCounted.363" = type { %"class.base::RefCounted.364" }
%"class.base::RefCounted.364" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::BorderImageLengthBox" = type { %"class.blink::BorderImageLength", %"class.blink::BorderImageLength", %"class.blink::BorderImageLength", %"class.blink::BorderImageLength" }
%"class.blink::BorderImageLength" = type <{ %"class.blink::Length", double, i32, [4 x i8] }>
%"class.blink::Persistent.380" = type { %"class.blink::PersistentBase.381" }
%"class.blink::PersistentBase.381" = type { %"class.blink::ShapeValue"*, %"class.blink::PersistentNodePtr.268" }
%"class.blink::ShapeValue" = type <{ i32 (...)**, i32, [4 x i8], %class.scoped_refptr.350, %"class.blink::Member", i32, [4 x i8] }>
%"class.absl::optional.384" = type { %"class.absl::optional_internal::optional_data.385" }
%"class.absl::optional_internal::optional_data.385" = type { %"class.absl::optional_internal::optional_data_base.386" }
%"class.absl::optional_internal::optional_data_base.386" = type { %"class.absl::optional_internal::optional_data_dtor_base.387" }
%"class.absl::optional_internal::optional_data_dtor_base.387" = type { i8, [3 x i8], %union.anon.388 }
%union.anon.388 = type { %"class.blink::Length" }
%"struct.blink::StyleOffsetRotation" = type { float, i32 }
%"struct.blink::LengthPoint" = type { %"class.blink::Length", %"class.blink::Length" }
%"struct.cc::ScrollSnapType" = type { i8, i32, i32 }
%"struct.cc::ScrollSnapAlign" = type { i32, i32 }
%"class.blink::Persistent.365" = type { %"class.blink::PersistentBase.366" }
%"class.blink::PersistentBase.366" = type { %"class.blink::StyleFilterData"*, %"class.blink::PersistentNodePtr.268" }
%"class.blink::StyleFilterData" = type { %"class.blink::FilterOperations" }
%"class.blink::FilterOperations" = type { %"class.blink::HeapVector.369" }
%"class.blink::HeapVector.369" = type { %"class.WTF::Vector.372" }
%"class.WTF::Vector.372" = type { %"class.WTF::VectorBuffer.373" }
%"class.WTF::VectorBuffer.373" = type { %"class.WTF::VectorBufferBase.374" }
%"class.WTF::VectorBufferBase.374" = type { %"class.blink::Member.375"*, i32, i32 }
%"class.blink::Member.375" = type { %"class.blink::MemberBase.376" }
%"class.blink::MemberBase.376" = type { %"class.blink::FilterOperation"* }
%"class.blink::FilterOperation" = type <{ i32 (...)**, i32, [4 x i8] }>
%"class.blink::DataRef.389" = type { %class.scoped_refptr.390 }
%class.scoped_refptr.390 = type { %"class.blink::ComputedStyleBase::StyleRareNonInheritedUsageLessThan14PercentSubData"* }
%"class.blink::ComputedStyleBase::StyleRareNonInheritedUsageLessThan14PercentSubData" = type { %"class.WTF::RefCounted.391", %"class.blink::DataRef.393", %"class.blink::DataRef.397", %"class.blink::DataRef.406", %"class.WTF::AtomicString", %"class.WTF::AtomicString", %"class.WTF::AtomicString", %"class.std::__1::unique_ptr.425", %"class.std::__1::unique_ptr.436", %"class.std::__1::unique_ptr.474", %"class.std::__1::unique_ptr.485", %"class.std::__1::unique_ptr.496", %"class.WTF::Vector.502", %"class.blink::FillLayer", %"class.blink::NinePieceImage", %"class.blink::FloatSize", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", float, float, float, float, %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::LayoutUnit", i32 }
%"class.WTF::RefCounted.391" = type { %"class.base::RefCounted.392" }
%"class.base::RefCounted.392" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::DataRef.393" = type { %class.scoped_refptr.394 }
%class.scoped_refptr.394 = type { %"class.blink::ComputedStyleBase::StyleMultiColData"* }
%"class.blink::ComputedStyleBase::StyleMultiColData" = type <{ %"class.WTF::RefCounted.395", %"class.blink::StyleColor", i8, [3 x i8] }>
%"class.WTF::RefCounted.395" = type { %"class.base::RefCounted.396" }
%"class.base::RefCounted.396" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::DataRef.397" = type { %class.scoped_refptr.398 }
%class.scoped_refptr.398 = type { %"class.blink::ComputedStyleBase::StyleWillChangeData"* }
%"class.blink::ComputedStyleBase::StyleWillChangeData" = type <{ %"class.WTF::RefCounted.399", [4 x i8], %"class.WTF::Vector.401", i8, [7 x i8] }>
%"class.WTF::RefCounted.399" = type { %"class.base::RefCounted.400" }
%"class.base::RefCounted.400" = type { %"class.base::subtle::RefCountedBase" }
%"class.WTF::Vector.401" = type { %"class.WTF::VectorBuffer.402" }
%"class.WTF::VectorBuffer.402" = type { %"class.WTF::VectorBufferBase.403" }
%"class.WTF::VectorBufferBase.403" = type { i32*, i32, i32 }
%"class.blink::DataRef.406" = type { %class.scoped_refptr.407 }
%class.scoped_refptr.407 = type { %"class.blink::ComputedStyleBase::StyleGridData"* }
%"class.blink::ComputedStyleBase::StyleGridData" = type <{ %"class.WTF::RefCounted.408", [4 x i8], %"class.WTF::HashMap.410", %"class.WTF::HashMap.410", %"class.WTF::HashMap.410", %"class.WTF::HashMap.410", %"class.WTF::HashMap.410", %"class.WTF::HashMap.410", %"class.WTF::HashMap.415", %"class.WTF::HashMap.415", %"class.WTF::HashMap.415", %"class.WTF::HashMap.415", %"class.WTF::HashMap.420", %"class.WTF::Vector.331", %"class.WTF::Vector.331", i64, i64, i64, i64, i8, [7 x i8] }>
%"class.WTF::RefCounted.408" = type { %"class.base::RefCounted.409" }
%"class.base::RefCounted.409" = type { %"class.base::subtle::RefCountedBase" }
%"class.WTF::HashMap.410" = type { %"class.WTF::HashTable.411" }
%"class.WTF::HashTable.411" = type <{ %"struct.WTF::KeyValuePair.414"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.414" = type { %"class.WTF::String", %"class.WTF::Vector.641" }
%"class.WTF::Vector.641" = type { %"class.WTF::VectorBuffer.642" }
%"class.WTF::VectorBuffer.642" = type { %"class.WTF::VectorBufferBase.643" }
%"class.WTF::VectorBufferBase.643" = type { i64*, i32, i32 }
%"class.WTF::HashMap.415" = type { %"class.WTF::HashTable.416" }
%"class.WTF::HashTable.416" = type <{ %"struct.WTF::KeyValuePair.419"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.419" = type { i64, %"class.WTF::Vector.502" }
%"class.WTF::HashMap.420" = type { %"class.WTF::HashTable.421" }
%"class.WTF::HashTable.421" = type <{ %"struct.WTF::KeyValuePair.424"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.424" = type { %"class.WTF::String", %"struct.blink::GridArea" }
%"struct.blink::GridArea" = type { %"struct.blink::GridSpan", %"struct.blink::GridSpan" }
%"struct.blink::GridSpan" = type { i32, i32, i32 }
%"class.std::__1::unique_ptr.425" = type { %"class.std::__1::__compressed_pair.426" }
%"class.std::__1::__compressed_pair.426" = type { %"struct.std::__1::__compressed_pair_elem.427" }
%"struct.std::__1::__compressed_pair_elem.427" = type { %"class.blink::CounterDirectiveMap"* }
%"class.blink::CounterDirectiveMap" = type { %"class.WTF::HashMap.428" }
%"class.WTF::HashMap.428" = type { %"class.WTF::HashTable.429" }
%"class.WTF::HashTable.429" = type <{ %"struct.WTF::KeyValuePair.432"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.432" = type { %"class.WTF::AtomicString", %"class.blink::CounterDirectives" }
%"class.blink::CounterDirectives" = type { %"class.absl::optional.646", %"class.absl::optional.646", %"class.absl::optional.646" }
%"class.absl::optional.646" = type { %"class.absl::optional_internal::optional_data.647" }
%"class.absl::optional_internal::optional_data.647" = type { %"class.absl::optional_internal::optional_data_base.648" }
%"class.absl::optional_internal::optional_data_base.648" = type { %"class.absl::optional_internal::optional_data_dtor_base.649" }
%"class.absl::optional_internal::optional_data_dtor_base.649" = type { i8, %union.anon.650 }
%union.anon.650 = type { i32 }
%"class.std::__1::unique_ptr.436" = type { %"class.std::__1::__compressed_pair.437" }
%"class.std::__1::__compressed_pair.437" = type { %"struct.std::__1::__compressed_pair_elem.438" }
%"struct.std::__1::__compressed_pair_elem.438" = type { %"class.blink::CSSAnimationData"* }
%"class.blink::CSSAnimationData" = type { %"class.blink::CSSTimingData", %"class.WTF::Vector.283", %"class.WTF::Vector.451", %"class.WTF::Vector.439", %"class.WTF::Vector.456", %"class.WTF::Vector.461", %"class.WTF::Vector.466" }
%"class.blink::CSSTimingData" = type { %"class.WTF::Vector.439", %"class.WTF::Vector.439", %"class.WTF::Vector.444" }
%"class.WTF::Vector.444" = type { %"class.WTF::VectorBuffer.445" }
%"class.WTF::VectorBuffer.445" = type { %"class.WTF::VectorBufferBase.446" }
%"class.WTF::VectorBufferBase.446" = type { %class.scoped_refptr.447*, i32, i32 }
%class.scoped_refptr.447 = type { %"class.blink::TimingFunction"* }
%"class.blink::TimingFunction" = type { i32 (...)**, %"class.WTF::ThreadSafeRefCounted", i32 }
%"class.WTF::ThreadSafeRefCounted" = type { %"class.base::RefCountedThreadSafe.448" }
%"class.base::RefCountedThreadSafe.448" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.WTF::Vector.451" = type { %"class.WTF::VectorBuffer.452" }
%"class.WTF::VectorBuffer.452" = type { %"class.WTF::VectorBufferBase.453" }
%"class.WTF::VectorBufferBase.453" = type { %"class.blink::StyleNameOrKeyword"*, i32, i32 }
%"class.blink::StyleNameOrKeyword" = type { i32, %"class.blink::StyleName" }
%"class.blink::StyleName" = type { i32, %"class.WTF::AtomicString" }
%"class.WTF::Vector.439" = type { %"class.WTF::VectorBuffer.440" }
%"class.WTF::VectorBuffer.440" = type { %"class.WTF::VectorBufferBase.441" }
%"class.WTF::VectorBufferBase.441" = type { double*, i32, i32 }
%"class.WTF::Vector.456" = type { %"class.WTF::VectorBuffer.457" }
%"class.WTF::VectorBuffer.457" = type { %"class.WTF::VectorBufferBase.458" }
%"class.WTF::VectorBufferBase.458" = type { i32*, i32, i32 }
%"class.WTF::Vector.461" = type { %"class.WTF::VectorBuffer.462" }
%"class.WTF::VectorBuffer.462" = type { %"class.WTF::VectorBufferBase.463" }
%"class.WTF::VectorBufferBase.463" = type { i32*, i32, i32 }
%"class.WTF::Vector.466" = type { %"class.WTF::VectorBuffer.467" }
%"class.WTF::VectorBuffer.467" = type { %"class.WTF::VectorBufferBase.468" }
%"class.WTF::VectorBufferBase.468" = type { i32*, i32, i32 }
%"class.std::__1::unique_ptr.474" = type { %"class.std::__1::__compressed_pair.475" }
%"class.std::__1::__compressed_pair.475" = type { %"struct.std::__1::__compressed_pair_elem.476" }
%"struct.std::__1::__compressed_pair_elem.476" = type { %"class.blink::CSSTransitionData"* }
%"class.blink::CSSTransitionData" = type { %"class.blink::CSSTimingData", %"class.WTF::Vector.477" }
%"class.WTF::Vector.477" = type { %"class.WTF::VectorBuffer.478" }
%"class.WTF::VectorBuffer.478" = type { %"class.WTF::VectorBufferBase.479" }
%"class.WTF::VectorBufferBase.479" = type { %"struct.blink::CSSTransitionData::TransitionProperty"*, i32, i32 }
%"struct.blink::CSSTransitionData::TransitionProperty" = type { i32, i32, %"class.WTF::AtomicString" }
%"class.std::__1::unique_ptr.485" = type { %"class.std::__1::__compressed_pair.486" }
%"class.std::__1::__compressed_pair.486" = type { %"struct.std::__1::__compressed_pair_elem.487" }
%"struct.std::__1::__compressed_pair_elem.487" = type { %"class.blink::PaintImages"* }
%"class.blink::PaintImages" = type { %"class.WTF::Vector.488" }
%"class.WTF::Vector.488" = type { %"class.WTF::VectorBuffer.489" }
%"class.WTF::VectorBuffer.489" = type { %"class.WTF::VectorBufferBase.490" }
%"class.WTF::VectorBufferBase.490" = type { %"class.blink::Persistent.305"*, i32, i32 }
%"class.std::__1::unique_ptr.496" = type { %"class.std::__1::__compressed_pair.497" }
%"class.std::__1::__compressed_pair.497" = type { %"struct.std::__1::__compressed_pair_elem.498" }
%"struct.std::__1::__compressed_pair_elem.498" = type { %"class.blink::StyleNonInheritedVariables"* }
%"class.blink::StyleNonInheritedVariables" = type { %"class.blink::StyleVariables" }
%"class.blink::FillLayer" = type <{ %"class.blink::FillLayer"*, %"class.blink::Persistent.305", %"class.blink::Length", %"class.blink::Length", %"class.blink::LengthSize", [7 x i8], i8 }>
%"class.blink::LengthSize" = type { %"class.blink::Length", %"class.blink::Length" }
%"class.blink::FloatSize" = type { float, float }
%"class.blink::TransformOperations" = type { %"class.WTF::Vector.507" }
%"class.WTF::Vector.507" = type { %"class.WTF::VectorBuffer.508" }
%"class.WTF::VectorBuffer.508" = type { %"class.WTF::VectorBufferBase.509" }
%"class.WTF::VectorBufferBase.509" = type { %class.scoped_refptr.510*, i32, i32 }
%class.scoped_refptr.510 = type { %"class.blink::TransformOperation"* }
%"class.blink::TransformOperation" = type <{ i32 (...)**, %"class.WTF::RefCounted.354", [4 x i8] }>
%"class.blink::Persistent.513" = type { %"class.blink::PersistentBase.514" }
%"class.blink::PersistentBase.514" = type { %"class.blink::ContentData"*, %"class.blink::PersistentNodePtr.268" }
%"class.blink::ContentData" = type { i32 (...)**, %"class.blink::Member.517" }
%"class.blink::Member.517" = type { %"class.blink::MemberBase.518" }
%"class.blink::MemberBase.518" = type { %"class.blink::ContentData"* }
%"class.blink::TransformOrigin" = type { %"class.blink::Length", %"class.blink::Length", float }
%"class.blink::StyleSelfAlignmentData" = type { i8, [3 x i8] }
%"class.blink::StyleContentAlignmentData" = type { i16, [2 x i8] }
%"class.blink::DataRef.519" = type { %class.scoped_refptr.520 }
%class.scoped_refptr.520 = type { %"class.blink::ComputedStyleBase::StyleSVGData"* }
%"class.blink::ComputedStyleBase::StyleSVGData" = type <{ %"class.WTF::RefCounted.521", [4 x i8], %"class.blink::DataRef.523", %"class.blink::DataRef.527", %"class.blink::DataRef.544", %"class.blink::DataRef.564", %"class.blink::DataRef.576", %"class.blink::DataRef.580", %class.scoped_refptr.548, i32, [4 x i8] }>
%"class.WTF::RefCounted.521" = type { %"class.base::RefCounted.522" }
%"class.base::RefCounted.522" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::DataRef.523" = type { %class.scoped_refptr.524 }
%class.scoped_refptr.524 = type { %"class.blink::ComputedStyleBase::StyleMiscData"* }
%"class.blink::ComputedStyleBase::StyleMiscData" = type <{ %"class.WTF::RefCounted.525", %"class.blink::Length", float, %"class.blink::StyleColor", %"class.blink::StyleColor", i8, [3 x i8] }>
%"class.WTF::RefCounted.525" = type { %"class.base::RefCounted.526" }
%"class.base::RefCounted.526" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::DataRef.527" = type { %class.scoped_refptr.528 }
%class.scoped_refptr.528 = type { %"class.blink::ComputedStyleBase::StyleGeometryData"* }
%"class.blink::ComputedStyleBase::StyleGeometryData" = type { %"class.WTF::RefCounted.529", %class.scoped_refptr.531, %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length" }
%"class.WTF::RefCounted.529" = type { %"class.base::RefCounted.530" }
%"class.base::RefCounted.530" = type { %"class.base::subtle::RefCountedBase" }
%class.scoped_refptr.531 = type { %"class.blink::StylePath"* }
%"class.blink::StylePath" = type { %"class.blink::BasicShape.base", %"class.std::__1::unique_ptr.532", %"class.std::__1::unique_ptr.538", float, i32 }
%"class.blink::BasicShape.base" = type <{ i32 (...)**, %"class.WTF::RefCounted.351" }>
%"class.std::__1::unique_ptr.532" = type { %"class.std::__1::__compressed_pair.533" }
%"class.std::__1::__compressed_pair.533" = type { %"struct.std::__1::__compressed_pair_elem.534" }
%"struct.std::__1::__compressed_pair_elem.534" = type { %"class.blink::SVGPathByteStream"* }
%"class.blink::SVGPathByteStream" = type opaque
%"class.std::__1::unique_ptr.538" = type { %"class.std::__1::__compressed_pair.539" }
%"class.std::__1::__compressed_pair.539" = type { %"struct.std::__1::__compressed_pair_elem.540" }
%"struct.std::__1::__compressed_pair_elem.540" = type { %"class.blink::Path"* }
%"class.blink::Path" = type opaque
%"class.blink::DataRef.544" = type { %class.scoped_refptr.545 }
%class.scoped_refptr.545 = type { %"class.blink::ComputedStyleBase::StyleFillData"* }
%"class.blink::ComputedStyleBase::StyleFillData" = type { %"class.WTF::RefCounted.546", [4 x i8], %"struct.blink::SVGPaint", %"struct.blink::SVGPaint", float, [4 x i8] }
%"class.WTF::RefCounted.546" = type { %"class.base::RefCounted.547" }
%"class.base::RefCounted.547" = type { %"class.base::subtle::RefCountedBase" }
%"struct.blink::SVGPaint" = type <{ %class.scoped_refptr.548, %"class.blink::StyleColor", i32, [4 x i8] }>
%"class.blink::DataRef.564" = type { %class.scoped_refptr.565 }
%class.scoped_refptr.565 = type { %"class.blink::ComputedStyleBase::StyleStrokeData"* }
%"class.blink::ComputedStyleBase::StyleStrokeData" = type <{ %"class.WTF::RefCounted.566", [4 x i8], %class.scoped_refptr.568, %"struct.blink::SVGPaint", %"struct.blink::SVGPaint", %"class.blink::Length", %"class.blink::UnzoomedLength", float, float, i8, [7 x i8] }>
%"class.WTF::RefCounted.566" = type { %"class.base::RefCounted.567" }
%"class.base::RefCounted.567" = type { %"class.base::subtle::RefCountedBase" }
%class.scoped_refptr.568 = type { %"class.base::RefCountedData.569"* }
%"class.base::RefCountedData.569" = type { %"class.base::RefCountedThreadSafe.570", %"class.WTF::Vector.571" }
%"class.base::RefCountedThreadSafe.570" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.WTF::Vector.571" = type { %"class.WTF::VectorBuffer.572" }
%"class.WTF::VectorBuffer.572" = type { %"class.WTF::VectorBufferBase.573" }
%"class.WTF::VectorBufferBase.573" = type { %"class.blink::Length"*, i32, i32 }
%"class.blink::UnzoomedLength" = type { %"class.blink::Length" }
%"class.blink::DataRef.576" = type { %class.scoped_refptr.577 }
%class.scoped_refptr.577 = type { %"class.blink::ComputedStyleBase::StyleInheritedResourcesData"* }
%"class.blink::ComputedStyleBase::StyleInheritedResourcesData" = type { %"class.WTF::RefCounted.578", %class.scoped_refptr.548, %class.scoped_refptr.548, %class.scoped_refptr.548 }
%"class.WTF::RefCounted.578" = type { %"class.base::RefCounted.579" }
%"class.base::RefCounted.579" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::DataRef.580" = type { %class.scoped_refptr.581 }
%class.scoped_refptr.581 = type { %"class.blink::ComputedStyleBase::StyleStopData"* }
%"class.blink::ComputedStyleBase::StyleStopData" = type { %"class.WTF::RefCounted.582", float, %"class.blink::StyleColor" }
%"class.WTF::RefCounted.582" = type { %"class.base::RefCounted.583" }
%"class.base::RefCounted.583" = type { %"class.base::subtle::RefCountedBase" }
%class.scoped_refptr.548 = type { %"class.blink::StyleSVGResource"* }
%"class.blink::StyleSVGResource" = type { %"class.WTF::RefCounted.549", %"class.blink::Persistent.551", %"class.WTF::AtomicString" }
%"class.WTF::RefCounted.549" = type { %"class.base::RefCounted.550" }
%"class.base::RefCounted.550" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::Persistent.551" = type { %"class.blink::PersistentBase.552" }
%"class.blink::PersistentBase.552" = type { %"class.blink::SVGResource"*, %"class.blink::PersistentNodePtr.268" }
%"class.blink::SVGResource" = type { i32 (...)**, %"class.blink::Member.555", %"class.blink::HeapHashMap.557" }
%"class.blink::Member.555" = type { %"class.blink::MemberBase.556" }
%"class.blink::MemberBase.556" = type { %"class.blink::Element"* }
%"class.blink::Element" = type opaque
%"class.blink::HeapHashMap.557" = type { %"class.WTF::HashMap.560" }
%"class.WTF::HashMap.560" = type { %"class.WTF::HashTable.561" }
%"class.WTF::HashTable.561" = type <{ %"struct.WTF::KeyValuePair.563"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.563" = type opaque
%"class.blink::DataRef.584" = type { %class.scoped_refptr.585 }
%class.scoped_refptr.585 = type { %"class.blink::ComputedStyleBase::StyleBoxData"* }
%"class.blink::ComputedStyleBase::StyleBoxData" = type <{ %"class.WTF::RefCounted.586", %"class.blink::StyleAspectRatio", %"class.blink::LengthSize", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", i32, i8, [3 x i8] }>
%"class.WTF::RefCounted.586" = type { %"class.base::RefCounted.587" }
%"class.base::RefCounted.587" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::StyleAspectRatio" = type { i8, %"class.blink::FloatSize" }
%"class.blink::DataRef.588" = type { %class.scoped_refptr.589 }
%class.scoped_refptr.589 = type { %"class.blink::ComputedStyleBase::StyleBackgroundData"* }
%"class.blink::ComputedStyleBase::StyleBackgroundData" = type { %"class.WTF::RefCounted.590", [4 x i8], %"class.blink::FillLayer", %"class.blink::StyleColor" }
%"class.WTF::RefCounted.590" = type { %"class.base::RefCounted.591" }
%"class.base::RefCounted.591" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::DataRef.592" = type { %class.scoped_refptr.593 }
%class.scoped_refptr.593 = type { %"class.blink::ComputedStyleBase::StyleSurroundData"* }
%"class.blink::ComputedStyleBase::StyleSurroundData" = type <{ %"class.WTF::RefCounted.594", [4 x i8], %"class.blink::NinePieceImage", %"class.blink::LengthSize", %"class.blink::LengthSize", %"class.blink::LengthSize", %"class.blink::LengthSize", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::LayoutUnit", %"class.blink::LayoutUnit", %"class.blink::LayoutUnit", %"class.blink::LayoutUnit", i16, [6 x i8] }>
%"class.WTF::RefCounted.594" = type { %"class.base::RefCounted.595" }
%"class.base::RefCounted.595" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::DataRef.596" = type { %class.scoped_refptr.597 }
%class.scoped_refptr.597 = type { %"class.blink::ComputedStyleBase::StyleInheritedVariablesData"* }
%"class.blink::ComputedStyleBase::StyleInheritedVariablesData" = type { %"class.WTF::RefCounted.598", %class.scoped_refptr.600 }
%"class.WTF::RefCounted.598" = type { %"class.base::RefCounted.599" }
%"class.base::RefCounted.599" = type { %"class.base::subtle::RefCountedBase" }
%class.scoped_refptr.600 = type { %"class.blink::StyleInheritedVariables"* }
%"class.blink::StyleInheritedVariables" = type { %"class.WTF::RefCounted.616", %"class.blink::StyleVariables", %class.scoped_refptr.600 }
%"class.WTF::RefCounted.616" = type { %"class.base::RefCounted.617" }
%"class.base::RefCounted.617" = type { %"class.base::subtle::RefCountedBase" }
%"class.WTF::RefCounted.601" = type { %"class.base::RefCounted.602" }
%"class.base::RefCounted.602" = type { %"class.base::subtle::RefCountedBase" }
%"class.std::__1::unique_ptr.603" = type { %"class.std::__1::__compressed_pair.604" }
%"class.std::__1::__compressed_pair.604" = type { %"struct.std::__1::__compressed_pair_elem.605" }
%"struct.std::__1::__compressed_pair_elem.605" = type { %"class.blink::StyleCachedData"* }
%"class.blink::StyleCachedData" = type { %"class.std::__1::unique_ptr.606" }
%"class.std::__1::unique_ptr.606" = type { %"class.std::__1::__compressed_pair.607" }
%"class.std::__1::__compressed_pair.607" = type { %"struct.std::__1::__compressed_pair_elem.608" }
%"struct.std::__1::__compressed_pair_elem.608" = type { %"class.WTF::Vector.609"* }
%"class.WTF::Vector.609" = type opaque
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.WTF::Vector.625" = type { %"class.WTF::VectorBuffer.626" }
%"class.WTF::VectorBuffer.626" = type { %"class.WTF::VectorBufferBase.627" }
%"class.WTF::VectorBufferBase.627" = type { %"struct.blink::PhysicalRect"*, i32, i32 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.WTF::TextStream" = type { %"class.WTF::StringBuilder" }
%"class.WTF::StringBuilder" = type <{ %"class.WTF::String", %union.anon.630, i32, i8, i8, [2 x i8] }>
%union.anon.630 = type { %"class.WTF::Vector.631" }
%"class.WTF::Vector.631" = type { %"class.WTF::VectorBuffer.632" }
%"class.WTF::VectorBuffer.632" = type { %"class.WTF::VectorBufferBase.633", [16 x i8] }
%"class.WTF::VectorBufferBase.633" = type { i8*, i32, i32 }
%"struct.WTF::TextStream::FormatNumberRespectingIntegers" = type { double }
%"class.logging::CheckOpResult" = type { i8* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.base::ScopedClearLastErrorBase" = type { i32 }

$_ZNK3WTF6VectorIN5blink12PhysicalRectELj0ENS_18PartitionAllocatorEE2atEj = comdat any

@.str = private unnamed_addr constant [6 x i8] c"%s %s\00", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c"at (\00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c",\00", align 1
@.str.3 = private unnamed_addr constant [8 x i8] c") size \00", align 1
@.str.4 = private unnamed_addr constant [2 x i8] c"x\00", align 1
@.str.5 = private unnamed_addr constant [11 x i8] c"i < size()\00", align 1
@.str.6 = private unnamed_addr constant [55 x i8] c"../../third_party/blink/renderer/platform/wtf/vector.h\00", align 1

; Function Attrs: nounwind readonly ssp uwtable
define hidden i64 @_ZNK5blink12PhysicalRect14DistanceAsSizeENS_14PhysicalOffsetE(%"struct.blink::PhysicalRect"* nocapture readonly, i64) local_unnamed_addr #0 align 2 {
  %3 = trunc i64 %1 to i32
  %4 = lshr i64 %1, 32
  %5 = trunc i64 %4 to i32
  %6 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %0, i64 0, i32 0, i32 0, i32 0
  %7 = load i32, i32* %6, align 4
  %8 = icmp sgt i32 %7, -1
  %9 = select i1 %8, i32 -2147483648, i32 2147483647
  %10 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %3, i32 %7) #9
  %11 = extractvalue { i32, i1 } %10, 1
  %12 = extractvalue { i32, i1 } %10, 0
  %13 = select i1 %11, i32 %9, i32 %12, !prof !2
  %14 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %0, i64 0, i32 0, i32 1, i32 0
  %15 = load i32, i32* %14, align 4
  %16 = icmp sgt i32 %15, -1
  %17 = select i1 %16, i32 -2147483648, i32 2147483647
  %18 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %5, i32 %15) #9
  %19 = extractvalue { i32, i1 } %18, 1
  %20 = extractvalue { i32, i1 } %18, 0
  %21 = select i1 %19, i32 %17, i32 %20, !prof !2
  %22 = icmp slt i32 %13, 0
  br i1 %22, label %23, label %34

23:                                               ; preds = %2
  %24 = tail call i1 @llvm.is.constant.i32(i32 %13) #9
  br i1 %24, label %25, label %29

25:                                               ; preds = %23
  %26 = sub i32 0, %13
  %27 = icmp eq i32 %26, -2147483648
  %28 = select i1 %27, i32 2147483647, i32 %26
  br label %45

29:                                               ; preds = %23
  %30 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %13) #9
  %31 = extractvalue { i32, i1 } %30, 1
  %32 = extractvalue { i32, i1 } %30, 0
  %33 = select i1 %31, i32 2147483647, i32 %32
  br label %45

34:                                               ; preds = %2
  %35 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %0, i64 0, i32 1, i32 0, i32 0
  %36 = load i32, i32* %35, align 4
  %37 = icmp sgt i32 %13, %36
  br i1 %37, label %38, label %45

38:                                               ; preds = %34
  %39 = icmp sgt i32 %36, -1
  %40 = select i1 %39, i32 -2147483648, i32 2147483647
  %41 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %13, i32 %36) #9
  %42 = extractvalue { i32, i1 } %41, 1
  %43 = extractvalue { i32, i1 } %41, 0
  %44 = select i1 %42, i32 %40, i32 %43, !prof !2
  br label %45

45:                                               ; preds = %29, %25, %34, %38
  %46 = phi i32 [ %44, %38 ], [ 0, %34 ], [ %28, %25 ], [ %33, %29 ]
  %47 = icmp slt i32 %21, 0
  br i1 %47, label %48, label %59

48:                                               ; preds = %45
  %49 = tail call i1 @llvm.is.constant.i32(i32 %21) #9
  br i1 %49, label %50, label %54

50:                                               ; preds = %48
  %51 = sub i32 0, %21
  %52 = icmp eq i32 %51, -2147483648
  %53 = select i1 %52, i32 2147483647, i32 %51
  br label %70

54:                                               ; preds = %48
  %55 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %21) #9
  %56 = extractvalue { i32, i1 } %55, 1
  %57 = extractvalue { i32, i1 } %55, 0
  %58 = select i1 %56, i32 2147483647, i32 %57
  br label %70

59:                                               ; preds = %45
  %60 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %0, i64 0, i32 1, i32 1, i32 0
  %61 = load i32, i32* %60, align 4
  %62 = icmp sgt i32 %21, %61
  br i1 %62, label %63, label %70

63:                                               ; preds = %59
  %64 = icmp sgt i32 %61, -1
  %65 = select i1 %64, i32 -2147483648, i32 2147483647
  %66 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %21, i32 %61) #9
  %67 = extractvalue { i32, i1 } %66, 1
  %68 = extractvalue { i32, i1 } %66, 0
  %69 = select i1 %67, i32 %65, i32 %68, !prof !2
  br label %70

70:                                               ; preds = %54, %50, %59, %63
  %71 = phi i32 [ %69, %63 ], [ 0, %59 ], [ %53, %50 ], [ %58, %54 ]
  %72 = zext i32 %71 to i64
  %73 = shl nuw i64 %72, 32
  %74 = zext i32 %46 to i64
  %75 = or i64 %73, %74
  ret i64 %75
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK5blink12PhysicalRect8ContainsERKS0_(%"struct.blink::PhysicalRect"* nocapture readonly, %"struct.blink::PhysicalRect"* nocapture readonly dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %0, i64 0, i32 0, i32 0, i32 0
  %4 = load i32, i32* %3, align 4
  %5 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %1, i64 0, i32 0, i32 0, i32 0
  %6 = load i32, i32* %5, align 4
  %7 = icmp sgt i32 %4, %6
  br i1 %7, label %50, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %0, i64 0, i32 0, i32 1, i32 0
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %1, i64 0, i32 0, i32 1, i32 0
  %12 = load i32, i32* %11, align 4
  %13 = icmp sgt i32 %10, %12
  br i1 %13, label %50, label %14

14:                                               ; preds = %8
  %15 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %0, i64 0, i32 1, i32 0, i32 0
  %16 = load i32, i32* %15, align 4
  %17 = icmp slt i32 %16, 0
  %18 = select i1 %17, i32 -2147483648, i32 2147483647
  %19 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %4, i32 %16) #9
  %20 = extractvalue { i32, i1 } %19, 1
  %21 = extractvalue { i32, i1 } %19, 0
  %22 = select i1 %20, i32 %18, i32 %21, !prof !2
  %23 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %1, i64 0, i32 1, i32 0, i32 0
  %24 = load i32, i32* %23, align 4
  %25 = icmp slt i32 %24, 0
  %26 = select i1 %25, i32 -2147483648, i32 2147483647
  %27 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %6, i32 %24) #9
  %28 = extractvalue { i32, i1 } %27, 1
  %29 = extractvalue { i32, i1 } %27, 0
  %30 = select i1 %28, i32 %26, i32 %29, !prof !2
  %31 = icmp slt i32 %22, %30
  br i1 %31, label %50, label %32

32:                                               ; preds = %14
  %33 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %0, i64 0, i32 1, i32 1, i32 0
  %34 = load i32, i32* %33, align 4
  %35 = icmp slt i32 %34, 0
  %36 = select i1 %35, i32 -2147483648, i32 2147483647
  %37 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %10, i32 %34) #9
  %38 = extractvalue { i32, i1 } %37, 1
  %39 = extractvalue { i32, i1 } %37, 0
  %40 = select i1 %38, i32 %36, i32 %39, !prof !2
  %41 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %1, i64 0, i32 1, i32 1, i32 0
  %42 = load i32, i32* %41, align 4
  %43 = icmp slt i32 %42, 0
  %44 = select i1 %43, i32 -2147483648, i32 2147483647
  %45 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %12, i32 %42) #9
  %46 = extractvalue { i32, i1 } %45, 1
  %47 = extractvalue { i32, i1 } %45, 0
  %48 = select i1 %46, i32 %44, i32 %47, !prof !2
  %49 = icmp sge i32 %40, %48
  br label %50

50:                                               ; preds = %14, %8, %2, %32
  %51 = phi i1 [ false, %14 ], [ false, %8 ], [ false, %2 ], [ %49, %32 ]
  ret i1 %51
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK5blink12PhysicalRect10IntersectsERKS0_(%"struct.blink::PhysicalRect"* nocapture readonly, %"struct.blink::PhysicalRect"* nocapture readonly dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %0, i64 0, i32 1, i32 0, i32 0
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %58, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %0, i64 0, i32 1, i32 1, i32 0
  %8 = load i32, i32* %7, align 4
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %58, label %10

10:                                               ; preds = %6
  %11 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %1, i64 0, i32 1, i32 0, i32 0
  %12 = load i32, i32* %11, align 4
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %58, label %14

14:                                               ; preds = %10
  %15 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %1, i64 0, i32 1, i32 1, i32 0
  %16 = load i32, i32* %15, align 4
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %58, label %18

18:                                               ; preds = %14
  %19 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %1, i64 0, i32 0, i32 0, i32 0
  %20 = load i32, i32* %19, align 4
  %21 = icmp slt i32 %12, 0
  %22 = select i1 %21, i32 -2147483648, i32 2147483647
  %23 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %20, i32 %12) #9
  %24 = extractvalue { i32, i1 } %23, 1
  %25 = extractvalue { i32, i1 } %23, 0
  %26 = select i1 %24, i32 %22, i32 %25, !prof !2
  %27 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %0, i64 0, i32 0, i32 0, i32 0
  %28 = load i32, i32* %27, align 4
  %29 = icmp slt i32 %28, %26
  br i1 %29, label %30, label %58

30:                                               ; preds = %18
  %31 = icmp slt i32 %4, 0
  %32 = select i1 %31, i32 -2147483648, i32 2147483647
  %33 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %28, i32 %4) #9
  %34 = extractvalue { i32, i1 } %33, 1
  %35 = extractvalue { i32, i1 } %33, 0
  %36 = select i1 %34, i32 %32, i32 %35, !prof !2
  %37 = icmp slt i32 %20, %36
  br i1 %37, label %38, label %58

38:                                               ; preds = %30
  %39 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %1, i64 0, i32 0, i32 1, i32 0
  %40 = load i32, i32* %39, align 4
  %41 = icmp slt i32 %16, 0
  %42 = select i1 %41, i32 -2147483648, i32 2147483647
  %43 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %40, i32 %16) #9
  %44 = extractvalue { i32, i1 } %43, 1
  %45 = extractvalue { i32, i1 } %43, 0
  %46 = select i1 %44, i32 %42, i32 %45, !prof !2
  %47 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %0, i64 0, i32 0, i32 1, i32 0
  %48 = load i32, i32* %47, align 4
  %49 = icmp slt i32 %48, %46
  br i1 %49, label %50, label %58

50:                                               ; preds = %38
  %51 = icmp slt i32 %8, 0
  %52 = select i1 %51, i32 -2147483648, i32 2147483647
  %53 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %48, i32 %8) #9
  %54 = extractvalue { i32, i1 } %53, 1
  %55 = extractvalue { i32, i1 } %53, 0
  %56 = select i1 %54, i32 %52, i32 %55, !prof !2
  %57 = icmp slt i32 %40, %56
  br label %58

58:                                               ; preds = %10, %2, %50, %38, %30, %18, %14, %6
  %59 = phi i1 [ false, %38 ], [ false, %30 ], [ false, %18 ], [ false, %14 ], [ false, %6 ], [ %57, %50 ], [ false, %2 ], [ false, %10 ]
  ret i1 %59
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK5blink12PhysicalRect21IntersectsInclusivelyERKS0_(%"struct.blink::PhysicalRect"* nocapture readonly, %"struct.blink::PhysicalRect"* nocapture readonly dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %1, i64 0, i32 0, i32 0, i32 0
  %4 = load i32, i32* %3, align 4
  %5 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %1, i64 0, i32 1, i32 0, i32 0
  %6 = load i32, i32* %5, align 4
  %7 = icmp slt i32 %6, 0
  %8 = select i1 %7, i32 -2147483648, i32 2147483647
  %9 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %4, i32 %6) #9
  %10 = extractvalue { i32, i1 } %9, 1
  %11 = extractvalue { i32, i1 } %9, 0
  %12 = select i1 %10, i32 %8, i32 %11, !prof !2
  %13 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %0, i64 0, i32 0, i32 0, i32 0
  %14 = load i32, i32* %13, align 4
  %15 = icmp sgt i32 %14, %12
  br i1 %15, label %50, label %16

16:                                               ; preds = %2
  %17 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %0, i64 0, i32 1, i32 0, i32 0
  %18 = load i32, i32* %17, align 4
  %19 = icmp slt i32 %18, 0
  %20 = select i1 %19, i32 -2147483648, i32 2147483647
  %21 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %14, i32 %18) #9
  %22 = extractvalue { i32, i1 } %21, 1
  %23 = extractvalue { i32, i1 } %21, 0
  %24 = select i1 %22, i32 %20, i32 %23, !prof !2
  %25 = icmp sgt i32 %4, %24
  br i1 %25, label %50, label %26

26:                                               ; preds = %16
  %27 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %1, i64 0, i32 0, i32 1, i32 0
  %28 = load i32, i32* %27, align 4
  %29 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %1, i64 0, i32 1, i32 1, i32 0
  %30 = load i32, i32* %29, align 4
  %31 = icmp slt i32 %30, 0
  %32 = select i1 %31, i32 -2147483648, i32 2147483647
  %33 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %28, i32 %30) #9
  %34 = extractvalue { i32, i1 } %33, 1
  %35 = extractvalue { i32, i1 } %33, 0
  %36 = select i1 %34, i32 %32, i32 %35, !prof !2
  %37 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %0, i64 0, i32 0, i32 1, i32 0
  %38 = load i32, i32* %37, align 4
  %39 = icmp sgt i32 %38, %36
  br i1 %39, label %50, label %40

40:                                               ; preds = %26
  %41 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %0, i64 0, i32 1, i32 1, i32 0
  %42 = load i32, i32* %41, align 4
  %43 = icmp slt i32 %42, 0
  %44 = select i1 %43, i32 -2147483648, i32 2147483647
  %45 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %38, i32 %42) #9
  %46 = extractvalue { i32, i1 } %45, 1
  %47 = extractvalue { i32, i1 } %45, 0
  %48 = select i1 %46, i32 %44, i32 %47, !prof !2
  %49 = icmp sle i32 %28, %48
  br label %50

50:                                               ; preds = %26, %16, %2, %40
  %51 = phi i1 [ false, %26 ], [ false, %16 ], [ false, %2 ], [ %49, %40 ]
  ret i1 %51
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink12PhysicalRect5UniteERKS0_(%"struct.blink::PhysicalRect"* nocapture, %"struct.blink::PhysicalRect"* nocapture readonly dereferenceable(16)) local_unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %1, i64 0, i32 1, i32 0, i32 0
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %105, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %1, i64 0, i32 1, i32 1, i32 0
  %8 = load i32, i32* %7, align 4
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %105, label %10

10:                                               ; preds = %6
  %11 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %0, i64 0, i32 1, i32 0, i32 0
  %12 = load i32, i32* %11, align 4
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %18, label %14

14:                                               ; preds = %10
  %15 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %0, i64 0, i32 1, i32 1, i32 0
  %16 = load i32, i32* %15, align 4
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %18, label %21

18:                                               ; preds = %10, %14
  %19 = bitcast %"struct.blink::PhysicalRect"* %0 to i8*
  %20 = bitcast %"struct.blink::PhysicalRect"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %19, i8* align 4 %20, i64 16, i1 false)
  br label %105

21:                                               ; preds = %14
  %22 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %0, i64 0, i32 0, i32 0
  %23 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %1, i64 0, i32 0, i32 0
  %24 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %1, i64 0, i32 0, i32 0, i32 0
  %25 = load i32, i32* %24, align 4
  %26 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %0, i64 0, i32 0, i32 0, i32 0
  %27 = load i32, i32* %26, align 4
  %28 = icmp slt i32 %25, %27
  %29 = select i1 %28, %"class.blink::LayoutUnit"* %23, %"class.blink::LayoutUnit"* %22
  %30 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %29, i64 0, i32 0
  %31 = load i32, i32* %30, align 4
  %32 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %0, i64 0, i32 0, i32 1
  %33 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %1, i64 0, i32 0, i32 1
  %34 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %33, i64 0, i32 0
  %35 = load i32, i32* %34, align 4
  %36 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %32, i64 0, i32 0
  %37 = load i32, i32* %36, align 4
  %38 = icmp slt i32 %35, %37
  %39 = select i1 %38, %"class.blink::LayoutUnit"* %33, %"class.blink::LayoutUnit"* %32
  %40 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %39, i64 0, i32 0
  %41 = load i32, i32* %40, align 4
  %42 = icmp slt i32 %12, 0
  %43 = select i1 %42, i32 -2147483648, i32 2147483647
  %44 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %27, i32 %12) #9
  %45 = extractvalue { i32, i1 } %44, 1
  %46 = extractvalue { i32, i1 } %44, 0
  %47 = select i1 %45, i32 %43, i32 %46
  %48 = icmp slt i32 %4, 0
  %49 = select i1 %48, i32 -2147483648, i32 2147483647
  %50 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %25, i32 %4) #9
  %51 = extractvalue { i32, i1 } %50, 1
  %52 = extractvalue { i32, i1 } %50, 0
  %53 = select i1 %51, i32 %49, i32 %52, !prof !2
  %54 = icmp slt i32 %47, %53
  %55 = select i1 %54, i32 %53, i32 %47
  %56 = icmp slt i32 %16, 0
  %57 = select i1 %56, i32 -2147483648, i32 2147483647
  %58 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %37, i32 %16) #9
  %59 = extractvalue { i32, i1 } %58, 1
  %60 = extractvalue { i32, i1 } %58, 0
  %61 = select i1 %59, i32 %57, i32 %60
  %62 = icmp slt i32 %8, 0
  %63 = select i1 %62, i32 -2147483648, i32 2147483647
  %64 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %35, i32 %8) #9
  %65 = extractvalue { i32, i1 } %64, 1
  %66 = extractvalue { i32, i1 } %64, 0
  %67 = select i1 %65, i32 %63, i32 %66, !prof !2
  %68 = icmp slt i32 %61, %67
  %69 = select i1 %68, i32 %67, i32 %61
  %70 = icmp sgt i32 %31, -1
  %71 = select i1 %70, i32 -2147483648, i32 2147483647
  %72 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %55, i32 %31) #9
  %73 = extractvalue { i32, i1 } %72, 1
  %74 = extractvalue { i32, i1 } %72, 0
  %75 = select i1 %73, i32 %71, i32 %74, !prof !2
  %76 = icmp sgt i32 %41, -1
  %77 = select i1 %76, i32 -2147483648, i32 2147483647
  %78 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %69, i32 %41) #9
  %79 = extractvalue { i32, i1 } %78, 1
  %80 = extractvalue { i32, i1 } %78, 0
  %81 = select i1 %79, i32 %77, i32 %80, !prof !2
  %82 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %0, i64 0, i32 1
  %83 = bitcast %"struct.blink::PhysicalSize"* %82 to i64*
  %84 = zext i32 %81 to i64
  %85 = shl nuw i64 %84, 32
  %86 = zext i32 %75 to i64
  %87 = or i64 %85, %86
  store i64 %87, i64* %83, align 4
  %88 = icmp sgt i32 %75, -1
  %89 = select i1 %88, i32 -2147483648, i32 2147483647
  %90 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %55, i32 %75) #9
  %91 = extractvalue { i32, i1 } %90, 1
  %92 = extractvalue { i32, i1 } %90, 0
  %93 = select i1 %91, i32 %89, i32 %92, !prof !2
  %94 = icmp sgt i32 %81, -1
  %95 = select i1 %94, i32 -2147483648, i32 2147483647
  %96 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %69, i32 %81) #9
  %97 = extractvalue { i32, i1 } %96, 1
  %98 = extractvalue { i32, i1 } %96, 0
  %99 = select i1 %97, i32 %95, i32 %98, !prof !2
  %100 = bitcast %"struct.blink::PhysicalRect"* %0 to i64*
  %101 = zext i32 %99 to i64
  %102 = shl nuw i64 %101, 32
  %103 = zext i32 %93 to i64
  %104 = or i64 %102, %103
  store i64 %104, i64* %100, align 4
  br label %105

105:                                              ; preds = %2, %6, %21, %18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink12PhysicalRect16UniteEvenIfEmptyERKS0_(%"struct.blink::PhysicalRect"* nocapture, %"struct.blink::PhysicalRect"* nocapture readonly dereferenceable(16)) local_unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %0, i64 0, i32 0, i32 0
  %4 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %1, i64 0, i32 0, i32 0
  %5 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %1, i64 0, i32 0, i32 0, i32 0
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %0, i64 0, i32 0, i32 0, i32 0
  %8 = load i32, i32* %7, align 4
  %9 = icmp slt i32 %6, %8
  %10 = select i1 %9, %"class.blink::LayoutUnit"* %4, %"class.blink::LayoutUnit"* %3
  %11 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %10, i64 0, i32 0
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %0, i64 0, i32 0, i32 1
  %14 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %1, i64 0, i32 0, i32 1
  %15 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %14, i64 0, i32 0
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %13, i64 0, i32 0
  %18 = load i32, i32* %17, align 4
  %19 = icmp slt i32 %16, %18
  %20 = select i1 %19, %"class.blink::LayoutUnit"* %14, %"class.blink::LayoutUnit"* %13
  %21 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %20, i64 0, i32 0
  %22 = load i32, i32* %21, align 4
  %23 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %0, i64 0, i32 1, i32 0, i32 0
  %24 = load i32, i32* %23, align 4
  %25 = icmp slt i32 %24, 0
  %26 = select i1 %25, i32 -2147483648, i32 2147483647
  %27 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %8, i32 %24) #9
  %28 = extractvalue { i32, i1 } %27, 1
  %29 = extractvalue { i32, i1 } %27, 0
  %30 = select i1 %28, i32 %26, i32 %29
  %31 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %1, i64 0, i32 1, i32 0, i32 0
  %32 = load i32, i32* %31, align 4
  %33 = icmp slt i32 %32, 0
  %34 = select i1 %33, i32 -2147483648, i32 2147483647
  %35 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %6, i32 %32) #9
  %36 = extractvalue { i32, i1 } %35, 1
  %37 = extractvalue { i32, i1 } %35, 0
  %38 = select i1 %36, i32 %34, i32 %37, !prof !2
  %39 = icmp slt i32 %30, %38
  %40 = select i1 %39, i32 %38, i32 %30
  %41 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %0, i64 0, i32 1, i32 1, i32 0
  %42 = load i32, i32* %41, align 4
  %43 = icmp slt i32 %42, 0
  %44 = select i1 %43, i32 -2147483648, i32 2147483647
  %45 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %18, i32 %42) #9
  %46 = extractvalue { i32, i1 } %45, 1
  %47 = extractvalue { i32, i1 } %45, 0
  %48 = select i1 %46, i32 %44, i32 %47
  %49 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %1, i64 0, i32 1, i32 1, i32 0
  %50 = load i32, i32* %49, align 4
  %51 = icmp slt i32 %50, 0
  %52 = select i1 %51, i32 -2147483648, i32 2147483647
  %53 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %16, i32 %50) #9
  %54 = extractvalue { i32, i1 } %53, 1
  %55 = extractvalue { i32, i1 } %53, 0
  %56 = select i1 %54, i32 %52, i32 %55, !prof !2
  %57 = icmp slt i32 %48, %56
  %58 = select i1 %57, i32 %56, i32 %48
  %59 = icmp sgt i32 %12, -1
  %60 = select i1 %59, i32 -2147483648, i32 2147483647
  %61 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %40, i32 %12) #9
  %62 = extractvalue { i32, i1 } %61, 1
  %63 = extractvalue { i32, i1 } %61, 0
  %64 = select i1 %62, i32 %60, i32 %63, !prof !2
  %65 = icmp sgt i32 %22, -1
  %66 = select i1 %65, i32 -2147483648, i32 2147483647
  %67 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %58, i32 %22) #9
  %68 = extractvalue { i32, i1 } %67, 1
  %69 = extractvalue { i32, i1 } %67, 0
  %70 = select i1 %68, i32 %66, i32 %69, !prof !2
  %71 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %0, i64 0, i32 1
  %72 = bitcast %"struct.blink::PhysicalSize"* %71 to i64*
  %73 = zext i32 %70 to i64
  %74 = shl nuw i64 %73, 32
  %75 = zext i32 %64 to i64
  %76 = or i64 %74, %75
  store i64 %76, i64* %72, align 4
  %77 = icmp sgt i32 %64, -1
  %78 = select i1 %77, i32 -2147483648, i32 2147483647
  %79 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %40, i32 %64) #9
  %80 = extractvalue { i32, i1 } %79, 1
  %81 = extractvalue { i32, i1 } %79, 0
  %82 = select i1 %80, i32 %78, i32 %81, !prof !2
  %83 = icmp sgt i32 %70, -1
  %84 = select i1 %83, i32 -2147483648, i32 2147483647
  %85 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %58, i32 %70) #9
  %86 = extractvalue { i32, i1 } %85, 1
  %87 = extractvalue { i32, i1 } %85, 0
  %88 = select i1 %86, i32 %84, i32 %87, !prof !2
  %89 = bitcast %"struct.blink::PhysicalRect"* %0 to i64*
  %90 = zext i32 %88 to i64
  %91 = shl nuw i64 %90, 32
  %92 = zext i32 %82 to i64
  %93 = or i64 %91, %92
  store i64 %93, i64* %89, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink12PhysicalRect14UniteIfNonZeroERKS0_(%"struct.blink::PhysicalRect"* nocapture, %"struct.blink::PhysicalRect"* nocapture readonly dereferenceable(16)) local_unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %1, i64 0, i32 1, i32 0, i32 0
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %6, label %10

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %1, i64 0, i32 1, i32 1, i32 0
  %8 = load i32, i32* %7, align 4
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %106, label %10

10:                                               ; preds = %2, %6
  %11 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %0, i64 0, i32 1
  %12 = getelementptr inbounds %"struct.blink::PhysicalSize", %"struct.blink::PhysicalSize"* %11, i64 0, i32 0, i32 0
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %0, i64 0, i32 1, i32 1, i32 0
  %15 = load i32, i32* %14, align 4
  %16 = or i32 %13, %15
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %18, label %21

18:                                               ; preds = %10
  %19 = bitcast %"struct.blink::PhysicalRect"* %0 to i8*
  %20 = bitcast %"struct.blink::PhysicalRect"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %19, i8* align 4 %20, i64 16, i1 false)
  br label %106

21:                                               ; preds = %10
  %22 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %0, i64 0, i32 0, i32 0
  %23 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %1, i64 0, i32 0, i32 0
  %24 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %1, i64 0, i32 0, i32 0, i32 0
  %25 = load i32, i32* %24, align 4
  %26 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %0, i64 0, i32 0, i32 0, i32 0
  %27 = load i32, i32* %26, align 4
  %28 = icmp slt i32 %25, %27
  %29 = select i1 %28, %"class.blink::LayoutUnit"* %23, %"class.blink::LayoutUnit"* %22
  %30 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %29, i64 0, i32 0
  %31 = load i32, i32* %30, align 4
  %32 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %0, i64 0, i32 0, i32 1
  %33 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %1, i64 0, i32 0, i32 1
  %34 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %33, i64 0, i32 0
  %35 = load i32, i32* %34, align 4
  %36 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %32, i64 0, i32 0
  %37 = load i32, i32* %36, align 4
  %38 = icmp slt i32 %35, %37
  %39 = select i1 %38, %"class.blink::LayoutUnit"* %33, %"class.blink::LayoutUnit"* %32
  %40 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %39, i64 0, i32 0
  %41 = load i32, i32* %40, align 4
  %42 = icmp slt i32 %13, 0
  %43 = select i1 %42, i32 -2147483648, i32 2147483647
  %44 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %27, i32 %13) #9
  %45 = extractvalue { i32, i1 } %44, 1
  %46 = extractvalue { i32, i1 } %44, 0
  %47 = select i1 %45, i32 %43, i32 %46
  %48 = icmp slt i32 %4, 0
  %49 = select i1 %48, i32 -2147483648, i32 2147483647
  %50 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %25, i32 %4) #9
  %51 = extractvalue { i32, i1 } %50, 1
  %52 = extractvalue { i32, i1 } %50, 0
  %53 = select i1 %51, i32 %49, i32 %52, !prof !2
  %54 = icmp slt i32 %47, %53
  %55 = select i1 %54, i32 %53, i32 %47
  %56 = icmp slt i32 %15, 0
  %57 = select i1 %56, i32 -2147483648, i32 2147483647
  %58 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %37, i32 %15) #9
  %59 = extractvalue { i32, i1 } %58, 1
  %60 = extractvalue { i32, i1 } %58, 0
  %61 = select i1 %59, i32 %57, i32 %60
  %62 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %1, i64 0, i32 1, i32 1, i32 0
  %63 = load i32, i32* %62, align 4
  %64 = icmp slt i32 %63, 0
  %65 = select i1 %64, i32 -2147483648, i32 2147483647
  %66 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %35, i32 %63) #9
  %67 = extractvalue { i32, i1 } %66, 1
  %68 = extractvalue { i32, i1 } %66, 0
  %69 = select i1 %67, i32 %65, i32 %68, !prof !2
  %70 = icmp slt i32 %61, %69
  %71 = select i1 %70, i32 %69, i32 %61
  %72 = icmp sgt i32 %31, -1
  %73 = select i1 %72, i32 -2147483648, i32 2147483647
  %74 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %55, i32 %31) #9
  %75 = extractvalue { i32, i1 } %74, 1
  %76 = extractvalue { i32, i1 } %74, 0
  %77 = select i1 %75, i32 %73, i32 %76, !prof !2
  %78 = icmp sgt i32 %41, -1
  %79 = select i1 %78, i32 -2147483648, i32 2147483647
  %80 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %71, i32 %41) #9
  %81 = extractvalue { i32, i1 } %80, 1
  %82 = extractvalue { i32, i1 } %80, 0
  %83 = select i1 %81, i32 %79, i32 %82, !prof !2
  %84 = bitcast %"struct.blink::PhysicalSize"* %11 to i64*
  %85 = zext i32 %83 to i64
  %86 = shl nuw i64 %85, 32
  %87 = zext i32 %77 to i64
  %88 = or i64 %86, %87
  store i64 %88, i64* %84, align 4
  %89 = icmp sgt i32 %77, -1
  %90 = select i1 %89, i32 -2147483648, i32 2147483647
  %91 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %55, i32 %77) #9
  %92 = extractvalue { i32, i1 } %91, 1
  %93 = extractvalue { i32, i1 } %91, 0
  %94 = select i1 %92, i32 %90, i32 %93, !prof !2
  %95 = icmp sgt i32 %83, -1
  %96 = select i1 %95, i32 -2147483648, i32 2147483647
  %97 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %71, i32 %83) #9
  %98 = extractvalue { i32, i1 } %97, 1
  %99 = extractvalue { i32, i1 } %97, 0
  %100 = select i1 %98, i32 %96, i32 %99, !prof !2
  %101 = bitcast %"struct.blink::PhysicalRect"* %0 to i64*
  %102 = zext i32 %100 to i64
  %103 = shl nuw i64 %102, 32
  %104 = zext i32 %94 to i64
  %105 = or i64 %103, %104
  store i64 %105, i64* %101, align 4
  br label %106

106:                                              ; preds = %6, %21, %18
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @_ZN5blink12PhysicalRect6ExpandERKNS_18NGPhysicalBoxStrutE(%"struct.blink::PhysicalRect"* nocapture, %"struct.blink::NGPhysicalBoxStrut"* nocapture readonly dereferenceable(16)) local_unnamed_addr #3 align 2 {
  %3 = getelementptr inbounds %"struct.blink::NGPhysicalBoxStrut", %"struct.blink::NGPhysicalBoxStrut"* %1, i64 0, i32 0, i32 0
  %4 = load i32, i32* %3, align 4
  %5 = getelementptr inbounds %"struct.blink::NGPhysicalBoxStrut", %"struct.blink::NGPhysicalBoxStrut"* %1, i64 0, i32 1, i32 0
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr inbounds %"struct.blink::NGPhysicalBoxStrut", %"struct.blink::NGPhysicalBoxStrut"* %1, i64 0, i32 2, i32 0
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %"struct.blink::NGPhysicalBoxStrut", %"struct.blink::NGPhysicalBoxStrut"* %1, i64 0, i32 3, i32 0
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %0, i64 0, i32 0, i32 1, i32 0
  %12 = load i32, i32* %11, align 4
  %13 = icmp sgt i32 %4, -1
  %14 = select i1 %13, i32 -2147483648, i32 2147483647
  %15 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %12, i32 %4) #9
  %16 = extractvalue { i32, i1 } %15, 1
  %17 = extractvalue { i32, i1 } %15, 0
  %18 = select i1 %16, i32 %14, i32 %17, !prof !2
  store i32 %18, i32* %11, align 4
  %19 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %0, i64 0, i32 0, i32 0, i32 0
  %20 = load i32, i32* %19, align 4
  %21 = icmp sgt i32 %10, -1
  %22 = select i1 %21, i32 -2147483648, i32 2147483647
  %23 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %20, i32 %10) #9
  %24 = extractvalue { i32, i1 } %23, 1
  %25 = extractvalue { i32, i1 } %23, 0
  %26 = select i1 %24, i32 %22, i32 %25, !prof !2
  store i32 %26, i32* %19, align 4
  %27 = icmp slt i32 %6, 0
  %28 = select i1 %27, i32 -2147483648, i32 2147483647
  %29 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %10, i32 %6) #9
  %30 = extractvalue { i32, i1 } %29, 1
  %31 = extractvalue { i32, i1 } %29, 0
  %32 = select i1 %30, i32 %28, i32 %31, !prof !2
  %33 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %0, i64 0, i32 1, i32 0, i32 0
  %34 = load i32, i32* %33, align 4
  %35 = icmp slt i32 %32, 0
  %36 = select i1 %35, i32 -2147483648, i32 2147483647
  %37 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %34, i32 %32) #9
  %38 = extractvalue { i32, i1 } %37, 1
  %39 = extractvalue { i32, i1 } %37, 0
  %40 = select i1 %38, i32 %36, i32 %39, !prof !2
  store i32 %40, i32* %33, align 4
  %41 = icmp slt i32 %8, 0
  %42 = select i1 %41, i32 -2147483648, i32 2147483647
  %43 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %4, i32 %8) #9
  %44 = extractvalue { i32, i1 } %43, 1
  %45 = extractvalue { i32, i1 } %43, 0
  %46 = select i1 %44, i32 %42, i32 %45, !prof !2
  %47 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %0, i64 0, i32 1, i32 1, i32 0
  %48 = load i32, i32* %47, align 4
  %49 = icmp slt i32 %46, 0
  %50 = select i1 %49, i32 -2147483648, i32 2147483647
  %51 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %48, i32 %46) #9
  %52 = extractvalue { i32, i1 } %51, 1
  %53 = extractvalue { i32, i1 } %51, 0
  %54 = select i1 %52, i32 %50, i32 %53, !prof !2
  store i32 %54, i32* %47, align 4
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @_ZN5blink12PhysicalRect6ExpandERKNS_17LayoutRectOutsetsE(%"struct.blink::PhysicalRect"* nocapture, %"class.blink::LayoutRectOutsets"* nocapture readonly dereferenceable(16)) local_unnamed_addr #3 align 2 {
  %3 = getelementptr inbounds %"class.blink::LayoutRectOutsets", %"class.blink::LayoutRectOutsets"* %1, i64 0, i32 0, i32 0
  %4 = load i32, i32* %3, align 4
  %5 = getelementptr inbounds %"class.blink::LayoutRectOutsets", %"class.blink::LayoutRectOutsets"* %1, i64 0, i32 1, i32 0
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr inbounds %"class.blink::LayoutRectOutsets", %"class.blink::LayoutRectOutsets"* %1, i64 0, i32 2, i32 0
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %"class.blink::LayoutRectOutsets", %"class.blink::LayoutRectOutsets"* %1, i64 0, i32 3, i32 0
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %0, i64 0, i32 0, i32 1, i32 0
  %12 = load i32, i32* %11, align 4
  %13 = icmp sgt i32 %4, -1
  %14 = select i1 %13, i32 -2147483648, i32 2147483647
  %15 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %12, i32 %4) #9
  %16 = extractvalue { i32, i1 } %15, 1
  %17 = extractvalue { i32, i1 } %15, 0
  %18 = select i1 %16, i32 %14, i32 %17, !prof !2
  store i32 %18, i32* %11, align 4
  %19 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %0, i64 0, i32 0, i32 0, i32 0
  %20 = load i32, i32* %19, align 4
  %21 = icmp sgt i32 %10, -1
  %22 = select i1 %21, i32 -2147483648, i32 2147483647
  %23 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %20, i32 %10) #9
  %24 = extractvalue { i32, i1 } %23, 1
  %25 = extractvalue { i32, i1 } %23, 0
  %26 = select i1 %24, i32 %22, i32 %25, !prof !2
  store i32 %26, i32* %19, align 4
  %27 = icmp slt i32 %6, 0
  %28 = select i1 %27, i32 -2147483648, i32 2147483647
  %29 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %10, i32 %6) #9
  %30 = extractvalue { i32, i1 } %29, 1
  %31 = extractvalue { i32, i1 } %29, 0
  %32 = select i1 %30, i32 %28, i32 %31, !prof !2
  %33 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %0, i64 0, i32 1, i32 0, i32 0
  %34 = load i32, i32* %33, align 4
  %35 = icmp slt i32 %32, 0
  %36 = select i1 %35, i32 -2147483648, i32 2147483647
  %37 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %34, i32 %32) #9
  %38 = extractvalue { i32, i1 } %37, 1
  %39 = extractvalue { i32, i1 } %37, 0
  %40 = select i1 %38, i32 %36, i32 %39, !prof !2
  store i32 %40, i32* %33, align 4
  %41 = icmp slt i32 %8, 0
  %42 = select i1 %41, i32 -2147483648, i32 2147483647
  %43 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %4, i32 %8) #9
  %44 = extractvalue { i32, i1 } %43, 1
  %45 = extractvalue { i32, i1 } %43, 0
  %46 = select i1 %44, i32 %42, i32 %45, !prof !2
  %47 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %0, i64 0, i32 1, i32 1, i32 0
  %48 = load i32, i32* %47, align 4
  %49 = icmp slt i32 %46, 0
  %50 = select i1 %49, i32 -2147483648, i32 2147483647
  %51 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %48, i32 %46) #9
  %52 = extractvalue { i32, i1 } %51, 1
  %53 = extractvalue { i32, i1 } %51, 0
  %54 = select i1 %52, i32 %50, i32 %53, !prof !2
  store i32 %54, i32* %47, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink12PhysicalRect28ExpandEdgesToPixelBoundariesEv(%"struct.blink::PhysicalRect"* nocapture) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %0, i64 0, i32 0, i32 0, i32 0
  %3 = load i32, i32* %2, align 4
  %4 = icmp slt i32 %3, -2147483584
  %5 = ashr i32 %3, 6
  %6 = select i1 %4, i32 -33554432, i32 %5, !prof !2
  %7 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %0, i64 0, i32 0, i32 1, i32 0
  %8 = load i32, i32* %7, align 4
  %9 = icmp slt i32 %8, -2147483584
  %10 = ashr i32 %8, 6
  %11 = select i1 %9, i32 -33554432, i32 %10, !prof !2
  %12 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %0, i64 0, i32 1, i32 0, i32 0
  %13 = load i32, i32* %12, align 4
  %14 = icmp slt i32 %13, 0
  %15 = select i1 %14, i32 -2147483648, i32 2147483647
  %16 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %3, i32 %13) #9
  %17 = extractvalue { i32, i1 } %16, 1
  %18 = extractvalue { i32, i1 } %16, 0
  %19 = select i1 %17, i32 %15, i32 %18, !prof !2
  %20 = icmp sgt i32 %19, 2147483583
  br i1 %20, label %28, label %21, !prof !2

21:                                               ; preds = %1
  %22 = icmp sgt i32 %19, -1
  br i1 %22, label %23, label %26

23:                                               ; preds = %21
  %24 = add nuw nsw i32 %19, 63
  %25 = sdiv i32 %24, 64
  br label %28

26:                                               ; preds = %21
  %27 = sdiv i32 %19, 64
  br label %28

28:                                               ; preds = %1, %23, %26
  %29 = phi i32 [ %25, %23 ], [ %27, %26 ], [ 33554431, %1 ]
  %30 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %0, i64 0, i32 1, i32 1, i32 0
  %31 = load i32, i32* %30, align 4
  %32 = icmp slt i32 %31, 0
  %33 = select i1 %32, i32 -2147483648, i32 2147483647
  %34 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %8, i32 %31) #9
  %35 = extractvalue { i32, i1 } %34, 1
  %36 = extractvalue { i32, i1 } %34, 0
  %37 = select i1 %35, i32 %33, i32 %36, !prof !2
  %38 = icmp sgt i32 %37, 2147483583
  br i1 %38, label %46, label %39, !prof !2

39:                                               ; preds = %28
  %40 = icmp sgt i32 %37, -1
  br i1 %40, label %41, label %44

41:                                               ; preds = %39
  %42 = add nuw nsw i32 %37, 63
  %43 = sdiv i32 %42, 64
  br label %46

44:                                               ; preds = %39
  %45 = sdiv i32 %37, 64
  br label %46

46:                                               ; preds = %44, %41, %28
  %47 = phi i32 [ %43, %41 ], [ %45, %44 ], [ 33554431, %28 ]
  %48 = shl nsw i32 %6, 6
  store i32 %48, i32* %2, align 4
  %49 = shl nsw i32 %11, 6
  store i32 %49, i32* %7, align 4
  %50 = sub nsw i32 %29, %6
  %51 = icmp sgt i32 %50, 33554431
  br i1 %51, label %56, label %52

52:                                               ; preds = %46
  %53 = icmp slt i32 %50, -33554432
  %54 = shl i32 %50, 6
  %55 = select i1 %53, i32 -2147483648, i32 %54
  br label %56

56:                                               ; preds = %52, %46
  %57 = phi i32 [ 2147483647, %46 ], [ %55, %52 ]
  store i32 %57, i32* %12, align 4
  %58 = sub nsw i32 %47, %11
  %59 = icmp sgt i32 %58, 33554431
  br i1 %59, label %64, label %60

60:                                               ; preds = %56
  %61 = icmp slt i32 %58, -33554432
  %62 = shl i32 %58, 6
  %63 = select i1 %61, i32 -2147483648, i32 %62
  br label %64

64:                                               ; preds = %60, %56
  %65 = phi i32 [ 2147483647, %56 ], [ %63, %60 ]
  store i32 %65, i32* %30, align 4
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @_ZN5blink12PhysicalRect8ContractERKNS_18NGPhysicalBoxStrutE(%"struct.blink::PhysicalRect"* nocapture, %"struct.blink::NGPhysicalBoxStrut"* nocapture readonly dereferenceable(16)) local_unnamed_addr #3 align 2 {
  %3 = getelementptr inbounds %"struct.blink::NGPhysicalBoxStrut", %"struct.blink::NGPhysicalBoxStrut"* %1, i64 0, i32 0, i32 0
  %4 = load i32, i32* %3, align 4
  %5 = tail call i1 @llvm.is.constant.i32(i32 %4) #9
  br i1 %5, label %6, label %10

6:                                                ; preds = %2
  %7 = sub i32 0, %4
  %8 = icmp eq i32 %7, -2147483648
  %9 = select i1 %8, i32 2147483647, i32 %7
  br label %15

10:                                               ; preds = %2
  %11 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %4) #9
  %12 = extractvalue { i32, i1 } %11, 1
  %13 = extractvalue { i32, i1 } %11, 0
  %14 = select i1 %12, i32 2147483647, i32 %13
  br label %15

15:                                               ; preds = %6, %10
  %16 = phi i32 [ %9, %6 ], [ %14, %10 ]
  %17 = getelementptr inbounds %"struct.blink::NGPhysicalBoxStrut", %"struct.blink::NGPhysicalBoxStrut"* %1, i64 0, i32 1, i32 0
  %18 = load i32, i32* %17, align 4
  %19 = tail call i1 @llvm.is.constant.i32(i32 %18) #9
  br i1 %19, label %20, label %24

20:                                               ; preds = %15
  %21 = sub i32 0, %18
  %22 = icmp eq i32 %21, -2147483648
  %23 = select i1 %22, i32 2147483647, i32 %21
  br label %29

24:                                               ; preds = %15
  %25 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %18) #9
  %26 = extractvalue { i32, i1 } %25, 1
  %27 = extractvalue { i32, i1 } %25, 0
  %28 = select i1 %26, i32 2147483647, i32 %27
  br label %29

29:                                               ; preds = %20, %24
  %30 = phi i32 [ %23, %20 ], [ %28, %24 ]
  %31 = getelementptr inbounds %"struct.blink::NGPhysicalBoxStrut", %"struct.blink::NGPhysicalBoxStrut"* %1, i64 0, i32 2, i32 0
  %32 = load i32, i32* %31, align 4
  %33 = tail call i1 @llvm.is.constant.i32(i32 %32) #9
  br i1 %33, label %34, label %38

34:                                               ; preds = %29
  %35 = sub i32 0, %32
  %36 = icmp eq i32 %35, -2147483648
  %37 = select i1 %36, i32 2147483647, i32 %35
  br label %43

38:                                               ; preds = %29
  %39 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %32) #9
  %40 = extractvalue { i32, i1 } %39, 1
  %41 = extractvalue { i32, i1 } %39, 0
  %42 = select i1 %40, i32 2147483647, i32 %41
  br label %43

43:                                               ; preds = %34, %38
  %44 = phi i32 [ %37, %34 ], [ %42, %38 ]
  %45 = getelementptr inbounds %"struct.blink::NGPhysicalBoxStrut", %"struct.blink::NGPhysicalBoxStrut"* %1, i64 0, i32 3, i32 0
  %46 = load i32, i32* %45, align 4
  %47 = tail call i1 @llvm.is.constant.i32(i32 %46) #9
  br i1 %47, label %48, label %52

48:                                               ; preds = %43
  %49 = sub i32 0, %46
  %50 = icmp eq i32 %49, -2147483648
  %51 = select i1 %50, i32 2147483647, i32 %49
  br label %57

52:                                               ; preds = %43
  %53 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %46) #9
  %54 = extractvalue { i32, i1 } %53, 1
  %55 = extractvalue { i32, i1 } %53, 0
  %56 = select i1 %54, i32 2147483647, i32 %55
  br label %57

57:                                               ; preds = %48, %52
  %58 = phi i32 [ %51, %48 ], [ %56, %52 ]
  %59 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %0, i64 0, i32 0, i32 1, i32 0
  %60 = load i32, i32* %59, align 4
  %61 = icmp sgt i32 %16, -1
  %62 = select i1 %61, i32 -2147483648, i32 2147483647
  %63 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %60, i32 %16) #9
  %64 = extractvalue { i32, i1 } %63, 1
  %65 = extractvalue { i32, i1 } %63, 0
  %66 = select i1 %64, i32 %62, i32 %65, !prof !2
  store i32 %66, i32* %59, align 4
  %67 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %0, i64 0, i32 0, i32 0, i32 0
  %68 = load i32, i32* %67, align 4
  %69 = icmp sgt i32 %58, -1
  %70 = select i1 %69, i32 -2147483648, i32 2147483647
  %71 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %68, i32 %58) #9
  %72 = extractvalue { i32, i1 } %71, 1
  %73 = extractvalue { i32, i1 } %71, 0
  %74 = select i1 %72, i32 %70, i32 %73, !prof !2
  store i32 %74, i32* %67, align 4
  %75 = icmp slt i32 %30, 0
  %76 = select i1 %75, i32 -2147483648, i32 2147483647
  %77 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %58, i32 %30) #9
  %78 = extractvalue { i32, i1 } %77, 1
  %79 = extractvalue { i32, i1 } %77, 0
  %80 = select i1 %78, i32 %76, i32 %79, !prof !2
  %81 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %0, i64 0, i32 1, i32 0, i32 0
  %82 = load i32, i32* %81, align 4
  %83 = icmp slt i32 %80, 0
  %84 = select i1 %83, i32 -2147483648, i32 2147483647
  %85 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %82, i32 %80) #9
  %86 = extractvalue { i32, i1 } %85, 1
  %87 = extractvalue { i32, i1 } %85, 0
  %88 = select i1 %86, i32 %84, i32 %87, !prof !2
  store i32 %88, i32* %81, align 4
  %89 = icmp slt i32 %44, 0
  %90 = select i1 %89, i32 -2147483648, i32 2147483647
  %91 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %16, i32 %44) #9
  %92 = extractvalue { i32, i1 } %91, 1
  %93 = extractvalue { i32, i1 } %91, 0
  %94 = select i1 %92, i32 %90, i32 %93, !prof !2
  %95 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %0, i64 0, i32 1, i32 1, i32 0
  %96 = load i32, i32* %95, align 4
  %97 = icmp slt i32 %94, 0
  %98 = select i1 %97, i32 -2147483648, i32 2147483647
  %99 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %96, i32 %94) #9
  %100 = extractvalue { i32, i1 } %99, 1
  %101 = extractvalue { i32, i1 } %99, 0
  %102 = select i1 %100, i32 %98, i32 %101, !prof !2
  store i32 %102, i32* %95, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink12PhysicalRect8ContractERKNS_17LayoutRectOutsetsE(%"struct.blink::PhysicalRect"* nocapture, %"class.blink::LayoutRectOutsets"* nocapture readonly dereferenceable(16)) local_unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"class.blink::LayoutRectOutsets", %"class.blink::LayoutRectOutsets"* %1, i64 0, i32 0, i32 0
  %4 = load i32, i32* %3, align 4
  %5 = tail call i1 @llvm.is.constant.i32(i32 %4) #9
  br i1 %5, label %6, label %10

6:                                                ; preds = %2
  %7 = sub i32 0, %4
  %8 = icmp eq i32 %7, -2147483648
  %9 = select i1 %8, i32 2147483647, i32 %7
  br label %15

10:                                               ; preds = %2
  %11 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %4) #9
  %12 = extractvalue { i32, i1 } %11, 1
  %13 = extractvalue { i32, i1 } %11, 0
  %14 = select i1 %12, i32 2147483647, i32 %13
  br label %15

15:                                               ; preds = %6, %10
  %16 = phi i32 [ %9, %6 ], [ %14, %10 ]
  %17 = getelementptr inbounds %"class.blink::LayoutRectOutsets", %"class.blink::LayoutRectOutsets"* %1, i64 0, i32 1, i32 0
  %18 = load i32, i32* %17, align 4
  %19 = tail call i1 @llvm.is.constant.i32(i32 %18) #9
  br i1 %19, label %20, label %24

20:                                               ; preds = %15
  %21 = sub i32 0, %18
  %22 = icmp eq i32 %21, -2147483648
  %23 = select i1 %22, i32 2147483647, i32 %21
  br label %29

24:                                               ; preds = %15
  %25 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %18) #9
  %26 = extractvalue { i32, i1 } %25, 1
  %27 = extractvalue { i32, i1 } %25, 0
  %28 = select i1 %26, i32 2147483647, i32 %27
  br label %29

29:                                               ; preds = %20, %24
  %30 = phi i32 [ %23, %20 ], [ %28, %24 ]
  %31 = getelementptr inbounds %"class.blink::LayoutRectOutsets", %"class.blink::LayoutRectOutsets"* %1, i64 0, i32 2, i32 0
  %32 = load i32, i32* %31, align 4
  %33 = tail call i1 @llvm.is.constant.i32(i32 %32) #9
  br i1 %33, label %34, label %38

34:                                               ; preds = %29
  %35 = sub i32 0, %32
  %36 = icmp eq i32 %35, -2147483648
  %37 = select i1 %36, i32 2147483647, i32 %35
  br label %43

38:                                               ; preds = %29
  %39 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %32) #9
  %40 = extractvalue { i32, i1 } %39, 1
  %41 = extractvalue { i32, i1 } %39, 0
  %42 = select i1 %40, i32 2147483647, i32 %41
  br label %43

43:                                               ; preds = %34, %38
  %44 = phi i32 [ %37, %34 ], [ %42, %38 ]
  %45 = getelementptr inbounds %"class.blink::LayoutRectOutsets", %"class.blink::LayoutRectOutsets"* %1, i64 0, i32 3, i32 0
  %46 = load i32, i32* %45, align 4
  %47 = tail call i1 @llvm.is.constant.i32(i32 %46) #9
  br i1 %47, label %48, label %52

48:                                               ; preds = %43
  %49 = sub i32 0, %46
  %50 = icmp eq i32 %49, -2147483648
  %51 = select i1 %50, i32 2147483647, i32 %49
  br label %57

52:                                               ; preds = %43
  %53 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %46) #9
  %54 = extractvalue { i32, i1 } %53, 1
  %55 = extractvalue { i32, i1 } %53, 0
  %56 = select i1 %54, i32 2147483647, i32 %55
  br label %57

57:                                               ; preds = %48, %52
  %58 = phi i32 [ %51, %48 ], [ %56, %52 ]
  %59 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %0, i64 0, i32 0, i32 1, i32 0
  %60 = load i32, i32* %59, align 4
  %61 = icmp sgt i32 %16, -1
  %62 = select i1 %61, i32 -2147483648, i32 2147483647
  %63 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %60, i32 %16) #9
  %64 = extractvalue { i32, i1 } %63, 1
  %65 = extractvalue { i32, i1 } %63, 0
  %66 = select i1 %64, i32 %62, i32 %65, !prof !2
  store i32 %66, i32* %59, align 4
  %67 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %0, i64 0, i32 0, i32 0, i32 0
  %68 = load i32, i32* %67, align 4
  %69 = icmp sgt i32 %58, -1
  %70 = select i1 %69, i32 -2147483648, i32 2147483647
  %71 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %68, i32 %58) #9
  %72 = extractvalue { i32, i1 } %71, 1
  %73 = extractvalue { i32, i1 } %71, 0
  %74 = select i1 %72, i32 %70, i32 %73, !prof !2
  store i32 %74, i32* %67, align 4
  %75 = icmp slt i32 %30, 0
  %76 = select i1 %75, i32 -2147483648, i32 2147483647
  %77 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %58, i32 %30) #9
  %78 = extractvalue { i32, i1 } %77, 1
  %79 = extractvalue { i32, i1 } %77, 0
  %80 = select i1 %78, i32 %76, i32 %79, !prof !2
  %81 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %0, i64 0, i32 1, i32 0, i32 0
  %82 = load i32, i32* %81, align 4
  %83 = icmp slt i32 %80, 0
  %84 = select i1 %83, i32 -2147483648, i32 2147483647
  %85 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %82, i32 %80) #9
  %86 = extractvalue { i32, i1 } %85, 1
  %87 = extractvalue { i32, i1 } %85, 0
  %88 = select i1 %86, i32 %84, i32 %87, !prof !2
  store i32 %88, i32* %81, align 4
  %89 = icmp slt i32 %44, 0
  %90 = select i1 %89, i32 -2147483648, i32 2147483647
  %91 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %16, i32 %44) #9
  %92 = extractvalue { i32, i1 } %91, 1
  %93 = extractvalue { i32, i1 } %91, 0
  %94 = select i1 %92, i32 %90, i32 %93, !prof !2
  %95 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %0, i64 0, i32 1, i32 1, i32 0
  %96 = load i32, i32* %95, align 4
  %97 = icmp slt i32 %94, 0
  %98 = select i1 %97, i32 -2147483648, i32 2147483647
  %99 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %96, i32 %94) #9
  %100 = extractvalue { i32, i1 } %99, 1
  %101 = extractvalue { i32, i1 } %99, 0
  %102 = select i1 %100, i32 %98, i32 %101, !prof !2
  store i32 %102, i32* %95, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink12PhysicalRect9IntersectERKS0_(%"struct.blink::PhysicalRect"* nocapture, %"struct.blink::PhysicalRect"* nocapture readonly dereferenceable(16)) local_unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %0, i64 0, i32 0, i32 0, i32 0
  %4 = load i32, i32* %3, align 4
  %5 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %1, i64 0, i32 0, i32 0, i32 0
  %6 = load i32, i32* %5, align 4
  %7 = icmp slt i32 %4, %6
  %8 = select i1 %7, i32 %6, i32 %4
  %9 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %0, i64 0, i32 0, i32 1, i32 0
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %1, i64 0, i32 0, i32 1, i32 0
  %12 = load i32, i32* %11, align 4
  %13 = icmp slt i32 %10, %12
  %14 = select i1 %13, i32 %12, i32 %10
  %15 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %0, i64 0, i32 1, i32 0, i32 0
  %16 = load i32, i32* %15, align 4
  %17 = icmp slt i32 %16, 0
  %18 = select i1 %17, i32 -2147483648, i32 2147483647
  %19 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %4, i32 %16) #9
  %20 = extractvalue { i32, i1 } %19, 1
  %21 = extractvalue { i32, i1 } %19, 0
  %22 = select i1 %20, i32 %18, i32 %21
  %23 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %1, i64 0, i32 1, i32 0, i32 0
  %24 = load i32, i32* %23, align 4
  %25 = icmp slt i32 %24, 0
  %26 = select i1 %25, i32 -2147483648, i32 2147483647
  %27 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %6, i32 %24) #9
  %28 = extractvalue { i32, i1 } %27, 1
  %29 = extractvalue { i32, i1 } %27, 0
  %30 = select i1 %28, i32 %26, i32 %29, !prof !2
  %31 = icmp slt i32 %30, %22
  %32 = select i1 %31, i32 %30, i32 %22
  %33 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %0, i64 0, i32 1, i32 1, i32 0
  %34 = load i32, i32* %33, align 4
  %35 = icmp slt i32 %34, 0
  %36 = select i1 %35, i32 -2147483648, i32 2147483647
  %37 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %10, i32 %34) #9
  %38 = extractvalue { i32, i1 } %37, 1
  %39 = extractvalue { i32, i1 } %37, 0
  %40 = select i1 %38, i32 %36, i32 %39
  %41 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %1, i64 0, i32 1, i32 1, i32 0
  %42 = load i32, i32* %41, align 4
  %43 = icmp slt i32 %42, 0
  %44 = select i1 %43, i32 -2147483648, i32 2147483647
  %45 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %12, i32 %42) #9
  %46 = extractvalue { i32, i1 } %45, 1
  %47 = extractvalue { i32, i1 } %45, 0
  %48 = select i1 %46, i32 %44, i32 %47, !prof !2
  %49 = icmp slt i32 %48, %40
  %50 = select i1 %49, i32 %48, i32 %40
  %51 = icmp sge i32 %8, %32
  %52 = icmp sge i32 %14, %50
  %53 = or i1 %51, %52
  %54 = bitcast %"struct.blink::PhysicalRect"* %0 to i64*
  br i1 %53, label %55, label %56

55:                                               ; preds = %2
  store i64 0, i64* %54, align 4
  br label %62

56:                                               ; preds = %2
  %57 = zext i32 %14 to i64
  %58 = shl nuw i64 %57, 32
  %59 = zext i32 %8 to i64
  %60 = or i64 %58, %59
  store i64 %60, i64* %54, align 4
  %61 = icmp sgt i32 %8, -1
  br i1 %61, label %62, label %67

62:                                               ; preds = %55, %56
  %63 = phi i32 [ 0, %55 ], [ %14, %56 ]
  %64 = phi i32 [ 0, %55 ], [ %8, %56 ]
  %65 = phi i32 [ 0, %55 ], [ %50, %56 ]
  %66 = phi i32 [ 0, %55 ], [ %32, %56 ]
  br label %67

67:                                               ; preds = %56, %62
  %68 = phi i32 [ %63, %62 ], [ %14, %56 ]
  %69 = phi i32 [ %64, %62 ], [ %8, %56 ]
  %70 = phi i32 [ %65, %62 ], [ %50, %56 ]
  %71 = phi i32 [ %66, %62 ], [ %32, %56 ]
  %72 = phi i32 [ -2147483648, %62 ], [ 2147483647, %56 ]
  %73 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %71, i32 %69) #9
  %74 = extractvalue { i32, i1 } %73, 1
  %75 = extractvalue { i32, i1 } %73, 0
  %76 = select i1 %74, i32 %72, i32 %75, !prof !2
  %77 = icmp sgt i32 %68, -1
  %78 = select i1 %77, i32 -2147483648, i32 2147483647
  %79 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %70, i32 %68) #9
  %80 = extractvalue { i32, i1 } %79, 1
  %81 = extractvalue { i32, i1 } %79, 0
  %82 = select i1 %80, i32 %78, i32 %81, !prof !2
  %83 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %0, i64 0, i32 1
  %84 = bitcast %"struct.blink::PhysicalSize"* %83 to i64*
  %85 = zext i32 %82 to i64
  %86 = shl nuw i64 %85, 32
  %87 = zext i32 %76 to i64
  %88 = or i64 %86, %87
  store i64 %88, i64* %84, align 4
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN5blink12PhysicalRect18InclusiveIntersectERKS0_(%"struct.blink::PhysicalRect"* nocapture, %"struct.blink::PhysicalRect"* nocapture readonly dereferenceable(16)) local_unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %0, i64 0, i32 0, i32 0, i32 0
  %4 = load i32, i32* %3, align 4
  %5 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %1, i64 0, i32 0, i32 0, i32 0
  %6 = load i32, i32* %5, align 4
  %7 = icmp slt i32 %4, %6
  %8 = select i1 %7, i32 %6, i32 %4
  %9 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %0, i64 0, i32 0, i32 1, i32 0
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %1, i64 0, i32 0, i32 1, i32 0
  %12 = load i32, i32* %11, align 4
  %13 = icmp slt i32 %10, %12
  %14 = select i1 %13, i32 %12, i32 %10
  %15 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %0, i64 0, i32 1, i32 0, i32 0
  %16 = load i32, i32* %15, align 4
  %17 = icmp slt i32 %16, 0
  %18 = select i1 %17, i32 -2147483648, i32 2147483647
  %19 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %4, i32 %16) #9
  %20 = extractvalue { i32, i1 } %19, 1
  %21 = extractvalue { i32, i1 } %19, 0
  %22 = select i1 %20, i32 %18, i32 %21
  %23 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %1, i64 0, i32 1, i32 0, i32 0
  %24 = load i32, i32* %23, align 4
  %25 = icmp slt i32 %24, 0
  %26 = select i1 %25, i32 -2147483648, i32 2147483647
  %27 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %6, i32 %24) #9
  %28 = extractvalue { i32, i1 } %27, 1
  %29 = extractvalue { i32, i1 } %27, 0
  %30 = select i1 %28, i32 %26, i32 %29, !prof !2
  %31 = icmp slt i32 %30, %22
  %32 = select i1 %31, i32 %30, i32 %22
  %33 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %0, i64 0, i32 1, i32 1, i32 0
  %34 = load i32, i32* %33, align 4
  %35 = icmp slt i32 %34, 0
  %36 = select i1 %35, i32 -2147483648, i32 2147483647
  %37 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %10, i32 %34) #9
  %38 = extractvalue { i32, i1 } %37, 1
  %39 = extractvalue { i32, i1 } %37, 0
  %40 = select i1 %38, i32 %36, i32 %39
  %41 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %1, i64 0, i32 1, i32 1, i32 0
  %42 = load i32, i32* %41, align 4
  %43 = icmp slt i32 %42, 0
  %44 = select i1 %43, i32 -2147483648, i32 2147483647
  %45 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %12, i32 %42) #9
  %46 = extractvalue { i32, i1 } %45, 1
  %47 = extractvalue { i32, i1 } %45, 0
  %48 = select i1 %46, i32 %44, i32 %47, !prof !2
  %49 = icmp slt i32 %48, %40
  %50 = select i1 %49, i32 %48, i32 %40
  %51 = icmp sgt i32 %8, %32
  %52 = icmp sgt i32 %14, %50
  %53 = or i1 %51, %52
  br i1 %53, label %54, label %56

54:                                               ; preds = %2
  %55 = bitcast %"struct.blink::PhysicalRect"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %55, i8 0, i64 16, i1 false)
  br label %80

56:                                               ; preds = %2
  %57 = bitcast %"struct.blink::PhysicalRect"* %0 to i64*
  %58 = zext i32 %14 to i64
  %59 = shl nuw i64 %58, 32
  %60 = zext i32 %8 to i64
  %61 = or i64 %59, %60
  store i64 %61, i64* %57, align 4
  %62 = icmp sgt i32 %8, -1
  %63 = select i1 %62, i32 -2147483648, i32 2147483647
  %64 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %32, i32 %8) #9
  %65 = extractvalue { i32, i1 } %64, 1
  %66 = extractvalue { i32, i1 } %64, 0
  %67 = select i1 %65, i32 %63, i32 %66, !prof !2
  %68 = icmp sgt i32 %14, -1
  %69 = select i1 %68, i32 -2147483648, i32 2147483647
  %70 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %50, i32 %14) #9
  %71 = extractvalue { i32, i1 } %70, 1
  %72 = extractvalue { i32, i1 } %70, 0
  %73 = select i1 %71, i32 %69, i32 %72, !prof !2
  %74 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %0, i64 0, i32 1
  %75 = bitcast %"struct.blink::PhysicalSize"* %74 to i64*
  %76 = zext i32 %73 to i64
  %77 = shl nuw i64 %76, 32
  %78 = zext i32 %67 to i64
  %79 = or i64 %77, %78
  store i64 %79, i64* %75, align 4
  br label %80

80:                                               ; preds = %56, %54
  %81 = phi i1 [ false, %54 ], [ true, %56 ]
  ret i1 %81
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden { i64, i64 } @_ZNK5blink12PhysicalRect19ToLayoutFlippedRectERKNS_13ComputedStyleERKNS_12PhysicalSizeE(%"struct.blink::PhysicalRect"* nocapture readonly, %"class.blink::ComputedStyle"* nocapture readonly dereferenceable(104), %"struct.blink::PhysicalSize"* nocapture readonly dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.blink::ComputedStyle", %"class.blink::ComputedStyle"* %1, i64 0, i32 0, i32 9
  %5 = bitcast [20 x i8]* %4 to i160*
  %6 = load i160, i160* %5, align 8
  %7 = and i160 %6, 15211807202738752817960438464512
  %8 = icmp eq i160 %7, 5070602400912917605986812821504
  br i1 %8, label %14, label %9

9:                                                ; preds = %3
  %10 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %0, i64 0, i32 0, i32 0, i32 0
  %11 = load i32, i32* %10, align 4
  %12 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %0, i64 0, i32 1, i32 0, i32 0
  %13 = load i32, i32* %12, align 4
  br label %33

14:                                               ; preds = %3
  %15 = getelementptr inbounds %"struct.blink::PhysicalSize", %"struct.blink::PhysicalSize"* %2, i64 0, i32 0, i32 0
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %0, i64 0, i32 0, i32 0, i32 0
  %18 = load i32, i32* %17, align 4
  %19 = icmp sgt i32 %18, -1
  %20 = select i1 %19, i32 -2147483648, i32 2147483647
  %21 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %16, i32 %18) #9
  %22 = extractvalue { i32, i1 } %21, 1
  %23 = extractvalue { i32, i1 } %21, 0
  %24 = select i1 %22, i32 %20, i32 %23, !prof !2
  %25 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %0, i64 0, i32 1, i32 0, i32 0
  %26 = load i32, i32* %25, align 4
  %27 = icmp sgt i32 %26, -1
  %28 = select i1 %27, i32 -2147483648, i32 2147483647
  %29 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %24, i32 %26) #9
  %30 = extractvalue { i32, i1 } %29, 1
  %31 = extractvalue { i32, i1 } %29, 0
  %32 = select i1 %30, i32 %28, i32 %31, !prof !2
  br label %33

33:                                               ; preds = %14, %9
  %34 = phi i32 [ %26, %14 ], [ %13, %9 ]
  %35 = phi i32 [ %32, %14 ], [ %11, %9 ]
  %36 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %0, i64 0, i32 1, i32 1, i32 0
  %37 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %0, i64 0, i32 0, i32 1, i32 0
  %38 = load i32, i32* %36, align 4
  %39 = load i32, i32* %37, align 4
  %40 = zext i32 %39 to i64
  %41 = shl nuw i64 %40, 32
  %42 = zext i32 %35 to i64
  %43 = or i64 %41, %42
  %44 = insertvalue { i64, i64 } undef, i64 %43, 0
  %45 = zext i32 %38 to i64
  %46 = shl nuw i64 %45, 32
  %47 = zext i32 %34 to i64
  %48 = or i64 %46, %47
  %49 = insertvalue { i64, i64 } %44, i64 %48, 1
  ret { i64, i64 } %49
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZNK5blink12PhysicalRect8ToStringEv(%"struct.blink::PhysicalRect"*) local_unnamed_addr #2 align 2 {
  %2 = alloca %"class.std::__1::basic_string", align 8
  %3 = alloca %"class.WTF::String", align 8
  %4 = alloca %"class.std::__1::basic_string", align 8
  %5 = alloca %"class.WTF::String", align 8
  %6 = bitcast %"class.std::__1::basic_string"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %6) #9
  %7 = bitcast %"class.WTF::String"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7) #9
  %8 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %0, i64 0, i32 0
  %9 = tail call %"class.WTF::StringImpl"* @_ZNK5blink14PhysicalOffset8ToStringEv(%"struct.blink::PhysicalOffset"* %8) #9
  %10 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %3, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %9, %"class.WTF::StringImpl"** %10, align 8
  call void @_ZNK3WTF6String5AsciiEv(%"class.std::__1::basic_string"* nonnull sret %2, %"class.WTF::String"* nonnull %3) #9
  %11 = bitcast %"class.std::__1::basic_string"* %2 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %12 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %11, i64 0, i32 1, i32 0
  %13 = load i8, i8* %12, align 1
  %14 = icmp slt i8 %13, 0
  %15 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %16 = load i8*, i8** %15, align 8
  %17 = select i1 %14, i8* %16, i8* %6
  %18 = bitcast %"class.std::__1::basic_string"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %18) #9
  %19 = bitcast %"class.WTF::String"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %19) #9
  %20 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %0, i64 0, i32 1
  %21 = call %"class.WTF::StringImpl"* @_ZNK5blink12PhysicalSize8ToStringEv(%"struct.blink::PhysicalSize"* %20) #9
  %22 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %5, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %21, %"class.WTF::StringImpl"** %22, align 8
  call void @_ZNK3WTF6String5AsciiEv(%"class.std::__1::basic_string"* nonnull sret %4, %"class.WTF::String"* nonnull %5) #9
  %23 = bitcast %"class.std::__1::basic_string"* %4 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %24 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %23, i64 0, i32 1, i32 0
  %25 = load i8, i8* %24, align 1
  %26 = icmp slt i8 %25, 0
  %27 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %28 = load i8*, i8** %27, align 8
  %29 = select i1 %26, i8* %28, i8* %18
  %30 = call %"class.WTF::StringImpl"* (i8*, ...) @_ZN3WTF6String6FormatEPKcz(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i64 0, i64 0), i8* %17, i8* %29) #9
  %31 = load i8, i8* %24, align 1
  %32 = icmp slt i8 %31, 0
  br i1 %32, label %33, label %35

33:                                               ; preds = %1
  %34 = load i8*, i8** %27, align 8
  call void @_ZdlPv(i8* %34) #10
  br label %35

35:                                               ; preds = %1, %33
  %36 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %22, align 8
  %37 = icmp eq %"class.WTF::StringImpl"* %36, null
  br i1 %37, label %51, label %38

38:                                               ; preds = %35
  %39 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %36, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %40 = load atomic i32, i32* %39 monotonic, align 4
  %41 = and i32 %40, 2
  %42 = icmp eq i32 %41, 0
  %43 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %36, i64 0, i32 0
  %44 = load i32, i32* %43, align 4
  br i1 %42, label %45, label %47

45:                                               ; preds = %38
  %46 = add i32 %44, -1
  store i32 %46, i32* %43, align 4
  br label %47

47:                                               ; preds = %45, %38
  %48 = phi i32 [ %46, %45 ], [ %44, %38 ]
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %50, label %51

50:                                               ; preds = %47
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %36) #9
  br label %51

51:                                               ; preds = %35, %47, %50
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %19) #9
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %18) #9
  %52 = load i8, i8* %12, align 1
  %53 = icmp slt i8 %52, 0
  br i1 %53, label %54, label %56

54:                                               ; preds = %51
  %55 = load i8*, i8** %15, align 8
  call void @_ZdlPv(i8* %55) #10
  br label %56

56:                                               ; preds = %51, %54
  %57 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %10, align 8
  %58 = icmp eq %"class.WTF::StringImpl"* %57, null
  br i1 %58, label %72, label %59

59:                                               ; preds = %56
  %60 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %57, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %61 = load atomic i32, i32* %60 monotonic, align 4
  %62 = and i32 %61, 2
  %63 = icmp eq i32 %62, 0
  %64 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %57, i64 0, i32 0
  %65 = load i32, i32* %64, align 4
  br i1 %63, label %66, label %68

66:                                               ; preds = %59
  %67 = add i32 %65, -1
  store i32 %67, i32* %64, align 4
  br label %68

68:                                               ; preds = %66, %59
  %69 = phi i32 [ %67, %66 ], [ %65, %59 ]
  %70 = icmp eq i32 %69, 0
  br i1 %70, label %71, label %72

71:                                               ; preds = %68
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %57) #9
  br label %72

72:                                               ; preds = %56, %68, %71
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7) #9
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %6) #9
  ret %"class.WTF::StringImpl"* %30
}

declare %"class.WTF::StringImpl"* @_ZN3WTF6String6FormatEPKcz(i8*, ...) local_unnamed_addr #4

declare %"class.WTF::StringImpl"* @_ZNK5blink14PhysicalOffset8ToStringEv(%"struct.blink::PhysicalOffset"*) local_unnamed_addr #4

declare void @_ZNK3WTF6String5AsciiEv(%"class.std::__1::basic_string"* sret, %"class.WTF::String"*) local_unnamed_addr #4

declare %"class.WTF::StringImpl"* @_ZNK5blink12PhysicalSize8ToStringEv(%"struct.blink::PhysicalSize"*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden { i64, i64 } @_ZN5blink9UnionRectERKN3WTF6VectorINS_12PhysicalRectELj0ENS0_18PartitionAllocatorEEE(%"class.WTF::Vector.625"* nocapture readonly dereferenceable(16)) local_unnamed_addr #2 {
  %2 = alloca { i64, i64 }, align 8
  %3 = bitcast { i64, i64 }* %2 to %"struct.blink::PhysicalRect"*
  %4 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %2, i64 0, i32 1
  %5 = bitcast { i64, i64 }* %2 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %5, i8 0, i64 16, i1 false) #9
  %6 = getelementptr inbounds %"class.WTF::Vector.625", %"class.WTF::Vector.625"* %0, i64 0, i32 0, i32 0, i32 0
  %7 = load %"struct.blink::PhysicalRect"*, %"struct.blink::PhysicalRect"** %6, align 8
  %8 = getelementptr inbounds %"class.WTF::Vector.625", %"class.WTF::Vector.625"* %0, i64 0, i32 0, i32 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = zext i32 %9 to i64
  %11 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %7, i64 %10
  %12 = icmp eq i32 %9, 0
  br i1 %12, label %17, label %22

13:                                               ; preds = %22
  %14 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %2, i64 0, i32 0
  %15 = load i64, i64* %14, align 8
  %16 = load i64, i64* %4, align 8
  br label %17

17:                                               ; preds = %13, %1
  %18 = phi i64 [ %16, %13 ], [ 0, %1 ]
  %19 = phi i64 [ %15, %13 ], [ 0, %1 ]
  %20 = insertvalue { i64, i64 } undef, i64 %19, 0
  %21 = insertvalue { i64, i64 } %20, i64 %18, 1
  ret { i64, i64 } %21

22:                                               ; preds = %1, %22
  %23 = phi %"struct.blink::PhysicalRect"* [ %24, %22 ], [ %7, %1 ]
  call void @_ZN5blink12PhysicalRect5UniteERKS0_(%"struct.blink::PhysicalRect"* nonnull %3, %"struct.blink::PhysicalRect"* dereferenceable(16) %23)
  %24 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %23, i64 1
  %25 = icmp eq %"struct.blink::PhysicalRect"* %24, %11
  br i1 %25, label %13, label %22
}

; Function Attrs: nounwind ssp uwtable
define hidden { i64, i64 } @_ZN5blink20UnionRectEvenIfEmptyERKN3WTF6VectorINS_12PhysicalRectELj0ENS0_18PartitionAllocatorEEE(%"class.WTF::Vector.625"* dereferenceable(16)) local_unnamed_addr #2 {
  %2 = alloca i32, align 8
  %3 = alloca i32, align 4
  %4 = getelementptr inbounds %"class.WTF::Vector.625", %"class.WTF::Vector.625"* %0, i64 0, i32 0, i32 0, i32 2
  %5 = load i32, i32* %4, align 4
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %114, label %7

7:                                                ; preds = %1
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8)
  %9 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9)
  %10 = tail call dereferenceable(16) %"struct.blink::PhysicalRect"* @_ZNK3WTF6VectorIN5blink12PhysicalRectELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.625"* %0, i32 0) #9
  %11 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %10, i64 0, i32 0, i32 0, i32 0
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %10, i64 0, i32 0, i32 1, i32 0
  %14 = load i32, i32* %13, align 4
  store i32 %12, i32* %2, align 8
  store i32 %14, i32* %3, align 4
  %15 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %10, i64 0, i32 1
  %16 = bitcast %"struct.blink::PhysicalSize"* %15 to i64*
  %17 = load i64, i64* %16, align 4
  %18 = icmp eq i32 %5, 1
  br i1 %18, label %22, label %19

19:                                               ; preds = %7
  %20 = bitcast i32* %2 to %"class.blink::LayoutUnit"*
  %21 = bitcast i32* %3 to %"class.blink::LayoutUnit"*
  br label %29

22:                                               ; preds = %29, %7
  %23 = phi i32 [ %14, %7 ], [ %111, %29 ]
  %24 = phi i32 [ %12, %7 ], [ %105, %29 ]
  %25 = phi i64 [ %17, %7 ], [ %99, %29 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9)
  %26 = zext i32 %23 to i64
  %27 = shl nuw i64 %26, 32
  %28 = zext i32 %24 to i64
  br label %114

29:                                               ; preds = %29, %19
  %30 = phi i32 [ %14, %19 ], [ %111, %29 ]
  %31 = phi i32 [ %12, %19 ], [ %105, %29 ]
  %32 = phi i32 [ 1, %19 ], [ %112, %29 ]
  %33 = phi i64 [ %17, %19 ], [ %99, %29 ]
  %34 = tail call dereferenceable(16) %"struct.blink::PhysicalRect"* @_ZNK3WTF6VectorIN5blink12PhysicalRectELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.625"* %0, i32 %32) #9
  %35 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %34, i64 0, i32 0, i32 0
  %36 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %34, i64 0, i32 0, i32 0, i32 0
  %37 = load i32, i32* %36, align 4
  %38 = icmp slt i32 %37, %31
  %39 = select i1 %38, %"class.blink::LayoutUnit"* %35, %"class.blink::LayoutUnit"* %20
  %40 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %39, i64 0, i32 0
  %41 = load i32, i32* %40, align 4
  %42 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %34, i64 0, i32 0, i32 1
  %43 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %42, i64 0, i32 0
  %44 = load i32, i32* %43, align 4
  %45 = icmp slt i32 %44, %30
  %46 = select i1 %45, %"class.blink::LayoutUnit"* %42, %"class.blink::LayoutUnit"* %21
  %47 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %46, i64 0, i32 0
  %48 = load i32, i32* %47, align 4
  %49 = trunc i64 %33 to i32
  %50 = icmp slt i32 %49, 0
  %51 = select i1 %50, i32 -2147483648, i32 2147483647
  %52 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %31, i32 %49) #9
  %53 = extractvalue { i32, i1 } %52, 1
  %54 = extractvalue { i32, i1 } %52, 0
  %55 = select i1 %53, i32 %51, i32 %54
  %56 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %34, i64 0, i32 1, i32 0, i32 0
  %57 = load i32, i32* %56, align 4
  %58 = icmp slt i32 %57, 0
  %59 = select i1 %58, i32 -2147483648, i32 2147483647
  %60 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %37, i32 %57) #9
  %61 = extractvalue { i32, i1 } %60, 1
  %62 = extractvalue { i32, i1 } %60, 0
  %63 = select i1 %61, i32 %59, i32 %62, !prof !2
  %64 = icmp slt i32 %55, %63
  %65 = select i1 %64, i32 %63, i32 %55
  %66 = lshr i64 %33, 32
  %67 = trunc i64 %66 to i32
  %68 = icmp slt i32 %67, 0
  %69 = select i1 %68, i32 -2147483648, i32 2147483647
  %70 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %30, i32 %67) #9
  %71 = extractvalue { i32, i1 } %70, 1
  %72 = extractvalue { i32, i1 } %70, 0
  %73 = select i1 %71, i32 %69, i32 %72
  %74 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %34, i64 0, i32 1, i32 1, i32 0
  %75 = load i32, i32* %74, align 4
  %76 = icmp slt i32 %75, 0
  %77 = select i1 %76, i32 -2147483648, i32 2147483647
  %78 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %44, i32 %75) #9
  %79 = extractvalue { i32, i1 } %78, 1
  %80 = extractvalue { i32, i1 } %78, 0
  %81 = select i1 %79, i32 %77, i32 %80, !prof !2
  %82 = icmp slt i32 %73, %81
  %83 = select i1 %82, i32 %81, i32 %73
  %84 = icmp sgt i32 %41, -1
  %85 = select i1 %84, i32 -2147483648, i32 2147483647
  %86 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %65, i32 %41) #9
  %87 = extractvalue { i32, i1 } %86, 1
  %88 = extractvalue { i32, i1 } %86, 0
  %89 = select i1 %87, i32 %85, i32 %88, !prof !2
  %90 = icmp sgt i32 %48, -1
  %91 = select i1 %90, i32 -2147483648, i32 2147483647
  %92 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %83, i32 %48) #9
  %93 = extractvalue { i32, i1 } %92, 1
  %94 = extractvalue { i32, i1 } %92, 0
  %95 = select i1 %93, i32 %91, i32 %94, !prof !2
  %96 = zext i32 %95 to i64
  %97 = shl nuw i64 %96, 32
  %98 = zext i32 %89 to i64
  %99 = or i64 %97, %98
  %100 = icmp sgt i32 %89, -1
  %101 = select i1 %100, i32 -2147483648, i32 2147483647
  %102 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %65, i32 %89) #9
  %103 = extractvalue { i32, i1 } %102, 1
  %104 = extractvalue { i32, i1 } %102, 0
  %105 = select i1 %103, i32 %101, i32 %104, !prof !2
  %106 = icmp sgt i32 %95, -1
  %107 = select i1 %106, i32 -2147483648, i32 2147483647
  %108 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %83, i32 %95) #9
  %109 = extractvalue { i32, i1 } %108, 1
  %110 = extractvalue { i32, i1 } %108, 0
  %111 = select i1 %109, i32 %107, i32 %110, !prof !2
  store i32 %105, i32* %2, align 8
  store i32 %111, i32* %3, align 4
  %112 = add nuw i32 %32, 1
  %113 = icmp eq i32 %112, %5
  br i1 %113, label %22, label %29

114:                                              ; preds = %1, %22
  %115 = phi i64 [ %28, %22 ], [ 0, %1 ]
  %116 = phi i64 [ %27, %22 ], [ 0, %1 ]
  %117 = phi i64 [ %25, %22 ], [ 0, %1 ]
  %118 = or i64 %116, %115
  %119 = insertvalue { i64, i64 } undef, i64 %118, 0
  %120 = insertvalue { i64, i64 } %119, i64 %117, 1
  ret { i64, i64 } %120
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN5blinklsERNSt3__113basic_ostreamIcNS0_11char_traitsIcEEEERKNS_12PhysicalRectE(%"class.std::__1::basic_ostream"* dereferenceable(160), %"struct.blink::PhysicalRect"* dereferenceable(16)) local_unnamed_addr #2 {
  %3 = alloca %"class.WTF::String", align 8
  %4 = bitcast %"class.WTF::String"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %4) #9
  %5 = tail call %"class.WTF::StringImpl"* @_ZNK5blink12PhysicalRect8ToStringEv(%"struct.blink::PhysicalRect"* %1)
  %6 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %3, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %5, %"class.WTF::StringImpl"** %6, align 8
  %7 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN3WTFlsERNSt3__113basic_ostreamIcNS0_11char_traitsIcEEEERKNS_6StringE(%"class.std::__1::basic_ostream"* dereferenceable(160) %0, %"class.WTF::String"* nonnull dereferenceable(8) %3) #9
  %8 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %6, align 8
  %9 = icmp eq %"class.WTF::StringImpl"* %8, null
  br i1 %9, label %23, label %10

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %12 = load atomic i32, i32* %11 monotonic, align 4
  %13 = and i32 %12, 2
  %14 = icmp eq i32 %13, 0
  %15 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 0
  %16 = load i32, i32* %15, align 4
  br i1 %14, label %17, label %19

17:                                               ; preds = %10
  %18 = add i32 %16, -1
  store i32 %18, i32* %15, align 4
  br label %19

19:                                               ; preds = %17, %10
  %20 = phi i32 [ %18, %17 ], [ %16, %10 ]
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %23

22:                                               ; preds = %19
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %8) #9
  br label %23

23:                                               ; preds = %2, %19, %22
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %4) #9
  ret %"class.std::__1::basic_ostream"* %7
}

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN3WTFlsERNSt3__113basic_ostreamIcNS0_11char_traitsIcEEEERKNS_6StringE(%"class.std::__1::basic_ostream"* dereferenceable(160), %"class.WTF::String"* dereferenceable(8)) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(48) %"class.WTF::TextStream"* @_ZN5blinklsERN3WTF10TextStreamERKNS_12PhysicalRectE(%"class.WTF::TextStream"* returned dereferenceable(48), %"struct.blink::PhysicalRect"* nocapture readonly dereferenceable(16)) local_unnamed_addr #2 {
  %3 = alloca %"struct.WTF::TextStream::FormatNumberRespectingIntegers", align 8
  %4 = alloca %"struct.WTF::TextStream::FormatNumberRespectingIntegers", align 8
  %5 = alloca %"struct.WTF::TextStream::FormatNumberRespectingIntegers", align 8
  %6 = alloca %"struct.WTF::TextStream::FormatNumberRespectingIntegers", align 8
  %7 = tail call dereferenceable(48) %"class.WTF::TextStream"* @_ZN3WTF10TextStreamlsEPKc(%"class.WTF::TextStream"* %0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0)) #9
  %8 = bitcast %"struct.WTF::TextStream::FormatNumberRespectingIntegers"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %8) #9
  %9 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %1, i64 0, i32 0, i32 0, i32 0
  %10 = load i32, i32* %9, align 4
  %11 = sitofp i32 %10 to float
  %12 = fmul float %11, 1.562500e-02
  %13 = fpext float %12 to double
  %14 = getelementptr inbounds %"struct.WTF::TextStream::FormatNumberRespectingIntegers", %"struct.WTF::TextStream::FormatNumberRespectingIntegers"* %3, i64 0, i32 0
  store double %13, double* %14, align 8
  %15 = call dereferenceable(48) %"class.WTF::TextStream"* @_ZN3WTF10TextStreamlsERKNS0_30FormatNumberRespectingIntegersE(%"class.WTF::TextStream"* %7, %"struct.WTF::TextStream::FormatNumberRespectingIntegers"* nonnull dereferenceable(8) %3) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %8) #9
  %16 = call dereferenceable(48) %"class.WTF::TextStream"* @_ZN3WTF10TextStreamlsEPKc(%"class.WTF::TextStream"* %0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)) #9
  %17 = bitcast %"struct.WTF::TextStream::FormatNumberRespectingIntegers"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #9
  %18 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %1, i64 0, i32 0, i32 1, i32 0
  %19 = load i32, i32* %18, align 4
  %20 = sitofp i32 %19 to float
  %21 = fmul float %20, 1.562500e-02
  %22 = fpext float %21 to double
  %23 = getelementptr inbounds %"struct.WTF::TextStream::FormatNumberRespectingIntegers", %"struct.WTF::TextStream::FormatNumberRespectingIntegers"* %4, i64 0, i32 0
  store double %22, double* %23, align 8
  %24 = call dereferenceable(48) %"class.WTF::TextStream"* @_ZN3WTF10TextStreamlsERKNS0_30FormatNumberRespectingIntegersE(%"class.WTF::TextStream"* %16, %"struct.WTF::TextStream::FormatNumberRespectingIntegers"* nonnull dereferenceable(8) %4) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #9
  %25 = call dereferenceable(48) %"class.WTF::TextStream"* @_ZN3WTF10TextStreamlsEPKc(%"class.WTF::TextStream"* %0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3, i64 0, i64 0)) #9
  %26 = bitcast %"struct.WTF::TextStream::FormatNumberRespectingIntegers"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %26) #9
  %27 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %1, i64 0, i32 1, i32 0, i32 0
  %28 = load i32, i32* %27, align 4
  %29 = sitofp i32 %28 to float
  %30 = fmul float %29, 1.562500e-02
  %31 = fpext float %30 to double
  %32 = getelementptr inbounds %"struct.WTF::TextStream::FormatNumberRespectingIntegers", %"struct.WTF::TextStream::FormatNumberRespectingIntegers"* %5, i64 0, i32 0
  store double %31, double* %32, align 8
  %33 = call dereferenceable(48) %"class.WTF::TextStream"* @_ZN3WTF10TextStreamlsERKNS0_30FormatNumberRespectingIntegersE(%"class.WTF::TextStream"* %25, %"struct.WTF::TextStream::FormatNumberRespectingIntegers"* nonnull dereferenceable(8) %5) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %26) #9
  %34 = call dereferenceable(48) %"class.WTF::TextStream"* @_ZN3WTF10TextStreamlsEPKc(%"class.WTF::TextStream"* %0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)) #9
  %35 = bitcast %"struct.WTF::TextStream::FormatNumberRespectingIntegers"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %35) #9
  %36 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %1, i64 0, i32 1, i32 1, i32 0
  %37 = load i32, i32* %36, align 4
  %38 = sitofp i32 %37 to float
  %39 = fmul float %38, 1.562500e-02
  %40 = fpext float %39 to double
  %41 = getelementptr inbounds %"struct.WTF::TextStream::FormatNumberRespectingIntegers", %"struct.WTF::TextStream::FormatNumberRespectingIntegers"* %6, i64 0, i32 0
  store double %40, double* %41, align 8
  %42 = call dereferenceable(48) %"class.WTF::TextStream"* @_ZN3WTF10TextStreamlsERKNS0_30FormatNumberRespectingIntegersE(%"class.WTF::TextStream"* %34, %"struct.WTF::TextStream::FormatNumberRespectingIntegers"* nonnull dereferenceable(8) %6) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %35) #9
  ret %"class.WTF::TextStream"* %0
}

declare dereferenceable(48) %"class.WTF::TextStream"* @_ZN3WTF10TextStreamlsEPKc(%"class.WTF::TextStream"*, i8*) local_unnamed_addr #4

declare dereferenceable(48) %"class.WTF::TextStream"* @_ZN3WTF10TextStreamlsERKNS0_30FormatNumberRespectingIntegersE(%"class.WTF::TextStream"*, %"struct.WTF::TextStream::FormatNumberRespectingIntegers"* dereferenceable(8)) local_unnamed_addr #4

; Function Attrs: nounwind readnone
declare i1 @llvm.is.constant.i32(i32) #5

; Function Attrs: nounwind readnone speculatable
declare { i32, i1 } @llvm.ssub.with.overflow.i32(i32, i32) #6

; Function Attrs: nounwind readnone speculatable
declare { i32, i1 } @llvm.sadd.with.overflow.i32(i32, i32) #6

declare void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"*) local_unnamed_addr #4

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #7

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(16) %"struct.blink::PhysicalRect"* @_ZNK3WTF6VectorIN5blink12PhysicalRectELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.625"*, i32) local_unnamed_addr #2 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #9
  %7 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %7, align 8
  %8 = getelementptr inbounds %"class.WTF::Vector.625", %"class.WTF::Vector.625"* %0, i64 0, i32 0, i32 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10)
  %11 = icmp ugt i32 %9, %1
  br i1 %11, label %12, label %13

12:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* null, i8** %7, align 8
  br label %22

13:                                               ; preds = %2
  %14 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %1) #9
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %9) #9
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.5, i64 0, i64 0), i8* %14, i8* %15) #9
  %16 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %17 = load i8*, i8** %16, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* %17, i8** %7, align 8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %13
  %20 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #9
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.6, i64 0, i64 0), i32 1176, %"class.logging::CheckOpResult"* nonnull %4) #9
  %21 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #9
  br label %22

22:                                               ; preds = %12, %13, %19
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #9
  %23 = getelementptr inbounds %"class.WTF::Vector.625", %"class.WTF::Vector.625"* %0, i64 0, i32 0, i32 0, i32 0
  %24 = load %"struct.blink::PhysicalRect"*, %"struct.blink::PhysicalRect"** %23, align 8
  %25 = zext i32 %1 to i64
  %26 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %24, i64 %25
  ret %"struct.blink::PhysicalRect"* %26
}

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #4

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #4

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #8

declare i8* @_ZN7logging15CheckOpValueStrEj(i32) local_unnamed_addr #4

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #4

attributes #0 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone }
attributes #6 = { nounwind readnone speculatable }
attributes #7 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }
attributes #10 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
