; ModuleID = '../../third_party/libaom/source/libaom/aom_dsp/x86/aom_subpixel_8t_intrin_sse2.c'
source_filename = "../../third_party/libaom/source/libaom/aom_dsp/x86/aom_subpixel_8t_intrin_sse2.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @aom_filter_block1d16_h4_sse2(i8* nocapture readonly, i64, i8* nocapture, i64, i32, i16* nocapture readonly) local_unnamed_addr #0 {
  %7 = bitcast i16* %5 to <8 x i16>*
  %8 = load <8 x i16>, <8 x i16>* %7, align 1
  %9 = ashr <8 x i16> %8, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %10 = bitcast <8 x i16> %9 to <4 x i32>
  %11 = icmp eq i32 %4, 0
  br i1 %11, label %83, label %12

12:                                               ; preds = %6
  %13 = shufflevector <4 x i32> %10, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 undef, i32 undef>
  %14 = bitcast <4 x i32> %13 to <2 x i64>
  %15 = shufflevector <2 x i64> %14, <2 x i64> undef, <2 x i32> zeroinitializer
  %16 = shufflevector <4 x i32> %10, <4 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 1, i32 1>
  %17 = bitcast <4 x i32> %16 to <2 x i64>
  %18 = shufflevector <2 x i64> %17, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %19 = getelementptr inbounds i8, i8* %0, i64 -3
  %20 = bitcast <2 x i64> %18 to <8 x i16>
  %21 = bitcast <2 x i64> %15 to <8 x i16>
  br label %22

22:                                               ; preds = %12, %22
  %23 = phi i8* [ %19, %12 ], [ %78, %22 ]
  %24 = phi i8* [ %2, %12 ], [ %80, %22 ]
  %25 = phi i32 [ %4, %12 ], [ %81, %22 ]
  %26 = bitcast i8* %23 to <16 x i8>*
  %27 = load <16 x i8>, <16 x i8>* %26, align 1
  %28 = shufflevector <16 x i8> %27, <16 x i8> undef, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %29 = shufflevector <16 x i8> %27, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %30 = shufflevector <16 x i8> %28, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %31 = shufflevector <16 x i8> %29, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %32 = bitcast <16 x i8> %30 to <8 x i16>
  %33 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %32, <8 x i16> %20) #3
  %34 = bitcast <16 x i8> %31 to <8 x i16>
  %35 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %34, <8 x i16> %21) #3
  %36 = add <4 x i32> %35, %33
  %37 = shufflevector <16 x i8> %27, <16 x i8> undef, <16 x i32> <i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %38 = shufflevector <16 x i8> %27, <16 x i8> undef, <16 x i32> <i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %39 = shufflevector <16 x i8> %37, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %40 = shufflevector <16 x i8> %38, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %41 = bitcast <16 x i8> %39 to <8 x i16>
  %42 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %41, <8 x i16> %20) #3
  %43 = bitcast <16 x i8> %40 to <8 x i16>
  %44 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %43, <8 x i16> %21) #3
  %45 = add <4 x i32> %44, %42
  %46 = shufflevector <4 x i32> %36, <4 x i32> %45, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %47 = shufflevector <4 x i32> %36, <4 x i32> %45, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %48 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %46, <4 x i32> %47) #3
  %49 = getelementptr inbounds i8, i8* %23, i64 8
  %50 = bitcast i8* %49 to <16 x i8>*
  %51 = load <16 x i8>, <16 x i8>* %50, align 1
  %52 = shufflevector <16 x i8> %51, <16 x i8> undef, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %53 = shufflevector <16 x i8> %51, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %54 = shufflevector <16 x i8> %52, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %55 = shufflevector <16 x i8> %53, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %56 = bitcast <16 x i8> %54 to <8 x i16>
  %57 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %56, <8 x i16> %20) #3
  %58 = bitcast <16 x i8> %55 to <8 x i16>
  %59 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %58, <8 x i16> %21) #3
  %60 = add <4 x i32> %59, %57
  %61 = shufflevector <16 x i8> %51, <16 x i8> undef, <16 x i32> <i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %62 = shufflevector <16 x i8> %51, <16 x i8> undef, <16 x i32> <i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %63 = shufflevector <16 x i8> %61, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %64 = shufflevector <16 x i8> %62, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %65 = bitcast <16 x i8> %63 to <8 x i16>
  %66 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %65, <8 x i16> %20) #3
  %67 = bitcast <16 x i8> %64 to <8 x i16>
  %68 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %67, <8 x i16> %21) #3
  %69 = add <4 x i32> %68, %66
  %70 = shufflevector <4 x i32> %60, <4 x i32> %69, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %71 = shufflevector <4 x i32> %60, <4 x i32> %69, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %72 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %70, <4 x i32> %71) #3
  %73 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %48, <8 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>) #3
  %74 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %72, <8 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>) #3
  %75 = ashr <8 x i16> %73, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %76 = ashr <8 x i16> %74, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %77 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %75, <8 x i16> %76) #3
  %78 = getelementptr inbounds i8, i8* %23, i64 %1
  %79 = bitcast i8* %24 to <16 x i8>*
  store <16 x i8> %77, <16 x i8>* %79, align 16
  %80 = getelementptr inbounds i8, i8* %24, i64 %3
  %81 = add i32 %25, -1
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %83, label %22

83:                                               ; preds = %22, %6
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @aom_filter_block1d16_v4_sse2(i8* nocapture readonly, i64, i8* nocapture, i64, i32, i16* nocapture readonly) local_unnamed_addr #0 {
  %7 = bitcast i16* %5 to <8 x i16>*
  %8 = load <8 x i16>, <8 x i16>* %7, align 1
  %9 = ashr <8 x i16> %8, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %10 = bitcast <8 x i16> %9 to <4 x i32>
  %11 = shl i64 %1, 1
  %12 = shl i64 %3, 1
  %13 = getelementptr inbounds i8, i8* %0, i64 %11
  %14 = bitcast i8* %13 to <16 x i8>*
  %15 = load <16 x i8>, <16 x i8>* %14, align 1
  %16 = mul nsw i64 %1, 3
  %17 = getelementptr inbounds i8, i8* %0, i64 %16
  %18 = bitcast i8* %17 to <16 x i8>*
  %19 = load <16 x i8>, <16 x i8>* %18, align 1
  %20 = shufflevector <16 x i8> %15, <16 x i8> %19, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %21 = shufflevector <16 x i8> %15, <16 x i8> %19, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %22 = shl nsw i64 %1, 2
  %23 = getelementptr inbounds i8, i8* %0, i64 %22
  %24 = bitcast i8* %23 to <2 x i64>*
  %25 = load <2 x i64>, <2 x i64>* %24, align 1
  %26 = bitcast <2 x i64> %25 to <16 x i8>
  %27 = shufflevector <16 x i8> %19, <16 x i8> %26, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %28 = shufflevector <16 x i8> %19, <16 x i8> %26, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %29 = icmp ugt i32 %4, 1
  br i1 %29, label %30, label %143

30:                                               ; preds = %6
  %31 = shufflevector <16 x i8> %28, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %32 = shufflevector <16 x i8> %28, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %33 = shufflevector <16 x i8> %27, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %34 = shufflevector <16 x i8> %27, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %35 = shufflevector <16 x i8> %21, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %36 = shufflevector <16 x i8> %21, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %37 = shufflevector <16 x i8> %20, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %38 = shufflevector <16 x i8> %20, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %39 = shufflevector <4 x i32> %10, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 undef, i32 undef>
  %40 = bitcast <4 x i32> %39 to <2 x i64>
  %41 = shufflevector <2 x i64> %40, <2 x i64> undef, <2 x i32> zeroinitializer
  %42 = shufflevector <4 x i32> %10, <4 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 1, i32 1>
  %43 = bitcast <4 x i32> %42 to <2 x i64>
  %44 = shufflevector <2 x i64> %43, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %45 = mul nsw i64 %1, 5
  %46 = mul nsw i64 %1, 6
  %47 = bitcast <2 x i64> %44 to <8 x i16>
  %48 = bitcast <2 x i64> %41 to <8 x i16>
  br label %49

49:                                               ; preds = %30, %49
  %50 = phi i8* [ %0, %30 ], [ %136, %49 ]
  %51 = phi i8* [ %2, %30 ], [ %140, %49 ]
  %52 = phi <2 x i64> [ %25, %30 ], [ %70, %49 ]
  %53 = phi <16 x i8> [ %31, %30 ], [ %118, %49 ]
  %54 = phi <16 x i8> [ %32, %30 ], [ %117, %49 ]
  %55 = phi <16 x i8> [ %33, %30 ], [ %92, %49 ]
  %56 = phi <16 x i8> [ %34, %30 ], [ %91, %49 ]
  %57 = phi <16 x i8> [ %35, %30 ], [ %111, %49 ]
  %58 = phi <16 x i8> [ %36, %30 ], [ %110, %49 ]
  %59 = phi <16 x i8> [ %37, %30 ], [ %85, %49 ]
  %60 = phi <16 x i8> [ %38, %30 ], [ %84, %49 ]
  %61 = phi i32 [ %4, %30 ], [ %141, %49 ]
  %62 = getelementptr inbounds i8, i8* %50, i64 %45
  %63 = bitcast i8* %62 to <16 x i8>*
  %64 = load <16 x i8>, <16 x i8>* %63, align 1
  %65 = bitcast <2 x i64> %52 to <16 x i8>
  %66 = shufflevector <16 x i8> %65, <16 x i8> %64, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %67 = shufflevector <16 x i8> %65, <16 x i8> %64, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %68 = getelementptr inbounds i8, i8* %50, i64 %46
  %69 = bitcast i8* %68 to <2 x i64>*
  %70 = load <2 x i64>, <2 x i64>* %69, align 1
  %71 = bitcast <2 x i64> %70 to <16 x i8>
  %72 = shufflevector <16 x i8> %64, <16 x i8> %71, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %73 = shufflevector <16 x i8> %64, <16 x i8> %71, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %74 = bitcast <16 x i8> %60 to <8 x i16>
  %75 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %74, <8 x i16> %47) #3
  %76 = bitcast <16 x i8> %59 to <8 x i16>
  %77 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %76, <8 x i16> %47) #3
  %78 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %75, <4 x i32> %77) #3
  %79 = bitcast <16 x i8> %56 to <8 x i16>
  %80 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %79, <8 x i16> %47) #3
  %81 = bitcast <16 x i8> %55 to <8 x i16>
  %82 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %81, <8 x i16> %47) #3
  %83 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %80, <4 x i32> %82) #3
  %84 = shufflevector <16 x i8> %66, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %85 = shufflevector <16 x i8> %66, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %86 = bitcast <16 x i8> %84 to <8 x i16>
  %87 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %86, <8 x i16> %48) #3
  %88 = bitcast <16 x i8> %85 to <8 x i16>
  %89 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %88, <8 x i16> %48) #3
  %90 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %87, <4 x i32> %89) #3
  %91 = shufflevector <16 x i8> %72, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %92 = shufflevector <16 x i8> %72, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %93 = bitcast <16 x i8> %91 to <8 x i16>
  %94 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %93, <8 x i16> %48) #3
  %95 = bitcast <16 x i8> %92 to <8 x i16>
  %96 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %95, <8 x i16> %48) #3
  %97 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %94, <4 x i32> %96) #3
  %98 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %78, <8 x i16> %90) #3
  %99 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %83, <8 x i16> %97) #3
  %100 = bitcast <16 x i8> %58 to <8 x i16>
  %101 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %100, <8 x i16> %47) #3
  %102 = bitcast <16 x i8> %57 to <8 x i16>
  %103 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %102, <8 x i16> %47) #3
  %104 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %101, <4 x i32> %103) #3
  %105 = bitcast <16 x i8> %54 to <8 x i16>
  %106 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %105, <8 x i16> %47) #3
  %107 = bitcast <16 x i8> %53 to <8 x i16>
  %108 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %107, <8 x i16> %47) #3
  %109 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %106, <4 x i32> %108) #3
  %110 = shufflevector <16 x i8> %67, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %111 = shufflevector <16 x i8> %67, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %112 = bitcast <16 x i8> %110 to <8 x i16>
  %113 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %112, <8 x i16> %48) #3
  %114 = bitcast <16 x i8> %111 to <8 x i16>
  %115 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %114, <8 x i16> %48) #3
  %116 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %113, <4 x i32> %115) #3
  %117 = shufflevector <16 x i8> %73, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %118 = shufflevector <16 x i8> %73, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %119 = bitcast <16 x i8> %117 to <8 x i16>
  %120 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %119, <8 x i16> %48) #3
  %121 = bitcast <16 x i8> %118 to <8 x i16>
  %122 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %121, <8 x i16> %48) #3
  %123 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %120, <4 x i32> %122) #3
  %124 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %104, <8 x i16> %116) #3
  %125 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %109, <8 x i16> %123) #3
  %126 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %98, <8 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>) #3
  %127 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %99, <8 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>) #3
  %128 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %124, <8 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>) #3
  %129 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %125, <8 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>) #3
  %130 = ashr <8 x i16> %126, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %131 = ashr <8 x i16> %127, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %132 = ashr <8 x i16> %128, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %133 = ashr <8 x i16> %129, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %134 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %130, <8 x i16> %132) #3
  %135 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %131, <8 x i16> %133) #3
  %136 = getelementptr inbounds i8, i8* %50, i64 %11
  %137 = bitcast i8* %51 to <16 x i8>*
  store <16 x i8> %134, <16 x i8>* %137, align 16
  %138 = getelementptr inbounds i8, i8* %51, i64 %3
  %139 = bitcast i8* %138 to <16 x i8>*
  store <16 x i8> %135, <16 x i8>* %139, align 16
  %140 = getelementptr inbounds i8, i8* %51, i64 %12
  %141 = add i32 %61, -2
  %142 = icmp ugt i32 %141, 1
  br i1 %142, label %49, label %143

143:                                              ; preds = %49, %6
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @aom_filter_block1d8_h4_sse2(i8* nocapture readonly, i64, i8* nocapture, i64, i32, i16* nocapture readonly) local_unnamed_addr #0 {
  %7 = bitcast i16* %5 to <8 x i16>*
  %8 = load <8 x i16>, <8 x i16>* %7, align 1
  %9 = ashr <8 x i16> %8, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %10 = bitcast <8 x i16> %9 to <4 x i32>
  %11 = icmp eq i32 %4, 0
  br i1 %11, label %59, label %12

12:                                               ; preds = %6
  %13 = shufflevector <4 x i32> %10, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 undef, i32 undef>
  %14 = bitcast <4 x i32> %13 to <2 x i64>
  %15 = shufflevector <2 x i64> %14, <2 x i64> undef, <2 x i32> zeroinitializer
  %16 = shufflevector <4 x i32> %10, <4 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 1, i32 1>
  %17 = bitcast <4 x i32> %16 to <2 x i64>
  %18 = shufflevector <2 x i64> %17, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %19 = getelementptr inbounds i8, i8* %0, i64 -3
  %20 = bitcast <2 x i64> %18 to <8 x i16>
  %21 = bitcast <2 x i64> %15 to <8 x i16>
  br label %22

22:                                               ; preds = %12, %22
  %23 = phi i8* [ %19, %12 ], [ %53, %22 ]
  %24 = phi i8* [ %2, %12 ], [ %56, %22 ]
  %25 = phi i32 [ %4, %12 ], [ %57, %22 ]
  %26 = bitcast i8* %23 to <16 x i8>*
  %27 = load <16 x i8>, <16 x i8>* %26, align 1
  %28 = shufflevector <16 x i8> %27, <16 x i8> undef, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %29 = shufflevector <16 x i8> %27, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %30 = shufflevector <16 x i8> %28, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %31 = shufflevector <16 x i8> %29, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %32 = bitcast <16 x i8> %30 to <8 x i16>
  %33 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %32, <8 x i16> %20) #3
  %34 = bitcast <16 x i8> %31 to <8 x i16>
  %35 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %34, <8 x i16> %21) #3
  %36 = add <4 x i32> %35, %33
  %37 = shufflevector <16 x i8> %27, <16 x i8> undef, <16 x i32> <i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %38 = shufflevector <16 x i8> %27, <16 x i8> undef, <16 x i32> <i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %39 = shufflevector <16 x i8> %37, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %40 = shufflevector <16 x i8> %38, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %41 = bitcast <16 x i8> %39 to <8 x i16>
  %42 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %41, <8 x i16> %20) #3
  %43 = bitcast <16 x i8> %40 to <8 x i16>
  %44 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %43, <8 x i16> %21) #3
  %45 = add <4 x i32> %44, %42
  %46 = shufflevector <4 x i32> %36, <4 x i32> %45, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %47 = shufflevector <4 x i32> %36, <4 x i32> %45, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %48 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %46, <4 x i32> %47) #3
  %49 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %48, <8 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>) #3
  %50 = ashr <8 x i16> %49, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %51 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %50, <8 x i16> undef) #3
  %52 = bitcast <16 x i8> %51 to <2 x i64>
  %53 = getelementptr inbounds i8, i8* %23, i64 %1
  %54 = extractelement <2 x i64> %52, i32 0
  %55 = bitcast i8* %24 to i64*
  store i64 %54, i64* %55, align 1
  %56 = getelementptr inbounds i8, i8* %24, i64 %3
  %57 = add i32 %25, -1
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %59, label %22

59:                                               ; preds = %22, %6
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @aom_filter_block1d8_v4_sse2(i8* nocapture readonly, i64, i8* nocapture, i64, i32, i16* nocapture readonly) local_unnamed_addr #0 {
  %7 = bitcast i16* %5 to <8 x i16>*
  %8 = load <8 x i16>, <8 x i16>* %7, align 1
  %9 = ashr <8 x i16> %8, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %10 = bitcast <8 x i16> %9 to <4 x i32>
  %11 = shl i64 %1, 1
  %12 = shl i64 %3, 1
  %13 = getelementptr inbounds i8, i8* %0, i64 %11
  %14 = bitcast i8* %13 to <16 x i8>*
  %15 = load <16 x i8>, <16 x i8>* %14, align 1
  %16 = mul nsw i64 %1, 3
  %17 = getelementptr inbounds i8, i8* %0, i64 %16
  %18 = bitcast i8* %17 to <16 x i8>*
  %19 = load <16 x i8>, <16 x i8>* %18, align 1
  %20 = shufflevector <16 x i8> %15, <16 x i8> %19, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %21 = shl nsw i64 %1, 2
  %22 = getelementptr inbounds i8, i8* %0, i64 %21
  %23 = bitcast i8* %22 to <2 x i64>*
  %24 = load <2 x i64>, <2 x i64>* %23, align 1
  %25 = bitcast <2 x i64> %24 to <16 x i8>
  %26 = shufflevector <16 x i8> %19, <16 x i8> %25, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %27 = icmp ugt i32 %4, 1
  br i1 %27, label %28, label %105

28:                                               ; preds = %6
  %29 = shufflevector <16 x i8> %26, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %30 = shufflevector <16 x i8> %26, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %31 = shufflevector <16 x i8> %20, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %32 = shufflevector <16 x i8> %20, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %33 = shufflevector <4 x i32> %10, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 undef, i32 undef>
  %34 = bitcast <4 x i32> %33 to <2 x i64>
  %35 = shufflevector <2 x i64> %34, <2 x i64> undef, <2 x i32> zeroinitializer
  %36 = shufflevector <4 x i32> %10, <4 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 1, i32 1>
  %37 = bitcast <4 x i32> %36 to <2 x i64>
  %38 = shufflevector <2 x i64> %37, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %39 = mul nsw i64 %1, 5
  %40 = mul nsw i64 %1, 6
  %41 = bitcast <2 x i64> %38 to <8 x i16>
  %42 = bitcast <2 x i64> %35 to <8 x i16>
  br label %43

43:                                               ; preds = %28, %43
  %44 = phi i8* [ %0, %28 ], [ %96, %43 ]
  %45 = phi i8* [ %2, %28 ], [ %102, %43 ]
  %46 = phi <2 x i64> [ %24, %28 ], [ %59, %43 ]
  %47 = phi <16 x i8> [ %29, %28 ], [ %80, %43 ]
  %48 = phi <16 x i8> [ %30, %28 ], [ %79, %43 ]
  %49 = phi <16 x i8> [ %31, %28 ], [ %73, %43 ]
  %50 = phi <16 x i8> [ %32, %28 ], [ %72, %43 ]
  %51 = phi i32 [ %4, %28 ], [ %103, %43 ]
  %52 = getelementptr inbounds i8, i8* %44, i64 %39
  %53 = bitcast i8* %52 to <16 x i8>*
  %54 = load <16 x i8>, <16 x i8>* %53, align 1
  %55 = bitcast <2 x i64> %46 to <16 x i8>
  %56 = shufflevector <16 x i8> %55, <16 x i8> %54, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %57 = getelementptr inbounds i8, i8* %44, i64 %40
  %58 = bitcast i8* %57 to <2 x i64>*
  %59 = load <2 x i64>, <2 x i64>* %58, align 1
  %60 = bitcast <2 x i64> %59 to <16 x i8>
  %61 = shufflevector <16 x i8> %54, <16 x i8> %60, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %62 = bitcast <16 x i8> %50 to <8 x i16>
  %63 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %62, <8 x i16> %41) #3
  %64 = bitcast <16 x i8> %49 to <8 x i16>
  %65 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %64, <8 x i16> %41) #3
  %66 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %63, <4 x i32> %65) #3
  %67 = bitcast <16 x i8> %48 to <8 x i16>
  %68 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %67, <8 x i16> %41) #3
  %69 = bitcast <16 x i8> %47 to <8 x i16>
  %70 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %69, <8 x i16> %41) #3
  %71 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %68, <4 x i32> %70) #3
  %72 = shufflevector <16 x i8> %56, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %73 = shufflevector <16 x i8> %56, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %74 = bitcast <16 x i8> %72 to <8 x i16>
  %75 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %74, <8 x i16> %42) #3
  %76 = bitcast <16 x i8> %73 to <8 x i16>
  %77 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %76, <8 x i16> %42) #3
  %78 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %75, <4 x i32> %77) #3
  %79 = shufflevector <16 x i8> %61, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %80 = shufflevector <16 x i8> %61, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %81 = bitcast <16 x i8> %79 to <8 x i16>
  %82 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %81, <8 x i16> %42) #3
  %83 = bitcast <16 x i8> %80 to <8 x i16>
  %84 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %83, <8 x i16> %42) #3
  %85 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %82, <4 x i32> %84) #3
  %86 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %66, <8 x i16> %78) #3
  %87 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %71, <8 x i16> %85) #3
  %88 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %86, <8 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>) #3
  %89 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %87, <8 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>) #3
  %90 = ashr <8 x i16> %88, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %91 = ashr <8 x i16> %89, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %92 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %90, <8 x i16> undef) #3
  %93 = bitcast <16 x i8> %92 to <2 x i64>
  %94 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %91, <8 x i16> undef) #3
  %95 = bitcast <16 x i8> %94 to <2 x i64>
  %96 = getelementptr inbounds i8, i8* %44, i64 %11
  %97 = extractelement <2 x i64> %93, i32 0
  %98 = bitcast i8* %45 to i64*
  store i64 %97, i64* %98, align 1
  %99 = getelementptr inbounds i8, i8* %45, i64 %3
  %100 = extractelement <2 x i64> %95, i32 0
  %101 = bitcast i8* %99 to i64*
  store i64 %100, i64* %101, align 1
  %102 = getelementptr inbounds i8, i8* %45, i64 %12
  %103 = add i32 %51, -2
  %104 = icmp ugt i32 %103, 1
  br i1 %104, label %43, label %105

105:                                              ; preds = %43, %6
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @aom_filter_block1d4_h4_sse2(i8* nocapture readonly, i64, i8* nocapture, i64, i32, i16* nocapture readonly) local_unnamed_addr #0 {
  %7 = bitcast i16* %5 to <8 x i16>*
  %8 = load <8 x i16>, <8 x i16>* %7, align 1
  %9 = ashr <8 x i16> %8, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %10 = bitcast <8 x i16> %9 to <4 x i32>
  %11 = icmp eq i32 %4, 0
  br i1 %11, label %58, label %12

12:                                               ; preds = %6
  %13 = shufflevector <4 x i32> %10, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 undef, i32 undef>
  %14 = bitcast <4 x i32> %13 to <2 x i64>
  %15 = shufflevector <2 x i64> %14, <2 x i64> undef, <2 x i32> zeroinitializer
  %16 = shufflevector <4 x i32> %10, <4 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 1, i32 1>
  %17 = bitcast <4 x i32> %16 to <2 x i64>
  %18 = shufflevector <2 x i64> %17, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %19 = getelementptr inbounds i8, i8* %0, i64 -3
  %20 = bitcast <2 x i64> %18 to <8 x i16>
  %21 = bitcast <2 x i64> %15 to <8 x i16>
  br label %22

22:                                               ; preds = %12, %22
  %23 = phi i8* [ %19, %12 ], [ %51, %22 ]
  %24 = phi i8* [ %2, %12 ], [ %55, %22 ]
  %25 = phi i32 [ %4, %12 ], [ %56, %22 ]
  %26 = bitcast i8* %23 to <16 x i8>*
  %27 = load <16 x i8>, <16 x i8>* %26, align 1
  %28 = shufflevector <16 x i8> %27, <16 x i8> undef, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %29 = shufflevector <16 x i8> %27, <16 x i8> undef, <16 x i32> <i32 3, i32 4, i32 5, i32 6, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %30 = shufflevector <16 x i8> %27, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %31 = shufflevector <16 x i8> %27, <16 x i8> undef, <16 x i32> <i32 5, i32 6, i32 7, i32 8, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %32 = shufflevector <16 x i8> %28, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %33 = shufflevector <16 x i8> %29, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %34 = shufflevector <16 x i8> %30, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %35 = shufflevector <16 x i8> %31, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %36 = bitcast <16 x i8> %32 to <4 x i32>
  %37 = bitcast <16 x i8> %33 to <4 x i32>
  %38 = shufflevector <4 x i32> %36, <4 x i32> %37, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %39 = bitcast <16 x i8> %34 to <4 x i32>
  %40 = bitcast <16 x i8> %35 to <4 x i32>
  %41 = shufflevector <4 x i32> %39, <4 x i32> %40, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %42 = bitcast <4 x i32> %38 to <8 x i16>
  %43 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %42, <8 x i16> %20) #3
  %44 = bitcast <4 x i32> %41 to <8 x i16>
  %45 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %44, <8 x i16> %21) #3
  %46 = add <4 x i32> %45, %43
  %47 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %46, <4 x i32> zeroinitializer) #3
  %48 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %47, <8 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>) #3
  %49 = ashr <8 x i16> %48, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %50 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %49, <8 x i16> undef) #3
  %51 = getelementptr inbounds i8, i8* %23, i64 %1
  %52 = bitcast <16 x i8> %50 to <4 x i32>
  %53 = extractelement <4 x i32> %52, i32 0
  %54 = bitcast i8* %24 to i32*
  store i32 %53, i32* %54, align 4
  %55 = getelementptr inbounds i8, i8* %24, i64 %3
  %56 = add i32 %25, -1
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %58, label %22

58:                                               ; preds = %22, %6
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @aom_filter_block1d4_v4_sse2(i8* nocapture readonly, i64, i8* nocapture, i64, i32, i16* nocapture readonly) local_unnamed_addr #0 {
  %7 = bitcast i16* %5 to <8 x i16>*
  %8 = load <8 x i16>, <8 x i16>* %7, align 1
  %9 = ashr <8 x i16> %8, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %10 = bitcast <8 x i16> %9 to <4 x i32>
  %11 = shl i64 %1, 1
  %12 = shl i64 %3, 1
  %13 = mul nsw i64 %1, 3
  %14 = getelementptr inbounds i8, i8* %0, i64 %13
  %15 = bitcast i8* %14 to i64*
  %16 = load i64, i64* %15, align 1
  %17 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %16, i32 0
  %18 = bitcast <2 x i64> %17 to <16 x i8>
  %19 = shl nsw i64 %1, 2
  %20 = getelementptr inbounds i8, i8* %0, i64 %19
  %21 = bitcast i8* %20 to i64*
  %22 = load i64, i64* %21, align 1
  %23 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %22, i32 0
  %24 = icmp ugt i32 %4, 1
  br i1 %24, label %25, label %94

25:                                               ; preds = %6
  %26 = bitcast <2 x i64> %23 to <16 x i8>
  %27 = shufflevector <16 x i8> %18, <16 x i8> %26, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %28 = shufflevector <16 x i8> %27, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %29 = getelementptr inbounds i8, i8* %0, i64 %11
  %30 = bitcast i8* %29 to i64*
  %31 = load i64, i64* %30, align 1
  %32 = insertelement <2 x i64> undef, i64 %31, i32 0
  %33 = bitcast <2 x i64> %32 to <16 x i8>
  %34 = shufflevector <16 x i8> %33, <16 x i8> %18, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %35 = shufflevector <16 x i8> %34, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %36 = shufflevector <4 x i32> %10, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 undef, i32 undef>
  %37 = bitcast <4 x i32> %36 to <2 x i64>
  %38 = shufflevector <2 x i64> %37, <2 x i64> undef, <2 x i32> zeroinitializer
  %39 = shufflevector <4 x i32> %10, <4 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 1, i32 1>
  %40 = bitcast <4 x i32> %39 to <2 x i64>
  %41 = shufflevector <2 x i64> %40, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %42 = mul nsw i64 %1, 5
  %43 = mul nsw i64 %1, 6
  %44 = bitcast <2 x i64> %41 to <8 x i16>
  %45 = bitcast <2 x i64> %38 to <8 x i16>
  br label %46

46:                                               ; preds = %25, %46
  %47 = phi i8* [ %0, %25 ], [ %82, %46 ]
  %48 = phi i8* [ %2, %25 ], [ %91, %46 ]
  %49 = phi <16 x i8> [ %28, %25 ], [ %72, %46 ]
  %50 = phi <16 x i8> [ %35, %25 ], [ %71, %46 ]
  %51 = phi <2 x i64> [ %23, %25 ], [ %63, %46 ]
  %52 = phi i32 [ %4, %25 ], [ %92, %46 ]
  %53 = getelementptr inbounds i8, i8* %47, i64 %42
  %54 = bitcast i8* %53 to i64*
  %55 = load i64, i64* %54, align 1
  %56 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %55, i32 0
  %57 = bitcast <2 x i64> %51 to <16 x i8>
  %58 = bitcast <2 x i64> %56 to <16 x i8>
  %59 = shufflevector <16 x i8> %57, <16 x i8> %58, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %60 = getelementptr inbounds i8, i8* %47, i64 %43
  %61 = bitcast i8* %60 to i64*
  %62 = load i64, i64* %61, align 1
  %63 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %62, i32 0
  %64 = bitcast <2 x i64> %63 to <16 x i8>
  %65 = shufflevector <16 x i8> %58, <16 x i8> %64, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %66 = bitcast <16 x i8> %50 to <8 x i16>
  %67 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %66, <8 x i16> %44) #3
  %68 = bitcast <16 x i8> %49 to <8 x i16>
  %69 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %68, <8 x i16> %44) #3
  %70 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %67, <4 x i32> %69) #3
  %71 = shufflevector <16 x i8> %59, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %72 = shufflevector <16 x i8> %65, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %73 = bitcast <16 x i8> %71 to <8 x i16>
  %74 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %73, <8 x i16> %45) #3
  %75 = bitcast <16 x i8> %72 to <8 x i16>
  %76 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %75, <8 x i16> %45) #3
  %77 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %74, <4 x i32> %76) #3
  %78 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %70, <8 x i16> %77) #3
  %79 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %78, <8 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>) #3
  %80 = ashr <8 x i16> %79, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %81 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %80, <8 x i16> zeroinitializer) #3
  %82 = getelementptr inbounds i8, i8* %47, i64 %11
  %83 = bitcast <16 x i8> %81 to <4 x i32>
  %84 = extractelement <4 x i32> %83, i32 0
  %85 = bitcast i8* %48 to i32*
  store i32 %84, i32* %85, align 4
  %86 = shufflevector <16 x i8> %81, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %87 = bitcast <16 x i8> %86 to <4 x i32>
  %88 = extractelement <4 x i32> %87, i32 0
  %89 = getelementptr inbounds i8, i8* %48, i64 %3
  %90 = bitcast i8* %89 to i32*
  store i32 %88, i32* %90, align 4
  %91 = getelementptr inbounds i8, i8* %48, i64 %12
  %92 = add i32 %52, -2
  %93 = icmp ugt i32 %92, 1
  br i1 %93, label %46, label %94

94:                                               ; preds = %46, %6
  ret void
}

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16>, <8 x i16>) #1

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32>, <4 x i32>) #1

; Function Attrs: nounwind readnone speculatable
declare <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16>, <8 x i16>) #2

; Function Attrs: nounwind readnone
declare <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16>, <8 x i16>) #1

attributes #0 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind readnone speculatable }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
