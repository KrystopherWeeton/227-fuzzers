; ModuleID = '../../third_party/pdfium/third_party/lcms/src/cmspcs.c'
source_filename = "../../third_party/pdfium/third_party/lcms/src/cmspcs.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.cmsCIExyY = type { double, double, double }
%struct.cmsCIEXYZ = type { double, double, double }
%struct.cmsCIELab = type { double, double, double }
%struct.cmsCIELCh = type { double, double, double }

@_cmsEndPointsBySpace.RGBblack = internal global [4 x i16] zeroinitializer, align 2
@_cmsEndPointsBySpace.RGBwhite = internal global [4 x i16] [i16 -1, i16 -1, i16 -1, i16 0], align 2
@_cmsEndPointsBySpace.CMYKblack = internal global [4 x i16] [i16 -1, i16 -1, i16 -1, i16 -1], align 2
@_cmsEndPointsBySpace.CMYKwhite = internal global [4 x i16] zeroinitializer, align 2
@_cmsEndPointsBySpace.LABblack = internal global [4 x i16] [i16 0, i16 -32640, i16 -32640, i16 0], align 2
@_cmsEndPointsBySpace.LABwhite = internal global [4 x i16] [i16 -1, i16 -32640, i16 -32640, i16 0], align 2
@_cmsEndPointsBySpace.CMYblack = internal global [4 x i16] [i16 -1, i16 -1, i16 -1, i16 0], align 2
@_cmsEndPointsBySpace.CMYwhite = internal global [4 x i16] zeroinitializer, align 2
@_cmsEndPointsBySpace.Grayblack = internal global [4 x i16] zeroinitializer, align 2
@_cmsEndPointsBySpace.GrayWhite = internal global [4 x i16] [i16 -1, i16 0, i16 0, i16 0], align 2
@switch.table._cmsICCcolorSpace = private unnamed_addr constant [30 x i32] [i32 1196573017, i32 1380401696, i32 1196573017, i32 1380401696, i32 1129142560, i32 1129142603, i32 1497588338, i32 1282766368, i32 1482250784, i32 1281450528, i32 1282766411, i32 1213421088, i32 1212961568, i32 1501067552, i32 1296255025, i32 1296255026, i32 1296255027, i32 1296255028, i32 1296255029, i32 1296255030, i32 1296255031, i32 1296255032, i32 1296255033, i32 1296255041, i32 1296255042, i32 1296255043, i32 1296255044, i32 1296255045, i32 1296255046, i32 1281450528], align 4

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @cmsXYZ2xyY(%struct.cmsCIExyY* nocapture, %struct.cmsCIEXYZ* nocapture readonly) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.cmsCIEXYZ, %struct.cmsCIEXYZ* %1, i64 0, i32 0
  %4 = load double, double* %3, align 8
  %5 = getelementptr inbounds %struct.cmsCIEXYZ, %struct.cmsCIEXYZ* %1, i64 0, i32 1
  %6 = load double, double* %5, align 8
  %7 = fadd double %4, %6
  %8 = getelementptr inbounds %struct.cmsCIEXYZ, %struct.cmsCIEXYZ* %1, i64 0, i32 2
  %9 = load double, double* %8, align 8
  %10 = fadd double %7, %9
  %11 = fdiv double 1.000000e+00, %10
  %12 = fmul double %4, %11
  %13 = getelementptr inbounds %struct.cmsCIExyY, %struct.cmsCIExyY* %0, i64 0, i32 0
  store double %12, double* %13, align 8
  %14 = load double, double* %5, align 8
  %15 = fmul double %14, %11
  %16 = getelementptr inbounds %struct.cmsCIExyY, %struct.cmsCIExyY* %0, i64 0, i32 1
  store double %15, double* %16, align 8
  %17 = bitcast double* %5 to i64*
  %18 = load i64, i64* %17, align 8
  %19 = getelementptr inbounds %struct.cmsCIExyY, %struct.cmsCIExyY* %0, i64 0, i32 2
  %20 = bitcast double* %19 to i64*
  store i64 %18, i64* %20, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @cmsxyY2XYZ(%struct.cmsCIEXYZ* nocapture, %struct.cmsCIExyY* nocapture readonly) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.cmsCIExyY, %struct.cmsCIExyY* %1, i64 0, i32 0
  %4 = load double, double* %3, align 8
  %5 = getelementptr inbounds %struct.cmsCIExyY, %struct.cmsCIExyY* %1, i64 0, i32 1
  %6 = load double, double* %5, align 8
  %7 = fdiv double %4, %6
  %8 = getelementptr inbounds %struct.cmsCIExyY, %struct.cmsCIExyY* %1, i64 0, i32 2
  %9 = load double, double* %8, align 8
  %10 = fmul double %7, %9
  %11 = getelementptr inbounds %struct.cmsCIEXYZ, %struct.cmsCIEXYZ* %0, i64 0, i32 0
  store double %10, double* %11, align 8
  %12 = bitcast double* %8 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = getelementptr inbounds %struct.cmsCIEXYZ, %struct.cmsCIEXYZ* %0, i64 0, i32 1
  %15 = bitcast double* %14 to i64*
  store i64 %13, i64* %15, align 8
  %16 = load double, double* %3, align 8
  %17 = fsub double 1.000000e+00, %16
  %18 = load double, double* %5, align 8
  %19 = fsub double %17, %18
  %20 = fdiv double %19, %18
  %21 = load double, double* %8, align 8
  %22 = fmul double %21, %20
  %23 = getelementptr inbounds %struct.cmsCIEXYZ, %struct.cmsCIEXYZ* %0, i64 0, i32 2
  store double %22, double* %23, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @cmsXYZ2Lab(%struct.cmsCIEXYZ* readonly, %struct.cmsCIELab* nocapture, %struct.cmsCIEXYZ* nocapture readonly) local_unnamed_addr #1 {
  %4 = icmp eq %struct.cmsCIEXYZ* %0, null
  br i1 %4, label %5, label %7

5:                                                ; preds = %3
  %6 = tail call %struct.cmsCIEXYZ* @cmsD50_XYZ() #8
  br label %7

7:                                                ; preds = %5, %3
  %8 = phi %struct.cmsCIEXYZ* [ %6, %5 ], [ %0, %3 ]
  %9 = getelementptr inbounds %struct.cmsCIEXYZ, %struct.cmsCIEXYZ* %2, i64 0, i32 0
  %10 = load double, double* %9, align 8
  %11 = getelementptr inbounds %struct.cmsCIEXYZ, %struct.cmsCIEXYZ* %8, i64 0, i32 0
  %12 = load double, double* %11, align 8
  %13 = fdiv double %10, %12
  %14 = fcmp ugt double %13, 0x3F822354D28F7CD6
  br i1 %14, label %18, label %15

15:                                               ; preds = %7
  %16 = fmul double %13, 0x401F25ED097B425F
  %17 = fadd double %16, 0x3FC1A7B9611A7B96
  br label %20

18:                                               ; preds = %7
  %19 = tail call double @pow(double %13, double 0x3FD5555555555555) #8
  br label %20

20:                                               ; preds = %15, %18
  %21 = phi double [ %17, %15 ], [ %19, %18 ]
  %22 = getelementptr inbounds %struct.cmsCIEXYZ, %struct.cmsCIEXYZ* %2, i64 0, i32 1
  %23 = load double, double* %22, align 8
  %24 = getelementptr inbounds %struct.cmsCIEXYZ, %struct.cmsCIEXYZ* %8, i64 0, i32 1
  %25 = load double, double* %24, align 8
  %26 = fdiv double %23, %25
  %27 = fcmp ugt double %26, 0x3F822354D28F7CD6
  br i1 %27, label %31, label %28

28:                                               ; preds = %20
  %29 = fmul double %26, 0x401F25ED097B425F
  %30 = fadd double %29, 0x3FC1A7B9611A7B96
  br label %33

31:                                               ; preds = %20
  %32 = tail call double @pow(double %26, double 0x3FD5555555555555) #8
  br label %33

33:                                               ; preds = %28, %31
  %34 = phi double [ %30, %28 ], [ %32, %31 ]
  %35 = getelementptr inbounds %struct.cmsCIEXYZ, %struct.cmsCIEXYZ* %2, i64 0, i32 2
  %36 = load double, double* %35, align 8
  %37 = getelementptr inbounds %struct.cmsCIEXYZ, %struct.cmsCIEXYZ* %8, i64 0, i32 2
  %38 = load double, double* %37, align 8
  %39 = fdiv double %36, %38
  %40 = fcmp ugt double %39, 0x3F822354D28F7CD6
  br i1 %40, label %44, label %41

41:                                               ; preds = %33
  %42 = fmul double %39, 0x401F25ED097B425F
  %43 = fadd double %42, 0x3FC1A7B9611A7B96
  br label %46

44:                                               ; preds = %33
  %45 = tail call double @pow(double %39, double 0x3FD5555555555555) #8
  br label %46

46:                                               ; preds = %41, %44
  %47 = phi double [ %43, %41 ], [ %45, %44 ]
  %48 = fmul double %34, 1.160000e+02
  %49 = fadd double %48, -1.600000e+01
  %50 = getelementptr inbounds %struct.cmsCIELab, %struct.cmsCIELab* %1, i64 0, i32 0
  store double %49, double* %50, align 8
  %51 = getelementptr inbounds %struct.cmsCIELab, %struct.cmsCIELab* %1, i64 0, i32 1
  %52 = insertelement <2 x double> undef, double %21, i32 0
  %53 = insertelement <2 x double> %52, double %34, i32 1
  %54 = insertelement <2 x double> undef, double %34, i32 0
  %55 = insertelement <2 x double> %54, double %47, i32 1
  %56 = fsub <2 x double> %53, %55
  %57 = fmul <2 x double> %56, <double 5.000000e+02, double 2.000000e+02>
  %58 = bitcast double* %51 to <2 x double>*
  store <2 x double> %57, <2 x double>* %58, align 8
  ret void
}

declare %struct.cmsCIEXYZ* @cmsD50_XYZ() local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @cmsLab2XYZ(%struct.cmsCIEXYZ* readonly, %struct.cmsCIEXYZ* nocapture, %struct.cmsCIELab* nocapture readonly) local_unnamed_addr #1 {
  %4 = icmp eq %struct.cmsCIEXYZ* %0, null
  br i1 %4, label %5, label %7

5:                                                ; preds = %3
  %6 = tail call %struct.cmsCIEXYZ* @cmsD50_XYZ() #8
  br label %7

7:                                                ; preds = %5, %3
  %8 = phi %struct.cmsCIEXYZ* [ %6, %5 ], [ %0, %3 ]
  %9 = getelementptr inbounds %struct.cmsCIELab, %struct.cmsCIELab* %2, i64 0, i32 0
  %10 = load double, double* %9, align 8
  %11 = fadd double %10, 1.600000e+01
  %12 = fdiv double %11, 1.160000e+02
  %13 = getelementptr inbounds %struct.cmsCIELab, %struct.cmsCIELab* %2, i64 0, i32 1
  %14 = load double, double* %13, align 8
  %15 = fmul double %14, 2.000000e-03
  %16 = fadd double %12, %15
  %17 = getelementptr inbounds %struct.cmsCIELab, %struct.cmsCIELab* %2, i64 0, i32 2
  %18 = load double, double* %17, align 8
  %19 = fmul double %18, 5.000000e-03
  %20 = fsub double %12, %19
  %21 = fcmp ugt double %16, 0x3FCA7B9611A7B961
  %22 = fadd double %16, 0xBFC1A7B9611A7B96
  %23 = fmul double %22, 0x3FC07004DED20922
  %24 = fmul double %16, %16
  %25 = fmul double %16, %24
  %26 = select i1 %21, double %25, double %23
  %27 = getelementptr inbounds %struct.cmsCIEXYZ, %struct.cmsCIEXYZ* %8, i64 0, i32 0
  %28 = load double, double* %27, align 8
  %29 = fmul double %28, %26
  %30 = getelementptr inbounds %struct.cmsCIEXYZ, %struct.cmsCIEXYZ* %1, i64 0, i32 0
  store double %29, double* %30, align 8
  %31 = fcmp ugt double %12, 0x3FCA7B9611A7B961
  %32 = fadd double %12, 0xBFC1A7B9611A7B96
  %33 = fmul double %32, 0x3FC07004DED20922
  %34 = fmul double %12, %12
  %35 = fmul double %12, %34
  %36 = select i1 %31, double %35, double %33
  %37 = getelementptr inbounds %struct.cmsCIEXYZ, %struct.cmsCIEXYZ* %8, i64 0, i32 1
  %38 = load double, double* %37, align 8
  %39 = fmul double %36, %38
  %40 = getelementptr inbounds %struct.cmsCIEXYZ, %struct.cmsCIEXYZ* %1, i64 0, i32 1
  store double %39, double* %40, align 8
  %41 = fcmp ugt double %20, 0x3FCA7B9611A7B961
  %42 = fadd double %20, 0xBFC1A7B9611A7B96
  %43 = fmul double %42, 0x3FC07004DED20922
  %44 = fmul double %20, %20
  %45 = fmul double %20, %44
  %46 = select i1 %41, double %45, double %43
  %47 = getelementptr inbounds %struct.cmsCIEXYZ, %struct.cmsCIEXYZ* %8, i64 0, i32 2
  %48 = load double, double* %47, align 8
  %49 = fmul double %46, %48
  %50 = getelementptr inbounds %struct.cmsCIEXYZ, %struct.cmsCIEXYZ* %1, i64 0, i32 2
  store double %49, double* %50, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @cmsLabEncoded2FloatV2(%struct.cmsCIELab* nocapture, i16* nocapture readonly) local_unnamed_addr #0 {
  %3 = load i16, i16* %1, align 2
  %4 = uitofp i16 %3 to double
  %5 = fdiv double %4, 6.528000e+02
  %6 = getelementptr inbounds %struct.cmsCIELab, %struct.cmsCIELab* %0, i64 0, i32 0
  store double %5, double* %6, align 8
  %7 = getelementptr inbounds i16, i16* %1, i64 1
  %8 = load i16, i16* %7, align 2
  %9 = uitofp i16 %8 to double
  %10 = fmul double %9, 3.906250e-03
  %11 = fadd double %10, -1.280000e+02
  %12 = getelementptr inbounds %struct.cmsCIELab, %struct.cmsCIELab* %0, i64 0, i32 1
  store double %11, double* %12, align 8
  %13 = getelementptr inbounds i16, i16* %1, i64 2
  %14 = load i16, i16* %13, align 2
  %15 = uitofp i16 %14 to double
  %16 = fmul double %15, 3.906250e-03
  %17 = fadd double %16, -1.280000e+02
  %18 = getelementptr inbounds %struct.cmsCIELab, %struct.cmsCIELab* %0, i64 0, i32 2
  store double %17, double* %18, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @cmsLabEncoded2Float(%struct.cmsCIELab* nocapture, i16* nocapture readonly) local_unnamed_addr #0 {
  %3 = load i16, i16* %1, align 2
  %4 = uitofp i16 %3 to double
  %5 = fdiv double %4, 6.553500e+02
  %6 = getelementptr inbounds %struct.cmsCIELab, %struct.cmsCIELab* %0, i64 0, i32 0
  store double %5, double* %6, align 8
  %7 = getelementptr inbounds i16, i16* %1, i64 1
  %8 = load i16, i16* %7, align 2
  %9 = uitofp i16 %8 to double
  %10 = fdiv double %9, 2.570000e+02
  %11 = fadd double %10, -1.280000e+02
  %12 = getelementptr inbounds %struct.cmsCIELab, %struct.cmsCIELab* %0, i64 0, i32 1
  store double %11, double* %12, align 8
  %13 = getelementptr inbounds i16, i16* %1, i64 2
  %14 = load i16, i16* %13, align 2
  %15 = uitofp i16 %14 to double
  %16 = fdiv double %15, 2.570000e+02
  %17 = fadd double %16, -1.280000e+02
  %18 = getelementptr inbounds %struct.cmsCIELab, %struct.cmsCIELab* %0, i64 0, i32 2
  store double %17, double* %18, align 8
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @cmsFloat2LabEncodedV2(i16* nocapture, %struct.cmsCIELab* nocapture readonly) local_unnamed_addr #3 {
  %3 = getelementptr inbounds %struct.cmsCIELab, %struct.cmsCIELab* %1, i64 0, i32 0
  %4 = load double, double* %3, align 8
  %5 = fcmp olt double %4, 0.000000e+00
  %6 = select i1 %5, double 0.000000e+00, double %4
  %7 = fcmp ogt double %6, 0x4059190000000000
  %8 = select i1 %7, double 0x4059190000000000, double %6
  %9 = getelementptr inbounds %struct.cmsCIELab, %struct.cmsCIELab* %1, i64 0, i32 1
  %10 = load double, double* %9, align 8
  %11 = fcmp olt double %10, -1.280000e+02
  %12 = select i1 %11, double -1.280000e+02, double %10
  %13 = fcmp ogt double %12, 0x405FFFC000000000
  %14 = select i1 %13, double 0x405FFFC000000000, double %12
  %15 = getelementptr inbounds %struct.cmsCIELab, %struct.cmsCIELab* %1, i64 0, i32 2
  %16 = load double, double* %15, align 8
  %17 = fcmp olt double %16, -1.280000e+02
  %18 = select i1 %17, double -1.280000e+02, double %16
  %19 = fcmp ogt double %18, 0x405FFFC000000000
  %20 = select i1 %19, double 0x405FFFC000000000, double %18
  %21 = fmul double %8, 6.528000e+02
  %22 = fadd double %21, 5.000000e-01
  %23 = fcmp ugt double %22, 0.000000e+00
  br i1 %23, label %24, label %32

24:                                               ; preds = %2
  %25 = fcmp ult double %22, 6.553500e+04
  br i1 %25, label %26, label %32

26:                                               ; preds = %24
  %27 = fadd double %22, -3.276700e+04
  %28 = tail call double @llvm.floor.f64(double %27) #8
  %29 = fptosi double %28 to i32
  %30 = trunc i32 %29 to i16
  %31 = add i16 %30, 32767
  br label %32

32:                                               ; preds = %2, %24, %26
  %33 = phi i16 [ %31, %26 ], [ 0, %2 ], [ -1, %24 ]
  store i16 %33, i16* %0, align 2
  %34 = fadd double %14, 1.280000e+02
  %35 = fmul double %34, 2.560000e+02
  %36 = fadd double %35, 5.000000e-01
  %37 = fcmp ugt double %36, 0.000000e+00
  br i1 %37, label %38, label %46

38:                                               ; preds = %32
  %39 = fcmp ult double %36, 6.553500e+04
  br i1 %39, label %40, label %46

40:                                               ; preds = %38
  %41 = fadd double %36, -3.276700e+04
  %42 = tail call double @llvm.floor.f64(double %41) #8
  %43 = fptosi double %42 to i32
  %44 = trunc i32 %43 to i16
  %45 = add i16 %44, 32767
  br label %46

46:                                               ; preds = %32, %38, %40
  %47 = phi i16 [ %45, %40 ], [ 0, %32 ], [ -1, %38 ]
  %48 = getelementptr inbounds i16, i16* %0, i64 1
  store i16 %47, i16* %48, align 2
  %49 = fadd double %20, 1.280000e+02
  %50 = fmul double %49, 2.560000e+02
  %51 = fadd double %50, 5.000000e-01
  %52 = fcmp ugt double %51, 0.000000e+00
  br i1 %52, label %53, label %61

53:                                               ; preds = %46
  %54 = fcmp ult double %51, 6.553500e+04
  br i1 %54, label %55, label %61

55:                                               ; preds = %53
  %56 = fadd double %51, -3.276700e+04
  %57 = tail call double @llvm.floor.f64(double %56) #8
  %58 = fptosi double %57 to i32
  %59 = trunc i32 %58 to i16
  %60 = add i16 %59, 32767
  br label %61

61:                                               ; preds = %46, %53, %55
  %62 = phi i16 [ %60, %55 ], [ 0, %46 ], [ -1, %53 ]
  %63 = getelementptr inbounds i16, i16* %0, i64 2
  store i16 %62, i16* %63, align 2
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @cmsFloat2LabEncoded(i16* nocapture, %struct.cmsCIELab* nocapture readonly) local_unnamed_addr #3 {
  %3 = getelementptr inbounds %struct.cmsCIELab, %struct.cmsCIELab* %1, i64 0, i32 0
  %4 = load double, double* %3, align 8
  %5 = fcmp olt double %4, 0.000000e+00
  %6 = select i1 %5, double 0.000000e+00, double %4
  %7 = fcmp ogt double %6, 1.000000e+02
  %8 = select i1 %7, double 1.000000e+02, double %6
  %9 = getelementptr inbounds %struct.cmsCIELab, %struct.cmsCIELab* %1, i64 0, i32 1
  %10 = load double, double* %9, align 8
  %11 = fcmp olt double %10, -1.280000e+02
  %12 = select i1 %11, double -1.280000e+02, double %10
  %13 = fcmp ogt double %12, 1.270000e+02
  %14 = select i1 %13, double 1.270000e+02, double %12
  %15 = getelementptr inbounds %struct.cmsCIELab, %struct.cmsCIELab* %1, i64 0, i32 2
  %16 = load double, double* %15, align 8
  %17 = fcmp olt double %16, -1.280000e+02
  %18 = select i1 %17, double -1.280000e+02, double %16
  %19 = fcmp ogt double %18, 1.270000e+02
  %20 = select i1 %19, double 1.270000e+02, double %18
  %21 = fmul double %8, 6.553500e+02
  %22 = fadd double %21, 5.000000e-01
  %23 = fcmp ugt double %22, 0.000000e+00
  br i1 %23, label %24, label %32

24:                                               ; preds = %2
  %25 = fcmp ult double %22, 6.553500e+04
  br i1 %25, label %26, label %32

26:                                               ; preds = %24
  %27 = fadd double %22, -3.276700e+04
  %28 = tail call double @llvm.floor.f64(double %27) #8
  %29 = fptosi double %28 to i32
  %30 = trunc i32 %29 to i16
  %31 = add i16 %30, 32767
  br label %32

32:                                               ; preds = %2, %24, %26
  %33 = phi i16 [ %31, %26 ], [ 0, %2 ], [ -1, %24 ]
  store i16 %33, i16* %0, align 2
  %34 = fadd double %14, 1.280000e+02
  %35 = fmul double %34, 2.570000e+02
  %36 = fadd double %35, 5.000000e-01
  %37 = fcmp ugt double %36, 0.000000e+00
  br i1 %37, label %38, label %46

38:                                               ; preds = %32
  %39 = fcmp ult double %36, 6.553500e+04
  br i1 %39, label %40, label %46

40:                                               ; preds = %38
  %41 = fadd double %36, -3.276700e+04
  %42 = tail call double @llvm.floor.f64(double %41) #8
  %43 = fptosi double %42 to i32
  %44 = trunc i32 %43 to i16
  %45 = add i16 %44, 32767
  br label %46

46:                                               ; preds = %32, %38, %40
  %47 = phi i16 [ %45, %40 ], [ 0, %32 ], [ -1, %38 ]
  %48 = getelementptr inbounds i16, i16* %0, i64 1
  store i16 %47, i16* %48, align 2
  %49 = fadd double %20, 1.280000e+02
  %50 = fmul double %49, 2.570000e+02
  %51 = fadd double %50, 5.000000e-01
  %52 = fcmp ugt double %51, 0.000000e+00
  br i1 %52, label %53, label %61

53:                                               ; preds = %46
  %54 = fcmp ult double %51, 6.553500e+04
  br i1 %54, label %55, label %61

55:                                               ; preds = %53
  %56 = fadd double %51, -3.276700e+04
  %57 = tail call double @llvm.floor.f64(double %56) #8
  %58 = fptosi double %57 to i32
  %59 = trunc i32 %58 to i16
  %60 = add i16 %59, 32767
  br label %61

61:                                               ; preds = %46, %53, %55
  %62 = phi i16 [ %60, %55 ], [ 0, %46 ], [ -1, %53 ]
  %63 = getelementptr inbounds i16, i16* %0, i64 2
  store i16 %62, i16* %63, align 2
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @cmsLab2LCh(%struct.cmsCIELCh* nocapture, %struct.cmsCIELab* nocapture readonly) local_unnamed_addr #3 {
  %3 = bitcast %struct.cmsCIELab* %1 to i64*
  %4 = load i64, i64* %3, align 8
  %5 = bitcast %struct.cmsCIELCh* %0 to i64*
  store i64 %4, i64* %5, align 8
  %6 = getelementptr inbounds %struct.cmsCIELab, %struct.cmsCIELab* %1, i64 0, i32 1
  %7 = load double, double* %6, align 8
  %8 = fmul double %7, %7
  %9 = getelementptr inbounds %struct.cmsCIELab, %struct.cmsCIELab* %1, i64 0, i32 2
  %10 = load double, double* %9, align 8
  %11 = fmul double %10, %10
  %12 = fadd double %8, %11
  %13 = tail call double @sqrt(double %12) #4
  %14 = tail call double @llvm.fabs.f64(double %13)
  %15 = getelementptr inbounds %struct.cmsCIELCh, %struct.cmsCIELCh* %0, i64 0, i32 1
  store double %14, double* %15, align 8
  %16 = load double, double* %9, align 8
  %17 = load double, double* %6, align 8
  %18 = fcmp oeq double %16, 0.000000e+00
  %19 = fcmp oeq double %17, 0.000000e+00
  %20 = and i1 %18, %19
  br i1 %20, label %36, label %21

21:                                               ; preds = %2
  %22 = tail call double @atan2(double %16, double %17) #8
  %23 = fmul double %22, 0x404CA5DC1A63C1F8
  %24 = fcmp ogt double %23, 3.600000e+02
  br i1 %24, label %28, label %25

25:                                               ; preds = %28, %21
  %26 = phi double [ %23, %21 ], [ %30, %28 ]
  %27 = fcmp olt double %26, 0.000000e+00
  br i1 %27, label %32, label %36

28:                                               ; preds = %21, %28
  %29 = phi double [ %30, %28 ], [ %23, %21 ]
  %30 = fadd double %29, -3.600000e+02
  %31 = fcmp ogt double %30, 3.600000e+02
  br i1 %31, label %28, label %25

32:                                               ; preds = %25, %32
  %33 = phi double [ %34, %32 ], [ %26, %25 ]
  %34 = fadd double %33, 3.600000e+02
  %35 = fcmp olt double %34, 0.000000e+00
  br i1 %35, label %32, label %36

36:                                               ; preds = %32, %2, %25
  %37 = phi double [ %26, %25 ], [ 0.000000e+00, %2 ], [ %34, %32 ]
  %38 = getelementptr inbounds %struct.cmsCIELCh, %struct.cmsCIELCh* %0, i64 0, i32 2
  store double %37, double* %38, align 8
  ret void
}

; Function Attrs: nofree nounwind
declare double @pow(double, double) local_unnamed_addr #4

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @cmsLCh2Lab(%struct.cmsCIELab* nocapture, %struct.cmsCIELCh* nocapture readonly) local_unnamed_addr #3 {
  %3 = getelementptr inbounds %struct.cmsCIELCh, %struct.cmsCIELCh* %1, i64 0, i32 2
  %4 = load double, double* %3, align 8
  %5 = fmul double %4, 0x400921FB54442D18
  %6 = fdiv double %5, 1.800000e+02
  %7 = bitcast %struct.cmsCIELCh* %1 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = bitcast %struct.cmsCIELab* %0 to i64*
  store i64 %8, i64* %9, align 8
  %10 = getelementptr inbounds %struct.cmsCIELCh, %struct.cmsCIELCh* %1, i64 0, i32 1
  %11 = load double, double* %10, align 8
  %12 = tail call double @cos(double %6) #8
  %13 = fmul double %11, %12
  %14 = getelementptr inbounds %struct.cmsCIELab, %struct.cmsCIELab* %0, i64 0, i32 1
  store double %13, double* %14, align 8
  %15 = load double, double* %10, align 8
  %16 = tail call double @sin(double %6) #8
  %17 = fmul double %15, %16
  %18 = getelementptr inbounds %struct.cmsCIELab, %struct.cmsCIELab* %0, i64 0, i32 2
  store double %17, double* %18, align 8
  ret void
}

; Function Attrs: nofree nounwind
declare double @cos(double) local_unnamed_addr #4

; Function Attrs: nofree nounwind
declare double @sin(double) local_unnamed_addr #4

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @cmsFloat2XYZEncoded(i16* nocapture, %struct.cmsCIEXYZ* nocapture readonly) local_unnamed_addr #3 {
  %3 = getelementptr inbounds %struct.cmsCIEXYZ, %struct.cmsCIEXYZ* %1, i64 0, i32 0
  %4 = load double, double* %3, align 8
  %5 = getelementptr inbounds %struct.cmsCIEXYZ, %struct.cmsCIEXYZ* %1, i64 0, i32 1
  %6 = load double, double* %5, align 8
  %7 = getelementptr inbounds %struct.cmsCIEXYZ, %struct.cmsCIEXYZ* %1, i64 0, i32 2
  %8 = load double, double* %7, align 8
  %9 = fcmp ugt double %6, 0.000000e+00
  %10 = select i1 %9, double %8, double 0.000000e+00
  %11 = select i1 %9, double %6, double 0.000000e+00
  %12 = select i1 %9, double %4, double 0.000000e+00
  %13 = fcmp ogt double %12, 0x3FFFFFE000000000
  %14 = select i1 %13, double 0x3FFFFFE000000000, double %12
  %15 = fcmp olt double %14, 0.000000e+00
  %16 = select i1 %15, double 0.000000e+00, double %14
  %17 = fcmp ogt double %11, 0x3FFFFFE000000000
  %18 = select i1 %17, double 0x3FFFFFE000000000, double %11
  %19 = fcmp olt double %18, 0.000000e+00
  %20 = select i1 %19, double 0.000000e+00, double %18
  %21 = fcmp ogt double %10, 0x3FFFFFE000000000
  %22 = select i1 %21, double 0x3FFFFFE000000000, double %10
  %23 = fcmp olt double %22, 0.000000e+00
  %24 = select i1 %23, double 0.000000e+00, double %22
  %25 = fmul double %16, 3.276800e+04
  %26 = fadd double %25, 5.000000e-01
  %27 = fcmp ugt double %26, 0.000000e+00
  br i1 %27, label %28, label %36

28:                                               ; preds = %2
  %29 = fcmp ult double %26, 6.553500e+04
  br i1 %29, label %30, label %36

30:                                               ; preds = %28
  %31 = fadd double %26, -3.276700e+04
  %32 = tail call double @llvm.floor.f64(double %31) #8
  %33 = fptosi double %32 to i32
  %34 = trunc i32 %33 to i16
  %35 = add i16 %34, 32767
  br label %36

36:                                               ; preds = %2, %28, %30
  %37 = phi i16 [ %35, %30 ], [ 0, %2 ], [ -1, %28 ]
  store i16 %37, i16* %0, align 2
  %38 = fmul double %20, 3.276800e+04
  %39 = fadd double %38, 5.000000e-01
  %40 = fcmp ugt double %39, 0.000000e+00
  br i1 %40, label %41, label %49

41:                                               ; preds = %36
  %42 = fcmp ult double %39, 6.553500e+04
  br i1 %42, label %43, label %49

43:                                               ; preds = %41
  %44 = fadd double %39, -3.276700e+04
  %45 = tail call double @llvm.floor.f64(double %44) #8
  %46 = fptosi double %45 to i32
  %47 = trunc i32 %46 to i16
  %48 = add i16 %47, 32767
  br label %49

49:                                               ; preds = %36, %41, %43
  %50 = phi i16 [ %48, %43 ], [ 0, %36 ], [ -1, %41 ]
  %51 = getelementptr inbounds i16, i16* %0, i64 1
  store i16 %50, i16* %51, align 2
  %52 = fmul double %24, 3.276800e+04
  %53 = fadd double %52, 5.000000e-01
  %54 = fcmp ugt double %53, 0.000000e+00
  br i1 %54, label %55, label %63

55:                                               ; preds = %49
  %56 = fcmp ult double %53, 6.553500e+04
  br i1 %56, label %57, label %63

57:                                               ; preds = %55
  %58 = fadd double %53, -3.276700e+04
  %59 = tail call double @llvm.floor.f64(double %58) #8
  %60 = fptosi double %59 to i32
  %61 = trunc i32 %60 to i16
  %62 = add i16 %61, 32767
  br label %63

63:                                               ; preds = %49, %55, %57
  %64 = phi i16 [ %62, %57 ], [ 0, %49 ], [ -1, %55 ]
  %65 = getelementptr inbounds i16, i16* %0, i64 2
  store i16 %64, i16* %65, align 2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @cmsXYZEncoded2Float(%struct.cmsCIEXYZ* nocapture, i16* nocapture readonly) local_unnamed_addr #1 {
  %3 = load i16, i16* %1, align 2
  %4 = zext i16 %3 to i32
  %5 = shl nuw nsw i32 %4, 1
  %6 = tail call double @_cms15Fixed16toDouble(i32 %5) #8
  %7 = getelementptr inbounds %struct.cmsCIEXYZ, %struct.cmsCIEXYZ* %0, i64 0, i32 0
  store double %6, double* %7, align 8
  %8 = getelementptr inbounds i16, i16* %1, i64 1
  %9 = load i16, i16* %8, align 2
  %10 = zext i16 %9 to i32
  %11 = shl nuw nsw i32 %10, 1
  %12 = tail call double @_cms15Fixed16toDouble(i32 %11) #8
  %13 = getelementptr inbounds %struct.cmsCIEXYZ, %struct.cmsCIEXYZ* %0, i64 0, i32 1
  store double %12, double* %13, align 8
  %14 = getelementptr inbounds i16, i16* %1, i64 2
  %15 = load i16, i16* %14, align 2
  %16 = zext i16 %15 to i32
  %17 = shl nuw nsw i32 %16, 1
  %18 = tail call double @_cms15Fixed16toDouble(i32 %17) #8
  %19 = getelementptr inbounds %struct.cmsCIEXYZ, %struct.cmsCIEXYZ* %0, i64 0, i32 2
  store double %18, double* %19, align 8
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden double @cmsDeltaE(%struct.cmsCIELab* nocapture readonly, %struct.cmsCIELab* nocapture readonly) local_unnamed_addr #3 {
  %3 = getelementptr inbounds %struct.cmsCIELab, %struct.cmsCIELab* %0, i64 0, i32 0
  %4 = load double, double* %3, align 8
  %5 = getelementptr inbounds %struct.cmsCIELab, %struct.cmsCIELab* %1, i64 0, i32 0
  %6 = load double, double* %5, align 8
  %7 = getelementptr inbounds %struct.cmsCIELab, %struct.cmsCIELab* %0, i64 0, i32 1
  %8 = load double, double* %7, align 8
  %9 = getelementptr inbounds %struct.cmsCIELab, %struct.cmsCIELab* %1, i64 0, i32 1
  %10 = load double, double* %9, align 8
  %11 = fsub double %8, %10
  %12 = getelementptr inbounds %struct.cmsCIELab, %struct.cmsCIELab* %0, i64 0, i32 2
  %13 = load double, double* %12, align 8
  %14 = getelementptr inbounds %struct.cmsCIELab, %struct.cmsCIELab* %1, i64 0, i32 2
  %15 = load double, double* %14, align 8
  %16 = insertelement <2 x double> undef, double %4, i32 0
  %17 = insertelement <2 x double> %16, double %13, i32 1
  %18 = insertelement <2 x double> undef, double %6, i32 0
  %19 = insertelement <2 x double> %18, double %15, i32 1
  %20 = fsub <2 x double> %17, %19
  %21 = fmul double %11, %11
  %22 = fmul <2 x double> %20, %20
  %23 = extractelement <2 x double> %22, i32 0
  %24 = fadd double %23, %21
  %25 = extractelement <2 x double> %22, i32 1
  %26 = fadd double %24, %25
  %27 = tail call double @sqrt(double %26) #4
  %28 = tail call double @llvm.fabs.f64(double %27)
  ret double %28
}

; Function Attrs: nounwind readnone speculatable
declare double @llvm.fabs.f64(double) #5

; Function Attrs: nounwind ssp uwtable
define hidden double @cmsCIE94DeltaE(%struct.cmsCIELab* nocapture readonly, %struct.cmsCIELab* nocapture readonly) local_unnamed_addr #1 {
  %3 = getelementptr inbounds %struct.cmsCIELab, %struct.cmsCIELab* %0, i64 0, i32 0
  %4 = load double, double* %3, align 8
  %5 = getelementptr inbounds %struct.cmsCIELab, %struct.cmsCIELab* %1, i64 0, i32 0
  %6 = load double, double* %5, align 8
  %7 = fsub double %4, %6
  %8 = getelementptr inbounds %struct.cmsCIELab, %struct.cmsCIELab* %0, i64 0, i32 1
  %9 = load double, double* %8, align 8
  %10 = fmul double %9, %9
  %11 = getelementptr inbounds %struct.cmsCIELab, %struct.cmsCIELab* %0, i64 0, i32 2
  %12 = load double, double* %11, align 8
  %13 = fmul double %12, %12
  %14 = fadd double %10, %13
  %15 = tail call double @sqrt(double %14) #4
  %16 = tail call double @llvm.fabs.f64(double %15) #8
  %17 = load double, double* %11, align 8
  %18 = load double, double* %8, align 8
  %19 = fcmp oeq double %17, 0.000000e+00
  %20 = fcmp oeq double %18, 0.000000e+00
  %21 = and i1 %19, %20
  br i1 %21, label %37, label %22

22:                                               ; preds = %2
  %23 = tail call double @atan2(double %17, double %18) #8
  %24 = fmul double %23, 0x404CA5DC1A63C1F8
  %25 = fcmp ogt double %24, 3.600000e+02
  br i1 %25, label %29, label %26

26:                                               ; preds = %29, %22
  %27 = phi double [ %24, %22 ], [ %31, %29 ]
  %28 = fcmp olt double %27, 0.000000e+00
  br i1 %28, label %33, label %37

29:                                               ; preds = %22, %29
  %30 = phi double [ %31, %29 ], [ %24, %22 ]
  %31 = fadd double %30, -3.600000e+02
  %32 = fcmp ogt double %31, 3.600000e+02
  br i1 %32, label %29, label %26

33:                                               ; preds = %26, %33
  %34 = phi double [ %35, %33 ], [ %27, %26 ]
  %35 = fadd double %34, 3.600000e+02
  %36 = fcmp olt double %35, 0.000000e+00
  br i1 %36, label %33, label %37

37:                                               ; preds = %33, %2, %26
  %38 = getelementptr inbounds %struct.cmsCIELab, %struct.cmsCIELab* %1, i64 0, i32 1
  %39 = load double, double* %38, align 8
  %40 = fmul double %39, %39
  %41 = getelementptr inbounds %struct.cmsCIELab, %struct.cmsCIELab* %1, i64 0, i32 2
  %42 = load double, double* %41, align 8
  %43 = fmul double %42, %42
  %44 = fadd double %40, %43
  %45 = tail call double @sqrt(double %44) #4
  %46 = tail call double @llvm.fabs.f64(double %45) #8
  %47 = load double, double* %41, align 8
  %48 = load double, double* %38, align 8
  %49 = fcmp oeq double %47, 0.000000e+00
  %50 = fcmp oeq double %48, 0.000000e+00
  %51 = and i1 %49, %50
  br i1 %51, label %67, label %52

52:                                               ; preds = %37
  %53 = tail call double @atan2(double %47, double %48) #8
  %54 = fmul double %53, 0x404CA5DC1A63C1F8
  %55 = fcmp ogt double %54, 3.600000e+02
  br i1 %55, label %59, label %56

56:                                               ; preds = %59, %52
  %57 = phi double [ %54, %52 ], [ %61, %59 ]
  %58 = fcmp olt double %57, 0.000000e+00
  br i1 %58, label %63, label %67

59:                                               ; preds = %52, %59
  %60 = phi double [ %61, %59 ], [ %54, %52 ]
  %61 = fadd double %60, -3.600000e+02
  %62 = fcmp ogt double %61, 3.600000e+02
  br i1 %62, label %59, label %56

63:                                               ; preds = %56, %63
  %64 = phi double [ %65, %63 ], [ %57, %56 ]
  %65 = fadd double %64, 3.600000e+02
  %66 = fcmp olt double %65, 0.000000e+00
  br i1 %66, label %63, label %67

67:                                               ; preds = %63, %37, %56
  %68 = fsub double %16, %46
  %69 = load double, double* %3, align 8
  %70 = load double, double* %5, align 8
  %71 = load double, double* %8, align 8
  %72 = load double, double* %38, align 8
  %73 = fsub double %71, %72
  %74 = load double, double* %11, align 8
  %75 = load double, double* %41, align 8
  %76 = insertelement <2 x double> undef, double %69, i32 0
  %77 = insertelement <2 x double> %76, double %74, i32 1
  %78 = insertelement <2 x double> undef, double %70, i32 0
  %79 = insertelement <2 x double> %78, double %75, i32 1
  %80 = fsub <2 x double> %77, %79
  %81 = fmul double %73, %73
  %82 = fmul <2 x double> %80, %80
  %83 = extractelement <2 x double> %82, i32 0
  %84 = fadd double %83, %81
  %85 = extractelement <2 x double> %82, i32 1
  %86 = fadd double %84, %85
  %87 = tail call double @sqrt(double %86) #4
  %88 = fmul double %87, %87
  %89 = fmul double %7, %7
  %90 = fsub double %88, %89
  %91 = fmul double %68, %68
  %92 = fsub double %90, %91
  %93 = fcmp olt double %92, 0.000000e+00
  br i1 %93, label %99, label %94

94:                                               ; preds = %67
  %95 = tail call double @sqrt(double %92) #4
  %96 = tail call double @llvm.fabs.f64(double %95)
  %97 = fcmp oeq double %92, 0xFFF0000000000000
  %98 = select i1 %97, double 0x7FF0000000000000, double %96
  br label %99

99:                                               ; preds = %67, %94
  %100 = phi double [ %98, %94 ], [ 0.000000e+00, %67 ]
  %101 = fmul double %16, %46
  %102 = tail call double @sqrt(double %101) #8
  %103 = insertelement <2 x double> undef, double %102, i32 0
  %104 = shufflevector <2 x double> %103, <2 x double> undef, <2 x i32> zeroinitializer
  %105 = fmul <2 x double> %104, <double 1.400000e-02, double 4.800000e-02>
  %106 = fadd <2 x double> %105, <double 1.000000e+00, double 1.000000e+00>
  %107 = fmul double %100, %100
  %108 = fmul <2 x double> %106, %106
  %109 = insertelement <2 x double> undef, double %107, i32 0
  %110 = insertelement <2 x double> %109, double %91, i32 1
  %111 = fdiv <2 x double> %110, %108
  %112 = extractelement <2 x double> %111, i32 1
  %113 = fadd double %89, %112
  %114 = extractelement <2 x double> %111, i32 0
  %115 = fadd double %114, %113
  %116 = tail call double @sqrt(double %115) #8
  ret double %116
}

; Function Attrs: nofree nounwind
declare double @sqrt(double) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden double @cmsBFDdeltaE(%struct.cmsCIELab* nocapture readonly, %struct.cmsCIELab* nocapture readonly) local_unnamed_addr #1 {
  %3 = getelementptr inbounds %struct.cmsCIELab, %struct.cmsCIELab* %0, i64 0, i32 0
  %4 = load double, double* %3, align 8
  %5 = fcmp ogt double %4, 0x401FFCE5710880D8
  br i1 %5, label %6, label %11

6:                                                ; preds = %2
  %7 = fadd double %4, 1.600000e+01
  %8 = fdiv double %7, 1.160000e+02
  %9 = fmul double %8, %8
  %10 = fmul double %8, %9
  br label %13

11:                                               ; preds = %2
  %12 = fdiv double %4, 0x408C3A6666666666
  br label %13

13:                                               ; preds = %6, %11
  %14 = phi double [ %10, %6 ], [ %12, %11 ]
  %15 = fmul double %14, 1.000000e+02
  %16 = fadd double %15, 1.500000e+00
  %17 = tail call double @log(double %16) #8
  %18 = fmul double %17, 0x3FDBCB7B1526E50E
  %19 = fmul double %18, 5.460000e+01
  %20 = fadd double %19, 0xC023333333333333
  %21 = getelementptr inbounds %struct.cmsCIELab, %struct.cmsCIELab* %1, i64 0, i32 0
  %22 = load double, double* %21, align 8
  %23 = fcmp ogt double %22, 0x401FFCE5710880D8
  br i1 %23, label %24, label %29

24:                                               ; preds = %13
  %25 = fadd double %22, 1.600000e+01
  %26 = fdiv double %25, 1.160000e+02
  %27 = fmul double %26, %26
  %28 = fmul double %26, %27
  br label %31

29:                                               ; preds = %13
  %30 = fdiv double %22, 0x408C3A6666666666
  br label %31

31:                                               ; preds = %24, %29
  %32 = phi double [ %28, %24 ], [ %30, %29 ]
  %33 = fmul double %32, 1.000000e+02
  %34 = fadd double %33, 1.500000e+00
  %35 = tail call double @log(double %34) #8
  %36 = fmul double %35, 0x3FDBCB7B1526E50E
  %37 = fmul double %36, 5.460000e+01
  %38 = fadd double %37, 0xC023333333333333
  %39 = fsub double %38, %20
  %40 = getelementptr inbounds %struct.cmsCIELab, %struct.cmsCIELab* %0, i64 0, i32 1
  %41 = load double, double* %40, align 8
  %42 = fmul double %41, %41
  %43 = getelementptr inbounds %struct.cmsCIELab, %struct.cmsCIELab* %0, i64 0, i32 2
  %44 = load double, double* %43, align 8
  %45 = fmul double %44, %44
  %46 = fadd double %42, %45
  %47 = tail call double @sqrt(double %46) #4
  %48 = tail call double @llvm.fabs.f64(double %47) #8
  %49 = load double, double* %43, align 8
  %50 = load double, double* %40, align 8
  %51 = fcmp oeq double %49, 0.000000e+00
  %52 = fcmp oeq double %50, 0.000000e+00
  %53 = and i1 %51, %52
  br i1 %53, label %69, label %54

54:                                               ; preds = %31
  %55 = tail call double @atan2(double %49, double %50) #8
  %56 = fmul double %55, 0x404CA5DC1A63C1F8
  %57 = fcmp ogt double %56, 3.600000e+02
  br i1 %57, label %61, label %58

58:                                               ; preds = %61, %54
  %59 = phi double [ %56, %54 ], [ %63, %61 ]
  %60 = fcmp olt double %59, 0.000000e+00
  br i1 %60, label %65, label %69

61:                                               ; preds = %54, %61
  %62 = phi double [ %63, %61 ], [ %56, %54 ]
  %63 = fadd double %62, -3.600000e+02
  %64 = fcmp ogt double %63, 3.600000e+02
  br i1 %64, label %61, label %58

65:                                               ; preds = %58, %65
  %66 = phi double [ %67, %65 ], [ %59, %58 ]
  %67 = fadd double %66, 3.600000e+02
  %68 = fcmp olt double %67, 0.000000e+00
  br i1 %68, label %65, label %69

69:                                               ; preds = %65, %31, %58
  %70 = phi double [ %59, %58 ], [ 0.000000e+00, %31 ], [ %67, %65 ]
  %71 = getelementptr inbounds %struct.cmsCIELab, %struct.cmsCIELab* %1, i64 0, i32 1
  %72 = load double, double* %71, align 8
  %73 = fmul double %72, %72
  %74 = getelementptr inbounds %struct.cmsCIELab, %struct.cmsCIELab* %1, i64 0, i32 2
  %75 = load double, double* %74, align 8
  %76 = fmul double %75, %75
  %77 = fadd double %73, %76
  %78 = tail call double @sqrt(double %77) #4
  %79 = tail call double @llvm.fabs.f64(double %78) #8
  %80 = load double, double* %74, align 8
  %81 = load double, double* %71, align 8
  %82 = fcmp oeq double %80, 0.000000e+00
  %83 = fcmp oeq double %81, 0.000000e+00
  %84 = and i1 %82, %83
  br i1 %84, label %100, label %85

85:                                               ; preds = %69
  %86 = tail call double @atan2(double %80, double %81) #8
  %87 = fmul double %86, 0x404CA5DC1A63C1F8
  %88 = fcmp ogt double %87, 3.600000e+02
  br i1 %88, label %92, label %89

89:                                               ; preds = %92, %85
  %90 = phi double [ %87, %85 ], [ %94, %92 ]
  %91 = fcmp olt double %90, 0.000000e+00
  br i1 %91, label %96, label %100

92:                                               ; preds = %85, %92
  %93 = phi double [ %94, %92 ], [ %87, %85 ]
  %94 = fadd double %93, -3.600000e+02
  %95 = fcmp ogt double %94, 3.600000e+02
  br i1 %95, label %92, label %89

96:                                               ; preds = %89, %96
  %97 = phi double [ %98, %96 ], [ %90, %89 ]
  %98 = fadd double %97, 3.600000e+02
  %99 = fcmp olt double %98, 0.000000e+00
  br i1 %99, label %96, label %100

100:                                              ; preds = %96, %69, %89
  %101 = phi double [ %90, %89 ], [ 0.000000e+00, %69 ], [ %98, %96 ]
  %102 = fsub double %79, %48
  %103 = fadd double %48, %79
  %104 = fmul double %103, 5.000000e-01
  %105 = fadd double %70, %101
  %106 = fmul double %105, 5.000000e-01
  %107 = load double, double* %3, align 8
  %108 = load double, double* %21, align 8
  %109 = fsub double %107, %108
  %110 = load double, double* %40, align 8
  %111 = load double, double* %71, align 8
  %112 = fsub double %110, %111
  %113 = load double, double* %43, align 8
  %114 = load double, double* %74, align 8
  %115 = fsub double %113, %114
  %116 = fmul double %109, %109
  %117 = fmul double %112, %112
  %118 = fadd double %116, %117
  %119 = fmul double %115, %115
  %120 = fadd double %118, %119
  %121 = tail call double @sqrt(double %120) #4
  %122 = fmul double %121, %121
  %123 = load double, double* %21, align 8
  %124 = load double, double* %3, align 8
  %125 = fsub double %123, %124
  %126 = fmul double %125, %125
  %127 = fmul double %102, %102
  %128 = fadd double %127, %126
  %129 = fcmp ogt double %122, %128
  br i1 %129, label %130, label %134

130:                                              ; preds = %100
  %131 = fsub double %122, %126
  %132 = fsub double %131, %127
  %133 = tail call double @sqrt(double %132) #8
  br label %134

134:                                              ; preds = %100, %130
  %135 = phi double [ %133, %130 ], [ 0.000000e+00, %100 ]
  %136 = fmul double %104, 3.500000e-02
  %137 = fmul double %104, 3.650000e-03
  %138 = fadd double %137, 1.000000e+00
  %139 = fdiv double %136, %138
  %140 = fadd double %139, 5.210000e-01
  %141 = fmul double %104, %104
  %142 = fmul double %141, %141
  %143 = fadd double %142, 1.400000e+04
  %144 = fdiv double %142, %143
  %145 = tail call double @sqrt(double %144) #8
  %146 = fadd double %106, -2.540000e+02
  %147 = fdiv double %146, 0x404CA5DC1A63C1F8
  %148 = tail call double @cos(double %147) #8
  %149 = fmul double %148, 5.500000e-02
  %150 = fmul double %106, 2.000000e+00
  %151 = fadd double %150, -1.360000e+02
  %152 = fdiv double %151, 0x404CA5DC1A63C1F8
  %153 = tail call double @cos(double %152) #8
  %154 = fmul double %153, 4.000000e-02
  %155 = fsub double %149, %154
  %156 = fmul double %106, 3.000000e+00
  %157 = fadd double %156, -3.100000e+01
  %158 = fdiv double %157, 0x404CA5DC1A63C1F8
  %159 = tail call double @cos(double %158) #8
  %160 = fmul double %159, 7.000000e-02
  %161 = fadd double %155, %160
  %162 = fmul double %106, 4.000000e+00
  %163 = fadd double %162, 1.140000e+02
  %164 = fdiv double %163, 0x404CA5DC1A63C1F8
  %165 = tail call double @cos(double %164) #8
  %166 = fmul double %165, 4.900000e-02
  %167 = fadd double %161, %166
  %168 = fmul double %106, 5.000000e+00
  %169 = fadd double %168, -1.030000e+02
  %170 = fdiv double %169, 0x404CA5DC1A63C1F8
  %171 = tail call double @cos(double %170) #8
  %172 = fmul double %171, 1.500000e-02
  %173 = fsub double %167, %172
  %174 = fadd double %173, 6.270000e-01
  %175 = fmul double %145, %174
  %176 = fadd double %175, 1.000000e+00
  %177 = fsub double %176, %145
  %178 = fmul double %140, %177
  %179 = fadd double %106, -3.080000e+02
  %180 = fdiv double %179, 0x404CA5DC1A63C1F8
  %181 = tail call double @cos(double %180) #8
  %182 = fmul double %181, -2.600000e-01
  %183 = fadd double %150, -1.600000e+02
  %184 = fdiv double %183, 0x404CA5DC1A63C1F8
  %185 = tail call double @cos(double %184) #8
  %186 = fmul double %185, 3.790000e-01
  %187 = fsub double %182, %186
  %188 = fadd double %156, 2.540000e+02
  %189 = fdiv double %188, 0x404CA5DC1A63C1F8
  %190 = tail call double @cos(double %189) #8
  %191 = fmul double %190, 6.360000e-01
  %192 = fsub double %187, %191
  %193 = fadd double %162, 1.400000e+02
  %194 = fdiv double %193, 0x404CA5DC1A63C1F8
  %195 = tail call double @cos(double %194) #8
  %196 = fmul double %195, 2.260000e-01
  %197 = fadd double %192, %196
  %198 = fadd double %168, 2.800000e+02
  %199 = fdiv double %198, 0x404CA5DC1A63C1F8
  %200 = tail call double @cos(double %199) #8
  %201 = fmul double %200, 1.940000e-01
  %202 = fsub double %197, %201
  %203 = fmul double %104, %141
  %204 = fmul double %104, %203
  %205 = fmul double %104, %204
  %206 = fmul double %104, %205
  %207 = fadd double %206, 7.000000e+07
  %208 = fdiv double %206, %207
  %209 = tail call double @sqrt(double %208) #8
  %210 = fmul double %209, %202
  %211 = fmul double %39, %39
  %212 = insertelement <2 x double> undef, double %135, i32 0
  %213 = insertelement <2 x double> %212, double %102, i32 1
  %214 = insertelement <2 x double> undef, double %178, i32 0
  %215 = insertelement <2 x double> %214, double %140, i32 1
  %216 = fdiv <2 x double> %213, %215
  %217 = fmul <2 x double> %216, %216
  %218 = extractelement <2 x double> %217, i32 1
  %219 = fadd double %211, %218
  %220 = extractelement <2 x double> %217, i32 0
  %221 = fadd double %219, %220
  %222 = extractelement <2 x double> %216, i32 1
  %223 = fmul double %222, %210
  %224 = extractelement <2 x double> %216, i32 0
  %225 = fmul double %224, %223
  %226 = fadd double %221, %225
  %227 = tail call double @sqrt(double %226) #8
  ret double %227
}

; Function Attrs: nounwind ssp uwtable
define hidden double @cmsCMCdeltaE(%struct.cmsCIELab* nocapture readonly, %struct.cmsCIELab* nocapture readonly, double, double) local_unnamed_addr #1 {
  %5 = getelementptr inbounds %struct.cmsCIELab, %struct.cmsCIELab* %0, i64 0, i32 0
  %6 = load double, double* %5, align 8
  %7 = fcmp oeq double %6, 0.000000e+00
  br i1 %7, label %8, label %12

8:                                                ; preds = %4
  %9 = getelementptr inbounds %struct.cmsCIELab, %struct.cmsCIELab* %1, i64 0, i32 0
  %10 = load double, double* %9, align 8
  %11 = fcmp oeq double %10, 0.000000e+00
  br i1 %11, label %152, label %12

12:                                               ; preds = %8, %4
  %13 = getelementptr inbounds %struct.cmsCIELab, %struct.cmsCIELab* %0, i64 0, i32 1
  %14 = load double, double* %13, align 8
  %15 = fmul double %14, %14
  %16 = getelementptr inbounds %struct.cmsCIELab, %struct.cmsCIELab* %0, i64 0, i32 2
  %17 = load double, double* %16, align 8
  %18 = fmul double %17, %17
  %19 = fadd double %15, %18
  %20 = tail call double @sqrt(double %19) #4
  %21 = tail call double @llvm.fabs.f64(double %20) #8
  %22 = load double, double* %16, align 8
  %23 = load double, double* %13, align 8
  %24 = fcmp oeq double %22, 0.000000e+00
  %25 = fcmp oeq double %23, 0.000000e+00
  %26 = and i1 %24, %25
  br i1 %26, label %42, label %27

27:                                               ; preds = %12
  %28 = tail call double @atan2(double %22, double %23) #8
  %29 = fmul double %28, 0x404CA5DC1A63C1F8
  %30 = fcmp ogt double %29, 3.600000e+02
  br i1 %30, label %34, label %31

31:                                               ; preds = %34, %27
  %32 = phi double [ %29, %27 ], [ %36, %34 ]
  %33 = fcmp olt double %32, 0.000000e+00
  br i1 %33, label %38, label %42

34:                                               ; preds = %27, %34
  %35 = phi double [ %36, %34 ], [ %29, %27 ]
  %36 = fadd double %35, -3.600000e+02
  %37 = fcmp ogt double %36, 3.600000e+02
  br i1 %37, label %34, label %31

38:                                               ; preds = %31, %38
  %39 = phi double [ %40, %38 ], [ %32, %31 ]
  %40 = fadd double %39, 3.600000e+02
  %41 = fcmp olt double %40, 0.000000e+00
  br i1 %41, label %38, label %42

42:                                               ; preds = %38, %12, %31
  %43 = phi double [ %32, %31 ], [ 0.000000e+00, %12 ], [ %40, %38 ]
  %44 = getelementptr inbounds %struct.cmsCIELab, %struct.cmsCIELab* %1, i64 0, i32 1
  %45 = load double, double* %44, align 8
  %46 = fmul double %45, %45
  %47 = getelementptr inbounds %struct.cmsCIELab, %struct.cmsCIELab* %1, i64 0, i32 2
  %48 = load double, double* %47, align 8
  %49 = fmul double %48, %48
  %50 = fadd double %46, %49
  %51 = tail call double @sqrt(double %50) #4
  %52 = tail call double @llvm.fabs.f64(double %51) #8
  %53 = load double, double* %47, align 8
  %54 = load double, double* %44, align 8
  %55 = fcmp oeq double %53, 0.000000e+00
  %56 = fcmp oeq double %54, 0.000000e+00
  %57 = and i1 %55, %56
  br i1 %57, label %73, label %58

58:                                               ; preds = %42
  %59 = tail call double @atan2(double %53, double %54) #8
  %60 = fmul double %59, 0x404CA5DC1A63C1F8
  %61 = fcmp ogt double %60, 3.600000e+02
  br i1 %61, label %65, label %62

62:                                               ; preds = %65, %58
  %63 = phi double [ %60, %58 ], [ %67, %65 ]
  %64 = fcmp olt double %63, 0.000000e+00
  br i1 %64, label %69, label %73

65:                                               ; preds = %58, %65
  %66 = phi double [ %67, %65 ], [ %60, %58 ]
  %67 = fadd double %66, -3.600000e+02
  %68 = fcmp ogt double %67, 3.600000e+02
  br i1 %68, label %65, label %62

69:                                               ; preds = %62, %69
  %70 = phi double [ %71, %69 ], [ %63, %62 ]
  %71 = fadd double %70, 3.600000e+02
  %72 = fcmp olt double %71, 0.000000e+00
  br i1 %72, label %69, label %73

73:                                               ; preds = %69, %42, %62
  %74 = getelementptr inbounds %struct.cmsCIELab, %struct.cmsCIELab* %1, i64 0, i32 0
  %75 = load double, double* %74, align 8
  %76 = load double, double* %5, align 8
  %77 = fsub double %75, %76
  %78 = fsub double %52, %21
  %79 = load double, double* %13, align 8
  %80 = load double, double* %44, align 8
  %81 = fsub double %79, %80
  %82 = load double, double* %16, align 8
  %83 = load double, double* %47, align 8
  %84 = insertelement <2 x double> undef, double %76, i32 0
  %85 = insertelement <2 x double> %84, double %82, i32 1
  %86 = insertelement <2 x double> undef, double %75, i32 0
  %87 = insertelement <2 x double> %86, double %83, i32 1
  %88 = fsub <2 x double> %85, %87
  %89 = fmul double %81, %81
  %90 = fmul <2 x double> %88, %88
  %91 = extractelement <2 x double> %90, i32 0
  %92 = fadd double %91, %89
  %93 = extractelement <2 x double> %90, i32 1
  %94 = fadd double %92, %93
  %95 = tail call double @sqrt(double %94) #4
  %96 = fmul double %95, %95
  %97 = fmul double %77, %77
  %98 = fmul double %78, %78
  %99 = fadd double %98, %97
  %100 = fcmp ogt double %96, %99
  br i1 %100, label %101, label %105

101:                                              ; preds = %73
  %102 = fsub double %96, %97
  %103 = fsub double %102, %98
  %104 = tail call double @sqrt(double %103) #8
  br label %105

105:                                              ; preds = %73, %101
  %106 = phi double [ %104, %101 ], [ 0.000000e+00, %73 ]
  %107 = fcmp ogt double %43, 1.640000e+02
  %108 = fcmp olt double %43, 3.450000e+02
  %109 = and i1 %107, %108
  %110 = select i1 %109, double 1.680000e+02, double 3.500000e+01
  %111 = select i1 %109, double 2.000000e-01, double 4.000000e-01
  %112 = select i1 %109, double 5.600000e-01, double 3.600000e-01
  %113 = fadd double %43, %110
  %114 = fdiv double %113, 0x404CA5DC1A63C1F8
  %115 = tail call double @cos(double %114) #8
  %116 = fmul double %115, %111
  %117 = tail call double @llvm.fabs.f64(double %116)
  %118 = fadd double %117, %112
  %119 = fmul double %21, 6.380000e-02
  %120 = fmul double %21, 1.310000e-02
  %121 = fadd double %120, 1.000000e+00
  %122 = fdiv double %119, %121
  %123 = fadd double %122, 6.380000e-01
  %124 = load double, double* %5, align 8
  %125 = fmul double %124, 4.097500e-02
  %126 = fmul double %124, 1.765000e-02
  %127 = fadd double %126, 1.000000e+00
  %128 = fdiv double %125, %127
  %129 = fcmp olt double %124, 1.600000e+01
  %130 = select i1 %129, double 5.110000e-01, double %128
  %131 = fmul double %20, %20
  %132 = fmul double %131, %21
  %133 = fmul double %21, %132
  %134 = fadd double %133, 1.900000e+03
  %135 = fdiv double %133, %134
  %136 = tail call double @sqrt(double %135) #8
  %137 = fmul double %118, %136
  %138 = fadd double %137, 1.000000e+00
  %139 = fsub double %138, %136
  %140 = fmul double %123, %139
  %141 = fmul double %130, %2
  %142 = fdiv double %77, %141
  %143 = fmul double %142, %142
  %144 = fmul double %123, %3
  %145 = fdiv double %78, %144
  %146 = fmul double %145, %145
  %147 = fadd double %146, %143
  %148 = fdiv double %106, %140
  %149 = fmul double %148, %148
  %150 = fadd double %149, %147
  %151 = tail call double @sqrt(double %150) #8
  br label %152

152:                                              ; preds = %8, %105
  %153 = phi double [ %151, %105 ], [ 0.000000e+00, %8 ]
  ret double %153
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden double @cmsCIE2000DeltaE(%struct.cmsCIELab* nocapture readonly, %struct.cmsCIELab* nocapture readonly, double, double, double) local_unnamed_addr #3 {
  %6 = getelementptr inbounds %struct.cmsCIELab, %struct.cmsCIELab* %0, i64 0, i32 0
  %7 = load double, double* %6, align 8
  %8 = getelementptr inbounds %struct.cmsCIELab, %struct.cmsCIELab* %0, i64 0, i32 1
  %9 = bitcast double* %8 to <2 x double>*
  %10 = load <2 x double>, <2 x double>* %9, align 8
  %11 = fmul <2 x double> %10, %10
  %12 = extractelement <2 x double> %11, i32 0
  %13 = extractelement <2 x double> %11, i32 1
  %14 = fadd double %12, %13
  %15 = tail call double @sqrt(double %14) #8
  %16 = getelementptr inbounds %struct.cmsCIELab, %struct.cmsCIELab* %1, i64 0, i32 0
  %17 = load double, double* %16, align 8
  %18 = getelementptr inbounds %struct.cmsCIELab, %struct.cmsCIELab* %1, i64 0, i32 1
  %19 = bitcast double* %18 to <2 x double>*
  %20 = load <2 x double>, <2 x double>* %19, align 8
  %21 = fmul <2 x double> %20, %20
  %22 = extractelement <2 x double> %21, i32 0
  %23 = extractelement <2 x double> %21, i32 1
  %24 = fadd double %22, %23
  %25 = tail call double @sqrt(double %24) #8
  %26 = fadd double %15, %25
  %27 = fmul double %26, 5.000000e-01
  %28 = tail call double @pow(double %27, double 7.000000e+00) #8
  %29 = tail call double @pow(double %27, double 7.000000e+00) #8
  %30 = fadd double %29, 0x41F6BCC41E900000
  %31 = fdiv double %28, %30
  %32 = tail call double @sqrt(double %31) #8
  %33 = fsub double 1.000000e+00, %32
  %34 = fmul double %33, 5.000000e-01
  %35 = fadd double %34, 1.000000e+00
  %36 = extractelement <2 x double> %10, i32 0
  %37 = fmul double %36, %35
  %38 = fmul double %37, %37
  %39 = fadd double %13, %38
  %40 = tail call double @sqrt(double %39) #8
  %41 = extractelement <2 x double> %10, i32 1
  %42 = fcmp oeq double %41, 0.000000e+00
  %43 = fcmp oeq double %37, 0.000000e+00
  %44 = and i1 %42, %43
  br i1 %44, label %60, label %45

45:                                               ; preds = %5
  %46 = tail call double @atan2(double %41, double %37) #8
  %47 = fmul double %46, 0x404CA5DC1A63C1F8
  %48 = fcmp ogt double %47, 3.600000e+02
  br i1 %48, label %52, label %49

49:                                               ; preds = %52, %45
  %50 = phi double [ %47, %45 ], [ %54, %52 ]
  %51 = fcmp olt double %50, 0.000000e+00
  br i1 %51, label %56, label %60

52:                                               ; preds = %45, %52
  %53 = phi double [ %54, %52 ], [ %47, %45 ]
  %54 = fadd double %53, -3.600000e+02
  %55 = fcmp ogt double %54, 3.600000e+02
  br i1 %55, label %52, label %49

56:                                               ; preds = %49, %56
  %57 = phi double [ %58, %56 ], [ %50, %49 ]
  %58 = fadd double %57, 3.600000e+02
  %59 = fcmp olt double %58, 0.000000e+00
  br i1 %59, label %56, label %60

60:                                               ; preds = %56, %5, %49
  %61 = phi double [ %50, %49 ], [ 0.000000e+00, %5 ], [ %58, %56 ]
  %62 = extractelement <2 x double> %20, i32 0
  %63 = fmul double %62, %35
  %64 = fmul double %63, %63
  %65 = fadd double %23, %64
  %66 = tail call double @sqrt(double %65) #8
  %67 = extractelement <2 x double> %20, i32 1
  %68 = fcmp oeq double %67, 0.000000e+00
  %69 = fcmp oeq double %63, 0.000000e+00
  %70 = and i1 %68, %69
  br i1 %70, label %86, label %71

71:                                               ; preds = %60
  %72 = tail call double @atan2(double %67, double %63) #8
  %73 = fmul double %72, 0x404CA5DC1A63C1F8
  %74 = fcmp ogt double %73, 3.600000e+02
  br i1 %74, label %78, label %75

75:                                               ; preds = %78, %71
  %76 = phi double [ %73, %71 ], [ %80, %78 ]
  %77 = fcmp olt double %76, 0.000000e+00
  br i1 %77, label %82, label %86

78:                                               ; preds = %71, %78
  %79 = phi double [ %80, %78 ], [ %73, %71 ]
  %80 = fadd double %79, -3.600000e+02
  %81 = fcmp ogt double %80, 3.600000e+02
  br i1 %81, label %78, label %75

82:                                               ; preds = %75, %82
  %83 = phi double [ %84, %82 ], [ %76, %75 ]
  %84 = fadd double %83, 3.600000e+02
  %85 = fcmp olt double %84, 0.000000e+00
  br i1 %85, label %82, label %86

86:                                               ; preds = %82, %60, %75
  %87 = phi double [ %76, %75 ], [ 0.000000e+00, %60 ], [ %84, %82 ]
  %88 = fadd double %40, %66
  %89 = fmul double %88, 5.000000e-01
  %90 = fadd double %61, %87
  %91 = fsub double %87, %61
  %92 = tail call double @llvm.fabs.f64(double %91)
  %93 = fcmp ugt double %92, 0x406680000218DEF4
  br i1 %93, label %94, label %100

94:                                               ; preds = %86
  %95 = fcmp olt double %90, 3.600000e+02
  br i1 %95, label %96, label %98

96:                                               ; preds = %94
  %97 = fadd double %90, 3.600000e+02
  br label %100

98:                                               ; preds = %94
  %99 = fadd double %90, -3.600000e+02
  br label %100

100:                                              ; preds = %86, %96, %98
  %101 = phi double [ %97, %96 ], [ %99, %98 ], [ %90, %86 ]
  %102 = fmul double %101, 5.000000e-01
  %103 = fcmp ugt double %91, 0xC06680000218DEF4
  br i1 %103, label %106, label %104

104:                                              ; preds = %100
  %105 = fadd double %91, 3.600000e+02
  br label %110

106:                                              ; preds = %100
  %107 = fcmp ogt double %91, 1.800000e+02
  %108 = fadd double %91, -3.600000e+02
  %109 = select i1 %107, double %108, double %91
  br label %110

110:                                              ; preds = %106, %104
  %111 = phi double [ %105, %104 ], [ %109, %106 ]
  %112 = fsub double %17, %7
  %113 = fmul double %40, %66
  %114 = tail call double @sqrt(double %113) #8
  %115 = fmul double %114, 2.000000e+00
  %116 = fmul double %111, 0x400921FB54442D18
  %117 = fdiv double %116, 1.800000e+02
  %118 = fmul double %117, 5.000000e-01
  %119 = tail call double @sin(double %118) #8
  %120 = insertelement <2 x double> undef, double %119, i32 0
  %121 = insertelement <2 x double> %120, double %66, i32 1
  %122 = insertelement <2 x double> undef, double %115, i32 0
  %123 = insertelement <2 x double> %122, double %40, i32 1
  %124 = fmul <2 x double> %121, %123
  %125 = fsub <2 x double> %121, %123
  %126 = shufflevector <2 x double> %124, <2 x double> %125, <2 x i32> <i32 0, i32 3>
  %127 = fadd double %102, -3.000000e+01
  %128 = fmul double %127, 0x400921FB54442D18
  %129 = fdiv double %128, 1.800000e+02
  %130 = tail call double @cos(double %129) #8
  %131 = fmul double %130, 1.700000e-01
  %132 = fsub double 1.000000e+00, %131
  %133 = fmul double %102, 2.000000e+00
  %134 = fmul double %133, 0x400921FB54442D18
  %135 = fdiv double %134, 1.800000e+02
  %136 = tail call double @cos(double %135) #8
  %137 = fmul double %136, 2.400000e-01
  %138 = fadd double %132, %137
  %139 = fmul double %102, 3.000000e+00
  %140 = fadd double %139, 6.000000e+00
  %141 = fmul double %140, 0x400921FB54442D18
  %142 = fdiv double %141, 1.800000e+02
  %143 = tail call double @cos(double %142) #8
  %144 = fmul double %143, 3.200000e-01
  %145 = fadd double %138, %144
  %146 = fmul double %102, 4.000000e+00
  %147 = fadd double %146, -6.300000e+01
  %148 = fmul double %147, 0x400921FB54442D18
  %149 = fdiv double %148, 1.800000e+02
  %150 = tail call double @cos(double %149) #8
  %151 = fmul double %150, 2.000000e-01
  %152 = fsub double %145, %151
  %153 = fadd double %7, %17
  %154 = fmul double %153, 5.000000e-01
  %155 = fadd double %154, -5.000000e+01
  %156 = fmul double %155, %155
  %157 = fmul double %156, 1.500000e-02
  %158 = fadd double %156, 2.000000e+01
  %159 = tail call double @sqrt(double %158) #8
  %160 = fdiv double %157, %159
  %161 = fadd double %160, 1.000000e+00
  %162 = insertelement <2 x double> undef, double %89, i32 0
  %163 = insertelement <2 x double> %162, double %88, i32 1
  %164 = fmul <2 x double> %163, <double 1.500000e-02, double 4.500000e-02>
  %165 = insertelement <2 x double> <double undef, double 5.000000e-01>, double %152, i32 0
  %166 = fmul <2 x double> %164, %165
  %167 = fadd <2 x double> %166, <double 1.000000e+00, double 1.000000e+00>
  %168 = fadd double %102, -2.750000e+02
  %169 = fdiv double %168, 2.500000e+01
  %170 = fmul double %169, %169
  %171 = fsub double -0.000000e+00, %170
  %172 = tail call double @exp(double %171) #8
  %173 = fmul double %172, 3.000000e+01
  %174 = tail call double @pow(double %89, double 7.000000e+00) #8
  %175 = tail call double @pow(double %89, double 7.000000e+00) #8
  %176 = fadd double %175, 0x41F6BCC41E900000
  %177 = fdiv double %174, %176
  %178 = tail call double @sqrt(double %177) #8
  %179 = fmul double %178, 2.000000e+00
  %180 = fmul double %173, 0x400921FB54442D18
  %181 = fdiv double %180, 1.800000e+02
  %182 = fmul double %181, 2.000000e+00
  %183 = tail call double @sin(double %182) #8
  %184 = fmul double %183, %179
  %185 = fmul double %161, %2
  %186 = fdiv double %112, %185
  %187 = fmul double %186, %186
  %188 = insertelement <2 x double> undef, double %4, i32 0
  %189 = insertelement <2 x double> %188, double %3, i32 1
  %190 = fmul <2 x double> %167, %189
  %191 = fdiv <2 x double> %126, %190
  %192 = fmul <2 x double> %191, %191
  %193 = extractelement <2 x double> %192, i32 1
  %194 = fadd double %193, %187
  %195 = extractelement <2 x double> %192, i32 0
  %196 = fadd double %194, %195
  %197 = extractelement <2 x double> %191, i32 1
  %198 = fmul double %197, %184
  %199 = extractelement <2 x double> %191, i32 0
  %200 = fmul double %199, %198
  %201 = fsub double %196, %200
  %202 = tail call double @sqrt(double %201) #8
  ret double %202
}

; Function Attrs: nofree nounwind
declare double @exp(double) local_unnamed_addr #4

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @_cmsReasonableGridpointsByColorspace(i32, i32) local_unnamed_addr #6 {
  %3 = and i32 %1, 16711680
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %8, label %5

5:                                                ; preds = %2
  %6 = lshr i32 %1, 16
  %7 = and i32 %6, 255
  br label %29

8:                                                ; preds = %2
  %9 = tail call i32 @cmsChannelsOf(i32 %0)
  %10 = and i32 %1, 1024
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %17, label %12

12:                                               ; preds = %8
  %13 = icmp ugt i32 %9, 4
  br i1 %13, label %29, label %14

14:                                               ; preds = %12
  %15 = icmp eq i32 %9, 4
  %16 = select i1 %15, i32 23, i32 49
  br label %29

17:                                               ; preds = %8
  %18 = and i32 %1, 2048
  %19 = icmp eq i32 %18, 0
  %20 = icmp ugt i32 %9, 4
  br i1 %19, label %25, label %21

21:                                               ; preds = %17
  br i1 %20, label %29, label %22

22:                                               ; preds = %21
  %23 = icmp eq i32 %9, 1
  %24 = select i1 %23, i32 33, i32 17
  br label %29

25:                                               ; preds = %17
  br i1 %20, label %29, label %26

26:                                               ; preds = %25
  %27 = icmp eq i32 %9, 4
  %28 = select i1 %27, i32 17, i32 33
  br label %29

29:                                               ; preds = %26, %25, %22, %21, %14, %12, %5
  %30 = phi i32 [ %7, %5 ], [ 7, %12 ], [ %16, %14 ], [ 6, %21 ], [ %24, %22 ], [ 7, %25 ], [ %28, %26 ]
  ret i32 %30
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @cmsChannelsOf(i32) local_unnamed_addr #6 {
  switch i32 %0, label %16 [
    i32 1296255025, label %17
    i32 826494034, label %17
    i32 1196573017, label %17
    i32 1296255026, label %2
    i32 843271250, label %2
    i32 1482250784, label %3
    i32 1281450528, label %3
    i32 1282766368, label %3
    i32 1497588338, label %3
    i32 1501067552, label %3
    i32 1380401696, label %3
    i32 1213421088, label %3
    i32 1212961568, label %3
    i32 1129142560, label %3
    i32 1296255027, label %3
    i32 860048466, label %3
    i32 1282766411, label %4
    i32 1129142603, label %4
    i32 1296255028, label %4
    i32 876825682, label %4
    i32 1296255029, label %5
    i32 893602898, label %5
    i32 1296255030, label %6
    i32 910380114, label %6
    i32 1296255031, label %7
    i32 927157330, label %7
    i32 1296255032, label %8
    i32 943934546, label %8
    i32 1296255033, label %9
    i32 960711762, label %9
    i32 1296255041, label %10
    i32 1094929490, label %10
    i32 1296255042, label %11
    i32 1111706706, label %11
    i32 1296255043, label %12
    i32 1128483922, label %12
    i32 1296255044, label %13
    i32 1145261138, label %13
    i32 1296255045, label %14
    i32 1162038354, label %14
    i32 1296255046, label %15
    i32 1178815570, label %15
  ]

2:                                                ; preds = %1, %1
  br label %17

3:                                                ; preds = %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1
  br label %17

4:                                                ; preds = %1, %1, %1, %1
  br label %17

5:                                                ; preds = %1, %1
  br label %17

6:                                                ; preds = %1, %1
  br label %17

7:                                                ; preds = %1, %1
  br label %17

8:                                                ; preds = %1, %1
  br label %17

9:                                                ; preds = %1, %1
  br label %17

10:                                               ; preds = %1, %1
  br label %17

11:                                               ; preds = %1, %1
  br label %17

12:                                               ; preds = %1, %1
  br label %17

13:                                               ; preds = %1, %1
  br label %17

14:                                               ; preds = %1, %1
  br label %17

15:                                               ; preds = %1, %1
  br label %17

16:                                               ; preds = %1
  br label %17

17:                                               ; preds = %1, %1, %1, %16, %15, %14, %13, %12, %11, %10, %9, %8, %7, %6, %5, %4, %3, %2
  %18 = phi i32 [ 3, %16 ], [ 15, %15 ], [ 14, %14 ], [ 13, %13 ], [ 12, %12 ], [ 11, %11 ], [ 10, %10 ], [ 9, %9 ], [ 8, %8 ], [ 7, %7 ], [ 6, %6 ], [ 5, %5 ], [ 4, %4 ], [ 3, %3 ], [ 2, %2 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ]
  ret i32 %18
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden i32 @_cmsEndPointsBySpace(i32, i16**, i16**, i32*) local_unnamed_addr #7 {
  switch i32 %0, label %50 [
    i32 1196573017, label %5
    i32 1380401696, label %14
    i32 1281450528, label %23
    i32 1129142603, label %32
    i32 1129142560, label %41
  ]

5:                                                ; preds = %4
  %6 = icmp eq i16** %1, null
  br i1 %6, label %8, label %7

7:                                                ; preds = %5
  store i16* getelementptr inbounds ([4 x i16], [4 x i16]* @_cmsEndPointsBySpace.GrayWhite, i64 0, i64 0), i16** %1, align 8
  br label %8

8:                                                ; preds = %5, %7
  %9 = icmp eq i16** %2, null
  br i1 %9, label %11, label %10

10:                                               ; preds = %8
  store i16* getelementptr inbounds ([4 x i16], [4 x i16]* @_cmsEndPointsBySpace.Grayblack, i64 0, i64 0), i16** %2, align 8
  br label %11

11:                                               ; preds = %8, %10
  %12 = icmp eq i32* %3, null
  br i1 %12, label %50, label %13

13:                                               ; preds = %11
  store i32 1, i32* %3, align 4
  br label %50

14:                                               ; preds = %4
  %15 = icmp eq i16** %1, null
  br i1 %15, label %17, label %16

16:                                               ; preds = %14
  store i16* getelementptr inbounds ([4 x i16], [4 x i16]* @_cmsEndPointsBySpace.RGBwhite, i64 0, i64 0), i16** %1, align 8
  br label %17

17:                                               ; preds = %14, %16
  %18 = icmp eq i16** %2, null
  br i1 %18, label %20, label %19

19:                                               ; preds = %17
  store i16* getelementptr inbounds ([4 x i16], [4 x i16]* @_cmsEndPointsBySpace.RGBblack, i64 0, i64 0), i16** %2, align 8
  br label %20

20:                                               ; preds = %17, %19
  %21 = icmp eq i32* %3, null
  br i1 %21, label %50, label %22

22:                                               ; preds = %20
  store i32 3, i32* %3, align 4
  br label %50

23:                                               ; preds = %4
  %24 = icmp eq i16** %1, null
  br i1 %24, label %26, label %25

25:                                               ; preds = %23
  store i16* getelementptr inbounds ([4 x i16], [4 x i16]* @_cmsEndPointsBySpace.LABwhite, i64 0, i64 0), i16** %1, align 8
  br label %26

26:                                               ; preds = %23, %25
  %27 = icmp eq i16** %2, null
  br i1 %27, label %29, label %28

28:                                               ; preds = %26
  store i16* getelementptr inbounds ([4 x i16], [4 x i16]* @_cmsEndPointsBySpace.LABblack, i64 0, i64 0), i16** %2, align 8
  br label %29

29:                                               ; preds = %26, %28
  %30 = icmp eq i32* %3, null
  br i1 %30, label %50, label %31

31:                                               ; preds = %29
  store i32 3, i32* %3, align 4
  br label %50

32:                                               ; preds = %4
  %33 = icmp eq i16** %1, null
  br i1 %33, label %35, label %34

34:                                               ; preds = %32
  store i16* getelementptr inbounds ([4 x i16], [4 x i16]* @_cmsEndPointsBySpace.CMYKwhite, i64 0, i64 0), i16** %1, align 8
  br label %35

35:                                               ; preds = %32, %34
  %36 = icmp eq i16** %2, null
  br i1 %36, label %38, label %37

37:                                               ; preds = %35
  store i16* getelementptr inbounds ([4 x i16], [4 x i16]* @_cmsEndPointsBySpace.CMYKblack, i64 0, i64 0), i16** %2, align 8
  br label %38

38:                                               ; preds = %35, %37
  %39 = icmp eq i32* %3, null
  br i1 %39, label %50, label %40

40:                                               ; preds = %38
  store i32 4, i32* %3, align 4
  br label %50

41:                                               ; preds = %4
  %42 = icmp eq i16** %1, null
  br i1 %42, label %44, label %43

43:                                               ; preds = %41
  store i16* getelementptr inbounds ([4 x i16], [4 x i16]* @_cmsEndPointsBySpace.CMYwhite, i64 0, i64 0), i16** %1, align 8
  br label %44

44:                                               ; preds = %41, %43
  %45 = icmp eq i16** %2, null
  br i1 %45, label %47, label %46

46:                                               ; preds = %44
  store i16* getelementptr inbounds ([4 x i16], [4 x i16]* @_cmsEndPointsBySpace.CMYblack, i64 0, i64 0), i16** %2, align 8
  br label %47

47:                                               ; preds = %44, %46
  %48 = icmp eq i32* %3, null
  br i1 %48, label %50, label %49

49:                                               ; preds = %47
  store i32 3, i32* %3, align 4
  br label %50

50:                                               ; preds = %4, %49, %47, %40, %38, %31, %29, %22, %20, %13, %11
  %51 = phi i32 [ 1, %11 ], [ 1, %13 ], [ 1, %20 ], [ 1, %22 ], [ 1, %29 ], [ 1, %31 ], [ 1, %38 ], [ 1, %40 ], [ 1, %47 ], [ 1, %49 ], [ 0, %4 ]
  ret i32 %51
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @_cmsICCcolorSpace(i32) local_unnamed_addr #6 {
  %2 = add i32 %0, -1
  %3 = icmp ult i32 %2, 30
  br i1 %3, label %4, label %8

4:                                                ; preds = %1
  %5 = sext i32 %2 to i64
  %6 = getelementptr inbounds [30 x i32], [30 x i32]* @switch.table._cmsICCcolorSpace, i64 0, i64 %5
  %7 = load i32, i32* %6, align 4
  ret i32 %7

8:                                                ; preds = %1
  ret i32 0
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @_cmsLCMScolorSpace(i32) local_unnamed_addr #6 {
  switch i32 %0, label %28 [
    i32 1196573017, label %29
    i32 1380401696, label %2
    i32 1129142560, label %3
    i32 1129142603, label %4
    i32 1497588338, label %5
    i32 1282766368, label %6
    i32 1482250784, label %7
    i32 1281450528, label %8
    i32 1282766411, label %9
    i32 1213421088, label %10
    i32 1212961568, label %11
    i32 1501067552, label %12
    i32 826494034, label %13
    i32 1296255025, label %13
    i32 843271250, label %14
    i32 1296255026, label %14
    i32 860048466, label %15
    i32 1296255027, label %15
    i32 876825682, label %16
    i32 1296255028, label %16
    i32 893602898, label %17
    i32 1296255029, label %17
    i32 910380114, label %18
    i32 1296255030, label %18
    i32 1296255031, label %19
    i32 927157330, label %19
    i32 1296255032, label %20
    i32 943934546, label %20
    i32 1296255033, label %21
    i32 960711762, label %21
    i32 1296255041, label %22
    i32 1094929490, label %22
    i32 1296255042, label %23
    i32 1111706706, label %23
    i32 1296255043, label %24
    i32 1128483922, label %24
    i32 1296255044, label %25
    i32 1145261138, label %25
    i32 1296255045, label %26
    i32 1162038354, label %26
    i32 1296255046, label %27
    i32 1178815570, label %27
  ]

2:                                                ; preds = %1
  br label %29

3:                                                ; preds = %1
  br label %29

4:                                                ; preds = %1
  br label %29

5:                                                ; preds = %1
  br label %29

6:                                                ; preds = %1
  br label %29

7:                                                ; preds = %1
  br label %29

8:                                                ; preds = %1
  br label %29

9:                                                ; preds = %1
  br label %29

10:                                               ; preds = %1
  br label %29

11:                                               ; preds = %1
  br label %29

12:                                               ; preds = %1
  br label %29

13:                                               ; preds = %1, %1
  br label %29

14:                                               ; preds = %1, %1
  br label %29

15:                                               ; preds = %1, %1
  br label %29

16:                                               ; preds = %1, %1
  br label %29

17:                                               ; preds = %1, %1
  br label %29

18:                                               ; preds = %1, %1
  br label %29

19:                                               ; preds = %1, %1
  br label %29

20:                                               ; preds = %1, %1
  br label %29

21:                                               ; preds = %1, %1
  br label %29

22:                                               ; preds = %1, %1
  br label %29

23:                                               ; preds = %1, %1
  br label %29

24:                                               ; preds = %1, %1
  br label %29

25:                                               ; preds = %1, %1
  br label %29

26:                                               ; preds = %1, %1
  br label %29

27:                                               ; preds = %1, %1
  br label %29

28:                                               ; preds = %1
  br label %29

29:                                               ; preds = %1, %28, %27, %26, %25, %24, %23, %22, %21, %20, %19, %18, %17, %16, %15, %14, %13, %12, %11, %10, %9, %8, %7, %6, %5, %4, %3, %2
  %30 = phi i32 [ 0, %28 ], [ 29, %27 ], [ 28, %26 ], [ 27, %25 ], [ 26, %24 ], [ 25, %23 ], [ 24, %22 ], [ 23, %21 ], [ 22, %20 ], [ 21, %19 ], [ 20, %18 ], [ 19, %17 ], [ 18, %16 ], [ 17, %15 ], [ 16, %14 ], [ 15, %13 ], [ 14, %12 ], [ 13, %11 ], [ 12, %10 ], [ 11, %9 ], [ 10, %8 ], [ 9, %7 ], [ 8, %6 ], [ 7, %5 ], [ 6, %4 ], [ 5, %3 ], [ 4, %2 ], [ 3, %1 ]
  ret i32 %30
}

; Function Attrs: nounwind readnone speculatable
declare double @llvm.floor.f64(double) #5

; Function Attrs: nofree nounwind
declare double @atan2(double, double) local_unnamed_addr #4

declare double @_cms15Fixed16toDouble(i32) local_unnamed_addr #2

; Function Attrs: nofree nounwind
declare double @log(double) local_unnamed_addr #4

attributes #0 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone speculatable }
attributes #6 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
