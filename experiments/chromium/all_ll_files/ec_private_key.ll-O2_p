; ModuleID = '../../crypto/ec_private_key.cc'
source_filename = "../../crypto/ec_private_key.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.crypto::ECPrivateKey" = type { %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %struct.evp_pkey_st* }
%struct.evp_pkey_st = type { i32, i32, %union.anon, %struct.evp_pkey_asn1_method_st* }
%union.anon = type { i8* }
%struct.evp_pkey_asn1_method_st = type opaque
%"class.logging::CheckOpResult" = type { i8* }
%"class.crypto::OpenSSLErrStackTracer" = type { %"class.base::Location" }
%"class.base::Location" = type { i8*, i8*, i32, i8* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type opaque
%struct.ec_key_st = type opaque
%"class.std::__1::basic_ostream" = type opaque
%struct.cbs_st = type { i8*, i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i8*, i8*, %"class.std::__1::__compressed_pair.10" }
%"class.std::__1::__compressed_pair.10" = type { %"struct.std::__1::__compressed_pair_elem.11" }
%"struct.std::__1::__compressed_pair_elem.11" = type { i8* }
%"class.bssl::internal::StackAllocated" = type { %struct.cbb_st }
%struct.cbb_st = type { %struct.cbb_buffer_st*, %struct.cbb_st*, i64, i8, i8, i8 }
%struct.cbb_buffer_st = type { i8*, i64, i64, i8, i8 }
%"class.std::__1::__vector_base_common" = type { i8 }
%struct.evp_cipher_st = type { i32, i32, i32, i32, i32, i32, i8*, i32 (%struct.evp_cipher_ctx_st*, i8*, i8*, i32)*, i32 (%struct.evp_cipher_ctx_st*, i8*, i8*, i64)*, void (%struct.evp_cipher_ctx_st*)*, i32 (%struct.evp_cipher_ctx_st*, i32, i32, i8*)* }
%struct.evp_cipher_ctx_st = type { %struct.evp_cipher_st*, i8*, i8*, i32, i32, i32, [16 x i8], [16 x i8], [32 x i8], i32, i32, i32, [32 x i8] }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.13" }
%"class.std::__1::__compressed_pair.13" = type { %"struct.std::__1::__compressed_pair_elem.14" }
%"struct.std::__1::__compressed_pair_elem.14" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.15 }
%union.anon.15 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
%struct.ec_group_st = type opaque
%struct.ec_point_st = type opaque
%struct.bignum_ctx = type opaque

$_ZNSt3__16vectorIhNS_9allocatorIhEEE6assignIPhEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsIS7_E9referenceEEE5valueEvE4typeES7_S7_ = comdat any

@.str = private unnamed_addr constant [7 x i8] c"Create\00", align 1
@.str.1 = private unnamed_addr constant [31 x i8] c"../../crypto/ec_private_key.cc\00", align 1
@.str.2 = private unnamed_addr constant [39 x i8] c"408 == EVP_PKEY_id(result->key_.get())\00", align 1
@.str.3 = private unnamed_addr constant [25 x i8] c"CreateFromPrivateKeyInfo\00", align 1
@.str.4 = private unnamed_addr constant [34 x i8] c"CreateFromEncryptedPrivateKeyInfo\00", align 1
@.str.5 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.6 = private unnamed_addr constant [17 x i8] c"ExportPrivateKey\00", align 1
@.str.7 = private unnamed_addr constant [26 x i8] c"ExportEncryptedPrivateKey\00", align 1
@.str.8 = private unnamed_addr constant [16 x i8] c"ExportPublicKey\00", align 1
@.str.9 = private unnamed_addr constant [19 x i8] c"ExportRawPublicKey\00", align 1

@_ZN6crypto12ECPrivateKeyD1Ev = hidden unnamed_addr alias void (%"class.crypto::ECPrivateKey"*), void (%"class.crypto::ECPrivateKey"*)* @_ZN6crypto12ECPrivateKeyD2Ev
@_ZN6crypto12ECPrivateKeyC1Ev = hidden unnamed_addr alias void (%"class.crypto::ECPrivateKey"*), void (%"class.crypto::ECPrivateKey"*)* @_ZN6crypto12ECPrivateKeyC2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6crypto12ECPrivateKeyD2Ev(%"class.crypto::ECPrivateKey"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.crypto::ECPrivateKey", %"class.crypto::ECPrivateKey"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %3 = load %struct.evp_pkey_st*, %struct.evp_pkey_st** %2, align 8
  store %struct.evp_pkey_st* null, %struct.evp_pkey_st** %2, align 8
  %4 = icmp eq %struct.evp_pkey_st* %3, null
  br i1 %4, label %6, label %5

5:                                                ; preds = %1
  tail call void @EVP_PKEY_free(%struct.evp_pkey_st* nonnull %3) #8
  br label %6

6:                                                ; preds = %1, %5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.crypto::ECPrivateKey"* @_ZN6crypto12ECPrivateKey6CreateEv() local_unnamed_addr #0 align 2 {
  %1 = alloca %"class.logging::CheckOpResult", align 8
  %2 = alloca %"class.crypto::OpenSSLErrStackTracer", align 8
  %3 = alloca %"class.base::Location", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = bitcast %"class.crypto::OpenSSLErrStackTracer"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %6) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 -86, i64 32, i1 false)
  %7 = bitcast %"class.base::Location"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %7) #8
  call void @_ZN4base8Location7CurrentEPKcS2_i(%"class.base::Location"* nonnull sret %3, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.1, i64 0, i64 0), i32 28) #8
  %8 = getelementptr inbounds %"class.crypto::OpenSSLErrStackTracer", %"class.crypto::OpenSSLErrStackTracer"* %2, i64 0, i32 0
  call void @_ZN4base8LocationC1ERKS0_(%"class.base::Location"* nonnull %8, %"class.base::Location"* nonnull dereferenceable(32) %3) #8
  call void @_ZN6crypto17EnsureOpenSSLInitEv() #8
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %7) #8
  %9 = call %struct.ec_key_st* @EC_KEY_new_by_curve_name(i32 415) #8
  %10 = icmp eq %struct.ec_key_st* %9, null
  br i1 %10, label %55, label %11

11:                                               ; preds = %0
  %12 = call i32 @EC_KEY_generate_key(%struct.ec_key_st* nonnull %9) #8
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %53, label %14

14:                                               ; preds = %11
  %15 = call i8* @_Znwm(i64 8) #9
  %16 = bitcast i8* %15 to i64*
  store i64 0, i64* %16, align 8
  %17 = ptrtoint i8* %15 to i64
  %18 = call %struct.evp_pkey_st* @EVP_PKEY_new() #8
  %19 = bitcast i8* %15 to %struct.evp_pkey_st**
  %20 = load %struct.evp_pkey_st*, %struct.evp_pkey_st** %19, align 8
  store %struct.evp_pkey_st* %18, %struct.evp_pkey_st** %19, align 8
  %21 = icmp eq %struct.evp_pkey_st* %20, null
  br i1 %21, label %24, label %22

22:                                               ; preds = %14
  call void @EVP_PKEY_free(%struct.evp_pkey_st* nonnull %20) #8
  %23 = load %struct.evp_pkey_st*, %struct.evp_pkey_st** %19, align 8
  br label %24

24:                                               ; preds = %14, %22
  %25 = phi %struct.evp_pkey_st* [ %18, %14 ], [ %23, %22 ]
  %26 = icmp eq %struct.evp_pkey_st* %25, null
  br i1 %26, label %52, label %27

27:                                               ; preds = %24
  %28 = call i32 @EVP_PKEY_set1_EC_KEY(%struct.evp_pkey_st* nonnull %25, %struct.ec_key_st* nonnull %9) #8
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %48, label %30

30:                                               ; preds = %27
  %31 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %31) #8
  %32 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %32, align 8
  %33 = load %struct.evp_pkey_st*, %struct.evp_pkey_st** %19, align 8
  %34 = call i32 @EVP_PKEY_id(%struct.evp_pkey_st* %33) #8
  %35 = bitcast %"class.logging::CheckOpResult"* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %35)
  %36 = icmp eq i32 %34, 408
  br i1 %36, label %37, label %38

37:                                               ; preds = %30
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %35)
  store i8* null, i8** %32, align 8
  br label %47

38:                                               ; preds = %30
  %39 = call i8* @_ZN7logging15CheckOpValueStrEi(i32 408) #8
  %40 = call i8* @_ZN7logging15CheckOpValueStrEi(i32 %34) #8
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %1, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.2, i64 0, i64 0), i8* %39, i8* %40) #8
  %41 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %1, i64 0, i32 0
  %42 = load i8*, i8** %41, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %35)
  store i8* %42, i8** %32, align 8
  %43 = icmp eq i8* %42, null
  br i1 %43, label %47, label %44

44:                                               ; preds = %38
  %45 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %45) #8
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.1, i64 0, i64 0), i32 40, %"class.logging::CheckOpResult"* nonnull %4) #8
  %46 = call %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #8
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %45) #8
  br label %47

47:                                               ; preds = %44, %38, %37
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %31) #8
  br label %53

48:                                               ; preds = %27
  %49 = load %struct.evp_pkey_st*, %struct.evp_pkey_st** %19, align 8
  store %struct.evp_pkey_st* null, %struct.evp_pkey_st** %19, align 8
  %50 = icmp eq %struct.evp_pkey_st* %49, null
  br i1 %50, label %52, label %51

51:                                               ; preds = %48
  call void @EVP_PKEY_free(%struct.evp_pkey_st* nonnull %49) #8
  br label %52

52:                                               ; preds = %24, %51, %48
  call void @_ZdlPv(i8* nonnull %15) #9
  br label %53

53:                                               ; preds = %52, %47, %11
  %54 = phi i64 [ 0, %52 ], [ %17, %47 ], [ 0, %11 ]
  call void @EC_KEY_free(%struct.ec_key_st* nonnull %9) #8
  br label %55

55:                                               ; preds = %0, %53
  %56 = phi i64 [ %54, %53 ], [ 0, %0 ]
  call void @_ZN6crypto20ClearOpenSSLERRStackERKN4base8LocationE(%"class.base::Location"* nonnull dereferenceable(32) %8) #8
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %6) #8
  %57 = inttoptr i64 %56 to %"class.crypto::ECPrivateKey"*
  ret %"class.crypto::ECPrivateKey"* %57
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare void @_ZN4base8Location7CurrentEPKcS2_i(%"class.base::Location"* sret, i8*, i8*, i32) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare %struct.ec_key_st* @EC_KEY_new_by_curve_name(i32) local_unnamed_addr #2

declare i32 @EC_KEY_generate_key(%struct.ec_key_st*) local_unnamed_addr #2

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #3

declare %struct.evp_pkey_st* @EVP_PKEY_new() local_unnamed_addr #2

declare i32 @EVP_PKEY_set1_EC_KEY(%struct.evp_pkey_st*, %struct.ec_key_st*) local_unnamed_addr #2

declare i32 @EVP_PKEY_id(%struct.evp_pkey_st*) local_unnamed_addr #2

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #2

declare %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden %"class.crypto::ECPrivateKey"* @_ZN6crypto12ECPrivateKey24CreateFromPrivateKeyInfoEN4base4spanIKhLm18446744073709551615EEE(i64, i8*) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.crypto::OpenSSLErrStackTracer", align 8
  %4 = alloca %"class.base::Location", align 8
  %5 = alloca %struct.cbs_st, align 8
  %6 = bitcast %"class.crypto::OpenSSLErrStackTracer"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %6) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 -86, i64 32, i1 false)
  %7 = bitcast %"class.base::Location"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %7) #8
  call void @_ZN4base8Location7CurrentEPKcS2_i(%"class.base::Location"* nonnull sret %4, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.1, i64 0, i64 0), i32 47) #8
  %8 = getelementptr inbounds %"class.crypto::OpenSSLErrStackTracer", %"class.crypto::OpenSSLErrStackTracer"* %3, i64 0, i32 0
  call void @_ZN4base8LocationC1ERKS0_(%"class.base::Location"* nonnull %8, %"class.base::Location"* nonnull dereferenceable(32) %4) #8
  call void @_ZN6crypto17EnsureOpenSSLInitEv() #8
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %7) #8
  %9 = bitcast %struct.cbs_st* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %9) #8
  %10 = bitcast %struct.cbs_st* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %10, i8 -86, i64 16, i1 false)
  call void @CBS_init(%struct.cbs_st* nonnull %5, i8* %1, i64 %0) #8
  %11 = call %struct.evp_pkey_st* @EVP_parse_private_key(%struct.cbs_st* nonnull %5) #8
  %12 = ptrtoint %struct.evp_pkey_st* %11 to i64
  %13 = icmp eq %struct.evp_pkey_st* %11, null
  br i1 %13, label %25, label %14

14:                                               ; preds = %2
  %15 = call i64 @CBS_len(%struct.cbs_st* nonnull %5) #8
  %16 = icmp eq i64 %15, 0
  br i1 %16, label %17, label %24

17:                                               ; preds = %14
  %18 = call i32 @EVP_PKEY_id(%struct.evp_pkey_st* nonnull %11) #8
  %19 = icmp eq i32 %18, 408
  br i1 %19, label %20, label %24

20:                                               ; preds = %17
  %21 = call i8* @_Znwm(i64 8) #9
  %22 = bitcast i8* %21 to i64*
  store i64 %12, i64* %22, align 8
  %23 = bitcast i8* %21 to %"class.crypto::ECPrivateKey"*
  br label %25

24:                                               ; preds = %17, %14
  call void @EVP_PKEY_free(%struct.evp_pkey_st* nonnull %11) #8
  br label %25

25:                                               ; preds = %2, %20, %24
  %26 = phi %"class.crypto::ECPrivateKey"* [ null, %24 ], [ %23, %20 ], [ null, %2 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %9) #8
  call void @_ZN6crypto20ClearOpenSSLERRStackERKN4base8LocationE(%"class.base::Location"* nonnull dereferenceable(32) %8) #8
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %6) #8
  ret %"class.crypto::ECPrivateKey"* %26
}

declare void @CBS_init(%struct.cbs_st*, i8*, i64) local_unnamed_addr #2

declare %struct.evp_pkey_st* @EVP_parse_private_key(%struct.cbs_st*) local_unnamed_addr #2

declare i64 @CBS_len(%struct.cbs_st*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden %"class.crypto::ECPrivateKey"* @_ZN6crypto12ECPrivateKey33CreateFromEncryptedPrivateKeyInfoEN4base4spanIKhLm18446744073709551615EEE(i64, i8*) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.crypto::OpenSSLErrStackTracer", align 8
  %4 = alloca %"class.base::Location", align 8
  %5 = alloca %struct.cbs_st, align 8
  %6 = bitcast %"class.crypto::OpenSSLErrStackTracer"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %6) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 -86, i64 32, i1 false)
  %7 = bitcast %"class.base::Location"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %7) #8
  call void @_ZN4base8Location7CurrentEPKcS2_i(%"class.base::Location"* nonnull sret %4, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.1, i64 0, i64 0), i32 63) #8
  %8 = getelementptr inbounds %"class.crypto::OpenSSLErrStackTracer", %"class.crypto::OpenSSLErrStackTracer"* %3, i64 0, i32 0
  call void @_ZN4base8LocationC1ERKS0_(%"class.base::Location"* nonnull %8, %"class.base::Location"* nonnull dereferenceable(32) %4) #8
  call void @_ZN6crypto17EnsureOpenSSLInitEv() #8
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %7) #8
  %9 = bitcast %struct.cbs_st* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %9) #8
  %10 = bitcast %struct.cbs_st* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %10, i8 -86, i64 16, i1 false)
  call void @CBS_init(%struct.cbs_st* nonnull %5, i8* %1, i64 %0) #8
  %11 = call %struct.evp_pkey_st* @PKCS8_parse_encrypted_private_key(%struct.cbs_st* nonnull %5, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.5, i64 0, i64 0), i64 0) #8
  %12 = icmp eq %struct.evp_pkey_st* %11, null
  br i1 %12, label %13, label %16

13:                                               ; preds = %2
  call void @CBS_init(%struct.cbs_st* nonnull %5, i8* %1, i64 %0) #8
  %14 = call %struct.evp_pkey_st* @PKCS8_parse_encrypted_private_key(%struct.cbs_st* nonnull %5, i8* null, i64 0) #8
  %15 = icmp eq %struct.evp_pkey_st* %14, null
  br i1 %15, label %29, label %16

16:                                               ; preds = %2, %13
  %17 = phi %struct.evp_pkey_st* [ %14, %13 ], [ %11, %2 ]
  %18 = ptrtoint %struct.evp_pkey_st* %17 to i64
  %19 = call i64 @CBS_len(%struct.cbs_st* nonnull %5) #8
  %20 = icmp eq i64 %19, 0
  br i1 %20, label %21, label %28

21:                                               ; preds = %16
  %22 = call i32 @EVP_PKEY_id(%struct.evp_pkey_st* nonnull %17) #8
  %23 = icmp eq i32 %22, 408
  br i1 %23, label %24, label %28

24:                                               ; preds = %21
  %25 = call i8* @_Znwm(i64 8) #9
  %26 = bitcast i8* %25 to i64*
  store i64 %18, i64* %26, align 8
  %27 = bitcast i8* %25 to %"class.crypto::ECPrivateKey"*
  br label %29

28:                                               ; preds = %21, %16
  call void @EVP_PKEY_free(%struct.evp_pkey_st* nonnull %17) #8
  br label %29

29:                                               ; preds = %13, %24, %28
  %30 = phi %"class.crypto::ECPrivateKey"* [ null, %28 ], [ %27, %24 ], [ null, %13 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %9) #8
  call void @_ZN6crypto20ClearOpenSSLERRStackERKN4base8LocationE(%"class.base::Location"* nonnull dereferenceable(32) %8) #8
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %6) #8
  ret %"class.crypto::ECPrivateKey"* %30
}

declare %struct.evp_pkey_st* @PKCS8_parse_encrypted_private_key(%struct.cbs_st*, i8*, i64) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden %"class.crypto::ECPrivateKey"* @_ZNK6crypto12ECPrivateKey4CopyEv(%"class.crypto::ECPrivateKey"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = tail call i8* @_Znwm(i64 8) #9
  %3 = bitcast i8* %2 to %"class.crypto::ECPrivateKey"*
  %4 = bitcast i8* %2 to i64*
  store i64 0, i64* %4, align 8
  %5 = getelementptr inbounds %"class.crypto::ECPrivateKey", %"class.crypto::ECPrivateKey"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %6 = load %struct.evp_pkey_st*, %struct.evp_pkey_st** %5, align 8
  %7 = icmp eq %struct.evp_pkey_st* %6, null
  br i1 %7, label %10, label %8

8:                                                ; preds = %1
  %9 = tail call i32 @EVP_PKEY_up_ref(%struct.evp_pkey_st* nonnull %6) #8
  br label %10

10:                                               ; preds = %8, %1
  %11 = ptrtoint %struct.evp_pkey_st* %6 to i64
  store i64 %11, i64* %4, align 8
  ret %"class.crypto::ECPrivateKey"* %3
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK6crypto12ECPrivateKey16ExportPrivateKeyEPNSt3__16vectorIhNS1_9allocatorIhEEEE(%"class.crypto::ECPrivateKey"* nocapture readonly, %"class.std::__1::vector"*) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.crypto::OpenSSLErrStackTracer", align 8
  %4 = alloca %"class.base::Location", align 8
  %5 = alloca i8*, align 8
  %6 = alloca i64, align 8
  %7 = alloca %"class.bssl::internal::StackAllocated", align 8
  %8 = bitcast %"class.crypto::OpenSSLErrStackTracer"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %8) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %8, i8 -86, i64 32, i1 false)
  %9 = bitcast %"class.base::Location"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %9) #8
  call void @_ZN4base8Location7CurrentEPKcS2_i(%"class.base::Location"* nonnull sret %4, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.6, i64 0, i64 0), i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.1, i64 0, i64 0), i32 97) #8
  %10 = getelementptr inbounds %"class.crypto::OpenSSLErrStackTracer", %"class.crypto::OpenSSLErrStackTracer"* %3, i64 0, i32 0
  call void @_ZN4base8LocationC1ERKS0_(%"class.base::Location"* nonnull %10, %"class.base::Location"* nonnull dereferenceable(32) %4) #8
  call void @_ZN6crypto17EnsureOpenSSLInitEv() #8
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %9) #8
  %11 = bitcast i8** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11) #8
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %5, align 8
  %12 = bitcast i64* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %12) #8
  store i64 -6148914691236517206, i64* %6, align 8
  %13 = bitcast %"class.bssl::internal::StackAllocated"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %13) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %13, i8 -86, i64 32, i1 false)
  %14 = getelementptr inbounds %"class.bssl::internal::StackAllocated", %"class.bssl::internal::StackAllocated"* %7, i64 0, i32 0
  call void @CBB_zero(%struct.cbb_st* nonnull %14) #8
  %15 = call i32 @CBB_init(%struct.cbb_st* nonnull %14, i64 0) #8
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %30, label %17

17:                                               ; preds = %2
  %18 = getelementptr inbounds %"class.crypto::ECPrivateKey", %"class.crypto::ECPrivateKey"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %19 = load %struct.evp_pkey_st*, %struct.evp_pkey_st** %18, align 8
  %20 = call i32 @EVP_marshal_private_key(%struct.cbb_st* nonnull %14, %struct.evp_pkey_st* %19) #8
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %30, label %22

22:                                               ; preds = %17
  %23 = call i32 @CBB_finish(%struct.cbb_st* nonnull %14, i8** nonnull %5, i64* nonnull %6) #8
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %30, label %25

25:                                               ; preds = %22
  %26 = load i8*, i8** %5, align 8
  %27 = load i64, i64* %6, align 8
  %28 = getelementptr inbounds i8, i8* %26, i64 %27
  call void @_ZNSt3__16vectorIhNS_9allocatorIhEEE6assignIPhEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsIS7_E9referenceEEE5valueEvE4typeES7_S7_(%"class.std::__1::vector"* %1, i8* %26, i8* %28)
  %29 = load i8*, i8** %5, align 8
  call void @OPENSSL_free(i8* %29) #8
  br label %30

30:                                               ; preds = %2, %17, %22, %25
  %31 = phi i1 [ true, %25 ], [ false, %22 ], [ false, %17 ], [ false, %2 ]
  call void @CBB_cleanup(%struct.cbb_st* nonnull %14) #8
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %13) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %12) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11) #8
  call void @_ZN6crypto20ClearOpenSSLERRStackERKN4base8LocationE(%"class.base::Location"* nonnull dereferenceable(32) %10) #8
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %8) #8
  ret i1 %31
}

declare i32 @CBB_init(%struct.cbb_st*, i64) local_unnamed_addr #2

declare i32 @EVP_marshal_private_key(%struct.cbb_st*, %struct.evp_pkey_st*) local_unnamed_addr #2

declare i32 @CBB_finish(%struct.cbb_st*, i8**, i64*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIhNS_9allocatorIhEEE6assignIPhEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsIS7_E9referenceEEE5valueEvE4typeES7_S7_(%"class.std::__1::vector"*, i8*, i8*) local_unnamed_addr #0 comdat align 2 {
  %4 = ptrtoint i8* %2 to i64
  %5 = ptrtoint i8* %1 to i64
  %6 = sub i64 %4, %5
  %7 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %8 = bitcast i8** %7 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = bitcast %"class.std::__1::vector"* %0 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = sub i64 %9, %11
  %13 = icmp ugt i64 %6, %12
  %14 = inttoptr i64 %11 to i8*
  br i1 %13, label %40, label %15

15:                                               ; preds = %3
  %16 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %17 = bitcast i8** %16 to i64*
  %18 = load i64, i64* %17, align 8
  %19 = sub i64 %18, %11
  %20 = icmp ugt i64 %6, %19
  %21 = getelementptr inbounds i8, i8* %1, i64 %19
  %22 = select i1 %20, i8* %21, i8* %2
  %23 = ptrtoint i8* %22 to i64
  %24 = sub i64 %23, %5
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %27, label %26

26:                                               ; preds = %15
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %14, i8* align 1 %1, i64 %24, i1 false) #8
  br label %27

27:                                               ; preds = %15, %26
  br i1 %20, label %28, label %38

28:                                               ; preds = %27
  %29 = load i64, i64* %17, align 8
  %30 = sub i64 %4, %23
  %31 = icmp sgt i64 %30, 0
  br i1 %31, label %32, label %36

32:                                               ; preds = %28
  %33 = inttoptr i64 %29 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %33, i8* align 1 %22, i64 %30, i1 false) #8
  %34 = getelementptr inbounds i8, i8* %33, i64 %30
  %35 = ptrtoint i8* %34 to i64
  br label %36

36:                                               ; preds = %28, %32
  %37 = phi i64 [ %35, %32 ], [ %29, %28 ]
  store i64 %37, i64* %17, align 8
  br label %66

38:                                               ; preds = %27
  %39 = getelementptr inbounds i8, i8* %14, i64 %24
  store i8* %39, i8** %16, align 8
  br label %66

40:                                               ; preds = %3
  %41 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %42 = icmp eq i64 %11, 0
  br i1 %42, label %47, label %43

43:                                               ; preds = %40
  %44 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %45 = bitcast i8** %44 to i64*
  store i64 %11, i64* %45, align 8
  tail call void @_ZdlPv(i8* nonnull %14) #9
  %46 = bitcast %"class.std::__1::vector"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %46, i8 0, i64 24, i1 false) #8
  br label %47

47:                                               ; preds = %40, %43
  %48 = phi i64 [ %9, %40 ], [ 0, %43 ]
  %49 = icmp slt i64 %6, 0
  br i1 %49, label %50, label %52

50:                                               ; preds = %47
  %51 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %51) #10
  unreachable

52:                                               ; preds = %47
  %53 = icmp ult i64 %48, 4611686018427387903
  br i1 %53, label %54, label %58

54:                                               ; preds = %52
  %55 = shl i64 %48, 1
  %56 = icmp ult i64 %55, %6
  %57 = select i1 %56, i64 %6, i64 %55
  br label %58

58:                                               ; preds = %54, %52
  %59 = phi i64 [ %57, %54 ], [ 9223372036854775807, %52 ]
  %60 = tail call i8* @_Znwm(i64 %59) #9
  %61 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  store i8* %60, i8** %61, align 8
  store i8* %60, i8** %41, align 8
  %62 = getelementptr inbounds i8, i8* %60, i64 %59
  store i8* %62, i8** %7, align 8
  %63 = bitcast i8** %61 to i64*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %60, i8* align 1 %1, i64 %6, i1 false) #8
  %64 = getelementptr inbounds i8, i8* %60, i64 %6
  %65 = ptrtoint i8* %64 to i64
  store i64 %65, i64* %63, align 8
  br label %66

66:                                               ; preds = %36, %38, %58
  ret void
}

declare void @OPENSSL_free(i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK6crypto12ECPrivateKey25ExportEncryptedPrivateKeyEPNSt3__16vectorIhNS1_9allocatorIhEEEE(%"class.crypto::ECPrivateKey"* nocapture readonly, %"class.std::__1::vector"*) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.crypto::OpenSSLErrStackTracer", align 8
  %4 = alloca %"class.base::Location", align 8
  %5 = alloca i8*, align 8
  %6 = alloca i64, align 8
  %7 = alloca %"class.bssl::internal::StackAllocated", align 8
  %8 = bitcast %"class.crypto::OpenSSLErrStackTracer"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %8) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %8, i8 -86, i64 32, i1 false)
  %9 = bitcast %"class.base::Location"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %9) #8
  call void @_ZN4base8Location7CurrentEPKcS2_i(%"class.base::Location"* nonnull sret %4, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.1, i64 0, i64 0), i32 113) #8
  %10 = getelementptr inbounds %"class.crypto::OpenSSLErrStackTracer", %"class.crypto::OpenSSLErrStackTracer"* %3, i64 0, i32 0
  call void @_ZN4base8LocationC1ERKS0_(%"class.base::Location"* nonnull %10, %"class.base::Location"* nonnull dereferenceable(32) %4) #8
  call void @_ZN6crypto17EnsureOpenSSLInitEv() #8
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %9) #8
  %11 = bitcast i8** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11) #8
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %5, align 8
  %12 = bitcast i64* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %12) #8
  store i64 -6148914691236517206, i64* %6, align 8
  %13 = bitcast %"class.bssl::internal::StackAllocated"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %13) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %13, i8 -86, i64 32, i1 false)
  %14 = getelementptr inbounds %"class.bssl::internal::StackAllocated", %"class.bssl::internal::StackAllocated"* %7, i64 0, i32 0
  call void @CBB_zero(%struct.cbb_st* nonnull %14) #8
  %15 = call i32 @CBB_init(%struct.cbb_st* nonnull %14, i64 0) #8
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %30, label %17

17:                                               ; preds = %2
  %18 = getelementptr inbounds %"class.crypto::ECPrivateKey", %"class.crypto::ECPrivateKey"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %19 = load %struct.evp_pkey_st*, %struct.evp_pkey_st** %18, align 8
  %20 = call i32 @PKCS8_marshal_encrypted_private_key(%struct.cbb_st* nonnull %14, i32 146, %struct.evp_cipher_st* null, i8* null, i64 0, i8* null, i64 0, i32 1, %struct.evp_pkey_st* %19) #8
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %30, label %22

22:                                               ; preds = %17
  %23 = call i32 @CBB_finish(%struct.cbb_st* nonnull %14, i8** nonnull %5, i64* nonnull %6) #8
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %30, label %25

25:                                               ; preds = %22
  %26 = load i8*, i8** %5, align 8
  %27 = load i64, i64* %6, align 8
  %28 = getelementptr inbounds i8, i8* %26, i64 %27
  call void @_ZNSt3__16vectorIhNS_9allocatorIhEEE6assignIPhEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsIS7_E9referenceEEE5valueEvE4typeES7_S7_(%"class.std::__1::vector"* %1, i8* %26, i8* %28)
  %29 = load i8*, i8** %5, align 8
  call void @OPENSSL_free(i8* %29) #8
  br label %30

30:                                               ; preds = %2, %17, %22, %25
  %31 = phi i1 [ true, %25 ], [ false, %22 ], [ false, %17 ], [ false, %2 ]
  call void @CBB_cleanup(%struct.cbb_st* nonnull %14) #8
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %13) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %12) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11) #8
  call void @_ZN6crypto20ClearOpenSSLERRStackERKN4base8LocationE(%"class.base::Location"* nonnull dereferenceable(32) %10) #8
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %8) #8
  ret i1 %31
}

declare i32 @PKCS8_marshal_encrypted_private_key(%struct.cbb_st*, i32, %struct.evp_cipher_st*, i8*, i64, i8*, i64, i32, %struct.evp_pkey_st*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK6crypto12ECPrivateKey15ExportPublicKeyEPNSt3__16vectorIhNS1_9allocatorIhEEEE(%"class.crypto::ECPrivateKey"* nocapture readonly, %"class.std::__1::vector"*) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.crypto::OpenSSLErrStackTracer", align 8
  %4 = alloca %"class.base::Location", align 8
  %5 = alloca i8*, align 8
  %6 = alloca i64, align 8
  %7 = alloca %"class.bssl::internal::StackAllocated", align 8
  %8 = bitcast %"class.crypto::OpenSSLErrStackTracer"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %8) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %8, i8 -86, i64 32, i1 false)
  %9 = bitcast %"class.base::Location"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %9) #8
  call void @_ZN4base8Location7CurrentEPKcS2_i(%"class.base::Location"* nonnull sret %4, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.1, i64 0, i64 0), i32 137) #8
  %10 = getelementptr inbounds %"class.crypto::OpenSSLErrStackTracer", %"class.crypto::OpenSSLErrStackTracer"* %3, i64 0, i32 0
  call void @_ZN4base8LocationC1ERKS0_(%"class.base::Location"* nonnull %10, %"class.base::Location"* nonnull dereferenceable(32) %4) #8
  call void @_ZN6crypto17EnsureOpenSSLInitEv() #8
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %9) #8
  %11 = bitcast i8** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11) #8
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %5, align 8
  %12 = bitcast i64* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %12) #8
  store i64 -6148914691236517206, i64* %6, align 8
  %13 = bitcast %"class.bssl::internal::StackAllocated"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %13) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %13, i8 -86, i64 32, i1 false)
  %14 = getelementptr inbounds %"class.bssl::internal::StackAllocated", %"class.bssl::internal::StackAllocated"* %7, i64 0, i32 0
  call void @CBB_zero(%struct.cbb_st* nonnull %14) #8
  %15 = call i32 @CBB_init(%struct.cbb_st* nonnull %14, i64 0) #8
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %30, label %17

17:                                               ; preds = %2
  %18 = getelementptr inbounds %"class.crypto::ECPrivateKey", %"class.crypto::ECPrivateKey"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %19 = load %struct.evp_pkey_st*, %struct.evp_pkey_st** %18, align 8
  %20 = call i32 @EVP_marshal_public_key(%struct.cbb_st* nonnull %14, %struct.evp_pkey_st* %19) #8
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %30, label %22

22:                                               ; preds = %17
  %23 = call i32 @CBB_finish(%struct.cbb_st* nonnull %14, i8** nonnull %5, i64* nonnull %6) #8
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %30, label %25

25:                                               ; preds = %22
  %26 = load i8*, i8** %5, align 8
  %27 = load i64, i64* %6, align 8
  %28 = getelementptr inbounds i8, i8* %26, i64 %27
  call void @_ZNSt3__16vectorIhNS_9allocatorIhEEE6assignIPhEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsIS7_E9referenceEEE5valueEvE4typeES7_S7_(%"class.std::__1::vector"* %1, i8* %26, i8* %28)
  %29 = load i8*, i8** %5, align 8
  call void @OPENSSL_free(i8* %29) #8
  br label %30

30:                                               ; preds = %2, %17, %22, %25
  %31 = phi i1 [ true, %25 ], [ false, %22 ], [ false, %17 ], [ false, %2 ]
  call void @CBB_cleanup(%struct.cbb_st* nonnull %14) #8
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %13) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %12) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11) #8
  call void @_ZN6crypto20ClearOpenSSLERRStackERKN4base8LocationE(%"class.base::Location"* nonnull dereferenceable(32) %10) #8
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %8) #8
  ret i1 %31
}

declare i32 @EVP_marshal_public_key(%struct.cbb_st*, %struct.evp_pkey_st*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK6crypto12ECPrivateKey18ExportRawPublicKeyEPNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE(%"class.crypto::ECPrivateKey"* nocapture readonly, %"class.std::__1::basic_string"*) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.crypto::OpenSSLErrStackTracer", align 8
  %4 = alloca %"class.base::Location", align 8
  %5 = alloca [64 x i8], align 16
  %6 = bitcast %"class.crypto::OpenSSLErrStackTracer"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %6) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 -86, i64 32, i1 false)
  %7 = bitcast %"class.base::Location"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %7) #8
  call void @_ZN4base8Location7CurrentEPKcS2_i(%"class.base::Location"* nonnull sret %4, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.9, i64 0, i64 0), i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.1, i64 0, i64 0), i32 152) #8
  %8 = getelementptr inbounds %"class.crypto::OpenSSLErrStackTracer", %"class.crypto::OpenSSLErrStackTracer"* %3, i64 0, i32 0
  call void @_ZN4base8LocationC1ERKS0_(%"class.base::Location"* nonnull %8, %"class.base::Location"* nonnull dereferenceable(32) %4) #8
  call void @_ZN6crypto17EnsureOpenSSLInitEv() #8
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %7) #8
  %9 = getelementptr inbounds %"class.crypto::ECPrivateKey", %"class.crypto::ECPrivateKey"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %10 = load %struct.evp_pkey_st*, %struct.evp_pkey_st** %9, align 8
  %11 = call %struct.ec_key_st* @EVP_PKEY_get0_EC_KEY(%struct.evp_pkey_st* %10) #8
  %12 = call %struct.bignum_st* @BN_new() #8
  %13 = call %struct.bignum_st* @BN_new() #8
  %14 = getelementptr inbounds [64 x i8], [64 x i8]* %5, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %14) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %14, i8 -86, i64 64, i1 false)
  %15 = icmp eq %struct.bignum_st* %12, null
  br i1 %15, label %33, label %16

16:                                               ; preds = %2
  %17 = icmp eq %struct.bignum_st* %13, null
  br i1 %17, label %18, label %19

18:                                               ; preds = %16
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %14) #8
  br label %37

19:                                               ; preds = %16
  %20 = call %struct.ec_group_st* @EC_KEY_get0_group(%struct.ec_key_st* %11) #8
  %21 = call %struct.ec_point_st* @EC_KEY_get0_public_key(%struct.ec_key_st* %11) #8
  %22 = call i32 @EC_POINT_get_affine_coordinates_GFp(%struct.ec_group_st* %20, %struct.ec_point_st* %21, %struct.bignum_st* nonnull %12, %struct.bignum_st* nonnull %13, %struct.bignum_ctx* null) #8
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %35, label %24

24:                                               ; preds = %19
  %25 = call i32 @BN_bn2bin_padded(i8* nonnull %14, i64 32, %struct.bignum_st* nonnull %12) #8
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %35, label %27

27:                                               ; preds = %24
  %28 = getelementptr inbounds [64 x i8], [64 x i8]* %5, i64 0, i64 32
  %29 = call i32 @BN_bn2bin_padded(i8* %28, i64 32, %struct.bignum_st* nonnull %13) #8
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %35, label %31

31:                                               ; preds = %27
  %32 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__assign_externalEPKcm(%"class.std::__1::basic_string"* %1, i8* nonnull %14, i64 64) #8
  br label %35

33:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %14) #8
  %34 = icmp eq %struct.bignum_st* %13, null
  br i1 %34, label %40, label %37

35:                                               ; preds = %19, %24, %27, %31
  %36 = phi i1 [ false, %19 ], [ false, %24 ], [ false, %27 ], [ true, %31 ]
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %14) #8
  call void @BN_free(%struct.bignum_st* nonnull %13) #8
  br label %37

37:                                               ; preds = %18, %35, %33
  %38 = phi %struct.bignum_st* [ %13, %33 ], [ %12, %35 ], [ %12, %18 ]
  %39 = phi i1 [ false, %33 ], [ %36, %35 ], [ false, %18 ]
  call void @BN_free(%struct.bignum_st* nonnull %38) #8
  br label %40

40:                                               ; preds = %37, %33
  %41 = phi i1 [ false, %33 ], [ %39, %37 ]
  call void @_ZN6crypto20ClearOpenSSLERRStackERKN4base8LocationE(%"class.base::Location"* nonnull dereferenceable(32) %8) #8
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %6) #8
  ret i1 %41
}

declare %struct.ec_key_st* @EVP_PKEY_get0_EC_KEY(%struct.evp_pkey_st*) local_unnamed_addr #2

declare %struct.bignum_st* @BN_new() local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare i32 @EC_POINT_get_affine_coordinates_GFp(%struct.ec_group_st*, %struct.ec_point_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.bignum_ctx*) local_unnamed_addr #2

declare %struct.ec_group_st* @EC_KEY_get0_group(%struct.ec_key_st*) local_unnamed_addr #2

declare %struct.ec_point_st* @EC_KEY_get0_public_key(%struct.ec_key_st*) local_unnamed_addr #2

declare i32 @BN_bn2bin_padded(i8*, i64, %struct.bignum_st*) local_unnamed_addr #2

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN6crypto12ECPrivateKeyC2Ev(%"class.crypto::ECPrivateKey"* nocapture) unnamed_addr #5 align 2 {
  %2 = bitcast %"class.crypto::ECPrivateKey"* %0 to i64*
  store i64 0, i64* %2, align 8
  ret void
}

declare void @_ZN4base8LocationC1ERKS0_(%"class.base::Location"*, %"class.base::Location"* dereferenceable(32)) unnamed_addr #2

declare void @_ZN6crypto17EnsureOpenSSLInitEv() local_unnamed_addr #2

declare i8* @_ZN7logging15CheckOpValueStrEi(i32) local_unnamed_addr #2

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #2

declare void @_ZN6crypto20ClearOpenSSLERRStackERKN4base8LocationE(%"class.base::Location"* dereferenceable(32)) local_unnamed_addr #2

declare i32 @EVP_PKEY_up_ref(%struct.evp_pkey_st*) local_unnamed_addr #2

declare void @EC_KEY_free(%struct.ec_key_st*) local_unnamed_addr #2

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #6

declare void @EVP_PKEY_free(%struct.evp_pkey_st*) local_unnamed_addr #2

declare void @CBB_zero(%struct.cbb_st*) local_unnamed_addr #2

declare void @CBB_cleanup(%struct.cbb_st*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #7

declare void @BN_free(%struct.bignum_st*) local_unnamed_addr #2

declare dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__assign_externalEPKcm(%"class.std::__1::basic_string"*, i8*, i64) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }
attributes #9 = { builtin nounwind }
attributes #10 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
