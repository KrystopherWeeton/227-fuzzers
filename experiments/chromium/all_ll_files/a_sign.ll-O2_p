; ModuleID = '../../third_party/boringssl/src/crypto/x509/a_sign.c'
source_filename = "../../third_party/boringssl/src/crypto/x509/a_sign.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.ASN1_ITEM_st = type opaque
%struct.X509_algor_st = type { %struct.asn1_object_st*, %struct.asn1_type_st* }
%struct.asn1_object_st = type { i8*, i8*, i32, i32, i8*, i32 }
%struct.asn1_type_st = type { i32, %union.anon }
%union.anon = type { i8* }
%struct.asn1_string_st = type { i32, i32, i8*, i64 }
%struct.evp_pkey_st = type { i32, i32, %union.anon.0, %struct.evp_pkey_asn1_method_st* }
%union.anon.0 = type { i8* }
%struct.evp_pkey_asn1_method_st = type opaque
%struct.env_md_st = type opaque
%struct.env_md_ctx_st = type { %struct.env_md_st*, i8*, %struct.evp_pkey_ctx_st*, %struct.evp_md_pctx_ops* }
%struct.evp_pkey_ctx_st = type opaque
%struct.evp_md_pctx_ops = type opaque
%struct.engine_st = type opaque
%struct.ASN1_VALUE_st = type opaque

@.str = private unnamed_addr constant [53 x i8] c"../../third_party/boringssl/src/crypto/x509/a_sign.c\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @ASN1_item_sign(%struct.ASN1_ITEM_st*, %struct.X509_algor_st*, %struct.X509_algor_st*, %struct.asn1_string_st* nocapture, i8*, %struct.evp_pkey_st*, %struct.env_md_st*) local_unnamed_addr #0 {
  %8 = alloca %struct.env_md_ctx_st, align 8
  %9 = bitcast %struct.env_md_ctx_st* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %9) #3
  %10 = bitcast %struct.env_md_ctx_st* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %10, i8 -86, i64 32, i1 false)
  call void @EVP_MD_CTX_init(%struct.env_md_ctx_st* nonnull %8) #3
  %11 = call i32 @EVP_DigestSignInit(%struct.env_md_ctx_st* nonnull %8, %struct.evp_pkey_ctx_st** null, %struct.env_md_st* %6, %struct.engine_st* null, %struct.evp_pkey_st* %5) #3
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %13, label %15

13:                                               ; preds = %7
  %14 = call i32 @EVP_MD_CTX_cleanup(%struct.env_md_ctx_st* nonnull %8) #3
  br label %17

15:                                               ; preds = %7
  %16 = call i32 @ASN1_item_sign_ctx(%struct.ASN1_ITEM_st* %0, %struct.X509_algor_st* %1, %struct.X509_algor_st* %2, %struct.asn1_string_st* %3, i8* %4, %struct.env_md_ctx_st* nonnull %8)
  br label %17

17:                                               ; preds = %15, %13
  %18 = phi i32 [ %16, %15 ], [ 0, %13 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %9) #3
  ret i32 %18
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare void @EVP_MD_CTX_init(%struct.env_md_ctx_st*) local_unnamed_addr #2

declare i32 @EVP_DigestSignInit(%struct.env_md_ctx_st*, %struct.evp_pkey_ctx_st**, %struct.env_md_st*, %struct.engine_st*, %struct.evp_pkey_st*) local_unnamed_addr #2

declare i32 @EVP_MD_CTX_cleanup(%struct.env_md_ctx_st*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @ASN1_item_sign_ctx(%struct.ASN1_ITEM_st*, %struct.X509_algor_st*, %struct.X509_algor_st*, %struct.asn1_string_st* nocapture, i8*, %struct.env_md_ctx_st*) local_unnamed_addr #0 {
  %7 = alloca i8*, align 8
  %8 = alloca i64, align 8
  %9 = bitcast i8** %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9) #3
  store i8* null, i8** %7, align 8
  %10 = bitcast i64* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10) #3
  store i64 0, i64* %8, align 8
  %11 = getelementptr inbounds %struct.env_md_ctx_st, %struct.env_md_ctx_st* %5, i64 0, i32 2
  %12 = load %struct.evp_pkey_ctx_st*, %struct.evp_pkey_ctx_st** %11, align 8
  %13 = tail call %struct.evp_pkey_st* @EVP_PKEY_CTX_get0_pkey(%struct.evp_pkey_ctx_st* %12) #3
  %14 = icmp eq %struct.X509_algor_st* %1, null
  br i1 %14, label %18, label %15

15:                                               ; preds = %6
  %16 = tail call i32 @x509_digest_sign_algorithm(%struct.env_md_ctx_st* %5, %struct.X509_algor_st* nonnull %1) #3
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %53, label %18

18:                                               ; preds = %15, %6
  %19 = icmp eq %struct.X509_algor_st* %2, null
  br i1 %19, label %23, label %20

20:                                               ; preds = %18
  %21 = tail call i32 @x509_digest_sign_algorithm(%struct.env_md_ctx_st* %5, %struct.X509_algor_st* nonnull %2) #3
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %53, label %23

23:                                               ; preds = %20, %18
  %24 = bitcast i8* %4 to %struct.ASN1_VALUE_st*
  %25 = call i32 @ASN1_item_i2d(%struct.ASN1_VALUE_st* %24, i8** nonnull %7, %struct.ASN1_ITEM_st* %0) #3
  %26 = call i32 @EVP_PKEY_size(%struct.evp_pkey_st* %13) #3
  %27 = sext i32 %26 to i64
  store i64 %27, i64* %8, align 8
  %28 = zext i32 %26 to i64
  %29 = call i8* @OPENSSL_malloc(i64 %28) #3
  %30 = load i8*, i8** %7, align 8
  %31 = icmp eq i8* %30, null
  %32 = icmp eq i8* %29, null
  %33 = or i1 %32, %31
  br i1 %33, label %34, label %35

34:                                               ; preds = %23
  store i64 0, i64* %8, align 8
  call void @ERR_put_error(i32 11, i32 0, i32 65, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str, i64 0, i64 0), i32 103) #3
  br label %53

35:                                               ; preds = %23
  %36 = sext i32 %25 to i64
  %37 = call i32 @EVP_DigestSign(%struct.env_md_ctx_st* %5, i8* nonnull %29, i64* nonnull %8, i8* nonnull %30, i64 %36) #3
  %38 = icmp eq i32 %37, 0
  br i1 %38, label %39, label %40

39:                                               ; preds = %35
  store i64 0, i64* %8, align 8
  call void @ERR_put_error(i32 11, i32 0, i32 6, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str, i64 0, i64 0), i32 109) #3
  br label %53

40:                                               ; preds = %35
  %41 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %3, i64 0, i32 2
  %42 = load i8*, i8** %41, align 8
  %43 = icmp eq i8* %42, null
  br i1 %43, label %45, label %44

44:                                               ; preds = %40
  call void @OPENSSL_free(i8* nonnull %42) #3
  br label %45

45:                                               ; preds = %40, %44
  store i8* %29, i8** %41, align 8
  %46 = load i64, i64* %8, align 8
  %47 = trunc i64 %46 to i32
  %48 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %3, i64 0, i32 0
  store i32 %47, i32* %48, align 8
  %49 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %3, i64 0, i32 3
  %50 = load i64, i64* %49, align 8
  %51 = and i64 %50, -16
  %52 = or i64 %51, 8
  store i64 %52, i64* %49, align 8
  br label %53

53:                                               ; preds = %15, %20, %45, %39, %34
  %54 = phi i8* [ %29, %34 ], [ null, %45 ], [ %29, %39 ], [ null, %20 ], [ null, %15 ]
  %55 = call i32 @EVP_MD_CTX_cleanup(%struct.env_md_ctx_st* %5) #3
  %56 = load i8*, i8** %7, align 8
  call void @OPENSSL_free(i8* %56) #3
  call void @OPENSSL_free(i8* %54) #3
  %57 = load i64, i64* %8, align 8
  %58 = trunc i64 %57 to i32
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10) #3
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9) #3
  ret i32 %58
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare %struct.evp_pkey_st* @EVP_PKEY_CTX_get0_pkey(%struct.evp_pkey_ctx_st*) local_unnamed_addr #2

declare i32 @x509_digest_sign_algorithm(%struct.env_md_ctx_st*, %struct.X509_algor_st*) local_unnamed_addr #2

declare i32 @ASN1_item_i2d(%struct.ASN1_VALUE_st*, i8**, %struct.ASN1_ITEM_st*) local_unnamed_addr #2

declare i32 @EVP_PKEY_size(%struct.evp_pkey_st*) local_unnamed_addr #2

declare i8* @OPENSSL_malloc(i64) local_unnamed_addr #2

declare void @ERR_put_error(i32, i32, i32, i8*, i32) local_unnamed_addr #2

declare i32 @EVP_DigestSign(%struct.env_md_ctx_st*, i8*, i64*, i8*, i64) local_unnamed_addr #2

declare void @OPENSSL_free(i8*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
