; ModuleID = '../../v8/src/base/sanitizer/lsan-page-allocator.cc'
source_filename = "../../v8/src/base/sanitizer/lsan-page-allocator.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.v8::base::LsanPageAllocator" = type { %"class.v8::PageAllocator", %"class.v8::PageAllocator"*, i64, i64 }
%"class.v8::PageAllocator" = type { i32 (...)** }
%"class.v8::PageAllocator::SharedMemory" = type { i32 (...)** }

$_ZN2v813PageAllocatorD2Ev = comdat any

$_ZN2v84base17LsanPageAllocatorD0Ev = comdat any

$_ZN2v84base17LsanPageAllocator16AllocatePageSizeEv = comdat any

$_ZN2v84base17LsanPageAllocator14CommitPageSizeEv = comdat any

$_ZN2v84base17LsanPageAllocator17SetRandomMmapSeedEl = comdat any

$_ZN2v84base17LsanPageAllocator17GetRandomMmapAddrEv = comdat any

$_ZN2v84base17LsanPageAllocator14SetPermissionsEPvmNS_13PageAllocator10PermissionE = comdat any

$_ZN2v813PageAllocator18DiscardSystemPagesEPvm = comdat any

$_ZN2v813PageAllocator29ReserveForSharedMemoryMappingEPvm = comdat any

@_ZTVN2v84base17LsanPageAllocatorE = hidden unnamed_addr constant { [16 x i8*] } { [16 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.v8::PageAllocator"*)* @_ZN2v813PageAllocatorD2Ev to i8*), i8* bitcast (void (%"class.v8::base::LsanPageAllocator"*)* @_ZN2v84base17LsanPageAllocatorD0Ev to i8*), i8* bitcast (i64 (%"class.v8::base::LsanPageAllocator"*)* @_ZN2v84base17LsanPageAllocator16AllocatePageSizeEv to i8*), i8* bitcast (i64 (%"class.v8::base::LsanPageAllocator"*)* @_ZN2v84base17LsanPageAllocator14CommitPageSizeEv to i8*), i8* bitcast (void (%"class.v8::base::LsanPageAllocator"*, i64)* @_ZN2v84base17LsanPageAllocator17SetRandomMmapSeedEl to i8*), i8* bitcast (i8* (%"class.v8::base::LsanPageAllocator"*)* @_ZN2v84base17LsanPageAllocator17GetRandomMmapAddrEv to i8*), i8* bitcast (i8* (%"class.v8::base::LsanPageAllocator"*, i8*, i64, i64, i32)* @_ZN2v84base17LsanPageAllocator13AllocatePagesEPvmmNS_13PageAllocator10PermissionE to i8*), i8* bitcast (i1 (%"class.v8::base::LsanPageAllocator"*, i8*, i64)* @_ZN2v84base17LsanPageAllocator9FreePagesEPvm to i8*), i8* bitcast (i1 (%"class.v8::base::LsanPageAllocator"*, i8*, i64, i64)* @_ZN2v84base17LsanPageAllocator12ReleasePagesEPvmm to i8*), i8* bitcast (i1 (%"class.v8::base::LsanPageAllocator"*, i8*, i64, i32)* @_ZN2v84base17LsanPageAllocator14SetPermissionsEPvmNS_13PageAllocator10PermissionE to i8*), i8* bitcast (i1 (%"class.v8::PageAllocator"*, i8*, i64)* @_ZN2v813PageAllocator18DiscardSystemPagesEPvm to i8*), i8* bitcast (i1 (%"class.v8::PageAllocator"*, i8*, i64)* @_ZN2v813PageAllocator29ReserveForSharedMemoryMappingEPvm to i8*), i8* bitcast (%"class.v8::PageAllocator::SharedMemory"* (%"class.v8::base::LsanPageAllocator"*, i64, i8*)* @_ZN2v84base17LsanPageAllocator19AllocateSharedPagesEmPKv to i8*), i8* bitcast (i1 (%"class.v8::base::LsanPageAllocator"*)* @_ZN2v84base17LsanPageAllocator22CanAllocateSharedPagesEv to i8*)] }, align 8

@_ZN2v84base17LsanPageAllocatorC1EPNS_13PageAllocatorE = hidden unnamed_addr alias void (%"class.v8::base::LsanPageAllocator"*, %"class.v8::PageAllocator"*), void (%"class.v8::base::LsanPageAllocator"*, %"class.v8::PageAllocator"*)* @_ZN2v84base17LsanPageAllocatorC2EPNS_13PageAllocatorE

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v84base17LsanPageAllocatorC2EPNS_13PageAllocatorE(%"class.v8::base::LsanPageAllocator"* nocapture, %"class.v8::PageAllocator"*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.v8::base::LsanPageAllocator", %"class.v8::base::LsanPageAllocator"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [16 x i8*] }, { [16 x i8*] }* @_ZTVN2v84base17LsanPageAllocatorE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %4 = getelementptr inbounds %"class.v8::base::LsanPageAllocator", %"class.v8::base::LsanPageAllocator"* %0, i64 0, i32 1
  store %"class.v8::PageAllocator"* %1, %"class.v8::PageAllocator"** %4, align 8
  %5 = getelementptr inbounds %"class.v8::base::LsanPageAllocator", %"class.v8::base::LsanPageAllocator"* %0, i64 0, i32 2
  %6 = bitcast %"class.v8::PageAllocator"* %1 to i64 (%"class.v8::PageAllocator"*)***
  %7 = load i64 (%"class.v8::PageAllocator"*)**, i64 (%"class.v8::PageAllocator"*)*** %6, align 8
  %8 = getelementptr inbounds i64 (%"class.v8::PageAllocator"*)*, i64 (%"class.v8::PageAllocator"*)** %7, i64 2
  %9 = load i64 (%"class.v8::PageAllocator"*)*, i64 (%"class.v8::PageAllocator"*)** %8, align 8
  %10 = tail call i64 %9(%"class.v8::PageAllocator"* %1) #2
  store i64 %10, i64* %5, align 8
  %11 = getelementptr inbounds %"class.v8::base::LsanPageAllocator", %"class.v8::base::LsanPageAllocator"* %0, i64 0, i32 3
  %12 = load %"class.v8::PageAllocator"*, %"class.v8::PageAllocator"** %4, align 8
  %13 = bitcast %"class.v8::PageAllocator"* %12 to i64 (%"class.v8::PageAllocator"*)***
  %14 = load i64 (%"class.v8::PageAllocator"*)**, i64 (%"class.v8::PageAllocator"*)*** %13, align 8
  %15 = getelementptr inbounds i64 (%"class.v8::PageAllocator"*)*, i64 (%"class.v8::PageAllocator"*)** %14, i64 3
  %16 = load i64 (%"class.v8::PageAllocator"*)*, i64 (%"class.v8::PageAllocator"*)** %15, align 8
  %17 = tail call i64 %16(%"class.v8::PageAllocator"* %12) #2
  store i64 %17, i64* %11, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i8* @_ZN2v84base17LsanPageAllocator13AllocatePagesEPvmmNS_13PageAllocator10PermissionE(%"class.v8::base::LsanPageAllocator"* nocapture readonly, i8*, i64, i64, i32) unnamed_addr #0 align 2 {
  %6 = getelementptr inbounds %"class.v8::base::LsanPageAllocator", %"class.v8::base::LsanPageAllocator"* %0, i64 0, i32 1
  %7 = load %"class.v8::PageAllocator"*, %"class.v8::PageAllocator"** %6, align 8
  %8 = bitcast %"class.v8::PageAllocator"* %7 to i8* (%"class.v8::PageAllocator"*, i8*, i64, i64, i32)***
  %9 = load i8* (%"class.v8::PageAllocator"*, i8*, i64, i64, i32)**, i8* (%"class.v8::PageAllocator"*, i8*, i64, i64, i32)*** %8, align 8
  %10 = getelementptr inbounds i8* (%"class.v8::PageAllocator"*, i8*, i64, i64, i32)*, i8* (%"class.v8::PageAllocator"*, i8*, i64, i64, i32)** %9, i64 6
  %11 = load i8* (%"class.v8::PageAllocator"*, i8*, i64, i64, i32)*, i8* (%"class.v8::PageAllocator"*, i8*, i64, i64, i32)** %10, align 8
  %12 = tail call i8* %11(%"class.v8::PageAllocator"* %7, i8* %1, i64 %2, i64 %3, i32 %4) #2
  ret i8* %12
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.v8::PageAllocator::SharedMemory"* @_ZN2v84base17LsanPageAllocator19AllocateSharedPagesEmPKv(%"class.v8::base::LsanPageAllocator"* nocapture readonly, i64, i8*) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.v8::base::LsanPageAllocator", %"class.v8::base::LsanPageAllocator"* %0, i64 0, i32 1
  %5 = load %"class.v8::PageAllocator"*, %"class.v8::PageAllocator"** %4, align 8
  %6 = bitcast %"class.v8::PageAllocator"* %5 to %"class.v8::PageAllocator::SharedMemory"* (%"class.v8::PageAllocator"*, i64, i8*)***
  %7 = load %"class.v8::PageAllocator::SharedMemory"* (%"class.v8::PageAllocator"*, i64, i8*)**, %"class.v8::PageAllocator::SharedMemory"* (%"class.v8::PageAllocator"*, i64, i8*)*** %6, align 8
  %8 = getelementptr inbounds %"class.v8::PageAllocator::SharedMemory"* (%"class.v8::PageAllocator"*, i64, i8*)*, %"class.v8::PageAllocator::SharedMemory"* (%"class.v8::PageAllocator"*, i64, i8*)** %7, i64 12
  %9 = load %"class.v8::PageAllocator::SharedMemory"* (%"class.v8::PageAllocator"*, i64, i8*)*, %"class.v8::PageAllocator::SharedMemory"* (%"class.v8::PageAllocator"*, i64, i8*)** %8, align 8
  %10 = tail call %"class.v8::PageAllocator::SharedMemory"* %9(%"class.v8::PageAllocator"* %5, i64 %1, i8* %2) #2
  ret %"class.v8::PageAllocator::SharedMemory"* %10
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2v84base17LsanPageAllocator22CanAllocateSharedPagesEv(%"class.v8::base::LsanPageAllocator"* nocapture readonly) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.v8::base::LsanPageAllocator", %"class.v8::base::LsanPageAllocator"* %0, i64 0, i32 1
  %3 = load %"class.v8::PageAllocator"*, %"class.v8::PageAllocator"** %2, align 8
  %4 = bitcast %"class.v8::PageAllocator"* %3 to i1 (%"class.v8::PageAllocator"*)***
  %5 = load i1 (%"class.v8::PageAllocator"*)**, i1 (%"class.v8::PageAllocator"*)*** %4, align 8
  %6 = getelementptr inbounds i1 (%"class.v8::PageAllocator"*)*, i1 (%"class.v8::PageAllocator"*)** %5, i64 13
  %7 = load i1 (%"class.v8::PageAllocator"*)*, i1 (%"class.v8::PageAllocator"*)** %6, align 8
  %8 = tail call zeroext i1 %7(%"class.v8::PageAllocator"* %3) #2
  ret i1 %8
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2v84base17LsanPageAllocator9FreePagesEPvm(%"class.v8::base::LsanPageAllocator"* nocapture readonly, i8*, i64) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.v8::base::LsanPageAllocator", %"class.v8::base::LsanPageAllocator"* %0, i64 0, i32 1
  %5 = load %"class.v8::PageAllocator"*, %"class.v8::PageAllocator"** %4, align 8
  %6 = bitcast %"class.v8::PageAllocator"* %5 to i1 (%"class.v8::PageAllocator"*, i8*, i64)***
  %7 = load i1 (%"class.v8::PageAllocator"*, i8*, i64)**, i1 (%"class.v8::PageAllocator"*, i8*, i64)*** %6, align 8
  %8 = getelementptr inbounds i1 (%"class.v8::PageAllocator"*, i8*, i64)*, i1 (%"class.v8::PageAllocator"*, i8*, i64)** %7, i64 7
  %9 = load i1 (%"class.v8::PageAllocator"*, i8*, i64)*, i1 (%"class.v8::PageAllocator"*, i8*, i64)** %8, align 8
  %10 = tail call zeroext i1 %9(%"class.v8::PageAllocator"* %5, i8* %1, i64 %2) #2
  ret i1 %10
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2v84base17LsanPageAllocator12ReleasePagesEPvmm(%"class.v8::base::LsanPageAllocator"* nocapture readonly, i8*, i64, i64) unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %"class.v8::base::LsanPageAllocator", %"class.v8::base::LsanPageAllocator"* %0, i64 0, i32 1
  %6 = load %"class.v8::PageAllocator"*, %"class.v8::PageAllocator"** %5, align 8
  %7 = bitcast %"class.v8::PageAllocator"* %6 to i1 (%"class.v8::PageAllocator"*, i8*, i64, i64)***
  %8 = load i1 (%"class.v8::PageAllocator"*, i8*, i64, i64)**, i1 (%"class.v8::PageAllocator"*, i8*, i64, i64)*** %7, align 8
  %9 = getelementptr inbounds i1 (%"class.v8::PageAllocator"*, i8*, i64, i64)*, i1 (%"class.v8::PageAllocator"*, i8*, i64, i64)** %8, i64 8
  %10 = load i1 (%"class.v8::PageAllocator"*, i8*, i64, i64)*, i1 (%"class.v8::PageAllocator"*, i8*, i64, i64)** %9, align 8
  %11 = tail call zeroext i1 %10(%"class.v8::PageAllocator"* %6, i8* %1, i64 %2, i64 %3) #2
  ret i1 %11
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v813PageAllocatorD2Ev(%"class.v8::PageAllocator"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v84base17LsanPageAllocatorD0Ev(%"class.v8::base::LsanPageAllocator"*) unnamed_addr #0 comdat align 2 {
  %2 = bitcast %"class.v8::base::LsanPageAllocator"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN2v84base17LsanPageAllocator16AllocatePageSizeEv(%"class.v8::base::LsanPageAllocator"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.v8::base::LsanPageAllocator", %"class.v8::base::LsanPageAllocator"* %0, i64 0, i32 2
  %3 = load i64, i64* %2, align 8
  ret i64 %3
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN2v84base17LsanPageAllocator14CommitPageSizeEv(%"class.v8::base::LsanPageAllocator"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.v8::base::LsanPageAllocator", %"class.v8::base::LsanPageAllocator"* %0, i64 0, i32 3
  %3 = load i64, i64* %2, align 8
  ret i64 %3
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v84base17LsanPageAllocator17SetRandomMmapSeedEl(%"class.v8::base::LsanPageAllocator"*, i64) unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.v8::base::LsanPageAllocator", %"class.v8::base::LsanPageAllocator"* %0, i64 0, i32 1
  %4 = load %"class.v8::PageAllocator"*, %"class.v8::PageAllocator"** %3, align 8
  %5 = bitcast %"class.v8::PageAllocator"* %4 to void (%"class.v8::PageAllocator"*, i64)***
  %6 = load void (%"class.v8::PageAllocator"*, i64)**, void (%"class.v8::PageAllocator"*, i64)*** %5, align 8
  %7 = getelementptr inbounds void (%"class.v8::PageAllocator"*, i64)*, void (%"class.v8::PageAllocator"*, i64)** %6, i64 4
  %8 = load void (%"class.v8::PageAllocator"*, i64)*, void (%"class.v8::PageAllocator"*, i64)** %7, align 8
  tail call void %8(%"class.v8::PageAllocator"* %4, i64 %1) #2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZN2v84base17LsanPageAllocator17GetRandomMmapAddrEv(%"class.v8::base::LsanPageAllocator"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.v8::base::LsanPageAllocator", %"class.v8::base::LsanPageAllocator"* %0, i64 0, i32 1
  %3 = load %"class.v8::PageAllocator"*, %"class.v8::PageAllocator"** %2, align 8
  %4 = bitcast %"class.v8::PageAllocator"* %3 to i8* (%"class.v8::PageAllocator"*)***
  %5 = load i8* (%"class.v8::PageAllocator"*)**, i8* (%"class.v8::PageAllocator"*)*** %4, align 8
  %6 = getelementptr inbounds i8* (%"class.v8::PageAllocator"*)*, i8* (%"class.v8::PageAllocator"*)** %5, i64 5
  %7 = load i8* (%"class.v8::PageAllocator"*)*, i8* (%"class.v8::PageAllocator"*)** %6, align 8
  %8 = tail call i8* %7(%"class.v8::PageAllocator"* %3) #2
  ret i8* %8
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2v84base17LsanPageAllocator14SetPermissionsEPvmNS_13PageAllocator10PermissionE(%"class.v8::base::LsanPageAllocator"*, i8*, i64, i32) unnamed_addr #0 comdat align 2 {
  %5 = getelementptr inbounds %"class.v8::base::LsanPageAllocator", %"class.v8::base::LsanPageAllocator"* %0, i64 0, i32 1
  %6 = load %"class.v8::PageAllocator"*, %"class.v8::PageAllocator"** %5, align 8
  %7 = bitcast %"class.v8::PageAllocator"* %6 to i1 (%"class.v8::PageAllocator"*, i8*, i64, i32)***
  %8 = load i1 (%"class.v8::PageAllocator"*, i8*, i64, i32)**, i1 (%"class.v8::PageAllocator"*, i8*, i64, i32)*** %7, align 8
  %9 = getelementptr inbounds i1 (%"class.v8::PageAllocator"*, i8*, i64, i32)*, i1 (%"class.v8::PageAllocator"*, i8*, i64, i32)** %8, i64 9
  %10 = load i1 (%"class.v8::PageAllocator"*, i8*, i64, i32)*, i1 (%"class.v8::PageAllocator"*, i8*, i64, i32)** %9, align 8
  %11 = tail call zeroext i1 %10(%"class.v8::PageAllocator"* %6, i8* %1, i64 %2, i32 %3) #2
  ret i1 %11
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2v813PageAllocator18DiscardSystemPagesEPvm(%"class.v8::PageAllocator"*, i8*, i64) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2v813PageAllocator29ReserveForSharedMemoryMappingEPvm(%"class.v8::PageAllocator"*, i8*, i64) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }
attributes #3 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
