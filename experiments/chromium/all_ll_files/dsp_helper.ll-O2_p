; ModuleID = '../../third_party/webrtc/modules/audio_coding/neteq/dsp_helper.cc'
source_filename = "../../third_party/webrtc/modules/audio_coding/neteq/dsp_helper.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.webrtc::AudioVector" = type { i32 (...)**, %"class.std::__1::unique_ptr", i64, i64, i64 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i16* }
%"class.webrtc::AudioMultiVector" = type { i32 (...)**, %"class.std::__1::vector", i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.webrtc::AudioVector"**, %"class.webrtc::AudioVector"**, %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %"class.webrtc::AudioVector"** }

@_ZN6webrtc9DspHelper21kParabolaCoefficientsE = hidden local_unnamed_addr constant [17 x [3 x i16]] [[3 x i16] [i16 120, i16 32, i16 64], [3 x i16] [i16 140, i16 44, i16 75], [3 x i16] [i16 150, i16 50, i16 80], [3 x i16] [i16 160, i16 57, i16 85], [3 x i16] [i16 180, i16 72, i16 96], [3 x i16] [i16 200, i16 89, i16 107], [3 x i16] [i16 210, i16 98, i16 112], [3 x i16] [i16 220, i16 108, i16 117], [3 x i16] [i16 240, i16 128, i16 128], [3 x i16] [i16 260, i16 150, i16 139], [3 x i16] [i16 270, i16 162, i16 144], [3 x i16] [i16 280, i16 174, i16 149], [3 x i16] [i16 300, i16 200, i16 160], [3 x i16] [i16 320, i16 228, i16 171], [3 x i16] [i16 330, i16 242, i16 176], [3 x i16] [i16 340, i16 257, i16 181], [3 x i16] [i16 360, i16 288, i16 192]], align 16
@_ZN6webrtc9DspHelper18kDownsample8kHzTblE = hidden constant [3 x i16] [i16 1229, i16 1638, i16 1229], align 2
@_ZN6webrtc9DspHelper19kDownsample16kHzTblE = hidden constant [5 x i16] [i16 614, i16 819, i16 1229, i16 819, i16 614], align 2
@_ZN6webrtc9DspHelper19kDownsample32kHzTblE = hidden constant [7 x i16] [i16 584, i16 512, i16 625, i16 667, i16 625, i16 512, i16 584], align 2
@_ZN6webrtc9DspHelper19kDownsample48kHzTblE = hidden constant [7 x i16] [i16 1019, i16 390, i16 427, i16 440, i16 427, i16 390, i16 1019], align 2
@WebRtcSpl_DownsampleFast = external local_unnamed_addr constant i32 (i16*, i64, i16*, i64, i16*, i64, i32, i64)*, align 8

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN6webrtc9DspHelper10RampSignalEPKsmiiPs(i16* nocapture readonly, i64, i32, i32, i16* nocapture) local_unnamed_addr #0 align 2 {
  %6 = icmp eq i64 %1, 0
  br i1 %6, label %35, label %7

7:                                                ; preds = %5
  %8 = shl i32 %2, 6
  %9 = or i32 %8, 32
  %10 = and i64 %1, 1
  %11 = icmp eq i64 %1, 1
  br i1 %11, label %14, label %12

12:                                               ; preds = %7
  %13 = sub i64 %1, %10
  br label %37

14:                                               ; preds = %37, %7
  %15 = phi i32 [ undef, %7 ], [ %70, %37 ]
  %16 = phi i64 [ 0, %7 ], [ %71, %37 ]
  %17 = phi i32 [ %2, %7 ], [ %70, %37 ]
  %18 = phi i32 [ %9, %7 ], [ %67, %37 ]
  %19 = icmp eq i64 %10, 0
  br i1 %19, label %35, label %20

20:                                               ; preds = %14
  %21 = getelementptr inbounds i16, i16* %0, i64 %16
  %22 = load i16, i16* %21, align 2
  %23 = sext i16 %22 to i32
  %24 = mul nsw i32 %17, %23
  %25 = add nsw i32 %24, 8192
  %26 = lshr i32 %25, 14
  %27 = trunc i32 %26 to i16
  %28 = getelementptr inbounds i16, i16* %4, i64 %16
  store i16 %27, i16* %28, align 2
  %29 = add nsw i32 %18, %3
  %30 = icmp sgt i32 %29, 0
  %31 = select i1 %30, i32 %29, i32 0
  %32 = lshr i32 %31, 6
  %33 = icmp ult i32 %32, 16384
  %34 = select i1 %33, i32 %32, i32 16384
  br label %35

35:                                               ; preds = %20, %14, %5
  %36 = phi i32 [ %2, %5 ], [ %15, %14 ], [ %34, %20 ]
  ret i32 %36

37:                                               ; preds = %37, %12
  %38 = phi i64 [ 0, %12 ], [ %71, %37 ]
  %39 = phi i32 [ %2, %12 ], [ %70, %37 ]
  %40 = phi i32 [ %9, %12 ], [ %67, %37 ]
  %41 = phi i64 [ %13, %12 ], [ %72, %37 ]
  %42 = getelementptr inbounds i16, i16* %0, i64 %38
  %43 = load i16, i16* %42, align 2
  %44 = sext i16 %43 to i32
  %45 = mul nsw i32 %39, %44
  %46 = add nsw i32 %45, 8192
  %47 = lshr i32 %46, 14
  %48 = trunc i32 %47 to i16
  %49 = getelementptr inbounds i16, i16* %4, i64 %38
  store i16 %48, i16* %49, align 2
  %50 = add nsw i32 %40, %3
  %51 = icmp sgt i32 %50, 0
  %52 = select i1 %51, i32 %50, i32 0
  %53 = lshr i32 %52, 6
  %54 = icmp ult i32 %53, 16384
  %55 = select i1 %54, i32 %53, i32 16384
  %56 = or i64 %38, 1
  %57 = getelementptr inbounds i16, i16* %0, i64 %56
  %58 = load i16, i16* %57, align 2
  %59 = sext i16 %58 to i32
  %60 = mul nsw i32 %55, %59
  %61 = add nsw i32 %60, 8192
  %62 = lshr i32 %61, 14
  %63 = trunc i32 %62 to i16
  %64 = getelementptr inbounds i16, i16* %4, i64 %56
  store i16 %63, i16* %64, align 2
  %65 = add nsw i32 %52, %3
  %66 = icmp sgt i32 %65, 0
  %67 = select i1 %66, i32 %65, i32 0
  %68 = lshr i32 %67, 6
  %69 = icmp ult i32 %68, 16384
  %70 = select i1 %69, i32 %68, i32 16384
  %71 = add nuw i64 %38, 2
  %72 = add i64 %41, -2
  %73 = icmp eq i64 %72, 0
  br i1 %73, label %14, label %37
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i32 @_ZN6webrtc9DspHelper10RampSignalEPsmii(i16* nocapture, i64, i32, i32) local_unnamed_addr #2 align 2 {
  %5 = icmp eq i64 %1, 0
  br i1 %5, label %68, label %6

6:                                                ; preds = %4
  %7 = shl i32 %2, 6
  %8 = or i32 %7, 32
  %9 = and i64 %1, 1
  %10 = icmp eq i64 %1, 1
  br i1 %10, label %48, label %11

11:                                               ; preds = %6
  %12 = sub i64 %1, %9
  br label %13

13:                                               ; preds = %13, %11
  %14 = phi i64 [ 0, %11 ], [ %45, %13 ]
  %15 = phi i32 [ %2, %11 ], [ %44, %13 ]
  %16 = phi i32 [ %8, %11 ], [ %41, %13 ]
  %17 = phi i64 [ %12, %11 ], [ %46, %13 ]
  %18 = getelementptr inbounds i16, i16* %0, i64 %14
  %19 = load i16, i16* %18, align 2
  %20 = sext i16 %19 to i32
  %21 = mul nsw i32 %15, %20
  %22 = add nsw i32 %21, 8192
  %23 = lshr i32 %22, 14
  %24 = trunc i32 %23 to i16
  store i16 %24, i16* %18, align 2
  %25 = add nsw i32 %16, %3
  %26 = icmp sgt i32 %25, 0
  %27 = select i1 %26, i32 %25, i32 0
  %28 = lshr i32 %27, 6
  %29 = icmp ult i32 %28, 16384
  %30 = select i1 %29, i32 %28, i32 16384
  %31 = or i64 %14, 1
  %32 = getelementptr inbounds i16, i16* %0, i64 %31
  %33 = load i16, i16* %32, align 2
  %34 = sext i16 %33 to i32
  %35 = mul nsw i32 %30, %34
  %36 = add nsw i32 %35, 8192
  %37 = lshr i32 %36, 14
  %38 = trunc i32 %37 to i16
  store i16 %38, i16* %32, align 2
  %39 = add nsw i32 %27, %3
  %40 = icmp sgt i32 %39, 0
  %41 = select i1 %40, i32 %39, i32 0
  %42 = lshr i32 %41, 6
  %43 = icmp ult i32 %42, 16384
  %44 = select i1 %43, i32 %42, i32 16384
  %45 = add nuw i64 %14, 2
  %46 = add i64 %17, -2
  %47 = icmp eq i64 %46, 0
  br i1 %47, label %48, label %13

48:                                               ; preds = %13, %6
  %49 = phi i32 [ undef, %6 ], [ %44, %13 ]
  %50 = phi i64 [ 0, %6 ], [ %45, %13 ]
  %51 = phi i32 [ %2, %6 ], [ %44, %13 ]
  %52 = phi i32 [ %8, %6 ], [ %41, %13 ]
  %53 = icmp eq i64 %9, 0
  br i1 %53, label %68, label %54

54:                                               ; preds = %48
  %55 = getelementptr inbounds i16, i16* %0, i64 %50
  %56 = load i16, i16* %55, align 2
  %57 = sext i16 %56 to i32
  %58 = mul nsw i32 %51, %57
  %59 = add nsw i32 %58, 8192
  %60 = lshr i32 %59, 14
  %61 = trunc i32 %60 to i16
  store i16 %61, i16* %55, align 2
  %62 = add nsw i32 %52, %3
  %63 = icmp sgt i32 %62, 0
  %64 = select i1 %63, i32 %62, i32 0
  %65 = lshr i32 %64, 6
  %66 = icmp ult i32 %65, 16384
  %67 = select i1 %66, i32 %65, i32 16384
  br label %68

68:                                               ; preds = %54, %48, %4
  %69 = phi i32 [ %2, %4 ], [ %49, %48 ], [ %67, %54 ]
  ret i32 %69
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN6webrtc9DspHelper10RampSignalEPNS_11AudioVectorEmmii(%"class.webrtc::AudioVector"* nocapture readonly, i64, i64, i32, i32) local_unnamed_addr #0 align 2 {
  %6 = add i64 %2, %1
  %7 = icmp ugt i64 %6, %1
  br i1 %7, label %8, label %14

8:                                                ; preds = %5
  %9 = shl i32 %3, 6
  %10 = or i32 %9, 32
  %11 = getelementptr inbounds %"class.webrtc::AudioVector", %"class.webrtc::AudioVector"* %0, i64 0, i32 3
  %12 = getelementptr inbounds %"class.webrtc::AudioVector", %"class.webrtc::AudioVector"* %0, i64 0, i32 2
  %13 = getelementptr inbounds %"class.webrtc::AudioVector", %"class.webrtc::AudioVector"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  br label %16

14:                                               ; preds = %16, %5
  %15 = phi i32 [ %3, %5 ], [ %39, %16 ]
  ret i32 %15

16:                                               ; preds = %16, %8
  %17 = phi i64 [ %1, %8 ], [ %40, %16 ]
  %18 = phi i32 [ %3, %8 ], [ %39, %16 ]
  %19 = phi i32 [ %10, %8 ], [ %36, %16 ]
  %20 = load i64, i64* %11, align 8
  %21 = load i64, i64* %12, align 8
  %22 = add i64 %20, %17
  %23 = icmp ult i64 %22, %21
  %24 = select i1 %23, i64 0, i64 %21
  %25 = sub i64 %22, %24
  %26 = load i16*, i16** %13, align 8
  %27 = getelementptr inbounds i16, i16* %26, i64 %25
  %28 = load i16, i16* %27, align 2
  %29 = sext i16 %28 to i32
  %30 = mul nsw i32 %18, %29
  %31 = add nsw i32 %30, 8192
  %32 = lshr i32 %31, 14
  %33 = trunc i32 %32 to i16
  store i16 %33, i16* %27, align 2
  %34 = add nsw i32 %19, %4
  %35 = icmp sgt i32 %34, 0
  %36 = select i1 %35, i32 %34, i32 0
  %37 = lshr i32 %36, 6
  %38 = icmp ult i32 %37, 16384
  %39 = select i1 %38, i32 %37, i32 16384
  %40 = add nuw i64 %17, 1
  %41 = icmp eq i64 %40, %6
  br i1 %41, label %14, label %16
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN6webrtc9DspHelper10RampSignalEPNS_16AudioMultiVectorEmmii(%"class.webrtc::AudioMultiVector"*, i64, i64, i32, i32) local_unnamed_addr #0 align 2 {
  %6 = add i64 %2, %1
  %7 = bitcast %"class.webrtc::AudioMultiVector"* %0 to i64 (%"class.webrtc::AudioMultiVector"*)***
  %8 = load i64 (%"class.webrtc::AudioMultiVector"*)**, i64 (%"class.webrtc::AudioMultiVector"*)*** %7, align 8
  %9 = getelementptr inbounds i64 (%"class.webrtc::AudioMultiVector"*)*, i64 (%"class.webrtc::AudioMultiVector"*)** %8, i64 15
  %10 = load i64 (%"class.webrtc::AudioMultiVector"*)*, i64 (%"class.webrtc::AudioMultiVector"*)** %9, align 8
  %11 = tail call i64 %10(%"class.webrtc::AudioMultiVector"* %0) #4
  %12 = icmp ugt i64 %6, %11
  br i1 %12, label %64, label %13

13:                                               ; preds = %5
  %14 = load i64 (%"class.webrtc::AudioMultiVector"*)**, i64 (%"class.webrtc::AudioMultiVector"*)*** %7, align 8
  %15 = getelementptr inbounds i64 (%"class.webrtc::AudioMultiVector"*)*, i64 (%"class.webrtc::AudioMultiVector"*)** %14, i64 14
  %16 = load i64 (%"class.webrtc::AudioMultiVector"*)*, i64 (%"class.webrtc::AudioMultiVector"*)** %15, align 8
  %17 = tail call i64 %16(%"class.webrtc::AudioMultiVector"* %0) #4
  %18 = icmp eq i64 %17, 0
  br i1 %18, label %64, label %19

19:                                               ; preds = %13
  %20 = icmp ugt i64 %6, %1
  %21 = shl i32 %3, 6
  %22 = or i32 %21, 32
  br label %23

23:                                               ; preds = %19, %56
  %24 = phi i64 [ 0, %19 ], [ %58, %56 ]
  %25 = tail call dereferenceable(40) %"class.webrtc::AudioVector"* @_ZN6webrtc16AudioMultiVectorixEm(%"class.webrtc::AudioMultiVector"* %0, i64 %24) #4
  br i1 %20, label %26, label %56

26:                                               ; preds = %23
  %27 = getelementptr inbounds %"class.webrtc::AudioVector", %"class.webrtc::AudioVector"* %25, i64 0, i32 3
  %28 = getelementptr inbounds %"class.webrtc::AudioVector", %"class.webrtc::AudioVector"* %25, i64 0, i32 2
  %29 = getelementptr inbounds %"class.webrtc::AudioVector", %"class.webrtc::AudioVector"* %25, i64 0, i32 1, i32 0, i32 0, i32 0
  br label %30

30:                                               ; preds = %30, %26
  %31 = phi i64 [ %1, %26 ], [ %54, %30 ]
  %32 = phi i32 [ %3, %26 ], [ %53, %30 ]
  %33 = phi i32 [ %22, %26 ], [ %50, %30 ]
  %34 = load i64, i64* %27, align 8
  %35 = load i64, i64* %28, align 8
  %36 = add i64 %34, %31
  %37 = icmp ult i64 %36, %35
  %38 = select i1 %37, i64 0, i64 %35
  %39 = sub i64 %36, %38
  %40 = load i16*, i16** %29, align 8
  %41 = getelementptr inbounds i16, i16* %40, i64 %39
  %42 = load i16, i16* %41, align 2
  %43 = sext i16 %42 to i32
  %44 = mul nsw i32 %32, %43
  %45 = add nsw i32 %44, 8192
  %46 = lshr i32 %45, 14
  %47 = trunc i32 %46 to i16
  store i16 %47, i16* %41, align 2
  %48 = add nsw i32 %33, %4
  %49 = icmp sgt i32 %48, 0
  %50 = select i1 %49, i32 %48, i32 0
  %51 = lshr i32 %50, 6
  %52 = icmp ult i32 %51, 16384
  %53 = select i1 %52, i32 %51, i32 16384
  %54 = add nuw i64 %31, 1
  %55 = icmp eq i64 %54, %6
  br i1 %55, label %56, label %30

56:                                               ; preds = %30, %23
  %57 = phi i32 [ %3, %23 ], [ %53, %30 ]
  %58 = add nuw i64 %24, 1
  %59 = load i64 (%"class.webrtc::AudioMultiVector"*)**, i64 (%"class.webrtc::AudioMultiVector"*)*** %7, align 8
  %60 = getelementptr inbounds i64 (%"class.webrtc::AudioMultiVector"*)*, i64 (%"class.webrtc::AudioMultiVector"*)** %59, i64 14
  %61 = load i64 (%"class.webrtc::AudioMultiVector"*)*, i64 (%"class.webrtc::AudioMultiVector"*)** %60, align 8
  %62 = tail call i64 %61(%"class.webrtc::AudioMultiVector"* %0) #4
  %63 = icmp ult i64 %58, %62
  br i1 %63, label %23, label %64

64:                                               ; preds = %56, %13, %5
  %65 = phi i32 [ %3, %5 ], [ 0, %13 ], [ %57, %56 ]
  ret i32 %65
}

declare dereferenceable(40) %"class.webrtc::AudioVector"* @_ZN6webrtc16AudioMultiVectorixEm(%"class.webrtc::AudioMultiVector"*, i64) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc9DspHelper13PeakDetectionEPsmmiPmS1_(i16*, i64, i64, i32, i64* nocapture, i16* nocapture) local_unnamed_addr #0 align 2 {
  %7 = add i64 %2, -1
  %8 = icmp eq i64 %2, 1
  %9 = zext i1 %8 to i64
  %10 = sext i32 %3 to i64
  %11 = shl nsw i64 %10, 1
  br label %13

12:                                               ; preds = %75
  ret void

13:                                               ; preds = %6, %75
  %14 = phi i64 [ 0, %6 ], [ %76, %75 ]
  %15 = phi i64 [ 0, %6 ], [ %32, %75 ]
  %16 = phi i64 [ 0, %6 ], [ %31, %75 ]
  %17 = phi i64 [ %1, %6 ], [ %18, %75 ]
  %18 = add i64 %17, %9
  %19 = add i64 %18, -1
  %20 = tail call i64 @WebRtcSpl_MaxIndexW16(i16* %0, i64 %19) #4
  %21 = getelementptr inbounds i64, i64* %4, i64 %14
  store i64 %20, i64* %21, align 8
  %22 = icmp ne i64 %14, %7
  br i1 %22, label %23, label %30

23:                                               ; preds = %13
  %24 = icmp ugt i64 %20, 2
  %25 = add i64 %20, -2
  %26 = select i1 %24, i64 %25, i64 0
  %27 = add i64 %20, 2
  %28 = icmp ult i64 %27, %19
  %29 = select i1 %28, i64 %27, i64 %19
  br label %30

30:                                               ; preds = %23, %13
  %31 = phi i64 [ %26, %23 ], [ %16, %13 ]
  %32 = phi i64 [ %29, %23 ], [ %15, %13 ]
  %33 = icmp eq i64 %20, 0
  %34 = add i64 %18, -2
  %35 = icmp eq i64 %20, %34
  %36 = or i1 %33, %35
  br i1 %36, label %41, label %37

37:                                               ; preds = %30
  %38 = add i64 %20, -1
  %39 = getelementptr inbounds i16, i16* %0, i64 %38
  %40 = getelementptr inbounds i16, i16* %5, i64 %14
  tail call void @_ZN6webrtc9DspHelper12ParabolicFitEPsiPmS1_(i16* %39, i32 %3, i64* %21, i16* %40)
  br label %68

41:                                               ; preds = %30
  %42 = getelementptr inbounds i16, i16* %0, i64 %20
  %43 = load i16, i16* %42, align 2
  br i1 %35, label %44, label %64

44:                                               ; preds = %41
  %45 = add i64 %20, 1
  %46 = getelementptr inbounds i16, i16* %0, i64 %45
  %47 = load i16, i16* %46, align 2
  %48 = icmp sgt i16 %43, %47
  br i1 %48, label %49, label %53

49:                                               ; preds = %44
  %50 = add i64 %20, -1
  %51 = getelementptr inbounds i16, i16* %0, i64 %50
  %52 = getelementptr inbounds i16, i16* %5, i64 %14
  tail call void @_ZN6webrtc9DspHelper12ParabolicFitEPsiPmS1_(i16* %51, i32 %3, i64* %21, i16* %52)
  br label %68

53:                                               ; preds = %44
  %54 = sext i16 %47 to i32
  %55 = sext i16 %43 to i32
  %56 = add nsw i32 %54, %55
  %57 = lshr i32 %56, 1
  %58 = trunc i32 %57 to i16
  %59 = getelementptr inbounds i16, i16* %5, i64 %14
  store i16 %58, i16* %59, align 2
  %60 = load i64, i64* %21, align 8
  %61 = shl i64 %60, 1
  %62 = or i64 %61, 1
  %63 = mul i64 %62, %10
  store i64 %63, i64* %21, align 8
  br label %68

64:                                               ; preds = %41
  %65 = getelementptr inbounds i16, i16* %5, i64 %14
  store i16 %43, i16* %65, align 2
  %66 = load i64, i64* %21, align 8
  %67 = mul i64 %11, %66
  store i64 %67, i64* %21, align 8
  br label %68

68:                                               ; preds = %64, %53, %49, %37
  br i1 %22, label %69, label %75

69:                                               ; preds = %68
  %70 = getelementptr inbounds i16, i16* %0, i64 %31
  %71 = bitcast i16* %70 to i8*
  %72 = sub i64 %32, %31
  %73 = shl i64 %72, 1
  %74 = add i64 %73, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 2 %71, i8 0, i64 %74, i1 false)
  br label %75

75:                                               ; preds = %68, %69
  %76 = add i64 %14, 1
  %77 = icmp ugt i64 %76, %7
  br i1 %77, label %12, label %13
}

declare i64 @WebRtcSpl_MaxIndexW16(i16*, i64) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc9DspHelper12ParabolicFitEPsiPmS1_(i16* nocapture readonly, i32, i64* nocapture, i16* nocapture) local_unnamed_addr #0 align 2 {
  %5 = alloca [13 x i16], align 16
  %6 = bitcast [13 x i16]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 26, i8* nonnull %6) #4
  %7 = getelementptr inbounds [13 x i16], [13 x i16]* %5, i64 0, i64 0
  %8 = getelementptr inbounds [13 x i16], [13 x i16]* %5, i64 0, i64 1
  %9 = getelementptr inbounds [13 x i16], [13 x i16]* %5, i64 0, i64 2
  %10 = getelementptr inbounds [13 x i16], [13 x i16]* %5, i64 0, i64 9
  %11 = getelementptr inbounds [13 x i16], [13 x i16]* %5, i64 0, i64 10
  %12 = getelementptr inbounds [13 x i16], [13 x i16]* %5, i64 0, i64 11
  %13 = getelementptr inbounds [13 x i16], [13 x i16]* %5, i64 0, i64 12
  %14 = bitcast [13 x i16]* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %14, i8 -86, i64 26, i1 false)
  switch i32 %1, label %19 [
    i32 1, label %15
    i32 2, label %16
  ]

15:                                               ; preds = %4
  store i16 0, i16* %7, align 16
  store i16 8, i16* %8, align 2
  store i16 16, i16* %9, align 4
  br label %24

16:                                               ; preds = %4
  %17 = getelementptr inbounds [13 x i16], [13 x i16]* %5, i64 0, i64 4
  %18 = getelementptr inbounds [13 x i16], [13 x i16]* %5, i64 0, i64 3
  store i16 0, i16* %7, align 16
  store i16 4, i16* %8, align 2
  store i16 8, i16* %9, align 4
  store i16 12, i16* %18, align 2
  store i16 16, i16* %17, align 8
  br label %24

19:                                               ; preds = %4
  %20 = icmp eq i32 %1, 4
  store i16 0, i16* %7, align 16
  %21 = bitcast i16* %8 to <8 x i16>*
  br i1 %20, label %22, label %23

22:                                               ; preds = %19
  store <8 x i16> <i16 2, i16 4, i16 6, i16 8, i16 10, i16 12, i16 14, i16 16>, <8 x i16>* %21, align 2
  br label %24

23:                                               ; preds = %19
  store <8 x i16> <i16 1, i16 3, i16 4, i16 5, i16 7, i16 8, i16 9, i16 11>, <8 x i16>* %21, align 2
  store i16 12, i16* %10, align 2
  store i16 13, i16* %11, align 4
  store i16 15, i16* %12, align 2
  store i16 16, i16* %13, align 8
  br label %24

24:                                               ; preds = %16, %23, %22, %15
  %25 = load i16, i16* %0, align 2
  %26 = sext i16 %25 to i32
  %27 = mul nsw i32 %26, -3
  %28 = getelementptr inbounds i16, i16* %0, i64 1
  %29 = load i16, i16* %28, align 2
  %30 = sext i16 %29 to i32
  %31 = shl nsw i32 %30, 2
  %32 = add nsw i32 %31, %27
  %33 = getelementptr inbounds i16, i16* %0, i64 2
  %34 = load i16, i16* %33, align 2
  %35 = sext i16 %34 to i32
  %36 = sub nsw i32 %32, %35
  %37 = mul nsw i32 %30, -2
  %38 = add nsw i32 %37, %26
  %39 = add nsw i32 %38, %35
  %40 = mul nsw i32 %36, 120
  %41 = sext i32 %1 to i64
  %42 = getelementptr inbounds [13 x i16], [13 x i16]* %5, i64 0, i64 %41
  %43 = load i16, i16* %42, align 2
  %44 = zext i16 %43 to i64
  %45 = getelementptr inbounds [17 x [3 x i16]], [17 x [3 x i16]]* @_ZN6webrtc9DspHelper21kParabolaCoefficientsE, i64 0, i64 %44, i64 0
  %46 = load i16, i16* %45, align 2
  %47 = sext i16 %46 to i32
  %48 = add nsw i32 %1, -1
  %49 = sext i32 %48 to i64
  %50 = getelementptr inbounds [13 x i16], [13 x i16]* %5, i64 0, i64 %49
  %51 = load i16, i16* %50, align 2
  %52 = zext i16 %51 to i64
  %53 = getelementptr inbounds [17 x [3 x i16]], [17 x [3 x i16]]* @_ZN6webrtc9DspHelper21kParabolaCoefficientsE, i64 0, i64 %52, i64 0
  %54 = load i16, i16* %53, align 2
  %55 = sext i16 %54 to i32
  %56 = sub i16 %46, %54
  %57 = add nsw i32 %55, %47
  %58 = sdiv i32 %57, 2
  %59 = sub nsw i32 0, %39
  %60 = mul nsw i32 %58, %59
  %61 = icmp slt i32 %40, %60
  br i1 %61, label %62, label %103

62:                                               ; preds = %24
  %63 = shl nsw i64 %41, 1
  %64 = icmp eq i32 %1, 1
  br i1 %64, label %74, label %65

65:                                               ; preds = %62
  %66 = trunc i32 %58 to i16
  br label %67

67:                                               ; preds = %65, %100
  %68 = phi i16 [ %66, %65 ], [ %70, %100 ]
  %69 = phi i32 [ 1, %65 ], [ %101, %100 ]
  %70 = sub i16 %68, %56
  %71 = sext i16 %70 to i32
  %72 = mul nsw i32 %71, %59
  %73 = icmp sgt i32 %40, %72
  br i1 %73, label %74, label %100

74:                                               ; preds = %67, %100, %62
  %75 = phi i32 [ 1, %62 ], [ %69, %67 ], [ %101, %100 ]
  %76 = sub nsw i32 %1, %75
  %77 = sext i32 %76 to i64
  %78 = getelementptr inbounds [13 x i16], [13 x i16]* %5, i64 0, i64 %77
  %79 = load i16, i16* %78, align 2
  %80 = zext i16 %79 to i64
  %81 = getelementptr inbounds [17 x [3 x i16]], [17 x [3 x i16]]* @_ZN6webrtc9DspHelper21kParabolaCoefficientsE, i64 0, i64 %80, i64 1
  %82 = load i16, i16* %81, align 2
  %83 = sext i16 %82 to i32
  %84 = mul nsw i32 %39, %83
  %85 = getelementptr inbounds [17 x [3 x i16]], [17 x [3 x i16]]* @_ZN6webrtc9DspHelper21kParabolaCoefficientsE, i64 0, i64 %80, i64 2
  %86 = load i16, i16* %85, align 2
  %87 = sext i16 %86 to i32
  %88 = mul nsw i32 %36, %87
  %89 = add nsw i32 %88, %84
  %90 = load i16, i16* %0, align 2
  %91 = sext i16 %90 to i32
  %92 = shl nsw i32 %91, 8
  %93 = add nsw i32 %89, %92
  %94 = sdiv i32 %93, 256
  %95 = trunc i32 %94 to i16
  store i16 %95, i16* %3, align 2
  %96 = load i64, i64* %2, align 8
  %97 = mul i64 %63, %96
  %98 = zext i32 %75 to i64
  %99 = sub i64 %97, %98
  br label %155

100:                                              ; preds = %67
  %101 = add nuw nsw i32 %69, 1
  %102 = icmp eq i32 %101, %1
  br i1 %102, label %74, label %67

103:                                              ; preds = %24
  %104 = sext i16 %56 to i32
  %105 = add nsw i32 %58, %104
  %106 = mul nsw i32 %105, %59
  %107 = icmp sgt i32 %40, %106
  br i1 %107, label %108, label %151

108:                                              ; preds = %103
  %109 = shl nsw i64 %41, 1
  %110 = icmp eq i32 %1, 1
  br i1 %110, label %121, label %111

111:                                              ; preds = %108
  %112 = shl nsw i32 %104, 1
  %113 = add nsw i32 %58, %112
  %114 = trunc i32 %113 to i16
  br label %115

115:                                              ; preds = %111, %147
  %116 = phi i32 [ 1, %111 ], [ %148, %147 ]
  %117 = phi i16 [ %114, %111 ], [ %149, %147 ]
  %118 = sext i16 %117 to i32
  %119 = mul nsw i32 %118, %59
  %120 = icmp slt i32 %40, %119
  br i1 %120, label %121, label %147

121:                                              ; preds = %115, %147, %108
  %122 = phi i32 [ 1, %108 ], [ %116, %115 ], [ %148, %147 ]
  %123 = add nsw i32 %122, %1
  %124 = sext i32 %123 to i64
  %125 = getelementptr inbounds [13 x i16], [13 x i16]* %5, i64 0, i64 %124
  %126 = load i16, i16* %125, align 2
  %127 = zext i16 %126 to i64
  %128 = getelementptr inbounds [17 x [3 x i16]], [17 x [3 x i16]]* @_ZN6webrtc9DspHelper21kParabolaCoefficientsE, i64 0, i64 %127, i64 1
  %129 = load i16, i16* %128, align 2
  %130 = sext i16 %129 to i32
  %131 = mul nsw i32 %39, %130
  %132 = getelementptr inbounds [17 x [3 x i16]], [17 x [3 x i16]]* @_ZN6webrtc9DspHelper21kParabolaCoefficientsE, i64 0, i64 %127, i64 2
  %133 = load i16, i16* %132, align 2
  %134 = sext i16 %133 to i32
  %135 = mul nsw i32 %36, %134
  %136 = load i16, i16* %0, align 2
  %137 = sext i16 %136 to i32
  %138 = shl nsw i32 %137, 8
  %139 = add nsw i32 %135, %131
  %140 = add nsw i32 %139, %138
  %141 = sdiv i32 %140, 256
  %142 = trunc i32 %141 to i16
  store i16 %142, i16* %3, align 2
  %143 = load i64, i64* %2, align 8
  %144 = mul i64 %109, %143
  %145 = zext i32 %122 to i64
  %146 = add i64 %144, %145
  br label %155

147:                                              ; preds = %115
  %148 = add nuw nsw i32 %116, 1
  %149 = add i16 %117, %56
  %150 = icmp eq i32 %148, %1
  br i1 %150, label %121, label %115

151:                                              ; preds = %103
  store i16 %29, i16* %3, align 2
  %152 = load i64, i64* %2, align 8
  %153 = shl nsw i64 %41, 1
  %154 = mul i64 %153, %152
  br label %155

155:                                              ; preds = %121, %74, %151
  %156 = phi i64 [ %146, %121 ], [ %99, %74 ], [ %154, %151 ]
  store i64 %156, i64* %2, align 8
  call void @llvm.lifetime.end.p0i8(i64 26, i8* nonnull %6) #4
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i64 @_ZN6webrtc9DspHelper13MinDistortionEPKsmmmPi(i16* nocapture readonly, i64, i64, i64, i32* nocapture) local_unnamed_addr #2 align 2 {
  %6 = icmp ugt i64 %1, %2
  br i1 %6, label %12, label %7

7:                                                ; preds = %5
  %8 = icmp eq i64 %3, 0
  %9 = icmp ult i64 %3, 8
  %10 = and i64 %3, -8
  %11 = icmp eq i64 %10, %3
  br label %15

12:                                               ; preds = %64, %5
  %13 = phi i64 [ 0, %5 ], [ %67, %64 ]
  %14 = phi i32 [ 2147483647, %5 ], [ %68, %64 ]
  store i32 %14, i32* %4, align 4
  ret i64 %13

15:                                               ; preds = %7, %64
  %16 = phi i64 [ %1, %7 ], [ %69, %64 ]
  %17 = phi i32 [ 2147483647, %7 ], [ %68, %64 ]
  %18 = phi i64 [ 0, %7 ], [ %67, %64 ]
  %19 = sub i64 0, %16
  %20 = getelementptr inbounds i16, i16* %0, i64 %19
  br i1 %8, label %64, label %21

21:                                               ; preds = %15
  br i1 %9, label %22, label %25

22:                                               ; preds = %57, %21
  %23 = phi i64 [ 0, %21 ], [ %10, %57 ]
  %24 = phi i32 [ 0, %21 ], [ %63, %57 ]
  br label %71

25:                                               ; preds = %21, %25
  %26 = phi i64 [ %55, %25 ], [ 0, %21 ]
  %27 = phi <4 x i32> [ %53, %25 ], [ zeroinitializer, %21 ]
  %28 = phi <4 x i32> [ %54, %25 ], [ zeroinitializer, %21 ]
  %29 = getelementptr inbounds i16, i16* %0, i64 %26
  %30 = bitcast i16* %29 to <4 x i16>*
  %31 = load <4 x i16>, <4 x i16>* %30, align 2
  %32 = getelementptr inbounds i16, i16* %29, i64 4
  %33 = bitcast i16* %32 to <4 x i16>*
  %34 = load <4 x i16>, <4 x i16>* %33, align 2
  %35 = sext <4 x i16> %31 to <4 x i32>
  %36 = sext <4 x i16> %34 to <4 x i32>
  %37 = getelementptr inbounds i16, i16* %20, i64 %26
  %38 = bitcast i16* %37 to <4 x i16>*
  %39 = load <4 x i16>, <4 x i16>* %38, align 2
  %40 = getelementptr inbounds i16, i16* %37, i64 4
  %41 = bitcast i16* %40 to <4 x i16>*
  %42 = load <4 x i16>, <4 x i16>* %41, align 2
  %43 = sext <4 x i16> %39 to <4 x i32>
  %44 = sext <4 x i16> %42 to <4 x i32>
  %45 = sub nsw <4 x i32> %35, %43
  %46 = sub nsw <4 x i32> %36, %44
  %47 = icmp slt <4 x i32> %45, zeroinitializer
  %48 = icmp slt <4 x i32> %46, zeroinitializer
  %49 = sub nsw <4 x i32> zeroinitializer, %45
  %50 = sub nsw <4 x i32> zeroinitializer, %46
  %51 = select <4 x i1> %47, <4 x i32> %49, <4 x i32> %45
  %52 = select <4 x i1> %48, <4 x i32> %50, <4 x i32> %46
  %53 = add nuw nsw <4 x i32> %51, %27
  %54 = add nuw nsw <4 x i32> %52, %28
  %55 = add i64 %26, 8
  %56 = icmp eq i64 %55, %10
  br i1 %56, label %57, label %25, !llvm.loop !2

57:                                               ; preds = %25
  %58 = add nuw <4 x i32> %54, %53
  %59 = shufflevector <4 x i32> %58, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %60 = add <4 x i32> %58, %59
  %61 = shufflevector <4 x i32> %60, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %62 = add <4 x i32> %60, %61
  %63 = extractelement <4 x i32> %62, i32 0
  br i1 %11, label %64, label %22

64:                                               ; preds = %71, %57, %15
  %65 = phi i32 [ 0, %15 ], [ %63, %57 ], [ %84, %71 ]
  %66 = icmp slt i32 %65, %17
  %67 = select i1 %66, i64 %16, i64 %18
  %68 = select i1 %66, i32 %65, i32 %17
  %69 = add i64 %16, 1
  %70 = icmp ugt i64 %69, %2
  br i1 %70, label %12, label %15

71:                                               ; preds = %22, %71
  %72 = phi i64 [ %85, %71 ], [ %23, %22 ]
  %73 = phi i32 [ %84, %71 ], [ %24, %22 ]
  %74 = getelementptr inbounds i16, i16* %0, i64 %72
  %75 = load i16, i16* %74, align 2
  %76 = sext i16 %75 to i32
  %77 = getelementptr inbounds i16, i16* %20, i64 %72
  %78 = load i16, i16* %77, align 2
  %79 = sext i16 %78 to i32
  %80 = sub nsw i32 %76, %79
  %81 = icmp slt i32 %80, 0
  %82 = sub nsw i32 0, %80
  %83 = select i1 %81, i32 %82, i32 %80
  %84 = add nuw nsw i32 %83, %73
  %85 = add nuw i64 %72, 1
  %86 = icmp eq i64 %85, %3
  br i1 %86, label %64, label %71, !llvm.loop !4
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN6webrtc9DspHelper9CrossFadeEPKsS2_mPssS3_(i16* nocapture readonly, i16* nocapture readonly, i64, i16* nocapture, i16 signext, i16* nocapture) local_unnamed_addr #2 align 2 {
  %7 = load i16, i16* %3, align 2
  %8 = icmp eq i64 %2, 0
  br i1 %8, label %82, label %9

9:                                                ; preds = %6
  %10 = sub i16 16384, %7
  %11 = icmp ult i64 %2, 8
  br i1 %11, label %12, label %16

12:                                               ; preds = %80, %16, %9
  %13 = phi i64 [ 0, %16 ], [ 0, %9 ], [ %28, %80 ]
  %14 = phi i16 [ %10, %16 ], [ %10, %9 ], [ %31, %80 ]
  %15 = phi i16 [ %7, %16 ], [ %7, %9 ], [ %34, %80 ]
  br label %84

16:                                               ; preds = %9
  %17 = getelementptr i16, i16* %5, i64 %2
  %18 = getelementptr i16, i16* %0, i64 %2
  %19 = getelementptr i16, i16* %1, i64 %2
  %20 = icmp ugt i16* %18, %5
  %21 = icmp ugt i16* %17, %0
  %22 = and i1 %20, %21
  %23 = icmp ugt i16* %19, %5
  %24 = icmp ugt i16* %17, %1
  %25 = and i1 %23, %24
  %26 = or i1 %22, %25
  br i1 %26, label %12, label %27

27:                                               ; preds = %16
  %28 = and i64 %2, -8
  %29 = trunc i64 %28 to i16
  %30 = mul i16 %29, %4
  %31 = add i16 %10, %30
  %32 = trunc i64 %28 to i16
  %33 = mul i16 %32, %4
  %34 = sub i16 %7, %33
  %35 = insertelement <8 x i16> undef, i16 %10, i32 0
  %36 = shufflevector <8 x i16> %35, <8 x i16> undef, <8 x i32> zeroinitializer
  %37 = insertelement <8 x i16> undef, i16 %4, i32 0
  %38 = shufflevector <8 x i16> %37, <8 x i16> undef, <8 x i32> zeroinitializer
  %39 = mul <8 x i16> %38, <i16 0, i16 1, i16 2, i16 3, i16 4, i16 5, i16 6, i16 7>
  %40 = add <8 x i16> %36, %39
  %41 = shl i16 %4, 3
  %42 = insertelement <8 x i16> undef, i16 %41, i32 0
  %43 = shufflevector <8 x i16> %42, <8 x i16> undef, <8 x i32> zeroinitializer
  %44 = sub i16 0, %4
  %45 = insertelement <8 x i16> undef, i16 %7, i32 0
  %46 = shufflevector <8 x i16> %45, <8 x i16> undef, <8 x i32> zeroinitializer
  %47 = insertelement <8 x i16> undef, i16 %44, i32 0
  %48 = shufflevector <8 x i16> %47, <8 x i16> undef, <8 x i32> zeroinitializer
  %49 = mul <8 x i16> %48, <i16 0, i16 1, i16 2, i16 3, i16 4, i16 5, i16 6, i16 7>
  %50 = add <8 x i16> %46, %49
  %51 = shl i16 %44, 3
  %52 = insertelement <8 x i16> undef, i16 %51, i32 0
  %53 = shufflevector <8 x i16> %52, <8 x i16> undef, <8 x i32> zeroinitializer
  br label %54

54:                                               ; preds = %54, %27
  %55 = phi i64 [ 0, %27 ], [ %76, %54 ]
  %56 = phi <8 x i16> [ %40, %27 ], [ %77, %54 ]
  %57 = phi <8 x i16> [ %50, %27 ], [ %78, %54 ]
  %58 = sext <8 x i16> %57 to <8 x i32>
  %59 = getelementptr inbounds i16, i16* %0, i64 %55
  %60 = bitcast i16* %59 to <8 x i16>*
  %61 = load <8 x i16>, <8 x i16>* %60, align 2, !alias.scope !6
  %62 = sext <8 x i16> %61 to <8 x i32>
  %63 = mul nsw <8 x i32> %62, %58
  %64 = sext <8 x i16> %56 to <8 x i32>
  %65 = getelementptr inbounds i16, i16* %1, i64 %55
  %66 = bitcast i16* %65 to <8 x i16>*
  %67 = load <8 x i16>, <8 x i16>* %66, align 2, !alias.scope !9
  %68 = sext <8 x i16> %67 to <8 x i32>
  %69 = mul nsw <8 x i32> %68, %64
  %70 = add nsw <8 x i32> %63, <i32 8192, i32 8192, i32 8192, i32 8192, i32 8192, i32 8192, i32 8192, i32 8192>
  %71 = add <8 x i32> %70, %69
  %72 = lshr <8 x i32> %71, <i32 14, i32 14, i32 14, i32 14, i32 14, i32 14, i32 14, i32 14>
  %73 = trunc <8 x i32> %72 to <8 x i16>
  %74 = getelementptr inbounds i16, i16* %5, i64 %55
  %75 = bitcast i16* %74 to <8 x i16>*
  store <8 x i16> %73, <8 x i16>* %75, align 2, !alias.scope !11, !noalias !13
  %76 = add i64 %55, 8
  %77 = add <8 x i16> %56, %43
  %78 = add <8 x i16> %57, %53
  %79 = icmp eq i64 %76, %28
  br i1 %79, label %80, label %54, !llvm.loop !14

80:                                               ; preds = %54
  %81 = icmp eq i64 %28, %2
  br i1 %81, label %82, label %12

82:                                               ; preds = %84, %80, %6
  %83 = phi i16 [ %7, %6 ], [ %34, %80 ], [ %103, %84 ]
  store i16 %83, i16* %3, align 2
  ret void

84:                                               ; preds = %12, %84
  %85 = phi i64 [ %105, %84 ], [ %13, %12 ]
  %86 = phi i16 [ %104, %84 ], [ %14, %12 ]
  %87 = phi i16 [ %103, %84 ], [ %15, %12 ]
  %88 = sext i16 %87 to i32
  %89 = getelementptr inbounds i16, i16* %0, i64 %85
  %90 = load i16, i16* %89, align 2
  %91 = sext i16 %90 to i32
  %92 = mul nsw i32 %91, %88
  %93 = sext i16 %86 to i32
  %94 = getelementptr inbounds i16, i16* %1, i64 %85
  %95 = load i16, i16* %94, align 2
  %96 = sext i16 %95 to i32
  %97 = mul nsw i32 %96, %93
  %98 = add nsw i32 %92, 8192
  %99 = add i32 %98, %97
  %100 = lshr i32 %99, 14
  %101 = trunc i32 %100 to i16
  %102 = getelementptr inbounds i16, i16* %5, i64 %85
  store i16 %101, i16* %102, align 2
  %103 = sub i16 %87, %4
  %104 = add i16 %86, %4
  %105 = add nuw i64 %85, 1
  %106 = icmp eq i64 %105, %2
  br i1 %106, label %82, label %84, !llvm.loop !15
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc9DspHelper12UnmuteSignalEPKsmPsiS3_(i16* nocapture readonly, i64, i16* nocapture, i32, i16* nocapture) local_unnamed_addr #0 align 2 {
  %6 = load i16, i16* %2, align 2
  %7 = icmp eq i64 %1, 0
  br i1 %7, label %14, label %8

8:                                                ; preds = %5
  %9 = zext i16 %6 to i32
  %10 = shl nuw nsw i32 %9, 6
  %11 = or i32 %10, 32
  br label %16

12:                                               ; preds = %16
  %13 = trunc i32 %34 to i16
  br label %14

14:                                               ; preds = %12, %5
  %15 = phi i16 [ %6, %5 ], [ %13, %12 ]
  store i16 %15, i16* %2, align 2
  ret void

16:                                               ; preds = %16, %8
  %17 = phi i64 [ %36, %16 ], [ 0, %8 ]
  %18 = phi i32 [ %31, %16 ], [ %11, %8 ]
  %19 = phi i16 [ %35, %16 ], [ %6, %8 ]
  %20 = zext i16 %19 to i32
  %21 = getelementptr inbounds i16, i16* %0, i64 %17
  %22 = load i16, i16* %21, align 2
  %23 = sext i16 %22 to i32
  %24 = mul nsw i32 %23, %20
  %25 = add nsw i32 %24, 8192
  %26 = lshr i32 %25, 14
  %27 = trunc i32 %26 to i16
  %28 = getelementptr inbounds i16, i16* %4, i64 %17
  store i16 %27, i16* %28, align 2
  %29 = add nsw i32 %18, %3
  %30 = icmp sgt i32 %29, 0
  %31 = select i1 %30, i32 %29, i32 0
  %32 = lshr i32 %31, 6
  %33 = icmp ult i32 %32, 16384
  %34 = select i1 %33, i32 %32, i32 16384
  %35 = trunc i32 %34 to i16
  %36 = add nuw i64 %17, 1
  %37 = icmp eq i64 %36, %1
  br i1 %37, label %12, label %16
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN6webrtc9DspHelper10MuteSignalEPsim(i16* nocapture, i32, i64) local_unnamed_addr #2 align 2 {
  %4 = icmp eq i64 %2, 0
  br i1 %4, label %77, label %5

5:                                                ; preds = %3
  %6 = icmp ult i64 %2, 8
  br i1 %6, label %7, label %10

7:                                                ; preds = %75, %5
  %8 = phi i64 [ 0, %5 ], [ %11, %75 ]
  %9 = phi i32 [ 1048608, %5 ], [ %15, %75 ]
  br label %78

10:                                               ; preds = %5
  %11 = and i64 %2, -8
  %12 = trunc i64 %11 to i32
  %13 = sub i32 0, %1
  %14 = mul i32 %12, %13
  %15 = add i32 %14, 1048608
  %16 = insertelement <8 x i32> undef, i32 %13, i32 0
  %17 = shufflevector <8 x i32> %16, <8 x i32> undef, <8 x i32> zeroinitializer
  %18 = mul <8 x i32> %17, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %19 = add <8 x i32> %18, <i32 1048608, i32 1048608, i32 1048608, i32 1048608, i32 1048608, i32 1048608, i32 1048608, i32 1048608>
  %20 = shl i32 %13, 3
  %21 = insertelement <8 x i32> undef, i32 %20, i32 0
  %22 = shufflevector <8 x i32> %21, <8 x i32> undef, <8 x i32> zeroinitializer
  %23 = add i64 %11, -8
  %24 = lshr exact i64 %23, 3
  %25 = add nuw nsw i64 %24, 1
  %26 = and i64 %25, 1
  %27 = icmp eq i64 %23, 0
  br i1 %27, label %60, label %28

28:                                               ; preds = %10
  %29 = sub nuw nsw i64 %25, %26
  br label %30

30:                                               ; preds = %30, %28
  %31 = phi i64 [ 0, %28 ], [ %56, %30 ]
  %32 = phi <8 x i32> [ %19, %28 ], [ %57, %30 ]
  %33 = phi i64 [ %29, %28 ], [ %58, %30 ]
  %34 = ashr <8 x i32> %32, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %35 = getelementptr inbounds i16, i16* %0, i64 %31
  %36 = bitcast i16* %35 to <8 x i16>*
  %37 = load <8 x i16>, <8 x i16>* %36, align 2
  %38 = sext <8 x i16> %37 to <8 x i32>
  %39 = mul nsw <8 x i32> %34, %38
  %40 = add nsw <8 x i32> %39, <i32 8192, i32 8192, i32 8192, i32 8192, i32 8192, i32 8192, i32 8192, i32 8192>
  %41 = lshr <8 x i32> %40, <i32 14, i32 14, i32 14, i32 14, i32 14, i32 14, i32 14, i32 14>
  %42 = trunc <8 x i32> %41 to <8 x i16>
  %43 = bitcast i16* %35 to <8 x i16>*
  store <8 x i16> %42, <8 x i16>* %43, align 2
  %44 = or i64 %31, 8
  %45 = add <8 x i32> %32, %22
  %46 = ashr <8 x i32> %45, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %47 = getelementptr inbounds i16, i16* %0, i64 %44
  %48 = bitcast i16* %47 to <8 x i16>*
  %49 = load <8 x i16>, <8 x i16>* %48, align 2
  %50 = sext <8 x i16> %49 to <8 x i32>
  %51 = mul nsw <8 x i32> %46, %50
  %52 = add nsw <8 x i32> %51, <i32 8192, i32 8192, i32 8192, i32 8192, i32 8192, i32 8192, i32 8192, i32 8192>
  %53 = lshr <8 x i32> %52, <i32 14, i32 14, i32 14, i32 14, i32 14, i32 14, i32 14, i32 14>
  %54 = trunc <8 x i32> %53 to <8 x i16>
  %55 = bitcast i16* %47 to <8 x i16>*
  store <8 x i16> %54, <8 x i16>* %55, align 2
  %56 = add i64 %31, 16
  %57 = add <8 x i32> %45, %22
  %58 = add i64 %33, -2
  %59 = icmp eq i64 %58, 0
  br i1 %59, label %60, label %30, !llvm.loop !16

60:                                               ; preds = %30, %10
  %61 = phi i64 [ 0, %10 ], [ %56, %30 ]
  %62 = phi <8 x i32> [ %19, %10 ], [ %57, %30 ]
  %63 = icmp eq i64 %26, 0
  br i1 %63, label %75, label %64

64:                                               ; preds = %60
  %65 = ashr <8 x i32> %62, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %66 = getelementptr inbounds i16, i16* %0, i64 %61
  %67 = bitcast i16* %66 to <8 x i16>*
  %68 = load <8 x i16>, <8 x i16>* %67, align 2
  %69 = sext <8 x i16> %68 to <8 x i32>
  %70 = mul nsw <8 x i32> %65, %69
  %71 = add nsw <8 x i32> %70, <i32 8192, i32 8192, i32 8192, i32 8192, i32 8192, i32 8192, i32 8192, i32 8192>
  %72 = lshr <8 x i32> %71, <i32 14, i32 14, i32 14, i32 14, i32 14, i32 14, i32 14, i32 14>
  %73 = trunc <8 x i32> %72 to <8 x i16>
  %74 = bitcast i16* %66 to <8 x i16>*
  store <8 x i16> %73, <8 x i16>* %74, align 2
  br label %75

75:                                               ; preds = %60, %64
  %76 = icmp eq i64 %11, %2
  br i1 %76, label %77, label %7

77:                                               ; preds = %78, %75, %3
  ret void

78:                                               ; preds = %7, %78
  %79 = phi i64 [ %90, %78 ], [ %8, %7 ]
  %80 = phi i32 [ %89, %78 ], [ %9, %7 ]
  %81 = ashr i32 %80, 6
  %82 = getelementptr inbounds i16, i16* %0, i64 %79
  %83 = load i16, i16* %82, align 2
  %84 = sext i16 %83 to i32
  %85 = mul nsw i32 %81, %84
  %86 = add nsw i32 %85, 8192
  %87 = lshr i32 %86, 14
  %88 = trunc i32 %87 to i16
  store i16 %88, i16* %82, align 2
  %89 = sub nsw i32 %80, %1
  %90 = add nuw i64 %79, 1
  %91 = icmp eq i64 %90, %2
  br i1 %91, label %77, label %78, !llvm.loop !17
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN6webrtc9DspHelper16DownsampleTo4kHzEPKsmmibPs(i16*, i64, i64, i32, i1 zeroext, i16*) local_unnamed_addr #0 align 2 {
  switch i32 %3, label %22 [
    i32 8000, label %10
    i32 16000, label %7
    i32 32000, label %8
    i32 48000, label %9
  ]

7:                                                ; preds = %6
  br label %10

8:                                                ; preds = %6
  br label %10

9:                                                ; preds = %6
  br label %10

10:                                               ; preds = %6, %9, %8, %7
  %11 = phi i16* [ getelementptr inbounds ([7 x i16], [7 x i16]* @_ZN6webrtc9DspHelper19kDownsample48kHzTblE, i64 0, i64 0), %9 ], [ getelementptr inbounds ([7 x i16], [7 x i16]* @_ZN6webrtc9DspHelper19kDownsample32kHzTblE, i64 0, i64 0), %8 ], [ getelementptr inbounds ([5 x i16], [5 x i16]* @_ZN6webrtc9DspHelper19kDownsample16kHzTblE, i64 0, i64 0), %7 ], [ getelementptr inbounds ([3 x i16], [3 x i16]* @_ZN6webrtc9DspHelper18kDownsample8kHzTblE, i64 0, i64 0), %6 ]
  %12 = phi i64 [ 7, %9 ], [ 7, %8 ], [ 5, %7 ], [ 3, %6 ]
  %13 = phi i64 [ 4, %9 ], [ 4, %8 ], [ 3, %7 ], [ 2, %6 ]
  %14 = phi i32 [ 12, %9 ], [ 8, %8 ], [ 4, %7 ], [ 2, %6 ]
  %15 = select i1 %4, i64 %13, i64 0
  %16 = load i32 (i16*, i64, i16*, i64, i16*, i64, i32, i64)*, i32 (i16*, i64, i16*, i64, i16*, i64, i32, i64)** @WebRtcSpl_DownsampleFast, align 8
  %17 = add nsw i64 %12, -1
  %18 = getelementptr inbounds i16, i16* %0, i64 %17
  %19 = add i64 %1, 1
  %20 = sub i64 %19, %12
  %21 = tail call i32 %16(i16* %18, i64 %20, i16* %5, i64 %2, i16* nonnull %11, i64 %12, i32 %14, i64 %15) #4
  br label %22

22:                                               ; preds = %6, %10
  %23 = phi i32 [ %21, %10 ], [ -1, %6 ]
  ret i32 %23
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !5, !3}
!5 = !{!"llvm.loop.unroll.runtime.disable"}
!6 = !{!7}
!7 = distinct !{!7, !8}
!8 = distinct !{!8, !"LVerDomain"}
!9 = !{!10}
!10 = distinct !{!10, !8}
!11 = !{!12}
!12 = distinct !{!12, !8}
!13 = !{!7, !10}
!14 = distinct !{!14, !3}
!15 = distinct !{!15, !3}
!16 = distinct !{!16, !3}
!17 = distinct !{!17, !5, !3}
