; ModuleID = '../../third_party/blink/renderer/modules/payments/goods/digital_goods_type_converters.cc'
source_filename = "../../third_party/blink/renderer/modules/payments/goods/digital_goods_type_converters.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.WTF::ThreadSpecific" = type { %"class.blink::ThreadState"**, %"class.base::ThreadLocalStorage::Slot" }
%"class.blink::ThreadState" = type <{ %"class.std::__1::unique_ptr.9", i32, [4 x i8], %"class.std::__1::unique_ptr.140", %"class.std::__1::unique_ptr.140", i8**, i8, i8, i8, i8, i8, i8, [2 x i8], i64, i64, i32, i32, i32, [4 x i8], %"class.WTF::Deque", %"class.v8::Isolate"*, void (%"class.v8::Isolate"*, %"class.v8::EmbedderGraph"*, i8*)*, %"class.std::__1::unique_ptr.150", %"class.std::__1::unique_ptr.156", %"struct.blink::ThreadState::GCData", %"class.std::__1::unique_ptr.173", %"class.std::__1::unique_ptr.179", %"class.base::JobHandle", %"class.base::JobHandle", %"struct.std::__1::atomic.186", [7 x i8], i64, i8, [7 x i8], i64, %"class.base::TimeTicks", i8, i8, [6 x i8] }>
%"class.std::__1::unique_ptr.9" = type { %"class.std::__1::__compressed_pair.10" }
%"class.std::__1::__compressed_pair.10" = type { %"struct.std::__1::__compressed_pair_elem.11" }
%"struct.std::__1::__compressed_pair_elem.11" = type { %"class.blink::ThreadHeap"* }
%"class.blink::ThreadHeap" = type { %"class.blink::ThreadState"*, %"class.std::__1::unique_ptr.12", %"class.std::__1::unique_ptr.18", %"class.std::__1::unique_ptr.24", %"class.std::__1::unique_ptr.30", %"class.std::__1::unique_ptr.36", %"class.std::__1::unique_ptr.42", %"class.std::__1::unique_ptr.53", %"class.std::__1::unique_ptr.60", %"class.std::__1::unique_ptr.60", %"class.std::__1::unique_ptr.67", %"class.std::__1::unique_ptr.74", %"class.std::__1::unique_ptr.81", %"class.std::__1::unique_ptr.81", %"class.std::__1::unique_ptr.88", %"class.std::__1::unique_ptr.95", %"class.std::__1::unique_ptr.102", %"class.std::__1::unique_ptr.125", %"struct.blink::ThreadHeap::LastAllocatedRegion", [9 x %"class.blink::BaseArena"*], i64, i64 }
%"class.std::__1::unique_ptr.12" = type { %"class.std::__1::__compressed_pair.13" }
%"class.std::__1::__compressed_pair.13" = type { %"struct.std::__1::__compressed_pair_elem.14" }
%"struct.std::__1::__compressed_pair_elem.14" = type { %"class.blink::ThreadHeapStatsCollector"* }
%"class.blink::ThreadHeapStatsCollector" = type opaque
%"class.std::__1::unique_ptr.18" = type { %"class.std::__1::__compressed_pair.19" }
%"class.std::__1::__compressed_pair.19" = type { %"struct.std::__1::__compressed_pair_elem.20" }
%"struct.std::__1::__compressed_pair_elem.20" = type { %"class.blink::RegionTree"* }
%"class.blink::RegionTree" = type opaque
%"class.std::__1::unique_ptr.24" = type { %"class.std::__1::__compressed_pair.25" }
%"class.std::__1::__compressed_pair.25" = type { %"struct.std::__1::__compressed_pair_elem.26" }
%"struct.std::__1::__compressed_pair_elem.26" = type { %"class.blink::PageBloomFilter"* }
%"class.blink::PageBloomFilter" = type opaque
%"class.std::__1::unique_ptr.30" = type { %"class.std::__1::__compressed_pair.31" }
%"class.std::__1::__compressed_pair.31" = type { %"struct.std::__1::__compressed_pair_elem.32" }
%"struct.std::__1::__compressed_pair_elem.32" = type { %"class.blink::PagePool"* }
%"class.blink::PagePool" = type opaque
%"class.std::__1::unique_ptr.36" = type { %"class.std::__1::__compressed_pair.37" }
%"class.std::__1::__compressed_pair.37" = type { %"struct.std::__1::__compressed_pair_elem.38" }
%"struct.std::__1::__compressed_pair_elem.38" = type { %"class.blink::ProcessHeapReporter"* }
%"class.blink::ProcessHeapReporter" = type opaque
%"class.std::__1::unique_ptr.42" = type { %"class.std::__1::__compressed_pair.43" }
%"class.std::__1::__compressed_pair.43" = type { %"struct.std::__1::__compressed_pair_elem.44" }
%"struct.std::__1::__compressed_pair_elem.44" = type { %"class.blink::Worklist"* }
%"class.blink::Worklist" = type { [4 x %"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, i64, [512 x %"struct.blink::TraceDescriptor"] }
%"struct.blink::TraceDescriptor" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"class.blink::Visitor" = type { i32 (...)**, %"class.blink::ThreadState"* }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"struct.std::__1::atomic.45" }
%"class.base::Lock" = type { %"class.base::internal::LockImpl" }
%"class.base::internal::LockImpl" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"struct.std::__1::atomic.45" = type { %"struct.std::__1::__atomic_base.46" }
%"struct.std::__1::__atomic_base.46" = type { %"struct.std::__1::__atomic_base.47" }
%"struct.std::__1::__atomic_base.47" = type { %"struct.std::__1::__cxx_atomic_impl.48" }
%"struct.std::__1::__cxx_atomic_impl.48" = type { %"struct.std::__1::__cxx_atomic_base_impl.49" }
%"struct.std::__1::__cxx_atomic_base_impl.49" = type { i64 }
%"class.std::__1::unique_ptr.53" = type { %"class.std::__1::__compressed_pair.54" }
%"class.std::__1::__compressed_pair.54" = type { %"struct.std::__1::__compressed_pair_elem.55" }
%"struct.std::__1::__compressed_pair_elem.55" = type { %"class.blink::Worklist.56"* }
%"class.blink::Worklist.56" = type { [4 x %"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"struct.std::__1::atomic.45" }
%"class.std::__1::unique_ptr.60" = type { %"class.std::__1::__compressed_pair.61" }
%"class.std::__1::__compressed_pair.61" = type { %"struct.std::__1::__compressed_pair_elem.62" }
%"struct.std::__1::__compressed_pair_elem.62" = type { %"class.blink::Worklist.63"* }
%"class.blink::Worklist.63" = type { [4 x %"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"class.blink::Worklist<const void *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *, 16, 4>::Segment" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, i64, [16 x i8*] }
%"class.blink::Worklist<const void *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"struct.std::__1::atomic.45" }
%"class.std::__1::unique_ptr.67" = type { %"class.std::__1::__compressed_pair.68" }
%"class.std::__1::__compressed_pair.68" = type { %"struct.std::__1::__compressed_pair_elem.69" }
%"struct.std::__1::__compressed_pair_elem.69" = type { %"class.blink::Worklist.70"* }
%"class.blink::Worklist.70" = type { [4 x %"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.45" }
%"class.std::__1::unique_ptr.74" = type { %"class.std::__1::__compressed_pair.75" }
%"class.std::__1::__compressed_pair.75" = type { %"struct.std::__1::__compressed_pair_elem.76" }
%"struct.std::__1::__compressed_pair_elem.76" = type { %"class.blink::Worklist.77"* }
%"class.blink::Worklist.77" = type { [4 x %"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *const *, 256, 4>::Segment" = type opaque
%"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"struct.std::__1::atomic.45" }
%"class.std::__1::unique_ptr.81" = type { %"class.std::__1::__compressed_pair.82" }
%"class.std::__1::__compressed_pair.82" = type { %"struct.std::__1::__compressed_pair_elem.83" }
%"struct.std::__1::__compressed_pair_elem.83" = type { %"class.blink::Worklist.84"* }
%"class.blink::Worklist.84" = type { [4 x %"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.45" }
%"class.std::__1::unique_ptr.88" = type { %"class.std::__1::__compressed_pair.89" }
%"class.std::__1::__compressed_pair.89" = type { %"struct.std::__1::__compressed_pair_elem.90" }
%"struct.std::__1::__compressed_pair_elem.90" = type { %"class.blink::Worklist.91"* }
%"class.blink::Worklist.91" = type { [4 x %"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment" = type opaque
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"struct.std::__1::atomic.45" }
%"class.std::__1::unique_ptr.95" = type { %"class.std::__1::__compressed_pair.96" }
%"class.std::__1::__compressed_pair.96" = type { %"struct.std::__1::__compressed_pair_elem.97" }
%"struct.std::__1::__compressed_pair_elem.97" = type { %"class.blink::Worklist.98"* }
%"class.blink::Worklist.98" = type { [4 x %"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, i64, [64 x %"struct.blink::NotSafeToConcurrentlyTraceItem"] }
%"struct.blink::NotSafeToConcurrentlyTraceItem" = type { %"struct.blink::TraceDescriptor", i64 }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.45" }
%"class.std::__1::unique_ptr.102" = type { %"class.std::__1::__compressed_pair.103" }
%"class.std::__1::__compressed_pair.103" = type { %"struct.std::__1::__compressed_pair_elem.104" }
%"struct.std::__1::__compressed_pair_elem.104" = type { %"class.blink::WeakContainersWorklist"* }
%"class.blink::WeakContainersWorklist" = type { %"class.WTF::Mutex", %"class.std::__1::unordered_set" }
%"class.WTF::Mutex" = type { %"class.WTF::MutexBase" }
%"class.WTF::MutexBase" = type { %"struct.WTF::PlatformMutex" }
%"struct.WTF::PlatformMutex" = type { %union.pthread_mutex_t }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.105", %"class.std::__1::__compressed_pair.112", %"class.std::__1::__compressed_pair.117", %"class.std::__1::__compressed_pair.119", [4 x i8] }>
%"class.std::__1::unique_ptr.105" = type { %"class.std::__1::__compressed_pair.106" }
%"class.std::__1::__compressed_pair.106" = type { %"struct.std::__1::__compressed_pair_elem.107", %"struct.std::__1::__compressed_pair_elem.108" }
%"struct.std::__1::__compressed_pair_elem.107" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.108" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.109" }
%"class.std::__1::__compressed_pair.109" = type { %"struct.std::__1::__compressed_pair_elem.110" }
%"struct.std::__1::__compressed_pair_elem.110" = type { i64 }
%"class.std::__1::__compressed_pair.112" = type { %"struct.std::__1::__compressed_pair_elem.113" }
%"struct.std::__1::__compressed_pair_elem.113" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.117" = type { %"struct.std::__1::__compressed_pair_elem.110" }
%"class.std::__1::__compressed_pair.119" = type { %"struct.std::__1::__compressed_pair_elem.120" }
%"struct.std::__1::__compressed_pair_elem.120" = type { float }
%"class.std::__1::unique_ptr.125" = type { %"class.std::__1::__compressed_pair.126" }
%"class.std::__1::__compressed_pair.126" = type { %"struct.std::__1::__compressed_pair_elem.127" }
%"struct.std::__1::__compressed_pair_elem.127" = type { %"class.blink::HeapCompact"* }
%"class.blink::HeapCompact" = type <{ %"class.blink::ThreadHeap"*, %"class.std::__1::unique_ptr.128", i8, [7 x i8], i64, i64, i32, [4 x i8], i64, i8, [7 x i8] }>
%"class.std::__1::unique_ptr.128" = type { %"class.std::__1::__compressed_pair.129" }
%"class.std::__1::__compressed_pair.129" = type { %"struct.std::__1::__compressed_pair_elem.130" }
%"struct.std::__1::__compressed_pair_elem.130" = type { %"class.blink::HeapCompact::MovableObjectFixups"* }
%"class.blink::HeapCompact::MovableObjectFixups" = type opaque
%"struct.blink::ThreadHeap::LastAllocatedRegion" = type { i8*, i64 }
%"class.blink::BaseArena" = type <{ i32 (...)**, %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::ThreadState"*, i32, [4 x i8] }>
%"class.blink::PageStackThreadSafe" = type { %"class.blink::PageStack", %"class.WTF::Mutex" }
%"class.blink::PageStack" = type { %"class.WTF::Vector" }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase" }
%"class.WTF::VectorBufferBase" = type { %"class.blink::BasePage"**, i32, i32 }
%"class.blink::BasePage" = type <{ i32 (...)**, %"class.blink::PageMemory"*, %"class.blink::BaseArena"*, %"class.blink::ThreadState"*, i64, i8, i8, i8, [5 x i8] }>
%"class.blink::PageMemory" = type opaque
%"class.std::__1::unique_ptr.140" = type { %"class.std::__1::__compressed_pair.141" }
%"class.std::__1::__compressed_pair.141" = type { %"struct.std::__1::__compressed_pair_elem.142" }
%"struct.std::__1::__compressed_pair_elem.142" = type { %"class.blink::PersistentRegion"* }
%"class.blink::PersistentRegion" = type { %"class.blink::PersistentRegionBase" }
%"class.blink::PersistentRegionBase" = type { %"class.blink::PersistentNode"*, %"struct.blink::PersistentNodeSlots"* }
%"class.blink::PersistentNode" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"struct.blink::PersistentNodeSlots" = type { %"struct.blink::PersistentNodeSlots"*, [256 x %"class.blink::PersistentNode"] }
%"class.WTF::Deque" = type { %"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer", i32, i32 }
%"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer" = type { %"class.WTF::VectorBuffer.148" }
%"class.WTF::VectorBuffer.148" = type { %"class.WTF::VectorBufferBase.149" }
%"class.WTF::VectorBufferBase.149" = type { %"struct.std::__1::pair"*, i32, i32 }
%"struct.std::__1::pair" = type { i8*, i1 (%"class.blink::LivenessBroker"*, i8*)* }
%"class.blink::LivenessBroker" = type { i8 }
%"class.v8::Isolate" = type { i8 }
%"class.v8::EmbedderGraph" = type opaque
%"class.std::__1::unique_ptr.150" = type { %"class.std::__1::__compressed_pair.151" }
%"class.std::__1::__compressed_pair.151" = type { %"struct.std::__1::__compressed_pair_elem.152" }
%"struct.std::__1::__compressed_pair_elem.152" = type { %"class.blink::UnifiedHeapController"* }
%"class.blink::UnifiedHeapController" = type opaque
%"class.std::__1::unique_ptr.156" = type { %"class.std::__1::__compressed_pair.157" }
%"class.std::__1::__compressed_pair.157" = type { %"struct.std::__1::__compressed_pair_elem.158" }
%"struct.std::__1::__compressed_pair_elem.158" = type { %"class.v8::EmbedderRootsHandler"* }
%"class.v8::EmbedderRootsHandler" = type { i32 (...)** }
%"struct.blink::ThreadState::GCData" = type { i32, i32, i32, i32, %"class.std::__1::unique_ptr.162" }
%"class.std::__1::unique_ptr.162" = type { %"class.std::__1::__compressed_pair.163" }
%"class.std::__1::__compressed_pair.163" = type { %"struct.std::__1::__compressed_pair_elem.164" }
%"struct.std::__1::__compressed_pair_elem.164" = type { %"class.blink::MarkingVisitor"* }
%"class.blink::MarkingVisitor" = type { %"class.blink::MarkingVisitorBase", %"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" }
%"class.blink::MarkingVisitorBase" = type { %"class.blink::Visitor", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View", %"class.blink::Worklist<const void *, 16, 4>::View", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View", %"class.blink::Worklist<const void *const *, 256, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::WeakContainersWorklist"*, i64, i32, i32 }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View" = type <{ %"class.blink::Worklist"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View" = type <{ %"class.blink::Worklist.56"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *, 16, 4>::View" = type <{ %"class.blink::Worklist.63"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View" = type <{ %"class.blink::Worklist.70"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *const *, 256, 4>::View" = type <{ %"class.blink::Worklist.77"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View" = type <{ %"class.blink::Worklist.84"*, i32, [4 x i8] }>
%"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" = type { %"class.std::__1::vector", i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.blink::HeapObjectHeader"**, %"class.blink::HeapObjectHeader"**, %"class.std::__1::__compressed_pair.165" }
%"class.blink::HeapObjectHeader" = type { i32, i16, i16 }
%"class.std::__1::__compressed_pair.165" = type { %"struct.std::__1::__compressed_pair_elem.166" }
%"struct.std::__1::__compressed_pair_elem.166" = type { %"class.blink::HeapObjectHeader"** }
%"class.std::__1::unique_ptr.173" = type { %"class.std::__1::__compressed_pair.174" }
%"class.std::__1::__compressed_pair.174" = type { %"struct.std::__1::__compressed_pair_elem.175" }
%"struct.std::__1::__compressed_pair_elem.175" = type { %"class.blink::ThreadState::IncrementalMarkingScheduler"* }
%"class.blink::ThreadState::IncrementalMarkingScheduler" = type opaque
%"class.std::__1::unique_ptr.179" = type { %"class.std::__1::__compressed_pair.180" }
%"class.std::__1::__compressed_pair.180" = type { %"struct.std::__1::__compressed_pair_elem.181" }
%"struct.std::__1::__compressed_pair_elem.181" = type { %"class.blink::MarkingSchedulingOracle"* }
%"class.blink::MarkingSchedulingOracle" = type opaque
%"class.base::JobHandle" = type { %class.scoped_refptr.185 }
%class.scoped_refptr.185 = type { %"class.base::internal::JobTaskSource"* }
%"class.base::internal::JobTaskSource" = type opaque
%"struct.std::__1::atomic.186" = type { %"struct.std::__1::__atomic_base.187" }
%"struct.std::__1::__atomic_base.187" = type { %"struct.std::__1::__cxx_atomic_impl.188" }
%"struct.std::__1::__cxx_atomic_impl.188" = type { %"struct.std::__1::__cxx_atomic_base_impl.189" }
%"struct.std::__1::__cxx_atomic_base_impl.189" = type { i8 }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.base::ThreadLocalStorage::Slot" = type { i32, i32 }
%"struct.blink::GCInfo" = type { void (%"class.blink::Visitor"*, i8*)*, void (i8*)*, { i8*, i8 } (i8*)*, i8 }
%"class.blink::GCInfoTable" = type { %"struct.blink::GCInfo"**, i32, i32, %"class.WTF::Mutex" }
%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.WTF::String" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.WTF::StringImpl"* }
%"class.blink::ItemDetails" = type { %"class.blink::IDLDictionaryBase", %"class.WTF::String", %"class.WTF::String", %"class.blink::Member", %"class.WTF::String", %"class.WTF::String", %"class.blink::Member", %"class.WTF::String", %"class.WTF::String" }
%"class.blink::IDLDictionaryBase" = type { i32 (...)** }
%"class.blink::Member" = type { %"class.blink::MemberBase" }
%"class.blink::MemberBase" = type { %"class.blink::PaymentCurrencyAmount"* }
%"class.blink::PaymentCurrencyAmount" = type opaque
%"class.mojo::StructPtr" = type { %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.payments::mojom::blink::ItemDetails"* }
%"class.payments::mojom::blink::ItemDetails" = type { %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", %"class.mojo::InlinedStructPtr", %"class.WTF::String", %"class.WTF::String", %"class.mojo::InlinedStructPtr", %"class.WTF::String" }
%"class.mojo::InlinedStructPtr" = type <{ %"class.payments::mojom::blink::PaymentCurrencyAmount", i32, [4 x i8] }>
%"class.payments::mojom::blink::PaymentCurrencyAmount" = type { %"class.WTF::String", %"class.WTF::String" }
%"class.blink::PurchaseDetails" = type <{ %"class.blink::IDLDictionaryBase", i8, i8, i8, i8, [4 x i8], %"class.WTF::String", %"class.WTF::String", i64, %"class.WTF::String", i8, [7 x i8] }>
%"class.mojo::StructPtr.2" = type { %"class.std::__1::unique_ptr.3" }
%"class.std::__1::unique_ptr.3" = type { %"class.std::__1::__compressed_pair.4" }
%"class.std::__1::__compressed_pair.4" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"struct.std::__1::__compressed_pair_elem.5" = type { %"class.payments::mojom::blink::PurchaseDetails"* }
%"class.payments::mojom::blink::PurchaseDetails" = type <{ %"class.WTF::String", %"class.WTF::String", i8, [3 x i8], i32, %"class.base::TimeDelta", i8, [7 x i8] }>
%"class.base::TimeDelta" = type { i64 }
%"class.logging::CheckOpResult" = type { i8* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.210" }
%"class.std::__1::__compressed_pair.210" = type { %"struct.std::__1::__compressed_pair_elem.211" }
%"struct.std::__1::__compressed_pair_elem.211" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }
%"class.blink::NormalPageArena" = type { %"class.blink::BaseArena.base", [4 x i8], %"class.blink::FreeList", i8*, i64, i64 }
%"class.blink::BaseArena.base" = type <{ i32 (...)**, %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::ThreadState"*, i32 }>
%"class.blink::FreeList" = type <{ [17 x %"class.blink::FreeListEntry"*], [17 x %"class.blink::FreeListEntry"*], i32, [4 x i8] }>
%"class.blink::FreeListEntry" = type { %"class.blink::HeapObjectHeader", %"class.blink::FreeListEntry"* }
%"class.blink::PlatformAwareObjectStartBitmap" = type { %"class.blink::ObjectStartBitmap" }
%"class.blink::ObjectStartBitmap" = type { i8*, [2048 x i8] }

$_ZN5blink10ThreadHeap8AllocateINS_17IDLDictionaryBaseEEEPhm = comdat any

$_ZN5blink10TraceTraitINS_17IDLDictionaryBaseEE5TraceEPNS_7VisitorEPKv = comdat any

$_ZN5blink8internal14FinalizerTraitINS_17IDLDictionaryBaseEE8FinalizeEPv = comdat any

$_ZN5blink9NameTraitINS_17IDLDictionaryBaseEE7GetNameEPKv = comdat any

$_ZZN5blink11GCInfoTraitINS_17IDLDictionaryBaseEE5IndexEvE7kGcInfo = comdat any

$_ZZN5blink11GCInfoTraitINS_17IDLDictionaryBaseEE5IndexEvE13gc_info_index = comdat any

@.str = private unnamed_addr constant [3 x i8] c"ok\00", align 1
@.str.1 = private unnamed_addr constant [6 x i8] c"error\00", align 1
@.str.2 = private unnamed_addr constant [25 x i8] c"unsupportedPaymentMethod\00", align 1
@.str.3 = private unnamed_addr constant [19 x i8] c"unsupportedContext\00", align 1
@.str.4 = private unnamed_addr constant [17 x i8] c"itemAlreadyOwned\00", align 1
@.str.5 = private unnamed_addr constant [13 x i8] c"itemNotOwned\00", align 1
@.str.6 = private unnamed_addr constant [16 x i8] c"itemUnavailable\00", align 1
@.str.7 = private unnamed_addr constant [21 x i8] c"clientAppUnavailable\00", align 1
@.str.8 = private unnamed_addr constant [15 x i8] c"clientAppError\00", align 1
@.str.9 = private unnamed_addr constant [10 x i8] c"purchased\00", align 1
@.str.10 = private unnamed_addr constant [8 x i8] c"pending\00", align 1
@_ZN5blink11ThreadState16thread_specific_E = external local_unnamed_addr global %"class.WTF::ThreadSpecific"*, align 8
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink11ThreadStateEEEPKcv = private unnamed_addr constant [68 x i8] c"const char *WTF::GetStringWithTypeName() [T = blink::ThreadState *]\00", align 1
@.str.11 = private unnamed_addr constant [23 x i8] c"allocation_size > size\00", align 1
@.str.12 = private unnamed_addr constant [59 x i8] c"../../third_party/blink/renderer/platform/heap/impl/heap.h\00", align 1
@_ZZN5blink11GCInfoTraitINS_17IDLDictionaryBaseEE5IndexEvE7kGcInfo = linkonce_odr hidden constant %"struct.blink::GCInfo" { void (%"class.blink::Visitor"*, i8*)* @_ZN5blink10TraceTraitINS_17IDLDictionaryBaseEE5TraceEPNS_7VisitorEPKv, void (i8*)* @_ZN5blink8internal14FinalizerTraitINS_17IDLDictionaryBaseEE8FinalizeEPv, { i8*, i8 } (i8*)* @_ZN5blink9NameTraitINS_17IDLDictionaryBaseEE7GetNameEPKv, i8 1 }, comdat, align 8
@_ZZN5blink11GCInfoTraitINS_17IDLDictionaryBaseEE5IndexEvE13gc_info_index = linkonce_odr hidden global { { i32 } } zeroinitializer, comdat, align 4
@.str.13 = private unnamed_addr constant [13 x i8] c"InternalNode\00", align 1
@_ZN5blink11GCInfoTable13global_table_E = external local_unnamed_addr global %"class.blink::GCInfoTable"*, align 8

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZN4mojo13TypeConverterIN3WTF6StringEN8payments5mojom30CreateDigitalGoodsResponseCodeEE7ConvertERKS5_(i32* nocapture readonly dereferenceable(4)) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.WTF::String", align 8
  %3 = load i32, i32* %0, align 4
  switch i32 %3, label %8 [
    i32 0, label %4
    i32 1, label %5
    i32 2, label %6
    i32 3, label %7
  ]

4:                                                ; preds = %1
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %2, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i64 2) #6
  br label %9

5:                                                ; preds = %1
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %2, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i64 0, i64 0), i64 5) #6
  br label %9

6:                                                ; preds = %1
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %2, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.2, i64 0, i64 0), i64 24) #6
  br label %9

7:                                                ; preds = %1
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %2, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.3, i64 0, i64 0), i64 18) #6
  br label %9

8:                                                ; preds = %1
  unreachable

9:                                                ; preds = %7, %6, %5, %4
  %10 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %2, i64 0, i32 0, i32 0
  %11 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %10, align 8
  ret %"class.WTF::StringImpl"* %11
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::ItemDetails"* @_ZN4mojo13TypeConverterIPN5blink11ItemDetailsENS_9StructPtrIN8payments5mojom5blink11ItemDetailsEEEE7ConvertERKS9_(%"class.mojo::StructPtr"* nocapture readonly dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.mojo::StructPtr", %"class.mojo::StructPtr"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %3 = load %"class.payments::mojom::blink::ItemDetails"*, %"class.payments::mojom::blink::ItemDetails"** %2, align 8
  %4 = icmp eq %"class.payments::mojom::blink::ItemDetails"* %3, null
  br i1 %4, label %291, label %5

5:                                                ; preds = %1
  %6 = tail call i8* @_ZN5blink10ThreadHeap8AllocateINS_17IDLDictionaryBaseEEEPhm(i64 72) #6
  %7 = bitcast i8* %6 to %"class.blink::ItemDetails"*
  tail call void @_ZN5blink11ItemDetailsC1Ev(%"class.blink::ItemDetails"* %7) #6
  %8 = getelementptr inbounds i8, i8* %6, i64 -4
  %9 = bitcast i8* %8 to i16*
  %10 = load atomic i16, i16* %9 monotonic, align 2
  %11 = or i16 %10, 1
  store atomic i16 %11, i16* %9 release, align 2
  %12 = load %"class.payments::mojom::blink::ItemDetails"*, %"class.payments::mojom::blink::ItemDetails"** %2, align 8
  %13 = getelementptr inbounds i8, i8* %6, i64 40
  %14 = getelementptr inbounds %"class.payments::mojom::blink::ItemDetails", %"class.payments::mojom::blink::ItemDetails"* %12, i64 0, i32 0, i32 0, i32 0
  %15 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %14, align 8
  %16 = icmp eq %"class.WTF::StringImpl"* %15, null
  br i1 %16, label %34, label %17

17:                                               ; preds = %5
  %18 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %15, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %19 = load atomic i32, i32* %18 monotonic, align 4
  %20 = and i32 %19, 2
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %34

22:                                               ; preds = %17
  %23 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %15, i64 0, i32 0
  %24 = load i32, i32* %23, align 4
  %25 = zext i32 %24 to i33
  %26 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %25, i33 1) #6
  %27 = extractvalue { i33, i1 } %26, 1
  %28 = extractvalue { i33, i1 } %26, 0
  %29 = icmp slt i33 %28, 0
  %30 = or i1 %27, %29
  br i1 %30, label %31, label %32, !prof !2

31:                                               ; preds = %22
  tail call void @llvm.trap() #6
  unreachable

32:                                               ; preds = %22
  %33 = trunc i33 %28 to i32
  store i32 %33, i32* %23, align 4
  br label %34

34:                                               ; preds = %32, %17, %5
  %35 = ptrtoint %"class.WTF::StringImpl"* %15 to i64
  %36 = bitcast i8* %13 to i64*
  %37 = bitcast i8* %13 to %"class.WTF::StringImpl"**
  %38 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %37, align 8
  store i64 %35, i64* %36, align 8
  %39 = icmp eq %"class.WTF::StringImpl"* %38, null
  br i1 %39, label %53, label %40

40:                                               ; preds = %34
  %41 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %38, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %42 = load atomic i32, i32* %41 monotonic, align 4
  %43 = and i32 %42, 2
  %44 = icmp eq i32 %43, 0
  %45 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %38, i64 0, i32 0
  %46 = load i32, i32* %45, align 4
  br i1 %44, label %47, label %49

47:                                               ; preds = %40
  %48 = add i32 %46, -1
  store i32 %48, i32* %45, align 4
  br label %49

49:                                               ; preds = %47, %40
  %50 = phi i32 [ %48, %47 ], [ %46, %40 ]
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %52, label %53

52:                                               ; preds = %49
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %38) #6
  br label %53

53:                                               ; preds = %34, %49, %52
  %54 = load %"class.payments::mojom::blink::ItemDetails"*, %"class.payments::mojom::blink::ItemDetails"** %2, align 8
  %55 = getelementptr inbounds i8, i8* %6, i64 64
  %56 = getelementptr inbounds %"class.payments::mojom::blink::ItemDetails", %"class.payments::mojom::blink::ItemDetails"* %54, i64 0, i32 1, i32 0, i32 0
  %57 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %56, align 8
  %58 = icmp eq %"class.WTF::StringImpl"* %57, null
  br i1 %58, label %76, label %59

59:                                               ; preds = %53
  %60 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %57, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %61 = load atomic i32, i32* %60 monotonic, align 4
  %62 = and i32 %61, 2
  %63 = icmp eq i32 %62, 0
  br i1 %63, label %64, label %76

64:                                               ; preds = %59
  %65 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %57, i64 0, i32 0
  %66 = load i32, i32* %65, align 4
  %67 = zext i32 %66 to i33
  %68 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %67, i33 1) #6
  %69 = extractvalue { i33, i1 } %68, 1
  %70 = extractvalue { i33, i1 } %68, 0
  %71 = icmp slt i33 %70, 0
  %72 = or i1 %69, %71
  br i1 %72, label %73, label %74, !prof !2

73:                                               ; preds = %64
  tail call void @llvm.trap() #6
  unreachable

74:                                               ; preds = %64
  %75 = trunc i33 %70 to i32
  store i32 %75, i32* %65, align 4
  br label %76

76:                                               ; preds = %74, %59, %53
  %77 = ptrtoint %"class.WTF::StringImpl"* %57 to i64
  %78 = bitcast i8* %55 to i64*
  %79 = bitcast i8* %55 to %"class.WTF::StringImpl"**
  %80 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %79, align 8
  store i64 %77, i64* %78, align 8
  %81 = icmp eq %"class.WTF::StringImpl"* %80, null
  br i1 %81, label %95, label %82

82:                                               ; preds = %76
  %83 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %80, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %84 = load atomic i32, i32* %83 monotonic, align 4
  %85 = and i32 %84, 2
  %86 = icmp eq i32 %85, 0
  %87 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %80, i64 0, i32 0
  %88 = load i32, i32* %87, align 4
  br i1 %86, label %89, label %91

89:                                               ; preds = %82
  %90 = add i32 %88, -1
  store i32 %90, i32* %87, align 4
  br label %91

91:                                               ; preds = %89, %82
  %92 = phi i32 [ %90, %89 ], [ %88, %82 ]
  %93 = icmp eq i32 %92, 0
  br i1 %93, label %94, label %95

94:                                               ; preds = %91
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %80) #6
  br label %95

95:                                               ; preds = %76, %91, %94
  %96 = load %"class.payments::mojom::blink::ItemDetails"*, %"class.payments::mojom::blink::ItemDetails"** %2, align 8
  %97 = getelementptr inbounds %"class.payments::mojom::blink::ItemDetails", %"class.payments::mojom::blink::ItemDetails"* %96, i64 0, i32 2, i32 0, i32 0
  %98 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %97, align 8
  %99 = icmp eq %"class.WTF::StringImpl"* %98, null
  br i1 %99, label %141, label %100

100:                                              ; preds = %95
  %101 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %98, i64 0, i32 1
  %102 = load i32, i32* %101, align 4
  %103 = icmp eq i32 %102, 0
  br i1 %103, label %141, label %104

104:                                              ; preds = %100
  %105 = getelementptr inbounds i8, i8* %6, i64 8
  %106 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %98, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %107 = load atomic i32, i32* %106 monotonic, align 4
  %108 = and i32 %107, 2
  %109 = icmp eq i32 %108, 0
  br i1 %109, label %110, label %122

110:                                              ; preds = %104
  %111 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %98, i64 0, i32 0
  %112 = load i32, i32* %111, align 4
  %113 = zext i32 %112 to i33
  %114 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %113, i33 1) #6
  %115 = extractvalue { i33, i1 } %114, 1
  %116 = extractvalue { i33, i1 } %114, 0
  %117 = icmp slt i33 %116, 0
  %118 = or i1 %115, %117
  br i1 %118, label %119, label %120, !prof !2

119:                                              ; preds = %110
  tail call void @llvm.trap() #6
  unreachable

120:                                              ; preds = %110
  %121 = trunc i33 %116 to i32
  store i32 %121, i32* %111, align 4
  br label %122

122:                                              ; preds = %120, %104
  %123 = ptrtoint %"class.WTF::StringImpl"* %98 to i64
  %124 = bitcast i8* %105 to i64*
  %125 = bitcast i8* %105 to %"class.WTF::StringImpl"**
  %126 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %125, align 8
  store i64 %123, i64* %124, align 8
  %127 = icmp eq %"class.WTF::StringImpl"* %126, null
  br i1 %127, label %141, label %128

128:                                              ; preds = %122
  %129 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %126, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %130 = load atomic i32, i32* %129 monotonic, align 4
  %131 = and i32 %130, 2
  %132 = icmp eq i32 %131, 0
  %133 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %126, i64 0, i32 0
  %134 = load i32, i32* %133, align 4
  br i1 %132, label %135, label %137

135:                                              ; preds = %128
  %136 = add i32 %134, -1
  store i32 %136, i32* %133, align 4
  br label %137

137:                                              ; preds = %135, %128
  %138 = phi i32 [ %136, %135 ], [ %134, %128 ]
  %139 = icmp eq i32 %138, 0
  br i1 %139, label %140, label %141

140:                                              ; preds = %137
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %126) #6
  br label %141

141:                                              ; preds = %95, %140, %137, %122, %100
  %142 = load %"class.payments::mojom::blink::ItemDetails"*, %"class.payments::mojom::blink::ItemDetails"** %2, align 8
  %143 = getelementptr inbounds %"class.payments::mojom::blink::ItemDetails", %"class.payments::mojom::blink::ItemDetails"* %142, i64 0, i32 3
  %144 = tail call %"class.blink::PaymentCurrencyAmount"* @_ZN5blink26PaymentEventDataConversion23ToPaymentCurrencyAmountERN4mojo16InlinedStructPtrIN8payments5mojom5blink21PaymentCurrencyAmountEEE(%"class.mojo::InlinedStructPtr"* dereferenceable(24) %143) #6
  tail call void @_ZN5blink11ItemDetails8setPriceEPNS_21PaymentCurrencyAmountE(%"class.blink::ItemDetails"* %7, %"class.blink::PaymentCurrencyAmount"* %144) #6
  %145 = load %"class.payments::mojom::blink::ItemDetails"*, %"class.payments::mojom::blink::ItemDetails"** %2, align 8
  %146 = getelementptr inbounds %"class.payments::mojom::blink::ItemDetails", %"class.payments::mojom::blink::ItemDetails"* %145, i64 0, i32 4, i32 0, i32 0
  %147 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %146, align 8
  %148 = icmp eq %"class.WTF::StringImpl"* %147, null
  br i1 %148, label %190, label %149

149:                                              ; preds = %141
  %150 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %147, i64 0, i32 1
  %151 = load i32, i32* %150, align 4
  %152 = icmp eq i32 %151, 0
  br i1 %152, label %190, label %153

153:                                              ; preds = %149
  %154 = getelementptr inbounds i8, i8* %6, i64 56
  %155 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %147, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %156 = load atomic i32, i32* %155 monotonic, align 4
  %157 = and i32 %156, 2
  %158 = icmp eq i32 %157, 0
  br i1 %158, label %159, label %171

159:                                              ; preds = %153
  %160 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %147, i64 0, i32 0
  %161 = load i32, i32* %160, align 4
  %162 = zext i32 %161 to i33
  %163 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %162, i33 1) #6
  %164 = extractvalue { i33, i1 } %163, 1
  %165 = extractvalue { i33, i1 } %163, 0
  %166 = icmp slt i33 %165, 0
  %167 = or i1 %164, %166
  br i1 %167, label %168, label %169, !prof !2

168:                                              ; preds = %159
  tail call void @llvm.trap() #6
  unreachable

169:                                              ; preds = %159
  %170 = trunc i33 %165 to i32
  store i32 %170, i32* %160, align 4
  br label %171

171:                                              ; preds = %169, %153
  %172 = ptrtoint %"class.WTF::StringImpl"* %147 to i64
  %173 = bitcast i8* %154 to i64*
  %174 = bitcast i8* %154 to %"class.WTF::StringImpl"**
  %175 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %174, align 8
  store i64 %172, i64* %173, align 8
  %176 = icmp eq %"class.WTF::StringImpl"* %175, null
  br i1 %176, label %190, label %177

177:                                              ; preds = %171
  %178 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %175, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %179 = load atomic i32, i32* %178 monotonic, align 4
  %180 = and i32 %179, 2
  %181 = icmp eq i32 %180, 0
  %182 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %175, i64 0, i32 0
  %183 = load i32, i32* %182, align 4
  br i1 %181, label %184, label %186

184:                                              ; preds = %177
  %185 = add i32 %183, -1
  store i32 %185, i32* %182, align 4
  br label %186

186:                                              ; preds = %184, %177
  %187 = phi i32 [ %185, %184 ], [ %183, %177 ]
  %188 = icmp eq i32 %187, 0
  br i1 %188, label %189, label %190

189:                                              ; preds = %186
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %175) #6
  br label %190

190:                                              ; preds = %141, %189, %186, %171, %149
  %191 = load %"class.payments::mojom::blink::ItemDetails"*, %"class.payments::mojom::blink::ItemDetails"** %2, align 8
  %192 = getelementptr inbounds %"class.payments::mojom::blink::ItemDetails", %"class.payments::mojom::blink::ItemDetails"* %191, i64 0, i32 5, i32 0, i32 0
  %193 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %192, align 8
  %194 = icmp eq %"class.WTF::StringImpl"* %193, null
  br i1 %194, label %236, label %195

195:                                              ; preds = %190
  %196 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %193, i64 0, i32 1
  %197 = load i32, i32* %196, align 4
  %198 = icmp eq i32 %197, 0
  br i1 %198, label %236, label %199

199:                                              ; preds = %195
  %200 = getelementptr inbounds i8, i8* %6, i64 16
  %201 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %193, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %202 = load atomic i32, i32* %201 monotonic, align 4
  %203 = and i32 %202, 2
  %204 = icmp eq i32 %203, 0
  br i1 %204, label %205, label %217

205:                                              ; preds = %199
  %206 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %193, i64 0, i32 0
  %207 = load i32, i32* %206, align 4
  %208 = zext i32 %207 to i33
  %209 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %208, i33 1) #6
  %210 = extractvalue { i33, i1 } %209, 1
  %211 = extractvalue { i33, i1 } %209, 0
  %212 = icmp slt i33 %211, 0
  %213 = or i1 %210, %212
  br i1 %213, label %214, label %215, !prof !2

214:                                              ; preds = %205
  tail call void @llvm.trap() #6
  unreachable

215:                                              ; preds = %205
  %216 = trunc i33 %211 to i32
  store i32 %216, i32* %206, align 4
  br label %217

217:                                              ; preds = %215, %199
  %218 = ptrtoint %"class.WTF::StringImpl"* %193 to i64
  %219 = bitcast i8* %200 to i64*
  %220 = bitcast i8* %200 to %"class.WTF::StringImpl"**
  %221 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %220, align 8
  store i64 %218, i64* %219, align 8
  %222 = icmp eq %"class.WTF::StringImpl"* %221, null
  br i1 %222, label %236, label %223

223:                                              ; preds = %217
  %224 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %221, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %225 = load atomic i32, i32* %224 monotonic, align 4
  %226 = and i32 %225, 2
  %227 = icmp eq i32 %226, 0
  %228 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %221, i64 0, i32 0
  %229 = load i32, i32* %228, align 4
  br i1 %227, label %230, label %232

230:                                              ; preds = %223
  %231 = add i32 %229, -1
  store i32 %231, i32* %228, align 4
  br label %232

232:                                              ; preds = %230, %223
  %233 = phi i32 [ %231, %230 ], [ %229, %223 ]
  %234 = icmp eq i32 %233, 0
  br i1 %234, label %235, label %236

235:                                              ; preds = %232
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %221) #6
  br label %236

236:                                              ; preds = %190, %235, %232, %217, %195
  %237 = load %"class.payments::mojom::blink::ItemDetails"*, %"class.payments::mojom::blink::ItemDetails"** %2, align 8
  %238 = getelementptr inbounds %"class.payments::mojom::blink::ItemDetails", %"class.payments::mojom::blink::ItemDetails"* %237, i64 0, i32 6, i32 1
  %239 = load i32, i32* %238, align 8
  %240 = icmp eq i32 %239, 0
  br i1 %240, label %245, label %241

241:                                              ; preds = %236
  %242 = getelementptr inbounds %"class.payments::mojom::blink::ItemDetails", %"class.payments::mojom::blink::ItemDetails"* %237, i64 0, i32 6
  %243 = tail call %"class.blink::PaymentCurrencyAmount"* @_ZN5blink26PaymentEventDataConversion23ToPaymentCurrencyAmountERN4mojo16InlinedStructPtrIN8payments5mojom5blink21PaymentCurrencyAmountEEE(%"class.mojo::InlinedStructPtr"* dereferenceable(24) %242) #6
  tail call void @_ZN5blink11ItemDetails20setIntroductoryPriceEPNS_21PaymentCurrencyAmountE(%"class.blink::ItemDetails"* %7, %"class.blink::PaymentCurrencyAmount"* %243) #6
  %244 = load %"class.payments::mojom::blink::ItemDetails"*, %"class.payments::mojom::blink::ItemDetails"** %2, align 8
  br label %245

245:                                              ; preds = %236, %241
  %246 = phi %"class.payments::mojom::blink::ItemDetails"* [ %237, %236 ], [ %244, %241 ]
  %247 = getelementptr inbounds %"class.payments::mojom::blink::ItemDetails", %"class.payments::mojom::blink::ItemDetails"* %246, i64 0, i32 7, i32 0, i32 0
  %248 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %247, align 8
  %249 = icmp eq %"class.WTF::StringImpl"* %248, null
  br i1 %249, label %291, label %250

250:                                              ; preds = %245
  %251 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %248, i64 0, i32 1
  %252 = load i32, i32* %251, align 4
  %253 = icmp eq i32 %252, 0
  br i1 %253, label %291, label %254

254:                                              ; preds = %250
  %255 = getelementptr inbounds i8, i8* %6, i64 32
  %256 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %248, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %257 = load atomic i32, i32* %256 monotonic, align 4
  %258 = and i32 %257, 2
  %259 = icmp eq i32 %258, 0
  br i1 %259, label %260, label %272

260:                                              ; preds = %254
  %261 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %248, i64 0, i32 0
  %262 = load i32, i32* %261, align 4
  %263 = zext i32 %262 to i33
  %264 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %263, i33 1) #6
  %265 = extractvalue { i33, i1 } %264, 1
  %266 = extractvalue { i33, i1 } %264, 0
  %267 = icmp slt i33 %266, 0
  %268 = or i1 %265, %267
  br i1 %268, label %269, label %270, !prof !2

269:                                              ; preds = %260
  tail call void @llvm.trap() #6
  unreachable

270:                                              ; preds = %260
  %271 = trunc i33 %266 to i32
  store i32 %271, i32* %261, align 4
  br label %272

272:                                              ; preds = %270, %254
  %273 = ptrtoint %"class.WTF::StringImpl"* %248 to i64
  %274 = bitcast i8* %255 to i64*
  %275 = bitcast i8* %255 to %"class.WTF::StringImpl"**
  %276 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %275, align 8
  store i64 %273, i64* %274, align 8
  %277 = icmp eq %"class.WTF::StringImpl"* %276, null
  br i1 %277, label %291, label %278

278:                                              ; preds = %272
  %279 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %276, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %280 = load atomic i32, i32* %279 monotonic, align 4
  %281 = and i32 %280, 2
  %282 = icmp eq i32 %281, 0
  %283 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %276, i64 0, i32 0
  %284 = load i32, i32* %283, align 4
  br i1 %282, label %285, label %287

285:                                              ; preds = %278
  %286 = add i32 %284, -1
  store i32 %286, i32* %283, align 4
  br label %287

287:                                              ; preds = %285, %278
  %288 = phi i32 [ %286, %285 ], [ %284, %278 ]
  %289 = icmp eq i32 %288, 0
  br i1 %289, label %290, label %291

290:                                              ; preds = %287
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %276) #6
  br label %291

291:                                              ; preds = %245, %1, %290, %287, %272, %250
  %292 = phi %"class.blink::ItemDetails"* [ null, %1 ], [ %7, %250 ], [ %7, %245 ], [ %7, %272 ], [ %7, %287 ], [ %7, %290 ]
  ret %"class.blink::ItemDetails"* %292
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZN5blink11ItemDetails8setPriceEPNS_21PaymentCurrencyAmountE(%"class.blink::ItemDetails"*, %"class.blink::PaymentCurrencyAmount"*) local_unnamed_addr #2

declare %"class.blink::PaymentCurrencyAmount"* @_ZN5blink26PaymentEventDataConversion23ToPaymentCurrencyAmountERN4mojo16InlinedStructPtrIN8payments5mojom5blink21PaymentCurrencyAmountEEE(%"class.mojo::InlinedStructPtr"* dereferenceable(24)) local_unnamed_addr #2

declare void @_ZN5blink11ItemDetails20setIntroductoryPriceEPNS_21PaymentCurrencyAmountE(%"class.blink::ItemDetails"*, %"class.blink::PaymentCurrencyAmount"*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZN4mojo13TypeConverterIN3WTF6StringEN8payments5mojom19BillingResponseCodeEE7ConvertERKS5_(i32* nocapture readonly dereferenceable(4)) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.WTF::String", align 8
  %3 = load i32, i32* %0, align 4
  switch i32 %3, label %11 [
    i32 0, label %4
    i32 1, label %5
    i32 2, label %6
    i32 3, label %7
    i32 4, label %8
    i32 5, label %9
    i32 6, label %10
  ]

4:                                                ; preds = %1
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %2, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i64 2) #6
  br label %12

5:                                                ; preds = %1
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %2, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i64 0, i64 0), i64 5) #6
  br label %12

6:                                                ; preds = %1
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %2, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.4, i64 0, i64 0), i64 16) #6
  br label %12

7:                                                ; preds = %1
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %2, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5, i64 0, i64 0), i64 12) #6
  br label %12

8:                                                ; preds = %1
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %2, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.6, i64 0, i64 0), i64 15) #6
  br label %12

9:                                                ; preds = %1
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %2, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.7, i64 0, i64 0), i64 20) #6
  br label %12

10:                                               ; preds = %1
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %2, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.8, i64 0, i64 0), i64 14) #6
  br label %12

11:                                               ; preds = %1
  unreachable

12:                                               ; preds = %10, %9, %8, %7, %6, %5, %4
  %13 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %2, i64 0, i32 0, i32 0
  %14 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %13, align 8
  ret %"class.WTF::StringImpl"* %14
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::PurchaseDetails"* @_ZN4mojo13TypeConverterIPN5blink15PurchaseDetailsENS_9StructPtrIN8payments5mojom5blink15PurchaseDetailsEEEE7ConvertERKS9_(%"class.mojo::StructPtr.2"* nocapture readonly dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.WTF::String", align 8
  %3 = alloca %"class.WTF::String", align 8
  %4 = getelementptr inbounds %"class.mojo::StructPtr.2", %"class.mojo::StructPtr.2"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %5 = load %"class.payments::mojom::blink::PurchaseDetails"*, %"class.payments::mojom::blink::PurchaseDetails"** %4, align 8
  %6 = icmp eq %"class.payments::mojom::blink::PurchaseDetails"* %5, null
  br i1 %6, label %236, label %7

7:                                                ; preds = %1
  %8 = tail call i8* @_ZN5blink10ThreadHeap8AllocateINS_17IDLDictionaryBaseEEEPhm(i64 56) #6
  %9 = bitcast i8* %8 to %"class.blink::PurchaseDetails"*
  tail call void @_ZN5blink15PurchaseDetailsC1Ev(%"class.blink::PurchaseDetails"* %9) #6
  %10 = getelementptr inbounds i8, i8* %8, i64 -4
  %11 = bitcast i8* %10 to i16*
  %12 = load atomic i16, i16* %11 monotonic, align 2
  %13 = or i16 %12, 1
  store atomic i16 %13, i16* %11 release, align 2
  %14 = load %"class.payments::mojom::blink::PurchaseDetails"*, %"class.payments::mojom::blink::PurchaseDetails"** %4, align 8
  %15 = getelementptr inbounds i8, i8* %8, i64 16
  %16 = getelementptr inbounds %"class.payments::mojom::blink::PurchaseDetails", %"class.payments::mojom::blink::PurchaseDetails"* %14, i64 0, i32 0, i32 0, i32 0
  %17 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %16, align 8
  %18 = icmp eq %"class.WTF::StringImpl"* %17, null
  br i1 %18, label %36, label %19

19:                                               ; preds = %7
  %20 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %17, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %21 = load atomic i32, i32* %20 monotonic, align 4
  %22 = and i32 %21, 2
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %24, label %36

24:                                               ; preds = %19
  %25 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %17, i64 0, i32 0
  %26 = load i32, i32* %25, align 4
  %27 = zext i32 %26 to i33
  %28 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %27, i33 1) #6
  %29 = extractvalue { i33, i1 } %28, 1
  %30 = extractvalue { i33, i1 } %28, 0
  %31 = icmp slt i33 %30, 0
  %32 = or i1 %29, %31
  br i1 %32, label %33, label %34, !prof !2

33:                                               ; preds = %24
  tail call void @llvm.trap() #6
  unreachable

34:                                               ; preds = %24
  %35 = trunc i33 %30 to i32
  store i32 %35, i32* %25, align 4
  br label %36

36:                                               ; preds = %34, %19, %7
  %37 = ptrtoint %"class.WTF::StringImpl"* %17 to i64
  %38 = bitcast i8* %15 to i64*
  %39 = bitcast i8* %15 to %"class.WTF::StringImpl"**
  %40 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %39, align 8
  store i64 %37, i64* %38, align 8
  %41 = icmp eq %"class.WTF::StringImpl"* %40, null
  br i1 %41, label %55, label %42

42:                                               ; preds = %36
  %43 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %40, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %44 = load atomic i32, i32* %43 monotonic, align 4
  %45 = and i32 %44, 2
  %46 = icmp eq i32 %45, 0
  %47 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %40, i64 0, i32 0
  %48 = load i32, i32* %47, align 4
  br i1 %46, label %49, label %51

49:                                               ; preds = %42
  %50 = add i32 %48, -1
  store i32 %50, i32* %47, align 4
  br label %51

51:                                               ; preds = %49, %42
  %52 = phi i32 [ %50, %49 ], [ %48, %42 ]
  %53 = icmp eq i32 %52, 0
  br i1 %53, label %54, label %55

54:                                               ; preds = %51
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %40) #6
  br label %55

55:                                               ; preds = %36, %51, %54
  %56 = load %"class.payments::mojom::blink::PurchaseDetails"*, %"class.payments::mojom::blink::PurchaseDetails"** %4, align 8
  %57 = getelementptr inbounds i8, i8* %8, i64 40
  %58 = getelementptr inbounds %"class.payments::mojom::blink::PurchaseDetails", %"class.payments::mojom::blink::PurchaseDetails"* %56, i64 0, i32 1, i32 0, i32 0
  %59 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %58, align 8
  %60 = icmp eq %"class.WTF::StringImpl"* %59, null
  br i1 %60, label %78, label %61

61:                                               ; preds = %55
  %62 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %59, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %63 = load atomic i32, i32* %62 monotonic, align 4
  %64 = and i32 %63, 2
  %65 = icmp eq i32 %64, 0
  br i1 %65, label %66, label %78

66:                                               ; preds = %61
  %67 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %59, i64 0, i32 0
  %68 = load i32, i32* %67, align 4
  %69 = zext i32 %68 to i33
  %70 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %69, i33 1) #6
  %71 = extractvalue { i33, i1 } %70, 1
  %72 = extractvalue { i33, i1 } %70, 0
  %73 = icmp slt i33 %72, 0
  %74 = or i1 %71, %73
  br i1 %74, label %75, label %76, !prof !2

75:                                               ; preds = %66
  tail call void @llvm.trap() #6
  unreachable

76:                                               ; preds = %66
  %77 = trunc i33 %72 to i32
  store i32 %77, i32* %67, align 4
  br label %78

78:                                               ; preds = %76, %61, %55
  %79 = ptrtoint %"class.WTF::StringImpl"* %59 to i64
  %80 = bitcast i8* %57 to i64*
  %81 = bitcast i8* %57 to %"class.WTF::StringImpl"**
  %82 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %81, align 8
  store i64 %79, i64* %80, align 8
  %83 = icmp eq %"class.WTF::StringImpl"* %82, null
  br i1 %83, label %97, label %84

84:                                               ; preds = %78
  %85 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %82, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %86 = load atomic i32, i32* %85 monotonic, align 4
  %87 = and i32 %86, 2
  %88 = icmp eq i32 %87, 0
  %89 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %82, i64 0, i32 0
  %90 = load i32, i32* %89, align 4
  br i1 %88, label %91, label %93

91:                                               ; preds = %84
  %92 = add i32 %90, -1
  store i32 %92, i32* %89, align 4
  br label %93

93:                                               ; preds = %91, %84
  %94 = phi i32 [ %92, %91 ], [ %90, %84 ]
  %95 = icmp eq i32 %94, 0
  br i1 %95, label %96, label %97

96:                                               ; preds = %93
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %82) #6
  br label %97

97:                                               ; preds = %78, %93, %96
  %98 = load %"class.payments::mojom::blink::PurchaseDetails"*, %"class.payments::mojom::blink::PurchaseDetails"** %4, align 8
  %99 = getelementptr inbounds %"class.payments::mojom::blink::PurchaseDetails", %"class.payments::mojom::blink::PurchaseDetails"* %98, i64 0, i32 2
  %100 = load i8, i8* %99, align 8, !range !3
  %101 = getelementptr inbounds i8, i8* %8, i64 11
  store i8 %100, i8* %101, align 1
  %102 = getelementptr inbounds i8, i8* %8, i64 8
  store i8 1, i8* %102, align 8
  %103 = load %"class.payments::mojom::blink::PurchaseDetails"*, %"class.payments::mojom::blink::PurchaseDetails"** %4, align 8
  %104 = getelementptr inbounds %"class.payments::mojom::blink::PurchaseDetails", %"class.payments::mojom::blink::PurchaseDetails"* %103, i64 0, i32 4
  %105 = load i32, i32* %104, align 4
  switch i32 %105, label %224 [
    i32 2, label %164
    i32 1, label %106
  ]

106:                                              ; preds = %97
  %107 = bitcast %"class.WTF::String"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %107) #6
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %2, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.9, i64 0, i64 0), i64 9) #6
  %108 = getelementptr inbounds i8, i8* %8, i64 24
  %109 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %2, i64 0, i32 0, i32 0
  %110 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %109, align 8
  %111 = icmp eq %"class.WTF::StringImpl"* %110, null
  br i1 %111, label %129, label %112

112:                                              ; preds = %106
  %113 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %110, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %114 = load atomic i32, i32* %113 monotonic, align 4
  %115 = and i32 %114, 2
  %116 = icmp eq i32 %115, 0
  br i1 %116, label %117, label %129

117:                                              ; preds = %112
  %118 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %110, i64 0, i32 0
  %119 = load i32, i32* %118, align 4
  %120 = zext i32 %119 to i33
  %121 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %120, i33 1) #6
  %122 = extractvalue { i33, i1 } %121, 1
  %123 = extractvalue { i33, i1 } %121, 0
  %124 = icmp slt i33 %123, 0
  %125 = or i1 %122, %124
  br i1 %125, label %126, label %127, !prof !2

126:                                              ; preds = %117
  call void @llvm.trap() #6
  unreachable

127:                                              ; preds = %117
  %128 = trunc i33 %123 to i32
  store i32 %128, i32* %118, align 4
  br label %129

129:                                              ; preds = %127, %112, %106
  %130 = ptrtoint %"class.WTF::StringImpl"* %110 to i64
  %131 = bitcast i8* %108 to i64*
  %132 = bitcast i8* %108 to %"class.WTF::StringImpl"**
  %133 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %132, align 8
  store i64 %130, i64* %131, align 8
  %134 = icmp eq %"class.WTF::StringImpl"* %133, null
  br i1 %134, label %148, label %135

135:                                              ; preds = %129
  %136 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %133, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %137 = load atomic i32, i32* %136 monotonic, align 4
  %138 = and i32 %137, 2
  %139 = icmp eq i32 %138, 0
  %140 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %133, i64 0, i32 0
  %141 = load i32, i32* %140, align 4
  br i1 %139, label %142, label %144

142:                                              ; preds = %135
  %143 = add i32 %141, -1
  store i32 %143, i32* %140, align 4
  br label %144

144:                                              ; preds = %142, %135
  %145 = phi i32 [ %143, %142 ], [ %141, %135 ]
  %146 = icmp eq i32 %145, 0
  br i1 %146, label %147, label %148

147:                                              ; preds = %144
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %133) #6
  br label %148

148:                                              ; preds = %129, %144, %147
  %149 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %109, align 8
  %150 = icmp eq %"class.WTF::StringImpl"* %149, null
  br i1 %150, label %222, label %151

151:                                              ; preds = %148
  %152 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %149, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %153 = load atomic i32, i32* %152 monotonic, align 4
  %154 = and i32 %153, 2
  %155 = icmp eq i32 %154, 0
  %156 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %149, i64 0, i32 0
  %157 = load i32, i32* %156, align 4
  br i1 %155, label %158, label %160

158:                                              ; preds = %151
  %159 = add i32 %157, -1
  store i32 %159, i32* %156, align 4
  br label %160

160:                                              ; preds = %158, %151
  %161 = phi i32 [ %159, %158 ], [ %157, %151 ]
  %162 = icmp eq i32 %161, 0
  br i1 %162, label %163, label %222

163:                                              ; preds = %160
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %149) #6
  br label %222

164:                                              ; preds = %97
  %165 = bitcast %"class.WTF::String"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %165) #6
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %3, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.10, i64 0, i64 0), i64 7) #6
  %166 = getelementptr inbounds i8, i8* %8, i64 24
  %167 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %3, i64 0, i32 0, i32 0
  %168 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %167, align 8
  %169 = icmp eq %"class.WTF::StringImpl"* %168, null
  br i1 %169, label %187, label %170

170:                                              ; preds = %164
  %171 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %168, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %172 = load atomic i32, i32* %171 monotonic, align 4
  %173 = and i32 %172, 2
  %174 = icmp eq i32 %173, 0
  br i1 %174, label %175, label %187

175:                                              ; preds = %170
  %176 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %168, i64 0, i32 0
  %177 = load i32, i32* %176, align 4
  %178 = zext i32 %177 to i33
  %179 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %178, i33 1) #6
  %180 = extractvalue { i33, i1 } %179, 1
  %181 = extractvalue { i33, i1 } %179, 0
  %182 = icmp slt i33 %181, 0
  %183 = or i1 %180, %182
  br i1 %183, label %184, label %185, !prof !2

184:                                              ; preds = %175
  call void @llvm.trap() #6
  unreachable

185:                                              ; preds = %175
  %186 = trunc i33 %181 to i32
  store i32 %186, i32* %176, align 4
  br label %187

187:                                              ; preds = %185, %170, %164
  %188 = ptrtoint %"class.WTF::StringImpl"* %168 to i64
  %189 = bitcast i8* %166 to i64*
  %190 = bitcast i8* %166 to %"class.WTF::StringImpl"**
  %191 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %190, align 8
  store i64 %188, i64* %189, align 8
  %192 = icmp eq %"class.WTF::StringImpl"* %191, null
  br i1 %192, label %206, label %193

193:                                              ; preds = %187
  %194 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %191, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %195 = load atomic i32, i32* %194 monotonic, align 4
  %196 = and i32 %195, 2
  %197 = icmp eq i32 %196, 0
  %198 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %191, i64 0, i32 0
  %199 = load i32, i32* %198, align 4
  br i1 %197, label %200, label %202

200:                                              ; preds = %193
  %201 = add i32 %199, -1
  store i32 %201, i32* %198, align 4
  br label %202

202:                                              ; preds = %200, %193
  %203 = phi i32 [ %201, %200 ], [ %199, %193 ]
  %204 = icmp eq i32 %203, 0
  br i1 %204, label %205, label %206

205:                                              ; preds = %202
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %191) #6
  br label %206

206:                                              ; preds = %187, %202, %205
  %207 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %167, align 8
  %208 = icmp eq %"class.WTF::StringImpl"* %207, null
  br i1 %208, label %222, label %209

209:                                              ; preds = %206
  %210 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %207, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %211 = load atomic i32, i32* %210 monotonic, align 4
  %212 = and i32 %211, 2
  %213 = icmp eq i32 %212, 0
  %214 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %207, i64 0, i32 0
  %215 = load i32, i32* %214, align 4
  br i1 %213, label %216, label %218

216:                                              ; preds = %209
  %217 = add i32 %215, -1
  store i32 %217, i32* %214, align 4
  br label %218

218:                                              ; preds = %216, %209
  %219 = phi i32 [ %217, %216 ], [ %215, %209 ]
  %220 = icmp eq i32 %219, 0
  br i1 %220, label %221, label %222

221:                                              ; preds = %218
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %207) #6
  br label %222

222:                                              ; preds = %221, %218, %206, %163, %160, %148
  %223 = phi i8* [ %107, %148 ], [ %107, %160 ], [ %107, %163 ], [ %165, %206 ], [ %165, %218 ], [ %165, %221 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %223) #6
  br label %224

224:                                              ; preds = %222, %97
  %225 = load %"class.payments::mojom::blink::PurchaseDetails"*, %"class.payments::mojom::blink::PurchaseDetails"** %4, align 8
  %226 = getelementptr inbounds %"class.payments::mojom::blink::PurchaseDetails", %"class.payments::mojom::blink::PurchaseDetails"* %225, i64 0, i32 5
  %227 = call i64 @_ZNK4base9TimeDelta14InMillisecondsEv(%"class.base::TimeDelta"* %226) #6
  %228 = getelementptr inbounds i8, i8* %8, i64 32
  %229 = bitcast i8* %228 to i64*
  store i64 %227, i64* %229, align 8
  %230 = getelementptr inbounds i8, i8* %8, i64 9
  store i8 1, i8* %230, align 1
  %231 = load %"class.payments::mojom::blink::PurchaseDetails"*, %"class.payments::mojom::blink::PurchaseDetails"** %4, align 8
  %232 = getelementptr inbounds %"class.payments::mojom::blink::PurchaseDetails", %"class.payments::mojom::blink::PurchaseDetails"* %231, i64 0, i32 6
  %233 = load i8, i8* %232, align 8, !range !3
  %234 = getelementptr inbounds i8, i8* %8, i64 48
  store i8 %233, i8* %234, align 8
  %235 = getelementptr inbounds i8, i8* %8, i64 10
  store i8 1, i8* %235, align 2
  br label %236

236:                                              ; preds = %1, %224
  %237 = phi %"class.blink::PurchaseDetails"* [ %9, %224 ], [ null, %1 ]
  ret %"class.blink::PurchaseDetails"* %237
}

declare i64 @_ZNK4base9TimeDelta14InMillisecondsEv(%"class.base::TimeDelta"*) local_unnamed_addr #2

declare void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"*, i8*, i64) unnamed_addr #2

declare void @_ZN5blink11ItemDetailsC1Ev(%"class.blink::ItemDetails"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZN5blink10ThreadHeap8AllocateINS_17IDLDictionaryBaseEEEPhm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = load %"class.WTF::ThreadSpecific"*, %"class.WTF::ThreadSpecific"** @_ZN5blink11ThreadState16thread_specific_E, align 8
  %6 = getelementptr inbounds %"class.WTF::ThreadSpecific", %"class.WTF::ThreadSpecific"* %5, i64 0, i32 1
  %7 = tail call i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"* %6) #6
  %8 = icmp eq i8* %7, null
  br i1 %8, label %9, label %11, !prof !2

9:                                                ; preds = %1
  %10 = tail call i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64 8, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink11ThreadStateEEEPKcv, i64 0, i64 0)) #6
  tail call void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"* %6, i8* %10) #6
  br label %11

11:                                               ; preds = %1, %9
  %12 = phi i8* [ %10, %9 ], [ %7, %1 ]
  %13 = bitcast i8* %12 to %"class.blink::ThreadState"**
  %14 = load %"class.blink::ThreadState"*, %"class.blink::ThreadState"** %13, align 8
  %15 = getelementptr inbounds %"class.blink::ThreadState", %"class.blink::ThreadState"* %14, i64 0, i32 0, i32 0, i32 0, i32 0
  %16 = load %"class.blink::ThreadHeap"*, %"class.blink::ThreadHeap"** %15, align 8
  %17 = icmp ult i64 %0, 64
  %18 = icmp ugt i64 %0, 31
  %19 = zext i1 %18 to i64
  %20 = icmp ult i64 %0, 128
  %21 = select i1 %20, i64 2, i64 3
  %22 = select i1 %17, i64 %19, i64 %21
  %23 = load atomic i32, i32* getelementptr inbounds ({ { i32 } }, { { i32 } }* @_ZZN5blink11GCInfoTraitINS_17IDLDictionaryBaseEE5IndexEvE13gc_info_index, i64 0, i32 0, i32 0) acquire, align 4
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %25, label %28

25:                                               ; preds = %11
  %26 = load %"class.blink::GCInfoTable"*, %"class.blink::GCInfoTable"** @_ZN5blink11GCInfoTable13global_table_E, align 8
  %27 = tail call i32 @_ZN5blink11GCInfoTable17EnsureGCInfoIndexEPKNS_6GCInfoEPNSt3__16atomicIjEE(%"class.blink::GCInfoTable"* %26, %"struct.blink::GCInfo"* nonnull @_ZZN5blink11GCInfoTraitINS_17IDLDictionaryBaseEE5IndexEvE7kGcInfo, %"struct.std::__1::atomic"* bitcast ({ { i32 } }* @_ZZN5blink11GCInfoTraitINS_17IDLDictionaryBaseEE5IndexEvE13gc_info_index to %"struct.std::__1::atomic"*)) #6
  br label %28

28:                                               ; preds = %11, %25
  %29 = phi i32 [ %23, %11 ], [ %27, %25 ]
  %30 = getelementptr inbounds %"class.blink::ThreadHeap", %"class.blink::ThreadHeap"* %16, i64 0, i32 19, i64 %22
  %31 = bitcast %"class.blink::BaseArena"** %30 to %"class.blink::NormalPageArena"**
  %32 = load %"class.blink::NormalPageArena"*, %"class.blink::NormalPageArena"** %31, align 8
  %33 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %33) #6
  %34 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %34, align 8
  %35 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %35) #6
  %36 = icmp ult i64 %0, -8
  br i1 %36, label %37, label %38

37:                                               ; preds = %28
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %35) #6
  store i8* null, i8** %34, align 8
  br label %48

38:                                               ; preds = %28
  %39 = add nsw i64 %0, 8
  %40 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %39) #6
  %41 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #6
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.11, i64 0, i64 0), i8* %40, i8* %41) #6
  %42 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %43 = load i8*, i8** %42, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %35) #6
  store i8* %43, i8** %34, align 8
  %44 = icmp eq i8* %43, null
  br i1 %44, label %48, label %45

45:                                               ; preds = %38
  %46 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %46) #6
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.12, i64 0, i64 0), i32 246, %"class.logging::CheckOpResult"* nonnull %3) #6
  %47 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #6
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %46) #6
  br label %48

48:                                               ; preds = %37, %38, %45
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %33) #6
  %49 = add i64 %0, 15
  %50 = and i64 %49, -8
  %51 = getelementptr inbounds %"class.blink::NormalPageArena", %"class.blink::NormalPageArena"* %32, i64 0, i32 4
  %52 = load i64, i64* %51, align 8
  %53 = icmp ult i64 %52, %50
  br i1 %53, label %86, label %54, !prof !2

54:                                               ; preds = %48
  %55 = getelementptr inbounds %"class.blink::NormalPageArena", %"class.blink::NormalPageArena"* %32, i64 0, i32 3
  %56 = load i8*, i8** %55, align 8
  %57 = getelementptr inbounds i8, i8* %56, i64 %50
  store i8* %57, i8** %55, align 8
  %58 = sub i64 %52, %50
  store i64 %58, i64* %51, align 8
  %59 = bitcast i8* %56 to i32*
  store i32 0, i32* %59, align 4
  %60 = getelementptr inbounds i8, i8* %56, i64 4
  %61 = bitcast i8* %60 to i16*
  %62 = trunc i32 %29 to i16
  %63 = shl i16 %62, 2
  store atomic i16 %63, i16* %61 monotonic, align 2
  %64 = lshr exact i64 %50, 1
  %65 = trunc i64 %64 to i16
  %66 = getelementptr inbounds i8, i8* %56, i64 6
  %67 = bitcast i8* %66 to i16*
  store i16 %65, i16* %67, align 2
  %68 = ptrtoint i8* %56 to i64
  %69 = and i64 %68, -131072
  %70 = inttoptr i64 %69 to i8*
  %71 = getelementptr inbounds i8, i8* %70, i64 4400
  %72 = bitcast i8* %71 to %"class.blink::PlatformAwareObjectStartBitmap"*
  %73 = bitcast i8* %71 to i64*
  %74 = load i64, i64* %73, align 16
  %75 = sub i64 %68, %74
  %76 = lshr i64 %75, 3
  %77 = lshr i64 %75, 6
  %78 = getelementptr inbounds %"class.blink::PlatformAwareObjectStartBitmap", %"class.blink::PlatformAwareObjectStartBitmap"* %72, i64 0, i32 0, i32 1, i64 %77
  %79 = load i8, i8* %78, align 1
  %80 = trunc i64 %76 to i32
  %81 = and i32 %80, 7
  %82 = shl i32 1, %81
  %83 = trunc i32 %82 to i8
  %84 = or i8 %79, %83
  store atomic i8 %84, i8* %78 release, align 1
  %85 = getelementptr inbounds i8, i8* %56, i64 8
  br label %89

86:                                               ; preds = %48
  %87 = zext i32 %29 to i64
  %88 = call i8* @_ZN5blink15NormalPageArena17OutOfLineAllocateEmm(%"class.blink::NormalPageArena"* %32, i64 %50, i64 %87) #6
  br label %89

89:                                               ; preds = %54, %86
  %90 = phi i8* [ %85, %54 ], [ %88, %86 ]
  ret i8* %90
}

declare i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64, i8*) local_unnamed_addr #2

declare i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"*) local_unnamed_addr #2

declare void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"*, i8*) local_unnamed_addr #2

declare i8* @_ZN5blink15NormalPageArena17OutOfLineAllocateEmm(%"class.blink::NormalPageArena"*, i64, i64) local_unnamed_addr #2

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #2

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #3

declare i8* @_ZN7logging15CheckOpValueStrEm(i64) local_unnamed_addr #2

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink10TraceTraitINS_17IDLDictionaryBaseEE5TraceEPNS_7VisitorEPKv(%"class.blink::Visitor"*, i8*) #0 comdat align 2 {
  %3 = bitcast i8* %1 to %"class.blink::IDLDictionaryBase"*
  %4 = bitcast i8* %1 to void (%"class.blink::IDLDictionaryBase"*, %"class.blink::Visitor"*)***
  %5 = load void (%"class.blink::IDLDictionaryBase"*, %"class.blink::Visitor"*)**, void (%"class.blink::IDLDictionaryBase"*, %"class.blink::Visitor"*)*** %4, align 8
  %6 = getelementptr inbounds void (%"class.blink::IDLDictionaryBase"*, %"class.blink::Visitor"*)*, void (%"class.blink::IDLDictionaryBase"*, %"class.blink::Visitor"*)** %5, i64 3
  %7 = load void (%"class.blink::IDLDictionaryBase"*, %"class.blink::Visitor"*)*, void (%"class.blink::IDLDictionaryBase"*, %"class.blink::Visitor"*)** %6, align 8
  tail call void %7(%"class.blink::IDLDictionaryBase"* %3, %"class.blink::Visitor"* %0) #6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink8internal14FinalizerTraitINS_17IDLDictionaryBaseEE8FinalizeEPv(i8*) #0 comdat align 2 {
  %2 = bitcast i8* %0 to %"class.blink::IDLDictionaryBase"*
  %3 = bitcast i8* %0 to void (%"class.blink::IDLDictionaryBase"*)***
  %4 = load void (%"class.blink::IDLDictionaryBase"*)**, void (%"class.blink::IDLDictionaryBase"*)*** %3, align 8
  %5 = load void (%"class.blink::IDLDictionaryBase"*)*, void (%"class.blink::IDLDictionaryBase"*)** %4, align 8
  tail call void %5(%"class.blink::IDLDictionaryBase"* %2) #6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { i8*, i8 } @_ZN5blink9NameTraitINS_17IDLDictionaryBaseEE7GetNameEPKv(i8*) #0 comdat align 2 {
  ret { i8*, i8 } { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.13, i64 0, i64 0), i8 1 }
}

declare i32 @_ZN5blink11GCInfoTable17EnsureGCInfoIndexEPKNS_6GCInfoEPNSt3__16atomicIjEE(%"class.blink::GCInfoTable"*, %"struct.blink::GCInfo"*, %"struct.std::__1::atomic"*) local_unnamed_addr #2

declare void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"*) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare { i33, i1 } @llvm.sadd.with.overflow.i33(i33, i33) #4

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #5

declare void @_ZN5blink15PurchaseDetailsC1Ev(%"class.blink::PurchaseDetails"*) unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone speculatable }
attributes #5 = { cold noreturn nounwind }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
!3 = !{i8 0, i8 2}
