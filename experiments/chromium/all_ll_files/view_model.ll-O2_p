; ModuleID = '../../ui/views/view_model.cc'
source_filename = "../../ui/views/view_model.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.views::ViewModelBase" = type { %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.views::ViewModelBase::Entry"*, %"struct.views::ViewModelBase::Entry"*, %"class.std::__1::__compressed_pair.132" }
%"struct.views::ViewModelBase::Entry" = type { %"class.views::View"*, %"class.gfx::Rect" }
%"class.views::View" = type <{ %"class.ui::LayerDelegate", %"class.ui::LayerObserver", %"class.ui::LayerOwner", %"class.ui::AcceleratorTarget", %"class.ui::EventTarget", %"class.ui::EventHandler", %"class.ui::PropertyHandler", %"class.ui::metadata::MetaDataProvider", i8, [3 x i8], i32, i32, [4 x i8], %"class.views::View"*, %"class.std::__1::vector.37", i8, [3 x i8], %"class.absl::optional", %"class.gfx::Rect", i8, i8, i8, i8, [4 x i8], %"class.std::__1::unique_ptr.44", %class.SkPath, i8, [7 x i8], %"class.std::__1::unique_ptr.63", %"class.absl::optional.69", i8, [7 x i8], %"class.std::__1::unique_ptr.74", %"class.std::__1::unique_ptr.80", %"class.ui::PaintCache", i8, [7 x i8], %"class.ui::NativeTheme"*, i8, %"class.absl::optional.91", i8, i8, [3 x i8], %"class.std::__1::vector.96", %"class.std::__1::unique_ptr.103", %"class.views::FocusManager"*, %"class.std::__1::unique_ptr.109", i64, %"class.views::View"*, %"class.views::View"*, i32, [4 x i8], %"class.views::ContextMenuController"*, %"class.views::DragController"*, %"class.std::__1::unique_ptr.116", %"class.std::__1::unique_ptr.122", %"class.base::ObserverList.128", i32, [4 x i8] }>
%"class.ui::LayerDelegate" = type { i32 (...)** }
%"class.ui::LayerObserver" = type { i32 (...)** }
%"class.ui::LayerOwner" = type { i32 (...)**, %"class.std::__1::unique_ptr", %"class.ui::Layer"*, %"class.base::ObserverList" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.ui::Layer"* }
%"class.ui::Layer" = type opaque
%"class.base::ObserverList" = type <{ %"class.std::__1::vector.1", %"class.base::LinkedList", i64, i32, [4 x i8] }>
%"class.std::__1::vector.1" = type { %"class.std::__1::__vector_base.2" }
%"class.std::__1::__vector_base.2" = type { %"class.base::internal::UncheckedObserverAdapter"*, %"class.base::internal::UncheckedObserverAdapter"*, %"class.std::__1::__compressed_pair.3" }
%"class.base::internal::UncheckedObserverAdapter" = type { i8* }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"class.base::internal::UncheckedObserverAdapter"* }
%"class.base::LinkedList" = type { %"class.base::LinkNode" }
%"class.base::LinkNode" = type { %"class.base::internal::LinkNodeBase" }
%"class.base::internal::LinkNodeBase" = type { %"class.base::internal::LinkNodeBase"*, %"class.base::internal::LinkNodeBase"* }
%"class.ui::AcceleratorTarget" = type { i32 (...)** }
%"class.ui::EventTarget" = type { i32 (...)**, %"class.std::__1::vector.6", %"class.std::__1::vector.13", %"class.ui::EventHandler"* }
%"class.std::__1::vector.6" = type { %"class.std::__1::__vector_base.7" }
%"class.std::__1::__vector_base.7" = type { %"struct.ui::EventTarget::PrioritizedHandler"*, %"struct.ui::EventTarget::PrioritizedHandler"*, %"class.std::__1::__compressed_pair.8" }
%"struct.ui::EventTarget::PrioritizedHandler" = type <{ %"class.ui::EventHandler"*, i32, [4 x i8] }>
%"class.std::__1::__compressed_pair.8" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"struct.std::__1::__compressed_pair_elem.9" = type { %"struct.ui::EventTarget::PrioritizedHandler"* }
%"class.std::__1::vector.13" = type { %"class.std::__1::__vector_base.14" }
%"class.std::__1::__vector_base.14" = type { %"class.ui::EventHandler"**, %"class.ui::EventHandler"**, %"class.std::__1::__compressed_pair.15" }
%"class.std::__1::__compressed_pair.15" = type { %"struct.std::__1::__compressed_pair_elem.16" }
%"struct.std::__1::__compressed_pair_elem.16" = type { %"class.ui::EventHandler"** }
%"class.ui::EventHandler" = type { i32 (...)**, %"class.std::__1::stack" }
%"class.std::__1::stack" = type { %"class.base::circular_deque" }
%"class.base::circular_deque" = type { %"class.base::internal::VectorBuffer", i64, i64 }
%"class.base::internal::VectorBuffer" = type { %"class.ui::EventDispatcher"**, i64 }
%"class.ui::EventDispatcher" = type opaque
%"class.ui::PropertyHandler" = type { i32 (...)**, %"class.std::__1::map" }
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.20", %"class.std::__1::__compressed_pair.25" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type opaque
%"class.std::__1::__compressed_pair.20" = type { %"struct.std::__1::__compressed_pair_elem.21" }
%"struct.std::__1::__compressed_pair_elem.21" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.25" = type { %"struct.std::__1::__compressed_pair_elem.26" }
%"struct.std::__1::__compressed_pair_elem.26" = type { i64 }
%"class.ui::metadata::MetaDataProvider" = type { i32 (...)**, %"class.std::__1::map.28" }
%"class.std::__1::map.28" = type { %"class.std::__1::__tree.29" }
%"class.std::__1::__tree.29" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.30", %"class.std::__1::__compressed_pair.34" }
%"class.std::__1::__compressed_pair.30" = type { %"struct.std::__1::__compressed_pair_elem.21" }
%"class.std::__1::__compressed_pair.34" = type { %"struct.std::__1::__compressed_pair_elem.26" }
%"class.std::__1::vector.37" = type { %"class.std::__1::__vector_base.38" }
%"class.std::__1::__vector_base.38" = type { %"class.views::View"**, %"class.views::View"**, %"class.std::__1::__compressed_pair.39" }
%"class.std::__1::__compressed_pair.39" = type { %"struct.std::__1::__compressed_pair_elem.40" }
%"struct.std::__1::__compressed_pair_elem.40" = type { %"class.views::View"** }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { %"class.gfx::Size" }
%"class.gfx::Size" = type { i32, i32 }
%"class.std::__1::unique_ptr.44" = type { %"class.std::__1::__compressed_pair.45" }
%"class.std::__1::__compressed_pair.45" = type { %"struct.std::__1::__compressed_pair_elem.46" }
%"struct.std::__1::__compressed_pair_elem.46" = type { %"class.std::__1::vector.37"* }
%class.SkPath = type <{ %class.sk_sp, i32, %"struct.std::__1::atomic.53", %"struct.std::__1::atomic.53", i8, i8 }>
%class.sk_sp = type { %class.SkPathRef* }
%class.SkPathRef = type <{ %class.SkNVRefCnt, %struct.SkRect, [4 x i8], %class.SkTDArray, %class.SkTDArray.51, %class.SkTDArray.52, i32, [4 x i8], %"class.SkIDChangeListener::List", i8, i8, i8, i8, i8, i8, i8, i8 }>
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.50" }
%"struct.std::__1::__atomic_base.50" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%struct.SkRect = type { float, float, float, float }
%class.SkTDArray = type { %struct.SkPoint*, i32, i32 }
%struct.SkPoint = type { float, float }
%class.SkTDArray.51 = type { i8*, i32, i32 }
%class.SkTDArray.52 = type { float*, i32, i32 }
%"class.SkIDChangeListener::List" = type { %class.SkMutex, %class.SkTDArray.58 }
%class.SkMutex = type { %class.SkSemaphore }
%class.SkSemaphore = type { %"struct.std::__1::atomic", %class.SkOnce, %"struct.SkSemaphore::OSSemaphore"* }
%class.SkOnce = type { %"struct.std::__1::atomic.53" }
%"struct.SkSemaphore::OSSemaphore" = type opaque
%class.SkTDArray.58 = type { %class.SkIDChangeListener**, i32, i32 }
%class.SkIDChangeListener = type { %class.SkRefCnt.base, %"struct.std::__1::atomic.59", [3 x i8] }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic.59" = type { %"struct.std::__1::__atomic_base.60" }
%"struct.std::__1::__atomic_base.60" = type { %"struct.std::__1::__cxx_atomic_impl.61" }
%"struct.std::__1::__cxx_atomic_impl.61" = type { %"struct.std::__1::__cxx_atomic_base_impl.62" }
%"struct.std::__1::__cxx_atomic_base_impl.62" = type { i8 }
%"struct.std::__1::atomic.53" = type { %"struct.std::__1::__atomic_base.54" }
%"struct.std::__1::__atomic_base.54" = type { %"struct.std::__1::__atomic_base.55" }
%"struct.std::__1::__atomic_base.55" = type { %"struct.std::__1::__cxx_atomic_impl.56" }
%"struct.std::__1::__cxx_atomic_impl.56" = type { %"struct.std::__1::__cxx_atomic_base_impl.57" }
%"struct.std::__1::__cxx_atomic_base_impl.57" = type { i8 }
%"class.std::__1::unique_ptr.63" = type { %"class.std::__1::__compressed_pair.64" }
%"class.std::__1::__compressed_pair.64" = type { %"struct.std::__1::__compressed_pair_elem.65" }
%"struct.std::__1::__compressed_pair_elem.65" = type { %"class.views::LayoutManager"* }
%"class.views::LayoutManager" = type { i32 (...)**, %"class.views::View"* }
%"class.absl::optional.69" = type { %"class.absl::optional_internal::optional_data.70" }
%"class.absl::optional_internal::optional_data.70" = type { %"class.absl::optional_internal::optional_data_base.71" }
%"class.absl::optional_internal::optional_data_base.71" = type { %"class.absl::optional_internal::optional_data_dtor_base.72" }
%"class.absl::optional_internal::optional_data_dtor_base.72" = type { i8, %union.anon.73 }
%union.anon.73 = type { %"class.views::View::DefaultFillLayout" }
%"class.views::View::DefaultFillLayout" = type { %"class.views::LayoutManager" }
%"class.std::__1::unique_ptr.74" = type { %"class.std::__1::__compressed_pair.75" }
%"class.std::__1::__compressed_pair.75" = type { %"struct.std::__1::__compressed_pair_elem.76" }
%"struct.std::__1::__compressed_pair_elem.76" = type { %"class.views::Background"* }
%"class.views::Background" = type opaque
%"class.std::__1::unique_ptr.80" = type { %"class.std::__1::__compressed_pair.81" }
%"class.std::__1::__compressed_pair.81" = type { %"struct.std::__1::__compressed_pair_elem.82" }
%"struct.std::__1::__compressed_pair_elem.82" = type { %"class.views::Border"* }
%"class.views::Border" = type opaque
%"class.ui::PaintCache" = type <{ %class.sk_sp.86, float, [4 x i8] }>
%class.sk_sp.86 = type { %"class.cc::PaintOpBuffer"* }
%"class.cc::PaintOpBuffer" = type <{ %class.SkRefCnt.base, [4 x i8], %"class.std::__1::unique_ptr.87", i64, i64, i64, i64, i64, i32, i8, [3 x i8] }>
%"class.std::__1::unique_ptr.87" = type { %"class.std::__1::__compressed_pair.88" }
%"class.std::__1::__compressed_pair.88" = type { %"struct.std::__1::__compressed_pair_elem.89" }
%"struct.std::__1::__compressed_pair_elem.89" = type { i8* }
%"class.ui::NativeTheme" = type opaque
%"class.absl::optional.91" = type { %"class.absl::optional_internal::optional_data.92" }
%"class.absl::optional_internal::optional_data.92" = type { %"class.absl::optional_internal::optional_data_base.93" }
%"class.absl::optional_internal::optional_data_base.93" = type { %"class.absl::optional_internal::optional_data_dtor_base.94" }
%"class.absl::optional_internal::optional_data_dtor_base.94" = type { i8, %union.anon.95 }
%union.anon.95 = type { i8 }
%"class.std::__1::vector.96" = type { %"class.std::__1::__vector_base.97" }
%"class.std::__1::__vector_base.97" = type { %"class.ui::Layer"**, %"class.ui::Layer"**, %"class.std::__1::__compressed_pair.98" }
%"class.std::__1::__compressed_pair.98" = type { %"struct.std::__1::__compressed_pair_elem.99" }
%"struct.std::__1::__compressed_pair_elem.99" = type { %"class.ui::Layer"** }
%"class.std::__1::unique_ptr.103" = type { %"class.std::__1::__compressed_pair.104" }
%"class.std::__1::__compressed_pair.104" = type { %"struct.std::__1::__compressed_pair_elem.105" }
%"struct.std::__1::__compressed_pair_elem.105" = type { %"class.views::ViewMaskLayer"* }
%"class.views::ViewMaskLayer" = type opaque
%"class.views::FocusManager" = type opaque
%"class.std::__1::unique_ptr.109" = type { %"class.std::__1::__compressed_pair.110" }
%"class.std::__1::__compressed_pair.110" = type { %"struct.std::__1::__compressed_pair_elem.111" }
%"struct.std::__1::__compressed_pair_elem.111" = type { %"class.std::__1::vector.112"* }
%"class.std::__1::vector.112" = type opaque
%"class.views::ContextMenuController" = type opaque
%"class.views::DragController" = type opaque
%"class.std::__1::unique_ptr.116" = type { %"class.std::__1::__compressed_pair.117" }
%"class.std::__1::__compressed_pair.117" = type { %"struct.std::__1::__compressed_pair_elem.118" }
%"struct.std::__1::__compressed_pair_elem.118" = type { %"class.views::ViewTargeter"* }
%"class.views::ViewTargeter" = type { %"class.ui::EventTargeter", %"class.views::ViewTargeterDelegate"* }
%"class.ui::EventTargeter" = type { i32 (...)** }
%"class.views::ViewTargeterDelegate" = type opaque
%"class.std::__1::unique_ptr.122" = type { %"class.std::__1::__compressed_pair.123" }
%"class.std::__1::__compressed_pair.123" = type { %"struct.std::__1::__compressed_pair_elem.124" }
%"struct.std::__1::__compressed_pair_elem.124" = type { %"class.views::ViewAccessibility"* }
%"class.views::ViewAccessibility" = type opaque
%"class.base::ObserverList.128" = type <{ %"class.std::__1::vector.1", %"class.base::LinkedList.129", i64, i32, [4 x i8] }>
%"class.base::LinkedList.129" = type { %"class.base::LinkNode.130" }
%"class.base::LinkNode.130" = type { %"class.base::internal::LinkNodeBase" }
%"class.gfx::Rect" = type { %"class.gfx::Point", %"class.gfx::Size" }
%"class.gfx::Point" = type { i32, i32 }
%"class.std::__1::__compressed_pair.132" = type { %"struct.std::__1::__compressed_pair_elem.133" }
%"struct.std::__1::__compressed_pair_elem.133" = type { %"struct.views::ViewModelBase::Entry"* }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZNSt3__16vectorIN5views13ViewModelBase5EntryENS_9allocatorIS3_EEE6insertENS_11__wrap_iterIPKS3_EERS8_ = comdat any

@_ZN5views13ViewModelBaseD1Ev = hidden unnamed_addr alias void (%"class.views::ViewModelBase"*), void (%"class.views::ViewModelBase"*)* @_ZN5views13ViewModelBaseD2Ev
@_ZN5views13ViewModelBaseC1Ev = hidden unnamed_addr alias void (%"class.views::ViewModelBase"*), void (%"class.views::ViewModelBase"*)* @_ZN5views13ViewModelBaseC2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5views13ViewModelBaseD2Ev(%"class.views::ViewModelBase"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.views::ViewModelBase", %"class.views::ViewModelBase"* %0, i64 0, i32 0, i32 0, i32 0
  %3 = load %"struct.views::ViewModelBase::Entry"*, %"struct.views::ViewModelBase::Entry"** %2, align 8
  %4 = icmp eq %"struct.views::ViewModelBase::Entry"* %3, null
  br i1 %4, label %10, label %5

5:                                                ; preds = %1
  %6 = ptrtoint %"struct.views::ViewModelBase::Entry"* %3 to i64
  %7 = getelementptr inbounds %"class.views::ViewModelBase", %"class.views::ViewModelBase"* %0, i64 0, i32 0, i32 0, i32 1
  %8 = bitcast %"struct.views::ViewModelBase::Entry"** %7 to i64*
  store i64 %6, i64* %8, align 8
  %9 = bitcast %"struct.views::ViewModelBase::Entry"* %3 to i8*
  tail call void @_ZdlPv(i8* %9) #8
  br label %10

10:                                               ; preds = %1, %5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5views13ViewModelBase6RemoveEi(%"class.views::ViewModelBase"* nocapture, i32) local_unnamed_addr #0 align 2 {
  %3 = icmp eq i32 %1, -1
  br i1 %3, label %22, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.views::ViewModelBase", %"class.views::ViewModelBase"* %0, i64 0, i32 0, i32 0, i32 0
  %6 = load %"struct.views::ViewModelBase::Entry"*, %"struct.views::ViewModelBase::Entry"** %5, align 8
  %7 = sext i32 %1 to i64
  %8 = getelementptr inbounds %"struct.views::ViewModelBase::Entry", %"struct.views::ViewModelBase::Entry"* %6, i64 %7
  %9 = getelementptr inbounds %"struct.views::ViewModelBase::Entry", %"struct.views::ViewModelBase::Entry"* %8, i64 1
  %10 = getelementptr inbounds %"class.views::ViewModelBase", %"class.views::ViewModelBase"* %0, i64 0, i32 0, i32 0, i32 1
  %11 = bitcast %"struct.views::ViewModelBase::Entry"** %10 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = ptrtoint %"struct.views::ViewModelBase::Entry"* %9 to i64
  %14 = sub i64 %12, %13
  %15 = sdiv exact i64 %14, 24
  %16 = icmp eq i64 %14, 0
  br i1 %16, label %20, label %17

17:                                               ; preds = %4
  %18 = bitcast %"struct.views::ViewModelBase::Entry"* %8 to i8*
  %19 = bitcast %"struct.views::ViewModelBase::Entry"* %9 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %18, i8* align 8 %19, i64 %14, i1 false) #9
  br label %20

20:                                               ; preds = %4, %17
  %21 = getelementptr inbounds %"struct.views::ViewModelBase::Entry", %"struct.views::ViewModelBase::Entry"* %8, i64 %15
  store %"struct.views::ViewModelBase::Entry"* %21, %"struct.views::ViewModelBase::Entry"** %10, align 8
  br label %22

22:                                               ; preds = %2, %20
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5views13ViewModelBase4MoveEii(%"class.views::ViewModelBase"*, i32, i32) local_unnamed_addr #0 align 2 {
  %4 = alloca %"struct.views::ViewModelBase::Entry", align 8
  %5 = icmp eq i32 %1, %2
  br i1 %5, label %32, label %6

6:                                                ; preds = %3
  %7 = bitcast %"struct.views::ViewModelBase::Entry"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %7) #9
  %8 = getelementptr inbounds %"class.views::ViewModelBase", %"class.views::ViewModelBase"* %0, i64 0, i32 0
  %9 = sext i32 %1 to i64
  %10 = getelementptr inbounds %"class.views::ViewModelBase", %"class.views::ViewModelBase"* %0, i64 0, i32 0, i32 0, i32 0
  %11 = bitcast %"struct.views::ViewModelBase::Entry"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 -86, i64 24, i1 false)
  %12 = load %"struct.views::ViewModelBase::Entry"*, %"struct.views::ViewModelBase::Entry"** %10, align 8
  %13 = getelementptr inbounds %"struct.views::ViewModelBase::Entry", %"struct.views::ViewModelBase::Entry"* %12, i64 %9
  %14 = bitcast %"struct.views::ViewModelBase::Entry"* %13 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %7, i8* align 8 %14, i64 24, i1 false)
  %15 = getelementptr inbounds %"struct.views::ViewModelBase::Entry", %"struct.views::ViewModelBase::Entry"* %13, i64 1
  %16 = getelementptr inbounds %"class.views::ViewModelBase", %"class.views::ViewModelBase"* %0, i64 0, i32 0, i32 0, i32 1
  %17 = bitcast %"struct.views::ViewModelBase::Entry"** %16 to i64*
  %18 = load i64, i64* %17, align 8
  %19 = ptrtoint %"struct.views::ViewModelBase::Entry"* %15 to i64
  %20 = sub i64 %18, %19
  %21 = sdiv exact i64 %20, 24
  %22 = icmp eq i64 %20, 0
  br i1 %22, label %26, label %23

23:                                               ; preds = %6
  %24 = bitcast %"struct.views::ViewModelBase::Entry"* %15 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %14, i8* align 8 %24, i64 %20, i1 false) #9
  %25 = load %"struct.views::ViewModelBase::Entry"*, %"struct.views::ViewModelBase::Entry"** %10, align 8
  br label %26

26:                                               ; preds = %6, %23
  %27 = phi %"struct.views::ViewModelBase::Entry"* [ %12, %6 ], [ %25, %23 ]
  %28 = getelementptr inbounds %"struct.views::ViewModelBase::Entry", %"struct.views::ViewModelBase::Entry"* %13, i64 %21
  store %"struct.views::ViewModelBase::Entry"* %28, %"struct.views::ViewModelBase::Entry"** %16, align 8
  %29 = sext i32 %2 to i64
  %30 = getelementptr inbounds %"struct.views::ViewModelBase::Entry", %"struct.views::ViewModelBase::Entry"* %27, i64 %29
  %31 = call %"struct.views::ViewModelBase::Entry"* @_ZNSt3__16vectorIN5views13ViewModelBase5EntryENS_9allocatorIS3_EEE6insertENS_11__wrap_iterIPKS3_EERS8_(%"class.std::__1::vector"* %8, %"struct.views::ViewModelBase::Entry"* %30, %"struct.views::ViewModelBase::Entry"* nonnull dereferenceable(24) %4)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %7) #9
  br label %32

32:                                               ; preds = %3, %26
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"struct.views::ViewModelBase::Entry"* @_ZNSt3__16vectorIN5views13ViewModelBase5EntryENS_9allocatorIS3_EEE6insertENS_11__wrap_iterIPKS3_EERS8_(%"class.std::__1::vector"*, %"struct.views::ViewModelBase::Entry"*, %"struct.views::ViewModelBase::Entry"* dereferenceable(24)) local_unnamed_addr #0 comdat align 2 {
  %4 = ptrtoint %"struct.views::ViewModelBase::Entry"* %1 to i64
  %5 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %6 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %7 = load %"struct.views::ViewModelBase::Entry"*, %"struct.views::ViewModelBase::Entry"** %6, align 8
  %8 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %9 = load %"struct.views::ViewModelBase::Entry"*, %"struct.views::ViewModelBase::Entry"** %8, align 8
  %10 = icmp ult %"struct.views::ViewModelBase::Entry"* %7, %9
  %11 = ptrtoint %"struct.views::ViewModelBase::Entry"* %7 to i64
  %12 = ptrtoint %"struct.views::ViewModelBase::Entry"* %9 to i64
  br i1 %10, label %13, label %58

13:                                               ; preds = %3
  %14 = icmp eq %"struct.views::ViewModelBase::Entry"* %7, %1
  br i1 %14, label %15, label %21

15:                                               ; preds = %13
  %16 = bitcast %"struct.views::ViewModelBase::Entry"* %1 to i8*
  %17 = bitcast %"struct.views::ViewModelBase::Entry"* %2 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %16, i8* align 8 %17, i64 24, i1 false) #9
  %18 = getelementptr inbounds %"struct.views::ViewModelBase::Entry", %"struct.views::ViewModelBase::Entry"* %1, i64 1
  %19 = ptrtoint %"struct.views::ViewModelBase::Entry"* %18 to i64
  %20 = bitcast %"struct.views::ViewModelBase::Entry"** %6 to i64*
  store i64 %19, i64* %20, align 8
  br label %159

21:                                               ; preds = %13
  %22 = getelementptr inbounds %"struct.views::ViewModelBase::Entry", %"struct.views::ViewModelBase::Entry"* %1, i64 1
  %23 = ptrtoint %"struct.views::ViewModelBase::Entry"* %22 to i64
  %24 = sub i64 %11, %23
  %25 = sdiv exact i64 %24, 24
  %26 = getelementptr inbounds %"struct.views::ViewModelBase::Entry", %"struct.views::ViewModelBase::Entry"* %1, i64 %25
  %27 = bitcast %"struct.views::ViewModelBase::Entry"** %6 to i64*
  %28 = icmp ult %"struct.views::ViewModelBase::Entry"* %26, %7
  br i1 %28, label %39, label %31

29:                                               ; preds = %39
  %30 = ptrtoint %"struct.views::ViewModelBase::Entry"* %45 to i64
  br label %31

31:                                               ; preds = %29, %21
  %32 = phi i64 [ %30, %29 ], [ %11, %21 ]
  store i64 %32, i64* %27, align 8
  %33 = icmp eq i64 %24, 0
  br i1 %33, label %47, label %34

34:                                               ; preds = %31
  %35 = sdiv exact i64 %24, -24
  %36 = getelementptr inbounds %"struct.views::ViewModelBase::Entry", %"struct.views::ViewModelBase::Entry"* %7, i64 %35
  %37 = bitcast %"struct.views::ViewModelBase::Entry"* %36 to i8*
  %38 = bitcast %"struct.views::ViewModelBase::Entry"* %1 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %37, i8* align 8 %38, i64 %24, i1 false) #9
  br label %47

39:                                               ; preds = %21, %39
  %40 = phi %"struct.views::ViewModelBase::Entry"* [ %45, %39 ], [ %7, %21 ]
  %41 = phi %"struct.views::ViewModelBase::Entry"* [ %44, %39 ], [ %26, %21 ]
  %42 = bitcast %"struct.views::ViewModelBase::Entry"* %40 to i8*
  %43 = bitcast %"struct.views::ViewModelBase::Entry"* %41 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %42, i8* align 8 %43, i64 24, i1 false) #9
  %44 = getelementptr inbounds %"struct.views::ViewModelBase::Entry", %"struct.views::ViewModelBase::Entry"* %41, i64 1
  %45 = getelementptr inbounds %"struct.views::ViewModelBase::Entry", %"struct.views::ViewModelBase::Entry"* %40, i64 1
  %46 = icmp ult %"struct.views::ViewModelBase::Entry"* %44, %7
  br i1 %46, label %39, label %29

47:                                               ; preds = %31, %34
  %48 = icmp ugt %"struct.views::ViewModelBase::Entry"* %1, %2
  br i1 %48, label %54, label %49

49:                                               ; preds = %47
  %50 = load %"struct.views::ViewModelBase::Entry"*, %"struct.views::ViewModelBase::Entry"** %6, align 8
  %51 = icmp ugt %"struct.views::ViewModelBase::Entry"* %50, %2
  %52 = getelementptr inbounds %"struct.views::ViewModelBase::Entry", %"struct.views::ViewModelBase::Entry"* %2, i64 1
  %53 = select i1 %51, %"struct.views::ViewModelBase::Entry"* %52, %"struct.views::ViewModelBase::Entry"* %2
  br label %54

54:                                               ; preds = %49, %47
  %55 = phi %"struct.views::ViewModelBase::Entry"* [ %2, %47 ], [ %53, %49 ]
  %56 = bitcast %"struct.views::ViewModelBase::Entry"* %1 to i8*
  %57 = bitcast %"struct.views::ViewModelBase::Entry"* %55 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %56, i8* align 8 %57, i64 24, i1 false)
  br label %159

58:                                               ; preds = %3
  %59 = bitcast %"struct.views::ViewModelBase::Entry"** %6 to i64*
  %60 = bitcast %"class.std::__1::vector"* %0 to i64*
  %61 = load i64, i64* %60, align 8
  %62 = sub i64 %11, %61
  %63 = sdiv exact i64 %62, 24
  %64 = add nsw i64 %63, 1
  %65 = icmp ugt i64 %64, 768614336404564650
  br i1 %65, label %66, label %68

66:                                               ; preds = %58
  %67 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %67) #10
  unreachable

68:                                               ; preds = %58
  %69 = bitcast %"struct.views::ViewModelBase::Entry"** %8 to i64*
  %70 = sub i64 %12, %61
  %71 = sdiv exact i64 %70, 24
  %72 = icmp ult i64 %71, 384307168202282325
  br i1 %72, label %76, label %73

73:                                               ; preds = %68
  %74 = sub i64 %4, %61
  %75 = sdiv exact i64 %74, 24
  br label %83

76:                                               ; preds = %68
  %77 = shl nsw i64 %71, 1
  %78 = icmp ult i64 %77, %64
  %79 = select i1 %78, i64 %64, i64 %77
  %80 = sub i64 %4, %61
  %81 = sdiv exact i64 %80, 24
  %82 = icmp eq i64 %79, 0
  br i1 %82, label %89, label %83

83:                                               ; preds = %76, %73
  %84 = phi i64 [ %75, %73 ], [ %81, %76 ]
  %85 = phi i64 [ 768614336404564650, %73 ], [ %79, %76 ]
  %86 = mul i64 %85, 24
  %87 = tail call i8* @_Znwm(i64 %86) #8
  %88 = bitcast i8* %87 to %"struct.views::ViewModelBase::Entry"*
  br label %89

89:                                               ; preds = %76, %83
  %90 = phi i64 [ %84, %83 ], [ %81, %76 ]
  %91 = phi i64 [ %85, %83 ], [ 0, %76 ]
  %92 = phi i8* [ %87, %83 ], [ null, %76 ]
  %93 = phi %"struct.views::ViewModelBase::Entry"* [ %88, %83 ], [ null, %76 ]
  %94 = getelementptr inbounds %"struct.views::ViewModelBase::Entry", %"struct.views::ViewModelBase::Entry"* %93, i64 %90
  %95 = getelementptr inbounds %"struct.views::ViewModelBase::Entry", %"struct.views::ViewModelBase::Entry"* %93, i64 %91
  %96 = ptrtoint %"struct.views::ViewModelBase::Entry"* %95 to i64
  %97 = icmp eq i64 %90, %91
  %98 = bitcast %"struct.views::ViewModelBase::Entry"* %94 to i8*
  br i1 %97, label %99, label %125

99:                                               ; preds = %89
  %100 = icmp sgt i64 %90, 0
  %101 = mul nuw i64 %90, 24
  %102 = sdiv exact i64 %101, 24
  br i1 %100, label %103, label %108

103:                                              ; preds = %99
  %104 = add nuw nsw i64 %102, 1
  %105 = sdiv i64 %104, -2
  %106 = getelementptr inbounds %"struct.views::ViewModelBase::Entry", %"struct.views::ViewModelBase::Entry"* %94, i64 %105
  %107 = bitcast %"struct.views::ViewModelBase::Entry"* %106 to i8*
  br label %125

108:                                              ; preds = %99
  %109 = shl nsw i64 %102, 1
  %110 = icmp eq i64 %101, 0
  %111 = select i1 %110, i64 1, i64 %109
  %112 = icmp ugt i64 %111, 768614336404564650
  br i1 %112, label %113, label %114

113:                                              ; preds = %108
  tail call void @abort() #10
  unreachable

114:                                              ; preds = %108
  %115 = lshr i64 %111, 2
  %116 = mul i64 %111, 24
  %117 = tail call i8* @_Znwm(i64 %116) #8
  %118 = bitcast i8* %117 to %"struct.views::ViewModelBase::Entry"*
  %119 = getelementptr inbounds %"struct.views::ViewModelBase::Entry", %"struct.views::ViewModelBase::Entry"* %118, i64 %115
  %120 = getelementptr inbounds %"struct.views::ViewModelBase::Entry", %"struct.views::ViewModelBase::Entry"* %118, i64 %111
  %121 = ptrtoint %"struct.views::ViewModelBase::Entry"* %120 to i64
  %122 = icmp eq %"struct.views::ViewModelBase::Entry"* %93, null
  %123 = bitcast %"struct.views::ViewModelBase::Entry"* %119 to i8*
  br i1 %122, label %125, label %124

124:                                              ; preds = %114
  tail call void @_ZdlPv(i8* %92) #8
  br label %125

125:                                              ; preds = %89, %103, %114, %124
  %126 = phi %"struct.views::ViewModelBase::Entry"* [ %106, %103 ], [ %119, %114 ], [ %119, %124 ], [ %94, %89 ]
  %127 = phi i64 [ %96, %103 ], [ %121, %114 ], [ %121, %124 ], [ %96, %89 ]
  %128 = phi i8* [ %107, %103 ], [ %123, %114 ], [ %123, %124 ], [ %98, %89 ]
  %129 = bitcast %"struct.views::ViewModelBase::Entry"* %2 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %128, i8* align 8 %129, i64 24, i1 false) #9
  %130 = getelementptr inbounds %"struct.views::ViewModelBase::Entry", %"struct.views::ViewModelBase::Entry"* %126, i64 1
  %131 = load %"struct.views::ViewModelBase::Entry"*, %"struct.views::ViewModelBase::Entry"** %5, align 8
  %132 = ptrtoint %"struct.views::ViewModelBase::Entry"* %131 to i64
  %133 = sub i64 %4, %132
  %134 = sdiv exact i64 %133, -24
  %135 = getelementptr inbounds %"struct.views::ViewModelBase::Entry", %"struct.views::ViewModelBase::Entry"* %126, i64 %134
  %136 = ptrtoint %"struct.views::ViewModelBase::Entry"* %135 to i64
  %137 = icmp sgt i64 %133, 0
  br i1 %137, label %138, label %141

138:                                              ; preds = %125
  %139 = bitcast %"struct.views::ViewModelBase::Entry"* %135 to i8*
  %140 = bitcast %"struct.views::ViewModelBase::Entry"* %131 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %139, i8* align 8 %140, i64 %133, i1 false) #9
  br label %141

141:                                              ; preds = %138, %125
  %142 = load %"struct.views::ViewModelBase::Entry"*, %"struct.views::ViewModelBase::Entry"** %6, align 8
  %143 = icmp eq %"struct.views::ViewModelBase::Entry"* %142, %1
  br i1 %143, label %152, label %144

144:                                              ; preds = %141, %144
  %145 = phi %"struct.views::ViewModelBase::Entry"* [ %150, %144 ], [ %130, %141 ]
  %146 = phi %"struct.views::ViewModelBase::Entry"* [ %149, %144 ], [ %1, %141 ]
  %147 = bitcast %"struct.views::ViewModelBase::Entry"* %145 to i8*
  %148 = bitcast %"struct.views::ViewModelBase::Entry"* %146 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %147, i8* align 8 %148, i64 24, i1 false) #9
  %149 = getelementptr inbounds %"struct.views::ViewModelBase::Entry", %"struct.views::ViewModelBase::Entry"* %146, i64 1
  %150 = getelementptr inbounds %"struct.views::ViewModelBase::Entry", %"struct.views::ViewModelBase::Entry"* %145, i64 1
  %151 = icmp eq %"struct.views::ViewModelBase::Entry"* %149, %142
  br i1 %151, label %152, label %144

152:                                              ; preds = %144, %141
  %153 = phi %"struct.views::ViewModelBase::Entry"* [ %130, %141 ], [ %150, %144 ]
  %154 = ptrtoint %"struct.views::ViewModelBase::Entry"* %153 to i64
  %155 = load %"struct.views::ViewModelBase::Entry"*, %"struct.views::ViewModelBase::Entry"** %5, align 8
  store i64 %136, i64* %60, align 8
  store i64 %154, i64* %59, align 8
  store i64 %127, i64* %69, align 8
  %156 = icmp eq %"struct.views::ViewModelBase::Entry"* %155, null
  br i1 %156, label %159, label %157

157:                                              ; preds = %152
  %158 = bitcast %"struct.views::ViewModelBase::Entry"* %155 to i8*
  tail call void @_ZdlPv(i8* %158) #8
  br label %159

159:                                              ; preds = %157, %152, %15, %54
  %160 = phi %"struct.views::ViewModelBase::Entry"* [ %1, %15 ], [ %1, %54 ], [ %126, %152 ], [ %126, %157 ]
  ret %"struct.views::ViewModelBase::Entry"* %160
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5views13ViewModelBase12MoveViewOnlyEii(%"class.views::ViewModelBase"* nocapture readonly, i32, i32) local_unnamed_addr #2 align 2 {
  %4 = icmp slt i32 %2, %1
  br i1 %4, label %5, label %71

5:                                                ; preds = %3
  %6 = sext i32 %1 to i64
  %7 = getelementptr inbounds %"class.views::ViewModelBase", %"class.views::ViewModelBase"* %0, i64 0, i32 0, i32 0, i32 0
  %8 = load %"struct.views::ViewModelBase::Entry"*, %"struct.views::ViewModelBase::Entry"** %7, align 8
  %9 = getelementptr inbounds %"struct.views::ViewModelBase::Entry", %"struct.views::ViewModelBase::Entry"* %8, i64 %6
  %10 = bitcast %"struct.views::ViewModelBase::Entry"* %9 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = sext i32 %2 to i64
  %13 = sub nsw i64 %6, %12
  %14 = xor i64 %12, -1
  %15 = add nsw i64 %14, %6
  %16 = and i64 %13, 3
  %17 = icmp eq i64 %16, 0
  br i1 %17, label %31, label %18

18:                                               ; preds = %5, %18
  %19 = phi %"struct.views::ViewModelBase::Entry"* [ %28, %18 ], [ %8, %5 ]
  %20 = phi i64 [ %22, %18 ], [ %6, %5 ]
  %21 = phi i64 [ %29, %18 ], [ %16, %5 ]
  %22 = add nsw i64 %20, -1
  %23 = getelementptr inbounds %"struct.views::ViewModelBase::Entry", %"struct.views::ViewModelBase::Entry"* %19, i64 %22
  %24 = bitcast %"struct.views::ViewModelBase::Entry"* %23 to i64*
  %25 = load i64, i64* %24, align 8
  %26 = getelementptr inbounds %"struct.views::ViewModelBase::Entry", %"struct.views::ViewModelBase::Entry"* %19, i64 %20
  %27 = bitcast %"struct.views::ViewModelBase::Entry"* %26 to i64*
  store i64 %25, i64* %27, align 8
  %28 = load %"struct.views::ViewModelBase::Entry"*, %"struct.views::ViewModelBase::Entry"** %7, align 8
  %29 = add i64 %21, -1
  %30 = icmp eq i64 %29, 0
  br i1 %30, label %31, label %18, !llvm.loop !2

31:                                               ; preds = %18, %5
  %32 = phi %"struct.views::ViewModelBase::Entry"* [ %8, %5 ], [ %28, %18 ]
  %33 = phi i64 [ %6, %5 ], [ %22, %18 ]
  %34 = phi %"struct.views::ViewModelBase::Entry"* [ undef, %5 ], [ %28, %18 ]
  %35 = icmp ult i64 %15, 3
  br i1 %35, label %36, label %39

36:                                               ; preds = %39, %31
  %37 = phi %"struct.views::ViewModelBase::Entry"* [ %34, %31 ], [ %70, %39 ]
  %38 = getelementptr inbounds %"struct.views::ViewModelBase::Entry", %"struct.views::ViewModelBase::Entry"* %37, i64 %12
  br label %139

39:                                               ; preds = %31, %39
  %40 = phi %"struct.views::ViewModelBase::Entry"* [ %70, %39 ], [ %32, %31 ]
  %41 = phi i64 [ %63, %39 ], [ %33, %31 ]
  %42 = add nsw i64 %41, -1
  %43 = getelementptr inbounds %"struct.views::ViewModelBase::Entry", %"struct.views::ViewModelBase::Entry"* %40, i64 %42
  %44 = bitcast %"struct.views::ViewModelBase::Entry"* %43 to i64*
  %45 = load i64, i64* %44, align 8
  %46 = getelementptr inbounds %"struct.views::ViewModelBase::Entry", %"struct.views::ViewModelBase::Entry"* %40, i64 %41
  %47 = bitcast %"struct.views::ViewModelBase::Entry"* %46 to i64*
  store i64 %45, i64* %47, align 8
  %48 = load %"struct.views::ViewModelBase::Entry"*, %"struct.views::ViewModelBase::Entry"** %7, align 8
  %49 = add nsw i64 %41, -2
  %50 = getelementptr inbounds %"struct.views::ViewModelBase::Entry", %"struct.views::ViewModelBase::Entry"* %48, i64 %49
  %51 = bitcast %"struct.views::ViewModelBase::Entry"* %50 to i64*
  %52 = load i64, i64* %51, align 8
  %53 = getelementptr inbounds %"struct.views::ViewModelBase::Entry", %"struct.views::ViewModelBase::Entry"* %48, i64 %42
  %54 = bitcast %"struct.views::ViewModelBase::Entry"* %53 to i64*
  store i64 %52, i64* %54, align 8
  %55 = load %"struct.views::ViewModelBase::Entry"*, %"struct.views::ViewModelBase::Entry"** %7, align 8
  %56 = add nsw i64 %41, -3
  %57 = getelementptr inbounds %"struct.views::ViewModelBase::Entry", %"struct.views::ViewModelBase::Entry"* %55, i64 %56
  %58 = bitcast %"struct.views::ViewModelBase::Entry"* %57 to i64*
  %59 = load i64, i64* %58, align 8
  %60 = getelementptr inbounds %"struct.views::ViewModelBase::Entry", %"struct.views::ViewModelBase::Entry"* %55, i64 %49
  %61 = bitcast %"struct.views::ViewModelBase::Entry"* %60 to i64*
  store i64 %59, i64* %61, align 8
  %62 = load %"struct.views::ViewModelBase::Entry"*, %"struct.views::ViewModelBase::Entry"** %7, align 8
  %63 = add nsw i64 %41, -4
  %64 = getelementptr inbounds %"struct.views::ViewModelBase::Entry", %"struct.views::ViewModelBase::Entry"* %62, i64 %63
  %65 = bitcast %"struct.views::ViewModelBase::Entry"* %64 to i64*
  %66 = load i64, i64* %65, align 8
  %67 = getelementptr inbounds %"struct.views::ViewModelBase::Entry", %"struct.views::ViewModelBase::Entry"* %62, i64 %56
  %68 = bitcast %"struct.views::ViewModelBase::Entry"* %67 to i64*
  store i64 %66, i64* %68, align 8
  %69 = icmp sgt i64 %63, %12
  %70 = load %"struct.views::ViewModelBase::Entry"*, %"struct.views::ViewModelBase::Entry"** %7, align 8
  br i1 %69, label %39, label %36

71:                                               ; preds = %3
  %72 = icmp sgt i32 %2, %1
  br i1 %72, label %73, label %143

73:                                               ; preds = %71
  %74 = sext i32 %1 to i64
  %75 = getelementptr inbounds %"class.views::ViewModelBase", %"class.views::ViewModelBase"* %0, i64 0, i32 0, i32 0, i32 0
  %76 = load %"struct.views::ViewModelBase::Entry"*, %"struct.views::ViewModelBase::Entry"** %75, align 8
  %77 = getelementptr inbounds %"struct.views::ViewModelBase::Entry", %"struct.views::ViewModelBase::Entry"* %76, i64 %74
  %78 = bitcast %"struct.views::ViewModelBase::Entry"* %77 to i64*
  %79 = load i64, i64* %78, align 8
  %80 = sext i32 %2 to i64
  %81 = sub nsw i64 %80, %74
  %82 = xor i64 %74, -1
  %83 = add nsw i64 %82, %80
  %84 = and i64 %81, 3
  %85 = icmp eq i64 %84, 0
  br i1 %85, label %99, label %86

86:                                               ; preds = %73, %86
  %87 = phi %"struct.views::ViewModelBase::Entry"* [ %96, %86 ], [ %76, %73 ]
  %88 = phi i64 [ %90, %86 ], [ %74, %73 ]
  %89 = phi i64 [ %97, %86 ], [ %84, %73 ]
  %90 = add nsw i64 %88, 1
  %91 = getelementptr inbounds %"struct.views::ViewModelBase::Entry", %"struct.views::ViewModelBase::Entry"* %87, i64 %90
  %92 = bitcast %"struct.views::ViewModelBase::Entry"* %91 to i64*
  %93 = load i64, i64* %92, align 8
  %94 = getelementptr inbounds %"struct.views::ViewModelBase::Entry", %"struct.views::ViewModelBase::Entry"* %87, i64 %88
  %95 = bitcast %"struct.views::ViewModelBase::Entry"* %94 to i64*
  store i64 %93, i64* %95, align 8
  %96 = load %"struct.views::ViewModelBase::Entry"*, %"struct.views::ViewModelBase::Entry"** %75, align 8
  %97 = add i64 %89, -1
  %98 = icmp eq i64 %97, 0
  br i1 %98, label %99, label %86, !llvm.loop !4

99:                                               ; preds = %86, %73
  %100 = phi %"struct.views::ViewModelBase::Entry"* [ undef, %73 ], [ %96, %86 ]
  %101 = phi %"struct.views::ViewModelBase::Entry"* [ %76, %73 ], [ %96, %86 ]
  %102 = phi i64 [ %74, %73 ], [ %90, %86 ]
  %103 = icmp ult i64 %83, 3
  br i1 %103, label %104, label %107

104:                                              ; preds = %107, %99
  %105 = phi %"struct.views::ViewModelBase::Entry"* [ %100, %99 ], [ %138, %107 ]
  %106 = getelementptr inbounds %"struct.views::ViewModelBase::Entry", %"struct.views::ViewModelBase::Entry"* %105, i64 %80
  br label %139

107:                                              ; preds = %99, %107
  %108 = phi %"struct.views::ViewModelBase::Entry"* [ %138, %107 ], [ %101, %99 ]
  %109 = phi i64 [ %131, %107 ], [ %102, %99 ]
  %110 = add nsw i64 %109, 1
  %111 = getelementptr inbounds %"struct.views::ViewModelBase::Entry", %"struct.views::ViewModelBase::Entry"* %108, i64 %110
  %112 = bitcast %"struct.views::ViewModelBase::Entry"* %111 to i64*
  %113 = load i64, i64* %112, align 8
  %114 = getelementptr inbounds %"struct.views::ViewModelBase::Entry", %"struct.views::ViewModelBase::Entry"* %108, i64 %109
  %115 = bitcast %"struct.views::ViewModelBase::Entry"* %114 to i64*
  store i64 %113, i64* %115, align 8
  %116 = load %"struct.views::ViewModelBase::Entry"*, %"struct.views::ViewModelBase::Entry"** %75, align 8
  %117 = add nsw i64 %109, 2
  %118 = getelementptr inbounds %"struct.views::ViewModelBase::Entry", %"struct.views::ViewModelBase::Entry"* %116, i64 %117
  %119 = bitcast %"struct.views::ViewModelBase::Entry"* %118 to i64*
  %120 = load i64, i64* %119, align 8
  %121 = getelementptr inbounds %"struct.views::ViewModelBase::Entry", %"struct.views::ViewModelBase::Entry"* %116, i64 %110
  %122 = bitcast %"struct.views::ViewModelBase::Entry"* %121 to i64*
  store i64 %120, i64* %122, align 8
  %123 = load %"struct.views::ViewModelBase::Entry"*, %"struct.views::ViewModelBase::Entry"** %75, align 8
  %124 = add nsw i64 %109, 3
  %125 = getelementptr inbounds %"struct.views::ViewModelBase::Entry", %"struct.views::ViewModelBase::Entry"* %123, i64 %124
  %126 = bitcast %"struct.views::ViewModelBase::Entry"* %125 to i64*
  %127 = load i64, i64* %126, align 8
  %128 = getelementptr inbounds %"struct.views::ViewModelBase::Entry", %"struct.views::ViewModelBase::Entry"* %123, i64 %117
  %129 = bitcast %"struct.views::ViewModelBase::Entry"* %128 to i64*
  store i64 %127, i64* %129, align 8
  %130 = load %"struct.views::ViewModelBase::Entry"*, %"struct.views::ViewModelBase::Entry"** %75, align 8
  %131 = add nsw i64 %109, 4
  %132 = getelementptr inbounds %"struct.views::ViewModelBase::Entry", %"struct.views::ViewModelBase::Entry"* %130, i64 %131
  %133 = bitcast %"struct.views::ViewModelBase::Entry"* %132 to i64*
  %134 = load i64, i64* %133, align 8
  %135 = getelementptr inbounds %"struct.views::ViewModelBase::Entry", %"struct.views::ViewModelBase::Entry"* %130, i64 %124
  %136 = bitcast %"struct.views::ViewModelBase::Entry"* %135 to i64*
  store i64 %134, i64* %136, align 8
  %137 = icmp eq i64 %131, %80
  %138 = load %"struct.views::ViewModelBase::Entry"*, %"struct.views::ViewModelBase::Entry"** %75, align 8
  br i1 %137, label %104, label %107

139:                                              ; preds = %36, %104
  %140 = phi %"struct.views::ViewModelBase::Entry"* [ %106, %104 ], [ %38, %36 ]
  %141 = phi i64 [ %79, %104 ], [ %11, %36 ]
  %142 = bitcast %"struct.views::ViewModelBase::Entry"* %140 to i64*
  store i64 %141, i64* %142, align 8
  br label %143

143:                                              ; preds = %139, %71
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5views13ViewModelBase5ClearEv(%"class.views::ViewModelBase"* nocapture) local_unnamed_addr #0 align 2 {
  %2 = bitcast %"class.views::ViewModelBase"* %0 to i64*
  %3 = getelementptr inbounds %"class.views::ViewModelBase", %"class.views::ViewModelBase"* %0, i64 0, i32 0, i32 0, i32 0
  %4 = load %"struct.views::ViewModelBase::Entry"*, %"struct.views::ViewModelBase::Entry"** %3, align 8
  store i64 0, i64* %2, align 8
  %5 = getelementptr inbounds %"class.views::ViewModelBase", %"class.views::ViewModelBase"* %0, i64 0, i32 0, i32 0, i32 1
  %6 = load %"struct.views::ViewModelBase::Entry"*, %"struct.views::ViewModelBase::Entry"** %5, align 8
  %7 = icmp eq %"struct.views::ViewModelBase::Entry"* %4, %6
  %8 = bitcast %"struct.views::ViewModelBase::Entry"** %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %8, i8 0, i64 16, i1 false)
  br i1 %7, label %9, label %14

9:                                                ; preds = %24, %1
  %10 = icmp eq %"struct.views::ViewModelBase::Entry"* %4, null
  br i1 %10, label %13, label %11

11:                                               ; preds = %9
  %12 = bitcast %"struct.views::ViewModelBase::Entry"* %4 to i8*
  tail call void @_ZdlPv(i8* %12) #8
  br label %13

13:                                               ; preds = %9, %11
  ret void

14:                                               ; preds = %1, %24
  %15 = phi %"struct.views::ViewModelBase::Entry"* [ %25, %24 ], [ %4, %1 ]
  %16 = getelementptr inbounds %"struct.views::ViewModelBase::Entry", %"struct.views::ViewModelBase::Entry"* %15, i64 0, i32 0
  %17 = load %"class.views::View"*, %"class.views::View"** %16, align 8
  %18 = icmp eq %"class.views::View"* %17, null
  br i1 %18, label %24, label %19

19:                                               ; preds = %14
  %20 = bitcast %"class.views::View"* %17 to void (%"class.views::View"*)***
  %21 = load void (%"class.views::View"*)**, void (%"class.views::View"*)*** %20, align 8
  %22 = getelementptr inbounds void (%"class.views::View"*)*, void (%"class.views::View"*)** %21, i64 9
  %23 = load void (%"class.views::View"*)*, void (%"class.views::View"*)** %22, align 8
  tail call void %23(%"class.views::View"* nonnull %17) #9
  br label %24

24:                                               ; preds = %19, %14
  %25 = getelementptr inbounds %"struct.views::ViewModelBase::Entry", %"struct.views::ViewModelBase::Entry"* %15, i64 1
  %26 = icmp eq %"struct.views::ViewModelBase::Entry"* %25, %6
  br i1 %26, label %9, label %14
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @_ZNK5views13ViewModelBase14GetIndexOfViewEPKNS_4ViewE(%"class.views::ViewModelBase"* nocapture readonly, %"class.views::View"* readnone) local_unnamed_addr #3 align 2 {
  %3 = getelementptr inbounds %"class.views::ViewModelBase", %"class.views::ViewModelBase"* %0, i64 0, i32 0, i32 0, i32 0
  %4 = load %"struct.views::ViewModelBase::Entry"*, %"struct.views::ViewModelBase::Entry"** %3, align 8
  %5 = getelementptr inbounds %"class.views::ViewModelBase", %"class.views::ViewModelBase"* %0, i64 0, i32 0, i32 0, i32 1
  %6 = load %"struct.views::ViewModelBase::Entry"*, %"struct.views::ViewModelBase::Entry"** %5, align 8
  %7 = icmp eq %"struct.views::ViewModelBase::Entry"* %4, %6
  br i1 %7, label %16, label %8

8:                                                ; preds = %2, %13
  %9 = phi %"struct.views::ViewModelBase::Entry"* [ %14, %13 ], [ %4, %2 ]
  %10 = getelementptr inbounds %"struct.views::ViewModelBase::Entry", %"struct.views::ViewModelBase::Entry"* %9, i64 0, i32 0
  %11 = load %"class.views::View"*, %"class.views::View"** %10, align 8
  %12 = icmp eq %"class.views::View"* %11, %1
  br i1 %12, label %16, label %13

13:                                               ; preds = %8
  %14 = getelementptr inbounds %"struct.views::ViewModelBase::Entry", %"struct.views::ViewModelBase::Entry"* %9, i64 1
  %15 = icmp eq %"struct.views::ViewModelBase::Entry"* %14, %6
  br i1 %15, label %25, label %8

16:                                               ; preds = %8, %2
  %17 = phi %"struct.views::ViewModelBase::Entry"* [ %4, %2 ], [ %9, %8 ]
  %18 = icmp eq %"struct.views::ViewModelBase::Entry"* %17, %6
  br i1 %18, label %25, label %19

19:                                               ; preds = %16
  %20 = ptrtoint %"struct.views::ViewModelBase::Entry"* %17 to i64
  %21 = ptrtoint %"struct.views::ViewModelBase::Entry"* %4 to i64
  %22 = sub i64 %20, %21
  %23 = sdiv exact i64 %22, 24
  %24 = trunc i64 %23 to i32
  br label %25

25:                                               ; preds = %13, %16, %19
  %26 = phi i32 [ %24, %19 ], [ -1, %16 ], [ -1, %13 ]
  ret i32 %26
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5views13ViewModelBaseC2Ev(%"class.views::ViewModelBase"* nocapture) unnamed_addr #0 align 2 {
  %2 = bitcast %"class.views::ViewModelBase"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %2, i8 0, i64 24, i1 false) #9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5views13ViewModelBase9AddUnsafeEPNS_4ViewEi(%"class.views::ViewModelBase"*, %"class.views::View"*, i32) local_unnamed_addr #0 align 2 {
  %4 = alloca %"struct.views::ViewModelBase::Entry", align 8
  %5 = bitcast %"struct.views::ViewModelBase::Entry"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %5) #9
  %6 = getelementptr inbounds %"struct.views::ViewModelBase::Entry", %"struct.views::ViewModelBase::Entry"* %4, i64 0, i32 0
  %7 = getelementptr inbounds %"struct.views::ViewModelBase::Entry", %"struct.views::ViewModelBase::Entry"* %4, i64 0, i32 1
  %8 = bitcast %"class.gfx::Rect"* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %8, i8 0, i64 16, i1 false) #9
  store %"class.views::View"* %1, %"class.views::View"** %6, align 8
  %9 = getelementptr inbounds %"class.views::ViewModelBase", %"class.views::ViewModelBase"* %0, i64 0, i32 0
  %10 = getelementptr inbounds %"class.views::ViewModelBase", %"class.views::ViewModelBase"* %0, i64 0, i32 0, i32 0, i32 0
  %11 = load %"struct.views::ViewModelBase::Entry"*, %"struct.views::ViewModelBase::Entry"** %10, align 8
  %12 = sext i32 %2 to i64
  %13 = getelementptr inbounds %"struct.views::ViewModelBase::Entry", %"struct.views::ViewModelBase::Entry"* %11, i64 %12
  %14 = call %"struct.views::ViewModelBase::Entry"* @_ZNSt3__16vectorIN5views13ViewModelBase5EntryENS_9allocatorIS3_EEE6insertENS_11__wrap_iterIPKS3_EERS8_(%"class.std::__1::vector"* %9, %"struct.views::ViewModelBase::Entry"* %13, %"struct.views::ViewModelBase::Entry"* nonnull dereferenceable(24) %4)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %5) #9
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #5

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #6

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #7

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { builtin nounwind }
attributes #9 = { nounwind }
attributes #10 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = distinct !{!4, !3}
