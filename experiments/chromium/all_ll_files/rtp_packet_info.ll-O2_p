; ModuleID = '../../third_party/webrtc/api/rtp_packet_info.cc'
source_filename = "../../third_party/webrtc/api/rtp_packet_info.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.webrtc::RtpPacketInfo" = type { i32, %"class.std::__1::vector", i32, %"class.absl::optional", %"class.absl::optional.1", %"class.absl::optional.6", %"class.webrtc::Timestamp" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i32*, i32*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i32* }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { i8 }
%"class.absl::optional.1" = type { %"class.absl::optional_internal::optional_data.2" }
%"class.absl::optional_internal::optional_data.2" = type { %"class.absl::optional_internal::optional_data_base.3" }
%"class.absl::optional_internal::optional_data_base.3" = type { %"class.absl::optional_internal::optional_data_dtor_base.4" }
%"class.absl::optional_internal::optional_data_dtor_base.4" = type { i8, %union.anon.5 }
%union.anon.5 = type { %"struct.webrtc::AbsoluteCaptureTime" }
%"struct.webrtc::AbsoluteCaptureTime" = type { i64, %"class.absl::optional.6" }
%"class.absl::optional.6" = type { %"class.absl::optional_internal::optional_data.7" }
%"class.absl::optional_internal::optional_data.7" = type { %"class.absl::optional_internal::optional_data_base.8" }
%"class.absl::optional_internal::optional_data_base.8" = type { %"class.absl::optional_internal::optional_data_dtor_base.9" }
%"class.absl::optional_internal::optional_data_dtor_base.9" = type { i8, %union.anon.10 }
%union.anon.10 = type { i64 }
%"class.webrtc::Timestamp" = type { %"class.webrtc::rtc_units_impl::UnitBase" }
%"class.webrtc::rtc_units_impl::UnitBase" = type { i64 }
%"struct.webrtc::RTPHeader" = type { i8, i8, i16, i32, i32, i8, [15 x i32], i64, i64, i32, %"struct.webrtc::RTPHeaderExtension" }
%"struct.webrtc::RTPHeaderExtension" = type { i8, i32, i8, i32, %"class.absl::optional.1", i8, i16, %"class.absl::optional.11", i8, i8, i8, i8, i32, i8, i8, i8, %"struct.webrtc::VideoSendTiming", %"struct.webrtc::VideoPlayoutDelay", %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.absl::optional.22" }
%"class.absl::optional.11" = type { %"class.absl::optional_internal::optional_data.12" }
%"class.absl::optional_internal::optional_data.12" = type { %"class.absl::optional_internal::optional_data_base.13" }
%"class.absl::optional_internal::optional_data_base.13" = type { %"class.absl::optional_internal::optional_data_dtor_base.14" }
%"class.absl::optional_internal::optional_data_dtor_base.14" = type { i8, %union.anon.15 }
%union.anon.15 = type { %"struct.webrtc::FeedbackRequest" }
%"struct.webrtc::FeedbackRequest" = type { i8, i32 }
%"struct.webrtc::VideoSendTiming" = type { i16, i16, i16, i16, i16, i16, i8 }
%"struct.webrtc::VideoPlayoutDelay" = type { i32, i32 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.16" }
%"class.std::__1::__compressed_pair.16" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"struct.std::__1::__compressed_pair_elem.17" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.18 }
%union.anon.18 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.absl::optional.22" = type { %"class.absl::optional_internal::optional_data.23" }
%"class.absl::optional_internal::optional_data.23" = type { %"class.absl::optional_internal::optional_data_base.24" }
%"class.absl::optional_internal::optional_data_base.24" = type { %"class.absl::optional_internal::optional_data_dtor_base.25" }
%"class.absl::optional_internal::optional_data_dtor_base.25" = type { i8, %union.anon.26 }
%union.anon.26 = type { %"class.webrtc::ColorSpace" }
%"class.webrtc::ColorSpace" = type { i8, i8, i8, i32, i32, i32, %"class.absl::optional.27" }
%"class.absl::optional.27" = type { %"class.absl::optional_internal::optional_data.28" }
%"class.absl::optional_internal::optional_data.28" = type { %"class.absl::optional_internal::optional_data_base.29" }
%"class.absl::optional_internal::optional_data_base.29" = type { %"class.absl::optional_internal::optional_data_dtor_base.30" }
%"class.absl::optional_internal::optional_data_dtor_base.30" = type { i8, %union.anon.31 }
%union.anon.31 = type { %"struct.webrtc::HdrMetadata" }
%"struct.webrtc::HdrMetadata" = type { %"struct.webrtc::HdrMasteringMetadata", i32, i32 }
%"struct.webrtc::HdrMasteringMetadata" = type { %"struct.webrtc::HdrMasteringMetadata::Chromaticity", %"struct.webrtc::HdrMasteringMetadata::Chromaticity", %"struct.webrtc::HdrMasteringMetadata::Chromaticity", %"struct.webrtc::HdrMasteringMetadata::Chromaticity", float, float }
%"struct.webrtc::HdrMasteringMetadata::Chromaticity" = type { float, float }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZNSt3__16vectorIjNS_9allocatorIjEEE6assignIPKjEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIjNS_15iterator_traitsIS8_E9referenceEEE5valueEvE4typeES8_S8_ = comdat any

@_ZN6webrtc13RtpPacketInfoC1Ev = hidden unnamed_addr alias void (%"class.webrtc::RtpPacketInfo"*), void (%"class.webrtc::RtpPacketInfo"*)* @_ZN6webrtc13RtpPacketInfoC2Ev
@_ZN6webrtc13RtpPacketInfoC1EjNSt3__16vectorIjNS1_9allocatorIjEEEEjN4absl8optionalIhEENS7_INS_19AbsoluteCaptureTimeEEENS_9TimestampE = hidden unnamed_addr alias void (%"class.webrtc::RtpPacketInfo"*, i32, %"class.std::__1::vector"*, i32, i16, %"class.absl::optional.1"*, i64), void (%"class.webrtc::RtpPacketInfo"*, i32, %"class.std::__1::vector"*, i32, i16, %"class.absl::optional.1"*, i64)* @_ZN6webrtc13RtpPacketInfoC2EjNSt3__16vectorIjNS1_9allocatorIjEEEEjN4absl8optionalIhEENS7_INS_19AbsoluteCaptureTimeEEENS_9TimestampE
@_ZN6webrtc13RtpPacketInfoC1ERKNS_9RTPHeaderENS_9TimestampE = hidden unnamed_addr alias void (%"class.webrtc::RtpPacketInfo"*, %"struct.webrtc::RTPHeader"*, i64), void (%"class.webrtc::RtpPacketInfo"*, %"struct.webrtc::RTPHeader"*, i64)* @_ZN6webrtc13RtpPacketInfoC2ERKNS_9RTPHeaderENS_9TimestampE
@_ZN6webrtc13RtpPacketInfoC1EjNSt3__16vectorIjNS1_9allocatorIjEEEEjN4absl8optionalIhEENS7_INS_19AbsoluteCaptureTimeEEEl = hidden unnamed_addr alias void (%"class.webrtc::RtpPacketInfo"*, i32, %"class.std::__1::vector"*, i32, i16, %"class.absl::optional.1"*, i64), void (%"class.webrtc::RtpPacketInfo"*, i32, %"class.std::__1::vector"*, i32, i16, %"class.absl::optional.1"*, i64)* @_ZN6webrtc13RtpPacketInfoC2EjNSt3__16vectorIjNS1_9allocatorIjEEEEjN4absl8optionalIhEENS7_INS_19AbsoluteCaptureTimeEEEl
@_ZN6webrtc13RtpPacketInfoC1ERKNS_9RTPHeaderEl = hidden unnamed_addr alias void (%"class.webrtc::RtpPacketInfo"*, %"struct.webrtc::RTPHeader"*, i64), void (%"class.webrtc::RtpPacketInfo"*, %"struct.webrtc::RTPHeader"*, i64)* @_ZN6webrtc13RtpPacketInfoC2ERKNS_9RTPHeaderEl

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc13RtpPacketInfoC2Ev(%"class.webrtc::RtpPacketInfo"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.webrtc::RtpPacketInfo", %"class.webrtc::RtpPacketInfo"* %0, i64 0, i32 0
  store i32 0, i32* %2, align 8
  %3 = getelementptr inbounds %"class.webrtc::RtpPacketInfo", %"class.webrtc::RtpPacketInfo"* %0, i64 0, i32 1
  %4 = getelementptr inbounds %"class.webrtc::RtpPacketInfo", %"class.webrtc::RtpPacketInfo"* %0, i64 0, i32 4, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %4, align 8
  %5 = getelementptr inbounds %"class.webrtc::RtpPacketInfo", %"class.webrtc::RtpPacketInfo"* %0, i64 0, i32 4, i32 0, i32 0, i32 0, i32 1
  %6 = getelementptr inbounds %"class.webrtc::RtpPacketInfo", %"class.webrtc::RtpPacketInfo"* %0, i64 0, i32 6, i32 0, i32 0
  %7 = bitcast %"class.std::__1::vector"* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 0, i64 29, i1 false)
  %8 = bitcast %union.anon.5* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %8, i8 0, i64 25, i1 false)
  store i64 -9223372036854775808, i64* %6, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc13RtpPacketInfoC2EjNSt3__16vectorIjNS1_9allocatorIjEEEEjN4absl8optionalIhEENS7_INS_19AbsoluteCaptureTimeEEENS_9TimestampE(%"class.webrtc::RtpPacketInfo"* nocapture, i32, %"class.std::__1::vector"* nocapture, i32, i16, %"class.absl::optional.1"* nocapture readonly byval(%"class.absl::optional.1") align 8, i64) unnamed_addr #0 align 2 {
  %8 = getelementptr inbounds %"class.webrtc::RtpPacketInfo", %"class.webrtc::RtpPacketInfo"* %0, i64 0, i32 0
  store i32 %1, i32* %8, align 8
  %9 = getelementptr inbounds %"class.webrtc::RtpPacketInfo", %"class.webrtc::RtpPacketInfo"* %0, i64 0, i32 1
  %10 = bitcast %"class.std::__1::vector"* %9 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %10, i8 0, i64 24, i1 false) #6
  %11 = bitcast %"class.std::__1::vector"* %2 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = bitcast %"class.std::__1::vector"* %9 to i64*
  store i64 %12, i64* %13, align 8
  %14 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %2, i64 0, i32 0, i32 1
  %15 = bitcast i32** %14 to i64*
  %16 = load i64, i64* %15, align 8
  %17 = getelementptr inbounds %"class.webrtc::RtpPacketInfo", %"class.webrtc::RtpPacketInfo"* %0, i64 0, i32 1, i32 0, i32 1
  %18 = bitcast i32** %17 to i64*
  store i64 %16, i64* %18, align 8
  %19 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %2, i64 0, i32 0, i32 2, i32 0, i32 0
  %20 = bitcast i32** %19 to i64*
  %21 = load i64, i64* %20, align 8
  %22 = getelementptr inbounds %"class.webrtc::RtpPacketInfo", %"class.webrtc::RtpPacketInfo"* %0, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %23 = bitcast i32** %22 to i64*
  store i64 %21, i64* %23, align 8
  %24 = bitcast %"class.std::__1::vector"* %2 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %24, i8 0, i64 24, i1 false) #6
  %25 = getelementptr inbounds %"class.webrtc::RtpPacketInfo", %"class.webrtc::RtpPacketInfo"* %0, i64 0, i32 2
  store i32 %3, i32* %25, align 8
  %26 = getelementptr inbounds %"class.webrtc::RtpPacketInfo", %"class.webrtc::RtpPacketInfo"* %0, i64 0, i32 3
  %27 = bitcast %"class.absl::optional"* %26 to i16*
  store i16 %4, i16* %27, align 4
  %28 = getelementptr inbounds %"class.webrtc::RtpPacketInfo", %"class.webrtc::RtpPacketInfo"* %0, i64 0, i32 4, i32 0, i32 0, i32 0, i32 0
  %29 = getelementptr inbounds %"class.absl::optional.1", %"class.absl::optional.1"* %5, i64 0, i32 0, i32 0, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %28, i8* nonnull align 8 %29, i64 32, i1 false)
  %30 = getelementptr inbounds %"class.webrtc::RtpPacketInfo", %"class.webrtc::RtpPacketInfo"* %0, i64 0, i32 5, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %30, align 8
  %31 = getelementptr inbounds %"class.webrtc::RtpPacketInfo", %"class.webrtc::RtpPacketInfo"* %0, i64 0, i32 6, i32 0, i32 0
  store i64 %6, i64* %31, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc13RtpPacketInfoC2ERKNS_9RTPHeaderENS_9TimestampE(%"class.webrtc::RtpPacketInfo"*, %"struct.webrtc::RTPHeader"* dereferenceable(352), i64) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.webrtc::RtpPacketInfo", %"class.webrtc::RtpPacketInfo"* %0, i64 0, i32 0
  %5 = getelementptr inbounds %"struct.webrtc::RTPHeader", %"struct.webrtc::RTPHeader"* %1, i64 0, i32 4
  %6 = load i32, i32* %5, align 8
  store i32 %6, i32* %4, align 8
  %7 = getelementptr inbounds %"class.webrtc::RtpPacketInfo", %"class.webrtc::RtpPacketInfo"* %0, i64 0, i32 1
  %8 = bitcast %"class.std::__1::vector"* %7 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %8, i8 0, i64 24, i1 false) #6
  %9 = getelementptr inbounds %"class.webrtc::RtpPacketInfo", %"class.webrtc::RtpPacketInfo"* %0, i64 0, i32 2
  %10 = getelementptr inbounds %"struct.webrtc::RTPHeader", %"struct.webrtc::RTPHeader"* %1, i64 0, i32 3
  %11 = load i32, i32* %10, align 4
  store i32 %11, i32* %9, align 8
  %12 = getelementptr inbounds %"class.webrtc::RtpPacketInfo", %"class.webrtc::RtpPacketInfo"* %0, i64 0, i32 3
  %13 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %12, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %13, align 1
  %14 = getelementptr inbounds %"class.webrtc::RtpPacketInfo", %"class.webrtc::RtpPacketInfo"* %0, i64 0, i32 4, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %14, align 8
  %15 = getelementptr inbounds %"class.webrtc::RtpPacketInfo", %"class.webrtc::RtpPacketInfo"* %0, i64 0, i32 4, i32 0, i32 0, i32 0, i32 1
  %16 = getelementptr inbounds %"class.webrtc::RtpPacketInfo", %"class.webrtc::RtpPacketInfo"* %0, i64 0, i32 6, i32 0, i32 0
  %17 = bitcast %union.anon.5* %15 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %17, i8 0, i64 25, i1 false)
  store i64 %2, i64* %16, align 8
  %18 = getelementptr inbounds %"struct.webrtc::RTPHeader", %"struct.webrtc::RTPHeader"* %1, i64 0, i32 5
  %19 = load i8, i8* %18, align 4
  %20 = zext i8 %19 to i64
  %21 = icmp ult i64 %20, 15
  %22 = select i1 %21, i64 %20, i64 15
  %23 = getelementptr inbounds %"struct.webrtc::RTPHeader", %"struct.webrtc::RTPHeader"* %1, i64 0, i32 6, i64 0
  %24 = getelementptr inbounds %"struct.webrtc::RTPHeader", %"struct.webrtc::RTPHeader"* %1, i64 0, i32 6, i64 %22
  tail call void @_ZNSt3__16vectorIjNS_9allocatorIjEEE6assignIPKjEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIjNS_15iterator_traitsIS8_E9referenceEEE5valueEvE4typeES8_S8_(%"class.std::__1::vector"* %7, i32* %23, i32* %24)
  %25 = getelementptr inbounds %"struct.webrtc::RTPHeader", %"struct.webrtc::RTPHeader"* %1, i64 0, i32 10, i32 8
  %26 = load i8, i8* %25, align 8, !range !2
  %27 = icmp eq i8 %26, 0
  br i1 %27, label %35, label %28

28:                                               ; preds = %3
  %29 = getelementptr inbounds %"struct.webrtc::RTPHeader", %"struct.webrtc::RTPHeader"* %1, i64 0, i32 10, i32 10
  %30 = load i8, i8* %29, align 1
  %31 = bitcast %"class.absl::optional"* %12 to i16*
  %32 = zext i8 %30 to i16
  %33 = shl nuw i16 %32, 8
  %34 = or i16 %33, 1
  store i16 %34, i16* %31, align 4
  br label %35

35:                                               ; preds = %3, %28
  %36 = getelementptr inbounds %"struct.webrtc::RTPHeader", %"struct.webrtc::RTPHeader"* %1, i64 0, i32 10, i32 4, i32 0, i32 0, i32 0, i32 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %14, i8* align 8 %36, i64 32, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIjNS_9allocatorIjEEE6assignIPKjEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIjNS_15iterator_traitsIS8_E9referenceEEE5valueEvE4typeES8_S8_(%"class.std::__1::vector"*, i32*, i32*) local_unnamed_addr #0 comdat align 2 {
  %4 = ptrtoint i32* %2 to i64
  %5 = ptrtoint i32* %1 to i64
  %6 = sub i64 %4, %5
  %7 = ashr exact i64 %6, 2
  %8 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %9 = bitcast i32** %8 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = bitcast %"class.std::__1::vector"* %0 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = sub i64 %10, %12
  %14 = ashr exact i64 %13, 2
  %15 = icmp ugt i64 %7, %14
  %16 = inttoptr i64 %12 to i32*
  br i1 %15, label %49, label %17

17:                                               ; preds = %3
  %18 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %19 = bitcast i32** %18 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = sub i64 %20, %12
  %22 = ashr exact i64 %21, 2
  %23 = icmp ugt i64 %7, %22
  %24 = getelementptr inbounds i32, i32* %1, i64 %22
  %25 = select i1 %23, i32* %24, i32* %2
  %26 = ptrtoint i32* %25 to i64
  %27 = sub i64 %26, %5
  %28 = ashr exact i64 %27, 2
  %29 = icmp eq i64 %27, 0
  br i1 %29, label %33, label %30

30:                                               ; preds = %17
  %31 = inttoptr i64 %12 to i8*
  %32 = bitcast i32* %1 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %31, i8* align 4 %32, i64 %27, i1 false) #6
  br label %33

33:                                               ; preds = %17, %30
  br i1 %23, label %34, label %47

34:                                               ; preds = %33
  %35 = load i64, i64* %19, align 8
  %36 = sub i64 %4, %26
  %37 = icmp sgt i64 %36, 0
  br i1 %37, label %38, label %45

38:                                               ; preds = %34
  %39 = lshr exact i64 %36, 2
  %40 = inttoptr i64 %35 to i8*
  %41 = bitcast i32* %25 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %40, i8* align 4 %41, i64 %36, i1 false) #6
  %42 = inttoptr i64 %35 to i32*
  %43 = getelementptr inbounds i32, i32* %42, i64 %39
  %44 = ptrtoint i32* %43 to i64
  br label %45

45:                                               ; preds = %34, %38
  %46 = phi i64 [ %44, %38 ], [ %35, %34 ]
  store i64 %46, i64* %19, align 8
  br label %90

47:                                               ; preds = %33
  %48 = getelementptr inbounds i32, i32* %16, i64 %28
  store i32* %48, i32** %18, align 8
  br label %90

49:                                               ; preds = %3
  %50 = icmp eq i64 %12, 0
  br i1 %50, label %56, label %51

51:                                               ; preds = %49
  %52 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %53 = bitcast i32** %52 to i64*
  store i64 %12, i64* %53, align 8
  %54 = inttoptr i64 %12 to i8*
  tail call void @_ZdlPv(i8* %54) #7
  %55 = bitcast %"class.std::__1::vector"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %55, i8 0, i64 24, i1 false) #6
  br label %56

56:                                               ; preds = %49, %51
  %57 = phi i64 [ %10, %49 ], [ 0, %51 ]
  %58 = icmp ugt i64 %7, 4611686018427387903
  br i1 %58, label %59, label %61

59:                                               ; preds = %56
  %60 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %60) #8
  unreachable

61:                                               ; preds = %56
  %62 = ashr exact i64 %57, 2
  %63 = icmp ult i64 %62, 2305843009213693951
  br i1 %63, label %64, label %71

64:                                               ; preds = %61
  %65 = ashr exact i64 %57, 1
  %66 = icmp ult i64 %65, %7
  br i1 %66, label %71, label %67

67:                                               ; preds = %64
  %68 = icmp ugt i64 %65, 4611686018427387903
  br i1 %68, label %69, label %71

69:                                               ; preds = %67
  %70 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %70) #8
  unreachable

71:                                               ; preds = %64, %61, %67
  %72 = phi i64 [ %65, %67 ], [ 4611686018427387903, %61 ], [ %7, %64 ]
  %73 = shl i64 %72, 2
  %74 = tail call i8* @_Znwm(i64 %73) #7
  %75 = bitcast i8* %74 to i32*
  %76 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %77 = bitcast i32** %76 to i8**
  store i8* %74, i8** %77, align 8
  %78 = bitcast %"class.std::__1::vector"* %0 to i8**
  store i8* %74, i8** %78, align 8
  %79 = getelementptr inbounds i32, i32* %75, i64 %72
  store i32* %79, i32** %8, align 8
  %80 = bitcast i32** %76 to i64*
  %81 = ptrtoint i8* %74 to i64
  %82 = icmp sgt i64 %6, 0
  br i1 %82, label %83, label %88

83:                                               ; preds = %71
  %84 = lshr exact i64 %6, 2
  %85 = bitcast i32* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %74, i8* align 4 %85, i64 %6, i1 false) #6
  %86 = getelementptr inbounds i32, i32* %75, i64 %84
  %87 = ptrtoint i32* %86 to i64
  br label %88

88:                                               ; preds = %71, %83
  %89 = phi i64 [ %87, %83 ], [ %81, %71 ]
  store i64 %89, i64* %80, align 8
  br label %90

90:                                               ; preds = %45, %47, %88
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc13RtpPacketInfoC2EjNSt3__16vectorIjNS1_9allocatorIjEEEEjN4absl8optionalIhEENS7_INS_19AbsoluteCaptureTimeEEEl(%"class.webrtc::RtpPacketInfo"* nocapture, i32, %"class.std::__1::vector"* nocapture readonly, i32, i16, %"class.absl::optional.1"* nocapture readonly byval(%"class.absl::optional.1") align 8, i64) unnamed_addr #0 align 2 {
  %8 = alloca %"class.std::__1::vector", align 8
  %9 = bitcast %"class.std::__1::vector"* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %9, i8 0, i64 24, i1 false) #6
  %10 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %2, i64 0, i32 0, i32 1
  %11 = bitcast i32** %10 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = bitcast %"class.std::__1::vector"* %2 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = sub i64 %12, %14
  %16 = ashr exact i64 %15, 2
  %17 = icmp eq i64 %15, 0
  br i1 %17, label %41, label %18

18:                                               ; preds = %7
  %19 = icmp ugt i64 %16, 4611686018427387903
  br i1 %19, label %20, label %22

20:                                               ; preds = %18
  %21 = bitcast %"class.std::__1::vector"* %8 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %21) #8
  unreachable

22:                                               ; preds = %18
  %23 = tail call i8* @_Znwm(i64 %15) #7
  %24 = bitcast i8* %23 to i32*
  %25 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %8, i64 0, i32 0, i32 1
  %26 = bitcast i32** %25 to i8**
  store i8* %23, i8** %26, align 8
  %27 = bitcast %"class.std::__1::vector"* %8 to i8**
  store i8* %23, i8** %27, align 8
  %28 = getelementptr inbounds i32, i32* %24, i64 %16
  %29 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %8, i64 0, i32 0, i32 2, i32 0, i32 0
  store i32* %28, i32** %29, align 8
  %30 = bitcast i32** %25 to i64*
  %31 = ptrtoint i8* %23 to i64
  %32 = icmp sgt i64 %15, 0
  %33 = ptrtoint i32* %28 to i64
  br i1 %32, label %34, label %39

34:                                               ; preds = %22
  %35 = lshr exact i64 %15, 2
  %36 = inttoptr i64 %14 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %23, i8* align 4 %36, i64 %15, i1 false) #6
  %37 = getelementptr inbounds i32, i32* %24, i64 %35
  %38 = ptrtoint i32* %37 to i64
  br label %39

39:                                               ; preds = %34, %22
  %40 = phi i64 [ %38, %34 ], [ %31, %22 ]
  store i64 %40, i64* %30, align 8
  br label %41

41:                                               ; preds = %39, %7
  %42 = phi i64 [ %33, %39 ], [ 0, %7 ]
  %43 = phi i64 [ %40, %39 ], [ 0, %7 ]
  %44 = phi i64 [ %31, %39 ], [ 0, %7 ]
  %45 = getelementptr inbounds %"class.absl::optional.1", %"class.absl::optional.1"* %5, i64 0, i32 0, i32 0, i32 0, i32 0
  %46 = mul nsw i64 %6, 1000
  %47 = getelementptr inbounds %"class.webrtc::RtpPacketInfo", %"class.webrtc::RtpPacketInfo"* %0, i64 0, i32 0
  store i32 %1, i32* %47, align 8
  %48 = getelementptr inbounds %"class.webrtc::RtpPacketInfo", %"class.webrtc::RtpPacketInfo"* %0, i64 0, i32 1
  %49 = bitcast %"class.std::__1::vector"* %48 to i64*
  store i64 %44, i64* %49, align 8
  %50 = getelementptr inbounds %"class.webrtc::RtpPacketInfo", %"class.webrtc::RtpPacketInfo"* %0, i64 0, i32 1, i32 0, i32 1
  %51 = bitcast i32** %50 to i64*
  store i64 %43, i64* %51, align 8
  %52 = getelementptr inbounds %"class.webrtc::RtpPacketInfo", %"class.webrtc::RtpPacketInfo"* %0, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %53 = bitcast i32** %52 to i64*
  store i64 %42, i64* %53, align 8
  %54 = getelementptr inbounds %"class.webrtc::RtpPacketInfo", %"class.webrtc::RtpPacketInfo"* %0, i64 0, i32 2
  store i32 %3, i32* %54, align 8
  %55 = getelementptr inbounds %"class.webrtc::RtpPacketInfo", %"class.webrtc::RtpPacketInfo"* %0, i64 0, i32 3
  %56 = bitcast %"class.absl::optional"* %55 to i16*
  store i16 %4, i16* %56, align 4
  %57 = getelementptr inbounds %"class.webrtc::RtpPacketInfo", %"class.webrtc::RtpPacketInfo"* %0, i64 0, i32 4, i32 0, i32 0, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %57, i8* nonnull align 8 %45, i64 32, i1 false)
  %58 = getelementptr inbounds %"class.webrtc::RtpPacketInfo", %"class.webrtc::RtpPacketInfo"* %0, i64 0, i32 5, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %58, align 8
  %59 = getelementptr inbounds %"class.webrtc::RtpPacketInfo", %"class.webrtc::RtpPacketInfo"* %0, i64 0, i32 6, i32 0, i32 0
  store i64 %46, i64* %59, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc13RtpPacketInfoC2ERKNS_9RTPHeaderEl(%"class.webrtc::RtpPacketInfo"*, %"struct.webrtc::RTPHeader"* dereferenceable(352), i64) unnamed_addr #0 align 2 {
  %4 = mul nsw i64 %2, 1000
  %5 = getelementptr inbounds %"class.webrtc::RtpPacketInfo", %"class.webrtc::RtpPacketInfo"* %0, i64 0, i32 0
  %6 = getelementptr inbounds %"struct.webrtc::RTPHeader", %"struct.webrtc::RTPHeader"* %1, i64 0, i32 4
  %7 = load i32, i32* %6, align 8
  store i32 %7, i32* %5, align 8
  %8 = getelementptr inbounds %"class.webrtc::RtpPacketInfo", %"class.webrtc::RtpPacketInfo"* %0, i64 0, i32 1
  %9 = bitcast %"class.std::__1::vector"* %8 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %9, i8 0, i64 24, i1 false) #6
  %10 = getelementptr inbounds %"class.webrtc::RtpPacketInfo", %"class.webrtc::RtpPacketInfo"* %0, i64 0, i32 2
  %11 = getelementptr inbounds %"struct.webrtc::RTPHeader", %"struct.webrtc::RTPHeader"* %1, i64 0, i32 3
  %12 = load i32, i32* %11, align 4
  store i32 %12, i32* %10, align 8
  %13 = getelementptr inbounds %"class.webrtc::RtpPacketInfo", %"class.webrtc::RtpPacketInfo"* %0, i64 0, i32 3
  %14 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %13, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %14, align 1
  %15 = getelementptr inbounds %"class.webrtc::RtpPacketInfo", %"class.webrtc::RtpPacketInfo"* %0, i64 0, i32 4, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %15, align 8
  %16 = getelementptr inbounds %"class.webrtc::RtpPacketInfo", %"class.webrtc::RtpPacketInfo"* %0, i64 0, i32 4, i32 0, i32 0, i32 0, i32 1
  %17 = getelementptr inbounds %"class.webrtc::RtpPacketInfo", %"class.webrtc::RtpPacketInfo"* %0, i64 0, i32 6, i32 0, i32 0
  %18 = bitcast %union.anon.5* %16 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %18, i8 0, i64 25, i1 false) #6
  store i64 %4, i64* %17, align 8
  %19 = getelementptr inbounds %"struct.webrtc::RTPHeader", %"struct.webrtc::RTPHeader"* %1, i64 0, i32 5
  %20 = load i8, i8* %19, align 4
  %21 = zext i8 %20 to i64
  %22 = icmp ult i64 %21, 15
  %23 = select i1 %22, i64 %21, i64 15
  %24 = getelementptr inbounds %"struct.webrtc::RTPHeader", %"struct.webrtc::RTPHeader"* %1, i64 0, i32 6, i64 0
  %25 = getelementptr inbounds %"struct.webrtc::RTPHeader", %"struct.webrtc::RTPHeader"* %1, i64 0, i32 6, i64 %23
  tail call void @_ZNSt3__16vectorIjNS_9allocatorIjEEE6assignIPKjEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIjNS_15iterator_traitsIS8_E9referenceEEE5valueEvE4typeES8_S8_(%"class.std::__1::vector"* %8, i32* %24, i32* %25) #6
  %26 = getelementptr inbounds %"struct.webrtc::RTPHeader", %"struct.webrtc::RTPHeader"* %1, i64 0, i32 10, i32 8
  %27 = load i8, i8* %26, align 8, !range !2
  %28 = icmp eq i8 %27, 0
  br i1 %28, label %36, label %29

29:                                               ; preds = %3
  %30 = getelementptr inbounds %"struct.webrtc::RTPHeader", %"struct.webrtc::RTPHeader"* %1, i64 0, i32 10, i32 10
  %31 = load i8, i8* %30, align 1
  %32 = bitcast %"class.absl::optional"* %13 to i16*
  %33 = zext i8 %31 to i16
  %34 = shl nuw i16 %33, 8
  %35 = or i16 %34, 1
  store i16 %35, i16* %32, align 4
  br label %36

36:                                               ; preds = %3, %29
  %37 = getelementptr inbounds %"struct.webrtc::RTPHeader", %"struct.webrtc::RTPHeader"* %1, i64 0, i32 10, i32 4, i32 0, i32 0, i32 0, i32 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %15, i8* align 8 %37, i64 32, i1 false) #6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN6webrtceqERKNS_13RtpPacketInfoES2_(%"class.webrtc::RtpPacketInfo"* nocapture readonly dereferenceable(96), %"class.webrtc::RtpPacketInfo"* nocapture readonly dereferenceable(96)) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %"class.webrtc::RtpPacketInfo", %"class.webrtc::RtpPacketInfo"* %0, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = getelementptr inbounds %"class.webrtc::RtpPacketInfo", %"class.webrtc::RtpPacketInfo"* %1, i64 0, i32 0
  %6 = load i32, i32* %5, align 8
  %7 = icmp eq i32 %4, %6
  br i1 %7, label %8, label %136

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.webrtc::RtpPacketInfo", %"class.webrtc::RtpPacketInfo"* %0, i64 0, i32 1
  %10 = getelementptr inbounds %"class.webrtc::RtpPacketInfo", %"class.webrtc::RtpPacketInfo"* %1, i64 0, i32 1
  %11 = getelementptr inbounds %"class.webrtc::RtpPacketInfo", %"class.webrtc::RtpPacketInfo"* %0, i64 0, i32 1, i32 0, i32 1
  %12 = bitcast i32** %11 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = bitcast %"class.std::__1::vector"* %9 to i64*
  %15 = load i64, i64* %14, align 8
  %16 = sub i64 %13, %15
  %17 = getelementptr inbounds %"class.webrtc::RtpPacketInfo", %"class.webrtc::RtpPacketInfo"* %1, i64 0, i32 1, i32 0, i32 1
  %18 = bitcast i32** %17 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = bitcast %"class.std::__1::vector"* %10 to i64*
  %21 = load i64, i64* %20, align 8
  %22 = sub i64 %19, %21
  %23 = icmp eq i64 %16, %22
  %24 = inttoptr i64 %15 to i32*
  %25 = inttoptr i64 %13 to i32*
  br i1 %23, label %26, label %136

26:                                               ; preds = %8
  %27 = icmp eq i32* %24, %25
  br i1 %27, label %40, label %28

28:                                               ; preds = %26
  %29 = inttoptr i64 %21 to i32*
  br label %30

30:                                               ; preds = %28, %36
  %31 = phi i32* [ %38, %36 ], [ %29, %28 ]
  %32 = phi i32* [ %37, %36 ], [ %24, %28 ]
  %33 = load i32, i32* %32, align 4
  %34 = load i32, i32* %31, align 4
  %35 = icmp eq i32 %33, %34
  br i1 %35, label %36, label %136

36:                                               ; preds = %30
  %37 = getelementptr inbounds i32, i32* %32, i64 1
  %38 = getelementptr inbounds i32, i32* %31, i64 1
  %39 = icmp eq i32* %37, %25
  br i1 %39, label %40, label %30

40:                                               ; preds = %36, %26
  %41 = getelementptr inbounds %"class.webrtc::RtpPacketInfo", %"class.webrtc::RtpPacketInfo"* %0, i64 0, i32 2
  %42 = load i32, i32* %41, align 8
  %43 = getelementptr inbounds %"class.webrtc::RtpPacketInfo", %"class.webrtc::RtpPacketInfo"* %1, i64 0, i32 2
  %44 = load i32, i32* %43, align 8
  %45 = icmp eq i32 %42, %44
  br i1 %45, label %46, label %136

46:                                               ; preds = %40
  %47 = getelementptr inbounds %"class.webrtc::RtpPacketInfo", %"class.webrtc::RtpPacketInfo"* %0, i64 0, i32 3
  %48 = bitcast %"class.absl::optional"* %47 to i16*
  %49 = load i16, i16* %48, align 4
  %50 = trunc i16 %49 to i8
  %51 = lshr i16 %49, 8
  %52 = trunc i16 %51 to i8
  %53 = getelementptr inbounds %"class.webrtc::RtpPacketInfo", %"class.webrtc::RtpPacketInfo"* %1, i64 0, i32 3
  %54 = bitcast %"class.absl::optional"* %53 to i16*
  %55 = load i16, i16* %54, align 4
  %56 = trunc i16 %55 to i8
  %57 = lshr i16 %55, 8
  %58 = trunc i16 %57 to i8
  %59 = icmp ne i8 %50, 0
  %60 = icmp ne i8 %56, 0
  %61 = xor i1 %59, %60
  %62 = xor i1 %59, true
  %63 = or i1 %61, %62
  br i1 %63, label %69, label %64

64:                                               ; preds = %46
  %65 = icmp eq i8 %56, 0
  br i1 %65, label %66, label %67, !prof !3

66:                                               ; preds = %64
  tail call void @llvm.trap() #6
  unreachable

67:                                               ; preds = %64
  %68 = icmp eq i8 %52, %58
  br i1 %68, label %70, label %136

69:                                               ; preds = %46
  br i1 %61, label %136, label %70

70:                                               ; preds = %69, %67
  %71 = getelementptr inbounds %"class.webrtc::RtpPacketInfo", %"class.webrtc::RtpPacketInfo"* %0, i64 0, i32 4, i32 0, i32 0, i32 0, i32 0
  %72 = load i8, i8* %71, align 8, !range !2
  %73 = icmp ne i8 %72, 0
  %74 = getelementptr inbounds %"class.webrtc::RtpPacketInfo", %"class.webrtc::RtpPacketInfo"* %1, i64 0, i32 4, i32 0, i32 0, i32 0, i32 0
  %75 = load i8, i8* %74, align 8, !range !2
  %76 = icmp ne i8 %75, 0
  %77 = xor i1 %73, %76
  %78 = xor i1 %73, true
  %79 = or i1 %77, %78
  br i1 %79, label %108, label %80

80:                                               ; preds = %70
  %81 = icmp eq i8 %75, 0
  br i1 %81, label %82, label %83, !prof !3

82:                                               ; preds = %80
  tail call void @llvm.trap() #6
  unreachable

83:                                               ; preds = %80
  %84 = getelementptr inbounds %"class.webrtc::RtpPacketInfo", %"class.webrtc::RtpPacketInfo"* %0, i64 0, i32 4, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %85 = load i64, i64* %84, align 8
  %86 = getelementptr inbounds %"class.webrtc::RtpPacketInfo", %"class.webrtc::RtpPacketInfo"* %1, i64 0, i32 4, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %87 = load i64, i64* %86, align 8
  %88 = icmp eq i64 %85, %87
  br i1 %88, label %89, label %136

89:                                               ; preds = %83
  %90 = getelementptr inbounds %"class.webrtc::RtpPacketInfo", %"class.webrtc::RtpPacketInfo"* %0, i64 0, i32 4, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %91 = load i8, i8* %90, align 8, !range !2
  %92 = icmp ne i8 %91, 0
  %93 = getelementptr inbounds %"class.webrtc::RtpPacketInfo", %"class.webrtc::RtpPacketInfo"* %1, i64 0, i32 4, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %94 = load i8, i8* %93, align 8, !range !2
  %95 = icmp ne i8 %94, 0
  %96 = xor i1 %92, %95
  %97 = xor i1 %92, true
  %98 = or i1 %96, %97
  br i1 %98, label %108, label %99

99:                                               ; preds = %89
  %100 = icmp eq i8 %94, 0
  br i1 %100, label %101, label %102, !prof !3

101:                                              ; preds = %99
  tail call void @llvm.trap() #6
  unreachable

102:                                              ; preds = %99
  %103 = getelementptr inbounds %"class.webrtc::RtpPacketInfo", %"class.webrtc::RtpPacketInfo"* %0, i64 0, i32 4, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0
  %104 = load i64, i64* %103, align 8
  %105 = getelementptr inbounds %"class.webrtc::RtpPacketInfo", %"class.webrtc::RtpPacketInfo"* %1, i64 0, i32 4, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0
  %106 = load i64, i64* %105, align 8
  %107 = icmp eq i64 %104, %106
  br i1 %107, label %110, label %136

108:                                              ; preds = %70, %89
  %109 = phi i1 [ %77, %70 ], [ %96, %89 ]
  br i1 %109, label %136, label %110

110:                                              ; preds = %108, %102
  %111 = getelementptr inbounds %"class.webrtc::RtpPacketInfo", %"class.webrtc::RtpPacketInfo"* %0, i64 0, i32 6, i32 0, i32 0
  %112 = load i64, i64* %111, align 8
  %113 = getelementptr inbounds %"class.webrtc::RtpPacketInfo", %"class.webrtc::RtpPacketInfo"* %1, i64 0, i32 6, i32 0, i32 0
  %114 = load i64, i64* %113, align 8
  %115 = icmp eq i64 %112, %114
  br i1 %115, label %116, label %136

116:                                              ; preds = %110
  %117 = getelementptr inbounds %"class.webrtc::RtpPacketInfo", %"class.webrtc::RtpPacketInfo"* %0, i64 0, i32 5, i32 0, i32 0, i32 0, i32 0
  %118 = load i8, i8* %117, align 8, !range !2
  %119 = icmp ne i8 %118, 0
  %120 = getelementptr inbounds %"class.webrtc::RtpPacketInfo", %"class.webrtc::RtpPacketInfo"* %1, i64 0, i32 5, i32 0, i32 0, i32 0, i32 0
  %121 = load i8, i8* %120, align 8, !range !2
  %122 = icmp ne i8 %121, 0
  %123 = xor i1 %119, %122
  %124 = xor i1 %119, true
  %125 = or i1 %123, %124
  %126 = xor i1 %123, true
  br i1 %125, label %136, label %127

127:                                              ; preds = %116
  %128 = icmp eq i8 %121, 0
  br i1 %128, label %129, label %130, !prof !3

129:                                              ; preds = %127
  tail call void @llvm.trap() #6
  unreachable

130:                                              ; preds = %127
  %131 = getelementptr inbounds %"class.webrtc::RtpPacketInfo", %"class.webrtc::RtpPacketInfo"* %0, i64 0, i32 5, i32 0, i32 0, i32 0, i32 1, i32 0
  %132 = load i64, i64* %131, align 8
  %133 = getelementptr inbounds %"class.webrtc::RtpPacketInfo", %"class.webrtc::RtpPacketInfo"* %1, i64 0, i32 5, i32 0, i32 0, i32 0, i32 1, i32 0
  %134 = load i64, i64* %133, align 8
  %135 = icmp eq i64 %132, %134
  br label %136

136:                                              ; preds = %30, %69, %108, %83, %130, %116, %102, %67, %8, %110, %40, %2
  %137 = phi i1 [ false, %108 ], [ false, %69 ], [ false, %40 ], [ false, %2 ], [ false, %110 ], [ false, %8 ], [ false, %67 ], [ false, %102 ], [ %126, %116 ], [ %135, %130 ], [ false, %83 ], [ false, %30 ]
  ret i1 %137
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #2

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #4

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #5

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { cold noreturn nounwind }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }
attributes #7 = { builtin nounwind }
attributes #8 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!"branch_weights", i32 1, i32 2000}
