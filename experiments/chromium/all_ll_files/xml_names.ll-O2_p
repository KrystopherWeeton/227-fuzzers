; ModuleID = 'gen/third_party/blink/renderer/core/xml_names.cc'
source_filename = "gen/third_party/blink/renderer/core/xml_names.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.WTF::AtomicString" = type { %"class.WTF::String" }
%"class.WTF::String" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.WTF::StringImpl"* }
%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.blink::QualifiedName" = type { %class.scoped_refptr.1 }
%class.scoped_refptr.1 = type { %"class.blink::QualifiedName::QualifiedNameImpl"* }
%"class.blink::QualifiedName::QualifiedNameImpl" = type { %"class.WTF::RefCounted", i32, %"class.WTF::AtomicString", %"class.WTF::AtomicString", %"class.WTF::AtomicString", %"class.WTF::AtomicString" }
%"class.WTF::RefCounted" = type { %"class.base::RefCounted" }
%"class.base::RefCounted" = type { %"class.base::subtle::RefCountedBase" }
%"class.base::subtle::RefCountedBase" = type { i32 }

@_ZN5blink9xml_names20kNamespaceURIStorageE = hidden global [1 x i8*] zeroinitializer, align 8
@_ZN5blink9xml_names13kNamespaceURIE = hidden local_unnamed_addr constant %"class.WTF::AtomicString"* bitcast ([1 x i8*]* @_ZN5blink9xml_names20kNamespaceURIStorageE to %"class.WTF::AtomicString"*), align 8
@_ZN5blink9xml_names12attr_storageE = hidden global [2 x i8*] zeroinitializer, align 16
@_ZN5blink9xml_names9kLangAttrE = hidden local_unnamed_addr constant %"class.blink::QualifiedName"* bitcast ([2 x i8*]* @_ZN5blink9xml_names12attr_storageE to %"class.blink::QualifiedName"*), align 8
@_ZN5blink9xml_names10kSpaceAttrE = hidden local_unnamed_addr constant %"class.blink::QualifiedName"* bitcast (i8** getelementptr inbounds ([2 x i8*], [2 x i8*]* @_ZN5blink9xml_names12attr_storageE, i64 0, i64 1) to %"class.blink::QualifiedName"*), align 8
@.str = private unnamed_addr constant [37 x i8] c"http://www.w3.org/XML/1998/namespace\00", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c"lang\00", align 1
@.str.2 = private unnamed_addr constant [6 x i8] c"space\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::QualifiedName"** @_ZN5blink9xml_names8GetAttrsEv() local_unnamed_addr #0 {
  %1 = tail call i8* @_Znam(i64 16) #6
  %2 = bitcast i8* %1 to %"class.blink::QualifiedName"**
  %3 = bitcast i8* %1 to <2 x i8**>*
  store <2 x i8**> <i8** getelementptr inbounds ([2 x i8*], [2 x i8*]* @_ZN5blink9xml_names12attr_storageE, i64 0, i64 0), i8** getelementptr inbounds ([2 x i8*], [2 x i8*]* @_ZN5blink9xml_names12attr_storageE, i64 0, i64 1)>, <2 x i8**>* %3, align 8
  ret %"class.blink::QualifiedName"** %2
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink9xml_names4InitEv() local_unnamed_addr #0 {
  %1 = alloca %"class.WTF::AtomicString", align 8
  %2 = bitcast %"class.WTF::AtomicString"* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %2) #7
  %3 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %1, i64 0, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* inttoptr (i64 -6148914691236517206 to %"class.WTF::StringImpl"*), %"class.WTF::StringImpl"** %3, align 8
  call void @_ZN3WTF12AtomicStringC2EPKhm(%"class.WTF::AtomicString"* nonnull %1, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str, i64 0, i64 0), i64 36) #7
  %4 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %3, align 8
  store %"class.WTF::StringImpl"* %4, %"class.WTF::StringImpl"** bitcast ([1 x i8*]* @_ZN5blink9xml_names20kNamespaceURIStorageE to %"class.WTF::StringImpl"**), align 8
  %5 = icmp eq %"class.WTF::StringImpl"* %4, null
  br i1 %5, label %23, label %6

6:                                                ; preds = %0
  %7 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %4, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %8 = load atomic i32, i32* %7 monotonic, align 4
  %9 = and i32 %8, 2
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %23

11:                                               ; preds = %6
  %12 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %4, i64 0, i32 0
  %13 = load i32, i32* %12, align 4
  %14 = zext i32 %13 to i33
  %15 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %14, i33 1) #7
  %16 = extractvalue { i33, i1 } %15, 1
  %17 = extractvalue { i33, i1 } %15, 0
  %18 = icmp slt i33 %17, 0
  %19 = or i1 %16, %18
  br i1 %19, label %20, label %21, !prof !2

20:                                               ; preds = %11
  call void @llvm.trap() #7
  unreachable

21:                                               ; preds = %11
  %22 = trunc i33 %17 to i32
  store i32 %22, i32* %12, align 4
  br label %23

23:                                               ; preds = %0, %6, %21
  %24 = call %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl12CreateStaticEPKcjj(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i32 4, i32 3702417) #7
  call void @_ZN5blink13QualifiedName12CreateStaticEPvPN3WTF10StringImplERKNS2_12AtomicStringE(i8* bitcast ([2 x i8*]* @_ZN5blink9xml_names12attr_storageE to i8*), %"class.WTF::StringImpl"* %24, %"class.WTF::AtomicString"* nonnull dereferenceable(8) %1) #7
  %25 = call %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl12CreateStaticEPKcjj(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0), i32 5, i32 531440) #7
  call void @_ZN5blink13QualifiedName12CreateStaticEPvPN3WTF10StringImplERKNS2_12AtomicStringE(i8* bitcast (i8** getelementptr inbounds ([2 x i8*], [2 x i8*]* @_ZN5blink9xml_names12attr_storageE, i64 0, i64 1) to i8*), %"class.WTF::StringImpl"* %25, %"class.WTF::AtomicString"* nonnull dereferenceable(8) %1) #7
  %26 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %3, align 8
  %27 = icmp eq %"class.WTF::StringImpl"* %26, null
  br i1 %27, label %41, label %28

28:                                               ; preds = %23
  %29 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %26, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %30 = load atomic i32, i32* %29 monotonic, align 4
  %31 = and i32 %30, 2
  %32 = icmp eq i32 %31, 0
  %33 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %26, i64 0, i32 0
  %34 = load i32, i32* %33, align 4
  br i1 %32, label %35, label %37

35:                                               ; preds = %28
  %36 = add i32 %34, -1
  store i32 %36, i32* %33, align 4
  br label %37

37:                                               ; preds = %35, %28
  %38 = phi i32 [ %36, %35 ], [ %34, %28 ]
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %40, label %41

40:                                               ; preds = %37
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %26) #7
  br label %41

41:                                               ; preds = %23, %37, %40
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %2) #7
  ret void
}

declare %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl12CreateStaticEPKcjj(i8*, i32, i32) local_unnamed_addr #2

declare void @_ZN5blink13QualifiedName12CreateStaticEPvPN3WTF10StringImplERKNS2_12AtomicStringE(i8*, %"class.WTF::StringImpl"*, %"class.WTF::AtomicString"* dereferenceable(8)) local_unnamed_addr #2

declare void @_ZN3WTF12AtomicStringC2EPKhm(%"class.WTF::AtomicString"*, i8*, i64) unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare { i33, i1 } @llvm.sadd.with.overflow.i33(i33, i33) #3

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #4

declare void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"*) local_unnamed_addr #2

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znam(i64) local_unnamed_addr #5

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone speculatable }
attributes #4 = { cold noreturn nounwind }
attributes #5 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { builtin nounwind }
attributes #7 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
