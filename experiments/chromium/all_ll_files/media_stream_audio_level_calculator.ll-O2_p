; ModuleID = '../../third_party/blink/renderer/platform/mediastream/media_stream_audio_level_calculator.cc'
source_filename = "../../third_party/blink/renderer/platform/mediastream/media_stream_audio_level_calculator.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.blink::MediaStreamAudioLevelCalculator::Level" = type <{ %"class.base::RefCountedThreadSafe", [4 x i8], %"class.base::Lock", float, [4 x i8] }>
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.base::Lock" = type { %"class.base::internal::LockImpl" }
%"class.base::internal::LockImpl" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"class.blink::MediaStreamAudioLevelCalculator" = type { i32, float, %class.scoped_refptr }
%class.scoped_refptr = type { %"class.blink::MediaStreamAudioLevelCalculator::Level"* }
%"class.media::AudioBus" = type { i32 (...)**, %"class.std::__1::unique_ptr", i8, i64, i32, %"class.std::__1::vector", i32, i8, %"class.base::OnceCallback" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { float* }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { float**, float**, %"class.std::__1::__compressed_pair.2" }
%"class.std::__1::__compressed_pair.2" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.std::__1::__compressed_pair_elem.3" = type { float** }
%"class.base::OnceCallback" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr.5 }
%class.scoped_refptr.5 = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe.6", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe.6" = type { %"class.base::subtle::RefCountedThreadSafeBase" }

@_ZN5blink31MediaStreamAudioLevelCalculator5LevelC1Ev = hidden unnamed_addr alias void (%"class.blink::MediaStreamAudioLevelCalculator::Level"*), void (%"class.blink::MediaStreamAudioLevelCalculator::Level"*)* @_ZN5blink31MediaStreamAudioLevelCalculator5LevelC2Ev
@_ZN5blink31MediaStreamAudioLevelCalculator5LevelD1Ev = hidden unnamed_addr alias void (%"class.blink::MediaStreamAudioLevelCalculator::Level"*), void (%"class.blink::MediaStreamAudioLevelCalculator::Level"*)* @_ZN5blink31MediaStreamAudioLevelCalculator5LevelD2Ev
@_ZN5blink31MediaStreamAudioLevelCalculatorC1Ev = hidden unnamed_addr alias void (%"class.blink::MediaStreamAudioLevelCalculator"*), void (%"class.blink::MediaStreamAudioLevelCalculator"*)* @_ZN5blink31MediaStreamAudioLevelCalculatorC2Ev
@_ZN5blink31MediaStreamAudioLevelCalculatorD1Ev = hidden unnamed_addr alias void (%"class.blink::MediaStreamAudioLevelCalculator"*), void (%"class.blink::MediaStreamAudioLevelCalculator"*)* @_ZN5blink31MediaStreamAudioLevelCalculatorD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink31MediaStreamAudioLevelCalculator5LevelC2Ev(%"class.blink::MediaStreamAudioLevelCalculator::Level"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::MediaStreamAudioLevelCalculator::Level", %"class.blink::MediaStreamAudioLevelCalculator::Level"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 0, i32* %2, align 4
  %3 = getelementptr inbounds %"class.blink::MediaStreamAudioLevelCalculator::Level", %"class.blink::MediaStreamAudioLevelCalculator::Level"* %0, i64 0, i32 2, i32 0
  tail call void @_ZN4base8internal8LockImplC1Ev(%"class.base::internal::LockImpl"* %3) #6
  %4 = getelementptr inbounds %"class.blink::MediaStreamAudioLevelCalculator::Level", %"class.blink::MediaStreamAudioLevelCalculator::Level"* %0, i64 0, i32 3
  store float 0.000000e+00, float* %4, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink31MediaStreamAudioLevelCalculator5LevelD2Ev(%"class.blink::MediaStreamAudioLevelCalculator::Level"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::MediaStreamAudioLevelCalculator::Level", %"class.blink::MediaStreamAudioLevelCalculator::Level"* %0, i64 0, i32 2, i32 0
  tail call void @_ZN4base8internal8LockImplD1Ev(%"class.base::internal::LockImpl"* %2) #6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden float @_ZNK5blink31MediaStreamAudioLevelCalculator5Level10GetCurrentEv(%"class.blink::MediaStreamAudioLevelCalculator::Level"*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::MediaStreamAudioLevelCalculator::Level", %"class.blink::MediaStreamAudioLevelCalculator::Level"* %0, i64 0, i32 2
  %3 = getelementptr inbounds %"class.base::Lock", %"class.base::Lock"* %2, i64 0, i32 0, i32 0
  %4 = tail call i32 @pthread_mutex_trylock(%union.pthread_mutex_t* %3) #6
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %8, label %6, !prof !2

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.base::Lock", %"class.base::Lock"* %2, i64 0, i32 0
  tail call void @_ZN4base8internal8LockImpl24LockInternalWithTrackingEv(%"class.base::internal::LockImpl"* %7) #6
  br label %8

8:                                                ; preds = %1, %6
  %9 = getelementptr inbounds %"class.blink::MediaStreamAudioLevelCalculator::Level", %"class.blink::MediaStreamAudioLevelCalculator::Level"* %0, i64 0, i32 3
  %10 = load float, float* %9, align 8
  %11 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %3) #6
  ret float %10
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink31MediaStreamAudioLevelCalculator5Level3SetEf(%"class.blink::MediaStreamAudioLevelCalculator::Level"*, float) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::MediaStreamAudioLevelCalculator::Level", %"class.blink::MediaStreamAudioLevelCalculator::Level"* %0, i64 0, i32 2
  %4 = getelementptr inbounds %"class.base::Lock", %"class.base::Lock"* %3, i64 0, i32 0, i32 0
  %5 = tail call i32 @pthread_mutex_trylock(%union.pthread_mutex_t* %4) #6
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %9, label %7, !prof !2

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.base::Lock", %"class.base::Lock"* %3, i64 0, i32 0
  tail call void @_ZN4base8internal8LockImpl24LockInternalWithTrackingEv(%"class.base::internal::LockImpl"* %8) #6
  br label %9

9:                                                ; preds = %2, %7
  %10 = getelementptr inbounds %"class.blink::MediaStreamAudioLevelCalculator::Level", %"class.blink::MediaStreamAudioLevelCalculator::Level"* %0, i64 0, i32 3
  store float %1, float* %10, align 8
  %11 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %4) #6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink31MediaStreamAudioLevelCalculatorC2Ev(%"class.blink::MediaStreamAudioLevelCalculator"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::MediaStreamAudioLevelCalculator", %"class.blink::MediaStreamAudioLevelCalculator"* %0, i64 0, i32 0
  store i32 0, i32* %2, align 8
  %3 = getelementptr inbounds %"class.blink::MediaStreamAudioLevelCalculator", %"class.blink::MediaStreamAudioLevelCalculator"* %0, i64 0, i32 1
  store float 0.000000e+00, float* %3, align 4
  %4 = tail call i8* @_Znwm(i64 56) #7
  %5 = bitcast i8* %4 to i32*
  store i32 0, i32* %5, align 4
  %6 = getelementptr inbounds i8, i8* %4, i64 8
  %7 = bitcast i8* %6 to %"class.base::internal::LockImpl"*
  tail call void @_ZN4base8internal8LockImplC1Ev(%"class.base::internal::LockImpl"* %7) #6
  %8 = getelementptr inbounds i8, i8* %4, i64 48
  %9 = bitcast i8* %8 to float*
  store float 0.000000e+00, float* %9, align 8
  %10 = getelementptr inbounds %"class.blink::MediaStreamAudioLevelCalculator", %"class.blink::MediaStreamAudioLevelCalculator"* %0, i64 0, i32 2, i32 0
  %11 = bitcast %"class.blink::MediaStreamAudioLevelCalculator::Level"** %10 to i8**
  store i8* %4, i8** %11, align 8
  %12 = atomicrmw add i32* %5, i32 1 monotonic
  ret void
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink31MediaStreamAudioLevelCalculatorD2Ev(%"class.blink::MediaStreamAudioLevelCalculator"* nocapture readonly) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::MediaStreamAudioLevelCalculator", %"class.blink::MediaStreamAudioLevelCalculator"* %0, i64 0, i32 2, i32 0
  %3 = load %"class.blink::MediaStreamAudioLevelCalculator::Level"*, %"class.blink::MediaStreamAudioLevelCalculator::Level"** %2, align 8
  %4 = getelementptr inbounds %"class.blink::MediaStreamAudioLevelCalculator::Level", %"class.blink::MediaStreamAudioLevelCalculator::Level"* %3, i64 0, i32 2
  %5 = getelementptr inbounds %"class.base::Lock", %"class.base::Lock"* %4, i64 0, i32 0, i32 0
  %6 = tail call i32 @pthread_mutex_trylock(%union.pthread_mutex_t* %5) #6
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %10, label %8, !prof !2

8:                                                ; preds = %1
  %9 = getelementptr inbounds %"class.base::Lock", %"class.base::Lock"* %4, i64 0, i32 0
  tail call void @_ZN4base8internal8LockImpl24LockInternalWithTrackingEv(%"class.base::internal::LockImpl"* %9) #6
  br label %10

10:                                               ; preds = %1, %8
  %11 = getelementptr inbounds %"class.blink::MediaStreamAudioLevelCalculator::Level", %"class.blink::MediaStreamAudioLevelCalculator::Level"* %3, i64 0, i32 3
  store float 0.000000e+00, float* %11, align 8
  %12 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %5) #6
  %13 = load %"class.blink::MediaStreamAudioLevelCalculator::Level"*, %"class.blink::MediaStreamAudioLevelCalculator::Level"** %2, align 8
  %14 = icmp eq %"class.blink::MediaStreamAudioLevelCalculator::Level"* %13, null
  br i1 %14, label %24, label %15

15:                                               ; preds = %10
  %16 = getelementptr inbounds %"class.blink::MediaStreamAudioLevelCalculator::Level", %"class.blink::MediaStreamAudioLevelCalculator::Level"* %13, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %17 = atomicrmw sub i32* %16, i32 1 acq_rel
  %18 = icmp eq i32 %17, 1
  br i1 %18, label %19, label %24

19:                                               ; preds = %15
  %20 = getelementptr inbounds %"class.blink::MediaStreamAudioLevelCalculator::Level", %"class.blink::MediaStreamAudioLevelCalculator::Level"* %13, i64 0, i32 0
  %21 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %20, i64 2
  %22 = bitcast %"class.base::RefCountedThreadSafe"* %21 to %"class.base::internal::LockImpl"*
  tail call void @_ZN4base8internal8LockImplD1Ev(%"class.base::internal::LockImpl"* %22) #6
  %23 = bitcast %"class.blink::MediaStreamAudioLevelCalculator::Level"* %13 to i8*
  tail call void @_ZdlPv(i8* %23) #7
  br label %24

24:                                               ; preds = %10, %15, %19
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink31MediaStreamAudioLevelCalculator9CalculateERKN5media8AudioBusEb(%"class.blink::MediaStreamAudioLevelCalculator"* nocapture, %"class.media::AudioBus"* nocapture readonly dereferenceable(80), i1 zeroext) local_unnamed_addr #0 align 2 {
  %4 = select i1 %2, float 0x3F00002000000000, float 0.000000e+00
  %5 = getelementptr inbounds %"class.media::AudioBus", %"class.media::AudioBus"* %1, i64 0, i32 5
  %6 = getelementptr inbounds %"class.media::AudioBus", %"class.media::AudioBus"* %1, i64 0, i32 5, i32 0, i32 1
  %7 = bitcast float*** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = bitcast %"class.std::__1::vector"* %5 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = sub i64 %8, %10
  %12 = lshr exact i64 %11, 3
  %13 = trunc i64 %12 to i32
  %14 = icmp sgt i32 %13, 0
  %15 = inttoptr i64 %10 to float**
  br i1 %14, label %16, label %28

16:                                               ; preds = %3
  %17 = getelementptr inbounds %"class.media::AudioBus", %"class.media::AudioBus"* %1, i64 0, i32 6
  %18 = load i32, i32* %17, align 8
  %19 = icmp sgt i32 %18, 0
  %20 = zext i32 %18 to i64
  %21 = shl i64 %11, 29
  %22 = ashr exact i64 %21, 32
  %23 = add nsw i64 %20, -1
  %24 = and i64 %20, 3
  %25 = icmp ult i64 %23, 3
  %26 = sub nsw i64 %20, %24
  %27 = icmp eq i64 %24, 0
  br label %38

28:                                               ; preds = %90, %3
  %29 = phi float [ %4, %3 ], [ %93, %90 ]
  %30 = getelementptr inbounds %"class.blink::MediaStreamAudioLevelCalculator", %"class.blink::MediaStreamAudioLevelCalculator"* %0, i64 0, i32 1
  %31 = load float, float* %30, align 4
  %32 = fcmp olt float %31, %29
  %33 = select i1 %32, float %29, float %31
  store float %33, float* %30, align 4
  %34 = getelementptr inbounds %"class.blink::MediaStreamAudioLevelCalculator", %"class.blink::MediaStreamAudioLevelCalculator"* %0, i64 0, i32 0
  %35 = load i32, i32* %34, align 8
  %36 = add nsw i32 %35, 1
  store i32 %36, i32* %34, align 8
  %37 = icmp eq i32 %35, 10
  br i1 %37, label %96, label %112

38:                                               ; preds = %16, %90
  %39 = phi i64 [ 0, %16 ], [ %94, %90 ]
  %40 = phi float [ %4, %16 ], [ %93, %90 ]
  %41 = getelementptr inbounds float*, float** %15, i64 %39
  %42 = load float*, float** %41, align 8
  br i1 %19, label %43, label %90

43:                                               ; preds = %38
  br i1 %25, label %74, label %44

44:                                               ; preds = %43, %44
  %45 = phi i64 [ %71, %44 ], [ 0, %43 ]
  %46 = phi float [ %70, %44 ], [ 0.000000e+00, %43 ]
  %47 = phi i64 [ %72, %44 ], [ %26, %43 ]
  %48 = getelementptr inbounds float, float* %42, i64 %45
  %49 = load float, float* %48, align 4
  %50 = tail call float @llvm.fabs.f32(float %49) #6
  %51 = fcmp ogt float %50, %46
  %52 = select i1 %51, float %50, float %46
  %53 = or i64 %45, 1
  %54 = getelementptr inbounds float, float* %42, i64 %53
  %55 = load float, float* %54, align 4
  %56 = tail call float @llvm.fabs.f32(float %55) #6
  %57 = fcmp ogt float %56, %52
  %58 = select i1 %57, float %56, float %52
  %59 = or i64 %45, 2
  %60 = getelementptr inbounds float, float* %42, i64 %59
  %61 = load float, float* %60, align 4
  %62 = tail call float @llvm.fabs.f32(float %61) #6
  %63 = fcmp ogt float %62, %58
  %64 = select i1 %63, float %62, float %58
  %65 = or i64 %45, 3
  %66 = getelementptr inbounds float, float* %42, i64 %65
  %67 = load float, float* %66, align 4
  %68 = tail call float @llvm.fabs.f32(float %67) #6
  %69 = fcmp ogt float %68, %64
  %70 = select i1 %69, float %68, float %64
  %71 = add nuw nsw i64 %45, 4
  %72 = add i64 %47, -4
  %73 = icmp eq i64 %72, 0
  br i1 %73, label %74, label %44

74:                                               ; preds = %44, %43
  %75 = phi float [ undef, %43 ], [ %70, %44 ]
  %76 = phi i64 [ 0, %43 ], [ %71, %44 ]
  %77 = phi float [ 0.000000e+00, %43 ], [ %70, %44 ]
  br i1 %27, label %90, label %78

78:                                               ; preds = %74, %78
  %79 = phi i64 [ %87, %78 ], [ %76, %74 ]
  %80 = phi float [ %86, %78 ], [ %77, %74 ]
  %81 = phi i64 [ %88, %78 ], [ %24, %74 ]
  %82 = getelementptr inbounds float, float* %42, i64 %79
  %83 = load float, float* %82, align 4
  %84 = tail call float @llvm.fabs.f32(float %83) #6
  %85 = fcmp ogt float %84, %80
  %86 = select i1 %85, float %84, float %80
  %87 = add nuw nsw i64 %79, 1
  %88 = add i64 %81, -1
  %89 = icmp eq i64 %88, 0
  br i1 %89, label %90, label %78, !llvm.loop !3

90:                                               ; preds = %74, %78, %38
  %91 = phi float [ 0.000000e+00, %38 ], [ %75, %74 ], [ %86, %78 ]
  %92 = fcmp ogt float %91, %40
  %93 = select i1 %92, float %91, float %40
  %94 = add nuw nsw i64 %39, 1
  %95 = icmp slt i64 %94, %22
  br i1 %95, label %38, label %28

96:                                               ; preds = %28
  %97 = getelementptr inbounds %"class.blink::MediaStreamAudioLevelCalculator", %"class.blink::MediaStreamAudioLevelCalculator"* %0, i64 0, i32 2, i32 0
  %98 = load %"class.blink::MediaStreamAudioLevelCalculator::Level"*, %"class.blink::MediaStreamAudioLevelCalculator::Level"** %97, align 8
  %99 = fcmp olt float %33, 1.000000e+00
  %100 = select i1 %99, float %33, float 1.000000e+00
  %101 = getelementptr inbounds %"class.blink::MediaStreamAudioLevelCalculator::Level", %"class.blink::MediaStreamAudioLevelCalculator::Level"* %98, i64 0, i32 2
  %102 = getelementptr inbounds %"class.base::Lock", %"class.base::Lock"* %101, i64 0, i32 0, i32 0
  %103 = tail call i32 @pthread_mutex_trylock(%union.pthread_mutex_t* %102) #6
  %104 = icmp eq i32 %103, 0
  br i1 %104, label %107, label %105, !prof !2

105:                                              ; preds = %96
  %106 = getelementptr inbounds %"class.base::Lock", %"class.base::Lock"* %101, i64 0, i32 0
  tail call void @_ZN4base8internal8LockImpl24LockInternalWithTrackingEv(%"class.base::internal::LockImpl"* %106) #6
  br label %107

107:                                              ; preds = %96, %105
  %108 = getelementptr inbounds %"class.blink::MediaStreamAudioLevelCalculator::Level", %"class.blink::MediaStreamAudioLevelCalculator::Level"* %98, i64 0, i32 3
  store float %100, float* %108, align 8
  %109 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %102) #6
  %110 = load float, float* %30, align 4
  %111 = fmul float %110, 2.500000e-01
  store float %111, float* %30, align 4
  store i32 0, i32* %34, align 8
  br label %112

112:                                              ; preds = %107, %28
  ret void
}

declare void @_ZN4base8internal8LockImplC1Ev(%"class.base::internal::LockImpl"*) unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN4base8internal8LockImplD1Ev(%"class.base::internal::LockImpl"*) unnamed_addr #3

; Function Attrs: nounwind readnone speculatable
declare float @llvm.fabs.f32(float) #4

declare void @_ZN4base8internal8LockImpl24LockInternalWithTrackingEv(%"class.base::internal::LockImpl"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare i32 @pthread_mutex_trylock(%union.pthread_mutex_t*) local_unnamed_addr #3

; Function Attrs: nounwind
declare i32 @pthread_mutex_unlock(%union.pthread_mutex_t*) local_unnamed_addr #3

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #5

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone speculatable }
attributes #5 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }
attributes #7 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 2000, i32 1}
!3 = distinct !{!3, !4}
!4 = !{!"llvm.loop.unroll.disable"}
