; ModuleID = '../../third_party/libvpx/source/libvpx/vp9/decoder/vp9_decodeframe.c'
source_filename = "../../third_party/libvpx/source/libvpx/vp9/decoder/vp9_decodeframe.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.anon.2 = type { i8, i8 }
%struct.scan_order = type { i16*, i16*, i16* }
%struct.vpx_read_bit_buffer = type { i8*, i8*, i64, i8*, void (i8*)* }
%struct.VP9Decoder = type { %struct.macroblockd, %struct.VP9Common, i32, i32, %struct.RefCntBuffer*, %struct.VPxWorker, %struct.VPxWorker*, %struct.TileWorkerData*, [64 x %struct.TileBuffer], i32, i32, %struct.VP9LfSyncData, void (i8*, i8*, i8*, i32)*, i8*, i32, i32, i32, i32, i32, i32, %struct.RowMTWorkerData* }
%struct.macroblockd = type { [3 x %struct.macroblockd_plane], i8, i8, %struct.FRAME_COUNTS*, %struct.TileInfo, i32, %struct.MODE_INFO**, %struct.MODE_INFO*, %struct.MODE_INFO*, i32, i32, [3 x i8]*, i32, i32, i32, i32, %struct.frame_contexts*, [2 x %struct.RefBuffer*], %struct.yv12_buffer_config*, [3 x i8*], [3 x [16 x i8]], i8*, [8 x i8], i32, i32, i32, %struct.vpx_internal_error_info*, i32* }
%struct.macroblockd_plane = type { i32*, i32, i32, %struct.buf_2d, [2 x %struct.buf_2d], i8*, i8*, [8 x [2 x i16]], i16, i16, i8, i8, i16*, i32* }
%struct.buf_2d = type { i8*, i32 }
%struct.FRAME_COUNTS = type { [4 x [10 x i32]], [10 x [10 x i32]], [16 x [4 x i32]], [4 x [2 x [2 x [6 x [6 x [4 x i32]]]]]], [4 x [2 x [2 x [6 x [6 x i32]]]]], [4 x [3 x i32]], [7 x [4 x i32]], [4 x [2 x i32]], [5 x [2 x i32]], [5 x [2 x [2 x i32]]], [5 x [2 x i32]], %struct.tx_counts, [3 x [2 x i32]], %struct.nmv_context_counts }
%struct.tx_counts = type { [2 x [4 x i32]], [2 x [3 x i32]], [2 x [2 x i32]], [4 x i32] }
%struct.nmv_context_counts = type { [4 x i32], [2 x %struct.nmv_component_counts] }
%struct.nmv_component_counts = type { [2 x i32], [11 x i32], [2 x i32], [10 x [2 x i32]], [2 x [4 x i32]], [4 x i32], [2 x i32], [2 x i32] }
%struct.TileInfo = type { i32, i32, i32, i32 }
%struct.MODE_INFO = type { i8, i8, i8, i8, i8, i8, i8, i8, [2 x i8], [2 x %union.int_mv], [4 x %struct.b_mode_info] }
%union.int_mv = type { i32 }
%struct.b_mode_info = type { i8, [2 x %union.int_mv] }
%struct.frame_contexts = type { [4 x [9 x i8]], [10 x [9 x i8]], [16 x [3 x i8]], [4 x [2 x [2 x [6 x [6 x [3 x i8]]]]]], [4 x [2 x i8]], [7 x [3 x i8]], [4 x i8], [5 x i8], [5 x [2 x i8]], [5 x i8], %struct.tx_probs, [3 x i8], %struct.nmv_context, i32 }
%struct.tx_probs = type { [2 x [3 x i8]], [2 x [2 x i8]], [2 x [1 x i8]] }
%struct.nmv_context = type { [3 x i8], [2 x %struct.nmv_component] }
%struct.nmv_component = type { i8, [10 x i8], [1 x i8], [10 x i8], [2 x [3 x i8]], [3 x i8], i8, i8 }
%struct.RefBuffer = type { i32, %struct.yv12_buffer_config*, %struct.scale_factors }
%struct.scale_factors = type { i32, i32, i32, i32, i32 (i32, %struct.scale_factors*)*, i32 (i32, %struct.scale_factors*)*, [2 x [2 x [2 x void (i8*, i64, i8*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32)*]]], [2 x [2 x [2 x void (i16*, i64, i16*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32, i32)*]]] }
%struct.yv12_buffer_config = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i8*, i8*, i8*, i64, i32, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.vpx_internal_error_info = type { i32, i32, [80 x i8], i32, [1 x %struct.__jmp_buf_tag] }
%struct.__jmp_buf_tag = type { [8 x i64], i32, %struct.__sigset_t }
%struct.__sigset_t = type { [16 x i64] }
%struct.VP9Common = type { %struct.vpx_internal_error_info, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.yv12_buffer_config*, %struct.RefCntBuffer*, %struct.RefCntBuffer*, [8 x i32], [8 x i32], [3 x %struct.RefBuffer], i32, i32, %struct.yv12_buffer_config, %struct.yv12_buffer_config, i32, i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [8 x [2 x i16]], [8 x [2 x i16]], i32, %struct.MODE_INFO*, %struct.MODE_INFO*, %struct.MODE_INFO*, %struct.MODE_INFO*, i32 (%struct.VP9Common*, i32)*, void (%struct.VP9Common*)*, void (%struct.VP9Common*)*, %struct.MODE_INFO**, %struct.MODE_INFO**, %struct.MODE_INFO**, %struct.MODE_INFO**, i32, i32, i32, [2 x i8*], i8*, i8*, i32, i8, [11 x i8], %struct.loop_filter_info_n, i32, [4 x i32], %struct.loopfilter, %struct.segmentation, i8, [2 x i8], i32, %struct.frame_contexts*, %struct.frame_contexts*, i32, %struct.FRAME_COUNTS, i32, i32, i32, i32, i32, %struct.postproc_state, i32, i32, i32, i32, i32, i32, %struct.BufferPool*, i8*, i8*, i32, i32, [8 x i8] }
%struct.loop_filter_info_n = type { [64 x %struct.loop_filter_thresh], [8 x [4 x [2 x i8]]] }
%struct.loop_filter_thresh = type { [16 x i8], [16 x i8], [16 x i8] }
%struct.loopfilter = type { i32, i32, i32, i32, i8, i8, [4 x i8], [4 x i8], [2 x i8], [2 x i8], %struct.LOOP_FILTER_MASK*, i32 }
%struct.LOOP_FILTER_MASK = type { [4 x i64], [4 x i64], i64, [4 x i16], [4 x i16], i16, [64 x i8] }
%struct.segmentation = type { i8, i8, i8, i8, i8, [7 x i8], [3 x i8], [8 x [4 x i16]], [8 x i32], i32 }
%struct.postproc_state = type { i32, i32, i32, i32, %struct.MODE_INFO*, %struct.MODE_INFO*, i32, i8*, i8* }
%struct.BufferPool = type { i8*, i32 (i8*, i64, %struct.vpx_codec_frame_buffer*)*, i32 (i8*, %struct.vpx_codec_frame_buffer*)*, [12 x %struct.RefCntBuffer], %struct.InternalFrameBufferList }
%struct.vpx_codec_frame_buffer = type { i8*, i64, i8* }
%struct.RefCntBuffer = type { i32, %struct.MV_REF*, i32, i32, i8, i32, i32, %struct.vpx_codec_frame_buffer, %struct.yv12_buffer_config }
%struct.MV_REF = type { [2 x %union.int_mv], [2 x i8] }
%struct.InternalFrameBufferList = type { i32, %struct.InternalFrameBuffer* }
%struct.InternalFrameBuffer = type { i8*, i64, i32 }
%struct.VPxWorker = type { %struct.VPxWorkerImpl*, i32, i32 (i8*, i8*)*, i8*, i8*, i32 }
%struct.VPxWorkerImpl = type opaque
%struct.TileWorkerData = type { i8*, i32, i32, %struct.vpx_reader, %struct.FRAME_COUNTS, %struct.LoopFilterWorkerData*, %struct.VP9LfSyncData*, [8 x i8], %struct.macroblockd, [1024 x i32], [25600 x i16], %struct.vpx_internal_error_info, [8 x i8] }
%struct.vpx_reader = type { i64, i32, i32, i8*, i8*, void (i8*, i8*, i8*, i32)*, i8*, [9 x i8] }
%struct.LoopFilterWorkerData = type { %struct.yv12_buffer_config*, %struct.VP9Common*, [3 x %struct.macroblockd_plane], i32, i32, i32 }
%struct.TileBuffer = type { i8*, i64, i32 }
%struct.VP9LfSyncData = type { %union.pthread_mutex_t*, %union.pthread_cond_t*, i32*, i32, i32, %struct.LoopFilterWorkerData*, i32, i32, %union.pthread_mutex_t*, %union.pthread_mutex_t*, %union.pthread_cond_t*, i32*, i32 }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%union.pthread_cond_t = type { %struct.__pthread_cond_s }
%struct.__pthread_cond_s = type { %union.anon, %union.anon.0, [2 x i32], [2 x i32], i32, i32, [2 x i32] }
%union.anon = type { i64 }
%union.anon.0 = type { i64 }
%struct.RowMTWorkerData = type { i32, [3 x i32*], i32*, [3 x i32*], i8*, i8*, i8*, %struct.JobQueueRowMt, i64, i32, i32, %union.pthread_mutex_t, %union.pthread_mutex_t*, %union.pthread_cond_t*, %struct.ThreadData* }
%struct.JobQueueRowMt = type { i8*, i8*, i8*, i8*, i32, %union.pthread_mutex_t, %union.pthread_cond_t }
%struct.ThreadData = type { %struct.VP9Decoder*, %struct.LoopFilterWorkerData*, %struct.VP9LfSyncData* }
%struct.Job = type { i32, i32, i32 }
%union.pthread_mutexattr_t = type { i32 }
%struct.VPxWorkerInterface = type { void (%struct.VPxWorker*)*, i32 (%struct.VPxWorker*)*, i32 (%struct.VPxWorker*)*, void (%struct.VPxWorker*)*, void (%struct.VPxWorker*)*, void (%struct.VPxWorker*)* }
%struct.mv = type { i16, i16 }

@.str = private unnamed_addr constant [42 x i8] c"Truncated packet or corrupt header length\00", align 1
@.str.1 = private unnamed_addr constant [31 x i8] c"Uninitialized entropy context.\00", align 1
@.str.2 = private unnamed_addr constant [47 x i8] c"Decode failed. Frame data header is corrupted.\00", align 1
@.str.3 = private unnamed_addr constant [41 x i8] c"Failed to allocate pbi->tile_worker_data\00", align 1
@.str.4 = private unnamed_addr constant [40 x i8] c"Decode failed. Frame data is corrupted.\00", align 1
@.str.5 = private unnamed_addr constant [21 x i8] c"Invalid frame marker\00", align 1
@.str.6 = private unnamed_addr constant [30 x i8] c"Unsupported bitstream profile\00", align 1
@.str.7 = private unnamed_addr constant [43 x i8] c"Buffer %d does not contain a decoded frame\00", align 1
@.str.8 = private unnamed_addr constant [24 x i8] c"Invalid frame sync code\00", align 1
@.str.9 = private unnamed_addr constant [60 x i8] c"Keyframe / intra-only frame required to reset decoder state\00", align 1
@.str.10 = private unnamed_addr constant [43 x i8] c"Failed to allocate pbi->row_mt_worker_data\00", align 1
@.str.11 = private unnamed_addr constant [20 x i8] c"Invalid header size\00", align 1
@.str.12 = private unnamed_addr constant [44 x i8] c"4:2:0 color not supported in profile 1 or 3\00", align 1
@.str.13 = private unnamed_addr constant [17 x i8] c"Reserved bit set\00", align 1
@.str.14 = private unnamed_addr constant [44 x i8] c"4:4:4 color not supported in profile 0 or 2\00", align 1
@.str.15 = private unnamed_addr constant [32 x i8] c"Failed to allocate frame buffer\00", align 1
@.str.16 = private unnamed_addr constant [50 x i8] c"Dimensions of %dx%d beyond allowed size of %dx%d.\00", align 1
@.str.17 = private unnamed_addr constant [35 x i8] c"Failed to allocate context buffers\00", align 1
@.str.18 = private unnamed_addr constant [38 x i8] c"Failed to allocate cm->cur_frame->mvs\00", align 1
@.str.19 = private unnamed_addr constant [28 x i8] c"Failed to decode frame size\00", align 1
@.str.20 = private unnamed_addr constant [19 x i8] c"Invalid frame size\00", align 1
@.str.21 = private unnamed_addr constant [34 x i8] c"Referenced frame has invalid size\00", align 1
@.str.22 = private unnamed_addr constant [47 x i8] c"Referenced frame has incompatible color format\00", align 1
@read_interp_filter.literal_to_filter = internal unnamed_addr constant [4 x i8] c"\01\00\02\03", align 1
@.str.23 = private unnamed_addr constant [31 x i8] c"Invalid number of tile columns\00", align 1
@.str.24 = private unnamed_addr constant [48 x i8] c"Failed to allocate row_mt_worker_data->jobq_buf\00", align 1
@.str.25 = private unnamed_addr constant [17 x i8] c"Truncated packet\00", align 1
@.str.26 = private unnamed_addr constant [34 x i8] c"Failed to allocate bool decoder 0\00", align 1
@vpx_norm = external local_unnamed_addr constant [256 x i8], align 16
@tx_mode_to_biggest_tx_size = external local_unnamed_addr constant [5 x i8], align 1
@.str.27 = private unnamed_addr constant [37 x i8] c"Failed to allocate pbi->tile_workers\00", align 1
@.str.28 = private unnamed_addr constant [36 x i8] c"Tile decoder thread creation failed\00", align 1
@.str.29 = private unnamed_addr constant [35 x i8] c"Failed to allocate tile_data_recon\00", align 1
@.str.30 = private unnamed_addr constant [27 x i8] c"Failed to decode tile data\00", align 1
@vp9_kf_partition_probs = external constant [16 x [3 x i8]], align 16
@vp9_partition_tree = external local_unnamed_addr constant [6 x i8], align 1
@subsize_lookup = external local_unnamed_addr constant [4 x [13 x i8]], align 16
@partition_context_lookup = external local_unnamed_addr constant [13 x %struct.anon.2], align 16
@ss_size_lookup = external local_unnamed_addr constant [13 x [2 x [2 x i8]]], align 16
@.str.31 = private unnamed_addr constant [20 x i8] c"Invalid block size.\00", align 1
@uv_txsize_lookup = external local_unnamed_addr constant [13 x [4 x [2 x [2 x i8]]]], align 16
@intra_mode_to_tx_type_lookup = external local_unnamed_addr constant [10 x i32], align 16
@vp9_filter_kernels = external local_unnamed_addr global [5 x [8 x i16]*], align 16
@.str.32 = private unnamed_addr constant [39 x i8] c"Reference frame has invalid dimensions\00", align 1
@.str.33 = private unnamed_addr constant [40 x i8] c"Truncated packet or corrupt tile length\00", align 1
@.str.34 = private unnamed_addr constant [35 x i8] c"Failed to allocate bool decoder %d\00", align 1
@vp9_default_scan_orders = external constant [4 x %struct.scan_order], align 16
@vp9_scan_orders = external constant [4 x [4 x %struct.scan_order]], align 16
@.str.35 = private unnamed_addr constant [38 x i8] c"Truncated packet or corrupt tile size\00", align 1
@.str.36 = private unnamed_addr constant [40 x i8] c"Failed to allocate pbi->lf_worker.data1\00", align 1
@.str.37 = private unnamed_addr constant [35 x i8] c"Loop filter thread creation failed\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vp9_read_sync_code(%struct.vpx_read_bit_buffer*) local_unnamed_addr #0 {
  %2 = tail call i32 @vpx_rb_read_literal(%struct.vpx_read_bit_buffer* %0, i32 8) #9
  %3 = icmp eq i32 %2, 73
  br i1 %3, label %4, label %11

4:                                                ; preds = %1
  %5 = tail call i32 @vpx_rb_read_literal(%struct.vpx_read_bit_buffer* %0, i32 8) #9
  %6 = icmp eq i32 %5, 131
  br i1 %6, label %7, label %11

7:                                                ; preds = %4
  %8 = tail call i32 @vpx_rb_read_literal(%struct.vpx_read_bit_buffer* %0, i32 8) #9
  %9 = icmp eq i32 %8, 66
  %10 = zext i1 %9 to i32
  br label %11

11:                                               ; preds = %7, %4, %1
  %12 = phi i32 [ 0, %4 ], [ 0, %1 ], [ %10, %7 ]
  ret i32 %12
}

declare i32 @vpx_rb_read_literal(%struct.vpx_read_bit_buffer*, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @vp9_read_frame_size(%struct.vpx_read_bit_buffer*, i32* nocapture, i32* nocapture) local_unnamed_addr #0 {
  %4 = tail call i32 @vpx_rb_read_literal(%struct.vpx_read_bit_buffer* %0, i32 16) #9
  %5 = add nsw i32 %4, 1
  store i32 %5, i32* %1, align 4
  %6 = tail call i32 @vpx_rb_read_literal(%struct.vpx_read_bit_buffer* %0, i32 16) #9
  %7 = add nsw i32 %6, 1
  store i32 %7, i32* %2, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vp9_read_profile(%struct.vpx_read_bit_buffer*) local_unnamed_addr #0 {
  %2 = tail call i32 @vpx_rb_read_bit(%struct.vpx_read_bit_buffer* %0) #9
  %3 = tail call i32 @vpx_rb_read_bit(%struct.vpx_read_bit_buffer* %0) #9
  %4 = shl i32 %3, 1
  %5 = or i32 %4, %2
  %6 = icmp sgt i32 %5, 2
  br i1 %6, label %7, label %10

7:                                                ; preds = %1
  %8 = tail call i32 @vpx_rb_read_bit(%struct.vpx_read_bit_buffer* %0) #9
  %9 = add nsw i32 %8, %5
  br label %10

10:                                               ; preds = %7, %1
  %11 = phi i32 [ %9, %7 ], [ %5, %1 ]
  ret i32 %11
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

declare i32 @vpx_rb_read_bit(%struct.vpx_read_bit_buffer*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @vp9_decode_frame(%struct.VP9Decoder*, i8*, i8*, i8** nocapture) local_unnamed_addr #0 {
  %5 = alloca [4 x [64 x %struct.TileBuffer]], align 16
  %6 = alloca %struct.TileInfo, align 4
  %7 = alloca %struct.TileBuffer, align 8
  %8 = alloca %struct.TileBuffer, align 8
  %9 = alloca %struct.Job, align 4
  %10 = alloca %struct.vpx_reader, align 8
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca %struct.vpx_read_bit_buffer, align 8
  %14 = alloca [80 x i8], align 16
  %15 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1
  %16 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 0
  %17 = bitcast %struct.vpx_read_bit_buffer* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %17) #9
  %18 = getelementptr inbounds %struct.vpx_read_bit_buffer, %struct.vpx_read_bit_buffer* %13, i64 0, i32 0
  %19 = getelementptr inbounds %struct.vpx_read_bit_buffer, %struct.vpx_read_bit_buffer* %13, i64 0, i32 1
  %20 = getelementptr inbounds %struct.vpx_read_bit_buffer, %struct.vpx_read_bit_buffer* %13, i64 0, i32 2
  %21 = getelementptr inbounds %struct.vpx_read_bit_buffer, %struct.vpx_read_bit_buffer* %13, i64 0, i32 3
  %22 = getelementptr inbounds %struct.vpx_read_bit_buffer, %struct.vpx_read_bit_buffer* %13, i64 0, i32 4
  %23 = getelementptr inbounds [80 x i8], [80 x i8]* %14, i64 0, i64 0
  %24 = bitcast %struct.vpx_read_bit_buffer* %13 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %24, i8 -86, i64 16, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %23) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %23, i8 -86, i64 80, i1 false)
  store i64 0, i64* %20, align 8
  store void (i8*)* @error_handler, void (i8*)** %22, align 8
  %25 = bitcast i8** %21 to %struct.VP9Common**
  store %struct.VP9Common* %15, %struct.VP9Common** %25, align 8
  %26 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 12
  %27 = load void (i8*, i8*, i8*, i32)*, void (i8*, i8*, i8*, i32)** %26, align 16
  %28 = icmp eq void (i8*, i8*, i8*, i32)* %27, null
  br i1 %28, label %41, label %29

29:                                               ; preds = %4
  %30 = ptrtoint i8* %2 to i64
  %31 = ptrtoint i8* %1 to i64
  %32 = sub i64 %30, %31
  %33 = icmp slt i64 %32, 80
  %34 = select i1 %33, i64 %32, i64 80
  %35 = trunc i64 %34 to i32
  %36 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 13
  %37 = load i8*, i8** %36, align 8
  call void %27(i8* %37, i8* %1, i8* nonnull %23, i32 %35) #9
  %38 = shl i64 %34, 32
  %39 = ashr exact i64 %38, 32
  %40 = getelementptr inbounds [80 x i8], [80 x i8]* %14, i64 0, i64 %39
  br label %41

41:                                               ; preds = %4, %29
  %42 = phi i8* [ %23, %29 ], [ %1, %4 ]
  %43 = phi i8* [ %40, %29 ], [ %2, %4 ]
  store i8* %42, i8** %18, align 8
  store i8* %43, i8** %19, align 8
  %44 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 89
  %45 = load %struct.BufferPool*, %struct.BufferPool** %44, align 8
  %46 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 23
  %47 = load i32, i32* %46, align 4
  %48 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 22
  store i32 %47, i32* %48, align 8
  %49 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 27
  %50 = load i8, i8* %49, align 4
  %51 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 28
  store i8 %50, i8* %51, align 1
  %52 = call i32 @vpx_rb_read_literal(%struct.vpx_read_bit_buffer* nonnull %13, i32 2) #9
  %53 = icmp eq i32 %52, 2
  br i1 %53, label %56, label %54

54:                                               ; preds = %41
  %55 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %15, i64 0, i32 0
  call void (%struct.vpx_internal_error_info*, i32, i8*, ...) @vpx_internal_error(%struct.vpx_internal_error_info* %55, i32 5, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.5, i64 0, i64 0)) #9
  br label %56

56:                                               ; preds = %54, %41
  %57 = call i32 @vpx_rb_read_bit(%struct.vpx_read_bit_buffer* nonnull %13) #9
  %58 = call i32 @vpx_rb_read_bit(%struct.vpx_read_bit_buffer* nonnull %13) #9
  %59 = shl i32 %58, 1
  %60 = or i32 %59, %57
  %61 = icmp sgt i32 %60, 2
  br i1 %61, label %62, label %65

62:                                               ; preds = %56
  %63 = call i32 @vpx_rb_read_bit(%struct.vpx_read_bit_buffer* nonnull %13) #9
  %64 = add nsw i32 %63, %60
  br label %65

65:                                               ; preds = %62, %56
  %66 = phi i32 [ %64, %62 ], [ %60, %56 ]
  %67 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 79
  store i32 %66, i32* %67, align 4
  %68 = icmp ugt i32 %66, 3
  br i1 %68, label %69, label %71

69:                                               ; preds = %65
  %70 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %15, i64 0, i32 0
  call void (%struct.vpx_internal_error_info*, i32, i8*, ...) @vpx_internal_error(%struct.vpx_internal_error_info* %70, i32 5, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.6, i64 0, i64 0)) #9
  br label %71

71:                                               ; preds = %69, %65
  %72 = call i32 @vpx_rb_read_bit(%struct.vpx_read_bit_buffer* nonnull %13) #9
  %73 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 26
  store i32 %72, i32* %73, align 8
  %74 = icmp eq i32 %72, 0
  br i1 %74, label %107, label %75

75:                                               ; preds = %71
  %76 = call i32 @vpx_rb_read_literal(%struct.vpx_read_bit_buffer* nonnull %13, i32 3) #9
  %77 = sext i32 %76 to i64
  %78 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 15, i64 %77
  %79 = load i32, i32* %78, align 4
  %80 = icmp slt i32 %79, 0
  br i1 %80, label %86, label %81

81:                                               ; preds = %75
  %82 = sext i32 %79 to i64
  %83 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %45, i64 0, i32 3, i64 %82, i32 0
  %84 = load i32, i32* %83, align 8
  %85 = icmp slt i32 %84, 1
  br i1 %85, label %86, label %88

86:                                               ; preds = %81, %75
  %87 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %15, i64 0, i32 0
  call void (%struct.vpx_internal_error_info*, i32, i8*, ...) @vpx_internal_error(%struct.vpx_internal_error_info* %87, i32 5, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.7, i64 0, i64 0), i32 %79) #9
  br label %88

88:                                               ; preds = %86, %81
  %89 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 18
  %90 = load i32, i32* %89, align 4
  %91 = icmp sgt i32 %90, -1
  br i1 %91, label %92, label %99

92:                                               ; preds = %88
  %93 = sext i32 %90 to i64
  %94 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %45, i64 0, i32 3, i64 %93, i32 0
  %95 = load i32, i32* %94, align 8
  %96 = icmp sgt i32 %95, 0
  br i1 %96, label %97, label %99

97:                                               ; preds = %92
  %98 = add nsw i32 %95, -1
  store i32 %98, i32* %94, align 8
  br label %99

99:                                               ; preds = %97, %92, %88
  store i32 %79, i32* %89, align 4
  %100 = sext i32 %79 to i64
  %101 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %45, i64 0, i32 3, i64 %100, i32 0
  %102 = load i32, i32* %101, align 8
  %103 = add nsw i32 %102, 1
  store i32 %103, i32* %101, align 8
  %104 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 3
  store i32 0, i32* %104, align 4
  %105 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 68, i32 0
  store i32 0, i32* %105, align 8
  %106 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 24
  store i32 1, i32* %106, align 16
  br label %1064

107:                                              ; preds = %71
  %108 = call i32 @vpx_rb_read_bit(%struct.vpx_read_bit_buffer* nonnull %13) #9
  store i32 %108, i32* %46, align 4
  %109 = call i32 @vpx_rb_read_bit(%struct.vpx_read_bit_buffer* nonnull %13) #9
  %110 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 24
  store i32 %109, i32* %110, align 16
  %111 = call i32 @vpx_rb_read_bit(%struct.vpx_read_bit_buffer* nonnull %13) #9
  %112 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 83
  store i32 %111, i32* %112, align 16
  %113 = load i32, i32* %46, align 4
  %114 = icmp eq i32 %113, 0
  br i1 %114, label %115, label %170

115:                                              ; preds = %107
  %116 = call i32 @vpx_rb_read_literal(%struct.vpx_read_bit_buffer* nonnull %13, i32 8) #9
  %117 = icmp eq i32 %116, 73
  br i1 %117, label %118, label %124

118:                                              ; preds = %115
  %119 = call i32 @vpx_rb_read_literal(%struct.vpx_read_bit_buffer* nonnull %13, i32 8) #9
  %120 = icmp eq i32 %119, 131
  br i1 %120, label %121, label %124

121:                                              ; preds = %118
  %122 = call i32 @vpx_rb_read_literal(%struct.vpx_read_bit_buffer* nonnull %13, i32 8) #9
  %123 = icmp eq i32 %122, 66
  br i1 %123, label %126, label %124

124:                                              ; preds = %121, %118, %115
  %125 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %15, i64 0, i32 0
  call void (%struct.vpx_internal_error_info*, i32, i8*, ...) @vpx_internal_error(%struct.vpx_internal_error_info* %125, i32 5, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.8, i64 0, i64 0)) #9
  br label %126

126:                                              ; preds = %124, %121
  call fastcc void @read_bitdepth_colorspace_sampling(%struct.VP9Common* %15, %struct.vpx_read_bit_buffer* nonnull %13) #9
  %127 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 3
  store i32 255, i32* %127, align 4
  %128 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 17, i64 0, i32 0
  store i32 -1, i32* %128, align 16
  %129 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 17, i64 0, i32 1
  store %struct.yv12_buffer_config* null, %struct.yv12_buffer_config** %129, align 8
  %130 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 17, i64 1, i32 0
  store i32 -1, i32* %130, align 16
  %131 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 17, i64 1, i32 1
  store %struct.yv12_buffer_config* null, %struct.yv12_buffer_config** %131, align 8
  %132 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 17, i64 2, i32 0
  store i32 -1, i32* %132, align 16
  %133 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 17, i64 2, i32 1
  store %struct.yv12_buffer_config* null, %struct.yv12_buffer_config** %133, align 8
  call fastcc void @setup_frame_size(%struct.VP9Common* %15, %struct.vpx_read_bit_buffer* nonnull %13) #9
  %134 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 16
  %135 = load i32, i32* %134, align 8
  %136 = icmp eq i32 %135, 0
  br i1 %136, label %535, label %137

137:                                              ; preds = %126
  %138 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 15
  %139 = bitcast [8 x i32]* %138 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %139, i8 -1, i64 32, i1 false) #9
  %140 = load i32, i32* %46, align 4
  %141 = icmp eq i32 %140, 0
  br i1 %141, label %142, label %169

142:                                              ; preds = %137
  %143 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 77
  %144 = load i32, i32* %143, align 4
  %145 = icmp eq i32 %144, 0
  br i1 %145, label %169, label %146

146:                                              ; preds = %142
  %147 = load %struct.BufferPool*, %struct.BufferPool** %44, align 8
  %148 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 18
  %149 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %147, i64 0, i32 2
  %150 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %147, i64 0, i32 0
  br label %151

151:                                              ; preds = %166, %146
  %152 = phi i64 [ 0, %146 ], [ %167, %166 ]
  %153 = load i32, i32* %148, align 16
  %154 = zext i32 %153 to i64
  %155 = icmp eq i64 %152, %154
  br i1 %155, label %166, label %156

156:                                              ; preds = %151
  %157 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %147, i64 0, i32 3, i64 %152, i32 0
  store i32 0, i32* %157, align 8
  %158 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %147, i64 0, i32 3, i64 %152, i32 4
  %159 = load i8, i8* %158, align 8
  %160 = icmp eq i8 %159, 0
  br i1 %160, label %161, label %166

161:                                              ; preds = %156
  %162 = load i32 (i8*, %struct.vpx_codec_frame_buffer*)*, i32 (i8*, %struct.vpx_codec_frame_buffer*)** %149, align 8
  %163 = load i8*, i8** %150, align 8
  %164 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %147, i64 0, i32 3, i64 %152, i32 7
  %165 = call i32 %162(i8* %163, %struct.vpx_codec_frame_buffer* %164) #9
  store i8 1, i8* %158, align 8
  br label %166

166:                                              ; preds = %161, %156, %151
  %167 = add nuw nsw i64 %152, 1
  %168 = icmp eq i64 %167, 12
  br i1 %168, label %169, label %151

169:                                              ; preds = %166, %142, %137
  store i32 0, i32* %134, align 8
  br label %535

170:                                              ; preds = %107
  %171 = load i32, i32* %110, align 16
  %172 = icmp eq i32 %171, 0
  br i1 %172, label %173, label %176

173:                                              ; preds = %170
  %174 = call i32 @vpx_rb_read_bit(%struct.vpx_read_bit_buffer* nonnull %13) #9
  %175 = load i32, i32* %112, align 16
  br label %176

176:                                              ; preds = %173, %170
  %177 = phi i32 [ %175, %173 ], [ %111, %170 ]
  %178 = phi i32 [ %174, %173 ], [ 0, %170 ]
  %179 = trunc i32 %178 to i8
  store i8 %179, i8* %49, align 4
  %180 = icmp eq i32 %177, 0
  br i1 %180, label %181, label %184

181:                                              ; preds = %176
  %182 = call i32 @vpx_rb_read_literal(%struct.vpx_read_bit_buffer* nonnull %13, i32 2) #9
  %183 = load i8, i8* %49, align 4
  br label %184

184:                                              ; preds = %181, %176
  %185 = phi i8 [ %179, %176 ], [ %183, %181 ]
  %186 = phi i32 [ 0, %176 ], [ %182, %181 ]
  %187 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 30
  store i32 %186, i32* %187, align 4
  %188 = icmp eq i8 %185, 0
  br i1 %188, label %220, label %189

189:                                              ; preds = %184
  %190 = call i32 @vpx_rb_read_literal(%struct.vpx_read_bit_buffer* nonnull %13, i32 8) #9
  %191 = icmp eq i32 %190, 73
  br i1 %191, label %192, label %198

192:                                              ; preds = %189
  %193 = call i32 @vpx_rb_read_literal(%struct.vpx_read_bit_buffer* nonnull %13, i32 8) #9
  %194 = icmp eq i32 %193, 131
  br i1 %194, label %195, label %198

195:                                              ; preds = %192
  %196 = call i32 @vpx_rb_read_literal(%struct.vpx_read_bit_buffer* nonnull %13, i32 8) #9
  %197 = icmp eq i32 %196, 66
  br i1 %197, label %200, label %198

198:                                              ; preds = %195, %192, %189
  %199 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %15, i64 0, i32 0
  call void (%struct.vpx_internal_error_info*, i32, i8*, ...) @vpx_internal_error(%struct.vpx_internal_error_info* %199, i32 5, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.8, i64 0, i64 0)) #9
  br label %200

200:                                              ; preds = %198, %195
  %201 = load i32, i32* %67, align 4
  %202 = icmp eq i32 %201, 0
  br i1 %202, label %204, label %203

203:                                              ; preds = %200
  call fastcc void @read_bitdepth_colorspace_sampling(%struct.VP9Common* %15, %struct.vpx_read_bit_buffer* nonnull %13) #9
  br label %211

204:                                              ; preds = %200
  %205 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 1
  store i32 1, i32* %205, align 8
  %206 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 2
  store i32 0, i32* %206, align 4
  %207 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 9
  store i32 1, i32* %207, align 8
  %208 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 10
  store i32 1, i32* %208, align 4
  %209 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 80
  store i32 8, i32* %209, align 16
  %210 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 11
  store i32 0, i32* %210, align 16
  br label %211

211:                                              ; preds = %204, %203
  %212 = call i32 @vpx_rb_read_literal(%struct.vpx_read_bit_buffer* nonnull %13, i32 8) #9
  %213 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 3
  store i32 %212, i32* %213, align 4
  call fastcc void @setup_frame_size(%struct.VP9Common* %15, %struct.vpx_read_bit_buffer* nonnull %13) #9
  %214 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 16
  %215 = load i32, i32* %214, align 8
  %216 = icmp eq i32 %215, 0
  br i1 %216, label %535, label %217

217:                                              ; preds = %211
  %218 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 15
  %219 = bitcast [8 x i32]* %218 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %219, i8 -1, i64 32, i1 false) #9
  store i32 0, i32* %214, align 8
  br label %535

220:                                              ; preds = %184
  %221 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 16
  %222 = load i32, i32* %221, align 8
  %223 = icmp eq i32 %222, 1
  br i1 %223, label %535, label %224

224:                                              ; preds = %220
  %225 = call i32 @vpx_rb_read_literal(%struct.vpx_read_bit_buffer* nonnull %13, i32 8) #9
  %226 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 3
  store i32 %225, i32* %226, align 4
  %227 = call i32 @vpx_rb_read_literal(%struct.vpx_read_bit_buffer* nonnull %13, i32 3) #9
  %228 = sext i32 %227 to i64
  %229 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 15, i64 %228
  %230 = load i32, i32* %229, align 4
  %231 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 17, i64 0, i32 0
  store i32 %230, i32* %231, align 8
  %232 = sext i32 %230 to i64
  %233 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %45, i64 0, i32 3, i64 %232, i32 8
  %234 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 17, i64 0, i32 1
  store %struct.yv12_buffer_config* %233, %struct.yv12_buffer_config** %234, align 8
  %235 = call i32 @vpx_rb_read_bit(%struct.vpx_read_bit_buffer* nonnull %13) #9
  %236 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 67, i64 1
  store i32 %235, i32* %236, align 4
  %237 = call i32 @vpx_rb_read_literal(%struct.vpx_read_bit_buffer* nonnull %13, i32 3) #9
  %238 = sext i32 %237 to i64
  %239 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 15, i64 %238
  %240 = load i32, i32* %239, align 4
  %241 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 17, i64 1, i32 0
  store i32 %240, i32* %241, align 8
  %242 = sext i32 %240 to i64
  %243 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %45, i64 0, i32 3, i64 %242, i32 8
  %244 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 17, i64 1, i32 1
  store %struct.yv12_buffer_config* %243, %struct.yv12_buffer_config** %244, align 8
  %245 = call i32 @vpx_rb_read_bit(%struct.vpx_read_bit_buffer* nonnull %13) #9
  %246 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 67, i64 2
  store i32 %245, i32* %246, align 4
  %247 = call i32 @vpx_rb_read_literal(%struct.vpx_read_bit_buffer* nonnull %13, i32 3) #9
  %248 = sext i32 %247 to i64
  %249 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 15, i64 %248
  %250 = load i32, i32* %249, align 4
  %251 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 17, i64 2, i32 0
  store i32 %250, i32* %251, align 8
  %252 = sext i32 %250 to i64
  %253 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %45, i64 0, i32 3, i64 %252, i32 8
  %254 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 17, i64 2, i32 1
  store %struct.yv12_buffer_config* %253, %struct.yv12_buffer_config** %254, align 8
  %255 = call i32 @vpx_rb_read_bit(%struct.vpx_read_bit_buffer* nonnull %13) #9
  %256 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 67, i64 3
  store i32 %255, i32* %256, align 4
  %257 = load %struct.BufferPool*, %struct.BufferPool** %44, align 8
  %258 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %15, i64 0, i32 0
  %259 = call i32 @vpx_rb_read_bit(%struct.vpx_read_bit_buffer* nonnull %13) #9
  %260 = icmp eq i32 %259, 0
  br i1 %260, label %273, label %261

261:                                              ; preds = %224
  %262 = load i32, i32* %231, align 16
  %263 = icmp eq i32 %262, -1
  br i1 %263, label %272, label %264

264:                                              ; preds = %453, %446, %261
  %265 = phi i64 [ 0, %261 ], [ 1, %446 ], [ 2, %453 ]
  %266 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 17, i64 %265, i32 1
  %267 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %266, align 8
  %268 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %267, i64 0, i32 2
  %269 = load i32, i32* %268, align 8
  %270 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %267, i64 0, i32 3
  %271 = load i32, i32* %270, align 4
  br label %276

272:                                              ; preds = %261
  call void (%struct.vpx_internal_error_info*, i32, i8*, ...) @vpx_internal_error(%struct.vpx_internal_error_info* %258, i32 7, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.19, i64 0, i64 0)) #9
  br label %273

273:                                              ; preds = %272, %224
  %274 = call i32 @vpx_rb_read_bit(%struct.vpx_read_bit_buffer* nonnull %13) #9
  %275 = icmp eq i32 %274, 0
  br i1 %275, label %450, label %446

276:                                              ; preds = %457, %264
  %277 = phi i32 [ %269, %264 ], [ %459, %457 ]
  %278 = phi i32 [ %271, %264 ], [ %461, %457 ]
  %279 = icmp slt i32 %277, 1
  %280 = icmp slt i32 %278, 1
  %281 = or i1 %279, %280
  br i1 %281, label %282, label %283

282:                                              ; preds = %276
  call void (%struct.vpx_internal_error_info*, i32, i8*, ...) @vpx_internal_error(%struct.vpx_internal_error_info* %258, i32 7, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.20, i64 0, i64 0)) #9
  br label %283

283:                                              ; preds = %282, %276
  %284 = shl nsw i32 %277, 1
  %285 = shl nsw i32 %278, 1
  %286 = load i32, i32* %231, align 8
  %287 = icmp eq i32 %286, -1
  br i1 %287, label %303, label %288

288:                                              ; preds = %283
  %289 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %234, align 8
  %290 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %289, i64 0, i32 2
  %291 = load i32, i32* %290, align 8
  %292 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %289, i64 0, i32 3
  %293 = load i32, i32* %292, align 4
  %294 = icmp slt i32 %284, %291
  %295 = icmp slt i32 %285, %293
  %296 = or i1 %294, %295
  %297 = shl nsw i32 %291, 4
  %298 = icmp slt i32 %297, %277
  %299 = or i1 %298, %296
  br i1 %299, label %303, label %300

300:                                              ; preds = %288
  %301 = shl nsw i32 %293, 4
  %302 = icmp sge i32 %301, %278
  br label %303

303:                                              ; preds = %300, %288, %283
  %304 = phi i1 [ false, %283 ], [ false, %288 ], [ %302, %300 ]
  %305 = load i32, i32* %241, align 8
  %306 = icmp eq i32 %305, -1
  br i1 %306, label %423, label %408

307:                                              ; preds = %443
  call void (%struct.vpx_internal_error_info*, i32, i8*, ...) @vpx_internal_error(%struct.vpx_internal_error_info* %258, i32 7, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.21, i64 0, i64 0)) #9
  %308 = load i32, i32* %231, align 8
  br label %309

309:                                              ; preds = %443, %307
  %310 = phi i32 [ %286, %443 ], [ %308, %307 ]
  %311 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 80
  %312 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 9
  %313 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 10
  %314 = icmp eq i32 %310, -1
  br i1 %314, label %331, label %315

315:                                              ; preds = %309
  %316 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %234, align 8
  %317 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %316, i64 0, i32 23
  %318 = load i32, i32* %317, align 8
  %319 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %316, i64 0, i32 21
  %320 = load i32, i32* %319, align 8
  %321 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %316, i64 0, i32 22
  %322 = load i32, i32* %321, align 4
  %323 = load i32, i32* %311, align 16
  %324 = load i32, i32* %312, align 8
  %325 = load i32, i32* %313, align 4
  %326 = icmp eq i32 %318, %323
  %327 = icmp eq i32 %320, %324
  %328 = and i1 %326, %327
  %329 = icmp eq i32 %322, %325
  %330 = and i1 %328, %329
  br i1 %330, label %332, label %331

331:                                              ; preds = %315, %309
  call void (%struct.vpx_internal_error_info*, i32, i8*, ...) @vpx_internal_error(%struct.vpx_internal_error_info* %258, i32 7, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.22, i64 0, i64 0)) #9
  br label %332

332:                                              ; preds = %331, %315
  %333 = load i32, i32* %241, align 8
  %334 = icmp eq i32 %333, -1
  br i1 %334, label %378, label %362

335:                                              ; preds = %399
  %336 = call i32 @vpx_rb_read_literal(%struct.vpx_read_bit_buffer* nonnull %13, i32 16) #9
  %337 = add nsw i32 %336, 1
  store i32 %337, i32* %402, align 4
  %338 = call i32 @vpx_rb_read_literal(%struct.vpx_read_bit_buffer* nonnull %13, i32 16) #9
  %339 = add nsw i32 %338, 1
  store i32 %339, i32* %405, align 4
  br label %340

340:                                              ; preds = %399, %335
  %341 = load %struct.BufferPool*, %struct.BufferPool** %44, align 8
  %342 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 18
  %343 = load i32, i32* %342, align 16
  %344 = sext i32 %343 to i64
  %345 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %341, i64 0, i32 3, i64 %344, i32 8
  %346 = load i32, i32* %400, align 16
  %347 = load i32, i32* %403, align 4
  %348 = load i32, i32* %312, align 8
  %349 = load i32, i32* %313, align 4
  %350 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 11
  %351 = load i32, i32* %350, align 16
  %352 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 87
  %353 = load i32, i32* %352, align 16
  %354 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %257, i64 0, i32 3, i64 %344, i32 7
  %355 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %257, i64 0, i32 1
  %356 = load i32 (i8*, i64, %struct.vpx_codec_frame_buffer*)*, i32 (i8*, i64, %struct.vpx_codec_frame_buffer*)** %355, align 8
  %357 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %257, i64 0, i32 0
  %358 = load i8*, i8** %357, align 8
  %359 = call i32 @vpx_realloc_frame_buffer(%struct.yv12_buffer_config* %345, i32 %346, i32 %347, i32 %348, i32 %349, i32 %351, i32 32, i32 %353, %struct.vpx_codec_frame_buffer* %354, i32 (i8*, i64, %struct.vpx_codec_frame_buffer*)* %356, i8* %358) #9
  %360 = icmp eq i32 %359, 0
  br i1 %360, label %462, label %361

361:                                              ; preds = %340
  call void (%struct.vpx_internal_error_info*, i32, i8*, ...) @vpx_internal_error(%struct.vpx_internal_error_info* %258, i32 2, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.15, i64 0, i64 0)) #9
  br label %462

362:                                              ; preds = %332
  %363 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %244, align 8
  %364 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %363, i64 0, i32 23
  %365 = load i32, i32* %364, align 8
  %366 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %363, i64 0, i32 21
  %367 = load i32, i32* %366, align 8
  %368 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %363, i64 0, i32 22
  %369 = load i32, i32* %368, align 4
  %370 = load i32, i32* %311, align 16
  %371 = load i32, i32* %312, align 8
  %372 = load i32, i32* %313, align 4
  %373 = icmp eq i32 %365, %370
  %374 = icmp eq i32 %367, %371
  %375 = and i1 %373, %374
  %376 = icmp eq i32 %369, %372
  %377 = and i1 %375, %376
  br i1 %377, label %379, label %378

378:                                              ; preds = %362, %332
  call void (%struct.vpx_internal_error_info*, i32, i8*, ...) @vpx_internal_error(%struct.vpx_internal_error_info* %258, i32 7, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.22, i64 0, i64 0)) #9
  br label %379

379:                                              ; preds = %378, %362
  %380 = load i32, i32* %251, align 8
  %381 = icmp eq i32 %380, -1
  br i1 %381, label %398, label %382

382:                                              ; preds = %379
  %383 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %254, align 8
  %384 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %383, i64 0, i32 23
  %385 = load i32, i32* %384, align 8
  %386 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %383, i64 0, i32 21
  %387 = load i32, i32* %386, align 8
  %388 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %383, i64 0, i32 22
  %389 = load i32, i32* %388, align 4
  %390 = load i32, i32* %311, align 16
  %391 = load i32, i32* %312, align 8
  %392 = load i32, i32* %313, align 4
  %393 = icmp eq i32 %385, %390
  %394 = icmp eq i32 %387, %391
  %395 = and i1 %393, %394
  %396 = icmp eq i32 %389, %392
  %397 = and i1 %395, %396
  br i1 %397, label %399, label %398

398:                                              ; preds = %382, %379
  call void (%struct.vpx_internal_error_info*, i32, i8*, ...) @vpx_internal_error(%struct.vpx_internal_error_info* %258, i32 7, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.22, i64 0, i64 0)) #9
  br label %399

399:                                              ; preds = %398, %382
  call fastcc void @resize_context_buffers(%struct.VP9Common* %15, i32 %277, i32 %278) #9
  %400 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 3
  %401 = load i32, i32* %400, align 16
  %402 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 5
  store i32 %401, i32* %402, align 8
  %403 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 4
  %404 = load i32, i32* %403, align 4
  %405 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 6
  store i32 %404, i32* %405, align 4
  %406 = call i32 @vpx_rb_read_bit(%struct.vpx_read_bit_buffer* nonnull %13) #9
  %407 = icmp eq i32 %406, 0
  br i1 %407, label %340, label %335

408:                                              ; preds = %303
  %409 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %244, align 8
  %410 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %409, i64 0, i32 2
  %411 = load i32, i32* %410, align 8
  %412 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %409, i64 0, i32 3
  %413 = load i32, i32* %412, align 4
  %414 = icmp slt i32 %284, %411
  %415 = icmp slt i32 %285, %413
  %416 = or i1 %414, %415
  %417 = shl nsw i32 %411, 4
  %418 = icmp slt i32 %417, %277
  %419 = or i1 %418, %416
  br i1 %419, label %423, label %420

420:                                              ; preds = %408
  %421 = shl nsw i32 %413, 4
  %422 = icmp sge i32 %421, %278
  br label %423

423:                                              ; preds = %420, %408, %303
  %424 = phi i1 [ false, %303 ], [ false, %408 ], [ %422, %420 ]
  %425 = or i1 %304, %424
  %426 = load i32, i32* %251, align 8
  %427 = icmp eq i32 %426, -1
  br i1 %427, label %443, label %428

428:                                              ; preds = %423
  %429 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %254, align 8
  %430 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %429, i64 0, i32 2
  %431 = load i32, i32* %430, align 8
  %432 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %429, i64 0, i32 3
  %433 = load i32, i32* %432, align 4
  %434 = icmp slt i32 %284, %431
  %435 = icmp slt i32 %285, %433
  %436 = or i1 %434, %435
  %437 = shl nsw i32 %431, 4
  %438 = icmp slt i32 %437, %277
  %439 = or i1 %438, %436
  br i1 %439, label %443, label %440

440:                                              ; preds = %428
  %441 = shl nsw i32 %433, 4
  %442 = icmp sge i32 %441, %278
  br label %443

443:                                              ; preds = %440, %428, %423
  %444 = phi i1 [ false, %423 ], [ false, %428 ], [ %442, %440 ]
  %445 = or i1 %425, %444
  br i1 %445, label %309, label %307

446:                                              ; preds = %273
  %447 = load i32, i32* %241, align 16
  %448 = icmp eq i32 %447, -1
  br i1 %448, label %449, label %264

449:                                              ; preds = %446
  call void (%struct.vpx_internal_error_info*, i32, i8*, ...) @vpx_internal_error(%struct.vpx_internal_error_info* %258, i32 7, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.19, i64 0, i64 0)) #9
  br label %450

450:                                              ; preds = %449, %273
  %451 = call i32 @vpx_rb_read_bit(%struct.vpx_read_bit_buffer* nonnull %13) #9
  %452 = icmp eq i32 %451, 0
  br i1 %452, label %457, label %453

453:                                              ; preds = %450
  %454 = load i32, i32* %251, align 16
  %455 = icmp eq i32 %454, -1
  br i1 %455, label %456, label %264

456:                                              ; preds = %453
  call void (%struct.vpx_internal_error_info*, i32, i8*, ...) @vpx_internal_error(%struct.vpx_internal_error_info* %258, i32 7, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.19, i64 0, i64 0)) #9
  br label %457

457:                                              ; preds = %456, %450
  %458 = call i32 @vpx_rb_read_literal(%struct.vpx_read_bit_buffer* nonnull %13, i32 16) #9
  %459 = add nsw i32 %458, 1
  %460 = call i32 @vpx_rb_read_literal(%struct.vpx_read_bit_buffer* nonnull %13, i32 16) #9
  %461 = add nsw i32 %460, 1
  br label %276

462:                                              ; preds = %361, %340
  %463 = load i32, i32* %342, align 16
  %464 = sext i32 %463 to i64
  %465 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %257, i64 0, i32 3, i64 %464, i32 4
  store i8 0, i8* %465, align 8
  %466 = load i32, i32* %312, align 8
  %467 = load i32, i32* %342, align 16
  %468 = sext i32 %467 to i64
  %469 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %257, i64 0, i32 3, i64 %468, i32 8, i32 21
  store i32 %466, i32* %469, align 8
  %470 = load i32, i32* %313, align 4
  %471 = load i32, i32* %342, align 16
  %472 = sext i32 %471 to i64
  %473 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %257, i64 0, i32 3, i64 %472, i32 8, i32 22
  store i32 %470, i32* %473, align 4
  %474 = load i32, i32* %311, align 16
  %475 = load i32, i32* %342, align 16
  %476 = sext i32 %475 to i64
  %477 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %257, i64 0, i32 3, i64 %476, i32 8, i32 23
  store i32 %474, i32* %477, align 8
  %478 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 1
  %479 = load i32, i32* %478, align 8
  %480 = load i32, i32* %342, align 16
  %481 = sext i32 %480 to i64
  %482 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %257, i64 0, i32 3, i64 %481, i32 8, i32 24
  store i32 %479, i32* %482, align 4
  %483 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 2
  %484 = load i32, i32* %483, align 4
  %485 = load i32, i32* %342, align 16
  %486 = sext i32 %485 to i64
  %487 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %257, i64 0, i32 3, i64 %486, i32 8, i32 25
  store i32 %484, i32* %487, align 8
  %488 = load i32, i32* %402, align 8
  %489 = load i32, i32* %342, align 16
  %490 = sext i32 %489 to i64
  %491 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %257, i64 0, i32 3, i64 %490, i32 8, i32 26
  store i32 %488, i32* %491, align 4
  %492 = load i32, i32* %405, align 4
  %493 = load i32, i32* %342, align 16
  %494 = sext i32 %493 to i64
  %495 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %257, i64 0, i32 3, i64 %494, i32 8, i32 27
  store i32 %492, i32* %495, align 8
  %496 = call i32 @vpx_rb_read_bit(%struct.vpx_read_bit_buffer* nonnull %13) #9
  %497 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 29
  store i32 %496, i32* %497, align 16
  %498 = call i32 @vpx_rb_read_bit(%struct.vpx_read_bit_buffer* nonnull %13) #9
  %499 = icmp eq i32 %498, 0
  br i1 %499, label %500, label %505

500:                                              ; preds = %462
  %501 = call i32 @vpx_rb_read_literal(%struct.vpx_read_bit_buffer* nonnull %13, i32 2) #9
  %502 = sext i32 %501 to i64
  %503 = getelementptr inbounds [4 x i8], [4 x i8]* @read_interp_filter.literal_to_filter, i64 0, i64 %502
  %504 = load i8, i8* %503, align 1
  br label %505

505:                                              ; preds = %500, %462
  %506 = phi i8 [ %504, %500 ], [ 4, %462 ]
  %507 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 63
  store i8 %506, i8* %507, align 4
  %508 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 17, i64 0, i32 2
  %509 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %234, align 8
  %510 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %509, i64 0, i32 2
  %511 = load i32, i32* %510, align 8
  %512 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %509, i64 0, i32 3
  %513 = load i32, i32* %512, align 4
  %514 = load i32, i32* %400, align 16
  %515 = load i32, i32* %403, align 4
  %516 = load i32, i32* %350, align 16
  call void @vp9_setup_scale_factors_for_frame(%struct.scale_factors* %508, i32 %511, i32 %513, i32 %514, i32 %515, i32 %516) #9
  %517 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 17, i64 1, i32 2
  %518 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %244, align 8
  %519 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %518, i64 0, i32 2
  %520 = load i32, i32* %519, align 8
  %521 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %518, i64 0, i32 3
  %522 = load i32, i32* %521, align 4
  %523 = load i32, i32* %400, align 16
  %524 = load i32, i32* %403, align 4
  %525 = load i32, i32* %350, align 16
  call void @vp9_setup_scale_factors_for_frame(%struct.scale_factors* %517, i32 %520, i32 %522, i32 %523, i32 %524, i32 %525) #9
  %526 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 17, i64 2, i32 2
  %527 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %254, align 8
  %528 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %527, i64 0, i32 2
  %529 = load i32, i32* %528, align 8
  %530 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %527, i64 0, i32 3
  %531 = load i32, i32* %530, align 4
  %532 = load i32, i32* %400, align 16
  %533 = load i32, i32* %403, align 4
  %534 = load i32, i32* %350, align 16
  call void @vp9_setup_scale_factors_for_frame(%struct.scale_factors* %526, i32 %529, i32 %531, i32 %532, i32 %533, i32 %534) #9
  br label %535

535:                                              ; preds = %505, %220, %217, %211, %169, %126
  %536 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 80
  %537 = load i32, i32* %536, align 16
  %538 = load %struct.BufferPool*, %struct.BufferPool** %44, align 8
  %539 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 18
  %540 = load i32, i32* %539, align 16
  %541 = sext i32 %540 to i64
  %542 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %538, i64 0, i32 3, i64 %541, i32 8, i32 23
  store i32 %537, i32* %542, align 8
  %543 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 1
  %544 = load i32, i32* %543, align 8
  %545 = load %struct.BufferPool*, %struct.BufferPool** %44, align 8
  %546 = load i32, i32* %539, align 16
  %547 = sext i32 %546 to i64
  %548 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %545, i64 0, i32 3, i64 %547, i32 8, i32 24
  store i32 %544, i32* %548, align 4
  %549 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 2
  %550 = load i32, i32* %549, align 4
  %551 = load %struct.BufferPool*, %struct.BufferPool** %44, align 8
  %552 = load i32, i32* %539, align 16
  %553 = sext i32 %552 to i64
  %554 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %551, i64 0, i32 3, i64 %553, i32 8, i32 25
  store i32 %550, i32* %554, align 8
  %555 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 5
  %556 = load i32, i32* %555, align 8
  %557 = load %struct.BufferPool*, %struct.BufferPool** %44, align 8
  %558 = load i32, i32* %539, align 16
  %559 = sext i32 %558 to i64
  %560 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %557, i64 0, i32 3, i64 %559, i32 8, i32 26
  store i32 %556, i32* %560, align 4
  %561 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 6
  %562 = load i32, i32* %561, align 4
  %563 = load %struct.BufferPool*, %struct.BufferPool** %44, align 8
  %564 = load i32, i32* %539, align 16
  %565 = sext i32 %564 to i64
  %566 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %563, i64 0, i32 3, i64 %565, i32 8, i32 27
  store i32 %562, i32* %566, align 8
  %567 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 16
  %568 = load i32, i32* %567, align 8
  %569 = icmp eq i32 %568, 0
  br i1 %569, label %572, label %570

570:                                              ; preds = %535
  %571 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %15, i64 0, i32 0
  call void (%struct.vpx_internal_error_info*, i32, i8*, ...) @vpx_internal_error(%struct.vpx_internal_error_info* %571, i32 7, i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.9, i64 0, i64 0)) #9
  br label %572

572:                                              ; preds = %570, %535
  %573 = load i32, i32* %112, align 16
  %574 = icmp eq i32 %573, 0
  br i1 %574, label %575, label %584

575:                                              ; preds = %572
  %576 = call i32 @vpx_rb_read_bit(%struct.vpx_read_bit_buffer* nonnull %13) #9
  %577 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 66
  store i32 %576, i32* %577, align 16
  %578 = call i32 @vpx_rb_read_bit(%struct.vpx_read_bit_buffer* nonnull %13) #9
  %579 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 84
  store i32 %578, i32* %579, align 4
  %580 = icmp eq i32 %578, 0
  br i1 %580, label %581, label %587

581:                                              ; preds = %575
  %582 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 76
  %583 = bitcast %struct.FRAME_COUNTS* %582 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %583, i8 0, i64 13224, i1 false) #9
  br label %587

584:                                              ; preds = %572
  %585 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 66
  store i32 0, i32* %585, align 16
  %586 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 84
  store i32 1, i32* %586, align 4
  br label %587

587:                                              ; preds = %584, %581, %575
  %588 = call i32 @vpx_rb_read_literal(%struct.vpx_read_bit_buffer* nonnull %13, i32 2) #9
  %589 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 75
  store i32 %588, i32* %589, align 8
  %590 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 3
  %591 = load i32, i32* %590, align 4
  %592 = icmp eq i32 %591, 0
  br i1 %592, label %596, label %616

593:                                              ; preds = %643
  %594 = trunc i64 %644 to i32
  %595 = icmp ult i32 %594, 8
  br i1 %595, label %596, label %664

596:                                              ; preds = %593, %587
  %597 = phi i64 [ %644, %593 ], [ 0, %587 ]
  %598 = and i64 %597, 4294967295
  %599 = and i64 %597, 1
  %600 = icmp eq i64 %599, 0
  br i1 %600, label %613, label %601

601:                                              ; preds = %596
  %602 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 15, i64 %598
  %603 = load i32, i32* %602, align 4
  %604 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 16, i64 %598
  store i32 %603, i32* %604, align 4
  %605 = icmp sgt i32 %603, -1
  br i1 %605, label %606, label %611

606:                                              ; preds = %601
  %607 = sext i32 %603 to i64
  %608 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %45, i64 0, i32 3, i64 %607, i32 0
  %609 = load i32, i32* %608, align 8
  %610 = add nsw i32 %609, 1
  store i32 %610, i32* %608, align 8
  br label %611

611:                                              ; preds = %606, %601
  %612 = add nuw nsw i64 %598, 1
  br label %613

613:                                              ; preds = %596, %611
  %614 = phi i64 [ %598, %596 ], [ %612, %611 ]
  %615 = icmp eq i64 %598, 7
  br i1 %615, label %664, label %647

616:                                              ; preds = %587, %643
  %617 = phi i64 [ %644, %643 ], [ 0, %587 ]
  %618 = phi i32 [ %645, %643 ], [ %591, %587 ]
  %619 = and i32 %618, 1
  %620 = icmp eq i32 %619, 0
  br i1 %620, label %631, label %621

621:                                              ; preds = %616
  %622 = load i32, i32* %539, align 16
  %623 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 16, i64 %617
  store i32 %622, i32* %623, align 4
  %624 = load i32, i32* %539, align 16
  %625 = sext i32 %624 to i64
  %626 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %45, i64 0, i32 3, i64 %625, i32 0
  %627 = load i32, i32* %626, align 8
  %628 = add nsw i32 %627, 1
  store i32 %628, i32* %626, align 8
  %629 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 15, i64 %617
  %630 = load i32, i32* %629, align 4
  br label %635

631:                                              ; preds = %616
  %632 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 15, i64 %617
  %633 = load i32, i32* %632, align 4
  %634 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 16, i64 %617
  store i32 %633, i32* %634, align 4
  br label %635

635:                                              ; preds = %631, %621
  %636 = phi i32 [ %633, %631 ], [ %630, %621 ]
  %637 = icmp sgt i32 %636, -1
  br i1 %637, label %638, label %643

638:                                              ; preds = %635
  %639 = sext i32 %636 to i64
  %640 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %45, i64 0, i32 3, i64 %639, i32 0
  %641 = load i32, i32* %640, align 8
  %642 = add nsw i32 %641, 1
  store i32 %642, i32* %640, align 8
  br label %643

643:                                              ; preds = %638, %635
  %644 = add nuw i64 %617, 1
  %645 = ashr i32 %618, 1
  %646 = icmp eq i32 %645, 0
  br i1 %646, label %593, label %616

647:                                              ; preds = %613, %2504
  %648 = phi i64 [ %2505, %2504 ], [ %614, %613 ]
  %649 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 15, i64 %648
  %650 = load i32, i32* %649, align 4
  %651 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 16, i64 %648
  store i32 %650, i32* %651, align 4
  %652 = icmp sgt i32 %650, -1
  br i1 %652, label %653, label %658

653:                                              ; preds = %647
  %654 = sext i32 %650 to i64
  %655 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %45, i64 0, i32 3, i64 %654, i32 0
  %656 = load i32, i32* %655, align 8
  %657 = add nsw i32 %656, 1
  store i32 %657, i32* %655, align 8
  br label %658

658:                                              ; preds = %653, %647
  %659 = add nuw nsw i64 %648, 1
  %660 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 15, i64 %659
  %661 = load i32, i32* %660, align 4
  %662 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 16, i64 %659
  store i32 %661, i32* %662, align 4
  %663 = icmp sgt i32 %661, -1
  br i1 %663, label %2499, label %2504

664:                                              ; preds = %613, %2504, %593
  %665 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 17
  store i32 1, i32* %665, align 4
  %666 = load i32, i32* %46, align 4
  %667 = icmp eq i32 %666, 0
  br i1 %667, label %674, label %668

668:                                              ; preds = %664
  %669 = load i8, i8* %49, align 4
  %670 = icmp eq i8 %669, 0
  br i1 %670, label %671, label %674

671:                                              ; preds = %668
  %672 = load i32, i32* %112, align 16
  %673 = icmp eq i32 %672, 0
  br i1 %673, label %675, label %674

674:                                              ; preds = %671, %668, %664
  call void @vp9_setup_past_independence(%struct.VP9Common* %15) #9
  br label %675

675:                                              ; preds = %674, %671
  %676 = call i32 @vpx_rb_read_literal(%struct.vpx_read_bit_buffer* nonnull %13, i32 6) #9
  %677 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 68, i32 0
  store i32 %676, i32* %677, align 8
  %678 = call i32 @vpx_rb_read_literal(%struct.vpx_read_bit_buffer* nonnull %13, i32 3) #9
  %679 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 68, i32 2
  store i32 %678, i32* %679, align 8
  %680 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 68, i32 5
  store i8 0, i8* %680, align 1
  %681 = call i32 @vpx_rb_read_bit(%struct.vpx_read_bit_buffer* nonnull %13) #9
  %682 = trunc i32 %681 to i8
  %683 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 68, i32 4
  store i8 %682, i8* %683, align 8
  %684 = icmp eq i8 %682, 0
  br i1 %684, label %731, label %685

685:                                              ; preds = %675
  %686 = call i32 @vpx_rb_read_bit(%struct.vpx_read_bit_buffer* nonnull %13) #9
  %687 = trunc i32 %686 to i8
  store i8 %687, i8* %680, align 1
  %688 = icmp eq i8 %687, 0
  br i1 %688, label %731, label %689

689:                                              ; preds = %685
  %690 = call i32 @vpx_rb_read_bit(%struct.vpx_read_bit_buffer* nonnull %13) #9
  %691 = icmp eq i32 %690, 0
  br i1 %691, label %696, label %692

692:                                              ; preds = %689
  %693 = call i32 @vpx_rb_read_signed_literal(%struct.vpx_read_bit_buffer* nonnull %13, i32 6) #9
  %694 = trunc i32 %693 to i8
  %695 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 68, i32 6, i64 0
  store i8 %694, i8* %695, align 1
  br label %696

696:                                              ; preds = %692, %689
  %697 = call i32 @vpx_rb_read_bit(%struct.vpx_read_bit_buffer* nonnull %13) #9
  %698 = icmp eq i32 %697, 0
  br i1 %698, label %714, label %710

699:                                              ; preds = %728
  %700 = call i32 @vpx_rb_read_signed_literal(%struct.vpx_read_bit_buffer* nonnull %13, i32 6) #9
  %701 = trunc i32 %700 to i8
  %702 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 68, i32 8, i64 0
  store i8 %701, i8* %702, align 1
  br label %703

703:                                              ; preds = %728, %699
  %704 = call i32 @vpx_rb_read_bit(%struct.vpx_read_bit_buffer* nonnull %13) #9
  %705 = icmp eq i32 %704, 0
  br i1 %705, label %731, label %706

706:                                              ; preds = %703
  %707 = call i32 @vpx_rb_read_signed_literal(%struct.vpx_read_bit_buffer* nonnull %13, i32 6) #9
  %708 = trunc i32 %707 to i8
  %709 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 68, i32 8, i64 1
  store i8 %708, i8* %709, align 1
  br label %731

710:                                              ; preds = %696
  %711 = call i32 @vpx_rb_read_signed_literal(%struct.vpx_read_bit_buffer* nonnull %13, i32 6) #9
  %712 = trunc i32 %711 to i8
  %713 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 68, i32 6, i64 1
  store i8 %712, i8* %713, align 1
  br label %714

714:                                              ; preds = %710, %696
  %715 = call i32 @vpx_rb_read_bit(%struct.vpx_read_bit_buffer* nonnull %13) #9
  %716 = icmp eq i32 %715, 0
  br i1 %716, label %721, label %717

717:                                              ; preds = %714
  %718 = call i32 @vpx_rb_read_signed_literal(%struct.vpx_read_bit_buffer* nonnull %13, i32 6) #9
  %719 = trunc i32 %718 to i8
  %720 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 68, i32 6, i64 2
  store i8 %719, i8* %720, align 1
  br label %721

721:                                              ; preds = %717, %714
  %722 = call i32 @vpx_rb_read_bit(%struct.vpx_read_bit_buffer* nonnull %13) #9
  %723 = icmp eq i32 %722, 0
  br i1 %723, label %728, label %724

724:                                              ; preds = %721
  %725 = call i32 @vpx_rb_read_signed_literal(%struct.vpx_read_bit_buffer* nonnull %13, i32 6) #9
  %726 = trunc i32 %725 to i8
  %727 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 68, i32 6, i64 3
  store i8 %726, i8* %727, align 1
  br label %728

728:                                              ; preds = %724, %721
  %729 = call i32 @vpx_rb_read_bit(%struct.vpx_read_bit_buffer* nonnull %13) #9
  %730 = icmp eq i32 %729, 0
  br i1 %730, label %703, label %699

731:                                              ; preds = %706, %703, %685, %675
  %732 = call i32 @vpx_rb_read_literal(%struct.vpx_read_bit_buffer* nonnull %13, i32 8) #9
  %733 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 38
  store i32 %732, i32* %733, align 4
  %734 = call i32 @vpx_rb_read_bit(%struct.vpx_read_bit_buffer* nonnull %13) #9
  %735 = icmp eq i32 %734, 0
  br i1 %735, label %738, label %736

736:                                              ; preds = %731
  %737 = call i32 @vpx_rb_read_signed_literal(%struct.vpx_read_bit_buffer* nonnull %13, i32 4) #9
  br label %738

738:                                              ; preds = %736, %731
  %739 = phi i32 [ %737, %736 ], [ 0, %731 ]
  %740 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 39
  store i32 %739, i32* %740, align 8
  %741 = call i32 @vpx_rb_read_bit(%struct.vpx_read_bit_buffer* nonnull %13) #9
  %742 = icmp eq i32 %741, 0
  br i1 %742, label %745, label %743

743:                                              ; preds = %738
  %744 = call i32 @vpx_rb_read_signed_literal(%struct.vpx_read_bit_buffer* nonnull %13, i32 4) #9
  br label %745

745:                                              ; preds = %743, %738
  %746 = phi i32 [ %744, %743 ], [ 0, %738 ]
  %747 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 40
  store i32 %746, i32* %747, align 4
  %748 = call i32 @vpx_rb_read_bit(%struct.vpx_read_bit_buffer* nonnull %13) #9
  %749 = icmp eq i32 %748, 0
  br i1 %749, label %752, label %750

750:                                              ; preds = %745
  %751 = call i32 @vpx_rb_read_signed_literal(%struct.vpx_read_bit_buffer* nonnull %13, i32 4) #9
  br label %752

752:                                              ; preds = %750, %745
  %753 = phi i32 [ %751, %750 ], [ 0, %745 ]
  %754 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 41
  store i32 %753, i32* %754, align 16
  %755 = load i32, i32* %536, align 16
  %756 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 81
  store i32 %755, i32* %756, align 4
  %757 = load i32, i32* %733, align 4
  %758 = icmp eq i32 %757, 0
  br i1 %758, label %759, label %768

759:                                              ; preds = %752
  %760 = load i32, i32* %740, align 8
  %761 = icmp eq i32 %760, 0
  br i1 %761, label %762, label %768

762:                                              ; preds = %759
  %763 = load i32, i32* %747, align 4
  %764 = icmp eq i32 %763, 0
  br i1 %764, label %765, label %768

765:                                              ; preds = %762
  %766 = icmp eq i32 %753, 0
  %767 = zext i1 %766 to i32
  br label %768

768:                                              ; preds = %765, %762, %759, %752
  %769 = phi i32 [ 0, %762 ], [ 0, %759 ], [ 0, %752 ], [ %767, %765 ]
  %770 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 0, i32 24
  store i32 %769, i32* %770, align 4
  %771 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 0, i32 23
  store i32 %755, i32* %771, align 8
  %772 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 69
  %773 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 69, i32 1
  store i8 0, i8* %773, align 1
  %774 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 69, i32 2
  store i8 0, i8* %774, align 2
  %775 = call i32 @vpx_rb_read_bit(%struct.vpx_read_bit_buffer* nonnull %13) #9
  %776 = trunc i32 %775 to i8
  %777 = getelementptr inbounds %struct.segmentation, %struct.segmentation* %772, i64 0, i32 0
  store i8 %776, i8* %777, align 4
  %778 = icmp eq i8 %776, 0
  br i1 %778, label %935, label %779

779:                                              ; preds = %768
  %780 = call i32 @vpx_rb_read_bit(%struct.vpx_read_bit_buffer* nonnull %13) #9
  %781 = trunc i32 %780 to i8
  store i8 %781, i8* %773, align 1
  %782 = icmp eq i8 %781, 0
  br i1 %782, label %807, label %783

783:                                              ; preds = %779
  %784 = call i32 @vpx_rb_read_bit(%struct.vpx_read_bit_buffer* nonnull %13) #9
  %785 = icmp eq i32 %784, 0
  br i1 %785, label %789, label %786

786:                                              ; preds = %783
  %787 = call i32 @vpx_rb_read_literal(%struct.vpx_read_bit_buffer* nonnull %13, i32 8) #9
  %788 = trunc i32 %787 to i8
  br label %789

789:                                              ; preds = %786, %783
  %790 = phi i8 [ %788, %786 ], [ -1, %783 ]
  %791 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 69, i32 5, i64 0
  store i8 %790, i8* %791, align 1
  %792 = call i32 @vpx_rb_read_bit(%struct.vpx_read_bit_buffer* nonnull %13) #9
  %793 = icmp eq i32 %792, 0
  br i1 %793, label %863, label %860

794:                                              ; preds = %903
  %795 = call i32 @vpx_rb_read_bit(%struct.vpx_read_bit_buffer* nonnull %13) #9
  %796 = icmp eq i32 %795, 0
  br i1 %796, label %802, label %799

797:                                              ; preds = %903
  %798 = getelementptr %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 69, i32 6, i64 0
  call void @llvm.memset.p0i8.i64(i8* align 1 %798, i8 -1, i64 3, i1 false) #9
  br label %807

799:                                              ; preds = %794
  %800 = call i32 @vpx_rb_read_literal(%struct.vpx_read_bit_buffer* nonnull %13, i32 8) #9
  %801 = trunc i32 %800 to i8
  br label %802

802:                                              ; preds = %799, %794
  %803 = phi i8 [ %801, %799 ], [ -1, %794 ]
  %804 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 69, i32 6, i64 0
  store i8 %803, i8* %804, align 1
  %805 = call i32 @vpx_rb_read_bit(%struct.vpx_read_bit_buffer* nonnull %13) #9
  %806 = icmp eq i32 %805, 0
  br i1 %806, label %849, label %846

807:                                              ; preds = %857, %797, %779
  %808 = call i32 @vpx_rb_read_bit(%struct.vpx_read_bit_buffer* nonnull %13) #9
  %809 = trunc i32 %808 to i8
  store i8 %809, i8* %774, align 2
  %810 = icmp eq i8 %809, 0
  br i1 %810, label %910, label %811

811:                                              ; preds = %807
  %812 = call i32 @vpx_rb_read_bit(%struct.vpx_read_bit_buffer* nonnull %13) #9
  %813 = trunc i32 %812 to i8
  %814 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 69, i32 3
  store i8 %813, i8* %814, align 1
  call void @vp9_clearall_segfeatures(%struct.segmentation* %772) #9
  br label %815

815:                                              ; preds = %843, %811
  %816 = phi i32 [ 0, %811 ], [ %844, %843 ]
  br label %817

817:                                              ; preds = %839, %815
  %818 = phi i32 [ 0, %815 ], [ %841, %839 ]
  %819 = call i32 @vpx_rb_read_bit(%struct.vpx_read_bit_buffer* nonnull %13) #9
  %820 = icmp eq i32 %819, 0
  br i1 %820, label %839, label %821

821:                                              ; preds = %817
  call void @vp9_enable_segfeature(%struct.segmentation* %772, i32 %816, i32 %818) #9
  %822 = call i32 @vp9_seg_feature_data_max(i32 %818) #9
  %823 = icmp eq i32 %822, 0
  br i1 %823, label %827, label %824

824:                                              ; preds = %821
  %825 = call i32 @llvm.ctlz.i32(i32 %822, i1 true) #9, !range !2
  %826 = sub nuw nsw i32 32, %825
  br label %827

827:                                              ; preds = %824, %821
  %828 = phi i32 [ %826, %824 ], [ 0, %821 ]
  %829 = call i32 @vpx_rb_read_literal(%struct.vpx_read_bit_buffer* nonnull %13, i32 %828) #9
  %830 = icmp sgt i32 %829, %822
  %831 = select i1 %830, i32 %822, i32 %829
  %832 = call i32 @vp9_is_segfeature_signed(i32 %818) #9
  %833 = icmp eq i32 %832, 0
  br i1 %833, label %839, label %834

834:                                              ; preds = %827
  %835 = call i32 @vpx_rb_read_bit(%struct.vpx_read_bit_buffer* nonnull %13) #9
  %836 = icmp eq i32 %835, 0
  %837 = sub nsw i32 0, %831
  %838 = select i1 %836, i32 %831, i32 %837
  br label %839

839:                                              ; preds = %834, %827, %817
  %840 = phi i32 [ %838, %834 ], [ %831, %827 ], [ 0, %817 ]
  call void @vp9_set_segdata(%struct.segmentation* %772, i32 %816, i32 %818, i32 %840) #9
  %841 = add nuw nsw i32 %818, 1
  %842 = icmp eq i32 %841, 4
  br i1 %842, label %843, label %817

843:                                              ; preds = %839
  %844 = add nuw nsw i32 %816, 1
  %845 = icmp eq i32 %844, 8
  br i1 %845, label %910, label %815

846:                                              ; preds = %802
  %847 = call i32 @vpx_rb_read_literal(%struct.vpx_read_bit_buffer* nonnull %13, i32 8) #9
  %848 = trunc i32 %847 to i8
  br label %849

849:                                              ; preds = %846, %802
  %850 = phi i8 [ %848, %846 ], [ -1, %802 ]
  %851 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 69, i32 6, i64 1
  store i8 %850, i8* %851, align 1
  %852 = call i32 @vpx_rb_read_bit(%struct.vpx_read_bit_buffer* nonnull %13) #9
  %853 = icmp eq i32 %852, 0
  br i1 %853, label %857, label %854

854:                                              ; preds = %849
  %855 = call i32 @vpx_rb_read_literal(%struct.vpx_read_bit_buffer* nonnull %13, i32 8) #9
  %856 = trunc i32 %855 to i8
  br label %857

857:                                              ; preds = %854, %849
  %858 = phi i8 [ %856, %854 ], [ -1, %849 ]
  %859 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 69, i32 6, i64 2
  store i8 %858, i8* %859, align 1
  br label %807

860:                                              ; preds = %789
  %861 = call i32 @vpx_rb_read_literal(%struct.vpx_read_bit_buffer* nonnull %13, i32 8) #9
  %862 = trunc i32 %861 to i8
  br label %863

863:                                              ; preds = %860, %789
  %864 = phi i8 [ %862, %860 ], [ -1, %789 ]
  %865 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 69, i32 5, i64 1
  store i8 %864, i8* %865, align 1
  %866 = call i32 @vpx_rb_read_bit(%struct.vpx_read_bit_buffer* nonnull %13) #9
  %867 = icmp eq i32 %866, 0
  br i1 %867, label %871, label %868

868:                                              ; preds = %863
  %869 = call i32 @vpx_rb_read_literal(%struct.vpx_read_bit_buffer* nonnull %13, i32 8) #9
  %870 = trunc i32 %869 to i8
  br label %871

871:                                              ; preds = %868, %863
  %872 = phi i8 [ %870, %868 ], [ -1, %863 ]
  %873 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 69, i32 5, i64 2
  store i8 %872, i8* %873, align 1
  %874 = call i32 @vpx_rb_read_bit(%struct.vpx_read_bit_buffer* nonnull %13) #9
  %875 = icmp eq i32 %874, 0
  br i1 %875, label %879, label %876

876:                                              ; preds = %871
  %877 = call i32 @vpx_rb_read_literal(%struct.vpx_read_bit_buffer* nonnull %13, i32 8) #9
  %878 = trunc i32 %877 to i8
  br label %879

879:                                              ; preds = %876, %871
  %880 = phi i8 [ %878, %876 ], [ -1, %871 ]
  %881 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 69, i32 5, i64 3
  store i8 %880, i8* %881, align 1
  %882 = call i32 @vpx_rb_read_bit(%struct.vpx_read_bit_buffer* nonnull %13) #9
  %883 = icmp eq i32 %882, 0
  br i1 %883, label %887, label %884

884:                                              ; preds = %879
  %885 = call i32 @vpx_rb_read_literal(%struct.vpx_read_bit_buffer* nonnull %13, i32 8) #9
  %886 = trunc i32 %885 to i8
  br label %887

887:                                              ; preds = %884, %879
  %888 = phi i8 [ %886, %884 ], [ -1, %879 ]
  %889 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 69, i32 5, i64 4
  store i8 %888, i8* %889, align 1
  %890 = call i32 @vpx_rb_read_bit(%struct.vpx_read_bit_buffer* nonnull %13) #9
  %891 = icmp eq i32 %890, 0
  br i1 %891, label %895, label %892

892:                                              ; preds = %887
  %893 = call i32 @vpx_rb_read_literal(%struct.vpx_read_bit_buffer* nonnull %13, i32 8) #9
  %894 = trunc i32 %893 to i8
  br label %895

895:                                              ; preds = %892, %887
  %896 = phi i8 [ %894, %892 ], [ -1, %887 ]
  %897 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 69, i32 5, i64 5
  store i8 %896, i8* %897, align 1
  %898 = call i32 @vpx_rb_read_bit(%struct.vpx_read_bit_buffer* nonnull %13) #9
  %899 = icmp eq i32 %898, 0
  br i1 %899, label %903, label %900

900:                                              ; preds = %895
  %901 = call i32 @vpx_rb_read_literal(%struct.vpx_read_bit_buffer* nonnull %13, i32 8) #9
  %902 = trunc i32 %901 to i8
  br label %903

903:                                              ; preds = %900, %895
  %904 = phi i8 [ %902, %900 ], [ -1, %895 ]
  %905 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 69, i32 5, i64 6
  store i8 %904, i8* %905, align 1
  %906 = call i32 @vpx_rb_read_bit(%struct.vpx_read_bit_buffer* nonnull %13) #9
  %907 = trunc i32 %906 to i8
  %908 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 69, i32 4
  store i8 %907, i8* %908, align 4
  %909 = icmp eq i8 %907, 0
  br i1 %909, label %797, label %794

910:                                              ; preds = %843, %807
  %911 = load i8, i8* %777, align 8
  %912 = icmp eq i8 %911, 0
  br i1 %912, label %935, label %913

913:                                              ; preds = %910, %913
  %914 = phi i64 [ %933, %913 ], [ 0, %910 ]
  %915 = load i32, i32* %733, align 4
  %916 = trunc i64 %914 to i32
  %917 = call i32 @vp9_get_qindex(%struct.segmentation* %772, i32 %916, i32 %915) #9
  %918 = load i32, i32* %740, align 8
  %919 = load i32, i32* %536, align 16
  %920 = call signext i16 @vp9_dc_quant(i32 %917, i32 %918, i32 %919) #9
  %921 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 42, i64 %914, i64 0
  store i16 %920, i16* %921, align 4
  %922 = load i32, i32* %536, align 16
  %923 = call signext i16 @vp9_ac_quant(i32 %917, i32 0, i32 %922) #9
  %924 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 42, i64 %914, i64 1
  store i16 %923, i16* %924, align 2
  %925 = load i32, i32* %747, align 4
  %926 = load i32, i32* %536, align 16
  %927 = call signext i16 @vp9_dc_quant(i32 %917, i32 %925, i32 %926) #9
  %928 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 43, i64 %914, i64 0
  store i16 %927, i16* %928, align 4
  %929 = load i32, i32* %754, align 16
  %930 = load i32, i32* %536, align 16
  %931 = call signext i16 @vp9_ac_quant(i32 %917, i32 %929, i32 %930) #9
  %932 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 43, i64 %914, i64 1
  store i16 %931, i16* %932, align 2
  %933 = add nuw nsw i64 %914, 1
  %934 = icmp eq i64 %933, 8
  br i1 %934, label %952, label %913

935:                                              ; preds = %910, %768
  %936 = load i32, i32* %733, align 4
  %937 = load i32, i32* %740, align 8
  %938 = load i32, i32* %536, align 16
  %939 = call signext i16 @vp9_dc_quant(i32 %936, i32 %937, i32 %938) #9
  %940 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 42, i64 0, i64 0
  store i16 %939, i16* %940, align 4
  %941 = load i32, i32* %536, align 16
  %942 = call signext i16 @vp9_ac_quant(i32 %936, i32 0, i32 %941) #9
  %943 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 42, i64 0, i64 1
  store i16 %942, i16* %943, align 2
  %944 = load i32, i32* %747, align 4
  %945 = load i32, i32* %536, align 16
  %946 = call signext i16 @vp9_dc_quant(i32 %936, i32 %944, i32 %945) #9
  %947 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 43, i64 0, i64 0
  store i16 %946, i16* %947, align 4
  %948 = load i32, i32* %754, align 16
  %949 = load i32, i32* %536, align 16
  %950 = call signext i16 @vp9_ac_quant(i32 %936, i32 %948, i32 %949) #9
  %951 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 43, i64 0, i64 1
  store i16 %950, i16* %951, align 2
  br label %952

952:                                              ; preds = %913, %935
  %953 = bitcast i32* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %953) #9
  store i32 -1431655766, i32* %11, align 4
  %954 = bitcast i32* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %954) #9
  store i32 -1431655766, i32* %12, align 4
  %955 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 35
  %956 = load i32, i32* %955, align 8
  call void @vp9_get_tile_n_bits(i32 %956, i32* nonnull %11, i32* nonnull %12) #9
  %957 = load i32, i32* %12, align 4
  %958 = load i32, i32* %11, align 4
  %959 = sub nsw i32 %957, %958
  %960 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 85
  store i32 %958, i32* %960, align 8
  %961 = icmp eq i32 %959, 0
  br i1 %961, label %971, label %962

962:                                              ; preds = %952, %968
  %963 = phi i32 [ %964, %968 ], [ %959, %952 ]
  %964 = add nsw i32 %963, -1
  %965 = call i32 @vpx_rb_read_bit(%struct.vpx_read_bit_buffer* nonnull %13) #9
  %966 = icmp eq i32 %965, 0
  %967 = load i32, i32* %960, align 8
  br i1 %966, label %971, label %968

968:                                              ; preds = %962
  %969 = add nsw i32 %967, 1
  store i32 %969, i32* %960, align 8
  %970 = icmp eq i32 %964, 0
  br i1 %970, label %971, label %962

971:                                              ; preds = %968, %962, %952
  %972 = phi i32 [ %958, %952 ], [ %967, %962 ], [ %969, %968 ]
  %973 = icmp sgt i32 %972, 6
  br i1 %973, label %974, label %976

974:                                              ; preds = %971
  %975 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %15, i64 0, i32 0
  call void (%struct.vpx_internal_error_info*, i32, i8*, ...) @vpx_internal_error(%struct.vpx_internal_error_info* %975, i32 7, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.23, i64 0, i64 0)) #9
  br label %976

976:                                              ; preds = %974, %971
  %977 = call i32 @vpx_rb_read_bit(%struct.vpx_read_bit_buffer* nonnull %13) #9
  %978 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 86
  store i32 %977, i32* %978, align 4
  %979 = icmp eq i32 %977, 0
  br i1 %979, label %984, label %980

980:                                              ; preds = %976
  %981 = call i32 @vpx_rb_read_bit(%struct.vpx_read_bit_buffer* nonnull %13) #9
  %982 = load i32, i32* %978, align 4
  %983 = add nsw i32 %982, %981
  store i32 %983, i32* %978, align 4
  br label %984

984:                                              ; preds = %980, %976
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %954) #9
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %953) #9
  %985 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 18
  %986 = load i32, i32* %985, align 16
  %987 = icmp eq i32 %986, 1
  br i1 %987, label %988, label %1058

988:                                              ; preds = %984
  %989 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 33
  %990 = load i32, i32* %989, align 16
  %991 = add nsw i32 %990, 7
  %992 = ashr i32 %991, 3
  %993 = load i32, i32* %960, align 8
  %994 = shl i32 %992, %993
  %995 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 20
  %996 = load %struct.RowMTWorkerData*, %struct.RowMTWorkerData** %995, align 8
  %997 = icmp eq %struct.RowMTWorkerData* %996, null
  br i1 %997, label %998, label %1010

998:                                              ; preds = %988
  %999 = call i8* @vpx_calloc(i64 1, i64 296) #9
  %1000 = bitcast %struct.RowMTWorkerData** %995 to i8**
  store i8* %999, i8** %1000, align 8
  %1001 = icmp eq i8* %999, null
  %1002 = bitcast i8* %999 to %struct.RowMTWorkerData*
  br i1 %1001, label %1003, label %1006

1003:                                             ; preds = %998
  %1004 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %15, i64 0, i32 0
  call void (%struct.vpx_internal_error_info*, i32, i8*, ...) @vpx_internal_error(%struct.vpx_internal_error_info* %1004, i32 2, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.10, i64 0, i64 0)) #9
  %1005 = load %struct.RowMTWorkerData*, %struct.RowMTWorkerData** %995, align 8
  br label %1006

1006:                                             ; preds = %1003, %998
  %1007 = phi %struct.RowMTWorkerData* [ %1002, %998 ], [ %1005, %1003 ]
  %1008 = getelementptr inbounds %struct.RowMTWorkerData, %struct.RowMTWorkerData* %1007, i64 0, i32 11
  %1009 = call i32 @pthread_mutex_init(%union.pthread_mutex_t* %1008, %union.pthread_mutexattr_t* null) #9
  br label %1010

1010:                                             ; preds = %1006, %988
  %1011 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 14
  %1012 = load i32, i32* %1011, align 16
  %1013 = icmp sgt i32 %1012, 1
  br i1 %1013, label %1014, label %1019

1014:                                             ; preds = %1010
  %1015 = load i32, i32* %955, align 8
  %1016 = add nsw i32 %1015, 7
  %1017 = ashr i32 %1016, 3
  %1018 = mul nsw i32 %1017, %992
  br label %1019

1019:                                             ; preds = %1014, %1010
  %1020 = phi i32 [ %1018, %1014 ], [ 1, %1010 ]
  %1021 = load %struct.RowMTWorkerData*, %struct.RowMTWorkerData** %995, align 8
  %1022 = getelementptr inbounds %struct.RowMTWorkerData, %struct.RowMTWorkerData* %1021, i64 0, i32 0
  %1023 = load i32, i32* %1022, align 8
  %1024 = icmp sgt i32 %1020, %1023
  br i1 %1024, label %1029, label %1025

1025:                                             ; preds = %1019
  %1026 = getelementptr inbounds %struct.RowMTWorkerData, %struct.RowMTWorkerData* %1021, i64 0, i32 10
  %1027 = load i32, i32* %1026, align 4
  %1028 = icmp sgt i32 %994, %1027
  br i1 %1028, label %1029, label %1033

1029:                                             ; preds = %1025, %1019
  call void @vp9_dec_free_row_mt_mem(%struct.RowMTWorkerData* %1021) #9
  %1030 = load %struct.RowMTWorkerData*, %struct.RowMTWorkerData** %995, align 8
  %1031 = load i32, i32* %1011, align 16
  call void @vp9_dec_alloc_row_mt_mem(%struct.RowMTWorkerData* %1030, %struct.VP9Common* %15, i32 %1020, i32 %1031, i32 %994) #9
  %1032 = load %struct.RowMTWorkerData*, %struct.RowMTWorkerData** %995, align 8
  br label %1033

1033:                                             ; preds = %1029, %1025
  %1034 = phi %struct.RowMTWorkerData* [ %1032, %1029 ], [ %1021, %1025 ]
  %1035 = load i32, i32* %989, align 16
  %1036 = add nsw i32 %1035, 7
  %1037 = ashr i32 %1036, 3
  %1038 = load i32, i32* %960, align 8
  %1039 = shl i32 %1037, %1038
  %1040 = shl i32 %1039, 1
  %1041 = add nsw i32 %1040, %1037
  %1042 = sext i32 %1041 to i64
  %1043 = mul nsw i64 %1042, 12
  %1044 = getelementptr inbounds %struct.RowMTWorkerData, %struct.RowMTWorkerData* %1034, i64 0, i32 8
  %1045 = load i64, i64* %1044, align 8
  %1046 = icmp ugt i64 %1043, %1045
  br i1 %1046, label %1047, label %1058

1047:                                             ; preds = %1033
  %1048 = getelementptr inbounds %struct.RowMTWorkerData, %struct.RowMTWorkerData* %1034, i64 0, i32 6
  %1049 = load i8*, i8** %1048, align 8
  call void @vpx_free(i8* %1049) #9
  %1050 = call i8* @vpx_calloc(i64 1, i64 %1043) #9
  store i8* %1050, i8** %1048, align 8
  %1051 = icmp eq i8* %1050, null
  br i1 %1051, label %1052, label %1055

1052:                                             ; preds = %1047
  %1053 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 0
  call void (%struct.vpx_internal_error_info*, i32, i8*, ...) @vpx_internal_error(%struct.vpx_internal_error_info* %1053, i32 2, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.24, i64 0, i64 0)) #9
  %1054 = load i8*, i8** %1048, align 8
  br label %1055

1055:                                             ; preds = %1052, %1047
  %1056 = phi i8* [ %1050, %1047 ], [ %1054, %1052 ]
  %1057 = getelementptr inbounds %struct.RowMTWorkerData, %struct.RowMTWorkerData* %1034, i64 0, i32 7
  call void @vp9_jobq_init(%struct.JobQueueRowMt* %1057, i8* %1056, i64 %1043) #9
  store i64 %1043, i64* %1044, align 8
  br label %1058

1058:                                             ; preds = %1055, %1033, %984
  %1059 = call i32 @vpx_rb_read_literal(%struct.vpx_read_bit_buffer* nonnull %13, i32 16) #9
  %1060 = sext i32 %1059 to i64
  %1061 = icmp eq i32 %1059, 0
  br i1 %1061, label %1062, label %1064

1062:                                             ; preds = %1058
  %1063 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %15, i64 0, i32 0
  call void (%struct.vpx_internal_error_info*, i32, i8*, ...) @vpx_internal_error(%struct.vpx_internal_error_info* %1063, i32 7, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.11, i64 0, i64 0)) #9
  br label %1064

1064:                                             ; preds = %99, %1058, %1062
  %1065 = phi i64 [ 0, %99 ], [ 0, %1062 ], [ %1060, %1058 ]
  %1066 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 86
  %1067 = load i32, i32* %1066, align 4
  %1068 = shl i32 1, %1067
  %1069 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 85
  %1070 = load i32, i32* %1069, align 8
  %1071 = shl i32 1, %1070
  %1072 = load %struct.BufferPool*, %struct.BufferPool** %44, align 8
  %1073 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 18
  %1074 = load i32, i32* %1073, align 16
  %1075 = sext i32 %1074 to i64
  %1076 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %1072, i64 0, i32 3, i64 %1075, i32 8
  %1077 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 0, i32 18
  store %struct.yv12_buffer_config* %1076, %struct.yv12_buffer_config** %1077, align 8
  %1078 = icmp eq i64 %1065, 0
  br i1 %1078, label %1079, label %1084

1079:                                             ; preds = %1064
  %1080 = load i32, i32* %67, align 4
  %1081 = icmp ult i32 %1080, 3
  %1082 = select i1 %1081, i64 1, i64 2
  %1083 = getelementptr inbounds i8, i8* %1, i64 %1082
  store i8* %1083, i8** %3, align 8
  br label %2498

1084:                                             ; preds = %1064
  %1085 = call i64 @vpx_rb_bytes_read(%struct.vpx_read_bit_buffer* nonnull %13) #9
  %1086 = getelementptr inbounds i8, i8* %1, i64 %1085
  %1087 = ptrtoint i8* %2 to i64
  %1088 = ptrtoint i8* %1086 to i64
  %1089 = sub i64 %1087, %1088
  %1090 = icmp ult i64 %1089, %1065
  br i1 %1090, label %1091, label %1093

1091:                                             ; preds = %1084
  %1092 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %15, i64 0, i32 0
  call void (%struct.vpx_internal_error_info*, i32, i8*, ...) @vpx_internal_error(%struct.vpx_internal_error_info* %1092, i32 7, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str, i64 0, i64 0)) #9
  br label %1093

1093:                                             ; preds = %1084, %1091
  %1094 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 83
  %1095 = load i32, i32* %1094, align 16
  %1096 = icmp eq i32 %1095, 0
  br i1 %1096, label %1097, label %1119

1097:                                             ; preds = %1093
  %1098 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 3
  %1099 = load i32, i32* %1098, align 16
  %1100 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 7
  %1101 = load i32, i32* %1100, align 16
  %1102 = icmp eq i32 %1099, %1101
  br i1 %1102, label %1103, label %1119

1103:                                             ; preds = %1097
  %1104 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 4
  %1105 = load i32, i32* %1104, align 4
  %1106 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 8
  %1107 = load i32, i32* %1106, align 4
  %1108 = icmp eq i32 %1105, %1107
  br i1 %1108, label %1109, label %1119

1109:                                             ; preds = %1103
  %1110 = load i8, i8* %51, align 1
  %1111 = icmp eq i8 %1110, 0
  br i1 %1111, label %1112, label %1119

1112:                                             ; preds = %1109
  %1113 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 25
  %1114 = load i32, i32* %1113, align 4
  %1115 = icmp eq i32 %1114, 0
  br i1 %1115, label %1119, label %1116

1116:                                             ; preds = %1112
  %1117 = load i32, i32* %48, align 8
  %1118 = icmp ne i32 %1117, 0
  br label %1119

1119:                                             ; preds = %1112, %1109, %1093, %1116, %1103, %1097
  %1120 = phi i1 [ false, %1112 ], [ false, %1109 ], [ false, %1103 ], [ false, %1097 ], [ false, %1093 ], [ %1118, %1116 ]
  %1121 = zext i1 %1120 to i32
  %1122 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 56
  store i32 %1121, i32* %1122, align 16
  %1123 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 9
  %1124 = load i32, i32* %1123, align 8
  %1125 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 10
  %1126 = load i32, i32* %1125, align 4
  call void @vp9_setup_block_planes(%struct.macroblockd* %16, i32 %1124, i32 %1126) #9
  %1127 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 73
  %1128 = bitcast %struct.frame_contexts** %1127 to i8**
  %1129 = load i8*, i8** %1128, align 8
  %1130 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 74
  %1131 = load %struct.frame_contexts*, %struct.frame_contexts** %1130, align 16
  %1132 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 75
  %1133 = load i32, i32* %1132, align 8
  %1134 = zext i32 %1133 to i64
  %1135 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1131, i64 %1134, i32 0, i64 0, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %1129, i8* align 4 %1135, i64 2044, i1 false)
  %1136 = load %struct.frame_contexts*, %struct.frame_contexts** %1127, align 8
  %1137 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1136, i64 0, i32 13
  %1138 = load i32, i32* %1137, align 4
  %1139 = icmp eq i32 %1138, 0
  br i1 %1139, label %1140, label %1143

1140:                                             ; preds = %1119
  %1141 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %15, i64 0, i32 0
  call void (%struct.vpx_internal_error_info*, i32, i8*, ...) @vpx_internal_error(%struct.vpx_internal_error_info* %1141, i32 7, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.1, i64 0, i64 0)) #9
  %1142 = load %struct.frame_contexts*, %struct.frame_contexts** %1127, align 8
  br label %1143

1143:                                             ; preds = %1119, %1140
  %1144 = phi %struct.frame_contexts* [ %1136, %1119 ], [ %1142, %1140 ]
  %1145 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 0, i32 25
  store i32 0, i32* %1145, align 8
  %1146 = bitcast %struct.vpx_reader* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %1146) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1146, i8 -86, i64 64, i1 false) #9
  %1147 = load void (i8*, i8*, i8*, i32)*, void (i8*, i8*, i8*, i32)** %26, align 16
  %1148 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 13
  %1149 = load i8*, i8** %1148, align 8
  %1150 = call i32 @vpx_reader_init(%struct.vpx_reader* nonnull %10, i8* %1086, i64 %1065, void (i8*, i8*, i8*, i32)* %1147, i8* %1149) #9
  %1151 = icmp eq i32 %1150, 0
  br i1 %1151, label %1154, label %1152

1152:                                             ; preds = %1143
  %1153 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %15, i64 0, i32 0
  call void (%struct.vpx_internal_error_info*, i32, i8*, ...) @vpx_internal_error(%struct.vpx_internal_error_info* %1153, i32 2, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.26, i64 0, i64 0)) #9
  br label %1154

1154:                                             ; preds = %1152, %1143
  %1155 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 0, i32 24
  %1156 = load i32, i32* %1155, align 4
  %1157 = icmp eq i32 %1156, 0
  br i1 %1157, label %1158, label %1243

1158:                                             ; preds = %1154
  %1159 = getelementptr inbounds %struct.vpx_reader, %struct.vpx_reader* %10, i64 0, i32 1
  %1160 = getelementptr inbounds %struct.vpx_reader, %struct.vpx_reader* %10, i64 0, i32 2
  %1161 = getelementptr inbounds %struct.vpx_reader, %struct.vpx_reader* %10, i64 0, i32 0
  %1162 = load i32, i32* %1159, align 8
  %1163 = load i32, i32* %1160, align 4
  %1164 = shl i32 %1162, 7
  %1165 = add i32 %1164, 128
  %1166 = lshr i32 %1165, 8
  %1167 = icmp slt i32 %1163, 0
  br i1 %1167, label %1168, label %1170

1168:                                             ; preds = %1158
  call void @vpx_reader_fill(%struct.vpx_reader* nonnull %10) #9
  %1169 = load i32, i32* %1160, align 4
  br label %1170

1170:                                             ; preds = %1168, %1158
  %1171 = phi i32 [ %1169, %1168 ], [ %1163, %1158 ]
  %1172 = load i64, i64* %1161, align 8
  %1173 = zext i32 %1166 to i64
  %1174 = shl i64 %1173, 56
  %1175 = icmp ult i64 %1172, %1174
  br i1 %1175, label %1180, label %1176

1176:                                             ; preds = %1170
  %1177 = load i32, i32* %1159, align 8
  %1178 = sub i32 %1177, %1166
  %1179 = sub i64 %1172, %1174
  br label %1180

1180:                                             ; preds = %1176, %1170
  %1181 = phi i64 [ %1179, %1176 ], [ %1172, %1170 ]
  %1182 = phi i32 [ %1178, %1176 ], [ %1166, %1170 ]
  %1183 = phi i32 [ 2, %1176 ], [ 0, %1170 ]
  %1184 = and i32 %1182, 255
  %1185 = zext i32 %1184 to i64
  %1186 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %1185
  %1187 = load i8, i8* %1186, align 1
  %1188 = zext i8 %1187 to i32
  %1189 = shl i32 %1182, %1188
  %1190 = zext i8 %1187 to i64
  %1191 = shl i64 %1181, %1190
  %1192 = sub nsw i32 %1171, %1188
  store i64 %1191, i64* %1161, align 8
  store i32 %1192, i32* %1160, align 4
  store i32 %1189, i32* %1159, align 8
  %1193 = shl i32 %1189, 7
  %1194 = add i32 %1193, 128
  %1195 = lshr i32 %1194, 8
  %1196 = icmp slt i32 %1192, 0
  br i1 %1196, label %1215, label %1218

1197:                                             ; preds = %1228
  %1198 = shl i32 %1237, 7
  %1199 = add i32 %1198, 128
  %1200 = lshr i32 %1199, 8
  %1201 = icmp slt i32 %1240, 0
  br i1 %1201, label %1202, label %1205

1202:                                             ; preds = %1197
  call void @vpx_reader_fill(%struct.vpx_reader* nonnull %10) #9
  %1203 = load i32, i32* %1160, align 4
  %1204 = load i64, i64* %1161, align 8
  br label %1205

1205:                                             ; preds = %1202, %1197
  %1206 = phi i64 [ %1204, %1202 ], [ %1239, %1197 ]
  %1207 = phi i32 [ %1203, %1202 ], [ %1240, %1197 ]
  %1208 = zext i32 %1200 to i64
  %1209 = shl i64 %1208, 56
  %1210 = icmp ult i64 %1206, %1209
  br i1 %1210, label %1246, label %1211

1211:                                             ; preds = %1205
  %1212 = load i32, i32* %1159, align 8
  %1213 = sub i32 %1212, %1200
  %1214 = sub i64 %1206, %1209
  br label %1246

1215:                                             ; preds = %1180
  call void @vpx_reader_fill(%struct.vpx_reader* nonnull %10) #9
  %1216 = load i32, i32* %1160, align 4
  %1217 = load i64, i64* %1161, align 8
  br label %1218

1218:                                             ; preds = %1215, %1180
  %1219 = phi i64 [ %1217, %1215 ], [ %1191, %1180 ]
  %1220 = phi i32 [ %1216, %1215 ], [ %1192, %1180 ]
  %1221 = zext i32 %1195 to i64
  %1222 = shl i64 %1221, 56
  %1223 = icmp ult i64 %1219, %1222
  br i1 %1223, label %1228, label %1224

1224:                                             ; preds = %1218
  %1225 = load i32, i32* %1159, align 8
  %1226 = sub i32 %1225, %1195
  %1227 = sub i64 %1219, %1222
  br label %1228

1228:                                             ; preds = %1224, %1218
  %1229 = phi i64 [ %1227, %1224 ], [ %1219, %1218 ]
  %1230 = phi i32 [ %1226, %1224 ], [ %1195, %1218 ]
  %1231 = phi i32 [ 1, %1224 ], [ 0, %1218 ]
  %1232 = and i32 %1230, 255
  %1233 = zext i32 %1232 to i64
  %1234 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %1233
  %1235 = load i8, i8* %1234, align 1
  %1236 = zext i8 %1235 to i32
  %1237 = shl i32 %1230, %1236
  %1238 = zext i8 %1235 to i64
  %1239 = shl i64 %1229, %1238
  %1240 = sub nsw i32 %1220, %1236
  store i64 %1239, i64* %1161, align 8
  store i32 %1240, i32* %1160, align 4
  store i32 %1237, i32* %1159, align 8
  %1241 = or i32 %1231, %1183
  %1242 = icmp eq i32 %1241, 3
  br i1 %1242, label %1197, label %1243

1243:                                             ; preds = %1228, %1154
  %1244 = phi i32 [ %1241, %1228 ], [ 0, %1154 ]
  %1245 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 37
  store i32 %1244, i32* %1245, align 16
  br label %1275

1246:                                             ; preds = %1211, %1205
  %1247 = phi i64 [ %1214, %1211 ], [ %1206, %1205 ]
  %1248 = phi i32 [ %1213, %1211 ], [ %1200, %1205 ]
  %1249 = phi i32 [ 4, %1211 ], [ 3, %1205 ]
  %1250 = and i32 %1248, 255
  %1251 = zext i32 %1250 to i64
  %1252 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %1251
  %1253 = load i8, i8* %1252, align 1
  %1254 = zext i8 %1253 to i32
  %1255 = shl i32 %1248, %1254
  %1256 = zext i8 %1253 to i64
  %1257 = shl i64 %1247, %1256
  %1258 = sub nsw i32 %1207, %1254
  store i64 %1257, i64* %1161, align 8
  store i32 %1258, i32* %1160, align 4
  store i32 %1255, i32* %1159, align 8
  %1259 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 37
  store i32 %1249, i32* %1259, align 16
  %1260 = icmp eq i32 %1249, 4
  br i1 %1260, label %1261, label %1275

1261:                                             ; preds = %1246
  %1262 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 10, i32 2, i64 0, i64 0
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1262) #9
  %1263 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 10, i32 2, i64 1, i64 0
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1263) #9
  %1264 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 10, i32 1, i64 0, i64 0
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1264) #9
  %1265 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 10, i32 1, i64 0, i64 1
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1265) #9
  %1266 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 10, i32 1, i64 1, i64 0
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1266) #9
  %1267 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 10, i32 1, i64 1, i64 1
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1267) #9
  %1268 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 10, i32 0, i64 0, i64 0
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1268) #9
  %1269 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 10, i32 0, i64 0, i64 1
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1269) #9
  %1270 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 10, i32 0, i64 0, i64 2
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1270) #9
  %1271 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 10, i32 0, i64 1, i64 0
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1271) #9
  %1272 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 10, i32 0, i64 1, i64 1
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1272) #9
  %1273 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 10, i32 0, i64 1, i64 2
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1273) #9
  %1274 = load i32, i32* %1259, align 16
  br label %1275

1275:                                             ; preds = %1261, %1246, %1243
  %1276 = phi i32 [ %1244, %1243 ], [ %1274, %1261 ], [ 3, %1246 ]
  %1277 = zext i32 %1276 to i64
  %1278 = getelementptr inbounds [5 x i8], [5 x i8]* @tx_mode_to_biggest_tx_size, i64 0, i64 %1277
  %1279 = load i8, i8* %1278, align 1
  %1280 = getelementptr inbounds %struct.vpx_reader, %struct.vpx_reader* %10, i64 0, i32 1
  %1281 = getelementptr inbounds %struct.vpx_reader, %struct.vpx_reader* %10, i64 0, i32 2
  %1282 = getelementptr inbounds %struct.vpx_reader, %struct.vpx_reader* %10, i64 0, i32 0
  br label %1283

1283:                                             ; preds = %1425, %1275
  %1284 = phi i8 [ 0, %1275 ], [ %1426, %1425 ]
  %1285 = zext i8 %1284 to i64
  %1286 = load i32, i32* %1280, align 8
  %1287 = shl i32 %1286, 7
  %1288 = add i32 %1287, 128
  %1289 = lshr i32 %1288, 8
  %1290 = load i32, i32* %1281, align 4
  %1291 = icmp slt i32 %1290, 0
  br i1 %1291, label %1292, label %1294

1292:                                             ; preds = %1283
  call void @vpx_reader_fill(%struct.vpx_reader* nonnull %10) #9
  %1293 = load i32, i32* %1281, align 4
  br label %1294

1294:                                             ; preds = %1292, %1283
  %1295 = phi i32 [ %1293, %1292 ], [ %1290, %1283 ]
  %1296 = load i64, i64* %1282, align 8
  %1297 = zext i32 %1289 to i64
  %1298 = shl i64 %1297, 56
  %1299 = icmp ult i64 %1296, %1298
  br i1 %1299, label %1304, label %1300

1300:                                             ; preds = %1294
  %1301 = load i32, i32* %1280, align 8
  %1302 = sub i32 %1301, %1289
  %1303 = sub i64 %1296, %1298
  br label %1304

1304:                                             ; preds = %1300, %1294
  %1305 = phi i64 [ %1303, %1300 ], [ %1296, %1294 ]
  %1306 = phi i32 [ %1302, %1300 ], [ %1289, %1294 ]
  %1307 = phi i1 [ false, %1300 ], [ true, %1294 ]
  %1308 = and i32 %1306, 255
  %1309 = zext i32 %1308 to i64
  %1310 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %1309
  %1311 = load i8, i8* %1310, align 1
  %1312 = zext i8 %1311 to i32
  %1313 = shl i32 %1306, %1312
  %1314 = zext i8 %1311 to i64
  %1315 = shl i64 %1305, %1314
  %1316 = sub nsw i32 %1295, %1312
  store i64 %1315, i64* %1282, align 8
  store i32 %1316, i32* %1281, align 4
  store i32 %1313, i32* %1280, align 8
  br i1 %1307, label %1425, label %1317

1317:                                             ; preds = %1304, %1422
  %1318 = phi i64 [ %1423, %1422 ], [ 0, %1304 ]
  br label %1319

1319:                                             ; preds = %1319, %1317
  %1320 = phi i64 [ 0, %1317 ], [ %1420, %1319 ]
  %1321 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 3, i64 %1285, i64 %1318, i64 %1320, i64 0, i64 0, i64 0
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1321) #9
  %1322 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 3, i64 %1285, i64 %1318, i64 %1320, i64 0, i64 0, i64 1
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1322) #9
  %1323 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 3, i64 %1285, i64 %1318, i64 %1320, i64 0, i64 0, i64 2
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1323) #9
  %1324 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 3, i64 %1285, i64 %1318, i64 %1320, i64 0, i64 1, i64 0
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1324) #9
  %1325 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 3, i64 %1285, i64 %1318, i64 %1320, i64 0, i64 1, i64 1
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1325) #9
  %1326 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 3, i64 %1285, i64 %1318, i64 %1320, i64 0, i64 1, i64 2
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1326) #9
  %1327 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 3, i64 %1285, i64 %1318, i64 %1320, i64 0, i64 2, i64 0
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1327) #9
  %1328 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 3, i64 %1285, i64 %1318, i64 %1320, i64 0, i64 2, i64 1
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1328) #9
  %1329 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 3, i64 %1285, i64 %1318, i64 %1320, i64 0, i64 2, i64 2
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1329) #9
  %1330 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 3, i64 %1285, i64 %1318, i64 %1320, i64 1, i64 0, i64 0
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1330) #9
  %1331 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 3, i64 %1285, i64 %1318, i64 %1320, i64 1, i64 0, i64 1
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1331) #9
  %1332 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 3, i64 %1285, i64 %1318, i64 %1320, i64 1, i64 0, i64 2
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1332) #9
  %1333 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 3, i64 %1285, i64 %1318, i64 %1320, i64 1, i64 1, i64 0
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1333) #9
  %1334 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 3, i64 %1285, i64 %1318, i64 %1320, i64 1, i64 1, i64 1
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1334) #9
  %1335 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 3, i64 %1285, i64 %1318, i64 %1320, i64 1, i64 1, i64 2
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1335) #9
  %1336 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 3, i64 %1285, i64 %1318, i64 %1320, i64 1, i64 2, i64 0
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1336) #9
  %1337 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 3, i64 %1285, i64 %1318, i64 %1320, i64 1, i64 2, i64 1
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1337) #9
  %1338 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 3, i64 %1285, i64 %1318, i64 %1320, i64 1, i64 2, i64 2
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1338) #9
  %1339 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 3, i64 %1285, i64 %1318, i64 %1320, i64 1, i64 3, i64 0
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1339) #9
  %1340 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 3, i64 %1285, i64 %1318, i64 %1320, i64 1, i64 3, i64 1
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1340) #9
  %1341 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 3, i64 %1285, i64 %1318, i64 %1320, i64 1, i64 3, i64 2
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1341) #9
  %1342 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 3, i64 %1285, i64 %1318, i64 %1320, i64 1, i64 4, i64 0
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1342) #9
  %1343 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 3, i64 %1285, i64 %1318, i64 %1320, i64 1, i64 4, i64 1
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1343) #9
  %1344 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 3, i64 %1285, i64 %1318, i64 %1320, i64 1, i64 4, i64 2
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1344) #9
  %1345 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 3, i64 %1285, i64 %1318, i64 %1320, i64 1, i64 5, i64 0
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1345) #9
  %1346 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 3, i64 %1285, i64 %1318, i64 %1320, i64 1, i64 5, i64 1
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1346) #9
  %1347 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 3, i64 %1285, i64 %1318, i64 %1320, i64 1, i64 5, i64 2
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1347) #9
  %1348 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 3, i64 %1285, i64 %1318, i64 %1320, i64 2, i64 0, i64 0
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1348) #9
  %1349 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 3, i64 %1285, i64 %1318, i64 %1320, i64 2, i64 0, i64 1
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1349) #9
  %1350 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 3, i64 %1285, i64 %1318, i64 %1320, i64 2, i64 0, i64 2
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1350) #9
  %1351 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 3, i64 %1285, i64 %1318, i64 %1320, i64 2, i64 1, i64 0
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1351) #9
  %1352 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 3, i64 %1285, i64 %1318, i64 %1320, i64 2, i64 1, i64 1
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1352) #9
  %1353 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 3, i64 %1285, i64 %1318, i64 %1320, i64 2, i64 1, i64 2
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1353) #9
  %1354 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 3, i64 %1285, i64 %1318, i64 %1320, i64 2, i64 2, i64 0
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1354) #9
  %1355 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 3, i64 %1285, i64 %1318, i64 %1320, i64 2, i64 2, i64 1
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1355) #9
  %1356 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 3, i64 %1285, i64 %1318, i64 %1320, i64 2, i64 2, i64 2
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1356) #9
  %1357 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 3, i64 %1285, i64 %1318, i64 %1320, i64 2, i64 3, i64 0
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1357) #9
  %1358 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 3, i64 %1285, i64 %1318, i64 %1320, i64 2, i64 3, i64 1
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1358) #9
  %1359 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 3, i64 %1285, i64 %1318, i64 %1320, i64 2, i64 3, i64 2
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1359) #9
  %1360 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 3, i64 %1285, i64 %1318, i64 %1320, i64 2, i64 4, i64 0
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1360) #9
  %1361 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 3, i64 %1285, i64 %1318, i64 %1320, i64 2, i64 4, i64 1
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1361) #9
  %1362 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 3, i64 %1285, i64 %1318, i64 %1320, i64 2, i64 4, i64 2
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1362) #9
  %1363 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 3, i64 %1285, i64 %1318, i64 %1320, i64 2, i64 5, i64 0
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1363) #9
  %1364 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 3, i64 %1285, i64 %1318, i64 %1320, i64 2, i64 5, i64 1
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1364) #9
  %1365 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 3, i64 %1285, i64 %1318, i64 %1320, i64 2, i64 5, i64 2
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1365) #9
  %1366 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 3, i64 %1285, i64 %1318, i64 %1320, i64 3, i64 0, i64 0
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1366) #9
  %1367 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 3, i64 %1285, i64 %1318, i64 %1320, i64 3, i64 0, i64 1
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1367) #9
  %1368 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 3, i64 %1285, i64 %1318, i64 %1320, i64 3, i64 0, i64 2
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1368) #9
  %1369 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 3, i64 %1285, i64 %1318, i64 %1320, i64 3, i64 1, i64 0
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1369) #9
  %1370 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 3, i64 %1285, i64 %1318, i64 %1320, i64 3, i64 1, i64 1
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1370) #9
  %1371 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 3, i64 %1285, i64 %1318, i64 %1320, i64 3, i64 1, i64 2
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1371) #9
  %1372 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 3, i64 %1285, i64 %1318, i64 %1320, i64 3, i64 2, i64 0
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1372) #9
  %1373 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 3, i64 %1285, i64 %1318, i64 %1320, i64 3, i64 2, i64 1
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1373) #9
  %1374 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 3, i64 %1285, i64 %1318, i64 %1320, i64 3, i64 2, i64 2
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1374) #9
  %1375 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 3, i64 %1285, i64 %1318, i64 %1320, i64 3, i64 3, i64 0
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1375) #9
  %1376 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 3, i64 %1285, i64 %1318, i64 %1320, i64 3, i64 3, i64 1
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1376) #9
  %1377 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 3, i64 %1285, i64 %1318, i64 %1320, i64 3, i64 3, i64 2
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1377) #9
  %1378 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 3, i64 %1285, i64 %1318, i64 %1320, i64 3, i64 4, i64 0
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1378) #9
  %1379 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 3, i64 %1285, i64 %1318, i64 %1320, i64 3, i64 4, i64 1
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1379) #9
  %1380 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 3, i64 %1285, i64 %1318, i64 %1320, i64 3, i64 4, i64 2
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1380) #9
  %1381 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 3, i64 %1285, i64 %1318, i64 %1320, i64 3, i64 5, i64 0
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1381) #9
  %1382 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 3, i64 %1285, i64 %1318, i64 %1320, i64 3, i64 5, i64 1
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1382) #9
  %1383 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 3, i64 %1285, i64 %1318, i64 %1320, i64 3, i64 5, i64 2
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1383) #9
  %1384 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 3, i64 %1285, i64 %1318, i64 %1320, i64 4, i64 0, i64 0
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1384) #9
  %1385 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 3, i64 %1285, i64 %1318, i64 %1320, i64 4, i64 0, i64 1
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1385) #9
  %1386 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 3, i64 %1285, i64 %1318, i64 %1320, i64 4, i64 0, i64 2
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1386) #9
  %1387 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 3, i64 %1285, i64 %1318, i64 %1320, i64 4, i64 1, i64 0
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1387) #9
  %1388 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 3, i64 %1285, i64 %1318, i64 %1320, i64 4, i64 1, i64 1
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1388) #9
  %1389 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 3, i64 %1285, i64 %1318, i64 %1320, i64 4, i64 1, i64 2
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1389) #9
  %1390 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 3, i64 %1285, i64 %1318, i64 %1320, i64 4, i64 2, i64 0
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1390) #9
  %1391 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 3, i64 %1285, i64 %1318, i64 %1320, i64 4, i64 2, i64 1
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1391) #9
  %1392 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 3, i64 %1285, i64 %1318, i64 %1320, i64 4, i64 2, i64 2
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1392) #9
  %1393 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 3, i64 %1285, i64 %1318, i64 %1320, i64 4, i64 3, i64 0
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1393) #9
  %1394 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 3, i64 %1285, i64 %1318, i64 %1320, i64 4, i64 3, i64 1
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1394) #9
  %1395 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 3, i64 %1285, i64 %1318, i64 %1320, i64 4, i64 3, i64 2
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1395) #9
  %1396 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 3, i64 %1285, i64 %1318, i64 %1320, i64 4, i64 4, i64 0
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1396) #9
  %1397 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 3, i64 %1285, i64 %1318, i64 %1320, i64 4, i64 4, i64 1
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1397) #9
  %1398 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 3, i64 %1285, i64 %1318, i64 %1320, i64 4, i64 4, i64 2
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1398) #9
  %1399 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 3, i64 %1285, i64 %1318, i64 %1320, i64 4, i64 5, i64 0
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1399) #9
  %1400 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 3, i64 %1285, i64 %1318, i64 %1320, i64 4, i64 5, i64 1
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1400) #9
  %1401 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 3, i64 %1285, i64 %1318, i64 %1320, i64 4, i64 5, i64 2
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1401) #9
  %1402 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 3, i64 %1285, i64 %1318, i64 %1320, i64 5, i64 0, i64 0
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1402) #9
  %1403 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 3, i64 %1285, i64 %1318, i64 %1320, i64 5, i64 0, i64 1
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1403) #9
  %1404 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 3, i64 %1285, i64 %1318, i64 %1320, i64 5, i64 0, i64 2
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1404) #9
  %1405 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 3, i64 %1285, i64 %1318, i64 %1320, i64 5, i64 1, i64 0
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1405) #9
  %1406 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 3, i64 %1285, i64 %1318, i64 %1320, i64 5, i64 1, i64 1
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1406) #9
  %1407 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 3, i64 %1285, i64 %1318, i64 %1320, i64 5, i64 1, i64 2
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1407) #9
  %1408 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 3, i64 %1285, i64 %1318, i64 %1320, i64 5, i64 2, i64 0
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1408) #9
  %1409 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 3, i64 %1285, i64 %1318, i64 %1320, i64 5, i64 2, i64 1
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1409) #9
  %1410 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 3, i64 %1285, i64 %1318, i64 %1320, i64 5, i64 2, i64 2
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1410) #9
  %1411 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 3, i64 %1285, i64 %1318, i64 %1320, i64 5, i64 3, i64 0
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1411) #9
  %1412 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 3, i64 %1285, i64 %1318, i64 %1320, i64 5, i64 3, i64 1
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1412) #9
  %1413 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 3, i64 %1285, i64 %1318, i64 %1320, i64 5, i64 3, i64 2
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1413) #9
  %1414 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 3, i64 %1285, i64 %1318, i64 %1320, i64 5, i64 4, i64 0
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1414) #9
  %1415 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 3, i64 %1285, i64 %1318, i64 %1320, i64 5, i64 4, i64 1
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1415) #9
  %1416 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 3, i64 %1285, i64 %1318, i64 %1320, i64 5, i64 4, i64 2
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1416) #9
  %1417 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 3, i64 %1285, i64 %1318, i64 %1320, i64 5, i64 5, i64 0
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1417) #9
  %1418 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 3, i64 %1285, i64 %1318, i64 %1320, i64 5, i64 5, i64 1
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1418) #9
  %1419 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 3, i64 %1285, i64 %1318, i64 %1320, i64 5, i64 5, i64 2
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1419) #9
  %1420 = add nuw nsw i64 %1320, 1
  %1421 = icmp eq i64 %1420, 2
  br i1 %1421, label %1422, label %1319

1422:                                             ; preds = %1319
  %1423 = add nuw nsw i64 %1318, 1
  %1424 = icmp eq i64 %1423, 2
  br i1 %1424, label %1425, label %1317

1425:                                             ; preds = %1422, %1304
  %1426 = add i8 %1284, 1
  %1427 = icmp ugt i8 %1426, %1279
  br i1 %1427, label %1428, label %1283

1428:                                             ; preds = %1425
  %1429 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 11, i64 0
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1429) #9
  %1430 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 11, i64 1
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1430) #9
  %1431 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 11, i64 2
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1431) #9
  %1432 = load i32, i32* %46, align 4
  %1433 = icmp eq i32 %1432, 0
  br i1 %1433, label %1625, label %1434

1434:                                             ; preds = %1428
  %1435 = load i8, i8* %49, align 4
  %1436 = icmp eq i8 %1435, 0
  br i1 %1436, label %1437, label %1625

1437:                                             ; preds = %1434
  %1438 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 5, i64 0, i64 0
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1438) #9
  %1439 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 5, i64 0, i64 1
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1439) #9
  %1440 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 5, i64 0, i64 2
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1440) #9
  %1441 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 5, i64 1, i64 0
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1441) #9
  %1442 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 5, i64 1, i64 1
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1442) #9
  %1443 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 5, i64 1, i64 2
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1443) #9
  %1444 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 5, i64 2, i64 0
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1444) #9
  %1445 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 5, i64 2, i64 1
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1445) #9
  %1446 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 5, i64 2, i64 2
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1446) #9
  %1447 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 5, i64 3, i64 0
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1447) #9
  %1448 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 5, i64 3, i64 1
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1448) #9
  %1449 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 5, i64 3, i64 2
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1449) #9
  %1450 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 5, i64 4, i64 0
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1450) #9
  %1451 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 5, i64 4, i64 1
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1451) #9
  %1452 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 5, i64 4, i64 2
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1452) #9
  %1453 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 5, i64 5, i64 0
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1453) #9
  %1454 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 5, i64 5, i64 1
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1454) #9
  %1455 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 5, i64 5, i64 2
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1455) #9
  %1456 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 5, i64 6, i64 0
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1456) #9
  %1457 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 5, i64 6, i64 1
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1457) #9
  %1458 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 5, i64 6, i64 2
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1458) #9
  %1459 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 63
  %1460 = load i8, i8* %1459, align 4
  %1461 = icmp eq i8 %1460, 4
  br i1 %1461, label %1462, label %1471

1462:                                             ; preds = %1437
  %1463 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 4, i64 0, i64 0
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1463) #9
  %1464 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 4, i64 0, i64 1
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1464) #9
  %1465 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 4, i64 1, i64 0
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1465) #9
  %1466 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 4, i64 1, i64 1
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1466) #9
  %1467 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 4, i64 2, i64 0
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1467) #9
  %1468 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 4, i64 2, i64 1
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1468) #9
  %1469 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 4, i64 3, i64 0
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1469) #9
  %1470 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 4, i64 3, i64 1
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1470) #9
  br label %1471

1471:                                             ; preds = %1462, %1437
  %1472 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 6, i64 0
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1472) #9
  %1473 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 6, i64 1
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1473) #9
  %1474 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 6, i64 2
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1474) #9
  %1475 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 6, i64 3
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1475) #9
  %1476 = call i32 @vp9_compound_reference_allowed(%struct.VP9Common* %15) #9
  %1477 = icmp eq i32 %1476, 0
  br i1 %1477, label %1528, label %1478

1478:                                             ; preds = %1471
  %1479 = load i32, i32* %1280, align 8
  %1480 = shl i32 %1479, 7
  %1481 = add i32 %1480, 128
  %1482 = lshr i32 %1481, 8
  %1483 = load i32, i32* %1281, align 4
  %1484 = icmp slt i32 %1483, 0
  br i1 %1484, label %1485, label %1487

1485:                                             ; preds = %1478
  call void @vpx_reader_fill(%struct.vpx_reader* nonnull %10) #9
  %1486 = load i32, i32* %1281, align 4
  br label %1487

1487:                                             ; preds = %1485, %1478
  %1488 = phi i32 [ %1486, %1485 ], [ %1483, %1478 ]
  %1489 = load i64, i64* %1282, align 8
  %1490 = zext i32 %1482 to i64
  %1491 = shl i64 %1490, 56
  %1492 = icmp ult i64 %1489, %1491
  br i1 %1492, label %1497, label %1493

1493:                                             ; preds = %1487
  %1494 = load i32, i32* %1280, align 8
  %1495 = sub i32 %1494, %1482
  %1496 = sub i64 %1489, %1491
  br label %1497

1497:                                             ; preds = %1493, %1487
  %1498 = phi i64 [ %1496, %1493 ], [ %1489, %1487 ]
  %1499 = phi i32 [ %1495, %1493 ], [ %1482, %1487 ]
  %1500 = phi i1 [ false, %1493 ], [ true, %1487 ]
  %1501 = and i32 %1499, 255
  %1502 = zext i32 %1501 to i64
  %1503 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %1502
  %1504 = load i8, i8* %1503, align 1
  %1505 = zext i8 %1504 to i32
  %1506 = shl i32 %1499, %1505
  %1507 = zext i8 %1504 to i64
  %1508 = shl i64 %1498, %1507
  %1509 = sub nsw i32 %1488, %1505
  store i64 %1508, i64* %1282, align 8
  store i32 %1509, i32* %1281, align 4
  store i32 %1506, i32* %1280, align 8
  br i1 %1500, label %1528, label %1510

1510:                                             ; preds = %1497
  %1511 = shl i32 %1506, 7
  %1512 = add i32 %1511, 128
  %1513 = lshr i32 %1512, 8
  %1514 = icmp slt i32 %1509, 0
  br i1 %1514, label %1515, label %1518

1515:                                             ; preds = %1510
  call void @vpx_reader_fill(%struct.vpx_reader* nonnull %10) #9
  %1516 = load i32, i32* %1281, align 4
  %1517 = load i64, i64* %1282, align 8
  br label %1518

1518:                                             ; preds = %1515, %1510
  %1519 = phi i64 [ %1517, %1515 ], [ %1508, %1510 ]
  %1520 = phi i32 [ %1516, %1515 ], [ %1509, %1510 ]
  %1521 = zext i32 %1513 to i64
  %1522 = shl i64 %1521, 56
  %1523 = icmp ult i64 %1519, %1522
  br i1 %1523, label %1531, label %1524

1524:                                             ; preds = %1518
  %1525 = load i32, i32* %1280, align 8
  %1526 = sub i32 %1525, %1513
  %1527 = sub i64 %1519, %1522
  br label %1531

1528:                                             ; preds = %1497, %1471
  %1529 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 72
  store i32 0, i32* %1529, align 16
  %1530 = load %struct.frame_contexts*, %struct.frame_contexts** %1127, align 8
  br label %1558

1531:                                             ; preds = %1524, %1518
  %1532 = phi i64 [ %1527, %1524 ], [ %1519, %1518 ]
  %1533 = phi i32 [ %1526, %1524 ], [ %1513, %1518 ]
  %1534 = phi i32 [ 2, %1524 ], [ 1, %1518 ]
  %1535 = and i32 %1533, 255
  %1536 = zext i32 %1535 to i64
  %1537 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %1536
  %1538 = load i8, i8* %1537, align 1
  %1539 = zext i8 %1538 to i32
  %1540 = shl i32 %1533, %1539
  %1541 = zext i8 %1538 to i64
  %1542 = shl i64 %1532, %1541
  %1543 = sub nsw i32 %1520, %1539
  store i64 %1542, i64* %1282, align 8
  store i32 %1543, i32* %1281, align 4
  store i32 %1540, i32* %1280, align 8
  %1544 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 72
  store i32 %1534, i32* %1544, align 16
  call void @vp9_setup_compound_reference_mode(%struct.VP9Common* %15) #9
  %1545 = load i32, i32* %1544, align 16
  %1546 = load %struct.frame_contexts*, %struct.frame_contexts** %1127, align 8
  %1547 = icmp eq i32 %1545, 2
  br i1 %1547, label %1548, label %1555

1548:                                             ; preds = %1531
  %1549 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1546, i64 0, i32 7, i64 0
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1549) #9
  %1550 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1546, i64 0, i32 7, i64 1
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1550) #9
  %1551 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1546, i64 0, i32 7, i64 2
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1551) #9
  %1552 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1546, i64 0, i32 7, i64 3
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1552) #9
  %1553 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1546, i64 0, i32 7, i64 4
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1553) #9
  %1554 = load i32, i32* %1544, align 16
  br label %1555

1555:                                             ; preds = %1548, %1531
  %1556 = phi i32 [ %1554, %1548 ], [ %1545, %1531 ]
  %1557 = icmp eq i32 %1556, 1
  br i1 %1557, label %1573, label %1558

1558:                                             ; preds = %1555, %1528
  %1559 = phi %struct.frame_contexts* [ %1530, %1528 ], [ %1546, %1555 ]
  %1560 = phi i32* [ %1529, %1528 ], [ %1544, %1555 ]
  %1561 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1559, i64 0, i32 8, i64 0, i64 0
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1561) #9
  %1562 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1559, i64 0, i32 8, i64 0, i64 1
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1562) #9
  %1563 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1559, i64 0, i32 8, i64 1, i64 0
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1563) #9
  %1564 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1559, i64 0, i32 8, i64 1, i64 1
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1564) #9
  %1565 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1559, i64 0, i32 8, i64 2, i64 0
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1565) #9
  %1566 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1559, i64 0, i32 8, i64 2, i64 1
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1566) #9
  %1567 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1559, i64 0, i32 8, i64 3, i64 0
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1567) #9
  %1568 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1559, i64 0, i32 8, i64 3, i64 1
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1568) #9
  %1569 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1559, i64 0, i32 8, i64 4, i64 0
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1569) #9
  %1570 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1559, i64 0, i32 8, i64 4, i64 1
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1570) #9
  %1571 = load i32, i32* %1560, align 16
  %1572 = icmp eq i32 %1571, 0
  br i1 %1572, label %1580, label %1573

1573:                                             ; preds = %1558, %1555
  %1574 = phi %struct.frame_contexts* [ %1559, %1558 ], [ %1546, %1555 ]
  %1575 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1574, i64 0, i32 9, i64 0
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1575) #9
  %1576 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1574, i64 0, i32 9, i64 1
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1576) #9
  %1577 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1574, i64 0, i32 9, i64 2
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1577) #9
  %1578 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1574, i64 0, i32 9, i64 3
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1578) #9
  %1579 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1574, i64 0, i32 9, i64 4
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1579) #9
  br label %1580

1580:                                             ; preds = %1573, %1558
  br label %1581

1581:                                             ; preds = %1580, %1581
  %1582 = phi i64 [ %1592, %1581 ], [ 0, %1580 ]
  %1583 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 0, i64 %1582, i64 0
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1583) #9
  %1584 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 0, i64 %1582, i64 1
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1584) #9
  %1585 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 0, i64 %1582, i64 2
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1585) #9
  %1586 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 0, i64 %1582, i64 3
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1586) #9
  %1587 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 0, i64 %1582, i64 4
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1587) #9
  %1588 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 0, i64 %1582, i64 5
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1588) #9
  %1589 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 0, i64 %1582, i64 6
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1589) #9
  %1590 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 0, i64 %1582, i64 7
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1590) #9
  %1591 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 0, i64 %1582, i64 8
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1591) #9
  %1592 = add nuw nsw i64 %1582, 1
  %1593 = icmp eq i64 %1592, 4
  br i1 %1593, label %1594, label %1581

1594:                                             ; preds = %1581, %1594
  %1595 = phi i64 [ %1599, %1594 ], [ 0, %1581 ]
  %1596 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 2, i64 %1595, i64 0
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1596) #9
  %1597 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 2, i64 %1595, i64 1
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1597) #9
  %1598 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 2, i64 %1595, i64 2
  call void @vp9_diff_update_prob(%struct.vpx_reader* nonnull %10, i8* %1598) #9
  %1599 = add nuw nsw i64 %1595, 1
  %1600 = icmp eq i64 %1599, 16
  br i1 %1600, label %1601, label %1594

1601:                                             ; preds = %1594
  %1602 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 29
  %1603 = load i32, i32* %1602, align 16
  %1604 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 12, i32 0, i64 0
  call fastcc void @update_mv_probs(i8* %1604, i32 3, %struct.vpx_reader* nonnull %10) #9
  %1605 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 12, i32 1, i64 0, i32 0
  call fastcc void @update_mv_probs(i8* %1605, i32 1, %struct.vpx_reader* nonnull %10) #9
  %1606 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 12, i32 1, i64 0, i32 1, i64 0
  call fastcc void @update_mv_probs(i8* %1606, i32 10, %struct.vpx_reader* nonnull %10) #9
  %1607 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 12, i32 1, i64 0, i32 2, i64 0
  call fastcc void @update_mv_probs(i8* %1607, i32 1, %struct.vpx_reader* nonnull %10) #9
  %1608 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 12, i32 1, i64 0, i32 3, i64 0
  call fastcc void @update_mv_probs(i8* %1608, i32 10, %struct.vpx_reader* nonnull %10) #9
  %1609 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 12, i32 1, i64 1, i32 0
  call fastcc void @update_mv_probs(i8* %1609, i32 1, %struct.vpx_reader* nonnull %10) #9
  %1610 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 12, i32 1, i64 1, i32 1, i64 0
  call fastcc void @update_mv_probs(i8* %1610, i32 10, %struct.vpx_reader* nonnull %10) #9
  %1611 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 12, i32 1, i64 1, i32 2, i64 0
  call fastcc void @update_mv_probs(i8* %1611, i32 1, %struct.vpx_reader* nonnull %10) #9
  %1612 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 12, i32 1, i64 1, i32 3, i64 0
  call fastcc void @update_mv_probs(i8* %1612, i32 10, %struct.vpx_reader* nonnull %10) #9
  %1613 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 12, i32 1, i64 0, i32 4, i64 0, i64 0
  call fastcc void @update_mv_probs(i8* %1613, i32 3, %struct.vpx_reader* nonnull %10) #9
  %1614 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 12, i32 1, i64 0, i32 4, i64 1, i64 0
  call fastcc void @update_mv_probs(i8* %1614, i32 3, %struct.vpx_reader* nonnull %10) #9
  %1615 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 12, i32 1, i64 0, i32 5, i64 0
  call fastcc void @update_mv_probs(i8* %1615, i32 3, %struct.vpx_reader* nonnull %10) #9
  %1616 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 12, i32 1, i64 1, i32 4, i64 0, i64 0
  call fastcc void @update_mv_probs(i8* %1616, i32 3, %struct.vpx_reader* nonnull %10) #9
  %1617 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 12, i32 1, i64 1, i32 4, i64 1, i64 0
  call fastcc void @update_mv_probs(i8* %1617, i32 3, %struct.vpx_reader* nonnull %10) #9
  %1618 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 12, i32 1, i64 1, i32 5, i64 0
  call fastcc void @update_mv_probs(i8* %1618, i32 3, %struct.vpx_reader* nonnull %10) #9
  %1619 = icmp eq i32 %1603, 0
  br i1 %1619, label %1625, label %1620

1620:                                             ; preds = %1601
  %1621 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 12, i32 1, i64 0, i32 6
  call fastcc void @update_mv_probs(i8* %1621, i32 1, %struct.vpx_reader* nonnull %10) #9
  %1622 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 12, i32 1, i64 0, i32 7
  call fastcc void @update_mv_probs(i8* %1622, i32 1, %struct.vpx_reader* nonnull %10) #9
  %1623 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 12, i32 1, i64 1, i32 6
  call fastcc void @update_mv_probs(i8* %1623, i32 1, %struct.vpx_reader* nonnull %10) #9
  %1624 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1144, i64 0, i32 12, i32 1, i64 1, i32 7
  call fastcc void @update_mv_probs(i8* %1624, i32 1, %struct.vpx_reader* nonnull %10) #9
  br label %1625

1625:                                             ; preds = %1428, %1434, %1601, %1620
  %1626 = load i32, i32* %1281, align 4
  %1627 = add i32 %1626, -65
  %1628 = icmp ult i32 %1627, 1073741759
  %1629 = zext i1 %1628 to i32
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %1146) #9
  %1630 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %1072, i64 0, i32 3, i64 %1075, i32 8, i32 28
  store i32 %1629, i32* %1630, align 4
  br i1 %1628, label %1631, label %1633

1631:                                             ; preds = %1625
  %1632 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %15, i64 0, i32 0
  call void (%struct.vpx_internal_error_info*, i32, i8*, ...) @vpx_internal_error(%struct.vpx_internal_error_info* %1632, i32 7, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.2, i64 0, i64 0)) #9
  br label %1633

1633:                                             ; preds = %1625, %1631
  %1634 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 68, i32 0
  %1635 = load i32, i32* %1634, align 8
  %1636 = icmp eq i32 %1635, 0
  br i1 %1636, label %1642, label %1637

1637:                                             ; preds = %1633
  %1638 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 88
  %1639 = load i32, i32* %1638, align 4
  %1640 = icmp eq i32 %1639, 0
  br i1 %1640, label %1641, label %1642

1641:                                             ; preds = %1637
  call void @vp9_loop_filter_frame_init(%struct.VP9Common* %15, i32 %1635) #9
  br label %1642

1642:                                             ; preds = %1637, %1633, %1641
  %1643 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 7
  %1644 = load %struct.TileWorkerData*, %struct.TileWorkerData** %1643, align 8
  %1645 = icmp eq %struct.TileWorkerData* %1644, null
  %1646 = bitcast %struct.TileWorkerData* %1644 to i8*
  %1647 = shl i32 %1068, %1070
  br i1 %1645, label %1652, label %1648

1648:                                             ; preds = %1642
  %1649 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 10
  %1650 = load i32, i32* %1649, align 4
  %1651 = icmp eq i32 %1647, %1650
  br i1 %1651, label %1667, label %1652

1652:                                             ; preds = %1642, %1648
  %1653 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 14
  %1654 = load i32, i32* %1653, align 16
  %1655 = icmp sgt i32 %1654, 1
  %1656 = select i1 %1655, i32 %1654, i32 0
  %1657 = add nsw i32 %1656, %1647
  %1658 = sext i32 %1657 to i64
  %1659 = mul nsw i64 %1658, 69584
  %1660 = bitcast %struct.TileWorkerData** %1643 to i8**
  call void @vpx_free(i8* %1646) #9
  %1661 = call i8* @vpx_memalign(i64 32, i64 %1659) #9
  store i8* %1661, i8** %1660, align 8
  %1662 = icmp eq i8* %1661, null
  br i1 %1662, label %1663, label %1665

1663:                                             ; preds = %1652
  %1664 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %15, i64 0, i32 0
  call void (%struct.vpx_internal_error_info*, i32, i8*, ...) @vpx_internal_error(%struct.vpx_internal_error_info* %1664, i32 2, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.3, i64 0, i64 0)) #9
  br label %1665

1665:                                             ; preds = %1652, %1663
  %1666 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 10
  store i32 %1647, i32* %1666, align 4
  br label %1667

1667:                                             ; preds = %1648, %1665
  %1668 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 14
  %1669 = load i32, i32* %1668, align 16
  %1670 = icmp sgt i32 %1669, 1
  %1671 = icmp eq i32 %1067, 0
  %1672 = and i1 %1671, %1670
  br i1 %1672, label %1673, label %2118

1673:                                             ; preds = %1667
  %1674 = icmp sgt i32 %1071, 1
  %1675 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 18
  %1676 = load i32, i32* %1675, align 16
  %1677 = icmp eq i32 %1676, 1
  br i1 %1674, label %1681, label %1678

1678:                                             ; preds = %1673
  br i1 %1677, label %1679, label %2118

1679:                                             ; preds = %1678
  %1680 = getelementptr inbounds i8, i8* %1086, i64 %1065
  br label %1683

1681:                                             ; preds = %1673
  %1682 = getelementptr inbounds i8, i8* %1086, i64 %1065
  br i1 %1677, label %1683, label %1859

1683:                                             ; preds = %1679, %1681
  %1684 = phi i8* [ %1680, %1679 ], [ %1682, %1681 ]
  %1685 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 20
  %1686 = load %struct.RowMTWorkerData*, %struct.RowMTWorkerData** %1685, align 8
  %1687 = call %struct.VPxWorkerInterface* @vpx_get_worker_interface() #9
  %1688 = load i32, i32* %1069, align 8
  %1689 = shl i32 1, %1688
  %1690 = load i32, i32* %1066, align 4
  %1691 = shl i32 1, %1690
  %1692 = load i32, i32* %1668, align 16
  %1693 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 33
  %1694 = load i32, i32* %1693, align 16
  %1695 = add nsw i32 %1694, 7
  %1696 = ashr i32 %1695, 3
  %1697 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 35
  %1698 = load i32, i32* %1697, align 8
  %1699 = add nsw i32 %1698, 7
  %1700 = ashr i32 %1699, 3
  %1701 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 11
  %1702 = load %struct.BufferPool*, %struct.BufferPool** %44, align 8
  %1703 = load i32, i32* %1073, align 16
  %1704 = sext i32 %1703 to i64
  %1705 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %1702, i64 0, i32 3, i64 %1704, i32 8
  %1706 = getelementptr inbounds %struct.RowMTWorkerData, %struct.RowMTWorkerData* %1686, i64 0, i32 4
  %1707 = load i8*, i8** %1706, align 8
  %1708 = mul nsw i32 %1700, %1696
  %1709 = sext i32 %1708 to i64
  call void @llvm.memset.p0i8.i64(i8* align 1 %1707, i8 0, i64 %1709, i1 false) #9
  call fastcc void @init_mt(%struct.VP9Decoder* %0) #9
  %1710 = icmp sgt i32 %1692, 0
  br i1 %1710, label %1711, label %1719

1711:                                             ; preds = %1683
  %1712 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 6
  %1713 = getelementptr inbounds %struct.VPxWorkerInterface, %struct.VPxWorkerInterface* %1687, i64 0, i32 2
  %1714 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 88
  %1715 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 11, i32 5
  %1716 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 0, i32 0, i64 0
  %1717 = getelementptr inbounds %struct.RowMTWorkerData, %struct.RowMTWorkerData* %1686, i64 0, i32 5
  %1718 = zext i32 %1692 to i64
  br label %1726

1719:                                             ; preds = %1746, %1683
  %1720 = phi i32 [ 0, %1683 ], [ %1692, %1746 ]
  %1721 = icmp eq i32 %1688, 31
  br i1 %1721, label %1767, label %1722

1722:                                             ; preds = %1719
  %1723 = bitcast %struct.VP9Decoder* %0 to i8*
  %1724 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 84
  %1725 = sext i32 %1689 to i64
  br label %1755

1726:                                             ; preds = %1746, %1711
  %1727 = phi i64 [ 0, %1711 ], [ %1753, %1746 ]
  %1728 = load %struct.VPxWorker*, %struct.VPxWorker** %1712, align 16
  %1729 = getelementptr inbounds %struct.VPxWorker, %struct.VPxWorker* %1728, i64 %1727
  %1730 = load %struct.RowMTWorkerData*, %struct.RowMTWorkerData** %1685, align 8
  %1731 = getelementptr inbounds %struct.RowMTWorkerData, %struct.RowMTWorkerData* %1730, i64 0, i32 14
  %1732 = load %struct.ThreadData*, %struct.ThreadData** %1731, align 8
  %1733 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1732, i64 %1727
  %1734 = load i32 (%struct.VPxWorker*)*, i32 (%struct.VPxWorker*)** %1713, align 8
  %1735 = call i32 %1734(%struct.VPxWorker* %1729) #9
  %1736 = load i32, i32* %1634, align 8
  %1737 = icmp eq i32 %1736, 0
  br i1 %1737, label %1746, label %1738

1738:                                             ; preds = %1726
  %1739 = load i32, i32* %1714, align 4
  %1740 = icmp eq i32 %1739, 0
  br i1 %1740, label %1741, label %1746

1741:                                             ; preds = %1738
  %1742 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1732, i64 %1727, i32 2
  store %struct.VP9LfSyncData* %1701, %struct.VP9LfSyncData** %1742, align 8
  %1743 = load %struct.LoopFilterWorkerData*, %struct.LoopFilterWorkerData** %1715, align 8
  %1744 = getelementptr inbounds %struct.LoopFilterWorkerData, %struct.LoopFilterWorkerData* %1743, i64 %1727
  %1745 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1732, i64 %1727, i32 1
  store %struct.LoopFilterWorkerData* %1744, %struct.LoopFilterWorkerData** %1745, align 8
  call void @vp9_loop_filter_data_reset(%struct.LoopFilterWorkerData* %1744, %struct.yv12_buffer_config* %1705, %struct.VP9Common* %15, %struct.macroblockd_plane* %1716) #9
  br label %1746

1746:                                             ; preds = %1741, %1738, %1726
  %1747 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1733, i64 0, i32 0
  store %struct.VP9Decoder* %0, %struct.VP9Decoder** %1747, align 8
  %1748 = getelementptr inbounds %struct.VPxWorker, %struct.VPxWorker* %1728, i64 %1727, i32 2
  store i32 (i8*, i8*)* @row_decode_worker_hook, i32 (i8*, i8*)** %1748, align 8
  %1749 = getelementptr inbounds %struct.VPxWorker, %struct.VPxWorker* %1728, i64 %1727, i32 3
  %1750 = bitcast i8** %1749 to %struct.ThreadData**
  store %struct.ThreadData* %1733, %struct.ThreadData** %1750, align 8
  %1751 = getelementptr inbounds %struct.VPxWorker, %struct.VPxWorker* %1728, i64 %1727, i32 4
  %1752 = bitcast i8** %1751 to i8***
  store i8** %1717, i8*** %1752, align 8
  %1753 = add nuw nsw i64 %1727, 1
  %1754 = icmp eq i64 %1753, %1718
  br i1 %1754, label %1719, label %1726

1755:                                             ; preds = %1755, %1722
  %1756 = phi i64 [ 0, %1722 ], [ %1765, %1755 ]
  %1757 = load %struct.TileWorkerData*, %struct.TileWorkerData** %1643, align 8
  %1758 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %1757, i64 %1756, i32 8
  %1759 = bitcast %struct.macroblockd* %1758 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %1759, i8* align 16 %1723, i64 656, i1 false) #9
  %1760 = load i32, i32* %1724, align 4
  %1761 = icmp eq i32 %1760, 0
  %1762 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %1757, i64 %1756, i32 4
  %1763 = select i1 %1761, %struct.FRAME_COUNTS* %1762, %struct.FRAME_COUNTS* null
  %1764 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %1757, i64 %1756, i32 8, i32 3
  store %struct.FRAME_COUNTS* %1763, %struct.FRAME_COUNTS** %1764, align 16
  %1765 = add nuw nsw i64 %1756, 1
  %1766 = icmp slt i64 %1765, %1725
  br i1 %1766, label %1755, label %1767

1767:                                             ; preds = %1755, %1719
  %1768 = getelementptr inbounds %struct.RowMTWorkerData, %struct.RowMTWorkerData* %1686, i64 0, i32 7
  call void @vp9_jobq_reset(%struct.JobQueueRowMt* %1768) #9
  %1769 = getelementptr inbounds %struct.RowMTWorkerData, %struct.RowMTWorkerData* %1686, i64 0, i32 9
  store i32 0, i32* %1769, align 8
  %1770 = getelementptr inbounds %struct.RowMTWorkerData, %struct.RowMTWorkerData* %1686, i64 0, i32 5
  store i8* null, i8** %1770, align 8
  %1771 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 8
  call fastcc void @get_tile_buffers(%struct.VP9Decoder* %0, i8* %1684, i8* %2, i32 %1689, i32 %1691, [64 x %struct.TileBuffer]* %1771) #9
  %1772 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 84
  %1773 = load i32, i32* %1772, align 4
  %1774 = icmp eq i32 %1773, 0
  %1775 = icmp ne i32 %1688, 31
  %1776 = and i1 %1775, %1774
  br i1 %1776, label %1777, label %1786

1777:                                             ; preds = %1767
  %1778 = sext i32 %1689 to i64
  br label %1779

1779:                                             ; preds = %1779, %1777
  %1780 = phi i64 [ 0, %1777 ], [ %1784, %1779 ]
  %1781 = load %struct.TileWorkerData*, %struct.TileWorkerData** %1643, align 8
  %1782 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %1781, i64 %1780, i32 4
  %1783 = bitcast %struct.FRAME_COUNTS* %1782 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %1783, i8 0, i64 13224, i1 false) #9
  %1784 = add nuw nsw i64 %1780, 1
  %1785 = icmp slt i64 %1784, %1778
  br i1 %1785, label %1779, label %1786

1786:                                             ; preds = %1779, %1767
  br i1 %1721, label %1792, label %1787

1787:                                             ; preds = %1786
  %1788 = bitcast %struct.Job* %9 to i8*
  %1789 = getelementptr inbounds %struct.Job, %struct.Job* %9, i64 0, i32 0
  %1790 = getelementptr inbounds %struct.Job, %struct.Job* %9, i64 0, i32 1
  %1791 = getelementptr inbounds %struct.Job, %struct.Job* %9, i64 0, i32 2
  br label %1800

1792:                                             ; preds = %1800, %1786
  br i1 %1710, label %1793, label %1805

1793:                                             ; preds = %1792
  %1794 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 6
  %1795 = add nsw i32 %1692, -1
  %1796 = getelementptr inbounds %struct.VPxWorkerInterface, %struct.VPxWorkerInterface* %1687, i64 0, i32 3
  %1797 = getelementptr inbounds %struct.VPxWorkerInterface, %struct.VPxWorkerInterface* %1687, i64 0, i32 4
  %1798 = zext i32 %1795 to i64
  %1799 = zext i32 %1692 to i64
  br label %1811

1800:                                             ; preds = %1800, %1787
  %1801 = phi i32 [ 0, %1787 ], [ %1803, %1800 ]
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %1788) #9
  store i32 0, i32* %1789, align 4
  store i32 %1801, i32* %1790, align 4
  store i32 0, i32* %1791, align 4
  %1802 = call i32 @vp9_jobq_queue(%struct.JobQueueRowMt* %1768, i8* nonnull %1788, i64 12) #9
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %1788) #9
  %1803 = add nuw nsw i32 %1801, 1
  %1804 = icmp slt i32 %1803, %1689
  br i1 %1804, label %1800, label %1792

1805:                                             ; preds = %1821, %1792
  %1806 = icmp sgt i32 %1720, 0
  br i1 %1806, label %1807, label %1836

1807:                                             ; preds = %1805
  %1808 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 6
  %1809 = getelementptr inbounds %struct.VPxWorkerInterface, %struct.VPxWorkerInterface* %1687, i64 0, i32 2
  %1810 = zext i32 %1720 to i64
  br label %1824

1811:                                             ; preds = %1821, %1793
  %1812 = phi i64 [ 0, %1793 ], [ %1822, %1821 ]
  %1813 = load %struct.VPxWorker*, %struct.VPxWorker** %1794, align 16
  %1814 = getelementptr inbounds %struct.VPxWorker, %struct.VPxWorker* %1813, i64 %1812
  %1815 = getelementptr inbounds %struct.VPxWorker, %struct.VPxWorker* %1813, i64 %1812, i32 5
  store i32 0, i32* %1815, align 8
  %1816 = icmp eq i64 %1812, %1798
  br i1 %1816, label %1817, label %1819

1817:                                             ; preds = %1811
  %1818 = load void (%struct.VPxWorker*)*, void (%struct.VPxWorker*)** %1797, align 8
  call void %1818(%struct.VPxWorker* %1814) #9
  br label %1821

1819:                                             ; preds = %1811
  %1820 = load void (%struct.VPxWorker*)*, void (%struct.VPxWorker*)** %1796, align 8
  call void %1820(%struct.VPxWorker* %1814) #9
  br label %1821

1821:                                             ; preds = %1819, %1817
  %1822 = add nuw nsw i64 %1812, 1
  %1823 = icmp eq i64 %1822, %1799
  br i1 %1823, label %1805, label %1811

1824:                                             ; preds = %1824, %1807
  %1825 = phi i64 [ %1810, %1807 ], [ %1828, %1824 ]
  %1826 = phi i32 [ 0, %1807 ], [ %1834, %1824 ]
  %1827 = load %struct.VPxWorker*, %struct.VPxWorker** %1808, align 16
  %1828 = add nsw i64 %1825, -1
  %1829 = getelementptr inbounds %struct.VPxWorker, %struct.VPxWorker* %1827, i64 %1828
  %1830 = load i32 (%struct.VPxWorker*)*, i32 (%struct.VPxWorker*)** %1809, align 8
  %1831 = call i32 %1830(%struct.VPxWorker* %1829) #9
  %1832 = icmp eq i32 %1831, 0
  %1833 = zext i1 %1832 to i32
  %1834 = or i32 %1826, %1833
  %1835 = icmp sgt i64 %1828, 0
  br i1 %1835, label %1824, label %1836

1836:                                             ; preds = %1824, %1805
  %1837 = phi i32 [ 0, %1805 ], [ %1834, %1824 ]
  store i32 %1837, i32* %1145, align 8
  %1838 = load %struct.TileWorkerData*, %struct.TileWorkerData** %1643, align 8
  %1839 = add nsw i32 %1689, -1
  %1840 = sext i32 %1839 to i64
  %1841 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %1838, i64 %1840, i32 3
  %1842 = call i8* @vpx_reader_find_end(%struct.vpx_reader* %1841) #9
  store i8* %1842, i8** %1770, align 8
  %1843 = load i32, i32* %1772, align 4
  %1844 = icmp eq i32 %1843, 0
  %1845 = and i1 %1775, %1844
  br i1 %1845, label %1846, label %1857

1846:                                             ; preds = %1836
  %1847 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 76
  %1848 = sext i32 %1689 to i64
  br label %1849

1849:                                             ; preds = %1849, %1846
  %1850 = phi i64 [ 0, %1846 ], [ %1853, %1849 ]
  %1851 = load %struct.TileWorkerData*, %struct.TileWorkerData** %1643, align 8
  %1852 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %1851, i64 %1850, i32 4
  call void @vp9_accumulate_frame_counts(%struct.FRAME_COUNTS* %1847, %struct.FRAME_COUNTS* %1852, i32 1) #9
  %1853 = add nuw nsw i64 %1850, 1
  %1854 = icmp slt i64 %1853, %1848
  br i1 %1854, label %1849, label %1855

1855:                                             ; preds = %1849
  %1856 = load i8*, i8** %1770, align 8
  br label %1857

1857:                                             ; preds = %1836, %1855
  %1858 = phi i8* [ %1856, %1855 ], [ %1842, %1836 ]
  store i8* %1858, i8** %3, align 8
  br label %2467

1859:                                             ; preds = %1681
  %1860 = call %struct.VPxWorkerInterface* @vpx_get_worker_interface() #9
  %1861 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 11
  %1862 = load %struct.BufferPool*, %struct.BufferPool** %44, align 8
  %1863 = load i32, i32* %1073, align 16
  %1864 = sext i32 %1863 to i64
  %1865 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %1862, i64 0, i32 3, i64 %1864, i32 8
  %1866 = load i32, i32* %1069, align 8
  %1867 = shl i32 1, %1866
  %1868 = load i32, i32* %1066, align 4
  %1869 = shl i32 1, %1868
  %1870 = load i32, i32* %1668, align 16
  %1871 = icmp slt i32 %1870, %1867
  %1872 = select i1 %1871, i32 %1870, i32 %1867
  call fastcc void @init_mt(%struct.VP9Decoder* %0) #9
  %1873 = icmp sgt i32 %1872, 0
  br i1 %1873, label %1874, label %1927

1874:                                             ; preds = %1859
  %1875 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 6
  %1876 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 10
  %1877 = getelementptr inbounds %struct.VPxWorkerInterface, %struct.VPxWorkerInterface* %1860, i64 0, i32 2
  %1878 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 19
  %1879 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 88
  %1880 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 11, i32 5
  %1881 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 0, i32 0, i64 0
  %1882 = bitcast %struct.VP9Decoder* %0 to i8*
  %1883 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 84
  %1884 = sext i32 %1872 to i64
  br label %1885

1885:                                             ; preds = %1912, %1874
  %1886 = phi i64 [ 0, %1874 ], [ %1925, %1912 ]
  %1887 = load %struct.VPxWorker*, %struct.VPxWorker** %1875, align 16
  %1888 = getelementptr inbounds %struct.VPxWorker, %struct.VPxWorker* %1887, i64 %1886
  %1889 = load %struct.TileWorkerData*, %struct.TileWorkerData** %1643, align 8
  %1890 = load i32, i32* %1876, align 4
  %1891 = trunc i64 %1886 to i32
  %1892 = add nsw i32 %1890, %1891
  %1893 = sext i32 %1892 to i64
  %1894 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %1889, i64 %1893
  %1895 = load i32 (%struct.VPxWorker*)*, i32 (%struct.VPxWorker*)** %1877, align 8
  %1896 = call i32 %1895(%struct.VPxWorker* %1888) #9
  %1897 = load i32, i32* %1878, align 4
  %1898 = icmp eq i32 %1897, 0
  br i1 %1898, label %1912, label %1899

1899:                                             ; preds = %1885
  %1900 = load i32, i32* %1634, align 8
  %1901 = icmp eq i32 %1900, 0
  br i1 %1901, label %1912, label %1902

1902:                                             ; preds = %1899
  %1903 = load i32, i32* %1879, align 4
  %1904 = icmp eq i32 %1903, 0
  br i1 %1904, label %1905, label %1912

1905:                                             ; preds = %1902
  %1906 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %1889, i64 %1893, i32 6
  store %struct.VP9LfSyncData* %1861, %struct.VP9LfSyncData** %1906, align 16
  %1907 = load %struct.LoopFilterWorkerData*, %struct.LoopFilterWorkerData** %1880, align 8
  %1908 = getelementptr inbounds %struct.LoopFilterWorkerData, %struct.LoopFilterWorkerData* %1907, i64 %1886
  %1909 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %1889, i64 %1893, i32 5
  store %struct.LoopFilterWorkerData* %1908, %struct.LoopFilterWorkerData** %1909, align 8
  call void @vp9_loop_filter_data_reset(%struct.LoopFilterWorkerData* %1908, %struct.yv12_buffer_config* %1865, %struct.VP9Common* %15, %struct.macroblockd_plane* %1881) #9
  %1910 = load %struct.LoopFilterWorkerData*, %struct.LoopFilterWorkerData** %1909, align 8
  %1911 = getelementptr inbounds %struct.LoopFilterWorkerData, %struct.LoopFilterWorkerData* %1910, i64 0, i32 5
  store i32 0, i32* %1911, align 8
  br label %1912

1912:                                             ; preds = %1905, %1902, %1899, %1885
  %1913 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %1889, i64 %1893, i32 8
  %1914 = bitcast %struct.macroblockd* %1913 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %1914, i8* align 16 %1882, i64 656, i1 false) #9
  %1915 = load i32, i32* %1883, align 4
  %1916 = icmp eq i32 %1915, 0
  %1917 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %1889, i64 %1893, i32 4
  %1918 = select i1 %1916, %struct.FRAME_COUNTS* %1917, %struct.FRAME_COUNTS* null
  %1919 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %1889, i64 %1893, i32 8, i32 3
  store %struct.FRAME_COUNTS* %1918, %struct.FRAME_COUNTS** %1919, align 16
  %1920 = getelementptr inbounds %struct.VPxWorker, %struct.VPxWorker* %1887, i64 %1886, i32 2
  store i32 (i8*, i8*)* @tile_worker_hook, i32 (i8*, i8*)** %1920, align 8
  %1921 = getelementptr inbounds %struct.VPxWorker, %struct.VPxWorker* %1887, i64 %1886, i32 3
  %1922 = bitcast i8** %1921 to %struct.TileWorkerData**
  store %struct.TileWorkerData* %1894, %struct.TileWorkerData** %1922, align 8
  %1923 = getelementptr inbounds %struct.VPxWorker, %struct.VPxWorker* %1887, i64 %1886, i32 4
  %1924 = bitcast i8** %1923 to %struct.VP9Decoder**
  store %struct.VP9Decoder* %0, %struct.VP9Decoder** %1924, align 8
  %1925 = add nuw nsw i64 %1886, 1
  %1926 = icmp slt i64 %1925, %1884
  br i1 %1926, label %1885, label %1927

1927:                                             ; preds = %1912, %1859
  %1928 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 8
  call fastcc void @get_tile_buffers(%struct.VP9Decoder* %0, i8* %1682, i8* %2, i32 %1867, i32 %1869, [64 x %struct.TileBuffer]* %1928) #9
  %1929 = bitcast [64 x %struct.TileBuffer]* %1928 to i8*
  %1930 = sext i32 %1867 to i64
  call void @qsort(i8* %1929, i64 %1930, i64 24, i32 (i8*, i8*)* nonnull @compare_tile_buffers) #9
  br i1 %1871, label %1940, label %1931

1931:                                             ; preds = %1927
  %1932 = bitcast %struct.TileBuffer* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1932)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %1932, i8* align 16 %1929, i64 24, i1 false) #9
  %1933 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 8, i64 1
  %1934 = bitcast %struct.TileBuffer* %1933 to i8*
  %1935 = add nsw i32 %1867, -1
  %1936 = sext i32 %1935 to i64
  %1937 = mul nsw i64 %1936, 24
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 16 %1929, i8* align 8 %1934, i64 %1937, i1 false) #9
  %1938 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 8, i64 %1936
  %1939 = bitcast %struct.TileBuffer* %1938 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1939, i8* nonnull align 8 %1932, i64 24, i1 false) #9
  br label %1956

1940:                                             ; preds = %1927
  %1941 = bitcast %struct.TileBuffer* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1941)
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1941, i8 -86, i64 24, i1 false)
  %1942 = add i32 %1867, -2
  %1943 = icmp sgt i32 %1942, 0
  br i1 %1943, label %1944, label %1956

1944:                                             ; preds = %1940
  %1945 = sext i32 %1942 to i64
  br label %1946

1946:                                             ; preds = %1946, %1944
  %1947 = phi i64 [ 0, %1944 ], [ %1953, %1946 ]
  %1948 = phi i64 [ %1945, %1944 ], [ %1954, %1946 ]
  %1949 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 8, i64 %1947
  %1950 = bitcast %struct.TileBuffer* %1949 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %1941, i8* align 8 %1950, i64 24, i1 false) #9
  %1951 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 8, i64 %1948
  %1952 = bitcast %struct.TileBuffer* %1951 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1950, i8* align 8 %1952, i64 24, i1 false) #9
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1952, i8* nonnull align 8 %1941, i64 24, i1 false) #9
  %1953 = add nuw nsw i64 %1947, 2
  %1954 = add nsw i64 %1948, -2
  %1955 = icmp slt i64 %1953, %1954
  br i1 %1955, label %1946, label %1956

1956:                                             ; preds = %1946, %1940, %1931
  %1957 = phi i8* [ %1932, %1931 ], [ %1941, %1940 ], [ %1941, %1946 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1957)
  %1958 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 84
  %1959 = load i32, i32* %1958, align 4
  %1960 = icmp eq i32 %1959, 0
  %1961 = and i1 %1873, %1960
  br i1 %1961, label %1962, label %2018

1962:                                             ; preds = %1956
  %1963 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 6
  %1964 = sext i32 %1872 to i64
  %1965 = add nsw i64 %1964, -1
  %1966 = and i64 %1964, 3
  %1967 = icmp ult i64 %1965, 3
  br i1 %1967, label %2003, label %1968

1968:                                             ; preds = %1962
  %1969 = sub nsw i64 %1964, %1966
  br label %1970

1970:                                             ; preds = %1970, %1968
  %1971 = phi i64 [ 0, %1968 ], [ %2000, %1970 ]
  %1972 = phi i64 [ %1969, %1968 ], [ %2001, %1970 ]
  %1973 = load %struct.VPxWorker*, %struct.VPxWorker** %1963, align 16
  %1974 = getelementptr inbounds %struct.VPxWorker, %struct.VPxWorker* %1973, i64 %1971, i32 3
  %1975 = bitcast i8** %1974 to %struct.TileWorkerData**
  %1976 = load %struct.TileWorkerData*, %struct.TileWorkerData** %1975, align 8
  %1977 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %1976, i64 0, i32 4
  %1978 = bitcast %struct.FRAME_COUNTS* %1977 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %1978, i8 0, i64 13224, i1 false) #9
  %1979 = or i64 %1971, 1
  %1980 = load %struct.VPxWorker*, %struct.VPxWorker** %1963, align 16
  %1981 = getelementptr inbounds %struct.VPxWorker, %struct.VPxWorker* %1980, i64 %1979, i32 3
  %1982 = bitcast i8** %1981 to %struct.TileWorkerData**
  %1983 = load %struct.TileWorkerData*, %struct.TileWorkerData** %1982, align 8
  %1984 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %1983, i64 0, i32 4
  %1985 = bitcast %struct.FRAME_COUNTS* %1984 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %1985, i8 0, i64 13224, i1 false) #9
  %1986 = or i64 %1971, 2
  %1987 = load %struct.VPxWorker*, %struct.VPxWorker** %1963, align 16
  %1988 = getelementptr inbounds %struct.VPxWorker, %struct.VPxWorker* %1987, i64 %1986, i32 3
  %1989 = bitcast i8** %1988 to %struct.TileWorkerData**
  %1990 = load %struct.TileWorkerData*, %struct.TileWorkerData** %1989, align 8
  %1991 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %1990, i64 0, i32 4
  %1992 = bitcast %struct.FRAME_COUNTS* %1991 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %1992, i8 0, i64 13224, i1 false) #9
  %1993 = or i64 %1971, 3
  %1994 = load %struct.VPxWorker*, %struct.VPxWorker** %1963, align 16
  %1995 = getelementptr inbounds %struct.VPxWorker, %struct.VPxWorker* %1994, i64 %1993, i32 3
  %1996 = bitcast i8** %1995 to %struct.TileWorkerData**
  %1997 = load %struct.TileWorkerData*, %struct.TileWorkerData** %1996, align 8
  %1998 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %1997, i64 0, i32 4
  %1999 = bitcast %struct.FRAME_COUNTS* %1998 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %1999, i8 0, i64 13224, i1 false) #9
  %2000 = add nuw nsw i64 %1971, 4
  %2001 = add i64 %1972, -4
  %2002 = icmp eq i64 %2001, 0
  br i1 %2002, label %2003, label %1970

2003:                                             ; preds = %1970, %1962
  %2004 = phi i64 [ 0, %1962 ], [ %2000, %1970 ]
  %2005 = icmp eq i64 %1966, 0
  br i1 %2005, label %2018, label %2006

2006:                                             ; preds = %2003, %2006
  %2007 = phi i64 [ %2015, %2006 ], [ %2004, %2003 ]
  %2008 = phi i64 [ %2016, %2006 ], [ %1966, %2003 ]
  %2009 = load %struct.VPxWorker*, %struct.VPxWorker** %1963, align 16
  %2010 = getelementptr inbounds %struct.VPxWorker, %struct.VPxWorker* %2009, i64 %2007, i32 3
  %2011 = bitcast i8** %2010 to %struct.TileWorkerData**
  %2012 = load %struct.TileWorkerData*, %struct.TileWorkerData** %2011, align 8
  %2013 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %2012, i64 0, i32 4
  %2014 = bitcast %struct.FRAME_COUNTS* %2013 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %2014, i8 0, i64 13224, i1 false) #9
  %2015 = add nuw nsw i64 %2007, 1
  %2016 = add i64 %2008, -1
  %2017 = icmp eq i64 %2016, 0
  br i1 %2017, label %2018, label %2006, !llvm.loop !3

2018:                                             ; preds = %2003, %2006, %1956
  %2019 = sdiv i32 %1867, %1872
  %2020 = srem i32 %1867, %1872
  br i1 %1873, label %2021, label %2097

2021:                                             ; preds = %2018
  %2022 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 6
  %2023 = add nsw i32 %1872, -1
  %2024 = getelementptr inbounds %struct.VPxWorkerInterface, %struct.VPxWorkerInterface* %1860, i64 0, i32 3
  %2025 = getelementptr inbounds %struct.VPxWorkerInterface, %struct.VPxWorkerInterface* %1860, i64 0, i32 4
  %2026 = zext i32 %2023 to i64
  %2027 = sext i32 %1872 to i64
  br label %2034

2028:                                             ; preds = %2057
  %2029 = trunc i64 %2058 to i32
  %2030 = icmp sgt i32 %2029, 0
  br i1 %2030, label %2031, label %2082

2031:                                             ; preds = %2028
  %2032 = getelementptr inbounds %struct.VPxWorkerInterface, %struct.VPxWorkerInterface* %1860, i64 0, i32 2
  %2033 = and i64 %2058, 4294967295
  br label %2060

2034:                                             ; preds = %2057, %2021
  %2035 = phi i64 [ 0, %2021 ], [ %2058, %2057 ]
  %2036 = phi i32 [ 0, %2021 ], [ %2047, %2057 ]
  %2037 = trunc i64 %2035 to i32
  %2038 = add nsw i32 %2020, %2037
  %2039 = sdiv i32 %2038, %1872
  %2040 = load %struct.VPxWorker*, %struct.VPxWorker** %2022, align 16
  %2041 = getelementptr inbounds %struct.VPxWorker, %struct.VPxWorker* %2040, i64 %2035
  %2042 = getelementptr inbounds %struct.VPxWorker, %struct.VPxWorker* %2040, i64 %2035, i32 3
  %2043 = bitcast i8** %2042 to %struct.TileWorkerData**
  %2044 = load %struct.TileWorkerData*, %struct.TileWorkerData** %2043, align 8
  %2045 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %2044, i64 0, i32 1
  store i32 %2036, i32* %2045, align 8
  %2046 = add i32 %2036, %2019
  %2047 = add i32 %2046, %2039
  %2048 = add nsw i32 %2047, -1
  %2049 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %2044, i64 0, i32 2
  store i32 %2048, i32* %2049, align 4
  %2050 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %2044, i64 0, i32 0
  store i8* %2, i8** %2050, align 16
  %2051 = getelementptr inbounds %struct.VPxWorker, %struct.VPxWorker* %2040, i64 %2035, i32 5
  store i32 0, i32* %2051, align 8
  %2052 = icmp eq i64 %2035, %2026
  br i1 %2052, label %2053, label %2055

2053:                                             ; preds = %2034
  %2054 = load void (%struct.VPxWorker*)*, void (%struct.VPxWorker*)** %2025, align 8
  call void %2054(%struct.VPxWorker* %2041) #9
  br label %2057

2055:                                             ; preds = %2034
  %2056 = load void (%struct.VPxWorker*)*, void (%struct.VPxWorker*)** %2024, align 8
  call void %2056(%struct.VPxWorker* %2041) #9
  br label %2057

2057:                                             ; preds = %2055, %2053
  %2058 = add nuw nsw i64 %2035, 1
  %2059 = icmp slt i64 %2058, %2027
  br i1 %2059, label %2034, label %2028

2060:                                             ; preds = %2079, %2031
  %2061 = phi i64 [ %2033, %2031 ], [ %2064, %2079 ]
  %2062 = phi i8* [ null, %2031 ], [ %2080, %2079 ]
  %2063 = load %struct.VPxWorker*, %struct.VPxWorker** %2022, align 16
  %2064 = add nsw i64 %2061, -1
  %2065 = getelementptr inbounds %struct.VPxWorker, %struct.VPxWorker* %2063, i64 %2064
  %2066 = getelementptr inbounds %struct.VPxWorker, %struct.VPxWorker* %2063, i64 %2064, i32 3
  %2067 = bitcast i8** %2066 to %struct.TileWorkerData**
  %2068 = load %struct.TileWorkerData*, %struct.TileWorkerData** %2067, align 8
  %2069 = load i32 (%struct.VPxWorker*)*, i32 (%struct.VPxWorker*)** %2032, align 8
  %2070 = call i32 %2069(%struct.VPxWorker* %2065) #9
  %2071 = icmp eq i32 %2070, 0
  %2072 = zext i1 %2071 to i32
  %2073 = load i32, i32* %1145, align 8
  %2074 = or i32 %2073, %2072
  store i32 %2074, i32* %1145, align 8
  %2075 = icmp eq i8* %2062, null
  br i1 %2075, label %2076, label %2079

2076:                                             ; preds = %2060
  %2077 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %2068, i64 0, i32 0
  %2078 = load i8*, i8** %2077, align 16
  br label %2079

2079:                                             ; preds = %2076, %2060
  %2080 = phi i8* [ %2062, %2060 ], [ %2078, %2076 ]
  %2081 = icmp sgt i64 %2064, 0
  br i1 %2081, label %2060, label %2082

2082:                                             ; preds = %2079, %2028
  %2083 = phi i8* [ null, %2028 ], [ %2080, %2079 ]
  %2084 = load i32, i32* %1958, align 4
  %2085 = icmp eq i32 %2084, 0
  br i1 %2085, label %2086, label %2097

2086:                                             ; preds = %2082
  %2087 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 76
  br label %2088

2088:                                             ; preds = %2088, %2086
  %2089 = phi i64 [ 0, %2086 ], [ %2095, %2088 ]
  %2090 = load %struct.VPxWorker*, %struct.VPxWorker** %2022, align 16
  %2091 = getelementptr inbounds %struct.VPxWorker, %struct.VPxWorker* %2090, i64 %2089, i32 3
  %2092 = bitcast i8** %2091 to %struct.TileWorkerData**
  %2093 = load %struct.TileWorkerData*, %struct.TileWorkerData** %2092, align 8
  %2094 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %2093, i64 0, i32 4
  call void @vp9_accumulate_frame_counts(%struct.FRAME_COUNTS* %2087, %struct.FRAME_COUNTS* %2094, i32 1) #9
  %2095 = add nuw nsw i64 %2089, 1
  %2096 = icmp slt i64 %2095, %2027
  br i1 %2096, label %2088, label %2097

2097:                                             ; preds = %2088, %2018, %2082
  %2098 = phi i8* [ %2083, %2082 ], [ null, %2018 ], [ %2083, %2088 ]
  store i8* %2098, i8** %3, align 8
  %2099 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 19
  %2100 = load i32, i32* %2099, align 4
  %2101 = icmp eq i32 %2100, 0
  br i1 %2101, label %2102, label %2467

2102:                                             ; preds = %2097
  %2103 = load i32, i32* %1145, align 8
  %2104 = icmp eq i32 %2103, 0
  br i1 %2104, label %2105, label %2116

2105:                                             ; preds = %2102
  %2106 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 88
  %2107 = load i32, i32* %2106, align 4
  %2108 = icmp eq i32 %2107, 0
  br i1 %2108, label %2109, label %2467

2109:                                             ; preds = %2105
  %2110 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 0, i32 0, i64 0
  %2111 = load i32, i32* %1634, align 8
  %2112 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 6
  %2113 = load %struct.VPxWorker*, %struct.VPxWorker** %2112, align 16
  %2114 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 9
  %2115 = load i32, i32* %2114, align 16
  call void @vp9_loop_filter_frame_mt(%struct.yv12_buffer_config* %1076, %struct.VP9Common* %15, %struct.macroblockd_plane* %2110, i32 %2111, i32 0, i32 0, %struct.VPxWorker* %2113, i32 %2115, %struct.VP9LfSyncData* %1861) #9
  br label %2467

2116:                                             ; preds = %2102
  %2117 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %15, i64 0, i32 0
  call void (%struct.vpx_internal_error_info*, i32, i8*, ...) @vpx_internal_error(%struct.vpx_internal_error_info* %2117, i32 7, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.4, i64 0, i64 0)) #9
  br label %2467

2118:                                             ; preds = %1678, %1667
  %2119 = getelementptr inbounds i8, i8* %1086, i64 %1065
  %2120 = call %struct.VPxWorkerInterface* @vpx_get_worker_interface() #9
  %2121 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 35
  %2122 = load i32, i32* %2121, align 8
  %2123 = add nsw i32 %2122, 7
  %2124 = and i32 %2123, -8
  %2125 = load i32, i32* %1069, align 8
  %2126 = shl i32 1, %2125
  %2127 = load i32, i32* %1066, align 4
  %2128 = shl i32 1, %2127
  %2129 = bitcast [4 x [64 x %struct.TileBuffer]]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 6144, i8* nonnull %2129) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %2129, i8 -86, i64 6144, i1 false) #9
  %2130 = load i32, i32* %1634, align 8
  %2131 = icmp eq i32 %2130, 0
  br i1 %2131, label %2176, label %2132

2132:                                             ; preds = %2118
  %2133 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 88
  %2134 = load i32, i32* %2133, align 4
  %2135 = icmp eq i32 %2134, 0
  br i1 %2135, label %2136, label %2157

2136:                                             ; preds = %2132
  %2137 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 5
  %2138 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 5, i32 3
  %2139 = load i8*, i8** %2138, align 8
  %2140 = icmp eq i8* %2139, null
  br i1 %2140, label %2141, label %2157

2141:                                             ; preds = %2136
  %2142 = call i8* @vpx_memalign(i64 32, i64 440) #9
  store i8* %2142, i8** %2138, align 8
  %2143 = icmp eq i8* %2142, null
  br i1 %2143, label %2144, label %2146

2144:                                             ; preds = %2141
  %2145 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %15, i64 0, i32 0
  call void (%struct.vpx_internal_error_info*, i32, i8*, ...) @vpx_internal_error(%struct.vpx_internal_error_info* %2145, i32 2, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.36, i64 0, i64 0)) #9
  br label %2146

2146:                                             ; preds = %2144, %2141
  %2147 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 5, i32 2
  store i32 (i8*, i8*)* @vp9_loop_filter_worker, i32 (i8*, i8*)** %2147, align 16
  %2148 = load i32, i32* %1668, align 16
  %2149 = icmp sgt i32 %2148, 1
  br i1 %2149, label %2150, label %2157

2150:                                             ; preds = %2146
  %2151 = getelementptr inbounds %struct.VPxWorkerInterface, %struct.VPxWorkerInterface* %2120, i64 0, i32 1
  %2152 = load i32 (%struct.VPxWorker*)*, i32 (%struct.VPxWorker*)** %2151, align 8
  %2153 = call i32 %2152(%struct.VPxWorker* %2137) #9
  %2154 = icmp eq i32 %2153, 0
  br i1 %2154, label %2155, label %2157

2155:                                             ; preds = %2150
  %2156 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %15, i64 0, i32 0
  call void (%struct.vpx_internal_error_info*, i32, i8*, ...) @vpx_internal_error(%struct.vpx_internal_error_info* %2156, i32 1, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.37, i64 0, i64 0)) #9
  br label %2157

2157:                                             ; preds = %2155, %2150, %2146, %2136, %2132
  %2158 = load i32, i32* %1634, align 8
  %2159 = icmp eq i32 %2158, 0
  br i1 %2159, label %2176, label %2160

2160:                                             ; preds = %2157
  %2161 = load i32, i32* %2133, align 4
  %2162 = icmp eq i32 %2161, 0
  br i1 %2162, label %2163, label %2176

2163:                                             ; preds = %2160
  %2164 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 5
  %2165 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 5, i32 3
  %2166 = bitcast i8** %2165 to %struct.LoopFilterWorkerData**
  %2167 = load %struct.LoopFilterWorkerData*, %struct.LoopFilterWorkerData** %2166, align 8
  %2168 = getelementptr inbounds %struct.VPxWorkerInterface, %struct.VPxWorkerInterface* %2120, i64 0, i32 2
  %2169 = load i32 (%struct.VPxWorker*)*, i32 (%struct.VPxWorker*)** %2168, align 8
  %2170 = call i32 %2169(%struct.VPxWorker* %2164) #9
  %2171 = load %struct.BufferPool*, %struct.BufferPool** %44, align 8
  %2172 = load i32, i32* %1073, align 16
  %2173 = sext i32 %2172 to i64
  %2174 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %2171, i64 0, i32 3, i64 %2173, i32 8
  %2175 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 0, i32 0, i64 0
  call void @vp9_loop_filter_data_reset(%struct.LoopFilterWorkerData* %2167, %struct.yv12_buffer_config* %2174, %struct.VP9Common* %15, %struct.macroblockd_plane* %2175) #9
  br label %2176

2176:                                             ; preds = %2163, %2160, %2157, %2118
  %2177 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 91
  %2178 = load i8*, i8** %2177, align 8
  %2179 = sext i32 %2124 to i64
  %2180 = mul nsw i64 %2179, 6
  call void @llvm.memset.p0i8.i64(i8* align 1 %2178, i8 0, i64 %2180, i1 false) #9
  %2181 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 90
  %2182 = load i8*, i8** %2181, align 16
  call void @llvm.memset.p0i8.i64(i8* align 1 %2182, i8 0, i64 %2179, i1 false) #9
  call void @vp9_reset_lfm(%struct.VP9Common* %15) #9
  %2183 = getelementptr inbounds [4 x [64 x %struct.TileBuffer]], [4 x [64 x %struct.TileBuffer]]* %5, i64 0, i64 0
  call fastcc void @get_tile_buffers(%struct.VP9Decoder* %0, i8* %2119, i8* %2, i32 %2126, i32 %2128, [64 x %struct.TileBuffer]* nonnull %2183) #9
  %2184 = icmp eq i32 %2127, 31
  br i1 %2184, label %2437, label %2185

2185:                                             ; preds = %2176
  %2186 = icmp eq i32 %2125, 31
  %2187 = bitcast %struct.VP9Decoder* %0 to i8*
  %2188 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 84
  %2189 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 76
  %2190 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %15, i64 0, i32 0
  %2191 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 43, i64 0
  %2192 = bitcast [2 x i16]* %2191 to i8*
  %2193 = bitcast %struct.frame_contexts** %1127 to i64*
  %2194 = bitcast i8** %2177 to i64*
  %2195 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 42, i64 0
  %2196 = bitcast [2 x i16]* %2195 to i8*
  %2197 = bitcast i8** %2181 to i64*
  %2198 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 36
  %2199 = sext i32 %2126 to i64
  %2200 = sext i32 %2128 to i64
  br label %2201

2201:                                             ; preds = %2311, %2185
  %2202 = phi i64 [ 0, %2185 ], [ %2312, %2311 ]
  br i1 %2186, label %2311, label %2203

2203:                                             ; preds = %2201
  %2204 = trunc i64 %2202 to i32
  %2205 = shl i32 %2204, %2125
  %2206 = sext i32 %2205 to i64
  br label %2224

2207:                                             ; preds = %2311
  %2208 = bitcast %struct.TileInfo* %6 to i8*
  %2209 = getelementptr inbounds %struct.TileInfo, %struct.TileInfo* %6, i64 0, i32 0
  %2210 = getelementptr inbounds %struct.TileInfo, %struct.TileInfo* %6, i64 0, i32 1
  %2211 = getelementptr inbounds %struct.TileInfo, %struct.TileInfo* %6, i64 0, i32 2
  %2212 = getelementptr inbounds %struct.TileInfo, %struct.TileInfo* %6, i64 0, i32 3
  %2213 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 15
  %2214 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 18
  %2215 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 20
  %2216 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 88
  %2217 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 5
  %2218 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 5, i32 3
  %2219 = bitcast i8** %2218 to %struct.LoopFilterWorkerData**
  %2220 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 33
  %2221 = getelementptr inbounds %struct.VPxWorkerInterface, %struct.VPxWorkerInterface* %2120, i64 0, i32 2
  %2222 = getelementptr inbounds %struct.VPxWorkerInterface, %struct.VPxWorkerInterface* %2120, i64 0, i32 4
  %2223 = getelementptr inbounds %struct.VPxWorkerInterface, %struct.VPxWorkerInterface* %2120, i64 0, i32 3
  br label %2314

2224:                                             ; preds = %2306, %2203
  %2225 = phi i64 [ 0, %2203 ], [ %2309, %2306 ]
  %2226 = load %struct.TileWorkerData*, %struct.TileWorkerData** %1643, align 8
  %2227 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %2226, i64 %2206
  %2228 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %2227, i64 %2225
  %2229 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %2228, i64 0, i32 8
  %2230 = bitcast %struct.macroblockd* %2229 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %2230, i8* align 16 %2187, i64 656, i1 false) #9
  %2231 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %2229, i64 0, i32 25
  store i32 0, i32* %2231, align 8
  %2232 = load i32, i32* %2188, align 4
  %2233 = icmp eq i32 %2232, 0
  %2234 = select i1 %2233, %struct.FRAME_COUNTS* %2189, %struct.FRAME_COUNTS* null
  %2235 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %2229, i64 0, i32 3
  store %struct.FRAME_COUNTS* %2234, %struct.FRAME_COUNTS** %2235, align 16
  %2236 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %2228, i64 0, i32 9
  %2237 = bitcast [1024 x i32]* %2236 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %2237, i8 0, i64 4096, i1 false) #9
  %2238 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %2229, i64 0, i32 4
  %2239 = trunc i64 %2225 to i32
  call void @vp9_tile_init(%struct.TileInfo* %2238, %struct.VP9Common* %15, i32 %2204, i32 %2239) #9
  %2240 = getelementptr inbounds [4 x [64 x %struct.TileBuffer]], [4 x [64 x %struct.TileBuffer]]* %5, i64 0, i64 %2202, i64 %2225, i32 0
  %2241 = load i8*, i8** %2240, align 8
  %2242 = getelementptr inbounds [4 x [64 x %struct.TileBuffer]], [4 x [64 x %struct.TileBuffer]]* %5, i64 0, i64 %2202, i64 %2225, i32 1
  %2243 = load i64, i64* %2242, align 8
  %2244 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %2228, i64 0, i32 3
  %2245 = load void (i8*, i8*, i8*, i32)*, void (i8*, i8*, i8*, i32)** %26, align 16
  %2246 = load i8*, i8** %1148, align 8
  %2247 = icmp eq i64 %2243, 0
  br i1 %2247, label %2252, label %2248

2248:                                             ; preds = %2224
  %2249 = ptrtoint i8* %2241 to i64
  %2250 = sub i64 %1087, %2249
  %2251 = icmp ult i64 %2250, %2243
  br i1 %2251, label %2252, label %2253

2252:                                             ; preds = %2248, %2224
  call void (%struct.vpx_internal_error_info*, i32, i8*, ...) @vpx_internal_error(%struct.vpx_internal_error_info* %2190, i32 7, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.33, i64 0, i64 0)) #9
  br label %2253

2253:                                             ; preds = %2252, %2248
  %2254 = call i32 @vpx_reader_init(%struct.vpx_reader* %2244, i8* %2241, i64 %2243, void (i8*, i8*, i8*, i32)* %2245, i8* %2246) #9
  %2255 = icmp eq i32 %2254, 0
  br i1 %2255, label %2257, label %2256

2256:                                             ; preds = %2253
  call void (%struct.vpx_internal_error_info*, i32, i8*, ...) @vpx_internal_error(%struct.vpx_internal_error_info* %2190, i32 2, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.34, i64 0, i64 0), i32 1) #9
  br label %2257

2257:                                             ; preds = %2256, %2253
  %2258 = getelementptr inbounds [1024 x i32], [1024 x i32]* %2236, i64 0, i64 0
  %2259 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %2229, i64 0, i32 16
  %2260 = bitcast %struct.frame_contexts** %2259 to i64*
  %2261 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %2229, i64 0, i32 0, i64 0, i32 0
  store i32* %2258, i32** %2261, align 8
  %2262 = load i64, i64* %2194, align 8
  %2263 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %2229, i64 0, i32 19, i64 0
  %2264 = bitcast i8** %2263 to i64*
  store i64 %2262, i64* %2264, align 8
  %2265 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %2229, i64 0, i32 0, i64 0, i32 7, i64 0
  %2266 = bitcast [2 x i16]* %2265 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %2266, i8* align 4 %2196, i64 32, i1 false) #9
  %2267 = load i64, i64* %2193, align 8
  store i64 %2267, i64* %2260, align 8
  %2268 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %2229, i64 0, i32 0, i64 1, i32 0
  store i32* %2258, i32** %2268, align 8
  %2269 = load i8*, i8** %2177, align 8
  %2270 = load i32, i32* %2121, align 8
  %2271 = add nsw i32 %2270, 7
  %2272 = and i32 %2271, -8
  %2273 = sext i32 %2272 to i64
  %2274 = shl nsw i64 %2273, 1
  %2275 = getelementptr inbounds i8, i8* %2269, i64 %2274
  %2276 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %2229, i64 0, i32 19, i64 1
  store i8* %2275, i8** %2276, align 8
  %2277 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %2229, i64 0, i32 0, i64 1, i32 7, i64 0
  %2278 = bitcast [2 x i16]* %2277 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %2278, i8* align 4 %2192, i64 32, i1 false) #9
  %2279 = load i64, i64* %2193, align 8
  store i64 %2279, i64* %2260, align 8
  %2280 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %2229, i64 0, i32 0, i64 2, i32 0
  store i32* %2258, i32** %2280, align 8
  %2281 = load i8*, i8** %2177, align 8
  %2282 = load i32, i32* %2121, align 8
  %2283 = add nsw i32 %2282, 7
  %2284 = and i32 %2283, -8
  %2285 = sext i32 %2284 to i64
  %2286 = shl nsw i64 %2285, 2
  %2287 = getelementptr inbounds i8, i8* %2281, i64 %2286
  %2288 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %2229, i64 0, i32 19, i64 2
  store i8* %2287, i8** %2288, align 8
  %2289 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %2229, i64 0, i32 0, i64 2, i32 7, i64 0
  %2290 = bitcast [2 x i16]* %2289 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %2290, i8* align 4 %2192, i64 32, i1 false) #9
  %2291 = load i64, i64* %2193, align 8
  store i64 %2291, i64* %2260, align 8
  %2292 = load i64, i64* %2197, align 16
  %2293 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %2229, i64 0, i32 21
  %2294 = bitcast i8** %2293 to i64*
  store i64 %2292, i64* %2294, align 8
  %2295 = load i32, i32* %2198, align 4
  %2296 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %2229, i64 0, i32 5
  store i32 %2295, i32* %2296, align 8
  %2297 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %2229, i64 0, i32 26
  store %struct.vpx_internal_error_info* %2190, %struct.vpx_internal_error_info** %2297, align 8
  %2298 = load i32, i32* %46, align 4
  %2299 = icmp eq i32 %2298, 0
  br i1 %2299, label %2306, label %2300

2300:                                             ; preds = %2257
  %2301 = load i8, i8* %49, align 4
  %2302 = icmp eq i8 %2301, 0
  br i1 %2302, label %2303, label %2306

2303:                                             ; preds = %2300
  %2304 = load %struct.frame_contexts*, %struct.frame_contexts** %1127, align 8
  %2305 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %2304, i64 0, i32 2, i64 0
  br label %2306

2306:                                             ; preds = %2303, %2300, %2257
  %2307 = phi [3 x i8]* [ %2305, %2303 ], [ getelementptr inbounds ([16 x [3 x i8]], [16 x [3 x i8]]* @vp9_kf_partition_probs, i64 0, i64 0), %2300 ], [ getelementptr inbounds ([16 x [3 x i8]], [16 x [3 x i8]]* @vp9_kf_partition_probs, i64 0, i64 0), %2257 ]
  %2308 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %2229, i64 0, i32 11
  store [3 x i8]* %2307, [3 x i8]** %2308, align 8
  %2309 = add nuw nsw i64 %2225, 1
  %2310 = icmp slt i64 %2309, %2199
  br i1 %2310, label %2224, label %2311

2311:                                             ; preds = %2306, %2201
  %2312 = add nuw nsw i64 %2202, 1
  %2313 = icmp slt i64 %2312, %2200
  br i1 %2313, label %2201, label %2207

2314:                                             ; preds = %2434, %2207
  %2315 = phi i32 [ 0, %2207 ], [ %2435, %2434 ]
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %2208) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %2208, i8 -86, i64 16, i1 false) #9
  call void @vp9_tile_set_row(%struct.TileInfo* nonnull %6, %struct.VP9Common* %15, i32 %2315) #9
  %2316 = load i32, i32* %2209, align 4
  %2317 = load i32, i32* %2210, align 4
  %2318 = icmp slt i32 %2316, %2317
  br i1 %2318, label %2319, label %2434

2319:                                             ; preds = %2314
  %2320 = shl i32 %2315, %2125
  %2321 = sext i32 %2320 to i64
  br label %2322

2322:                                             ; preds = %2430, %2319
  %2323 = phi i32 [ %2316, %2319 ], [ %2431, %2430 ]
  br i1 %2186, label %2405, label %2324

2324:                                             ; preds = %2322, %2402
  %2325 = phi i32 [ %2403, %2402 ], [ 0, %2322 ]
  %2326 = load i32, i32* %2213, align 4
  %2327 = icmp eq i32 %2326, 0
  %2328 = xor i32 %2325, -1
  %2329 = add i32 %2126, %2328
  %2330 = select i1 %2327, i32 %2325, i32 %2329
  %2331 = load %struct.TileWorkerData*, %struct.TileWorkerData** %1643, align 8
  %2332 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %2331, i64 %2321
  %2333 = sext i32 %2330 to i64
  %2334 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %2332, i64 %2333
  call void @vp9_tile_set_col(%struct.TileInfo* nonnull %6, %struct.VP9Common* %15, i32 %2330) #9
  %2335 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %2334, i64 0, i32 8
  %2336 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %2335, i64 0, i32 20, i64 0, i64 0
  call void @llvm.memset.p0i8.i64(i8* align 16 %2336, i8 0, i64 48, i1 false) #9
  %2337 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %2335, i64 0, i32 22, i64 0
  %2338 = bitcast i8* %2337 to i64*
  store i64 0, i64* %2338, align 8
  %2339 = load i32, i32* %2211, align 4
  %2340 = load i32, i32* %2212, align 4
  %2341 = icmp slt i32 %2339, %2340
  br i1 %2341, label %2342, label %2395

2342:                                             ; preds = %2324
  %2343 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %2335, i64 0, i32 27
  %2344 = bitcast i32** %2343 to i64*
  %2345 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %2335, i64 0, i32 0, i64 0, i32 13
  %2346 = bitcast i32** %2345 to i64*
  %2347 = bitcast %struct.macroblockd* %2335 to i64*
  %2348 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %2335, i64 0, i32 0, i64 1
  %2349 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %2335, i64 0, i32 0, i64 1, i32 13
  %2350 = bitcast i32** %2349 to i64*
  %2351 = bitcast %struct.macroblockd_plane* %2348 to i64*
  %2352 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %2335, i64 0, i32 0, i64 2
  %2353 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %2335, i64 0, i32 0, i64 2, i32 13
  %2354 = bitcast i32** %2353 to i64*
  %2355 = bitcast %struct.macroblockd_plane* %2352 to i64*
  br label %2356

2356:                                             ; preds = %2391, %2342
  %2357 = phi i32 [ %2339, %2342 ], [ %2392, %2391 ]
  %2358 = load i32, i32* %2214, align 16
  %2359 = icmp eq i32 %2358, 1
  br i1 %2359, label %2360, label %2390

2360:                                             ; preds = %2356
  %2361 = load %struct.RowMTWorkerData*, %struct.RowMTWorkerData** %2215, align 8
  %2362 = getelementptr inbounds %struct.RowMTWorkerData, %struct.RowMTWorkerData* %2361, i64 0, i32 1, i64 0
  %2363 = bitcast i32** %2362 to i64*
  %2364 = load i64, i64* %2363, align 8
  store i64 %2364, i64* %2346, align 8
  %2365 = getelementptr inbounds %struct.RowMTWorkerData, %struct.RowMTWorkerData* %2361, i64 0, i32 3, i64 0
  %2366 = bitcast i32** %2365 to i64*
  %2367 = load i64, i64* %2366, align 8
  store i64 %2367, i64* %2347, align 8
  %2368 = getelementptr inbounds %struct.RowMTWorkerData, %struct.RowMTWorkerData* %2361, i64 0, i32 1, i64 1
  %2369 = bitcast i32** %2368 to i64*
  %2370 = load i64, i64* %2369, align 8
  store i64 %2370, i64* %2350, align 8
  %2371 = getelementptr inbounds %struct.RowMTWorkerData, %struct.RowMTWorkerData* %2361, i64 0, i32 3, i64 1
  %2372 = bitcast i32** %2371 to i64*
  %2373 = load i64, i64* %2372, align 8
  store i64 %2373, i64* %2351, align 8
  %2374 = getelementptr inbounds %struct.RowMTWorkerData, %struct.RowMTWorkerData* %2361, i64 0, i32 1, i64 2
  %2375 = bitcast i32** %2374 to i64*
  %2376 = load i64, i64* %2375, align 8
  store i64 %2376, i64* %2354, align 8
  %2377 = getelementptr inbounds %struct.RowMTWorkerData, %struct.RowMTWorkerData* %2361, i64 0, i32 3, i64 2
  %2378 = bitcast i32** %2377 to i64*
  %2379 = load i64, i64* %2378, align 8
  store i64 %2379, i64* %2355, align 8
  %2380 = getelementptr inbounds %struct.RowMTWorkerData, %struct.RowMTWorkerData* %2361, i64 0, i32 2
  %2381 = bitcast i32** %2380 to i64*
  %2382 = load i64, i64* %2381, align 8
  store i64 %2382, i64* %2344, align 8
  call fastcc void @process_partition(%struct.TileWorkerData* %2334, %struct.VP9Decoder* %0, i32 %2323, i32 %2357, i8 zeroext 12, i32 4, i32 1, void (%struct.TileWorkerData*, %struct.VP9Decoder*, i32, i32, i8, i32, i32)* nonnull @parse_block) #9
  %2383 = load i64, i64* %2363, align 8
  store i64 %2383, i64* %2346, align 8
  %2384 = load i64, i64* %2366, align 8
  store i64 %2384, i64* %2347, align 8
  %2385 = load i64, i64* %2369, align 8
  store i64 %2385, i64* %2350, align 8
  %2386 = load i64, i64* %2372, align 8
  store i64 %2386, i64* %2351, align 8
  %2387 = load i64, i64* %2375, align 8
  store i64 %2387, i64* %2354, align 8
  %2388 = load i64, i64* %2378, align 8
  store i64 %2388, i64* %2355, align 8
  %2389 = load i64, i64* %2381, align 8
  store i64 %2389, i64* %2344, align 8
  call fastcc void @process_partition(%struct.TileWorkerData* %2334, %struct.VP9Decoder* %0, i32 %2323, i32 %2357, i8 zeroext 12, i32 4, i32 2, void (%struct.TileWorkerData*, %struct.VP9Decoder*, i32, i32, i8, i32, i32)* nonnull @recon_block) #9
  br label %2391

2390:                                             ; preds = %2356
  call fastcc void @decode_partition(%struct.TileWorkerData* %2334, %struct.VP9Decoder* %0, i32 %2323, i32 %2357, i8 zeroext 12, i32 4) #9
  br label %2391

2391:                                             ; preds = %2390, %2360
  %2392 = add nsw i32 %2357, 8
  %2393 = load i32, i32* %2212, align 4
  %2394 = icmp slt i32 %2392, %2393
  br i1 %2394, label %2356, label %2395

2395:                                             ; preds = %2391, %2324
  %2396 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %2335, i64 0, i32 25
  %2397 = load i32, i32* %2396, align 8
  %2398 = load i32, i32* %1145, align 8
  %2399 = or i32 %2398, %2397
  store i32 %2399, i32* %1145, align 8
  %2400 = icmp eq i32 %2399, 0
  br i1 %2400, label %2402, label %2401

2401:                                             ; preds = %2395
  call void (%struct.vpx_internal_error_info*, i32, i8*, ...) @vpx_internal_error(%struct.vpx_internal_error_info* %2190, i32 7, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.30, i64 0, i64 0)) #9
  br label %2402

2402:                                             ; preds = %2401, %2395
  %2403 = add nuw nsw i32 %2325, 1
  %2404 = icmp sgt i32 %2126, %2403
  br i1 %2404, label %2324, label %2405

2405:                                             ; preds = %2402, %2322
  %2406 = load i32, i32* %1634, align 8
  %2407 = icmp eq i32 %2406, 0
  br i1 %2407, label %2430, label %2408

2408:                                             ; preds = %2405
  %2409 = load i32, i32* %2216, align 4
  %2410 = icmp eq i32 %2409, 0
  br i1 %2410, label %2411, label %2430

2411:                                             ; preds = %2408
  %2412 = add nsw i32 %2323, -8
  %2413 = load %struct.LoopFilterWorkerData*, %struct.LoopFilterWorkerData** %2219, align 8
  %2414 = icmp slt i32 %2412, 0
  br i1 %2414, label %2430, label %2415

2415:                                             ; preds = %2411
  %2416 = add nuw nsw i32 %2323, 8
  %2417 = load i32, i32* %2220, align 16
  %2418 = icmp slt i32 %2416, %2417
  br i1 %2418, label %2419, label %2430

2419:                                             ; preds = %2415
  %2420 = load i32 (%struct.VPxWorker*)*, i32 (%struct.VPxWorker*)** %2221, align 8
  %2421 = call i32 %2420(%struct.VPxWorker* %2217) #9
  %2422 = getelementptr inbounds %struct.LoopFilterWorkerData, %struct.LoopFilterWorkerData* %2413, i64 0, i32 3
  store i32 %2412, i32* %2422, align 8
  %2423 = getelementptr inbounds %struct.LoopFilterWorkerData, %struct.LoopFilterWorkerData* %2413, i64 0, i32 4
  store i32 %2323, i32* %2423, align 4
  %2424 = load i32, i32* %1668, align 16
  %2425 = icmp sgt i32 %2424, 1
  br i1 %2425, label %2426, label %2428

2426:                                             ; preds = %2419
  %2427 = load void (%struct.VPxWorker*)*, void (%struct.VPxWorker*)** %2223, align 8
  call void %2427(%struct.VPxWorker* %2217) #9
  br label %2430

2428:                                             ; preds = %2419
  %2429 = load void (%struct.VPxWorker*)*, void (%struct.VPxWorker*)** %2222, align 8
  call void %2429(%struct.VPxWorker* %2217) #9
  br label %2430

2430:                                             ; preds = %2428, %2426, %2415, %2411, %2408, %2405
  %2431 = add nsw i32 %2323, 8
  %2432 = load i32, i32* %2210, align 4
  %2433 = icmp slt i32 %2431, %2432
  br i1 %2433, label %2322, label %2434

2434:                                             ; preds = %2430, %2314
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %2208) #9
  %2435 = add nuw nsw i32 %2315, 1
  %2436 = icmp slt i32 %2435, %2128
  br i1 %2436, label %2314, label %2437

2437:                                             ; preds = %2434, %2176
  %2438 = load i32, i32* %1634, align 8
  %2439 = icmp eq i32 %2438, 0
  br i1 %2439, label %2459, label %2440

2440:                                             ; preds = %2437
  %2441 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 88
  %2442 = load i32, i32* %2441, align 4
  %2443 = icmp eq i32 %2442, 0
  br i1 %2443, label %2444, label %2459

2444:                                             ; preds = %2440
  %2445 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 5
  %2446 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 5, i32 3
  %2447 = bitcast i8** %2446 to %struct.LoopFilterWorkerData**
  %2448 = load %struct.LoopFilterWorkerData*, %struct.LoopFilterWorkerData** %2447, align 8
  %2449 = getelementptr inbounds %struct.VPxWorkerInterface, %struct.VPxWorkerInterface* %2120, i64 0, i32 2
  %2450 = load i32 (%struct.VPxWorker*)*, i32 (%struct.VPxWorker*)** %2449, align 8
  %2451 = call i32 %2450(%struct.VPxWorker* %2445) #9
  %2452 = getelementptr inbounds %struct.LoopFilterWorkerData, %struct.LoopFilterWorkerData* %2448, i64 0, i32 4
  %2453 = load i32, i32* %2452, align 4
  %2454 = getelementptr inbounds %struct.LoopFilterWorkerData, %struct.LoopFilterWorkerData* %2448, i64 0, i32 3
  store i32 %2453, i32* %2454, align 8
  %2455 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 33
  %2456 = load i32, i32* %2455, align 16
  store i32 %2456, i32* %2452, align 4
  %2457 = getelementptr inbounds %struct.VPxWorkerInterface, %struct.VPxWorkerInterface* %2120, i64 0, i32 4
  %2458 = load void (%struct.VPxWorker*)*, void (%struct.VPxWorker*)** %2457, align 8
  call void %2458(%struct.VPxWorker* %2445) #9
  br label %2459

2459:                                             ; preds = %2437, %2440, %2444
  %2460 = load %struct.TileWorkerData*, %struct.TileWorkerData** %1643, align 8
  %2461 = shl i32 %2128, %2125
  %2462 = sext i32 %2461 to i64
  %2463 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %2460, i64 %2462
  %2464 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %2463, i64 -1
  %2465 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %2464, i64 0, i32 3
  %2466 = call i8* @vpx_reader_find_end(%struct.vpx_reader* %2465) #9
  call void @llvm.lifetime.end.p0i8(i64 6144, i8* nonnull %2129) #9
  store i8* %2466, i8** %3, align 8
  br label %2467

2467:                                             ; preds = %2105, %2097, %1857, %2116, %2109, %2459
  %2468 = load i32, i32* %1145, align 8
  %2469 = icmp eq i32 %2468, 0
  br i1 %2469, label %2470, label %2486

2470:                                             ; preds = %2467
  %2471 = load i32, i32* %1094, align 16
  %2472 = icmp eq i32 %2471, 0
  br i1 %2472, label %2473, label %2488

2473:                                             ; preds = %2470
  %2474 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 84
  %2475 = load i32, i32* %2474, align 4
  %2476 = icmp eq i32 %2475, 0
  br i1 %2476, label %2477, label %2488

2477:                                             ; preds = %2473
  call void @vp9_adapt_coef_probs(%struct.VP9Common* %15) #9
  %2478 = load i32, i32* %46, align 4
  %2479 = icmp eq i32 %2478, 0
  br i1 %2479, label %2488, label %2480

2480:                                             ; preds = %2477
  %2481 = load i8, i8* %49, align 4
  %2482 = icmp eq i8 %2481, 0
  br i1 %2482, label %2483, label %2488

2483:                                             ; preds = %2480
  call void @vp9_adapt_mode_probs(%struct.VP9Common* %15) #9
  %2484 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 29
  %2485 = load i32, i32* %2484, align 16
  call void @vp9_adapt_mv_probs(%struct.VP9Common* %15, i32 %2485) #9
  br label %2488

2486:                                             ; preds = %2467
  %2487 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %15, i64 0, i32 0
  call void (%struct.vpx_internal_error_info*, i32, i8*, ...) @vpx_internal_error(%struct.vpx_internal_error_info* %2487, i32 7, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.4, i64 0, i64 0)) #9
  br label %2488

2488:                                             ; preds = %2477, %2480, %2473, %2470, %2483, %2486
  %2489 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 66
  %2490 = load i32, i32* %2489, align 16
  %2491 = icmp eq i32 %2490, 0
  br i1 %2491, label %2498, label %2492

2492:                                             ; preds = %2488
  %2493 = load %struct.frame_contexts*, %struct.frame_contexts** %1130, align 16
  %2494 = load i32, i32* %1132, align 8
  %2495 = zext i32 %2494 to i64
  %2496 = load i8*, i8** %1128, align 8
  %2497 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %2493, i64 %2495, i32 0, i64 0, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %2497, i8* align 4 %2496, i64 2044, i1 false)
  br label %2498

2498:                                             ; preds = %2492, %2488, %1079
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %23) #9
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %17) #9
  ret void

2499:                                             ; preds = %658
  %2500 = sext i32 %661 to i64
  %2501 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %45, i64 0, i32 3, i64 %2500, i32 0
  %2502 = load i32, i32* %2501, align 8
  %2503 = add nsw i32 %2502, 1
  store i32 %2503, i32* %2501, align 8
  br label %2504

2504:                                             ; preds = %2499, %658
  %2505 = add nuw nsw i64 %648, 2
  %2506 = icmp eq i64 %2505, 8
  br i1 %2506, label %664, label %647
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

declare i64 @vpx_rb_bytes_read(%struct.vpx_read_bit_buffer*) local_unnamed_addr #1

declare void @vpx_internal_error(%struct.vpx_internal_error_info*, i32, i8*, ...) local_unnamed_addr #1

declare void @vp9_setup_block_planes(%struct.macroblockd*, i32, i32) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

declare void @vp9_loop_filter_frame_init(%struct.VP9Common*, i32) local_unnamed_addr #1

declare void @vpx_free(i8*) local_unnamed_addr #1

declare i8* @vpx_memalign(i64, i64) local_unnamed_addr #1

declare void @vp9_loop_filter_frame_mt(%struct.yv12_buffer_config*, %struct.VP9Common*, %struct.macroblockd_plane*, i32, i32, i32, %struct.VPxWorker*, i32, %struct.VP9LfSyncData*) local_unnamed_addr #1

declare void @vp9_adapt_coef_probs(%struct.VP9Common*) local_unnamed_addr #1

declare void @vp9_adapt_mode_probs(%struct.VP9Common*) local_unnamed_addr #1

declare void @vp9_adapt_mv_probs(%struct.VP9Common*, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @read_bitdepth_colorspace_sampling(%struct.VP9Common*, %struct.vpx_read_bit_buffer*) unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 79
  %4 = load i32, i32* %3, align 4
  %5 = icmp ugt i32 %4, 1
  br i1 %5, label %6, label %10

6:                                                ; preds = %2
  %7 = tail call i32 @vpx_rb_read_bit(%struct.vpx_read_bit_buffer* %1) #9
  %8 = icmp eq i32 %7, 0
  %9 = select i1 %8, i32 10, i32 12
  br label %10

10:                                               ; preds = %2, %6
  %11 = phi i32 [ %9, %6 ], [ 8, %2 ]
  %12 = phi i32 [ 1, %6 ], [ 0, %2 ]
  %13 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 80
  store i32 %11, i32* %13, align 16
  %14 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 11
  store i32 %12, i32* %14, align 16
  %15 = tail call i32 @vpx_rb_read_literal(%struct.vpx_read_bit_buffer* %1, i32 3) #9
  %16 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 1
  store i32 %15, i32* %16, align 8
  %17 = icmp eq i32 %15, 7
  br i1 %17, label %41, label %18

18:                                               ; preds = %10
  %19 = tail call i32 @vpx_rb_read_bit(%struct.vpx_read_bit_buffer* %1) #9
  %20 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 2
  store i32 %19, i32* %20, align 4
  %21 = load i32, i32* %3, align 4
  switch i32 %21, label %38 [
    i32 1, label %22
    i32 3, label %22
  ]

22:                                               ; preds = %18, %18
  %23 = tail call i32 @vpx_rb_read_bit(%struct.vpx_read_bit_buffer* %1) #9
  %24 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 9
  store i32 %23, i32* %24, align 8
  %25 = tail call i32 @vpx_rb_read_bit(%struct.vpx_read_bit_buffer* %1) #9
  %26 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 10
  store i32 %25, i32* %26, align 4
  %27 = load i32, i32* %24, align 8
  %28 = icmp eq i32 %27, 1
  %29 = icmp eq i32 %25, 1
  %30 = and i1 %29, %28
  br i1 %30, label %31, label %33

31:                                               ; preds = %22
  %32 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 0
  tail call void (%struct.vpx_internal_error_info*, i32, i8*, ...) @vpx_internal_error(%struct.vpx_internal_error_info* %32, i32 5, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.12, i64 0, i64 0)) #9
  br label %33

33:                                               ; preds = %31, %22
  %34 = tail call i32 @vpx_rb_read_bit(%struct.vpx_read_bit_buffer* %1) #9
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %53, label %36

36:                                               ; preds = %33
  %37 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 0
  tail call void (%struct.vpx_internal_error_info*, i32, i8*, ...) @vpx_internal_error(%struct.vpx_internal_error_info* %37, i32 5, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.13, i64 0, i64 0)) #9
  br label %53

38:                                               ; preds = %18
  %39 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 9
  store i32 1, i32* %39, align 8
  %40 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 10
  store i32 1, i32* %40, align 4
  br label %53

41:                                               ; preds = %10
  %42 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 2
  store i32 1, i32* %42, align 4
  %43 = load i32, i32* %3, align 4
  switch i32 %43, label %51 [
    i32 1, label %44
    i32 3, label %44
  ]

44:                                               ; preds = %41, %41
  %45 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 9
  store i32 0, i32* %45, align 8
  %46 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 10
  store i32 0, i32* %46, align 4
  %47 = tail call i32 @vpx_rb_read_bit(%struct.vpx_read_bit_buffer* %1) #9
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %53, label %49

49:                                               ; preds = %44
  %50 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 0
  tail call void (%struct.vpx_internal_error_info*, i32, i8*, ...) @vpx_internal_error(%struct.vpx_internal_error_info* %50, i32 5, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.13, i64 0, i64 0)) #9
  br label %53

51:                                               ; preds = %41
  %52 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 0
  tail call void (%struct.vpx_internal_error_info*, i32, i8*, ...) @vpx_internal_error(%struct.vpx_internal_error_info* %52, i32 5, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.14, i64 0, i64 0)) #9
  br label %53

53:                                               ; preds = %33, %44, %51, %49, %38, %36
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @setup_frame_size(%struct.VP9Common*, %struct.vpx_read_bit_buffer*) unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 89
  %4 = load %struct.BufferPool*, %struct.BufferPool** %3, align 8
  %5 = tail call i32 @vpx_rb_read_literal(%struct.vpx_read_bit_buffer* %1, i32 16) #9
  %6 = add nsw i32 %5, 1
  %7 = tail call i32 @vpx_rb_read_literal(%struct.vpx_read_bit_buffer* %1, i32 16) #9
  %8 = add nsw i32 %7, 1
  tail call fastcc void @resize_context_buffers(%struct.VP9Common* %0, i32 %6, i32 %8)
  %9 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 3
  %10 = load i32, i32* %9, align 16
  %11 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 5
  store i32 %10, i32* %11, align 8
  %12 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 4
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 6
  store i32 %13, i32* %14, align 4
  %15 = tail call i32 @vpx_rb_read_bit(%struct.vpx_read_bit_buffer* %1) #9
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %22, label %17

17:                                               ; preds = %2
  %18 = tail call i32 @vpx_rb_read_literal(%struct.vpx_read_bit_buffer* %1, i32 16) #9
  %19 = add nsw i32 %18, 1
  store i32 %19, i32* %11, align 4
  %20 = tail call i32 @vpx_rb_read_literal(%struct.vpx_read_bit_buffer* %1, i32 16) #9
  %21 = add nsw i32 %20, 1
  store i32 %21, i32* %14, align 4
  br label %22

22:                                               ; preds = %2, %17
  %23 = load %struct.BufferPool*, %struct.BufferPool** %3, align 8
  %24 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 18
  %25 = load i32, i32* %24, align 16
  %26 = sext i32 %25 to i64
  %27 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %23, i64 0, i32 3, i64 %26, i32 8
  %28 = load i32, i32* %9, align 16
  %29 = load i32, i32* %12, align 4
  %30 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 9
  %31 = load i32, i32* %30, align 8
  %32 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 10
  %33 = load i32, i32* %32, align 4
  %34 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 11
  %35 = load i32, i32* %34, align 16
  %36 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 87
  %37 = load i32, i32* %36, align 16
  %38 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %4, i64 0, i32 3, i64 %26, i32 7
  %39 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %4, i64 0, i32 1
  %40 = load i32 (i8*, i64, %struct.vpx_codec_frame_buffer*)*, i32 (i8*, i64, %struct.vpx_codec_frame_buffer*)** %39, align 8
  %41 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %4, i64 0, i32 0
  %42 = load i8*, i8** %41, align 8
  %43 = tail call i32 @vpx_realloc_frame_buffer(%struct.yv12_buffer_config* %27, i32 %28, i32 %29, i32 %31, i32 %33, i32 %35, i32 32, i32 %37, %struct.vpx_codec_frame_buffer* %38, i32 (i8*, i64, %struct.vpx_codec_frame_buffer*)* %40, i8* %42) #9
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %47, label %45

45:                                               ; preds = %22
  %46 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 0
  tail call void (%struct.vpx_internal_error_info*, i32, i8*, ...) @vpx_internal_error(%struct.vpx_internal_error_info* %46, i32 2, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.15, i64 0, i64 0)) #9
  br label %47

47:                                               ; preds = %22, %45
  %48 = load i32, i32* %24, align 16
  %49 = sext i32 %48 to i64
  %50 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %4, i64 0, i32 3, i64 %49, i32 4
  store i8 0, i8* %50, align 8
  %51 = load i32, i32* %30, align 8
  %52 = load i32, i32* %24, align 16
  %53 = sext i32 %52 to i64
  %54 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %4, i64 0, i32 3, i64 %53, i32 8, i32 21
  store i32 %51, i32* %54, align 8
  %55 = load i32, i32* %32, align 4
  %56 = load i32, i32* %24, align 16
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %4, i64 0, i32 3, i64 %57, i32 8, i32 22
  store i32 %55, i32* %58, align 4
  %59 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 80
  %60 = load i32, i32* %59, align 16
  %61 = load i32, i32* %24, align 16
  %62 = sext i32 %61 to i64
  %63 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %4, i64 0, i32 3, i64 %62, i32 8, i32 23
  store i32 %60, i32* %63, align 8
  %64 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 1
  %65 = load i32, i32* %64, align 8
  %66 = load i32, i32* %24, align 16
  %67 = sext i32 %66 to i64
  %68 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %4, i64 0, i32 3, i64 %67, i32 8, i32 24
  store i32 %65, i32* %68, align 4
  %69 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 2
  %70 = load i32, i32* %69, align 4
  %71 = load i32, i32* %24, align 16
  %72 = sext i32 %71 to i64
  %73 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %4, i64 0, i32 3, i64 %72, i32 8, i32 25
  store i32 %70, i32* %73, align 8
  %74 = load i32, i32* %11, align 8
  %75 = load i32, i32* %24, align 16
  %76 = sext i32 %75 to i64
  %77 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %4, i64 0, i32 3, i64 %76, i32 8, i32 26
  store i32 %74, i32* %77, align 4
  %78 = load i32, i32* %14, align 4
  %79 = load i32, i32* %24, align 16
  %80 = sext i32 %79 to i64
  %81 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %4, i64 0, i32 3, i64 %80, i32 8, i32 27
  store i32 %78, i32* %81, align 8
  ret void
}

declare void @vp9_setup_scale_factors_for_frame(%struct.scale_factors*, i32, i32, i32, i32, i32) local_unnamed_addr #1

declare void @vp9_setup_past_independence(%struct.VP9Common*) local_unnamed_addr #1

declare i8* @vpx_calloc(i64, i64) local_unnamed_addr #1

; Function Attrs: nounwind
declare i32 @pthread_mutex_init(%union.pthread_mutex_t*, %union.pthread_mutexattr_t*) local_unnamed_addr #3

declare void @vp9_dec_free_row_mt_mem(%struct.RowMTWorkerData*) local_unnamed_addr #1

declare void @vp9_dec_alloc_row_mt_mem(%struct.RowMTWorkerData*, %struct.VP9Common*, i32, i32, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @resize_context_buffers(%struct.VP9Common*, i32, i32) unnamed_addr #0 {
  %4 = icmp sgt i32 %1, 16384
  %5 = icmp sgt i32 %2, 16384
  %6 = or i1 %4, %5
  br i1 %6, label %7, label %9

7:                                                ; preds = %3
  %8 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 0
  tail call void (%struct.vpx_internal_error_info*, i32, i8*, ...) @vpx_internal_error(%struct.vpx_internal_error_info* %8, i32 7, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.16, i64 0, i64 0), i32 %1, i32 %2, i32 16384, i32 16384) #9
  br label %9

9:                                                ; preds = %3, %7
  %10 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 3
  %11 = load i32, i32* %10, align 16
  %12 = icmp eq i32 %11, %1
  br i1 %12, label %13, label %17

13:                                               ; preds = %9
  %14 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 4
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %15, %2
  br i1 %16, label %38, label %17

17:                                               ; preds = %13, %9
  %18 = add nsw i32 %1, 7
  %19 = ashr i32 %18, 3
  %20 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 35
  %21 = load i32, i32* %20, align 8
  %22 = icmp sgt i32 %19, %21
  br i1 %22, label %29, label %23

23:                                               ; preds = %17
  %24 = add nsw i32 %2, 7
  %25 = ashr i32 %24, 3
  %26 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 33
  %27 = load i32, i32* %26, align 16
  %28 = icmp sgt i32 %25, %27
  br i1 %28, label %29, label %35

29:                                               ; preds = %23, %17
  %30 = tail call i32 @vp9_alloc_context_buffers(%struct.VP9Common* %0, i32 %1, i32 %2) #9
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %36, label %32

32:                                               ; preds = %29
  store i32 0, i32* %10, align 16
  %33 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 4
  store i32 0, i32* %33, align 4
  %34 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 0
  tail call void (%struct.vpx_internal_error_info*, i32, i8*, ...) @vpx_internal_error(%struct.vpx_internal_error_info* %34, i32 2, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.17, i64 0, i64 0)) #9
  br label %36

35:                                               ; preds = %23
  tail call void @vp9_set_mb_mi(%struct.VP9Common* %0, i32 %1, i32 %2) #9
  br label %36

36:                                               ; preds = %29, %32, %35
  tail call void @vp9_init_context_buffers(%struct.VP9Common* %0) #9
  store i32 %1, i32* %10, align 16
  %37 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 4
  store i32 %2, i32* %37, align 4
  br label %38

38:                                               ; preds = %13, %36
  %39 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 14
  %40 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %39, align 8
  %41 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %40, i64 0, i32 1
  %42 = load %struct.MV_REF*, %struct.MV_REF** %41, align 8
  %43 = icmp eq %struct.MV_REF* %42, null
  %44 = bitcast %struct.MV_REF* %42 to i8*
  br i1 %43, label %57, label %45

45:                                               ; preds = %38
  %46 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 33
  %47 = load i32, i32* %46, align 16
  %48 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %40, i64 0, i32 2
  %49 = load i32, i32* %48, align 8
  %50 = icmp sgt i32 %47, %49
  br i1 %50, label %57, label %51

51:                                               ; preds = %45
  %52 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 35
  %53 = load i32, i32* %52, align 8
  %54 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %40, i64 0, i32 3
  %55 = load i32, i32* %54, align 4
  %56 = icmp sgt i32 %53, %55
  br i1 %56, label %57, label %80

57:                                               ; preds = %51, %45, %38
  tail call void @vpx_free(i8* %44) #9
  %58 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 33
  %59 = load i32, i32* %58, align 16
  %60 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %39, align 8
  %61 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %60, i64 0, i32 2
  store i32 %59, i32* %61, align 8
  %62 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 35
  %63 = load i32, i32* %62, align 8
  %64 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %39, align 8
  %65 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %64, i64 0, i32 3
  store i32 %63, i32* %65, align 4
  %66 = load i32, i32* %58, align 16
  %67 = load i32, i32* %62, align 8
  %68 = mul nsw i32 %67, %66
  %69 = sext i32 %68 to i64
  %70 = tail call i8* @vpx_calloc(i64 %69, i64 12) #9
  %71 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %39, align 8
  %72 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %71, i64 0, i32 1
  %73 = bitcast %struct.MV_REF** %72 to i8**
  store i8* %70, i8** %73, align 8
  %74 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %39, align 8
  %75 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %74, i64 0, i32 1
  %76 = load %struct.MV_REF*, %struct.MV_REF** %75, align 8
  %77 = icmp eq %struct.MV_REF* %76, null
  br i1 %77, label %78, label %80

78:                                               ; preds = %57
  %79 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 0
  tail call void (%struct.vpx_internal_error_info*, i32, i8*, ...) @vpx_internal_error(%struct.vpx_internal_error_info* %79, i32 2, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.18, i64 0, i64 0)) #9
  br label %80

80:                                               ; preds = %78, %57, %51
  ret void
}

declare i32 @vpx_realloc_frame_buffer(%struct.yv12_buffer_config*, i32, i32, i32, i32, i32, i32, i32, %struct.vpx_codec_frame_buffer*, i32 (i8*, i64, %struct.vpx_codec_frame_buffer*)*, i8*) local_unnamed_addr #1

declare i32 @vp9_alloc_context_buffers(%struct.VP9Common*, i32, i32) local_unnamed_addr #1

declare void @vp9_set_mb_mi(%struct.VP9Common*, i32, i32) local_unnamed_addr #1

declare void @vp9_init_context_buffers(%struct.VP9Common*) local_unnamed_addr #1

declare i32 @vpx_rb_read_signed_literal(%struct.vpx_read_bit_buffer*, i32) local_unnamed_addr #1

declare void @vp9_clearall_segfeatures(%struct.segmentation*) local_unnamed_addr #1

declare void @vp9_enable_segfeature(%struct.segmentation*, i32, i32) local_unnamed_addr #1

declare i32 @vp9_seg_feature_data_max(i32) local_unnamed_addr #1

declare i32 @vp9_is_segfeature_signed(i32) local_unnamed_addr #1

declare void @vp9_set_segdata(%struct.segmentation*, i32, i32, i32) local_unnamed_addr #1

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #4

declare i32 @vp9_get_qindex(%struct.segmentation*, i32, i32) local_unnamed_addr #1

declare signext i16 @vp9_dc_quant(i32, i32, i32) local_unnamed_addr #1

declare signext i16 @vp9_ac_quant(i32, i32, i32) local_unnamed_addr #1

declare void @vp9_get_tile_n_bits(i32, i32*, i32*) local_unnamed_addr #1

declare void @vp9_jobq_init(%struct.JobQueueRowMt*, i8*, i64) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define internal void @error_handler(i8*) #0 {
  %2 = bitcast i8* %0 to %struct.vpx_internal_error_info*
  tail call void (%struct.vpx_internal_error_info*, i32, i8*, ...) @vpx_internal_error(%struct.vpx_internal_error_info* %2, i32 7, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.25, i64 0, i64 0)) #9
  ret void
}

declare i32 @vpx_reader_init(%struct.vpx_reader*, i8*, i64, void (i8*, i8*, i8*, i32)*, i8*) local_unnamed_addr #1

declare void @vp9_diff_update_prob(%struct.vpx_reader*, i8*) local_unnamed_addr #1

declare void @vp9_setup_compound_reference_mode(%struct.VP9Common*) local_unnamed_addr #1

declare void @vpx_reader_fill(%struct.vpx_reader*) local_unnamed_addr #1

declare i32 @vp9_compound_reference_allowed(%struct.VP9Common*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @update_mv_probs(i8* nocapture, i32, %struct.vpx_reader*) unnamed_addr #0 {
  %4 = icmp sgt i32 %1, 0
  br i1 %4, label %5, label %91

5:                                                ; preds = %3
  %6 = getelementptr inbounds %struct.vpx_reader, %struct.vpx_reader* %2, i64 0, i32 1
  %7 = getelementptr inbounds %struct.vpx_reader, %struct.vpx_reader* %2, i64 0, i32 2
  %8 = getelementptr inbounds %struct.vpx_reader, %struct.vpx_reader* %2, i64 0, i32 0
  %9 = zext i32 %1 to i64
  br label %10

10:                                               ; preds = %88, %5
  %11 = phi i64 [ 0, %5 ], [ %89, %88 ]
  %12 = load i32, i32* %6, align 8
  %13 = mul i32 %12, 252
  %14 = add i32 %13, 4
  %15 = lshr i32 %14, 8
  %16 = load i32, i32* %7, align 4
  %17 = icmp slt i32 %16, 0
  br i1 %17, label %18, label %20

18:                                               ; preds = %10
  tail call void @vpx_reader_fill(%struct.vpx_reader* %2) #9
  %19 = load i32, i32* %7, align 4
  br label %20

20:                                               ; preds = %18, %10
  %21 = phi i32 [ %19, %18 ], [ %16, %10 ]
  %22 = load i64, i64* %8, align 8
  %23 = zext i32 %15 to i64
  %24 = shl i64 %23, 56
  %25 = icmp ult i64 %22, %24
  br i1 %25, label %30, label %26

26:                                               ; preds = %20
  %27 = load i32, i32* %6, align 8
  %28 = sub i32 %27, %15
  %29 = sub i64 %22, %24
  br label %30

30:                                               ; preds = %20, %26
  %31 = phi i64 [ %29, %26 ], [ %22, %20 ]
  %32 = phi i32 [ %28, %26 ], [ %15, %20 ]
  %33 = phi i1 [ false, %26 ], [ true, %20 ]
  %34 = and i32 %32, 255
  %35 = zext i32 %34 to i64
  %36 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %35
  %37 = load i8, i8* %36, align 1
  %38 = zext i8 %37 to i32
  %39 = shl i32 %32, %38
  %40 = zext i8 %37 to i64
  %41 = shl i64 %31, %40
  %42 = sub nsw i32 %21, %38
  store i64 %41, i64* %8, align 8
  store i32 %42, i32* %7, align 4
  store i32 %39, i32* %6, align 8
  br i1 %33, label %88, label %43

43:                                               ; preds = %30, %67
  %44 = phi i64 [ %78, %67 ], [ %41, %30 ]
  %45 = phi i32 [ %79, %67 ], [ %42, %30 ]
  %46 = phi i32 [ %76, %67 ], [ %39, %30 ]
  %47 = phi i32 [ %49, %67 ], [ 7, %30 ]
  %48 = phi i32 [ %81, %67 ], [ 0, %30 ]
  %49 = add nsw i32 %47, -1
  %50 = shl i32 %46, 7
  %51 = add i32 %50, 128
  %52 = lshr i32 %51, 8
  %53 = icmp slt i32 %45, 0
  br i1 %53, label %54, label %57

54:                                               ; preds = %43
  tail call void @vpx_reader_fill(%struct.vpx_reader* %2) #9
  %55 = load i32, i32* %7, align 4
  %56 = load i64, i64* %8, align 8
  br label %57

57:                                               ; preds = %54, %43
  %58 = phi i64 [ %56, %54 ], [ %44, %43 ]
  %59 = phi i32 [ %55, %54 ], [ %45, %43 ]
  %60 = zext i32 %52 to i64
  %61 = shl i64 %60, 56
  %62 = icmp ult i64 %58, %61
  br i1 %62, label %67, label %63

63:                                               ; preds = %57
  %64 = load i32, i32* %6, align 8
  %65 = sub i32 %64, %52
  %66 = sub i64 %58, %61
  br label %67

67:                                               ; preds = %63, %57
  %68 = phi i64 [ %66, %63 ], [ %58, %57 ]
  %69 = phi i32 [ %65, %63 ], [ %52, %57 ]
  %70 = phi i32 [ 1, %63 ], [ 0, %57 ]
  %71 = and i32 %69, 255
  %72 = zext i32 %71 to i64
  %73 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %72
  %74 = load i8, i8* %73, align 1
  %75 = zext i8 %74 to i32
  %76 = shl i32 %69, %75
  %77 = zext i8 %74 to i64
  %78 = shl i64 %68, %77
  %79 = sub nsw i32 %59, %75
  store i64 %78, i64* %8, align 8
  store i32 %79, i32* %7, align 4
  store i32 %76, i32* %6, align 8
  %80 = shl i32 %70, %49
  %81 = or i32 %80, %48
  %82 = icmp eq i32 %49, 0
  br i1 %82, label %83, label %43

83:                                               ; preds = %67
  %84 = trunc i32 %81 to i8
  %85 = shl i8 %84, 1
  %86 = or i8 %85, 1
  %87 = getelementptr inbounds i8, i8* %0, i64 %11
  store i8 %86, i8* %87, align 1
  br label %88

88:                                               ; preds = %30, %83
  %89 = add nuw nsw i64 %11, 1
  %90 = icmp eq i64 %89, %9
  br i1 %90, label %91, label %10

91:                                               ; preds = %88, %3
  ret void
}

declare %struct.VPxWorkerInterface* @vpx_get_worker_interface() local_unnamed_addr #1

; Function Attrs: inlinehint nounwind ssp uwtable
define internal fastcc void @init_mt(%struct.VP9Decoder*) unnamed_addr #5 {
  %2 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1
  %3 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 11
  %4 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 35
  %5 = load i32, i32* %4, align 8
  %6 = add nsw i32 %5, 7
  %7 = and i32 %6, -8
  %8 = tail call %struct.VPxWorkerInterface* @vpx_get_worker_interface() #9
  %9 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 9
  %10 = load i32, i32* %9, align 16
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %12, label %48

12:                                               ; preds = %1
  %13 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 14
  %14 = load i32, i32* %13, align 16
  %15 = sext i32 %14 to i64
  %16 = mul nsw i64 %15, 48
  %17 = tail call i8* @vpx_malloc(i64 %16) #9
  %18 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 6
  %19 = bitcast %struct.VPxWorker** %18 to i8**
  store i8* %17, i8** %19, align 16
  %20 = icmp eq i8* %17, null
  br i1 %20, label %21, label %23

21:                                               ; preds = %12
  %22 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %2, i64 0, i32 0
  tail call void (%struct.vpx_internal_error_info*, i32, i8*, ...) @vpx_internal_error(%struct.vpx_internal_error_info* %22, i32 2, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.27, i64 0, i64 0)) #9
  br label %23

23:                                               ; preds = %12, %21
  %24 = icmp sgt i32 %14, 0
  br i1 %24, label %25, label %48

25:                                               ; preds = %23
  %26 = getelementptr inbounds %struct.VPxWorkerInterface, %struct.VPxWorkerInterface* %8, i64 0, i32 0
  %27 = add nsw i32 %14, -1
  %28 = getelementptr inbounds %struct.VPxWorkerInterface, %struct.VPxWorkerInterface* %8, i64 0, i32 1
  %29 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %2, i64 0, i32 0
  %30 = sext i32 %27 to i64
  %31 = zext i32 %14 to i64
  br label %32

32:                                               ; preds = %45, %25
  %33 = phi i64 [ 0, %25 ], [ %46, %45 ]
  %34 = load %struct.VPxWorker*, %struct.VPxWorker** %18, align 16
  %35 = getelementptr inbounds %struct.VPxWorker, %struct.VPxWorker* %34, i64 %33
  %36 = load i32, i32* %9, align 16
  %37 = add nsw i32 %36, 1
  store i32 %37, i32* %9, align 16
  %38 = load void (%struct.VPxWorker*)*, void (%struct.VPxWorker*)** %26, align 8
  tail call void %38(%struct.VPxWorker* %35) #9
  %39 = icmp slt i64 %33, %30
  br i1 %39, label %40, label %45

40:                                               ; preds = %32
  %41 = load i32 (%struct.VPxWorker*)*, i32 (%struct.VPxWorker*)** %28, align 8
  %42 = tail call i32 %41(%struct.VPxWorker* %35) #9
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %44, label %45

44:                                               ; preds = %40
  tail call void (%struct.vpx_internal_error_info*, i32, i8*, ...) @vpx_internal_error(%struct.vpx_internal_error_info* %29, i32 1, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.28, i64 0, i64 0)) #9
  br label %45

45:                                               ; preds = %40, %44, %32
  %46 = add nuw nsw i64 %33, 1
  %47 = icmp eq i64 %46, %31
  br i1 %47, label %48, label %32

48:                                               ; preds = %45, %23, %1
  %49 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 19
  %50 = load i32, i32* %49, align 4
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %52, label %56

52:                                               ; preds = %48
  %53 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 18
  %54 = load i32, i32* %53, align 16
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %66, label %56

56:                                               ; preds = %52, %48
  %57 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 68, i32 0
  %58 = load i32, i32* %57, align 8
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %66, label %60

60:                                               ; preds = %56
  %61 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 88
  %62 = load i32, i32* %61, align 4
  %63 = icmp eq i32 %62, 0
  br i1 %63, label %64, label %66

64:                                               ; preds = %60
  %65 = load i32, i32* %9, align 16
  tail call void @vp9_lpf_mt_init(%struct.VP9LfSyncData* %3, %struct.VP9Common* %2, i32 %58, i32 %65) #9
  br label %66

66:                                               ; preds = %60, %56, %52, %64
  %67 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 91
  %68 = load i8*, i8** %67, align 8
  %69 = sext i32 %7 to i64
  %70 = mul nsw i64 %69, 6
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %68, i8 0, i64 %70, i1 false)
  %71 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 90
  %72 = load i8*, i8** %71, align 16
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %72, i8 0, i64 %69, i1 false)
  tail call void @vp9_reset_lfm(%struct.VP9Common* %2) #9
  ret void
}

declare void @vp9_loop_filter_data_reset(%struct.LoopFilterWorkerData*, %struct.yv12_buffer_config*, %struct.VP9Common*, %struct.macroblockd_plane*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define internal i32 @row_decode_worker_hook(i8* nocapture readonly, i8* nocapture readonly) #0 {
  %3 = alloca %struct.Job, align 4
  %4 = alloca %struct.Job, align 4
  %5 = alloca i32, align 4
  %6 = alloca %struct.TileWorkerData*, align 8
  %7 = alloca %struct.Job, align 4
  %8 = alloca %struct.Job, align 4
  %9 = bitcast i8* %0 to %struct.VP9Decoder**
  %10 = load %struct.VP9Decoder*, %struct.VP9Decoder** %9, align 8
  %11 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %10, i64 0, i32 1
  %12 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %10, i64 0, i32 20
  %13 = load %struct.RowMTWorkerData*, %struct.RowMTWorkerData** %12, align 8
  %14 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %10, i64 0, i32 1, i32 35
  %15 = load i32, i32* %14, align 8
  %16 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %10, i64 0, i32 1, i32 33
  %17 = load i32, i32* %16, align 16
  %18 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %10, i64 0, i32 1, i32 85
  %19 = load i32, i32* %18, align 8
  %20 = bitcast %struct.Job* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %20) #9
  %21 = getelementptr inbounds %struct.Job, %struct.Job* %4, i64 0, i32 0
  store i32 -1431655766, i32* %21, align 4
  %22 = getelementptr inbounds %struct.Job, %struct.Job* %4, i64 0, i32 1
  store i32 -1431655766, i32* %22, align 4
  %23 = getelementptr inbounds %struct.Job, %struct.Job* %4, i64 0, i32 2
  store i32 -1431655766, i32* %23, align 4
  %24 = getelementptr inbounds i8, i8* %0, i64 8
  %25 = bitcast i8* %24 to %struct.LoopFilterWorkerData**
  %26 = load %struct.LoopFilterWorkerData*, %struct.LoopFilterWorkerData** %25, align 8
  %27 = getelementptr inbounds i8, i8* %0, i64 16
  %28 = bitcast i8* %27 to %struct.VP9LfSyncData**
  %29 = load %struct.VP9LfSyncData*, %struct.VP9LfSyncData** %28, align 8
  %30 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %30)
  store volatile i32 -1431655766, i32* %5, align 4
  store volatile i32 0, i32* %5, align 4
  %31 = bitcast %struct.TileWorkerData** %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %31)
  store volatile %struct.TileWorkerData* inttoptr (i64 -6148914691236517206 to %struct.TileWorkerData*), %struct.TileWorkerData** %6, align 8
  store volatile %struct.TileWorkerData* null, %struct.TileWorkerData** %6, align 8
  %32 = getelementptr inbounds %struct.RowMTWorkerData, %struct.RowMTWorkerData* %13, i64 0, i32 7
  %33 = call i32 @vp9_jobq_dequeue(%struct.JobQueueRowMt* %32, i8* nonnull %20, i64 12, i32 1) #9
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %35, label %573

35:                                               ; preds = %2
  %36 = add nsw i32 %17, 7
  %37 = ashr i32 %36, 3
  %38 = add nsw i32 %15, 7
  %39 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %10, i64 0, i32 7
  %40 = bitcast %struct.VP9Decoder* %10 to i8*
  %41 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %10, i64 0, i32 1, i32 84
  %42 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %10, i64 0, i32 12
  %43 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %10, i64 0, i32 13
  %44 = bitcast i8* %1 to i64*
  %45 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %10, i64 0, i32 1, i32 91
  %46 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %10, i64 0, i32 1, i32 43, i64 0
  %47 = bitcast [2 x i16]* %46 to i8*
  %48 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %10, i64 0, i32 1, i32 73
  %49 = bitcast %struct.frame_contexts** %48 to i64*
  %50 = bitcast i8** %45 to i64*
  %51 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %10, i64 0, i32 1, i32 42, i64 0
  %52 = bitcast [2 x i16]* %51 to i8*
  %53 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %10, i64 0, i32 1, i32 90
  %54 = bitcast i8** %53 to i64*
  %55 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %10, i64 0, i32 1, i32 36
  %56 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %11, i64 0, i32 0
  %57 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %10, i64 0, i32 1, i32 23
  %58 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %10, i64 0, i32 1, i32 27
  %59 = bitcast %struct.Job* %7 to i8*
  %60 = getelementptr inbounds %struct.Job, %struct.Job* %7, i64 0, i32 0
  %61 = getelementptr inbounds %struct.Job, %struct.Job* %7, i64 0, i32 1
  %62 = getelementptr inbounds %struct.Job, %struct.Job* %7, i64 0, i32 2
  %63 = bitcast %struct.Job* %8 to i8*
  %64 = getelementptr inbounds %struct.Job, %struct.Job* %8, i64 0, i32 0
  %65 = getelementptr inbounds %struct.Job, %struct.Job* %8, i64 0, i32 1
  %66 = getelementptr inbounds %struct.Job, %struct.Job* %8, i64 0, i32 2
  %67 = add nsw i32 %37, -1
  %68 = ashr i32 %38, 3
  %69 = getelementptr inbounds %struct.RowMTWorkerData, %struct.RowMTWorkerData* %13, i64 0, i32 12
  %70 = getelementptr inbounds %struct.RowMTWorkerData, %struct.RowMTWorkerData* %13, i64 0, i32 4
  %71 = getelementptr inbounds %struct.RowMTWorkerData, %struct.RowMTWorkerData* %13, i64 0, i32 13
  %72 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %10, i64 0, i32 1, i32 68, i32 0
  %73 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %10, i64 0, i32 1, i32 88
  %74 = getelementptr inbounds %struct.VP9LfSyncData, %struct.VP9LfSyncData* %29, i64 0, i32 8
  %75 = getelementptr inbounds %struct.VP9LfSyncData, %struct.VP9LfSyncData* %29, i64 0, i32 12
  %76 = getelementptr inbounds %struct.VP9LfSyncData, %struct.VP9LfSyncData* %29, i64 0, i32 9
  %77 = getelementptr inbounds %struct.VP9LfSyncData, %struct.VP9LfSyncData* %29, i64 0, i32 11
  %78 = bitcast %struct.Job* %3 to i8*
  %79 = getelementptr inbounds %struct.Job, %struct.Job* %3, i64 0, i32 0
  %80 = getelementptr inbounds %struct.Job, %struct.Job* %3, i64 0, i32 1
  %81 = getelementptr inbounds %struct.Job, %struct.Job* %3, i64 0, i32 2
  %82 = getelementptr inbounds %struct.LoopFilterWorkerData, %struct.LoopFilterWorkerData* %26, i64 0, i32 3
  %83 = getelementptr inbounds %struct.LoopFilterWorkerData, %struct.LoopFilterWorkerData* %26, i64 0, i32 4
  br label %84

84:                                               ; preds = %35, %570
  %85 = load i32, i32* %21, align 4
  %86 = load i32, i32* %23, align 4
  switch i32 %86, label %570 [
    i32 2, label %87
    i32 1, label %98
    i32 0, label %391
  ]

87:                                               ; preds = %84
  store i32 %85, i32* %82, align 8
  %88 = add nsw i32 %85, 8
  store i32 %88, i32* %83, align 4
  %89 = load i32, i32* %72, align 8
  %90 = icmp eq i32 %89, 0
  br i1 %90, label %570, label %91

91:                                               ; preds = %87
  %92 = load i32, i32* %73, align 4
  %93 = icmp eq i32 %92, 0
  br i1 %93, label %94, label %570

94:                                               ; preds = %91
  %95 = load i32, i32* %16, align 16
  %96 = icmp slt i32 %85, %95
  br i1 %96, label %97, label %570

97:                                               ; preds = %94
  call void @vp9_loopfilter_job(%struct.LoopFilterWorkerData* %26, %struct.VP9LfSyncData* %29) #9
  br label %570

98:                                               ; preds = %84
  %99 = ashr i32 %85, 3
  %100 = icmp eq i32 %67, %99
  %101 = load volatile %struct.TileWorkerData*, %struct.TileWorkerData** %6, align 8
  %102 = icmp eq %struct.TileWorkerData* %101, null
  br i1 %102, label %103, label %109

103:                                              ; preds = %98
  %104 = call i8* @vpx_memalign(i64 32, i64 69584) #9
  %105 = bitcast i8* %104 to %struct.TileWorkerData*
  store volatile %struct.TileWorkerData* %105, %struct.TileWorkerData** %6, align 8
  %106 = load volatile %struct.TileWorkerData*, %struct.TileWorkerData** %6, align 8
  %107 = icmp eq %struct.TileWorkerData* %106, null
  br i1 %107, label %108, label %109

108:                                              ; preds = %103
  call void (%struct.vpx_internal_error_info*, i32, i8*, ...) @vpx_internal_error(%struct.vpx_internal_error_info* %56, i32 2, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29, i64 0, i64 0)) #9
  br label %109

109:                                              ; preds = %103, %98, %108
  %110 = load volatile %struct.TileWorkerData*, %struct.TileWorkerData** %6, align 8
  %111 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %110, i64 0, i32 8
  %112 = bitcast %struct.macroblockd* %111 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %112, i8* align 16 %40, i64 656, i1 false)
  %113 = load volatile %struct.TileWorkerData*, %struct.TileWorkerData** %6, align 8
  %114 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %113, i64 0, i32 8, i32 4
  %115 = load i32, i32* %22, align 4
  call void @vp9_tile_init(%struct.TileInfo* %114, %struct.VP9Common* %11, i32 0, i32 %115) #9
  %116 = load volatile %struct.TileWorkerData*, %struct.TileWorkerData** %6, align 8
  %117 = load volatile %struct.TileWorkerData*, %struct.TileWorkerData** %6, align 8
  %118 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %117, i64 0, i32 9, i64 0
  %119 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %116, i64 0, i32 8, i32 16
  %120 = bitcast %struct.frame_contexts** %119 to i64*
  %121 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %116, i64 0, i32 8, i32 0, i64 0, i32 0
  store i32* %118, i32** %121, align 8
  %122 = load i64, i64* %50, align 8
  %123 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %116, i64 0, i32 8, i32 19, i64 0
  %124 = bitcast i8** %123 to i64*
  store i64 %122, i64* %124, align 8
  %125 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %116, i64 0, i32 8, i32 0, i64 0, i32 7, i64 0
  %126 = bitcast [2 x i16]* %125 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %126, i8* align 4 %52, i64 32, i1 false) #9
  %127 = load i64, i64* %49, align 8
  store i64 %127, i64* %120, align 8
  %128 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %116, i64 0, i32 8, i32 0, i64 1, i32 0
  store i32* %118, i32** %128, align 8
  %129 = load i8*, i8** %45, align 8
  %130 = load i32, i32* %14, align 8
  %131 = add nsw i32 %130, 7
  %132 = and i32 %131, -8
  %133 = sext i32 %132 to i64
  %134 = shl nsw i64 %133, 1
  %135 = getelementptr inbounds i8, i8* %129, i64 %134
  %136 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %116, i64 0, i32 8, i32 19, i64 1
  store i8* %135, i8** %136, align 8
  %137 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %116, i64 0, i32 8, i32 0, i64 1, i32 7, i64 0
  %138 = bitcast [2 x i16]* %137 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %138, i8* align 4 %47, i64 32, i1 false) #9
  %139 = load i64, i64* %49, align 8
  store i64 %139, i64* %120, align 8
  %140 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %116, i64 0, i32 8, i32 0, i64 2, i32 0
  store i32* %118, i32** %140, align 8
  %141 = load i8*, i8** %45, align 8
  %142 = load i32, i32* %14, align 8
  %143 = add nsw i32 %142, 7
  %144 = and i32 %143, -8
  %145 = sext i32 %144 to i64
  %146 = shl nsw i64 %145, 2
  %147 = getelementptr inbounds i8, i8* %141, i64 %146
  %148 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %116, i64 0, i32 8, i32 19, i64 2
  store i8* %147, i8** %148, align 8
  %149 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %116, i64 0, i32 8, i32 0, i64 2, i32 7, i64 0
  %150 = bitcast [2 x i16]* %149 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %150, i8* align 4 %47, i64 32, i1 false) #9
  %151 = load i64, i64* %49, align 8
  store i64 %151, i64* %120, align 8
  %152 = load i64, i64* %54, align 16
  %153 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %116, i64 0, i32 8, i32 21
  %154 = bitcast i8** %153 to i64*
  store i64 %152, i64* %154, align 8
  %155 = load i32, i32* %55, align 4
  %156 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %116, i64 0, i32 8, i32 5
  store i32 %155, i32* %156, align 8
  %157 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %116, i64 0, i32 8, i32 26
  store %struct.vpx_internal_error_info* %56, %struct.vpx_internal_error_info** %157, align 8
  %158 = load i32, i32* %57, align 4
  %159 = icmp eq i32 %158, 0
  br i1 %159, label %166, label %160

160:                                              ; preds = %109
  %161 = load i8, i8* %58, align 4
  %162 = icmp eq i8 %161, 0
  br i1 %162, label %163, label %166

163:                                              ; preds = %160
  %164 = load %struct.frame_contexts*, %struct.frame_contexts** %48, align 8
  %165 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %164, i64 0, i32 2, i64 0
  br label %166

166:                                              ; preds = %109, %160, %163
  %167 = phi [3 x i8]* [ %165, %163 ], [ getelementptr inbounds ([16 x [3 x i8]], [16 x [3 x i8]]* @vp9_kf_partition_probs, i64 0, i64 0), %160 ], [ getelementptr inbounds ([16 x [3 x i8]], [16 x [3 x i8]]* @vp9_kf_partition_probs, i64 0, i64 0), %109 ]
  %168 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %116, i64 0, i32 8, i32 11
  store [3 x i8]* %167, [3 x i8]** %168, align 8
  %169 = load volatile %struct.TileWorkerData*, %struct.TileWorkerData** %6, align 8
  %170 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %169, i64 0, i32 8, i32 4, i32 2
  %171 = load i32, i32* %170, align 8
  %172 = load volatile %struct.TileWorkerData*, %struct.TileWorkerData** %6, align 8
  %173 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %172, i64 0, i32 8, i32 4, i32 3
  %174 = load i32, i32* %173, align 4
  %175 = load volatile %struct.TileWorkerData*, %struct.TileWorkerData** %6, align 8
  %176 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %175, i64 0, i32 11, i32 4, i64 0
  %177 = call i32 @_setjmp(%struct.__jmp_buf_tag* %176) #10
  %178 = icmp eq i32 %177, 0
  %179 = load volatile %struct.TileWorkerData*, %struct.TileWorkerData** %6, align 8
  %180 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %179, i64 0, i32 11, i32 3
  br i1 %178, label %221, label %181

181:                                              ; preds = %166
  store i32 0, i32* %180, align 8
  store volatile i32 1, i32* %5, align 4
  %182 = icmp slt i32 %171, %174
  br i1 %182, label %183, label %207

183:                                              ; preds = %181
  %184 = mul nsw i32 %99, %68
  %185 = shl i32 %99, %19
  br label %186

186:                                              ; preds = %183, %186
  %187 = phi i32 [ %171, %183 ], [ %205, %186 ]
  %188 = ashr i32 %187, 3
  %189 = add nsw i32 %188, %184
  %190 = load i32, i32* %22, align 4
  %191 = add nsw i32 %190, %185
  %192 = load %union.pthread_mutex_t*, %union.pthread_mutex_t** %69, align 8
  %193 = sext i32 %191 to i64
  %194 = getelementptr inbounds %union.pthread_mutex_t, %union.pthread_mutex_t* %192, i64 %193
  %195 = call i32 @pthread_mutex_lock(%union.pthread_mutex_t* %194) #9
  %196 = load i8*, i8** %70, align 8
  %197 = sext i32 %189 to i64
  %198 = getelementptr inbounds i8, i8* %196, i64 %197
  store i8 1, i8* %198, align 1
  %199 = load %union.pthread_cond_t*, %union.pthread_cond_t** %71, align 8
  %200 = getelementptr inbounds %union.pthread_cond_t, %union.pthread_cond_t* %199, i64 %193
  %201 = call i32 @pthread_cond_signal(%union.pthread_cond_t* %200) #9
  %202 = load %union.pthread_mutex_t*, %union.pthread_mutex_t** %69, align 8
  %203 = getelementptr inbounds %union.pthread_mutex_t, %union.pthread_mutex_t* %202, i64 %193
  %204 = call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %203) #9
  %205 = add nsw i32 %187, 8
  %206 = icmp slt i32 %205, %174
  br i1 %206, label %186, label %207

207:                                              ; preds = %186, %181
  br i1 %100, label %208, label %570

208:                                              ; preds = %207
  %209 = load %struct.RowMTWorkerData*, %struct.RowMTWorkerData** %12, align 8
  %210 = load i32, i32* %18, align 8
  %211 = shl i32 1, %210
  %212 = getelementptr inbounds %struct.RowMTWorkerData, %struct.RowMTWorkerData* %209, i64 0, i32 11
  %213 = call i32 @pthread_mutex_lock(%union.pthread_mutex_t* %212) #9
  %214 = getelementptr inbounds %struct.RowMTWorkerData, %struct.RowMTWorkerData* %209, i64 0, i32 9
  %215 = load i32, i32* %214, align 8
  %216 = add nsw i32 %215, 1
  store i32 %216, i32* %214, align 8
  %217 = icmp eq i32 %211, %216
  %218 = call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %212) #9
  br i1 %217, label %219, label %570

219:                                              ; preds = %208
  %220 = getelementptr inbounds %struct.RowMTWorkerData, %struct.RowMTWorkerData* %209, i64 0, i32 7
  call void @vp9_jobq_terminate(%struct.JobQueueRowMt* %220) #9
  br label %570

221:                                              ; preds = %166
  store i32 1, i32* %180, align 8
  %222 = load volatile %struct.TileWorkerData*, %struct.TileWorkerData** %6, align 8
  %223 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %222, i64 0, i32 11
  %224 = load volatile %struct.TileWorkerData*, %struct.TileWorkerData** %6, align 8
  %225 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %224, i64 0, i32 8, i32 26
  store %struct.vpx_internal_error_info* %223, %struct.vpx_internal_error_info** %225, align 16
  %226 = load volatile %struct.TileWorkerData*, %struct.TileWorkerData** %6, align 8
  %227 = load i32, i32* %22, align 4
  %228 = load %struct.RowMTWorkerData*, %struct.RowMTWorkerData** %12, align 8
  %229 = load i32, i32* %18, align 8
  %230 = shl i32 1, %229
  %231 = load i32, i32* %14, align 8
  %232 = add nsw i32 %231, 7
  %233 = ashr i32 %232, 3
  %234 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %226, i64 0, i32 8, i32 4, i32 2
  %235 = load i32, i32* %234, align 8
  %236 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %226, i64 0, i32 8, i32 4, i32 3
  %237 = load i32, i32* %236, align 4
  %238 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %226, i64 0, i32 8, i32 20, i64 0, i64 0
  call void @llvm.memset.p0i8.i64(i8* align 16 %238, i8 0, i64 48, i1 false) #9
  %239 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %226, i64 0, i32 8, i32 22, i64 0
  %240 = bitcast i8* %239 to i64*
  store i64 0, i64* %240, align 8
  %241 = icmp slt i32 %235, %237
  br i1 %241, label %242, label %371

242:                                              ; preds = %221
  %243 = mul nsw i32 %233, %99
  %244 = icmp eq i32 %99, 0
  %245 = add nsw i32 %99, -1
  %246 = mul nsw i32 %233, %245
  %247 = shl i32 %245, %229
  %248 = add nsw i32 %247, %227
  %249 = getelementptr inbounds %struct.RowMTWorkerData, %struct.RowMTWorkerData* %228, i64 0, i32 4
  %250 = getelementptr inbounds %struct.RowMTWorkerData, %struct.RowMTWorkerData* %228, i64 0, i32 12
  %251 = sext i32 %248 to i64
  %252 = getelementptr inbounds %struct.RowMTWorkerData, %struct.RowMTWorkerData* %228, i64 0, i32 13
  %253 = getelementptr inbounds %struct.RowMTWorkerData, %struct.RowMTWorkerData* %228, i64 0, i32 2
  %254 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %226, i64 0, i32 8, i32 27
  %255 = sext i32 %99 to i64
  %256 = icmp sgt i32 %85, 7
  %257 = add nsw i32 %85, -8
  %258 = getelementptr inbounds %struct.RowMTWorkerData, %struct.RowMTWorkerData* %228, i64 0, i32 7
  %259 = shl i32 %99, %229
  %260 = add nsw i32 %259, %227
  %261 = sext i32 %260 to i64
  %262 = getelementptr inbounds %struct.RowMTWorkerData, %struct.RowMTWorkerData* %228, i64 0, i32 1, i64 0
  %263 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %226, i64 0, i32 8, i32 0, i64 0, i32 13
  %264 = getelementptr inbounds %struct.RowMTWorkerData, %struct.RowMTWorkerData* %228, i64 0, i32 3, i64 0
  %265 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %226, i64 0, i32 8, i32 0, i64 0, i32 0
  %266 = getelementptr inbounds %struct.RowMTWorkerData, %struct.RowMTWorkerData* %228, i64 0, i32 1, i64 1
  %267 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %226, i64 0, i32 8, i32 0, i64 1, i32 13
  %268 = getelementptr inbounds %struct.RowMTWorkerData, %struct.RowMTWorkerData* %228, i64 0, i32 3, i64 1
  %269 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %226, i64 0, i32 8, i32 0, i64 1, i32 0
  %270 = getelementptr inbounds %struct.RowMTWorkerData, %struct.RowMTWorkerData* %228, i64 0, i32 1, i64 2
  %271 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %226, i64 0, i32 8, i32 0, i64 2, i32 13
  %272 = getelementptr inbounds %struct.RowMTWorkerData, %struct.RowMTWorkerData* %228, i64 0, i32 3, i64 2
  %273 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %226, i64 0, i32 8, i32 0, i64 2, i32 0
  br label %274

274:                                              ; preds = %356, %242
  %275 = phi i32 [ %235, %242 ], [ %357, %356 ]
  %276 = ashr i32 %275, 3
  %277 = add nsw i32 %276, %243
  br i1 %244, label %296, label %278

278:                                              ; preds = %274
  %279 = add nsw i32 %276, %246
  %280 = load i8*, i8** %249, align 8
  %281 = sext i32 %279 to i64
  %282 = getelementptr inbounds i8, i8* %280, i64 %281
  %283 = load %union.pthread_mutex_t*, %union.pthread_mutex_t** %250, align 8
  %284 = getelementptr inbounds %union.pthread_mutex_t, %union.pthread_mutex_t* %283, i64 %251
  %285 = call i32 @pthread_mutex_lock(%union.pthread_mutex_t* %284) #9
  %286 = load volatile i8, i8* %282, align 1
  %287 = icmp eq i8 %286, 0
  br i1 %287, label %288, label %294

288:                                              ; preds = %278, %288
  %289 = load %union.pthread_cond_t*, %union.pthread_cond_t** %252, align 8
  %290 = getelementptr inbounds %union.pthread_cond_t, %union.pthread_cond_t* %289, i64 %251
  %291 = call i32 @pthread_cond_wait(%union.pthread_cond_t* %290, %union.pthread_mutex_t* %284) #9
  %292 = load volatile i8, i8* %282, align 1
  %293 = icmp eq i8 %292, 0
  br i1 %293, label %288, label %294

294:                                              ; preds = %288, %278
  %295 = call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %284) #9
  br label %296

296:                                              ; preds = %294, %274
  %297 = shl i32 %277, 8
  %298 = sext i32 %297 to i64
  %299 = shl i32 %277, 12
  %300 = sext i32 %299 to i64
  %301 = load i32*, i32** %262, align 8
  %302 = getelementptr inbounds i32, i32* %301, i64 %298
  store i32* %302, i32** %263, align 8
  %303 = load i32*, i32** %264, align 8
  %304 = getelementptr inbounds i32, i32* %303, i64 %300
  store i32* %304, i32** %265, align 8
  %305 = load i32*, i32** %266, align 8
  %306 = getelementptr inbounds i32, i32* %305, i64 %298
  store i32* %306, i32** %267, align 8
  %307 = load i32*, i32** %268, align 8
  %308 = getelementptr inbounds i32, i32* %307, i64 %300
  store i32* %308, i32** %269, align 8
  %309 = load i32*, i32** %270, align 8
  %310 = getelementptr inbounds i32, i32* %309, i64 %298
  store i32* %310, i32** %271, align 8
  %311 = load i32*, i32** %272, align 8
  %312 = getelementptr inbounds i32, i32* %311, i64 %300
  store i32* %312, i32** %273, align 8
  %313 = load i32*, i32** %253, align 8
  %314 = mul nsw i32 %277, 85
  %315 = sext i32 %314 to i64
  %316 = getelementptr inbounds i32, i32* %313, i64 %315
  store i32* %316, i32** %254, align 8
  call fastcc void @process_partition(%struct.TileWorkerData* %226, %struct.VP9Decoder* %10, i32 %85, i32 %275, i8 zeroext 12, i32 4, i32 2, void (%struct.TileWorkerData*, %struct.VP9Decoder*, i32, i32, i8, i32, i32)* nonnull @recon_block) #9
  %317 = load i32, i32* %72, align 8
  %318 = icmp eq i32 %317, 0
  br i1 %318, label %319, label %321

319:                                              ; preds = %296
  %320 = add nsw i32 %275, 8
  br label %356

321:                                              ; preds = %296
  %322 = load i32, i32* %73, align 4
  %323 = icmp ne i32 %322, 0
  %324 = add nsw i32 %275, 8
  %325 = icmp slt i32 %324, %237
  %326 = or i1 %325, %323
  br i1 %326, label %356, label %327

327:                                              ; preds = %321
  %328 = load %union.pthread_mutex_t*, %union.pthread_mutex_t** %74, align 8
  %329 = call i32 @pthread_mutex_lock(%union.pthread_mutex_t* %328) #9
  %330 = load i32, i32* %75, align 8
  %331 = load %union.pthread_mutex_t*, %union.pthread_mutex_t** %74, align 8
  %332 = call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %331) #9
  %333 = icmp eq i32 %330, 0
  br i1 %333, label %334, label %356

334:                                              ; preds = %327
  %335 = load %union.pthread_mutex_t*, %union.pthread_mutex_t** %76, align 8
  %336 = getelementptr inbounds %union.pthread_mutex_t, %union.pthread_mutex_t* %335, i64 %255
  %337 = call i32 @pthread_mutex_lock(%union.pthread_mutex_t* %336) #9
  %338 = load i32*, i32** %77, align 8
  %339 = getelementptr inbounds i32, i32* %338, i64 %255
  %340 = load i32, i32* %339, align 4
  %341 = add nsw i32 %340, 1
  store i32 %341, i32* %339, align 4
  %342 = load i32*, i32** %77, align 8
  %343 = getelementptr inbounds i32, i32* %342, i64 %255
  %344 = load i32, i32* %343, align 4
  %345 = icmp eq i32 %344, %230
  %346 = load %union.pthread_mutex_t*, %union.pthread_mutex_t** %76, align 8
  %347 = getelementptr inbounds %union.pthread_mutex_t, %union.pthread_mutex_t* %346, i64 %255
  %348 = call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %347) #9
  br i1 %345, label %349, label %356

349:                                              ; preds = %334
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %78) #9
  store i32 -1431655766, i32* %79, align 4
  store i32 -1431655766, i32* %80, align 4
  store i32 2, i32* %81, align 4
  br i1 %256, label %350, label %352

350:                                              ; preds = %349
  store i32 %257, i32* %79, align 4
  %351 = call i32 @vp9_jobq_queue(%struct.JobQueueRowMt* %258, i8* nonnull %78, i64 12) #9
  br label %352

352:                                              ; preds = %350, %349
  br i1 %100, label %353, label %355

353:                                              ; preds = %352
  store i32 %85, i32* %79, align 4
  %354 = call i32 @vp9_jobq_queue(%struct.JobQueueRowMt* %258, i8* nonnull %78, i64 12) #9
  br label %355

355:                                              ; preds = %352, %353
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %78) #9
  br label %356

356:                                              ; preds = %355, %334, %327, %321, %319
  %357 = phi i32 [ %320, %319 ], [ %324, %334 ], [ %324, %327 ], [ %324, %321 ], [ %324, %355 ]
  %358 = load %union.pthread_mutex_t*, %union.pthread_mutex_t** %250, align 8
  %359 = getelementptr inbounds %union.pthread_mutex_t, %union.pthread_mutex_t* %358, i64 %261
  %360 = call i32 @pthread_mutex_lock(%union.pthread_mutex_t* %359) #9
  %361 = load i8*, i8** %249, align 8
  %362 = sext i32 %277 to i64
  %363 = getelementptr inbounds i8, i8* %361, i64 %362
  store i8 1, i8* %363, align 1
  %364 = load %union.pthread_cond_t*, %union.pthread_cond_t** %252, align 8
  %365 = getelementptr inbounds %union.pthread_cond_t, %union.pthread_cond_t* %364, i64 %261
  %366 = call i32 @pthread_cond_signal(%union.pthread_cond_t* %365) #9
  %367 = load %union.pthread_mutex_t*, %union.pthread_mutex_t** %250, align 8
  %368 = getelementptr inbounds %union.pthread_mutex_t, %union.pthread_mutex_t* %367, i64 %261
  %369 = call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %368) #9
  %370 = icmp slt i32 %357, %237
  br i1 %370, label %274, label %371

371:                                              ; preds = %356, %221
  %372 = load volatile i32, i32* %5, align 4
  %373 = icmp eq i32 %372, 0
  br i1 %373, label %377, label %374

374:                                              ; preds = %371
  %375 = load volatile %struct.TileWorkerData*, %struct.TileWorkerData** %6, align 8
  %376 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %375, i64 0, i32 11
  call void (%struct.vpx_internal_error_info*, i32, i8*, ...) @vpx_internal_error(%struct.vpx_internal_error_info* %376, i32 7, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.30, i64 0, i64 0)) #9
  br label %377

377:                                              ; preds = %371, %374
  br i1 %100, label %378, label %570

378:                                              ; preds = %377
  %379 = load %struct.RowMTWorkerData*, %struct.RowMTWorkerData** %12, align 8
  %380 = load i32, i32* %18, align 8
  %381 = shl i32 1, %380
  %382 = getelementptr inbounds %struct.RowMTWorkerData, %struct.RowMTWorkerData* %379, i64 0, i32 11
  %383 = call i32 @pthread_mutex_lock(%union.pthread_mutex_t* %382) #9
  %384 = getelementptr inbounds %struct.RowMTWorkerData, %struct.RowMTWorkerData* %379, i64 0, i32 9
  %385 = load i32, i32* %384, align 8
  %386 = add nsw i32 %385, 1
  store i32 %386, i32* %384, align 8
  %387 = icmp eq i32 %381, %386
  %388 = call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %382) #9
  br i1 %387, label %389, label %570

389:                                              ; preds = %378
  %390 = getelementptr inbounds %struct.RowMTWorkerData, %struct.RowMTWorkerData* %379, i64 0, i32 7
  call void @vp9_jobq_terminate(%struct.JobQueueRowMt* %390) #9
  br label %570

391:                                              ; preds = %84
  %392 = load %struct.TileWorkerData*, %struct.TileWorkerData** %39, align 8
  %393 = load i32, i32* %22, align 4
  %394 = sext i32 %393 to i64
  %395 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %392, i64 %394, i32 11
  %396 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %392, i64 %394, i32 11, i32 4, i64 0
  %397 = call i32 @_setjmp(%struct.__jmp_buf_tag* %396) #10
  %398 = icmp eq i32 %397, 0
  br i1 %398, label %413, label %399

399:                                              ; preds = %391
  %400 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %392, i64 %394, i32 11, i32 3
  store i32 0, i32* %400, align 8
  store volatile i32 1, i32* %5, align 4
  %401 = load %struct.RowMTWorkerData*, %struct.RowMTWorkerData** %12, align 8
  %402 = load i32, i32* %18, align 8
  %403 = shl i32 1, %402
  %404 = getelementptr inbounds %struct.RowMTWorkerData, %struct.RowMTWorkerData* %401, i64 0, i32 11
  %405 = call i32 @pthread_mutex_lock(%union.pthread_mutex_t* %404) #9
  %406 = getelementptr inbounds %struct.RowMTWorkerData, %struct.RowMTWorkerData* %401, i64 0, i32 9
  %407 = load i32, i32* %406, align 8
  %408 = add nsw i32 %407, 1
  store i32 %408, i32* %406, align 8
  %409 = icmp eq i32 %403, %408
  %410 = call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %404) #9
  br i1 %409, label %411, label %570

411:                                              ; preds = %399
  %412 = getelementptr inbounds %struct.RowMTWorkerData, %struct.RowMTWorkerData* %401, i64 0, i32 7
  call void @vp9_jobq_terminate(%struct.JobQueueRowMt* %412) #9
  br label %570

413:                                              ; preds = %391
  %414 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %392, i64 %394
  %415 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %392, i64 %394, i32 8
  %416 = bitcast %struct.macroblockd* %415 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %416, i8* align 16 %40, i64 656, i1 false)
  %417 = load i32, i32* %41, align 4
  %418 = icmp eq i32 %417, 0
  %419 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %392, i64 %394, i32 4
  %420 = select i1 %418, %struct.FRAME_COUNTS* %419, %struct.FRAME_COUNTS* null
  %421 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %392, i64 %394, i32 8, i32 3
  store %struct.FRAME_COUNTS* %420, %struct.FRAME_COUNTS** %421, align 16
  %422 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %392, i64 %394, i32 11, i32 3
  store i32 1, i32* %422, align 8
  %423 = load i32, i32* %22, align 4
  %424 = load %struct.RowMTWorkerData*, %struct.RowMTWorkerData** %12, align 8
  %425 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %392, i64 %394, i32 8, i32 4
  %426 = sext i32 %423 to i64
  %427 = load i32, i32* %14, align 8
  %428 = add nsw i32 %427, 7
  %429 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %392, i64 %394, i32 9
  %430 = bitcast [1024 x i32]* %429 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %430, i8 0, i64 4096, i1 false) #9
  call void @vp9_tile_init(%struct.TileInfo* %425, %struct.VP9Common* %11, i32 0, i32 %423) #9
  %431 = icmp eq i32 %85, 0
  br i1 %431, label %432, label %451

432:                                              ; preds = %413
  %433 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %10, i64 0, i32 8, i64 %426, i32 0
  %434 = load i8*, i8** %433, align 8
  %435 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %10, i64 0, i32 8, i64 %426, i32 1
  %436 = load i64, i64* %435, align 8
  %437 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %392, i64 %394, i32 3
  %438 = load void (i8*, i8*, i8*, i32)*, void (i8*, i8*, i8*, i32)** %42, align 16
  %439 = load i8*, i8** %43, align 8
  %440 = icmp eq i64 %436, 0
  br i1 %440, label %446, label %441

441:                                              ; preds = %432
  %442 = load i64, i64* %44, align 8
  %443 = ptrtoint i8* %434 to i64
  %444 = sub i64 %442, %443
  %445 = icmp ult i64 %444, %436
  br i1 %445, label %446, label %447

446:                                              ; preds = %441, %432
  call void (%struct.vpx_internal_error_info*, i32, i8*, ...) @vpx_internal_error(%struct.vpx_internal_error_info* %395, i32 7, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.33, i64 0, i64 0)) #9
  br label %447

447:                                              ; preds = %446, %441
  %448 = call i32 @vpx_reader_init(%struct.vpx_reader* %437, i8* %434, i64 %436, void (i8*, i8*, i8*, i32)* %438, i8* %439) #9
  %449 = icmp eq i32 %448, 0
  br i1 %449, label %451, label %450

450:                                              ; preds = %447
  call void (%struct.vpx_internal_error_info*, i32, i8*, ...) @vpx_internal_error(%struct.vpx_internal_error_info* %395, i32 2, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.34, i64 0, i64 0), i32 1) #9
  br label %451

451:                                              ; preds = %450, %447, %413
  %452 = getelementptr inbounds [1024 x i32], [1024 x i32]* %429, i64 0, i64 0
  %453 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %392, i64 %394, i32 8, i32 16
  %454 = bitcast %struct.frame_contexts** %453 to i64*
  %455 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %392, i64 %394, i32 8, i32 0, i64 0, i32 0
  store i32* %452, i32** %455, align 8
  %456 = load i64, i64* %50, align 8
  %457 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %392, i64 %394, i32 8, i32 19, i64 0
  %458 = bitcast i8** %457 to i64*
  store i64 %456, i64* %458, align 8
  %459 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %392, i64 %394, i32 8, i32 0, i64 0, i32 7, i64 0
  %460 = bitcast [2 x i16]* %459 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %460, i8* align 4 %52, i64 32, i1 false) #9
  %461 = load i64, i64* %49, align 8
  store i64 %461, i64* %454, align 8
  %462 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %392, i64 %394, i32 8, i32 0, i64 1, i32 0
  store i32* %452, i32** %462, align 8
  %463 = load i8*, i8** %45, align 8
  %464 = load i32, i32* %14, align 8
  %465 = add nsw i32 %464, 7
  %466 = and i32 %465, -8
  %467 = sext i32 %466 to i64
  %468 = shl nsw i64 %467, 1
  %469 = getelementptr inbounds i8, i8* %463, i64 %468
  %470 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %392, i64 %394, i32 8, i32 19, i64 1
  store i8* %469, i8** %470, align 8
  %471 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %392, i64 %394, i32 8, i32 0, i64 1, i32 7, i64 0
  %472 = bitcast [2 x i16]* %471 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %472, i8* align 4 %47, i64 32, i1 false) #9
  %473 = load i64, i64* %49, align 8
  store i64 %473, i64* %454, align 8
  %474 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %392, i64 %394, i32 8, i32 0, i64 2, i32 0
  store i32* %452, i32** %474, align 8
  %475 = load i8*, i8** %45, align 8
  %476 = load i32, i32* %14, align 8
  %477 = add nsw i32 %476, 7
  %478 = and i32 %477, -8
  %479 = sext i32 %478 to i64
  %480 = shl nsw i64 %479, 2
  %481 = getelementptr inbounds i8, i8* %475, i64 %480
  %482 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %392, i64 %394, i32 8, i32 19, i64 2
  store i8* %481, i8** %482, align 8
  %483 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %392, i64 %394, i32 8, i32 0, i64 2, i32 7, i64 0
  %484 = bitcast [2 x i16]* %483 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %484, i8* align 4 %47, i64 32, i1 false) #9
  %485 = load i64, i64* %49, align 8
  store i64 %485, i64* %454, align 8
  %486 = load i64, i64* %54, align 16
  %487 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %392, i64 %394, i32 8, i32 21
  %488 = bitcast i8** %487 to i64*
  store i64 %486, i64* %488, align 8
  %489 = load i32, i32* %55, align 4
  %490 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %392, i64 %394, i32 8, i32 5
  store i32 %489, i32* %490, align 8
  %491 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %392, i64 %394, i32 8, i32 26
  store %struct.vpx_internal_error_info* %56, %struct.vpx_internal_error_info** %491, align 8
  %492 = load i32, i32* %57, align 4
  %493 = icmp eq i32 %492, 0
  br i1 %493, label %500, label %494

494:                                              ; preds = %451
  %495 = load i8, i8* %58, align 4
  %496 = icmp eq i8 %495, 0
  br i1 %496, label %497, label %500

497:                                              ; preds = %494
  %498 = load %struct.frame_contexts*, %struct.frame_contexts** %48, align 8
  %499 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %498, i64 0, i32 2, i64 0
  br label %500

500:                                              ; preds = %497, %494, %451
  %501 = phi [3 x i8]* [ %499, %497 ], [ getelementptr inbounds ([16 x [3 x i8]], [16 x [3 x i8]]* @vp9_kf_partition_probs, i64 0, i64 0), %494 ], [ getelementptr inbounds ([16 x [3 x i8]], [16 x [3 x i8]]* @vp9_kf_partition_probs, i64 0, i64 0), %451 ]
  %502 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %392, i64 %394, i32 8, i32 11
  store [3 x i8]* %501, [3 x i8]** %502, align 8
  store %struct.vpx_internal_error_info* %395, %struct.vpx_internal_error_info** %491, align 16
  %503 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %392, i64 %394, i32 8, i32 20, i64 0, i64 0
  call void @llvm.memset.p0i8.i64(i8* align 16 %503, i8 0, i64 48, i1 false) #9
  %504 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %392, i64 %394, i32 8, i32 22, i64 0
  %505 = bitcast i8* %504 to i64*
  store i64 0, i64* %505, align 8
  %506 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %392, i64 %394, i32 8, i32 4, i32 2
  %507 = load i32, i32* %506, align 4
  %508 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %392, i64 %394, i32 8, i32 4, i32 3
  %509 = load i32, i32* %508, align 4
  %510 = icmp slt i32 %507, %509
  br i1 %510, label %511, label %553

511:                                              ; preds = %500
  %512 = ashr i32 %85, 3
  %513 = ashr i32 %428, 3
  %514 = mul nsw i32 %513, %512
  %515 = getelementptr inbounds %struct.RowMTWorkerData, %struct.RowMTWorkerData* %424, i64 0, i32 2
  %516 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %392, i64 %394, i32 8, i32 27
  %517 = getelementptr inbounds %struct.RowMTWorkerData, %struct.RowMTWorkerData* %424, i64 0, i32 1, i64 0
  %518 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %392, i64 %394, i32 8, i32 0, i64 0, i32 13
  %519 = getelementptr inbounds %struct.RowMTWorkerData, %struct.RowMTWorkerData* %424, i64 0, i32 3, i64 0
  %520 = getelementptr inbounds %struct.RowMTWorkerData, %struct.RowMTWorkerData* %424, i64 0, i32 1, i64 1
  %521 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %392, i64 %394, i32 8, i32 0, i64 1, i32 13
  %522 = getelementptr inbounds %struct.RowMTWorkerData, %struct.RowMTWorkerData* %424, i64 0, i32 3, i64 1
  %523 = getelementptr inbounds %struct.RowMTWorkerData, %struct.RowMTWorkerData* %424, i64 0, i32 1, i64 2
  %524 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %392, i64 %394, i32 8, i32 0, i64 2, i32 13
  %525 = getelementptr inbounds %struct.RowMTWorkerData, %struct.RowMTWorkerData* %424, i64 0, i32 3, i64 2
  br label %526

526:                                              ; preds = %526, %511
  %527 = phi i32 [ %507, %511 ], [ %550, %526 ]
  %528 = ashr i32 %527, 3
  %529 = add nsw i32 %528, %514
  %530 = shl i32 %529, 8
  %531 = sext i32 %530 to i64
  %532 = shl i32 %529, 12
  %533 = sext i32 %532 to i64
  %534 = load i32*, i32** %517, align 8
  %535 = getelementptr inbounds i32, i32* %534, i64 %531
  store i32* %535, i32** %518, align 8
  %536 = load i32*, i32** %519, align 8
  %537 = getelementptr inbounds i32, i32* %536, i64 %533
  store i32* %537, i32** %455, align 8
  %538 = load i32*, i32** %520, align 8
  %539 = getelementptr inbounds i32, i32* %538, i64 %531
  store i32* %539, i32** %521, align 8
  %540 = load i32*, i32** %522, align 8
  %541 = getelementptr inbounds i32, i32* %540, i64 %533
  store i32* %541, i32** %462, align 8
  %542 = load i32*, i32** %523, align 8
  %543 = getelementptr inbounds i32, i32* %542, i64 %531
  store i32* %543, i32** %524, align 8
  %544 = load i32*, i32** %525, align 8
  %545 = getelementptr inbounds i32, i32* %544, i64 %533
  store i32* %545, i32** %474, align 8
  %546 = load i32*, i32** %515, align 8
  %547 = mul nsw i32 %529, 85
  %548 = sext i32 %547 to i64
  %549 = getelementptr inbounds i32, i32* %546, i64 %548
  store i32* %549, i32** %516, align 8
  call fastcc void @process_partition(%struct.TileWorkerData* %414, %struct.VP9Decoder* %10, i32 %85, i32 %527, i8 zeroext 12, i32 4, i32 1, void (%struct.TileWorkerData*, %struct.VP9Decoder*, i32, i32, i8, i32, i32)* nonnull @parse_block) #9
  %550 = add nsw i32 %527, 8
  %551 = load i32, i32* %508, align 4
  %552 = icmp slt i32 %550, %551
  br i1 %552, label %526, label %553

553:                                              ; preds = %526, %500
  %554 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %392, i64 %394, i32 8, i32 25
  %555 = load i32, i32* %554, align 8
  %556 = load volatile i32, i32* %5, align 4
  %557 = or i32 %556, %555
  store volatile i32 %557, i32* %5, align 4
  %558 = load volatile i32, i32* %5, align 4
  %559 = icmp eq i32 %558, 0
  br i1 %559, label %561, label %560

560:                                              ; preds = %553
  call void (%struct.vpx_internal_error_info*, i32, i8*, ...) @vpx_internal_error(%struct.vpx_internal_error_info* %395, i32 7, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.30, i64 0, i64 0)) #9
  br label %561

561:                                              ; preds = %553, %560
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %59) #9
  store i32 %85, i32* %60, align 4
  %562 = load i32, i32* %22, align 4
  store i32 %562, i32* %61, align 4
  store i32 1, i32* %62, align 4
  %563 = call i32 @vp9_jobq_queue(%struct.JobQueueRowMt* %32, i8* nonnull %59, i64 12) #9
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %59) #9
  %564 = add nsw i32 %85, 8
  %565 = load i32, i32* %16, align 16
  %566 = icmp slt i32 %564, %565
  br i1 %566, label %567, label %570

567:                                              ; preds = %561
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %63) #9
  store i32 %564, i32* %64, align 4
  %568 = load i32, i32* %22, align 4
  store i32 %568, i32* %65, align 4
  store i32 0, i32* %66, align 4
  %569 = call i32 @vp9_jobq_queue(%struct.JobQueueRowMt* %32, i8* nonnull %63, i64 12) #9
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %63) #9
  br label %570

570:                                              ; preds = %411, %399, %389, %378, %219, %208, %207, %97, %94, %87, %91, %377, %84, %561, %567
  %571 = call i32 @vp9_jobq_dequeue(%struct.JobQueueRowMt* %32, i8* nonnull %20, i64 12, i32 1) #9
  %572 = icmp eq i32 %571, 0
  br i1 %572, label %84, label %573

573:                                              ; preds = %570, %2
  %574 = load volatile %struct.TileWorkerData*, %struct.TileWorkerData** %6, align 8
  %575 = bitcast %struct.TileWorkerData* %574 to i8*
  call void @vpx_free(i8* %575) #9
  %576 = load volatile i32, i32* %5, align 4
  %577 = icmp eq i32 %576, 0
  %578 = zext i1 %577 to i32
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %31)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %30)
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %20) #9
  ret i32 %578
}

declare void @vp9_jobq_reset(%struct.JobQueueRowMt*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @get_tile_buffers(%struct.VP9Decoder*, i8*, i8*, i32, i32, [64 x %struct.TileBuffer]* nocapture) unnamed_addr #0 {
  %7 = alloca i32, align 4
  %8 = icmp sgt i32 %4, 0
  br i1 %8, label %9, label %108

9:                                                ; preds = %6
  %10 = ptrtoint i8* %1 to i64
  %11 = icmp sgt i32 %3, 0
  %12 = add nsw i32 %4, -1
  %13 = add nsw i32 %3, -1
  %14 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 1, i32 0
  %15 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 12
  %16 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %0, i64 0, i32 13
  %17 = bitcast i32* %7 to [4 x i8]*
  %18 = ptrtoint i8* %2 to i64
  %19 = bitcast i32* %7 to i8*
  %20 = getelementptr inbounds [4 x i8], [4 x i8]* %17, i64 0, i64 1
  %21 = getelementptr inbounds [4 x i8], [4 x i8]* %17, i64 0, i64 2
  %22 = getelementptr inbounds [4 x i8], [4 x i8]* %17, i64 0, i64 3
  %23 = zext i32 %13 to i64
  %24 = zext i32 %12 to i64
  %25 = zext i32 %4 to i64
  %26 = zext i32 %3 to i64
  br label %27

27:                                               ; preds = %104, %9
  %28 = phi i64 [ 0, %9 ], [ %106, %104 ]
  %29 = phi i64 [ %10, %9 ], [ %105, %104 ]
  br i1 %11, label %30, label %104

30:                                               ; preds = %27
  %31 = icmp ne i64 %28, %24
  br label %32

32:                                               ; preds = %92, %30
  %33 = phi i64 [ 0, %30 ], [ %100, %92 ]
  %34 = phi i64 [ %29, %30 ], [ %99, %92 ]
  %35 = icmp ne i64 %33, %23
  %36 = getelementptr inbounds [64 x %struct.TileBuffer], [64 x %struct.TileBuffer]* %5, i64 %28, i64 %33
  %37 = getelementptr inbounds [64 x %struct.TileBuffer], [64 x %struct.TileBuffer]* %5, i64 %28, i64 %33, i32 2
  %38 = trunc i64 %33 to i32
  store i32 %38, i32* %37, align 8
  %39 = load void (i8*, i8*, i8*, i32)*, void (i8*, i8*, i8*, i32)** %15, align 16
  %40 = load i8*, i8** %16, align 8
  %41 = or i1 %31, %35
  %42 = sub i64 %18, %34
  br i1 %41, label %43, label %92

43:                                               ; preds = %32
  %44 = icmp ult i64 %42, 4
  br i1 %44, label %45, label %46

45:                                               ; preds = %43
  call void (%struct.vpx_internal_error_info*, i32, i8*, ...) @vpx_internal_error(%struct.vpx_internal_error_info* %14, i32 7, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.33, i64 0, i64 0)) #9
  br label %46

46:                                               ; preds = %45, %43
  %47 = icmp eq void (i8*, i8*, i8*, i32)* %39, null
  br i1 %47, label %64, label %48

48:                                               ; preds = %46
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %19) #9
  store i32 -1431655766, i32* %7, align 4
  %49 = inttoptr i64 %34 to i8*
  call void %39(i8* %40, i8* %49, i8* nonnull %19, i32 4) #9
  %50 = load i8, i8* %19, align 4
  %51 = zext i8 %50 to i64
  %52 = shl nuw nsw i64 %51, 24
  %53 = load i8, i8* %20, align 1
  %54 = zext i8 %53 to i64
  %55 = shl nuw nsw i64 %54, 16
  %56 = or i64 %55, %52
  %57 = load i8, i8* %21, align 2
  %58 = zext i8 %57 to i64
  %59 = shl nuw nsw i64 %58, 8
  %60 = or i64 %56, %59
  %61 = load i8, i8* %22, align 1
  %62 = zext i8 %61 to i64
  %63 = or i64 %60, %62
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %19) #9
  br label %83

64:                                               ; preds = %46
  %65 = inttoptr i64 %34 to i8*
  %66 = load i8, i8* %65, align 1
  %67 = zext i8 %66 to i64
  %68 = shl nuw nsw i64 %67, 24
  %69 = getelementptr inbounds i8, i8* %65, i64 1
  %70 = load i8, i8* %69, align 1
  %71 = zext i8 %70 to i64
  %72 = shl nuw nsw i64 %71, 16
  %73 = or i64 %72, %68
  %74 = getelementptr inbounds i8, i8* %65, i64 2
  %75 = load i8, i8* %74, align 1
  %76 = zext i8 %75 to i64
  %77 = shl nuw nsw i64 %76, 8
  %78 = or i64 %73, %77
  %79 = getelementptr inbounds i8, i8* %65, i64 3
  %80 = load i8, i8* %79, align 1
  %81 = zext i8 %80 to i64
  %82 = or i64 %78, %81
  br label %83

83:                                               ; preds = %64, %48
  %84 = phi i8* [ %49, %48 ], [ %65, %64 ]
  %85 = phi i64 [ %63, %48 ], [ %82, %64 ]
  %86 = and i64 %85, 4294967295
  %87 = getelementptr inbounds i8, i8* %84, i64 4
  %88 = ptrtoint i8* %87 to i64
  %89 = sub i64 %18, %88
  %90 = icmp ult i64 %89, %86
  br i1 %90, label %91, label %92

91:                                               ; preds = %83
  call void (%struct.vpx_internal_error_info*, i32, i8*, ...) @vpx_internal_error(%struct.vpx_internal_error_info* %14, i32 7, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.35, i64 0, i64 0)) #9
  br label %92

92:                                               ; preds = %32, %83, %91
  %93 = phi i64 [ %88, %91 ], [ %88, %83 ], [ %34, %32 ]
  %94 = phi i64 [ %86, %91 ], [ %86, %83 ], [ %42, %32 ]
  %95 = bitcast %struct.TileBuffer* %36 to i64*
  store i64 %93, i64* %95, align 8
  %96 = getelementptr inbounds [64 x %struct.TileBuffer], [64 x %struct.TileBuffer]* %5, i64 %28, i64 %33, i32 1
  store i64 %94, i64* %96, align 8
  %97 = inttoptr i64 %93 to i8*
  %98 = getelementptr inbounds i8, i8* %97, i64 %94
  %99 = ptrtoint i8* %98 to i64
  %100 = add nuw nsw i64 %33, 1
  %101 = icmp eq i64 %100, %26
  br i1 %101, label %102, label %32

102:                                              ; preds = %92
  %103 = ptrtoint i8* %98 to i64
  br label %104

104:                                              ; preds = %102, %27
  %105 = phi i64 [ %29, %27 ], [ %103, %102 ]
  %106 = add nuw nsw i64 %28, 1
  %107 = icmp eq i64 %106, %25
  br i1 %107, label %108, label %27

108:                                              ; preds = %104, %6
  ret void
}

declare i32 @vp9_jobq_queue(%struct.JobQueueRowMt*, i8*, i64) local_unnamed_addr #1

declare i8* @vpx_reader_find_end(%struct.vpx_reader*) local_unnamed_addr #1

declare void @vp9_accumulate_frame_counts(%struct.FRAME_COUNTS*, %struct.FRAME_COUNTS*, i32) local_unnamed_addr #1

declare i8* @vpx_malloc(i64) local_unnamed_addr #1

declare void @vp9_lpf_mt_init(%struct.VP9LfSyncData*, %struct.VP9Common*, i32, i32) local_unnamed_addr #1

declare void @vp9_reset_lfm(%struct.VP9Common*) local_unnamed_addr #1

declare i32 @vp9_jobq_dequeue(%struct.JobQueueRowMt*, i8*, i64, i32) local_unnamed_addr #1

declare void @vp9_loopfilter_job(%struct.LoopFilterWorkerData*, %struct.VP9LfSyncData*) local_unnamed_addr #1

declare void @vp9_tile_init(%struct.TileInfo*, %struct.VP9Common*, i32, i32) local_unnamed_addr #1

; Function Attrs: nounwind returns_twice
declare i32 @_setjmp(%struct.__jmp_buf_tag*) local_unnamed_addr #6

; Function Attrs: nounwind
declare i32 @pthread_mutex_lock(%union.pthread_mutex_t*) local_unnamed_addr #3

; Function Attrs: nounwind
declare i32 @pthread_cond_signal(%union.pthread_cond_t*) local_unnamed_addr #3

; Function Attrs: nounwind
declare i32 @pthread_mutex_unlock(%union.pthread_mutex_t*) local_unnamed_addr #3

declare void @vp9_jobq_terminate(%struct.JobQueueRowMt*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @process_partition(%struct.TileWorkerData*, %struct.VP9Decoder*, i32, i32, i8 zeroext, i32, i32, void (%struct.TileWorkerData*, %struct.VP9Decoder*, i32, i32, i8, i32, i32)*) unnamed_addr #0 {
  %9 = add nsw i32 %5, -1
  %10 = shl i32 1, %9
  %11 = ashr i32 %10, 1
  %12 = add nsw i32 %11, %2
  %13 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %1, i64 0, i32 1, i32 33
  %14 = load i32, i32* %13, align 16
  %15 = icmp slt i32 %12, %14
  %16 = zext i1 %15 to i32
  %17 = add nsw i32 %11, %3
  %18 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %1, i64 0, i32 1, i32 35
  %19 = load i32, i32* %18, align 8
  %20 = icmp slt i32 %17, %19
  %21 = zext i1 %20 to i32
  %22 = icmp sgt i32 %14, %2
  %23 = icmp sgt i32 %19, %3
  %24 = and i1 %22, %23
  br i1 %24, label %25, label %80

25:                                               ; preds = %8
  %26 = and i32 %6, 1
  %27 = icmp ne i32 %26, 0
  br i1 %27, label %28, label %32

28:                                               ; preds = %25
  %29 = tail call fastcc i32 @read_partition(%struct.TileWorkerData* %0, i32 %2, i32 %3, i32 %16, i32 %21, i32 %9)
  %30 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 27
  %31 = load i32*, i32** %30, align 8
  store i32 %29, i32* %31, align 4
  br label %32

32:                                               ; preds = %28, %25
  %33 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 27
  %34 = load i32*, i32** %33, align 8
  %35 = load i32, i32* %34, align 4
  %36 = getelementptr inbounds i32, i32* %34, i64 1
  store i32* %36, i32** %33, align 8
  %37 = zext i32 %35 to i64
  %38 = zext i8 %4 to i64
  %39 = getelementptr inbounds [4 x [13 x i8]], [4 x [13 x i8]]* @subsize_lookup, i64 0, i64 %37, i64 %38
  %40 = load i8, i8* %39, align 1
  %41 = icmp eq i32 %11, 0
  br i1 %41, label %42, label %52

42:                                               ; preds = %32
  %43 = lshr i32 %35, 1
  %44 = and i32 %43, 1
  %45 = lshr i32 1, %44
  %46 = trunc i32 %45 to i8
  %47 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 1
  store i8 %46, i8* %47, align 8
  %48 = and i32 %35, 1
  %49 = lshr i32 1, %48
  %50 = trunc i32 %49 to i8
  %51 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 2
  store i8 %50, i8* %51, align 1
  tail call void %7(%struct.TileWorkerData* %0, %struct.VP9Decoder* %1, i32 %2, i32 %3, i8 zeroext %40, i32 1, i32 1) #9, !callees !5
  br label %59

52:                                               ; preds = %32
  switch i32 %35, label %59 [
    i32 0, label %53
    i32 1, label %54
    i32 2, label %56
    i32 3, label %58
  ]

53:                                               ; preds = %52
  tail call void %7(%struct.TileWorkerData* %0, %struct.VP9Decoder* %1, i32 %2, i32 %3, i8 zeroext %40, i32 %5, i32 %5) #9, !callees !5
  br label %59

54:                                               ; preds = %52
  tail call void %7(%struct.TileWorkerData* %0, %struct.VP9Decoder* %1, i32 %2, i32 %3, i8 zeroext %40, i32 %5, i32 %9) #9, !callees !5
  br i1 %15, label %55, label %59

55:                                               ; preds = %54
  tail call void %7(%struct.TileWorkerData* %0, %struct.VP9Decoder* %1, i32 %12, i32 %3, i8 zeroext %40, i32 %5, i32 %9) #9, !callees !5
  br label %59

56:                                               ; preds = %52
  tail call void %7(%struct.TileWorkerData* %0, %struct.VP9Decoder* %1, i32 %2, i32 %3, i8 zeroext %40, i32 %9, i32 %5) #9, !callees !5
  br i1 %20, label %57, label %59

57:                                               ; preds = %56
  tail call void %7(%struct.TileWorkerData* %0, %struct.VP9Decoder* %1, i32 %2, i32 %17, i8 zeroext %40, i32 %9, i32 %5) #9, !callees !5
  br label %59

58:                                               ; preds = %52
  tail call fastcc void @process_partition(%struct.TileWorkerData* %0, %struct.VP9Decoder* %1, i32 %2, i32 %3, i8 zeroext %40, i32 %9, i32 %6, void (%struct.TileWorkerData*, %struct.VP9Decoder*, i32, i32, i8, i32, i32)* %7)
  tail call fastcc void @process_partition(%struct.TileWorkerData* %0, %struct.VP9Decoder* %1, i32 %2, i32 %17, i8 zeroext %40, i32 %9, i32 %6, void (%struct.TileWorkerData*, %struct.VP9Decoder*, i32, i32, i8, i32, i32)* %7)
  tail call fastcc void @process_partition(%struct.TileWorkerData* %0, %struct.VP9Decoder* %1, i32 %12, i32 %3, i8 zeroext %40, i32 %9, i32 %6, void (%struct.TileWorkerData*, %struct.VP9Decoder*, i32, i32, i8, i32, i32)* %7)
  tail call fastcc void @process_partition(%struct.TileWorkerData* %0, %struct.VP9Decoder* %1, i32 %12, i32 %17, i8 zeroext %40, i32 %9, i32 %6, void (%struct.TileWorkerData*, %struct.VP9Decoder*, i32, i32, i8, i32, i32)* %7)
  br label %59

59:                                               ; preds = %53, %58, %55, %54, %57, %56, %52, %42
  br i1 %27, label %60, label %80

60:                                               ; preds = %59
  %61 = icmp eq i8 %4, 3
  %62 = icmp ne i32 %35, 3
  %63 = or i1 %61, %62
  %64 = icmp ugt i8 %4, 2
  %65 = and i1 %64, %63
  br i1 %65, label %66, label %80

66:                                               ; preds = %60
  %67 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 21
  %68 = load i8*, i8** %67, align 16
  %69 = sext i32 %3 to i64
  %70 = getelementptr inbounds i8, i8* %68, i64 %69
  %71 = and i32 %2, 7
  %72 = zext i32 %71 to i64
  %73 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 22, i64 %72
  %74 = zext i8 %40 to i64
  %75 = getelementptr inbounds [13 x %struct.anon.2], [13 x %struct.anon.2]* @partition_context_lookup, i64 0, i64 %74, i32 0
  %76 = load i8, i8* %75, align 2
  %77 = sext i32 %10 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %70, i8 %76, i64 %77, i1 false) #9
  %78 = getelementptr inbounds [13 x %struct.anon.2], [13 x %struct.anon.2]* @partition_context_lookup, i64 0, i64 %74, i32 1
  %79 = load i8, i8* %78, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %73, i8 %79, i64 %77, i1 false) #9
  br label %80

80:                                               ; preds = %59, %60, %66, %8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @recon_block(%struct.TileWorkerData*, %struct.VP9Decoder*, i32, i32, i8 zeroext, i32, i32) #0 {
  %8 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %1, i64 0, i32 1
  %9 = add nsw i32 %5, -1
  %10 = shl i32 1, %9
  %11 = add nsw i32 %6, -1
  %12 = shl i32 1, %11
  %13 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8
  %14 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %1, i64 0, i32 1, i32 36
  %15 = load i32, i32* %14, align 4
  %16 = mul nsw i32 %15, %2
  %17 = add nsw i32 %16, %3
  %18 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %1, i64 0, i32 1, i32 53
  %19 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %18, align 8
  %20 = sext i32 %17 to i64
  %21 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %19, i64 %20
  %22 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 6
  store %struct.MODE_INFO** %21, %struct.MODE_INFO*** %22, align 8
  %23 = shl i32 %10, 1
  %24 = shl i32 %12, 1
  %25 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 0, i64 0, i32 1
  %26 = load i32, i32* %25, align 8
  %27 = ashr i32 %23, %26
  %28 = trunc i32 %27 to i16
  %29 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 0, i64 0, i32 8
  store i16 %28, i16* %29, align 8
  %30 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 0, i64 0, i32 2
  %31 = load i32, i32* %30, align 4
  %32 = ashr i32 %24, %31
  %33 = trunc i32 %32 to i16
  %34 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 0, i64 0, i32 9
  store i16 %33, i16* %34, align 2
  %35 = sub nsw i32 %5, %26
  %36 = trunc i32 %35 to i8
  %37 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 0, i64 0, i32 10
  store i8 %36, i8* %37, align 4
  %38 = sub nsw i32 %6, %31
  %39 = trunc i32 %38 to i8
  %40 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 0, i64 0, i32 11
  store i8 %39, i8* %40, align 1
  %41 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 0, i64 1, i32 1
  %42 = load i32, i32* %41, align 8
  %43 = ashr i32 %23, %42
  %44 = trunc i32 %43 to i16
  %45 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 0, i64 1, i32 8
  store i16 %44, i16* %45, align 8
  %46 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 0, i64 1, i32 2
  %47 = load i32, i32* %46, align 4
  %48 = ashr i32 %24, %47
  %49 = trunc i32 %48 to i16
  %50 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 0, i64 1, i32 9
  store i16 %49, i16* %50, align 2
  %51 = sub nsw i32 %5, %42
  %52 = trunc i32 %51 to i8
  %53 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 0, i64 1, i32 10
  store i8 %52, i8* %53, align 4
  %54 = sub nsw i32 %6, %47
  %55 = trunc i32 %54 to i8
  %56 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 0, i64 1, i32 11
  store i8 %55, i8* %56, align 1
  %57 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 0, i64 2, i32 1
  %58 = load i32, i32* %57, align 8
  %59 = ashr i32 %23, %58
  %60 = trunc i32 %59 to i16
  %61 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 0, i64 2, i32 8
  store i16 %60, i16* %61, align 8
  %62 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 0, i64 2, i32 2
  %63 = load i32, i32* %62, align 4
  %64 = ashr i32 %24, %63
  %65 = trunc i32 %64 to i16
  %66 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 0, i64 2, i32 9
  store i16 %65, i16* %66, align 2
  %67 = sub nsw i32 %5, %58
  %68 = trunc i32 %67 to i8
  %69 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 0, i64 2, i32 10
  store i8 %68, i8* %69, align 4
  %70 = sub nsw i32 %6, %63
  %71 = trunc i32 %70 to i8
  %72 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 0, i64 2, i32 11
  store i8 %71, i8* %72, align 1
  %73 = shl nsw i32 %3, 1
  %74 = shl nsw i32 %2, 1
  %75 = and i32 %74, 14
  %76 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 19, i64 0
  %77 = load i8*, i8** %76, align 8
  %78 = ashr i32 %73, %26
  %79 = sext i32 %78 to i64
  %80 = getelementptr inbounds i8, i8* %77, i64 %79
  %81 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 0, i64 0, i32 5
  store i8* %80, i8** %81, align 8
  %82 = lshr i32 %75, %31
  %83 = sext i32 %82 to i64
  %84 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 20, i64 0, i64 %83
  %85 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 0, i64 0, i32 6
  store i8* %84, i8** %85, align 8
  %86 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 19, i64 1
  %87 = load i8*, i8** %86, align 8
  %88 = ashr i32 %73, %42
  %89 = sext i32 %88 to i64
  %90 = getelementptr inbounds i8, i8* %87, i64 %89
  %91 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 0, i64 1, i32 5
  store i8* %90, i8** %91, align 8
  %92 = lshr i32 %75, %47
  %93 = sext i32 %92 to i64
  %94 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 20, i64 1, i64 %93
  %95 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 0, i64 1, i32 6
  store i8* %94, i8** %95, align 8
  %96 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 19, i64 2
  %97 = load i8*, i8** %96, align 8
  %98 = ashr i32 %73, %58
  %99 = sext i32 %98 to i64
  %100 = getelementptr inbounds i8, i8* %97, i64 %99
  %101 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 0, i64 2, i32 5
  store i8* %100, i8** %101, align 8
  %102 = lshr i32 %75, %63
  %103 = sext i32 %102 to i64
  %104 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 20, i64 2, i64 %103
  %105 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 0, i64 2, i32 6
  store i8* %104, i8** %105, align 8
  %106 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %1, i64 0, i32 1, i32 33
  %107 = load i32, i32* %106, align 16
  %108 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %1, i64 0, i32 1, i32 35
  %109 = load i32, i32* %108, align 8
  %110 = shl nsw i32 %2, 6
  %111 = sub nsw i32 0, %110
  %112 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 14
  store i32 %111, i32* %112, align 8
  %113 = add i32 %12, %2
  %114 = sub i32 %107, %113
  %115 = shl nsw i32 %114, 6
  %116 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 15
  store i32 %115, i32* %116, align 4
  %117 = shl nsw i32 %3, 6
  %118 = sub nsw i32 0, %117
  %119 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 12
  store i32 %118, i32* %119, align 8
  %120 = add i32 %10, %3
  %121 = sub i32 %109, %120
  %122 = shl nsw i32 %121, 6
  %123 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 13
  store i32 %122, i32* %123, align 4
  %124 = icmp eq i32 %2, 0
  br i1 %124, label %132, label %125

125:                                              ; preds = %7
  %126 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 5
  %127 = load i32, i32* %126, align 8
  %128 = sub nsw i32 0, %127
  %129 = sext i32 %128 to i64
  %130 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %21, i64 %129
  %131 = load %struct.MODE_INFO*, %struct.MODE_INFO** %130, align 8
  br label %132

132:                                              ; preds = %125, %7
  %133 = phi %struct.MODE_INFO* [ %131, %125 ], [ null, %7 ]
  %134 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 8
  store %struct.MODE_INFO* %133, %struct.MODE_INFO** %134, align 8
  %135 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 4, i32 2
  %136 = load i32, i32* %135, align 4
  %137 = icmp slt i32 %136, %3
  br i1 %137, label %138, label %141

138:                                              ; preds = %132
  %139 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %21, i64 -1
  %140 = load %struct.MODE_INFO*, %struct.MODE_INFO** %139, align 8
  br label %141

141:                                              ; preds = %132, %138
  %142 = phi %struct.MODE_INFO* [ %140, %138 ], [ null, %132 ]
  %143 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 7
  store %struct.MODE_INFO* %142, %struct.MODE_INFO** %143, align 8
  %144 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %13, i64 0, i32 0, i64 0
  %145 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %1, i64 0, i32 1, i32 89
  %146 = load %struct.BufferPool*, %struct.BufferPool** %145, align 8
  %147 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %1, i64 0, i32 1, i32 18
  %148 = load i32, i32* %147, align 16
  %149 = sext i32 %148 to i64
  %150 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %146, i64 0, i32 3, i64 %149, i32 8
  tail call void @vp9_setup_dst_planes(%struct.macroblockd_plane* %144, %struct.yv12_buffer_config* %150, i32 %2, i32 %3) #9
  %151 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %22, align 8
  %152 = load %struct.MODE_INFO*, %struct.MODE_INFO** %151, align 8
  %153 = icmp ugt i8 %4, 2
  br i1 %153, label %154, label %171

154:                                              ; preds = %141
  %155 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %1, i64 0, i32 1, i32 9
  %156 = load i32, i32* %155, align 8
  %157 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %1, i64 0, i32 1, i32 10
  %158 = load i32, i32* %157, align 4
  %159 = or i32 %156, %158
  %160 = icmp eq i32 %159, 0
  br i1 %160, label %171, label %161

161:                                              ; preds = %154
  %162 = zext i8 %4 to i64
  %163 = sext i32 %156 to i64
  %164 = sext i32 %158 to i64
  %165 = getelementptr inbounds [13 x [2 x [2 x i8]]], [13 x [2 x [2 x i8]]]* @ss_size_lookup, i64 0, i64 %162, i64 %163, i64 %164
  %166 = load i8, i8* %165, align 1
  %167 = icmp eq i8 %166, 13
  br i1 %167, label %168, label %171

168:                                              ; preds = %161
  %169 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 26
  %170 = load %struct.vpx_internal_error_info*, %struct.vpx_internal_error_info** %169, align 8
  tail call void (%struct.vpx_internal_error_info*, i32, i8*, ...) @vpx_internal_error(%struct.vpx_internal_error_info* %170, i32 7, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.31, i64 0, i64 0)) #9
  br label %171

171:                                              ; preds = %154, %161, %168, %141
  %172 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %152, i64 0, i32 8, i64 0
  %173 = load i8, i8* %172, align 4
  %174 = icmp slt i8 %173, 1
  br i1 %174, label %175, label %312

175:                                              ; preds = %171
  %176 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %152, i64 0, i32 0
  %177 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %152, i64 0, i32 2
  %178 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 9
  %179 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 10
  %180 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %152, i64 0, i32 1
  %181 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %152, i64 0, i32 6
  %182 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %152, i64 0, i32 3
  %183 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 24
  br label %184

184:                                              ; preds = %309, %175
  %185 = phi i64 [ 0, %175 ], [ %310, %309 ]
  %186 = icmp eq i64 %185, 0
  br i1 %186, label %199, label %187

187:                                              ; preds = %184
  %188 = load i8, i8* %176, align 4
  %189 = zext i8 %188 to i64
  %190 = load i8, i8* %177, align 2
  %191 = zext i8 %190 to i64
  %192 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 0, i64 %185, i32 1
  %193 = load i32, i32* %192, align 8
  %194 = sext i32 %193 to i64
  %195 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 0, i64 %185, i32 2
  %196 = load i32, i32* %195, align 4
  %197 = sext i32 %196 to i64
  %198 = getelementptr inbounds [13 x [4 x [2 x [2 x i8]]]], [13 x [4 x [2 x [2 x i8]]]]* @uv_txsize_lookup, i64 0, i64 %189, i64 %191, i64 %194, i64 %197
  br label %199

199:                                              ; preds = %187, %184
  %200 = phi i8* [ %198, %187 ], [ %177, %184 ]
  %201 = load i8, i8* %200, align 1
  %202 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 0, i64 %185, i32 8
  %203 = load i16, i16* %202, align 8
  %204 = zext i16 %203 to i32
  %205 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 0, i64 %185, i32 9
  %206 = load i16, i16* %205, align 2
  %207 = zext i16 %206 to i32
  %208 = zext i8 %201 to i32
  %209 = shl i32 1, %208
  %210 = load i32, i32* %123, align 4
  %211 = icmp sgt i32 %210, -1
  br i1 %211, label %217, label %212

212:                                              ; preds = %199
  %213 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 0, i64 %185, i32 1
  %214 = load i32, i32* %213, align 8
  %215 = add nsw i32 %214, 5
  %216 = ashr i32 %210, %215
  br label %217

217:                                              ; preds = %212, %199
  %218 = phi i32 [ %216, %212 ], [ 0, %199 ]
  %219 = add nsw i32 %218, %204
  %220 = load i32, i32* %116, align 4
  %221 = icmp sgt i32 %220, -1
  br i1 %221, label %227, label %222

222:                                              ; preds = %217
  %223 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 0, i64 %185, i32 2
  %224 = load i32, i32* %223, align 4
  %225 = add nsw i32 %224, 5
  %226 = ashr i32 %220, %225
  br label %227

227:                                              ; preds = %222, %217
  %228 = phi i32 [ %226, %222 ], [ 0, %217 ]
  %229 = add nsw i32 %228, %207
  %230 = select i1 %211, i32 0, i32 %219
  store i32 %230, i32* %178, align 8
  %231 = select i1 %221, i32 0, i32 %229
  store i32 %231, i32* %179, align 4
  %232 = icmp sgt i32 %229, 0
  br i1 %232, label %233, label %309

233:                                              ; preds = %227
  %234 = icmp sgt i32 %219, 0
  %235 = trunc i64 %185 to i32
  %236 = shl i64 %185, 32
  %237 = ashr exact i64 %236, 32
  %238 = icmp eq i32 %235, 0
  %239 = select i1 %238, i8* %180, i8* %181
  %240 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 0, i64 %237, i32 3, i32 0
  %241 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 0, i64 %237, i32 3, i32 1
  %242 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 0, i64 %237, i32 10
  %243 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 0, i64 %237, i32 13
  %244 = shl nuw nsw i32 %208, 1
  %245 = shl i32 16, %244
  %246 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 0, i64 %237, i32 0
  %247 = sext i32 %245 to i64
  %248 = sext i32 %209 to i64
  %249 = sext i32 %219 to i64
  %250 = sext i32 %229 to i64
  br label %251

251:                                              ; preds = %306, %233
  %252 = phi i64 [ %307, %306 ], [ 0, %233 ]
  br i1 %234, label %253, label %306

253:                                              ; preds = %251
  %254 = trunc i64 %252 to i32
  %255 = shl i32 %254, 1
  %256 = sext i32 %255 to i64
  br label %257

257:                                              ; preds = %253, %303
  %258 = phi i64 [ 0, %253 ], [ %304, %303 ]
  %259 = load i8*, i8** %240, align 8
  %260 = load i32, i32* %241, align 8
  %261 = mul i32 %260, %254
  %262 = trunc i64 %258 to i32
  %263 = add i32 %261, %262
  %264 = shl i32 %263, 2
  %265 = sext i32 %264 to i64
  %266 = getelementptr inbounds i8, i8* %259, i64 %265
  %267 = load i8, i8* %176, align 4
  %268 = icmp ult i8 %267, 3
  %269 = and i1 %238, %268
  br i1 %269, label %270, label %275

270:                                              ; preds = %257
  %271 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %22, align 8
  %272 = load %struct.MODE_INFO*, %struct.MODE_INFO** %271, align 8
  %273 = add nsw i64 %258, %256
  %274 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %272, i64 0, i32 10, i64 %273, i32 0
  br label %275

275:                                              ; preds = %270, %257
  %276 = phi i8* [ %274, %270 ], [ %239, %257 ]
  %277 = load i8, i8* %276, align 1
  %278 = load i8, i8* %242, align 4
  %279 = zext i8 %278 to i32
  tail call void @vp9_predict_intra_block(%struct.macroblockd* %13, i32 %279, i8 zeroext %201, i8 zeroext %277, i8* %266, i32 %260, i8* %266, i32 %260, i32 %262, i32 %254, i32 %235) #9
  %280 = load i8, i8* %182, align 1
  %281 = icmp eq i8 %280, 0
  br i1 %281, label %282, label %303

282:                                              ; preds = %275
  br i1 %238, label %283, label %290

283:                                              ; preds = %282
  %284 = load i32, i32* %183, align 4
  %285 = icmp eq i32 %284, 0
  br i1 %285, label %286, label %290

286:                                              ; preds = %283
  %287 = zext i8 %277 to i64
  %288 = getelementptr inbounds [10 x i32], [10 x i32]* @intra_mode_to_tx_type_lookup, i64 0, i64 %287
  %289 = load i32, i32* %288, align 4
  br label %290

290:                                              ; preds = %286, %283, %282
  %291 = phi i32 [ %289, %286 ], [ 0, %283 ], [ 0, %282 ]
  %292 = load i32*, i32** %243, align 8
  %293 = load i32, i32* %292, align 4
  %294 = icmp sgt i32 %293, 0
  br i1 %294, label %295, label %298

295:                                              ; preds = %290
  %296 = load i32, i32* %241, align 8
  tail call fastcc void @inverse_transform_block_intra(%struct.macroblockd* %13, i32 %235, i32 %291, i8 zeroext %201, i8* %266, i32 %296, i32 %293) #9
  %297 = load i32*, i32** %243, align 8
  br label %298

298:                                              ; preds = %295, %290
  %299 = phi i32* [ %297, %295 ], [ %292, %290 ]
  %300 = load i32*, i32** %246, align 8
  %301 = getelementptr inbounds i32, i32* %300, i64 %247
  store i32* %301, i32** %246, align 8
  %302 = getelementptr inbounds i32, i32* %299, i64 1
  store i32* %302, i32** %243, align 8
  br label %303

303:                                              ; preds = %275, %298
  %304 = add i64 %258, %248
  %305 = icmp slt i64 %304, %249
  br i1 %305, label %257, label %306

306:                                              ; preds = %303, %251
  %307 = add i64 %252, %248
  %308 = icmp slt i64 %307, %250
  br i1 %308, label %251, label %309

309:                                              ; preds = %306, %227
  %310 = add nuw nsw i64 %185, 1
  %311 = icmp eq i64 %310, 3
  br i1 %311, label %413, label %184

312:                                              ; preds = %171
  tail call fastcc void @dec_build_inter_predictors_sb(%struct.TileWorkerData* %0, %struct.VP9Decoder* %1, %struct.macroblockd* %13, i32 %2, i32 %3)
  %313 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %152, i64 0, i32 3
  %314 = load i8, i8* %313, align 1
  %315 = icmp eq i8 %314, 0
  br i1 %315, label %316, label %413

316:                                              ; preds = %312
  %317 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %152, i64 0, i32 0
  %318 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %152, i64 0, i32 2
  %319 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 9
  %320 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 10
  br label %321

321:                                              ; preds = %410, %316
  %322 = phi i64 [ 0, %316 ], [ %411, %410 ]
  %323 = icmp eq i64 %322, 0
  br i1 %323, label %336, label %324

324:                                              ; preds = %321
  %325 = load i8, i8* %317, align 4
  %326 = zext i8 %325 to i64
  %327 = load i8, i8* %318, align 2
  %328 = zext i8 %327 to i64
  %329 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 0, i64 %322, i32 1
  %330 = load i32, i32* %329, align 8
  %331 = sext i32 %330 to i64
  %332 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 0, i64 %322, i32 2
  %333 = load i32, i32* %332, align 4
  %334 = sext i32 %333 to i64
  %335 = getelementptr inbounds [13 x [4 x [2 x [2 x i8]]]], [13 x [4 x [2 x [2 x i8]]]]* @uv_txsize_lookup, i64 0, i64 %326, i64 %328, i64 %331, i64 %334
  br label %336

336:                                              ; preds = %324, %321
  %337 = phi i8* [ %335, %324 ], [ %318, %321 ]
  %338 = load i8, i8* %337, align 1
  %339 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 0, i64 %322, i32 8
  %340 = load i16, i16* %339, align 8
  %341 = zext i16 %340 to i32
  %342 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 0, i64 %322, i32 9
  %343 = load i16, i16* %342, align 2
  %344 = zext i16 %343 to i32
  %345 = zext i8 %338 to i32
  %346 = shl i32 1, %345
  %347 = load i32, i32* %123, align 4
  %348 = icmp sgt i32 %347, -1
  br i1 %348, label %354, label %349

349:                                              ; preds = %336
  %350 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 0, i64 %322, i32 1
  %351 = load i32, i32* %350, align 8
  %352 = add nsw i32 %351, 5
  %353 = ashr i32 %347, %352
  br label %354

354:                                              ; preds = %349, %336
  %355 = phi i32 [ %353, %349 ], [ 0, %336 ]
  %356 = add nsw i32 %355, %341
  %357 = load i32, i32* %116, align 4
  %358 = icmp sgt i32 %357, -1
  br i1 %358, label %364, label %359

359:                                              ; preds = %354
  %360 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 0, i64 %322, i32 2
  %361 = load i32, i32* %360, align 4
  %362 = add nsw i32 %361, 5
  %363 = ashr i32 %357, %362
  br label %364

364:                                              ; preds = %359, %354
  %365 = phi i32 [ %363, %359 ], [ 0, %354 ]
  %366 = add nsw i32 %365, %344
  %367 = select i1 %348, i32 0, i32 %356
  store i32 %367, i32* %319, align 8
  %368 = select i1 %358, i32 0, i32 %366
  store i32 %368, i32* %320, align 4
  %369 = icmp sgt i32 %366, 0
  br i1 %369, label %370, label %410

370:                                              ; preds = %364
  %371 = icmp sgt i32 %356, 0
  %372 = trunc i64 %322 to i32
  %373 = shl i64 %322, 32
  %374 = ashr exact i64 %373, 32
  %375 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 0, i64 %374, i32 13
  %376 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 0, i64 %374, i32 3, i32 0
  %377 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 0, i64 %374, i32 3, i32 1
  %378 = shl nuw nsw i32 %345, 1
  %379 = shl i32 16, %378
  %380 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 0, i64 %374, i32 0
  %381 = sext i32 %379 to i64
  br label %382

382:                                              ; preds = %407, %370
  %383 = phi i32 [ 0, %370 ], [ %408, %407 ]
  br i1 %371, label %384, label %407

384:                                              ; preds = %382
  %385 = load i32*, i32** %375, align 8
  br label %386

386:                                              ; preds = %384, %400
  %387 = phi i32* [ %404, %400 ], [ %385, %384 ]
  %388 = phi i32 [ %405, %400 ], [ 0, %384 ]
  %389 = load i32, i32* %387, align 4
  %390 = icmp sgt i32 %389, 0
  br i1 %390, label %391, label %400

391:                                              ; preds = %386
  %392 = load i8*, i8** %376, align 8
  %393 = load i32, i32* %377, align 8
  %394 = mul i32 %393, %383
  %395 = add i32 %394, %388
  %396 = shl i32 %395, 2
  %397 = sext i32 %396 to i64
  %398 = getelementptr inbounds i8, i8* %392, i64 %397
  tail call fastcc void @inverse_transform_block_inter(%struct.macroblockd* %13, i32 %372, i8 zeroext %338, i8* %398, i32 %393, i32 %389) #9
  %399 = load i32*, i32** %375, align 8
  br label %400

400:                                              ; preds = %386, %391
  %401 = phi i32* [ %387, %386 ], [ %399, %391 ]
  %402 = load i32*, i32** %380, align 8
  %403 = getelementptr inbounds i32, i32* %402, i64 %381
  store i32* %403, i32** %380, align 8
  %404 = getelementptr inbounds i32, i32* %401, i64 1
  store i32* %404, i32** %375, align 8
  %405 = add nsw i32 %388, %346
  %406 = icmp slt i32 %405, %356
  br i1 %406, label %386, label %407

407:                                              ; preds = %400, %382
  %408 = add nsw i32 %383, %346
  %409 = icmp slt i32 %408, %366
  br i1 %409, label %382, label %410

410:                                              ; preds = %407, %364
  %411 = add nuw nsw i64 %322, 1
  %412 = icmp eq i64 %411, 3
  br i1 %412, label %413, label %321

413:                                              ; preds = %410, %309, %312
  tail call void @vp9_build_mask(%struct.VP9Common* %8, %struct.MODE_INFO* %152, i32 %2, i32 %3, i32 %10, i32 %12) #9
  ret void
}

declare i32 @pthread_cond_wait(%union.pthread_cond_t*, %union.pthread_mutex_t*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @read_partition(%struct.TileWorkerData*, i32, i32, i32, i32, i32) unnamed_addr #0 {
  %7 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 21
  %8 = load i8*, i8** %7, align 16
  %9 = sext i32 %2 to i64
  %10 = getelementptr inbounds i8, i8* %8, i64 %9
  %11 = and i32 %1, 7
  %12 = zext i32 %11 to i64
  %13 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 22, i64 %12
  %14 = load i8, i8* %10, align 1
  %15 = sext i8 %14 to i32
  %16 = lshr i32 %15, %5
  %17 = and i32 %16, 1
  %18 = load i8, i8* %13, align 1
  %19 = sext i8 %18 to i32
  %20 = lshr i32 %19, %5
  %21 = shl i32 %20, 1
  %22 = and i32 %21, 2
  %23 = shl nsw i32 %5, 2
  %24 = or i32 %17, %23
  %25 = or i32 %24, %22
  %26 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 11
  %27 = load [3 x i8]*, [3 x i8]** %26, align 16
  %28 = sext i32 %25 to i64
  %29 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 3
  %30 = load %struct.FRAME_COUNTS*, %struct.FRAME_COUNTS** %29, align 16
  %31 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 3
  %32 = icmp ne i32 %3, 0
  %33 = icmp ne i32 %4, 0
  %34 = and i1 %32, %33
  br i1 %34, label %35, label %89

35:                                               ; preds = %6
  %36 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 3, i32 1
  %37 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 3, i32 2
  %38 = getelementptr inbounds %struct.vpx_reader, %struct.vpx_reader* %31, i64 0, i32 0
  %39 = load i32, i32* %36, align 8
  %40 = load i32, i32* %37, align 4
  br label %41

41:                                               ; preds = %68, %35
  %42 = phi i32 [ %40, %35 ], [ %80, %68 ]
  %43 = phi i32 [ %39, %35 ], [ %77, %68 ]
  %44 = phi i8 [ 0, %35 ], [ %84, %68 ]
  %45 = sext i8 %44 to i32
  %46 = ashr i32 %45, 1
  %47 = sext i32 %46 to i64
  %48 = getelementptr inbounds [3 x i8], [3 x i8]* %27, i64 %28, i64 %47
  %49 = load i8, i8* %48, align 1
  %50 = zext i8 %49 to i32
  %51 = mul i32 %43, %50
  %52 = sub nuw nsw i32 256, %50
  %53 = add i32 %52, %51
  %54 = lshr i32 %53, 8
  %55 = icmp slt i32 %42, 0
  br i1 %55, label %56, label %58

56:                                               ; preds = %41
  tail call void @vpx_reader_fill(%struct.vpx_reader* %31) #9
  %57 = load i32, i32* %37, align 4
  br label %58

58:                                               ; preds = %56, %41
  %59 = phi i32 [ %57, %56 ], [ %42, %41 ]
  %60 = load i64, i64* %38, align 8
  %61 = zext i32 %54 to i64
  %62 = shl i64 %61, 56
  %63 = icmp ult i64 %60, %62
  br i1 %63, label %68, label %64

64:                                               ; preds = %58
  %65 = load i32, i32* %36, align 8
  %66 = sub i32 %65, %54
  %67 = sub i64 %60, %62
  br label %68

68:                                               ; preds = %64, %58
  %69 = phi i64 [ %67, %64 ], [ %60, %58 ]
  %70 = phi i32 [ %66, %64 ], [ %54, %58 ]
  %71 = phi i32 [ 1, %64 ], [ 0, %58 ]
  %72 = and i32 %70, 255
  %73 = zext i32 %72 to i64
  %74 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %73
  %75 = load i8, i8* %74, align 1
  %76 = zext i8 %75 to i32
  %77 = shl i32 %70, %76
  %78 = zext i8 %75 to i64
  %79 = shl i64 %69, %78
  %80 = sub nsw i32 %59, %76
  store i64 %79, i64* %38, align 8
  store i32 %80, i32* %37, align 4
  store i32 %77, i32* %36, align 8
  %81 = add nuw nsw i32 %71, %45
  %82 = sext i32 %81 to i64
  %83 = getelementptr inbounds [6 x i8], [6 x i8]* @vp9_partition_tree, i64 0, i64 %82
  %84 = load i8, i8* %83, align 1
  %85 = icmp sgt i8 %84, 0
  br i1 %85, label %41, label %86

86:                                               ; preds = %68
  %87 = sext i8 %84 to i32
  %88 = sub nsw i32 0, %87
  br label %172

89:                                               ; preds = %6
  %90 = icmp eq i32 %3, 0
  %91 = and i1 %90, %33
  br i1 %91, label %92, label %131

92:                                               ; preds = %89
  %93 = getelementptr inbounds [3 x i8], [3 x i8]* %27, i64 %28, i64 1
  %94 = load i8, i8* %93, align 1
  %95 = zext i8 %94 to i32
  %96 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 3, i32 1
  %97 = load i32, i32* %96, align 8
  %98 = mul i32 %97, %95
  %99 = sub nuw nsw i32 256, %95
  %100 = add i32 %99, %98
  %101 = lshr i32 %100, 8
  %102 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 3, i32 2
  %103 = load i32, i32* %102, align 4
  %104 = icmp slt i32 %103, 0
  br i1 %104, label %105, label %107

105:                                              ; preds = %92
  tail call void @vpx_reader_fill(%struct.vpx_reader* %31) #9
  %106 = load i32, i32* %102, align 4
  br label %107

107:                                              ; preds = %105, %92
  %108 = phi i32 [ %106, %105 ], [ %103, %92 ]
  %109 = getelementptr inbounds %struct.vpx_reader, %struct.vpx_reader* %31, i64 0, i32 0
  %110 = load i64, i64* %109, align 8
  %111 = zext i32 %101 to i64
  %112 = shl i64 %111, 56
  %113 = icmp ult i64 %110, %112
  br i1 %113, label %118, label %114

114:                                              ; preds = %107
  %115 = load i32, i32* %96, align 8
  %116 = sub i32 %115, %101
  %117 = sub i64 %110, %112
  br label %118

118:                                              ; preds = %107, %114
  %119 = phi i64 [ %117, %114 ], [ %110, %107 ]
  %120 = phi i32 [ %116, %114 ], [ %101, %107 ]
  %121 = phi i32 [ 3, %114 ], [ 1, %107 ]
  %122 = and i32 %120, 255
  %123 = zext i32 %122 to i64
  %124 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %123
  %125 = load i8, i8* %124, align 1
  %126 = zext i8 %125 to i32
  %127 = shl i32 %120, %126
  %128 = zext i8 %125 to i64
  %129 = shl i64 %119, %128
  %130 = sub nsw i32 %108, %126
  store i64 %129, i64* %109, align 8
  store i32 %130, i32* %102, align 4
  store i32 %127, i32* %96, align 8
  br label %172

131:                                              ; preds = %89
  %132 = or i1 %90, %33
  br i1 %132, label %172, label %133

133:                                              ; preds = %131
  %134 = getelementptr inbounds [3 x i8], [3 x i8]* %27, i64 %28, i64 2
  %135 = load i8, i8* %134, align 1
  %136 = zext i8 %135 to i32
  %137 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 3, i32 1
  %138 = load i32, i32* %137, align 8
  %139 = mul i32 %138, %136
  %140 = sub nuw nsw i32 256, %136
  %141 = add i32 %140, %139
  %142 = lshr i32 %141, 8
  %143 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 3, i32 2
  %144 = load i32, i32* %143, align 4
  %145 = icmp slt i32 %144, 0
  br i1 %145, label %146, label %148

146:                                              ; preds = %133
  tail call void @vpx_reader_fill(%struct.vpx_reader* %31) #9
  %147 = load i32, i32* %143, align 4
  br label %148

148:                                              ; preds = %146, %133
  %149 = phi i32 [ %147, %146 ], [ %144, %133 ]
  %150 = getelementptr inbounds %struct.vpx_reader, %struct.vpx_reader* %31, i64 0, i32 0
  %151 = load i64, i64* %150, align 8
  %152 = zext i32 %142 to i64
  %153 = shl i64 %152, 56
  %154 = icmp ult i64 %151, %153
  br i1 %154, label %159, label %155

155:                                              ; preds = %148
  %156 = load i32, i32* %137, align 8
  %157 = sub i32 %156, %142
  %158 = sub i64 %151, %153
  br label %159

159:                                              ; preds = %148, %155
  %160 = phi i64 [ %158, %155 ], [ %151, %148 ]
  %161 = phi i32 [ %157, %155 ], [ %142, %148 ]
  %162 = phi i32 [ 3, %155 ], [ 2, %148 ]
  %163 = and i32 %161, 255
  %164 = zext i32 %163 to i64
  %165 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %164
  %166 = load i8, i8* %165, align 1
  %167 = zext i8 %166 to i32
  %168 = shl i32 %161, %167
  %169 = zext i8 %166 to i64
  %170 = shl i64 %160, %169
  %171 = sub nsw i32 %149, %167
  store i64 %170, i64* %150, align 8
  store i32 %171, i32* %143, align 4
  store i32 %168, i32* %137, align 8
  br label %172

172:                                              ; preds = %159, %118, %131, %86
  %173 = phi i32 [ %88, %86 ], [ 3, %131 ], [ %121, %118 ], [ %162, %159 ]
  %174 = icmp eq %struct.FRAME_COUNTS* %30, null
  br i1 %174, label %180, label %175

175:                                              ; preds = %172
  %176 = zext i32 %173 to i64
  %177 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %30, i64 0, i32 2, i64 %28, i64 %176
  %178 = load i32, i32* %177, align 4
  %179 = add i32 %178, 1
  store i32 %179, i32* %177, align 4
  br label %180

180:                                              ; preds = %172, %175
  ret i32 %173
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @dec_build_inter_predictors_sb(%struct.TileWorkerData*, %struct.VP9Decoder*, %struct.macroblockd*, i32, i32) unnamed_addr #0 {
  %6 = alloca i32, align 4
  %7 = bitcast i32* %6 to %struct.mv*
  %8 = alloca i32, align 4
  %9 = bitcast i32* %8 to %struct.mv*
  %10 = shl nsw i32 %4, 3
  %11 = shl nsw i32 %3, 3
  %12 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %2, i64 0, i32 6
  %13 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %12, align 8
  %14 = load %struct.MODE_INFO*, %struct.MODE_INFO** %13, align 8
  %15 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %14, i64 0, i32 7
  %16 = load i8, i8* %15, align 1
  %17 = zext i8 %16 to i64
  %18 = getelementptr inbounds [5 x [8 x i16]*], [5 x [8 x i16]*]* @vp9_filter_kernels, i64 0, i64 %17
  %19 = load [8 x i16]*, [8 x i16]** %18, align 8
  %20 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %14, i64 0, i32 0
  %21 = load i8, i8* %20, align 4
  %22 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %14, i64 0, i32 8, i64 1
  %23 = load i8, i8* %22, align 1
  %24 = icmp sgt i8 %23, 0
  %25 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %1, i64 0, i32 1, i32 89
  %26 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %2, i64 0, i32 26
  %27 = icmp ult i8 %21, 3
  %28 = bitcast i32* %8 to i8*
  %29 = bitcast i32* %8 to i16*
  %30 = getelementptr inbounds %struct.mv, %struct.mv* %9, i64 0, i32 1
  %31 = bitcast i32* %6 to i8*
  %32 = bitcast i32* %6 to i16*
  %33 = getelementptr inbounds %struct.mv, %struct.mv* %7, i64 0, i32 1
  %34 = select i1 %24, i64 2, i64 1
  %35 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %2, i64 0, i32 0, i64 0, i32 3
  %36 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %2, i64 0, i32 0, i64 0, i32 8
  %37 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %2, i64 0, i32 0, i64 0, i32 9
  %38 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %2, i64 0, i32 0, i64 1, i32 3
  %39 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %2, i64 0, i32 0, i64 1, i32 8
  %40 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %2, i64 0, i32 0, i64 1, i32 9
  %41 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %2, i64 0, i32 0, i64 2, i32 3
  %42 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %2, i64 0, i32 0, i64 2, i32 8
  %43 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %2, i64 0, i32 0, i64 2, i32 9
  br label %44

44:                                               ; preds = %154, %5
  %45 = phi i64 [ %155, %154 ], [ 0, %5 ]
  %46 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %14, i64 0, i32 8, i64 %45
  %47 = load i8, i8* %46, align 1
  %48 = sext i8 %47 to i64
  %49 = add nsw i64 %48, -1
  %50 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %1, i64 0, i32 1, i32 17, i64 %49
  %51 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %1, i64 0, i32 1, i32 17, i64 %49, i32 2
  %52 = getelementptr inbounds %struct.RefBuffer, %struct.RefBuffer* %50, i64 0, i32 0
  %53 = load i32, i32* %52, align 8
  %54 = load %struct.BufferPool*, %struct.BufferPool** %25, align 8
  %55 = sext i32 %53 to i64
  %56 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %54, i64 0, i32 3, i64 %55
  %57 = getelementptr inbounds %struct.scale_factors, %struct.scale_factors* %51, i64 0, i32 0
  %58 = load i32, i32* %57, align 8
  %59 = icmp eq i32 %58, -1
  br i1 %59, label %64, label %60

60:                                               ; preds = %44
  %61 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %1, i64 0, i32 1, i32 17, i64 %49, i32 2, i32 1
  %62 = load i32, i32* %61, align 4
  %63 = icmp eq i32 %62, -1
  br i1 %63, label %64, label %68

64:                                               ; preds = %60, %44
  %65 = load %struct.vpx_internal_error_info*, %struct.vpx_internal_error_info** %26, align 8
  call void (%struct.vpx_internal_error_info*, i32, i8*, ...) @vpx_internal_error(%struct.vpx_internal_error_info* %65, i32 5, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.32, i64 0, i64 0)) #9
  %66 = load i32, i32* %57, align 8
  %67 = icmp eq i32 %66, -1
  br i1 %67, label %78, label %68

68:                                               ; preds = %60, %64
  %69 = phi i32 [ %66, %64 ], [ %58, %60 ]
  %70 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %1, i64 0, i32 1, i32 17, i64 %49, i32 2, i32 1
  %71 = load i32, i32* %70, align 4
  %72 = icmp eq i32 %71, -1
  br i1 %72, label %78, label %73

73:                                               ; preds = %68
  %74 = icmp eq i32 %69, 16384
  br i1 %74, label %81, label %75

75:                                               ; preds = %73
  %76 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %1, i64 0, i32 1, i32 17, i64 %49, i32 1
  %77 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %76, align 8
  br label %87

78:                                               ; preds = %68, %64
  %79 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %1, i64 0, i32 1, i32 17, i64 %49, i32 1
  %80 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %79, align 8
  br label %85

81:                                               ; preds = %73
  %82 = icmp eq i32 %71, 16384
  %83 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %1, i64 0, i32 1, i32 17, i64 %49, i32 1
  %84 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %83, align 8
  br i1 %82, label %85, label %87

85:                                               ; preds = %78, %81
  %86 = phi %struct.yv12_buffer_config* [ %80, %78 ], [ %84, %81 ]
  br label %87

87:                                               ; preds = %75, %81, %85
  %88 = phi %struct.yv12_buffer_config* [ %86, %85 ], [ %84, %81 ], [ %77, %75 ]
  %89 = phi i32 [ 0, %85 ], [ 1, %81 ], [ 1, %75 ]
  %90 = phi %struct.scale_factors* [ null, %85 ], [ %51, %81 ], [ %51, %75 ]
  %91 = trunc i64 %45 to i32
  call void @vp9_setup_pre_planes(%struct.macroblockd* %2, i32 %91, %struct.yv12_buffer_config* %88, i32 %3, i32 %4, %struct.scale_factors* %90) #9
  %92 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %2, i64 0, i32 17, i64 %45
  store %struct.RefBuffer* %50, %struct.RefBuffer** %92, align 8
  br i1 %27, label %93, label %130

93:                                               ; preds = %87, %127
  %94 = phi i64 [ %128, %127 ], [ 0, %87 ]
  %95 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %2, i64 0, i32 0, i64 %94
  %96 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %2, i64 0, i32 0, i64 %94, i32 3
  %97 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %2, i64 0, i32 0, i64 %94, i32 8
  %98 = load i16, i16* %97, align 8
  %99 = zext i16 %98 to i32
  %100 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %2, i64 0, i32 0, i64 %94, i32 9
  %101 = load i16, i16* %100, align 2
  %102 = zext i16 %101 to i32
  %103 = shl nuw nsw i32 %99, 2
  %104 = shl nuw nsw i32 %102, 2
  %105 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %2, i64 0, i32 0, i64 %94, i32 4, i64 %45
  %106 = icmp eq i16 %101, 0
  br i1 %106, label %127, label %107

107:                                              ; preds = %93
  %108 = icmp eq i16 %98, 0
  %109 = trunc i64 %94 to i32
  br label %110

110:                                              ; preds = %123, %107
  %111 = phi i32 [ 0, %107 ], [ %125, %123 ]
  %112 = phi i32 [ 0, %107 ], [ %124, %123 ]
  br i1 %108, label %123, label %113

113:                                              ; preds = %110
  %114 = shl nsw i32 %111, 2
  br label %115

115:                                              ; preds = %115, %113
  %116 = phi i32 [ 0, %113 ], [ %121, %115 ]
  %117 = phi i32 [ %112, %113 ], [ %118, %115 ]
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %31) #9
  store i16 -21846, i16* %32, align 4
  store i16 -21846, i16* %33, align 2
  %118 = add nsw i32 %117, 1
  %119 = call i32 @average_split_mvs(%struct.macroblockd_plane* %95, %struct.MODE_INFO* %14, i32 %91, i32 %117) #9
  store i32 %119, i32* %6, align 4
  %120 = shl nsw i32 %116, 2
  call fastcc void @dec_build_inter_predictors(%struct.TileWorkerData* %0, %struct.macroblockd* %2, i32 %109, i32 %103, i32 %104, i32 %120, i32 %114, i32 4, i32 4, i32 %10, i32 %11, [8 x i16]* %19, %struct.scale_factors* %51, %struct.buf_2d* %105, %struct.buf_2d* %96, %struct.mv* nonnull %7, %struct.RefCntBuffer* %56, i32 %89, i32 %91)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %31) #9
  %121 = add nuw nsw i32 %116, 1
  %122 = icmp eq i32 %121, %99
  br i1 %122, label %123, label %115

123:                                              ; preds = %115, %110
  %124 = phi i32 [ %112, %110 ], [ %118, %115 ]
  %125 = add nuw nsw i32 %111, 1
  %126 = icmp eq i32 %125, %102
  br i1 %126, label %127, label %110

127:                                              ; preds = %123, %93
  %128 = add nuw nsw i64 %94, 1
  %129 = icmp eq i64 %128, 3
  br i1 %129, label %154, label %93

130:                                              ; preds = %87
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %28) #9
  store i16 -21846, i16* %29, align 4
  store i16 -21846, i16* %30, align 2
  %131 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %14, i64 0, i32 9, i64 %45, i32 0
  %132 = load i32, i32* %131, align 4
  store i32 %132, i32* %8, align 4
  %133 = load i16, i16* %36, align 8
  %134 = zext i16 %133 to i32
  %135 = load i16, i16* %37, align 2
  %136 = zext i16 %135 to i32
  %137 = shl nuw nsw i32 %134, 2
  %138 = shl nuw nsw i32 %136, 2
  %139 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %2, i64 0, i32 0, i64 0, i32 4, i64 %45
  call fastcc void @dec_build_inter_predictors(%struct.TileWorkerData* %0, %struct.macroblockd* %2, i32 0, i32 %137, i32 %138, i32 0, i32 0, i32 %137, i32 %138, i32 %10, i32 %11, [8 x i16]* %19, %struct.scale_factors* %51, %struct.buf_2d* %139, %struct.buf_2d* %35, %struct.mv* nonnull %9, %struct.RefCntBuffer* %56, i32 %89, i32 %91)
  %140 = load i16, i16* %39, align 8
  %141 = zext i16 %140 to i32
  %142 = load i16, i16* %40, align 2
  %143 = zext i16 %142 to i32
  %144 = shl nuw nsw i32 %141, 2
  %145 = shl nuw nsw i32 %143, 2
  %146 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %2, i64 0, i32 0, i64 1, i32 4, i64 %45
  call fastcc void @dec_build_inter_predictors(%struct.TileWorkerData* %0, %struct.macroblockd* %2, i32 1, i32 %144, i32 %145, i32 0, i32 0, i32 %144, i32 %145, i32 %10, i32 %11, [8 x i16]* %19, %struct.scale_factors* %51, %struct.buf_2d* %146, %struct.buf_2d* %38, %struct.mv* nonnull %9, %struct.RefCntBuffer* %56, i32 %89, i32 %91)
  %147 = load i16, i16* %42, align 8
  %148 = zext i16 %147 to i32
  %149 = load i16, i16* %43, align 2
  %150 = zext i16 %149 to i32
  %151 = shl nuw nsw i32 %148, 2
  %152 = shl nuw nsw i32 %150, 2
  %153 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %2, i64 0, i32 0, i64 2, i32 4, i64 %45
  call fastcc void @dec_build_inter_predictors(%struct.TileWorkerData* %0, %struct.macroblockd* %2, i32 2, i32 %151, i32 %152, i32 0, i32 0, i32 %151, i32 %152, i32 %10, i32 %11, [8 x i16]* %19, %struct.scale_factors* %51, %struct.buf_2d* %153, %struct.buf_2d* %41, %struct.mv* nonnull %9, %struct.RefCntBuffer* %56, i32 %89, i32 %91)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %28) #9
  br label %154

154:                                              ; preds = %127, %130
  %155 = add nuw nsw i64 %45, 1
  %156 = icmp eq i64 %155, %34
  br i1 %156, label %157, label %44

157:                                              ; preds = %154
  ret void
}

declare void @vp9_build_mask(%struct.VP9Common*, %struct.MODE_INFO*, i32, i32, i32, i32) local_unnamed_addr #1

declare void @vp9_setup_dst_planes(%struct.macroblockd_plane*, %struct.yv12_buffer_config*, i32, i32) local_unnamed_addr #1

declare void @vp9_predict_intra_block(%struct.macroblockd*, i32, i8 zeroext, i8 zeroext, i8*, i32, i8*, i32, i32, i32, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @inverse_transform_block_intra(%struct.macroblockd* nocapture readonly, i32, i32, i8 zeroext, i8*, i32, i32) unnamed_addr #0 {
  %8 = sext i32 %1 to i64
  %9 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %0, i64 0, i32 0, i64 %8, i32 0
  %10 = load i32*, i32** %9, align 8
  %11 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %0, i64 0, i32 18
  %12 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %11, align 8
  %13 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %12, i64 0, i32 29
  %14 = load i32, i32* %13, align 8
  %15 = and i32 %14, 8
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %40, label %17

17:                                               ; preds = %7
  %18 = ptrtoint i8* %4 to i64
  %19 = shl i64 %18, 1
  %20 = inttoptr i64 %19 to i16*
  %21 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %0, i64 0, i32 24
  %22 = load i32, i32* %21, align 4
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %27, label %24

24:                                               ; preds = %17
  %25 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %0, i64 0, i32 23
  %26 = load i32, i32* %25, align 8
  tail call void @vp9_highbd_iwht4x4_add(i32* %10, i16* %20, i32 %5, i32 %6, i32 %26) #9
  br label %50

27:                                               ; preds = %17
  switch i8 %3, label %50 [
    i8 0, label %28
    i8 1, label %31
    i8 2, label %34
    i8 3, label %37
  ]

28:                                               ; preds = %27
  %29 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %0, i64 0, i32 23
  %30 = load i32, i32* %29, align 8
  tail call void @vp9_highbd_iht4x4_add(i32 %2, i32* %10, i16* %20, i32 %5, i32 %6, i32 %30) #9
  br label %50

31:                                               ; preds = %27
  %32 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %0, i64 0, i32 23
  %33 = load i32, i32* %32, align 8
  tail call void @vp9_highbd_iht8x8_add(i32 %2, i32* %10, i16* %20, i32 %5, i32 %6, i32 %33) #9
  br label %50

34:                                               ; preds = %27
  %35 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %0, i64 0, i32 23
  %36 = load i32, i32* %35, align 8
  tail call void @vp9_highbd_iht16x16_add(i32 %2, i32* %10, i16* %20, i32 %5, i32 %6, i32 %36) #9
  br label %50

37:                                               ; preds = %27
  %38 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %0, i64 0, i32 23
  %39 = load i32, i32* %38, align 8
  tail call void @vp9_highbd_idct32x32_add(i32* %10, i16* %20, i32 %5, i32 %6, i32 %39) #9
  br label %50

40:                                               ; preds = %7
  %41 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %0, i64 0, i32 24
  %42 = load i32, i32* %41, align 4
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %45, label %44

44:                                               ; preds = %40
  tail call void @vp9_iwht4x4_add(i32* %10, i8* %4, i32 %5, i32 %6) #9
  br label %50

45:                                               ; preds = %40
  switch i8 %3, label %77 [
    i8 0, label %46
    i8 1, label %47
    i8 2, label %48
    i8 3, label %49
  ]

46:                                               ; preds = %45
  tail call void @vp9_iht4x4_add(i32 %2, i32* %10, i8* %4, i32 %5, i32 %6) #9
  br label %50

47:                                               ; preds = %45
  tail call void @vp9_iht8x8_add(i32 %2, i32* %10, i8* %4, i32 %5, i32 %6) #9
  br label %50

48:                                               ; preds = %45
  tail call void @vp9_iht16x16_add(i32 %2, i32* %10, i8* %4, i32 %5, i32 %6) #9
  br label %50

49:                                               ; preds = %45
  tail call void @vp9_idct32x32_add(i32* %10, i8* %4, i32 %5, i32 %6) #9
  br label %50

50:                                               ; preds = %24, %27, %37, %34, %31, %28, %44, %49, %48, %47, %46
  %51 = icmp eq i32 %6, 1
  br i1 %51, label %52, label %53

52:                                               ; preds = %50
  store i32 0, i32* %10, align 4
  br label %77

53:                                               ; preds = %50
  %54 = icmp eq i32 %2, 0
  br i1 %54, label %55, label %65

55:                                               ; preds = %53
  %56 = icmp ult i8 %3, 3
  %57 = icmp slt i32 %6, 11
  %58 = and i1 %56, %57
  br i1 %58, label %59, label %65

59:                                               ; preds = %55
  %60 = zext i8 %3 to i32
  %61 = bitcast i32* %10 to i8*
  %62 = shl i32 16, %60
  %63 = sext i32 %62 to i64
  %64 = shl nsw i64 %63, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %61, i8 0, i64 %64, i1 false)
  br label %77

65:                                               ; preds = %55, %53
  %66 = icmp eq i8 %3, 3
  %67 = icmp slt i32 %6, 35
  %68 = and i1 %66, %67
  %69 = bitcast i32* %10 to i8*
  br i1 %68, label %70, label %71

70:                                               ; preds = %65
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %69, i8 0, i64 1024, i1 false)
  br label %77

71:                                               ; preds = %65
  %72 = zext i8 %3 to i32
  %73 = shl nuw nsw i32 %72, 1
  %74 = shl i32 16, %73
  %75 = sext i32 %74 to i64
  %76 = shl nsw i64 %75, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %69, i8 0, i64 %76, i1 false)
  br label %77

77:                                               ; preds = %52, %70, %71, %59, %45
  ret void
}

declare void @vp9_highbd_iwht4x4_add(i32*, i16*, i32, i32, i32) local_unnamed_addr #1

declare void @vp9_highbd_iht4x4_add(i32, i32*, i16*, i32, i32, i32) local_unnamed_addr #1

declare void @vp9_highbd_iht8x8_add(i32, i32*, i16*, i32, i32, i32) local_unnamed_addr #1

declare void @vp9_highbd_iht16x16_add(i32, i32*, i16*, i32, i32, i32) local_unnamed_addr #1

declare void @vp9_highbd_idct32x32_add(i32*, i16*, i32, i32, i32) local_unnamed_addr #1

declare void @vp9_iwht4x4_add(i32*, i8*, i32, i32) local_unnamed_addr #1

declare void @vp9_iht4x4_add(i32, i32*, i8*, i32, i32) local_unnamed_addr #1

declare void @vp9_iht8x8_add(i32, i32*, i8*, i32, i32) local_unnamed_addr #1

declare void @vp9_iht16x16_add(i32, i32*, i8*, i32, i32) local_unnamed_addr #1

declare void @vp9_idct32x32_add(i32*, i8*, i32, i32) local_unnamed_addr #1

declare void @vp9_setup_pre_planes(%struct.macroblockd*, i32, %struct.yv12_buffer_config*, i32, i32, %struct.scale_factors*) local_unnamed_addr #1

declare i32 @average_split_mvs(%struct.macroblockd_plane*, %struct.MODE_INFO*, i32, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @dec_build_inter_predictors(%struct.TileWorkerData*, %struct.macroblockd*, i32, i32, i32, i32, i32, i32, i32, i32, i32, [8 x i16]*, %struct.scale_factors*, %struct.buf_2d* nocapture readonly, %struct.buf_2d* nocapture readonly, %struct.mv*, %struct.RefCntBuffer* nocapture readonly, i32, i32) unnamed_addr #0 {
  %20 = alloca i32, align 4
  %21 = sext i32 %2 to i64
  %22 = getelementptr inbounds %struct.buf_2d, %struct.buf_2d* %14, i64 0, i32 0
  %23 = load i8*, i8** %22, align 8
  %24 = getelementptr inbounds %struct.buf_2d, %struct.buf_2d* %14, i64 0, i32 1
  %25 = load i32, i32* %24, align 8
  %26 = mul nsw i32 %25, %6
  %27 = sext i32 %26 to i64
  %28 = getelementptr inbounds i8, i8* %23, i64 %27
  %29 = sext i32 %5 to i64
  %30 = getelementptr inbounds i8, i8* %28, i64 %29
  %31 = icmp eq i32 %2, 0
  %32 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %16, i64 0, i32 8, i32 2
  %33 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %16, i64 0, i32 8, i32 3
  %34 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %16, i64 0, i32 8, i32 13
  %35 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %16, i64 0, i32 8, i32 7
  %36 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %16, i64 0, i32 8, i32 8
  %37 = icmp eq i32 %2, 1
  %38 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %16, i64 0, i32 8, i32 14
  %39 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %16, i64 0, i32 8, i32 15
  %40 = select i1 %37, i8** %38, i8** %39
  %41 = select i1 %31, i32* %32, i32* %35
  %42 = select i1 %31, i32* %33, i32* %36
  %43 = select i1 %31, i8** %34, i8** %40
  %44 = load i32, i32* %42, align 4
  %45 = load i32, i32* %41, align 4
  %46 = load i8*, i8** %43, align 8
  %47 = icmp ne i32 %17, 0
  br i1 %47, label %48, label %92

48:                                               ; preds = %19
  %49 = bitcast i32* %20 to %struct.mv*
  %50 = bitcast i32* %20 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %50) #9
  %51 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 0, i64 %21, i32 1
  %52 = load i32, i32* %51, align 8
  %53 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 0, i64 %21, i32 2
  %54 = load i32, i32* %53, align 4
  %55 = tail call i32 @clamp_mv_to_umv_border_sb(%struct.macroblockd* %1, %struct.mv* %15, i32 %3, i32 %4, i32 %52, i32 %54) #9
  store i32 %55, i32* %20, align 4
  %56 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 12
  %57 = load i32, i32* %56, align 8
  %58 = sub nsw i32 0, %57
  %59 = load i32, i32* %51, align 8
  %60 = add nsw i32 %59, 3
  %61 = ashr i32 %58, %60
  %62 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 14
  %63 = load i32, i32* %62, align 8
  %64 = sub nsw i32 0, %63
  %65 = load i32, i32* %53, align 4
  %66 = add nsw i32 %65, 3
  %67 = ashr i32 %64, %66
  %68 = add nsw i32 %61, %5
  %69 = shl i32 %68, 4
  %70 = add nsw i32 %67, %6
  %71 = shl i32 %70, 4
  %72 = getelementptr inbounds %struct.scale_factors, %struct.scale_factors* %12, i64 0, i32 4
  %73 = load i32 (i32, %struct.scale_factors*)*, i32 (i32, %struct.scale_factors*)** %72, align 8
  %74 = tail call i32 %73(i32 %69, %struct.scale_factors* %12) #9
  %75 = getelementptr inbounds %struct.scale_factors, %struct.scale_factors* %12, i64 0, i32 5
  %76 = load i32 (i32, %struct.scale_factors*)*, i32 (i32, %struct.scale_factors*)** %75, align 8
  %77 = tail call i32 %76(i32 %71, %struct.scale_factors* %12) #9
  %78 = load i32 (i32, %struct.scale_factors*)*, i32 (i32, %struct.scale_factors*)** %72, align 8
  %79 = tail call i32 %78(i32 %68, %struct.scale_factors* %12) #9
  %80 = load i32 (i32, %struct.scale_factors*)*, i32 (i32, %struct.scale_factors*)** %75, align 8
  %81 = tail call i32 %80(i32 %70, %struct.scale_factors* %12) #9
  %82 = add nsw i32 %9, %5
  %83 = add nsw i32 %10, %6
  %84 = call i64 @vp9_scale_mv(%struct.mv* nonnull %49, i32 %82, i32 %83, %struct.scale_factors* %12) #9
  %85 = trunc i64 %84 to i32
  %86 = lshr i64 %84, 32
  %87 = trunc i64 %86 to i32
  %88 = getelementptr inbounds %struct.scale_factors, %struct.scale_factors* %12, i64 0, i32 2
  %89 = load i32, i32* %88, align 8
  %90 = getelementptr inbounds %struct.scale_factors, %struct.scale_factors* %12, i64 0, i32 3
  %91 = load i32, i32* %90, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %50) #9
  br label %121

92:                                               ; preds = %19
  %93 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 12
  %94 = load i32, i32* %93, align 8
  %95 = sub nsw i32 0, %94
  %96 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 0, i64 %21, i32 1
  %97 = load i32, i32* %96, align 8
  %98 = add nsw i32 %97, 3
  %99 = ashr i32 %95, %98
  %100 = add nsw i32 %99, %5
  %101 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 14
  %102 = load i32, i32* %101, align 8
  %103 = sub nsw i32 0, %102
  %104 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 0, i64 %21, i32 2
  %105 = load i32, i32* %104, align 4
  %106 = add nsw i32 %105, 3
  %107 = ashr i32 %103, %106
  %108 = add nsw i32 %107, %6
  %109 = shl i32 %100, 4
  %110 = shl i32 %108, 4
  %111 = getelementptr inbounds %struct.mv, %struct.mv* %15, i64 0, i32 0
  %112 = load i16, i16* %111, align 2
  %113 = sext i16 %112 to i32
  %114 = sub nsw i32 1, %105
  %115 = shl i32 %113, %114
  %116 = getelementptr inbounds %struct.mv, %struct.mv* %15, i64 0, i32 1
  %117 = load i16, i16* %116, align 2
  %118 = sext i16 %117 to i32
  %119 = sub nsw i32 1, %97
  %120 = shl i32 %118, %119
  br label %121

121:                                              ; preds = %92, %48
  %122 = phi i32 [ %81, %48 ], [ %108, %92 ]
  %123 = phi i32 [ %74, %48 ], [ %109, %92 ]
  %124 = phi i32 [ %77, %48 ], [ %110, %92 ]
  %125 = phi i32 [ %79, %48 ], [ %100, %92 ]
  %126 = phi i32 [ %91, %48 ], [ 16, %92 ]
  %127 = phi i32 [ %89, %48 ], [ 16, %92 ]
  %128 = phi i32 [ %85, %48 ], [ %115, %92 ]
  %129 = phi i32 [ %87, %48 ], [ %120, %92 ]
  %130 = and i32 %129, 15
  %131 = and i32 %128, 15
  %132 = ashr i32 %129, 4
  %133 = add nsw i32 %132, %125
  %134 = ashr i32 %128, 4
  %135 = add nsw i32 %134, %122
  %136 = getelementptr inbounds %struct.buf_2d, %struct.buf_2d* %13, i64 0, i32 1
  %137 = load i32, i32* %136, align 8
  %138 = mul nsw i32 %135, %137
  %139 = sext i32 %138 to i64
  %140 = getelementptr inbounds i8, i8* %46, i64 %139
  %141 = sext i32 %133 to i64
  %142 = getelementptr inbounds i8, i8* %140, i64 %141
  %143 = xor i1 %47, true
  %144 = or i32 %45, %44
  %145 = and i32 %144, 7
  %146 = or i32 %145, %128
  %147 = or i32 %146, %129
  %148 = icmp eq i32 %147, 0
  %149 = and i1 %148, %143
  br i1 %149, label %556, label %150

150:                                              ; preds = %121
  %151 = add nsw i32 %8, -1
  %152 = mul nsw i32 %126, %151
  %153 = add i32 %152, %124
  %154 = add i32 %153, %128
  %155 = ashr i32 %154, 4
  %156 = add nsw i32 %155, 1
  %157 = add nsw i32 %7, -1
  %158 = mul nsw i32 %127, %157
  %159 = add i32 %158, %123
  %160 = add i32 %159, %129
  %161 = ashr i32 %160, 4
  %162 = icmp eq i32 %130, 0
  br i1 %162, label %163, label %168

163:                                              ; preds = %150
  %164 = add nsw i32 %161, 1
  %165 = getelementptr inbounds %struct.scale_factors, %struct.scale_factors* %12, i64 0, i32 2
  %166 = load i32, i32* %165, align 8
  %167 = icmp eq i32 %166, 16
  br i1 %167, label %171, label %168

168:                                              ; preds = %163, %150
  %169 = add nsw i32 %133, -3
  %170 = add nsw i32 %161, 5
  br label %171

171:                                              ; preds = %163, %168
  %172 = phi i32 [ %169, %168 ], [ %133, %163 ]
  %173 = phi i32 [ %170, %168 ], [ %164, %163 ]
  %174 = phi i32 [ 3, %168 ], [ 0, %163 ]
  %175 = icmp eq i32 %131, 0
  br i1 %175, label %176, label %180

176:                                              ; preds = %171
  %177 = getelementptr inbounds %struct.scale_factors, %struct.scale_factors* %12, i64 0, i32 3
  %178 = load i32, i32* %177, align 4
  %179 = icmp eq i32 %178, 16
  br i1 %179, label %183, label %180

180:                                              ; preds = %176, %171
  %181 = add nsw i32 %135, -3
  %182 = add nsw i32 %155, 5
  br label %183

183:                                              ; preds = %176, %180
  %184 = phi i32 [ %181, %180 ], [ %135, %176 ]
  %185 = phi i32 [ %182, %180 ], [ %156, %176 ]
  %186 = phi i32 [ 3, %180 ], [ 0, %176 ]
  %187 = icmp slt i32 %172, 0
  br i1 %187, label %202, label %188

188:                                              ; preds = %183
  %189 = icmp sge i32 %172, %45
  %190 = icmp slt i32 %173, 0
  %191 = or i1 %189, %190
  br i1 %191, label %202, label %192

192:                                              ; preds = %188
  %193 = icmp sge i32 %173, %45
  %194 = icmp slt i32 %184, 0
  %195 = or i1 %193, %194
  br i1 %195, label %202, label %196

196:                                              ; preds = %192
  %197 = icmp slt i32 %184, %44
  %198 = icmp sgt i32 %185, -1
  %199 = and i1 %197, %198
  %200 = icmp slt i32 %185, %44
  %201 = and i1 %200, %199
  br i1 %201, label %556, label %202

202:                                              ; preds = %196, %192, %188, %183
  %203 = mul nsw i32 %184, %137
  %204 = sext i32 %203 to i64
  %205 = getelementptr inbounds i8, i8* %46, i64 %204
  %206 = sext i32 %172 to i64
  %207 = getelementptr inbounds i8, i8* %205, i64 %206
  %208 = sub nsw i32 %173, %172
  %209 = add nsw i32 %208, 1
  %210 = sub nsw i32 %185, %184
  %211 = add nsw i32 %210, 1
  %212 = mul nsw i32 %186, %209
  %213 = add nsw i32 %212, %174
  %214 = load i32, i32* %24, align 8
  %215 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 10, i64 0
  %216 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 18
  %217 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %216, align 8
  %218 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %217, i64 0, i32 29
  %219 = load i32, i32* %218, align 8
  %220 = and i32 %219, 8
  %221 = icmp eq i32 %220, 0
  br i1 %221, label %477, label %222

222:                                              ; preds = %202
  %223 = ptrtoint i8* %207 to i64
  %224 = shl i64 %223, 1
  %225 = inttoptr i64 %224 to i16*
  %226 = sub nsw i64 0, %206
  %227 = getelementptr inbounds i16, i16* %225, i64 %226
  %228 = sub nsw i64 0, %204
  %229 = getelementptr inbounds i16, i16* %227, i64 %228
  %230 = icmp slt i32 %184, %44
  br i1 %230, label %236, label %231

231:                                              ; preds = %222
  %232 = add nsw i32 %44, -1
  %233 = mul nsw i32 %137, %232
  %234 = sext i32 %233 to i64
  %235 = getelementptr inbounds i16, i16* %229, i64 %234
  br label %240

236:                                              ; preds = %222
  %237 = icmp sgt i32 %184, 0
  %238 = getelementptr inbounds i16, i16* %229, i64 %204
  %239 = select i1 %237, i16* %238, i16* %229
  br label %240

240:                                              ; preds = %236, %231
  %241 = phi i16* [ %235, %231 ], [ %239, %236 ]
  %242 = sub nsw i32 0, %172
  %243 = select i1 %187, i32 %242, i32 0
  %244 = icmp sgt i32 %243, %209
  %245 = select i1 %244, i32 %209, i32 %243
  %246 = add nsw i32 %173, 1
  %247 = icmp sgt i32 %246, %45
  %248 = sub nsw i32 %246, %45
  %249 = select i1 %247, i32 %248, i32 0
  %250 = icmp sgt i32 %249, %209
  %251 = select i1 %250, i32 %209, i32 %249
  %252 = sub nsw i32 %209, %245
  %253 = sub i32 %252, %251
  %254 = icmp eq i32 %245, 0
  %255 = sext i32 %245 to i64
  %256 = icmp eq i32 %253, 0
  %257 = sext i32 %253 to i64
  %258 = shl nsw i64 %257, 1
  %259 = icmp eq i32 %251, 0
  %260 = add nsw i32 %45, -1
  %261 = sext i32 %260 to i64
  %262 = sext i32 %251 to i64
  %263 = sext i32 %209 to i64
  %264 = sext i32 %137 to i64
  %265 = add nsw i64 %255, -16
  %266 = lshr i64 %265, 4
  %267 = add nuw nsw i64 %266, 1
  %268 = add nsw i64 %262, -16
  %269 = lshr i64 %268, 4
  %270 = add nuw nsw i64 %269, 1
  %271 = icmp ult i32 %245, 16
  %272 = and i64 %255, -16
  %273 = and i64 %267, 7
  %274 = icmp ult i64 %265, 112
  %275 = sub nsw i64 %267, %273
  %276 = icmp eq i64 %273, 0
  %277 = icmp eq i64 %272, %255
  %278 = icmp ult i32 %251, 16
  %279 = and i64 %262, -16
  %280 = and i64 %270, 7
  %281 = icmp ult i64 %268, 112
  %282 = sub nsw i64 %270, %280
  %283 = icmp eq i64 %280, 0
  %284 = icmp eq i64 %279, %262
  br label %285

285:                                              ; preds = %451, %240
  %286 = phi i32 [ %211, %240 ], [ %459, %451 ]
  %287 = phi i32 [ %184, %240 ], [ %453, %451 ]
  %288 = phi i16* [ %215, %240 ], [ %452, %451 ]
  %289 = phi i16* [ %241, %240 ], [ %458, %451 ]
  br i1 %254, label %365, label %290

290:                                              ; preds = %285
  %291 = load i16, i16* %289, align 2
  br i1 %271, label %356, label %292

292:                                              ; preds = %290
  %293 = getelementptr i16, i16* %288, i64 %272
  %294 = insertelement <8 x i16> undef, i16 %291, i32 0
  %295 = shufflevector <8 x i16> %294, <8 x i16> undef, <8 x i32> zeroinitializer
  %296 = insertelement <8 x i16> undef, i16 %291, i32 0
  %297 = shufflevector <8 x i16> %296, <8 x i16> undef, <8 x i32> zeroinitializer
  br i1 %274, label %343, label %298

298:                                              ; preds = %292, %298
  %299 = phi i64 [ %340, %298 ], [ 0, %292 ]
  %300 = phi i64 [ %341, %298 ], [ %275, %292 ]
  %301 = getelementptr i16, i16* %288, i64 %299
  %302 = bitcast i16* %301 to <8 x i16>*
  store <8 x i16> %295, <8 x i16>* %302, align 2
  %303 = getelementptr i16, i16* %301, i64 8
  %304 = bitcast i16* %303 to <8 x i16>*
  store <8 x i16> %297, <8 x i16>* %304, align 2
  %305 = or i64 %299, 16
  %306 = getelementptr i16, i16* %288, i64 %305
  %307 = bitcast i16* %306 to <8 x i16>*
  store <8 x i16> %295, <8 x i16>* %307, align 2
  %308 = getelementptr i16, i16* %306, i64 8
  %309 = bitcast i16* %308 to <8 x i16>*
  store <8 x i16> %297, <8 x i16>* %309, align 2
  %310 = or i64 %299, 32
  %311 = getelementptr i16, i16* %288, i64 %310
  %312 = bitcast i16* %311 to <8 x i16>*
  store <8 x i16> %295, <8 x i16>* %312, align 2
  %313 = getelementptr i16, i16* %311, i64 8
  %314 = bitcast i16* %313 to <8 x i16>*
  store <8 x i16> %297, <8 x i16>* %314, align 2
  %315 = or i64 %299, 48
  %316 = getelementptr i16, i16* %288, i64 %315
  %317 = bitcast i16* %316 to <8 x i16>*
  store <8 x i16> %295, <8 x i16>* %317, align 2
  %318 = getelementptr i16, i16* %316, i64 8
  %319 = bitcast i16* %318 to <8 x i16>*
  store <8 x i16> %297, <8 x i16>* %319, align 2
  %320 = or i64 %299, 64
  %321 = getelementptr i16, i16* %288, i64 %320
  %322 = bitcast i16* %321 to <8 x i16>*
  store <8 x i16> %295, <8 x i16>* %322, align 2
  %323 = getelementptr i16, i16* %321, i64 8
  %324 = bitcast i16* %323 to <8 x i16>*
  store <8 x i16> %297, <8 x i16>* %324, align 2
  %325 = or i64 %299, 80
  %326 = getelementptr i16, i16* %288, i64 %325
  %327 = bitcast i16* %326 to <8 x i16>*
  store <8 x i16> %295, <8 x i16>* %327, align 2
  %328 = getelementptr i16, i16* %326, i64 8
  %329 = bitcast i16* %328 to <8 x i16>*
  store <8 x i16> %297, <8 x i16>* %329, align 2
  %330 = or i64 %299, 96
  %331 = getelementptr i16, i16* %288, i64 %330
  %332 = bitcast i16* %331 to <8 x i16>*
  store <8 x i16> %295, <8 x i16>* %332, align 2
  %333 = getelementptr i16, i16* %331, i64 8
  %334 = bitcast i16* %333 to <8 x i16>*
  store <8 x i16> %297, <8 x i16>* %334, align 2
  %335 = or i64 %299, 112
  %336 = getelementptr i16, i16* %288, i64 %335
  %337 = bitcast i16* %336 to <8 x i16>*
  store <8 x i16> %295, <8 x i16>* %337, align 2
  %338 = getelementptr i16, i16* %336, i64 8
  %339 = bitcast i16* %338 to <8 x i16>*
  store <8 x i16> %297, <8 x i16>* %339, align 2
  %340 = add i64 %299, 128
  %341 = add i64 %300, -8
  %342 = icmp eq i64 %341, 0
  br i1 %342, label %343, label %298, !llvm.loop !6

343:                                              ; preds = %298, %292
  %344 = phi i64 [ 0, %292 ], [ %340, %298 ]
  br i1 %276, label %355, label %345

345:                                              ; preds = %343, %345
  %346 = phi i64 [ %352, %345 ], [ %344, %343 ]
  %347 = phi i64 [ %353, %345 ], [ %273, %343 ]
  %348 = getelementptr i16, i16* %288, i64 %346
  %349 = bitcast i16* %348 to <8 x i16>*
  store <8 x i16> %295, <8 x i16>* %349, align 2
  %350 = getelementptr i16, i16* %348, i64 8
  %351 = bitcast i16* %350 to <8 x i16>*
  store <8 x i16> %297, <8 x i16>* %351, align 2
  %352 = add i64 %346, 16
  %353 = add i64 %347, -1
  %354 = icmp eq i64 %353, 0
  br i1 %354, label %355, label %345, !llvm.loop !8

355:                                              ; preds = %345, %343
  br i1 %277, label %365, label %356

356:                                              ; preds = %355, %290
  %357 = phi i16* [ %288, %290 ], [ %293, %355 ]
  %358 = phi i64 [ 0, %290 ], [ %272, %355 ]
  br label %359

359:                                              ; preds = %356, %359
  %360 = phi i16* [ %362, %359 ], [ %357, %356 ]
  %361 = phi i64 [ %363, %359 ], [ %358, %356 ]
  %362 = getelementptr inbounds i16, i16* %360, i64 1
  store i16 %291, i16* %360, align 2
  %363 = add nuw i64 %361, 1
  %364 = icmp eq i64 %363, %255
  br i1 %364, label %365, label %359, !llvm.loop !9

365:                                              ; preds = %359, %355, %285
  br i1 %256, label %372, label %366

366:                                              ; preds = %365
  %367 = getelementptr inbounds i16, i16* %288, i64 %255
  %368 = bitcast i16* %367 to i8*
  %369 = getelementptr inbounds i16, i16* %289, i64 %206
  %370 = getelementptr inbounds i16, i16* %369, i64 %255
  %371 = bitcast i16* %370 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %368, i8* align 2 %371, i64 %258, i1 false) #9
  br label %372

372:                                              ; preds = %366, %365
  br i1 %259, label %451, label %373

373:                                              ; preds = %372
  %374 = getelementptr inbounds i16, i16* %288, i64 %255
  %375 = getelementptr inbounds i16, i16* %374, i64 %257
  %376 = getelementptr inbounds i16, i16* %289, i64 %261
  %377 = load i16, i16* %376, align 2
  br i1 %278, label %442, label %378

378:                                              ; preds = %373
  %379 = getelementptr i16, i16* %375, i64 %279
  %380 = insertelement <8 x i16> undef, i16 %377, i32 0
  %381 = shufflevector <8 x i16> %380, <8 x i16> undef, <8 x i32> zeroinitializer
  %382 = insertelement <8 x i16> undef, i16 %377, i32 0
  %383 = shufflevector <8 x i16> %382, <8 x i16> undef, <8 x i32> zeroinitializer
  br i1 %281, label %429, label %384

384:                                              ; preds = %378, %384
  %385 = phi i64 [ %426, %384 ], [ 0, %378 ]
  %386 = phi i64 [ %427, %384 ], [ %282, %378 ]
  %387 = getelementptr i16, i16* %375, i64 %385
  %388 = bitcast i16* %387 to <8 x i16>*
  store <8 x i16> %381, <8 x i16>* %388, align 2
  %389 = getelementptr i16, i16* %387, i64 8
  %390 = bitcast i16* %389 to <8 x i16>*
  store <8 x i16> %383, <8 x i16>* %390, align 2
  %391 = or i64 %385, 16
  %392 = getelementptr i16, i16* %375, i64 %391
  %393 = bitcast i16* %392 to <8 x i16>*
  store <8 x i16> %381, <8 x i16>* %393, align 2
  %394 = getelementptr i16, i16* %392, i64 8
  %395 = bitcast i16* %394 to <8 x i16>*
  store <8 x i16> %383, <8 x i16>* %395, align 2
  %396 = or i64 %385, 32
  %397 = getelementptr i16, i16* %375, i64 %396
  %398 = bitcast i16* %397 to <8 x i16>*
  store <8 x i16> %381, <8 x i16>* %398, align 2
  %399 = getelementptr i16, i16* %397, i64 8
  %400 = bitcast i16* %399 to <8 x i16>*
  store <8 x i16> %383, <8 x i16>* %400, align 2
  %401 = or i64 %385, 48
  %402 = getelementptr i16, i16* %375, i64 %401
  %403 = bitcast i16* %402 to <8 x i16>*
  store <8 x i16> %381, <8 x i16>* %403, align 2
  %404 = getelementptr i16, i16* %402, i64 8
  %405 = bitcast i16* %404 to <8 x i16>*
  store <8 x i16> %383, <8 x i16>* %405, align 2
  %406 = or i64 %385, 64
  %407 = getelementptr i16, i16* %375, i64 %406
  %408 = bitcast i16* %407 to <8 x i16>*
  store <8 x i16> %381, <8 x i16>* %408, align 2
  %409 = getelementptr i16, i16* %407, i64 8
  %410 = bitcast i16* %409 to <8 x i16>*
  store <8 x i16> %383, <8 x i16>* %410, align 2
  %411 = or i64 %385, 80
  %412 = getelementptr i16, i16* %375, i64 %411
  %413 = bitcast i16* %412 to <8 x i16>*
  store <8 x i16> %381, <8 x i16>* %413, align 2
  %414 = getelementptr i16, i16* %412, i64 8
  %415 = bitcast i16* %414 to <8 x i16>*
  store <8 x i16> %383, <8 x i16>* %415, align 2
  %416 = or i64 %385, 96
  %417 = getelementptr i16, i16* %375, i64 %416
  %418 = bitcast i16* %417 to <8 x i16>*
  store <8 x i16> %381, <8 x i16>* %418, align 2
  %419 = getelementptr i16, i16* %417, i64 8
  %420 = bitcast i16* %419 to <8 x i16>*
  store <8 x i16> %383, <8 x i16>* %420, align 2
  %421 = or i64 %385, 112
  %422 = getelementptr i16, i16* %375, i64 %421
  %423 = bitcast i16* %422 to <8 x i16>*
  store <8 x i16> %381, <8 x i16>* %423, align 2
  %424 = getelementptr i16, i16* %422, i64 8
  %425 = bitcast i16* %424 to <8 x i16>*
  store <8 x i16> %383, <8 x i16>* %425, align 2
  %426 = add i64 %385, 128
  %427 = add i64 %386, -8
  %428 = icmp eq i64 %427, 0
  br i1 %428, label %429, label %384, !llvm.loop !11

429:                                              ; preds = %384, %378
  %430 = phi i64 [ 0, %378 ], [ %426, %384 ]
  br i1 %283, label %441, label %431

431:                                              ; preds = %429, %431
  %432 = phi i64 [ %438, %431 ], [ %430, %429 ]
  %433 = phi i64 [ %439, %431 ], [ %280, %429 ]
  %434 = getelementptr i16, i16* %375, i64 %432
  %435 = bitcast i16* %434 to <8 x i16>*
  store <8 x i16> %381, <8 x i16>* %435, align 2
  %436 = getelementptr i16, i16* %434, i64 8
  %437 = bitcast i16* %436 to <8 x i16>*
  store <8 x i16> %383, <8 x i16>* %437, align 2
  %438 = add i64 %432, 16
  %439 = add i64 %433, -1
  %440 = icmp eq i64 %439, 0
  br i1 %440, label %441, label %431, !llvm.loop !12

441:                                              ; preds = %431, %429
  br i1 %284, label %451, label %442

442:                                              ; preds = %441, %373
  %443 = phi i16* [ %375, %373 ], [ %379, %441 ]
  %444 = phi i64 [ 0, %373 ], [ %279, %441 ]
  br label %445

445:                                              ; preds = %442, %445
  %446 = phi i16* [ %448, %445 ], [ %443, %442 ]
  %447 = phi i64 [ %449, %445 ], [ %444, %442 ]
  %448 = getelementptr inbounds i16, i16* %446, i64 1
  store i16 %377, i16* %446, align 2
  %449 = add nuw i64 %447, 1
  %450 = icmp eq i64 %449, %262
  br i1 %450, label %451, label %445, !llvm.loop !13

451:                                              ; preds = %445, %441, %372
  %452 = getelementptr inbounds i16, i16* %288, i64 %263
  %453 = add nsw i32 %287, 1
  %454 = icmp sgt i32 %287, -1
  %455 = icmp slt i32 %453, %44
  %456 = and i1 %454, %455
  %457 = getelementptr inbounds i16, i16* %289, i64 %264
  %458 = select i1 %456, i16* %457, i16* %289
  %459 = add nsw i32 %286, -1
  %460 = icmp eq i32 %459, 0
  br i1 %460, label %461, label %285

461:                                              ; preds = %451
  %462 = sext i32 %213 to i64
  %463 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 10, i64 %462
  %464 = ptrtoint i8* %30 to i64
  %465 = shl i64 %464, 1
  %466 = inttoptr i64 %465 to i16*
  %467 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 23
  %468 = load i32, i32* %467, align 8
  %469 = icmp ne i32 %130, 0
  %470 = zext i1 %469 to i64
  %471 = icmp ne i32 %131, 0
  %472 = zext i1 %471 to i64
  %473 = sext i32 %18 to i64
  %474 = getelementptr inbounds %struct.scale_factors, %struct.scale_factors* %12, i64 0, i32 7, i64 %470, i64 %472, i64 %473
  %475 = load void (i16*, i64, i16*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32, i32)*, void (i16*, i64, i16*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32, i32)** %474, align 8
  %476 = sext i32 %214 to i64
  call void %475(i16* %463, i64 %263, i16* %466, i64 %476, [8 x i16]* %11, i32 %130, i32 %127, i32 %131, i32 %126, i32 %7, i32 %8, i32 %468) #9
  br label %593

477:                                              ; preds = %202
  %478 = bitcast i16* %215 to i8*
  %479 = sub nsw i64 0, %206
  %480 = getelementptr inbounds i8, i8* %207, i64 %479
  %481 = sub nsw i64 0, %204
  %482 = getelementptr inbounds i8, i8* %480, i64 %481
  %483 = icmp slt i32 %184, %44
  br i1 %483, label %489, label %484

484:                                              ; preds = %477
  %485 = add nsw i32 %44, -1
  %486 = mul nsw i32 %137, %485
  %487 = sext i32 %486 to i64
  %488 = getelementptr inbounds i8, i8* %482, i64 %487
  br label %493

489:                                              ; preds = %477
  %490 = icmp sgt i32 %184, 0
  %491 = getelementptr inbounds i8, i8* %482, i64 %204
  %492 = select i1 %490, i8* %491, i8* %482
  br label %493

493:                                              ; preds = %489, %484
  %494 = phi i8* [ %488, %484 ], [ %492, %489 ]
  %495 = sub nsw i32 0, %172
  %496 = select i1 %187, i32 %495, i32 0
  %497 = icmp sgt i32 %496, %209
  %498 = select i1 %497, i32 %209, i32 %496
  %499 = add nsw i32 %173, 1
  %500 = icmp sgt i32 %499, %45
  %501 = sub nsw i32 %499, %45
  %502 = select i1 %500, i32 %501, i32 0
  %503 = icmp sgt i32 %502, %209
  %504 = select i1 %503, i32 %209, i32 %502
  %505 = sub nsw i32 %209, %498
  %506 = sub i32 %505, %504
  %507 = icmp eq i32 %498, 0
  %508 = sext i32 %498 to i64
  %509 = icmp eq i32 %506, 0
  %510 = sext i32 %506 to i64
  %511 = icmp eq i32 %504, 0
  %512 = add nsw i32 %45, -1
  %513 = sext i32 %512 to i64
  %514 = sext i32 %504 to i64
  %515 = sext i32 %209 to i64
  %516 = sext i32 %137 to i64
  br label %517

517:                                              ; preds = %535, %493
  %518 = phi i32 [ %211, %493 ], [ %543, %535 ]
  %519 = phi i32 [ %184, %493 ], [ %537, %535 ]
  %520 = phi i8* [ %478, %493 ], [ %536, %535 ]
  %521 = phi i8* [ %494, %493 ], [ %542, %535 ]
  br i1 %507, label %524, label %522

522:                                              ; preds = %517
  %523 = load i8, i8* %521, align 1
  call void @llvm.memset.p0i8.i64(i8* align 1 %520, i8 %523, i64 %508, i1 false) #9
  br label %524

524:                                              ; preds = %522, %517
  br i1 %509, label %529, label %525

525:                                              ; preds = %524
  %526 = getelementptr inbounds i8, i8* %520, i64 %508
  %527 = getelementptr inbounds i8, i8* %521, i64 %206
  %528 = getelementptr inbounds i8, i8* %527, i64 %508
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %526, i8* align 1 %528, i64 %510, i1 false) #9
  br label %529

529:                                              ; preds = %525, %524
  br i1 %511, label %535, label %530

530:                                              ; preds = %529
  %531 = getelementptr inbounds i8, i8* %520, i64 %508
  %532 = getelementptr inbounds i8, i8* %531, i64 %510
  %533 = getelementptr inbounds i8, i8* %521, i64 %513
  %534 = load i8, i8* %533, align 1
  call void @llvm.memset.p0i8.i64(i8* align 1 %532, i8 %534, i64 %514, i1 false) #9
  br label %535

535:                                              ; preds = %530, %529
  %536 = getelementptr inbounds i8, i8* %520, i64 %515
  %537 = add nsw i32 %519, 1
  %538 = icmp sgt i32 %519, -1
  %539 = icmp slt i32 %537, %44
  %540 = and i1 %538, %539
  %541 = getelementptr inbounds i8, i8* %521, i64 %516
  %542 = select i1 %540, i8* %541, i8* %521
  %543 = add nsw i32 %518, -1
  %544 = icmp eq i32 %543, 0
  br i1 %544, label %545, label %517

545:                                              ; preds = %535
  %546 = sext i32 %213 to i64
  %547 = getelementptr inbounds i8, i8* %478, i64 %546
  %548 = icmp ne i32 %130, 0
  %549 = zext i1 %548 to i64
  %550 = icmp ne i32 %131, 0
  %551 = zext i1 %550 to i64
  %552 = sext i32 %18 to i64
  %553 = getelementptr inbounds %struct.scale_factors, %struct.scale_factors* %12, i64 0, i32 6, i64 %549, i64 %551, i64 %552
  %554 = load void (i8*, i64, i8*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32)*, void (i8*, i64, i8*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32)** %553, align 8
  %555 = sext i32 %214 to i64
  call void %554(i8* %547, i64 %515, i8* %30, i64 %555, [8 x i16]* %11, i32 %130, i32 %127, i32 %131, i32 %126, i32 %7, i32 %8) #9
  br label %593

556:                                              ; preds = %196, %121
  %557 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 18
  %558 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %557, align 8
  %559 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %558, i64 0, i32 29
  %560 = load i32, i32* %559, align 8
  %561 = and i32 %560, 8
  %562 = icmp eq i32 %561, 0
  br i1 %562, label %582, label %563

563:                                              ; preds = %556
  %564 = ptrtoint i8* %142 to i64
  %565 = shl i64 %564, 1
  %566 = inttoptr i64 %565 to i16*
  %567 = ptrtoint i8* %30 to i64
  %568 = shl i64 %567, 1
  %569 = inttoptr i64 %568 to i16*
  %570 = load i32, i32* %24, align 8
  %571 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 23
  %572 = load i32, i32* %571, align 8
  %573 = icmp ne i32 %130, 0
  %574 = zext i1 %573 to i64
  %575 = icmp ne i32 %131, 0
  %576 = zext i1 %575 to i64
  %577 = sext i32 %18 to i64
  %578 = getelementptr inbounds %struct.scale_factors, %struct.scale_factors* %12, i64 0, i32 7, i64 %574, i64 %576, i64 %577
  %579 = load void (i16*, i64, i16*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32, i32)*, void (i16*, i64, i16*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32, i32)** %578, align 8
  %580 = sext i32 %137 to i64
  %581 = sext i32 %570 to i64
  call void %579(i16* %566, i64 %580, i16* %569, i64 %581, [8 x i16]* %11, i32 %130, i32 %127, i32 %131, i32 %126, i32 %7, i32 %8, i32 %572) #9
  br label %593

582:                                              ; preds = %556
  %583 = load i32, i32* %24, align 8
  %584 = icmp ne i32 %130, 0
  %585 = zext i1 %584 to i64
  %586 = icmp ne i32 %131, 0
  %587 = zext i1 %586 to i64
  %588 = sext i32 %18 to i64
  %589 = getelementptr inbounds %struct.scale_factors, %struct.scale_factors* %12, i64 0, i32 6, i64 %585, i64 %587, i64 %588
  %590 = load void (i8*, i64, i8*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32)*, void (i8*, i64, i8*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32)** %589, align 8
  %591 = sext i32 %137 to i64
  %592 = sext i32 %583 to i64
  call void %590(i8* %142, i64 %591, i8* %30, i64 %592, [8 x i16]* %11, i32 %130, i32 %127, i32 %131, i32 %126, i32 %7, i32 %8) #9
  br label %593

593:                                              ; preds = %545, %461, %563, %582
  ret void
}

declare i32 @clamp_mv_to_umv_border_sb(%struct.macroblockd*, %struct.mv*, i32, i32, i32, i32) local_unnamed_addr #1

declare i64 @vp9_scale_mv(%struct.mv*, i32, i32, %struct.scale_factors*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @inverse_transform_block_inter(%struct.macroblockd* nocapture readonly, i32, i8 zeroext, i8*, i32, i32) unnamed_addr #0 {
  %7 = sext i32 %1 to i64
  %8 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %0, i64 0, i32 0, i64 %7, i32 0
  %9 = load i32*, i32** %8, align 8
  %10 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %0, i64 0, i32 18
  %11 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %10, align 8
  %12 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %11, i64 0, i32 29
  %13 = load i32, i32* %12, align 8
  %14 = and i32 %13, 8
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %39, label %16

16:                                               ; preds = %6
  %17 = ptrtoint i8* %3 to i64
  %18 = shl i64 %17, 1
  %19 = inttoptr i64 %18 to i16*
  %20 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %0, i64 0, i32 24
  %21 = load i32, i32* %20, align 4
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %26, label %23

23:                                               ; preds = %16
  %24 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %0, i64 0, i32 23
  %25 = load i32, i32* %24, align 8
  tail call void @vp9_highbd_iwht4x4_add(i32* %9, i16* %19, i32 %4, i32 %5, i32 %25) #9
  br label %49

26:                                               ; preds = %16
  switch i8 %2, label %49 [
    i8 0, label %27
    i8 1, label %30
    i8 2, label %33
    i8 3, label %36
  ]

27:                                               ; preds = %26
  %28 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %0, i64 0, i32 23
  %29 = load i32, i32* %28, align 8
  tail call void @vp9_highbd_idct4x4_add(i32* %9, i16* %19, i32 %4, i32 %5, i32 %29) #9
  br label %49

30:                                               ; preds = %26
  %31 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %0, i64 0, i32 23
  %32 = load i32, i32* %31, align 8
  tail call void @vp9_highbd_idct8x8_add(i32* %9, i16* %19, i32 %4, i32 %5, i32 %32) #9
  br label %49

33:                                               ; preds = %26
  %34 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %0, i64 0, i32 23
  %35 = load i32, i32* %34, align 8
  tail call void @vp9_highbd_idct16x16_add(i32* %9, i16* %19, i32 %4, i32 %5, i32 %35) #9
  br label %49

36:                                               ; preds = %26
  %37 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %0, i64 0, i32 23
  %38 = load i32, i32* %37, align 8
  tail call void @vp9_highbd_idct32x32_add(i32* %9, i16* %19, i32 %4, i32 %5, i32 %38) #9
  br label %49

39:                                               ; preds = %6
  %40 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %0, i64 0, i32 24
  %41 = load i32, i32* %40, align 4
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %44, label %43

43:                                               ; preds = %39
  tail call void @vp9_iwht4x4_add(i32* %9, i8* %3, i32 %4, i32 %5) #9
  br label %49

44:                                               ; preds = %39
  switch i8 %2, label %73 [
    i8 0, label %45
    i8 1, label %46
    i8 2, label %47
    i8 3, label %48
  ]

45:                                               ; preds = %44
  tail call void @vp9_idct4x4_add(i32* %9, i8* %3, i32 %4, i32 %5) #9
  br label %49

46:                                               ; preds = %44
  tail call void @vp9_idct8x8_add(i32* %9, i8* %3, i32 %4, i32 %5) #9
  br label %49

47:                                               ; preds = %44
  tail call void @vp9_idct16x16_add(i32* %9, i8* %3, i32 %4, i32 %5) #9
  br label %49

48:                                               ; preds = %44
  tail call void @vp9_idct32x32_add(i32* %9, i8* %3, i32 %4, i32 %5) #9
  br label %49

49:                                               ; preds = %23, %26, %36, %33, %30, %27, %43, %48, %47, %46, %45
  %50 = icmp eq i32 %5, 1
  br i1 %50, label %51, label %52

51:                                               ; preds = %49
  store i32 0, i32* %9, align 4
  br label %73

52:                                               ; preds = %49
  %53 = zext i8 %2 to i32
  %54 = icmp ult i8 %2, 3
  %55 = icmp slt i32 %5, 11
  %56 = and i1 %54, %55
  br i1 %56, label %57, label %62

57:                                               ; preds = %52
  %58 = bitcast i32* %9 to i8*
  %59 = shl i32 16, %53
  %60 = sext i32 %59 to i64
  %61 = shl nsw i64 %60, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %58, i8 0, i64 %61, i1 false)
  br label %73

62:                                               ; preds = %52
  %63 = icmp eq i8 %2, 3
  %64 = icmp slt i32 %5, 35
  %65 = and i1 %63, %64
  %66 = bitcast i32* %9 to i8*
  br i1 %65, label %67, label %68

67:                                               ; preds = %62
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %66, i8 0, i64 1024, i1 false)
  br label %73

68:                                               ; preds = %62
  %69 = shl nuw nsw i32 %53, 1
  %70 = shl i32 16, %69
  %71 = sext i32 %70 to i64
  %72 = shl nsw i64 %71, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %66, i8 0, i64 %72, i1 false)
  br label %73

73:                                               ; preds = %51, %67, %68, %57, %44
  ret void
}

declare void @vp9_highbd_idct4x4_add(i32*, i16*, i32, i32, i32) local_unnamed_addr #1

declare void @vp9_highbd_idct8x8_add(i32*, i16*, i32, i32, i32) local_unnamed_addr #1

declare void @vp9_highbd_idct16x16_add(i32*, i16*, i32, i32, i32) local_unnamed_addr #1

declare void @vp9_idct4x4_add(i32*, i8*, i32, i32) local_unnamed_addr #1

declare void @vp9_idct8x8_add(i32*, i8*, i32, i32) local_unnamed_addr #1

declare void @vp9_idct16x16_add(i32*, i8*, i32, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define internal void @parse_block(%struct.TileWorkerData*, %struct.VP9Decoder*, i32, i32, i8 zeroext, i32, i32) #0 {
  %8 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %1, i64 0, i32 1
  %9 = add nsw i32 %5, -1
  %10 = shl i32 1, %9
  %11 = add nsw i32 %6, -1
  %12 = shl i32 1, %11
  %13 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %1, i64 0, i32 1, i32 35
  %14 = load i32, i32* %13, align 8
  %15 = sub nsw i32 %14, %3
  %16 = icmp slt i32 %10, %15
  %17 = select i1 %16, i32 %10, i32 %15
  %18 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %1, i64 0, i32 1, i32 33
  %19 = load i32, i32* %18, align 16
  %20 = sub nsw i32 %19, %2
  %21 = icmp slt i32 %12, %20
  %22 = select i1 %21, i32 %12, i32 %20
  %23 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8
  %24 = tail call fastcc %struct.MODE_INFO* @set_offsets(%struct.VP9Common* %8, %struct.macroblockd* %23, i8 zeroext %4, i32 %2, i32 %3, i32 %10, i32 %12, i32 %17, i32 %22, i32 %5, i32 %6)
  %25 = icmp ugt i8 %4, 2
  br i1 %25, label %26, label %43

26:                                               ; preds = %7
  %27 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %1, i64 0, i32 1, i32 9
  %28 = load i32, i32* %27, align 8
  %29 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %1, i64 0, i32 1, i32 10
  %30 = load i32, i32* %29, align 4
  %31 = or i32 %28, %30
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %43, label %33

33:                                               ; preds = %26
  %34 = zext i8 %4 to i64
  %35 = sext i32 %28 to i64
  %36 = sext i32 %30 to i64
  %37 = getelementptr inbounds [13 x [2 x [2 x i8]]], [13 x [2 x [2 x i8]]]* @ss_size_lookup, i64 0, i64 %34, i64 %35, i64 %36
  %38 = load i8, i8* %37, align 1
  %39 = icmp eq i8 %38, 13
  br i1 %39, label %40, label %43

40:                                               ; preds = %33
  %41 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 26
  %42 = load %struct.vpx_internal_error_info*, %struct.vpx_internal_error_info** %41, align 8
  tail call void (%struct.vpx_internal_error_info*, i32, i8*, ...) @vpx_internal_error(%struct.vpx_internal_error_info* %42, i32 7, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.31, i64 0, i64 0)) #9
  br label %43

43:                                               ; preds = %26, %33, %40, %7
  tail call void @vp9_read_mode_info(%struct.TileWorkerData* %0, %struct.VP9Decoder* %1, i32 %2, i32 %3, i32 %17, i32 %22) #9
  %44 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %24, i64 0, i32 3
  %45 = load i8, i8* %44, align 1
  %46 = icmp eq i8 %45, 0
  br i1 %46, label %78, label %47

47:                                               ; preds = %43
  %48 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 0, i64 0, i32 5
  %49 = load i8*, i8** %48, align 8
  %50 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 0, i64 0, i32 8
  %51 = load i16, i16* %50, align 8
  %52 = zext i16 %51 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %49, i8 0, i64 %52, i1 false) #9
  %53 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 0, i64 0, i32 6
  %54 = load i8*, i8** %53, align 8
  %55 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 0, i64 0, i32 9
  %56 = load i16, i16* %55, align 2
  %57 = zext i16 %56 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %54, i8 0, i64 %57, i1 false) #9
  %58 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 0, i64 1, i32 5
  %59 = load i8*, i8** %58, align 8
  %60 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 0, i64 1, i32 8
  %61 = load i16, i16* %60, align 8
  %62 = zext i16 %61 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %59, i8 0, i64 %62, i1 false) #9
  %63 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 0, i64 1, i32 6
  %64 = load i8*, i8** %63, align 8
  %65 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 0, i64 1, i32 9
  %66 = load i16, i16* %65, align 2
  %67 = zext i16 %66 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %64, i8 0, i64 %67, i1 false) #9
  %68 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 0, i64 2, i32 5
  %69 = load i8*, i8** %68, align 8
  %70 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 0, i64 2, i32 8
  %71 = load i16, i16* %70, align 8
  %72 = zext i16 %71 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %69, i8 0, i64 %72, i1 false) #9
  %73 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 0, i64 2, i32 6
  %74 = load i8*, i8** %73, align 8
  %75 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 0, i64 2, i32 9
  %76 = load i16, i16* %75, align 2
  %77 = zext i16 %76 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %74, i8 0, i64 %77, i1 false) #9
  br label %78

78:                                               ; preds = %43, %47
  %79 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %24, i64 0, i32 8, i64 0
  %80 = load i8, i8* %79, align 4
  %81 = icmp slt i8 %80, 1
  br i1 %81, label %82, label %211

82:                                               ; preds = %78
  %83 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %24, i64 0, i32 0
  %84 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %24, i64 0, i32 2
  %85 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 13
  %86 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 15
  %87 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 9
  %88 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 10
  %89 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %24, i64 0, i32 1
  %90 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %24, i64 0, i32 6
  %91 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 6
  %92 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 24
  %93 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %24, i64 0, i32 4
  br label %94

94:                                               ; preds = %208, %82
  %95 = phi i64 [ 0, %82 ], [ %209, %208 ]
  %96 = icmp eq i64 %95, 0
  br i1 %96, label %109, label %97

97:                                               ; preds = %94
  %98 = load i8, i8* %83, align 4
  %99 = zext i8 %98 to i64
  %100 = load i8, i8* %84, align 2
  %101 = zext i8 %100 to i64
  %102 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 0, i64 %95, i32 1
  %103 = load i32, i32* %102, align 8
  %104 = sext i32 %103 to i64
  %105 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 0, i64 %95, i32 2
  %106 = load i32, i32* %105, align 4
  %107 = sext i32 %106 to i64
  %108 = getelementptr inbounds [13 x [4 x [2 x [2 x i8]]]], [13 x [4 x [2 x [2 x i8]]]]* @uv_txsize_lookup, i64 0, i64 %99, i64 %101, i64 %104, i64 %107
  br label %109

109:                                              ; preds = %97, %94
  %110 = phi i8* [ %108, %97 ], [ %84, %94 ]
  %111 = load i8, i8* %110, align 1
  %112 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 0, i64 %95, i32 8
  %113 = load i16, i16* %112, align 8
  %114 = zext i16 %113 to i32
  %115 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 0, i64 %95, i32 9
  %116 = load i16, i16* %115, align 2
  %117 = zext i16 %116 to i32
  %118 = zext i8 %111 to i32
  %119 = shl i32 1, %118
  %120 = load i32, i32* %85, align 4
  %121 = icmp sgt i32 %120, -1
  br i1 %121, label %127, label %122

122:                                              ; preds = %109
  %123 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 0, i64 %95, i32 1
  %124 = load i32, i32* %123, align 8
  %125 = add nsw i32 %124, 5
  %126 = ashr i32 %120, %125
  br label %127

127:                                              ; preds = %122, %109
  %128 = phi i32 [ %126, %122 ], [ 0, %109 ]
  %129 = add nsw i32 %128, %114
  %130 = load i32, i32* %86, align 4
  %131 = icmp sgt i32 %130, -1
  br i1 %131, label %137, label %132

132:                                              ; preds = %127
  %133 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 0, i64 %95, i32 2
  %134 = load i32, i32* %133, align 4
  %135 = add nsw i32 %134, 5
  %136 = ashr i32 %130, %135
  br label %137

137:                                              ; preds = %132, %127
  %138 = phi i32 [ %136, %132 ], [ 0, %127 ]
  %139 = add nsw i32 %138, %117
  %140 = select i1 %121, i32 0, i32 %129
  store i32 %140, i32* %87, align 8
  %141 = select i1 %131, i32 0, i32 %139
  store i32 %141, i32* %88, align 4
  %142 = icmp sgt i32 %139, 0
  br i1 %142, label %143, label %208

143:                                              ; preds = %137
  %144 = icmp sgt i32 %129, 0
  %145 = trunc i64 %95 to i32
  %146 = icmp eq i32 %145, 0
  %147 = select i1 %146, i8* %89, i8* %90
  %148 = shl i64 %95, 32
  %149 = ashr exact i64 %148, 32
  %150 = zext i8 %111 to i64
  %151 = getelementptr inbounds [4 x %struct.scan_order], [4 x %struct.scan_order]* @vp9_default_scan_orders, i64 0, i64 %150
  %152 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 0, i64 %149, i32 13
  %153 = shl nuw nsw i32 %118, 1
  %154 = shl i32 16, %153
  %155 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 0, i64 %149, i32 0
  %156 = sext i32 %154 to i64
  %157 = sext i32 %119 to i64
  %158 = sext i32 %129 to i64
  %159 = sext i32 %139 to i64
  br label %160

160:                                              ; preds = %205, %143
  %161 = phi i64 [ %206, %205 ], [ 0, %143 ]
  br i1 %144, label %162, label %205

162:                                              ; preds = %160
  %163 = trunc i64 %161 to i32
  %164 = shl i32 %163, 1
  %165 = sext i32 %164 to i64
  br label %166

166:                                              ; preds = %162, %202
  %167 = phi i64 [ 0, %162 ], [ %203, %202 ]
  %168 = load i8, i8* %83, align 4
  %169 = icmp ult i8 %168, 3
  %170 = and i1 %146, %169
  br i1 %170, label %171, label %176

171:                                              ; preds = %166
  %172 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %91, align 8
  %173 = load %struct.MODE_INFO*, %struct.MODE_INFO** %172, align 8
  %174 = add nsw i64 %167, %165
  %175 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %173, i64 0, i32 10, i64 %174, i32 0
  br label %176

176:                                              ; preds = %171, %166
  %177 = phi i8* [ %175, %171 ], [ %147, %166 ]
  %178 = load i8, i8* %177, align 1
  %179 = load i8, i8* %44, align 1
  %180 = icmp eq i8 %179, 0
  br i1 %180, label %181, label %202

181:                                              ; preds = %176
  br i1 %146, label %182, label %191

182:                                              ; preds = %181
  %183 = load i32, i32* %92, align 4
  %184 = icmp eq i32 %183, 0
  br i1 %184, label %185, label %191

185:                                              ; preds = %182
  %186 = zext i8 %178 to i64
  %187 = getelementptr inbounds [10 x i32], [10 x i32]* @intra_mode_to_tx_type_lookup, i64 0, i64 %186
  %188 = load i32, i32* %187, align 4
  %189 = zext i32 %188 to i64
  %190 = getelementptr inbounds [4 x [4 x %struct.scan_order]], [4 x [4 x %struct.scan_order]]* @vp9_scan_orders, i64 0, i64 %150, i64 %189
  br label %191

191:                                              ; preds = %182, %181, %185
  %192 = phi %struct.scan_order* [ %190, %185 ], [ %151, %181 ], [ %151, %182 ]
  %193 = load i8, i8* %93, align 4
  %194 = sext i8 %193 to i32
  %195 = trunc i64 %167 to i32
  %196 = tail call i32 @vp9_decode_block_tokens(%struct.TileWorkerData* %0, i32 %145, %struct.scan_order* %192, i32 %195, i32 %163, i8 zeroext %111, i32 %194) #9
  %197 = load i32*, i32** %152, align 8
  store i32 %196, i32* %197, align 4
  %198 = load i32*, i32** %155, align 8
  %199 = getelementptr inbounds i32, i32* %198, i64 %156
  store i32* %199, i32** %155, align 8
  %200 = load i32*, i32** %152, align 8
  %201 = getelementptr inbounds i32, i32* %200, i64 1
  store i32* %201, i32** %152, align 8
  br label %202

202:                                              ; preds = %176, %191
  %203 = add i64 %167, %157
  %204 = icmp slt i64 %203, %158
  br i1 %204, label %166, label %205

205:                                              ; preds = %202, %160
  %206 = add i64 %161, %157
  %207 = icmp slt i64 %206, %159
  br i1 %207, label %160, label %208

208:                                              ; preds = %205, %137
  %209 = add nuw nsw i64 %95, 1
  %210 = icmp eq i64 %209, 3
  br i1 %210, label %327, label %94

211:                                              ; preds = %78
  %212 = load i8, i8* %44, align 1
  %213 = icmp eq i8 %212, 0
  br i1 %213, label %214, label %327

214:                                              ; preds = %211
  %215 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 0, i64 0
  %216 = bitcast %struct.macroblockd_plane* %215 to i64*
  %217 = load i64, i64* %216, align 8
  %218 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 0, i64 0, i32 13
  %219 = bitcast i32** %218 to <2 x i64>*
  %220 = load <2 x i64>, <2 x i64>* %219, align 8
  %221 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 0, i64 1, i32 13
  %222 = bitcast i32** %221 to <2 x i64>*
  %223 = load <2 x i64>, <2 x i64>* %222, align 8
  %224 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 0, i64 2, i32 13
  %225 = bitcast i32** %224 to i64*
  %226 = load i64, i64* %225, align 8
  %227 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %24, i64 0, i32 0
  %228 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %24, i64 0, i32 2
  %229 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 13
  %230 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 15
  %231 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 9
  %232 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 10
  %233 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %24, i64 0, i32 4
  br label %234

234:                                              ; preds = %317, %214
  %235 = phi i64 [ 0, %214 ], [ %319, %317 ]
  %236 = phi i32 [ 0, %214 ], [ %318, %317 ]
  %237 = icmp eq i64 %235, 0
  br i1 %237, label %250, label %238

238:                                              ; preds = %234
  %239 = load i8, i8* %227, align 4
  %240 = zext i8 %239 to i64
  %241 = load i8, i8* %228, align 2
  %242 = zext i8 %241 to i64
  %243 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 0, i64 %235, i32 1
  %244 = load i32, i32* %243, align 8
  %245 = sext i32 %244 to i64
  %246 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 0, i64 %235, i32 2
  %247 = load i32, i32* %246, align 4
  %248 = sext i32 %247 to i64
  %249 = getelementptr inbounds [13 x [4 x [2 x [2 x i8]]]], [13 x [4 x [2 x [2 x i8]]]]* @uv_txsize_lookup, i64 0, i64 %240, i64 %242, i64 %245, i64 %248
  br label %250

250:                                              ; preds = %238, %234
  %251 = phi i8* [ %249, %238 ], [ %228, %234 ]
  %252 = load i8, i8* %251, align 1
  %253 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 0, i64 %235, i32 8
  %254 = load i16, i16* %253, align 8
  %255 = zext i16 %254 to i32
  %256 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 0, i64 %235, i32 9
  %257 = load i16, i16* %256, align 2
  %258 = zext i16 %257 to i32
  %259 = zext i8 %252 to i32
  %260 = shl i32 1, %259
  %261 = load i32, i32* %229, align 4
  %262 = icmp sgt i32 %261, -1
  br i1 %262, label %268, label %263

263:                                              ; preds = %250
  %264 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 0, i64 %235, i32 1
  %265 = load i32, i32* %264, align 8
  %266 = add nsw i32 %265, 5
  %267 = ashr i32 %261, %266
  br label %268

268:                                              ; preds = %263, %250
  %269 = phi i32 [ %267, %263 ], [ 0, %250 ]
  %270 = add nsw i32 %269, %255
  %271 = load i32, i32* %230, align 4
  %272 = icmp sgt i32 %271, -1
  br i1 %272, label %278, label %273

273:                                              ; preds = %268
  %274 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 0, i64 %235, i32 2
  %275 = load i32, i32* %274, align 4
  %276 = add nsw i32 %275, 5
  %277 = ashr i32 %271, %276
  br label %278

278:                                              ; preds = %273, %268
  %279 = phi i32 [ %277, %273 ], [ 0, %268 ]
  %280 = add nsw i32 %279, %258
  %281 = select i1 %262, i32 0, i32 %270
  store i32 %281, i32* %231, align 8
  %282 = select i1 %272, i32 0, i32 %280
  store i32 %282, i32* %232, align 4
  %283 = icmp sgt i32 %280, 0
  br i1 %283, label %284, label %317

284:                                              ; preds = %278
  %285 = icmp sgt i32 %270, 0
  %286 = trunc i64 %235 to i32
  %287 = shl i64 %235, 32
  %288 = ashr exact i64 %287, 32
  %289 = zext i8 %252 to i64
  %290 = getelementptr inbounds [4 x %struct.scan_order], [4 x %struct.scan_order]* @vp9_default_scan_orders, i64 0, i64 %289
  %291 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 0, i64 %288, i32 13
  %292 = shl nuw nsw i32 %259, 1
  %293 = shl i32 16, %292
  %294 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 0, i64 %288, i32 0
  %295 = sext i32 %293 to i64
  br label %296

296:                                              ; preds = %313, %284
  %297 = phi i32 [ 0, %284 ], [ %315, %313 ]
  %298 = phi i32 [ %236, %284 ], [ %314, %313 ]
  br i1 %285, label %299, label %313

299:                                              ; preds = %296, %299
  %300 = phi i32 [ %311, %299 ], [ 0, %296 ]
  %301 = phi i32 [ %310, %299 ], [ %298, %296 ]
  %302 = load i8, i8* %233, align 4
  %303 = sext i8 %302 to i32
  %304 = tail call i32 @vp9_decode_block_tokens(%struct.TileWorkerData* %0, i32 %286, %struct.scan_order* %290, i32 %300, i32 %297, i8 zeroext %252, i32 %303) #9
  %305 = load i32*, i32** %291, align 8
  store i32 %304, i32* %305, align 4
  %306 = load i32*, i32** %294, align 8
  %307 = getelementptr inbounds i32, i32* %306, i64 %295
  store i32* %307, i32** %294, align 8
  %308 = load i32*, i32** %291, align 8
  %309 = getelementptr inbounds i32, i32* %308, i64 1
  store i32* %309, i32** %291, align 8
  %310 = add nsw i32 %304, %301
  %311 = add nsw i32 %300, %260
  %312 = icmp slt i32 %311, %270
  br i1 %312, label %299, label %313

313:                                              ; preds = %299, %296
  %314 = phi i32 [ %298, %296 ], [ %310, %299 ]
  %315 = add nsw i32 %297, %260
  %316 = icmp slt i32 %315, %280
  br i1 %316, label %296, label %317

317:                                              ; preds = %313, %278
  %318 = phi i32 [ %236, %278 ], [ %314, %313 ]
  %319 = add nuw nsw i64 %235, 1
  %320 = icmp eq i64 %319, 3
  br i1 %320, label %321, label %234

321:                                              ; preds = %317
  %322 = icmp eq i32 %318, 0
  %323 = and i1 %25, %322
  br i1 %323, label %324, label %327

324:                                              ; preds = %321
  store i8 1, i8* %44, align 1
  store i64 %217, i64* %216, align 8
  %325 = bitcast i32** %218 to <2 x i64>*
  store <2 x i64> %220, <2 x i64>* %325, align 8
  %326 = bitcast i32** %221 to <2 x i64>*
  store <2 x i64> %223, <2 x i64>* %326, align 8
  store i64 %226, i64* %225, align 8
  br label %327

327:                                              ; preds = %208, %321, %324, %211
  %328 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 3, i32 2
  %329 = load i32, i32* %328, align 4
  %330 = add i32 %329, -65
  %331 = icmp ult i32 %330, 1073741759
  %332 = zext i1 %331 to i32
  %333 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 25
  %334 = load i32, i32* %333, align 8
  %335 = or i32 %334, %332
  store i32 %335, i32* %333, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc %struct.MODE_INFO* @set_offsets(%struct.VP9Common* nocapture readonly, %struct.macroblockd*, i8 zeroext, i32, i32, i32, i32, i32, i32, i32, i32) unnamed_addr #0 {
  %12 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 36
  %13 = load i32, i32* %12, align 4
  %14 = mul nsw i32 %13, %3
  %15 = add nsw i32 %14, %4
  %16 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 53
  %17 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %16, align 8
  %18 = sext i32 %15 to i64
  %19 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %17, i64 %18
  %20 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 6
  store %struct.MODE_INFO** %19, %struct.MODE_INFO*** %20, align 8
  %21 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 46
  %22 = load %struct.MODE_INFO*, %struct.MODE_INFO** %21, align 16
  %23 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %22, i64 %18
  store %struct.MODE_INFO* %23, %struct.MODE_INFO** %19, align 8
  %24 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %20, align 8
  %25 = load %struct.MODE_INFO*, %struct.MODE_INFO** %24, align 8
  %26 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %25, i64 0, i32 0
  store i8 %2, i8* %26, align 4
  %27 = icmp sgt i32 %8, 0
  br i1 %27, label %28, label %80

28:                                               ; preds = %11
  %29 = sub i32 0, %7
  br label %30

30:                                               ; preds = %28, %77
  %31 = phi i32 [ %78, %77 ], [ 0, %28 ]
  %32 = icmp eq i32 %31, 0
  %33 = zext i1 %32 to i32
  %34 = icmp slt i32 %33, %7
  br i1 %34, label %35, label %77

35:                                               ; preds = %30
  %36 = sub i32 %7, %33
  %37 = xor i32 %33, -1
  %38 = and i32 %36, 1
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %51, label %40

40:                                               ; preds = %35
  %41 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %20, align 8
  %42 = bitcast %struct.MODE_INFO** %41 to i64*
  %43 = load i64, i64* %42, align 8
  %44 = load i32, i32* %12, align 4
  %45 = mul nsw i32 %44, %31
  %46 = add nsw i32 %45, %33
  %47 = sext i32 %46 to i64
  %48 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %41, i64 %47
  %49 = bitcast %struct.MODE_INFO** %48 to i64*
  store i64 %43, i64* %49, align 8
  %50 = select i1 %32, i32 2, i32 1
  br label %51

51:                                               ; preds = %40, %35
  %52 = phi i32 [ %50, %40 ], [ %33, %35 ]
  %53 = icmp eq i32 %37, %29
  br i1 %53, label %77, label %54

54:                                               ; preds = %51, %54
  %55 = phi i32 [ %75, %54 ], [ %52, %51 ]
  %56 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %20, align 8
  %57 = bitcast %struct.MODE_INFO** %56 to i64*
  %58 = load i64, i64* %57, align 8
  %59 = load i32, i32* %12, align 4
  %60 = mul nsw i32 %59, %31
  %61 = add nsw i32 %60, %55
  %62 = sext i32 %61 to i64
  %63 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %56, i64 %62
  %64 = bitcast %struct.MODE_INFO** %63 to i64*
  store i64 %58, i64* %64, align 8
  %65 = add nuw nsw i32 %55, 1
  %66 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %20, align 8
  %67 = bitcast %struct.MODE_INFO** %66 to i64*
  %68 = load i64, i64* %67, align 8
  %69 = load i32, i32* %12, align 4
  %70 = mul nsw i32 %69, %31
  %71 = add nsw i32 %70, %65
  %72 = sext i32 %71 to i64
  %73 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %66, i64 %72
  %74 = bitcast %struct.MODE_INFO** %73 to i64*
  store i64 %68, i64* %74, align 8
  %75 = add nuw nsw i32 %55, 2
  %76 = icmp eq i32 %75, %7
  br i1 %76, label %77, label %54

77:                                               ; preds = %51, %54, %30
  %78 = add nuw nsw i32 %31, 1
  %79 = icmp eq i32 %78, %8
  br i1 %79, label %80, label %30

80:                                               ; preds = %77, %11
  %81 = shl i32 %5, 1
  %82 = shl i32 %6, 1
  %83 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 0, i64 0, i32 1
  %84 = load i32, i32* %83, align 8
  %85 = ashr i32 %81, %84
  %86 = trunc i32 %85 to i16
  %87 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 0, i64 0, i32 8
  store i16 %86, i16* %87, align 8
  %88 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 0, i64 0, i32 2
  %89 = load i32, i32* %88, align 4
  %90 = ashr i32 %82, %89
  %91 = trunc i32 %90 to i16
  %92 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 0, i64 0, i32 9
  store i16 %91, i16* %92, align 2
  %93 = sub nsw i32 %9, %84
  %94 = trunc i32 %93 to i8
  %95 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 0, i64 0, i32 10
  store i8 %94, i8* %95, align 4
  %96 = sub nsw i32 %10, %89
  %97 = trunc i32 %96 to i8
  %98 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 0, i64 0, i32 11
  store i8 %97, i8* %98, align 1
  %99 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 0, i64 1, i32 1
  %100 = load i32, i32* %99, align 8
  %101 = ashr i32 %81, %100
  %102 = trunc i32 %101 to i16
  %103 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 0, i64 1, i32 8
  store i16 %102, i16* %103, align 8
  %104 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 0, i64 1, i32 2
  %105 = load i32, i32* %104, align 4
  %106 = ashr i32 %82, %105
  %107 = trunc i32 %106 to i16
  %108 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 0, i64 1, i32 9
  store i16 %107, i16* %108, align 2
  %109 = sub nsw i32 %9, %100
  %110 = trunc i32 %109 to i8
  %111 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 0, i64 1, i32 10
  store i8 %110, i8* %111, align 4
  %112 = sub nsw i32 %10, %105
  %113 = trunc i32 %112 to i8
  %114 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 0, i64 1, i32 11
  store i8 %113, i8* %114, align 1
  %115 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 0, i64 2, i32 1
  %116 = load i32, i32* %115, align 8
  %117 = ashr i32 %81, %116
  %118 = trunc i32 %117 to i16
  %119 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 0, i64 2, i32 8
  store i16 %118, i16* %119, align 8
  %120 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 0, i64 2, i32 2
  %121 = load i32, i32* %120, align 4
  %122 = ashr i32 %82, %121
  %123 = trunc i32 %122 to i16
  %124 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 0, i64 2, i32 9
  store i16 %123, i16* %124, align 2
  %125 = sub nsw i32 %9, %116
  %126 = trunc i32 %125 to i8
  %127 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 0, i64 2, i32 10
  store i8 %126, i8* %127, align 4
  %128 = sub nsw i32 %10, %121
  %129 = trunc i32 %128 to i8
  %130 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 0, i64 2, i32 11
  store i8 %129, i8* %130, align 1
  %131 = shl nsw i32 %4, 1
  %132 = shl nsw i32 %3, 1
  %133 = and i32 %132, 14
  %134 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 19, i64 0
  %135 = load i8*, i8** %134, align 8
  %136 = ashr i32 %131, %84
  %137 = sext i32 %136 to i64
  %138 = getelementptr inbounds i8, i8* %135, i64 %137
  %139 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 0, i64 0, i32 5
  store i8* %138, i8** %139, align 8
  %140 = lshr i32 %133, %89
  %141 = sext i32 %140 to i64
  %142 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 20, i64 0, i64 %141
  %143 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 0, i64 0, i32 6
  store i8* %142, i8** %143, align 8
  %144 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 19, i64 1
  %145 = load i8*, i8** %144, align 8
  %146 = ashr i32 %131, %100
  %147 = sext i32 %146 to i64
  %148 = getelementptr inbounds i8, i8* %145, i64 %147
  %149 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 0, i64 1, i32 5
  store i8* %148, i8** %149, align 8
  %150 = lshr i32 %133, %105
  %151 = sext i32 %150 to i64
  %152 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 20, i64 1, i64 %151
  %153 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 0, i64 1, i32 6
  store i8* %152, i8** %153, align 8
  %154 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 19, i64 2
  %155 = load i8*, i8** %154, align 8
  %156 = ashr i32 %131, %116
  %157 = sext i32 %156 to i64
  %158 = getelementptr inbounds i8, i8* %155, i64 %157
  %159 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 0, i64 2, i32 5
  store i8* %158, i8** %159, align 8
  %160 = lshr i32 %133, %121
  %161 = sext i32 %160 to i64
  %162 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 20, i64 2, i64 %161
  %163 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 0, i64 2, i32 6
  store i8* %162, i8** %163, align 8
  %164 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 33
  %165 = load i32, i32* %164, align 16
  %166 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 35
  %167 = load i32, i32* %166, align 8
  %168 = shl nsw i32 %3, 6
  %169 = sub nsw i32 0, %168
  %170 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 14
  store i32 %169, i32* %170, align 8
  %171 = add i32 %6, %3
  %172 = sub i32 %165, %171
  %173 = shl nsw i32 %172, 6
  %174 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 15
  store i32 %173, i32* %174, align 4
  %175 = shl nsw i32 %4, 6
  %176 = sub nsw i32 0, %175
  %177 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 12
  store i32 %176, i32* %177, align 8
  %178 = add i32 %5, %4
  %179 = sub i32 %167, %178
  %180 = shl nsw i32 %179, 6
  %181 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 13
  store i32 %180, i32* %181, align 4
  %182 = icmp eq i32 %3, 0
  br i1 %182, label %191, label %183

183:                                              ; preds = %80
  %184 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %20, align 8
  %185 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 5
  %186 = load i32, i32* %185, align 8
  %187 = sub nsw i32 0, %186
  %188 = sext i32 %187 to i64
  %189 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %184, i64 %188
  %190 = load %struct.MODE_INFO*, %struct.MODE_INFO** %189, align 8
  br label %191

191:                                              ; preds = %183, %80
  %192 = phi %struct.MODE_INFO* [ %190, %183 ], [ null, %80 ]
  %193 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 8
  store %struct.MODE_INFO* %192, %struct.MODE_INFO** %193, align 8
  %194 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 4, i32 2
  %195 = load i32, i32* %194, align 4
  %196 = icmp slt i32 %195, %4
  br i1 %196, label %197, label %201

197:                                              ; preds = %191
  %198 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %20, align 8
  %199 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %198, i64 -1
  %200 = load %struct.MODE_INFO*, %struct.MODE_INFO** %199, align 8
  br label %201

201:                                              ; preds = %191, %197
  %202 = phi %struct.MODE_INFO* [ %200, %197 ], [ null, %191 ]
  %203 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 7
  store %struct.MODE_INFO* %202, %struct.MODE_INFO** %203, align 8
  %204 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 0, i64 0
  %205 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 89
  %206 = load %struct.BufferPool*, %struct.BufferPool** %205, align 8
  %207 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 18
  %208 = load i32, i32* %207, align 16
  %209 = sext i32 %208 to i64
  %210 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %206, i64 0, i32 3, i64 %209, i32 8
  tail call void @vp9_setup_dst_planes(%struct.macroblockd_plane* %204, %struct.yv12_buffer_config* %210, i32 %3, i32 %4) #9
  %211 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %20, align 8
  %212 = load %struct.MODE_INFO*, %struct.MODE_INFO** %211, align 8
  ret %struct.MODE_INFO* %212
}

declare void @vp9_read_mode_info(%struct.TileWorkerData*, %struct.VP9Decoder*, i32, i32, i32, i32) local_unnamed_addr #1

declare i32 @vp9_decode_block_tokens(%struct.TileWorkerData*, i32, %struct.scan_order*, i32, i32, i8 zeroext, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define internal i32 @tile_worker_hook(i8*, i8*) #0 {
  %3 = alloca %struct.TileInfo*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i8* %0 to %struct.TileWorkerData*
  %8 = bitcast i8* %1 to %struct.VP9Decoder*
  %9 = bitcast %struct.TileInfo** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9)
  store volatile %struct.TileInfo* inttoptr (i64 -6148914691236517206 to %struct.TileInfo*), %struct.TileInfo** %3, align 8
  %10 = getelementptr inbounds i8, i8* %0, i64 13752
  %11 = bitcast i8* %10 to %struct.TileInfo*
  store volatile %struct.TileInfo* %11, %struct.TileInfo** %3, align 8
  %12 = getelementptr inbounds i8, i8* %1, i64 656
  %13 = bitcast i8* %12 to %struct.VP9Common*
  %14 = getelementptr inbounds i8, i8* %1, i64 18904
  %15 = bitcast i8* %14 to i32*
  %16 = load i32, i32* %15, align 8
  %17 = shl nsw i32 -1, %16
  %18 = xor i32 %17, -1
  %19 = bitcast i8** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %19)
  store volatile i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %4, align 8
  store volatile i8* null, i8** %4, align 8
  %20 = getelementptr inbounds i8, i8* %0, i64 13304
  %21 = bitcast i8* %20 to %struct.LoopFilterWorkerData**
  %22 = load %struct.LoopFilterWorkerData*, %struct.LoopFilterWorkerData** %21, align 8
  %23 = getelementptr inbounds i8, i8* %0, i64 13312
  %24 = bitcast i8* %23 to %struct.VP9LfSyncData**
  %25 = load %struct.VP9LfSyncData*, %struct.VP9LfSyncData** %24, align 16
  %26 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %26)
  store volatile i32 -1431655766, i32* %5, align 4
  store volatile i32 0, i32* %5, align 4
  %27 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %27)
  store volatile i32 -1431655766, i32* %6, align 4
  %28 = getelementptr inbounds i8, i8* %0, i64 8
  %29 = bitcast i8* %28 to i32*
  %30 = load i32, i32* %29, align 8
  store volatile i32 %30, i32* %6, align 4
  %31 = getelementptr inbounds i8, i8* %0, i64 69280
  %32 = bitcast i8* %31 to %struct.vpx_internal_error_info*
  %33 = getelementptr inbounds i8, i8* %0, i64 69368
  %34 = bitcast i8* %33 to i32*
  store i32 1, i32* %34, align 8
  %35 = getelementptr inbounds i8, i8* %0, i64 69376
  %36 = bitcast i8* %35 to %struct.__jmp_buf_tag*
  %37 = call i32 @_setjmp(%struct.__jmp_buf_tag* %36) #10
  %38 = icmp eq i32 %37, 0
  br i1 %38, label %86, label %39

39:                                               ; preds = %2
  store i32 0, i32* %34, align 8
  %40 = getelementptr inbounds i8, i8* %0, i64 13960
  %41 = bitcast i8* %40 to i32*
  store i32 1, i32* %41, align 8
  %42 = bitcast i8* %0 to i8**
  store i8* null, i8** %42, align 16
  %43 = getelementptr inbounds i8, i8* %1, i64 20708
  %44 = bitcast i8* %43 to i32*
  %45 = load i32, i32* %44, align 4
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %332, label %47

47:                                               ; preds = %39
  %48 = getelementptr inbounds i8, i8* %1, i64 5400
  %49 = bitcast i8* %48 to i32*
  %50 = load i32, i32* %49, align 8
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %332, label %52

52:                                               ; preds = %47
  %53 = getelementptr inbounds i8, i8* %1, i64 18916
  %54 = bitcast i8* %53 to i32*
  %55 = load i32, i32* %54, align 4
  %56 = icmp eq i32 %55, 0
  br i1 %56, label %57, label %332

57:                                               ; preds = %52
  %58 = getelementptr inbounds i8, i8* %0, i64 12
  %59 = bitcast i8* %58 to i32*
  %60 = load i32, i32* %59, align 4
  %61 = load volatile i32, i32* %6, align 4
  %62 = sub nsw i32 %60, %61
  %63 = load volatile i32, i32* %5, align 4
  %64 = getelementptr inbounds i8, i8* %1, i64 1984
  %65 = bitcast i8* %64 to i32*
  %66 = load i32, i32* %65, align 16
  %67 = load i32, i32* %15, align 8
  %68 = shl i32 1, %67
  %69 = add nsw i32 %66, 7
  %70 = ashr i32 %69, 3
  %71 = add nsw i32 %70, -1
  br label %72

72:                                               ; preds = %83, %57
  %73 = phi i32 [ %62, %57 ], [ %84, %83 ]
  %74 = phi i32 [ %63, %57 ], [ 0, %83 ]
  %75 = icmp slt i32 %74, %66
  br i1 %75, label %76, label %83

76:                                               ; preds = %72, %76
  %77 = phi i32 [ %81, %76 ], [ %74, %72 ]
  %78 = ashr i32 %77, 3
  %79 = icmp eq i32 %71, %78
  %80 = zext i1 %79 to i32
  call void @vp9_set_row(%struct.VP9LfSyncData* %25, i32 %68, i32 %78, i32 %80, i32 1) #9
  %81 = add nsw i32 %77, 8
  %82 = icmp slt i32 %81, %66
  br i1 %82, label %76, label %83

83:                                               ; preds = %76, %72
  %84 = add nsw i32 %73, -1
  %85 = icmp eq i32 %73, 0
  br i1 %85, label %332, label %72

86:                                               ; preds = %2
  %87 = getelementptr inbounds i8, i8* %0, i64 13328
  %88 = getelementptr inbounds i8, i8* %0, i64 13960
  %89 = bitcast i8* %88 to i32*
  store i32 0, i32* %89, align 8
  %90 = getelementptr inbounds i8, i8* %1, i64 19040
  %91 = bitcast i8* %90 to %struct.TileBuffer*
  %92 = getelementptr inbounds i8, i8* %0, i64 13984
  %93 = getelementptr inbounds i8, i8* %0, i64 16
  %94 = bitcast i8* %93 to %struct.vpx_reader*
  %95 = getelementptr inbounds i8, i8* %1, i64 20672
  %96 = bitcast i8* %95 to void (i8*, i8*, i8*, i32)**
  %97 = getelementptr inbounds i8, i8* %1, i64 20680
  %98 = bitcast i8* %97 to i8**
  %99 = bitcast i8* %0 to i64*
  %100 = getelementptr inbounds i8, i8* %1, i64 18936
  %101 = bitcast i8* %100 to i8**
  %102 = getelementptr inbounds i8, i8* %1, i64 1992
  %103 = bitcast i8* %102 to i32*
  %104 = getelementptr inbounds i8, i8* %1, i64 2052
  %105 = getelementptr inbounds i8, i8* %1, i64 5576
  %106 = bitcast i8* %105 to %struct.frame_contexts**
  %107 = bitcast i8* %105 to i64*
  %108 = getelementptr inbounds i8, i8* %0, i64 13832
  %109 = bitcast i8* %108 to i64*
  %110 = bitcast i8* %87 to i8**
  %111 = bitcast i8* %100 to i64*
  %112 = getelementptr inbounds i8, i8* %0, i64 13864
  %113 = bitcast i8* %112 to i64*
  %114 = getelementptr inbounds i8, i8* %0, i64 13408
  %115 = getelementptr inbounds i8, i8* %1, i64 2020
  %116 = getelementptr inbounds i8, i8* %0, i64 13464
  %117 = bitcast i8* %116 to i8**
  %118 = getelementptr inbounds i8, i8* %0, i64 13872
  %119 = bitcast i8* %118 to i8**
  %120 = getelementptr inbounds i8, i8* %0, i64 13544
  %121 = getelementptr inbounds i8, i8* %0, i64 13600
  %122 = bitcast i8* %121 to i8**
  %123 = getelementptr inbounds i8, i8* %0, i64 13880
  %124 = bitcast i8* %123 to i8**
  %125 = getelementptr inbounds i8, i8* %0, i64 13680
  %126 = getelementptr inbounds i8, i8* %1, i64 18928
  %127 = bitcast i8* %126 to i64*
  %128 = getelementptr inbounds i8, i8* %0, i64 13936
  %129 = bitcast i8* %128 to i64*
  %130 = getelementptr inbounds i8, i8* %1, i64 1996
  %131 = bitcast i8* %130 to i32*
  %132 = getelementptr inbounds i8, i8* %0, i64 13768
  %133 = bitcast i8* %132 to i32*
  %134 = getelementptr inbounds i8, i8* %0, i64 13968
  %135 = bitcast i8* %134 to i8**
  %136 = getelementptr inbounds i8, i8* %1, i64 1948
  %137 = bitcast i8* %136 to i32*
  %138 = getelementptr inbounds i8, i8* %1, i64 1964
  %139 = getelementptr inbounds i8, i8* %0, i64 13808
  %140 = bitcast i8* %139 to [3 x i8]**
  %141 = getelementptr inbounds i8, i8* %0, i64 13888
  %142 = getelementptr inbounds i8, i8* %0, i64 13944
  %143 = bitcast i8* %142 to i64*
  %144 = getelementptr inbounds i8, i8* %1, i64 20708
  %145 = bitcast i8* %144 to i32*
  %146 = getelementptr inbounds i8, i8* %1, i64 5400
  %147 = bitcast i8* %146 to i32*
  %148 = getelementptr inbounds i8, i8* %1, i64 18916
  %149 = bitcast i8* %148 to i32*
  %150 = getelementptr inbounds i8, i8* %1, i64 1984
  %151 = bitcast i8* %150 to i32*
  %152 = getelementptr inbounds i8, i8* %0, i64 12
  %153 = bitcast i8* %152 to i32*
  br label %154

154:                                              ; preds = %271, %86
  %155 = load volatile i32, i32* %6, align 4
  %156 = sext i32 %155 to i64
  store volatile i32 0, i32* %5, align 4
  call void @llvm.memset.p0i8.i64(i8* align 16 %92, i8 0, i64 4096, i1 false)
  %157 = load volatile %struct.TileInfo*, %struct.TileInfo** %3, align 8
  %158 = getelementptr inbounds %struct.TileBuffer, %struct.TileBuffer* %91, i64 %156, i32 2
  %159 = load i32, i32* %158, align 8
  call void @vp9_tile_init(%struct.TileInfo* %157, %struct.VP9Common* %13, i32 0, i32 %159) #9
  %160 = getelementptr inbounds %struct.TileBuffer, %struct.TileBuffer* %91, i64 %156, i32 0
  %161 = load i8*, i8** %160, align 8
  %162 = getelementptr inbounds %struct.TileBuffer, %struct.TileBuffer* %91, i64 %156, i32 1
  %163 = load i64, i64* %162, align 8
  %164 = load void (i8*, i8*, i8*, i32)*, void (i8*, i8*, i8*, i32)** %96, align 16
  %165 = load i8*, i8** %98, align 8
  %166 = icmp eq i64 %163, 0
  br i1 %166, label %172, label %167

167:                                              ; preds = %154
  %168 = load i64, i64* %99, align 16
  %169 = ptrtoint i8* %161 to i64
  %170 = sub i64 %168, %169
  %171 = icmp ult i64 %170, %163
  br i1 %171, label %172, label %173

172:                                              ; preds = %167, %154
  call void (%struct.vpx_internal_error_info*, i32, i8*, ...) @vpx_internal_error(%struct.vpx_internal_error_info* %32, i32 7, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.33, i64 0, i64 0)) #9
  br label %173

173:                                              ; preds = %172, %167
  %174 = call i32 @vpx_reader_init(%struct.vpx_reader* %94, i8* %161, i64 %163, void (i8*, i8*, i8*, i32)* %164, i8* %165) #9
  %175 = icmp eq i32 %174, 0
  br i1 %175, label %177, label %176

176:                                              ; preds = %173
  call void (%struct.vpx_internal_error_info*, i32, i8*, ...) @vpx_internal_error(%struct.vpx_internal_error_info* %32, i32 2, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.34, i64 0, i64 0), i32 1) #9
  br label %177

177:                                              ; preds = %173, %176
  store i8* %92, i8** %110, align 8
  %178 = load i64, i64* %111, align 8
  store i64 %178, i64* %113, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %114, i8* align 4 %115, i64 32, i1 false) #9
  %179 = load i64, i64* %107, align 8
  store i64 %179, i64* %109, align 8
  store i8* %92, i8** %117, align 8
  %180 = load i8*, i8** %101, align 8
  %181 = load i32, i32* %103, align 8
  %182 = add nsw i32 %181, 7
  %183 = and i32 %182, -8
  %184 = sext i32 %183 to i64
  %185 = shl nsw i64 %184, 1
  %186 = getelementptr inbounds i8, i8* %180, i64 %185
  store i8* %186, i8** %119, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %120, i8* align 4 %104, i64 32, i1 false) #9
  %187 = load i64, i64* %107, align 8
  store i64 %187, i64* %109, align 8
  store i8* %92, i8** %122, align 8
  %188 = load i8*, i8** %101, align 8
  %189 = load i32, i32* %103, align 8
  %190 = add nsw i32 %189, 7
  %191 = and i32 %190, -8
  %192 = sext i32 %191 to i64
  %193 = shl nsw i64 %192, 2
  %194 = getelementptr inbounds i8, i8* %188, i64 %193
  store i8* %194, i8** %124, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %125, i8* align 4 %104, i64 32, i1 false) #9
  %195 = load i64, i64* %107, align 8
  store i64 %195, i64* %109, align 8
  %196 = load i64, i64* %127, align 16
  store i64 %196, i64* %129, align 8
  %197 = load i32, i32* %131, align 4
  store i32 %197, i32* %133, align 8
  store i8* %12, i8** %135, align 8
  %198 = load i32, i32* %137, align 4
  %199 = icmp eq i32 %198, 0
  br i1 %199, label %206, label %200

200:                                              ; preds = %177
  %201 = load i8, i8* %138, align 4
  %202 = icmp eq i8 %201, 0
  br i1 %202, label %203, label %206

203:                                              ; preds = %200
  %204 = load %struct.frame_contexts*, %struct.frame_contexts** %106, align 8
  %205 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %204, i64 0, i32 2, i64 0
  br label %206

206:                                              ; preds = %177, %200, %203
  %207 = phi [3 x i8]* [ %205, %203 ], [ getelementptr inbounds ([16 x [3 x i8]], [16 x [3 x i8]]* @vp9_kf_partition_probs, i64 0, i64 0), %200 ], [ getelementptr inbounds ([16 x [3 x i8]], [16 x [3 x i8]]* @vp9_kf_partition_probs, i64 0, i64 0), %177 ]
  store [3 x i8]* %207, [3 x i8]** %140, align 8
  store i8* %31, i8** %135, align 16
  %208 = load volatile %struct.TileInfo*, %struct.TileInfo** %3, align 8
  %209 = getelementptr inbounds %struct.TileInfo, %struct.TileInfo* %208, i64 0, i32 0
  %210 = load i32, i32* %209, align 4
  store volatile i32 %210, i32* %5, align 4
  %211 = load volatile i32, i32* %5, align 4
  %212 = load volatile %struct.TileInfo*, %struct.TileInfo** %3, align 8
  %213 = getelementptr inbounds %struct.TileInfo, %struct.TileInfo* %212, i64 0, i32 1
  %214 = load i32, i32* %213, align 4
  %215 = icmp slt i32 %211, %214
  br i1 %215, label %216, label %263

216:                                              ; preds = %206, %255
  call void @llvm.memset.p0i8.i64(i8* align 16 %141, i8 0, i64 48, i1 false)
  store i64 0, i64* %143, align 8
  %217 = load volatile %struct.TileInfo*, %struct.TileInfo** %3, align 8
  %218 = getelementptr inbounds %struct.TileInfo, %struct.TileInfo* %217, i64 0, i32 2
  %219 = load i32, i32* %218, align 4
  %220 = load volatile %struct.TileInfo*, %struct.TileInfo** %3, align 8
  %221 = getelementptr inbounds %struct.TileInfo, %struct.TileInfo* %220, i64 0, i32 3
  %222 = load i32, i32* %221, align 4
  %223 = icmp slt i32 %219, %222
  br i1 %223, label %224, label %232

224:                                              ; preds = %216, %224
  %225 = phi i32 [ %227, %224 ], [ %219, %216 ]
  %226 = load volatile i32, i32* %5, align 4
  call fastcc void @decode_partition(%struct.TileWorkerData* %7, %struct.VP9Decoder* %8, i32 %226, i32 %225, i8 zeroext 12, i32 4)
  %227 = add nsw i32 %225, 8
  %228 = load volatile %struct.TileInfo*, %struct.TileInfo** %3, align 8
  %229 = getelementptr inbounds %struct.TileInfo, %struct.TileInfo* %228, i64 0, i32 3
  %230 = load i32, i32* %229, align 4
  %231 = icmp slt i32 %227, %230
  br i1 %231, label %224, label %232

232:                                              ; preds = %224, %216
  %233 = load i32, i32* %145, align 4
  %234 = icmp eq i32 %233, 0
  br i1 %234, label %255, label %235

235:                                              ; preds = %232
  %236 = load i32, i32* %147, align 8
  %237 = icmp eq i32 %236, 0
  br i1 %237, label %255, label %238

238:                                              ; preds = %235
  %239 = load i32, i32* %149, align 4
  %240 = icmp eq i32 %239, 0
  br i1 %240, label %241, label %255

241:                                              ; preds = %238
  %242 = load i32, i32* %151, align 16
  %243 = add nsw i32 %242, 7
  %244 = ashr i32 %243, 3
  %245 = add nsw i32 %244, -1
  %246 = load volatile i32, i32* %5, align 4
  %247 = ashr i32 %246, 3
  %248 = icmp eq i32 %245, %247
  %249 = zext i1 %248 to i32
  %250 = load i32, i32* %15, align 8
  %251 = shl i32 1, %250
  %252 = load volatile i32, i32* %5, align 4
  %253 = ashr i32 %252, 3
  %254 = load i32, i32* %89, align 8
  call void @vp9_set_row(%struct.VP9LfSyncData* %25, i32 %251, i32 %253, i32 %249, i32 %254) #9
  br label %255

255:                                              ; preds = %238, %235, %232, %241
  %256 = load volatile i32, i32* %5, align 4
  %257 = add nsw i32 %256, 8
  store volatile i32 %257, i32* %5, align 4
  %258 = load volatile i32, i32* %5, align 4
  %259 = load volatile %struct.TileInfo*, %struct.TileInfo** %3, align 8
  %260 = getelementptr inbounds %struct.TileInfo, %struct.TileInfo* %259, i64 0, i32 1
  %261 = load i32, i32* %260, align 4
  %262 = icmp slt i32 %258, %261
  br i1 %262, label %216, label %263

263:                                              ; preds = %255, %206
  %264 = load i32, i32* %158, align 8
  %265 = icmp eq i32 %264, %18
  br i1 %265, label %266, label %268

266:                                              ; preds = %263
  %267 = call i8* @vpx_reader_find_end(%struct.vpx_reader* %94) #9
  store volatile i8* %267, i8** %4, align 8
  br label %268

268:                                              ; preds = %266, %263
  %269 = load i32, i32* %89, align 8
  %270 = icmp eq i32 %269, 0
  br i1 %270, label %271, label %276

271:                                              ; preds = %268
  %272 = load volatile i32, i32* %6, align 4
  %273 = add nsw i32 %272, 1
  store volatile i32 %273, i32* %6, align 4
  %274 = load i32, i32* %153, align 4
  %275 = icmp slt i32 %272, %274
  br i1 %275, label %154, label %276

276:                                              ; preds = %268, %271
  %277 = bitcast i8* %0 to i8**
  %278 = load i32, i32* %145, align 4
  %279 = icmp eq i32 %278, 0
  br i1 %279, label %327, label %280

280:                                              ; preds = %276
  %281 = load volatile i32, i32* %6, align 4
  %282 = load i32, i32* %153, align 4
  %283 = icmp slt i32 %281, %282
  br i1 %283, label %284, label %317

284:                                              ; preds = %280
  %285 = load i32, i32* %147, align 8
  %286 = icmp eq i32 %285, 0
  br i1 %286, label %317, label %287

287:                                              ; preds = %284
  %288 = load i32, i32* %149, align 4
  %289 = icmp eq i32 %288, 0
  br i1 %289, label %290, label %317

290:                                              ; preds = %287
  %291 = load volatile i32, i32* %6, align 4
  %292 = add nsw i32 %291, 1
  store volatile i32 %292, i32* %6, align 4
  %293 = load i32, i32* %151, align 16
  %294 = load volatile i32, i32* %6, align 4
  %295 = sub nsw i32 %282, %294
  %296 = load i32, i32* %15, align 8
  %297 = shl i32 1, %296
  %298 = add nsw i32 %293, 7
  %299 = ashr i32 %298, 3
  %300 = add nsw i32 %299, -1
  %301 = icmp sgt i32 %293, 0
  br label %302

302:                                              ; preds = %311, %290
  %303 = phi i32 [ %295, %290 ], [ %312, %311 ]
  br i1 %301, label %304, label %311

304:                                              ; preds = %302, %304
  %305 = phi i32 [ %309, %304 ], [ 0, %302 ]
  %306 = lshr exact i32 %305, 3
  %307 = icmp eq i32 %300, %306
  %308 = zext i1 %307 to i32
  call void @vp9_set_row(%struct.VP9LfSyncData* %25, i32 %297, i32 %306, i32 %308, i32 1) #9
  %309 = add nuw nsw i32 %305, 8
  %310 = icmp slt i32 %309, %293
  br i1 %310, label %304, label %311

311:                                              ; preds = %304, %302
  %312 = add nsw i32 %303, -1
  %313 = icmp eq i32 %303, 0
  br i1 %313, label %314, label %302

314:                                              ; preds = %311
  %315 = load i32, i32* %145, align 4
  %316 = icmp eq i32 %315, 0
  br i1 %316, label %327, label %317

317:                                              ; preds = %280, %284, %287, %314
  %318 = load i32, i32* %89, align 8
  %319 = icmp eq i32 %318, 0
  br i1 %319, label %320, label %327

320:                                              ; preds = %317
  %321 = load i32, i32* %147, align 8
  %322 = icmp eq i32 %321, 0
  br i1 %322, label %327, label %323

323:                                              ; preds = %320
  %324 = load i32, i32* %149, align 4
  %325 = icmp eq i32 %324, 0
  br i1 %325, label %326, label %327

326:                                              ; preds = %323
  call void @vp9_loopfilter_rows(%struct.LoopFilterWorkerData* %22, %struct.VP9LfSyncData* %25) #9
  br label %327

327:                                              ; preds = %276, %323, %320, %317, %314, %326
  %328 = load volatile i8*, i8** %4, align 8
  store i8* %328, i8** %277, align 16
  %329 = load i32, i32* %89, align 8
  %330 = icmp eq i32 %329, 0
  %331 = zext i1 %330 to i32
  br label %332

332:                                              ; preds = %83, %39, %47, %52, %327
  %333 = phi i32 [ %331, %327 ], [ 0, %52 ], [ 0, %47 ], [ 0, %39 ], [ 0, %83 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %27)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %26)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %19)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9)
  ret i32 %333
}

; Function Attrs: nofree
declare void @qsort(i8*, i64, i64, i32 (i8*, i8*)* nocapture) local_unnamed_addr #7

; Function Attrs: norecurse nounwind readonly ssp uwtable
define internal i32 @compare_tile_buffers(i8* nocapture readonly, i8* nocapture readonly) #8 {
  %3 = getelementptr inbounds i8, i8* %0, i64 8
  %4 = bitcast i8* %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds i8, i8* %1, i64 8
  %7 = bitcast i8* %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = icmp ult i64 %5, %8
  %10 = zext i1 %9 to i32
  %11 = icmp ugt i64 %5, %8
  %12 = zext i1 %11 to i32
  %13 = sub nsw i32 %10, %12
  ret i32 %13
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @decode_partition(%struct.TileWorkerData*, %struct.VP9Decoder*, i32, i32, i8 zeroext, i32) unnamed_addr #0 {
  %7 = add nsw i32 %5, -1
  %8 = shl i32 1, %7
  %9 = ashr i32 %8, 1
  %10 = add nsw i32 %9, %2
  %11 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %1, i64 0, i32 1, i32 33
  %12 = load i32, i32* %11, align 16
  %13 = icmp slt i32 %10, %12
  %14 = add nsw i32 %9, %3
  %15 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %1, i64 0, i32 1, i32 35
  %16 = load i32, i32* %15, align 8
  %17 = icmp slt i32 %14, %16
  %18 = icmp sgt i32 %12, %2
  %19 = icmp sgt i32 %16, %3
  %20 = and i1 %18, %19
  br i1 %20, label %21, label %67

21:                                               ; preds = %6
  %22 = zext i1 %17 to i32
  %23 = zext i1 %13 to i32
  %24 = tail call fastcc i32 @read_partition(%struct.TileWorkerData* %0, i32 %2, i32 %3, i32 %23, i32 %22, i32 %7)
  %25 = zext i32 %24 to i64
  %26 = zext i8 %4 to i64
  %27 = getelementptr inbounds [4 x [13 x i8]], [4 x [13 x i8]]* @subsize_lookup, i64 0, i64 %25, i64 %26
  %28 = load i8, i8* %27, align 1
  %29 = icmp eq i32 %9, 0
  br i1 %29, label %30, label %40

30:                                               ; preds = %21
  %31 = lshr i32 %24, 1
  %32 = and i32 %31, 1
  %33 = lshr i32 1, %32
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 1
  store i8 %34, i8* %35, align 8
  %36 = and i32 %24, 1
  %37 = lshr i32 1, %36
  %38 = trunc i32 %37 to i8
  %39 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 2
  store i8 %38, i8* %39, align 1
  tail call fastcc void @decode_block(%struct.TileWorkerData* %0, %struct.VP9Decoder* %1, i32 %2, i32 %3, i8 zeroext %28, i32 1, i32 1)
  br label %47

40:                                               ; preds = %21
  switch i32 %24, label %47 [
    i32 0, label %41
    i32 1, label %42
    i32 2, label %44
    i32 3, label %46
  ]

41:                                               ; preds = %40
  tail call fastcc void @decode_block(%struct.TileWorkerData* %0, %struct.VP9Decoder* %1, i32 %2, i32 %3, i8 zeroext %28, i32 %5, i32 %5)
  br label %47

42:                                               ; preds = %40
  tail call fastcc void @decode_block(%struct.TileWorkerData* %0, %struct.VP9Decoder* %1, i32 %2, i32 %3, i8 zeroext %28, i32 %5, i32 %7)
  br i1 %13, label %43, label %47

43:                                               ; preds = %42
  tail call fastcc void @decode_block(%struct.TileWorkerData* %0, %struct.VP9Decoder* %1, i32 %10, i32 %3, i8 zeroext %28, i32 %5, i32 %7)
  br label %47

44:                                               ; preds = %40
  tail call fastcc void @decode_block(%struct.TileWorkerData* %0, %struct.VP9Decoder* %1, i32 %2, i32 %3, i8 zeroext %28, i32 %7, i32 %5)
  br i1 %17, label %45, label %47

45:                                               ; preds = %44
  tail call fastcc void @decode_block(%struct.TileWorkerData* %0, %struct.VP9Decoder* %1, i32 %2, i32 %14, i8 zeroext %28, i32 %7, i32 %5)
  br label %47

46:                                               ; preds = %40
  tail call fastcc void @decode_partition(%struct.TileWorkerData* %0, %struct.VP9Decoder* %1, i32 %2, i32 %3, i8 zeroext %28, i32 %7)
  tail call fastcc void @decode_partition(%struct.TileWorkerData* %0, %struct.VP9Decoder* %1, i32 %2, i32 %14, i8 zeroext %28, i32 %7)
  tail call fastcc void @decode_partition(%struct.TileWorkerData* %0, %struct.VP9Decoder* %1, i32 %10, i32 %3, i8 zeroext %28, i32 %7)
  tail call fastcc void @decode_partition(%struct.TileWorkerData* %0, %struct.VP9Decoder* %1, i32 %10, i32 %14, i8 zeroext %28, i32 %7)
  br label %47

47:                                               ; preds = %41, %46, %43, %42, %45, %44, %40, %30
  %48 = icmp ugt i8 %4, 2
  br i1 %48, label %49, label %67

49:                                               ; preds = %47
  %50 = icmp eq i8 %4, 3
  %51 = icmp ne i32 %24, 3
  %52 = or i1 %50, %51
  br i1 %52, label %53, label %67

53:                                               ; preds = %49
  %54 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 21
  %55 = load i8*, i8** %54, align 16
  %56 = sext i32 %3 to i64
  %57 = getelementptr inbounds i8, i8* %55, i64 %56
  %58 = and i32 %2, 7
  %59 = zext i32 %58 to i64
  %60 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 22, i64 %59
  %61 = zext i8 %28 to i64
  %62 = getelementptr inbounds [13 x %struct.anon.2], [13 x %struct.anon.2]* @partition_context_lookup, i64 0, i64 %61, i32 0
  %63 = load i8, i8* %62, align 2
  %64 = sext i32 %8 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %57, i8 %63, i64 %64, i1 false) #9
  %65 = getelementptr inbounds [13 x %struct.anon.2], [13 x %struct.anon.2]* @partition_context_lookup, i64 0, i64 %61, i32 1
  %66 = load i8, i8* %65, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %60, i8 %66, i64 %64, i1 false) #9
  br label %67

67:                                               ; preds = %47, %53, %49, %6
  ret void
}

declare void @vp9_set_row(%struct.VP9LfSyncData*, i32, i32, i32, i32) local_unnamed_addr #1

declare void @vp9_loopfilter_rows(%struct.LoopFilterWorkerData*, %struct.VP9LfSyncData*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @decode_block(%struct.TileWorkerData*, %struct.VP9Decoder*, i32, i32, i8 zeroext, i32, i32) unnamed_addr #0 {
  %8 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %1, i64 0, i32 1
  %9 = icmp ugt i8 %4, 2
  %10 = add nsw i32 %5, -1
  %11 = shl i32 1, %10
  %12 = add nsw i32 %6, -1
  %13 = shl i32 1, %12
  %14 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %1, i64 0, i32 1, i32 35
  %15 = load i32, i32* %14, align 8
  %16 = sub nsw i32 %15, %3
  %17 = icmp slt i32 %11, %16
  %18 = select i1 %17, i32 %11, i32 %16
  %19 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %1, i64 0, i32 1, i32 33
  %20 = load i32, i32* %19, align 16
  %21 = sub nsw i32 %20, %2
  %22 = icmp slt i32 %13, %21
  %23 = select i1 %22, i32 %13, i32 %21
  %24 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8
  %25 = tail call fastcc %struct.MODE_INFO* @set_offsets(%struct.VP9Common* %8, %struct.macroblockd* %24, i8 zeroext %4, i32 %2, i32 %3, i32 %11, i32 %13, i32 %18, i32 %23, i32 %5, i32 %6)
  br i1 %9, label %26, label %43

26:                                               ; preds = %7
  %27 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %1, i64 0, i32 1, i32 9
  %28 = load i32, i32* %27, align 8
  %29 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %1, i64 0, i32 1, i32 10
  %30 = load i32, i32* %29, align 4
  %31 = or i32 %28, %30
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %43, label %33

33:                                               ; preds = %26
  %34 = zext i8 %4 to i64
  %35 = sext i32 %28 to i64
  %36 = sext i32 %30 to i64
  %37 = getelementptr inbounds [13 x [2 x [2 x i8]]], [13 x [2 x [2 x i8]]]* @ss_size_lookup, i64 0, i64 %34, i64 %35, i64 %36
  %38 = load i8, i8* %37, align 1
  %39 = icmp eq i8 %38, 13
  br i1 %39, label %40, label %43

40:                                               ; preds = %33
  %41 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 26
  %42 = load %struct.vpx_internal_error_info*, %struct.vpx_internal_error_info** %41, align 8
  tail call void (%struct.vpx_internal_error_info*, i32, i8*, ...) @vpx_internal_error(%struct.vpx_internal_error_info* %42, i32 7, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.31, i64 0, i64 0)) #9
  br label %43

43:                                               ; preds = %26, %33, %40, %7
  tail call void @vp9_read_mode_info(%struct.TileWorkerData* %0, %struct.VP9Decoder* %1, i32 %2, i32 %3, i32 %18, i32 %23) #9
  %44 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %25, i64 0, i32 3
  %45 = load i8, i8* %44, align 1
  %46 = icmp eq i8 %45, 0
  br i1 %46, label %78, label %47

47:                                               ; preds = %43
  %48 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 0, i64 0, i32 5
  %49 = load i8*, i8** %48, align 8
  %50 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 0, i64 0, i32 8
  %51 = load i16, i16* %50, align 8
  %52 = zext i16 %51 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %49, i8 0, i64 %52, i1 false) #9
  %53 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 0, i64 0, i32 6
  %54 = load i8*, i8** %53, align 8
  %55 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 0, i64 0, i32 9
  %56 = load i16, i16* %55, align 2
  %57 = zext i16 %56 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %54, i8 0, i64 %57, i1 false) #9
  %58 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 0, i64 1, i32 5
  %59 = load i8*, i8** %58, align 8
  %60 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 0, i64 1, i32 8
  %61 = load i16, i16* %60, align 8
  %62 = zext i16 %61 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %59, i8 0, i64 %62, i1 false) #9
  %63 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 0, i64 1, i32 6
  %64 = load i8*, i8** %63, align 8
  %65 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 0, i64 1, i32 9
  %66 = load i16, i16* %65, align 2
  %67 = zext i16 %66 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %64, i8 0, i64 %67, i1 false) #9
  %68 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 0, i64 2, i32 5
  %69 = load i8*, i8** %68, align 8
  %70 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 0, i64 2, i32 8
  %71 = load i16, i16* %70, align 8
  %72 = zext i16 %71 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %69, i8 0, i64 %72, i1 false) #9
  %73 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 0, i64 2, i32 6
  %74 = load i8*, i8** %73, align 8
  %75 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 0, i64 2, i32 9
  %76 = load i16, i16* %75, align 2
  %77 = zext i16 %76 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %74, i8 0, i64 %77, i1 false) #9
  br label %78

78:                                               ; preds = %43, %47
  %79 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %25, i64 0, i32 8, i64 0
  %80 = load i8, i8* %79, align 4
  %81 = icmp slt i8 %80, 1
  br i1 %81, label %82, label %214

82:                                               ; preds = %78
  %83 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %25, i64 0, i32 0
  %84 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %25, i64 0, i32 2
  %85 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 13
  %86 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 15
  %87 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 9
  %88 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 10
  %89 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %25, i64 0, i32 1
  %90 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %25, i64 0, i32 6
  %91 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 6
  %92 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 24
  %93 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %25, i64 0, i32 4
  br label %94

94:                                               ; preds = %211, %82
  %95 = phi i64 [ 0, %82 ], [ %212, %211 ]
  %96 = icmp eq i64 %95, 0
  br i1 %96, label %109, label %97

97:                                               ; preds = %94
  %98 = load i8, i8* %83, align 4
  %99 = zext i8 %98 to i64
  %100 = load i8, i8* %84, align 2
  %101 = zext i8 %100 to i64
  %102 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 0, i64 %95, i32 1
  %103 = load i32, i32* %102, align 8
  %104 = sext i32 %103 to i64
  %105 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 0, i64 %95, i32 2
  %106 = load i32, i32* %105, align 4
  %107 = sext i32 %106 to i64
  %108 = getelementptr inbounds [13 x [4 x [2 x [2 x i8]]]], [13 x [4 x [2 x [2 x i8]]]]* @uv_txsize_lookup, i64 0, i64 %99, i64 %101, i64 %104, i64 %107
  br label %109

109:                                              ; preds = %94, %97
  %110 = phi i8* [ %108, %97 ], [ %84, %94 ]
  %111 = load i8, i8* %110, align 1
  %112 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 0, i64 %95, i32 8
  %113 = load i16, i16* %112, align 8
  %114 = zext i16 %113 to i32
  %115 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 0, i64 %95, i32 9
  %116 = load i16, i16* %115, align 2
  %117 = zext i16 %116 to i32
  %118 = zext i8 %111 to i32
  %119 = shl i32 1, %118
  %120 = load i32, i32* %85, align 4
  %121 = icmp sgt i32 %120, -1
  br i1 %121, label %127, label %122

122:                                              ; preds = %109
  %123 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 0, i64 %95, i32 1
  %124 = load i32, i32* %123, align 8
  %125 = add nsw i32 %124, 5
  %126 = ashr i32 %120, %125
  br label %127

127:                                              ; preds = %109, %122
  %128 = phi i32 [ %126, %122 ], [ 0, %109 ]
  %129 = add nsw i32 %128, %114
  %130 = load i32, i32* %86, align 4
  %131 = icmp sgt i32 %130, -1
  br i1 %131, label %137, label %132

132:                                              ; preds = %127
  %133 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 0, i64 %95, i32 2
  %134 = load i32, i32* %133, align 4
  %135 = add nsw i32 %134, 5
  %136 = ashr i32 %130, %135
  br label %137

137:                                              ; preds = %127, %132
  %138 = phi i32 [ %136, %132 ], [ 0, %127 ]
  %139 = add nsw i32 %138, %117
  %140 = select i1 %121, i32 0, i32 %129
  store i32 %140, i32* %87, align 8
  %141 = select i1 %131, i32 0, i32 %139
  store i32 %141, i32* %88, align 4
  %142 = icmp sgt i32 %139, 0
  br i1 %142, label %143, label %211

143:                                              ; preds = %137
  %144 = icmp sgt i32 %129, 0
  %145 = select i1 %96, i8* %89, i8* %90
  %146 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 0, i64 %95, i32 3, i32 0
  %147 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 0, i64 %95, i32 3, i32 1
  %148 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 0, i64 %95, i32 10
  %149 = zext i8 %111 to i64
  %150 = getelementptr inbounds [4 x %struct.scan_order], [4 x %struct.scan_order]* @vp9_default_scan_orders, i64 0, i64 %149
  %151 = sext i32 %119 to i64
  %152 = sext i32 %129 to i64
  %153 = sext i32 %139 to i64
  %154 = trunc i64 %95 to i32
  br label %155

155:                                              ; preds = %143, %208
  %156 = phi i64 [ 0, %143 ], [ %209, %208 ]
  br i1 %144, label %157, label %208

157:                                              ; preds = %155
  %158 = trunc i64 %156 to i32
  %159 = shl i32 %158, 1
  %160 = sext i32 %159 to i64
  br label %161

161:                                              ; preds = %157, %205
  %162 = phi i64 [ 0, %157 ], [ %206, %205 ]
  %163 = load i8*, i8** %146, align 8
  %164 = load i32, i32* %147, align 8
  %165 = mul i32 %164, %158
  %166 = trunc i64 %162 to i32
  %167 = add i32 %165, %166
  %168 = shl i32 %167, 2
  %169 = sext i32 %168 to i64
  %170 = getelementptr inbounds i8, i8* %163, i64 %169
  %171 = load i8, i8* %83, align 4
  %172 = icmp ult i8 %171, 3
  %173 = and i1 %96, %172
  br i1 %173, label %174, label %179

174:                                              ; preds = %161
  %175 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %91, align 8
  %176 = load %struct.MODE_INFO*, %struct.MODE_INFO** %175, align 8
  %177 = add nsw i64 %162, %160
  %178 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %176, i64 0, i32 10, i64 %177, i32 0
  br label %179

179:                                              ; preds = %174, %161
  %180 = phi i8* [ %178, %174 ], [ %145, %161 ]
  %181 = load i8, i8* %180, align 1
  %182 = load i8, i8* %148, align 4
  %183 = zext i8 %182 to i32
  tail call void @vp9_predict_intra_block(%struct.macroblockd* %24, i32 %183, i8 zeroext %111, i8 zeroext %181, i8* %170, i32 %164, i8* %170, i32 %164, i32 %166, i32 %158, i32 %154) #9
  %184 = load i8, i8* %44, align 1
  %185 = icmp eq i8 %184, 0
  br i1 %185, label %186, label %205

186:                                              ; preds = %179
  br i1 %96, label %187, label %196

187:                                              ; preds = %186
  %188 = load i32, i32* %92, align 4
  %189 = icmp eq i32 %188, 0
  br i1 %189, label %190, label %196

190:                                              ; preds = %187
  %191 = zext i8 %181 to i64
  %192 = getelementptr inbounds [10 x i32], [10 x i32]* @intra_mode_to_tx_type_lookup, i64 0, i64 %191
  %193 = load i32, i32* %192, align 4
  %194 = zext i32 %193 to i64
  %195 = getelementptr inbounds [4 x [4 x %struct.scan_order]], [4 x [4 x %struct.scan_order]]* @vp9_scan_orders, i64 0, i64 %149, i64 %194
  br label %196

196:                                              ; preds = %186, %187, %190
  %197 = phi i32 [ %193, %190 ], [ 0, %187 ], [ 0, %186 ]
  %198 = phi %struct.scan_order* [ %195, %190 ], [ %150, %187 ], [ %150, %186 ]
  %199 = load i8, i8* %93, align 4
  %200 = sext i8 %199 to i32
  %201 = tail call i32 @vp9_decode_block_tokens(%struct.TileWorkerData* %0, i32 %154, %struct.scan_order* %198, i32 %166, i32 %158, i8 zeroext %111, i32 %200) #9
  %202 = icmp sgt i32 %201, 0
  br i1 %202, label %203, label %205

203:                                              ; preds = %196
  %204 = load i32, i32* %147, align 8
  tail call fastcc void @inverse_transform_block_intra(%struct.macroblockd* %24, i32 %154, i32 %197, i8 zeroext %111, i8* %170, i32 %204, i32 %201) #9
  br label %205

205:                                              ; preds = %179, %196, %203
  %206 = add i64 %162, %151
  %207 = icmp slt i64 %206, %152
  br i1 %207, label %161, label %208

208:                                              ; preds = %205, %155
  %209 = add i64 %156, %151
  %210 = icmp slt i64 %209, %153
  br i1 %210, label %155, label %211

211:                                              ; preds = %208, %137
  %212 = add nuw nsw i64 %95, 1
  %213 = icmp eq i64 %212, 3
  br i1 %213, label %316, label %94

214:                                              ; preds = %78
  tail call fastcc void @dec_build_inter_predictors_sb(%struct.TileWorkerData* %0, %struct.VP9Decoder* %1, %struct.macroblockd* %24, i32 %2, i32 %3)
  %215 = load i8, i8* %44, align 1
  %216 = icmp eq i8 %215, 0
  br i1 %216, label %217, label %316

217:                                              ; preds = %214
  %218 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %25, i64 0, i32 0
  %219 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %25, i64 0, i32 2
  %220 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 13
  %221 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 15
  %222 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 9
  %223 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 10
  %224 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %25, i64 0, i32 4
  br label %225

225:                                              ; preds = %308, %217
  %226 = phi i64 [ 0, %217 ], [ %310, %308 ]
  %227 = phi i32 [ 0, %217 ], [ %309, %308 ]
  %228 = icmp eq i64 %226, 0
  br i1 %228, label %241, label %229

229:                                              ; preds = %225
  %230 = load i8, i8* %218, align 4
  %231 = zext i8 %230 to i64
  %232 = load i8, i8* %219, align 2
  %233 = zext i8 %232 to i64
  %234 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 0, i64 %226, i32 1
  %235 = load i32, i32* %234, align 8
  %236 = sext i32 %235 to i64
  %237 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 0, i64 %226, i32 2
  %238 = load i32, i32* %237, align 4
  %239 = sext i32 %238 to i64
  %240 = getelementptr inbounds [13 x [4 x [2 x [2 x i8]]]], [13 x [4 x [2 x [2 x i8]]]]* @uv_txsize_lookup, i64 0, i64 %231, i64 %233, i64 %236, i64 %239
  br label %241

241:                                              ; preds = %225, %229
  %242 = phi i8* [ %240, %229 ], [ %219, %225 ]
  %243 = load i8, i8* %242, align 1
  %244 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 0, i64 %226, i32 8
  %245 = load i16, i16* %244, align 8
  %246 = zext i16 %245 to i32
  %247 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 0, i64 %226, i32 9
  %248 = load i16, i16* %247, align 2
  %249 = zext i16 %248 to i32
  %250 = zext i8 %243 to i32
  %251 = shl i32 1, %250
  %252 = load i32, i32* %220, align 4
  %253 = icmp sgt i32 %252, -1
  br i1 %253, label %259, label %254

254:                                              ; preds = %241
  %255 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 0, i64 %226, i32 1
  %256 = load i32, i32* %255, align 8
  %257 = add nsw i32 %256, 5
  %258 = ashr i32 %252, %257
  br label %259

259:                                              ; preds = %241, %254
  %260 = phi i32 [ %258, %254 ], [ 0, %241 ]
  %261 = add nsw i32 %260, %246
  %262 = load i32, i32* %221, align 4
  %263 = icmp sgt i32 %262, -1
  br i1 %263, label %269, label %264

264:                                              ; preds = %259
  %265 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 0, i64 %226, i32 2
  %266 = load i32, i32* %265, align 4
  %267 = add nsw i32 %266, 5
  %268 = ashr i32 %262, %267
  br label %269

269:                                              ; preds = %259, %264
  %270 = phi i32 [ %268, %264 ], [ 0, %259 ]
  %271 = add nsw i32 %270, %249
  %272 = select i1 %253, i32 0, i32 %261
  store i32 %272, i32* %222, align 8
  %273 = select i1 %263, i32 0, i32 %271
  store i32 %273, i32* %223, align 4
  %274 = icmp sgt i32 %271, 0
  br i1 %274, label %275, label %308

275:                                              ; preds = %269
  %276 = icmp sgt i32 %261, 0
  %277 = zext i8 %243 to i64
  %278 = getelementptr inbounds [4 x %struct.scan_order], [4 x %struct.scan_order]* @vp9_default_scan_orders, i64 0, i64 %277
  %279 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 0, i64 %226, i32 3, i32 1
  %280 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 0, i64 %226, i32 3, i32 0
  %281 = trunc i64 %226 to i32
  br label %282

282:                                              ; preds = %275, %304
  %283 = phi i32 [ 0, %275 ], [ %306, %304 ]
  %284 = phi i32 [ %227, %275 ], [ %305, %304 ]
  br i1 %276, label %285, label %304

285:                                              ; preds = %282, %300
  %286 = phi i32 [ %302, %300 ], [ 0, %282 ]
  %287 = phi i32 [ %301, %300 ], [ %284, %282 ]
  %288 = load i8, i8* %224, align 4
  %289 = sext i8 %288 to i32
  %290 = tail call i32 @vp9_decode_block_tokens(%struct.TileWorkerData* %0, i32 %281, %struct.scan_order* %278, i32 %286, i32 %283, i8 zeroext %243, i32 %289) #9
  %291 = load i32, i32* %279, align 8
  %292 = icmp sgt i32 %290, 0
  br i1 %292, label %293, label %300

293:                                              ; preds = %285
  %294 = load i8*, i8** %280, align 8
  %295 = mul i32 %291, %283
  %296 = add i32 %295, %286
  %297 = shl i32 %296, 2
  %298 = sext i32 %297 to i64
  %299 = getelementptr inbounds i8, i8* %294, i64 %298
  tail call fastcc void @inverse_transform_block_inter(%struct.macroblockd* %24, i32 %281, i8 zeroext %243, i8* %299, i32 %291, i32 %290) #9
  br label %300

300:                                              ; preds = %285, %293
  %301 = add nsw i32 %290, %287
  %302 = add nsw i32 %286, %251
  %303 = icmp slt i32 %302, %261
  br i1 %303, label %285, label %304

304:                                              ; preds = %300, %282
  %305 = phi i32 [ %284, %282 ], [ %301, %300 ]
  %306 = add nsw i32 %283, %251
  %307 = icmp slt i32 %306, %271
  br i1 %307, label %282, label %308

308:                                              ; preds = %304, %269
  %309 = phi i32 [ %227, %269 ], [ %305, %304 ]
  %310 = add nuw nsw i64 %226, 1
  %311 = icmp eq i64 %310, 3
  br i1 %311, label %312, label %225

312:                                              ; preds = %308
  %313 = icmp eq i32 %309, 0
  %314 = and i1 %9, %313
  br i1 %314, label %315, label %316

315:                                              ; preds = %312
  store i8 1, i8* %44, align 1
  br label %316

316:                                              ; preds = %211, %315, %312, %214
  %317 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 3, i32 2
  %318 = load i32, i32* %317, align 4
  %319 = add i32 %318, -65
  %320 = icmp ult i32 %319, 1073741759
  %321 = zext i1 %320 to i32
  %322 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 25
  %323 = load i32, i32* %322, align 8
  %324 = or i32 %323, %321
  store i32 %324, i32* %322, align 8
  %325 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %1, i64 0, i32 1, i32 68, i32 0
  %326 = load i32, i32* %325, align 8
  %327 = icmp eq i32 %326, 0
  br i1 %327, label %329, label %328

328:                                              ; preds = %316
  tail call void @vp9_build_mask(%struct.VP9Common* %8, %struct.MODE_INFO* %25, i32 %2, i32 %3, i32 %11, i32 %13) #9
  br label %329

329:                                              ; preds = %316, %328
  ret void
}

declare i32 @vp9_loop_filter_worker(i8*, i8*) #1

declare void @vp9_tile_set_row(%struct.TileInfo*, %struct.VP9Common*, i32) local_unnamed_addr #1

declare void @vp9_tile_set_col(%struct.TileInfo*, %struct.VP9Common*, i32) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone speculatable }
attributes #5 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind returns_twice "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }
attributes #10 = { nounwind returns_twice }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 0, i32 33}
!3 = distinct !{!3, !4}
!4 = !{!"llvm.loop.unroll.disable"}
!5 = !{void (%struct.TileWorkerData*, %struct.VP9Decoder*, i32, i32, i8, i32, i32)* @parse_block, void (%struct.TileWorkerData*, %struct.VP9Decoder*, i32, i32, i8, i32, i32)* @recon_block}
!6 = distinct !{!6, !7}
!7 = !{!"llvm.loop.isvectorized", i32 1}
!8 = distinct !{!8, !4}
!9 = distinct !{!9, !10, !7}
!10 = !{!"llvm.loop.unroll.runtime.disable"}
!11 = distinct !{!11, !7}
!12 = distinct !{!12, !4}
!13 = distinct !{!13, !10, !7}
