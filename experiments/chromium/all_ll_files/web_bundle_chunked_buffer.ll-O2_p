; ModuleID = '../../services/network/web_bundle_chunked_buffer.cc'
source_filename = "../../services/network/web_bundle_chunked_buffer.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.network::WebBundleChunkedBuffer::Chunk" = type { i64, %class.scoped_refptr }
%class.scoped_refptr = type { %"class.base::RefCountedBytes"* }
%"class.base::RefCountedBytes" = type { %"class.base::RefCountedMemory.base", %"class.std::__1::vector" }
%"class.base::RefCountedMemory.base" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe" }>
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i8*, i8*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%"class.network::WebBundleChunkedBuffer" = type { %"class.std::__1::vector.2" }
%"class.std::__1::vector.2" = type { %"class.std::__1::__vector_base.3" }
%"class.std::__1::__vector_base.3" = type { %"class.network::WebBundleChunkedBuffer::Chunk"*, %"class.network::WebBundleChunkedBuffer::Chunk"*, %"class.std::__1::__compressed_pair.4" }
%"class.std::__1::__compressed_pair.4" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"struct.std::__1::__compressed_pair_elem.5" = type { %"class.network::WebBundleChunkedBuffer::Chunk"* }
%"class.base::RefCountedMemory" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe", [4 x i8] }>
%"class.mojo::DataPipeProducer::DataSource" = type { i32 (...)** }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type opaque
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.network::(anonymous namespace)::ChunkedBufferDataSource" = type { %"class.mojo::DataPipeProducer::DataSource", %"class.std::__1::unique_ptr.16", i64, i64 }
%"class.std::__1::unique_ptr.16" = type { %"class.std::__1::__compressed_pair.17" }
%"class.std::__1::__compressed_pair.17" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"struct.std::__1::__compressed_pair_elem.18" = type { %"class.network::WebBundleChunkedBuffer"* }

$_ZNSt3__16vectorIN7network22WebBundleChunkedBuffer5ChunkENS_9allocatorIS3_EEE21__push_back_slow_pathIS3_EEvOT_ = comdat any

$_ZN4mojo16DataPipeProducer10DataSource5AbortEv = comdat any

$_ZNSt3__16vectorIN7network22WebBundleChunkedBuffer5ChunkENS_9allocatorIS3_EEE21__push_back_slow_pathIRKS3_EEvOT_ = comdat any

@.str = private unnamed_addr constant [52 x i8] c"../../services/network/web_bundle_chunked_buffer.cc\00", align 1
@.str.1 = private unnamed_addr constant [20 x i8] c"it != chunks_.end()\00", align 1
@_ZTVN7network12_GLOBAL__N_123ChunkedBufferDataSourceE = internal unnamed_addr constant { [7 x i8*] } { [7 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.network::(anonymous namespace)::ChunkedBufferDataSource"*)* @_ZN7network12_GLOBAL__N_123ChunkedBufferDataSourceD2Ev to i8*), i8* bitcast (void (%"class.network::(anonymous namespace)::ChunkedBufferDataSource"*)* @_ZN7network12_GLOBAL__N_123ChunkedBufferDataSourceD0Ev to i8*), i8* bitcast (i64 (%"class.network::(anonymous namespace)::ChunkedBufferDataSource"*)* @_ZNK7network12_GLOBAL__N_123ChunkedBufferDataSource9GetLengthEv to i8*), i8* bitcast ({ i64, i32 } (%"class.network::(anonymous namespace)::ChunkedBufferDataSource"*, i64, i64, i8*)* @_ZN7network12_GLOBAL__N_123ChunkedBufferDataSource4ReadEmN4base4spanIcLm18446744073709551615EEE to i8*), i8* bitcast (void (%"class.mojo::DataPipeProducer::DataSource"*)* @_ZN4mojo16DataPipeProducer10DataSource5AbortEv to i8*)] }, align 8

@_ZN7network22WebBundleChunkedBuffer5ChunkC1Em13scoped_refptrIKN4base15RefCountedBytesEE = hidden unnamed_addr alias void (%"class.network::WebBundleChunkedBuffer::Chunk"*, i64, %"class.base::RefCountedBytes"*), void (%"class.network::WebBundleChunkedBuffer::Chunk"*, i64, %"class.base::RefCountedBytes"*)* @_ZN7network22WebBundleChunkedBuffer5ChunkC2Em13scoped_refptrIKN4base15RefCountedBytesEE
@_ZN7network22WebBundleChunkedBuffer5ChunkD1Ev = hidden unnamed_addr alias void (%"class.network::WebBundleChunkedBuffer::Chunk"*), void (%"class.network::WebBundleChunkedBuffer::Chunk"*)* @_ZN7network22WebBundleChunkedBuffer5ChunkD2Ev
@_ZN7network22WebBundleChunkedBuffer5ChunkC1ERKS1_ = hidden unnamed_addr alias void (%"class.network::WebBundleChunkedBuffer::Chunk"*, %"class.network::WebBundleChunkedBuffer::Chunk"*), void (%"class.network::WebBundleChunkedBuffer::Chunk"*, %"class.network::WebBundleChunkedBuffer::Chunk"*)* @_ZN7network22WebBundleChunkedBuffer5ChunkC2ERKS1_
@_ZN7network22WebBundleChunkedBuffer5ChunkC1EOS1_ = hidden unnamed_addr alias void (%"class.network::WebBundleChunkedBuffer::Chunk"*, %"class.network::WebBundleChunkedBuffer::Chunk"*), void (%"class.network::WebBundleChunkedBuffer::Chunk"*, %"class.network::WebBundleChunkedBuffer::Chunk"*)* @_ZN7network22WebBundleChunkedBuffer5ChunkC2EOS1_
@_ZN7network22WebBundleChunkedBufferC1Ev = hidden unnamed_addr alias void (%"class.network::WebBundleChunkedBuffer"*), void (%"class.network::WebBundleChunkedBuffer"*)* @_ZN7network22WebBundleChunkedBufferC2Ev
@_ZN7network22WebBundleChunkedBufferC1ENSt3__16vectorINS0_5ChunkENS1_9allocatorIS3_EEEE = hidden unnamed_addr alias void (%"class.network::WebBundleChunkedBuffer"*, %"class.std::__1::vector.2"*), void (%"class.network::WebBundleChunkedBuffer"*, %"class.std::__1::vector.2"*)* @_ZN7network22WebBundleChunkedBufferC2ENSt3__16vectorINS0_5ChunkENS1_9allocatorIS3_EEEE
@_ZN7network22WebBundleChunkedBufferD1Ev = hidden unnamed_addr alias void (%"class.network::WebBundleChunkedBuffer"*), void (%"class.network::WebBundleChunkedBuffer"*)* @_ZN7network22WebBundleChunkedBufferD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7network22WebBundleChunkedBuffer5ChunkC2Em13scoped_refptrIKN4base15RefCountedBytesEE(%"class.network::WebBundleChunkedBuffer::Chunk"* nocapture, i64, %"class.base::RefCountedBytes"*) unnamed_addr #0 align 2 {
  %4 = ptrtoint %"class.base::RefCountedBytes"* %2 to i64
  %5 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %0, i64 0, i32 0
  store i64 %1, i64* %5, align 8
  %6 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %0, i64 0, i32 1
  %7 = bitcast %class.scoped_refptr* %6 to i64*
  store i64 %4, i64* %7, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7network22WebBundleChunkedBuffer5ChunkD2Ev(%"class.network::WebBundleChunkedBuffer::Chunk"* nocapture readonly) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %0, i64 0, i32 1, i32 0
  %3 = load %"class.base::RefCountedBytes"*, %"class.base::RefCountedBytes"** %2, align 8
  %4 = icmp eq %"class.base::RefCountedBytes"* %3, null
  br i1 %4, label %17, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.base::RefCountedBytes", %"class.base::RefCountedBytes"* %3, i64 0, i32 0, i32 1
  %7 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %8 = atomicrmw sub i32* %7, i32 1 acq_rel
  %9 = icmp eq i32 %8, 1
  br i1 %9, label %10, label %17

10:                                               ; preds = %5
  %11 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %6, i64 -2
  %12 = bitcast %"class.base::RefCountedThreadSafe"* %11 to %"class.base::RefCountedMemory"*
  %13 = bitcast %"class.base::RefCountedThreadSafe"* %11 to void (%"class.base::RefCountedMemory"*)***
  %14 = load void (%"class.base::RefCountedMemory"*)**, void (%"class.base::RefCountedMemory"*)*** %13, align 8
  %15 = getelementptr inbounds void (%"class.base::RefCountedMemory"*)*, void (%"class.base::RefCountedMemory"*)** %14, i64 3
  %16 = load void (%"class.base::RefCountedMemory"*)*, void (%"class.base::RefCountedMemory"*)** %15, align 8
  tail call void %16(%"class.base::RefCountedMemory"* nonnull %12) #11
  br label %17

17:                                               ; preds = %1, %5, %10
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN7network22WebBundleChunkedBuffer5ChunkC2ERKS1_(%"class.network::WebBundleChunkedBuffer::Chunk"* nocapture, %"class.network::WebBundleChunkedBuffer::Chunk"* nocapture readonly dereferenceable(16)) unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %0, i64 0, i32 0
  %4 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %1, i64 0, i32 0
  %5 = load i64, i64* %4, align 8
  store i64 %5, i64* %3, align 8
  %6 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %1, i64 0, i32 1, i32 0
  %7 = load %"class.base::RefCountedBytes"*, %"class.base::RefCountedBytes"** %6, align 8
  %8 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %0, i64 0, i32 1, i32 0
  store %"class.base::RefCountedBytes"* %7, %"class.base::RefCountedBytes"** %8, align 8
  %9 = icmp eq %"class.base::RefCountedBytes"* %7, null
  br i1 %9, label %13, label %10

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"class.base::RefCountedBytes", %"class.base::RefCountedBytes"* %7, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %12 = atomicrmw add i32* %11, i32 1 monotonic
  br label %13

13:                                               ; preds = %2, %10
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN7network22WebBundleChunkedBuffer5ChunkC2EOS1_(%"class.network::WebBundleChunkedBuffer::Chunk"* nocapture, %"class.network::WebBundleChunkedBuffer::Chunk"* nocapture dereferenceable(16)) unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %0, i64 0, i32 0
  %4 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %1, i64 0, i32 0
  %5 = load i64, i64* %4, align 8
  store i64 %5, i64* %3, align 8
  %6 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %0, i64 0, i32 1
  %7 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %1, i64 0, i32 1
  %8 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %7, i64 0, i32 0
  %9 = bitcast %class.scoped_refptr* %7 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = bitcast %class.scoped_refptr* %6 to i64*
  store i64 %10, i64* %11, align 8
  store %"class.base::RefCountedBytes"* null, %"class.base::RefCountedBytes"** %8, align 8
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @_ZNK7network22WebBundleChunkedBuffer5Chunk9start_posEv(%"class.network::WebBundleChunkedBuffer::Chunk"* nocapture readonly) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %0, i64 0, i32 0
  %3 = load i64, i64* %2, align 8
  ret i64 %3
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZNK7network22WebBundleChunkedBuffer5Chunk7end_posEv(%"class.network::WebBundleChunkedBuffer::Chunk"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %0, i64 0, i32 0
  %3 = load i64, i64* %2, align 8
  %4 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %0, i64 0, i32 1, i32 0
  %5 = load %"class.base::RefCountedBytes"*, %"class.base::RefCountedBytes"** %4, align 8
  %6 = bitcast %"class.base::RefCountedBytes"* %5 to i64 (%"class.base::RefCountedBytes"*)***
  %7 = load i64 (%"class.base::RefCountedBytes"*)**, i64 (%"class.base::RefCountedBytes"*)*** %6, align 8
  %8 = getelementptr inbounds i64 (%"class.base::RefCountedBytes"*)*, i64 (%"class.base::RefCountedBytes"*)** %7, i64 1
  %9 = load i64 (%"class.base::RefCountedBytes"*)*, i64 (%"class.base::RefCountedBytes"*)** %8, align 8
  %10 = tail call i64 %9(%"class.base::RefCountedBytes"* %5) #11
  %11 = add i64 %10, %3
  ret i64 %11
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZNK7network22WebBundleChunkedBuffer5Chunk4sizeEv(%"class.network::WebBundleChunkedBuffer::Chunk"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %0, i64 0, i32 1, i32 0
  %3 = load %"class.base::RefCountedBytes"*, %"class.base::RefCountedBytes"** %2, align 8
  %4 = bitcast %"class.base::RefCountedBytes"* %3 to i64 (%"class.base::RefCountedBytes"*)***
  %5 = load i64 (%"class.base::RefCountedBytes"*)**, i64 (%"class.base::RefCountedBytes"*)*** %4, align 8
  %6 = getelementptr inbounds i64 (%"class.base::RefCountedBytes"*)*, i64 (%"class.base::RefCountedBytes"*)** %5, i64 1
  %7 = load i64 (%"class.base::RefCountedBytes"*)*, i64 (%"class.base::RefCountedBytes"*)** %6, align 8
  %8 = tail call i64 %7(%"class.base::RefCountedBytes"* %3) #11
  ret i64 %8
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i8* @_ZNK7network22WebBundleChunkedBuffer5Chunk4dataEv(%"class.network::WebBundleChunkedBuffer::Chunk"* nocapture readonly) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %0, i64 0, i32 1, i32 0
  %3 = load %"class.base::RefCountedBytes"*, %"class.base::RefCountedBytes"** %2, align 8
  %4 = getelementptr inbounds %"class.base::RefCountedBytes", %"class.base::RefCountedBytes"* %3, i64 0, i32 1, i32 0, i32 0
  %5 = load i8*, i8** %4, align 8
  ret i8* %5
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7network22WebBundleChunkedBufferC2Ev(%"class.network::WebBundleChunkedBuffer"* nocapture) unnamed_addr #0 align 2 {
  %2 = bitcast %"class.network::WebBundleChunkedBuffer"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %2, i8 0, i64 24, i1 false) #11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7network22WebBundleChunkedBufferC2ENSt3__16vectorINS0_5ChunkENS1_9allocatorIS3_EEEE(%"class.network::WebBundleChunkedBuffer"* nocapture, %"class.std::__1::vector.2"* nocapture) unnamed_addr #0 align 2 {
  %3 = bitcast %"class.network::WebBundleChunkedBuffer"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %3, i8 0, i64 24, i1 false) #11
  %4 = bitcast %"class.std::__1::vector.2"* %1 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.network::WebBundleChunkedBuffer"* %0 to i64*
  store i64 %5, i64* %6, align 8
  %7 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %1, i64 0, i32 0, i32 1
  %8 = bitcast %"class.network::WebBundleChunkedBuffer::Chunk"** %7 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer", %"class.network::WebBundleChunkedBuffer"* %0, i64 0, i32 0, i32 0, i32 1
  %11 = bitcast %"class.network::WebBundleChunkedBuffer::Chunk"** %10 to i64*
  store i64 %9, i64* %11, align 8
  %12 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %1, i64 0, i32 0, i32 2, i32 0, i32 0
  %13 = bitcast %"class.network::WebBundleChunkedBuffer::Chunk"** %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer", %"class.network::WebBundleChunkedBuffer"* %0, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast %"class.network::WebBundleChunkedBuffer::Chunk"** %15 to i64*
  store i64 %14, i64* %16, align 8
  %17 = bitcast %"class.std::__1::vector.2"* %1 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %17, i8 0, i64 24, i1 false) #11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7network22WebBundleChunkedBufferD2Ev(%"class.network::WebBundleChunkedBuffer"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer", %"class.network::WebBundleChunkedBuffer"* %0, i64 0, i32 0, i32 0, i32 0
  %3 = load %"class.network::WebBundleChunkedBuffer::Chunk"*, %"class.network::WebBundleChunkedBuffer::Chunk"** %2, align 8
  %4 = icmp eq %"class.network::WebBundleChunkedBuffer::Chunk"* %3, null
  br i1 %4, label %35, label %5

5:                                                ; preds = %1
  %6 = bitcast %"class.network::WebBundleChunkedBuffer::Chunk"* %3 to i8*
  %7 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer", %"class.network::WebBundleChunkedBuffer"* %0, i64 0, i32 0, i32 0, i32 1
  %8 = load %"class.network::WebBundleChunkedBuffer::Chunk"*, %"class.network::WebBundleChunkedBuffer::Chunk"** %7, align 8
  %9 = icmp eq %"class.network::WebBundleChunkedBuffer::Chunk"* %8, %3
  br i1 %9, label %33, label %10

10:                                               ; preds = %5, %28
  %11 = phi %"class.network::WebBundleChunkedBuffer::Chunk"* [ %12, %28 ], [ %8, %5 ]
  %12 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %11, i64 -1
  %13 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %11, i64 -1, i32 1, i32 0
  %14 = load %"class.base::RefCountedBytes"*, %"class.base::RefCountedBytes"** %13, align 8
  %15 = icmp eq %"class.base::RefCountedBytes"* %14, null
  br i1 %15, label %28, label %16

16:                                               ; preds = %10
  %17 = getelementptr inbounds %"class.base::RefCountedBytes", %"class.base::RefCountedBytes"* %14, i64 0, i32 0, i32 1
  %18 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %17, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %19 = atomicrmw sub i32* %18, i32 1 acq_rel
  %20 = icmp eq i32 %19, 1
  br i1 %20, label %21, label %28

21:                                               ; preds = %16
  %22 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %17, i64 -2
  %23 = bitcast %"class.base::RefCountedThreadSafe"* %22 to %"class.base::RefCountedMemory"*
  %24 = bitcast %"class.base::RefCountedThreadSafe"* %22 to void (%"class.base::RefCountedMemory"*)***
  %25 = load void (%"class.base::RefCountedMemory"*)**, void (%"class.base::RefCountedMemory"*)*** %24, align 8
  %26 = getelementptr inbounds void (%"class.base::RefCountedMemory"*)*, void (%"class.base::RefCountedMemory"*)** %25, i64 3
  %27 = load void (%"class.base::RefCountedMemory"*)*, void (%"class.base::RefCountedMemory"*)** %26, align 8
  tail call void %27(%"class.base::RefCountedMemory"* nonnull %23) #11
  br label %28

28:                                               ; preds = %21, %16, %10
  %29 = icmp eq %"class.network::WebBundleChunkedBuffer::Chunk"* %12, %3
  br i1 %29, label %30, label %10

30:                                               ; preds = %28
  %31 = bitcast %"class.network::WebBundleChunkedBuffer"* %0 to i8**
  %32 = load i8*, i8** %31, align 8
  br label %33

33:                                               ; preds = %30, %5
  %34 = phi i8* [ %32, %30 ], [ %6, %5 ]
  store %"class.network::WebBundleChunkedBuffer::Chunk"* %3, %"class.network::WebBundleChunkedBuffer::Chunk"** %7, align 8
  tail call void @_ZdlPv(i8* %34) #12
  br label %35

35:                                               ; preds = %1, %33
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7network22WebBundleChunkedBuffer6AppendEPKhm(%"class.network::WebBundleChunkedBuffer"*, i8*, i64) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.network::WebBundleChunkedBuffer::Chunk", align 8
  %5 = icmp eq i64 %2, 0
  br i1 %5, label %67, label %6

6:                                                ; preds = %3
  %7 = tail call i8* @_Znwm(i64 40) #12
  %8 = bitcast i8* %7 to %"class.base::RefCountedBytes"*
  tail call void @_ZN4base15RefCountedBytesC1EPKhm(%"class.base::RefCountedBytes"* nonnull %8, i8* %1, i64 %2) #11
  %9 = getelementptr inbounds i8, i8* %7, i64 8
  %10 = bitcast i8* %9 to i32*
  %11 = atomicrmw add i32* %10, i32 1 monotonic
  %12 = ptrtoint i8* %7 to i64
  %13 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer", %"class.network::WebBundleChunkedBuffer"* %0, i64 0, i32 0
  %14 = bitcast %"class.network::WebBundleChunkedBuffer::Chunk"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %14) #11
  %15 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer", %"class.network::WebBundleChunkedBuffer"* %0, i64 0, i32 0, i32 0, i32 0
  %16 = load %"class.network::WebBundleChunkedBuffer::Chunk"*, %"class.network::WebBundleChunkedBuffer::Chunk"** %15, align 8
  %17 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer", %"class.network::WebBundleChunkedBuffer"* %0, i64 0, i32 0, i32 0, i32 1
  %18 = load %"class.network::WebBundleChunkedBuffer::Chunk"*, %"class.network::WebBundleChunkedBuffer::Chunk"** %17, align 8
  %19 = icmp eq %"class.network::WebBundleChunkedBuffer::Chunk"* %16, %18
  br i1 %19, label %32, label %20

20:                                               ; preds = %6
  %21 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %18, i64 -1, i32 0
  %22 = load i64, i64* %21, align 8
  %23 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %18, i64 -1, i32 1, i32 0
  %24 = load %"class.base::RefCountedBytes"*, %"class.base::RefCountedBytes"** %23, align 8
  %25 = bitcast %"class.base::RefCountedBytes"* %24 to i64 (%"class.base::RefCountedBytes"*)***
  %26 = load i64 (%"class.base::RefCountedBytes"*)**, i64 (%"class.base::RefCountedBytes"*)*** %25, align 8
  %27 = getelementptr inbounds i64 (%"class.base::RefCountedBytes"*)*, i64 (%"class.base::RefCountedBytes"*)** %26, i64 1
  %28 = load i64 (%"class.base::RefCountedBytes"*)*, i64 (%"class.base::RefCountedBytes"*)** %27, align 8
  %29 = tail call i64 %28(%"class.base::RefCountedBytes"* %24) #11
  %30 = add i64 %29, %22
  %31 = load %"class.network::WebBundleChunkedBuffer::Chunk"*, %"class.network::WebBundleChunkedBuffer::Chunk"** %17, align 8
  br label %32

32:                                               ; preds = %6, %20
  %33 = phi %"class.network::WebBundleChunkedBuffer::Chunk"* [ %31, %20 ], [ %16, %6 ]
  %34 = phi i64 [ %30, %20 ], [ 0, %6 ]
  %35 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %4, i64 0, i32 0
  store i64 %34, i64* %35, align 8
  %36 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %4, i64 0, i32 1
  %37 = bitcast %class.scoped_refptr* %36 to i64*
  store i64 %12, i64* %37, align 8
  %38 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer", %"class.network::WebBundleChunkedBuffer"* %0, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %39 = load %"class.network::WebBundleChunkedBuffer::Chunk"*, %"class.network::WebBundleChunkedBuffer::Chunk"** %38, align 8
  %40 = icmp ult %"class.network::WebBundleChunkedBuffer::Chunk"* %33, %39
  br i1 %40, label %41, label %50

41:                                               ; preds = %32
  %42 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %33, i64 0, i32 0
  store i64 %34, i64* %42, align 8
  %43 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %33, i64 0, i32 1
  %44 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %36, i64 0, i32 0
  %45 = load i64, i64* %37, align 8
  %46 = bitcast %class.scoped_refptr* %43 to i64*
  store i64 %45, i64* %46, align 8
  store %"class.base::RefCountedBytes"* null, %"class.base::RefCountedBytes"** %44, align 8
  %47 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %33, i64 1
  %48 = ptrtoint %"class.network::WebBundleChunkedBuffer::Chunk"* %47 to i64
  %49 = bitcast %"class.network::WebBundleChunkedBuffer::Chunk"** %17 to i64*
  store i64 %48, i64* %49, align 8
  br label %66

50:                                               ; preds = %32
  call void @_ZNSt3__16vectorIN7network22WebBundleChunkedBuffer5ChunkENS_9allocatorIS3_EEE21__push_back_slow_pathIS3_EEvOT_(%"class.std::__1::vector.2"* %13, %"class.network::WebBundleChunkedBuffer::Chunk"* nonnull dereferenceable(16) %4) #11
  %51 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %4, i64 0, i32 1, i32 0
  %52 = load %"class.base::RefCountedBytes"*, %"class.base::RefCountedBytes"** %51, align 8
  %53 = icmp eq %"class.base::RefCountedBytes"* %52, null
  br i1 %53, label %66, label %54

54:                                               ; preds = %50
  %55 = getelementptr inbounds %"class.base::RefCountedBytes", %"class.base::RefCountedBytes"* %52, i64 0, i32 0, i32 1
  %56 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %55, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %57 = atomicrmw sub i32* %56, i32 1 acq_rel
  %58 = icmp eq i32 %57, 1
  br i1 %58, label %59, label %66

59:                                               ; preds = %54
  %60 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %55, i64 -2
  %61 = bitcast %"class.base::RefCountedThreadSafe"* %60 to %"class.base::RefCountedMemory"*
  %62 = bitcast %"class.base::RefCountedThreadSafe"* %60 to void (%"class.base::RefCountedMemory"*)***
  %63 = load void (%"class.base::RefCountedMemory"*)**, void (%"class.base::RefCountedMemory"*)*** %62, align 8
  %64 = getelementptr inbounds void (%"class.base::RefCountedMemory"*)*, void (%"class.base::RefCountedMemory"*)** %63, i64 3
  %65 = load void (%"class.base::RefCountedMemory"*)*, void (%"class.base::RefCountedMemory"*)** %64, align 8
  call void %65(%"class.base::RefCountedMemory"* nonnull %61) #11
  br label %66

66:                                               ; preds = %41, %59, %54, %50
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %14) #11
  br label %67

67:                                               ; preds = %3, %66
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZNK7network22WebBundleChunkedBuffer7end_posEv(%"class.network::WebBundleChunkedBuffer"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer", %"class.network::WebBundleChunkedBuffer"* %0, i64 0, i32 0, i32 0, i32 0
  %3 = load %"class.network::WebBundleChunkedBuffer::Chunk"*, %"class.network::WebBundleChunkedBuffer::Chunk"** %2, align 8
  %4 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer", %"class.network::WebBundleChunkedBuffer"* %0, i64 0, i32 0, i32 0, i32 1
  %5 = load %"class.network::WebBundleChunkedBuffer::Chunk"*, %"class.network::WebBundleChunkedBuffer::Chunk"** %4, align 8
  %6 = icmp eq %"class.network::WebBundleChunkedBuffer::Chunk"* %3, %5
  br i1 %6, label %18, label %7

7:                                                ; preds = %1
  %8 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %5, i64 -1, i32 0
  %9 = load i64, i64* %8, align 8
  %10 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %5, i64 -1, i32 1, i32 0
  %11 = load %"class.base::RefCountedBytes"*, %"class.base::RefCountedBytes"** %10, align 8
  %12 = bitcast %"class.base::RefCountedBytes"* %11 to i64 (%"class.base::RefCountedBytes"*)***
  %13 = load i64 (%"class.base::RefCountedBytes"*)**, i64 (%"class.base::RefCountedBytes"*)*** %12, align 8
  %14 = getelementptr inbounds i64 (%"class.base::RefCountedBytes"*)*, i64 (%"class.base::RefCountedBytes"*)** %13, i64 1
  %15 = load i64 (%"class.base::RefCountedBytes"*)*, i64 (%"class.base::RefCountedBytes"*)** %14, align 8
  %16 = tail call i64 %15(%"class.base::RefCountedBytes"* %11) #11
  %17 = add i64 %16, %9
  br label %18

18:                                               ; preds = %1, %7
  %19 = phi i64 [ %17, %7 ], [ 0, %1 ]
  ret i64 %19
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK7network22WebBundleChunkedBuffer11ContainsAllEmm(%"class.network::WebBundleChunkedBuffer"* nocapture readonly, i64, i64) local_unnamed_addr #0 align 2 {
  %4 = icmp eq i64 %2, 0
  br i1 %4, label %30, label %5

5:                                                ; preds = %3
  %6 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer", %"class.network::WebBundleChunkedBuffer"* %0, i64 0, i32 0, i32 0, i32 0
  %7 = load %"class.network::WebBundleChunkedBuffer::Chunk"*, %"class.network::WebBundleChunkedBuffer::Chunk"** %6, align 8
  %8 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer", %"class.network::WebBundleChunkedBuffer"* %0, i64 0, i32 0, i32 0, i32 1
  %9 = load %"class.network::WebBundleChunkedBuffer::Chunk"*, %"class.network::WebBundleChunkedBuffer::Chunk"** %8, align 8
  %10 = icmp eq %"class.network::WebBundleChunkedBuffer::Chunk"* %7, %9
  br i1 %10, label %26, label %11

11:                                               ; preds = %5
  %12 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %7, i64 0, i32 0
  %13 = load i64, i64* %12, align 8
  %14 = icmp ugt i64 %13, %1
  br i1 %14, label %30, label %15

15:                                               ; preds = %11
  %16 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %9, i64 -1, i32 0
  %17 = load i64, i64* %16, align 8
  %18 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %9, i64 -1, i32 1, i32 0
  %19 = load %"class.base::RefCountedBytes"*, %"class.base::RefCountedBytes"** %18, align 8
  %20 = bitcast %"class.base::RefCountedBytes"* %19 to i64 (%"class.base::RefCountedBytes"*)***
  %21 = load i64 (%"class.base::RefCountedBytes"*)**, i64 (%"class.base::RefCountedBytes"*)*** %20, align 8
  %22 = getelementptr inbounds i64 (%"class.base::RefCountedBytes"*)*, i64 (%"class.base::RefCountedBytes"*)** %21, i64 1
  %23 = load i64 (%"class.base::RefCountedBytes"*)*, i64 (%"class.base::RefCountedBytes"*)** %22, align 8
  %24 = tail call i64 %23(%"class.base::RefCountedBytes"* %19) #11
  %25 = add i64 %24, %17
  br label %26

26:                                               ; preds = %5, %15
  %27 = phi i64 [ %25, %15 ], [ 0, %5 ]
  %28 = add i64 %2, %1
  %29 = icmp ule i64 %28, %27
  br label %30

30:                                               ; preds = %26, %11, %3
  %31 = phi i1 [ true, %3 ], [ false, %11 ], [ %29, %26 ]
  ret i1 %31
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @_ZNK7network22WebBundleChunkedBuffer9start_posEv(%"class.network::WebBundleChunkedBuffer"* nocapture readonly) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer", %"class.network::WebBundleChunkedBuffer"* %0, i64 0, i32 0, i32 0, i32 0
  %3 = load %"class.network::WebBundleChunkedBuffer::Chunk"*, %"class.network::WebBundleChunkedBuffer::Chunk"** %2, align 8
  %4 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer", %"class.network::WebBundleChunkedBuffer"* %0, i64 0, i32 0, i32 0, i32 1
  %5 = load %"class.network::WebBundleChunkedBuffer::Chunk"*, %"class.network::WebBundleChunkedBuffer::Chunk"** %4, align 8
  %6 = icmp eq %"class.network::WebBundleChunkedBuffer::Chunk"* %3, %5
  br i1 %6, label %10, label %7

7:                                                ; preds = %1
  %8 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %3, i64 0, i32 0
  %9 = load i64, i64* %8, align 8
  br label %10

10:                                               ; preds = %1, %7
  %11 = phi i64 [ %9, %7 ], [ 0, %1 ]
  ret i64 %11
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.mojo::DataPipeProducer::DataSource"* @_ZNK7network22WebBundleChunkedBuffer16CreateDataSourceEmm(%"class.network::WebBundleChunkedBuffer"* nocapture readonly, i64, i64) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer", %"class.network::WebBundleChunkedBuffer"* %0, i64 0, i32 0, i32 0, i32 0
  %5 = load %"class.network::WebBundleChunkedBuffer::Chunk"*, %"class.network::WebBundleChunkedBuffer::Chunk"** %4, align 8
  %6 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer", %"class.network::WebBundleChunkedBuffer"* %0, i64 0, i32 0, i32 0, i32 1
  %7 = load %"class.network::WebBundleChunkedBuffer::Chunk"*, %"class.network::WebBundleChunkedBuffer::Chunk"** %6, align 8
  %8 = icmp eq %"class.network::WebBundleChunkedBuffer::Chunk"* %5, %7
  br i1 %8, label %58, label %9

9:                                                ; preds = %3
  %10 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %5, i64 0, i32 0
  %11 = load i64, i64* %10, align 8
  %12 = icmp ugt i64 %11, %1
  br i1 %12, label %58, label %13

13:                                               ; preds = %9
  %14 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %7, i64 -1, i32 0
  %15 = load i64, i64* %14, align 8
  %16 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %7, i64 -1, i32 1, i32 0
  %17 = load %"class.base::RefCountedBytes"*, %"class.base::RefCountedBytes"** %16, align 8
  %18 = bitcast %"class.base::RefCountedBytes"* %17 to i64 (%"class.base::RefCountedBytes"*)***
  %19 = load i64 (%"class.base::RefCountedBytes"*)**, i64 (%"class.base::RefCountedBytes"*)*** %18, align 8
  %20 = getelementptr inbounds i64 (%"class.base::RefCountedBytes"*)*, i64 (%"class.base::RefCountedBytes"*)** %19, i64 1
  %21 = load i64 (%"class.base::RefCountedBytes"*)*, i64 (%"class.base::RefCountedBytes"*)** %20, align 8
  %22 = tail call i64 %21(%"class.base::RefCountedBytes"* %17) #11
  %23 = add i64 %22, %15
  %24 = icmp ugt i64 %23, %1
  br i1 %24, label %25, label %58

25:                                               ; preds = %13
  %26 = load %"class.network::WebBundleChunkedBuffer::Chunk"*, %"class.network::WebBundleChunkedBuffer::Chunk"** %4, align 8
  %27 = load %"class.network::WebBundleChunkedBuffer::Chunk"*, %"class.network::WebBundleChunkedBuffer::Chunk"** %6, align 8
  %28 = icmp eq %"class.network::WebBundleChunkedBuffer::Chunk"* %26, %27
  br i1 %28, label %40, label %29

29:                                               ; preds = %25
  %30 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %27, i64 -1, i32 0
  %31 = load i64, i64* %30, align 8
  %32 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %27, i64 -1, i32 1, i32 0
  %33 = load %"class.base::RefCountedBytes"*, %"class.base::RefCountedBytes"** %32, align 8
  %34 = bitcast %"class.base::RefCountedBytes"* %33 to i64 (%"class.base::RefCountedBytes"*)***
  %35 = load i64 (%"class.base::RefCountedBytes"*)**, i64 (%"class.base::RefCountedBytes"*)*** %34, align 8
  %36 = getelementptr inbounds i64 (%"class.base::RefCountedBytes"*)*, i64 (%"class.base::RefCountedBytes"*)** %35, i64 1
  %37 = load i64 (%"class.base::RefCountedBytes"*)*, i64 (%"class.base::RefCountedBytes"*)** %36, align 8
  %38 = tail call i64 %37(%"class.base::RefCountedBytes"* %33) #11
  %39 = add i64 %38, %31
  br label %40

40:                                               ; preds = %25, %29
  %41 = phi i64 [ %39, %29 ], [ 0, %25 ]
  %42 = sub i64 %41, %1
  %43 = icmp ult i64 %42, %2
  %44 = select i1 %43, i64 %42, i64 %2
  %45 = icmp eq i64 %44, 0
  br i1 %45, label %58, label %46

46:                                               ; preds = %40
  %47 = tail call %"class.network::WebBundleChunkedBuffer"* @_ZNK7network22WebBundleChunkedBuffer19CreatePartialBufferEmm(%"class.network::WebBundleChunkedBuffer"* %0, i64 %1, i64 %44)
  %48 = ptrtoint %"class.network::WebBundleChunkedBuffer"* %47 to i64
  %49 = tail call i8* @_Znwm(i64 32) #12
  %50 = bitcast i8* %49 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN7network12_GLOBAL__N_123ChunkedBufferDataSourceE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %50, align 8
  %51 = getelementptr inbounds i8, i8* %49, i64 8
  %52 = bitcast i8* %51 to i64*
  store i64 %48, i64* %52, align 8
  %53 = getelementptr inbounds i8, i8* %49, i64 16
  %54 = bitcast i8* %53 to i64*
  store i64 %1, i64* %54, align 8
  %55 = getelementptr inbounds i8, i8* %49, i64 24
  %56 = bitcast i8* %55 to i64*
  store i64 %44, i64* %56, align 8
  %57 = bitcast i8* %49 to %"class.mojo::DataPipeProducer::DataSource"*
  br label %58

58:                                               ; preds = %3, %13, %9, %46, %40
  %59 = phi %"class.mojo::DataPipeProducer::DataSource"* [ null, %40 ], [ %57, %46 ], [ null, %9 ], [ null, %13 ], [ null, %3 ]
  ret %"class.mojo::DataPipeProducer::DataSource"* %59
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZNK7network22WebBundleChunkedBuffer18GetAvailableLengthEmm(%"class.network::WebBundleChunkedBuffer"* nocapture readonly, i64, i64) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer", %"class.network::WebBundleChunkedBuffer"* %0, i64 0, i32 0, i32 0, i32 0
  %5 = load %"class.network::WebBundleChunkedBuffer::Chunk"*, %"class.network::WebBundleChunkedBuffer::Chunk"** %4, align 8
  %6 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer", %"class.network::WebBundleChunkedBuffer"* %0, i64 0, i32 0, i32 0, i32 1
  %7 = load %"class.network::WebBundleChunkedBuffer::Chunk"*, %"class.network::WebBundleChunkedBuffer::Chunk"** %6, align 8
  %8 = icmp eq %"class.network::WebBundleChunkedBuffer::Chunk"* %5, %7
  br i1 %8, label %45, label %9

9:                                                ; preds = %3
  %10 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %5, i64 0, i32 0
  %11 = load i64, i64* %10, align 8
  %12 = icmp ugt i64 %11, %1
  br i1 %12, label %45, label %13

13:                                               ; preds = %9
  %14 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %7, i64 -1, i32 0
  %15 = load i64, i64* %14, align 8
  %16 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %7, i64 -1, i32 1, i32 0
  %17 = load %"class.base::RefCountedBytes"*, %"class.base::RefCountedBytes"** %16, align 8
  %18 = bitcast %"class.base::RefCountedBytes"* %17 to i64 (%"class.base::RefCountedBytes"*)***
  %19 = load i64 (%"class.base::RefCountedBytes"*)**, i64 (%"class.base::RefCountedBytes"*)*** %18, align 8
  %20 = getelementptr inbounds i64 (%"class.base::RefCountedBytes"*)*, i64 (%"class.base::RefCountedBytes"*)** %19, i64 1
  %21 = load i64 (%"class.base::RefCountedBytes"*)*, i64 (%"class.base::RefCountedBytes"*)** %20, align 8
  %22 = tail call i64 %21(%"class.base::RefCountedBytes"* %17) #11
  %23 = add i64 %22, %15
  %24 = icmp ugt i64 %23, %1
  br i1 %24, label %25, label %45

25:                                               ; preds = %13
  %26 = load %"class.network::WebBundleChunkedBuffer::Chunk"*, %"class.network::WebBundleChunkedBuffer::Chunk"** %4, align 8
  %27 = load %"class.network::WebBundleChunkedBuffer::Chunk"*, %"class.network::WebBundleChunkedBuffer::Chunk"** %6, align 8
  %28 = icmp eq %"class.network::WebBundleChunkedBuffer::Chunk"* %26, %27
  br i1 %28, label %40, label %29

29:                                               ; preds = %25
  %30 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %27, i64 -1, i32 0
  %31 = load i64, i64* %30, align 8
  %32 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %27, i64 -1, i32 1, i32 0
  %33 = load %"class.base::RefCountedBytes"*, %"class.base::RefCountedBytes"** %32, align 8
  %34 = bitcast %"class.base::RefCountedBytes"* %33 to i64 (%"class.base::RefCountedBytes"*)***
  %35 = load i64 (%"class.base::RefCountedBytes"*)**, i64 (%"class.base::RefCountedBytes"*)*** %34, align 8
  %36 = getelementptr inbounds i64 (%"class.base::RefCountedBytes"*)*, i64 (%"class.base::RefCountedBytes"*)** %35, i64 1
  %37 = load i64 (%"class.base::RefCountedBytes"*)*, i64 (%"class.base::RefCountedBytes"*)** %36, align 8
  %38 = tail call i64 %37(%"class.base::RefCountedBytes"* %33) #11
  %39 = add i64 %38, %31
  br label %40

40:                                               ; preds = %25, %29
  %41 = phi i64 [ %39, %29 ], [ 0, %25 ]
  %42 = sub i64 %41, %1
  %43 = icmp ult i64 %42, %2
  %44 = select i1 %43, i64 %42, i64 %2
  br label %45

45:                                               ; preds = %3, %13, %9, %40
  %46 = phi i64 [ %44, %40 ], [ 0, %9 ], [ 0, %13 ], [ 0, %3 ]
  ret i64 %46
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.network::WebBundleChunkedBuffer"* @_ZNK7network22WebBundleChunkedBuffer19CreatePartialBufferEmm(%"class.network::WebBundleChunkedBuffer"* nocapture readonly, i64, i64) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = alloca %"class.std::__1::vector.2", align 16
  %6 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer", %"class.network::WebBundleChunkedBuffer"* %0, i64 0, i32 0, i32 0, i32 0
  %7 = load %"class.network::WebBundleChunkedBuffer::Chunk"*, %"class.network::WebBundleChunkedBuffer::Chunk"** %6, align 8
  %8 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer", %"class.network::WebBundleChunkedBuffer"* %0, i64 0, i32 0, i32 0, i32 1
  %9 = load %"class.network::WebBundleChunkedBuffer::Chunk"*, %"class.network::WebBundleChunkedBuffer::Chunk"** %8, align 8
  %10 = icmp eq %"class.network::WebBundleChunkedBuffer::Chunk"* %7, %9
  br i1 %10, label %67, label %11

11:                                               ; preds = %3
  %12 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %7, i64 0, i32 0
  %13 = load i64, i64* %12, align 8
  %14 = icmp ugt i64 %13, %1
  br i1 %14, label %67, label %15

15:                                               ; preds = %11
  %16 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %9, i64 -1, i32 0
  %17 = load i64, i64* %16, align 8
  %18 = icmp ugt i64 %17, %1
  br i1 %18, label %32, label %19

19:                                               ; preds = %15
  %20 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %9, i64 -1, i32 1, i32 0
  %21 = load %"class.base::RefCountedBytes"*, %"class.base::RefCountedBytes"** %20, align 8
  %22 = bitcast %"class.base::RefCountedBytes"* %21 to i64 (%"class.base::RefCountedBytes"*)***
  %23 = load i64 (%"class.base::RefCountedBytes"*)**, i64 (%"class.base::RefCountedBytes"*)*** %22, align 8
  %24 = getelementptr inbounds i64 (%"class.base::RefCountedBytes"*)*, i64 (%"class.base::RefCountedBytes"*)** %23, i64 1
  %25 = load i64 (%"class.base::RefCountedBytes"*)*, i64 (%"class.base::RefCountedBytes"*)** %24, align 8
  %26 = tail call i64 %25(%"class.base::RefCountedBytes"* %21) #11
  %27 = add i64 %26, %17
  %28 = icmp ugt i64 %27, %1
  %29 = load %"class.network::WebBundleChunkedBuffer::Chunk"*, %"class.network::WebBundleChunkedBuffer::Chunk"** %8, align 8
  %30 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %29, i64 -1
  %31 = select i1 %28, %"class.network::WebBundleChunkedBuffer::Chunk"* %30, %"class.network::WebBundleChunkedBuffer::Chunk"* %29
  br label %63

32:                                               ; preds = %15
  %33 = ptrtoint %"class.network::WebBundleChunkedBuffer::Chunk"* %7 to i64
  %34 = ptrtoint %"class.network::WebBundleChunkedBuffer::Chunk"* %9 to i64
  %35 = sub i64 %34, %33
  %36 = icmp eq i64 %35, 0
  br i1 %36, label %63, label %37

37:                                               ; preds = %32
  %38 = ashr exact i64 %35, 4
  br label %39

39:                                               ; preds = %39, %37
  %40 = phi %"class.network::WebBundleChunkedBuffer::Chunk"* [ %59, %39 ], [ %7, %37 ]
  %41 = phi i64 [ %58, %39 ], [ %38, %37 ]
  %42 = lshr i64 %41, 1
  %43 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %40, i64 %42
  %44 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %43, i64 0, i32 0
  %45 = load i64, i64* %44, align 8
  %46 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %40, i64 %42, i32 1, i32 0
  %47 = load %"class.base::RefCountedBytes"*, %"class.base::RefCountedBytes"** %46, align 8
  %48 = bitcast %"class.base::RefCountedBytes"* %47 to i64 (%"class.base::RefCountedBytes"*)***
  %49 = load i64 (%"class.base::RefCountedBytes"*)**, i64 (%"class.base::RefCountedBytes"*)*** %48, align 8
  %50 = getelementptr inbounds i64 (%"class.base::RefCountedBytes"*)*, i64 (%"class.base::RefCountedBytes"*)** %49, i64 1
  %51 = load i64 (%"class.base::RefCountedBytes"*)*, i64 (%"class.base::RefCountedBytes"*)** %50, align 8
  %52 = tail call i64 %51(%"class.base::RefCountedBytes"* %47) #11
  %53 = add i64 %52, %45
  %54 = icmp ule i64 %53, %1
  %55 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %43, i64 1
  %56 = xor i64 %42, -1
  %57 = add i64 %41, %56
  %58 = select i1 %54, i64 %57, i64 %42
  %59 = select i1 %54, %"class.network::WebBundleChunkedBuffer::Chunk"* %55, %"class.network::WebBundleChunkedBuffer::Chunk"* %40
  %60 = icmp eq i64 %58, 0
  br i1 %60, label %61, label %39

61:                                               ; preds = %39
  %62 = load %"class.network::WebBundleChunkedBuffer::Chunk"*, %"class.network::WebBundleChunkedBuffer::Chunk"** %8, align 8
  br label %63

63:                                               ; preds = %61, %32, %19
  %64 = phi %"class.network::WebBundleChunkedBuffer::Chunk"* [ %29, %19 ], [ %9, %32 ], [ %62, %61 ]
  %65 = phi %"class.network::WebBundleChunkedBuffer::Chunk"* [ %31, %19 ], [ %7, %32 ], [ %59, %61 ]
  %66 = icmp eq %"class.network::WebBundleChunkedBuffer::Chunk"* %65, %64
  br i1 %66, label %67, label %72

67:                                               ; preds = %3, %11, %63
  %68 = phi %"class.network::WebBundleChunkedBuffer::Chunk"* [ %65, %63 ], [ %7, %3 ], [ %9, %11 ]
  %69 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %69) #11
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str, i64 0, i64 0), i32 153, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i64 0, i64 0)) #11
  %70 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #11
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %69) #11
  %71 = load %"class.network::WebBundleChunkedBuffer::Chunk"*, %"class.network::WebBundleChunkedBuffer::Chunk"** %8, align 8
  br label %72

72:                                               ; preds = %63, %67
  %73 = phi %"class.network::WebBundleChunkedBuffer::Chunk"* [ %65, %63 ], [ %68, %67 ]
  %74 = phi %"class.network::WebBundleChunkedBuffer::Chunk"* [ %64, %63 ], [ %71, %67 ]
  %75 = bitcast %"class.std::__1::vector.2"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %75) #11
  %76 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %5, i64 0, i32 0, i32 1
  %77 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %5, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %75, i8 0, i64 24, i1 false) #11
  %78 = icmp eq %"class.network::WebBundleChunkedBuffer::Chunk"* %73, %74
  br i1 %78, label %113, label %79

79:                                               ; preds = %72
  %80 = add i64 %2, %1
  %81 = bitcast %"class.network::WebBundleChunkedBuffer::Chunk"** %76 to i64*
  br label %82

82:                                               ; preds = %79, %104
  %83 = phi %"class.network::WebBundleChunkedBuffer::Chunk"* [ %73, %79 ], [ %105, %104 ]
  %84 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %83, i64 0, i32 0
  %85 = load i64, i64* %84, align 8
  %86 = icmp ult i64 %85, %80
  br i1 %86, label %87, label %108

87:                                               ; preds = %82
  %88 = load %"class.network::WebBundleChunkedBuffer::Chunk"*, %"class.network::WebBundleChunkedBuffer::Chunk"** %76, align 8
  %89 = load %"class.network::WebBundleChunkedBuffer::Chunk"*, %"class.network::WebBundleChunkedBuffer::Chunk"** %77, align 16
  %90 = icmp eq %"class.network::WebBundleChunkedBuffer::Chunk"* %88, %89
  br i1 %90, label %103, label %91

91:                                               ; preds = %87
  %92 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %88, i64 0, i32 0
  store i64 %85, i64* %92, align 8
  %93 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %83, i64 0, i32 1, i32 0
  %94 = load %"class.base::RefCountedBytes"*, %"class.base::RefCountedBytes"** %93, align 8
  %95 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %88, i64 0, i32 1, i32 0
  store %"class.base::RefCountedBytes"* %94, %"class.base::RefCountedBytes"** %95, align 8
  %96 = icmp eq %"class.base::RefCountedBytes"* %94, null
  br i1 %96, label %100, label %97

97:                                               ; preds = %91
  %98 = getelementptr inbounds %"class.base::RefCountedBytes", %"class.base::RefCountedBytes"* %94, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %99 = atomicrmw add i32* %98, i32 1 monotonic
  br label %100

100:                                              ; preds = %97, %91
  %101 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %88, i64 1
  %102 = ptrtoint %"class.network::WebBundleChunkedBuffer::Chunk"* %101 to i64
  store i64 %102, i64* %81, align 8
  br label %104

103:                                              ; preds = %87
  call void @_ZNSt3__16vectorIN7network22WebBundleChunkedBuffer5ChunkENS_9allocatorIS3_EEE21__push_back_slow_pathIRKS3_EEvOT_(%"class.std::__1::vector.2"* nonnull %5, %"class.network::WebBundleChunkedBuffer::Chunk"* dereferenceable(16) %83) #11
  br label %104

104:                                              ; preds = %100, %103
  %105 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %83, i64 1
  %106 = load %"class.network::WebBundleChunkedBuffer::Chunk"*, %"class.network::WebBundleChunkedBuffer::Chunk"** %8, align 8
  %107 = icmp eq %"class.network::WebBundleChunkedBuffer::Chunk"* %105, %106
  br i1 %107, label %108, label %82

108:                                              ; preds = %104, %82
  %109 = bitcast %"class.std::__1::vector.2"* %5 to <2 x i64>*
  %110 = load <2 x i64>, <2 x i64>* %109, align 16
  %111 = bitcast %"class.network::WebBundleChunkedBuffer::Chunk"** %77 to i64*
  %112 = load i64, i64* %111, align 16
  br label %113

113:                                              ; preds = %108, %72
  %114 = phi i64 [ %112, %108 ], [ 0, %72 ]
  %115 = phi <2 x i64> [ %110, %108 ], [ zeroinitializer, %72 ]
  %116 = call i8* @_Znwm(i64 24) #12
  %117 = bitcast i8* %116 to %"class.network::WebBundleChunkedBuffer"*
  %118 = bitcast i8* %116 to <2 x i64>*
  store <2 x i64> %115, <2 x i64>* %118, align 8
  %119 = getelementptr inbounds i8, i8* %116, i64 16
  %120 = bitcast i8* %119 to i64*
  store i64 %114, i64* %120, align 8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %75) #11
  ret %"class.network::WebBundleChunkedBuffer"* %117
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZNK7network22WebBundleChunkedBuffer4sizeEv(%"class.network::WebBundleChunkedBuffer"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer", %"class.network::WebBundleChunkedBuffer"* %0, i64 0, i32 0, i32 0, i32 0
  %3 = load %"class.network::WebBundleChunkedBuffer::Chunk"*, %"class.network::WebBundleChunkedBuffer::Chunk"** %2, align 8
  %4 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer", %"class.network::WebBundleChunkedBuffer"* %0, i64 0, i32 0, i32 0, i32 1
  %5 = load %"class.network::WebBundleChunkedBuffer::Chunk"*, %"class.network::WebBundleChunkedBuffer::Chunk"** %4, align 8
  %6 = icmp eq %"class.network::WebBundleChunkedBuffer::Chunk"* %3, %5
  br i1 %6, label %24, label %7

7:                                                ; preds = %1
  %8 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %5, i64 -1, i32 0
  %9 = load i64, i64* %8, align 8
  %10 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %5, i64 -1, i32 1, i32 0
  %11 = load %"class.base::RefCountedBytes"*, %"class.base::RefCountedBytes"** %10, align 8
  %12 = bitcast %"class.base::RefCountedBytes"* %11 to i64 (%"class.base::RefCountedBytes"*)***
  %13 = load i64 (%"class.base::RefCountedBytes"*)**, i64 (%"class.base::RefCountedBytes"*)*** %12, align 8
  %14 = getelementptr inbounds i64 (%"class.base::RefCountedBytes"*)*, i64 (%"class.base::RefCountedBytes"*)** %13, i64 1
  %15 = load i64 (%"class.base::RefCountedBytes"*)*, i64 (%"class.base::RefCountedBytes"*)** %14, align 8
  %16 = tail call i64 %15(%"class.base::RefCountedBytes"* %11) #11
  %17 = add i64 %16, %9
  %18 = load %"class.network::WebBundleChunkedBuffer::Chunk"*, %"class.network::WebBundleChunkedBuffer::Chunk"** %2, align 8
  %19 = load %"class.network::WebBundleChunkedBuffer::Chunk"*, %"class.network::WebBundleChunkedBuffer::Chunk"** %4, align 8
  %20 = icmp eq %"class.network::WebBundleChunkedBuffer::Chunk"* %18, %19
  br i1 %20, label %24, label %21

21:                                               ; preds = %7
  %22 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %18, i64 0, i32 0
  %23 = load i64, i64* %22, align 8
  br label %24

24:                                               ; preds = %1, %7, %21
  %25 = phi i64 [ %17, %21 ], [ %17, %7 ], [ 0, %1 ]
  %26 = phi i64 [ %23, %21 ], [ 0, %7 ], [ 0, %1 ]
  %27 = sub i64 %25, %26
  ret i64 %27
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.network::WebBundleChunkedBuffer::Chunk"* @_ZNK7network22WebBundleChunkedBuffer9FindChunkEm(%"class.network::WebBundleChunkedBuffer"* nocapture readonly, i64) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer", %"class.network::WebBundleChunkedBuffer"* %0, i64 0, i32 0, i32 0, i32 0
  %4 = load %"class.network::WebBundleChunkedBuffer::Chunk"*, %"class.network::WebBundleChunkedBuffer::Chunk"** %3, align 8
  %5 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer", %"class.network::WebBundleChunkedBuffer"* %0, i64 0, i32 0, i32 0, i32 1
  %6 = load %"class.network::WebBundleChunkedBuffer::Chunk"*, %"class.network::WebBundleChunkedBuffer::Chunk"** %5, align 8
  %7 = icmp eq %"class.network::WebBundleChunkedBuffer::Chunk"* %4, %6
  br i1 %7, label %58, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %4, i64 0, i32 0
  %10 = load i64, i64* %9, align 8
  %11 = icmp ugt i64 %10, %1
  br i1 %11, label %58, label %12

12:                                               ; preds = %8
  %13 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %6, i64 -1, i32 0
  %14 = load i64, i64* %13, align 8
  %15 = icmp ugt i64 %14, %1
  br i1 %15, label %29, label %16

16:                                               ; preds = %12
  %17 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %6, i64 -1, i32 1, i32 0
  %18 = load %"class.base::RefCountedBytes"*, %"class.base::RefCountedBytes"** %17, align 8
  %19 = bitcast %"class.base::RefCountedBytes"* %18 to i64 (%"class.base::RefCountedBytes"*)***
  %20 = load i64 (%"class.base::RefCountedBytes"*)**, i64 (%"class.base::RefCountedBytes"*)*** %19, align 8
  %21 = getelementptr inbounds i64 (%"class.base::RefCountedBytes"*)*, i64 (%"class.base::RefCountedBytes"*)** %20, i64 1
  %22 = load i64 (%"class.base::RefCountedBytes"*)*, i64 (%"class.base::RefCountedBytes"*)** %21, align 8
  %23 = tail call i64 %22(%"class.base::RefCountedBytes"* %18) #11
  %24 = add i64 %23, %14
  %25 = icmp ugt i64 %24, %1
  %26 = load %"class.network::WebBundleChunkedBuffer::Chunk"*, %"class.network::WebBundleChunkedBuffer::Chunk"** %5, align 8
  %27 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %26, i64 -1
  %28 = select i1 %25, %"class.network::WebBundleChunkedBuffer::Chunk"* %27, %"class.network::WebBundleChunkedBuffer::Chunk"* %26
  ret %"class.network::WebBundleChunkedBuffer::Chunk"* %28

29:                                               ; preds = %12
  %30 = ptrtoint %"class.network::WebBundleChunkedBuffer::Chunk"* %4 to i64
  %31 = ptrtoint %"class.network::WebBundleChunkedBuffer::Chunk"* %6 to i64
  %32 = sub i64 %31, %30
  %33 = icmp eq i64 %32, 0
  br i1 %33, label %58, label %34

34:                                               ; preds = %29
  %35 = ashr exact i64 %32, 4
  br label %36

36:                                               ; preds = %36, %34
  %37 = phi %"class.network::WebBundleChunkedBuffer::Chunk"* [ %56, %36 ], [ %4, %34 ]
  %38 = phi i64 [ %55, %36 ], [ %35, %34 ]
  %39 = lshr i64 %38, 1
  %40 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %37, i64 %39
  %41 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %40, i64 0, i32 0
  %42 = load i64, i64* %41, align 8
  %43 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %37, i64 %39, i32 1, i32 0
  %44 = load %"class.base::RefCountedBytes"*, %"class.base::RefCountedBytes"** %43, align 8
  %45 = bitcast %"class.base::RefCountedBytes"* %44 to i64 (%"class.base::RefCountedBytes"*)***
  %46 = load i64 (%"class.base::RefCountedBytes"*)**, i64 (%"class.base::RefCountedBytes"*)*** %45, align 8
  %47 = getelementptr inbounds i64 (%"class.base::RefCountedBytes"*)*, i64 (%"class.base::RefCountedBytes"*)** %46, i64 1
  %48 = load i64 (%"class.base::RefCountedBytes"*)*, i64 (%"class.base::RefCountedBytes"*)** %47, align 8
  %49 = tail call i64 %48(%"class.base::RefCountedBytes"* %44) #11
  %50 = add i64 %49, %42
  %51 = icmp ule i64 %50, %1
  %52 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %40, i64 1
  %53 = xor i64 %39, -1
  %54 = add i64 %38, %53
  %55 = select i1 %51, i64 %54, i64 %39
  %56 = select i1 %51, %"class.network::WebBundleChunkedBuffer::Chunk"* %52, %"class.network::WebBundleChunkedBuffer::Chunk"* %37
  %57 = icmp eq i64 %55, 0
  br i1 %57, label %58, label %36

58:                                               ; preds = %36, %2, %8, %29
  %59 = phi %"class.network::WebBundleChunkedBuffer::Chunk"* [ %4, %29 ], [ %6, %8 ], [ %4, %2 ], [ %56, %36 ]
  ret %"class.network::WebBundleChunkedBuffer::Chunk"* %59
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK7network22WebBundleChunkedBuffer5emptyEv(%"class.network::WebBundleChunkedBuffer"* nocapture readonly) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer", %"class.network::WebBundleChunkedBuffer"* %0, i64 0, i32 0, i32 0, i32 0
  %3 = load %"class.network::WebBundleChunkedBuffer::Chunk"*, %"class.network::WebBundleChunkedBuffer::Chunk"** %2, align 8
  %4 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer", %"class.network::WebBundleChunkedBuffer"* %0, i64 0, i32 0, i32 0, i32 1
  %5 = load %"class.network::WebBundleChunkedBuffer::Chunk"*, %"class.network::WebBundleChunkedBuffer::Chunk"** %4, align 8
  %6 = icmp eq %"class.network::WebBundleChunkedBuffer::Chunk"* %3, %5
  ret i1 %6
}

declare void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* sret, i8*, i32, i8*) local_unnamed_addr #4

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #4

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #5

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZNK7network22WebBundleChunkedBuffer8ReadDataEmmPh(%"class.network::WebBundleChunkedBuffer"* nocapture readonly, i64, i64, i8* nocapture) local_unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer", %"class.network::WebBundleChunkedBuffer"* %0, i64 0, i32 0, i32 0, i32 0
  %6 = load %"class.network::WebBundleChunkedBuffer::Chunk"*, %"class.network::WebBundleChunkedBuffer::Chunk"** %5, align 8
  %7 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer", %"class.network::WebBundleChunkedBuffer"* %0, i64 0, i32 0, i32 0, i32 1
  %8 = load %"class.network::WebBundleChunkedBuffer::Chunk"*, %"class.network::WebBundleChunkedBuffer::Chunk"** %7, align 8
  %9 = icmp eq %"class.network::WebBundleChunkedBuffer::Chunk"* %6, %8
  br i1 %9, label %129, label %10

10:                                               ; preds = %4
  %11 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %6, i64 0, i32 0
  %12 = load i64, i64* %11, align 8
  %13 = icmp ugt i64 %12, %1
  br i1 %13, label %129, label %14

14:                                               ; preds = %10
  %15 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %8, i64 -1, i32 0
  %16 = load i64, i64* %15, align 8
  %17 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %8, i64 -1, i32 1, i32 0
  %18 = load %"class.base::RefCountedBytes"*, %"class.base::RefCountedBytes"** %17, align 8
  %19 = bitcast %"class.base::RefCountedBytes"* %18 to i64 (%"class.base::RefCountedBytes"*)***
  %20 = load i64 (%"class.base::RefCountedBytes"*)**, i64 (%"class.base::RefCountedBytes"*)*** %19, align 8
  %21 = getelementptr inbounds i64 (%"class.base::RefCountedBytes"*)*, i64 (%"class.base::RefCountedBytes"*)** %20, i64 1
  %22 = load i64 (%"class.base::RefCountedBytes"*)*, i64 (%"class.base::RefCountedBytes"*)** %21, align 8
  %23 = tail call i64 %22(%"class.base::RefCountedBytes"* %18) #11
  %24 = add i64 %23, %16
  %25 = icmp ugt i64 %24, %1
  br i1 %25, label %26, label %129

26:                                               ; preds = %14
  %27 = load %"class.network::WebBundleChunkedBuffer::Chunk"*, %"class.network::WebBundleChunkedBuffer::Chunk"** %5, align 8
  %28 = load %"class.network::WebBundleChunkedBuffer::Chunk"*, %"class.network::WebBundleChunkedBuffer::Chunk"** %7, align 8
  %29 = icmp eq %"class.network::WebBundleChunkedBuffer::Chunk"* %27, %28
  br i1 %29, label %41, label %30

30:                                               ; preds = %26
  %31 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %28, i64 -1, i32 0
  %32 = load i64, i64* %31, align 8
  %33 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %28, i64 -1, i32 1, i32 0
  %34 = load %"class.base::RefCountedBytes"*, %"class.base::RefCountedBytes"** %33, align 8
  %35 = bitcast %"class.base::RefCountedBytes"* %34 to i64 (%"class.base::RefCountedBytes"*)***
  %36 = load i64 (%"class.base::RefCountedBytes"*)**, i64 (%"class.base::RefCountedBytes"*)*** %35, align 8
  %37 = getelementptr inbounds i64 (%"class.base::RefCountedBytes"*)*, i64 (%"class.base::RefCountedBytes"*)** %36, i64 1
  %38 = load i64 (%"class.base::RefCountedBytes"*)*, i64 (%"class.base::RefCountedBytes"*)** %37, align 8
  %39 = tail call i64 %38(%"class.base::RefCountedBytes"* %34) #11
  %40 = add i64 %39, %32
  br label %41

41:                                               ; preds = %26, %30
  %42 = phi i64 [ %40, %30 ], [ 0, %26 ]
  %43 = sub i64 %42, %1
  %44 = icmp ult i64 %43, %2
  %45 = select i1 %44, i64 %43, i64 %2
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %129, label %47

47:                                               ; preds = %41
  %48 = load %"class.network::WebBundleChunkedBuffer::Chunk"*, %"class.network::WebBundleChunkedBuffer::Chunk"** %5, align 8
  %49 = load %"class.network::WebBundleChunkedBuffer::Chunk"*, %"class.network::WebBundleChunkedBuffer::Chunk"** %7, align 8
  %50 = icmp eq %"class.network::WebBundleChunkedBuffer::Chunk"* %48, %49
  br i1 %50, label %101, label %51

51:                                               ; preds = %47
  %52 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %48, i64 0, i32 0
  %53 = load i64, i64* %52, align 8
  %54 = icmp ugt i64 %53, %1
  br i1 %54, label %101, label %55

55:                                               ; preds = %51
  %56 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %49, i64 -1, i32 0
  %57 = load i64, i64* %56, align 8
  %58 = icmp ugt i64 %57, %1
  br i1 %58, label %72, label %59

59:                                               ; preds = %55
  %60 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %49, i64 -1, i32 1, i32 0
  %61 = load %"class.base::RefCountedBytes"*, %"class.base::RefCountedBytes"** %60, align 8
  %62 = bitcast %"class.base::RefCountedBytes"* %61 to i64 (%"class.base::RefCountedBytes"*)***
  %63 = load i64 (%"class.base::RefCountedBytes"*)**, i64 (%"class.base::RefCountedBytes"*)*** %62, align 8
  %64 = getelementptr inbounds i64 (%"class.base::RefCountedBytes"*)*, i64 (%"class.base::RefCountedBytes"*)** %63, i64 1
  %65 = load i64 (%"class.base::RefCountedBytes"*)*, i64 (%"class.base::RefCountedBytes"*)** %64, align 8
  %66 = tail call i64 %65(%"class.base::RefCountedBytes"* %61) #11
  %67 = add i64 %66, %57
  %68 = icmp ugt i64 %67, %1
  %69 = load %"class.network::WebBundleChunkedBuffer::Chunk"*, %"class.network::WebBundleChunkedBuffer::Chunk"** %7, align 8
  %70 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %69, i64 -1
  %71 = select i1 %68, %"class.network::WebBundleChunkedBuffer::Chunk"* %70, %"class.network::WebBundleChunkedBuffer::Chunk"* %69
  br label %101

72:                                               ; preds = %55
  %73 = ptrtoint %"class.network::WebBundleChunkedBuffer::Chunk"* %48 to i64
  %74 = ptrtoint %"class.network::WebBundleChunkedBuffer::Chunk"* %49 to i64
  %75 = sub i64 %74, %73
  %76 = icmp eq i64 %75, 0
  br i1 %76, label %101, label %77

77:                                               ; preds = %72
  %78 = ashr exact i64 %75, 4
  br label %79

79:                                               ; preds = %79, %77
  %80 = phi %"class.network::WebBundleChunkedBuffer::Chunk"* [ %99, %79 ], [ %48, %77 ]
  %81 = phi i64 [ %98, %79 ], [ %78, %77 ]
  %82 = lshr i64 %81, 1
  %83 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %80, i64 %82
  %84 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %83, i64 0, i32 0
  %85 = load i64, i64* %84, align 8
  %86 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %80, i64 %82, i32 1, i32 0
  %87 = load %"class.base::RefCountedBytes"*, %"class.base::RefCountedBytes"** %86, align 8
  %88 = bitcast %"class.base::RefCountedBytes"* %87 to i64 (%"class.base::RefCountedBytes"*)***
  %89 = load i64 (%"class.base::RefCountedBytes"*)**, i64 (%"class.base::RefCountedBytes"*)*** %88, align 8
  %90 = getelementptr inbounds i64 (%"class.base::RefCountedBytes"*)*, i64 (%"class.base::RefCountedBytes"*)** %89, i64 1
  %91 = load i64 (%"class.base::RefCountedBytes"*)*, i64 (%"class.base::RefCountedBytes"*)** %90, align 8
  %92 = tail call i64 %91(%"class.base::RefCountedBytes"* %87) #11
  %93 = add i64 %92, %85
  %94 = icmp ule i64 %93, %1
  %95 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %83, i64 1
  %96 = xor i64 %82, -1
  %97 = add i64 %81, %96
  %98 = select i1 %94, i64 %97, i64 %82
  %99 = select i1 %94, %"class.network::WebBundleChunkedBuffer::Chunk"* %95, %"class.network::WebBundleChunkedBuffer::Chunk"* %80
  %100 = icmp eq i64 %98, 0
  br i1 %100, label %101, label %79

101:                                              ; preds = %79, %59, %72, %51, %47
  %102 = phi %"class.network::WebBundleChunkedBuffer::Chunk"* [ %48, %47 ], [ %49, %51 ], [ %48, %72 ], [ %71, %59 ], [ %99, %79 ]
  br label %103

103:                                              ; preds = %101, %103
  %104 = phi i64 [ %126, %103 ], [ 0, %101 ]
  %105 = phi %"class.network::WebBundleChunkedBuffer::Chunk"* [ %127, %103 ], [ %102, %101 ]
  %106 = add i64 %104, %1
  %107 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %105, i64 0, i32 0
  %108 = load i64, i64* %107, align 8
  %109 = sub i64 %106, %108
  %110 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %105, i64 0, i32 1, i32 0
  %111 = load %"class.base::RefCountedBytes"*, %"class.base::RefCountedBytes"** %110, align 8
  %112 = bitcast %"class.base::RefCountedBytes"* %111 to i64 (%"class.base::RefCountedBytes"*)***
  %113 = load i64 (%"class.base::RefCountedBytes"*)**, i64 (%"class.base::RefCountedBytes"*)*** %112, align 8
  %114 = getelementptr inbounds i64 (%"class.base::RefCountedBytes"*)*, i64 (%"class.base::RefCountedBytes"*)** %113, i64 1
  %115 = load i64 (%"class.base::RefCountedBytes"*)*, i64 (%"class.base::RefCountedBytes"*)** %114, align 8
  %116 = tail call i64 %115(%"class.base::RefCountedBytes"* %111) #11
  %117 = sub i64 %116, %109
  %118 = sub i64 %45, %104
  %119 = icmp ult i64 %118, %117
  %120 = select i1 %119, i64 %118, i64 %117
  %121 = getelementptr inbounds i8, i8* %3, i64 %104
  %122 = load %"class.base::RefCountedBytes"*, %"class.base::RefCountedBytes"** %110, align 8
  %123 = getelementptr inbounds %"class.base::RefCountedBytes", %"class.base::RefCountedBytes"* %122, i64 0, i32 1, i32 0, i32 0
  %124 = load i8*, i8** %123, align 8
  %125 = getelementptr inbounds i8, i8* %124, i64 %109
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %121, i8* align 1 %125, i64 %120, i1 false)
  %126 = add i64 %120, %104
  %127 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %105, i64 1
  %128 = icmp ugt i64 %45, %126
  br i1 %128, label %103, label %129

129:                                              ; preds = %103, %4, %14, %10, %41
  %130 = phi i64 [ 0, %41 ], [ 0, %10 ], [ 0, %14 ], [ 0, %4 ], [ %126, %103 ]
  ret i64 %130
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #3

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #7

declare void @_ZN4base15RefCountedBytesC1EPKhm(%"class.base::RefCountedBytes"*, i8*, i64) unnamed_addr #4

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN7network22WebBundleChunkedBuffer5ChunkENS_9allocatorIS3_EEE21__push_back_slow_pathIS3_EEvOT_(%"class.std::__1::vector.2"*, %"class.network::WebBundleChunkedBuffer::Chunk"* dereferenceable(16)) local_unnamed_addr #8 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %0, i64 0, i32 0, i32 1
  %4 = bitcast %"class.network::WebBundleChunkedBuffer::Chunk"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector.2"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = ashr exact i64 %8, 4
  %10 = add nsw i64 %9, 1
  %11 = icmp ugt i64 %10, 1152921504606846975
  br i1 %11, label %12, label %14

12:                                               ; preds = %2
  %13 = bitcast %"class.std::__1::vector.2"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %13) #13
  unreachable

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast %"class.network::WebBundleChunkedBuffer::Chunk"** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %17, %7
  %19 = ashr exact i64 %18, 4
  %20 = icmp ult i64 %19, 576460752303423487
  br i1 %20, label %21, label %29

21:                                               ; preds = %14
  %22 = ashr exact i64 %18, 3
  %23 = icmp ult i64 %22, %10
  %24 = select i1 %23, i64 %10, i64 %22
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %34, label %26

26:                                               ; preds = %21
  %27 = icmp ugt i64 %24, 1152921504606846975
  br i1 %27, label %28, label %29

28:                                               ; preds = %26
  tail call void @abort() #13
  unreachable

29:                                               ; preds = %14, %26
  %30 = phi i64 [ %24, %26 ], [ 1152921504606846975, %14 ]
  %31 = shl i64 %30, 4
  %32 = tail call i8* @_Znwm(i64 %31) #12
  %33 = bitcast i8* %32 to %"class.network::WebBundleChunkedBuffer::Chunk"*
  br label %34

34:                                               ; preds = %21, %29
  %35 = phi i64 [ %30, %29 ], [ 0, %21 ]
  %36 = phi %"class.network::WebBundleChunkedBuffer::Chunk"* [ %33, %29 ], [ null, %21 ]
  %37 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %36, i64 %9
  %38 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %36, i64 %35
  %39 = ptrtoint %"class.network::WebBundleChunkedBuffer::Chunk"* %38 to i64
  %40 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %37, i64 0, i32 0
  %41 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %1, i64 0, i32 0
  %42 = load i64, i64* %41, align 8
  store i64 %42, i64* %40, align 8
  %43 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %36, i64 %9, i32 1
  %44 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %1, i64 0, i32 1
  %45 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %44, i64 0, i32 0
  %46 = bitcast %class.scoped_refptr* %44 to i64*
  %47 = load i64, i64* %46, align 8
  %48 = bitcast %class.scoped_refptr* %43 to i64*
  store i64 %47, i64* %48, align 8
  store %"class.base::RefCountedBytes"* null, %"class.base::RefCountedBytes"** %45, align 8
  %49 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %37, i64 1
  %50 = ptrtoint %"class.network::WebBundleChunkedBuffer::Chunk"* %49 to i64
  %51 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %0, i64 0, i32 0, i32 0
  %52 = load %"class.network::WebBundleChunkedBuffer::Chunk"*, %"class.network::WebBundleChunkedBuffer::Chunk"** %51, align 8
  %53 = ptrtoint %"class.network::WebBundleChunkedBuffer::Chunk"* %52 to i64
  %54 = load %"class.network::WebBundleChunkedBuffer::Chunk"*, %"class.network::WebBundleChunkedBuffer::Chunk"** %3, align 8
  %55 = icmp eq %"class.network::WebBundleChunkedBuffer::Chunk"* %54, %52
  br i1 %55, label %132, label %56

56:                                               ; preds = %34
  %57 = getelementptr %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %54, i64 -1, i32 0
  %58 = ptrtoint i64* %57 to i64
  %59 = sub i64 %58, %53
  %60 = lshr i64 %59, 4
  %61 = add nuw nsw i64 %60, 1
  %62 = and i64 %61, 3
  %63 = icmp eq i64 %62, 0
  br i1 %63, label %81, label %64

64:                                               ; preds = %56, %64
  %65 = phi %"class.network::WebBundleChunkedBuffer::Chunk"* [ %78, %64 ], [ %37, %56 ]
  %66 = phi %"class.network::WebBundleChunkedBuffer::Chunk"* [ %68, %64 ], [ %54, %56 ]
  %67 = phi i64 [ %79, %64 ], [ %62, %56 ]
  %68 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %66, i64 -1
  %69 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %65, i64 -1, i32 0
  %70 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %68, i64 0, i32 0
  %71 = load i64, i64* %70, align 8
  store i64 %71, i64* %69, align 8
  %72 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %65, i64 -1, i32 1
  %73 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %66, i64 -1, i32 1
  %74 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %73, i64 0, i32 0
  %75 = bitcast %class.scoped_refptr* %73 to i64*
  %76 = load i64, i64* %75, align 8
  %77 = bitcast %class.scoped_refptr* %72 to i64*
  store i64 %76, i64* %77, align 8
  store %"class.base::RefCountedBytes"* null, %"class.base::RefCountedBytes"** %74, align 8
  %78 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %65, i64 -1
  %79 = add i64 %67, -1
  %80 = icmp eq i64 %79, 0
  br i1 %80, label %81, label %64, !llvm.loop !2

81:                                               ; preds = %64, %56
  %82 = phi %"class.network::WebBundleChunkedBuffer::Chunk"* [ undef, %56 ], [ %78, %64 ]
  %83 = phi %"class.network::WebBundleChunkedBuffer::Chunk"* [ %37, %56 ], [ %78, %64 ]
  %84 = phi %"class.network::WebBundleChunkedBuffer::Chunk"* [ %54, %56 ], [ %68, %64 ]
  %85 = icmp ult i64 %59, 48
  br i1 %85, label %128, label %86

86:                                               ; preds = %81, %86
  %87 = phi %"class.network::WebBundleChunkedBuffer::Chunk"* [ %126, %86 ], [ %83, %81 ]
  %88 = phi %"class.network::WebBundleChunkedBuffer::Chunk"* [ %116, %86 ], [ %84, %81 ]
  %89 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %87, i64 -1, i32 0
  %90 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %88, i64 -1, i32 0
  %91 = load i64, i64* %90, align 8
  store i64 %91, i64* %89, align 8
  %92 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %87, i64 -1, i32 1
  %93 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %88, i64 -1, i32 1
  %94 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %93, i64 0, i32 0
  %95 = bitcast %class.scoped_refptr* %93 to i64*
  %96 = load i64, i64* %95, align 8
  %97 = bitcast %class.scoped_refptr* %92 to i64*
  store i64 %96, i64* %97, align 8
  store %"class.base::RefCountedBytes"* null, %"class.base::RefCountedBytes"** %94, align 8
  %98 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %87, i64 -2, i32 0
  %99 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %88, i64 -2, i32 0
  %100 = load i64, i64* %99, align 8
  store i64 %100, i64* %98, align 8
  %101 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %87, i64 -2, i32 1
  %102 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %88, i64 -2, i32 1
  %103 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %102, i64 0, i32 0
  %104 = bitcast %class.scoped_refptr* %102 to i64*
  %105 = load i64, i64* %104, align 8
  %106 = bitcast %class.scoped_refptr* %101 to i64*
  store i64 %105, i64* %106, align 8
  store %"class.base::RefCountedBytes"* null, %"class.base::RefCountedBytes"** %103, align 8
  %107 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %87, i64 -3, i32 0
  %108 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %88, i64 -3, i32 0
  %109 = load i64, i64* %108, align 8
  store i64 %109, i64* %107, align 8
  %110 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %87, i64 -3, i32 1
  %111 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %88, i64 -3, i32 1
  %112 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %111, i64 0, i32 0
  %113 = bitcast %class.scoped_refptr* %111 to i64*
  %114 = load i64, i64* %113, align 8
  %115 = bitcast %class.scoped_refptr* %110 to i64*
  store i64 %114, i64* %115, align 8
  store %"class.base::RefCountedBytes"* null, %"class.base::RefCountedBytes"** %112, align 8
  %116 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %88, i64 -4
  %117 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %87, i64 -4, i32 0
  %118 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %116, i64 0, i32 0
  %119 = load i64, i64* %118, align 8
  store i64 %119, i64* %117, align 8
  %120 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %87, i64 -4, i32 1
  %121 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %88, i64 -4, i32 1
  %122 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %121, i64 0, i32 0
  %123 = bitcast %class.scoped_refptr* %121 to i64*
  %124 = load i64, i64* %123, align 8
  %125 = bitcast %class.scoped_refptr* %120 to i64*
  store i64 %124, i64* %125, align 8
  store %"class.base::RefCountedBytes"* null, %"class.base::RefCountedBytes"** %122, align 8
  %126 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %87, i64 -4
  %127 = icmp eq %"class.network::WebBundleChunkedBuffer::Chunk"* %116, %52
  br i1 %127, label %128, label %86

128:                                              ; preds = %86, %81
  %129 = phi %"class.network::WebBundleChunkedBuffer::Chunk"* [ %82, %81 ], [ %126, %86 ]
  %130 = load i64, i64* %6, align 8
  %131 = load %"class.network::WebBundleChunkedBuffer::Chunk"*, %"class.network::WebBundleChunkedBuffer::Chunk"** %3, align 8
  br label %132

132:                                              ; preds = %34, %128
  %133 = phi %"class.network::WebBundleChunkedBuffer::Chunk"* [ %131, %128 ], [ %52, %34 ]
  %134 = phi %"class.network::WebBundleChunkedBuffer::Chunk"* [ %129, %128 ], [ %37, %34 ]
  %135 = phi i64 [ %130, %128 ], [ %53, %34 ]
  %136 = ptrtoint %"class.network::WebBundleChunkedBuffer::Chunk"* %134 to i64
  store i64 %136, i64* %6, align 8
  store i64 %50, i64* %4, align 8
  store i64 %39, i64* %16, align 8
  %137 = inttoptr i64 %135 to %"class.network::WebBundleChunkedBuffer::Chunk"*
  %138 = icmp eq %"class.network::WebBundleChunkedBuffer::Chunk"* %133, %137
  br i1 %138, label %159, label %139

139:                                              ; preds = %132, %157
  %140 = phi %"class.network::WebBundleChunkedBuffer::Chunk"* [ %141, %157 ], [ %133, %132 ]
  %141 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %140, i64 -1
  %142 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %140, i64 -1, i32 1, i32 0
  %143 = load %"class.base::RefCountedBytes"*, %"class.base::RefCountedBytes"** %142, align 8
  %144 = icmp eq %"class.base::RefCountedBytes"* %143, null
  br i1 %144, label %157, label %145

145:                                              ; preds = %139
  %146 = getelementptr inbounds %"class.base::RefCountedBytes", %"class.base::RefCountedBytes"* %143, i64 0, i32 0, i32 1
  %147 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %146, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %148 = atomicrmw sub i32* %147, i32 1 acq_rel
  %149 = icmp eq i32 %148, 1
  br i1 %149, label %150, label %157

150:                                              ; preds = %145
  %151 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %146, i64 -2
  %152 = bitcast %"class.base::RefCountedThreadSafe"* %151 to %"class.base::RefCountedMemory"*
  %153 = bitcast %"class.base::RefCountedThreadSafe"* %151 to void (%"class.base::RefCountedMemory"*)***
  %154 = load void (%"class.base::RefCountedMemory"*)**, void (%"class.base::RefCountedMemory"*)*** %153, align 8
  %155 = getelementptr inbounds void (%"class.base::RefCountedMemory"*)*, void (%"class.base::RefCountedMemory"*)** %154, i64 3
  %156 = load void (%"class.base::RefCountedMemory"*)*, void (%"class.base::RefCountedMemory"*)** %155, align 8
  tail call void %156(%"class.base::RefCountedMemory"* nonnull %152) #11
  br label %157

157:                                              ; preds = %150, %145, %139
  %158 = icmp eq %"class.network::WebBundleChunkedBuffer::Chunk"* %141, %137
  br i1 %158, label %159, label %139

159:                                              ; preds = %157, %132
  %160 = icmp eq i64 %135, 0
  br i1 %160, label %163, label %161

161:                                              ; preds = %159
  %162 = inttoptr i64 %135 to i8*
  tail call void @_ZdlPv(i8* %162) #12
  br label %163

163:                                              ; preds = %159, %161
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #9

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #10

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7network12_GLOBAL__N_123ChunkedBufferDataSourceD2Ev(%"class.network::(anonymous namespace)::ChunkedBufferDataSource"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.network::(anonymous namespace)::ChunkedBufferDataSource", %"class.network::(anonymous namespace)::ChunkedBufferDataSource"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN7network12_GLOBAL__N_123ChunkedBufferDataSourceE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.network::(anonymous namespace)::ChunkedBufferDataSource", %"class.network::(anonymous namespace)::ChunkedBufferDataSource"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %4 = load %"class.network::WebBundleChunkedBuffer"*, %"class.network::WebBundleChunkedBuffer"** %3, align 8
  store %"class.network::WebBundleChunkedBuffer"* null, %"class.network::WebBundleChunkedBuffer"** %3, align 8
  %5 = icmp eq %"class.network::WebBundleChunkedBuffer"* %4, null
  br i1 %5, label %42, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer", %"class.network::WebBundleChunkedBuffer"* %4, i64 0, i32 0, i32 0, i32 0
  %8 = load %"class.network::WebBundleChunkedBuffer::Chunk"*, %"class.network::WebBundleChunkedBuffer::Chunk"** %7, align 8
  %9 = icmp eq %"class.network::WebBundleChunkedBuffer::Chunk"* %8, null
  br i1 %9, label %40, label %10

10:                                               ; preds = %6
  %11 = bitcast %"class.network::WebBundleChunkedBuffer::Chunk"* %8 to i8*
  %12 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer", %"class.network::WebBundleChunkedBuffer"* %4, i64 0, i32 0, i32 0, i32 1
  %13 = load %"class.network::WebBundleChunkedBuffer::Chunk"*, %"class.network::WebBundleChunkedBuffer::Chunk"** %12, align 8
  %14 = icmp eq %"class.network::WebBundleChunkedBuffer::Chunk"* %13, %8
  br i1 %14, label %38, label %15

15:                                               ; preds = %10, %33
  %16 = phi %"class.network::WebBundleChunkedBuffer::Chunk"* [ %17, %33 ], [ %13, %10 ]
  %17 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %16, i64 -1
  %18 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %16, i64 -1, i32 1, i32 0
  %19 = load %"class.base::RefCountedBytes"*, %"class.base::RefCountedBytes"** %18, align 8
  %20 = icmp eq %"class.base::RefCountedBytes"* %19, null
  br i1 %20, label %33, label %21

21:                                               ; preds = %15
  %22 = getelementptr inbounds %"class.base::RefCountedBytes", %"class.base::RefCountedBytes"* %19, i64 0, i32 0, i32 1
  %23 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %22, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %24 = atomicrmw sub i32* %23, i32 1 acq_rel
  %25 = icmp eq i32 %24, 1
  br i1 %25, label %26, label %33

26:                                               ; preds = %21
  %27 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %22, i64 -2
  %28 = bitcast %"class.base::RefCountedThreadSafe"* %27 to %"class.base::RefCountedMemory"*
  %29 = bitcast %"class.base::RefCountedThreadSafe"* %27 to void (%"class.base::RefCountedMemory"*)***
  %30 = load void (%"class.base::RefCountedMemory"*)**, void (%"class.base::RefCountedMemory"*)*** %29, align 8
  %31 = getelementptr inbounds void (%"class.base::RefCountedMemory"*)*, void (%"class.base::RefCountedMemory"*)** %30, i64 3
  %32 = load void (%"class.base::RefCountedMemory"*)*, void (%"class.base::RefCountedMemory"*)** %31, align 8
  tail call void %32(%"class.base::RefCountedMemory"* nonnull %28) #11
  br label %33

33:                                               ; preds = %26, %21, %15
  %34 = icmp eq %"class.network::WebBundleChunkedBuffer::Chunk"* %17, %8
  br i1 %34, label %35, label %15

35:                                               ; preds = %33
  %36 = bitcast %"class.network::WebBundleChunkedBuffer"* %4 to i8**
  %37 = load i8*, i8** %36, align 8
  br label %38

38:                                               ; preds = %35, %10
  %39 = phi i8* [ %37, %35 ], [ %11, %10 ]
  store %"class.network::WebBundleChunkedBuffer::Chunk"* %8, %"class.network::WebBundleChunkedBuffer::Chunk"** %12, align 8
  tail call void @_ZdlPv(i8* %39) #12
  br label %40

40:                                               ; preds = %38, %6
  %41 = bitcast %"class.network::WebBundleChunkedBuffer"* %4 to i8*
  tail call void @_ZdlPv(i8* %41) #12
  br label %42

42:                                               ; preds = %1, %40
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN7network12_GLOBAL__N_123ChunkedBufferDataSourceD0Ev(%"class.network::(anonymous namespace)::ChunkedBufferDataSource"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.network::(anonymous namespace)::ChunkedBufferDataSource", %"class.network::(anonymous namespace)::ChunkedBufferDataSource"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN7network12_GLOBAL__N_123ChunkedBufferDataSourceE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.network::(anonymous namespace)::ChunkedBufferDataSource", %"class.network::(anonymous namespace)::ChunkedBufferDataSource"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %4 = load %"class.network::WebBundleChunkedBuffer"*, %"class.network::WebBundleChunkedBuffer"** %3, align 8
  store %"class.network::WebBundleChunkedBuffer"* null, %"class.network::WebBundleChunkedBuffer"** %3, align 8
  %5 = icmp eq %"class.network::WebBundleChunkedBuffer"* %4, null
  br i1 %5, label %42, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer", %"class.network::WebBundleChunkedBuffer"* %4, i64 0, i32 0, i32 0, i32 0
  %8 = load %"class.network::WebBundleChunkedBuffer::Chunk"*, %"class.network::WebBundleChunkedBuffer::Chunk"** %7, align 8
  %9 = icmp eq %"class.network::WebBundleChunkedBuffer::Chunk"* %8, null
  br i1 %9, label %40, label %10

10:                                               ; preds = %6
  %11 = bitcast %"class.network::WebBundleChunkedBuffer::Chunk"* %8 to i8*
  %12 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer", %"class.network::WebBundleChunkedBuffer"* %4, i64 0, i32 0, i32 0, i32 1
  %13 = load %"class.network::WebBundleChunkedBuffer::Chunk"*, %"class.network::WebBundleChunkedBuffer::Chunk"** %12, align 8
  %14 = icmp eq %"class.network::WebBundleChunkedBuffer::Chunk"* %13, %8
  br i1 %14, label %38, label %15

15:                                               ; preds = %10, %33
  %16 = phi %"class.network::WebBundleChunkedBuffer::Chunk"* [ %17, %33 ], [ %13, %10 ]
  %17 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %16, i64 -1
  %18 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %16, i64 -1, i32 1, i32 0
  %19 = load %"class.base::RefCountedBytes"*, %"class.base::RefCountedBytes"** %18, align 8
  %20 = icmp eq %"class.base::RefCountedBytes"* %19, null
  br i1 %20, label %33, label %21

21:                                               ; preds = %15
  %22 = getelementptr inbounds %"class.base::RefCountedBytes", %"class.base::RefCountedBytes"* %19, i64 0, i32 0, i32 1
  %23 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %22, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %24 = atomicrmw sub i32* %23, i32 1 acq_rel
  %25 = icmp eq i32 %24, 1
  br i1 %25, label %26, label %33

26:                                               ; preds = %21
  %27 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %22, i64 -2
  %28 = bitcast %"class.base::RefCountedThreadSafe"* %27 to %"class.base::RefCountedMemory"*
  %29 = bitcast %"class.base::RefCountedThreadSafe"* %27 to void (%"class.base::RefCountedMemory"*)***
  %30 = load void (%"class.base::RefCountedMemory"*)**, void (%"class.base::RefCountedMemory"*)*** %29, align 8
  %31 = getelementptr inbounds void (%"class.base::RefCountedMemory"*)*, void (%"class.base::RefCountedMemory"*)** %30, i64 3
  %32 = load void (%"class.base::RefCountedMemory"*)*, void (%"class.base::RefCountedMemory"*)** %31, align 8
  tail call void %32(%"class.base::RefCountedMemory"* nonnull %28) #11
  br label %33

33:                                               ; preds = %26, %21, %15
  %34 = icmp eq %"class.network::WebBundleChunkedBuffer::Chunk"* %17, %8
  br i1 %34, label %35, label %15

35:                                               ; preds = %33
  %36 = bitcast %"class.network::WebBundleChunkedBuffer"* %4 to i8**
  %37 = load i8*, i8** %36, align 8
  br label %38

38:                                               ; preds = %35, %10
  %39 = phi i8* [ %37, %35 ], [ %11, %10 ]
  store %"class.network::WebBundleChunkedBuffer::Chunk"* %8, %"class.network::WebBundleChunkedBuffer::Chunk"** %12, align 8
  tail call void @_ZdlPv(i8* %39) #12
  br label %40

40:                                               ; preds = %38, %6
  %41 = bitcast %"class.network::WebBundleChunkedBuffer"* %4 to i8*
  tail call void @_ZdlPv(i8* %41) #12
  br label %42

42:                                               ; preds = %1, %40
  %43 = bitcast %"class.network::(anonymous namespace)::ChunkedBufferDataSource"* %0 to i8*
  tail call void @_ZdlPv(i8* %43) #12
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define internal i64 @_ZNK7network12_GLOBAL__N_123ChunkedBufferDataSource9GetLengthEv(%"class.network::(anonymous namespace)::ChunkedBufferDataSource"* nocapture readonly) unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.network::(anonymous namespace)::ChunkedBufferDataSource", %"class.network::(anonymous namespace)::ChunkedBufferDataSource"* %0, i64 0, i32 3
  %3 = load i64, i64* %2, align 8
  ret i64 %3
}

; Function Attrs: nounwind ssp uwtable
define internal { i64, i32 } @_ZN7network12_GLOBAL__N_123ChunkedBufferDataSource4ReadEmN4base4spanIcLm18446744073709551615EEE(%"class.network::(anonymous namespace)::ChunkedBufferDataSource"* nocapture readonly, i64, i64, i8*) unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %"class.network::(anonymous namespace)::ChunkedBufferDataSource", %"class.network::(anonymous namespace)::ChunkedBufferDataSource"* %0, i64 0, i32 3
  %6 = load i64, i64* %5, align 8
  %7 = icmp ugt i64 %6, %1
  br i1 %7, label %8, label %18

8:                                                ; preds = %4
  %9 = getelementptr inbounds %"class.network::(anonymous namespace)::ChunkedBufferDataSource", %"class.network::(anonymous namespace)::ChunkedBufferDataSource"* %0, i64 0, i32 2
  %10 = load i64, i64* %9, align 8
  %11 = add i64 %10, %1
  %12 = sub i64 %6, %1
  %13 = icmp ugt i64 %12, %2
  %14 = select i1 %13, i64 %2, i64 %12
  %15 = getelementptr inbounds %"class.network::(anonymous namespace)::ChunkedBufferDataSource", %"class.network::(anonymous namespace)::ChunkedBufferDataSource"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %16 = load %"class.network::WebBundleChunkedBuffer"*, %"class.network::WebBundleChunkedBuffer"** %15, align 8
  %17 = tail call i64 @_ZNK7network22WebBundleChunkedBuffer8ReadDataEmmPh(%"class.network::WebBundleChunkedBuffer"* %16, i64 %11, i64 %14, i8* %3)
  br label %18

18:                                               ; preds = %4, %8
  %19 = phi i64 [ %14, %8 ], [ 0, %4 ]
  %20 = phi i32 [ 0, %8 ], [ 11, %4 ]
  %21 = insertvalue { i64, i32 } undef, i64 %19, 0
  %22 = insertvalue { i64, i32 } %21, i32 %20, 1
  ret { i64, i32 } %22
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4mojo16DataPipeProducer10DataSource5AbortEv(%"class.mojo::DataPipeProducer::DataSource"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN7network22WebBundleChunkedBuffer5ChunkENS_9allocatorIS3_EEE21__push_back_slow_pathIRKS3_EEvOT_(%"class.std::__1::vector.2"*, %"class.network::WebBundleChunkedBuffer::Chunk"* dereferenceable(16)) local_unnamed_addr #8 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %0, i64 0, i32 0, i32 1
  %4 = bitcast %"class.network::WebBundleChunkedBuffer::Chunk"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector.2"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = ashr exact i64 %8, 4
  %10 = add nsw i64 %9, 1
  %11 = icmp ugt i64 %10, 1152921504606846975
  br i1 %11, label %12, label %14

12:                                               ; preds = %2
  %13 = bitcast %"class.std::__1::vector.2"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %13) #13
  unreachable

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast %"class.network::WebBundleChunkedBuffer::Chunk"** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %17, %7
  %19 = ashr exact i64 %18, 4
  %20 = icmp ult i64 %19, 576460752303423487
  br i1 %20, label %21, label %29

21:                                               ; preds = %14
  %22 = ashr exact i64 %18, 3
  %23 = icmp ult i64 %22, %10
  %24 = select i1 %23, i64 %10, i64 %22
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %34, label %26

26:                                               ; preds = %21
  %27 = icmp ugt i64 %24, 1152921504606846975
  br i1 %27, label %28, label %29

28:                                               ; preds = %26
  tail call void @abort() #13
  unreachable

29:                                               ; preds = %14, %26
  %30 = phi i64 [ %24, %26 ], [ 1152921504606846975, %14 ]
  %31 = shl i64 %30, 4
  %32 = tail call i8* @_Znwm(i64 %31) #12
  %33 = bitcast i8* %32 to %"class.network::WebBundleChunkedBuffer::Chunk"*
  br label %34

34:                                               ; preds = %21, %29
  %35 = phi i64 [ %30, %29 ], [ 0, %21 ]
  %36 = phi %"class.network::WebBundleChunkedBuffer::Chunk"* [ %33, %29 ], [ null, %21 ]
  %37 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %36, i64 %9
  %38 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %36, i64 %35
  %39 = ptrtoint %"class.network::WebBundleChunkedBuffer::Chunk"* %38 to i64
  %40 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %37, i64 0, i32 0
  %41 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %1, i64 0, i32 0
  %42 = load i64, i64* %41, align 8
  store i64 %42, i64* %40, align 8
  %43 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %1, i64 0, i32 1, i32 0
  %44 = load %"class.base::RefCountedBytes"*, %"class.base::RefCountedBytes"** %43, align 8
  %45 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %36, i64 %9, i32 1, i32 0
  store %"class.base::RefCountedBytes"* %44, %"class.base::RefCountedBytes"** %45, align 8
  %46 = icmp eq %"class.base::RefCountedBytes"* %44, null
  br i1 %46, label %50, label %47

47:                                               ; preds = %34
  %48 = getelementptr inbounds %"class.base::RefCountedBytes", %"class.base::RefCountedBytes"* %44, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %49 = atomicrmw add i32* %48, i32 1 monotonic
  br label %50

50:                                               ; preds = %34, %47
  %51 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %37, i64 1
  %52 = ptrtoint %"class.network::WebBundleChunkedBuffer::Chunk"* %51 to i64
  %53 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %0, i64 0, i32 0, i32 0
  %54 = load %"class.network::WebBundleChunkedBuffer::Chunk"*, %"class.network::WebBundleChunkedBuffer::Chunk"** %53, align 8
  %55 = ptrtoint %"class.network::WebBundleChunkedBuffer::Chunk"* %54 to i64
  %56 = load %"class.network::WebBundleChunkedBuffer::Chunk"*, %"class.network::WebBundleChunkedBuffer::Chunk"** %3, align 8
  %57 = icmp eq %"class.network::WebBundleChunkedBuffer::Chunk"* %56, %54
  br i1 %57, label %134, label %58

58:                                               ; preds = %50
  %59 = getelementptr %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %56, i64 -1, i32 0
  %60 = ptrtoint i64* %59 to i64
  %61 = sub i64 %60, %55
  %62 = lshr i64 %61, 4
  %63 = add nuw nsw i64 %62, 1
  %64 = and i64 %63, 3
  %65 = icmp eq i64 %64, 0
  br i1 %65, label %83, label %66

66:                                               ; preds = %58, %66
  %67 = phi %"class.network::WebBundleChunkedBuffer::Chunk"* [ %80, %66 ], [ %37, %58 ]
  %68 = phi %"class.network::WebBundleChunkedBuffer::Chunk"* [ %70, %66 ], [ %56, %58 ]
  %69 = phi i64 [ %81, %66 ], [ %64, %58 ]
  %70 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %68, i64 -1
  %71 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %67, i64 -1, i32 0
  %72 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %70, i64 0, i32 0
  %73 = load i64, i64* %72, align 8
  store i64 %73, i64* %71, align 8
  %74 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %67, i64 -1, i32 1
  %75 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %68, i64 -1, i32 1
  %76 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %75, i64 0, i32 0
  %77 = bitcast %class.scoped_refptr* %75 to i64*
  %78 = load i64, i64* %77, align 8
  %79 = bitcast %class.scoped_refptr* %74 to i64*
  store i64 %78, i64* %79, align 8
  store %"class.base::RefCountedBytes"* null, %"class.base::RefCountedBytes"** %76, align 8
  %80 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %67, i64 -1
  %81 = add i64 %69, -1
  %82 = icmp eq i64 %81, 0
  br i1 %82, label %83, label %66, !llvm.loop !4

83:                                               ; preds = %66, %58
  %84 = phi %"class.network::WebBundleChunkedBuffer::Chunk"* [ undef, %58 ], [ %80, %66 ]
  %85 = phi %"class.network::WebBundleChunkedBuffer::Chunk"* [ %37, %58 ], [ %80, %66 ]
  %86 = phi %"class.network::WebBundleChunkedBuffer::Chunk"* [ %56, %58 ], [ %70, %66 ]
  %87 = icmp ult i64 %61, 48
  br i1 %87, label %130, label %88

88:                                               ; preds = %83, %88
  %89 = phi %"class.network::WebBundleChunkedBuffer::Chunk"* [ %128, %88 ], [ %85, %83 ]
  %90 = phi %"class.network::WebBundleChunkedBuffer::Chunk"* [ %118, %88 ], [ %86, %83 ]
  %91 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %89, i64 -1, i32 0
  %92 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %90, i64 -1, i32 0
  %93 = load i64, i64* %92, align 8
  store i64 %93, i64* %91, align 8
  %94 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %89, i64 -1, i32 1
  %95 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %90, i64 -1, i32 1
  %96 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %95, i64 0, i32 0
  %97 = bitcast %class.scoped_refptr* %95 to i64*
  %98 = load i64, i64* %97, align 8
  %99 = bitcast %class.scoped_refptr* %94 to i64*
  store i64 %98, i64* %99, align 8
  store %"class.base::RefCountedBytes"* null, %"class.base::RefCountedBytes"** %96, align 8
  %100 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %89, i64 -2, i32 0
  %101 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %90, i64 -2, i32 0
  %102 = load i64, i64* %101, align 8
  store i64 %102, i64* %100, align 8
  %103 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %89, i64 -2, i32 1
  %104 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %90, i64 -2, i32 1
  %105 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %104, i64 0, i32 0
  %106 = bitcast %class.scoped_refptr* %104 to i64*
  %107 = load i64, i64* %106, align 8
  %108 = bitcast %class.scoped_refptr* %103 to i64*
  store i64 %107, i64* %108, align 8
  store %"class.base::RefCountedBytes"* null, %"class.base::RefCountedBytes"** %105, align 8
  %109 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %89, i64 -3, i32 0
  %110 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %90, i64 -3, i32 0
  %111 = load i64, i64* %110, align 8
  store i64 %111, i64* %109, align 8
  %112 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %89, i64 -3, i32 1
  %113 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %90, i64 -3, i32 1
  %114 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %113, i64 0, i32 0
  %115 = bitcast %class.scoped_refptr* %113 to i64*
  %116 = load i64, i64* %115, align 8
  %117 = bitcast %class.scoped_refptr* %112 to i64*
  store i64 %116, i64* %117, align 8
  store %"class.base::RefCountedBytes"* null, %"class.base::RefCountedBytes"** %114, align 8
  %118 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %90, i64 -4
  %119 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %89, i64 -4, i32 0
  %120 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %118, i64 0, i32 0
  %121 = load i64, i64* %120, align 8
  store i64 %121, i64* %119, align 8
  %122 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %89, i64 -4, i32 1
  %123 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %90, i64 -4, i32 1
  %124 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %123, i64 0, i32 0
  %125 = bitcast %class.scoped_refptr* %123 to i64*
  %126 = load i64, i64* %125, align 8
  %127 = bitcast %class.scoped_refptr* %122 to i64*
  store i64 %126, i64* %127, align 8
  store %"class.base::RefCountedBytes"* null, %"class.base::RefCountedBytes"** %124, align 8
  %128 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %89, i64 -4
  %129 = icmp eq %"class.network::WebBundleChunkedBuffer::Chunk"* %118, %54
  br i1 %129, label %130, label %88

130:                                              ; preds = %88, %83
  %131 = phi %"class.network::WebBundleChunkedBuffer::Chunk"* [ %84, %83 ], [ %128, %88 ]
  %132 = load i64, i64* %6, align 8
  %133 = load %"class.network::WebBundleChunkedBuffer::Chunk"*, %"class.network::WebBundleChunkedBuffer::Chunk"** %3, align 8
  br label %134

134:                                              ; preds = %50, %130
  %135 = phi %"class.network::WebBundleChunkedBuffer::Chunk"* [ %133, %130 ], [ %54, %50 ]
  %136 = phi %"class.network::WebBundleChunkedBuffer::Chunk"* [ %131, %130 ], [ %37, %50 ]
  %137 = phi i64 [ %132, %130 ], [ %55, %50 ]
  %138 = ptrtoint %"class.network::WebBundleChunkedBuffer::Chunk"* %136 to i64
  store i64 %138, i64* %6, align 8
  store i64 %52, i64* %4, align 8
  store i64 %39, i64* %16, align 8
  %139 = inttoptr i64 %137 to %"class.network::WebBundleChunkedBuffer::Chunk"*
  %140 = icmp eq %"class.network::WebBundleChunkedBuffer::Chunk"* %135, %139
  br i1 %140, label %161, label %141

141:                                              ; preds = %134, %159
  %142 = phi %"class.network::WebBundleChunkedBuffer::Chunk"* [ %143, %159 ], [ %135, %134 ]
  %143 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %142, i64 -1
  %144 = getelementptr inbounds %"class.network::WebBundleChunkedBuffer::Chunk", %"class.network::WebBundleChunkedBuffer::Chunk"* %142, i64 -1, i32 1, i32 0
  %145 = load %"class.base::RefCountedBytes"*, %"class.base::RefCountedBytes"** %144, align 8
  %146 = icmp eq %"class.base::RefCountedBytes"* %145, null
  br i1 %146, label %159, label %147

147:                                              ; preds = %141
  %148 = getelementptr inbounds %"class.base::RefCountedBytes", %"class.base::RefCountedBytes"* %145, i64 0, i32 0, i32 1
  %149 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %148, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %150 = atomicrmw sub i32* %149, i32 1 acq_rel
  %151 = icmp eq i32 %150, 1
  br i1 %151, label %152, label %159

152:                                              ; preds = %147
  %153 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %148, i64 -2
  %154 = bitcast %"class.base::RefCountedThreadSafe"* %153 to %"class.base::RefCountedMemory"*
  %155 = bitcast %"class.base::RefCountedThreadSafe"* %153 to void (%"class.base::RefCountedMemory"*)***
  %156 = load void (%"class.base::RefCountedMemory"*)**, void (%"class.base::RefCountedMemory"*)*** %155, align 8
  %157 = getelementptr inbounds void (%"class.base::RefCountedMemory"*)*, void (%"class.base::RefCountedMemory"*)** %156, i64 3
  %158 = load void (%"class.base::RefCountedMemory"*)*, void (%"class.base::RefCountedMemory"*)** %157, align 8
  tail call void %158(%"class.base::RefCountedMemory"* nonnull %154) #11
  br label %159

159:                                              ; preds = %152, %147, %141
  %160 = icmp eq %"class.network::WebBundleChunkedBuffer::Chunk"* %143, %139
  br i1 %160, label %161, label %141

161:                                              ; preds = %159, %134
  %162 = icmp eq i64 %137, 0
  br i1 %162, label %165, label %163

163:                                              ; preds = %161
  %164 = inttoptr i64 %137 to i8*
  tail call void @_ZdlPv(i8* %164) #12
  br label %165

165:                                              ; preds = %161, %163
  ret void
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nounwind }
attributes #12 = { builtin nounwind }
attributes #13 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = distinct !{!4, !3}
