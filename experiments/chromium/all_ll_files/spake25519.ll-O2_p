; ModuleID = '../../third_party/boringssl/src/crypto/curve25519/spake25519.c'
source_filename = "../../third_party/boringssl/src/crypto/curve25519/spake25519.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.spake2_ctx_st = type { [32 x i8], [32 x i8], [32 x i8], [64 x i8], i8*, i64, i8*, i64, i32, i32, i8 }
%struct.cbs_st = type { i8*, i64 }
%struct.ge_p3 = type { %struct.fe, %struct.fe, %struct.fe, %struct.fe }
%struct.fe = type { [5 x i64] }
%struct.ge_cached = type { %struct.fe_loose, %struct.fe_loose, %struct.fe_loose, %struct.fe_loose }
%struct.fe_loose = type { [5 x i64] }
%struct.ge_p1p1 = type { %struct.fe_loose, %struct.fe_loose, %struct.fe_loose, %struct.fe_loose }
%struct.ge_p2 = type { %struct.fe, %struct.fe, %struct.fe }
%struct.sha512_state_st = type { [8 x i64], i64, i64, [128 x i8], i32, i32 }

@kSpakeMSmallPrecomp = internal constant [960 x i8] c"\C8\A6c\C5\97\F1\EE@\ABbB\EE%o2lu,\A7\D3\BD2;\1E\11\9C\BD\04\A9xoEZ\DA~K\F6\DD\D9\AD\B6bm2\13\1Ck\5CQ\A1\E3G\A3G\8FS\CF\CFD\1B\88\EE\D1.\03\89\AF\C0a-\9E5\EB\0E\03\E0\B7\FB\A5\BCD\BE\0C\89\0A\0F\D6YG\9E\E6=6\9D\FFD^\AC\AB\E5:\D5\B05\9Fm\7F\BA\C0\85\0E\F4p?\13\90LP\1A\EE\C5\EBi\FE\98B\87\1D\CEl)\AA+1\C28{k\EE\88\0B\BA\CE\A8\CA\19`\1B\16\F1%\1E\CFcf\1E\BBc\EB}\CA\D2\B4#Z\01o\05\D1\DCAsu\C0\FD0\91Rh\96E\B3f\01;S\89<i\BCli\E3Q\8F\E3\D2\84\D5(f\B5\E6\06\09\FEm\B0r\16\E0\8A\CEae\A9!2H\DCz\1D\E18\7F\8Cu\88=\08\A9Jo=\9F\7F?\BDWk\19\CE?J\C9\D3\F9nr{[t\EA\BE\9Czm\9C@I\E6\FB*\1Aup\E5N\EDt\E0u\AC\C0\B1\11>\F2\AF\88Mf\B6\F6\15O<lw\AEGQc\9A\FE\E1\B4\1A\12\DF\E9T\8D;0*u\E3\E5)\B1L\B0|m\B5\AE\85\DB\1E8U\96\A5[\9F\15#(6\B8\A2A\B4\D7\19\91\8D&>\CA\9C\05z+`E\86\8B\EEdo\5C\09MKZ\7F\B0\C3&\9D\8B\B8\83i\CF\16rb>^SO\9Csv\FC\19\EF\A0t:\11\1E\D0M\B7\87\A1\D6\87l\0El\8C\E9\A0D\C4r>s\17\13\D1N=\8E\1DZ\8Bu\CBY,G\87\15A\FE\08\E9\A6\97\17\08&j\B5\BBs\AA\B8[ee[0\9EbY\02\F8\B8\0F2\10\C16\08R\98J\1E\F0\AB!^\DE\16\0C\DA\09\99k\9E\C0\90\A5Z\CC\B0\B7\BB\D2\8B_\D3;>\8C\A5qf\06\E3(\D4\F8?\E5'\DF\FE\0F\09\B2\8A\09Z#a\0D-\F5D\F1\5C\F8\82N\DCxz\AB\C3W\91\AFenq\F1D\BF\EDCP\B4gH\EFZ\10F\81\B4\0C\C8H\ED\99zE\A5\92\C3i\D6\D7\8A \1B\EB\8F\B2\FF\ECmv\04\F8\C2X\9B\F2 S\C4t\91\19\DD-\12S\C7n\D0\02Q<\A6}\80uk\1D\DF\F8jR\BB\81\F80E\EFQ\856\BE\8E\CF\0B\9AF\E8?\99\FD\F7\D9>\84\E5\E37\CF\98\7F\EB^ZSw\1C \DC\F1 \99\EC`@\93\EF\5C\1C\81\E2\A5\AD*\C2\DBk\C1~\8F\A9#[\D9\0D\FE\A0\AC\11(\BA\8E\92\07-\07@\83\14L5\8D\D0\11\FF\98\DB\000oe\B6\A0\7F\9C\08\B8\CE\B3\A8B\D3\84E\E1\E3\8F\A6\89!\D7t\02Md\DFT\15\9E\BA\12I\09A\F6\10$\A1\84\15\FDhjWf\B3mL\EA\BF\BC`?R\1CD\1B\C0J%\E3\D9L\9At\AD\FC\9E\8D\0B\18f$\D1\06\ACh\C1\AE\14\CE\B1\F3\86\9F\87\11\D7\9F0\92\DB\EC\0BJ\E8\F6S6h\12\11^\E04\A4\FF\00\0A&\B8by\9C\0C\D5\E5\F5\1C\1A\16\84M\8E]1~\F7\E2\D3\A1A\90a]\04\B2\9A\18\9ET\FB\D1a\95\1B\08\CA|IDt\1D/\CA\C4z\E1\8B/\BB\96\EE\19\8A]\FB>\82\E7\15\DB)\14\EE\C9M\9A\FB\9F\8A\BB\177\1Bn(l\F9\FF\B5\B5\8B\9D\88 \08\10\D7\CAX\F6\E12\91o6\C0\AD\C1W]v1C\F3\DD\EC\F1\A9y\E9\E9\85\D7\91\C71b<\D2\90,\9C\A4V7{\BE@X\C0\81\83\22\E8\13y\18\DB:\1B1\0D\00l\22bup\D8\96Y\99Dyq\A6v\81(\B2e\E8G\14\C69\06", align 16
@kSpakeNSmallPrecomp = internal constant [960 x i8] c" \1B\C5\B3C\17q\10D\1Es\B3\AE?\BF\9F\F5D\C8\13\8F\D1\01\C2\8A\1Am\EAM\00]n\10\E3\DF\0A\E3}\8Ez\99\B5\FEt\B4Fr\10=\BD\DC\BD\06\AFh\0Dq2\9A\11i;\C7x\93\F1W\97n\F0nE7J\F4\0B\18Q\F5Og<\DC\EC\84\ED\D0\EB\CA\FB\DB\FF\7F\EB\A8#h\87\13dj\10\F7E\E0\0F2!Y|\0EP\ADV\D7\12i{X\F8\B9;\A5\BBM\1B\87\1CF\A7\17\9Dm\84E\BE\7F\95\D24\CD\89\95\C0\F0\D3\DFn\10J\E3{\CE\7F@'\C7+\ABf\03Y\B4{\C7\C7\F09\9A35\BF\CC/\F3.h\9DS\5C\88R\E3w\90\A1'\85\C5t\7F#\0E\93\01>\E7..\95\F3\0D\C2%%99=n\8E\89\BD\E8\BBg^\8Cf\8Bc(\1ENt\85\A8\AF\0F\12]\B6\8A\83\1Awv^b\8A\A7<\B8\05W+\AF6.\10\90\B29\B4>um:\A815\C2\1E\8F\C2y\895\16&\D1\C7\0B\04\1F\1D\F9\9C\05\A6k\B5\19Z$m\91\C51\FD\C5\FA\E7\A6\CB\0EK\18\0D\94\C7\EE\1DF\1F\92\B1\B2J+C7\FE\C2\15\11\89\EFYs<\06vx\CB\A6\0Dy_(\0B[\8C\9E\E4\AAQ\9ABo\11P=\01\D6!\C0\99^\1A\E8\81%\80\EB\ED]7G0p\A0N\0BC\17\BE\B6G\E7*b\9D]\A6\C53b\9DV$\9D\1D\B2\13\BC\17fC\D1h\D5;\17i\17\A6\06\9E\12\B8|\D5\AF>!\1B1\EB\0B\A4\98\1C\F2j^|\9BE\8F\B2\12\06\D5\8C\1D\B2\A7W_/O\DBR\99|X\01_\F2\A5\F6Q\86!/[\8Dj\AE\834mXK\EF\FE\BFs]\DB\C4\97*\85\F3lFB\B3\90\C1W\97P5\B1\9D\B7\C7<\85ml\FD\CE\B0\C9\A2w\EE\C3k\0C7\FA0\91\D1,\B8^\7F\81_\87\FD\18\02Z0Nb\BCe\C6\CE\1A\CF+\AAV>M\CF\BAb_\9A\D0r\FF\EF(\BD\BE\D8W=\F5W}\E9q1\EC\98\90\94\D9T\BF\84\0B\E3\06G\19\9A\13\1D\EF\9D\13\F3\DB\C3\5Cr\9E\ED$\AAd\ED\E7\0D\A0|s\BA\9B\86\A7;U\ABX0\F1\15\81\83/\F9b\84\98f\F6U!\D8\F2%dqK\12vY\C5\AA\93g\C3\86%\ABNK\F6\D8?D.\11\E0\BDj\F2]\F5\F9S\EA\A4\C8\D9P3\81\D9\A8-\91}\13*\11\CF\DE?\0A\D2\BC3\B2bS\EAw\88Cf'C\85\E9_U\F5*\8A\AC\DF\FF\9BL\96\9C\A5z\CE\D5y\18\F1\0BX\95z\E7\D3te\0B\A4d0\E8\5C\FCUV\EE\14\14\D3E;\F8\DE\05>\B9<\D7jRr[9\09\BE\82#\10J\B7\C3\DCL]\C9\F1\14\83\F9\0B\9B\E9#\84j\C4\08=\DA=\12\95\87\18\A4}?#\DE\D4\1E\A8G\C3q\DB\F5\03lW\E7\A4C\823{bF}\F7\10i\188'\9Ao8\AC\FA\92\C5\AEf\A6s\95\15\0EL\04\B6\FC\F5\C7!:\99\DB\0E6\F0V\BCu\F9\87\9B\11\18\92d\1A\E7\C7\ABZ\C7&\7F\13\98BRC\DB\C8m\0B\B71\93$\D6\E8$\1Fo!\A7\8C\EB\DB\83\B8\89\E3\C1\D7i;\02kT\0F\84/\B5\5C\17w\BE\E5a\0D\C5\DF;\CF>\93O\F5\89\B9Z\C5)1\C0\C2\FF\E5?\A6\AC\03\CA\F5\FF\E06\CE\F3\E2\B7\9C\02\E9\9E\D2\BC\87/=\9A\1D\8F\C5r\B8\A2\01\D4h\B1\84\16\10\F6\F3R%\D9\DCL\DD\0F\D6J\CF`\96~\CCB\0Fd\9DrF\04\07\F2[\F4\07\D1\F4Yq", align 16

; Function Attrs: nounwind ssp uwtable
define hidden %struct.spake2_ctx_st* @SPAKE2_CTX_new(i32, i8*, i64, i8*, i64) local_unnamed_addr #0 {
  %6 = alloca %struct.cbs_st, align 8
  %7 = alloca %struct.cbs_st, align 8
  %8 = tail call i8* @OPENSSL_malloc(i64 208) #3
  %9 = bitcast i8* %8 to %struct.spake2_ctx_st*
  %10 = icmp eq i8* %8, null
  br i1 %10, label %38, label %11

11:                                               ; preds = %5
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %8, i8 0, i64 208, i1 false) #3
  %12 = getelementptr inbounds i8, i8* %8, i64 192
  %13 = bitcast i8* %12 to i32*
  store i32 %0, i32* %13, align 8
  %14 = bitcast %struct.cbs_st* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %14) #3
  %15 = bitcast %struct.cbs_st* %7 to i8*
  %16 = bitcast %struct.cbs_st* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %16, i8 -86, i64 16, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %15) #3
  %17 = bitcast %struct.cbs_st* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %17, i8 -86, i64 16, i1 false)
  call void @CBS_init(%struct.cbs_st* nonnull %6, i8* %1, i64 %2) #3
  call void @CBS_init(%struct.cbs_st* nonnull %7, i8* %3, i64 %4) #3
  %18 = getelementptr inbounds i8, i8* %8, i64 160
  %19 = bitcast i8* %18 to i8**
  %20 = getelementptr inbounds i8, i8* %8, i64 168
  %21 = bitcast i8* %20 to i64*
  %22 = call i32 @CBS_stow(%struct.cbs_st* nonnull %6, i8** %19, i64* %21) #3
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %31, label %24

24:                                               ; preds = %11
  %25 = getelementptr inbounds i8, i8* %8, i64 176
  %26 = bitcast i8* %25 to i8**
  %27 = getelementptr inbounds i8, i8* %8, i64 184
  %28 = bitcast i8* %27 to i64*
  %29 = call i32 @CBS_stow(%struct.cbs_st* nonnull %7, i8** %26, i64* %28) #3
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %31, label %36

31:                                               ; preds = %11, %24
  %32 = load i8*, i8** %19, align 8
  call void @OPENSSL_free(i8* %32) #3
  %33 = getelementptr inbounds i8, i8* %8, i64 176
  %34 = bitcast i8* %33 to i8**
  %35 = load i8*, i8** %34, align 8
  call void @OPENSSL_free(i8* %35) #3
  call void @OPENSSL_free(i8* nonnull %8) #3
  br label %36

36:                                               ; preds = %24, %31
  %37 = phi %struct.spake2_ctx_st* [ null, %31 ], [ %9, %24 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %15) #3
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %14) #3
  br label %38

38:                                               ; preds = %5, %36
  %39 = phi %struct.spake2_ctx_st* [ %37, %36 ], [ null, %5 ]
  ret %struct.spake2_ctx_st* %39
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare i8* @OPENSSL_malloc(i64) local_unnamed_addr #2

declare void @CBS_init(%struct.cbs_st*, i8*, i64) local_unnamed_addr #2

declare i32 @CBS_stow(%struct.cbs_st*, i8**, i64*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @SPAKE2_CTX_free(%struct.spake2_ctx_st*) local_unnamed_addr #0 {
  %2 = icmp eq %struct.spake2_ctx_st* %0, null
  br i1 %2, label %9, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.spake2_ctx_st, %struct.spake2_ctx_st* %0, i64 0, i32 4
  %5 = load i8*, i8** %4, align 8
  tail call void @OPENSSL_free(i8* %5) #3
  %6 = getelementptr inbounds %struct.spake2_ctx_st, %struct.spake2_ctx_st* %0, i64 0, i32 6
  %7 = load i8*, i8** %6, align 8
  tail call void @OPENSSL_free(i8* %7) #3
  %8 = getelementptr inbounds %struct.spake2_ctx_st, %struct.spake2_ctx_st* %0, i64 0, i32 0, i64 0
  tail call void @OPENSSL_free(i8* %8) #3
  br label %9

9:                                                ; preds = %1, %3
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare void @OPENSSL_free(i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @SPAKE2_generate_msg(%struct.spake2_ctx_st*, i8* nocapture, i64* nocapture, i64, i8*, i64) local_unnamed_addr #0 {
  %7 = alloca [64 x i8], align 16
  %8 = alloca %struct.ge_p3, align 8
  %9 = alloca [64 x i8], align 16
  %10 = alloca %struct.ge_p3, align 8
  %11 = alloca %struct.ge_cached, align 8
  %12 = alloca %struct.ge_p1p1, align 8
  %13 = alloca %struct.ge_p2, align 8
  %14 = getelementptr inbounds %struct.spake2_ctx_st, %struct.spake2_ctx_st* %0, i64 0, i32 9
  %15 = load i32, i32* %14, align 4
  %16 = icmp ne i32 %15, 0
  %17 = icmp ult i64 %3, 32
  %18 = or i1 %17, %16
  br i1 %18, label %225, label %19

19:                                               ; preds = %6
  %20 = getelementptr inbounds [64 x i8], [64 x i8]* %7, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %20) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %20, i8 -86, i64 64, i1 false)
  %21 = call i32 @RAND_bytes(i8* nonnull %20, i64 64) #3
  call void @x25519_sc_reduce(i8* nonnull %20) #3
  %22 = bitcast [64 x i8]* %7 to <16 x i8>*
  %23 = load <16 x i8>, <16 x i8>* %22, align 16
  %24 = lshr <16 x i8> %23, <i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5>
  %25 = shufflevector <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0>, <16 x i8> %24, <16 x i32> <i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30>
  %26 = shl <16 x i8> %23, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %27 = or <16 x i8> %26, %25
  %28 = bitcast [64 x i8]* %7 to <16 x i8>*
  store <16 x i8> %27, <16 x i8>* %28, align 16
  %29 = getelementptr inbounds [64 x i8], [64 x i8]* %7, i64 0, i64 16
  %30 = bitcast i8* %29 to <16 x i8>*
  %31 = load <16 x i8>, <16 x i8>* %30, align 16
  %32 = lshr <16 x i8> %31, <i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5>
  %33 = shufflevector <16 x i8> %24, <16 x i8> %32, <16 x i32> <i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30>
  %34 = shl <16 x i8> %31, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %35 = or <16 x i8> %34, %33
  %36 = bitcast i8* %29 to <16 x i8>*
  store <16 x i8> %35, <16 x i8>* %36, align 16
  %37 = getelementptr inbounds %struct.spake2_ctx_st, %struct.spake2_ctx_st* %0, i64 0, i32 0, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %37, i8* nonnull align 16 %20, i64 32, i1 false) #3
  %38 = bitcast %struct.ge_p3* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %38) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %38, i8 -86, i64 160, i1 false)
  call void @x25519_ge_scalarmult_base(%struct.ge_p3* nonnull %8, i8* %37) #3
  %39 = getelementptr inbounds [64 x i8], [64 x i8]* %9, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %39) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %39, i8 -86, i64 64, i1 false)
  %40 = call i8* @SHA512(i8* %4, i64 %5, i8* nonnull %39) #3
  %41 = getelementptr inbounds %struct.spake2_ctx_st, %struct.spake2_ctx_st* %0, i64 0, i32 3, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %41, i8* nonnull align 16 %39, i64 64, i1 false) #3
  call void @x25519_sc_reduce(i8* nonnull %39) #3
  %42 = bitcast [64 x i8]* %9 to i32*
  %43 = load i32, i32* %42, align 16
  %44 = getelementptr inbounds [64 x i8], [64 x i8]* %9, i64 0, i64 4
  %45 = bitcast i8* %44 to i32*
  %46 = load i32, i32* %45, align 4
  %47 = getelementptr inbounds [64 x i8], [64 x i8]* %9, i64 0, i64 8
  %48 = bitcast i8* %47 to i32*
  %49 = load i32, i32* %48, align 8
  %50 = getelementptr inbounds [64 x i8], [64 x i8]* %9, i64 0, i64 12
  %51 = bitcast i8* %50 to i32*
  %52 = load i32, i32* %51, align 4
  %53 = getelementptr inbounds [64 x i8], [64 x i8]* %9, i64 0, i64 16
  %54 = bitcast i8* %53 to i32*
  %55 = load i32, i32* %54, align 16
  %56 = getelementptr inbounds [64 x i8], [64 x i8]* %9, i64 0, i64 20
  %57 = bitcast i8* %56 to i32*
  %58 = load i32, i32* %57, align 4
  %59 = getelementptr inbounds [64 x i8], [64 x i8]* %9, i64 0, i64 24
  %60 = bitcast i8* %59 to i32*
  %61 = load i32, i32* %60, align 8
  %62 = getelementptr inbounds [64 x i8], [64 x i8]* %9, i64 0, i64 28
  %63 = bitcast i8* %62 to i32*
  %64 = load i32, i32* %63, align 4
  %65 = getelementptr inbounds %struct.spake2_ctx_st, %struct.spake2_ctx_st* %0, i64 0, i32 10
  %66 = load i8, i8* %65, align 8
  %67 = icmp eq i8 %66, 0
  br i1 %67, label %68, label %190

68:                                               ; preds = %19
  %69 = and i32 %43, 1
  %70 = xor i32 %69, 1
  %71 = zext i32 %70 to i64
  %72 = add nsw i64 %71, -1
  %73 = call i64 asm "", "=r,0,~{dirflag},~{fpsr},~{flags}"(i64 %72) #4, !srcloc !2
  %74 = and i64 %73, 1559614445
  %75 = and i64 %73, 1477600026
  %76 = and i64 %73, 2734136534
  %77 = and i64 %73, 350157278
  %78 = trunc i64 %73 to i32
  %79 = and i32 %78, 268435456
  %80 = zext i32 %43 to i64
  %81 = add nuw nsw i64 %74, %80
  %82 = lshr i64 %81, 32
  %83 = zext i32 %46 to i64
  %84 = add nuw nsw i64 %75, %83
  %85 = add nuw nsw i64 %84, %82
  %86 = lshr i64 %85, 32
  %87 = zext i32 %49 to i64
  %88 = add nuw nsw i64 %76, %87
  %89 = add nuw nsw i64 %88, %86
  %90 = lshr i64 %89, 32
  %91 = zext i32 %52 to i64
  %92 = add nuw nsw i64 %77, %91
  %93 = add nuw nsw i64 %92, %90
  %94 = lshr i64 %93, 32
  %95 = zext i32 %55 to i64
  %96 = add nuw nsw i64 %94, %95
  %97 = lshr i64 %96, 32
  %98 = zext i32 %58 to i64
  %99 = add nuw nsw i64 %97, %98
  %100 = lshr i64 %99, 32
  %101 = zext i32 %61 to i64
  %102 = add nuw nsw i64 %100, %101
  %103 = lshr i64 %102, 32
  %104 = trunc i64 %103 to i32
  %105 = and i64 %81, 2
  %106 = xor i64 %105, 2
  %107 = add nsw i64 %106, -1
  %108 = ashr i64 %107, 63
  %109 = call i64 asm "", "=r,0,~{dirflag},~{fpsr},~{flags}"(i64 %108) #4, !srcloc !2
  %110 = and i64 %109, 3119228890
  %111 = and i64 %109, 2955200052
  %112 = and i64 %109, 1173305772
  %113 = and i64 %109, 700314557
  %114 = trunc i64 %109 to i32
  %115 = and i32 %114, 536870912
  %116 = and i64 %81, 4294967295
  %117 = add nuw nsw i64 %116, %110
  %118 = lshr i64 %117, 32
  %119 = and i64 %85, 4294967295
  %120 = or i64 %118, %111
  %121 = add nuw nsw i64 %120, %119
  %122 = lshr i64 %121, 32
  %123 = and i64 %89, 4294967295
  %124 = add nuw nsw i64 %123, %112
  %125 = add nuw nsw i64 %124, %122
  %126 = lshr i64 %125, 32
  %127 = and i64 %93, 4294967295
  %128 = add nuw nsw i64 %127, %113
  %129 = add nuw nsw i64 %128, %126
  %130 = lshr i64 %129, 32
  %131 = and i64 %96, 4294967295
  %132 = add nuw nsw i64 %130, %131
  %133 = lshr i64 %132, 32
  %134 = and i64 %99, 4294967295
  %135 = add nuw nsw i64 %133, %134
  %136 = lshr i64 %135, 32
  %137 = and i64 %102, 4294967295
  %138 = add nuw nsw i64 %136, %137
  %139 = lshr i64 %138, 32
  %140 = trunc i64 %139 to i32
  %141 = and i64 %117, 4
  %142 = xor i64 %141, 4
  %143 = add nsw i64 %142, -1
  %144 = ashr i64 %143, 63
  %145 = call i64 asm "", "=r,0,~{dirflag},~{fpsr},~{flags}"(i64 %144) #4, !srcloc !2
  %146 = and i64 %145, 1943490484
  %147 = and i64 %145, 1615432809
  %148 = and i64 %145, 2346611545
  %149 = and i64 %145, 1400629114
  %150 = trunc i64 %145 to i32
  %151 = and i32 %150, 1073741824
  %152 = and i64 %117, 4294967295
  %153 = add nuw nsw i64 %152, %146
  %154 = trunc i64 %153 to i32
  %155 = lshr i64 %153, 32
  %156 = and i64 %121, 4294967295
  %157 = add nuw nsw i64 %155, %147
  %158 = add nuw nsw i64 %157, %156
  %159 = trunc i64 %158 to i32
  %160 = lshr i64 %158, 32
  %161 = and i64 %125, 4294967295
  %162 = add nuw nsw i64 %161, %148
  %163 = add nuw nsw i64 %162, %160
  %164 = trunc i64 %163 to i32
  %165 = lshr i64 %163, 32
  %166 = and i64 %129, 4294967295
  %167 = add nuw nsw i64 %166, %149
  %168 = add nuw nsw i64 %167, %165
  %169 = trunc i64 %168 to i32
  %170 = lshr i64 %168, 32
  %171 = and i64 %132, 4294967295
  %172 = add nuw nsw i64 %170, %171
  %173 = trunc i64 %172 to i32
  %174 = lshr i64 %172, 32
  %175 = and i64 %135, 4294967295
  %176 = add nuw nsw i64 %174, %175
  %177 = trunc i64 %176 to i32
  %178 = lshr i64 %176, 32
  %179 = and i64 %138, 4294967295
  %180 = add nuw nsw i64 %178, %179
  %181 = trunc i64 %180 to i32
  %182 = lshr i64 %180, 32
  %183 = trunc i64 %182 to i32
  %184 = add i32 %79, %64
  %185 = add i32 %184, %115
  %186 = add i32 %185, %151
  %187 = add i32 %186, %104
  %188 = add i32 %187, %140
  %189 = add i32 %188, %183
  br label %190

190:                                              ; preds = %19, %68
  %191 = phi i32 [ %159, %68 ], [ %46, %19 ]
  %192 = phi i32 [ %164, %68 ], [ %49, %19 ]
  %193 = phi i32 [ %169, %68 ], [ %52, %19 ]
  %194 = phi i32 [ %173, %68 ], [ %55, %19 ]
  %195 = phi i32 [ %177, %68 ], [ %58, %19 ]
  %196 = phi i32 [ %181, %68 ], [ %61, %19 ]
  %197 = phi i32 [ %189, %68 ], [ %64, %19 ]
  %198 = phi i32 [ %154, %68 ], [ %43, %19 ]
  %199 = getelementptr inbounds %struct.spake2_ctx_st, %struct.spake2_ctx_st* %0, i64 0, i32 2, i64 0
  %200 = getelementptr inbounds %struct.spake2_ctx_st, %struct.spake2_ctx_st* %0, i64 0, i32 2
  %201 = bitcast [32 x i8]* %200 to i32*
  store i32 %198, i32* %201, align 1
  %202 = getelementptr inbounds %struct.spake2_ctx_st, %struct.spake2_ctx_st* %0, i64 0, i32 2, i64 4
  %203 = bitcast i8* %202 to i32*
  store i32 %191, i32* %203, align 1
  %204 = getelementptr inbounds %struct.spake2_ctx_st, %struct.spake2_ctx_st* %0, i64 0, i32 2, i64 8
  %205 = bitcast i8* %204 to i32*
  store i32 %192, i32* %205, align 1
  %206 = getelementptr inbounds %struct.spake2_ctx_st, %struct.spake2_ctx_st* %0, i64 0, i32 2, i64 12
  %207 = bitcast i8* %206 to i32*
  store i32 %193, i32* %207, align 1
  %208 = getelementptr inbounds %struct.spake2_ctx_st, %struct.spake2_ctx_st* %0, i64 0, i32 2, i64 16
  %209 = bitcast i8* %208 to i32*
  store i32 %194, i32* %209, align 1
  %210 = getelementptr inbounds %struct.spake2_ctx_st, %struct.spake2_ctx_st* %0, i64 0, i32 2, i64 20
  %211 = bitcast i8* %210 to i32*
  store i32 %195, i32* %211, align 1
  %212 = getelementptr inbounds %struct.spake2_ctx_st, %struct.spake2_ctx_st* %0, i64 0, i32 2, i64 24
  %213 = bitcast i8* %212 to i32*
  store i32 %196, i32* %213, align 1
  %214 = getelementptr inbounds %struct.spake2_ctx_st, %struct.spake2_ctx_st* %0, i64 0, i32 2, i64 28
  %215 = bitcast i8* %214 to i32*
  store i32 %197, i32* %215, align 1
  %216 = bitcast %struct.ge_p3* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %216) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %216, i8 -86, i64 160, i1 false)
  %217 = getelementptr inbounds %struct.spake2_ctx_st, %struct.spake2_ctx_st* %0, i64 0, i32 8
  %218 = load i32, i32* %217, align 8
  %219 = icmp eq i32 %218, 0
  %220 = select i1 %219, i8* getelementptr inbounds ([960 x i8], [960 x i8]* @kSpakeMSmallPrecomp, i64 0, i64 0), i8* getelementptr inbounds ([960 x i8], [960 x i8]* @kSpakeNSmallPrecomp, i64 0, i64 0)
  call void @x25519_ge_scalarmult_small_precomp(%struct.ge_p3* nonnull %10, i8* %199, i8* %220) #3
  %221 = bitcast %struct.ge_cached* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %221) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %221, i8 -86, i64 160, i1 false)
  call void @x25519_ge_p3_to_cached(%struct.ge_cached* nonnull %11, %struct.ge_p3* nonnull %10) #3
  %222 = bitcast %struct.ge_p1p1* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %222) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %222, i8 -86, i64 160, i1 false)
  call void @x25519_ge_add(%struct.ge_p1p1* nonnull %12, %struct.ge_p3* nonnull %8, %struct.ge_cached* nonnull %11) #3
  %223 = bitcast %struct.ge_p2* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 120, i8* nonnull %223) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %223, i8 -86, i64 120, i1 false)
  call void @x25519_ge_p1p1_to_p2(%struct.ge_p2* nonnull %13, %struct.ge_p1p1* nonnull %12) #3
  %224 = getelementptr inbounds %struct.spake2_ctx_st, %struct.spake2_ctx_st* %0, i64 0, i32 1, i64 0
  call void @x25519_ge_tobytes(i8* %224, %struct.ge_p2* nonnull %13) #3
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1, i8* align 1 %224, i64 32, i1 false) #3
  store i64 32, i64* %2, align 8
  store i32 1, i32* %14, align 4
  call void @llvm.lifetime.end.p0i8(i64 120, i8* nonnull %223) #3
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %222) #3
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %221) #3
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %216) #3
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %39) #3
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %38) #3
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %20) #3
  br label %225

225:                                              ; preds = %6, %190
  %226 = phi i32 [ 1, %190 ], [ 0, %6 ]
  ret i32 %226
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare i32 @RAND_bytes(i8*, i64) local_unnamed_addr #2

declare void @x25519_sc_reduce(i8*) local_unnamed_addr #2

declare void @x25519_ge_scalarmult_base(%struct.ge_p3*, i8*) local_unnamed_addr #2

declare i8* @SHA512(i8*, i64, i8*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare void @x25519_ge_scalarmult_small_precomp(%struct.ge_p3*, i8*, i8*) local_unnamed_addr #2

declare void @x25519_ge_p3_to_cached(%struct.ge_cached*, %struct.ge_p3*) local_unnamed_addr #2

declare void @x25519_ge_add(%struct.ge_p1p1*, %struct.ge_p3*, %struct.ge_cached*) local_unnamed_addr #2

declare void @x25519_ge_p1p1_to_p2(%struct.ge_p2*, %struct.ge_p1p1*) local_unnamed_addr #2

declare void @x25519_ge_tobytes(i8*, %struct.ge_p2*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @SPAKE2_process_msg(%struct.spake2_ctx_st*, i8* nocapture, i64* nocapture, i64, i8*, i64) local_unnamed_addr #0 {
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  %14 = alloca i64, align 8
  %15 = alloca i64, align 8
  %16 = alloca i64, align 8
  %17 = alloca %struct.ge_p3, align 8
  %18 = alloca %struct.ge_p3, align 8
  %19 = alloca %struct.ge_cached, align 8
  %20 = alloca %struct.ge_p1p1, align 8
  %21 = alloca %struct.ge_p3, align 8
  %22 = alloca %struct.ge_p2, align 8
  %23 = alloca [32 x i8], align 16
  %24 = alloca %struct.sha512_state_st, align 8
  %25 = alloca [64 x i8], align 16
  %26 = getelementptr inbounds %struct.spake2_ctx_st, %struct.spake2_ctx_st* %0, i64 0, i32 9
  %27 = load i32, i32* %26, align 4
  %28 = icmp ne i32 %27, 1
  %29 = icmp ne i64 %5, 32
  %30 = or i1 %29, %28
  br i1 %30, label %214, label %31

31:                                               ; preds = %6
  %32 = bitcast %struct.ge_p3* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %32) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %32, i8 -86, i64 160, i1 false)
  %33 = call i32 @x25519_ge_frombytes_vartime(%struct.ge_p3* nonnull %17, i8* %4) #3
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %212, label %35

35:                                               ; preds = %31
  %36 = bitcast %struct.ge_p3* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %36) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %36, i8 -86, i64 160, i1 false)
  %37 = getelementptr inbounds %struct.spake2_ctx_st, %struct.spake2_ctx_st* %0, i64 0, i32 2, i64 0
  %38 = getelementptr inbounds %struct.spake2_ctx_st, %struct.spake2_ctx_st* %0, i64 0, i32 8
  %39 = load i32, i32* %38, align 8
  %40 = icmp eq i32 %39, 0
  %41 = select i1 %40, i8* getelementptr inbounds ([960 x i8], [960 x i8]* @kSpakeNSmallPrecomp, i64 0, i64 0), i8* getelementptr inbounds ([960 x i8], [960 x i8]* @kSpakeMSmallPrecomp, i64 0, i64 0)
  call void @x25519_ge_scalarmult_small_precomp(%struct.ge_p3* nonnull %18, i8* %37, i8* %41) #3
  %42 = bitcast %struct.ge_cached* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %42) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %42, i8 -86, i64 160, i1 false)
  call void @x25519_ge_p3_to_cached(%struct.ge_cached* nonnull %19, %struct.ge_p3* nonnull %18) #3
  %43 = bitcast %struct.ge_p1p1* %20 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %43) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %43, i8 -86, i64 160, i1 false)
  %44 = bitcast %struct.ge_p3* %21 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %44) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %44, i8 -86, i64 160, i1 false)
  call void @x25519_ge_sub(%struct.ge_p1p1* nonnull %20, %struct.ge_p3* nonnull %17, %struct.ge_cached* nonnull %19) #3
  call void @x25519_ge_p1p1_to_p3(%struct.ge_p3* nonnull %21, %struct.ge_p1p1* nonnull %20) #3
  %45 = bitcast %struct.ge_p2* %22 to i8*
  call void @llvm.lifetime.start.p0i8(i64 120, i8* nonnull %45) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %45, i8 -86, i64 120, i1 false)
  %46 = getelementptr inbounds %struct.spake2_ctx_st, %struct.spake2_ctx_st* %0, i64 0, i32 0, i64 0
  call void @x25519_ge_scalarmult(%struct.ge_p2* nonnull %22, i8* %46, %struct.ge_p3* nonnull %21) #3
  %47 = getelementptr inbounds [32 x i8], [32 x i8]* %23, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %47) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %47, i8 -86, i64 32, i1 false)
  call void @x25519_ge_tobytes(i8* nonnull %47, %struct.ge_p2* nonnull %22) #3
  %48 = bitcast %struct.sha512_state_st* %24 to i8*
  call void @llvm.lifetime.start.p0i8(i64 216, i8* nonnull %48) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %48, i8 -86, i64 216, i1 false)
  %49 = call i32 @SHA512_Init(%struct.sha512_state_st* nonnull %24) #3
  %50 = load i32, i32* %38, align 8
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %52, label %119

52:                                               ; preds = %35
  %53 = getelementptr inbounds %struct.spake2_ctx_st, %struct.spake2_ctx_st* %0, i64 0, i32 4
  %54 = load i8*, i8** %53, align 8
  %55 = getelementptr inbounds %struct.spake2_ctx_st, %struct.spake2_ctx_st* %0, i64 0, i32 5
  %56 = load i64, i64* %55, align 8
  %57 = bitcast i64* %16 to [8 x i8]*
  %58 = bitcast i64* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %58) #3
  %59 = getelementptr inbounds [8 x i8], [8 x i8]* %57, i64 0, i64 1
  %60 = getelementptr inbounds [8 x i8], [8 x i8]* %57, i64 0, i64 2
  %61 = getelementptr inbounds [8 x i8], [8 x i8]* %57, i64 0, i64 3
  %62 = getelementptr inbounds [8 x i8], [8 x i8]* %57, i64 0, i64 4
  %63 = getelementptr inbounds [8 x i8], [8 x i8]* %57, i64 0, i64 5
  %64 = getelementptr inbounds [8 x i8], [8 x i8]* %57, i64 0, i64 6
  %65 = getelementptr inbounds [8 x i8], [8 x i8]* %57, i64 0, i64 7
  %66 = trunc i64 %56 to i8
  store i8 %66, i8* %58, align 8
  %67 = lshr i64 %56, 8
  %68 = trunc i64 %67 to i8
  store i8 %68, i8* %59, align 1
  %69 = lshr i64 %56, 16
  %70 = trunc i64 %69 to i8
  store i8 %70, i8* %60, align 2
  %71 = lshr i64 %56, 24
  %72 = trunc i64 %71 to i8
  store i8 %72, i8* %61, align 1
  %73 = lshr i64 %56, 32
  %74 = trunc i64 %73 to i8
  store i8 %74, i8* %62, align 4
  %75 = lshr i64 %56, 40
  %76 = trunc i64 %75 to i8
  store i8 %76, i8* %63, align 1
  %77 = lshr i64 %56, 48
  %78 = trunc i64 %77 to i8
  store i8 %78, i8* %64, align 2
  %79 = lshr i64 %56, 56
  %80 = trunc i64 %79 to i8
  store i8 %80, i8* %65, align 1
  %81 = call i32 @SHA512_Update(%struct.sha512_state_st* nonnull %24, i8* nonnull %58, i64 8) #3
  %82 = call i32 @SHA512_Update(%struct.sha512_state_st* nonnull %24, i8* %54, i64 %56) #3
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %58) #3
  %83 = getelementptr inbounds %struct.spake2_ctx_st, %struct.spake2_ctx_st* %0, i64 0, i32 6
  %84 = load i8*, i8** %83, align 8
  %85 = getelementptr inbounds %struct.spake2_ctx_st, %struct.spake2_ctx_st* %0, i64 0, i32 7
  %86 = load i64, i64* %85, align 8
  %87 = bitcast i64* %15 to [8 x i8]*
  %88 = bitcast i64* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %88) #3
  %89 = getelementptr inbounds [8 x i8], [8 x i8]* %87, i64 0, i64 1
  %90 = getelementptr inbounds [8 x i8], [8 x i8]* %87, i64 0, i64 2
  %91 = getelementptr inbounds [8 x i8], [8 x i8]* %87, i64 0, i64 3
  %92 = getelementptr inbounds [8 x i8], [8 x i8]* %87, i64 0, i64 4
  %93 = getelementptr inbounds [8 x i8], [8 x i8]* %87, i64 0, i64 5
  %94 = getelementptr inbounds [8 x i8], [8 x i8]* %87, i64 0, i64 6
  %95 = getelementptr inbounds [8 x i8], [8 x i8]* %87, i64 0, i64 7
  %96 = trunc i64 %86 to i8
  store i8 %96, i8* %88, align 8
  %97 = lshr i64 %86, 8
  %98 = trunc i64 %97 to i8
  store i8 %98, i8* %89, align 1
  %99 = lshr i64 %86, 16
  %100 = trunc i64 %99 to i8
  store i8 %100, i8* %90, align 2
  %101 = lshr i64 %86, 24
  %102 = trunc i64 %101 to i8
  store i8 %102, i8* %91, align 1
  %103 = lshr i64 %86, 32
  %104 = trunc i64 %103 to i8
  store i8 %104, i8* %92, align 4
  %105 = lshr i64 %86, 40
  %106 = trunc i64 %105 to i8
  store i8 %106, i8* %93, align 1
  %107 = lshr i64 %86, 48
  %108 = trunc i64 %107 to i8
  store i8 %108, i8* %94, align 2
  %109 = lshr i64 %86, 56
  %110 = trunc i64 %109 to i8
  store i8 %110, i8* %95, align 1
  %111 = call i32 @SHA512_Update(%struct.sha512_state_st* nonnull %24, i8* nonnull %88, i64 8) #3
  %112 = call i32 @SHA512_Update(%struct.sha512_state_st* nonnull %24, i8* %84, i64 %86) #3
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %88) #3
  %113 = getelementptr inbounds %struct.spake2_ctx_st, %struct.spake2_ctx_st* %0, i64 0, i32 1, i64 0
  %114 = bitcast i64* %14 to [8 x i8]*
  %115 = bitcast i64* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %115) #3
  %116 = getelementptr inbounds [8 x i8], [8 x i8]* %114, i64 0, i64 1
  store i8 32, i8* %115, align 8
  call void @llvm.memset.p0i8.i64(i8* align 1 %116, i8 0, i64 7, i1 false)
  %117 = call i32 @SHA512_Update(%struct.sha512_state_st* nonnull %24, i8* nonnull %115, i64 8) #3
  %118 = call i32 @SHA512_Update(%struct.sha512_state_st* nonnull %24, i8* %113, i64 32) #3
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %115) #3
  br label %186

119:                                              ; preds = %35
  %120 = getelementptr inbounds %struct.spake2_ctx_st, %struct.spake2_ctx_st* %0, i64 0, i32 6
  %121 = load i8*, i8** %120, align 8
  %122 = getelementptr inbounds %struct.spake2_ctx_st, %struct.spake2_ctx_st* %0, i64 0, i32 7
  %123 = load i64, i64* %122, align 8
  %124 = bitcast i64* %12 to [8 x i8]*
  %125 = bitcast i64* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %125) #3
  %126 = getelementptr inbounds [8 x i8], [8 x i8]* %124, i64 0, i64 1
  %127 = getelementptr inbounds [8 x i8], [8 x i8]* %124, i64 0, i64 2
  %128 = getelementptr inbounds [8 x i8], [8 x i8]* %124, i64 0, i64 3
  %129 = getelementptr inbounds [8 x i8], [8 x i8]* %124, i64 0, i64 4
  %130 = getelementptr inbounds [8 x i8], [8 x i8]* %124, i64 0, i64 5
  %131 = getelementptr inbounds [8 x i8], [8 x i8]* %124, i64 0, i64 6
  %132 = getelementptr inbounds [8 x i8], [8 x i8]* %124, i64 0, i64 7
  %133 = trunc i64 %123 to i8
  store i8 %133, i8* %125, align 8
  %134 = lshr i64 %123, 8
  %135 = trunc i64 %134 to i8
  store i8 %135, i8* %126, align 1
  %136 = lshr i64 %123, 16
  %137 = trunc i64 %136 to i8
  store i8 %137, i8* %127, align 2
  %138 = lshr i64 %123, 24
  %139 = trunc i64 %138 to i8
  store i8 %139, i8* %128, align 1
  %140 = lshr i64 %123, 32
  %141 = trunc i64 %140 to i8
  store i8 %141, i8* %129, align 4
  %142 = lshr i64 %123, 40
  %143 = trunc i64 %142 to i8
  store i8 %143, i8* %130, align 1
  %144 = lshr i64 %123, 48
  %145 = trunc i64 %144 to i8
  store i8 %145, i8* %131, align 2
  %146 = lshr i64 %123, 56
  %147 = trunc i64 %146 to i8
  store i8 %147, i8* %132, align 1
  %148 = call i32 @SHA512_Update(%struct.sha512_state_st* nonnull %24, i8* nonnull %125, i64 8) #3
  %149 = call i32 @SHA512_Update(%struct.sha512_state_st* nonnull %24, i8* %121, i64 %123) #3
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %125) #3
  %150 = getelementptr inbounds %struct.spake2_ctx_st, %struct.spake2_ctx_st* %0, i64 0, i32 4
  %151 = load i8*, i8** %150, align 8
  %152 = getelementptr inbounds %struct.spake2_ctx_st, %struct.spake2_ctx_st* %0, i64 0, i32 5
  %153 = load i64, i64* %152, align 8
  %154 = bitcast i64* %11 to [8 x i8]*
  %155 = bitcast i64* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %155) #3
  %156 = getelementptr inbounds [8 x i8], [8 x i8]* %154, i64 0, i64 1
  %157 = getelementptr inbounds [8 x i8], [8 x i8]* %154, i64 0, i64 2
  %158 = getelementptr inbounds [8 x i8], [8 x i8]* %154, i64 0, i64 3
  %159 = getelementptr inbounds [8 x i8], [8 x i8]* %154, i64 0, i64 4
  %160 = getelementptr inbounds [8 x i8], [8 x i8]* %154, i64 0, i64 5
  %161 = getelementptr inbounds [8 x i8], [8 x i8]* %154, i64 0, i64 6
  %162 = getelementptr inbounds [8 x i8], [8 x i8]* %154, i64 0, i64 7
  %163 = trunc i64 %153 to i8
  store i8 %163, i8* %155, align 8
  %164 = lshr i64 %153, 8
  %165 = trunc i64 %164 to i8
  store i8 %165, i8* %156, align 1
  %166 = lshr i64 %153, 16
  %167 = trunc i64 %166 to i8
  store i8 %167, i8* %157, align 2
  %168 = lshr i64 %153, 24
  %169 = trunc i64 %168 to i8
  store i8 %169, i8* %158, align 1
  %170 = lshr i64 %153, 32
  %171 = trunc i64 %170 to i8
  store i8 %171, i8* %159, align 4
  %172 = lshr i64 %153, 40
  %173 = trunc i64 %172 to i8
  store i8 %173, i8* %160, align 1
  %174 = lshr i64 %153, 48
  %175 = trunc i64 %174 to i8
  store i8 %175, i8* %161, align 2
  %176 = lshr i64 %153, 56
  %177 = trunc i64 %176 to i8
  store i8 %177, i8* %162, align 1
  %178 = call i32 @SHA512_Update(%struct.sha512_state_st* nonnull %24, i8* nonnull %155, i64 8) #3
  %179 = call i32 @SHA512_Update(%struct.sha512_state_st* nonnull %24, i8* %151, i64 %153) #3
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %155) #3
  %180 = bitcast i64* %10 to [8 x i8]*
  %181 = bitcast i64* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %181) #3
  %182 = getelementptr inbounds [8 x i8], [8 x i8]* %180, i64 0, i64 1
  store i8 32, i8* %181, align 8
  call void @llvm.memset.p0i8.i64(i8* align 1 %182, i8 0, i64 7, i1 false)
  %183 = call i32 @SHA512_Update(%struct.sha512_state_st* nonnull %24, i8* nonnull %181, i64 8) #3
  %184 = call i32 @SHA512_Update(%struct.sha512_state_st* nonnull %24, i8* %4, i64 32) #3
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %181) #3
  %185 = getelementptr inbounds %struct.spake2_ctx_st, %struct.spake2_ctx_st* %0, i64 0, i32 1, i64 0
  br label %186

186:                                              ; preds = %119, %52
  %187 = phi i64* [ %9, %119 ], [ %13, %52 ]
  %188 = phi i8* [ %185, %119 ], [ %4, %52 ]
  %189 = bitcast i64* %187 to [8 x i8]*
  %190 = bitcast i64* %187 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %190) #3
  %191 = getelementptr inbounds [8 x i8], [8 x i8]* %189, i64 0, i64 1
  store i8 32, i8* %190, align 8
  call void @llvm.memset.p0i8.i64(i8* align 1 %191, i8 0, i64 7, i1 false)
  %192 = call i32 @SHA512_Update(%struct.sha512_state_st* nonnull %24, i8* nonnull %190, i64 8) #3
  %193 = call i32 @SHA512_Update(%struct.sha512_state_st* nonnull %24, i8* %188, i64 32) #3
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %190) #3
  %194 = bitcast i64* %8 to [8 x i8]*
  %195 = bitcast i64* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %195) #3
  %196 = getelementptr inbounds [8 x i8], [8 x i8]* %194, i64 0, i64 1
  store i8 32, i8* %195, align 8
  call void @llvm.memset.p0i8.i64(i8* align 1 %196, i8 0, i64 7, i1 false)
  %197 = call i32 @SHA512_Update(%struct.sha512_state_st* nonnull %24, i8* nonnull %195, i64 8) #3
  %198 = call i32 @SHA512_Update(%struct.sha512_state_st* nonnull %24, i8* nonnull %47, i64 32) #3
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %195) #3
  %199 = getelementptr inbounds %struct.spake2_ctx_st, %struct.spake2_ctx_st* %0, i64 0, i32 3, i64 0
  %200 = bitcast i64* %7 to [8 x i8]*
  %201 = bitcast i64* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %201) #3
  %202 = getelementptr inbounds [8 x i8], [8 x i8]* %200, i64 0, i64 1
  store i8 64, i8* %201, align 8
  call void @llvm.memset.p0i8.i64(i8* align 1 %202, i8 0, i64 7, i1 false)
  %203 = call i32 @SHA512_Update(%struct.sha512_state_st* nonnull %24, i8* nonnull %201, i64 8) #3
  %204 = call i32 @SHA512_Update(%struct.sha512_state_st* nonnull %24, i8* %199, i64 64) #3
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %201) #3
  %205 = getelementptr inbounds [64 x i8], [64 x i8]* %25, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %205) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %205, i8 -86, i64 64, i1 false)
  %206 = call i32 @SHA512_Final(i8* nonnull %205, %struct.sha512_state_st* nonnull %24) #3
  %207 = icmp ult i64 %3, 64
  %208 = select i1 %207, i64 %3, i64 64
  %209 = icmp eq i64 %208, 0
  br i1 %209, label %211, label %210

210:                                              ; preds = %186
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1, i8* nonnull align 16 %205, i64 %208, i1 false) #3
  br label %211

211:                                              ; preds = %186, %210
  store i64 %208, i64* %2, align 8
  store i32 2, i32* %26, align 4
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %205) #3
  call void @llvm.lifetime.end.p0i8(i64 216, i8* nonnull %48) #3
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %47) #3
  call void @llvm.lifetime.end.p0i8(i64 120, i8* nonnull %45) #3
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %44) #3
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %43) #3
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %42) #3
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %36) #3
  br label %212

212:                                              ; preds = %31, %211
  %213 = phi i32 [ 1, %211 ], [ 0, %31 ]
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %32) #3
  br label %214

214:                                              ; preds = %6, %212
  %215 = phi i32 [ %213, %212 ], [ 0, %6 ]
  ret i32 %215
}

declare i32 @x25519_ge_frombytes_vartime(%struct.ge_p3*, i8*) local_unnamed_addr #2

declare void @x25519_ge_sub(%struct.ge_p1p1*, %struct.ge_p3*, %struct.ge_cached*) local_unnamed_addr #2

declare void @x25519_ge_p1p1_to_p3(%struct.ge_p3*, %struct.ge_p1p1*) local_unnamed_addr #2

declare void @x25519_ge_scalarmult(%struct.ge_p2*, i8*, %struct.ge_p3*) local_unnamed_addr #2

declare i32 @SHA512_Init(%struct.sha512_state_st*) local_unnamed_addr #2

declare i32 @SHA512_Final(i8*, %struct.sha512_state_st*) local_unnamed_addr #2

declare i32 @SHA512_Update(%struct.sha512_state_st*, i8*, i64) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }
attributes #4 = { nounwind readnone }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 415642}
