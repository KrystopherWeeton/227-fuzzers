; ModuleID = '../../services/device/usb/usb_device.cc'
source_filename = "../../services/device/usb/usb_device.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.device::UsbDevice::Observer" = type { i32 (...)** }
%"class.device::UsbDevice" = type { i32 (...)**, %"class.base::RefCountedThreadSafe", %"class.mojo::StructPtr", %"class.std::__1::list", %"class.base::ObserverList" }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.mojo::StructPtr" = type { %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.device::mojom::UsbDeviceInfo"* }
%"class.device::mojom::UsbDeviceInfo" = type { %"class.std::__1::basic_string", i8, i8, i8, i8, i8, i8, i32, i32, i16, i16, i8, i8, i8, %"class.absl::optional", %"class.absl::optional", %"class.absl::optional", %"class.absl::optional.14", i8, %"class.std::__1::vector" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon.4 }
%union.anon.4 = type { %"class.std::__1::basic_string.5" }
%"class.std::__1::basic_string.5" = type { %"class.std::__1::__compressed_pair.6" }
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::__compressed_pair_elem.7" = type { %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__rep" }
%"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__rep" = type { %union.anon.8 }
%union.anon.8 = type { %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__long" }
%"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__long" = type { i16*, i64, i64 }
%"class.absl::optional.14" = type { %"class.absl::optional_internal::optional_data.15" }
%"class.absl::optional_internal::optional_data.15" = type { %"class.absl::optional_internal::optional_data_base.16" }
%"class.absl::optional_internal::optional_data_base.16" = type { %"class.absl::optional_internal::optional_data_dtor_base.17" }
%"class.absl::optional_internal::optional_data_dtor_base.17" = type { i8, %union.anon.18 }
%union.anon.18 = type { %class.GURL }
%class.GURL = type { %"class.std::__1::basic_string", i8, %"struct.url::Parsed", %"class.std::__1::unique_ptr.19" }
%"struct.url::Parsed" = type { %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", i8, %"struct.url::Parsed"* }
%"struct.url::Component" = type { i32, i32 }
%"class.std::__1::unique_ptr.19" = type { %"class.std::__1::__compressed_pair.20" }
%"class.std::__1::__compressed_pair.20" = type { %"struct.std::__1::__compressed_pair_elem.21" }
%"struct.std::__1::__compressed_pair_elem.21" = type { %class.GURL* }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.mojo::StructPtr.23"*, %"class.mojo::StructPtr.23"*, %"class.std::__1::__compressed_pair.79" }
%"class.mojo::StructPtr.23" = type { %"class.std::__1::unique_ptr.24" }
%"class.std::__1::unique_ptr.24" = type { %"class.std::__1::__compressed_pair.25" }
%"class.std::__1::__compressed_pair.25" = type { %"struct.std::__1::__compressed_pair_elem.26" }
%"struct.std::__1::__compressed_pair_elem.26" = type { %"class.device::mojom::UsbConfigurationInfo"* }
%"class.device::mojom::UsbConfigurationInfo" = type { i8, %"class.absl::optional", i8, i8, i8, %"class.std::__1::vector.27", %"class.std::__1::vector.45" }
%"class.std::__1::vector.27" = type { %"class.std::__1::__vector_base.28" }
%"class.std::__1::__vector_base.28" = type { %"class.mojo::StructPtr.29"*, %"class.mojo::StructPtr.29"*, %"class.std::__1::__compressed_pair.71" }
%"class.mojo::StructPtr.29" = type { %"class.std::__1::unique_ptr.30" }
%"class.std::__1::unique_ptr.30" = type { %"class.std::__1::__compressed_pair.31" }
%"class.std::__1::__compressed_pair.31" = type { %"struct.std::__1::__compressed_pair_elem.32" }
%"struct.std::__1::__compressed_pair_elem.32" = type { %"class.device::mojom::UsbInterfaceInfo"* }
%"class.device::mojom::UsbInterfaceInfo" = type { i8, i8, %"class.std::__1::vector.33" }
%"class.std::__1::vector.33" = type { %"class.std::__1::__vector_base.34" }
%"class.std::__1::__vector_base.34" = type { %"class.mojo::StructPtr.35"*, %"class.mojo::StructPtr.35"*, %"class.std::__1::__compressed_pair.63" }
%"class.mojo::StructPtr.35" = type { %"class.std::__1::unique_ptr.36" }
%"class.std::__1::unique_ptr.36" = type { %"class.std::__1::__compressed_pair.37" }
%"class.std::__1::__compressed_pair.37" = type { %"struct.std::__1::__compressed_pair_elem.38" }
%"struct.std::__1::__compressed_pair_elem.38" = type { %"class.device::mojom::UsbAlternateInterfaceInfo"* }
%"class.device::mojom::UsbAlternateInterfaceInfo" = type { i8, i8, i8, i8, %"class.absl::optional", %"class.std::__1::vector.39", %"class.std::__1::vector.45" }
%"class.std::__1::vector.39" = type { %"class.std::__1::__vector_base.40" }
%"class.std::__1::__vector_base.40" = type { %"class.mojo::StructPtr.41"*, %"class.mojo::StructPtr.41"*, %"class.std::__1::__compressed_pair.55" }
%"class.mojo::StructPtr.41" = type { %"class.std::__1::unique_ptr.42" }
%"class.std::__1::unique_ptr.42" = type { %"class.std::__1::__compressed_pair.43" }
%"class.std::__1::__compressed_pair.43" = type { %"struct.std::__1::__compressed_pair_elem.44" }
%"struct.std::__1::__compressed_pair_elem.44" = type { %"class.device::mojom::UsbEndpointInfo"* }
%"class.device::mojom::UsbEndpointInfo" = type { i8, i32, i32, i32, i32, i32, i8, %"class.std::__1::vector.45" }
%"class.std::__1::__compressed_pair.55" = type { %"struct.std::__1::__compressed_pair_elem.56" }
%"struct.std::__1::__compressed_pair_elem.56" = type { %"class.mojo::StructPtr.41"* }
%"class.std::__1::__compressed_pair.63" = type { %"struct.std::__1::__compressed_pair_elem.64" }
%"struct.std::__1::__compressed_pair_elem.64" = type { %"class.mojo::StructPtr.35"* }
%"class.std::__1::__compressed_pair.71" = type { %"struct.std::__1::__compressed_pair_elem.72" }
%"struct.std::__1::__compressed_pair_elem.72" = type { %"class.mojo::StructPtr.29"* }
%"class.std::__1::vector.45" = type { %"class.std::__1::__vector_base.46" }
%"class.std::__1::__vector_base.46" = type { i8*, i8*, %"class.std::__1::__compressed_pair.47" }
%"class.std::__1::__compressed_pair.47" = type { %"struct.std::__1::__compressed_pair_elem.48" }
%"struct.std::__1::__compressed_pair_elem.48" = type { i8* }
%"class.std::__1::__compressed_pair.79" = type { %"struct.std::__1::__compressed_pair_elem.80" }
%"struct.std::__1::__compressed_pair_elem.80" = type { %"class.mojo::StructPtr.23"* }
%"class.std::__1::list" = type { %"class.std::__1::__list_imp" }
%"class.std::__1::__list_imp" = type { %"struct.std::__1::__list_node_base", %"class.std::__1::__compressed_pair.87" }
%"struct.std::__1::__list_node_base" = type { %"struct.std::__1::__list_node_base"*, %"struct.std::__1::__list_node_base"* }
%"class.std::__1::__compressed_pair.87" = type { %"struct.std::__1::__compressed_pair_elem.88" }
%"struct.std::__1::__compressed_pair_elem.88" = type { i64 }
%"class.base::ObserverList" = type <{ %"class.std::__1::vector.92", %"class.base::LinkedList", i64, i32, [4 x i8] }>
%"class.std::__1::vector.92" = type { %"class.std::__1::__vector_base.93" }
%"class.std::__1::__vector_base.93" = type { %"class.base::internal::UncheckedObserverAdapter"*, %"class.base::internal::UncheckedObserverAdapter"*, %"class.std::__1::__compressed_pair.94" }
%"class.base::internal::UncheckedObserverAdapter" = type { i8* }
%"class.std::__1::__compressed_pair.94" = type { %"struct.std::__1::__compressed_pair_elem.95" }
%"struct.std::__1::__compressed_pair_elem.95" = type { %"class.base::internal::UncheckedObserverAdapter"* }
%"class.base::LinkedList" = type { %"class.base::LinkNode" }
%"class.base::LinkNode" = type { %"class.base::internal::LinkNodeBase" }
%"class.base::internal::LinkNodeBase" = type { %"class.base::internal::LinkNodeBase"*, %"class.base::internal::LinkNodeBase"* }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short" = type { [11 x i16], %struct.anon.9 }
%struct.anon.9 = type { %"struct.std::__1::__padding.10", i8 }
%"struct.std::__1::__padding.10" = type { [1 x i8] }
%"class.std::__1::__basic_string_common" = type { i8 }
%"class.base::OnceCallback" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr.99 }
%class.scoped_refptr.99 = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe.100", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe.100" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.base::ObserverList<device::UsbDevice::Observer, true, true, base::internal::UncheckedObserverAdapter>::Iter" = type { %"class.base::internal::WeakLinkNode", i64, i64 }
%"class.base::internal::WeakLinkNode" = type { %"class.base::LinkNode", %"class.base::ObserverList"* }
%"struct.std::__1::__list_node" = type { %"struct.std::__1::__list_node_base", %"class.device::UsbDeviceHandle"* }
%"class.device::UsbDeviceHandle" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.101", [4 x i8] }>
%"class.base::RefCountedThreadSafe.101" = type { %"class.base::subtle::RefCountedThreadSafeBase" }

$_ZNSt3__14listIPN6device15UsbDeviceHandleENS_9allocatorIS3_EEE6removeERKS3_ = comdat any

$_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEEaSERKS5_ = comdat any

$_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEE21__grow_by_and_replaceEmmmmmmPKDs = comdat any

@_ZTVN6device9UsbDeviceE = hidden unnamed_addr constant { [8 x i8*] } { [8 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.device::UsbDevice"*, %"class.base::OnceCallback"*)* @_ZN6device9UsbDevice14CheckUsbAccessEN4base12OnceCallbackIFvbEEE to i8*), i8* bitcast (void (%"class.device::UsbDevice"*, %"class.base::OnceCallback"*)* @_ZN6device9UsbDevice17RequestPermissionEN4base12OnceCallbackIFvbEEE to i8*), i8* bitcast (i1 (%"class.device::UsbDevice"*)* @_ZNK6device9UsbDevice18permission_grantedEv to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void (%"class.device::UsbDevice"*)* @_ZN6device9UsbDeviceD2Ev to i8*), i8* bitcast (void (%"class.device::UsbDevice"*)* @_ZN6device9UsbDeviceD0Ev to i8*)] }, align 8
@_ZTVN6device9UsbDevice8ObserverE = hidden unnamed_addr constant { [5 x i8*] } { [5 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.device::UsbDevice::Observer"*)* @_ZN6device9UsbDevice8ObserverD2Ev to i8*), i8* bitcast (void (%"class.device::UsbDevice::Observer"*)* @_ZN6device9UsbDevice8ObserverD0Ev to i8*), i8* bitcast (void (%"class.device::UsbDevice::Observer"*, %"class.device::UsbDevice"*)* @_ZN6device9UsbDevice8Observer15OnDeviceRemovedE13scoped_refptrIS0_E to i8*)] }, align 8

@_ZN6device9UsbDevice8ObserverD1Ev = hidden unnamed_addr alias void (%"class.device::UsbDevice::Observer"*), void (%"class.device::UsbDevice::Observer"*)* @_ZN6device9UsbDevice8ObserverD2Ev
@_ZN6device9UsbDeviceD1Ev = hidden unnamed_addr alias void (%"class.device::UsbDevice"*), void (%"class.device::UsbDevice"*)* @_ZN6device9UsbDeviceD2Ev

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN6device9UsbDevice8ObserverD2Ev(%"class.device::UsbDevice::Observer"* nocapture) unnamed_addr #0 align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6device9UsbDevice8ObserverD0Ev(%"class.device::UsbDevice::Observer"*) unnamed_addr #1 align 2 {
  %2 = bitcast %"class.device::UsbDevice::Observer"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #13
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6device9UsbDevice8Observer15OnDeviceRemovedE13scoped_refptrIS0_E(%"class.device::UsbDevice::Observer"* nocapture readnone, %"class.device::UsbDevice"*) unnamed_addr #1 align 2 {
  %3 = icmp eq %"class.device::UsbDevice"* %1, null
  br i1 %3, label %16, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.device::UsbDevice", %"class.device::UsbDevice"* %1, i64 0, i32 1
  %6 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %7 = atomicrmw sub i32* %6, i32 1 acq_rel
  %8 = icmp eq i32 %7, 1
  br i1 %8, label %9, label %16

9:                                                ; preds = %4
  %10 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %5, i64 -2
  %11 = bitcast %"class.base::RefCountedThreadSafe"* %10 to %"class.device::UsbDevice"*
  %12 = bitcast %"class.base::RefCountedThreadSafe"* %10 to void (%"class.device::UsbDevice"*)***
  %13 = load void (%"class.device::UsbDevice"*)**, void (%"class.device::UsbDevice"*)*** %12, align 8
  %14 = getelementptr inbounds void (%"class.device::UsbDevice"*)*, void (%"class.device::UsbDevice"*)** %13, i64 5
  %15 = load void (%"class.device::UsbDevice"*)*, void (%"class.device::UsbDevice"*)** %14, align 8
  tail call void %15(%"class.device::UsbDevice"* nonnull %11) #14
  br label %16

16:                                               ; preds = %2, %4, %9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6device9UsbDeviceC2Ejj(%"class.device::UsbDevice"*, i32, i32) unnamed_addr #1 align 2 {
  %4 = alloca %"class.std::__1::basic_string", align 8
  %5 = getelementptr inbounds %"class.device::UsbDevice", %"class.device::UsbDevice"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 0, i32* %5, align 4
  %6 = getelementptr inbounds %"class.device::UsbDevice", %"class.device::UsbDevice"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*] }, { [8 x i8*] }* @_ZTVN6device9UsbDeviceE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %6, align 8
  %7 = getelementptr inbounds %"class.device::UsbDevice", %"class.device::UsbDevice"* %0, i64 0, i32 2
  %8 = bitcast %"class.mojo::StructPtr"* %7 to i64*
  store i64 0, i64* %8, align 8
  %9 = getelementptr inbounds %"class.device::UsbDevice", %"class.device::UsbDevice"* %0, i64 0, i32 3
  %10 = getelementptr inbounds %"class.std::__1::list", %"class.std::__1::list"* %9, i64 0, i32 0, i32 0
  %11 = getelementptr inbounds %"class.std::__1::list", %"class.std::__1::list"* %9, i64 0, i32 0, i32 0, i32 0
  store %"struct.std::__1::__list_node_base"* %10, %"struct.std::__1::__list_node_base"** %11, align 8
  %12 = getelementptr inbounds %"class.device::UsbDevice", %"class.device::UsbDevice"* %0, i64 0, i32 3, i32 0, i32 0, i32 1
  store %"struct.std::__1::__list_node_base"* %10, %"struct.std::__1::__list_node_base"** %12, align 8
  %13 = getelementptr inbounds %"class.device::UsbDevice", %"class.device::UsbDevice"* %0, i64 0, i32 3, i32 0, i32 1, i32 0, i32 0
  %14 = getelementptr inbounds %"class.device::UsbDevice", %"class.device::UsbDevice"* %0, i64 0, i32 4, i32 1, i32 0, i32 0
  %15 = bitcast i64* %13 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %15, i8 0, i64 32, i1 false)
  tail call void @_ZN4base8internal12LinkNodeBaseC2EPS1_S2_(%"class.base::internal::LinkNodeBase"* %14, %"class.base::internal::LinkNodeBase"* %14, %"class.base::internal::LinkNodeBase"* %14) #14
  %16 = getelementptr inbounds %"class.device::UsbDevice", %"class.device::UsbDevice"* %0, i64 0, i32 4, i32 2
  store i64 0, i64* %16, align 8
  %17 = getelementptr inbounds %"class.device::UsbDevice", %"class.device::UsbDevice"* %0, i64 0, i32 4, i32 3
  store i32 0, i32* %17, align 8
  %18 = tail call i8* @_Znwm(i64 304) #13, !noalias !2
  %19 = bitcast i8* %18 to %"class.device::mojom::UsbDeviceInfo"*
  tail call void @_ZN6device5mojom13UsbDeviceInfoC1Ev(%"class.device::mojom::UsbDeviceInfo"* nonnull %19) #14, !noalias !2
  %20 = ptrtoint i8* %18 to i64
  %21 = getelementptr inbounds %"class.mojo::StructPtr", %"class.mojo::StructPtr"* %7, i64 0, i32 0, i32 0, i32 0, i32 0
  %22 = load %"class.device::mojom::UsbDeviceInfo"*, %"class.device::mojom::UsbDeviceInfo"** %21, align 8
  store %"class.device::mojom::UsbDeviceInfo"* null, %"class.device::mojom::UsbDeviceInfo"** %21, align 8
  %23 = icmp eq %"class.device::mojom::UsbDeviceInfo"* %22, null
  br i1 %23, label %24, label %25

24:                                               ; preds = %3
  store i64 %20, i64* %8, align 8
  br label %31

25:                                               ; preds = %3
  tail call void @_ZN6device5mojom13UsbDeviceInfoD1Ev(%"class.device::mojom::UsbDeviceInfo"* nonnull %22) #14
  %26 = bitcast %"class.device::mojom::UsbDeviceInfo"* %22 to i8*
  tail call void @_ZdlPv(i8* %26) #13
  %27 = load %"class.device::mojom::UsbDeviceInfo"*, %"class.device::mojom::UsbDeviceInfo"** %21, align 8
  store i64 %20, i64* %8, align 8
  %28 = icmp eq %"class.device::mojom::UsbDeviceInfo"* %27, null
  br i1 %28, label %31, label %29

29:                                               ; preds = %25
  tail call void @_ZN6device5mojom13UsbDeviceInfoD1Ev(%"class.device::mojom::UsbDeviceInfo"* nonnull %27) #14
  %30 = bitcast %"class.device::mojom::UsbDeviceInfo"* %27 to i8*
  tail call void @_ZdlPv(i8* %30) #13
  br label %31

31:                                               ; preds = %24, %25, %29
  %32 = bitcast %"class.std::__1::basic_string"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %32) #14
  call void @_ZN4base12GenerateGUIDEv(%"class.std::__1::basic_string"* nonnull sret %4) #14
  %33 = load %"class.device::mojom::UsbDeviceInfo"*, %"class.device::mojom::UsbDeviceInfo"** %21, align 8
  %34 = bitcast %"class.device::mojom::UsbDeviceInfo"* %33 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %35 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %34, i64 0, i32 1, i32 0
  %36 = load i8, i8* %35, align 1
  %37 = icmp slt i8 %36, 0
  br i1 %37, label %38, label %41

38:                                               ; preds = %31
  %39 = getelementptr inbounds %"class.device::mojom::UsbDeviceInfo", %"class.device::mojom::UsbDeviceInfo"* %33, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %40 = load i8*, i8** %39, align 8
  call void @_ZdlPv(i8* %40) #13
  br label %41

41:                                               ; preds = %38, %31
  %42 = bitcast %"class.device::mojom::UsbDeviceInfo"* %33 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %42, i8* nonnull align 8 %32, i64 24, i1 false) #14
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %32) #14
  %43 = load %"class.device::mojom::UsbDeviceInfo"*, %"class.device::mojom::UsbDeviceInfo"** %21, align 8
  %44 = getelementptr inbounds %"class.device::mojom::UsbDeviceInfo", %"class.device::mojom::UsbDeviceInfo"* %43, i64 0, i32 7
  store i32 %1, i32* %44, align 8
  %45 = load %"class.device::mojom::UsbDeviceInfo"*, %"class.device::mojom::UsbDeviceInfo"** %21, align 8
  %46 = getelementptr inbounds %"class.device::mojom::UsbDeviceInfo", %"class.device::mojom::UsbDeviceInfo"* %45, i64 0, i32 8
  store i32 %2, i32* %46, align 4
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

declare void @_ZN4base12GenerateGUIDEv(%"class.std::__1::basic_string"* sret) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6device9UsbDeviceC2EN4mojo9StructPtrINS_5mojom13UsbDeviceInfoEEE(%"class.device::UsbDevice"*, %"class.mojo::StructPtr"* nocapture) unnamed_addr #1 align 2 {
  %3 = alloca %"class.std::__1::basic_string", align 8
  %4 = getelementptr inbounds %"class.device::UsbDevice", %"class.device::UsbDevice"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 0, i32* %4, align 4
  %5 = getelementptr inbounds %"class.device::UsbDevice", %"class.device::UsbDevice"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*] }, { [8 x i8*] }* @_ZTVN6device9UsbDeviceE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  %6 = getelementptr inbounds %"class.device::UsbDevice", %"class.device::UsbDevice"* %0, i64 0, i32 2
  %7 = bitcast %"class.mojo::StructPtr"* %6 to i64*
  %8 = getelementptr inbounds %"class.mojo::StructPtr", %"class.mojo::StructPtr"* %6, i64 0, i32 0, i32 0, i32 0, i32 0
  store %"class.device::mojom::UsbDeviceInfo"* null, %"class.device::mojom::UsbDeviceInfo"** %8, align 8
  %9 = bitcast %"class.mojo::StructPtr"* %1 to i64*
  %10 = load i64, i64* %9, align 8
  store i64 %10, i64* %7, align 8
  store i64 0, i64* %9, align 8
  %11 = getelementptr inbounds %"class.device::UsbDevice", %"class.device::UsbDevice"* %0, i64 0, i32 3
  %12 = getelementptr inbounds %"class.std::__1::list", %"class.std::__1::list"* %11, i64 0, i32 0, i32 0
  %13 = getelementptr inbounds %"class.std::__1::list", %"class.std::__1::list"* %11, i64 0, i32 0, i32 0, i32 0
  store %"struct.std::__1::__list_node_base"* %12, %"struct.std::__1::__list_node_base"** %13, align 8
  %14 = getelementptr inbounds %"class.device::UsbDevice", %"class.device::UsbDevice"* %0, i64 0, i32 3, i32 0, i32 0, i32 1
  store %"struct.std::__1::__list_node_base"* %12, %"struct.std::__1::__list_node_base"** %14, align 8
  %15 = getelementptr inbounds %"class.device::UsbDevice", %"class.device::UsbDevice"* %0, i64 0, i32 3, i32 0, i32 1, i32 0, i32 0
  %16 = getelementptr inbounds %"class.device::UsbDevice", %"class.device::UsbDevice"* %0, i64 0, i32 4, i32 1, i32 0, i32 0
  %17 = bitcast i64* %15 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %17, i8 0, i64 32, i1 false)
  tail call void @_ZN4base8internal12LinkNodeBaseC2EPS1_S2_(%"class.base::internal::LinkNodeBase"* %16, %"class.base::internal::LinkNodeBase"* %16, %"class.base::internal::LinkNodeBase"* %16) #14
  %18 = getelementptr inbounds %"class.device::UsbDevice", %"class.device::UsbDevice"* %0, i64 0, i32 4, i32 2
  store i64 0, i64* %18, align 8
  %19 = getelementptr inbounds %"class.device::UsbDevice", %"class.device::UsbDevice"* %0, i64 0, i32 4, i32 3
  store i32 0, i32* %19, align 8
  %20 = bitcast %"class.std::__1::basic_string"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %20) #14
  call void @_ZN4base12GenerateGUIDEv(%"class.std::__1::basic_string"* nonnull sret %3) #14
  %21 = load %"class.device::mojom::UsbDeviceInfo"*, %"class.device::mojom::UsbDeviceInfo"** %8, align 8
  %22 = bitcast %"class.device::mojom::UsbDeviceInfo"* %21 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %23 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %22, i64 0, i32 1, i32 0
  %24 = load i8, i8* %23, align 1
  %25 = icmp slt i8 %24, 0
  br i1 %25, label %26, label %29

26:                                               ; preds = %2
  %27 = getelementptr inbounds %"class.device::mojom::UsbDeviceInfo", %"class.device::mojom::UsbDeviceInfo"* %21, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %28 = load i8*, i8** %27, align 8
  call void @_ZdlPv(i8* %28) #13
  br label %29

29:                                               ; preds = %26, %2
  %30 = bitcast %"class.device::mojom::UsbDeviceInfo"* %21 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %30, i8* nonnull align 8 %20, i64 24, i1 false) #14
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %20) #14
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN6device9UsbDevice26ActiveConfigurationChangedEi(%"class.device::UsbDevice"* nocapture readonly, i32) local_unnamed_addr #5 align 2 {
  %3 = trunc i32 %1 to i8
  %4 = getelementptr inbounds %"class.device::UsbDevice", %"class.device::UsbDevice"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0
  %5 = load %"class.device::mojom::UsbDeviceInfo"*, %"class.device::mojom::UsbDeviceInfo"** %4, align 8
  %6 = getelementptr inbounds %"class.device::mojom::UsbDeviceInfo", %"class.device::mojom::UsbDeviceInfo"* %5, i64 0, i32 18
  store i8 %3, i8* %6, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6device9UsbDeviceC2EthhhtttRKNSt3__112basic_stringIDsNS1_11char_traitsIDsEENS1_9allocatorIDsEEEES9_S9_jj(%"class.device::UsbDevice"*, i16 zeroext, i8 zeroext, i8 zeroext, i8 zeroext, i16 zeroext, i16 zeroext, i16 zeroext, %"class.std::__1::basic_string.5"* dereferenceable(24), %"class.std::__1::basic_string.5"* dereferenceable(24), %"class.std::__1::basic_string.5"* dereferenceable(24), i32, i32) unnamed_addr #1 align 2 {
  %14 = alloca %"class.std::__1::basic_string", align 8
  %15 = getelementptr inbounds %"class.device::UsbDevice", %"class.device::UsbDevice"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 0, i32* %15, align 4
  %16 = getelementptr inbounds %"class.device::UsbDevice", %"class.device::UsbDevice"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*] }, { [8 x i8*] }* @_ZTVN6device9UsbDeviceE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %16, align 8
  %17 = getelementptr inbounds %"class.device::UsbDevice", %"class.device::UsbDevice"* %0, i64 0, i32 2
  %18 = bitcast %"class.mojo::StructPtr"* %17 to i64*
  store i64 0, i64* %18, align 8
  %19 = getelementptr inbounds %"class.device::UsbDevice", %"class.device::UsbDevice"* %0, i64 0, i32 3
  %20 = getelementptr inbounds %"class.std::__1::list", %"class.std::__1::list"* %19, i64 0, i32 0, i32 0
  %21 = getelementptr inbounds %"class.std::__1::list", %"class.std::__1::list"* %19, i64 0, i32 0, i32 0, i32 0
  store %"struct.std::__1::__list_node_base"* %20, %"struct.std::__1::__list_node_base"** %21, align 8
  %22 = getelementptr inbounds %"class.device::UsbDevice", %"class.device::UsbDevice"* %0, i64 0, i32 3, i32 0, i32 0, i32 1
  store %"struct.std::__1::__list_node_base"* %20, %"struct.std::__1::__list_node_base"** %22, align 8
  %23 = getelementptr inbounds %"class.device::UsbDevice", %"class.device::UsbDevice"* %0, i64 0, i32 3, i32 0, i32 1, i32 0, i32 0
  %24 = getelementptr inbounds %"class.device::UsbDevice", %"class.device::UsbDevice"* %0, i64 0, i32 4, i32 1, i32 0, i32 0
  %25 = bitcast i64* %23 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %25, i8 0, i64 32, i1 false)
  tail call void @_ZN4base8internal12LinkNodeBaseC2EPS1_S2_(%"class.base::internal::LinkNodeBase"* %24, %"class.base::internal::LinkNodeBase"* %24, %"class.base::internal::LinkNodeBase"* %24) #14
  %26 = getelementptr inbounds %"class.device::UsbDevice", %"class.device::UsbDevice"* %0, i64 0, i32 4, i32 2
  store i64 0, i64* %26, align 8
  %27 = getelementptr inbounds %"class.device::UsbDevice", %"class.device::UsbDevice"* %0, i64 0, i32 4, i32 3
  store i32 0, i32* %27, align 8
  %28 = tail call i8* @_Znwm(i64 304) #13, !noalias !5
  %29 = bitcast i8* %28 to %"class.device::mojom::UsbDeviceInfo"*
  tail call void @_ZN6device5mojom13UsbDeviceInfoC1Ev(%"class.device::mojom::UsbDeviceInfo"* nonnull %29) #14, !noalias !5
  %30 = ptrtoint i8* %28 to i64
  %31 = getelementptr inbounds %"class.mojo::StructPtr", %"class.mojo::StructPtr"* %17, i64 0, i32 0, i32 0, i32 0, i32 0
  %32 = load %"class.device::mojom::UsbDeviceInfo"*, %"class.device::mojom::UsbDeviceInfo"** %31, align 8
  store %"class.device::mojom::UsbDeviceInfo"* null, %"class.device::mojom::UsbDeviceInfo"** %31, align 8
  %33 = icmp eq %"class.device::mojom::UsbDeviceInfo"* %32, null
  br i1 %33, label %34, label %35

34:                                               ; preds = %13
  store i64 %30, i64* %18, align 8
  br label %41

35:                                               ; preds = %13
  tail call void @_ZN6device5mojom13UsbDeviceInfoD1Ev(%"class.device::mojom::UsbDeviceInfo"* nonnull %32) #14
  %36 = bitcast %"class.device::mojom::UsbDeviceInfo"* %32 to i8*
  tail call void @_ZdlPv(i8* %36) #13
  %37 = load %"class.device::mojom::UsbDeviceInfo"*, %"class.device::mojom::UsbDeviceInfo"** %31, align 8
  store i64 %30, i64* %18, align 8
  %38 = icmp eq %"class.device::mojom::UsbDeviceInfo"* %37, null
  br i1 %38, label %41, label %39

39:                                               ; preds = %35
  tail call void @_ZN6device5mojom13UsbDeviceInfoD1Ev(%"class.device::mojom::UsbDeviceInfo"* nonnull %37) #14
  %40 = bitcast %"class.device::mojom::UsbDeviceInfo"* %37 to i8*
  tail call void @_ZdlPv(i8* %40) #13
  br label %41

41:                                               ; preds = %34, %35, %39
  %42 = bitcast %"class.std::__1::basic_string"* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %42) #14
  call void @_ZN4base12GenerateGUIDEv(%"class.std::__1::basic_string"* nonnull sret %14) #14
  %43 = load %"class.device::mojom::UsbDeviceInfo"*, %"class.device::mojom::UsbDeviceInfo"** %31, align 8
  %44 = bitcast %"class.device::mojom::UsbDeviceInfo"* %43 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %45 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %44, i64 0, i32 1, i32 0
  %46 = load i8, i8* %45, align 1
  %47 = icmp slt i8 %46, 0
  br i1 %47, label %48, label %51

48:                                               ; preds = %41
  %49 = getelementptr inbounds %"class.device::mojom::UsbDeviceInfo", %"class.device::mojom::UsbDeviceInfo"* %43, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %50 = load i8*, i8** %49, align 8
  call void @_ZdlPv(i8* %50) #13
  br label %51

51:                                               ; preds = %48, %41
  %52 = bitcast %"class.device::mojom::UsbDeviceInfo"* %43 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %52, i8* nonnull align 8 %42, i64 24, i1 false) #14
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %42) #14
  %53 = lshr i16 %1, 8
  %54 = trunc i16 %53 to i8
  %55 = load %"class.device::mojom::UsbDeviceInfo"*, %"class.device::mojom::UsbDeviceInfo"** %31, align 8
  %56 = getelementptr inbounds %"class.device::mojom::UsbDeviceInfo", %"class.device::mojom::UsbDeviceInfo"* %55, i64 0, i32 1
  store i8 %54, i8* %56, align 8
  %57 = lshr i16 %1, 4
  %58 = trunc i16 %57 to i8
  %59 = and i8 %58, 15
  %60 = load %"class.device::mojom::UsbDeviceInfo"*, %"class.device::mojom::UsbDeviceInfo"** %31, align 8
  %61 = getelementptr inbounds %"class.device::mojom::UsbDeviceInfo", %"class.device::mojom::UsbDeviceInfo"* %60, i64 0, i32 2
  store i8 %59, i8* %61, align 1
  %62 = trunc i16 %1 to i8
  %63 = and i8 %62, 15
  %64 = load %"class.device::mojom::UsbDeviceInfo"*, %"class.device::mojom::UsbDeviceInfo"** %31, align 8
  %65 = getelementptr inbounds %"class.device::mojom::UsbDeviceInfo", %"class.device::mojom::UsbDeviceInfo"* %64, i64 0, i32 3
  store i8 %63, i8* %65, align 2
  %66 = load %"class.device::mojom::UsbDeviceInfo"*, %"class.device::mojom::UsbDeviceInfo"** %31, align 8
  %67 = getelementptr inbounds %"class.device::mojom::UsbDeviceInfo", %"class.device::mojom::UsbDeviceInfo"* %66, i64 0, i32 4
  store i8 %2, i8* %67, align 1
  %68 = load %"class.device::mojom::UsbDeviceInfo"*, %"class.device::mojom::UsbDeviceInfo"** %31, align 8
  %69 = getelementptr inbounds %"class.device::mojom::UsbDeviceInfo", %"class.device::mojom::UsbDeviceInfo"* %68, i64 0, i32 5
  store i8 %3, i8* %69, align 4
  %70 = load %"class.device::mojom::UsbDeviceInfo"*, %"class.device::mojom::UsbDeviceInfo"** %31, align 8
  %71 = getelementptr inbounds %"class.device::mojom::UsbDeviceInfo", %"class.device::mojom::UsbDeviceInfo"* %70, i64 0, i32 6
  store i8 %4, i8* %71, align 1
  %72 = load %"class.device::mojom::UsbDeviceInfo"*, %"class.device::mojom::UsbDeviceInfo"** %31, align 8
  %73 = getelementptr inbounds %"class.device::mojom::UsbDeviceInfo", %"class.device::mojom::UsbDeviceInfo"* %72, i64 0, i32 9
  store i16 %5, i16* %73, align 8
  %74 = load %"class.device::mojom::UsbDeviceInfo"*, %"class.device::mojom::UsbDeviceInfo"** %31, align 8
  %75 = getelementptr inbounds %"class.device::mojom::UsbDeviceInfo", %"class.device::mojom::UsbDeviceInfo"* %74, i64 0, i32 10
  store i16 %6, i16* %75, align 2
  %76 = lshr i16 %7, 8
  %77 = trunc i16 %76 to i8
  %78 = load %"class.device::mojom::UsbDeviceInfo"*, %"class.device::mojom::UsbDeviceInfo"** %31, align 8
  %79 = getelementptr inbounds %"class.device::mojom::UsbDeviceInfo", %"class.device::mojom::UsbDeviceInfo"* %78, i64 0, i32 11
  store i8 %77, i8* %79, align 4
  %80 = lshr i16 %7, 4
  %81 = trunc i16 %80 to i8
  %82 = and i8 %81, 15
  %83 = load %"class.device::mojom::UsbDeviceInfo"*, %"class.device::mojom::UsbDeviceInfo"** %31, align 8
  %84 = getelementptr inbounds %"class.device::mojom::UsbDeviceInfo", %"class.device::mojom::UsbDeviceInfo"* %83, i64 0, i32 12
  store i8 %82, i8* %84, align 1
  %85 = trunc i16 %7 to i8
  %86 = and i8 %85, 15
  %87 = load %"class.device::mojom::UsbDeviceInfo"*, %"class.device::mojom::UsbDeviceInfo"** %31, align 8
  %88 = getelementptr inbounds %"class.device::mojom::UsbDeviceInfo", %"class.device::mojom::UsbDeviceInfo"* %87, i64 0, i32 13
  store i8 %86, i8* %88, align 2
  %89 = load %"class.device::mojom::UsbDeviceInfo"*, %"class.device::mojom::UsbDeviceInfo"** %31, align 8
  %90 = getelementptr inbounds %"class.device::mojom::UsbDeviceInfo", %"class.device::mojom::UsbDeviceInfo"* %89, i64 0, i32 14, i32 0, i32 0, i32 0, i32 0
  %91 = load i8, i8* %90, align 8, !range !8
  %92 = icmp eq i8 %91, 0
  %93 = getelementptr inbounds %"class.device::mojom::UsbDeviceInfo", %"class.device::mojom::UsbDeviceInfo"* %89, i64 0, i32 14, i32 0, i32 0, i32 0, i32 1, i32 0
  br i1 %92, label %96, label %94

94:                                               ; preds = %51
  %95 = call dereferenceable(24) %"class.std::__1::basic_string.5"* @_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEEaSERKS5_(%"class.std::__1::basic_string.5"* %93, %"class.std::__1::basic_string.5"* dereferenceable(24) %8) #14
  br label %280

96:                                               ; preds = %51
  %97 = bitcast %"class.std::__1::basic_string.5"* %8 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %98 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %97, i64 0, i32 1, i32 1
  %99 = load i8, i8* %98, align 1
  %100 = icmp slt i8 %99, 0
  br i1 %100, label %104, label %101

101:                                              ; preds = %96
  %102 = bitcast %"class.std::__1::basic_string.5"* %93 to i8*
  %103 = bitcast %"class.std::__1::basic_string.5"* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %102, i8* align 8 %103, i64 24, i1 false) #14
  br label %279

104:                                              ; preds = %96
  %105 = getelementptr inbounds %"class.std::__1::basic_string.5", %"class.std::__1::basic_string.5"* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %106 = load i16*, i16** %105, align 8
  %107 = getelementptr inbounds %"class.std::__1::basic_string.5", %"class.std::__1::basic_string.5"* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %108 = load i64, i64* %107, align 8
  %109 = icmp ult i64 %108, 11
  br i1 %109, label %110, label %115

110:                                              ; preds = %104
  %111 = bitcast %"class.std::__1::basic_string.5"* %93 to i16*
  %112 = trunc i64 %108 to i8
  %113 = bitcast %"class.std::__1::basic_string.5"* %93 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %114 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %113, i64 0, i32 1, i32 1
  store i8 %112, i8* %114, align 1
  br label %132

115:                                              ; preds = %104
  %116 = icmp ugt i64 %108, 9223372036854775791
  br i1 %116, label %117, label %119

117:                                              ; preds = %115
  %118 = bitcast %"class.std::__1::basic_string.5"* %93 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* %118) #15
  unreachable

119:                                              ; preds = %115
  %120 = add nuw nsw i64 %108, 8
  %121 = and i64 %120, -8
  %122 = icmp slt i64 %121, 0
  br i1 %122, label %123, label %124

123:                                              ; preds = %119
  call void @abort() #15
  unreachable

124:                                              ; preds = %119
  %125 = shl i64 %121, 1
  %126 = call i8* @_Znwm(i64 %125) #13
  %127 = bitcast i8* %126 to i16*
  %128 = bitcast %"class.std::__1::basic_string.5"* %93 to i8**
  store i8* %126, i8** %128, align 8
  %129 = or i64 %121, -9223372036854775808
  %130 = getelementptr inbounds %"class.device::mojom::UsbDeviceInfo", %"class.device::mojom::UsbDeviceInfo"* %89, i64 0, i32 14, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %129, i64* %130, align 8
  %131 = getelementptr inbounds %"class.device::mojom::UsbDeviceInfo", %"class.device::mojom::UsbDeviceInfo"* %89, i64 0, i32 14, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %108, i64* %131, align 8
  br label %132

132:                                              ; preds = %124, %110
  %133 = phi i16* [ %111, %110 ], [ %127, %124 ]
  %134 = add nuw nsw i64 %108, 1
  %135 = add i64 %108, 1
  %136 = icmp ult i64 %135, 16
  br i1 %136, label %226, label %137

137:                                              ; preds = %132
  %138 = add i64 %108, 1
  %139 = getelementptr i16, i16* %133, i64 %138
  %140 = getelementptr i16, i16* %106, i64 %138
  %141 = icmp ult i16* %133, %140
  %142 = icmp ult i16* %106, %139
  %143 = and i1 %141, %142
  br i1 %143, label %226, label %144

144:                                              ; preds = %137
  %145 = and i64 %135, -16
  %146 = sub i64 %134, %145
  %147 = getelementptr i16, i16* %106, i64 %145
  %148 = getelementptr i16, i16* %133, i64 %145
  %149 = add i64 %145, -16
  %150 = lshr exact i64 %149, 4
  %151 = add nuw nsw i64 %150, 1
  %152 = and i64 %151, 3
  %153 = icmp ult i64 %149, 48
  br i1 %153, label %205, label %154

154:                                              ; preds = %144
  %155 = sub nsw i64 %151, %152
  br label %156

156:                                              ; preds = %156, %154
  %157 = phi i64 [ 0, %154 ], [ %202, %156 ]
  %158 = phi i64 [ %155, %154 ], [ %203, %156 ]
  %159 = getelementptr i16, i16* %106, i64 %157
  %160 = getelementptr i16, i16* %133, i64 %157
  %161 = bitcast i16* %159 to <8 x i16>*
  %162 = load <8 x i16>, <8 x i16>* %161, align 2, !alias.scope !9
  %163 = getelementptr i16, i16* %159, i64 8
  %164 = bitcast i16* %163 to <8 x i16>*
  %165 = load <8 x i16>, <8 x i16>* %164, align 2, !alias.scope !9
  %166 = bitcast i16* %160 to <8 x i16>*
  store <8 x i16> %162, <8 x i16>* %166, align 2, !alias.scope !12, !noalias !9
  %167 = getelementptr i16, i16* %160, i64 8
  %168 = bitcast i16* %167 to <8 x i16>*
  store <8 x i16> %165, <8 x i16>* %168, align 2, !alias.scope !12, !noalias !9
  %169 = or i64 %157, 16
  %170 = getelementptr i16, i16* %106, i64 %169
  %171 = getelementptr i16, i16* %133, i64 %169
  %172 = bitcast i16* %170 to <8 x i16>*
  %173 = load <8 x i16>, <8 x i16>* %172, align 2, !alias.scope !9
  %174 = getelementptr i16, i16* %170, i64 8
  %175 = bitcast i16* %174 to <8 x i16>*
  %176 = load <8 x i16>, <8 x i16>* %175, align 2, !alias.scope !9
  %177 = bitcast i16* %171 to <8 x i16>*
  store <8 x i16> %173, <8 x i16>* %177, align 2, !alias.scope !12, !noalias !9
  %178 = getelementptr i16, i16* %171, i64 8
  %179 = bitcast i16* %178 to <8 x i16>*
  store <8 x i16> %176, <8 x i16>* %179, align 2, !alias.scope !12, !noalias !9
  %180 = or i64 %157, 32
  %181 = getelementptr i16, i16* %106, i64 %180
  %182 = getelementptr i16, i16* %133, i64 %180
  %183 = bitcast i16* %181 to <8 x i16>*
  %184 = load <8 x i16>, <8 x i16>* %183, align 2, !alias.scope !9
  %185 = getelementptr i16, i16* %181, i64 8
  %186 = bitcast i16* %185 to <8 x i16>*
  %187 = load <8 x i16>, <8 x i16>* %186, align 2, !alias.scope !9
  %188 = bitcast i16* %182 to <8 x i16>*
  store <8 x i16> %184, <8 x i16>* %188, align 2, !alias.scope !12, !noalias !9
  %189 = getelementptr i16, i16* %182, i64 8
  %190 = bitcast i16* %189 to <8 x i16>*
  store <8 x i16> %187, <8 x i16>* %190, align 2, !alias.scope !12, !noalias !9
  %191 = or i64 %157, 48
  %192 = getelementptr i16, i16* %106, i64 %191
  %193 = getelementptr i16, i16* %133, i64 %191
  %194 = bitcast i16* %192 to <8 x i16>*
  %195 = load <8 x i16>, <8 x i16>* %194, align 2, !alias.scope !9
  %196 = getelementptr i16, i16* %192, i64 8
  %197 = bitcast i16* %196 to <8 x i16>*
  %198 = load <8 x i16>, <8 x i16>* %197, align 2, !alias.scope !9
  %199 = bitcast i16* %193 to <8 x i16>*
  store <8 x i16> %195, <8 x i16>* %199, align 2, !alias.scope !12, !noalias !9
  %200 = getelementptr i16, i16* %193, i64 8
  %201 = bitcast i16* %200 to <8 x i16>*
  store <8 x i16> %198, <8 x i16>* %201, align 2, !alias.scope !12, !noalias !9
  %202 = add i64 %157, 64
  %203 = add i64 %158, -4
  %204 = icmp eq i64 %203, 0
  br i1 %204, label %205, label %156, !llvm.loop !14

205:                                              ; preds = %156, %144
  %206 = phi i64 [ 0, %144 ], [ %202, %156 ]
  %207 = icmp eq i64 %152, 0
  br i1 %207, label %224, label %208

208:                                              ; preds = %205, %208
  %209 = phi i64 [ %221, %208 ], [ %206, %205 ]
  %210 = phi i64 [ %222, %208 ], [ %152, %205 ]
  %211 = getelementptr i16, i16* %106, i64 %209
  %212 = getelementptr i16, i16* %133, i64 %209
  %213 = bitcast i16* %211 to <8 x i16>*
  %214 = load <8 x i16>, <8 x i16>* %213, align 2, !alias.scope !9
  %215 = getelementptr i16, i16* %211, i64 8
  %216 = bitcast i16* %215 to <8 x i16>*
  %217 = load <8 x i16>, <8 x i16>* %216, align 2, !alias.scope !9
  %218 = bitcast i16* %212 to <8 x i16>*
  store <8 x i16> %214, <8 x i16>* %218, align 2, !alias.scope !12, !noalias !9
  %219 = getelementptr i16, i16* %212, i64 8
  %220 = bitcast i16* %219 to <8 x i16>*
  store <8 x i16> %217, <8 x i16>* %220, align 2, !alias.scope !12, !noalias !9
  %221 = add i64 %209, 16
  %222 = add i64 %210, -1
  %223 = icmp eq i64 %222, 0
  br i1 %223, label %224, label %208, !llvm.loop !16

224:                                              ; preds = %208, %205
  %225 = icmp eq i64 %135, %145
  br i1 %225, label %279, label %226

226:                                              ; preds = %224, %137, %132
  %227 = phi i64 [ %134, %137 ], [ %134, %132 ], [ %146, %224 ]
  %228 = phi i16* [ %106, %137 ], [ %106, %132 ], [ %147, %224 ]
  %229 = phi i16* [ %133, %137 ], [ %133, %132 ], [ %148, %224 ]
  %230 = add i64 %227, -1
  %231 = and i64 %227, 7
  %232 = icmp eq i64 %231, 0
  br i1 %232, label %244, label %233

233:                                              ; preds = %226, %233
  %234 = phi i64 [ %239, %233 ], [ %227, %226 ]
  %235 = phi i16* [ %241, %233 ], [ %228, %226 ]
  %236 = phi i16* [ %240, %233 ], [ %229, %226 ]
  %237 = phi i64 [ %242, %233 ], [ %231, %226 ]
  %238 = load i16, i16* %235, align 2
  store i16 %238, i16* %236, align 2
  %239 = add i64 %234, -1
  %240 = getelementptr inbounds i16, i16* %236, i64 1
  %241 = getelementptr inbounds i16, i16* %235, i64 1
  %242 = add i64 %237, -1
  %243 = icmp eq i64 %242, 0
  br i1 %243, label %244, label %233, !llvm.loop !18

244:                                              ; preds = %233, %226
  %245 = phi i64 [ %227, %226 ], [ %239, %233 ]
  %246 = phi i16* [ %228, %226 ], [ %241, %233 ]
  %247 = phi i16* [ %229, %226 ], [ %240, %233 ]
  %248 = icmp ult i64 %230, 7
  br i1 %248, label %279, label %249

249:                                              ; preds = %244, %249
  %250 = phi i64 [ %275, %249 ], [ %245, %244 ]
  %251 = phi i16* [ %277, %249 ], [ %246, %244 ]
  %252 = phi i16* [ %276, %249 ], [ %247, %244 ]
  %253 = load i16, i16* %251, align 2
  store i16 %253, i16* %252, align 2
  %254 = getelementptr inbounds i16, i16* %252, i64 1
  %255 = getelementptr inbounds i16, i16* %251, i64 1
  %256 = load i16, i16* %255, align 2
  store i16 %256, i16* %254, align 2
  %257 = getelementptr inbounds i16, i16* %252, i64 2
  %258 = getelementptr inbounds i16, i16* %251, i64 2
  %259 = load i16, i16* %258, align 2
  store i16 %259, i16* %257, align 2
  %260 = getelementptr inbounds i16, i16* %252, i64 3
  %261 = getelementptr inbounds i16, i16* %251, i64 3
  %262 = load i16, i16* %261, align 2
  store i16 %262, i16* %260, align 2
  %263 = getelementptr inbounds i16, i16* %252, i64 4
  %264 = getelementptr inbounds i16, i16* %251, i64 4
  %265 = load i16, i16* %264, align 2
  store i16 %265, i16* %263, align 2
  %266 = getelementptr inbounds i16, i16* %252, i64 5
  %267 = getelementptr inbounds i16, i16* %251, i64 5
  %268 = load i16, i16* %267, align 2
  store i16 %268, i16* %266, align 2
  %269 = getelementptr inbounds i16, i16* %252, i64 6
  %270 = getelementptr inbounds i16, i16* %251, i64 6
  %271 = load i16, i16* %270, align 2
  store i16 %271, i16* %269, align 2
  %272 = getelementptr inbounds i16, i16* %252, i64 7
  %273 = getelementptr inbounds i16, i16* %251, i64 7
  %274 = load i16, i16* %273, align 2
  store i16 %274, i16* %272, align 2
  %275 = add i64 %250, -8
  %276 = getelementptr inbounds i16, i16* %252, i64 8
  %277 = getelementptr inbounds i16, i16* %251, i64 8
  %278 = icmp eq i64 %275, 0
  br i1 %278, label %279, label %249, !llvm.loop !19

279:                                              ; preds = %244, %249, %224, %101
  store i8 1, i8* %90, align 8
  br label %280

280:                                              ; preds = %94, %279
  %281 = load %"class.device::mojom::UsbDeviceInfo"*, %"class.device::mojom::UsbDeviceInfo"** %31, align 8
  %282 = getelementptr inbounds %"class.device::mojom::UsbDeviceInfo", %"class.device::mojom::UsbDeviceInfo"* %281, i64 0, i32 15, i32 0, i32 0, i32 0, i32 0
  %283 = load i8, i8* %282, align 8, !range !8
  %284 = icmp eq i8 %283, 0
  %285 = getelementptr inbounds %"class.device::mojom::UsbDeviceInfo", %"class.device::mojom::UsbDeviceInfo"* %281, i64 0, i32 15, i32 0, i32 0, i32 0, i32 1, i32 0
  br i1 %284, label %288, label %286

286:                                              ; preds = %280
  %287 = call dereferenceable(24) %"class.std::__1::basic_string.5"* @_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEEaSERKS5_(%"class.std::__1::basic_string.5"* %285, %"class.std::__1::basic_string.5"* dereferenceable(24) %9) #14
  br label %472

288:                                              ; preds = %280
  %289 = bitcast %"class.std::__1::basic_string.5"* %9 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %290 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %289, i64 0, i32 1, i32 1
  %291 = load i8, i8* %290, align 1
  %292 = icmp slt i8 %291, 0
  br i1 %292, label %296, label %293

293:                                              ; preds = %288
  %294 = bitcast %"class.std::__1::basic_string.5"* %285 to i8*
  %295 = bitcast %"class.std::__1::basic_string.5"* %9 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %294, i8* align 8 %295, i64 24, i1 false) #14
  br label %471

296:                                              ; preds = %288
  %297 = getelementptr inbounds %"class.std::__1::basic_string.5", %"class.std::__1::basic_string.5"* %9, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %298 = load i16*, i16** %297, align 8
  %299 = getelementptr inbounds %"class.std::__1::basic_string.5", %"class.std::__1::basic_string.5"* %9, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %300 = load i64, i64* %299, align 8
  %301 = icmp ult i64 %300, 11
  br i1 %301, label %302, label %307

302:                                              ; preds = %296
  %303 = bitcast %"class.std::__1::basic_string.5"* %285 to i16*
  %304 = trunc i64 %300 to i8
  %305 = bitcast %"class.std::__1::basic_string.5"* %285 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %306 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %305, i64 0, i32 1, i32 1
  store i8 %304, i8* %306, align 1
  br label %324

307:                                              ; preds = %296
  %308 = icmp ugt i64 %300, 9223372036854775791
  br i1 %308, label %309, label %311

309:                                              ; preds = %307
  %310 = bitcast %"class.std::__1::basic_string.5"* %285 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* %310) #15
  unreachable

311:                                              ; preds = %307
  %312 = add nuw nsw i64 %300, 8
  %313 = and i64 %312, -8
  %314 = icmp slt i64 %313, 0
  br i1 %314, label %315, label %316

315:                                              ; preds = %311
  call void @abort() #15
  unreachable

316:                                              ; preds = %311
  %317 = shl i64 %313, 1
  %318 = call i8* @_Znwm(i64 %317) #13
  %319 = bitcast i8* %318 to i16*
  %320 = bitcast %"class.std::__1::basic_string.5"* %285 to i8**
  store i8* %318, i8** %320, align 8
  %321 = or i64 %313, -9223372036854775808
  %322 = getelementptr inbounds %"class.device::mojom::UsbDeviceInfo", %"class.device::mojom::UsbDeviceInfo"* %281, i64 0, i32 15, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %321, i64* %322, align 8
  %323 = getelementptr inbounds %"class.device::mojom::UsbDeviceInfo", %"class.device::mojom::UsbDeviceInfo"* %281, i64 0, i32 15, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %300, i64* %323, align 8
  br label %324

324:                                              ; preds = %316, %302
  %325 = phi i16* [ %303, %302 ], [ %319, %316 ]
  %326 = add nuw nsw i64 %300, 1
  %327 = add i64 %300, 1
  %328 = icmp ult i64 %327, 16
  br i1 %328, label %418, label %329

329:                                              ; preds = %324
  %330 = add i64 %300, 1
  %331 = getelementptr i16, i16* %325, i64 %330
  %332 = getelementptr i16, i16* %298, i64 %330
  %333 = icmp ult i16* %325, %332
  %334 = icmp ult i16* %298, %331
  %335 = and i1 %333, %334
  br i1 %335, label %418, label %336

336:                                              ; preds = %329
  %337 = and i64 %327, -16
  %338 = sub i64 %326, %337
  %339 = getelementptr i16, i16* %298, i64 %337
  %340 = getelementptr i16, i16* %325, i64 %337
  %341 = add i64 %337, -16
  %342 = lshr exact i64 %341, 4
  %343 = add nuw nsw i64 %342, 1
  %344 = and i64 %343, 3
  %345 = icmp ult i64 %341, 48
  br i1 %345, label %397, label %346

346:                                              ; preds = %336
  %347 = sub nsw i64 %343, %344
  br label %348

348:                                              ; preds = %348, %346
  %349 = phi i64 [ 0, %346 ], [ %394, %348 ]
  %350 = phi i64 [ %347, %346 ], [ %395, %348 ]
  %351 = getelementptr i16, i16* %298, i64 %349
  %352 = getelementptr i16, i16* %325, i64 %349
  %353 = bitcast i16* %351 to <8 x i16>*
  %354 = load <8 x i16>, <8 x i16>* %353, align 2, !alias.scope !20
  %355 = getelementptr i16, i16* %351, i64 8
  %356 = bitcast i16* %355 to <8 x i16>*
  %357 = load <8 x i16>, <8 x i16>* %356, align 2, !alias.scope !20
  %358 = bitcast i16* %352 to <8 x i16>*
  store <8 x i16> %354, <8 x i16>* %358, align 2, !alias.scope !23, !noalias !20
  %359 = getelementptr i16, i16* %352, i64 8
  %360 = bitcast i16* %359 to <8 x i16>*
  store <8 x i16> %357, <8 x i16>* %360, align 2, !alias.scope !23, !noalias !20
  %361 = or i64 %349, 16
  %362 = getelementptr i16, i16* %298, i64 %361
  %363 = getelementptr i16, i16* %325, i64 %361
  %364 = bitcast i16* %362 to <8 x i16>*
  %365 = load <8 x i16>, <8 x i16>* %364, align 2, !alias.scope !20
  %366 = getelementptr i16, i16* %362, i64 8
  %367 = bitcast i16* %366 to <8 x i16>*
  %368 = load <8 x i16>, <8 x i16>* %367, align 2, !alias.scope !20
  %369 = bitcast i16* %363 to <8 x i16>*
  store <8 x i16> %365, <8 x i16>* %369, align 2, !alias.scope !23, !noalias !20
  %370 = getelementptr i16, i16* %363, i64 8
  %371 = bitcast i16* %370 to <8 x i16>*
  store <8 x i16> %368, <8 x i16>* %371, align 2, !alias.scope !23, !noalias !20
  %372 = or i64 %349, 32
  %373 = getelementptr i16, i16* %298, i64 %372
  %374 = getelementptr i16, i16* %325, i64 %372
  %375 = bitcast i16* %373 to <8 x i16>*
  %376 = load <8 x i16>, <8 x i16>* %375, align 2, !alias.scope !20
  %377 = getelementptr i16, i16* %373, i64 8
  %378 = bitcast i16* %377 to <8 x i16>*
  %379 = load <8 x i16>, <8 x i16>* %378, align 2, !alias.scope !20
  %380 = bitcast i16* %374 to <8 x i16>*
  store <8 x i16> %376, <8 x i16>* %380, align 2, !alias.scope !23, !noalias !20
  %381 = getelementptr i16, i16* %374, i64 8
  %382 = bitcast i16* %381 to <8 x i16>*
  store <8 x i16> %379, <8 x i16>* %382, align 2, !alias.scope !23, !noalias !20
  %383 = or i64 %349, 48
  %384 = getelementptr i16, i16* %298, i64 %383
  %385 = getelementptr i16, i16* %325, i64 %383
  %386 = bitcast i16* %384 to <8 x i16>*
  %387 = load <8 x i16>, <8 x i16>* %386, align 2, !alias.scope !20
  %388 = getelementptr i16, i16* %384, i64 8
  %389 = bitcast i16* %388 to <8 x i16>*
  %390 = load <8 x i16>, <8 x i16>* %389, align 2, !alias.scope !20
  %391 = bitcast i16* %385 to <8 x i16>*
  store <8 x i16> %387, <8 x i16>* %391, align 2, !alias.scope !23, !noalias !20
  %392 = getelementptr i16, i16* %385, i64 8
  %393 = bitcast i16* %392 to <8 x i16>*
  store <8 x i16> %390, <8 x i16>* %393, align 2, !alias.scope !23, !noalias !20
  %394 = add i64 %349, 64
  %395 = add i64 %350, -4
  %396 = icmp eq i64 %395, 0
  br i1 %396, label %397, label %348, !llvm.loop !25

397:                                              ; preds = %348, %336
  %398 = phi i64 [ 0, %336 ], [ %394, %348 ]
  %399 = icmp eq i64 %344, 0
  br i1 %399, label %416, label %400

400:                                              ; preds = %397, %400
  %401 = phi i64 [ %413, %400 ], [ %398, %397 ]
  %402 = phi i64 [ %414, %400 ], [ %344, %397 ]
  %403 = getelementptr i16, i16* %298, i64 %401
  %404 = getelementptr i16, i16* %325, i64 %401
  %405 = bitcast i16* %403 to <8 x i16>*
  %406 = load <8 x i16>, <8 x i16>* %405, align 2, !alias.scope !20
  %407 = getelementptr i16, i16* %403, i64 8
  %408 = bitcast i16* %407 to <8 x i16>*
  %409 = load <8 x i16>, <8 x i16>* %408, align 2, !alias.scope !20
  %410 = bitcast i16* %404 to <8 x i16>*
  store <8 x i16> %406, <8 x i16>* %410, align 2, !alias.scope !23, !noalias !20
  %411 = getelementptr i16, i16* %404, i64 8
  %412 = bitcast i16* %411 to <8 x i16>*
  store <8 x i16> %409, <8 x i16>* %412, align 2, !alias.scope !23, !noalias !20
  %413 = add i64 %401, 16
  %414 = add i64 %402, -1
  %415 = icmp eq i64 %414, 0
  br i1 %415, label %416, label %400, !llvm.loop !26

416:                                              ; preds = %400, %397
  %417 = icmp eq i64 %327, %337
  br i1 %417, label %471, label %418

418:                                              ; preds = %416, %329, %324
  %419 = phi i64 [ %326, %329 ], [ %326, %324 ], [ %338, %416 ]
  %420 = phi i16* [ %298, %329 ], [ %298, %324 ], [ %339, %416 ]
  %421 = phi i16* [ %325, %329 ], [ %325, %324 ], [ %340, %416 ]
  %422 = add i64 %419, -1
  %423 = and i64 %419, 7
  %424 = icmp eq i64 %423, 0
  br i1 %424, label %436, label %425

425:                                              ; preds = %418, %425
  %426 = phi i64 [ %431, %425 ], [ %419, %418 ]
  %427 = phi i16* [ %433, %425 ], [ %420, %418 ]
  %428 = phi i16* [ %432, %425 ], [ %421, %418 ]
  %429 = phi i64 [ %434, %425 ], [ %423, %418 ]
  %430 = load i16, i16* %427, align 2
  store i16 %430, i16* %428, align 2
  %431 = add i64 %426, -1
  %432 = getelementptr inbounds i16, i16* %428, i64 1
  %433 = getelementptr inbounds i16, i16* %427, i64 1
  %434 = add i64 %429, -1
  %435 = icmp eq i64 %434, 0
  br i1 %435, label %436, label %425, !llvm.loop !27

436:                                              ; preds = %425, %418
  %437 = phi i64 [ %419, %418 ], [ %431, %425 ]
  %438 = phi i16* [ %420, %418 ], [ %433, %425 ]
  %439 = phi i16* [ %421, %418 ], [ %432, %425 ]
  %440 = icmp ult i64 %422, 7
  br i1 %440, label %471, label %441

441:                                              ; preds = %436, %441
  %442 = phi i64 [ %467, %441 ], [ %437, %436 ]
  %443 = phi i16* [ %469, %441 ], [ %438, %436 ]
  %444 = phi i16* [ %468, %441 ], [ %439, %436 ]
  %445 = load i16, i16* %443, align 2
  store i16 %445, i16* %444, align 2
  %446 = getelementptr inbounds i16, i16* %444, i64 1
  %447 = getelementptr inbounds i16, i16* %443, i64 1
  %448 = load i16, i16* %447, align 2
  store i16 %448, i16* %446, align 2
  %449 = getelementptr inbounds i16, i16* %444, i64 2
  %450 = getelementptr inbounds i16, i16* %443, i64 2
  %451 = load i16, i16* %450, align 2
  store i16 %451, i16* %449, align 2
  %452 = getelementptr inbounds i16, i16* %444, i64 3
  %453 = getelementptr inbounds i16, i16* %443, i64 3
  %454 = load i16, i16* %453, align 2
  store i16 %454, i16* %452, align 2
  %455 = getelementptr inbounds i16, i16* %444, i64 4
  %456 = getelementptr inbounds i16, i16* %443, i64 4
  %457 = load i16, i16* %456, align 2
  store i16 %457, i16* %455, align 2
  %458 = getelementptr inbounds i16, i16* %444, i64 5
  %459 = getelementptr inbounds i16, i16* %443, i64 5
  %460 = load i16, i16* %459, align 2
  store i16 %460, i16* %458, align 2
  %461 = getelementptr inbounds i16, i16* %444, i64 6
  %462 = getelementptr inbounds i16, i16* %443, i64 6
  %463 = load i16, i16* %462, align 2
  store i16 %463, i16* %461, align 2
  %464 = getelementptr inbounds i16, i16* %444, i64 7
  %465 = getelementptr inbounds i16, i16* %443, i64 7
  %466 = load i16, i16* %465, align 2
  store i16 %466, i16* %464, align 2
  %467 = add i64 %442, -8
  %468 = getelementptr inbounds i16, i16* %444, i64 8
  %469 = getelementptr inbounds i16, i16* %443, i64 8
  %470 = icmp eq i64 %467, 0
  br i1 %470, label %471, label %441, !llvm.loop !28

471:                                              ; preds = %436, %441, %416, %293
  store i8 1, i8* %282, align 8
  br label %472

472:                                              ; preds = %286, %471
  %473 = load %"class.device::mojom::UsbDeviceInfo"*, %"class.device::mojom::UsbDeviceInfo"** %31, align 8
  %474 = getelementptr inbounds %"class.device::mojom::UsbDeviceInfo", %"class.device::mojom::UsbDeviceInfo"* %473, i64 0, i32 16, i32 0, i32 0, i32 0, i32 0
  %475 = load i8, i8* %474, align 8, !range !8
  %476 = icmp eq i8 %475, 0
  %477 = getelementptr inbounds %"class.device::mojom::UsbDeviceInfo", %"class.device::mojom::UsbDeviceInfo"* %473, i64 0, i32 16, i32 0, i32 0, i32 0, i32 1, i32 0
  br i1 %476, label %480, label %478

478:                                              ; preds = %472
  %479 = call dereferenceable(24) %"class.std::__1::basic_string.5"* @_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEEaSERKS5_(%"class.std::__1::basic_string.5"* %477, %"class.std::__1::basic_string.5"* dereferenceable(24) %10) #14
  br label %664

480:                                              ; preds = %472
  %481 = bitcast %"class.std::__1::basic_string.5"* %10 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %482 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %481, i64 0, i32 1, i32 1
  %483 = load i8, i8* %482, align 1
  %484 = icmp slt i8 %483, 0
  br i1 %484, label %488, label %485

485:                                              ; preds = %480
  %486 = bitcast %"class.std::__1::basic_string.5"* %477 to i8*
  %487 = bitcast %"class.std::__1::basic_string.5"* %10 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %486, i8* align 8 %487, i64 24, i1 false) #14
  br label %663

488:                                              ; preds = %480
  %489 = getelementptr inbounds %"class.std::__1::basic_string.5", %"class.std::__1::basic_string.5"* %10, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %490 = load i16*, i16** %489, align 8
  %491 = getelementptr inbounds %"class.std::__1::basic_string.5", %"class.std::__1::basic_string.5"* %10, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %492 = load i64, i64* %491, align 8
  %493 = icmp ult i64 %492, 11
  br i1 %493, label %494, label %499

494:                                              ; preds = %488
  %495 = bitcast %"class.std::__1::basic_string.5"* %477 to i16*
  %496 = trunc i64 %492 to i8
  %497 = bitcast %"class.std::__1::basic_string.5"* %477 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %498 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %497, i64 0, i32 1, i32 1
  store i8 %496, i8* %498, align 1
  br label %516

499:                                              ; preds = %488
  %500 = icmp ugt i64 %492, 9223372036854775791
  br i1 %500, label %501, label %503

501:                                              ; preds = %499
  %502 = bitcast %"class.std::__1::basic_string.5"* %477 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* %502) #15
  unreachable

503:                                              ; preds = %499
  %504 = add nuw nsw i64 %492, 8
  %505 = and i64 %504, -8
  %506 = icmp slt i64 %505, 0
  br i1 %506, label %507, label %508

507:                                              ; preds = %503
  call void @abort() #15
  unreachable

508:                                              ; preds = %503
  %509 = shl i64 %505, 1
  %510 = call i8* @_Znwm(i64 %509) #13
  %511 = bitcast i8* %510 to i16*
  %512 = bitcast %"class.std::__1::basic_string.5"* %477 to i8**
  store i8* %510, i8** %512, align 8
  %513 = or i64 %505, -9223372036854775808
  %514 = getelementptr inbounds %"class.device::mojom::UsbDeviceInfo", %"class.device::mojom::UsbDeviceInfo"* %473, i64 0, i32 16, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %513, i64* %514, align 8
  %515 = getelementptr inbounds %"class.device::mojom::UsbDeviceInfo", %"class.device::mojom::UsbDeviceInfo"* %473, i64 0, i32 16, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %492, i64* %515, align 8
  br label %516

516:                                              ; preds = %508, %494
  %517 = phi i16* [ %495, %494 ], [ %511, %508 ]
  %518 = add nuw nsw i64 %492, 1
  %519 = add i64 %492, 1
  %520 = icmp ult i64 %519, 16
  br i1 %520, label %610, label %521

521:                                              ; preds = %516
  %522 = add i64 %492, 1
  %523 = getelementptr i16, i16* %517, i64 %522
  %524 = getelementptr i16, i16* %490, i64 %522
  %525 = icmp ult i16* %517, %524
  %526 = icmp ult i16* %490, %523
  %527 = and i1 %525, %526
  br i1 %527, label %610, label %528

528:                                              ; preds = %521
  %529 = and i64 %519, -16
  %530 = sub i64 %518, %529
  %531 = getelementptr i16, i16* %490, i64 %529
  %532 = getelementptr i16, i16* %517, i64 %529
  %533 = add i64 %529, -16
  %534 = lshr exact i64 %533, 4
  %535 = add nuw nsw i64 %534, 1
  %536 = and i64 %535, 3
  %537 = icmp ult i64 %533, 48
  br i1 %537, label %589, label %538

538:                                              ; preds = %528
  %539 = sub nsw i64 %535, %536
  br label %540

540:                                              ; preds = %540, %538
  %541 = phi i64 [ 0, %538 ], [ %586, %540 ]
  %542 = phi i64 [ %539, %538 ], [ %587, %540 ]
  %543 = getelementptr i16, i16* %490, i64 %541
  %544 = getelementptr i16, i16* %517, i64 %541
  %545 = bitcast i16* %543 to <8 x i16>*
  %546 = load <8 x i16>, <8 x i16>* %545, align 2, !alias.scope !29
  %547 = getelementptr i16, i16* %543, i64 8
  %548 = bitcast i16* %547 to <8 x i16>*
  %549 = load <8 x i16>, <8 x i16>* %548, align 2, !alias.scope !29
  %550 = bitcast i16* %544 to <8 x i16>*
  store <8 x i16> %546, <8 x i16>* %550, align 2, !alias.scope !32, !noalias !29
  %551 = getelementptr i16, i16* %544, i64 8
  %552 = bitcast i16* %551 to <8 x i16>*
  store <8 x i16> %549, <8 x i16>* %552, align 2, !alias.scope !32, !noalias !29
  %553 = or i64 %541, 16
  %554 = getelementptr i16, i16* %490, i64 %553
  %555 = getelementptr i16, i16* %517, i64 %553
  %556 = bitcast i16* %554 to <8 x i16>*
  %557 = load <8 x i16>, <8 x i16>* %556, align 2, !alias.scope !29
  %558 = getelementptr i16, i16* %554, i64 8
  %559 = bitcast i16* %558 to <8 x i16>*
  %560 = load <8 x i16>, <8 x i16>* %559, align 2, !alias.scope !29
  %561 = bitcast i16* %555 to <8 x i16>*
  store <8 x i16> %557, <8 x i16>* %561, align 2, !alias.scope !32, !noalias !29
  %562 = getelementptr i16, i16* %555, i64 8
  %563 = bitcast i16* %562 to <8 x i16>*
  store <8 x i16> %560, <8 x i16>* %563, align 2, !alias.scope !32, !noalias !29
  %564 = or i64 %541, 32
  %565 = getelementptr i16, i16* %490, i64 %564
  %566 = getelementptr i16, i16* %517, i64 %564
  %567 = bitcast i16* %565 to <8 x i16>*
  %568 = load <8 x i16>, <8 x i16>* %567, align 2, !alias.scope !29
  %569 = getelementptr i16, i16* %565, i64 8
  %570 = bitcast i16* %569 to <8 x i16>*
  %571 = load <8 x i16>, <8 x i16>* %570, align 2, !alias.scope !29
  %572 = bitcast i16* %566 to <8 x i16>*
  store <8 x i16> %568, <8 x i16>* %572, align 2, !alias.scope !32, !noalias !29
  %573 = getelementptr i16, i16* %566, i64 8
  %574 = bitcast i16* %573 to <8 x i16>*
  store <8 x i16> %571, <8 x i16>* %574, align 2, !alias.scope !32, !noalias !29
  %575 = or i64 %541, 48
  %576 = getelementptr i16, i16* %490, i64 %575
  %577 = getelementptr i16, i16* %517, i64 %575
  %578 = bitcast i16* %576 to <8 x i16>*
  %579 = load <8 x i16>, <8 x i16>* %578, align 2, !alias.scope !29
  %580 = getelementptr i16, i16* %576, i64 8
  %581 = bitcast i16* %580 to <8 x i16>*
  %582 = load <8 x i16>, <8 x i16>* %581, align 2, !alias.scope !29
  %583 = bitcast i16* %577 to <8 x i16>*
  store <8 x i16> %579, <8 x i16>* %583, align 2, !alias.scope !32, !noalias !29
  %584 = getelementptr i16, i16* %577, i64 8
  %585 = bitcast i16* %584 to <8 x i16>*
  store <8 x i16> %582, <8 x i16>* %585, align 2, !alias.scope !32, !noalias !29
  %586 = add i64 %541, 64
  %587 = add i64 %542, -4
  %588 = icmp eq i64 %587, 0
  br i1 %588, label %589, label %540, !llvm.loop !34

589:                                              ; preds = %540, %528
  %590 = phi i64 [ 0, %528 ], [ %586, %540 ]
  %591 = icmp eq i64 %536, 0
  br i1 %591, label %608, label %592

592:                                              ; preds = %589, %592
  %593 = phi i64 [ %605, %592 ], [ %590, %589 ]
  %594 = phi i64 [ %606, %592 ], [ %536, %589 ]
  %595 = getelementptr i16, i16* %490, i64 %593
  %596 = getelementptr i16, i16* %517, i64 %593
  %597 = bitcast i16* %595 to <8 x i16>*
  %598 = load <8 x i16>, <8 x i16>* %597, align 2, !alias.scope !29
  %599 = getelementptr i16, i16* %595, i64 8
  %600 = bitcast i16* %599 to <8 x i16>*
  %601 = load <8 x i16>, <8 x i16>* %600, align 2, !alias.scope !29
  %602 = bitcast i16* %596 to <8 x i16>*
  store <8 x i16> %598, <8 x i16>* %602, align 2, !alias.scope !32, !noalias !29
  %603 = getelementptr i16, i16* %596, i64 8
  %604 = bitcast i16* %603 to <8 x i16>*
  store <8 x i16> %601, <8 x i16>* %604, align 2, !alias.scope !32, !noalias !29
  %605 = add i64 %593, 16
  %606 = add i64 %594, -1
  %607 = icmp eq i64 %606, 0
  br i1 %607, label %608, label %592, !llvm.loop !35

608:                                              ; preds = %592, %589
  %609 = icmp eq i64 %519, %529
  br i1 %609, label %663, label %610

610:                                              ; preds = %608, %521, %516
  %611 = phi i64 [ %518, %521 ], [ %518, %516 ], [ %530, %608 ]
  %612 = phi i16* [ %490, %521 ], [ %490, %516 ], [ %531, %608 ]
  %613 = phi i16* [ %517, %521 ], [ %517, %516 ], [ %532, %608 ]
  %614 = add i64 %611, -1
  %615 = and i64 %611, 7
  %616 = icmp eq i64 %615, 0
  br i1 %616, label %628, label %617

617:                                              ; preds = %610, %617
  %618 = phi i64 [ %623, %617 ], [ %611, %610 ]
  %619 = phi i16* [ %625, %617 ], [ %612, %610 ]
  %620 = phi i16* [ %624, %617 ], [ %613, %610 ]
  %621 = phi i64 [ %626, %617 ], [ %615, %610 ]
  %622 = load i16, i16* %619, align 2
  store i16 %622, i16* %620, align 2
  %623 = add i64 %618, -1
  %624 = getelementptr inbounds i16, i16* %620, i64 1
  %625 = getelementptr inbounds i16, i16* %619, i64 1
  %626 = add i64 %621, -1
  %627 = icmp eq i64 %626, 0
  br i1 %627, label %628, label %617, !llvm.loop !36

628:                                              ; preds = %617, %610
  %629 = phi i64 [ %611, %610 ], [ %623, %617 ]
  %630 = phi i16* [ %612, %610 ], [ %625, %617 ]
  %631 = phi i16* [ %613, %610 ], [ %624, %617 ]
  %632 = icmp ult i64 %614, 7
  br i1 %632, label %663, label %633

633:                                              ; preds = %628, %633
  %634 = phi i64 [ %659, %633 ], [ %629, %628 ]
  %635 = phi i16* [ %661, %633 ], [ %630, %628 ]
  %636 = phi i16* [ %660, %633 ], [ %631, %628 ]
  %637 = load i16, i16* %635, align 2
  store i16 %637, i16* %636, align 2
  %638 = getelementptr inbounds i16, i16* %636, i64 1
  %639 = getelementptr inbounds i16, i16* %635, i64 1
  %640 = load i16, i16* %639, align 2
  store i16 %640, i16* %638, align 2
  %641 = getelementptr inbounds i16, i16* %636, i64 2
  %642 = getelementptr inbounds i16, i16* %635, i64 2
  %643 = load i16, i16* %642, align 2
  store i16 %643, i16* %641, align 2
  %644 = getelementptr inbounds i16, i16* %636, i64 3
  %645 = getelementptr inbounds i16, i16* %635, i64 3
  %646 = load i16, i16* %645, align 2
  store i16 %646, i16* %644, align 2
  %647 = getelementptr inbounds i16, i16* %636, i64 4
  %648 = getelementptr inbounds i16, i16* %635, i64 4
  %649 = load i16, i16* %648, align 2
  store i16 %649, i16* %647, align 2
  %650 = getelementptr inbounds i16, i16* %636, i64 5
  %651 = getelementptr inbounds i16, i16* %635, i64 5
  %652 = load i16, i16* %651, align 2
  store i16 %652, i16* %650, align 2
  %653 = getelementptr inbounds i16, i16* %636, i64 6
  %654 = getelementptr inbounds i16, i16* %635, i64 6
  %655 = load i16, i16* %654, align 2
  store i16 %655, i16* %653, align 2
  %656 = getelementptr inbounds i16, i16* %636, i64 7
  %657 = getelementptr inbounds i16, i16* %635, i64 7
  %658 = load i16, i16* %657, align 2
  store i16 %658, i16* %656, align 2
  %659 = add i64 %634, -8
  %660 = getelementptr inbounds i16, i16* %636, i64 8
  %661 = getelementptr inbounds i16, i16* %635, i64 8
  %662 = icmp eq i64 %659, 0
  br i1 %662, label %663, label %633, !llvm.loop !37

663:                                              ; preds = %628, %633, %608, %485
  store i8 1, i8* %474, align 8
  br label %664

664:                                              ; preds = %478, %663
  %665 = load %"class.device::mojom::UsbDeviceInfo"*, %"class.device::mojom::UsbDeviceInfo"** %31, align 8
  %666 = getelementptr inbounds %"class.device::mojom::UsbDeviceInfo", %"class.device::mojom::UsbDeviceInfo"* %665, i64 0, i32 7
  store i32 %11, i32* %666, align 8
  %667 = load %"class.device::mojom::UsbDeviceInfo"*, %"class.device::mojom::UsbDeviceInfo"** %31, align 8
  %668 = getelementptr inbounds %"class.device::mojom::UsbDeviceInfo", %"class.device::mojom::UsbDeviceInfo"* %667, i64 0, i32 8
  store i32 %12, i32* %668, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6device9UsbDeviceD2Ev(%"class.device::UsbDevice"*) unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.device::UsbDevice", %"class.device::UsbDevice"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*] }, { [8 x i8*] }* @_ZTVN6device9UsbDeviceE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.device::UsbDevice", %"class.device::UsbDevice"* %0, i64 0, i32 4, i32 1, i32 0, i32 0, i32 1
  %4 = bitcast %"class.base::internal::LinkNodeBase"** %3 to %"class.base::LinkNode"**
  %5 = getelementptr inbounds %"class.device::UsbDevice", %"class.device::UsbDevice"* %0, i64 0, i32 4, i32 1, i32 0
  %6 = load %"class.base::LinkNode"*, %"class.base::LinkNode"** %4, align 8
  %7 = icmp eq %"class.base::LinkNode"* %6, %5
  br i1 %7, label %20, label %8

8:                                                ; preds = %1, %17
  %9 = phi %"class.base::LinkNode"* [ %18, %17 ], [ %6, %1 ]
  %10 = getelementptr inbounds %"class.base::LinkNode", %"class.base::LinkNode"* %9, i64 1
  %11 = bitcast %"class.base::LinkNode"* %10 to %"class.base::ObserverList"**
  %12 = load %"class.base::ObserverList"*, %"class.base::ObserverList"** %11, align 8
  %13 = icmp eq %"class.base::ObserverList"* %12, null
  br i1 %13, label %17, label %14

14:                                               ; preds = %8
  store %"class.base::ObserverList"* null, %"class.base::ObserverList"** %11, align 8
  %15 = getelementptr inbounds %"class.base::LinkNode", %"class.base::LinkNode"* %9, i64 0, i32 0
  tail call void @_ZN4base8internal12LinkNodeBase14RemoveFromListEv(%"class.base::internal::LinkNodeBase"* %15) #14
  %16 = load %"class.base::LinkNode"*, %"class.base::LinkNode"** %4, align 8
  br label %17

17:                                               ; preds = %14, %8
  %18 = phi %"class.base::LinkNode"* [ %9, %8 ], [ %16, %14 ]
  %19 = icmp eq %"class.base::LinkNode"* %18, %5
  br i1 %19, label %20, label %8

20:                                               ; preds = %17, %1
  %21 = getelementptr inbounds %"class.device::UsbDevice", %"class.device::UsbDevice"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  %22 = load %"class.base::internal::UncheckedObserverAdapter"*, %"class.base::internal::UncheckedObserverAdapter"** %21, align 8
  %23 = getelementptr inbounds %"class.device::UsbDevice", %"class.device::UsbDevice"* %0, i64 0, i32 4, i32 0, i32 0, i32 1
  %24 = load %"class.base::internal::UncheckedObserverAdapter"*, %"class.base::internal::UncheckedObserverAdapter"** %23, align 8
  %25 = icmp eq %"class.base::internal::UncheckedObserverAdapter"* %22, %24
  br i1 %25, label %34, label %26

26:                                               ; preds = %20, %31
  %27 = phi %"class.base::internal::UncheckedObserverAdapter"* [ %32, %31 ], [ %22, %20 ]
  %28 = getelementptr inbounds %"class.base::internal::UncheckedObserverAdapter", %"class.base::internal::UncheckedObserverAdapter"* %27, i64 0, i32 0
  %29 = load i8*, i8** %28, align 8
  %30 = icmp eq i8* %29, null
  br i1 %30, label %34, label %31

31:                                               ; preds = %26
  %32 = getelementptr inbounds %"class.base::internal::UncheckedObserverAdapter", %"class.base::internal::UncheckedObserverAdapter"* %27, i64 1
  %33 = icmp eq %"class.base::internal::UncheckedObserverAdapter"* %32, %24
  br i1 %33, label %98, label %26

34:                                               ; preds = %26, %20
  %35 = phi %"class.base::internal::UncheckedObserverAdapter"* [ %22, %20 ], [ %27, %26 ]
  %36 = ptrtoint %"class.base::internal::UncheckedObserverAdapter"* %35 to i64
  %37 = icmp eq %"class.base::internal::UncheckedObserverAdapter"* %35, %24
  br i1 %37, label %98, label %38

38:                                               ; preds = %34
  %39 = getelementptr inbounds %"class.base::internal::UncheckedObserverAdapter", %"class.base::internal::UncheckedObserverAdapter"* %35, i64 1
  %40 = icmp eq %"class.base::internal::UncheckedObserverAdapter"* %39, %24
  br i1 %40, label %93, label %41

41:                                               ; preds = %38
  %42 = getelementptr %"class.base::internal::UncheckedObserverAdapter", %"class.base::internal::UncheckedObserverAdapter"* %24, i64 -2, i32 0
  %43 = ptrtoint i8** %42 to i64
  %44 = sub i64 %43, %36
  %45 = lshr i64 %44, 3
  %46 = add nuw nsw i64 %45, 1
  %47 = and i64 %46, 3
  %48 = icmp eq i64 %47, 0
  br i1 %48, label %67, label %49

49:                                               ; preds = %41, %62
  %50 = phi %"class.base::internal::UncheckedObserverAdapter"* [ %64, %62 ], [ %39, %41 ]
  %51 = phi i64 [ %63, %62 ], [ %36, %41 ]
  %52 = phi i64 [ %65, %62 ], [ %47, %41 ]
  %53 = getelementptr inbounds %"class.base::internal::UncheckedObserverAdapter", %"class.base::internal::UncheckedObserverAdapter"* %50, i64 0, i32 0
  %54 = load i8*, i8** %53, align 8
  %55 = icmp eq i8* %54, null
  br i1 %55, label %62, label %56

56:                                               ; preds = %49
  %57 = ptrtoint i8* %54 to i64
  %58 = inttoptr i64 %51 to %"class.base::internal::UncheckedObserverAdapter"*
  %59 = inttoptr i64 %51 to i64*
  store i64 %57, i64* %59, align 8
  %60 = getelementptr inbounds %"class.base::internal::UncheckedObserverAdapter", %"class.base::internal::UncheckedObserverAdapter"* %58, i64 1
  %61 = ptrtoint %"class.base::internal::UncheckedObserverAdapter"* %60 to i64
  br label %62

62:                                               ; preds = %56, %49
  %63 = phi i64 [ %51, %49 ], [ %61, %56 ]
  %64 = getelementptr inbounds %"class.base::internal::UncheckedObserverAdapter", %"class.base::internal::UncheckedObserverAdapter"* %50, i64 1
  %65 = add i64 %52, -1
  %66 = icmp eq i64 %65, 0
  br i1 %66, label %67, label %49, !llvm.loop !38

67:                                               ; preds = %62, %41
  %68 = phi i64 [ undef, %41 ], [ %63, %62 ]
  %69 = phi %"class.base::internal::UncheckedObserverAdapter"* [ %39, %41 ], [ %64, %62 ]
  %70 = phi i64 [ %36, %41 ], [ %63, %62 ]
  %71 = icmp ult i64 %44, 24
  br i1 %71, label %89, label %72

72:                                               ; preds = %67, %169
  %73 = phi %"class.base::internal::UncheckedObserverAdapter"* [ %171, %169 ], [ %69, %67 ]
  %74 = phi i64 [ %170, %169 ], [ %70, %67 ]
  %75 = getelementptr inbounds %"class.base::internal::UncheckedObserverAdapter", %"class.base::internal::UncheckedObserverAdapter"* %73, i64 0, i32 0
  %76 = load i8*, i8** %75, align 8
  %77 = icmp eq i8* %76, null
  br i1 %77, label %84, label %78

78:                                               ; preds = %72
  %79 = ptrtoint i8* %76 to i64
  %80 = inttoptr i64 %74 to %"class.base::internal::UncheckedObserverAdapter"*
  %81 = inttoptr i64 %74 to i64*
  store i64 %79, i64* %81, align 8
  %82 = getelementptr inbounds %"class.base::internal::UncheckedObserverAdapter", %"class.base::internal::UncheckedObserverAdapter"* %80, i64 1
  %83 = ptrtoint %"class.base::internal::UncheckedObserverAdapter"* %82 to i64
  br label %84

84:                                               ; preds = %78, %72
  %85 = phi i64 [ %74, %72 ], [ %83, %78 ]
  %86 = getelementptr inbounds %"class.base::internal::UncheckedObserverAdapter", %"class.base::internal::UncheckedObserverAdapter"* %73, i64 1, i32 0
  %87 = load i8*, i8** %86, align 8
  %88 = icmp eq i8* %87, null
  br i1 %88, label %147, label %141

89:                                               ; preds = %169, %67
  %90 = phi i64 [ %68, %67 ], [ %170, %169 ]
  %91 = inttoptr i64 %90 to %"class.base::internal::UncheckedObserverAdapter"*
  %92 = load %"class.base::internal::UncheckedObserverAdapter"*, %"class.base::internal::UncheckedObserverAdapter"** %23, align 8
  br label %93

93:                                               ; preds = %89, %38
  %94 = phi %"class.base::internal::UncheckedObserverAdapter"* [ %24, %38 ], [ %92, %89 ]
  %95 = phi %"class.base::internal::UncheckedObserverAdapter"* [ %35, %38 ], [ %91, %89 ]
  %96 = icmp eq %"class.base::internal::UncheckedObserverAdapter"* %95, %94
  br i1 %96, label %98, label %97

97:                                               ; preds = %93
  store %"class.base::internal::UncheckedObserverAdapter"* %95, %"class.base::internal::UncheckedObserverAdapter"** %23, align 8
  br label %98

98:                                               ; preds = %31, %97, %93, %34
  %99 = load %"class.base::internal::UncheckedObserverAdapter"*, %"class.base::internal::UncheckedObserverAdapter"** %21, align 8
  %100 = icmp eq %"class.base::internal::UncheckedObserverAdapter"* %99, null
  br i1 %100, label %105, label %101

101:                                              ; preds = %98
  %102 = ptrtoint %"class.base::internal::UncheckedObserverAdapter"* %99 to i64
  %103 = bitcast %"class.base::internal::UncheckedObserverAdapter"** %23 to i64*
  store i64 %102, i64* %103, align 8
  %104 = bitcast %"class.base::internal::UncheckedObserverAdapter"* %99 to i8*
  tail call void @_ZdlPv(i8* %104) #13
  br label %105

105:                                              ; preds = %98, %101
  %106 = getelementptr inbounds %"class.device::UsbDevice", %"class.device::UsbDevice"* %0, i64 0, i32 3, i32 0
  %107 = getelementptr inbounds %"class.device::UsbDevice", %"class.device::UsbDevice"* %0, i64 0, i32 3, i32 0, i32 1, i32 0, i32 0
  %108 = load i64, i64* %107, align 8
  %109 = icmp eq i64 %108, 0
  br i1 %109, label %134, label %110

110:                                              ; preds = %105
  %111 = getelementptr inbounds %"class.device::UsbDevice", %"class.device::UsbDevice"* %0, i64 0, i32 3, i32 0, i32 0, i32 1
  %112 = load %"struct.std::__1::__list_node_base"*, %"struct.std::__1::__list_node_base"** %111, align 8
  %113 = getelementptr inbounds %"class.std::__1::__list_imp", %"class.std::__1::__list_imp"* %106, i64 0, i32 0
  %114 = getelementptr inbounds %"class.std::__1::__list_imp", %"class.std::__1::__list_imp"* %106, i64 0, i32 0, i32 0
  %115 = load %"struct.std::__1::__list_node_base"*, %"struct.std::__1::__list_node_base"** %114, align 8
  %116 = getelementptr inbounds %"struct.std::__1::__list_node_base", %"struct.std::__1::__list_node_base"* %115, i64 0, i32 1
  %117 = bitcast %"struct.std::__1::__list_node_base"** %116 to i64*
  %118 = load i64, i64* %117, align 8
  %119 = getelementptr inbounds %"struct.std::__1::__list_node_base", %"struct.std::__1::__list_node_base"* %112, i64 0, i32 0
  %120 = load %"struct.std::__1::__list_node_base"*, %"struct.std::__1::__list_node_base"** %119, align 8
  %121 = getelementptr inbounds %"struct.std::__1::__list_node_base", %"struct.std::__1::__list_node_base"* %120, i64 0, i32 1
  %122 = bitcast %"struct.std::__1::__list_node_base"** %121 to i64*
  store i64 %118, i64* %122, align 8
  %123 = bitcast %"struct.std::__1::__list_node_base"* %112 to i64*
  %124 = load i64, i64* %123, align 8
  %125 = bitcast %"struct.std::__1::__list_node_base"** %116 to i64**
  %126 = load i64*, i64** %125, align 8
  store i64 %124, i64* %126, align 8
  store i64 0, i64* %107, align 8
  %127 = icmp eq %"struct.std::__1::__list_node_base"* %112, %113
  br i1 %127, label %134, label %128

128:                                              ; preds = %110, %128
  %129 = phi %"struct.std::__1::__list_node_base"* [ %131, %128 ], [ %112, %110 ]
  %130 = getelementptr inbounds %"struct.std::__1::__list_node_base", %"struct.std::__1::__list_node_base"* %129, i64 0, i32 1
  %131 = load %"struct.std::__1::__list_node_base"*, %"struct.std::__1::__list_node_base"** %130, align 8
  %132 = bitcast %"struct.std::__1::__list_node_base"* %129 to i8*
  tail call void @_ZdlPv(i8* %132) #13
  %133 = icmp eq %"struct.std::__1::__list_node_base"* %131, %113
  br i1 %133, label %134, label %128

134:                                              ; preds = %128, %105, %110
  %135 = getelementptr inbounds %"class.device::UsbDevice", %"class.device::UsbDevice"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0
  %136 = load %"class.device::mojom::UsbDeviceInfo"*, %"class.device::mojom::UsbDeviceInfo"** %135, align 8
  store %"class.device::mojom::UsbDeviceInfo"* null, %"class.device::mojom::UsbDeviceInfo"** %135, align 8
  %137 = icmp eq %"class.device::mojom::UsbDeviceInfo"* %136, null
  br i1 %137, label %140, label %138

138:                                              ; preds = %134
  tail call void @_ZN6device5mojom13UsbDeviceInfoD1Ev(%"class.device::mojom::UsbDeviceInfo"* nonnull %136) #14
  %139 = bitcast %"class.device::mojom::UsbDeviceInfo"* %136 to i8*
  tail call void @_ZdlPv(i8* %139) #13
  br label %140

140:                                              ; preds = %134, %138
  ret void

141:                                              ; preds = %84
  %142 = ptrtoint i8* %87 to i64
  %143 = inttoptr i64 %85 to %"class.base::internal::UncheckedObserverAdapter"*
  %144 = inttoptr i64 %85 to i64*
  store i64 %142, i64* %144, align 8
  %145 = getelementptr inbounds %"class.base::internal::UncheckedObserverAdapter", %"class.base::internal::UncheckedObserverAdapter"* %143, i64 1
  %146 = ptrtoint %"class.base::internal::UncheckedObserverAdapter"* %145 to i64
  br label %147

147:                                              ; preds = %141, %84
  %148 = phi i64 [ %85, %84 ], [ %146, %141 ]
  %149 = getelementptr inbounds %"class.base::internal::UncheckedObserverAdapter", %"class.base::internal::UncheckedObserverAdapter"* %73, i64 2, i32 0
  %150 = load i8*, i8** %149, align 8
  %151 = icmp eq i8* %150, null
  br i1 %151, label %158, label %152

152:                                              ; preds = %147
  %153 = ptrtoint i8* %150 to i64
  %154 = inttoptr i64 %148 to %"class.base::internal::UncheckedObserverAdapter"*
  %155 = inttoptr i64 %148 to i64*
  store i64 %153, i64* %155, align 8
  %156 = getelementptr inbounds %"class.base::internal::UncheckedObserverAdapter", %"class.base::internal::UncheckedObserverAdapter"* %154, i64 1
  %157 = ptrtoint %"class.base::internal::UncheckedObserverAdapter"* %156 to i64
  br label %158

158:                                              ; preds = %152, %147
  %159 = phi i64 [ %148, %147 ], [ %157, %152 ]
  %160 = getelementptr inbounds %"class.base::internal::UncheckedObserverAdapter", %"class.base::internal::UncheckedObserverAdapter"* %73, i64 3, i32 0
  %161 = load i8*, i8** %160, align 8
  %162 = icmp eq i8* %161, null
  br i1 %162, label %169, label %163

163:                                              ; preds = %158
  %164 = ptrtoint i8* %161 to i64
  %165 = inttoptr i64 %159 to %"class.base::internal::UncheckedObserverAdapter"*
  %166 = inttoptr i64 %159 to i64*
  store i64 %164, i64* %166, align 8
  %167 = getelementptr inbounds %"class.base::internal::UncheckedObserverAdapter", %"class.base::internal::UncheckedObserverAdapter"* %165, i64 1
  %168 = ptrtoint %"class.base::internal::UncheckedObserverAdapter"* %167 to i64
  br label %169

169:                                              ; preds = %163, %158
  %170 = phi i64 [ %159, %158 ], [ %168, %163 ]
  %171 = getelementptr inbounds %"class.base::internal::UncheckedObserverAdapter", %"class.base::internal::UncheckedObserverAdapter"* %73, i64 4
  %172 = icmp eq %"class.base::internal::UncheckedObserverAdapter"* %171, %24
  br i1 %172, label %89, label %72
}

; Function Attrs: noreturn nounwind ssp uwtable
define hidden void @_ZN6device9UsbDeviceD0Ev(%"class.device::UsbDevice"* nocapture readnone) unnamed_addr #6 align 2 {
  tail call void @llvm.trap() #15
  unreachable
}

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #7

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i16 @_ZNK6device9UsbDevice11usb_versionEv(%"class.device::UsbDevice"* nocapture readonly) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.device::UsbDevice", %"class.device::UsbDevice"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0
  %3 = load %"class.device::mojom::UsbDeviceInfo"*, %"class.device::mojom::UsbDeviceInfo"** %2, align 8
  %4 = tail call zeroext i16 @_ZN6device13GetUsbVersionERKNS_5mojom13UsbDeviceInfoE(%"class.device::mojom::UsbDeviceInfo"* dereferenceable(304) %3) #14
  ret i16 %4
}

declare zeroext i16 @_ZN6device13GetUsbVersionERKNS_5mojom13UsbDeviceInfoE(%"class.device::mojom::UsbDeviceInfo"* dereferenceable(304)) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i16 @_ZNK6device9UsbDevice14device_versionEv(%"class.device::UsbDevice"* nocapture readonly) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.device::UsbDevice", %"class.device::UsbDevice"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0
  %3 = load %"class.device::mojom::UsbDeviceInfo"*, %"class.device::mojom::UsbDeviceInfo"** %2, align 8
  %4 = tail call zeroext i16 @_ZN6device16GetDeviceVersionERKNS_5mojom13UsbDeviceInfoE(%"class.device::mojom::UsbDeviceInfo"* dereferenceable(304) %3) #14
  ret i16 %4
}

declare zeroext i16 @_ZN6device16GetDeviceVersionERKNS_5mojom13UsbDeviceInfoE(%"class.device::mojom::UsbDeviceInfo"* dereferenceable(304)) local_unnamed_addr #4

; Function Attrs: nounwind readonly ssp uwtable
define hidden %"class.device::mojom::UsbConfigurationInfo"* @_ZNK6device9UsbDevice22GetActiveConfigurationEv(%"class.device::UsbDevice"* nocapture readonly) local_unnamed_addr #8 align 2 {
  %2 = getelementptr inbounds %"class.device::UsbDevice", %"class.device::UsbDevice"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0
  %3 = load %"class.device::mojom::UsbDeviceInfo"*, %"class.device::mojom::UsbDeviceInfo"** %2, align 8
  %4 = getelementptr inbounds %"class.device::mojom::UsbDeviceInfo", %"class.device::mojom::UsbDeviceInfo"* %3, i64 0, i32 19, i32 0, i32 0
  %5 = load %"class.mojo::StructPtr.23"*, %"class.mojo::StructPtr.23"** %4, align 8
  %6 = getelementptr inbounds %"class.device::mojom::UsbDeviceInfo", %"class.device::mojom::UsbDeviceInfo"* %3, i64 0, i32 19, i32 0, i32 1
  %7 = load %"class.mojo::StructPtr.23"*, %"class.mojo::StructPtr.23"** %6, align 8
  %8 = icmp eq %"class.mojo::StructPtr.23"* %5, %7
  br i1 %8, label %22, label %9

9:                                                ; preds = %1
  %10 = getelementptr inbounds %"class.device::mojom::UsbDeviceInfo", %"class.device::mojom::UsbDeviceInfo"* %3, i64 0, i32 18
  %11 = load i8, i8* %10, align 8
  br label %14

12:                                               ; preds = %14
  %13 = icmp eq %"class.mojo::StructPtr.23"* %21, %7
  br i1 %13, label %22, label %14

14:                                               ; preds = %9, %12
  %15 = phi %"class.mojo::StructPtr.23"* [ %5, %9 ], [ %21, %12 ]
  %16 = getelementptr inbounds %"class.mojo::StructPtr.23", %"class.mojo::StructPtr.23"* %15, i64 0, i32 0, i32 0, i32 0, i32 0
  %17 = load %"class.device::mojom::UsbConfigurationInfo"*, %"class.device::mojom::UsbConfigurationInfo"** %16, align 8
  %18 = getelementptr inbounds %"class.device::mojom::UsbConfigurationInfo", %"class.device::mojom::UsbConfigurationInfo"* %17, i64 0, i32 0
  %19 = load i8, i8* %18, align 8
  %20 = icmp eq i8 %19, %11
  %21 = getelementptr inbounds %"class.mojo::StructPtr.23", %"class.mojo::StructPtr.23"* %15, i64 1
  br i1 %20, label %22, label %12

22:                                               ; preds = %14, %12, %1
  %23 = phi %"class.device::mojom::UsbConfigurationInfo"* [ null, %1 ], [ null, %12 ], [ %17, %14 ]
  ret %"class.device::mojom::UsbConfigurationInfo"* %23
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6device9UsbDevice14CheckUsbAccessEN4base12OnceCallbackIFvbEEE(%"class.device::UsbDevice"* nocapture readnone, %"class.base::OnceCallback"* nocapture) unnamed_addr #1 align 2 {
  %3 = alloca %"class.base::OnceCallback", align 8
  %4 = bitcast %"class.base::OnceCallback"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %4) #14
  %5 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %1, i64 0, i32 0, i32 0, i32 0
  %6 = bitcast %"class.base::OnceCallback"* %1 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = bitcast %"class.base::OnceCallback"* %3 to i64*
  store i64 %7, i64* %8, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %5, align 8
  %9 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %3, i64 0, i32 0
  %10 = inttoptr i64 %7 to %"class.base::internal::BindStateBase"*
  %11 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %10, i64 0, i32 1
  %12 = bitcast void ()** %11 to void (%"class.base::internal::BindStateBase"*, i1)**
  %13 = load void (%"class.base::internal::BindStateBase"*, i1)*, void (%"class.base::internal::BindStateBase"*, i1)** %12, align 8
  tail call void %13(%"class.base::internal::BindStateBase"* %10, i1 zeroext true) #14
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %9) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %4) #14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6device9UsbDevice17RequestPermissionEN4base12OnceCallbackIFvbEEE(%"class.device::UsbDevice"* nocapture readnone, %"class.base::OnceCallback"* nocapture) unnamed_addr #1 align 2 {
  %3 = alloca %"class.base::OnceCallback", align 8
  %4 = bitcast %"class.base::OnceCallback"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %4) #14
  %5 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %1, i64 0, i32 0, i32 0, i32 0
  %6 = bitcast %"class.base::OnceCallback"* %1 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = bitcast %"class.base::OnceCallback"* %3 to i64*
  store i64 %7, i64* %8, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %5, align 8
  %9 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %3, i64 0, i32 0
  %10 = inttoptr i64 %7 to %"class.base::internal::BindStateBase"*
  %11 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %10, i64 0, i32 1
  %12 = bitcast void ()** %11 to void (%"class.base::internal::BindStateBase"*, i1)**
  %13 = load void (%"class.base::internal::BindStateBase"*, i1)*, void (%"class.base::internal::BindStateBase"*, i1)** %12, align 8
  tail call void %13(%"class.base::internal::BindStateBase"* %10, i1 zeroext true) #14
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %9) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %4) #14
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden zeroext i1 @_ZNK6device9UsbDevice18permission_grantedEv(%"class.device::UsbDevice"* nocapture readnone) unnamed_addr #0 align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6device9UsbDevice11AddObserverEPNS0_8ObserverE(%"class.device::UsbDevice"*, %"class.device::UsbDevice::Observer"*) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.device::UsbDevice", %"class.device::UsbDevice"* %0, i64 0, i32 4
  %4 = icmp eq %"class.device::UsbDevice::Observer"* %1, null
  br i1 %4, label %5, label %8

5:                                                ; preds = %2
  %6 = getelementptr inbounds %"class.device::UsbDevice", %"class.device::UsbDevice"* %0, i64 0, i32 4, i32 0, i32 0, i32 1
  %7 = load %"class.base::internal::UncheckedObserverAdapter"*, %"class.base::internal::UncheckedObserverAdapter"** %6, align 8
  br label %26

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.base::ObserverList", %"class.base::ObserverList"* %3, i64 0, i32 0, i32 0, i32 0
  %10 = load %"class.base::internal::UncheckedObserverAdapter"*, %"class.base::internal::UncheckedObserverAdapter"** %9, align 8
  %11 = getelementptr inbounds %"class.device::UsbDevice", %"class.device::UsbDevice"* %0, i64 0, i32 4, i32 0, i32 0, i32 1
  %12 = load %"class.base::internal::UncheckedObserverAdapter"*, %"class.base::internal::UncheckedObserverAdapter"** %11, align 8
  %13 = icmp eq %"class.base::internal::UncheckedObserverAdapter"* %10, %12
  %14 = bitcast %"class.device::UsbDevice::Observer"* %1 to i8*
  br i1 %13, label %23, label %15

15:                                               ; preds = %8, %20
  %16 = phi %"class.base::internal::UncheckedObserverAdapter"* [ %21, %20 ], [ %10, %8 ]
  %17 = getelementptr inbounds %"class.base::internal::UncheckedObserverAdapter", %"class.base::internal::UncheckedObserverAdapter"* %16, i64 0, i32 0
  %18 = load i8*, i8** %17, align 8
  %19 = icmp eq i8* %18, %14
  br i1 %19, label %23, label %20

20:                                               ; preds = %15
  %21 = getelementptr inbounds %"class.base::internal::UncheckedObserverAdapter", %"class.base::internal::UncheckedObserverAdapter"* %16, i64 1
  %22 = icmp eq %"class.base::internal::UncheckedObserverAdapter"* %21, %12
  br i1 %22, label %26, label %15

23:                                               ; preds = %15, %8
  %24 = phi %"class.base::internal::UncheckedObserverAdapter"* [ %10, %8 ], [ %16, %15 ]
  %25 = icmp eq %"class.base::internal::UncheckedObserverAdapter"* %24, %12
  br i1 %25, label %26, label %99

26:                                               ; preds = %20, %5, %23
  %27 = phi %"class.base::internal::UncheckedObserverAdapter"* [ %7, %5 ], [ %12, %23 ], [ %12, %20 ]
  %28 = getelementptr inbounds %"class.device::UsbDevice", %"class.device::UsbDevice"* %0, i64 0, i32 4, i32 2
  %29 = load i64, i64* %28, align 8
  %30 = add i64 %29, 1
  store i64 %30, i64* %28, align 8
  %31 = ptrtoint %"class.device::UsbDevice::Observer"* %1 to i64
  %32 = getelementptr inbounds %"class.device::UsbDevice", %"class.device::UsbDevice"* %0, i64 0, i32 4, i32 0, i32 0, i32 1
  %33 = getelementptr inbounds %"class.device::UsbDevice", %"class.device::UsbDevice"* %0, i64 0, i32 4, i32 0, i32 0, i32 2, i32 0, i32 0
  %34 = load %"class.base::internal::UncheckedObserverAdapter"*, %"class.base::internal::UncheckedObserverAdapter"** %33, align 8
  %35 = icmp ult %"class.base::internal::UncheckedObserverAdapter"* %27, %34
  %36 = ptrtoint %"class.base::internal::UncheckedObserverAdapter"* %34 to i64
  br i1 %35, label %37, label %42

37:                                               ; preds = %26
  %38 = bitcast %"class.base::internal::UncheckedObserverAdapter"* %27 to i64*
  store i64 %31, i64* %38, align 8
  %39 = getelementptr inbounds %"class.base::internal::UncheckedObserverAdapter", %"class.base::internal::UncheckedObserverAdapter"* %27, i64 1
  %40 = ptrtoint %"class.base::internal::UncheckedObserverAdapter"* %39 to i64
  %41 = bitcast %"class.base::internal::UncheckedObserverAdapter"** %32 to i64*
  store i64 %40, i64* %41, align 8
  br label %99

42:                                               ; preds = %26
  %43 = ptrtoint %"class.base::internal::UncheckedObserverAdapter"* %27 to i64
  %44 = bitcast %"class.base::internal::UncheckedObserverAdapter"** %32 to i64*
  %45 = bitcast %"class.base::ObserverList"* %3 to i64*
  %46 = load i64, i64* %45, align 8
  %47 = sub i64 %43, %46
  %48 = ashr exact i64 %47, 3
  %49 = add nsw i64 %48, 1
  %50 = icmp ugt i64 %49, 2305843009213693951
  br i1 %50, label %51, label %53

51:                                               ; preds = %42
  %52 = bitcast %"class.base::ObserverList"* %3 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %52) #15
  unreachable

53:                                               ; preds = %42
  %54 = bitcast %"class.base::internal::UncheckedObserverAdapter"** %33 to i64*
  %55 = sub i64 %36, %46
  %56 = ashr exact i64 %55, 3
  %57 = icmp ult i64 %56, 1152921504606846975
  br i1 %57, label %58, label %66

58:                                               ; preds = %53
  %59 = ashr exact i64 %55, 2
  %60 = icmp ult i64 %59, %49
  %61 = select i1 %60, i64 %49, i64 %59
  %62 = icmp eq i64 %61, 0
  br i1 %62, label %71, label %63

63:                                               ; preds = %58
  %64 = icmp ugt i64 %61, 2305843009213693951
  br i1 %64, label %65, label %66

65:                                               ; preds = %63
  tail call void @abort() #15
  unreachable

66:                                               ; preds = %63, %53
  %67 = phi i64 [ %61, %63 ], [ 2305843009213693951, %53 ]
  %68 = shl i64 %67, 3
  %69 = tail call i8* @_Znwm(i64 %68) #13
  %70 = bitcast i8* %69 to %"class.base::internal::UncheckedObserverAdapter"*
  br label %71

71:                                               ; preds = %66, %58
  %72 = phi i64 [ %67, %66 ], [ 0, %58 ]
  %73 = phi %"class.base::internal::UncheckedObserverAdapter"* [ %70, %66 ], [ null, %58 ]
  %74 = getelementptr inbounds %"class.base::internal::UncheckedObserverAdapter", %"class.base::internal::UncheckedObserverAdapter"* %73, i64 %48
  %75 = getelementptr inbounds %"class.base::internal::UncheckedObserverAdapter", %"class.base::internal::UncheckedObserverAdapter"* %73, i64 %72
  %76 = ptrtoint %"class.base::internal::UncheckedObserverAdapter"* %75 to i64
  %77 = bitcast %"class.base::internal::UncheckedObserverAdapter"* %74 to i64*
  store i64 %31, i64* %77, align 8
  %78 = getelementptr inbounds %"class.base::internal::UncheckedObserverAdapter", %"class.base::internal::UncheckedObserverAdapter"* %74, i64 1
  %79 = ptrtoint %"class.base::internal::UncheckedObserverAdapter"* %78 to i64
  %80 = getelementptr inbounds %"class.base::ObserverList", %"class.base::ObserverList"* %3, i64 0, i32 0, i32 0, i32 0
  %81 = load %"class.base::internal::UncheckedObserverAdapter"*, %"class.base::internal::UncheckedObserverAdapter"** %80, align 8
  %82 = load i64, i64* %44, align 8
  %83 = ptrtoint %"class.base::internal::UncheckedObserverAdapter"* %81 to i64
  %84 = sub i64 %82, %83
  %85 = ashr exact i64 %84, 3
  %86 = sub nsw i64 0, %85
  %87 = getelementptr inbounds %"class.base::internal::UncheckedObserverAdapter", %"class.base::internal::UncheckedObserverAdapter"* %74, i64 %86
  %88 = ptrtoint %"class.base::internal::UncheckedObserverAdapter"* %87 to i64
  %89 = icmp sgt i64 %84, 0
  br i1 %89, label %90, label %94

90:                                               ; preds = %71
  %91 = bitcast %"class.base::internal::UncheckedObserverAdapter"* %87 to i8*
  %92 = bitcast %"class.base::internal::UncheckedObserverAdapter"* %81 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %91, i8* align 8 %92, i64 %84, i1 false) #14
  %93 = load %"class.base::internal::UncheckedObserverAdapter"*, %"class.base::internal::UncheckedObserverAdapter"** %80, align 8
  br label %94

94:                                               ; preds = %90, %71
  %95 = phi %"class.base::internal::UncheckedObserverAdapter"* [ %81, %71 ], [ %93, %90 ]
  store i64 %88, i64* %45, align 8
  store i64 %79, i64* %44, align 8
  store i64 %76, i64* %54, align 8
  %96 = icmp eq %"class.base::internal::UncheckedObserverAdapter"* %95, null
  br i1 %96, label %99, label %97

97:                                               ; preds = %94
  %98 = bitcast %"class.base::internal::UncheckedObserverAdapter"* %95 to i8*
  tail call void @_ZdlPv(i8* %98) #13
  br label %99

99:                                               ; preds = %97, %94, %37, %23
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6device9UsbDevice14RemoveObserverEPNS0_8ObserverE(%"class.device::UsbDevice"*, %"class.device::UsbDevice::Observer"* readnone) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.device::UsbDevice", %"class.device::UsbDevice"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  %4 = load %"class.base::internal::UncheckedObserverAdapter"*, %"class.base::internal::UncheckedObserverAdapter"** %3, align 8
  %5 = getelementptr inbounds %"class.device::UsbDevice", %"class.device::UsbDevice"* %0, i64 0, i32 4, i32 0, i32 0, i32 1
  %6 = load %"class.base::internal::UncheckedObserverAdapter"*, %"class.base::internal::UncheckedObserverAdapter"** %5, align 8
  %7 = icmp eq %"class.base::internal::UncheckedObserverAdapter"* %4, %6
  %8 = bitcast %"class.device::UsbDevice::Observer"* %1 to i8*
  %9 = ptrtoint %"class.base::internal::UncheckedObserverAdapter"* %6 to i64
  br i1 %7, label %18, label %10

10:                                               ; preds = %2, %15
  %11 = phi %"class.base::internal::UncheckedObserverAdapter"* [ %16, %15 ], [ %4, %2 ]
  %12 = getelementptr inbounds %"class.base::internal::UncheckedObserverAdapter", %"class.base::internal::UncheckedObserverAdapter"* %11, i64 0, i32 0
  %13 = load i8*, i8** %12, align 8
  %14 = icmp eq i8* %13, %8
  br i1 %14, label %18, label %15

15:                                               ; preds = %10
  %16 = getelementptr inbounds %"class.base::internal::UncheckedObserverAdapter", %"class.base::internal::UncheckedObserverAdapter"* %11, i64 1
  %17 = icmp eq %"class.base::internal::UncheckedObserverAdapter"* %16, %6
  br i1 %17, label %47, label %10

18:                                               ; preds = %10, %2
  %19 = phi %"class.base::internal::UncheckedObserverAdapter"* [ %4, %2 ], [ %11, %10 ]
  %20 = icmp eq %"class.base::internal::UncheckedObserverAdapter"* %19, %6
  br i1 %20, label %47, label %21

21:                                               ; preds = %18
  %22 = getelementptr inbounds %"class.base::internal::UncheckedObserverAdapter", %"class.base::internal::UncheckedObserverAdapter"* %19, i64 0, i32 0
  %23 = load i8*, i8** %22, align 8
  %24 = icmp eq i8* %23, null
  br i1 %24, label %29, label %25

25:                                               ; preds = %21
  %26 = getelementptr inbounds %"class.device::UsbDevice", %"class.device::UsbDevice"* %0, i64 0, i32 4, i32 2
  %27 = load i64, i64* %26, align 8
  %28 = add i64 %27, -1
  store i64 %28, i64* %26, align 8
  br label %29

29:                                               ; preds = %25, %21
  %30 = getelementptr inbounds %"class.device::UsbDevice", %"class.device::UsbDevice"* %0, i64 0, i32 4, i32 1, i32 0, i32 0, i32 1
  %31 = bitcast %"class.base::internal::LinkNodeBase"** %30 to %"class.base::LinkNode"**
  %32 = load %"class.base::LinkNode"*, %"class.base::LinkNode"** %31, align 8
  %33 = getelementptr inbounds %"class.device::UsbDevice", %"class.device::UsbDevice"* %0, i64 0, i32 4, i32 1, i32 0
  %34 = icmp eq %"class.base::LinkNode"* %32, %33
  br i1 %34, label %35, label %46

35:                                               ; preds = %29
  %36 = getelementptr inbounds %"class.base::internal::UncheckedObserverAdapter", %"class.base::internal::UncheckedObserverAdapter"* %19, i64 1
  %37 = ptrtoint %"class.base::internal::UncheckedObserverAdapter"* %36 to i64
  %38 = sub i64 %9, %37
  %39 = ashr exact i64 %38, 3
  %40 = icmp eq i64 %38, 0
  br i1 %40, label %44, label %41

41:                                               ; preds = %35
  %42 = bitcast %"class.base::internal::UncheckedObserverAdapter"* %19 to i8*
  %43 = bitcast %"class.base::internal::UncheckedObserverAdapter"* %36 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %42, i8* align 8 %43, i64 %38, i1 false) #14
  br label %44

44:                                               ; preds = %41, %35
  %45 = getelementptr inbounds %"class.base::internal::UncheckedObserverAdapter", %"class.base::internal::UncheckedObserverAdapter"* %19, i64 %39
  store %"class.base::internal::UncheckedObserverAdapter"* %45, %"class.base::internal::UncheckedObserverAdapter"** %5, align 8
  br label %47

46:                                               ; preds = %29
  store i8* null, i8** %22, align 8
  br label %47

47:                                               ; preds = %15, %18, %44, %46
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6device9UsbDevice19NotifyDeviceRemovedEv(%"class.device::UsbDevice"*) local_unnamed_addr #1 align 2 {
  %2 = alloca %"class.base::ObserverList<device::UsbDevice::Observer, true, true, base::internal::UncheckedObserverAdapter>::Iter", align 8
  %3 = alloca %"class.base::ObserverList<device::UsbDevice::Observer, true, true, base::internal::UncheckedObserverAdapter>::Iter", align 8
  %4 = getelementptr inbounds %"class.device::UsbDevice", %"class.device::UsbDevice"* %0, i64 0, i32 4
  %5 = bitcast %"class.base::ObserverList<device::UsbDevice::Observer, true, true, base::internal::UncheckedObserverAdapter>::Iter"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %5) #14
  %6 = getelementptr inbounds %"class.base::ObserverList<device::UsbDevice::Observer, true, true, base::internal::UncheckedObserverAdapter>::Iter", %"class.base::ObserverList<device::UsbDevice::Observer, true, true, base::internal::UncheckedObserverAdapter>::Iter"* %2, i64 0, i32 0, i32 1
  %7 = getelementptr inbounds %"class.base::ObserverList<device::UsbDevice::Observer, true, true, base::internal::UncheckedObserverAdapter>::Iter", %"class.base::ObserverList<device::UsbDevice::Observer, true, true, base::internal::UncheckedObserverAdapter>::Iter"* %2, i64 0, i32 1
  %8 = getelementptr inbounds %"class.base::ObserverList<device::UsbDevice::Observer, true, true, base::internal::UncheckedObserverAdapter>::Iter", %"class.base::ObserverList<device::UsbDevice::Observer, true, true, base::internal::UncheckedObserverAdapter>::Iter"* %2, i64 0, i32 2
  %9 = getelementptr inbounds %"class.base::ObserverList", %"class.base::ObserverList"* %4, i64 0, i32 0, i32 0, i32 0
  %10 = bitcast %"class.base::ObserverList<device::UsbDevice::Observer, true, true, base::internal::UncheckedObserverAdapter>::Iter"* %2 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %10, i8 -86, i64 40, i1 false)
  %11 = load %"class.base::internal::UncheckedObserverAdapter"*, %"class.base::internal::UncheckedObserverAdapter"** %9, align 8, !noalias !39
  %12 = getelementptr inbounds %"class.device::UsbDevice", %"class.device::UsbDevice"* %0, i64 0, i32 4, i32 0, i32 0, i32 1
  %13 = load %"class.base::internal::UncheckedObserverAdapter"*, %"class.base::internal::UncheckedObserverAdapter"** %12, align 8, !noalias !39
  %14 = icmp eq %"class.base::internal::UncheckedObserverAdapter"* %11, %13
  %15 = getelementptr inbounds %"class.base::ObserverList<device::UsbDevice::Observer, true, true, base::internal::UncheckedObserverAdapter>::Iter", %"class.base::ObserverList<device::UsbDevice::Observer, true, true, base::internal::UncheckedObserverAdapter>::Iter"* %2, i64 0, i32 0, i32 0, i32 0
  call void @_ZN4base8internal12LinkNodeBaseC2Ev(%"class.base::internal::LinkNodeBase"* nonnull %15) #14
  br i1 %14, label %16, label %18

16:                                               ; preds = %1
  %17 = bitcast %"class.base::ObserverList"** %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %17, i8 0, i64 24, i1 false) #14, !alias.scope !39
  br label %58

18:                                               ; preds = %1
  store %"class.base::ObserverList"* %4, %"class.base::ObserverList"** %6, align 8
  %19 = getelementptr inbounds %"class.device::UsbDevice", %"class.device::UsbDevice"* %0, i64 0, i32 4, i32 1, i32 0, i32 0
  call void @_ZN4base8internal12LinkNodeBase16InsertBeforeBaseEPS1_(%"class.base::internal::LinkNodeBase"* nonnull %15, %"class.base::internal::LinkNodeBase"* %19) #14
  store i64 0, i64* %7, align 8
  %20 = getelementptr inbounds %"class.device::UsbDevice", %"class.device::UsbDevice"* %0, i64 0, i32 4, i32 3
  %21 = load i32, i32* %20, align 8
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %30, label %23

23:                                               ; preds = %18
  %24 = bitcast %"class.base::internal::UncheckedObserverAdapter"** %12 to i64*
  %25 = load i64, i64* %24, align 8
  %26 = bitcast %"class.base::ObserverList"* %4 to i64*
  %27 = load i64, i64* %26, align 8
  %28 = sub i64 %25, %27
  %29 = ashr exact i64 %28, 3
  br label %30

30:                                               ; preds = %23, %18
  %31 = phi i64 [ %29, %23 ], [ -1, %18 ]
  store i64 %31, i64* %8, align 8
  %32 = load %"class.base::ObserverList"*, %"class.base::ObserverList"** %6, align 8
  %33 = getelementptr inbounds %"class.base::ObserverList", %"class.base::ObserverList"* %32, i64 0, i32 0, i32 0, i32 1
  %34 = bitcast %"class.base::internal::UncheckedObserverAdapter"** %33 to i64*
  %35 = load i64, i64* %34, align 8
  %36 = bitcast %"class.base::ObserverList"* %32 to i64*
  %37 = load i64, i64* %36, align 8
  %38 = sub i64 %35, %37
  %39 = ashr exact i64 %38, 3
  %40 = icmp ult i64 %39, %31
  %41 = select i1 %40, i64 %39, i64 %31
  %42 = icmp eq i64 %41, 0
  br i1 %42, label %58, label %43

43:                                               ; preds = %30
  %44 = inttoptr i64 %37 to %"class.base::internal::UncheckedObserverAdapter"*
  %45 = getelementptr inbounds %"class.base::ObserverList", %"class.base::ObserverList"* %32, i64 0, i32 0, i32 0, i32 0
  %46 = getelementptr inbounds %"class.base::internal::UncheckedObserverAdapter", %"class.base::internal::UncheckedObserverAdapter"* %44, i64 0, i32 0
  %47 = load i8*, i8** %46, align 8
  %48 = icmp eq i8* %47, null
  br i1 %48, label %49, label %58

49:                                               ; preds = %43, %53
  %50 = phi i64 [ %51, %53 ], [ 0, %43 ]
  %51 = add nuw i64 %50, 1
  store i64 %51, i64* %7, align 8
  %52 = icmp ult i64 %51, %41
  br i1 %52, label %53, label %58

53:                                               ; preds = %49
  %54 = load %"class.base::internal::UncheckedObserverAdapter"*, %"class.base::internal::UncheckedObserverAdapter"** %45, align 8
  %55 = getelementptr inbounds %"class.base::internal::UncheckedObserverAdapter", %"class.base::internal::UncheckedObserverAdapter"* %54, i64 %51, i32 0
  %56 = load i8*, i8** %55, align 8
  %57 = icmp eq i8* %56, null
  br i1 %57, label %49, label %58

58:                                               ; preds = %53, %49, %43, %30, %16
  %59 = bitcast %"class.base::ObserverList<device::UsbDevice::Observer, true, true, base::internal::UncheckedObserverAdapter>::Iter"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %59) #14
  %60 = getelementptr inbounds %"class.base::ObserverList<device::UsbDevice::Observer, true, true, base::internal::UncheckedObserverAdapter>::Iter", %"class.base::ObserverList<device::UsbDevice::Observer, true, true, base::internal::UncheckedObserverAdapter>::Iter"* %3, i64 0, i32 0, i32 1
  %61 = getelementptr inbounds %"class.base::ObserverList<device::UsbDevice::Observer, true, true, base::internal::UncheckedObserverAdapter>::Iter", %"class.base::ObserverList<device::UsbDevice::Observer, true, true, base::internal::UncheckedObserverAdapter>::Iter"* %3, i64 0, i32 1
  %62 = getelementptr inbounds %"class.base::ObserverList<device::UsbDevice::Observer, true, true, base::internal::UncheckedObserverAdapter>::Iter", %"class.base::ObserverList<device::UsbDevice::Observer, true, true, base::internal::UncheckedObserverAdapter>::Iter"* %3, i64 0, i32 2
  %63 = getelementptr inbounds %"class.base::ObserverList<device::UsbDevice::Observer, true, true, base::internal::UncheckedObserverAdapter>::Iter", %"class.base::ObserverList<device::UsbDevice::Observer, true, true, base::internal::UncheckedObserverAdapter>::Iter"* %3, i64 0, i32 0, i32 0, i32 0
  %64 = bitcast %"class.base::ObserverList<device::UsbDevice::Observer, true, true, base::internal::UncheckedObserverAdapter>::Iter"* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %64, i8 -86, i64 40, i1 false)
  call void @_ZN4base8internal12LinkNodeBaseC2Ev(%"class.base::internal::LinkNodeBase"* nonnull %63) #14
  %65 = bitcast %"class.base::ObserverList"** %60 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %65, i8 0, i64 24, i1 false) #14, !alias.scope !42
  %66 = icmp eq %"class.device::UsbDevice"* %0, null
  %67 = getelementptr inbounds %"class.device::UsbDevice", %"class.device::UsbDevice"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %68 = load %"class.base::ObserverList"*, %"class.base::ObserverList"** %6, align 8
  br label %69

69:                                               ; preds = %312, %58
  %70 = phi %"class.base::ObserverList"* [ %68, %58 ], [ %310, %312 ]
  %71 = icmp eq %"class.base::ObserverList"* %70, null
  br i1 %71, label %87, label %72

72:                                               ; preds = %69
  %73 = load i64, i64* %7, align 8
  %74 = getelementptr inbounds %"class.base::ObserverList", %"class.base::ObserverList"* %70, i64 0, i32 0, i32 0, i32 1
  %75 = bitcast %"class.base::internal::UncheckedObserverAdapter"** %74 to i64*
  %76 = load i64, i64* %75, align 8
  %77 = bitcast %"class.base::ObserverList"* %70 to i64*
  %78 = load i64, i64* %77, align 8
  %79 = sub i64 %76, %78
  %80 = ashr exact i64 %79, 3
  %81 = load i64, i64* %8, align 8
  %82 = icmp ult i64 %80, %81
  %83 = select i1 %82, i64 %80, i64 %81
  %84 = icmp eq i64 %73, %83
  br i1 %84, label %87, label %85

85:                                               ; preds = %72
  %86 = load %"class.base::ObserverList"*, %"class.base::ObserverList"** %60, align 8
  br label %103

87:                                               ; preds = %72, %69
  %88 = load %"class.base::ObserverList"*, %"class.base::ObserverList"** %60, align 8
  %89 = icmp eq %"class.base::ObserverList"* %88, null
  br i1 %89, label %203, label %90

90:                                               ; preds = %87
  %91 = load i64, i64* %61, align 8
  %92 = getelementptr inbounds %"class.base::ObserverList", %"class.base::ObserverList"* %88, i64 0, i32 0, i32 0, i32 1
  %93 = bitcast %"class.base::internal::UncheckedObserverAdapter"** %92 to i64*
  %94 = load i64, i64* %93, align 8
  %95 = bitcast %"class.base::ObserverList"* %88 to i64*
  %96 = load i64, i64* %95, align 8
  %97 = sub i64 %94, %96
  %98 = ashr exact i64 %97, 3
  %99 = load i64, i64* %62, align 8
  %100 = icmp ult i64 %98, %99
  %101 = select i1 %100, i64 %98, i64 %99
  %102 = icmp eq i64 %91, %101
  br i1 %102, label %112, label %103

103:                                              ; preds = %90, %85
  %104 = phi %"class.base::ObserverList"* [ %86, %85 ], [ %88, %90 ]
  %105 = icmp eq %"class.base::ObserverList"* %70, %104
  %106 = load i64, i64* %7, align 8
  %107 = load i64, i64* %61, align 8
  %108 = icmp eq i64 %106, %107
  %109 = and i1 %105, %108
  br i1 %109, label %110, label %297

110:                                              ; preds = %103
  %111 = icmp eq %"class.base::ObserverList"* %70, null
  br i1 %111, label %203, label %112

112:                                              ; preds = %90, %110
  %113 = phi %"class.base::ObserverList"* [ %70, %110 ], [ %88, %90 ]
  %114 = getelementptr inbounds %"class.base::ObserverList", %"class.base::ObserverList"* %113, i64 0, i32 1
  %115 = getelementptr inbounds %"class.base::ObserverList", %"class.base::ObserverList"* %113, i64 0, i32 1, i32 0, i32 0, i32 1
  %116 = bitcast %"class.base::internal::LinkNodeBase"** %115 to %"class.base::LinkNode"**
  %117 = load %"class.base::LinkNode"*, %"class.base::LinkNode"** %116, align 8
  %118 = bitcast %"class.base::LinkedList"* %114 to %"class.base::LinkNode"**
  %119 = load %"class.base::LinkNode"*, %"class.base::LinkNode"** %118, align 8
  %120 = icmp eq %"class.base::LinkNode"* %117, %119
  br i1 %120, label %121, label %199

121:                                              ; preds = %112
  %122 = getelementptr inbounds %"class.base::ObserverList", %"class.base::ObserverList"* %113, i64 0, i32 0, i32 0, i32 0
  %123 = load %"class.base::internal::UncheckedObserverAdapter"*, %"class.base::internal::UncheckedObserverAdapter"** %122, align 8
  %124 = getelementptr inbounds %"class.base::ObserverList", %"class.base::ObserverList"* %113, i64 0, i32 0, i32 0, i32 1
  %125 = load %"class.base::internal::UncheckedObserverAdapter"*, %"class.base::internal::UncheckedObserverAdapter"** %124, align 8
  %126 = icmp eq %"class.base::internal::UncheckedObserverAdapter"* %123, %125
  br i1 %126, label %135, label %127

127:                                              ; preds = %121, %132
  %128 = phi %"class.base::internal::UncheckedObserverAdapter"* [ %133, %132 ], [ %123, %121 ]
  %129 = getelementptr inbounds %"class.base::internal::UncheckedObserverAdapter", %"class.base::internal::UncheckedObserverAdapter"* %128, i64 0, i32 0
  %130 = load i8*, i8** %129, align 8
  %131 = icmp eq i8* %130, null
  br i1 %131, label %135, label %132

132:                                              ; preds = %127
  %133 = getelementptr inbounds %"class.base::internal::UncheckedObserverAdapter", %"class.base::internal::UncheckedObserverAdapter"* %128, i64 1
  %134 = icmp eq %"class.base::internal::UncheckedObserverAdapter"* %133, %125
  br i1 %134, label %199, label %127

135:                                              ; preds = %127, %121
  %136 = phi %"class.base::internal::UncheckedObserverAdapter"* [ %123, %121 ], [ %128, %127 ]
  %137 = ptrtoint %"class.base::internal::UncheckedObserverAdapter"* %136 to i64
  %138 = icmp eq %"class.base::internal::UncheckedObserverAdapter"* %136, %125
  br i1 %138, label %199, label %139

139:                                              ; preds = %135
  %140 = getelementptr inbounds %"class.base::internal::UncheckedObserverAdapter", %"class.base::internal::UncheckedObserverAdapter"* %136, i64 1
  %141 = icmp eq %"class.base::internal::UncheckedObserverAdapter"* %140, %125
  br i1 %141, label %194, label %142

142:                                              ; preds = %139
  %143 = getelementptr %"class.base::internal::UncheckedObserverAdapter", %"class.base::internal::UncheckedObserverAdapter"* %125, i64 -2, i32 0
  %144 = ptrtoint i8** %143 to i64
  %145 = sub i64 %144, %137
  %146 = lshr i64 %145, 3
  %147 = add nuw nsw i64 %146, 1
  %148 = and i64 %147, 3
  %149 = icmp eq i64 %148, 0
  br i1 %149, label %168, label %150

150:                                              ; preds = %142, %163
  %151 = phi %"class.base::internal::UncheckedObserverAdapter"* [ %165, %163 ], [ %140, %142 ]
  %152 = phi i64 [ %164, %163 ], [ %137, %142 ]
  %153 = phi i64 [ %166, %163 ], [ %148, %142 ]
  %154 = getelementptr inbounds %"class.base::internal::UncheckedObserverAdapter", %"class.base::internal::UncheckedObserverAdapter"* %151, i64 0, i32 0
  %155 = load i8*, i8** %154, align 8
  %156 = icmp eq i8* %155, null
  br i1 %156, label %163, label %157

157:                                              ; preds = %150
  %158 = ptrtoint i8* %155 to i64
  %159 = inttoptr i64 %152 to %"class.base::internal::UncheckedObserverAdapter"*
  %160 = inttoptr i64 %152 to i64*
  store i64 %158, i64* %160, align 8
  %161 = getelementptr inbounds %"class.base::internal::UncheckedObserverAdapter", %"class.base::internal::UncheckedObserverAdapter"* %159, i64 1
  %162 = ptrtoint %"class.base::internal::UncheckedObserverAdapter"* %161 to i64
  br label %163

163:                                              ; preds = %157, %150
  %164 = phi i64 [ %152, %150 ], [ %162, %157 ]
  %165 = getelementptr inbounds %"class.base::internal::UncheckedObserverAdapter", %"class.base::internal::UncheckedObserverAdapter"* %151, i64 1
  %166 = add i64 %153, -1
  %167 = icmp eq i64 %166, 0
  br i1 %167, label %168, label %150, !llvm.loop !45

168:                                              ; preds = %163, %142
  %169 = phi i64 [ undef, %142 ], [ %164, %163 ]
  %170 = phi %"class.base::internal::UncheckedObserverAdapter"* [ %140, %142 ], [ %165, %163 ]
  %171 = phi i64 [ %137, %142 ], [ %164, %163 ]
  %172 = icmp ult i64 %145, 24
  br i1 %172, label %190, label %173

173:                                              ; preds = %168, %402
  %174 = phi %"class.base::internal::UncheckedObserverAdapter"* [ %404, %402 ], [ %170, %168 ]
  %175 = phi i64 [ %403, %402 ], [ %171, %168 ]
  %176 = getelementptr inbounds %"class.base::internal::UncheckedObserverAdapter", %"class.base::internal::UncheckedObserverAdapter"* %174, i64 0, i32 0
  %177 = load i8*, i8** %176, align 8
  %178 = icmp eq i8* %177, null
  br i1 %178, label %185, label %179

179:                                              ; preds = %173
  %180 = ptrtoint i8* %177 to i64
  %181 = inttoptr i64 %175 to %"class.base::internal::UncheckedObserverAdapter"*
  %182 = inttoptr i64 %175 to i64*
  store i64 %180, i64* %182, align 8
  %183 = getelementptr inbounds %"class.base::internal::UncheckedObserverAdapter", %"class.base::internal::UncheckedObserverAdapter"* %181, i64 1
  %184 = ptrtoint %"class.base::internal::UncheckedObserverAdapter"* %183 to i64
  br label %185

185:                                              ; preds = %179, %173
  %186 = phi i64 [ %175, %173 ], [ %184, %179 ]
  %187 = getelementptr inbounds %"class.base::internal::UncheckedObserverAdapter", %"class.base::internal::UncheckedObserverAdapter"* %174, i64 1, i32 0
  %188 = load i8*, i8** %187, align 8
  %189 = icmp eq i8* %188, null
  br i1 %189, label %380, label %374

190:                                              ; preds = %402, %168
  %191 = phi i64 [ %169, %168 ], [ %403, %402 ]
  %192 = inttoptr i64 %191 to %"class.base::internal::UncheckedObserverAdapter"*
  %193 = load %"class.base::internal::UncheckedObserverAdapter"*, %"class.base::internal::UncheckedObserverAdapter"** %124, align 8
  br label %194

194:                                              ; preds = %190, %139
  %195 = phi %"class.base::internal::UncheckedObserverAdapter"* [ %125, %139 ], [ %193, %190 ]
  %196 = phi %"class.base::internal::UncheckedObserverAdapter"* [ %136, %139 ], [ %192, %190 ]
  %197 = icmp eq %"class.base::internal::UncheckedObserverAdapter"* %196, %195
  br i1 %197, label %199, label %198

198:                                              ; preds = %194
  store %"class.base::internal::UncheckedObserverAdapter"* %196, %"class.base::internal::UncheckedObserverAdapter"** %124, align 8
  br label %199

199:                                              ; preds = %132, %198, %194, %135, %112
  %200 = load %"class.base::ObserverList"*, %"class.base::ObserverList"** %60, align 8
  %201 = icmp eq %"class.base::ObserverList"* %200, null
  br i1 %201, label %203, label %202

202:                                              ; preds = %199
  store %"class.base::ObserverList"* null, %"class.base::ObserverList"** %60, align 8
  call void @_ZN4base8internal12LinkNodeBase14RemoveFromListEv(%"class.base::internal::LinkNodeBase"* nonnull %63) #14
  br label %203

203:                                              ; preds = %87, %110, %199, %202
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %59) #14
  %204 = load %"class.base::ObserverList"*, %"class.base::ObserverList"** %6, align 8
  %205 = icmp eq %"class.base::ObserverList"* %204, null
  br i1 %205, label %296, label %206

206:                                              ; preds = %203
  %207 = getelementptr inbounds %"class.base::ObserverList", %"class.base::ObserverList"* %204, i64 0, i32 1
  %208 = getelementptr inbounds %"class.base::ObserverList", %"class.base::ObserverList"* %204, i64 0, i32 1, i32 0, i32 0, i32 1
  %209 = bitcast %"class.base::internal::LinkNodeBase"** %208 to %"class.base::LinkNode"**
  %210 = load %"class.base::LinkNode"*, %"class.base::LinkNode"** %209, align 8
  %211 = bitcast %"class.base::LinkedList"* %207 to %"class.base::LinkNode"**
  %212 = load %"class.base::LinkNode"*, %"class.base::LinkNode"** %211, align 8
  %213 = icmp eq %"class.base::LinkNode"* %210, %212
  br i1 %213, label %214, label %292

214:                                              ; preds = %206
  %215 = getelementptr inbounds %"class.base::ObserverList", %"class.base::ObserverList"* %204, i64 0, i32 0, i32 0, i32 0
  %216 = load %"class.base::internal::UncheckedObserverAdapter"*, %"class.base::internal::UncheckedObserverAdapter"** %215, align 8
  %217 = getelementptr inbounds %"class.base::ObserverList", %"class.base::ObserverList"* %204, i64 0, i32 0, i32 0, i32 1
  %218 = load %"class.base::internal::UncheckedObserverAdapter"*, %"class.base::internal::UncheckedObserverAdapter"** %217, align 8
  %219 = icmp eq %"class.base::internal::UncheckedObserverAdapter"* %216, %218
  br i1 %219, label %228, label %220

220:                                              ; preds = %214, %225
  %221 = phi %"class.base::internal::UncheckedObserverAdapter"* [ %226, %225 ], [ %216, %214 ]
  %222 = getelementptr inbounds %"class.base::internal::UncheckedObserverAdapter", %"class.base::internal::UncheckedObserverAdapter"* %221, i64 0, i32 0
  %223 = load i8*, i8** %222, align 8
  %224 = icmp eq i8* %223, null
  br i1 %224, label %228, label %225

225:                                              ; preds = %220
  %226 = getelementptr inbounds %"class.base::internal::UncheckedObserverAdapter", %"class.base::internal::UncheckedObserverAdapter"* %221, i64 1
  %227 = icmp eq %"class.base::internal::UncheckedObserverAdapter"* %226, %218
  br i1 %227, label %292, label %220

228:                                              ; preds = %220, %214
  %229 = phi %"class.base::internal::UncheckedObserverAdapter"* [ %216, %214 ], [ %221, %220 ]
  %230 = ptrtoint %"class.base::internal::UncheckedObserverAdapter"* %229 to i64
  %231 = icmp eq %"class.base::internal::UncheckedObserverAdapter"* %229, %218
  br i1 %231, label %292, label %232

232:                                              ; preds = %228
  %233 = getelementptr inbounds %"class.base::internal::UncheckedObserverAdapter", %"class.base::internal::UncheckedObserverAdapter"* %229, i64 1
  %234 = icmp eq %"class.base::internal::UncheckedObserverAdapter"* %233, %218
  br i1 %234, label %287, label %235

235:                                              ; preds = %232
  %236 = getelementptr %"class.base::internal::UncheckedObserverAdapter", %"class.base::internal::UncheckedObserverAdapter"* %218, i64 -2, i32 0
  %237 = ptrtoint i8** %236 to i64
  %238 = sub i64 %237, %230
  %239 = lshr i64 %238, 3
  %240 = add nuw nsw i64 %239, 1
  %241 = and i64 %240, 3
  %242 = icmp eq i64 %241, 0
  br i1 %242, label %261, label %243

243:                                              ; preds = %235, %256
  %244 = phi %"class.base::internal::UncheckedObserverAdapter"* [ %258, %256 ], [ %233, %235 ]
  %245 = phi i64 [ %257, %256 ], [ %230, %235 ]
  %246 = phi i64 [ %259, %256 ], [ %241, %235 ]
  %247 = getelementptr inbounds %"class.base::internal::UncheckedObserverAdapter", %"class.base::internal::UncheckedObserverAdapter"* %244, i64 0, i32 0
  %248 = load i8*, i8** %247, align 8
  %249 = icmp eq i8* %248, null
  br i1 %249, label %256, label %250

250:                                              ; preds = %243
  %251 = ptrtoint i8* %248 to i64
  %252 = inttoptr i64 %245 to %"class.base::internal::UncheckedObserverAdapter"*
  %253 = inttoptr i64 %245 to i64*
  store i64 %251, i64* %253, align 8
  %254 = getelementptr inbounds %"class.base::internal::UncheckedObserverAdapter", %"class.base::internal::UncheckedObserverAdapter"* %252, i64 1
  %255 = ptrtoint %"class.base::internal::UncheckedObserverAdapter"* %254 to i64
  br label %256

256:                                              ; preds = %250, %243
  %257 = phi i64 [ %245, %243 ], [ %255, %250 ]
  %258 = getelementptr inbounds %"class.base::internal::UncheckedObserverAdapter", %"class.base::internal::UncheckedObserverAdapter"* %244, i64 1
  %259 = add i64 %246, -1
  %260 = icmp eq i64 %259, 0
  br i1 %260, label %261, label %243, !llvm.loop !46

261:                                              ; preds = %256, %235
  %262 = phi i64 [ undef, %235 ], [ %257, %256 ]
  %263 = phi %"class.base::internal::UncheckedObserverAdapter"* [ %233, %235 ], [ %258, %256 ]
  %264 = phi i64 [ %230, %235 ], [ %257, %256 ]
  %265 = icmp ult i64 %238, 24
  br i1 %265, label %283, label %266

266:                                              ; preds = %261, %370
  %267 = phi %"class.base::internal::UncheckedObserverAdapter"* [ %372, %370 ], [ %263, %261 ]
  %268 = phi i64 [ %371, %370 ], [ %264, %261 ]
  %269 = getelementptr inbounds %"class.base::internal::UncheckedObserverAdapter", %"class.base::internal::UncheckedObserverAdapter"* %267, i64 0, i32 0
  %270 = load i8*, i8** %269, align 8
  %271 = icmp eq i8* %270, null
  br i1 %271, label %278, label %272

272:                                              ; preds = %266
  %273 = ptrtoint i8* %270 to i64
  %274 = inttoptr i64 %268 to %"class.base::internal::UncheckedObserverAdapter"*
  %275 = inttoptr i64 %268 to i64*
  store i64 %273, i64* %275, align 8
  %276 = getelementptr inbounds %"class.base::internal::UncheckedObserverAdapter", %"class.base::internal::UncheckedObserverAdapter"* %274, i64 1
  %277 = ptrtoint %"class.base::internal::UncheckedObserverAdapter"* %276 to i64
  br label %278

278:                                              ; preds = %272, %266
  %279 = phi i64 [ %268, %266 ], [ %277, %272 ]
  %280 = getelementptr inbounds %"class.base::internal::UncheckedObserverAdapter", %"class.base::internal::UncheckedObserverAdapter"* %267, i64 1, i32 0
  %281 = load i8*, i8** %280, align 8
  %282 = icmp eq i8* %281, null
  br i1 %282, label %348, label %342

283:                                              ; preds = %370, %261
  %284 = phi i64 [ %262, %261 ], [ %371, %370 ]
  %285 = inttoptr i64 %284 to %"class.base::internal::UncheckedObserverAdapter"*
  %286 = load %"class.base::internal::UncheckedObserverAdapter"*, %"class.base::internal::UncheckedObserverAdapter"** %217, align 8
  br label %287

287:                                              ; preds = %283, %232
  %288 = phi %"class.base::internal::UncheckedObserverAdapter"* [ %218, %232 ], [ %286, %283 ]
  %289 = phi %"class.base::internal::UncheckedObserverAdapter"* [ %229, %232 ], [ %285, %283 ]
  %290 = icmp eq %"class.base::internal::UncheckedObserverAdapter"* %289, %288
  br i1 %290, label %292, label %291

291:                                              ; preds = %287
  store %"class.base::internal::UncheckedObserverAdapter"* %289, %"class.base::internal::UncheckedObserverAdapter"** %217, align 8
  br label %292

292:                                              ; preds = %225, %291, %287, %228, %206
  %293 = load %"class.base::ObserverList"*, %"class.base::ObserverList"** %6, align 8
  %294 = icmp eq %"class.base::ObserverList"* %293, null
  br i1 %294, label %296, label %295

295:                                              ; preds = %292
  store %"class.base::ObserverList"* null, %"class.base::ObserverList"** %6, align 8
  call void @_ZN4base8internal12LinkNodeBase14RemoveFromListEv(%"class.base::internal::LinkNodeBase"* nonnull %15) #14
  br label %296

296:                                              ; preds = %203, %292, %295
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %5) #14
  ret void

297:                                              ; preds = %103
  %298 = getelementptr inbounds %"class.base::ObserverList", %"class.base::ObserverList"* %70, i64 0, i32 0, i32 0, i32 0
  %299 = load %"class.base::internal::UncheckedObserverAdapter"*, %"class.base::internal::UncheckedObserverAdapter"** %298, align 8
  %300 = getelementptr inbounds %"class.base::internal::UncheckedObserverAdapter", %"class.base::internal::UncheckedObserverAdapter"* %299, i64 %106
  %301 = bitcast %"class.base::internal::UncheckedObserverAdapter"* %300 to %"class.device::UsbDevice::Observer"**
  %302 = load %"class.device::UsbDevice::Observer"*, %"class.device::UsbDevice::Observer"** %301, align 8
  br i1 %66, label %305, label %303

303:                                              ; preds = %297
  %304 = atomicrmw add i32* %67, i32 1 monotonic
  br label %305

305:                                              ; preds = %297, %303
  %306 = bitcast %"class.device::UsbDevice::Observer"* %302 to void (%"class.device::UsbDevice::Observer"*, %"class.device::UsbDevice"*)***
  %307 = load void (%"class.device::UsbDevice::Observer"*, %"class.device::UsbDevice"*)**, void (%"class.device::UsbDevice::Observer"*, %"class.device::UsbDevice"*)*** %306, align 8
  %308 = getelementptr inbounds void (%"class.device::UsbDevice::Observer"*, %"class.device::UsbDevice"*)*, void (%"class.device::UsbDevice::Observer"*, %"class.device::UsbDevice"*)** %307, i64 2
  %309 = load void (%"class.device::UsbDevice::Observer"*, %"class.device::UsbDevice"*)*, void (%"class.device::UsbDevice::Observer"*, %"class.device::UsbDevice"*)** %308, align 8
  call void %309(%"class.device::UsbDevice::Observer"* %302, %"class.device::UsbDevice"* %0) #14
  %310 = load %"class.base::ObserverList"*, %"class.base::ObserverList"** %6, align 8
  %311 = icmp eq %"class.base::ObserverList"* %310, null
  br i1 %311, label %312, label %313

312:                                              ; preds = %337, %333, %305, %313, %327
  br label %69

313:                                              ; preds = %305
  %314 = load i64, i64* %7, align 8
  %315 = add i64 %314, 1
  store i64 %315, i64* %7, align 8
  %316 = getelementptr inbounds %"class.base::ObserverList", %"class.base::ObserverList"* %310, i64 0, i32 0, i32 0, i32 1
  %317 = bitcast %"class.base::internal::UncheckedObserverAdapter"** %316 to i64*
  %318 = load i64, i64* %317, align 8
  %319 = bitcast %"class.base::ObserverList"* %310 to i64*
  %320 = load i64, i64* %319, align 8
  %321 = sub i64 %318, %320
  %322 = ashr exact i64 %321, 3
  %323 = load i64, i64* %8, align 8
  %324 = icmp ult i64 %322, %323
  %325 = select i1 %324, i64 %322, i64 %323
  %326 = icmp ult i64 %315, %325
  br i1 %326, label %327, label %312

327:                                              ; preds = %313
  %328 = inttoptr i64 %320 to %"class.base::internal::UncheckedObserverAdapter"*
  %329 = getelementptr inbounds %"class.base::ObserverList", %"class.base::ObserverList"* %310, i64 0, i32 0, i32 0, i32 0
  %330 = getelementptr inbounds %"class.base::internal::UncheckedObserverAdapter", %"class.base::internal::UncheckedObserverAdapter"* %328, i64 %315, i32 0
  %331 = load i8*, i8** %330, align 8
  %332 = icmp eq i8* %331, null
  br i1 %332, label %333, label %312

333:                                              ; preds = %327, %337
  %334 = phi i64 [ %335, %337 ], [ %315, %327 ]
  %335 = add nuw i64 %334, 1
  store i64 %335, i64* %7, align 8
  %336 = icmp ult i64 %335, %325
  br i1 %336, label %337, label %312

337:                                              ; preds = %333
  %338 = load %"class.base::internal::UncheckedObserverAdapter"*, %"class.base::internal::UncheckedObserverAdapter"** %329, align 8
  %339 = getelementptr inbounds %"class.base::internal::UncheckedObserverAdapter", %"class.base::internal::UncheckedObserverAdapter"* %338, i64 %335, i32 0
  %340 = load i8*, i8** %339, align 8
  %341 = icmp eq i8* %340, null
  br i1 %341, label %333, label %312

342:                                              ; preds = %278
  %343 = ptrtoint i8* %281 to i64
  %344 = inttoptr i64 %279 to %"class.base::internal::UncheckedObserverAdapter"*
  %345 = inttoptr i64 %279 to i64*
  store i64 %343, i64* %345, align 8
  %346 = getelementptr inbounds %"class.base::internal::UncheckedObserverAdapter", %"class.base::internal::UncheckedObserverAdapter"* %344, i64 1
  %347 = ptrtoint %"class.base::internal::UncheckedObserverAdapter"* %346 to i64
  br label %348

348:                                              ; preds = %342, %278
  %349 = phi i64 [ %279, %278 ], [ %347, %342 ]
  %350 = getelementptr inbounds %"class.base::internal::UncheckedObserverAdapter", %"class.base::internal::UncheckedObserverAdapter"* %267, i64 2, i32 0
  %351 = load i8*, i8** %350, align 8
  %352 = icmp eq i8* %351, null
  br i1 %352, label %359, label %353

353:                                              ; preds = %348
  %354 = ptrtoint i8* %351 to i64
  %355 = inttoptr i64 %349 to %"class.base::internal::UncheckedObserverAdapter"*
  %356 = inttoptr i64 %349 to i64*
  store i64 %354, i64* %356, align 8
  %357 = getelementptr inbounds %"class.base::internal::UncheckedObserverAdapter", %"class.base::internal::UncheckedObserverAdapter"* %355, i64 1
  %358 = ptrtoint %"class.base::internal::UncheckedObserverAdapter"* %357 to i64
  br label %359

359:                                              ; preds = %353, %348
  %360 = phi i64 [ %349, %348 ], [ %358, %353 ]
  %361 = getelementptr inbounds %"class.base::internal::UncheckedObserverAdapter", %"class.base::internal::UncheckedObserverAdapter"* %267, i64 3, i32 0
  %362 = load i8*, i8** %361, align 8
  %363 = icmp eq i8* %362, null
  br i1 %363, label %370, label %364

364:                                              ; preds = %359
  %365 = ptrtoint i8* %362 to i64
  %366 = inttoptr i64 %360 to %"class.base::internal::UncheckedObserverAdapter"*
  %367 = inttoptr i64 %360 to i64*
  store i64 %365, i64* %367, align 8
  %368 = getelementptr inbounds %"class.base::internal::UncheckedObserverAdapter", %"class.base::internal::UncheckedObserverAdapter"* %366, i64 1
  %369 = ptrtoint %"class.base::internal::UncheckedObserverAdapter"* %368 to i64
  br label %370

370:                                              ; preds = %364, %359
  %371 = phi i64 [ %360, %359 ], [ %369, %364 ]
  %372 = getelementptr inbounds %"class.base::internal::UncheckedObserverAdapter", %"class.base::internal::UncheckedObserverAdapter"* %267, i64 4
  %373 = icmp eq %"class.base::internal::UncheckedObserverAdapter"* %372, %218
  br i1 %373, label %283, label %266

374:                                              ; preds = %185
  %375 = ptrtoint i8* %188 to i64
  %376 = inttoptr i64 %186 to %"class.base::internal::UncheckedObserverAdapter"*
  %377 = inttoptr i64 %186 to i64*
  store i64 %375, i64* %377, align 8
  %378 = getelementptr inbounds %"class.base::internal::UncheckedObserverAdapter", %"class.base::internal::UncheckedObserverAdapter"* %376, i64 1
  %379 = ptrtoint %"class.base::internal::UncheckedObserverAdapter"* %378 to i64
  br label %380

380:                                              ; preds = %374, %185
  %381 = phi i64 [ %186, %185 ], [ %379, %374 ]
  %382 = getelementptr inbounds %"class.base::internal::UncheckedObserverAdapter", %"class.base::internal::UncheckedObserverAdapter"* %174, i64 2, i32 0
  %383 = load i8*, i8** %382, align 8
  %384 = icmp eq i8* %383, null
  br i1 %384, label %391, label %385

385:                                              ; preds = %380
  %386 = ptrtoint i8* %383 to i64
  %387 = inttoptr i64 %381 to %"class.base::internal::UncheckedObserverAdapter"*
  %388 = inttoptr i64 %381 to i64*
  store i64 %386, i64* %388, align 8
  %389 = getelementptr inbounds %"class.base::internal::UncheckedObserverAdapter", %"class.base::internal::UncheckedObserverAdapter"* %387, i64 1
  %390 = ptrtoint %"class.base::internal::UncheckedObserverAdapter"* %389 to i64
  br label %391

391:                                              ; preds = %385, %380
  %392 = phi i64 [ %381, %380 ], [ %390, %385 ]
  %393 = getelementptr inbounds %"class.base::internal::UncheckedObserverAdapter", %"class.base::internal::UncheckedObserverAdapter"* %174, i64 3, i32 0
  %394 = load i8*, i8** %393, align 8
  %395 = icmp eq i8* %394, null
  br i1 %395, label %402, label %396

396:                                              ; preds = %391
  %397 = ptrtoint i8* %394 to i64
  %398 = inttoptr i64 %392 to %"class.base::internal::UncheckedObserverAdapter"*
  %399 = inttoptr i64 %392 to i64*
  store i64 %397, i64* %399, align 8
  %400 = getelementptr inbounds %"class.base::internal::UncheckedObserverAdapter", %"class.base::internal::UncheckedObserverAdapter"* %398, i64 1
  %401 = ptrtoint %"class.base::internal::UncheckedObserverAdapter"* %400 to i64
  br label %402

402:                                              ; preds = %396, %391
  %403 = phi i64 [ %392, %391 ], [ %401, %396 ]
  %404 = getelementptr inbounds %"class.base::internal::UncheckedObserverAdapter", %"class.base::internal::UncheckedObserverAdapter"* %174, i64 4
  %405 = icmp eq %"class.base::internal::UncheckedObserverAdapter"* %404, %125
  br i1 %405, label %190, label %173
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6device9UsbDevice12OnDisconnectEv(%"class.device::UsbDevice"*) local_unnamed_addr #1 align 2 {
  %2 = alloca %"class.std::__1::list", align 8
  %3 = bitcast %"class.std::__1::list"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %3) #14
  %4 = getelementptr inbounds %"class.std::__1::list", %"class.std::__1::list"* %2, i64 0, i32 0, i32 0, i32 0
  %5 = getelementptr inbounds %"class.std::__1::list", %"class.std::__1::list"* %2, i64 0, i32 0, i32 0, i32 1
  %6 = getelementptr inbounds %"class.std::__1::list", %"class.std::__1::list"* %2, i64 0, i32 0, i32 1, i32 0, i32 0
  %7 = getelementptr inbounds %"class.std::__1::list", %"class.std::__1::list"* %2, i64 0, i32 0, i32 0
  %8 = getelementptr inbounds %"class.device::UsbDevice", %"class.device::UsbDevice"* %0, i64 0, i32 3
  %9 = getelementptr inbounds %"class.device::UsbDevice", %"class.device::UsbDevice"* %0, i64 0, i32 3, i32 0, i32 1, i32 0, i32 0
  %10 = load i64, i64* %9, align 8
  store i64 %10, i64* %6, align 8
  store i64 0, i64* %9, align 8
  %11 = getelementptr inbounds %"class.std::__1::list", %"class.std::__1::list"* %8, i64 0, i32 0, i32 0
  %12 = ptrtoint %"class.std::__1::list"* %2 to i64
  %13 = bitcast %"struct.std::__1::__list_node_base"** %5 to i64*
  %14 = bitcast %"class.std::__1::list"* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %3, i8* align 8 %14, i64 16, i1 false) #14
  %15 = bitcast %"class.std::__1::list"* %8 to i64*
  store i64 %12, i64* %15, align 8
  %16 = getelementptr inbounds %"class.device::UsbDevice", %"class.device::UsbDevice"* %0, i64 0, i32 3, i32 0, i32 0, i32 1
  %17 = bitcast %"struct.std::__1::__list_node_base"** %16 to i64*
  store i64 %12, i64* %17, align 8
  %18 = icmp eq i64 %10, 0
  br i1 %18, label %19, label %20

19:                                               ; preds = %1
  store %"struct.std::__1::__list_node_base"* %7, %"struct.std::__1::__list_node_base"** %4, align 8
  store %"struct.std::__1::__list_node_base"* %7, %"struct.std::__1::__list_node_base"** %5, align 8
  br label %27

20:                                               ; preds = %1
  %21 = load %"struct.std::__1::__list_node_base"*, %"struct.std::__1::__list_node_base"** %5, align 8
  %22 = getelementptr inbounds %"struct.std::__1::__list_node_base", %"struct.std::__1::__list_node_base"* %21, i64 0, i32 0
  store %"struct.std::__1::__list_node_base"* %7, %"struct.std::__1::__list_node_base"** %22, align 8
  %23 = load %"struct.std::__1::__list_node_base"*, %"struct.std::__1::__list_node_base"** %4, align 8
  %24 = getelementptr inbounds %"struct.std::__1::__list_node_base", %"struct.std::__1::__list_node_base"* %23, i64 0, i32 1
  store %"struct.std::__1::__list_node_base"* %7, %"struct.std::__1::__list_node_base"** %24, align 8
  %25 = load i64, i64* %9, align 8
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %27, label %29

27:                                               ; preds = %19, %20
  %28 = getelementptr inbounds %"class.std::__1::list", %"class.std::__1::list"* %8, i64 0, i32 0, i32 0, i32 0
  store %"struct.std::__1::__list_node_base"* %11, %"struct.std::__1::__list_node_base"** %28, align 8
  br label %35

29:                                               ; preds = %20
  %30 = load %"struct.std::__1::__list_node_base"*, %"struct.std::__1::__list_node_base"** %16, align 8
  %31 = getelementptr inbounds %"struct.std::__1::__list_node_base", %"struct.std::__1::__list_node_base"* %30, i64 0, i32 0
  store %"struct.std::__1::__list_node_base"* %11, %"struct.std::__1::__list_node_base"** %31, align 8
  %32 = getelementptr inbounds %"class.std::__1::list", %"class.std::__1::list"* %8, i64 0, i32 0, i32 0, i32 0
  %33 = load %"struct.std::__1::__list_node_base"*, %"struct.std::__1::__list_node_base"** %32, align 8
  %34 = getelementptr inbounds %"struct.std::__1::__list_node_base", %"struct.std::__1::__list_node_base"* %33, i64 0, i32 1
  br label %35

35:                                               ; preds = %27, %29
  %36 = phi %"struct.std::__1::__list_node_base"** [ %16, %27 ], [ %34, %29 ]
  store %"struct.std::__1::__list_node_base"* %11, %"struct.std::__1::__list_node_base"** %36, align 8
  %37 = load i64, i64* %13, align 8
  %38 = inttoptr i64 %37 to %"struct.std::__1::__list_node_base"*
  %39 = icmp eq %"struct.std::__1::__list_node_base"* %7, %38
  br i1 %39, label %40, label %65

40:                                               ; preds = %65, %35
  %41 = load i64, i64* %6, align 8
  %42 = icmp eq i64 %41, 0
  br i1 %42, label %64, label %43

43:                                               ; preds = %40
  %44 = load %"struct.std::__1::__list_node_base"*, %"struct.std::__1::__list_node_base"** %5, align 8
  %45 = load %"struct.std::__1::__list_node_base"*, %"struct.std::__1::__list_node_base"** %4, align 8
  %46 = getelementptr inbounds %"struct.std::__1::__list_node_base", %"struct.std::__1::__list_node_base"* %45, i64 0, i32 1
  %47 = bitcast %"struct.std::__1::__list_node_base"** %46 to i64*
  %48 = load i64, i64* %47, align 8
  %49 = getelementptr inbounds %"struct.std::__1::__list_node_base", %"struct.std::__1::__list_node_base"* %44, i64 0, i32 0
  %50 = load %"struct.std::__1::__list_node_base"*, %"struct.std::__1::__list_node_base"** %49, align 8
  %51 = getelementptr inbounds %"struct.std::__1::__list_node_base", %"struct.std::__1::__list_node_base"* %50, i64 0, i32 1
  %52 = bitcast %"struct.std::__1::__list_node_base"** %51 to i64*
  store i64 %48, i64* %52, align 8
  %53 = bitcast %"struct.std::__1::__list_node_base"* %44 to i64*
  %54 = load i64, i64* %53, align 8
  %55 = bitcast %"struct.std::__1::__list_node_base"** %46 to i64**
  %56 = load i64*, i64** %55, align 8
  store i64 %54, i64* %56, align 8
  store i64 0, i64* %6, align 8
  %57 = icmp eq %"struct.std::__1::__list_node_base"* %44, %7
  br i1 %57, label %64, label %58

58:                                               ; preds = %43, %58
  %59 = phi %"struct.std::__1::__list_node_base"* [ %61, %58 ], [ %44, %43 ]
  %60 = getelementptr inbounds %"struct.std::__1::__list_node_base", %"struct.std::__1::__list_node_base"* %59, i64 0, i32 1
  %61 = load %"struct.std::__1::__list_node_base"*, %"struct.std::__1::__list_node_base"** %60, align 8
  %62 = bitcast %"struct.std::__1::__list_node_base"* %59 to i8*
  call void @_ZdlPv(i8* %62) #13
  %63 = icmp eq %"struct.std::__1::__list_node_base"* %61, %7
  br i1 %63, label %64, label %58

64:                                               ; preds = %58, %40, %43
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %3) #14
  ret void

65:                                               ; preds = %35, %65
  %66 = phi %"struct.std::__1::__list_node_base"* [ %78, %65 ], [ %38, %35 ]
  %67 = phi i64 [ %77, %65 ], [ %37, %35 ]
  %68 = inttoptr i64 %67 to %"struct.std::__1::__list_node"*
  %69 = getelementptr inbounds %"struct.std::__1::__list_node", %"struct.std::__1::__list_node"* %68, i64 0, i32 1
  %70 = load %"class.device::UsbDeviceHandle"*, %"class.device::UsbDeviceHandle"** %69, align 8
  %71 = bitcast %"class.device::UsbDeviceHandle"* %70 to void (%"class.device::UsbDeviceHandle"*)***
  %72 = load void (%"class.device::UsbDeviceHandle"*)**, void (%"class.device::UsbDeviceHandle"*)*** %71, align 8
  %73 = getelementptr inbounds void (%"class.device::UsbDeviceHandle"*)*, void (%"class.device::UsbDeviceHandle"*)** %72, i64 1
  %74 = load void (%"class.device::UsbDeviceHandle"*)*, void (%"class.device::UsbDeviceHandle"*)** %73, align 8
  call void %74(%"class.device::UsbDeviceHandle"* %70) #14
  %75 = getelementptr inbounds %"struct.std::__1::__list_node_base", %"struct.std::__1::__list_node_base"* %66, i64 0, i32 1
  %76 = bitcast %"struct.std::__1::__list_node_base"** %75 to i64*
  %77 = load i64, i64* %76, align 8
  %78 = inttoptr i64 %77 to %"struct.std::__1::__list_node_base"*
  %79 = icmp eq %"struct.std::__1::__list_node_base"* %7, %78
  br i1 %79, label %40, label %65
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6device9UsbDevice12HandleClosedEPNS_15UsbDeviceHandleE(%"class.device::UsbDevice"*, %"class.device::UsbDeviceHandle"*) local_unnamed_addr #1 align 2 {
  %3 = alloca %"class.device::UsbDeviceHandle"*, align 8
  store %"class.device::UsbDeviceHandle"* %1, %"class.device::UsbDeviceHandle"** %3, align 8
  %4 = getelementptr inbounds %"class.device::UsbDevice", %"class.device::UsbDevice"* %0, i64 0, i32 3
  call void @_ZNSt3__14listIPN6device15UsbDeviceHandleENS_9allocatorIS3_EEE6removeERKS3_(%"class.std::__1::list"* %4, %"class.device::UsbDeviceHandle"** nonnull dereferenceable(8) %3)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__14listIPN6device15UsbDeviceHandleENS_9allocatorIS3_EEE6removeERKS3_(%"class.std::__1::list"*, %"class.device::UsbDeviceHandle"** dereferenceable(8)) local_unnamed_addr #1 comdat align 2 {
  %3 = alloca %"class.std::__1::list", align 8
  %4 = bitcast %"class.std::__1::list"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %4) #14
  %5 = getelementptr inbounds %"class.std::__1::list", %"class.std::__1::list"* %3, i64 0, i32 0, i32 0, i32 0
  %6 = getelementptr inbounds %"class.std::__1::list", %"class.std::__1::list"* %3, i64 0, i32 0, i32 0, i32 1
  %7 = getelementptr inbounds %"class.std::__1::list", %"class.std::__1::list"* %3, i64 0, i32 0, i32 1, i32 0, i32 0
  %8 = getelementptr inbounds %"class.std::__1::list", %"class.std::__1::list"* %3, i64 0, i32 0, i32 0
  store %"struct.std::__1::__list_node_base"* %8, %"struct.std::__1::__list_node_base"** %5, align 8
  store %"struct.std::__1::__list_node_base"* %8, %"struct.std::__1::__list_node_base"** %6, align 8
  store i64 0, i64* %7, align 8
  %9 = getelementptr inbounds %"class.std::__1::list", %"class.std::__1::list"* %0, i64 0, i32 0, i32 0, i32 1
  %10 = bitcast %"struct.std::__1::__list_node_base"** %9 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds %"class.std::__1::list", %"class.std::__1::list"* %0, i64 0, i32 0, i32 0
  %13 = inttoptr i64 %11 to %"struct.std::__1::__list_node_base"*
  %14 = icmp eq %"struct.std::__1::__list_node_base"* %12, %13
  br i1 %14, label %41, label %15

15:                                               ; preds = %2
  %16 = icmp eq %"class.std::__1::list"* %3, %0
  %17 = getelementptr inbounds %"class.std::__1::list", %"class.std::__1::list"* %0, i64 0, i32 0, i32 1, i32 0, i32 0
  br label %42

18:                                               ; preds = %119
  %19 = load i64, i64* %7, align 8
  %20 = icmp eq i64 %19, 0
  br i1 %20, label %41, label %21

21:                                               ; preds = %18
  %22 = load %"struct.std::__1::__list_node_base"*, %"struct.std::__1::__list_node_base"** %6, align 8
  %23 = getelementptr inbounds %"struct.std::__1::__list_node_base", %"struct.std::__1::__list_node_base"* %120, i64 0, i32 1
  %24 = bitcast %"struct.std::__1::__list_node_base"** %23 to i64*
  %25 = load i64, i64* %24, align 8
  %26 = getelementptr inbounds %"struct.std::__1::__list_node_base", %"struct.std::__1::__list_node_base"* %22, i64 0, i32 0
  %27 = load %"struct.std::__1::__list_node_base"*, %"struct.std::__1::__list_node_base"** %26, align 8
  %28 = getelementptr inbounds %"struct.std::__1::__list_node_base", %"struct.std::__1::__list_node_base"* %27, i64 0, i32 1
  %29 = bitcast %"struct.std::__1::__list_node_base"** %28 to i64*
  store i64 %25, i64* %29, align 8
  %30 = bitcast %"struct.std::__1::__list_node_base"* %22 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = bitcast %"struct.std::__1::__list_node_base"** %23 to i64**
  %33 = load i64*, i64** %32, align 8
  store i64 %31, i64* %33, align 8
  store i64 0, i64* %7, align 8
  %34 = icmp eq %"struct.std::__1::__list_node_base"* %22, %8
  br i1 %34, label %41, label %35

35:                                               ; preds = %21, %35
  %36 = phi %"struct.std::__1::__list_node_base"* [ %38, %35 ], [ %22, %21 ]
  %37 = getelementptr inbounds %"struct.std::__1::__list_node_base", %"struct.std::__1::__list_node_base"* %36, i64 0, i32 1
  %38 = load %"struct.std::__1::__list_node_base"*, %"struct.std::__1::__list_node_base"** %37, align 8
  %39 = bitcast %"struct.std::__1::__list_node_base"* %36 to i8*
  call void @_ZdlPv(i8* %39) #13
  %40 = icmp eq %"struct.std::__1::__list_node_base"* %38, %8
  br i1 %40, label %41, label %35

41:                                               ; preds = %35, %2, %18, %21
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %4) #14
  ret void

42:                                               ; preds = %15, %119
  %43 = phi %"struct.std::__1::__list_node_base"* [ %8, %15 ], [ %120, %119 ]
  %44 = phi %"struct.std::__1::__list_node_base"* [ %13, %15 ], [ %122, %119 ]
  %45 = phi i64 [ %11, %15 ], [ %121, %119 ]
  %46 = inttoptr i64 %45 to %"struct.std::__1::__list_node"*
  %47 = getelementptr inbounds %"struct.std::__1::__list_node", %"struct.std::__1::__list_node"* %46, i64 0, i32 1
  %48 = load %"class.device::UsbDeviceHandle"*, %"class.device::UsbDeviceHandle"** %47, align 8
  %49 = load %"class.device::UsbDeviceHandle"*, %"class.device::UsbDeviceHandle"** %1, align 8
  %50 = icmp eq %"class.device::UsbDeviceHandle"* %48, %49
  %51 = getelementptr inbounds %"struct.std::__1::__list_node_base", %"struct.std::__1::__list_node_base"* %44, i64 0, i32 1
  %52 = bitcast %"struct.std::__1::__list_node_base"** %51 to i64*
  %53 = load i64, i64* %52, align 8
  br i1 %50, label %54, label %119

54:                                               ; preds = %42
  %55 = inttoptr i64 %53 to %"struct.std::__1::__list_node_base"*
  %56 = icmp eq %"struct.std::__1::__list_node_base"* %12, %55
  br i1 %56, label %70, label %57

57:                                               ; preds = %54, %64
  %58 = phi %"struct.std::__1::__list_node_base"* [ %68, %64 ], [ %55, %54 ]
  %59 = phi i64 [ %67, %64 ], [ %53, %54 ]
  %60 = inttoptr i64 %59 to %"struct.std::__1::__list_node"*
  %61 = getelementptr inbounds %"struct.std::__1::__list_node", %"struct.std::__1::__list_node"* %60, i64 0, i32 1
  %62 = load %"class.device::UsbDeviceHandle"*, %"class.device::UsbDeviceHandle"** %61, align 8
  %63 = icmp eq %"class.device::UsbDeviceHandle"* %62, %48
  br i1 %63, label %64, label %70

64:                                               ; preds = %57
  %65 = getelementptr inbounds %"struct.std::__1::__list_node_base", %"struct.std::__1::__list_node_base"* %58, i64 0, i32 1
  %66 = bitcast %"struct.std::__1::__list_node_base"** %65 to i64*
  %67 = load i64, i64* %66, align 8
  %68 = inttoptr i64 %67 to %"struct.std::__1::__list_node_base"*
  %69 = icmp eq %"struct.std::__1::__list_node_base"* %12, %68
  br i1 %69, label %70, label %57

70:                                               ; preds = %57, %64, %54
  %71 = phi i64 [ %53, %54 ], [ %59, %57 ], [ %67, %64 ]
  %72 = phi %"struct.std::__1::__list_node_base"* [ %12, %54 ], [ %58, %57 ], [ %12, %64 ]
  %73 = phi i1 [ false, %54 ], [ true, %57 ], [ false, %64 ]
  %74 = icmp eq %"struct.std::__1::__list_node_base"* %44, %72
  br i1 %74, label %113, label %75

75:                                               ; preds = %70
  %76 = getelementptr inbounds %"struct.std::__1::__list_node_base", %"struct.std::__1::__list_node_base"* %72, i64 0, i32 0
  %77 = load %"struct.std::__1::__list_node_base"*, %"struct.std::__1::__list_node_base"** %76, align 8
  br i1 %16, label %98, label %78

78:                                               ; preds = %75
  %79 = icmp eq %"struct.std::__1::__list_node_base"* %77, %44
  br i1 %79, label %92, label %80

80:                                               ; preds = %78
  %81 = icmp eq %"struct.std::__1::__list_node_base"* %77, %55
  br i1 %81, label %89, label %82

82:                                               ; preds = %80, %82
  %83 = phi i64 [ %85, %82 ], [ 0, %80 ]
  %84 = phi %"struct.std::__1::__list_node_base"* [ %87, %82 ], [ %55, %80 ]
  %85 = add nuw nsw i64 %83, 1
  %86 = getelementptr inbounds %"struct.std::__1::__list_node_base", %"struct.std::__1::__list_node_base"* %84, i64 0, i32 1
  %87 = load %"struct.std::__1::__list_node_base"*, %"struct.std::__1::__list_node_base"** %86, align 8
  %88 = icmp eq %"struct.std::__1::__list_node_base"* %87, %77
  br i1 %88, label %89, label %82

89:                                               ; preds = %82, %80
  %90 = phi i64 [ 0, %80 ], [ %85, %82 ]
  %91 = add nuw i64 %90, 2
  br label %92

92:                                               ; preds = %89, %78
  %93 = phi i64 [ 1, %78 ], [ %91, %89 ]
  %94 = load i64, i64* %17, align 8
  %95 = sub i64 %94, %93
  store i64 %95, i64* %17, align 8
  %96 = load i64, i64* %7, align 8
  %97 = add i64 %96, %93
  store i64 %97, i64* %7, align 8
  br label %98

98:                                               ; preds = %92, %75
  %99 = getelementptr inbounds %"struct.std::__1::__list_node_base", %"struct.std::__1::__list_node_base"* %77, i64 0, i32 1
  %100 = bitcast %"struct.std::__1::__list_node_base"** %99 to i64*
  %101 = load i64, i64* %100, align 8
  %102 = getelementptr inbounds %"struct.std::__1::__list_node_base", %"struct.std::__1::__list_node_base"* %44, i64 0, i32 0
  %103 = load %"struct.std::__1::__list_node_base"*, %"struct.std::__1::__list_node_base"** %102, align 8
  %104 = getelementptr inbounds %"struct.std::__1::__list_node_base", %"struct.std::__1::__list_node_base"* %103, i64 0, i32 1
  %105 = bitcast %"struct.std::__1::__list_node_base"** %104 to i64*
  store i64 %101, i64* %105, align 8
  %106 = inttoptr i64 %45 to i64*
  %107 = load i64, i64* %106, align 8
  %108 = bitcast %"struct.std::__1::__list_node_base"** %99 to i64**
  %109 = load i64*, i64** %108, align 8
  store i64 %107, i64* %109, align 8
  %110 = load %"struct.std::__1::__list_node_base"*, %"struct.std::__1::__list_node_base"** %5, align 8
  %111 = getelementptr inbounds %"struct.std::__1::__list_node_base", %"struct.std::__1::__list_node_base"* %110, i64 0, i32 1
  store %"struct.std::__1::__list_node_base"* %44, %"struct.std::__1::__list_node_base"** %111, align 8
  %112 = ptrtoint %"struct.std::__1::__list_node_base"* %110 to i64
  store i64 %112, i64* %106, align 8
  store %"struct.std::__1::__list_node_base"* %77, %"struct.std::__1::__list_node_base"** %5, align 8
  store %"struct.std::__1::__list_node_base"* %8, %"struct.std::__1::__list_node_base"** %99, align 8
  br label %113

113:                                              ; preds = %70, %98
  %114 = phi %"struct.std::__1::__list_node_base"* [ %43, %70 ], [ %77, %98 ]
  br i1 %73, label %115, label %119

115:                                              ; preds = %113
  %116 = getelementptr inbounds %"struct.std::__1::__list_node_base", %"struct.std::__1::__list_node_base"* %72, i64 0, i32 1
  %117 = bitcast %"struct.std::__1::__list_node_base"** %116 to i64*
  %118 = load i64, i64* %117, align 8
  br label %119

119:                                              ; preds = %42, %113, %115
  %120 = phi %"struct.std::__1::__list_node_base"* [ %114, %115 ], [ %114, %113 ], [ %43, %42 ]
  %121 = phi i64 [ %118, %115 ], [ %71, %113 ], [ %53, %42 ]
  %122 = inttoptr i64 %121 to %"struct.std::__1::__list_node_base"*
  %123 = icmp eq %"struct.std::__1::__list_node_base"* %12, %122
  br i1 %123, label %18, label %42
}

declare void @__cxa_pure_virtual() unnamed_addr

; Function Attrs: nounwind
declare void @_ZN6device5mojom13UsbDeviceInfoD1Ev(%"class.device::mojom::UsbDeviceInfo"*) unnamed_addr #9

declare void @_ZN4base8internal12LinkNodeBaseC2EPS1_S2_(%"class.base::internal::LinkNodeBase"*, %"class.base::internal::LinkNodeBase"*, %"class.base::internal::LinkNodeBase"*) unnamed_addr #4

declare void @_ZN4base8internal12LinkNodeBase14RemoveFromListEv(%"class.base::internal::LinkNodeBase"*) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #3

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #10

declare void @_ZN6device5mojom13UsbDeviceInfoC1Ev(%"class.device::mojom::UsbDeviceInfo"*) unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(24) %"class.std::__1::basic_string.5"* @_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEEaSERKS5_(%"class.std::__1::basic_string.5"*, %"class.std::__1::basic_string.5"* dereferenceable(24)) local_unnamed_addr #1 comdat align 2 {
  %3 = bitcast %"class.std::__1::basic_string.5"* %0 to i8*
  %4 = icmp eq %"class.std::__1::basic_string.5"* %0, %1
  br i1 %4, label %510, label %5

5:                                                ; preds = %2
  %6 = bitcast %"class.std::__1::basic_string.5"* %0 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %7 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %6, i64 0, i32 1, i32 1
  %8 = load i8, i8* %7, align 1
  %9 = icmp slt i8 %8, 0
  %10 = bitcast %"class.std::__1::basic_string.5"* %1 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %11 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %10, i64 0, i32 1, i32 1
  %12 = load i8, i8* %11, align 1
  %13 = icmp slt i8 %12, 0
  br i1 %9, label %341, label %14

14:                                               ; preds = %5
  br i1 %13, label %17, label %15

15:                                               ; preds = %14
  %16 = bitcast %"class.std::__1::basic_string.5"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %3, i8* align 8 %16, i64 24, i1 false)
  br label %510

17:                                               ; preds = %14
  %18 = getelementptr inbounds %"class.std::__1::basic_string.5", %"class.std::__1::basic_string.5"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %19 = load i16*, i16** %18, align 8
  %20 = bitcast i16* %19 to i8*
  %21 = getelementptr inbounds %"class.std::__1::basic_string.5", %"class.std::__1::basic_string.5"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %22 = load i64, i64* %21, align 8
  %23 = icmp ult i64 %22, 11
  br i1 %23, label %24, label %175

24:                                               ; preds = %17
  %25 = bitcast %"class.std::__1::basic_string.5"* %0 to i16*
  %26 = trunc i64 %22 to i8
  store i8 %26, i8* %7, align 1
  %27 = icmp eq i64 %22, 0
  br i1 %27, label %173, label %28

28:                                               ; preds = %24
  %29 = icmp ult i64 %22, 16
  br i1 %29, label %120, label %30

30:                                               ; preds = %28
  %31 = shl i64 %22, 1
  %32 = getelementptr i8, i8* %3, i64 %31
  %33 = getelementptr i16, i16* %19, i64 %22
  %34 = bitcast i16* %33 to %"class.std::__1::basic_string.5"*
  %35 = icmp ugt %"class.std::__1::basic_string.5"* %34, %0
  %36 = icmp ugt i8* %32, %20
  %37 = and i1 %35, %36
  br i1 %37, label %120, label %38

38:                                               ; preds = %30
  %39 = and i64 %22, -16
  %40 = sub i64 %22, %39
  %41 = getelementptr i16, i16* %19, i64 %39
  %42 = getelementptr i16, i16* %25, i64 %39
  %43 = add i64 %39, -16
  %44 = lshr exact i64 %43, 4
  %45 = add nuw nsw i64 %44, 1
  %46 = and i64 %45, 3
  %47 = icmp ult i64 %43, 48
  br i1 %47, label %99, label %48

48:                                               ; preds = %38
  %49 = sub nsw i64 %45, %46
  br label %50

50:                                               ; preds = %50, %48
  %51 = phi i64 [ 0, %48 ], [ %96, %50 ]
  %52 = phi i64 [ %49, %48 ], [ %97, %50 ]
  %53 = getelementptr i16, i16* %19, i64 %51
  %54 = getelementptr i16, i16* %25, i64 %51
  %55 = bitcast i16* %53 to <8 x i16>*
  %56 = load <8 x i16>, <8 x i16>* %55, align 2, !alias.scope !47
  %57 = getelementptr i16, i16* %53, i64 8
  %58 = bitcast i16* %57 to <8 x i16>*
  %59 = load <8 x i16>, <8 x i16>* %58, align 2, !alias.scope !47
  %60 = bitcast i16* %54 to <8 x i16>*
  store <8 x i16> %56, <8 x i16>* %60, align 2, !alias.scope !50, !noalias !47
  %61 = getelementptr i16, i16* %54, i64 8
  %62 = bitcast i16* %61 to <8 x i16>*
  store <8 x i16> %59, <8 x i16>* %62, align 2, !alias.scope !50, !noalias !47
  %63 = or i64 %51, 16
  %64 = getelementptr i16, i16* %19, i64 %63
  %65 = getelementptr i16, i16* %25, i64 %63
  %66 = bitcast i16* %64 to <8 x i16>*
  %67 = load <8 x i16>, <8 x i16>* %66, align 2, !alias.scope !47
  %68 = getelementptr i16, i16* %64, i64 8
  %69 = bitcast i16* %68 to <8 x i16>*
  %70 = load <8 x i16>, <8 x i16>* %69, align 2, !alias.scope !47
  %71 = bitcast i16* %65 to <8 x i16>*
  store <8 x i16> %67, <8 x i16>* %71, align 2, !alias.scope !50, !noalias !47
  %72 = getelementptr i16, i16* %65, i64 8
  %73 = bitcast i16* %72 to <8 x i16>*
  store <8 x i16> %70, <8 x i16>* %73, align 2, !alias.scope !50, !noalias !47
  %74 = or i64 %51, 32
  %75 = getelementptr i16, i16* %19, i64 %74
  %76 = getelementptr i16, i16* %25, i64 %74
  %77 = bitcast i16* %75 to <8 x i16>*
  %78 = load <8 x i16>, <8 x i16>* %77, align 2, !alias.scope !47
  %79 = getelementptr i16, i16* %75, i64 8
  %80 = bitcast i16* %79 to <8 x i16>*
  %81 = load <8 x i16>, <8 x i16>* %80, align 2, !alias.scope !47
  %82 = bitcast i16* %76 to <8 x i16>*
  store <8 x i16> %78, <8 x i16>* %82, align 2, !alias.scope !50, !noalias !47
  %83 = getelementptr i16, i16* %76, i64 8
  %84 = bitcast i16* %83 to <8 x i16>*
  store <8 x i16> %81, <8 x i16>* %84, align 2, !alias.scope !50, !noalias !47
  %85 = or i64 %51, 48
  %86 = getelementptr i16, i16* %19, i64 %85
  %87 = getelementptr i16, i16* %25, i64 %85
  %88 = bitcast i16* %86 to <8 x i16>*
  %89 = load <8 x i16>, <8 x i16>* %88, align 2, !alias.scope !47
  %90 = getelementptr i16, i16* %86, i64 8
  %91 = bitcast i16* %90 to <8 x i16>*
  %92 = load <8 x i16>, <8 x i16>* %91, align 2, !alias.scope !47
  %93 = bitcast i16* %87 to <8 x i16>*
  store <8 x i16> %89, <8 x i16>* %93, align 2, !alias.scope !50, !noalias !47
  %94 = getelementptr i16, i16* %87, i64 8
  %95 = bitcast i16* %94 to <8 x i16>*
  store <8 x i16> %92, <8 x i16>* %95, align 2, !alias.scope !50, !noalias !47
  %96 = add i64 %51, 64
  %97 = add i64 %52, -4
  %98 = icmp eq i64 %97, 0
  br i1 %98, label %99, label %50, !llvm.loop !52

99:                                               ; preds = %50, %38
  %100 = phi i64 [ 0, %38 ], [ %96, %50 ]
  %101 = icmp eq i64 %46, 0
  br i1 %101, label %118, label %102

102:                                              ; preds = %99, %102
  %103 = phi i64 [ %115, %102 ], [ %100, %99 ]
  %104 = phi i64 [ %116, %102 ], [ %46, %99 ]
  %105 = getelementptr i16, i16* %19, i64 %103
  %106 = getelementptr i16, i16* %25, i64 %103
  %107 = bitcast i16* %105 to <8 x i16>*
  %108 = load <8 x i16>, <8 x i16>* %107, align 2, !alias.scope !47
  %109 = getelementptr i16, i16* %105, i64 8
  %110 = bitcast i16* %109 to <8 x i16>*
  %111 = load <8 x i16>, <8 x i16>* %110, align 2, !alias.scope !47
  %112 = bitcast i16* %106 to <8 x i16>*
  store <8 x i16> %108, <8 x i16>* %112, align 2, !alias.scope !50, !noalias !47
  %113 = getelementptr i16, i16* %106, i64 8
  %114 = bitcast i16* %113 to <8 x i16>*
  store <8 x i16> %111, <8 x i16>* %114, align 2, !alias.scope !50, !noalias !47
  %115 = add i64 %103, 16
  %116 = add i64 %104, -1
  %117 = icmp eq i64 %116, 0
  br i1 %117, label %118, label %102, !llvm.loop !53

118:                                              ; preds = %102, %99
  %119 = icmp eq i64 %22, %39
  br i1 %119, label %173, label %120

120:                                              ; preds = %118, %30, %28
  %121 = phi i64 [ %22, %30 ], [ %22, %28 ], [ %40, %118 ]
  %122 = phi i16* [ %19, %30 ], [ %19, %28 ], [ %41, %118 ]
  %123 = phi i16* [ %25, %30 ], [ %25, %28 ], [ %42, %118 ]
  %124 = add i64 %121, -1
  %125 = and i64 %121, 7
  %126 = icmp eq i64 %125, 0
  br i1 %126, label %138, label %127

127:                                              ; preds = %120, %127
  %128 = phi i64 [ %133, %127 ], [ %121, %120 ]
  %129 = phi i16* [ %135, %127 ], [ %122, %120 ]
  %130 = phi i16* [ %134, %127 ], [ %123, %120 ]
  %131 = phi i64 [ %136, %127 ], [ %125, %120 ]
  %132 = load i16, i16* %129, align 2
  store i16 %132, i16* %130, align 2
  %133 = add i64 %128, -1
  %134 = getelementptr inbounds i16, i16* %130, i64 1
  %135 = getelementptr inbounds i16, i16* %129, i64 1
  %136 = add i64 %131, -1
  %137 = icmp eq i64 %136, 0
  br i1 %137, label %138, label %127, !llvm.loop !54

138:                                              ; preds = %127, %120
  %139 = phi i64 [ %121, %120 ], [ %133, %127 ]
  %140 = phi i16* [ %122, %120 ], [ %135, %127 ]
  %141 = phi i16* [ %123, %120 ], [ %134, %127 ]
  %142 = icmp ult i64 %124, 7
  br i1 %142, label %173, label %143

143:                                              ; preds = %138, %143
  %144 = phi i64 [ %169, %143 ], [ %139, %138 ]
  %145 = phi i16* [ %171, %143 ], [ %140, %138 ]
  %146 = phi i16* [ %170, %143 ], [ %141, %138 ]
  %147 = load i16, i16* %145, align 2
  store i16 %147, i16* %146, align 2
  %148 = getelementptr inbounds i16, i16* %146, i64 1
  %149 = getelementptr inbounds i16, i16* %145, i64 1
  %150 = load i16, i16* %149, align 2
  store i16 %150, i16* %148, align 2
  %151 = getelementptr inbounds i16, i16* %146, i64 2
  %152 = getelementptr inbounds i16, i16* %145, i64 2
  %153 = load i16, i16* %152, align 2
  store i16 %153, i16* %151, align 2
  %154 = getelementptr inbounds i16, i16* %146, i64 3
  %155 = getelementptr inbounds i16, i16* %145, i64 3
  %156 = load i16, i16* %155, align 2
  store i16 %156, i16* %154, align 2
  %157 = getelementptr inbounds i16, i16* %146, i64 4
  %158 = getelementptr inbounds i16, i16* %145, i64 4
  %159 = load i16, i16* %158, align 2
  store i16 %159, i16* %157, align 2
  %160 = getelementptr inbounds i16, i16* %146, i64 5
  %161 = getelementptr inbounds i16, i16* %145, i64 5
  %162 = load i16, i16* %161, align 2
  store i16 %162, i16* %160, align 2
  %163 = getelementptr inbounds i16, i16* %146, i64 6
  %164 = getelementptr inbounds i16, i16* %145, i64 6
  %165 = load i16, i16* %164, align 2
  store i16 %165, i16* %163, align 2
  %166 = getelementptr inbounds i16, i16* %146, i64 7
  %167 = getelementptr inbounds i16, i16* %145, i64 7
  %168 = load i16, i16* %167, align 2
  store i16 %168, i16* %166, align 2
  %169 = add i64 %144, -8
  %170 = getelementptr inbounds i16, i16* %146, i64 8
  %171 = getelementptr inbounds i16, i16* %145, i64 8
  %172 = icmp eq i64 %169, 0
  br i1 %172, label %173, label %143, !llvm.loop !55

173:                                              ; preds = %138, %143, %118, %24
  %174 = getelementptr inbounds i16, i16* %25, i64 %22
  store i16 0, i16* %174, align 2
  br label %510

175:                                              ; preds = %17
  %176 = add i64 %22, -10
  %177 = icmp ugt i64 %176, 9223372036854775780
  br i1 %177, label %178, label %180

178:                                              ; preds = %175
  %179 = bitcast %"class.std::__1::basic_string.5"* %0 to %"class.std::__1::__basic_string_common"*
  tail call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* %179) #15
  unreachable

180:                                              ; preds = %175
  %181 = icmp ugt i64 %22, 20
  %182 = select i1 %181, i64 %22, i64 20
  %183 = add nuw nsw i64 %182, 8
  %184 = and i64 %183, -8
  %185 = icmp slt i64 %184, 0
  br i1 %185, label %186, label %187

186:                                              ; preds = %180
  tail call void @abort() #15
  unreachable

187:                                              ; preds = %180
  %188 = shl i64 %184, 1
  %189 = tail call i8* @_Znwm(i64 %188) #13
  %190 = bitcast i8* %189 to i16*
  %191 = icmp ult i64 %22, 16
  br i1 %191, label %282, label %192

192:                                              ; preds = %187
  %193 = shl i64 %22, 1
  %194 = getelementptr i8, i8* %189, i64 %193
  %195 = getelementptr i16, i16* %19, i64 %22
  %196 = bitcast i16* %195 to i8*
  %197 = icmp ult i8* %189, %196
  %198 = icmp ugt i8* %194, %20
  %199 = and i1 %197, %198
  br i1 %199, label %282, label %200

200:                                              ; preds = %192
  %201 = and i64 %22, -16
  %202 = sub i64 %22, %201
  %203 = getelementptr i16, i16* %19, i64 %201
  %204 = getelementptr i16, i16* %190, i64 %201
  %205 = add i64 %201, -16
  %206 = lshr exact i64 %205, 4
  %207 = add nuw nsw i64 %206, 1
  %208 = and i64 %207, 3
  %209 = icmp ult i64 %205, 48
  br i1 %209, label %261, label %210

210:                                              ; preds = %200
  %211 = sub nsw i64 %207, %208
  br label %212

212:                                              ; preds = %212, %210
  %213 = phi i64 [ 0, %210 ], [ %258, %212 ]
  %214 = phi i64 [ %211, %210 ], [ %259, %212 ]
  %215 = getelementptr i16, i16* %19, i64 %213
  %216 = getelementptr i16, i16* %190, i64 %213
  %217 = bitcast i16* %215 to <8 x i16>*
  %218 = load <8 x i16>, <8 x i16>* %217, align 2, !alias.scope !56
  %219 = getelementptr i16, i16* %215, i64 8
  %220 = bitcast i16* %219 to <8 x i16>*
  %221 = load <8 x i16>, <8 x i16>* %220, align 2, !alias.scope !56
  %222 = bitcast i16* %216 to <8 x i16>*
  store <8 x i16> %218, <8 x i16>* %222, align 2, !alias.scope !59, !noalias !56
  %223 = getelementptr i16, i16* %216, i64 8
  %224 = bitcast i16* %223 to <8 x i16>*
  store <8 x i16> %221, <8 x i16>* %224, align 2, !alias.scope !59, !noalias !56
  %225 = or i64 %213, 16
  %226 = getelementptr i16, i16* %19, i64 %225
  %227 = getelementptr i16, i16* %190, i64 %225
  %228 = bitcast i16* %226 to <8 x i16>*
  %229 = load <8 x i16>, <8 x i16>* %228, align 2, !alias.scope !56
  %230 = getelementptr i16, i16* %226, i64 8
  %231 = bitcast i16* %230 to <8 x i16>*
  %232 = load <8 x i16>, <8 x i16>* %231, align 2, !alias.scope !56
  %233 = bitcast i16* %227 to <8 x i16>*
  store <8 x i16> %229, <8 x i16>* %233, align 2, !alias.scope !59, !noalias !56
  %234 = getelementptr i16, i16* %227, i64 8
  %235 = bitcast i16* %234 to <8 x i16>*
  store <8 x i16> %232, <8 x i16>* %235, align 2, !alias.scope !59, !noalias !56
  %236 = or i64 %213, 32
  %237 = getelementptr i16, i16* %19, i64 %236
  %238 = getelementptr i16, i16* %190, i64 %236
  %239 = bitcast i16* %237 to <8 x i16>*
  %240 = load <8 x i16>, <8 x i16>* %239, align 2, !alias.scope !56
  %241 = getelementptr i16, i16* %237, i64 8
  %242 = bitcast i16* %241 to <8 x i16>*
  %243 = load <8 x i16>, <8 x i16>* %242, align 2, !alias.scope !56
  %244 = bitcast i16* %238 to <8 x i16>*
  store <8 x i16> %240, <8 x i16>* %244, align 2, !alias.scope !59, !noalias !56
  %245 = getelementptr i16, i16* %238, i64 8
  %246 = bitcast i16* %245 to <8 x i16>*
  store <8 x i16> %243, <8 x i16>* %246, align 2, !alias.scope !59, !noalias !56
  %247 = or i64 %213, 48
  %248 = getelementptr i16, i16* %19, i64 %247
  %249 = getelementptr i16, i16* %190, i64 %247
  %250 = bitcast i16* %248 to <8 x i16>*
  %251 = load <8 x i16>, <8 x i16>* %250, align 2, !alias.scope !56
  %252 = getelementptr i16, i16* %248, i64 8
  %253 = bitcast i16* %252 to <8 x i16>*
  %254 = load <8 x i16>, <8 x i16>* %253, align 2, !alias.scope !56
  %255 = bitcast i16* %249 to <8 x i16>*
  store <8 x i16> %251, <8 x i16>* %255, align 2, !alias.scope !59, !noalias !56
  %256 = getelementptr i16, i16* %249, i64 8
  %257 = bitcast i16* %256 to <8 x i16>*
  store <8 x i16> %254, <8 x i16>* %257, align 2, !alias.scope !59, !noalias !56
  %258 = add i64 %213, 64
  %259 = add i64 %214, -4
  %260 = icmp eq i64 %259, 0
  br i1 %260, label %261, label %212, !llvm.loop !61

261:                                              ; preds = %212, %200
  %262 = phi i64 [ 0, %200 ], [ %258, %212 ]
  %263 = icmp eq i64 %208, 0
  br i1 %263, label %280, label %264

264:                                              ; preds = %261, %264
  %265 = phi i64 [ %277, %264 ], [ %262, %261 ]
  %266 = phi i64 [ %278, %264 ], [ %208, %261 ]
  %267 = getelementptr i16, i16* %19, i64 %265
  %268 = getelementptr i16, i16* %190, i64 %265
  %269 = bitcast i16* %267 to <8 x i16>*
  %270 = load <8 x i16>, <8 x i16>* %269, align 2, !alias.scope !56
  %271 = getelementptr i16, i16* %267, i64 8
  %272 = bitcast i16* %271 to <8 x i16>*
  %273 = load <8 x i16>, <8 x i16>* %272, align 2, !alias.scope !56
  %274 = bitcast i16* %268 to <8 x i16>*
  store <8 x i16> %270, <8 x i16>* %274, align 2, !alias.scope !59, !noalias !56
  %275 = getelementptr i16, i16* %268, i64 8
  %276 = bitcast i16* %275 to <8 x i16>*
  store <8 x i16> %273, <8 x i16>* %276, align 2, !alias.scope !59, !noalias !56
  %277 = add i64 %265, 16
  %278 = add i64 %266, -1
  %279 = icmp eq i64 %278, 0
  br i1 %279, label %280, label %264, !llvm.loop !62

280:                                              ; preds = %264, %261
  %281 = icmp eq i64 %22, %201
  br i1 %281, label %335, label %282

282:                                              ; preds = %280, %192, %187
  %283 = phi i64 [ %22, %192 ], [ %22, %187 ], [ %202, %280 ]
  %284 = phi i16* [ %19, %192 ], [ %19, %187 ], [ %203, %280 ]
  %285 = phi i16* [ %190, %192 ], [ %190, %187 ], [ %204, %280 ]
  %286 = add i64 %283, -1
  %287 = and i64 %283, 7
  %288 = icmp eq i64 %287, 0
  br i1 %288, label %300, label %289

289:                                              ; preds = %282, %289
  %290 = phi i64 [ %295, %289 ], [ %283, %282 ]
  %291 = phi i16* [ %297, %289 ], [ %284, %282 ]
  %292 = phi i16* [ %296, %289 ], [ %285, %282 ]
  %293 = phi i64 [ %298, %289 ], [ %287, %282 ]
  %294 = load i16, i16* %291, align 2
  store i16 %294, i16* %292, align 2
  %295 = add i64 %290, -1
  %296 = getelementptr inbounds i16, i16* %292, i64 1
  %297 = getelementptr inbounds i16, i16* %291, i64 1
  %298 = add i64 %293, -1
  %299 = icmp eq i64 %298, 0
  br i1 %299, label %300, label %289, !llvm.loop !63

300:                                              ; preds = %289, %282
  %301 = phi i64 [ %283, %282 ], [ %295, %289 ]
  %302 = phi i16* [ %284, %282 ], [ %297, %289 ]
  %303 = phi i16* [ %285, %282 ], [ %296, %289 ]
  %304 = icmp ult i64 %286, 7
  br i1 %304, label %335, label %305

305:                                              ; preds = %300, %305
  %306 = phi i64 [ %331, %305 ], [ %301, %300 ]
  %307 = phi i16* [ %333, %305 ], [ %302, %300 ]
  %308 = phi i16* [ %332, %305 ], [ %303, %300 ]
  %309 = load i16, i16* %307, align 2
  store i16 %309, i16* %308, align 2
  %310 = getelementptr inbounds i16, i16* %308, i64 1
  %311 = getelementptr inbounds i16, i16* %307, i64 1
  %312 = load i16, i16* %311, align 2
  store i16 %312, i16* %310, align 2
  %313 = getelementptr inbounds i16, i16* %308, i64 2
  %314 = getelementptr inbounds i16, i16* %307, i64 2
  %315 = load i16, i16* %314, align 2
  store i16 %315, i16* %313, align 2
  %316 = getelementptr inbounds i16, i16* %308, i64 3
  %317 = getelementptr inbounds i16, i16* %307, i64 3
  %318 = load i16, i16* %317, align 2
  store i16 %318, i16* %316, align 2
  %319 = getelementptr inbounds i16, i16* %308, i64 4
  %320 = getelementptr inbounds i16, i16* %307, i64 4
  %321 = load i16, i16* %320, align 2
  store i16 %321, i16* %319, align 2
  %322 = getelementptr inbounds i16, i16* %308, i64 5
  %323 = getelementptr inbounds i16, i16* %307, i64 5
  %324 = load i16, i16* %323, align 2
  store i16 %324, i16* %322, align 2
  %325 = getelementptr inbounds i16, i16* %308, i64 6
  %326 = getelementptr inbounds i16, i16* %307, i64 6
  %327 = load i16, i16* %326, align 2
  store i16 %327, i16* %325, align 2
  %328 = getelementptr inbounds i16, i16* %308, i64 7
  %329 = getelementptr inbounds i16, i16* %307, i64 7
  %330 = load i16, i16* %329, align 2
  store i16 %330, i16* %328, align 2
  %331 = add i64 %306, -8
  %332 = getelementptr inbounds i16, i16* %308, i64 8
  %333 = getelementptr inbounds i16, i16* %307, i64 8
  %334 = icmp eq i64 %331, 0
  br i1 %334, label %335, label %305, !llvm.loop !64

335:                                              ; preds = %300, %305, %280
  %336 = bitcast %"class.std::__1::basic_string.5"* %0 to i8**
  store i8* %189, i8** %336, align 8
  %337 = or i64 %184, -9223372036854775808
  %338 = getelementptr inbounds %"class.std::__1::basic_string.5", %"class.std::__1::basic_string.5"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %337, i64* %338, align 8
  %339 = getelementptr inbounds %"class.std::__1::basic_string.5", %"class.std::__1::basic_string.5"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %22, i64* %339, align 8
  %340 = getelementptr inbounds i16, i16* %190, i64 %22
  store i16 0, i16* %340, align 2
  br label %510

341:                                              ; preds = %5
  %342 = getelementptr inbounds %"class.std::__1::basic_string.5", %"class.std::__1::basic_string.5"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %343 = load i16*, i16** %342, align 8
  %344 = getelementptr inbounds %"class.std::__1::basic_string.5", %"class.std::__1::basic_string.5"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %345 = load i64, i64* %344, align 8
  %346 = bitcast %"class.std::__1::basic_string.5"* %1 to i16*
  %347 = zext i8 %12 to i64
  %348 = select i1 %13, i16* %343, i16* %346
  %349 = select i1 %13, i64 %345, i64 %347
  %350 = getelementptr inbounds %"class.std::__1::basic_string.5", %"class.std::__1::basic_string.5"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %351 = load i64, i64* %350, align 8
  %352 = and i64 %351, 9223372036854775807
  %353 = icmp ugt i64 %352, %349
  br i1 %353, label %354, label %504

354:                                              ; preds = %341
  %355 = getelementptr inbounds %"class.std::__1::basic_string.5", %"class.std::__1::basic_string.5"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %356 = load i16*, i16** %355, align 8
  %357 = getelementptr inbounds %"class.std::__1::basic_string.5", %"class.std::__1::basic_string.5"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %349, i64* %357, align 8
  %358 = icmp eq i64 %349, 0
  br i1 %358, label %502, label %359

359:                                              ; preds = %354
  %360 = icmp ult i64 %349, 16
  br i1 %360, label %449, label %361

361:                                              ; preds = %359
  %362 = getelementptr i16, i16* %356, i64 %349
  %363 = getelementptr i16, i16* %348, i64 %349
  %364 = icmp ult i16* %356, %363
  %365 = icmp ult i16* %348, %362
  %366 = and i1 %364, %365
  br i1 %366, label %449, label %367

367:                                              ; preds = %361
  %368 = and i64 %349, -16
  %369 = sub i64 %349, %368
  %370 = getelementptr i16, i16* %348, i64 %368
  %371 = getelementptr i16, i16* %356, i64 %368
  %372 = add i64 %368, -16
  %373 = lshr exact i64 %372, 4
  %374 = add nuw nsw i64 %373, 1
  %375 = and i64 %374, 3
  %376 = icmp ult i64 %372, 48
  br i1 %376, label %428, label %377

377:                                              ; preds = %367
  %378 = sub nsw i64 %374, %375
  br label %379

379:                                              ; preds = %379, %377
  %380 = phi i64 [ 0, %377 ], [ %425, %379 ]
  %381 = phi i64 [ %378, %377 ], [ %426, %379 ]
  %382 = getelementptr i16, i16* %348, i64 %380
  %383 = getelementptr i16, i16* %356, i64 %380
  %384 = bitcast i16* %382 to <8 x i16>*
  %385 = load <8 x i16>, <8 x i16>* %384, align 2, !alias.scope !65
  %386 = getelementptr i16, i16* %382, i64 8
  %387 = bitcast i16* %386 to <8 x i16>*
  %388 = load <8 x i16>, <8 x i16>* %387, align 2, !alias.scope !65
  %389 = bitcast i16* %383 to <8 x i16>*
  store <8 x i16> %385, <8 x i16>* %389, align 2, !alias.scope !68, !noalias !65
  %390 = getelementptr i16, i16* %383, i64 8
  %391 = bitcast i16* %390 to <8 x i16>*
  store <8 x i16> %388, <8 x i16>* %391, align 2, !alias.scope !68, !noalias !65
  %392 = or i64 %380, 16
  %393 = getelementptr i16, i16* %348, i64 %392
  %394 = getelementptr i16, i16* %356, i64 %392
  %395 = bitcast i16* %393 to <8 x i16>*
  %396 = load <8 x i16>, <8 x i16>* %395, align 2, !alias.scope !65
  %397 = getelementptr i16, i16* %393, i64 8
  %398 = bitcast i16* %397 to <8 x i16>*
  %399 = load <8 x i16>, <8 x i16>* %398, align 2, !alias.scope !65
  %400 = bitcast i16* %394 to <8 x i16>*
  store <8 x i16> %396, <8 x i16>* %400, align 2, !alias.scope !68, !noalias !65
  %401 = getelementptr i16, i16* %394, i64 8
  %402 = bitcast i16* %401 to <8 x i16>*
  store <8 x i16> %399, <8 x i16>* %402, align 2, !alias.scope !68, !noalias !65
  %403 = or i64 %380, 32
  %404 = getelementptr i16, i16* %348, i64 %403
  %405 = getelementptr i16, i16* %356, i64 %403
  %406 = bitcast i16* %404 to <8 x i16>*
  %407 = load <8 x i16>, <8 x i16>* %406, align 2, !alias.scope !65
  %408 = getelementptr i16, i16* %404, i64 8
  %409 = bitcast i16* %408 to <8 x i16>*
  %410 = load <8 x i16>, <8 x i16>* %409, align 2, !alias.scope !65
  %411 = bitcast i16* %405 to <8 x i16>*
  store <8 x i16> %407, <8 x i16>* %411, align 2, !alias.scope !68, !noalias !65
  %412 = getelementptr i16, i16* %405, i64 8
  %413 = bitcast i16* %412 to <8 x i16>*
  store <8 x i16> %410, <8 x i16>* %413, align 2, !alias.scope !68, !noalias !65
  %414 = or i64 %380, 48
  %415 = getelementptr i16, i16* %348, i64 %414
  %416 = getelementptr i16, i16* %356, i64 %414
  %417 = bitcast i16* %415 to <8 x i16>*
  %418 = load <8 x i16>, <8 x i16>* %417, align 2, !alias.scope !65
  %419 = getelementptr i16, i16* %415, i64 8
  %420 = bitcast i16* %419 to <8 x i16>*
  %421 = load <8 x i16>, <8 x i16>* %420, align 2, !alias.scope !65
  %422 = bitcast i16* %416 to <8 x i16>*
  store <8 x i16> %418, <8 x i16>* %422, align 2, !alias.scope !68, !noalias !65
  %423 = getelementptr i16, i16* %416, i64 8
  %424 = bitcast i16* %423 to <8 x i16>*
  store <8 x i16> %421, <8 x i16>* %424, align 2, !alias.scope !68, !noalias !65
  %425 = add i64 %380, 64
  %426 = add i64 %381, -4
  %427 = icmp eq i64 %426, 0
  br i1 %427, label %428, label %379, !llvm.loop !70

428:                                              ; preds = %379, %367
  %429 = phi i64 [ 0, %367 ], [ %425, %379 ]
  %430 = icmp eq i64 %375, 0
  br i1 %430, label %447, label %431

431:                                              ; preds = %428, %431
  %432 = phi i64 [ %444, %431 ], [ %429, %428 ]
  %433 = phi i64 [ %445, %431 ], [ %375, %428 ]
  %434 = getelementptr i16, i16* %348, i64 %432
  %435 = getelementptr i16, i16* %356, i64 %432
  %436 = bitcast i16* %434 to <8 x i16>*
  %437 = load <8 x i16>, <8 x i16>* %436, align 2, !alias.scope !65
  %438 = getelementptr i16, i16* %434, i64 8
  %439 = bitcast i16* %438 to <8 x i16>*
  %440 = load <8 x i16>, <8 x i16>* %439, align 2, !alias.scope !65
  %441 = bitcast i16* %435 to <8 x i16>*
  store <8 x i16> %437, <8 x i16>* %441, align 2, !alias.scope !68, !noalias !65
  %442 = getelementptr i16, i16* %435, i64 8
  %443 = bitcast i16* %442 to <8 x i16>*
  store <8 x i16> %440, <8 x i16>* %443, align 2, !alias.scope !68, !noalias !65
  %444 = add i64 %432, 16
  %445 = add i64 %433, -1
  %446 = icmp eq i64 %445, 0
  br i1 %446, label %447, label %431, !llvm.loop !71

447:                                              ; preds = %431, %428
  %448 = icmp eq i64 %349, %368
  br i1 %448, label %502, label %449

449:                                              ; preds = %447, %361, %359
  %450 = phi i64 [ %349, %361 ], [ %349, %359 ], [ %369, %447 ]
  %451 = phi i16* [ %348, %361 ], [ %348, %359 ], [ %370, %447 ]
  %452 = phi i16* [ %356, %361 ], [ %356, %359 ], [ %371, %447 ]
  %453 = add i64 %450, -1
  %454 = and i64 %450, 7
  %455 = icmp eq i64 %454, 0
  br i1 %455, label %467, label %456

456:                                              ; preds = %449, %456
  %457 = phi i64 [ %462, %456 ], [ %450, %449 ]
  %458 = phi i16* [ %464, %456 ], [ %451, %449 ]
  %459 = phi i16* [ %463, %456 ], [ %452, %449 ]
  %460 = phi i64 [ %465, %456 ], [ %454, %449 ]
  %461 = load i16, i16* %458, align 2
  store i16 %461, i16* %459, align 2
  %462 = add i64 %457, -1
  %463 = getelementptr inbounds i16, i16* %459, i64 1
  %464 = getelementptr inbounds i16, i16* %458, i64 1
  %465 = add i64 %460, -1
  %466 = icmp eq i64 %465, 0
  br i1 %466, label %467, label %456, !llvm.loop !72

467:                                              ; preds = %456, %449
  %468 = phi i64 [ %450, %449 ], [ %462, %456 ]
  %469 = phi i16* [ %451, %449 ], [ %464, %456 ]
  %470 = phi i16* [ %452, %449 ], [ %463, %456 ]
  %471 = icmp ult i64 %453, 7
  br i1 %471, label %502, label %472

472:                                              ; preds = %467, %472
  %473 = phi i64 [ %498, %472 ], [ %468, %467 ]
  %474 = phi i16* [ %500, %472 ], [ %469, %467 ]
  %475 = phi i16* [ %499, %472 ], [ %470, %467 ]
  %476 = load i16, i16* %474, align 2
  store i16 %476, i16* %475, align 2
  %477 = getelementptr inbounds i16, i16* %475, i64 1
  %478 = getelementptr inbounds i16, i16* %474, i64 1
  %479 = load i16, i16* %478, align 2
  store i16 %479, i16* %477, align 2
  %480 = getelementptr inbounds i16, i16* %475, i64 2
  %481 = getelementptr inbounds i16, i16* %474, i64 2
  %482 = load i16, i16* %481, align 2
  store i16 %482, i16* %480, align 2
  %483 = getelementptr inbounds i16, i16* %475, i64 3
  %484 = getelementptr inbounds i16, i16* %474, i64 3
  %485 = load i16, i16* %484, align 2
  store i16 %485, i16* %483, align 2
  %486 = getelementptr inbounds i16, i16* %475, i64 4
  %487 = getelementptr inbounds i16, i16* %474, i64 4
  %488 = load i16, i16* %487, align 2
  store i16 %488, i16* %486, align 2
  %489 = getelementptr inbounds i16, i16* %475, i64 5
  %490 = getelementptr inbounds i16, i16* %474, i64 5
  %491 = load i16, i16* %490, align 2
  store i16 %491, i16* %489, align 2
  %492 = getelementptr inbounds i16, i16* %475, i64 6
  %493 = getelementptr inbounds i16, i16* %474, i64 6
  %494 = load i16, i16* %493, align 2
  store i16 %494, i16* %492, align 2
  %495 = getelementptr inbounds i16, i16* %475, i64 7
  %496 = getelementptr inbounds i16, i16* %474, i64 7
  %497 = load i16, i16* %496, align 2
  store i16 %497, i16* %495, align 2
  %498 = add i64 %473, -8
  %499 = getelementptr inbounds i16, i16* %475, i64 8
  %500 = getelementptr inbounds i16, i16* %474, i64 8
  %501 = icmp eq i64 %498, 0
  br i1 %501, label %502, label %472, !llvm.loop !73

502:                                              ; preds = %467, %472, %447, %354
  %503 = getelementptr inbounds i16, i16* %356, i64 %349
  store i16 0, i16* %503, align 2
  br label %510

504:                                              ; preds = %341
  %505 = getelementptr inbounds %"class.std::__1::basic_string.5", %"class.std::__1::basic_string.5"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %506 = load i64, i64* %505, align 8
  %507 = add nsw i64 %352, -1
  %508 = add i64 %349, 1
  %509 = sub i64 %508, %352
  tail call void @_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEE21__grow_by_and_replaceEmmmmmmPKDs(%"class.std::__1::basic_string.5"* %0, i64 %507, i64 %509, i64 %506, i64 0, i64 %506, i64 %349, i16* %348) #14
  br label %510

510:                                              ; preds = %504, %502, %335, %173, %15, %2
  ret %"class.std::__1::basic_string.5"* %0
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEE21__grow_by_and_replaceEmmmmmmPKDs(%"class.std::__1::basic_string.5"*, i64, i64, i64, i64, i64, i64, i16*) local_unnamed_addr #1 comdat align 2 {
  %9 = sub i64 9223372036854775790, %1
  %10 = icmp ult i64 %9, %2
  br i1 %10, label %11, label %13

11:                                               ; preds = %8
  %12 = bitcast %"class.std::__1::basic_string.5"* %0 to %"class.std::__1::__basic_string_common"*
  tail call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* %12) #15
  unreachable

13:                                               ; preds = %8
  %14 = bitcast %"class.std::__1::basic_string.5"* %0 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %15 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %14, i64 0, i32 1, i32 1
  %16 = load i8, i8* %15, align 1
  %17 = icmp slt i8 %16, 0
  br i1 %17, label %18, label %21

18:                                               ; preds = %13
  %19 = getelementptr inbounds %"class.std::__1::basic_string.5", %"class.std::__1::basic_string.5"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %20 = load i16*, i16** %19, align 8
  br label %23

21:                                               ; preds = %13
  %22 = bitcast %"class.std::__1::basic_string.5"* %0 to i16*
  br label %23

23:                                               ; preds = %18, %21
  %24 = phi i16* [ %20, %18 ], [ %22, %21 ]
  %25 = bitcast i16* %24 to i8*
  %26 = icmp ult i64 %1, 4611686018427387879
  br i1 %26, label %27, label %38

27:                                               ; preds = %23
  %28 = add i64 %2, %1
  %29 = shl i64 %1, 1
  %30 = icmp ult i64 %28, %29
  %31 = select i1 %30, i64 %29, i64 %28
  %32 = icmp ult i64 %31, 11
  br i1 %32, label %38, label %33

33:                                               ; preds = %27
  %34 = add i64 %31, 8
  %35 = and i64 %34, -8
  %36 = icmp slt i64 %35, 0
  br i1 %36, label %37, label %38

37:                                               ; preds = %33
  tail call void @abort() #15
  unreachable

38:                                               ; preds = %23, %27, %33
  %39 = phi i64 [ %35, %33 ], [ 9223372036854775791, %23 ], [ 11, %27 ]
  %40 = shl i64 %39, 1
  %41 = tail call i8* @_Znwm(i64 %40) #13
  %42 = bitcast i8* %41 to i16*
  %43 = icmp eq i64 %4, 0
  br i1 %43, label %189, label %44

44:                                               ; preds = %38
  %45 = icmp ult i64 %4, 16
  br i1 %45, label %136, label %46

46:                                               ; preds = %44
  %47 = shl i64 %4, 1
  %48 = getelementptr i8, i8* %41, i64 %47
  %49 = getelementptr i16, i16* %24, i64 %4
  %50 = bitcast i16* %49 to i8*
  %51 = icmp ult i8* %41, %50
  %52 = icmp ugt i8* %48, %25
  %53 = and i1 %51, %52
  br i1 %53, label %136, label %54

54:                                               ; preds = %46
  %55 = and i64 %4, -16
  %56 = sub i64 %4, %55
  %57 = getelementptr i16, i16* %24, i64 %55
  %58 = getelementptr i16, i16* %42, i64 %55
  %59 = add i64 %55, -16
  %60 = lshr exact i64 %59, 4
  %61 = add nuw nsw i64 %60, 1
  %62 = and i64 %61, 3
  %63 = icmp ult i64 %59, 48
  br i1 %63, label %115, label %64

64:                                               ; preds = %54
  %65 = sub nsw i64 %61, %62
  br label %66

66:                                               ; preds = %66, %64
  %67 = phi i64 [ 0, %64 ], [ %112, %66 ]
  %68 = phi i64 [ %65, %64 ], [ %113, %66 ]
  %69 = getelementptr i16, i16* %24, i64 %67
  %70 = getelementptr i16, i16* %42, i64 %67
  %71 = bitcast i16* %69 to <8 x i16>*
  %72 = load <8 x i16>, <8 x i16>* %71, align 2, !alias.scope !74
  %73 = getelementptr i16, i16* %69, i64 8
  %74 = bitcast i16* %73 to <8 x i16>*
  %75 = load <8 x i16>, <8 x i16>* %74, align 2, !alias.scope !74
  %76 = bitcast i16* %70 to <8 x i16>*
  store <8 x i16> %72, <8 x i16>* %76, align 2, !alias.scope !77, !noalias !74
  %77 = getelementptr i16, i16* %70, i64 8
  %78 = bitcast i16* %77 to <8 x i16>*
  store <8 x i16> %75, <8 x i16>* %78, align 2, !alias.scope !77, !noalias !74
  %79 = or i64 %67, 16
  %80 = getelementptr i16, i16* %24, i64 %79
  %81 = getelementptr i16, i16* %42, i64 %79
  %82 = bitcast i16* %80 to <8 x i16>*
  %83 = load <8 x i16>, <8 x i16>* %82, align 2, !alias.scope !74
  %84 = getelementptr i16, i16* %80, i64 8
  %85 = bitcast i16* %84 to <8 x i16>*
  %86 = load <8 x i16>, <8 x i16>* %85, align 2, !alias.scope !74
  %87 = bitcast i16* %81 to <8 x i16>*
  store <8 x i16> %83, <8 x i16>* %87, align 2, !alias.scope !77, !noalias !74
  %88 = getelementptr i16, i16* %81, i64 8
  %89 = bitcast i16* %88 to <8 x i16>*
  store <8 x i16> %86, <8 x i16>* %89, align 2, !alias.scope !77, !noalias !74
  %90 = or i64 %67, 32
  %91 = getelementptr i16, i16* %24, i64 %90
  %92 = getelementptr i16, i16* %42, i64 %90
  %93 = bitcast i16* %91 to <8 x i16>*
  %94 = load <8 x i16>, <8 x i16>* %93, align 2, !alias.scope !74
  %95 = getelementptr i16, i16* %91, i64 8
  %96 = bitcast i16* %95 to <8 x i16>*
  %97 = load <8 x i16>, <8 x i16>* %96, align 2, !alias.scope !74
  %98 = bitcast i16* %92 to <8 x i16>*
  store <8 x i16> %94, <8 x i16>* %98, align 2, !alias.scope !77, !noalias !74
  %99 = getelementptr i16, i16* %92, i64 8
  %100 = bitcast i16* %99 to <8 x i16>*
  store <8 x i16> %97, <8 x i16>* %100, align 2, !alias.scope !77, !noalias !74
  %101 = or i64 %67, 48
  %102 = getelementptr i16, i16* %24, i64 %101
  %103 = getelementptr i16, i16* %42, i64 %101
  %104 = bitcast i16* %102 to <8 x i16>*
  %105 = load <8 x i16>, <8 x i16>* %104, align 2, !alias.scope !74
  %106 = getelementptr i16, i16* %102, i64 8
  %107 = bitcast i16* %106 to <8 x i16>*
  %108 = load <8 x i16>, <8 x i16>* %107, align 2, !alias.scope !74
  %109 = bitcast i16* %103 to <8 x i16>*
  store <8 x i16> %105, <8 x i16>* %109, align 2, !alias.scope !77, !noalias !74
  %110 = getelementptr i16, i16* %103, i64 8
  %111 = bitcast i16* %110 to <8 x i16>*
  store <8 x i16> %108, <8 x i16>* %111, align 2, !alias.scope !77, !noalias !74
  %112 = add i64 %67, 64
  %113 = add i64 %68, -4
  %114 = icmp eq i64 %113, 0
  br i1 %114, label %115, label %66, !llvm.loop !79

115:                                              ; preds = %66, %54
  %116 = phi i64 [ 0, %54 ], [ %112, %66 ]
  %117 = icmp eq i64 %62, 0
  br i1 %117, label %134, label %118

118:                                              ; preds = %115, %118
  %119 = phi i64 [ %131, %118 ], [ %116, %115 ]
  %120 = phi i64 [ %132, %118 ], [ %62, %115 ]
  %121 = getelementptr i16, i16* %24, i64 %119
  %122 = getelementptr i16, i16* %42, i64 %119
  %123 = bitcast i16* %121 to <8 x i16>*
  %124 = load <8 x i16>, <8 x i16>* %123, align 2, !alias.scope !74
  %125 = getelementptr i16, i16* %121, i64 8
  %126 = bitcast i16* %125 to <8 x i16>*
  %127 = load <8 x i16>, <8 x i16>* %126, align 2, !alias.scope !74
  %128 = bitcast i16* %122 to <8 x i16>*
  store <8 x i16> %124, <8 x i16>* %128, align 2, !alias.scope !77, !noalias !74
  %129 = getelementptr i16, i16* %122, i64 8
  %130 = bitcast i16* %129 to <8 x i16>*
  store <8 x i16> %127, <8 x i16>* %130, align 2, !alias.scope !77, !noalias !74
  %131 = add i64 %119, 16
  %132 = add i64 %120, -1
  %133 = icmp eq i64 %132, 0
  br i1 %133, label %134, label %118, !llvm.loop !80

134:                                              ; preds = %118, %115
  %135 = icmp eq i64 %55, %4
  br i1 %135, label %189, label %136

136:                                              ; preds = %134, %46, %44
  %137 = phi i64 [ %4, %46 ], [ %4, %44 ], [ %56, %134 ]
  %138 = phi i16* [ %24, %46 ], [ %24, %44 ], [ %57, %134 ]
  %139 = phi i16* [ %42, %46 ], [ %42, %44 ], [ %58, %134 ]
  %140 = add i64 %137, -1
  %141 = and i64 %137, 7
  %142 = icmp eq i64 %141, 0
  br i1 %142, label %154, label %143

143:                                              ; preds = %136, %143
  %144 = phi i64 [ %149, %143 ], [ %137, %136 ]
  %145 = phi i16* [ %151, %143 ], [ %138, %136 ]
  %146 = phi i16* [ %150, %143 ], [ %139, %136 ]
  %147 = phi i64 [ %152, %143 ], [ %141, %136 ]
  %148 = load i16, i16* %145, align 2
  store i16 %148, i16* %146, align 2
  %149 = add i64 %144, -1
  %150 = getelementptr inbounds i16, i16* %146, i64 1
  %151 = getelementptr inbounds i16, i16* %145, i64 1
  %152 = add i64 %147, -1
  %153 = icmp eq i64 %152, 0
  br i1 %153, label %154, label %143, !llvm.loop !81

154:                                              ; preds = %143, %136
  %155 = phi i64 [ %137, %136 ], [ %149, %143 ]
  %156 = phi i16* [ %138, %136 ], [ %151, %143 ]
  %157 = phi i16* [ %139, %136 ], [ %150, %143 ]
  %158 = icmp ult i64 %140, 7
  br i1 %158, label %189, label %159

159:                                              ; preds = %154, %159
  %160 = phi i64 [ %185, %159 ], [ %155, %154 ]
  %161 = phi i16* [ %187, %159 ], [ %156, %154 ]
  %162 = phi i16* [ %186, %159 ], [ %157, %154 ]
  %163 = load i16, i16* %161, align 2
  store i16 %163, i16* %162, align 2
  %164 = getelementptr inbounds i16, i16* %162, i64 1
  %165 = getelementptr inbounds i16, i16* %161, i64 1
  %166 = load i16, i16* %165, align 2
  store i16 %166, i16* %164, align 2
  %167 = getelementptr inbounds i16, i16* %162, i64 2
  %168 = getelementptr inbounds i16, i16* %161, i64 2
  %169 = load i16, i16* %168, align 2
  store i16 %169, i16* %167, align 2
  %170 = getelementptr inbounds i16, i16* %162, i64 3
  %171 = getelementptr inbounds i16, i16* %161, i64 3
  %172 = load i16, i16* %171, align 2
  store i16 %172, i16* %170, align 2
  %173 = getelementptr inbounds i16, i16* %162, i64 4
  %174 = getelementptr inbounds i16, i16* %161, i64 4
  %175 = load i16, i16* %174, align 2
  store i16 %175, i16* %173, align 2
  %176 = getelementptr inbounds i16, i16* %162, i64 5
  %177 = getelementptr inbounds i16, i16* %161, i64 5
  %178 = load i16, i16* %177, align 2
  store i16 %178, i16* %176, align 2
  %179 = getelementptr inbounds i16, i16* %162, i64 6
  %180 = getelementptr inbounds i16, i16* %161, i64 6
  %181 = load i16, i16* %180, align 2
  store i16 %181, i16* %179, align 2
  %182 = getelementptr inbounds i16, i16* %162, i64 7
  %183 = getelementptr inbounds i16, i16* %161, i64 7
  %184 = load i16, i16* %183, align 2
  store i16 %184, i16* %182, align 2
  %185 = add i64 %160, -8
  %186 = getelementptr inbounds i16, i16* %162, i64 8
  %187 = getelementptr inbounds i16, i16* %161, i64 8
  %188 = icmp eq i64 %185, 0
  br i1 %188, label %189, label %159, !llvm.loop !82

189:                                              ; preds = %154, %159, %134, %38
  %190 = icmp eq i64 %6, 0
  br i1 %190, label %289, label %191

191:                                              ; preds = %189
  %192 = getelementptr inbounds i16, i16* %42, i64 %4
  %193 = icmp ult i64 %6, 16
  br i1 %193, label %276, label %194

194:                                              ; preds = %191
  %195 = and i64 %6, -16
  %196 = sub i64 %6, %195
  %197 = getelementptr i16, i16* %7, i64 %195
  %198 = getelementptr i16, i16* %192, i64 %195
  %199 = add i64 %195, -16
  %200 = lshr exact i64 %199, 4
  %201 = add nuw nsw i64 %200, 1
  %202 = and i64 %201, 3
  %203 = icmp ult i64 %199, 48
  br i1 %203, label %255, label %204

204:                                              ; preds = %194
  %205 = sub nsw i64 %201, %202
  br label %206

206:                                              ; preds = %206, %204
  %207 = phi i64 [ 0, %204 ], [ %252, %206 ]
  %208 = phi i64 [ %205, %204 ], [ %253, %206 ]
  %209 = getelementptr i16, i16* %7, i64 %207
  %210 = getelementptr i16, i16* %192, i64 %207
  %211 = bitcast i16* %209 to <8 x i16>*
  %212 = load <8 x i16>, <8 x i16>* %211, align 2
  %213 = getelementptr i16, i16* %209, i64 8
  %214 = bitcast i16* %213 to <8 x i16>*
  %215 = load <8 x i16>, <8 x i16>* %214, align 2
  %216 = bitcast i16* %210 to <8 x i16>*
  store <8 x i16> %212, <8 x i16>* %216, align 2
  %217 = getelementptr i16, i16* %210, i64 8
  %218 = bitcast i16* %217 to <8 x i16>*
  store <8 x i16> %215, <8 x i16>* %218, align 2
  %219 = or i64 %207, 16
  %220 = getelementptr i16, i16* %7, i64 %219
  %221 = getelementptr i16, i16* %192, i64 %219
  %222 = bitcast i16* %220 to <8 x i16>*
  %223 = load <8 x i16>, <8 x i16>* %222, align 2
  %224 = getelementptr i16, i16* %220, i64 8
  %225 = bitcast i16* %224 to <8 x i16>*
  %226 = load <8 x i16>, <8 x i16>* %225, align 2
  %227 = bitcast i16* %221 to <8 x i16>*
  store <8 x i16> %223, <8 x i16>* %227, align 2
  %228 = getelementptr i16, i16* %221, i64 8
  %229 = bitcast i16* %228 to <8 x i16>*
  store <8 x i16> %226, <8 x i16>* %229, align 2
  %230 = or i64 %207, 32
  %231 = getelementptr i16, i16* %7, i64 %230
  %232 = getelementptr i16, i16* %192, i64 %230
  %233 = bitcast i16* %231 to <8 x i16>*
  %234 = load <8 x i16>, <8 x i16>* %233, align 2
  %235 = getelementptr i16, i16* %231, i64 8
  %236 = bitcast i16* %235 to <8 x i16>*
  %237 = load <8 x i16>, <8 x i16>* %236, align 2
  %238 = bitcast i16* %232 to <8 x i16>*
  store <8 x i16> %234, <8 x i16>* %238, align 2
  %239 = getelementptr i16, i16* %232, i64 8
  %240 = bitcast i16* %239 to <8 x i16>*
  store <8 x i16> %237, <8 x i16>* %240, align 2
  %241 = or i64 %207, 48
  %242 = getelementptr i16, i16* %7, i64 %241
  %243 = getelementptr i16, i16* %192, i64 %241
  %244 = bitcast i16* %242 to <8 x i16>*
  %245 = load <8 x i16>, <8 x i16>* %244, align 2
  %246 = getelementptr i16, i16* %242, i64 8
  %247 = bitcast i16* %246 to <8 x i16>*
  %248 = load <8 x i16>, <8 x i16>* %247, align 2
  %249 = bitcast i16* %243 to <8 x i16>*
  store <8 x i16> %245, <8 x i16>* %249, align 2
  %250 = getelementptr i16, i16* %243, i64 8
  %251 = bitcast i16* %250 to <8 x i16>*
  store <8 x i16> %248, <8 x i16>* %251, align 2
  %252 = add i64 %207, 64
  %253 = add i64 %208, -4
  %254 = icmp eq i64 %253, 0
  br i1 %254, label %255, label %206, !llvm.loop !83

255:                                              ; preds = %206, %194
  %256 = phi i64 [ 0, %194 ], [ %252, %206 ]
  %257 = icmp eq i64 %202, 0
  br i1 %257, label %274, label %258

258:                                              ; preds = %255, %258
  %259 = phi i64 [ %271, %258 ], [ %256, %255 ]
  %260 = phi i64 [ %272, %258 ], [ %202, %255 ]
  %261 = getelementptr i16, i16* %7, i64 %259
  %262 = getelementptr i16, i16* %192, i64 %259
  %263 = bitcast i16* %261 to <8 x i16>*
  %264 = load <8 x i16>, <8 x i16>* %263, align 2
  %265 = getelementptr i16, i16* %261, i64 8
  %266 = bitcast i16* %265 to <8 x i16>*
  %267 = load <8 x i16>, <8 x i16>* %266, align 2
  %268 = bitcast i16* %262 to <8 x i16>*
  store <8 x i16> %264, <8 x i16>* %268, align 2
  %269 = getelementptr i16, i16* %262, i64 8
  %270 = bitcast i16* %269 to <8 x i16>*
  store <8 x i16> %267, <8 x i16>* %270, align 2
  %271 = add i64 %259, 16
  %272 = add i64 %260, -1
  %273 = icmp eq i64 %272, 0
  br i1 %273, label %274, label %258, !llvm.loop !84

274:                                              ; preds = %258, %255
  %275 = icmp eq i64 %195, %6
  br i1 %275, label %289, label %276

276:                                              ; preds = %274, %191
  %277 = phi i64 [ %6, %191 ], [ %196, %274 ]
  %278 = phi i16* [ %7, %191 ], [ %197, %274 ]
  %279 = phi i16* [ %192, %191 ], [ %198, %274 ]
  br label %280

280:                                              ; preds = %276, %280
  %281 = phi i64 [ %285, %280 ], [ %277, %276 ]
  %282 = phi i16* [ %287, %280 ], [ %278, %276 ]
  %283 = phi i16* [ %286, %280 ], [ %279, %276 ]
  %284 = load i16, i16* %282, align 2
  store i16 %284, i16* %283, align 2
  %285 = add i64 %281, -1
  %286 = getelementptr inbounds i16, i16* %283, i64 1
  %287 = getelementptr inbounds i16, i16* %282, i64 1
  %288 = icmp eq i64 %285, 0
  br i1 %288, label %289, label %280, !llvm.loop !85

289:                                              ; preds = %280, %274, %189
  %290 = sub i64 %3, %5
  %291 = sub i64 %290, %4
  %292 = icmp eq i64 %291, 0
  br i1 %292, label %448, label %293

293:                                              ; preds = %289
  %294 = getelementptr inbounds i16, i16* %42, i64 %4
  %295 = getelementptr inbounds i16, i16* %294, i64 %6
  %296 = getelementptr inbounds i16, i16* %24, i64 %4
  %297 = getelementptr inbounds i16, i16* %296, i64 %5
  %298 = icmp ult i64 %291, 16
  br i1 %298, label %395, label %299

299:                                              ; preds = %293
  %300 = bitcast i16* %297 to i8*
  %301 = add i64 %6, %4
  %302 = shl i64 %301, 1
  %303 = getelementptr i8, i8* %41, i64 %302
  %304 = add i64 %6, %3
  %305 = sub i64 %304, %5
  %306 = shl i64 %305, 1
  %307 = getelementptr i8, i8* %41, i64 %306
  %308 = getelementptr i16, i16* %24, i64 %3
  %309 = bitcast i16* %308 to i8*
  %310 = icmp ult i8* %303, %309
  %311 = icmp ugt i8* %307, %300
  %312 = and i1 %310, %311
  br i1 %312, label %395, label %313

313:                                              ; preds = %299
  %314 = and i64 %291, -16
  %315 = sub i64 %291, %314
  %316 = getelementptr i16, i16* %297, i64 %314
  %317 = getelementptr i16, i16* %295, i64 %314
  %318 = add i64 %314, -16
  %319 = lshr exact i64 %318, 4
  %320 = add nuw nsw i64 %319, 1
  %321 = and i64 %320, 3
  %322 = icmp ult i64 %318, 48
  br i1 %322, label %374, label %323

323:                                              ; preds = %313
  %324 = sub nsw i64 %320, %321
  br label %325

325:                                              ; preds = %325, %323
  %326 = phi i64 [ 0, %323 ], [ %371, %325 ]
  %327 = phi i64 [ %324, %323 ], [ %372, %325 ]
  %328 = getelementptr i16, i16* %297, i64 %326
  %329 = getelementptr i16, i16* %295, i64 %326
  %330 = bitcast i16* %328 to <8 x i16>*
  %331 = load <8 x i16>, <8 x i16>* %330, align 2, !alias.scope !87
  %332 = getelementptr i16, i16* %328, i64 8
  %333 = bitcast i16* %332 to <8 x i16>*
  %334 = load <8 x i16>, <8 x i16>* %333, align 2, !alias.scope !87
  %335 = bitcast i16* %329 to <8 x i16>*
  store <8 x i16> %331, <8 x i16>* %335, align 2, !alias.scope !90, !noalias !87
  %336 = getelementptr i16, i16* %329, i64 8
  %337 = bitcast i16* %336 to <8 x i16>*
  store <8 x i16> %334, <8 x i16>* %337, align 2, !alias.scope !90, !noalias !87
  %338 = or i64 %326, 16
  %339 = getelementptr i16, i16* %297, i64 %338
  %340 = getelementptr i16, i16* %295, i64 %338
  %341 = bitcast i16* %339 to <8 x i16>*
  %342 = load <8 x i16>, <8 x i16>* %341, align 2, !alias.scope !87
  %343 = getelementptr i16, i16* %339, i64 8
  %344 = bitcast i16* %343 to <8 x i16>*
  %345 = load <8 x i16>, <8 x i16>* %344, align 2, !alias.scope !87
  %346 = bitcast i16* %340 to <8 x i16>*
  store <8 x i16> %342, <8 x i16>* %346, align 2, !alias.scope !90, !noalias !87
  %347 = getelementptr i16, i16* %340, i64 8
  %348 = bitcast i16* %347 to <8 x i16>*
  store <8 x i16> %345, <8 x i16>* %348, align 2, !alias.scope !90, !noalias !87
  %349 = or i64 %326, 32
  %350 = getelementptr i16, i16* %297, i64 %349
  %351 = getelementptr i16, i16* %295, i64 %349
  %352 = bitcast i16* %350 to <8 x i16>*
  %353 = load <8 x i16>, <8 x i16>* %352, align 2, !alias.scope !87
  %354 = getelementptr i16, i16* %350, i64 8
  %355 = bitcast i16* %354 to <8 x i16>*
  %356 = load <8 x i16>, <8 x i16>* %355, align 2, !alias.scope !87
  %357 = bitcast i16* %351 to <8 x i16>*
  store <8 x i16> %353, <8 x i16>* %357, align 2, !alias.scope !90, !noalias !87
  %358 = getelementptr i16, i16* %351, i64 8
  %359 = bitcast i16* %358 to <8 x i16>*
  store <8 x i16> %356, <8 x i16>* %359, align 2, !alias.scope !90, !noalias !87
  %360 = or i64 %326, 48
  %361 = getelementptr i16, i16* %297, i64 %360
  %362 = getelementptr i16, i16* %295, i64 %360
  %363 = bitcast i16* %361 to <8 x i16>*
  %364 = load <8 x i16>, <8 x i16>* %363, align 2, !alias.scope !87
  %365 = getelementptr i16, i16* %361, i64 8
  %366 = bitcast i16* %365 to <8 x i16>*
  %367 = load <8 x i16>, <8 x i16>* %366, align 2, !alias.scope !87
  %368 = bitcast i16* %362 to <8 x i16>*
  store <8 x i16> %364, <8 x i16>* %368, align 2, !alias.scope !90, !noalias !87
  %369 = getelementptr i16, i16* %362, i64 8
  %370 = bitcast i16* %369 to <8 x i16>*
  store <8 x i16> %367, <8 x i16>* %370, align 2, !alias.scope !90, !noalias !87
  %371 = add i64 %326, 64
  %372 = add i64 %327, -4
  %373 = icmp eq i64 %372, 0
  br i1 %373, label %374, label %325, !llvm.loop !92

374:                                              ; preds = %325, %313
  %375 = phi i64 [ 0, %313 ], [ %371, %325 ]
  %376 = icmp eq i64 %321, 0
  br i1 %376, label %393, label %377

377:                                              ; preds = %374, %377
  %378 = phi i64 [ %390, %377 ], [ %375, %374 ]
  %379 = phi i64 [ %391, %377 ], [ %321, %374 ]
  %380 = getelementptr i16, i16* %297, i64 %378
  %381 = getelementptr i16, i16* %295, i64 %378
  %382 = bitcast i16* %380 to <8 x i16>*
  %383 = load <8 x i16>, <8 x i16>* %382, align 2, !alias.scope !87
  %384 = getelementptr i16, i16* %380, i64 8
  %385 = bitcast i16* %384 to <8 x i16>*
  %386 = load <8 x i16>, <8 x i16>* %385, align 2, !alias.scope !87
  %387 = bitcast i16* %381 to <8 x i16>*
  store <8 x i16> %383, <8 x i16>* %387, align 2, !alias.scope !90, !noalias !87
  %388 = getelementptr i16, i16* %381, i64 8
  %389 = bitcast i16* %388 to <8 x i16>*
  store <8 x i16> %386, <8 x i16>* %389, align 2, !alias.scope !90, !noalias !87
  %390 = add i64 %378, 16
  %391 = add i64 %379, -1
  %392 = icmp eq i64 %391, 0
  br i1 %392, label %393, label %377, !llvm.loop !93

393:                                              ; preds = %377, %374
  %394 = icmp eq i64 %291, %314
  br i1 %394, label %448, label %395

395:                                              ; preds = %393, %299, %293
  %396 = phi i64 [ %291, %299 ], [ %291, %293 ], [ %315, %393 ]
  %397 = phi i16* [ %297, %299 ], [ %297, %293 ], [ %316, %393 ]
  %398 = phi i16* [ %295, %299 ], [ %295, %293 ], [ %317, %393 ]
  %399 = add i64 %396, -1
  %400 = and i64 %396, 7
  %401 = icmp eq i64 %400, 0
  br i1 %401, label %413, label %402

402:                                              ; preds = %395, %402
  %403 = phi i64 [ %408, %402 ], [ %396, %395 ]
  %404 = phi i16* [ %410, %402 ], [ %397, %395 ]
  %405 = phi i16* [ %409, %402 ], [ %398, %395 ]
  %406 = phi i64 [ %411, %402 ], [ %400, %395 ]
  %407 = load i16, i16* %404, align 2
  store i16 %407, i16* %405, align 2
  %408 = add i64 %403, -1
  %409 = getelementptr inbounds i16, i16* %405, i64 1
  %410 = getelementptr inbounds i16, i16* %404, i64 1
  %411 = add i64 %406, -1
  %412 = icmp eq i64 %411, 0
  br i1 %412, label %413, label %402, !llvm.loop !94

413:                                              ; preds = %402, %395
  %414 = phi i64 [ %396, %395 ], [ %408, %402 ]
  %415 = phi i16* [ %397, %395 ], [ %410, %402 ]
  %416 = phi i16* [ %398, %395 ], [ %409, %402 ]
  %417 = icmp ult i64 %399, 7
  br i1 %417, label %448, label %418

418:                                              ; preds = %413, %418
  %419 = phi i64 [ %444, %418 ], [ %414, %413 ]
  %420 = phi i16* [ %446, %418 ], [ %415, %413 ]
  %421 = phi i16* [ %445, %418 ], [ %416, %413 ]
  %422 = load i16, i16* %420, align 2
  store i16 %422, i16* %421, align 2
  %423 = getelementptr inbounds i16, i16* %421, i64 1
  %424 = getelementptr inbounds i16, i16* %420, i64 1
  %425 = load i16, i16* %424, align 2
  store i16 %425, i16* %423, align 2
  %426 = getelementptr inbounds i16, i16* %421, i64 2
  %427 = getelementptr inbounds i16, i16* %420, i64 2
  %428 = load i16, i16* %427, align 2
  store i16 %428, i16* %426, align 2
  %429 = getelementptr inbounds i16, i16* %421, i64 3
  %430 = getelementptr inbounds i16, i16* %420, i64 3
  %431 = load i16, i16* %430, align 2
  store i16 %431, i16* %429, align 2
  %432 = getelementptr inbounds i16, i16* %421, i64 4
  %433 = getelementptr inbounds i16, i16* %420, i64 4
  %434 = load i16, i16* %433, align 2
  store i16 %434, i16* %432, align 2
  %435 = getelementptr inbounds i16, i16* %421, i64 5
  %436 = getelementptr inbounds i16, i16* %420, i64 5
  %437 = load i16, i16* %436, align 2
  store i16 %437, i16* %435, align 2
  %438 = getelementptr inbounds i16, i16* %421, i64 6
  %439 = getelementptr inbounds i16, i16* %420, i64 6
  %440 = load i16, i16* %439, align 2
  store i16 %440, i16* %438, align 2
  %441 = getelementptr inbounds i16, i16* %421, i64 7
  %442 = getelementptr inbounds i16, i16* %420, i64 7
  %443 = load i16, i16* %442, align 2
  store i16 %443, i16* %441, align 2
  %444 = add i64 %419, -8
  %445 = getelementptr inbounds i16, i16* %421, i64 8
  %446 = getelementptr inbounds i16, i16* %420, i64 8
  %447 = icmp eq i64 %444, 0
  br i1 %447, label %448, label %418, !llvm.loop !95

448:                                              ; preds = %413, %418, %393, %289
  %449 = icmp eq i64 %1, 10
  br i1 %449, label %451, label %450

450:                                              ; preds = %448
  tail call void @_ZdlPv(i8* %25) #13
  br label %451

451:                                              ; preds = %448, %450
  %452 = bitcast %"class.std::__1::basic_string.5"* %0 to i8**
  store i8* %41, i8** %452, align 8
  %453 = or i64 %39, -9223372036854775808
  %454 = getelementptr inbounds %"class.std::__1::basic_string.5", %"class.std::__1::basic_string.5"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %453, i64* %454, align 8
  %455 = add i64 %290, %6
  %456 = getelementptr inbounds %"class.std::__1::basic_string.5", %"class.std::__1::basic_string.5"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %455, i64* %456, align 8
  %457 = getelementptr inbounds i16, i16* %42, i64 %455
  store i16 0, i16* %457, align 2
  ret void
}

; Function Attrs: noreturn
declare void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"*) local_unnamed_addr #11

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #12

; Function Attrs: nounwind
declare void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"*) unnamed_addr #9

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #11

declare void @_ZN4base8internal12LinkNodeBaseC2Ev(%"class.base::internal::LinkNodeBase"*) unnamed_addr #4

declare void @_ZN4base8internal12LinkNodeBase16InsertBeforeBaseEPS1_(%"class.base::internal::LinkNodeBase"*, %"class.base::internal::LinkNodeBase"*) local_unnamed_addr #4

attributes #0 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { cold noreturn nounwind }
attributes #8 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { builtin nounwind }
attributes #14 = { nounwind }
attributes #15 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZN6device5mojom13UsbDeviceInfo3NewIJEEEN4mojo9StructPtrIS1_EEDpOT_: argument 0"}
!4 = distinct !{!4, !"_ZN6device5mojom13UsbDeviceInfo3NewIJEEEN4mojo9StructPtrIS1_EEDpOT_"}
!5 = !{!6}
!6 = distinct !{!6, !7, !"_ZN6device5mojom13UsbDeviceInfo3NewIJEEEN4mojo9StructPtrIS1_EEDpOT_: argument 0"}
!7 = distinct !{!7, !"_ZN6device5mojom13UsbDeviceInfo3NewIJEEEN4mojo9StructPtrIS1_EEDpOT_"}
!8 = !{i8 0, i8 2}
!9 = !{!10}
!10 = distinct !{!10, !11}
!11 = distinct !{!11, !"LVerDomain"}
!12 = !{!13}
!13 = distinct !{!13, !11}
!14 = distinct !{!14, !15}
!15 = !{!"llvm.loop.isvectorized", i32 1}
!16 = distinct !{!16, !17}
!17 = !{!"llvm.loop.unroll.disable"}
!18 = distinct !{!18, !17}
!19 = distinct !{!19, !15}
!20 = !{!21}
!21 = distinct !{!21, !22}
!22 = distinct !{!22, !"LVerDomain"}
!23 = !{!24}
!24 = distinct !{!24, !22}
!25 = distinct !{!25, !15}
!26 = distinct !{!26, !17}
!27 = distinct !{!27, !17}
!28 = distinct !{!28, !15}
!29 = !{!30}
!30 = distinct !{!30, !31}
!31 = distinct !{!31, !"LVerDomain"}
!32 = !{!33}
!33 = distinct !{!33, !31}
!34 = distinct !{!34, !15}
!35 = distinct !{!35, !17}
!36 = distinct !{!36, !17}
!37 = distinct !{!37, !15}
!38 = distinct !{!38, !17}
!39 = !{!40}
!40 = distinct !{!40, !41, !"_ZNK4base12ObserverListIN6device9UsbDevice8ObserverELb1ELb1ENS_8internal24UncheckedObserverAdapterEE5beginEv: argument 0"}
!41 = distinct !{!41, !"_ZNK4base12ObserverListIN6device9UsbDevice8ObserverELb1ELb1ENS_8internal24UncheckedObserverAdapterEE5beginEv"}
!42 = !{!43}
!43 = distinct !{!43, !44, !"_ZNK4base12ObserverListIN6device9UsbDevice8ObserverELb1ELb1ENS_8internal24UncheckedObserverAdapterEE3endEv: argument 0"}
!44 = distinct !{!44, !"_ZNK4base12ObserverListIN6device9UsbDevice8ObserverELb1ELb1ENS_8internal24UncheckedObserverAdapterEE3endEv"}
!45 = distinct !{!45, !17}
!46 = distinct !{!46, !17}
!47 = !{!48}
!48 = distinct !{!48, !49}
!49 = distinct !{!49, !"LVerDomain"}
!50 = !{!51}
!51 = distinct !{!51, !49}
!52 = distinct !{!52, !15}
!53 = distinct !{!53, !17}
!54 = distinct !{!54, !17}
!55 = distinct !{!55, !15}
!56 = !{!57}
!57 = distinct !{!57, !58}
!58 = distinct !{!58, !"LVerDomain"}
!59 = !{!60}
!60 = distinct !{!60, !58}
!61 = distinct !{!61, !15}
!62 = distinct !{!62, !17}
!63 = distinct !{!63, !17}
!64 = distinct !{!64, !15}
!65 = !{!66}
!66 = distinct !{!66, !67}
!67 = distinct !{!67, !"LVerDomain"}
!68 = !{!69}
!69 = distinct !{!69, !67}
!70 = distinct !{!70, !15}
!71 = distinct !{!71, !17}
!72 = distinct !{!72, !17}
!73 = distinct !{!73, !15}
!74 = !{!75}
!75 = distinct !{!75, !76}
!76 = distinct !{!76, !"LVerDomain"}
!77 = !{!78}
!78 = distinct !{!78, !76}
!79 = distinct !{!79, !15}
!80 = distinct !{!80, !17}
!81 = distinct !{!81, !17}
!82 = distinct !{!82, !15}
!83 = distinct !{!83, !15}
!84 = distinct !{!84, !17}
!85 = distinct !{!85, !86, !15}
!86 = !{!"llvm.loop.unroll.runtime.disable"}
!87 = !{!88}
!88 = distinct !{!88, !89}
!89 = distinct !{!89, !"LVerDomain"}
!90 = !{!91}
!91 = distinct !{!91, !89}
!92 = distinct !{!92, !15}
!93 = distinct !{!93, !17}
!94 = distinct !{!94, !17}
!95 = distinct !{!95, !15}
