; ModuleID = '../../third_party/libvpx/source/libvpx/vp8/encoder/ethreading.c'
source_filename = "../../third_party/libvpx/source/libvpx/vp8/encoder/ethreading.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.VP8_COMP = type { [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], %struct.macroblock, %struct.VP8Common, [9 x %struct.BOOL_CODER], %struct.VP8_CONFIG, %struct.lookahead_ctx*, %struct.lookahead_entry*, %struct.lookahead_entry*, %struct.lookahead_entry*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config, %struct.yv12_buffer_config*, i32, i32, i32, i32, i32, i32, i32, %struct.yv12_buffer_config, %struct.TOKENEXTRA*, i32, i32, i32, i32, i32, i32, [20 x i32], [20 x i32], i32, i32, %struct.CODING_CONTEXT, i64, i64, i32, i32, [2 x i32], double, double, double, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, [5 x i32], i32, i32, i32, i32, double, i64, i64, i64, i32, i32, i32, i32, i64, i32, double, double, i64, i64, i32, i32, i32, i32, i64, i32, i32, i32, i32, i32, i32, i32, i32, [4 x [8 x [3 x [11 x i8]]]], [4 x [8 x [3 x [11 x i8]]]], [4 x [8 x [3 x [11 x [2 x i32]]]]], i32, i32, i32, i32, %struct.vpx_codec_pkt_list*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [3 x i32], [3 x i32], [4 x i32], i32, i32, i32, %struct.SPEED_FEATURES, i32, i32, i8*, i8*, [2 x [4 x i8]], [4 x i32], i8*, i32, i32, i32, i32, i32, i8*, i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.vpx_atomic_int*, i32, %struct.vpx_atomic_int, i32, i32, i64*, i64, %struct.MB_ROW_COMP*, %struct.ENCODETHREAD_DATA*, %struct.LPFTHREAD_DATA, %union.sem_t*, %union.sem_t*, %union.sem_t, %union.sem_t, %struct.TOKENLIST*, [9 x i32], [9 x i8*], [9 x i8*], i32 (%struct.macroblock*, %struct.block*, %struct.blockd*, %union.int_mv*, %union.int_mv*, i32, %struct.variance_vtable*, i32**, i32*, i32*)*, i32 (%struct.macroblock*, %struct.block*, %struct.blockd*, %union.int_mv*, i32, i32, %struct.variance_vtable*, i32**, %union.int_mv*)*, i32 (%struct.macroblock*, %struct.block*, %struct.blockd*, %union.int_mv*, i32, i32, %struct.variance_vtable*, i32**, %union.int_mv*)*, i32 (%struct.macroblock*, %struct.block*, %struct.blockd*, %union.int_mv*, %union.int_mv*, i32, i32, i32*, %struct.variance_vtable*, i32**, %union.int_mv*)*, [5 x %struct.variance_vtable], i64, i64, i64, i64, [128 x i32], %struct.frame_contexts, %struct.frame_contexts, %struct.frame_contexts, %struct.twopass_rc, i32, i32, i32*, i8*, i32, i32, %union.int_mv*, i32*, i32*, i32, i32, i32, i32, %struct.vp8_denoiser, i32, [5 x %struct.LAYER_CONTEXT], [5 x i64], [5 x i64], [5 x double], [5 x double], [5 x double], [5 x double], [5 x double], [5 x double], [5 x double], [5 x double], [5 x double], [5 x double], i32, i8, [4 x i32], i32, %struct.rd_costs_struct, i32, i32, [12 x i8] }
%struct.macroblock = type { [400 x i16], [400 x i16], [256 x i8], i8*, [25 x %struct.block], %struct.yv12_buffer_config, %struct.macroblockd, %struct.PARTITION_INFO*, %struct.PARTITION_INFO*, %struct.PARTITION_INFO*, [4 x i32], %struct.search_site*, i32, i32, i32, i32, i32, i32, i32, i32*, i32*, i32, i32, [2 x i32*], [2 x i32*], [10 x i32]*, [10 x i32]*, [10 x [10 x i32]]*, i32*, [8 x [3 x [12 x i32]]]*, i32, i32, i32, i32, i32, i32, i8*, i8*, %struct.mv_context*, i32, i32, i32, i32, i32, i32, %union.int_mv, i32, i32, i8, i32, [4 x [8 x [3 x [12 x i32]]]], [2 x [2047 x i32]], [5 x i32], [4 x i32], i64, i64, [4 x i32], [20 x i32], [20 x i32], i32, [20 x i32], i32, i32, i32, i32, i32, [1024 x i32], void (i16*, i16*, i32)*, void (i16*, i16*, i32)*, void (i16*, i16*, i32)*, void (%struct.block*, %struct.blockd*)*, i32, i32, [8 x i8] }
%struct.block = type { i16*, i16*, i16*, i16*, i16*, i16*, i16*, i16*, i16, i8**, i32, i32 }
%struct.macroblockd = type { [384 x i8], [400 x i16], [400 x i16], [25 x i8], [7 x i8], [16 x i16], [16 x i16], [16 x i16], [16 x i16], [25 x %struct.blockd], i32, %struct.yv12_buffer_config, %struct.yv12_buffer_config, %struct.modeinfo*, i32, i32, i32, i32, [3 x i8*], [3 x i8*], [2 x i32], %struct.ENTROPY_CONTEXT_PLANES*, %struct.ENTROPY_CONTEXT_PLANES*, i8, i8, i8, i8, [3 x i8], [2 x [4 x i8]], i8, i8, [4 x i8], [4 x i8], [4 x i8], [4 x i8], i32, i32, i32, i32, void (i8*, i32, i32, i32, i8*, i32)*, void (i8*, i32, i32, i32, i8*, i32)*, void (i8*, i32, i32, i32, i8*, i32)*, void (i8*, i32, i32, i32, i8*, i32)*, i8*, i32, %struct.vpx_internal_error_info, [16 x i8], [704 x i8] }
%struct.blockd = type { i16*, i16*, i8*, i16*, i32, i8*, %union.b_mode_info }
%union.b_mode_info = type { i32 }
%struct.modeinfo = type { %struct.MB_MODE_INFO, [16 x %union.b_mode_info] }
%struct.MB_MODE_INFO = type { i8, i8, i8, i8, %union.int_mv, i8, i8, i8, i8 }
%struct.ENTROPY_CONTEXT_PLANES = type { [4 x i8], [2 x i8], [2 x i8], i8 }
%struct.vpx_internal_error_info = type { i32, i32, [80 x i8], i32, [1 x %struct.__jmp_buf_tag] }
%struct.__jmp_buf_tag = type { [8 x i64], i32, %struct.__sigset_t }
%struct.__sigset_t = type { [16 x i64] }
%struct.PARTITION_INFO = type { i32, [16 x %struct.anon] }
%struct.anon = type { i32, %union.int_mv }
%struct.search_site = type { %struct.MV, i32 }
%struct.MV = type { i16, i16 }
%struct.mv_context = type { [19 x i8] }
%union.int_mv = type { i32 }
%struct.VP8Common = type { %struct.vpx_internal_error_info, [8 x i8], [128 x [2 x i16]], [128 x [2 x i16]], [128 x [2 x i16]], i32, i32, i32, i32, i32, %struct.yv12_buffer_config*, [4 x %struct.yv12_buffer_config], [4 x i32], i32, i32, i32, i32, %struct.yv12_buffer_config, %struct.yv12_buffer_config, %struct.yv12_buffer_config, i32, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.modeinfo*, %struct.modeinfo*, %struct.modeinfo*, i32, [12 x i8], %struct.loop_filter_info_n, i32, i32, i32, i32, i32, i32, i32, i32, i32, [4 x i32], %struct.ENTROPY_CONTEXT_PLANES*, %struct.ENTROPY_CONTEXT_PLANES, %struct.frame_contexts, %struct.frame_contexts, i32, i32, i32, i32, %struct.postproc_state, i32, [12 x i8] }
%struct.loop_filter_info_n = type { [64 x [16 x i8]], [64 x [16 x i8]], [64 x [16 x i8]], [4 x [16 x i8]], [4 x [4 x [4 x i8]]], [2 x [64 x i8]], [10 x i8], [6 x i8] }
%struct.postproc_state = type { i32, i32, i32, i32, i32, i8* }
%struct.BOOL_CODER = type { i32, i32, i32, i32, i8*, i8*, %struct.vpx_internal_error_info* }
%struct.VP8_CONFIG = type { i32, i32, i32, %struct.vpx_rational, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, i64, i64, i64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.vpx_fixed_buf, %struct.vpx_codec_pkt_list*, i32, i32, [16 x i32], [16 x i32], i32, [16 x i32], i32, i32, %struct.vpx_rational, i8* }
%struct.vpx_fixed_buf = type { i8*, i64 }
%struct.vpx_rational = type { i32, i32 }
%struct.lookahead_ctx = type opaque
%struct.lookahead_entry = type { %struct.yv12_buffer_config, i64, i64, i32 }
%struct.yv12_buffer_config = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i8*, i8*, i8*, i64, i32, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.TOKENEXTRA = type { i8*, i16, i8, i8 }
%struct.CODING_CONTEXT = type { i32, i32, i32, i32, i32, [4 x i32], [2 x %struct.mv_context], [2 x [2048 x i32]], [4 x i8], [3 x i8], [4 x i8], [3 x i8], [5 x i32], [4 x i32], [4 x i32], i32, i32 }
%struct.vpx_codec_pkt_list = type { i32, i32, [1 x %struct.vpx_codec_cx_pkt] }
%struct.vpx_codec_cx_pkt = type { i32, %union.anon }
%union.anon = type { %struct.anon.0, [40 x i8] }
%struct.anon.0 = type { i8*, i64, i64, i64, i32, i32, [5 x i32], [5 x i32], [5 x i8] }
%struct.SPEED_FEATURES = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, [20 x i32], i32, i32, i32, i32, i32, i32 }
%struct.vpx_atomic_int = type { i32 }
%struct.ENCODETHREAD_DATA = type { i32, i8*, i8* }
%struct.LPFTHREAD_DATA = type { i32, i8* }
%union.sem_t = type { i64, [24 x i8] }
%struct.TOKENLIST = type { %struct.TOKENEXTRA*, %struct.TOKENEXTRA* }
%struct.variance_vtable = type { i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32, i32*)*, i32 (i8*, i32, i32, i32, i8*, i32, i32*)*, void (i8*, i32, i8*, i32, i32*)*, void (i8*, i32, i8*, i32, i32*)*, void (i8*, i32, i8**, i32, i32*)*, void (i8*, i32, i8*, i32, i32)* }
%struct.frame_contexts = type { [9 x i8], [4 x i8], [3 x i8], [3 x i8], [4 x [8 x [3 x [11 x i8]]]], [2 x %struct.mv_context] }
%struct.twopass_rc = type { i32, double, i32, i32, %struct.FIRSTPASS_STATS, %struct.FIRSTPASS_STATS, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS, i32, i64, i64, double, double, double, double, double, double, i32, i32, i32, i32, i32, i32, i32, i64, i64, i64, i32, i32, double }
%struct.FIRSTPASS_STATS = type { double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double }
%struct.vp8_denoiser = type { [4 x %struct.yv12_buffer_config], %struct.yv12_buffer_config, %struct.yv12_buffer_config, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.denoise_params }
%struct.denoise_params = type { i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.LAYER_CONTEXT = type { double, i32, i64, i64, i64, i64, i64, i64, i32, i64, i64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, double, double, double, i32, i32, i64, i32, i32, i32, i32, [4 x i32], [2 x i32] }
%struct.rd_costs_struct = type { [2 x [2048 x i32]], [2 x [512 x i32]], [2 x [10 x i32]], [2 x [10 x i32]], [10 x [10 x [10 x i32]]], [14 x i32], [4 x [8 x [3 x [12 x i32]]]] }
%struct.MB_ROW_COMP = type { %struct.macroblock, [4 x i32], i32, [12 x i8] }
%union.pthread_attr_t = type { i64, [48 x i8] }

@.str = private unnamed_addr constant [42 x i8] c"Failed to allocate cpi->h_encoding_thread\00", align 1
@.str.1 = private unnamed_addr constant [47 x i8] c"Failed to allocate cpi->h_event_start_encoding\00", align 1
@.str.2 = private unnamed_addr constant [45 x i8] c"Failed to allocate cpi->h_event_end_encoding\00", align 1
@.str.3 = private unnamed_addr constant [34 x i8] c"Failed to allocate cpi->mb_row_ei\00", align 1
@.str.4 = private unnamed_addr constant [39 x i8] c"Failed to allocate cpi->en_thread_data\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @vp8cx_init_mbrthread_data(%struct.VP8_COMP*, %struct.macroblock*, %struct.MB_ROW_COMP*, i32) local_unnamed_addr #0 {
  %5 = icmp sgt i32 %3, 0
  br i1 %5, label %6, label %323

6:                                                ; preds = %4
  %7 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 39
  %8 = bitcast void (i8*, i32, i32, i32, i8*, i32)** %7 to i64*
  %9 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 40
  %10 = bitcast void (i8*, i32, i32, i32, i8*, i32)** %9 to i64*
  %11 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 41
  %12 = bitcast void (i8*, i32, i32, i32, i8*, i32)** %11 to i64*
  %13 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 42
  %14 = bitcast void (i8*, i32, i32, i32, i8*, i32)** %13 to i64*
  %15 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 36
  %16 = bitcast i8** %15 to i64*
  %17 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 8
  %18 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 14
  %19 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 23
  %20 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 26
  %21 = bitcast %struct.yv12_buffer_config** %20 to i8**
  %22 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 14
  %23 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 13
  %24 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 5, i32 4
  %25 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 5, i32 9
  %26 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 57
  %27 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 59, i32 5, i64 0
  %28 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 11
  %29 = bitcast %struct.search_site** %28 to i64*
  %30 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 12
  %31 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 13
  %32 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 14
  %33 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 15
  %34 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 16
  %35 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 67
  %36 = bitcast void (i16*, i16*, i32)** %35 to i64*
  %37 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 68
  %38 = bitcast void (i16*, i16*, i32)** %37 to i64*
  %39 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 69
  %40 = bitcast void (i16*, i16*, i32)** %39 to i64*
  %41 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 70
  %42 = bitcast void (%struct.block*, %struct.blockd*)** %41 to i64*
  %43 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 39
  %44 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 23
  %45 = bitcast [2 x i32*]* %44 to i64*
  %46 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 23, i64 1
  %47 = bitcast i32** %46 to i64*
  %48 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 24
  %49 = bitcast [2 x i32*]* %48 to i64*
  %50 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 24, i64 1
  %51 = bitcast i32** %50 to i64*
  %52 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 29
  %53 = bitcast [8 x [3 x [12 x i32]]]** %52 to i64*
  %54 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 28
  %55 = bitcast i32** %54 to i64*
  %56 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 25
  %57 = bitcast [10 x i32]** %56 to i64*
  %58 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 26
  %59 = bitcast [10 x i32]** %58 to i64*
  %60 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 27
  %61 = bitcast [10 x [10 x i32]]** %60 to i64*
  %62 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 40
  %63 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 21
  %64 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 22
  %65 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 23
  %66 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 26
  %67 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 28, i64 0, i64 0
  %68 = bitcast i8* %67 to i64*
  %69 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 6, i64 0
  %70 = bitcast i16* %69 to i8*
  %71 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 5, i64 0
  %72 = bitcast i16* %71 to i8*
  %73 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 7, i64 0
  %74 = bitcast i16* %73 to i8*
  %75 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 8, i64 0
  %76 = bitcast i16* %75 to i8*
  %77 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 58, i64 0
  %78 = bitcast i32* %77 to i8*
  %79 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 57, i64 0
  %80 = bitcast i32* %79 to i8*
  %81 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 65
  %82 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 61
  %83 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 62
  %84 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 33
  %85 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 52
  %86 = bitcast [5 x i32]* %85 to i8*
  %87 = zext i32 %3 to i64
  br label %88

88:                                               ; preds = %246, %6
  %89 = phi i64 [ 0, %6 ], [ %110, %246 ]
  %90 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %2, i64 %89, i32 0
  %91 = load i64, i64* %8, align 8
  %92 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %2, i64 %89, i32 0, i32 6, i32 39
  %93 = bitcast void (i8*, i32, i32, i32, i8*, i32)** %92 to i64*
  store i64 %91, i64* %93, align 8
  %94 = load i64, i64* %10, align 32
  %95 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %2, i64 %89, i32 0, i32 6, i32 40
  %96 = bitcast void (i8*, i32, i32, i32, i8*, i32)** %95 to i64*
  store i64 %94, i64* %96, align 32
  %97 = load i64, i64* %12, align 8
  %98 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %2, i64 %89, i32 0, i32 6, i32 41
  %99 = bitcast void (i8*, i32, i32, i32, i8*, i32)** %98 to i64*
  store i64 %97, i64* %99, align 8
  %100 = load i64, i64* %14, align 16
  %101 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %2, i64 %89, i32 0, i32 6, i32 42
  %102 = bitcast void (i8*, i32, i32, i32, i8*, i32)** %101 to i64*
  store i64 %100, i64* %102, align 16
  %103 = load i64, i64* %16, align 8
  %104 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %2, i64 %89, i32 0, i32 36
  %105 = bitcast i8** %104 to i64*
  store i64 %103, i64* %105, align 8
  %106 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %2, i64 %89, i32 1, i64 0
  %107 = bitcast i32* %106 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 32 %107, i8 0, i64 20, i1 false)
  %108 = load %struct.PARTITION_INFO*, %struct.PARTITION_INFO** %17, align 8
  %109 = load i32, i32* %18, align 8
  %110 = add nuw nsw i64 %89, 1
  %111 = trunc i64 %110 to i32
  %112 = mul nsw i32 %109, %111
  %113 = sext i32 %112 to i64
  %114 = getelementptr inbounds %struct.PARTITION_INFO, %struct.PARTITION_INFO* %108, i64 %113
  %115 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %2, i64 %89, i32 0, i32 7
  store %struct.PARTITION_INFO* %114, %struct.PARTITION_INFO** %115, align 32
  %116 = load i32, i32* %19, align 4
  %117 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %2, i64 %89, i32 0, i32 6, i32 15
  store i32 %116, i32* %117, align 4
  %118 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %2, i64 %89, i32 0, i32 5
  %119 = load i8*, i8** %21, align 8
  %120 = bitcast %struct.yv12_buffer_config* %118 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 32 %120, i8* align 8 %119, i64 160, i1 false)
  %121 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %2, i64 %89, i32 0, i32 6, i32 11
  %122 = load i32, i32* %22, align 4
  %123 = sext i32 %122 to i64
  %124 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 11, i64 %123
  %125 = bitcast %struct.yv12_buffer_config* %121 to i8*
  %126 = bitcast %struct.yv12_buffer_config* %124 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 32 %125, i8* align 16 %126, i64 160, i1 false)
  %127 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %2, i64 %89, i32 0, i32 6, i32 12
  %128 = load i32, i32* %23, align 16
  %129 = sext i32 %128 to i64
  %130 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 11, i64 %129
  %131 = bitcast %struct.yv12_buffer_config* %127 to i8*
  %132 = bitcast %struct.yv12_buffer_config* %130 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 32 %131, i8* align 16 %132, i64 160, i1 false)
  %133 = load i32, i32* %24, align 16
  %134 = shl i32 %111, 4
  %135 = mul i32 %134, %133
  %136 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %2, i64 %89, i32 0, i32 5, i32 13
  %137 = load i8*, i8** %136, align 8
  %138 = sext i32 %135 to i64
  %139 = getelementptr inbounds i8, i8* %137, i64 %138
  store i8* %139, i8** %136, align 8
  %140 = load i32, i32* %25, align 4
  %141 = shl i32 %111, 3
  %142 = mul i32 %141, %140
  %143 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %2, i64 %89, i32 0, i32 5, i32 14
  %144 = load i8*, i8** %143, align 32
  %145 = sext i32 %142 to i64
  %146 = getelementptr inbounds i8, i8* %144, i64 %145
  store i8* %146, i8** %143, align 32
  %147 = load i32, i32* %25, align 4
  %148 = mul i32 %141, %147
  %149 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %2, i64 %89, i32 0, i32 5, i32 15
  %150 = load i8*, i8** %149, align 8
  %151 = sext i32 %148 to i64
  %152 = getelementptr inbounds i8, i8* %150, i64 %151
  store i8* %152, i8** %149, align 8
  tail call void @vp8_build_block_offsets(%struct.macroblock* %90) #4
  %153 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %2, i64 %89, i32 0, i32 6, i32 22
  store %struct.ENTROPY_CONTEXT_PLANES* %26, %struct.ENTROPY_CONTEXT_PLANES** %153, align 8
  %154 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %2, i64 %89, i32 0, i32 38
  store %struct.mv_context* %27, %struct.mv_context** %154, align 8
  %155 = load i64, i64* %29, align 8
  %156 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %2, i64 %89, i32 0, i32 11
  %157 = bitcast %struct.search_site** %156 to i64*
  store i64 %155, i64* %157, align 8
  %158 = load i32, i32* %30, align 16
  %159 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %2, i64 %89, i32 0, i32 12
  store i32 %158, i32* %159, align 16
  %160 = load i32, i32* %31, align 4
  %161 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %2, i64 %89, i32 0, i32 13
  store i32 %160, i32* %161, align 4
  %162 = load i32, i32* %32, align 8
  %163 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %2, i64 %89, i32 0, i32 14
  store i32 %162, i32* %163, align 8
  %164 = load i32, i32* %33, align 4
  %165 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %2, i64 %89, i32 0, i32 15
  store i32 %164, i32* %165, align 4
  %166 = load i32, i32* %34, align 32
  %167 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %2, i64 %89, i32 0, i32 16
  store i32 %166, i32* %167, align 32
  %168 = load i64, i64* %36, align 16
  %169 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %2, i64 %89, i32 0, i32 67
  %170 = bitcast void (i16*, i16*, i32)** %169 to i64*
  store i64 %168, i64* %170, align 16
  %171 = load i64, i64* %38, align 8
  %172 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %2, i64 %89, i32 0, i32 68
  %173 = bitcast void (i16*, i16*, i32)** %172 to i64*
  store i64 %171, i64* %173, align 8
  %174 = load i64, i64* %40, align 32
  %175 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %2, i64 %89, i32 0, i32 69
  %176 = bitcast void (i16*, i16*, i32)** %175 to i64*
  store i64 %174, i64* %176, align 32
  %177 = load i64, i64* %42, align 8
  %178 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %2, i64 %89, i32 0, i32 70
  %179 = bitcast void (%struct.block*, %struct.blockd*)** %178 to i64*
  store i64 %177, i64* %179, align 8
  %180 = load i32, i32* %43, align 32
  %181 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %2, i64 %89, i32 0, i32 39
  store i32 %180, i32* %181, align 32
  %182 = load i64, i64* %45, align 8
  %183 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %2, i64 %89, i32 0, i32 23
  %184 = bitcast [2 x i32*]* %183 to i64*
  store i64 %182, i64* %184, align 8
  %185 = load i64, i64* %47, align 8
  %186 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %2, i64 %89, i32 0, i32 23, i64 1
  %187 = bitcast i32** %186 to i64*
  store i64 %185, i64* %187, align 8
  %188 = load i64, i64* %49, align 8
  %189 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %2, i64 %89, i32 0, i32 24
  %190 = bitcast [2 x i32*]* %189 to i64*
  store i64 %188, i64* %190, align 8
  %191 = load i64, i64* %51, align 8
  %192 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %2, i64 %89, i32 0, i32 24, i64 1
  %193 = bitcast i32** %192 to i64*
  store i64 %191, i64* %193, align 8
  %194 = load i64, i64* %53, align 8
  %195 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %2, i64 %89, i32 0, i32 29
  %196 = bitcast [8 x [3 x [12 x i32]]]** %195 to i64*
  store i64 %194, i64* %196, align 8
  %197 = load i64, i64* %55, align 32
  %198 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %2, i64 %89, i32 0, i32 28
  %199 = bitcast i32** %198 to i64*
  store i64 %197, i64* %199, align 32
  %200 = load i64, i64* %57, align 8
  %201 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %2, i64 %89, i32 0, i32 25
  %202 = bitcast [10 x i32]** %201 to i64*
  store i64 %200, i64* %202, align 8
  %203 = load i64, i64* %59, align 16
  %204 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %2, i64 %89, i32 0, i32 26
  %205 = bitcast [10 x i32]** %204 to i64*
  store i64 %203, i64* %205, align 16
  %206 = load i64, i64* %61, align 8
  %207 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %2, i64 %89, i32 0, i32 27
  %208 = bitcast [10 x [10 x i32]]** %207 to i64*
  store i64 %206, i64* %208, align 8
  br label %209

209:                                              ; preds = %209, %88
  %210 = phi i64 [ 0, %88 ], [ %244, %209 ]
  %211 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 %210, i32 2
  %212 = bitcast i16** %211 to i64*
  %213 = load i64, i64* %212, align 8
  %214 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %2, i64 %89, i32 0, i32 4, i64 %210, i32 2
  %215 = bitcast i16** %214 to i64*
  store i64 %213, i64* %215, align 8
  %216 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 %210, i32 3
  %217 = bitcast i16** %216 to i64*
  %218 = load i64, i64* %217, align 8
  %219 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %2, i64 %89, i32 0, i32 4, i64 %210, i32 3
  %220 = bitcast i16** %219 to i64*
  store i64 %218, i64* %220, align 8
  %221 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 %210, i32 4
  %222 = bitcast i16** %221 to i64*
  %223 = load i64, i64* %222, align 8
  %224 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %2, i64 %89, i32 0, i32 4, i64 %210, i32 4
  %225 = bitcast i16** %224 to i64*
  store i64 %223, i64* %225, align 8
  %226 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 %210, i32 5
  %227 = bitcast i16** %226 to i64*
  %228 = load i64, i64* %227, align 8
  %229 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %2, i64 %89, i32 0, i32 4, i64 %210, i32 5
  %230 = bitcast i16** %229 to i64*
  store i64 %228, i64* %230, align 8
  %231 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 %210, i32 6
  %232 = bitcast i16** %231 to i64*
  %233 = load i64, i64* %232, align 8
  %234 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %2, i64 %89, i32 0, i32 4, i64 %210, i32 6
  %235 = bitcast i16** %234 to i64*
  store i64 %233, i64* %235, align 8
  %236 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 %210, i32 7
  %237 = bitcast i16** %236 to i64*
  %238 = load i64, i64* %237, align 8
  %239 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %2, i64 %89, i32 0, i32 4, i64 %210, i32 7
  %240 = bitcast i16** %239 to i64*
  store i64 %238, i64* %240, align 8
  %241 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 %210, i32 11
  %242 = load i32, i32* %241, align 4
  %243 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %2, i64 %89, i32 0, i32 4, i64 %210, i32 11
  store i32 %242, i32* %243, align 4
  %244 = add nuw nsw i64 %210, 1
  %245 = icmp eq i64 %244, 25
  br i1 %245, label %246, label %209

246:                                              ; preds = %209
  %247 = load i32, i32* %62, align 4
  %248 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %2, i64 %89, i32 0, i32 40
  store i32 %247, i32* %248, align 4
  %249 = load i32, i32* %63, align 32
  %250 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %2, i64 %89, i32 0, i32 21
  store i32 %249, i32* %250, align 32
  %251 = load i32, i32* %64, align 4
  %252 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %2, i64 %89, i32 0, i32 22
  store i32 %251, i32* %252, align 4
  %253 = load i64, i64* %8, align 8
  store i64 %253, i64* %93, align 8
  %254 = load i64, i64* %10, align 32
  store i64 %254, i64* %96, align 32
  %255 = load i64, i64* %12, align 8
  store i64 %255, i64* %99, align 8
  %256 = load i64, i64* %14, align 16
  store i64 %256, i64* %102, align 16
  %257 = load i8, i8* %65, align 32
  %258 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %2, i64 %89, i32 0, i32 6, i32 23
  store i8 %257, i8* %258, align 32
  %259 = load i8, i8* %66, align 1
  %260 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %2, i64 %89, i32 0, i32 6, i32 26
  store i8 %259, i8* %260, align 1
  %261 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %2, i64 %89, i32 0, i32 6, i32 28, i64 0, i64 0
  %262 = bitcast i8* %261 to i64*
  %263 = load i64, i64* %68, align 1
  store i64 %263, i64* %262, align 1
  %264 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %2, i64 %89, i32 0, i32 6, i32 6, i64 0
  %265 = bitcast i16* %264 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 32 %265, i8* align 32 %70, i64 32, i1 false) #4
  %266 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %2, i64 %89, i32 0, i32 6, i32 5, i64 0
  %267 = bitcast i16* %266 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 32 %267, i8* align 32 %72, i64 32, i1 false) #4
  %268 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %2, i64 %89, i32 0, i32 6, i32 7, i64 0
  %269 = bitcast i16* %268 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 32 %269, i8* align 32 %74, i64 32, i1 false) #4
  %270 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %2, i64 %89, i32 0, i32 6, i32 8, i64 0
  %271 = bitcast i16* %270 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 32 %271, i8* align 32 %76, i64 32, i1 false) #4
  %272 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %2, i64 %89, i32 0, i32 6, i32 9, i64 0, i32 3
  store i16* %266, i16** %272, align 8
  %273 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %2, i64 %89, i32 0, i32 6, i32 9, i64 1, i32 3
  store i16* %266, i16** %273, align 8
  %274 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %2, i64 %89, i32 0, i32 6, i32 9, i64 2, i32 3
  store i16* %266, i16** %274, align 8
  %275 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %2, i64 %89, i32 0, i32 6, i32 9, i64 3, i32 3
  store i16* %266, i16** %275, align 8
  %276 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %2, i64 %89, i32 0, i32 6, i32 9, i64 4, i32 3
  store i16* %266, i16** %276, align 8
  %277 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %2, i64 %89, i32 0, i32 6, i32 9, i64 5, i32 3
  store i16* %266, i16** %277, align 8
  %278 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %2, i64 %89, i32 0, i32 6, i32 9, i64 6, i32 3
  store i16* %266, i16** %278, align 8
  %279 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %2, i64 %89, i32 0, i32 6, i32 9, i64 7, i32 3
  store i16* %266, i16** %279, align 8
  %280 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %2, i64 %89, i32 0, i32 6, i32 9, i64 8, i32 3
  store i16* %266, i16** %280, align 8
  %281 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %2, i64 %89, i32 0, i32 6, i32 9, i64 9, i32 3
  store i16* %266, i16** %281, align 8
  %282 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %2, i64 %89, i32 0, i32 6, i32 9, i64 10, i32 3
  store i16* %266, i16** %282, align 8
  %283 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %2, i64 %89, i32 0, i32 6, i32 9, i64 11, i32 3
  store i16* %266, i16** %283, align 8
  %284 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %2, i64 %89, i32 0, i32 6, i32 9, i64 12, i32 3
  store i16* %266, i16** %284, align 8
  %285 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %2, i64 %89, i32 0, i32 6, i32 9, i64 13, i32 3
  store i16* %266, i16** %285, align 8
  %286 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %2, i64 %89, i32 0, i32 6, i32 9, i64 14, i32 3
  store i16* %266, i16** %286, align 8
  %287 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %2, i64 %89, i32 0, i32 6, i32 9, i64 15, i32 3
  store i16* %266, i16** %287, align 8
  %288 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %2, i64 %89, i32 0, i32 6, i32 9, i64 16, i32 3
  store i16* %270, i16** %288, align 8
  %289 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %2, i64 %89, i32 0, i32 6, i32 9, i64 17, i32 3
  store i16* %270, i16** %289, align 8
  %290 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %2, i64 %89, i32 0, i32 6, i32 9, i64 18, i32 3
  store i16* %270, i16** %290, align 8
  %291 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %2, i64 %89, i32 0, i32 6, i32 9, i64 19, i32 3
  store i16* %270, i16** %291, align 8
  %292 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %2, i64 %89, i32 0, i32 6, i32 9, i64 20, i32 3
  store i16* %270, i16** %292, align 8
  %293 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %2, i64 %89, i32 0, i32 6, i32 9, i64 21, i32 3
  store i16* %270, i16** %293, align 8
  %294 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %2, i64 %89, i32 0, i32 6, i32 9, i64 22, i32 3
  store i16* %270, i16** %294, align 8
  %295 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %2, i64 %89, i32 0, i32 6, i32 9, i64 23, i32 3
  store i16* %270, i16** %295, align 8
  %296 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %2, i64 %89, i32 0, i32 6, i32 9, i64 24, i32 3
  store i16* %268, i16** %296, align 8
  %297 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %2, i64 %89, i32 0, i32 58, i64 0
  %298 = bitcast i32* %297 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %298, i8* align 8 %78, i64 80, i1 false) #4
  %299 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %2, i64 %89, i32 0, i32 57, i64 0
  %300 = bitcast i32* %299 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %300, i8* align 8 %80, i64 80, i1 false) #4
  %301 = load i32, i32* %81, align 4
  %302 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %2, i64 %89, i32 0, i32 65
  store i32 %301, i32* %302, align 4
  %303 = load i32, i32* %82, align 4
  %304 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %2, i64 %89, i32 0, i32 61
  store i32 %303, i32* %304, align 4
  %305 = load i32, i32* %83, align 32
  %306 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %2, i64 %89, i32 0, i32 62
  store i32 %305, i32* %306, align 32
  %307 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %2, i64 %89, i32 0, i32 66, i64 0
  %308 = bitcast i32* %307 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 16 %308, i8 0, i64 4096, i1 false) #4
  %309 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %2, i64 %89, i32 0, i32 6, i32 10
  store i32 -1, i32* %309, align 8
  %310 = load i32, i32* %84, align 4
  %311 = icmp eq i32 %310, 0
  %312 = select i1 %311, i32 -1, i32 -8
  store i32 %312, i32* %309, align 8
  %313 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %2, i64 %89, i32 0, i32 50
  %314 = bitcast [4 x [8 x [3 x [12 x i32]]]]* %313 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %314, i8 0, i64 4608, i1 false)
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %86, i8 0, i64 20, i1 false)
  %315 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %2, i64 %89, i32 0, i32 49
  store i32 0, i32* %315, align 8
  %316 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %2, i64 %89, i32 0, i32 51
  %317 = bitcast [2 x [2047 x i32]]* %316 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %317, i8 0, i64 16376, i1 false)
  %318 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %2, i64 %89, i32 0, i32 54
  %319 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %2, i64 %89, i32 0, i32 59
  store i32 0, i32* %319, align 8
  %320 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %2, i64 %89, i32 0, i32 71
  store i32 0, i32* %320, align 16
  %321 = icmp eq i64 %110, %87
  %322 = bitcast i64* %318 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %322, i8 0, i64 32, i1 false)
  br i1 %321, label %323, label %88

323:                                              ; preds = %246, %4
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare void @vp8_build_block_offsets(%struct.macroblock*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vp8cx_create_encoder_threads(%struct.VP8_COMP*) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19
  %3 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 157, i32 0
  store volatile i32 0, i32* %3, align 4
  %4 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 158
  store i32 0, i32* %4, align 32
  %5 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 159
  store i32 0, i32* %5, align 4
  %6 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 63
  %7 = load i32, i32* %6, align 8
  %8 = icmp sgt i32 %7, 1
  br i1 %8, label %9, label %171

9:                                                ; preds = %1
  %10 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 42
  %11 = load i32, i32* %10, align 4
  %12 = icmp sgt i32 %11, 1
  br i1 %12, label %13, label %171

13:                                               ; preds = %9
  %14 = icmp sgt i32 %11, %7
  %15 = select i1 %14, i32 %7, i32 %11
  %16 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 28
  %17 = load i32, i32* %16, align 8
  %18 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 156
  %19 = load i32, i32* %18, align 8
  %20 = sdiv i32 %17, %19
  %21 = icmp sgt i32 %15, %20
  %22 = select i1 %21, i32 %20, i32 %15
  %23 = add nsw i32 %22, -1
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %171, label %25

25:                                               ; preds = %13
  %26 = sext i32 %23 to i64
  %27 = shl nsw i64 %26, 3
  %28 = tail call i8* @vpx_malloc(i64 %27) #4
  %29 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 160
  %30 = bitcast i64** %29 to i8**
  store i8* %28, i8** %30, align 8
  %31 = icmp eq i8* %28, null
  br i1 %31, label %32, label %34

32:                                               ; preds = %25
  %33 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %2, i64 0, i32 0
  tail call void (%struct.vpx_internal_error_info*, i32, i8*, ...) @vpx_internal_error(%struct.vpx_internal_error_info* %33, i32 2, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str, i64 0, i64 0)) #4
  br label %34

34:                                               ; preds = %25, %32
  %35 = shl nsw i64 %26, 5
  %36 = tail call i8* @vpx_malloc(i64 %35) #4
  %37 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 165
  %38 = bitcast %union.sem_t** %37 to i8**
  store i8* %36, i8** %38, align 8
  %39 = icmp eq i8* %36, null
  br i1 %39, label %40, label %42

40:                                               ; preds = %34
  %41 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %2, i64 0, i32 0
  tail call void (%struct.vpx_internal_error_info*, i32, i8*, ...) @vpx_internal_error(%struct.vpx_internal_error_info* %41, i32 2, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.1, i64 0, i64 0)) #4
  br label %42

42:                                               ; preds = %34, %40
  %43 = tail call i8* @vpx_malloc(i64 %35) #4
  %44 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 166
  %45 = bitcast %union.sem_t** %44 to i8**
  store i8* %43, i8** %45, align 32
  %46 = icmp eq i8* %43, null
  br i1 %46, label %47, label %49

47:                                               ; preds = %42
  %48 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %2, i64 0, i32 0
  tail call void (%struct.vpx_internal_error_info*, i32, i8*, ...) @vpx_internal_error(%struct.vpx_internal_error_info* %48, i32 2, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.2, i64 0, i64 0)) #4
  br label %49

49:                                               ; preds = %42, %47
  %50 = mul nsw i64 %26, 35072
  %51 = tail call i8* @vpx_memalign(i64 32, i64 %50) #4
  %52 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 162
  %53 = bitcast %struct.MB_ROW_COMP** %52 to i8**
  store i8* %51, i8** %53, align 8
  %54 = icmp eq i8* %51, null
  br i1 %54, label %55, label %58

55:                                               ; preds = %49
  %56 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %2, i64 0, i32 0
  tail call void (%struct.vpx_internal_error_info*, i32, i8*, ...) @vpx_internal_error(%struct.vpx_internal_error_info* %56, i32 2, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.3, i64 0, i64 0)) #4
  %57 = load i8*, i8** %53, align 8
  br label %58

58:                                               ; preds = %49, %55
  %59 = phi i8* [ %51, %49 ], [ %57, %55 ]
  tail call void @llvm.memset.p0i8.i64(i8* align 32 %59, i8 0, i64 %50, i1 false)
  %60 = mul nsw i64 %26, 24
  %61 = tail call i8* @vpx_malloc(i64 %60) #4
  %62 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 163
  %63 = bitcast %struct.ENCODETHREAD_DATA** %62 to i8**
  store i8* %61, i8** %63, align 32
  %64 = icmp eq i8* %61, null
  br i1 %64, label %65, label %67

65:                                               ; preds = %58
  %66 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %2, i64 0, i32 0
  tail call void (%struct.vpx_internal_error_info*, i32, i8*, ...) @vpx_internal_error(%struct.vpx_internal_error_info* %66, i32 2, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.4, i64 0, i64 0)) #4
  br label %67

67:                                               ; preds = %58, %65
  store atomic volatile i32 1, i32* %3 release, align 4
  store i32 %23, i32* %4, align 32
  %68 = icmp sgt i32 %23, 0
  br i1 %68, label %69, label %126

69:                                               ; preds = %67, %97
  %70 = phi i64 [ %98, %97 ], [ 0, %67 ]
  %71 = phi i32 [ %99, %97 ], [ 0, %67 ]
  %72 = load %struct.ENCODETHREAD_DATA*, %struct.ENCODETHREAD_DATA** %62, align 32
  %73 = getelementptr inbounds %struct.ENCODETHREAD_DATA, %struct.ENCODETHREAD_DATA* %72, i64 %70
  %74 = load %struct.MB_ROW_COMP*, %struct.MB_ROW_COMP** %52, align 8
  %75 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %74, i64 %70, i32 0
  tail call void @vp8_setup_block_ptrs(%struct.macroblock* %75) #4
  %76 = load %struct.MB_ROW_COMP*, %struct.MB_ROW_COMP** %52, align 8
  %77 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %76, i64 %70, i32 0, i32 6
  tail call void @vp8_setup_block_dptrs(%struct.macroblockd* %77) #4
  %78 = load %union.sem_t*, %union.sem_t** %37, align 8
  %79 = getelementptr inbounds %union.sem_t, %union.sem_t* %78, i64 %70
  %80 = tail call i32 @sem_init(%union.sem_t* %79, i32 0, i32 0) #4
  %81 = load %union.sem_t*, %union.sem_t** %44, align 32
  %82 = getelementptr inbounds %union.sem_t, %union.sem_t* %81, i64 %70
  %83 = tail call i32 @sem_init(%union.sem_t* %82, i32 0, i32 0) #4
  %84 = getelementptr inbounds %struct.ENCODETHREAD_DATA, %struct.ENCODETHREAD_DATA* %73, i64 0, i32 0
  %85 = trunc i64 %70 to i32
  store i32 %85, i32* %84, align 8
  %86 = getelementptr inbounds %struct.ENCODETHREAD_DATA, %struct.ENCODETHREAD_DATA* %72, i64 %70, i32 1
  %87 = bitcast i8** %86 to %struct.VP8_COMP**
  store %struct.VP8_COMP* %0, %struct.VP8_COMP** %87, align 8
  %88 = load %struct.MB_ROW_COMP*, %struct.MB_ROW_COMP** %52, align 8
  %89 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %88, i64 %70
  %90 = getelementptr inbounds %struct.ENCODETHREAD_DATA, %struct.ENCODETHREAD_DATA* %72, i64 %70, i32 2
  %91 = bitcast i8** %90 to %struct.MB_ROW_COMP**
  store %struct.MB_ROW_COMP* %89, %struct.MB_ROW_COMP** %91, align 8
  %92 = load i64*, i64** %29, align 8
  %93 = getelementptr inbounds i64, i64* %92, i64 %70
  %94 = bitcast %struct.ENCODETHREAD_DATA* %73 to i8*
  %95 = tail call i32 @pthread_create(i64* %93, %union.pthread_attr_t* null, i8* (i8*)* nonnull @thread_encoding_proc, i8* %94) #4
  %96 = icmp eq i32 %95, 0
  br i1 %96, label %97, label %101

97:                                               ; preds = %69
  %98 = add nuw nsw i64 %70, 1
  %99 = add nuw nsw i32 %71, 1
  %100 = icmp slt i64 %98, %26
  br i1 %100, label %69, label %126

101:                                              ; preds = %69
  %102 = trunc i64 %70 to i32
  store atomic volatile i32 0, i32* %3 release, align 4
  %103 = icmp sgt i32 %102, 0
  br i1 %103, label %104, label %120

104:                                              ; preds = %101
  %105 = and i64 %70, 4294967295
  br label %106

106:                                              ; preds = %104, %106
  %107 = phi i64 [ %105, %104 ], [ %108, %106 ]
  %108 = add nsw i64 %107, -1
  %109 = load i64*, i64** %29, align 8
  %110 = getelementptr inbounds i64, i64* %109, i64 %108
  %111 = load i64, i64* %110, align 8
  %112 = tail call i32 @pthread_join(i64 %111, i8** null) #4
  %113 = load %union.sem_t*, %union.sem_t** %37, align 8
  %114 = getelementptr inbounds %union.sem_t, %union.sem_t* %113, i64 %108
  %115 = tail call i32 @sem_destroy(%union.sem_t* %114) #4
  %116 = load %union.sem_t*, %union.sem_t** %44, align 32
  %117 = getelementptr inbounds %union.sem_t, %union.sem_t* %116, i64 %108
  %118 = tail call i32 @sem_destroy(%union.sem_t* %117) #4
  %119 = icmp sgt i64 %108, 0
  br i1 %119, label %106, label %120

120:                                              ; preds = %106, %101
  %121 = load i8*, i8** %38, align 8
  tail call void @vpx_free(i8* %121) #4
  %122 = load i8*, i8** %45, align 32
  tail call void @vpx_free(i8* %122) #4
  %123 = load i8*, i8** %30, align 8
  tail call void @vpx_free(i8* %123) #4
  %124 = load i8*, i8** %53, align 8
  tail call void @vpx_free(i8* %124) #4
  %125 = load i8*, i8** %63, align 32
  tail call void @vpx_free(i8* %125) #4
  br label %171

126:                                              ; preds = %97, %67
  %127 = phi i32 [ 0, %67 ], [ %99, %97 ]
  %128 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 164
  %129 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 167
  %130 = tail call i32 @sem_init(%union.sem_t* %129, i32 0, i32 0) #4
  %131 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 168
  %132 = tail call i32 @sem_init(%union.sem_t* %131, i32 0, i32 0) #4
  %133 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 164, i32 1
  %134 = bitcast i8** %133 to %struct.VP8_COMP**
  store %struct.VP8_COMP* %0, %struct.VP8_COMP** %134, align 8
  %135 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 161
  %136 = bitcast %struct.LPFTHREAD_DATA* %128 to i8*
  %137 = tail call i32 @pthread_create(i64* %135, %union.pthread_attr_t* null, i8* (i8*)* nonnull @thread_loopfilter, i8* %136) #4
  %138 = icmp eq i32 %137, 0
  br i1 %138, label %171, label %139

139:                                              ; preds = %126
  store atomic volatile i32 0, i32* %3 release, align 4
  %140 = icmp sgt i32 %127, 0
  br i1 %140, label %141, label %163

141:                                              ; preds = %139
  %142 = zext i32 %127 to i64
  br label %143

143:                                              ; preds = %141, %143
  %144 = phi i64 [ %142, %141 ], [ %145, %143 ]
  %145 = add nsw i64 %144, -1
  %146 = load %union.sem_t*, %union.sem_t** %37, align 8
  %147 = getelementptr inbounds %union.sem_t, %union.sem_t* %146, i64 %145
  %148 = tail call i32 @sem_post(%union.sem_t* %147) #4
  %149 = load %union.sem_t*, %union.sem_t** %44, align 32
  %150 = getelementptr inbounds %union.sem_t, %union.sem_t* %149, i64 %145
  %151 = tail call i32 @sem_post(%union.sem_t* %150) #4
  %152 = load i64*, i64** %29, align 8
  %153 = getelementptr inbounds i64, i64* %152, i64 %145
  %154 = load i64, i64* %153, align 8
  %155 = tail call i32 @pthread_join(i64 %154, i8** null) #4
  %156 = load %union.sem_t*, %union.sem_t** %37, align 8
  %157 = getelementptr inbounds %union.sem_t, %union.sem_t* %156, i64 %145
  %158 = tail call i32 @sem_destroy(%union.sem_t* %157) #4
  %159 = load %union.sem_t*, %union.sem_t** %44, align 32
  %160 = getelementptr inbounds %union.sem_t, %union.sem_t* %159, i64 %145
  %161 = tail call i32 @sem_destroy(%union.sem_t* %160) #4
  %162 = icmp sgt i64 %145, 0
  br i1 %162, label %143, label %163

163:                                              ; preds = %143, %139
  %164 = tail call i32 @sem_destroy(%union.sem_t* %131) #4
  %165 = tail call i32 @sem_destroy(%union.sem_t* %129) #4
  %166 = load i8*, i8** %38, align 8
  tail call void @vpx_free(i8* %166) #4
  %167 = load i8*, i8** %45, align 32
  tail call void @vpx_free(i8* %167) #4
  %168 = load i8*, i8** %30, align 8
  tail call void @vpx_free(i8* %168) #4
  %169 = load i8*, i8** %53, align 8
  tail call void @vpx_free(i8* %169) #4
  %170 = load i8*, i8** %63, align 32
  tail call void @vpx_free(i8* %170) #4
  br label %171

171:                                              ; preds = %13, %120, %126, %1, %9, %163
  %172 = phi i32 [ -2, %163 ], [ 0, %9 ], [ 0, %1 ], [ 0, %126 ], [ 0, %13 ], [ -1, %120 ]
  ret i32 %172
}

declare i8* @vpx_malloc(i64) local_unnamed_addr #2

declare void @vpx_internal_error(%struct.vpx_internal_error_info*, i32, i8*, ...) local_unnamed_addr #2

declare i8* @vpx_memalign(i64, i64) local_unnamed_addr #2

declare void @vp8_setup_block_ptrs(%struct.macroblock*) local_unnamed_addr #2

declare void @vp8_setup_block_dptrs(%struct.macroblockd*) local_unnamed_addr #2

; Function Attrs: nounwind
declare i32 @sem_init(%union.sem_t*, i32, i32) local_unnamed_addr #3

; Function Attrs: nounwind
declare i32 @pthread_create(i64*, %union.pthread_attr_t*, i8* (i8*)*, i8*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define internal noalias i8* @thread_encoding_proc(i8* nocapture readonly) #0 {
  %2 = alloca %struct.ENTROPY_CONTEXT_PLANES, align 1
  %3 = alloca %struct.TOKENEXTRA*, align 8
  %4 = bitcast i8* %0 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = getelementptr inbounds i8, i8* %0, i64 8
  %7 = bitcast i8* %6 to %struct.VP8_COMP**
  %8 = load %struct.VP8_COMP*, %struct.VP8_COMP** %7, align 8
  %9 = getelementptr inbounds i8, i8* %0, i64 16
  %10 = bitcast i8* %9 to %struct.MB_ROW_COMP**
  %11 = load %struct.MB_ROW_COMP*, %struct.MB_ROW_COMP** %10, align 8
  %12 = getelementptr inbounds %struct.ENTROPY_CONTEXT_PLANES, %struct.ENTROPY_CONTEXT_PLANES* %2, i64 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 9, i8* nonnull %12) #4
  %13 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %8, i64 0, i32 157, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %12, i8 -86, i64 9, i1 false)
  %14 = load atomic volatile i32, i32* %13 acquire, align 4
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %431, label %16

16:                                               ; preds = %1
  %17 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %8, i64 0, i32 165
  %18 = sext i32 %5 to i64
  %19 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %8, i64 0, i32 156
  %20 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %11, i64 0, i32 0
  %21 = bitcast %struct.TOKENEXTRA** %3 to i8*
  %22 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %11, i64 0, i32 2
  %23 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %8, i64 0, i32 19, i32 41
  %24 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %8, i64 0, i32 19, i32 29
  %25 = add nsw i32 %5, 1
  %26 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %11, i64 0, i32 0, i32 6, i32 13
  %27 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %11, i64 0, i32 0, i32 6, i32 14
  %28 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %8, i64 0, i32 19, i32 27
  %29 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %8, i64 0, i32 19, i32 14
  %30 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %8, i64 0, i32 19, i32 13
  %31 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %8, i64 0, i32 19, i32 28
  %32 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %8, i64 0, i32 155
  %33 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %8, i64 0, i32 38
  %34 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %8, i64 0, i32 169
  %35 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %8, i64 0, i32 19, i32 56
  %36 = bitcast %struct.ENTROPY_CONTEXT_PLANES** %35 to i64*
  %37 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %11, i64 0, i32 0, i32 6, i32 21
  %38 = bitcast %struct.ENTROPY_CONTEXT_PLANES** %37 to i64*
  %39 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %11, i64 0, i32 0, i32 6, i32 22
  %40 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %11, i64 0, i32 0, i32 6, i32 16
  %41 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %8, i64 0, i32 189
  %42 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %11, i64 0, i32 0, i32 19
  %43 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %11, i64 0, i32 0, i32 6, i32 35
  %44 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %11, i64 0, i32 0, i32 6, i32 36
  %45 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %11, i64 0, i32 0, i32 6, i32 37
  %46 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %11, i64 0, i32 0, i32 6, i32 38
  %47 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %11, i64 0, i32 0, i32 30
  %48 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %11, i64 0, i32 0, i32 31
  %49 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %11, i64 0, i32 0, i32 32
  %50 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %11, i64 0, i32 0, i32 33
  %51 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %11, i64 0, i32 0, i32 6, i32 12, i32 13
  %52 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %11, i64 0, i32 0, i32 6, i32 12, i32 14
  %53 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %11, i64 0, i32 0, i32 6, i32 12, i32 15
  %54 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %11, i64 0, i32 0, i32 6, i32 17
  %55 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %8, i64 0, i32 48
  %56 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %11, i64 0, i32 0, i32 17
  %57 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %8, i64 0, i32 47
  %58 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %11, i64 0, i32 0, i32 18
  %59 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %11, i64 0, i32 0, i32 5, i32 13
  %60 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %11, i64 0, i32 0, i32 5, i32 4
  %61 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %11, i64 0, i32 0, i32 2, i64 0
  %62 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %8, i64 0, i32 21, i32 51
  %63 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %11, i64 0, i32 0, i32 6, i32 23
  %64 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %8, i64 0, i32 134
  %65 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %8, i64 0, i32 137
  %66 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %11, i64 0, i32 0, i32 37
  %67 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %8, i64 0, i32 19, i32 23
  %68 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %8, i64 0, i32 201
  %69 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %8, i64 0, i32 144
  %70 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %8, i64 0, i32 145
  %71 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %11, i64 0, i32 0, i32 72
  %72 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %8, i64 0, i32 139
  %73 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %8, i64 0, i32 143
  %74 = bitcast %struct.TOKENEXTRA** %3 to i64*
  %75 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %11, i64 0, i32 0, i32 36
  %76 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %11, i64 0, i32 0, i32 5, i32 14
  %77 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %11, i64 0, i32 0, i32 5, i32 15
  %78 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %11, i64 0, i32 0, i32 7
  %79 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %8, i64 0, i32 158
  %80 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %11, i64 0, i32 0, i32 5, i32 9
  %81 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %8, i64 0, i32 166
  %82 = bitcast i8** %59 to <2 x i8*>*
  %83 = bitcast i8** %59 to <2 x i8*>*
  br label %84

84:                                               ; preds = %16, %428
  %85 = load %union.sem_t*, %union.sem_t** %17, align 8
  %86 = getelementptr inbounds %union.sem_t, %union.sem_t* %85, i64 %18
  %87 = call i32 @sem_wait(%union.sem_t* %86) #4
  %88 = icmp eq i32 %87, 0
  br i1 %88, label %89, label %428

89:                                               ; preds = %84
  %90 = load i32, i32* %19, align 8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %21) #4
  store %struct.TOKENEXTRA* inttoptr (i64 -6148914691236517206 to %struct.TOKENEXTRA*), %struct.TOKENEXTRA** %3, align 8
  %91 = load atomic volatile i32, i32* %13 acquire, align 4
  %92 = icmp eq i32 %91, 0
  br i1 %92, label %427, label %93

93:                                               ; preds = %89
  %94 = load %struct.modeinfo*, %struct.modeinfo** %23, align 16
  %95 = load i32, i32* %24, align 4
  %96 = mul nsw i32 %95, %25
  %97 = sext i32 %96 to i64
  %98 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %94, i64 %97
  store %struct.modeinfo* %98, %struct.modeinfo** %26, align 32
  %99 = load i32, i32* %24, align 4
  store i32 %99, i32* %27, align 8
  %100 = load i32, i32* %28, align 4
  %101 = icmp slt i32 %25, %100
  br i1 %101, label %102, label %423

102:                                              ; preds = %93
  %103 = add nsw i32 %90, -1
  br label %104

104:                                              ; preds = %102, %356
  %105 = phi i32 [ %25, %102 ], [ %420, %356 ]
  %106 = load i32, i32* %29, align 4
  %107 = load i32, i32* %30, align 16
  %108 = sext i32 %106 to i64
  %109 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %8, i64 0, i32 19, i32 11, i64 %108, i32 4
  %110 = load i32, i32* %109, align 16
  %111 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %8, i64 0, i32 19, i32 11, i64 %108, i32 9
  %112 = load i32, i32* %111, align 4
  %113 = load i32, i32* %31, align 8
  %114 = mul i32 %113, %105
  %115 = load %struct.vpx_atomic_int*, %struct.vpx_atomic_int** %32, align 16
  %116 = sext i32 %105 to i64
  %117 = getelementptr inbounds %struct.vpx_atomic_int, %struct.vpx_atomic_int* %115, i64 %116
  %118 = load %struct.TOKENEXTRA*, %struct.TOKENEXTRA** %33, align 32
  %119 = mul i32 %114, 384
  %120 = sext i32 %119 to i64
  %121 = getelementptr inbounds %struct.TOKENEXTRA, %struct.TOKENEXTRA* %118, i64 %120
  store %struct.TOKENEXTRA* %121, %struct.TOKENEXTRA** %3, align 8
  %122 = load %struct.TOKENLIST*, %struct.TOKENLIST** %34, align 8
  %123 = getelementptr inbounds %struct.TOKENLIST, %struct.TOKENLIST* %122, i64 %116, i32 0
  store %struct.TOKENEXTRA* %121, %struct.TOKENEXTRA** %123, align 8
  %124 = load %struct.vpx_atomic_int*, %struct.vpx_atomic_int** %32, align 16
  %125 = load i64, i64* %36, align 8
  store i64 %125, i64* %38, align 16
  store %struct.ENTROPY_CONTEXT_PLANES* %2, %struct.ENTROPY_CONTEXT_PLANES** %39, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %12, i8 0, i64 9, i1 false)
  %126 = icmp ne i32 %105, 0
  %127 = zext i1 %126 to i32
  store i32 %127, i32* %40, align 16
  %128 = load i32*, i32** %41, align 8
  %129 = sext i32 %114 to i64
  %130 = getelementptr inbounds i32, i32* %128, i64 %129
  store i32* %130, i32** %42, align 16
  %131 = load i32, i32* %31, align 8
  %132 = icmp sgt i32 %131, 0
  br i1 %132, label %135, label %133

133:                                              ; preds = %104
  %134 = sext i32 %107 to i64
  br label %356

135:                                              ; preds = %104
  %136 = shl i32 %105, 3
  %137 = mul i32 %136, %112
  %138 = shl i32 %105, 4
  %139 = mul i32 %138, %110
  %140 = add nsw i32 %105, -1
  %141 = sext i32 %140 to i64
  %142 = getelementptr inbounds %struct.vpx_atomic_int, %struct.vpx_atomic_int* %117, i64 0, i32 0
  %143 = getelementptr inbounds %struct.vpx_atomic_int, %struct.vpx_atomic_int* %124, i64 %141, i32 0
  %144 = shl i32 %105, 7
  %145 = sub nsw i32 0, %144
  %146 = xor i32 %105, 33554431
  %147 = sub nuw nsw i32 -16, %138
  %148 = xor i32 %105, 268435455
  %149 = sext i32 %107 to i64
  %150 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %8, i64 0, i32 19, i32 11, i64 %149, i32 13
  %151 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %8, i64 0, i32 19, i32 11, i64 %149, i32 14
  %152 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %8, i64 0, i32 19, i32 11, i64 %149, i32 15
  %153 = sext i32 %137 to i64
  %154 = sext i32 %139 to i64
  br label %155

155:                                              ; preds = %135, %323
  %156 = phi i64 [ %154, %135 ], [ %336, %323 ]
  %157 = phi i64 [ %153, %135 ], [ %337, %323 ]
  %158 = phi i64 [ 0, %135 ], [ %350, %323 ]
  %159 = trunc i64 %158 to i32
  %160 = add i32 %159, -1
  %161 = srem i32 %160, %90
  %162 = icmp eq i32 %161, 0
  br i1 %162, label %163, label %164

163:                                              ; preds = %155
  store atomic volatile i32 %160, i32* %142 release, align 4
  br label %164

164:                                              ; preds = %163, %155
  %165 = trunc i64 %158 to i32
  %166 = and i32 %103, %165
  %167 = icmp eq i32 %166, 0
  %168 = and i1 %126, %167
  br i1 %168, label %169, label %179

169:                                              ; preds = %164
  %170 = load atomic volatile i32, i32* %143 acquire, align 4
  %171 = sub nsw i32 %170, %90
  %172 = sext i32 %171 to i64
  %173 = icmp sgt i64 %158, %172
  br i1 %173, label %174, label %179

174:                                              ; preds = %169, %174
  call void asm sideeffect "pause \0A\09", "~{dirflag},~{fpsr},~{flags}"() #4, !srcloc !2
  %175 = load atomic volatile i32, i32* %143 acquire, align 4
  %176 = sub nsw i32 %175, %90
  %177 = sext i32 %176 to i64
  %178 = icmp sgt i64 %158, %177
  br i1 %178, label %174, label %179

179:                                              ; preds = %174, %169, %164
  %180 = shl nsw i32 %165, 4
  %181 = shl i32 %165, 7
  %182 = sub nsw i32 0, %181
  store i32 %182, i32* %43, align 4
  %183 = load i32, i32* %31, align 8
  %184 = xor i32 %165, 33554431
  %185 = add i32 %183, %184
  %186 = shl i32 %185, 7
  store i32 %186, i32* %44, align 8
  store i32 %145, i32* %45, align 4
  %187 = load i32, i32* %28, align 4
  %188 = add i32 %187, %146
  %189 = shl i32 %188, 7
  store i32 %189, i32* %46, align 16
  %190 = sub nuw nsw i32 -16, %180
  store i32 %190, i32* %47, align 16
  %191 = load i32, i32* %31, align 8
  %192 = xor i32 %165, 268435455
  %193 = add i32 %191, %192
  %194 = shl i32 %193, 4
  %195 = add nsw i32 %194, 16
  store i32 %195, i32* %48, align 4
  store i32 %147, i32* %49, align 8
  %196 = load i32, i32* %28, align 4
  %197 = add i32 %196, %148
  %198 = shl i32 %197, 4
  %199 = add nsw i32 %198, 16
  store i32 %199, i32* %50, align 4
  %200 = load i8*, i8** %150, align 8
  %201 = getelementptr inbounds i8, i8* %200, i64 %156
  store i8* %201, i8** %51, align 8
  %202 = load i8*, i8** %151, align 16
  %203 = getelementptr inbounds i8, i8* %202, i64 %157
  store i8* %203, i8** %52, align 32
  %204 = load i8*, i8** %152, align 8
  %205 = getelementptr inbounds i8, i8* %204, i64 %157
  store i8* %205, i8** %53, align 8
  %206 = icmp ne i64 %158, 0
  %207 = zext i1 %206 to i32
  store i32 %207, i32* %54, align 4
  %208 = load i32, i32* %55, align 4
  store i32 %208, i32* %56, align 4
  %209 = load i32, i32* %57, align 32
  store i32 %209, i32* %58, align 8
  %210 = load i8*, i8** %59, align 8
  %211 = load i32, i32* %60, align 16
  call void @vp8_copy_mem16x16_sse2(i8* %210, i32 %211, i8* %61, i32 16) #4
  %212 = load i32, i32* %62, align 8
  %213 = icmp eq i32 %212, 1
  br i1 %213, label %214, label %215

214:                                              ; preds = %179
  call void @vp8_activity_masking(%struct.VP8_COMP* %8, %struct.macroblock* %20) #4
  br label %215

215:                                              ; preds = %214, %179
  %216 = load i8, i8* %63, align 32
  %217 = icmp eq i8 %216, 0
  br i1 %217, label %227, label %218

218:                                              ; preds = %215
  %219 = load i8*, i8** %64, align 16
  %220 = add nsw i64 %158, %129
  %221 = getelementptr inbounds i8, i8* %219, i64 %220
  %222 = load i8, i8* %221, align 1
  %223 = icmp ult i8 %222, 4
  %224 = load %struct.modeinfo*, %struct.modeinfo** %26, align 32
  %225 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %224, i64 0, i32 0, i32 8
  %226 = select i1 %223, i8 %222, i8 0
  store i8 %226, i8* %225, align 1
  call void @vp8cx_mb_init_quantizer(%struct.VP8_COMP* %8, %struct.macroblock* %20, i32 1) #4
  br label %230

227:                                              ; preds = %215
  %228 = load %struct.modeinfo*, %struct.modeinfo** %26, align 32
  %229 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %228, i64 0, i32 0, i32 8
  store i8 0, i8* %229, align 1
  br label %230

230:                                              ; preds = %227, %218
  %231 = load i8*, i8** %65, align 16
  %232 = getelementptr inbounds i8, i8* %231, i64 %129
  %233 = getelementptr inbounds i8, i8* %232, i64 %158
  store i8* %233, i8** %66, align 16
  %234 = load i32, i32* %67, align 4
  %235 = icmp eq i32 %234, 0
  br i1 %235, label %236, label %240

236:                                              ; preds = %230
  %237 = call i32 @vp8cx_encode_intra_macroblock(%struct.VP8_COMP* %8, %struct.macroblock* %20, %struct.TOKENEXTRA** nonnull %3) #4
  %238 = load i32, i32* %22, align 4
  %239 = add nsw i32 %238, %237
  store i32 %239, i32* %22, align 4
  br label %323

240:                                              ; preds = %230
  %241 = trunc i64 %157 to i32
  %242 = trunc i64 %156 to i32
  %243 = call i32 @vp8cx_encode_inter_macroblock(%struct.VP8_COMP* %8, %struct.macroblock* %20, %struct.TOKENEXTRA** nonnull %3, i32 %242, i32 %241, i32 %105, i32 %165) #4
  %244 = load i32, i32* %22, align 4
  %245 = add nsw i32 %244, %243
  store i32 %245, i32* %22, align 4
  %246 = load i32, i32* %68, align 8
  %247 = icmp eq i32 %246, 0
  br i1 %247, label %248, label %323

248:                                              ; preds = %240
  %249 = load %struct.modeinfo*, %struct.modeinfo** %26, align 32
  %250 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %249, i64 0, i32 0, i32 0
  %251 = load i8, i8* %250, align 4
  %252 = icmp eq i8 %251, 7
  br i1 %252, label %253, label %272

253:                                              ; preds = %248
  %254 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %249, i64 0, i32 0, i32 2
  %255 = load i8, i8* %254, align 2
  %256 = icmp eq i8 %255, 1
  br i1 %256, label %257, label %272

257:                                              ; preds = %253
  %258 = load i8*, i8** %69, align 8
  %259 = add nsw i64 %158, %129
  %260 = getelementptr inbounds i8, i8* %258, i64 %259
  %261 = load i8, i8* %260, align 1
  %262 = icmp eq i8 %261, -1
  br i1 %262, label %265, label %263

263:                                              ; preds = %257
  %264 = add nuw i8 %261, 1
  store i8 %264, i8* %260, align 1
  br label %265

265:                                              ; preds = %257, %263
  %266 = load i8*, i8** %70, align 32
  %267 = getelementptr inbounds i8, i8* %266, i64 %259
  %268 = load i8, i8* %267, align 1
  %269 = icmp eq i8 %268, -1
  br i1 %269, label %278, label %270

270:                                              ; preds = %265
  %271 = add nuw i8 %268, 1
  store i8 %271, i8* %267, align 1
  br label %278

272:                                              ; preds = %253, %248
  %273 = load i8*, i8** %69, align 8
  %274 = add nsw i64 %158, %129
  %275 = getelementptr inbounds i8, i8* %273, i64 %274
  store i8 0, i8* %275, align 1
  %276 = load i8*, i8** %70, align 32
  %277 = getelementptr inbounds i8, i8* %276, i64 %274
  store i8 0, i8* %277, align 1
  br label %278

278:                                              ; preds = %265, %270, %272
  %279 = load i32, i32* %71, align 4
  %280 = icmp eq i32 %279, 0
  br i1 %280, label %285, label %281

281:                                              ; preds = %278
  %282 = load i8*, i8** %70, align 32
  %283 = add nsw i64 %158, %129
  %284 = getelementptr inbounds i8, i8* %282, i64 %283
  store i8 0, i8* %284, align 1
  br label %285

285:                                              ; preds = %278, %281
  %286 = load i32, i32* %68, align 8
  %287 = icmp eq i32 %286, 0
  br i1 %287, label %288, label %323

288:                                              ; preds = %285
  %289 = load i32, i32* %72, align 4
  %290 = icmp eq i32 %289, 0
  br i1 %290, label %323, label %291

291:                                              ; preds = %288
  %292 = load i8, i8* %63, align 32
  %293 = icmp eq i8 %292, 0
  br i1 %293, label %323, label %294

294:                                              ; preds = %291
  %295 = load %struct.modeinfo*, %struct.modeinfo** %26, align 32
  %296 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %295, i64 0, i32 0, i32 8
  %297 = load i8, i8* %296, align 1
  %298 = load i8*, i8** %64, align 16
  %299 = add nsw i64 %158, %129
  %300 = getelementptr inbounds i8, i8* %298, i64 %299
  store i8 %297, i8* %300, align 1
  %301 = load i8, i8* %296, align 1
  %302 = icmp eq i8 %301, 0
  br i1 %302, label %306, label %303

303:                                              ; preds = %294
  %304 = load i8*, i8** %73, align 16
  %305 = getelementptr inbounds i8, i8* %304, i64 %299
  store i8 -1, i8* %305, align 1
  br label %323

306:                                              ; preds = %294
  %307 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %295, i64 0, i32 0, i32 0
  %308 = load i8, i8* %307, align 4
  %309 = icmp eq i8 %308, 7
  br i1 %309, label %310, label %320

310:                                              ; preds = %306
  %311 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %295, i64 0, i32 0, i32 2
  %312 = load i8, i8* %311, align 2
  %313 = icmp eq i8 %312, 1
  br i1 %313, label %314, label %320

314:                                              ; preds = %310
  %315 = load i8*, i8** %73, align 16
  %316 = getelementptr inbounds i8, i8* %315, i64 %299
  %317 = load i8, i8* %316, align 1
  %318 = icmp eq i8 %317, 1
  br i1 %318, label %319, label %323

319:                                              ; preds = %314
  store i8 0, i8* %316, align 1
  br label %323

320:                                              ; preds = %310, %306
  %321 = load i8*, i8** %73, align 16
  %322 = getelementptr inbounds i8, i8* %321, i64 %299
  store i8 1, i8* %322, align 1
  br label %323

323:                                              ; preds = %240, %303, %314, %319, %320, %291, %288, %285, %236
  %324 = load i64, i64* %74, align 8
  %325 = load %struct.TOKENLIST*, %struct.TOKENLIST** %34, align 8
  %326 = getelementptr inbounds %struct.TOKENLIST, %struct.TOKENLIST* %325, i64 %116, i32 1
  %327 = bitcast %struct.TOKENEXTRA** %326 to i64*
  store i64 %324, i64* %327, align 8
  %328 = load i8*, i8** %75, align 8
  %329 = getelementptr inbounds i8, i8* %328, i64 1
  store i8* %329, i8** %75, align 8
  %330 = load i32*, i32** %42, align 16
  %331 = getelementptr inbounds i32, i32* %330, i64 1
  store i32* %331, i32** %42, align 16
  %332 = load <2 x i8*>, <2 x i8*>* %82, align 8
  %333 = getelementptr i8, <2 x i8*> %332, <2 x i64> <i64 16, i64 8>
  store <2 x i8*> %333, <2 x i8*>* %83, align 8
  %334 = load i8*, i8** %77, align 8
  %335 = getelementptr inbounds i8, i8* %334, i64 8
  store i8* %335, i8** %77, align 8
  %336 = add nsw i64 %156, 16
  %337 = add nsw i64 %157, 8
  %338 = load %struct.modeinfo*, %struct.modeinfo** %26, align 32
  %339 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %338, i64 0, i32 0, i32 8
  %340 = load i8, i8* %339, align 1
  %341 = zext i8 %340 to i64
  %342 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %11, i64 0, i32 1, i64 %341
  %343 = load i32, i32* %342, align 4
  %344 = add nsw i32 %343, 1
  store i32 %344, i32* %342, align 4
  %345 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %338, i64 1
  store %struct.modeinfo* %345, %struct.modeinfo** %26, align 32
  %346 = load %struct.PARTITION_INFO*, %struct.PARTITION_INFO** %78, align 32
  %347 = getelementptr inbounds %struct.PARTITION_INFO, %struct.PARTITION_INFO* %346, i64 1
  store %struct.PARTITION_INFO* %347, %struct.PARTITION_INFO** %78, align 32
  %348 = load %struct.ENTROPY_CONTEXT_PLANES*, %struct.ENTROPY_CONTEXT_PLANES** %37, align 16
  %349 = getelementptr inbounds %struct.ENTROPY_CONTEXT_PLANES, %struct.ENTROPY_CONTEXT_PLANES* %348, i64 1
  store %struct.ENTROPY_CONTEXT_PLANES* %349, %struct.ENTROPY_CONTEXT_PLANES** %37, align 16
  %350 = add nuw nsw i64 %158, 1
  %351 = load i32, i32* %31, align 8
  %352 = sext i32 %351 to i64
  %353 = icmp slt i64 %350, %352
  br i1 %353, label %155, label %354

354:                                              ; preds = %323
  %355 = trunc i64 %350 to i32
  br label %356

356:                                              ; preds = %133, %354
  %357 = phi i64 [ %134, %133 ], [ %149, %354 ]
  %358 = phi i32 [ 0, %133 ], [ %355, %354 ]
  %359 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %8, i64 0, i32 19, i32 11, i64 %357
  %360 = load i8*, i8** %51, align 8
  %361 = getelementptr inbounds i8, i8* %360, i64 16
  %362 = load i8*, i8** %52, align 32
  %363 = getelementptr inbounds i8, i8* %362, i64 8
  %364 = load i8*, i8** %53, align 8
  %365 = getelementptr inbounds i8, i8* %364, i64 8
  call void @vp8_extend_mb_row(%struct.yv12_buffer_config* %359, i8* %361, i8* %363, i8* %365) #4
  %366 = add nsw i32 %358, %90
  %367 = getelementptr inbounds %struct.vpx_atomic_int, %struct.vpx_atomic_int* %117, i64 0, i32 0
  store atomic volatile i32 %366, i32* %367 release, align 4
  %368 = load %struct.modeinfo*, %struct.modeinfo** %26, align 32
  %369 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %368, i64 1
  store %struct.modeinfo* %369, %struct.modeinfo** %26, align 32
  %370 = load %struct.PARTITION_INFO*, %struct.PARTITION_INFO** %78, align 32
  %371 = getelementptr inbounds %struct.PARTITION_INFO, %struct.PARTITION_INFO* %370, i64 1
  store %struct.PARTITION_INFO* %371, %struct.PARTITION_INFO** %78, align 32
  %372 = load i32, i32* %60, align 16
  %373 = shl i32 %372, 4
  %374 = load i32, i32* %79, align 32
  %375 = add nsw i32 %374, 1
  %376 = mul nsw i32 %373, %375
  %377 = load i32, i32* %31, align 8
  %378 = shl nsw i32 %377, 4
  %379 = sub nsw i32 %376, %378
  %380 = load i8*, i8** %59, align 8
  %381 = sext i32 %379 to i64
  %382 = getelementptr inbounds i8, i8* %380, i64 %381
  store i8* %382, i8** %59, align 8
  %383 = load i32, i32* %80, align 4
  %384 = shl nsw i32 %383, 3
  %385 = load i32, i32* %79, align 32
  %386 = add nsw i32 %385, 1
  %387 = mul nsw i32 %386, %384
  %388 = load i32, i32* %31, align 8
  %389 = shl nsw i32 %388, 3
  %390 = sub nsw i32 %387, %389
  %391 = load i8*, i8** %76, align 32
  %392 = sext i32 %390 to i64
  %393 = getelementptr inbounds i8, i8* %391, i64 %392
  store i8* %393, i8** %76, align 32
  %394 = load i32, i32* %79, align 32
  %395 = add nsw i32 %394, 1
  %396 = mul nsw i32 %395, %384
  %397 = load i32, i32* %31, align 8
  %398 = shl nsw i32 %397, 3
  %399 = sub nsw i32 %396, %398
  %400 = load i8*, i8** %77, align 8
  %401 = sext i32 %399 to i64
  %402 = getelementptr inbounds i8, i8* %400, i64 %401
  store i8* %402, i8** %77, align 8
  %403 = load i32, i32* %27, align 8
  %404 = load i32, i32* %79, align 32
  %405 = mul nsw i32 %404, %403
  %406 = sext i32 %405 to i64
  %407 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %369, i64 %406
  store %struct.modeinfo* %407, %struct.modeinfo** %26, align 32
  %408 = load i32, i32* %79, align 32
  %409 = mul nsw i32 %408, %403
  %410 = sext i32 %409 to i64
  %411 = getelementptr inbounds %struct.PARTITION_INFO, %struct.PARTITION_INFO* %371, i64 %410
  store %struct.PARTITION_INFO* %411, %struct.PARTITION_INFO** %78, align 32
  %412 = load i32, i32* %31, align 8
  %413 = load i32, i32* %79, align 32
  %414 = mul nsw i32 %413, %412
  %415 = load i8*, i8** %75, align 8
  %416 = sext i32 %414 to i64
  %417 = getelementptr inbounds i8, i8* %415, i64 %416
  store i8* %417, i8** %75, align 8
  %418 = load i32, i32* %79, align 32
  %419 = add i32 %105, 1
  %420 = add i32 %419, %418
  %421 = load i32, i32* %28, align 4
  %422 = icmp slt i32 %420, %421
  br i1 %422, label %104, label %423

423:                                              ; preds = %356, %93
  %424 = load %union.sem_t*, %union.sem_t** %81, align 32
  %425 = getelementptr inbounds %union.sem_t, %union.sem_t* %424, i64 %18
  %426 = call i32 @sem_post(%union.sem_t* %425) #4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21) #4
  br label %428

427:                                              ; preds = %89
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21) #4
  br label %431

428:                                              ; preds = %423, %84
  %429 = load atomic volatile i32, i32* %13 acquire, align 4
  %430 = icmp eq i32 %429, 0
  br i1 %430, label %431, label %84

431:                                              ; preds = %428, %1, %427
  call void @llvm.lifetime.end.p0i8(i64 9, i8* nonnull %12) #4
  ret i8* null
}

declare i32 @pthread_join(i64, i8**) local_unnamed_addr #2

; Function Attrs: nounwind
declare i32 @sem_destroy(%union.sem_t*) local_unnamed_addr #3

declare void @vpx_free(i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal noalias i8* @thread_loopfilter(i8* nocapture readonly) #0 {
  %2 = getelementptr inbounds i8, i8* %0, i64 8
  %3 = bitcast i8* %2 to %struct.VP8_COMP**
  %4 = load %struct.VP8_COMP*, %struct.VP8_COMP** %3, align 8
  %5 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %4, i64 0, i32 19
  %6 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %4, i64 0, i32 157, i32 0
  %7 = load atomic volatile i32, i32* %6 acquire, align 4
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %23, label %9

9:                                                ; preds = %1
  %10 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %4, i64 0, i32 167
  %11 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %4, i64 0, i32 168
  br label %12

12:                                               ; preds = %9, %20
  %13 = tail call i32 @sem_wait(%union.sem_t* %10) #4
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %15, label %20

15:                                               ; preds = %12
  %16 = load atomic volatile i32, i32* %6 acquire, align 4
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %23, label %18

18:                                               ; preds = %15
  tail call void @vp8_loopfilter_frame(%struct.VP8_COMP* %4, %struct.VP8Common* %5) #4
  %19 = tail call i32 @sem_post(%union.sem_t* %11) #4
  br label %20

20:                                               ; preds = %18, %12
  %21 = load atomic volatile i32, i32* %6 acquire, align 4
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %23, label %12

23:                                               ; preds = %20, %15, %1
  ret i8* null
}

; Function Attrs: nounwind
declare i32 @sem_post(%union.sem_t*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @vp8cx_remove_encoder_threads(%struct.VP8_COMP*) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 157, i32 0
  %3 = load atomic volatile i32, i32* %2 acquire, align 4
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %59, label %5

5:                                                ; preds = %1
  store atomic volatile i32 0, i32* %2 release, align 4
  %6 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 158
  %7 = load i32, i32* %6, align 32
  %8 = icmp sgt i32 %7, 0
  br i1 %8, label %9, label %35

9:                                                ; preds = %5
  %10 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 165
  %11 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 166
  %12 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 160
  br label %13

13:                                               ; preds = %9, %13
  %14 = phi i64 [ 0, %9 ], [ %31, %13 ]
  %15 = load %union.sem_t*, %union.sem_t** %10, align 8
  %16 = getelementptr inbounds %union.sem_t, %union.sem_t* %15, i64 %14
  %17 = tail call i32 @sem_post(%union.sem_t* %16) #4
  %18 = load %union.sem_t*, %union.sem_t** %11, align 32
  %19 = getelementptr inbounds %union.sem_t, %union.sem_t* %18, i64 %14
  %20 = tail call i32 @sem_post(%union.sem_t* %19) #4
  %21 = load i64*, i64** %12, align 8
  %22 = getelementptr inbounds i64, i64* %21, i64 %14
  %23 = load i64, i64* %22, align 8
  %24 = tail call i32 @pthread_join(i64 %23, i8** null) #4
  %25 = load %union.sem_t*, %union.sem_t** %10, align 8
  %26 = getelementptr inbounds %union.sem_t, %union.sem_t* %25, i64 %14
  %27 = tail call i32 @sem_destroy(%union.sem_t* %26) #4
  %28 = load %union.sem_t*, %union.sem_t** %11, align 32
  %29 = getelementptr inbounds %union.sem_t, %union.sem_t* %28, i64 %14
  %30 = tail call i32 @sem_destroy(%union.sem_t* %29) #4
  %31 = add nuw nsw i64 %14, 1
  %32 = load i32, i32* %6, align 32
  %33 = sext i32 %32 to i64
  %34 = icmp slt i64 %31, %33
  br i1 %34, label %13, label %35

35:                                               ; preds = %13, %5
  %36 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 167
  %37 = tail call i32 @sem_post(%union.sem_t* %36) #4
  %38 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 161
  %39 = load i64, i64* %38, align 16
  %40 = tail call i32 @pthread_join(i64 %39, i8** null) #4
  %41 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 168
  %42 = tail call i32 @sem_destroy(%union.sem_t* %41) #4
  %43 = tail call i32 @sem_destroy(%union.sem_t* %36) #4
  %44 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 165
  %45 = bitcast %union.sem_t** %44 to i8**
  %46 = load i8*, i8** %45, align 8
  tail call void @vpx_free(i8* %46) #4
  %47 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 166
  %48 = bitcast %union.sem_t** %47 to i8**
  %49 = load i8*, i8** %48, align 32
  tail call void @vpx_free(i8* %49) #4
  %50 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 160
  %51 = bitcast i64** %50 to i8**
  %52 = load i8*, i8** %51, align 8
  tail call void @vpx_free(i8* %52) #4
  %53 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 162
  %54 = bitcast %struct.MB_ROW_COMP** %53 to i8**
  %55 = load i8*, i8** %54, align 8
  tail call void @vpx_free(i8* %55) #4
  %56 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 163
  %57 = bitcast %struct.ENCODETHREAD_DATA** %56 to i8**
  %58 = load i8*, i8** %57, align 32
  tail call void @vpx_free(i8* %58) #4
  br label %59

59:                                               ; preds = %1, %35
  ret void
}

declare i32 @sem_wait(%union.sem_t*) local_unnamed_addr #2

declare void @vp8_copy_mem16x16_sse2(i8*, i32, i8*, i32) local_unnamed_addr #2

declare void @vp8_activity_masking(%struct.VP8_COMP*, %struct.macroblock*) local_unnamed_addr #2

declare void @vp8cx_mb_init_quantizer(%struct.VP8_COMP*, %struct.macroblock*, i32) local_unnamed_addr #2

declare i32 @vp8cx_encode_intra_macroblock(%struct.VP8_COMP*, %struct.macroblock*, %struct.TOKENEXTRA**) local_unnamed_addr #2

declare i32 @vp8cx_encode_inter_macroblock(%struct.VP8_COMP*, %struct.macroblock*, %struct.TOKENEXTRA**, i32, i32, i32, i32) local_unnamed_addr #2

declare void @vp8_extend_mb_row(%struct.yv12_buffer_config*, i8*, i8*, i8*) local_unnamed_addr #2

declare void @vp8_loopfilter_frame(%struct.VP8_COMP*, %struct.VP8Common*) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 -2146595393, i32 -2146595384}
