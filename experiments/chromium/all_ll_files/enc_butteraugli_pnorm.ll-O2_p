; ModuleID = '../../third_party/libjxl/src/lib/jxl/enc_butteraugli_pnorm.cc'
source_filename = "../../third_party/libjxl/src/lib/jxl/enc_butteraugli_pnorm.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.jxl::Plane" = type { %"struct.jxl::PlaneBase" }
%"struct.jxl::PlaneBase" = type { i32, i32, i32, i32, i64, %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%"struct.jxl::ButteraugliParams" = type <{ float, float, float, i8, [3 x i8] }>
%"struct.hwy::ChosenTarget" = type { %"struct.std::__1::atomic.103" }
%"struct.std::__1::atomic.103" = type { %"struct.std::__1::__atomic_base.104" }
%"struct.std::__1::__atomic_base.104" = type { %"struct.std::__1::__atomic_base.105" }
%"struct.std::__1::__atomic_base.105" = type { %"struct.std::__1::__cxx_atomic_impl.106" }
%"struct.std::__1::__cxx_atomic_impl.106" = type { %"struct.std::__1::__cxx_atomic_base_impl.107" }
%"struct.std::__1::__cxx_atomic_base_impl.107" = type { i32 }
%"class.jxl::ImageBundle" = type { %"class.std::__1::unique_ptr.5", i32, [4 x i8], %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::FrameOrigin", i32, i8, i8, %"class.std::__1::basic_string", %"struct.jxl::ImageMetadata"*, %"class.jxl::Image3", %"struct.jxl::ColorEncoding", %"class.std::__1::vector.89", i64 }
%"class.std::__1::unique_ptr.5" = type { %"class.std::__1::__compressed_pair.6" }
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::__compressed_pair_elem.7" = type { %"struct.jxl::jpeg::JPEGData"* }
%"struct.jxl::jpeg::JPEGData" = type { %"class.jxl::Fields", i32, i32, i32, %"class.std::__1::vector", %"class.std::__1::vector.17", %"class.std::__1::vector", %"class.std::__1::vector.24", %"class.std::__1::vector.31", %"class.std::__1::vector.40", %"class.std::__1::vector.54", %"class.std::__1::vector.8", %"class.std::__1::vector", %"class.std::__1::vector.8", i32, i8, %"class.std::__1::vector.8" }
%"class.jxl::Fields" = type { i32 (...)** }
%"class.std::__1::vector.17" = type { %"class.std::__1::__vector_base.18" }
%"class.std::__1::__vector_base.18" = type { i32*, i32*, %"class.std::__1::__compressed_pair.19" }
%"class.std::__1::__compressed_pair.19" = type { %"struct.std::__1::__compressed_pair_elem.20" }
%"struct.std::__1::__compressed_pair_elem.20" = type { i32* }
%"class.std::__1::vector.24" = type { %"class.std::__1::__vector_base.25" }
%"class.std::__1::__vector_base.25" = type { %"struct.jxl::jpeg::JPEGQuantTable"*, %"struct.jxl::jpeg::JPEGQuantTable"*, %"class.std::__1::__compressed_pair.26" }
%"struct.jxl::jpeg::JPEGQuantTable" = type <{ %"struct.std::__1::array", i32, i32, i8, [3 x i8] }>
%"struct.std::__1::array" = type { [64 x i32] }
%"class.std::__1::__compressed_pair.26" = type { %"struct.std::__1::__compressed_pair_elem.27" }
%"struct.std::__1::__compressed_pair_elem.27" = type { %"struct.jxl::jpeg::JPEGQuantTable"* }
%"class.std::__1::vector.31" = type { %"class.std::__1::__vector_base.32" }
%"class.std::__1::__vector_base.32" = type { %"struct.jxl::jpeg::JPEGHuffmanCode"*, %"struct.jxl::jpeg::JPEGHuffmanCode"*, %"class.std::__1::__compressed_pair.35" }
%"struct.jxl::jpeg::JPEGHuffmanCode" = type <{ %"struct.std::__1::array.33", %"struct.std::__1::array.34", i32, i8, [3 x i8] }>
%"struct.std::__1::array.33" = type { [17 x i32] }
%"struct.std::__1::array.34" = type { [257 x i32] }
%"class.std::__1::__compressed_pair.35" = type { %"struct.std::__1::__compressed_pair_elem.36" }
%"struct.std::__1::__compressed_pair_elem.36" = type { %"struct.jxl::jpeg::JPEGHuffmanCode"* }
%"class.std::__1::vector.40" = type { %"class.std::__1::__vector_base.41" }
%"class.std::__1::__vector_base.41" = type { %"struct.jxl::jpeg::JPEGComponent"*, %"struct.jxl::jpeg::JPEGComponent"*, %"class.std::__1::__compressed_pair.49" }
%"struct.jxl::jpeg::JPEGComponent" = type { i32, i32, i32, i32, i32, i32, %"class.std::__1::vector.42" }
%"class.std::__1::vector.42" = type { %"class.std::__1::__vector_base.43" }
%"class.std::__1::__vector_base.43" = type { i16*, i16*, %"class.std::__1::__compressed_pair.44" }
%"class.std::__1::__compressed_pair.44" = type { %"struct.std::__1::__compressed_pair_elem.45" }
%"struct.std::__1::__compressed_pair_elem.45" = type { i16* }
%"class.std::__1::__compressed_pair.49" = type { %"struct.std::__1::__compressed_pair_elem.50" }
%"struct.std::__1::__compressed_pair_elem.50" = type { %"struct.jxl::jpeg::JPEGComponent"* }
%"class.std::__1::vector.54" = type { %"class.std::__1::__vector_base.55" }
%"class.std::__1::__vector_base.55" = type { %"struct.jxl::jpeg::JPEGScanInfo"*, %"struct.jxl::jpeg::JPEGScanInfo"*, %"class.std::__1::__compressed_pair.71" }
%"struct.jxl::jpeg::JPEGScanInfo" = type { i32, i32, i32, i32, i32, %"struct.std::__1::array.56", i32, %"class.std::__1::vector.57", %"class.std::__1::vector.64" }
%"struct.std::__1::array.56" = type { [4 x %"struct.jxl::jpeg::JPEGComponentScanInfo"] }
%"struct.jxl::jpeg::JPEGComponentScanInfo" = type { i32, i32, i32 }
%"class.std::__1::vector.57" = type { %"class.std::__1::__vector_base.58" }
%"class.std::__1::__vector_base.58" = type { i32*, i32*, %"class.std::__1::__compressed_pair.59" }
%"class.std::__1::__compressed_pair.59" = type { %"struct.std::__1::__compressed_pair_elem.60" }
%"struct.std::__1::__compressed_pair_elem.60" = type { i32* }
%"class.std::__1::vector.64" = type { %"class.std::__1::__vector_base.65" }
%"class.std::__1::__vector_base.65" = type { %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"*, %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"*, %"class.std::__1::__compressed_pair.66" }
%"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo" = type { i32, i32 }
%"class.std::__1::__compressed_pair.66" = type { %"struct.std::__1::__compressed_pair_elem.67" }
%"struct.std::__1::__compressed_pair_elem.67" = type { %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"* }
%"class.std::__1::__compressed_pair.71" = type { %"struct.std::__1::__compressed_pair_elem.72" }
%"struct.std::__1::__compressed_pair_elem.72" = type { %"struct.jxl::jpeg::JPEGScanInfo"* }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.std::__1::vector.8"*, %"class.std::__1::vector.8"*, %"class.std::__1::__compressed_pair.12" }
%"class.std::__1::__compressed_pair.12" = type { %"struct.std::__1::__compressed_pair_elem.13" }
%"struct.std::__1::__compressed_pair_elem.13" = type { %"class.std::__1::vector.8"* }
%"class.std::__1::vector.8" = type { %"class.std::__1::__vector_base.9" }
%"class.std::__1::__vector_base.9" = type { i8*, i8*, %"class.std::__1::__compressed_pair.10" }
%"class.std::__1::__compressed_pair.10" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.jxl::YCbCrChromaSubsampling" = type <{ %"class.jxl::Fields", [3 x i32], i8, i8, [2 x i8] }>
%"struct.jxl::FrameOrigin" = type { i32, i32 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.77" }
%"class.std::__1::__compressed_pair.77" = type { %"struct.std::__1::__compressed_pair_elem.78" }
%"struct.std::__1::__compressed_pair_elem.78" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"struct.jxl::ImageMetadata" = type <{ %"class.jxl::Fields", i8, [7 x i8], %"struct.jxl::BitDepth", i8, i8, [6 x i8], %"struct.jxl::ColorEncoding", i32, i8, i8, i8, i8, %"class.jxl::SizeHeader", %"struct.jxl::ToneMapping", i32, [4 x i8], %"class.std::__1::vector.82", %"struct.jxl::CustomTransformData", %"class.jxl::PreviewHeader", %"struct.jxl::AnimationHeader", i64, i8, [7 x i8] }>
%"struct.jxl::BitDepth" = type <{ %"class.jxl::Fields", i8, [3 x i8], i32, i32, [4 x i8] }>
%"class.jxl::SizeHeader" = type { %"class.jxl::Fields", i8, i32, i32, i32, i32, i32 }
%"struct.jxl::ToneMapping" = type <{ %"class.jxl::Fields", i8, [3 x i8], float, float, i8, [3 x i8], float, [4 x i8] }>
%"class.std::__1::vector.82" = type { %"class.std::__1::__vector_base.83" }
%"class.std::__1::__vector_base.83" = type { %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"*, %"class.std::__1::__compressed_pair.84" }
%"struct.jxl::ExtraChannelInfo" = type { %"class.jxl::Fields", i8, i32, %"struct.jxl::BitDepth", i32, %"class.std::__1::basic_string", i8, [4 x float], i32 }
%"class.std::__1::__compressed_pair.84" = type { %"struct.std::__1::__compressed_pair_elem.85" }
%"struct.std::__1::__compressed_pair_elem.85" = type { %"struct.jxl::ExtraChannelInfo"* }
%"struct.jxl::CustomTransformData" = type <{ %"class.jxl::Fields", i8, i8, [6 x i8], %"struct.jxl::OpsinInverseMatrix", i32, [15 x float], [55 x float], [210 x float], [4 x i8] }>
%"struct.jxl::OpsinInverseMatrix" = type <{ %"class.jxl::Fields", i8, [3 x i8], [9 x float], [3 x float], [4 x float], [4 x i8] }>
%"class.jxl::PreviewHeader" = type { %"class.jxl::Fields", i8, i32, i32, i32, i32, i32 }
%"struct.jxl::AnimationHeader" = type <{ %"class.jxl::Fields", i32, i32, i32, i8, [3 x i8] }>
%"class.jxl::Image3" = type { [3 x %"class.jxl::Plane"] }
%"struct.jxl::ColorEncoding" = type { %"class.jxl::Fields", i8, i32, i32, %"struct.jxl::CustomTransferFunction", i32, i8, i8, %"class.jxl::PaddedBytes", i32, %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy" }
%"struct.jxl::CustomTransferFunction" = type { %"class.jxl::Fields", i32, i8, i32, i32 }
%"class.jxl::PaddedBytes" = type { i64, i64, %"class.std::__1::unique_ptr" }
%"struct.jxl::Customxy" = type { %"class.jxl::Fields", i32, i32 }
%"class.std::__1::vector.89" = type { %"class.std::__1::__vector_base.90" }
%"class.std::__1::__vector_base.90" = type { %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.std::__1::__compressed_pair.91" }
%"class.std::__1::__compressed_pair.91" = type { %"struct.std::__1::__compressed_pair_elem.92" }
%"struct.std::__1::__compressed_pair_elem.92" = type { %"class.jxl::Plane"* }
%"class.jxl::Rect" = type { i64, i64, i64, i64 }
%"class.jxl::ThreadPool" = type { i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)*, i8* }

@_ZZN3jxl6N_SSE416ComputeDistancePERKNS_5PlaneIfEERKNS_17ButteraugliParamsEdE4once = internal global { { i32 } } zeroinitializer, align 4
@.str = private unnamed_addr constant [22 x i8] c"%s:%d: JXL_CHECK: %s\0A\00", align 1
@.str.1 = private unnamed_addr constant [62 x i8] c"../../third_party/libjxl/src/lib/jxl/enc_butteraugli_pnorm.cc\00", align 1
@.str.2 = private unnamed_addr constant [65 x i8] c"ib1.CopyTo(Rect(ib1), ColorEncoding::SRGB(ib1.IsGray()), &copy1)\00", align 1
@.str.3 = private unnamed_addr constant [65 x i8] c"ib2.CopyTo(Rect(ib2), ColorEncoding::SRGB(ib2.IsGray()), &copy2)\00", align 1
@.str.4 = private unnamed_addr constant [25 x i8] c"SameSize(*srgb1, *srgb2)\00", align 1
@_ZZN3jxl6N_AVX216ComputeDistancePERKNS_5PlaneIfEERKNS_17ButteraugliParamsEdE4once = internal global { { i32 } } zeroinitializer, align 4
@_ZZN3jxl6N_AVX316ComputeDistancePERKNS_5PlaneIfEERKNS_17ButteraugliParamsEdE4once = internal global { { i32 } } zeroinitializer, align 4
@_ZZN3jxl8N_SCALAR16ComputeDistancePERKNS_5PlaneIfEERKNS_17ButteraugliParamsEdE4once = internal global { { i32 } } zeroinitializer, align 4
@_ZN3jxlL36ComputeDistancePHighwayDispatchTableE = internal unnamed_addr constant [12 x double (%"class.jxl::Plane"*, %"struct.jxl::ButteraugliParams"*, double)*] [double (%"class.jxl::Plane"*, %"struct.jxl::ButteraugliParams"*, double)* @_ZN3hwy13FunctionCacheIdJRKN3jxl5PlaneIfEERKNS1_17ButteraugliParamsEdEE13ChooseAndCallIXadL_ZNS1_L36ComputeDistancePHighwayDispatchTableEEEEEdS5_S8_d, double (%"class.jxl::Plane"*, %"struct.jxl::ButteraugliParams"*, double)* null, double (%"class.jxl::Plane"*, %"struct.jxl::ButteraugliParams"*, double)* null, double (%"class.jxl::Plane"*, %"struct.jxl::ButteraugliParams"*, double)* null, double (%"class.jxl::Plane"*, %"struct.jxl::ButteraugliParams"*, double)* @_ZN3jxl6N_AVX316ComputeDistancePERKNS_5PlaneIfEERKNS_17ButteraugliParamsEd, double (%"class.jxl::Plane"*, %"struct.jxl::ButteraugliParams"*, double)* @_ZN3jxl6N_AVX216ComputeDistancePERKNS_5PlaneIfEERKNS_17ButteraugliParamsEd, double (%"class.jxl::Plane"*, %"struct.jxl::ButteraugliParams"*, double)* null, double (%"class.jxl::Plane"*, %"struct.jxl::ButteraugliParams"*, double)* @_ZN3jxl6N_SSE416ComputeDistancePERKNS_5PlaneIfEERKNS_17ButteraugliParamsEd, double (%"class.jxl::Plane"*, %"struct.jxl::ButteraugliParams"*, double)* null, double (%"class.jxl::Plane"*, %"struct.jxl::ButteraugliParams"*, double)* null, double (%"class.jxl::Plane"*, %"struct.jxl::ButteraugliParams"*, double)* null, double (%"class.jxl::Plane"*, %"struct.jxl::ButteraugliParams"*, double)* @_ZN3jxl8N_SCALAR16ComputeDistancePERKNS_5PlaneIfEERKNS_17ButteraugliParamsEd], align 16
@_ZN3hwy13chosen_targetE = external global %"struct.hwy::ChosenTarget", align 4
@_ZN3jxlL36ComputeDistance2HighwayDispatchTableE = internal unnamed_addr constant [12 x double (%"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"*)*] [double (%"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"*)* @_ZN3hwy13FunctionCacheIdJRKN3jxl11ImageBundleES4_EE13ChooseAndCallIXadL_ZNS1_L36ComputeDistance2HighwayDispatchTableEEEEEdS4_S4_, double (%"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"*)* null, double (%"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"*)* null, double (%"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"*)* null, double (%"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"*)* @_ZN3jxl6N_AVX316ComputeDistance2ERKNS_11ImageBundleES3_, double (%"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"*)* @_ZN3jxl6N_AVX216ComputeDistance2ERKNS_11ImageBundleES3_, double (%"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"*)* null, double (%"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"*)* @_ZN3jxl6N_SSE416ComputeDistance2ERKNS_11ImageBundleES3_, double (%"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"*)* null, double (%"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"*)* null, double (%"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"*)* null, double (%"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"*)* @_ZN3jxl8N_SCALAR16ComputeDistance2ERKNS_11ImageBundleES3_], align 16

; Function Attrs: nounwind ssp uwtable
define hidden double @_ZN3jxl6N_SSE416ComputeDistancePERKNS_5PlaneIfEERKNS_17ButteraugliParamsEd(%"class.jxl::Plane"* nocapture readonly dereferenceable(32), %"struct.jxl::ButteraugliParams"* nocapture readonly dereferenceable(16), double) #0 {
  %4 = getelementptr inbounds %"struct.jxl::ButteraugliParams", %"struct.jxl::ButteraugliParams"* %1, i64 0, i32 3
  %5 = load i8, i8* %4, align 4, !range !2
  %6 = icmp eq i8 %5, 0
  %7 = select i1 %6, i64 0, i64 8
  %8 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %0, i64 0, i32 0, i32 0
  %9 = load i32, i32* %8, align 8
  %10 = zext i32 %9 to i64
  %11 = shl nuw nsw i64 %7, 1
  %12 = icmp ult i64 %11, %10
  %13 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %0, i64 0, i32 0, i32 1
  %14 = load i32, i32* %13, align 4
  %15 = zext i32 %14 to i64
  %16 = icmp ult i64 %11, %15
  %17 = and i1 %12, %16
  %18 = select i1 %17, i64 %7, i64 0
  %19 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %0, i64 0, i32 0, i32 1
  %20 = mul nuw i64 %15, %10
  %21 = uitofp i64 %20 to double
  %22 = fdiv double 1.000000e+00, %21
  %23 = fadd double %2, -3.000000e+00
  %24 = tail call double @llvm.fabs.f64(double %23) #12
  %25 = fcmp olt double %24, 0x3EB0C6F7A0B5ED8D
  br i1 %25, label %26, label %168

26:                                               ; preds = %3
  %27 = sub nsw i64 %15, %18
  %28 = icmp ult i64 %18, %27
  br i1 %28, label %29, label %39

29:                                               ; preds = %26
  %30 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %31 = load i8*, i8** %30, align 8
  %32 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %0, i64 0, i32 0, i32 4
  %33 = load i64, i64* %32, align 8
  %34 = or i64 %18, 2
  %35 = sub nsw i64 %10, %18
  %36 = icmp ugt i64 %34, %35
  %37 = xor i64 %18, -1
  %38 = add nsw i64 %37, %10
  br label %67

39:                                               ; preds = %162, %26
  %40 = phi <2 x double> [ zeroinitializer, %26 ], [ %105, %162 ]
  %41 = phi <2 x double> [ zeroinitializer, %26 ], [ %106, %162 ]
  %42 = phi <2 x double> [ zeroinitializer, %26 ], [ %107, %162 ]
  %43 = phi double [ 0.000000e+00, %26 ], [ %163, %162 ]
  %44 = phi double [ 0.000000e+00, %26 ], [ %164, %162 ]
  %45 = phi double [ 0.000000e+00, %26 ], [ %165, %162 ]
  %46 = shufflevector <2 x double> %40, <2 x double> undef, <2 x i32> <i32 1, i32 undef>
  %47 = fadd <2 x double> %40, %46
  %48 = extractelement <2 x double> %47, i32 0
  %49 = fadd double %48, %45
  %50 = fmul double %22, %49
  %51 = fdiv double 1.000000e+00, %2
  %52 = tail call double @pow(double %50, double %51) #12
  %53 = fadd double %52, 0.000000e+00
  %54 = shufflevector <2 x double> %41, <2 x double> undef, <2 x i32> <i32 1, i32 undef>
  %55 = fadd <2 x double> %41, %54
  %56 = extractelement <2 x double> %55, i32 0
  %57 = fadd double %56, %44
  %58 = fmul double %22, %57
  %59 = fmul double %2, 2.000000e+00
  %60 = fdiv double 1.000000e+00, %59
  %61 = tail call double @pow(double %58, double %60) #12
  %62 = fadd double %53, %61
  %63 = shufflevector <2 x double> %42, <2 x double> undef, <2 x i32> <i32 1, i32 undef>
  %64 = fadd <2 x double> %42, %63
  %65 = extractelement <2 x double> %64, i32 0
  %66 = fadd double %43, %65
  br label %238

67:                                               ; preds = %162, %29
  %68 = phi double [ 0.000000e+00, %29 ], [ %165, %162 ]
  %69 = phi double [ 0.000000e+00, %29 ], [ %164, %162 ]
  %70 = phi double [ 0.000000e+00, %29 ], [ %163, %162 ]
  %71 = phi i64 [ %18, %29 ], [ %166, %162 ]
  %72 = phi <2 x double> [ zeroinitializer, %29 ], [ %107, %162 ]
  %73 = phi <2 x double> [ zeroinitializer, %29 ], [ %106, %162 ]
  %74 = phi <2 x double> [ zeroinitializer, %29 ], [ %105, %162 ]
  %75 = mul i64 %33, %71
  %76 = getelementptr inbounds i8, i8* %31, i64 %75
  %77 = ptrtoint i8* %76 to i64
  %78 = and i64 %77, 63
  %79 = icmp eq i64 %78, 0
  tail call void @llvm.assume(i1 %79) #12
  %80 = bitcast i8* %76 to float*
  br i1 %36, label %100, label %81

81:                                               ; preds = %67, %81
  %82 = phi i64 [ %98, %81 ], [ %34, %67 ]
  %83 = phi i64 [ %82, %81 ], [ %18, %67 ]
  %84 = phi <2 x double> [ %97, %81 ], [ zeroinitializer, %67 ]
  %85 = phi <2 x double> [ %95, %81 ], [ zeroinitializer, %67 ]
  %86 = phi <2 x double> [ %93, %81 ], [ zeroinitializer, %67 ]
  %87 = getelementptr inbounds float, float* %80, i64 %83
  %88 = bitcast float* %87 to <2 x float>*
  %89 = load <2 x float>, <2 x float>* %88, align 8, !alias.scope !3
  %90 = fpext <2 x float> %89 to <2 x double>
  %91 = fmul <2 x double> %90, %90
  %92 = fmul <2 x double> %91, %90
  %93 = fadd <2 x double> %86, %92
  %94 = fmul <2 x double> %92, %92
  %95 = fadd <2 x double> %85, %94
  %96 = fmul <2 x double> %94, %94
  %97 = fadd <2 x double> %84, %96
  %98 = add i64 %82, 2
  %99 = icmp ugt i64 %98, %35
  br i1 %99, label %100, label %81

100:                                              ; preds = %81, %67
  %101 = phi <2 x double> [ zeroinitializer, %67 ], [ %93, %81 ]
  %102 = phi <2 x double> [ zeroinitializer, %67 ], [ %95, %81 ]
  %103 = phi <2 x double> [ zeroinitializer, %67 ], [ %97, %81 ]
  %104 = phi i64 [ %18, %67 ], [ %82, %81 ]
  %105 = fadd <2 x double> %74, %101
  %106 = fadd <2 x double> %73, %102
  %107 = fadd <2 x double> %72, %103
  %108 = icmp ult i64 %104, %35
  br i1 %108, label %109, label %162

109:                                              ; preds = %100
  %110 = sub i64 %10, %104
  %111 = and i64 %110, 1
  %112 = icmp eq i64 %111, 0
  br i1 %112, label %125, label %113

113:                                              ; preds = %109
  %114 = getelementptr inbounds float, float* %80, i64 %104
  %115 = load float, float* %114, align 4
  %116 = fpext float %115 to double
  %117 = fmul double %116, %116
  %118 = fmul double %117, %116
  %119 = fadd double %68, %118
  %120 = fmul double %118, %118
  %121 = fadd double %69, %120
  %122 = fmul double %120, %120
  %123 = fadd double %70, %122
  %124 = add nuw i64 %104, 1
  br label %125

125:                                              ; preds = %113, %109
  %126 = phi double [ %119, %113 ], [ undef, %109 ]
  %127 = phi double [ %121, %113 ], [ undef, %109 ]
  %128 = phi double [ %123, %113 ], [ undef, %109 ]
  %129 = phi double [ %119, %113 ], [ %68, %109 ]
  %130 = phi double [ %121, %113 ], [ %69, %109 ]
  %131 = phi double [ %123, %113 ], [ %70, %109 ]
  %132 = phi i64 [ %124, %113 ], [ %104, %109 ]
  %133 = icmp eq i64 %38, %104
  br i1 %133, label %162, label %134

134:                                              ; preds = %125, %134
  %135 = phi double [ %155, %134 ], [ %129, %125 ]
  %136 = phi double [ %157, %134 ], [ %130, %125 ]
  %137 = phi double [ %159, %134 ], [ %131, %125 ]
  %138 = phi i64 [ %160, %134 ], [ %132, %125 ]
  %139 = getelementptr inbounds float, float* %80, i64 %138
  %140 = load float, float* %139, align 4
  %141 = fpext float %140 to double
  %142 = fmul double %141, %141
  %143 = fmul double %142, %141
  %144 = fadd double %135, %143
  %145 = fmul double %143, %143
  %146 = fadd double %136, %145
  %147 = fmul double %145, %145
  %148 = fadd double %137, %147
  %149 = add nuw i64 %138, 1
  %150 = getelementptr inbounds float, float* %80, i64 %149
  %151 = load float, float* %150, align 4
  %152 = fpext float %151 to double
  %153 = fmul double %152, %152
  %154 = fmul double %153, %152
  %155 = fadd double %144, %154
  %156 = fmul double %154, %154
  %157 = fadd double %146, %156
  %158 = fmul double %156, %156
  %159 = fadd double %148, %158
  %160 = add nuw i64 %138, 2
  %161 = icmp eq i64 %160, %35
  br i1 %161, label %162, label %134

162:                                              ; preds = %125, %134, %100
  %163 = phi double [ %70, %100 ], [ %128, %125 ], [ %159, %134 ]
  %164 = phi double [ %69, %100 ], [ %127, %125 ], [ %157, %134 ]
  %165 = phi double [ %68, %100 ], [ %126, %125 ], [ %155, %134 ]
  %166 = add nuw i64 %71, 1
  %167 = icmp eq i64 %166, %27
  br i1 %167, label %39, label %67

168:                                              ; preds = %3
  %169 = atomicrmw add i32* getelementptr inbounds ({ { i32 } }, { { i32 } }* @_ZZN3jxl6N_SSE416ComputeDistancePERKNS_5PlaneIfEERKNS_17ButteraugliParamsEdE4once, i64 0, i32 0, i32 0), i32 1 monotonic
  %170 = sub nsw i64 %15, %18
  %171 = icmp ult i64 %18, %170
  br i1 %171, label %172, label %176

172:                                              ; preds = %168
  %173 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %174 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %0, i64 0, i32 0, i32 4
  %175 = load i32, i32* %8, align 8
  br label %189

176:                                              ; preds = %209, %168
  %177 = phi double [ 0.000000e+00, %168 ], [ %212, %209 ]
  %178 = phi double [ 0.000000e+00, %168 ], [ %213, %209 ]
  %179 = phi double [ 0.000000e+00, %168 ], [ %214, %209 ]
  %180 = fmul double %22, %179
  %181 = fdiv double 1.000000e+00, %2
  %182 = tail call double @pow(double %180, double %181) #12
  %183 = fadd double %182, 0.000000e+00
  %184 = fmul double %22, %178
  %185 = fmul double %2, 2.000000e+00
  %186 = fdiv double 1.000000e+00, %185
  %187 = tail call double @pow(double %184, double %186) #12
  %188 = fadd double %183, %187
  br label %238

189:                                              ; preds = %172, %209
  %190 = phi i32 [ %14, %172 ], [ %210, %209 ]
  %191 = phi i32 [ %175, %172 ], [ %211, %209 ]
  %192 = phi double [ 0.000000e+00, %172 ], [ %212, %209 ]
  %193 = phi double [ 0.000000e+00, %172 ], [ %213, %209 ]
  %194 = phi double [ 0.000000e+00, %172 ], [ %214, %209 ]
  %195 = phi i64 [ %18, %172 ], [ %215, %209 ]
  %196 = load i8*, i8** %173, align 8
  %197 = load i64, i64* %174, align 8
  %198 = mul i64 %197, %195
  %199 = getelementptr inbounds i8, i8* %196, i64 %198
  %200 = ptrtoint i8* %199 to i64
  %201 = and i64 %200, 63
  %202 = icmp eq i64 %201, 0
  tail call void @llvm.assume(i1 %202) #12
  %203 = bitcast i8* %199 to float*
  %204 = zext i32 %191 to i64
  %205 = sub nsw i64 %204, %18
  %206 = icmp ult i64 %18, %205
  br i1 %206, label %219, label %209

207:                                              ; preds = %219
  %208 = load i32, i32* %19, align 4
  br label %209

209:                                              ; preds = %207, %189
  %210 = phi i32 [ %190, %189 ], [ %208, %207 ]
  %211 = phi i32 [ %191, %189 ], [ %234, %207 ]
  %212 = phi double [ %192, %189 ], [ %232, %207 ]
  %213 = phi double [ %193, %189 ], [ %230, %207 ]
  %214 = phi double [ %194, %189 ], [ %228, %207 ]
  %215 = add nuw i64 %195, 1
  %216 = zext i32 %210 to i64
  %217 = sub nsw i64 %216, %18
  %218 = icmp ult i64 %215, %217
  br i1 %218, label %189, label %176

219:                                              ; preds = %189, %219
  %220 = phi double [ %232, %219 ], [ %192, %189 ]
  %221 = phi double [ %230, %219 ], [ %193, %189 ]
  %222 = phi double [ %228, %219 ], [ %194, %189 ]
  %223 = phi i64 [ %233, %219 ], [ %18, %189 ]
  %224 = getelementptr inbounds float, float* %203, i64 %223
  %225 = load float, float* %224, align 4
  %226 = fpext float %225 to double
  %227 = tail call double @pow(double %226, double %2) #12
  %228 = fadd double %227, %222
  %229 = fmul double %227, %227
  %230 = fadd double %229, %221
  %231 = fmul double %229, %229
  %232 = fadd double %231, %220
  %233 = add nuw i64 %223, 1
  %234 = load i32, i32* %8, align 8
  %235 = zext i32 %234 to i64
  %236 = sub nsw i64 %235, %18
  %237 = icmp ult i64 %233, %236
  br i1 %237, label %219, label %207

238:                                              ; preds = %176, %39
  %239 = phi double [ %177, %176 ], [ %66, %39 ]
  %240 = phi double [ %188, %176 ], [ %62, %39 ]
  %241 = fmul double %22, %239
  %242 = fmul double %2, 4.000000e+00
  %243 = fdiv double 1.000000e+00, %242
  %244 = tail call double @pow(double %241, double %243) #12
  %245 = fadd double %240, %244
  %246 = fdiv double %245, 3.000000e+00
  ret double %246
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree nounwind
declare double @pow(double, double) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden double @_ZN3jxl6N_SSE416ComputeDistance2ERKNS_11ImageBundleES3_(%"class.jxl::ImageBundle"* dereferenceable(368), %"class.jxl::ImageBundle"* dereferenceable(368)) #3 {
  %3 = alloca %"class.jxl::Image3", align 8
  %4 = alloca %"class.jxl::Rect", align 8
  %5 = alloca %"class.jxl::Image3", align 8
  %6 = alloca %"class.jxl::Rect", align 8
  %7 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10
  %8 = bitcast %"class.jxl::Image3"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %8) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %8, i8 0, i64 96, i1 false) #12
  %9 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 7
  %10 = load i8, i8* %9, align 1, !range !2
  %11 = icmp eq i8 %10, 0
  br i1 %11, label %32, label %12

12:                                               ; preds = %2
  %13 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 9
  %14 = load i32, i32* %13, align 8
  %15 = icmp ult i32 %14, 2
  br i1 %15, label %16, label %32

16:                                               ; preds = %12
  %17 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 2
  %18 = load i32, i32* %17, align 4
  %19 = icmp eq i32 %18, 1
  br i1 %19, label %20, label %32

20:                                               ; preds = %16
  %21 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 3
  %22 = load i32, i32* %21, align 8
  %23 = icmp eq i32 %22, 1
  br i1 %23, label %24, label %32

24:                                               ; preds = %20
  %25 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 4, i32 2
  %26 = load i8, i8* %25, align 4, !range !2
  %27 = icmp eq i8 %26, 0
  br i1 %27, label %28, label %32

28:                                               ; preds = %24
  %29 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 4, i32 4
  %30 = load i32, i32* %29, align 4
  %31 = icmp eq i32 %30, 13
  br i1 %31, label %88, label %32

32:                                               ; preds = %2, %12, %16, %20, %24, %28
  %33 = bitcast %"class.jxl::Rect"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %33) #12
  %34 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %35 = load %"struct.jxl::jpeg::JPEGData"*, %"struct.jxl::jpeg::JPEGData"** %34, align 8
  %36 = icmp eq %"struct.jxl::jpeg::JPEGData"* %35, null
  br i1 %36, label %37, label %50

37:                                               ; preds = %32
  %38 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 0, i32 0, i32 0
  %39 = load i32, i32* %38, align 8
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %41, label %57

41:                                               ; preds = %37
  %42 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12, i32 0, i32 0
  %43 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %42, align 8
  %44 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12, i32 0, i32 1
  %45 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %44, align 8
  %46 = icmp eq %"class.jxl::Plane"* %43, %45
  br i1 %46, label %57, label %47

47:                                               ; preds = %41
  %48 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %43, i64 0, i32 0, i32 0
  %49 = load i32, i32* %48, align 8
  br label %57

50:                                               ; preds = %32
  %51 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %35, i64 0, i32 1
  %52 = load i32, i32* %51, align 8
  %53 = sext i32 %52 to i64
  %54 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %35, i64 0, i32 2
  %55 = load i32, i32* %54, align 4
  %56 = sext i32 %55 to i64
  br label %74

57:                                               ; preds = %47, %41, %37
  %58 = phi i32 [ %39, %37 ], [ 0, %41 ], [ %49, %47 ]
  %59 = zext i32 %58 to i64
  %60 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 0, i32 0, i32 1
  %61 = load i32, i32* %60, align 4
  %62 = zext i32 %61 to i64
  %63 = icmp eq i32 %61, 0
  br i1 %63, label %64, label %74

64:                                               ; preds = %57
  %65 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12, i32 0, i32 0
  %66 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %65, align 8
  %67 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12, i32 0, i32 1
  %68 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %67, align 8
  %69 = icmp eq %"class.jxl::Plane"* %66, %68
  br i1 %69, label %74, label %70

70:                                               ; preds = %64
  %71 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %66, i64 0, i32 0, i32 1
  %72 = load i32, i32* %71, align 4
  %73 = zext i32 %72 to i64
  br label %74

74:                                               ; preds = %50, %57, %64, %70
  %75 = phi i64 [ %53, %50 ], [ %59, %70 ], [ %59, %64 ], [ %59, %57 ]
  %76 = phi i64 [ %56, %50 ], [ %73, %70 ], [ 0, %64 ], [ %62, %57 ]
  %77 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %4, i64 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %33, i8 0, i64 16, i1 false) #12
  store i64 %75, i64* %77, align 8
  %78 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %4, i64 0, i32 3
  store i64 %76, i64* %78, align 8
  %79 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 9
  %80 = load i32, i32* %79, align 8
  %81 = icmp eq i32 %80, 1
  %82 = tail call dereferenceable(152) %"struct.jxl::ColorEncoding"* @_ZN3jxl13ColorEncoding4SRGBEb(i1 zeroext %81) #12
  %83 = call i32 @_ZNK3jxl11ImageBundle6CopyToERKNS_4RectERKNS_13ColorEncodingEPNS_6Image3IfEEPNS_10ThreadPoolE(%"class.jxl::ImageBundle"* %0, %"class.jxl::Rect"* nonnull dereferenceable(32) %4, %"struct.jxl::ColorEncoding"* dereferenceable(152) %82, %"class.jxl::Image3"* nonnull %3, %"class.jxl::ThreadPool"* null) #12
  %84 = icmp eq i32 %83, 0
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %33) #12
  br i1 %84, label %88, label %85

85:                                               ; preds = %74
  %86 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.1, i64 0, i64 0), i32 150, i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.2, i64 0, i64 0)) #12
  %87 = call zeroext i1 @_ZN3jxl5AbortEv() #13
  unreachable

88:                                               ; preds = %74, %28
  %89 = phi %"class.jxl::Image3"* [ %7, %28 ], [ %3, %74 ]
  %90 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 10
  %91 = bitcast %"class.jxl::Image3"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %91) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %91, i8 0, i64 96, i1 false) #12
  %92 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 7
  %93 = load i8, i8* %92, align 1, !range !2
  %94 = icmp eq i8 %93, 0
  br i1 %94, label %115, label %95

95:                                               ; preds = %88
  %96 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 9
  %97 = load i32, i32* %96, align 8
  %98 = icmp ult i32 %97, 2
  br i1 %98, label %99, label %115

99:                                               ; preds = %95
  %100 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 2
  %101 = load i32, i32* %100, align 4
  %102 = icmp eq i32 %101, 1
  br i1 %102, label %103, label %115

103:                                              ; preds = %99
  %104 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 3
  %105 = load i32, i32* %104, align 8
  %106 = icmp eq i32 %105, 1
  br i1 %106, label %107, label %115

107:                                              ; preds = %103
  %108 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 4, i32 2
  %109 = load i8, i8* %108, align 4, !range !2
  %110 = icmp eq i8 %109, 0
  br i1 %110, label %111, label %115

111:                                              ; preds = %107
  %112 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 4, i32 4
  %113 = load i32, i32* %112, align 4
  %114 = icmp eq i32 %113, 13
  br i1 %114, label %171, label %115

115:                                              ; preds = %88, %95, %99, %103, %107, %111
  %116 = bitcast %"class.jxl::Rect"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %116) #12
  %117 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %118 = load %"struct.jxl::jpeg::JPEGData"*, %"struct.jxl::jpeg::JPEGData"** %117, align 8
  %119 = icmp eq %"struct.jxl::jpeg::JPEGData"* %118, null
  br i1 %119, label %120, label %133

120:                                              ; preds = %115
  %121 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 10, i32 0, i64 0, i32 0, i32 0
  %122 = load i32, i32* %121, align 8
  %123 = icmp eq i32 %122, 0
  br i1 %123, label %124, label %140

124:                                              ; preds = %120
  %125 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 12, i32 0, i32 0
  %126 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %125, align 8
  %127 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 12, i32 0, i32 1
  %128 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %127, align 8
  %129 = icmp eq %"class.jxl::Plane"* %126, %128
  br i1 %129, label %140, label %130

130:                                              ; preds = %124
  %131 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %126, i64 0, i32 0, i32 0
  %132 = load i32, i32* %131, align 8
  br label %140

133:                                              ; preds = %115
  %134 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %118, i64 0, i32 1
  %135 = load i32, i32* %134, align 8
  %136 = sext i32 %135 to i64
  %137 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %118, i64 0, i32 2
  %138 = load i32, i32* %137, align 4
  %139 = sext i32 %138 to i64
  br label %157

140:                                              ; preds = %130, %124, %120
  %141 = phi i32 [ %122, %120 ], [ 0, %124 ], [ %132, %130 ]
  %142 = zext i32 %141 to i64
  %143 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 10, i32 0, i64 0, i32 0, i32 1
  %144 = load i32, i32* %143, align 4
  %145 = zext i32 %144 to i64
  %146 = icmp eq i32 %144, 0
  br i1 %146, label %147, label %157

147:                                              ; preds = %140
  %148 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 12, i32 0, i32 0
  %149 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %148, align 8
  %150 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 12, i32 0, i32 1
  %151 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %150, align 8
  %152 = icmp eq %"class.jxl::Plane"* %149, %151
  br i1 %152, label %157, label %153

153:                                              ; preds = %147
  %154 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %149, i64 0, i32 0, i32 1
  %155 = load i32, i32* %154, align 4
  %156 = zext i32 %155 to i64
  br label %157

157:                                              ; preds = %133, %140, %147, %153
  %158 = phi i64 [ %136, %133 ], [ %142, %153 ], [ %142, %147 ], [ %142, %140 ]
  %159 = phi i64 [ %139, %133 ], [ %156, %153 ], [ 0, %147 ], [ %145, %140 ]
  %160 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %6, i64 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %116, i8 0, i64 16, i1 false) #12
  store i64 %158, i64* %160, align 8
  %161 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %6, i64 0, i32 3
  store i64 %159, i64* %161, align 8
  %162 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 9
  %163 = load i32, i32* %162, align 8
  %164 = icmp eq i32 %163, 1
  %165 = call dereferenceable(152) %"struct.jxl::ColorEncoding"* @_ZN3jxl13ColorEncoding4SRGBEb(i1 zeroext %164) #12
  %166 = call i32 @_ZNK3jxl11ImageBundle6CopyToERKNS_4RectERKNS_13ColorEncodingEPNS_6Image3IfEEPNS_10ThreadPoolE(%"class.jxl::ImageBundle"* %1, %"class.jxl::Rect"* nonnull dereferenceable(32) %6, %"struct.jxl::ColorEncoding"* dereferenceable(152) %165, %"class.jxl::Image3"* nonnull %5, %"class.jxl::ThreadPool"* null) #12
  %167 = icmp eq i32 %166, 0
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %116) #12
  br i1 %167, label %171, label %168

168:                                              ; preds = %157
  %169 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.1, i64 0, i64 0), i32 156, i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.3, i64 0, i64 0)) #12
  %170 = call zeroext i1 @_ZN3jxl5AbortEv() #13
  unreachable

171:                                              ; preds = %157, %111
  %172 = phi %"class.jxl::Image3"* [ %90, %111 ], [ %5, %157 ]
  %173 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %89, i64 0, i32 0, i64 0, i32 0, i32 0
  %174 = load i32, i32* %173, align 8
  %175 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %172, i64 0, i32 0, i64 0, i32 0, i32 0
  %176 = load i32, i32* %175, align 8
  %177 = icmp eq i32 %174, %176
  br i1 %177, label %178, label %184

178:                                              ; preds = %171
  %179 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %89, i64 0, i32 0, i64 0, i32 0, i32 1
  %180 = load i32, i32* %179, align 4
  %181 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %172, i64 0, i32 0, i64 0, i32 0, i32 1
  %182 = load i32, i32* %181, align 4
  %183 = icmp eq i32 %180, %182
  br i1 %183, label %187, label %184

184:                                              ; preds = %171, %178
  %185 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.1, i64 0, i64 0), i32 160, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.4, i64 0, i64 0)) #12
  %186 = call zeroext i1 @_ZN3jxl5AbortEv() #13
  unreachable

187:                                              ; preds = %178
  %188 = icmp eq i32 %180, 0
  br i1 %188, label %227, label %189

189:                                              ; preds = %187
  %190 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %89, i64 0, i32 0, i64 0, i32 0, i32 4
  %191 = load i64, i64* %190, align 8
  %192 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %172, i64 0, i32 0, i64 0, i32 0, i32 4
  %193 = load i64, i64* %192, align 8
  %194 = zext i32 %174 to i64
  %195 = icmp eq i32 %174, 0
  %196 = zext i32 %180 to i64
  %197 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %89, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %198 = load i8*, i8** %197, align 8
  %199 = ptrtoint i8* %198 to i64
  %200 = and i64 %199, 63
  %201 = icmp eq i64 %200, 0
  call void @llvm.assume(i1 %201) #12
  %202 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %172, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %203 = load i8*, i8** %202, align 8
  %204 = ptrtoint i8* %203 to i64
  %205 = and i64 %204, 63
  %206 = icmp eq i64 %205, 0
  call void @llvm.assume(i1 %206) #12
  %207 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %89, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %208 = load i8*, i8** %207, align 8
  %209 = ptrtoint i8* %208 to i64
  %210 = and i64 %209, 63
  %211 = icmp eq i64 %210, 0
  call void @llvm.assume(i1 %211) #12
  %212 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %172, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %213 = load i8*, i8** %212, align 8
  %214 = ptrtoint i8* %213 to i64
  %215 = and i64 %214, 63
  %216 = icmp eq i64 %215, 0
  call void @llvm.assume(i1 %216) #12
  %217 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %89, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %218 = load i8*, i8** %217, align 8
  %219 = ptrtoint i8* %218 to i64
  %220 = and i64 %219, 63
  %221 = icmp eq i64 %220, 0
  call void @llvm.assume(i1 %221) #12
  %222 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %172, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %223 = load i8*, i8** %222, align 8
  %224 = ptrtoint i8* %223 to i64
  %225 = and i64 %224, 63
  %226 = icmp eq i64 %225, 0
  call void @llvm.assume(i1 %226) #12
  br label %244

227:                                              ; preds = %281, %187
  %228 = phi double [ 0.000000e+00, %187 ], [ %282, %281 ]
  %229 = phi double [ 0.000000e+00, %187 ], [ %283, %281 ]
  %230 = phi double [ 0.000000e+00, %187 ], [ %284, %281 ]
  %231 = call double @sqrt(double %230) #12
  %232 = fmul double %231, 7.500000e-01
  %233 = fadd double %232, 0.000000e+00
  %234 = call double @sqrt(double %229) #12
  %235 = fmul double %234, 1.250000e-01
  %236 = fadd double %233, %235
  %237 = call double @sqrt(double %228) #12
  %238 = fmul double %237, 1.250000e-01
  %239 = fadd double %236, %238
  %240 = fmul double %239, %239
  %241 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %242 = load i8*, i8** %241, align 8
  store i8* null, i8** %241, align 8
  %243 = icmp eq i8* %242, null
  br i1 %243, label %337, label %336

244:                                              ; preds = %189, %281
  %245 = phi double [ 0.000000e+00, %189 ], [ %282, %281 ]
  %246 = phi double [ 0.000000e+00, %189 ], [ %283, %281 ]
  %247 = phi double [ 0.000000e+00, %189 ], [ %284, %281 ]
  %248 = phi i64 [ 0, %189 ], [ %285, %281 ]
  %249 = mul i64 %191, %248
  %250 = mul i64 %193, %248
  %251 = getelementptr inbounds i8, i8* %198, i64 %249
  %252 = ptrtoint i8* %251 to i64
  %253 = and i64 %252, 63
  %254 = icmp eq i64 %253, 0
  call void @llvm.assume(i1 %254) #12
  %255 = getelementptr inbounds i8, i8* %203, i64 %250
  %256 = ptrtoint i8* %255 to i64
  %257 = and i64 %256, 63
  %258 = icmp eq i64 %257, 0
  call void @llvm.assume(i1 %258) #12
  %259 = getelementptr inbounds i8, i8* %208, i64 %249
  %260 = ptrtoint i8* %259 to i64
  %261 = and i64 %260, 63
  %262 = icmp eq i64 %261, 0
  call void @llvm.assume(i1 %262) #12
  %263 = getelementptr inbounds i8, i8* %213, i64 %250
  %264 = ptrtoint i8* %263 to i64
  %265 = and i64 %264, 63
  %266 = icmp eq i64 %265, 0
  call void @llvm.assume(i1 %266) #12
  %267 = getelementptr inbounds i8, i8* %218, i64 %249
  %268 = ptrtoint i8* %267 to i64
  %269 = and i64 %268, 63
  %270 = icmp eq i64 %269, 0
  call void @llvm.assume(i1 %270) #12
  %271 = getelementptr inbounds i8, i8* %223, i64 %250
  %272 = ptrtoint i8* %271 to i64
  %273 = and i64 %272, 63
  %274 = icmp eq i64 %273, 0
  call void @llvm.assume(i1 %274) #12
  %275 = bitcast i8* %251 to float*
  %276 = bitcast i8* %255 to float*
  %277 = bitcast i8* %259 to float*
  %278 = bitcast i8* %263 to float*
  %279 = bitcast i8* %267 to float*
  %280 = bitcast i8* %271 to float*
  br i1 %195, label %281, label %287

281:                                              ; preds = %287, %244
  %282 = phi double [ %245, %244 ], [ %333, %287 ]
  %283 = phi double [ %246, %244 ], [ %330, %287 ]
  %284 = phi double [ %247, %244 ], [ %327, %287 ]
  %285 = add nuw nsw i64 %248, 1
  %286 = icmp ult i64 %285, %196
  br i1 %286, label %244, label %227

287:                                              ; preds = %244, %287
  %288 = phi double [ %333, %287 ], [ %245, %244 ]
  %289 = phi double [ %330, %287 ], [ %246, %244 ]
  %290 = phi double [ %327, %287 ], [ %247, %244 ]
  %291 = phi i64 [ %334, %287 ], [ 0, %244 ]
  %292 = getelementptr inbounds float, float* %275, i64 %291
  %293 = load float, float* %292, align 4
  %294 = getelementptr inbounds float, float* %276, i64 %291
  %295 = load float, float* %294, align 4
  %296 = fsub float %293, %295
  %297 = getelementptr inbounds float, float* %277, i64 %291
  %298 = load float, float* %297, align 4
  %299 = getelementptr inbounds float, float* %278, i64 %291
  %300 = load float, float* %299, align 4
  %301 = fsub float %298, %300
  %302 = getelementptr inbounds float, float* %279, i64 %291
  %303 = load float, float* %302, align 4
  %304 = getelementptr inbounds float, float* %280, i64 %291
  %305 = load float, float* %304, align 4
  %306 = fsub float %303, %305
  %307 = fmul float %296, 0x3FD322D0E0000000
  %308 = fadd float %307, 0.000000e+00
  %309 = fmul float %301, 0x3FE2C8B440000000
  %310 = fadd float %308, %309
  %311 = fmul float %306, 0x3FBD2F1AA0000000
  %312 = fadd float %310, %311
  %313 = fmul float %296, 0xBFC2D527E0000000
  %314 = fadd float %313, 0.000000e+00
  %315 = fmul float %301, 0xBFD27CAEA0000000
  %316 = fadd float %314, %315
  %317 = fmul float %306, 0x3FDBE76C80000000
  %318 = fadd float %316, %317
  %319 = fmul float %296, 0x3FE3AE1480000000
  %320 = fadd float %319, 0.000000e+00
  %321 = fmul float %301, 0xBFE07ACC40000000
  %322 = fadd float %320, %321
  %323 = fmul float %306, 0xBFB99A4160000000
  %324 = fadd float %322, %323
  %325 = fmul float %312, %312
  %326 = fpext float %325 to double
  %327 = fadd double %290, %326
  %328 = fmul float %318, %318
  %329 = fpext float %328 to double
  %330 = fadd double %289, %329
  %331 = fmul float %324, %324
  %332 = fpext float %331 to double
  %333 = fadd double %288, %332
  %334 = add nuw nsw i64 %291, 1
  %335 = icmp eq i64 %334, %194
  br i1 %335, label %281, label %287

336:                                              ; preds = %227
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %242) #12
  br label %337

337:                                              ; preds = %336, %227
  %338 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %339 = load i8*, i8** %338, align 8
  store i8* null, i8** %338, align 8
  %340 = icmp eq i8* %339, null
  br i1 %340, label %342, label %341

341:                                              ; preds = %337
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %339) #12
  br label %342

342:                                              ; preds = %341, %337
  %343 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %344 = load i8*, i8** %343, align 8
  store i8* null, i8** %343, align 8
  %345 = icmp eq i8* %344, null
  br i1 %345, label %347, label %346

346:                                              ; preds = %342
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %344) #12
  br label %347

347:                                              ; preds = %342, %346
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %91) #12
  %348 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %349 = load i8*, i8** %348, align 8
  store i8* null, i8** %348, align 8
  %350 = icmp eq i8* %349, null
  br i1 %350, label %352, label %351

351:                                              ; preds = %347
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %349) #12
  br label %352

352:                                              ; preds = %351, %347
  %353 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %354 = load i8*, i8** %353, align 8
  store i8* null, i8** %353, align 8
  %355 = icmp eq i8* %354, null
  br i1 %355, label %357, label %356

356:                                              ; preds = %352
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %354) #12
  br label %357

357:                                              ; preds = %356, %352
  %358 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %359 = load i8*, i8** %358, align 8
  store i8* null, i8** %358, align 8
  %360 = icmp eq i8* %359, null
  br i1 %360, label %362, label %361

361:                                              ; preds = %357
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %359) #12
  br label %362

362:                                              ; preds = %357, %361
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %8) #12
  ret double %240
}

declare i32 @_ZNK3jxl11ImageBundle6CopyToERKNS_4RectERKNS_13ColorEncodingEPNS_6Image3IfEEPNS_10ThreadPoolE(%"class.jxl::ImageBundle"*, %"class.jxl::Rect"* dereferenceable(32), %"struct.jxl::ColorEncoding"* dereferenceable(152), %"class.jxl::Image3"*, %"class.jxl::ThreadPool"*) local_unnamed_addr #4

declare dereferenceable(152) %"struct.jxl::ColorEncoding"* @_ZN3jxl13ColorEncoding4SRGBEb(i1 zeroext) local_unnamed_addr #4

declare zeroext i1 @_ZN3jxl5DebugEPKcz(i8*, ...) local_unnamed_addr #4

; Function Attrs: noreturn
declare zeroext i1 @_ZN3jxl5AbortEv() local_unnamed_addr #5

; Function Attrs: nofree nounwind
declare double @sqrt(double) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden double @_ZN3jxl6N_AVX216ComputeDistancePERKNS_5PlaneIfEERKNS_17ButteraugliParamsEd(%"class.jxl::Plane"* nocapture readonly dereferenceable(32), %"struct.jxl::ButteraugliParams"* nocapture readonly dereferenceable(16), double) #6 {
  %4 = getelementptr inbounds %"struct.jxl::ButteraugliParams", %"struct.jxl::ButteraugliParams"* %1, i64 0, i32 3
  %5 = load i8, i8* %4, align 4, !range !2
  %6 = icmp eq i8 %5, 0
  %7 = select i1 %6, i64 0, i64 8
  %8 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %0, i64 0, i32 0, i32 0
  %9 = load i32, i32* %8, align 8
  %10 = zext i32 %9 to i64
  %11 = shl nuw nsw i64 %7, 1
  %12 = icmp ult i64 %11, %10
  %13 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %0, i64 0, i32 0, i32 1
  %14 = load i32, i32* %13, align 4
  %15 = zext i32 %14 to i64
  %16 = icmp ult i64 %11, %15
  %17 = and i1 %12, %16
  %18 = select i1 %17, i64 %7, i64 0
  %19 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %0, i64 0, i32 0, i32 1
  %20 = mul nuw i64 %15, %10
  %21 = uitofp i64 %20 to double
  %22 = fdiv double 1.000000e+00, %21
  %23 = fadd double %2, -3.000000e+00
  %24 = tail call double @llvm.fabs.f64(double %23) #12
  %25 = fcmp olt double %24, 0x3EB0C6F7A0B5ED8D
  br i1 %25, label %26, label %174

26:                                               ; preds = %3
  %27 = sub nsw i64 %15, %18
  %28 = icmp ult i64 %18, %27
  br i1 %28, label %29, label %39

29:                                               ; preds = %26
  %30 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %31 = load i8*, i8** %30, align 8
  %32 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %0, i64 0, i32 0, i32 4
  %33 = load i64, i64* %32, align 8
  %34 = or i64 %18, 4
  %35 = sub nsw i64 %10, %18
  %36 = icmp ugt i64 %34, %35
  %37 = xor i64 %18, -1
  %38 = add nsw i64 %37, %10
  br label %73

39:                                               ; preds = %168, %26
  %40 = phi <4 x double> [ zeroinitializer, %26 ], [ %113, %168 ]
  %41 = phi <4 x double> [ zeroinitializer, %26 ], [ %112, %168 ]
  %42 = phi <4 x double> [ zeroinitializer, %26 ], [ %111, %168 ]
  %43 = phi double [ 0.000000e+00, %26 ], [ %169, %168 ]
  %44 = phi double [ 0.000000e+00, %26 ], [ %170, %168 ]
  %45 = phi double [ 0.000000e+00, %26 ], [ %171, %168 ]
  %46 = shufflevector <4 x double> %42, <4 x double> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %47 = fadd <4 x double> %42, %46
  %48 = shufflevector <4 x double> %47, <4 x double> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %49 = fadd <4 x double> %47, %48
  %50 = extractelement <4 x double> %49, i32 0
  %51 = fadd double %45, %50
  %52 = fmul double %22, %51
  %53 = fdiv double 1.000000e+00, %2
  %54 = tail call double @pow(double %52, double %53) #12
  %55 = fadd double %54, 0.000000e+00
  %56 = shufflevector <4 x double> %41, <4 x double> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %57 = fadd <4 x double> %41, %56
  %58 = shufflevector <4 x double> %57, <4 x double> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %59 = fadd <4 x double> %57, %58
  %60 = extractelement <4 x double> %59, i32 0
  %61 = fadd double %44, %60
  %62 = fmul double %22, %61
  %63 = fmul double %2, 2.000000e+00
  %64 = fdiv double 1.000000e+00, %63
  %65 = tail call double @pow(double %62, double %64) #12
  %66 = fadd double %55, %65
  %67 = shufflevector <4 x double> %40, <4 x double> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %68 = fadd <4 x double> %40, %67
  %69 = shufflevector <4 x double> %68, <4 x double> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %70 = fadd <4 x double> %68, %69
  %71 = extractelement <4 x double> %70, i32 0
  %72 = fadd double %43, %71
  br label %244

73:                                               ; preds = %168, %29
  %74 = phi double [ 0.000000e+00, %29 ], [ %171, %168 ]
  %75 = phi double [ 0.000000e+00, %29 ], [ %170, %168 ]
  %76 = phi i64 [ %18, %29 ], [ %172, %168 ]
  %77 = phi double [ 0.000000e+00, %29 ], [ %169, %168 ]
  %78 = phi <4 x double> [ zeroinitializer, %29 ], [ %111, %168 ]
  %79 = phi <4 x double> [ zeroinitializer, %29 ], [ %112, %168 ]
  %80 = phi <4 x double> [ zeroinitializer, %29 ], [ %113, %168 ]
  %81 = mul i64 %33, %76
  %82 = getelementptr inbounds i8, i8* %31, i64 %81
  %83 = ptrtoint i8* %82 to i64
  %84 = and i64 %83, 63
  %85 = icmp eq i64 %84, 0
  tail call void @llvm.assume(i1 %85) #12
  %86 = bitcast i8* %82 to float*
  br i1 %36, label %106, label %87

87:                                               ; preds = %73, %87
  %88 = phi i64 [ %104, %87 ], [ %34, %73 ]
  %89 = phi i64 [ %88, %87 ], [ %18, %73 ]
  %90 = phi <4 x double> [ %99, %87 ], [ zeroinitializer, %73 ]
  %91 = phi <4 x double> [ %101, %87 ], [ zeroinitializer, %73 ]
  %92 = phi <4 x double> [ %103, %87 ], [ zeroinitializer, %73 ]
  %93 = getelementptr inbounds float, float* %86, i64 %89
  %94 = bitcast float* %93 to <4 x float>*
  %95 = load <4 x float>, <4 x float>* %94, align 16, !alias.scope !6
  %96 = fpext <4 x float> %95 to <4 x double>
  %97 = fmul <4 x double> %96, %96
  %98 = fmul <4 x double> %97, %96
  %99 = fadd <4 x double> %90, %98
  %100 = fmul <4 x double> %98, %98
  %101 = fadd <4 x double> %91, %100
  %102 = fmul <4 x double> %100, %100
  %103 = fadd <4 x double> %92, %102
  %104 = add i64 %88, 4
  %105 = icmp ugt i64 %104, %35
  br i1 %105, label %106, label %87

106:                                              ; preds = %87, %73
  %107 = phi <4 x double> [ zeroinitializer, %73 ], [ %103, %87 ]
  %108 = phi <4 x double> [ zeroinitializer, %73 ], [ %101, %87 ]
  %109 = phi <4 x double> [ zeroinitializer, %73 ], [ %99, %87 ]
  %110 = phi i64 [ %18, %73 ], [ %88, %87 ]
  %111 = fadd <4 x double> %78, %109
  %112 = fadd <4 x double> %79, %108
  %113 = fadd <4 x double> %80, %107
  %114 = icmp ult i64 %110, %35
  br i1 %114, label %115, label %168

115:                                              ; preds = %106
  %116 = sub i64 %10, %110
  %117 = and i64 %116, 1
  %118 = icmp eq i64 %117, 0
  br i1 %118, label %131, label %119

119:                                              ; preds = %115
  %120 = getelementptr inbounds float, float* %86, i64 %110
  %121 = load float, float* %120, align 4
  %122 = fpext float %121 to double
  %123 = fmul double %122, %122
  %124 = fmul double %123, %122
  %125 = fadd double %74, %124
  %126 = fmul double %124, %124
  %127 = fadd double %75, %126
  %128 = fmul double %126, %126
  %129 = fadd double %77, %128
  %130 = add nuw i64 %110, 1
  br label %131

131:                                              ; preds = %119, %115
  %132 = phi double [ %125, %119 ], [ undef, %115 ]
  %133 = phi double [ %127, %119 ], [ undef, %115 ]
  %134 = phi double [ %129, %119 ], [ undef, %115 ]
  %135 = phi double [ %125, %119 ], [ %74, %115 ]
  %136 = phi double [ %127, %119 ], [ %75, %115 ]
  %137 = phi i64 [ %130, %119 ], [ %110, %115 ]
  %138 = phi double [ %129, %119 ], [ %77, %115 ]
  %139 = icmp eq i64 %38, %110
  br i1 %139, label %168, label %140

140:                                              ; preds = %131, %140
  %141 = phi double [ %161, %140 ], [ %135, %131 ]
  %142 = phi double [ %163, %140 ], [ %136, %131 ]
  %143 = phi i64 [ %166, %140 ], [ %137, %131 ]
  %144 = phi double [ %165, %140 ], [ %138, %131 ]
  %145 = getelementptr inbounds float, float* %86, i64 %143
  %146 = load float, float* %145, align 4
  %147 = fpext float %146 to double
  %148 = fmul double %147, %147
  %149 = fmul double %148, %147
  %150 = fadd double %141, %149
  %151 = fmul double %149, %149
  %152 = fadd double %142, %151
  %153 = fmul double %151, %151
  %154 = fadd double %144, %153
  %155 = add nuw i64 %143, 1
  %156 = getelementptr inbounds float, float* %86, i64 %155
  %157 = load float, float* %156, align 4
  %158 = fpext float %157 to double
  %159 = fmul double %158, %158
  %160 = fmul double %159, %158
  %161 = fadd double %150, %160
  %162 = fmul double %160, %160
  %163 = fadd double %152, %162
  %164 = fmul double %162, %162
  %165 = fadd double %154, %164
  %166 = add nuw i64 %143, 2
  %167 = icmp eq i64 %166, %35
  br i1 %167, label %168, label %140

168:                                              ; preds = %131, %140, %106
  %169 = phi double [ %77, %106 ], [ %134, %131 ], [ %165, %140 ]
  %170 = phi double [ %75, %106 ], [ %133, %131 ], [ %163, %140 ]
  %171 = phi double [ %74, %106 ], [ %132, %131 ], [ %161, %140 ]
  %172 = add nuw i64 %76, 1
  %173 = icmp eq i64 %172, %27
  br i1 %173, label %39, label %73

174:                                              ; preds = %3
  %175 = atomicrmw add i32* getelementptr inbounds ({ { i32 } }, { { i32 } }* @_ZZN3jxl6N_AVX216ComputeDistancePERKNS_5PlaneIfEERKNS_17ButteraugliParamsEdE4once, i64 0, i32 0, i32 0), i32 1 monotonic
  %176 = sub nsw i64 %15, %18
  %177 = icmp ult i64 %18, %176
  br i1 %177, label %178, label %182

178:                                              ; preds = %174
  %179 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %180 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %0, i64 0, i32 0, i32 4
  %181 = load i32, i32* %8, align 8
  br label %195

182:                                              ; preds = %215, %174
  %183 = phi double [ 0.000000e+00, %174 ], [ %218, %215 ]
  %184 = phi double [ 0.000000e+00, %174 ], [ %219, %215 ]
  %185 = phi double [ 0.000000e+00, %174 ], [ %220, %215 ]
  %186 = fmul double %22, %185
  %187 = fdiv double 1.000000e+00, %2
  %188 = tail call double @pow(double %186, double %187) #12
  %189 = fadd double %188, 0.000000e+00
  %190 = fmul double %22, %184
  %191 = fmul double %2, 2.000000e+00
  %192 = fdiv double 1.000000e+00, %191
  %193 = tail call double @pow(double %190, double %192) #12
  %194 = fadd double %189, %193
  br label %244

195:                                              ; preds = %178, %215
  %196 = phi i32 [ %14, %178 ], [ %216, %215 ]
  %197 = phi i32 [ %181, %178 ], [ %217, %215 ]
  %198 = phi double [ 0.000000e+00, %178 ], [ %218, %215 ]
  %199 = phi double [ 0.000000e+00, %178 ], [ %219, %215 ]
  %200 = phi double [ 0.000000e+00, %178 ], [ %220, %215 ]
  %201 = phi i64 [ %18, %178 ], [ %221, %215 ]
  %202 = load i8*, i8** %179, align 8
  %203 = load i64, i64* %180, align 8
  %204 = mul i64 %203, %201
  %205 = getelementptr inbounds i8, i8* %202, i64 %204
  %206 = ptrtoint i8* %205 to i64
  %207 = and i64 %206, 63
  %208 = icmp eq i64 %207, 0
  tail call void @llvm.assume(i1 %208) #12
  %209 = bitcast i8* %205 to float*
  %210 = zext i32 %197 to i64
  %211 = sub nsw i64 %210, %18
  %212 = icmp ult i64 %18, %211
  br i1 %212, label %225, label %215

213:                                              ; preds = %225
  %214 = load i32, i32* %19, align 4
  br label %215

215:                                              ; preds = %213, %195
  %216 = phi i32 [ %196, %195 ], [ %214, %213 ]
  %217 = phi i32 [ %197, %195 ], [ %240, %213 ]
  %218 = phi double [ %198, %195 ], [ %238, %213 ]
  %219 = phi double [ %199, %195 ], [ %236, %213 ]
  %220 = phi double [ %200, %195 ], [ %234, %213 ]
  %221 = add nuw i64 %201, 1
  %222 = zext i32 %216 to i64
  %223 = sub nsw i64 %222, %18
  %224 = icmp ult i64 %221, %223
  br i1 %224, label %195, label %182

225:                                              ; preds = %195, %225
  %226 = phi double [ %238, %225 ], [ %198, %195 ]
  %227 = phi double [ %236, %225 ], [ %199, %195 ]
  %228 = phi double [ %234, %225 ], [ %200, %195 ]
  %229 = phi i64 [ %239, %225 ], [ %18, %195 ]
  %230 = getelementptr inbounds float, float* %209, i64 %229
  %231 = load float, float* %230, align 4
  %232 = fpext float %231 to double
  %233 = tail call double @pow(double %232, double %2) #12
  %234 = fadd double %233, %228
  %235 = fmul double %233, %233
  %236 = fadd double %235, %227
  %237 = fmul double %235, %235
  %238 = fadd double %237, %226
  %239 = add nuw i64 %229, 1
  %240 = load i32, i32* %8, align 8
  %241 = zext i32 %240 to i64
  %242 = sub nsw i64 %241, %18
  %243 = icmp ult i64 %239, %242
  br i1 %243, label %225, label %213

244:                                              ; preds = %182, %39
  %245 = phi double [ %183, %182 ], [ %72, %39 ]
  %246 = phi double [ %194, %182 ], [ %66, %39 ]
  %247 = fmul double %22, %245
  %248 = fmul double %2, 4.000000e+00
  %249 = fdiv double 1.000000e+00, %248
  %250 = tail call double @pow(double %247, double %249) #12
  %251 = fadd double %246, %250
  %252 = fdiv double %251, 3.000000e+00
  ret double %252
}

; Function Attrs: nounwind ssp uwtable
define hidden double @_ZN3jxl6N_AVX216ComputeDistance2ERKNS_11ImageBundleES3_(%"class.jxl::ImageBundle"* dereferenceable(368), %"class.jxl::ImageBundle"* dereferenceable(368)) #7 {
  %3 = alloca %"class.jxl::Image3", align 8
  %4 = alloca %"class.jxl::Rect", align 8
  %5 = alloca %"class.jxl::Image3", align 8
  %6 = alloca %"class.jxl::Rect", align 8
  %7 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10
  %8 = bitcast %"class.jxl::Image3"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %8) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %8, i8 0, i64 96, i1 false) #12
  %9 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 7
  %10 = load i8, i8* %9, align 1, !range !2
  %11 = icmp eq i8 %10, 0
  br i1 %11, label %32, label %12

12:                                               ; preds = %2
  %13 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 9
  %14 = load i32, i32* %13, align 8
  %15 = icmp ult i32 %14, 2
  br i1 %15, label %16, label %32

16:                                               ; preds = %12
  %17 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 2
  %18 = load i32, i32* %17, align 4
  %19 = icmp eq i32 %18, 1
  br i1 %19, label %20, label %32

20:                                               ; preds = %16
  %21 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 3
  %22 = load i32, i32* %21, align 8
  %23 = icmp eq i32 %22, 1
  br i1 %23, label %24, label %32

24:                                               ; preds = %20
  %25 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 4, i32 2
  %26 = load i8, i8* %25, align 4, !range !2
  %27 = icmp eq i8 %26, 0
  br i1 %27, label %28, label %32

28:                                               ; preds = %24
  %29 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 4, i32 4
  %30 = load i32, i32* %29, align 4
  %31 = icmp eq i32 %30, 13
  br i1 %31, label %88, label %32

32:                                               ; preds = %2, %12, %16, %20, %24, %28
  %33 = bitcast %"class.jxl::Rect"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %33) #12
  %34 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %35 = load %"struct.jxl::jpeg::JPEGData"*, %"struct.jxl::jpeg::JPEGData"** %34, align 8
  %36 = icmp eq %"struct.jxl::jpeg::JPEGData"* %35, null
  br i1 %36, label %37, label %50

37:                                               ; preds = %32
  %38 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 0, i32 0, i32 0
  %39 = load i32, i32* %38, align 8
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %41, label %57

41:                                               ; preds = %37
  %42 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12, i32 0, i32 0
  %43 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %42, align 8
  %44 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12, i32 0, i32 1
  %45 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %44, align 8
  %46 = icmp eq %"class.jxl::Plane"* %43, %45
  br i1 %46, label %57, label %47

47:                                               ; preds = %41
  %48 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %43, i64 0, i32 0, i32 0
  %49 = load i32, i32* %48, align 8
  br label %57

50:                                               ; preds = %32
  %51 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %35, i64 0, i32 1
  %52 = load i32, i32* %51, align 8
  %53 = sext i32 %52 to i64
  %54 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %35, i64 0, i32 2
  %55 = load i32, i32* %54, align 4
  %56 = sext i32 %55 to i64
  br label %74

57:                                               ; preds = %47, %41, %37
  %58 = phi i32 [ %39, %37 ], [ 0, %41 ], [ %49, %47 ]
  %59 = zext i32 %58 to i64
  %60 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 0, i32 0, i32 1
  %61 = load i32, i32* %60, align 4
  %62 = zext i32 %61 to i64
  %63 = icmp eq i32 %61, 0
  br i1 %63, label %64, label %74

64:                                               ; preds = %57
  %65 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12, i32 0, i32 0
  %66 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %65, align 8
  %67 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12, i32 0, i32 1
  %68 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %67, align 8
  %69 = icmp eq %"class.jxl::Plane"* %66, %68
  br i1 %69, label %74, label %70

70:                                               ; preds = %64
  %71 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %66, i64 0, i32 0, i32 1
  %72 = load i32, i32* %71, align 4
  %73 = zext i32 %72 to i64
  br label %74

74:                                               ; preds = %50, %57, %64, %70
  %75 = phi i64 [ %53, %50 ], [ %59, %70 ], [ %59, %64 ], [ %59, %57 ]
  %76 = phi i64 [ %56, %50 ], [ %73, %70 ], [ 0, %64 ], [ %62, %57 ]
  %77 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %4, i64 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %33, i8 0, i64 16, i1 false) #12
  store i64 %75, i64* %77, align 8
  %78 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %4, i64 0, i32 3
  store i64 %76, i64* %78, align 8
  %79 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 9
  %80 = load i32, i32* %79, align 8
  %81 = icmp eq i32 %80, 1
  %82 = tail call dereferenceable(152) %"struct.jxl::ColorEncoding"* @_ZN3jxl13ColorEncoding4SRGBEb(i1 zeroext %81) #12
  %83 = call i32 @_ZNK3jxl11ImageBundle6CopyToERKNS_4RectERKNS_13ColorEncodingEPNS_6Image3IfEEPNS_10ThreadPoolE(%"class.jxl::ImageBundle"* %0, %"class.jxl::Rect"* nonnull dereferenceable(32) %4, %"struct.jxl::ColorEncoding"* dereferenceable(152) %82, %"class.jxl::Image3"* nonnull %3, %"class.jxl::ThreadPool"* null) #12
  %84 = icmp eq i32 %83, 0
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %33) #12
  br i1 %84, label %88, label %85

85:                                               ; preds = %74
  %86 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.1, i64 0, i64 0), i32 150, i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.2, i64 0, i64 0)) #12
  %87 = call zeroext i1 @_ZN3jxl5AbortEv() #13
  unreachable

88:                                               ; preds = %74, %28
  %89 = phi %"class.jxl::Image3"* [ %7, %28 ], [ %3, %74 ]
  %90 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 10
  %91 = bitcast %"class.jxl::Image3"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %91) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %91, i8 0, i64 96, i1 false) #12
  %92 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 7
  %93 = load i8, i8* %92, align 1, !range !2
  %94 = icmp eq i8 %93, 0
  br i1 %94, label %115, label %95

95:                                               ; preds = %88
  %96 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 9
  %97 = load i32, i32* %96, align 8
  %98 = icmp ult i32 %97, 2
  br i1 %98, label %99, label %115

99:                                               ; preds = %95
  %100 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 2
  %101 = load i32, i32* %100, align 4
  %102 = icmp eq i32 %101, 1
  br i1 %102, label %103, label %115

103:                                              ; preds = %99
  %104 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 3
  %105 = load i32, i32* %104, align 8
  %106 = icmp eq i32 %105, 1
  br i1 %106, label %107, label %115

107:                                              ; preds = %103
  %108 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 4, i32 2
  %109 = load i8, i8* %108, align 4, !range !2
  %110 = icmp eq i8 %109, 0
  br i1 %110, label %111, label %115

111:                                              ; preds = %107
  %112 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 4, i32 4
  %113 = load i32, i32* %112, align 4
  %114 = icmp eq i32 %113, 13
  br i1 %114, label %171, label %115

115:                                              ; preds = %88, %95, %99, %103, %107, %111
  %116 = bitcast %"class.jxl::Rect"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %116) #12
  %117 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %118 = load %"struct.jxl::jpeg::JPEGData"*, %"struct.jxl::jpeg::JPEGData"** %117, align 8
  %119 = icmp eq %"struct.jxl::jpeg::JPEGData"* %118, null
  br i1 %119, label %120, label %133

120:                                              ; preds = %115
  %121 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 10, i32 0, i64 0, i32 0, i32 0
  %122 = load i32, i32* %121, align 8
  %123 = icmp eq i32 %122, 0
  br i1 %123, label %124, label %140

124:                                              ; preds = %120
  %125 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 12, i32 0, i32 0
  %126 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %125, align 8
  %127 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 12, i32 0, i32 1
  %128 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %127, align 8
  %129 = icmp eq %"class.jxl::Plane"* %126, %128
  br i1 %129, label %140, label %130

130:                                              ; preds = %124
  %131 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %126, i64 0, i32 0, i32 0
  %132 = load i32, i32* %131, align 8
  br label %140

133:                                              ; preds = %115
  %134 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %118, i64 0, i32 1
  %135 = load i32, i32* %134, align 8
  %136 = sext i32 %135 to i64
  %137 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %118, i64 0, i32 2
  %138 = load i32, i32* %137, align 4
  %139 = sext i32 %138 to i64
  br label %157

140:                                              ; preds = %130, %124, %120
  %141 = phi i32 [ %122, %120 ], [ 0, %124 ], [ %132, %130 ]
  %142 = zext i32 %141 to i64
  %143 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 10, i32 0, i64 0, i32 0, i32 1
  %144 = load i32, i32* %143, align 4
  %145 = zext i32 %144 to i64
  %146 = icmp eq i32 %144, 0
  br i1 %146, label %147, label %157

147:                                              ; preds = %140
  %148 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 12, i32 0, i32 0
  %149 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %148, align 8
  %150 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 12, i32 0, i32 1
  %151 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %150, align 8
  %152 = icmp eq %"class.jxl::Plane"* %149, %151
  br i1 %152, label %157, label %153

153:                                              ; preds = %147
  %154 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %149, i64 0, i32 0, i32 1
  %155 = load i32, i32* %154, align 4
  %156 = zext i32 %155 to i64
  br label %157

157:                                              ; preds = %133, %140, %147, %153
  %158 = phi i64 [ %136, %133 ], [ %142, %153 ], [ %142, %147 ], [ %142, %140 ]
  %159 = phi i64 [ %139, %133 ], [ %156, %153 ], [ 0, %147 ], [ %145, %140 ]
  %160 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %6, i64 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %116, i8 0, i64 16, i1 false) #12
  store i64 %158, i64* %160, align 8
  %161 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %6, i64 0, i32 3
  store i64 %159, i64* %161, align 8
  %162 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 9
  %163 = load i32, i32* %162, align 8
  %164 = icmp eq i32 %163, 1
  %165 = call dereferenceable(152) %"struct.jxl::ColorEncoding"* @_ZN3jxl13ColorEncoding4SRGBEb(i1 zeroext %164) #12
  %166 = call i32 @_ZNK3jxl11ImageBundle6CopyToERKNS_4RectERKNS_13ColorEncodingEPNS_6Image3IfEEPNS_10ThreadPoolE(%"class.jxl::ImageBundle"* %1, %"class.jxl::Rect"* nonnull dereferenceable(32) %6, %"struct.jxl::ColorEncoding"* dereferenceable(152) %165, %"class.jxl::Image3"* nonnull %5, %"class.jxl::ThreadPool"* null) #12
  %167 = icmp eq i32 %166, 0
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %116) #12
  br i1 %167, label %171, label %168

168:                                              ; preds = %157
  %169 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.1, i64 0, i64 0), i32 156, i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.3, i64 0, i64 0)) #12
  %170 = call zeroext i1 @_ZN3jxl5AbortEv() #13
  unreachable

171:                                              ; preds = %157, %111
  %172 = phi %"class.jxl::Image3"* [ %90, %111 ], [ %5, %157 ]
  %173 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %89, i64 0, i32 0, i64 0, i32 0, i32 0
  %174 = load i32, i32* %173, align 8
  %175 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %172, i64 0, i32 0, i64 0, i32 0, i32 0
  %176 = load i32, i32* %175, align 8
  %177 = icmp eq i32 %174, %176
  br i1 %177, label %178, label %184

178:                                              ; preds = %171
  %179 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %89, i64 0, i32 0, i64 0, i32 0, i32 1
  %180 = load i32, i32* %179, align 4
  %181 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %172, i64 0, i32 0, i64 0, i32 0, i32 1
  %182 = load i32, i32* %181, align 4
  %183 = icmp eq i32 %180, %182
  br i1 %183, label %187, label %184

184:                                              ; preds = %171, %178
  %185 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.1, i64 0, i64 0), i32 160, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.4, i64 0, i64 0)) #12
  %186 = call zeroext i1 @_ZN3jxl5AbortEv() #13
  unreachable

187:                                              ; preds = %178
  %188 = icmp eq i32 %180, 0
  br i1 %188, label %227, label %189

189:                                              ; preds = %187
  %190 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %89, i64 0, i32 0, i64 0, i32 0, i32 4
  %191 = load i64, i64* %190, align 8
  %192 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %172, i64 0, i32 0, i64 0, i32 0, i32 4
  %193 = load i64, i64* %192, align 8
  %194 = zext i32 %174 to i64
  %195 = icmp eq i32 %174, 0
  %196 = zext i32 %180 to i64
  %197 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %89, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %198 = load i8*, i8** %197, align 8
  %199 = ptrtoint i8* %198 to i64
  %200 = and i64 %199, 63
  %201 = icmp eq i64 %200, 0
  call void @llvm.assume(i1 %201) #12
  %202 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %172, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %203 = load i8*, i8** %202, align 8
  %204 = ptrtoint i8* %203 to i64
  %205 = and i64 %204, 63
  %206 = icmp eq i64 %205, 0
  call void @llvm.assume(i1 %206) #12
  %207 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %89, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %208 = load i8*, i8** %207, align 8
  %209 = ptrtoint i8* %208 to i64
  %210 = and i64 %209, 63
  %211 = icmp eq i64 %210, 0
  call void @llvm.assume(i1 %211) #12
  %212 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %172, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %213 = load i8*, i8** %212, align 8
  %214 = ptrtoint i8* %213 to i64
  %215 = and i64 %214, 63
  %216 = icmp eq i64 %215, 0
  call void @llvm.assume(i1 %216) #12
  %217 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %89, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %218 = load i8*, i8** %217, align 8
  %219 = ptrtoint i8* %218 to i64
  %220 = and i64 %219, 63
  %221 = icmp eq i64 %220, 0
  call void @llvm.assume(i1 %221) #12
  %222 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %172, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %223 = load i8*, i8** %222, align 8
  %224 = ptrtoint i8* %223 to i64
  %225 = and i64 %224, 63
  %226 = icmp eq i64 %225, 0
  call void @llvm.assume(i1 %226) #12
  br label %244

227:                                              ; preds = %281, %187
  %228 = phi double [ 0.000000e+00, %187 ], [ %282, %281 ]
  %229 = phi double [ 0.000000e+00, %187 ], [ %283, %281 ]
  %230 = phi double [ 0.000000e+00, %187 ], [ %284, %281 ]
  %231 = call double @sqrt(double %230) #12
  %232 = fmul double %231, 7.500000e-01
  %233 = fadd double %232, 0.000000e+00
  %234 = call double @sqrt(double %229) #12
  %235 = fmul double %234, 1.250000e-01
  %236 = fadd double %233, %235
  %237 = call double @sqrt(double %228) #12
  %238 = fmul double %237, 1.250000e-01
  %239 = fadd double %236, %238
  %240 = fmul double %239, %239
  %241 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %242 = load i8*, i8** %241, align 8
  store i8* null, i8** %241, align 8
  %243 = icmp eq i8* %242, null
  br i1 %243, label %337, label %336

244:                                              ; preds = %189, %281
  %245 = phi double [ 0.000000e+00, %189 ], [ %282, %281 ]
  %246 = phi double [ 0.000000e+00, %189 ], [ %283, %281 ]
  %247 = phi double [ 0.000000e+00, %189 ], [ %284, %281 ]
  %248 = phi i64 [ 0, %189 ], [ %285, %281 ]
  %249 = mul i64 %191, %248
  %250 = mul i64 %193, %248
  %251 = getelementptr inbounds i8, i8* %198, i64 %249
  %252 = ptrtoint i8* %251 to i64
  %253 = and i64 %252, 63
  %254 = icmp eq i64 %253, 0
  call void @llvm.assume(i1 %254) #12
  %255 = getelementptr inbounds i8, i8* %203, i64 %250
  %256 = ptrtoint i8* %255 to i64
  %257 = and i64 %256, 63
  %258 = icmp eq i64 %257, 0
  call void @llvm.assume(i1 %258) #12
  %259 = getelementptr inbounds i8, i8* %208, i64 %249
  %260 = ptrtoint i8* %259 to i64
  %261 = and i64 %260, 63
  %262 = icmp eq i64 %261, 0
  call void @llvm.assume(i1 %262) #12
  %263 = getelementptr inbounds i8, i8* %213, i64 %250
  %264 = ptrtoint i8* %263 to i64
  %265 = and i64 %264, 63
  %266 = icmp eq i64 %265, 0
  call void @llvm.assume(i1 %266) #12
  %267 = getelementptr inbounds i8, i8* %218, i64 %249
  %268 = ptrtoint i8* %267 to i64
  %269 = and i64 %268, 63
  %270 = icmp eq i64 %269, 0
  call void @llvm.assume(i1 %270) #12
  %271 = getelementptr inbounds i8, i8* %223, i64 %250
  %272 = ptrtoint i8* %271 to i64
  %273 = and i64 %272, 63
  %274 = icmp eq i64 %273, 0
  call void @llvm.assume(i1 %274) #12
  %275 = bitcast i8* %251 to float*
  %276 = bitcast i8* %255 to float*
  %277 = bitcast i8* %259 to float*
  %278 = bitcast i8* %263 to float*
  %279 = bitcast i8* %267 to float*
  %280 = bitcast i8* %271 to float*
  br i1 %195, label %281, label %287

281:                                              ; preds = %287, %244
  %282 = phi double [ %245, %244 ], [ %333, %287 ]
  %283 = phi double [ %246, %244 ], [ %330, %287 ]
  %284 = phi double [ %247, %244 ], [ %327, %287 ]
  %285 = add nuw nsw i64 %248, 1
  %286 = icmp ult i64 %285, %196
  br i1 %286, label %244, label %227

287:                                              ; preds = %244, %287
  %288 = phi double [ %333, %287 ], [ %245, %244 ]
  %289 = phi double [ %330, %287 ], [ %246, %244 ]
  %290 = phi double [ %327, %287 ], [ %247, %244 ]
  %291 = phi i64 [ %334, %287 ], [ 0, %244 ]
  %292 = getelementptr inbounds float, float* %275, i64 %291
  %293 = load float, float* %292, align 4
  %294 = getelementptr inbounds float, float* %276, i64 %291
  %295 = load float, float* %294, align 4
  %296 = fsub float %293, %295
  %297 = getelementptr inbounds float, float* %277, i64 %291
  %298 = load float, float* %297, align 4
  %299 = getelementptr inbounds float, float* %278, i64 %291
  %300 = load float, float* %299, align 4
  %301 = fsub float %298, %300
  %302 = getelementptr inbounds float, float* %279, i64 %291
  %303 = load float, float* %302, align 4
  %304 = getelementptr inbounds float, float* %280, i64 %291
  %305 = load float, float* %304, align 4
  %306 = fsub float %303, %305
  %307 = fmul float %296, 0x3FD322D0E0000000
  %308 = fadd float %307, 0.000000e+00
  %309 = fmul float %301, 0x3FE2C8B440000000
  %310 = fadd float %308, %309
  %311 = fmul float %306, 0x3FBD2F1AA0000000
  %312 = fadd float %310, %311
  %313 = fmul float %296, 0xBFC2D527E0000000
  %314 = fadd float %313, 0.000000e+00
  %315 = fmul float %301, 0xBFD27CAEA0000000
  %316 = fadd float %314, %315
  %317 = fmul float %306, 0x3FDBE76C80000000
  %318 = fadd float %316, %317
  %319 = fmul float %296, 0x3FE3AE1480000000
  %320 = fadd float %319, 0.000000e+00
  %321 = fmul float %301, 0xBFE07ACC40000000
  %322 = fadd float %320, %321
  %323 = fmul float %306, 0xBFB99A4160000000
  %324 = fadd float %322, %323
  %325 = fmul float %312, %312
  %326 = fpext float %325 to double
  %327 = fadd double %290, %326
  %328 = fmul float %318, %318
  %329 = fpext float %328 to double
  %330 = fadd double %289, %329
  %331 = fmul float %324, %324
  %332 = fpext float %331 to double
  %333 = fadd double %288, %332
  %334 = add nuw nsw i64 %291, 1
  %335 = icmp eq i64 %334, %194
  br i1 %335, label %281, label %287

336:                                              ; preds = %227
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %242) #12
  br label %337

337:                                              ; preds = %336, %227
  %338 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %339 = load i8*, i8** %338, align 8
  store i8* null, i8** %338, align 8
  %340 = icmp eq i8* %339, null
  br i1 %340, label %342, label %341

341:                                              ; preds = %337
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %339) #12
  br label %342

342:                                              ; preds = %341, %337
  %343 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %344 = load i8*, i8** %343, align 8
  store i8* null, i8** %343, align 8
  %345 = icmp eq i8* %344, null
  br i1 %345, label %347, label %346

346:                                              ; preds = %342
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %344) #12
  br label %347

347:                                              ; preds = %342, %346
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %91) #12
  %348 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %349 = load i8*, i8** %348, align 8
  store i8* null, i8** %348, align 8
  %350 = icmp eq i8* %349, null
  br i1 %350, label %352, label %351

351:                                              ; preds = %347
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %349) #12
  br label %352

352:                                              ; preds = %351, %347
  %353 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %354 = load i8*, i8** %353, align 8
  store i8* null, i8** %353, align 8
  %355 = icmp eq i8* %354, null
  br i1 %355, label %357, label %356

356:                                              ; preds = %352
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %354) #12
  br label %357

357:                                              ; preds = %356, %352
  %358 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %359 = load i8*, i8** %358, align 8
  store i8* null, i8** %358, align 8
  %360 = icmp eq i8* %359, null
  br i1 %360, label %362, label %361

361:                                              ; preds = %357
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %359) #12
  br label %362

362:                                              ; preds = %357, %361
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %8) #12
  ret double %240
}

; Function Attrs: nounwind ssp uwtable
define hidden double @_ZN3jxl6N_AVX316ComputeDistancePERKNS_5PlaneIfEERKNS_17ButteraugliParamsEd(%"class.jxl::Plane"* nocapture readonly dereferenceable(32), %"struct.jxl::ButteraugliParams"* nocapture readonly dereferenceable(16), double) #8 {
  %4 = getelementptr inbounds %"struct.jxl::ButteraugliParams", %"struct.jxl::ButteraugliParams"* %1, i64 0, i32 3
  %5 = load i8, i8* %4, align 4, !range !2
  %6 = icmp eq i8 %5, 0
  %7 = select i1 %6, i64 0, i64 8
  %8 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %0, i64 0, i32 0, i32 0
  %9 = load i32, i32* %8, align 8
  %10 = zext i32 %9 to i64
  %11 = shl nuw nsw i64 %7, 1
  %12 = icmp ult i64 %11, %10
  %13 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %0, i64 0, i32 0, i32 1
  %14 = load i32, i32* %13, align 4
  %15 = zext i32 %14 to i64
  %16 = icmp ult i64 %11, %15
  %17 = and i1 %12, %16
  %18 = select i1 %17, i64 %7, i64 0
  %19 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %0, i64 0, i32 0, i32 1
  %20 = mul nuw i64 %15, %10
  %21 = uitofp i64 %20 to double
  %22 = fdiv double 1.000000e+00, %21
  %23 = fadd double %2, -3.000000e+00
  %24 = tail call double @llvm.fabs.f64(double %23) #12
  %25 = fcmp olt double %24, 0x3EB0C6F7A0B5ED8D
  br i1 %25, label %26, label %186

26:                                               ; preds = %3
  %27 = sub nsw i64 %15, %18
  %28 = icmp ult i64 %18, %27
  br i1 %28, label %29, label %39

29:                                               ; preds = %26
  %30 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %31 = load i8*, i8** %30, align 8
  %32 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %0, i64 0, i32 0, i32 4
  %33 = load i64, i64* %32, align 8
  %34 = add nuw nsw i64 %18, 8
  %35 = sub nsw i64 %10, %18
  %36 = icmp ugt i64 %34, %35
  %37 = xor i64 %18, -1
  %38 = add nsw i64 %37, %10
  br label %85

39:                                               ; preds = %180, %26
  %40 = phi <8 x double> [ zeroinitializer, %26 ], [ %125, %180 ]
  %41 = phi <8 x double> [ zeroinitializer, %26 ], [ %124, %180 ]
  %42 = phi <8 x double> [ zeroinitializer, %26 ], [ %123, %180 ]
  %43 = phi double [ 0.000000e+00, %26 ], [ %181, %180 ]
  %44 = phi double [ 0.000000e+00, %26 ], [ %182, %180 ]
  %45 = phi double [ 0.000000e+00, %26 ], [ %183, %180 ]
  %46 = shufflevector <8 x double> %42, <8 x double> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %47 = shufflevector <8 x double> %42, <8 x double> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %48 = fadd <4 x double> %46, %47
  %49 = shufflevector <4 x double> %48, <4 x double> undef, <2 x i32> <i32 0, i32 1>
  %50 = shufflevector <4 x double> %48, <4 x double> undef, <2 x i32> <i32 2, i32 3>
  %51 = fadd <2 x double> %49, %50
  %52 = shufflevector <2 x double> %51, <2 x double> undef, <2 x i32> <i32 1, i32 undef>
  %53 = fadd <2 x double> %51, %52
  %54 = extractelement <2 x double> %53, i32 0
  %55 = fadd double %45, %54
  %56 = fmul double %22, %55
  %57 = fdiv double 1.000000e+00, %2
  %58 = tail call double @pow(double %56, double %57) #12
  %59 = fadd double %58, 0.000000e+00
  %60 = shufflevector <8 x double> %41, <8 x double> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %61 = shufflevector <8 x double> %41, <8 x double> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %62 = fadd <4 x double> %60, %61
  %63 = shufflevector <4 x double> %62, <4 x double> undef, <2 x i32> <i32 0, i32 1>
  %64 = shufflevector <4 x double> %62, <4 x double> undef, <2 x i32> <i32 2, i32 3>
  %65 = fadd <2 x double> %63, %64
  %66 = shufflevector <2 x double> %65, <2 x double> undef, <2 x i32> <i32 1, i32 undef>
  %67 = fadd <2 x double> %65, %66
  %68 = extractelement <2 x double> %67, i32 0
  %69 = fadd double %44, %68
  %70 = fmul double %22, %69
  %71 = fmul double %2, 2.000000e+00
  %72 = fdiv double 1.000000e+00, %71
  %73 = tail call double @pow(double %70, double %72) #12
  %74 = fadd double %59, %73
  %75 = shufflevector <8 x double> %40, <8 x double> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %76 = shufflevector <8 x double> %40, <8 x double> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %77 = fadd <4 x double> %75, %76
  %78 = shufflevector <4 x double> %77, <4 x double> undef, <2 x i32> <i32 0, i32 1>
  %79 = shufflevector <4 x double> %77, <4 x double> undef, <2 x i32> <i32 2, i32 3>
  %80 = fadd <2 x double> %78, %79
  %81 = shufflevector <2 x double> %80, <2 x double> undef, <2 x i32> <i32 1, i32 undef>
  %82 = fadd <2 x double> %80, %81
  %83 = extractelement <2 x double> %82, i32 0
  %84 = fadd double %43, %83
  br label %256

85:                                               ; preds = %180, %29
  %86 = phi double [ 0.000000e+00, %29 ], [ %183, %180 ]
  %87 = phi i64 [ %18, %29 ], [ %184, %180 ]
  %88 = phi double [ 0.000000e+00, %29 ], [ %182, %180 ]
  %89 = phi double [ 0.000000e+00, %29 ], [ %181, %180 ]
  %90 = phi <8 x double> [ zeroinitializer, %29 ], [ %123, %180 ]
  %91 = phi <8 x double> [ zeroinitializer, %29 ], [ %124, %180 ]
  %92 = phi <8 x double> [ zeroinitializer, %29 ], [ %125, %180 ]
  %93 = mul i64 %33, %87
  %94 = getelementptr inbounds i8, i8* %31, i64 %93
  %95 = ptrtoint i8* %94 to i64
  %96 = and i64 %95, 63
  %97 = icmp eq i64 %96, 0
  tail call void @llvm.assume(i1 %97) #12
  %98 = bitcast i8* %94 to float*
  br i1 %36, label %118, label %99

99:                                               ; preds = %85, %99
  %100 = phi i64 [ %116, %99 ], [ %34, %85 ]
  %101 = phi i64 [ %100, %99 ], [ %18, %85 ]
  %102 = phi <8 x double> [ %111, %99 ], [ zeroinitializer, %85 ]
  %103 = phi <8 x double> [ %113, %99 ], [ zeroinitializer, %85 ]
  %104 = phi <8 x double> [ %115, %99 ], [ zeroinitializer, %85 ]
  %105 = getelementptr inbounds float, float* %98, i64 %101
  %106 = bitcast float* %105 to <8 x float>*
  %107 = load <8 x float>, <8 x float>* %106, align 32, !alias.scope !9, !noalias !12
  %108 = fpext <8 x float> %107 to <8 x double>
  %109 = fmul <8 x double> %108, %108
  %110 = fmul <8 x double> %109, %108
  %111 = fadd <8 x double> %102, %110
  %112 = fmul <8 x double> %110, %110
  %113 = fadd <8 x double> %103, %112
  %114 = fmul <8 x double> %112, %112
  %115 = fadd <8 x double> %104, %114
  %116 = add i64 %100, 8
  %117 = icmp ugt i64 %116, %35
  br i1 %117, label %118, label %99

118:                                              ; preds = %99, %85
  %119 = phi <8 x double> [ zeroinitializer, %85 ], [ %115, %99 ]
  %120 = phi <8 x double> [ zeroinitializer, %85 ], [ %113, %99 ]
  %121 = phi <8 x double> [ zeroinitializer, %85 ], [ %111, %99 ]
  %122 = phi i64 [ %18, %85 ], [ %100, %99 ]
  %123 = fadd <8 x double> %90, %121
  %124 = fadd <8 x double> %91, %120
  %125 = fadd <8 x double> %92, %119
  %126 = icmp ult i64 %122, %35
  br i1 %126, label %127, label %180

127:                                              ; preds = %118
  %128 = sub i64 %10, %122
  %129 = and i64 %128, 1
  %130 = icmp eq i64 %129, 0
  br i1 %130, label %143, label %131

131:                                              ; preds = %127
  %132 = getelementptr inbounds float, float* %98, i64 %122
  %133 = load float, float* %132, align 4
  %134 = fpext float %133 to double
  %135 = fmul double %134, %134
  %136 = fmul double %135, %134
  %137 = fadd double %86, %136
  %138 = fmul double %136, %136
  %139 = fadd double %88, %138
  %140 = fmul double %138, %138
  %141 = fadd double %89, %140
  %142 = add nuw i64 %122, 1
  br label %143

143:                                              ; preds = %131, %127
  %144 = phi double [ %137, %131 ], [ undef, %127 ]
  %145 = phi double [ %139, %131 ], [ undef, %127 ]
  %146 = phi double [ %141, %131 ], [ undef, %127 ]
  %147 = phi double [ %137, %131 ], [ %86, %127 ]
  %148 = phi i64 [ %142, %131 ], [ %122, %127 ]
  %149 = phi double [ %139, %131 ], [ %88, %127 ]
  %150 = phi double [ %141, %131 ], [ %89, %127 ]
  %151 = icmp eq i64 %38, %122
  br i1 %151, label %180, label %152

152:                                              ; preds = %143, %152
  %153 = phi double [ %173, %152 ], [ %147, %143 ]
  %154 = phi i64 [ %178, %152 ], [ %148, %143 ]
  %155 = phi double [ %175, %152 ], [ %149, %143 ]
  %156 = phi double [ %177, %152 ], [ %150, %143 ]
  %157 = getelementptr inbounds float, float* %98, i64 %154
  %158 = load float, float* %157, align 4
  %159 = fpext float %158 to double
  %160 = fmul double %159, %159
  %161 = fmul double %160, %159
  %162 = fadd double %153, %161
  %163 = fmul double %161, %161
  %164 = fadd double %155, %163
  %165 = fmul double %163, %163
  %166 = fadd double %156, %165
  %167 = add nuw i64 %154, 1
  %168 = getelementptr inbounds float, float* %98, i64 %167
  %169 = load float, float* %168, align 4
  %170 = fpext float %169 to double
  %171 = fmul double %170, %170
  %172 = fmul double %171, %170
  %173 = fadd double %162, %172
  %174 = fmul double %172, %172
  %175 = fadd double %164, %174
  %176 = fmul double %174, %174
  %177 = fadd double %166, %176
  %178 = add nuw i64 %154, 2
  %179 = icmp eq i64 %178, %35
  br i1 %179, label %180, label %152

180:                                              ; preds = %143, %152, %118
  %181 = phi double [ %89, %118 ], [ %146, %143 ], [ %177, %152 ]
  %182 = phi double [ %88, %118 ], [ %145, %143 ], [ %175, %152 ]
  %183 = phi double [ %86, %118 ], [ %144, %143 ], [ %173, %152 ]
  %184 = add nuw i64 %87, 1
  %185 = icmp eq i64 %184, %27
  br i1 %185, label %39, label %85

186:                                              ; preds = %3
  %187 = atomicrmw add i32* getelementptr inbounds ({ { i32 } }, { { i32 } }* @_ZZN3jxl6N_AVX316ComputeDistancePERKNS_5PlaneIfEERKNS_17ButteraugliParamsEdE4once, i64 0, i32 0, i32 0), i32 1 monotonic
  %188 = sub nsw i64 %15, %18
  %189 = icmp ult i64 %18, %188
  br i1 %189, label %190, label %194

190:                                              ; preds = %186
  %191 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %192 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %0, i64 0, i32 0, i32 4
  %193 = load i32, i32* %8, align 8
  br label %207

194:                                              ; preds = %227, %186
  %195 = phi double [ 0.000000e+00, %186 ], [ %230, %227 ]
  %196 = phi double [ 0.000000e+00, %186 ], [ %231, %227 ]
  %197 = phi double [ 0.000000e+00, %186 ], [ %232, %227 ]
  %198 = fmul double %22, %197
  %199 = fdiv double 1.000000e+00, %2
  %200 = tail call double @pow(double %198, double %199) #12
  %201 = fadd double %200, 0.000000e+00
  %202 = fmul double %22, %196
  %203 = fmul double %2, 2.000000e+00
  %204 = fdiv double 1.000000e+00, %203
  %205 = tail call double @pow(double %202, double %204) #12
  %206 = fadd double %201, %205
  br label %256

207:                                              ; preds = %190, %227
  %208 = phi i32 [ %14, %190 ], [ %228, %227 ]
  %209 = phi i32 [ %193, %190 ], [ %229, %227 ]
  %210 = phi double [ 0.000000e+00, %190 ], [ %230, %227 ]
  %211 = phi double [ 0.000000e+00, %190 ], [ %231, %227 ]
  %212 = phi double [ 0.000000e+00, %190 ], [ %232, %227 ]
  %213 = phi i64 [ %18, %190 ], [ %233, %227 ]
  %214 = load i8*, i8** %191, align 8
  %215 = load i64, i64* %192, align 8
  %216 = mul i64 %215, %213
  %217 = getelementptr inbounds i8, i8* %214, i64 %216
  %218 = ptrtoint i8* %217 to i64
  %219 = and i64 %218, 63
  %220 = icmp eq i64 %219, 0
  tail call void @llvm.assume(i1 %220) #12
  %221 = bitcast i8* %217 to float*
  %222 = zext i32 %209 to i64
  %223 = sub nsw i64 %222, %18
  %224 = icmp ult i64 %18, %223
  br i1 %224, label %237, label %227

225:                                              ; preds = %237
  %226 = load i32, i32* %19, align 4
  br label %227

227:                                              ; preds = %225, %207
  %228 = phi i32 [ %208, %207 ], [ %226, %225 ]
  %229 = phi i32 [ %209, %207 ], [ %252, %225 ]
  %230 = phi double [ %210, %207 ], [ %250, %225 ]
  %231 = phi double [ %211, %207 ], [ %248, %225 ]
  %232 = phi double [ %212, %207 ], [ %246, %225 ]
  %233 = add nuw i64 %213, 1
  %234 = zext i32 %228 to i64
  %235 = sub nsw i64 %234, %18
  %236 = icmp ult i64 %233, %235
  br i1 %236, label %207, label %194

237:                                              ; preds = %207, %237
  %238 = phi double [ %250, %237 ], [ %210, %207 ]
  %239 = phi double [ %248, %237 ], [ %211, %207 ]
  %240 = phi double [ %246, %237 ], [ %212, %207 ]
  %241 = phi i64 [ %251, %237 ], [ %18, %207 ]
  %242 = getelementptr inbounds float, float* %221, i64 %241
  %243 = load float, float* %242, align 4
  %244 = fpext float %243 to double
  %245 = tail call double @pow(double %244, double %2) #12
  %246 = fadd double %245, %240
  %247 = fmul double %245, %245
  %248 = fadd double %247, %239
  %249 = fmul double %247, %247
  %250 = fadd double %249, %238
  %251 = add nuw i64 %241, 1
  %252 = load i32, i32* %8, align 8
  %253 = zext i32 %252 to i64
  %254 = sub nsw i64 %253, %18
  %255 = icmp ult i64 %251, %254
  br i1 %255, label %237, label %225

256:                                              ; preds = %194, %39
  %257 = phi double [ %195, %194 ], [ %84, %39 ]
  %258 = phi double [ %206, %194 ], [ %74, %39 ]
  %259 = fmul double %22, %257
  %260 = fmul double %2, 4.000000e+00
  %261 = fdiv double 1.000000e+00, %260
  %262 = tail call double @pow(double %259, double %261) #12
  %263 = fadd double %258, %262
  %264 = fdiv double %263, 3.000000e+00
  ret double %264
}

; Function Attrs: nounwind ssp uwtable
define hidden double @_ZN3jxl6N_AVX316ComputeDistance2ERKNS_11ImageBundleES3_(%"class.jxl::ImageBundle"* dereferenceable(368), %"class.jxl::ImageBundle"* dereferenceable(368)) #9 {
  %3 = alloca %"class.jxl::Image3", align 8
  %4 = alloca %"class.jxl::Rect", align 8
  %5 = alloca %"class.jxl::Image3", align 8
  %6 = alloca %"class.jxl::Rect", align 8
  %7 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10
  %8 = bitcast %"class.jxl::Image3"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %8) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %8, i8 0, i64 96, i1 false) #12
  %9 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 7
  %10 = load i8, i8* %9, align 1, !range !2
  %11 = icmp eq i8 %10, 0
  br i1 %11, label %32, label %12

12:                                               ; preds = %2
  %13 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 9
  %14 = load i32, i32* %13, align 8
  %15 = icmp ult i32 %14, 2
  br i1 %15, label %16, label %32

16:                                               ; preds = %12
  %17 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 2
  %18 = load i32, i32* %17, align 4
  %19 = icmp eq i32 %18, 1
  br i1 %19, label %20, label %32

20:                                               ; preds = %16
  %21 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 3
  %22 = load i32, i32* %21, align 8
  %23 = icmp eq i32 %22, 1
  br i1 %23, label %24, label %32

24:                                               ; preds = %20
  %25 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 4, i32 2
  %26 = load i8, i8* %25, align 4, !range !2
  %27 = icmp eq i8 %26, 0
  br i1 %27, label %28, label %32

28:                                               ; preds = %24
  %29 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 4, i32 4
  %30 = load i32, i32* %29, align 4
  %31 = icmp eq i32 %30, 13
  br i1 %31, label %88, label %32

32:                                               ; preds = %2, %12, %16, %20, %24, %28
  %33 = bitcast %"class.jxl::Rect"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %33) #12
  %34 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %35 = load %"struct.jxl::jpeg::JPEGData"*, %"struct.jxl::jpeg::JPEGData"** %34, align 8
  %36 = icmp eq %"struct.jxl::jpeg::JPEGData"* %35, null
  br i1 %36, label %37, label %50

37:                                               ; preds = %32
  %38 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 0, i32 0, i32 0
  %39 = load i32, i32* %38, align 8
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %41, label %57

41:                                               ; preds = %37
  %42 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12, i32 0, i32 0
  %43 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %42, align 8
  %44 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12, i32 0, i32 1
  %45 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %44, align 8
  %46 = icmp eq %"class.jxl::Plane"* %43, %45
  br i1 %46, label %57, label %47

47:                                               ; preds = %41
  %48 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %43, i64 0, i32 0, i32 0
  %49 = load i32, i32* %48, align 8
  br label %57

50:                                               ; preds = %32
  %51 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %35, i64 0, i32 1
  %52 = load i32, i32* %51, align 8
  %53 = sext i32 %52 to i64
  %54 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %35, i64 0, i32 2
  %55 = load i32, i32* %54, align 4
  %56 = sext i32 %55 to i64
  br label %74

57:                                               ; preds = %47, %41, %37
  %58 = phi i32 [ %39, %37 ], [ 0, %41 ], [ %49, %47 ]
  %59 = zext i32 %58 to i64
  %60 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 0, i32 0, i32 1
  %61 = load i32, i32* %60, align 4
  %62 = zext i32 %61 to i64
  %63 = icmp eq i32 %61, 0
  br i1 %63, label %64, label %74

64:                                               ; preds = %57
  %65 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12, i32 0, i32 0
  %66 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %65, align 8
  %67 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12, i32 0, i32 1
  %68 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %67, align 8
  %69 = icmp eq %"class.jxl::Plane"* %66, %68
  br i1 %69, label %74, label %70

70:                                               ; preds = %64
  %71 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %66, i64 0, i32 0, i32 1
  %72 = load i32, i32* %71, align 4
  %73 = zext i32 %72 to i64
  br label %74

74:                                               ; preds = %50, %57, %64, %70
  %75 = phi i64 [ %53, %50 ], [ %59, %70 ], [ %59, %64 ], [ %59, %57 ]
  %76 = phi i64 [ %56, %50 ], [ %73, %70 ], [ 0, %64 ], [ %62, %57 ]
  %77 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %4, i64 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %33, i8 0, i64 16, i1 false) #12
  store i64 %75, i64* %77, align 8
  %78 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %4, i64 0, i32 3
  store i64 %76, i64* %78, align 8
  %79 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 9
  %80 = load i32, i32* %79, align 8
  %81 = icmp eq i32 %80, 1
  %82 = tail call dereferenceable(152) %"struct.jxl::ColorEncoding"* @_ZN3jxl13ColorEncoding4SRGBEb(i1 zeroext %81) #12
  %83 = call i32 @_ZNK3jxl11ImageBundle6CopyToERKNS_4RectERKNS_13ColorEncodingEPNS_6Image3IfEEPNS_10ThreadPoolE(%"class.jxl::ImageBundle"* %0, %"class.jxl::Rect"* nonnull dereferenceable(32) %4, %"struct.jxl::ColorEncoding"* dereferenceable(152) %82, %"class.jxl::Image3"* nonnull %3, %"class.jxl::ThreadPool"* null) #12
  %84 = icmp eq i32 %83, 0
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %33) #12
  br i1 %84, label %88, label %85

85:                                               ; preds = %74
  %86 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.1, i64 0, i64 0), i32 150, i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.2, i64 0, i64 0)) #12
  %87 = call zeroext i1 @_ZN3jxl5AbortEv() #13
  unreachable

88:                                               ; preds = %74, %28
  %89 = phi %"class.jxl::Image3"* [ %7, %28 ], [ %3, %74 ]
  %90 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 10
  %91 = bitcast %"class.jxl::Image3"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %91) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %91, i8 0, i64 96, i1 false) #12
  %92 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 7
  %93 = load i8, i8* %92, align 1, !range !2
  %94 = icmp eq i8 %93, 0
  br i1 %94, label %115, label %95

95:                                               ; preds = %88
  %96 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 9
  %97 = load i32, i32* %96, align 8
  %98 = icmp ult i32 %97, 2
  br i1 %98, label %99, label %115

99:                                               ; preds = %95
  %100 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 2
  %101 = load i32, i32* %100, align 4
  %102 = icmp eq i32 %101, 1
  br i1 %102, label %103, label %115

103:                                              ; preds = %99
  %104 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 3
  %105 = load i32, i32* %104, align 8
  %106 = icmp eq i32 %105, 1
  br i1 %106, label %107, label %115

107:                                              ; preds = %103
  %108 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 4, i32 2
  %109 = load i8, i8* %108, align 4, !range !2
  %110 = icmp eq i8 %109, 0
  br i1 %110, label %111, label %115

111:                                              ; preds = %107
  %112 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 4, i32 4
  %113 = load i32, i32* %112, align 4
  %114 = icmp eq i32 %113, 13
  br i1 %114, label %171, label %115

115:                                              ; preds = %88, %95, %99, %103, %107, %111
  %116 = bitcast %"class.jxl::Rect"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %116) #12
  %117 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %118 = load %"struct.jxl::jpeg::JPEGData"*, %"struct.jxl::jpeg::JPEGData"** %117, align 8
  %119 = icmp eq %"struct.jxl::jpeg::JPEGData"* %118, null
  br i1 %119, label %120, label %133

120:                                              ; preds = %115
  %121 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 10, i32 0, i64 0, i32 0, i32 0
  %122 = load i32, i32* %121, align 8
  %123 = icmp eq i32 %122, 0
  br i1 %123, label %124, label %140

124:                                              ; preds = %120
  %125 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 12, i32 0, i32 0
  %126 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %125, align 8
  %127 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 12, i32 0, i32 1
  %128 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %127, align 8
  %129 = icmp eq %"class.jxl::Plane"* %126, %128
  br i1 %129, label %140, label %130

130:                                              ; preds = %124
  %131 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %126, i64 0, i32 0, i32 0
  %132 = load i32, i32* %131, align 8
  br label %140

133:                                              ; preds = %115
  %134 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %118, i64 0, i32 1
  %135 = load i32, i32* %134, align 8
  %136 = sext i32 %135 to i64
  %137 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %118, i64 0, i32 2
  %138 = load i32, i32* %137, align 4
  %139 = sext i32 %138 to i64
  br label %157

140:                                              ; preds = %130, %124, %120
  %141 = phi i32 [ %122, %120 ], [ 0, %124 ], [ %132, %130 ]
  %142 = zext i32 %141 to i64
  %143 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 10, i32 0, i64 0, i32 0, i32 1
  %144 = load i32, i32* %143, align 4
  %145 = zext i32 %144 to i64
  %146 = icmp eq i32 %144, 0
  br i1 %146, label %147, label %157

147:                                              ; preds = %140
  %148 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 12, i32 0, i32 0
  %149 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %148, align 8
  %150 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 12, i32 0, i32 1
  %151 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %150, align 8
  %152 = icmp eq %"class.jxl::Plane"* %149, %151
  br i1 %152, label %157, label %153

153:                                              ; preds = %147
  %154 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %149, i64 0, i32 0, i32 1
  %155 = load i32, i32* %154, align 4
  %156 = zext i32 %155 to i64
  br label %157

157:                                              ; preds = %133, %140, %147, %153
  %158 = phi i64 [ %136, %133 ], [ %142, %153 ], [ %142, %147 ], [ %142, %140 ]
  %159 = phi i64 [ %139, %133 ], [ %156, %153 ], [ 0, %147 ], [ %145, %140 ]
  %160 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %6, i64 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %116, i8 0, i64 16, i1 false) #12
  store i64 %158, i64* %160, align 8
  %161 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %6, i64 0, i32 3
  store i64 %159, i64* %161, align 8
  %162 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 9
  %163 = load i32, i32* %162, align 8
  %164 = icmp eq i32 %163, 1
  %165 = call dereferenceable(152) %"struct.jxl::ColorEncoding"* @_ZN3jxl13ColorEncoding4SRGBEb(i1 zeroext %164) #12
  %166 = call i32 @_ZNK3jxl11ImageBundle6CopyToERKNS_4RectERKNS_13ColorEncodingEPNS_6Image3IfEEPNS_10ThreadPoolE(%"class.jxl::ImageBundle"* %1, %"class.jxl::Rect"* nonnull dereferenceable(32) %6, %"struct.jxl::ColorEncoding"* dereferenceable(152) %165, %"class.jxl::Image3"* nonnull %5, %"class.jxl::ThreadPool"* null) #12
  %167 = icmp eq i32 %166, 0
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %116) #12
  br i1 %167, label %171, label %168

168:                                              ; preds = %157
  %169 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.1, i64 0, i64 0), i32 156, i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.3, i64 0, i64 0)) #12
  %170 = call zeroext i1 @_ZN3jxl5AbortEv() #13
  unreachable

171:                                              ; preds = %157, %111
  %172 = phi %"class.jxl::Image3"* [ %90, %111 ], [ %5, %157 ]
  %173 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %89, i64 0, i32 0, i64 0, i32 0, i32 0
  %174 = load i32, i32* %173, align 8
  %175 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %172, i64 0, i32 0, i64 0, i32 0, i32 0
  %176 = load i32, i32* %175, align 8
  %177 = icmp eq i32 %174, %176
  br i1 %177, label %178, label %184

178:                                              ; preds = %171
  %179 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %89, i64 0, i32 0, i64 0, i32 0, i32 1
  %180 = load i32, i32* %179, align 4
  %181 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %172, i64 0, i32 0, i64 0, i32 0, i32 1
  %182 = load i32, i32* %181, align 4
  %183 = icmp eq i32 %180, %182
  br i1 %183, label %187, label %184

184:                                              ; preds = %171, %178
  %185 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.1, i64 0, i64 0), i32 160, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.4, i64 0, i64 0)) #12
  %186 = call zeroext i1 @_ZN3jxl5AbortEv() #13
  unreachable

187:                                              ; preds = %178
  %188 = icmp eq i32 %180, 0
  br i1 %188, label %227, label %189

189:                                              ; preds = %187
  %190 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %89, i64 0, i32 0, i64 0, i32 0, i32 4
  %191 = load i64, i64* %190, align 8
  %192 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %172, i64 0, i32 0, i64 0, i32 0, i32 4
  %193 = load i64, i64* %192, align 8
  %194 = zext i32 %174 to i64
  %195 = icmp eq i32 %174, 0
  %196 = zext i32 %180 to i64
  %197 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %89, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %198 = load i8*, i8** %197, align 8
  %199 = ptrtoint i8* %198 to i64
  %200 = and i64 %199, 63
  %201 = icmp eq i64 %200, 0
  call void @llvm.assume(i1 %201) #12
  %202 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %172, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %203 = load i8*, i8** %202, align 8
  %204 = ptrtoint i8* %203 to i64
  %205 = and i64 %204, 63
  %206 = icmp eq i64 %205, 0
  call void @llvm.assume(i1 %206) #12
  %207 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %89, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %208 = load i8*, i8** %207, align 8
  %209 = ptrtoint i8* %208 to i64
  %210 = and i64 %209, 63
  %211 = icmp eq i64 %210, 0
  call void @llvm.assume(i1 %211) #12
  %212 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %172, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %213 = load i8*, i8** %212, align 8
  %214 = ptrtoint i8* %213 to i64
  %215 = and i64 %214, 63
  %216 = icmp eq i64 %215, 0
  call void @llvm.assume(i1 %216) #12
  %217 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %89, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %218 = load i8*, i8** %217, align 8
  %219 = ptrtoint i8* %218 to i64
  %220 = and i64 %219, 63
  %221 = icmp eq i64 %220, 0
  call void @llvm.assume(i1 %221) #12
  %222 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %172, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %223 = load i8*, i8** %222, align 8
  %224 = ptrtoint i8* %223 to i64
  %225 = and i64 %224, 63
  %226 = icmp eq i64 %225, 0
  call void @llvm.assume(i1 %226) #12
  br label %244

227:                                              ; preds = %281, %187
  %228 = phi double [ 0.000000e+00, %187 ], [ %282, %281 ]
  %229 = phi double [ 0.000000e+00, %187 ], [ %283, %281 ]
  %230 = phi double [ 0.000000e+00, %187 ], [ %284, %281 ]
  %231 = call double @sqrt(double %230) #12
  %232 = fmul double %231, 7.500000e-01
  %233 = fadd double %232, 0.000000e+00
  %234 = call double @sqrt(double %229) #12
  %235 = fmul double %234, 1.250000e-01
  %236 = fadd double %233, %235
  %237 = call double @sqrt(double %228) #12
  %238 = fmul double %237, 1.250000e-01
  %239 = fadd double %236, %238
  %240 = fmul double %239, %239
  %241 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %242 = load i8*, i8** %241, align 8
  store i8* null, i8** %241, align 8
  %243 = icmp eq i8* %242, null
  br i1 %243, label %337, label %336

244:                                              ; preds = %189, %281
  %245 = phi double [ 0.000000e+00, %189 ], [ %282, %281 ]
  %246 = phi double [ 0.000000e+00, %189 ], [ %283, %281 ]
  %247 = phi double [ 0.000000e+00, %189 ], [ %284, %281 ]
  %248 = phi i64 [ 0, %189 ], [ %285, %281 ]
  %249 = mul i64 %191, %248
  %250 = mul i64 %193, %248
  %251 = getelementptr inbounds i8, i8* %198, i64 %249
  %252 = ptrtoint i8* %251 to i64
  %253 = and i64 %252, 63
  %254 = icmp eq i64 %253, 0
  call void @llvm.assume(i1 %254) #12
  %255 = getelementptr inbounds i8, i8* %203, i64 %250
  %256 = ptrtoint i8* %255 to i64
  %257 = and i64 %256, 63
  %258 = icmp eq i64 %257, 0
  call void @llvm.assume(i1 %258) #12
  %259 = getelementptr inbounds i8, i8* %208, i64 %249
  %260 = ptrtoint i8* %259 to i64
  %261 = and i64 %260, 63
  %262 = icmp eq i64 %261, 0
  call void @llvm.assume(i1 %262) #12
  %263 = getelementptr inbounds i8, i8* %213, i64 %250
  %264 = ptrtoint i8* %263 to i64
  %265 = and i64 %264, 63
  %266 = icmp eq i64 %265, 0
  call void @llvm.assume(i1 %266) #12
  %267 = getelementptr inbounds i8, i8* %218, i64 %249
  %268 = ptrtoint i8* %267 to i64
  %269 = and i64 %268, 63
  %270 = icmp eq i64 %269, 0
  call void @llvm.assume(i1 %270) #12
  %271 = getelementptr inbounds i8, i8* %223, i64 %250
  %272 = ptrtoint i8* %271 to i64
  %273 = and i64 %272, 63
  %274 = icmp eq i64 %273, 0
  call void @llvm.assume(i1 %274) #12
  %275 = bitcast i8* %251 to float*
  %276 = bitcast i8* %255 to float*
  %277 = bitcast i8* %259 to float*
  %278 = bitcast i8* %263 to float*
  %279 = bitcast i8* %267 to float*
  %280 = bitcast i8* %271 to float*
  br i1 %195, label %281, label %287

281:                                              ; preds = %287, %244
  %282 = phi double [ %245, %244 ], [ %333, %287 ]
  %283 = phi double [ %246, %244 ], [ %330, %287 ]
  %284 = phi double [ %247, %244 ], [ %327, %287 ]
  %285 = add nuw nsw i64 %248, 1
  %286 = icmp ult i64 %285, %196
  br i1 %286, label %244, label %227

287:                                              ; preds = %244, %287
  %288 = phi double [ %333, %287 ], [ %245, %244 ]
  %289 = phi double [ %330, %287 ], [ %246, %244 ]
  %290 = phi double [ %327, %287 ], [ %247, %244 ]
  %291 = phi i64 [ %334, %287 ], [ 0, %244 ]
  %292 = getelementptr inbounds float, float* %275, i64 %291
  %293 = load float, float* %292, align 4
  %294 = getelementptr inbounds float, float* %276, i64 %291
  %295 = load float, float* %294, align 4
  %296 = fsub float %293, %295
  %297 = getelementptr inbounds float, float* %277, i64 %291
  %298 = load float, float* %297, align 4
  %299 = getelementptr inbounds float, float* %278, i64 %291
  %300 = load float, float* %299, align 4
  %301 = fsub float %298, %300
  %302 = getelementptr inbounds float, float* %279, i64 %291
  %303 = load float, float* %302, align 4
  %304 = getelementptr inbounds float, float* %280, i64 %291
  %305 = load float, float* %304, align 4
  %306 = fsub float %303, %305
  %307 = fmul float %296, 0x3FD322D0E0000000
  %308 = fadd float %307, 0.000000e+00
  %309 = fmul float %301, 0x3FE2C8B440000000
  %310 = fadd float %308, %309
  %311 = fmul float %306, 0x3FBD2F1AA0000000
  %312 = fadd float %310, %311
  %313 = fmul float %296, 0xBFC2D527E0000000
  %314 = fadd float %313, 0.000000e+00
  %315 = fmul float %301, 0xBFD27CAEA0000000
  %316 = fadd float %314, %315
  %317 = fmul float %306, 0x3FDBE76C80000000
  %318 = fadd float %316, %317
  %319 = fmul float %296, 0x3FE3AE1480000000
  %320 = fadd float %319, 0.000000e+00
  %321 = fmul float %301, 0xBFE07ACC40000000
  %322 = fadd float %320, %321
  %323 = fmul float %306, 0xBFB99A4160000000
  %324 = fadd float %322, %323
  %325 = fmul float %312, %312
  %326 = fpext float %325 to double
  %327 = fadd double %290, %326
  %328 = fmul float %318, %318
  %329 = fpext float %328 to double
  %330 = fadd double %289, %329
  %331 = fmul float %324, %324
  %332 = fpext float %331 to double
  %333 = fadd double %288, %332
  %334 = add nuw nsw i64 %291, 1
  %335 = icmp eq i64 %334, %194
  br i1 %335, label %281, label %287

336:                                              ; preds = %227
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %242) #12
  br label %337

337:                                              ; preds = %336, %227
  %338 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %339 = load i8*, i8** %338, align 8
  store i8* null, i8** %338, align 8
  %340 = icmp eq i8* %339, null
  br i1 %340, label %342, label %341

341:                                              ; preds = %337
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %339) #12
  br label %342

342:                                              ; preds = %341, %337
  %343 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %344 = load i8*, i8** %343, align 8
  store i8* null, i8** %343, align 8
  %345 = icmp eq i8* %344, null
  br i1 %345, label %347, label %346

346:                                              ; preds = %342
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %344) #12
  br label %347

347:                                              ; preds = %342, %346
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %91) #12
  %348 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %349 = load i8*, i8** %348, align 8
  store i8* null, i8** %348, align 8
  %350 = icmp eq i8* %349, null
  br i1 %350, label %352, label %351

351:                                              ; preds = %347
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %349) #12
  br label %352

352:                                              ; preds = %351, %347
  %353 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %354 = load i8*, i8** %353, align 8
  store i8* null, i8** %353, align 8
  %355 = icmp eq i8* %354, null
  br i1 %355, label %357, label %356

356:                                              ; preds = %352
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %354) #12
  br label %357

357:                                              ; preds = %356, %352
  %358 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %359 = load i8*, i8** %358, align 8
  store i8* null, i8** %358, align 8
  %360 = icmp eq i8* %359, null
  br i1 %360, label %362, label %361

361:                                              ; preds = %357
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %359) #12
  br label %362

362:                                              ; preds = %357, %361
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %8) #12
  ret double %240
}

; Function Attrs: nounwind ssp uwtable
define hidden double @_ZN3jxl8N_SCALAR16ComputeDistancePERKNS_5PlaneIfEERKNS_17ButteraugliParamsEd(%"class.jxl::Plane"* nocapture readonly dereferenceable(32), %"struct.jxl::ButteraugliParams"* nocapture readonly dereferenceable(16), double) #10 {
  %4 = getelementptr inbounds %"struct.jxl::ButteraugliParams", %"struct.jxl::ButteraugliParams"* %1, i64 0, i32 3
  %5 = load i8, i8* %4, align 4, !range !2
  %6 = icmp eq i8 %5, 0
  %7 = select i1 %6, i64 0, i64 8
  %8 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %0, i64 0, i32 0, i32 0
  %9 = load i32, i32* %8, align 8
  %10 = zext i32 %9 to i64
  %11 = shl nuw nsw i64 %7, 1
  %12 = icmp ult i64 %11, %10
  %13 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %0, i64 0, i32 0, i32 1
  %14 = load i32, i32* %13, align 4
  %15 = zext i32 %14 to i64
  %16 = icmp ult i64 %11, %15
  %17 = and i1 %12, %16
  %18 = select i1 %17, i64 %7, i64 0
  %19 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %0, i64 0, i32 0, i32 1
  %20 = mul nuw i64 %15, %10
  %21 = uitofp i64 %20 to double
  %22 = fdiv double 1.000000e+00, %21
  %23 = fadd double %2, -3.000000e+00
  %24 = tail call double @llvm.fabs.f64(double %23) #12
  %25 = fcmp olt double %24, 0x3EB0C6F7A0B5ED8D
  br i1 %25, label %26, label %158

26:                                               ; preds = %3
  %27 = sub nsw i64 %15, %18
  %28 = icmp ult i64 %18, %27
  br i1 %28, label %29, label %39

29:                                               ; preds = %26
  %30 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %31 = load i8*, i8** %30, align 8
  %32 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %0, i64 0, i32 0, i32 4
  %33 = load i64, i64* %32, align 8
  %34 = or i64 %18, 1
  %35 = sub nsw i64 %10, %18
  %36 = icmp ugt i64 %34, %35
  %37 = xor i64 %18, -1
  %38 = add nsw i64 %37, %10
  br label %58

39:                                               ; preds = %152, %26
  %40 = phi double [ 0.000000e+00, %26 ], [ %95, %152 ]
  %41 = phi double [ 0.000000e+00, %26 ], [ %96, %152 ]
  %42 = phi double [ 0.000000e+00, %26 ], [ %97, %152 ]
  %43 = phi double [ 0.000000e+00, %26 ], [ %153, %152 ]
  %44 = phi double [ 0.000000e+00, %26 ], [ %154, %152 ]
  %45 = phi double [ 0.000000e+00, %26 ], [ %155, %152 ]
  %46 = fadd double %40, %45
  %47 = fmul double %22, %46
  %48 = fdiv double 1.000000e+00, %2
  %49 = tail call double @pow(double %47, double %48) #12
  %50 = fadd double %49, 0.000000e+00
  %51 = fadd double %41, %44
  %52 = fmul double %22, %51
  %53 = fmul double %2, 2.000000e+00
  %54 = fdiv double 1.000000e+00, %53
  %55 = tail call double @pow(double %52, double %54) #12
  %56 = fadd double %50, %55
  %57 = fadd double %42, %43
  br label %228

58:                                               ; preds = %152, %29
  %59 = phi double [ 0.000000e+00, %29 ], [ %155, %152 ]
  %60 = phi double [ 0.000000e+00, %29 ], [ %154, %152 ]
  %61 = phi double [ 0.000000e+00, %29 ], [ %153, %152 ]
  %62 = phi i64 [ %18, %29 ], [ %156, %152 ]
  %63 = phi double [ 0.000000e+00, %29 ], [ %97, %152 ]
  %64 = phi double [ 0.000000e+00, %29 ], [ %96, %152 ]
  %65 = phi double [ 0.000000e+00, %29 ], [ %95, %152 ]
  %66 = mul i64 %33, %62
  %67 = getelementptr inbounds i8, i8* %31, i64 %66
  %68 = ptrtoint i8* %67 to i64
  %69 = and i64 %68, 63
  %70 = icmp eq i64 %69, 0
  tail call void @llvm.assume(i1 %70) #12
  %71 = bitcast i8* %67 to float*
  br i1 %36, label %90, label %72

72:                                               ; preds = %58, %72
  %73 = phi i64 [ %88, %72 ], [ %34, %58 ]
  %74 = phi i64 [ %73, %72 ], [ %18, %58 ]
  %75 = phi double [ %87, %72 ], [ 0.000000e+00, %58 ]
  %76 = phi double [ %85, %72 ], [ 0.000000e+00, %58 ]
  %77 = phi double [ %83, %72 ], [ 0.000000e+00, %58 ]
  %78 = getelementptr inbounds float, float* %71, i64 %74
  %79 = load float, float* %78, align 4, !alias.scope !14
  %80 = fpext float %79 to double
  %81 = fmul double %80, %80
  %82 = fmul double %81, %80
  %83 = fadd double %77, %82
  %84 = fmul double %82, %82
  %85 = fadd double %76, %84
  %86 = fmul double %84, %84
  %87 = fadd double %75, %86
  %88 = add i64 %73, 1
  %89 = icmp ugt i64 %88, %35
  br i1 %89, label %90, label %72

90:                                               ; preds = %72, %58
  %91 = phi double [ 0.000000e+00, %58 ], [ %83, %72 ]
  %92 = phi double [ 0.000000e+00, %58 ], [ %85, %72 ]
  %93 = phi double [ 0.000000e+00, %58 ], [ %87, %72 ]
  %94 = phi i64 [ %18, %58 ], [ %73, %72 ]
  %95 = fadd double %65, %91
  %96 = fadd double %64, %92
  %97 = fadd double %63, %93
  %98 = icmp ult i64 %94, %35
  br i1 %98, label %99, label %152

99:                                               ; preds = %90
  %100 = sub i64 %10, %94
  %101 = and i64 %100, 1
  %102 = icmp eq i64 %101, 0
  br i1 %102, label %115, label %103

103:                                              ; preds = %99
  %104 = getelementptr inbounds float, float* %71, i64 %94
  %105 = load float, float* %104, align 4
  %106 = fpext float %105 to double
  %107 = fmul double %106, %106
  %108 = fmul double %107, %106
  %109 = fadd double %59, %108
  %110 = fmul double %108, %108
  %111 = fadd double %60, %110
  %112 = fmul double %110, %110
  %113 = fadd double %61, %112
  %114 = add nuw i64 %94, 1
  br label %115

115:                                              ; preds = %103, %99
  %116 = phi double [ %109, %103 ], [ undef, %99 ]
  %117 = phi double [ %111, %103 ], [ undef, %99 ]
  %118 = phi double [ %113, %103 ], [ undef, %99 ]
  %119 = phi double [ %109, %103 ], [ %59, %99 ]
  %120 = phi double [ %111, %103 ], [ %60, %99 ]
  %121 = phi double [ %113, %103 ], [ %61, %99 ]
  %122 = phi i64 [ %114, %103 ], [ %94, %99 ]
  %123 = icmp eq i64 %38, %94
  br i1 %123, label %152, label %124

124:                                              ; preds = %115, %124
  %125 = phi double [ %145, %124 ], [ %119, %115 ]
  %126 = phi double [ %147, %124 ], [ %120, %115 ]
  %127 = phi double [ %149, %124 ], [ %121, %115 ]
  %128 = phi i64 [ %150, %124 ], [ %122, %115 ]
  %129 = getelementptr inbounds float, float* %71, i64 %128
  %130 = load float, float* %129, align 4
  %131 = fpext float %130 to double
  %132 = fmul double %131, %131
  %133 = fmul double %132, %131
  %134 = fadd double %125, %133
  %135 = fmul double %133, %133
  %136 = fadd double %126, %135
  %137 = fmul double %135, %135
  %138 = fadd double %127, %137
  %139 = add nuw i64 %128, 1
  %140 = getelementptr inbounds float, float* %71, i64 %139
  %141 = load float, float* %140, align 4
  %142 = fpext float %141 to double
  %143 = fmul double %142, %142
  %144 = fmul double %143, %142
  %145 = fadd double %134, %144
  %146 = fmul double %144, %144
  %147 = fadd double %136, %146
  %148 = fmul double %146, %146
  %149 = fadd double %138, %148
  %150 = add nuw i64 %128, 2
  %151 = icmp eq i64 %150, %35
  br i1 %151, label %152, label %124

152:                                              ; preds = %115, %124, %90
  %153 = phi double [ %61, %90 ], [ %118, %115 ], [ %149, %124 ]
  %154 = phi double [ %60, %90 ], [ %117, %115 ], [ %147, %124 ]
  %155 = phi double [ %59, %90 ], [ %116, %115 ], [ %145, %124 ]
  %156 = add nuw i64 %62, 1
  %157 = icmp eq i64 %156, %27
  br i1 %157, label %39, label %58

158:                                              ; preds = %3
  %159 = atomicrmw add i32* getelementptr inbounds ({ { i32 } }, { { i32 } }* @_ZZN3jxl8N_SCALAR16ComputeDistancePERKNS_5PlaneIfEERKNS_17ButteraugliParamsEdE4once, i64 0, i32 0, i32 0), i32 1 monotonic
  %160 = sub nsw i64 %15, %18
  %161 = icmp ult i64 %18, %160
  br i1 %161, label %162, label %166

162:                                              ; preds = %158
  %163 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %164 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %0, i64 0, i32 0, i32 4
  %165 = load i32, i32* %8, align 8
  br label %179

166:                                              ; preds = %199, %158
  %167 = phi double [ 0.000000e+00, %158 ], [ %202, %199 ]
  %168 = phi double [ 0.000000e+00, %158 ], [ %203, %199 ]
  %169 = phi double [ 0.000000e+00, %158 ], [ %204, %199 ]
  %170 = fmul double %22, %169
  %171 = fdiv double 1.000000e+00, %2
  %172 = tail call double @pow(double %170, double %171) #12
  %173 = fadd double %172, 0.000000e+00
  %174 = fmul double %22, %168
  %175 = fmul double %2, 2.000000e+00
  %176 = fdiv double 1.000000e+00, %175
  %177 = tail call double @pow(double %174, double %176) #12
  %178 = fadd double %173, %177
  br label %228

179:                                              ; preds = %162, %199
  %180 = phi i32 [ %14, %162 ], [ %200, %199 ]
  %181 = phi i32 [ %165, %162 ], [ %201, %199 ]
  %182 = phi double [ 0.000000e+00, %162 ], [ %202, %199 ]
  %183 = phi double [ 0.000000e+00, %162 ], [ %203, %199 ]
  %184 = phi double [ 0.000000e+00, %162 ], [ %204, %199 ]
  %185 = phi i64 [ %18, %162 ], [ %205, %199 ]
  %186 = load i8*, i8** %163, align 8
  %187 = load i64, i64* %164, align 8
  %188 = mul i64 %187, %185
  %189 = getelementptr inbounds i8, i8* %186, i64 %188
  %190 = ptrtoint i8* %189 to i64
  %191 = and i64 %190, 63
  %192 = icmp eq i64 %191, 0
  tail call void @llvm.assume(i1 %192) #12
  %193 = bitcast i8* %189 to float*
  %194 = zext i32 %181 to i64
  %195 = sub nsw i64 %194, %18
  %196 = icmp ult i64 %18, %195
  br i1 %196, label %209, label %199

197:                                              ; preds = %209
  %198 = load i32, i32* %19, align 4
  br label %199

199:                                              ; preds = %197, %179
  %200 = phi i32 [ %180, %179 ], [ %198, %197 ]
  %201 = phi i32 [ %181, %179 ], [ %224, %197 ]
  %202 = phi double [ %182, %179 ], [ %222, %197 ]
  %203 = phi double [ %183, %179 ], [ %220, %197 ]
  %204 = phi double [ %184, %179 ], [ %218, %197 ]
  %205 = add nuw i64 %185, 1
  %206 = zext i32 %200 to i64
  %207 = sub nsw i64 %206, %18
  %208 = icmp ult i64 %205, %207
  br i1 %208, label %179, label %166

209:                                              ; preds = %179, %209
  %210 = phi double [ %222, %209 ], [ %182, %179 ]
  %211 = phi double [ %220, %209 ], [ %183, %179 ]
  %212 = phi double [ %218, %209 ], [ %184, %179 ]
  %213 = phi i64 [ %223, %209 ], [ %18, %179 ]
  %214 = getelementptr inbounds float, float* %193, i64 %213
  %215 = load float, float* %214, align 4
  %216 = fpext float %215 to double
  %217 = tail call double @pow(double %216, double %2) #12
  %218 = fadd double %217, %212
  %219 = fmul double %217, %217
  %220 = fadd double %219, %211
  %221 = fmul double %219, %219
  %222 = fadd double %221, %210
  %223 = add nuw i64 %213, 1
  %224 = load i32, i32* %8, align 8
  %225 = zext i32 %224 to i64
  %226 = sub nsw i64 %225, %18
  %227 = icmp ult i64 %223, %226
  br i1 %227, label %209, label %197

228:                                              ; preds = %166, %39
  %229 = phi double [ %167, %166 ], [ %57, %39 ]
  %230 = phi double [ %178, %166 ], [ %56, %39 ]
  %231 = fmul double %22, %229
  %232 = fmul double %2, 4.000000e+00
  %233 = fdiv double 1.000000e+00, %232
  %234 = tail call double @pow(double %231, double %233) #12
  %235 = fadd double %230, %234
  %236 = fdiv double %235, 3.000000e+00
  ret double %236
}

; Function Attrs: nounwind ssp uwtable
define hidden double @_ZN3jxl8N_SCALAR16ComputeDistance2ERKNS_11ImageBundleES3_(%"class.jxl::ImageBundle"* dereferenceable(368), %"class.jxl::ImageBundle"* dereferenceable(368)) #10 {
  %3 = alloca %"class.jxl::Image3", align 8
  %4 = alloca %"class.jxl::Rect", align 8
  %5 = alloca %"class.jxl::Image3", align 8
  %6 = alloca %"class.jxl::Rect", align 8
  %7 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10
  %8 = bitcast %"class.jxl::Image3"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %8) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %8, i8 0, i64 96, i1 false) #12
  %9 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 7
  %10 = load i8, i8* %9, align 1, !range !2
  %11 = icmp eq i8 %10, 0
  br i1 %11, label %32, label %12

12:                                               ; preds = %2
  %13 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 9
  %14 = load i32, i32* %13, align 8
  %15 = icmp ult i32 %14, 2
  br i1 %15, label %16, label %32

16:                                               ; preds = %12
  %17 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 2
  %18 = load i32, i32* %17, align 4
  %19 = icmp eq i32 %18, 1
  br i1 %19, label %20, label %32

20:                                               ; preds = %16
  %21 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 3
  %22 = load i32, i32* %21, align 8
  %23 = icmp eq i32 %22, 1
  br i1 %23, label %24, label %32

24:                                               ; preds = %20
  %25 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 4, i32 2
  %26 = load i8, i8* %25, align 4, !range !2
  %27 = icmp eq i8 %26, 0
  br i1 %27, label %28, label %32

28:                                               ; preds = %24
  %29 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 4, i32 4
  %30 = load i32, i32* %29, align 4
  %31 = icmp eq i32 %30, 13
  br i1 %31, label %88, label %32

32:                                               ; preds = %2, %12, %16, %20, %24, %28
  %33 = bitcast %"class.jxl::Rect"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %33) #12
  %34 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %35 = load %"struct.jxl::jpeg::JPEGData"*, %"struct.jxl::jpeg::JPEGData"** %34, align 8
  %36 = icmp eq %"struct.jxl::jpeg::JPEGData"* %35, null
  br i1 %36, label %37, label %50

37:                                               ; preds = %32
  %38 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 0, i32 0, i32 0
  %39 = load i32, i32* %38, align 8
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %41, label %57

41:                                               ; preds = %37
  %42 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12, i32 0, i32 0
  %43 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %42, align 8
  %44 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12, i32 0, i32 1
  %45 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %44, align 8
  %46 = icmp eq %"class.jxl::Plane"* %43, %45
  br i1 %46, label %57, label %47

47:                                               ; preds = %41
  %48 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %43, i64 0, i32 0, i32 0
  %49 = load i32, i32* %48, align 8
  br label %57

50:                                               ; preds = %32
  %51 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %35, i64 0, i32 1
  %52 = load i32, i32* %51, align 8
  %53 = sext i32 %52 to i64
  %54 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %35, i64 0, i32 2
  %55 = load i32, i32* %54, align 4
  %56 = sext i32 %55 to i64
  br label %74

57:                                               ; preds = %47, %41, %37
  %58 = phi i32 [ %39, %37 ], [ 0, %41 ], [ %49, %47 ]
  %59 = zext i32 %58 to i64
  %60 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 0, i32 0, i32 1
  %61 = load i32, i32* %60, align 4
  %62 = zext i32 %61 to i64
  %63 = icmp eq i32 %61, 0
  br i1 %63, label %64, label %74

64:                                               ; preds = %57
  %65 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12, i32 0, i32 0
  %66 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %65, align 8
  %67 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12, i32 0, i32 1
  %68 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %67, align 8
  %69 = icmp eq %"class.jxl::Plane"* %66, %68
  br i1 %69, label %74, label %70

70:                                               ; preds = %64
  %71 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %66, i64 0, i32 0, i32 1
  %72 = load i32, i32* %71, align 4
  %73 = zext i32 %72 to i64
  br label %74

74:                                               ; preds = %50, %57, %64, %70
  %75 = phi i64 [ %53, %50 ], [ %59, %70 ], [ %59, %64 ], [ %59, %57 ]
  %76 = phi i64 [ %56, %50 ], [ %73, %70 ], [ 0, %64 ], [ %62, %57 ]
  %77 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %4, i64 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %33, i8 0, i64 16, i1 false) #12
  store i64 %75, i64* %77, align 8
  %78 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %4, i64 0, i32 3
  store i64 %76, i64* %78, align 8
  %79 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 9
  %80 = load i32, i32* %79, align 8
  %81 = icmp eq i32 %80, 1
  %82 = tail call dereferenceable(152) %"struct.jxl::ColorEncoding"* @_ZN3jxl13ColorEncoding4SRGBEb(i1 zeroext %81) #12
  %83 = call i32 @_ZNK3jxl11ImageBundle6CopyToERKNS_4RectERKNS_13ColorEncodingEPNS_6Image3IfEEPNS_10ThreadPoolE(%"class.jxl::ImageBundle"* %0, %"class.jxl::Rect"* nonnull dereferenceable(32) %4, %"struct.jxl::ColorEncoding"* dereferenceable(152) %82, %"class.jxl::Image3"* nonnull %3, %"class.jxl::ThreadPool"* null) #12
  %84 = icmp eq i32 %83, 0
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %33) #12
  br i1 %84, label %88, label %85

85:                                               ; preds = %74
  %86 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.1, i64 0, i64 0), i32 150, i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.2, i64 0, i64 0)) #12
  %87 = call zeroext i1 @_ZN3jxl5AbortEv() #13
  unreachable

88:                                               ; preds = %74, %28
  %89 = phi %"class.jxl::Image3"* [ %7, %28 ], [ %3, %74 ]
  %90 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 10
  %91 = bitcast %"class.jxl::Image3"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %91) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %91, i8 0, i64 96, i1 false) #12
  %92 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 7
  %93 = load i8, i8* %92, align 1, !range !2
  %94 = icmp eq i8 %93, 0
  br i1 %94, label %115, label %95

95:                                               ; preds = %88
  %96 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 9
  %97 = load i32, i32* %96, align 8
  %98 = icmp ult i32 %97, 2
  br i1 %98, label %99, label %115

99:                                               ; preds = %95
  %100 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 2
  %101 = load i32, i32* %100, align 4
  %102 = icmp eq i32 %101, 1
  br i1 %102, label %103, label %115

103:                                              ; preds = %99
  %104 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 3
  %105 = load i32, i32* %104, align 8
  %106 = icmp eq i32 %105, 1
  br i1 %106, label %107, label %115

107:                                              ; preds = %103
  %108 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 4, i32 2
  %109 = load i8, i8* %108, align 4, !range !2
  %110 = icmp eq i8 %109, 0
  br i1 %110, label %111, label %115

111:                                              ; preds = %107
  %112 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 4, i32 4
  %113 = load i32, i32* %112, align 4
  %114 = icmp eq i32 %113, 13
  br i1 %114, label %171, label %115

115:                                              ; preds = %88, %95, %99, %103, %107, %111
  %116 = bitcast %"class.jxl::Rect"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %116) #12
  %117 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %118 = load %"struct.jxl::jpeg::JPEGData"*, %"struct.jxl::jpeg::JPEGData"** %117, align 8
  %119 = icmp eq %"struct.jxl::jpeg::JPEGData"* %118, null
  br i1 %119, label %120, label %133

120:                                              ; preds = %115
  %121 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 10, i32 0, i64 0, i32 0, i32 0
  %122 = load i32, i32* %121, align 8
  %123 = icmp eq i32 %122, 0
  br i1 %123, label %124, label %140

124:                                              ; preds = %120
  %125 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 12, i32 0, i32 0
  %126 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %125, align 8
  %127 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 12, i32 0, i32 1
  %128 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %127, align 8
  %129 = icmp eq %"class.jxl::Plane"* %126, %128
  br i1 %129, label %140, label %130

130:                                              ; preds = %124
  %131 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %126, i64 0, i32 0, i32 0
  %132 = load i32, i32* %131, align 8
  br label %140

133:                                              ; preds = %115
  %134 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %118, i64 0, i32 1
  %135 = load i32, i32* %134, align 8
  %136 = sext i32 %135 to i64
  %137 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %118, i64 0, i32 2
  %138 = load i32, i32* %137, align 4
  %139 = sext i32 %138 to i64
  br label %157

140:                                              ; preds = %130, %124, %120
  %141 = phi i32 [ %122, %120 ], [ 0, %124 ], [ %132, %130 ]
  %142 = zext i32 %141 to i64
  %143 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 10, i32 0, i64 0, i32 0, i32 1
  %144 = load i32, i32* %143, align 4
  %145 = zext i32 %144 to i64
  %146 = icmp eq i32 %144, 0
  br i1 %146, label %147, label %157

147:                                              ; preds = %140
  %148 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 12, i32 0, i32 0
  %149 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %148, align 8
  %150 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 12, i32 0, i32 1
  %151 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %150, align 8
  %152 = icmp eq %"class.jxl::Plane"* %149, %151
  br i1 %152, label %157, label %153

153:                                              ; preds = %147
  %154 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %149, i64 0, i32 0, i32 1
  %155 = load i32, i32* %154, align 4
  %156 = zext i32 %155 to i64
  br label %157

157:                                              ; preds = %133, %140, %147, %153
  %158 = phi i64 [ %136, %133 ], [ %142, %153 ], [ %142, %147 ], [ %142, %140 ]
  %159 = phi i64 [ %139, %133 ], [ %156, %153 ], [ 0, %147 ], [ %145, %140 ]
  %160 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %6, i64 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %116, i8 0, i64 16, i1 false) #12
  store i64 %158, i64* %160, align 8
  %161 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %6, i64 0, i32 3
  store i64 %159, i64* %161, align 8
  %162 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 9
  %163 = load i32, i32* %162, align 8
  %164 = icmp eq i32 %163, 1
  %165 = call dereferenceable(152) %"struct.jxl::ColorEncoding"* @_ZN3jxl13ColorEncoding4SRGBEb(i1 zeroext %164) #12
  %166 = call i32 @_ZNK3jxl11ImageBundle6CopyToERKNS_4RectERKNS_13ColorEncodingEPNS_6Image3IfEEPNS_10ThreadPoolE(%"class.jxl::ImageBundle"* %1, %"class.jxl::Rect"* nonnull dereferenceable(32) %6, %"struct.jxl::ColorEncoding"* dereferenceable(152) %165, %"class.jxl::Image3"* nonnull %5, %"class.jxl::ThreadPool"* null) #12
  %167 = icmp eq i32 %166, 0
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %116) #12
  br i1 %167, label %171, label %168

168:                                              ; preds = %157
  %169 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.1, i64 0, i64 0), i32 156, i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.3, i64 0, i64 0)) #12
  %170 = call zeroext i1 @_ZN3jxl5AbortEv() #13
  unreachable

171:                                              ; preds = %157, %111
  %172 = phi %"class.jxl::Image3"* [ %90, %111 ], [ %5, %157 ]
  %173 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %89, i64 0, i32 0, i64 0, i32 0, i32 0
  %174 = load i32, i32* %173, align 8
  %175 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %172, i64 0, i32 0, i64 0, i32 0, i32 0
  %176 = load i32, i32* %175, align 8
  %177 = icmp eq i32 %174, %176
  br i1 %177, label %178, label %184

178:                                              ; preds = %171
  %179 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %89, i64 0, i32 0, i64 0, i32 0, i32 1
  %180 = load i32, i32* %179, align 4
  %181 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %172, i64 0, i32 0, i64 0, i32 0, i32 1
  %182 = load i32, i32* %181, align 4
  %183 = icmp eq i32 %180, %182
  br i1 %183, label %187, label %184

184:                                              ; preds = %171, %178
  %185 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.1, i64 0, i64 0), i32 160, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.4, i64 0, i64 0)) #12
  %186 = call zeroext i1 @_ZN3jxl5AbortEv() #13
  unreachable

187:                                              ; preds = %178
  %188 = icmp eq i32 %180, 0
  br i1 %188, label %227, label %189

189:                                              ; preds = %187
  %190 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %89, i64 0, i32 0, i64 0, i32 0, i32 4
  %191 = load i64, i64* %190, align 8
  %192 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %172, i64 0, i32 0, i64 0, i32 0, i32 4
  %193 = load i64, i64* %192, align 8
  %194 = zext i32 %174 to i64
  %195 = icmp eq i32 %174, 0
  %196 = zext i32 %180 to i64
  %197 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %89, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %198 = load i8*, i8** %197, align 8
  %199 = ptrtoint i8* %198 to i64
  %200 = and i64 %199, 63
  %201 = icmp eq i64 %200, 0
  call void @llvm.assume(i1 %201) #12
  %202 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %172, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %203 = load i8*, i8** %202, align 8
  %204 = ptrtoint i8* %203 to i64
  %205 = and i64 %204, 63
  %206 = icmp eq i64 %205, 0
  call void @llvm.assume(i1 %206) #12
  %207 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %89, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %208 = load i8*, i8** %207, align 8
  %209 = ptrtoint i8* %208 to i64
  %210 = and i64 %209, 63
  %211 = icmp eq i64 %210, 0
  call void @llvm.assume(i1 %211) #12
  %212 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %172, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %213 = load i8*, i8** %212, align 8
  %214 = ptrtoint i8* %213 to i64
  %215 = and i64 %214, 63
  %216 = icmp eq i64 %215, 0
  call void @llvm.assume(i1 %216) #12
  %217 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %89, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %218 = load i8*, i8** %217, align 8
  %219 = ptrtoint i8* %218 to i64
  %220 = and i64 %219, 63
  %221 = icmp eq i64 %220, 0
  call void @llvm.assume(i1 %221) #12
  %222 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %172, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %223 = load i8*, i8** %222, align 8
  %224 = ptrtoint i8* %223 to i64
  %225 = and i64 %224, 63
  %226 = icmp eq i64 %225, 0
  call void @llvm.assume(i1 %226) #12
  br label %244

227:                                              ; preds = %281, %187
  %228 = phi double [ 0.000000e+00, %187 ], [ %282, %281 ]
  %229 = phi double [ 0.000000e+00, %187 ], [ %283, %281 ]
  %230 = phi double [ 0.000000e+00, %187 ], [ %284, %281 ]
  %231 = call double @sqrt(double %230) #12
  %232 = fmul double %231, 7.500000e-01
  %233 = fadd double %232, 0.000000e+00
  %234 = call double @sqrt(double %229) #12
  %235 = fmul double %234, 1.250000e-01
  %236 = fadd double %233, %235
  %237 = call double @sqrt(double %228) #12
  %238 = fmul double %237, 1.250000e-01
  %239 = fadd double %236, %238
  %240 = fmul double %239, %239
  %241 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %242 = load i8*, i8** %241, align 8
  store i8* null, i8** %241, align 8
  %243 = icmp eq i8* %242, null
  br i1 %243, label %337, label %336

244:                                              ; preds = %189, %281
  %245 = phi double [ 0.000000e+00, %189 ], [ %282, %281 ]
  %246 = phi double [ 0.000000e+00, %189 ], [ %283, %281 ]
  %247 = phi double [ 0.000000e+00, %189 ], [ %284, %281 ]
  %248 = phi i64 [ 0, %189 ], [ %285, %281 ]
  %249 = mul i64 %191, %248
  %250 = mul i64 %193, %248
  %251 = getelementptr inbounds i8, i8* %198, i64 %249
  %252 = ptrtoint i8* %251 to i64
  %253 = and i64 %252, 63
  %254 = icmp eq i64 %253, 0
  call void @llvm.assume(i1 %254) #12
  %255 = getelementptr inbounds i8, i8* %203, i64 %250
  %256 = ptrtoint i8* %255 to i64
  %257 = and i64 %256, 63
  %258 = icmp eq i64 %257, 0
  call void @llvm.assume(i1 %258) #12
  %259 = getelementptr inbounds i8, i8* %208, i64 %249
  %260 = ptrtoint i8* %259 to i64
  %261 = and i64 %260, 63
  %262 = icmp eq i64 %261, 0
  call void @llvm.assume(i1 %262) #12
  %263 = getelementptr inbounds i8, i8* %213, i64 %250
  %264 = ptrtoint i8* %263 to i64
  %265 = and i64 %264, 63
  %266 = icmp eq i64 %265, 0
  call void @llvm.assume(i1 %266) #12
  %267 = getelementptr inbounds i8, i8* %218, i64 %249
  %268 = ptrtoint i8* %267 to i64
  %269 = and i64 %268, 63
  %270 = icmp eq i64 %269, 0
  call void @llvm.assume(i1 %270) #12
  %271 = getelementptr inbounds i8, i8* %223, i64 %250
  %272 = ptrtoint i8* %271 to i64
  %273 = and i64 %272, 63
  %274 = icmp eq i64 %273, 0
  call void @llvm.assume(i1 %274) #12
  %275 = bitcast i8* %251 to float*
  %276 = bitcast i8* %255 to float*
  %277 = bitcast i8* %259 to float*
  %278 = bitcast i8* %263 to float*
  %279 = bitcast i8* %267 to float*
  %280 = bitcast i8* %271 to float*
  br i1 %195, label %281, label %287

281:                                              ; preds = %287, %244
  %282 = phi double [ %245, %244 ], [ %333, %287 ]
  %283 = phi double [ %246, %244 ], [ %330, %287 ]
  %284 = phi double [ %247, %244 ], [ %327, %287 ]
  %285 = add nuw nsw i64 %248, 1
  %286 = icmp ult i64 %285, %196
  br i1 %286, label %244, label %227

287:                                              ; preds = %244, %287
  %288 = phi double [ %333, %287 ], [ %245, %244 ]
  %289 = phi double [ %330, %287 ], [ %246, %244 ]
  %290 = phi double [ %327, %287 ], [ %247, %244 ]
  %291 = phi i64 [ %334, %287 ], [ 0, %244 ]
  %292 = getelementptr inbounds float, float* %275, i64 %291
  %293 = load float, float* %292, align 4
  %294 = getelementptr inbounds float, float* %276, i64 %291
  %295 = load float, float* %294, align 4
  %296 = fsub float %293, %295
  %297 = getelementptr inbounds float, float* %277, i64 %291
  %298 = load float, float* %297, align 4
  %299 = getelementptr inbounds float, float* %278, i64 %291
  %300 = load float, float* %299, align 4
  %301 = fsub float %298, %300
  %302 = getelementptr inbounds float, float* %279, i64 %291
  %303 = load float, float* %302, align 4
  %304 = getelementptr inbounds float, float* %280, i64 %291
  %305 = load float, float* %304, align 4
  %306 = fsub float %303, %305
  %307 = fmul float %296, 0x3FD322D0E0000000
  %308 = fadd float %307, 0.000000e+00
  %309 = fmul float %301, 0x3FE2C8B440000000
  %310 = fadd float %308, %309
  %311 = fmul float %306, 0x3FBD2F1AA0000000
  %312 = fadd float %310, %311
  %313 = fmul float %296, 0xBFC2D527E0000000
  %314 = fadd float %313, 0.000000e+00
  %315 = fmul float %301, 0xBFD27CAEA0000000
  %316 = fadd float %314, %315
  %317 = fmul float %306, 0x3FDBE76C80000000
  %318 = fadd float %316, %317
  %319 = fmul float %296, 0x3FE3AE1480000000
  %320 = fadd float %319, 0.000000e+00
  %321 = fmul float %301, 0xBFE07ACC40000000
  %322 = fadd float %320, %321
  %323 = fmul float %306, 0xBFB99A4160000000
  %324 = fadd float %322, %323
  %325 = fmul float %312, %312
  %326 = fpext float %325 to double
  %327 = fadd double %290, %326
  %328 = fmul float %318, %318
  %329 = fpext float %328 to double
  %330 = fadd double %289, %329
  %331 = fmul float %324, %324
  %332 = fpext float %331 to double
  %333 = fadd double %288, %332
  %334 = add nuw nsw i64 %291, 1
  %335 = icmp eq i64 %334, %194
  br i1 %335, label %281, label %287

336:                                              ; preds = %227
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %242) #12
  br label %337

337:                                              ; preds = %336, %227
  %338 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %339 = load i8*, i8** %338, align 8
  store i8* null, i8** %338, align 8
  %340 = icmp eq i8* %339, null
  br i1 %340, label %342, label %341

341:                                              ; preds = %337
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %339) #12
  br label %342

342:                                              ; preds = %341, %337
  %343 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %344 = load i8*, i8** %343, align 8
  store i8* null, i8** %343, align 8
  %345 = icmp eq i8* %344, null
  br i1 %345, label %347, label %346

346:                                              ; preds = %342
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %344) #12
  br label %347

347:                                              ; preds = %342, %346
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %91) #12
  %348 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %349 = load i8*, i8** %348, align 8
  store i8* null, i8** %348, align 8
  %350 = icmp eq i8* %349, null
  br i1 %350, label %352, label %351

351:                                              ; preds = %347
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %349) #12
  br label %352

352:                                              ; preds = %351, %347
  %353 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %354 = load i8*, i8** %353, align 8
  store i8* null, i8** %353, align 8
  %355 = icmp eq i8* %354, null
  br i1 %355, label %357, label %356

356:                                              ; preds = %352
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %354) #12
  br label %357

357:                                              ; preds = %356, %352
  %358 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %359 = load i8*, i8** %358, align 8
  store i8* null, i8** %358, align 8
  %360 = icmp eq i8* %359, null
  br i1 %360, label %362, label %361

361:                                              ; preds = %357
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %359) #12
  br label %362

362:                                              ; preds = %357, %361
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %8) #12
  ret double %240
}

; Function Attrs: nounwind ssp uwtable
define hidden double @_ZN3jxl16ComputeDistancePERKNS_5PlaneIfEERKNS_17ButteraugliParamsEd(%"class.jxl::Plane"* dereferenceable(32), %"struct.jxl::ButteraugliParams"* dereferenceable(16), double) local_unnamed_addr #10 {
  %4 = load atomic i32, i32* getelementptr inbounds (%"struct.hwy::ChosenTarget", %"struct.hwy::ChosenTarget"* @_ZN3hwy13chosen_targetE, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) seq_cst, align 4
  %5 = and i32 %4, 2225
  %6 = tail call i32 @llvm.cttz.i32(i32 %5, i1 true) #12, !range !17
  %7 = zext i32 %6 to i64
  %8 = getelementptr inbounds [12 x double (%"class.jxl::Plane"*, %"struct.jxl::ButteraugliParams"*, double)*], [12 x double (%"class.jxl::Plane"*, %"struct.jxl::ButteraugliParams"*, double)*]* @_ZN3jxlL36ComputeDistancePHighwayDispatchTableE, i64 0, i64 %7
  %9 = load double (%"class.jxl::Plane"*, %"struct.jxl::ButteraugliParams"*, double)*, double (%"class.jxl::Plane"*, %"struct.jxl::ButteraugliParams"*, double)** %8, align 8
  %10 = tail call double %9(%"class.jxl::Plane"* dereferenceable(32) %0, %"struct.jxl::ButteraugliParams"* dereferenceable(16) %1, double %2) #12
  ret double %10
}

; Function Attrs: nounwind ssp uwtable
define hidden double @_ZN3jxl16ComputeDistance2ERKNS_11ImageBundleES2_(%"class.jxl::ImageBundle"* dereferenceable(368), %"class.jxl::ImageBundle"* dereferenceable(368)) local_unnamed_addr #10 {
  %3 = load atomic i32, i32* getelementptr inbounds (%"struct.hwy::ChosenTarget", %"struct.hwy::ChosenTarget"* @_ZN3hwy13chosen_targetE, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) seq_cst, align 4
  %4 = and i32 %3, 2225
  %5 = tail call i32 @llvm.cttz.i32(i32 %4, i1 true) #12, !range !17
  %6 = zext i32 %5 to i64
  %7 = getelementptr inbounds [12 x double (%"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"*)*], [12 x double (%"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"*)*]* @_ZN3jxlL36ComputeDistance2HighwayDispatchTableE, i64 0, i64 %6
  %8 = load double (%"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"*)*, double (%"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"*)** %7, align 8
  %9 = tail call double %8(%"class.jxl::ImageBundle"* dereferenceable(368) %0, %"class.jxl::ImageBundle"* dereferenceable(368) %1) #12
  ret double %9
}

; Function Attrs: nounwind readnone speculatable
declare double @llvm.fabs.f64(double) #11

declare void @_ZN3jxl12CacheAligned4FreeEPKv(i8*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define internal double @_ZN3hwy13FunctionCacheIdJRKN3jxl5PlaneIfEERKNS1_17ButteraugliParamsEdEE13ChooseAndCallIXadL_ZNS1_L36ComputeDistancePHighwayDispatchTableEEEEEdS5_S8_d(%"class.jxl::Plane"* dereferenceable(32), %"struct.jxl::ButteraugliParams"* dereferenceable(16), double) #10 align 2 {
  tail call void @_ZN3hwy12ChosenTarget6UpdateEv(%"struct.hwy::ChosenTarget"* nonnull @_ZN3hwy13chosen_targetE) #12
  %4 = load atomic i32, i32* getelementptr inbounds (%"struct.hwy::ChosenTarget", %"struct.hwy::ChosenTarget"* @_ZN3hwy13chosen_targetE, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) seq_cst, align 4
  %5 = and i32 %4, 2225
  %6 = tail call i32 @llvm.cttz.i32(i32 %5, i1 true) #12, !range !17
  %7 = zext i32 %6 to i64
  %8 = getelementptr inbounds [12 x double (%"class.jxl::Plane"*, %"struct.jxl::ButteraugliParams"*, double)*], [12 x double (%"class.jxl::Plane"*, %"struct.jxl::ButteraugliParams"*, double)*]* @_ZN3jxlL36ComputeDistancePHighwayDispatchTableE, i64 0, i64 %7
  %9 = load double (%"class.jxl::Plane"*, %"struct.jxl::ButteraugliParams"*, double)*, double (%"class.jxl::Plane"*, %"struct.jxl::ButteraugliParams"*, double)** %8, align 8
  %10 = tail call double %9(%"class.jxl::Plane"* dereferenceable(32) %0, %"struct.jxl::ButteraugliParams"* dereferenceable(16) %1, double %2) #12
  ret double %10
}

declare void @_ZN3hwy12ChosenTarget6UpdateEv(%"struct.hwy::ChosenTarget"*) local_unnamed_addr #4

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.cttz.i32(i32, i1 immarg) #11

; Function Attrs: nounwind ssp uwtable
define internal double @_ZN3hwy13FunctionCacheIdJRKN3jxl11ImageBundleES4_EE13ChooseAndCallIXadL_ZNS1_L36ComputeDistance2HighwayDispatchTableEEEEEdS4_S4_(%"class.jxl::ImageBundle"* dereferenceable(368), %"class.jxl::ImageBundle"* dereferenceable(368)) #10 align 2 {
  tail call void @_ZN3hwy12ChosenTarget6UpdateEv(%"struct.hwy::ChosenTarget"* nonnull @_ZN3hwy13chosen_targetE) #12
  %3 = load atomic i32, i32* getelementptr inbounds (%"struct.hwy::ChosenTarget", %"struct.hwy::ChosenTarget"* @_ZN3hwy13chosen_targetE, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) seq_cst, align 4
  %4 = and i32 %3, 2225
  %5 = tail call i32 @llvm.cttz.i32(i32 %4, i1 true) #12, !range !17
  %6 = zext i32 %5 to i64
  %7 = getelementptr inbounds [12 x double (%"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"*)*], [12 x double (%"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"*)*]* @_ZN3jxlL36ComputeDistance2HighwayDispatchTableE, i64 0, i64 %6
  %8 = load double (%"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"*)*, double (%"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"*)** %7, align 8
  %9 = tail call double %8(%"class.jxl::ImageBundle"* dereferenceable(368) %0, %"class.jxl::ImageBundle"* dereferenceable(368) %1) #12
  ret double %9
}

; Function Attrs: nounwind
declare void @llvm.assume(i1) #12

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="256" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+bmi,+bmi2,+cx8,+f16c,+fma,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+bmi,+bmi2,+cx8,+f16c,+fma,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="512" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+avx512bw,+avx512dq,+avx512f,+avx512vl,+bmi,+bmi2,+cx8,+f16c,+fma,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+avx512bw,+avx512dq,+avx512f,+avx512vl,+bmi,+bmi2,+cx8,+f16c,+fma,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nounwind readnone speculatable }
attributes #12 = { nounwind }
attributes #13 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!4}
!4 = distinct !{!4, !5, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm2EEEPKf: argument 0"}
!5 = distinct !{!5, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm2EEEPKf"}
!6 = !{!7}
!7 = distinct !{!7, !8, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!8 = distinct !{!8, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm4EEEPKf"}
!9 = !{!10}
!10 = distinct !{!10, !11, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!11 = distinct !{!11, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf"}
!12 = !{!13}
!13 = distinct !{!13, !11, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!14 = !{!15}
!15 = distinct !{!15, !16, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!16 = distinct !{!16, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!17 = !{i32 0, i32 33}
