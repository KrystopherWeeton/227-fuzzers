; ModuleID = '../../content/browser/compute_pressure/cpu_probe.cc'
source_filename = "../../content/browser/compute_pressure/cpu_probe.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.content::ComputePressureSample" = type { double, double }
%"class.content::CpuProbe" = type { i32 (...)** }
%"class.content::CpuProbeLinux" = type { %"class.content::CpuProbe", %"class.content::ProcfsStatCpuParser", %"class.std::__1::vector", %"class.std::__1::vector.12", i8*, i64, %"struct.content::ComputePressureSample" }
%"class.content::ProcfsStatCpuParser" = type { %"class.base::FilePath", %"class.std::__1::vector" }
%"class.base::FilePath" = type { %"class.std::__1::basic_string" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.4" }
%"class.std::__1::__compressed_pair.4" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"struct.std::__1::__compressed_pair_elem.5" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.content::ProcfsStatCpuParser::CoreTimes"*, %"struct.content::ProcfsStatCpuParser::CoreTimes"*, %"class.std::__1::__compressed_pair.7" }
%"struct.content::ProcfsStatCpuParser::CoreTimes" = type { [10 x i64] }
%"class.std::__1::__compressed_pair.7" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"struct.std::__1::__compressed_pair_elem.8" = type { %"struct.content::ProcfsStatCpuParser::CoreTimes"* }
%"class.std::__1::vector.12" = type { %"class.std::__1::__vector_base.13" }
%"class.std::__1::__vector_base.13" = type { %"class.std::__1::unique_ptr.14"*, %"class.std::__1::unique_ptr.14"*, %"class.std::__1::__compressed_pair.15" }
%"class.std::__1::unique_ptr.14" = type opaque
%"class.std::__1::__compressed_pair.15" = type { %"struct.std::__1::__compressed_pair_elem.16" }
%"struct.std::__1::__compressed_pair_elem.16" = type { %"class.std::__1::unique_ptr.14"* }

@_ZN7content8CpuProbe17kUnsupportedValueE = hidden local_unnamed_addr constant %"struct.content::ComputePressureSample" { double 0.000000e+00, double 5.000000e-01 }, align 8
@_ZTVN7content8CpuProbeE = hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.content::CpuProbe"*)* @_ZN7content8CpuProbeD2Ev to i8*), i8* bitcast (void (%"class.content::CpuProbe"*)* @_ZN7content8CpuProbeD0Ev to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*)] }, align 8

@_ZN7content8CpuProbeD1Ev = hidden unnamed_addr alias void (%"class.content::CpuProbe"*), void (%"class.content::CpuProbe"*)* @_ZN7content8CpuProbeD2Ev

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN7content8CpuProbeC2Ev(%"class.content::CpuProbe"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.content::CpuProbe", %"class.content::CpuProbe"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN7content8CpuProbeE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN7content8CpuProbeD2Ev(%"class.content::CpuProbe"* nocapture) unnamed_addr #1 align 2 {
  ret void
}

; Function Attrs: noreturn nounwind ssp uwtable
define hidden void @_ZN7content8CpuProbeD0Ev(%"class.content::CpuProbe"* nocapture readnone) unnamed_addr #2 align 2 {
  tail call void @llvm.trap() #6
  unreachable
}

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #3

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden double @_ZN7content8CpuProbe9CoreSpeedEdddd(double, double, double, double) local_unnamed_addr #1 align 2 {
  %5 = alloca double, align 8
  %6 = alloca double, align 8
  %7 = alloca i64, align 8
  store double %0, double* %5, align 8
  store double %1, double* %6, align 8
  %8 = bitcast i64* %7 to double*
  store double %3, double* %8, align 8
  %9 = fcmp ult double %0, %1
  br i1 %9, label %10, label %45

10:                                               ; preds = %4
  %11 = fcmp olt double %0, 0.000000e+00
  %12 = fcmp olt double %3, 0.000000e+00
  %13 = or i1 %11, %12
  br i1 %13, label %45, label %14

14:                                               ; preds = %10
  %15 = fcmp olt double %0, %3
  %16 = select i1 %15, double* %8, double* %5
  %17 = bitcast double* %16 to i64*
  %18 = load i64, i64* %17, align 8
  store i64 %18, i64* %7, align 8
  %19 = bitcast i64 %18 to double
  %20 = fcmp olt double %19, %1
  %21 = select i1 %20, double* %8, double* %6
  %22 = bitcast double* %21 to i64*
  %23 = load i64, i64* %22, align 8
  store i64 %23, i64* %7, align 8
  %24 = fcmp ogt double %0, %2
  %25 = fcmp olt double %1, %2
  %26 = or i1 %24, %25
  %27 = fadd double %0, %1
  %28 = fmul double %27, 5.000000e-01
  %29 = select i1 %26, double %28, double %2
  %30 = bitcast i64 %23 to double
  %31 = fcmp ole double %29, %30
  %32 = fcmp une double %29, %1
  %33 = and i1 %32, %31
  br i1 %33, label %34, label %40

34:                                               ; preds = %14
  %35 = fsub double %30, %29
  %36 = fsub double %1, %29
  %37 = fmul double %36, 2.000000e+00
  %38 = fdiv double %35, %37
  %39 = fadd double %38, 5.000000e-01
  br label %45

40:                                               ; preds = %14
  %41 = fsub double %30, %0
  %42 = fsub double %29, %0
  %43 = fmul double %42, 2.000000e+00
  %44 = fdiv double %41, %43
  br label %45

45:                                               ; preds = %10, %4, %40, %34
  %46 = phi double [ %39, %34 ], [ %44, %40 ], [ -1.000000e+00, %4 ], [ -1.000000e+00, %10 ]
  ret double %46
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.content::CpuProbe"* @_ZN7content8CpuProbe6CreateEv() local_unnamed_addr #4 align 2 {
  %1 = tail call %"class.content::CpuProbeLinux"* @_ZN7content13CpuProbeLinux6CreateEv() #7
  %2 = getelementptr inbounds %"class.content::CpuProbeLinux", %"class.content::CpuProbeLinux"* %1, i64 0, i32 0
  ret %"class.content::CpuProbe"* %2
}

declare %"class.content::CpuProbeLinux"* @_ZN7content13CpuProbeLinux6CreateEv() local_unnamed_addr #5

declare void @__cxa_pure_virtual() unnamed_addr

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { cold noreturn nounwind }
attributes #4 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn nounwind }
attributes #7 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
