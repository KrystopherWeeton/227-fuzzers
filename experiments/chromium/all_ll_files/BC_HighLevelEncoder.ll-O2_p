; ModuleID = '../../third_party/pdfium/fxbarcode/datamatrix/BC_HighLevelEncoder.cpp'
source_filename = "../../third_party/pdfium/fxbarcode/datamatrix/BC_HighLevelEncoder.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.fxcrt::WideString" = type { %"class.fxcrt::RetainPtr" }
%"class.fxcrt::RetainPtr" = type { %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.fxcrt::StringDataTemplate"* }
%"class.fxcrt::StringDataTemplate" = type <{ i64, i64, i64, [1 x i32], [4 x i8] }>
%class.CBC_EncoderContext = type { %"class.fxcrt::WideString", %"class.fxcrt::WideString", i64, i8, %"class.fxcrt::UnownedPtr", i8, i8, i64 }
%"class.fxcrt::UnownedPtr" = type { %class.CBC_SymbolInfo* }
%class.CBC_SymbolInfo = type { i32 (...)**, %"struct.CBC_SymbolInfo::Data"* }
%"struct.CBC_SymbolInfo::Data" = type { i16, i16, i16, i8, i8, i8, i8 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.std::__1::unique_ptr.1"*, %"class.std::__1::unique_ptr.1"*, %"class.std::__1::__compressed_pair.5" }
%"class.std::__1::unique_ptr.1" = type { %"class.std::__1::__compressed_pair.2" }
%"class.std::__1::__compressed_pair.2" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.std::__1::__compressed_pair_elem.3" = type { %class.CBC_Encoder* }
%class.CBC_Encoder = type { i32 (...)** }
%"class.std::__1::__compressed_pair.5" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"struct.std::__1::__compressed_pair_elem.6" = type { %"class.std::__1::unique_ptr.1"* }
%class.CBC_ASCIIEncoder = type { %class.CBC_Encoder }
%class.CBC_C40Encoder = type { %class.CBC_Encoder }
%class.CBC_TextEncoder = type { %class.CBC_C40Encoder }
%class.CBC_X12Encoder = type { %class.CBC_C40Encoder }
%class.CBC_EdifactEncoder = type { %class.CBC_Encoder }
%class.CBC_Base256Encoder = type { %class.CBC_Encoder }
%"struct.std::__1::array" = type { [6 x float] }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZNSt3__16vectorINS_10unique_ptrI11CBC_EncoderNS_14default_deleteIS2_EEEENS_9allocatorIS5_EEE21__push_back_slow_pathIS5_EEvOT_ = comdat any

@_ZN12_GLOBAL__N_114kMacro05HeaderE = internal constant [7 x i32] [i32 91, i32 41, i32 62, i32 30, i32 48, i32 53, i32 0], align 16
@_ZN12_GLOBAL__N_114kMacro06HeaderE = internal constant [7 x i32] [i32 91, i32 41, i32 62, i32 30, i32 48, i32 54, i32 0], align 16
@constinit = private unnamed_addr constant [6 x float] [float 0.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.250000e+00], align 4
@constinit.1 = private unnamed_addr constant [6 x float] [float 1.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.250000e+00], align 4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN20CBC_HighLevelEncoder15EncodeHighLevelERKN5fxcrt10WideStringE(%"class.fxcrt::WideString"* noalias sret, %"class.fxcrt::WideString"* dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %3 = alloca %class.CBC_EncoderContext, align 8
  %4 = alloca %"class.fxcrt::WideString", align 8
  %5 = alloca %"class.std::__1::vector", align 8
  %6 = alloca %"class.std::__1::unique_ptr.1", align 8
  %7 = alloca %"class.std::__1::unique_ptr.1", align 8
  %8 = alloca %"class.std::__1::unique_ptr.1", align 8
  %9 = alloca %"class.std::__1::unique_ptr.1", align 8
  %10 = alloca %"class.std::__1::unique_ptr.1", align 8
  %11 = alloca %"class.std::__1::unique_ptr.1", align 8
  %12 = alloca %"class.fxcrt::WideString", align 8
  %13 = getelementptr inbounds %"class.fxcrt::WideString", %"class.fxcrt::WideString"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %14 = load %"class.fxcrt::StringDataTemplate"*, %"class.fxcrt::StringDataTemplate"** %13, align 8
  %15 = icmp eq %"class.fxcrt::StringDataTemplate"* %14, null
  br i1 %15, label %21, label %16

16:                                               ; preds = %2
  %17 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %14, i64 0, i32 1
  %18 = load i64, i64* %17, align 8
  %19 = icmp ugt i64 %18, 3116
  br i1 %19, label %20, label %21

20:                                               ; preds = %16
  tail call void @_ZN5fxcrt10WideStringC1Ev(%"class.fxcrt::WideString"* %0) #11
  br label %317

21:                                               ; preds = %2, %16
  %22 = bitcast %class.CBC_EncoderContext* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %22) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %22, i8 -86, i64 56, i1 false)
  call void @_ZN18CBC_EncoderContextC1ERKN5fxcrt10WideStringE(%class.CBC_EncoderContext* nonnull %3, %"class.fxcrt::WideString"* dereferenceable(8) %1) #11
  %23 = getelementptr inbounds %class.CBC_EncoderContext, %class.CBC_EncoderContext* %3, i64 0, i32 6
  %24 = load i8, i8* %23, align 1, !range !2
  %25 = icmp eq i8 %24, 0
  br i1 %25, label %27, label %26

26:                                               ; preds = %21
  call void @_ZN5fxcrt10WideStringC1Ev(%"class.fxcrt::WideString"* %0) #11
  br label %316

27:                                               ; preds = %21
  %28 = load %"class.fxcrt::StringDataTemplate"*, %"class.fxcrt::StringDataTemplate"** %13, align 8
  %29 = icmp eq %"class.fxcrt::StringDataTemplate"* %28, null
  br i1 %29, label %51, label %30

30:                                               ; preds = %27
  %31 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %28, i64 0, i32 1
  %32 = load i64, i64* %31, align 8
  %33 = icmp eq i64 %32, 0
  br i1 %33, label %51, label %34

34:                                               ; preds = %30
  %35 = add i64 %32, -1
  %36 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %28, i64 0, i32 3, i64 %35
  %37 = load i32, i32* %36, align 4
  %38 = icmp eq i32 %37, 4
  br i1 %38, label %39, label %51

39:                                               ; preds = %34
  %40 = bitcast %"class.fxcrt::WideString"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %40) #11
  %41 = getelementptr inbounds %"class.fxcrt::WideString", %"class.fxcrt::WideString"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store %"class.fxcrt::StringDataTemplate"* inttoptr (i64 -6148914691236517206 to %"class.fxcrt::StringDataTemplate"*), %"class.fxcrt::StringDataTemplate"** %41, align 8
  call void @_ZNK5fxcrt10WideString5FirstEm(%"class.fxcrt::WideString"* nonnull sret %4, %"class.fxcrt::WideString"* %1, i64 6) #11
  %42 = call zeroext i1 @_ZNK5fxcrt10WideStringeqEPKw(%"class.fxcrt::WideString"* nonnull %4, i32* getelementptr inbounds ([7 x i32], [7 x i32]* @_ZN12_GLOBAL__N_114kMacro05HeaderE, i64 0, i64 0)) #11
  br i1 %42, label %45, label %43

43:                                               ; preds = %39
  %44 = call zeroext i1 @_ZNK5fxcrt10WideStringeqEPKw(%"class.fxcrt::WideString"* nonnull %4, i32* getelementptr inbounds ([7 x i32], [7 x i32]* @_ZN12_GLOBAL__N_114kMacro06HeaderE, i64 0, i64 0)) #11
  br i1 %44, label %45, label %50

45:                                               ; preds = %43, %39
  %46 = phi i32 [ 236, %39 ], [ 237, %43 ]
  call void @_ZN18CBC_EncoderContext13writeCodewordEw(%class.CBC_EncoderContext* nonnull %3, i32 signext %46) #11
  call void @_ZN18CBC_EncoderContext12setSkipAtEndEi(%class.CBC_EncoderContext* nonnull %3, i32 2) #11
  %47 = getelementptr inbounds %class.CBC_EncoderContext, %class.CBC_EncoderContext* %3, i64 0, i32 2
  %48 = load i64, i64* %47, align 8
  %49 = add i64 %48, 6
  store i64 %49, i64* %47, align 8
  br label %50

50:                                               ; preds = %45, %43
  call void @_ZN5fxcrt10WideStringD1Ev(%"class.fxcrt::WideString"* nonnull %4) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %40) #11
  br label %51

51:                                               ; preds = %27, %30, %50, %34
  %52 = bitcast %"class.std::__1::vector"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %52) #11
  %53 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %5, i64 0, i32 0, i32 0
  %54 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %5, i64 0, i32 0, i32 1
  %55 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %5, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %52, i8 0, i64 24, i1 false) #11
  %56 = bitcast %"class.std::__1::unique_ptr.1"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %56) #11
  %57 = call i8* @_Znwm(i64 8) #12
  %58 = bitcast i8* %57 to %class.CBC_ASCIIEncoder*
  call void @_ZN16CBC_ASCIIEncoderC1Ev(%class.CBC_ASCIIEncoder* nonnull %58) #11
  %59 = ptrtoint i8* %57 to i64
  %60 = bitcast %"class.std::__1::unique_ptr.1"* %6 to i64*
  store i64 %59, i64* %60, align 8
  %61 = load %"class.std::__1::unique_ptr.1"*, %"class.std::__1::unique_ptr.1"** %54, align 8
  %62 = load %"class.std::__1::unique_ptr.1"*, %"class.std::__1::unique_ptr.1"** %55, align 8
  %63 = icmp ult %"class.std::__1::unique_ptr.1"* %61, %62
  br i1 %63, label %64, label %70

64:                                               ; preds = %51
  %65 = getelementptr inbounds %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1"* %6, i64 0, i32 0, i32 0, i32 0
  store %class.CBC_Encoder* null, %class.CBC_Encoder** %65, align 8
  %66 = bitcast %"class.std::__1::unique_ptr.1"* %61 to i64*
  store i64 %59, i64* %66, align 8
  %67 = getelementptr inbounds %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1"* %61, i64 1
  %68 = ptrtoint %"class.std::__1::unique_ptr.1"* %67 to i64
  %69 = bitcast %"class.std::__1::unique_ptr.1"** %54 to i64*
  store i64 %68, i64* %69, align 8
  br label %71

70:                                               ; preds = %51
  call void @_ZNSt3__16vectorINS_10unique_ptrI11CBC_EncoderNS_14default_deleteIS2_EEEENS_9allocatorIS5_EEE21__push_back_slow_pathIS5_EEvOT_(%"class.std::__1::vector"* nonnull %5, %"class.std::__1::unique_ptr.1"* nonnull dereferenceable(8) %6) #11
  br label %71

71:                                               ; preds = %64, %70
  %72 = getelementptr inbounds %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1"* %6, i64 0, i32 0, i32 0, i32 0
  %73 = load %class.CBC_Encoder*, %class.CBC_Encoder** %72, align 8
  store %class.CBC_Encoder* null, %class.CBC_Encoder** %72, align 8
  %74 = icmp eq %class.CBC_Encoder* %73, null
  br i1 %74, label %80, label %75

75:                                               ; preds = %71
  %76 = bitcast %class.CBC_Encoder* %73 to void (%class.CBC_Encoder*)***
  %77 = load void (%class.CBC_Encoder*)**, void (%class.CBC_Encoder*)*** %76, align 8
  %78 = getelementptr inbounds void (%class.CBC_Encoder*)*, void (%class.CBC_Encoder*)** %77, i64 1
  %79 = load void (%class.CBC_Encoder*)*, void (%class.CBC_Encoder*)** %78, align 8
  call void %79(%class.CBC_Encoder* nonnull %73) #11
  br label %80

80:                                               ; preds = %75, %71
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %56) #11
  %81 = bitcast %"class.std::__1::unique_ptr.1"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %81) #11
  %82 = call i8* @_Znwm(i64 8) #12
  %83 = bitcast i8* %82 to %class.CBC_C40Encoder*
  call void @_ZN14CBC_C40EncoderC1Ev(%class.CBC_C40Encoder* nonnull %83) #11
  %84 = ptrtoint i8* %82 to i64
  %85 = bitcast %"class.std::__1::unique_ptr.1"* %7 to i64*
  store i64 %84, i64* %85, align 8
  %86 = load %"class.std::__1::unique_ptr.1"*, %"class.std::__1::unique_ptr.1"** %54, align 8
  %87 = load %"class.std::__1::unique_ptr.1"*, %"class.std::__1::unique_ptr.1"** %55, align 8
  %88 = icmp ult %"class.std::__1::unique_ptr.1"* %86, %87
  br i1 %88, label %89, label %95

89:                                               ; preds = %80
  %90 = getelementptr inbounds %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1"* %7, i64 0, i32 0, i32 0, i32 0
  store %class.CBC_Encoder* null, %class.CBC_Encoder** %90, align 8
  %91 = bitcast %"class.std::__1::unique_ptr.1"* %86 to i64*
  store i64 %84, i64* %91, align 8
  %92 = getelementptr inbounds %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1"* %86, i64 1
  %93 = ptrtoint %"class.std::__1::unique_ptr.1"* %92 to i64
  %94 = bitcast %"class.std::__1::unique_ptr.1"** %54 to i64*
  store i64 %93, i64* %94, align 8
  br label %96

95:                                               ; preds = %80
  call void @_ZNSt3__16vectorINS_10unique_ptrI11CBC_EncoderNS_14default_deleteIS2_EEEENS_9allocatorIS5_EEE21__push_back_slow_pathIS5_EEvOT_(%"class.std::__1::vector"* nonnull %5, %"class.std::__1::unique_ptr.1"* nonnull dereferenceable(8) %7) #11
  br label %96

96:                                               ; preds = %89, %95
  %97 = getelementptr inbounds %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1"* %7, i64 0, i32 0, i32 0, i32 0
  %98 = load %class.CBC_Encoder*, %class.CBC_Encoder** %97, align 8
  store %class.CBC_Encoder* null, %class.CBC_Encoder** %97, align 8
  %99 = icmp eq %class.CBC_Encoder* %98, null
  br i1 %99, label %105, label %100

100:                                              ; preds = %96
  %101 = bitcast %class.CBC_Encoder* %98 to void (%class.CBC_Encoder*)***
  %102 = load void (%class.CBC_Encoder*)**, void (%class.CBC_Encoder*)*** %101, align 8
  %103 = getelementptr inbounds void (%class.CBC_Encoder*)*, void (%class.CBC_Encoder*)** %102, i64 1
  %104 = load void (%class.CBC_Encoder*)*, void (%class.CBC_Encoder*)** %103, align 8
  call void %104(%class.CBC_Encoder* nonnull %98) #11
  br label %105

105:                                              ; preds = %100, %96
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %81) #11
  %106 = bitcast %"class.std::__1::unique_ptr.1"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %106) #11
  %107 = call i8* @_Znwm(i64 8) #12
  %108 = bitcast i8* %107 to %class.CBC_TextEncoder*
  call void @_ZN15CBC_TextEncoderC1Ev(%class.CBC_TextEncoder* nonnull %108) #11
  %109 = ptrtoint i8* %107 to i64
  %110 = bitcast %"class.std::__1::unique_ptr.1"* %8 to i64*
  store i64 %109, i64* %110, align 8
  %111 = load %"class.std::__1::unique_ptr.1"*, %"class.std::__1::unique_ptr.1"** %54, align 8
  %112 = load %"class.std::__1::unique_ptr.1"*, %"class.std::__1::unique_ptr.1"** %55, align 8
  %113 = icmp ult %"class.std::__1::unique_ptr.1"* %111, %112
  br i1 %113, label %114, label %120

114:                                              ; preds = %105
  %115 = getelementptr inbounds %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1"* %8, i64 0, i32 0, i32 0, i32 0
  store %class.CBC_Encoder* null, %class.CBC_Encoder** %115, align 8
  %116 = bitcast %"class.std::__1::unique_ptr.1"* %111 to i64*
  store i64 %109, i64* %116, align 8
  %117 = getelementptr inbounds %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1"* %111, i64 1
  %118 = ptrtoint %"class.std::__1::unique_ptr.1"* %117 to i64
  %119 = bitcast %"class.std::__1::unique_ptr.1"** %54 to i64*
  store i64 %118, i64* %119, align 8
  br label %121

120:                                              ; preds = %105
  call void @_ZNSt3__16vectorINS_10unique_ptrI11CBC_EncoderNS_14default_deleteIS2_EEEENS_9allocatorIS5_EEE21__push_back_slow_pathIS5_EEvOT_(%"class.std::__1::vector"* nonnull %5, %"class.std::__1::unique_ptr.1"* nonnull dereferenceable(8) %8) #11
  br label %121

121:                                              ; preds = %114, %120
  %122 = getelementptr inbounds %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1"* %8, i64 0, i32 0, i32 0, i32 0
  %123 = load %class.CBC_Encoder*, %class.CBC_Encoder** %122, align 8
  store %class.CBC_Encoder* null, %class.CBC_Encoder** %122, align 8
  %124 = icmp eq %class.CBC_Encoder* %123, null
  br i1 %124, label %130, label %125

125:                                              ; preds = %121
  %126 = bitcast %class.CBC_Encoder* %123 to void (%class.CBC_Encoder*)***
  %127 = load void (%class.CBC_Encoder*)**, void (%class.CBC_Encoder*)*** %126, align 8
  %128 = getelementptr inbounds void (%class.CBC_Encoder*)*, void (%class.CBC_Encoder*)** %127, i64 1
  %129 = load void (%class.CBC_Encoder*)*, void (%class.CBC_Encoder*)** %128, align 8
  call void %129(%class.CBC_Encoder* nonnull %123) #11
  br label %130

130:                                              ; preds = %125, %121
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %106) #11
  %131 = bitcast %"class.std::__1::unique_ptr.1"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %131) #11
  %132 = call i8* @_Znwm(i64 8) #12
  %133 = bitcast i8* %132 to %class.CBC_X12Encoder*
  call void @_ZN14CBC_X12EncoderC1Ev(%class.CBC_X12Encoder* nonnull %133) #11
  %134 = ptrtoint i8* %132 to i64
  %135 = bitcast %"class.std::__1::unique_ptr.1"* %9 to i64*
  store i64 %134, i64* %135, align 8
  %136 = load %"class.std::__1::unique_ptr.1"*, %"class.std::__1::unique_ptr.1"** %54, align 8
  %137 = load %"class.std::__1::unique_ptr.1"*, %"class.std::__1::unique_ptr.1"** %55, align 8
  %138 = icmp ult %"class.std::__1::unique_ptr.1"* %136, %137
  br i1 %138, label %139, label %145

139:                                              ; preds = %130
  %140 = getelementptr inbounds %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1"* %9, i64 0, i32 0, i32 0, i32 0
  store %class.CBC_Encoder* null, %class.CBC_Encoder** %140, align 8
  %141 = bitcast %"class.std::__1::unique_ptr.1"* %136 to i64*
  store i64 %134, i64* %141, align 8
  %142 = getelementptr inbounds %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1"* %136, i64 1
  %143 = ptrtoint %"class.std::__1::unique_ptr.1"* %142 to i64
  %144 = bitcast %"class.std::__1::unique_ptr.1"** %54 to i64*
  store i64 %143, i64* %144, align 8
  br label %146

145:                                              ; preds = %130
  call void @_ZNSt3__16vectorINS_10unique_ptrI11CBC_EncoderNS_14default_deleteIS2_EEEENS_9allocatorIS5_EEE21__push_back_slow_pathIS5_EEvOT_(%"class.std::__1::vector"* nonnull %5, %"class.std::__1::unique_ptr.1"* nonnull dereferenceable(8) %9) #11
  br label %146

146:                                              ; preds = %139, %145
  %147 = getelementptr inbounds %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1"* %9, i64 0, i32 0, i32 0, i32 0
  %148 = load %class.CBC_Encoder*, %class.CBC_Encoder** %147, align 8
  store %class.CBC_Encoder* null, %class.CBC_Encoder** %147, align 8
  %149 = icmp eq %class.CBC_Encoder* %148, null
  br i1 %149, label %155, label %150

150:                                              ; preds = %146
  %151 = bitcast %class.CBC_Encoder* %148 to void (%class.CBC_Encoder*)***
  %152 = load void (%class.CBC_Encoder*)**, void (%class.CBC_Encoder*)*** %151, align 8
  %153 = getelementptr inbounds void (%class.CBC_Encoder*)*, void (%class.CBC_Encoder*)** %152, i64 1
  %154 = load void (%class.CBC_Encoder*)*, void (%class.CBC_Encoder*)** %153, align 8
  call void %154(%class.CBC_Encoder* nonnull %148) #11
  br label %155

155:                                              ; preds = %150, %146
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %131) #11
  %156 = bitcast %"class.std::__1::unique_ptr.1"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %156) #11
  %157 = call i8* @_Znwm(i64 8) #12
  %158 = bitcast i8* %157 to %class.CBC_EdifactEncoder*
  call void @_ZN18CBC_EdifactEncoderC1Ev(%class.CBC_EdifactEncoder* nonnull %158) #11
  %159 = ptrtoint i8* %157 to i64
  %160 = bitcast %"class.std::__1::unique_ptr.1"* %10 to i64*
  store i64 %159, i64* %160, align 8
  %161 = load %"class.std::__1::unique_ptr.1"*, %"class.std::__1::unique_ptr.1"** %54, align 8
  %162 = load %"class.std::__1::unique_ptr.1"*, %"class.std::__1::unique_ptr.1"** %55, align 8
  %163 = icmp ult %"class.std::__1::unique_ptr.1"* %161, %162
  br i1 %163, label %164, label %170

164:                                              ; preds = %155
  %165 = getelementptr inbounds %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1"* %10, i64 0, i32 0, i32 0, i32 0
  store %class.CBC_Encoder* null, %class.CBC_Encoder** %165, align 8
  %166 = bitcast %"class.std::__1::unique_ptr.1"* %161 to i64*
  store i64 %159, i64* %166, align 8
  %167 = getelementptr inbounds %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1"* %161, i64 1
  %168 = ptrtoint %"class.std::__1::unique_ptr.1"* %167 to i64
  %169 = bitcast %"class.std::__1::unique_ptr.1"** %54 to i64*
  store i64 %168, i64* %169, align 8
  br label %171

170:                                              ; preds = %155
  call void @_ZNSt3__16vectorINS_10unique_ptrI11CBC_EncoderNS_14default_deleteIS2_EEEENS_9allocatorIS5_EEE21__push_back_slow_pathIS5_EEvOT_(%"class.std::__1::vector"* nonnull %5, %"class.std::__1::unique_ptr.1"* nonnull dereferenceable(8) %10) #11
  br label %171

171:                                              ; preds = %164, %170
  %172 = getelementptr inbounds %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1"* %10, i64 0, i32 0, i32 0, i32 0
  %173 = load %class.CBC_Encoder*, %class.CBC_Encoder** %172, align 8
  store %class.CBC_Encoder* null, %class.CBC_Encoder** %172, align 8
  %174 = icmp eq %class.CBC_Encoder* %173, null
  br i1 %174, label %180, label %175

175:                                              ; preds = %171
  %176 = bitcast %class.CBC_Encoder* %173 to void (%class.CBC_Encoder*)***
  %177 = load void (%class.CBC_Encoder*)**, void (%class.CBC_Encoder*)*** %176, align 8
  %178 = getelementptr inbounds void (%class.CBC_Encoder*)*, void (%class.CBC_Encoder*)** %177, i64 1
  %179 = load void (%class.CBC_Encoder*)*, void (%class.CBC_Encoder*)** %178, align 8
  call void %179(%class.CBC_Encoder* nonnull %173) #11
  br label %180

180:                                              ; preds = %175, %171
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %156) #11
  %181 = bitcast %"class.std::__1::unique_ptr.1"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %181) #11
  %182 = call i8* @_Znwm(i64 8) #12
  %183 = bitcast i8* %182 to %class.CBC_Base256Encoder*
  call void @_ZN18CBC_Base256EncoderC1Ev(%class.CBC_Base256Encoder* nonnull %183) #11
  %184 = ptrtoint i8* %182 to i64
  %185 = bitcast %"class.std::__1::unique_ptr.1"* %11 to i64*
  store i64 %184, i64* %185, align 8
  %186 = load %"class.std::__1::unique_ptr.1"*, %"class.std::__1::unique_ptr.1"** %54, align 8
  %187 = load %"class.std::__1::unique_ptr.1"*, %"class.std::__1::unique_ptr.1"** %55, align 8
  %188 = icmp ult %"class.std::__1::unique_ptr.1"* %186, %187
  br i1 %188, label %189, label %195

189:                                              ; preds = %180
  %190 = getelementptr inbounds %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1"* %11, i64 0, i32 0, i32 0, i32 0
  store %class.CBC_Encoder* null, %class.CBC_Encoder** %190, align 8
  %191 = bitcast %"class.std::__1::unique_ptr.1"* %186 to i64*
  store i64 %184, i64* %191, align 8
  %192 = getelementptr inbounds %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1"* %186, i64 1
  %193 = ptrtoint %"class.std::__1::unique_ptr.1"* %192 to i64
  %194 = bitcast %"class.std::__1::unique_ptr.1"** %54 to i64*
  store i64 %193, i64* %194, align 8
  br label %196

195:                                              ; preds = %180
  call void @_ZNSt3__16vectorINS_10unique_ptrI11CBC_EncoderNS_14default_deleteIS2_EEEENS_9allocatorIS5_EEE21__push_back_slow_pathIS5_EEvOT_(%"class.std::__1::vector"* nonnull %5, %"class.std::__1::unique_ptr.1"* nonnull dereferenceable(8) %11) #11
  br label %196

196:                                              ; preds = %189, %195
  %197 = getelementptr inbounds %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1"* %11, i64 0, i32 0, i32 0, i32 0
  %198 = load %class.CBC_Encoder*, %class.CBC_Encoder** %197, align 8
  store %class.CBC_Encoder* null, %class.CBC_Encoder** %197, align 8
  %199 = icmp eq %class.CBC_Encoder* %198, null
  br i1 %199, label %205, label %200

200:                                              ; preds = %196
  %201 = bitcast %class.CBC_Encoder* %198 to void (%class.CBC_Encoder*)***
  %202 = load void (%class.CBC_Encoder*)**, void (%class.CBC_Encoder*)*** %201, align 8
  %203 = getelementptr inbounds void (%class.CBC_Encoder*)*, void (%class.CBC_Encoder*)** %202, i64 1
  %204 = load void (%class.CBC_Encoder*)*, void (%class.CBC_Encoder*)** %203, align 8
  call void %204(%class.CBC_Encoder* nonnull %198) #11
  br label %205

205:                                              ; preds = %200, %196
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %181) #11
  %206 = call zeroext i1 @_ZN18CBC_EncoderContext17hasMoreCharactersEv(%class.CBC_EncoderContext* nonnull %3) #11
  br i1 %206, label %207, label %228

207:                                              ; preds = %205
  %208 = getelementptr inbounds %class.CBC_EncoderContext, %class.CBC_EncoderContext* %3, i64 0, i32 3
  br label %209

209:                                              ; preds = %207, %225
  %210 = phi i8 [ 0, %207 ], [ %226, %225 ]
  %211 = sext i8 %210 to i64
  %212 = load %"class.std::__1::unique_ptr.1"*, %"class.std::__1::unique_ptr.1"** %53, align 8
  %213 = getelementptr inbounds %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1"* %212, i64 %211, i32 0, i32 0, i32 0
  %214 = load %class.CBC_Encoder*, %class.CBC_Encoder** %213, align 8
  %215 = bitcast %class.CBC_Encoder* %214 to i1 (%class.CBC_Encoder*, %class.CBC_EncoderContext*)***
  %216 = load i1 (%class.CBC_Encoder*, %class.CBC_EncoderContext*)**, i1 (%class.CBC_Encoder*, %class.CBC_EncoderContext*)*** %215, align 8
  %217 = getelementptr inbounds i1 (%class.CBC_Encoder*, %class.CBC_EncoderContext*)*, i1 (%class.CBC_Encoder*, %class.CBC_EncoderContext*)** %216, i64 3
  %218 = load i1 (%class.CBC_Encoder*, %class.CBC_EncoderContext*)*, i1 (%class.CBC_Encoder*, %class.CBC_EncoderContext*)** %217, align 8
  %219 = call zeroext i1 %218(%class.CBC_Encoder* %214, %class.CBC_EncoderContext* nonnull %3) #11
  br i1 %219, label %221, label %220

220:                                              ; preds = %209
  call void @_ZN5fxcrt10WideStringC1Ev(%"class.fxcrt::WideString"* %0) #11
  br label %290

221:                                              ; preds = %209
  %222 = load i8, i8* %208, align 8
  %223 = icmp eq i8 %222, -1
  br i1 %223, label %225, label %224

224:                                              ; preds = %221
  call void @_ZN18CBC_EncoderContext18ResetEncoderSignalEv(%class.CBC_EncoderContext* nonnull %3) #11
  br label %225

225:                                              ; preds = %221, %224
  %226 = phi i8 [ %222, %224 ], [ %210, %221 ]
  %227 = call zeroext i1 @_ZN18CBC_EncoderContext17hasMoreCharactersEv(%class.CBC_EncoderContext* nonnull %3) #11
  br i1 %227, label %209, label %228

228:                                              ; preds = %225, %205
  %229 = phi i8 [ 0, %205 ], [ %226, %225 ]
  %230 = getelementptr inbounds %class.CBC_EncoderContext, %class.CBC_EncoderContext* %3, i64 0, i32 1
  %231 = getelementptr inbounds %"class.fxcrt::WideString", %"class.fxcrt::WideString"* %230, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %232 = load %"class.fxcrt::StringDataTemplate"*, %"class.fxcrt::StringDataTemplate"** %231, align 8
  %233 = icmp eq %"class.fxcrt::StringDataTemplate"* %232, null
  br i1 %233, label %237, label %234

234:                                              ; preds = %228
  %235 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %232, i64 0, i32 1
  %236 = load i64, i64* %235, align 8
  br label %237

237:                                              ; preds = %228, %234
  %238 = phi i64 [ %236, %234 ], [ 0, %228 ]
  %239 = call zeroext i1 @_ZN18CBC_EncoderContext16UpdateSymbolInfoEv(%class.CBC_EncoderContext* nonnull %3) #11
  br i1 %239, label %241, label %240

240:                                              ; preds = %237
  call void @_ZN5fxcrt10WideStringC1Ev(%"class.fxcrt::WideString"* %0) #11
  br label %290

241:                                              ; preds = %237
  %242 = getelementptr inbounds %class.CBC_EncoderContext, %class.CBC_EncoderContext* %3, i64 0, i32 4, i32 0
  %243 = load %class.CBC_SymbolInfo*, %class.CBC_SymbolInfo** %242, align 8
  %244 = getelementptr inbounds %class.CBC_SymbolInfo, %class.CBC_SymbolInfo* %243, i64 0, i32 1
  %245 = load %"struct.CBC_SymbolInfo::Data"*, %"struct.CBC_SymbolInfo::Data"** %244, align 8
  %246 = getelementptr inbounds %"struct.CBC_SymbolInfo::Data", %"struct.CBC_SymbolInfo::Data"* %245, i64 0, i32 0
  %247 = load i16, i16* %246, align 2
  %248 = sext i16 %247 to i64
  %249 = icmp ult i64 %238, %248
  br i1 %249, label %250, label %252

250:                                              ; preds = %241
  switch i8 %229, label %251 [
    i8 5, label %252
    i8 0, label %252
  ]

251:                                              ; preds = %250
  call void @_ZN18CBC_EncoderContext13writeCodewordEw(%class.CBC_EncoderContext* nonnull %3, i32 signext 254) #11
  br label %252

252:                                              ; preds = %250, %250, %251, %241
  %253 = bitcast %"class.fxcrt::WideString"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %253) #11
  %254 = getelementptr inbounds %"class.fxcrt::WideString", %"class.fxcrt::WideString"* %12, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store %"class.fxcrt::StringDataTemplate"* inttoptr (i64 -6148914691236517206 to %"class.fxcrt::StringDataTemplate"*), %"class.fxcrt::StringDataTemplate"** %254, align 8
  call void @_ZN5fxcrt10WideStringC1ERKS0_(%"class.fxcrt::WideString"* nonnull %12, %"class.fxcrt::WideString"* dereferenceable(8) %230) #11
  %255 = load %"class.fxcrt::StringDataTemplate"*, %"class.fxcrt::StringDataTemplate"** %254, align 8
  %256 = icmp eq %"class.fxcrt::StringDataTemplate"* %255, null
  br i1 %256, label %260, label %257

257:                                              ; preds = %252
  %258 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %255, i64 0, i32 1
  %259 = load i64, i64* %258, align 8
  br label %260

260:                                              ; preds = %252, %257
  %261 = phi i64 [ %259, %257 ], [ 0, %252 ]
  %262 = icmp ult i64 %261, %248
  br i1 %262, label %263, label %266

263:                                              ; preds = %260, %279
  %264 = phi i32 [ %288, %279 ], [ 129, %260 ]
  %265 = call dereferenceable(8) %"class.fxcrt::WideString"* @_ZN5fxcrt10WideStringpLEw(%"class.fxcrt::WideString"* nonnull %12, i32 signext %264) #11
  br label %266

266:                                              ; preds = %263, %260
  %267 = load %"class.fxcrt::StringDataTemplate"*, %"class.fxcrt::StringDataTemplate"** %254, align 8
  %268 = icmp eq %"class.fxcrt::StringDataTemplate"* %267, null
  br i1 %268, label %272, label %269

269:                                              ; preds = %266
  %270 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %267, i64 0, i32 1
  %271 = load i64, i64* %270, align 8
  br label %272

272:                                              ; preds = %266, %269
  %273 = phi i64 [ %271, %269 ], [ 0, %266 ]
  %274 = icmp ult i64 %273, %248
  br i1 %274, label %275, label %289

275:                                              ; preds = %272
  br i1 %268, label %279, label %276

276:                                              ; preds = %275
  %277 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %267, i64 0, i32 1
  %278 = load i64, i64* %277, align 8
  br label %279

279:                                              ; preds = %275, %276
  %280 = phi i64 [ %278, %276 ], [ 0, %275 ]
  %281 = trunc i64 %280 to i32
  %282 = mul i32 %281, 149
  %283 = add i32 %282, 149
  %284 = srem i32 %283, 253
  %285 = add nsw i32 %284, 130
  %286 = icmp slt i32 %285, 255
  %287 = add nsw i32 %284, -124
  %288 = select i1 %286, i32 %285, i32 %287
  br label %263

289:                                              ; preds = %272
  call void @_ZN5fxcrt10WideStringC1EOS0_(%"class.fxcrt::WideString"* %0, %"class.fxcrt::WideString"* nonnull dereferenceable(8) %12) #11
  call void @_ZN5fxcrt10WideStringD1Ev(%"class.fxcrt::WideString"* nonnull %12) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %253) #11
  br label %290

290:                                              ; preds = %240, %289, %220
  %291 = load %"class.std::__1::unique_ptr.1"*, %"class.std::__1::unique_ptr.1"** %53, align 8
  %292 = icmp eq %"class.std::__1::unique_ptr.1"* %291, null
  br i1 %292, label %315, label %293

293:                                              ; preds = %290
  %294 = bitcast %"class.std::__1::unique_ptr.1"* %291 to i8*
  %295 = load %"class.std::__1::unique_ptr.1"*, %"class.std::__1::unique_ptr.1"** %54, align 8
  %296 = icmp eq %"class.std::__1::unique_ptr.1"* %295, %291
  br i1 %296, label %313, label %297

297:                                              ; preds = %293, %308
  %298 = phi %"class.std::__1::unique_ptr.1"* [ %299, %308 ], [ %295, %293 ]
  %299 = getelementptr inbounds %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1"* %298, i64 -1
  %300 = getelementptr inbounds %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1"* %299, i64 0, i32 0, i32 0, i32 0
  %301 = load %class.CBC_Encoder*, %class.CBC_Encoder** %300, align 8
  store %class.CBC_Encoder* null, %class.CBC_Encoder** %300, align 8
  %302 = icmp eq %class.CBC_Encoder* %301, null
  br i1 %302, label %308, label %303

303:                                              ; preds = %297
  %304 = bitcast %class.CBC_Encoder* %301 to void (%class.CBC_Encoder*)***
  %305 = load void (%class.CBC_Encoder*)**, void (%class.CBC_Encoder*)*** %304, align 8
  %306 = getelementptr inbounds void (%class.CBC_Encoder*)*, void (%class.CBC_Encoder*)** %305, i64 1
  %307 = load void (%class.CBC_Encoder*)*, void (%class.CBC_Encoder*)** %306, align 8
  call void %307(%class.CBC_Encoder* nonnull %301) #11
  br label %308

308:                                              ; preds = %303, %297
  %309 = icmp eq %"class.std::__1::unique_ptr.1"* %299, %291
  br i1 %309, label %310, label %297

310:                                              ; preds = %308
  %311 = bitcast %"class.std::__1::vector"* %5 to i8**
  %312 = load i8*, i8** %311, align 8
  br label %313

313:                                              ; preds = %310, %293
  %314 = phi i8* [ %312, %310 ], [ %294, %293 ]
  store %"class.std::__1::unique_ptr.1"* %291, %"class.std::__1::unique_ptr.1"** %54, align 8
  call void @_ZdlPv(i8* %314) #12
  br label %315

315:                                              ; preds = %290, %313
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %52) #11
  br label %316

316:                                              ; preds = %315, %26
  call void @_ZN18CBC_EncoderContextD1Ev(%class.CBC_EncoderContext* nonnull %3) #11
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %22) #11
  br label %317

317:                                              ; preds = %316, %20
  ret void
}

declare void @_ZN5fxcrt10WideStringC1Ev(%"class.fxcrt::WideString"*) unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

declare void @_ZN18CBC_EncoderContextC1ERKN5fxcrt10WideStringE(%class.CBC_EncoderContext*, %"class.fxcrt::WideString"* dereferenceable(8)) unnamed_addr #1

declare void @_ZNK5fxcrt10WideString5FirstEm(%"class.fxcrt::WideString"* sret, %"class.fxcrt::WideString"*, i64) local_unnamed_addr #1

declare zeroext i1 @_ZNK5fxcrt10WideStringeqEPKw(%"class.fxcrt::WideString"*, i32*) local_unnamed_addr #1

declare void @_ZN18CBC_EncoderContext13writeCodewordEw(%class.CBC_EncoderContext*, i32 signext) local_unnamed_addr #1

declare void @_ZN18CBC_EncoderContext12setSkipAtEndEi(%class.CBC_EncoderContext*, i32) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN5fxcrt10WideStringD1Ev(%"class.fxcrt::WideString"*) unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

declare zeroext i1 @_ZN18CBC_EncoderContext17hasMoreCharactersEv(%class.CBC_EncoderContext*) local_unnamed_addr #1

declare void @_ZN18CBC_EncoderContext18ResetEncoderSignalEv(%class.CBC_EncoderContext*) local_unnamed_addr #1

declare zeroext i1 @_ZN18CBC_EncoderContext16UpdateSymbolInfoEv(%class.CBC_EncoderContext*) local_unnamed_addr #1

declare void @_ZN5fxcrt10WideStringC1ERKS0_(%"class.fxcrt::WideString"*, %"class.fxcrt::WideString"* dereferenceable(8)) unnamed_addr #1

declare dereferenceable(8) %"class.fxcrt::WideString"* @_ZN5fxcrt10WideStringpLEw(%"class.fxcrt::WideString"*, i32 signext) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN5fxcrt10WideStringC1EOS0_(%"class.fxcrt::WideString"*, %"class.fxcrt::WideString"* dereferenceable(8)) unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN18CBC_EncoderContextD1Ev(%class.CBC_EncoderContext*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden signext i8 @_ZN20CBC_HighLevelEncoder13LookAheadTestERKN5fxcrt10WideStringEmNS_8EncodingE(%"class.fxcrt::WideString"* nocapture readonly dereferenceable(8), i64, i8 signext) local_unnamed_addr #0 align 2 {
  %4 = alloca %"struct.std::__1::array", align 4
  %5 = getelementptr inbounds %"class.fxcrt::WideString", %"class.fxcrt::WideString"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %6 = load %"class.fxcrt::StringDataTemplate"*, %"class.fxcrt::StringDataTemplate"** %5, align 8
  %7 = icmp eq %"class.fxcrt::StringDataTemplate"* %6, null
  br i1 %7, label %381, label %8

8:                                                ; preds = %3
  %9 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %6, i64 0, i32 1
  %10 = load i64, i64* %9, align 8
  %11 = icmp ugt i64 %10, %1
  br i1 %11, label %12, label %381

12:                                               ; preds = %8
  %13 = bitcast %"struct.std::__1::array"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %13) #11
  %14 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %4, i64 0, i32 0, i64 0
  %15 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %4, i64 0, i32 0, i64 1
  %16 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %4, i64 0, i32 0, i64 2
  %17 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %4, i64 0, i32 0, i64 3
  %18 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %4, i64 0, i32 0, i64 4
  %19 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %4, i64 0, i32 0, i64 5
  %20 = icmp eq i8 %2, 0
  %21 = bitcast %"struct.std::__1::array"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %21, i8 -1, i64 24, i1 false)
  br i1 %20, label %22, label %23

22:                                               ; preds = %12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %13, i8* align 4 bitcast ([6 x float]* @constinit to i8*), i64 24, i1 false)
  br label %26

23:                                               ; preds = %12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %13, i8* align 4 bitcast ([6 x float]* @constinit.1 to i8*), i64 24, i1 false)
  %24 = sext i8 %2 to i64
  %25 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %4, i64 0, i32 0, i64 %24
  store float 0.000000e+00, float* %25, align 4
  br label %26

26:                                               ; preds = %23, %22
  %27 = load float, float* %14, align 4
  %28 = load float, float* %15, align 4
  %29 = load float, float* %16, align 4
  %30 = load float, float* %17, align 4
  %31 = load float, float* %18, align 4
  %32 = load float, float* %19, align 4
  br label %33

33:                                               ; preds = %375, %26
  %34 = phi float [ %32, %26 ], [ %226, %375 ]
  %35 = phi float [ %31, %26 ], [ %225, %375 ]
  %36 = phi float [ %30, %26 ], [ %216, %375 ]
  %37 = phi float [ %29, %26 ], [ %205, %375 ]
  %38 = phi float [ %28, %26 ], [ %204, %375 ]
  %39 = phi float [ %27, %26 ], [ %179, %375 ]
  %40 = phi %"class.fxcrt::StringDataTemplate"* [ %6, %26 ], [ %376, %375 ]
  %41 = phi i64 [ 0, %26 ], [ %163, %375 ]
  %42 = add i64 %41, %1
  %43 = icmp eq %"class.fxcrt::StringDataTemplate"* %40, null
  br i1 %43, label %47, label %44

44:                                               ; preds = %33
  %45 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %40, i64 0, i32 1
  %46 = load i64, i64* %45, align 8
  br label %47

47:                                               ; preds = %33, %44
  %48 = phi i64 [ %46, %44 ], [ 0, %33 ]
  %49 = icmp eq i64 %42, %48
  br i1 %49, label %50, label %154

50:                                               ; preds = %47
  store float %39, float* %14, align 4
  store float %38, float* %15, align 4
  store float %37, float* %16, align 4
  store float %36, float* %17, align 4
  store float %35, float* %18, align 4
  store float %34, float* %19, align 4
  %51 = call float @llvm.ceil.f32(float %39) #11
  %52 = fptosi float %51 to i32
  %53 = icmp eq i32 %52, 2147483647
  %54 = load float, float* %15, align 4
  %55 = call float @llvm.ceil.f32(float %54) #11
  %56 = fptosi float %55 to i32
  %57 = icmp sgt i32 %52, %56
  br i1 %57, label %65, label %58

58:                                               ; preds = %50
  %59 = select i1 %53, i32 170, i32 0
  %60 = select i1 %53, i32 171, i32 1
  %61 = select i1 %53, i8 -86, i8 0
  %62 = icmp eq i32 %52, %56
  %63 = zext i1 %62 to i32
  %64 = or i32 %59, %63
  br label %65

65:                                               ; preds = %58, %50
  %66 = phi i32 [ 0, %50 ], [ %60, %58 ]
  %67 = phi i32 [ 1, %50 ], [ %64, %58 ]
  %68 = phi i8 [ 0, %50 ], [ %61, %58 ]
  %69 = phi i32 [ %56, %50 ], [ %52, %58 ]
  %70 = load float, float* %16, align 4
  %71 = call float @llvm.ceil.f32(float %70) #11
  %72 = fptosi float %71 to i32
  %73 = icmp sgt i32 %69, %72
  br i1 %73, label %78, label %74

74:                                               ; preds = %65
  %75 = icmp eq i32 %69, %72
  %76 = zext i1 %75 to i8
  %77 = or i8 %68, %76
  br label %78

78:                                               ; preds = %74, %65
  %79 = phi i32 [ 0, %65 ], [ %66, %74 ]
  %80 = phi i32 [ 0, %65 ], [ %67, %74 ]
  %81 = phi i8 [ 1, %65 ], [ %77, %74 ]
  %82 = phi i8 [ 0, %65 ], [ %68, %74 ]
  %83 = phi i32 [ %72, %65 ], [ %69, %74 ]
  %84 = load float, float* %17, align 4
  %85 = call float @llvm.ceil.f32(float %84) #11
  %86 = fptosi float %85 to i32
  %87 = icmp sgt i32 %83, %86
  br i1 %87, label %92, label %88

88:                                               ; preds = %78
  %89 = icmp eq i32 %83, %86
  %90 = zext i1 %89 to i8
  %91 = add nsw i8 %82, %90
  br label %92

92:                                               ; preds = %88, %78
  %93 = phi i32 [ 0, %78 ], [ %79, %88 ]
  %94 = phi i32 [ 0, %78 ], [ %80, %88 ]
  %95 = phi i8 [ 0, %78 ], [ %81, %88 ]
  %96 = phi i8 [ 1, %78 ], [ %91, %88 ]
  %97 = phi i8 [ 0, %78 ], [ %82, %88 ]
  %98 = phi i32 [ %86, %78 ], [ %83, %88 ]
  %99 = load float, float* %18, align 4
  %100 = call float @llvm.ceil.f32(float %99) #11
  %101 = fptosi float %100 to i32
  %102 = icmp sgt i32 %98, %101
  br i1 %102, label %107, label %103

103:                                              ; preds = %92
  %104 = icmp eq i32 %98, %101
  %105 = zext i1 %104 to i8
  %106 = add nsw i8 %97, %105
  br label %107

107:                                              ; preds = %103, %92
  %108 = phi i32 [ 0, %92 ], [ %93, %103 ]
  %109 = phi i32 [ 0, %92 ], [ %94, %103 ]
  %110 = phi i8 [ 0, %92 ], [ %95, %103 ]
  %111 = phi i8 [ 0, %92 ], [ %96, %103 ]
  %112 = phi i8 [ 1, %92 ], [ %106, %103 ]
  %113 = phi i8 [ 0, %92 ], [ %97, %103 ]
  %114 = phi i32 [ %101, %92 ], [ %98, %103 ]
  %115 = load float, float* %19, align 4
  %116 = call float @llvm.ceil.f32(float %115) #11
  %117 = fptosi float %116 to i32
  %118 = icmp sgt i32 %114, %117
  br i1 %118, label %123, label %119

119:                                              ; preds = %107
  %120 = icmp eq i32 %114, %117
  %121 = zext i1 %120 to i8
  %122 = add nsw i8 %113, %121
  br label %123

123:                                              ; preds = %119, %107
  %124 = phi i32 [ 0, %107 ], [ %108, %119 ]
  %125 = phi i32 [ 0, %107 ], [ %109, %119 ]
  %126 = phi i8 [ 0, %107 ], [ %110, %119 ]
  %127 = phi i8 [ 0, %107 ], [ %111, %119 ]
  %128 = phi i8 [ 0, %107 ], [ %112, %119 ]
  %129 = phi i8 [ 1, %107 ], [ %122, %119 ]
  %130 = phi i32 [ %117, %107 ], [ %114, %119 ]
  %131 = icmp eq i32 %130, %52
  br i1 %131, label %379, label %132

132:                                              ; preds = %123
  %133 = and i32 %124, 255
  %134 = and i32 %125, 255
  %135 = add nuw nsw i32 %134, %133
  %136 = zext i8 %126 to i32
  %137 = add nuw nsw i32 %135, %136
  %138 = zext i8 %127 to i32
  %139 = add nuw nsw i32 %137, %138
  %140 = zext i8 %128 to i32
  %141 = add nuw nsw i32 %139, %140
  %142 = zext i8 %129 to i32
  %143 = add nuw nsw i32 %141, %142
  %144 = icmp eq i32 %143, 1
  br i1 %144, label %145, label %153

145:                                              ; preds = %132
  %146 = icmp eq i8 %129, 0
  br i1 %146, label %147, label %379

147:                                              ; preds = %145
  %148 = icmp eq i8 %128, 0
  br i1 %148, label %149, label %379

149:                                              ; preds = %147
  %150 = icmp eq i8 %126, 0
  br i1 %150, label %151, label %379

151:                                              ; preds = %149
  %152 = icmp eq i8 %127, 0
  br i1 %152, label %153, label %379

153:                                              ; preds = %151, %132
  br label %379

154:                                              ; preds = %47
  br i1 %43, label %159, label %155

155:                                              ; preds = %154
  %156 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %40, i64 0, i32 1
  %157 = load i64, i64* %156, align 8
  %158 = icmp ugt i64 %157, %42
  br i1 %158, label %160, label %159, !prof !3

159:                                              ; preds = %155, %154
  store float %39, float* %14, align 4
  store float %38, float* %15, align 4
  store float %37, float* %16, align 4
  store float %36, float* %17, align 4
  store float %35, float* %18, align 4
  store float %34, float* %19, align 4
  call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !4
  call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !5
  unreachable

160:                                              ; preds = %155
  %161 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %40, i64 0, i32 3, i64 %42
  %162 = load i32, i32* %161, align 4
  %163 = add i64 %41, 1
  %164 = icmp ugt i32 %162, 127
  br i1 %164, label %170, label %165

165:                                              ; preds = %160
  %166 = call i32 @iswdigit(i32 %162) #11
  %167 = icmp eq i32 %166, 0
  br i1 %167, label %170, label %168

168:                                              ; preds = %165
  %169 = fadd float %39, 5.000000e-01
  br label %178

170:                                              ; preds = %165, %160
  %171 = and i32 %162, -128
  %172 = icmp eq i32 %171, 128
  %173 = call float @llvm.ceil.f32(float %39)
  br i1 %172, label %174, label %176

174:                                              ; preds = %170
  %175 = fadd float %173, 2.000000e+00
  br label %178

176:                                              ; preds = %170
  %177 = fadd float %173, 1.000000e+00
  br label %178

178:                                              ; preds = %174, %176, %168
  %179 = phi float [ %175, %174 ], [ %177, %176 ], [ %169, %168 ]
  %180 = icmp eq i32 %162, 32
  %181 = add i32 %162, -48
  %182 = icmp ult i32 %181, 10
  %183 = or i1 %180, %182
  br i1 %183, label %184, label %186

184:                                              ; preds = %178
  %185 = fadd float %38, 0x3FE5555560000000
  br label %202

186:                                              ; preds = %178
  %187 = add i32 %162, -65
  %188 = icmp ult i32 %187, 26
  br i1 %188, label %196, label %189

189:                                              ; preds = %186
  %190 = and i32 %162, -128
  %191 = icmp eq i32 %190, 128
  %192 = select i1 %191, float 0x4005555560000000, float 0x3FF5555560000000
  %193 = fadd float %38, %192
  %194 = add i32 %162, -97
  %195 = icmp ult i32 %194, 26
  br i1 %195, label %202, label %198

196:                                              ; preds = %186
  %197 = fadd float %38, 0x3FE5555560000000
  br label %200

198:                                              ; preds = %189
  %199 = icmp eq i32 %190, 128
  br i1 %199, label %202, label %200

200:                                              ; preds = %196, %198
  %201 = phi float [ %197, %196 ], [ %193, %198 ]
  br label %202

202:                                              ; preds = %198, %189, %184, %200
  %203 = phi float [ 0x3FF5555560000000, %200 ], [ 0x3FE5555560000000, %184 ], [ 0x3FE5555560000000, %189 ], [ 0x4005555560000000, %198 ]
  %204 = phi float [ %201, %200 ], [ %185, %184 ], [ %193, %189 ], [ %193, %198 ]
  %205 = fadd float %37, %203
  switch i32 %162, label %206 [
    i32 42, label %214
    i32 13, label %214
    i32 62, label %214
  ]

206:                                              ; preds = %202
  %207 = add i32 %162, -65
  %208 = icmp ult i32 %207, 26
  %209 = or i1 %208, %183
  br i1 %209, label %214, label %210

210:                                              ; preds = %206
  %211 = and i32 %162, -128
  %212 = icmp eq i32 %211, 128
  %213 = select i1 %212, float 0x4011555560000000, float 0x400AAAAAA0000000
  br label %214

214:                                              ; preds = %210, %206, %202, %202, %202
  %215 = phi float [ 0x3FE5555560000000, %202 ], [ 0x3FE5555560000000, %202 ], [ 0x3FE5555560000000, %202 ], [ 0x3FE5555560000000, %206 ], [ %213, %210 ]
  %216 = fadd float %36, %215
  %217 = add i32 %162, -32
  %218 = icmp ult i32 %217, 63
  br i1 %218, label %223, label %219

219:                                              ; preds = %214
  %220 = and i32 %162, -128
  %221 = icmp eq i32 %220, 128
  %222 = select i1 %221, float 4.250000e+00, float 3.250000e+00
  br label %223

223:                                              ; preds = %219, %214
  %224 = phi float [ 7.500000e-01, %214 ], [ %222, %219 ]
  %225 = fadd float %35, %224
  %226 = fadd float %34, 1.000000e+00
  %227 = icmp ult i64 %163, 4
  br i1 %227, label %375, label %228

228:                                              ; preds = %223
  %229 = call float @llvm.ceil.f32(float %179) #11
  %230 = fptosi float %229 to i32
  %231 = icmp eq i32 %230, 2147483647
  %232 = call float @llvm.ceil.f32(float %204) #11
  %233 = fptosi float %232 to i32
  %234 = icmp sgt i32 %230, %233
  br i1 %234, label %242, label %235

235:                                              ; preds = %228
  %236 = select i1 %231, i32 170, i32 0
  %237 = select i1 %231, i32 171, i32 1
  %238 = select i1 %231, i8 -86, i8 0
  %239 = icmp eq i32 %230, %233
  %240 = zext i1 %239 to i32
  %241 = or i32 %236, %240
  br label %242

242:                                              ; preds = %235, %228
  %243 = phi i32 [ 0, %228 ], [ %237, %235 ]
  %244 = phi i32 [ 1, %228 ], [ %241, %235 ]
  %245 = phi i8 [ 0, %228 ], [ %238, %235 ]
  %246 = phi i32 [ 0, %228 ], [ %236, %235 ]
  %247 = phi i32 [ %233, %228 ], [ %230, %235 ]
  %248 = call float @llvm.ceil.f32(float %205) #11
  %249 = fptosi float %248 to i32
  %250 = icmp sgt i32 %247, %249
  br i1 %250, label %255, label %251

251:                                              ; preds = %242
  %252 = icmp eq i32 %247, %249
  %253 = zext i1 %252 to i8
  %254 = or i8 %245, %253
  br label %255

255:                                              ; preds = %251, %242
  %256 = phi i32 [ 0, %242 ], [ %243, %251 ]
  %257 = phi i32 [ 0, %242 ], [ %244, %251 ]
  %258 = phi i8 [ 1, %242 ], [ %254, %251 ]
  %259 = phi i8 [ 0, %242 ], [ %245, %251 ]
  %260 = phi i32 [ 0, %242 ], [ %246, %251 ]
  %261 = phi i32 [ %249, %242 ], [ %247, %251 ]
  %262 = call float @llvm.ceil.f32(float %216) #11
  %263 = fptosi float %262 to i32
  %264 = icmp sgt i32 %261, %263
  br i1 %264, label %269, label %265

265:                                              ; preds = %255
  %266 = icmp eq i32 %261, %263
  %267 = zext i1 %266 to i8
  %268 = add nsw i8 %259, %267
  br label %269

269:                                              ; preds = %265, %255
  %270 = phi i32 [ 0, %255 ], [ %256, %265 ]
  %271 = phi i32 [ 0, %255 ], [ %257, %265 ]
  %272 = phi i8 [ 0, %255 ], [ %258, %265 ]
  %273 = phi i8 [ 1, %255 ], [ %268, %265 ]
  %274 = phi i8 [ 0, %255 ], [ %259, %265 ]
  %275 = phi i32 [ 0, %255 ], [ %260, %265 ]
  %276 = phi i32 [ %263, %255 ], [ %261, %265 ]
  %277 = call float @llvm.ceil.f32(float %225) #11
  %278 = fptosi float %277 to i32
  %279 = icmp sgt i32 %276, %278
  br i1 %279, label %284, label %280

280:                                              ; preds = %269
  %281 = icmp eq i32 %276, %278
  %282 = zext i1 %281 to i8
  %283 = add nsw i8 %274, %282
  br label %284

284:                                              ; preds = %280, %269
  %285 = phi i32 [ 0, %269 ], [ %270, %280 ]
  %286 = phi i32 [ 0, %269 ], [ %271, %280 ]
  %287 = phi i8 [ 0, %269 ], [ %272, %280 ]
  %288 = phi i8 [ 0, %269 ], [ %273, %280 ]
  %289 = phi i8 [ 1, %269 ], [ %283, %280 ]
  %290 = phi i32 [ 0, %269 ], [ %275, %280 ]
  %291 = phi i32 [ %278, %269 ], [ %276, %280 ]
  %292 = call float @llvm.ceil.f32(float %226) #11
  %293 = fptosi float %292 to i32
  %294 = icmp sgt i32 %291, %293
  br i1 %294, label %299, label %295

295:                                              ; preds = %284
  %296 = icmp eq i32 %291, %293
  %297 = zext i1 %296 to i32
  %298 = add nuw nsw i32 %290, %297
  br label %299

299:                                              ; preds = %295, %284
  %300 = phi i32 [ 0, %284 ], [ %285, %295 ]
  %301 = phi i32 [ 0, %284 ], [ %286, %295 ]
  %302 = phi i8 [ 0, %284 ], [ %287, %295 ]
  %303 = phi i8 [ 0, %284 ], [ %288, %295 ]
  %304 = phi i8 [ 0, %284 ], [ %289, %295 ]
  %305 = phi i32 [ 1, %284 ], [ %298, %295 ]
  %306 = and i32 %300, 255
  %307 = and i32 %301, 255
  %308 = zext i8 %302 to i32
  %309 = zext i8 %303 to i32
  %310 = zext i8 %304 to i32
  %311 = add nuw nsw i32 %307, %308
  %312 = add nuw nsw i32 %311, %306
  %313 = add nuw nsw i32 %312, %309
  %314 = add nuw nsw i32 %313, %310
  %315 = icmp slt i32 %278, %293
  %316 = select i1 %315, i32 %278, i32 %293
  %317 = icmp sgt i32 %316, %249
  %318 = and i32 %305, 255
  %319 = add nuw nsw i32 %314, %318
  %320 = select i1 %317, i32 %249, i32 %316
  %321 = icmp sgt i32 %320, %230
  %322 = icmp slt i32 %230, %233
  %323 = and i1 %322, %321
  %324 = icmp slt i32 %230, %263
  %325 = and i1 %324, %323
  br i1 %325, label %377, label %326

326:                                              ; preds = %299
  %327 = icmp slt i32 %293, %230
  br i1 %327, label %377, label %328

328:                                              ; preds = %326
  %329 = add nuw nsw i32 %311, %309
  %330 = sub nsw i32 0, %310
  %331 = icmp eq i32 %329, %330
  br i1 %331, label %377, label %332

332:                                              ; preds = %328
  %333 = icmp eq i32 %319, 1
  br i1 %333, label %334, label %340

334:                                              ; preds = %332
  %335 = icmp eq i8 %304, 0
  br i1 %335, label %336, label %377

336:                                              ; preds = %334
  %337 = icmp eq i8 %302, 0
  br i1 %337, label %338, label %377

338:                                              ; preds = %336
  %339 = icmp eq i8 %303, 0
  br i1 %339, label %340, label %377

340:                                              ; preds = %338, %332
  %341 = add nsw i32 %233, 1
  %342 = icmp slt i32 %341, %230
  %343 = icmp slt i32 %341, %320
  %344 = and i1 %342, %343
  br i1 %344, label %345, label %375

345:                                              ; preds = %340
  %346 = icmp slt i32 %233, %263
  br i1 %346, label %377, label %347

347:                                              ; preds = %345
  %348 = icmp eq i32 %233, %263
  br i1 %348, label %349, label %375

349:                                              ; preds = %347
  store float %179, float* %14, align 4
  store float %204, float* %15, align 4
  store float %205, float* %16, align 4
  store float %216, float* %17, align 4
  store float %225, float* %18, align 4
  store float %226, float* %19, align 4
  %350 = add i64 %163, %1
  %351 = load %"class.fxcrt::StringDataTemplate"*, %"class.fxcrt::StringDataTemplate"** %5, align 8
  %352 = icmp eq %"class.fxcrt::StringDataTemplate"* %351, null
  %353 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %351, i64 0, i32 1
  br label %354

354:                                              ; preds = %367, %349
  %355 = phi i64 [ %350, %349 ], [ %356, %367 ]
  %356 = add i64 %355, 1
  br i1 %352, label %379, label %357

357:                                              ; preds = %354
  %358 = load i64, i64* %353, align 8
  %359 = icmp ult i64 %356, %358
  br i1 %359, label %360, label %379

360:                                              ; preds = %357
  %361 = load i64, i64* %353, align 8
  %362 = icmp ugt i64 %361, %356
  br i1 %362, label %364, label %363, !prof !3

363:                                              ; preds = %360
  call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !4
  call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #11, !srcloc !5
  unreachable

364:                                              ; preds = %360
  %365 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %351, i64 0, i32 3, i64 %356
  %366 = load i32, i32* %365, align 4
  switch i32 %366, label %367 [
    i32 42, label %379
    i32 13, label %379
    i32 62, label %379
  ]

367:                                              ; preds = %364
  %368 = icmp eq i32 %366, 32
  %369 = add i32 %366, -48
  %370 = icmp ult i32 %369, 10
  %371 = or i1 %368, %370
  %372 = add i32 %366, -65
  %373 = icmp ult i32 %372, 26
  %374 = or i1 %373, %371
  br i1 %374, label %354, label %379

375:                                              ; preds = %347, %340, %223
  %376 = load %"class.fxcrt::StringDataTemplate"*, %"class.fxcrt::StringDataTemplate"** %5, align 8
  br label %33

377:                                              ; preds = %299, %328, %326, %334, %336, %338, %345
  %378 = phi i8 [ 0, %299 ], [ 5, %328 ], [ 5, %326 ], [ 4, %334 ], [ 2, %336 ], [ 3, %338 ], [ 1, %345 ]
  store float %179, float* %14, align 4
  store float %204, float* %15, align 4
  store float %205, float* %16, align 4
  store float %216, float* %17, align 4
  store float %225, float* %18, align 4
  store float %226, float* %19, align 4
  br label %379

379:                                              ; preds = %354, %367, %364, %364, %364, %357, %377, %123, %151, %149, %147, %145, %153
  %380 = phi i8 [ 0, %123 ], [ 1, %153 ], [ 5, %145 ], [ 4, %147 ], [ 2, %149 ], [ 3, %151 ], [ %378, %377 ], [ 1, %354 ], [ 1, %367 ], [ 3, %364 ], [ 3, %364 ], [ 3, %364 ], [ 1, %357 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %13) #11
  br label %381

381:                                              ; preds = %3, %8, %379
  %382 = phi i8 [ %380, %379 ], [ %2, %8 ], [ %2, %3 ]
  ret i8 %382
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden zeroext i1 @_ZN20CBC_HighLevelEncoder15IsExtendedASCIIEw(i32 signext) local_unnamed_addr #4 align 2 {
  %2 = and i32 %0, -128
  %3 = icmp eq i32 %2, 128
  ret i1 %3
}

; Function Attrs: nounwind readnone speculatable
declare float @llvm.ceil.f32(float) #5

; Function Attrs: nounwind
declare i32 @iswdigit(i32) local_unnamed_addr #3

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #6

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #7

declare void @_ZN16CBC_ASCIIEncoderC1Ev(%class.CBC_ASCIIEncoder*) unnamed_addr #1

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorINS_10unique_ptrI11CBC_EncoderNS_14default_deleteIS2_EEEENS_9allocatorIS5_EEE21__push_back_slow_pathIS5_EEvOT_(%"class.std::__1::vector"*, %"class.std::__1::unique_ptr.1"* dereferenceable(8)) local_unnamed_addr #8 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %4 = bitcast %"class.std::__1::unique_ptr.1"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = ashr exact i64 %8, 3
  %10 = add nsw i64 %9, 1
  %11 = icmp ugt i64 %10, 2305843009213693951
  br i1 %11, label %12, label %14

12:                                               ; preds = %2
  %13 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %13) #13
  unreachable

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast %"class.std::__1::unique_ptr.1"** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %17, %7
  %19 = ashr exact i64 %18, 3
  %20 = icmp ult i64 %19, 1152921504606846975
  br i1 %20, label %21, label %29

21:                                               ; preds = %14
  %22 = ashr exact i64 %18, 2
  %23 = icmp ult i64 %22, %10
  %24 = select i1 %23, i64 %10, i64 %22
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %34, label %26

26:                                               ; preds = %21
  %27 = icmp ugt i64 %24, 2305843009213693951
  br i1 %27, label %28, label %29

28:                                               ; preds = %26
  tail call void @abort() #13
  unreachable

29:                                               ; preds = %14, %26
  %30 = phi i64 [ %24, %26 ], [ 2305843009213693951, %14 ]
  %31 = shl i64 %30, 3
  %32 = tail call i8* @_Znwm(i64 %31) #12
  %33 = bitcast i8* %32 to %"class.std::__1::unique_ptr.1"*
  br label %34

34:                                               ; preds = %21, %29
  %35 = phi i64 [ %30, %29 ], [ 0, %21 ]
  %36 = phi %"class.std::__1::unique_ptr.1"* [ %33, %29 ], [ null, %21 ]
  %37 = getelementptr inbounds %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1"* %36, i64 %9
  %38 = getelementptr inbounds %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1"* %36, i64 %35
  %39 = ptrtoint %"class.std::__1::unique_ptr.1"* %38 to i64
  %40 = getelementptr inbounds %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1"* %1, i64 0, i32 0, i32 0, i32 0
  %41 = bitcast %"class.std::__1::unique_ptr.1"* %1 to i64*
  %42 = load i64, i64* %41, align 8
  store %class.CBC_Encoder* null, %class.CBC_Encoder** %40, align 8
  %43 = bitcast %"class.std::__1::unique_ptr.1"* %37 to i64*
  store i64 %42, i64* %43, align 8
  %44 = getelementptr inbounds %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1"* %37, i64 1
  %45 = ptrtoint %"class.std::__1::unique_ptr.1"* %44 to i64
  %46 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %47 = load %"class.std::__1::unique_ptr.1"*, %"class.std::__1::unique_ptr.1"** %46, align 8
  %48 = ptrtoint %"class.std::__1::unique_ptr.1"* %47 to i64
  %49 = load %"class.std::__1::unique_ptr.1"*, %"class.std::__1::unique_ptr.1"** %3, align 8
  %50 = icmp eq %"class.std::__1::unique_ptr.1"* %49, %47
  br i1 %50, label %132, label %51

51:                                               ; preds = %34
  %52 = getelementptr %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1"* %49, i64 -1, i32 0, i32 0, i32 0
  %53 = ptrtoint %class.CBC_Encoder** %52 to i64
  %54 = sub i64 %53, %48
  %55 = lshr i64 %54, 3
  %56 = add nuw nsw i64 %55, 1
  %57 = and i64 %56, 7
  %58 = icmp eq i64 %57, 0
  br i1 %58, label %71, label %59

59:                                               ; preds = %51, %59
  %60 = phi %"class.std::__1::unique_ptr.1"* [ %63, %59 ], [ %37, %51 ]
  %61 = phi %"class.std::__1::unique_ptr.1"* [ %64, %59 ], [ %49, %51 ]
  %62 = phi i64 [ %69, %59 ], [ %57, %51 ]
  %63 = getelementptr inbounds %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1"* %60, i64 -1
  %64 = getelementptr inbounds %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1"* %61, i64 -1
  %65 = getelementptr inbounds %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1"* %64, i64 0, i32 0, i32 0, i32 0
  %66 = bitcast %"class.std::__1::unique_ptr.1"* %64 to i64*
  %67 = load i64, i64* %66, align 8
  store %class.CBC_Encoder* null, %class.CBC_Encoder** %65, align 8
  %68 = bitcast %"class.std::__1::unique_ptr.1"* %63 to i64*
  store i64 %67, i64* %68, align 8
  %69 = add i64 %62, -1
  %70 = icmp eq i64 %69, 0
  br i1 %70, label %71, label %59, !llvm.loop !6

71:                                               ; preds = %59, %51
  %72 = phi %"class.std::__1::unique_ptr.1"* [ undef, %51 ], [ %63, %59 ]
  %73 = phi %"class.std::__1::unique_ptr.1"* [ %37, %51 ], [ %63, %59 ]
  %74 = phi %"class.std::__1::unique_ptr.1"* [ %49, %51 ], [ %64, %59 ]
  %75 = icmp ult i64 %54, 56
  br i1 %75, label %128, label %76

76:                                               ; preds = %71, %76
  %77 = phi %"class.std::__1::unique_ptr.1"* [ %121, %76 ], [ %73, %71 ]
  %78 = phi %"class.std::__1::unique_ptr.1"* [ %122, %76 ], [ %74, %71 ]
  %79 = getelementptr inbounds %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1"* %77, i64 -1
  %80 = getelementptr inbounds %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1"* %78, i64 -1
  %81 = getelementptr inbounds %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1"* %80, i64 0, i32 0, i32 0, i32 0
  %82 = bitcast %"class.std::__1::unique_ptr.1"* %80 to i64*
  %83 = load i64, i64* %82, align 8
  store %class.CBC_Encoder* null, %class.CBC_Encoder** %81, align 8
  %84 = bitcast %"class.std::__1::unique_ptr.1"* %79 to i64*
  store i64 %83, i64* %84, align 8
  %85 = getelementptr inbounds %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1"* %77, i64 -2
  %86 = getelementptr inbounds %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1"* %78, i64 -2
  %87 = getelementptr inbounds %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1"* %86, i64 0, i32 0, i32 0, i32 0
  %88 = bitcast %"class.std::__1::unique_ptr.1"* %86 to i64*
  %89 = load i64, i64* %88, align 8
  store %class.CBC_Encoder* null, %class.CBC_Encoder** %87, align 8
  %90 = bitcast %"class.std::__1::unique_ptr.1"* %85 to i64*
  store i64 %89, i64* %90, align 8
  %91 = getelementptr inbounds %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1"* %77, i64 -3
  %92 = getelementptr inbounds %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1"* %78, i64 -3
  %93 = getelementptr inbounds %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1"* %92, i64 0, i32 0, i32 0, i32 0
  %94 = bitcast %"class.std::__1::unique_ptr.1"* %92 to i64*
  %95 = load i64, i64* %94, align 8
  store %class.CBC_Encoder* null, %class.CBC_Encoder** %93, align 8
  %96 = bitcast %"class.std::__1::unique_ptr.1"* %91 to i64*
  store i64 %95, i64* %96, align 8
  %97 = getelementptr inbounds %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1"* %77, i64 -4
  %98 = getelementptr inbounds %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1"* %78, i64 -4
  %99 = getelementptr inbounds %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1"* %98, i64 0, i32 0, i32 0, i32 0
  %100 = bitcast %"class.std::__1::unique_ptr.1"* %98 to i64*
  %101 = load i64, i64* %100, align 8
  store %class.CBC_Encoder* null, %class.CBC_Encoder** %99, align 8
  %102 = bitcast %"class.std::__1::unique_ptr.1"* %97 to i64*
  store i64 %101, i64* %102, align 8
  %103 = getelementptr inbounds %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1"* %77, i64 -5
  %104 = getelementptr inbounds %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1"* %78, i64 -5
  %105 = getelementptr inbounds %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1"* %104, i64 0, i32 0, i32 0, i32 0
  %106 = bitcast %"class.std::__1::unique_ptr.1"* %104 to i64*
  %107 = load i64, i64* %106, align 8
  store %class.CBC_Encoder* null, %class.CBC_Encoder** %105, align 8
  %108 = bitcast %"class.std::__1::unique_ptr.1"* %103 to i64*
  store i64 %107, i64* %108, align 8
  %109 = getelementptr inbounds %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1"* %77, i64 -6
  %110 = getelementptr inbounds %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1"* %78, i64 -6
  %111 = getelementptr inbounds %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1"* %110, i64 0, i32 0, i32 0, i32 0
  %112 = bitcast %"class.std::__1::unique_ptr.1"* %110 to i64*
  %113 = load i64, i64* %112, align 8
  store %class.CBC_Encoder* null, %class.CBC_Encoder** %111, align 8
  %114 = bitcast %"class.std::__1::unique_ptr.1"* %109 to i64*
  store i64 %113, i64* %114, align 8
  %115 = getelementptr inbounds %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1"* %77, i64 -7
  %116 = getelementptr inbounds %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1"* %78, i64 -7
  %117 = getelementptr inbounds %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1"* %116, i64 0, i32 0, i32 0, i32 0
  %118 = bitcast %"class.std::__1::unique_ptr.1"* %116 to i64*
  %119 = load i64, i64* %118, align 8
  store %class.CBC_Encoder* null, %class.CBC_Encoder** %117, align 8
  %120 = bitcast %"class.std::__1::unique_ptr.1"* %115 to i64*
  store i64 %119, i64* %120, align 8
  %121 = getelementptr inbounds %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1"* %77, i64 -8
  %122 = getelementptr inbounds %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1"* %78, i64 -8
  %123 = getelementptr inbounds %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1"* %122, i64 0, i32 0, i32 0, i32 0
  %124 = bitcast %"class.std::__1::unique_ptr.1"* %122 to i64*
  %125 = load i64, i64* %124, align 8
  store %class.CBC_Encoder* null, %class.CBC_Encoder** %123, align 8
  %126 = bitcast %"class.std::__1::unique_ptr.1"* %121 to i64*
  store i64 %125, i64* %126, align 8
  %127 = icmp eq %"class.std::__1::unique_ptr.1"* %122, %47
  br i1 %127, label %128, label %76

128:                                              ; preds = %76, %71
  %129 = phi %"class.std::__1::unique_ptr.1"* [ %72, %71 ], [ %121, %76 ]
  %130 = load i64, i64* %6, align 8
  %131 = load %"class.std::__1::unique_ptr.1"*, %"class.std::__1::unique_ptr.1"** %3, align 8
  br label %132

132:                                              ; preds = %34, %128
  %133 = phi %"class.std::__1::unique_ptr.1"* [ %131, %128 ], [ %47, %34 ]
  %134 = phi %"class.std::__1::unique_ptr.1"* [ %129, %128 ], [ %37, %34 ]
  %135 = phi i64 [ %130, %128 ], [ %48, %34 ]
  %136 = ptrtoint %"class.std::__1::unique_ptr.1"* %134 to i64
  store i64 %136, i64* %6, align 8
  store i64 %45, i64* %4, align 8
  store i64 %39, i64* %16, align 8
  %137 = inttoptr i64 %135 to %"class.std::__1::unique_ptr.1"*
  %138 = icmp eq %"class.std::__1::unique_ptr.1"* %133, %137
  br i1 %138, label %152, label %139

139:                                              ; preds = %132, %150
  %140 = phi %"class.std::__1::unique_ptr.1"* [ %141, %150 ], [ %133, %132 ]
  %141 = getelementptr inbounds %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1"* %140, i64 -1
  %142 = getelementptr inbounds %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1"* %141, i64 0, i32 0, i32 0, i32 0
  %143 = load %class.CBC_Encoder*, %class.CBC_Encoder** %142, align 8
  store %class.CBC_Encoder* null, %class.CBC_Encoder** %142, align 8
  %144 = icmp eq %class.CBC_Encoder* %143, null
  br i1 %144, label %150, label %145

145:                                              ; preds = %139
  %146 = bitcast %class.CBC_Encoder* %143 to void (%class.CBC_Encoder*)***
  %147 = load void (%class.CBC_Encoder*)**, void (%class.CBC_Encoder*)*** %146, align 8
  %148 = getelementptr inbounds void (%class.CBC_Encoder*)*, void (%class.CBC_Encoder*)** %147, i64 1
  %149 = load void (%class.CBC_Encoder*)*, void (%class.CBC_Encoder*)** %148, align 8
  tail call void %149(%class.CBC_Encoder* nonnull %143) #11
  br label %150

150:                                              ; preds = %145, %139
  %151 = icmp eq %"class.std::__1::unique_ptr.1"* %141, %137
  br i1 %151, label %152, label %139

152:                                              ; preds = %150, %132
  %153 = icmp eq i64 %135, 0
  br i1 %153, label %156, label %154

154:                                              ; preds = %152
  %155 = inttoptr i64 %135 to i8*
  tail call void @_ZdlPv(i8* %155) #12
  br label %156

156:                                              ; preds = %152, %154
  ret void
}

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #9

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #10

declare void @_ZN14CBC_C40EncoderC1Ev(%class.CBC_C40Encoder*) unnamed_addr #1

declare void @_ZN15CBC_TextEncoderC1Ev(%class.CBC_TextEncoder*) unnamed_addr #1

declare void @_ZN14CBC_X12EncoderC1Ev(%class.CBC_X12Encoder*) unnamed_addr #1

declare void @_ZN18CBC_EdifactEncoderC1Ev(%class.CBC_EdifactEncoder*) unnamed_addr #1

declare void @_ZN18CBC_Base256EncoderC1Ev(%class.CBC_Base256Encoder*) unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone speculatable }
attributes #6 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nounwind }
attributes #12 = { builtin nounwind }
attributes #13 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!"branch_weights", i32 2000, i32 1}
!4 = !{i32 -2143838646}
!5 = !{i32 -2143838625}
!6 = distinct !{!6, !7}
!7 = !{!"llvm.loop.unroll.disable"}
