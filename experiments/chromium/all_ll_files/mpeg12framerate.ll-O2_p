; ModuleID = '../../third_party/ffmpeg/libavcodec/mpeg12framerate.c'
source_filename = "../../third_party/ffmpeg/libavcodec/mpeg12framerate.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.AVRational = type { i32, i32 }

@ff_mpeg12_frame_rate_tab = hidden local_unnamed_addr constant [16 x %struct.AVRational] [%struct.AVRational zeroinitializer, %struct.AVRational { i32 24000, i32 1001 }, %struct.AVRational { i32 24, i32 1 }, %struct.AVRational { i32 25, i32 1 }, %struct.AVRational { i32 30000, i32 1001 }, %struct.AVRational { i32 30, i32 1 }, %struct.AVRational { i32 50, i32 1 }, %struct.AVRational { i32 60000, i32 1001 }, %struct.AVRational { i32 60, i32 1 }, %struct.AVRational { i32 15, i32 1 }, %struct.AVRational { i32 5, i32 1 }, %struct.AVRational { i32 10, i32 1 }, %struct.AVRational { i32 12, i32 1 }, %struct.AVRational { i32 15, i32 1 }, %struct.AVRational zeroinitializer, %struct.AVRational zeroinitializer], align 16

; Function Attrs: nofree nounwind ssp uwtable writeonly
define hidden void @ff_mpeg12_find_best_frame_rate(i64, i32* nocapture, i32*, i32*, i32) local_unnamed_addr #0 {
  %6 = icmp ne i32* %2, null
  %7 = icmp ne i32* %3, null
  %8 = and i1 %6, %7
  %9 = icmp eq i32 %4, 0
  %10 = trunc i64 %0 to i32
  %11 = shl i64 %0, 32
  %12 = ashr exact i64 %11, 32
  %13 = ashr i64 %0, 32
  %14 = icmp ugt i64 %0, 4294967295
  %15 = icmp eq i32 %10, 0
  %16 = select i1 %9, i64 9, i64 13
  br label %21

17:                                               ; preds = %43
  %18 = ashr i32 %10, 31
  %19 = select i1 %8, i64 32, i64 1
  %20 = select i1 %8, i64 4, i64 1
  br label %46

21:                                               ; preds = %43, %5
  %22 = phi i64 [ %44, %43 ], [ 1, %5 ]
  %23 = getelementptr inbounds [16 x %struct.AVRational], [16 x %struct.AVRational]* @ff_mpeg12_frame_rate_tab, i64 0, i64 %22
  %24 = bitcast %struct.AVRational* %23 to i64*
  %25 = load i64, i64* %24, align 8
  %26 = trunc i64 %25 to i32
  %27 = ashr i64 %25, 32
  %28 = mul nsw i64 %27, %12
  %29 = shl i64 %25, 32
  %30 = ashr exact i64 %29, 32
  %31 = mul nsw i64 %30, %13
  %32 = icmp eq i64 %28, %31
  br i1 %32, label %33, label %43

33:                                               ; preds = %21
  %34 = icmp ugt i64 %25, 4294967295
  %35 = and i1 %14, %34
  br i1 %35, label %168, label %36

36:                                               ; preds = %33
  %37 = icmp eq i32 %26, 0
  %38 = or i1 %15, %37
  br i1 %38, label %43, label %39

39:                                               ; preds = %36
  %40 = xor i64 %25, %0
  %41 = trunc i64 %40 to i32
  %42 = icmp sgt i32 %41, -1
  br i1 %42, label %168, label %43

43:                                               ; preds = %21, %36, %39
  %44 = add nuw nsw i64 %22, 1
  %45 = icmp eq i64 %44, %16
  br i1 %45, label %17, label %21

46:                                               ; preds = %161, %17
  %47 = phi i64 [ %162, %161 ], [ 1, %17 ]
  %48 = phi i32 [ %155, %161 ], [ 2147483647, %17 ]
  %49 = phi i32 [ %154, %161 ], [ 1, %17 ]
  %50 = phi i32 [ %153, %161 ], [ 1, %17 ]
  %51 = phi i32 [ %152, %161 ], [ 1, %17 ]
  %52 = phi i32 [ %151, %161 ], [ 4, %17 ]
  %53 = getelementptr inbounds [16 x %struct.AVRational], [16 x %struct.AVRational]* @ff_mpeg12_frame_rate_tab, i64 0, i64 %47
  %54 = bitcast %struct.AVRational* %53 to i64*
  %55 = load i64, i64* %54, align 8
  %56 = trunc i64 %47 to i32
  br label %57

57:                                               ; preds = %158, %46
  %58 = phi i64 [ %159, %158 ], [ 1, %46 ]
  %59 = phi i32 [ %155, %158 ], [ %48, %46 ]
  %60 = phi i32 [ %154, %158 ], [ %49, %46 ]
  %61 = phi i32 [ %153, %158 ], [ %50, %46 ]
  %62 = phi i32 [ %152, %158 ], [ %51, %46 ]
  %63 = phi i32 [ %151, %158 ], [ %52, %46 ]
  %64 = icmp eq i64 %58, 1
  %65 = trunc i64 %58 to i32
  br label %66

66:                                               ; preds = %150, %57
  %67 = phi i64 [ %156, %150 ], [ 1, %57 ]
  %68 = phi i32 [ %155, %150 ], [ %59, %57 ]
  %69 = phi i32 [ %154, %150 ], [ %60, %57 ]
  %70 = phi i32 [ %153, %150 ], [ %61, %57 ]
  %71 = phi i32 [ %152, %150 ], [ %62, %57 ]
  %72 = phi i32 [ %151, %150 ], [ %63, %57 ]
  %73 = shl nuw nsw i64 %67, 32
  %74 = or i64 %73, %58
  %75 = tail call i64 @av_mul_q(i64 %55, i64 %74) #2
  %76 = trunc i64 %75 to i32
  %77 = shl i64 %75, 32
  %78 = ashr exact i64 %77, 32
  %79 = mul nsw i64 %78, %13
  %80 = ashr i64 %75, 32
  %81 = mul nsw i64 %80, %12
  %82 = sub nsw i64 %79, %81
  %83 = icmp eq i64 %82, 0
  br i1 %83, label %90, label %84

84:                                               ; preds = %66
  %85 = xor i64 %80, %13
  %86 = xor i64 %85, %82
  %87 = ashr i64 %86, 63
  %88 = trunc i64 %87 to i32
  %89 = or i32 %88, 1
  br label %100

90:                                               ; preds = %66
  %91 = icmp ugt i64 %75, 4294967295
  %92 = and i1 %14, %91
  br i1 %92, label %164, label %93

93:                                               ; preds = %90
  %94 = icmp eq i32 %76, 0
  %95 = or i1 %15, %94
  br i1 %95, label %103, label %96

96:                                               ; preds = %93
  %97 = ashr i32 %76, 31
  %98 = sub nsw i32 %97, %18
  %99 = icmp eq i32 %98, 0
  br i1 %99, label %164, label %100

100:                                              ; preds = %84, %96
  %101 = phi i32 [ %98, %96 ], [ %89, %84 ]
  %102 = icmp slt i32 %101, 0
  br i1 %102, label %103, label %105

103:                                              ; preds = %93, %100
  %104 = tail call i64 @av_div_q(i64 %0, i64 %75) #2
  br label %107

105:                                              ; preds = %100
  %106 = tail call i64 @av_div_q(i64 %75, i64 %0) #2
  br label %107

107:                                              ; preds = %105, %103
  %108 = phi i64 [ %104, %103 ], [ %106, %105 ]
  %109 = lshr i64 %108, 32
  %110 = trunc i64 %108 to i32
  %111 = trunc i64 %109 to i32
  %112 = shl i64 %108, 32
  %113 = ashr exact i64 %112, 32
  %114 = sext i32 %69 to i64
  %115 = mul nsw i64 %113, %114
  %116 = sext i32 %68 to i64
  %117 = ashr i64 %108, 32
  %118 = mul nsw i64 %117, %116
  %119 = sub nsw i64 %115, %118
  %120 = icmp eq i64 %119, 0
  br i1 %120, label %127, label %121

121:                                              ; preds = %107
  %122 = xor i64 %117, %114
  %123 = xor i64 %122, %119
  %124 = ashr i64 %123, 63
  %125 = trunc i64 %124 to i32
  %126 = or i32 %125, 1
  br label %139

127:                                              ; preds = %107
  %128 = icmp ne i32 %69, 0
  %129 = icmp ugt i64 %108, 4294967295
  %130 = and i1 %128, %129
  br i1 %130, label %142, label %131

131:                                              ; preds = %127
  %132 = icmp eq i32 %110, 0
  %133 = icmp eq i32 %68, 0
  %134 = or i1 %133, %132
  br i1 %134, label %148, label %135

135:                                              ; preds = %131
  %136 = ashr i32 %110, 31
  %137 = ashr i32 %68, 31
  %138 = sub nsw i32 %136, %137
  br label %139

139:                                              ; preds = %121, %135
  %140 = phi i32 [ %126, %121 ], [ %138, %135 ]
  %141 = icmp slt i32 %140, 0
  br i1 %141, label %148, label %142

142:                                              ; preds = %127, %139
  %143 = phi i32 [ %140, %139 ], [ 0, %127 ]
  %144 = icmp eq i32 %143, 0
  %145 = and i1 %64, %144
  %146 = icmp eq i64 %67, 1
  %147 = and i1 %146, %145
  br i1 %147, label %148, label %150

148:                                              ; preds = %131, %142, %139
  %149 = trunc i64 %67 to i32
  br label %150

150:                                              ; preds = %148, %142
  %151 = phi i32 [ %72, %142 ], [ %56, %148 ]
  %152 = phi i32 [ %71, %142 ], [ %65, %148 ]
  %153 = phi i32 [ %70, %142 ], [ %149, %148 ]
  %154 = phi i32 [ %69, %142 ], [ %111, %148 ]
  %155 = phi i32 [ %68, %142 ], [ %110, %148 ]
  %156 = add nuw nsw i64 %67, 1
  %157 = icmp ult i64 %67, %19
  br i1 %157, label %66, label %158

158:                                              ; preds = %150
  %159 = add nuw nsw i64 %58, 1
  %160 = icmp ult i64 %58, %20
  br i1 %160, label %57, label %161

161:                                              ; preds = %158
  %162 = add nuw nsw i64 %47, 1
  %163 = icmp eq i64 %162, %16
  br i1 %163, label %170, label %46

164:                                              ; preds = %96, %90
  %165 = trunc i64 %47 to i32
  %166 = trunc i64 %58 to i32
  %167 = trunc i64 %67 to i32
  br label %170

168:                                              ; preds = %39, %33
  %169 = trunc i64 %22 to i32
  br label %170

170:                                              ; preds = %161, %168, %164
  %171 = phi i32 [ %165, %164 ], [ %169, %168 ], [ %151, %161 ]
  %172 = phi i32 [ %166, %164 ], [ 1, %168 ], [ %152, %161 ]
  %173 = phi i32 [ %167, %164 ], [ 1, %168 ], [ %153, %161 ]
  store i32 %171, i32* %1, align 4
  br i1 %8, label %174, label %177

174:                                              ; preds = %170
  %175 = add nsw i32 %172, -1
  store i32 %175, i32* %2, align 4
  %176 = add nsw i32 %173, -1
  store i32 %176, i32* %3, align 4
  br label %177

177:                                              ; preds = %174, %170
  ret void
}

; Function Attrs: nounwind readnone
declare i64 @av_mul_q(i64, i64) local_unnamed_addr #1

; Function Attrs: nounwind readnone
declare i64 @av_div_q(i64, i64) local_unnamed_addr #1

attributes #0 = { nofree nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readnone }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
