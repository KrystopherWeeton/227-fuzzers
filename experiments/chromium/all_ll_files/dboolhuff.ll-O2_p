; ModuleID = '../../third_party/libvpx/source/libvpx/vp8/decoder/dboolhuff.c'
source_filename = "../../third_party/libvpx/source/libvpx/vp8/decoder/dboolhuff.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.BOOL_DECODER = type { i8*, i8*, i64, i32, i32, void (i8*, i8*, i8*, i32)*, i8* }

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vp8dx_start_decode(%struct.BOOL_DECODER* nocapture, i8*, i32, void (i8*, i8*, i8*, i32)*, i8*) local_unnamed_addr #0 {
  %6 = alloca [9 x i8], align 1
  %7 = icmp eq i32 %2, 0
  %8 = icmp ne i8* %1, null
  %9 = or i1 %8, %7
  br i1 %9, label %10, label %121

10:                                               ; preds = %5
  %11 = zext i32 %2 to i64
  %12 = getelementptr inbounds i8, i8* %1, i64 %11
  %13 = select i1 %8, i8* %12, i8* null
  %14 = getelementptr inbounds %struct.BOOL_DECODER, %struct.BOOL_DECODER* %0, i64 0, i32 0
  store i8* %13, i8** %14, align 8
  %15 = getelementptr inbounds %struct.BOOL_DECODER, %struct.BOOL_DECODER* %0, i64 0, i32 1
  store i8* %1, i8** %15, align 8
  %16 = getelementptr inbounds %struct.BOOL_DECODER, %struct.BOOL_DECODER* %0, i64 0, i32 2
  store i64 0, i64* %16, align 8
  %17 = getelementptr inbounds %struct.BOOL_DECODER, %struct.BOOL_DECODER* %0, i64 0, i32 3
  store i32 -8, i32* %17, align 8
  %18 = getelementptr inbounds %struct.BOOL_DECODER, %struct.BOOL_DECODER* %0, i64 0, i32 4
  store i32 255, i32* %18, align 4
  %19 = getelementptr inbounds %struct.BOOL_DECODER, %struct.BOOL_DECODER* %0, i64 0, i32 5
  store void (i8*, i8*, i8*, i32)* %3, void (i8*, i8*, i8*, i32)** %19, align 8
  %20 = getelementptr inbounds %struct.BOOL_DECODER, %struct.BOOL_DECODER* %0, i64 0, i32 6
  store i8* %4, i8** %20, align 8
  %21 = ptrtoint i8* %13 to i64
  %22 = ptrtoint i8* %1 to i64
  %23 = sub i64 %21, %22
  %24 = shl i64 %23, 3
  %25 = trunc i64 %24 to i32
  %26 = sub i32 64, %25
  %27 = getelementptr inbounds [9 x i8], [9 x i8]* %6, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 9, i8* nonnull %27) #2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %27, i8 -86, i64 9, i1 false) #2
  %28 = icmp eq void (i8*, i8*, i8*, i32)* %3, null
  br i1 %28, label %33, label %29

29:                                               ; preds = %10
  %30 = icmp ult i64 %23, 9
  %31 = select i1 %30, i64 %23, i64 9
  %32 = trunc i64 %31 to i32
  call void %3(i8* %4, i8* %1, i8* nonnull %27, i32 %32) #2
  br label %33

33:                                               ; preds = %29, %10
  %34 = phi i8* [ %27, %29 ], [ %1, %10 ]
  %35 = icmp sgt i32 %26, -1
  %36 = select i1 %35, i32 1073741816, i32 -8
  %37 = select i1 %35, i32 %26, i32 0
  %38 = icmp eq i64 %24, 0
  %39 = and i1 %38, %35
  %40 = icmp sgt i32 %37, 56
  %41 = or i1 %39, %40
  br i1 %41, label %118, label %42

42:                                               ; preds = %33
  %43 = load i8*, i8** %15, align 8
  %44 = sub i32 56, %37
  %45 = add i32 %36, %44
  %46 = lshr exact i32 %44, 3
  %47 = add nuw nsw i32 %46, 1
  %48 = and i32 %47, 3
  %49 = icmp ult i32 %44, 24
  br i1 %49, label %92, label %50

50:                                               ; preds = %42
  %51 = sub nsw i32 %47, %48
  br label %52

52:                                               ; preds = %52, %50
  %53 = phi i8* [ %43, %50 ], [ %88, %52 ]
  %54 = phi i8* [ %34, %50 ], [ %87, %52 ]
  %55 = phi i32 [ 56, %50 ], [ %89, %52 ]
  %56 = phi i64 [ 0, %50 ], [ %86, %52 ]
  %57 = phi i32 [ %51, %50 ], [ %90, %52 ]
  %58 = load i8, i8* %54, align 1
  %59 = zext i8 %58 to i64
  %60 = zext i32 %55 to i64
  %61 = shl i64 %59, %60
  %62 = or i64 %61, %56
  %63 = getelementptr inbounds i8, i8* %54, i64 1
  %64 = getelementptr inbounds i8, i8* %53, i64 1
  store i8* %64, i8** %15, align 8
  %65 = add nsw i32 %55, -8
  %66 = load i8, i8* %63, align 1
  %67 = zext i8 %66 to i64
  %68 = zext i32 %65 to i64
  %69 = shl i64 %67, %68
  %70 = or i64 %69, %62
  %71 = getelementptr inbounds i8, i8* %54, i64 2
  %72 = getelementptr inbounds i8, i8* %53, i64 2
  store i8* %72, i8** %15, align 8
  %73 = add nsw i32 %55, -16
  %74 = load i8, i8* %71, align 1
  %75 = zext i8 %74 to i64
  %76 = zext i32 %73 to i64
  %77 = shl i64 %75, %76
  %78 = or i64 %77, %70
  %79 = getelementptr inbounds i8, i8* %54, i64 3
  %80 = getelementptr inbounds i8, i8* %53, i64 3
  store i8* %80, i8** %15, align 8
  %81 = add nsw i32 %55, -24
  %82 = load i8, i8* %79, align 1
  %83 = zext i8 %82 to i64
  %84 = zext i32 %81 to i64
  %85 = shl i64 %83, %84
  %86 = or i64 %85, %78
  %87 = getelementptr inbounds i8, i8* %54, i64 4
  %88 = getelementptr inbounds i8, i8* %53, i64 4
  store i8* %88, i8** %15, align 8
  %89 = add nsw i32 %55, -32
  %90 = add i32 %57, -4
  %91 = icmp eq i32 %90, 0
  br i1 %91, label %92, label %52

92:                                               ; preds = %52, %42
  %93 = phi i64 [ undef, %42 ], [ %86, %52 ]
  %94 = phi i8* [ %43, %42 ], [ %88, %52 ]
  %95 = phi i8* [ %34, %42 ], [ %87, %52 ]
  %96 = phi i32 [ 56, %42 ], [ %89, %52 ]
  %97 = phi i64 [ 0, %42 ], [ %86, %52 ]
  %98 = icmp eq i32 %48, 0
  br i1 %98, label %115, label %99

99:                                               ; preds = %92, %99
  %100 = phi i8* [ %111, %99 ], [ %94, %92 ]
  %101 = phi i8* [ %110, %99 ], [ %95, %92 ]
  %102 = phi i32 [ %112, %99 ], [ %96, %92 ]
  %103 = phi i64 [ %109, %99 ], [ %97, %92 ]
  %104 = phi i32 [ %113, %99 ], [ %48, %92 ]
  %105 = load i8, i8* %101, align 1
  %106 = zext i8 %105 to i64
  %107 = zext i32 %102 to i64
  %108 = shl i64 %106, %107
  %109 = or i64 %108, %103
  %110 = getelementptr inbounds i8, i8* %101, i64 1
  %111 = getelementptr inbounds i8, i8* %100, i64 1
  store i8* %111, i8** %15, align 8
  %112 = add nsw i32 %102, -8
  %113 = add i32 %104, -1
  %114 = icmp eq i32 %113, 0
  br i1 %114, label %115, label %99, !llvm.loop !2

115:                                              ; preds = %99, %92
  %116 = phi i64 [ %93, %92 ], [ %109, %99 ]
  %117 = add i32 %45, 8
  br label %118

118:                                              ; preds = %115, %33
  %119 = phi i64 [ 0, %33 ], [ %116, %115 ]
  %120 = phi i32 [ %36, %33 ], [ %117, %115 ]
  store i64 %119, i64* %16, align 8
  store i32 %120, i32* %17, align 8
  call void @llvm.lifetime.end.p0i8(i64 9, i8* nonnull %27) #2
  br label %121

121:                                              ; preds = %5, %118
  %122 = phi i32 [ 0, %118 ], [ 1, %5 ]
  ret i32 %122
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vp8dx_bool_decoder_fill(%struct.BOOL_DECODER* nocapture) local_unnamed_addr #0 {
  %2 = alloca [9 x i8], align 1
  %3 = getelementptr inbounds %struct.BOOL_DECODER, %struct.BOOL_DECODER* %0, i64 0, i32 1
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %struct.BOOL_DECODER, %struct.BOOL_DECODER* %0, i64 0, i32 2
  %6 = load i64, i64* %5, align 8
  %7 = getelementptr inbounds %struct.BOOL_DECODER, %struct.BOOL_DECODER* %0, i64 0, i32 3
  %8 = load i32, i32* %7, align 8
  %9 = sub i32 48, %8
  %10 = bitcast %struct.BOOL_DECODER* %0 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = ptrtoint i8* %4 to i64
  %13 = sub i64 %11, %12
  %14 = shl i64 %13, 3
  %15 = sub i32 56, %8
  %16 = trunc i64 %14 to i32
  %17 = sub i32 %15, %16
  %18 = getelementptr inbounds [9 x i8], [9 x i8]* %2, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 9, i8* nonnull %18) #2
  %19 = getelementptr inbounds %struct.BOOL_DECODER, %struct.BOOL_DECODER* %0, i64 0, i32 5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %18, i8 -86, i64 9, i1 false)
  %20 = load void (i8*, i8*, i8*, i32)*, void (i8*, i8*, i8*, i32)** %19, align 8
  %21 = icmp eq void (i8*, i8*, i8*, i32)* %20, null
  br i1 %21, label %28, label %22

22:                                               ; preds = %1
  %23 = icmp ult i64 %13, 9
  %24 = select i1 %23, i64 %13, i64 9
  %25 = getelementptr inbounds %struct.BOOL_DECODER, %struct.BOOL_DECODER* %0, i64 0, i32 6
  %26 = load i8*, i8** %25, align 8
  %27 = trunc i64 %24 to i32
  call void %20(i8* %26, i8* %4, i8* nonnull %18, i32 %27) #2
  br label %28

28:                                               ; preds = %1, %22
  %29 = phi i8* [ %18, %22 ], [ %4, %1 ]
  %30 = icmp sgt i32 %17, -1
  %31 = add nsw i32 %8, 1073741824
  %32 = select i1 %30, i32 %31, i32 %8
  %33 = select i1 %30, i32 %17, i32 0
  %34 = icmp eq i64 %14, 0
  %35 = and i1 %30, %34
  %36 = icmp slt i32 %9, %33
  %37 = or i1 %35, %36
  br i1 %37, label %56, label %38

38:                                               ; preds = %28
  %39 = load i8*, i8** %3, align 8
  br label %40

40:                                               ; preds = %38, %40
  %41 = phi i8* [ %53, %40 ], [ %39, %38 ]
  %42 = phi i8* [ %52, %40 ], [ %29, %38 ]
  %43 = phi i32 [ %54, %40 ], [ %9, %38 ]
  %44 = phi i32 [ %46, %40 ], [ %32, %38 ]
  %45 = phi i64 [ %51, %40 ], [ %6, %38 ]
  %46 = add nsw i32 %44, 8
  %47 = load i8, i8* %42, align 1
  %48 = zext i8 %47 to i64
  %49 = zext i32 %43 to i64
  %50 = shl i64 %48, %49
  %51 = or i64 %50, %45
  %52 = getelementptr inbounds i8, i8* %42, i64 1
  %53 = getelementptr inbounds i8, i8* %41, i64 1
  store i8* %53, i8** %3, align 8
  %54 = add nsw i32 %43, -8
  %55 = icmp slt i32 %54, %33
  br i1 %55, label %56, label %40

56:                                               ; preds = %40, %28
  %57 = phi i64 [ %6, %28 ], [ %51, %40 ]
  %58 = phi i32 [ %32, %28 ], [ %46, %40 ]
  store i64 %57, i64* %5, align 8
  store i32 %58, i32* %7, align 8
  call void @llvm.lifetime.end.p0i8(i64 9, i8* nonnull %18) #2
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
