; ModuleID = '../../third_party/skia/src/sksl/dsl/DSLStatement.cpp'
source_filename = "../../third_party/skia/src/sksl/dsl/DSLStatement.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.SkSL::dsl::DSLStatement" = type { %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.SkSL::Statement"* }
%"class.SkSL::Statement" = type { %"class.SkSL::IRNode" }
%"class.SkSL::IRNode" = type { i32 (...)**, i32, i32 }
%"class.SkSL::dsl::DSLBlock" = type { %class.SkSTArray, %"class.std::__1::shared_ptr" }
%class.SkSTArray = type { %class.SkAlignedSTStorage, %class.SkTArray }
%class.SkAlignedSTStorage = type { [16 x i8] }
%class.SkTArray = type { %"class.std::__1::unique_ptr"*, i64 }
%"class.std::__1::shared_ptr" = type { %"class.SkSL::SymbolTable"*, %"class.std::__1::__shared_weak_count"* }
%"class.SkSL::SymbolTable" = type { %"class.std::__1::shared_ptr", %"class.std::__1::vector", i8, %"class.std::__1::vector.5", %"class.std::__1::forward_list", %class.SkTHashMap, %"class.SkSL::ErrorReporter"* }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.std::__1::unique_ptr.1"*, %"class.std::__1::unique_ptr.1"*, %"class.std::__1::__compressed_pair.2" }
%"class.std::__1::unique_ptr.1" = type { %"class.std::__1::__compressed_pair.111" }
%"class.std::__1::__compressed_pair.111" = type { %"struct.std::__1::__compressed_pair_elem.112" }
%"struct.std::__1::__compressed_pair_elem.112" = type { %"class.SkSL::Symbol"* }
%"class.SkSL::Symbol" = type { %"class.SkSL::IRNode", %"struct.SkSL::StringFragment", %"class.SkSL::Type"* }
%"struct.SkSL::StringFragment" = type { i8*, i64 }
%"class.SkSL::Type" = type { %"class.SkSL::Symbol", i8*, %"class.SkSL::String", i32, i32, i32, %"class.SkSL::Type"*, %"class.std::__1::vector.32", i32, i32, %"class.std::__1::vector.39", i32, i8, i8, i8, i8, i8, %"class.SkSL::Type"*, %"class.SkSL::Type"* }
%"class.SkSL::String" = type { %"class.std::__1::basic_string" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.27" }
%"class.std::__1::__compressed_pair.27" = type { %"struct.std::__1::__compressed_pair_elem.28" }
%"struct.std::__1::__compressed_pair_elem.28" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::vector.32" = type { %"class.std::__1::__vector_base.33" }
%"class.std::__1::__vector_base.33" = type { %"class.SkSL::Type"**, %"class.SkSL::Type"**, %"class.std::__1::__compressed_pair.34" }
%"class.std::__1::__compressed_pair.34" = type { %"struct.std::__1::__compressed_pair_elem.35" }
%"struct.std::__1::__compressed_pair_elem.35" = type { %"class.SkSL::Type"** }
%"class.std::__1::vector.39" = type { %"class.std::__1::__vector_base.40" }
%"class.std::__1::__vector_base.40" = type { %"struct.SkSL::Type::Field"*, %"struct.SkSL::Type::Field"*, %"class.std::__1::__compressed_pair.41" }
%"struct.SkSL::Type::Field" = type { %"struct.SkSL::Modifiers", %"struct.SkSL::StringFragment", %"class.SkSL::Type"* }
%"struct.SkSL::Modifiers" = type { %"struct.SkSL::Layout", i32, [4 x i8] }
%"struct.SkSL::Layout" = type <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [4 x i8], %"struct.SkSL::StringFragment", i32, [4 x i8] }>
%"class.std::__1::__compressed_pair.41" = type { %"struct.std::__1::__compressed_pair_elem.42" }
%"struct.std::__1::__compressed_pair_elem.42" = type { %"struct.SkSL::Type::Field"* }
%"class.std::__1::__compressed_pair.2" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.std::__1::__compressed_pair_elem.3" = type { %"class.std::__1::unique_ptr.1"* }
%"class.std::__1::vector.5" = type { %"class.std::__1::__vector_base.6" }
%"class.std::__1::__vector_base.6" = type { %"class.std::__1::unique_ptr.7"*, %"class.std::__1::unique_ptr.7"*, %"class.std::__1::__compressed_pair.8" }
%"class.std::__1::unique_ptr.7" = type { %"class.std::__1::__compressed_pair.116" }
%"class.std::__1::__compressed_pair.116" = type { %"struct.std::__1::__compressed_pair_elem.117" }
%"struct.std::__1::__compressed_pair_elem.117" = type { %"class.SkSL::IRNode"* }
%"class.std::__1::__compressed_pair.8" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"struct.std::__1::__compressed_pair_elem.9" = type { %"class.std::__1::unique_ptr.7"* }
%"class.std::__1::forward_list" = type { %"class.std::__1::__forward_list_base" }
%"class.std::__1::__forward_list_base" = type { %"class.std::__1::__compressed_pair.13" }
%"class.std::__1::__compressed_pair.13" = type { %"struct.std::__1::__compressed_pair_elem.14" }
%"struct.std::__1::__compressed_pair_elem.14" = type { %"struct.std::__1::__forward_begin_node" }
%"struct.std::__1::__forward_begin_node" = type { %"struct.std::__1::__forward_list_node"* }
%"struct.std::__1::__forward_list_node" = type { %"struct.std::__1::__forward_begin_node", %"class.SkSL::String" }
%class.SkTHashMap = type { %class.SkTHashTable }
%class.SkTHashTable = type { i32, i32, %class.SkAutoTArray }
%class.SkAutoTArray = type { %"class.std::__1::unique_ptr.18" }
%"class.std::__1::unique_ptr.18" = type { %"class.std::__1::__compressed_pair.19" }
%"class.std::__1::__compressed_pair.19" = type { %"struct.std::__1::__compressed_pair_elem.20" }
%"struct.std::__1::__compressed_pair_elem.20" = type { %"struct.SkTHashTable<SkTHashMap<SkSL::SymbolTable::SymbolKey, const SkSL::Symbol *, SkSL::SymbolTable::SymbolKey::Hash>::Pair, SkSL::SymbolTable::SymbolKey, SkTHashMap<SkSL::SymbolTable::SymbolKey, const SkSL::Symbol *, SkSL::SymbolTable::SymbolKey::Hash>::Pair>::Slot"* }
%"struct.SkTHashTable<SkTHashMap<SkSL::SymbolTable::SymbolKey, const SkSL::Symbol *, SkSL::SymbolTable::SymbolKey::Hash>::Pair, SkSL::SymbolTable::SymbolKey, SkTHashMap<SkSL::SymbolTable::SymbolKey, const SkSL::Symbol *, SkSL::SymbolTable::SymbolKey::Hash>::Pair>::Slot" = type <{ %"struct.SkTHashMap<SkSL::SymbolTable::SymbolKey, const SkSL::Symbol *, SkSL::SymbolTable::SymbolKey::Hash>::Pair", i32, [4 x i8] }>
%"struct.SkTHashMap<SkSL::SymbolTable::SymbolKey, const SkSL::Symbol *, SkSL::SymbolTable::SymbolKey::Hash>::Pair" = type { %"struct.std::__1::pair" }
%"struct.std::__1::pair" = type { %"struct.SkSL::SymbolTable::SymbolKey", %"class.SkSL::Symbol"* }
%"struct.SkSL::SymbolTable::SymbolKey" = type <{ %"struct.SkSL::StringFragment", i32, [4 x i8] }>
%"class.SkSL::ErrorReporter" = type { i32 (...)** }
%"class.std::__1::__shared_weak_count" = type { %"class.std::__1::__shared_count", i64 }
%"class.std::__1::__shared_count" = type { i32 (...)**, i64 }
%"class.SkSL::dsl::DSLExpression" = type { %"class.std::__1::unique_ptr.24" }
%"class.std::__1::unique_ptr.24" = type { %"class.std::__1::__compressed_pair.25" }
%"class.std::__1::__compressed_pair.25" = type { %"struct.std::__1::__compressed_pair_elem.26" }
%"struct.std::__1::__compressed_pair_elem.26" = type { %"class.SkSL::Expression"* }
%"class.SkSL::Expression" = type { %"class.SkSL::IRNode", %"class.SkSL::Type"* }
%"class.SkSL::dsl::DSLPossibleExpression" = type { %"class.std::__1::unique_ptr.24" }
%"class.SkSL::dsl::DSLPossibleStatement" = type { %"class.std::__1::unique_ptr" }
%"class.SkSL::dsl::DSLWriter" = type { %"class.std::__1::unique_ptr.121", %"class.std::__1::unique_ptr.127", %"class.SkSL::Compiler"*, %"class.std::__1::unique_ptr.133", %"struct.SkSL::ProgramConfig"*, %"class.SkSL::ModifiersPool"*, %"class.std::__1::vector.145", %"class.std::__1::vector.158", %"class.SkSL::dsl::ErrorHandler"*, %"struct.SkSL::ProgramSettings", %"class.SkSL::Mangler", %"class.std::__1::stack" }
%"class.std::__1::unique_ptr.121" = type { %"class.std::__1::__compressed_pair.122" }
%"class.std::__1::__compressed_pair.122" = type { %"struct.std::__1::__compressed_pair_elem.123" }
%"struct.std::__1::__compressed_pair_elem.123" = type { %"struct.SkSL::ProgramConfig"* }
%"class.std::__1::unique_ptr.127" = type { %"class.std::__1::__compressed_pair.128" }
%"class.std::__1::__compressed_pair.128" = type { %"struct.std::__1::__compressed_pair_elem.129" }
%"struct.std::__1::__compressed_pair_elem.129" = type { %"class.SkSL::ModifiersPool"* }
%"class.SkSL::Compiler" = type { %"class.SkSL::ErrorReporter", %"class.std::__1::shared_ptr.55", %"class.std::__1::shared_ptr", %"class.std::__1::shared_ptr", %"struct.SkSL::ParsedModule", %"struct.SkSL::ParsedModule", %"struct.SkSL::ParsedModule", %"struct.SkSL::ParsedModule", %"struct.SkSL::ParsedModule", %"struct.SkSL::ParsedModule", %"struct.SkSL::ParsedModule", %"struct.SkSL::ParsedModule", %"struct.SkSL::ParsedModule", %"struct.SkSL::ParsedModule", %"class.SkSL::ModifiersPool", %"class.SkSL::Inliner", %"class.std::__1::unique_ptr.84", %"class.SkSL::String"*, i32, %"class.SkSL::String", %"class.std::__1::vector.90" }
%"class.std::__1::shared_ptr.55" = type { %"class.SkSL::Context"*, %"class.std::__1::__shared_weak_count"* }
%"class.SkSL::Context" = type { %"class.SkSL::BuiltinTypes", %"class.SkSL::ErrorReporter"*, %class.GrShaderCaps*, %"class.SkSL::ModifiersPool"*, %"struct.SkSL::ProgramConfig"* }
%"class.SkSL::BuiltinTypes" = type { %"class.std::__1::unique_ptr.56", %"class.std::__1::unique_ptr.56", %"class.std::__1::unique_ptr.56", %"class.std::__1::unique_ptr.56", %"class.std::__1::unique_ptr.56", %"class.std::__1::unique_ptr.56", %"class.std::__1::unique_ptr.56", %"class.std::__1::unique_ptr.56", %"class.std::__1::unique_ptr.56", %"class.std::__1::unique_ptr.56", %"class.std::__1::unique_ptr.56", %"class.std::__1::unique_ptr.56", %"class.std::__1::unique_ptr.56", %"class.std::__1::unique_ptr.56", %"class.std::__1::unique_ptr.56", %"class.std::__1::unique_ptr.56", %"class.std::__1::unique_ptr.56", %"class.std::__1::unique_ptr.56", %"class.std::__1::unique_ptr.56", %"class.std::__1::unique_ptr.56", %"class.std::__1::unique_ptr.56", %"class.std::__1::unique_ptr.56", %"class.std::__1::unique_ptr.56", %"class.std::__1::unique_ptr.56", %"class.std::__1::unique_ptr.56", %"class.std::__1::unique_ptr.56", %"class.std::__1::unique_ptr.56", %"class.std::__1::unique_ptr.56", %"class.std::__1::unique_ptr.56", %"class.std::__1::unique_ptr.56", %"class.std::__1::unique_ptr.56", %"class.std::__1::unique_ptr.56", %"class.std::__1::unique_ptr.56", %"class.std::__1::unique_ptr.56", %"class.std::__1::unique_ptr.56", %"class.std::__1::unique_ptr.56", %"class.std::__1::unique_ptr.56", %"class.std::__1::unique_ptr.56", %"class.std::__1::unique_ptr.56", %"class.std::__1::unique_ptr.56", %"class.std::__1::unique_ptr.56", %"class.std::__1::unique_ptr.56", %"class.std::__1::unique_ptr.56", %"class.std::__1::unique_ptr.56", %"class.std::__1::unique_ptr.56", %"class.std::__1::unique_ptr.56", %"class.std::__1::unique_ptr.56", %"class.std::__1::unique_ptr.56", %"class.std::__1::unique_ptr.56", %"class.std::__1::unique_ptr.56", %"class.std::__1::unique_ptr.56", %"class.std::__1::unique_ptr.56", %"class.std::__1::unique_ptr.56", %"class.std::__1::unique_ptr.56", %"class.std::__1::unique_ptr.56", %"class.std::__1::unique_ptr.56", %"class.std::__1::unique_ptr.56", %"class.std::__1::unique_ptr.56", %"class.std::__1::unique_ptr.56", %"class.std::__1::unique_ptr.56", %"class.std::__1::unique_ptr.56", %"class.std::__1::unique_ptr.56", %"class.std::__1::unique_ptr.56", %"class.std::__1::unique_ptr.56", %"class.std::__1::unique_ptr.56", %"class.std::__1::unique_ptr.56", %"class.std::__1::unique_ptr.56", %"class.std::__1::unique_ptr.56", %"class.std::__1::unique_ptr.56", %"class.std::__1::unique_ptr.56", %"class.std::__1::unique_ptr.56", %"class.std::__1::unique_ptr.56", %"class.std::__1::unique_ptr.56", %"class.std::__1::unique_ptr.56", %"class.std::__1::unique_ptr.56", %"class.std::__1::unique_ptr.56", %"class.std::__1::unique_ptr.56", %"class.std::__1::unique_ptr.56", %"class.std::__1::unique_ptr.56", %"class.std::__1::unique_ptr.56", %"class.std::__1::unique_ptr.56", %"class.std::__1::unique_ptr.56", %"class.std::__1::unique_ptr.56", %"class.std::__1::unique_ptr.56", %"class.std::__1::unique_ptr.56", %"class.std::__1::unique_ptr.56", %"class.std::__1::unique_ptr.56", %"class.std::__1::unique_ptr.56", %"class.std::__1::unique_ptr.56" }
%"class.std::__1::unique_ptr.56" = type { %"class.std::__1::__compressed_pair.57" }
%"class.std::__1::__compressed_pair.57" = type { %"struct.std::__1::__compressed_pair_elem.58" }
%"struct.std::__1::__compressed_pair_elem.58" = type { %"class.SkSL::Type"* }
%class.GrShaderCaps = type <{ %class.SkRefCnt.base, i32, i56, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i32, i32, i32, [4 x i8] }>
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.62" }
%"struct.std::__1::__atomic_base.62" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"struct.SkSL::ParsedModule" = type { %"class.std::__1::shared_ptr", %"class.std::__1::shared_ptr.83" }
%"class.std::__1::shared_ptr.83" = type { %"class.SkSL::IRIntrinsicMap"*, %"class.std::__1::__shared_weak_count"* }
%"class.SkSL::IRIntrinsicMap" = type opaque
%"class.SkSL::ModifiersPool" = type { %"class.std::__1::unordered_set" }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.63", %"class.std::__1::__compressed_pair.72", %"class.std::__1::__compressed_pair.77", %"class.std::__1::__compressed_pair.79", [4 x i8] }>
%"class.std::__1::unique_ptr.63" = type { %"class.std::__1::__compressed_pair.64" }
%"class.std::__1::__compressed_pair.64" = type { %"struct.std::__1::__compressed_pair_elem.65", %"struct.std::__1::__compressed_pair_elem.66" }
%"struct.std::__1::__compressed_pair_elem.65" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.66" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.67" }
%"class.std::__1::__compressed_pair.67" = type { %"struct.std::__1::__compressed_pair_elem.68" }
%"struct.std::__1::__compressed_pair_elem.68" = type { i64 }
%"class.std::__1::__compressed_pair.72" = type { %"struct.std::__1::__compressed_pair_elem.73" }
%"struct.std::__1::__compressed_pair_elem.73" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.77" = type { %"struct.std::__1::__compressed_pair_elem.68" }
%"class.std::__1::__compressed_pair.79" = type { %"struct.std::__1::__compressed_pair_elem.80" }
%"struct.std::__1::__compressed_pair_elem.80" = type { float }
%"class.SkSL::Inliner" = type { %"class.SkSL::Context"*, %"class.SkSL::Mangler", i32 }
%"class.std::__1::unique_ptr.84" = type { %"class.std::__1::__compressed_pair.85" }
%"class.std::__1::__compressed_pair.85" = type { %"struct.std::__1::__compressed_pair_elem.86" }
%"struct.std::__1::__compressed_pair_elem.86" = type { %"class.SkSL::IRGenerator"* }
%"class.SkSL::IRGenerator" = type opaque
%"class.std::__1::vector.90" = type { %"class.std::__1::__vector_base.91" }
%"class.std::__1::__vector_base.91" = type { i64*, i64*, %"class.std::__1::__compressed_pair.92" }
%"class.std::__1::__compressed_pair.92" = type { %"struct.std::__1::__compressed_pair_elem.93" }
%"struct.std::__1::__compressed_pair_elem.93" = type { i64* }
%"class.std::__1::unique_ptr.133" = type { %"class.std::__1::__compressed_pair.134" }
%"class.std::__1::__compressed_pair.134" = type { %"struct.std::__1::__compressed_pair_elem.135" }
%"struct.std::__1::__compressed_pair_elem.135" = type { %"class.SkSL::Pool"* }
%"class.SkSL::Pool" = type { %"class.std::__1::unique_ptr.136" }
%"class.std::__1::unique_ptr.136" = type { %"class.std::__1::__compressed_pair.137" }
%"class.std::__1::__compressed_pair.137" = type { %"struct.std::__1::__compressed_pair_elem.138" }
%"struct.std::__1::__compressed_pair_elem.138" = type { %class.GrMemoryPool* }
%class.GrMemoryPool = type { %class.GrBlockAllocator }
%class.GrBlockAllocator = type { %"class.GrBlockAllocator::Block"*, i64, %"class.GrBlockAllocator::Block" }
%"class.GrBlockAllocator::Block" = type { %"class.GrBlockAllocator::Block"*, %"class.GrBlockAllocator::Block"*, i32, i32, i32, i32 }
%"struct.SkSL::ProgramConfig" = type { i8, %"struct.SkSL::ProgramSettings" }
%"class.std::__1::vector.145" = type { %"class.std::__1::__vector_base.146" }
%"class.std::__1::__vector_base.146" = type { %"class.std::__1::unique_ptr.147"*, %"class.std::__1::unique_ptr.147"*, %"class.std::__1::__compressed_pair.153" }
%"class.std::__1::unique_ptr.147" = type { %"class.std::__1::__compressed_pair.148" }
%"class.std::__1::__compressed_pair.148" = type { %"struct.std::__1::__compressed_pair_elem.149" }
%"struct.std::__1::__compressed_pair_elem.149" = type { %"class.SkSL::ProgramElement"* }
%"class.SkSL::ProgramElement" = type { %"class.SkSL::IRNode" }
%"class.std::__1::__compressed_pair.153" = type { %"struct.std::__1::__compressed_pair_elem.154" }
%"struct.std::__1::__compressed_pair_elem.154" = type { %"class.std::__1::unique_ptr.147"* }
%"class.std::__1::vector.158" = type { %"class.std::__1::__vector_base.159" }
%"class.std::__1::__vector_base.159" = type { %"class.SkSL::ProgramElement"**, %"class.SkSL::ProgramElement"**, %"class.std::__1::__compressed_pair.160" }
%"class.std::__1::__compressed_pair.160" = type { %"struct.std::__1::__compressed_pair_elem.161" }
%"struct.std::__1::__compressed_pair_elem.161" = type { %"class.SkSL::ProgramElement"** }
%"class.SkSL::dsl::ErrorHandler" = type { i32 (...)** }
%"struct.SkSL::ProgramSettings" = type { i8, i8, i8, i8, i8, i32, i32, i32, i32, i32, i8, i8, i8, i32, i8, i8, i8, i8, i8, i8, i8, i8, %"class.std::__1::vector.82"* }
%"class.std::__1::vector.82" = type opaque
%"class.SkSL::Mangler" = type { i32 }
%"class.std::__1::stack" = type { %"class.std::__1::list" }
%"class.std::__1::list" = type { %"class.std::__1::__list_imp" }
%"class.std::__1::__list_imp" = type { %"struct.std::__1::__list_node_base", %"class.std::__1::__compressed_pair.165" }
%"struct.std::__1::__list_node_base" = type { %"struct.std::__1::__list_node_base"*, %"struct.std::__1::__list_node_base"* }
%"class.std::__1::__compressed_pair.165" = type { %"struct.std::__1::__compressed_pair_elem.68" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.SkSL::dsl::PositionInfo" = type <{ i8*, i32, [4 x i8] }>
%"struct.std::__1::__list_node" = type { %"struct.std::__1::__list_node_base", %"struct.SkSL::dsl::DSLWriter::StackFrame" }
%"struct.SkSL::dsl::DSLWriter::StackFrame" = type { %class.GrGLSLFragmentProcessor*, %"struct.GrGLSLFragmentProcessor::EmitArgs"*, %class.SkSTArray }
%class.GrGLSLFragmentProcessor = type { i32 (...)**, %class.SkTArray.99, %class.SkTArray.169 }
%class.SkTArray.99 = type { %class.SkString*, i64 }
%class.SkString = type { %class.sk_sp }
%class.sk_sp = type { %"struct.SkString::Rec"* }
%"struct.SkString::Rec" = type <{ i32, %"struct.std::__1::atomic", i8, [3 x i8] }>
%class.SkTArray.169 = type { %"class.std::__1::unique_ptr.170"*, i64 }
%"class.std::__1::unique_ptr.170" = type { %"class.std::__1::__compressed_pair.171" }
%"class.std::__1::__compressed_pair.171" = type { %"struct.std::__1::__compressed_pair_elem.172" }
%"struct.std::__1::__compressed_pair_elem.172" = type { %class.GrGLSLFragmentProcessor* }
%"struct.GrGLSLFragmentProcessor::EmitArgs" = type { %class.GrGLSLFPFragmentBuilder*, %class.GrGLSLUniformHandler*, %class.GrShaderCaps*, %class.GrFragmentProcessor*, i8*, i8*, %"class.GrGLSLFragmentProcessor::BuilderInputProvider"* }
%class.GrGLSLFPFragmentBuilder = type <{ i32 (...)**, [4 x i8], [4 x i8], %class.GrGLSLShaderBuilder.base, [12 x i8] }>
%class.GrGLSLShaderBuilder.base = type <{ i32 (...)**, %class.GrGLSLProgramBuilder*, %"class.SkSL::String", %class.SkSTArray.97, %class.SkString, %class.SkString, %class.SkString, %class.SkSTArray, [8 x i8], %class.GrTBlockList, %class.GrTBlockList, i32, [4 x i8], [2 x %class.SkSTArray.100], i32, i8, [3 x i8], i32 }>
%class.GrGLSLProgramBuilder = type opaque
%class.SkSTArray.97 = type { %class.SkAlignedSTStorage.98, %class.SkTArray.99 }
%class.SkAlignedSTStorage.98 = type { [120 x i8] }
%class.GrTBlockList = type { %class.GrSBlockAllocator }
%class.GrSBlockAllocator = type { [88 x i8], [8 x i8] }
%class.SkSTArray.100 = type { %class.SkAlignedSTStorage.101, %class.SkTArray.99 }
%class.SkAlignedSTStorage.101 = type { [8 x i8] }
%class.GrGLSLUniformHandler = type { i32 (...)**, %class.GrGLSLProgramBuilder* }
%class.GrFragmentProcessor = type <{ %class.GrProcessor, %class.SkSTArray.102, %class.GrFragmentProcessor*, i32, %"struct.SkSL::SampleUsage", [4 x i8] }>
%class.GrProcessor = type { i32 (...)**, i32, i32 }
%class.SkSTArray.102 = type { %class.SkAlignedSTStorage.103, %class.SkTArray.104 }
%class.SkAlignedSTStorage.103 = type { [8 x i8] }
%class.SkTArray.104 = type { %"class.std::__1::unique_ptr.105"*, i64 }
%"class.std::__1::unique_ptr.105" = type { %"class.std::__1::__compressed_pair.106" }
%"class.std::__1::__compressed_pair.106" = type { %"struct.std::__1::__compressed_pair_elem.107" }
%"struct.std::__1::__compressed_pair_elem.107" = type { %class.GrFragmentProcessor* }
%"struct.SkSL::SampleUsage" = type <{ i32, i8, [3 x i8] }>
%"class.GrGLSLFragmentProcessor::BuilderInputProvider" = type opaque
%class.GrGLSLShaderBuilder = type <{ i32 (...)**, %class.GrGLSLProgramBuilder*, %"class.SkSL::String", %class.SkSTArray.97, %class.SkString, %class.SkString, %class.SkString, %class.SkSTArray, [8 x i8], %class.GrTBlockList, %class.GrTBlockList, i32, [4 x i8], [2 x %class.SkSTArray.100], i32, i8, [3 x i8], i32, [12 x i8] }>
%"class.SkSL::ExpressionStatement" = type { %"class.SkSL::Statement", %"class.std::__1::unique_ptr.24" }

$_ZN4SkSL19ExpressionStatementD2Ev = comdat any

$_ZN4SkSL19ExpressionStatementD0Ev = comdat any

$_ZNK4SkSL19ExpressionStatement11descriptionEv = comdat any

$_ZNK4SkSL9Statement7isEmptyEv = comdat any

$_ZNK4SkSL19ExpressionStatement5cloneEv = comdat any

$_ZN8SkTArrayINSt3__110unique_ptrIN4SkSL9StatementENS0_14default_deleteIS3_EEEELb0EEaSEOS7_ = comdat any

$_ZN8SkTArrayINSt3__110unique_ptrIN4SkSL9StatementENS0_14default_deleteIS3_EEEELb0EE12checkReallocEiNS7_11ReallocTypeE = comdat any

$_ZTVN4SkSL19ExpressionStatementE = comdat any

@_ZTVN4SkSL19ExpressionStatementE = linkonce_odr hidden unnamed_addr constant { [7 x i8*] } { [7 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.SkSL::ExpressionStatement"*)* @_ZN4SkSL19ExpressionStatementD2Ev to i8*), i8* bitcast (void (%"class.SkSL::ExpressionStatement"*)* @_ZN4SkSL19ExpressionStatementD0Ev to i8*), i8* bitcast (void (%"class.SkSL::String"*, %"class.SkSL::ExpressionStatement"*)* @_ZNK4SkSL19ExpressionStatement11descriptionEv to i8*), i8* bitcast (i1 (%"class.SkSL::Statement"*)* @_ZNK4SkSL9Statement7isEmptyEv to i8*), i8* bitcast (%"class.SkSL::Statement"* (%"class.SkSL::ExpressionStatement"*)* @_ZNK4SkSL19ExpressionStatement5cloneEv to i8*)] }, comdat, align 8
@.str = private unnamed_addr constant [2 x i8] c";\00", align 1

@_ZN4SkSL3dsl12DSLStatementC1Ev = hidden unnamed_addr alias void (%"class.SkSL::dsl::DSLStatement"*), void (%"class.SkSL::dsl::DSLStatement"*)* @_ZN4SkSL3dsl12DSLStatementC2Ev
@_ZN4SkSL3dsl12DSLStatementC1ENS0_8DSLBlockE = hidden unnamed_addr alias void (%"class.SkSL::dsl::DSLStatement"*, %"class.SkSL::dsl::DSLBlock"*), void (%"class.SkSL::dsl::DSLStatement"*, %"class.SkSL::dsl::DSLBlock"*)* @_ZN4SkSL3dsl12DSLStatementC2ENS0_8DSLBlockE
@_ZN4SkSL3dsl12DSLStatementC1ENS0_13DSLExpressionE = hidden unnamed_addr alias void (%"class.SkSL::dsl::DSLStatement"*, %"class.SkSL::dsl::DSLExpression"*), void (%"class.SkSL::dsl::DSLStatement"*, %"class.SkSL::dsl::DSLExpression"*)* @_ZN4SkSL3dsl12DSLStatementC2ENS0_13DSLExpressionE
@_ZN4SkSL3dsl12DSLStatementC1ENSt3__110unique_ptrINS_10ExpressionENS2_14default_deleteIS4_EEEE = hidden unnamed_addr alias void (%"class.SkSL::dsl::DSLStatement"*, %"class.SkSL::Expression"*), void (%"class.SkSL::dsl::DSLStatement"*, %"class.SkSL::Expression"*)* @_ZN4SkSL3dsl12DSLStatementC2ENSt3__110unique_ptrINS_10ExpressionENS2_14default_deleteIS4_EEEE
@_ZN4SkSL3dsl12DSLStatementC1ENSt3__110unique_ptrINS_9StatementENS2_14default_deleteIS4_EEEE = hidden unnamed_addr alias void (%"class.SkSL::dsl::DSLStatement"*, %"class.SkSL::Statement"*), void (%"class.SkSL::dsl::DSLStatement"*, %"class.SkSL::Statement"*)* @_ZN4SkSL3dsl12DSLStatementC2ENSt3__110unique_ptrINS_9StatementENS2_14default_deleteIS4_EEEE
@_ZN4SkSL3dsl12DSLStatementC1ENS0_21DSLPossibleExpressionENS0_12PositionInfoE = hidden unnamed_addr alias void (%"class.SkSL::dsl::DSLStatement"*, %"class.SkSL::dsl::DSLPossibleExpression"*, i8*, i32), void (%"class.SkSL::dsl::DSLStatement"*, %"class.SkSL::dsl::DSLPossibleExpression"*, i8*, i32)* @_ZN4SkSL3dsl12DSLStatementC2ENS0_21DSLPossibleExpressionENS0_12PositionInfoE
@_ZN4SkSL3dsl12DSLStatementC1ENS0_20DSLPossibleStatementENS0_12PositionInfoE = hidden unnamed_addr alias void (%"class.SkSL::dsl::DSLStatement"*, %"class.SkSL::dsl::DSLPossibleStatement"*, i8*, i32), void (%"class.SkSL::dsl::DSLStatement"*, %"class.SkSL::dsl::DSLPossibleStatement"*, i8*, i32)* @_ZN4SkSL3dsl12DSLStatementC2ENS0_20DSLPossibleStatementENS0_12PositionInfoE
@_ZN4SkSL3dsl12DSLStatementD1Ev = hidden unnamed_addr alias void (%"class.SkSL::dsl::DSLStatement"*), void (%"class.SkSL::dsl::DSLStatement"*)* @_ZN4SkSL3dsl12DSLStatementD2Ev
@_ZN4SkSL3dsl20DSLPossibleStatementC1ENSt3__110unique_ptrINS_9StatementENS2_14default_deleteIS4_EEEE = hidden unnamed_addr alias void (%"class.SkSL::dsl::DSLPossibleStatement"*, %"class.SkSL::Statement"*), void (%"class.SkSL::dsl::DSLPossibleStatement"*, %"class.SkSL::Statement"*)* @_ZN4SkSL3dsl20DSLPossibleStatementC2ENSt3__110unique_ptrINS_9StatementENS2_14default_deleteIS4_EEEE
@_ZN4SkSL3dsl20DSLPossibleStatementD1Ev = hidden unnamed_addr alias void (%"class.SkSL::dsl::DSLPossibleStatement"*), void (%"class.SkSL::dsl::DSLPossibleStatement"*)* @_ZN4SkSL3dsl20DSLPossibleStatementD2Ev

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN4SkSL3dsl12DSLStatementC2Ev(%"class.SkSL::dsl::DSLStatement"* nocapture) unnamed_addr #0 align 2 {
  %2 = bitcast %"class.SkSL::dsl::DSLStatement"* %0 to i64*
  store i64 0, i64* %2, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4SkSL3dsl12DSLStatementC2ENS0_8DSLBlockE(%"class.SkSL::dsl::DSLStatement"* nocapture, %"class.SkSL::dsl::DSLBlock"*) unnamed_addr #1 align 2 {
  %3 = tail call %"class.SkSL::Statement"* @_ZN4SkSL3dsl8DSLBlock7releaseEv(%"class.SkSL::dsl::DSLBlock"* %1) #7
  %4 = getelementptr inbounds %"class.SkSL::dsl::DSLStatement", %"class.SkSL::dsl::DSLStatement"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store %"class.SkSL::Statement"* %3, %"class.SkSL::Statement"** %4, align 8
  ret void
}

declare %"class.SkSL::Statement"* @_ZN4SkSL3dsl8DSLBlock7releaseEv(%"class.SkSL::dsl::DSLBlock"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4SkSL3dsl12DSLStatementC2ENS0_13DSLExpressionE(%"class.SkSL::dsl::DSLStatement"* nocapture, %"class.SkSL::dsl::DSLExpression"*) unnamed_addr #1 align 2 {
  %3 = bitcast %"class.SkSL::dsl::DSLStatement"* %0 to i64*
  store i64 0, i64* %3, align 8
  %4 = tail call %"class.SkSL::Expression"* @_ZN4SkSL3dsl13DSLExpression7releaseEv(%"class.SkSL::dsl::DSLExpression"* %1) #7
  %5 = icmp eq %"class.SkSL::Expression"* %4, null
  br i1 %5, label %27, label %6

6:                                                ; preds = %2
  %7 = ptrtoint %"class.SkSL::Expression"* %4 to i64
  %8 = tail call i8* @_ZN4SkSL4Pool11AllocMemoryEm(i64 24) #7
  %9 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %4, i64 0, i32 0, i32 1
  %10 = load i32, i32* %9, align 8
  %11 = getelementptr inbounds i8, i8* %8, i64 8
  %12 = bitcast i8* %11 to i32*
  store i32 %10, i32* %12, align 8
  %13 = getelementptr inbounds i8, i8* %8, i64 12
  %14 = bitcast i8* %13 to i32*
  store i32 21, i32* %14, align 4
  %15 = bitcast i8* %8 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN4SkSL19ExpressionStatementE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %15, align 8
  %16 = getelementptr inbounds i8, i8* %8, i64 16
  %17 = bitcast i8* %16 to i64*
  store i64 %7, i64* %17, align 8
  %18 = getelementptr inbounds %"class.SkSL::dsl::DSLStatement", %"class.SkSL::dsl::DSLStatement"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %19 = load %"class.SkSL::Statement"*, %"class.SkSL::Statement"** %18, align 8
  %20 = bitcast %"class.SkSL::dsl::DSLStatement"* %0 to i8**
  store i8* %8, i8** %20, align 8
  %21 = icmp eq %"class.SkSL::Statement"* %19, null
  br i1 %21, label %27, label %22

22:                                               ; preds = %6
  %23 = bitcast %"class.SkSL::Statement"* %19 to void (%"class.SkSL::Statement"*)***
  %24 = load void (%"class.SkSL::Statement"*)**, void (%"class.SkSL::Statement"*)*** %23, align 8
  %25 = getelementptr inbounds void (%"class.SkSL::Statement"*)*, void (%"class.SkSL::Statement"*)** %24, i64 1
  %26 = load void (%"class.SkSL::Statement"*)*, void (%"class.SkSL::Statement"*)** %25, align 8
  tail call void %26(%"class.SkSL::Statement"* nonnull %19) #7
  br label %27

27:                                               ; preds = %2, %6, %22
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

declare %"class.SkSL::Expression"* @_ZN4SkSL3dsl13DSLExpression7releaseEv(%"class.SkSL::dsl::DSLExpression"*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4SkSL3dsl12DSLStatementC2ENSt3__110unique_ptrINS_10ExpressionENS2_14default_deleteIS4_EEEE(%"class.SkSL::dsl::DSLStatement"* nocapture, %"class.SkSL::Expression"*) unnamed_addr #1 align 2 {
  %3 = ptrtoint %"class.SkSL::Expression"* %1 to i64
  %4 = tail call i8* @_ZN4SkSL4Pool11AllocMemoryEm(i64 24) #7
  %5 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %1, i64 0, i32 0, i32 1
  %6 = load i32, i32* %5, align 8
  %7 = getelementptr inbounds i8, i8* %4, i64 8
  %8 = bitcast i8* %7 to i32*
  store i32 %6, i32* %8, align 8
  %9 = getelementptr inbounds i8, i8* %4, i64 12
  %10 = bitcast i8* %9 to i32*
  store i32 21, i32* %10, align 4
  %11 = bitcast i8* %4 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN4SkSL19ExpressionStatementE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %11, align 8
  %12 = getelementptr inbounds i8, i8* %4, i64 16
  %13 = bitcast i8* %12 to i64*
  store i64 %3, i64* %13, align 8
  %14 = ptrtoint i8* %4 to i64
  %15 = bitcast %"class.SkSL::dsl::DSLStatement"* %0 to i64*
  store i64 %14, i64* %15, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4SkSL3dsl12DSLStatementC2ENSt3__110unique_ptrINS_9StatementENS2_14default_deleteIS4_EEEE(%"class.SkSL::dsl::DSLStatement"* nocapture, %"class.SkSL::Statement"*) unnamed_addr #1 align 2 {
  %3 = alloca %"class.SkSL::String", align 8
  %4 = ptrtoint %"class.SkSL::Statement"* %1 to i64
  %5 = bitcast %"class.SkSL::dsl::DSLStatement"* %0 to i64*
  store i64 %4, i64* %5, align 8
  %6 = tail call dereferenceable(192) %"class.SkSL::dsl::DSLWriter"* @_ZN4SkSL3dsl9DSLWriter8InstanceEv() #7
  %7 = getelementptr inbounds %"class.SkSL::dsl::DSLWriter", %"class.SkSL::dsl::DSLWriter"* %6, i64 0, i32 2
  %8 = load %"class.SkSL::Compiler"*, %"class.SkSL::Compiler"** %7, align 8
  %9 = bitcast %"class.SkSL::Compiler"* %8 to i32 (%"class.SkSL::Compiler"*)***
  %10 = load i32 (%"class.SkSL::Compiler"*)**, i32 (%"class.SkSL::Compiler"*)*** %9, align 8
  %11 = getelementptr inbounds i32 (%"class.SkSL::Compiler"*)*, i32 (%"class.SkSL::Compiler"*)** %10, i64 3
  %12 = load i32 (%"class.SkSL::Compiler"*)*, i32 (%"class.SkSL::Compiler"*)** %11, align 8
  %13 = tail call i32 %12(%"class.SkSL::Compiler"* %8) #7
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %39, label %15

15:                                               ; preds = %2
  %16 = bitcast %"class.SkSL::String"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %16) #7
  %17 = tail call dereferenceable(192) %"class.SkSL::dsl::DSLWriter"* @_ZN4SkSL3dsl9DSLWriter8InstanceEv() #7
  %18 = getelementptr inbounds %"class.SkSL::dsl::DSLWriter", %"class.SkSL::dsl::DSLWriter"* %17, i64 0, i32 2
  %19 = load %"class.SkSL::Compiler"*, %"class.SkSL::Compiler"** %18, align 8
  call void @_ZN4SkSL8Compiler9errorTextEb(%"class.SkSL::String"* nonnull sret %3, %"class.SkSL::Compiler"* %19, i1 zeroext false) #7
  %20 = bitcast %"class.SkSL::String"* %3 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %21 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %20, i64 0, i32 1, i32 0
  %22 = load i8, i8* %21, align 1
  %23 = icmp slt i8 %22, 0
  %24 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %25 = load i8*, i8** %24, align 8
  %26 = select i1 %23, i8* %25, i8* %16
  call void @_ZN4SkSL3dsl9DSLWriter11ReportErrorEPKcPNS0_12PositionInfoE(i8* %26, %"class.SkSL::dsl::PositionInfo"* null) #7
  %27 = load i8, i8* %21, align 1
  %28 = icmp slt i8 %27, 0
  br i1 %28, label %29, label %31

29:                                               ; preds = %15
  %30 = load i8*, i8** %24, align 8
  call void @_ZdlPv(i8* %30) #8
  br label %31

31:                                               ; preds = %15, %29
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %16) #7
  %32 = call dereferenceable(192) %"class.SkSL::dsl::DSLWriter"* @_ZN4SkSL3dsl9DSLWriter8InstanceEv() #7
  %33 = getelementptr inbounds %"class.SkSL::dsl::DSLWriter", %"class.SkSL::dsl::DSLWriter"* %32, i64 0, i32 2
  %34 = load %"class.SkSL::Compiler"*, %"class.SkSL::Compiler"** %33, align 8
  %35 = bitcast %"class.SkSL::Compiler"* %34 to void (%"class.SkSL::Compiler"*, i32)***
  %36 = load void (%"class.SkSL::Compiler"*, i32)**, void (%"class.SkSL::Compiler"*, i32)*** %35, align 8
  %37 = getelementptr inbounds void (%"class.SkSL::Compiler"*, i32)*, void (%"class.SkSL::Compiler"*, i32)** %36, i64 4
  %38 = load void (%"class.SkSL::Compiler"*, i32)*, void (%"class.SkSL::Compiler"*, i32)** %37, align 8
  call void %38(%"class.SkSL::Compiler"* %34, i32 0) #7
  br label %39

39:                                               ; preds = %31, %2
  ret void
}

declare void @_ZN4SkSL3dsl9DSLWriter11ReportErrorEPKcPNS0_12PositionInfoE(i8*, %"class.SkSL::dsl::PositionInfo"*) local_unnamed_addr #2

declare void @_ZN4SkSL8Compiler9errorTextEb(%"class.SkSL::String"* sret, %"class.SkSL::Compiler"*, i1 zeroext) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4SkSL3dsl12DSLStatementC2ENS0_21DSLPossibleExpressionENS0_12PositionInfoE(%"class.SkSL::dsl::DSLStatement"* nocapture, %"class.SkSL::dsl::DSLPossibleExpression"*, i8*, i32) unnamed_addr #1 align 2 {
  %5 = alloca %"class.SkSL::dsl::DSLExpression", align 8
  %6 = alloca %"class.SkSL::dsl::DSLPossibleExpression", align 8
  call void @_ZN4SkSL3dsl21DSLPossibleExpressionC1EOS1_(%"class.SkSL::dsl::DSLPossibleExpression"* nonnull %6, %"class.SkSL::dsl::DSLPossibleExpression"* dereferenceable(8) %1) #7
  call void @_ZN4SkSL3dsl13DSLExpressionC1ENS0_21DSLPossibleExpressionENS0_12PositionInfoE(%"class.SkSL::dsl::DSLExpression"* nonnull %5, %"class.SkSL::dsl::DSLPossibleExpression"* nonnull %6, i8* %2, i32 %3) #7
  %7 = bitcast %"class.SkSL::dsl::DSLStatement"* %0 to i64*
  store i64 0, i64* %7, align 8
  %8 = call %"class.SkSL::Expression"* @_ZN4SkSL3dsl13DSLExpression7releaseEv(%"class.SkSL::dsl::DSLExpression"* nonnull %5) #7
  %9 = icmp eq %"class.SkSL::Expression"* %8, null
  br i1 %9, label %31, label %10

10:                                               ; preds = %4
  %11 = ptrtoint %"class.SkSL::Expression"* %8 to i64
  %12 = call i8* @_ZN4SkSL4Pool11AllocMemoryEm(i64 24) #7
  %13 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %8, i64 0, i32 0, i32 1
  %14 = load i32, i32* %13, align 8
  %15 = getelementptr inbounds i8, i8* %12, i64 8
  %16 = bitcast i8* %15 to i32*
  store i32 %14, i32* %16, align 8
  %17 = getelementptr inbounds i8, i8* %12, i64 12
  %18 = bitcast i8* %17 to i32*
  store i32 21, i32* %18, align 4
  %19 = bitcast i8* %12 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN4SkSL19ExpressionStatementE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %19, align 8
  %20 = getelementptr inbounds i8, i8* %12, i64 16
  %21 = bitcast i8* %20 to i64*
  store i64 %11, i64* %21, align 8
  %22 = getelementptr inbounds %"class.SkSL::dsl::DSLStatement", %"class.SkSL::dsl::DSLStatement"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %23 = load %"class.SkSL::Statement"*, %"class.SkSL::Statement"** %22, align 8
  %24 = bitcast %"class.SkSL::dsl::DSLStatement"* %0 to i8**
  store i8* %12, i8** %24, align 8
  %25 = icmp eq %"class.SkSL::Statement"* %23, null
  br i1 %25, label %31, label %26

26:                                               ; preds = %10
  %27 = bitcast %"class.SkSL::Statement"* %23 to void (%"class.SkSL::Statement"*)***
  %28 = load void (%"class.SkSL::Statement"*)**, void (%"class.SkSL::Statement"*)*** %27, align 8
  %29 = getelementptr inbounds void (%"class.SkSL::Statement"*)*, void (%"class.SkSL::Statement"*)** %28, i64 1
  %30 = load void (%"class.SkSL::Statement"*)*, void (%"class.SkSL::Statement"*)** %29, align 8
  call void %30(%"class.SkSL::Statement"* nonnull %23) #7
  br label %31

31:                                               ; preds = %4, %10, %26
  call void @_ZN4SkSL3dsl13DSLExpressionD1Ev(%"class.SkSL::dsl::DSLExpression"* nonnull %5) #7
  call void @_ZN4SkSL3dsl21DSLPossibleExpressionD1Ev(%"class.SkSL::dsl::DSLPossibleExpression"* nonnull %6) #7
  ret void
}

declare void @_ZN4SkSL3dsl21DSLPossibleExpressionC1EOS1_(%"class.SkSL::dsl::DSLPossibleExpression"*, %"class.SkSL::dsl::DSLPossibleExpression"* dereferenceable(8)) unnamed_addr #2

declare void @_ZN4SkSL3dsl13DSLExpressionC1ENS0_21DSLPossibleExpressionENS0_12PositionInfoE(%"class.SkSL::dsl::DSLExpression"*, %"class.SkSL::dsl::DSLPossibleExpression"*, i8*, i32) unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN4SkSL3dsl13DSLExpressionD1Ev(%"class.SkSL::dsl::DSLExpression"*) unnamed_addr #4

; Function Attrs: nounwind
declare void @_ZN4SkSL3dsl21DSLPossibleExpressionD1Ev(%"class.SkSL::dsl::DSLPossibleExpression"*) unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4SkSL3dsl12DSLStatementC2ENS0_20DSLPossibleStatementENS0_12PositionInfoE(%"class.SkSL::dsl::DSLStatement"* nocapture, %"class.SkSL::dsl::DSLPossibleStatement"* nocapture, i8*, i32) unnamed_addr #1 align 2 {
  %5 = alloca { i8*, i32 }, align 8
  %6 = alloca %"class.SkSL::String", align 8
  %7 = getelementptr inbounds { i8*, i32 }, { i8*, i32 }* %5, i64 0, i32 0
  store i8* %2, i8** %7, align 8
  %8 = getelementptr inbounds { i8*, i32 }, { i8*, i32 }* %5, i64 0, i32 1
  store i32 %3, i32* %8, align 8
  %9 = bitcast %"class.SkSL::dsl::DSLStatement"* %0 to i64*
  store i64 0, i64* %9, align 8
  %10 = tail call dereferenceable(192) %"class.SkSL::dsl::DSLWriter"* @_ZN4SkSL3dsl9DSLWriter8InstanceEv() #7
  %11 = getelementptr inbounds %"class.SkSL::dsl::DSLWriter", %"class.SkSL::dsl::DSLWriter"* %10, i64 0, i32 2
  %12 = load %"class.SkSL::Compiler"*, %"class.SkSL::Compiler"** %11, align 8
  %13 = bitcast %"class.SkSL::Compiler"* %12 to i32 (%"class.SkSL::Compiler"*)***
  %14 = load i32 (%"class.SkSL::Compiler"*)**, i32 (%"class.SkSL::Compiler"*)*** %13, align 8
  %15 = getelementptr inbounds i32 (%"class.SkSL::Compiler"*)*, i32 (%"class.SkSL::Compiler"*)** %14, i64 3
  %16 = load i32 (%"class.SkSL::Compiler"*)*, i32 (%"class.SkSL::Compiler"*)** %15, align 8
  %17 = tail call i32 %16(%"class.SkSL::Compiler"* %12) #7
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %44, label %19

19:                                               ; preds = %4
  %20 = bitcast { i8*, i32 }* %5 to %"class.SkSL::dsl::PositionInfo"*
  %21 = bitcast %"class.SkSL::String"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %21) #7
  %22 = tail call dereferenceable(192) %"class.SkSL::dsl::DSLWriter"* @_ZN4SkSL3dsl9DSLWriter8InstanceEv() #7
  %23 = getelementptr inbounds %"class.SkSL::dsl::DSLWriter", %"class.SkSL::dsl::DSLWriter"* %22, i64 0, i32 2
  %24 = load %"class.SkSL::Compiler"*, %"class.SkSL::Compiler"** %23, align 8
  call void @_ZN4SkSL8Compiler9errorTextEb(%"class.SkSL::String"* nonnull sret %6, %"class.SkSL::Compiler"* %24, i1 zeroext false) #7
  %25 = bitcast %"class.SkSL::String"* %6 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %26 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %25, i64 0, i32 1, i32 0
  %27 = load i8, i8* %26, align 1
  %28 = icmp slt i8 %27, 0
  %29 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %30 = load i8*, i8** %29, align 8
  %31 = select i1 %28, i8* %30, i8* %21
  call void @_ZN4SkSL3dsl9DSLWriter11ReportErrorEPKcPNS0_12PositionInfoE(i8* %31, %"class.SkSL::dsl::PositionInfo"* nonnull %20) #7
  %32 = load i8, i8* %26, align 1
  %33 = icmp slt i8 %32, 0
  br i1 %33, label %34, label %36

34:                                               ; preds = %19
  %35 = load i8*, i8** %29, align 8
  call void @_ZdlPv(i8* %35) #8
  br label %36

36:                                               ; preds = %19, %34
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %21) #7
  %37 = call dereferenceable(192) %"class.SkSL::dsl::DSLWriter"* @_ZN4SkSL3dsl9DSLWriter8InstanceEv() #7
  %38 = getelementptr inbounds %"class.SkSL::dsl::DSLWriter", %"class.SkSL::dsl::DSLWriter"* %37, i64 0, i32 2
  %39 = load %"class.SkSL::Compiler"*, %"class.SkSL::Compiler"** %38, align 8
  %40 = bitcast %"class.SkSL::Compiler"* %39 to void (%"class.SkSL::Compiler"*, i32)***
  %41 = load void (%"class.SkSL::Compiler"*, i32)**, void (%"class.SkSL::Compiler"*, i32)*** %40, align 8
  %42 = getelementptr inbounds void (%"class.SkSL::Compiler"*, i32)*, void (%"class.SkSL::Compiler"*, i32)** %41, i64 4
  %43 = load void (%"class.SkSL::Compiler"*, i32)*, void (%"class.SkSL::Compiler"*, i32)** %42, align 8
  call void %43(%"class.SkSL::Compiler"* %39, i32 0) #7
  br label %44

44:                                               ; preds = %4, %36
  %45 = getelementptr inbounds %"class.SkSL::dsl::DSLPossibleStatement", %"class.SkSL::dsl::DSLPossibleStatement"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %46 = bitcast %"class.SkSL::dsl::DSLPossibleStatement"* %1 to i64*
  %47 = load i64, i64* %46, align 8
  store %"class.SkSL::Statement"* null, %"class.SkSL::Statement"** %45, align 8
  %48 = getelementptr inbounds %"class.SkSL::dsl::DSLStatement", %"class.SkSL::dsl::DSLStatement"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %49 = load %"class.SkSL::Statement"*, %"class.SkSL::Statement"** %48, align 8
  store i64 %47, i64* %9, align 8
  %50 = icmp eq %"class.SkSL::Statement"* %49, null
  br i1 %50, label %56, label %51

51:                                               ; preds = %44
  %52 = bitcast %"class.SkSL::Statement"* %49 to void (%"class.SkSL::Statement"*)***
  %53 = load void (%"class.SkSL::Statement"*)**, void (%"class.SkSL::Statement"*)*** %52, align 8
  %54 = getelementptr inbounds void (%"class.SkSL::Statement"*)*, void (%"class.SkSL::Statement"*)** %53, i64 1
  %55 = load void (%"class.SkSL::Statement"*)*, void (%"class.SkSL::Statement"*)** %54, align 8
  call void %55(%"class.SkSL::Statement"* nonnull %49) #7
  br label %56

56:                                               ; preds = %44, %51
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4SkSL3dsl12DSLStatementD2Ev(%"class.SkSL::dsl::DSLStatement"* nocapture) unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.SkSL::dsl::DSLStatement", %"class.SkSL::dsl::DSLStatement"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %3 = load %"class.SkSL::Statement"*, %"class.SkSL::Statement"** %2, align 8
  %4 = icmp eq %"class.SkSL::Statement"* %3, null
  br i1 %4, label %5, label %6

5:                                                ; preds = %1
  store %"class.SkSL::Statement"* null, %"class.SkSL::Statement"** %2, align 8
  br label %37

6:                                                ; preds = %1
  %7 = tail call dereferenceable(192) %"class.SkSL::dsl::DSLWriter"* @_ZN4SkSL3dsl9DSLWriter8InstanceEv() #7
  %8 = getelementptr inbounds %"class.SkSL::dsl::DSLWriter", %"class.SkSL::dsl::DSLWriter"* %7, i64 0, i32 11, i32 0, i32 0, i32 1, i32 0, i32 0
  %9 = load i64, i64* %8, align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %29, label %11

11:                                               ; preds = %6
  %12 = tail call dereferenceable(192) %"class.SkSL::dsl::DSLWriter"* @_ZN4SkSL3dsl9DSLWriter8InstanceEv() #7
  %13 = getelementptr inbounds %"class.SkSL::dsl::DSLWriter", %"class.SkSL::dsl::DSLWriter"* %12, i64 0, i32 11
  %14 = bitcast %"class.std::__1::stack"* %13 to %"struct.std::__1::__list_node"**
  %15 = load %"struct.std::__1::__list_node"*, %"struct.std::__1::__list_node"** %14, align 8
  %16 = getelementptr inbounds %"struct.std::__1::__list_node", %"struct.std::__1::__list_node"* %15, i64 0, i32 1, i32 1
  %17 = load %"struct.GrGLSLFragmentProcessor::EmitArgs"*, %"struct.GrGLSLFragmentProcessor::EmitArgs"** %16, align 8
  %18 = getelementptr inbounds %"struct.GrGLSLFragmentProcessor::EmitArgs", %"struct.GrGLSLFragmentProcessor::EmitArgs"* %17, i64 0, i32 0
  %19 = load %class.GrGLSLFPFragmentBuilder*, %class.GrGLSLFPFragmentBuilder** %18, align 8
  %20 = bitcast %class.GrGLSLFPFragmentBuilder* %19 to i8**
  %21 = load i8*, i8** %20, align 8
  %22 = getelementptr i8, i8* %21, i64 -24
  %23 = bitcast i8* %22 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = bitcast %class.GrGLSLFPFragmentBuilder* %19 to i8*
  %26 = getelementptr inbounds i8, i8* %25, i64 %24
  %27 = bitcast i8* %26 to %class.GrGLSLShaderBuilder*
  %28 = load %"class.SkSL::Statement"*, %"class.SkSL::Statement"** %2, align 8
  store %"class.SkSL::Statement"* null, %"class.SkSL::Statement"** %2, align 8
  tail call void @_ZN19GrGLSLShaderBuilder10codeAppendENSt3__110unique_ptrIN4SkSL9StatementENS0_14default_deleteIS3_EEEE(%class.GrGLSLShaderBuilder* %27, %"class.SkSL::Statement"* %28) #7
  br label %29

29:                                               ; preds = %6, %11
  %30 = load %"class.SkSL::Statement"*, %"class.SkSL::Statement"** %2, align 8
  store %"class.SkSL::Statement"* null, %"class.SkSL::Statement"** %2, align 8
  %31 = icmp eq %"class.SkSL::Statement"* %30, null
  br i1 %31, label %37, label %32

32:                                               ; preds = %29
  %33 = bitcast %"class.SkSL::Statement"* %30 to void (%"class.SkSL::Statement"*)***
  %34 = load void (%"class.SkSL::Statement"*)**, void (%"class.SkSL::Statement"*)*** %33, align 8
  %35 = getelementptr inbounds void (%"class.SkSL::Statement"*)*, void (%"class.SkSL::Statement"*)** %34, i64 1
  %36 = load void (%"class.SkSL::Statement"*)*, void (%"class.SkSL::Statement"*)** %35, align 8
  tail call void %36(%"class.SkSL::Statement"* nonnull %30) #7
  br label %37

37:                                               ; preds = %5, %29, %32
  ret void
}

declare void @_ZN19GrGLSLShaderBuilder10codeAppendENSt3__110unique_ptrIN4SkSL9StatementENS0_14default_deleteIS3_EEEE(%class.GrGLSLShaderBuilder*, %"class.SkSL::Statement"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4SkSL3dsl20DSLPossibleStatementC2ENSt3__110unique_ptrINS_9StatementENS2_14default_deleteIS4_EEEE(%"class.SkSL::dsl::DSLPossibleStatement"* nocapture, %"class.SkSL::Statement"*) unnamed_addr #1 align 2 {
  %3 = ptrtoint %"class.SkSL::Statement"* %1 to i64
  %4 = bitcast %"class.SkSL::dsl::DSLPossibleStatement"* %0 to i64*
  store i64 %3, i64* %4, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4SkSL3dsl20DSLPossibleStatementD2Ev(%"class.SkSL::dsl::DSLPossibleStatement"* nocapture) unnamed_addr #1 align 2 {
  %2 = alloca %"class.SkSL::dsl::DSLStatement", align 8
  %3 = getelementptr inbounds %"class.SkSL::dsl::DSLPossibleStatement", %"class.SkSL::dsl::DSLPossibleStatement"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %4 = load %"class.SkSL::Statement"*, %"class.SkSL::Statement"** %3, align 8
  %5 = icmp eq %"class.SkSL::Statement"* %4, null
  store %"class.SkSL::Statement"* null, %"class.SkSL::Statement"** %3, align 8
  br i1 %5, label %46, label %6

6:                                                ; preds = %1
  call void @_ZN4SkSL3dsl12DSLStatementC2ENSt3__110unique_ptrINS_9StatementENS2_14default_deleteIS4_EEEE(%"class.SkSL::dsl::DSLStatement"* nonnull %2, %"class.SkSL::Statement"* nonnull %4)
  %7 = getelementptr inbounds %"class.SkSL::dsl::DSLStatement", %"class.SkSL::dsl::DSLStatement"* %2, i64 0, i32 0, i32 0, i32 0, i32 0
  %8 = load %"class.SkSL::Statement"*, %"class.SkSL::Statement"** %7, align 8
  %9 = icmp eq %"class.SkSL::Statement"* %8, null
  br i1 %9, label %10, label %11

10:                                               ; preds = %6
  store %"class.SkSL::Statement"* null, %"class.SkSL::Statement"** %7, align 8
  br label %38

11:                                               ; preds = %6
  %12 = tail call dereferenceable(192) %"class.SkSL::dsl::DSLWriter"* @_ZN4SkSL3dsl9DSLWriter8InstanceEv() #7
  %13 = getelementptr inbounds %"class.SkSL::dsl::DSLWriter", %"class.SkSL::dsl::DSLWriter"* %12, i64 0, i32 11, i32 0, i32 0, i32 1, i32 0, i32 0
  %14 = load i64, i64* %13, align 8
  %15 = icmp eq i64 %14, 0
  br i1 %15, label %33, label %16

16:                                               ; preds = %11
  %17 = tail call dereferenceable(192) %"class.SkSL::dsl::DSLWriter"* @_ZN4SkSL3dsl9DSLWriter8InstanceEv() #7
  %18 = getelementptr inbounds %"class.SkSL::dsl::DSLWriter", %"class.SkSL::dsl::DSLWriter"* %17, i64 0, i32 11
  %19 = bitcast %"class.std::__1::stack"* %18 to %"struct.std::__1::__list_node"**
  %20 = load %"struct.std::__1::__list_node"*, %"struct.std::__1::__list_node"** %19, align 8
  %21 = getelementptr inbounds %"struct.std::__1::__list_node", %"struct.std::__1::__list_node"* %20, i64 0, i32 1, i32 1
  %22 = load %"struct.GrGLSLFragmentProcessor::EmitArgs"*, %"struct.GrGLSLFragmentProcessor::EmitArgs"** %21, align 8
  %23 = getelementptr inbounds %"struct.GrGLSLFragmentProcessor::EmitArgs", %"struct.GrGLSLFragmentProcessor::EmitArgs"* %22, i64 0, i32 0
  %24 = load %class.GrGLSLFPFragmentBuilder*, %class.GrGLSLFPFragmentBuilder** %23, align 8
  %25 = bitcast %class.GrGLSLFPFragmentBuilder* %24 to i8**
  %26 = load i8*, i8** %25, align 8
  %27 = getelementptr i8, i8* %26, i64 -24
  %28 = bitcast i8* %27 to i64*
  %29 = load i64, i64* %28, align 8
  %30 = bitcast %class.GrGLSLFPFragmentBuilder* %24 to i8*
  %31 = getelementptr inbounds i8, i8* %30, i64 %29
  %32 = bitcast i8* %31 to %class.GrGLSLShaderBuilder*
  tail call void @_ZN19GrGLSLShaderBuilder10codeAppendENSt3__110unique_ptrIN4SkSL9StatementENS0_14default_deleteIS3_EEEE(%class.GrGLSLShaderBuilder* %32, %"class.SkSL::Statement"* nonnull %8) #7
  store %"class.SkSL::Statement"* null, %"class.SkSL::Statement"** %7, align 8
  br label %38

33:                                               ; preds = %11
  store %"class.SkSL::Statement"* null, %"class.SkSL::Statement"** %7, align 8
  %34 = bitcast %"class.SkSL::Statement"* %8 to void (%"class.SkSL::Statement"*)***
  %35 = load void (%"class.SkSL::Statement"*)**, void (%"class.SkSL::Statement"*)*** %34, align 8
  %36 = getelementptr inbounds void (%"class.SkSL::Statement"*)*, void (%"class.SkSL::Statement"*)** %35, i64 1
  %37 = load void (%"class.SkSL::Statement"*)*, void (%"class.SkSL::Statement"*)** %36, align 8
  tail call void %37(%"class.SkSL::Statement"* nonnull %8) #7
  br label %38

38:                                               ; preds = %33, %10, %16
  %39 = load %"class.SkSL::Statement"*, %"class.SkSL::Statement"** %3, align 8
  store %"class.SkSL::Statement"* null, %"class.SkSL::Statement"** %3, align 8
  %40 = icmp eq %"class.SkSL::Statement"* %39, null
  br i1 %40, label %46, label %41

41:                                               ; preds = %38
  %42 = bitcast %"class.SkSL::Statement"* %39 to void (%"class.SkSL::Statement"*)***
  %43 = load void (%"class.SkSL::Statement"*)**, void (%"class.SkSL::Statement"*)*** %42, align 8
  %44 = getelementptr inbounds void (%"class.SkSL::Statement"*)*, void (%"class.SkSL::Statement"*)** %43, i64 1
  %45 = load void (%"class.SkSL::Statement"*)*, void (%"class.SkSL::Statement"*)** %44, align 8
  tail call void %45(%"class.SkSL::Statement"* nonnull %39) #7
  br label %46

46:                                               ; preds = %1, %38, %41
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4SkSL3dslcmENS0_12DSLStatementES1_(%"class.SkSL::dsl::DSLStatement"* noalias nocapture sret, %"class.SkSL::dsl::DSLStatement"* nocapture, %"class.SkSL::dsl::DSLStatement"* nocapture) local_unnamed_addr #1 {
  %4 = alloca %class.SkSTArray, align 8
  %5 = alloca %class.SkSTArray, align 8
  %6 = getelementptr inbounds %class.SkSTArray, %class.SkSTArray* %4, i64 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %6) #7
  %7 = getelementptr inbounds %class.SkSTArray, %class.SkSTArray* %4, i64 0, i32 0, i32 0, i64 16
  %8 = getelementptr inbounds %class.SkSTArray, %class.SkSTArray* %4, i64 0, i32 0, i32 0, i64 24
  %9 = bitcast i8* %8 to i64*
  %10 = bitcast i8* %7 to i8**
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 -86, i64 16, i1 false)
  store i8* %6, i8** %10, align 8
  store i64 17179869184, i64* %9, align 8
  %11 = bitcast i8* %7 to %class.SkTArray*
  call void @_ZN8SkTArrayINSt3__110unique_ptrIN4SkSL9StatementENS0_14default_deleteIS3_EEEELb0EE12checkReallocEiNS7_11ReallocTypeE(%class.SkTArray* %11, i32 2, i32 0) #7
  %12 = load i64, i64* %9, align 8
  %13 = shl i64 %12, 32
  %14 = and i64 %13, 4294967296
  %15 = and i64 %12, -4294967297
  %16 = or i64 %14, %15
  store i64 %16, i64* %9, align 8
  %17 = getelementptr inbounds %"class.SkSL::dsl::DSLStatement", %"class.SkSL::dsl::DSLStatement"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %18 = bitcast %"class.SkSL::dsl::DSLStatement"* %1 to i64*
  %19 = load i64, i64* %18, align 8
  store %"class.SkSL::Statement"* null, %"class.SkSL::Statement"** %17, align 8
  call void @_ZN8SkTArrayINSt3__110unique_ptrIN4SkSL9StatementENS0_14default_deleteIS3_EEEELb0EE12checkReallocEiNS7_11ReallocTypeE(%class.SkTArray* %11, i32 1, i32 1) #7
  %20 = bitcast i8* %7 to %"class.std::__1::unique_ptr"**
  %21 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %20, align 8
  %22 = load i64, i64* %9, align 8
  %23 = lshr i64 %22, 1
  %24 = and i64 %23, 2147483647
  %25 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %21, i64 %24
  %26 = add i64 %22, 2
  %27 = and i64 %26, 4294967294
  %28 = and i64 %22, -4294967295
  %29 = or i64 %27, %28
  store i64 %29, i64* %9, align 8
  %30 = bitcast %"class.std::__1::unique_ptr"* %25 to i64*
  store i64 %19, i64* %30, align 8
  %31 = getelementptr inbounds %"class.SkSL::dsl::DSLStatement", %"class.SkSL::dsl::DSLStatement"* %2, i64 0, i32 0, i32 0, i32 0, i32 0
  %32 = bitcast %"class.SkSL::dsl::DSLStatement"* %2 to i64*
  %33 = load i64, i64* %32, align 8
  store %"class.SkSL::Statement"* null, %"class.SkSL::Statement"** %31, align 8
  call void @_ZN8SkTArrayINSt3__110unique_ptrIN4SkSL9StatementENS0_14default_deleteIS3_EEEELb0EE12checkReallocEiNS7_11ReallocTypeE(%class.SkTArray* %11, i32 1, i32 1) #7
  %34 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %20, align 8
  %35 = load i64, i64* %9, align 8
  %36 = lshr i64 %35, 1
  %37 = and i64 %36, 2147483647
  %38 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %34, i64 %37
  %39 = add i64 %35, 2
  %40 = and i64 %39, 4294967294
  %41 = and i64 %35, -4294967295
  %42 = or i64 %40, %41
  store i64 %42, i64* %9, align 8
  %43 = bitcast %"class.std::__1::unique_ptr"* %38 to i64*
  store i64 %33, i64* %43, align 8
  %44 = getelementptr inbounds %class.SkSTArray, %class.SkSTArray* %5, i64 0, i32 0, i32 0, i64 16
  %45 = getelementptr inbounds %class.SkSTArray, %class.SkSTArray* %5, i64 0, i32 0, i32 0, i64 0
  %46 = getelementptr inbounds %class.SkSTArray, %class.SkSTArray* %5, i64 0, i32 0, i32 0, i64 24
  %47 = bitcast i8* %46 to i64*
  %48 = bitcast i8* %44 to i8**
  store i8* %45, i8** %48, align 8
  store i64 17179869184, i64* %47, align 8
  %49 = bitcast i8* %44 to %class.SkTArray*
  %50 = call dereferenceable(16) %class.SkTArray* @_ZN8SkTArrayINSt3__110unique_ptrIN4SkSL9StatementENS0_14default_deleteIS3_EEEELb0EEaSEOS7_(%class.SkTArray* %49, %class.SkTArray* dereferenceable(16) %11) #7
  %51 = call %"class.SkSL::Statement"* @_ZN4SkSL5Block12MakeUnscopedEi9SkSTArrayILi2ENSt3__110unique_ptrINS_9StatementENS2_14default_deleteIS4_EEEELb0EE(i32 -1, %class.SkSTArray* nonnull %5) #7
  call void @_ZN4SkSL3dsl12DSLStatementC2ENSt3__110unique_ptrINS_9StatementENS2_14default_deleteIS4_EEEE(%"class.SkSL::dsl::DSLStatement"* %0, %"class.SkSL::Statement"* %51)
  %52 = load i64, i64* %47, align 8
  %53 = and i64 %52, 4294967294
  %54 = icmp eq i64 %53, 0
  br i1 %54, label %57, label %55

55:                                               ; preds = %3
  %56 = bitcast i8* %44 to %"class.std::__1::unique_ptr"**
  br label %61

57:                                               ; preds = %72, %3
  %58 = phi i64 [ %52, %3 ], [ %74, %72 ]
  %59 = and i64 %58, 1
  %60 = icmp eq i64 %59, 0
  br i1 %60, label %80, label %78

61:                                               ; preds = %72, %55
  %62 = phi i64 [ 0, %55 ], [ %73, %72 ]
  %63 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %56, align 8
  %64 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %63, i64 %62, i32 0, i32 0, i32 0
  %65 = load %"class.SkSL::Statement"*, %"class.SkSL::Statement"** %64, align 8
  store %"class.SkSL::Statement"* null, %"class.SkSL::Statement"** %64, align 8
  %66 = icmp eq %"class.SkSL::Statement"* %65, null
  br i1 %66, label %72, label %67

67:                                               ; preds = %61
  %68 = bitcast %"class.SkSL::Statement"* %65 to void (%"class.SkSL::Statement"*)***
  %69 = load void (%"class.SkSL::Statement"*)**, void (%"class.SkSL::Statement"*)*** %68, align 8
  %70 = getelementptr inbounds void (%"class.SkSL::Statement"*)*, void (%"class.SkSL::Statement"*)** %69, i64 1
  %71 = load void (%"class.SkSL::Statement"*)*, void (%"class.SkSL::Statement"*)** %70, align 8
  call void %71(%"class.SkSL::Statement"* nonnull %65) #7
  br label %72

72:                                               ; preds = %67, %61
  %73 = add nuw nsw i64 %62, 1
  %74 = load i64, i64* %47, align 8
  %75 = lshr i64 %74, 1
  %76 = and i64 %75, 2147483647
  %77 = icmp ult i64 %73, %76
  br i1 %77, label %61, label %57

78:                                               ; preds = %57
  %79 = load i8*, i8** %48, align 8
  call void @_Z7sk_freePv(i8* %79) #7
  br label %80

80:                                               ; preds = %57, %78
  %81 = load i64, i64* %9, align 8
  %82 = and i64 %81, 4294967294
  %83 = icmp eq i64 %82, 0
  br i1 %83, label %84, label %88

84:                                               ; preds = %99, %80
  %85 = phi i64 [ %81, %80 ], [ %101, %99 ]
  %86 = and i64 %85, 1
  %87 = icmp eq i64 %86, 0
  br i1 %87, label %107, label %105

88:                                               ; preds = %80, %99
  %89 = phi i64 [ %100, %99 ], [ 0, %80 ]
  %90 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %20, align 8
  %91 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %90, i64 %89, i32 0, i32 0, i32 0
  %92 = load %"class.SkSL::Statement"*, %"class.SkSL::Statement"** %91, align 8
  store %"class.SkSL::Statement"* null, %"class.SkSL::Statement"** %91, align 8
  %93 = icmp eq %"class.SkSL::Statement"* %92, null
  br i1 %93, label %99, label %94

94:                                               ; preds = %88
  %95 = bitcast %"class.SkSL::Statement"* %92 to void (%"class.SkSL::Statement"*)***
  %96 = load void (%"class.SkSL::Statement"*)**, void (%"class.SkSL::Statement"*)*** %95, align 8
  %97 = getelementptr inbounds void (%"class.SkSL::Statement"*)*, void (%"class.SkSL::Statement"*)** %96, i64 1
  %98 = load void (%"class.SkSL::Statement"*)*, void (%"class.SkSL::Statement"*)** %97, align 8
  call void %98(%"class.SkSL::Statement"* nonnull %92) #7
  br label %99

99:                                               ; preds = %94, %88
  %100 = add nuw nsw i64 %89, 1
  %101 = load i64, i64* %9, align 8
  %102 = lshr i64 %101, 1
  %103 = and i64 %102, 2147483647
  %104 = icmp ult i64 %100, %103
  br i1 %104, label %88, label %84

105:                                              ; preds = %84
  %106 = load i8*, i8** %10, align 8
  call void @_Z7sk_freePv(i8* %106) #7
  br label %107

107:                                              ; preds = %84, %105
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %6) #7
  ret void
}

declare %"class.SkSL::Statement"* @_ZN4SkSL5Block12MakeUnscopedEi9SkSTArrayILi2ENSt3__110unique_ptrINS_9StatementENS2_14default_deleteIS4_EEEELb0EE(i32, %class.SkSTArray*) local_unnamed_addr #2

declare dereferenceable(192) %"class.SkSL::dsl::DSLWriter"* @_ZN4SkSL3dsl9DSLWriter8InstanceEv() local_unnamed_addr #2

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #5

declare void @_Z7sk_freePv(i8*) local_unnamed_addr #2

declare i8* @_ZN4SkSL4Pool11AllocMemoryEm(i64) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4SkSL19ExpressionStatementD2Ev(%"class.SkSL::ExpressionStatement"*) unnamed_addr #6 comdat align 2 {
  %2 = getelementptr inbounds %"class.SkSL::ExpressionStatement", %"class.SkSL::ExpressionStatement"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN4SkSL19ExpressionStatementE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.SkSL::ExpressionStatement", %"class.SkSL::ExpressionStatement"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %4 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %3, align 8
  store %"class.SkSL::Expression"* null, %"class.SkSL::Expression"** %3, align 8
  %5 = icmp eq %"class.SkSL::Expression"* %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %1
  %7 = bitcast %"class.SkSL::Expression"* %4 to void (%"class.SkSL::Expression"*)***
  %8 = load void (%"class.SkSL::Expression"*)**, void (%"class.SkSL::Expression"*)*** %7, align 8
  %9 = getelementptr inbounds void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %8, i64 1
  %10 = load void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %9, align 8
  tail call void %10(%"class.SkSL::Expression"* nonnull %4) #7
  br label %11

11:                                               ; preds = %1, %6
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4SkSL19ExpressionStatementD0Ev(%"class.SkSL::ExpressionStatement"*) unnamed_addr #6 comdat align 2 {
  %2 = getelementptr inbounds %"class.SkSL::ExpressionStatement", %"class.SkSL::ExpressionStatement"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN4SkSL19ExpressionStatementE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.SkSL::ExpressionStatement", %"class.SkSL::ExpressionStatement"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %4 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %3, align 8
  store %"class.SkSL::Expression"* null, %"class.SkSL::Expression"** %3, align 8
  %5 = icmp eq %"class.SkSL::Expression"* %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %1
  %7 = bitcast %"class.SkSL::Expression"* %4 to void (%"class.SkSL::Expression"*)***
  %8 = load void (%"class.SkSL::Expression"*)**, void (%"class.SkSL::Expression"*)*** %7, align 8
  %9 = getelementptr inbounds void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %8, i64 1
  %10 = load void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %9, align 8
  tail call void %10(%"class.SkSL::Expression"* nonnull %4) #7
  br label %11

11:                                               ; preds = %1, %6
  %12 = bitcast %"class.SkSL::ExpressionStatement"* %0 to i8*
  tail call void @_ZN4SkSL4Pool10FreeMemoryEPv(i8* %12) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK4SkSL19ExpressionStatement11descriptionEv(%"class.SkSL::String"* noalias sret, %"class.SkSL::ExpressionStatement"*) unnamed_addr #1 comdat align 2 {
  %3 = alloca %"class.SkSL::String", align 8
  %4 = bitcast %"class.SkSL::String"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %4) #7
  %5 = getelementptr inbounds %"class.SkSL::ExpressionStatement", %"class.SkSL::ExpressionStatement"* %1, i64 0, i32 1, i32 0, i32 0, i32 0
  %6 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %5, align 8
  %7 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %6, i64 0, i32 0
  %8 = bitcast %"class.SkSL::Expression"* %6 to void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)***
  %9 = load void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)**, void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)*** %8, align 8
  %10 = getelementptr inbounds void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)*, void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)** %9, i64 2
  %11 = load void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)*, void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)** %10, align 8
  call void %11(%"class.SkSL::String"* nonnull sret %3, %"class.SkSL::IRNode"* %7) #7
  call void @_ZNK4SkSL6StringplEPKc(%"class.SkSL::String"* sret %0, %"class.SkSL::String"* nonnull %3, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)) #7
  %12 = bitcast %"class.SkSL::String"* %3 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %13 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %12, i64 0, i32 1, i32 0
  %14 = load i8, i8* %13, align 1
  %15 = icmp slt i8 %14, 0
  br i1 %15, label %16, label %19

16:                                               ; preds = %2
  %17 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %18 = load i8*, i8** %17, align 8
  call void @_ZdlPv(i8* %18) #8
  br label %19

19:                                               ; preds = %2, %16
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %4) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK4SkSL9Statement7isEmptyEv(%"class.SkSL::Statement"*) unnamed_addr #1 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.SkSL::Statement"* @_ZNK4SkSL19ExpressionStatement5cloneEv(%"class.SkSL::ExpressionStatement"*) unnamed_addr #1 comdat align 2 {
  %2 = getelementptr inbounds %"class.SkSL::ExpressionStatement", %"class.SkSL::ExpressionStatement"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %3 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %2, align 8
  %4 = bitcast %"class.SkSL::Expression"* %3 to %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)***
  %5 = load %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)**, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)*** %4, align 8
  %6 = getelementptr inbounds %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)** %5, i64 10
  %7 = load %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)** %6, align 8
  %8 = tail call %"class.SkSL::Expression"* %7(%"class.SkSL::Expression"* %3) #7
  %9 = ptrtoint %"class.SkSL::Expression"* %8 to i64
  %10 = tail call i8* @_ZN4SkSL4Pool11AllocMemoryEm(i64 24) #7
  %11 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %8, i64 0, i32 0, i32 1
  %12 = load i32, i32* %11, align 8
  %13 = getelementptr inbounds i8, i8* %10, i64 8
  %14 = bitcast i8* %13 to i32*
  store i32 %12, i32* %14, align 8
  %15 = getelementptr inbounds i8, i8* %10, i64 12
  %16 = bitcast i8* %15 to i32*
  store i32 21, i32* %16, align 4
  %17 = bitcast i8* %10 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN4SkSL19ExpressionStatementE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %17, align 8
  %18 = getelementptr inbounds i8, i8* %10, i64 16
  %19 = bitcast i8* %18 to i64*
  store i64 %9, i64* %19, align 8
  %20 = bitcast i8* %10 to %"class.SkSL::Statement"*
  ret %"class.SkSL::Statement"* %20
}

declare void @_ZN4SkSL4Pool10FreeMemoryEPv(i8*) local_unnamed_addr #2

declare void @_ZNK4SkSL6StringplEPKc(%"class.SkSL::String"* sret, %"class.SkSL::String"*, i8*) local_unnamed_addr #2

declare i8* @_Z15sk_malloc_throwmm(i64, i64) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(16) %class.SkTArray* @_ZN8SkTArrayINSt3__110unique_ptrIN4SkSL9StatementENS0_14default_deleteIS3_EEEELb0EEaSEOS7_(%class.SkTArray*, %class.SkTArray* dereferenceable(16)) local_unnamed_addr #1 comdat align 2 {
  %3 = icmp eq %class.SkTArray* %0, %1
  br i1 %3, label %76, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds %class.SkTArray, %class.SkTArray* %0, i64 0, i32 1
  %6 = load i64, i64* %5, align 8
  %7 = and i64 %6, 4294967294
  %8 = icmp eq i64 %7, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %4
  %10 = getelementptr inbounds %class.SkTArray, %class.SkTArray* %0, i64 0, i32 0
  br label %59

11:                                               ; preds = %70, %4
  %12 = phi i64 [ %6, %4 ], [ %72, %70 ]
  %13 = and i64 %12, -4294967295
  store i64 %13, i64* %5, align 8
  %14 = getelementptr inbounds %class.SkTArray, %class.SkTArray* %1, i64 0, i32 1
  %15 = load i64, i64* %14, align 8
  %16 = lshr i64 %15, 1
  %17 = trunc i64 %16 to i32
  %18 = and i32 %17, 2147483647
  tail call void @_ZN8SkTArrayINSt3__110unique_ptrIN4SkSL9StatementENS0_14default_deleteIS3_EEEELb0EE12checkReallocEiNS7_11ReallocTypeE(%class.SkTArray* %0, i32 %18, i32 0)
  %19 = load i64, i64* %14, align 8
  %20 = and i64 %19, 4294967294
  %21 = load i64, i64* %5, align 8
  %22 = and i64 %21, -4294967295
  %23 = or i64 %22, %20
  store i64 %23, i64* %5, align 8
  %24 = bitcast %class.SkTArray* %0 to i8**
  %25 = load i8*, i8** %24, align 8
  %26 = load i64, i64* %14, align 8
  %27 = and i64 %26, 4294967294
  %28 = icmp eq i64 %27, 0
  br i1 %28, label %56, label %29

29:                                               ; preds = %11
  %30 = getelementptr inbounds %class.SkTArray, %class.SkTArray* %1, i64 0, i32 0
  br label %31

31:                                               ; preds = %50, %29
  %32 = phi i64 [ 0, %29 ], [ %51, %50 ]
  %33 = shl nuw nsw i64 %32, 3
  %34 = getelementptr inbounds i8, i8* %25, i64 %33
  %35 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %30, align 8
  %36 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %35, i64 %32
  %37 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %36, i64 0, i32 0, i32 0, i32 0
  %38 = bitcast %"class.std::__1::unique_ptr"* %36 to i64*
  %39 = load i64, i64* %38, align 8
  store %"class.SkSL::Statement"* null, %"class.SkSL::Statement"** %37, align 8
  %40 = bitcast i8* %34 to i64*
  store i64 %39, i64* %40, align 8
  %41 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %30, align 8
  %42 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %41, i64 %32, i32 0, i32 0, i32 0
  %43 = load %"class.SkSL::Statement"*, %"class.SkSL::Statement"** %42, align 8
  store %"class.SkSL::Statement"* null, %"class.SkSL::Statement"** %42, align 8
  %44 = icmp eq %"class.SkSL::Statement"* %43, null
  br i1 %44, label %50, label %45

45:                                               ; preds = %31
  %46 = bitcast %"class.SkSL::Statement"* %43 to void (%"class.SkSL::Statement"*)***
  %47 = load void (%"class.SkSL::Statement"*)**, void (%"class.SkSL::Statement"*)*** %46, align 8
  %48 = getelementptr inbounds void (%"class.SkSL::Statement"*)*, void (%"class.SkSL::Statement"*)** %47, i64 1
  %49 = load void (%"class.SkSL::Statement"*)*, void (%"class.SkSL::Statement"*)** %48, align 8
  tail call void %49(%"class.SkSL::Statement"* nonnull %43) #7
  br label %50

50:                                               ; preds = %45, %31
  %51 = add nuw nsw i64 %32, 1
  %52 = load i64, i64* %14, align 8
  %53 = lshr i64 %52, 1
  %54 = and i64 %53, 2147483647
  %55 = icmp ult i64 %51, %54
  br i1 %55, label %31, label %56

56:                                               ; preds = %50, %11
  %57 = phi i64 [ %26, %11 ], [ %52, %50 ]
  %58 = and i64 %57, -4294967295
  store i64 %58, i64* %14, align 8
  br label %76

59:                                               ; preds = %9, %70
  %60 = phi i64 [ 0, %9 ], [ %71, %70 ]
  %61 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %10, align 8
  %62 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %61, i64 %60, i32 0, i32 0, i32 0
  %63 = load %"class.SkSL::Statement"*, %"class.SkSL::Statement"** %62, align 8
  store %"class.SkSL::Statement"* null, %"class.SkSL::Statement"** %62, align 8
  %64 = icmp eq %"class.SkSL::Statement"* %63, null
  br i1 %64, label %70, label %65

65:                                               ; preds = %59
  %66 = bitcast %"class.SkSL::Statement"* %63 to void (%"class.SkSL::Statement"*)***
  %67 = load void (%"class.SkSL::Statement"*)**, void (%"class.SkSL::Statement"*)*** %66, align 8
  %68 = getelementptr inbounds void (%"class.SkSL::Statement"*)*, void (%"class.SkSL::Statement"*)** %67, i64 1
  %69 = load void (%"class.SkSL::Statement"*)*, void (%"class.SkSL::Statement"*)** %68, align 8
  tail call void %69(%"class.SkSL::Statement"* nonnull %63) #7
  br label %70

70:                                               ; preds = %59, %65
  %71 = add nuw nsw i64 %60, 1
  %72 = load i64, i64* %5, align 8
  %73 = lshr i64 %72, 1
  %74 = and i64 %73, 2147483647
  %75 = icmp ult i64 %71, %74
  br i1 %75, label %59, label %11

76:                                               ; preds = %2, %56
  ret %class.SkTArray* %0
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN8SkTArrayINSt3__110unique_ptrIN4SkSL9StatementENS0_14default_deleteIS3_EEEELb0EE12checkReallocEiNS7_11ReallocTypeE(%class.SkTArray*, i32, i32) local_unnamed_addr #1 comdat align 2 {
  %4 = getelementptr inbounds %class.SkTArray, %class.SkTArray* %0, i64 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = lshr i64 %5, 1
  %7 = trunc i64 %6 to i32
  %8 = and i32 %7, 2147483647
  %9 = add nsw i32 %8, %1
  %10 = sext i32 %9 to i64
  %11 = lshr i64 %5, 33
  %12 = icmp slt i64 %11, %10
  %13 = mul nsw i64 %10, 3
  %14 = icmp sle i64 %11, %13
  %15 = and i64 %5, 1
  %16 = icmp eq i64 %15, 0
  %17 = or i1 %16, %14
  br i1 %17, label %21, label %18

18:                                               ; preds = %3
  %19 = and i64 %5, 4294967296
  %20 = icmp eq i64 %19, 0
  br label %21

21:                                               ; preds = %3, %18
  %22 = phi i1 [ false, %3 ], [ %20, %18 ]
  %23 = or i1 %12, %22
  br i1 %23, label %24, label %87

24:                                               ; preds = %21
  %25 = icmp eq i32 %2, 0
  br i1 %25, label %32, label %26

26:                                               ; preds = %24
  %27 = add nsw i64 %10, 1
  %28 = ashr i64 %27, 1
  %29 = add nsw i64 %10, 7
  %30 = add nsw i64 %29, %28
  %31 = and i64 %30, -8
  br label %32

32:                                               ; preds = %24, %26
  %33 = phi i64 [ %31, %26 ], [ %10, %24 ]
  %34 = icmp eq i64 %33, %11
  br i1 %34, label %87, label %35

35:                                               ; preds = %32
  %36 = icmp slt i64 %33, 2147483647
  %37 = select i1 %36, i64 %33, i64 2147483647
  %38 = icmp sgt i64 %37, -2147483647
  %39 = select i1 %38, i64 %37, i64 -2147483647
  %40 = shl i64 %39, 33
  %41 = and i64 %5, 8589934591
  %42 = or i64 %40, %41
  store i64 %42, i64* %4, align 8
  %43 = and i64 %39, 2147483647
  %44 = tail call i8* @_Z15sk_malloc_throwmm(i64 %43, i64 8) #7
  %45 = load i64, i64* %4, align 8
  %46 = and i64 %45, 4294967294
  %47 = icmp eq i64 %46, 0
  br i1 %47, label %75, label %48

48:                                               ; preds = %35
  %49 = getelementptr inbounds %class.SkTArray, %class.SkTArray* %0, i64 0, i32 0
  br label %50

50:                                               ; preds = %69, %48
  %51 = phi i64 [ 0, %48 ], [ %70, %69 ]
  %52 = shl nuw nsw i64 %51, 3
  %53 = getelementptr inbounds i8, i8* %44, i64 %52
  %54 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %49, align 8
  %55 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %54, i64 %51
  %56 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %55, i64 0, i32 0, i32 0, i32 0
  %57 = bitcast %"class.std::__1::unique_ptr"* %55 to i64*
  %58 = load i64, i64* %57, align 8
  store %"class.SkSL::Statement"* null, %"class.SkSL::Statement"** %56, align 8
  %59 = bitcast i8* %53 to i64*
  store i64 %58, i64* %59, align 8
  %60 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %49, align 8
  %61 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %60, i64 %51, i32 0, i32 0, i32 0
  %62 = load %"class.SkSL::Statement"*, %"class.SkSL::Statement"** %61, align 8
  store %"class.SkSL::Statement"* null, %"class.SkSL::Statement"** %61, align 8
  %63 = icmp eq %"class.SkSL::Statement"* %62, null
  br i1 %63, label %69, label %64

64:                                               ; preds = %50
  %65 = bitcast %"class.SkSL::Statement"* %62 to void (%"class.SkSL::Statement"*)***
  %66 = load void (%"class.SkSL::Statement"*)**, void (%"class.SkSL::Statement"*)*** %65, align 8
  %67 = getelementptr inbounds void (%"class.SkSL::Statement"*)*, void (%"class.SkSL::Statement"*)** %66, i64 1
  %68 = load void (%"class.SkSL::Statement"*)*, void (%"class.SkSL::Statement"*)** %67, align 8
  tail call void %68(%"class.SkSL::Statement"* nonnull %62) #7
  br label %69

69:                                               ; preds = %64, %50
  %70 = add nuw nsw i64 %51, 1
  %71 = load i64, i64* %4, align 8
  %72 = lshr i64 %71, 1
  %73 = and i64 %72, 2147483647
  %74 = icmp ult i64 %70, %73
  br i1 %74, label %50, label %75

75:                                               ; preds = %69, %35
  %76 = phi i64 [ %45, %35 ], [ %71, %69 ]
  %77 = and i64 %76, 1
  %78 = icmp eq i64 %77, 0
  %79 = bitcast %class.SkTArray* %0 to i8**
  br i1 %78, label %83, label %80

80:                                               ; preds = %75
  %81 = load i8*, i8** %79, align 8
  tail call void @_Z7sk_freePv(i8* %81) #7
  %82 = load i64, i64* %4, align 8
  br label %83

83:                                               ; preds = %75, %80
  %84 = phi i64 [ %82, %80 ], [ %76, %75 ]
  store i8* %44, i8** %79, align 8
  %85 = and i64 %84, -4294967298
  %86 = or i64 %85, 1
  store i64 %86, i64* %4, align 8
  br label %87

87:                                               ; preds = %83, %32, %21
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }
attributes #8 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
