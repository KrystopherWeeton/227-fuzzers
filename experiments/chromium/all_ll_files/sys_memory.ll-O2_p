; ModuleID = '../../native_client/src/trusted/service_runtime/sys_memory.c'
source_filename = "../../native_client/src/trusted/service_runtime/sys_memory.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.NaClDescEffector = type { %struct.NaClDescEffectorVtbl* }
%struct.NaClDescEffectorVtbl = type { void (%struct.NaClDescEffector*, i64, i64)* }
%struct.NaClAppThread = type { %struct.NaClThreadContext, %struct.NaClMutex, %struct.NaClApp*, i32, i32, %struct.NaClThread, %struct.NaClMutex, i32, %struct.NaClAppThreadSuspendedRegisters*, i32, i64, i8*, i32, i32, i32, %struct.NaClListNode, i32, %struct.NaClCondVar }
%struct.NaClThreadContext = type { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i32, i32, i32, i16, i16, i64, i32, i32 }
%struct.NaClApp = type { i8, i64, i32, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i32, i32, %struct.NaClMutex, %struct.NaClCondVar, [151 x %struct.NaClSyscallTableEntry], %struct.NaClResourceNaClApp, i32, i32, %struct.NaClVmmap, %struct.NaClIntervalMultiset*, %struct.NaClDescEffector*, i32, i32, %struct.NaClDesc*, %struct.NaClMutex, i8*, %struct.NaClDynamicRegion*, i32, i32, i32, i32, i64, i32, i32, i32, %struct.NaClCPUFeaturesAbstract*, %struct.NaClValidationCache*, i32, i32, i32, i32, i32, i64, %struct.NaClMutex, %struct.DynArray, i32, %struct.NaClFastMutex, %struct.DynArray, %struct.NaClDebugCallbacks*, %struct.NaClDesc*, %struct.NaClDesc*, %struct.NaClMutex, i32, i32, i32, i32, i32, i32, i32, %struct.NaClValidatorInterface* }
%struct.NaClSyscallTableEntry = type { i32 (%struct.NaClAppThread*)* }
%struct.NaClResourceNaClApp = type { %struct.NaClResource, %struct.NaClApp* }
%struct.NaClResource = type { %struct.NaClResourceSchemes*, i64 }
%struct.NaClResourceSchemes = type { i8*, i32, %struct.NaClDesc* (%struct.NaClResource*, i8*, i32, i32, i32)* }
%struct.NaClVmmap = type { %struct.NaClVmmapEntry**, i64, i64, i32 }
%struct.NaClVmmapEntry = type { i64, i64, i32, i32, i32, %struct.NaClDesc*, i64, i64 }
%struct.NaClIntervalMultiset = type { %struct.NaClIntervalMultisetVtbl* }
%struct.NaClIntervalMultisetVtbl = type { void (%struct.NaClIntervalMultiset*)*, void (%struct.NaClIntervalMultiset*, i32, i32)*, void (%struct.NaClIntervalMultiset*, i32, i32)*, i32 (%struct.NaClIntervalMultiset*, i32, i32)* }
%struct.NaClDynamicRegion = type { i64, i64, i32, i32 }
%struct.NaClCPUFeaturesAbstract = type opaque
%struct.NaClValidationCache = type opaque
%struct.NaClFastMutex = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%struct.DynArray = type { i64, i8**, i64, i32*, i64 }
%struct.NaClDebugCallbacks = type { void (%struct.NaClAppThread*)*, void (%struct.NaClAppThread*)*, void ()* }
%struct.NaClDesc = type { %struct.NaClRefCount, i32, i32, i32, i8* }
%struct.NaClRefCount = type { %struct.NaClRefCountVtbl*, %struct.NaClFastMutex, i64 }
%struct.NaClRefCountVtbl = type { void (%struct.NaClRefCount*)* }
%struct.NaClValidatorInterface = type { i32, i32, i32, i32 (i64, i8*, i64, i32, i32, i32, %struct.NaClCPUFeaturesAbstract*, %struct.NaClValidationMetadata*, %struct.NaClValidationCache*)*, i32 (i64, i8*, i8*, i64, %struct.NaClCPUFeaturesAbstract*, i32 (i8*, i8*, i8)*)*, i32 (i64, i8*, i8*, i64, %struct.NaClCPUFeaturesAbstract*)*, i64, void (%struct.NaClCPUFeaturesAbstract*)*, void (%struct.NaClCPUFeaturesAbstract*)*, i32 (i64, i64, i8*, i64, %struct.NaClCPUFeaturesAbstract*)* }
%struct.NaClValidationMetadata = type { i32, i64, i8*, i64, i64, i64, i64, i64, i64 }
%struct.NaClThread = type { i64 }
%struct.NaClMutex = type { %union.pthread_mutex_t, i32 }
%struct.NaClAppThreadSuspendedRegisters = type opaque
%struct.NaClListNode = type { %struct.NaClListNode*, %struct.NaClListNode* }
%struct.NaClCondVar = type { %union.pthread_cond_t }
%union.pthread_cond_t = type { %struct.__pthread_cond_s }
%struct.__pthread_cond_s = type { %union.anon, %union.anon.0, [2 x i32], [2 x i32], i32, i32, [2 x i32] }
%union.anon = type { i64 }
%union.anon.0 = type { i64 }
%struct.NaClVmmapIter = type { %struct.NaClVmmap*, i64 }
%struct.nacl_abi_stat = type { i64, i64, i32, i32, i32, i32, i64, i64, i32, i32, i64, i64, i64, i64, i64, i64 }
%struct.NaClDescVtbl = type { %struct.NaClRefCountVtbl, i64 (%struct.NaClDesc*, %struct.NaClDescEffector*, i8*, i64, i32, i32, i64)*, i64 (%struct.NaClDesc*, i8*, i64)*, i64 (%struct.NaClDesc*, i8*, i64)*, i64 (%struct.NaClDesc*, i64, i32)*, i64 (%struct.NaClDesc*, i8*, i64, i64)*, i64 (%struct.NaClDesc*, i8*, i64, i64)*, i32 (%struct.NaClDesc*, %struct.nacl_abi_stat*)*, i32 (%struct.NaClDesc*)*, i32 (%struct.NaClDesc*, i32)*, i32 (%struct.NaClDesc*)*, i32 (%struct.NaClDesc*)*, i32 (%struct.NaClDesc*, i64)*, i64 (%struct.NaClDesc*, i8*, i64)*, i32 (%struct.NaClDesc*, i64*, i64*)*, i32 (%struct.NaClDesc*, %struct.NaClDescXferState*)*, i32 (%struct.NaClDesc*)*, i32 (%struct.NaClDesc*)*, i32 (%struct.NaClDesc*)*, i32 (%struct.NaClDesc*, %struct.NaClDesc*)*, i32 (%struct.NaClDesc*, %struct.NaClDesc*, %struct.nacl_abi_timespec*)*, i32 (%struct.NaClDesc*)*, i32 (%struct.NaClDesc*)*, i64 (%struct.NaClDesc*, %struct.NaClImcTypedMsgHdr*, i32)*, i64 (%struct.NaClDesc*, %struct.NaClImcTypedMsgHdr*, i32)*, i64 (%struct.NaClDesc*, %struct.NaClMessageHeader*, i32)*, i64 (%struct.NaClDesc*, %struct.NaClMessageHeader*, i32)*, i32 (%struct.NaClDesc*, %struct.NaClDesc**)*, i32 (%struct.NaClDesc*, %struct.NaClDesc**)*, i32 (%struct.NaClDesc*)*, i32 (%struct.NaClDesc*)*, i32 (%struct.NaClDesc*)*, i32 (%struct.NaClDesc*, i32, i32, i8*)*, i32 (%struct.NaClDesc*, i32*, i8*)*, void (%struct.NaClDesc*, i32)*, i32 (%struct.NaClDesc*)*, i32 (%struct.NaClDesc*)*, i32 }
%struct.NaClDescXferState = type { i8*, i8*, i32*, i32* }
%struct.nacl_abi_timespec = type { i64, i32 }
%struct.NaClImcTypedMsgHdr = type opaque
%struct.NaClMessageHeader = type { %struct.NaClIOVec*, i32, i32*, i32, i32 }
%struct.NaClIOVec = type { i8*, i64 }

@.str = private unnamed_addr constant [39 x i8] c"Entered NaClSysBrk(new_break 0x%08lx)\0A\00", align 1
@.str.1 = private unnamed_addr constant [23 x i8] c"sys_new_break 0x%08lx\0A\00", align 1
@.str.2 = private unnamed_addr constant [36 x i8] c"Could not get app lock for 0x%08lx\0A\00", align 1
@.str.3 = private unnamed_addr constant [35 x i8] c"new_break before data_end (0x%lx)\0A\00", align 1
@.str.4 = private unnamed_addr constant [41 x i8] c"new_break before break (0x%lx); freeing\0A\00", align 1
@.str.5 = private unnamed_addr constant [58 x i8] c"current break sys addr 0x%08lx, usr last data page 0x%lx\0A\00", align 1
@.str.6 = private unnamed_addr constant [36 x i8] c"new break usr last data page 0x%lx\0A\00", align 1
@.str.7 = private unnamed_addr constant [33 x i8] c"last internal data addr 0x%08lx\0A\00", align 1
@.str.8 = private unnamed_addr constant [57 x i8] c"current break (0x%08lx, sys 0x%08lx) not in address map\0A\00", align 1
@.str.9 = private unnamed_addr constant [66 x i8] c"segment containing current break: page_num 0x%08lx, npages 0x%lx\0A\00", align 1
@.str.10 = private unnamed_addr constant [51 x i8] c"new break within break segment, just bumping addr\0A\00", align 1
@.str.11 = private unnamed_addr constant [111 x i8] c"new break request of usr address 0x%08lx / usr page 0x%lx runs into next region, page_num 0x%lx, npages 0x%lx\0A\00", align 1
@.str.12 = private unnamed_addr constant [51 x i8] c"extending segment: page_num 0x%08lx, npages 0x%lx\0A\00", align 1
@.str.13 = private unnamed_addr constant [60 x i8] c"Could not mprotect(0x%08lx, 0x%08lx, PROT_READ|PROT_WRITE)\0A\00", align 1
@.str.14 = private unnamed_addr constant [45 x i8] c"segment now: page_num 0x%08lx, npages 0x%lx\0A\00", align 1
@.str.15 = private unnamed_addr constant [40 x i8] c"Fatal error in file %s, line %d: !(%s)\0A\00", align 1
@.str.16 = private unnamed_addr constant [61 x i8] c"../../native_client/src/trusted/service_runtime/sys_memory.c\00", align 1
@.str.17 = private unnamed_addr constant [26 x i8] c"sys_new_break > sys_break\00", align 1
@.str.18 = private unnamed_addr constant [30 x i8] c"NaClSysBrk: returning 0x%08x\0A\00", align 1
@.str.19 = private unnamed_addr constant [50 x i8] c"invalid mmap flags 0%o, ignoring extraneous bits\0A\00", align 1
@.str.20 = private unnamed_addr constant [60 x i8] c"NaClSysMmap: PROT_EXEC when dyncode syscalls are disabled.\0A\00", align 1
@.str.21 = private unnamed_addr constant [62 x i8] c"NaClSysMmap: asked for writable and executable code pages?!?\0A\00", align 1
@.str.22 = private unnamed_addr constant [57 x i8] c"NaClSysMmap: address not allocation granularity aligned\0A\00", align 1
@.str.23 = private unnamed_addr constant [57 x i8] c"NaClSysMmap: Force alignment of misaligned hint address\0A\00", align 1
@.str.24 = private unnamed_addr constant [40 x i8] c"NaClSysMmap: negative file offset: %ld\0A\00", align 1
@.str.25 = private unnamed_addr constant [66 x i8] c"NaClSysMmap: file offset 0x%08lx not multiple of allocation size\0A\00", align 1
@.str.26 = private unnamed_addr constant [55 x i8] c"NaClSysMmap: length not a multiple of allocation size\0A\00", align 1
@.str.27 = private unnamed_addr constant [38 x i8] c"NaClSysMmap: rounded length to 0x%lx\0A\00", align 1
@.str.28 = private unnamed_addr constant [56 x i8] c"alloc_rounded_length == (uint32_t) alloc_rounded_length\00", align 1
@.str.30 = private unnamed_addr constant [76 x i8] c"NaClSysMmap: disallowing partial allocation page extension for short files\0A\00", align 1
@.str.31 = private unnamed_addr constant [41 x i8] c"NaClSysMmap: FindMapSpace: page 0x%05lx\0A\00", align 1
@.str.32 = private unnamed_addr constant [41 x i8] c"NaClSysMmap: new starting addr: 0x%08lx\0A\00", align 1
@.str.33 = private unnamed_addr constant [47 x i8] c"NaClSysMmap: FindSpaceAboveHint: page 0x%05lx\0A\00", align 1
@.str.34 = private unnamed_addr constant [52 x i8] c"NaClSysMmap: hint failed, doing generic allocation\0A\00", align 1
@.str.35 = private unnamed_addr constant [60 x i8] c"NaClSysMmap: start address (0x%08lx) outside address space\0A\00", align 1
@.str.36 = private unnamed_addr constant [81 x i8] c"NaClSysMmap: integer overflow -- NaClSysMmap(0x%08lx,0x%lx,0x%x,0x%x,%d,0x%08lx\0A\00", align 1
@.str.37 = private unnamed_addr constant [75 x i8] c"NaClSysMmap: end address (0x%08lx) is beyond the end of the address space\0A\00", align 1
@.str.38 = private unnamed_addr constant [63 x i8] c"NaClSysMmap: PROT_EXEC requested, usraddr 0x%08lx, length %lx\0A\00", align 1
@.str.39 = private unnamed_addr constant [36 x i8] c"MMAP_BYPASS_DESCRIPTOR_SAFETY_CHECK\00", align 1
@.str.40 = private unnamed_addr constant [40 x i8] c"MMAP_FORCE_DESCRIPTOR_SAFETY_CHECK_FAIL\00", align 1
@.str.41 = private unnamed_addr constant [37 x i8] c"NaClSysMmap: descriptor not blessed\0A\00", align 1
@.str.42 = private unnamed_addr constant [22 x i8] c"NaClSysMmap: allowed\0A\00", align 1
@.str.43 = private unnamed_addr constant [47 x i8] c"NaClSysMmap: region contains executable pages\0A\00", align 1
@.str.44 = private unnamed_addr constant [69 x i8] c"NaClSysMmap: NaClDescIoDescMap(,,0x%08lx,0x%08lx,0x%x,0x%x,0x%08lx)\0A\00", align 1
@.str.45 = private unnamed_addr constant [39 x i8] c"NaClSysMmap: checking descriptor type\0A\00", align 1
@.str.46 = private unnamed_addr constant [41 x i8] c"NaClSysMmap: not supported type, got %d\0A\00", align 1
@.str.47 = private unnamed_addr constant [32 x i8] c"MMAP_FORCE_MMAP_VALIDATION_FAIL\00", align 1
@.str.48 = private unnamed_addr constant [45 x i8] c"NaClSysMmap: prot_exec, validator_status %d\0A\00", align 1
@.str.49 = private unnamed_addr constant [59 x i8] c"NaClSysMmap: PROT_EXEC region overlaps other dynamic code\0A\00", align 1
@.str.50 = private unnamed_addr constant [45 x i8] c"NaClSysMmap: mapping into executable memory\0A\00", align 1
@.str.51 = private unnamed_addr constant [59 x i8] c"NaClSysMmap: map into executable memory failed: got 0x%lx\0A\00", align 1
@.str.52 = private unnamed_addr constant [91 x i8] c"NaClSysMmap: did not validate in readonly_text mode; attempting to use dyncode interface.\0A\00", align 1
@.str.53 = private unnamed_addr constant [23 x i8] c"MMAP_STUBOUT_EMULATION\00", align 1
@.str.54 = private unnamed_addr constant [56 x i8] c"NaClSysMmap: emulating stubout mode by touching memory\0A\00", align 1
@.str.55 = private unnamed_addr constant [63 x i8] c"NaClSysMmap: (*ndp->Map)(,,0x%08lx,0x%08lx,0x%x,0x%x,0x%08lx)\0A\00", align 1
@.str.57 = private unnamed_addr constant [46 x i8] c"system mmap did not honor NACL_ABI_MAP_FIXED\0A\00", align 1
@.str.58 = private unnamed_addr constant [50 x i8] c"Overflow in NaClSysMmap: return address is 0x%lx\0A\00", align 1
@.str.59 = private unnamed_addr constant [32 x i8] c"NaClSysMmap: returning 0x%08lx\0A\00", align 1
@.str.60 = private unnamed_addr constant [55 x i8] c"Entered NaClSysMmap(0x%08x,0x%lx,0x%x,0x%x,%d,0x%08x)\0A\00", align 1
@.str.61 = private unnamed_addr constant [19 x i8] c" offset = 0x%08lx\0A\00", align 1
@.str.62 = private unnamed_addr constant [46 x i8] c"Entered NaClSysMunmap(0x%08lx, 0x%08x, 0x%x)\0A\00", align 1
@.str.63 = private unnamed_addr constant [36 x i8] c"start addr not allocation multiple\0A\00", align 1
@.str.64 = private unnamed_addr constant [32 x i8] c"munmap: rounded length to 0x%x\0A\00", align 1
@.str.65 = private unnamed_addr constant [35 x i8] c"munmap: region not user addresses\0A\00", align 1
@.str.66 = private unnamed_addr constant [49 x i8] c"NaClSysMunmap: region contains executable pages\0A\00", align 1
@.str.67 = private unnamed_addr constant [46 x i8] c"mprotect: start addr not allocation multiple\0A\00", align 1
@.str.68 = private unnamed_addr constant [37 x i8] c"mprotect: region not user addresses\0A\00", align 1
@.str.69 = private unnamed_addr constant [54 x i8] c"mprotect: prot has other bits than PROT_{READ|WRITE}\0A\00", align 1
@.str.70 = private unnamed_addr constant [44 x i8] c"mprotect: region contains executable pages\0A\00", align 1
@.str.71 = private unnamed_addr constant [26 x i8] c"mprotect: no such region\0A\00", align 1
@.str.72 = private unnamed_addr constant [56 x i8] c"Entered NaClSysMprotect(0x%08lx, 0x%08lx, 0x%lx, 0x%x)\0A\00", align 1
@.str.73 = private unnamed_addr constant [50 x i8] c"NaClUserToSys: uaddr 0x%08lx, addr space %d bits\0A\00", align 1
@NaClDescEffectorTrustedMemStruct = external constant %struct.NaClDescEffector, align 8
@.str.74 = private unnamed_addr constant [71 x i8] c"NaClSysToUser: sysaddr 0x%08lx, mem_start 0x%08lx, addr space %d bits\0A\00", align 1
@.str.75 = private unnamed_addr constant [32 x i8] c"MunmapInternal(0x%08lx, 0x%lx)\0A\00", align 1
@.str.76 = private unnamed_addr constant [52 x i8] c"mmap to put in anonymous memory failed, errno = %d\0A\00", align 1
@.str.77 = private unnamed_addr constant [47 x i8] c"usraddr == (entry->page_num << NACL_PAGESHIFT)\00", align 1
@.str.78 = private unnamed_addr constant [46 x i8] c"MprotectInternal: addr 0x%08lx, desc 0x%08lx\0A\00", align 1
@.str.79 = private unnamed_addr constant [67 x i8] c"MprotectInternal: mprotect on anonymous memory failed, errno = %d\0A\00", align 1
@.str.80 = private unnamed_addr constant [69 x i8] c"MprotectInternal: mprotect on file-backed memory failed, errno = %d\0A\00", align 1
@.str.81 = private unnamed_addr constant [51 x i8] c"(entry->page_num + entry->npages) == last_page_num\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @NaClSysBrk(%struct.NaClAppThread* nocapture readonly, i64) local_unnamed_addr #0 {
  %3 = alloca %struct.NaClVmmapIter, align 8
  %4 = getelementptr inbounds %struct.NaClAppThread, %struct.NaClAppThread* %0, i64 0, i32 2
  %5 = load %struct.NaClApp*, %struct.NaClApp** %4, align 8
  %6 = bitcast %struct.NaClVmmapIter* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6) #6
  %7 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %5, i64 0, i32 46
  %8 = bitcast %struct.NaClVmmapIter* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %8, i8 -86, i64 16, i1 false)
  %9 = load i32, i32* %7, align 8
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %133

11:                                               ; preds = %2
  %12 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %5, i64 0, i32 47
  %13 = load i64, i64* %12, align 8
  tail call void (i32, i8*, ...) @NaClLog(i32 3, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str, i64 0, i64 0), i64 %1) #6
  %14 = icmp eq i64 %1, 0
  br i1 %14, label %21, label %15

15:                                               ; preds = %11
  %16 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %5, i64 0, i32 0
  %17 = load i8, i8* %16, align 8
  %18 = zext i8 %17 to i64
  %19 = lshr i64 %1, %18
  %20 = icmp eq i64 %19, 0
  br i1 %20, label %22, label %21

21:                                               ; preds = %15, %11
  tail call void (i32, i8*, ...) @NaClLog(i32 3, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i64 -1) #6
  br label %130

22:                                               ; preds = %15
  %23 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %5, i64 0, i32 3
  %24 = load i64, i64* %23, align 8
  %25 = add i64 %24, %1
  tail call void (i32, i8*, ...) @NaClLog(i32 3, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i64 %25) #6
  %26 = icmp eq i64 %25, -1
  br i1 %26, label %130, label %27

27:                                               ; preds = %22
  %28 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %5, i64 0, i32 17
  %29 = tail call i32 @NaClMutexLock(%struct.NaClMutex* %28) #6
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %33, label %31

31:                                               ; preds = %27
  %32 = ptrtoint %struct.NaClApp* %5 to i64
  tail call void (i32, i8*, ...) @NaClLog(i32 -3, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.2, i64 0, i64 0), i64 %32) #6
  br label %130

33:                                               ; preds = %27
  %34 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %5, i64 0, i32 12
  %35 = load i64, i64* %34, align 8
  %36 = icmp ugt i64 %35, %1
  br i1 %36, label %37, label %38

37:                                               ; preds = %33
  tail call void (i32, i8*, ...) @NaClLog(i32 4, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.3, i64 0, i64 0), i64 %35) #6
  br label %128

38:                                               ; preds = %33
  %39 = load i64, i64* %12, align 8
  %40 = icmp ult i64 %39, %1
  br i1 %40, label %42, label %41

41:                                               ; preds = %38
  tail call void (i32, i8*, ...) @NaClLog(i32 4, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.4, i64 0, i64 0), i64 %39) #6
  store i64 %1, i64* %12, align 8
  br label %128

42:                                               ; preds = %38
  %43 = icmp eq i64 %39, 0
  %44 = load i8, i8* %16, align 8
  br i1 %43, label %49, label %45

45:                                               ; preds = %42
  %46 = zext i8 %44 to i64
  %47 = lshr i64 %39, %46
  %48 = icmp eq i64 %47, 0
  br i1 %48, label %52, label %49

49:                                               ; preds = %45, %42
  %50 = zext i8 %44 to i32
  tail call void (i32, i8*, ...) @NaClLog(i32 -4, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.73, i64 0, i64 0), i64 %39, i32 %50) #6
  %51 = load i64, i64* %12, align 8
  br label %52

52:                                               ; preds = %45, %49
  %53 = phi i64 [ %39, %45 ], [ %51, %49 ]
  %54 = load i64, i64* %23, align 8
  %55 = add i64 %54, %39
  %56 = add i64 %53, -1
  %57 = lshr i64 %56, 12
  %58 = add i64 %1, -1
  %59 = lshr i64 %58, 12
  %60 = add i64 %1, 65535
  %61 = and i64 %60, -65536
  %62 = add i64 %61, -1
  %63 = lshr i64 %62, 12
  tail call void (i32, i8*, ...) @NaClLog(i32 4, i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.5, i64 0, i64 0), i64 %55, i64 %57) #6
  tail call void (i32, i8*, ...) @NaClLog(i32 4, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.6, i64 0, i64 0), i64 %59) #6
  tail call void (i32, i8*, ...) @NaClLog(i32 4, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.7, i64 0, i64 0), i64 %62) #6
  %64 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %5, i64 0, i32 23
  %65 = call %struct.NaClVmmapIter* @NaClVmmapFindPageIter(%struct.NaClVmmap* %64, i64 %57, %struct.NaClVmmapIter* nonnull %3) #6
  %66 = icmp eq %struct.NaClVmmapIter* %65, null
  br i1 %66, label %70, label %67

67:                                               ; preds = %52
  %68 = call i32 @NaClVmmapIterAtEnd(%struct.NaClVmmapIter* nonnull %3) #6
  %69 = icmp eq i32 %68, 0
  br i1 %69, label %72, label %70

70:                                               ; preds = %67, %52
  %71 = load i64, i64* %12, align 8
  call void (i32, i8*, ...) @NaClLog(i32 -4, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.8, i64 0, i64 0), i64 %71, i64 %55) #6
  br label %72

72:                                               ; preds = %67, %70
  %73 = call %struct.NaClVmmapEntry* @NaClVmmapIterStar(%struct.NaClVmmapIter* nonnull %3) #6
  %74 = getelementptr inbounds %struct.NaClVmmapEntry, %struct.NaClVmmapEntry* %73, i64 0, i32 0
  %75 = load i64, i64* %74, align 8
  %76 = getelementptr inbounds %struct.NaClVmmapEntry, %struct.NaClVmmapEntry* %73, i64 0, i32 1
  %77 = load i64, i64* %76, align 8
  call void (i32, i8*, ...) @NaClLog(i32 4, i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.9, i64 0, i64 0), i64 %75, i64 %77) #6
  %78 = load i64, i64* %74, align 8
  %79 = load i64, i64* %76, align 8
  %80 = add i64 %79, %78
  %81 = icmp ult i64 %59, %80
  br i1 %81, label %82, label %83

82:                                               ; preds = %72
  call void (i32, i8*, ...) @NaClLog(i32 4, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.10, i64 0, i64 0)) #6
  br label %122

83:                                               ; preds = %72
  call void @NaClVmmapIterIncr(%struct.NaClVmmapIter* nonnull %3) #6
  %84 = call i32 @NaClVmmapIterAtEnd(%struct.NaClVmmapIter* nonnull %3) #6
  %85 = icmp eq i32 %84, 0
  br i1 %85, label %86, label %94

86:                                               ; preds = %83
  %87 = call %struct.NaClVmmapEntry* @NaClVmmapIterStar(%struct.NaClVmmapIter* nonnull %3) #6
  %88 = getelementptr inbounds %struct.NaClVmmapEntry, %struct.NaClVmmapEntry* %87, i64 0, i32 0
  %89 = load i64, i64* %88, align 8
  %90 = icmp ugt i64 %89, %63
  br i1 %90, label %94, label %91

91:                                               ; preds = %86
  %92 = getelementptr inbounds %struct.NaClVmmapEntry, %struct.NaClVmmapEntry* %87, i64 0, i32 1
  %93 = load i64, i64* %92, align 8
  call void (i32, i8*, ...) @NaClLog(i32 4, i8* getelementptr inbounds ([111 x i8], [111 x i8]* @.str.11, i64 0, i64 0), i64 %1, i64 %59, i64 %89, i64 %93) #6
  br label %128

94:                                               ; preds = %86, %83
  %95 = load i64, i64* %74, align 8
  %96 = load i64, i64* %76, align 8
  call void (i32, i8*, ...) @NaClLog(i32 4, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.12, i64 0, i64 0), i64 %95, i64 %96) #6
  %97 = load i64, i64* %74, align 8
  %98 = load i64, i64* %76, align 8
  %99 = add i64 %98, %97
  %100 = shl i64 %99, 12
  %101 = add nuw nsw i64 %63, 1
  %102 = sub i64 %101, %97
  store i64 %102, i64* %76, align 8
  %103 = sub i64 %61, %100
  %104 = icmp eq i64 %100, 0
  %105 = load i8, i8* %16, align 8
  br i1 %104, label %110, label %106

106:                                              ; preds = %94
  %107 = zext i8 %105 to i64
  %108 = lshr i64 %100, %107
  %109 = icmp eq i64 %108, 0
  br i1 %109, label %112, label %110

110:                                              ; preds = %106, %94
  %111 = zext i8 %105 to i32
  call void (i32, i8*, ...) @NaClLog(i32 -4, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.73, i64 0, i64 0), i64 %100, i32 %111) #6
  br label %112

112:                                              ; preds = %106, %110
  %113 = load i64, i64* %23, align 8
  %114 = add i64 %113, %100
  %115 = inttoptr i64 %114 to i8*
  %116 = call i32 @NaClMprotect(i8* %115, i64 %103, i32 3) #6
  %117 = icmp eq i32 %116, 0
  br i1 %117, label %119, label %118

118:                                              ; preds = %112
  call void (i32, i8*, ...) @NaClLog(i32 -4, i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.13, i64 0, i64 0), i64 %100, i64 %103) #6
  br label %119

119:                                              ; preds = %112, %118
  %120 = load i64, i64* %74, align 8
  %121 = load i64, i64* %76, align 8
  call void (i32, i8*, ...) @NaClLog(i32 4, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.14, i64 0, i64 0), i64 %120, i64 %121) #6
  br label %122

122:                                              ; preds = %82, %119
  store i64 %1, i64* %12, align 8
  %123 = icmp ugt i64 %25, %55
  br i1 %123, label %125, label %124

124:                                              ; preds = %122
  call void (i32, i8*, ...) @NaClLog(i32 -4, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.15, i64 0, i64 0), i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.16, i64 0, i64 0), i32 185, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.17, i64 0, i64 0)) #6
  br label %125

125:                                              ; preds = %124, %122
  %126 = inttoptr i64 %55 to i8*
  %127 = sub i64 %25, %55
  call void @llvm.memset.p0i8.i64(i8* align 1 %126, i8 0, i64 %127, i1 false)
  br label %128

128:                                              ; preds = %41, %125, %91, %37
  %129 = phi i64 [ %13, %37 ], [ %1, %41 ], [ %1, %125 ], [ %13, %91 ]
  call void @NaClXMutexUnlock(%struct.NaClMutex* %28) #6
  br label %130

130:                                              ; preds = %21, %22, %128, %31
  %131 = phi i64 [ %13, %22 ], [ %13, %31 ], [ %129, %128 ], [ %13, %21 ]
  %132 = trunc i64 %131 to i32
  call void (i32, i8*, ...) @NaClLog(i32 3, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.18, i64 0, i64 0), i32 %132) #6
  br label %133

133:                                              ; preds = %2, %130
  %134 = phi i32 [ %132, %130 ], [ -38, %2 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #6
  ret i32 %134
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare void @NaClLog(i32, i8*, ...) local_unnamed_addr #2

declare i32 @NaClMutexLock(%struct.NaClMutex*) local_unnamed_addr #2

declare %struct.NaClVmmapIter* @NaClVmmapFindPageIter(%struct.NaClVmmap*, i64, %struct.NaClVmmapIter*) local_unnamed_addr #2

declare i32 @NaClVmmapIterAtEnd(%struct.NaClVmmapIter*) local_unnamed_addr #2

declare %struct.NaClVmmapEntry* @NaClVmmapIterStar(%struct.NaClVmmapIter*) local_unnamed_addr #2

declare void @NaClVmmapIterIncr(%struct.NaClVmmapIter*) local_unnamed_addr #2

declare i32 @NaClMprotect(i8*, i64, i32) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @NaClXMutexUnlock(%struct.NaClMutex*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @NaClSysCommonAddrRangeContainsExecutablePages(%struct.NaClApp* nocapture readonly, i64, i64) local_unnamed_addr #3 {
  %4 = and i64 %1, -65536
  %5 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %0, i64 0, i32 9
  %6 = load i64, i64* %5, align 8
  %7 = icmp ult i64 %4, %6
  %8 = zext i1 %7 to i32
  ret i32 %8
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @NaClSysCommonAddrRangeInAllowedDynamicCodeSpace(%struct.NaClApp* nocapture readonly, i64, i64) local_unnamed_addr #3 {
  %4 = add i64 %2, %1
  %5 = icmp ult i64 %4, %1
  br i1 %5, label %19, label %6

6:                                                ; preds = %3
  %7 = add i64 %4, 65535
  %8 = and i64 %7, -65536
  %9 = icmp ult i64 %8, %1
  br i1 %9, label %19, label %10

10:                                               ; preds = %6
  %11 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %0, i64 0, i32 8
  %12 = load i64, i64* %11, align 8
  %13 = icmp ugt i64 %12, %1
  br i1 %13, label %19, label %14

14:                                               ; preds = %10
  %15 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %0, i64 0, i32 9
  %16 = load i64, i64* %15, align 8
  %17 = icmp ule i64 %8, %16
  %18 = zext i1 %17 to i32
  br label %19

19:                                               ; preds = %14, %10, %6, %3
  %20 = phi i32 [ 0, %3 ], [ 0, %6 ], [ 0, %10 ], [ %18, %14 ]
  ret i32 %20
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @NaClSysMmapIntern(%struct.NaClApp*, i8*, i64, i32, i32, i32, i64) local_unnamed_addr #0 {
  %8 = alloca %struct.nacl_abi_stat, align 8
  %9 = alloca %struct.NaClValidationMetadata, align 8
  %10 = bitcast %struct.nacl_abi_stat* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 104, i8* nonnull %10) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %10, i8 -86, i64 104, i1 false)
  %11 = ptrtoint i8* %1 to i64
  %12 = and i32 %4, -52
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %16, label %14

14:                                               ; preds = %7
  tail call void (i32, i8*, ...) @NaClLog(i32 2, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.19, i64 0, i64 0), i32 %4) #6
  %15 = and i32 %4, 51
  br label %16

16:                                               ; preds = %7, %14
  %17 = phi i32 [ %15, %14 ], [ %4, %7 ]
  %18 = and i32 %17, 32
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %20, label %23

20:                                               ; preds = %16
  %21 = tail call %struct.NaClDesc* @NaClAppGetDesc(%struct.NaClApp* %0, i32 %5) #6
  %22 = icmp eq %struct.NaClDesc* %21, null
  br i1 %22, label %352, label %23

23:                                               ; preds = %16, %20
  %24 = phi %struct.NaClDesc* [ %21, %20 ], [ null, %16 ]
  %25 = and i32 %3, 4
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %56, label %27

27:                                               ; preds = %23
  %28 = and i32 %17, 16
  %29 = icmp ne i32 %28, 0
  %30 = icmp ne %struct.NaClDesc* %24, null
  %31 = and i1 %29, %30
  br i1 %31, label %32, label %342

32:                                               ; preds = %27
  %33 = add i64 %11, %2
  %34 = icmp ult i64 %33, %11
  br i1 %34, label %345, label %35

35:                                               ; preds = %32
  %36 = add i64 %33, 65535
  %37 = and i64 %36, -65536
  %38 = icmp ult i64 %37, %11
  br i1 %38, label %345, label %39

39:                                               ; preds = %35
  %40 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %0, i64 0, i32 8
  %41 = load i64, i64* %40, align 8
  %42 = icmp ugt i64 %41, %11
  br i1 %42, label %345, label %43

43:                                               ; preds = %39
  %44 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %0, i64 0, i32 9
  %45 = load i64, i64* %44, align 8
  %46 = icmp ugt i64 %37, %45
  br i1 %46, label %345, label %47

47:                                               ; preds = %43
  %48 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %0, i64 0, i32 26
  %49 = load i32, i32* %48, align 8
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %51, label %52

51:                                               ; preds = %47
  tail call void (i32, i8*, ...) @NaClLog(i32 -2, i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.20, i64 0, i64 0)) #6
  br label %345

52:                                               ; preds = %47
  %53 = and i32 %3, 2
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %56, label %55

55:                                               ; preds = %52
  tail call void (i32, i8*, ...) @NaClLog(i32 3, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.21, i64 0, i64 0)) #6
  br label %345

56:                                               ; preds = %23, %52
  %57 = phi i32 [ 1, %52 ], [ 0, %23 ]
  %58 = and i64 %11, 65535
  %59 = icmp eq i64 %58, 0
  br i1 %59, label %66, label %60

60:                                               ; preds = %56
  %61 = and i32 %17, 16
  %62 = icmp eq i32 %61, 0
  br i1 %62, label %64, label %63

63:                                               ; preds = %60
  tail call void (i32, i8*, ...) @NaClLog(i32 2, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.22, i64 0, i64 0)) #6
  br label %342

64:                                               ; preds = %60
  tail call void (i32, i8*, ...) @NaClLog(i32 2, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.23, i64 0, i64 0)) #6
  %65 = and i64 %11, -65536
  br label %66

66:                                               ; preds = %56, %64
  %67 = phi i64 [ %11, %56 ], [ %65, %64 ]
  %68 = icmp slt i64 %6, 0
  br i1 %68, label %69, label %70

69:                                               ; preds = %66
  tail call void (i32, i8*, ...) @NaClLog(i32 1, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.24, i64 0, i64 0), i64 %6) #6
  br label %342

70:                                               ; preds = %66
  %71 = and i64 %6, 65535
  %72 = icmp eq i64 %71, 0
  br i1 %72, label %74, label %73

73:                                               ; preds = %70
  tail call void (i32, i8*, ...) @NaClLog(i32 1, i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.25, i64 0, i64 0), i64 %6) #6
  br label %342

74:                                               ; preds = %70
  %75 = add i64 %2, 65535
  %76 = and i64 %75, -65536
  %77 = icmp eq i64 %76, %2
  br i1 %77, label %82, label %78

78:                                               ; preds = %74
  %79 = icmp eq i32 %57, 0
  br i1 %79, label %81, label %80

80:                                               ; preds = %78
  tail call void (i32, i8*, ...) @NaClLog(i32 3, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.26, i64 0, i64 0)) #6
  br label %342

81:                                               ; preds = %78
  tail call void (i32, i8*, ...) @NaClLog(i32 1, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.27, i64 0, i64 0), i64 %76) #6
  br label %82

82:                                               ; preds = %74, %81
  %83 = trunc i64 %76 to i32
  %84 = icmp eq i32 %83, 0
  br i1 %84, label %342, label %85

85:                                               ; preds = %82
  %86 = icmp ult i64 %76, 4294967296
  br i1 %86, label %88, label %87

87:                                               ; preds = %85
  tail call void (i32, i8*, ...) @NaClLog(i32 -4, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.15, i64 0, i64 0), i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.16, i64 0, i64 0), i32 393, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.28, i64 0, i64 0)) #6
  br label %88

88:                                               ; preds = %87, %85
  %89 = icmp eq %struct.NaClDesc* %24, null
  br i1 %89, label %114, label %90

90:                                               ; preds = %88
  %91 = bitcast %struct.NaClDesc* %24 to %struct.NaClDescVtbl**
  %92 = load %struct.NaClDescVtbl*, %struct.NaClDescVtbl** %91, align 8
  %93 = getelementptr inbounds %struct.NaClDescVtbl, %struct.NaClDescVtbl* %92, i64 0, i32 7
  %94 = load i32 (%struct.NaClDesc*, %struct.nacl_abi_stat*)*, i32 (%struct.NaClDesc*, %struct.nacl_abi_stat*)** %93, align 8
  %95 = call i32 %94(%struct.NaClDesc* nonnull %24, %struct.nacl_abi_stat* nonnull %8) #6
  %96 = sext i32 %95 to i64
  %97 = icmp eq i32 %95, 0
  br i1 %97, label %98, label %345

98:                                               ; preds = %90
  %99 = getelementptr inbounds %struct.nacl_abi_stat, %struct.nacl_abi_stat* %8, i64 0, i32 2
  %100 = load i32, i32* %99, align 8
  %101 = and i32 %100, 126976
  switch i32 %101, label %345 [
    i32 32768, label %102
    i32 81920, label %102
  ]

102:                                              ; preds = %98, %98
  %103 = getelementptr inbounds %struct.nacl_abi_stat, %struct.nacl_abi_stat* %8, i64 0, i32 7
  %104 = load i64, i64* %103, align 8
  %105 = icmp slt i64 %104, %6
  br i1 %105, label %345, label %106

106:                                              ; preds = %102
  %107 = sub nsw i64 %104, %6
  %108 = add i64 %107, 4095
  %109 = and i64 %108, -4096
  %110 = add i64 %109, 65535
  %111 = icmp ult i64 %110, 65536
  %112 = icmp ne i64 %109, 0
  %113 = and i1 %112, %111
  br i1 %113, label %345, label %114

114:                                              ; preds = %88, %106
  %115 = phi i64 [ %104, %106 ], [ 9223372036854775807, %88 ]
  %116 = phi i64 [ %107, %106 ], [ 9223372036854775807, %88 ]
  %117 = phi i64 [ %109, %106 ], [ 9223372036854775807, %88 ]
  %118 = icmp ne i32 %57, 0
  %119 = icmp ult i64 %116, %76
  %120 = and i1 %118, %119
  br i1 %120, label %121, label %122

121:                                              ; preds = %114
  call void (i32, i8*, ...) @NaClLog(i32 3, i8* getelementptr inbounds ([76 x i8], [76 x i8]* @.str.30, i64 0, i64 0)) #6
  br label %342

122:                                              ; preds = %114
  %123 = icmp ult i64 %76, %117
  %124 = select i1 %123, i64 %76, i64 %117
  %125 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %0, i64 0, i32 17
  call void @NaClXMutexLock(%struct.NaClMutex* %125) #6
  call void @NaClVmHoleOpeningMu(%struct.NaClApp* %0) #6
  %126 = and i32 %17, 16
  %127 = icmp eq i32 %126, 0
  br i1 %127, label %128, label %148

128:                                              ; preds = %122
  %129 = icmp eq i64 %67, 0
  %130 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %0, i64 0, i32 23
  %131 = lshr exact i64 %76, 12
  br i1 %129, label %132, label %137

132:                                              ; preds = %128
  %133 = call i64 @NaClVmmapFindMapSpace(%struct.NaClVmmap* %130, i64 %131) #6
  call void (i32, i8*, ...) @NaClLog(i32 4, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.31, i64 0, i64 0), i64 %133) #6
  %134 = icmp eq i64 %133, 0
  br i1 %134, label %340, label %135

135:                                              ; preds = %132
  %136 = shl i64 %133, 12
  br label %146

137:                                              ; preds = %128
  %138 = call i64 @NaClVmmapFindMapSpaceAboveHint(%struct.NaClVmmap* %130, i64 %67, i64 %131) #6
  call void (i32, i8*, ...) @NaClLog(i32 4, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.33, i64 0, i64 0), i64 %138) #6
  %139 = icmp eq i64 %138, 0
  br i1 %139, label %140, label %143

140:                                              ; preds = %137
  call void (i32, i8*, ...) @NaClLog(i32 4, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.34, i64 0, i64 0)) #6
  %141 = call i64 @NaClVmmapFindMapSpace(%struct.NaClVmmap* %130, i64 %131) #6
  %142 = icmp eq i64 %141, 0
  br i1 %142, label %340, label %143

143:                                              ; preds = %137, %140
  %144 = phi i64 [ %141, %140 ], [ %138, %137 ]
  %145 = shl i64 %144, 12
  br label %146

146:                                              ; preds = %143, %135
  %147 = phi i64 [ %136, %135 ], [ %145, %143 ]
  call void (i32, i8*, ...) @NaClLog(i32 4, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.32, i64 0, i64 0), i64 %147) #6
  br label %148

148:                                              ; preds = %146, %122
  %149 = phi i64 [ %67, %122 ], [ %147, %146 ]
  %150 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %0, i64 0, i32 0
  %151 = load i8, i8* %150, align 8
  %152 = zext i8 %151 to i64
  %153 = shl i64 1, %152
  %154 = icmp ult i64 %149, %153
  br i1 %154, label %156, label %155

155:                                              ; preds = %148
  call void (i32, i8*, ...) @NaClLog(i32 2, i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.35, i64 0, i64 0), i64 %149) #6
  br label %340

156:                                              ; preds = %148
  %157 = add i64 %149, %76
  %158 = icmp ult i64 %157, %149
  br i1 %158, label %159, label %160

159:                                              ; preds = %156
  call void (i32, i8*, ...) @NaClLog(i32 0, i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.36, i64 0, i64 0), i64 %149, i64 %124, i32 %3, i32 %17, i32 %5, i64 %6) #6
  br label %340

160:                                              ; preds = %156
  %161 = icmp ugt i64 %157, %153
  br i1 %161, label %162, label %163

162:                                              ; preds = %160
  call void (i32, i8*, ...) @NaClLog(i32 2, i8* getelementptr inbounds ([75 x i8], [75 x i8]* @.str.37, i64 0, i64 0), i64 %157) #6
  br label %340

163:                                              ; preds = %160
  br i1 %118, label %164, label %175

164:                                              ; preds = %163
  call void (i32, i8*, ...) @NaClLog(i32 4, i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.38, i64 0, i64 0), i64 %149, i64 %124) #6
  %165 = call i32 @NaClFaultInjectionFaultP(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.39, i64 0, i64 0)) #6
  %166 = icmp eq i32 %165, 0
  br i1 %166, label %167, label %170

167:                                              ; preds = %164
  %168 = call i32 @NaClDescIsSafeForMmap(%struct.NaClDesc* %24) #6
  %169 = icmp eq i32 %168, 0
  br i1 %169, label %173, label %170

170:                                              ; preds = %167, %164
  %171 = call i32 @NaClFaultInjectionFaultP(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.40, i64 0, i64 0)) #6
  %172 = icmp eq i32 %171, 0
  br i1 %172, label %174, label %173

173:                                              ; preds = %170, %167
  call void (i32, i8*, ...) @NaClLog(i32 4, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.41, i64 0, i64 0)) #6
  br label %340

174:                                              ; preds = %170
  call void (i32, i8*, ...) @NaClLog(i32 4, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.42, i64 0, i64 0)) #6
  br label %181

175:                                              ; preds = %163
  %176 = and i64 %149, -65536
  %177 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %0, i64 0, i32 9
  %178 = load i64, i64* %177, align 8
  %179 = icmp ult i64 %176, %178
  br i1 %179, label %180, label %181

180:                                              ; preds = %175
  call void (i32, i8*, ...) @NaClLog(i32 2, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.43, i64 0, i64 0)) #6
  br label %340

181:                                              ; preds = %175, %174
  %182 = trunc i64 %149 to i32
  %183 = add i64 %149, %124
  %184 = trunc i64 %183 to i32
  %185 = add i32 %184, -1
  call void @NaClVmIoPendingCheck_mu(%struct.NaClApp* %0, i32 %182, i32 %185) #6
  %186 = or i32 %17, 16
  %187 = and i32 %3, -5
  %188 = lshr i32 %17, 1
  %189 = xor i32 %188, %17
  %190 = and i32 %189, 1
  %191 = icmp eq i32 %190, 0
  br i1 %191, label %340, label %192

192:                                              ; preds = %181
  %193 = icmp eq i64 %149, 0
  %194 = load i8, i8* %150, align 8
  br i1 %193, label %199, label %195

195:                                              ; preds = %192
  %196 = zext i8 %194 to i64
  %197 = lshr i64 %149, %196
  %198 = icmp eq i64 %197, 0
  br i1 %198, label %201, label %199

199:                                              ; preds = %195, %192
  %200 = zext i8 %194 to i32
  call void (i32, i8*, ...) @NaClLog(i32 -4, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.73, i64 0, i64 0), i64 %149, i32 %200) #6
  br label %201

201:                                              ; preds = %195, %199
  %202 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %0, i64 0, i32 3
  %203 = load i64, i64* %202, align 8
  %204 = add i64 %203, %149
  %205 = icmp eq i64 %124, 0
  br i1 %205, label %312, label %206

206:                                              ; preds = %201
  br i1 %89, label %207, label %212

207:                                              ; preds = %206
  call void (i32, i8*, ...) @NaClLog(i32 4, i8* getelementptr inbounds ([69 x i8], [69 x i8]* @.str.44, i64 0, i64 0), i64 %204, i64 %124, i32 %187, i32 %186, i64 %6) #6
  %208 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %0, i64 0, i32 25
  %209 = load %struct.NaClDescEffector*, %struct.NaClDescEffector** %208, align 8
  %210 = inttoptr i64 %204 to i8*
  %211 = call i64 @NaClDescIoDescMapAnon(%struct.NaClDescEffector* %209, i8* %210, i64 %124, i32 %187, i32 %186, i64 %6) #6
  br label %306

212:                                              ; preds = %206
  br i1 %118, label %213, label %295

213:                                              ; preds = %212
  %214 = bitcast %struct.NaClValidationMetadata* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %214) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %214, i8 -86, i64 72, i1 false)
  call void (i32, i8*, ...) @NaClLog(i32 4, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.45, i64 0, i64 0)) #6
  %215 = bitcast %struct.NaClDesc* %24 to %struct.NaClDescVtbl**
  %216 = load %struct.NaClDescVtbl*, %struct.NaClDescVtbl** %215, align 8
  %217 = getelementptr inbounds %struct.NaClDescVtbl, %struct.NaClDescVtbl* %216, i64 0, i32 37
  %218 = load i32, i32* %217, align 8
  %219 = icmp eq i32 %218, 2
  br i1 %219, label %221, label %220

220:                                              ; preds = %213
  call void (i32, i8*, ...) @NaClLog(i32 4, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.46, i64 0, i64 0), i32 %218) #6
  br label %284

221:                                              ; preds = %213
  %222 = getelementptr inbounds %struct.NaClDescVtbl, %struct.NaClDescVtbl* %216, i64 0, i32 1
  %223 = load i64 (%struct.NaClDesc*, %struct.NaClDescEffector*, i8*, i64, i32, i32, i64)*, i64 (%struct.NaClDesc*, %struct.NaClDescEffector*, i8*, i64, i32, i32, i64)** %222, align 8
  %224 = call i64 %223(%struct.NaClDesc* nonnull %24, %struct.NaClDescEffector* nonnull @NaClDescEffectorTrustedMemStruct, i8* null, i64 %124, i32 3, i32 2, i64 %6) #6
  %225 = icmp ult i64 %224, -65536
  br i1 %225, label %226, label %284

226:                                              ; preds = %221
  %227 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %0, i64 0, i32 46
  %228 = load i32, i32* %227, align 8
  call void @NaClMetadataFromNaClDescCtor(%struct.NaClValidationMetadata* nonnull %9, %struct.NaClDesc* nonnull %24) #6
  %229 = call i32 @NaClFaultInjectionFaultP(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.47, i64 0, i64 0)) #6
  %230 = icmp eq i32 %229, 0
  br i1 %230, label %231, label %244

231:                                              ; preds = %226
  %232 = icmp ne i32 %228, 0
  %233 = zext i1 %232 to i32
  %234 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %0, i64 0, i32 64
  %235 = load %struct.NaClValidatorInterface*, %struct.NaClValidatorInterface** %234, align 8
  %236 = getelementptr inbounds %struct.NaClValidatorInterface, %struct.NaClValidatorInterface* %235, i64 0, i32 3
  %237 = load i32 (i64, i8*, i64, i32, i32, i32, %struct.NaClCPUFeaturesAbstract*, %struct.NaClValidationMetadata*, %struct.NaClValidationCache*)*, i32 (i64, i8*, i64, i32, i32, i32, %struct.NaClCPUFeaturesAbstract*, %struct.NaClValidationMetadata*, %struct.NaClValidationCache*)** %236, align 8
  %238 = inttoptr i64 %224 to i8*
  %239 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %0, i64 0, i32 40
  %240 = load %struct.NaClCPUFeaturesAbstract*, %struct.NaClCPUFeaturesAbstract** %239, align 8
  %241 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %0, i64 0, i32 41
  %242 = load %struct.NaClValidationCache*, %struct.NaClValidationCache** %241, align 8
  %243 = call i32 %237(i64 %149, i8* %238, i64 %124, i32 0, i32 %233, i32 1, %struct.NaClCPUFeaturesAbstract* %240, %struct.NaClValidationMetadata* nonnull %9, %struct.NaClValidationCache* %242) #6
  br label %244

244:                                              ; preds = %226, %231
  %245 = phi i32 [ %243, %231 ], [ 1, %226 ]
  call void (i32, i8*, ...) @NaClLog(i32 3, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.48, i64 0, i64 0), i32 %245) #6
  call void @NaClMetadataDtor(%struct.NaClValidationMetadata* nonnull %9) #6
  %246 = icmp eq i32 %245, 0
  br i1 %246, label %247, label %276

247:                                              ; preds = %244
  %248 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %0, i64 0, i32 29
  call void @NaClXMutexLock(%struct.NaClMutex* %248) #6
  %249 = load i8, i8* %150, align 8
  br i1 %193, label %254, label %250

250:                                              ; preds = %247
  %251 = zext i8 %249 to i64
  %252 = lshr i64 %149, %251
  %253 = icmp eq i64 %252, 0
  br i1 %253, label %256, label %254

254:                                              ; preds = %250, %247
  %255 = zext i8 %249 to i32
  call void (i32, i8*, ...) @NaClLog(i32 -4, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.73, i64 0, i64 0), i64 %149, i32 %255) #6
  br label %256

256:                                              ; preds = %250, %254
  %257 = load i64, i64* %202, align 8
  %258 = add i64 %257, %149
  %259 = call i32 @NaClDynamicRegionCreate(%struct.NaClApp* %0, i64 %258, i64 %124, i32 1) #6
  call void @NaClXMutexUnlock(%struct.NaClMutex* %248) #6
  %260 = icmp eq i32 %259, 0
  br i1 %260, label %261, label %262

261:                                              ; preds = %256
  call void (i32, i8*, ...) @NaClLog(i32 3, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.49, i64 0, i64 0)) #6
  br label %284

262:                                              ; preds = %256
  %263 = inttoptr i64 %224 to i8*
  call void @NaClHostDescUnmapUnsafe(i8* %263, i64 %124) #6
  call void (i32, i8*, ...) @NaClLog(i32 3, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.50, i64 0, i64 0)) #6
  %264 = load %struct.NaClDescVtbl*, %struct.NaClDescVtbl** %215, align 8
  %265 = getelementptr inbounds %struct.NaClDescVtbl, %struct.NaClDescVtbl* %264, i64 0, i32 1
  %266 = load i64 (%struct.NaClDesc*, %struct.NaClDescEffector*, i8*, i64, i32, i32, i64)*, i64 (%struct.NaClDesc*, %struct.NaClDescEffector*, i8*, i64, i32, i32, i64)** %265, align 8
  %267 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %0, i64 0, i32 25
  %268 = load %struct.NaClDescEffector*, %struct.NaClDescEffector** %267, align 8
  %269 = inttoptr i64 %204 to i8*
  %270 = call i64 %266(%struct.NaClDesc* nonnull %24, %struct.NaClDescEffector* %268, i8* %269, i64 %124, i32 5, i32 18, i64 %6) #6
  %271 = icmp eq i64 %270, %204
  br i1 %271, label %273, label %272

272:                                              ; preds = %262
  call void (i32, i8*, ...) @NaClLog(i32 -4, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.51, i64 0, i64 0), i64 %270) #6
  br label %273

273:                                              ; preds = %262, %272
  %274 = shl i64 %149, 32
  %275 = ashr exact i64 %274, 32
  br label %284

276:                                              ; preds = %244
  call void (i32, i8*, ...) @NaClLog(i32 3, i8* getelementptr inbounds ([91 x i8], [91 x i8]* @.str.52, i64 0, i64 0)) #6
  call void @NaClVmHoleClosingMu(%struct.NaClApp* %0) #6
  call void @NaClXMutexUnlock(%struct.NaClMutex* %125) #6
  %277 = call i32 @NaClFaultInjectionFaultP(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.53, i64 0, i64 0)) #6
  %278 = icmp eq i32 %277, 0
  br i1 %278, label %279, label %281

279:                                              ; preds = %276
  %280 = inttoptr i64 %224 to i8*
  br label %286

281:                                              ; preds = %276
  call void (i32, i8*, ...) @NaClLog(i32 3, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.54, i64 0, i64 0)) #6
  %282 = inttoptr i64 %224 to i8*
  %283 = load volatile i8, i8* %282, align 1
  store volatile i8 %283, i8* %282, align 1
  br label %286

284:                                              ; preds = %220, %273, %261, %221
  %285 = phi i64 [ %224, %221 ], [ -22, %220 ], [ %275, %273 ], [ -22, %261 ]
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %214) #6
  br label %340

286:                                              ; preds = %279, %281
  %287 = phi i8* [ %280, %279 ], [ %282, %281 ]
  %288 = trunc i64 %124 to i32
  %289 = call i32 @NaClTextDyncodeCreate(%struct.NaClApp* %0, i32 %182, i8* %287, i32 %288, %struct.NaClValidationMetadata* null) #6
  %290 = icmp slt i32 %289, 0
  %291 = shl i64 %149, 32
  %292 = ashr exact i64 %291, 32
  %293 = sext i32 %289 to i64
  %294 = select i1 %290, i64 %293, i64 %292
  call void @NaClHostDescUnmapUnsafe(i8* %287, i64 %124) #6
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %214) #6
  br label %345

295:                                              ; preds = %212
  %296 = icmp ult i64 %124, %116
  %297 = select i1 %296, i64 %124, i64 %116
  call void (i32, i8*, ...) @NaClLog(i32 4, i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.55, i64 0, i64 0), i64 %204, i64 %124, i32 %187, i32 %186, i64 %6) #6
  %298 = bitcast %struct.NaClDesc* %24 to %struct.NaClDescVtbl**
  %299 = load %struct.NaClDescVtbl*, %struct.NaClDescVtbl** %298, align 8
  %300 = getelementptr inbounds %struct.NaClDescVtbl, %struct.NaClDescVtbl* %299, i64 0, i32 1
  %301 = load i64 (%struct.NaClDesc*, %struct.NaClDescEffector*, i8*, i64, i32, i32, i64)*, i64 (%struct.NaClDesc*, %struct.NaClDescEffector*, i8*, i64, i32, i32, i64)** %300, align 8
  %302 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %0, i64 0, i32 25
  %303 = load %struct.NaClDescEffector*, %struct.NaClDescEffector** %302, align 8
  %304 = inttoptr i64 %204 to i8*
  %305 = call i64 %301(%struct.NaClDesc* nonnull %24, %struct.NaClDescEffector* %303, i8* %304, i64 %297, i32 %187, i32 %186, i64 %6) #6
  br label %306

306:                                              ; preds = %295, %207
  %307 = phi i64 [ %305, %295 ], [ %211, %207 ]
  %308 = icmp ult i64 %307, -65536
  br i1 %308, label %309, label %340

309:                                              ; preds = %306
  %310 = icmp eq i64 %307, %204
  br i1 %310, label %312, label %311

311:                                              ; preds = %309
  call void (i32, i8*, ...) @NaClLog(i32 -4, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.57, i64 0, i64 0)) #6
  br label %312

312:                                              ; preds = %309, %201, %311
  %313 = icmp ugt i64 %76, %117
  br i1 %313, label %314, label %320

314:                                              ; preds = %312
  %315 = sub i64 %76, %124
  %316 = add i64 %204, %124
  %317 = call fastcc i32 @MunmapInternal(%struct.NaClApp* %0, i64 %316, i64 %315)
  %318 = sext i32 %317 to i64
  %319 = icmp eq i32 %317, 0
  br i1 %319, label %322, label %340

320:                                              ; preds = %312
  %321 = icmp eq i64 %76, 0
  br i1 %321, label %340, label %322

322:                                              ; preds = %314, %320
  %323 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %0, i64 0, i32 23
  %324 = load i64, i64* %202, align 8
  %325 = icmp ugt i64 %324, %204
  %326 = load i8, i8* %150, align 8
  br i1 %325, label %332, label %327

327:                                              ; preds = %322
  %328 = zext i8 %326 to i64
  %329 = shl i64 1, %328
  %330 = add i64 %329, %324
  %331 = icmp ugt i64 %330, %204
  br i1 %331, label %335, label %332

332:                                              ; preds = %327, %322
  %333 = zext i8 %326 to i32
  call void (i32, i8*, ...) @NaClLog(i32 -4, i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.74, i64 0, i64 0), i64 %204, i64 %324, i32 %333) #6
  %334 = load i64, i64* %202, align 8
  br label %335

335:                                              ; preds = %327, %332
  %336 = phi i64 [ %324, %327 ], [ %334, %332 ]
  %337 = sub i64 %204, %336
  %338 = lshr i64 %337, 12
  %339 = lshr exact i64 %76, 12
  call void @NaClVmmapAddWithOverwrite(%struct.NaClVmmap* %323, i64 %338, i64 %339, i32 %187, i32 %186, %struct.NaClDesc* %24, i64 %6, i64 %115) #6
  br label %340

340:                                              ; preds = %306, %155, %159, %162, %173, %180, %314, %132, %140, %181, %284, %320, %335
  %341 = phi i64 [ -22, %159 ], [ -22, %162 ], [ -22, %173 ], [ %318, %314 ], [ -22, %180 ], [ -22, %155 ], [ -12, %132 ], [ -12, %140 ], [ -22, %181 ], [ %285, %284 ], [ %149, %320 ], [ %149, %335 ], [ %307, %306 ]
  call void @NaClVmHoleClosingMu(%struct.NaClApp* %0) #6
  call void @NaClXMutexUnlock(%struct.NaClMutex* %125) #6
  br label %342

342:                                              ; preds = %82, %27, %63, %73, %121, %80, %69, %340
  %343 = phi i64 [ %341, %340 ], [ -22, %82 ], [ -22, %27 ], [ -22, %63 ], [ -22, %80 ], [ -22, %121 ], [ -22, %73 ], [ -22, %69 ]
  %344 = icmp eq %struct.NaClDesc* %24, null
  br i1 %344, label %347, label %345

345:                                              ; preds = %39, %35, %32, %55, %90, %51, %43, %98, %102, %106, %286, %342
  %346 = phi i64 [ %294, %286 ], [ %343, %342 ], [ -22, %39 ], [ -22, %35 ], [ -22, %32 ], [ %96, %90 ], [ -22, %51 ], [ -22, %55 ], [ -22, %43 ], [ -19, %98 ], [ -22, %102 ], [ -12, %106 ]
  call void @NaClDescUnref(%struct.NaClDesc* nonnull %24) #6
  br label %347

347:                                              ; preds = %342, %345
  %348 = phi i64 [ %343, %342 ], [ %346, %345 ]
  %349 = add i64 %348, -4294967296
  %350 = icmp ult i64 %349, -4295032832
  br i1 %350, label %351, label %352

351:                                              ; preds = %347
  call void (i32, i8*, ...) @NaClLog(i32 -4, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.58, i64 0, i64 0), i64 %348) #6
  br label %352

352:                                              ; preds = %20, %347, %351
  %353 = phi i64 [ %348, %351 ], [ %348, %347 ], [ -9, %20 ]
  call void (i32, i8*, ...) @NaClLog(i32 3, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.59, i64 0, i64 0), i64 %353) #6
  %354 = trunc i64 %353 to i32
  call void @llvm.lifetime.end.p0i8(i64 104, i8* nonnull %10) #6
  ret i32 %354
}

declare %struct.NaClDesc* @NaClAppGetDesc(%struct.NaClApp*, i32) local_unnamed_addr #2

declare void @NaClXMutexLock(%struct.NaClMutex*) local_unnamed_addr #2

declare void @NaClVmHoleOpeningMu(%struct.NaClApp*) local_unnamed_addr #2

declare i64 @NaClVmmapFindMapSpace(%struct.NaClVmmap*, i64) local_unnamed_addr #2

declare i64 @NaClVmmapFindMapSpaceAboveHint(%struct.NaClVmmap*, i64, i64) local_unnamed_addr #2

declare i32 @NaClFaultInjectionFaultP(i8*) local_unnamed_addr #2

declare i32 @NaClDescIsSafeForMmap(%struct.NaClDesc*) local_unnamed_addr #2

declare void @NaClVmIoPendingCheck_mu(%struct.NaClApp*, i32, i32) local_unnamed_addr #2

declare i64 @NaClDescIoDescMapAnon(%struct.NaClDescEffector*, i8*, i64, i32, i32, i64) local_unnamed_addr #2

declare void @NaClMetadataFromNaClDescCtor(%struct.NaClValidationMetadata*, %struct.NaClDesc*) local_unnamed_addr #2

declare void @NaClMetadataDtor(%struct.NaClValidationMetadata*) local_unnamed_addr #2

declare i32 @NaClDynamicRegionCreate(%struct.NaClApp*, i64, i64, i32) local_unnamed_addr #2

declare void @NaClHostDescUnmapUnsafe(i8*, i64) local_unnamed_addr #2

declare void @NaClVmHoleClosingMu(%struct.NaClApp*) local_unnamed_addr #2

declare i32 @NaClTextDyncodeCreate(%struct.NaClApp*, i32, i8*, i32, %struct.NaClValidationMetadata*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @MunmapInternal(%struct.NaClApp*, i64, i64) unnamed_addr #0 {
  tail call void (i32, i8*, ...) @NaClLog(i32 3, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.75, i64 0, i64 0), i64 %1, i64 %2) #6
  %4 = inttoptr i64 %1 to i8*
  %5 = tail call i8* @mmap64(i8* %4, i64 %2, i32 0, i32 50, i32 -1, i64 0) #6
  %6 = icmp eq i8* %5, inttoptr (i64 -1 to i8*)
  br i1 %6, label %7, label %13

7:                                                ; preds = %3
  %8 = tail call i32* @__errno_location() #7
  %9 = load i32, i32* %8, align 4
  tail call void (i32, i8*, ...) @NaClLog(i32 4, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.76, i64 0, i64 0), i32 %9) #6
  %10 = load i32, i32* %8, align 4
  %11 = tail call i32 @NaClXlateErrno(i32 %10) #6
  %12 = sub nsw i32 0, %11
  br label %33

13:                                               ; preds = %3
  %14 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %0, i64 0, i32 23
  %15 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %0, i64 0, i32 3
  %16 = load i64, i64* %15, align 8
  %17 = icmp ugt i64 %16, %1
  %18 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %0, i64 0, i32 0
  %19 = load i8, i8* %18, align 8
  br i1 %17, label %25, label %20

20:                                               ; preds = %13
  %21 = zext i8 %19 to i64
  %22 = shl i64 1, %21
  %23 = add i64 %22, %16
  %24 = icmp ugt i64 %23, %1
  br i1 %24, label %28, label %25

25:                                               ; preds = %20, %13
  %26 = zext i8 %19 to i32
  tail call void (i32, i8*, ...) @NaClLog(i32 -4, i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.74, i64 0, i64 0), i64 %1, i64 %16, i32 %26) #6
  %27 = load i64, i64* %15, align 8
  br label %28

28:                                               ; preds = %20, %25
  %29 = phi i64 [ %16, %20 ], [ %27, %25 ]
  %30 = sub i64 %1, %29
  %31 = lshr i64 %30, 12
  %32 = lshr i64 %2, 12
  tail call void @NaClVmmapRemove(%struct.NaClVmmap* %14, i64 %31, i64 %32) #6
  br label %33

33:                                               ; preds = %28, %7
  %34 = phi i32 [ %12, %7 ], [ 0, %28 ]
  ret i32 %34
}

declare void @NaClVmmapAddWithOverwrite(%struct.NaClVmmap*, i64, i64, i32, i32, %struct.NaClDesc*, i64, i64) local_unnamed_addr #2

declare void @NaClDescUnref(%struct.NaClDesc*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @NaClSysMmap(%struct.NaClAppThread* nocapture readonly, i32, i64, i32, i32, i32, i32) local_unnamed_addr #0 {
  %8 = alloca i64, align 8
  %9 = getelementptr inbounds %struct.NaClAppThread, %struct.NaClAppThread* %0, i64 0, i32 2
  %10 = load %struct.NaClApp*, %struct.NaClApp** %9, align 8
  %11 = bitcast i64* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11) #6
  store i64 -6148914691236517206, i64* %8, align 8
  tail call void (i32, i8*, ...) @NaClLog(i32 3, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.60, i64 0, i64 0), i32 %1, i64 %2, i32 %3, i32 %4, i32 %5, i32 %6) #6
  %12 = zext i32 %6 to i64
  %13 = call i32 @NaClCopyInFromUser(%struct.NaClApp* %10, i8* nonnull %11, i64 %12, i64 8) #6
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %21, label %15

15:                                               ; preds = %7
  %16 = load i64, i64* %8, align 8
  call void (i32, i8*, ...) @NaClLog(i32 4, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.61, i64 0, i64 0), i64 %16) #6
  %17 = zext i32 %1 to i64
  %18 = inttoptr i64 %17 to i8*
  %19 = load i64, i64* %8, align 8
  %20 = call i32 @NaClSysMmapIntern(%struct.NaClApp* %10, i8* %18, i64 %2, i32 %3, i32 %4, i32 %5, i64 %19)
  br label %21

21:                                               ; preds = %7, %15
  %22 = phi i32 [ %20, %15 ], [ -14, %7 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11) #6
  ret i32 %22
}

declare i32 @NaClCopyInFromUser(%struct.NaClApp*, i8*, i64, i64) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @NaClSysMunmap(%struct.NaClAppThread*, i32, i32) local_unnamed_addr #0 {
  %4 = getelementptr inbounds %struct.NaClAppThread, %struct.NaClAppThread* %0, i64 0, i32 2
  %5 = load %struct.NaClApp*, %struct.NaClApp** %4, align 8
  %6 = ptrtoint %struct.NaClAppThread* %0 to i64
  tail call void (i32, i8*, ...) @NaClLog(i32 3, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.62, i64 0, i64 0), i64 %6, i32 %1, i32 %2) #6
  %7 = zext i32 %1 to i64
  %8 = and i64 %7, 65535
  %9 = icmp eq i64 %8, 0
  br i1 %9, label %11, label %10

10:                                               ; preds = %3
  tail call void (i32, i8*, ...) @NaClLog(i32 4, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.63, i64 0, i64 0)) #6
  br label %50

11:                                               ; preds = %3
  %12 = zext i32 %2 to i64
  %13 = add nuw nsw i64 %12, 65535
  %14 = and i64 %13, 8589869056
  %15 = icmp eq i64 %14, %12
  br i1 %15, label %18, label %16

16:                                               ; preds = %11
  %17 = trunc i64 %14 to i32
  tail call void (i32, i8*, ...) @NaClLog(i32 2, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.64, i64 0, i64 0), i32 %17) #6
  br label %18

18:                                               ; preds = %11, %16
  %19 = phi i32 [ %17, %16 ], [ %2, %11 ]
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %50, label %21

21:                                               ; preds = %18
  %22 = zext i32 %19 to i64
  %23 = icmp eq i32 %1, 0
  br i1 %23, label %36, label %24

24:                                               ; preds = %21
  %25 = add nuw nsw i64 %22, %7
  %26 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %5, i64 0, i32 0
  %27 = load i8, i8* %26, align 8
  %28 = zext i8 %27 to i64
  %29 = shl i64 1, %28
  %30 = icmp ult i64 %29, %25
  br i1 %30, label %36, label %31

31:                                               ; preds = %24
  %32 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %5, i64 0, i32 3
  %33 = load i64, i64* %32, align 8
  %34 = add i64 %33, %7
  %35 = icmp eq i64 %34, -1
  br i1 %35, label %36, label %37

36:                                               ; preds = %24, %21, %31
  tail call void (i32, i8*, ...) @NaClLog(i32 4, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.65, i64 0, i64 0)) #6
  br label %50

37:                                               ; preds = %31
  %38 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %5, i64 0, i32 17
  tail call void @NaClXMutexLock(%struct.NaClMutex* %38) #6
  tail call void @NaClVmHoleOpeningMu(%struct.NaClApp* %5) #6
  %39 = and i64 %7, 4294901760
  %40 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %5, i64 0, i32 9
  %41 = load i64, i64* %40, align 8
  %42 = icmp ult i64 %39, %41
  br i1 %42, label %43, label %44

43:                                               ; preds = %37
  tail call void (i32, i8*, ...) @NaClLog(i32 2, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.66, i64 0, i64 0)) #6
  br label %48

44:                                               ; preds = %37
  %45 = add i32 %1, -1
  %46 = add i32 %45, %19
  tail call void @NaClVmIoPendingCheck_mu(%struct.NaClApp* %5, i32 %1, i32 %46) #6
  %47 = tail call fastcc i32 @MunmapInternal(%struct.NaClApp* %5, i64 %34, i64 %22)
  br label %48

48:                                               ; preds = %43, %44
  %49 = phi i32 [ -22, %43 ], [ %47, %44 ]
  tail call void @NaClVmHoleClosingMu(%struct.NaClApp* %5) #6
  tail call void @NaClXMutexUnlock(%struct.NaClMutex* %38) #6
  br label %50

50:                                               ; preds = %18, %10, %36, %48
  %51 = phi i32 [ %49, %48 ], [ -22, %18 ], [ -22, %10 ], [ -14, %36 ]
  ret i32 %51
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @NaClSysMprotectInternal(%struct.NaClApp*, i32, i64, i32) local_unnamed_addr #0 {
  %5 = alloca %struct.NaClVmmapIter, align 8
  %6 = zext i32 %1 to i64
  %7 = and i64 %6, 65535
  %8 = icmp eq i64 %7, 0
  br i1 %8, label %10, label %9

9:                                                ; preds = %4
  tail call void (i32, i8*, ...) @NaClLog(i32 4, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.67, i64 0, i64 0)) #6
  br label %174

10:                                               ; preds = %4
  %11 = add i64 %2, 65535
  %12 = and i64 %11, -65536
  %13 = icmp eq i32 %1, 0
  br i1 %13, label %28, label %14

14:                                               ; preds = %10
  %15 = add i64 %12, %6
  %16 = icmp ult i64 %15, %6
  br i1 %16, label %28, label %17

17:                                               ; preds = %14
  %18 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %0, i64 0, i32 0
  %19 = load i8, i8* %18, align 8
  %20 = zext i8 %19 to i64
  %21 = shl i64 1, %20
  %22 = icmp ult i64 %21, %15
  br i1 %22, label %28, label %23

23:                                               ; preds = %17
  %24 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %0, i64 0, i32 3
  %25 = load i64, i64* %24, align 8
  %26 = add i64 %25, %6
  %27 = icmp eq i64 %26, -1
  br i1 %27, label %28, label %29

28:                                               ; preds = %17, %14, %10, %23
  tail call void (i32, i8*, ...) @NaClLog(i32 4, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.68, i64 0, i64 0)) #6
  br label %174

29:                                               ; preds = %23
  %30 = icmp ugt i32 %3, 3
  br i1 %30, label %31, label %32

31:                                               ; preds = %29
  tail call void (i32, i8*, ...) @NaClLog(i32 4, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.69, i64 0, i64 0)) #6
  br label %174

32:                                               ; preds = %29
  %33 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %0, i64 0, i32 17
  tail call void @NaClXMutexLock(%struct.NaClMutex* %33) #6
  %34 = and i64 %6, 4294901760
  %35 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %0, i64 0, i32 9
  %36 = load i64, i64* %35, align 8
  %37 = icmp ult i64 %34, %36
  br i1 %37, label %38, label %39

38:                                               ; preds = %32
  tail call void (i32, i8*, ...) @NaClLog(i32 2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.70, i64 0, i64 0)) #6
  br label %172

39:                                               ; preds = %32
  %40 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %0, i64 0, i32 23
  %41 = load i64, i64* %24, align 8
  %42 = icmp ugt i64 %41, %26
  %43 = load i8, i8* %18, align 8
  br i1 %42, label %49, label %44

44:                                               ; preds = %39
  %45 = zext i8 %43 to i64
  %46 = shl i64 1, %45
  %47 = add i64 %46, %41
  %48 = icmp ugt i64 %47, %26
  br i1 %48, label %52, label %49

49:                                               ; preds = %44, %39
  %50 = zext i8 %43 to i32
  tail call void (i32, i8*, ...) @NaClLog(i32 -4, i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.74, i64 0, i64 0), i64 %26, i64 %41, i32 %50) #6
  %51 = load i64, i64* %24, align 8
  br label %52

52:                                               ; preds = %44, %49
  %53 = phi i64 [ %41, %44 ], [ %51, %49 ]
  %54 = sub i64 %26, %53
  %55 = lshr i64 %54, 12
  %56 = lshr exact i64 %12, 12
  %57 = tail call i32 @NaClVmmapChangeProt(%struct.NaClVmmap* %40, i64 %55, i64 %56, i32 %3) #6
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %59, label %60

59:                                               ; preds = %52
  tail call void (i32, i8*, ...) @NaClLog(i32 4, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.71, i64 0, i64 0)) #6
  br label %172

60:                                               ; preds = %52
  %61 = trunc i64 %12 to i32
  %62 = add i32 %1, -1
  %63 = add i32 %62, %61
  tail call void @NaClVmIoPendingCheck_mu(%struct.NaClApp* %0, i32 %1, i32 %63) #6
  %64 = bitcast %struct.NaClVmmapIter* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %64) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %64, i8 -86, i64 16, i1 false) #6
  %65 = tail call i32 @NaClProtMap(i32 %3) #6
  %66 = load i64, i64* %24, align 8
  %67 = icmp ugt i64 %66, %26
  %68 = load i8, i8* %18, align 8
  br i1 %67, label %74, label %69

69:                                               ; preds = %60
  %70 = zext i8 %68 to i64
  %71 = shl i64 1, %70
  %72 = add i64 %71, %66
  %73 = icmp ugt i64 %72, %26
  br i1 %73, label %77, label %74

74:                                               ; preds = %69, %60
  %75 = zext i8 %68 to i32
  tail call void (i32, i8*, ...) @NaClLog(i32 -4, i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.74, i64 0, i64 0), i64 %26, i64 %66, i32 %75) #6
  %76 = load i64, i64* %24, align 8
  br label %77

77:                                               ; preds = %74, %69
  %78 = phi i64 [ %66, %69 ], [ %76, %74 ]
  %79 = sub i64 %26, %78
  %80 = add i64 %79, %12
  %81 = lshr i64 %80, 12
  %82 = lshr i64 %79, 12
  %83 = call %struct.NaClVmmapIter* @NaClVmmapFindPageIter(%struct.NaClVmmap* %40, i64 %82, %struct.NaClVmmapIter* nonnull %5) #6
  %84 = call %struct.NaClVmmapEntry* @NaClVmmapIterStar(%struct.NaClVmmapIter* nonnull %5) #6
  %85 = getelementptr inbounds %struct.NaClVmmapEntry, %struct.NaClVmmapEntry* %84, i64 0, i32 0
  %86 = load i64, i64* %85, align 8
  %87 = shl i64 %86, 12
  %88 = icmp eq i64 %79, %87
  br i1 %88, label %90, label %89

89:                                               ; preds = %77
  call void (i32, i8*, ...) @NaClLog(i32 -4, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.15, i64 0, i64 0), i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.16, i64 0, i64 0), i32 1250, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.77, i64 0, i64 0)) #6
  br label %90

90:                                               ; preds = %89, %77
  %91 = call i32 @NaClVmmapIterAtEnd(%struct.NaClVmmapIter* nonnull %5) #6
  %92 = icmp eq i32 %91, 0
  br i1 %92, label %93, label %161

93:                                               ; preds = %90
  %94 = call %struct.NaClVmmapEntry* @NaClVmmapIterStar(%struct.NaClVmmapIter* nonnull %5) #6
  %95 = getelementptr inbounds %struct.NaClVmmapEntry, %struct.NaClVmmapEntry* %94, i64 0, i32 0
  %96 = load i64, i64* %95, align 8
  %97 = icmp ult i64 %96, %81
  br i1 %97, label %103, label %161

98:                                               ; preds = %158
  %99 = call %struct.NaClVmmapEntry* @NaClVmmapIterStar(%struct.NaClVmmapIter* nonnull %5) #6
  %100 = getelementptr inbounds %struct.NaClVmmapEntry, %struct.NaClVmmapEntry* %99, i64 0, i32 0
  %101 = load i64, i64* %100, align 8
  %102 = icmp ult i64 %101, %81
  br i1 %102, label %103, label %161

103:                                              ; preds = %93, %98
  %104 = call %struct.NaClVmmapEntry* @NaClVmmapIterStar(%struct.NaClVmmapIter* nonnull %5) #6
  %105 = getelementptr inbounds %struct.NaClVmmapEntry, %struct.NaClVmmapEntry* %104, i64 0, i32 0
  %106 = load i64, i64* %105, align 8
  %107 = shl i64 %106, 12
  %108 = icmp eq i64 %107, 0
  %109 = load i8, i8* %18, align 8
  br i1 %108, label %114, label %110

110:                                              ; preds = %103
  %111 = zext i8 %109 to i64
  %112 = lshr i64 %107, %111
  %113 = icmp eq i64 %112, 0
  br i1 %113, label %116, label %114

114:                                              ; preds = %110, %103
  %115 = zext i8 %109 to i32
  call void (i32, i8*, ...) @NaClLog(i32 -4, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.73, i64 0, i64 0), i64 %107, i32 %115) #6
  br label %116

116:                                              ; preds = %114, %110
  %117 = load i64, i64* %24, align 8
  %118 = add i64 %117, %107
  %119 = getelementptr inbounds %struct.NaClVmmapEntry, %struct.NaClVmmapEntry* %104, i64 0, i32 1
  %120 = load i64, i64* %119, align 8
  %121 = shl i64 %120, 12
  %122 = getelementptr inbounds %struct.NaClVmmapEntry, %struct.NaClVmmapEntry* %104, i64 0, i32 5
  %123 = bitcast %struct.NaClDesc** %122 to i64*
  %124 = load i64, i64* %123, align 8
  call void (i32, i8*, ...) @NaClLog(i32 3, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.78, i64 0, i64 0), i64 %118, i64 %124) #6
  %125 = load %struct.NaClDesc*, %struct.NaClDesc** %122, align 8
  %126 = icmp eq %struct.NaClDesc* %125, null
  br i1 %126, label %127, label %137

127:                                              ; preds = %116
  %128 = inttoptr i64 %118 to i8*
  %129 = call i32 @mprotect(i8* %128, i64 %121, i32 %65) #6
  %130 = icmp eq i32 %129, 0
  br i1 %130, label %158, label %131

131:                                              ; preds = %127
  %132 = tail call i32* @__errno_location() #7
  %133 = load i32, i32* %132, align 4
  call void (i32, i8*, ...) @NaClLog(i32 -4, i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.79, i64 0, i64 0), i32 %133) #6
  %134 = load i32, i32* %132, align 4
  %135 = call i32 @NaClXlateErrno(i32 %134) #6
  %136 = sub nsw i32 0, %135
  br label %170

137:                                              ; preds = %116
  %138 = getelementptr inbounds %struct.NaClVmmapEntry, %struct.NaClVmmapEntry* %104, i64 0, i32 6
  %139 = load i64, i64* %138, align 8
  %140 = getelementptr inbounds %struct.NaClVmmapEntry, %struct.NaClVmmapEntry* %104, i64 0, i32 7
  %141 = load i64, i64* %140, align 8
  %142 = icmp sgt i64 %141, %139
  br i1 %142, label %143, label %158

143:                                              ; preds = %137
  %144 = sub i64 4095, %139
  %145 = add i64 %144, %141
  %146 = and i64 %145, -4096
  %147 = icmp ult i64 %146, %121
  %148 = select i1 %147, i64 %146, i64 %121
  %149 = inttoptr i64 %118 to i8*
  %150 = call i32 @mprotect(i8* %149, i64 %148, i32 %65) #6
  %151 = icmp eq i32 %150, 0
  br i1 %151, label %158, label %152

152:                                              ; preds = %143
  %153 = tail call i32* @__errno_location() #7
  %154 = load i32, i32* %153, align 4
  call void (i32, i8*, ...) @NaClLog(i32 -4, i8* getelementptr inbounds ([69 x i8], [69 x i8]* @.str.80, i64 0, i64 0), i32 %154) #6
  %155 = load i32, i32* %153, align 4
  %156 = call i32 @NaClXlateErrno(i32 %155) #6
  %157 = sub nsw i32 0, %156
  br label %170

158:                                              ; preds = %143, %137, %127
  call void @NaClVmmapIterIncr(%struct.NaClVmmapIter* nonnull %5) #6
  %159 = call i32 @NaClVmmapIterAtEnd(%struct.NaClVmmapIter* nonnull %5) #6
  %160 = icmp eq i32 %159, 0
  br i1 %160, label %98, label %161

161:                                              ; preds = %98, %158, %93, %90
  %162 = phi %struct.NaClVmmapEntry* [ %84, %90 ], [ %84, %93 ], [ %104, %158 ], [ %104, %98 ]
  %163 = getelementptr inbounds %struct.NaClVmmapEntry, %struct.NaClVmmapEntry* %162, i64 0, i32 0
  %164 = load i64, i64* %163, align 8
  %165 = getelementptr inbounds %struct.NaClVmmapEntry, %struct.NaClVmmapEntry* %162, i64 0, i32 1
  %166 = load i64, i64* %165, align 8
  %167 = add i64 %166, %164
  %168 = icmp eq i64 %167, %81
  br i1 %168, label %170, label %169

169:                                              ; preds = %161
  call void (i32, i8*, ...) @NaClLog(i32 -4, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.15, i64 0, i64 0), i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.16, i64 0, i64 0), i32 1290, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.81, i64 0, i64 0)) #6
  br label %170

170:                                              ; preds = %131, %152, %161, %169
  %171 = phi i32 [ 0, %169 ], [ 0, %161 ], [ %136, %131 ], [ %157, %152 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %64) #6
  br label %172

172:                                              ; preds = %38, %170, %59
  %173 = phi i32 [ -13, %59 ], [ %171, %170 ], [ -13, %38 ]
  call void @NaClXMutexUnlock(%struct.NaClMutex* %33) #6
  br label %174

174:                                              ; preds = %9, %28, %31, %172
  %175 = phi i32 [ %173, %172 ], [ -14, %28 ], [ -13, %31 ], [ -22, %9 ]
  ret i32 %175
}

declare i32 @NaClVmmapChangeProt(%struct.NaClVmmap*, i64, i64, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @NaClSysMprotect(%struct.NaClAppThread*, i32, i64, i32) local_unnamed_addr #0 {
  %5 = getelementptr inbounds %struct.NaClAppThread, %struct.NaClAppThread* %0, i64 0, i32 2
  %6 = load %struct.NaClApp*, %struct.NaClApp** %5, align 8
  %7 = ptrtoint %struct.NaClAppThread* %0 to i64
  %8 = zext i32 %1 to i64
  tail call void (i32, i8*, ...) @NaClLog(i32 3, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.72, i64 0, i64 0), i64 %7, i64 %8, i64 %2, i32 %3) #6
  %9 = tail call i32 @NaClSysMprotectInternal(%struct.NaClApp* %6, i32 %1, i64 %2, i32 %3)
  ret i32 %9
}

; Function Attrs: nounwind
declare i8* @mmap64(i8*, i64, i32, i32, i32, i64) local_unnamed_addr #4

; Function Attrs: nounwind readnone
declare i32* @__errno_location() local_unnamed_addr #5

declare i32 @NaClXlateErrno(i32) local_unnamed_addr #2

declare void @NaClVmmapRemove(%struct.NaClVmmap*, i64, i64) local_unnamed_addr #2

declare i32 @NaClProtMap(i32) local_unnamed_addr #2

; Function Attrs: nounwind
declare i32 @mprotect(i8*, i64, i32) local_unnamed_addr #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }
attributes #7 = { nounwind readnone }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
