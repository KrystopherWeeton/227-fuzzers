; ModuleID = '../../third_party/blink/renderer/platform/geometry/float_rect.cc'
source_filename = "../../third_party/blink/renderer/platform/geometry/float_rect.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.blink::FloatRect" = type { %"class.blink::FloatPoint", %"class.blink::FloatSize" }
%"class.blink::FloatPoint" = type { float, float }
%"class.blink::FloatSize" = type { float, float }
%"class.blink::IntRect" = type { %"class.blink::IntPoint", %"class.blink::IntSize" }
%"class.blink::IntPoint" = type { i32, i32 }
%"class.blink::IntSize" = type { i32, i32 }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase" }
%"class.WTF::VectorBufferBase" = type { %"class.blink::FloatRect"*, i32, i32 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.WTF::String" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.WTF::StringImpl"* }
%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.WTF::TextStream" = type { %"class.WTF::StringBuilder" }
%"class.WTF::StringBuilder" = type <{ %"class.WTF::String", %union.anon.2, i32, i8, i8, [2 x i8] }>
%union.anon.2 = type { %"class.WTF::Vector.3" }
%"class.WTF::Vector.3" = type { %"class.WTF::VectorBuffer.4" }
%"class.WTF::VectorBuffer.4" = type { %"class.WTF::VectorBufferBase.5", [16 x i8] }
%"class.WTF::VectorBufferBase.5" = type { i8*, i32, i32 }
%"struct.WTF::TextStream::FormatNumberRespectingIntegers" = type { double }

@.str = private unnamed_addr constant [6 x i8] c"%s %s\00", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c"at (\00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c",\00", align 1
@.str.3 = private unnamed_addr constant [8 x i8] c") size \00", align 1
@.str.4 = private unnamed_addr constant [2 x i8] c"x\00", align 1

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden { <2 x float>, <2 x float> } @_ZN5blink9FloatRect15NarrowPrecisionEdddd(double, double, double, double) local_unnamed_addr #0 align 2 {
  %5 = fcmp ult double %0, 0x47EFFFFFE0000000
  br i1 %5, label %6, label %10

6:                                                ; preds = %4
  %7 = fcmp ole double %0, 0xC7EFFFFFE0000000
  %8 = select i1 %7, double 0xC7EFFFFFE0000000, double %0
  %9 = fptrunc double %8 to float
  br label %10

10:                                               ; preds = %4, %6
  %11 = phi float [ %9, %6 ], [ 0x47EFFFFFE0000000, %4 ]
  %12 = fcmp ult double %1, 0x47EFFFFFE0000000
  br i1 %12, label %13, label %17

13:                                               ; preds = %10
  %14 = fcmp ole double %1, 0xC7EFFFFFE0000000
  %15 = select i1 %14, double 0xC7EFFFFFE0000000, double %1
  %16 = fptrunc double %15 to float
  br label %17

17:                                               ; preds = %10, %13
  %18 = phi float [ %16, %13 ], [ 0x47EFFFFFE0000000, %10 ]
  %19 = fcmp ult double %2, 0x47EFFFFFE0000000
  br i1 %19, label %20, label %24

20:                                               ; preds = %17
  %21 = fcmp ole double %2, 0xC7EFFFFFE0000000
  %22 = select i1 %21, double 0xC7EFFFFFE0000000, double %2
  %23 = fptrunc double %22 to float
  br label %24

24:                                               ; preds = %17, %20
  %25 = phi float [ %23, %20 ], [ 0x47EFFFFFE0000000, %17 ]
  %26 = fcmp ult double %3, 0x47EFFFFFE0000000
  br i1 %26, label %27, label %31

27:                                               ; preds = %24
  %28 = fcmp ole double %3, 0xC7EFFFFFE0000000
  %29 = select i1 %28, double 0xC7EFFFFFE0000000, double %3
  %30 = fptrunc double %29 to float
  br label %31

31:                                               ; preds = %24, %27
  %32 = phi float [ %30, %27 ], [ 0x47EFFFFFE0000000, %24 ]
  %33 = insertelement <2 x float> undef, float %11, i32 0
  %34 = insertelement <2 x float> %33, float %18, i32 1
  %35 = insertelement <2 x float> undef, float %25, i32 0
  %36 = insertelement <2 x float> %35, float %32, i32 1
  %37 = insertvalue { <2 x float>, <2 x float> } undef, <2 x float> %34, 0
  %38 = insertvalue { <2 x float>, <2 x float> } %37, <2 x float> %36, 1
  ret { <2 x float>, <2 x float> } %38
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK5blink9FloatRect8IsFiniteEv(%"class.blink::FloatRect"* nocapture readonly) local_unnamed_addr #1 align 2 {
  %2 = bitcast %"class.blink::FloatRect"* %0 to <2 x float>*
  %3 = load <2 x float>, <2 x float>* %2, align 4
  %4 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %0, i64 0, i32 1, i32 0
  %5 = bitcast float* %4 to <2 x float>*
  %6 = load <2 x float>, <2 x float>* %5, align 4
  %7 = fadd <2 x float> %3, %6
  %8 = extractelement <2 x float> %3, i32 0
  %9 = fmul float %8, 0.000000e+00
  %10 = extractelement <2 x float> %3, i32 1
  %11 = fmul float %9, %10
  %12 = extractelement <2 x float> %7, i32 0
  %13 = fmul float %11, %12
  %14 = extractelement <2 x float> %7, i32 1
  %15 = fmul float %13, %14
  %16 = fcmp ord float %15, 0.000000e+00
  ret i1 %16
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK5blink9FloatRect22IsExpressibleAsIntRectEv(%"class.blink::FloatRect"* nocapture readonly) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %0, i64 0, i32 0, i32 0
  %3 = load float, float* %2, align 4
  %4 = fcmp ogt float %3, 0xC1E0000000000000
  %5 = fcmp olt float %3, 0x41E0000000000000
  %6 = and i1 %4, %5
  br i1 %6, label %7, label %35

7:                                                ; preds = %1
  %8 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %0, i64 0, i32 0, i32 1
  %9 = load float, float* %8, align 4
  %10 = fcmp ogt float %9, 0xC1E0000000000000
  %11 = fcmp olt float %9, 0x41E0000000000000
  %12 = and i1 %10, %11
  br i1 %12, label %13, label %35

13:                                               ; preds = %7
  %14 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %0, i64 0, i32 1, i32 0
  %15 = load float, float* %14, align 4
  %16 = fcmp ogt float %15, 0xC1E0000000000000
  %17 = fcmp olt float %15, 0x41E0000000000000
  %18 = and i1 %16, %17
  br i1 %18, label %19, label %35

19:                                               ; preds = %13
  %20 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %0, i64 0, i32 1, i32 1
  %21 = load float, float* %20, align 4
  %22 = fcmp ogt float %21, 0xC1E0000000000000
  %23 = fcmp olt float %21, 0x41E0000000000000
  %24 = and i1 %22, %23
  br i1 %24, label %25, label %35

25:                                               ; preds = %19
  %26 = fadd float %3, %15
  %27 = fcmp ogt float %26, 0xC1E0000000000000
  %28 = fcmp olt float %26, 0x41E0000000000000
  %29 = and i1 %27, %28
  br i1 %29, label %30, label %35

30:                                               ; preds = %25
  %31 = fadd float %9, %21
  %32 = fcmp ogt float %31, 0xC1E0000000000000
  %33 = fcmp olt float %31, 0x41E0000000000000
  %34 = and i1 %32, %33
  br label %35

35:                                               ; preds = %30, %25, %19, %13, %7, %1
  %36 = phi i1 [ false, %25 ], [ false, %19 ], [ false, %13 ], [ false, %7 ], [ false, %1 ], [ %34, %30 ]
  ret i1 %36
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink9FloatRect12ShiftXEdgeToEf(%"class.blink::FloatRect"* nocapture, float) local_unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %0, i64 0, i32 0, i32 0
  %4 = load float, float* %3, align 4
  %5 = fsub float %1, %4
  store float %1, float* %3, align 4
  %6 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %0, i64 0, i32 1, i32 0
  %7 = load float, float* %6, align 4
  %8 = fsub float %7, %5
  %9 = fcmp ogt float %8, 0.000000e+00
  %10 = select i1 %9, float %8, float 0.000000e+00
  store float %10, float* %6, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink9FloatRect15ShiftMaxXEdgeToEf(%"class.blink::FloatRect"* nocapture, float) local_unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %0, i64 0, i32 0, i32 0
  %4 = load float, float* %3, align 4
  %5 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %0, i64 0, i32 1, i32 0
  %6 = load float, float* %5, align 4
  %7 = fadd float %4, %6
  %8 = fsub float %1, %7
  %9 = fadd float %6, %8
  %10 = fcmp ogt float %9, 0.000000e+00
  %11 = select i1 %10, float %9, float 0.000000e+00
  store float %11, float* %5, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink9FloatRect12ShiftYEdgeToEf(%"class.blink::FloatRect"* nocapture, float) local_unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %0, i64 0, i32 0, i32 1
  %4 = load float, float* %3, align 4
  %5 = fsub float %1, %4
  store float %1, float* %3, align 4
  %6 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %0, i64 0, i32 1, i32 1
  %7 = load float, float* %6, align 4
  %8 = fsub float %7, %5
  %9 = fcmp ogt float %8, 0.000000e+00
  %10 = select i1 %9, float %8, float 0.000000e+00
  store float %10, float* %6, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink9FloatRect15ShiftMaxYEdgeToEf(%"class.blink::FloatRect"* nocapture, float) local_unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %0, i64 0, i32 0, i32 1
  %4 = load float, float* %3, align 4
  %5 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %0, i64 0, i32 1, i32 1
  %6 = load float, float* %5, align 4
  %7 = fadd float %4, %6
  %8 = fsub float %1, %7
  %9 = fadd float %6, %8
  %10 = fcmp ogt float %9, 0.000000e+00
  %11 = select i1 %10, float %9, float 0.000000e+00
  store float %11, float* %5, align 4
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK5blink9FloatRect10IntersectsERKS0_(%"class.blink::FloatRect"* nocapture readonly, %"class.blink::FloatRect"* nocapture readonly dereferenceable(16)) local_unnamed_addr #3 align 2 {
  %3 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %0, i64 0, i32 1, i32 0
  %4 = load float, float* %3, align 4
  %5 = fcmp ugt float %4, 0.000000e+00
  br i1 %5, label %6, label %38

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %0, i64 0, i32 1, i32 1
  %8 = load float, float* %7, align 4
  %9 = fcmp ugt float %8, 0.000000e+00
  br i1 %9, label %10, label %38

10:                                               ; preds = %6
  %11 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %1, i64 0, i32 1, i32 0
  %12 = load float, float* %11, align 4
  %13 = fcmp ugt float %12, 0.000000e+00
  br i1 %13, label %14, label %38

14:                                               ; preds = %10
  %15 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %1, i64 0, i32 1, i32 1
  %16 = load float, float* %15, align 4
  %17 = fcmp ugt float %16, 0.000000e+00
  br i1 %17, label %18, label %38

18:                                               ; preds = %14
  %19 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %0, i64 0, i32 0, i32 0
  %20 = load float, float* %19, align 4
  %21 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %1, i64 0, i32 0, i32 0
  %22 = load float, float* %21, align 4
  %23 = fadd float %12, %22
  %24 = fcmp olt float %20, %23
  %25 = fadd float %4, %20
  %26 = fcmp olt float %22, %25
  %27 = and i1 %26, %24
  br i1 %27, label %28, label %38

28:                                               ; preds = %18
  %29 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %0, i64 0, i32 0, i32 1
  %30 = load float, float* %29, align 4
  %31 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %1, i64 0, i32 0, i32 1
  %32 = load float, float* %31, align 4
  %33 = fadd float %32, %16
  %34 = fcmp olt float %30, %33
  br i1 %34, label %35, label %38

35:                                               ; preds = %28
  %36 = fadd float %30, %8
  %37 = fcmp olt float %32, %36
  br label %38

38:                                               ; preds = %14, %6, %10, %2, %35, %28, %18
  %39 = phi i1 [ false, %28 ], [ false, %18 ], [ false, %14 ], [ false, %6 ], [ %37, %35 ], [ false, %2 ], [ false, %10 ]
  ret i1 %39
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK5blink9FloatRect10IntersectsERKNS_7IntRectE(%"class.blink::FloatRect"* nocapture readonly, %"class.blink::IntRect"* nocapture readonly dereferenceable(16)) local_unnamed_addr #3 align 2 {
  %3 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %0, i64 0, i32 1, i32 0
  %4 = load float, float* %3, align 4
  %5 = fcmp ugt float %4, 0.000000e+00
  br i1 %5, label %6, label %42

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %0, i64 0, i32 1, i32 1
  %8 = load float, float* %7, align 4
  %9 = fcmp ugt float %8, 0.000000e+00
  br i1 %9, label %10, label %42

10:                                               ; preds = %6
  %11 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %1, i64 0, i32 1, i32 0
  %12 = load i32, i32* %11, align 4
  %13 = icmp slt i32 %12, 1
  br i1 %13, label %42, label %14

14:                                               ; preds = %10
  %15 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %1, i64 0, i32 1, i32 1
  %16 = load i32, i32* %15, align 4
  %17 = icmp slt i32 %16, 1
  br i1 %17, label %42, label %18

18:                                               ; preds = %14
  %19 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %0, i64 0, i32 0, i32 0
  %20 = load float, float* %19, align 4
  %21 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %1, i64 0, i32 0, i32 0
  %22 = load i32, i32* %21, align 4
  %23 = add nsw i32 %22, %12
  %24 = sitofp i32 %23 to float
  %25 = fcmp olt float %20, %24
  br i1 %25, label %26, label %42

26:                                               ; preds = %18
  %27 = sitofp i32 %22 to float
  %28 = fadd float %4, %20
  %29 = fcmp ogt float %28, %27
  br i1 %29, label %30, label %42

30:                                               ; preds = %26
  %31 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %0, i64 0, i32 0, i32 1
  %32 = load float, float* %31, align 4
  %33 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %1, i64 0, i32 0, i32 1
  %34 = load i32, i32* %33, align 4
  %35 = add nsw i32 %16, %34
  %36 = sitofp i32 %35 to float
  %37 = fcmp olt float %32, %36
  br i1 %37, label %38, label %42

38:                                               ; preds = %30
  %39 = sitofp i32 %34 to float
  %40 = fadd float %32, %8
  %41 = fcmp ogt float %40, %39
  br label %42

42:                                               ; preds = %6, %10, %2, %38, %30, %26, %18, %14
  %43 = phi i1 [ false, %30 ], [ false, %26 ], [ false, %18 ], [ false, %14 ], [ false, %6 ], [ %41, %38 ], [ false, %2 ], [ false, %10 ]
  ret i1 %43
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK5blink9FloatRect8ContainsERKNS_7IntRectE(%"class.blink::FloatRect"* nocapture readonly, %"class.blink::IntRect"* nocapture readonly dereferenceable(16)) local_unnamed_addr #3 align 2 {
  %3 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %0, i64 0, i32 0, i32 0
  %4 = load float, float* %3, align 4
  %5 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %1, i64 0, i32 0, i32 0
  %6 = load i32, i32* %5, align 4
  %7 = sitofp i32 %6 to float
  %8 = fcmp ugt float %4, %7
  br i1 %8, label %34, label %9

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %0, i64 0, i32 1, i32 0
  %11 = load float, float* %10, align 4
  %12 = fadd float %4, %11
  %13 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %1, i64 0, i32 1, i32 0
  %14 = load i32, i32* %13, align 4
  %15 = add nsw i32 %14, %6
  %16 = sitofp i32 %15 to float
  %17 = fcmp ult float %12, %16
  br i1 %17, label %34, label %18

18:                                               ; preds = %9
  %19 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %0, i64 0, i32 0, i32 1
  %20 = load float, float* %19, align 4
  %21 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %1, i64 0, i32 0, i32 1
  %22 = load i32, i32* %21, align 4
  %23 = sitofp i32 %22 to float
  %24 = fcmp ugt float %20, %23
  br i1 %24, label %34, label %25

25:                                               ; preds = %18
  %26 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %0, i64 0, i32 1, i32 1
  %27 = load float, float* %26, align 4
  %28 = fadd float %20, %27
  %29 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %1, i64 0, i32 1, i32 1
  %30 = load i32, i32* %29, align 4
  %31 = add nsw i32 %30, %22
  %32 = sitofp i32 %31 to float
  %33 = fcmp oge float %28, %32
  br label %34

34:                                               ; preds = %18, %9, %2, %25
  %35 = phi i1 [ false, %18 ], [ false, %9 ], [ false, %2 ], [ %33, %25 ]
  ret i1 %35
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK5blink9FloatRect8ContainsERKS0_(%"class.blink::FloatRect"* nocapture readonly, %"class.blink::FloatRect"* nocapture readonly dereferenceable(16)) local_unnamed_addr #3 align 2 {
  %3 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %0, i64 0, i32 0, i32 0
  %4 = load float, float* %3, align 4
  %5 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %1, i64 0, i32 0, i32 0
  %6 = load float, float* %5, align 4
  %7 = fcmp ugt float %4, %6
  br i1 %7, label %30, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %0, i64 0, i32 1, i32 0
  %10 = load float, float* %9, align 4
  %11 = fadd float %4, %10
  %12 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %1, i64 0, i32 1, i32 0
  %13 = load float, float* %12, align 4
  %14 = fadd float %6, %13
  %15 = fcmp ult float %11, %14
  br i1 %15, label %30, label %16

16:                                               ; preds = %8
  %17 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %0, i64 0, i32 0, i32 1
  %18 = load float, float* %17, align 4
  %19 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %1, i64 0, i32 0, i32 1
  %20 = load float, float* %19, align 4
  %21 = fcmp ugt float %18, %20
  br i1 %21, label %30, label %22

22:                                               ; preds = %16
  %23 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %0, i64 0, i32 1, i32 1
  %24 = load float, float* %23, align 4
  %25 = fadd float %18, %24
  %26 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %1, i64 0, i32 1, i32 1
  %27 = load float, float* %26, align 4
  %28 = fadd float %20, %27
  %29 = fcmp oge float %25, %28
  br label %30

30:                                               ; preds = %16, %8, %2, %22
  %31 = phi i1 [ false, %16 ], [ false, %8 ], [ false, %2 ], [ %29, %22 ]
  ret i1 %31
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK5blink9FloatRect8ContainsERKNS_10FloatPointENS0_12ContainsModeE(%"class.blink::FloatRect"* nocapture readonly, %"class.blink::FloatPoint"* nocapture readonly dereferenceable(8), i32) local_unnamed_addr #3 align 2 {
  %4 = icmp eq i32 %2, 0
  br i1 %4, label %5, label %27

5:                                                ; preds = %3
  %6 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %1, i64 0, i32 0
  %7 = load float, float* %6, align 4
  %8 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %1, i64 0, i32 1
  %9 = load float, float* %8, align 4
  %10 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %0, i64 0, i32 0, i32 0
  %11 = load float, float* %10, align 4
  %12 = fcmp ugt float %11, %7
  br i1 %12, label %49, label %13

13:                                               ; preds = %5
  %14 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %0, i64 0, i32 1, i32 0
  %15 = load float, float* %14, align 4
  %16 = fadd float %11, %15
  %17 = fcmp ult float %16, %7
  br i1 %17, label %49, label %18

18:                                               ; preds = %13
  %19 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %0, i64 0, i32 0, i32 1
  %20 = load float, float* %19, align 4
  %21 = fcmp ugt float %20, %9
  br i1 %21, label %49, label %22

22:                                               ; preds = %18
  %23 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %0, i64 0, i32 1, i32 1
  %24 = load float, float* %23, align 4
  %25 = fadd float %20, %24
  %26 = fcmp oge float %25, %9
  br label %49

27:                                               ; preds = %3
  %28 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %0, i64 0, i32 0, i32 0
  %29 = load float, float* %28, align 4
  %30 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %1, i64 0, i32 0
  %31 = load float, float* %30, align 4
  %32 = fcmp olt float %29, %31
  br i1 %32, label %33, label %49

33:                                               ; preds = %27
  %34 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %0, i64 0, i32 1, i32 0
  %35 = load float, float* %34, align 4
  %36 = fadd float %29, %35
  %37 = fcmp ogt float %36, %31
  br i1 %37, label %38, label %49

38:                                               ; preds = %33
  %39 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %0, i64 0, i32 0, i32 1
  %40 = load float, float* %39, align 4
  %41 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %1, i64 0, i32 1
  %42 = load float, float* %41, align 4
  %43 = fcmp olt float %40, %42
  br i1 %43, label %44, label %49

44:                                               ; preds = %38
  %45 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %0, i64 0, i32 1, i32 1
  %46 = load float, float* %45, align 4
  %47 = fadd float %40, %46
  %48 = fcmp ogt float %47, %42
  br label %49

49:                                               ; preds = %22, %18, %13, %5, %27, %33, %38, %44
  %50 = phi i1 [ false, %38 ], [ false, %33 ], [ false, %27 ], [ %48, %44 ], [ false, %18 ], [ false, %13 ], [ false, %5 ], [ %26, %22 ]
  ret i1 %50
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink9FloatRect9IntersectERKNS_7IntRectE(%"class.blink::FloatRect"* nocapture, %"class.blink::IntRect"* nocapture readonly dereferenceable(16)) local_unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %0, i64 0, i32 0, i32 0
  %4 = load float, float* %3, align 4
  %5 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %1, i64 0, i32 0, i32 0
  %6 = load i32, i32* %5, align 4
  %7 = sitofp i32 %6 to float
  %8 = fcmp olt float %4, %7
  %9 = select i1 %8, float %7, float %4
  %10 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %0, i64 0, i32 0, i32 1
  %11 = load float, float* %10, align 4
  %12 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %1, i64 0, i32 0, i32 1
  %13 = load i32, i32* %12, align 4
  %14 = sitofp i32 %13 to float
  %15 = fcmp olt float %11, %14
  %16 = select i1 %15, float %14, float %11
  %17 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %0, i64 0, i32 1, i32 0
  %18 = load float, float* %17, align 4
  %19 = fadd float %4, %18
  %20 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %1, i64 0, i32 1, i32 0
  %21 = load i32, i32* %20, align 4
  %22 = add nsw i32 %21, %6
  %23 = sitofp i32 %22 to float
  %24 = fcmp ogt float %19, %23
  %25 = select i1 %24, float %23, float %19
  %26 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %0, i64 0, i32 1, i32 1
  %27 = load float, float* %26, align 4
  %28 = fadd float %11, %27
  %29 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %1, i64 0, i32 1, i32 1
  %30 = load i32, i32* %29, align 4
  %31 = add nsw i32 %30, %13
  %32 = sitofp i32 %31 to float
  %33 = fcmp ogt float %28, %32
  %34 = select i1 %33, float %32, float %28
  %35 = fcmp ult float %9, %25
  %36 = fcmp ult float %16, %34
  %37 = and i1 %35, %36
  %38 = select i1 %37, float %9, float 0.000000e+00
  %39 = select i1 %37, float %16, float 0.000000e+00
  %40 = select i1 %37, float %25, float 0.000000e+00
  %41 = select i1 %37, float %34, float 0.000000e+00
  store float %38, float* %3, align 4
  store float %39, float* %10, align 4
  %42 = fsub float %40, %38
  store float %42, float* %17, align 4
  %43 = fsub float %41, %39
  store float %43, float* %26, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink9FloatRect9IntersectERKS0_(%"class.blink::FloatRect"* nocapture, %"class.blink::FloatRect"* nocapture readonly dereferenceable(16)) local_unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %0, i64 0, i32 0, i32 0
  %4 = load float, float* %3, align 4
  %5 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %1, i64 0, i32 0, i32 0
  %6 = load float, float* %5, align 4
  %7 = fcmp olt float %4, %6
  %8 = select i1 %7, float %6, float %4
  %9 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %0, i64 0, i32 0, i32 1
  %10 = load float, float* %9, align 4
  %11 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %1, i64 0, i32 0, i32 1
  %12 = load float, float* %11, align 4
  %13 = fcmp olt float %10, %12
  %14 = select i1 %13, float %12, float %10
  %15 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %0, i64 0, i32 1, i32 0
  %16 = load float, float* %15, align 4
  %17 = fadd float %4, %16
  %18 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %1, i64 0, i32 1, i32 0
  %19 = load float, float* %18, align 4
  %20 = fadd float %6, %19
  %21 = fcmp olt float %20, %17
  %22 = select i1 %21, float %20, float %17
  %23 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %0, i64 0, i32 1, i32 1
  %24 = load float, float* %23, align 4
  %25 = fadd float %10, %24
  %26 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %1, i64 0, i32 1, i32 1
  %27 = load float, float* %26, align 4
  %28 = fadd float %12, %27
  %29 = fcmp olt float %28, %25
  %30 = select i1 %29, float %28, float %25
  %31 = fcmp ult float %8, %22
  %32 = fcmp ult float %14, %30
  %33 = and i1 %31, %32
  %34 = select i1 %33, float %8, float 0.000000e+00
  %35 = select i1 %33, float %14, float 0.000000e+00
  %36 = select i1 %33, float %22, float 0.000000e+00
  %37 = select i1 %33, float %30, float 0.000000e+00
  store float %34, float* %3, align 4
  store float %35, float* %9, align 4
  %38 = fsub float %36, %34
  store float %38, float* %15, align 4
  %39 = fsub float %37, %35
  store float %39, float* %23, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN5blink9FloatRect18InclusiveIntersectERKS0_(%"class.blink::FloatRect"* nocapture, %"class.blink::FloatRect"* nocapture readonly dereferenceable(16)) local_unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %0, i64 0, i32 0, i32 0
  %4 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %0, i64 0, i32 0, i32 1
  %5 = bitcast %"class.blink::FloatRect"* %0 to <2 x float>*
  %6 = load <2 x float>, <2 x float>* %5, align 4
  %7 = bitcast %"class.blink::FloatRect"* %1 to <2 x float>*
  %8 = load <2 x float>, <2 x float>* %7, align 4
  %9 = fcmp olt <2 x float> %6, %8
  %10 = select <2 x i1> %9, <2 x float> %8, <2 x float> %6
  %11 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %0, i64 0, i32 1, i32 0
  %12 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %1, i64 0, i32 1, i32 0
  %13 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %0, i64 0, i32 1, i32 1
  %14 = bitcast float* %11 to <2 x float>*
  %15 = load <2 x float>, <2 x float>* %14, align 4
  %16 = fadd <2 x float> %6, %15
  %17 = bitcast float* %12 to <2 x float>*
  %18 = load <2 x float>, <2 x float>* %17, align 4
  %19 = fadd <2 x float> %8, %18
  %20 = fcmp olt <2 x float> %19, %16
  %21 = select <2 x i1> %20, <2 x float> %19, <2 x float> %16
  %22 = fcmp ogt <2 x float> %10, %21
  %23 = extractelement <2 x i1> %22, i32 0
  %24 = extractelement <2 x i1> %22, i32 1
  %25 = or i1 %23, %24
  br i1 %25, label %26, label %27

26:                                               ; preds = %2
  store float 0.000000e+00, float* %3, align 4
  store float 0.000000e+00, float* %4, align 4
  store float 0.000000e+00, float* %11, align 4
  br label %34

27:                                               ; preds = %2
  %28 = extractelement <2 x float> %10, i32 0
  store float %28, float* %3, align 4
  %29 = extractelement <2 x float> %10, i32 1
  store float %29, float* %4, align 4
  %30 = extractelement <2 x float> %21, i32 0
  %31 = fsub float %30, %28
  store float %31, float* %11, align 4
  %32 = extractelement <2 x float> %21, i32 1
  %33 = fsub float %32, %29
  br label %34

34:                                               ; preds = %27, %26
  %35 = phi float [ %33, %27 ], [ 0.000000e+00, %26 ]
  %36 = phi i1 [ true, %27 ], [ false, %26 ]
  store float %35, float* %13, align 4
  ret i1 %36
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink9FloatRect5UniteERKS0_(%"class.blink::FloatRect"* nocapture, %"class.blink::FloatRect"* nocapture readonly dereferenceable(16)) local_unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %1, i64 0, i32 1, i32 0
  %4 = load float, float* %3, align 4
  %5 = fcmp ugt float %4, 0.000000e+00
  br i1 %5, label %6, label %44

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %1, i64 0, i32 1, i32 1
  %8 = load float, float* %7, align 4
  %9 = fcmp ugt float %8, 0.000000e+00
  br i1 %9, label %10, label %44

10:                                               ; preds = %6
  %11 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %0, i64 0, i32 1, i32 0
  %12 = load float, float* %11, align 4
  %13 = fcmp ugt float %12, 0.000000e+00
  br i1 %13, label %14, label %18

14:                                               ; preds = %10
  %15 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %0, i64 0, i32 1, i32 1
  %16 = load float, float* %15, align 4
  %17 = fcmp ugt float %16, 0.000000e+00
  br i1 %17, label %21, label %18

18:                                               ; preds = %14, %10
  %19 = bitcast %"class.blink::FloatRect"* %0 to i8*
  %20 = bitcast %"class.blink::FloatRect"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %19, i8* align 4 %20, i64 16, i1 false)
  br label %44

21:                                               ; preds = %14
  %22 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %0, i64 0, i32 0, i32 0
  %23 = load float, float* %22, align 4
  %24 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %1, i64 0, i32 0, i32 0
  %25 = load float, float* %24, align 4
  %26 = fcmp olt float %25, %23
  %27 = select i1 %26, float %25, float %23
  %28 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %0, i64 0, i32 0, i32 1
  %29 = load float, float* %28, align 4
  %30 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %1, i64 0, i32 0, i32 1
  %31 = load float, float* %30, align 4
  %32 = fcmp olt float %31, %29
  %33 = select i1 %32, float %31, float %29
  %34 = fadd float %12, %23
  %35 = fadd float %4, %25
  %36 = fcmp olt float %34, %35
  %37 = select i1 %36, float %35, float %34
  %38 = fadd float %29, %16
  %39 = fadd float %31, %8
  %40 = fcmp olt float %38, %39
  %41 = select i1 %40, float %39, float %38
  store float %27, float* %22, align 4
  store float %33, float* %28, align 4
  %42 = fsub float %37, %27
  store float %42, float* %11, align 4
  %43 = fsub float %41, %33
  store float %43, float* %15, align 4
  br label %44

44:                                               ; preds = %6, %2, %21, %18
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink9FloatRect16UniteEvenIfEmptyERKS0_(%"class.blink::FloatRect"* nocapture, %"class.blink::FloatRect"* nocapture readonly dereferenceable(16)) local_unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %0, i64 0, i32 0, i32 0
  %4 = load float, float* %3, align 4
  %5 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %1, i64 0, i32 0, i32 0
  %6 = load float, float* %5, align 4
  %7 = fcmp olt float %6, %4
  %8 = select i1 %7, float %6, float %4
  %9 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %0, i64 0, i32 0, i32 1
  %10 = load float, float* %9, align 4
  %11 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %1, i64 0, i32 0, i32 1
  %12 = load float, float* %11, align 4
  %13 = fcmp olt float %12, %10
  %14 = select i1 %13, float %12, float %10
  %15 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %0, i64 0, i32 1, i32 0
  %16 = load float, float* %15, align 4
  %17 = fadd float %4, %16
  %18 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %1, i64 0, i32 1, i32 0
  %19 = load float, float* %18, align 4
  %20 = fadd float %6, %19
  %21 = fcmp olt float %17, %20
  %22 = select i1 %21, float %20, float %17
  %23 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %0, i64 0, i32 1, i32 1
  %24 = load float, float* %23, align 4
  %25 = fadd float %10, %24
  %26 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %1, i64 0, i32 1, i32 1
  %27 = load float, float* %26, align 4
  %28 = fadd float %12, %27
  %29 = fcmp olt float %25, %28
  %30 = select i1 %29, float %28, float %25
  store float %8, float* %3, align 4
  store float %14, float* %9, align 4
  %31 = fsub float %22, %8
  store float %31, float* %15, align 4
  %32 = fsub float %30, %14
  store float %32, float* %23, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink9FloatRect14UniteIfNonZeroERKS0_(%"class.blink::FloatRect"* nocapture, %"class.blink::FloatRect"* nocapture readonly dereferenceable(16)) local_unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %1, i64 0, i32 1, i32 0
  %4 = load float, float* %3, align 4
  %5 = fcmp ogt float %4, 0xBE80000000000000
  %6 = fcmp olt float %4, 0x3E80000000000000
  %7 = and i1 %5, %6
  br i1 %7, label %8, label %14

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %1, i64 0, i32 1, i32 1
  %10 = load float, float* %9, align 4
  %11 = fcmp ogt float %10, 0xBE80000000000000
  %12 = fcmp olt float %10, 0x3E80000000000000
  %13 = and i1 %11, %12
  br i1 %13, label %55, label %14

14:                                               ; preds = %2, %8
  %15 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %0, i64 0, i32 1, i32 0
  %16 = load float, float* %15, align 4
  %17 = fcmp ogt float %16, 0xBE80000000000000
  %18 = fcmp olt float %16, 0x3E80000000000000
  %19 = and i1 %17, %18
  %20 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %0, i64 0, i32 1, i32 1
  %21 = load float, float* %20, align 4
  br i1 %19, label %22, label %29

22:                                               ; preds = %14
  %23 = fcmp ogt float %21, 0xBE80000000000000
  %24 = fcmp olt float %21, 0x3E80000000000000
  %25 = and i1 %23, %24
  br i1 %25, label %26, label %29

26:                                               ; preds = %22
  %27 = bitcast %"class.blink::FloatRect"* %0 to i8*
  %28 = bitcast %"class.blink::FloatRect"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %27, i8* align 4 %28, i64 16, i1 false)
  br label %55

29:                                               ; preds = %14, %22
  %30 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %0, i64 0, i32 0, i32 0
  %31 = load float, float* %30, align 4
  %32 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %1, i64 0, i32 0, i32 0
  %33 = load float, float* %32, align 4
  %34 = fcmp olt float %33, %31
  %35 = select i1 %34, float %33, float %31
  %36 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %0, i64 0, i32 0, i32 1
  %37 = load float, float* %36, align 4
  %38 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %1, i64 0, i32 0, i32 1
  %39 = load float, float* %38, align 4
  %40 = fcmp olt float %39, %37
  %41 = select i1 %40, float %39, float %37
  %42 = fadd float %16, %31
  %43 = fadd float %4, %33
  %44 = fcmp olt float %42, %43
  %45 = select i1 %44, float %43, float %42
  %46 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %0, i64 0, i32 1, i32 1
  %47 = fadd float %37, %21
  %48 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %1, i64 0, i32 1, i32 1
  %49 = load float, float* %48, align 4
  %50 = fadd float %39, %49
  %51 = fcmp olt float %47, %50
  %52 = select i1 %51, float %50, float %47
  store float %35, float* %30, align 4
  store float %41, float* %36, align 4
  %53 = fsub float %45, %35
  store float %53, float* %15, align 4
  %54 = fsub float %52, %41
  store float %54, float* %46, align 4
  br label %55

55:                                               ; preds = %8, %29, %26
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink9FloatRect6ExtendERKNS_10FloatPointE(%"class.blink::FloatRect"* nocapture, %"class.blink::FloatPoint"* nocapture readonly dereferenceable(8)) local_unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %0, i64 0, i32 0, i32 0
  %4 = load float, float* %3, align 4
  %5 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %1, i64 0, i32 0
  %6 = load float, float* %5, align 4
  %7 = fcmp olt float %6, %4
  %8 = select i1 %7, float %6, float %4
  %9 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %0, i64 0, i32 0, i32 1
  %10 = load float, float* %9, align 4
  %11 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %1, i64 0, i32 1
  %12 = load float, float* %11, align 4
  %13 = fcmp olt float %12, %10
  %14 = select i1 %13, float %12, float %10
  %15 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %0, i64 0, i32 1, i32 0
  %16 = load float, float* %15, align 4
  %17 = fadd float %4, %16
  %18 = fcmp olt float %17, %6
  %19 = select i1 %18, float %6, float %17
  %20 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %0, i64 0, i32 1, i32 1
  %21 = load float, float* %20, align 4
  %22 = fadd float %10, %21
  %23 = fcmp olt float %22, %12
  %24 = select i1 %23, float %12, float %22
  store float %8, float* %3, align 4
  store float %14, float* %9, align 4
  %25 = fsub float %19, %8
  store float %25, float* %15, align 4
  %26 = fsub float %24, %14
  store float %26, float* %20, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5blink9FloatRect5ScaleEff(%"class.blink::FloatRect"* nocapture, float, float) local_unnamed_addr #5 align 2 {
  %4 = bitcast %"class.blink::FloatRect"* %0 to <4 x float>*
  %5 = load <4 x float>, <4 x float>* %4, align 4
  %6 = insertelement <2 x float> undef, float %1, i32 0
  %7 = insertelement <2 x float> %6, float %2, i32 1
  %8 = shufflevector <2 x float> %7, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %9 = fmul <4 x float> %5, %8
  %10 = bitcast %"class.blink::FloatRect"* %0 to <4 x float>*
  store <4 x float> %9, <4 x float>* %10, align 4
  ret void
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden float @_ZNK5blink9FloatRect17SquaredDistanceToERKNS_10FloatPointE(%"class.blink::FloatRect"* nocapture readonly, %"class.blink::FloatPoint"* nocapture readonly dereferenceable(8)) local_unnamed_addr #6 align 2 {
  %3 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %0, i64 0, i32 1, i32 0
  %4 = bitcast %"class.blink::FloatPoint"* %1 to <2 x float>*
  %5 = load <2 x float>, <2 x float>* %4, align 4
  %6 = bitcast %"class.blink::FloatRect"* %0 to <2 x float>*
  %7 = load <2 x float>, <2 x float>* %6, align 4
  %8 = bitcast float* %3 to <2 x float>*
  %9 = load <2 x float>, <2 x float>* %8, align 4
  %10 = fadd <2 x float> %7, %9
  %11 = fcmp ult <2 x float> %5, %10
  %12 = fcmp ole <2 x float> %5, %7
  %13 = select <2 x i1> %12, <2 x float> %7, <2 x float> %5
  %14 = select <2 x i1> %11, <2 x float> %13, <2 x float> %10
  %15 = fsub <2 x float> %5, %14
  %16 = fmul <2 x float> %15, %15
  %17 = extractelement <2 x float> %16, i32 0
  %18 = extractelement <2 x float> %16, i32 1
  %19 = fadd float %17, %18
  ret float %19
}

; Function Attrs: nounwind ssp uwtable
define hidden { <2 x float>, <2 x float> } @_ZN5blink9UnionRectERKN3WTF6VectorINS_9FloatRectELj0ENS0_18PartitionAllocatorEEE(%"class.WTF::Vector"* nocapture readonly dereferenceable(16)) local_unnamed_addr #4 {
  %2 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %3 = load %"class.blink::FloatRect"*, %"class.blink::FloatRect"** %2, align 8
  %4 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %5 = load i32, i32* %4, align 4
  %6 = zext i32 %5 to i64
  %7 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %3, i64 %6
  %8 = icmp eq i32 %5, 0
  br i1 %8, label %9, label %14

9:                                                ; preds = %47, %1
  %10 = phi <2 x float> [ zeroinitializer, %1 ], [ %48, %47 ]
  %11 = phi <2 x float> [ zeroinitializer, %1 ], [ %49, %47 ]
  %12 = insertvalue { <2 x float>, <2 x float> } undef, <2 x float> %11, 0
  %13 = insertvalue { <2 x float>, <2 x float> } %12, <2 x float> %10, 1
  ret { <2 x float>, <2 x float> } %13

14:                                               ; preds = %1, %47
  %15 = phi %"class.blink::FloatRect"* [ %50, %47 ], [ %3, %1 ]
  %16 = phi <2 x float> [ %49, %47 ], [ zeroinitializer, %1 ]
  %17 = phi <2 x float> [ %48, %47 ], [ zeroinitializer, %1 ]
  %18 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %15, i64 0, i32 1, i32 0
  %19 = load float, float* %18, align 4
  %20 = fcmp ugt float %19, 0.000000e+00
  br i1 %20, label %21, label %47

21:                                               ; preds = %14
  %22 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %15, i64 0, i32 1, i32 1
  %23 = load float, float* %22, align 4
  %24 = fcmp ugt float %23, 0.000000e+00
  br i1 %24, label %25, label %47

25:                                               ; preds = %21
  %26 = extractelement <2 x float> %17, i32 0
  %27 = fcmp ugt float %26, 0.000000e+00
  %28 = extractelement <2 x float> %17, i32 1
  %29 = fcmp ugt float %28, 0.000000e+00
  %30 = and i1 %27, %29
  %31 = bitcast %"class.blink::FloatRect"* %15 to <2 x float>*
  %32 = load <2 x float>, <2 x float>* %31, align 4
  br i1 %30, label %37, label %33

33:                                               ; preds = %25
  %34 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %15, i64 0, i32 1
  %35 = bitcast %"class.blink::FloatSize"* %34 to <2 x float>*
  %36 = load <2 x float>, <2 x float>* %35, align 4
  br label %47

37:                                               ; preds = %25
  %38 = fcmp olt <2 x float> %32, %16
  %39 = select <2 x i1> %38, <2 x float> %32, <2 x float> %16
  %40 = fadd <2 x float> %17, %16
  %41 = insertelement <2 x float> undef, float %19, i32 0
  %42 = insertelement <2 x float> %41, float %23, i32 1
  %43 = fadd <2 x float> %42, %32
  %44 = fcmp olt <2 x float> %40, %43
  %45 = select <2 x i1> %44, <2 x float> %43, <2 x float> %40
  %46 = fsub <2 x float> %45, %39
  br label %47

47:                                               ; preds = %14, %21, %33, %37
  %48 = phi <2 x float> [ %46, %37 ], [ %36, %33 ], [ %17, %21 ], [ %17, %14 ]
  %49 = phi <2 x float> [ %39, %37 ], [ %32, %33 ], [ %16, %21 ], [ %16, %14 ]
  %50 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %15, i64 1
  %51 = icmp eq %"class.blink::FloatRect"* %50, %7
  br i1 %51, label %9, label %14
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden { i64, i64 } @_ZN5blink15EnclosedIntRectERKNS_9FloatRectE(%"class.blink::FloatRect"* nocapture readonly dereferenceable(16)) local_unnamed_addr #6 {
  %2 = bitcast %"class.blink::FloatRect"* %0 to <2 x float>*
  %3 = load <2 x float>, <2 x float>* %2, align 4
  %4 = extractelement <2 x float> %3, i32 0
  %5 = tail call float @llvm.ceil.f32(float %4) #11
  %6 = fpext float %5 to double
  %7 = fcmp ult double %6, 0x41DFFFFFFFC00000
  %8 = extractelement <2 x float> %3, i32 0
  br i1 %7, label %9, label %14

9:                                                ; preds = %1
  %10 = fcmp ugt float %5, 0xC1E0000000000000
  br i1 %10, label %11, label %14

11:                                               ; preds = %9
  %12 = fptosi float %5 to i32
  %13 = zext i32 %12 to i64
  br label %14

14:                                               ; preds = %11, %9, %1
  %15 = phi i64 [ %13, %11 ], [ 2147483647, %1 ], [ 2147483648, %9 ]
  %16 = extractelement <2 x float> %3, i32 1
  %17 = tail call float @llvm.ceil.f32(float %16) #11
  %18 = fpext float %17 to double
  %19 = fcmp ult double %18, 0x41DFFFFFFFC00000
  br i1 %19, label %20, label %26

20:                                               ; preds = %14
  %21 = fcmp ugt float %17, 0xC1E0000000000000
  br i1 %21, label %22, label %26

22:                                               ; preds = %20
  %23 = fptosi float %17 to i32
  %24 = zext i32 %23 to i64
  %25 = shl nuw i64 %24, 32
  br label %26

26:                                               ; preds = %14, %20, %22
  %27 = phi i64 [ %25, %22 ], [ 9223372032559808512, %14 ], [ -9223372036854775808, %20 ]
  %28 = trunc i64 %15 to i32
  %29 = lshr exact i64 %27, 32
  %30 = trunc i64 %29 to i32
  %31 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %0, i64 0, i32 1, i32 0
  %32 = load float, float* %31, align 4
  %33 = fadd float %8, %32
  %34 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %0, i64 0, i32 0, i32 1
  %35 = load float, float* %34, align 4
  %36 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %0, i64 0, i32 1, i32 1
  %37 = load float, float* %36, align 4
  %38 = fadd float %35, %37
  %39 = tail call float @llvm.floor.f32(float %33) #11
  %40 = fpext float %39 to double
  %41 = fcmp ult double %40, 0x41DFFFFFFFC00000
  br i1 %41, label %42, label %46

42:                                               ; preds = %26
  %43 = fcmp ugt float %39, 0xC1E0000000000000
  br i1 %43, label %44, label %46

44:                                               ; preds = %42
  %45 = fptosi float %39 to i32
  br label %46

46:                                               ; preds = %44, %42, %26
  %47 = phi i32 [ %45, %44 ], [ 2147483647, %26 ], [ -2147483648, %42 ]
  %48 = tail call float @llvm.floor.f32(float %38) #11
  %49 = fpext float %48 to double
  %50 = fcmp ult double %49, 0x41DFFFFFFFC00000
  br i1 %50, label %51, label %55

51:                                               ; preds = %46
  %52 = fcmp ugt float %48, 0xC1E0000000000000
  br i1 %52, label %53, label %55

53:                                               ; preds = %51
  %54 = fptosi float %48 to i32
  br label %55

55:                                               ; preds = %46, %51, %53
  %56 = phi i32 [ %54, %53 ], [ 2147483647, %46 ], [ -2147483648, %51 ]
  %57 = icmp sgt i32 %28, -1
  %58 = select i1 %57, i32 -2147483648, i32 2147483647
  %59 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %47, i32 %28) #11
  %60 = extractvalue { i32, i1 } %59, 1
  %61 = extractvalue { i32, i1 } %59, 0
  %62 = select i1 %60, i32 %58, i32 %61, !prof !2
  %63 = icmp sgt i32 %30, -1
  %64 = select i1 %63, i32 -2147483648, i32 2147483647
  %65 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %56, i32 %30) #11
  %66 = extractvalue { i32, i1 } %65, 1
  %67 = extractvalue { i32, i1 } %65, 0
  %68 = select i1 %66, i32 %64, i32 %67, !prof !2
  %69 = icmp sgt i32 %62, 0
  %70 = select i1 %69, i32 %62, i32 0
  %71 = icmp sgt i32 %68, 0
  %72 = select i1 %71, i32 %68, i32 0
  %73 = zext i32 %72 to i64
  %74 = shl nuw nsw i64 %73, 32
  %75 = or i64 %27, %15
  %76 = zext i32 %70 to i64
  %77 = or i64 %74, %76
  %78 = insertvalue { i64, i64 } undef, i64 %75, 0
  %79 = insertvalue { i64, i64 } %78, i64 %77, 1
  ret { i64, i64 } %79
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden { i64, i64 } @_ZN5blink14RoundedIntRectERKNS_9FloatRectE(%"class.blink::FloatRect"* nocapture readonly dereferenceable(16)) local_unnamed_addr #6 {
  %2 = bitcast %"class.blink::FloatRect"* %0 to <2 x float>*
  %3 = load <2 x float>, <2 x float>* %2, align 4
  %4 = extractelement <2 x float> %3, i32 0
  %5 = tail call float @llvm.round.f32(float %4) #11
  %6 = fpext float %5 to double
  %7 = fcmp ult double %6, 0x41DFFFFFFFC00000
  br i1 %7, label %8, label %13

8:                                                ; preds = %1
  %9 = fcmp ugt float %5, 0xC1E0000000000000
  br i1 %9, label %10, label %13

10:                                               ; preds = %8
  %11 = fptosi float %5 to i32
  %12 = zext i32 %11 to i64
  br label %13

13:                                               ; preds = %10, %8, %1
  %14 = phi i64 [ %12, %10 ], [ 2147483647, %1 ], [ 2147483648, %8 ]
  %15 = extractelement <2 x float> %3, i32 1
  %16 = tail call float @llvm.round.f32(float %15) #11
  %17 = fpext float %16 to double
  %18 = fcmp ult double %17, 0x41DFFFFFFFC00000
  br i1 %18, label %19, label %25

19:                                               ; preds = %13
  %20 = fcmp ugt float %16, 0xC1E0000000000000
  br i1 %20, label %21, label %25

21:                                               ; preds = %19
  %22 = fptosi float %16 to i32
  %23 = zext i32 %22 to i64
  %24 = shl nuw i64 %23, 32
  br label %25

25:                                               ; preds = %13, %19, %21
  %26 = phi i64 [ %24, %21 ], [ 9223372032559808512, %13 ], [ -9223372036854775808, %19 ]
  %27 = or i64 %26, %14
  %28 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %0, i64 0, i32 1
  %29 = bitcast %"class.blink::FloatSize"* %28 to <2 x float>*
  %30 = load <2 x float>, <2 x float>* %29, align 4
  %31 = extractelement <2 x float> %30, i32 0
  %32 = tail call float @llvm.round.f32(float %31) #11
  %33 = fpext float %32 to double
  %34 = fcmp ult double %33, 0x41DFFFFFFFC00000
  br i1 %34, label %35, label %40

35:                                               ; preds = %25
  %36 = fcmp ugt float %32, 0xC1E0000000000000
  br i1 %36, label %37, label %40

37:                                               ; preds = %35
  %38 = fptosi float %32 to i32
  %39 = zext i32 %38 to i64
  br label %40

40:                                               ; preds = %37, %35, %25
  %41 = phi i64 [ %39, %37 ], [ 2147483647, %25 ], [ 2147483648, %35 ]
  %42 = extractelement <2 x float> %30, i32 1
  %43 = tail call float @llvm.round.f32(float %42) #11
  %44 = fpext float %43 to double
  %45 = fcmp ult double %44, 0x41DFFFFFFFC00000
  br i1 %45, label %46, label %52

46:                                               ; preds = %40
  %47 = fcmp ugt float %43, 0xC1E0000000000000
  br i1 %47, label %48, label %52

48:                                               ; preds = %46
  %49 = fptosi float %43 to i32
  %50 = zext i32 %49 to i64
  %51 = shl nuw i64 %50, 32
  br label %52

52:                                               ; preds = %40, %46, %48
  %53 = phi i64 [ %51, %48 ], [ 9223372032559808512, %40 ], [ -9223372036854775808, %46 ]
  %54 = or i64 %53, %41
  %55 = insertvalue { i64, i64 } undef, i64 %27, 0
  %56 = insertvalue { i64, i64 } %55, i64 %54, 1
  ret { i64, i64 } %56
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden { <2 x float>, <2 x float> } @_ZN5blink7MapRectERKNS_9FloatRectES2_S2_(%"class.blink::FloatRect"* nocapture readonly dereferenceable(16), %"class.blink::FloatRect"* nocapture readonly dereferenceable(16), %"class.blink::FloatRect"* nocapture readonly dereferenceable(16)) local_unnamed_addr #1 {
  %4 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %1, i64 0, i32 1, i32 0
  %5 = load float, float* %4, align 4
  %6 = fcmp une float %5, 0.000000e+00
  br i1 %6, label %7, label %31

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %1, i64 0, i32 1, i32 1
  %9 = load float, float* %8, align 4
  %10 = fcmp une float %9, 0.000000e+00
  br i1 %10, label %11, label %31

11:                                               ; preds = %7
  %12 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %2, i64 0, i32 1, i32 0
  %13 = bitcast float* %12 to <2 x float>*
  %14 = load <2 x float>, <2 x float>* %13, align 4
  %15 = insertelement <2 x float> undef, float %5, i32 0
  %16 = insertelement <2 x float> %15, float %9, i32 1
  %17 = fdiv <2 x float> %14, %16
  %18 = bitcast %"class.blink::FloatRect"* %2 to <2 x float>*
  %19 = load <2 x float>, <2 x float>* %18, align 4
  %20 = bitcast %"class.blink::FloatRect"* %0 to <2 x float>*
  %21 = load <2 x float>, <2 x float>* %20, align 4
  %22 = bitcast %"class.blink::FloatRect"* %1 to <2 x float>*
  %23 = load <2 x float>, <2 x float>* %22, align 4
  %24 = fsub <2 x float> %21, %23
  %25 = fmul <2 x float> %17, %24
  %26 = fadd <2 x float> %19, %25
  %27 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %0, i64 0, i32 1, i32 0
  %28 = bitcast float* %27 to <2 x float>*
  %29 = load <2 x float>, <2 x float>* %28, align 4
  %30 = fmul <2 x float> %17, %29
  br label %31

31:                                               ; preds = %3, %7, %11
  %32 = phi <2 x float> [ %30, %11 ], [ zeroinitializer, %7 ], [ zeroinitializer, %3 ]
  %33 = phi <2 x float> [ %26, %11 ], [ zeroinitializer, %7 ], [ zeroinitializer, %3 ]
  %34 = insertvalue { <2 x float>, <2 x float> } undef, <2 x float> %33, 0
  %35 = insertvalue { <2 x float>, <2 x float> } %34, <2 x float> %32, 1
  ret { <2 x float>, <2 x float> } %35
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN5blinklsERNSt3__113basic_ostreamIcNS0_11char_traitsIcEEEERKNS_9FloatRectE(%"class.std::__1::basic_ostream"* dereferenceable(160), %"class.blink::FloatRect"* nocapture readonly dereferenceable(16)) local_unnamed_addr #4 {
  %3 = alloca %"class.WTF::String", align 8
  %4 = bitcast %"class.WTF::String"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %4) #11
  %5 = tail call %"class.WTF::StringImpl"* @_ZNK5blink9FloatRect8ToStringEv(%"class.blink::FloatRect"* %1)
  %6 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %3, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %5, %"class.WTF::StringImpl"** %6, align 8
  %7 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN3WTFlsERNSt3__113basic_ostreamIcNS0_11char_traitsIcEEEERKNS_6StringE(%"class.std::__1::basic_ostream"* dereferenceable(160) %0, %"class.WTF::String"* nonnull dereferenceable(8) %3) #11
  %8 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %6, align 8
  %9 = icmp eq %"class.WTF::StringImpl"* %8, null
  br i1 %9, label %23, label %10

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %12 = load atomic i32, i32* %11 monotonic, align 4
  %13 = and i32 %12, 2
  %14 = icmp eq i32 %13, 0
  %15 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 0
  %16 = load i32, i32* %15, align 4
  br i1 %14, label %17, label %19

17:                                               ; preds = %10
  %18 = add i32 %16, -1
  store i32 %18, i32* %15, align 4
  br label %19

19:                                               ; preds = %17, %10
  %20 = phi i32 [ %18, %17 ], [ %16, %10 ]
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %23

22:                                               ; preds = %19
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %8) #11
  br label %23

23:                                               ; preds = %2, %19, %22
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %4) #11
  ret %"class.std::__1::basic_ostream"* %7
}

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN3WTFlsERNSt3__113basic_ostreamIcNS0_11char_traitsIcEEEERKNS_6StringE(%"class.std::__1::basic_ostream"* dereferenceable(160), %"class.WTF::String"* dereferenceable(8)) local_unnamed_addr #7

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZNK5blink9FloatRect8ToStringEv(%"class.blink::FloatRect"* nocapture readonly) local_unnamed_addr #8 align 2 {
  %2 = alloca %"class.std::__1::basic_string", align 8
  %3 = alloca %"class.WTF::String", align 8
  %4 = alloca <2 x float>, align 8
  %5 = bitcast <2 x float>* %4 to %"class.blink::FloatPoint"*
  %6 = alloca %"class.std::__1::basic_string", align 8
  %7 = alloca %"class.WTF::String", align 8
  %8 = alloca <2 x float>, align 8
  %9 = bitcast <2 x float>* %8 to %"class.blink::FloatSize"*
  %10 = bitcast %"class.std::__1::basic_string"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %10) #11
  %11 = bitcast %"class.WTF::String"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11) #11
  %12 = bitcast <2 x float>* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %12) #11
  %13 = bitcast %"class.blink::FloatRect"* %0 to i64*
  %14 = load i64, i64* %13, align 4
  %15 = bitcast <2 x float>* %4 to i64*
  store i64 %14, i64* %15, align 8
  %16 = call %"class.WTF::StringImpl"* @_ZNK5blink10FloatPoint8ToStringEv(%"class.blink::FloatPoint"* nonnull %5) #11
  %17 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %3, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %16, %"class.WTF::StringImpl"** %17, align 8
  call void @_ZNK3WTF6String5AsciiEv(%"class.std::__1::basic_string"* nonnull sret %2, %"class.WTF::String"* nonnull %3) #11
  %18 = bitcast %"class.std::__1::basic_string"* %2 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %19 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %18, i64 0, i32 1, i32 0
  %20 = load i8, i8* %19, align 1
  %21 = icmp slt i8 %20, 0
  %22 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %23 = load i8*, i8** %22, align 8
  %24 = select i1 %21, i8* %23, i8* %10
  %25 = bitcast %"class.std::__1::basic_string"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %25) #11
  %26 = bitcast %"class.WTF::String"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %26) #11
  %27 = bitcast <2 x float>* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %27) #11
  %28 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %0, i64 0, i32 1
  %29 = bitcast %"class.blink::FloatSize"* %28 to i64*
  %30 = load i64, i64* %29, align 4
  %31 = bitcast <2 x float>* %8 to i64*
  store i64 %30, i64* %31, align 8
  %32 = call %"class.WTF::StringImpl"* @_ZNK5blink9FloatSize8ToStringEv(%"class.blink::FloatSize"* nonnull %9) #11
  %33 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %7, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %32, %"class.WTF::StringImpl"** %33, align 8
  call void @_ZNK3WTF6String5AsciiEv(%"class.std::__1::basic_string"* nonnull sret %6, %"class.WTF::String"* nonnull %7) #11
  %34 = bitcast %"class.std::__1::basic_string"* %6 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %35 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %34, i64 0, i32 1, i32 0
  %36 = load i8, i8* %35, align 1
  %37 = icmp slt i8 %36, 0
  %38 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %39 = load i8*, i8** %38, align 8
  %40 = select i1 %37, i8* %39, i8* %25
  %41 = call %"class.WTF::StringImpl"* (i8*, ...) @_ZN3WTF6String6FormatEPKcz(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i64 0, i64 0), i8* %24, i8* %40) #11
  %42 = load i8, i8* %35, align 1
  %43 = icmp slt i8 %42, 0
  br i1 %43, label %44, label %46

44:                                               ; preds = %1
  %45 = load i8*, i8** %38, align 8
  call void @_ZdlPv(i8* %45) #12
  br label %46

46:                                               ; preds = %1, %44
  %47 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %33, align 8
  %48 = icmp eq %"class.WTF::StringImpl"* %47, null
  br i1 %48, label %62, label %49

49:                                               ; preds = %46
  %50 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %47, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %51 = load atomic i32, i32* %50 monotonic, align 4
  %52 = and i32 %51, 2
  %53 = icmp eq i32 %52, 0
  %54 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %47, i64 0, i32 0
  %55 = load i32, i32* %54, align 4
  br i1 %53, label %56, label %58

56:                                               ; preds = %49
  %57 = add i32 %55, -1
  store i32 %57, i32* %54, align 4
  br label %58

58:                                               ; preds = %56, %49
  %59 = phi i32 [ %57, %56 ], [ %55, %49 ]
  %60 = icmp eq i32 %59, 0
  br i1 %60, label %61, label %62

61:                                               ; preds = %58
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %47) #11
  br label %62

62:                                               ; preds = %46, %58, %61
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %27) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %26) #11
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %25) #11
  %63 = load i8, i8* %19, align 1
  %64 = icmp slt i8 %63, 0
  br i1 %64, label %65, label %67

65:                                               ; preds = %62
  %66 = load i8*, i8** %22, align 8
  call void @_ZdlPv(i8* %66) #12
  br label %67

67:                                               ; preds = %62, %65
  %68 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %17, align 8
  %69 = icmp eq %"class.WTF::StringImpl"* %68, null
  br i1 %69, label %83, label %70

70:                                               ; preds = %67
  %71 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %68, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %72 = load atomic i32, i32* %71 monotonic, align 4
  %73 = and i32 %72, 2
  %74 = icmp eq i32 %73, 0
  %75 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %68, i64 0, i32 0
  %76 = load i32, i32* %75, align 4
  br i1 %74, label %77, label %79

77:                                               ; preds = %70
  %78 = add i32 %76, -1
  store i32 %78, i32* %75, align 4
  br label %79

79:                                               ; preds = %77, %70
  %80 = phi i32 [ %78, %77 ], [ %76, %70 ]
  %81 = icmp eq i32 %80, 0
  br i1 %81, label %82, label %83

82:                                               ; preds = %79
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %68) #11
  br label %83

83:                                               ; preds = %67, %79, %82
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %12) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11) #11
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %10) #11
  ret %"class.WTF::StringImpl"* %41
}

declare %"class.WTF::StringImpl"* @_ZN3WTF6String6FormatEPKcz(i8*, ...) local_unnamed_addr #7

declare %"class.WTF::StringImpl"* @_ZNK5blink10FloatPoint8ToStringEv(%"class.blink::FloatPoint"*) local_unnamed_addr #7

declare void @_ZNK3WTF6String5AsciiEv(%"class.std::__1::basic_string"* sret, %"class.WTF::String"*) local_unnamed_addr #7

declare %"class.WTF::StringImpl"* @_ZNK5blink9FloatSize8ToStringEv(%"class.blink::FloatSize"*) local_unnamed_addr #7

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(48) %"class.WTF::TextStream"* @_ZN5blinklsERN3WTF10TextStreamERKNS_9FloatRectE(%"class.WTF::TextStream"* returned dereferenceable(48), %"class.blink::FloatRect"* nocapture readonly dereferenceable(16)) local_unnamed_addr #4 {
  %3 = alloca %"struct.WTF::TextStream::FormatNumberRespectingIntegers", align 8
  %4 = alloca %"struct.WTF::TextStream::FormatNumberRespectingIntegers", align 8
  %5 = alloca %"struct.WTF::TextStream::FormatNumberRespectingIntegers", align 8
  %6 = alloca %"struct.WTF::TextStream::FormatNumberRespectingIntegers", align 8
  %7 = tail call dereferenceable(48) %"class.WTF::TextStream"* @_ZN3WTF10TextStreamlsEPKc(%"class.WTF::TextStream"* %0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0)) #11
  %8 = bitcast %"struct.WTF::TextStream::FormatNumberRespectingIntegers"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %8) #11
  %9 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %1, i64 0, i32 0, i32 0
  %10 = load float, float* %9, align 4
  %11 = fpext float %10 to double
  %12 = getelementptr inbounds %"struct.WTF::TextStream::FormatNumberRespectingIntegers", %"struct.WTF::TextStream::FormatNumberRespectingIntegers"* %3, i64 0, i32 0
  store double %11, double* %12, align 8
  %13 = call dereferenceable(48) %"class.WTF::TextStream"* @_ZN3WTF10TextStreamlsERKNS0_30FormatNumberRespectingIntegersE(%"class.WTF::TextStream"* %7, %"struct.WTF::TextStream::FormatNumberRespectingIntegers"* nonnull dereferenceable(8) %3) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %8) #11
  %14 = call dereferenceable(48) %"class.WTF::TextStream"* @_ZN3WTF10TextStreamlsEPKc(%"class.WTF::TextStream"* %0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)) #11
  %15 = bitcast %"struct.WTF::TextStream::FormatNumberRespectingIntegers"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %15) #11
  %16 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %1, i64 0, i32 0, i32 1
  %17 = load float, float* %16, align 4
  %18 = fpext float %17 to double
  %19 = getelementptr inbounds %"struct.WTF::TextStream::FormatNumberRespectingIntegers", %"struct.WTF::TextStream::FormatNumberRespectingIntegers"* %4, i64 0, i32 0
  store double %18, double* %19, align 8
  %20 = call dereferenceable(48) %"class.WTF::TextStream"* @_ZN3WTF10TextStreamlsERKNS0_30FormatNumberRespectingIntegersE(%"class.WTF::TextStream"* %14, %"struct.WTF::TextStream::FormatNumberRespectingIntegers"* nonnull dereferenceable(8) %4) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %15) #11
  %21 = call dereferenceable(48) %"class.WTF::TextStream"* @_ZN3WTF10TextStreamlsEPKc(%"class.WTF::TextStream"* %0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3, i64 0, i64 0)) #11
  %22 = bitcast %"struct.WTF::TextStream::FormatNumberRespectingIntegers"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %22) #11
  %23 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %1, i64 0, i32 1, i32 0
  %24 = load float, float* %23, align 4
  %25 = fpext float %24 to double
  %26 = getelementptr inbounds %"struct.WTF::TextStream::FormatNumberRespectingIntegers", %"struct.WTF::TextStream::FormatNumberRespectingIntegers"* %5, i64 0, i32 0
  store double %25, double* %26, align 8
  %27 = call dereferenceable(48) %"class.WTF::TextStream"* @_ZN3WTF10TextStreamlsERKNS0_30FormatNumberRespectingIntegersE(%"class.WTF::TextStream"* %21, %"struct.WTF::TextStream::FormatNumberRespectingIntegers"* nonnull dereferenceable(8) %5) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %22) #11
  %28 = call dereferenceable(48) %"class.WTF::TextStream"* @_ZN3WTF10TextStreamlsEPKc(%"class.WTF::TextStream"* %0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)) #11
  %29 = bitcast %"struct.WTF::TextStream::FormatNumberRespectingIntegers"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %29) #11
  %30 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %1, i64 0, i32 1, i32 1
  %31 = load float, float* %30, align 4
  %32 = fpext float %31 to double
  %33 = getelementptr inbounds %"struct.WTF::TextStream::FormatNumberRespectingIntegers", %"struct.WTF::TextStream::FormatNumberRespectingIntegers"* %6, i64 0, i32 0
  store double %32, double* %33, align 8
  %34 = call dereferenceable(48) %"class.WTF::TextStream"* @_ZN3WTF10TextStreamlsERKNS0_30FormatNumberRespectingIntegersE(%"class.WTF::TextStream"* %28, %"struct.WTF::TextStream::FormatNumberRespectingIntegers"* nonnull dereferenceable(8) %6) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %29) #11
  ret %"class.WTF::TextStream"* %0
}

declare dereferenceable(48) %"class.WTF::TextStream"* @_ZN3WTF10TextStreamlsEPKc(%"class.WTF::TextStream"*, i8*) local_unnamed_addr #7

declare dereferenceable(48) %"class.WTF::TextStream"* @_ZN3WTF10TextStreamlsERKNS0_30FormatNumberRespectingIntegersE(%"class.WTF::TextStream"*, %"struct.WTF::TextStream::FormatNumberRespectingIntegers"* dereferenceable(8)) local_unnamed_addr #7

; Function Attrs: nounwind readnone speculatable
declare float @llvm.ceil.f32(float) #9

; Function Attrs: nounwind readnone speculatable
declare float @llvm.floor.f32(float) #9

; Function Attrs: nounwind readnone speculatable
declare { i32, i1 } @llvm.ssub.with.overflow.i32(i32, i32) #9

; Function Attrs: nounwind readnone speculatable
declare float @llvm.round.f32(float) #9

declare void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"*) local_unnamed_addr #7

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #10

attributes #0 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="64" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="64" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind readnone speculatable }
attributes #10 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nounwind }
attributes #12 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
