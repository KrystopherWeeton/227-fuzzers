; ModuleID = '../../third_party/libaom/source/libaom/aom_dsp/x86/intrapred_avx2.c'
source_filename = "../../third_party/libaom/source/libaom/aom_dsp/x86/intrapred_avx2.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@HighbdEvenOddMaskx4 = internal unnamed_addr constant [4 x [16 x i8]] [[16 x i8] c"\00\01\04\05\08\09\0C\0D\02\03\06\07\0A\0B\0E\0F", [16 x i8] c"\00\01\02\03\06\07\0A\0B\0E\0F\04\05\08\09\0C\0D", [16 x i8] c"\00\01\00\01\04\05\08\09\0C\0D\00\01\06\07\0A\0B", [16 x i8] c"\00\01\00\01\00\01\06\07\0A\0B\0E\0F\00\01\08\09"], align 16
@HighbdEvenOddMaskx = internal unnamed_addr constant [8 x [32 x i8]] [[32 x i8] c"\00\01\04\05\08\09\0C\0D\10\11\14\15\18\19\1C\1D\02\03\06\07\0A\0B\0E\0F\12\13\16\17\1A\1B\1E\1F", [32 x i8] c"\00\01\02\03\06\07\0A\0B\0E\0F\12\13\16\17\1A\1B\00\01\04\05\08\09\0C\0D\10\11\14\15\18\19\1C\1D", [32 x i8] c"\00\01\00\01\04\05\08\09\0C\0D\10\11\14\15\18\19\00\01\00\01\06\07\0A\0B\0E\0F\12\13\16\17\1A\1B", [32 x i8] c"\00\01\00\01\00\01\06\07\0A\0B\0E\0F\12\13\16\17\00\01\00\01\00\01\08\09\0C\0D\10\11\14\15\18\19", [32 x i8] c"\00\01\00\01\00\01\00\01\08\09\0C\0D\10\11\14\15\00\01\00\01\00\01\00\01\0A\0B\0E\0F\12\13\16\17", [32 x i8] c"\00\01\00\01\00\01\00\01\00\01\0A\0B\0E\0F\12\13\00\01\00\01\00\01\00\01\00\01\0C\0D\10\11\14\15", [32 x i8] c"\00\01\00\01\00\01\00\01\00\01\00\01\0C\0D\10\11\00\01\00\01\00\01\00\01\00\01\00\01\0E\0F\12\13", [32 x i8] c"\00\01\00\01\00\01\00\01\00\01\00\01\00\01\0E\0F\00\01\00\01\00\01\00\01\00\01\00\01\00\01\10\11"], align 16
@HighbdLoadMaskx = internal unnamed_addr constant [8 x [16 x i8]] [[16 x i8] c"\00\01\02\03\04\05\06\07\08\09\0A\0B\0C\0D\0E\0F", [16 x i8] c"\00\01\00\01\02\03\04\05\06\07\08\09\0A\0B\0C\0D", [16 x i8] c"\00\01\00\01\00\01\02\03\04\05\06\07\08\09\0A\0B", [16 x i8] c"\00\01\00\01\00\01\00\01\02\03\04\05\06\07\08\09", [16 x i8] c"\00\01\00\01\00\01\00\01\00\01\02\03\04\05\06\07", [16 x i8] c"\00\01\00\01\00\01\00\01\00\01\00\01\02\03\04\05", [16 x i8] c"\00\01\00\01\00\01\00\01\00\01\00\01\00\01\02\03", [16 x i8] c"\00\01\00\01\00\01\00\01\00\01\00\01\00\01\00\01"], align 16
@HighbdBaseMask = internal unnamed_addr constant <{ [16 x i16], <{ i16, [15 x i16] }>, <{ i16, i16, [14 x i16] }>, <{ i16, i16, i16, [13 x i16] }>, <{ i16, i16, i16, i16, [12 x i16] }>, <{ i16, i16, i16, i16, i16, [11 x i16] }>, <{ i16, i16, i16, i16, i16, i16, [10 x i16] }>, <{ i16, i16, i16, i16, i16, i16, i16, [9 x i16] }>, <{ [8 x i16], [8 x i16] }>, [16 x i16], [16 x i16], [16 x i16], [16 x i16], [16 x i16], [16 x i16], [16 x i16], [16 x i16] }> <{ [16 x i16] zeroinitializer, <{ i16, [15 x i16] }> <{ i16 -1, [15 x i16] zeroinitializer }>, <{ i16, i16, [14 x i16] }> <{ i16 -1, i16 -1, [14 x i16] zeroinitializer }>, <{ i16, i16, i16, [13 x i16] }> <{ i16 -1, i16 -1, i16 -1, [13 x i16] zeroinitializer }>, <{ i16, i16, i16, i16, [12 x i16] }> <{ i16 -1, i16 -1, i16 -1, i16 -1, [12 x i16] zeroinitializer }>, <{ i16, i16, i16, i16, i16, [11 x i16] }> <{ i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, [11 x i16] zeroinitializer }>, <{ i16, i16, i16, i16, i16, i16, [10 x i16] }> <{ i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, [10 x i16] zeroinitializer }>, <{ i16, i16, i16, i16, i16, i16, i16, [9 x i16] }> <{ i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, [9 x i16] zeroinitializer }>, <{ [8 x i16], [8 x i16] }> <{ [8 x i16] [i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1], [8 x i16] zeroinitializer }>, [16 x i16] [i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0], [16 x i16] [i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0], [16 x i16] [i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 0, i16 0, i16 0, i16 0, i16 0], [16 x i16] [i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 0, i16 0, i16 0, i16 0], [16 x i16] [i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 0, i16 0, i16 0], [16 x i16] [i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 0, i16 0], [16 x i16] [i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 0], [16 x i16] [i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1] }>, align 32
@EvenOddMaskx = internal unnamed_addr constant [8 x [16 x i8]] [[16 x i8] c"\00\02\04\06\08\0A\0C\0E\01\03\05\07\09\0B\0D\0F", [16 x i8] c"\00\01\03\05\07\09\0B\0D\00\02\04\06\08\0A\0C\0E", [16 x i8] c"\00\00\02\04\06\08\0A\0C\00\00\03\05\07\09\0B\0D", [16 x i8] c"\00\00\00\03\05\07\09\0B\00\00\00\04\06\08\0A\0C", [16 x i8] c"\00\00\00\00\04\06\08\0A\00\00\00\00\05\07\09\0B", [16 x i8] c"\00\00\00\00\00\05\07\09\00\00\00\00\00\06\08\0A", [16 x i8] c"\00\00\00\00\00\00\06\08\00\00\00\00\00\00\07\09", [16 x i8] c"\00\00\00\00\00\00\00\07\00\00\00\00\00\00\00\08"], align 16
@BaseMask = internal unnamed_addr constant <{ [32 x i8], <{ i8, [31 x i8] }>, <{ i8, i8, [30 x i8] }>, <{ i8, i8, i8, [29 x i8] }>, <{ i8, i8, i8, i8, [28 x i8] }>, <{ i8, i8, i8, i8, i8, [27 x i8] }>, <{ i8, i8, i8, i8, i8, i8, [26 x i8] }>, <{ i8, i8, i8, i8, i8, i8, i8, [25 x i8] }>, <{ [8 x i8], [24 x i8] }>, <{ [9 x i8], [23 x i8] }>, <{ [10 x i8], [22 x i8] }>, <{ [11 x i8], [21 x i8] }>, <{ [12 x i8], [20 x i8] }>, <{ [13 x i8], [19 x i8] }>, <{ [14 x i8], [18 x i8] }>, <{ [15 x i8], [17 x i8] }>, <{ [16 x i8], [16 x i8] }>, <{ [17 x i8], [15 x i8] }>, <{ [18 x i8], [14 x i8] }>, <{ [19 x i8], [13 x i8] }>, <{ [20 x i8], [12 x i8] }>, <{ [21 x i8], [11 x i8] }>, <{ [22 x i8], [10 x i8] }>, <{ [23 x i8], [9 x i8] }>, <{ [24 x i8], [8 x i8] }>, [32 x i8], [32 x i8], [32 x i8], [32 x i8], [32 x i8], [32 x i8], [32 x i8], [32 x i8] }> <{ [32 x i8] zeroinitializer, <{ i8, [31 x i8] }> <{ i8 -1, [31 x i8] zeroinitializer }>, <{ i8, i8, [30 x i8] }> <{ i8 -1, i8 -1, [30 x i8] zeroinitializer }>, <{ i8, i8, i8, [29 x i8] }> <{ i8 -1, i8 -1, i8 -1, [29 x i8] zeroinitializer }>, <{ i8, i8, i8, i8, [28 x i8] }> <{ i8 -1, i8 -1, i8 -1, i8 -1, [28 x i8] zeroinitializer }>, <{ i8, i8, i8, i8, i8, [27 x i8] }> <{ i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, [27 x i8] zeroinitializer }>, <{ i8, i8, i8, i8, i8, i8, [26 x i8] }> <{ i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, [26 x i8] zeroinitializer }>, <{ i8, i8, i8, i8, i8, i8, i8, [25 x i8] }> <{ i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, [25 x i8] zeroinitializer }>, <{ [8 x i8], [24 x i8] }> <{ [8 x i8] c"\FF\FF\FF\FF\FF\FF\FF\FF", [24 x i8] zeroinitializer }>, <{ [9 x i8], [23 x i8] }> <{ [9 x i8] c"\FF\FF\FF\FF\FF\FF\FF\FF\FF", [23 x i8] zeroinitializer }>, <{ [10 x i8], [22 x i8] }> <{ [10 x i8] c"\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF", [22 x i8] zeroinitializer }>, <{ [11 x i8], [21 x i8] }> <{ [11 x i8] c"\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF", [21 x i8] zeroinitializer }>, <{ [12 x i8], [20 x i8] }> <{ [12 x i8] c"\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF", [20 x i8] zeroinitializer }>, <{ [13 x i8], [19 x i8] }> <{ [13 x i8] c"\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF", [19 x i8] zeroinitializer }>, <{ [14 x i8], [18 x i8] }> <{ [14 x i8] c"\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF", [18 x i8] zeroinitializer }>, <{ [15 x i8], [17 x i8] }> <{ [15 x i8] c"\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF", [17 x i8] zeroinitializer }>, <{ [16 x i8], [16 x i8] }> <{ [16 x i8] c"\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF", [16 x i8] zeroinitializer }>, <{ [17 x i8], [15 x i8] }> <{ [17 x i8] c"\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF", [15 x i8] zeroinitializer }>, <{ [18 x i8], [14 x i8] }> <{ [18 x i8] c"\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF", [14 x i8] zeroinitializer }>, <{ [19 x i8], [13 x i8] }> <{ [19 x i8] c"\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF", [13 x i8] zeroinitializer }>, <{ [20 x i8], [12 x i8] }> <{ [20 x i8] c"\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF", [12 x i8] zeroinitializer }>, <{ [21 x i8], [11 x i8] }> <{ [21 x i8] c"\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF", [11 x i8] zeroinitializer }>, <{ [22 x i8], [10 x i8] }> <{ [22 x i8] c"\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF", [10 x i8] zeroinitializer }>, <{ [23 x i8], [9 x i8] }> <{ [23 x i8] c"\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF", [9 x i8] zeroinitializer }>, <{ [24 x i8], [8 x i8] }> <{ [24 x i8] c"\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF", [8 x i8] zeroinitializer }>, [32 x i8] c"\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\00\00\00\00\00\00\00", [32 x i8] c"\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\00\00\00\00\00\00", [32 x i8] c"\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\00\00\00\00\00", [32 x i8] c"\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\00\00\00\00", [32 x i8] c"\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\00\00\00", [32 x i8] c"\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\00\00", [32 x i8] c"\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\00", [32 x i8] c"\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF" }>, align 32
@LoadMaskx = internal unnamed_addr constant [16 x [16 x i8]] [[16 x i8] c"\00\01\02\03\04\05\06\07\08\09\0A\0B\0C\0D\0E\0F", [16 x i8] c"\00\00\01\02\03\04\05\06\07\08\09\0A\0B\0C\0D\0E", [16 x i8] c"\00\00\00\01\02\03\04\05\06\07\08\09\0A\0B\0C\0D", [16 x i8] c"\00\00\00\00\01\02\03\04\05\06\07\08\09\0A\0B\0C", [16 x i8] c"\00\00\00\00\00\01\02\03\04\05\06\07\08\09\0A\0B", [16 x i8] c"\00\00\00\00\00\00\01\02\03\04\05\06\07\08\09\0A", [16 x i8] c"\00\00\00\00\00\00\00\01\02\03\04\05\06\07\08\09", [16 x i8] c"\00\00\00\00\00\00\00\00\01\02\03\04\05\06\07\08", [16 x i8] c"\00\00\00\00\00\00\00\00\00\01\02\03\04\05\06\07", [16 x i8] c"\00\00\00\00\00\00\00\00\00\00\01\02\03\04\05\06", [16 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\01\02\03\04\05", [16 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\01\02\03\04", [16 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\01\02\03", [16 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\01\02", [16 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\01", [16 x i8] zeroinitializer], align 16
@LoadMaskz2 = internal unnamed_addr constant [8 x [8 x i32]] [[8 x i32] [i32 -1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0], [8 x i32] [i32 -1, i32 -1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0], [8 x i32] [i32 -1, i32 -1, i32 -1, i32 0, i32 0, i32 0, i32 0, i32 0], [8 x i32] [i32 -1, i32 -1, i32 -1, i32 -1, i32 0, i32 0, i32 0, i32 0], [8 x i32] [i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 0, i32 0, i32 0], [8 x i32] [i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 0, i32 0], [8 x i32] [i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 0], [8 x i32] [i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1]], align 32

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_dc_predictor_32x32_avx2(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) local_unnamed_addr #0 {
  %5 = bitcast i8* %2 to <32 x i8>*
  %6 = load <32 x i8>, <32 x i8>* %5, align 1
  %7 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %6, <32 x i8> zeroinitializer) #8
  %8 = shufflevector <4 x i64> %7, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %9 = add <4 x i64> %8, %7
  %10 = shufflevector <4 x i64> %9, <4 x i64> undef, <4 x i32> <i32 1, i32 1, i32 3, i32 3>
  %11 = bitcast <4 x i64> %9 to <16 x i16>
  %12 = bitcast <4 x i64> %10 to <16 x i16>
  %13 = bitcast i8* %3 to <32 x i8>*
  %14 = load <32 x i8>, <32 x i8>* %13, align 1
  %15 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %14, <32 x i8> zeroinitializer) #8
  %16 = shufflevector <4 x i64> %15, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %17 = add <4 x i64> %16, %15
  %18 = shufflevector <4 x i64> %17, <4 x i64> undef, <4 x i32> <i32 1, i32 1, i32 3, i32 3>
  %19 = bitcast <4 x i64> %17 to <16 x i16>
  %20 = bitcast <4 x i64> %18 to <16 x i16>
  %21 = add <16 x i16> %11, <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>
  %22 = add <16 x i16> %21, %12
  %23 = add <16 x i16> %22, %19
  %24 = add <16 x i16> %23, %20
  %25 = ashr <16 x i16> %24, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %26 = bitcast <16 x i16> %25 to <32 x i8>
  %27 = shufflevector <32 x i8> %26, <32 x i8> undef, <32 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %28 = bitcast i8* %0 to <32 x i8>*
  store <32 x i8> %27, <32 x i8>* %28, align 1
  %29 = getelementptr inbounds i8, i8* %0, i64 %1
  %30 = bitcast i8* %29 to <32 x i8>*
  store <32 x i8> %27, <32 x i8>* %30, align 1
  %31 = getelementptr inbounds i8, i8* %29, i64 %1
  %32 = bitcast i8* %31 to <32 x i8>*
  store <32 x i8> %27, <32 x i8>* %32, align 1
  %33 = getelementptr inbounds i8, i8* %31, i64 %1
  %34 = bitcast i8* %33 to <32 x i8>*
  store <32 x i8> %27, <32 x i8>* %34, align 1
  %35 = getelementptr inbounds i8, i8* %33, i64 %1
  %36 = bitcast i8* %35 to <32 x i8>*
  store <32 x i8> %27, <32 x i8>* %36, align 1
  %37 = getelementptr inbounds i8, i8* %35, i64 %1
  %38 = bitcast i8* %37 to <32 x i8>*
  store <32 x i8> %27, <32 x i8>* %38, align 1
  %39 = getelementptr inbounds i8, i8* %37, i64 %1
  %40 = bitcast i8* %39 to <32 x i8>*
  store <32 x i8> %27, <32 x i8>* %40, align 1
  %41 = getelementptr inbounds i8, i8* %39, i64 %1
  %42 = bitcast i8* %41 to <32 x i8>*
  store <32 x i8> %27, <32 x i8>* %42, align 1
  %43 = getelementptr inbounds i8, i8* %41, i64 %1
  %44 = bitcast i8* %43 to <32 x i8>*
  store <32 x i8> %27, <32 x i8>* %44, align 1
  %45 = getelementptr inbounds i8, i8* %43, i64 %1
  %46 = bitcast i8* %45 to <32 x i8>*
  store <32 x i8> %27, <32 x i8>* %46, align 1
  %47 = getelementptr inbounds i8, i8* %45, i64 %1
  %48 = bitcast i8* %47 to <32 x i8>*
  store <32 x i8> %27, <32 x i8>* %48, align 1
  %49 = getelementptr inbounds i8, i8* %47, i64 %1
  %50 = bitcast i8* %49 to <32 x i8>*
  store <32 x i8> %27, <32 x i8>* %50, align 1
  %51 = getelementptr inbounds i8, i8* %49, i64 %1
  %52 = bitcast i8* %51 to <32 x i8>*
  store <32 x i8> %27, <32 x i8>* %52, align 1
  %53 = getelementptr inbounds i8, i8* %51, i64 %1
  %54 = bitcast i8* %53 to <32 x i8>*
  store <32 x i8> %27, <32 x i8>* %54, align 1
  %55 = getelementptr inbounds i8, i8* %53, i64 %1
  %56 = bitcast i8* %55 to <32 x i8>*
  store <32 x i8> %27, <32 x i8>* %56, align 1
  %57 = getelementptr inbounds i8, i8* %55, i64 %1
  %58 = bitcast i8* %57 to <32 x i8>*
  store <32 x i8> %27, <32 x i8>* %58, align 1
  %59 = getelementptr inbounds i8, i8* %57, i64 %1
  %60 = bitcast i8* %59 to <32 x i8>*
  store <32 x i8> %27, <32 x i8>* %60, align 1
  %61 = getelementptr inbounds i8, i8* %59, i64 %1
  %62 = bitcast i8* %61 to <32 x i8>*
  store <32 x i8> %27, <32 x i8>* %62, align 1
  %63 = getelementptr inbounds i8, i8* %61, i64 %1
  %64 = bitcast i8* %63 to <32 x i8>*
  store <32 x i8> %27, <32 x i8>* %64, align 1
  %65 = getelementptr inbounds i8, i8* %63, i64 %1
  %66 = bitcast i8* %65 to <32 x i8>*
  store <32 x i8> %27, <32 x i8>* %66, align 1
  %67 = getelementptr inbounds i8, i8* %65, i64 %1
  %68 = bitcast i8* %67 to <32 x i8>*
  store <32 x i8> %27, <32 x i8>* %68, align 1
  %69 = getelementptr inbounds i8, i8* %67, i64 %1
  %70 = bitcast i8* %69 to <32 x i8>*
  store <32 x i8> %27, <32 x i8>* %70, align 1
  %71 = getelementptr inbounds i8, i8* %69, i64 %1
  %72 = bitcast i8* %71 to <32 x i8>*
  store <32 x i8> %27, <32 x i8>* %72, align 1
  %73 = getelementptr inbounds i8, i8* %71, i64 %1
  %74 = bitcast i8* %73 to <32 x i8>*
  store <32 x i8> %27, <32 x i8>* %74, align 1
  %75 = getelementptr inbounds i8, i8* %73, i64 %1
  %76 = bitcast i8* %75 to <32 x i8>*
  store <32 x i8> %27, <32 x i8>* %76, align 1
  %77 = getelementptr inbounds i8, i8* %75, i64 %1
  %78 = bitcast i8* %77 to <32 x i8>*
  store <32 x i8> %27, <32 x i8>* %78, align 1
  %79 = getelementptr inbounds i8, i8* %77, i64 %1
  %80 = bitcast i8* %79 to <32 x i8>*
  store <32 x i8> %27, <32 x i8>* %80, align 1
  %81 = getelementptr inbounds i8, i8* %79, i64 %1
  %82 = bitcast i8* %81 to <32 x i8>*
  store <32 x i8> %27, <32 x i8>* %82, align 1
  %83 = getelementptr inbounds i8, i8* %81, i64 %1
  %84 = bitcast i8* %83 to <32 x i8>*
  store <32 x i8> %27, <32 x i8>* %84, align 1
  %85 = getelementptr inbounds i8, i8* %83, i64 %1
  %86 = bitcast i8* %85 to <32 x i8>*
  store <32 x i8> %27, <32 x i8>* %86, align 1
  %87 = getelementptr inbounds i8, i8* %85, i64 %1
  %88 = bitcast i8* %87 to <32 x i8>*
  store <32 x i8> %27, <32 x i8>* %88, align 1
  %89 = getelementptr inbounds i8, i8* %87, i64 %1
  %90 = bitcast i8* %89 to <32 x i8>*
  store <32 x i8> %27, <32 x i8>* %90, align 1
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_dc_top_predictor_32x32_avx2(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readnone) local_unnamed_addr #0 {
  %5 = bitcast i8* %2 to <32 x i8>*
  %6 = load <32 x i8>, <32 x i8>* %5, align 1
  %7 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %6, <32 x i8> zeroinitializer) #8
  %8 = shufflevector <4 x i64> %7, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %9 = add <4 x i64> %8, %7
  %10 = shufflevector <4 x i64> %9, <4 x i64> undef, <4 x i32> <i32 1, i32 1, i32 3, i32 3>
  %11 = bitcast <4 x i64> %9 to <16 x i16>
  %12 = bitcast <4 x i64> %10 to <16 x i16>
  %13 = add <16 x i16> %11, <i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16>
  %14 = add <16 x i16> %13, %12
  %15 = ashr <16 x i16> %14, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %16 = bitcast <16 x i16> %15 to <32 x i8>
  %17 = shufflevector <32 x i8> %16, <32 x i8> undef, <32 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %18 = bitcast i8* %0 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %18, align 1
  %19 = getelementptr inbounds i8, i8* %0, i64 %1
  %20 = bitcast i8* %19 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %20, align 1
  %21 = getelementptr inbounds i8, i8* %19, i64 %1
  %22 = bitcast i8* %21 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %22, align 1
  %23 = getelementptr inbounds i8, i8* %21, i64 %1
  %24 = bitcast i8* %23 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %24, align 1
  %25 = getelementptr inbounds i8, i8* %23, i64 %1
  %26 = bitcast i8* %25 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %26, align 1
  %27 = getelementptr inbounds i8, i8* %25, i64 %1
  %28 = bitcast i8* %27 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %28, align 1
  %29 = getelementptr inbounds i8, i8* %27, i64 %1
  %30 = bitcast i8* %29 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %30, align 1
  %31 = getelementptr inbounds i8, i8* %29, i64 %1
  %32 = bitcast i8* %31 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %32, align 1
  %33 = getelementptr inbounds i8, i8* %31, i64 %1
  %34 = bitcast i8* %33 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %34, align 1
  %35 = getelementptr inbounds i8, i8* %33, i64 %1
  %36 = bitcast i8* %35 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %36, align 1
  %37 = getelementptr inbounds i8, i8* %35, i64 %1
  %38 = bitcast i8* %37 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %38, align 1
  %39 = getelementptr inbounds i8, i8* %37, i64 %1
  %40 = bitcast i8* %39 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %40, align 1
  %41 = getelementptr inbounds i8, i8* %39, i64 %1
  %42 = bitcast i8* %41 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %42, align 1
  %43 = getelementptr inbounds i8, i8* %41, i64 %1
  %44 = bitcast i8* %43 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %44, align 1
  %45 = getelementptr inbounds i8, i8* %43, i64 %1
  %46 = bitcast i8* %45 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %46, align 1
  %47 = getelementptr inbounds i8, i8* %45, i64 %1
  %48 = bitcast i8* %47 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %48, align 1
  %49 = getelementptr inbounds i8, i8* %47, i64 %1
  %50 = bitcast i8* %49 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %50, align 1
  %51 = getelementptr inbounds i8, i8* %49, i64 %1
  %52 = bitcast i8* %51 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %52, align 1
  %53 = getelementptr inbounds i8, i8* %51, i64 %1
  %54 = bitcast i8* %53 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %54, align 1
  %55 = getelementptr inbounds i8, i8* %53, i64 %1
  %56 = bitcast i8* %55 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %56, align 1
  %57 = getelementptr inbounds i8, i8* %55, i64 %1
  %58 = bitcast i8* %57 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %58, align 1
  %59 = getelementptr inbounds i8, i8* %57, i64 %1
  %60 = bitcast i8* %59 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %60, align 1
  %61 = getelementptr inbounds i8, i8* %59, i64 %1
  %62 = bitcast i8* %61 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %62, align 1
  %63 = getelementptr inbounds i8, i8* %61, i64 %1
  %64 = bitcast i8* %63 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %64, align 1
  %65 = getelementptr inbounds i8, i8* %63, i64 %1
  %66 = bitcast i8* %65 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %66, align 1
  %67 = getelementptr inbounds i8, i8* %65, i64 %1
  %68 = bitcast i8* %67 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %68, align 1
  %69 = getelementptr inbounds i8, i8* %67, i64 %1
  %70 = bitcast i8* %69 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %70, align 1
  %71 = getelementptr inbounds i8, i8* %69, i64 %1
  %72 = bitcast i8* %71 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %72, align 1
  %73 = getelementptr inbounds i8, i8* %71, i64 %1
  %74 = bitcast i8* %73 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %74, align 1
  %75 = getelementptr inbounds i8, i8* %73, i64 %1
  %76 = bitcast i8* %75 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %76, align 1
  %77 = getelementptr inbounds i8, i8* %75, i64 %1
  %78 = bitcast i8* %77 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %78, align 1
  %79 = getelementptr inbounds i8, i8* %77, i64 %1
  %80 = bitcast i8* %79 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %80, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_dc_left_predictor_32x32_avx2(i8* nocapture, i64, i8* nocapture readnone, i8* nocapture readonly) local_unnamed_addr #0 {
  %5 = bitcast i8* %3 to <32 x i8>*
  %6 = load <32 x i8>, <32 x i8>* %5, align 1
  %7 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %6, <32 x i8> zeroinitializer) #8
  %8 = shufflevector <4 x i64> %7, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %9 = add <4 x i64> %8, %7
  %10 = shufflevector <4 x i64> %9, <4 x i64> undef, <4 x i32> <i32 1, i32 1, i32 3, i32 3>
  %11 = bitcast <4 x i64> %9 to <16 x i16>
  %12 = bitcast <4 x i64> %10 to <16 x i16>
  %13 = add <16 x i16> %11, <i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16>
  %14 = add <16 x i16> %13, %12
  %15 = ashr <16 x i16> %14, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %16 = bitcast <16 x i16> %15 to <32 x i8>
  %17 = shufflevector <32 x i8> %16, <32 x i8> undef, <32 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %18 = bitcast i8* %0 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %18, align 1
  %19 = getelementptr inbounds i8, i8* %0, i64 %1
  %20 = bitcast i8* %19 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %20, align 1
  %21 = getelementptr inbounds i8, i8* %19, i64 %1
  %22 = bitcast i8* %21 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %22, align 1
  %23 = getelementptr inbounds i8, i8* %21, i64 %1
  %24 = bitcast i8* %23 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %24, align 1
  %25 = getelementptr inbounds i8, i8* %23, i64 %1
  %26 = bitcast i8* %25 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %26, align 1
  %27 = getelementptr inbounds i8, i8* %25, i64 %1
  %28 = bitcast i8* %27 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %28, align 1
  %29 = getelementptr inbounds i8, i8* %27, i64 %1
  %30 = bitcast i8* %29 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %30, align 1
  %31 = getelementptr inbounds i8, i8* %29, i64 %1
  %32 = bitcast i8* %31 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %32, align 1
  %33 = getelementptr inbounds i8, i8* %31, i64 %1
  %34 = bitcast i8* %33 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %34, align 1
  %35 = getelementptr inbounds i8, i8* %33, i64 %1
  %36 = bitcast i8* %35 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %36, align 1
  %37 = getelementptr inbounds i8, i8* %35, i64 %1
  %38 = bitcast i8* %37 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %38, align 1
  %39 = getelementptr inbounds i8, i8* %37, i64 %1
  %40 = bitcast i8* %39 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %40, align 1
  %41 = getelementptr inbounds i8, i8* %39, i64 %1
  %42 = bitcast i8* %41 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %42, align 1
  %43 = getelementptr inbounds i8, i8* %41, i64 %1
  %44 = bitcast i8* %43 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %44, align 1
  %45 = getelementptr inbounds i8, i8* %43, i64 %1
  %46 = bitcast i8* %45 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %46, align 1
  %47 = getelementptr inbounds i8, i8* %45, i64 %1
  %48 = bitcast i8* %47 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %48, align 1
  %49 = getelementptr inbounds i8, i8* %47, i64 %1
  %50 = bitcast i8* %49 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %50, align 1
  %51 = getelementptr inbounds i8, i8* %49, i64 %1
  %52 = bitcast i8* %51 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %52, align 1
  %53 = getelementptr inbounds i8, i8* %51, i64 %1
  %54 = bitcast i8* %53 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %54, align 1
  %55 = getelementptr inbounds i8, i8* %53, i64 %1
  %56 = bitcast i8* %55 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %56, align 1
  %57 = getelementptr inbounds i8, i8* %55, i64 %1
  %58 = bitcast i8* %57 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %58, align 1
  %59 = getelementptr inbounds i8, i8* %57, i64 %1
  %60 = bitcast i8* %59 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %60, align 1
  %61 = getelementptr inbounds i8, i8* %59, i64 %1
  %62 = bitcast i8* %61 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %62, align 1
  %63 = getelementptr inbounds i8, i8* %61, i64 %1
  %64 = bitcast i8* %63 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %64, align 1
  %65 = getelementptr inbounds i8, i8* %63, i64 %1
  %66 = bitcast i8* %65 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %66, align 1
  %67 = getelementptr inbounds i8, i8* %65, i64 %1
  %68 = bitcast i8* %67 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %68, align 1
  %69 = getelementptr inbounds i8, i8* %67, i64 %1
  %70 = bitcast i8* %69 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %70, align 1
  %71 = getelementptr inbounds i8, i8* %69, i64 %1
  %72 = bitcast i8* %71 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %72, align 1
  %73 = getelementptr inbounds i8, i8* %71, i64 %1
  %74 = bitcast i8* %73 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %74, align 1
  %75 = getelementptr inbounds i8, i8* %73, i64 %1
  %76 = bitcast i8* %75 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %76, align 1
  %77 = getelementptr inbounds i8, i8* %75, i64 %1
  %78 = bitcast i8* %77 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %78, align 1
  %79 = getelementptr inbounds i8, i8* %77, i64 %1
  %80 = bitcast i8* %79 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %80, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable writeonly
define hidden void @aom_dc_128_predictor_32x32_avx2(i8* nocapture, i64, i8* nocapture readnone, i8* nocapture readnone) local_unnamed_addr #2 {
  %5 = bitcast i8* %0 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %5, align 1
  %6 = getelementptr inbounds i8, i8* %0, i64 %1
  %7 = bitcast i8* %6 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %7, align 1
  %8 = getelementptr inbounds i8, i8* %6, i64 %1
  %9 = bitcast i8* %8 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %9, align 1
  %10 = getelementptr inbounds i8, i8* %8, i64 %1
  %11 = bitcast i8* %10 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %11, align 1
  %12 = getelementptr inbounds i8, i8* %10, i64 %1
  %13 = bitcast i8* %12 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %13, align 1
  %14 = getelementptr inbounds i8, i8* %12, i64 %1
  %15 = bitcast i8* %14 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %15, align 1
  %16 = getelementptr inbounds i8, i8* %14, i64 %1
  %17 = bitcast i8* %16 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %17, align 1
  %18 = getelementptr inbounds i8, i8* %16, i64 %1
  %19 = bitcast i8* %18 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %19, align 1
  %20 = getelementptr inbounds i8, i8* %18, i64 %1
  %21 = bitcast i8* %20 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %21, align 1
  %22 = getelementptr inbounds i8, i8* %20, i64 %1
  %23 = bitcast i8* %22 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %23, align 1
  %24 = getelementptr inbounds i8, i8* %22, i64 %1
  %25 = bitcast i8* %24 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %25, align 1
  %26 = getelementptr inbounds i8, i8* %24, i64 %1
  %27 = bitcast i8* %26 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %27, align 1
  %28 = getelementptr inbounds i8, i8* %26, i64 %1
  %29 = bitcast i8* %28 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %29, align 1
  %30 = getelementptr inbounds i8, i8* %28, i64 %1
  %31 = bitcast i8* %30 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %31, align 1
  %32 = getelementptr inbounds i8, i8* %30, i64 %1
  %33 = bitcast i8* %32 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %33, align 1
  %34 = getelementptr inbounds i8, i8* %32, i64 %1
  %35 = bitcast i8* %34 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %35, align 1
  %36 = getelementptr inbounds i8, i8* %34, i64 %1
  %37 = bitcast i8* %36 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %37, align 1
  %38 = getelementptr inbounds i8, i8* %36, i64 %1
  %39 = bitcast i8* %38 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %39, align 1
  %40 = getelementptr inbounds i8, i8* %38, i64 %1
  %41 = bitcast i8* %40 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %41, align 1
  %42 = getelementptr inbounds i8, i8* %40, i64 %1
  %43 = bitcast i8* %42 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %43, align 1
  %44 = getelementptr inbounds i8, i8* %42, i64 %1
  %45 = bitcast i8* %44 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %45, align 1
  %46 = getelementptr inbounds i8, i8* %44, i64 %1
  %47 = bitcast i8* %46 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %47, align 1
  %48 = getelementptr inbounds i8, i8* %46, i64 %1
  %49 = bitcast i8* %48 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %49, align 1
  %50 = getelementptr inbounds i8, i8* %48, i64 %1
  %51 = bitcast i8* %50 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %51, align 1
  %52 = getelementptr inbounds i8, i8* %50, i64 %1
  %53 = bitcast i8* %52 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %53, align 1
  %54 = getelementptr inbounds i8, i8* %52, i64 %1
  %55 = bitcast i8* %54 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %55, align 1
  %56 = getelementptr inbounds i8, i8* %54, i64 %1
  %57 = bitcast i8* %56 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %57, align 1
  %58 = getelementptr inbounds i8, i8* %56, i64 %1
  %59 = bitcast i8* %58 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %59, align 1
  %60 = getelementptr inbounds i8, i8* %58, i64 %1
  %61 = bitcast i8* %60 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %61, align 1
  %62 = getelementptr inbounds i8, i8* %60, i64 %1
  %63 = bitcast i8* %62 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %63, align 1
  %64 = getelementptr inbounds i8, i8* %62, i64 %1
  %65 = bitcast i8* %64 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %65, align 1
  %66 = getelementptr inbounds i8, i8* %64, i64 %1
  %67 = bitcast i8* %66 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %67, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_v_predictor_32x32_avx2(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readnone) local_unnamed_addr #0 {
  %5 = bitcast i8* %2 to <4 x i64>*
  %6 = load <4 x i64>, <4 x i64>* %5, align 1
  %7 = bitcast i8* %0 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %7, align 1
  %8 = getelementptr inbounds i8, i8* %0, i64 %1
  %9 = bitcast i8* %8 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %9, align 1
  %10 = getelementptr inbounds i8, i8* %8, i64 %1
  %11 = bitcast i8* %10 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %11, align 1
  %12 = getelementptr inbounds i8, i8* %10, i64 %1
  %13 = bitcast i8* %12 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %13, align 1
  %14 = getelementptr inbounds i8, i8* %12, i64 %1
  %15 = bitcast i8* %14 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %15, align 1
  %16 = getelementptr inbounds i8, i8* %14, i64 %1
  %17 = bitcast i8* %16 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %17, align 1
  %18 = getelementptr inbounds i8, i8* %16, i64 %1
  %19 = bitcast i8* %18 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %19, align 1
  %20 = getelementptr inbounds i8, i8* %18, i64 %1
  %21 = bitcast i8* %20 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %21, align 1
  %22 = getelementptr inbounds i8, i8* %20, i64 %1
  %23 = bitcast i8* %22 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %23, align 1
  %24 = getelementptr inbounds i8, i8* %22, i64 %1
  %25 = bitcast i8* %24 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %25, align 1
  %26 = getelementptr inbounds i8, i8* %24, i64 %1
  %27 = bitcast i8* %26 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %27, align 1
  %28 = getelementptr inbounds i8, i8* %26, i64 %1
  %29 = bitcast i8* %28 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %29, align 1
  %30 = getelementptr inbounds i8, i8* %28, i64 %1
  %31 = bitcast i8* %30 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %31, align 1
  %32 = getelementptr inbounds i8, i8* %30, i64 %1
  %33 = bitcast i8* %32 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %33, align 1
  %34 = getelementptr inbounds i8, i8* %32, i64 %1
  %35 = bitcast i8* %34 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %35, align 1
  %36 = getelementptr inbounds i8, i8* %34, i64 %1
  %37 = bitcast i8* %36 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %37, align 1
  %38 = getelementptr inbounds i8, i8* %36, i64 %1
  %39 = bitcast i8* %38 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %39, align 1
  %40 = getelementptr inbounds i8, i8* %38, i64 %1
  %41 = bitcast i8* %40 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %41, align 1
  %42 = getelementptr inbounds i8, i8* %40, i64 %1
  %43 = bitcast i8* %42 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %43, align 1
  %44 = getelementptr inbounds i8, i8* %42, i64 %1
  %45 = bitcast i8* %44 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %45, align 1
  %46 = getelementptr inbounds i8, i8* %44, i64 %1
  %47 = bitcast i8* %46 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %47, align 1
  %48 = getelementptr inbounds i8, i8* %46, i64 %1
  %49 = bitcast i8* %48 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %49, align 1
  %50 = getelementptr inbounds i8, i8* %48, i64 %1
  %51 = bitcast i8* %50 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %51, align 1
  %52 = getelementptr inbounds i8, i8* %50, i64 %1
  %53 = bitcast i8* %52 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %53, align 1
  %54 = getelementptr inbounds i8, i8* %52, i64 %1
  %55 = bitcast i8* %54 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %55, align 1
  %56 = getelementptr inbounds i8, i8* %54, i64 %1
  %57 = bitcast i8* %56 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %57, align 1
  %58 = getelementptr inbounds i8, i8* %56, i64 %1
  %59 = bitcast i8* %58 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %59, align 1
  %60 = getelementptr inbounds i8, i8* %58, i64 %1
  %61 = bitcast i8* %60 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %61, align 1
  %62 = getelementptr inbounds i8, i8* %60, i64 %1
  %63 = bitcast i8* %62 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %63, align 1
  %64 = getelementptr inbounds i8, i8* %62, i64 %1
  %65 = bitcast i8* %64 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %65, align 1
  %66 = getelementptr inbounds i8, i8* %64, i64 %1
  %67 = bitcast i8* %66 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %67, align 1
  %68 = getelementptr inbounds i8, i8* %66, i64 %1
  %69 = bitcast i8* %68 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %69, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_h_predictor_32x32_avx2(i8* nocapture, i64, i8* nocapture readnone, i8* nocapture readonly) local_unnamed_addr #0 {
  %5 = bitcast i8* %3 to <32 x i8>*
  %6 = load <32 x i8>, <32 x i8>* %5, align 1
  %7 = shufflevector <32 x i8> %6, <32 x i8> undef, <32 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 16, i32 16, i32 17, i32 17, i32 18, i32 18, i32 19, i32 19, i32 20, i32 20, i32 21, i32 21, i32 22, i32 22, i32 23, i32 23>
  %8 = shufflevector <32 x i8> %7, <32 x i8> undef, <32 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 16, i32 16, i32 17, i32 17, i32 18, i32 18, i32 19, i32 19, i32 20, i32 20, i32 21, i32 21, i32 22, i32 22, i32 23, i32 23>
  %9 = shl i64 %1, 4
  %10 = shufflevector <32 x i8> %6, <32 x i8> undef, <32 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %11 = bitcast <32 x i8> %10 to <4 x i64>
  %12 = shufflevector <4 x i64> %11, <4 x i64> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %13 = shufflevector <4 x i64> %11, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 2, i32 3>
  %14 = bitcast i8* %0 to <4 x i64>*
  store <4 x i64> %12, <4 x i64>* %14, align 1
  %15 = getelementptr inbounds i8, i8* %0, i64 %9
  %16 = bitcast i8* %15 to <4 x i64>*
  store <4 x i64> %13, <4 x i64>* %16, align 1
  %17 = getelementptr inbounds i8, i8* %0, i64 %1
  %18 = shufflevector <32 x i8> %8, <32 x i8> undef, <32 x i32> <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20>
  %19 = bitcast <32 x i8> %18 to <4 x i64>
  %20 = shufflevector <4 x i64> %19, <4 x i64> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %21 = shufflevector <4 x i64> %19, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 2, i32 3>
  %22 = bitcast i8* %17 to <4 x i64>*
  store <4 x i64> %20, <4 x i64>* %22, align 1
  %23 = getelementptr inbounds i8, i8* %17, i64 %9
  %24 = bitcast i8* %23 to <4 x i64>*
  store <4 x i64> %21, <4 x i64>* %24, align 1
  %25 = getelementptr inbounds i8, i8* %17, i64 %1
  %26 = shufflevector <32 x i8> %8, <32 x i8> undef, <32 x i32> <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24>
  %27 = bitcast <32 x i8> %26 to <4 x i64>
  %28 = shufflevector <4 x i64> %27, <4 x i64> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %29 = shufflevector <4 x i64> %27, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 2, i32 3>
  %30 = bitcast i8* %25 to <4 x i64>*
  store <4 x i64> %28, <4 x i64>* %30, align 1
  %31 = getelementptr inbounds i8, i8* %25, i64 %9
  %32 = bitcast i8* %31 to <4 x i64>*
  store <4 x i64> %29, <4 x i64>* %32, align 1
  %33 = getelementptr inbounds i8, i8* %25, i64 %1
  %34 = shufflevector <32 x i8> %8, <32 x i8> undef, <32 x i32> <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28>
  %35 = bitcast <32 x i8> %34 to <4 x i64>
  %36 = shufflevector <4 x i64> %35, <4 x i64> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %37 = shufflevector <4 x i64> %35, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 2, i32 3>
  %38 = bitcast i8* %33 to <4 x i64>*
  store <4 x i64> %36, <4 x i64>* %38, align 1
  %39 = getelementptr inbounds i8, i8* %33, i64 %9
  %40 = bitcast i8* %39 to <4 x i64>*
  store <4 x i64> %37, <4 x i64>* %40, align 1
  %41 = shl i64 %1, 2
  %42 = getelementptr inbounds i8, i8* %0, i64 %41
  %43 = shufflevector <32 x i8> %7, <32 x i8> undef, <32 x i32> <i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 11, i32 12, i32 12, i32 13, i32 13, i32 14, i32 14, i32 15, i32 15, i32 24, i32 24, i32 25, i32 25, i32 26, i32 26, i32 27, i32 27, i32 28, i32 28, i32 29, i32 29, i32 30, i32 30, i32 31, i32 31>
  %44 = shufflevector <32 x i8> %43, <32 x i8> undef, <32 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %45 = bitcast <32 x i8> %44 to <4 x i64>
  %46 = shufflevector <4 x i64> %45, <4 x i64> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %47 = shufflevector <4 x i64> %45, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 2, i32 3>
  %48 = bitcast i8* %42 to <4 x i64>*
  store <4 x i64> %46, <4 x i64>* %48, align 1
  %49 = getelementptr inbounds i8, i8* %42, i64 %9
  %50 = bitcast i8* %49 to <4 x i64>*
  store <4 x i64> %47, <4 x i64>* %50, align 1
  %51 = getelementptr inbounds i8, i8* %42, i64 %1
  %52 = shufflevector <32 x i8> %43, <32 x i8> undef, <32 x i32> <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20>
  %53 = bitcast <32 x i8> %52 to <4 x i64>
  %54 = shufflevector <4 x i64> %53, <4 x i64> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %55 = shufflevector <4 x i64> %53, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 2, i32 3>
  %56 = bitcast i8* %51 to <4 x i64>*
  store <4 x i64> %54, <4 x i64>* %56, align 1
  %57 = getelementptr inbounds i8, i8* %51, i64 %9
  %58 = bitcast i8* %57 to <4 x i64>*
  store <4 x i64> %55, <4 x i64>* %58, align 1
  %59 = getelementptr inbounds i8, i8* %51, i64 %1
  %60 = shufflevector <32 x i8> %43, <32 x i8> undef, <32 x i32> <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24>
  %61 = bitcast <32 x i8> %60 to <4 x i64>
  %62 = shufflevector <4 x i64> %61, <4 x i64> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %63 = shufflevector <4 x i64> %61, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 2, i32 3>
  %64 = bitcast i8* %59 to <4 x i64>*
  store <4 x i64> %62, <4 x i64>* %64, align 1
  %65 = getelementptr inbounds i8, i8* %59, i64 %9
  %66 = bitcast i8* %65 to <4 x i64>*
  store <4 x i64> %63, <4 x i64>* %66, align 1
  %67 = getelementptr inbounds i8, i8* %59, i64 %1
  %68 = shufflevector <32 x i8> %43, <32 x i8> undef, <32 x i32> <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28>
  %69 = bitcast <32 x i8> %68 to <4 x i64>
  %70 = shufflevector <4 x i64> %69, <4 x i64> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %71 = shufflevector <4 x i64> %69, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 2, i32 3>
  %72 = bitcast i8* %67 to <4 x i64>*
  store <4 x i64> %70, <4 x i64>* %72, align 1
  %73 = getelementptr inbounds i8, i8* %67, i64 %9
  %74 = bitcast i8* %73 to <4 x i64>*
  store <4 x i64> %71, <4 x i64>* %74, align 1
  %75 = getelementptr inbounds i8, i8* %42, i64 %41
  %76 = shufflevector <32 x i8> %6, <32 x i8> undef, <32 x i32> <i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 11, i32 12, i32 12, i32 13, i32 13, i32 14, i32 14, i32 15, i32 15, i32 24, i32 24, i32 25, i32 25, i32 26, i32 26, i32 27, i32 27, i32 28, i32 28, i32 29, i32 29, i32 30, i32 30, i32 31, i32 31>
  %77 = shufflevector <32 x i8> %76, <32 x i8> undef, <32 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 16, i32 16, i32 17, i32 17, i32 18, i32 18, i32 19, i32 19, i32 20, i32 20, i32 21, i32 21, i32 22, i32 22, i32 23, i32 23>
  %78 = shufflevector <32 x i8> %76, <32 x i8> undef, <32 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %79 = bitcast <32 x i8> %78 to <4 x i64>
  %80 = shufflevector <4 x i64> %79, <4 x i64> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %81 = shufflevector <4 x i64> %79, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 2, i32 3>
  %82 = bitcast i8* %75 to <4 x i64>*
  store <4 x i64> %80, <4 x i64>* %82, align 1
  %83 = getelementptr inbounds i8, i8* %75, i64 %9
  %84 = bitcast i8* %83 to <4 x i64>*
  store <4 x i64> %81, <4 x i64>* %84, align 1
  %85 = getelementptr inbounds i8, i8* %75, i64 %1
  %86 = shufflevector <32 x i8> %77, <32 x i8> undef, <32 x i32> <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20>
  %87 = bitcast <32 x i8> %86 to <4 x i64>
  %88 = shufflevector <4 x i64> %87, <4 x i64> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %89 = shufflevector <4 x i64> %87, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 2, i32 3>
  %90 = bitcast i8* %85 to <4 x i64>*
  store <4 x i64> %88, <4 x i64>* %90, align 1
  %91 = getelementptr inbounds i8, i8* %85, i64 %9
  %92 = bitcast i8* %91 to <4 x i64>*
  store <4 x i64> %89, <4 x i64>* %92, align 1
  %93 = getelementptr inbounds i8, i8* %85, i64 %1
  %94 = shufflevector <32 x i8> %77, <32 x i8> undef, <32 x i32> <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24>
  %95 = bitcast <32 x i8> %94 to <4 x i64>
  %96 = shufflevector <4 x i64> %95, <4 x i64> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %97 = shufflevector <4 x i64> %95, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 2, i32 3>
  %98 = bitcast i8* %93 to <4 x i64>*
  store <4 x i64> %96, <4 x i64>* %98, align 1
  %99 = getelementptr inbounds i8, i8* %93, i64 %9
  %100 = bitcast i8* %99 to <4 x i64>*
  store <4 x i64> %97, <4 x i64>* %100, align 1
  %101 = getelementptr inbounds i8, i8* %93, i64 %1
  %102 = shufflevector <32 x i8> %77, <32 x i8> undef, <32 x i32> <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28>
  %103 = bitcast <32 x i8> %102 to <4 x i64>
  %104 = shufflevector <4 x i64> %103, <4 x i64> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %105 = shufflevector <4 x i64> %103, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 2, i32 3>
  %106 = bitcast i8* %101 to <4 x i64>*
  store <4 x i64> %104, <4 x i64>* %106, align 1
  %107 = getelementptr inbounds i8, i8* %101, i64 %9
  %108 = bitcast i8* %107 to <4 x i64>*
  store <4 x i64> %105, <4 x i64>* %108, align 1
  %109 = getelementptr inbounds i8, i8* %75, i64 %41
  %110 = shufflevector <32 x i8> %76, <32 x i8> undef, <32 x i32> <i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 11, i32 12, i32 12, i32 13, i32 13, i32 14, i32 14, i32 15, i32 15, i32 24, i32 24, i32 25, i32 25, i32 26, i32 26, i32 27, i32 27, i32 28, i32 28, i32 29, i32 29, i32 30, i32 30, i32 31, i32 31>
  %111 = shufflevector <32 x i8> %110, <32 x i8> undef, <32 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %112 = bitcast <32 x i8> %111 to <4 x i64>
  %113 = shufflevector <4 x i64> %112, <4 x i64> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %114 = shufflevector <4 x i64> %112, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 2, i32 3>
  %115 = bitcast i8* %109 to <4 x i64>*
  store <4 x i64> %113, <4 x i64>* %115, align 1
  %116 = getelementptr inbounds i8, i8* %109, i64 %9
  %117 = bitcast i8* %116 to <4 x i64>*
  store <4 x i64> %114, <4 x i64>* %117, align 1
  %118 = getelementptr inbounds i8, i8* %109, i64 %1
  %119 = shufflevector <32 x i8> %110, <32 x i8> undef, <32 x i32> <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20>
  %120 = bitcast <32 x i8> %119 to <4 x i64>
  %121 = shufflevector <4 x i64> %120, <4 x i64> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %122 = shufflevector <4 x i64> %120, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 2, i32 3>
  %123 = bitcast i8* %118 to <4 x i64>*
  store <4 x i64> %121, <4 x i64>* %123, align 1
  %124 = getelementptr inbounds i8, i8* %118, i64 %9
  %125 = bitcast i8* %124 to <4 x i64>*
  store <4 x i64> %122, <4 x i64>* %125, align 1
  %126 = getelementptr inbounds i8, i8* %118, i64 %1
  %127 = shufflevector <32 x i8> %110, <32 x i8> undef, <32 x i32> <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24>
  %128 = bitcast <32 x i8> %127 to <4 x i64>
  %129 = shufflevector <4 x i64> %128, <4 x i64> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %130 = shufflevector <4 x i64> %128, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 2, i32 3>
  %131 = bitcast i8* %126 to <4 x i64>*
  store <4 x i64> %129, <4 x i64>* %131, align 1
  %132 = getelementptr inbounds i8, i8* %126, i64 %9
  %133 = bitcast i8* %132 to <4 x i64>*
  store <4 x i64> %130, <4 x i64>* %133, align 1
  %134 = getelementptr inbounds i8, i8* %126, i64 %1
  %135 = shufflevector <32 x i8> %110, <32 x i8> undef, <32 x i32> <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28>
  %136 = bitcast <32 x i8> %135 to <4 x i64>
  %137 = shufflevector <4 x i64> %136, <4 x i64> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %138 = shufflevector <4 x i64> %136, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 2, i32 3>
  %139 = bitcast i8* %134 to <4 x i64>*
  store <4 x i64> %137, <4 x i64>* %139, align 1
  %140 = getelementptr inbounds i8, i8* %134, i64 %9
  %141 = bitcast i8* %140 to <4 x i64>*
  store <4 x i64> %138, <4 x i64>* %141, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_dc_predictor_32x16_avx2(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) local_unnamed_addr #0 {
  %5 = bitcast i8* %2 to <16 x i8>*
  %6 = load <16 x i8>, <16 x i8>* %5, align 16
  %7 = getelementptr inbounds i8, i8* %2, i64 16
  %8 = bitcast i8* %7 to <16 x i8>*
  %9 = load <16 x i8>, <16 x i8>* %8, align 16
  %10 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %6, <16 x i8> zeroinitializer) #8
  %11 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %9, <16 x i8> zeroinitializer) #8
  %12 = bitcast <2 x i64> %10 to <8 x i16>
  %13 = bitcast <2 x i64> %11 to <8 x i16>
  %14 = add <8 x i16> %13, %12
  %15 = bitcast <8 x i16> %14 to <2 x i64>
  %16 = shufflevector <2 x i64> %15, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %17 = bitcast <2 x i64> %16 to <8 x i16>
  %18 = bitcast i8* %3 to <16 x i8>*
  %19 = load <16 x i8>, <16 x i8>* %18, align 16
  %20 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %19, <16 x i8> zeroinitializer) #8
  %21 = shufflevector <2 x i64> %20, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %22 = bitcast <2 x i64> %20 to <8 x i16>
  %23 = bitcast <2 x i64> %21 to <8 x i16>
  %24 = add <8 x i16> %14, %22
  %25 = add <8 x i16> %24, %23
  %26 = add <8 x i16> %25, %17
  %27 = bitcast <8 x i16> %26 to <4 x i32>
  %28 = extractelement <4 x i32> %27, i32 0
  %29 = trunc i32 %28 to i16
  %30 = add i16 %29, 24
  %31 = udiv i16 %30, 48
  %32 = trunc i16 %31 to i8
  %33 = insertelement <32 x i8> undef, i8 %32, i32 0
  %34 = shufflevector <32 x i8> %33, <32 x i8> undef, <32 x i32> zeroinitializer
  %35 = bitcast i8* %0 to <32 x i8>*
  store <32 x i8> %34, <32 x i8>* %35, align 1
  %36 = getelementptr inbounds i8, i8* %0, i64 %1
  %37 = bitcast i8* %36 to <32 x i8>*
  store <32 x i8> %34, <32 x i8>* %37, align 1
  %38 = getelementptr inbounds i8, i8* %36, i64 %1
  %39 = bitcast i8* %38 to <32 x i8>*
  store <32 x i8> %34, <32 x i8>* %39, align 1
  %40 = getelementptr inbounds i8, i8* %38, i64 %1
  %41 = bitcast i8* %40 to <32 x i8>*
  store <32 x i8> %34, <32 x i8>* %41, align 1
  %42 = getelementptr inbounds i8, i8* %40, i64 %1
  %43 = bitcast i8* %42 to <32 x i8>*
  store <32 x i8> %34, <32 x i8>* %43, align 1
  %44 = getelementptr inbounds i8, i8* %42, i64 %1
  %45 = bitcast i8* %44 to <32 x i8>*
  store <32 x i8> %34, <32 x i8>* %45, align 1
  %46 = getelementptr inbounds i8, i8* %44, i64 %1
  %47 = bitcast i8* %46 to <32 x i8>*
  store <32 x i8> %34, <32 x i8>* %47, align 1
  %48 = getelementptr inbounds i8, i8* %46, i64 %1
  %49 = bitcast i8* %48 to <32 x i8>*
  store <32 x i8> %34, <32 x i8>* %49, align 1
  %50 = getelementptr inbounds i8, i8* %48, i64 %1
  %51 = bitcast i8* %50 to <32 x i8>*
  store <32 x i8> %34, <32 x i8>* %51, align 1
  %52 = getelementptr inbounds i8, i8* %50, i64 %1
  %53 = bitcast i8* %52 to <32 x i8>*
  store <32 x i8> %34, <32 x i8>* %53, align 1
  %54 = getelementptr inbounds i8, i8* %52, i64 %1
  %55 = bitcast i8* %54 to <32 x i8>*
  store <32 x i8> %34, <32 x i8>* %55, align 1
  %56 = getelementptr inbounds i8, i8* %54, i64 %1
  %57 = bitcast i8* %56 to <32 x i8>*
  store <32 x i8> %34, <32 x i8>* %57, align 1
  %58 = getelementptr inbounds i8, i8* %56, i64 %1
  %59 = bitcast i8* %58 to <32 x i8>*
  store <32 x i8> %34, <32 x i8>* %59, align 1
  %60 = getelementptr inbounds i8, i8* %58, i64 %1
  %61 = bitcast i8* %60 to <32 x i8>*
  store <32 x i8> %34, <32 x i8>* %61, align 1
  %62 = getelementptr inbounds i8, i8* %60, i64 %1
  %63 = bitcast i8* %62 to <32 x i8>*
  store <32 x i8> %34, <32 x i8>* %63, align 1
  %64 = getelementptr inbounds i8, i8* %62, i64 %1
  %65 = bitcast i8* %64 to <32 x i8>*
  store <32 x i8> %34, <32 x i8>* %65, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_dc_predictor_32x64_avx2(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) local_unnamed_addr #0 {
  %5 = bitcast i8* %2 to <32 x i8>*
  %6 = load <32 x i8>, <32 x i8>* %5, align 1
  %7 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %6, <32 x i8> zeroinitializer) #8
  %8 = shufflevector <4 x i64> %7, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %9 = add <4 x i64> %8, %7
  %10 = shufflevector <4 x i64> %9, <4 x i64> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %11 = bitcast <4 x i64> %9 to <16 x i16>
  %12 = bitcast <4 x i64> %10 to <16 x i16>
  %13 = bitcast i8* %3 to <32 x i8>*
  %14 = load <32 x i8>, <32 x i8>* %13, align 1
  %15 = getelementptr inbounds i8, i8* %3, i64 32
  %16 = bitcast i8* %15 to <32 x i8>*
  %17 = load <32 x i8>, <32 x i8>* %16, align 1
  %18 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %14, <32 x i8> zeroinitializer) #8
  %19 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %17, <32 x i8> zeroinitializer) #8
  %20 = add <4 x i64> %19, %18
  %21 = shufflevector <4 x i64> %20, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %22 = add <4 x i64> %21, %20
  %23 = shufflevector <4 x i64> %22, <4 x i64> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %24 = bitcast <4 x i64> %22 to <16 x i16>
  %25 = bitcast <4 x i64> %23 to <16 x i16>
  %26 = add <16 x i16> %12, %11
  %27 = add <16 x i16> %26, %24
  %28 = add <16 x i16> %27, %25
  %29 = bitcast <16 x i16> %28 to <4 x i64>
  %30 = shufflevector <4 x i64> %29, <4 x i64> undef, <2 x i32> <i32 0, i32 undef>
  %31 = bitcast <2 x i64> %30 to <4 x i32>
  %32 = extractelement <4 x i32> %31, i32 0
  %33 = trunc i32 %32 to i16
  %34 = add i16 %33, 48
  %35 = udiv i16 %34, 96
  %36 = trunc i16 %35 to i8
  %37 = insertelement <32 x i8> undef, i8 %36, i32 0
  %38 = shufflevector <32 x i8> %37, <32 x i8> undef, <32 x i32> zeroinitializer
  %39 = bitcast i8* %0 to <32 x i8>*
  store <32 x i8> %38, <32 x i8>* %39, align 1
  %40 = getelementptr inbounds i8, i8* %0, i64 %1
  %41 = bitcast i8* %40 to <32 x i8>*
  store <32 x i8> %38, <32 x i8>* %41, align 1
  %42 = getelementptr inbounds i8, i8* %40, i64 %1
  %43 = bitcast i8* %42 to <32 x i8>*
  store <32 x i8> %38, <32 x i8>* %43, align 1
  %44 = getelementptr inbounds i8, i8* %42, i64 %1
  %45 = bitcast i8* %44 to <32 x i8>*
  store <32 x i8> %38, <32 x i8>* %45, align 1
  %46 = getelementptr inbounds i8, i8* %44, i64 %1
  %47 = bitcast i8* %46 to <32 x i8>*
  store <32 x i8> %38, <32 x i8>* %47, align 1
  %48 = getelementptr inbounds i8, i8* %46, i64 %1
  %49 = bitcast i8* %48 to <32 x i8>*
  store <32 x i8> %38, <32 x i8>* %49, align 1
  %50 = getelementptr inbounds i8, i8* %48, i64 %1
  %51 = bitcast i8* %50 to <32 x i8>*
  store <32 x i8> %38, <32 x i8>* %51, align 1
  %52 = getelementptr inbounds i8, i8* %50, i64 %1
  %53 = bitcast i8* %52 to <32 x i8>*
  store <32 x i8> %38, <32 x i8>* %53, align 1
  %54 = getelementptr inbounds i8, i8* %52, i64 %1
  %55 = bitcast i8* %54 to <32 x i8>*
  store <32 x i8> %38, <32 x i8>* %55, align 1
  %56 = getelementptr inbounds i8, i8* %54, i64 %1
  %57 = bitcast i8* %56 to <32 x i8>*
  store <32 x i8> %38, <32 x i8>* %57, align 1
  %58 = getelementptr inbounds i8, i8* %56, i64 %1
  %59 = bitcast i8* %58 to <32 x i8>*
  store <32 x i8> %38, <32 x i8>* %59, align 1
  %60 = getelementptr inbounds i8, i8* %58, i64 %1
  %61 = bitcast i8* %60 to <32 x i8>*
  store <32 x i8> %38, <32 x i8>* %61, align 1
  %62 = getelementptr inbounds i8, i8* %60, i64 %1
  %63 = bitcast i8* %62 to <32 x i8>*
  store <32 x i8> %38, <32 x i8>* %63, align 1
  %64 = getelementptr inbounds i8, i8* %62, i64 %1
  %65 = bitcast i8* %64 to <32 x i8>*
  store <32 x i8> %38, <32 x i8>* %65, align 1
  %66 = getelementptr inbounds i8, i8* %64, i64 %1
  %67 = bitcast i8* %66 to <32 x i8>*
  store <32 x i8> %38, <32 x i8>* %67, align 1
  %68 = getelementptr inbounds i8, i8* %66, i64 %1
  %69 = bitcast i8* %68 to <32 x i8>*
  store <32 x i8> %38, <32 x i8>* %69, align 1
  %70 = getelementptr inbounds i8, i8* %68, i64 %1
  %71 = bitcast i8* %70 to <32 x i8>*
  store <32 x i8> %38, <32 x i8>* %71, align 1
  %72 = getelementptr inbounds i8, i8* %70, i64 %1
  %73 = bitcast i8* %72 to <32 x i8>*
  store <32 x i8> %38, <32 x i8>* %73, align 1
  %74 = getelementptr inbounds i8, i8* %72, i64 %1
  %75 = bitcast i8* %74 to <32 x i8>*
  store <32 x i8> %38, <32 x i8>* %75, align 1
  %76 = getelementptr inbounds i8, i8* %74, i64 %1
  %77 = bitcast i8* %76 to <32 x i8>*
  store <32 x i8> %38, <32 x i8>* %77, align 1
  %78 = getelementptr inbounds i8, i8* %76, i64 %1
  %79 = bitcast i8* %78 to <32 x i8>*
  store <32 x i8> %38, <32 x i8>* %79, align 1
  %80 = getelementptr inbounds i8, i8* %78, i64 %1
  %81 = bitcast i8* %80 to <32 x i8>*
  store <32 x i8> %38, <32 x i8>* %81, align 1
  %82 = getelementptr inbounds i8, i8* %80, i64 %1
  %83 = bitcast i8* %82 to <32 x i8>*
  store <32 x i8> %38, <32 x i8>* %83, align 1
  %84 = getelementptr inbounds i8, i8* %82, i64 %1
  %85 = bitcast i8* %84 to <32 x i8>*
  store <32 x i8> %38, <32 x i8>* %85, align 1
  %86 = getelementptr inbounds i8, i8* %84, i64 %1
  %87 = bitcast i8* %86 to <32 x i8>*
  store <32 x i8> %38, <32 x i8>* %87, align 1
  %88 = getelementptr inbounds i8, i8* %86, i64 %1
  %89 = bitcast i8* %88 to <32 x i8>*
  store <32 x i8> %38, <32 x i8>* %89, align 1
  %90 = getelementptr inbounds i8, i8* %88, i64 %1
  %91 = bitcast i8* %90 to <32 x i8>*
  store <32 x i8> %38, <32 x i8>* %91, align 1
  %92 = getelementptr inbounds i8, i8* %90, i64 %1
  %93 = bitcast i8* %92 to <32 x i8>*
  store <32 x i8> %38, <32 x i8>* %93, align 1
  %94 = getelementptr inbounds i8, i8* %92, i64 %1
  %95 = bitcast i8* %94 to <32 x i8>*
  store <32 x i8> %38, <32 x i8>* %95, align 1
  %96 = getelementptr inbounds i8, i8* %94, i64 %1
  %97 = bitcast i8* %96 to <32 x i8>*
  store <32 x i8> %38, <32 x i8>* %97, align 1
  %98 = getelementptr inbounds i8, i8* %96, i64 %1
  %99 = bitcast i8* %98 to <32 x i8>*
  store <32 x i8> %38, <32 x i8>* %99, align 1
  %100 = getelementptr inbounds i8, i8* %98, i64 %1
  %101 = bitcast i8* %100 to <32 x i8>*
  store <32 x i8> %38, <32 x i8>* %101, align 1
  %102 = getelementptr inbounds i8, i8* %100, i64 %1
  %103 = bitcast i8* %102 to <32 x i8>*
  store <32 x i8> %38, <32 x i8>* %103, align 1
  %104 = getelementptr inbounds i8, i8* %102, i64 %1
  %105 = bitcast i8* %104 to <32 x i8>*
  store <32 x i8> %38, <32 x i8>* %105, align 1
  %106 = getelementptr inbounds i8, i8* %104, i64 %1
  %107 = bitcast i8* %106 to <32 x i8>*
  store <32 x i8> %38, <32 x i8>* %107, align 1
  %108 = getelementptr inbounds i8, i8* %106, i64 %1
  %109 = bitcast i8* %108 to <32 x i8>*
  store <32 x i8> %38, <32 x i8>* %109, align 1
  %110 = getelementptr inbounds i8, i8* %108, i64 %1
  %111 = bitcast i8* %110 to <32 x i8>*
  store <32 x i8> %38, <32 x i8>* %111, align 1
  %112 = getelementptr inbounds i8, i8* %110, i64 %1
  %113 = bitcast i8* %112 to <32 x i8>*
  store <32 x i8> %38, <32 x i8>* %113, align 1
  %114 = getelementptr inbounds i8, i8* %112, i64 %1
  %115 = bitcast i8* %114 to <32 x i8>*
  store <32 x i8> %38, <32 x i8>* %115, align 1
  %116 = getelementptr inbounds i8, i8* %114, i64 %1
  %117 = bitcast i8* %116 to <32 x i8>*
  store <32 x i8> %38, <32 x i8>* %117, align 1
  %118 = getelementptr inbounds i8, i8* %116, i64 %1
  %119 = bitcast i8* %118 to <32 x i8>*
  store <32 x i8> %38, <32 x i8>* %119, align 1
  %120 = getelementptr inbounds i8, i8* %118, i64 %1
  %121 = bitcast i8* %120 to <32 x i8>*
  store <32 x i8> %38, <32 x i8>* %121, align 1
  %122 = getelementptr inbounds i8, i8* %120, i64 %1
  %123 = bitcast i8* %122 to <32 x i8>*
  store <32 x i8> %38, <32 x i8>* %123, align 1
  %124 = getelementptr inbounds i8, i8* %122, i64 %1
  %125 = bitcast i8* %124 to <32 x i8>*
  store <32 x i8> %38, <32 x i8>* %125, align 1
  %126 = getelementptr inbounds i8, i8* %124, i64 %1
  %127 = bitcast i8* %126 to <32 x i8>*
  store <32 x i8> %38, <32 x i8>* %127, align 1
  %128 = getelementptr inbounds i8, i8* %126, i64 %1
  %129 = bitcast i8* %128 to <32 x i8>*
  store <32 x i8> %38, <32 x i8>* %129, align 1
  %130 = getelementptr inbounds i8, i8* %128, i64 %1
  %131 = bitcast i8* %130 to <32 x i8>*
  store <32 x i8> %38, <32 x i8>* %131, align 1
  %132 = getelementptr inbounds i8, i8* %130, i64 %1
  %133 = bitcast i8* %132 to <32 x i8>*
  store <32 x i8> %38, <32 x i8>* %133, align 1
  %134 = getelementptr inbounds i8, i8* %132, i64 %1
  %135 = bitcast i8* %134 to <32 x i8>*
  store <32 x i8> %38, <32 x i8>* %135, align 1
  %136 = getelementptr inbounds i8, i8* %134, i64 %1
  %137 = bitcast i8* %136 to <32 x i8>*
  store <32 x i8> %38, <32 x i8>* %137, align 1
  %138 = getelementptr inbounds i8, i8* %136, i64 %1
  %139 = bitcast i8* %138 to <32 x i8>*
  store <32 x i8> %38, <32 x i8>* %139, align 1
  %140 = getelementptr inbounds i8, i8* %138, i64 %1
  %141 = bitcast i8* %140 to <32 x i8>*
  store <32 x i8> %38, <32 x i8>* %141, align 1
  %142 = getelementptr inbounds i8, i8* %140, i64 %1
  %143 = bitcast i8* %142 to <32 x i8>*
  store <32 x i8> %38, <32 x i8>* %143, align 1
  %144 = getelementptr inbounds i8, i8* %142, i64 %1
  %145 = bitcast i8* %144 to <32 x i8>*
  store <32 x i8> %38, <32 x i8>* %145, align 1
  %146 = getelementptr inbounds i8, i8* %144, i64 %1
  %147 = bitcast i8* %146 to <32 x i8>*
  store <32 x i8> %38, <32 x i8>* %147, align 1
  %148 = getelementptr inbounds i8, i8* %146, i64 %1
  %149 = bitcast i8* %148 to <32 x i8>*
  store <32 x i8> %38, <32 x i8>* %149, align 1
  %150 = getelementptr inbounds i8, i8* %148, i64 %1
  %151 = bitcast i8* %150 to <32 x i8>*
  store <32 x i8> %38, <32 x i8>* %151, align 1
  %152 = getelementptr inbounds i8, i8* %150, i64 %1
  %153 = bitcast i8* %152 to <32 x i8>*
  store <32 x i8> %38, <32 x i8>* %153, align 1
  %154 = getelementptr inbounds i8, i8* %152, i64 %1
  %155 = bitcast i8* %154 to <32 x i8>*
  store <32 x i8> %38, <32 x i8>* %155, align 1
  %156 = getelementptr inbounds i8, i8* %154, i64 %1
  %157 = bitcast i8* %156 to <32 x i8>*
  store <32 x i8> %38, <32 x i8>* %157, align 1
  %158 = getelementptr inbounds i8, i8* %156, i64 %1
  %159 = bitcast i8* %158 to <32 x i8>*
  store <32 x i8> %38, <32 x i8>* %159, align 1
  %160 = getelementptr inbounds i8, i8* %158, i64 %1
  %161 = bitcast i8* %160 to <32 x i8>*
  store <32 x i8> %38, <32 x i8>* %161, align 1
  %162 = getelementptr inbounds i8, i8* %160, i64 %1
  %163 = bitcast i8* %162 to <32 x i8>*
  store <32 x i8> %38, <32 x i8>* %163, align 1
  %164 = getelementptr inbounds i8, i8* %162, i64 %1
  %165 = bitcast i8* %164 to <32 x i8>*
  store <32 x i8> %38, <32 x i8>* %165, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_dc_predictor_64x64_avx2(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) local_unnamed_addr #0 {
  %5 = bitcast i8* %2 to <32 x i8>*
  %6 = load <32 x i8>, <32 x i8>* %5, align 1
  %7 = getelementptr inbounds i8, i8* %2, i64 32
  %8 = bitcast i8* %7 to <32 x i8>*
  %9 = load <32 x i8>, <32 x i8>* %8, align 1
  %10 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %6, <32 x i8> zeroinitializer) #8
  %11 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %9, <32 x i8> zeroinitializer) #8
  %12 = add <4 x i64> %11, %10
  %13 = shufflevector <4 x i64> %12, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %14 = add <4 x i64> %13, %12
  %15 = shufflevector <4 x i64> %14, <4 x i64> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %16 = bitcast <4 x i64> %14 to <16 x i16>
  %17 = bitcast <4 x i64> %15 to <16 x i16>
  %18 = bitcast i8* %3 to <32 x i8>*
  %19 = load <32 x i8>, <32 x i8>* %18, align 1
  %20 = getelementptr inbounds i8, i8* %3, i64 32
  %21 = bitcast i8* %20 to <32 x i8>*
  %22 = load <32 x i8>, <32 x i8>* %21, align 1
  %23 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %19, <32 x i8> zeroinitializer) #8
  %24 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %22, <32 x i8> zeroinitializer) #8
  %25 = add <4 x i64> %24, %23
  %26 = shufflevector <4 x i64> %25, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %27 = add <4 x i64> %26, %25
  %28 = shufflevector <4 x i64> %27, <4 x i64> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %29 = bitcast <4 x i64> %27 to <16 x i16>
  %30 = bitcast <4 x i64> %28 to <16 x i16>
  %31 = add <16 x i16> %17, %16
  %32 = add <16 x i16> %31, %29
  %33 = add <16 x i16> %32, %30
  %34 = bitcast <16 x i16> %33 to <4 x i64>
  %35 = shufflevector <4 x i64> %34, <4 x i64> undef, <2 x i32> <i32 0, i32 undef>
  %36 = bitcast <2 x i64> %35 to <4 x i32>
  %37 = extractelement <4 x i32> %36, i32 0
  %38 = add i32 %37, 64
  %39 = lshr i32 %38, 7
  %40 = trunc i32 %39 to i8
  %41 = insertelement <32 x i8> undef, i8 %40, i32 0
  %42 = shufflevector <32 x i8> %41, <32 x i8> undef, <32 x i32> zeroinitializer
  br label %43

43:                                               ; preds = %43, %4
  %44 = phi i32 [ 0, %4 ], [ %78, %43 ]
  %45 = phi i8* [ %0, %4 ], [ %77, %43 ]
  %46 = bitcast i8* %45 to <32 x i8>*
  store <32 x i8> %42, <32 x i8>* %46, align 1
  %47 = getelementptr inbounds i8, i8* %45, i64 32
  %48 = bitcast i8* %47 to <32 x i8>*
  store <32 x i8> %42, <32 x i8>* %48, align 1
  %49 = getelementptr inbounds i8, i8* %45, i64 %1
  %50 = bitcast i8* %49 to <32 x i8>*
  store <32 x i8> %42, <32 x i8>* %50, align 1
  %51 = getelementptr inbounds i8, i8* %49, i64 32
  %52 = bitcast i8* %51 to <32 x i8>*
  store <32 x i8> %42, <32 x i8>* %52, align 1
  %53 = getelementptr inbounds i8, i8* %49, i64 %1
  %54 = bitcast i8* %53 to <32 x i8>*
  store <32 x i8> %42, <32 x i8>* %54, align 1
  %55 = getelementptr inbounds i8, i8* %53, i64 32
  %56 = bitcast i8* %55 to <32 x i8>*
  store <32 x i8> %42, <32 x i8>* %56, align 1
  %57 = getelementptr inbounds i8, i8* %53, i64 %1
  %58 = bitcast i8* %57 to <32 x i8>*
  store <32 x i8> %42, <32 x i8>* %58, align 1
  %59 = getelementptr inbounds i8, i8* %57, i64 32
  %60 = bitcast i8* %59 to <32 x i8>*
  store <32 x i8> %42, <32 x i8>* %60, align 1
  %61 = getelementptr inbounds i8, i8* %57, i64 %1
  %62 = bitcast i8* %61 to <32 x i8>*
  store <32 x i8> %42, <32 x i8>* %62, align 1
  %63 = getelementptr inbounds i8, i8* %61, i64 32
  %64 = bitcast i8* %63 to <32 x i8>*
  store <32 x i8> %42, <32 x i8>* %64, align 1
  %65 = getelementptr inbounds i8, i8* %61, i64 %1
  %66 = bitcast i8* %65 to <32 x i8>*
  store <32 x i8> %42, <32 x i8>* %66, align 1
  %67 = getelementptr inbounds i8, i8* %65, i64 32
  %68 = bitcast i8* %67 to <32 x i8>*
  store <32 x i8> %42, <32 x i8>* %68, align 1
  %69 = getelementptr inbounds i8, i8* %65, i64 %1
  %70 = bitcast i8* %69 to <32 x i8>*
  store <32 x i8> %42, <32 x i8>* %70, align 1
  %71 = getelementptr inbounds i8, i8* %69, i64 32
  %72 = bitcast i8* %71 to <32 x i8>*
  store <32 x i8> %42, <32 x i8>* %72, align 1
  %73 = getelementptr inbounds i8, i8* %69, i64 %1
  %74 = bitcast i8* %73 to <32 x i8>*
  store <32 x i8> %42, <32 x i8>* %74, align 1
  %75 = getelementptr inbounds i8, i8* %73, i64 32
  %76 = bitcast i8* %75 to <32 x i8>*
  store <32 x i8> %42, <32 x i8>* %76, align 1
  %77 = getelementptr inbounds i8, i8* %73, i64 %1
  %78 = add nuw nsw i32 %44, 8
  %79 = icmp eq i32 %78, 64
  br i1 %79, label %80, label %43

80:                                               ; preds = %43
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_dc_predictor_64x32_avx2(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) local_unnamed_addr #0 {
  %5 = bitcast i8* %2 to <32 x i8>*
  %6 = load <32 x i8>, <32 x i8>* %5, align 1
  %7 = getelementptr inbounds i8, i8* %2, i64 32
  %8 = bitcast i8* %7 to <32 x i8>*
  %9 = load <32 x i8>, <32 x i8>* %8, align 1
  %10 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %6, <32 x i8> zeroinitializer) #8
  %11 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %9, <32 x i8> zeroinitializer) #8
  %12 = add <4 x i64> %11, %10
  %13 = shufflevector <4 x i64> %12, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %14 = add <4 x i64> %13, %12
  %15 = shufflevector <4 x i64> %14, <4 x i64> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %16 = bitcast <4 x i64> %14 to <16 x i16>
  %17 = bitcast <4 x i64> %15 to <16 x i16>
  %18 = bitcast i8* %3 to <32 x i8>*
  %19 = load <32 x i8>, <32 x i8>* %18, align 1
  %20 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %19, <32 x i8> zeroinitializer) #8
  %21 = shufflevector <4 x i64> %20, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %22 = add <4 x i64> %21, %20
  %23 = shufflevector <4 x i64> %22, <4 x i64> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %24 = bitcast <4 x i64> %22 to <16 x i16>
  %25 = bitcast <4 x i64> %23 to <16 x i16>
  %26 = add <16 x i16> %17, %16
  %27 = add <16 x i16> %26, %24
  %28 = add <16 x i16> %27, %25
  %29 = bitcast <16 x i16> %28 to <4 x i64>
  %30 = shufflevector <4 x i64> %29, <4 x i64> undef, <2 x i32> <i32 0, i32 undef>
  %31 = bitcast <2 x i64> %30 to <4 x i32>
  %32 = extractelement <4 x i32> %31, i32 0
  %33 = trunc i32 %32 to i16
  %34 = add i16 %33, 48
  %35 = udiv i16 %34, 96
  %36 = trunc i16 %35 to i8
  %37 = insertelement <32 x i8> undef, i8 %36, i32 0
  %38 = shufflevector <32 x i8> %37, <32 x i8> undef, <32 x i32> zeroinitializer
  %39 = bitcast i8* %0 to <32 x i8>*
  store <32 x i8> %38, <32 x i8>* %39, align 1
  %40 = getelementptr inbounds i8, i8* %0, i64 32
  %41 = bitcast i8* %40 to <32 x i8>*
  store <32 x i8> %38, <32 x i8>* %41, align 1
  %42 = getelementptr inbounds i8, i8* %0, i64 %1
  %43 = bitcast i8* %42 to <32 x i8>*
  store <32 x i8> %38, <32 x i8>* %43, align 1
  %44 = getelementptr inbounds i8, i8* %42, i64 32
  %45 = bitcast i8* %44 to <32 x i8>*
  store <32 x i8> %38, <32 x i8>* %45, align 1
  %46 = getelementptr inbounds i8, i8* %42, i64 %1
  %47 = bitcast i8* %46 to <32 x i8>*
  store <32 x i8> %38, <32 x i8>* %47, align 1
  %48 = getelementptr inbounds i8, i8* %46, i64 32
  %49 = bitcast i8* %48 to <32 x i8>*
  store <32 x i8> %38, <32 x i8>* %49, align 1
  %50 = getelementptr inbounds i8, i8* %46, i64 %1
  %51 = bitcast i8* %50 to <32 x i8>*
  store <32 x i8> %38, <32 x i8>* %51, align 1
  %52 = getelementptr inbounds i8, i8* %50, i64 32
  %53 = bitcast i8* %52 to <32 x i8>*
  store <32 x i8> %38, <32 x i8>* %53, align 1
  %54 = getelementptr inbounds i8, i8* %50, i64 %1
  %55 = bitcast i8* %54 to <32 x i8>*
  store <32 x i8> %38, <32 x i8>* %55, align 1
  %56 = getelementptr inbounds i8, i8* %54, i64 32
  %57 = bitcast i8* %56 to <32 x i8>*
  store <32 x i8> %38, <32 x i8>* %57, align 1
  %58 = getelementptr inbounds i8, i8* %54, i64 %1
  %59 = bitcast i8* %58 to <32 x i8>*
  store <32 x i8> %38, <32 x i8>* %59, align 1
  %60 = getelementptr inbounds i8, i8* %58, i64 32
  %61 = bitcast i8* %60 to <32 x i8>*
  store <32 x i8> %38, <32 x i8>* %61, align 1
  %62 = getelementptr inbounds i8, i8* %58, i64 %1
  %63 = bitcast i8* %62 to <32 x i8>*
  store <32 x i8> %38, <32 x i8>* %63, align 1
  %64 = getelementptr inbounds i8, i8* %62, i64 32
  %65 = bitcast i8* %64 to <32 x i8>*
  store <32 x i8> %38, <32 x i8>* %65, align 1
  %66 = getelementptr inbounds i8, i8* %62, i64 %1
  %67 = bitcast i8* %66 to <32 x i8>*
  store <32 x i8> %38, <32 x i8>* %67, align 1
  %68 = getelementptr inbounds i8, i8* %66, i64 32
  %69 = bitcast i8* %68 to <32 x i8>*
  store <32 x i8> %38, <32 x i8>* %69, align 1
  %70 = getelementptr inbounds i8, i8* %66, i64 %1
  %71 = bitcast i8* %70 to <32 x i8>*
  store <32 x i8> %38, <32 x i8>* %71, align 1
  %72 = getelementptr inbounds i8, i8* %70, i64 32
  %73 = bitcast i8* %72 to <32 x i8>*
  store <32 x i8> %38, <32 x i8>* %73, align 1
  %74 = getelementptr inbounds i8, i8* %70, i64 %1
  %75 = bitcast i8* %74 to <32 x i8>*
  store <32 x i8> %38, <32 x i8>* %75, align 1
  %76 = getelementptr inbounds i8, i8* %74, i64 32
  %77 = bitcast i8* %76 to <32 x i8>*
  store <32 x i8> %38, <32 x i8>* %77, align 1
  %78 = getelementptr inbounds i8, i8* %74, i64 %1
  %79 = bitcast i8* %78 to <32 x i8>*
  store <32 x i8> %38, <32 x i8>* %79, align 1
  %80 = getelementptr inbounds i8, i8* %78, i64 32
  %81 = bitcast i8* %80 to <32 x i8>*
  store <32 x i8> %38, <32 x i8>* %81, align 1
  %82 = getelementptr inbounds i8, i8* %78, i64 %1
  %83 = bitcast i8* %82 to <32 x i8>*
  store <32 x i8> %38, <32 x i8>* %83, align 1
  %84 = getelementptr inbounds i8, i8* %82, i64 32
  %85 = bitcast i8* %84 to <32 x i8>*
  store <32 x i8> %38, <32 x i8>* %85, align 1
  %86 = getelementptr inbounds i8, i8* %82, i64 %1
  %87 = bitcast i8* %86 to <32 x i8>*
  store <32 x i8> %38, <32 x i8>* %87, align 1
  %88 = getelementptr inbounds i8, i8* %86, i64 32
  %89 = bitcast i8* %88 to <32 x i8>*
  store <32 x i8> %38, <32 x i8>* %89, align 1
  %90 = getelementptr inbounds i8, i8* %86, i64 %1
  %91 = bitcast i8* %90 to <32 x i8>*
  store <32 x i8> %38, <32 x i8>* %91, align 1
  %92 = getelementptr inbounds i8, i8* %90, i64 32
  %93 = bitcast i8* %92 to <32 x i8>*
  store <32 x i8> %38, <32 x i8>* %93, align 1
  %94 = getelementptr inbounds i8, i8* %90, i64 %1
  %95 = bitcast i8* %94 to <32 x i8>*
  store <32 x i8> %38, <32 x i8>* %95, align 1
  %96 = getelementptr inbounds i8, i8* %94, i64 32
  %97 = bitcast i8* %96 to <32 x i8>*
  store <32 x i8> %38, <32 x i8>* %97, align 1
  %98 = getelementptr inbounds i8, i8* %94, i64 %1
  %99 = bitcast i8* %98 to <32 x i8>*
  store <32 x i8> %38, <32 x i8>* %99, align 1
  %100 = getelementptr inbounds i8, i8* %98, i64 32
  %101 = bitcast i8* %100 to <32 x i8>*
  store <32 x i8> %38, <32 x i8>* %101, align 1
  %102 = getelementptr inbounds i8, i8* %98, i64 %1
  %103 = bitcast i8* %102 to <32 x i8>*
  store <32 x i8> %38, <32 x i8>* %103, align 1
  %104 = getelementptr inbounds i8, i8* %102, i64 32
  %105 = bitcast i8* %104 to <32 x i8>*
  store <32 x i8> %38, <32 x i8>* %105, align 1
  %106 = getelementptr inbounds i8, i8* %102, i64 %1
  %107 = bitcast i8* %106 to <32 x i8>*
  store <32 x i8> %38, <32 x i8>* %107, align 1
  %108 = getelementptr inbounds i8, i8* %106, i64 32
  %109 = bitcast i8* %108 to <32 x i8>*
  store <32 x i8> %38, <32 x i8>* %109, align 1
  %110 = getelementptr inbounds i8, i8* %106, i64 %1
  %111 = bitcast i8* %110 to <32 x i8>*
  store <32 x i8> %38, <32 x i8>* %111, align 1
  %112 = getelementptr inbounds i8, i8* %110, i64 32
  %113 = bitcast i8* %112 to <32 x i8>*
  store <32 x i8> %38, <32 x i8>* %113, align 1
  %114 = getelementptr inbounds i8, i8* %110, i64 %1
  %115 = bitcast i8* %114 to <32 x i8>*
  store <32 x i8> %38, <32 x i8>* %115, align 1
  %116 = getelementptr inbounds i8, i8* %114, i64 32
  %117 = bitcast i8* %116 to <32 x i8>*
  store <32 x i8> %38, <32 x i8>* %117, align 1
  %118 = getelementptr inbounds i8, i8* %114, i64 %1
  %119 = bitcast i8* %118 to <32 x i8>*
  store <32 x i8> %38, <32 x i8>* %119, align 1
  %120 = getelementptr inbounds i8, i8* %118, i64 32
  %121 = bitcast i8* %120 to <32 x i8>*
  store <32 x i8> %38, <32 x i8>* %121, align 1
  %122 = getelementptr inbounds i8, i8* %118, i64 %1
  %123 = bitcast i8* %122 to <32 x i8>*
  store <32 x i8> %38, <32 x i8>* %123, align 1
  %124 = getelementptr inbounds i8, i8* %122, i64 32
  %125 = bitcast i8* %124 to <32 x i8>*
  store <32 x i8> %38, <32 x i8>* %125, align 1
  %126 = getelementptr inbounds i8, i8* %122, i64 %1
  %127 = bitcast i8* %126 to <32 x i8>*
  store <32 x i8> %38, <32 x i8>* %127, align 1
  %128 = getelementptr inbounds i8, i8* %126, i64 32
  %129 = bitcast i8* %128 to <32 x i8>*
  store <32 x i8> %38, <32 x i8>* %129, align 1
  %130 = getelementptr inbounds i8, i8* %126, i64 %1
  %131 = bitcast i8* %130 to <32 x i8>*
  store <32 x i8> %38, <32 x i8>* %131, align 1
  %132 = getelementptr inbounds i8, i8* %130, i64 32
  %133 = bitcast i8* %132 to <32 x i8>*
  store <32 x i8> %38, <32 x i8>* %133, align 1
  %134 = getelementptr inbounds i8, i8* %130, i64 %1
  %135 = bitcast i8* %134 to <32 x i8>*
  store <32 x i8> %38, <32 x i8>* %135, align 1
  %136 = getelementptr inbounds i8, i8* %134, i64 32
  %137 = bitcast i8* %136 to <32 x i8>*
  store <32 x i8> %38, <32 x i8>* %137, align 1
  %138 = getelementptr inbounds i8, i8* %134, i64 %1
  %139 = bitcast i8* %138 to <32 x i8>*
  store <32 x i8> %38, <32 x i8>* %139, align 1
  %140 = getelementptr inbounds i8, i8* %138, i64 32
  %141 = bitcast i8* %140 to <32 x i8>*
  store <32 x i8> %38, <32 x i8>* %141, align 1
  %142 = getelementptr inbounds i8, i8* %138, i64 %1
  %143 = bitcast i8* %142 to <32 x i8>*
  store <32 x i8> %38, <32 x i8>* %143, align 1
  %144 = getelementptr inbounds i8, i8* %142, i64 32
  %145 = bitcast i8* %144 to <32 x i8>*
  store <32 x i8> %38, <32 x i8>* %145, align 1
  %146 = getelementptr inbounds i8, i8* %142, i64 %1
  %147 = bitcast i8* %146 to <32 x i8>*
  store <32 x i8> %38, <32 x i8>* %147, align 1
  %148 = getelementptr inbounds i8, i8* %146, i64 32
  %149 = bitcast i8* %148 to <32 x i8>*
  store <32 x i8> %38, <32 x i8>* %149, align 1
  %150 = getelementptr inbounds i8, i8* %146, i64 %1
  %151 = bitcast i8* %150 to <32 x i8>*
  store <32 x i8> %38, <32 x i8>* %151, align 1
  %152 = getelementptr inbounds i8, i8* %150, i64 32
  %153 = bitcast i8* %152 to <32 x i8>*
  store <32 x i8> %38, <32 x i8>* %153, align 1
  %154 = getelementptr inbounds i8, i8* %150, i64 %1
  %155 = bitcast i8* %154 to <32 x i8>*
  store <32 x i8> %38, <32 x i8>* %155, align 1
  %156 = getelementptr inbounds i8, i8* %154, i64 32
  %157 = bitcast i8* %156 to <32 x i8>*
  store <32 x i8> %38, <32 x i8>* %157, align 1
  %158 = getelementptr inbounds i8, i8* %154, i64 %1
  %159 = bitcast i8* %158 to <32 x i8>*
  store <32 x i8> %38, <32 x i8>* %159, align 1
  %160 = getelementptr inbounds i8, i8* %158, i64 32
  %161 = bitcast i8* %160 to <32 x i8>*
  store <32 x i8> %38, <32 x i8>* %161, align 1
  %162 = getelementptr inbounds i8, i8* %158, i64 %1
  %163 = bitcast i8* %162 to <32 x i8>*
  store <32 x i8> %38, <32 x i8>* %163, align 1
  %164 = getelementptr inbounds i8, i8* %162, i64 32
  %165 = bitcast i8* %164 to <32 x i8>*
  store <32 x i8> %38, <32 x i8>* %165, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_dc_predictor_64x16_avx2(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) local_unnamed_addr #0 {
  %5 = bitcast i8* %2 to <32 x i8>*
  %6 = load <32 x i8>, <32 x i8>* %5, align 1
  %7 = getelementptr inbounds i8, i8* %2, i64 32
  %8 = bitcast i8* %7 to <32 x i8>*
  %9 = load <32 x i8>, <32 x i8>* %8, align 1
  %10 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %6, <32 x i8> zeroinitializer) #8
  %11 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %9, <32 x i8> zeroinitializer) #8
  %12 = add <4 x i64> %11, %10
  %13 = shufflevector <4 x i64> %12, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %14 = add <4 x i64> %13, %12
  %15 = shufflevector <4 x i64> %14, <4 x i64> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %16 = bitcast <4 x i64> %14 to <16 x i16>
  %17 = bitcast <4 x i64> %15 to <16 x i16>
  %18 = add <16 x i16> %17, %16
  %19 = bitcast i8* %3 to <16 x i8>*
  %20 = load <16 x i8>, <16 x i8>* %19, align 16
  %21 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %20, <16 x i8> zeroinitializer) #8
  %22 = shufflevector <2 x i64> %21, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %23 = bitcast <2 x i64> %21 to <8 x i16>
  %24 = bitcast <2 x i64> %22 to <8 x i16>
  %25 = add <8 x i16> %24, %23
  %26 = bitcast <8 x i16> %25 to <2 x i64>
  %27 = shufflevector <2 x i64> %26, <2 x i64> undef, <4 x i32> <i32 0, i32 undef, i32 undef, i32 undef>
  %28 = bitcast <4 x i64> %27 to <16 x i16>
  %29 = add <16 x i16> %18, %28
  %30 = bitcast <16 x i16> %29 to <4 x i64>
  %31 = shufflevector <4 x i64> %30, <4 x i64> undef, <2 x i32> <i32 0, i32 undef>
  %32 = bitcast <2 x i64> %31 to <4 x i32>
  %33 = extractelement <4 x i32> %32, i32 0
  %34 = trunc i32 %33 to i16
  %35 = add i16 %34, 40
  %36 = udiv i16 %35, 80
  %37 = trunc i16 %36 to i8
  %38 = insertelement <32 x i8> undef, i8 %37, i32 0
  %39 = shufflevector <32 x i8> %38, <32 x i8> undef, <32 x i32> zeroinitializer
  %40 = bitcast i8* %0 to <32 x i8>*
  store <32 x i8> %39, <32 x i8>* %40, align 1
  %41 = getelementptr inbounds i8, i8* %0, i64 32
  %42 = bitcast i8* %41 to <32 x i8>*
  store <32 x i8> %39, <32 x i8>* %42, align 1
  %43 = getelementptr inbounds i8, i8* %0, i64 %1
  %44 = bitcast i8* %43 to <32 x i8>*
  store <32 x i8> %39, <32 x i8>* %44, align 1
  %45 = getelementptr inbounds i8, i8* %43, i64 32
  %46 = bitcast i8* %45 to <32 x i8>*
  store <32 x i8> %39, <32 x i8>* %46, align 1
  %47 = getelementptr inbounds i8, i8* %43, i64 %1
  %48 = bitcast i8* %47 to <32 x i8>*
  store <32 x i8> %39, <32 x i8>* %48, align 1
  %49 = getelementptr inbounds i8, i8* %47, i64 32
  %50 = bitcast i8* %49 to <32 x i8>*
  store <32 x i8> %39, <32 x i8>* %50, align 1
  %51 = getelementptr inbounds i8, i8* %47, i64 %1
  %52 = bitcast i8* %51 to <32 x i8>*
  store <32 x i8> %39, <32 x i8>* %52, align 1
  %53 = getelementptr inbounds i8, i8* %51, i64 32
  %54 = bitcast i8* %53 to <32 x i8>*
  store <32 x i8> %39, <32 x i8>* %54, align 1
  %55 = getelementptr inbounds i8, i8* %51, i64 %1
  %56 = bitcast i8* %55 to <32 x i8>*
  store <32 x i8> %39, <32 x i8>* %56, align 1
  %57 = getelementptr inbounds i8, i8* %55, i64 32
  %58 = bitcast i8* %57 to <32 x i8>*
  store <32 x i8> %39, <32 x i8>* %58, align 1
  %59 = getelementptr inbounds i8, i8* %55, i64 %1
  %60 = bitcast i8* %59 to <32 x i8>*
  store <32 x i8> %39, <32 x i8>* %60, align 1
  %61 = getelementptr inbounds i8, i8* %59, i64 32
  %62 = bitcast i8* %61 to <32 x i8>*
  store <32 x i8> %39, <32 x i8>* %62, align 1
  %63 = getelementptr inbounds i8, i8* %59, i64 %1
  %64 = bitcast i8* %63 to <32 x i8>*
  store <32 x i8> %39, <32 x i8>* %64, align 1
  %65 = getelementptr inbounds i8, i8* %63, i64 32
  %66 = bitcast i8* %65 to <32 x i8>*
  store <32 x i8> %39, <32 x i8>* %66, align 1
  %67 = getelementptr inbounds i8, i8* %63, i64 %1
  %68 = bitcast i8* %67 to <32 x i8>*
  store <32 x i8> %39, <32 x i8>* %68, align 1
  %69 = getelementptr inbounds i8, i8* %67, i64 32
  %70 = bitcast i8* %69 to <32 x i8>*
  store <32 x i8> %39, <32 x i8>* %70, align 1
  %71 = getelementptr inbounds i8, i8* %67, i64 %1
  %72 = bitcast i8* %71 to <32 x i8>*
  store <32 x i8> %39, <32 x i8>* %72, align 1
  %73 = getelementptr inbounds i8, i8* %71, i64 32
  %74 = bitcast i8* %73 to <32 x i8>*
  store <32 x i8> %39, <32 x i8>* %74, align 1
  %75 = getelementptr inbounds i8, i8* %71, i64 %1
  %76 = bitcast i8* %75 to <32 x i8>*
  store <32 x i8> %39, <32 x i8>* %76, align 1
  %77 = getelementptr inbounds i8, i8* %75, i64 32
  %78 = bitcast i8* %77 to <32 x i8>*
  store <32 x i8> %39, <32 x i8>* %78, align 1
  %79 = getelementptr inbounds i8, i8* %75, i64 %1
  %80 = bitcast i8* %79 to <32 x i8>*
  store <32 x i8> %39, <32 x i8>* %80, align 1
  %81 = getelementptr inbounds i8, i8* %79, i64 32
  %82 = bitcast i8* %81 to <32 x i8>*
  store <32 x i8> %39, <32 x i8>* %82, align 1
  %83 = getelementptr inbounds i8, i8* %79, i64 %1
  %84 = bitcast i8* %83 to <32 x i8>*
  store <32 x i8> %39, <32 x i8>* %84, align 1
  %85 = getelementptr inbounds i8, i8* %83, i64 32
  %86 = bitcast i8* %85 to <32 x i8>*
  store <32 x i8> %39, <32 x i8>* %86, align 1
  %87 = getelementptr inbounds i8, i8* %83, i64 %1
  %88 = bitcast i8* %87 to <32 x i8>*
  store <32 x i8> %39, <32 x i8>* %88, align 1
  %89 = getelementptr inbounds i8, i8* %87, i64 32
  %90 = bitcast i8* %89 to <32 x i8>*
  store <32 x i8> %39, <32 x i8>* %90, align 1
  %91 = getelementptr inbounds i8, i8* %87, i64 %1
  %92 = bitcast i8* %91 to <32 x i8>*
  store <32 x i8> %39, <32 x i8>* %92, align 1
  %93 = getelementptr inbounds i8, i8* %91, i64 32
  %94 = bitcast i8* %93 to <32 x i8>*
  store <32 x i8> %39, <32 x i8>* %94, align 1
  %95 = getelementptr inbounds i8, i8* %91, i64 %1
  %96 = bitcast i8* %95 to <32 x i8>*
  store <32 x i8> %39, <32 x i8>* %96, align 1
  %97 = getelementptr inbounds i8, i8* %95, i64 32
  %98 = bitcast i8* %97 to <32 x i8>*
  store <32 x i8> %39, <32 x i8>* %98, align 1
  %99 = getelementptr inbounds i8, i8* %95, i64 %1
  %100 = bitcast i8* %99 to <32 x i8>*
  store <32 x i8> %39, <32 x i8>* %100, align 1
  %101 = getelementptr inbounds i8, i8* %99, i64 32
  %102 = bitcast i8* %101 to <32 x i8>*
  store <32 x i8> %39, <32 x i8>* %102, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_dc_top_predictor_32x16_avx2(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readnone) local_unnamed_addr #0 {
  %5 = bitcast i8* %2 to <32 x i8>*
  %6 = load <32 x i8>, <32 x i8>* %5, align 1
  %7 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %6, <32 x i8> zeroinitializer) #8
  %8 = shufflevector <4 x i64> %7, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %9 = add <4 x i64> %8, %7
  %10 = shufflevector <4 x i64> %9, <4 x i64> undef, <4 x i32> <i32 1, i32 1, i32 3, i32 3>
  %11 = bitcast <4 x i64> %9 to <16 x i16>
  %12 = bitcast <4 x i64> %10 to <16 x i16>
  %13 = add <16 x i16> %11, <i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16>
  %14 = add <16 x i16> %13, %12
  %15 = ashr <16 x i16> %14, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %16 = bitcast <16 x i16> %15 to <32 x i8>
  %17 = shufflevector <32 x i8> %16, <32 x i8> undef, <32 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %18 = bitcast i8* %0 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %18, align 1
  %19 = getelementptr inbounds i8, i8* %0, i64 %1
  %20 = bitcast i8* %19 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %20, align 1
  %21 = getelementptr inbounds i8, i8* %19, i64 %1
  %22 = bitcast i8* %21 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %22, align 1
  %23 = getelementptr inbounds i8, i8* %21, i64 %1
  %24 = bitcast i8* %23 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %24, align 1
  %25 = getelementptr inbounds i8, i8* %23, i64 %1
  %26 = bitcast i8* %25 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %26, align 1
  %27 = getelementptr inbounds i8, i8* %25, i64 %1
  %28 = bitcast i8* %27 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %28, align 1
  %29 = getelementptr inbounds i8, i8* %27, i64 %1
  %30 = bitcast i8* %29 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %30, align 1
  %31 = getelementptr inbounds i8, i8* %29, i64 %1
  %32 = bitcast i8* %31 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %32, align 1
  %33 = getelementptr inbounds i8, i8* %31, i64 %1
  %34 = bitcast i8* %33 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %34, align 1
  %35 = getelementptr inbounds i8, i8* %33, i64 %1
  %36 = bitcast i8* %35 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %36, align 1
  %37 = getelementptr inbounds i8, i8* %35, i64 %1
  %38 = bitcast i8* %37 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %38, align 1
  %39 = getelementptr inbounds i8, i8* %37, i64 %1
  %40 = bitcast i8* %39 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %40, align 1
  %41 = getelementptr inbounds i8, i8* %39, i64 %1
  %42 = bitcast i8* %41 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %42, align 1
  %43 = getelementptr inbounds i8, i8* %41, i64 %1
  %44 = bitcast i8* %43 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %44, align 1
  %45 = getelementptr inbounds i8, i8* %43, i64 %1
  %46 = bitcast i8* %45 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %46, align 1
  %47 = getelementptr inbounds i8, i8* %45, i64 %1
  %48 = bitcast i8* %47 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %48, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_dc_top_predictor_32x64_avx2(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readnone) local_unnamed_addr #0 {
  %5 = bitcast i8* %2 to <32 x i8>*
  %6 = load <32 x i8>, <32 x i8>* %5, align 1
  %7 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %6, <32 x i8> zeroinitializer) #8
  %8 = shufflevector <4 x i64> %7, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %9 = add <4 x i64> %8, %7
  %10 = shufflevector <4 x i64> %9, <4 x i64> undef, <4 x i32> <i32 1, i32 1, i32 3, i32 3>
  %11 = bitcast <4 x i64> %9 to <16 x i16>
  %12 = bitcast <4 x i64> %10 to <16 x i16>
  %13 = add <16 x i16> %11, <i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16>
  %14 = add <16 x i16> %13, %12
  %15 = ashr <16 x i16> %14, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %16 = bitcast <16 x i16> %15 to <32 x i8>
  %17 = shufflevector <32 x i8> %16, <32 x i8> undef, <32 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %18 = bitcast i8* %0 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %18, align 1
  %19 = getelementptr inbounds i8, i8* %0, i64 %1
  %20 = bitcast i8* %19 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %20, align 1
  %21 = getelementptr inbounds i8, i8* %19, i64 %1
  %22 = bitcast i8* %21 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %22, align 1
  %23 = getelementptr inbounds i8, i8* %21, i64 %1
  %24 = bitcast i8* %23 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %24, align 1
  %25 = getelementptr inbounds i8, i8* %23, i64 %1
  %26 = bitcast i8* %25 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %26, align 1
  %27 = getelementptr inbounds i8, i8* %25, i64 %1
  %28 = bitcast i8* %27 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %28, align 1
  %29 = getelementptr inbounds i8, i8* %27, i64 %1
  %30 = bitcast i8* %29 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %30, align 1
  %31 = getelementptr inbounds i8, i8* %29, i64 %1
  %32 = bitcast i8* %31 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %32, align 1
  %33 = getelementptr inbounds i8, i8* %31, i64 %1
  %34 = bitcast i8* %33 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %34, align 1
  %35 = getelementptr inbounds i8, i8* %33, i64 %1
  %36 = bitcast i8* %35 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %36, align 1
  %37 = getelementptr inbounds i8, i8* %35, i64 %1
  %38 = bitcast i8* %37 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %38, align 1
  %39 = getelementptr inbounds i8, i8* %37, i64 %1
  %40 = bitcast i8* %39 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %40, align 1
  %41 = getelementptr inbounds i8, i8* %39, i64 %1
  %42 = bitcast i8* %41 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %42, align 1
  %43 = getelementptr inbounds i8, i8* %41, i64 %1
  %44 = bitcast i8* %43 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %44, align 1
  %45 = getelementptr inbounds i8, i8* %43, i64 %1
  %46 = bitcast i8* %45 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %46, align 1
  %47 = getelementptr inbounds i8, i8* %45, i64 %1
  %48 = bitcast i8* %47 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %48, align 1
  %49 = getelementptr inbounds i8, i8* %47, i64 %1
  %50 = bitcast i8* %49 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %50, align 1
  %51 = getelementptr inbounds i8, i8* %49, i64 %1
  %52 = bitcast i8* %51 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %52, align 1
  %53 = getelementptr inbounds i8, i8* %51, i64 %1
  %54 = bitcast i8* %53 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %54, align 1
  %55 = getelementptr inbounds i8, i8* %53, i64 %1
  %56 = bitcast i8* %55 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %56, align 1
  %57 = getelementptr inbounds i8, i8* %55, i64 %1
  %58 = bitcast i8* %57 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %58, align 1
  %59 = getelementptr inbounds i8, i8* %57, i64 %1
  %60 = bitcast i8* %59 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %60, align 1
  %61 = getelementptr inbounds i8, i8* %59, i64 %1
  %62 = bitcast i8* %61 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %62, align 1
  %63 = getelementptr inbounds i8, i8* %61, i64 %1
  %64 = bitcast i8* %63 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %64, align 1
  %65 = getelementptr inbounds i8, i8* %63, i64 %1
  %66 = bitcast i8* %65 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %66, align 1
  %67 = getelementptr inbounds i8, i8* %65, i64 %1
  %68 = bitcast i8* %67 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %68, align 1
  %69 = getelementptr inbounds i8, i8* %67, i64 %1
  %70 = bitcast i8* %69 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %70, align 1
  %71 = getelementptr inbounds i8, i8* %69, i64 %1
  %72 = bitcast i8* %71 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %72, align 1
  %73 = getelementptr inbounds i8, i8* %71, i64 %1
  %74 = bitcast i8* %73 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %74, align 1
  %75 = getelementptr inbounds i8, i8* %73, i64 %1
  %76 = bitcast i8* %75 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %76, align 1
  %77 = getelementptr inbounds i8, i8* %75, i64 %1
  %78 = bitcast i8* %77 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %78, align 1
  %79 = getelementptr inbounds i8, i8* %77, i64 %1
  %80 = bitcast i8* %79 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %80, align 1
  %81 = getelementptr inbounds i8, i8* %79, i64 %1
  %82 = bitcast i8* %81 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %82, align 1
  %83 = getelementptr inbounds i8, i8* %81, i64 %1
  %84 = bitcast i8* %83 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %84, align 1
  %85 = getelementptr inbounds i8, i8* %83, i64 %1
  %86 = bitcast i8* %85 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %86, align 1
  %87 = getelementptr inbounds i8, i8* %85, i64 %1
  %88 = bitcast i8* %87 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %88, align 1
  %89 = getelementptr inbounds i8, i8* %87, i64 %1
  %90 = bitcast i8* %89 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %90, align 1
  %91 = getelementptr inbounds i8, i8* %89, i64 %1
  %92 = bitcast i8* %91 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %92, align 1
  %93 = getelementptr inbounds i8, i8* %91, i64 %1
  %94 = bitcast i8* %93 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %94, align 1
  %95 = getelementptr inbounds i8, i8* %93, i64 %1
  %96 = bitcast i8* %95 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %96, align 1
  %97 = getelementptr inbounds i8, i8* %95, i64 %1
  %98 = bitcast i8* %97 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %98, align 1
  %99 = getelementptr inbounds i8, i8* %97, i64 %1
  %100 = bitcast i8* %99 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %100, align 1
  %101 = getelementptr inbounds i8, i8* %99, i64 %1
  %102 = bitcast i8* %101 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %102, align 1
  %103 = getelementptr inbounds i8, i8* %101, i64 %1
  %104 = bitcast i8* %103 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %104, align 1
  %105 = getelementptr inbounds i8, i8* %103, i64 %1
  %106 = bitcast i8* %105 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %106, align 1
  %107 = getelementptr inbounds i8, i8* %105, i64 %1
  %108 = bitcast i8* %107 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %108, align 1
  %109 = getelementptr inbounds i8, i8* %107, i64 %1
  %110 = bitcast i8* %109 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %110, align 1
  %111 = getelementptr inbounds i8, i8* %109, i64 %1
  %112 = bitcast i8* %111 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %112, align 1
  %113 = getelementptr inbounds i8, i8* %111, i64 %1
  %114 = bitcast i8* %113 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %114, align 1
  %115 = getelementptr inbounds i8, i8* %113, i64 %1
  %116 = bitcast i8* %115 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %116, align 1
  %117 = getelementptr inbounds i8, i8* %115, i64 %1
  %118 = bitcast i8* %117 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %118, align 1
  %119 = getelementptr inbounds i8, i8* %117, i64 %1
  %120 = bitcast i8* %119 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %120, align 1
  %121 = getelementptr inbounds i8, i8* %119, i64 %1
  %122 = bitcast i8* %121 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %122, align 1
  %123 = getelementptr inbounds i8, i8* %121, i64 %1
  %124 = bitcast i8* %123 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %124, align 1
  %125 = getelementptr inbounds i8, i8* %123, i64 %1
  %126 = bitcast i8* %125 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %126, align 1
  %127 = getelementptr inbounds i8, i8* %125, i64 %1
  %128 = bitcast i8* %127 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %128, align 1
  %129 = getelementptr inbounds i8, i8* %127, i64 %1
  %130 = bitcast i8* %129 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %130, align 1
  %131 = getelementptr inbounds i8, i8* %129, i64 %1
  %132 = bitcast i8* %131 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %132, align 1
  %133 = getelementptr inbounds i8, i8* %131, i64 %1
  %134 = bitcast i8* %133 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %134, align 1
  %135 = getelementptr inbounds i8, i8* %133, i64 %1
  %136 = bitcast i8* %135 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %136, align 1
  %137 = getelementptr inbounds i8, i8* %135, i64 %1
  %138 = bitcast i8* %137 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %138, align 1
  %139 = getelementptr inbounds i8, i8* %137, i64 %1
  %140 = bitcast i8* %139 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %140, align 1
  %141 = getelementptr inbounds i8, i8* %139, i64 %1
  %142 = bitcast i8* %141 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %142, align 1
  %143 = getelementptr inbounds i8, i8* %141, i64 %1
  %144 = bitcast i8* %143 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %144, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_dc_top_predictor_64x64_avx2(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readnone) local_unnamed_addr #0 {
  %5 = bitcast i8* %2 to <32 x i8>*
  %6 = load <32 x i8>, <32 x i8>* %5, align 1
  %7 = getelementptr inbounds i8, i8* %2, i64 32
  %8 = bitcast i8* %7 to <32 x i8>*
  %9 = load <32 x i8>, <32 x i8>* %8, align 1
  %10 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %6, <32 x i8> zeroinitializer) #8
  %11 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %9, <32 x i8> zeroinitializer) #8
  %12 = add <4 x i64> %11, %10
  %13 = shufflevector <4 x i64> %12, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %14 = add <4 x i64> %13, %12
  %15 = shufflevector <4 x i64> %14, <4 x i64> undef, <4 x i32> <i32 1, i32 1, i32 3, i32 3>
  %16 = bitcast <4 x i64> %14 to <16 x i16>
  %17 = bitcast <4 x i64> %15 to <16 x i16>
  %18 = add <16 x i16> %16, <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>
  %19 = add <16 x i16> %18, %17
  %20 = ashr <16 x i16> %19, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %21 = bitcast <16 x i16> %20 to <32 x i8>
  %22 = shufflevector <32 x i8> %21, <32 x i8> undef, <32 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  br label %23

23:                                               ; preds = %23, %4
  %24 = phi i32 [ 0, %4 ], [ %58, %23 ]
  %25 = phi i8* [ %0, %4 ], [ %57, %23 ]
  %26 = bitcast i8* %25 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %26, align 1
  %27 = getelementptr inbounds i8, i8* %25, i64 32
  %28 = bitcast i8* %27 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %28, align 1
  %29 = getelementptr inbounds i8, i8* %25, i64 %1
  %30 = bitcast i8* %29 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %30, align 1
  %31 = getelementptr inbounds i8, i8* %29, i64 32
  %32 = bitcast i8* %31 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %32, align 1
  %33 = getelementptr inbounds i8, i8* %29, i64 %1
  %34 = bitcast i8* %33 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %34, align 1
  %35 = getelementptr inbounds i8, i8* %33, i64 32
  %36 = bitcast i8* %35 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %36, align 1
  %37 = getelementptr inbounds i8, i8* %33, i64 %1
  %38 = bitcast i8* %37 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %38, align 1
  %39 = getelementptr inbounds i8, i8* %37, i64 32
  %40 = bitcast i8* %39 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %40, align 1
  %41 = getelementptr inbounds i8, i8* %37, i64 %1
  %42 = bitcast i8* %41 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %42, align 1
  %43 = getelementptr inbounds i8, i8* %41, i64 32
  %44 = bitcast i8* %43 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %44, align 1
  %45 = getelementptr inbounds i8, i8* %41, i64 %1
  %46 = bitcast i8* %45 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %46, align 1
  %47 = getelementptr inbounds i8, i8* %45, i64 32
  %48 = bitcast i8* %47 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %48, align 1
  %49 = getelementptr inbounds i8, i8* %45, i64 %1
  %50 = bitcast i8* %49 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %50, align 1
  %51 = getelementptr inbounds i8, i8* %49, i64 32
  %52 = bitcast i8* %51 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %52, align 1
  %53 = getelementptr inbounds i8, i8* %49, i64 %1
  %54 = bitcast i8* %53 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %54, align 1
  %55 = getelementptr inbounds i8, i8* %53, i64 32
  %56 = bitcast i8* %55 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %56, align 1
  %57 = getelementptr inbounds i8, i8* %53, i64 %1
  %58 = add nuw nsw i32 %24, 8
  %59 = icmp eq i32 %58, 64
  br i1 %59, label %60, label %23

60:                                               ; preds = %23
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_dc_top_predictor_64x32_avx2(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readnone) local_unnamed_addr #0 {
  %5 = bitcast i8* %2 to <32 x i8>*
  %6 = load <32 x i8>, <32 x i8>* %5, align 1
  %7 = getelementptr inbounds i8, i8* %2, i64 32
  %8 = bitcast i8* %7 to <32 x i8>*
  %9 = load <32 x i8>, <32 x i8>* %8, align 1
  %10 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %6, <32 x i8> zeroinitializer) #8
  %11 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %9, <32 x i8> zeroinitializer) #8
  %12 = add <4 x i64> %11, %10
  %13 = shufflevector <4 x i64> %12, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %14 = add <4 x i64> %13, %12
  %15 = shufflevector <4 x i64> %14, <4 x i64> undef, <4 x i32> <i32 1, i32 1, i32 3, i32 3>
  %16 = bitcast <4 x i64> %14 to <16 x i16>
  %17 = bitcast <4 x i64> %15 to <16 x i16>
  %18 = add <16 x i16> %16, <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>
  %19 = add <16 x i16> %18, %17
  %20 = ashr <16 x i16> %19, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %21 = bitcast <16 x i16> %20 to <32 x i8>
  %22 = shufflevector <32 x i8> %21, <32 x i8> undef, <32 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %23 = bitcast i8* %0 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %23, align 1
  %24 = getelementptr inbounds i8, i8* %0, i64 32
  %25 = bitcast i8* %24 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %25, align 1
  %26 = getelementptr inbounds i8, i8* %0, i64 %1
  %27 = bitcast i8* %26 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %27, align 1
  %28 = getelementptr inbounds i8, i8* %26, i64 32
  %29 = bitcast i8* %28 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %29, align 1
  %30 = getelementptr inbounds i8, i8* %26, i64 %1
  %31 = bitcast i8* %30 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %31, align 1
  %32 = getelementptr inbounds i8, i8* %30, i64 32
  %33 = bitcast i8* %32 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %33, align 1
  %34 = getelementptr inbounds i8, i8* %30, i64 %1
  %35 = bitcast i8* %34 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %35, align 1
  %36 = getelementptr inbounds i8, i8* %34, i64 32
  %37 = bitcast i8* %36 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %37, align 1
  %38 = getelementptr inbounds i8, i8* %34, i64 %1
  %39 = bitcast i8* %38 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %39, align 1
  %40 = getelementptr inbounds i8, i8* %38, i64 32
  %41 = bitcast i8* %40 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %41, align 1
  %42 = getelementptr inbounds i8, i8* %38, i64 %1
  %43 = bitcast i8* %42 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %43, align 1
  %44 = getelementptr inbounds i8, i8* %42, i64 32
  %45 = bitcast i8* %44 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %45, align 1
  %46 = getelementptr inbounds i8, i8* %42, i64 %1
  %47 = bitcast i8* %46 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %47, align 1
  %48 = getelementptr inbounds i8, i8* %46, i64 32
  %49 = bitcast i8* %48 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %49, align 1
  %50 = getelementptr inbounds i8, i8* %46, i64 %1
  %51 = bitcast i8* %50 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %51, align 1
  %52 = getelementptr inbounds i8, i8* %50, i64 32
  %53 = bitcast i8* %52 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %53, align 1
  %54 = getelementptr inbounds i8, i8* %50, i64 %1
  %55 = bitcast i8* %54 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %55, align 1
  %56 = getelementptr inbounds i8, i8* %54, i64 32
  %57 = bitcast i8* %56 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %57, align 1
  %58 = getelementptr inbounds i8, i8* %54, i64 %1
  %59 = bitcast i8* %58 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %59, align 1
  %60 = getelementptr inbounds i8, i8* %58, i64 32
  %61 = bitcast i8* %60 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %61, align 1
  %62 = getelementptr inbounds i8, i8* %58, i64 %1
  %63 = bitcast i8* %62 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %63, align 1
  %64 = getelementptr inbounds i8, i8* %62, i64 32
  %65 = bitcast i8* %64 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %65, align 1
  %66 = getelementptr inbounds i8, i8* %62, i64 %1
  %67 = bitcast i8* %66 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %67, align 1
  %68 = getelementptr inbounds i8, i8* %66, i64 32
  %69 = bitcast i8* %68 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %69, align 1
  %70 = getelementptr inbounds i8, i8* %66, i64 %1
  %71 = bitcast i8* %70 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %71, align 1
  %72 = getelementptr inbounds i8, i8* %70, i64 32
  %73 = bitcast i8* %72 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %73, align 1
  %74 = getelementptr inbounds i8, i8* %70, i64 %1
  %75 = bitcast i8* %74 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %75, align 1
  %76 = getelementptr inbounds i8, i8* %74, i64 32
  %77 = bitcast i8* %76 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %77, align 1
  %78 = getelementptr inbounds i8, i8* %74, i64 %1
  %79 = bitcast i8* %78 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %79, align 1
  %80 = getelementptr inbounds i8, i8* %78, i64 32
  %81 = bitcast i8* %80 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %81, align 1
  %82 = getelementptr inbounds i8, i8* %78, i64 %1
  %83 = bitcast i8* %82 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %83, align 1
  %84 = getelementptr inbounds i8, i8* %82, i64 32
  %85 = bitcast i8* %84 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %85, align 1
  %86 = getelementptr inbounds i8, i8* %82, i64 %1
  %87 = bitcast i8* %86 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %87, align 1
  %88 = getelementptr inbounds i8, i8* %86, i64 32
  %89 = bitcast i8* %88 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %89, align 1
  %90 = getelementptr inbounds i8, i8* %86, i64 %1
  %91 = bitcast i8* %90 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %91, align 1
  %92 = getelementptr inbounds i8, i8* %90, i64 32
  %93 = bitcast i8* %92 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %93, align 1
  %94 = getelementptr inbounds i8, i8* %90, i64 %1
  %95 = bitcast i8* %94 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %95, align 1
  %96 = getelementptr inbounds i8, i8* %94, i64 32
  %97 = bitcast i8* %96 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %97, align 1
  %98 = getelementptr inbounds i8, i8* %94, i64 %1
  %99 = bitcast i8* %98 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %99, align 1
  %100 = getelementptr inbounds i8, i8* %98, i64 32
  %101 = bitcast i8* %100 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %101, align 1
  %102 = getelementptr inbounds i8, i8* %98, i64 %1
  %103 = bitcast i8* %102 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %103, align 1
  %104 = getelementptr inbounds i8, i8* %102, i64 32
  %105 = bitcast i8* %104 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %105, align 1
  %106 = getelementptr inbounds i8, i8* %102, i64 %1
  %107 = bitcast i8* %106 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %107, align 1
  %108 = getelementptr inbounds i8, i8* %106, i64 32
  %109 = bitcast i8* %108 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %109, align 1
  %110 = getelementptr inbounds i8, i8* %106, i64 %1
  %111 = bitcast i8* %110 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %111, align 1
  %112 = getelementptr inbounds i8, i8* %110, i64 32
  %113 = bitcast i8* %112 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %113, align 1
  %114 = getelementptr inbounds i8, i8* %110, i64 %1
  %115 = bitcast i8* %114 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %115, align 1
  %116 = getelementptr inbounds i8, i8* %114, i64 32
  %117 = bitcast i8* %116 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %117, align 1
  %118 = getelementptr inbounds i8, i8* %114, i64 %1
  %119 = bitcast i8* %118 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %119, align 1
  %120 = getelementptr inbounds i8, i8* %118, i64 32
  %121 = bitcast i8* %120 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %121, align 1
  %122 = getelementptr inbounds i8, i8* %118, i64 %1
  %123 = bitcast i8* %122 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %123, align 1
  %124 = getelementptr inbounds i8, i8* %122, i64 32
  %125 = bitcast i8* %124 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %125, align 1
  %126 = getelementptr inbounds i8, i8* %122, i64 %1
  %127 = bitcast i8* %126 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %127, align 1
  %128 = getelementptr inbounds i8, i8* %126, i64 32
  %129 = bitcast i8* %128 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %129, align 1
  %130 = getelementptr inbounds i8, i8* %126, i64 %1
  %131 = bitcast i8* %130 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %131, align 1
  %132 = getelementptr inbounds i8, i8* %130, i64 32
  %133 = bitcast i8* %132 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %133, align 1
  %134 = getelementptr inbounds i8, i8* %130, i64 %1
  %135 = bitcast i8* %134 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %135, align 1
  %136 = getelementptr inbounds i8, i8* %134, i64 32
  %137 = bitcast i8* %136 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %137, align 1
  %138 = getelementptr inbounds i8, i8* %134, i64 %1
  %139 = bitcast i8* %138 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %139, align 1
  %140 = getelementptr inbounds i8, i8* %138, i64 32
  %141 = bitcast i8* %140 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %141, align 1
  %142 = getelementptr inbounds i8, i8* %138, i64 %1
  %143 = bitcast i8* %142 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %143, align 1
  %144 = getelementptr inbounds i8, i8* %142, i64 32
  %145 = bitcast i8* %144 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %145, align 1
  %146 = getelementptr inbounds i8, i8* %142, i64 %1
  %147 = bitcast i8* %146 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %147, align 1
  %148 = getelementptr inbounds i8, i8* %146, i64 32
  %149 = bitcast i8* %148 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %149, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_dc_top_predictor_64x16_avx2(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readnone) local_unnamed_addr #0 {
  %5 = bitcast i8* %2 to <32 x i8>*
  %6 = load <32 x i8>, <32 x i8>* %5, align 1
  %7 = getelementptr inbounds i8, i8* %2, i64 32
  %8 = bitcast i8* %7 to <32 x i8>*
  %9 = load <32 x i8>, <32 x i8>* %8, align 1
  %10 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %6, <32 x i8> zeroinitializer) #8
  %11 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %9, <32 x i8> zeroinitializer) #8
  %12 = add <4 x i64> %11, %10
  %13 = shufflevector <4 x i64> %12, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %14 = add <4 x i64> %13, %12
  %15 = shufflevector <4 x i64> %14, <4 x i64> undef, <4 x i32> <i32 1, i32 1, i32 3, i32 3>
  %16 = bitcast <4 x i64> %14 to <16 x i16>
  %17 = bitcast <4 x i64> %15 to <16 x i16>
  %18 = add <16 x i16> %16, <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>
  %19 = add <16 x i16> %18, %17
  %20 = ashr <16 x i16> %19, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %21 = bitcast <16 x i16> %20 to <32 x i8>
  %22 = shufflevector <32 x i8> %21, <32 x i8> undef, <32 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %23 = bitcast i8* %0 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %23, align 1
  %24 = getelementptr inbounds i8, i8* %0, i64 32
  %25 = bitcast i8* %24 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %25, align 1
  %26 = getelementptr inbounds i8, i8* %0, i64 %1
  %27 = bitcast i8* %26 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %27, align 1
  %28 = getelementptr inbounds i8, i8* %26, i64 32
  %29 = bitcast i8* %28 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %29, align 1
  %30 = getelementptr inbounds i8, i8* %26, i64 %1
  %31 = bitcast i8* %30 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %31, align 1
  %32 = getelementptr inbounds i8, i8* %30, i64 32
  %33 = bitcast i8* %32 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %33, align 1
  %34 = getelementptr inbounds i8, i8* %30, i64 %1
  %35 = bitcast i8* %34 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %35, align 1
  %36 = getelementptr inbounds i8, i8* %34, i64 32
  %37 = bitcast i8* %36 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %37, align 1
  %38 = getelementptr inbounds i8, i8* %34, i64 %1
  %39 = bitcast i8* %38 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %39, align 1
  %40 = getelementptr inbounds i8, i8* %38, i64 32
  %41 = bitcast i8* %40 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %41, align 1
  %42 = getelementptr inbounds i8, i8* %38, i64 %1
  %43 = bitcast i8* %42 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %43, align 1
  %44 = getelementptr inbounds i8, i8* %42, i64 32
  %45 = bitcast i8* %44 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %45, align 1
  %46 = getelementptr inbounds i8, i8* %42, i64 %1
  %47 = bitcast i8* %46 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %47, align 1
  %48 = getelementptr inbounds i8, i8* %46, i64 32
  %49 = bitcast i8* %48 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %49, align 1
  %50 = getelementptr inbounds i8, i8* %46, i64 %1
  %51 = bitcast i8* %50 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %51, align 1
  %52 = getelementptr inbounds i8, i8* %50, i64 32
  %53 = bitcast i8* %52 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %53, align 1
  %54 = getelementptr inbounds i8, i8* %50, i64 %1
  %55 = bitcast i8* %54 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %55, align 1
  %56 = getelementptr inbounds i8, i8* %54, i64 32
  %57 = bitcast i8* %56 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %57, align 1
  %58 = getelementptr inbounds i8, i8* %54, i64 %1
  %59 = bitcast i8* %58 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %59, align 1
  %60 = getelementptr inbounds i8, i8* %58, i64 32
  %61 = bitcast i8* %60 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %61, align 1
  %62 = getelementptr inbounds i8, i8* %58, i64 %1
  %63 = bitcast i8* %62 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %63, align 1
  %64 = getelementptr inbounds i8, i8* %62, i64 32
  %65 = bitcast i8* %64 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %65, align 1
  %66 = getelementptr inbounds i8, i8* %62, i64 %1
  %67 = bitcast i8* %66 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %67, align 1
  %68 = getelementptr inbounds i8, i8* %66, i64 32
  %69 = bitcast i8* %68 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %69, align 1
  %70 = getelementptr inbounds i8, i8* %66, i64 %1
  %71 = bitcast i8* %70 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %71, align 1
  %72 = getelementptr inbounds i8, i8* %70, i64 32
  %73 = bitcast i8* %72 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %73, align 1
  %74 = getelementptr inbounds i8, i8* %70, i64 %1
  %75 = bitcast i8* %74 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %75, align 1
  %76 = getelementptr inbounds i8, i8* %74, i64 32
  %77 = bitcast i8* %76 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %77, align 1
  %78 = getelementptr inbounds i8, i8* %74, i64 %1
  %79 = bitcast i8* %78 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %79, align 1
  %80 = getelementptr inbounds i8, i8* %78, i64 32
  %81 = bitcast i8* %80 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %81, align 1
  %82 = getelementptr inbounds i8, i8* %78, i64 %1
  %83 = bitcast i8* %82 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %83, align 1
  %84 = getelementptr inbounds i8, i8* %82, i64 32
  %85 = bitcast i8* %84 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %85, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_dc_left_predictor_32x16_avx2(i8* nocapture, i64, i8* nocapture readnone, i8* nocapture readonly) local_unnamed_addr #0 {
  %5 = bitcast i8* %3 to <16 x i8>*
  %6 = load <16 x i8>, <16 x i8>* %5, align 16
  %7 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %6, <16 x i8> zeroinitializer) #8
  %8 = shufflevector <2 x i64> %7, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %9 = bitcast <2 x i64> %7 to <8 x i16>
  %10 = bitcast <2 x i64> %8 to <8 x i16>
  %11 = add <8 x i16> %9, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %12 = add <8 x i16> %11, %10
  %13 = ashr <8 x i16> %12, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %14 = bitcast <8 x i16> %13 to <16 x i8>
  %15 = shufflevector <16 x i8> %14, <16 x i8> undef, <16 x i32> zeroinitializer
  %16 = bitcast <16 x i8> %15 to <2 x i64>
  %17 = shufflevector <2 x i64> %16, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %18 = bitcast i8* %0 to <4 x i64>*
  store <4 x i64> %17, <4 x i64>* %18, align 1
  %19 = getelementptr inbounds i8, i8* %0, i64 %1
  %20 = bitcast i8* %19 to <4 x i64>*
  store <4 x i64> %17, <4 x i64>* %20, align 1
  %21 = getelementptr inbounds i8, i8* %19, i64 %1
  %22 = bitcast i8* %21 to <4 x i64>*
  store <4 x i64> %17, <4 x i64>* %22, align 1
  %23 = getelementptr inbounds i8, i8* %21, i64 %1
  %24 = bitcast i8* %23 to <4 x i64>*
  store <4 x i64> %17, <4 x i64>* %24, align 1
  %25 = getelementptr inbounds i8, i8* %23, i64 %1
  %26 = bitcast i8* %25 to <4 x i64>*
  store <4 x i64> %17, <4 x i64>* %26, align 1
  %27 = getelementptr inbounds i8, i8* %25, i64 %1
  %28 = bitcast i8* %27 to <4 x i64>*
  store <4 x i64> %17, <4 x i64>* %28, align 1
  %29 = getelementptr inbounds i8, i8* %27, i64 %1
  %30 = bitcast i8* %29 to <4 x i64>*
  store <4 x i64> %17, <4 x i64>* %30, align 1
  %31 = getelementptr inbounds i8, i8* %29, i64 %1
  %32 = bitcast i8* %31 to <4 x i64>*
  store <4 x i64> %17, <4 x i64>* %32, align 1
  %33 = getelementptr inbounds i8, i8* %31, i64 %1
  %34 = bitcast i8* %33 to <4 x i64>*
  store <4 x i64> %17, <4 x i64>* %34, align 1
  %35 = getelementptr inbounds i8, i8* %33, i64 %1
  %36 = bitcast i8* %35 to <4 x i64>*
  store <4 x i64> %17, <4 x i64>* %36, align 1
  %37 = getelementptr inbounds i8, i8* %35, i64 %1
  %38 = bitcast i8* %37 to <4 x i64>*
  store <4 x i64> %17, <4 x i64>* %38, align 1
  %39 = getelementptr inbounds i8, i8* %37, i64 %1
  %40 = bitcast i8* %39 to <4 x i64>*
  store <4 x i64> %17, <4 x i64>* %40, align 1
  %41 = getelementptr inbounds i8, i8* %39, i64 %1
  %42 = bitcast i8* %41 to <4 x i64>*
  store <4 x i64> %17, <4 x i64>* %42, align 1
  %43 = getelementptr inbounds i8, i8* %41, i64 %1
  %44 = bitcast i8* %43 to <4 x i64>*
  store <4 x i64> %17, <4 x i64>* %44, align 1
  %45 = getelementptr inbounds i8, i8* %43, i64 %1
  %46 = bitcast i8* %45 to <4 x i64>*
  store <4 x i64> %17, <4 x i64>* %46, align 1
  %47 = getelementptr inbounds i8, i8* %45, i64 %1
  %48 = bitcast i8* %47 to <4 x i64>*
  store <4 x i64> %17, <4 x i64>* %48, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_dc_left_predictor_32x64_avx2(i8* nocapture, i64, i8* nocapture readnone, i8* nocapture readonly) local_unnamed_addr #0 {
  %5 = bitcast i8* %3 to <32 x i8>*
  %6 = load <32 x i8>, <32 x i8>* %5, align 1
  %7 = getelementptr inbounds i8, i8* %3, i64 32
  %8 = bitcast i8* %7 to <32 x i8>*
  %9 = load <32 x i8>, <32 x i8>* %8, align 1
  %10 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %6, <32 x i8> zeroinitializer) #8
  %11 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %9, <32 x i8> zeroinitializer) #8
  %12 = add <4 x i64> %11, %10
  %13 = shufflevector <4 x i64> %12, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %14 = add <4 x i64> %13, %12
  %15 = shufflevector <4 x i64> %14, <4 x i64> undef, <4 x i32> <i32 1, i32 1, i32 3, i32 3>
  %16 = bitcast <4 x i64> %14 to <16 x i16>
  %17 = bitcast <4 x i64> %15 to <16 x i16>
  %18 = add <16 x i16> %16, <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>
  %19 = add <16 x i16> %18, %17
  %20 = ashr <16 x i16> %19, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %21 = bitcast <16 x i16> %20 to <32 x i8>
  %22 = shufflevector <32 x i8> %21, <32 x i8> undef, <32 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %23 = bitcast i8* %0 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %23, align 1
  %24 = getelementptr inbounds i8, i8* %0, i64 %1
  %25 = bitcast i8* %24 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %25, align 1
  %26 = getelementptr inbounds i8, i8* %24, i64 %1
  %27 = bitcast i8* %26 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %27, align 1
  %28 = getelementptr inbounds i8, i8* %26, i64 %1
  %29 = bitcast i8* %28 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %29, align 1
  %30 = getelementptr inbounds i8, i8* %28, i64 %1
  %31 = bitcast i8* %30 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %31, align 1
  %32 = getelementptr inbounds i8, i8* %30, i64 %1
  %33 = bitcast i8* %32 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %33, align 1
  %34 = getelementptr inbounds i8, i8* %32, i64 %1
  %35 = bitcast i8* %34 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %35, align 1
  %36 = getelementptr inbounds i8, i8* %34, i64 %1
  %37 = bitcast i8* %36 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %37, align 1
  %38 = getelementptr inbounds i8, i8* %36, i64 %1
  %39 = bitcast i8* %38 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %39, align 1
  %40 = getelementptr inbounds i8, i8* %38, i64 %1
  %41 = bitcast i8* %40 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %41, align 1
  %42 = getelementptr inbounds i8, i8* %40, i64 %1
  %43 = bitcast i8* %42 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %43, align 1
  %44 = getelementptr inbounds i8, i8* %42, i64 %1
  %45 = bitcast i8* %44 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %45, align 1
  %46 = getelementptr inbounds i8, i8* %44, i64 %1
  %47 = bitcast i8* %46 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %47, align 1
  %48 = getelementptr inbounds i8, i8* %46, i64 %1
  %49 = bitcast i8* %48 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %49, align 1
  %50 = getelementptr inbounds i8, i8* %48, i64 %1
  %51 = bitcast i8* %50 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %51, align 1
  %52 = getelementptr inbounds i8, i8* %50, i64 %1
  %53 = bitcast i8* %52 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %53, align 1
  %54 = getelementptr inbounds i8, i8* %52, i64 %1
  %55 = bitcast i8* %54 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %55, align 1
  %56 = getelementptr inbounds i8, i8* %54, i64 %1
  %57 = bitcast i8* %56 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %57, align 1
  %58 = getelementptr inbounds i8, i8* %56, i64 %1
  %59 = bitcast i8* %58 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %59, align 1
  %60 = getelementptr inbounds i8, i8* %58, i64 %1
  %61 = bitcast i8* %60 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %61, align 1
  %62 = getelementptr inbounds i8, i8* %60, i64 %1
  %63 = bitcast i8* %62 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %63, align 1
  %64 = getelementptr inbounds i8, i8* %62, i64 %1
  %65 = bitcast i8* %64 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %65, align 1
  %66 = getelementptr inbounds i8, i8* %64, i64 %1
  %67 = bitcast i8* %66 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %67, align 1
  %68 = getelementptr inbounds i8, i8* %66, i64 %1
  %69 = bitcast i8* %68 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %69, align 1
  %70 = getelementptr inbounds i8, i8* %68, i64 %1
  %71 = bitcast i8* %70 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %71, align 1
  %72 = getelementptr inbounds i8, i8* %70, i64 %1
  %73 = bitcast i8* %72 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %73, align 1
  %74 = getelementptr inbounds i8, i8* %72, i64 %1
  %75 = bitcast i8* %74 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %75, align 1
  %76 = getelementptr inbounds i8, i8* %74, i64 %1
  %77 = bitcast i8* %76 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %77, align 1
  %78 = getelementptr inbounds i8, i8* %76, i64 %1
  %79 = bitcast i8* %78 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %79, align 1
  %80 = getelementptr inbounds i8, i8* %78, i64 %1
  %81 = bitcast i8* %80 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %81, align 1
  %82 = getelementptr inbounds i8, i8* %80, i64 %1
  %83 = bitcast i8* %82 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %83, align 1
  %84 = getelementptr inbounds i8, i8* %82, i64 %1
  %85 = bitcast i8* %84 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %85, align 1
  %86 = getelementptr inbounds i8, i8* %84, i64 %1
  %87 = bitcast i8* %86 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %87, align 1
  %88 = getelementptr inbounds i8, i8* %86, i64 %1
  %89 = bitcast i8* %88 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %89, align 1
  %90 = getelementptr inbounds i8, i8* %88, i64 %1
  %91 = bitcast i8* %90 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %91, align 1
  %92 = getelementptr inbounds i8, i8* %90, i64 %1
  %93 = bitcast i8* %92 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %93, align 1
  %94 = getelementptr inbounds i8, i8* %92, i64 %1
  %95 = bitcast i8* %94 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %95, align 1
  %96 = getelementptr inbounds i8, i8* %94, i64 %1
  %97 = bitcast i8* %96 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %97, align 1
  %98 = getelementptr inbounds i8, i8* %96, i64 %1
  %99 = bitcast i8* %98 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %99, align 1
  %100 = getelementptr inbounds i8, i8* %98, i64 %1
  %101 = bitcast i8* %100 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %101, align 1
  %102 = getelementptr inbounds i8, i8* %100, i64 %1
  %103 = bitcast i8* %102 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %103, align 1
  %104 = getelementptr inbounds i8, i8* %102, i64 %1
  %105 = bitcast i8* %104 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %105, align 1
  %106 = getelementptr inbounds i8, i8* %104, i64 %1
  %107 = bitcast i8* %106 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %107, align 1
  %108 = getelementptr inbounds i8, i8* %106, i64 %1
  %109 = bitcast i8* %108 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %109, align 1
  %110 = getelementptr inbounds i8, i8* %108, i64 %1
  %111 = bitcast i8* %110 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %111, align 1
  %112 = getelementptr inbounds i8, i8* %110, i64 %1
  %113 = bitcast i8* %112 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %113, align 1
  %114 = getelementptr inbounds i8, i8* %112, i64 %1
  %115 = bitcast i8* %114 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %115, align 1
  %116 = getelementptr inbounds i8, i8* %114, i64 %1
  %117 = bitcast i8* %116 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %117, align 1
  %118 = getelementptr inbounds i8, i8* %116, i64 %1
  %119 = bitcast i8* %118 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %119, align 1
  %120 = getelementptr inbounds i8, i8* %118, i64 %1
  %121 = bitcast i8* %120 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %121, align 1
  %122 = getelementptr inbounds i8, i8* %120, i64 %1
  %123 = bitcast i8* %122 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %123, align 1
  %124 = getelementptr inbounds i8, i8* %122, i64 %1
  %125 = bitcast i8* %124 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %125, align 1
  %126 = getelementptr inbounds i8, i8* %124, i64 %1
  %127 = bitcast i8* %126 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %127, align 1
  %128 = getelementptr inbounds i8, i8* %126, i64 %1
  %129 = bitcast i8* %128 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %129, align 1
  %130 = getelementptr inbounds i8, i8* %128, i64 %1
  %131 = bitcast i8* %130 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %131, align 1
  %132 = getelementptr inbounds i8, i8* %130, i64 %1
  %133 = bitcast i8* %132 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %133, align 1
  %134 = getelementptr inbounds i8, i8* %132, i64 %1
  %135 = bitcast i8* %134 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %135, align 1
  %136 = getelementptr inbounds i8, i8* %134, i64 %1
  %137 = bitcast i8* %136 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %137, align 1
  %138 = getelementptr inbounds i8, i8* %136, i64 %1
  %139 = bitcast i8* %138 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %139, align 1
  %140 = getelementptr inbounds i8, i8* %138, i64 %1
  %141 = bitcast i8* %140 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %141, align 1
  %142 = getelementptr inbounds i8, i8* %140, i64 %1
  %143 = bitcast i8* %142 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %143, align 1
  %144 = getelementptr inbounds i8, i8* %142, i64 %1
  %145 = bitcast i8* %144 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %145, align 1
  %146 = getelementptr inbounds i8, i8* %144, i64 %1
  %147 = bitcast i8* %146 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %147, align 1
  %148 = getelementptr inbounds i8, i8* %146, i64 %1
  %149 = bitcast i8* %148 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %149, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_dc_left_predictor_64x64_avx2(i8* nocapture, i64, i8* nocapture readnone, i8* nocapture readonly) local_unnamed_addr #0 {
  %5 = bitcast i8* %3 to <32 x i8>*
  %6 = load <32 x i8>, <32 x i8>* %5, align 1
  %7 = getelementptr inbounds i8, i8* %3, i64 32
  %8 = bitcast i8* %7 to <32 x i8>*
  %9 = load <32 x i8>, <32 x i8>* %8, align 1
  %10 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %6, <32 x i8> zeroinitializer) #8
  %11 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %9, <32 x i8> zeroinitializer) #8
  %12 = add <4 x i64> %11, %10
  %13 = shufflevector <4 x i64> %12, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %14 = add <4 x i64> %13, %12
  %15 = shufflevector <4 x i64> %14, <4 x i64> undef, <4 x i32> <i32 1, i32 1, i32 3, i32 3>
  %16 = bitcast <4 x i64> %14 to <16 x i16>
  %17 = bitcast <4 x i64> %15 to <16 x i16>
  %18 = add <16 x i16> %16, <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>
  %19 = add <16 x i16> %18, %17
  %20 = ashr <16 x i16> %19, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %21 = bitcast <16 x i16> %20 to <32 x i8>
  %22 = shufflevector <32 x i8> %21, <32 x i8> undef, <32 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  br label %23

23:                                               ; preds = %23, %4
  %24 = phi i32 [ 0, %4 ], [ %58, %23 ]
  %25 = phi i8* [ %0, %4 ], [ %57, %23 ]
  %26 = bitcast i8* %25 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %26, align 1
  %27 = getelementptr inbounds i8, i8* %25, i64 32
  %28 = bitcast i8* %27 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %28, align 1
  %29 = getelementptr inbounds i8, i8* %25, i64 %1
  %30 = bitcast i8* %29 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %30, align 1
  %31 = getelementptr inbounds i8, i8* %29, i64 32
  %32 = bitcast i8* %31 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %32, align 1
  %33 = getelementptr inbounds i8, i8* %29, i64 %1
  %34 = bitcast i8* %33 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %34, align 1
  %35 = getelementptr inbounds i8, i8* %33, i64 32
  %36 = bitcast i8* %35 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %36, align 1
  %37 = getelementptr inbounds i8, i8* %33, i64 %1
  %38 = bitcast i8* %37 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %38, align 1
  %39 = getelementptr inbounds i8, i8* %37, i64 32
  %40 = bitcast i8* %39 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %40, align 1
  %41 = getelementptr inbounds i8, i8* %37, i64 %1
  %42 = bitcast i8* %41 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %42, align 1
  %43 = getelementptr inbounds i8, i8* %41, i64 32
  %44 = bitcast i8* %43 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %44, align 1
  %45 = getelementptr inbounds i8, i8* %41, i64 %1
  %46 = bitcast i8* %45 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %46, align 1
  %47 = getelementptr inbounds i8, i8* %45, i64 32
  %48 = bitcast i8* %47 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %48, align 1
  %49 = getelementptr inbounds i8, i8* %45, i64 %1
  %50 = bitcast i8* %49 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %50, align 1
  %51 = getelementptr inbounds i8, i8* %49, i64 32
  %52 = bitcast i8* %51 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %52, align 1
  %53 = getelementptr inbounds i8, i8* %49, i64 %1
  %54 = bitcast i8* %53 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %54, align 1
  %55 = getelementptr inbounds i8, i8* %53, i64 32
  %56 = bitcast i8* %55 to <32 x i8>*
  store <32 x i8> %22, <32 x i8>* %56, align 1
  %57 = getelementptr inbounds i8, i8* %53, i64 %1
  %58 = add nuw nsw i32 %24, 8
  %59 = icmp eq i32 %58, 64
  br i1 %59, label %60, label %23

60:                                               ; preds = %23
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_dc_left_predictor_64x32_avx2(i8* nocapture, i64, i8* nocapture readnone, i8* nocapture readonly) local_unnamed_addr #0 {
  %5 = bitcast i8* %3 to <32 x i8>*
  %6 = load <32 x i8>, <32 x i8>* %5, align 1
  %7 = tail call <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8> %6, <32 x i8> zeroinitializer) #8
  %8 = shufflevector <4 x i64> %7, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %9 = add <4 x i64> %8, %7
  %10 = shufflevector <4 x i64> %9, <4 x i64> undef, <4 x i32> <i32 1, i32 1, i32 3, i32 3>
  %11 = bitcast <4 x i64> %9 to <16 x i16>
  %12 = bitcast <4 x i64> %10 to <16 x i16>
  %13 = add <16 x i16> %11, <i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16>
  %14 = add <16 x i16> %13, %12
  %15 = ashr <16 x i16> %14, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %16 = bitcast <16 x i16> %15 to <32 x i8>
  %17 = shufflevector <32 x i8> %16, <32 x i8> undef, <32 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %18 = bitcast i8* %0 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %18, align 1
  %19 = getelementptr inbounds i8, i8* %0, i64 32
  %20 = bitcast i8* %19 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %20, align 1
  %21 = getelementptr inbounds i8, i8* %0, i64 %1
  %22 = bitcast i8* %21 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %22, align 1
  %23 = getelementptr inbounds i8, i8* %21, i64 32
  %24 = bitcast i8* %23 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %24, align 1
  %25 = getelementptr inbounds i8, i8* %21, i64 %1
  %26 = bitcast i8* %25 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %26, align 1
  %27 = getelementptr inbounds i8, i8* %25, i64 32
  %28 = bitcast i8* %27 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %28, align 1
  %29 = getelementptr inbounds i8, i8* %25, i64 %1
  %30 = bitcast i8* %29 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %30, align 1
  %31 = getelementptr inbounds i8, i8* %29, i64 32
  %32 = bitcast i8* %31 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %32, align 1
  %33 = getelementptr inbounds i8, i8* %29, i64 %1
  %34 = bitcast i8* %33 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %34, align 1
  %35 = getelementptr inbounds i8, i8* %33, i64 32
  %36 = bitcast i8* %35 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %36, align 1
  %37 = getelementptr inbounds i8, i8* %33, i64 %1
  %38 = bitcast i8* %37 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %38, align 1
  %39 = getelementptr inbounds i8, i8* %37, i64 32
  %40 = bitcast i8* %39 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %40, align 1
  %41 = getelementptr inbounds i8, i8* %37, i64 %1
  %42 = bitcast i8* %41 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %42, align 1
  %43 = getelementptr inbounds i8, i8* %41, i64 32
  %44 = bitcast i8* %43 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %44, align 1
  %45 = getelementptr inbounds i8, i8* %41, i64 %1
  %46 = bitcast i8* %45 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %46, align 1
  %47 = getelementptr inbounds i8, i8* %45, i64 32
  %48 = bitcast i8* %47 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %48, align 1
  %49 = getelementptr inbounds i8, i8* %45, i64 %1
  %50 = bitcast i8* %49 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %50, align 1
  %51 = getelementptr inbounds i8, i8* %49, i64 32
  %52 = bitcast i8* %51 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %52, align 1
  %53 = getelementptr inbounds i8, i8* %49, i64 %1
  %54 = bitcast i8* %53 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %54, align 1
  %55 = getelementptr inbounds i8, i8* %53, i64 32
  %56 = bitcast i8* %55 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %56, align 1
  %57 = getelementptr inbounds i8, i8* %53, i64 %1
  %58 = bitcast i8* %57 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %58, align 1
  %59 = getelementptr inbounds i8, i8* %57, i64 32
  %60 = bitcast i8* %59 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %60, align 1
  %61 = getelementptr inbounds i8, i8* %57, i64 %1
  %62 = bitcast i8* %61 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %62, align 1
  %63 = getelementptr inbounds i8, i8* %61, i64 32
  %64 = bitcast i8* %63 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %64, align 1
  %65 = getelementptr inbounds i8, i8* %61, i64 %1
  %66 = bitcast i8* %65 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %66, align 1
  %67 = getelementptr inbounds i8, i8* %65, i64 32
  %68 = bitcast i8* %67 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %68, align 1
  %69 = getelementptr inbounds i8, i8* %65, i64 %1
  %70 = bitcast i8* %69 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %70, align 1
  %71 = getelementptr inbounds i8, i8* %69, i64 32
  %72 = bitcast i8* %71 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %72, align 1
  %73 = getelementptr inbounds i8, i8* %69, i64 %1
  %74 = bitcast i8* %73 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %74, align 1
  %75 = getelementptr inbounds i8, i8* %73, i64 32
  %76 = bitcast i8* %75 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %76, align 1
  %77 = getelementptr inbounds i8, i8* %73, i64 %1
  %78 = bitcast i8* %77 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %78, align 1
  %79 = getelementptr inbounds i8, i8* %77, i64 32
  %80 = bitcast i8* %79 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %80, align 1
  %81 = getelementptr inbounds i8, i8* %77, i64 %1
  %82 = bitcast i8* %81 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %82, align 1
  %83 = getelementptr inbounds i8, i8* %81, i64 32
  %84 = bitcast i8* %83 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %84, align 1
  %85 = getelementptr inbounds i8, i8* %81, i64 %1
  %86 = bitcast i8* %85 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %86, align 1
  %87 = getelementptr inbounds i8, i8* %85, i64 32
  %88 = bitcast i8* %87 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %88, align 1
  %89 = getelementptr inbounds i8, i8* %85, i64 %1
  %90 = bitcast i8* %89 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %90, align 1
  %91 = getelementptr inbounds i8, i8* %89, i64 32
  %92 = bitcast i8* %91 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %92, align 1
  %93 = getelementptr inbounds i8, i8* %89, i64 %1
  %94 = bitcast i8* %93 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %94, align 1
  %95 = getelementptr inbounds i8, i8* %93, i64 32
  %96 = bitcast i8* %95 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %96, align 1
  %97 = getelementptr inbounds i8, i8* %93, i64 %1
  %98 = bitcast i8* %97 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %98, align 1
  %99 = getelementptr inbounds i8, i8* %97, i64 32
  %100 = bitcast i8* %99 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %100, align 1
  %101 = getelementptr inbounds i8, i8* %97, i64 %1
  %102 = bitcast i8* %101 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %102, align 1
  %103 = getelementptr inbounds i8, i8* %101, i64 32
  %104 = bitcast i8* %103 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %104, align 1
  %105 = getelementptr inbounds i8, i8* %101, i64 %1
  %106 = bitcast i8* %105 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %106, align 1
  %107 = getelementptr inbounds i8, i8* %105, i64 32
  %108 = bitcast i8* %107 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %108, align 1
  %109 = getelementptr inbounds i8, i8* %105, i64 %1
  %110 = bitcast i8* %109 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %110, align 1
  %111 = getelementptr inbounds i8, i8* %109, i64 32
  %112 = bitcast i8* %111 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %112, align 1
  %113 = getelementptr inbounds i8, i8* %109, i64 %1
  %114 = bitcast i8* %113 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %114, align 1
  %115 = getelementptr inbounds i8, i8* %113, i64 32
  %116 = bitcast i8* %115 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %116, align 1
  %117 = getelementptr inbounds i8, i8* %113, i64 %1
  %118 = bitcast i8* %117 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %118, align 1
  %119 = getelementptr inbounds i8, i8* %117, i64 32
  %120 = bitcast i8* %119 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %120, align 1
  %121 = getelementptr inbounds i8, i8* %117, i64 %1
  %122 = bitcast i8* %121 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %122, align 1
  %123 = getelementptr inbounds i8, i8* %121, i64 32
  %124 = bitcast i8* %123 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %124, align 1
  %125 = getelementptr inbounds i8, i8* %121, i64 %1
  %126 = bitcast i8* %125 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %126, align 1
  %127 = getelementptr inbounds i8, i8* %125, i64 32
  %128 = bitcast i8* %127 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %128, align 1
  %129 = getelementptr inbounds i8, i8* %125, i64 %1
  %130 = bitcast i8* %129 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %130, align 1
  %131 = getelementptr inbounds i8, i8* %129, i64 32
  %132 = bitcast i8* %131 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %132, align 1
  %133 = getelementptr inbounds i8, i8* %129, i64 %1
  %134 = bitcast i8* %133 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %134, align 1
  %135 = getelementptr inbounds i8, i8* %133, i64 32
  %136 = bitcast i8* %135 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %136, align 1
  %137 = getelementptr inbounds i8, i8* %133, i64 %1
  %138 = bitcast i8* %137 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %138, align 1
  %139 = getelementptr inbounds i8, i8* %137, i64 32
  %140 = bitcast i8* %139 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %140, align 1
  %141 = getelementptr inbounds i8, i8* %137, i64 %1
  %142 = bitcast i8* %141 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %142, align 1
  %143 = getelementptr inbounds i8, i8* %141, i64 32
  %144 = bitcast i8* %143 to <32 x i8>*
  store <32 x i8> %17, <32 x i8>* %144, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_dc_left_predictor_64x16_avx2(i8* nocapture, i64, i8* nocapture readnone, i8* nocapture readonly) local_unnamed_addr #0 {
  %5 = bitcast i8* %3 to <16 x i8>*
  %6 = load <16 x i8>, <16 x i8>* %5, align 16
  %7 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %6, <16 x i8> zeroinitializer) #8
  %8 = shufflevector <2 x i64> %7, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %9 = bitcast <2 x i64> %7 to <8 x i16>
  %10 = bitcast <2 x i64> %8 to <8 x i16>
  %11 = add <8 x i16> %9, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %12 = add <8 x i16> %11, %10
  %13 = ashr <8 x i16> %12, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %14 = bitcast <8 x i16> %13 to <16 x i8>
  %15 = shufflevector <16 x i8> %14, <16 x i8> undef, <16 x i32> zeroinitializer
  %16 = bitcast <16 x i8> %15 to <2 x i64>
  %17 = shufflevector <2 x i64> %16, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %18 = bitcast i8* %0 to <4 x i64>*
  store <4 x i64> %17, <4 x i64>* %18, align 1
  %19 = getelementptr inbounds i8, i8* %0, i64 32
  %20 = bitcast i8* %19 to <4 x i64>*
  store <4 x i64> %17, <4 x i64>* %20, align 1
  %21 = getelementptr inbounds i8, i8* %0, i64 %1
  %22 = bitcast i8* %21 to <4 x i64>*
  store <4 x i64> %17, <4 x i64>* %22, align 1
  %23 = getelementptr inbounds i8, i8* %21, i64 32
  %24 = bitcast i8* %23 to <4 x i64>*
  store <4 x i64> %17, <4 x i64>* %24, align 1
  %25 = getelementptr inbounds i8, i8* %21, i64 %1
  %26 = bitcast i8* %25 to <4 x i64>*
  store <4 x i64> %17, <4 x i64>* %26, align 1
  %27 = getelementptr inbounds i8, i8* %25, i64 32
  %28 = bitcast i8* %27 to <4 x i64>*
  store <4 x i64> %17, <4 x i64>* %28, align 1
  %29 = getelementptr inbounds i8, i8* %25, i64 %1
  %30 = bitcast i8* %29 to <4 x i64>*
  store <4 x i64> %17, <4 x i64>* %30, align 1
  %31 = getelementptr inbounds i8, i8* %29, i64 32
  %32 = bitcast i8* %31 to <4 x i64>*
  store <4 x i64> %17, <4 x i64>* %32, align 1
  %33 = getelementptr inbounds i8, i8* %29, i64 %1
  %34 = bitcast i8* %33 to <4 x i64>*
  store <4 x i64> %17, <4 x i64>* %34, align 1
  %35 = getelementptr inbounds i8, i8* %33, i64 32
  %36 = bitcast i8* %35 to <4 x i64>*
  store <4 x i64> %17, <4 x i64>* %36, align 1
  %37 = getelementptr inbounds i8, i8* %33, i64 %1
  %38 = bitcast i8* %37 to <4 x i64>*
  store <4 x i64> %17, <4 x i64>* %38, align 1
  %39 = getelementptr inbounds i8, i8* %37, i64 32
  %40 = bitcast i8* %39 to <4 x i64>*
  store <4 x i64> %17, <4 x i64>* %40, align 1
  %41 = getelementptr inbounds i8, i8* %37, i64 %1
  %42 = bitcast i8* %41 to <4 x i64>*
  store <4 x i64> %17, <4 x i64>* %42, align 1
  %43 = getelementptr inbounds i8, i8* %41, i64 32
  %44 = bitcast i8* %43 to <4 x i64>*
  store <4 x i64> %17, <4 x i64>* %44, align 1
  %45 = getelementptr inbounds i8, i8* %41, i64 %1
  %46 = bitcast i8* %45 to <4 x i64>*
  store <4 x i64> %17, <4 x i64>* %46, align 1
  %47 = getelementptr inbounds i8, i8* %45, i64 32
  %48 = bitcast i8* %47 to <4 x i64>*
  store <4 x i64> %17, <4 x i64>* %48, align 1
  %49 = getelementptr inbounds i8, i8* %45, i64 %1
  %50 = bitcast i8* %49 to <4 x i64>*
  store <4 x i64> %17, <4 x i64>* %50, align 1
  %51 = getelementptr inbounds i8, i8* %49, i64 32
  %52 = bitcast i8* %51 to <4 x i64>*
  store <4 x i64> %17, <4 x i64>* %52, align 1
  %53 = getelementptr inbounds i8, i8* %49, i64 %1
  %54 = bitcast i8* %53 to <4 x i64>*
  store <4 x i64> %17, <4 x i64>* %54, align 1
  %55 = getelementptr inbounds i8, i8* %53, i64 32
  %56 = bitcast i8* %55 to <4 x i64>*
  store <4 x i64> %17, <4 x i64>* %56, align 1
  %57 = getelementptr inbounds i8, i8* %53, i64 %1
  %58 = bitcast i8* %57 to <4 x i64>*
  store <4 x i64> %17, <4 x i64>* %58, align 1
  %59 = getelementptr inbounds i8, i8* %57, i64 32
  %60 = bitcast i8* %59 to <4 x i64>*
  store <4 x i64> %17, <4 x i64>* %60, align 1
  %61 = getelementptr inbounds i8, i8* %57, i64 %1
  %62 = bitcast i8* %61 to <4 x i64>*
  store <4 x i64> %17, <4 x i64>* %62, align 1
  %63 = getelementptr inbounds i8, i8* %61, i64 32
  %64 = bitcast i8* %63 to <4 x i64>*
  store <4 x i64> %17, <4 x i64>* %64, align 1
  %65 = getelementptr inbounds i8, i8* %61, i64 %1
  %66 = bitcast i8* %65 to <4 x i64>*
  store <4 x i64> %17, <4 x i64>* %66, align 1
  %67 = getelementptr inbounds i8, i8* %65, i64 32
  %68 = bitcast i8* %67 to <4 x i64>*
  store <4 x i64> %17, <4 x i64>* %68, align 1
  %69 = getelementptr inbounds i8, i8* %65, i64 %1
  %70 = bitcast i8* %69 to <4 x i64>*
  store <4 x i64> %17, <4 x i64>* %70, align 1
  %71 = getelementptr inbounds i8, i8* %69, i64 32
  %72 = bitcast i8* %71 to <4 x i64>*
  store <4 x i64> %17, <4 x i64>* %72, align 1
  %73 = getelementptr inbounds i8, i8* %69, i64 %1
  %74 = bitcast i8* %73 to <4 x i64>*
  store <4 x i64> %17, <4 x i64>* %74, align 1
  %75 = getelementptr inbounds i8, i8* %73, i64 32
  %76 = bitcast i8* %75 to <4 x i64>*
  store <4 x i64> %17, <4 x i64>* %76, align 1
  %77 = getelementptr inbounds i8, i8* %73, i64 %1
  %78 = bitcast i8* %77 to <4 x i64>*
  store <4 x i64> %17, <4 x i64>* %78, align 1
  %79 = getelementptr inbounds i8, i8* %77, i64 32
  %80 = bitcast i8* %79 to <4 x i64>*
  store <4 x i64> %17, <4 x i64>* %80, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable writeonly
define hidden void @aom_dc_128_predictor_32x16_avx2(i8* nocapture, i64, i8* nocapture readnone, i8* nocapture readnone) local_unnamed_addr #2 {
  %5 = bitcast i8* %0 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %5, align 1
  %6 = getelementptr inbounds i8, i8* %0, i64 %1
  %7 = bitcast i8* %6 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %7, align 1
  %8 = getelementptr inbounds i8, i8* %6, i64 %1
  %9 = bitcast i8* %8 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %9, align 1
  %10 = getelementptr inbounds i8, i8* %8, i64 %1
  %11 = bitcast i8* %10 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %11, align 1
  %12 = getelementptr inbounds i8, i8* %10, i64 %1
  %13 = bitcast i8* %12 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %13, align 1
  %14 = getelementptr inbounds i8, i8* %12, i64 %1
  %15 = bitcast i8* %14 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %15, align 1
  %16 = getelementptr inbounds i8, i8* %14, i64 %1
  %17 = bitcast i8* %16 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %17, align 1
  %18 = getelementptr inbounds i8, i8* %16, i64 %1
  %19 = bitcast i8* %18 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %19, align 1
  %20 = getelementptr inbounds i8, i8* %18, i64 %1
  %21 = bitcast i8* %20 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %21, align 1
  %22 = getelementptr inbounds i8, i8* %20, i64 %1
  %23 = bitcast i8* %22 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %23, align 1
  %24 = getelementptr inbounds i8, i8* %22, i64 %1
  %25 = bitcast i8* %24 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %25, align 1
  %26 = getelementptr inbounds i8, i8* %24, i64 %1
  %27 = bitcast i8* %26 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %27, align 1
  %28 = getelementptr inbounds i8, i8* %26, i64 %1
  %29 = bitcast i8* %28 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %29, align 1
  %30 = getelementptr inbounds i8, i8* %28, i64 %1
  %31 = bitcast i8* %30 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %31, align 1
  %32 = getelementptr inbounds i8, i8* %30, i64 %1
  %33 = bitcast i8* %32 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %33, align 1
  %34 = getelementptr inbounds i8, i8* %32, i64 %1
  %35 = bitcast i8* %34 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %35, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable writeonly
define hidden void @aom_dc_128_predictor_32x64_avx2(i8* nocapture, i64, i8* nocapture readnone, i8* nocapture readnone) local_unnamed_addr #2 {
  %5 = bitcast i8* %0 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %5, align 1
  %6 = getelementptr inbounds i8, i8* %0, i64 %1
  %7 = bitcast i8* %6 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %7, align 1
  %8 = getelementptr inbounds i8, i8* %6, i64 %1
  %9 = bitcast i8* %8 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %9, align 1
  %10 = getelementptr inbounds i8, i8* %8, i64 %1
  %11 = bitcast i8* %10 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %11, align 1
  %12 = getelementptr inbounds i8, i8* %10, i64 %1
  %13 = bitcast i8* %12 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %13, align 1
  %14 = getelementptr inbounds i8, i8* %12, i64 %1
  %15 = bitcast i8* %14 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %15, align 1
  %16 = getelementptr inbounds i8, i8* %14, i64 %1
  %17 = bitcast i8* %16 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %17, align 1
  %18 = getelementptr inbounds i8, i8* %16, i64 %1
  %19 = bitcast i8* %18 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %19, align 1
  %20 = getelementptr inbounds i8, i8* %18, i64 %1
  %21 = bitcast i8* %20 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %21, align 1
  %22 = getelementptr inbounds i8, i8* %20, i64 %1
  %23 = bitcast i8* %22 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %23, align 1
  %24 = getelementptr inbounds i8, i8* %22, i64 %1
  %25 = bitcast i8* %24 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %25, align 1
  %26 = getelementptr inbounds i8, i8* %24, i64 %1
  %27 = bitcast i8* %26 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %27, align 1
  %28 = getelementptr inbounds i8, i8* %26, i64 %1
  %29 = bitcast i8* %28 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %29, align 1
  %30 = getelementptr inbounds i8, i8* %28, i64 %1
  %31 = bitcast i8* %30 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %31, align 1
  %32 = getelementptr inbounds i8, i8* %30, i64 %1
  %33 = bitcast i8* %32 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %33, align 1
  %34 = getelementptr inbounds i8, i8* %32, i64 %1
  %35 = bitcast i8* %34 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %35, align 1
  %36 = getelementptr inbounds i8, i8* %34, i64 %1
  %37 = bitcast i8* %36 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %37, align 1
  %38 = getelementptr inbounds i8, i8* %36, i64 %1
  %39 = bitcast i8* %38 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %39, align 1
  %40 = getelementptr inbounds i8, i8* %38, i64 %1
  %41 = bitcast i8* %40 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %41, align 1
  %42 = getelementptr inbounds i8, i8* %40, i64 %1
  %43 = bitcast i8* %42 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %43, align 1
  %44 = getelementptr inbounds i8, i8* %42, i64 %1
  %45 = bitcast i8* %44 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %45, align 1
  %46 = getelementptr inbounds i8, i8* %44, i64 %1
  %47 = bitcast i8* %46 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %47, align 1
  %48 = getelementptr inbounds i8, i8* %46, i64 %1
  %49 = bitcast i8* %48 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %49, align 1
  %50 = getelementptr inbounds i8, i8* %48, i64 %1
  %51 = bitcast i8* %50 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %51, align 1
  %52 = getelementptr inbounds i8, i8* %50, i64 %1
  %53 = bitcast i8* %52 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %53, align 1
  %54 = getelementptr inbounds i8, i8* %52, i64 %1
  %55 = bitcast i8* %54 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %55, align 1
  %56 = getelementptr inbounds i8, i8* %54, i64 %1
  %57 = bitcast i8* %56 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %57, align 1
  %58 = getelementptr inbounds i8, i8* %56, i64 %1
  %59 = bitcast i8* %58 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %59, align 1
  %60 = getelementptr inbounds i8, i8* %58, i64 %1
  %61 = bitcast i8* %60 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %61, align 1
  %62 = getelementptr inbounds i8, i8* %60, i64 %1
  %63 = bitcast i8* %62 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %63, align 1
  %64 = getelementptr inbounds i8, i8* %62, i64 %1
  %65 = bitcast i8* %64 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %65, align 1
  %66 = getelementptr inbounds i8, i8* %64, i64 %1
  %67 = bitcast i8* %66 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %67, align 1
  %68 = getelementptr inbounds i8, i8* %66, i64 %1
  %69 = bitcast i8* %68 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %69, align 1
  %70 = getelementptr inbounds i8, i8* %68, i64 %1
  %71 = bitcast i8* %70 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %71, align 1
  %72 = getelementptr inbounds i8, i8* %70, i64 %1
  %73 = bitcast i8* %72 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %73, align 1
  %74 = getelementptr inbounds i8, i8* %72, i64 %1
  %75 = bitcast i8* %74 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %75, align 1
  %76 = getelementptr inbounds i8, i8* %74, i64 %1
  %77 = bitcast i8* %76 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %77, align 1
  %78 = getelementptr inbounds i8, i8* %76, i64 %1
  %79 = bitcast i8* %78 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %79, align 1
  %80 = getelementptr inbounds i8, i8* %78, i64 %1
  %81 = bitcast i8* %80 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %81, align 1
  %82 = getelementptr inbounds i8, i8* %80, i64 %1
  %83 = bitcast i8* %82 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %83, align 1
  %84 = getelementptr inbounds i8, i8* %82, i64 %1
  %85 = bitcast i8* %84 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %85, align 1
  %86 = getelementptr inbounds i8, i8* %84, i64 %1
  %87 = bitcast i8* %86 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %87, align 1
  %88 = getelementptr inbounds i8, i8* %86, i64 %1
  %89 = bitcast i8* %88 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %89, align 1
  %90 = getelementptr inbounds i8, i8* %88, i64 %1
  %91 = bitcast i8* %90 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %91, align 1
  %92 = getelementptr inbounds i8, i8* %90, i64 %1
  %93 = bitcast i8* %92 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %93, align 1
  %94 = getelementptr inbounds i8, i8* %92, i64 %1
  %95 = bitcast i8* %94 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %95, align 1
  %96 = getelementptr inbounds i8, i8* %94, i64 %1
  %97 = bitcast i8* %96 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %97, align 1
  %98 = getelementptr inbounds i8, i8* %96, i64 %1
  %99 = bitcast i8* %98 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %99, align 1
  %100 = getelementptr inbounds i8, i8* %98, i64 %1
  %101 = bitcast i8* %100 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %101, align 1
  %102 = getelementptr inbounds i8, i8* %100, i64 %1
  %103 = bitcast i8* %102 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %103, align 1
  %104 = getelementptr inbounds i8, i8* %102, i64 %1
  %105 = bitcast i8* %104 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %105, align 1
  %106 = getelementptr inbounds i8, i8* %104, i64 %1
  %107 = bitcast i8* %106 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %107, align 1
  %108 = getelementptr inbounds i8, i8* %106, i64 %1
  %109 = bitcast i8* %108 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %109, align 1
  %110 = getelementptr inbounds i8, i8* %108, i64 %1
  %111 = bitcast i8* %110 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %111, align 1
  %112 = getelementptr inbounds i8, i8* %110, i64 %1
  %113 = bitcast i8* %112 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %113, align 1
  %114 = getelementptr inbounds i8, i8* %112, i64 %1
  %115 = bitcast i8* %114 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %115, align 1
  %116 = getelementptr inbounds i8, i8* %114, i64 %1
  %117 = bitcast i8* %116 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %117, align 1
  %118 = getelementptr inbounds i8, i8* %116, i64 %1
  %119 = bitcast i8* %118 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %119, align 1
  %120 = getelementptr inbounds i8, i8* %118, i64 %1
  %121 = bitcast i8* %120 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %121, align 1
  %122 = getelementptr inbounds i8, i8* %120, i64 %1
  %123 = bitcast i8* %122 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %123, align 1
  %124 = getelementptr inbounds i8, i8* %122, i64 %1
  %125 = bitcast i8* %124 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %125, align 1
  %126 = getelementptr inbounds i8, i8* %124, i64 %1
  %127 = bitcast i8* %126 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %127, align 1
  %128 = getelementptr inbounds i8, i8* %126, i64 %1
  %129 = bitcast i8* %128 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %129, align 1
  %130 = getelementptr inbounds i8, i8* %128, i64 %1
  %131 = bitcast i8* %130 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %131, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable writeonly
define hidden void @aom_dc_128_predictor_64x64_avx2(i8* nocapture, i64, i8* nocapture readnone, i8* nocapture readnone) local_unnamed_addr #2 {
  %5 = getelementptr inbounds i8, i8* %0, i64 %1
  call void @llvm.memset.p0i8.i64(i8* align 1 %0, i8 -128, i64 64, i1 false)
  %6 = getelementptr inbounds i8, i8* %5, i64 %1
  call void @llvm.memset.p0i8.i64(i8* align 1 %5, i8 -128, i64 64, i1 false)
  %7 = getelementptr inbounds i8, i8* %6, i64 %1
  call void @llvm.memset.p0i8.i64(i8* align 1 %6, i8 -128, i64 64, i1 false)
  %8 = getelementptr inbounds i8, i8* %7, i64 %1
  call void @llvm.memset.p0i8.i64(i8* align 1 %7, i8 -128, i64 64, i1 false)
  %9 = getelementptr inbounds i8, i8* %8, i64 %1
  call void @llvm.memset.p0i8.i64(i8* align 1 %8, i8 -128, i64 64, i1 false)
  %10 = getelementptr inbounds i8, i8* %9, i64 %1
  call void @llvm.memset.p0i8.i64(i8* align 1 %9, i8 -128, i64 64, i1 false)
  %11 = getelementptr inbounds i8, i8* %10, i64 %1
  call void @llvm.memset.p0i8.i64(i8* align 1 %10, i8 -128, i64 64, i1 false)
  %12 = getelementptr inbounds i8, i8* %11, i64 %1
  call void @llvm.memset.p0i8.i64(i8* align 1 %11, i8 -128, i64 64, i1 false)
  %13 = getelementptr inbounds i8, i8* %12, i64 %1
  call void @llvm.memset.p0i8.i64(i8* align 1 %12, i8 -128, i64 64, i1 false)
  %14 = getelementptr inbounds i8, i8* %13, i64 %1
  call void @llvm.memset.p0i8.i64(i8* align 1 %13, i8 -128, i64 64, i1 false)
  %15 = getelementptr inbounds i8, i8* %14, i64 %1
  call void @llvm.memset.p0i8.i64(i8* align 1 %14, i8 -128, i64 64, i1 false)
  %16 = getelementptr inbounds i8, i8* %15, i64 %1
  call void @llvm.memset.p0i8.i64(i8* align 1 %15, i8 -128, i64 64, i1 false)
  %17 = getelementptr inbounds i8, i8* %16, i64 %1
  call void @llvm.memset.p0i8.i64(i8* align 1 %16, i8 -128, i64 64, i1 false)
  %18 = getelementptr inbounds i8, i8* %17, i64 %1
  call void @llvm.memset.p0i8.i64(i8* align 1 %17, i8 -128, i64 64, i1 false)
  %19 = getelementptr inbounds i8, i8* %18, i64 %1
  call void @llvm.memset.p0i8.i64(i8* align 1 %18, i8 -128, i64 64, i1 false)
  %20 = getelementptr inbounds i8, i8* %19, i64 %1
  call void @llvm.memset.p0i8.i64(i8* align 1 %19, i8 -128, i64 64, i1 false)
  %21 = getelementptr inbounds i8, i8* %20, i64 %1
  call void @llvm.memset.p0i8.i64(i8* align 1 %20, i8 -128, i64 64, i1 false)
  %22 = getelementptr inbounds i8, i8* %21, i64 %1
  call void @llvm.memset.p0i8.i64(i8* align 1 %21, i8 -128, i64 64, i1 false)
  %23 = getelementptr inbounds i8, i8* %22, i64 %1
  call void @llvm.memset.p0i8.i64(i8* align 1 %22, i8 -128, i64 64, i1 false)
  %24 = getelementptr inbounds i8, i8* %23, i64 %1
  call void @llvm.memset.p0i8.i64(i8* align 1 %23, i8 -128, i64 64, i1 false)
  %25 = getelementptr inbounds i8, i8* %24, i64 %1
  call void @llvm.memset.p0i8.i64(i8* align 1 %24, i8 -128, i64 64, i1 false)
  %26 = getelementptr inbounds i8, i8* %25, i64 %1
  call void @llvm.memset.p0i8.i64(i8* align 1 %25, i8 -128, i64 64, i1 false)
  %27 = getelementptr inbounds i8, i8* %26, i64 %1
  call void @llvm.memset.p0i8.i64(i8* align 1 %26, i8 -128, i64 64, i1 false)
  %28 = getelementptr inbounds i8, i8* %27, i64 %1
  call void @llvm.memset.p0i8.i64(i8* align 1 %27, i8 -128, i64 64, i1 false)
  %29 = getelementptr inbounds i8, i8* %28, i64 %1
  call void @llvm.memset.p0i8.i64(i8* align 1 %28, i8 -128, i64 64, i1 false)
  %30 = getelementptr inbounds i8, i8* %29, i64 %1
  call void @llvm.memset.p0i8.i64(i8* align 1 %29, i8 -128, i64 64, i1 false)
  %31 = getelementptr inbounds i8, i8* %30, i64 %1
  call void @llvm.memset.p0i8.i64(i8* align 1 %30, i8 -128, i64 64, i1 false)
  %32 = getelementptr inbounds i8, i8* %31, i64 %1
  call void @llvm.memset.p0i8.i64(i8* align 1 %31, i8 -128, i64 64, i1 false)
  %33 = getelementptr inbounds i8, i8* %32, i64 %1
  call void @llvm.memset.p0i8.i64(i8* align 1 %32, i8 -128, i64 64, i1 false)
  %34 = getelementptr inbounds i8, i8* %33, i64 %1
  call void @llvm.memset.p0i8.i64(i8* align 1 %33, i8 -128, i64 64, i1 false)
  %35 = getelementptr inbounds i8, i8* %34, i64 %1
  call void @llvm.memset.p0i8.i64(i8* align 1 %34, i8 -128, i64 64, i1 false)
  %36 = getelementptr inbounds i8, i8* %35, i64 %1
  call void @llvm.memset.p0i8.i64(i8* align 1 %35, i8 -128, i64 64, i1 false)
  %37 = getelementptr inbounds i8, i8* %36, i64 %1
  call void @llvm.memset.p0i8.i64(i8* align 1 %36, i8 -128, i64 64, i1 false)
  %38 = getelementptr inbounds i8, i8* %37, i64 %1
  call void @llvm.memset.p0i8.i64(i8* align 1 %37, i8 -128, i64 64, i1 false)
  %39 = getelementptr inbounds i8, i8* %38, i64 %1
  call void @llvm.memset.p0i8.i64(i8* align 1 %38, i8 -128, i64 64, i1 false)
  %40 = getelementptr inbounds i8, i8* %39, i64 %1
  call void @llvm.memset.p0i8.i64(i8* align 1 %39, i8 -128, i64 64, i1 false)
  %41 = getelementptr inbounds i8, i8* %40, i64 %1
  call void @llvm.memset.p0i8.i64(i8* align 1 %40, i8 -128, i64 64, i1 false)
  %42 = getelementptr inbounds i8, i8* %41, i64 %1
  call void @llvm.memset.p0i8.i64(i8* align 1 %41, i8 -128, i64 64, i1 false)
  %43 = getelementptr inbounds i8, i8* %42, i64 %1
  call void @llvm.memset.p0i8.i64(i8* align 1 %42, i8 -128, i64 64, i1 false)
  %44 = getelementptr inbounds i8, i8* %43, i64 %1
  call void @llvm.memset.p0i8.i64(i8* align 1 %43, i8 -128, i64 64, i1 false)
  %45 = getelementptr inbounds i8, i8* %44, i64 %1
  call void @llvm.memset.p0i8.i64(i8* align 1 %44, i8 -128, i64 64, i1 false)
  %46 = getelementptr inbounds i8, i8* %45, i64 %1
  call void @llvm.memset.p0i8.i64(i8* align 1 %45, i8 -128, i64 64, i1 false)
  %47 = getelementptr inbounds i8, i8* %46, i64 %1
  call void @llvm.memset.p0i8.i64(i8* align 1 %46, i8 -128, i64 64, i1 false)
  %48 = getelementptr inbounds i8, i8* %47, i64 %1
  call void @llvm.memset.p0i8.i64(i8* align 1 %47, i8 -128, i64 64, i1 false)
  %49 = getelementptr inbounds i8, i8* %48, i64 %1
  call void @llvm.memset.p0i8.i64(i8* align 1 %48, i8 -128, i64 64, i1 false)
  %50 = getelementptr inbounds i8, i8* %49, i64 %1
  call void @llvm.memset.p0i8.i64(i8* align 1 %49, i8 -128, i64 64, i1 false)
  %51 = getelementptr inbounds i8, i8* %50, i64 %1
  call void @llvm.memset.p0i8.i64(i8* align 1 %50, i8 -128, i64 64, i1 false)
  %52 = getelementptr inbounds i8, i8* %51, i64 %1
  call void @llvm.memset.p0i8.i64(i8* align 1 %51, i8 -128, i64 64, i1 false)
  %53 = getelementptr inbounds i8, i8* %52, i64 %1
  call void @llvm.memset.p0i8.i64(i8* align 1 %52, i8 -128, i64 64, i1 false)
  %54 = getelementptr inbounds i8, i8* %53, i64 %1
  call void @llvm.memset.p0i8.i64(i8* align 1 %53, i8 -128, i64 64, i1 false)
  %55 = getelementptr inbounds i8, i8* %54, i64 %1
  call void @llvm.memset.p0i8.i64(i8* align 1 %54, i8 -128, i64 64, i1 false)
  %56 = getelementptr inbounds i8, i8* %55, i64 %1
  call void @llvm.memset.p0i8.i64(i8* align 1 %55, i8 -128, i64 64, i1 false)
  %57 = getelementptr inbounds i8, i8* %56, i64 %1
  call void @llvm.memset.p0i8.i64(i8* align 1 %56, i8 -128, i64 64, i1 false)
  %58 = getelementptr inbounds i8, i8* %57, i64 %1
  call void @llvm.memset.p0i8.i64(i8* align 1 %57, i8 -128, i64 64, i1 false)
  %59 = getelementptr inbounds i8, i8* %58, i64 %1
  call void @llvm.memset.p0i8.i64(i8* align 1 %58, i8 -128, i64 64, i1 false)
  %60 = getelementptr inbounds i8, i8* %59, i64 %1
  call void @llvm.memset.p0i8.i64(i8* align 1 %59, i8 -128, i64 64, i1 false)
  %61 = getelementptr inbounds i8, i8* %60, i64 %1
  call void @llvm.memset.p0i8.i64(i8* align 1 %60, i8 -128, i64 64, i1 false)
  %62 = getelementptr inbounds i8, i8* %61, i64 %1
  call void @llvm.memset.p0i8.i64(i8* align 1 %61, i8 -128, i64 64, i1 false)
  %63 = getelementptr inbounds i8, i8* %62, i64 %1
  call void @llvm.memset.p0i8.i64(i8* align 1 %62, i8 -128, i64 64, i1 false)
  %64 = getelementptr inbounds i8, i8* %63, i64 %1
  call void @llvm.memset.p0i8.i64(i8* align 1 %63, i8 -128, i64 64, i1 false)
  %65 = getelementptr inbounds i8, i8* %64, i64 %1
  call void @llvm.memset.p0i8.i64(i8* align 1 %64, i8 -128, i64 64, i1 false)
  %66 = getelementptr inbounds i8, i8* %65, i64 %1
  call void @llvm.memset.p0i8.i64(i8* align 1 %65, i8 -128, i64 64, i1 false)
  %67 = getelementptr inbounds i8, i8* %66, i64 %1
  call void @llvm.memset.p0i8.i64(i8* align 1 %66, i8 -128, i64 64, i1 false)
  call void @llvm.memset.p0i8.i64(i8* align 1 %67, i8 -128, i64 64, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable writeonly
define hidden void @aom_dc_128_predictor_64x32_avx2(i8* nocapture, i64, i8* nocapture readnone, i8* nocapture readnone) local_unnamed_addr #2 {
  %5 = getelementptr inbounds i8, i8* %0, i64 %1
  %6 = bitcast i8* %5 to <4 x i64>*
  call void @llvm.memset.p0i8.i64(i8* align 1 %0, i8 -128, i64 64, i1 false)
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %6, align 1
  %7 = getelementptr inbounds i8, i8* %5, i64 32
  %8 = bitcast i8* %7 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %8, align 1
  %9 = getelementptr inbounds i8, i8* %5, i64 %1
  %10 = bitcast i8* %9 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %10, align 1
  %11 = getelementptr inbounds i8, i8* %9, i64 32
  %12 = bitcast i8* %11 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %12, align 1
  %13 = getelementptr inbounds i8, i8* %9, i64 %1
  %14 = bitcast i8* %13 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %14, align 1
  %15 = getelementptr inbounds i8, i8* %13, i64 32
  %16 = bitcast i8* %15 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %16, align 1
  %17 = getelementptr inbounds i8, i8* %13, i64 %1
  %18 = bitcast i8* %17 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %18, align 1
  %19 = getelementptr inbounds i8, i8* %17, i64 32
  %20 = bitcast i8* %19 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %20, align 1
  %21 = getelementptr inbounds i8, i8* %17, i64 %1
  %22 = bitcast i8* %21 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %22, align 1
  %23 = getelementptr inbounds i8, i8* %21, i64 32
  %24 = bitcast i8* %23 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %24, align 1
  %25 = getelementptr inbounds i8, i8* %21, i64 %1
  %26 = bitcast i8* %25 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %26, align 1
  %27 = getelementptr inbounds i8, i8* %25, i64 32
  %28 = bitcast i8* %27 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %28, align 1
  %29 = getelementptr inbounds i8, i8* %25, i64 %1
  %30 = bitcast i8* %29 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %30, align 1
  %31 = getelementptr inbounds i8, i8* %29, i64 32
  %32 = bitcast i8* %31 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %32, align 1
  %33 = getelementptr inbounds i8, i8* %29, i64 %1
  %34 = bitcast i8* %33 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %34, align 1
  %35 = getelementptr inbounds i8, i8* %33, i64 32
  %36 = bitcast i8* %35 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %36, align 1
  %37 = getelementptr inbounds i8, i8* %33, i64 %1
  %38 = bitcast i8* %37 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %38, align 1
  %39 = getelementptr inbounds i8, i8* %37, i64 32
  %40 = bitcast i8* %39 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %40, align 1
  %41 = getelementptr inbounds i8, i8* %37, i64 %1
  %42 = bitcast i8* %41 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %42, align 1
  %43 = getelementptr inbounds i8, i8* %41, i64 32
  %44 = bitcast i8* %43 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %44, align 1
  %45 = getelementptr inbounds i8, i8* %41, i64 %1
  %46 = bitcast i8* %45 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %46, align 1
  %47 = getelementptr inbounds i8, i8* %45, i64 32
  %48 = bitcast i8* %47 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %48, align 1
  %49 = getelementptr inbounds i8, i8* %45, i64 %1
  %50 = bitcast i8* %49 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %50, align 1
  %51 = getelementptr inbounds i8, i8* %49, i64 32
  %52 = bitcast i8* %51 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %52, align 1
  %53 = getelementptr inbounds i8, i8* %49, i64 %1
  %54 = bitcast i8* %53 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %54, align 1
  %55 = getelementptr inbounds i8, i8* %53, i64 32
  %56 = bitcast i8* %55 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %56, align 1
  %57 = getelementptr inbounds i8, i8* %53, i64 %1
  %58 = bitcast i8* %57 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %58, align 1
  %59 = getelementptr inbounds i8, i8* %57, i64 32
  %60 = bitcast i8* %59 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %60, align 1
  %61 = getelementptr inbounds i8, i8* %57, i64 %1
  %62 = bitcast i8* %61 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %62, align 1
  %63 = getelementptr inbounds i8, i8* %61, i64 32
  %64 = bitcast i8* %63 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %64, align 1
  %65 = getelementptr inbounds i8, i8* %61, i64 %1
  %66 = bitcast i8* %65 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %66, align 1
  %67 = getelementptr inbounds i8, i8* %65, i64 32
  %68 = bitcast i8* %67 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %68, align 1
  %69 = getelementptr inbounds i8, i8* %65, i64 %1
  %70 = bitcast i8* %69 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %70, align 1
  %71 = getelementptr inbounds i8, i8* %69, i64 32
  %72 = bitcast i8* %71 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %72, align 1
  %73 = getelementptr inbounds i8, i8* %69, i64 %1
  %74 = bitcast i8* %73 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %74, align 1
  %75 = getelementptr inbounds i8, i8* %73, i64 32
  %76 = bitcast i8* %75 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %76, align 1
  %77 = getelementptr inbounds i8, i8* %73, i64 %1
  %78 = bitcast i8* %77 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %78, align 1
  %79 = getelementptr inbounds i8, i8* %77, i64 32
  %80 = bitcast i8* %79 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %80, align 1
  %81 = getelementptr inbounds i8, i8* %77, i64 %1
  %82 = bitcast i8* %81 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %82, align 1
  %83 = getelementptr inbounds i8, i8* %81, i64 32
  %84 = bitcast i8* %83 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %84, align 1
  %85 = getelementptr inbounds i8, i8* %81, i64 %1
  %86 = bitcast i8* %85 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %86, align 1
  %87 = getelementptr inbounds i8, i8* %85, i64 32
  %88 = bitcast i8* %87 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %88, align 1
  %89 = getelementptr inbounds i8, i8* %85, i64 %1
  %90 = bitcast i8* %89 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %90, align 1
  %91 = getelementptr inbounds i8, i8* %89, i64 32
  %92 = bitcast i8* %91 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %92, align 1
  %93 = getelementptr inbounds i8, i8* %89, i64 %1
  %94 = bitcast i8* %93 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %94, align 1
  %95 = getelementptr inbounds i8, i8* %93, i64 32
  %96 = bitcast i8* %95 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %96, align 1
  %97 = getelementptr inbounds i8, i8* %93, i64 %1
  %98 = bitcast i8* %97 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %98, align 1
  %99 = getelementptr inbounds i8, i8* %97, i64 32
  %100 = bitcast i8* %99 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %100, align 1
  %101 = getelementptr inbounds i8, i8* %97, i64 %1
  %102 = bitcast i8* %101 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %102, align 1
  %103 = getelementptr inbounds i8, i8* %101, i64 32
  %104 = bitcast i8* %103 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %104, align 1
  %105 = getelementptr inbounds i8, i8* %101, i64 %1
  %106 = bitcast i8* %105 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %106, align 1
  %107 = getelementptr inbounds i8, i8* %105, i64 32
  %108 = bitcast i8* %107 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %108, align 1
  %109 = getelementptr inbounds i8, i8* %105, i64 %1
  %110 = bitcast i8* %109 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %110, align 1
  %111 = getelementptr inbounds i8, i8* %109, i64 32
  %112 = bitcast i8* %111 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %112, align 1
  %113 = getelementptr inbounds i8, i8* %109, i64 %1
  %114 = bitcast i8* %113 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %114, align 1
  %115 = getelementptr inbounds i8, i8* %113, i64 32
  %116 = bitcast i8* %115 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %116, align 1
  %117 = getelementptr inbounds i8, i8* %113, i64 %1
  %118 = bitcast i8* %117 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %118, align 1
  %119 = getelementptr inbounds i8, i8* %117, i64 32
  %120 = bitcast i8* %119 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %120, align 1
  %121 = getelementptr inbounds i8, i8* %117, i64 %1
  %122 = bitcast i8* %121 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %122, align 1
  %123 = getelementptr inbounds i8, i8* %121, i64 32
  %124 = bitcast i8* %123 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %124, align 1
  %125 = getelementptr inbounds i8, i8* %121, i64 %1
  %126 = bitcast i8* %125 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %126, align 1
  %127 = getelementptr inbounds i8, i8* %125, i64 32
  %128 = bitcast i8* %127 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %128, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable writeonly
define hidden void @aom_dc_128_predictor_64x16_avx2(i8* nocapture, i64, i8* nocapture readnone, i8* nocapture readnone) local_unnamed_addr #2 {
  %5 = getelementptr inbounds i8, i8* %0, i64 %1
  %6 = bitcast i8* %5 to <4 x i64>*
  call void @llvm.memset.p0i8.i64(i8* align 1 %0, i8 -128, i64 64, i1 false)
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %6, align 1
  %7 = getelementptr inbounds i8, i8* %5, i64 32
  %8 = bitcast i8* %7 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %8, align 1
  %9 = getelementptr inbounds i8, i8* %5, i64 %1
  %10 = bitcast i8* %9 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %10, align 1
  %11 = getelementptr inbounds i8, i8* %9, i64 32
  %12 = bitcast i8* %11 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %12, align 1
  %13 = getelementptr inbounds i8, i8* %9, i64 %1
  %14 = bitcast i8* %13 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %14, align 1
  %15 = getelementptr inbounds i8, i8* %13, i64 32
  %16 = bitcast i8* %15 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %16, align 1
  %17 = getelementptr inbounds i8, i8* %13, i64 %1
  %18 = bitcast i8* %17 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %18, align 1
  %19 = getelementptr inbounds i8, i8* %17, i64 32
  %20 = bitcast i8* %19 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %20, align 1
  %21 = getelementptr inbounds i8, i8* %17, i64 %1
  %22 = bitcast i8* %21 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %22, align 1
  %23 = getelementptr inbounds i8, i8* %21, i64 32
  %24 = bitcast i8* %23 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %24, align 1
  %25 = getelementptr inbounds i8, i8* %21, i64 %1
  %26 = bitcast i8* %25 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %26, align 1
  %27 = getelementptr inbounds i8, i8* %25, i64 32
  %28 = bitcast i8* %27 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %28, align 1
  %29 = getelementptr inbounds i8, i8* %25, i64 %1
  %30 = bitcast i8* %29 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %30, align 1
  %31 = getelementptr inbounds i8, i8* %29, i64 32
  %32 = bitcast i8* %31 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %32, align 1
  %33 = getelementptr inbounds i8, i8* %29, i64 %1
  %34 = bitcast i8* %33 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %34, align 1
  %35 = getelementptr inbounds i8, i8* %33, i64 32
  %36 = bitcast i8* %35 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %36, align 1
  %37 = getelementptr inbounds i8, i8* %33, i64 %1
  %38 = bitcast i8* %37 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %38, align 1
  %39 = getelementptr inbounds i8, i8* %37, i64 32
  %40 = bitcast i8* %39 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %40, align 1
  %41 = getelementptr inbounds i8, i8* %37, i64 %1
  %42 = bitcast i8* %41 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %42, align 1
  %43 = getelementptr inbounds i8, i8* %41, i64 32
  %44 = bitcast i8* %43 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %44, align 1
  %45 = getelementptr inbounds i8, i8* %41, i64 %1
  %46 = bitcast i8* %45 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %46, align 1
  %47 = getelementptr inbounds i8, i8* %45, i64 32
  %48 = bitcast i8* %47 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %48, align 1
  %49 = getelementptr inbounds i8, i8* %45, i64 %1
  %50 = bitcast i8* %49 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %50, align 1
  %51 = getelementptr inbounds i8, i8* %49, i64 32
  %52 = bitcast i8* %51 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %52, align 1
  %53 = getelementptr inbounds i8, i8* %49, i64 %1
  %54 = bitcast i8* %53 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %54, align 1
  %55 = getelementptr inbounds i8, i8* %53, i64 32
  %56 = bitcast i8* %55 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %56, align 1
  %57 = getelementptr inbounds i8, i8* %53, i64 %1
  %58 = bitcast i8* %57 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %58, align 1
  %59 = getelementptr inbounds i8, i8* %57, i64 32
  %60 = bitcast i8* %59 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %60, align 1
  %61 = getelementptr inbounds i8, i8* %57, i64 %1
  %62 = bitcast i8* %61 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %62, align 1
  %63 = getelementptr inbounds i8, i8* %61, i64 32
  %64 = bitcast i8* %63 to <4 x i64>*
  store <4 x i64> <i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472, i64 -9187201950435737472>, <4 x i64>* %64, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_v_predictor_32x16_avx2(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readnone) local_unnamed_addr #0 {
  %5 = bitcast i8* %2 to <4 x i64>*
  %6 = load <4 x i64>, <4 x i64>* %5, align 1
  %7 = bitcast i8* %0 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %7, align 1
  %8 = getelementptr inbounds i8, i8* %0, i64 %1
  %9 = bitcast i8* %8 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %9, align 1
  %10 = getelementptr inbounds i8, i8* %8, i64 %1
  %11 = bitcast i8* %10 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %11, align 1
  %12 = getelementptr inbounds i8, i8* %10, i64 %1
  %13 = bitcast i8* %12 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %13, align 1
  %14 = getelementptr inbounds i8, i8* %12, i64 %1
  %15 = bitcast i8* %14 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %15, align 1
  %16 = getelementptr inbounds i8, i8* %14, i64 %1
  %17 = bitcast i8* %16 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %17, align 1
  %18 = getelementptr inbounds i8, i8* %16, i64 %1
  %19 = bitcast i8* %18 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %19, align 1
  %20 = getelementptr inbounds i8, i8* %18, i64 %1
  %21 = bitcast i8* %20 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %21, align 1
  %22 = getelementptr inbounds i8, i8* %20, i64 %1
  %23 = bitcast i8* %22 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %23, align 1
  %24 = getelementptr inbounds i8, i8* %22, i64 %1
  %25 = bitcast i8* %24 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %25, align 1
  %26 = getelementptr inbounds i8, i8* %24, i64 %1
  %27 = bitcast i8* %26 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %27, align 1
  %28 = getelementptr inbounds i8, i8* %26, i64 %1
  %29 = bitcast i8* %28 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %29, align 1
  %30 = getelementptr inbounds i8, i8* %28, i64 %1
  %31 = bitcast i8* %30 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %31, align 1
  %32 = getelementptr inbounds i8, i8* %30, i64 %1
  %33 = bitcast i8* %32 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %33, align 1
  %34 = getelementptr inbounds i8, i8* %32, i64 %1
  %35 = bitcast i8* %34 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %35, align 1
  %36 = getelementptr inbounds i8, i8* %34, i64 %1
  %37 = bitcast i8* %36 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %37, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_v_predictor_32x64_avx2(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readnone) local_unnamed_addr #0 {
  %5 = bitcast i8* %2 to <4 x i64>*
  %6 = load <4 x i64>, <4 x i64>* %5, align 1
  %7 = bitcast i8* %0 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %7, align 1
  %8 = getelementptr inbounds i8, i8* %0, i64 %1
  %9 = bitcast i8* %8 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %9, align 1
  %10 = getelementptr inbounds i8, i8* %8, i64 %1
  %11 = bitcast i8* %10 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %11, align 1
  %12 = getelementptr inbounds i8, i8* %10, i64 %1
  %13 = bitcast i8* %12 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %13, align 1
  %14 = getelementptr inbounds i8, i8* %12, i64 %1
  %15 = bitcast i8* %14 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %15, align 1
  %16 = getelementptr inbounds i8, i8* %14, i64 %1
  %17 = bitcast i8* %16 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %17, align 1
  %18 = getelementptr inbounds i8, i8* %16, i64 %1
  %19 = bitcast i8* %18 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %19, align 1
  %20 = getelementptr inbounds i8, i8* %18, i64 %1
  %21 = bitcast i8* %20 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %21, align 1
  %22 = getelementptr inbounds i8, i8* %20, i64 %1
  %23 = bitcast i8* %22 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %23, align 1
  %24 = getelementptr inbounds i8, i8* %22, i64 %1
  %25 = bitcast i8* %24 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %25, align 1
  %26 = getelementptr inbounds i8, i8* %24, i64 %1
  %27 = bitcast i8* %26 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %27, align 1
  %28 = getelementptr inbounds i8, i8* %26, i64 %1
  %29 = bitcast i8* %28 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %29, align 1
  %30 = getelementptr inbounds i8, i8* %28, i64 %1
  %31 = bitcast i8* %30 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %31, align 1
  %32 = getelementptr inbounds i8, i8* %30, i64 %1
  %33 = bitcast i8* %32 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %33, align 1
  %34 = getelementptr inbounds i8, i8* %32, i64 %1
  %35 = bitcast i8* %34 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %35, align 1
  %36 = getelementptr inbounds i8, i8* %34, i64 %1
  %37 = bitcast i8* %36 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %37, align 1
  %38 = getelementptr inbounds i8, i8* %36, i64 %1
  %39 = bitcast i8* %38 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %39, align 1
  %40 = getelementptr inbounds i8, i8* %38, i64 %1
  %41 = bitcast i8* %40 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %41, align 1
  %42 = getelementptr inbounds i8, i8* %40, i64 %1
  %43 = bitcast i8* %42 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %43, align 1
  %44 = getelementptr inbounds i8, i8* %42, i64 %1
  %45 = bitcast i8* %44 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %45, align 1
  %46 = getelementptr inbounds i8, i8* %44, i64 %1
  %47 = bitcast i8* %46 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %47, align 1
  %48 = getelementptr inbounds i8, i8* %46, i64 %1
  %49 = bitcast i8* %48 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %49, align 1
  %50 = getelementptr inbounds i8, i8* %48, i64 %1
  %51 = bitcast i8* %50 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %51, align 1
  %52 = getelementptr inbounds i8, i8* %50, i64 %1
  %53 = bitcast i8* %52 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %53, align 1
  %54 = getelementptr inbounds i8, i8* %52, i64 %1
  %55 = bitcast i8* %54 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %55, align 1
  %56 = getelementptr inbounds i8, i8* %54, i64 %1
  %57 = bitcast i8* %56 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %57, align 1
  %58 = getelementptr inbounds i8, i8* %56, i64 %1
  %59 = bitcast i8* %58 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %59, align 1
  %60 = getelementptr inbounds i8, i8* %58, i64 %1
  %61 = bitcast i8* %60 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %61, align 1
  %62 = getelementptr inbounds i8, i8* %60, i64 %1
  %63 = bitcast i8* %62 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %63, align 1
  %64 = getelementptr inbounds i8, i8* %62, i64 %1
  %65 = bitcast i8* %64 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %65, align 1
  %66 = getelementptr inbounds i8, i8* %64, i64 %1
  %67 = bitcast i8* %66 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %67, align 1
  %68 = getelementptr inbounds i8, i8* %66, i64 %1
  %69 = bitcast i8* %68 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %69, align 1
  %70 = getelementptr inbounds i8, i8* %68, i64 %1
  %71 = bitcast i8* %70 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %71, align 1
  %72 = getelementptr inbounds i8, i8* %70, i64 %1
  %73 = bitcast i8* %72 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %73, align 1
  %74 = getelementptr inbounds i8, i8* %72, i64 %1
  %75 = bitcast i8* %74 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %75, align 1
  %76 = getelementptr inbounds i8, i8* %74, i64 %1
  %77 = bitcast i8* %76 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %77, align 1
  %78 = getelementptr inbounds i8, i8* %76, i64 %1
  %79 = bitcast i8* %78 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %79, align 1
  %80 = getelementptr inbounds i8, i8* %78, i64 %1
  %81 = bitcast i8* %80 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %81, align 1
  %82 = getelementptr inbounds i8, i8* %80, i64 %1
  %83 = bitcast i8* %82 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %83, align 1
  %84 = getelementptr inbounds i8, i8* %82, i64 %1
  %85 = bitcast i8* %84 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %85, align 1
  %86 = getelementptr inbounds i8, i8* %84, i64 %1
  %87 = bitcast i8* %86 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %87, align 1
  %88 = getelementptr inbounds i8, i8* %86, i64 %1
  %89 = bitcast i8* %88 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %89, align 1
  %90 = getelementptr inbounds i8, i8* %88, i64 %1
  %91 = bitcast i8* %90 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %91, align 1
  %92 = getelementptr inbounds i8, i8* %90, i64 %1
  %93 = bitcast i8* %92 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %93, align 1
  %94 = getelementptr inbounds i8, i8* %92, i64 %1
  %95 = bitcast i8* %94 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %95, align 1
  %96 = getelementptr inbounds i8, i8* %94, i64 %1
  %97 = bitcast i8* %96 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %97, align 1
  %98 = getelementptr inbounds i8, i8* %96, i64 %1
  %99 = bitcast i8* %98 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %99, align 1
  %100 = getelementptr inbounds i8, i8* %98, i64 %1
  %101 = bitcast i8* %100 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %101, align 1
  %102 = getelementptr inbounds i8, i8* %100, i64 %1
  %103 = bitcast i8* %102 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %103, align 1
  %104 = getelementptr inbounds i8, i8* %102, i64 %1
  %105 = bitcast i8* %104 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %105, align 1
  %106 = getelementptr inbounds i8, i8* %104, i64 %1
  %107 = bitcast i8* %106 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %107, align 1
  %108 = getelementptr inbounds i8, i8* %106, i64 %1
  %109 = bitcast i8* %108 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %109, align 1
  %110 = getelementptr inbounds i8, i8* %108, i64 %1
  %111 = bitcast i8* %110 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %111, align 1
  %112 = getelementptr inbounds i8, i8* %110, i64 %1
  %113 = bitcast i8* %112 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %113, align 1
  %114 = getelementptr inbounds i8, i8* %112, i64 %1
  %115 = bitcast i8* %114 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %115, align 1
  %116 = getelementptr inbounds i8, i8* %114, i64 %1
  %117 = bitcast i8* %116 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %117, align 1
  %118 = getelementptr inbounds i8, i8* %116, i64 %1
  %119 = bitcast i8* %118 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %119, align 1
  %120 = getelementptr inbounds i8, i8* %118, i64 %1
  %121 = bitcast i8* %120 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %121, align 1
  %122 = getelementptr inbounds i8, i8* %120, i64 %1
  %123 = bitcast i8* %122 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %123, align 1
  %124 = getelementptr inbounds i8, i8* %122, i64 %1
  %125 = bitcast i8* %124 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %125, align 1
  %126 = getelementptr inbounds i8, i8* %124, i64 %1
  %127 = bitcast i8* %126 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %127, align 1
  %128 = getelementptr inbounds i8, i8* %126, i64 %1
  %129 = bitcast i8* %128 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %129, align 1
  %130 = getelementptr inbounds i8, i8* %128, i64 %1
  %131 = bitcast i8* %130 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %131, align 1
  %132 = getelementptr inbounds i8, i8* %130, i64 %1
  %133 = bitcast i8* %132 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %133, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_v_predictor_64x64_avx2(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readnone) local_unnamed_addr #0 {
  %5 = bitcast i8* %2 to <4 x i64>*
  %6 = load <4 x i64>, <4 x i64>* %5, align 1
  %7 = getelementptr inbounds i8, i8* %2, i64 32
  %8 = bitcast i8* %7 to <4 x i64>*
  %9 = load <4 x i64>, <4 x i64>* %8, align 1
  br label %10

10:                                               ; preds = %10, %4
  %11 = phi i32 [ 0, %4 ], [ %45, %10 ]
  %12 = phi i8* [ %0, %4 ], [ %44, %10 ]
  %13 = bitcast i8* %12 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %13, align 1
  %14 = getelementptr inbounds i8, i8* %12, i64 32
  %15 = bitcast i8* %14 to <4 x i64>*
  store <4 x i64> %9, <4 x i64>* %15, align 1
  %16 = getelementptr inbounds i8, i8* %12, i64 %1
  %17 = bitcast i8* %16 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %17, align 1
  %18 = getelementptr inbounds i8, i8* %16, i64 32
  %19 = bitcast i8* %18 to <4 x i64>*
  store <4 x i64> %9, <4 x i64>* %19, align 1
  %20 = getelementptr inbounds i8, i8* %16, i64 %1
  %21 = bitcast i8* %20 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %21, align 1
  %22 = getelementptr inbounds i8, i8* %20, i64 32
  %23 = bitcast i8* %22 to <4 x i64>*
  store <4 x i64> %9, <4 x i64>* %23, align 1
  %24 = getelementptr inbounds i8, i8* %20, i64 %1
  %25 = bitcast i8* %24 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %25, align 1
  %26 = getelementptr inbounds i8, i8* %24, i64 32
  %27 = bitcast i8* %26 to <4 x i64>*
  store <4 x i64> %9, <4 x i64>* %27, align 1
  %28 = getelementptr inbounds i8, i8* %24, i64 %1
  %29 = bitcast i8* %28 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %29, align 1
  %30 = getelementptr inbounds i8, i8* %28, i64 32
  %31 = bitcast i8* %30 to <4 x i64>*
  store <4 x i64> %9, <4 x i64>* %31, align 1
  %32 = getelementptr inbounds i8, i8* %28, i64 %1
  %33 = bitcast i8* %32 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %33, align 1
  %34 = getelementptr inbounds i8, i8* %32, i64 32
  %35 = bitcast i8* %34 to <4 x i64>*
  store <4 x i64> %9, <4 x i64>* %35, align 1
  %36 = getelementptr inbounds i8, i8* %32, i64 %1
  %37 = bitcast i8* %36 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %37, align 1
  %38 = getelementptr inbounds i8, i8* %36, i64 32
  %39 = bitcast i8* %38 to <4 x i64>*
  store <4 x i64> %9, <4 x i64>* %39, align 1
  %40 = getelementptr inbounds i8, i8* %36, i64 %1
  %41 = bitcast i8* %40 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %41, align 1
  %42 = getelementptr inbounds i8, i8* %40, i64 32
  %43 = bitcast i8* %42 to <4 x i64>*
  store <4 x i64> %9, <4 x i64>* %43, align 1
  %44 = getelementptr inbounds i8, i8* %40, i64 %1
  %45 = add nuw nsw i32 %11, 8
  %46 = icmp eq i32 %45, 64
  br i1 %46, label %47, label %10

47:                                               ; preds = %10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_v_predictor_64x32_avx2(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readnone) local_unnamed_addr #0 {
  %5 = bitcast i8* %2 to <4 x i64>*
  %6 = load <4 x i64>, <4 x i64>* %5, align 1
  %7 = getelementptr inbounds i8, i8* %2, i64 32
  %8 = bitcast i8* %7 to <4 x i64>*
  %9 = load <4 x i64>, <4 x i64>* %8, align 1
  %10 = bitcast i8* %0 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %10, align 1
  %11 = getelementptr inbounds i8, i8* %0, i64 32
  %12 = bitcast i8* %11 to <4 x i64>*
  store <4 x i64> %9, <4 x i64>* %12, align 1
  %13 = getelementptr inbounds i8, i8* %0, i64 %1
  %14 = bitcast i8* %13 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %14, align 1
  %15 = getelementptr inbounds i8, i8* %13, i64 32
  %16 = bitcast i8* %15 to <4 x i64>*
  store <4 x i64> %9, <4 x i64>* %16, align 1
  %17 = getelementptr inbounds i8, i8* %13, i64 %1
  %18 = bitcast i8* %17 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %18, align 1
  %19 = getelementptr inbounds i8, i8* %17, i64 32
  %20 = bitcast i8* %19 to <4 x i64>*
  store <4 x i64> %9, <4 x i64>* %20, align 1
  %21 = getelementptr inbounds i8, i8* %17, i64 %1
  %22 = bitcast i8* %21 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %22, align 1
  %23 = getelementptr inbounds i8, i8* %21, i64 32
  %24 = bitcast i8* %23 to <4 x i64>*
  store <4 x i64> %9, <4 x i64>* %24, align 1
  %25 = getelementptr inbounds i8, i8* %21, i64 %1
  %26 = bitcast i8* %25 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %26, align 1
  %27 = getelementptr inbounds i8, i8* %25, i64 32
  %28 = bitcast i8* %27 to <4 x i64>*
  store <4 x i64> %9, <4 x i64>* %28, align 1
  %29 = getelementptr inbounds i8, i8* %25, i64 %1
  %30 = bitcast i8* %29 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %30, align 1
  %31 = getelementptr inbounds i8, i8* %29, i64 32
  %32 = bitcast i8* %31 to <4 x i64>*
  store <4 x i64> %9, <4 x i64>* %32, align 1
  %33 = getelementptr inbounds i8, i8* %29, i64 %1
  %34 = bitcast i8* %33 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %34, align 1
  %35 = getelementptr inbounds i8, i8* %33, i64 32
  %36 = bitcast i8* %35 to <4 x i64>*
  store <4 x i64> %9, <4 x i64>* %36, align 1
  %37 = getelementptr inbounds i8, i8* %33, i64 %1
  %38 = bitcast i8* %37 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %38, align 1
  %39 = getelementptr inbounds i8, i8* %37, i64 32
  %40 = bitcast i8* %39 to <4 x i64>*
  store <4 x i64> %9, <4 x i64>* %40, align 1
  %41 = getelementptr inbounds i8, i8* %37, i64 %1
  %42 = bitcast i8* %41 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %42, align 1
  %43 = getelementptr inbounds i8, i8* %41, i64 32
  %44 = bitcast i8* %43 to <4 x i64>*
  store <4 x i64> %9, <4 x i64>* %44, align 1
  %45 = getelementptr inbounds i8, i8* %41, i64 %1
  %46 = bitcast i8* %45 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %46, align 1
  %47 = getelementptr inbounds i8, i8* %45, i64 32
  %48 = bitcast i8* %47 to <4 x i64>*
  store <4 x i64> %9, <4 x i64>* %48, align 1
  %49 = getelementptr inbounds i8, i8* %45, i64 %1
  %50 = bitcast i8* %49 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %50, align 1
  %51 = getelementptr inbounds i8, i8* %49, i64 32
  %52 = bitcast i8* %51 to <4 x i64>*
  store <4 x i64> %9, <4 x i64>* %52, align 1
  %53 = getelementptr inbounds i8, i8* %49, i64 %1
  %54 = bitcast i8* %53 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %54, align 1
  %55 = getelementptr inbounds i8, i8* %53, i64 32
  %56 = bitcast i8* %55 to <4 x i64>*
  store <4 x i64> %9, <4 x i64>* %56, align 1
  %57 = getelementptr inbounds i8, i8* %53, i64 %1
  %58 = bitcast i8* %57 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %58, align 1
  %59 = getelementptr inbounds i8, i8* %57, i64 32
  %60 = bitcast i8* %59 to <4 x i64>*
  store <4 x i64> %9, <4 x i64>* %60, align 1
  %61 = getelementptr inbounds i8, i8* %57, i64 %1
  %62 = bitcast i8* %61 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %62, align 1
  %63 = getelementptr inbounds i8, i8* %61, i64 32
  %64 = bitcast i8* %63 to <4 x i64>*
  store <4 x i64> %9, <4 x i64>* %64, align 1
  %65 = getelementptr inbounds i8, i8* %61, i64 %1
  %66 = bitcast i8* %65 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %66, align 1
  %67 = getelementptr inbounds i8, i8* %65, i64 32
  %68 = bitcast i8* %67 to <4 x i64>*
  store <4 x i64> %9, <4 x i64>* %68, align 1
  %69 = getelementptr inbounds i8, i8* %65, i64 %1
  %70 = bitcast i8* %69 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %70, align 1
  %71 = getelementptr inbounds i8, i8* %69, i64 32
  %72 = bitcast i8* %71 to <4 x i64>*
  store <4 x i64> %9, <4 x i64>* %72, align 1
  %73 = getelementptr inbounds i8, i8* %69, i64 %1
  %74 = bitcast i8* %73 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %74, align 1
  %75 = getelementptr inbounds i8, i8* %73, i64 32
  %76 = bitcast i8* %75 to <4 x i64>*
  store <4 x i64> %9, <4 x i64>* %76, align 1
  %77 = getelementptr inbounds i8, i8* %73, i64 %1
  %78 = bitcast i8* %77 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %78, align 1
  %79 = getelementptr inbounds i8, i8* %77, i64 32
  %80 = bitcast i8* %79 to <4 x i64>*
  store <4 x i64> %9, <4 x i64>* %80, align 1
  %81 = getelementptr inbounds i8, i8* %77, i64 %1
  %82 = bitcast i8* %81 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %82, align 1
  %83 = getelementptr inbounds i8, i8* %81, i64 32
  %84 = bitcast i8* %83 to <4 x i64>*
  store <4 x i64> %9, <4 x i64>* %84, align 1
  %85 = getelementptr inbounds i8, i8* %81, i64 %1
  %86 = bitcast i8* %85 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %86, align 1
  %87 = getelementptr inbounds i8, i8* %85, i64 32
  %88 = bitcast i8* %87 to <4 x i64>*
  store <4 x i64> %9, <4 x i64>* %88, align 1
  %89 = getelementptr inbounds i8, i8* %85, i64 %1
  %90 = bitcast i8* %89 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %90, align 1
  %91 = getelementptr inbounds i8, i8* %89, i64 32
  %92 = bitcast i8* %91 to <4 x i64>*
  store <4 x i64> %9, <4 x i64>* %92, align 1
  %93 = getelementptr inbounds i8, i8* %89, i64 %1
  %94 = bitcast i8* %93 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %94, align 1
  %95 = getelementptr inbounds i8, i8* %93, i64 32
  %96 = bitcast i8* %95 to <4 x i64>*
  store <4 x i64> %9, <4 x i64>* %96, align 1
  %97 = getelementptr inbounds i8, i8* %93, i64 %1
  %98 = bitcast i8* %97 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %98, align 1
  %99 = getelementptr inbounds i8, i8* %97, i64 32
  %100 = bitcast i8* %99 to <4 x i64>*
  store <4 x i64> %9, <4 x i64>* %100, align 1
  %101 = getelementptr inbounds i8, i8* %97, i64 %1
  %102 = bitcast i8* %101 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %102, align 1
  %103 = getelementptr inbounds i8, i8* %101, i64 32
  %104 = bitcast i8* %103 to <4 x i64>*
  store <4 x i64> %9, <4 x i64>* %104, align 1
  %105 = getelementptr inbounds i8, i8* %101, i64 %1
  %106 = bitcast i8* %105 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %106, align 1
  %107 = getelementptr inbounds i8, i8* %105, i64 32
  %108 = bitcast i8* %107 to <4 x i64>*
  store <4 x i64> %9, <4 x i64>* %108, align 1
  %109 = getelementptr inbounds i8, i8* %105, i64 %1
  %110 = bitcast i8* %109 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %110, align 1
  %111 = getelementptr inbounds i8, i8* %109, i64 32
  %112 = bitcast i8* %111 to <4 x i64>*
  store <4 x i64> %9, <4 x i64>* %112, align 1
  %113 = getelementptr inbounds i8, i8* %109, i64 %1
  %114 = bitcast i8* %113 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %114, align 1
  %115 = getelementptr inbounds i8, i8* %113, i64 32
  %116 = bitcast i8* %115 to <4 x i64>*
  store <4 x i64> %9, <4 x i64>* %116, align 1
  %117 = getelementptr inbounds i8, i8* %113, i64 %1
  %118 = bitcast i8* %117 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %118, align 1
  %119 = getelementptr inbounds i8, i8* %117, i64 32
  %120 = bitcast i8* %119 to <4 x i64>*
  store <4 x i64> %9, <4 x i64>* %120, align 1
  %121 = getelementptr inbounds i8, i8* %117, i64 %1
  %122 = bitcast i8* %121 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %122, align 1
  %123 = getelementptr inbounds i8, i8* %121, i64 32
  %124 = bitcast i8* %123 to <4 x i64>*
  store <4 x i64> %9, <4 x i64>* %124, align 1
  %125 = getelementptr inbounds i8, i8* %121, i64 %1
  %126 = bitcast i8* %125 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %126, align 1
  %127 = getelementptr inbounds i8, i8* %125, i64 32
  %128 = bitcast i8* %127 to <4 x i64>*
  store <4 x i64> %9, <4 x i64>* %128, align 1
  %129 = getelementptr inbounds i8, i8* %125, i64 %1
  %130 = bitcast i8* %129 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %130, align 1
  %131 = getelementptr inbounds i8, i8* %129, i64 32
  %132 = bitcast i8* %131 to <4 x i64>*
  store <4 x i64> %9, <4 x i64>* %132, align 1
  %133 = getelementptr inbounds i8, i8* %129, i64 %1
  %134 = bitcast i8* %133 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %134, align 1
  %135 = getelementptr inbounds i8, i8* %133, i64 32
  %136 = bitcast i8* %135 to <4 x i64>*
  store <4 x i64> %9, <4 x i64>* %136, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_v_predictor_64x16_avx2(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readnone) local_unnamed_addr #0 {
  %5 = bitcast i8* %2 to <4 x i64>*
  %6 = load <4 x i64>, <4 x i64>* %5, align 1
  %7 = getelementptr inbounds i8, i8* %2, i64 32
  %8 = bitcast i8* %7 to <4 x i64>*
  %9 = load <4 x i64>, <4 x i64>* %8, align 1
  %10 = bitcast i8* %0 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %10, align 1
  %11 = getelementptr inbounds i8, i8* %0, i64 32
  %12 = bitcast i8* %11 to <4 x i64>*
  store <4 x i64> %9, <4 x i64>* %12, align 1
  %13 = getelementptr inbounds i8, i8* %0, i64 %1
  %14 = bitcast i8* %13 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %14, align 1
  %15 = getelementptr inbounds i8, i8* %13, i64 32
  %16 = bitcast i8* %15 to <4 x i64>*
  store <4 x i64> %9, <4 x i64>* %16, align 1
  %17 = getelementptr inbounds i8, i8* %13, i64 %1
  %18 = bitcast i8* %17 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %18, align 1
  %19 = getelementptr inbounds i8, i8* %17, i64 32
  %20 = bitcast i8* %19 to <4 x i64>*
  store <4 x i64> %9, <4 x i64>* %20, align 1
  %21 = getelementptr inbounds i8, i8* %17, i64 %1
  %22 = bitcast i8* %21 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %22, align 1
  %23 = getelementptr inbounds i8, i8* %21, i64 32
  %24 = bitcast i8* %23 to <4 x i64>*
  store <4 x i64> %9, <4 x i64>* %24, align 1
  %25 = getelementptr inbounds i8, i8* %21, i64 %1
  %26 = bitcast i8* %25 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %26, align 1
  %27 = getelementptr inbounds i8, i8* %25, i64 32
  %28 = bitcast i8* %27 to <4 x i64>*
  store <4 x i64> %9, <4 x i64>* %28, align 1
  %29 = getelementptr inbounds i8, i8* %25, i64 %1
  %30 = bitcast i8* %29 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %30, align 1
  %31 = getelementptr inbounds i8, i8* %29, i64 32
  %32 = bitcast i8* %31 to <4 x i64>*
  store <4 x i64> %9, <4 x i64>* %32, align 1
  %33 = getelementptr inbounds i8, i8* %29, i64 %1
  %34 = bitcast i8* %33 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %34, align 1
  %35 = getelementptr inbounds i8, i8* %33, i64 32
  %36 = bitcast i8* %35 to <4 x i64>*
  store <4 x i64> %9, <4 x i64>* %36, align 1
  %37 = getelementptr inbounds i8, i8* %33, i64 %1
  %38 = bitcast i8* %37 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %38, align 1
  %39 = getelementptr inbounds i8, i8* %37, i64 32
  %40 = bitcast i8* %39 to <4 x i64>*
  store <4 x i64> %9, <4 x i64>* %40, align 1
  %41 = getelementptr inbounds i8, i8* %37, i64 %1
  %42 = bitcast i8* %41 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %42, align 1
  %43 = getelementptr inbounds i8, i8* %41, i64 32
  %44 = bitcast i8* %43 to <4 x i64>*
  store <4 x i64> %9, <4 x i64>* %44, align 1
  %45 = getelementptr inbounds i8, i8* %41, i64 %1
  %46 = bitcast i8* %45 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %46, align 1
  %47 = getelementptr inbounds i8, i8* %45, i64 32
  %48 = bitcast i8* %47 to <4 x i64>*
  store <4 x i64> %9, <4 x i64>* %48, align 1
  %49 = getelementptr inbounds i8, i8* %45, i64 %1
  %50 = bitcast i8* %49 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %50, align 1
  %51 = getelementptr inbounds i8, i8* %49, i64 32
  %52 = bitcast i8* %51 to <4 x i64>*
  store <4 x i64> %9, <4 x i64>* %52, align 1
  %53 = getelementptr inbounds i8, i8* %49, i64 %1
  %54 = bitcast i8* %53 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %54, align 1
  %55 = getelementptr inbounds i8, i8* %53, i64 32
  %56 = bitcast i8* %55 to <4 x i64>*
  store <4 x i64> %9, <4 x i64>* %56, align 1
  %57 = getelementptr inbounds i8, i8* %53, i64 %1
  %58 = bitcast i8* %57 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %58, align 1
  %59 = getelementptr inbounds i8, i8* %57, i64 32
  %60 = bitcast i8* %59 to <4 x i64>*
  store <4 x i64> %9, <4 x i64>* %60, align 1
  %61 = getelementptr inbounds i8, i8* %57, i64 %1
  %62 = bitcast i8* %61 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %62, align 1
  %63 = getelementptr inbounds i8, i8* %61, i64 32
  %64 = bitcast i8* %63 to <4 x i64>*
  store <4 x i64> %9, <4 x i64>* %64, align 1
  %65 = getelementptr inbounds i8, i8* %61, i64 %1
  %66 = bitcast i8* %65 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %66, align 1
  %67 = getelementptr inbounds i8, i8* %65, i64 32
  %68 = bitcast i8* %67 to <4 x i64>*
  store <4 x i64> %9, <4 x i64>* %68, align 1
  %69 = getelementptr inbounds i8, i8* %65, i64 %1
  %70 = bitcast i8* %69 to <4 x i64>*
  store <4 x i64> %6, <4 x i64>* %70, align 1
  %71 = getelementptr inbounds i8, i8* %69, i64 32
  %72 = bitcast i8* %71 to <4 x i64>*
  store <4 x i64> %9, <4 x i64>* %72, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_paeth_predictor_16x8_avx2(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) local_unnamed_addr #0 {
  %5 = bitcast i8* %3 to i64*
  %6 = load i64, i64* %5, align 1
  %7 = insertelement <4 x i64> <i64 undef, i64 0, i64 undef, i64 undef>, i64 %6, i32 0
  %8 = shufflevector <4 x i64> %7, <4 x i64> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %9 = getelementptr inbounds i8, i8* %2, i64 -1
  %10 = load i8, i8* %9, align 1
  %11 = zext i8 %10 to i16
  %12 = insertelement <16 x i16> undef, i16 %11, i32 0
  %13 = shufflevector <16 x i16> %12, <16 x i16> undef, <16 x i32> zeroinitializer
  %14 = bitcast i8* %2 to <16 x i8>*
  %15 = load <16 x i8>, <16 x i8>* %14, align 16
  %16 = shufflevector <16 x i8> %15, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %17 = bitcast <16 x i8> %16 to <2 x i64>
  %18 = shufflevector <16 x i8> %15, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %19 = bitcast <16 x i8> %18 to <2 x i64>
  %20 = shufflevector <2 x i64> %17, <2 x i64> %19, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %21 = bitcast <4 x i64> %8 to <32 x i8>
  %22 = bitcast <4 x i64> %20 to <16 x i16>
  %23 = sub <16 x i16> %22, %13
  %24 = sub <16 x i16> zeroinitializer, %23
  %25 = icmp slt <16 x i16> %23, zeroinitializer
  %26 = select <16 x i1> %25, <16 x i16> %24, <16 x i16> %23
  br label %27

27:                                               ; preds = %27, %4
  %28 = phi i8* [ %0, %4 ], [ %69, %27 ]
  %29 = phi i32 [ 0, %4 ], [ %72, %27 ]
  %30 = phi <4 x i64> [ <i64 -9223231297218904064, i64 -9223231297218904064, i64 -9223231297218904064, i64 -9223231297218904064>, %4 ], [ %71, %27 ]
  %31 = phi <16 x i16> [ <i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768>, %4 ], [ %70, %27 ]
  %32 = bitcast <4 x i64> %30 to <32 x i8>
  %33 = tail call <32 x i8> @llvm.x86.avx2.pshuf.b(<32 x i8> %21, <32 x i8> %32) #8
  %34 = bitcast <32 x i8> %33 to <4 x i64>
  %35 = bitcast <32 x i8> %33 to <16 x i16>
  %36 = add <16 x i16> %23, %35
  %37 = sub <16 x i16> %36, %22
  %38 = sub <16 x i16> zeroinitializer, %37
  %39 = icmp slt <16 x i16> %37, zeroinitializer
  %40 = select <16 x i1> %39, <16 x i16> %38, <16 x i16> %37
  %41 = sub <16 x i16> %36, %13
  %42 = sub <16 x i16> zeroinitializer, %41
  %43 = icmp slt <16 x i16> %41, zeroinitializer
  %44 = select <16 x i1> %43, <16 x i16> %42, <16 x i16> %41
  %45 = icmp sgt <16 x i16> %26, %40
  %46 = icmp sgt <16 x i16> %26, %44
  %47 = or <16 x i1> %46, %45
  %48 = sext <16 x i1> %47 to <16 x i16>
  %49 = bitcast <16 x i16> %48 to <4 x i64>
  %50 = icmp sgt <16 x i16> %40, %44
  %51 = sext <16 x i1> %50 to <16 x i16>
  %52 = bitcast <16 x i16> %51 to <4 x i64>
  %53 = xor <4 x i64> %49, <i64 -1, i64 -1, i64 -1, i64 -1>
  %54 = and <4 x i64> %53, %34
  %55 = and <16 x i16> %13, %51
  %56 = bitcast <16 x i16> %55 to <4 x i64>
  %57 = xor <4 x i64> %52, <i64 -1, i64 -1, i64 -1, i64 -1>
  %58 = and <4 x i64> %20, %57
  %59 = or <4 x i64> %58, %56
  %60 = and <4 x i64> %59, %49
  %61 = or <4 x i64> %60, %54
  %62 = shufflevector <4 x i64> %61, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %63 = bitcast <4 x i64> %61 to <16 x i16>
  %64 = bitcast <4 x i64> %62 to <16 x i16>
  %65 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %63, <16 x i16> %64) #8
  %66 = bitcast <32 x i8> %65 to <4 x i64>
  %67 = shufflevector <4 x i64> %66, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %68 = bitcast i8* %28 to <2 x i64>*
  store <2 x i64> %67, <2 x i64>* %68, align 16
  %69 = getelementptr inbounds i8, i8* %28, i64 %1
  %70 = add <16 x i16> %31, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %71 = bitcast <16 x i16> %70 to <4 x i64>
  %72 = add nuw nsw i32 %29, 1
  %73 = icmp eq i32 %72, 8
  br i1 %73, label %74, label %27

74:                                               ; preds = %27
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_paeth_predictor_16x16_avx2(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) local_unnamed_addr #0 {
  %5 = bitcast i8* %3 to <2 x i64>*
  %6 = load <2 x i64>, <2 x i64>* %5, align 16
  %7 = shufflevector <2 x i64> %6, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %8 = getelementptr inbounds i8, i8* %2, i64 -1
  %9 = load i8, i8* %8, align 1
  %10 = zext i8 %9 to i16
  %11 = insertelement <16 x i16> undef, i16 %10, i32 0
  %12 = shufflevector <16 x i16> %11, <16 x i16> undef, <16 x i32> zeroinitializer
  %13 = bitcast i8* %2 to <16 x i8>*
  %14 = load <16 x i8>, <16 x i8>* %13, align 16
  %15 = shufflevector <16 x i8> %14, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %16 = bitcast <16 x i8> %15 to <2 x i64>
  %17 = shufflevector <16 x i8> %14, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %18 = bitcast <16 x i8> %17 to <2 x i64>
  %19 = shufflevector <2 x i64> %16, <2 x i64> %18, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %20 = bitcast <4 x i64> %7 to <32 x i8>
  %21 = bitcast <4 x i64> %19 to <16 x i16>
  %22 = sub <16 x i16> %21, %12
  %23 = sub <16 x i16> zeroinitializer, %22
  %24 = icmp slt <16 x i16> %22, zeroinitializer
  %25 = select <16 x i1> %24, <16 x i16> %23, <16 x i16> %22
  br label %26

26:                                               ; preds = %26, %4
  %27 = phi i8* [ %0, %4 ], [ %68, %26 ]
  %28 = phi i32 [ 0, %4 ], [ %71, %26 ]
  %29 = phi <4 x i64> [ <i64 -9223231297218904064, i64 -9223231297218904064, i64 -9223231297218904064, i64 -9223231297218904064>, %4 ], [ %70, %26 ]
  %30 = phi <16 x i16> [ <i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768>, %4 ], [ %69, %26 ]
  %31 = bitcast <4 x i64> %29 to <32 x i8>
  %32 = tail call <32 x i8> @llvm.x86.avx2.pshuf.b(<32 x i8> %20, <32 x i8> %31) #8
  %33 = bitcast <32 x i8> %32 to <4 x i64>
  %34 = bitcast <32 x i8> %32 to <16 x i16>
  %35 = add <16 x i16> %22, %34
  %36 = sub <16 x i16> %35, %21
  %37 = sub <16 x i16> zeroinitializer, %36
  %38 = icmp slt <16 x i16> %36, zeroinitializer
  %39 = select <16 x i1> %38, <16 x i16> %37, <16 x i16> %36
  %40 = sub <16 x i16> %35, %12
  %41 = sub <16 x i16> zeroinitializer, %40
  %42 = icmp slt <16 x i16> %40, zeroinitializer
  %43 = select <16 x i1> %42, <16 x i16> %41, <16 x i16> %40
  %44 = icmp sgt <16 x i16> %25, %39
  %45 = icmp sgt <16 x i16> %25, %43
  %46 = or <16 x i1> %45, %44
  %47 = sext <16 x i1> %46 to <16 x i16>
  %48 = bitcast <16 x i16> %47 to <4 x i64>
  %49 = icmp sgt <16 x i16> %39, %43
  %50 = sext <16 x i1> %49 to <16 x i16>
  %51 = bitcast <16 x i16> %50 to <4 x i64>
  %52 = xor <4 x i64> %48, <i64 -1, i64 -1, i64 -1, i64 -1>
  %53 = and <4 x i64> %52, %33
  %54 = and <16 x i16> %12, %50
  %55 = bitcast <16 x i16> %54 to <4 x i64>
  %56 = xor <4 x i64> %51, <i64 -1, i64 -1, i64 -1, i64 -1>
  %57 = and <4 x i64> %19, %56
  %58 = or <4 x i64> %57, %55
  %59 = and <4 x i64> %58, %48
  %60 = or <4 x i64> %59, %53
  %61 = shufflevector <4 x i64> %60, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %62 = bitcast <4 x i64> %60 to <16 x i16>
  %63 = bitcast <4 x i64> %61 to <16 x i16>
  %64 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %62, <16 x i16> %63) #8
  %65 = bitcast <32 x i8> %64 to <4 x i64>
  %66 = shufflevector <4 x i64> %65, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %67 = bitcast i8* %27 to <2 x i64>*
  store <2 x i64> %66, <2 x i64>* %67, align 16
  %68 = getelementptr inbounds i8, i8* %27, i64 %1
  %69 = add <16 x i16> %30, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %70 = bitcast <16 x i16> %69 to <4 x i64>
  %71 = add nuw nsw i32 %28, 1
  %72 = icmp eq i32 %71, 16
  br i1 %72, label %73, label %26

73:                                               ; preds = %26
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_paeth_predictor_16x32_avx2(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) local_unnamed_addr #0 {
  %5 = bitcast i8* %3 to <2 x i64>*
  %6 = load <2 x i64>, <2 x i64>* %5, align 16
  %7 = shufflevector <2 x i64> %6, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %8 = getelementptr inbounds i8, i8* %2, i64 -1
  %9 = load i8, i8* %8, align 1
  %10 = zext i8 %9 to i16
  %11 = insertelement <16 x i16> undef, i16 %10, i32 0
  %12 = shufflevector <16 x i16> %11, <16 x i16> undef, <16 x i32> zeroinitializer
  %13 = bitcast i8* %2 to <16 x i8>*
  %14 = load <16 x i8>, <16 x i8>* %13, align 16
  %15 = shufflevector <16 x i8> %14, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %16 = bitcast <16 x i8> %15 to <2 x i64>
  %17 = shufflevector <16 x i8> %14, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %18 = bitcast <16 x i8> %17 to <2 x i64>
  %19 = shufflevector <2 x i64> %16, <2 x i64> %18, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %20 = bitcast <4 x i64> %7 to <32 x i8>
  %21 = bitcast <4 x i64> %19 to <16 x i16>
  %22 = sub <16 x i16> %21, %12
  %23 = sub <16 x i16> zeroinitializer, %22
  %24 = icmp slt <16 x i16> %22, zeroinitializer
  %25 = select <16 x i1> %24, <16 x i16> %23, <16 x i16> %22
  br label %26

26:                                               ; preds = %26, %4
  %27 = phi i8* [ %0, %4 ], [ %68, %26 ]
  %28 = phi i32 [ 0, %4 ], [ %71, %26 ]
  %29 = phi <4 x i64> [ <i64 -9223231297218904064, i64 -9223231297218904064, i64 -9223231297218904064, i64 -9223231297218904064>, %4 ], [ %70, %26 ]
  %30 = phi <16 x i16> [ <i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768>, %4 ], [ %69, %26 ]
  %31 = bitcast <4 x i64> %29 to <32 x i8>
  %32 = tail call <32 x i8> @llvm.x86.avx2.pshuf.b(<32 x i8> %20, <32 x i8> %31) #8
  %33 = bitcast <32 x i8> %32 to <4 x i64>
  %34 = bitcast <32 x i8> %32 to <16 x i16>
  %35 = add <16 x i16> %22, %34
  %36 = sub <16 x i16> %35, %21
  %37 = sub <16 x i16> zeroinitializer, %36
  %38 = icmp slt <16 x i16> %36, zeroinitializer
  %39 = select <16 x i1> %38, <16 x i16> %37, <16 x i16> %36
  %40 = sub <16 x i16> %35, %12
  %41 = sub <16 x i16> zeroinitializer, %40
  %42 = icmp slt <16 x i16> %40, zeroinitializer
  %43 = select <16 x i1> %42, <16 x i16> %41, <16 x i16> %40
  %44 = icmp sgt <16 x i16> %25, %39
  %45 = icmp sgt <16 x i16> %25, %43
  %46 = or <16 x i1> %45, %44
  %47 = sext <16 x i1> %46 to <16 x i16>
  %48 = bitcast <16 x i16> %47 to <4 x i64>
  %49 = icmp sgt <16 x i16> %39, %43
  %50 = sext <16 x i1> %49 to <16 x i16>
  %51 = bitcast <16 x i16> %50 to <4 x i64>
  %52 = xor <4 x i64> %48, <i64 -1, i64 -1, i64 -1, i64 -1>
  %53 = and <4 x i64> %52, %33
  %54 = and <16 x i16> %12, %50
  %55 = bitcast <16 x i16> %54 to <4 x i64>
  %56 = xor <4 x i64> %51, <i64 -1, i64 -1, i64 -1, i64 -1>
  %57 = and <4 x i64> %19, %56
  %58 = or <4 x i64> %57, %55
  %59 = and <4 x i64> %58, %48
  %60 = or <4 x i64> %59, %53
  %61 = shufflevector <4 x i64> %60, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %62 = bitcast <4 x i64> %60 to <16 x i16>
  %63 = bitcast <4 x i64> %61 to <16 x i16>
  %64 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %62, <16 x i16> %63) #8
  %65 = bitcast <32 x i8> %64 to <4 x i64>
  %66 = shufflevector <4 x i64> %65, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %67 = bitcast i8* %27 to <2 x i64>*
  store <2 x i64> %66, <2 x i64>* %67, align 16
  %68 = getelementptr inbounds i8, i8* %27, i64 %1
  %69 = add <16 x i16> %30, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %70 = bitcast <16 x i16> %69 to <4 x i64>
  %71 = add nuw nsw i32 %28, 1
  %72 = icmp eq i32 %71, 16
  br i1 %72, label %73, label %26

73:                                               ; preds = %26
  %74 = getelementptr inbounds i8, i8* %3, i64 16
  %75 = bitcast i8* %74 to <2 x i64>*
  %76 = load <2 x i64>, <2 x i64>* %75, align 16
  %77 = shufflevector <2 x i64> %76, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %78 = bitcast <4 x i64> %77 to <32 x i8>
  br label %79

79:                                               ; preds = %79, %73
  %80 = phi i8* [ %68, %73 ], [ %121, %79 ]
  %81 = phi i32 [ 0, %73 ], [ %124, %79 ]
  %82 = phi <4 x i64> [ <i64 -9223231297218904064, i64 -9223231297218904064, i64 -9223231297218904064, i64 -9223231297218904064>, %73 ], [ %123, %79 ]
  %83 = phi <16 x i16> [ <i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768>, %73 ], [ %122, %79 ]
  %84 = bitcast <4 x i64> %82 to <32 x i8>
  %85 = tail call <32 x i8> @llvm.x86.avx2.pshuf.b(<32 x i8> %78, <32 x i8> %84) #8
  %86 = bitcast <32 x i8> %85 to <4 x i64>
  %87 = bitcast <32 x i8> %85 to <16 x i16>
  %88 = add <16 x i16> %22, %87
  %89 = sub <16 x i16> %88, %21
  %90 = sub <16 x i16> zeroinitializer, %89
  %91 = icmp slt <16 x i16> %89, zeroinitializer
  %92 = select <16 x i1> %91, <16 x i16> %90, <16 x i16> %89
  %93 = sub <16 x i16> %88, %12
  %94 = sub <16 x i16> zeroinitializer, %93
  %95 = icmp slt <16 x i16> %93, zeroinitializer
  %96 = select <16 x i1> %95, <16 x i16> %94, <16 x i16> %93
  %97 = icmp sgt <16 x i16> %25, %92
  %98 = icmp sgt <16 x i16> %25, %96
  %99 = or <16 x i1> %98, %97
  %100 = sext <16 x i1> %99 to <16 x i16>
  %101 = bitcast <16 x i16> %100 to <4 x i64>
  %102 = icmp sgt <16 x i16> %92, %96
  %103 = sext <16 x i1> %102 to <16 x i16>
  %104 = bitcast <16 x i16> %103 to <4 x i64>
  %105 = xor <4 x i64> %101, <i64 -1, i64 -1, i64 -1, i64 -1>
  %106 = and <4 x i64> %105, %86
  %107 = and <16 x i16> %12, %103
  %108 = bitcast <16 x i16> %107 to <4 x i64>
  %109 = xor <4 x i64> %104, <i64 -1, i64 -1, i64 -1, i64 -1>
  %110 = and <4 x i64> %19, %109
  %111 = or <4 x i64> %110, %108
  %112 = and <4 x i64> %111, %101
  %113 = or <4 x i64> %112, %106
  %114 = shufflevector <4 x i64> %113, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %115 = bitcast <4 x i64> %113 to <16 x i16>
  %116 = bitcast <4 x i64> %114 to <16 x i16>
  %117 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %115, <16 x i16> %116) #8
  %118 = bitcast <32 x i8> %117 to <4 x i64>
  %119 = shufflevector <4 x i64> %118, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %120 = bitcast i8* %80 to <2 x i64>*
  store <2 x i64> %119, <2 x i64>* %120, align 16
  %121 = getelementptr inbounds i8, i8* %80, i64 %1
  %122 = add <16 x i16> %83, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %123 = bitcast <16 x i16> %122 to <4 x i64>
  %124 = add nuw nsw i32 %81, 1
  %125 = icmp eq i32 %124, 16
  br i1 %125, label %126, label %79

126:                                              ; preds = %79
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_paeth_predictor_16x64_avx2(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) local_unnamed_addr #0 {
  %5 = getelementptr inbounds i8, i8* %2, i64 -1
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i16
  %8 = insertelement <16 x i16> undef, i16 %7, i32 0
  %9 = shufflevector <16 x i16> %8, <16 x i16> undef, <16 x i32> zeroinitializer
  %10 = bitcast i8* %2 to <16 x i8>*
  %11 = load <16 x i8>, <16 x i8>* %10, align 16
  %12 = shufflevector <16 x i8> %11, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %13 = bitcast <16 x i8> %12 to <2 x i64>
  %14 = shufflevector <16 x i8> %11, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %15 = bitcast <16 x i8> %14 to <2 x i64>
  %16 = shufflevector <2 x i64> %13, <2 x i64> %15, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %17 = bitcast <4 x i64> %16 to <16 x i16>
  %18 = sub <16 x i16> %17, %9
  %19 = sub <16 x i16> zeroinitializer, %18
  %20 = icmp slt <16 x i16> %18, zeroinitializer
  %21 = select <16 x i1> %20, <16 x i16> %19, <16 x i16> %18
  br label %23

22:                                               ; preds = %32
  ret void

23:                                               ; preds = %32, %4
  %24 = phi i64 [ 0, %4 ], [ %33, %32 ]
  %25 = phi i8* [ %0, %4 ], [ %77, %32 ]
  %26 = shl nsw i64 %24, 4
  %27 = getelementptr inbounds i8, i8* %3, i64 %26
  %28 = bitcast i8* %27 to <2 x i64>*
  %29 = load <2 x i64>, <2 x i64>* %28, align 16
  %30 = shufflevector <2 x i64> %29, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %31 = bitcast <4 x i64> %30 to <32 x i8>
  br label %35

32:                                               ; preds = %35
  %33 = add nuw nsw i64 %24, 1
  %34 = icmp eq i64 %33, 4
  br i1 %34, label %22, label %23

35:                                               ; preds = %35, %23
  %36 = phi i8* [ %25, %23 ], [ %77, %35 ]
  %37 = phi i32 [ 0, %23 ], [ %80, %35 ]
  %38 = phi <4 x i64> [ <i64 -9223231297218904064, i64 -9223231297218904064, i64 -9223231297218904064, i64 -9223231297218904064>, %23 ], [ %79, %35 ]
  %39 = phi <16 x i16> [ <i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768>, %23 ], [ %78, %35 ]
  %40 = bitcast <4 x i64> %38 to <32 x i8>
  %41 = tail call <32 x i8> @llvm.x86.avx2.pshuf.b(<32 x i8> %31, <32 x i8> %40) #8
  %42 = bitcast <32 x i8> %41 to <4 x i64>
  %43 = bitcast <32 x i8> %41 to <16 x i16>
  %44 = add <16 x i16> %18, %43
  %45 = sub <16 x i16> %44, %17
  %46 = sub <16 x i16> zeroinitializer, %45
  %47 = icmp slt <16 x i16> %45, zeroinitializer
  %48 = select <16 x i1> %47, <16 x i16> %46, <16 x i16> %45
  %49 = sub <16 x i16> %44, %9
  %50 = sub <16 x i16> zeroinitializer, %49
  %51 = icmp slt <16 x i16> %49, zeroinitializer
  %52 = select <16 x i1> %51, <16 x i16> %50, <16 x i16> %49
  %53 = icmp sgt <16 x i16> %21, %48
  %54 = icmp sgt <16 x i16> %21, %52
  %55 = or <16 x i1> %54, %53
  %56 = sext <16 x i1> %55 to <16 x i16>
  %57 = bitcast <16 x i16> %56 to <4 x i64>
  %58 = icmp sgt <16 x i16> %48, %52
  %59 = sext <16 x i1> %58 to <16 x i16>
  %60 = bitcast <16 x i16> %59 to <4 x i64>
  %61 = xor <4 x i64> %57, <i64 -1, i64 -1, i64 -1, i64 -1>
  %62 = and <4 x i64> %61, %42
  %63 = and <16 x i16> %9, %59
  %64 = bitcast <16 x i16> %63 to <4 x i64>
  %65 = xor <4 x i64> %60, <i64 -1, i64 -1, i64 -1, i64 -1>
  %66 = and <4 x i64> %16, %65
  %67 = or <4 x i64> %66, %64
  %68 = and <4 x i64> %67, %57
  %69 = or <4 x i64> %68, %62
  %70 = shufflevector <4 x i64> %69, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %71 = bitcast <4 x i64> %69 to <16 x i16>
  %72 = bitcast <4 x i64> %70 to <16 x i16>
  %73 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %71, <16 x i16> %72) #8
  %74 = bitcast <32 x i8> %73 to <4 x i64>
  %75 = shufflevector <4 x i64> %74, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %76 = bitcast i8* %36 to <2 x i64>*
  store <2 x i64> %75, <2 x i64>* %76, align 16
  %77 = getelementptr inbounds i8, i8* %36, i64 %1
  %78 = add <16 x i16> %39, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %79 = bitcast <16 x i16> %78 to <4 x i64>
  %80 = add nuw nsw i32 %37, 1
  %81 = icmp eq i32 %80, 16
  br i1 %81, label %32, label %35
}

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_paeth_predictor_32x16_avx2(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) local_unnamed_addr #0 {
  %5 = bitcast i8* %3 to <2 x i64>*
  %6 = load <2 x i64>, <2 x i64>* %5, align 16
  %7 = shufflevector <2 x i64> %6, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %8 = bitcast i8* %2 to <16 x i8>*
  %9 = load <16 x i8>, <16 x i8>* %8, align 16
  %10 = shufflevector <16 x i8> %9, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %11 = bitcast <16 x i8> %10 to <2 x i64>
  %12 = shufflevector <16 x i8> %9, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %13 = bitcast <16 x i8> %12 to <2 x i64>
  %14 = shufflevector <2 x i64> %11, <2 x i64> %13, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %15 = getelementptr inbounds i8, i8* %2, i64 16
  %16 = bitcast i8* %15 to <16 x i8>*
  %17 = load <16 x i8>, <16 x i8>* %16, align 16
  %18 = shufflevector <16 x i8> %17, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %19 = bitcast <16 x i8> %18 to <2 x i64>
  %20 = shufflevector <16 x i8> %17, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %21 = bitcast <16 x i8> %20 to <2 x i64>
  %22 = shufflevector <2 x i64> %19, <2 x i64> %21, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %23 = getelementptr inbounds i8, i8* %2, i64 -1
  %24 = load i8, i8* %23, align 1
  %25 = zext i8 %24 to i16
  %26 = insertelement <16 x i16> undef, i16 %25, i32 0
  %27 = shufflevector <16 x i16> %26, <16 x i16> undef, <16 x i32> zeroinitializer
  %28 = bitcast <4 x i64> %7 to <32 x i8>
  %29 = bitcast <4 x i64> %14 to <16 x i16>
  %30 = sub <16 x i16> %29, %27
  %31 = bitcast <4 x i64> %22 to <16 x i16>
  %32 = sub <16 x i16> zeroinitializer, %30
  %33 = icmp slt <16 x i16> %30, zeroinitializer
  %34 = select <16 x i1> %33, <16 x i16> %32, <16 x i16> %30
  br label %35

35:                                               ; preds = %35, %4
  %36 = phi i8* [ %0, %4 ], [ %112, %35 ]
  %37 = phi i32 [ 0, %4 ], [ %115, %35 ]
  %38 = phi <4 x i64> [ <i64 -9223231297218904064, i64 -9223231297218904064, i64 -9223231297218904064, i64 -9223231297218904064>, %4 ], [ %114, %35 ]
  %39 = phi <16 x i16> [ <i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768>, %4 ], [ %113, %35 ]
  %40 = bitcast <4 x i64> %38 to <32 x i8>
  %41 = tail call <32 x i8> @llvm.x86.avx2.pshuf.b(<32 x i8> %28, <32 x i8> %40) #8
  %42 = bitcast <32 x i8> %41 to <4 x i64>
  %43 = bitcast <32 x i8> %41 to <16 x i16>
  %44 = add <16 x i16> %30, %43
  %45 = sub <16 x i16> %44, %29
  %46 = sub <16 x i16> zeroinitializer, %45
  %47 = icmp slt <16 x i16> %45, zeroinitializer
  %48 = select <16 x i1> %47, <16 x i16> %46, <16 x i16> %45
  %49 = sub <16 x i16> %44, %27
  %50 = sub <16 x i16> zeroinitializer, %49
  %51 = icmp slt <16 x i16> %49, zeroinitializer
  %52 = select <16 x i1> %51, <16 x i16> %50, <16 x i16> %49
  %53 = icmp sgt <16 x i16> %34, %48
  %54 = icmp sgt <16 x i16> %34, %52
  %55 = or <16 x i1> %54, %53
  %56 = sext <16 x i1> %55 to <16 x i16>
  %57 = bitcast <16 x i16> %56 to <4 x i64>
  %58 = icmp sgt <16 x i16> %48, %52
  %59 = sext <16 x i1> %58 to <16 x i16>
  %60 = bitcast <16 x i16> %59 to <4 x i64>
  %61 = xor <4 x i64> %57, <i64 -1, i64 -1, i64 -1, i64 -1>
  %62 = and <4 x i64> %61, %42
  %63 = and <16 x i16> %27, %59
  %64 = bitcast <16 x i16> %63 to <4 x i64>
  %65 = xor <4 x i64> %60, <i64 -1, i64 -1, i64 -1, i64 -1>
  %66 = and <4 x i64> %14, %65
  %67 = or <4 x i64> %66, %64
  %68 = and <4 x i64> %67, %57
  %69 = or <4 x i64> %68, %62
  %70 = shufflevector <4 x i64> %69, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %71 = bitcast <4 x i64> %69 to <16 x i16>
  %72 = bitcast <4 x i64> %70 to <16 x i16>
  %73 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %71, <16 x i16> %72) #8
  %74 = bitcast <32 x i8> %73 to <4 x i64>
  %75 = sub <16 x i16> %43, %27
  %76 = add <16 x i16> %75, %31
  %77 = sub <16 x i16> %76, %43
  %78 = sub <16 x i16> zeroinitializer, %77
  %79 = icmp slt <16 x i16> %77, zeroinitializer
  %80 = select <16 x i1> %79, <16 x i16> %78, <16 x i16> %77
  %81 = sub <16 x i16> zeroinitializer, %75
  %82 = icmp slt <16 x i16> %75, zeroinitializer
  %83 = select <16 x i1> %82, <16 x i16> %81, <16 x i16> %75
  %84 = sub <16 x i16> %76, %27
  %85 = sub <16 x i16> zeroinitializer, %84
  %86 = icmp slt <16 x i16> %84, zeroinitializer
  %87 = select <16 x i1> %86, <16 x i16> %85, <16 x i16> %84
  %88 = icmp sgt <16 x i16> %80, %83
  %89 = icmp sgt <16 x i16> %80, %87
  %90 = or <16 x i1> %89, %88
  %91 = sext <16 x i1> %90 to <16 x i16>
  %92 = bitcast <16 x i16> %91 to <4 x i64>
  %93 = icmp sgt <16 x i16> %83, %87
  %94 = sext <16 x i1> %93 to <16 x i16>
  %95 = bitcast <16 x i16> %94 to <4 x i64>
  %96 = xor <4 x i64> %92, <i64 -1, i64 -1, i64 -1, i64 -1>
  %97 = and <4 x i64> %96, %42
  %98 = and <16 x i16> %27, %94
  %99 = bitcast <16 x i16> %98 to <4 x i64>
  %100 = xor <4 x i64> %95, <i64 -1, i64 -1, i64 -1, i64 -1>
  %101 = and <4 x i64> %22, %100
  %102 = or <4 x i64> %101, %99
  %103 = and <4 x i64> %102, %92
  %104 = or <4 x i64> %103, %97
  %105 = shufflevector <4 x i64> %104, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %106 = bitcast <4 x i64> %104 to <16 x i16>
  %107 = bitcast <4 x i64> %105 to <16 x i16>
  %108 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %106, <16 x i16> %107) #8
  %109 = bitcast <32 x i8> %108 to <4 x i64>
  %110 = shufflevector <4 x i64> %74, <4 x i64> %109, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %111 = bitcast i8* %36 to <4 x i64>*
  store <4 x i64> %110, <4 x i64>* %111, align 1
  %112 = getelementptr inbounds i8, i8* %36, i64 %1
  %113 = add <16 x i16> %39, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %114 = bitcast <16 x i16> %113 to <4 x i64>
  %115 = add nuw nsw i32 %37, 1
  %116 = icmp eq i32 %115, 16
  br i1 %116, label %117, label %35

117:                                              ; preds = %35
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_paeth_predictor_32x32_avx2(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) local_unnamed_addr #0 {
  %5 = bitcast i8* %3 to <2 x i64>*
  %6 = load <2 x i64>, <2 x i64>* %5, align 16
  %7 = shufflevector <2 x i64> %6, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %8 = bitcast i8* %2 to <16 x i8>*
  %9 = load <16 x i8>, <16 x i8>* %8, align 16
  %10 = shufflevector <16 x i8> %9, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %11 = bitcast <16 x i8> %10 to <2 x i64>
  %12 = shufflevector <16 x i8> %9, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %13 = bitcast <16 x i8> %12 to <2 x i64>
  %14 = shufflevector <2 x i64> %11, <2 x i64> %13, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %15 = getelementptr inbounds i8, i8* %2, i64 16
  %16 = bitcast i8* %15 to <16 x i8>*
  %17 = load <16 x i8>, <16 x i8>* %16, align 16
  %18 = shufflevector <16 x i8> %17, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %19 = bitcast <16 x i8> %18 to <2 x i64>
  %20 = shufflevector <16 x i8> %17, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %21 = bitcast <16 x i8> %20 to <2 x i64>
  %22 = shufflevector <2 x i64> %19, <2 x i64> %21, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %23 = getelementptr inbounds i8, i8* %2, i64 -1
  %24 = load i8, i8* %23, align 1
  %25 = zext i8 %24 to i16
  %26 = insertelement <16 x i16> undef, i16 %25, i32 0
  %27 = shufflevector <16 x i16> %26, <16 x i16> undef, <16 x i32> zeroinitializer
  %28 = bitcast <4 x i64> %7 to <32 x i8>
  %29 = bitcast <4 x i64> %14 to <16 x i16>
  %30 = sub <16 x i16> %29, %27
  %31 = bitcast <4 x i64> %22 to <16 x i16>
  %32 = sub <16 x i16> %31, %27
  %33 = sub <16 x i16> zeroinitializer, %30
  %34 = icmp slt <16 x i16> %30, zeroinitializer
  %35 = select <16 x i1> %34, <16 x i16> %33, <16 x i16> %30
  %36 = sub <16 x i16> zeroinitializer, %32
  %37 = icmp slt <16 x i16> %32, zeroinitializer
  %38 = select <16 x i1> %37, <16 x i16> %36, <16 x i16> %32
  br label %39

39:                                               ; preds = %39, %4
  %40 = phi i8* [ %0, %4 ], [ %115, %39 ]
  %41 = phi <4 x i64> [ <i64 -9223231297218904064, i64 -9223231297218904064, i64 -9223231297218904064, i64 -9223231297218904064>, %4 ], [ %117, %39 ]
  %42 = phi <16 x i16> [ <i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768>, %4 ], [ %116, %39 ]
  %43 = phi i32 [ 0, %4 ], [ %118, %39 ]
  %44 = bitcast <4 x i64> %41 to <32 x i8>
  %45 = tail call <32 x i8> @llvm.x86.avx2.pshuf.b(<32 x i8> %28, <32 x i8> %44) #8
  %46 = bitcast <32 x i8> %45 to <4 x i64>
  %47 = bitcast <32 x i8> %45 to <16 x i16>
  %48 = add <16 x i16> %30, %47
  %49 = sub <16 x i16> %48, %29
  %50 = sub <16 x i16> zeroinitializer, %49
  %51 = icmp slt <16 x i16> %49, zeroinitializer
  %52 = select <16 x i1> %51, <16 x i16> %50, <16 x i16> %49
  %53 = sub <16 x i16> %48, %27
  %54 = sub <16 x i16> zeroinitializer, %53
  %55 = icmp slt <16 x i16> %53, zeroinitializer
  %56 = select <16 x i1> %55, <16 x i16> %54, <16 x i16> %53
  %57 = icmp sgt <16 x i16> %35, %52
  %58 = icmp sgt <16 x i16> %35, %56
  %59 = or <16 x i1> %58, %57
  %60 = sext <16 x i1> %59 to <16 x i16>
  %61 = bitcast <16 x i16> %60 to <4 x i64>
  %62 = icmp sgt <16 x i16> %52, %56
  %63 = sext <16 x i1> %62 to <16 x i16>
  %64 = bitcast <16 x i16> %63 to <4 x i64>
  %65 = xor <4 x i64> %61, <i64 -1, i64 -1, i64 -1, i64 -1>
  %66 = and <4 x i64> %65, %46
  %67 = and <16 x i16> %27, %63
  %68 = bitcast <16 x i16> %67 to <4 x i64>
  %69 = xor <4 x i64> %64, <i64 -1, i64 -1, i64 -1, i64 -1>
  %70 = and <4 x i64> %14, %69
  %71 = or <4 x i64> %70, %68
  %72 = and <4 x i64> %71, %61
  %73 = or <4 x i64> %72, %66
  %74 = shufflevector <4 x i64> %73, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %75 = bitcast <4 x i64> %73 to <16 x i16>
  %76 = bitcast <4 x i64> %74 to <16 x i16>
  %77 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %75, <16 x i16> %76) #8
  %78 = bitcast <32 x i8> %77 to <4 x i64>
  %79 = shufflevector <4 x i64> %78, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %80 = add <16 x i16> %32, %47
  %81 = sub <16 x i16> %80, %31
  %82 = sub <16 x i16> zeroinitializer, %81
  %83 = icmp slt <16 x i16> %81, zeroinitializer
  %84 = select <16 x i1> %83, <16 x i16> %82, <16 x i16> %81
  %85 = sub <16 x i16> %80, %27
  %86 = sub <16 x i16> zeroinitializer, %85
  %87 = icmp slt <16 x i16> %85, zeroinitializer
  %88 = select <16 x i1> %87, <16 x i16> %86, <16 x i16> %85
  %89 = icmp sgt <16 x i16> %38, %84
  %90 = icmp sgt <16 x i16> %38, %88
  %91 = or <16 x i1> %90, %89
  %92 = sext <16 x i1> %91 to <16 x i16>
  %93 = bitcast <16 x i16> %92 to <4 x i64>
  %94 = icmp sgt <16 x i16> %84, %88
  %95 = sext <16 x i1> %94 to <16 x i16>
  %96 = bitcast <16 x i16> %95 to <4 x i64>
  %97 = xor <4 x i64> %93, <i64 -1, i64 -1, i64 -1, i64 -1>
  %98 = and <4 x i64> %97, %46
  %99 = and <16 x i16> %27, %95
  %100 = bitcast <16 x i16> %99 to <4 x i64>
  %101 = xor <4 x i64> %96, <i64 -1, i64 -1, i64 -1, i64 -1>
  %102 = and <4 x i64> %22, %101
  %103 = or <4 x i64> %102, %100
  %104 = and <4 x i64> %103, %93
  %105 = or <4 x i64> %104, %98
  %106 = shufflevector <4 x i64> %105, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %107 = bitcast <4 x i64> %105 to <16 x i16>
  %108 = bitcast <4 x i64> %106 to <16 x i16>
  %109 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %107, <16 x i16> %108) #8
  %110 = bitcast <32 x i8> %109 to <4 x i64>
  %111 = shufflevector <4 x i64> %110, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %112 = bitcast i8* %40 to <2 x i64>*
  store <2 x i64> %79, <2 x i64>* %112, align 16
  %113 = getelementptr inbounds i8, i8* %40, i64 16
  %114 = bitcast i8* %113 to <2 x i64>*
  store <2 x i64> %111, <2 x i64>* %114, align 16
  %115 = getelementptr inbounds i8, i8* %40, i64 %1
  %116 = add <16 x i16> %42, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %117 = bitcast <16 x i16> %116 to <4 x i64>
  %118 = add nuw nsw i32 %43, 1
  %119 = icmp eq i32 %118, 16
  br i1 %119, label %120, label %39

120:                                              ; preds = %39
  %121 = getelementptr inbounds i8, i8* %3, i64 16
  %122 = bitcast i8* %121 to <2 x i64>*
  %123 = load <2 x i64>, <2 x i64>* %122, align 16
  %124 = shufflevector <2 x i64> %123, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %125 = bitcast <4 x i64> %124 to <32 x i8>
  br label %126

126:                                              ; preds = %126, %120
  %127 = phi i8* [ %115, %120 ], [ %202, %126 ]
  %128 = phi <4 x i64> [ <i64 -9223231297218904064, i64 -9223231297218904064, i64 -9223231297218904064, i64 -9223231297218904064>, %120 ], [ %204, %126 ]
  %129 = phi <16 x i16> [ <i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768>, %120 ], [ %203, %126 ]
  %130 = phi i32 [ 0, %120 ], [ %205, %126 ]
  %131 = bitcast <4 x i64> %128 to <32 x i8>
  %132 = tail call <32 x i8> @llvm.x86.avx2.pshuf.b(<32 x i8> %125, <32 x i8> %131) #8
  %133 = bitcast <32 x i8> %132 to <4 x i64>
  %134 = bitcast <32 x i8> %132 to <16 x i16>
  %135 = add <16 x i16> %30, %134
  %136 = sub <16 x i16> %135, %29
  %137 = sub <16 x i16> zeroinitializer, %136
  %138 = icmp slt <16 x i16> %136, zeroinitializer
  %139 = select <16 x i1> %138, <16 x i16> %137, <16 x i16> %136
  %140 = sub <16 x i16> %135, %27
  %141 = sub <16 x i16> zeroinitializer, %140
  %142 = icmp slt <16 x i16> %140, zeroinitializer
  %143 = select <16 x i1> %142, <16 x i16> %141, <16 x i16> %140
  %144 = icmp sgt <16 x i16> %35, %139
  %145 = icmp sgt <16 x i16> %35, %143
  %146 = or <16 x i1> %145, %144
  %147 = sext <16 x i1> %146 to <16 x i16>
  %148 = bitcast <16 x i16> %147 to <4 x i64>
  %149 = icmp sgt <16 x i16> %139, %143
  %150 = sext <16 x i1> %149 to <16 x i16>
  %151 = bitcast <16 x i16> %150 to <4 x i64>
  %152 = xor <4 x i64> %148, <i64 -1, i64 -1, i64 -1, i64 -1>
  %153 = and <4 x i64> %152, %133
  %154 = and <16 x i16> %27, %150
  %155 = bitcast <16 x i16> %154 to <4 x i64>
  %156 = xor <4 x i64> %151, <i64 -1, i64 -1, i64 -1, i64 -1>
  %157 = and <4 x i64> %14, %156
  %158 = or <4 x i64> %157, %155
  %159 = and <4 x i64> %158, %148
  %160 = or <4 x i64> %159, %153
  %161 = shufflevector <4 x i64> %160, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %162 = bitcast <4 x i64> %160 to <16 x i16>
  %163 = bitcast <4 x i64> %161 to <16 x i16>
  %164 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %162, <16 x i16> %163) #8
  %165 = bitcast <32 x i8> %164 to <4 x i64>
  %166 = shufflevector <4 x i64> %165, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %167 = add <16 x i16> %32, %134
  %168 = sub <16 x i16> %167, %31
  %169 = sub <16 x i16> zeroinitializer, %168
  %170 = icmp slt <16 x i16> %168, zeroinitializer
  %171 = select <16 x i1> %170, <16 x i16> %169, <16 x i16> %168
  %172 = sub <16 x i16> %167, %27
  %173 = sub <16 x i16> zeroinitializer, %172
  %174 = icmp slt <16 x i16> %172, zeroinitializer
  %175 = select <16 x i1> %174, <16 x i16> %173, <16 x i16> %172
  %176 = icmp sgt <16 x i16> %38, %171
  %177 = icmp sgt <16 x i16> %38, %175
  %178 = or <16 x i1> %177, %176
  %179 = sext <16 x i1> %178 to <16 x i16>
  %180 = bitcast <16 x i16> %179 to <4 x i64>
  %181 = icmp sgt <16 x i16> %171, %175
  %182 = sext <16 x i1> %181 to <16 x i16>
  %183 = bitcast <16 x i16> %182 to <4 x i64>
  %184 = xor <4 x i64> %180, <i64 -1, i64 -1, i64 -1, i64 -1>
  %185 = and <4 x i64> %184, %133
  %186 = and <16 x i16> %27, %182
  %187 = bitcast <16 x i16> %186 to <4 x i64>
  %188 = xor <4 x i64> %183, <i64 -1, i64 -1, i64 -1, i64 -1>
  %189 = and <4 x i64> %22, %188
  %190 = or <4 x i64> %189, %187
  %191 = and <4 x i64> %190, %180
  %192 = or <4 x i64> %191, %185
  %193 = shufflevector <4 x i64> %192, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %194 = bitcast <4 x i64> %192 to <16 x i16>
  %195 = bitcast <4 x i64> %193 to <16 x i16>
  %196 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %194, <16 x i16> %195) #8
  %197 = bitcast <32 x i8> %196 to <4 x i64>
  %198 = shufflevector <4 x i64> %197, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %199 = bitcast i8* %127 to <2 x i64>*
  store <2 x i64> %166, <2 x i64>* %199, align 16
  %200 = getelementptr inbounds i8, i8* %127, i64 16
  %201 = bitcast i8* %200 to <2 x i64>*
  store <2 x i64> %198, <2 x i64>* %201, align 16
  %202 = getelementptr inbounds i8, i8* %127, i64 %1
  %203 = add <16 x i16> %129, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %204 = bitcast <16 x i16> %203 to <4 x i64>
  %205 = add nuw nsw i32 %130, 1
  %206 = icmp eq i32 %205, 16
  br i1 %206, label %207, label %126

207:                                              ; preds = %126
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_paeth_predictor_32x64_avx2(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) local_unnamed_addr #0 {
  %5 = bitcast i8* %2 to <16 x i8>*
  %6 = load <16 x i8>, <16 x i8>* %5, align 16
  %7 = shufflevector <16 x i8> %6, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %8 = bitcast <16 x i8> %7 to <2 x i64>
  %9 = shufflevector <16 x i8> %6, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %10 = bitcast <16 x i8> %9 to <2 x i64>
  %11 = shufflevector <2 x i64> %8, <2 x i64> %10, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %12 = getelementptr inbounds i8, i8* %2, i64 16
  %13 = bitcast i8* %12 to <16 x i8>*
  %14 = load <16 x i8>, <16 x i8>* %13, align 16
  %15 = shufflevector <16 x i8> %14, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %16 = bitcast <16 x i8> %15 to <2 x i64>
  %17 = shufflevector <16 x i8> %14, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %18 = bitcast <16 x i8> %17 to <2 x i64>
  %19 = shufflevector <2 x i64> %16, <2 x i64> %18, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %20 = getelementptr inbounds i8, i8* %2, i64 -1
  %21 = load i8, i8* %20, align 1
  %22 = zext i8 %21 to i16
  %23 = insertelement <16 x i16> undef, i16 %22, i32 0
  %24 = shufflevector <16 x i16> %23, <16 x i16> undef, <16 x i32> zeroinitializer
  %25 = bitcast <4 x i64> %11 to <16 x i16>
  %26 = sub <16 x i16> %25, %24
  %27 = bitcast <4 x i64> %19 to <16 x i16>
  %28 = sub <16 x i16> %27, %24
  %29 = sub <16 x i16> zeroinitializer, %26
  %30 = icmp slt <16 x i16> %26, zeroinitializer
  %31 = select <16 x i1> %30, <16 x i16> %29, <16 x i16> %26
  %32 = sub <16 x i16> zeroinitializer, %28
  %33 = icmp slt <16 x i16> %28, zeroinitializer
  %34 = select <16 x i1> %33, <16 x i16> %32, <16 x i16> %28
  br label %35

35:                                               ; preds = %125, %4
  %36 = phi i64 [ 0, %4 ], [ %126, %125 ]
  %37 = phi i8* [ %0, %4 ], [ %120, %125 ]
  %38 = shl nsw i64 %36, 4
  %39 = getelementptr inbounds i8, i8* %3, i64 %38
  %40 = bitcast i8* %39 to <2 x i64>*
  %41 = load <2 x i64>, <2 x i64>* %40, align 16
  %42 = shufflevector <2 x i64> %41, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %43 = bitcast <4 x i64> %42 to <32 x i8>
  br label %44

44:                                               ; preds = %44, %35
  %45 = phi i8* [ %37, %35 ], [ %120, %44 ]
  %46 = phi <4 x i64> [ <i64 -9223231297218904064, i64 -9223231297218904064, i64 -9223231297218904064, i64 -9223231297218904064>, %35 ], [ %122, %44 ]
  %47 = phi <16 x i16> [ <i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768>, %35 ], [ %121, %44 ]
  %48 = phi i32 [ 0, %35 ], [ %123, %44 ]
  %49 = bitcast <4 x i64> %46 to <32 x i8>
  %50 = tail call <32 x i8> @llvm.x86.avx2.pshuf.b(<32 x i8> %43, <32 x i8> %49) #8
  %51 = bitcast <32 x i8> %50 to <4 x i64>
  %52 = bitcast <32 x i8> %50 to <16 x i16>
  %53 = add <16 x i16> %26, %52
  %54 = sub <16 x i16> %53, %25
  %55 = sub <16 x i16> zeroinitializer, %54
  %56 = icmp slt <16 x i16> %54, zeroinitializer
  %57 = select <16 x i1> %56, <16 x i16> %55, <16 x i16> %54
  %58 = sub <16 x i16> %53, %24
  %59 = sub <16 x i16> zeroinitializer, %58
  %60 = icmp slt <16 x i16> %58, zeroinitializer
  %61 = select <16 x i1> %60, <16 x i16> %59, <16 x i16> %58
  %62 = icmp sgt <16 x i16> %31, %57
  %63 = icmp sgt <16 x i16> %31, %61
  %64 = or <16 x i1> %63, %62
  %65 = sext <16 x i1> %64 to <16 x i16>
  %66 = bitcast <16 x i16> %65 to <4 x i64>
  %67 = icmp sgt <16 x i16> %57, %61
  %68 = sext <16 x i1> %67 to <16 x i16>
  %69 = bitcast <16 x i16> %68 to <4 x i64>
  %70 = xor <4 x i64> %66, <i64 -1, i64 -1, i64 -1, i64 -1>
  %71 = and <4 x i64> %70, %51
  %72 = and <16 x i16> %24, %68
  %73 = bitcast <16 x i16> %72 to <4 x i64>
  %74 = xor <4 x i64> %69, <i64 -1, i64 -1, i64 -1, i64 -1>
  %75 = and <4 x i64> %11, %74
  %76 = or <4 x i64> %75, %73
  %77 = and <4 x i64> %76, %66
  %78 = or <4 x i64> %77, %71
  %79 = shufflevector <4 x i64> %78, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %80 = bitcast <4 x i64> %78 to <16 x i16>
  %81 = bitcast <4 x i64> %79 to <16 x i16>
  %82 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %80, <16 x i16> %81) #8
  %83 = bitcast <32 x i8> %82 to <4 x i64>
  %84 = shufflevector <4 x i64> %83, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %85 = add <16 x i16> %28, %52
  %86 = sub <16 x i16> %85, %27
  %87 = sub <16 x i16> zeroinitializer, %86
  %88 = icmp slt <16 x i16> %86, zeroinitializer
  %89 = select <16 x i1> %88, <16 x i16> %87, <16 x i16> %86
  %90 = sub <16 x i16> %85, %24
  %91 = sub <16 x i16> zeroinitializer, %90
  %92 = icmp slt <16 x i16> %90, zeroinitializer
  %93 = select <16 x i1> %92, <16 x i16> %91, <16 x i16> %90
  %94 = icmp sgt <16 x i16> %34, %89
  %95 = icmp sgt <16 x i16> %34, %93
  %96 = or <16 x i1> %95, %94
  %97 = sext <16 x i1> %96 to <16 x i16>
  %98 = bitcast <16 x i16> %97 to <4 x i64>
  %99 = icmp sgt <16 x i16> %89, %93
  %100 = sext <16 x i1> %99 to <16 x i16>
  %101 = bitcast <16 x i16> %100 to <4 x i64>
  %102 = xor <4 x i64> %98, <i64 -1, i64 -1, i64 -1, i64 -1>
  %103 = and <4 x i64> %102, %51
  %104 = and <16 x i16> %24, %100
  %105 = bitcast <16 x i16> %104 to <4 x i64>
  %106 = xor <4 x i64> %101, <i64 -1, i64 -1, i64 -1, i64 -1>
  %107 = and <4 x i64> %19, %106
  %108 = or <4 x i64> %107, %105
  %109 = and <4 x i64> %108, %98
  %110 = or <4 x i64> %109, %103
  %111 = shufflevector <4 x i64> %110, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %112 = bitcast <4 x i64> %110 to <16 x i16>
  %113 = bitcast <4 x i64> %111 to <16 x i16>
  %114 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %112, <16 x i16> %113) #8
  %115 = bitcast <32 x i8> %114 to <4 x i64>
  %116 = shufflevector <4 x i64> %115, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %117 = bitcast i8* %45 to <2 x i64>*
  store <2 x i64> %84, <2 x i64>* %117, align 16
  %118 = getelementptr inbounds i8, i8* %45, i64 16
  %119 = bitcast i8* %118 to <2 x i64>*
  store <2 x i64> %116, <2 x i64>* %119, align 16
  %120 = getelementptr inbounds i8, i8* %45, i64 %1
  %121 = add <16 x i16> %47, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %122 = bitcast <16 x i16> %121 to <4 x i64>
  %123 = add nuw nsw i32 %48, 1
  %124 = icmp eq i32 %123, 16
  br i1 %124, label %125, label %44

125:                                              ; preds = %44
  %126 = add nuw nsw i64 %36, 1
  %127 = icmp eq i64 %126, 4
  br i1 %127, label %128, label %35

128:                                              ; preds = %125
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_paeth_predictor_64x32_avx2(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) local_unnamed_addr #0 {
  %5 = bitcast i8* %2 to <16 x i8>*
  %6 = load <16 x i8>, <16 x i8>* %5, align 16
  %7 = shufflevector <16 x i8> %6, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %8 = bitcast <16 x i8> %7 to <2 x i64>
  %9 = shufflevector <16 x i8> %6, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %10 = bitcast <16 x i8> %9 to <2 x i64>
  %11 = shufflevector <2 x i64> %8, <2 x i64> %10, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %12 = getelementptr inbounds i8, i8* %2, i64 16
  %13 = bitcast i8* %12 to <16 x i8>*
  %14 = load <16 x i8>, <16 x i8>* %13, align 16
  %15 = shufflevector <16 x i8> %14, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %16 = bitcast <16 x i8> %15 to <2 x i64>
  %17 = shufflevector <16 x i8> %14, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %18 = bitcast <16 x i8> %17 to <2 x i64>
  %19 = shufflevector <2 x i64> %16, <2 x i64> %18, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %20 = getelementptr inbounds i8, i8* %2, i64 32
  %21 = bitcast i8* %20 to <16 x i8>*
  %22 = load <16 x i8>, <16 x i8>* %21, align 16
  %23 = shufflevector <16 x i8> %22, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %24 = bitcast <16 x i8> %23 to <2 x i64>
  %25 = shufflevector <16 x i8> %22, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %26 = bitcast <16 x i8> %25 to <2 x i64>
  %27 = shufflevector <2 x i64> %24, <2 x i64> %26, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %28 = getelementptr inbounds i8, i8* %2, i64 48
  %29 = bitcast i8* %28 to <16 x i8>*
  %30 = load <16 x i8>, <16 x i8>* %29, align 16
  %31 = shufflevector <16 x i8> %30, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %32 = bitcast <16 x i8> %31 to <2 x i64>
  %33 = shufflevector <16 x i8> %30, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %34 = bitcast <16 x i8> %33 to <2 x i64>
  %35 = shufflevector <2 x i64> %32, <2 x i64> %34, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %36 = getelementptr inbounds i8, i8* %2, i64 -1
  %37 = load i8, i8* %36, align 1
  %38 = zext i8 %37 to i16
  %39 = insertelement <16 x i16> undef, i16 %38, i32 0
  %40 = shufflevector <16 x i16> %39, <16 x i16> undef, <16 x i32> zeroinitializer
  %41 = bitcast <4 x i64> %11 to <16 x i16>
  %42 = sub <16 x i16> %41, %40
  %43 = bitcast <4 x i64> %19 to <16 x i16>
  %44 = sub <16 x i16> %43, %40
  %45 = bitcast <4 x i64> %27 to <16 x i16>
  %46 = sub <16 x i16> %45, %40
  %47 = bitcast <4 x i64> %35 to <16 x i16>
  %48 = sub <16 x i16> %47, %40
  %49 = sub <16 x i16> zeroinitializer, %42
  %50 = icmp slt <16 x i16> %42, zeroinitializer
  %51 = select <16 x i1> %50, <16 x i16> %49, <16 x i16> %42
  %52 = sub <16 x i16> zeroinitializer, %44
  %53 = icmp slt <16 x i16> %44, zeroinitializer
  %54 = select <16 x i1> %53, <16 x i16> %52, <16 x i16> %44
  %55 = sub <16 x i16> zeroinitializer, %46
  %56 = icmp slt <16 x i16> %46, zeroinitializer
  %57 = select <16 x i1> %56, <16 x i16> %55, <16 x i16> %46
  %58 = sub <16 x i16> zeroinitializer, %48
  %59 = icmp slt <16 x i16> %48, zeroinitializer
  %60 = select <16 x i1> %59, <16 x i16> %58, <16 x i16> %48
  br label %61

61:                                               ; preds = %219, %4
  %62 = phi i64 [ 0, %4 ], [ %220, %219 ]
  %63 = phi i8* [ %0, %4 ], [ %214, %219 ]
  %64 = shl nsw i64 %62, 4
  %65 = getelementptr inbounds i8, i8* %3, i64 %64
  %66 = bitcast i8* %65 to <2 x i64>*
  %67 = load <2 x i64>, <2 x i64>* %66, align 16
  %68 = shufflevector <2 x i64> %67, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %69 = bitcast <4 x i64> %68 to <32 x i8>
  br label %70

70:                                               ; preds = %70, %61
  %71 = phi i8* [ %63, %61 ], [ %214, %70 ]
  %72 = phi i32 [ 0, %61 ], [ %217, %70 ]
  %73 = phi <4 x i64> [ <i64 -9223231297218904064, i64 -9223231297218904064, i64 -9223231297218904064, i64 -9223231297218904064>, %61 ], [ %216, %70 ]
  %74 = phi <16 x i16> [ <i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768>, %61 ], [ %215, %70 ]
  %75 = bitcast <4 x i64> %73 to <32 x i8>
  %76 = tail call <32 x i8> @llvm.x86.avx2.pshuf.b(<32 x i8> %69, <32 x i8> %75) #8
  %77 = bitcast <32 x i8> %76 to <4 x i64>
  %78 = bitcast <32 x i8> %76 to <16 x i16>
  %79 = add <16 x i16> %42, %78
  %80 = sub <16 x i16> %79, %41
  %81 = sub <16 x i16> zeroinitializer, %80
  %82 = icmp slt <16 x i16> %80, zeroinitializer
  %83 = select <16 x i1> %82, <16 x i16> %81, <16 x i16> %80
  %84 = sub <16 x i16> %79, %40
  %85 = sub <16 x i16> zeroinitializer, %84
  %86 = icmp slt <16 x i16> %84, zeroinitializer
  %87 = select <16 x i1> %86, <16 x i16> %85, <16 x i16> %84
  %88 = icmp sgt <16 x i16> %51, %83
  %89 = icmp sgt <16 x i16> %51, %87
  %90 = or <16 x i1> %89, %88
  %91 = sext <16 x i1> %90 to <16 x i16>
  %92 = bitcast <16 x i16> %91 to <4 x i64>
  %93 = icmp sgt <16 x i16> %83, %87
  %94 = sext <16 x i1> %93 to <16 x i16>
  %95 = bitcast <16 x i16> %94 to <4 x i64>
  %96 = xor <4 x i64> %92, <i64 -1, i64 -1, i64 -1, i64 -1>
  %97 = and <4 x i64> %96, %77
  %98 = and <16 x i16> %40, %94
  %99 = bitcast <16 x i16> %98 to <4 x i64>
  %100 = xor <4 x i64> %95, <i64 -1, i64 -1, i64 -1, i64 -1>
  %101 = and <4 x i64> %11, %100
  %102 = or <4 x i64> %101, %99
  %103 = and <4 x i64> %102, %92
  %104 = or <4 x i64> %103, %97
  %105 = shufflevector <4 x i64> %104, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %106 = bitcast <4 x i64> %104 to <16 x i16>
  %107 = bitcast <4 x i64> %105 to <16 x i16>
  %108 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %106, <16 x i16> %107) #8
  %109 = bitcast <32 x i8> %108 to <4 x i64>
  %110 = shufflevector <4 x i64> %109, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %111 = add <16 x i16> %44, %78
  %112 = sub <16 x i16> %111, %43
  %113 = sub <16 x i16> zeroinitializer, %112
  %114 = icmp slt <16 x i16> %112, zeroinitializer
  %115 = select <16 x i1> %114, <16 x i16> %113, <16 x i16> %112
  %116 = sub <16 x i16> %111, %40
  %117 = sub <16 x i16> zeroinitializer, %116
  %118 = icmp slt <16 x i16> %116, zeroinitializer
  %119 = select <16 x i1> %118, <16 x i16> %117, <16 x i16> %116
  %120 = icmp sgt <16 x i16> %54, %115
  %121 = icmp sgt <16 x i16> %54, %119
  %122 = or <16 x i1> %121, %120
  %123 = sext <16 x i1> %122 to <16 x i16>
  %124 = bitcast <16 x i16> %123 to <4 x i64>
  %125 = icmp sgt <16 x i16> %115, %119
  %126 = sext <16 x i1> %125 to <16 x i16>
  %127 = bitcast <16 x i16> %126 to <4 x i64>
  %128 = xor <4 x i64> %124, <i64 -1, i64 -1, i64 -1, i64 -1>
  %129 = and <4 x i64> %128, %77
  %130 = and <16 x i16> %40, %126
  %131 = bitcast <16 x i16> %130 to <4 x i64>
  %132 = xor <4 x i64> %127, <i64 -1, i64 -1, i64 -1, i64 -1>
  %133 = and <4 x i64> %19, %132
  %134 = or <4 x i64> %133, %131
  %135 = and <4 x i64> %134, %124
  %136 = or <4 x i64> %135, %129
  %137 = shufflevector <4 x i64> %136, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %138 = bitcast <4 x i64> %136 to <16 x i16>
  %139 = bitcast <4 x i64> %137 to <16 x i16>
  %140 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %138, <16 x i16> %139) #8
  %141 = bitcast <32 x i8> %140 to <4 x i64>
  %142 = shufflevector <4 x i64> %141, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %143 = add <16 x i16> %46, %78
  %144 = sub <16 x i16> %143, %45
  %145 = sub <16 x i16> zeroinitializer, %144
  %146 = icmp slt <16 x i16> %144, zeroinitializer
  %147 = select <16 x i1> %146, <16 x i16> %145, <16 x i16> %144
  %148 = sub <16 x i16> %143, %40
  %149 = sub <16 x i16> zeroinitializer, %148
  %150 = icmp slt <16 x i16> %148, zeroinitializer
  %151 = select <16 x i1> %150, <16 x i16> %149, <16 x i16> %148
  %152 = icmp sgt <16 x i16> %57, %147
  %153 = icmp sgt <16 x i16> %57, %151
  %154 = or <16 x i1> %153, %152
  %155 = sext <16 x i1> %154 to <16 x i16>
  %156 = bitcast <16 x i16> %155 to <4 x i64>
  %157 = icmp sgt <16 x i16> %147, %151
  %158 = sext <16 x i1> %157 to <16 x i16>
  %159 = bitcast <16 x i16> %158 to <4 x i64>
  %160 = xor <4 x i64> %156, <i64 -1, i64 -1, i64 -1, i64 -1>
  %161 = and <4 x i64> %160, %77
  %162 = and <16 x i16> %40, %158
  %163 = bitcast <16 x i16> %162 to <4 x i64>
  %164 = xor <4 x i64> %159, <i64 -1, i64 -1, i64 -1, i64 -1>
  %165 = and <4 x i64> %27, %164
  %166 = or <4 x i64> %165, %163
  %167 = and <4 x i64> %166, %156
  %168 = or <4 x i64> %167, %161
  %169 = shufflevector <4 x i64> %168, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %170 = bitcast <4 x i64> %168 to <16 x i16>
  %171 = bitcast <4 x i64> %169 to <16 x i16>
  %172 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %170, <16 x i16> %171) #8
  %173 = bitcast <32 x i8> %172 to <4 x i64>
  %174 = shufflevector <4 x i64> %173, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %175 = add <16 x i16> %48, %78
  %176 = sub <16 x i16> %175, %47
  %177 = sub <16 x i16> zeroinitializer, %176
  %178 = icmp slt <16 x i16> %176, zeroinitializer
  %179 = select <16 x i1> %178, <16 x i16> %177, <16 x i16> %176
  %180 = sub <16 x i16> %175, %40
  %181 = sub <16 x i16> zeroinitializer, %180
  %182 = icmp slt <16 x i16> %180, zeroinitializer
  %183 = select <16 x i1> %182, <16 x i16> %181, <16 x i16> %180
  %184 = icmp sgt <16 x i16> %60, %179
  %185 = icmp sgt <16 x i16> %60, %183
  %186 = or <16 x i1> %185, %184
  %187 = sext <16 x i1> %186 to <16 x i16>
  %188 = bitcast <16 x i16> %187 to <4 x i64>
  %189 = icmp sgt <16 x i16> %179, %183
  %190 = sext <16 x i1> %189 to <16 x i16>
  %191 = bitcast <16 x i16> %190 to <4 x i64>
  %192 = xor <4 x i64> %188, <i64 -1, i64 -1, i64 -1, i64 -1>
  %193 = and <4 x i64> %192, %77
  %194 = and <16 x i16> %40, %190
  %195 = bitcast <16 x i16> %194 to <4 x i64>
  %196 = xor <4 x i64> %191, <i64 -1, i64 -1, i64 -1, i64 -1>
  %197 = and <4 x i64> %35, %196
  %198 = or <4 x i64> %197, %195
  %199 = and <4 x i64> %198, %188
  %200 = or <4 x i64> %199, %193
  %201 = shufflevector <4 x i64> %200, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %202 = bitcast <4 x i64> %200 to <16 x i16>
  %203 = bitcast <4 x i64> %201 to <16 x i16>
  %204 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %202, <16 x i16> %203) #8
  %205 = bitcast <32 x i8> %204 to <4 x i64>
  %206 = shufflevector <4 x i64> %205, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %207 = bitcast i8* %71 to <2 x i64>*
  store <2 x i64> %110, <2 x i64>* %207, align 16
  %208 = getelementptr inbounds i8, i8* %71, i64 16
  %209 = bitcast i8* %208 to <2 x i64>*
  store <2 x i64> %142, <2 x i64>* %209, align 16
  %210 = getelementptr inbounds i8, i8* %71, i64 32
  %211 = bitcast i8* %210 to <2 x i64>*
  store <2 x i64> %174, <2 x i64>* %211, align 16
  %212 = getelementptr inbounds i8, i8* %71, i64 48
  %213 = bitcast i8* %212 to <2 x i64>*
  store <2 x i64> %206, <2 x i64>* %213, align 16
  %214 = getelementptr inbounds i8, i8* %71, i64 %1
  %215 = add <16 x i16> %74, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %216 = bitcast <16 x i16> %215 to <4 x i64>
  %217 = add nuw nsw i32 %72, 1
  %218 = icmp eq i32 %217, 16
  br i1 %218, label %219, label %70

219:                                              ; preds = %70
  %220 = add nuw nsw i64 %62, 1
  %221 = icmp eq i64 %220, 2
  br i1 %221, label %222, label %61

222:                                              ; preds = %219
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_paeth_predictor_64x64_avx2(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) local_unnamed_addr #0 {
  %5 = bitcast i8* %2 to <16 x i8>*
  %6 = load <16 x i8>, <16 x i8>* %5, align 16
  %7 = shufflevector <16 x i8> %6, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %8 = bitcast <16 x i8> %7 to <2 x i64>
  %9 = shufflevector <16 x i8> %6, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %10 = bitcast <16 x i8> %9 to <2 x i64>
  %11 = shufflevector <2 x i64> %8, <2 x i64> %10, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %12 = getelementptr inbounds i8, i8* %2, i64 16
  %13 = bitcast i8* %12 to <16 x i8>*
  %14 = load <16 x i8>, <16 x i8>* %13, align 16
  %15 = shufflevector <16 x i8> %14, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %16 = bitcast <16 x i8> %15 to <2 x i64>
  %17 = shufflevector <16 x i8> %14, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %18 = bitcast <16 x i8> %17 to <2 x i64>
  %19 = shufflevector <2 x i64> %16, <2 x i64> %18, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %20 = getelementptr inbounds i8, i8* %2, i64 32
  %21 = bitcast i8* %20 to <16 x i8>*
  %22 = load <16 x i8>, <16 x i8>* %21, align 16
  %23 = shufflevector <16 x i8> %22, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %24 = bitcast <16 x i8> %23 to <2 x i64>
  %25 = shufflevector <16 x i8> %22, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %26 = bitcast <16 x i8> %25 to <2 x i64>
  %27 = shufflevector <2 x i64> %24, <2 x i64> %26, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %28 = getelementptr inbounds i8, i8* %2, i64 48
  %29 = bitcast i8* %28 to <16 x i8>*
  %30 = load <16 x i8>, <16 x i8>* %29, align 16
  %31 = shufflevector <16 x i8> %30, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %32 = bitcast <16 x i8> %31 to <2 x i64>
  %33 = shufflevector <16 x i8> %30, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %34 = bitcast <16 x i8> %33 to <2 x i64>
  %35 = shufflevector <2 x i64> %32, <2 x i64> %34, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %36 = getelementptr inbounds i8, i8* %2, i64 -1
  %37 = load i8, i8* %36, align 1
  %38 = zext i8 %37 to i16
  %39 = insertelement <16 x i16> undef, i16 %38, i32 0
  %40 = shufflevector <16 x i16> %39, <16 x i16> undef, <16 x i32> zeroinitializer
  %41 = bitcast <4 x i64> %11 to <16 x i16>
  %42 = sub <16 x i16> %41, %40
  %43 = bitcast <4 x i64> %19 to <16 x i16>
  %44 = sub <16 x i16> %43, %40
  %45 = bitcast <4 x i64> %27 to <16 x i16>
  %46 = sub <16 x i16> %45, %40
  %47 = bitcast <4 x i64> %35 to <16 x i16>
  %48 = sub <16 x i16> %47, %40
  %49 = sub <16 x i16> zeroinitializer, %42
  %50 = icmp slt <16 x i16> %42, zeroinitializer
  %51 = select <16 x i1> %50, <16 x i16> %49, <16 x i16> %42
  %52 = sub <16 x i16> zeroinitializer, %44
  %53 = icmp slt <16 x i16> %44, zeroinitializer
  %54 = select <16 x i1> %53, <16 x i16> %52, <16 x i16> %44
  %55 = sub <16 x i16> zeroinitializer, %46
  %56 = icmp slt <16 x i16> %46, zeroinitializer
  %57 = select <16 x i1> %56, <16 x i16> %55, <16 x i16> %46
  %58 = sub <16 x i16> zeroinitializer, %48
  %59 = icmp slt <16 x i16> %48, zeroinitializer
  %60 = select <16 x i1> %59, <16 x i16> %58, <16 x i16> %48
  br label %61

61:                                               ; preds = %219, %4
  %62 = phi i64 [ 0, %4 ], [ %220, %219 ]
  %63 = phi i8* [ %0, %4 ], [ %214, %219 ]
  %64 = shl nsw i64 %62, 4
  %65 = getelementptr inbounds i8, i8* %3, i64 %64
  %66 = bitcast i8* %65 to <2 x i64>*
  %67 = load <2 x i64>, <2 x i64>* %66, align 16
  %68 = shufflevector <2 x i64> %67, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %69 = bitcast <4 x i64> %68 to <32 x i8>
  br label %70

70:                                               ; preds = %70, %61
  %71 = phi i8* [ %63, %61 ], [ %214, %70 ]
  %72 = phi i32 [ 0, %61 ], [ %217, %70 ]
  %73 = phi <4 x i64> [ <i64 -9223231297218904064, i64 -9223231297218904064, i64 -9223231297218904064, i64 -9223231297218904064>, %61 ], [ %216, %70 ]
  %74 = phi <16 x i16> [ <i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768>, %61 ], [ %215, %70 ]
  %75 = bitcast <4 x i64> %73 to <32 x i8>
  %76 = tail call <32 x i8> @llvm.x86.avx2.pshuf.b(<32 x i8> %69, <32 x i8> %75) #8
  %77 = bitcast <32 x i8> %76 to <4 x i64>
  %78 = bitcast <32 x i8> %76 to <16 x i16>
  %79 = add <16 x i16> %42, %78
  %80 = sub <16 x i16> %79, %41
  %81 = sub <16 x i16> zeroinitializer, %80
  %82 = icmp slt <16 x i16> %80, zeroinitializer
  %83 = select <16 x i1> %82, <16 x i16> %81, <16 x i16> %80
  %84 = sub <16 x i16> %79, %40
  %85 = sub <16 x i16> zeroinitializer, %84
  %86 = icmp slt <16 x i16> %84, zeroinitializer
  %87 = select <16 x i1> %86, <16 x i16> %85, <16 x i16> %84
  %88 = icmp sgt <16 x i16> %51, %83
  %89 = icmp sgt <16 x i16> %51, %87
  %90 = or <16 x i1> %89, %88
  %91 = sext <16 x i1> %90 to <16 x i16>
  %92 = bitcast <16 x i16> %91 to <4 x i64>
  %93 = icmp sgt <16 x i16> %83, %87
  %94 = sext <16 x i1> %93 to <16 x i16>
  %95 = bitcast <16 x i16> %94 to <4 x i64>
  %96 = xor <4 x i64> %92, <i64 -1, i64 -1, i64 -1, i64 -1>
  %97 = and <4 x i64> %96, %77
  %98 = and <16 x i16> %40, %94
  %99 = bitcast <16 x i16> %98 to <4 x i64>
  %100 = xor <4 x i64> %95, <i64 -1, i64 -1, i64 -1, i64 -1>
  %101 = and <4 x i64> %11, %100
  %102 = or <4 x i64> %101, %99
  %103 = and <4 x i64> %102, %92
  %104 = or <4 x i64> %103, %97
  %105 = shufflevector <4 x i64> %104, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %106 = bitcast <4 x i64> %104 to <16 x i16>
  %107 = bitcast <4 x i64> %105 to <16 x i16>
  %108 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %106, <16 x i16> %107) #8
  %109 = bitcast <32 x i8> %108 to <4 x i64>
  %110 = shufflevector <4 x i64> %109, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %111 = add <16 x i16> %44, %78
  %112 = sub <16 x i16> %111, %43
  %113 = sub <16 x i16> zeroinitializer, %112
  %114 = icmp slt <16 x i16> %112, zeroinitializer
  %115 = select <16 x i1> %114, <16 x i16> %113, <16 x i16> %112
  %116 = sub <16 x i16> %111, %40
  %117 = sub <16 x i16> zeroinitializer, %116
  %118 = icmp slt <16 x i16> %116, zeroinitializer
  %119 = select <16 x i1> %118, <16 x i16> %117, <16 x i16> %116
  %120 = icmp sgt <16 x i16> %54, %115
  %121 = icmp sgt <16 x i16> %54, %119
  %122 = or <16 x i1> %121, %120
  %123 = sext <16 x i1> %122 to <16 x i16>
  %124 = bitcast <16 x i16> %123 to <4 x i64>
  %125 = icmp sgt <16 x i16> %115, %119
  %126 = sext <16 x i1> %125 to <16 x i16>
  %127 = bitcast <16 x i16> %126 to <4 x i64>
  %128 = xor <4 x i64> %124, <i64 -1, i64 -1, i64 -1, i64 -1>
  %129 = and <4 x i64> %128, %77
  %130 = and <16 x i16> %40, %126
  %131 = bitcast <16 x i16> %130 to <4 x i64>
  %132 = xor <4 x i64> %127, <i64 -1, i64 -1, i64 -1, i64 -1>
  %133 = and <4 x i64> %19, %132
  %134 = or <4 x i64> %133, %131
  %135 = and <4 x i64> %134, %124
  %136 = or <4 x i64> %135, %129
  %137 = shufflevector <4 x i64> %136, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %138 = bitcast <4 x i64> %136 to <16 x i16>
  %139 = bitcast <4 x i64> %137 to <16 x i16>
  %140 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %138, <16 x i16> %139) #8
  %141 = bitcast <32 x i8> %140 to <4 x i64>
  %142 = shufflevector <4 x i64> %141, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %143 = add <16 x i16> %46, %78
  %144 = sub <16 x i16> %143, %45
  %145 = sub <16 x i16> zeroinitializer, %144
  %146 = icmp slt <16 x i16> %144, zeroinitializer
  %147 = select <16 x i1> %146, <16 x i16> %145, <16 x i16> %144
  %148 = sub <16 x i16> %143, %40
  %149 = sub <16 x i16> zeroinitializer, %148
  %150 = icmp slt <16 x i16> %148, zeroinitializer
  %151 = select <16 x i1> %150, <16 x i16> %149, <16 x i16> %148
  %152 = icmp sgt <16 x i16> %57, %147
  %153 = icmp sgt <16 x i16> %57, %151
  %154 = or <16 x i1> %153, %152
  %155 = sext <16 x i1> %154 to <16 x i16>
  %156 = bitcast <16 x i16> %155 to <4 x i64>
  %157 = icmp sgt <16 x i16> %147, %151
  %158 = sext <16 x i1> %157 to <16 x i16>
  %159 = bitcast <16 x i16> %158 to <4 x i64>
  %160 = xor <4 x i64> %156, <i64 -1, i64 -1, i64 -1, i64 -1>
  %161 = and <4 x i64> %160, %77
  %162 = and <16 x i16> %40, %158
  %163 = bitcast <16 x i16> %162 to <4 x i64>
  %164 = xor <4 x i64> %159, <i64 -1, i64 -1, i64 -1, i64 -1>
  %165 = and <4 x i64> %27, %164
  %166 = or <4 x i64> %165, %163
  %167 = and <4 x i64> %166, %156
  %168 = or <4 x i64> %167, %161
  %169 = shufflevector <4 x i64> %168, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %170 = bitcast <4 x i64> %168 to <16 x i16>
  %171 = bitcast <4 x i64> %169 to <16 x i16>
  %172 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %170, <16 x i16> %171) #8
  %173 = bitcast <32 x i8> %172 to <4 x i64>
  %174 = shufflevector <4 x i64> %173, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %175 = add <16 x i16> %48, %78
  %176 = sub <16 x i16> %175, %47
  %177 = sub <16 x i16> zeroinitializer, %176
  %178 = icmp slt <16 x i16> %176, zeroinitializer
  %179 = select <16 x i1> %178, <16 x i16> %177, <16 x i16> %176
  %180 = sub <16 x i16> %175, %40
  %181 = sub <16 x i16> zeroinitializer, %180
  %182 = icmp slt <16 x i16> %180, zeroinitializer
  %183 = select <16 x i1> %182, <16 x i16> %181, <16 x i16> %180
  %184 = icmp sgt <16 x i16> %60, %179
  %185 = icmp sgt <16 x i16> %60, %183
  %186 = or <16 x i1> %185, %184
  %187 = sext <16 x i1> %186 to <16 x i16>
  %188 = bitcast <16 x i16> %187 to <4 x i64>
  %189 = icmp sgt <16 x i16> %179, %183
  %190 = sext <16 x i1> %189 to <16 x i16>
  %191 = bitcast <16 x i16> %190 to <4 x i64>
  %192 = xor <4 x i64> %188, <i64 -1, i64 -1, i64 -1, i64 -1>
  %193 = and <4 x i64> %192, %77
  %194 = and <16 x i16> %40, %190
  %195 = bitcast <16 x i16> %194 to <4 x i64>
  %196 = xor <4 x i64> %191, <i64 -1, i64 -1, i64 -1, i64 -1>
  %197 = and <4 x i64> %35, %196
  %198 = or <4 x i64> %197, %195
  %199 = and <4 x i64> %198, %188
  %200 = or <4 x i64> %199, %193
  %201 = shufflevector <4 x i64> %200, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %202 = bitcast <4 x i64> %200 to <16 x i16>
  %203 = bitcast <4 x i64> %201 to <16 x i16>
  %204 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %202, <16 x i16> %203) #8
  %205 = bitcast <32 x i8> %204 to <4 x i64>
  %206 = shufflevector <4 x i64> %205, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %207 = bitcast i8* %71 to <2 x i64>*
  store <2 x i64> %110, <2 x i64>* %207, align 16
  %208 = getelementptr inbounds i8, i8* %71, i64 16
  %209 = bitcast i8* %208 to <2 x i64>*
  store <2 x i64> %142, <2 x i64>* %209, align 16
  %210 = getelementptr inbounds i8, i8* %71, i64 32
  %211 = bitcast i8* %210 to <2 x i64>*
  store <2 x i64> %174, <2 x i64>* %211, align 16
  %212 = getelementptr inbounds i8, i8* %71, i64 48
  %213 = bitcast i8* %212 to <2 x i64>*
  store <2 x i64> %206, <2 x i64>* %213, align 16
  %214 = getelementptr inbounds i8, i8* %71, i64 %1
  %215 = add <16 x i16> %74, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %216 = bitcast <16 x i16> %215 to <4 x i64>
  %217 = add nuw nsw i32 %72, 1
  %218 = icmp eq i32 %217, 16
  br i1 %218, label %219, label %70

219:                                              ; preds = %70
  %220 = add nuw nsw i64 %62, 1
  %221 = icmp eq i64 %220, 4
  br i1 %221, label %222, label %61

222:                                              ; preds = %219
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_paeth_predictor_64x16_avx2(i8* nocapture, i64, i8* nocapture readonly, i8* nocapture readonly) local_unnamed_addr #0 {
  %5 = bitcast i8* %2 to <16 x i8>*
  %6 = load <16 x i8>, <16 x i8>* %5, align 16
  %7 = shufflevector <16 x i8> %6, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %8 = bitcast <16 x i8> %7 to <2 x i64>
  %9 = shufflevector <16 x i8> %6, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %10 = bitcast <16 x i8> %9 to <2 x i64>
  %11 = shufflevector <2 x i64> %8, <2 x i64> %10, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %12 = getelementptr inbounds i8, i8* %2, i64 16
  %13 = bitcast i8* %12 to <16 x i8>*
  %14 = load <16 x i8>, <16 x i8>* %13, align 16
  %15 = shufflevector <16 x i8> %14, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %16 = bitcast <16 x i8> %15 to <2 x i64>
  %17 = shufflevector <16 x i8> %14, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %18 = bitcast <16 x i8> %17 to <2 x i64>
  %19 = shufflevector <2 x i64> %16, <2 x i64> %18, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %20 = getelementptr inbounds i8, i8* %2, i64 32
  %21 = bitcast i8* %20 to <16 x i8>*
  %22 = load <16 x i8>, <16 x i8>* %21, align 16
  %23 = shufflevector <16 x i8> %22, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %24 = bitcast <16 x i8> %23 to <2 x i64>
  %25 = shufflevector <16 x i8> %22, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %26 = bitcast <16 x i8> %25 to <2 x i64>
  %27 = shufflevector <2 x i64> %24, <2 x i64> %26, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %28 = getelementptr inbounds i8, i8* %2, i64 48
  %29 = bitcast i8* %28 to <16 x i8>*
  %30 = load <16 x i8>, <16 x i8>* %29, align 16
  %31 = shufflevector <16 x i8> %30, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %32 = bitcast <16 x i8> %31 to <2 x i64>
  %33 = shufflevector <16 x i8> %30, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %34 = bitcast <16 x i8> %33 to <2 x i64>
  %35 = shufflevector <2 x i64> %32, <2 x i64> %34, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %36 = getelementptr inbounds i8, i8* %2, i64 -1
  %37 = load i8, i8* %36, align 1
  %38 = zext i8 %37 to i16
  %39 = insertelement <16 x i16> undef, i16 %38, i32 0
  %40 = shufflevector <16 x i16> %39, <16 x i16> undef, <16 x i32> zeroinitializer
  %41 = bitcast i8* %3 to <2 x i64>*
  %42 = load <2 x i64>, <2 x i64>* %41, align 16
  %43 = shufflevector <2 x i64> %42, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %44 = bitcast <4 x i64> %43 to <32 x i8>
  %45 = bitcast <4 x i64> %11 to <16 x i16>
  %46 = sub <16 x i16> %45, %40
  %47 = bitcast <4 x i64> %19 to <16 x i16>
  %48 = sub <16 x i16> %47, %40
  %49 = bitcast <4 x i64> %27 to <16 x i16>
  %50 = sub <16 x i16> %49, %40
  %51 = bitcast <4 x i64> %35 to <16 x i16>
  %52 = sub <16 x i16> %51, %40
  %53 = sub <16 x i16> zeroinitializer, %46
  %54 = icmp slt <16 x i16> %46, zeroinitializer
  %55 = select <16 x i1> %54, <16 x i16> %53, <16 x i16> %46
  %56 = sub <16 x i16> zeroinitializer, %48
  %57 = icmp slt <16 x i16> %48, zeroinitializer
  %58 = select <16 x i1> %57, <16 x i16> %56, <16 x i16> %48
  %59 = sub <16 x i16> zeroinitializer, %50
  %60 = icmp slt <16 x i16> %50, zeroinitializer
  %61 = select <16 x i1> %60, <16 x i16> %59, <16 x i16> %50
  %62 = sub <16 x i16> zeroinitializer, %52
  %63 = icmp slt <16 x i16> %52, zeroinitializer
  %64 = select <16 x i1> %63, <16 x i16> %62, <16 x i16> %52
  br label %65

65:                                               ; preds = %65, %4
  %66 = phi i8* [ %0, %4 ], [ %209, %65 ]
  %67 = phi i32 [ 0, %4 ], [ %212, %65 ]
  %68 = phi <4 x i64> [ <i64 -9223231297218904064, i64 -9223231297218904064, i64 -9223231297218904064, i64 -9223231297218904064>, %4 ], [ %211, %65 ]
  %69 = phi <16 x i16> [ <i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768>, %4 ], [ %210, %65 ]
  %70 = bitcast <4 x i64> %68 to <32 x i8>
  %71 = tail call <32 x i8> @llvm.x86.avx2.pshuf.b(<32 x i8> %44, <32 x i8> %70) #8
  %72 = bitcast <32 x i8> %71 to <4 x i64>
  %73 = bitcast <32 x i8> %71 to <16 x i16>
  %74 = add <16 x i16> %46, %73
  %75 = sub <16 x i16> %74, %45
  %76 = sub <16 x i16> zeroinitializer, %75
  %77 = icmp slt <16 x i16> %75, zeroinitializer
  %78 = select <16 x i1> %77, <16 x i16> %76, <16 x i16> %75
  %79 = sub <16 x i16> %74, %40
  %80 = sub <16 x i16> zeroinitializer, %79
  %81 = icmp slt <16 x i16> %79, zeroinitializer
  %82 = select <16 x i1> %81, <16 x i16> %80, <16 x i16> %79
  %83 = icmp sgt <16 x i16> %55, %78
  %84 = icmp sgt <16 x i16> %55, %82
  %85 = or <16 x i1> %84, %83
  %86 = sext <16 x i1> %85 to <16 x i16>
  %87 = bitcast <16 x i16> %86 to <4 x i64>
  %88 = icmp sgt <16 x i16> %78, %82
  %89 = sext <16 x i1> %88 to <16 x i16>
  %90 = bitcast <16 x i16> %89 to <4 x i64>
  %91 = xor <4 x i64> %87, <i64 -1, i64 -1, i64 -1, i64 -1>
  %92 = and <4 x i64> %91, %72
  %93 = and <16 x i16> %40, %89
  %94 = bitcast <16 x i16> %93 to <4 x i64>
  %95 = xor <4 x i64> %90, <i64 -1, i64 -1, i64 -1, i64 -1>
  %96 = and <4 x i64> %11, %95
  %97 = or <4 x i64> %96, %94
  %98 = and <4 x i64> %97, %87
  %99 = or <4 x i64> %98, %92
  %100 = shufflevector <4 x i64> %99, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %101 = bitcast <4 x i64> %99 to <16 x i16>
  %102 = bitcast <4 x i64> %100 to <16 x i16>
  %103 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %101, <16 x i16> %102) #8
  %104 = bitcast <32 x i8> %103 to <4 x i64>
  %105 = shufflevector <4 x i64> %104, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %106 = add <16 x i16> %48, %73
  %107 = sub <16 x i16> %106, %47
  %108 = sub <16 x i16> zeroinitializer, %107
  %109 = icmp slt <16 x i16> %107, zeroinitializer
  %110 = select <16 x i1> %109, <16 x i16> %108, <16 x i16> %107
  %111 = sub <16 x i16> %106, %40
  %112 = sub <16 x i16> zeroinitializer, %111
  %113 = icmp slt <16 x i16> %111, zeroinitializer
  %114 = select <16 x i1> %113, <16 x i16> %112, <16 x i16> %111
  %115 = icmp sgt <16 x i16> %58, %110
  %116 = icmp sgt <16 x i16> %58, %114
  %117 = or <16 x i1> %116, %115
  %118 = sext <16 x i1> %117 to <16 x i16>
  %119 = bitcast <16 x i16> %118 to <4 x i64>
  %120 = icmp sgt <16 x i16> %110, %114
  %121 = sext <16 x i1> %120 to <16 x i16>
  %122 = bitcast <16 x i16> %121 to <4 x i64>
  %123 = xor <4 x i64> %119, <i64 -1, i64 -1, i64 -1, i64 -1>
  %124 = and <4 x i64> %123, %72
  %125 = and <16 x i16> %40, %121
  %126 = bitcast <16 x i16> %125 to <4 x i64>
  %127 = xor <4 x i64> %122, <i64 -1, i64 -1, i64 -1, i64 -1>
  %128 = and <4 x i64> %19, %127
  %129 = or <4 x i64> %128, %126
  %130 = and <4 x i64> %129, %119
  %131 = or <4 x i64> %130, %124
  %132 = shufflevector <4 x i64> %131, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %133 = bitcast <4 x i64> %131 to <16 x i16>
  %134 = bitcast <4 x i64> %132 to <16 x i16>
  %135 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %133, <16 x i16> %134) #8
  %136 = bitcast <32 x i8> %135 to <4 x i64>
  %137 = shufflevector <4 x i64> %136, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %138 = add <16 x i16> %50, %73
  %139 = sub <16 x i16> %138, %49
  %140 = sub <16 x i16> zeroinitializer, %139
  %141 = icmp slt <16 x i16> %139, zeroinitializer
  %142 = select <16 x i1> %141, <16 x i16> %140, <16 x i16> %139
  %143 = sub <16 x i16> %138, %40
  %144 = sub <16 x i16> zeroinitializer, %143
  %145 = icmp slt <16 x i16> %143, zeroinitializer
  %146 = select <16 x i1> %145, <16 x i16> %144, <16 x i16> %143
  %147 = icmp sgt <16 x i16> %61, %142
  %148 = icmp sgt <16 x i16> %61, %146
  %149 = or <16 x i1> %148, %147
  %150 = sext <16 x i1> %149 to <16 x i16>
  %151 = bitcast <16 x i16> %150 to <4 x i64>
  %152 = icmp sgt <16 x i16> %142, %146
  %153 = sext <16 x i1> %152 to <16 x i16>
  %154 = bitcast <16 x i16> %153 to <4 x i64>
  %155 = xor <4 x i64> %151, <i64 -1, i64 -1, i64 -1, i64 -1>
  %156 = and <4 x i64> %155, %72
  %157 = and <16 x i16> %40, %153
  %158 = bitcast <16 x i16> %157 to <4 x i64>
  %159 = xor <4 x i64> %154, <i64 -1, i64 -1, i64 -1, i64 -1>
  %160 = and <4 x i64> %27, %159
  %161 = or <4 x i64> %160, %158
  %162 = and <4 x i64> %161, %151
  %163 = or <4 x i64> %162, %156
  %164 = shufflevector <4 x i64> %163, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %165 = bitcast <4 x i64> %163 to <16 x i16>
  %166 = bitcast <4 x i64> %164 to <16 x i16>
  %167 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %165, <16 x i16> %166) #8
  %168 = bitcast <32 x i8> %167 to <4 x i64>
  %169 = shufflevector <4 x i64> %168, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %170 = add <16 x i16> %52, %73
  %171 = sub <16 x i16> %170, %51
  %172 = sub <16 x i16> zeroinitializer, %171
  %173 = icmp slt <16 x i16> %171, zeroinitializer
  %174 = select <16 x i1> %173, <16 x i16> %172, <16 x i16> %171
  %175 = sub <16 x i16> %170, %40
  %176 = sub <16 x i16> zeroinitializer, %175
  %177 = icmp slt <16 x i16> %175, zeroinitializer
  %178 = select <16 x i1> %177, <16 x i16> %176, <16 x i16> %175
  %179 = icmp sgt <16 x i16> %64, %174
  %180 = icmp sgt <16 x i16> %64, %178
  %181 = or <16 x i1> %180, %179
  %182 = sext <16 x i1> %181 to <16 x i16>
  %183 = bitcast <16 x i16> %182 to <4 x i64>
  %184 = icmp sgt <16 x i16> %174, %178
  %185 = sext <16 x i1> %184 to <16 x i16>
  %186 = bitcast <16 x i16> %185 to <4 x i64>
  %187 = xor <4 x i64> %183, <i64 -1, i64 -1, i64 -1, i64 -1>
  %188 = and <4 x i64> %187, %72
  %189 = and <16 x i16> %40, %185
  %190 = bitcast <16 x i16> %189 to <4 x i64>
  %191 = xor <4 x i64> %186, <i64 -1, i64 -1, i64 -1, i64 -1>
  %192 = and <4 x i64> %35, %191
  %193 = or <4 x i64> %192, %190
  %194 = and <4 x i64> %193, %183
  %195 = or <4 x i64> %194, %188
  %196 = shufflevector <4 x i64> %195, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %197 = bitcast <4 x i64> %195 to <16 x i16>
  %198 = bitcast <4 x i64> %196 to <16 x i16>
  %199 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %197, <16 x i16> %198) #8
  %200 = bitcast <32 x i8> %199 to <4 x i64>
  %201 = shufflevector <4 x i64> %200, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %202 = bitcast i8* %66 to <2 x i64>*
  store <2 x i64> %105, <2 x i64>* %202, align 16
  %203 = getelementptr inbounds i8, i8* %66, i64 16
  %204 = bitcast i8* %203 to <2 x i64>*
  store <2 x i64> %137, <2 x i64>* %204, align 16
  %205 = getelementptr inbounds i8, i8* %66, i64 32
  %206 = bitcast i8* %205 to <2 x i64>*
  store <2 x i64> %169, <2 x i64>* %206, align 16
  %207 = getelementptr inbounds i8, i8* %66, i64 48
  %208 = bitcast i8* %207 to <2 x i64>*
  store <2 x i64> %201, <2 x i64>* %208, align 16
  %209 = getelementptr inbounds i8, i8* %66, i64 %1
  %210 = add <16 x i16> %69, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %211 = bitcast <16 x i16> %210 to <4 x i64>
  %212 = add nuw nsw i32 %67, 1
  %213 = icmp eq i32 %212, 16
  br i1 %213, label %214, label %65

214:                                              ; preds = %65
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_highbd_dr_prediction_z1_avx2(i16* nocapture, i64, i32, i32, i16* nocapture readonly, i16* nocapture readnone, i32, i32, i32, i32) local_unnamed_addr #0 {
  %11 = alloca [64 x <4 x i64>], align 32
  %12 = alloca [32 x <2 x i64>], align 16
  %13 = alloca [16 x <2 x i64>], align 16
  switch i32 %2, label %1198 [
    i32 4, label %14
    i32 8, label %361
    i32 16, label %715
    i32 32, label %1042
    i32 64, label %1043
  ]

14:                                               ; preds = %10
  %15 = bitcast [16 x <2 x i64>]* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %15) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %15, i8 -86, i64 256, i1 false) #8
  %16 = icmp slt i32 %9, 12
  %17 = sub nsw i32 6, %6
  %18 = add nsw i32 %3, 3
  %19 = shl i32 %18, %6
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds i16, i16* %4, i64 %20
  %22 = load i16, i16* %21, align 2
  %23 = insertelement <8 x i16> undef, i16 %22, i32 0
  %24 = shufflevector <8 x i16> %23, <8 x i16> undef, <8 x i32> zeroinitializer
  br i1 %16, label %25, label %172

25:                                               ; preds = %14
  %26 = trunc i32 %19 to i16
  %27 = insertelement <8 x i16> undef, i16 %26, i32 0
  %28 = shufflevector <8 x i16> %27, <8 x i16> undef, <8 x i32> zeroinitializer
  %29 = icmp sgt i32 %3, 0
  br i1 %29, label %30, label %360

30:                                               ; preds = %25
  %31 = icmp eq i32 %6, 0
  %32 = zext i32 %3 to i64
  br label %33

33:                                               ; preds = %146, %30
  %34 = phi i64 [ 0, %30 ], [ %170, %146 ]
  %35 = phi i32 [ %7, %30 ], [ %169, %146 ]
  %36 = ashr i32 %35, %17
  %37 = icmp slt i32 %36, %19
  br i1 %37, label %86, label %38

38:                                               ; preds = %33
  %39 = trunc i64 %34 to i32
  %40 = icmp slt i32 %39, %3
  br i1 %40, label %41, label %303

41:                                               ; preds = %38
  %42 = and i64 %34, 4294967295
  %43 = sub nsw i64 %32, %34
  %44 = xor i64 %42, -1
  %45 = add nsw i64 %44, %32
  %46 = and i64 %43, 7
  %47 = icmp eq i64 %46, 0
  br i1 %47, label %56, label %48

48:                                               ; preds = %41, %48
  %49 = phi i64 [ %53, %48 ], [ %42, %41 ]
  %50 = phi i64 [ %54, %48 ], [ %46, %41 ]
  %51 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %13, i64 0, i64 %49
  %52 = bitcast <2 x i64>* %51 to <8 x i16>*
  store <8 x i16> %24, <8 x i16>* %52, align 16
  %53 = add nuw nsw i64 %49, 1
  %54 = add i64 %50, -1
  %55 = icmp eq i64 %54, 0
  br i1 %55, label %56, label %48, !llvm.loop !2

56:                                               ; preds = %48, %41
  %57 = phi i64 [ %42, %41 ], [ %53, %48 ]
  %58 = icmp ult i64 %45, 7
  br i1 %58, label %303, label %59

59:                                               ; preds = %56, %59
  %60 = phi i64 [ %84, %59 ], [ %57, %56 ]
  %61 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %13, i64 0, i64 %60
  %62 = bitcast <2 x i64>* %61 to <8 x i16>*
  store <8 x i16> %24, <8 x i16>* %62, align 16
  %63 = add nuw nsw i64 %60, 1
  %64 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %13, i64 0, i64 %63
  %65 = bitcast <2 x i64>* %64 to <8 x i16>*
  store <8 x i16> %24, <8 x i16>* %65, align 16
  %66 = add nuw nsw i64 %60, 2
  %67 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %13, i64 0, i64 %66
  %68 = bitcast <2 x i64>* %67 to <8 x i16>*
  store <8 x i16> %24, <8 x i16>* %68, align 16
  %69 = add nuw nsw i64 %60, 3
  %70 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %13, i64 0, i64 %69
  %71 = bitcast <2 x i64>* %70 to <8 x i16>*
  store <8 x i16> %24, <8 x i16>* %71, align 16
  %72 = add nuw nsw i64 %60, 4
  %73 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %13, i64 0, i64 %72
  %74 = bitcast <2 x i64>* %73 to <8 x i16>*
  store <8 x i16> %24, <8 x i16>* %74, align 16
  %75 = add nuw nsw i64 %60, 5
  %76 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %13, i64 0, i64 %75
  %77 = bitcast <2 x i64>* %76 to <8 x i16>*
  store <8 x i16> %24, <8 x i16>* %77, align 16
  %78 = add nuw nsw i64 %60, 6
  %79 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %13, i64 0, i64 %78
  %80 = bitcast <2 x i64>* %79 to <8 x i16>*
  store <8 x i16> %24, <8 x i16>* %80, align 16
  %81 = add nuw nsw i64 %60, 7
  %82 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %13, i64 0, i64 %81
  %83 = bitcast <2 x i64>* %82 to <8 x i16>*
  store <8 x i16> %24, <8 x i16>* %83, align 16
  %84 = add nuw nsw i64 %60, 8
  %85 = icmp eq i64 %84, %32
  br i1 %85, label %303, label %59

86:                                               ; preds = %33
  %87 = sext i32 %36 to i64
  %88 = getelementptr inbounds i16, i16* %4, i64 %87
  %89 = bitcast i16* %88 to <2 x i64>*
  %90 = load <2 x i64>, <2 x i64>* %89, align 1
  br i1 %31, label %120, label %91

91:                                               ; preds = %86
  %92 = bitcast <2 x i64> %90 to <16 x i8>
  %93 = shufflevector <16 x i8> %92, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 4, i32 5, i32 8, i32 9, i32 12, i32 13, i32 2, i32 3, i32 6, i32 7, i32 10, i32 11, i32 14, i32 15>
  %94 = bitcast <16 x i8> %93 to <2 x i64>
  %95 = shufflevector <16 x i8> %93, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %96 = bitcast <16 x i8> %95 to <2 x i64>
  %97 = trunc i32 %36 to i16
  %98 = add i16 %97, 2
  %99 = add i16 %97, 4
  %100 = add i16 %97, 6
  %101 = add i16 %97, 8
  %102 = add i16 %97, 10
  %103 = add i16 %97, 12
  %104 = add i16 %97, 14
  %105 = insertelement <8 x i16> undef, i16 %97, i32 0
  %106 = insertelement <8 x i16> %105, i16 %98, i32 1
  %107 = insertelement <8 x i16> %106, i16 %99, i32 2
  %108 = insertelement <8 x i16> %107, i16 %100, i32 3
  %109 = insertelement <8 x i16> %108, i16 %101, i32 4
  %110 = insertelement <8 x i16> %109, i16 %102, i32 5
  %111 = insertelement <8 x i16> %110, i16 %103, i32 6
  %112 = insertelement <8 x i16> %111, i16 %104, i32 7
  %113 = trunc i32 %35 to i16
  %114 = insertelement <16 x i16> undef, i16 %113, i32 0
  %115 = shufflevector <16 x i16> %114, <16 x i16> undef, <16 x i32> zeroinitializer
  %116 = tail call <16 x i16> @llvm.x86.avx2.pslli.w(<16 x i16> %115, i32 %6) #8
  %117 = lshr <16 x i16> %116, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %118 = bitcast <16 x i16> %117 to <4 x i64>
  %119 = and <4 x i64> %118, <i64 8725857424048159, i64 8725857424048159, i64 8725857424048159, i64 8725857424048159>
  br label %146

120:                                              ; preds = %86
  %121 = getelementptr inbounds i16, i16* %88, i64 1
  %122 = bitcast i16* %121 to <2 x i64>*
  %123 = load <2 x i64>, <2 x i64>* %122, align 1
  %124 = trunc i32 %36 to i16
  %125 = add i16 %124, 1
  %126 = add i16 %124, 2
  %127 = add i16 %124, 3
  %128 = add i16 %124, 4
  %129 = add i16 %124, 5
  %130 = add i16 %124, 6
  %131 = add i16 %124, 7
  %132 = insertelement <8 x i16> undef, i16 %124, i32 0
  %133 = insertelement <8 x i16> %132, i16 %125, i32 1
  %134 = insertelement <8 x i16> %133, i16 %126, i32 2
  %135 = insertelement <8 x i16> %134, i16 %127, i32 3
  %136 = insertelement <8 x i16> %135, i16 %128, i32 4
  %137 = insertelement <8 x i16> %136, i16 %129, i32 5
  %138 = insertelement <8 x i16> %137, i16 %130, i32 6
  %139 = insertelement <8 x i16> %138, i16 %131, i32 7
  %140 = trunc i32 %35 to i16
  %141 = insertelement <16 x i16> undef, i16 %140, i32 0
  %142 = and <16 x i16> %141, <i16 63, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef>
  %143 = lshr <16 x i16> %142, <i16 1, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0>
  %144 = shufflevector <16 x i16> %143, <16 x i16> undef, <16 x i32> zeroinitializer
  %145 = bitcast <16 x i16> %144 to <4 x i64>
  br label %146

146:                                              ; preds = %120, %91
  %147 = phi <8 x i16> [ %112, %91 ], [ %139, %120 ]
  %148 = phi <2 x i64> [ %94, %91 ], [ %90, %120 ]
  %149 = phi <2 x i64> [ %96, %91 ], [ %123, %120 ]
  %150 = phi <4 x i64> [ %119, %91 ], [ %145, %120 ]
  %151 = shufflevector <2 x i64> %148, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %152 = shufflevector <2 x i64> %149, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %153 = bitcast <4 x i64> %152 to <16 x i16>
  %154 = bitcast <4 x i64> %151 to <16 x i16>
  %155 = sub <16 x i16> %153, %154
  %156 = shl <16 x i16> %154, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %157 = or <16 x i16> %156, <i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16>
  %158 = bitcast <4 x i64> %150 to <16 x i16>
  %159 = mul <16 x i16> %155, %158
  %160 = add <16 x i16> %159, %157
  %161 = lshr <16 x i16> %160, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %162 = bitcast <16 x i16> %161 to <4 x i64>
  %163 = shufflevector <4 x i64> %162, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %164 = icmp sgt <8 x i16> %28, %147
  %165 = bitcast <2 x i64> %163 to <8 x i16>
  %166 = select <8 x i1> %164, <8 x i16> %165, <8 x i16> %24
  %167 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %13, i64 0, i64 %34
  %168 = bitcast <2 x i64>* %167 to <8 x i16>*
  store <8 x i16> %166, <8 x i16>* %168, align 16
  %169 = add nsw i32 %35, %7
  %170 = add nuw nsw i64 %34, 1
  %171 = icmp eq i64 %170, %32
  br i1 %171, label %303, label %33

172:                                              ; preds = %14
  %173 = insertelement <4 x i32> undef, i32 %19, i32 0
  %174 = shufflevector <4 x i32> %173, <4 x i32> undef, <4 x i32> zeroinitializer
  %175 = icmp sgt i32 %3, 0
  br i1 %175, label %176, label %360

176:                                              ; preds = %172
  %177 = icmp eq i32 %6, 0
  %178 = bitcast <8 x i16> %24 to <16 x i8>
  %179 = zext i32 %3 to i64
  br label %180

180:                                              ; preds = %275, %176
  %181 = phi i64 [ 0, %176 ], [ %301, %275 ]
  %182 = phi i32 [ %7, %176 ], [ %300, %275 ]
  %183 = ashr i32 %182, %17
  %184 = icmp slt i32 %183, %19
  br i1 %184, label %233, label %185

185:                                              ; preds = %180
  %186 = trunc i64 %181 to i32
  %187 = icmp slt i32 %186, %3
  br i1 %187, label %188, label %303

188:                                              ; preds = %185
  %189 = and i64 %181, 4294967295
  %190 = sub nsw i64 %179, %181
  %191 = xor i64 %189, -1
  %192 = add nsw i64 %191, %179
  %193 = and i64 %190, 7
  %194 = icmp eq i64 %193, 0
  br i1 %194, label %203, label %195

195:                                              ; preds = %188, %195
  %196 = phi i64 [ %200, %195 ], [ %189, %188 ]
  %197 = phi i64 [ %201, %195 ], [ %193, %188 ]
  %198 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %13, i64 0, i64 %196
  %199 = bitcast <2 x i64>* %198 to <8 x i16>*
  store <8 x i16> %24, <8 x i16>* %199, align 16
  %200 = add nuw nsw i64 %196, 1
  %201 = add i64 %197, -1
  %202 = icmp eq i64 %201, 0
  br i1 %202, label %203, label %195, !llvm.loop !4

203:                                              ; preds = %195, %188
  %204 = phi i64 [ %189, %188 ], [ %200, %195 ]
  %205 = icmp ult i64 %192, 7
  br i1 %205, label %303, label %206

206:                                              ; preds = %203, %206
  %207 = phi i64 [ %231, %206 ], [ %204, %203 ]
  %208 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %13, i64 0, i64 %207
  %209 = bitcast <2 x i64>* %208 to <8 x i16>*
  store <8 x i16> %24, <8 x i16>* %209, align 16
  %210 = add nuw nsw i64 %207, 1
  %211 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %13, i64 0, i64 %210
  %212 = bitcast <2 x i64>* %211 to <8 x i16>*
  store <8 x i16> %24, <8 x i16>* %212, align 16
  %213 = add nuw nsw i64 %207, 2
  %214 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %13, i64 0, i64 %213
  %215 = bitcast <2 x i64>* %214 to <8 x i16>*
  store <8 x i16> %24, <8 x i16>* %215, align 16
  %216 = add nuw nsw i64 %207, 3
  %217 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %13, i64 0, i64 %216
  %218 = bitcast <2 x i64>* %217 to <8 x i16>*
  store <8 x i16> %24, <8 x i16>* %218, align 16
  %219 = add nuw nsw i64 %207, 4
  %220 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %13, i64 0, i64 %219
  %221 = bitcast <2 x i64>* %220 to <8 x i16>*
  store <8 x i16> %24, <8 x i16>* %221, align 16
  %222 = add nuw nsw i64 %207, 5
  %223 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %13, i64 0, i64 %222
  %224 = bitcast <2 x i64>* %223 to <8 x i16>*
  store <8 x i16> %24, <8 x i16>* %224, align 16
  %225 = add nuw nsw i64 %207, 6
  %226 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %13, i64 0, i64 %225
  %227 = bitcast <2 x i64>* %226 to <8 x i16>*
  store <8 x i16> %24, <8 x i16>* %227, align 16
  %228 = add nuw nsw i64 %207, 7
  %229 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %13, i64 0, i64 %228
  %230 = bitcast <2 x i64>* %229 to <8 x i16>*
  store <8 x i16> %24, <8 x i16>* %230, align 16
  %231 = add nuw nsw i64 %207, 8
  %232 = icmp eq i64 %231, %179
  br i1 %232, label %303, label %206

233:                                              ; preds = %180
  %234 = sext i32 %183 to i64
  %235 = getelementptr inbounds i16, i16* %4, i64 %234
  %236 = bitcast i16* %235 to <8 x i16>*
  %237 = load <8 x i16>, <8 x i16>* %236, align 1
  %238 = zext <8 x i16> %237 to <8 x i32>
  br i1 %177, label %257, label %239

239:                                              ; preds = %233
  %240 = shufflevector <8 x i32> %238, <8 x i32> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 1, i32 3, i32 5, i32 7>
  %241 = bitcast <8 x i32> %240 to <4 x i64>
  %242 = shufflevector <4 x i64> %241, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %243 = shufflevector <2 x i64> %242, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %244 = add nsw i32 %183, 2
  %245 = add nsw i32 %183, 4
  %246 = add nsw i32 %183, 6
  %247 = insertelement <4 x i32> undef, i32 %183, i32 0
  %248 = insertelement <4 x i32> %247, i32 %244, i32 1
  %249 = insertelement <4 x i32> %248, i32 %245, i32 2
  %250 = insertelement <4 x i32> %249, i32 %246, i32 3
  %251 = insertelement <8 x i32> undef, i32 %182, i32 0
  %252 = shufflevector <8 x i32> %251, <8 x i32> undef, <8 x i32> zeroinitializer
  %253 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %252, i32 %6) #8
  %254 = lshr <8 x i32> %253, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %255 = bitcast <8 x i32> %254 to <4 x i64>
  %256 = and <4 x i64> %255, <i64 133143986207, i64 133143986207, i64 133143986207, i64 133143986207>
  br label %275

257:                                              ; preds = %233
  %258 = getelementptr inbounds i16, i16* %235, i64 1
  %259 = bitcast i16* %258 to <8 x i16>*
  %260 = load <8 x i16>, <8 x i16>* %259, align 1
  %261 = zext <8 x i16> %260 to <8 x i32>
  %262 = bitcast <8 x i32> %261 to <4 x i64>
  %263 = add nsw i32 %183, 1
  %264 = add nsw i32 %183, 2
  %265 = add nsw i32 %183, 3
  %266 = insertelement <4 x i32> undef, i32 %183, i32 0
  %267 = insertelement <4 x i32> %266, i32 %263, i32 1
  %268 = insertelement <4 x i32> %267, i32 %264, i32 2
  %269 = insertelement <4 x i32> %268, i32 %265, i32 3
  %270 = insertelement <8 x i32> undef, i32 %182, i32 0
  %271 = and <8 x i32> %270, <i32 63, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %272 = lshr <8 x i32> %271, <i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>
  %273 = shufflevector <8 x i32> %272, <8 x i32> undef, <8 x i32> zeroinitializer
  %274 = bitcast <8 x i32> %273 to <4 x i64>
  br label %275

275:                                              ; preds = %257, %239
  %276 = phi <8 x i32> [ %240, %239 ], [ %238, %257 ]
  %277 = phi <4 x i64> [ %243, %239 ], [ %262, %257 ]
  %278 = phi <4 x i32> [ %250, %239 ], [ %269, %257 ]
  %279 = phi <4 x i64> [ %256, %239 ], [ %274, %257 ]
  %280 = bitcast <4 x i64> %277 to <8 x i32>
  %281 = sub <8 x i32> %280, %276
  %282 = shl nsw <8 x i32> %276, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %283 = or <8 x i32> %282, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %284 = bitcast <4 x i64> %279 to <8 x i32>
  %285 = mul <8 x i32> %281, %284
  %286 = add <8 x i32> %285, %283
  %287 = lshr <8 x i32> %286, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %288 = bitcast <8 x i32> %287 to <4 x i64>
  %289 = shufflevector <4 x i64> %288, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %290 = bitcast <2 x i64> %289 to <4 x i32>
  %291 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %290, <4 x i32> %290) #8
  %292 = icmp sgt <4 x i32> %174, %278
  %293 = sext <4 x i1> %292 to <4 x i32>
  %294 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %293, <4 x i32> %293) #8
  %295 = bitcast <8 x i16> %291 to <16 x i8>
  %296 = bitcast <8 x i16> %294 to <16 x i8>
  %297 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %178, <16 x i8> %295, <16 x i8> %296) #8
  %298 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %13, i64 0, i64 %181
  %299 = bitcast <2 x i64>* %298 to <16 x i8>*
  store <16 x i8> %297, <16 x i8>* %299, align 16
  %300 = add nsw i32 %182, %7
  %301 = add nuw nsw i64 %181, 1
  %302 = icmp eq i64 %301, %179
  br i1 %302, label %303, label %180

303:                                              ; preds = %275, %203, %206, %146, %56, %59, %185, %38
  %304 = icmp sgt i32 %3, 0
  br i1 %304, label %305, label %360

305:                                              ; preds = %303
  %306 = zext i32 %3 to i64
  %307 = add nsw i64 %306, -1
  %308 = and i64 %306, 3
  %309 = icmp ult i64 %307, 3
  br i1 %309, label %345, label %310

310:                                              ; preds = %305
  %311 = sub nsw i64 %306, %308
  br label %312

312:                                              ; preds = %312, %310
  %313 = phi i64 [ 0, %310 ], [ %342, %312 ]
  %314 = phi i64 [ %311, %310 ], [ %343, %312 ]
  %315 = mul nsw i64 %313, %1
  %316 = getelementptr inbounds i16, i16* %0, i64 %315
  %317 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %13, i64 0, i64 %313
  %318 = load <2 x i64>, <2 x i64>* %317, align 16
  %319 = extractelement <2 x i64> %318, i32 0
  %320 = bitcast i16* %316 to i64*
  store i64 %319, i64* %320, align 1
  %321 = or i64 %313, 1
  %322 = mul nsw i64 %321, %1
  %323 = getelementptr inbounds i16, i16* %0, i64 %322
  %324 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %13, i64 0, i64 %321
  %325 = load <2 x i64>, <2 x i64>* %324, align 16
  %326 = extractelement <2 x i64> %325, i32 0
  %327 = bitcast i16* %323 to i64*
  store i64 %326, i64* %327, align 1
  %328 = or i64 %313, 2
  %329 = mul nsw i64 %328, %1
  %330 = getelementptr inbounds i16, i16* %0, i64 %329
  %331 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %13, i64 0, i64 %328
  %332 = load <2 x i64>, <2 x i64>* %331, align 16
  %333 = extractelement <2 x i64> %332, i32 0
  %334 = bitcast i16* %330 to i64*
  store i64 %333, i64* %334, align 1
  %335 = or i64 %313, 3
  %336 = mul nsw i64 %335, %1
  %337 = getelementptr inbounds i16, i16* %0, i64 %336
  %338 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %13, i64 0, i64 %335
  %339 = load <2 x i64>, <2 x i64>* %338, align 16
  %340 = extractelement <2 x i64> %339, i32 0
  %341 = bitcast i16* %337 to i64*
  store i64 %340, i64* %341, align 1
  %342 = add nuw nsw i64 %313, 4
  %343 = add i64 %314, -4
  %344 = icmp eq i64 %343, 0
  br i1 %344, label %345, label %312

345:                                              ; preds = %312, %305
  %346 = phi i64 [ 0, %305 ], [ %342, %312 ]
  %347 = icmp eq i64 %308, 0
  br i1 %347, label %360, label %348

348:                                              ; preds = %345, %348
  %349 = phi i64 [ %357, %348 ], [ %346, %345 ]
  %350 = phi i64 [ %358, %348 ], [ %308, %345 ]
  %351 = mul nsw i64 %349, %1
  %352 = getelementptr inbounds i16, i16* %0, i64 %351
  %353 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %13, i64 0, i64 %349
  %354 = load <2 x i64>, <2 x i64>* %353, align 16
  %355 = extractelement <2 x i64> %354, i32 0
  %356 = bitcast i16* %352 to i64*
  store i64 %355, i64* %356, align 1
  %357 = add nuw nsw i64 %349, 1
  %358 = add i64 %350, -1
  %359 = icmp eq i64 %358, 0
  br i1 %359, label %360, label %348, !llvm.loop !5

360:                                              ; preds = %345, %348, %25, %172, %303
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %15) #8
  br label %1198

361:                                              ; preds = %10
  %362 = bitcast [32 x <2 x i64>]* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %362) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %362, i8 -86, i64 512, i1 false) #8
  %363 = icmp slt i32 %9, 12
  %364 = sub nsw i32 6, %6
  %365 = add nsw i32 %3, 7
  %366 = shl i32 %365, %6
  %367 = sext i32 %366 to i64
  %368 = getelementptr inbounds i16, i16* %4, i64 %367
  %369 = load i16, i16* %368, align 2
  %370 = insertelement <16 x i16> undef, i16 %369, i32 0
  %371 = shufflevector <16 x i16> %370, <16 x i16> undef, <16 x i32> zeroinitializer
  %372 = bitcast <16 x i16> %371 to <4 x i64>
  br i1 %363, label %373, label %509

373:                                              ; preds = %361
  %374 = trunc i32 %366 to i16
  %375 = insertelement <16 x i16> undef, i16 %374, i32 0
  %376 = shufflevector <16 x i16> %375, <16 x i16> undef, <16 x i32> zeroinitializer
  %377 = icmp sgt i32 %3, 0
  br i1 %377, label %378, label %714

378:                                              ; preds = %373
  %379 = icmp eq i32 %6, 0
  %380 = zext i32 %3 to i64
  br label %381

381:                                              ; preds = %485, %378
  %382 = phi i64 [ 0, %378 ], [ %507, %485 ]
  %383 = phi i32 [ %7, %378 ], [ %506, %485 ]
  %384 = ashr i32 %383, %364
  %385 = icmp slt i32 %384, %366
  br i1 %385, label %418, label %386

386:                                              ; preds = %381
  %387 = trunc i64 %382 to i32
  %388 = icmp slt i32 %387, %3
  br i1 %388, label %389, label %662

389:                                              ; preds = %386
  %390 = shufflevector <4 x i64> %372, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %391 = and i64 %382, 4294967295
  %392 = sub nsw i64 %380, %382
  %393 = xor i64 %391, -1
  %394 = add nsw i64 %393, %380
  %395 = and i64 %392, 3
  %396 = icmp eq i64 %395, 0
  br i1 %396, label %404, label %397

397:                                              ; preds = %389, %397
  %398 = phi i64 [ %401, %397 ], [ %391, %389 ]
  %399 = phi i64 [ %402, %397 ], [ %395, %389 ]
  %400 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %12, i64 0, i64 %398
  store <2 x i64> %390, <2 x i64>* %400, align 16
  %401 = add nuw nsw i64 %398, 1
  %402 = add i64 %399, -1
  %403 = icmp eq i64 %402, 0
  br i1 %403, label %404, label %397, !llvm.loop !6

404:                                              ; preds = %397, %389
  %405 = phi i64 [ %391, %389 ], [ %401, %397 ]
  %406 = icmp ult i64 %394, 3
  br i1 %406, label %662, label %407

407:                                              ; preds = %404, %407
  %408 = phi i64 [ %416, %407 ], [ %405, %404 ]
  %409 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %12, i64 0, i64 %408
  store <2 x i64> %390, <2 x i64>* %409, align 16
  %410 = add nuw nsw i64 %408, 1
  %411 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %12, i64 0, i64 %410
  store <2 x i64> %390, <2 x i64>* %411, align 16
  %412 = add nuw nsw i64 %408, 2
  %413 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %12, i64 0, i64 %412
  store <2 x i64> %390, <2 x i64>* %413, align 16
  %414 = add nuw nsw i64 %408, 3
  %415 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %12, i64 0, i64 %414
  store <2 x i64> %390, <2 x i64>* %415, align 16
  %416 = add nuw nsw i64 %408, 4
  %417 = icmp eq i64 %416, %380
  br i1 %417, label %662, label %407

418:                                              ; preds = %381
  %419 = sext i32 %384 to i64
  %420 = getelementptr inbounds i16, i16* %4, i64 %419
  %421 = bitcast i16* %420 to <2 x i64>*
  %422 = load <2 x i64>, <2 x i64>* %421, align 1
  br i1 %379, label %459, label %423

423:                                              ; preds = %418
  %424 = getelementptr inbounds i16, i16* %420, i64 8
  %425 = bitcast i16* %424 to <16 x i8>*
  %426 = load <16 x i8>, <16 x i8>* %425, align 1
  %427 = bitcast <2 x i64> %422 to <16 x i8>
  %428 = shufflevector <16 x i8> %427, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 4, i32 5, i32 8, i32 9, i32 12, i32 13, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %429 = shufflevector <16 x i8> %426, <16 x i8> undef, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 4, i32 5, i32 8, i32 9, i32 12, i32 13>
  %430 = shufflevector <16 x i8> %427, <16 x i8> undef, <16 x i32> <i32 2, i32 3, i32 6, i32 7, i32 10, i32 11, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %431 = shufflevector <16 x i8> %426, <16 x i8> undef, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 2, i32 3, i32 6, i32 7, i32 10, i32 11, i32 14, i32 15>
  %432 = shufflevector <16 x i8> %428, <16 x i8> %429, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %433 = bitcast <16 x i8> %432 to <2 x i64>
  %434 = shufflevector <16 x i8> %430, <16 x i8> %431, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %435 = bitcast <16 x i8> %434 to <2 x i64>
  %436 = trunc i32 %384 to i16
  %437 = add i16 %436, 2
  %438 = add i16 %436, 4
  %439 = add i16 %436, 6
  %440 = add i16 %436, 8
  %441 = add i16 %436, 10
  %442 = add i16 %436, 12
  %443 = add i16 %436, 14
  %444 = insertelement <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0>, i16 %436, i32 0
  %445 = insertelement <16 x i16> %444, i16 %437, i32 1
  %446 = insertelement <16 x i16> %445, i16 %438, i32 2
  %447 = insertelement <16 x i16> %446, i16 %439, i32 3
  %448 = insertelement <16 x i16> %447, i16 %440, i32 4
  %449 = insertelement <16 x i16> %448, i16 %441, i32 5
  %450 = insertelement <16 x i16> %449, i16 %442, i32 6
  %451 = insertelement <16 x i16> %450, i16 %443, i32 7
  %452 = trunc i32 %383 to i16
  %453 = insertelement <16 x i16> undef, i16 %452, i32 0
  %454 = shufflevector <16 x i16> %453, <16 x i16> undef, <16 x i32> zeroinitializer
  %455 = tail call <16 x i16> @llvm.x86.avx2.pslli.w(<16 x i16> %454, i32 %6) #8
  %456 = lshr <16 x i16> %455, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %457 = bitcast <16 x i16> %456 to <4 x i64>
  %458 = and <4 x i64> %457, <i64 8725857424048159, i64 8725857424048159, i64 8725857424048159, i64 8725857424048159>
  br label %485

459:                                              ; preds = %418
  %460 = getelementptr inbounds i16, i16* %420, i64 1
  %461 = bitcast i16* %460 to <2 x i64>*
  %462 = load <2 x i64>, <2 x i64>* %461, align 1
  %463 = trunc i32 %384 to i16
  %464 = add i16 %463, 1
  %465 = add i16 %463, 2
  %466 = add i16 %463, 3
  %467 = add i16 %463, 4
  %468 = add i16 %463, 5
  %469 = add i16 %463, 6
  %470 = add i16 %463, 7
  %471 = insertelement <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0>, i16 %463, i32 0
  %472 = insertelement <16 x i16> %471, i16 %464, i32 1
  %473 = insertelement <16 x i16> %472, i16 %465, i32 2
  %474 = insertelement <16 x i16> %473, i16 %466, i32 3
  %475 = insertelement <16 x i16> %474, i16 %467, i32 4
  %476 = insertelement <16 x i16> %475, i16 %468, i32 5
  %477 = insertelement <16 x i16> %476, i16 %469, i32 6
  %478 = insertelement <16 x i16> %477, i16 %470, i32 7
  %479 = trunc i32 %383 to i16
  %480 = insertelement <16 x i16> undef, i16 %479, i32 0
  %481 = and <16 x i16> %480, <i16 63, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef>
  %482 = lshr <16 x i16> %481, <i16 1, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0>
  %483 = shufflevector <16 x i16> %482, <16 x i16> undef, <16 x i32> zeroinitializer
  %484 = bitcast <16 x i16> %483 to <4 x i64>
  br label %485

485:                                              ; preds = %459, %423
  %486 = phi <16 x i16> [ %451, %423 ], [ %478, %459 ]
  %487 = phi <2 x i64> [ %433, %423 ], [ %422, %459 ]
  %488 = phi <2 x i64> [ %435, %423 ], [ %462, %459 ]
  %489 = phi <4 x i64> [ %458, %423 ], [ %484, %459 ]
  %490 = shufflevector <2 x i64> %487, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %491 = shufflevector <2 x i64> %488, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %492 = bitcast <4 x i64> %491 to <16 x i16>
  %493 = bitcast <4 x i64> %490 to <16 x i16>
  %494 = sub <16 x i16> %492, %493
  %495 = shl <16 x i16> %493, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %496 = or <16 x i16> %495, <i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16>
  %497 = bitcast <4 x i64> %489 to <16 x i16>
  %498 = mul <16 x i16> %494, %497
  %499 = add <16 x i16> %498, %496
  %500 = lshr <16 x i16> %499, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %501 = icmp sgt <16 x i16> %376, %486
  %502 = select <16 x i1> %501, <16 x i16> %500, <16 x i16> %371
  %503 = bitcast <16 x i16> %502 to <4 x i64>
  %504 = shufflevector <4 x i64> %503, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %505 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %12, i64 0, i64 %382
  store <2 x i64> %504, <2 x i64>* %505, align 16
  %506 = add nsw i32 %383, %7
  %507 = add nuw nsw i64 %382, 1
  %508 = icmp eq i64 %507, %380
  br i1 %508, label %662, label %381

509:                                              ; preds = %361
  %510 = insertelement <8 x i32> undef, i32 %366, i32 0
  %511 = shufflevector <8 x i32> %510, <8 x i32> undef, <8 x i32> zeroinitializer
  %512 = icmp sgt i32 %3, 0
  br i1 %512, label %513, label %714

513:                                              ; preds = %509
  %514 = icmp eq i32 %6, 0
  %515 = bitcast <16 x i16> %371 to <32 x i8>
  %516 = zext i32 %3 to i64
  br label %517

517:                                              ; preds = %627, %513
  %518 = phi i64 [ 0, %513 ], [ %660, %627 ]
  %519 = phi i32 [ %7, %513 ], [ %659, %627 ]
  %520 = ashr i32 %519, %364
  %521 = icmp slt i32 %520, %366
  br i1 %521, label %554, label %522

522:                                              ; preds = %517
  %523 = trunc i64 %518 to i32
  %524 = icmp slt i32 %523, %3
  br i1 %524, label %525, label %662

525:                                              ; preds = %522
  %526 = shufflevector <4 x i64> %372, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %527 = and i64 %518, 4294967295
  %528 = sub nsw i64 %516, %518
  %529 = xor i64 %527, -1
  %530 = add nsw i64 %529, %516
  %531 = and i64 %528, 3
  %532 = icmp eq i64 %531, 0
  br i1 %532, label %540, label %533

533:                                              ; preds = %525, %533
  %534 = phi i64 [ %537, %533 ], [ %527, %525 ]
  %535 = phi i64 [ %538, %533 ], [ %531, %525 ]
  %536 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %12, i64 0, i64 %534
  store <2 x i64> %526, <2 x i64>* %536, align 16
  %537 = add nuw nsw i64 %534, 1
  %538 = add i64 %535, -1
  %539 = icmp eq i64 %538, 0
  br i1 %539, label %540, label %533, !llvm.loop !7

540:                                              ; preds = %533, %525
  %541 = phi i64 [ %527, %525 ], [ %537, %533 ]
  %542 = icmp ult i64 %530, 3
  br i1 %542, label %662, label %543

543:                                              ; preds = %540, %543
  %544 = phi i64 [ %552, %543 ], [ %541, %540 ]
  %545 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %12, i64 0, i64 %544
  store <2 x i64> %526, <2 x i64>* %545, align 16
  %546 = add nuw nsw i64 %544, 1
  %547 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %12, i64 0, i64 %546
  store <2 x i64> %526, <2 x i64>* %547, align 16
  %548 = add nuw nsw i64 %544, 2
  %549 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %12, i64 0, i64 %548
  store <2 x i64> %526, <2 x i64>* %549, align 16
  %550 = add nuw nsw i64 %544, 3
  %551 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %12, i64 0, i64 %550
  store <2 x i64> %526, <2 x i64>* %551, align 16
  %552 = add nuw nsw i64 %544, 4
  %553 = icmp eq i64 %552, %516
  br i1 %553, label %662, label %543

554:                                              ; preds = %517
  %555 = sext i32 %520 to i64
  %556 = getelementptr inbounds i16, i16* %4, i64 %555
  %557 = bitcast i16* %556 to <8 x i16>*
  %558 = load <8 x i16>, <8 x i16>* %557, align 1
  %559 = zext <8 x i16> %558 to <8 x i32>
  br i1 %514, label %597, label %560

560:                                              ; preds = %554
  %561 = shufflevector <8 x i32> %559, <8 x i32> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 1, i32 3, i32 5, i32 7>
  %562 = bitcast <8 x i32> %561 to <4 x i64>
  %563 = shufflevector <4 x i64> %562, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %564 = getelementptr inbounds i16, i16* %556, i64 8
  %565 = bitcast i16* %564 to <8 x i16>*
  %566 = load <8 x i16>, <8 x i16>* %565, align 1
  %567 = zext <8 x i16> %566 to <8 x i32>
  %568 = shufflevector <8 x i32> %567, <8 x i32> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 1, i32 3, i32 5, i32 7>
  %569 = bitcast <8 x i32> %568 to <4 x i64>
  %570 = shufflevector <4 x i64> %569, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %571 = shufflevector <4 x i64> %562, <4 x i64> %569, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %572 = shufflevector <2 x i64> %563, <2 x i64> %570, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %573 = insertelement <4 x i32> undef, i32 %520, i32 0
  %574 = shufflevector <4 x i32> %573, <4 x i32> undef, <4 x i32> zeroinitializer
  %575 = add nsw <4 x i32> %574, <i32 2, i32 4, i32 6, i32 8>
  %576 = add nsw i32 %520, 10
  %577 = add nsw i32 %520, 12
  %578 = add nsw i32 %520, 14
  %579 = insertelement <8 x i32> undef, i32 %520, i32 0
  %580 = extractelement <4 x i32> %575, i32 0
  %581 = insertelement <8 x i32> %579, i32 %580, i32 1
  %582 = extractelement <4 x i32> %575, i32 1
  %583 = insertelement <8 x i32> %581, i32 %582, i32 2
  %584 = extractelement <4 x i32> %575, i32 2
  %585 = insertelement <8 x i32> %583, i32 %584, i32 3
  %586 = extractelement <4 x i32> %575, i32 3
  %587 = insertelement <8 x i32> %585, i32 %586, i32 4
  %588 = insertelement <8 x i32> %587, i32 %576, i32 5
  %589 = insertelement <8 x i32> %588, i32 %577, i32 6
  %590 = insertelement <8 x i32> %589, i32 %578, i32 7
  %591 = insertelement <8 x i32> undef, i32 %519, i32 0
  %592 = shufflevector <8 x i32> %591, <8 x i32> undef, <8 x i32> zeroinitializer
  %593 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %592, i32 %6) #8
  %594 = lshr <8 x i32> %593, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %595 = bitcast <8 x i32> %594 to <4 x i64>
  %596 = and <4 x i64> %595, <i64 133143986207, i64 133143986207, i64 133143986207, i64 133143986207>
  br label %627

597:                                              ; preds = %554
  %598 = getelementptr inbounds i16, i16* %556, i64 1
  %599 = bitcast i16* %598 to <8 x i16>*
  %600 = load <8 x i16>, <8 x i16>* %599, align 1
  %601 = zext <8 x i16> %600 to <8 x i32>
  %602 = bitcast <8 x i32> %601 to <4 x i64>
  %603 = bitcast <8 x i32> %559 to <4 x i64>
  %604 = insertelement <4 x i32> undef, i32 %520, i32 0
  %605 = shufflevector <4 x i32> %604, <4 x i32> undef, <4 x i32> zeroinitializer
  %606 = add nsw <4 x i32> %605, <i32 1, i32 2, i32 3, i32 4>
  %607 = add nsw i32 %520, 5
  %608 = add nsw i32 %520, 6
  %609 = add nsw i32 %520, 7
  %610 = insertelement <8 x i32> undef, i32 %520, i32 0
  %611 = extractelement <4 x i32> %606, i32 0
  %612 = insertelement <8 x i32> %610, i32 %611, i32 1
  %613 = extractelement <4 x i32> %606, i32 1
  %614 = insertelement <8 x i32> %612, i32 %613, i32 2
  %615 = extractelement <4 x i32> %606, i32 2
  %616 = insertelement <8 x i32> %614, i32 %615, i32 3
  %617 = extractelement <4 x i32> %606, i32 3
  %618 = insertelement <8 x i32> %616, i32 %617, i32 4
  %619 = insertelement <8 x i32> %618, i32 %607, i32 5
  %620 = insertelement <8 x i32> %619, i32 %608, i32 6
  %621 = insertelement <8 x i32> %620, i32 %609, i32 7
  %622 = insertelement <8 x i32> undef, i32 %519, i32 0
  %623 = and <8 x i32> %622, <i32 63, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %624 = lshr <8 x i32> %623, <i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>
  %625 = shufflevector <8 x i32> %624, <8 x i32> undef, <8 x i32> zeroinitializer
  %626 = bitcast <8 x i32> %625 to <4 x i64>
  br label %627

627:                                              ; preds = %597, %560
  %628 = phi <4 x i64> [ %571, %560 ], [ %603, %597 ]
  %629 = phi <4 x i64> [ %572, %560 ], [ %602, %597 ]
  %630 = phi <8 x i32> [ %590, %560 ], [ %621, %597 ]
  %631 = phi <4 x i64> [ %596, %560 ], [ %626, %597 ]
  %632 = bitcast <4 x i64> %629 to <8 x i32>
  %633 = bitcast <4 x i64> %628 to <8 x i32>
  %634 = sub <8 x i32> %632, %633
  %635 = shl <8 x i32> %633, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %636 = or <8 x i32> %635, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %637 = bitcast <4 x i64> %631 to <8 x i32>
  %638 = mul <8 x i32> %634, %637
  %639 = add <8 x i32> %638, %636
  %640 = lshr <8 x i32> %639, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %641 = bitcast <8 x i32> %640 to <4 x i64>
  %642 = shufflevector <4 x i64> %641, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %643 = shufflevector <2 x i64> %642, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %644 = bitcast <4 x i64> %643 to <8 x i32>
  %645 = tail call <16 x i16> @llvm.x86.avx2.packusdw(<8 x i32> %640, <8 x i32> %644) #8
  %646 = icmp sgt <8 x i32> %511, %630
  %647 = sext <8 x i1> %646 to <8 x i32>
  %648 = bitcast <8 x i32> %647 to <4 x i64>
  %649 = shufflevector <4 x i64> %648, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %650 = shufflevector <2 x i64> %649, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %651 = bitcast <4 x i64> %650 to <8 x i32>
  %652 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %647, <8 x i32> %651) #8
  %653 = bitcast <16 x i16> %645 to <32 x i8>
  %654 = bitcast <16 x i16> %652 to <32 x i8>
  %655 = tail call <32 x i8> @llvm.x86.avx2.pblendvb(<32 x i8> %515, <32 x i8> %653, <32 x i8> %654) #8
  %656 = bitcast <32 x i8> %655 to <4 x i64>
  %657 = shufflevector <4 x i64> %656, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %658 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %12, i64 0, i64 %518
  store <2 x i64> %657, <2 x i64>* %658, align 16
  %659 = add nsw i32 %519, %7
  %660 = add nuw nsw i64 %518, 1
  %661 = icmp eq i64 %660, %516
  br i1 %661, label %662, label %517

662:                                              ; preds = %627, %540, %543, %485, %404, %407, %522, %386
  %663 = icmp sgt i32 %3, 0
  br i1 %663, label %664, label %714

664:                                              ; preds = %662
  %665 = zext i32 %3 to i64
  %666 = add nsw i64 %665, -1
  %667 = and i64 %665, 3
  %668 = icmp ult i64 %666, 3
  br i1 %668, label %700, label %669

669:                                              ; preds = %664
  %670 = sub nsw i64 %665, %667
  br label %671

671:                                              ; preds = %671, %669
  %672 = phi i64 [ 0, %669 ], [ %697, %671 ]
  %673 = phi i64 [ %670, %669 ], [ %698, %671 ]
  %674 = mul nsw i64 %672, %1
  %675 = getelementptr inbounds i16, i16* %0, i64 %674
  %676 = bitcast i16* %675 to <2 x i64>*
  %677 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %12, i64 0, i64 %672
  %678 = load <2 x i64>, <2 x i64>* %677, align 16
  store <2 x i64> %678, <2 x i64>* %676, align 1
  %679 = or i64 %672, 1
  %680 = mul nsw i64 %679, %1
  %681 = getelementptr inbounds i16, i16* %0, i64 %680
  %682 = bitcast i16* %681 to <2 x i64>*
  %683 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %12, i64 0, i64 %679
  %684 = load <2 x i64>, <2 x i64>* %683, align 16
  store <2 x i64> %684, <2 x i64>* %682, align 1
  %685 = or i64 %672, 2
  %686 = mul nsw i64 %685, %1
  %687 = getelementptr inbounds i16, i16* %0, i64 %686
  %688 = bitcast i16* %687 to <2 x i64>*
  %689 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %12, i64 0, i64 %685
  %690 = load <2 x i64>, <2 x i64>* %689, align 16
  store <2 x i64> %690, <2 x i64>* %688, align 1
  %691 = or i64 %672, 3
  %692 = mul nsw i64 %691, %1
  %693 = getelementptr inbounds i16, i16* %0, i64 %692
  %694 = bitcast i16* %693 to <2 x i64>*
  %695 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %12, i64 0, i64 %691
  %696 = load <2 x i64>, <2 x i64>* %695, align 16
  store <2 x i64> %696, <2 x i64>* %694, align 1
  %697 = add nuw nsw i64 %672, 4
  %698 = add i64 %673, -4
  %699 = icmp eq i64 %698, 0
  br i1 %699, label %700, label %671

700:                                              ; preds = %671, %664
  %701 = phi i64 [ 0, %664 ], [ %697, %671 ]
  %702 = icmp eq i64 %667, 0
  br i1 %702, label %714, label %703

703:                                              ; preds = %700, %703
  %704 = phi i64 [ %711, %703 ], [ %701, %700 ]
  %705 = phi i64 [ %712, %703 ], [ %667, %700 ]
  %706 = mul nsw i64 %704, %1
  %707 = getelementptr inbounds i16, i16* %0, i64 %706
  %708 = bitcast i16* %707 to <2 x i64>*
  %709 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %12, i64 0, i64 %704
  %710 = load <2 x i64>, <2 x i64>* %709, align 16
  store <2 x i64> %710, <2 x i64>* %708, align 1
  %711 = add nuw nsw i64 %704, 1
  %712 = add i64 %705, -1
  %713 = icmp eq i64 %712, 0
  br i1 %713, label %714, label %703, !llvm.loop !8

714:                                              ; preds = %700, %703, %373, %509, %662
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %362) #8
  br label %1198

715:                                              ; preds = %10
  %716 = bitcast [64 x <4 x i64>]* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2048, i8* nonnull %716) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %716, i8 -86, i64 2048, i1 false) #8
  %717 = icmp slt i32 %9, 12
  %718 = add nsw i32 %3, 15
  %719 = sext i32 %718 to i64
  %720 = getelementptr inbounds i16, i16* %4, i64 %719
  %721 = load i16, i16* %720, align 2
  %722 = insertelement <16 x i16> undef, i16 %721, i32 0
  %723 = shufflevector <16 x i16> %722, <16 x i16> undef, <16 x i32> zeroinitializer
  %724 = trunc i32 %718 to i16
  %725 = insertelement <16 x i16> undef, i16 %724, i32 0
  %726 = shufflevector <16 x i16> %725, <16 x i16> undef, <16 x i32> zeroinitializer
  %727 = icmp sgt i32 %3, 0
  br i1 %717, label %728, label %842

728:                                              ; preds = %715
  br i1 %727, label %729, label %1041

729:                                              ; preds = %728
  %730 = zext i32 %3 to i64
  br label %731

731:                                              ; preds = %784, %729
  %732 = phi i64 [ 0, %729 ], [ %840, %784 ]
  %733 = phi i32 [ %7, %729 ], [ %839, %784 ]
  %734 = ashr i32 %733, 6
  %735 = icmp slt i32 %734, %718
  br i1 %735, label %784, label %736

736:                                              ; preds = %731
  %737 = trunc i64 %732 to i32
  %738 = icmp slt i32 %737, %3
  br i1 %738, label %739, label %990

739:                                              ; preds = %736
  %740 = and i64 %732, 4294967295
  %741 = sub nsw i64 %730, %732
  %742 = xor i64 %740, -1
  %743 = add nsw i64 %742, %730
  %744 = and i64 %741, 7
  %745 = icmp eq i64 %744, 0
  br i1 %745, label %754, label %746

746:                                              ; preds = %739, %746
  %747 = phi i64 [ %751, %746 ], [ %740, %739 ]
  %748 = phi i64 [ %752, %746 ], [ %744, %739 ]
  %749 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %11, i64 0, i64 %747
  %750 = bitcast <4 x i64>* %749 to <16 x i16>*
  store <16 x i16> %723, <16 x i16>* %750, align 32
  %751 = add nuw nsw i64 %747, 1
  %752 = add i64 %748, -1
  %753 = icmp eq i64 %752, 0
  br i1 %753, label %754, label %746, !llvm.loop !9

754:                                              ; preds = %746, %739
  %755 = phi i64 [ %740, %739 ], [ %751, %746 ]
  %756 = icmp ult i64 %743, 7
  br i1 %756, label %990, label %757

757:                                              ; preds = %754, %757
  %758 = phi i64 [ %782, %757 ], [ %755, %754 ]
  %759 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %11, i64 0, i64 %758
  %760 = bitcast <4 x i64>* %759 to <16 x i16>*
  store <16 x i16> %723, <16 x i16>* %760, align 32
  %761 = add nuw nsw i64 %758, 1
  %762 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %11, i64 0, i64 %761
  %763 = bitcast <4 x i64>* %762 to <16 x i16>*
  store <16 x i16> %723, <16 x i16>* %763, align 32
  %764 = add nuw nsw i64 %758, 2
  %765 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %11, i64 0, i64 %764
  %766 = bitcast <4 x i64>* %765 to <16 x i16>*
  store <16 x i16> %723, <16 x i16>* %766, align 32
  %767 = add nuw nsw i64 %758, 3
  %768 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %11, i64 0, i64 %767
  %769 = bitcast <4 x i64>* %768 to <16 x i16>*
  store <16 x i16> %723, <16 x i16>* %769, align 32
  %770 = add nuw nsw i64 %758, 4
  %771 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %11, i64 0, i64 %770
  %772 = bitcast <4 x i64>* %771 to <16 x i16>*
  store <16 x i16> %723, <16 x i16>* %772, align 32
  %773 = add nuw nsw i64 %758, 5
  %774 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %11, i64 0, i64 %773
  %775 = bitcast <4 x i64>* %774 to <16 x i16>*
  store <16 x i16> %723, <16 x i16>* %775, align 32
  %776 = add nuw nsw i64 %758, 6
  %777 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %11, i64 0, i64 %776
  %778 = bitcast <4 x i64>* %777 to <16 x i16>*
  store <16 x i16> %723, <16 x i16>* %778, align 32
  %779 = add nuw nsw i64 %758, 7
  %780 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %11, i64 0, i64 %779
  %781 = bitcast <4 x i64>* %780 to <16 x i16>*
  store <16 x i16> %723, <16 x i16>* %781, align 32
  %782 = add nuw nsw i64 %758, 8
  %783 = icmp eq i64 %782, %730
  br i1 %783, label %990, label %757

784:                                              ; preds = %731
  %785 = trunc i32 %733 to i16
  %786 = insertelement <16 x i16> undef, i16 %785, i32 0
  %787 = and <16 x i16> %786, <i16 63, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef>
  %788 = lshr <16 x i16> %787, <i16 1, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0>
  %789 = shufflevector <16 x i16> %788, <16 x i16> undef, <16 x i32> zeroinitializer
  %790 = sext i32 %734 to i64
  %791 = getelementptr inbounds i16, i16* %4, i64 %790
  %792 = bitcast i16* %791 to <16 x i16>*
  %793 = load <16 x i16>, <16 x i16>* %792, align 1
  %794 = getelementptr inbounds i16, i16* %791, i64 1
  %795 = bitcast i16* %794 to <16 x i16>*
  %796 = load <16 x i16>, <16 x i16>* %795, align 1
  %797 = sub <16 x i16> %796, %793
  %798 = shl <16 x i16> %793, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %799 = or <16 x i16> %798, <i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16>
  %800 = mul <16 x i16> %797, %789
  %801 = add <16 x i16> %800, %799
  %802 = lshr <16 x i16> %801, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %803 = trunc i32 %734 to i16
  %804 = add i16 %803, 1
  %805 = add i16 %803, 2
  %806 = add i16 %803, 3
  %807 = add i16 %803, 4
  %808 = add i16 %803, 5
  %809 = add i16 %803, 6
  %810 = add i16 %803, 7
  %811 = add i16 %803, 8
  %812 = add i16 %803, 9
  %813 = add i16 %803, 10
  %814 = add i16 %803, 11
  %815 = add i16 %803, 12
  %816 = add i16 %803, 13
  %817 = add i16 %803, 14
  %818 = add i16 %803, 15
  %819 = insertelement <16 x i16> undef, i16 %803, i32 0
  %820 = insertelement <16 x i16> %819, i16 %804, i32 1
  %821 = insertelement <16 x i16> %820, i16 %805, i32 2
  %822 = insertelement <16 x i16> %821, i16 %806, i32 3
  %823 = insertelement <16 x i16> %822, i16 %807, i32 4
  %824 = insertelement <16 x i16> %823, i16 %808, i32 5
  %825 = insertelement <16 x i16> %824, i16 %809, i32 6
  %826 = insertelement <16 x i16> %825, i16 %810, i32 7
  %827 = insertelement <16 x i16> %826, i16 %811, i32 8
  %828 = insertelement <16 x i16> %827, i16 %812, i32 9
  %829 = insertelement <16 x i16> %828, i16 %813, i32 10
  %830 = insertelement <16 x i16> %829, i16 %814, i32 11
  %831 = insertelement <16 x i16> %830, i16 %815, i32 12
  %832 = insertelement <16 x i16> %831, i16 %816, i32 13
  %833 = insertelement <16 x i16> %832, i16 %817, i32 14
  %834 = insertelement <16 x i16> %833, i16 %818, i32 15
  %835 = icmp sgt <16 x i16> %726, %834
  %836 = select <16 x i1> %835, <16 x i16> %802, <16 x i16> %723
  %837 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %11, i64 0, i64 %732
  %838 = bitcast <4 x i64>* %837 to <16 x i16>*
  store <16 x i16> %836, <16 x i16>* %838, align 32
  %839 = add nsw i32 %733, %7
  %840 = add nuw nsw i64 %732, 1
  %841 = icmp eq i64 %840, %730
  br i1 %841, label %990, label %731

842:                                              ; preds = %715
  br i1 %727, label %843, label %1041

843:                                              ; preds = %842
  %844 = zext i32 %3 to i64
  br label %845

845:                                              ; preds = %946, %843
  %846 = phi i64 [ 0, %843 ], [ %988, %946 ]
  %847 = phi i32 [ %7, %843 ], [ %987, %946 ]
  %848 = ashr i32 %847, 6
  %849 = icmp sgt i32 %718, %848
  br i1 %849, label %898, label %850

850:                                              ; preds = %845
  %851 = trunc i64 %846 to i32
  %852 = icmp slt i32 %851, %3
  br i1 %852, label %853, label %990

853:                                              ; preds = %850
  %854 = and i64 %846, 4294967295
  %855 = sub nsw i64 %844, %846
  %856 = xor i64 %854, -1
  %857 = add nsw i64 %856, %844
  %858 = and i64 %855, 7
  %859 = icmp eq i64 %858, 0
  br i1 %859, label %868, label %860

860:                                              ; preds = %853, %860
  %861 = phi i64 [ %865, %860 ], [ %854, %853 ]
  %862 = phi i64 [ %866, %860 ], [ %858, %853 ]
  %863 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %11, i64 0, i64 %861
  %864 = bitcast <4 x i64>* %863 to <16 x i16>*
  store <16 x i16> %723, <16 x i16>* %864, align 32
  %865 = add nuw nsw i64 %861, 1
  %866 = add i64 %862, -1
  %867 = icmp eq i64 %866, 0
  br i1 %867, label %868, label %860, !llvm.loop !10

868:                                              ; preds = %860, %853
  %869 = phi i64 [ %854, %853 ], [ %865, %860 ]
  %870 = icmp ult i64 %857, 7
  br i1 %870, label %990, label %871

871:                                              ; preds = %868, %871
  %872 = phi i64 [ %896, %871 ], [ %869, %868 ]
  %873 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %11, i64 0, i64 %872
  %874 = bitcast <4 x i64>* %873 to <16 x i16>*
  store <16 x i16> %723, <16 x i16>* %874, align 32
  %875 = add nuw nsw i64 %872, 1
  %876 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %11, i64 0, i64 %875
  %877 = bitcast <4 x i64>* %876 to <16 x i16>*
  store <16 x i16> %723, <16 x i16>* %877, align 32
  %878 = add nuw nsw i64 %872, 2
  %879 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %11, i64 0, i64 %878
  %880 = bitcast <4 x i64>* %879 to <16 x i16>*
  store <16 x i16> %723, <16 x i16>* %880, align 32
  %881 = add nuw nsw i64 %872, 3
  %882 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %11, i64 0, i64 %881
  %883 = bitcast <4 x i64>* %882 to <16 x i16>*
  store <16 x i16> %723, <16 x i16>* %883, align 32
  %884 = add nuw nsw i64 %872, 4
  %885 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %11, i64 0, i64 %884
  %886 = bitcast <4 x i64>* %885 to <16 x i16>*
  store <16 x i16> %723, <16 x i16>* %886, align 32
  %887 = add nuw nsw i64 %872, 5
  %888 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %11, i64 0, i64 %887
  %889 = bitcast <4 x i64>* %888 to <16 x i16>*
  store <16 x i16> %723, <16 x i16>* %889, align 32
  %890 = add nuw nsw i64 %872, 6
  %891 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %11, i64 0, i64 %890
  %892 = bitcast <4 x i64>* %891 to <16 x i16>*
  store <16 x i16> %723, <16 x i16>* %892, align 32
  %893 = add nuw nsw i64 %872, 7
  %894 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %11, i64 0, i64 %893
  %895 = bitcast <4 x i64>* %894 to <16 x i16>*
  store <16 x i16> %723, <16 x i16>* %895, align 32
  %896 = add nuw nsw i64 %872, 8
  %897 = icmp eq i64 %896, %844
  br i1 %897, label %990, label %871

898:                                              ; preds = %845
  %899 = insertelement <8 x i32> undef, i32 %847, i32 0
  %900 = and <8 x i32> %899, <i32 63, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %901 = lshr <8 x i32> %900, <i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>
  %902 = shufflevector <8 x i32> %901, <8 x i32> undef, <8 x i32> zeroinitializer
  %903 = sext i32 %848 to i64
  %904 = getelementptr inbounds i16, i16* %4, i64 %903
  %905 = bitcast i16* %904 to <8 x i16>*
  %906 = load <8 x i16>, <8 x i16>* %905, align 1
  %907 = zext <8 x i16> %906 to <8 x i32>
  %908 = getelementptr inbounds i16, i16* %904, i64 1
  %909 = bitcast i16* %908 to <8 x i16>*
  %910 = load <8 x i16>, <8 x i16>* %909, align 1
  %911 = zext <8 x i16> %910 to <8 x i32>
  %912 = sub nsw <8 x i32> %911, %907
  %913 = shl nuw nsw <8 x i32> %907, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %914 = or <8 x i32> %913, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %915 = mul <8 x i32> %912, %902
  %916 = add <8 x i32> %915, %914
  %917 = lshr <8 x i32> %916, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %918 = bitcast <8 x i32> %917 to <4 x i64>
  %919 = shufflevector <4 x i64> %918, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %920 = shufflevector <2 x i64> %919, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %921 = bitcast <4 x i64> %920 to <8 x i32>
  %922 = tail call <16 x i16> @llvm.x86.avx2.packusdw(<8 x i32> %917, <8 x i32> %921) #8
  %923 = bitcast <16 x i16> %922 to <4 x i64>
  %924 = sub nsw i32 %718, %848
  %925 = icmp sgt i32 %924, 8
  br i1 %925, label %926, label %946

926:                                              ; preds = %898
  %927 = getelementptr inbounds i16, i16* %904, i64 8
  %928 = bitcast i16* %927 to <8 x i16>*
  %929 = load <8 x i16>, <8 x i16>* %928, align 1
  %930 = zext <8 x i16> %929 to <8 x i32>
  %931 = getelementptr inbounds i16, i16* %904, i64 9
  %932 = bitcast i16* %931 to <8 x i16>*
  %933 = load <8 x i16>, <8 x i16>* %932, align 1
  %934 = zext <8 x i16> %933 to <8 x i32>
  %935 = sub nsw <8 x i32> %934, %930
  %936 = shl nuw nsw <8 x i32> %930, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %937 = or <8 x i32> %936, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %938 = mul <8 x i32> %935, %902
  %939 = add <8 x i32> %938, %937
  %940 = lshr <8 x i32> %939, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %941 = bitcast <8 x i32> %940 to <4 x i64>
  %942 = shufflevector <4 x i64> %941, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %943 = shufflevector <2 x i64> %942, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %944 = bitcast <4 x i64> %943 to <8 x i32>
  %945 = tail call <16 x i16> @llvm.x86.avx2.packusdw(<8 x i32> %940, <8 x i32> %944) #8
  br label %946

946:                                              ; preds = %926, %898
  %947 = phi <16 x i16> [ %945, %926 ], [ %723, %898 ]
  %948 = bitcast <16 x i16> %947 to <4 x i64>
  %949 = shufflevector <4 x i64> %923, <4 x i64> %948, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %950 = trunc i32 %848 to i16
  %951 = add i16 %950, 1
  %952 = add i16 %950, 2
  %953 = add i16 %950, 3
  %954 = add i16 %950, 4
  %955 = add i16 %950, 5
  %956 = add i16 %950, 6
  %957 = add i16 %950, 7
  %958 = add i16 %950, 8
  %959 = add i16 %950, 9
  %960 = add i16 %950, 10
  %961 = add i16 %950, 11
  %962 = add i16 %950, 12
  %963 = add i16 %950, 13
  %964 = add i16 %950, 14
  %965 = add i16 %950, 15
  %966 = insertelement <16 x i16> undef, i16 %950, i32 0
  %967 = insertelement <16 x i16> %966, i16 %951, i32 1
  %968 = insertelement <16 x i16> %967, i16 %952, i32 2
  %969 = insertelement <16 x i16> %968, i16 %953, i32 3
  %970 = insertelement <16 x i16> %969, i16 %954, i32 4
  %971 = insertelement <16 x i16> %970, i16 %955, i32 5
  %972 = insertelement <16 x i16> %971, i16 %956, i32 6
  %973 = insertelement <16 x i16> %972, i16 %957, i32 7
  %974 = insertelement <16 x i16> %973, i16 %958, i32 8
  %975 = insertelement <16 x i16> %974, i16 %959, i32 9
  %976 = insertelement <16 x i16> %975, i16 %960, i32 10
  %977 = insertelement <16 x i16> %976, i16 %961, i32 11
  %978 = insertelement <16 x i16> %977, i16 %962, i32 12
  %979 = insertelement <16 x i16> %978, i16 %963, i32 13
  %980 = insertelement <16 x i16> %979, i16 %964, i32 14
  %981 = insertelement <16 x i16> %980, i16 %965, i32 15
  %982 = icmp sgt <16 x i16> %726, %981
  %983 = bitcast <4 x i64> %949 to <16 x i16>
  %984 = select <16 x i1> %982, <16 x i16> %983, <16 x i16> %723
  %985 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %11, i64 0, i64 %846
  %986 = bitcast <4 x i64>* %985 to <16 x i16>*
  store <16 x i16> %984, <16 x i16>* %986, align 32
  %987 = add nsw i32 %847, %7
  %988 = add nuw nsw i64 %846, 1
  %989 = icmp eq i64 %988, %844
  br i1 %989, label %990, label %845

990:                                              ; preds = %946, %868, %871, %784, %754, %757, %850, %736
  br i1 %727, label %991, label %1041

991:                                              ; preds = %990
  %992 = zext i32 %3 to i64
  %993 = add nsw i64 %992, -1
  %994 = and i64 %992, 3
  %995 = icmp ult i64 %993, 3
  br i1 %995, label %1027, label %996

996:                                              ; preds = %991
  %997 = sub nsw i64 %992, %994
  br label %998

998:                                              ; preds = %998, %996
  %999 = phi i64 [ 0, %996 ], [ %1024, %998 ]
  %1000 = phi i64 [ %997, %996 ], [ %1025, %998 ]
  %1001 = mul nsw i64 %999, %1
  %1002 = getelementptr inbounds i16, i16* %0, i64 %1001
  %1003 = bitcast i16* %1002 to <4 x i64>*
  %1004 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %11, i64 0, i64 %999
  %1005 = load <4 x i64>, <4 x i64>* %1004, align 32
  store <4 x i64> %1005, <4 x i64>* %1003, align 1
  %1006 = or i64 %999, 1
  %1007 = mul nsw i64 %1006, %1
  %1008 = getelementptr inbounds i16, i16* %0, i64 %1007
  %1009 = bitcast i16* %1008 to <4 x i64>*
  %1010 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %11, i64 0, i64 %1006
  %1011 = load <4 x i64>, <4 x i64>* %1010, align 32
  store <4 x i64> %1011, <4 x i64>* %1009, align 1
  %1012 = or i64 %999, 2
  %1013 = mul nsw i64 %1012, %1
  %1014 = getelementptr inbounds i16, i16* %0, i64 %1013
  %1015 = bitcast i16* %1014 to <4 x i64>*
  %1016 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %11, i64 0, i64 %1012
  %1017 = load <4 x i64>, <4 x i64>* %1016, align 32
  store <4 x i64> %1017, <4 x i64>* %1015, align 1
  %1018 = or i64 %999, 3
  %1019 = mul nsw i64 %1018, %1
  %1020 = getelementptr inbounds i16, i16* %0, i64 %1019
  %1021 = bitcast i16* %1020 to <4 x i64>*
  %1022 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %11, i64 0, i64 %1018
  %1023 = load <4 x i64>, <4 x i64>* %1022, align 32
  store <4 x i64> %1023, <4 x i64>* %1021, align 1
  %1024 = add nuw nsw i64 %999, 4
  %1025 = add i64 %1000, -4
  %1026 = icmp eq i64 %1025, 0
  br i1 %1026, label %1027, label %998

1027:                                             ; preds = %998, %991
  %1028 = phi i64 [ 0, %991 ], [ %1024, %998 ]
  %1029 = icmp eq i64 %994, 0
  br i1 %1029, label %1041, label %1030

1030:                                             ; preds = %1027, %1030
  %1031 = phi i64 [ %1038, %1030 ], [ %1028, %1027 ]
  %1032 = phi i64 [ %1039, %1030 ], [ %994, %1027 ]
  %1033 = mul nsw i64 %1031, %1
  %1034 = getelementptr inbounds i16, i16* %0, i64 %1033
  %1035 = bitcast i16* %1034 to <4 x i64>*
  %1036 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %11, i64 0, i64 %1031
  %1037 = load <4 x i64>, <4 x i64>* %1036, align 32
  store <4 x i64> %1037, <4 x i64>* %1035, align 1
  %1038 = add nuw nsw i64 %1031, 1
  %1039 = add i64 %1032, -1
  %1040 = icmp eq i64 %1039, 0
  br i1 %1040, label %1041, label %1030, !llvm.loop !11

1041:                                             ; preds = %1027, %1030, %728, %842, %990
  call void @llvm.lifetime.end.p0i8(i64 2048, i8* nonnull %716) #8
  br label %1198

1042:                                             ; preds = %10
  tail call fastcc void @highbd_dr_prediction_z1_32xN_avx2(i32 %3, i16* %0, i64 %1, i16* %4, i32 %7, i32 %9)
  br label %1198

1043:                                             ; preds = %10
  %1044 = icmp slt i32 %9, 12
  br i1 %1044, label %1045, label %1197

1045:                                             ; preds = %1043
  %1046 = add nsw i32 %3, 63
  %1047 = sext i32 %1046 to i64
  %1048 = getelementptr inbounds i16, i16* %4, i64 %1047
  %1049 = load i16, i16* %1048, align 2
  %1050 = insertelement <16 x i16> undef, i16 %1049, i32 0
  %1051 = shufflevector <16 x i16> %1050, <16 x i16> undef, <16 x i32> zeroinitializer
  %1052 = trunc i32 %1046 to i16
  %1053 = insertelement <16 x i16> undef, i16 %1052, i32 0
  %1054 = shufflevector <16 x i16> %1053, <16 x i16> undef, <16 x i32> zeroinitializer
  %1055 = icmp sgt i32 %3, 0
  br i1 %1055, label %1056, label %1198

1056:                                             ; preds = %1045, %1192
  %1057 = phi i16* [ %1195, %1192 ], [ %0, %1045 ]
  %1058 = phi i32 [ %1194, %1192 ], [ 0, %1045 ]
  %1059 = phi i32 [ %1193, %1192 ], [ %7, %1045 ]
  %1060 = ashr i32 %1059, 6
  %1061 = icmp slt i32 %1060, %1046
  br i1 %1061, label %1126, label %1062

1062:                                             ; preds = %1056
  %1063 = icmp slt i32 %1058, %3
  br i1 %1063, label %1064, label %1198

1064:                                             ; preds = %1062
  %1065 = sub i32 %3, %1058
  %1066 = xor i32 %1058, -1
  %1067 = add i32 %1066, %3
  %1068 = and i32 %1065, 3
  %1069 = icmp eq i32 %1068, 0
  br i1 %1069, label %1085, label %1070

1070:                                             ; preds = %1064, %1070
  %1071 = phi i16* [ %1081, %1070 ], [ %1057, %1064 ]
  %1072 = phi i32 [ %1082, %1070 ], [ %1058, %1064 ]
  %1073 = phi i32 [ %1083, %1070 ], [ %1068, %1064 ]
  %1074 = bitcast i16* %1071 to <16 x i16>*
  store <16 x i16> %1051, <16 x i16>* %1074, align 1
  %1075 = getelementptr inbounds i16, i16* %1071, i64 16
  %1076 = bitcast i16* %1075 to <16 x i16>*
  store <16 x i16> %1051, <16 x i16>* %1076, align 1
  %1077 = getelementptr inbounds i16, i16* %1071, i64 32
  %1078 = bitcast i16* %1077 to <16 x i16>*
  store <16 x i16> %1051, <16 x i16>* %1078, align 1
  %1079 = getelementptr inbounds i16, i16* %1071, i64 48
  %1080 = bitcast i16* %1079 to <16 x i16>*
  store <16 x i16> %1051, <16 x i16>* %1080, align 1
  %1081 = getelementptr inbounds i16, i16* %1071, i64 %1
  %1082 = add nuw nsw i32 %1072, 1
  %1083 = add i32 %1073, -1
  %1084 = icmp eq i32 %1083, 0
  br i1 %1084, label %1085, label %1070, !llvm.loop !12

1085:                                             ; preds = %1070, %1064
  %1086 = phi i16* [ %1057, %1064 ], [ %1081, %1070 ]
  %1087 = phi i32 [ %1058, %1064 ], [ %1082, %1070 ]
  %1088 = icmp ult i32 %1067, 3
  br i1 %1088, label %1198, label %1089

1089:                                             ; preds = %1085, %1089
  %1090 = phi i16* [ %1123, %1089 ], [ %1086, %1085 ]
  %1091 = phi i32 [ %1124, %1089 ], [ %1087, %1085 ]
  %1092 = bitcast i16* %1090 to <16 x i16>*
  store <16 x i16> %1051, <16 x i16>* %1092, align 1
  %1093 = getelementptr inbounds i16, i16* %1090, i64 16
  %1094 = bitcast i16* %1093 to <16 x i16>*
  store <16 x i16> %1051, <16 x i16>* %1094, align 1
  %1095 = getelementptr inbounds i16, i16* %1090, i64 32
  %1096 = bitcast i16* %1095 to <16 x i16>*
  store <16 x i16> %1051, <16 x i16>* %1096, align 1
  %1097 = getelementptr inbounds i16, i16* %1090, i64 48
  %1098 = bitcast i16* %1097 to <16 x i16>*
  store <16 x i16> %1051, <16 x i16>* %1098, align 1
  %1099 = getelementptr inbounds i16, i16* %1090, i64 %1
  %1100 = bitcast i16* %1099 to <16 x i16>*
  store <16 x i16> %1051, <16 x i16>* %1100, align 1
  %1101 = getelementptr inbounds i16, i16* %1099, i64 16
  %1102 = bitcast i16* %1101 to <16 x i16>*
  store <16 x i16> %1051, <16 x i16>* %1102, align 1
  %1103 = getelementptr inbounds i16, i16* %1099, i64 32
  %1104 = bitcast i16* %1103 to <16 x i16>*
  store <16 x i16> %1051, <16 x i16>* %1104, align 1
  %1105 = getelementptr inbounds i16, i16* %1099, i64 48
  %1106 = bitcast i16* %1105 to <16 x i16>*
  store <16 x i16> %1051, <16 x i16>* %1106, align 1
  %1107 = getelementptr inbounds i16, i16* %1099, i64 %1
  %1108 = bitcast i16* %1107 to <16 x i16>*
  store <16 x i16> %1051, <16 x i16>* %1108, align 1
  %1109 = getelementptr inbounds i16, i16* %1107, i64 16
  %1110 = bitcast i16* %1109 to <16 x i16>*
  store <16 x i16> %1051, <16 x i16>* %1110, align 1
  %1111 = getelementptr inbounds i16, i16* %1107, i64 32
  %1112 = bitcast i16* %1111 to <16 x i16>*
  store <16 x i16> %1051, <16 x i16>* %1112, align 1
  %1113 = getelementptr inbounds i16, i16* %1107, i64 48
  %1114 = bitcast i16* %1113 to <16 x i16>*
  store <16 x i16> %1051, <16 x i16>* %1114, align 1
  %1115 = getelementptr inbounds i16, i16* %1107, i64 %1
  %1116 = bitcast i16* %1115 to <16 x i16>*
  store <16 x i16> %1051, <16 x i16>* %1116, align 1
  %1117 = getelementptr inbounds i16, i16* %1115, i64 16
  %1118 = bitcast i16* %1117 to <16 x i16>*
  store <16 x i16> %1051, <16 x i16>* %1118, align 1
  %1119 = getelementptr inbounds i16, i16* %1115, i64 32
  %1120 = bitcast i16* %1119 to <16 x i16>*
  store <16 x i16> %1051, <16 x i16>* %1120, align 1
  %1121 = getelementptr inbounds i16, i16* %1115, i64 48
  %1122 = bitcast i16* %1121 to <16 x i16>*
  store <16 x i16> %1051, <16 x i16>* %1122, align 1
  %1123 = getelementptr inbounds i16, i16* %1115, i64 %1
  %1124 = add nuw nsw i32 %1091, 4
  %1125 = icmp eq i32 %1124, %3
  br i1 %1125, label %1198, label %1089

1126:                                             ; preds = %1056
  %1127 = trunc i32 %1059 to i16
  %1128 = insertelement <16 x i16> undef, i16 %1127, i32 0
  %1129 = and <16 x i16> %1128, <i16 63, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef>
  %1130 = lshr <16 x i16> %1129, <i16 1, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0>
  %1131 = shufflevector <16 x i16> %1130, <16 x i16> undef, <16 x i32> zeroinitializer
  %1132 = sext i32 %1060 to i64
  %1133 = getelementptr inbounds i16, i16* %4, i64 %1132
  %1134 = getelementptr inbounds i16, i16* %1133, i64 1
  br label %1135

1135:                                             ; preds = %1186, %1126
  %1136 = phi i64 [ 0, %1126 ], [ %1190, %1186 ]
  %1137 = add nsw i64 %1136, %1132
  %1138 = icmp slt i64 %1137, %1047
  br i1 %1138, label %1139, label %1186

1139:                                             ; preds = %1135
  %1140 = getelementptr inbounds i16, i16* %1133, i64 %1136
  %1141 = bitcast i16* %1140 to <16 x i16>*
  %1142 = load <16 x i16>, <16 x i16>* %1141, align 1
  %1143 = getelementptr inbounds i16, i16* %1134, i64 %1136
  %1144 = bitcast i16* %1143 to <16 x i16>*
  %1145 = load <16 x i16>, <16 x i16>* %1144, align 1
  %1146 = sub <16 x i16> %1145, %1142
  %1147 = shl <16 x i16> %1142, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %1148 = or <16 x i16> %1147, <i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16>
  %1149 = mul <16 x i16> %1146, %1131
  %1150 = add <16 x i16> %1149, %1148
  %1151 = lshr <16 x i16> %1150, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %1152 = trunc i64 %1137 to i16
  %1153 = add i16 %1152, 1
  %1154 = add i16 %1152, 2
  %1155 = add i16 %1152, 3
  %1156 = add i16 %1152, 4
  %1157 = add i16 %1152, 5
  %1158 = add i16 %1152, 6
  %1159 = add i16 %1152, 7
  %1160 = add i16 %1152, 8
  %1161 = add i16 %1152, 9
  %1162 = add i16 %1152, 10
  %1163 = add i16 %1152, 11
  %1164 = add i16 %1152, 12
  %1165 = add i16 %1152, 13
  %1166 = add i16 %1152, 14
  %1167 = add i16 %1152, 15
  %1168 = insertelement <16 x i16> undef, i16 %1152, i32 0
  %1169 = insertelement <16 x i16> %1168, i16 %1153, i32 1
  %1170 = insertelement <16 x i16> %1169, i16 %1154, i32 2
  %1171 = insertelement <16 x i16> %1170, i16 %1155, i32 3
  %1172 = insertelement <16 x i16> %1171, i16 %1156, i32 4
  %1173 = insertelement <16 x i16> %1172, i16 %1157, i32 5
  %1174 = insertelement <16 x i16> %1173, i16 %1158, i32 6
  %1175 = insertelement <16 x i16> %1174, i16 %1159, i32 7
  %1176 = insertelement <16 x i16> %1175, i16 %1160, i32 8
  %1177 = insertelement <16 x i16> %1176, i16 %1161, i32 9
  %1178 = insertelement <16 x i16> %1177, i16 %1162, i32 10
  %1179 = insertelement <16 x i16> %1178, i16 %1163, i32 11
  %1180 = insertelement <16 x i16> %1179, i16 %1164, i32 12
  %1181 = insertelement <16 x i16> %1180, i16 %1165, i32 13
  %1182 = insertelement <16 x i16> %1181, i16 %1166, i32 14
  %1183 = insertelement <16 x i16> %1182, i16 %1167, i32 15
  %1184 = icmp sgt <16 x i16> %1054, %1183
  %1185 = select <16 x i1> %1184, <16 x i16> %1151, <16 x i16> %1051
  br label %1186

1186:                                             ; preds = %1135, %1139
  %1187 = phi <16 x i16> [ %1185, %1139 ], [ %1051, %1135 ]
  %1188 = getelementptr inbounds i16, i16* %1057, i64 %1136
  %1189 = bitcast i16* %1188 to <16 x i16>*
  store <16 x i16> %1187, <16 x i16>* %1189, align 1
  %1190 = add nuw nsw i64 %1136, 16
  %1191 = icmp ult i64 %1190, 64
  br i1 %1191, label %1135, label %1192

1192:                                             ; preds = %1186
  %1193 = add nsw i32 %1059, %7
  %1194 = add nuw nsw i32 %1058, 1
  %1195 = getelementptr inbounds i16, i16* %1057, i64 %1
  %1196 = icmp eq i32 %1194, %3
  br i1 %1196, label %1198, label %1056

1197:                                             ; preds = %1043
  tail call fastcc void @highbd_dr_prediction_32bit_z1_64xN_avx2(i32 %3, i16* %0, i64 %1, i16* %4, i32 %7)
  br label %1198

1198:                                             ; preds = %1192, %1085, %1089, %1062, %1045, %10, %1197, %1042, %1041, %714, %360
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @highbd_dr_prediction_z1_32xN_avx2(i32, i16* nocapture, i64, i16* nocapture readonly, i32, i32) unnamed_addr #0 {
  %7 = alloca [128 x <4 x i64>], align 32
  %8 = bitcast [128 x <4 x i64>]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4096, i8* nonnull %8) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %8, i8 -86, i64 4096, i1 false)
  %9 = icmp slt i32 %5, 12
  %10 = add nsw i32 %0, 31
  %11 = sext i32 %10 to i64
  %12 = getelementptr inbounds i16, i16* %3, i64 %11
  %13 = load i16, i16* %12, align 2
  %14 = insertelement <16 x i16> undef, i16 %13, i32 0
  %15 = shufflevector <16 x i16> %14, <16 x i16> undef, <16 x i32> zeroinitializer
  br i1 %9, label %16, label %192

16:                                               ; preds = %6
  %17 = trunc i32 %10 to i16
  %18 = insertelement <16 x i16> undef, i16 %17, i32 0
  %19 = shufflevector <16 x i16> %18, <16 x i16> undef, <16 x i32> zeroinitializer
  %20 = icmp sgt i32 %0, 0
  br i1 %20, label %21, label %465

21:                                               ; preds = %16
  %22 = sext i32 %0 to i64
  %23 = zext i32 %0 to i64
  br label %24

24:                                               ; preds = %187, %21
  %25 = phi i64 [ 0, %21 ], [ %190, %187 ]
  %26 = phi i32 [ %4, %21 ], [ %189, %187 ]
  %27 = ashr i32 %26, 6
  %28 = icmp slt i32 %27, %10
  br i1 %28, label %80, label %29

29:                                               ; preds = %24
  %30 = trunc i64 %25 to i32
  %31 = icmp slt i32 %30, %0
  br i1 %31, label %32, label %442

32:                                               ; preds = %29
  %33 = and i64 %25, 4294967295
  %34 = sub nsw i64 %23, %25
  %35 = xor i64 %33, -1
  %36 = add nsw i64 %35, %23
  %37 = and i64 %34, 3
  %38 = icmp eq i64 %37, 0
  br i1 %38, label %50, label %39

39:                                               ; preds = %32, %39
  %40 = phi i64 [ %47, %39 ], [ %33, %32 ]
  %41 = phi i64 [ %48, %39 ], [ %37, %32 ]
  %42 = getelementptr inbounds [128 x <4 x i64>], [128 x <4 x i64>]* %7, i64 0, i64 %40
  %43 = bitcast <4 x i64>* %42 to <16 x i16>*
  store <16 x i16> %15, <16 x i16>* %43, align 32
  %44 = add nsw i64 %40, %22
  %45 = getelementptr inbounds [128 x <4 x i64>], [128 x <4 x i64>]* %7, i64 0, i64 %44
  %46 = bitcast <4 x i64>* %45 to <16 x i16>*
  store <16 x i16> %15, <16 x i16>* %46, align 32
  %47 = add nuw nsw i64 %40, 1
  %48 = add i64 %41, -1
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %50, label %39, !llvm.loop !13

50:                                               ; preds = %39, %32
  %51 = phi i64 [ %33, %32 ], [ %47, %39 ]
  %52 = icmp ult i64 %36, 3
  br i1 %52, label %442, label %53

53:                                               ; preds = %50, %53
  %54 = phi i64 [ %78, %53 ], [ %51, %50 ]
  %55 = getelementptr inbounds [128 x <4 x i64>], [128 x <4 x i64>]* %7, i64 0, i64 %54
  %56 = bitcast <4 x i64>* %55 to <16 x i16>*
  store <16 x i16> %15, <16 x i16>* %56, align 32
  %57 = add nsw i64 %54, %22
  %58 = getelementptr inbounds [128 x <4 x i64>], [128 x <4 x i64>]* %7, i64 0, i64 %57
  %59 = bitcast <4 x i64>* %58 to <16 x i16>*
  store <16 x i16> %15, <16 x i16>* %59, align 32
  %60 = add nuw nsw i64 %54, 1
  %61 = getelementptr inbounds [128 x <4 x i64>], [128 x <4 x i64>]* %7, i64 0, i64 %60
  %62 = bitcast <4 x i64>* %61 to <16 x i16>*
  store <16 x i16> %15, <16 x i16>* %62, align 32
  %63 = add nsw i64 %60, %22
  %64 = getelementptr inbounds [128 x <4 x i64>], [128 x <4 x i64>]* %7, i64 0, i64 %63
  %65 = bitcast <4 x i64>* %64 to <16 x i16>*
  store <16 x i16> %15, <16 x i16>* %65, align 32
  %66 = add nuw nsw i64 %54, 2
  %67 = getelementptr inbounds [128 x <4 x i64>], [128 x <4 x i64>]* %7, i64 0, i64 %66
  %68 = bitcast <4 x i64>* %67 to <16 x i16>*
  store <16 x i16> %15, <16 x i16>* %68, align 32
  %69 = add nsw i64 %66, %22
  %70 = getelementptr inbounds [128 x <4 x i64>], [128 x <4 x i64>]* %7, i64 0, i64 %69
  %71 = bitcast <4 x i64>* %70 to <16 x i16>*
  store <16 x i16> %15, <16 x i16>* %71, align 32
  %72 = add nuw nsw i64 %54, 3
  %73 = getelementptr inbounds [128 x <4 x i64>], [128 x <4 x i64>]* %7, i64 0, i64 %72
  %74 = bitcast <4 x i64>* %73 to <16 x i16>*
  store <16 x i16> %15, <16 x i16>* %74, align 32
  %75 = add nsw i64 %72, %22
  %76 = getelementptr inbounds [128 x <4 x i64>], [128 x <4 x i64>]* %7, i64 0, i64 %75
  %77 = bitcast <4 x i64>* %76 to <16 x i16>*
  store <16 x i16> %15, <16 x i16>* %77, align 32
  %78 = add nuw nsw i64 %54, 4
  %79 = icmp eq i64 %78, %23
  br i1 %79, label %442, label %53

80:                                               ; preds = %24
  %81 = trunc i32 %26 to i16
  %82 = insertelement <16 x i16> undef, i16 %81, i32 0
  %83 = and <16 x i16> %82, <i16 63, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef>
  %84 = lshr <16 x i16> %83, <i16 1, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0>
  %85 = shufflevector <16 x i16> %84, <16 x i16> undef, <16 x i32> zeroinitializer
  %86 = sext i32 %27 to i64
  %87 = getelementptr inbounds i16, i16* %3, i64 %86
  %88 = getelementptr inbounds i16, i16* %87, i64 1
  %89 = add nsw i64 %25, %22
  %90 = getelementptr inbounds [128 x <4 x i64>], [128 x <4 x i64>]* %7, i64 0, i64 %89
  %91 = bitcast <4 x i64>* %90 to <16 x i16>*
  %92 = getelementptr inbounds [128 x <4 x i64>], [128 x <4 x i64>]* %7, i64 0, i64 %25
  %93 = bitcast <4 x i64>* %92 to <16 x i16>*
  %94 = bitcast i16* %87 to <16 x i16>*
  %95 = load <16 x i16>, <16 x i16>* %94, align 1
  %96 = bitcast i16* %88 to <16 x i16>*
  %97 = load <16 x i16>, <16 x i16>* %96, align 1
  %98 = sub <16 x i16> %97, %95
  %99 = shl <16 x i16> %95, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %100 = or <16 x i16> %99, <i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16>
  %101 = mul <16 x i16> %98, %85
  %102 = add <16 x i16> %101, %100
  %103 = lshr <16 x i16> %102, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %104 = trunc i32 %27 to i16
  %105 = add i16 %104, 1
  %106 = add i16 %104, 2
  %107 = add i16 %104, 3
  %108 = add i16 %104, 4
  %109 = add i16 %104, 5
  %110 = add i16 %104, 6
  %111 = add i16 %104, 7
  %112 = add i16 %104, 8
  %113 = add i16 %104, 9
  %114 = add i16 %104, 10
  %115 = add i16 %104, 11
  %116 = add i16 %104, 12
  %117 = add i16 %104, 13
  %118 = add i16 %104, 14
  %119 = add i16 %104, 15
  %120 = insertelement <16 x i16> undef, i16 %104, i32 0
  %121 = insertelement <16 x i16> %120, i16 %105, i32 1
  %122 = insertelement <16 x i16> %121, i16 %106, i32 2
  %123 = insertelement <16 x i16> %122, i16 %107, i32 3
  %124 = insertelement <16 x i16> %123, i16 %108, i32 4
  %125 = insertelement <16 x i16> %124, i16 %109, i32 5
  %126 = insertelement <16 x i16> %125, i16 %110, i32 6
  %127 = insertelement <16 x i16> %126, i16 %111, i32 7
  %128 = insertelement <16 x i16> %127, i16 %112, i32 8
  %129 = insertelement <16 x i16> %128, i16 %113, i32 9
  %130 = insertelement <16 x i16> %129, i16 %114, i32 10
  %131 = insertelement <16 x i16> %130, i16 %115, i32 11
  %132 = insertelement <16 x i16> %131, i16 %116, i32 12
  %133 = insertelement <16 x i16> %132, i16 %117, i32 13
  %134 = insertelement <16 x i16> %133, i16 %118, i32 14
  %135 = insertelement <16 x i16> %134, i16 %119, i32 15
  %136 = icmp sgt <16 x i16> %19, %135
  %137 = select <16 x i1> %136, <16 x i16> %103, <16 x i16> %15
  store <16 x i16> %137, <16 x i16>* %93, align 32
  %138 = add nsw i64 %86, 16
  %139 = icmp slt i64 %138, %11
  br i1 %139, label %140, label %187

140:                                              ; preds = %80
  %141 = getelementptr inbounds i16, i16* %87, i64 16
  %142 = bitcast i16* %141 to <16 x i16>*
  %143 = load <16 x i16>, <16 x i16>* %142, align 1
  %144 = getelementptr inbounds i16, i16* %88, i64 16
  %145 = bitcast i16* %144 to <16 x i16>*
  %146 = load <16 x i16>, <16 x i16>* %145, align 1
  %147 = sub <16 x i16> %146, %143
  %148 = shl <16 x i16> %143, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %149 = or <16 x i16> %148, <i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16>
  %150 = mul <16 x i16> %147, %85
  %151 = add <16 x i16> %150, %149
  %152 = lshr <16 x i16> %151, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %153 = trunc i64 %138 to i16
  %154 = add i16 %153, 1
  %155 = add i16 %153, 2
  %156 = add i16 %153, 3
  %157 = add i16 %153, 4
  %158 = add i16 %153, 5
  %159 = add i16 %153, 6
  %160 = add i16 %153, 7
  %161 = add i16 %153, 8
  %162 = add i16 %153, 9
  %163 = add i16 %153, 10
  %164 = add i16 %153, 11
  %165 = add i16 %153, 12
  %166 = add i16 %153, 13
  %167 = add i16 %153, 14
  %168 = add i16 %153, 15
  %169 = insertelement <16 x i16> undef, i16 %153, i32 0
  %170 = insertelement <16 x i16> %169, i16 %154, i32 1
  %171 = insertelement <16 x i16> %170, i16 %155, i32 2
  %172 = insertelement <16 x i16> %171, i16 %156, i32 3
  %173 = insertelement <16 x i16> %172, i16 %157, i32 4
  %174 = insertelement <16 x i16> %173, i16 %158, i32 5
  %175 = insertelement <16 x i16> %174, i16 %159, i32 6
  %176 = insertelement <16 x i16> %175, i16 %160, i32 7
  %177 = insertelement <16 x i16> %176, i16 %161, i32 8
  %178 = insertelement <16 x i16> %177, i16 %162, i32 9
  %179 = insertelement <16 x i16> %178, i16 %163, i32 10
  %180 = insertelement <16 x i16> %179, i16 %164, i32 11
  %181 = insertelement <16 x i16> %180, i16 %165, i32 12
  %182 = insertelement <16 x i16> %181, i16 %166, i32 13
  %183 = insertelement <16 x i16> %182, i16 %167, i32 14
  %184 = insertelement <16 x i16> %183, i16 %168, i32 15
  %185 = icmp sgt <16 x i16> %19, %184
  %186 = select <16 x i1> %185, <16 x i16> %152, <16 x i16> %15
  br label %187

187:                                              ; preds = %140, %80
  %188 = phi <16 x i16> [ %186, %140 ], [ %15, %80 ]
  store <16 x i16> %188, <16 x i16>* %91, align 32
  %189 = add nsw i32 %26, %4
  %190 = add nuw nsw i64 %25, 1
  %191 = icmp eq i64 %190, %23
  br i1 %191, label %442, label %24

192:                                              ; preds = %6
  %193 = bitcast <16 x i16> %15 to <4 x i64>
  %194 = trunc i32 %10 to i16
  %195 = insertelement <16 x i16> undef, i16 %194, i32 0
  %196 = shufflevector <16 x i16> %195, <16 x i16> undef, <16 x i32> zeroinitializer
  %197 = icmp sgt i32 %0, 0
  br i1 %197, label %198, label %465

198:                                              ; preds = %192
  %199 = sext i32 %0 to i64
  %200 = zext i32 %0 to i64
  br label %201

201:                                              ; preds = %437, %198
  %202 = phi i64 [ 0, %198 ], [ %440, %437 ]
  %203 = phi i32 [ %4, %198 ], [ %439, %437 ]
  %204 = ashr i32 %203, 6
  %205 = icmp slt i32 %204, %10
  br i1 %205, label %257, label %206

206:                                              ; preds = %201
  %207 = trunc i64 %202 to i32
  %208 = icmp slt i32 %207, %0
  br i1 %208, label %209, label %442

209:                                              ; preds = %206
  %210 = and i64 %202, 4294967295
  %211 = sub nsw i64 %200, %202
  %212 = xor i64 %210, -1
  %213 = add nsw i64 %212, %200
  %214 = and i64 %211, 3
  %215 = icmp eq i64 %214, 0
  br i1 %215, label %227, label %216

216:                                              ; preds = %209, %216
  %217 = phi i64 [ %224, %216 ], [ %210, %209 ]
  %218 = phi i64 [ %225, %216 ], [ %214, %209 ]
  %219 = getelementptr inbounds [128 x <4 x i64>], [128 x <4 x i64>]* %7, i64 0, i64 %217
  %220 = bitcast <4 x i64>* %219 to <16 x i16>*
  store <16 x i16> %15, <16 x i16>* %220, align 32
  %221 = add nsw i64 %217, %199
  %222 = getelementptr inbounds [128 x <4 x i64>], [128 x <4 x i64>]* %7, i64 0, i64 %221
  %223 = bitcast <4 x i64>* %222 to <16 x i16>*
  store <16 x i16> %15, <16 x i16>* %223, align 32
  %224 = add nuw nsw i64 %217, 1
  %225 = add i64 %218, -1
  %226 = icmp eq i64 %225, 0
  br i1 %226, label %227, label %216, !llvm.loop !14

227:                                              ; preds = %216, %209
  %228 = phi i64 [ %210, %209 ], [ %224, %216 ]
  %229 = icmp ult i64 %213, 3
  br i1 %229, label %442, label %230

230:                                              ; preds = %227, %230
  %231 = phi i64 [ %255, %230 ], [ %228, %227 ]
  %232 = getelementptr inbounds [128 x <4 x i64>], [128 x <4 x i64>]* %7, i64 0, i64 %231
  %233 = bitcast <4 x i64>* %232 to <16 x i16>*
  store <16 x i16> %15, <16 x i16>* %233, align 32
  %234 = add nsw i64 %231, %199
  %235 = getelementptr inbounds [128 x <4 x i64>], [128 x <4 x i64>]* %7, i64 0, i64 %234
  %236 = bitcast <4 x i64>* %235 to <16 x i16>*
  store <16 x i16> %15, <16 x i16>* %236, align 32
  %237 = add nuw nsw i64 %231, 1
  %238 = getelementptr inbounds [128 x <4 x i64>], [128 x <4 x i64>]* %7, i64 0, i64 %237
  %239 = bitcast <4 x i64>* %238 to <16 x i16>*
  store <16 x i16> %15, <16 x i16>* %239, align 32
  %240 = add nsw i64 %237, %199
  %241 = getelementptr inbounds [128 x <4 x i64>], [128 x <4 x i64>]* %7, i64 0, i64 %240
  %242 = bitcast <4 x i64>* %241 to <16 x i16>*
  store <16 x i16> %15, <16 x i16>* %242, align 32
  %243 = add nuw nsw i64 %231, 2
  %244 = getelementptr inbounds [128 x <4 x i64>], [128 x <4 x i64>]* %7, i64 0, i64 %243
  %245 = bitcast <4 x i64>* %244 to <16 x i16>*
  store <16 x i16> %15, <16 x i16>* %245, align 32
  %246 = add nsw i64 %243, %199
  %247 = getelementptr inbounds [128 x <4 x i64>], [128 x <4 x i64>]* %7, i64 0, i64 %246
  %248 = bitcast <4 x i64>* %247 to <16 x i16>*
  store <16 x i16> %15, <16 x i16>* %248, align 32
  %249 = add nuw nsw i64 %231, 3
  %250 = getelementptr inbounds [128 x <4 x i64>], [128 x <4 x i64>]* %7, i64 0, i64 %249
  %251 = bitcast <4 x i64>* %250 to <16 x i16>*
  store <16 x i16> %15, <16 x i16>* %251, align 32
  %252 = add nsw i64 %249, %199
  %253 = getelementptr inbounds [128 x <4 x i64>], [128 x <4 x i64>]* %7, i64 0, i64 %252
  %254 = bitcast <4 x i64>* %253 to <16 x i16>*
  store <16 x i16> %15, <16 x i16>* %254, align 32
  %255 = add nuw nsw i64 %231, 4
  %256 = icmp eq i64 %255, %200
  br i1 %256, label %442, label %230

257:                                              ; preds = %201
  %258 = insertelement <8 x i32> undef, i32 %203, i32 0
  %259 = and <8 x i32> %258, <i32 4128831, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %260 = lshr <8 x i32> %259, <i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>
  %261 = shufflevector <8 x i32> %260, <8 x i32> undef, <8 x i32> zeroinitializer
  %262 = sext i32 %204 to i64
  %263 = getelementptr inbounds i16, i16* %3, i64 %262
  %264 = getelementptr inbounds i16, i16* %263, i64 1
  %265 = getelementptr inbounds i16, i16* %263, i64 8
  %266 = getelementptr inbounds i16, i16* %263, i64 9
  %267 = add nsw i64 %202, %199
  %268 = getelementptr inbounds [128 x <4 x i64>], [128 x <4 x i64>]* %7, i64 0, i64 %267
  %269 = getelementptr inbounds [128 x <4 x i64>], [128 x <4 x i64>]* %7, i64 0, i64 %202
  %270 = sub nsw i64 %11, %262
  %271 = icmp slt i64 %270, 1
  br i1 %271, label %350, label %272

272:                                              ; preds = %257
  %273 = bitcast i16* %263 to <8 x i16>*
  %274 = load <8 x i16>, <8 x i16>* %273, align 1
  %275 = zext <8 x i16> %274 to <8 x i32>
  %276 = bitcast i16* %264 to <8 x i16>*
  %277 = load <8 x i16>, <8 x i16>* %276, align 1
  %278 = zext <8 x i16> %277 to <8 x i32>
  %279 = sub nsw <8 x i32> %278, %275
  %280 = shl nuw nsw <8 x i32> %275, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %281 = or <8 x i32> %280, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %282 = mul <8 x i32> %279, %261
  %283 = add <8 x i32> %282, %281
  %284 = lshr <8 x i32> %283, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %285 = bitcast <8 x i32> %284 to <4 x i64>
  %286 = shufflevector <4 x i64> %285, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %287 = shufflevector <2 x i64> %286, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %288 = bitcast <4 x i64> %287 to <8 x i32>
  %289 = tail call <16 x i16> @llvm.x86.avx2.packusdw(<8 x i32> %284, <8 x i32> %288) #8
  %290 = bitcast <16 x i16> %289 to <4 x i64>
  %291 = icmp sgt i64 %270, 8
  br i1 %291, label %292, label %311

292:                                              ; preds = %272
  %293 = bitcast i16* %265 to <8 x i16>*
  %294 = load <8 x i16>, <8 x i16>* %293, align 1
  %295 = zext <8 x i16> %294 to <8 x i32>
  %296 = bitcast i16* %266 to <8 x i16>*
  %297 = load <8 x i16>, <8 x i16>* %296, align 1
  %298 = zext <8 x i16> %297 to <8 x i32>
  %299 = sub nsw <8 x i32> %298, %295
  %300 = shl nuw nsw <8 x i32> %295, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %301 = or <8 x i32> %300, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %302 = mul <8 x i32> %299, %261
  %303 = add <8 x i32> %302, %301
  %304 = lshr <8 x i32> %303, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %305 = bitcast <8 x i32> %304 to <4 x i64>
  %306 = shufflevector <4 x i64> %305, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %307 = shufflevector <2 x i64> %306, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %308 = bitcast <4 x i64> %307 to <8 x i32>
  %309 = tail call <16 x i16> @llvm.x86.avx2.packusdw(<8 x i32> %304, <8 x i32> %308) #8
  %310 = bitcast <16 x i16> %309 to <4 x i64>
  br label %311

311:                                              ; preds = %292, %272
  %312 = phi <4 x i64> [ %310, %292 ], [ %193, %272 ]
  %313 = shufflevector <4 x i64> %290, <4 x i64> %312, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %314 = trunc i32 %204 to i16
  %315 = add i16 %314, 1
  %316 = add i16 %314, 2
  %317 = add i16 %314, 3
  %318 = add i16 %314, 4
  %319 = add i16 %314, 5
  %320 = add i16 %314, 6
  %321 = add i16 %314, 7
  %322 = add i16 %314, 8
  %323 = add i16 %314, 9
  %324 = add i16 %314, 10
  %325 = add i16 %314, 11
  %326 = add i16 %314, 12
  %327 = add i16 %314, 13
  %328 = add i16 %314, 14
  %329 = add i16 %314, 15
  %330 = insertelement <16 x i16> undef, i16 %314, i32 0
  %331 = insertelement <16 x i16> %330, i16 %315, i32 1
  %332 = insertelement <16 x i16> %331, i16 %316, i32 2
  %333 = insertelement <16 x i16> %332, i16 %317, i32 3
  %334 = insertelement <16 x i16> %333, i16 %318, i32 4
  %335 = insertelement <16 x i16> %334, i16 %319, i32 5
  %336 = insertelement <16 x i16> %335, i16 %320, i32 6
  %337 = insertelement <16 x i16> %336, i16 %321, i32 7
  %338 = insertelement <16 x i16> %337, i16 %322, i32 8
  %339 = insertelement <16 x i16> %338, i16 %323, i32 9
  %340 = insertelement <16 x i16> %339, i16 %324, i32 10
  %341 = insertelement <16 x i16> %340, i16 %325, i32 11
  %342 = insertelement <16 x i16> %341, i16 %326, i32 12
  %343 = insertelement <16 x i16> %342, i16 %327, i32 13
  %344 = insertelement <16 x i16> %343, i16 %328, i32 14
  %345 = insertelement <16 x i16> %344, i16 %329, i32 15
  %346 = icmp sgt <16 x i16> %196, %345
  %347 = bitcast <4 x i64> %313 to <16 x i16>
  %348 = select <16 x i1> %346, <16 x i16> %347, <16 x i16> %15
  %349 = bitcast <16 x i16> %348 to <4 x i64>
  br label %350

350:                                              ; preds = %311, %257
  %351 = phi <4 x i64> [ %349, %311 ], [ %193, %257 ]
  store <4 x i64> %351, <4 x i64>* %269, align 32
  %352 = add nsw i64 %262, 16
  %353 = sub nsw i64 %11, %352
  %354 = icmp slt i64 %353, 1
  br i1 %354, label %437, label %355

355:                                              ; preds = %350
  %356 = getelementptr inbounds i16, i16* %263, i64 16
  %357 = bitcast i16* %356 to <8 x i16>*
  %358 = load <8 x i16>, <8 x i16>* %357, align 1
  %359 = zext <8 x i16> %358 to <8 x i32>
  %360 = getelementptr inbounds i16, i16* %264, i64 16
  %361 = bitcast i16* %360 to <8 x i16>*
  %362 = load <8 x i16>, <8 x i16>* %361, align 1
  %363 = zext <8 x i16> %362 to <8 x i32>
  %364 = sub nsw <8 x i32> %363, %359
  %365 = shl nuw nsw <8 x i32> %359, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %366 = or <8 x i32> %365, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %367 = mul <8 x i32> %364, %261
  %368 = add <8 x i32> %367, %366
  %369 = lshr <8 x i32> %368, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %370 = bitcast <8 x i32> %369 to <4 x i64>
  %371 = shufflevector <4 x i64> %370, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %372 = shufflevector <2 x i64> %371, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %373 = bitcast <4 x i64> %372 to <8 x i32>
  %374 = tail call <16 x i16> @llvm.x86.avx2.packusdw(<8 x i32> %369, <8 x i32> %373) #8
  %375 = bitcast <16 x i16> %374 to <4 x i64>
  %376 = icmp sgt i64 %353, 8
  br i1 %376, label %377, label %398

377:                                              ; preds = %355
  %378 = getelementptr inbounds i16, i16* %265, i64 16
  %379 = bitcast i16* %378 to <8 x i16>*
  %380 = load <8 x i16>, <8 x i16>* %379, align 1
  %381 = zext <8 x i16> %380 to <8 x i32>
  %382 = getelementptr inbounds i16, i16* %266, i64 16
  %383 = bitcast i16* %382 to <8 x i16>*
  %384 = load <8 x i16>, <8 x i16>* %383, align 1
  %385 = zext <8 x i16> %384 to <8 x i32>
  %386 = sub nsw <8 x i32> %385, %381
  %387 = shl nuw nsw <8 x i32> %381, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %388 = or <8 x i32> %387, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %389 = mul <8 x i32> %386, %261
  %390 = add <8 x i32> %389, %388
  %391 = lshr <8 x i32> %390, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %392 = bitcast <8 x i32> %391 to <4 x i64>
  %393 = shufflevector <4 x i64> %392, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %394 = shufflevector <2 x i64> %393, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %395 = bitcast <4 x i64> %394 to <8 x i32>
  %396 = tail call <16 x i16> @llvm.x86.avx2.packusdw(<8 x i32> %391, <8 x i32> %395) #8
  %397 = bitcast <16 x i16> %396 to <4 x i64>
  br label %398

398:                                              ; preds = %377, %355
  %399 = phi <4 x i64> [ %397, %377 ], [ %193, %355 ]
  %400 = shufflevector <4 x i64> %375, <4 x i64> %399, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %401 = trunc i64 %352 to i16
  %402 = add i16 %401, 1
  %403 = add i16 %401, 2
  %404 = add i16 %401, 3
  %405 = add i16 %401, 4
  %406 = add i16 %401, 5
  %407 = add i16 %401, 6
  %408 = add i16 %401, 7
  %409 = add i16 %401, 8
  %410 = add i16 %401, 9
  %411 = add i16 %401, 10
  %412 = add i16 %401, 11
  %413 = add i16 %401, 12
  %414 = add i16 %401, 13
  %415 = add i16 %401, 14
  %416 = add i16 %401, 15
  %417 = insertelement <16 x i16> undef, i16 %401, i32 0
  %418 = insertelement <16 x i16> %417, i16 %402, i32 1
  %419 = insertelement <16 x i16> %418, i16 %403, i32 2
  %420 = insertelement <16 x i16> %419, i16 %404, i32 3
  %421 = insertelement <16 x i16> %420, i16 %405, i32 4
  %422 = insertelement <16 x i16> %421, i16 %406, i32 5
  %423 = insertelement <16 x i16> %422, i16 %407, i32 6
  %424 = insertelement <16 x i16> %423, i16 %408, i32 7
  %425 = insertelement <16 x i16> %424, i16 %409, i32 8
  %426 = insertelement <16 x i16> %425, i16 %410, i32 9
  %427 = insertelement <16 x i16> %426, i16 %411, i32 10
  %428 = insertelement <16 x i16> %427, i16 %412, i32 11
  %429 = insertelement <16 x i16> %428, i16 %413, i32 12
  %430 = insertelement <16 x i16> %429, i16 %414, i32 13
  %431 = insertelement <16 x i16> %430, i16 %415, i32 14
  %432 = insertelement <16 x i16> %431, i16 %416, i32 15
  %433 = icmp sgt <16 x i16> %196, %432
  %434 = bitcast <4 x i64> %400 to <16 x i16>
  %435 = select <16 x i1> %433, <16 x i16> %434, <16 x i16> %15
  %436 = bitcast <16 x i16> %435 to <4 x i64>
  br label %437

437:                                              ; preds = %398, %350
  %438 = phi <4 x i64> [ %436, %398 ], [ %193, %350 ]
  store <4 x i64> %438, <4 x i64>* %268, align 32
  %439 = add nsw i32 %203, %4
  %440 = add nuw nsw i64 %202, 1
  %441 = icmp eq i64 %440, %200
  br i1 %441, label %442, label %201

442:                                              ; preds = %437, %227, %230, %187, %50, %53, %206, %29
  %443 = icmp sgt i32 %0, 0
  br i1 %443, label %444, label %465

444:                                              ; preds = %442
  %445 = sext i32 %0 to i64
  %446 = zext i32 %0 to i64
  %447 = and i64 %446, 1
  %448 = icmp eq i32 %0, 1
  br i1 %448, label %451, label %449

449:                                              ; preds = %444
  %450 = sub nsw i64 %446, %447
  br label %466

451:                                              ; preds = %466, %444
  %452 = phi i64 [ 0, %444 ], [ %490, %466 ]
  %453 = icmp eq i64 %447, 0
  br i1 %453, label %465, label %454

454:                                              ; preds = %451
  %455 = mul nsw i64 %452, %2
  %456 = getelementptr inbounds i16, i16* %1, i64 %455
  %457 = bitcast i16* %456 to <4 x i64>*
  %458 = getelementptr inbounds [128 x <4 x i64>], [128 x <4 x i64>]* %7, i64 0, i64 %452
  %459 = load <4 x i64>, <4 x i64>* %458, align 32
  store <4 x i64> %459, <4 x i64>* %457, align 1
  %460 = getelementptr inbounds i16, i16* %456, i64 16
  %461 = bitcast i16* %460 to <4 x i64>*
  %462 = add nsw i64 %452, %445
  %463 = getelementptr inbounds [128 x <4 x i64>], [128 x <4 x i64>]* %7, i64 0, i64 %462
  %464 = load <4 x i64>, <4 x i64>* %463, align 32
  store <4 x i64> %464, <4 x i64>* %461, align 1
  br label %465

465:                                              ; preds = %454, %451, %16, %192, %442
  call void @llvm.lifetime.end.p0i8(i64 4096, i8* nonnull %8) #8
  ret void

466:                                              ; preds = %466, %449
  %467 = phi i64 [ 0, %449 ], [ %490, %466 ]
  %468 = phi i64 [ %450, %449 ], [ %491, %466 ]
  %469 = mul nsw i64 %467, %2
  %470 = getelementptr inbounds i16, i16* %1, i64 %469
  %471 = bitcast i16* %470 to <4 x i64>*
  %472 = getelementptr inbounds [128 x <4 x i64>], [128 x <4 x i64>]* %7, i64 0, i64 %467
  %473 = load <4 x i64>, <4 x i64>* %472, align 32
  store <4 x i64> %473, <4 x i64>* %471, align 1
  %474 = getelementptr inbounds i16, i16* %470, i64 16
  %475 = bitcast i16* %474 to <4 x i64>*
  %476 = add nsw i64 %467, %445
  %477 = getelementptr inbounds [128 x <4 x i64>], [128 x <4 x i64>]* %7, i64 0, i64 %476
  %478 = load <4 x i64>, <4 x i64>* %477, align 32
  store <4 x i64> %478, <4 x i64>* %475, align 1
  %479 = or i64 %467, 1
  %480 = mul nsw i64 %479, %2
  %481 = getelementptr inbounds i16, i16* %1, i64 %480
  %482 = bitcast i16* %481 to <4 x i64>*
  %483 = getelementptr inbounds [128 x <4 x i64>], [128 x <4 x i64>]* %7, i64 0, i64 %479
  %484 = load <4 x i64>, <4 x i64>* %483, align 32
  store <4 x i64> %484, <4 x i64>* %482, align 1
  %485 = getelementptr inbounds i16, i16* %481, i64 16
  %486 = bitcast i16* %485 to <4 x i64>*
  %487 = add nsw i64 %479, %445
  %488 = getelementptr inbounds [128 x <4 x i64>], [128 x <4 x i64>]* %7, i64 0, i64 %487
  %489 = load <4 x i64>, <4 x i64>* %488, align 32
  store <4 x i64> %489, <4 x i64>* %486, align 1
  %490 = add nuw nsw i64 %467, 2
  %491 = add i64 %468, -2
  %492 = icmp eq i64 %491, 0
  br i1 %492, label %451, label %466
}

; Function Attrs: nofree nounwind ssp uwtable
define internal fastcc void @highbd_dr_prediction_32bit_z1_64xN_avx2(i32, i16* nocapture, i64, i16* nocapture readonly, i32) unnamed_addr #3 {
  %6 = add nsw i32 %0, 63
  %7 = sext i32 %6 to i64
  %8 = getelementptr inbounds i16, i16* %3, i64 %7
  %9 = load i16, i16* %8, align 2
  %10 = insertelement <16 x i16> undef, i16 %9, i32 0
  %11 = shufflevector <16 x i16> %10, <16 x i16> undef, <16 x i32> zeroinitializer
  %12 = trunc i32 %6 to i16
  %13 = insertelement <16 x i16> undef, i16 %12, i32 0
  %14 = shufflevector <16 x i16> %13, <16 x i16> undef, <16 x i32> zeroinitializer
  %15 = icmp sgt i32 %0, 0
  br i1 %15, label %16, label %181

16:                                               ; preds = %5, %439
  %17 = phi i32 [ %444, %439 ], [ 0, %5 ]
  %18 = phi i32 [ %443, %439 ], [ %4, %5 ]
  %19 = phi i16* [ %445, %439 ], [ %1, %5 ]
  %20 = ashr i32 %18, 6
  %21 = icmp slt i32 %20, %6
  br i1 %21, label %86, label %22

22:                                               ; preds = %16
  %23 = icmp slt i32 %17, %0
  br i1 %23, label %24, label %181

24:                                               ; preds = %22
  %25 = sub i32 %0, %17
  %26 = xor i32 %17, -1
  %27 = add i32 %26, %0
  %28 = and i32 %25, 3
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %45, label %30

30:                                               ; preds = %24, %30
  %31 = phi i32 [ %42, %30 ], [ %17, %24 ]
  %32 = phi i16* [ %41, %30 ], [ %19, %24 ]
  %33 = phi i32 [ %43, %30 ], [ %28, %24 ]
  %34 = bitcast i16* %32 to <16 x i16>*
  store <16 x i16> %11, <16 x i16>* %34, align 1
  %35 = getelementptr inbounds i16, i16* %32, i64 16
  %36 = bitcast i16* %35 to <16 x i16>*
  store <16 x i16> %11, <16 x i16>* %36, align 1
  %37 = getelementptr inbounds i16, i16* %32, i64 32
  %38 = bitcast i16* %37 to <16 x i16>*
  store <16 x i16> %11, <16 x i16>* %38, align 1
  %39 = getelementptr inbounds i16, i16* %32, i64 48
  %40 = bitcast i16* %39 to <16 x i16>*
  store <16 x i16> %11, <16 x i16>* %40, align 1
  %41 = getelementptr inbounds i16, i16* %32, i64 %2
  %42 = add nuw nsw i32 %31, 1
  %43 = add i32 %33, -1
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %45, label %30, !llvm.loop !15

45:                                               ; preds = %30, %24
  %46 = phi i32 [ %17, %24 ], [ %42, %30 ]
  %47 = phi i16* [ %19, %24 ], [ %41, %30 ]
  %48 = icmp ult i32 %27, 3
  br i1 %48, label %181, label %49

49:                                               ; preds = %45, %49
  %50 = phi i32 [ %84, %49 ], [ %46, %45 ]
  %51 = phi i16* [ %83, %49 ], [ %47, %45 ]
  %52 = bitcast i16* %51 to <16 x i16>*
  store <16 x i16> %11, <16 x i16>* %52, align 1
  %53 = getelementptr inbounds i16, i16* %51, i64 16
  %54 = bitcast i16* %53 to <16 x i16>*
  store <16 x i16> %11, <16 x i16>* %54, align 1
  %55 = getelementptr inbounds i16, i16* %51, i64 32
  %56 = bitcast i16* %55 to <16 x i16>*
  store <16 x i16> %11, <16 x i16>* %56, align 1
  %57 = getelementptr inbounds i16, i16* %51, i64 48
  %58 = bitcast i16* %57 to <16 x i16>*
  store <16 x i16> %11, <16 x i16>* %58, align 1
  %59 = getelementptr inbounds i16, i16* %51, i64 %2
  %60 = bitcast i16* %59 to <16 x i16>*
  store <16 x i16> %11, <16 x i16>* %60, align 1
  %61 = getelementptr inbounds i16, i16* %59, i64 16
  %62 = bitcast i16* %61 to <16 x i16>*
  store <16 x i16> %11, <16 x i16>* %62, align 1
  %63 = getelementptr inbounds i16, i16* %59, i64 32
  %64 = bitcast i16* %63 to <16 x i16>*
  store <16 x i16> %11, <16 x i16>* %64, align 1
  %65 = getelementptr inbounds i16, i16* %59, i64 48
  %66 = bitcast i16* %65 to <16 x i16>*
  store <16 x i16> %11, <16 x i16>* %66, align 1
  %67 = getelementptr inbounds i16, i16* %59, i64 %2
  %68 = bitcast i16* %67 to <16 x i16>*
  store <16 x i16> %11, <16 x i16>* %68, align 1
  %69 = getelementptr inbounds i16, i16* %67, i64 16
  %70 = bitcast i16* %69 to <16 x i16>*
  store <16 x i16> %11, <16 x i16>* %70, align 1
  %71 = getelementptr inbounds i16, i16* %67, i64 32
  %72 = bitcast i16* %71 to <16 x i16>*
  store <16 x i16> %11, <16 x i16>* %72, align 1
  %73 = getelementptr inbounds i16, i16* %67, i64 48
  %74 = bitcast i16* %73 to <16 x i16>*
  store <16 x i16> %11, <16 x i16>* %74, align 1
  %75 = getelementptr inbounds i16, i16* %67, i64 %2
  %76 = bitcast i16* %75 to <16 x i16>*
  store <16 x i16> %11, <16 x i16>* %76, align 1
  %77 = getelementptr inbounds i16, i16* %75, i64 16
  %78 = bitcast i16* %77 to <16 x i16>*
  store <16 x i16> %11, <16 x i16>* %78, align 1
  %79 = getelementptr inbounds i16, i16* %75, i64 32
  %80 = bitcast i16* %79 to <16 x i16>*
  store <16 x i16> %11, <16 x i16>* %80, align 1
  %81 = getelementptr inbounds i16, i16* %75, i64 48
  %82 = bitcast i16* %81 to <16 x i16>*
  store <16 x i16> %11, <16 x i16>* %82, align 1
  %83 = getelementptr inbounds i16, i16* %75, i64 %2
  %84 = add nuw nsw i32 %50, 4
  %85 = icmp eq i32 %84, %0
  br i1 %85, label %181, label %49

86:                                               ; preds = %16
  %87 = insertelement <8 x i32> undef, i32 %18, i32 0
  %88 = and <8 x i32> %87, <i32 63, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %89 = lshr <8 x i32> %88, <i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>
  %90 = shufflevector <8 x i32> %89, <8 x i32> undef, <8 x i32> zeroinitializer
  %91 = sext i32 %20 to i64
  %92 = getelementptr inbounds i16, i16* %3, i64 %91
  %93 = getelementptr inbounds i16, i16* %92, i64 1
  %94 = getelementptr inbounds i16, i16* %92, i64 8
  %95 = getelementptr inbounds i16, i16* %92, i64 9
  %96 = sub nsw i64 %7, %91
  %97 = icmp slt i64 %96, 1
  br i1 %97, label %175, label %98

98:                                               ; preds = %86
  %99 = bitcast i16* %92 to <8 x i16>*
  %100 = load <8 x i16>, <8 x i16>* %99, align 1
  %101 = bitcast i16* %93 to <8 x i16>*
  %102 = load <8 x i16>, <8 x i16>* %101, align 1
  %103 = zext <8 x i16> %100 to <8 x i32>
  %104 = zext <8 x i16> %102 to <8 x i32>
  %105 = sub nsw <8 x i32> %104, %103
  %106 = shl nuw nsw <8 x i32> %103, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %107 = or <8 x i32> %106, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %108 = mul <8 x i32> %105, %90
  %109 = add <8 x i32> %108, %107
  %110 = lshr <8 x i32> %109, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %111 = bitcast <8 x i32> %110 to <4 x i64>
  %112 = shufflevector <4 x i64> %111, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %113 = shufflevector <2 x i64> %112, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %114 = bitcast <4 x i64> %113 to <8 x i32>
  %115 = tail call <16 x i16> @llvm.x86.avx2.packusdw(<8 x i32> %110, <8 x i32> %114) #8
  %116 = bitcast <16 x i16> %115 to <4 x i64>
  %117 = icmp sgt i64 %96, 8
  br i1 %117, label %118, label %136

118:                                              ; preds = %98
  %119 = bitcast i16* %94 to <8 x i16>*
  %120 = load <8 x i16>, <8 x i16>* %119, align 1
  %121 = bitcast i16* %95 to <8 x i16>*
  %122 = load <8 x i16>, <8 x i16>* %121, align 1
  %123 = zext <8 x i16> %120 to <8 x i32>
  %124 = zext <8 x i16> %122 to <8 x i32>
  %125 = sub nsw <8 x i32> %124, %123
  %126 = shl nuw nsw <8 x i32> %123, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %127 = or <8 x i32> %126, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %128 = mul <8 x i32> %125, %90
  %129 = add <8 x i32> %128, %127
  %130 = lshr <8 x i32> %129, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %131 = bitcast <8 x i32> %130 to <4 x i64>
  %132 = shufflevector <4 x i64> %131, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %133 = shufflevector <2 x i64> %132, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %134 = bitcast <4 x i64> %133 to <8 x i32>
  %135 = tail call <16 x i16> @llvm.x86.avx2.packusdw(<8 x i32> %130, <8 x i32> %134) #8
  br label %136

136:                                              ; preds = %98, %118
  %137 = phi <16 x i16> [ %135, %118 ], [ %11, %98 ]
  %138 = bitcast <16 x i16> %137 to <4 x i64>
  %139 = shufflevector <4 x i64> %116, <4 x i64> %138, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %140 = trunc i32 %20 to i16
  %141 = add i16 %140, 1
  %142 = add i16 %140, 2
  %143 = add i16 %140, 3
  %144 = add i16 %140, 4
  %145 = add i16 %140, 5
  %146 = add i16 %140, 6
  %147 = add i16 %140, 7
  %148 = add i16 %140, 8
  %149 = add i16 %140, 9
  %150 = add i16 %140, 10
  %151 = add i16 %140, 11
  %152 = add i16 %140, 12
  %153 = add i16 %140, 13
  %154 = add i16 %140, 14
  %155 = add i16 %140, 15
  %156 = insertelement <16 x i16> undef, i16 %140, i32 0
  %157 = insertelement <16 x i16> %156, i16 %141, i32 1
  %158 = insertelement <16 x i16> %157, i16 %142, i32 2
  %159 = insertelement <16 x i16> %158, i16 %143, i32 3
  %160 = insertelement <16 x i16> %159, i16 %144, i32 4
  %161 = insertelement <16 x i16> %160, i16 %145, i32 5
  %162 = insertelement <16 x i16> %161, i16 %146, i32 6
  %163 = insertelement <16 x i16> %162, i16 %147, i32 7
  %164 = insertelement <16 x i16> %163, i16 %148, i32 8
  %165 = insertelement <16 x i16> %164, i16 %149, i32 9
  %166 = insertelement <16 x i16> %165, i16 %150, i32 10
  %167 = insertelement <16 x i16> %166, i16 %151, i32 11
  %168 = insertelement <16 x i16> %167, i16 %152, i32 12
  %169 = insertelement <16 x i16> %168, i16 %153, i32 13
  %170 = insertelement <16 x i16> %169, i16 %154, i32 14
  %171 = insertelement <16 x i16> %170, i16 %155, i32 15
  %172 = icmp sgt <16 x i16> %14, %171
  %173 = bitcast <4 x i64> %139 to <16 x i16>
  %174 = select <16 x i1> %172, <16 x i16> %173, <16 x i16> %11
  br label %175

175:                                              ; preds = %86, %136
  %176 = phi <16 x i16> [ %174, %136 ], [ %11, %86 ]
  %177 = bitcast i16* %19 to <16 x i16>*
  store <16 x i16> %176, <16 x i16>* %177, align 1
  %178 = add nsw i64 %91, 16
  %179 = sub nsw i64 %7, %178
  %180 = icmp slt i64 %179, 1
  br i1 %180, label %263, label %182

181:                                              ; preds = %439, %45, %49, %5, %22
  ret void

182:                                              ; preds = %175
  %183 = getelementptr inbounds i16, i16* %92, i64 16
  %184 = bitcast i16* %183 to <8 x i16>*
  %185 = load <8 x i16>, <8 x i16>* %184, align 1
  %186 = getelementptr inbounds i16, i16* %93, i64 16
  %187 = bitcast i16* %186 to <8 x i16>*
  %188 = load <8 x i16>, <8 x i16>* %187, align 1
  %189 = zext <8 x i16> %185 to <8 x i32>
  %190 = zext <8 x i16> %188 to <8 x i32>
  %191 = sub nsw <8 x i32> %190, %189
  %192 = shl nuw nsw <8 x i32> %189, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %193 = or <8 x i32> %192, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %194 = mul <8 x i32> %191, %90
  %195 = add <8 x i32> %194, %193
  %196 = lshr <8 x i32> %195, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %197 = bitcast <8 x i32> %196 to <4 x i64>
  %198 = shufflevector <4 x i64> %197, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %199 = shufflevector <2 x i64> %198, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %200 = bitcast <4 x i64> %199 to <8 x i32>
  %201 = tail call <16 x i16> @llvm.x86.avx2.packusdw(<8 x i32> %196, <8 x i32> %200) #8
  %202 = bitcast <16 x i16> %201 to <4 x i64>
  %203 = icmp sgt i64 %179, 8
  br i1 %203, label %204, label %224

204:                                              ; preds = %182
  %205 = getelementptr inbounds i16, i16* %94, i64 16
  %206 = bitcast i16* %205 to <8 x i16>*
  %207 = load <8 x i16>, <8 x i16>* %206, align 1
  %208 = getelementptr inbounds i16, i16* %95, i64 16
  %209 = bitcast i16* %208 to <8 x i16>*
  %210 = load <8 x i16>, <8 x i16>* %209, align 1
  %211 = zext <8 x i16> %207 to <8 x i32>
  %212 = zext <8 x i16> %210 to <8 x i32>
  %213 = sub nsw <8 x i32> %212, %211
  %214 = shl nuw nsw <8 x i32> %211, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %215 = or <8 x i32> %214, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %216 = mul <8 x i32> %213, %90
  %217 = add <8 x i32> %216, %215
  %218 = lshr <8 x i32> %217, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %219 = bitcast <8 x i32> %218 to <4 x i64>
  %220 = shufflevector <4 x i64> %219, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %221 = shufflevector <2 x i64> %220, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %222 = bitcast <4 x i64> %221 to <8 x i32>
  %223 = tail call <16 x i16> @llvm.x86.avx2.packusdw(<8 x i32> %218, <8 x i32> %222) #8
  br label %224

224:                                              ; preds = %204, %182
  %225 = phi <16 x i16> [ %223, %204 ], [ %11, %182 ]
  %226 = bitcast <16 x i16> %225 to <4 x i64>
  %227 = shufflevector <4 x i64> %202, <4 x i64> %226, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %228 = trunc i64 %178 to i16
  %229 = add i16 %228, 1
  %230 = add i16 %228, 2
  %231 = add i16 %228, 3
  %232 = add i16 %228, 4
  %233 = add i16 %228, 5
  %234 = add i16 %228, 6
  %235 = add i16 %228, 7
  %236 = add i16 %228, 8
  %237 = add i16 %228, 9
  %238 = add i16 %228, 10
  %239 = add i16 %228, 11
  %240 = add i16 %228, 12
  %241 = add i16 %228, 13
  %242 = add i16 %228, 14
  %243 = add i16 %228, 15
  %244 = insertelement <16 x i16> undef, i16 %228, i32 0
  %245 = insertelement <16 x i16> %244, i16 %229, i32 1
  %246 = insertelement <16 x i16> %245, i16 %230, i32 2
  %247 = insertelement <16 x i16> %246, i16 %231, i32 3
  %248 = insertelement <16 x i16> %247, i16 %232, i32 4
  %249 = insertelement <16 x i16> %248, i16 %233, i32 5
  %250 = insertelement <16 x i16> %249, i16 %234, i32 6
  %251 = insertelement <16 x i16> %250, i16 %235, i32 7
  %252 = insertelement <16 x i16> %251, i16 %236, i32 8
  %253 = insertelement <16 x i16> %252, i16 %237, i32 9
  %254 = insertelement <16 x i16> %253, i16 %238, i32 10
  %255 = insertelement <16 x i16> %254, i16 %239, i32 11
  %256 = insertelement <16 x i16> %255, i16 %240, i32 12
  %257 = insertelement <16 x i16> %256, i16 %241, i32 13
  %258 = insertelement <16 x i16> %257, i16 %242, i32 14
  %259 = insertelement <16 x i16> %258, i16 %243, i32 15
  %260 = icmp sgt <16 x i16> %14, %259
  %261 = bitcast <4 x i64> %227 to <16 x i16>
  %262 = select <16 x i1> %260, <16 x i16> %261, <16 x i16> %11
  br label %263

263:                                              ; preds = %224, %175
  %264 = phi <16 x i16> [ %262, %224 ], [ %11, %175 ]
  %265 = getelementptr inbounds i16, i16* %19, i64 16
  %266 = bitcast i16* %265 to <16 x i16>*
  store <16 x i16> %264, <16 x i16>* %266, align 1
  %267 = add nsw i64 %91, 32
  %268 = sub nsw i64 %7, %267
  %269 = icmp slt i64 %268, 1
  br i1 %269, label %351, label %270

270:                                              ; preds = %263
  %271 = getelementptr inbounds i16, i16* %92, i64 32
  %272 = bitcast i16* %271 to <8 x i16>*
  %273 = load <8 x i16>, <8 x i16>* %272, align 1
  %274 = getelementptr inbounds i16, i16* %93, i64 32
  %275 = bitcast i16* %274 to <8 x i16>*
  %276 = load <8 x i16>, <8 x i16>* %275, align 1
  %277 = zext <8 x i16> %273 to <8 x i32>
  %278 = zext <8 x i16> %276 to <8 x i32>
  %279 = sub nsw <8 x i32> %278, %277
  %280 = shl nuw nsw <8 x i32> %277, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %281 = or <8 x i32> %280, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %282 = mul <8 x i32> %279, %90
  %283 = add <8 x i32> %282, %281
  %284 = lshr <8 x i32> %283, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %285 = bitcast <8 x i32> %284 to <4 x i64>
  %286 = shufflevector <4 x i64> %285, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %287 = shufflevector <2 x i64> %286, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %288 = bitcast <4 x i64> %287 to <8 x i32>
  %289 = tail call <16 x i16> @llvm.x86.avx2.packusdw(<8 x i32> %284, <8 x i32> %288) #8
  %290 = bitcast <16 x i16> %289 to <4 x i64>
  %291 = icmp sgt i64 %268, 8
  br i1 %291, label %292, label %312

292:                                              ; preds = %270
  %293 = getelementptr inbounds i16, i16* %94, i64 32
  %294 = bitcast i16* %293 to <8 x i16>*
  %295 = load <8 x i16>, <8 x i16>* %294, align 1
  %296 = getelementptr inbounds i16, i16* %95, i64 32
  %297 = bitcast i16* %296 to <8 x i16>*
  %298 = load <8 x i16>, <8 x i16>* %297, align 1
  %299 = zext <8 x i16> %295 to <8 x i32>
  %300 = zext <8 x i16> %298 to <8 x i32>
  %301 = sub nsw <8 x i32> %300, %299
  %302 = shl nuw nsw <8 x i32> %299, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %303 = or <8 x i32> %302, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %304 = mul <8 x i32> %301, %90
  %305 = add <8 x i32> %304, %303
  %306 = lshr <8 x i32> %305, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %307 = bitcast <8 x i32> %306 to <4 x i64>
  %308 = shufflevector <4 x i64> %307, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %309 = shufflevector <2 x i64> %308, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %310 = bitcast <4 x i64> %309 to <8 x i32>
  %311 = tail call <16 x i16> @llvm.x86.avx2.packusdw(<8 x i32> %306, <8 x i32> %310) #8
  br label %312

312:                                              ; preds = %292, %270
  %313 = phi <16 x i16> [ %311, %292 ], [ %11, %270 ]
  %314 = bitcast <16 x i16> %313 to <4 x i64>
  %315 = shufflevector <4 x i64> %290, <4 x i64> %314, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %316 = trunc i64 %267 to i16
  %317 = add i16 %316, 1
  %318 = add i16 %316, 2
  %319 = add i16 %316, 3
  %320 = add i16 %316, 4
  %321 = add i16 %316, 5
  %322 = add i16 %316, 6
  %323 = add i16 %316, 7
  %324 = add i16 %316, 8
  %325 = add i16 %316, 9
  %326 = add i16 %316, 10
  %327 = add i16 %316, 11
  %328 = add i16 %316, 12
  %329 = add i16 %316, 13
  %330 = add i16 %316, 14
  %331 = add i16 %316, 15
  %332 = insertelement <16 x i16> undef, i16 %316, i32 0
  %333 = insertelement <16 x i16> %332, i16 %317, i32 1
  %334 = insertelement <16 x i16> %333, i16 %318, i32 2
  %335 = insertelement <16 x i16> %334, i16 %319, i32 3
  %336 = insertelement <16 x i16> %335, i16 %320, i32 4
  %337 = insertelement <16 x i16> %336, i16 %321, i32 5
  %338 = insertelement <16 x i16> %337, i16 %322, i32 6
  %339 = insertelement <16 x i16> %338, i16 %323, i32 7
  %340 = insertelement <16 x i16> %339, i16 %324, i32 8
  %341 = insertelement <16 x i16> %340, i16 %325, i32 9
  %342 = insertelement <16 x i16> %341, i16 %326, i32 10
  %343 = insertelement <16 x i16> %342, i16 %327, i32 11
  %344 = insertelement <16 x i16> %343, i16 %328, i32 12
  %345 = insertelement <16 x i16> %344, i16 %329, i32 13
  %346 = insertelement <16 x i16> %345, i16 %330, i32 14
  %347 = insertelement <16 x i16> %346, i16 %331, i32 15
  %348 = icmp sgt <16 x i16> %14, %347
  %349 = bitcast <4 x i64> %315 to <16 x i16>
  %350 = select <16 x i1> %348, <16 x i16> %349, <16 x i16> %11
  br label %351

351:                                              ; preds = %312, %263
  %352 = phi <16 x i16> [ %350, %312 ], [ %11, %263 ]
  %353 = getelementptr inbounds i16, i16* %19, i64 32
  %354 = bitcast i16* %353 to <16 x i16>*
  store <16 x i16> %352, <16 x i16>* %354, align 1
  %355 = add nsw i64 %91, 48
  %356 = sub nsw i64 %7, %355
  %357 = icmp slt i64 %356, 1
  br i1 %357, label %439, label %358

358:                                              ; preds = %351
  %359 = getelementptr inbounds i16, i16* %92, i64 48
  %360 = bitcast i16* %359 to <8 x i16>*
  %361 = load <8 x i16>, <8 x i16>* %360, align 1
  %362 = getelementptr inbounds i16, i16* %93, i64 48
  %363 = bitcast i16* %362 to <8 x i16>*
  %364 = load <8 x i16>, <8 x i16>* %363, align 1
  %365 = zext <8 x i16> %361 to <8 x i32>
  %366 = zext <8 x i16> %364 to <8 x i32>
  %367 = sub nsw <8 x i32> %366, %365
  %368 = shl nuw nsw <8 x i32> %365, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %369 = or <8 x i32> %368, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %370 = mul <8 x i32> %367, %90
  %371 = add <8 x i32> %370, %369
  %372 = lshr <8 x i32> %371, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %373 = bitcast <8 x i32> %372 to <4 x i64>
  %374 = shufflevector <4 x i64> %373, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %375 = shufflevector <2 x i64> %374, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %376 = bitcast <4 x i64> %375 to <8 x i32>
  %377 = tail call <16 x i16> @llvm.x86.avx2.packusdw(<8 x i32> %372, <8 x i32> %376) #8
  %378 = bitcast <16 x i16> %377 to <4 x i64>
  %379 = icmp sgt i64 %356, 8
  br i1 %379, label %380, label %400

380:                                              ; preds = %358
  %381 = getelementptr inbounds i16, i16* %94, i64 48
  %382 = bitcast i16* %381 to <8 x i16>*
  %383 = load <8 x i16>, <8 x i16>* %382, align 1
  %384 = getelementptr inbounds i16, i16* %95, i64 48
  %385 = bitcast i16* %384 to <8 x i16>*
  %386 = load <8 x i16>, <8 x i16>* %385, align 1
  %387 = zext <8 x i16> %383 to <8 x i32>
  %388 = zext <8 x i16> %386 to <8 x i32>
  %389 = sub nsw <8 x i32> %388, %387
  %390 = shl nuw nsw <8 x i32> %387, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %391 = or <8 x i32> %390, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %392 = mul <8 x i32> %389, %90
  %393 = add <8 x i32> %392, %391
  %394 = lshr <8 x i32> %393, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %395 = bitcast <8 x i32> %394 to <4 x i64>
  %396 = shufflevector <4 x i64> %395, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %397 = shufflevector <2 x i64> %396, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %398 = bitcast <4 x i64> %397 to <8 x i32>
  %399 = tail call <16 x i16> @llvm.x86.avx2.packusdw(<8 x i32> %394, <8 x i32> %398) #8
  br label %400

400:                                              ; preds = %380, %358
  %401 = phi <16 x i16> [ %399, %380 ], [ %11, %358 ]
  %402 = bitcast <16 x i16> %401 to <4 x i64>
  %403 = shufflevector <4 x i64> %378, <4 x i64> %402, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %404 = trunc i64 %355 to i16
  %405 = add i16 %404, 1
  %406 = add i16 %404, 2
  %407 = add i16 %404, 3
  %408 = add i16 %404, 4
  %409 = add i16 %404, 5
  %410 = add i16 %404, 6
  %411 = add i16 %404, 7
  %412 = add i16 %404, 8
  %413 = add i16 %404, 9
  %414 = add i16 %404, 10
  %415 = add i16 %404, 11
  %416 = add i16 %404, 12
  %417 = add i16 %404, 13
  %418 = add i16 %404, 14
  %419 = add i16 %404, 15
  %420 = insertelement <16 x i16> undef, i16 %404, i32 0
  %421 = insertelement <16 x i16> %420, i16 %405, i32 1
  %422 = insertelement <16 x i16> %421, i16 %406, i32 2
  %423 = insertelement <16 x i16> %422, i16 %407, i32 3
  %424 = insertelement <16 x i16> %423, i16 %408, i32 4
  %425 = insertelement <16 x i16> %424, i16 %409, i32 5
  %426 = insertelement <16 x i16> %425, i16 %410, i32 6
  %427 = insertelement <16 x i16> %426, i16 %411, i32 7
  %428 = insertelement <16 x i16> %427, i16 %412, i32 8
  %429 = insertelement <16 x i16> %428, i16 %413, i32 9
  %430 = insertelement <16 x i16> %429, i16 %414, i32 10
  %431 = insertelement <16 x i16> %430, i16 %415, i32 11
  %432 = insertelement <16 x i16> %431, i16 %416, i32 12
  %433 = insertelement <16 x i16> %432, i16 %417, i32 13
  %434 = insertelement <16 x i16> %433, i16 %418, i32 14
  %435 = insertelement <16 x i16> %434, i16 %419, i32 15
  %436 = icmp sgt <16 x i16> %14, %435
  %437 = bitcast <4 x i64> %403 to <16 x i16>
  %438 = select <16 x i1> %436, <16 x i16> %437, <16 x i16> %11
  br label %439

439:                                              ; preds = %400, %351
  %440 = phi <16 x i16> [ %438, %400 ], [ %11, %351 ]
  %441 = getelementptr inbounds i16, i16* %19, i64 48
  %442 = bitcast i16* %441 to <16 x i16>*
  store <16 x i16> %440, <16 x i16>* %442, align 1
  %443 = add nsw i32 %18, %4
  %444 = add nuw nsw i32 %17, 1
  %445 = getelementptr inbounds i16, i16* %19, i64 %2
  %446 = icmp eq i32 %444, %0
  br i1 %446, label %181, label %16
}

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_highbd_dr_prediction_z2_avx2(i16* nocapture, i64, i32, i32, i16* nocapture readonly, i16* readonly, i32, i32, i32, i32, i32) local_unnamed_addr #0 {
  %12 = alloca <4 x i64>, align 32
  switch i32 %2, label %918 [
    i32 4, label %13
    i32 8, label %400
  ]

13:                                               ; preds = %11
  %14 = icmp slt i32 %10, 12
  %15 = shl i32 -1, %6
  %16 = shl i32 -1, %7
  %17 = sub nsw i32 6, %6
  %18 = sub nsw i32 6, %7
  br i1 %14, label %19, label %207

19:                                               ; preds = %13
  %20 = trunc i32 %16 to i16
  %21 = insertelement <8 x i16> undef, i16 %20, i32 0
  %22 = shufflevector <8 x i16> %21, <8 x i16> undef, <8 x i32> zeroinitializer
  %23 = icmp sgt i32 %3, 0
  br i1 %23, label %24, label %1579

24:                                               ; preds = %19
  %25 = add nsw i32 %15, -1
  %26 = add i32 %15, %6
  %27 = icmp eq i32 %6, 0
  %28 = trunc i32 %9 to i16
  %29 = insertelement <8 x i16> undef, i16 %28, i32 0
  %30 = shufflevector <8 x i16> %29, <8 x i16> undef, <8 x i32> zeroinitializer
  %31 = mul <8 x i16> %30, <i16 -1, i16 -2, i16 -3, i16 -4, i16 0, i16 0, i16 0, i16 0>
  %32 = icmp eq i32 %7, 0
  br label %33

33:                                               ; preds = %179, %24
  %34 = phi i16* [ %0, %24 ], [ %205, %179 ]
  %35 = phi i32 [ 0, %24 ], [ %36, %179 ]
  %36 = add nuw nsw i32 %35, 1
  %37 = xor i32 %35, -1
  %38 = mul nsw i32 %37, %8
  %39 = ashr i32 %38, %17
  %40 = icmp slt i32 %39, %25
  br i1 %40, label %41, label %45

41:                                               ; preds = %33
  %42 = xor i32 %39, -1
  %43 = add i32 %15, %42
  %44 = ashr i32 %43, %6
  br label %45

45:                                               ; preds = %41, %33
  %46 = phi i32 [ %44, %41 ], [ 0, %33 ]
  %47 = sub i32 %26, %39
  %48 = ashr i32 %47, %6
  %49 = icmp sgt i32 %48, 0
  %50 = select i1 %49, i32 %48, i32 0
  %51 = icmp slt i32 %50, 4
  %52 = select i1 %51, i32 %50, i32 4
  %53 = icmp sgt i32 %46, 3
  br i1 %53, label %108, label %54

54:                                               ; preds = %45
  %55 = sext i32 %39 to i64
  %56 = getelementptr inbounds i16, i16* %4, i64 %55
  %57 = sext i32 %46 to i64
  %58 = getelementptr inbounds i16, i16* %56, i64 %57
  %59 = bitcast i16* %58 to <2 x i64>*
  %60 = load <2 x i64>, <2 x i64>* %59, align 1
  br i1 %27, label %79, label %61

61:                                               ; preds = %54
  %62 = getelementptr inbounds [4 x [16 x i8]], [4 x [16 x i8]]* @HighbdEvenOddMaskx4, i64 0, i64 %57, i64 0
  %63 = bitcast i8* %62 to <16 x i8>*
  %64 = load <16 x i8>, <16 x i8>* %63, align 16
  %65 = bitcast <2 x i64> %60 to <16 x i8>
  %66 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %65, <16 x i8> %64) #8
  %67 = shufflevector <16 x i8> %66, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %68 = trunc i32 %38 to i16
  %69 = mul nsw i32 %36, %8
  %70 = trunc i32 %69 to i16
  %71 = sub i16 64, %70
  %72 = sub i16 128, %70
  %73 = sub i16 192, %70
  %74 = insertelement <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, i16 %68, i32 0
  %75 = insertelement <8 x i16> %74, i16 %71, i32 1
  %76 = insertelement <8 x i16> %75, i16 %72, i32 2
  %77 = insertelement <8 x i16> %76, i16 %73, i32 3
  %78 = tail call <8 x i16> @llvm.x86.sse2.pslli.w(<8 x i16> %77, i32 %6) #8
  br label %96

79:                                               ; preds = %54
  %80 = getelementptr inbounds [8 x [16 x i8]], [8 x [16 x i8]]* @HighbdLoadMaskx, i64 0, i64 %57, i64 0
  %81 = bitcast i8* %80 to <16 x i8>*
  %82 = load <16 x i8>, <16 x i8>* %81, align 16
  %83 = bitcast <2 x i64> %60 to <16 x i8>
  %84 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %83, <16 x i8> %82) #8
  %85 = shufflevector <16 x i8> %84, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %86 = trunc i32 %38 to i16
  %87 = mul nsw i32 %36, %8
  %88 = trunc i32 %87 to i16
  %89 = sub i16 64, %88
  %90 = sub i16 128, %88
  %91 = sub i16 192, %88
  %92 = insertelement <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, i16 %86, i32 0
  %93 = insertelement <8 x i16> %92, i16 %89, i32 1
  %94 = insertelement <8 x i16> %93, i16 %90, i32 2
  %95 = insertelement <8 x i16> %94, i16 %91, i32 3
  br label %96

96:                                               ; preds = %79, %61
  %97 = phi <8 x i16> [ %95, %79 ], [ %78, %61 ]
  %98 = phi <16 x i8> [ %84, %79 ], [ %66, %61 ]
  %99 = phi <16 x i8> [ %85, %79 ], [ %67, %61 ]
  %100 = lshr <8 x i16> %97, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %101 = bitcast <8 x i16> %100 to <2 x i64>
  %102 = and <2 x i64> %101, <i64 8725857424048159, i64 8725857424048159>
  %103 = shufflevector <2 x i64> %102, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %104 = bitcast <16 x i8> %98 to <2 x i64>
  %105 = bitcast <16 x i8> %99 to <2 x i64>
  %106 = shufflevector <2 x i64> %104, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %107 = shufflevector <2 x i64> %105, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  br label %108

108:                                              ; preds = %96, %45
  %109 = phi <4 x i64> [ %103, %96 ], [ zeroinitializer, %45 ]
  %110 = phi <4 x i64> [ %107, %96 ], [ zeroinitializer, %45 ]
  %111 = phi <4 x i64> [ %106, %96 ], [ zeroinitializer, %45 ]
  %112 = icmp sgt i32 %15, %39
  br i1 %112, label %113, label %179

113:                                              ; preds = %108
  %114 = trunc i32 %35 to i16
  %115 = shl i16 %114, 6
  %116 = insertelement <8 x i16> undef, i16 %115, i32 0
  %117 = shufflevector <8 x i16> %116, <8 x i16> undef, <8 x i32> zeroinitializer
  %118 = add <8 x i16> %117, %31
  %119 = tail call <8 x i16> @llvm.x86.sse2.psrai.w(<8 x i16> %118, i32 %18) #8
  %120 = bitcast <8 x i16> %119 to <2 x i64>
  %121 = icmp sgt <8 x i16> %22, %119
  %122 = sext <8 x i1> %121 to <8 x i16>
  %123 = bitcast <8 x i16> %122 to <2 x i64>
  %124 = xor <2 x i64> %123, <i64 -1, i64 -1>
  %125 = and <2 x i64> %124, %120
  %126 = extractelement <2 x i64> %125, i32 0
  %127 = shl i64 %126, 48
  %128 = ashr exact i64 %127, 48
  %129 = getelementptr inbounds i16, i16* %5, i64 %128
  %130 = load i16, i16* %129, align 2
  %131 = bitcast <2 x i64> %125 to <8 x i16>
  %132 = extractelement <8 x i16> %131, i32 1
  %133 = sext i16 %132 to i64
  %134 = getelementptr inbounds i16, i16* %5, i64 %133
  %135 = load i16, i16* %134, align 2
  %136 = extractelement <8 x i16> %131, i32 2
  %137 = sext i16 %136 to i64
  %138 = getelementptr inbounds i16, i16* %5, i64 %137
  %139 = load i16, i16* %138, align 2
  %140 = extractelement <8 x i16> %131, i32 3
  %141 = sext i16 %140 to i64
  %142 = getelementptr inbounds i16, i16* %5, i64 %141
  %143 = load i16, i16* %142, align 2
  %144 = insertelement <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, i16 %130, i32 0
  %145 = insertelement <8 x i16> %144, i16 %135, i32 1
  %146 = insertelement <8 x i16> %145, i16 %139, i32 2
  %147 = insertelement <8 x i16> %146, i16 %143, i32 3
  %148 = bitcast <8 x i16> %147 to <2 x i64>
  %149 = add nsw i64 %128, 1
  %150 = getelementptr inbounds i16, i16* %5, i64 %149
  %151 = load i16, i16* %150, align 2
  %152 = add nsw i64 %133, 1
  %153 = getelementptr inbounds i16, i16* %5, i64 %152
  %154 = load i16, i16* %153, align 2
  %155 = add nsw i64 %137, 1
  %156 = getelementptr inbounds i16, i16* %5, i64 %155
  %157 = load i16, i16* %156, align 2
  %158 = add nsw i64 %141, 1
  %159 = getelementptr inbounds i16, i16* %5, i64 %158
  %160 = load i16, i16* %159, align 2
  %161 = insertelement <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, i16 %151, i32 0
  %162 = insertelement <8 x i16> %161, i16 %154, i32 1
  %163 = insertelement <8 x i16> %162, i16 %157, i32 2
  %164 = insertelement <8 x i16> %163, i16 %160, i32 3
  %165 = bitcast <8 x i16> %164 to <2 x i64>
  br i1 %32, label %168, label %166

166:                                              ; preds = %113
  %167 = tail call <8 x i16> @llvm.x86.sse2.pslli.w(<8 x i16> %118, i32 %7) #8
  br label %168

168:                                              ; preds = %166, %113
  %169 = phi <8 x i16> [ %167, %166 ], [ %118, %113 ]
  %170 = lshr <8 x i16> %169, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %171 = bitcast <8 x i16> %170 to <2 x i64>
  %172 = and <2 x i64> %171, <i64 8725857424048159, i64 8725857424048159>
  %173 = shufflevector <2 x i64> %148, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %174 = shufflevector <4 x i64> %111, <4 x i64> %173, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %175 = shufflevector <2 x i64> %165, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %176 = shufflevector <4 x i64> %110, <4 x i64> %175, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %177 = shufflevector <2 x i64> %172, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %178 = shufflevector <4 x i64> %109, <4 x i64> %177, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  br label %179

179:                                              ; preds = %168, %108
  %180 = phi <4 x i64> [ %178, %168 ], [ %109, %108 ]
  %181 = phi <4 x i64> [ %176, %168 ], [ %110, %108 ]
  %182 = phi <4 x i64> [ %174, %168 ], [ %111, %108 ]
  %183 = bitcast <4 x i64> %181 to <16 x i16>
  %184 = bitcast <4 x i64> %182 to <16 x i16>
  %185 = sub <16 x i16> %183, %184
  %186 = shl <16 x i16> %184, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %187 = or <16 x i16> %186, <i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16>
  %188 = bitcast <4 x i64> %180 to <16 x i16>
  %189 = mul <16 x i16> %185, %188
  %190 = add <16 x i16> %189, %187
  %191 = lshr <16 x i16> %190, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %192 = bitcast <16 x i16> %191 to <4 x i64>
  %193 = shufflevector <4 x i64> %192, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %194 = shufflevector <4 x i64> %192, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %195 = zext i32 %52 to i64
  %196 = getelementptr inbounds [17 x [16 x i16]], [17 x [16 x i16]]* bitcast (<{ [16 x i16], <{ i16, [15 x i16] }>, <{ i16, i16, [14 x i16] }>, <{ i16, i16, i16, [13 x i16] }>, <{ i16, i16, i16, i16, [12 x i16] }>, <{ i16, i16, i16, i16, i16, [11 x i16] }>, <{ i16, i16, i16, i16, i16, i16, [10 x i16] }>, <{ i16, i16, i16, i16, i16, i16, i16, [9 x i16] }>, <{ [8 x i16], [8 x i16] }>, [16 x i16], [16 x i16], [16 x i16], [16 x i16], [16 x i16], [16 x i16], [16 x i16], [16 x i16] }>* @HighbdBaseMask to [17 x [16 x i16]]*), i64 0, i64 %195, i64 0
  %197 = bitcast i16* %196 to <16 x i8>*
  %198 = load <16 x i8>, <16 x i8>* %197, align 32
  %199 = bitcast <2 x i64> %193 to <16 x i8>
  %200 = bitcast <2 x i64> %194 to <16 x i8>
  %201 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %199, <16 x i8> %200, <16 x i8> %198) #8
  %202 = bitcast <16 x i8> %201 to <2 x i64>
  %203 = extractelement <2 x i64> %202, i32 0
  %204 = bitcast i16* %34 to i64*
  store i64 %203, i64* %204, align 1
  %205 = getelementptr inbounds i16, i16* %34, i64 %1
  %206 = icmp eq i32 %36, %3
  br i1 %206, label %1579, label %33

207:                                              ; preds = %13
  %208 = insertelement <4 x i32> undef, i32 %16, i32 0
  %209 = shufflevector <4 x i32> %208, <4 x i32> undef, <4 x i32> zeroinitializer
  %210 = icmp sgt i32 %3, 0
  br i1 %210, label %211, label %1579

211:                                              ; preds = %207
  %212 = add nsw i32 %15, -1
  %213 = add i32 %15, %6
  %214 = icmp eq i32 %6, 0
  %215 = insertelement <4 x i32> undef, i32 %9, i32 0
  %216 = shufflevector <4 x i32> %215, <4 x i32> undef, <4 x i32> zeroinitializer
  %217 = mul <4 x i32> %216, <i32 -1, i32 -2, i32 -3, i32 -4>
  %218 = icmp eq i32 %7, 0
  br label %219

219:                                              ; preds = %368, %211
  %220 = phi i16* [ %0, %211 ], [ %398, %368 ]
  %221 = phi i32 [ 0, %211 ], [ %222, %368 ]
  %222 = add nuw nsw i32 %221, 1
  %223 = xor i32 %221, -1
  %224 = mul nsw i32 %223, %8
  %225 = ashr i32 %224, %17
  %226 = icmp slt i32 %225, %212
  br i1 %226, label %227, label %231

227:                                              ; preds = %219
  %228 = xor i32 %225, -1
  %229 = add i32 %15, %228
  %230 = ashr i32 %229, %6
  br label %231

231:                                              ; preds = %227, %219
  %232 = phi i32 [ %230, %227 ], [ 0, %219 ]
  %233 = sub i32 %213, %225
  %234 = ashr i32 %233, %6
  %235 = icmp sgt i32 %234, 0
  %236 = select i1 %235, i32 %234, i32 0
  %237 = icmp slt i32 %236, 4
  %238 = select i1 %237, i32 %236, i32 4
  %239 = icmp sgt i32 %232, 3
  br i1 %239, label %292, label %240

240:                                              ; preds = %231
  %241 = sext i32 %225 to i64
  %242 = getelementptr inbounds i16, i16* %4, i64 %241
  %243 = sext i32 %232 to i64
  %244 = getelementptr inbounds i16, i16* %242, i64 %243
  %245 = bitcast i16* %244 to <2 x i64>*
  %246 = load <2 x i64>, <2 x i64>* %245, align 1
  br i1 %214, label %263, label %247

247:                                              ; preds = %240
  %248 = getelementptr inbounds [4 x [16 x i8]], [4 x [16 x i8]]* @HighbdEvenOddMaskx4, i64 0, i64 %243, i64 0
  %249 = bitcast i8* %248 to <16 x i8>*
  %250 = load <16 x i8>, <16 x i8>* %249, align 16
  %251 = bitcast <2 x i64> %246 to <16 x i8>
  %252 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %251, <16 x i8> %250) #8
  %253 = shufflevector <16 x i8> %252, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %254 = mul nsw i32 %222, %8
  %255 = sub nsw i32 64, %254
  %256 = sub nsw i32 128, %254
  %257 = sub nsw i32 192, %254
  %258 = insertelement <4 x i32> undef, i32 %224, i32 0
  %259 = insertelement <4 x i32> %258, i32 %255, i32 1
  %260 = insertelement <4 x i32> %259, i32 %256, i32 2
  %261 = insertelement <4 x i32> %260, i32 %257, i32 3
  %262 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %261, i32 %6) #8
  br label %278

263:                                              ; preds = %240
  %264 = getelementptr inbounds [8 x [16 x i8]], [8 x [16 x i8]]* @HighbdLoadMaskx, i64 0, i64 %243, i64 0
  %265 = bitcast i8* %264 to <16 x i8>*
  %266 = load <16 x i8>, <16 x i8>* %265, align 16
  %267 = bitcast <2 x i64> %246 to <16 x i8>
  %268 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %267, <16 x i8> %266) #8
  %269 = shufflevector <16 x i8> %268, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %270 = mul nsw i32 %222, %8
  %271 = sub nsw i32 64, %270
  %272 = sub nsw i32 128, %270
  %273 = sub nsw i32 192, %270
  %274 = insertelement <4 x i32> undef, i32 %224, i32 0
  %275 = insertelement <4 x i32> %274, i32 %271, i32 1
  %276 = insertelement <4 x i32> %275, i32 %272, i32 2
  %277 = insertelement <4 x i32> %276, i32 %273, i32 3
  br label %278

278:                                              ; preds = %263, %247
  %279 = phi <4 x i32> [ %277, %263 ], [ %262, %247 ]
  %280 = phi <16 x i8> [ %268, %263 ], [ %252, %247 ]
  %281 = phi <16 x i8> [ %269, %263 ], [ %253, %247 ]
  %282 = lshr <4 x i32> %279, <i32 1, i32 1, i32 1, i32 1>
  %283 = bitcast <4 x i32> %282 to <2 x i64>
  %284 = and <2 x i64> %283, <i64 133143986207, i64 133143986207>
  %285 = shufflevector <2 x i64> %284, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %286 = bitcast <16 x i8> %280 to <8 x i16>
  %287 = zext <8 x i16> %286 to <8 x i32>
  %288 = bitcast <8 x i32> %287 to <4 x i64>
  %289 = bitcast <16 x i8> %281 to <8 x i16>
  %290 = zext <8 x i16> %289 to <8 x i32>
  %291 = bitcast <8 x i32> %290 to <4 x i64>
  br label %292

292:                                              ; preds = %278, %231
  %293 = phi <4 x i64> [ %285, %278 ], [ zeroinitializer, %231 ]
  %294 = phi <4 x i64> [ %291, %278 ], [ zeroinitializer, %231 ]
  %295 = phi <4 x i64> [ %288, %278 ], [ zeroinitializer, %231 ]
  %296 = icmp sgt i32 %15, %225
  br i1 %296, label %297, label %368

297:                                              ; preds = %292
  %298 = shl i32 %221, 6
  %299 = insertelement <4 x i32> undef, i32 %298, i32 0
  %300 = shufflevector <4 x i32> %299, <4 x i32> undef, <4 x i32> zeroinitializer
  %301 = add <4 x i32> %300, %217
  %302 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %301, i32 %18) #8
  %303 = icmp sgt <4 x i32> %209, %302
  %304 = select <4 x i1> %303, <4 x i32> zeroinitializer, <4 x i32> %302
  %305 = extractelement <4 x i32> %304, i32 0
  %306 = sext i32 %305 to i64
  %307 = getelementptr inbounds i16, i16* %5, i64 %306
  %308 = load i16, i16* %307, align 2
  %309 = zext i16 %308 to i32
  %310 = extractelement <4 x i32> %304, i32 1
  %311 = sext i32 %310 to i64
  %312 = getelementptr inbounds i16, i16* %5, i64 %311
  %313 = load i16, i16* %312, align 2
  %314 = zext i16 %313 to i32
  %315 = extractelement <4 x i32> %304, i32 2
  %316 = sext i32 %315 to i64
  %317 = getelementptr inbounds i16, i16* %5, i64 %316
  %318 = load i16, i16* %317, align 2
  %319 = zext i16 %318 to i32
  %320 = extractelement <4 x i32> %304, i32 3
  %321 = sext i32 %320 to i64
  %322 = getelementptr inbounds i16, i16* %5, i64 %321
  %323 = load i16, i16* %322, align 2
  %324 = zext i16 %323 to i32
  %325 = insertelement <4 x i32> undef, i32 %309, i32 0
  %326 = insertelement <4 x i32> %325, i32 %314, i32 1
  %327 = insertelement <4 x i32> %326, i32 %319, i32 2
  %328 = insertelement <4 x i32> %327, i32 %324, i32 3
  %329 = bitcast <4 x i32> %328 to <2 x i64>
  %330 = add nsw i32 %305, 1
  %331 = sext i32 %330 to i64
  %332 = getelementptr inbounds i16, i16* %5, i64 %331
  %333 = load i16, i16* %332, align 2
  %334 = zext i16 %333 to i32
  %335 = add nsw i32 %310, 1
  %336 = sext i32 %335 to i64
  %337 = getelementptr inbounds i16, i16* %5, i64 %336
  %338 = load i16, i16* %337, align 2
  %339 = zext i16 %338 to i32
  %340 = add nsw i32 %315, 1
  %341 = sext i32 %340 to i64
  %342 = getelementptr inbounds i16, i16* %5, i64 %341
  %343 = load i16, i16* %342, align 2
  %344 = zext i16 %343 to i32
  %345 = add nsw i32 %320, 1
  %346 = sext i32 %345 to i64
  %347 = getelementptr inbounds i16, i16* %5, i64 %346
  %348 = load i16, i16* %347, align 2
  %349 = zext i16 %348 to i32
  %350 = insertelement <4 x i32> undef, i32 %334, i32 0
  %351 = insertelement <4 x i32> %350, i32 %339, i32 1
  %352 = insertelement <4 x i32> %351, i32 %344, i32 2
  %353 = insertelement <4 x i32> %352, i32 %349, i32 3
  %354 = bitcast <4 x i32> %353 to <2 x i64>
  br i1 %218, label %357, label %355

355:                                              ; preds = %297
  %356 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %301, i32 %7) #8
  br label %357

357:                                              ; preds = %355, %297
  %358 = phi <4 x i32> [ %356, %355 ], [ %301, %297 ]
  %359 = lshr <4 x i32> %358, <i32 1, i32 1, i32 1, i32 1>
  %360 = bitcast <4 x i32> %359 to <2 x i64>
  %361 = and <2 x i64> %360, <i64 133143986207, i64 133143986207>
  %362 = shufflevector <2 x i64> %329, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %363 = shufflevector <4 x i64> %295, <4 x i64> %362, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %364 = shufflevector <2 x i64> %354, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %365 = shufflevector <4 x i64> %294, <4 x i64> %364, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %366 = shufflevector <2 x i64> %361, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %367 = shufflevector <4 x i64> %293, <4 x i64> %366, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  br label %368

368:                                              ; preds = %357, %292
  %369 = phi <4 x i64> [ %367, %357 ], [ %293, %292 ]
  %370 = phi <4 x i64> [ %365, %357 ], [ %294, %292 ]
  %371 = phi <4 x i64> [ %363, %357 ], [ %295, %292 ]
  %372 = bitcast <4 x i64> %370 to <8 x i32>
  %373 = bitcast <4 x i64> %371 to <8 x i32>
  %374 = sub <8 x i32> %372, %373
  %375 = shl <8 x i32> %373, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %376 = or <8 x i32> %375, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %377 = bitcast <4 x i64> %369 to <8 x i32>
  %378 = mul <8 x i32> %374, %377
  %379 = add <8 x i32> %378, %376
  %380 = lshr <8 x i32> %379, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %381 = bitcast <8 x i32> %380 to <4 x i64>
  %382 = shufflevector <4 x i64> %381, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %383 = bitcast <2 x i64> %382 to <4 x i32>
  %384 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %383, <4 x i32> %383) #8
  %385 = shufflevector <4 x i64> %381, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %386 = bitcast <2 x i64> %385 to <4 x i32>
  %387 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %386, <4 x i32> %386) #8
  %388 = zext i32 %238 to i64
  %389 = getelementptr inbounds [17 x [16 x i16]], [17 x [16 x i16]]* bitcast (<{ [16 x i16], <{ i16, [15 x i16] }>, <{ i16, i16, [14 x i16] }>, <{ i16, i16, i16, [13 x i16] }>, <{ i16, i16, i16, i16, [12 x i16] }>, <{ i16, i16, i16, i16, i16, [11 x i16] }>, <{ i16, i16, i16, i16, i16, i16, [10 x i16] }>, <{ i16, i16, i16, i16, i16, i16, i16, [9 x i16] }>, <{ [8 x i16], [8 x i16] }>, [16 x i16], [16 x i16], [16 x i16], [16 x i16], [16 x i16], [16 x i16], [16 x i16], [16 x i16] }>* @HighbdBaseMask to [17 x [16 x i16]]*), i64 0, i64 %388, i64 0
  %390 = bitcast i16* %389 to <16 x i8>*
  %391 = load <16 x i8>, <16 x i8>* %390, align 32
  %392 = bitcast <8 x i16> %384 to <16 x i8>
  %393 = bitcast <8 x i16> %387 to <16 x i8>
  %394 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %392, <16 x i8> %393, <16 x i8> %391) #8
  %395 = bitcast <16 x i8> %394 to <2 x i64>
  %396 = extractelement <2 x i64> %395, i32 0
  %397 = bitcast i16* %220 to i64*
  store i64 %396, i64* %397, align 1
  %398 = getelementptr inbounds i16, i16* %220, i64 %1
  %399 = icmp eq i32 %222, %3
  br i1 %399, label %1579, label %219

400:                                              ; preds = %11
  %401 = icmp slt i32 %10, 12
  %402 = shl i32 -1, %6
  %403 = shl i32 -1, %7
  %404 = sub nsw i32 6, %6
  %405 = sub nsw i32 6, %7
  br i1 %401, label %406, label %661

406:                                              ; preds = %400
  %407 = trunc i32 %403 to i16
  %408 = insertelement <8 x i16> undef, i16 %407, i32 0
  %409 = shufflevector <8 x i16> %408, <8 x i16> undef, <8 x i32> zeroinitializer
  %410 = icmp sgt i32 %3, 0
  br i1 %410, label %411, label %1579

411:                                              ; preds = %406
  %412 = add nsw i32 %402, -1
  %413 = add i32 %402, %6
  %414 = icmp eq i32 %6, 0
  %415 = trunc i32 %9 to i16
  %416 = insertelement <8 x i16> undef, i16 %415, i32 0
  %417 = shufflevector <8 x i16> %416, <8 x i16> undef, <8 x i32> zeroinitializer
  %418 = mul <8 x i16> %417, <i16 -1, i16 -2, i16 -3, i16 -4, i16 -5, i16 -6, i16 -7, i16 -8>
  %419 = icmp eq i32 %7, 0
  br label %420

420:                                              ; preds = %635, %411
  %421 = phi i16* [ %0, %411 ], [ %659, %635 ]
  %422 = phi i32 [ 0, %411 ], [ %423, %635 ]
  %423 = add nuw nsw i32 %422, 1
  %424 = xor i32 %422, -1
  %425 = mul nsw i32 %424, %8
  %426 = ashr i32 %425, %404
  %427 = icmp slt i32 %426, %412
  br i1 %427, label %428, label %432

428:                                              ; preds = %420
  %429 = xor i32 %426, -1
  %430 = add i32 %402, %429
  %431 = ashr i32 %430, %6
  br label %432

432:                                              ; preds = %428, %420
  %433 = phi i32 [ %431, %428 ], [ 0, %420 ]
  %434 = sub i32 %413, %426
  %435 = ashr i32 %434, %6
  %436 = icmp sgt i32 %435, 0
  %437 = select i1 %436, i32 %435, i32 0
  %438 = icmp slt i32 %437, 8
  %439 = select i1 %438, i32 %437, i32 8
  %440 = icmp sgt i32 %433, 7
  br i1 %440, label %528, label %441

441:                                              ; preds = %432
  %442 = sext i32 %426 to i64
  %443 = getelementptr inbounds i16, i16* %4, i64 %442
  %444 = sext i32 %433 to i64
  %445 = getelementptr inbounds i16, i16* %443, i64 %444
  %446 = bitcast i16* %445 to <2 x i64>*
  %447 = load <2 x i64>, <2 x i64>* %446, align 1
  br i1 %414, label %487, label %448

448:                                              ; preds = %441
  %449 = getelementptr inbounds i16, i16* %443, i64 8
  %450 = getelementptr inbounds i16, i16* %449, i64 %444
  %451 = bitcast i16* %450 to <16 x i8>*
  %452 = load <16 x i8>, <16 x i8>* %451, align 1
  %453 = getelementptr inbounds [8 x [32 x i8]], [8 x [32 x i8]]* @HighbdEvenOddMaskx, i64 0, i64 %444, i64 0
  %454 = bitcast i8* %453 to <16 x i8>*
  %455 = load <16 x i8>, <16 x i8>* %454, align 16
  %456 = bitcast <2 x i64> %447 to <16 x i8>
  %457 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %456, <16 x i8> %455) #8
  %458 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %452, <16 x i8> %455) #8
  %459 = getelementptr inbounds [8 x [32 x i8]], [8 x [32 x i8]]* @HighbdEvenOddMaskx, i64 0, i64 %444, i64 16
  %460 = bitcast i8* %459 to <16 x i8>*
  %461 = load <16 x i8>, <16 x i8>* %460, align 16
  %462 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %456, <16 x i8> %461) #8
  %463 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %452, <16 x i8> %461) #8
  %464 = icmp sgt <16 x i8> %455, <i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15>
  %465 = select <16 x i1> %464, <16 x i8> %458, <16 x i8> %457
  %466 = icmp sgt <16 x i8> %461, <i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15>
  %467 = select <16 x i1> %466, <16 x i8> %463, <16 x i8> %462
  %468 = trunc i32 %425 to i16
  %469 = mul nsw i32 %423, %8
  %470 = trunc i32 %469 to i16
  %471 = sub i16 64, %470
  %472 = sub i16 128, %470
  %473 = sub i16 192, %470
  %474 = sub i16 256, %470
  %475 = sub i16 320, %470
  %476 = sub i16 384, %470
  %477 = sub i16 448, %470
  %478 = insertelement <8 x i16> undef, i16 %468, i32 0
  %479 = insertelement <8 x i16> %478, i16 %471, i32 1
  %480 = insertelement <8 x i16> %479, i16 %472, i32 2
  %481 = insertelement <8 x i16> %480, i16 %473, i32 3
  %482 = insertelement <8 x i16> %481, i16 %474, i32 4
  %483 = insertelement <8 x i16> %482, i16 %475, i32 5
  %484 = insertelement <8 x i16> %483, i16 %476, i32 6
  %485 = insertelement <8 x i16> %484, i16 %477, i32 7
  %486 = tail call <8 x i16> @llvm.x86.sse2.pslli.w(<8 x i16> %485, i32 %6) #8
  br label %516

487:                                              ; preds = %441
  %488 = getelementptr inbounds i16, i16* %443, i64 1
  %489 = getelementptr inbounds i16, i16* %488, i64 %444
  %490 = bitcast i16* %489 to <16 x i8>*
  %491 = load <16 x i8>, <16 x i8>* %490, align 1
  %492 = getelementptr inbounds [8 x [16 x i8]], [8 x [16 x i8]]* @HighbdLoadMaskx, i64 0, i64 %444, i64 0
  %493 = bitcast i8* %492 to <16 x i8>*
  %494 = load <16 x i8>, <16 x i8>* %493, align 16
  %495 = bitcast <2 x i64> %447 to <16 x i8>
  %496 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %495, <16 x i8> %494) #8
  %497 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %491, <16 x i8> %494) #8
  %498 = trunc i32 %425 to i16
  %499 = mul nsw i32 %423, %8
  %500 = trunc i32 %499 to i16
  %501 = sub i16 64, %500
  %502 = sub i16 128, %500
  %503 = sub i16 192, %500
  %504 = sub i16 256, %500
  %505 = sub i16 320, %500
  %506 = sub i16 384, %500
  %507 = sub i16 448, %500
  %508 = insertelement <8 x i16> undef, i16 %498, i32 0
  %509 = insertelement <8 x i16> %508, i16 %501, i32 1
  %510 = insertelement <8 x i16> %509, i16 %502, i32 2
  %511 = insertelement <8 x i16> %510, i16 %503, i32 3
  %512 = insertelement <8 x i16> %511, i16 %504, i32 4
  %513 = insertelement <8 x i16> %512, i16 %505, i32 5
  %514 = insertelement <8 x i16> %513, i16 %506, i32 6
  %515 = insertelement <8 x i16> %514, i16 %507, i32 7
  br label %516

516:                                              ; preds = %487, %448
  %517 = phi <8 x i16> [ %515, %487 ], [ %486, %448 ]
  %518 = phi <16 x i8> [ %496, %487 ], [ %465, %448 ]
  %519 = phi <16 x i8> [ %497, %487 ], [ %467, %448 ]
  %520 = lshr <8 x i16> %517, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %521 = bitcast <8 x i16> %520 to <2 x i64>
  %522 = and <2 x i64> %521, <i64 8725857424048159, i64 8725857424048159>
  %523 = shufflevector <2 x i64> %522, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %524 = bitcast <16 x i8> %519 to <2 x i64>
  %525 = bitcast <16 x i8> %518 to <2 x i64>
  %526 = shufflevector <2 x i64> %525, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %527 = shufflevector <2 x i64> %524, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  br label %528

528:                                              ; preds = %516, %432
  %529 = phi <4 x i64> [ %523, %516 ], [ zeroinitializer, %432 ]
  %530 = phi <4 x i64> [ %527, %516 ], [ zeroinitializer, %432 ]
  %531 = phi <4 x i64> [ %526, %516 ], [ zeroinitializer, %432 ]
  %532 = icmp sgt i32 %402, %426
  br i1 %532, label %533, label %635

533:                                              ; preds = %528
  %534 = trunc i32 %422 to i16
  %535 = shl i16 %534, 6
  %536 = insertelement <8 x i16> undef, i16 %535, i32 0
  %537 = shufflevector <8 x i16> %536, <8 x i16> undef, <8 x i32> zeroinitializer
  %538 = add <8 x i16> %537, %418
  %539 = tail call <8 x i16> @llvm.x86.sse2.psrai.w(<8 x i16> %538, i32 %405) #8
  %540 = bitcast <8 x i16> %539 to <2 x i64>
  %541 = icmp sgt <8 x i16> %409, %539
  %542 = sext <8 x i1> %541 to <8 x i16>
  %543 = bitcast <8 x i16> %542 to <2 x i64>
  %544 = xor <2 x i64> %543, <i64 -1, i64 -1>
  %545 = and <2 x i64> %544, %540
  %546 = extractelement <2 x i64> %545, i32 0
  %547 = shl i64 %546, 48
  %548 = ashr exact i64 %547, 48
  %549 = getelementptr inbounds i16, i16* %5, i64 %548
  %550 = load i16, i16* %549, align 2
  %551 = bitcast <2 x i64> %545 to <8 x i16>
  %552 = extractelement <8 x i16> %551, i32 1
  %553 = sext i16 %552 to i64
  %554 = getelementptr inbounds i16, i16* %5, i64 %553
  %555 = load i16, i16* %554, align 2
  %556 = extractelement <8 x i16> %551, i32 2
  %557 = sext i16 %556 to i64
  %558 = getelementptr inbounds i16, i16* %5, i64 %557
  %559 = load i16, i16* %558, align 2
  %560 = extractelement <8 x i16> %551, i32 3
  %561 = sext i16 %560 to i64
  %562 = getelementptr inbounds i16, i16* %5, i64 %561
  %563 = load i16, i16* %562, align 2
  %564 = extractelement <8 x i16> %551, i32 4
  %565 = sext i16 %564 to i64
  %566 = getelementptr inbounds i16, i16* %5, i64 %565
  %567 = load i16, i16* %566, align 2
  %568 = extractelement <8 x i16> %551, i32 5
  %569 = sext i16 %568 to i64
  %570 = getelementptr inbounds i16, i16* %5, i64 %569
  %571 = load i16, i16* %570, align 2
  %572 = extractelement <8 x i16> %551, i32 6
  %573 = sext i16 %572 to i64
  %574 = getelementptr inbounds i16, i16* %5, i64 %573
  %575 = load i16, i16* %574, align 2
  %576 = extractelement <8 x i16> %551, i32 7
  %577 = sext i16 %576 to i64
  %578 = getelementptr inbounds i16, i16* %5, i64 %577
  %579 = load i16, i16* %578, align 2
  %580 = insertelement <8 x i16> undef, i16 %550, i32 0
  %581 = insertelement <8 x i16> %580, i16 %555, i32 1
  %582 = insertelement <8 x i16> %581, i16 %559, i32 2
  %583 = insertelement <8 x i16> %582, i16 %563, i32 3
  %584 = insertelement <8 x i16> %583, i16 %567, i32 4
  %585 = insertelement <8 x i16> %584, i16 %571, i32 5
  %586 = insertelement <8 x i16> %585, i16 %575, i32 6
  %587 = insertelement <8 x i16> %586, i16 %579, i32 7
  %588 = bitcast <8 x i16> %587 to <2 x i64>
  %589 = add nsw i64 %548, 1
  %590 = getelementptr inbounds i16, i16* %5, i64 %589
  %591 = load i16, i16* %590, align 2
  %592 = add nsw i64 %553, 1
  %593 = getelementptr inbounds i16, i16* %5, i64 %592
  %594 = load i16, i16* %593, align 2
  %595 = add nsw i64 %557, 1
  %596 = getelementptr inbounds i16, i16* %5, i64 %595
  %597 = load i16, i16* %596, align 2
  %598 = add nsw i64 %561, 1
  %599 = getelementptr inbounds i16, i16* %5, i64 %598
  %600 = load i16, i16* %599, align 2
  %601 = add nsw i64 %565, 1
  %602 = getelementptr inbounds i16, i16* %5, i64 %601
  %603 = load i16, i16* %602, align 2
  %604 = add nsw i64 %569, 1
  %605 = getelementptr inbounds i16, i16* %5, i64 %604
  %606 = load i16, i16* %605, align 2
  %607 = add nsw i64 %573, 1
  %608 = getelementptr inbounds i16, i16* %5, i64 %607
  %609 = load i16, i16* %608, align 2
  %610 = add nsw i64 %577, 1
  %611 = getelementptr inbounds i16, i16* %5, i64 %610
  %612 = load i16, i16* %611, align 2
  %613 = insertelement <8 x i16> undef, i16 %591, i32 0
  %614 = insertelement <8 x i16> %613, i16 %594, i32 1
  %615 = insertelement <8 x i16> %614, i16 %597, i32 2
  %616 = insertelement <8 x i16> %615, i16 %600, i32 3
  %617 = insertelement <8 x i16> %616, i16 %603, i32 4
  %618 = insertelement <8 x i16> %617, i16 %606, i32 5
  %619 = insertelement <8 x i16> %618, i16 %609, i32 6
  %620 = insertelement <8 x i16> %619, i16 %612, i32 7
  %621 = bitcast <8 x i16> %620 to <2 x i64>
  br i1 %419, label %624, label %622

622:                                              ; preds = %533
  %623 = tail call <8 x i16> @llvm.x86.sse2.pslli.w(<8 x i16> %538, i32 %7) #8
  br label %624

624:                                              ; preds = %622, %533
  %625 = phi <8 x i16> [ %623, %622 ], [ %538, %533 ]
  %626 = lshr <8 x i16> %625, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %627 = bitcast <8 x i16> %626 to <2 x i64>
  %628 = and <2 x i64> %627, <i64 8725857424048159, i64 8725857424048159>
  %629 = shufflevector <2 x i64> %588, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %630 = shufflevector <4 x i64> %531, <4 x i64> %629, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %631 = shufflevector <2 x i64> %621, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %632 = shufflevector <4 x i64> %530, <4 x i64> %631, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %633 = shufflevector <2 x i64> %628, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %634 = shufflevector <4 x i64> %529, <4 x i64> %633, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  br label %635

635:                                              ; preds = %624, %528
  %636 = phi <4 x i64> [ %634, %624 ], [ %529, %528 ]
  %637 = phi <4 x i64> [ %632, %624 ], [ %530, %528 ]
  %638 = phi <4 x i64> [ %630, %624 ], [ %531, %528 ]
  %639 = bitcast <4 x i64> %637 to <16 x i16>
  %640 = bitcast <4 x i64> %638 to <16 x i16>
  %641 = sub <16 x i16> %639, %640
  %642 = shl <16 x i16> %640, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %643 = or <16 x i16> %642, <i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16>
  %644 = bitcast <4 x i64> %636 to <16 x i16>
  %645 = mul <16 x i16> %641, %644
  %646 = add <16 x i16> %645, %643
  %647 = lshr <16 x i16> %646, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %648 = bitcast <16 x i16> %647 to <4 x i64>
  %649 = shufflevector <4 x i64> %648, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %650 = shufflevector <4 x i64> %648, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %651 = zext i32 %439 to i64
  %652 = getelementptr inbounds [17 x [16 x i16]], [17 x [16 x i16]]* bitcast (<{ [16 x i16], <{ i16, [15 x i16] }>, <{ i16, i16, [14 x i16] }>, <{ i16, i16, i16, [13 x i16] }>, <{ i16, i16, i16, i16, [12 x i16] }>, <{ i16, i16, i16, i16, i16, [11 x i16] }>, <{ i16, i16, i16, i16, i16, i16, [10 x i16] }>, <{ i16, i16, i16, i16, i16, i16, i16, [9 x i16] }>, <{ [8 x i16], [8 x i16] }>, [16 x i16], [16 x i16], [16 x i16], [16 x i16], [16 x i16], [16 x i16], [16 x i16], [16 x i16] }>* @HighbdBaseMask to [17 x [16 x i16]]*), i64 0, i64 %651, i64 0
  %653 = bitcast i16* %652 to <16 x i8>*
  %654 = load <16 x i8>, <16 x i8>* %653, align 32
  %655 = bitcast <2 x i64> %649 to <16 x i8>
  %656 = bitcast <2 x i64> %650 to <16 x i8>
  %657 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %655, <16 x i8> %656, <16 x i8> %654) #8
  %658 = bitcast i16* %421 to <16 x i8>*
  store <16 x i8> %657, <16 x i8>* %658, align 1
  %659 = getelementptr inbounds i16, i16* %421, i64 %1
  %660 = icmp eq i32 %423, %3
  br i1 %660, label %1579, label %420

661:                                              ; preds = %400
  %662 = insertelement <8 x i32> undef, i32 %403, i32 0
  %663 = shufflevector <8 x i32> %662, <8 x i32> undef, <8 x i32> zeroinitializer
  %664 = icmp sgt i32 %3, 0
  br i1 %664, label %665, label %1579

665:                                              ; preds = %661
  %666 = add nsw i32 %402, -1
  %667 = add i32 %402, %6
  %668 = icmp eq i32 %6, 0
  %669 = insertelement <8 x i32> undef, i32 %9, i32 0
  %670 = shufflevector <8 x i32> %669, <8 x i32> undef, <8 x i32> zeroinitializer
  %671 = mul <8 x i32> %670, <i32 -1, i32 -2, i32 -3, i32 -4, i32 -5, i32 -6, i32 -7, i32 -8>
  %672 = icmp eq i32 %7, 0
  br label %673

673:                                              ; preds = %906, %665
  %674 = phi i16* [ %0, %665 ], [ %916, %906 ]
  %675 = phi i32 [ 0, %665 ], [ %676, %906 ]
  %676 = add nuw nsw i32 %675, 1
  %677 = xor i32 %675, -1
  %678 = mul nsw i32 %677, %8
  %679 = ashr i32 %678, %404
  %680 = icmp slt i32 %679, %666
  br i1 %680, label %681, label %685

681:                                              ; preds = %673
  %682 = xor i32 %679, -1
  %683 = add i32 %402, %682
  %684 = ashr i32 %683, %6
  br label %685

685:                                              ; preds = %681, %673
  %686 = phi i32 [ %684, %681 ], [ 0, %673 ]
  %687 = sub i32 %667, %679
  %688 = ashr i32 %687, %6
  %689 = icmp sgt i32 %688, 0
  %690 = select i1 %689, i32 %688, i32 0
  %691 = icmp slt i32 %690, 8
  %692 = select i1 %691, i32 %690, i32 8
  %693 = icmp sgt i32 %686, 7
  br i1 %693, label %794, label %694

694:                                              ; preds = %685
  %695 = sext i32 %679 to i64
  %696 = getelementptr inbounds i16, i16* %4, i64 %695
  %697 = sext i32 %686 to i64
  %698 = getelementptr inbounds i16, i16* %696, i64 %697
  %699 = bitcast i16* %698 to <2 x i64>*
  %700 = load <2 x i64>, <2 x i64>* %699, align 1
  br i1 %668, label %741, label %701

701:                                              ; preds = %694
  %702 = getelementptr inbounds i16, i16* %696, i64 8
  %703 = getelementptr inbounds i16, i16* %702, i64 %697
  %704 = bitcast i16* %703 to <16 x i8>*
  %705 = load <16 x i8>, <16 x i8>* %704, align 1
  %706 = getelementptr inbounds [8 x [32 x i8]], [8 x [32 x i8]]* @HighbdEvenOddMaskx, i64 0, i64 %697, i64 0
  %707 = bitcast i8* %706 to <16 x i8>*
  %708 = load <16 x i8>, <16 x i8>* %707, align 16
  %709 = bitcast <2 x i64> %700 to <16 x i8>
  %710 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %709, <16 x i8> %708) #8
  %711 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %705, <16 x i8> %708) #8
  %712 = getelementptr inbounds [8 x [32 x i8]], [8 x [32 x i8]]* @HighbdEvenOddMaskx, i64 0, i64 %697, i64 16
  %713 = bitcast i8* %712 to <16 x i8>*
  %714 = load <16 x i8>, <16 x i8>* %713, align 16
  %715 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %709, <16 x i8> %714) #8
  %716 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %705, <16 x i8> %714) #8
  %717 = icmp sgt <16 x i8> %708, <i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15>
  %718 = select <16 x i1> %717, <16 x i8> %711, <16 x i8> %710
  %719 = icmp sgt <16 x i8> %714, <i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15>
  %720 = select <16 x i1> %719, <16 x i8> %716, <16 x i8> %715
  %721 = mul nsw i32 %676, %8
  %722 = insertelement <4 x i32> undef, i32 %721, i32 0
  %723 = shufflevector <4 x i32> %722, <4 x i32> undef, <4 x i32> zeroinitializer
  %724 = sub nsw <4 x i32> <i32 64, i32 128, i32 192, i32 256>, %723
  %725 = sub nsw i32 320, %721
  %726 = sub nsw i32 384, %721
  %727 = sub nsw i32 448, %721
  %728 = insertelement <8 x i32> undef, i32 %678, i32 0
  %729 = extractelement <4 x i32> %724, i32 0
  %730 = insertelement <8 x i32> %728, i32 %729, i32 1
  %731 = extractelement <4 x i32> %724, i32 1
  %732 = insertelement <8 x i32> %730, i32 %731, i32 2
  %733 = extractelement <4 x i32> %724, i32 2
  %734 = insertelement <8 x i32> %732, i32 %733, i32 3
  %735 = extractelement <4 x i32> %724, i32 3
  %736 = insertelement <8 x i32> %734, i32 %735, i32 4
  %737 = insertelement <8 x i32> %736, i32 %725, i32 5
  %738 = insertelement <8 x i32> %737, i32 %726, i32 6
  %739 = insertelement <8 x i32> %738, i32 %727, i32 7
  %740 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %739, i32 %6) #8
  br label %771

741:                                              ; preds = %694
  %742 = getelementptr inbounds i16, i16* %696, i64 1
  %743 = getelementptr inbounds i16, i16* %742, i64 %697
  %744 = bitcast i16* %743 to <16 x i8>*
  %745 = load <16 x i8>, <16 x i8>* %744, align 1
  %746 = getelementptr inbounds [8 x [16 x i8]], [8 x [16 x i8]]* @HighbdLoadMaskx, i64 0, i64 %697, i64 0
  %747 = bitcast i8* %746 to <16 x i8>*
  %748 = load <16 x i8>, <16 x i8>* %747, align 16
  %749 = bitcast <2 x i64> %700 to <16 x i8>
  %750 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %749, <16 x i8> %748) #8
  %751 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %745, <16 x i8> %748) #8
  %752 = mul nsw i32 %676, %8
  %753 = insertelement <4 x i32> undef, i32 %752, i32 0
  %754 = shufflevector <4 x i32> %753, <4 x i32> undef, <4 x i32> zeroinitializer
  %755 = sub nsw <4 x i32> <i32 64, i32 128, i32 192, i32 256>, %754
  %756 = sub nsw i32 320, %752
  %757 = sub nsw i32 384, %752
  %758 = sub nsw i32 448, %752
  %759 = insertelement <8 x i32> undef, i32 %678, i32 0
  %760 = extractelement <4 x i32> %755, i32 0
  %761 = insertelement <8 x i32> %759, i32 %760, i32 1
  %762 = extractelement <4 x i32> %755, i32 1
  %763 = insertelement <8 x i32> %761, i32 %762, i32 2
  %764 = extractelement <4 x i32> %755, i32 2
  %765 = insertelement <8 x i32> %763, i32 %764, i32 3
  %766 = extractelement <4 x i32> %755, i32 3
  %767 = insertelement <8 x i32> %765, i32 %766, i32 4
  %768 = insertelement <8 x i32> %767, i32 %756, i32 5
  %769 = insertelement <8 x i32> %768, i32 %757, i32 6
  %770 = insertelement <8 x i32> %769, i32 %758, i32 7
  br label %771

771:                                              ; preds = %741, %701
  %772 = phi <16 x i8> [ %718, %701 ], [ %750, %741 ]
  %773 = phi <16 x i8> [ %720, %701 ], [ %751, %741 ]
  %774 = phi <8 x i32> [ %740, %701 ], [ %770, %741 ]
  %775 = lshr <8 x i32> %774, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %776 = bitcast <16 x i8> %772 to <8 x i16>
  %777 = zext <8 x i16> %776 to <8 x i32>
  %778 = bitcast <16 x i8> %773 to <8 x i16>
  %779 = zext <8 x i16> %778 to <8 x i32>
  %780 = sub nsw <8 x i32> %779, %777
  %781 = shl nuw nsw <8 x i32> %777, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %782 = or <8 x i32> %781, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %783 = and <8 x i32> %775, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %784 = mul nsw <8 x i32> %780, %783
  %785 = add nsw <8 x i32> %784, %782
  %786 = lshr <8 x i32> %785, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %787 = bitcast <8 x i32> %786 to <4 x i64>
  %788 = shufflevector <4 x i64> %787, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %789 = shufflevector <2 x i64> %788, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %790 = bitcast <4 x i64> %789 to <8 x i32>
  %791 = tail call <16 x i16> @llvm.x86.avx2.packusdw(<8 x i32> %786, <8 x i32> %790) #8
  %792 = bitcast <16 x i16> %791 to <4 x i64>
  %793 = shufflevector <4 x i64> %792, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  br label %794

794:                                              ; preds = %771, %685
  %795 = phi <2 x i64> [ %793, %771 ], [ zeroinitializer, %685 ]
  %796 = icmp sgt i32 %402, %679
  br i1 %796, label %797, label %906

797:                                              ; preds = %794
  %798 = shl i32 %675, 6
  %799 = insertelement <8 x i32> undef, i32 %798, i32 0
  %800 = shufflevector <8 x i32> %799, <8 x i32> undef, <8 x i32> zeroinitializer
  %801 = add <8 x i32> %800, %671
  %802 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %801, i32 %405) #8
  %803 = icmp sgt <8 x i32> %663, %802
  %804 = select <8 x i1> %803, <8 x i32> zeroinitializer, <8 x i32> %802
  %805 = extractelement <8 x i32> %804, i32 0
  %806 = sext i32 %805 to i64
  %807 = getelementptr inbounds i16, i16* %5, i64 %806
  %808 = load i16, i16* %807, align 2
  %809 = extractelement <8 x i32> %804, i32 1
  %810 = sext i32 %809 to i64
  %811 = getelementptr inbounds i16, i16* %5, i64 %810
  %812 = load i16, i16* %811, align 2
  %813 = extractelement <8 x i32> %804, i32 2
  %814 = sext i32 %813 to i64
  %815 = getelementptr inbounds i16, i16* %5, i64 %814
  %816 = load i16, i16* %815, align 2
  %817 = extractelement <8 x i32> %804, i32 3
  %818 = sext i32 %817 to i64
  %819 = getelementptr inbounds i16, i16* %5, i64 %818
  %820 = load i16, i16* %819, align 2
  %821 = extractelement <8 x i32> %804, i32 4
  %822 = sext i32 %821 to i64
  %823 = getelementptr inbounds i16, i16* %5, i64 %822
  %824 = load i16, i16* %823, align 2
  %825 = extractelement <8 x i32> %804, i32 5
  %826 = sext i32 %825 to i64
  %827 = getelementptr inbounds i16, i16* %5, i64 %826
  %828 = load i16, i16* %827, align 2
  %829 = extractelement <8 x i32> %804, i32 6
  %830 = sext i32 %829 to i64
  %831 = getelementptr inbounds i16, i16* %5, i64 %830
  %832 = load i16, i16* %831, align 2
  %833 = extractelement <8 x i32> %804, i32 7
  %834 = sext i32 %833 to i64
  %835 = getelementptr inbounds i16, i16* %5, i64 %834
  %836 = load i16, i16* %835, align 2
  %837 = insertelement <8 x i16> undef, i16 %808, i32 0
  %838 = insertelement <8 x i16> %837, i16 %812, i32 1
  %839 = insertelement <8 x i16> %838, i16 %816, i32 2
  %840 = insertelement <8 x i16> %839, i16 %820, i32 3
  %841 = insertelement <8 x i16> %840, i16 %824, i32 4
  %842 = insertelement <8 x i16> %841, i16 %828, i32 5
  %843 = insertelement <8 x i16> %842, i16 %832, i32 6
  %844 = insertelement <8 x i16> %843, i16 %836, i32 7
  %845 = zext <8 x i16> %844 to <8 x i32>
  %846 = add nsw i32 %805, 1
  %847 = sext i32 %846 to i64
  %848 = getelementptr inbounds i16, i16* %5, i64 %847
  %849 = load i16, i16* %848, align 2
  %850 = add nsw i32 %809, 1
  %851 = sext i32 %850 to i64
  %852 = getelementptr inbounds i16, i16* %5, i64 %851
  %853 = load i16, i16* %852, align 2
  %854 = add nsw i32 %813, 1
  %855 = sext i32 %854 to i64
  %856 = getelementptr inbounds i16, i16* %5, i64 %855
  %857 = load i16, i16* %856, align 2
  %858 = add nsw i32 %817, 1
  %859 = sext i32 %858 to i64
  %860 = getelementptr inbounds i16, i16* %5, i64 %859
  %861 = load i16, i16* %860, align 2
  %862 = add nsw i32 %821, 1
  %863 = sext i32 %862 to i64
  %864 = getelementptr inbounds i16, i16* %5, i64 %863
  %865 = load i16, i16* %864, align 2
  %866 = add nsw i32 %825, 1
  %867 = sext i32 %866 to i64
  %868 = getelementptr inbounds i16, i16* %5, i64 %867
  %869 = load i16, i16* %868, align 2
  %870 = add nsw i32 %829, 1
  %871 = sext i32 %870 to i64
  %872 = getelementptr inbounds i16, i16* %5, i64 %871
  %873 = load i16, i16* %872, align 2
  %874 = add nsw i32 %833, 1
  %875 = sext i32 %874 to i64
  %876 = getelementptr inbounds i16, i16* %5, i64 %875
  %877 = load i16, i16* %876, align 2
  %878 = insertelement <8 x i16> undef, i16 %849, i32 0
  %879 = insertelement <8 x i16> %878, i16 %853, i32 1
  %880 = insertelement <8 x i16> %879, i16 %857, i32 2
  %881 = insertelement <8 x i16> %880, i16 %861, i32 3
  %882 = insertelement <8 x i16> %881, i16 %865, i32 4
  %883 = insertelement <8 x i16> %882, i16 %869, i32 5
  %884 = insertelement <8 x i16> %883, i16 %873, i32 6
  %885 = insertelement <8 x i16> %884, i16 %877, i32 7
  %886 = zext <8 x i16> %885 to <8 x i32>
  br i1 %672, label %889, label %887

887:                                              ; preds = %797
  %888 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %801, i32 %7) #8
  br label %889

889:                                              ; preds = %887, %797
  %890 = phi <8 x i32> [ %888, %887 ], [ %801, %797 ]
  %891 = lshr <8 x i32> %890, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %892 = sub nsw <8 x i32> %886, %845
  %893 = shl nuw nsw <8 x i32> %845, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %894 = or <8 x i32> %893, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %895 = and <8 x i32> %891, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %896 = mul nsw <8 x i32> %895, %892
  %897 = add nsw <8 x i32> %896, %894
  %898 = lshr <8 x i32> %897, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %899 = bitcast <8 x i32> %898 to <4 x i64>
  %900 = shufflevector <4 x i64> %899, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %901 = shufflevector <2 x i64> %900, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %902 = bitcast <4 x i64> %901 to <8 x i32>
  %903 = tail call <16 x i16> @llvm.x86.avx2.packusdw(<8 x i32> %898, <8 x i32> %902) #8
  %904 = bitcast <16 x i16> %903 to <4 x i64>
  %905 = shufflevector <4 x i64> %904, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  br label %906

906:                                              ; preds = %889, %794
  %907 = phi <2 x i64> [ %905, %889 ], [ %795, %794 ]
  %908 = zext i32 %692 to i64
  %909 = getelementptr inbounds [17 x [16 x i16]], [17 x [16 x i16]]* bitcast (<{ [16 x i16], <{ i16, [15 x i16] }>, <{ i16, i16, [14 x i16] }>, <{ i16, i16, i16, [13 x i16] }>, <{ i16, i16, i16, i16, [12 x i16] }>, <{ i16, i16, i16, i16, i16, [11 x i16] }>, <{ i16, i16, i16, i16, i16, i16, [10 x i16] }>, <{ i16, i16, i16, i16, i16, i16, i16, [9 x i16] }>, <{ [8 x i16], [8 x i16] }>, [16 x i16], [16 x i16], [16 x i16], [16 x i16], [16 x i16], [16 x i16], [16 x i16], [16 x i16] }>* @HighbdBaseMask to [17 x [16 x i16]]*), i64 0, i64 %908, i64 0
  %910 = bitcast i16* %909 to <16 x i8>*
  %911 = load <16 x i8>, <16 x i8>* %910, align 32
  %912 = bitcast <2 x i64> %795 to <16 x i8>
  %913 = bitcast <2 x i64> %907 to <16 x i8>
  %914 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %912, <16 x i8> %913, <16 x i8> %911) #8
  %915 = bitcast i16* %674 to <16 x i8>*
  store <16 x i8> %914, <16 x i8>* %915, align 1
  %916 = getelementptr inbounds i16, i16* %674, i64 %1
  %917 = icmp eq i32 %676, %3
  br i1 %917, label %1579, label %673

918:                                              ; preds = %11
  %919 = icmp slt i32 %10, 12
  br i1 %919, label %920, label %1230

920:                                              ; preds = %918
  %921 = trunc i32 %9 to i16
  %922 = insertelement <16 x i16> undef, i16 %921, i32 0
  %923 = shufflevector <16 x i16> %922, <16 x i16> undef, <16 x i32> zeroinitializer
  %924 = icmp sgt i32 %3, 0
  br i1 %924, label %925, label %1579

925:                                              ; preds = %920
  %926 = icmp sgt i32 %2, 0
  %927 = sext i32 %2 to i64
  br label %928

928:                                              ; preds = %944, %925
  %929 = phi i16* [ %0, %925 ], [ %945, %944 ]
  %930 = phi i32 [ 0, %925 ], [ %931, %944 ]
  %931 = add nuw nsw i32 %930, 1
  %932 = mul nsw i32 %931, %8
  br i1 %926, label %933, label %944

933:                                              ; preds = %928
  %934 = trunc i32 %932 to i16
  %935 = insertelement <16 x i16> undef, i16 %934, i32 0
  %936 = sub <16 x i16> <i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef>, %935
  %937 = lshr <16 x i16> %936, <i16 1, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0>
  %938 = and <16 x i16> %937, <i16 31, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef>
  %939 = shufflevector <16 x i16> %938, <16 x i16> undef, <16 x i32> zeroinitializer
  %940 = trunc i32 %930 to i16
  %941 = shl i16 %940, 6
  %942 = insertelement <16 x i16> undef, i16 %941, i32 0
  %943 = shufflevector <16 x i16> %942, <16 x i16> undef, <16 x i32> zeroinitializer
  br label %947

944:                                              ; preds = %1217, %928
  %945 = getelementptr inbounds i16, i16* %929, i64 %1
  %946 = icmp eq i32 %931, %3
  br i1 %946, label %1579, label %928

947:                                              ; preds = %1217, %933
  %948 = phi i64 [ 0, %933 ], [ %1228, %1217 ]
  %949 = trunc i64 %948 to i32
  %950 = trunc i64 %948 to i16
  %951 = insertelement <16 x i16> undef, i16 %950, i32 0
  %952 = shufflevector <16 x i16> %951, <16 x i16> undef, <16 x i32> zeroinitializer
  %953 = shl i32 %949, 6
  %954 = sub nsw i32 %953, %932
  %955 = ashr i32 %954, 6
  %956 = icmp slt i32 %954, -128
  %957 = sub nsw i32 -2, %955
  %958 = select i1 %956, i32 %957, i32 0
  %959 = icmp slt i32 %954, -1088
  br i1 %959, label %964, label %960

960:                                              ; preds = %947
  %961 = xor i32 %955, -1
  %962 = icmp sgt i32 %954, -1
  %963 = select i1 %962, i32 0, i32 %961
  br label %964

964:                                              ; preds = %960, %947
  %965 = phi i32 [ 16, %947 ], [ %963, %960 ]
  %966 = icmp slt i32 %958, 8
  br i1 %966, label %967, label %986

967:                                              ; preds = %964
  %968 = sext i32 %955 to i64
  %969 = getelementptr inbounds i16, i16* %4, i64 %968
  %970 = sext i32 %958 to i64
  %971 = getelementptr inbounds i16, i16* %969, i64 %970
  %972 = bitcast i16* %971 to <16 x i8>*
  %973 = load <16 x i8>, <16 x i8>* %972, align 1
  %974 = getelementptr inbounds i16, i16* %971, i64 1
  %975 = bitcast i16* %974 to <16 x i8>*
  %976 = load <16 x i8>, <16 x i8>* %975, align 1
  %977 = getelementptr inbounds [8 x [16 x i8]], [8 x [16 x i8]]* @HighbdLoadMaskx, i64 0, i64 %970, i64 0
  %978 = bitcast i8* %977 to <16 x i8>*
  %979 = load <16 x i8>, <16 x i8>* %978, align 16
  %980 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %973, <16 x i8> %979) #8
  %981 = bitcast <16 x i8> %980 to <2 x i64>
  %982 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %976, <16 x i8> %979) #8
  %983 = bitcast <16 x i8> %982 to <2 x i64>
  %984 = shufflevector <2 x i64> %981, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %985 = shufflevector <2 x i64> %983, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  br label %993

986:                                              ; preds = %964
  %987 = icmp eq i32 %958, 8
  %988 = add nsw i32 %958, -8
  %989 = select i1 %987, i32 0, i32 %988
  %990 = icmp slt i32 %989, 8
  br i1 %990, label %991, label %1018

991:                                              ; preds = %986
  %992 = sext i32 %955 to i64
  br label %993

993:                                              ; preds = %991, %967
  %994 = phi i64 [ %992, %991 ], [ %968, %967 ]
  %995 = phi i32 [ %989, %991 ], [ 0, %967 ]
  %996 = phi <4 x i64> [ zeroinitializer, %991 ], [ %984, %967 ]
  %997 = phi <4 x i64> [ zeroinitializer, %991 ], [ %985, %967 ]
  %998 = getelementptr inbounds i16, i16* %4, i64 %994
  %999 = sext i32 %995 to i64
  %1000 = getelementptr inbounds i16, i16* %998, i64 %999
  %1001 = getelementptr inbounds i16, i16* %1000, i64 8
  %1002 = bitcast i16* %1001 to <16 x i8>*
  %1003 = load <16 x i8>, <16 x i8>* %1002, align 1
  %1004 = getelementptr inbounds i16, i16* %1000, i64 9
  %1005 = bitcast i16* %1004 to <16 x i8>*
  %1006 = load <16 x i8>, <16 x i8>* %1005, align 1
  %1007 = getelementptr inbounds [8 x [16 x i8]], [8 x [16 x i8]]* @HighbdLoadMaskx, i64 0, i64 %999, i64 0
  %1008 = bitcast i8* %1007 to <16 x i8>*
  %1009 = load <16 x i8>, <16 x i8>* %1008, align 16
  %1010 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %1003, <16 x i8> %1009) #8
  %1011 = bitcast <16 x i8> %1010 to <2 x i64>
  %1012 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %1006, <16 x i8> %1009) #8
  %1013 = bitcast <16 x i8> %1012 to <2 x i64>
  %1014 = shufflevector <2 x i64> %1011, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1015 = shufflevector <4 x i64> %996, <4 x i64> %1014, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %1016 = shufflevector <2 x i64> %1013, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1017 = shufflevector <4 x i64> %997, <4 x i64> %1016, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  br label %1018

1018:                                             ; preds = %993, %986
  %1019 = phi <4 x i64> [ %1017, %993 ], [ zeroinitializer, %986 ]
  %1020 = phi <4 x i64> [ %1015, %993 ], [ zeroinitializer, %986 ]
  %1021 = bitcast <4 x i64> %1019 to <16 x i16>
  %1022 = bitcast <4 x i64> %1020 to <16 x i16>
  %1023 = sub <16 x i16> %1021, %1022
  %1024 = shl <16 x i16> %1022, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %1025 = or <16 x i16> %1024, <i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16>
  %1026 = mul <16 x i16> %1023, %939
  %1027 = add <16 x i16> %1026, %1025
  %1028 = lshr <16 x i16> %1027, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %1029 = icmp slt i32 %954, -64
  br i1 %1029, label %1030, label %1217

1030:                                             ; preds = %1018
  %1031 = add <16 x i16> %952, <i16 1, i16 2, i16 3, i16 4, i16 5, i16 6, i16 7, i16 8, i16 9, i16 10, i16 11, i16 12, i16 13, i16 14, i16 15, i16 16>
  %1032 = mul <16 x i16> %1031, %923
  %1033 = icmp ult <16 x i16> %1032, <i16 32767, i16 32767, i16 32767, i16 32767, i16 32767, i16 32767, i16 32767, i16 32767, i16 32767, i16 32767, i16 32767, i16 32767, i16 32767, i16 32767, i16 32767, i16 32767>
  %1034 = select <16 x i1> %1033, <16 x i16> %1032, <16 x i16> <i16 32767, i16 32767, i16 32767, i16 32767, i16 32767, i16 32767, i16 32767, i16 32767, i16 32767, i16 32767, i16 32767, i16 32767, i16 32767, i16 32767, i16 32767, i16 32767>
  %1035 = sub <16 x i16> %943, %1034
  %1036 = ashr <16 x i16> %1035, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %1037 = bitcast <16 x i16> %1036 to <4 x i64>
  %1038 = icmp slt <16 x i16> %1035, <i16 -64, i16 -64, i16 -64, i16 -64, i16 -64, i16 -64, i16 -64, i16 -64, i16 -64, i16 -64, i16 -64, i16 -64, i16 -64, i16 -64, i16 -64, i16 -64>
  %1039 = sext <16 x i1> %1038 to <16 x i16>
  %1040 = bitcast <16 x i16> %1039 to <4 x i64>
  %1041 = xor <4 x i64> %1040, <i64 -1, i64 -1, i64 -1, i64 -1>
  %1042 = and <4 x i64> %1041, %1037
  %1043 = extractelement <4 x i64> %1042, i32 0
  %1044 = shl i64 %1043, 48
  %1045 = ashr exact i64 %1044, 48
  %1046 = getelementptr inbounds i16, i16* %5, i64 %1045
  %1047 = load i16, i16* %1046, align 2
  %1048 = bitcast <4 x i64> %1042 to <16 x i16>
  %1049 = extractelement <16 x i16> %1048, i32 1
  %1050 = sext i16 %1049 to i64
  %1051 = getelementptr inbounds i16, i16* %5, i64 %1050
  %1052 = load i16, i16* %1051, align 2
  %1053 = extractelement <16 x i16> %1048, i32 2
  %1054 = sext i16 %1053 to i64
  %1055 = getelementptr inbounds i16, i16* %5, i64 %1054
  %1056 = load i16, i16* %1055, align 2
  %1057 = extractelement <16 x i16> %1048, i32 3
  %1058 = sext i16 %1057 to i64
  %1059 = getelementptr inbounds i16, i16* %5, i64 %1058
  %1060 = load i16, i16* %1059, align 2
  %1061 = extractelement <16 x i16> %1048, i32 4
  %1062 = sext i16 %1061 to i64
  %1063 = getelementptr inbounds i16, i16* %5, i64 %1062
  %1064 = load i16, i16* %1063, align 2
  %1065 = extractelement <16 x i16> %1048, i32 5
  %1066 = sext i16 %1065 to i64
  %1067 = getelementptr inbounds i16, i16* %5, i64 %1066
  %1068 = load i16, i16* %1067, align 2
  %1069 = extractelement <16 x i16> %1048, i32 6
  %1070 = sext i16 %1069 to i64
  %1071 = getelementptr inbounds i16, i16* %5, i64 %1070
  %1072 = load i16, i16* %1071, align 2
  %1073 = extractelement <16 x i16> %1048, i32 7
  %1074 = sext i16 %1073 to i64
  %1075 = getelementptr inbounds i16, i16* %5, i64 %1074
  %1076 = load i16, i16* %1075, align 2
  %1077 = extractelement <16 x i16> %1048, i32 8
  %1078 = sext i16 %1077 to i64
  %1079 = getelementptr inbounds i16, i16* %5, i64 %1078
  %1080 = load i16, i16* %1079, align 2
  %1081 = extractelement <16 x i16> %1048, i32 9
  %1082 = sext i16 %1081 to i64
  %1083 = getelementptr inbounds i16, i16* %5, i64 %1082
  %1084 = load i16, i16* %1083, align 2
  %1085 = extractelement <16 x i16> %1048, i32 10
  %1086 = sext i16 %1085 to i64
  %1087 = getelementptr inbounds i16, i16* %5, i64 %1086
  %1088 = load i16, i16* %1087, align 2
  %1089 = extractelement <16 x i16> %1048, i32 11
  %1090 = sext i16 %1089 to i64
  %1091 = getelementptr inbounds i16, i16* %5, i64 %1090
  %1092 = load i16, i16* %1091, align 2
  %1093 = extractelement <16 x i16> %1048, i32 12
  %1094 = sext i16 %1093 to i64
  %1095 = getelementptr inbounds i16, i16* %5, i64 %1094
  %1096 = load i16, i16* %1095, align 2
  %1097 = extractelement <16 x i16> %1048, i32 13
  %1098 = sext i16 %1097 to i64
  %1099 = getelementptr inbounds i16, i16* %5, i64 %1098
  %1100 = load i16, i16* %1099, align 2
  %1101 = extractelement <16 x i16> %1048, i32 14
  %1102 = sext i16 %1101 to i64
  %1103 = getelementptr inbounds i16, i16* %5, i64 %1102
  %1104 = load i16, i16* %1103, align 2
  %1105 = extractelement <16 x i16> %1048, i32 15
  %1106 = sext i16 %1105 to i64
  %1107 = getelementptr inbounds i16, i16* %5, i64 %1106
  %1108 = load i16, i16* %1107, align 2
  %1109 = insertelement <16 x i16> undef, i16 %1047, i32 0
  %1110 = insertelement <16 x i16> %1109, i16 %1052, i32 1
  %1111 = insertelement <16 x i16> %1110, i16 %1056, i32 2
  %1112 = insertelement <16 x i16> %1111, i16 %1060, i32 3
  %1113 = insertelement <16 x i16> %1112, i16 %1064, i32 4
  %1114 = insertelement <16 x i16> %1113, i16 %1068, i32 5
  %1115 = insertelement <16 x i16> %1114, i16 %1072, i32 6
  %1116 = insertelement <16 x i16> %1115, i16 %1076, i32 7
  %1117 = insertelement <16 x i16> %1116, i16 %1080, i32 8
  %1118 = insertelement <16 x i16> %1117, i16 %1084, i32 9
  %1119 = insertelement <16 x i16> %1118, i16 %1088, i32 10
  %1120 = insertelement <16 x i16> %1119, i16 %1092, i32 11
  %1121 = insertelement <16 x i16> %1120, i16 %1096, i32 12
  %1122 = insertelement <16 x i16> %1121, i16 %1100, i32 13
  %1123 = insertelement <16 x i16> %1122, i16 %1104, i32 14
  %1124 = insertelement <16 x i16> %1123, i16 %1108, i32 15
  %1125 = add <16 x i16> %1048, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %1126 = bitcast <16 x i16> %1125 to <4 x i64>
  %1127 = extractelement <4 x i64> %1126, i32 0
  %1128 = shl i64 %1127, 48
  %1129 = ashr exact i64 %1128, 48
  %1130 = getelementptr inbounds i16, i16* %5, i64 %1129
  %1131 = load i16, i16* %1130, align 2
  %1132 = extractelement <16 x i16> %1125, i32 1
  %1133 = sext i16 %1132 to i64
  %1134 = getelementptr inbounds i16, i16* %5, i64 %1133
  %1135 = load i16, i16* %1134, align 2
  %1136 = extractelement <16 x i16> %1125, i32 2
  %1137 = sext i16 %1136 to i64
  %1138 = getelementptr inbounds i16, i16* %5, i64 %1137
  %1139 = load i16, i16* %1138, align 2
  %1140 = extractelement <16 x i16> %1125, i32 3
  %1141 = sext i16 %1140 to i64
  %1142 = getelementptr inbounds i16, i16* %5, i64 %1141
  %1143 = load i16, i16* %1142, align 2
  %1144 = extractelement <16 x i16> %1125, i32 4
  %1145 = sext i16 %1144 to i64
  %1146 = getelementptr inbounds i16, i16* %5, i64 %1145
  %1147 = load i16, i16* %1146, align 2
  %1148 = extractelement <16 x i16> %1125, i32 5
  %1149 = sext i16 %1148 to i64
  %1150 = getelementptr inbounds i16, i16* %5, i64 %1149
  %1151 = load i16, i16* %1150, align 2
  %1152 = extractelement <16 x i16> %1125, i32 6
  %1153 = sext i16 %1152 to i64
  %1154 = getelementptr inbounds i16, i16* %5, i64 %1153
  %1155 = load i16, i16* %1154, align 2
  %1156 = extractelement <16 x i16> %1125, i32 7
  %1157 = sext i16 %1156 to i64
  %1158 = getelementptr inbounds i16, i16* %5, i64 %1157
  %1159 = load i16, i16* %1158, align 2
  %1160 = extractelement <16 x i16> %1125, i32 8
  %1161 = sext i16 %1160 to i64
  %1162 = getelementptr inbounds i16, i16* %5, i64 %1161
  %1163 = load i16, i16* %1162, align 2
  %1164 = extractelement <16 x i16> %1125, i32 9
  %1165 = sext i16 %1164 to i64
  %1166 = getelementptr inbounds i16, i16* %5, i64 %1165
  %1167 = load i16, i16* %1166, align 2
  %1168 = extractelement <16 x i16> %1125, i32 10
  %1169 = sext i16 %1168 to i64
  %1170 = getelementptr inbounds i16, i16* %5, i64 %1169
  %1171 = load i16, i16* %1170, align 2
  %1172 = extractelement <16 x i16> %1125, i32 11
  %1173 = sext i16 %1172 to i64
  %1174 = getelementptr inbounds i16, i16* %5, i64 %1173
  %1175 = load i16, i16* %1174, align 2
  %1176 = extractelement <16 x i16> %1125, i32 12
  %1177 = sext i16 %1176 to i64
  %1178 = getelementptr inbounds i16, i16* %5, i64 %1177
  %1179 = load i16, i16* %1178, align 2
  %1180 = extractelement <16 x i16> %1125, i32 13
  %1181 = sext i16 %1180 to i64
  %1182 = getelementptr inbounds i16, i16* %5, i64 %1181
  %1183 = load i16, i16* %1182, align 2
  %1184 = extractelement <16 x i16> %1125, i32 14
  %1185 = sext i16 %1184 to i64
  %1186 = getelementptr inbounds i16, i16* %5, i64 %1185
  %1187 = load i16, i16* %1186, align 2
  %1188 = extractelement <16 x i16> %1125, i32 15
  %1189 = sext i16 %1188 to i64
  %1190 = getelementptr inbounds i16, i16* %5, i64 %1189
  %1191 = load i16, i16* %1190, align 2
  %1192 = insertelement <16 x i16> undef, i16 %1131, i32 0
  %1193 = insertelement <16 x i16> %1192, i16 %1135, i32 1
  %1194 = insertelement <16 x i16> %1193, i16 %1139, i32 2
  %1195 = insertelement <16 x i16> %1194, i16 %1143, i32 3
  %1196 = insertelement <16 x i16> %1195, i16 %1147, i32 4
  %1197 = insertelement <16 x i16> %1196, i16 %1151, i32 5
  %1198 = insertelement <16 x i16> %1197, i16 %1155, i32 6
  %1199 = insertelement <16 x i16> %1198, i16 %1159, i32 7
  %1200 = insertelement <16 x i16> %1199, i16 %1163, i32 8
  %1201 = insertelement <16 x i16> %1200, i16 %1167, i32 9
  %1202 = insertelement <16 x i16> %1201, i16 %1171, i32 10
  %1203 = insertelement <16 x i16> %1202, i16 %1175, i32 11
  %1204 = insertelement <16 x i16> %1203, i16 %1179, i32 12
  %1205 = insertelement <16 x i16> %1204, i16 %1183, i32 13
  %1206 = insertelement <16 x i16> %1205, i16 %1187, i32 14
  %1207 = insertelement <16 x i16> %1206, i16 %1191, i32 15
  %1208 = lshr <16 x i16> %1035, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %1209 = and <16 x i16> %1208, <i16 31, i16 31, i16 31, i16 31, i16 31, i16 31, i16 31, i16 31, i16 31, i16 31, i16 31, i16 31, i16 31, i16 31, i16 31, i16 31>
  %1210 = sub <16 x i16> %1207, %1124
  %1211 = shl <16 x i16> %1124, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %1212 = or <16 x i16> %1211, <i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16>
  %1213 = mul <16 x i16> %1210, %1209
  %1214 = add <16 x i16> %1213, %1212
  %1215 = lshr <16 x i16> %1214, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %1216 = bitcast <16 x i16> %1215 to <4 x i64>
  br label %1217

1217:                                             ; preds = %1030, %1018
  %1218 = phi <4 x i64> [ %1216, %1030 ], [ zeroinitializer, %1018 ]
  %1219 = sext i32 %965 to i64
  %1220 = getelementptr inbounds [17 x [16 x i16]], [17 x [16 x i16]]* bitcast (<{ [16 x i16], <{ i16, [15 x i16] }>, <{ i16, i16, [14 x i16] }>, <{ i16, i16, i16, [13 x i16] }>, <{ i16, i16, i16, i16, [12 x i16] }>, <{ i16, i16, i16, i16, i16, [11 x i16] }>, <{ i16, i16, i16, i16, i16, i16, [10 x i16] }>, <{ i16, i16, i16, i16, i16, i16, i16, [9 x i16] }>, <{ [8 x i16], [8 x i16] }>, [16 x i16], [16 x i16], [16 x i16], [16 x i16], [16 x i16], [16 x i16], [16 x i16], [16 x i16] }>* @HighbdBaseMask to [17 x [16 x i16]]*), i64 0, i64 %1219, i64 0
  %1221 = bitcast i16* %1220 to <32 x i8>*
  %1222 = load <32 x i8>, <32 x i8>* %1221, align 32
  %1223 = bitcast <16 x i16> %1028 to <32 x i8>
  %1224 = bitcast <4 x i64> %1218 to <32 x i8>
  %1225 = tail call <32 x i8> @llvm.x86.avx2.pblendvb(<32 x i8> %1223, <32 x i8> %1224, <32 x i8> %1222) #8
  %1226 = getelementptr inbounds i16, i16* %929, i64 %948
  %1227 = bitcast i16* %1226 to <32 x i8>*
  store <32 x i8> %1225, <32 x i8>* %1227, align 1
  %1228 = add nuw nsw i64 %948, 16
  %1229 = icmp slt i64 %1228, %927
  br i1 %1229, label %947, label %944

1230:                                             ; preds = %918
  %1231 = bitcast <4 x i64>* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1231)
  store <4 x i64> <i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206>, <4 x i64>* %12, align 32
  %1232 = insertelement <8 x i32> undef, i32 %9, i32 0
  %1233 = shufflevector <8 x i32> %1232, <8 x i32> undef, <8 x i32> zeroinitializer
  %1234 = icmp sgt i32 %3, 0
  br i1 %1234, label %1235, label %1578

1235:                                             ; preds = %1230
  %1236 = icmp sgt i32 %2, 0
  %1237 = sext i32 %2 to i64
  %1238 = getelementptr inbounds i8, i8* %1231, i64 4
  %1239 = getelementptr inbounds i8, i8* %1231, i64 20
  %1240 = bitcast i8* %1239 to i32*
  %1241 = getelementptr inbounds <4 x i64>, <4 x i64>* %12, i64 0, i64 3
  %1242 = bitcast i64* %1241 to i32*
  %1243 = getelementptr inbounds i8, i8* %1231, i64 28
  %1244 = bitcast i8* %1243 to i32*
  %1245 = bitcast i8* %1238 to <4 x i32>*
  br label %1246

1246:                                             ; preds = %1260, %1235
  %1247 = phi i16* [ %0, %1235 ], [ %1261, %1260 ]
  %1248 = phi i32 [ 0, %1235 ], [ %1249, %1260 ]
  %1249 = add nuw nsw i32 %1248, 1
  br i1 %1236, label %1250, label %1260

1250:                                             ; preds = %1246
  %1251 = mul nsw i32 %1249, %8
  %1252 = insertelement <8 x i32> undef, i32 %1251, i32 0
  %1253 = sub <8 x i32> <i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>, %1252
  %1254 = lshr <8 x i32> %1253, <i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>
  %1255 = and <8 x i32> %1254, <i32 31, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1256 = shufflevector <8 x i32> %1255, <8 x i32> undef, <8 x i32> zeroinitializer
  %1257 = shl i32 %1248, 6
  %1258 = insertelement <8 x i32> undef, i32 %1257, i32 0
  %1259 = shufflevector <8 x i32> %1258, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %1263

1260:                                             ; preds = %1565, %1246
  %1261 = getelementptr inbounds i16, i16* %1247, i64 %1
  %1262 = icmp eq i32 %1249, %3
  br i1 %1262, label %1578, label %1246

1263:                                             ; preds = %1565, %1250
  %1264 = phi i64 [ 0, %1250 ], [ %1576, %1565 ]
  %1265 = trunc i64 %1264 to i32
  %1266 = insertelement <8 x i32> undef, i32 %1265, i32 0
  %1267 = shufflevector <8 x i32> %1266, <8 x i32> undef, <8 x i32> zeroinitializer
  %1268 = shl i32 %1265, 6
  %1269 = sub nsw i32 %1268, %1251
  %1270 = ashr i32 %1269, 6
  %1271 = icmp slt i32 %1269, -128
  %1272 = sub nsw i32 -2, %1270
  %1273 = select i1 %1271, i32 %1272, i32 0
  %1274 = icmp slt i32 %1269, -1088
  br i1 %1274, label %1279, label %1275

1275:                                             ; preds = %1263
  %1276 = xor i32 %1270, -1
  %1277 = icmp sgt i32 %1269, -1
  %1278 = select i1 %1277, i32 0, i32 %1276
  br label %1279

1279:                                             ; preds = %1275, %1263
  %1280 = phi i32 [ 16, %1263 ], [ %1278, %1275 ]
  %1281 = icmp sgt i32 %1273, 7
  br i1 %1281, label %1313, label %1282

1282:                                             ; preds = %1279
  %1283 = sext i32 %1270 to i64
  %1284 = getelementptr inbounds i16, i16* %4, i64 %1283
  %1285 = sext i32 %1273 to i64
  %1286 = getelementptr inbounds i16, i16* %1284, i64 %1285
  %1287 = bitcast i16* %1286 to <16 x i8>*
  %1288 = load <16 x i8>, <16 x i8>* %1287, align 1
  %1289 = getelementptr inbounds i16, i16* %1286, i64 1
  %1290 = bitcast i16* %1289 to <16 x i8>*
  %1291 = load <16 x i8>, <16 x i8>* %1290, align 1
  %1292 = getelementptr inbounds [8 x [16 x i8]], [8 x [16 x i8]]* @HighbdLoadMaskx, i64 0, i64 %1285, i64 0
  %1293 = bitcast i8* %1292 to <16 x i8>*
  %1294 = load <16 x i8>, <16 x i8>* %1293, align 16
  %1295 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %1288, <16 x i8> %1294) #8
  %1296 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %1291, <16 x i8> %1294) #8
  %1297 = bitcast <16 x i8> %1295 to <8 x i16>
  %1298 = zext <8 x i16> %1297 to <8 x i32>
  %1299 = bitcast <16 x i8> %1296 to <8 x i16>
  %1300 = zext <8 x i16> %1299 to <8 x i32>
  %1301 = sub nsw <8 x i32> %1300, %1298
  %1302 = shl nuw nsw <8 x i32> %1298, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %1303 = or <8 x i32> %1302, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %1304 = mul nsw <8 x i32> %1301, %1256
  %1305 = add nsw <8 x i32> %1304, %1303
  %1306 = lshr <8 x i32> %1305, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %1307 = bitcast <8 x i32> %1306 to <4 x i64>
  %1308 = shufflevector <4 x i64> %1307, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %1309 = shufflevector <2 x i64> %1308, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1310 = bitcast <4 x i64> %1309 to <8 x i32>
  %1311 = tail call <16 x i16> @llvm.x86.avx2.packusdw(<8 x i32> %1306, <8 x i32> %1310) #8
  %1312 = bitcast <16 x i16> %1311 to <4 x i64>
  br label %1313

1313:                                             ; preds = %1282, %1279
  %1314 = phi <4 x i64> [ %1312, %1282 ], [ zeroinitializer, %1279 ]
  %1315 = icmp slt i32 %1269, -640
  %1316 = sub nsw i32 -10, %1270
  %1317 = select i1 %1315, i32 %1316, i32 0
  %1318 = icmp sgt i32 %1317, 7
  br i1 %1318, label %1351, label %1319

1319:                                             ; preds = %1313
  %1320 = sext i32 %1270 to i64
  %1321 = getelementptr inbounds i16, i16* %4, i64 %1320
  %1322 = sext i32 %1317 to i64
  %1323 = getelementptr inbounds i16, i16* %1321, i64 %1322
  %1324 = getelementptr inbounds i16, i16* %1323, i64 8
  %1325 = bitcast i16* %1324 to <16 x i8>*
  %1326 = load <16 x i8>, <16 x i8>* %1325, align 1
  %1327 = getelementptr inbounds i16, i16* %1323, i64 9
  %1328 = bitcast i16* %1327 to <16 x i8>*
  %1329 = load <16 x i8>, <16 x i8>* %1328, align 1
  %1330 = getelementptr inbounds [8 x [16 x i8]], [8 x [16 x i8]]* @HighbdLoadMaskx, i64 0, i64 %1322, i64 0
  %1331 = bitcast i8* %1330 to <16 x i8>*
  %1332 = load <16 x i8>, <16 x i8>* %1331, align 16
  %1333 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %1326, <16 x i8> %1332) #8
  %1334 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %1329, <16 x i8> %1332) #8
  %1335 = bitcast <16 x i8> %1333 to <8 x i16>
  %1336 = zext <8 x i16> %1335 to <8 x i32>
  %1337 = bitcast <16 x i8> %1334 to <8 x i16>
  %1338 = zext <8 x i16> %1337 to <8 x i32>
  %1339 = sub nsw <8 x i32> %1338, %1336
  %1340 = shl nuw nsw <8 x i32> %1336, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %1341 = or <8 x i32> %1340, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %1342 = mul nsw <8 x i32> %1339, %1256
  %1343 = add nsw <8 x i32> %1342, %1341
  %1344 = lshr <8 x i32> %1343, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %1345 = bitcast <8 x i32> %1344 to <4 x i64>
  %1346 = shufflevector <4 x i64> %1345, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %1347 = shufflevector <2 x i64> %1346, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1348 = bitcast <4 x i64> %1347 to <8 x i32>
  %1349 = tail call <16 x i16> @llvm.x86.avx2.packusdw(<8 x i32> %1344, <8 x i32> %1348) #8
  %1350 = bitcast <16 x i16> %1349 to <4 x i64>
  br label %1351

1351:                                             ; preds = %1319, %1313
  %1352 = phi <4 x i64> [ %1350, %1319 ], [ zeroinitializer, %1313 ]
  %1353 = shufflevector <4 x i64> %1314, <4 x i64> %1352, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %1354 = icmp slt i32 %1269, -64
  br i1 %1354, label %1355, label %1565

1355:                                             ; preds = %1351
  %1356 = add <8 x i32> %1267, <i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8>
  %1357 = mul <8 x i32> %1356, %1233
  %1358 = sub <8 x i32> %1259, %1357
  %1359 = ashr <8 x i32> %1358, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %1360 = icmp sgt <8 x i32> %1358, <i32 -65, i32 -65, i32 -65, i32 -65, i32 -65, i32 -65, i32 -65, i32 -65>
  %1361 = add <8 x i32> %1267, <i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16>
  %1362 = mul <8 x i32> %1361, %1233
  %1363 = sub <8 x i32> %1259, %1362
  %1364 = ashr <8 x i32> %1363, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %1365 = bitcast <8 x i32> %1364 to <4 x i64>
  %1366 = icmp slt <8 x i32> %1363, <i32 -64, i32 -64, i32 -64, i32 -64, i32 -64, i32 -64, i32 -64, i32 -64>
  %1367 = sext <8 x i1> %1366 to <8 x i32>
  %1368 = bitcast <8 x i32> %1367 to <4 x i64>
  %1369 = xor <4 x i64> %1368, <i64 -1, i64 -1, i64 -1, i64 -1>
  %1370 = and <4 x i64> %1369, %1365
  store <4 x i64> %1370, <4 x i64>* %12, align 32
  %1371 = select <8 x i1> %1360, <8 x i32> %1359, <8 x i32> zeroinitializer
  %1372 = extractelement <8 x i32> %1371, i32 0
  %1373 = sext i32 %1372 to i64
  %1374 = getelementptr inbounds i16, i16* %5, i64 %1373
  %1375 = load i16, i16* %1374, align 2
  %1376 = extractelement <8 x i32> %1371, i32 1
  %1377 = sext i32 %1376 to i64
  %1378 = getelementptr inbounds i16, i16* %5, i64 %1377
  %1379 = load i16, i16* %1378, align 2
  %1380 = extractelement <8 x i32> %1371, i32 2
  %1381 = sext i32 %1380 to i64
  %1382 = getelementptr inbounds i16, i16* %5, i64 %1381
  %1383 = load i16, i16* %1382, align 2
  %1384 = extractelement <8 x i32> %1371, i32 3
  %1385 = sext i32 %1384 to i64
  %1386 = getelementptr inbounds i16, i16* %5, i64 %1385
  %1387 = load i16, i16* %1386, align 2
  %1388 = extractelement <8 x i32> %1371, i32 4
  %1389 = sext i32 %1388 to i64
  %1390 = getelementptr inbounds i16, i16* %5, i64 %1389
  %1391 = load i16, i16* %1390, align 2
  %1392 = extractelement <8 x i32> %1371, i32 5
  %1393 = sext i32 %1392 to i64
  %1394 = getelementptr inbounds i16, i16* %5, i64 %1393
  %1395 = load i16, i16* %1394, align 2
  %1396 = extractelement <8 x i32> %1371, i32 6
  %1397 = sext i32 %1396 to i64
  %1398 = getelementptr inbounds i16, i16* %5, i64 %1397
  %1399 = load i16, i16* %1398, align 2
  %1400 = extractelement <8 x i32> %1371, i32 7
  %1401 = sext i32 %1400 to i64
  %1402 = getelementptr inbounds i16, i16* %5, i64 %1401
  %1403 = load i16, i16* %1402, align 2
  %1404 = insertelement <8 x i16> undef, i16 %1375, i32 0
  %1405 = insertelement <8 x i16> %1404, i16 %1379, i32 1
  %1406 = insertelement <8 x i16> %1405, i16 %1383, i32 2
  %1407 = insertelement <8 x i16> %1406, i16 %1387, i32 3
  %1408 = insertelement <8 x i16> %1407, i16 %1391, i32 4
  %1409 = insertelement <8 x i16> %1408, i16 %1395, i32 5
  %1410 = insertelement <8 x i16> %1409, i16 %1399, i32 6
  %1411 = insertelement <8 x i16> %1410, i16 %1403, i32 7
  %1412 = zext <8 x i16> %1411 to <8 x i32>
  %1413 = add nsw i32 %1372, 1
  %1414 = sext i32 %1413 to i64
  %1415 = getelementptr inbounds i16, i16* %5, i64 %1414
  %1416 = load i16, i16* %1415, align 2
  %1417 = add nsw i32 %1376, 1
  %1418 = sext i32 %1417 to i64
  %1419 = getelementptr inbounds i16, i16* %5, i64 %1418
  %1420 = load i16, i16* %1419, align 2
  %1421 = add nsw i32 %1380, 1
  %1422 = sext i32 %1421 to i64
  %1423 = getelementptr inbounds i16, i16* %5, i64 %1422
  %1424 = load i16, i16* %1423, align 2
  %1425 = add nsw i32 %1384, 1
  %1426 = sext i32 %1425 to i64
  %1427 = getelementptr inbounds i16, i16* %5, i64 %1426
  %1428 = load i16, i16* %1427, align 2
  %1429 = add nsw i32 %1388, 1
  %1430 = sext i32 %1429 to i64
  %1431 = getelementptr inbounds i16, i16* %5, i64 %1430
  %1432 = load i16, i16* %1431, align 2
  %1433 = add nsw i32 %1392, 1
  %1434 = sext i32 %1433 to i64
  %1435 = getelementptr inbounds i16, i16* %5, i64 %1434
  %1436 = load i16, i16* %1435, align 2
  %1437 = add nsw i32 %1396, 1
  %1438 = sext i32 %1437 to i64
  %1439 = getelementptr inbounds i16, i16* %5, i64 %1438
  %1440 = load i16, i16* %1439, align 2
  %1441 = add nsw i32 %1400, 1
  %1442 = sext i32 %1441 to i64
  %1443 = getelementptr inbounds i16, i16* %5, i64 %1442
  %1444 = load i16, i16* %1443, align 2
  %1445 = insertelement <8 x i16> undef, i16 %1416, i32 0
  %1446 = insertelement <8 x i16> %1445, i16 %1420, i32 1
  %1447 = insertelement <8 x i16> %1446, i16 %1424, i32 2
  %1448 = insertelement <8 x i16> %1447, i16 %1428, i32 3
  %1449 = insertelement <8 x i16> %1448, i16 %1432, i32 4
  %1450 = insertelement <8 x i16> %1449, i16 %1436, i32 5
  %1451 = insertelement <8 x i16> %1450, i16 %1440, i32 6
  %1452 = insertelement <8 x i16> %1451, i16 %1444, i32 7
  %1453 = zext <8 x i16> %1452 to <8 x i32>
  %1454 = lshr <8 x i32> %1358, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %1455 = and <8 x i32> %1454, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %1456 = sub nsw <8 x i32> %1453, %1412
  %1457 = shl nuw nsw <8 x i32> %1412, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %1458 = or <8 x i32> %1457, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %1459 = mul nsw <8 x i32> %1456, %1455
  %1460 = add nsw <8 x i32> %1459, %1458
  %1461 = lshr <8 x i32> %1460, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %1462 = bitcast <8 x i32> %1461 to <4 x i64>
  %1463 = shufflevector <4 x i64> %1462, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %1464 = shufflevector <2 x i64> %1463, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1465 = bitcast <4 x i64> %1464 to <8 x i32>
  %1466 = tail call <16 x i16> @llvm.x86.avx2.packusdw(<8 x i32> %1461, <8 x i32> %1465) #8
  %1467 = bitcast <16 x i16> %1466 to <4 x i64>
  %1468 = bitcast <4 x i64> %1370 to <8 x i32>
  %1469 = extractelement <8 x i32> %1468, i32 0
  %1470 = sext i32 %1469 to i64
  %1471 = getelementptr inbounds i16, i16* %5, i64 %1470
  %1472 = load i16, i16* %1471, align 2
  %1473 = load <4 x i32>, <4 x i32>* %1245, align 4
  %1474 = extractelement <4 x i32> %1473, i32 0
  %1475 = sext i32 %1474 to i64
  %1476 = getelementptr inbounds i16, i16* %5, i64 %1475
  %1477 = load i16, i16* %1476, align 2
  %1478 = extractelement <4 x i32> %1473, i32 1
  %1479 = sext i32 %1478 to i64
  %1480 = getelementptr inbounds i16, i16* %5, i64 %1479
  %1481 = load i16, i16* %1480, align 2
  %1482 = extractelement <4 x i32> %1473, i32 2
  %1483 = sext i32 %1482 to i64
  %1484 = getelementptr inbounds i16, i16* %5, i64 %1483
  %1485 = load i16, i16* %1484, align 2
  %1486 = extractelement <4 x i32> %1473, i32 3
  %1487 = sext i32 %1486 to i64
  %1488 = getelementptr inbounds i16, i16* %5, i64 %1487
  %1489 = load i16, i16* %1488, align 2
  %1490 = load i32, i32* %1240, align 4
  %1491 = sext i32 %1490 to i64
  %1492 = getelementptr inbounds i16, i16* %5, i64 %1491
  %1493 = load i16, i16* %1492, align 2
  %1494 = load i32, i32* %1242, align 8
  %1495 = sext i32 %1494 to i64
  %1496 = getelementptr inbounds i16, i16* %5, i64 %1495
  %1497 = load i16, i16* %1496, align 2
  %1498 = load i32, i32* %1244, align 4
  %1499 = sext i32 %1498 to i64
  %1500 = getelementptr inbounds i16, i16* %5, i64 %1499
  %1501 = load i16, i16* %1500, align 2
  %1502 = insertelement <8 x i16> undef, i16 %1472, i32 0
  %1503 = insertelement <8 x i16> %1502, i16 %1477, i32 1
  %1504 = insertelement <8 x i16> %1503, i16 %1481, i32 2
  %1505 = insertelement <8 x i16> %1504, i16 %1485, i32 3
  %1506 = insertelement <8 x i16> %1505, i16 %1489, i32 4
  %1507 = insertelement <8 x i16> %1506, i16 %1493, i32 5
  %1508 = insertelement <8 x i16> %1507, i16 %1497, i32 6
  %1509 = insertelement <8 x i16> %1508, i16 %1501, i32 7
  %1510 = zext <8 x i16> %1509 to <8 x i32>
  %1511 = add nsw i32 %1469, 1
  %1512 = sext i32 %1511 to i64
  %1513 = getelementptr inbounds i16, i16* %5, i64 %1512
  %1514 = load i16, i16* %1513, align 2
  %1515 = add nsw <4 x i32> %1473, <i32 1, i32 1, i32 1, i32 1>
  %1516 = sext <4 x i32> %1515 to <4 x i64>
  %1517 = extractelement <4 x i64> %1516, i32 0
  %1518 = getelementptr inbounds i16, i16* %5, i64 %1517
  %1519 = load i16, i16* %1518, align 2
  %1520 = extractelement <4 x i64> %1516, i32 1
  %1521 = getelementptr inbounds i16, i16* %5, i64 %1520
  %1522 = load i16, i16* %1521, align 2
  %1523 = extractelement <4 x i64> %1516, i32 2
  %1524 = getelementptr inbounds i16, i16* %5, i64 %1523
  %1525 = load i16, i16* %1524, align 2
  %1526 = extractelement <4 x i64> %1516, i32 3
  %1527 = getelementptr inbounds i16, i16* %5, i64 %1526
  %1528 = load i16, i16* %1527, align 2
  %1529 = add nsw i32 %1490, 1
  %1530 = sext i32 %1529 to i64
  %1531 = getelementptr inbounds i16, i16* %5, i64 %1530
  %1532 = load i16, i16* %1531, align 2
  %1533 = add nsw i32 %1494, 1
  %1534 = sext i32 %1533 to i64
  %1535 = getelementptr inbounds i16, i16* %5, i64 %1534
  %1536 = load i16, i16* %1535, align 2
  %1537 = add nsw i32 %1498, 1
  %1538 = sext i32 %1537 to i64
  %1539 = getelementptr inbounds i16, i16* %5, i64 %1538
  %1540 = load i16, i16* %1539, align 2
  %1541 = insertelement <8 x i16> undef, i16 %1514, i32 0
  %1542 = insertelement <8 x i16> %1541, i16 %1519, i32 1
  %1543 = insertelement <8 x i16> %1542, i16 %1522, i32 2
  %1544 = insertelement <8 x i16> %1543, i16 %1525, i32 3
  %1545 = insertelement <8 x i16> %1544, i16 %1528, i32 4
  %1546 = insertelement <8 x i16> %1545, i16 %1532, i32 5
  %1547 = insertelement <8 x i16> %1546, i16 %1536, i32 6
  %1548 = insertelement <8 x i16> %1547, i16 %1540, i32 7
  %1549 = zext <8 x i16> %1548 to <8 x i32>
  %1550 = lshr <8 x i32> %1363, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %1551 = and <8 x i32> %1550, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %1552 = sub nsw <8 x i32> %1549, %1510
  %1553 = shl nuw nsw <8 x i32> %1510, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %1554 = or <8 x i32> %1553, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %1555 = mul nsw <8 x i32> %1552, %1551
  %1556 = add nsw <8 x i32> %1555, %1554
  %1557 = lshr <8 x i32> %1556, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %1558 = bitcast <8 x i32> %1557 to <4 x i64>
  %1559 = shufflevector <4 x i64> %1558, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %1560 = shufflevector <2 x i64> %1559, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1561 = bitcast <4 x i64> %1560 to <8 x i32>
  %1562 = tail call <16 x i16> @llvm.x86.avx2.packusdw(<8 x i32> %1557, <8 x i32> %1561) #8
  %1563 = bitcast <16 x i16> %1562 to <4 x i64>
  %1564 = shufflevector <4 x i64> %1467, <4 x i64> %1563, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  br label %1565

1565:                                             ; preds = %1355, %1351
  %1566 = phi <4 x i64> [ %1564, %1355 ], [ zeroinitializer, %1351 ]
  %1567 = sext i32 %1280 to i64
  %1568 = getelementptr inbounds [17 x [16 x i16]], [17 x [16 x i16]]* bitcast (<{ [16 x i16], <{ i16, [15 x i16] }>, <{ i16, i16, [14 x i16] }>, <{ i16, i16, i16, [13 x i16] }>, <{ i16, i16, i16, i16, [12 x i16] }>, <{ i16, i16, i16, i16, i16, [11 x i16] }>, <{ i16, i16, i16, i16, i16, i16, [10 x i16] }>, <{ i16, i16, i16, i16, i16, i16, i16, [9 x i16] }>, <{ [8 x i16], [8 x i16] }>, [16 x i16], [16 x i16], [16 x i16], [16 x i16], [16 x i16], [16 x i16], [16 x i16], [16 x i16] }>* @HighbdBaseMask to [17 x [16 x i16]]*), i64 0, i64 %1567, i64 0
  %1569 = bitcast i16* %1568 to <32 x i8>*
  %1570 = load <32 x i8>, <32 x i8>* %1569, align 32
  %1571 = bitcast <4 x i64> %1353 to <32 x i8>
  %1572 = bitcast <4 x i64> %1566 to <32 x i8>
  %1573 = tail call <32 x i8> @llvm.x86.avx2.pblendvb(<32 x i8> %1571, <32 x i8> %1572, <32 x i8> %1570) #8
  %1574 = getelementptr inbounds i16, i16* %1247, i64 %1264
  %1575 = bitcast i16* %1574 to <32 x i8>*
  store <32 x i8> %1573, <32 x i8>* %1575, align 1
  %1576 = add nuw nsw i64 %1264, 16
  %1577 = icmp slt i64 %1576, %1237
  br i1 %1577, label %1263, label %1260

1578:                                             ; preds = %1260, %1230
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1231)
  br label %1579

1579:                                             ; preds = %906, %635, %368, %179, %944, %920, %661, %406, %207, %19, %1578
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_highbd_dr_prediction_z3_avx2(i16*, i64, i32, i32, i16* nocapture readnone, i16* readonly, i32, i32, i32, i32) local_unnamed_addr #0 {
  %11 = alloca [32 x <4 x i64>], align 32
  %12 = alloca [4 x <4 x i64>], align 32
  %13 = alloca [8 x <4 x i64>], align 32
  %14 = alloca [4096 x i16], align 16
  %15 = alloca [1024 x i16], align 16
  %16 = alloca [32 x <4 x i64>], align 32
  %17 = alloca [8 x <2 x i64>], align 16
  %18 = alloca [2048 x i16], align 16
  %19 = alloca [16 x <2 x i64>], align 16
  %20 = alloca [32 x <2 x i64>], align 16
  %21 = alloca [32 x <2 x i64>], align 16
  %22 = alloca [64 x <4 x i64>], align 32
  %23 = alloca [16 x <4 x i64>], align 32
  %24 = alloca [4 x <2 x i64>], align 16
  %25 = icmp eq i32 %2, %3
  br i1 %25, label %26, label %2678

26:                                               ; preds = %10
  switch i32 %2, label %7784 [
    i32 4, label %27
    i32 8, label %264
    i32 16, label %597
    i32 32, label %1110
    i32 64, label %2527
  ]

27:                                               ; preds = %26
  %28 = bitcast [4 x <2 x i64>]* %24 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %28) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %28, i8 -86, i64 64, i1 false) #8
  %29 = icmp slt i32 %9, 12
  %30 = sub nsw i32 6, %6
  %31 = shl i32 7, %6
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds i16, i16* %5, i64 %32
  %34 = load i16, i16* %33, align 2
  %35 = insertelement <8 x i16> undef, i16 %34, i32 0
  %36 = shufflevector <8 x i16> %35, <8 x i16> undef, <8 x i32> zeroinitializer
  br i1 %29, label %37, label %142

37:                                               ; preds = %27
  %38 = trunc i32 %31 to i16
  %39 = insertelement <8 x i16> undef, i16 %38, i32 0
  %40 = shufflevector <8 x i16> %39, <8 x i16> undef, <8 x i32> zeroinitializer
  %41 = icmp eq i32 %6, 0
  br label %42

42:                                               ; preds = %116, %37
  %43 = phi i64 [ 0, %37 ], [ %140, %116 ]
  %44 = phi i32 [ %8, %37 ], [ %139, %116 ]
  %45 = ashr i32 %44, %30
  %46 = icmp slt i32 %45, %31
  br i1 %46, label %56, label %47

47:                                               ; preds = %42
  %48 = trunc i64 %43 to i32
  %49 = icmp slt i32 %48, 4
  br i1 %49, label %50, label %231

50:                                               ; preds = %47
  %51 = and i64 %43, 4294967295
  %52 = getelementptr inbounds [4 x <2 x i64>], [4 x <2 x i64>]* %24, i64 0, i64 %51
  %53 = bitcast <2 x i64>* %52 to <8 x i16>*
  store <8 x i16> %36, <8 x i16>* %53, align 16
  %54 = add nuw nsw i64 %51, 1
  %55 = icmp eq i64 %54, 4
  br i1 %55, label %231, label %7785

56:                                               ; preds = %42
  %57 = sext i32 %45 to i64
  %58 = getelementptr inbounds i16, i16* %5, i64 %57
  %59 = bitcast i16* %58 to <2 x i64>*
  %60 = load <2 x i64>, <2 x i64>* %59, align 1
  br i1 %41, label %90, label %61

61:                                               ; preds = %56
  %62 = bitcast <2 x i64> %60 to <16 x i8>
  %63 = shufflevector <16 x i8> %62, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 4, i32 5, i32 8, i32 9, i32 12, i32 13, i32 2, i32 3, i32 6, i32 7, i32 10, i32 11, i32 14, i32 15>
  %64 = bitcast <16 x i8> %63 to <2 x i64>
  %65 = shufflevector <16 x i8> %63, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %66 = bitcast <16 x i8> %65 to <2 x i64>
  %67 = trunc i32 %45 to i16
  %68 = add i16 %67, 2
  %69 = add i16 %67, 4
  %70 = add i16 %67, 6
  %71 = add i16 %67, 8
  %72 = add i16 %67, 10
  %73 = add i16 %67, 12
  %74 = add i16 %67, 14
  %75 = insertelement <8 x i16> undef, i16 %67, i32 0
  %76 = insertelement <8 x i16> %75, i16 %68, i32 1
  %77 = insertelement <8 x i16> %76, i16 %69, i32 2
  %78 = insertelement <8 x i16> %77, i16 %70, i32 3
  %79 = insertelement <8 x i16> %78, i16 %71, i32 4
  %80 = insertelement <8 x i16> %79, i16 %72, i32 5
  %81 = insertelement <8 x i16> %80, i16 %73, i32 6
  %82 = insertelement <8 x i16> %81, i16 %74, i32 7
  %83 = trunc i32 %44 to i16
  %84 = insertelement <16 x i16> undef, i16 %83, i32 0
  %85 = shufflevector <16 x i16> %84, <16 x i16> undef, <16 x i32> zeroinitializer
  %86 = tail call <16 x i16> @llvm.x86.avx2.pslli.w(<16 x i16> %85, i32 %6) #8
  %87 = lshr <16 x i16> %86, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %88 = bitcast <16 x i16> %87 to <4 x i64>
  %89 = and <4 x i64> %88, <i64 8725857424048159, i64 8725857424048159, i64 8725857424048159, i64 8725857424048159>
  br label %116

90:                                               ; preds = %56
  %91 = getelementptr inbounds i16, i16* %58, i64 1
  %92 = bitcast i16* %91 to <2 x i64>*
  %93 = load <2 x i64>, <2 x i64>* %92, align 1
  %94 = trunc i32 %45 to i16
  %95 = add i16 %94, 1
  %96 = add i16 %94, 2
  %97 = add i16 %94, 3
  %98 = add i16 %94, 4
  %99 = add i16 %94, 5
  %100 = add i16 %94, 6
  %101 = add i16 %94, 7
  %102 = insertelement <8 x i16> undef, i16 %94, i32 0
  %103 = insertelement <8 x i16> %102, i16 %95, i32 1
  %104 = insertelement <8 x i16> %103, i16 %96, i32 2
  %105 = insertelement <8 x i16> %104, i16 %97, i32 3
  %106 = insertelement <8 x i16> %105, i16 %98, i32 4
  %107 = insertelement <8 x i16> %106, i16 %99, i32 5
  %108 = insertelement <8 x i16> %107, i16 %100, i32 6
  %109 = insertelement <8 x i16> %108, i16 %101, i32 7
  %110 = trunc i32 %44 to i16
  %111 = insertelement <16 x i16> undef, i16 %110, i32 0
  %112 = and <16 x i16> %111, <i16 63, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef>
  %113 = lshr <16 x i16> %112, <i16 1, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0>
  %114 = shufflevector <16 x i16> %113, <16 x i16> undef, <16 x i32> zeroinitializer
  %115 = bitcast <16 x i16> %114 to <4 x i64>
  br label %116

116:                                              ; preds = %90, %61
  %117 = phi <8 x i16> [ %82, %61 ], [ %109, %90 ]
  %118 = phi <2 x i64> [ %64, %61 ], [ %60, %90 ]
  %119 = phi <2 x i64> [ %66, %61 ], [ %93, %90 ]
  %120 = phi <4 x i64> [ %89, %61 ], [ %115, %90 ]
  %121 = shufflevector <2 x i64> %118, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %122 = shufflevector <2 x i64> %119, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %123 = bitcast <4 x i64> %122 to <16 x i16>
  %124 = bitcast <4 x i64> %121 to <16 x i16>
  %125 = sub <16 x i16> %123, %124
  %126 = shl <16 x i16> %124, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %127 = or <16 x i16> %126, <i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16>
  %128 = bitcast <4 x i64> %120 to <16 x i16>
  %129 = mul <16 x i16> %125, %128
  %130 = add <16 x i16> %129, %127
  %131 = lshr <16 x i16> %130, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %132 = bitcast <16 x i16> %131 to <4 x i64>
  %133 = shufflevector <4 x i64> %132, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %134 = icmp sgt <8 x i16> %40, %117
  %135 = bitcast <2 x i64> %133 to <8 x i16>
  %136 = select <8 x i1> %134, <8 x i16> %135, <8 x i16> %36
  %137 = getelementptr inbounds [4 x <2 x i64>], [4 x <2 x i64>]* %24, i64 0, i64 %43
  %138 = bitcast <2 x i64>* %137 to <8 x i16>*
  store <8 x i16> %136, <8 x i16>* %138, align 16
  %139 = add nsw i32 %44, %8
  %140 = add nuw nsw i64 %43, 1
  %141 = icmp eq i64 %140, 4
  br i1 %141, label %231, label %42

142:                                              ; preds = %27
  %143 = insertelement <4 x i32> undef, i32 %31, i32 0
  %144 = shufflevector <4 x i32> %143, <4 x i32> undef, <4 x i32> zeroinitializer
  %145 = icmp eq i32 %6, 0
  %146 = bitcast <8 x i16> %36 to <16 x i8>
  br label %147

147:                                              ; preds = %203, %142
  %148 = phi i64 [ 0, %142 ], [ %229, %203 ]
  %149 = phi i32 [ %8, %142 ], [ %228, %203 ]
  %150 = ashr i32 %149, %30
  %151 = icmp slt i32 %150, %31
  br i1 %151, label %161, label %152

152:                                              ; preds = %147
  %153 = trunc i64 %148 to i32
  %154 = icmp slt i32 %153, 4
  br i1 %154, label %155, label %231

155:                                              ; preds = %152
  %156 = and i64 %148, 4294967295
  %157 = getelementptr inbounds [4 x <2 x i64>], [4 x <2 x i64>]* %24, i64 0, i64 %156
  %158 = bitcast <2 x i64>* %157 to <8 x i16>*
  store <8 x i16> %36, <8 x i16>* %158, align 16
  %159 = add nuw nsw i64 %156, 1
  %160 = icmp eq i64 %159, 4
  br i1 %160, label %231, label %7798

161:                                              ; preds = %147
  %162 = sext i32 %150 to i64
  %163 = getelementptr inbounds i16, i16* %5, i64 %162
  %164 = bitcast i16* %163 to <8 x i16>*
  %165 = load <8 x i16>, <8 x i16>* %164, align 1
  %166 = zext <8 x i16> %165 to <8 x i32>
  br i1 %145, label %185, label %167

167:                                              ; preds = %161
  %168 = shufflevector <8 x i32> %166, <8 x i32> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 1, i32 3, i32 5, i32 7>
  %169 = bitcast <8 x i32> %168 to <4 x i64>
  %170 = shufflevector <4 x i64> %169, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %171 = shufflevector <2 x i64> %170, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %172 = add nsw i32 %150, 2
  %173 = add nsw i32 %150, 4
  %174 = add nsw i32 %150, 6
  %175 = insertelement <4 x i32> undef, i32 %150, i32 0
  %176 = insertelement <4 x i32> %175, i32 %172, i32 1
  %177 = insertelement <4 x i32> %176, i32 %173, i32 2
  %178 = insertelement <4 x i32> %177, i32 %174, i32 3
  %179 = insertelement <8 x i32> undef, i32 %149, i32 0
  %180 = shufflevector <8 x i32> %179, <8 x i32> undef, <8 x i32> zeroinitializer
  %181 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %180, i32 %6) #8
  %182 = lshr <8 x i32> %181, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %183 = bitcast <8 x i32> %182 to <4 x i64>
  %184 = and <4 x i64> %183, <i64 133143986207, i64 133143986207, i64 133143986207, i64 133143986207>
  br label %203

185:                                              ; preds = %161
  %186 = getelementptr inbounds i16, i16* %163, i64 1
  %187 = bitcast i16* %186 to <8 x i16>*
  %188 = load <8 x i16>, <8 x i16>* %187, align 1
  %189 = zext <8 x i16> %188 to <8 x i32>
  %190 = bitcast <8 x i32> %189 to <4 x i64>
  %191 = add nsw i32 %150, 1
  %192 = add nsw i32 %150, 2
  %193 = add nsw i32 %150, 3
  %194 = insertelement <4 x i32> undef, i32 %150, i32 0
  %195 = insertelement <4 x i32> %194, i32 %191, i32 1
  %196 = insertelement <4 x i32> %195, i32 %192, i32 2
  %197 = insertelement <4 x i32> %196, i32 %193, i32 3
  %198 = insertelement <8 x i32> undef, i32 %149, i32 0
  %199 = and <8 x i32> %198, <i32 63, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %200 = lshr <8 x i32> %199, <i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>
  %201 = shufflevector <8 x i32> %200, <8 x i32> undef, <8 x i32> zeroinitializer
  %202 = bitcast <8 x i32> %201 to <4 x i64>
  br label %203

203:                                              ; preds = %185, %167
  %204 = phi <8 x i32> [ %168, %167 ], [ %166, %185 ]
  %205 = phi <4 x i64> [ %171, %167 ], [ %190, %185 ]
  %206 = phi <4 x i32> [ %178, %167 ], [ %197, %185 ]
  %207 = phi <4 x i64> [ %184, %167 ], [ %202, %185 ]
  %208 = bitcast <4 x i64> %205 to <8 x i32>
  %209 = sub <8 x i32> %208, %204
  %210 = shl nsw <8 x i32> %204, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %211 = or <8 x i32> %210, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %212 = bitcast <4 x i64> %207 to <8 x i32>
  %213 = mul <8 x i32> %209, %212
  %214 = add <8 x i32> %213, %211
  %215 = lshr <8 x i32> %214, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %216 = bitcast <8 x i32> %215 to <4 x i64>
  %217 = shufflevector <4 x i64> %216, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %218 = bitcast <2 x i64> %217 to <4 x i32>
  %219 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %218, <4 x i32> %218) #8
  %220 = icmp sgt <4 x i32> %144, %206
  %221 = sext <4 x i1> %220 to <4 x i32>
  %222 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %221, <4 x i32> %221) #8
  %223 = bitcast <8 x i16> %219 to <16 x i8>
  %224 = bitcast <8 x i16> %222 to <16 x i8>
  %225 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %146, <16 x i8> %223, <16 x i8> %224) #8
  %226 = getelementptr inbounds [4 x <2 x i64>], [4 x <2 x i64>]* %24, i64 0, i64 %148
  %227 = bitcast <2 x i64>* %226 to <16 x i8>*
  store <16 x i8> %225, <16 x i8>* %227, align 16
  %228 = add nsw i32 %149, %8
  %229 = add nuw nsw i64 %148, 1
  %230 = icmp eq i64 %229, 4
  br i1 %230, label %231, label %147

231:                                              ; preds = %203, %155, %7798, %7803, %7808, %116, %50, %7785, %7790, %7795, %47, %152
  %232 = getelementptr inbounds [4 x <2 x i64>], [4 x <2 x i64>]* %24, i64 0, i64 1
  %233 = getelementptr inbounds [4 x <2 x i64>], [4 x <2 x i64>]* %24, i64 0, i64 2
  %234 = getelementptr inbounds [4 x <2 x i64>], [4 x <2 x i64>]* %24, i64 0, i64 3
  %235 = bitcast [4 x <2 x i64>]* %24 to <8 x i16>*
  %236 = load <8 x i16>, <8 x i16>* %235, align 16
  %237 = bitcast <2 x i64>* %232 to <8 x i16>*
  %238 = load <8 x i16>, <8 x i16>* %237, align 16
  %239 = shufflevector <8 x i16> %236, <8 x i16> %238, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %240 = bitcast <2 x i64>* %233 to <8 x i16>*
  %241 = load <8 x i16>, <8 x i16>* %240, align 16
  %242 = bitcast <2 x i64>* %234 to <8 x i16>*
  %243 = load <8 x i16>, <8 x i16>* %242, align 16
  %244 = shufflevector <8 x i16> %241, <8 x i16> %243, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %245 = bitcast <8 x i16> %239 to <4 x i32>
  %246 = bitcast <8 x i16> %244 to <4 x i32>
  %247 = shufflevector <4 x i32> %245, <4 x i32> %246, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %248 = bitcast <4 x i32> %247 to <2 x i64>
  %249 = shufflevector <4 x i32> %245, <4 x i32> %246, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %250 = bitcast <4 x i32> %249 to <2 x i64>
  %251 = extractelement <2 x i64> %248, i32 0
  %252 = bitcast i16* %0 to i64*
  store i64 %251, i64* %252, align 1
  %253 = getelementptr inbounds i16, i16* %0, i64 %1
  %254 = extractelement <2 x i64> %248, i32 1
  %255 = bitcast i16* %253 to i64*
  store i64 %254, i64* %255, align 1
  %256 = shl nsw i64 %1, 1
  %257 = getelementptr inbounds i16, i16* %0, i64 %256
  %258 = extractelement <2 x i64> %250, i32 0
  %259 = bitcast i16* %257 to i64*
  store i64 %258, i64* %259, align 1
  %260 = mul nsw i64 %1, 3
  %261 = getelementptr inbounds i16, i16* %0, i64 %260
  %262 = extractelement <2 x i64> %250, i32 1
  %263 = bitcast i16* %261 to i64*
  store i64 %262, i64* %263, align 1
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %28) #8
  br label %7784

264:                                              ; preds = %26
  %265 = bitcast [8 x <2 x i64>]* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %265) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %265, i8 -86, i64 128, i1 false) #8
  %266 = icmp slt i32 %9, 12
  %267 = sub nsw i32 6, %6
  %268 = shl i32 15, %6
  %269 = sext i32 %268 to i64
  %270 = getelementptr inbounds i16, i16* %5, i64 %269
  %271 = load i16, i16* %270, align 2
  %272 = insertelement <16 x i16> undef, i16 %271, i32 0
  %273 = shufflevector <16 x i16> %272, <16 x i16> undef, <16 x i32> zeroinitializer
  %274 = bitcast <16 x i16> %273 to <4 x i64>
  br i1 %266, label %275, label %385

275:                                              ; preds = %264
  %276 = trunc i32 %268 to i16
  %277 = insertelement <16 x i16> undef, i16 %276, i32 0
  %278 = shufflevector <16 x i16> %277, <16 x i16> undef, <16 x i32> zeroinitializer
  %279 = icmp eq i32 %6, 0
  br label %280

280:                                              ; preds = %361, %275
  %281 = phi i64 [ 0, %275 ], [ %383, %361 ]
  %282 = phi i32 [ %8, %275 ], [ %382, %361 ]
  %283 = ashr i32 %282, %267
  %284 = icmp slt i32 %283, %268
  br i1 %284, label %294, label %285

285:                                              ; preds = %280
  %286 = trunc i64 %281 to i32
  %287 = icmp slt i32 %286, 8
  br i1 %287, label %288, label %512

288:                                              ; preds = %285
  %289 = shufflevector <4 x i64> %274, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %290 = and i64 %281, 4294967295
  %291 = getelementptr inbounds [8 x <2 x i64>], [8 x <2 x i64>]* %17, i64 0, i64 %290
  store <2 x i64> %289, <2 x i64>* %291, align 16
  %292 = add nuw nsw i64 %290, 1
  %293 = icmp eq i64 %292, 8
  br i1 %293, label %512, label %7811

294:                                              ; preds = %280
  %295 = sext i32 %283 to i64
  %296 = getelementptr inbounds i16, i16* %5, i64 %295
  %297 = bitcast i16* %296 to <2 x i64>*
  %298 = load <2 x i64>, <2 x i64>* %297, align 1
  br i1 %279, label %335, label %299

299:                                              ; preds = %294
  %300 = getelementptr inbounds i16, i16* %296, i64 8
  %301 = bitcast i16* %300 to <16 x i8>*
  %302 = load <16 x i8>, <16 x i8>* %301, align 1
  %303 = bitcast <2 x i64> %298 to <16 x i8>
  %304 = shufflevector <16 x i8> %303, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 4, i32 5, i32 8, i32 9, i32 12, i32 13, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %305 = shufflevector <16 x i8> %302, <16 x i8> undef, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 4, i32 5, i32 8, i32 9, i32 12, i32 13>
  %306 = shufflevector <16 x i8> %303, <16 x i8> undef, <16 x i32> <i32 2, i32 3, i32 6, i32 7, i32 10, i32 11, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %307 = shufflevector <16 x i8> %302, <16 x i8> undef, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 2, i32 3, i32 6, i32 7, i32 10, i32 11, i32 14, i32 15>
  %308 = shufflevector <16 x i8> %304, <16 x i8> %305, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %309 = bitcast <16 x i8> %308 to <2 x i64>
  %310 = shufflevector <16 x i8> %306, <16 x i8> %307, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %311 = bitcast <16 x i8> %310 to <2 x i64>
  %312 = trunc i32 %283 to i16
  %313 = add i16 %312, 2
  %314 = add i16 %312, 4
  %315 = add i16 %312, 6
  %316 = add i16 %312, 8
  %317 = add i16 %312, 10
  %318 = add i16 %312, 12
  %319 = add i16 %312, 14
  %320 = insertelement <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0>, i16 %312, i32 0
  %321 = insertelement <16 x i16> %320, i16 %313, i32 1
  %322 = insertelement <16 x i16> %321, i16 %314, i32 2
  %323 = insertelement <16 x i16> %322, i16 %315, i32 3
  %324 = insertelement <16 x i16> %323, i16 %316, i32 4
  %325 = insertelement <16 x i16> %324, i16 %317, i32 5
  %326 = insertelement <16 x i16> %325, i16 %318, i32 6
  %327 = insertelement <16 x i16> %326, i16 %319, i32 7
  %328 = trunc i32 %282 to i16
  %329 = insertelement <16 x i16> undef, i16 %328, i32 0
  %330 = shufflevector <16 x i16> %329, <16 x i16> undef, <16 x i32> zeroinitializer
  %331 = tail call <16 x i16> @llvm.x86.avx2.pslli.w(<16 x i16> %330, i32 %6) #8
  %332 = lshr <16 x i16> %331, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %333 = bitcast <16 x i16> %332 to <4 x i64>
  %334 = and <4 x i64> %333, <i64 8725857424048159, i64 8725857424048159, i64 8725857424048159, i64 8725857424048159>
  br label %361

335:                                              ; preds = %294
  %336 = getelementptr inbounds i16, i16* %296, i64 1
  %337 = bitcast i16* %336 to <2 x i64>*
  %338 = load <2 x i64>, <2 x i64>* %337, align 1
  %339 = trunc i32 %283 to i16
  %340 = add i16 %339, 1
  %341 = add i16 %339, 2
  %342 = add i16 %339, 3
  %343 = add i16 %339, 4
  %344 = add i16 %339, 5
  %345 = add i16 %339, 6
  %346 = add i16 %339, 7
  %347 = insertelement <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0>, i16 %339, i32 0
  %348 = insertelement <16 x i16> %347, i16 %340, i32 1
  %349 = insertelement <16 x i16> %348, i16 %341, i32 2
  %350 = insertelement <16 x i16> %349, i16 %342, i32 3
  %351 = insertelement <16 x i16> %350, i16 %343, i32 4
  %352 = insertelement <16 x i16> %351, i16 %344, i32 5
  %353 = insertelement <16 x i16> %352, i16 %345, i32 6
  %354 = insertelement <16 x i16> %353, i16 %346, i32 7
  %355 = trunc i32 %282 to i16
  %356 = insertelement <16 x i16> undef, i16 %355, i32 0
  %357 = and <16 x i16> %356, <i16 63, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef>
  %358 = lshr <16 x i16> %357, <i16 1, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0>
  %359 = shufflevector <16 x i16> %358, <16 x i16> undef, <16 x i32> zeroinitializer
  %360 = bitcast <16 x i16> %359 to <4 x i64>
  br label %361

361:                                              ; preds = %335, %299
  %362 = phi <16 x i16> [ %327, %299 ], [ %354, %335 ]
  %363 = phi <2 x i64> [ %309, %299 ], [ %298, %335 ]
  %364 = phi <2 x i64> [ %311, %299 ], [ %338, %335 ]
  %365 = phi <4 x i64> [ %334, %299 ], [ %360, %335 ]
  %366 = shufflevector <2 x i64> %363, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %367 = shufflevector <2 x i64> %364, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %368 = bitcast <4 x i64> %367 to <16 x i16>
  %369 = bitcast <4 x i64> %366 to <16 x i16>
  %370 = sub <16 x i16> %368, %369
  %371 = shl <16 x i16> %369, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %372 = or <16 x i16> %371, <i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16>
  %373 = bitcast <4 x i64> %365 to <16 x i16>
  %374 = mul <16 x i16> %370, %373
  %375 = add <16 x i16> %374, %372
  %376 = lshr <16 x i16> %375, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %377 = icmp sgt <16 x i16> %278, %362
  %378 = select <16 x i1> %377, <16 x i16> %376, <16 x i16> %273
  %379 = bitcast <16 x i16> %378 to <4 x i64>
  %380 = shufflevector <4 x i64> %379, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %381 = getelementptr inbounds [8 x <2 x i64>], [8 x <2 x i64>]* %17, i64 0, i64 %281
  store <2 x i64> %380, <2 x i64>* %381, align 16
  %382 = add nsw i32 %282, %8
  %383 = add nuw nsw i64 %281, 1
  %384 = icmp eq i64 %383, 8
  br i1 %384, label %512, label %280

385:                                              ; preds = %264
  %386 = insertelement <8 x i32> undef, i32 %268, i32 0
  %387 = shufflevector <8 x i32> %386, <8 x i32> undef, <8 x i32> zeroinitializer
  %388 = icmp eq i32 %6, 0
  %389 = bitcast <16 x i16> %273 to <32 x i8>
  br label %390

390:                                              ; preds = %477, %385
  %391 = phi i64 [ 0, %385 ], [ %510, %477 ]
  %392 = phi i32 [ %8, %385 ], [ %509, %477 ]
  %393 = ashr i32 %392, %267
  %394 = icmp slt i32 %393, %268
  br i1 %394, label %404, label %395

395:                                              ; preds = %390
  %396 = trunc i64 %391 to i32
  %397 = icmp slt i32 %396, 8
  br i1 %397, label %398, label %512

398:                                              ; preds = %395
  %399 = shufflevector <4 x i64> %274, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %400 = and i64 %391, 4294967295
  %401 = getelementptr inbounds [8 x <2 x i64>], [8 x <2 x i64>]* %17, i64 0, i64 %400
  store <2 x i64> %399, <2 x i64>* %401, align 16
  %402 = add nuw nsw i64 %400, 1
  %403 = icmp eq i64 %402, 8
  br i1 %403, label %512, label %7837

404:                                              ; preds = %390
  %405 = sext i32 %393 to i64
  %406 = getelementptr inbounds i16, i16* %5, i64 %405
  %407 = bitcast i16* %406 to <8 x i16>*
  %408 = load <8 x i16>, <8 x i16>* %407, align 1
  %409 = zext <8 x i16> %408 to <8 x i32>
  br i1 %388, label %447, label %410

410:                                              ; preds = %404
  %411 = shufflevector <8 x i32> %409, <8 x i32> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 1, i32 3, i32 5, i32 7>
  %412 = bitcast <8 x i32> %411 to <4 x i64>
  %413 = shufflevector <4 x i64> %412, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %414 = getelementptr inbounds i16, i16* %406, i64 8
  %415 = bitcast i16* %414 to <8 x i16>*
  %416 = load <8 x i16>, <8 x i16>* %415, align 1
  %417 = zext <8 x i16> %416 to <8 x i32>
  %418 = shufflevector <8 x i32> %417, <8 x i32> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 1, i32 3, i32 5, i32 7>
  %419 = bitcast <8 x i32> %418 to <4 x i64>
  %420 = shufflevector <4 x i64> %419, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %421 = shufflevector <4 x i64> %412, <4 x i64> %419, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %422 = shufflevector <2 x i64> %413, <2 x i64> %420, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %423 = insertelement <4 x i32> undef, i32 %393, i32 0
  %424 = shufflevector <4 x i32> %423, <4 x i32> undef, <4 x i32> zeroinitializer
  %425 = add nsw <4 x i32> %424, <i32 2, i32 4, i32 6, i32 8>
  %426 = add nsw i32 %393, 10
  %427 = add nsw i32 %393, 12
  %428 = add nsw i32 %393, 14
  %429 = insertelement <8 x i32> undef, i32 %393, i32 0
  %430 = extractelement <4 x i32> %425, i32 0
  %431 = insertelement <8 x i32> %429, i32 %430, i32 1
  %432 = extractelement <4 x i32> %425, i32 1
  %433 = insertelement <8 x i32> %431, i32 %432, i32 2
  %434 = extractelement <4 x i32> %425, i32 2
  %435 = insertelement <8 x i32> %433, i32 %434, i32 3
  %436 = extractelement <4 x i32> %425, i32 3
  %437 = insertelement <8 x i32> %435, i32 %436, i32 4
  %438 = insertelement <8 x i32> %437, i32 %426, i32 5
  %439 = insertelement <8 x i32> %438, i32 %427, i32 6
  %440 = insertelement <8 x i32> %439, i32 %428, i32 7
  %441 = insertelement <8 x i32> undef, i32 %392, i32 0
  %442 = shufflevector <8 x i32> %441, <8 x i32> undef, <8 x i32> zeroinitializer
  %443 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %442, i32 %6) #8
  %444 = lshr <8 x i32> %443, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %445 = bitcast <8 x i32> %444 to <4 x i64>
  %446 = and <4 x i64> %445, <i64 133143986207, i64 133143986207, i64 133143986207, i64 133143986207>
  br label %477

447:                                              ; preds = %404
  %448 = getelementptr inbounds i16, i16* %406, i64 1
  %449 = bitcast i16* %448 to <8 x i16>*
  %450 = load <8 x i16>, <8 x i16>* %449, align 1
  %451 = zext <8 x i16> %450 to <8 x i32>
  %452 = bitcast <8 x i32> %451 to <4 x i64>
  %453 = bitcast <8 x i32> %409 to <4 x i64>
  %454 = insertelement <4 x i32> undef, i32 %393, i32 0
  %455 = shufflevector <4 x i32> %454, <4 x i32> undef, <4 x i32> zeroinitializer
  %456 = add nsw <4 x i32> %455, <i32 1, i32 2, i32 3, i32 4>
  %457 = add nsw i32 %393, 5
  %458 = add nsw i32 %393, 6
  %459 = add nsw i32 %393, 7
  %460 = insertelement <8 x i32> undef, i32 %393, i32 0
  %461 = extractelement <4 x i32> %456, i32 0
  %462 = insertelement <8 x i32> %460, i32 %461, i32 1
  %463 = extractelement <4 x i32> %456, i32 1
  %464 = insertelement <8 x i32> %462, i32 %463, i32 2
  %465 = extractelement <4 x i32> %456, i32 2
  %466 = insertelement <8 x i32> %464, i32 %465, i32 3
  %467 = extractelement <4 x i32> %456, i32 3
  %468 = insertelement <8 x i32> %466, i32 %467, i32 4
  %469 = insertelement <8 x i32> %468, i32 %457, i32 5
  %470 = insertelement <8 x i32> %469, i32 %458, i32 6
  %471 = insertelement <8 x i32> %470, i32 %459, i32 7
  %472 = insertelement <8 x i32> undef, i32 %392, i32 0
  %473 = and <8 x i32> %472, <i32 63, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %474 = lshr <8 x i32> %473, <i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>
  %475 = shufflevector <8 x i32> %474, <8 x i32> undef, <8 x i32> zeroinitializer
  %476 = bitcast <8 x i32> %475 to <4 x i64>
  br label %477

477:                                              ; preds = %447, %410
  %478 = phi <4 x i64> [ %421, %410 ], [ %453, %447 ]
  %479 = phi <4 x i64> [ %422, %410 ], [ %452, %447 ]
  %480 = phi <8 x i32> [ %440, %410 ], [ %471, %447 ]
  %481 = phi <4 x i64> [ %446, %410 ], [ %476, %447 ]
  %482 = bitcast <4 x i64> %479 to <8 x i32>
  %483 = bitcast <4 x i64> %478 to <8 x i32>
  %484 = sub <8 x i32> %482, %483
  %485 = shl <8 x i32> %483, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %486 = or <8 x i32> %485, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %487 = bitcast <4 x i64> %481 to <8 x i32>
  %488 = mul <8 x i32> %484, %487
  %489 = add <8 x i32> %488, %486
  %490 = lshr <8 x i32> %489, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %491 = bitcast <8 x i32> %490 to <4 x i64>
  %492 = shufflevector <4 x i64> %491, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %493 = shufflevector <2 x i64> %492, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %494 = bitcast <4 x i64> %493 to <8 x i32>
  %495 = tail call <16 x i16> @llvm.x86.avx2.packusdw(<8 x i32> %490, <8 x i32> %494) #8
  %496 = icmp sgt <8 x i32> %387, %480
  %497 = sext <8 x i1> %496 to <8 x i32>
  %498 = bitcast <8 x i32> %497 to <4 x i64>
  %499 = shufflevector <4 x i64> %498, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %500 = shufflevector <2 x i64> %499, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %501 = bitcast <4 x i64> %500 to <8 x i32>
  %502 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %497, <8 x i32> %501) #8
  %503 = bitcast <16 x i16> %495 to <32 x i8>
  %504 = bitcast <16 x i16> %502 to <32 x i8>
  %505 = tail call <32 x i8> @llvm.x86.avx2.pblendvb(<32 x i8> %389, <32 x i8> %503, <32 x i8> %504) #8
  %506 = bitcast <32 x i8> %505 to <4 x i64>
  %507 = shufflevector <4 x i64> %506, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %508 = getelementptr inbounds [8 x <2 x i64>], [8 x <2 x i64>]* %17, i64 0, i64 %391
  store <2 x i64> %507, <2 x i64>* %508, align 16
  %509 = add nsw i32 %392, %8
  %510 = add nuw nsw i64 %391, 1
  %511 = icmp eq i64 %510, 8
  br i1 %511, label %512, label %390

512:                                              ; preds = %477, %398, %7837, %7841, %7845, %7849, %7853, %7857, %7861, %361, %288, %7811, %7815, %7819, %7823, %7827, %7831, %7835, %285, %395
  %513 = getelementptr inbounds [8 x <2 x i64>], [8 x <2 x i64>]* %17, i64 0, i64 1
  %514 = getelementptr inbounds [8 x <2 x i64>], [8 x <2 x i64>]* %17, i64 0, i64 2
  %515 = getelementptr inbounds [8 x <2 x i64>], [8 x <2 x i64>]* %17, i64 0, i64 3
  %516 = getelementptr inbounds [8 x <2 x i64>], [8 x <2 x i64>]* %17, i64 0, i64 4
  %517 = getelementptr inbounds [8 x <2 x i64>], [8 x <2 x i64>]* %17, i64 0, i64 5
  %518 = getelementptr inbounds [8 x <2 x i64>], [8 x <2 x i64>]* %17, i64 0, i64 6
  %519 = getelementptr inbounds [8 x <2 x i64>], [8 x <2 x i64>]* %17, i64 0, i64 7
  %520 = bitcast [8 x <2 x i64>]* %17 to <8 x i16>*
  %521 = load <8 x i16>, <8 x i16>* %520, align 16
  %522 = bitcast <2 x i64>* %513 to <8 x i16>*
  %523 = load <8 x i16>, <8 x i16>* %522, align 16
  %524 = shufflevector <8 x i16> %521, <8 x i16> %523, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %525 = bitcast <2 x i64>* %514 to <8 x i16>*
  %526 = load <8 x i16>, <8 x i16>* %525, align 16
  %527 = bitcast <2 x i64>* %515 to <8 x i16>*
  %528 = load <8 x i16>, <8 x i16>* %527, align 16
  %529 = shufflevector <8 x i16> %526, <8 x i16> %528, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %530 = bitcast <2 x i64>* %516 to <8 x i16>*
  %531 = load <8 x i16>, <8 x i16>* %530, align 16
  %532 = bitcast <2 x i64>* %517 to <8 x i16>*
  %533 = load <8 x i16>, <8 x i16>* %532, align 16
  %534 = shufflevector <8 x i16> %531, <8 x i16> %533, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %535 = bitcast <2 x i64>* %518 to <8 x i16>*
  %536 = load <8 x i16>, <8 x i16>* %535, align 16
  %537 = bitcast <2 x i64>* %519 to <8 x i16>*
  %538 = load <8 x i16>, <8 x i16>* %537, align 16
  %539 = shufflevector <8 x i16> %536, <8 x i16> %538, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %540 = bitcast <8 x i16> %524 to <4 x i32>
  %541 = bitcast <8 x i16> %529 to <4 x i32>
  %542 = shufflevector <4 x i32> %540, <4 x i32> %541, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %543 = bitcast <4 x i32> %542 to <2 x i64>
  %544 = bitcast <8 x i16> %534 to <4 x i32>
  %545 = bitcast <8 x i16> %539 to <4 x i32>
  %546 = shufflevector <4 x i32> %544, <4 x i32> %545, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %547 = bitcast <4 x i32> %546 to <2 x i64>
  %548 = shufflevector <2 x i64> %543, <2 x i64> %547, <2 x i32> <i32 0, i32 2>
  %549 = shufflevector <2 x i64> %543, <2 x i64> %547, <2 x i32> <i32 1, i32 3>
  %550 = shufflevector <4 x i32> %540, <4 x i32> %541, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %551 = bitcast <4 x i32> %550 to <2 x i64>
  %552 = shufflevector <4 x i32> %544, <4 x i32> %545, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %553 = bitcast <4 x i32> %552 to <2 x i64>
  %554 = shufflevector <2 x i64> %551, <2 x i64> %553, <2 x i32> <i32 0, i32 2>
  %555 = shufflevector <2 x i64> %551, <2 x i64> %553, <2 x i32> <i32 1, i32 3>
  %556 = shufflevector <8 x i16> %521, <8 x i16> %523, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %557 = shufflevector <8 x i16> %526, <8 x i16> %528, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %558 = shufflevector <8 x i16> %531, <8 x i16> %533, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %559 = shufflevector <8 x i16> %536, <8 x i16> %538, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %560 = bitcast <8 x i16> %556 to <4 x i32>
  %561 = bitcast <8 x i16> %557 to <4 x i32>
  %562 = shufflevector <4 x i32> %560, <4 x i32> %561, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %563 = bitcast <4 x i32> %562 to <2 x i64>
  %564 = bitcast <8 x i16> %558 to <4 x i32>
  %565 = bitcast <8 x i16> %559 to <4 x i32>
  %566 = shufflevector <4 x i32> %564, <4 x i32> %565, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %567 = bitcast <4 x i32> %566 to <2 x i64>
  %568 = shufflevector <2 x i64> %563, <2 x i64> %567, <2 x i32> <i32 0, i32 2>
  %569 = shufflevector <2 x i64> %563, <2 x i64> %567, <2 x i32> <i32 1, i32 3>
  %570 = shufflevector <4 x i32> %560, <4 x i32> %561, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %571 = bitcast <4 x i32> %570 to <2 x i64>
  %572 = shufflevector <4 x i32> %564, <4 x i32> %565, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %573 = bitcast <4 x i32> %572 to <2 x i64>
  %574 = shufflevector <2 x i64> %571, <2 x i64> %573, <2 x i32> <i32 0, i32 2>
  %575 = shufflevector <2 x i64> %571, <2 x i64> %573, <2 x i32> <i32 1, i32 3>
  %576 = bitcast i16* %0 to <2 x i64>*
  store <2 x i64> %548, <2 x i64>* %576, align 1
  %577 = getelementptr inbounds i16, i16* %0, i64 %1
  %578 = bitcast i16* %577 to <2 x i64>*
  store <2 x i64> %549, <2 x i64>* %578, align 1
  %579 = shl nsw i64 %1, 1
  %580 = getelementptr inbounds i16, i16* %0, i64 %579
  %581 = bitcast i16* %580 to <2 x i64>*
  store <2 x i64> %554, <2 x i64>* %581, align 1
  %582 = mul nsw i64 %1, 3
  %583 = getelementptr inbounds i16, i16* %0, i64 %582
  %584 = bitcast i16* %583 to <2 x i64>*
  store <2 x i64> %555, <2 x i64>* %584, align 1
  %585 = shl nsw i64 %1, 2
  %586 = getelementptr inbounds i16, i16* %0, i64 %585
  %587 = bitcast i16* %586 to <2 x i64>*
  store <2 x i64> %568, <2 x i64>* %587, align 1
  %588 = mul nsw i64 %1, 5
  %589 = getelementptr inbounds i16, i16* %0, i64 %588
  %590 = bitcast i16* %589 to <2 x i64>*
  store <2 x i64> %569, <2 x i64>* %590, align 1
  %591 = mul nsw i64 %1, 6
  %592 = getelementptr inbounds i16, i16* %0, i64 %591
  %593 = bitcast i16* %592 to <2 x i64>*
  store <2 x i64> %574, <2 x i64>* %593, align 1
  %594 = mul nsw i64 %1, 7
  %595 = getelementptr inbounds i16, i16* %0, i64 %594
  %596 = bitcast i16* %595 to <2 x i64>*
  store <2 x i64> %575, <2 x i64>* %596, align 1
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %265) #8
  br label %7784

597:                                              ; preds = %26
  %598 = bitcast [16 x <4 x i64>]* %23 to i8*
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %598) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %598, i8 -86, i64 512, i1 false) #8
  %599 = icmp slt i32 %9, 12
  %600 = getelementptr inbounds i16, i16* %5, i64 31
  %601 = load i16, i16* %600, align 2
  %602 = insertelement <16 x i16> undef, i16 %601, i32 0
  %603 = shufflevector <16 x i16> %602, <16 x i16> undef, <16 x i32> zeroinitializer
  br i1 %599, label %604, label %714

604:                                              ; preds = %597, %656
  %605 = phi i64 [ %712, %656 ], [ 0, %597 ]
  %606 = phi i32 [ %711, %656 ], [ %8, %597 ]
  %607 = ashr i32 %606, 6
  %608 = icmp slt i32 %606, 1984
  br i1 %608, label %656, label %609

609:                                              ; preds = %604
  %610 = trunc i64 %605 to i32
  %611 = icmp slt i32 %610, 16
  br i1 %611, label %612, label %857

612:                                              ; preds = %609
  %613 = and i64 %605, 4294967295
  %614 = sub nsw i64 0, %605
  %615 = sub nsw i64 15, %605
  %616 = and i64 %614, 7
  %617 = icmp eq i64 %616, 0
  br i1 %617, label %626, label %618

618:                                              ; preds = %612, %618
  %619 = phi i64 [ %623, %618 ], [ %613, %612 ]
  %620 = phi i64 [ %624, %618 ], [ %616, %612 ]
  %621 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %23, i64 0, i64 %619
  %622 = bitcast <4 x i64>* %621 to <16 x i16>*
  store <16 x i16> %603, <16 x i16>* %622, align 32
  %623 = add nuw nsw i64 %619, 1
  %624 = add i64 %620, -1
  %625 = icmp eq i64 %624, 0
  br i1 %625, label %626, label %618, !llvm.loop !16

626:                                              ; preds = %618, %612
  %627 = phi i64 [ %613, %612 ], [ %623, %618 ]
  %628 = icmp ult i64 %615, 7
  br i1 %628, label %857, label %629

629:                                              ; preds = %626, %629
  %630 = phi i64 [ %654, %629 ], [ %627, %626 ]
  %631 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %23, i64 0, i64 %630
  %632 = bitcast <4 x i64>* %631 to <16 x i16>*
  store <16 x i16> %603, <16 x i16>* %632, align 32
  %633 = add nuw nsw i64 %630, 1
  %634 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %23, i64 0, i64 %633
  %635 = bitcast <4 x i64>* %634 to <16 x i16>*
  store <16 x i16> %603, <16 x i16>* %635, align 32
  %636 = add nuw nsw i64 %630, 2
  %637 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %23, i64 0, i64 %636
  %638 = bitcast <4 x i64>* %637 to <16 x i16>*
  store <16 x i16> %603, <16 x i16>* %638, align 32
  %639 = add nuw nsw i64 %630, 3
  %640 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %23, i64 0, i64 %639
  %641 = bitcast <4 x i64>* %640 to <16 x i16>*
  store <16 x i16> %603, <16 x i16>* %641, align 32
  %642 = add nuw nsw i64 %630, 4
  %643 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %23, i64 0, i64 %642
  %644 = bitcast <4 x i64>* %643 to <16 x i16>*
  store <16 x i16> %603, <16 x i16>* %644, align 32
  %645 = add nuw nsw i64 %630, 5
  %646 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %23, i64 0, i64 %645
  %647 = bitcast <4 x i64>* %646 to <16 x i16>*
  store <16 x i16> %603, <16 x i16>* %647, align 32
  %648 = add nuw nsw i64 %630, 6
  %649 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %23, i64 0, i64 %648
  %650 = bitcast <4 x i64>* %649 to <16 x i16>*
  store <16 x i16> %603, <16 x i16>* %650, align 32
  %651 = add nuw nsw i64 %630, 7
  %652 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %23, i64 0, i64 %651
  %653 = bitcast <4 x i64>* %652 to <16 x i16>*
  store <16 x i16> %603, <16 x i16>* %653, align 32
  %654 = add nuw nsw i64 %630, 8
  %655 = icmp eq i64 %654, 16
  br i1 %655, label %857, label %629

656:                                              ; preds = %604
  %657 = trunc i32 %606 to i16
  %658 = insertelement <16 x i16> undef, i16 %657, i32 0
  %659 = and <16 x i16> %658, <i16 63, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef>
  %660 = lshr <16 x i16> %659, <i16 1, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0>
  %661 = shufflevector <16 x i16> %660, <16 x i16> undef, <16 x i32> zeroinitializer
  %662 = sext i32 %607 to i64
  %663 = getelementptr inbounds i16, i16* %5, i64 %662
  %664 = bitcast i16* %663 to <16 x i16>*
  %665 = load <16 x i16>, <16 x i16>* %664, align 1
  %666 = getelementptr inbounds i16, i16* %663, i64 1
  %667 = bitcast i16* %666 to <16 x i16>*
  %668 = load <16 x i16>, <16 x i16>* %667, align 1
  %669 = sub <16 x i16> %668, %665
  %670 = shl <16 x i16> %665, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %671 = or <16 x i16> %670, <i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16>
  %672 = mul <16 x i16> %669, %661
  %673 = add <16 x i16> %672, %671
  %674 = lshr <16 x i16> %673, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %675 = trunc i32 %607 to i16
  %676 = add i16 %675, 1
  %677 = add i16 %675, 2
  %678 = add i16 %675, 3
  %679 = add i16 %675, 4
  %680 = add i16 %675, 5
  %681 = add i16 %675, 6
  %682 = add i16 %675, 7
  %683 = add i16 %675, 8
  %684 = add i16 %675, 9
  %685 = add i16 %675, 10
  %686 = add i16 %675, 11
  %687 = add i16 %675, 12
  %688 = add i16 %675, 13
  %689 = add i16 %675, 14
  %690 = add i16 %675, 15
  %691 = insertelement <16 x i16> undef, i16 %675, i32 0
  %692 = insertelement <16 x i16> %691, i16 %676, i32 1
  %693 = insertelement <16 x i16> %692, i16 %677, i32 2
  %694 = insertelement <16 x i16> %693, i16 %678, i32 3
  %695 = insertelement <16 x i16> %694, i16 %679, i32 4
  %696 = insertelement <16 x i16> %695, i16 %680, i32 5
  %697 = insertelement <16 x i16> %696, i16 %681, i32 6
  %698 = insertelement <16 x i16> %697, i16 %682, i32 7
  %699 = insertelement <16 x i16> %698, i16 %683, i32 8
  %700 = insertelement <16 x i16> %699, i16 %684, i32 9
  %701 = insertelement <16 x i16> %700, i16 %685, i32 10
  %702 = insertelement <16 x i16> %701, i16 %686, i32 11
  %703 = insertelement <16 x i16> %702, i16 %687, i32 12
  %704 = insertelement <16 x i16> %703, i16 %688, i32 13
  %705 = insertelement <16 x i16> %704, i16 %689, i32 14
  %706 = insertelement <16 x i16> %705, i16 %690, i32 15
  %707 = icmp slt <16 x i16> %706, <i16 31, i16 31, i16 31, i16 31, i16 31, i16 31, i16 31, i16 31, i16 31, i16 31, i16 31, i16 31, i16 31, i16 31, i16 31, i16 31>
  %708 = select <16 x i1> %707, <16 x i16> %674, <16 x i16> %603
  %709 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %23, i64 0, i64 %605
  %710 = bitcast <4 x i64>* %709 to <16 x i16>*
  store <16 x i16> %708, <16 x i16>* %710, align 32
  %711 = add nsw i32 %606, %8
  %712 = add nuw nsw i64 %605, 1
  %713 = icmp eq i64 %712, 16
  br i1 %713, label %857, label %604

714:                                              ; preds = %597, %813
  %715 = phi i64 [ %855, %813 ], [ 0, %597 ]
  %716 = phi i32 [ %854, %813 ], [ %8, %597 ]
  %717 = ashr i32 %716, 6
  %718 = icmp slt i32 %716, 1984
  br i1 %718, label %766, label %719

719:                                              ; preds = %714
  %720 = trunc i64 %715 to i32
  %721 = icmp slt i32 %720, 16
  br i1 %721, label %722, label %857

722:                                              ; preds = %719
  %723 = and i64 %715, 4294967295
  %724 = sub nsw i64 0, %715
  %725 = sub nsw i64 15, %715
  %726 = and i64 %724, 7
  %727 = icmp eq i64 %726, 0
  br i1 %727, label %736, label %728

728:                                              ; preds = %722, %728
  %729 = phi i64 [ %733, %728 ], [ %723, %722 ]
  %730 = phi i64 [ %734, %728 ], [ %726, %722 ]
  %731 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %23, i64 0, i64 %729
  %732 = bitcast <4 x i64>* %731 to <16 x i16>*
  store <16 x i16> %603, <16 x i16>* %732, align 32
  %733 = add nuw nsw i64 %729, 1
  %734 = add i64 %730, -1
  %735 = icmp eq i64 %734, 0
  br i1 %735, label %736, label %728, !llvm.loop !17

736:                                              ; preds = %728, %722
  %737 = phi i64 [ %723, %722 ], [ %733, %728 ]
  %738 = icmp ult i64 %725, 7
  br i1 %738, label %857, label %739

739:                                              ; preds = %736, %739
  %740 = phi i64 [ %764, %739 ], [ %737, %736 ]
  %741 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %23, i64 0, i64 %740
  %742 = bitcast <4 x i64>* %741 to <16 x i16>*
  store <16 x i16> %603, <16 x i16>* %742, align 32
  %743 = add nuw nsw i64 %740, 1
  %744 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %23, i64 0, i64 %743
  %745 = bitcast <4 x i64>* %744 to <16 x i16>*
  store <16 x i16> %603, <16 x i16>* %745, align 32
  %746 = add nuw nsw i64 %740, 2
  %747 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %23, i64 0, i64 %746
  %748 = bitcast <4 x i64>* %747 to <16 x i16>*
  store <16 x i16> %603, <16 x i16>* %748, align 32
  %749 = add nuw nsw i64 %740, 3
  %750 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %23, i64 0, i64 %749
  %751 = bitcast <4 x i64>* %750 to <16 x i16>*
  store <16 x i16> %603, <16 x i16>* %751, align 32
  %752 = add nuw nsw i64 %740, 4
  %753 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %23, i64 0, i64 %752
  %754 = bitcast <4 x i64>* %753 to <16 x i16>*
  store <16 x i16> %603, <16 x i16>* %754, align 32
  %755 = add nuw nsw i64 %740, 5
  %756 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %23, i64 0, i64 %755
  %757 = bitcast <4 x i64>* %756 to <16 x i16>*
  store <16 x i16> %603, <16 x i16>* %757, align 32
  %758 = add nuw nsw i64 %740, 6
  %759 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %23, i64 0, i64 %758
  %760 = bitcast <4 x i64>* %759 to <16 x i16>*
  store <16 x i16> %603, <16 x i16>* %760, align 32
  %761 = add nuw nsw i64 %740, 7
  %762 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %23, i64 0, i64 %761
  %763 = bitcast <4 x i64>* %762 to <16 x i16>*
  store <16 x i16> %603, <16 x i16>* %763, align 32
  %764 = add nuw nsw i64 %740, 8
  %765 = icmp eq i64 %764, 16
  br i1 %765, label %857, label %739

766:                                              ; preds = %714
  %767 = insertelement <8 x i32> undef, i32 %716, i32 0
  %768 = and <8 x i32> %767, <i32 63, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %769 = lshr <8 x i32> %768, <i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>
  %770 = shufflevector <8 x i32> %769, <8 x i32> undef, <8 x i32> zeroinitializer
  %771 = sext i32 %717 to i64
  %772 = getelementptr inbounds i16, i16* %5, i64 %771
  %773 = bitcast i16* %772 to <8 x i16>*
  %774 = load <8 x i16>, <8 x i16>* %773, align 1
  %775 = zext <8 x i16> %774 to <8 x i32>
  %776 = getelementptr inbounds i16, i16* %772, i64 1
  %777 = bitcast i16* %776 to <8 x i16>*
  %778 = load <8 x i16>, <8 x i16>* %777, align 1
  %779 = zext <8 x i16> %778 to <8 x i32>
  %780 = sub nsw <8 x i32> %779, %775
  %781 = shl nuw nsw <8 x i32> %775, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %782 = or <8 x i32> %781, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %783 = mul <8 x i32> %780, %770
  %784 = add <8 x i32> %783, %782
  %785 = lshr <8 x i32> %784, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %786 = bitcast <8 x i32> %785 to <4 x i64>
  %787 = shufflevector <4 x i64> %786, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %788 = shufflevector <2 x i64> %787, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %789 = bitcast <4 x i64> %788 to <8 x i32>
  %790 = tail call <16 x i16> @llvm.x86.avx2.packusdw(<8 x i32> %785, <8 x i32> %789) #8
  %791 = bitcast <16 x i16> %790 to <4 x i64>
  %792 = icmp slt i32 %716, 1472
  br i1 %792, label %793, label %813

793:                                              ; preds = %766
  %794 = getelementptr inbounds i16, i16* %772, i64 8
  %795 = bitcast i16* %794 to <8 x i16>*
  %796 = load <8 x i16>, <8 x i16>* %795, align 1
  %797 = zext <8 x i16> %796 to <8 x i32>
  %798 = getelementptr inbounds i16, i16* %772, i64 9
  %799 = bitcast i16* %798 to <8 x i16>*
  %800 = load <8 x i16>, <8 x i16>* %799, align 1
  %801 = zext <8 x i16> %800 to <8 x i32>
  %802 = sub nsw <8 x i32> %801, %797
  %803 = shl nuw nsw <8 x i32> %797, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %804 = or <8 x i32> %803, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %805 = mul <8 x i32> %802, %770
  %806 = add <8 x i32> %805, %804
  %807 = lshr <8 x i32> %806, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %808 = bitcast <8 x i32> %807 to <4 x i64>
  %809 = shufflevector <4 x i64> %808, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %810 = shufflevector <2 x i64> %809, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %811 = bitcast <4 x i64> %810 to <8 x i32>
  %812 = tail call <16 x i16> @llvm.x86.avx2.packusdw(<8 x i32> %807, <8 x i32> %811) #8
  br label %813

813:                                              ; preds = %793, %766
  %814 = phi <16 x i16> [ %812, %793 ], [ %603, %766 ]
  %815 = bitcast <16 x i16> %814 to <4 x i64>
  %816 = shufflevector <4 x i64> %791, <4 x i64> %815, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %817 = trunc i32 %717 to i16
  %818 = add i16 %817, 1
  %819 = add i16 %817, 2
  %820 = add i16 %817, 3
  %821 = add i16 %817, 4
  %822 = add i16 %817, 5
  %823 = add i16 %817, 6
  %824 = add i16 %817, 7
  %825 = add i16 %817, 8
  %826 = add i16 %817, 9
  %827 = add i16 %817, 10
  %828 = add i16 %817, 11
  %829 = add i16 %817, 12
  %830 = add i16 %817, 13
  %831 = add i16 %817, 14
  %832 = add i16 %817, 15
  %833 = insertelement <16 x i16> undef, i16 %817, i32 0
  %834 = insertelement <16 x i16> %833, i16 %818, i32 1
  %835 = insertelement <16 x i16> %834, i16 %819, i32 2
  %836 = insertelement <16 x i16> %835, i16 %820, i32 3
  %837 = insertelement <16 x i16> %836, i16 %821, i32 4
  %838 = insertelement <16 x i16> %837, i16 %822, i32 5
  %839 = insertelement <16 x i16> %838, i16 %823, i32 6
  %840 = insertelement <16 x i16> %839, i16 %824, i32 7
  %841 = insertelement <16 x i16> %840, i16 %825, i32 8
  %842 = insertelement <16 x i16> %841, i16 %826, i32 9
  %843 = insertelement <16 x i16> %842, i16 %827, i32 10
  %844 = insertelement <16 x i16> %843, i16 %828, i32 11
  %845 = insertelement <16 x i16> %844, i16 %829, i32 12
  %846 = insertelement <16 x i16> %845, i16 %830, i32 13
  %847 = insertelement <16 x i16> %846, i16 %831, i32 14
  %848 = insertelement <16 x i16> %847, i16 %832, i32 15
  %849 = icmp slt <16 x i16> %848, <i16 31, i16 31, i16 31, i16 31, i16 31, i16 31, i16 31, i16 31, i16 31, i16 31, i16 31, i16 31, i16 31, i16 31, i16 31, i16 31>
  %850 = bitcast <4 x i64> %816 to <16 x i16>
  %851 = select <16 x i1> %849, <16 x i16> %850, <16 x i16> %603
  %852 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %23, i64 0, i64 %715
  %853 = bitcast <4 x i64>* %852 to <16 x i16>*
  store <16 x i16> %851, <16 x i16>* %853, align 32
  %854 = add nsw i32 %716, %8
  %855 = add nuw nsw i64 %715, 1
  %856 = icmp eq i64 %855, 16
  br i1 %856, label %857, label %714

857:                                              ; preds = %813, %736, %739, %656, %626, %629, %609, %719
  %858 = bitcast [16 x <4 x i64>]* %23 to <16 x i16>*
  %859 = load <16 x i16>, <16 x i16>* %858, align 32
  %860 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %23, i64 0, i64 1
  %861 = bitcast <4 x i64>* %860 to <16 x i16>*
  %862 = load <16 x i16>, <16 x i16>* %861, align 32
  %863 = shufflevector <16 x i16> %859, <16 x i16> %862, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %864 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %23, i64 0, i64 2
  %865 = bitcast <4 x i64>* %864 to <16 x i16>*
  %866 = load <16 x i16>, <16 x i16>* %865, align 32
  %867 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %23, i64 0, i64 3
  %868 = bitcast <4 x i64>* %867 to <16 x i16>*
  %869 = load <16 x i16>, <16 x i16>* %868, align 32
  %870 = shufflevector <16 x i16> %866, <16 x i16> %869, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %871 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %23, i64 0, i64 4
  %872 = bitcast <4 x i64>* %871 to <16 x i16>*
  %873 = load <16 x i16>, <16 x i16>* %872, align 32
  %874 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %23, i64 0, i64 5
  %875 = bitcast <4 x i64>* %874 to <16 x i16>*
  %876 = load <16 x i16>, <16 x i16>* %875, align 32
  %877 = shufflevector <16 x i16> %873, <16 x i16> %876, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %878 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %23, i64 0, i64 6
  %879 = bitcast <4 x i64>* %878 to <16 x i16>*
  %880 = load <16 x i16>, <16 x i16>* %879, align 32
  %881 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %23, i64 0, i64 7
  %882 = bitcast <4 x i64>* %881 to <16 x i16>*
  %883 = load <16 x i16>, <16 x i16>* %882, align 32
  %884 = shufflevector <16 x i16> %880, <16 x i16> %883, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %885 = bitcast <16 x i16> %863 to <8 x i32>
  %886 = bitcast <16 x i16> %870 to <8 x i32>
  %887 = shufflevector <8 x i32> %885, <8 x i32> %886, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %888 = bitcast <8 x i32> %887 to <4 x i64>
  %889 = bitcast <16 x i16> %877 to <8 x i32>
  %890 = bitcast <16 x i16> %884 to <8 x i32>
  %891 = shufflevector <8 x i32> %889, <8 x i32> %890, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %892 = bitcast <8 x i32> %891 to <4 x i64>
  %893 = shufflevector <4 x i64> %888, <4 x i64> %892, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %894 = shufflevector <4 x i64> %888, <4 x i64> %892, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %895 = shufflevector <8 x i32> %885, <8 x i32> %886, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %896 = bitcast <8 x i32> %895 to <4 x i64>
  %897 = shufflevector <8 x i32> %889, <8 x i32> %890, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %898 = bitcast <8 x i32> %897 to <4 x i64>
  %899 = shufflevector <4 x i64> %896, <4 x i64> %898, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %900 = shufflevector <4 x i64> %896, <4 x i64> %898, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %901 = shufflevector <16 x i16> %859, <16 x i16> %862, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %902 = shufflevector <16 x i16> %866, <16 x i16> %869, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %903 = shufflevector <16 x i16> %873, <16 x i16> %876, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %904 = shufflevector <16 x i16> %880, <16 x i16> %883, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %905 = bitcast <16 x i16> %901 to <8 x i32>
  %906 = bitcast <16 x i16> %902 to <8 x i32>
  %907 = shufflevector <8 x i32> %905, <8 x i32> %906, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %908 = bitcast <8 x i32> %907 to <4 x i64>
  %909 = bitcast <16 x i16> %903 to <8 x i32>
  %910 = bitcast <16 x i16> %904 to <8 x i32>
  %911 = shufflevector <8 x i32> %909, <8 x i32> %910, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %912 = bitcast <8 x i32> %911 to <4 x i64>
  %913 = shufflevector <4 x i64> %908, <4 x i64> %912, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %914 = shufflevector <4 x i64> %908, <4 x i64> %912, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %915 = shufflevector <8 x i32> %905, <8 x i32> %906, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %916 = bitcast <8 x i32> %915 to <4 x i64>
  %917 = shufflevector <8 x i32> %909, <8 x i32> %910, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %918 = bitcast <8 x i32> %917 to <4 x i64>
  %919 = shufflevector <4 x i64> %916, <4 x i64> %918, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %920 = shufflevector <4 x i64> %916, <4 x i64> %918, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %921 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %23, i64 0, i64 8
  %922 = bitcast <4 x i64>* %921 to <16 x i16>*
  %923 = load <16 x i16>, <16 x i16>* %922, align 32
  %924 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %23, i64 0, i64 9
  %925 = bitcast <4 x i64>* %924 to <16 x i16>*
  %926 = load <16 x i16>, <16 x i16>* %925, align 32
  %927 = shufflevector <16 x i16> %923, <16 x i16> %926, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %928 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %23, i64 0, i64 10
  %929 = bitcast <4 x i64>* %928 to <16 x i16>*
  %930 = load <16 x i16>, <16 x i16>* %929, align 32
  %931 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %23, i64 0, i64 11
  %932 = bitcast <4 x i64>* %931 to <16 x i16>*
  %933 = load <16 x i16>, <16 x i16>* %932, align 32
  %934 = shufflevector <16 x i16> %930, <16 x i16> %933, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %935 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %23, i64 0, i64 12
  %936 = bitcast <4 x i64>* %935 to <16 x i16>*
  %937 = load <16 x i16>, <16 x i16>* %936, align 32
  %938 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %23, i64 0, i64 13
  %939 = bitcast <4 x i64>* %938 to <16 x i16>*
  %940 = load <16 x i16>, <16 x i16>* %939, align 32
  %941 = shufflevector <16 x i16> %937, <16 x i16> %940, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %942 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %23, i64 0, i64 14
  %943 = bitcast <4 x i64>* %942 to <16 x i16>*
  %944 = load <16 x i16>, <16 x i16>* %943, align 32
  %945 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %23, i64 0, i64 15
  %946 = bitcast <4 x i64>* %945 to <16 x i16>*
  %947 = load <16 x i16>, <16 x i16>* %946, align 32
  %948 = shufflevector <16 x i16> %944, <16 x i16> %947, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %949 = bitcast <16 x i16> %927 to <8 x i32>
  %950 = bitcast <16 x i16> %934 to <8 x i32>
  %951 = shufflevector <8 x i32> %949, <8 x i32> %950, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %952 = bitcast <8 x i32> %951 to <4 x i64>
  %953 = bitcast <16 x i16> %941 to <8 x i32>
  %954 = bitcast <16 x i16> %948 to <8 x i32>
  %955 = shufflevector <8 x i32> %953, <8 x i32> %954, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %956 = bitcast <8 x i32> %955 to <4 x i64>
  %957 = shufflevector <4 x i64> %952, <4 x i64> %956, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %958 = shufflevector <4 x i64> %952, <4 x i64> %956, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %959 = shufflevector <8 x i32> %949, <8 x i32> %950, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %960 = bitcast <8 x i32> %959 to <4 x i64>
  %961 = shufflevector <8 x i32> %953, <8 x i32> %954, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %962 = bitcast <8 x i32> %961 to <4 x i64>
  %963 = shufflevector <4 x i64> %960, <4 x i64> %962, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %964 = shufflevector <4 x i64> %960, <4 x i64> %962, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %965 = shufflevector <16 x i16> %923, <16 x i16> %926, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %966 = shufflevector <16 x i16> %930, <16 x i16> %933, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %967 = shufflevector <16 x i16> %937, <16 x i16> %940, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %968 = shufflevector <16 x i16> %944, <16 x i16> %947, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %969 = bitcast <16 x i16> %965 to <8 x i32>
  %970 = bitcast <16 x i16> %966 to <8 x i32>
  %971 = shufflevector <8 x i32> %969, <8 x i32> %970, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %972 = bitcast <8 x i32> %971 to <4 x i64>
  %973 = bitcast <16 x i16> %967 to <8 x i32>
  %974 = bitcast <16 x i16> %968 to <8 x i32>
  %975 = shufflevector <8 x i32> %973, <8 x i32> %974, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %976 = bitcast <8 x i32> %975 to <4 x i64>
  %977 = shufflevector <4 x i64> %972, <4 x i64> %976, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %978 = shufflevector <4 x i64> %972, <4 x i64> %976, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %979 = shufflevector <8 x i32> %969, <8 x i32> %970, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %980 = bitcast <8 x i32> %979 to <4 x i64>
  %981 = shufflevector <8 x i32> %973, <8 x i32> %974, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %982 = bitcast <8 x i32> %981 to <4 x i64>
  %983 = shufflevector <4 x i64> %980, <4 x i64> %982, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %984 = shufflevector <4 x i64> %980, <4 x i64> %982, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %985 = bitcast <4 x i64> %893 to <8 x i32>
  %986 = shufflevector <4 x i64> %957, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %987 = bitcast <2 x i64> %986 to <4 x i32>
  %988 = shufflevector <4 x i32> %987, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %989 = shufflevector <8 x i32> %985, <8 x i32> %988, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %990 = bitcast <4 x i64> %957 to <8 x i32>
  %991 = shufflevector <4 x i64> %893, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %992 = bitcast <2 x i64> %991 to <4 x i32>
  %993 = shufflevector <4 x i32> %992, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %994 = shufflevector <8 x i32> %993, <8 x i32> %990, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  %995 = bitcast <4 x i64> %894 to <8 x i32>
  %996 = shufflevector <4 x i64> %958, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %997 = bitcast <2 x i64> %996 to <4 x i32>
  %998 = shufflevector <4 x i32> %997, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %999 = shufflevector <8 x i32> %995, <8 x i32> %998, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %1000 = bitcast <4 x i64> %958 to <8 x i32>
  %1001 = shufflevector <4 x i64> %894, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %1002 = bitcast <2 x i64> %1001 to <4 x i32>
  %1003 = shufflevector <4 x i32> %1002, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %1004 = shufflevector <8 x i32> %1003, <8 x i32> %1000, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  %1005 = bitcast <4 x i64> %899 to <8 x i32>
  %1006 = shufflevector <4 x i64> %963, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %1007 = bitcast <2 x i64> %1006 to <4 x i32>
  %1008 = shufflevector <4 x i32> %1007, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %1009 = shufflevector <8 x i32> %1005, <8 x i32> %1008, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %1010 = bitcast <4 x i64> %963 to <8 x i32>
  %1011 = shufflevector <4 x i64> %899, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %1012 = bitcast <2 x i64> %1011 to <4 x i32>
  %1013 = shufflevector <4 x i32> %1012, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %1014 = shufflevector <8 x i32> %1013, <8 x i32> %1010, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  %1015 = bitcast <4 x i64> %900 to <8 x i32>
  %1016 = shufflevector <4 x i64> %964, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %1017 = bitcast <2 x i64> %1016 to <4 x i32>
  %1018 = shufflevector <4 x i32> %1017, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %1019 = shufflevector <8 x i32> %1015, <8 x i32> %1018, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %1020 = bitcast <4 x i64> %964 to <8 x i32>
  %1021 = shufflevector <4 x i64> %900, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %1022 = bitcast <2 x i64> %1021 to <4 x i32>
  %1023 = shufflevector <4 x i32> %1022, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %1024 = shufflevector <8 x i32> %1023, <8 x i32> %1020, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  %1025 = bitcast <4 x i64> %913 to <8 x i32>
  %1026 = shufflevector <4 x i64> %977, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %1027 = bitcast <2 x i64> %1026 to <4 x i32>
  %1028 = shufflevector <4 x i32> %1027, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %1029 = shufflevector <8 x i32> %1025, <8 x i32> %1028, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %1030 = bitcast <4 x i64> %977 to <8 x i32>
  %1031 = shufflevector <4 x i64> %913, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %1032 = bitcast <2 x i64> %1031 to <4 x i32>
  %1033 = shufflevector <4 x i32> %1032, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %1034 = shufflevector <8 x i32> %1033, <8 x i32> %1030, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  %1035 = bitcast <4 x i64> %914 to <8 x i32>
  %1036 = shufflevector <4 x i64> %978, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %1037 = bitcast <2 x i64> %1036 to <4 x i32>
  %1038 = shufflevector <4 x i32> %1037, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %1039 = shufflevector <8 x i32> %1035, <8 x i32> %1038, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %1040 = bitcast <4 x i64> %978 to <8 x i32>
  %1041 = shufflevector <4 x i64> %914, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %1042 = bitcast <2 x i64> %1041 to <4 x i32>
  %1043 = shufflevector <4 x i32> %1042, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %1044 = shufflevector <8 x i32> %1043, <8 x i32> %1040, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  %1045 = bitcast <4 x i64> %919 to <8 x i32>
  %1046 = shufflevector <4 x i64> %983, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %1047 = bitcast <2 x i64> %1046 to <4 x i32>
  %1048 = shufflevector <4 x i32> %1047, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %1049 = shufflevector <8 x i32> %1045, <8 x i32> %1048, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %1050 = bitcast <4 x i64> %983 to <8 x i32>
  %1051 = shufflevector <4 x i64> %919, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %1052 = bitcast <2 x i64> %1051 to <4 x i32>
  %1053 = shufflevector <4 x i32> %1052, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %1054 = shufflevector <8 x i32> %1053, <8 x i32> %1050, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  %1055 = bitcast <4 x i64> %920 to <8 x i32>
  %1056 = shufflevector <4 x i64> %984, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %1057 = bitcast <2 x i64> %1056 to <4 x i32>
  %1058 = shufflevector <4 x i32> %1057, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %1059 = shufflevector <8 x i32> %1055, <8 x i32> %1058, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %1060 = bitcast <4 x i64> %984 to <8 x i32>
  %1061 = shufflevector <4 x i64> %920, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %1062 = bitcast <2 x i64> %1061 to <4 x i32>
  %1063 = shufflevector <4 x i32> %1062, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %1064 = shufflevector <8 x i32> %1063, <8 x i32> %1060, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  %1065 = bitcast i16* %0 to <8 x i32>*
  store <8 x i32> %989, <8 x i32>* %1065, align 1
  %1066 = getelementptr inbounds i16, i16* %0, i64 %1
  %1067 = bitcast i16* %1066 to <8 x i32>*
  store <8 x i32> %999, <8 x i32>* %1067, align 1
  %1068 = shl nsw i64 %1, 1
  %1069 = getelementptr inbounds i16, i16* %0, i64 %1068
  %1070 = bitcast i16* %1069 to <8 x i32>*
  store <8 x i32> %1009, <8 x i32>* %1070, align 1
  %1071 = mul nsw i64 %1, 3
  %1072 = getelementptr inbounds i16, i16* %0, i64 %1071
  %1073 = bitcast i16* %1072 to <8 x i32>*
  store <8 x i32> %1019, <8 x i32>* %1073, align 1
  %1074 = shl nsw i64 %1, 2
  %1075 = getelementptr inbounds i16, i16* %0, i64 %1074
  %1076 = bitcast i16* %1075 to <8 x i32>*
  store <8 x i32> %1029, <8 x i32>* %1076, align 1
  %1077 = mul nsw i64 %1, 5
  %1078 = getelementptr inbounds i16, i16* %0, i64 %1077
  %1079 = bitcast i16* %1078 to <8 x i32>*
  store <8 x i32> %1039, <8 x i32>* %1079, align 1
  %1080 = mul nsw i64 %1, 6
  %1081 = getelementptr inbounds i16, i16* %0, i64 %1080
  %1082 = bitcast i16* %1081 to <8 x i32>*
  store <8 x i32> %1049, <8 x i32>* %1082, align 1
  %1083 = mul nsw i64 %1, 7
  %1084 = getelementptr inbounds i16, i16* %0, i64 %1083
  %1085 = bitcast i16* %1084 to <8 x i32>*
  store <8 x i32> %1059, <8 x i32>* %1085, align 1
  %1086 = shl nsw i64 %1, 3
  %1087 = getelementptr inbounds i16, i16* %0, i64 %1086
  %1088 = bitcast i16* %1087 to <8 x i32>*
  store <8 x i32> %994, <8 x i32>* %1088, align 1
  %1089 = mul nsw i64 %1, 9
  %1090 = getelementptr inbounds i16, i16* %0, i64 %1089
  %1091 = bitcast i16* %1090 to <8 x i32>*
  store <8 x i32> %1004, <8 x i32>* %1091, align 1
  %1092 = mul nsw i64 %1, 10
  %1093 = getelementptr inbounds i16, i16* %0, i64 %1092
  %1094 = bitcast i16* %1093 to <8 x i32>*
  store <8 x i32> %1014, <8 x i32>* %1094, align 1
  %1095 = mul nsw i64 %1, 11
  %1096 = getelementptr inbounds i16, i16* %0, i64 %1095
  %1097 = bitcast i16* %1096 to <8 x i32>*
  store <8 x i32> %1024, <8 x i32>* %1097, align 1
  %1098 = mul nsw i64 %1, 12
  %1099 = getelementptr inbounds i16, i16* %0, i64 %1098
  %1100 = bitcast i16* %1099 to <8 x i32>*
  store <8 x i32> %1034, <8 x i32>* %1100, align 1
  %1101 = mul nsw i64 %1, 13
  %1102 = getelementptr inbounds i16, i16* %0, i64 %1101
  %1103 = bitcast i16* %1102 to <8 x i32>*
  store <8 x i32> %1044, <8 x i32>* %1103, align 1
  %1104 = mul nsw i64 %1, 14
  %1105 = getelementptr inbounds i16, i16* %0, i64 %1104
  %1106 = bitcast i16* %1105 to <8 x i32>*
  store <8 x i32> %1054, <8 x i32>* %1106, align 1
  %1107 = mul nsw i64 %1, 15
  %1108 = getelementptr inbounds i16, i16* %0, i64 %1107
  %1109 = bitcast i16* %1108 to <8 x i32>*
  store <8 x i32> %1064, <8 x i32>* %1109, align 1
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %598) #8
  br label %7784

1110:                                             ; preds = %26
  %1111 = bitcast [64 x <4 x i64>]* %22 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2048, i8* nonnull %1111) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %1111, i8 -86, i64 2048, i1 false) #8
  %1112 = bitcast [16 x <4 x i64>]* %23 to i8*
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %1112) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %1112, i8 -86, i64 512, i1 false) #8
  %1113 = icmp slt i32 %9, 12
  %1114 = getelementptr inbounds i16, i16* %5, i64 63
  %1115 = load i16, i16* %1114, align 2
  %1116 = insertelement <16 x i16> undef, i16 %1115, i32 0
  %1117 = shufflevector <16 x i16> %1116, <16 x i16> undef, <16 x i32> zeroinitializer
  br i1 %1113, label %1118, label %1285

1118:                                             ; preds = %1110, %1280
  %1119 = phi i64 [ %1283, %1280 ], [ 0, %1110 ]
  %1120 = phi i32 [ %1282, %1280 ], [ %8, %1110 ]
  %1121 = ashr i32 %1120, 6
  %1122 = icmp slt i32 %1120, 4032
  br i1 %1122, label %1173, label %1123

1123:                                             ; preds = %1118
  %1124 = trunc i64 %1119 to i32
  %1125 = icmp slt i32 %1124, 32
  br i1 %1125, label %1126, label %1491

1126:                                             ; preds = %1123
  %1127 = and i64 %1119, 4294967295
  %1128 = sub nsw i64 0, %1119
  %1129 = sub nsw i64 31, %1119
  %1130 = and i64 %1128, 3
  %1131 = icmp eq i64 %1130, 0
  br i1 %1131, label %1143, label %1132

1132:                                             ; preds = %1126, %1132
  %1133 = phi i64 [ %1140, %1132 ], [ %1127, %1126 ]
  %1134 = phi i64 [ %1141, %1132 ], [ %1130, %1126 ]
  %1135 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %22, i64 0, i64 %1133
  %1136 = bitcast <4 x i64>* %1135 to <16 x i16>*
  store <16 x i16> %1117, <16 x i16>* %1136, align 32
  %1137 = add nuw nsw i64 %1133, 32
  %1138 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %22, i64 0, i64 %1137
  %1139 = bitcast <4 x i64>* %1138 to <16 x i16>*
  store <16 x i16> %1117, <16 x i16>* %1139, align 32
  %1140 = add nuw nsw i64 %1133, 1
  %1141 = add i64 %1134, -1
  %1142 = icmp eq i64 %1141, 0
  br i1 %1142, label %1143, label %1132, !llvm.loop !18

1143:                                             ; preds = %1132, %1126
  %1144 = phi i64 [ %1127, %1126 ], [ %1140, %1132 ]
  %1145 = icmp ult i64 %1129, 3
  br i1 %1145, label %1491, label %1146

1146:                                             ; preds = %1143, %1146
  %1147 = phi i64 [ %1171, %1146 ], [ %1144, %1143 ]
  %1148 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %22, i64 0, i64 %1147
  %1149 = bitcast <4 x i64>* %1148 to <16 x i16>*
  store <16 x i16> %1117, <16 x i16>* %1149, align 32
  %1150 = add nuw nsw i64 %1147, 32
  %1151 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %22, i64 0, i64 %1150
  %1152 = bitcast <4 x i64>* %1151 to <16 x i16>*
  store <16 x i16> %1117, <16 x i16>* %1152, align 32
  %1153 = add nuw nsw i64 %1147, 1
  %1154 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %22, i64 0, i64 %1153
  %1155 = bitcast <4 x i64>* %1154 to <16 x i16>*
  store <16 x i16> %1117, <16 x i16>* %1155, align 32
  %1156 = add nuw nsw i64 %1147, 33
  %1157 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %22, i64 0, i64 %1156
  %1158 = bitcast <4 x i64>* %1157 to <16 x i16>*
  store <16 x i16> %1117, <16 x i16>* %1158, align 32
  %1159 = add nuw nsw i64 %1147, 2
  %1160 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %22, i64 0, i64 %1159
  %1161 = bitcast <4 x i64>* %1160 to <16 x i16>*
  store <16 x i16> %1117, <16 x i16>* %1161, align 32
  %1162 = add nuw nsw i64 %1147, 34
  %1163 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %22, i64 0, i64 %1162
  %1164 = bitcast <4 x i64>* %1163 to <16 x i16>*
  store <16 x i16> %1117, <16 x i16>* %1164, align 32
  %1165 = add nuw nsw i64 %1147, 3
  %1166 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %22, i64 0, i64 %1165
  %1167 = bitcast <4 x i64>* %1166 to <16 x i16>*
  store <16 x i16> %1117, <16 x i16>* %1167, align 32
  %1168 = add nuw nsw i64 %1147, 35
  %1169 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %22, i64 0, i64 %1168
  %1170 = bitcast <4 x i64>* %1169 to <16 x i16>*
  store <16 x i16> %1117, <16 x i16>* %1170, align 32
  %1171 = add nuw nsw i64 %1147, 4
  %1172 = icmp eq i64 %1171, 32
  br i1 %1172, label %1491, label %1146

1173:                                             ; preds = %1118
  %1174 = trunc i32 %1120 to i16
  %1175 = insertelement <16 x i16> undef, i16 %1174, i32 0
  %1176 = and <16 x i16> %1175, <i16 63, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef>
  %1177 = lshr <16 x i16> %1176, <i16 1, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0>
  %1178 = shufflevector <16 x i16> %1177, <16 x i16> undef, <16 x i32> zeroinitializer
  %1179 = sext i32 %1121 to i64
  %1180 = getelementptr inbounds i16, i16* %5, i64 %1179
  %1181 = getelementptr inbounds i16, i16* %1180, i64 1
  %1182 = add nuw nsw i64 %1119, 32
  %1183 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %22, i64 0, i64 %1182
  %1184 = bitcast <4 x i64>* %1183 to <16 x i16>*
  %1185 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %22, i64 0, i64 %1119
  %1186 = bitcast <4 x i64>* %1185 to <16 x i16>*
  %1187 = bitcast i16* %1180 to <16 x i16>*
  %1188 = load <16 x i16>, <16 x i16>* %1187, align 1
  %1189 = bitcast i16* %1181 to <16 x i16>*
  %1190 = load <16 x i16>, <16 x i16>* %1189, align 1
  %1191 = sub <16 x i16> %1190, %1188
  %1192 = shl <16 x i16> %1188, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %1193 = or <16 x i16> %1192, <i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16>
  %1194 = mul <16 x i16> %1191, %1178
  %1195 = add <16 x i16> %1194, %1193
  %1196 = lshr <16 x i16> %1195, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %1197 = trunc i32 %1121 to i16
  %1198 = add i16 %1197, 1
  %1199 = add i16 %1197, 2
  %1200 = add i16 %1197, 3
  %1201 = add i16 %1197, 4
  %1202 = add i16 %1197, 5
  %1203 = add i16 %1197, 6
  %1204 = add i16 %1197, 7
  %1205 = add i16 %1197, 8
  %1206 = add i16 %1197, 9
  %1207 = add i16 %1197, 10
  %1208 = add i16 %1197, 11
  %1209 = add i16 %1197, 12
  %1210 = add i16 %1197, 13
  %1211 = add i16 %1197, 14
  %1212 = add i16 %1197, 15
  %1213 = insertelement <16 x i16> undef, i16 %1197, i32 0
  %1214 = insertelement <16 x i16> %1213, i16 %1198, i32 1
  %1215 = insertelement <16 x i16> %1214, i16 %1199, i32 2
  %1216 = insertelement <16 x i16> %1215, i16 %1200, i32 3
  %1217 = insertelement <16 x i16> %1216, i16 %1201, i32 4
  %1218 = insertelement <16 x i16> %1217, i16 %1202, i32 5
  %1219 = insertelement <16 x i16> %1218, i16 %1203, i32 6
  %1220 = insertelement <16 x i16> %1219, i16 %1204, i32 7
  %1221 = insertelement <16 x i16> %1220, i16 %1205, i32 8
  %1222 = insertelement <16 x i16> %1221, i16 %1206, i32 9
  %1223 = insertelement <16 x i16> %1222, i16 %1207, i32 10
  %1224 = insertelement <16 x i16> %1223, i16 %1208, i32 11
  %1225 = insertelement <16 x i16> %1224, i16 %1209, i32 12
  %1226 = insertelement <16 x i16> %1225, i16 %1210, i32 13
  %1227 = insertelement <16 x i16> %1226, i16 %1211, i32 14
  %1228 = insertelement <16 x i16> %1227, i16 %1212, i32 15
  %1229 = icmp slt <16 x i16> %1228, <i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63>
  %1230 = select <16 x i1> %1229, <16 x i16> %1196, <16 x i16> %1117
  store <16 x i16> %1230, <16 x i16>* %1186, align 32
  %1231 = add nsw i64 %1179, 16
  %1232 = icmp slt i64 %1231, 63
  br i1 %1232, label %1233, label %1280

1233:                                             ; preds = %1173
  %1234 = getelementptr inbounds i16, i16* %1180, i64 16
  %1235 = bitcast i16* %1234 to <16 x i16>*
  %1236 = load <16 x i16>, <16 x i16>* %1235, align 1
  %1237 = getelementptr inbounds i16, i16* %1181, i64 16
  %1238 = bitcast i16* %1237 to <16 x i16>*
  %1239 = load <16 x i16>, <16 x i16>* %1238, align 1
  %1240 = sub <16 x i16> %1239, %1236
  %1241 = shl <16 x i16> %1236, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %1242 = or <16 x i16> %1241, <i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16>
  %1243 = mul <16 x i16> %1240, %1178
  %1244 = add <16 x i16> %1243, %1242
  %1245 = lshr <16 x i16> %1244, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %1246 = trunc i64 %1231 to i16
  %1247 = add i16 %1246, 1
  %1248 = add i16 %1246, 2
  %1249 = add i16 %1246, 3
  %1250 = add i16 %1246, 4
  %1251 = add i16 %1246, 5
  %1252 = add i16 %1246, 6
  %1253 = add i16 %1246, 7
  %1254 = add i16 %1246, 8
  %1255 = add i16 %1246, 9
  %1256 = add i16 %1246, 10
  %1257 = add i16 %1246, 11
  %1258 = add i16 %1246, 12
  %1259 = add i16 %1246, 13
  %1260 = add i16 %1246, 14
  %1261 = add i16 %1246, 15
  %1262 = insertelement <16 x i16> undef, i16 %1246, i32 0
  %1263 = insertelement <16 x i16> %1262, i16 %1247, i32 1
  %1264 = insertelement <16 x i16> %1263, i16 %1248, i32 2
  %1265 = insertelement <16 x i16> %1264, i16 %1249, i32 3
  %1266 = insertelement <16 x i16> %1265, i16 %1250, i32 4
  %1267 = insertelement <16 x i16> %1266, i16 %1251, i32 5
  %1268 = insertelement <16 x i16> %1267, i16 %1252, i32 6
  %1269 = insertelement <16 x i16> %1268, i16 %1253, i32 7
  %1270 = insertelement <16 x i16> %1269, i16 %1254, i32 8
  %1271 = insertelement <16 x i16> %1270, i16 %1255, i32 9
  %1272 = insertelement <16 x i16> %1271, i16 %1256, i32 10
  %1273 = insertelement <16 x i16> %1272, i16 %1257, i32 11
  %1274 = insertelement <16 x i16> %1273, i16 %1258, i32 12
  %1275 = insertelement <16 x i16> %1274, i16 %1259, i32 13
  %1276 = insertelement <16 x i16> %1275, i16 %1260, i32 14
  %1277 = insertelement <16 x i16> %1276, i16 %1261, i32 15
  %1278 = icmp slt <16 x i16> %1277, <i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63>
  %1279 = select <16 x i1> %1278, <16 x i16> %1245, <16 x i16> %1117
  br label %1280

1280:                                             ; preds = %1233, %1173
  %1281 = phi <16 x i16> [ %1279, %1233 ], [ %1117, %1173 ]
  store <16 x i16> %1281, <16 x i16>* %1184, align 32
  %1282 = add nsw i32 %1120, %8
  %1283 = add nuw nsw i64 %1119, 1
  %1284 = icmp eq i64 %1283, 32
  br i1 %1284, label %1491, label %1118

1285:                                             ; preds = %1110
  %1286 = bitcast <16 x i16> %1117 to <4 x i64>
  br label %1287

1287:                                             ; preds = %1486, %1285
  %1288 = phi i64 [ 0, %1285 ], [ %1489, %1486 ]
  %1289 = phi i32 [ %8, %1285 ], [ %1488, %1486 ]
  %1290 = ashr i32 %1289, 6
  %1291 = icmp slt i32 %1289, 4032
  br i1 %1291, label %1342, label %1292

1292:                                             ; preds = %1287
  %1293 = trunc i64 %1288 to i32
  %1294 = icmp slt i32 %1293, 32
  br i1 %1294, label %1295, label %1491

1295:                                             ; preds = %1292
  %1296 = and i64 %1288, 4294967295
  %1297 = sub nsw i64 0, %1288
  %1298 = sub nsw i64 31, %1288
  %1299 = and i64 %1297, 3
  %1300 = icmp eq i64 %1299, 0
  br i1 %1300, label %1312, label %1301

1301:                                             ; preds = %1295, %1301
  %1302 = phi i64 [ %1309, %1301 ], [ %1296, %1295 ]
  %1303 = phi i64 [ %1310, %1301 ], [ %1299, %1295 ]
  %1304 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %22, i64 0, i64 %1302
  %1305 = bitcast <4 x i64>* %1304 to <16 x i16>*
  store <16 x i16> %1117, <16 x i16>* %1305, align 32
  %1306 = add nuw nsw i64 %1302, 32
  %1307 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %22, i64 0, i64 %1306
  %1308 = bitcast <4 x i64>* %1307 to <16 x i16>*
  store <16 x i16> %1117, <16 x i16>* %1308, align 32
  %1309 = add nuw nsw i64 %1302, 1
  %1310 = add i64 %1303, -1
  %1311 = icmp eq i64 %1310, 0
  br i1 %1311, label %1312, label %1301, !llvm.loop !19

1312:                                             ; preds = %1301, %1295
  %1313 = phi i64 [ %1296, %1295 ], [ %1309, %1301 ]
  %1314 = icmp ult i64 %1298, 3
  br i1 %1314, label %1491, label %1315

1315:                                             ; preds = %1312, %1315
  %1316 = phi i64 [ %1340, %1315 ], [ %1313, %1312 ]
  %1317 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %22, i64 0, i64 %1316
  %1318 = bitcast <4 x i64>* %1317 to <16 x i16>*
  store <16 x i16> %1117, <16 x i16>* %1318, align 32
  %1319 = add nuw nsw i64 %1316, 32
  %1320 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %22, i64 0, i64 %1319
  %1321 = bitcast <4 x i64>* %1320 to <16 x i16>*
  store <16 x i16> %1117, <16 x i16>* %1321, align 32
  %1322 = add nuw nsw i64 %1316, 1
  %1323 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %22, i64 0, i64 %1322
  %1324 = bitcast <4 x i64>* %1323 to <16 x i16>*
  store <16 x i16> %1117, <16 x i16>* %1324, align 32
  %1325 = add nuw nsw i64 %1316, 33
  %1326 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %22, i64 0, i64 %1325
  %1327 = bitcast <4 x i64>* %1326 to <16 x i16>*
  store <16 x i16> %1117, <16 x i16>* %1327, align 32
  %1328 = add nuw nsw i64 %1316, 2
  %1329 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %22, i64 0, i64 %1328
  %1330 = bitcast <4 x i64>* %1329 to <16 x i16>*
  store <16 x i16> %1117, <16 x i16>* %1330, align 32
  %1331 = add nuw nsw i64 %1316, 34
  %1332 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %22, i64 0, i64 %1331
  %1333 = bitcast <4 x i64>* %1332 to <16 x i16>*
  store <16 x i16> %1117, <16 x i16>* %1333, align 32
  %1334 = add nuw nsw i64 %1316, 3
  %1335 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %22, i64 0, i64 %1334
  %1336 = bitcast <4 x i64>* %1335 to <16 x i16>*
  store <16 x i16> %1117, <16 x i16>* %1336, align 32
  %1337 = add nuw nsw i64 %1316, 35
  %1338 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %22, i64 0, i64 %1337
  %1339 = bitcast <4 x i64>* %1338 to <16 x i16>*
  store <16 x i16> %1117, <16 x i16>* %1339, align 32
  %1340 = add nuw nsw i64 %1316, 4
  %1341 = icmp eq i64 %1340, 32
  br i1 %1341, label %1491, label %1315

1342:                                             ; preds = %1287
  %1343 = insertelement <8 x i32> undef, i32 %1289, i32 0
  %1344 = and <8 x i32> %1343, <i32 4128831, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1345 = lshr <8 x i32> %1344, <i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>
  %1346 = shufflevector <8 x i32> %1345, <8 x i32> undef, <8 x i32> zeroinitializer
  %1347 = sext i32 %1290 to i64
  %1348 = getelementptr inbounds i16, i16* %5, i64 %1347
  %1349 = getelementptr inbounds i16, i16* %1348, i64 1
  %1350 = getelementptr inbounds i16, i16* %1348, i64 8
  %1351 = getelementptr inbounds i16, i16* %1348, i64 9
  %1352 = add nuw nsw i64 %1288, 32
  %1353 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %22, i64 0, i64 %1352
  %1354 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %22, i64 0, i64 %1288
  %1355 = bitcast i16* %1348 to <8 x i16>*
  %1356 = load <8 x i16>, <8 x i16>* %1355, align 1
  %1357 = zext <8 x i16> %1356 to <8 x i32>
  %1358 = bitcast i16* %1349 to <8 x i16>*
  %1359 = load <8 x i16>, <8 x i16>* %1358, align 1
  %1360 = zext <8 x i16> %1359 to <8 x i32>
  %1361 = sub nsw <8 x i32> %1360, %1357
  %1362 = shl nuw nsw <8 x i32> %1357, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %1363 = or <8 x i32> %1362, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %1364 = mul <8 x i32> %1361, %1346
  %1365 = add <8 x i32> %1364, %1363
  %1366 = lshr <8 x i32> %1365, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %1367 = bitcast <8 x i32> %1366 to <4 x i64>
  %1368 = shufflevector <4 x i64> %1367, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %1369 = shufflevector <2 x i64> %1368, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1370 = bitcast <4 x i64> %1369 to <8 x i32>
  %1371 = tail call <16 x i16> @llvm.x86.avx2.packusdw(<8 x i32> %1366, <8 x i32> %1370) #8
  %1372 = bitcast <16 x i16> %1371 to <4 x i64>
  %1373 = icmp slt i32 %1289, 3520
  br i1 %1373, label %1374, label %1393

1374:                                             ; preds = %1342
  %1375 = bitcast i16* %1350 to <8 x i16>*
  %1376 = load <8 x i16>, <8 x i16>* %1375, align 1
  %1377 = zext <8 x i16> %1376 to <8 x i32>
  %1378 = bitcast i16* %1351 to <8 x i16>*
  %1379 = load <8 x i16>, <8 x i16>* %1378, align 1
  %1380 = zext <8 x i16> %1379 to <8 x i32>
  %1381 = sub nsw <8 x i32> %1380, %1377
  %1382 = shl nuw nsw <8 x i32> %1377, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %1383 = or <8 x i32> %1382, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %1384 = mul <8 x i32> %1381, %1346
  %1385 = add <8 x i32> %1384, %1383
  %1386 = lshr <8 x i32> %1385, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %1387 = bitcast <8 x i32> %1386 to <4 x i64>
  %1388 = shufflevector <4 x i64> %1387, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %1389 = shufflevector <2 x i64> %1388, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1390 = bitcast <4 x i64> %1389 to <8 x i32>
  %1391 = tail call <16 x i16> @llvm.x86.avx2.packusdw(<8 x i32> %1386, <8 x i32> %1390) #8
  %1392 = bitcast <16 x i16> %1391 to <4 x i64>
  br label %1393

1393:                                             ; preds = %1374, %1342
  %1394 = phi <4 x i64> [ %1392, %1374 ], [ %1286, %1342 ]
  %1395 = shufflevector <4 x i64> %1372, <4 x i64> %1394, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %1396 = trunc i32 %1290 to i16
  %1397 = add i16 %1396, 1
  %1398 = add i16 %1396, 2
  %1399 = add i16 %1396, 3
  %1400 = add i16 %1396, 4
  %1401 = add i16 %1396, 5
  %1402 = add i16 %1396, 6
  %1403 = add i16 %1396, 7
  %1404 = add i16 %1396, 8
  %1405 = add i16 %1396, 9
  %1406 = add i16 %1396, 10
  %1407 = add i16 %1396, 11
  %1408 = add i16 %1396, 12
  %1409 = add i16 %1396, 13
  %1410 = add i16 %1396, 14
  %1411 = add i16 %1396, 15
  %1412 = insertelement <16 x i16> undef, i16 %1396, i32 0
  %1413 = insertelement <16 x i16> %1412, i16 %1397, i32 1
  %1414 = insertelement <16 x i16> %1413, i16 %1398, i32 2
  %1415 = insertelement <16 x i16> %1414, i16 %1399, i32 3
  %1416 = insertelement <16 x i16> %1415, i16 %1400, i32 4
  %1417 = insertelement <16 x i16> %1416, i16 %1401, i32 5
  %1418 = insertelement <16 x i16> %1417, i16 %1402, i32 6
  %1419 = insertelement <16 x i16> %1418, i16 %1403, i32 7
  %1420 = insertelement <16 x i16> %1419, i16 %1404, i32 8
  %1421 = insertelement <16 x i16> %1420, i16 %1405, i32 9
  %1422 = insertelement <16 x i16> %1421, i16 %1406, i32 10
  %1423 = insertelement <16 x i16> %1422, i16 %1407, i32 11
  %1424 = insertelement <16 x i16> %1423, i16 %1408, i32 12
  %1425 = insertelement <16 x i16> %1424, i16 %1409, i32 13
  %1426 = insertelement <16 x i16> %1425, i16 %1410, i32 14
  %1427 = insertelement <16 x i16> %1426, i16 %1411, i32 15
  %1428 = icmp slt <16 x i16> %1427, <i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63>
  %1429 = bitcast <4 x i64> %1395 to <16 x i16>
  %1430 = select <16 x i1> %1428, <16 x i16> %1429, <16 x i16> %1117
  %1431 = bitcast <4 x i64>* %1354 to <16 x i16>*
  store <16 x i16> %1430, <16 x i16>* %1431, align 32
  %1432 = icmp sgt i32 %1289, 3007
  br i1 %1432, label %1486, label %1433

1433:                                             ; preds = %1393
  %1434 = getelementptr inbounds i16, i16* %1348, i64 16
  %1435 = bitcast i16* %1434 to <8 x i16>*
  %1436 = load <8 x i16>, <8 x i16>* %1435, align 1
  %1437 = zext <8 x i16> %1436 to <8 x i32>
  %1438 = getelementptr inbounds i16, i16* %1349, i64 16
  %1439 = bitcast i16* %1438 to <8 x i16>*
  %1440 = load <8 x i16>, <8 x i16>* %1439, align 1
  %1441 = zext <8 x i16> %1440 to <8 x i32>
  %1442 = sub nsw <8 x i32> %1441, %1437
  %1443 = shl nuw nsw <8 x i32> %1437, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %1444 = or <8 x i32> %1443, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %1445 = mul <8 x i32> %1442, %1346
  %1446 = add <8 x i32> %1445, %1444
  %1447 = lshr <8 x i32> %1446, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %1448 = bitcast <8 x i32> %1447 to <4 x i64>
  %1449 = shufflevector <4 x i64> %1448, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %1450 = shufflevector <2 x i64> %1449, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1451 = bitcast <4 x i64> %1450 to <8 x i32>
  %1452 = tail call <16 x i16> @llvm.x86.avx2.packusdw(<8 x i32> %1447, <8 x i32> %1451) #8
  %1453 = bitcast <16 x i16> %1452 to <4 x i64>
  %1454 = icmp slt i32 %1289, 2496
  br i1 %1454, label %1455, label %1476

1455:                                             ; preds = %1433
  %1456 = getelementptr inbounds i16, i16* %1350, i64 16
  %1457 = bitcast i16* %1456 to <8 x i16>*
  %1458 = load <8 x i16>, <8 x i16>* %1457, align 1
  %1459 = zext <8 x i16> %1458 to <8 x i32>
  %1460 = getelementptr inbounds i16, i16* %1351, i64 16
  %1461 = bitcast i16* %1460 to <8 x i16>*
  %1462 = load <8 x i16>, <8 x i16>* %1461, align 1
  %1463 = zext <8 x i16> %1462 to <8 x i32>
  %1464 = sub nsw <8 x i32> %1463, %1459
  %1465 = shl nuw nsw <8 x i32> %1459, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %1466 = or <8 x i32> %1465, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %1467 = mul <8 x i32> %1464, %1346
  %1468 = add <8 x i32> %1467, %1466
  %1469 = lshr <8 x i32> %1468, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %1470 = bitcast <8 x i32> %1469 to <4 x i64>
  %1471 = shufflevector <4 x i64> %1470, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %1472 = shufflevector <2 x i64> %1471, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1473 = bitcast <4 x i64> %1472 to <8 x i32>
  %1474 = tail call <16 x i16> @llvm.x86.avx2.packusdw(<8 x i32> %1469, <8 x i32> %1473) #8
  %1475 = bitcast <16 x i16> %1474 to <4 x i64>
  br label %1476

1476:                                             ; preds = %1455, %1433
  %1477 = phi <4 x i64> [ %1475, %1455 ], [ %1286, %1433 ]
  %1478 = shufflevector <4 x i64> %1453, <4 x i64> %1477, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %1479 = insertelement <16 x i16> undef, i16 %1396, i32 0
  %1480 = shufflevector <16 x i16> %1479, <16 x i16> undef, <16 x i32> zeroinitializer
  %1481 = add <16 x i16> %1480, <i16 16, i16 17, i16 18, i16 19, i16 20, i16 21, i16 22, i16 23, i16 24, i16 25, i16 26, i16 27, i16 28, i16 29, i16 30, i16 31>
  %1482 = icmp slt <16 x i16> %1481, <i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63>
  %1483 = bitcast <4 x i64> %1478 to <16 x i16>
  %1484 = select <16 x i1> %1482, <16 x i16> %1483, <16 x i16> %1117
  %1485 = bitcast <16 x i16> %1484 to <4 x i64>
  br label %1486

1486:                                             ; preds = %1476, %1393
  %1487 = phi <4 x i64> [ %1485, %1476 ], [ %1286, %1393 ]
  store <4 x i64> %1487, <4 x i64>* %1353, align 32
  %1488 = add nsw i32 %1289, %8
  %1489 = add nuw nsw i64 %1288, 1
  %1490 = icmp eq i64 %1489, 32
  br i1 %1490, label %1491, label %1287

1491:                                             ; preds = %1486, %1312, %1315, %1280, %1143, %1146, %1123, %1292
  %1492 = bitcast [64 x <4 x i64>]* %22 to <16 x i16>*
  %1493 = load <16 x i16>, <16 x i16>* %1492, align 32
  %1494 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %22, i64 0, i64 1
  %1495 = bitcast <4 x i64>* %1494 to <16 x i16>*
  %1496 = load <16 x i16>, <16 x i16>* %1495, align 32
  %1497 = shufflevector <16 x i16> %1493, <16 x i16> %1496, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %1498 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %22, i64 0, i64 2
  %1499 = bitcast <4 x i64>* %1498 to <16 x i16>*
  %1500 = load <16 x i16>, <16 x i16>* %1499, align 32
  %1501 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %22, i64 0, i64 3
  %1502 = bitcast <4 x i64>* %1501 to <16 x i16>*
  %1503 = load <16 x i16>, <16 x i16>* %1502, align 32
  %1504 = shufflevector <16 x i16> %1500, <16 x i16> %1503, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %1505 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %22, i64 0, i64 4
  %1506 = bitcast <4 x i64>* %1505 to <16 x i16>*
  %1507 = load <16 x i16>, <16 x i16>* %1506, align 32
  %1508 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %22, i64 0, i64 5
  %1509 = bitcast <4 x i64>* %1508 to <16 x i16>*
  %1510 = load <16 x i16>, <16 x i16>* %1509, align 32
  %1511 = shufflevector <16 x i16> %1507, <16 x i16> %1510, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %1512 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %22, i64 0, i64 6
  %1513 = bitcast <4 x i64>* %1512 to <16 x i16>*
  %1514 = load <16 x i16>, <16 x i16>* %1513, align 32
  %1515 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %22, i64 0, i64 7
  %1516 = bitcast <4 x i64>* %1515 to <16 x i16>*
  %1517 = load <16 x i16>, <16 x i16>* %1516, align 32
  %1518 = shufflevector <16 x i16> %1514, <16 x i16> %1517, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %1519 = bitcast <16 x i16> %1497 to <8 x i32>
  %1520 = bitcast <16 x i16> %1504 to <8 x i32>
  %1521 = shufflevector <8 x i32> %1519, <8 x i32> %1520, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %1522 = bitcast <8 x i32> %1521 to <4 x i64>
  %1523 = bitcast <16 x i16> %1511 to <8 x i32>
  %1524 = bitcast <16 x i16> %1518 to <8 x i32>
  %1525 = shufflevector <8 x i32> %1523, <8 x i32> %1524, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %1526 = bitcast <8 x i32> %1525 to <4 x i64>
  %1527 = shufflevector <4 x i64> %1522, <4 x i64> %1526, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %1528 = shufflevector <4 x i64> %1522, <4 x i64> %1526, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %1529 = shufflevector <8 x i32> %1519, <8 x i32> %1520, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %1530 = bitcast <8 x i32> %1529 to <4 x i64>
  %1531 = shufflevector <8 x i32> %1523, <8 x i32> %1524, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %1532 = bitcast <8 x i32> %1531 to <4 x i64>
  %1533 = shufflevector <4 x i64> %1530, <4 x i64> %1532, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %1534 = shufflevector <4 x i64> %1530, <4 x i64> %1532, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %1535 = shufflevector <16 x i16> %1493, <16 x i16> %1496, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %1536 = shufflevector <16 x i16> %1500, <16 x i16> %1503, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %1537 = shufflevector <16 x i16> %1507, <16 x i16> %1510, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %1538 = shufflevector <16 x i16> %1514, <16 x i16> %1517, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %1539 = bitcast <16 x i16> %1535 to <8 x i32>
  %1540 = bitcast <16 x i16> %1536 to <8 x i32>
  %1541 = shufflevector <8 x i32> %1539, <8 x i32> %1540, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %1542 = bitcast <8 x i32> %1541 to <4 x i64>
  %1543 = bitcast <16 x i16> %1537 to <8 x i32>
  %1544 = bitcast <16 x i16> %1538 to <8 x i32>
  %1545 = shufflevector <8 x i32> %1543, <8 x i32> %1544, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %1546 = bitcast <8 x i32> %1545 to <4 x i64>
  %1547 = shufflevector <4 x i64> %1542, <4 x i64> %1546, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %1548 = shufflevector <4 x i64> %1542, <4 x i64> %1546, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %1549 = shufflevector <8 x i32> %1539, <8 x i32> %1540, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %1550 = bitcast <8 x i32> %1549 to <4 x i64>
  %1551 = shufflevector <8 x i32> %1543, <8 x i32> %1544, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %1552 = bitcast <8 x i32> %1551 to <4 x i64>
  %1553 = shufflevector <4 x i64> %1550, <4 x i64> %1552, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %1554 = shufflevector <4 x i64> %1550, <4 x i64> %1552, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %1555 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %22, i64 0, i64 8
  %1556 = bitcast <4 x i64>* %1555 to <16 x i16>*
  %1557 = load <16 x i16>, <16 x i16>* %1556, align 32
  %1558 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %22, i64 0, i64 9
  %1559 = bitcast <4 x i64>* %1558 to <16 x i16>*
  %1560 = load <16 x i16>, <16 x i16>* %1559, align 32
  %1561 = shufflevector <16 x i16> %1557, <16 x i16> %1560, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %1562 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %22, i64 0, i64 10
  %1563 = bitcast <4 x i64>* %1562 to <16 x i16>*
  %1564 = load <16 x i16>, <16 x i16>* %1563, align 32
  %1565 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %22, i64 0, i64 11
  %1566 = bitcast <4 x i64>* %1565 to <16 x i16>*
  %1567 = load <16 x i16>, <16 x i16>* %1566, align 32
  %1568 = shufflevector <16 x i16> %1564, <16 x i16> %1567, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %1569 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %22, i64 0, i64 12
  %1570 = bitcast <4 x i64>* %1569 to <16 x i16>*
  %1571 = load <16 x i16>, <16 x i16>* %1570, align 32
  %1572 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %22, i64 0, i64 13
  %1573 = bitcast <4 x i64>* %1572 to <16 x i16>*
  %1574 = load <16 x i16>, <16 x i16>* %1573, align 32
  %1575 = shufflevector <16 x i16> %1571, <16 x i16> %1574, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %1576 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %22, i64 0, i64 14
  %1577 = bitcast <4 x i64>* %1576 to <16 x i16>*
  %1578 = load <16 x i16>, <16 x i16>* %1577, align 32
  %1579 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %22, i64 0, i64 15
  %1580 = bitcast <4 x i64>* %1579 to <16 x i16>*
  %1581 = load <16 x i16>, <16 x i16>* %1580, align 32
  %1582 = shufflevector <16 x i16> %1578, <16 x i16> %1581, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %1583 = bitcast <16 x i16> %1561 to <8 x i32>
  %1584 = bitcast <16 x i16> %1568 to <8 x i32>
  %1585 = shufflevector <8 x i32> %1583, <8 x i32> %1584, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %1586 = bitcast <8 x i32> %1585 to <4 x i64>
  %1587 = bitcast <16 x i16> %1575 to <8 x i32>
  %1588 = bitcast <16 x i16> %1582 to <8 x i32>
  %1589 = shufflevector <8 x i32> %1587, <8 x i32> %1588, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %1590 = bitcast <8 x i32> %1589 to <4 x i64>
  %1591 = shufflevector <4 x i64> %1586, <4 x i64> %1590, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %1592 = shufflevector <4 x i64> %1586, <4 x i64> %1590, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %1593 = shufflevector <8 x i32> %1583, <8 x i32> %1584, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %1594 = bitcast <8 x i32> %1593 to <4 x i64>
  %1595 = shufflevector <8 x i32> %1587, <8 x i32> %1588, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %1596 = bitcast <8 x i32> %1595 to <4 x i64>
  %1597 = shufflevector <4 x i64> %1594, <4 x i64> %1596, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %1598 = shufflevector <4 x i64> %1594, <4 x i64> %1596, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %1599 = shufflevector <16 x i16> %1557, <16 x i16> %1560, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %1600 = shufflevector <16 x i16> %1564, <16 x i16> %1567, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %1601 = shufflevector <16 x i16> %1571, <16 x i16> %1574, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %1602 = shufflevector <16 x i16> %1578, <16 x i16> %1581, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %1603 = bitcast <16 x i16> %1599 to <8 x i32>
  %1604 = bitcast <16 x i16> %1600 to <8 x i32>
  %1605 = shufflevector <8 x i32> %1603, <8 x i32> %1604, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %1606 = bitcast <8 x i32> %1605 to <4 x i64>
  %1607 = bitcast <16 x i16> %1601 to <8 x i32>
  %1608 = bitcast <16 x i16> %1602 to <8 x i32>
  %1609 = shufflevector <8 x i32> %1607, <8 x i32> %1608, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %1610 = bitcast <8 x i32> %1609 to <4 x i64>
  %1611 = shufflevector <4 x i64> %1606, <4 x i64> %1610, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %1612 = shufflevector <4 x i64> %1606, <4 x i64> %1610, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %1613 = shufflevector <8 x i32> %1603, <8 x i32> %1604, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %1614 = bitcast <8 x i32> %1613 to <4 x i64>
  %1615 = shufflevector <8 x i32> %1607, <8 x i32> %1608, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %1616 = bitcast <8 x i32> %1615 to <4 x i64>
  %1617 = shufflevector <4 x i64> %1614, <4 x i64> %1616, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %1618 = shufflevector <4 x i64> %1614, <4 x i64> %1616, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %1619 = bitcast <4 x i64> %1527 to <8 x i32>
  %1620 = shufflevector <4 x i64> %1591, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %1621 = bitcast <2 x i64> %1620 to <4 x i32>
  %1622 = shufflevector <4 x i32> %1621, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %1623 = shufflevector <8 x i32> %1619, <8 x i32> %1622, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %1624 = bitcast [16 x <4 x i64>]* %23 to <8 x i32>*
  store <8 x i32> %1623, <8 x i32>* %1624, align 32
  %1625 = bitcast <4 x i64> %1591 to <8 x i32>
  %1626 = shufflevector <4 x i64> %1527, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %1627 = bitcast <2 x i64> %1626 to <4 x i32>
  %1628 = shufflevector <4 x i32> %1627, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %1629 = shufflevector <8 x i32> %1628, <8 x i32> %1625, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  %1630 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %23, i64 0, i64 8
  %1631 = bitcast <4 x i64>* %1630 to <8 x i32>*
  store <8 x i32> %1629, <8 x i32>* %1631, align 32
  %1632 = bitcast <4 x i64> %1528 to <8 x i32>
  %1633 = shufflevector <4 x i64> %1592, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %1634 = bitcast <2 x i64> %1633 to <4 x i32>
  %1635 = shufflevector <4 x i32> %1634, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %1636 = shufflevector <8 x i32> %1632, <8 x i32> %1635, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %1637 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %23, i64 0, i64 1
  %1638 = bitcast <4 x i64>* %1637 to <8 x i32>*
  store <8 x i32> %1636, <8 x i32>* %1638, align 32
  %1639 = bitcast <4 x i64> %1592 to <8 x i32>
  %1640 = shufflevector <4 x i64> %1528, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %1641 = bitcast <2 x i64> %1640 to <4 x i32>
  %1642 = shufflevector <4 x i32> %1641, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %1643 = shufflevector <8 x i32> %1642, <8 x i32> %1639, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  %1644 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %23, i64 0, i64 9
  %1645 = bitcast <4 x i64>* %1644 to <8 x i32>*
  store <8 x i32> %1643, <8 x i32>* %1645, align 32
  %1646 = bitcast <4 x i64> %1533 to <8 x i32>
  %1647 = shufflevector <4 x i64> %1597, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %1648 = bitcast <2 x i64> %1647 to <4 x i32>
  %1649 = shufflevector <4 x i32> %1648, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %1650 = shufflevector <8 x i32> %1646, <8 x i32> %1649, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %1651 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %23, i64 0, i64 2
  %1652 = bitcast <4 x i64>* %1651 to <8 x i32>*
  store <8 x i32> %1650, <8 x i32>* %1652, align 32
  %1653 = bitcast <4 x i64> %1597 to <8 x i32>
  %1654 = shufflevector <4 x i64> %1533, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %1655 = bitcast <2 x i64> %1654 to <4 x i32>
  %1656 = shufflevector <4 x i32> %1655, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %1657 = shufflevector <8 x i32> %1656, <8 x i32> %1653, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  %1658 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %23, i64 0, i64 10
  %1659 = bitcast <4 x i64>* %1658 to <8 x i32>*
  store <8 x i32> %1657, <8 x i32>* %1659, align 32
  %1660 = bitcast <4 x i64> %1534 to <8 x i32>
  %1661 = shufflevector <4 x i64> %1598, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %1662 = bitcast <2 x i64> %1661 to <4 x i32>
  %1663 = shufflevector <4 x i32> %1662, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %1664 = shufflevector <8 x i32> %1660, <8 x i32> %1663, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %1665 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %23, i64 0, i64 3
  %1666 = bitcast <4 x i64>* %1665 to <8 x i32>*
  store <8 x i32> %1664, <8 x i32>* %1666, align 32
  %1667 = bitcast <4 x i64> %1598 to <8 x i32>
  %1668 = shufflevector <4 x i64> %1534, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %1669 = bitcast <2 x i64> %1668 to <4 x i32>
  %1670 = shufflevector <4 x i32> %1669, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %1671 = shufflevector <8 x i32> %1670, <8 x i32> %1667, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  %1672 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %23, i64 0, i64 11
  %1673 = bitcast <4 x i64>* %1672 to <8 x i32>*
  store <8 x i32> %1671, <8 x i32>* %1673, align 32
  %1674 = bitcast <4 x i64> %1547 to <8 x i32>
  %1675 = shufflevector <4 x i64> %1611, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %1676 = bitcast <2 x i64> %1675 to <4 x i32>
  %1677 = shufflevector <4 x i32> %1676, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %1678 = shufflevector <8 x i32> %1674, <8 x i32> %1677, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %1679 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %23, i64 0, i64 4
  %1680 = bitcast <4 x i64>* %1679 to <8 x i32>*
  store <8 x i32> %1678, <8 x i32>* %1680, align 32
  %1681 = bitcast <4 x i64> %1611 to <8 x i32>
  %1682 = shufflevector <4 x i64> %1547, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %1683 = bitcast <2 x i64> %1682 to <4 x i32>
  %1684 = shufflevector <4 x i32> %1683, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %1685 = shufflevector <8 x i32> %1684, <8 x i32> %1681, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  %1686 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %23, i64 0, i64 12
  %1687 = bitcast <4 x i64>* %1686 to <8 x i32>*
  store <8 x i32> %1685, <8 x i32>* %1687, align 32
  %1688 = bitcast <4 x i64> %1548 to <8 x i32>
  %1689 = shufflevector <4 x i64> %1612, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %1690 = bitcast <2 x i64> %1689 to <4 x i32>
  %1691 = shufflevector <4 x i32> %1690, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %1692 = shufflevector <8 x i32> %1688, <8 x i32> %1691, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %1693 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %23, i64 0, i64 5
  %1694 = bitcast <4 x i64>* %1693 to <8 x i32>*
  store <8 x i32> %1692, <8 x i32>* %1694, align 32
  %1695 = bitcast <4 x i64> %1612 to <8 x i32>
  %1696 = shufflevector <4 x i64> %1548, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %1697 = bitcast <2 x i64> %1696 to <4 x i32>
  %1698 = shufflevector <4 x i32> %1697, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %1699 = shufflevector <8 x i32> %1698, <8 x i32> %1695, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  %1700 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %23, i64 0, i64 13
  %1701 = bitcast <4 x i64>* %1700 to <8 x i32>*
  store <8 x i32> %1699, <8 x i32>* %1701, align 32
  %1702 = bitcast <4 x i64> %1553 to <8 x i32>
  %1703 = shufflevector <4 x i64> %1617, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %1704 = bitcast <2 x i64> %1703 to <4 x i32>
  %1705 = shufflevector <4 x i32> %1704, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %1706 = shufflevector <8 x i32> %1702, <8 x i32> %1705, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %1707 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %23, i64 0, i64 6
  %1708 = bitcast <4 x i64>* %1707 to <8 x i32>*
  store <8 x i32> %1706, <8 x i32>* %1708, align 32
  %1709 = bitcast <4 x i64> %1617 to <8 x i32>
  %1710 = shufflevector <4 x i64> %1553, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %1711 = bitcast <2 x i64> %1710 to <4 x i32>
  %1712 = shufflevector <4 x i32> %1711, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %1713 = shufflevector <8 x i32> %1712, <8 x i32> %1709, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  %1714 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %23, i64 0, i64 14
  %1715 = bitcast <4 x i64>* %1714 to <8 x i32>*
  store <8 x i32> %1713, <8 x i32>* %1715, align 32
  %1716 = bitcast <4 x i64> %1554 to <8 x i32>
  %1717 = shufflevector <4 x i64> %1618, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %1718 = bitcast <2 x i64> %1717 to <4 x i32>
  %1719 = shufflevector <4 x i32> %1718, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %1720 = shufflevector <8 x i32> %1716, <8 x i32> %1719, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %1721 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %23, i64 0, i64 7
  %1722 = bitcast <4 x i64>* %1721 to <8 x i32>*
  store <8 x i32> %1720, <8 x i32>* %1722, align 32
  %1723 = bitcast <4 x i64> %1618 to <8 x i32>
  %1724 = shufflevector <4 x i64> %1554, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %1725 = bitcast <2 x i64> %1724 to <4 x i32>
  %1726 = shufflevector <4 x i32> %1725, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %1727 = shufflevector <8 x i32> %1726, <8 x i32> %1723, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  %1728 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %23, i64 0, i64 15
  %1729 = bitcast <4 x i64>* %1728 to <8 x i32>*
  store <8 x i32> %1727, <8 x i32>* %1729, align 32
  %1730 = bitcast i16* %0 to <4 x i64>*
  %1731 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %23, i64 0, i64 0
  %1732 = load <4 x i64>, <4 x i64>* %1731, align 32
  store <4 x i64> %1732, <4 x i64>* %1730, align 1
  %1733 = getelementptr inbounds i16, i16* %0, i64 %1
  %1734 = bitcast i16* %1733 to <4 x i64>*
  %1735 = load <4 x i64>, <4 x i64>* %1637, align 32
  store <4 x i64> %1735, <4 x i64>* %1734, align 1
  %1736 = shl nsw i64 %1, 1
  %1737 = getelementptr inbounds i16, i16* %0, i64 %1736
  %1738 = bitcast i16* %1737 to <4 x i64>*
  %1739 = load <4 x i64>, <4 x i64>* %1651, align 32
  store <4 x i64> %1739, <4 x i64>* %1738, align 1
  %1740 = mul nsw i64 %1, 3
  %1741 = getelementptr inbounds i16, i16* %0, i64 %1740
  %1742 = bitcast i16* %1741 to <8 x i32>*
  store <8 x i32> %1664, <8 x i32>* %1742, align 1
  %1743 = shl nsw i64 %1, 2
  %1744 = getelementptr inbounds i16, i16* %0, i64 %1743
  %1745 = bitcast i16* %1744 to <8 x i32>*
  store <8 x i32> %1678, <8 x i32>* %1745, align 1
  %1746 = mul nsw i64 %1, 5
  %1747 = getelementptr inbounds i16, i16* %0, i64 %1746
  %1748 = bitcast i16* %1747 to <8 x i32>*
  store <8 x i32> %1692, <8 x i32>* %1748, align 1
  %1749 = mul nsw i64 %1, 6
  %1750 = getelementptr inbounds i16, i16* %0, i64 %1749
  %1751 = bitcast i16* %1750 to <8 x i32>*
  store <8 x i32> %1706, <8 x i32>* %1751, align 1
  %1752 = mul nsw i64 %1, 7
  %1753 = getelementptr inbounds i16, i16* %0, i64 %1752
  %1754 = bitcast i16* %1753 to <8 x i32>*
  store <8 x i32> %1720, <8 x i32>* %1754, align 1
  %1755 = shl nsw i64 %1, 3
  %1756 = getelementptr inbounds i16, i16* %0, i64 %1755
  %1757 = bitcast i16* %1756 to <4 x i64>*
  %1758 = load <4 x i64>, <4 x i64>* %1630, align 32
  store <4 x i64> %1758, <4 x i64>* %1757, align 1
  %1759 = mul nsw i64 %1, 9
  %1760 = getelementptr inbounds i16, i16* %0, i64 %1759
  %1761 = bitcast i16* %1760 to <4 x i64>*
  %1762 = load <4 x i64>, <4 x i64>* %1644, align 32
  store <4 x i64> %1762, <4 x i64>* %1761, align 1
  %1763 = mul nsw i64 %1, 10
  %1764 = getelementptr inbounds i16, i16* %0, i64 %1763
  %1765 = bitcast i16* %1764 to <4 x i64>*
  %1766 = load <4 x i64>, <4 x i64>* %1658, align 32
  store <4 x i64> %1766, <4 x i64>* %1765, align 1
  %1767 = mul nsw i64 %1, 11
  %1768 = getelementptr inbounds i16, i16* %0, i64 %1767
  %1769 = bitcast i16* %1768 to <4 x i64>*
  %1770 = load <4 x i64>, <4 x i64>* %1672, align 32
  store <4 x i64> %1770, <4 x i64>* %1769, align 1
  %1771 = mul nsw i64 %1, 12
  %1772 = getelementptr inbounds i16, i16* %0, i64 %1771
  %1773 = bitcast i16* %1772 to <4 x i64>*
  %1774 = load <4 x i64>, <4 x i64>* %1686, align 32
  store <4 x i64> %1774, <4 x i64>* %1773, align 1
  %1775 = mul nsw i64 %1, 13
  %1776 = getelementptr inbounds i16, i16* %0, i64 %1775
  %1777 = bitcast i16* %1776 to <8 x i32>*
  store <8 x i32> %1699, <8 x i32>* %1777, align 1
  %1778 = mul nsw i64 %1, 14
  %1779 = getelementptr inbounds i16, i16* %0, i64 %1778
  %1780 = bitcast i16* %1779 to <8 x i32>*
  store <8 x i32> %1713, <8 x i32>* %1780, align 1
  %1781 = mul nsw i64 %1, 15
  %1782 = getelementptr inbounds i16, i16* %0, i64 %1781
  %1783 = bitcast i16* %1782 to <8 x i32>*
  store <8 x i32> %1727, <8 x i32>* %1783, align 1
  %1784 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %22, i64 0, i64 16
  %1785 = bitcast <4 x i64>* %1784 to <16 x i16>*
  %1786 = load <16 x i16>, <16 x i16>* %1785, align 32
  %1787 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %22, i64 0, i64 17
  %1788 = bitcast <4 x i64>* %1787 to <16 x i16>*
  %1789 = load <16 x i16>, <16 x i16>* %1788, align 32
  %1790 = shufflevector <16 x i16> %1786, <16 x i16> %1789, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %1791 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %22, i64 0, i64 18
  %1792 = bitcast <4 x i64>* %1791 to <16 x i16>*
  %1793 = load <16 x i16>, <16 x i16>* %1792, align 32
  %1794 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %22, i64 0, i64 19
  %1795 = bitcast <4 x i64>* %1794 to <16 x i16>*
  %1796 = load <16 x i16>, <16 x i16>* %1795, align 32
  %1797 = shufflevector <16 x i16> %1793, <16 x i16> %1796, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %1798 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %22, i64 0, i64 20
  %1799 = bitcast <4 x i64>* %1798 to <16 x i16>*
  %1800 = load <16 x i16>, <16 x i16>* %1799, align 32
  %1801 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %22, i64 0, i64 21
  %1802 = bitcast <4 x i64>* %1801 to <16 x i16>*
  %1803 = load <16 x i16>, <16 x i16>* %1802, align 32
  %1804 = shufflevector <16 x i16> %1800, <16 x i16> %1803, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %1805 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %22, i64 0, i64 22
  %1806 = bitcast <4 x i64>* %1805 to <16 x i16>*
  %1807 = load <16 x i16>, <16 x i16>* %1806, align 32
  %1808 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %22, i64 0, i64 23
  %1809 = bitcast <4 x i64>* %1808 to <16 x i16>*
  %1810 = load <16 x i16>, <16 x i16>* %1809, align 32
  %1811 = shufflevector <16 x i16> %1807, <16 x i16> %1810, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %1812 = bitcast <16 x i16> %1790 to <8 x i32>
  %1813 = bitcast <16 x i16> %1797 to <8 x i32>
  %1814 = shufflevector <8 x i32> %1812, <8 x i32> %1813, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %1815 = bitcast <8 x i32> %1814 to <4 x i64>
  %1816 = bitcast <16 x i16> %1804 to <8 x i32>
  %1817 = bitcast <16 x i16> %1811 to <8 x i32>
  %1818 = shufflevector <8 x i32> %1816, <8 x i32> %1817, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %1819 = bitcast <8 x i32> %1818 to <4 x i64>
  %1820 = shufflevector <4 x i64> %1815, <4 x i64> %1819, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %1821 = shufflevector <4 x i64> %1815, <4 x i64> %1819, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %1822 = shufflevector <8 x i32> %1812, <8 x i32> %1813, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %1823 = bitcast <8 x i32> %1822 to <4 x i64>
  %1824 = shufflevector <8 x i32> %1816, <8 x i32> %1817, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %1825 = bitcast <8 x i32> %1824 to <4 x i64>
  %1826 = shufflevector <4 x i64> %1823, <4 x i64> %1825, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %1827 = shufflevector <4 x i64> %1823, <4 x i64> %1825, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %1828 = shufflevector <16 x i16> %1786, <16 x i16> %1789, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %1829 = shufflevector <16 x i16> %1793, <16 x i16> %1796, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %1830 = shufflevector <16 x i16> %1800, <16 x i16> %1803, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %1831 = shufflevector <16 x i16> %1807, <16 x i16> %1810, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %1832 = bitcast <16 x i16> %1828 to <8 x i32>
  %1833 = bitcast <16 x i16> %1829 to <8 x i32>
  %1834 = shufflevector <8 x i32> %1832, <8 x i32> %1833, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %1835 = bitcast <8 x i32> %1834 to <4 x i64>
  %1836 = bitcast <16 x i16> %1830 to <8 x i32>
  %1837 = bitcast <16 x i16> %1831 to <8 x i32>
  %1838 = shufflevector <8 x i32> %1836, <8 x i32> %1837, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %1839 = bitcast <8 x i32> %1838 to <4 x i64>
  %1840 = shufflevector <4 x i64> %1835, <4 x i64> %1839, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %1841 = shufflevector <4 x i64> %1835, <4 x i64> %1839, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %1842 = shufflevector <8 x i32> %1832, <8 x i32> %1833, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %1843 = bitcast <8 x i32> %1842 to <4 x i64>
  %1844 = shufflevector <8 x i32> %1836, <8 x i32> %1837, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %1845 = bitcast <8 x i32> %1844 to <4 x i64>
  %1846 = shufflevector <4 x i64> %1843, <4 x i64> %1845, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %1847 = shufflevector <4 x i64> %1843, <4 x i64> %1845, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %1848 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %22, i64 0, i64 24
  %1849 = bitcast <4 x i64>* %1848 to <16 x i16>*
  %1850 = load <16 x i16>, <16 x i16>* %1849, align 32
  %1851 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %22, i64 0, i64 25
  %1852 = bitcast <4 x i64>* %1851 to <16 x i16>*
  %1853 = load <16 x i16>, <16 x i16>* %1852, align 32
  %1854 = shufflevector <16 x i16> %1850, <16 x i16> %1853, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %1855 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %22, i64 0, i64 26
  %1856 = bitcast <4 x i64>* %1855 to <16 x i16>*
  %1857 = load <16 x i16>, <16 x i16>* %1856, align 32
  %1858 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %22, i64 0, i64 27
  %1859 = bitcast <4 x i64>* %1858 to <16 x i16>*
  %1860 = load <16 x i16>, <16 x i16>* %1859, align 32
  %1861 = shufflevector <16 x i16> %1857, <16 x i16> %1860, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %1862 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %22, i64 0, i64 28
  %1863 = bitcast <4 x i64>* %1862 to <16 x i16>*
  %1864 = load <16 x i16>, <16 x i16>* %1863, align 32
  %1865 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %22, i64 0, i64 29
  %1866 = bitcast <4 x i64>* %1865 to <16 x i16>*
  %1867 = load <16 x i16>, <16 x i16>* %1866, align 32
  %1868 = shufflevector <16 x i16> %1864, <16 x i16> %1867, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %1869 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %22, i64 0, i64 30
  %1870 = bitcast <4 x i64>* %1869 to <16 x i16>*
  %1871 = load <16 x i16>, <16 x i16>* %1870, align 32
  %1872 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %22, i64 0, i64 31
  %1873 = bitcast <4 x i64>* %1872 to <16 x i16>*
  %1874 = load <16 x i16>, <16 x i16>* %1873, align 32
  %1875 = shufflevector <16 x i16> %1871, <16 x i16> %1874, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %1876 = bitcast <16 x i16> %1854 to <8 x i32>
  %1877 = bitcast <16 x i16> %1861 to <8 x i32>
  %1878 = shufflevector <8 x i32> %1876, <8 x i32> %1877, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %1879 = bitcast <8 x i32> %1878 to <4 x i64>
  %1880 = bitcast <16 x i16> %1868 to <8 x i32>
  %1881 = bitcast <16 x i16> %1875 to <8 x i32>
  %1882 = shufflevector <8 x i32> %1880, <8 x i32> %1881, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %1883 = bitcast <8 x i32> %1882 to <4 x i64>
  %1884 = shufflevector <4 x i64> %1879, <4 x i64> %1883, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %1885 = shufflevector <4 x i64> %1879, <4 x i64> %1883, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %1886 = shufflevector <8 x i32> %1876, <8 x i32> %1877, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %1887 = bitcast <8 x i32> %1886 to <4 x i64>
  %1888 = shufflevector <8 x i32> %1880, <8 x i32> %1881, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %1889 = bitcast <8 x i32> %1888 to <4 x i64>
  %1890 = shufflevector <4 x i64> %1887, <4 x i64> %1889, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %1891 = shufflevector <4 x i64> %1887, <4 x i64> %1889, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %1892 = shufflevector <16 x i16> %1850, <16 x i16> %1853, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %1893 = shufflevector <16 x i16> %1857, <16 x i16> %1860, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %1894 = shufflevector <16 x i16> %1864, <16 x i16> %1867, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %1895 = shufflevector <16 x i16> %1871, <16 x i16> %1874, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %1896 = bitcast <16 x i16> %1892 to <8 x i32>
  %1897 = bitcast <16 x i16> %1893 to <8 x i32>
  %1898 = shufflevector <8 x i32> %1896, <8 x i32> %1897, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %1899 = bitcast <8 x i32> %1898 to <4 x i64>
  %1900 = bitcast <16 x i16> %1894 to <8 x i32>
  %1901 = bitcast <16 x i16> %1895 to <8 x i32>
  %1902 = shufflevector <8 x i32> %1900, <8 x i32> %1901, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %1903 = bitcast <8 x i32> %1902 to <4 x i64>
  %1904 = shufflevector <4 x i64> %1899, <4 x i64> %1903, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %1905 = shufflevector <4 x i64> %1899, <4 x i64> %1903, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %1906 = shufflevector <8 x i32> %1896, <8 x i32> %1897, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %1907 = bitcast <8 x i32> %1906 to <4 x i64>
  %1908 = shufflevector <8 x i32> %1900, <8 x i32> %1901, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %1909 = bitcast <8 x i32> %1908 to <4 x i64>
  %1910 = shufflevector <4 x i64> %1907, <4 x i64> %1909, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %1911 = shufflevector <4 x i64> %1907, <4 x i64> %1909, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %1912 = bitcast <4 x i64> %1820 to <8 x i32>
  %1913 = shufflevector <4 x i64> %1884, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %1914 = bitcast <2 x i64> %1913 to <4 x i32>
  %1915 = shufflevector <4 x i32> %1914, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %1916 = shufflevector <8 x i32> %1912, <8 x i32> %1915, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %1916, <8 x i32>* %1624, align 32
  %1917 = bitcast <4 x i64> %1884 to <8 x i32>
  %1918 = shufflevector <4 x i64> %1820, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %1919 = bitcast <2 x i64> %1918 to <4 x i32>
  %1920 = shufflevector <4 x i32> %1919, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %1921 = shufflevector <8 x i32> %1920, <8 x i32> %1917, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %1921, <8 x i32>* %1631, align 32
  %1922 = bitcast <4 x i64> %1821 to <8 x i32>
  %1923 = shufflevector <4 x i64> %1885, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %1924 = bitcast <2 x i64> %1923 to <4 x i32>
  %1925 = shufflevector <4 x i32> %1924, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %1926 = shufflevector <8 x i32> %1922, <8 x i32> %1925, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %1926, <8 x i32>* %1638, align 32
  %1927 = bitcast <4 x i64> %1885 to <8 x i32>
  %1928 = shufflevector <4 x i64> %1821, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %1929 = bitcast <2 x i64> %1928 to <4 x i32>
  %1930 = shufflevector <4 x i32> %1929, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %1931 = shufflevector <8 x i32> %1930, <8 x i32> %1927, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %1931, <8 x i32>* %1645, align 32
  %1932 = bitcast <4 x i64> %1826 to <8 x i32>
  %1933 = shufflevector <4 x i64> %1890, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %1934 = bitcast <2 x i64> %1933 to <4 x i32>
  %1935 = shufflevector <4 x i32> %1934, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %1936 = shufflevector <8 x i32> %1932, <8 x i32> %1935, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %1936, <8 x i32>* %1652, align 32
  %1937 = bitcast <4 x i64> %1890 to <8 x i32>
  %1938 = shufflevector <4 x i64> %1826, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %1939 = bitcast <2 x i64> %1938 to <4 x i32>
  %1940 = shufflevector <4 x i32> %1939, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %1941 = shufflevector <8 x i32> %1940, <8 x i32> %1937, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %1941, <8 x i32>* %1659, align 32
  %1942 = bitcast <4 x i64> %1827 to <8 x i32>
  %1943 = shufflevector <4 x i64> %1891, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %1944 = bitcast <2 x i64> %1943 to <4 x i32>
  %1945 = shufflevector <4 x i32> %1944, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %1946 = shufflevector <8 x i32> %1942, <8 x i32> %1945, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %1946, <8 x i32>* %1666, align 32
  %1947 = bitcast <4 x i64> %1891 to <8 x i32>
  %1948 = shufflevector <4 x i64> %1827, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %1949 = bitcast <2 x i64> %1948 to <4 x i32>
  %1950 = shufflevector <4 x i32> %1949, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %1951 = shufflevector <8 x i32> %1950, <8 x i32> %1947, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %1951, <8 x i32>* %1673, align 32
  %1952 = bitcast <4 x i64> %1840 to <8 x i32>
  %1953 = shufflevector <4 x i64> %1904, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %1954 = bitcast <2 x i64> %1953 to <4 x i32>
  %1955 = shufflevector <4 x i32> %1954, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %1956 = shufflevector <8 x i32> %1952, <8 x i32> %1955, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %1956, <8 x i32>* %1680, align 32
  %1957 = bitcast <4 x i64> %1904 to <8 x i32>
  %1958 = shufflevector <4 x i64> %1840, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %1959 = bitcast <2 x i64> %1958 to <4 x i32>
  %1960 = shufflevector <4 x i32> %1959, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %1961 = shufflevector <8 x i32> %1960, <8 x i32> %1957, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %1961, <8 x i32>* %1687, align 32
  %1962 = bitcast <4 x i64> %1841 to <8 x i32>
  %1963 = shufflevector <4 x i64> %1905, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %1964 = bitcast <2 x i64> %1963 to <4 x i32>
  %1965 = shufflevector <4 x i32> %1964, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %1966 = shufflevector <8 x i32> %1962, <8 x i32> %1965, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %1966, <8 x i32>* %1694, align 32
  %1967 = bitcast <4 x i64> %1905 to <8 x i32>
  %1968 = shufflevector <4 x i64> %1841, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %1969 = bitcast <2 x i64> %1968 to <4 x i32>
  %1970 = shufflevector <4 x i32> %1969, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %1971 = shufflevector <8 x i32> %1970, <8 x i32> %1967, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %1971, <8 x i32>* %1701, align 32
  %1972 = bitcast <4 x i64> %1846 to <8 x i32>
  %1973 = shufflevector <4 x i64> %1910, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %1974 = bitcast <2 x i64> %1973 to <4 x i32>
  %1975 = shufflevector <4 x i32> %1974, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %1976 = shufflevector <8 x i32> %1972, <8 x i32> %1975, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %1976, <8 x i32>* %1708, align 32
  %1977 = bitcast <4 x i64> %1910 to <8 x i32>
  %1978 = shufflevector <4 x i64> %1846, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %1979 = bitcast <2 x i64> %1978 to <4 x i32>
  %1980 = shufflevector <4 x i32> %1979, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %1981 = shufflevector <8 x i32> %1980, <8 x i32> %1977, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %1981, <8 x i32>* %1715, align 32
  %1982 = bitcast <4 x i64> %1847 to <8 x i32>
  %1983 = shufflevector <4 x i64> %1911, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %1984 = bitcast <2 x i64> %1983 to <4 x i32>
  %1985 = shufflevector <4 x i32> %1984, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %1986 = shufflevector <8 x i32> %1982, <8 x i32> %1985, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %1986, <8 x i32>* %1722, align 32
  %1987 = bitcast <4 x i64> %1911 to <8 x i32>
  %1988 = shufflevector <4 x i64> %1847, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %1989 = bitcast <2 x i64> %1988 to <4 x i32>
  %1990 = shufflevector <4 x i32> %1989, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %1991 = shufflevector <8 x i32> %1990, <8 x i32> %1987, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %1991, <8 x i32>* %1729, align 32
  %1992 = getelementptr inbounds i16, i16* %0, i64 16
  %1993 = bitcast i16* %1992 to <8 x i32>*
  store <8 x i32> %1916, <8 x i32>* %1993, align 1
  %1994 = getelementptr inbounds i16, i16* %1992, i64 %1
  %1995 = bitcast i16* %1994 to <8 x i32>*
  store <8 x i32> %1926, <8 x i32>* %1995, align 1
  %1996 = getelementptr inbounds i16, i16* %1992, i64 %1736
  %1997 = bitcast i16* %1996 to <8 x i32>*
  store <8 x i32> %1936, <8 x i32>* %1997, align 1
  %1998 = getelementptr inbounds i16, i16* %1992, i64 %1740
  %1999 = bitcast i16* %1998 to <8 x i32>*
  store <8 x i32> %1946, <8 x i32>* %1999, align 1
  %2000 = getelementptr inbounds i16, i16* %1992, i64 %1743
  %2001 = bitcast i16* %2000 to <8 x i32>*
  store <8 x i32> %1956, <8 x i32>* %2001, align 1
  %2002 = getelementptr inbounds i16, i16* %1992, i64 %1746
  %2003 = bitcast i16* %2002 to <8 x i32>*
  store <8 x i32> %1966, <8 x i32>* %2003, align 1
  %2004 = getelementptr inbounds i16, i16* %1992, i64 %1749
  %2005 = bitcast i16* %2004 to <8 x i32>*
  store <8 x i32> %1976, <8 x i32>* %2005, align 1
  %2006 = getelementptr inbounds i16, i16* %1992, i64 %1752
  %2007 = bitcast i16* %2006 to <8 x i32>*
  store <8 x i32> %1986, <8 x i32>* %2007, align 1
  %2008 = getelementptr inbounds i16, i16* %1992, i64 %1755
  %2009 = bitcast i16* %2008 to <4 x i64>*
  %2010 = load <4 x i64>, <4 x i64>* %1630, align 32
  store <4 x i64> %2010, <4 x i64>* %2009, align 1
  %2011 = getelementptr inbounds i16, i16* %1992, i64 %1759
  %2012 = bitcast i16* %2011 to <4 x i64>*
  %2013 = load <4 x i64>, <4 x i64>* %1644, align 32
  store <4 x i64> %2013, <4 x i64>* %2012, align 1
  %2014 = getelementptr inbounds i16, i16* %1992, i64 %1763
  %2015 = bitcast i16* %2014 to <8 x i32>*
  store <8 x i32> %1941, <8 x i32>* %2015, align 1
  %2016 = getelementptr inbounds i16, i16* %1992, i64 %1767
  %2017 = bitcast i16* %2016 to <8 x i32>*
  store <8 x i32> %1951, <8 x i32>* %2017, align 1
  %2018 = getelementptr inbounds i16, i16* %1992, i64 %1771
  %2019 = bitcast i16* %2018 to <8 x i32>*
  store <8 x i32> %1961, <8 x i32>* %2019, align 1
  %2020 = getelementptr inbounds i16, i16* %1992, i64 %1775
  %2021 = bitcast i16* %2020 to <8 x i32>*
  store <8 x i32> %1971, <8 x i32>* %2021, align 1
  %2022 = getelementptr inbounds i16, i16* %1992, i64 %1778
  %2023 = bitcast i16* %2022 to <8 x i32>*
  store <8 x i32> %1981, <8 x i32>* %2023, align 1
  %2024 = getelementptr inbounds i16, i16* %1992, i64 %1781
  %2025 = bitcast i16* %2024 to <8 x i32>*
  store <8 x i32> %1991, <8 x i32>* %2025, align 1
  %2026 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %22, i64 0, i64 32
  %2027 = bitcast <4 x i64>* %2026 to <16 x i16>*
  %2028 = load <16 x i16>, <16 x i16>* %2027, align 32
  %2029 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %22, i64 0, i64 33
  %2030 = bitcast <4 x i64>* %2029 to <16 x i16>*
  %2031 = load <16 x i16>, <16 x i16>* %2030, align 32
  %2032 = shufflevector <16 x i16> %2028, <16 x i16> %2031, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %2033 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %22, i64 0, i64 34
  %2034 = bitcast <4 x i64>* %2033 to <16 x i16>*
  %2035 = load <16 x i16>, <16 x i16>* %2034, align 32
  %2036 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %22, i64 0, i64 35
  %2037 = bitcast <4 x i64>* %2036 to <16 x i16>*
  %2038 = load <16 x i16>, <16 x i16>* %2037, align 32
  %2039 = shufflevector <16 x i16> %2035, <16 x i16> %2038, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %2040 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %22, i64 0, i64 36
  %2041 = bitcast <4 x i64>* %2040 to <16 x i16>*
  %2042 = load <16 x i16>, <16 x i16>* %2041, align 32
  %2043 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %22, i64 0, i64 37
  %2044 = bitcast <4 x i64>* %2043 to <16 x i16>*
  %2045 = load <16 x i16>, <16 x i16>* %2044, align 32
  %2046 = shufflevector <16 x i16> %2042, <16 x i16> %2045, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %2047 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %22, i64 0, i64 38
  %2048 = bitcast <4 x i64>* %2047 to <16 x i16>*
  %2049 = load <16 x i16>, <16 x i16>* %2048, align 32
  %2050 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %22, i64 0, i64 39
  %2051 = bitcast <4 x i64>* %2050 to <16 x i16>*
  %2052 = load <16 x i16>, <16 x i16>* %2051, align 32
  %2053 = shufflevector <16 x i16> %2049, <16 x i16> %2052, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %2054 = bitcast <16 x i16> %2032 to <8 x i32>
  %2055 = bitcast <16 x i16> %2039 to <8 x i32>
  %2056 = shufflevector <8 x i32> %2054, <8 x i32> %2055, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %2057 = bitcast <8 x i32> %2056 to <4 x i64>
  %2058 = bitcast <16 x i16> %2046 to <8 x i32>
  %2059 = bitcast <16 x i16> %2053 to <8 x i32>
  %2060 = shufflevector <8 x i32> %2058, <8 x i32> %2059, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %2061 = bitcast <8 x i32> %2060 to <4 x i64>
  %2062 = shufflevector <4 x i64> %2057, <4 x i64> %2061, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %2063 = shufflevector <4 x i64> %2057, <4 x i64> %2061, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %2064 = shufflevector <8 x i32> %2054, <8 x i32> %2055, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %2065 = bitcast <8 x i32> %2064 to <4 x i64>
  %2066 = shufflevector <8 x i32> %2058, <8 x i32> %2059, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %2067 = bitcast <8 x i32> %2066 to <4 x i64>
  %2068 = shufflevector <4 x i64> %2065, <4 x i64> %2067, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %2069 = shufflevector <4 x i64> %2065, <4 x i64> %2067, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %2070 = shufflevector <16 x i16> %2028, <16 x i16> %2031, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %2071 = shufflevector <16 x i16> %2035, <16 x i16> %2038, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %2072 = shufflevector <16 x i16> %2042, <16 x i16> %2045, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %2073 = shufflevector <16 x i16> %2049, <16 x i16> %2052, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %2074 = bitcast <16 x i16> %2070 to <8 x i32>
  %2075 = bitcast <16 x i16> %2071 to <8 x i32>
  %2076 = shufflevector <8 x i32> %2074, <8 x i32> %2075, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %2077 = bitcast <8 x i32> %2076 to <4 x i64>
  %2078 = bitcast <16 x i16> %2072 to <8 x i32>
  %2079 = bitcast <16 x i16> %2073 to <8 x i32>
  %2080 = shufflevector <8 x i32> %2078, <8 x i32> %2079, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %2081 = bitcast <8 x i32> %2080 to <4 x i64>
  %2082 = shufflevector <4 x i64> %2077, <4 x i64> %2081, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %2083 = shufflevector <4 x i64> %2077, <4 x i64> %2081, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %2084 = shufflevector <8 x i32> %2074, <8 x i32> %2075, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %2085 = bitcast <8 x i32> %2084 to <4 x i64>
  %2086 = shufflevector <8 x i32> %2078, <8 x i32> %2079, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %2087 = bitcast <8 x i32> %2086 to <4 x i64>
  %2088 = shufflevector <4 x i64> %2085, <4 x i64> %2087, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %2089 = shufflevector <4 x i64> %2085, <4 x i64> %2087, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %2090 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %22, i64 0, i64 40
  %2091 = bitcast <4 x i64>* %2090 to <16 x i16>*
  %2092 = load <16 x i16>, <16 x i16>* %2091, align 32
  %2093 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %22, i64 0, i64 41
  %2094 = bitcast <4 x i64>* %2093 to <16 x i16>*
  %2095 = load <16 x i16>, <16 x i16>* %2094, align 32
  %2096 = shufflevector <16 x i16> %2092, <16 x i16> %2095, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %2097 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %22, i64 0, i64 42
  %2098 = bitcast <4 x i64>* %2097 to <16 x i16>*
  %2099 = load <16 x i16>, <16 x i16>* %2098, align 32
  %2100 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %22, i64 0, i64 43
  %2101 = bitcast <4 x i64>* %2100 to <16 x i16>*
  %2102 = load <16 x i16>, <16 x i16>* %2101, align 32
  %2103 = shufflevector <16 x i16> %2099, <16 x i16> %2102, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %2104 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %22, i64 0, i64 44
  %2105 = bitcast <4 x i64>* %2104 to <16 x i16>*
  %2106 = load <16 x i16>, <16 x i16>* %2105, align 32
  %2107 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %22, i64 0, i64 45
  %2108 = bitcast <4 x i64>* %2107 to <16 x i16>*
  %2109 = load <16 x i16>, <16 x i16>* %2108, align 32
  %2110 = shufflevector <16 x i16> %2106, <16 x i16> %2109, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %2111 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %22, i64 0, i64 46
  %2112 = bitcast <4 x i64>* %2111 to <16 x i16>*
  %2113 = load <16 x i16>, <16 x i16>* %2112, align 32
  %2114 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %22, i64 0, i64 47
  %2115 = bitcast <4 x i64>* %2114 to <16 x i16>*
  %2116 = load <16 x i16>, <16 x i16>* %2115, align 32
  %2117 = shufflevector <16 x i16> %2113, <16 x i16> %2116, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %2118 = bitcast <16 x i16> %2096 to <8 x i32>
  %2119 = bitcast <16 x i16> %2103 to <8 x i32>
  %2120 = shufflevector <8 x i32> %2118, <8 x i32> %2119, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %2121 = bitcast <8 x i32> %2120 to <4 x i64>
  %2122 = bitcast <16 x i16> %2110 to <8 x i32>
  %2123 = bitcast <16 x i16> %2117 to <8 x i32>
  %2124 = shufflevector <8 x i32> %2122, <8 x i32> %2123, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %2125 = bitcast <8 x i32> %2124 to <4 x i64>
  %2126 = shufflevector <4 x i64> %2121, <4 x i64> %2125, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %2127 = shufflevector <4 x i64> %2121, <4 x i64> %2125, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %2128 = shufflevector <8 x i32> %2118, <8 x i32> %2119, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %2129 = bitcast <8 x i32> %2128 to <4 x i64>
  %2130 = shufflevector <8 x i32> %2122, <8 x i32> %2123, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %2131 = bitcast <8 x i32> %2130 to <4 x i64>
  %2132 = shufflevector <4 x i64> %2129, <4 x i64> %2131, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %2133 = shufflevector <4 x i64> %2129, <4 x i64> %2131, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %2134 = shufflevector <16 x i16> %2092, <16 x i16> %2095, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %2135 = shufflevector <16 x i16> %2099, <16 x i16> %2102, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %2136 = shufflevector <16 x i16> %2106, <16 x i16> %2109, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %2137 = shufflevector <16 x i16> %2113, <16 x i16> %2116, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %2138 = bitcast <16 x i16> %2134 to <8 x i32>
  %2139 = bitcast <16 x i16> %2135 to <8 x i32>
  %2140 = shufflevector <8 x i32> %2138, <8 x i32> %2139, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %2141 = bitcast <8 x i32> %2140 to <4 x i64>
  %2142 = bitcast <16 x i16> %2136 to <8 x i32>
  %2143 = bitcast <16 x i16> %2137 to <8 x i32>
  %2144 = shufflevector <8 x i32> %2142, <8 x i32> %2143, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %2145 = bitcast <8 x i32> %2144 to <4 x i64>
  %2146 = shufflevector <4 x i64> %2141, <4 x i64> %2145, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %2147 = shufflevector <4 x i64> %2141, <4 x i64> %2145, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %2148 = shufflevector <8 x i32> %2138, <8 x i32> %2139, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %2149 = bitcast <8 x i32> %2148 to <4 x i64>
  %2150 = shufflevector <8 x i32> %2142, <8 x i32> %2143, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %2151 = bitcast <8 x i32> %2150 to <4 x i64>
  %2152 = shufflevector <4 x i64> %2149, <4 x i64> %2151, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %2153 = shufflevector <4 x i64> %2149, <4 x i64> %2151, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %2154 = bitcast <4 x i64> %2062 to <8 x i32>
  %2155 = shufflevector <4 x i64> %2126, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %2156 = bitcast <2 x i64> %2155 to <4 x i32>
  %2157 = shufflevector <4 x i32> %2156, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %2158 = shufflevector <8 x i32> %2154, <8 x i32> %2157, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %2158, <8 x i32>* %1624, align 32
  %2159 = bitcast <4 x i64> %2126 to <8 x i32>
  %2160 = shufflevector <4 x i64> %2062, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %2161 = bitcast <2 x i64> %2160 to <4 x i32>
  %2162 = shufflevector <4 x i32> %2161, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %2163 = shufflevector <8 x i32> %2162, <8 x i32> %2159, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %2163, <8 x i32>* %1631, align 32
  %2164 = bitcast <4 x i64> %2063 to <8 x i32>
  %2165 = shufflevector <4 x i64> %2127, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %2166 = bitcast <2 x i64> %2165 to <4 x i32>
  %2167 = shufflevector <4 x i32> %2166, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %2168 = shufflevector <8 x i32> %2164, <8 x i32> %2167, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %2168, <8 x i32>* %1638, align 32
  %2169 = bitcast <4 x i64> %2127 to <8 x i32>
  %2170 = shufflevector <4 x i64> %2063, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %2171 = bitcast <2 x i64> %2170 to <4 x i32>
  %2172 = shufflevector <4 x i32> %2171, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %2173 = shufflevector <8 x i32> %2172, <8 x i32> %2169, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %2173, <8 x i32>* %1645, align 32
  %2174 = bitcast <4 x i64> %2068 to <8 x i32>
  %2175 = shufflevector <4 x i64> %2132, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %2176 = bitcast <2 x i64> %2175 to <4 x i32>
  %2177 = shufflevector <4 x i32> %2176, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %2178 = shufflevector <8 x i32> %2174, <8 x i32> %2177, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %2178, <8 x i32>* %1652, align 32
  %2179 = bitcast <4 x i64> %2132 to <8 x i32>
  %2180 = shufflevector <4 x i64> %2068, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %2181 = bitcast <2 x i64> %2180 to <4 x i32>
  %2182 = shufflevector <4 x i32> %2181, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %2183 = shufflevector <8 x i32> %2182, <8 x i32> %2179, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %2183, <8 x i32>* %1659, align 32
  %2184 = bitcast <4 x i64> %2069 to <8 x i32>
  %2185 = shufflevector <4 x i64> %2133, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %2186 = bitcast <2 x i64> %2185 to <4 x i32>
  %2187 = shufflevector <4 x i32> %2186, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %2188 = shufflevector <8 x i32> %2184, <8 x i32> %2187, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %2188, <8 x i32>* %1666, align 32
  %2189 = bitcast <4 x i64> %2133 to <8 x i32>
  %2190 = shufflevector <4 x i64> %2069, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %2191 = bitcast <2 x i64> %2190 to <4 x i32>
  %2192 = shufflevector <4 x i32> %2191, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %2193 = shufflevector <8 x i32> %2192, <8 x i32> %2189, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %2193, <8 x i32>* %1673, align 32
  %2194 = bitcast <4 x i64> %2082 to <8 x i32>
  %2195 = shufflevector <4 x i64> %2146, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %2196 = bitcast <2 x i64> %2195 to <4 x i32>
  %2197 = shufflevector <4 x i32> %2196, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %2198 = shufflevector <8 x i32> %2194, <8 x i32> %2197, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %2198, <8 x i32>* %1680, align 32
  %2199 = bitcast <4 x i64> %2146 to <8 x i32>
  %2200 = shufflevector <4 x i64> %2082, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %2201 = bitcast <2 x i64> %2200 to <4 x i32>
  %2202 = shufflevector <4 x i32> %2201, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %2203 = shufflevector <8 x i32> %2202, <8 x i32> %2199, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %2203, <8 x i32>* %1687, align 32
  %2204 = bitcast <4 x i64> %2083 to <8 x i32>
  %2205 = shufflevector <4 x i64> %2147, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %2206 = bitcast <2 x i64> %2205 to <4 x i32>
  %2207 = shufflevector <4 x i32> %2206, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %2208 = shufflevector <8 x i32> %2204, <8 x i32> %2207, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %2208, <8 x i32>* %1694, align 32
  %2209 = bitcast <4 x i64> %2147 to <8 x i32>
  %2210 = shufflevector <4 x i64> %2083, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %2211 = bitcast <2 x i64> %2210 to <4 x i32>
  %2212 = shufflevector <4 x i32> %2211, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %2213 = shufflevector <8 x i32> %2212, <8 x i32> %2209, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %2213, <8 x i32>* %1701, align 32
  %2214 = bitcast <4 x i64> %2088 to <8 x i32>
  %2215 = shufflevector <4 x i64> %2152, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %2216 = bitcast <2 x i64> %2215 to <4 x i32>
  %2217 = shufflevector <4 x i32> %2216, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %2218 = shufflevector <8 x i32> %2214, <8 x i32> %2217, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %2218, <8 x i32>* %1708, align 32
  %2219 = bitcast <4 x i64> %2152 to <8 x i32>
  %2220 = shufflevector <4 x i64> %2088, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %2221 = bitcast <2 x i64> %2220 to <4 x i32>
  %2222 = shufflevector <4 x i32> %2221, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %2223 = shufflevector <8 x i32> %2222, <8 x i32> %2219, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %2223, <8 x i32>* %1715, align 32
  %2224 = bitcast <4 x i64> %2089 to <8 x i32>
  %2225 = shufflevector <4 x i64> %2153, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %2226 = bitcast <2 x i64> %2225 to <4 x i32>
  %2227 = shufflevector <4 x i32> %2226, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %2228 = shufflevector <8 x i32> %2224, <8 x i32> %2227, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %2228, <8 x i32>* %1722, align 32
  %2229 = bitcast <4 x i64> %2153 to <8 x i32>
  %2230 = shufflevector <4 x i64> %2089, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %2231 = bitcast <2 x i64> %2230 to <4 x i32>
  %2232 = shufflevector <4 x i32> %2231, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %2233 = shufflevector <8 x i32> %2232, <8 x i32> %2229, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %2233, <8 x i32>* %1729, align 32
  %2234 = shl nsw i64 %1, 4
  %2235 = getelementptr inbounds i16, i16* %0, i64 %2234
  %2236 = bitcast i16* %2235 to <8 x i32>*
  store <8 x i32> %2158, <8 x i32>* %2236, align 1
  %2237 = mul nsw i64 %1, 17
  %2238 = getelementptr inbounds i16, i16* %0, i64 %2237
  %2239 = bitcast i16* %2238 to <8 x i32>*
  store <8 x i32> %2168, <8 x i32>* %2239, align 1
  %2240 = mul nsw i64 %1, 18
  %2241 = getelementptr inbounds i16, i16* %0, i64 %2240
  %2242 = bitcast i16* %2241 to <8 x i32>*
  store <8 x i32> %2178, <8 x i32>* %2242, align 1
  %2243 = mul nsw i64 %1, 19
  %2244 = getelementptr inbounds i16, i16* %0, i64 %2243
  %2245 = bitcast i16* %2244 to <8 x i32>*
  store <8 x i32> %2188, <8 x i32>* %2245, align 1
  %2246 = mul nsw i64 %1, 20
  %2247 = getelementptr inbounds i16, i16* %0, i64 %2246
  %2248 = bitcast i16* %2247 to <8 x i32>*
  store <8 x i32> %2198, <8 x i32>* %2248, align 1
  %2249 = mul nsw i64 %1, 21
  %2250 = getelementptr inbounds i16, i16* %0, i64 %2249
  %2251 = bitcast i16* %2250 to <8 x i32>*
  store <8 x i32> %2208, <8 x i32>* %2251, align 1
  %2252 = mul nsw i64 %1, 22
  %2253 = getelementptr inbounds i16, i16* %0, i64 %2252
  %2254 = bitcast i16* %2253 to <8 x i32>*
  store <8 x i32> %2218, <8 x i32>* %2254, align 1
  %2255 = mul nsw i64 %1, 23
  %2256 = getelementptr inbounds i16, i16* %0, i64 %2255
  %2257 = bitcast i16* %2256 to <8 x i32>*
  store <8 x i32> %2228, <8 x i32>* %2257, align 1
  %2258 = mul nsw i64 %1, 24
  %2259 = getelementptr inbounds i16, i16* %0, i64 %2258
  %2260 = bitcast i16* %2259 to <4 x i64>*
  %2261 = load <4 x i64>, <4 x i64>* %1630, align 32
  store <4 x i64> %2261, <4 x i64>* %2260, align 1
  %2262 = mul nsw i64 %1, 25
  %2263 = getelementptr inbounds i16, i16* %0, i64 %2262
  %2264 = bitcast i16* %2263 to <4 x i64>*
  %2265 = load <4 x i64>, <4 x i64>* %1644, align 32
  store <4 x i64> %2265, <4 x i64>* %2264, align 1
  %2266 = mul nsw i64 %1, 26
  %2267 = getelementptr inbounds i16, i16* %0, i64 %2266
  %2268 = bitcast i16* %2267 to <4 x i64>*
  %2269 = load <4 x i64>, <4 x i64>* %1658, align 32
  store <4 x i64> %2269, <4 x i64>* %2268, align 1
  %2270 = mul nsw i64 %1, 27
  %2271 = getelementptr inbounds i16, i16* %0, i64 %2270
  %2272 = bitcast i16* %2271 to <8 x i32>*
  store <8 x i32> %2193, <8 x i32>* %2272, align 1
  %2273 = mul nsw i64 %1, 28
  %2274 = getelementptr inbounds i16, i16* %0, i64 %2273
  %2275 = bitcast i16* %2274 to <8 x i32>*
  store <8 x i32> %2203, <8 x i32>* %2275, align 1
  %2276 = mul nsw i64 %1, 29
  %2277 = getelementptr inbounds i16, i16* %0, i64 %2276
  %2278 = bitcast i16* %2277 to <8 x i32>*
  store <8 x i32> %2213, <8 x i32>* %2278, align 1
  %2279 = mul nsw i64 %1, 30
  %2280 = getelementptr inbounds i16, i16* %0, i64 %2279
  %2281 = bitcast i16* %2280 to <8 x i32>*
  store <8 x i32> %2223, <8 x i32>* %2281, align 1
  %2282 = mul nsw i64 %1, 31
  %2283 = getelementptr inbounds i16, i16* %0, i64 %2282
  %2284 = bitcast i16* %2283 to <8 x i32>*
  store <8 x i32> %2233, <8 x i32>* %2284, align 1
  %2285 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %22, i64 0, i64 48
  %2286 = bitcast <4 x i64>* %2285 to <16 x i16>*
  %2287 = load <16 x i16>, <16 x i16>* %2286, align 32
  %2288 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %22, i64 0, i64 49
  %2289 = bitcast <4 x i64>* %2288 to <16 x i16>*
  %2290 = load <16 x i16>, <16 x i16>* %2289, align 32
  %2291 = shufflevector <16 x i16> %2287, <16 x i16> %2290, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %2292 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %22, i64 0, i64 50
  %2293 = bitcast <4 x i64>* %2292 to <16 x i16>*
  %2294 = load <16 x i16>, <16 x i16>* %2293, align 32
  %2295 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %22, i64 0, i64 51
  %2296 = bitcast <4 x i64>* %2295 to <16 x i16>*
  %2297 = load <16 x i16>, <16 x i16>* %2296, align 32
  %2298 = shufflevector <16 x i16> %2294, <16 x i16> %2297, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %2299 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %22, i64 0, i64 52
  %2300 = bitcast <4 x i64>* %2299 to <16 x i16>*
  %2301 = load <16 x i16>, <16 x i16>* %2300, align 32
  %2302 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %22, i64 0, i64 53
  %2303 = bitcast <4 x i64>* %2302 to <16 x i16>*
  %2304 = load <16 x i16>, <16 x i16>* %2303, align 32
  %2305 = shufflevector <16 x i16> %2301, <16 x i16> %2304, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %2306 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %22, i64 0, i64 54
  %2307 = bitcast <4 x i64>* %2306 to <16 x i16>*
  %2308 = load <16 x i16>, <16 x i16>* %2307, align 32
  %2309 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %22, i64 0, i64 55
  %2310 = bitcast <4 x i64>* %2309 to <16 x i16>*
  %2311 = load <16 x i16>, <16 x i16>* %2310, align 32
  %2312 = shufflevector <16 x i16> %2308, <16 x i16> %2311, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %2313 = bitcast <16 x i16> %2291 to <8 x i32>
  %2314 = bitcast <16 x i16> %2298 to <8 x i32>
  %2315 = shufflevector <8 x i32> %2313, <8 x i32> %2314, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %2316 = bitcast <8 x i32> %2315 to <4 x i64>
  %2317 = bitcast <16 x i16> %2305 to <8 x i32>
  %2318 = bitcast <16 x i16> %2312 to <8 x i32>
  %2319 = shufflevector <8 x i32> %2317, <8 x i32> %2318, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %2320 = bitcast <8 x i32> %2319 to <4 x i64>
  %2321 = shufflevector <4 x i64> %2316, <4 x i64> %2320, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %2322 = shufflevector <4 x i64> %2316, <4 x i64> %2320, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %2323 = shufflevector <8 x i32> %2313, <8 x i32> %2314, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %2324 = bitcast <8 x i32> %2323 to <4 x i64>
  %2325 = shufflevector <8 x i32> %2317, <8 x i32> %2318, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %2326 = bitcast <8 x i32> %2325 to <4 x i64>
  %2327 = shufflevector <4 x i64> %2324, <4 x i64> %2326, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %2328 = shufflevector <4 x i64> %2324, <4 x i64> %2326, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %2329 = shufflevector <16 x i16> %2287, <16 x i16> %2290, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %2330 = shufflevector <16 x i16> %2294, <16 x i16> %2297, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %2331 = shufflevector <16 x i16> %2301, <16 x i16> %2304, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %2332 = shufflevector <16 x i16> %2308, <16 x i16> %2311, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %2333 = bitcast <16 x i16> %2329 to <8 x i32>
  %2334 = bitcast <16 x i16> %2330 to <8 x i32>
  %2335 = shufflevector <8 x i32> %2333, <8 x i32> %2334, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %2336 = bitcast <8 x i32> %2335 to <4 x i64>
  %2337 = bitcast <16 x i16> %2331 to <8 x i32>
  %2338 = bitcast <16 x i16> %2332 to <8 x i32>
  %2339 = shufflevector <8 x i32> %2337, <8 x i32> %2338, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %2340 = bitcast <8 x i32> %2339 to <4 x i64>
  %2341 = shufflevector <4 x i64> %2336, <4 x i64> %2340, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %2342 = shufflevector <4 x i64> %2336, <4 x i64> %2340, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %2343 = shufflevector <8 x i32> %2333, <8 x i32> %2334, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %2344 = bitcast <8 x i32> %2343 to <4 x i64>
  %2345 = shufflevector <8 x i32> %2337, <8 x i32> %2338, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %2346 = bitcast <8 x i32> %2345 to <4 x i64>
  %2347 = shufflevector <4 x i64> %2344, <4 x i64> %2346, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %2348 = shufflevector <4 x i64> %2344, <4 x i64> %2346, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %2349 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %22, i64 0, i64 56
  %2350 = bitcast <4 x i64>* %2349 to <16 x i16>*
  %2351 = load <16 x i16>, <16 x i16>* %2350, align 32
  %2352 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %22, i64 0, i64 57
  %2353 = bitcast <4 x i64>* %2352 to <16 x i16>*
  %2354 = load <16 x i16>, <16 x i16>* %2353, align 32
  %2355 = shufflevector <16 x i16> %2351, <16 x i16> %2354, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %2356 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %22, i64 0, i64 58
  %2357 = bitcast <4 x i64>* %2356 to <16 x i16>*
  %2358 = load <16 x i16>, <16 x i16>* %2357, align 32
  %2359 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %22, i64 0, i64 59
  %2360 = bitcast <4 x i64>* %2359 to <16 x i16>*
  %2361 = load <16 x i16>, <16 x i16>* %2360, align 32
  %2362 = shufflevector <16 x i16> %2358, <16 x i16> %2361, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %2363 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %22, i64 0, i64 60
  %2364 = bitcast <4 x i64>* %2363 to <16 x i16>*
  %2365 = load <16 x i16>, <16 x i16>* %2364, align 32
  %2366 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %22, i64 0, i64 61
  %2367 = bitcast <4 x i64>* %2366 to <16 x i16>*
  %2368 = load <16 x i16>, <16 x i16>* %2367, align 32
  %2369 = shufflevector <16 x i16> %2365, <16 x i16> %2368, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %2370 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %22, i64 0, i64 62
  %2371 = bitcast <4 x i64>* %2370 to <16 x i16>*
  %2372 = load <16 x i16>, <16 x i16>* %2371, align 32
  %2373 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %22, i64 0, i64 63
  %2374 = bitcast <4 x i64>* %2373 to <16 x i16>*
  %2375 = load <16 x i16>, <16 x i16>* %2374, align 32
  %2376 = shufflevector <16 x i16> %2372, <16 x i16> %2375, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %2377 = bitcast <16 x i16> %2355 to <8 x i32>
  %2378 = bitcast <16 x i16> %2362 to <8 x i32>
  %2379 = shufflevector <8 x i32> %2377, <8 x i32> %2378, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %2380 = bitcast <8 x i32> %2379 to <4 x i64>
  %2381 = bitcast <16 x i16> %2369 to <8 x i32>
  %2382 = bitcast <16 x i16> %2376 to <8 x i32>
  %2383 = shufflevector <8 x i32> %2381, <8 x i32> %2382, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %2384 = bitcast <8 x i32> %2383 to <4 x i64>
  %2385 = shufflevector <4 x i64> %2380, <4 x i64> %2384, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %2386 = shufflevector <4 x i64> %2380, <4 x i64> %2384, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %2387 = shufflevector <8 x i32> %2377, <8 x i32> %2378, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %2388 = bitcast <8 x i32> %2387 to <4 x i64>
  %2389 = shufflevector <8 x i32> %2381, <8 x i32> %2382, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %2390 = bitcast <8 x i32> %2389 to <4 x i64>
  %2391 = shufflevector <4 x i64> %2388, <4 x i64> %2390, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %2392 = shufflevector <4 x i64> %2388, <4 x i64> %2390, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %2393 = shufflevector <16 x i16> %2351, <16 x i16> %2354, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %2394 = shufflevector <16 x i16> %2358, <16 x i16> %2361, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %2395 = shufflevector <16 x i16> %2365, <16 x i16> %2368, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %2396 = shufflevector <16 x i16> %2372, <16 x i16> %2375, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %2397 = bitcast <16 x i16> %2393 to <8 x i32>
  %2398 = bitcast <16 x i16> %2394 to <8 x i32>
  %2399 = shufflevector <8 x i32> %2397, <8 x i32> %2398, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %2400 = bitcast <8 x i32> %2399 to <4 x i64>
  %2401 = bitcast <16 x i16> %2395 to <8 x i32>
  %2402 = bitcast <16 x i16> %2396 to <8 x i32>
  %2403 = shufflevector <8 x i32> %2401, <8 x i32> %2402, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %2404 = bitcast <8 x i32> %2403 to <4 x i64>
  %2405 = shufflevector <4 x i64> %2400, <4 x i64> %2404, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %2406 = shufflevector <4 x i64> %2400, <4 x i64> %2404, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %2407 = shufflevector <8 x i32> %2397, <8 x i32> %2398, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %2408 = bitcast <8 x i32> %2407 to <4 x i64>
  %2409 = shufflevector <8 x i32> %2401, <8 x i32> %2402, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %2410 = bitcast <8 x i32> %2409 to <4 x i64>
  %2411 = shufflevector <4 x i64> %2408, <4 x i64> %2410, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %2412 = shufflevector <4 x i64> %2408, <4 x i64> %2410, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %2413 = bitcast <4 x i64> %2321 to <8 x i32>
  %2414 = shufflevector <4 x i64> %2385, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %2415 = bitcast <2 x i64> %2414 to <4 x i32>
  %2416 = shufflevector <4 x i32> %2415, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %2417 = shufflevector <8 x i32> %2413, <8 x i32> %2416, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %2417, <8 x i32>* %1624, align 32
  %2418 = bitcast <4 x i64> %2385 to <8 x i32>
  %2419 = shufflevector <4 x i64> %2321, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %2420 = bitcast <2 x i64> %2419 to <4 x i32>
  %2421 = shufflevector <4 x i32> %2420, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %2422 = shufflevector <8 x i32> %2421, <8 x i32> %2418, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %2422, <8 x i32>* %1631, align 32
  %2423 = bitcast <4 x i64> %2322 to <8 x i32>
  %2424 = shufflevector <4 x i64> %2386, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %2425 = bitcast <2 x i64> %2424 to <4 x i32>
  %2426 = shufflevector <4 x i32> %2425, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %2427 = shufflevector <8 x i32> %2423, <8 x i32> %2426, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %2427, <8 x i32>* %1638, align 32
  %2428 = bitcast <4 x i64> %2386 to <8 x i32>
  %2429 = shufflevector <4 x i64> %2322, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %2430 = bitcast <2 x i64> %2429 to <4 x i32>
  %2431 = shufflevector <4 x i32> %2430, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %2432 = shufflevector <8 x i32> %2431, <8 x i32> %2428, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %2432, <8 x i32>* %1645, align 32
  %2433 = bitcast <4 x i64> %2327 to <8 x i32>
  %2434 = shufflevector <4 x i64> %2391, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %2435 = bitcast <2 x i64> %2434 to <4 x i32>
  %2436 = shufflevector <4 x i32> %2435, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %2437 = shufflevector <8 x i32> %2433, <8 x i32> %2436, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %2437, <8 x i32>* %1652, align 32
  %2438 = bitcast <4 x i64> %2391 to <8 x i32>
  %2439 = shufflevector <4 x i64> %2327, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %2440 = bitcast <2 x i64> %2439 to <4 x i32>
  %2441 = shufflevector <4 x i32> %2440, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %2442 = shufflevector <8 x i32> %2441, <8 x i32> %2438, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %2442, <8 x i32>* %1659, align 32
  %2443 = bitcast <4 x i64> %2328 to <8 x i32>
  %2444 = shufflevector <4 x i64> %2392, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %2445 = bitcast <2 x i64> %2444 to <4 x i32>
  %2446 = shufflevector <4 x i32> %2445, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %2447 = shufflevector <8 x i32> %2443, <8 x i32> %2446, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %2447, <8 x i32>* %1666, align 32
  %2448 = bitcast <4 x i64> %2392 to <8 x i32>
  %2449 = shufflevector <4 x i64> %2328, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %2450 = bitcast <2 x i64> %2449 to <4 x i32>
  %2451 = shufflevector <4 x i32> %2450, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %2452 = shufflevector <8 x i32> %2451, <8 x i32> %2448, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %2452, <8 x i32>* %1673, align 32
  %2453 = bitcast <4 x i64> %2341 to <8 x i32>
  %2454 = shufflevector <4 x i64> %2405, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %2455 = bitcast <2 x i64> %2454 to <4 x i32>
  %2456 = shufflevector <4 x i32> %2455, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %2457 = shufflevector <8 x i32> %2453, <8 x i32> %2456, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %2457, <8 x i32>* %1680, align 32
  %2458 = bitcast <4 x i64> %2405 to <8 x i32>
  %2459 = shufflevector <4 x i64> %2341, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %2460 = bitcast <2 x i64> %2459 to <4 x i32>
  %2461 = shufflevector <4 x i32> %2460, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %2462 = shufflevector <8 x i32> %2461, <8 x i32> %2458, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %2462, <8 x i32>* %1687, align 32
  %2463 = bitcast <4 x i64> %2342 to <8 x i32>
  %2464 = shufflevector <4 x i64> %2406, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %2465 = bitcast <2 x i64> %2464 to <4 x i32>
  %2466 = shufflevector <4 x i32> %2465, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %2467 = shufflevector <8 x i32> %2463, <8 x i32> %2466, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %2467, <8 x i32>* %1694, align 32
  %2468 = bitcast <4 x i64> %2406 to <8 x i32>
  %2469 = shufflevector <4 x i64> %2342, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %2470 = bitcast <2 x i64> %2469 to <4 x i32>
  %2471 = shufflevector <4 x i32> %2470, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %2472 = shufflevector <8 x i32> %2471, <8 x i32> %2468, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %2472, <8 x i32>* %1701, align 32
  %2473 = bitcast <4 x i64> %2347 to <8 x i32>
  %2474 = shufflevector <4 x i64> %2411, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %2475 = bitcast <2 x i64> %2474 to <4 x i32>
  %2476 = shufflevector <4 x i32> %2475, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %2477 = shufflevector <8 x i32> %2473, <8 x i32> %2476, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %2477, <8 x i32>* %1708, align 32
  %2478 = bitcast <4 x i64> %2411 to <8 x i32>
  %2479 = shufflevector <4 x i64> %2347, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %2480 = bitcast <2 x i64> %2479 to <4 x i32>
  %2481 = shufflevector <4 x i32> %2480, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %2482 = shufflevector <8 x i32> %2481, <8 x i32> %2478, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %2482, <8 x i32>* %1715, align 32
  %2483 = bitcast <4 x i64> %2348 to <8 x i32>
  %2484 = shufflevector <4 x i64> %2412, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %2485 = bitcast <2 x i64> %2484 to <4 x i32>
  %2486 = shufflevector <4 x i32> %2485, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %2487 = shufflevector <8 x i32> %2483, <8 x i32> %2486, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  store <8 x i32> %2487, <8 x i32>* %1722, align 32
  %2488 = bitcast <4 x i64> %2412 to <8 x i32>
  %2489 = shufflevector <4 x i64> %2348, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %2490 = bitcast <2 x i64> %2489 to <4 x i32>
  %2491 = shufflevector <4 x i32> %2490, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %2492 = shufflevector <8 x i32> %2491, <8 x i32> %2488, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %2492, <8 x i32>* %1729, align 32
  %2493 = getelementptr inbounds i16, i16* %1992, i64 %2234
  %2494 = bitcast i16* %2493 to <8 x i32>*
  store <8 x i32> %2417, <8 x i32>* %2494, align 1
  %2495 = getelementptr inbounds i16, i16* %1992, i64 %2237
  %2496 = bitcast i16* %2495 to <8 x i32>*
  store <8 x i32> %2427, <8 x i32>* %2496, align 1
  %2497 = getelementptr inbounds i16, i16* %1992, i64 %2240
  %2498 = bitcast i16* %2497 to <8 x i32>*
  store <8 x i32> %2437, <8 x i32>* %2498, align 1
  %2499 = getelementptr inbounds i16, i16* %1992, i64 %2243
  %2500 = bitcast i16* %2499 to <8 x i32>*
  store <8 x i32> %2447, <8 x i32>* %2500, align 1
  %2501 = getelementptr inbounds i16, i16* %1992, i64 %2246
  %2502 = bitcast i16* %2501 to <8 x i32>*
  store <8 x i32> %2457, <8 x i32>* %2502, align 1
  %2503 = getelementptr inbounds i16, i16* %1992, i64 %2249
  %2504 = bitcast i16* %2503 to <8 x i32>*
  store <8 x i32> %2467, <8 x i32>* %2504, align 1
  %2505 = getelementptr inbounds i16, i16* %1992, i64 %2252
  %2506 = bitcast i16* %2505 to <8 x i32>*
  store <8 x i32> %2477, <8 x i32>* %2506, align 1
  %2507 = getelementptr inbounds i16, i16* %1992, i64 %2255
  %2508 = bitcast i16* %2507 to <8 x i32>*
  store <8 x i32> %2487, <8 x i32>* %2508, align 1
  %2509 = getelementptr inbounds i16, i16* %1992, i64 %2258
  %2510 = bitcast i16* %2509 to <4 x i64>*
  %2511 = load <4 x i64>, <4 x i64>* %1630, align 32
  store <4 x i64> %2511, <4 x i64>* %2510, align 1
  %2512 = getelementptr inbounds i16, i16* %1992, i64 %2262
  %2513 = bitcast i16* %2512 to <4 x i64>*
  %2514 = load <4 x i64>, <4 x i64>* %1644, align 32
  store <4 x i64> %2514, <4 x i64>* %2513, align 1
  %2515 = getelementptr inbounds i16, i16* %1992, i64 %2266
  %2516 = bitcast i16* %2515 to <8 x i32>*
  store <8 x i32> %2442, <8 x i32>* %2516, align 1
  %2517 = getelementptr inbounds i16, i16* %1992, i64 %2270
  %2518 = bitcast i16* %2517 to <8 x i32>*
  store <8 x i32> %2452, <8 x i32>* %2518, align 1
  %2519 = getelementptr inbounds i16, i16* %1992, i64 %2273
  %2520 = bitcast i16* %2519 to <8 x i32>*
  store <8 x i32> %2462, <8 x i32>* %2520, align 1
  %2521 = getelementptr inbounds i16, i16* %1992, i64 %2276
  %2522 = bitcast i16* %2521 to <8 x i32>*
  store <8 x i32> %2472, <8 x i32>* %2522, align 1
  %2523 = getelementptr inbounds i16, i16* %1992, i64 %2279
  %2524 = bitcast i16* %2523 to <8 x i32>*
  store <8 x i32> %2482, <8 x i32>* %2524, align 1
  %2525 = getelementptr inbounds i16, i16* %1992, i64 %2282
  %2526 = bitcast i16* %2525 to <8 x i32>*
  store <8 x i32> %2492, <8 x i32>* %2526, align 1
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %1112) #8
  call void @llvm.lifetime.end.p0i8(i64 2048, i8* nonnull %1111) #8
  br label %7784

2527:                                             ; preds = %26
  %2528 = bitcast [4096 x i16]* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8192, i8* nonnull %2528) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %2528, i8 -86, i64 8192, i1 false) #8
  %2529 = icmp slt i32 %9, 12
  %2530 = getelementptr inbounds [4096 x i16], [4096 x i16]* %14, i64 0, i64 0
  br i1 %2529, label %2531, label %2676

2531:                                             ; preds = %2527
  %2532 = getelementptr inbounds i16, i16* %5, i64 127
  %2533 = load i16, i16* %2532, align 2
  %2534 = insertelement <16 x i16> undef, i16 %2533, i32 0
  %2535 = shufflevector <16 x i16> %2534, <16 x i16> undef, <16 x i32> zeroinitializer
  br label %2536

2536:                                             ; preds = %2671, %2531
  %2537 = phi i16* [ %2674, %2671 ], [ %2530, %2531 ]
  %2538 = phi i32 [ %2673, %2671 ], [ 0, %2531 ]
  %2539 = phi i32 [ %2672, %2671 ], [ %8, %2531 ]
  %2540 = icmp slt i32 %2539, 8128
  br i1 %2540, label %2604, label %2541

2541:                                             ; preds = %2536
  %2542 = icmp ult i32 %2538, 64
  br i1 %2542, label %2543, label %2677

2543:                                             ; preds = %2541
  %2544 = sub nsw i32 0, %2538
  %2545 = sub nsw i32 63, %2538
  %2546 = and i32 %2544, 3
  %2547 = icmp eq i32 %2546, 0
  br i1 %2547, label %2563, label %2548

2548:                                             ; preds = %2543, %2548
  %2549 = phi i16* [ %2559, %2548 ], [ %2537, %2543 ]
  %2550 = phi i32 [ %2560, %2548 ], [ %2538, %2543 ]
  %2551 = phi i32 [ %2561, %2548 ], [ %2546, %2543 ]
  %2552 = bitcast i16* %2549 to <16 x i16>*
  store <16 x i16> %2535, <16 x i16>* %2552, align 1
  %2553 = getelementptr inbounds i16, i16* %2549, i64 16
  %2554 = bitcast i16* %2553 to <16 x i16>*
  store <16 x i16> %2535, <16 x i16>* %2554, align 1
  %2555 = getelementptr inbounds i16, i16* %2549, i64 32
  %2556 = bitcast i16* %2555 to <16 x i16>*
  store <16 x i16> %2535, <16 x i16>* %2556, align 1
  %2557 = getelementptr inbounds i16, i16* %2549, i64 48
  %2558 = bitcast i16* %2557 to <16 x i16>*
  store <16 x i16> %2535, <16 x i16>* %2558, align 1
  %2559 = getelementptr inbounds i16, i16* %2549, i64 64
  %2560 = add nuw nsw i32 %2550, 1
  %2561 = add i32 %2551, -1
  %2562 = icmp eq i32 %2561, 0
  br i1 %2562, label %2563, label %2548, !llvm.loop !20

2563:                                             ; preds = %2548, %2543
  %2564 = phi i16* [ %2537, %2543 ], [ %2559, %2548 ]
  %2565 = phi i32 [ %2538, %2543 ], [ %2560, %2548 ]
  %2566 = icmp ult i32 %2545, 3
  br i1 %2566, label %2677, label %2567

2567:                                             ; preds = %2563, %2567
  %2568 = phi i16* [ %2601, %2567 ], [ %2564, %2563 ]
  %2569 = phi i32 [ %2602, %2567 ], [ %2565, %2563 ]
  %2570 = bitcast i16* %2568 to <16 x i16>*
  store <16 x i16> %2535, <16 x i16>* %2570, align 1
  %2571 = getelementptr inbounds i16, i16* %2568, i64 16
  %2572 = bitcast i16* %2571 to <16 x i16>*
  store <16 x i16> %2535, <16 x i16>* %2572, align 1
  %2573 = getelementptr inbounds i16, i16* %2568, i64 32
  %2574 = bitcast i16* %2573 to <16 x i16>*
  store <16 x i16> %2535, <16 x i16>* %2574, align 1
  %2575 = getelementptr inbounds i16, i16* %2568, i64 48
  %2576 = bitcast i16* %2575 to <16 x i16>*
  store <16 x i16> %2535, <16 x i16>* %2576, align 1
  %2577 = getelementptr inbounds i16, i16* %2568, i64 64
  %2578 = bitcast i16* %2577 to <16 x i16>*
  store <16 x i16> %2535, <16 x i16>* %2578, align 1
  %2579 = getelementptr inbounds i16, i16* %2568, i64 80
  %2580 = bitcast i16* %2579 to <16 x i16>*
  store <16 x i16> %2535, <16 x i16>* %2580, align 1
  %2581 = getelementptr inbounds i16, i16* %2568, i64 96
  %2582 = bitcast i16* %2581 to <16 x i16>*
  store <16 x i16> %2535, <16 x i16>* %2582, align 1
  %2583 = getelementptr inbounds i16, i16* %2568, i64 112
  %2584 = bitcast i16* %2583 to <16 x i16>*
  store <16 x i16> %2535, <16 x i16>* %2584, align 1
  %2585 = getelementptr inbounds i16, i16* %2568, i64 128
  %2586 = bitcast i16* %2585 to <16 x i16>*
  store <16 x i16> %2535, <16 x i16>* %2586, align 1
  %2587 = getelementptr inbounds i16, i16* %2568, i64 144
  %2588 = bitcast i16* %2587 to <16 x i16>*
  store <16 x i16> %2535, <16 x i16>* %2588, align 1
  %2589 = getelementptr inbounds i16, i16* %2568, i64 160
  %2590 = bitcast i16* %2589 to <16 x i16>*
  store <16 x i16> %2535, <16 x i16>* %2590, align 1
  %2591 = getelementptr inbounds i16, i16* %2568, i64 176
  %2592 = bitcast i16* %2591 to <16 x i16>*
  store <16 x i16> %2535, <16 x i16>* %2592, align 1
  %2593 = getelementptr inbounds i16, i16* %2568, i64 192
  %2594 = bitcast i16* %2593 to <16 x i16>*
  store <16 x i16> %2535, <16 x i16>* %2594, align 1
  %2595 = getelementptr inbounds i16, i16* %2568, i64 208
  %2596 = bitcast i16* %2595 to <16 x i16>*
  store <16 x i16> %2535, <16 x i16>* %2596, align 1
  %2597 = getelementptr inbounds i16, i16* %2568, i64 224
  %2598 = bitcast i16* %2597 to <16 x i16>*
  store <16 x i16> %2535, <16 x i16>* %2598, align 1
  %2599 = getelementptr inbounds i16, i16* %2568, i64 240
  %2600 = bitcast i16* %2599 to <16 x i16>*
  store <16 x i16> %2535, <16 x i16>* %2600, align 1
  %2601 = getelementptr inbounds i16, i16* %2568, i64 256
  %2602 = add nuw nsw i32 %2569, 4
  %2603 = icmp eq i32 %2602, 64
  br i1 %2603, label %2677, label %2567

2604:                                             ; preds = %2536
  %2605 = ashr i32 %2539, 6
  %2606 = trunc i32 %2539 to i16
  %2607 = insertelement <16 x i16> undef, i16 %2606, i32 0
  %2608 = and <16 x i16> %2607, <i16 63, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef>
  %2609 = lshr <16 x i16> %2608, <i16 1, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0>
  %2610 = shufflevector <16 x i16> %2609, <16 x i16> undef, <16 x i32> zeroinitializer
  %2611 = sext i32 %2605 to i64
  %2612 = getelementptr inbounds i16, i16* %5, i64 %2611
  %2613 = getelementptr inbounds i16, i16* %2612, i64 1
  br label %2614

2614:                                             ; preds = %2665, %2604
  %2615 = phi i64 [ 0, %2604 ], [ %2669, %2665 ]
  %2616 = add nsw i64 %2615, %2611
  %2617 = icmp slt i64 %2616, 127
  br i1 %2617, label %2618, label %2665

2618:                                             ; preds = %2614
  %2619 = getelementptr inbounds i16, i16* %2612, i64 %2615
  %2620 = bitcast i16* %2619 to <16 x i16>*
  %2621 = load <16 x i16>, <16 x i16>* %2620, align 1
  %2622 = getelementptr inbounds i16, i16* %2613, i64 %2615
  %2623 = bitcast i16* %2622 to <16 x i16>*
  %2624 = load <16 x i16>, <16 x i16>* %2623, align 1
  %2625 = sub <16 x i16> %2624, %2621
  %2626 = shl <16 x i16> %2621, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %2627 = or <16 x i16> %2626, <i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16>
  %2628 = mul <16 x i16> %2625, %2610
  %2629 = add <16 x i16> %2628, %2627
  %2630 = lshr <16 x i16> %2629, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %2631 = trunc i64 %2616 to i16
  %2632 = add i16 %2631, 1
  %2633 = add i16 %2631, 2
  %2634 = add i16 %2631, 3
  %2635 = add i16 %2631, 4
  %2636 = add i16 %2631, 5
  %2637 = add i16 %2631, 6
  %2638 = add i16 %2631, 7
  %2639 = add i16 %2631, 8
  %2640 = add i16 %2631, 9
  %2641 = add i16 %2631, 10
  %2642 = add i16 %2631, 11
  %2643 = add i16 %2631, 12
  %2644 = add i16 %2631, 13
  %2645 = add i16 %2631, 14
  %2646 = add i16 %2631, 15
  %2647 = insertelement <16 x i16> undef, i16 %2631, i32 0
  %2648 = insertelement <16 x i16> %2647, i16 %2632, i32 1
  %2649 = insertelement <16 x i16> %2648, i16 %2633, i32 2
  %2650 = insertelement <16 x i16> %2649, i16 %2634, i32 3
  %2651 = insertelement <16 x i16> %2650, i16 %2635, i32 4
  %2652 = insertelement <16 x i16> %2651, i16 %2636, i32 5
  %2653 = insertelement <16 x i16> %2652, i16 %2637, i32 6
  %2654 = insertelement <16 x i16> %2653, i16 %2638, i32 7
  %2655 = insertelement <16 x i16> %2654, i16 %2639, i32 8
  %2656 = insertelement <16 x i16> %2655, i16 %2640, i32 9
  %2657 = insertelement <16 x i16> %2656, i16 %2641, i32 10
  %2658 = insertelement <16 x i16> %2657, i16 %2642, i32 11
  %2659 = insertelement <16 x i16> %2658, i16 %2643, i32 12
  %2660 = insertelement <16 x i16> %2659, i16 %2644, i32 13
  %2661 = insertelement <16 x i16> %2660, i16 %2645, i32 14
  %2662 = insertelement <16 x i16> %2661, i16 %2646, i32 15
  %2663 = icmp slt <16 x i16> %2662, <i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127>
  %2664 = select <16 x i1> %2663, <16 x i16> %2630, <16 x i16> %2535
  br label %2665

2665:                                             ; preds = %2614, %2618
  %2666 = phi <16 x i16> [ %2664, %2618 ], [ %2535, %2614 ]
  %2667 = getelementptr inbounds i16, i16* %2537, i64 %2615
  %2668 = bitcast i16* %2667 to <16 x i16>*
  store <16 x i16> %2666, <16 x i16>* %2668, align 1
  %2669 = add nuw nsw i64 %2615, 16
  %2670 = icmp ult i64 %2669, 64
  br i1 %2670, label %2614, label %2671

2671:                                             ; preds = %2665
  %2672 = add nsw i32 %2539, %8
  %2673 = add nuw nsw i32 %2538, 1
  %2674 = getelementptr inbounds i16, i16* %2537, i64 64
  %2675 = icmp eq i32 %2673, 64
  br i1 %2675, label %2677, label %2536

2676:                                             ; preds = %2527
  call fastcc void @highbd_dr_prediction_32bit_z1_64xN_avx2(i32 64, i16* nonnull %2530, i64 64, i16* %5, i32 %8) #8
  br label %2677

2677:                                             ; preds = %2671, %2563, %2567, %2541, %2676
  call fastcc void @highbd_transpose(i16* nonnull %2530, i64 64, i16* %0, i64 %1, i32 64, i32 64) #8
  call void @llvm.lifetime.end.p0i8(i64 8192, i8* nonnull %2528) #8
  br label %7784

2678:                                             ; preds = %10
  %2679 = icmp slt i32 %2, %3
  br i1 %2679, label %2680, label %5086

2680:                                             ; preds = %2678
  %2681 = shl nsw i32 %2, 1
  %2682 = icmp eq i32 %2681, %3
  br i1 %2682, label %2683, label %4090

2683:                                             ; preds = %2680
  %2684 = add i32 %2, -4
  %2685 = lshr i32 %2684, 2
  %2686 = shl i32 %2684, 30
  %2687 = or i32 %2685, %2686
  switch i32 %2687, label %7784 [
    i32 0, label %2688
    i32 1, label %2993
    i32 3, label %3302
    i32 7, label %3939
  ]

2688:                                             ; preds = %2683
  %2689 = bitcast [4 x <2 x i64>]* %24 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %2689) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %2689, i8 -86, i64 64, i1 false) #8
  %2690 = icmp slt i32 %9, 12
  %2691 = sub nsw i32 6, %6
  %2692 = shl i32 11, %6
  %2693 = sext i32 %2692 to i64
  %2694 = getelementptr inbounds i16, i16* %5, i64 %2693
  %2695 = load i16, i16* %2694, align 2
  %2696 = insertelement <16 x i16> undef, i16 %2695, i32 0
  %2697 = shufflevector <16 x i16> %2696, <16 x i16> undef, <16 x i32> zeroinitializer
  %2698 = bitcast <16 x i16> %2697 to <4 x i64>
  br i1 %2690, label %2699, label %2809

2699:                                             ; preds = %2688
  %2700 = trunc i32 %2692 to i16
  %2701 = insertelement <16 x i16> undef, i16 %2700, i32 0
  %2702 = shufflevector <16 x i16> %2701, <16 x i16> undef, <16 x i32> zeroinitializer
  %2703 = icmp eq i32 %6, 0
  br label %2704

2704:                                             ; preds = %2785, %2699
  %2705 = phi i64 [ 0, %2699 ], [ %2807, %2785 ]
  %2706 = phi i32 [ %8, %2699 ], [ %2806, %2785 ]
  %2707 = ashr i32 %2706, %2691
  %2708 = icmp slt i32 %2707, %2692
  br i1 %2708, label %2718, label %2709

2709:                                             ; preds = %2704
  %2710 = trunc i64 %2705 to i32
  %2711 = icmp slt i32 %2710, 4
  br i1 %2711, label %2712, label %2936

2712:                                             ; preds = %2709
  %2713 = shufflevector <4 x i64> %2698, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %2714 = and i64 %2705, 4294967295
  %2715 = getelementptr inbounds [4 x <2 x i64>], [4 x <2 x i64>]* %24, i64 0, i64 %2714
  store <2 x i64> %2713, <2 x i64>* %2715, align 16
  %2716 = add nuw nsw i64 %2714, 1
  %2717 = icmp eq i64 %2716, 4
  br i1 %2717, label %2936, label %7863

2718:                                             ; preds = %2704
  %2719 = sext i32 %2707 to i64
  %2720 = getelementptr inbounds i16, i16* %5, i64 %2719
  %2721 = bitcast i16* %2720 to <2 x i64>*
  %2722 = load <2 x i64>, <2 x i64>* %2721, align 1
  br i1 %2703, label %2759, label %2723

2723:                                             ; preds = %2718
  %2724 = getelementptr inbounds i16, i16* %2720, i64 8
  %2725 = bitcast i16* %2724 to <16 x i8>*
  %2726 = load <16 x i8>, <16 x i8>* %2725, align 1
  %2727 = bitcast <2 x i64> %2722 to <16 x i8>
  %2728 = shufflevector <16 x i8> %2727, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 4, i32 5, i32 8, i32 9, i32 12, i32 13, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2729 = shufflevector <16 x i8> %2726, <16 x i8> undef, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 4, i32 5, i32 8, i32 9, i32 12, i32 13>
  %2730 = shufflevector <16 x i8> %2727, <16 x i8> undef, <16 x i32> <i32 2, i32 3, i32 6, i32 7, i32 10, i32 11, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2731 = shufflevector <16 x i8> %2726, <16 x i8> undef, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 2, i32 3, i32 6, i32 7, i32 10, i32 11, i32 14, i32 15>
  %2732 = shufflevector <16 x i8> %2728, <16 x i8> %2729, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2733 = bitcast <16 x i8> %2732 to <2 x i64>
  %2734 = shufflevector <16 x i8> %2730, <16 x i8> %2731, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2735 = bitcast <16 x i8> %2734 to <2 x i64>
  %2736 = trunc i32 %2707 to i16
  %2737 = add i16 %2736, 2
  %2738 = add i16 %2736, 4
  %2739 = add i16 %2736, 6
  %2740 = add i16 %2736, 8
  %2741 = add i16 %2736, 10
  %2742 = add i16 %2736, 12
  %2743 = add i16 %2736, 14
  %2744 = insertelement <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0>, i16 %2736, i32 0
  %2745 = insertelement <16 x i16> %2744, i16 %2737, i32 1
  %2746 = insertelement <16 x i16> %2745, i16 %2738, i32 2
  %2747 = insertelement <16 x i16> %2746, i16 %2739, i32 3
  %2748 = insertelement <16 x i16> %2747, i16 %2740, i32 4
  %2749 = insertelement <16 x i16> %2748, i16 %2741, i32 5
  %2750 = insertelement <16 x i16> %2749, i16 %2742, i32 6
  %2751 = insertelement <16 x i16> %2750, i16 %2743, i32 7
  %2752 = trunc i32 %2706 to i16
  %2753 = insertelement <16 x i16> undef, i16 %2752, i32 0
  %2754 = shufflevector <16 x i16> %2753, <16 x i16> undef, <16 x i32> zeroinitializer
  %2755 = tail call <16 x i16> @llvm.x86.avx2.pslli.w(<16 x i16> %2754, i32 %6) #8
  %2756 = lshr <16 x i16> %2755, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2757 = bitcast <16 x i16> %2756 to <4 x i64>
  %2758 = and <4 x i64> %2757, <i64 8725857424048159, i64 8725857424048159, i64 8725857424048159, i64 8725857424048159>
  br label %2785

2759:                                             ; preds = %2718
  %2760 = getelementptr inbounds i16, i16* %2720, i64 1
  %2761 = bitcast i16* %2760 to <2 x i64>*
  %2762 = load <2 x i64>, <2 x i64>* %2761, align 1
  %2763 = trunc i32 %2707 to i16
  %2764 = add i16 %2763, 1
  %2765 = add i16 %2763, 2
  %2766 = add i16 %2763, 3
  %2767 = add i16 %2763, 4
  %2768 = add i16 %2763, 5
  %2769 = add i16 %2763, 6
  %2770 = add i16 %2763, 7
  %2771 = insertelement <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0>, i16 %2763, i32 0
  %2772 = insertelement <16 x i16> %2771, i16 %2764, i32 1
  %2773 = insertelement <16 x i16> %2772, i16 %2765, i32 2
  %2774 = insertelement <16 x i16> %2773, i16 %2766, i32 3
  %2775 = insertelement <16 x i16> %2774, i16 %2767, i32 4
  %2776 = insertelement <16 x i16> %2775, i16 %2768, i32 5
  %2777 = insertelement <16 x i16> %2776, i16 %2769, i32 6
  %2778 = insertelement <16 x i16> %2777, i16 %2770, i32 7
  %2779 = trunc i32 %2706 to i16
  %2780 = insertelement <16 x i16> undef, i16 %2779, i32 0
  %2781 = and <16 x i16> %2780, <i16 63, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef>
  %2782 = lshr <16 x i16> %2781, <i16 1, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0>
  %2783 = shufflevector <16 x i16> %2782, <16 x i16> undef, <16 x i32> zeroinitializer
  %2784 = bitcast <16 x i16> %2783 to <4 x i64>
  br label %2785

2785:                                             ; preds = %2759, %2723
  %2786 = phi <16 x i16> [ %2751, %2723 ], [ %2778, %2759 ]
  %2787 = phi <2 x i64> [ %2733, %2723 ], [ %2722, %2759 ]
  %2788 = phi <2 x i64> [ %2735, %2723 ], [ %2762, %2759 ]
  %2789 = phi <4 x i64> [ %2758, %2723 ], [ %2784, %2759 ]
  %2790 = shufflevector <2 x i64> %2787, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %2791 = shufflevector <2 x i64> %2788, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %2792 = bitcast <4 x i64> %2791 to <16 x i16>
  %2793 = bitcast <4 x i64> %2790 to <16 x i16>
  %2794 = sub <16 x i16> %2792, %2793
  %2795 = shl <16 x i16> %2793, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %2796 = or <16 x i16> %2795, <i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16>
  %2797 = bitcast <4 x i64> %2789 to <16 x i16>
  %2798 = mul <16 x i16> %2794, %2797
  %2799 = add <16 x i16> %2798, %2796
  %2800 = lshr <16 x i16> %2799, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %2801 = icmp sgt <16 x i16> %2702, %2786
  %2802 = select <16 x i1> %2801, <16 x i16> %2800, <16 x i16> %2697
  %2803 = bitcast <16 x i16> %2802 to <4 x i64>
  %2804 = shufflevector <4 x i64> %2803, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %2805 = getelementptr inbounds [4 x <2 x i64>], [4 x <2 x i64>]* %24, i64 0, i64 %2705
  store <2 x i64> %2804, <2 x i64>* %2805, align 16
  %2806 = add nsw i32 %2706, %8
  %2807 = add nuw nsw i64 %2705, 1
  %2808 = icmp eq i64 %2807, 4
  br i1 %2808, label %2936, label %2704

2809:                                             ; preds = %2688
  %2810 = insertelement <8 x i32> undef, i32 %2692, i32 0
  %2811 = shufflevector <8 x i32> %2810, <8 x i32> undef, <8 x i32> zeroinitializer
  %2812 = icmp eq i32 %6, 0
  %2813 = bitcast <16 x i16> %2697 to <32 x i8>
  br label %2814

2814:                                             ; preds = %2901, %2809
  %2815 = phi i64 [ 0, %2809 ], [ %2934, %2901 ]
  %2816 = phi i32 [ %8, %2809 ], [ %2933, %2901 ]
  %2817 = ashr i32 %2816, %2691
  %2818 = icmp slt i32 %2817, %2692
  br i1 %2818, label %2828, label %2819

2819:                                             ; preds = %2814
  %2820 = trunc i64 %2815 to i32
  %2821 = icmp slt i32 %2820, 4
  br i1 %2821, label %2822, label %2936

2822:                                             ; preds = %2819
  %2823 = shufflevector <4 x i64> %2698, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %2824 = and i64 %2815, 4294967295
  %2825 = getelementptr inbounds [4 x <2 x i64>], [4 x <2 x i64>]* %24, i64 0, i64 %2824
  store <2 x i64> %2823, <2 x i64>* %2825, align 16
  %2826 = add nuw nsw i64 %2824, 1
  %2827 = icmp eq i64 %2826, 4
  br i1 %2827, label %2936, label %7873

2828:                                             ; preds = %2814
  %2829 = sext i32 %2817 to i64
  %2830 = getelementptr inbounds i16, i16* %5, i64 %2829
  %2831 = bitcast i16* %2830 to <8 x i16>*
  %2832 = load <8 x i16>, <8 x i16>* %2831, align 1
  %2833 = zext <8 x i16> %2832 to <8 x i32>
  br i1 %2812, label %2871, label %2834

2834:                                             ; preds = %2828
  %2835 = shufflevector <8 x i32> %2833, <8 x i32> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 1, i32 3, i32 5, i32 7>
  %2836 = bitcast <8 x i32> %2835 to <4 x i64>
  %2837 = shufflevector <4 x i64> %2836, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %2838 = getelementptr inbounds i16, i16* %2830, i64 8
  %2839 = bitcast i16* %2838 to <8 x i16>*
  %2840 = load <8 x i16>, <8 x i16>* %2839, align 1
  %2841 = zext <8 x i16> %2840 to <8 x i32>
  %2842 = shufflevector <8 x i32> %2841, <8 x i32> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 1, i32 3, i32 5, i32 7>
  %2843 = bitcast <8 x i32> %2842 to <4 x i64>
  %2844 = shufflevector <4 x i64> %2843, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %2845 = shufflevector <4 x i64> %2836, <4 x i64> %2843, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %2846 = shufflevector <2 x i64> %2837, <2 x i64> %2844, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2847 = insertelement <4 x i32> undef, i32 %2817, i32 0
  %2848 = shufflevector <4 x i32> %2847, <4 x i32> undef, <4 x i32> zeroinitializer
  %2849 = add nsw <4 x i32> %2848, <i32 2, i32 4, i32 6, i32 8>
  %2850 = add nsw i32 %2817, 10
  %2851 = add nsw i32 %2817, 12
  %2852 = add nsw i32 %2817, 14
  %2853 = insertelement <8 x i32> undef, i32 %2817, i32 0
  %2854 = extractelement <4 x i32> %2849, i32 0
  %2855 = insertelement <8 x i32> %2853, i32 %2854, i32 1
  %2856 = extractelement <4 x i32> %2849, i32 1
  %2857 = insertelement <8 x i32> %2855, i32 %2856, i32 2
  %2858 = extractelement <4 x i32> %2849, i32 2
  %2859 = insertelement <8 x i32> %2857, i32 %2858, i32 3
  %2860 = extractelement <4 x i32> %2849, i32 3
  %2861 = insertelement <8 x i32> %2859, i32 %2860, i32 4
  %2862 = insertelement <8 x i32> %2861, i32 %2850, i32 5
  %2863 = insertelement <8 x i32> %2862, i32 %2851, i32 6
  %2864 = insertelement <8 x i32> %2863, i32 %2852, i32 7
  %2865 = insertelement <8 x i32> undef, i32 %2816, i32 0
  %2866 = shufflevector <8 x i32> %2865, <8 x i32> undef, <8 x i32> zeroinitializer
  %2867 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %2866, i32 %6) #8
  %2868 = lshr <8 x i32> %2867, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %2869 = bitcast <8 x i32> %2868 to <4 x i64>
  %2870 = and <4 x i64> %2869, <i64 133143986207, i64 133143986207, i64 133143986207, i64 133143986207>
  br label %2901

2871:                                             ; preds = %2828
  %2872 = getelementptr inbounds i16, i16* %2830, i64 1
  %2873 = bitcast i16* %2872 to <8 x i16>*
  %2874 = load <8 x i16>, <8 x i16>* %2873, align 1
  %2875 = zext <8 x i16> %2874 to <8 x i32>
  %2876 = bitcast <8 x i32> %2875 to <4 x i64>
  %2877 = bitcast <8 x i32> %2833 to <4 x i64>
  %2878 = insertelement <4 x i32> undef, i32 %2817, i32 0
  %2879 = shufflevector <4 x i32> %2878, <4 x i32> undef, <4 x i32> zeroinitializer
  %2880 = add nsw <4 x i32> %2879, <i32 1, i32 2, i32 3, i32 4>
  %2881 = add nsw i32 %2817, 5
  %2882 = add nsw i32 %2817, 6
  %2883 = add nsw i32 %2817, 7
  %2884 = insertelement <8 x i32> undef, i32 %2817, i32 0
  %2885 = extractelement <4 x i32> %2880, i32 0
  %2886 = insertelement <8 x i32> %2884, i32 %2885, i32 1
  %2887 = extractelement <4 x i32> %2880, i32 1
  %2888 = insertelement <8 x i32> %2886, i32 %2887, i32 2
  %2889 = extractelement <4 x i32> %2880, i32 2
  %2890 = insertelement <8 x i32> %2888, i32 %2889, i32 3
  %2891 = extractelement <4 x i32> %2880, i32 3
  %2892 = insertelement <8 x i32> %2890, i32 %2891, i32 4
  %2893 = insertelement <8 x i32> %2892, i32 %2881, i32 5
  %2894 = insertelement <8 x i32> %2893, i32 %2882, i32 6
  %2895 = insertelement <8 x i32> %2894, i32 %2883, i32 7
  %2896 = insertelement <8 x i32> undef, i32 %2816, i32 0
  %2897 = and <8 x i32> %2896, <i32 63, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2898 = lshr <8 x i32> %2897, <i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>
  %2899 = shufflevector <8 x i32> %2898, <8 x i32> undef, <8 x i32> zeroinitializer
  %2900 = bitcast <8 x i32> %2899 to <4 x i64>
  br label %2901

2901:                                             ; preds = %2871, %2834
  %2902 = phi <4 x i64> [ %2845, %2834 ], [ %2877, %2871 ]
  %2903 = phi <4 x i64> [ %2846, %2834 ], [ %2876, %2871 ]
  %2904 = phi <8 x i32> [ %2864, %2834 ], [ %2895, %2871 ]
  %2905 = phi <4 x i64> [ %2870, %2834 ], [ %2900, %2871 ]
  %2906 = bitcast <4 x i64> %2903 to <8 x i32>
  %2907 = bitcast <4 x i64> %2902 to <8 x i32>
  %2908 = sub <8 x i32> %2906, %2907
  %2909 = shl <8 x i32> %2907, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %2910 = or <8 x i32> %2909, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %2911 = bitcast <4 x i64> %2905 to <8 x i32>
  %2912 = mul <8 x i32> %2908, %2911
  %2913 = add <8 x i32> %2912, %2910
  %2914 = lshr <8 x i32> %2913, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %2915 = bitcast <8 x i32> %2914 to <4 x i64>
  %2916 = shufflevector <4 x i64> %2915, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %2917 = shufflevector <2 x i64> %2916, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %2918 = bitcast <4 x i64> %2917 to <8 x i32>
  %2919 = tail call <16 x i16> @llvm.x86.avx2.packusdw(<8 x i32> %2914, <8 x i32> %2918) #8
  %2920 = icmp sgt <8 x i32> %2811, %2904
  %2921 = sext <8 x i1> %2920 to <8 x i32>
  %2922 = bitcast <8 x i32> %2921 to <4 x i64>
  %2923 = shufflevector <4 x i64> %2922, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %2924 = shufflevector <2 x i64> %2923, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %2925 = bitcast <4 x i64> %2924 to <8 x i32>
  %2926 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %2921, <8 x i32> %2925) #8
  %2927 = bitcast <16 x i16> %2919 to <32 x i8>
  %2928 = bitcast <16 x i16> %2926 to <32 x i8>
  %2929 = tail call <32 x i8> @llvm.x86.avx2.pblendvb(<32 x i8> %2813, <32 x i8> %2927, <32 x i8> %2928) #8
  %2930 = bitcast <32 x i8> %2929 to <4 x i64>
  %2931 = shufflevector <4 x i64> %2930, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %2932 = getelementptr inbounds [4 x <2 x i64>], [4 x <2 x i64>]* %24, i64 0, i64 %2815
  store <2 x i64> %2931, <2 x i64>* %2932, align 16
  %2933 = add nsw i32 %2816, %8
  %2934 = add nuw nsw i64 %2815, 1
  %2935 = icmp eq i64 %2934, 4
  br i1 %2935, label %2936, label %2814

2936:                                             ; preds = %2901, %2822, %7873, %7877, %7881, %2785, %2712, %7863, %7867, %7871, %2709, %2819
  %2937 = getelementptr inbounds [4 x <2 x i64>], [4 x <2 x i64>]* %24, i64 0, i64 1
  %2938 = getelementptr inbounds [4 x <2 x i64>], [4 x <2 x i64>]* %24, i64 0, i64 2
  %2939 = getelementptr inbounds [4 x <2 x i64>], [4 x <2 x i64>]* %24, i64 0, i64 3
  %2940 = bitcast [4 x <2 x i64>]* %24 to <8 x i16>*
  %2941 = load <8 x i16>, <8 x i16>* %2940, align 16
  %2942 = bitcast <2 x i64>* %2937 to <8 x i16>*
  %2943 = load <8 x i16>, <8 x i16>* %2942, align 16
  %2944 = shufflevector <8 x i16> %2941, <8 x i16> %2943, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %2945 = bitcast <2 x i64>* %2938 to <8 x i16>*
  %2946 = load <8 x i16>, <8 x i16>* %2945, align 16
  %2947 = bitcast <2 x i64>* %2939 to <8 x i16>*
  %2948 = load <8 x i16>, <8 x i16>* %2947, align 16
  %2949 = shufflevector <8 x i16> %2946, <8 x i16> %2948, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %2950 = bitcast <8 x i16> %2944 to <4 x i32>
  %2951 = bitcast <8 x i16> %2949 to <4 x i32>
  %2952 = shufflevector <4 x i32> %2950, <4 x i32> %2951, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %2953 = bitcast <4 x i32> %2952 to <2 x i64>
  %2954 = shufflevector <4 x i32> %2950, <4 x i32> %2951, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %2955 = bitcast <4 x i32> %2954 to <2 x i64>
  %2956 = shufflevector <8 x i16> %2941, <8 x i16> %2943, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %2957 = shufflevector <8 x i16> %2946, <8 x i16> %2948, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %2958 = bitcast <8 x i16> %2956 to <4 x i32>
  %2959 = bitcast <8 x i16> %2957 to <4 x i32>
  %2960 = shufflevector <4 x i32> %2958, <4 x i32> %2959, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %2961 = bitcast <4 x i32> %2960 to <2 x i64>
  %2962 = shufflevector <4 x i32> %2958, <4 x i32> %2959, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %2963 = bitcast <4 x i32> %2962 to <2 x i64>
  %2964 = extractelement <2 x i64> %2953, i32 0
  %2965 = bitcast i16* %0 to i64*
  store i64 %2964, i64* %2965, align 1
  %2966 = getelementptr inbounds i16, i16* %0, i64 %1
  %2967 = extractelement <2 x i64> %2953, i32 1
  %2968 = bitcast i16* %2966 to i64*
  store i64 %2967, i64* %2968, align 1
  %2969 = shl nsw i64 %1, 1
  %2970 = getelementptr inbounds i16, i16* %0, i64 %2969
  %2971 = extractelement <2 x i64> %2955, i32 0
  %2972 = bitcast i16* %2970 to i64*
  store i64 %2971, i64* %2972, align 1
  %2973 = mul nsw i64 %1, 3
  %2974 = getelementptr inbounds i16, i16* %0, i64 %2973
  %2975 = extractelement <2 x i64> %2955, i32 1
  %2976 = bitcast i16* %2974 to i64*
  store i64 %2975, i64* %2976, align 1
  %2977 = shl nsw i64 %1, 2
  %2978 = getelementptr inbounds i16, i16* %0, i64 %2977
  %2979 = extractelement <2 x i64> %2961, i32 0
  %2980 = bitcast i16* %2978 to i64*
  store i64 %2979, i64* %2980, align 1
  %2981 = mul nsw i64 %1, 5
  %2982 = getelementptr inbounds i16, i16* %0, i64 %2981
  %2983 = extractelement <2 x i64> %2961, i32 1
  %2984 = bitcast i16* %2982 to i64*
  store i64 %2983, i64* %2984, align 1
  %2985 = mul nsw i64 %1, 6
  %2986 = getelementptr inbounds i16, i16* %0, i64 %2985
  %2987 = extractelement <2 x i64> %2963, i32 0
  %2988 = bitcast i16* %2986 to i64*
  store i64 %2987, i64* %2988, align 1
  %2989 = mul nsw i64 %1, 7
  %2990 = getelementptr inbounds i16, i16* %0, i64 %2989
  %2991 = extractelement <2 x i64> %2963, i32 1
  %2992 = bitcast i16* %2990 to i64*
  store i64 %2991, i64* %2992, align 1
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %2689) #8
  br label %7784

2993:                                             ; preds = %2683
  %2994 = bitcast [8 x <4 x i64>]* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %2994) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %2994, i8 -86, i64 256, i1 false) #8
  %2995 = icmp slt i32 %9, 12
  %2996 = getelementptr inbounds i16, i16* %5, i64 23
  %2997 = load i16, i16* %2996, align 2
  %2998 = insertelement <16 x i16> undef, i16 %2997, i32 0
  %2999 = shufflevector <16 x i16> %2998, <16 x i16> undef, <16 x i32> zeroinitializer
  br i1 %2995, label %3000, label %3072

3000:                                             ; preds = %2993, %3014
  %3001 = phi i64 [ %3070, %3014 ], [ 0, %2993 ]
  %3002 = phi i32 [ %3069, %3014 ], [ %8, %2993 ]
  %3003 = ashr i32 %3002, 6
  %3004 = icmp slt i32 %3002, 1472
  br i1 %3004, label %3014, label %3005

3005:                                             ; preds = %3000
  %3006 = trunc i64 %3001 to i32
  %3007 = icmp slt i32 %3006, 8
  br i1 %3007, label %3008, label %3177

3008:                                             ; preds = %3005
  %3009 = and i64 %3001, 4294967295
  %3010 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %13, i64 0, i64 %3009
  %3011 = bitcast <4 x i64>* %3010 to <16 x i16>*
  store <16 x i16> %2999, <16 x i16>* %3011, align 32
  %3012 = add nuw nsw i64 %3009, 1
  %3013 = icmp eq i64 %3012, 8
  br i1 %3013, label %3177, label %7883

3014:                                             ; preds = %3000
  %3015 = trunc i32 %3002 to i16
  %3016 = insertelement <16 x i16> undef, i16 %3015, i32 0
  %3017 = and <16 x i16> %3016, <i16 63, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef>
  %3018 = lshr <16 x i16> %3017, <i16 1, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0>
  %3019 = shufflevector <16 x i16> %3018, <16 x i16> undef, <16 x i32> zeroinitializer
  %3020 = sext i32 %3003 to i64
  %3021 = getelementptr inbounds i16, i16* %5, i64 %3020
  %3022 = bitcast i16* %3021 to <16 x i16>*
  %3023 = load <16 x i16>, <16 x i16>* %3022, align 1
  %3024 = getelementptr inbounds i16, i16* %3021, i64 1
  %3025 = bitcast i16* %3024 to <16 x i16>*
  %3026 = load <16 x i16>, <16 x i16>* %3025, align 1
  %3027 = sub <16 x i16> %3026, %3023
  %3028 = shl <16 x i16> %3023, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %3029 = or <16 x i16> %3028, <i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16>
  %3030 = mul <16 x i16> %3027, %3019
  %3031 = add <16 x i16> %3030, %3029
  %3032 = lshr <16 x i16> %3031, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %3033 = trunc i32 %3003 to i16
  %3034 = add i16 %3033, 1
  %3035 = add i16 %3033, 2
  %3036 = add i16 %3033, 3
  %3037 = add i16 %3033, 4
  %3038 = add i16 %3033, 5
  %3039 = add i16 %3033, 6
  %3040 = add i16 %3033, 7
  %3041 = add i16 %3033, 8
  %3042 = add i16 %3033, 9
  %3043 = add i16 %3033, 10
  %3044 = add i16 %3033, 11
  %3045 = add i16 %3033, 12
  %3046 = add i16 %3033, 13
  %3047 = add i16 %3033, 14
  %3048 = add i16 %3033, 15
  %3049 = insertelement <16 x i16> undef, i16 %3033, i32 0
  %3050 = insertelement <16 x i16> %3049, i16 %3034, i32 1
  %3051 = insertelement <16 x i16> %3050, i16 %3035, i32 2
  %3052 = insertelement <16 x i16> %3051, i16 %3036, i32 3
  %3053 = insertelement <16 x i16> %3052, i16 %3037, i32 4
  %3054 = insertelement <16 x i16> %3053, i16 %3038, i32 5
  %3055 = insertelement <16 x i16> %3054, i16 %3039, i32 6
  %3056 = insertelement <16 x i16> %3055, i16 %3040, i32 7
  %3057 = insertelement <16 x i16> %3056, i16 %3041, i32 8
  %3058 = insertelement <16 x i16> %3057, i16 %3042, i32 9
  %3059 = insertelement <16 x i16> %3058, i16 %3043, i32 10
  %3060 = insertelement <16 x i16> %3059, i16 %3044, i32 11
  %3061 = insertelement <16 x i16> %3060, i16 %3045, i32 12
  %3062 = insertelement <16 x i16> %3061, i16 %3046, i32 13
  %3063 = insertelement <16 x i16> %3062, i16 %3047, i32 14
  %3064 = insertelement <16 x i16> %3063, i16 %3048, i32 15
  %3065 = icmp slt <16 x i16> %3064, <i16 23, i16 23, i16 23, i16 23, i16 23, i16 23, i16 23, i16 23, i16 23, i16 23, i16 23, i16 23, i16 23, i16 23, i16 23, i16 23>
  %3066 = select <16 x i1> %3065, <16 x i16> %3032, <16 x i16> %2999
  %3067 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %13, i64 0, i64 %3001
  %3068 = bitcast <4 x i64>* %3067 to <16 x i16>*
  store <16 x i16> %3066, <16 x i16>* %3068, align 32
  %3069 = add nsw i32 %3002, %8
  %3070 = add nuw nsw i64 %3001, 1
  %3071 = icmp eq i64 %3070, 8
  br i1 %3071, label %3177, label %3000

3072:                                             ; preds = %2993, %3133
  %3073 = phi i64 [ %3175, %3133 ], [ 0, %2993 ]
  %3074 = phi i32 [ %3174, %3133 ], [ %8, %2993 ]
  %3075 = ashr i32 %3074, 6
  %3076 = icmp slt i32 %3074, 1472
  br i1 %3076, label %3086, label %3077

3077:                                             ; preds = %3072
  %3078 = trunc i64 %3073 to i32
  %3079 = icmp slt i32 %3078, 8
  br i1 %3079, label %3080, label %3177

3080:                                             ; preds = %3077
  %3081 = and i64 %3073, 4294967295
  %3082 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %13, i64 0, i64 %3081
  %3083 = bitcast <4 x i64>* %3082 to <16 x i16>*
  store <16 x i16> %2999, <16 x i16>* %3083, align 32
  %3084 = add nuw nsw i64 %3081, 1
  %3085 = icmp eq i64 %3084, 8
  br i1 %3085, label %3177, label %7916

3086:                                             ; preds = %3072
  %3087 = insertelement <8 x i32> undef, i32 %3074, i32 0
  %3088 = and <8 x i32> %3087, <i32 63, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3089 = lshr <8 x i32> %3088, <i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>
  %3090 = shufflevector <8 x i32> %3089, <8 x i32> undef, <8 x i32> zeroinitializer
  %3091 = sext i32 %3075 to i64
  %3092 = getelementptr inbounds i16, i16* %5, i64 %3091
  %3093 = bitcast i16* %3092 to <8 x i16>*
  %3094 = load <8 x i16>, <8 x i16>* %3093, align 1
  %3095 = zext <8 x i16> %3094 to <8 x i32>
  %3096 = getelementptr inbounds i16, i16* %3092, i64 1
  %3097 = bitcast i16* %3096 to <8 x i16>*
  %3098 = load <8 x i16>, <8 x i16>* %3097, align 1
  %3099 = zext <8 x i16> %3098 to <8 x i32>
  %3100 = sub nsw <8 x i32> %3099, %3095
  %3101 = shl nuw nsw <8 x i32> %3095, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %3102 = or <8 x i32> %3101, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %3103 = mul <8 x i32> %3100, %3090
  %3104 = add <8 x i32> %3103, %3102
  %3105 = lshr <8 x i32> %3104, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %3106 = bitcast <8 x i32> %3105 to <4 x i64>
  %3107 = shufflevector <4 x i64> %3106, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %3108 = shufflevector <2 x i64> %3107, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %3109 = bitcast <4 x i64> %3108 to <8 x i32>
  %3110 = tail call <16 x i16> @llvm.x86.avx2.packusdw(<8 x i32> %3105, <8 x i32> %3109) #8
  %3111 = bitcast <16 x i16> %3110 to <4 x i64>
  %3112 = icmp slt i32 %3074, 960
  br i1 %3112, label %3113, label %3133

3113:                                             ; preds = %3086
  %3114 = getelementptr inbounds i16, i16* %3092, i64 8
  %3115 = bitcast i16* %3114 to <8 x i16>*
  %3116 = load <8 x i16>, <8 x i16>* %3115, align 1
  %3117 = zext <8 x i16> %3116 to <8 x i32>
  %3118 = getelementptr inbounds i16, i16* %3092, i64 9
  %3119 = bitcast i16* %3118 to <8 x i16>*
  %3120 = load <8 x i16>, <8 x i16>* %3119, align 1
  %3121 = zext <8 x i16> %3120 to <8 x i32>
  %3122 = sub nsw <8 x i32> %3121, %3117
  %3123 = shl nuw nsw <8 x i32> %3117, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %3124 = or <8 x i32> %3123, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %3125 = mul <8 x i32> %3122, %3090
  %3126 = add <8 x i32> %3125, %3124
  %3127 = lshr <8 x i32> %3126, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %3128 = bitcast <8 x i32> %3127 to <4 x i64>
  %3129 = shufflevector <4 x i64> %3128, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %3130 = shufflevector <2 x i64> %3129, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %3131 = bitcast <4 x i64> %3130 to <8 x i32>
  %3132 = tail call <16 x i16> @llvm.x86.avx2.packusdw(<8 x i32> %3127, <8 x i32> %3131) #8
  br label %3133

3133:                                             ; preds = %3113, %3086
  %3134 = phi <16 x i16> [ %3132, %3113 ], [ %2999, %3086 ]
  %3135 = bitcast <16 x i16> %3134 to <4 x i64>
  %3136 = shufflevector <4 x i64> %3111, <4 x i64> %3135, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %3137 = trunc i32 %3075 to i16
  %3138 = add i16 %3137, 1
  %3139 = add i16 %3137, 2
  %3140 = add i16 %3137, 3
  %3141 = add i16 %3137, 4
  %3142 = add i16 %3137, 5
  %3143 = add i16 %3137, 6
  %3144 = add i16 %3137, 7
  %3145 = add i16 %3137, 8
  %3146 = add i16 %3137, 9
  %3147 = add i16 %3137, 10
  %3148 = add i16 %3137, 11
  %3149 = add i16 %3137, 12
  %3150 = add i16 %3137, 13
  %3151 = add i16 %3137, 14
  %3152 = add i16 %3137, 15
  %3153 = insertelement <16 x i16> undef, i16 %3137, i32 0
  %3154 = insertelement <16 x i16> %3153, i16 %3138, i32 1
  %3155 = insertelement <16 x i16> %3154, i16 %3139, i32 2
  %3156 = insertelement <16 x i16> %3155, i16 %3140, i32 3
  %3157 = insertelement <16 x i16> %3156, i16 %3141, i32 4
  %3158 = insertelement <16 x i16> %3157, i16 %3142, i32 5
  %3159 = insertelement <16 x i16> %3158, i16 %3143, i32 6
  %3160 = insertelement <16 x i16> %3159, i16 %3144, i32 7
  %3161 = insertelement <16 x i16> %3160, i16 %3145, i32 8
  %3162 = insertelement <16 x i16> %3161, i16 %3146, i32 9
  %3163 = insertelement <16 x i16> %3162, i16 %3147, i32 10
  %3164 = insertelement <16 x i16> %3163, i16 %3148, i32 11
  %3165 = insertelement <16 x i16> %3164, i16 %3149, i32 12
  %3166 = insertelement <16 x i16> %3165, i16 %3150, i32 13
  %3167 = insertelement <16 x i16> %3166, i16 %3151, i32 14
  %3168 = insertelement <16 x i16> %3167, i16 %3152, i32 15
  %3169 = icmp slt <16 x i16> %3168, <i16 23, i16 23, i16 23, i16 23, i16 23, i16 23, i16 23, i16 23, i16 23, i16 23, i16 23, i16 23, i16 23, i16 23, i16 23, i16 23>
  %3170 = bitcast <4 x i64> %3136 to <16 x i16>
  %3171 = select <16 x i1> %3169, <16 x i16> %3170, <16 x i16> %2999
  %3172 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %13, i64 0, i64 %3073
  %3173 = bitcast <4 x i64>* %3172 to <16 x i16>*
  store <16 x i16> %3171, <16 x i16>* %3173, align 32
  %3174 = add nsw i32 %3074, %8
  %3175 = add nuw nsw i64 %3073, 1
  %3176 = icmp eq i64 %3175, 8
  br i1 %3176, label %3177, label %3072

3177:                                             ; preds = %3133, %3080, %7916, %7921, %7926, %7931, %7936, %7941, %7946, %3014, %3008, %7883, %7888, %7893, %7898, %7903, %7908, %7913, %3005, %3077
  %3178 = bitcast [8 x <4 x i64>]* %13 to <16 x i16>*
  %3179 = load <16 x i16>, <16 x i16>* %3178, align 32
  %3180 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %13, i64 0, i64 1
  %3181 = bitcast <4 x i64>* %3180 to <16 x i16>*
  %3182 = load <16 x i16>, <16 x i16>* %3181, align 32
  %3183 = shufflevector <16 x i16> %3179, <16 x i16> %3182, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %3184 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %13, i64 0, i64 2
  %3185 = bitcast <4 x i64>* %3184 to <16 x i16>*
  %3186 = load <16 x i16>, <16 x i16>* %3185, align 32
  %3187 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %13, i64 0, i64 3
  %3188 = bitcast <4 x i64>* %3187 to <16 x i16>*
  %3189 = load <16 x i16>, <16 x i16>* %3188, align 32
  %3190 = shufflevector <16 x i16> %3186, <16 x i16> %3189, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %3191 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %13, i64 0, i64 4
  %3192 = bitcast <4 x i64>* %3191 to <16 x i16>*
  %3193 = load <16 x i16>, <16 x i16>* %3192, align 32
  %3194 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %13, i64 0, i64 5
  %3195 = bitcast <4 x i64>* %3194 to <16 x i16>*
  %3196 = load <16 x i16>, <16 x i16>* %3195, align 32
  %3197 = shufflevector <16 x i16> %3193, <16 x i16> %3196, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %3198 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %13, i64 0, i64 6
  %3199 = bitcast <4 x i64>* %3198 to <16 x i16>*
  %3200 = load <16 x i16>, <16 x i16>* %3199, align 32
  %3201 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %13, i64 0, i64 7
  %3202 = bitcast <4 x i64>* %3201 to <16 x i16>*
  %3203 = load <16 x i16>, <16 x i16>* %3202, align 32
  %3204 = shufflevector <16 x i16> %3200, <16 x i16> %3203, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %3205 = bitcast <16 x i16> %3183 to <8 x i32>
  %3206 = bitcast <16 x i16> %3190 to <8 x i32>
  %3207 = shufflevector <8 x i32> %3205, <8 x i32> %3206, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %3208 = bitcast <8 x i32> %3207 to <4 x i64>
  %3209 = bitcast <16 x i16> %3197 to <8 x i32>
  %3210 = bitcast <16 x i16> %3204 to <8 x i32>
  %3211 = shufflevector <8 x i32> %3209, <8 x i32> %3210, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %3212 = bitcast <8 x i32> %3211 to <4 x i64>
  %3213 = shufflevector <4 x i64> %3208, <4 x i64> %3212, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %3214 = shufflevector <4 x i64> %3208, <4 x i64> %3212, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %3215 = shufflevector <8 x i32> %3205, <8 x i32> %3206, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %3216 = bitcast <8 x i32> %3215 to <4 x i64>
  %3217 = shufflevector <8 x i32> %3209, <8 x i32> %3210, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %3218 = bitcast <8 x i32> %3217 to <4 x i64>
  %3219 = shufflevector <4 x i64> %3216, <4 x i64> %3218, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %3220 = shufflevector <4 x i64> %3216, <4 x i64> %3218, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %3221 = shufflevector <16 x i16> %3179, <16 x i16> %3182, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %3222 = shufflevector <16 x i16> %3186, <16 x i16> %3189, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %3223 = shufflevector <16 x i16> %3193, <16 x i16> %3196, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %3224 = shufflevector <16 x i16> %3200, <16 x i16> %3203, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %3225 = bitcast <16 x i16> %3221 to <8 x i32>
  %3226 = bitcast <16 x i16> %3222 to <8 x i32>
  %3227 = shufflevector <8 x i32> %3225, <8 x i32> %3226, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %3228 = bitcast <8 x i32> %3227 to <4 x i64>
  %3229 = bitcast <16 x i16> %3223 to <8 x i32>
  %3230 = bitcast <16 x i16> %3224 to <8 x i32>
  %3231 = shufflevector <8 x i32> %3229, <8 x i32> %3230, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %3232 = bitcast <8 x i32> %3231 to <4 x i64>
  %3233 = shufflevector <4 x i64> %3228, <4 x i64> %3232, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %3234 = shufflevector <4 x i64> %3228, <4 x i64> %3232, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %3235 = shufflevector <8 x i32> %3225, <8 x i32> %3226, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %3236 = bitcast <8 x i32> %3235 to <4 x i64>
  %3237 = shufflevector <8 x i32> %3229, <8 x i32> %3230, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %3238 = bitcast <8 x i32> %3237 to <4 x i64>
  %3239 = shufflevector <4 x i64> %3236, <4 x i64> %3238, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %3240 = shufflevector <4 x i64> %3236, <4 x i64> %3238, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %3241 = bitcast i16* %0 to <2 x i64>*
  %3242 = shufflevector <4 x i64> %3213, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  store <2 x i64> %3242, <2 x i64>* %3241, align 1
  %3243 = getelementptr inbounds i16, i16* %0, i64 %1
  %3244 = bitcast i16* %3243 to <2 x i64>*
  %3245 = shufflevector <4 x i64> %3214, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  store <2 x i64> %3245, <2 x i64>* %3244, align 1
  %3246 = shl nsw i64 %1, 1
  %3247 = getelementptr inbounds i16, i16* %0, i64 %3246
  %3248 = bitcast i16* %3247 to <2 x i64>*
  %3249 = shufflevector <4 x i64> %3219, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  store <2 x i64> %3249, <2 x i64>* %3248, align 1
  %3250 = mul nsw i64 %1, 3
  %3251 = getelementptr inbounds i16, i16* %0, i64 %3250
  %3252 = bitcast i16* %3251 to <2 x i64>*
  %3253 = shufflevector <4 x i64> %3220, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  store <2 x i64> %3253, <2 x i64>* %3252, align 1
  %3254 = shl nsw i64 %1, 2
  %3255 = getelementptr inbounds i16, i16* %0, i64 %3254
  %3256 = bitcast i16* %3255 to <2 x i64>*
  %3257 = shufflevector <4 x i64> %3233, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  store <2 x i64> %3257, <2 x i64>* %3256, align 1
  %3258 = mul nsw i64 %1, 5
  %3259 = getelementptr inbounds i16, i16* %0, i64 %3258
  %3260 = bitcast i16* %3259 to <2 x i64>*
  %3261 = shufflevector <4 x i64> %3234, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  store <2 x i64> %3261, <2 x i64>* %3260, align 1
  %3262 = mul nsw i64 %1, 6
  %3263 = getelementptr inbounds i16, i16* %0, i64 %3262
  %3264 = bitcast i16* %3263 to <2 x i64>*
  %3265 = shufflevector <4 x i64> %3239, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  store <2 x i64> %3265, <2 x i64>* %3264, align 1
  %3266 = mul nsw i64 %1, 7
  %3267 = getelementptr inbounds i16, i16* %0, i64 %3266
  %3268 = bitcast i16* %3267 to <2 x i64>*
  %3269 = shufflevector <4 x i64> %3240, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  store <2 x i64> %3269, <2 x i64>* %3268, align 1
  %3270 = shl nsw i64 %1, 3
  %3271 = getelementptr inbounds i16, i16* %0, i64 %3270
  %3272 = bitcast i16* %3271 to <2 x i64>*
  %3273 = shufflevector <4 x i64> %3213, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  store <2 x i64> %3273, <2 x i64>* %3272, align 1
  %3274 = mul nsw i64 %1, 9
  %3275 = getelementptr inbounds i16, i16* %0, i64 %3274
  %3276 = bitcast i16* %3275 to <2 x i64>*
  %3277 = shufflevector <4 x i64> %3214, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  store <2 x i64> %3277, <2 x i64>* %3276, align 1
  %3278 = mul nsw i64 %1, 10
  %3279 = getelementptr inbounds i16, i16* %0, i64 %3278
  %3280 = bitcast i16* %3279 to <2 x i64>*
  %3281 = shufflevector <4 x i64> %3219, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  store <2 x i64> %3281, <2 x i64>* %3280, align 1
  %3282 = mul nsw i64 %1, 11
  %3283 = getelementptr inbounds i16, i16* %0, i64 %3282
  %3284 = bitcast i16* %3283 to <2 x i64>*
  %3285 = shufflevector <4 x i64> %3220, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  store <2 x i64> %3285, <2 x i64>* %3284, align 1
  %3286 = mul nsw i64 %1, 12
  %3287 = getelementptr inbounds i16, i16* %0, i64 %3286
  %3288 = bitcast i16* %3287 to <2 x i64>*
  %3289 = shufflevector <4 x i64> %3233, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  store <2 x i64> %3289, <2 x i64>* %3288, align 1
  %3290 = mul nsw i64 %1, 13
  %3291 = getelementptr inbounds i16, i16* %0, i64 %3290
  %3292 = bitcast i16* %3291 to <2 x i64>*
  %3293 = shufflevector <4 x i64> %3234, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  store <2 x i64> %3293, <2 x i64>* %3292, align 1
  %3294 = mul nsw i64 %1, 14
  %3295 = getelementptr inbounds i16, i16* %0, i64 %3294
  %3296 = bitcast i16* %3295 to <2 x i64>*
  %3297 = shufflevector <4 x i64> %3239, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  store <2 x i64> %3297, <2 x i64>* %3296, align 1
  %3298 = mul nsw i64 %1, 15
  %3299 = getelementptr inbounds i16, i16* %0, i64 %3298
  %3300 = bitcast i16* %3299 to <2 x i64>*
  %3301 = shufflevector <4 x i64> %3240, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  store <2 x i64> %3301, <2 x i64>* %3300, align 1
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %2994) #8
  br label %7784

3302:                                             ; preds = %2683
  %3303 = bitcast [32 x <4 x i64>]* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %3303) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %3303, i8 -86, i64 1024, i1 false) #8
  %3304 = bitcast [32 x <4 x i64>]* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %3304) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %3304, i8 -86, i64 1024, i1 false) #8
  %3305 = icmp slt i32 %9, 12
  %3306 = getelementptr inbounds i16, i16* %5, i64 47
  %3307 = load i16, i16* %3306, align 2
  %3308 = insertelement <16 x i16> undef, i16 %3307, i32 0
  %3309 = shufflevector <16 x i16> %3308, <16 x i16> undef, <16 x i32> zeroinitializer
  br i1 %3305, label %3310, label %3478

3310:                                             ; preds = %3302, %3473
  %3311 = phi i64 [ %3476, %3473 ], [ 0, %3302 ]
  %3312 = phi i32 [ %3475, %3473 ], [ %8, %3302 ]
  %3313 = ashr i32 %3312, 6
  %3314 = icmp slt i32 %3312, 3008
  br i1 %3314, label %3366, label %3315

3315:                                             ; preds = %3310
  %3316 = trunc i64 %3311 to i32
  %3317 = icmp slt i32 %3316, 16
  br i1 %3317, label %3319, label %3318

3318:                                             ; preds = %3679, %3505, %3508, %3473, %3336, %3339, %3485, %3315
  br label %3686

3319:                                             ; preds = %3315
  %3320 = and i64 %3311, 4294967295
  %3321 = sub nsw i64 0, %3311
  %3322 = sub nsw i64 15, %3311
  %3323 = and i64 %3321, 3
  %3324 = icmp eq i64 %3323, 0
  br i1 %3324, label %3336, label %3325

3325:                                             ; preds = %3319, %3325
  %3326 = phi i64 [ %3333, %3325 ], [ %3320, %3319 ]
  %3327 = phi i64 [ %3334, %3325 ], [ %3323, %3319 ]
  %3328 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %16, i64 0, i64 %3326
  %3329 = bitcast <4 x i64>* %3328 to <16 x i16>*
  store <16 x i16> %3309, <16 x i16>* %3329, align 32
  %3330 = add nuw nsw i64 %3326, 16
  %3331 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %16, i64 0, i64 %3330
  %3332 = bitcast <4 x i64>* %3331 to <16 x i16>*
  store <16 x i16> %3309, <16 x i16>* %3332, align 32
  %3333 = add nuw nsw i64 %3326, 1
  %3334 = add i64 %3327, -1
  %3335 = icmp eq i64 %3334, 0
  br i1 %3335, label %3336, label %3325, !llvm.loop !21

3336:                                             ; preds = %3325, %3319
  %3337 = phi i64 [ %3320, %3319 ], [ %3333, %3325 ]
  %3338 = icmp ult i64 %3322, 3
  br i1 %3338, label %3318, label %3339

3339:                                             ; preds = %3336, %3339
  %3340 = phi i64 [ %3364, %3339 ], [ %3337, %3336 ]
  %3341 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %16, i64 0, i64 %3340
  %3342 = bitcast <4 x i64>* %3341 to <16 x i16>*
  store <16 x i16> %3309, <16 x i16>* %3342, align 32
  %3343 = add nuw nsw i64 %3340, 16
  %3344 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %16, i64 0, i64 %3343
  %3345 = bitcast <4 x i64>* %3344 to <16 x i16>*
  store <16 x i16> %3309, <16 x i16>* %3345, align 32
  %3346 = add nuw nsw i64 %3340, 1
  %3347 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %16, i64 0, i64 %3346
  %3348 = bitcast <4 x i64>* %3347 to <16 x i16>*
  store <16 x i16> %3309, <16 x i16>* %3348, align 32
  %3349 = add nuw nsw i64 %3340, 17
  %3350 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %16, i64 0, i64 %3349
  %3351 = bitcast <4 x i64>* %3350 to <16 x i16>*
  store <16 x i16> %3309, <16 x i16>* %3351, align 32
  %3352 = add nuw nsw i64 %3340, 2
  %3353 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %16, i64 0, i64 %3352
  %3354 = bitcast <4 x i64>* %3353 to <16 x i16>*
  store <16 x i16> %3309, <16 x i16>* %3354, align 32
  %3355 = add nuw nsw i64 %3340, 18
  %3356 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %16, i64 0, i64 %3355
  %3357 = bitcast <4 x i64>* %3356 to <16 x i16>*
  store <16 x i16> %3309, <16 x i16>* %3357, align 32
  %3358 = add nuw nsw i64 %3340, 3
  %3359 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %16, i64 0, i64 %3358
  %3360 = bitcast <4 x i64>* %3359 to <16 x i16>*
  store <16 x i16> %3309, <16 x i16>* %3360, align 32
  %3361 = add nuw nsw i64 %3340, 19
  %3362 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %16, i64 0, i64 %3361
  %3363 = bitcast <4 x i64>* %3362 to <16 x i16>*
  store <16 x i16> %3309, <16 x i16>* %3363, align 32
  %3364 = add nuw nsw i64 %3340, 4
  %3365 = icmp eq i64 %3364, 16
  br i1 %3365, label %3318, label %3339

3366:                                             ; preds = %3310
  %3367 = trunc i32 %3312 to i16
  %3368 = insertelement <16 x i16> undef, i16 %3367, i32 0
  %3369 = and <16 x i16> %3368, <i16 63, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef>
  %3370 = lshr <16 x i16> %3369, <i16 1, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0>
  %3371 = shufflevector <16 x i16> %3370, <16 x i16> undef, <16 x i32> zeroinitializer
  %3372 = sext i32 %3313 to i64
  %3373 = getelementptr inbounds i16, i16* %5, i64 %3372
  %3374 = getelementptr inbounds i16, i16* %3373, i64 1
  %3375 = add nuw nsw i64 %3311, 16
  %3376 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %16, i64 0, i64 %3375
  %3377 = bitcast <4 x i64>* %3376 to <16 x i16>*
  %3378 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %16, i64 0, i64 %3311
  %3379 = bitcast <4 x i64>* %3378 to <16 x i16>*
  %3380 = bitcast i16* %3373 to <16 x i16>*
  %3381 = load <16 x i16>, <16 x i16>* %3380, align 1
  %3382 = bitcast i16* %3374 to <16 x i16>*
  %3383 = load <16 x i16>, <16 x i16>* %3382, align 1
  %3384 = sub <16 x i16> %3383, %3381
  %3385 = shl <16 x i16> %3381, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %3386 = or <16 x i16> %3385, <i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16>
  %3387 = mul <16 x i16> %3384, %3371
  %3388 = add <16 x i16> %3387, %3386
  %3389 = lshr <16 x i16> %3388, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %3390 = trunc i32 %3313 to i16
  %3391 = add i16 %3390, 1
  %3392 = add i16 %3390, 2
  %3393 = add i16 %3390, 3
  %3394 = add i16 %3390, 4
  %3395 = add i16 %3390, 5
  %3396 = add i16 %3390, 6
  %3397 = add i16 %3390, 7
  %3398 = add i16 %3390, 8
  %3399 = add i16 %3390, 9
  %3400 = add i16 %3390, 10
  %3401 = add i16 %3390, 11
  %3402 = add i16 %3390, 12
  %3403 = add i16 %3390, 13
  %3404 = add i16 %3390, 14
  %3405 = add i16 %3390, 15
  %3406 = insertelement <16 x i16> undef, i16 %3390, i32 0
  %3407 = insertelement <16 x i16> %3406, i16 %3391, i32 1
  %3408 = insertelement <16 x i16> %3407, i16 %3392, i32 2
  %3409 = insertelement <16 x i16> %3408, i16 %3393, i32 3
  %3410 = insertelement <16 x i16> %3409, i16 %3394, i32 4
  %3411 = insertelement <16 x i16> %3410, i16 %3395, i32 5
  %3412 = insertelement <16 x i16> %3411, i16 %3396, i32 6
  %3413 = insertelement <16 x i16> %3412, i16 %3397, i32 7
  %3414 = insertelement <16 x i16> %3413, i16 %3398, i32 8
  %3415 = insertelement <16 x i16> %3414, i16 %3399, i32 9
  %3416 = insertelement <16 x i16> %3415, i16 %3400, i32 10
  %3417 = insertelement <16 x i16> %3416, i16 %3401, i32 11
  %3418 = insertelement <16 x i16> %3417, i16 %3402, i32 12
  %3419 = insertelement <16 x i16> %3418, i16 %3403, i32 13
  %3420 = insertelement <16 x i16> %3419, i16 %3404, i32 14
  %3421 = insertelement <16 x i16> %3420, i16 %3405, i32 15
  %3422 = icmp slt <16 x i16> %3421, <i16 47, i16 47, i16 47, i16 47, i16 47, i16 47, i16 47, i16 47, i16 47, i16 47, i16 47, i16 47, i16 47, i16 47, i16 47, i16 47>
  %3423 = select <16 x i1> %3422, <16 x i16> %3389, <16 x i16> %3309
  store <16 x i16> %3423, <16 x i16>* %3379, align 32
  %3424 = add nsw i64 %3372, 16
  %3425 = icmp slt i64 %3424, 47
  br i1 %3425, label %3426, label %3473

3426:                                             ; preds = %3366
  %3427 = getelementptr inbounds i16, i16* %3373, i64 16
  %3428 = bitcast i16* %3427 to <16 x i16>*
  %3429 = load <16 x i16>, <16 x i16>* %3428, align 1
  %3430 = getelementptr inbounds i16, i16* %3374, i64 16
  %3431 = bitcast i16* %3430 to <16 x i16>*
  %3432 = load <16 x i16>, <16 x i16>* %3431, align 1
  %3433 = sub <16 x i16> %3432, %3429
  %3434 = shl <16 x i16> %3429, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %3435 = or <16 x i16> %3434, <i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16>
  %3436 = mul <16 x i16> %3433, %3371
  %3437 = add <16 x i16> %3436, %3435
  %3438 = lshr <16 x i16> %3437, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %3439 = trunc i64 %3424 to i16
  %3440 = add i16 %3439, 1
  %3441 = add i16 %3439, 2
  %3442 = add i16 %3439, 3
  %3443 = add i16 %3439, 4
  %3444 = add i16 %3439, 5
  %3445 = add i16 %3439, 6
  %3446 = add i16 %3439, 7
  %3447 = add i16 %3439, 8
  %3448 = add i16 %3439, 9
  %3449 = add i16 %3439, 10
  %3450 = add i16 %3439, 11
  %3451 = add i16 %3439, 12
  %3452 = add i16 %3439, 13
  %3453 = add i16 %3439, 14
  %3454 = add i16 %3439, 15
  %3455 = insertelement <16 x i16> undef, i16 %3439, i32 0
  %3456 = insertelement <16 x i16> %3455, i16 %3440, i32 1
  %3457 = insertelement <16 x i16> %3456, i16 %3441, i32 2
  %3458 = insertelement <16 x i16> %3457, i16 %3442, i32 3
  %3459 = insertelement <16 x i16> %3458, i16 %3443, i32 4
  %3460 = insertelement <16 x i16> %3459, i16 %3444, i32 5
  %3461 = insertelement <16 x i16> %3460, i16 %3445, i32 6
  %3462 = insertelement <16 x i16> %3461, i16 %3446, i32 7
  %3463 = insertelement <16 x i16> %3462, i16 %3447, i32 8
  %3464 = insertelement <16 x i16> %3463, i16 %3448, i32 9
  %3465 = insertelement <16 x i16> %3464, i16 %3449, i32 10
  %3466 = insertelement <16 x i16> %3465, i16 %3450, i32 11
  %3467 = insertelement <16 x i16> %3466, i16 %3451, i32 12
  %3468 = insertelement <16 x i16> %3467, i16 %3452, i32 13
  %3469 = insertelement <16 x i16> %3468, i16 %3453, i32 14
  %3470 = insertelement <16 x i16> %3469, i16 %3454, i32 15
  %3471 = icmp slt <16 x i16> %3470, <i16 47, i16 47, i16 47, i16 47, i16 47, i16 47, i16 47, i16 47, i16 47, i16 47, i16 47, i16 47, i16 47, i16 47, i16 47, i16 47>
  %3472 = select <16 x i1> %3471, <16 x i16> %3438, <16 x i16> %3309
  br label %3473

3473:                                             ; preds = %3426, %3366
  %3474 = phi <16 x i16> [ %3472, %3426 ], [ %3309, %3366 ]
  store <16 x i16> %3474, <16 x i16>* %3377, align 32
  %3475 = add nsw i32 %3312, %8
  %3476 = add nuw nsw i64 %3311, 1
  %3477 = icmp eq i64 %3476, 16
  br i1 %3477, label %3318, label %3310

3478:                                             ; preds = %3302
  %3479 = bitcast <16 x i16> %3309 to <4 x i64>
  br label %3480

3480:                                             ; preds = %3679, %3478
  %3481 = phi i64 [ 0, %3478 ], [ %3682, %3679 ]
  %3482 = phi i32 [ %8, %3478 ], [ %3681, %3679 ]
  %3483 = ashr i32 %3482, 6
  %3484 = icmp slt i32 %3482, 3008
  br i1 %3484, label %3535, label %3485

3485:                                             ; preds = %3480
  %3486 = trunc i64 %3481 to i32
  %3487 = icmp slt i32 %3486, 16
  br i1 %3487, label %3488, label %3318

3488:                                             ; preds = %3485
  %3489 = and i64 %3481, 4294967295
  %3490 = sub nsw i64 0, %3481
  %3491 = sub nsw i64 15, %3481
  %3492 = and i64 %3490, 3
  %3493 = icmp eq i64 %3492, 0
  br i1 %3493, label %3505, label %3494

3494:                                             ; preds = %3488, %3494
  %3495 = phi i64 [ %3502, %3494 ], [ %3489, %3488 ]
  %3496 = phi i64 [ %3503, %3494 ], [ %3492, %3488 ]
  %3497 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %16, i64 0, i64 %3495
  %3498 = bitcast <4 x i64>* %3497 to <16 x i16>*
  store <16 x i16> %3309, <16 x i16>* %3498, align 32
  %3499 = add nuw nsw i64 %3495, 16
  %3500 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %16, i64 0, i64 %3499
  %3501 = bitcast <4 x i64>* %3500 to <16 x i16>*
  store <16 x i16> %3309, <16 x i16>* %3501, align 32
  %3502 = add nuw nsw i64 %3495, 1
  %3503 = add i64 %3496, -1
  %3504 = icmp eq i64 %3503, 0
  br i1 %3504, label %3505, label %3494, !llvm.loop !22

3505:                                             ; preds = %3494, %3488
  %3506 = phi i64 [ %3489, %3488 ], [ %3502, %3494 ]
  %3507 = icmp ult i64 %3491, 3
  br i1 %3507, label %3318, label %3508

3508:                                             ; preds = %3505, %3508
  %3509 = phi i64 [ %3533, %3508 ], [ %3506, %3505 ]
  %3510 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %16, i64 0, i64 %3509
  %3511 = bitcast <4 x i64>* %3510 to <16 x i16>*
  store <16 x i16> %3309, <16 x i16>* %3511, align 32
  %3512 = add nuw nsw i64 %3509, 16
  %3513 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %16, i64 0, i64 %3512
  %3514 = bitcast <4 x i64>* %3513 to <16 x i16>*
  store <16 x i16> %3309, <16 x i16>* %3514, align 32
  %3515 = add nuw nsw i64 %3509, 1
  %3516 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %16, i64 0, i64 %3515
  %3517 = bitcast <4 x i64>* %3516 to <16 x i16>*
  store <16 x i16> %3309, <16 x i16>* %3517, align 32
  %3518 = add nuw nsw i64 %3509, 17
  %3519 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %16, i64 0, i64 %3518
  %3520 = bitcast <4 x i64>* %3519 to <16 x i16>*
  store <16 x i16> %3309, <16 x i16>* %3520, align 32
  %3521 = add nuw nsw i64 %3509, 2
  %3522 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %16, i64 0, i64 %3521
  %3523 = bitcast <4 x i64>* %3522 to <16 x i16>*
  store <16 x i16> %3309, <16 x i16>* %3523, align 32
  %3524 = add nuw nsw i64 %3509, 18
  %3525 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %16, i64 0, i64 %3524
  %3526 = bitcast <4 x i64>* %3525 to <16 x i16>*
  store <16 x i16> %3309, <16 x i16>* %3526, align 32
  %3527 = add nuw nsw i64 %3509, 3
  %3528 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %16, i64 0, i64 %3527
  %3529 = bitcast <4 x i64>* %3528 to <16 x i16>*
  store <16 x i16> %3309, <16 x i16>* %3529, align 32
  %3530 = add nuw nsw i64 %3509, 19
  %3531 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %16, i64 0, i64 %3530
  %3532 = bitcast <4 x i64>* %3531 to <16 x i16>*
  store <16 x i16> %3309, <16 x i16>* %3532, align 32
  %3533 = add nuw nsw i64 %3509, 4
  %3534 = icmp eq i64 %3533, 16
  br i1 %3534, label %3318, label %3508

3535:                                             ; preds = %3480
  %3536 = insertelement <8 x i32> undef, i32 %3482, i32 0
  %3537 = and <8 x i32> %3536, <i32 4128831, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3538 = lshr <8 x i32> %3537, <i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>
  %3539 = shufflevector <8 x i32> %3538, <8 x i32> undef, <8 x i32> zeroinitializer
  %3540 = sext i32 %3483 to i64
  %3541 = getelementptr inbounds i16, i16* %5, i64 %3540
  %3542 = getelementptr inbounds i16, i16* %3541, i64 1
  %3543 = getelementptr inbounds i16, i16* %3541, i64 8
  %3544 = getelementptr inbounds i16, i16* %3541, i64 9
  %3545 = add nuw nsw i64 %3481, 16
  %3546 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %16, i64 0, i64 %3545
  %3547 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %16, i64 0, i64 %3481
  %3548 = bitcast i16* %3541 to <8 x i16>*
  %3549 = load <8 x i16>, <8 x i16>* %3548, align 1
  %3550 = zext <8 x i16> %3549 to <8 x i32>
  %3551 = bitcast i16* %3542 to <8 x i16>*
  %3552 = load <8 x i16>, <8 x i16>* %3551, align 1
  %3553 = zext <8 x i16> %3552 to <8 x i32>
  %3554 = sub nsw <8 x i32> %3553, %3550
  %3555 = shl nuw nsw <8 x i32> %3550, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %3556 = or <8 x i32> %3555, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %3557 = mul <8 x i32> %3554, %3539
  %3558 = add <8 x i32> %3557, %3556
  %3559 = lshr <8 x i32> %3558, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %3560 = bitcast <8 x i32> %3559 to <4 x i64>
  %3561 = shufflevector <4 x i64> %3560, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %3562 = shufflevector <2 x i64> %3561, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %3563 = bitcast <4 x i64> %3562 to <8 x i32>
  %3564 = tail call <16 x i16> @llvm.x86.avx2.packusdw(<8 x i32> %3559, <8 x i32> %3563) #8
  %3565 = bitcast <16 x i16> %3564 to <4 x i64>
  %3566 = icmp slt i32 %3482, 2496
  br i1 %3566, label %3567, label %3586

3567:                                             ; preds = %3535
  %3568 = bitcast i16* %3543 to <8 x i16>*
  %3569 = load <8 x i16>, <8 x i16>* %3568, align 1
  %3570 = zext <8 x i16> %3569 to <8 x i32>
  %3571 = bitcast i16* %3544 to <8 x i16>*
  %3572 = load <8 x i16>, <8 x i16>* %3571, align 1
  %3573 = zext <8 x i16> %3572 to <8 x i32>
  %3574 = sub nsw <8 x i32> %3573, %3570
  %3575 = shl nuw nsw <8 x i32> %3570, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %3576 = or <8 x i32> %3575, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %3577 = mul <8 x i32> %3574, %3539
  %3578 = add <8 x i32> %3577, %3576
  %3579 = lshr <8 x i32> %3578, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %3580 = bitcast <8 x i32> %3579 to <4 x i64>
  %3581 = shufflevector <4 x i64> %3580, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %3582 = shufflevector <2 x i64> %3581, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %3583 = bitcast <4 x i64> %3582 to <8 x i32>
  %3584 = tail call <16 x i16> @llvm.x86.avx2.packusdw(<8 x i32> %3579, <8 x i32> %3583) #8
  %3585 = bitcast <16 x i16> %3584 to <4 x i64>
  br label %3586

3586:                                             ; preds = %3567, %3535
  %3587 = phi <4 x i64> [ %3585, %3567 ], [ %3479, %3535 ]
  %3588 = shufflevector <4 x i64> %3565, <4 x i64> %3587, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %3589 = trunc i32 %3483 to i16
  %3590 = add i16 %3589, 1
  %3591 = add i16 %3589, 2
  %3592 = add i16 %3589, 3
  %3593 = add i16 %3589, 4
  %3594 = add i16 %3589, 5
  %3595 = add i16 %3589, 6
  %3596 = add i16 %3589, 7
  %3597 = add i16 %3589, 8
  %3598 = add i16 %3589, 9
  %3599 = add i16 %3589, 10
  %3600 = add i16 %3589, 11
  %3601 = add i16 %3589, 12
  %3602 = add i16 %3589, 13
  %3603 = add i16 %3589, 14
  %3604 = add i16 %3589, 15
  %3605 = insertelement <16 x i16> undef, i16 %3589, i32 0
  %3606 = insertelement <16 x i16> %3605, i16 %3590, i32 1
  %3607 = insertelement <16 x i16> %3606, i16 %3591, i32 2
  %3608 = insertelement <16 x i16> %3607, i16 %3592, i32 3
  %3609 = insertelement <16 x i16> %3608, i16 %3593, i32 4
  %3610 = insertelement <16 x i16> %3609, i16 %3594, i32 5
  %3611 = insertelement <16 x i16> %3610, i16 %3595, i32 6
  %3612 = insertelement <16 x i16> %3611, i16 %3596, i32 7
  %3613 = insertelement <16 x i16> %3612, i16 %3597, i32 8
  %3614 = insertelement <16 x i16> %3613, i16 %3598, i32 9
  %3615 = insertelement <16 x i16> %3614, i16 %3599, i32 10
  %3616 = insertelement <16 x i16> %3615, i16 %3600, i32 11
  %3617 = insertelement <16 x i16> %3616, i16 %3601, i32 12
  %3618 = insertelement <16 x i16> %3617, i16 %3602, i32 13
  %3619 = insertelement <16 x i16> %3618, i16 %3603, i32 14
  %3620 = insertelement <16 x i16> %3619, i16 %3604, i32 15
  %3621 = icmp slt <16 x i16> %3620, <i16 47, i16 47, i16 47, i16 47, i16 47, i16 47, i16 47, i16 47, i16 47, i16 47, i16 47, i16 47, i16 47, i16 47, i16 47, i16 47>
  %3622 = bitcast <4 x i64> %3588 to <16 x i16>
  %3623 = select <16 x i1> %3621, <16 x i16> %3622, <16 x i16> %3309
  %3624 = bitcast <4 x i64>* %3547 to <16 x i16>*
  store <16 x i16> %3623, <16 x i16>* %3624, align 32
  %3625 = icmp sgt i32 %3482, 1983
  br i1 %3625, label %3679, label %3626

3626:                                             ; preds = %3586
  %3627 = getelementptr inbounds i16, i16* %3541, i64 16
  %3628 = bitcast i16* %3627 to <8 x i16>*
  %3629 = load <8 x i16>, <8 x i16>* %3628, align 1
  %3630 = zext <8 x i16> %3629 to <8 x i32>
  %3631 = getelementptr inbounds i16, i16* %3542, i64 16
  %3632 = bitcast i16* %3631 to <8 x i16>*
  %3633 = load <8 x i16>, <8 x i16>* %3632, align 1
  %3634 = zext <8 x i16> %3633 to <8 x i32>
  %3635 = sub nsw <8 x i32> %3634, %3630
  %3636 = shl nuw nsw <8 x i32> %3630, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %3637 = or <8 x i32> %3636, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %3638 = mul <8 x i32> %3635, %3539
  %3639 = add <8 x i32> %3638, %3637
  %3640 = lshr <8 x i32> %3639, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %3641 = bitcast <8 x i32> %3640 to <4 x i64>
  %3642 = shufflevector <4 x i64> %3641, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %3643 = shufflevector <2 x i64> %3642, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %3644 = bitcast <4 x i64> %3643 to <8 x i32>
  %3645 = tail call <16 x i16> @llvm.x86.avx2.packusdw(<8 x i32> %3640, <8 x i32> %3644) #8
  %3646 = bitcast <16 x i16> %3645 to <4 x i64>
  %3647 = icmp slt i32 %3482, 1472
  br i1 %3647, label %3648, label %3669

3648:                                             ; preds = %3626
  %3649 = getelementptr inbounds i16, i16* %3543, i64 16
  %3650 = bitcast i16* %3649 to <8 x i16>*
  %3651 = load <8 x i16>, <8 x i16>* %3650, align 1
  %3652 = zext <8 x i16> %3651 to <8 x i32>
  %3653 = getelementptr inbounds i16, i16* %3544, i64 16
  %3654 = bitcast i16* %3653 to <8 x i16>*
  %3655 = load <8 x i16>, <8 x i16>* %3654, align 1
  %3656 = zext <8 x i16> %3655 to <8 x i32>
  %3657 = sub nsw <8 x i32> %3656, %3652
  %3658 = shl nuw nsw <8 x i32> %3652, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %3659 = or <8 x i32> %3658, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %3660 = mul <8 x i32> %3657, %3539
  %3661 = add <8 x i32> %3660, %3659
  %3662 = lshr <8 x i32> %3661, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %3663 = bitcast <8 x i32> %3662 to <4 x i64>
  %3664 = shufflevector <4 x i64> %3663, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %3665 = shufflevector <2 x i64> %3664, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %3666 = bitcast <4 x i64> %3665 to <8 x i32>
  %3667 = tail call <16 x i16> @llvm.x86.avx2.packusdw(<8 x i32> %3662, <8 x i32> %3666) #8
  %3668 = bitcast <16 x i16> %3667 to <4 x i64>
  br label %3669

3669:                                             ; preds = %3648, %3626
  %3670 = phi <4 x i64> [ %3668, %3648 ], [ %3479, %3626 ]
  %3671 = shufflevector <4 x i64> %3646, <4 x i64> %3670, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %3672 = insertelement <16 x i16> undef, i16 %3589, i32 0
  %3673 = shufflevector <16 x i16> %3672, <16 x i16> undef, <16 x i32> zeroinitializer
  %3674 = add <16 x i16> %3673, <i16 16, i16 17, i16 18, i16 19, i16 20, i16 21, i16 22, i16 23, i16 24, i16 25, i16 26, i16 27, i16 28, i16 29, i16 30, i16 31>
  %3675 = icmp slt <16 x i16> %3674, <i16 47, i16 47, i16 47, i16 47, i16 47, i16 47, i16 47, i16 47, i16 47, i16 47, i16 47, i16 47, i16 47, i16 47, i16 47, i16 47>
  %3676 = bitcast <4 x i64> %3671 to <16 x i16>
  %3677 = select <16 x i1> %3675, <16 x i16> %3676, <16 x i16> %3309
  %3678 = bitcast <16 x i16> %3677 to <4 x i64>
  br label %3679

3679:                                             ; preds = %3669, %3586
  %3680 = phi <4 x i64> [ %3678, %3669 ], [ %3479, %3586 ]
  store <4 x i64> %3680, <4 x i64>* %3546, align 32
  %3681 = add nsw i32 %3482, %8
  %3682 = add nuw nsw i64 %3481, 1
  %3683 = icmp eq i64 %3682, 16
  br i1 %3683, label %3318, label %3480

3684:                                             ; preds = %3686
  %3685 = getelementptr inbounds i16, i16* %0, i64 8
  br label %3762

3686:                                             ; preds = %3318, %3686
  %3687 = phi i64 [ %3760, %3686 ], [ 0, %3318 ]
  %3688 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %16, i64 0, i64 %3687
  %3689 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %11, i64 0, i64 %3687
  %3690 = bitcast <4 x i64>* %3688 to <16 x i16>*
  %3691 = load <16 x i16>, <16 x i16>* %3690, align 32
  %3692 = getelementptr inbounds <4 x i64>, <4 x i64>* %3688, i64 1
  %3693 = bitcast <4 x i64>* %3692 to <16 x i16>*
  %3694 = load <16 x i16>, <16 x i16>* %3693, align 32
  %3695 = shufflevector <16 x i16> %3691, <16 x i16> %3694, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %3696 = getelementptr inbounds <4 x i64>, <4 x i64>* %3688, i64 2
  %3697 = bitcast <4 x i64>* %3696 to <16 x i16>*
  %3698 = load <16 x i16>, <16 x i16>* %3697, align 32
  %3699 = getelementptr inbounds <4 x i64>, <4 x i64>* %3688, i64 3
  %3700 = bitcast <4 x i64>* %3699 to <16 x i16>*
  %3701 = load <16 x i16>, <16 x i16>* %3700, align 32
  %3702 = shufflevector <16 x i16> %3698, <16 x i16> %3701, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %3703 = getelementptr inbounds <4 x i64>, <4 x i64>* %3688, i64 4
  %3704 = bitcast <4 x i64>* %3703 to <16 x i16>*
  %3705 = load <16 x i16>, <16 x i16>* %3704, align 32
  %3706 = getelementptr inbounds <4 x i64>, <4 x i64>* %3688, i64 5
  %3707 = bitcast <4 x i64>* %3706 to <16 x i16>*
  %3708 = load <16 x i16>, <16 x i16>* %3707, align 32
  %3709 = shufflevector <16 x i16> %3705, <16 x i16> %3708, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %3710 = getelementptr inbounds <4 x i64>, <4 x i64>* %3688, i64 6
  %3711 = bitcast <4 x i64>* %3710 to <16 x i16>*
  %3712 = load <16 x i16>, <16 x i16>* %3711, align 32
  %3713 = getelementptr inbounds <4 x i64>, <4 x i64>* %3688, i64 7
  %3714 = bitcast <4 x i64>* %3713 to <16 x i16>*
  %3715 = load <16 x i16>, <16 x i16>* %3714, align 32
  %3716 = shufflevector <16 x i16> %3712, <16 x i16> %3715, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %3717 = bitcast <16 x i16> %3695 to <8 x i32>
  %3718 = bitcast <16 x i16> %3702 to <8 x i32>
  %3719 = shufflevector <8 x i32> %3717, <8 x i32> %3718, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %3720 = bitcast <8 x i32> %3719 to <4 x i64>
  %3721 = bitcast <16 x i16> %3709 to <8 x i32>
  %3722 = bitcast <16 x i16> %3716 to <8 x i32>
  %3723 = shufflevector <8 x i32> %3721, <8 x i32> %3722, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %3724 = bitcast <8 x i32> %3723 to <4 x i64>
  %3725 = shufflevector <4 x i64> %3720, <4 x i64> %3724, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  store <4 x i64> %3725, <4 x i64>* %3689, align 32
  %3726 = shufflevector <4 x i64> %3720, <4 x i64> %3724, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %3727 = getelementptr inbounds <4 x i64>, <4 x i64>* %3689, i64 1
  store <4 x i64> %3726, <4 x i64>* %3727, align 32
  %3728 = shufflevector <8 x i32> %3717, <8 x i32> %3718, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %3729 = bitcast <8 x i32> %3728 to <4 x i64>
  %3730 = shufflevector <8 x i32> %3721, <8 x i32> %3722, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %3731 = bitcast <8 x i32> %3730 to <4 x i64>
  %3732 = shufflevector <4 x i64> %3729, <4 x i64> %3731, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %3733 = getelementptr inbounds <4 x i64>, <4 x i64>* %3689, i64 2
  store <4 x i64> %3732, <4 x i64>* %3733, align 32
  %3734 = shufflevector <4 x i64> %3729, <4 x i64> %3731, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %3735 = getelementptr inbounds <4 x i64>, <4 x i64>* %3689, i64 3
  store <4 x i64> %3734, <4 x i64>* %3735, align 32
  %3736 = shufflevector <16 x i16> %3691, <16 x i16> %3694, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %3737 = shufflevector <16 x i16> %3698, <16 x i16> %3701, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %3738 = shufflevector <16 x i16> %3705, <16 x i16> %3708, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %3739 = shufflevector <16 x i16> %3712, <16 x i16> %3715, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %3740 = bitcast <16 x i16> %3736 to <8 x i32>
  %3741 = bitcast <16 x i16> %3737 to <8 x i32>
  %3742 = shufflevector <8 x i32> %3740, <8 x i32> %3741, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %3743 = bitcast <8 x i32> %3742 to <4 x i64>
  %3744 = bitcast <16 x i16> %3738 to <8 x i32>
  %3745 = bitcast <16 x i16> %3739 to <8 x i32>
  %3746 = shufflevector <8 x i32> %3744, <8 x i32> %3745, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %3747 = bitcast <8 x i32> %3746 to <4 x i64>
  %3748 = shufflevector <4 x i64> %3743, <4 x i64> %3747, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %3749 = getelementptr inbounds <4 x i64>, <4 x i64>* %3689, i64 4
  store <4 x i64> %3748, <4 x i64>* %3749, align 32
  %3750 = shufflevector <4 x i64> %3743, <4 x i64> %3747, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %3751 = getelementptr inbounds <4 x i64>, <4 x i64>* %3689, i64 5
  store <4 x i64> %3750, <4 x i64>* %3751, align 32
  %3752 = shufflevector <8 x i32> %3740, <8 x i32> %3741, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %3753 = bitcast <8 x i32> %3752 to <4 x i64>
  %3754 = shufflevector <8 x i32> %3744, <8 x i32> %3745, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %3755 = bitcast <8 x i32> %3754 to <4 x i64>
  %3756 = shufflevector <4 x i64> %3753, <4 x i64> %3755, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %3757 = getelementptr inbounds <4 x i64>, <4 x i64>* %3689, i64 6
  store <4 x i64> %3756, <4 x i64>* %3757, align 32
  %3758 = shufflevector <4 x i64> %3753, <4 x i64> %3755, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %3759 = getelementptr inbounds <4 x i64>, <4 x i64>* %3689, i64 7
  store <4 x i64> %3758, <4 x i64>* %3759, align 32
  %3760 = add nuw nsw i64 %3687, 8
  %3761 = icmp ult i64 %3760, 32
  br i1 %3761, label %3686, label %3684

3762:                                             ; preds = %3762, %3684
  %3763 = phi i64 [ 0, %3684 ], [ %3936, %3762 ]
  %3764 = mul nsw i64 %3763, %1
  %3765 = getelementptr inbounds i16, i16* %0, i64 %3764
  %3766 = bitcast i16* %3765 to <2 x i64>*
  %3767 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %11, i64 0, i64 %3763
  %3768 = load <4 x i64>, <4 x i64>* %3767, align 32
  %3769 = shufflevector <4 x i64> %3768, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  store <2 x i64> %3769, <2 x i64>* %3766, align 1
  %3770 = or i64 %3763, 1
  %3771 = mul nsw i64 %3770, %1
  %3772 = getelementptr inbounds i16, i16* %0, i64 %3771
  %3773 = bitcast i16* %3772 to <2 x i64>*
  %3774 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %11, i64 0, i64 %3770
  %3775 = load <4 x i64>, <4 x i64>* %3774, align 32
  %3776 = shufflevector <4 x i64> %3775, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  store <2 x i64> %3776, <2 x i64>* %3773, align 1
  %3777 = or i64 %3763, 2
  %3778 = mul nsw i64 %3777, %1
  %3779 = getelementptr inbounds i16, i16* %0, i64 %3778
  %3780 = bitcast i16* %3779 to <2 x i64>*
  %3781 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %11, i64 0, i64 %3777
  %3782 = load <4 x i64>, <4 x i64>* %3781, align 32
  %3783 = shufflevector <4 x i64> %3782, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  store <2 x i64> %3783, <2 x i64>* %3780, align 1
  %3784 = or i64 %3763, 3
  %3785 = mul nsw i64 %3784, %1
  %3786 = getelementptr inbounds i16, i16* %0, i64 %3785
  %3787 = bitcast i16* %3786 to <2 x i64>*
  %3788 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %11, i64 0, i64 %3784
  %3789 = load <4 x i64>, <4 x i64>* %3788, align 32
  %3790 = shufflevector <4 x i64> %3789, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  store <2 x i64> %3790, <2 x i64>* %3787, align 1
  %3791 = or i64 %3763, 4
  %3792 = mul nsw i64 %3791, %1
  %3793 = getelementptr inbounds i16, i16* %0, i64 %3792
  %3794 = bitcast i16* %3793 to <2 x i64>*
  %3795 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %11, i64 0, i64 %3791
  %3796 = load <4 x i64>, <4 x i64>* %3795, align 32
  %3797 = shufflevector <4 x i64> %3796, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  store <2 x i64> %3797, <2 x i64>* %3794, align 1
  %3798 = or i64 %3763, 5
  %3799 = mul nsw i64 %3798, %1
  %3800 = getelementptr inbounds i16, i16* %0, i64 %3799
  %3801 = bitcast i16* %3800 to <2 x i64>*
  %3802 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %11, i64 0, i64 %3798
  %3803 = load <4 x i64>, <4 x i64>* %3802, align 32
  %3804 = shufflevector <4 x i64> %3803, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  store <2 x i64> %3804, <2 x i64>* %3801, align 1
  %3805 = or i64 %3763, 6
  %3806 = mul nsw i64 %3805, %1
  %3807 = getelementptr inbounds i16, i16* %0, i64 %3806
  %3808 = bitcast i16* %3807 to <2 x i64>*
  %3809 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %11, i64 0, i64 %3805
  %3810 = load <4 x i64>, <4 x i64>* %3809, align 32
  %3811 = shufflevector <4 x i64> %3810, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  store <2 x i64> %3811, <2 x i64>* %3808, align 1
  %3812 = or i64 %3763, 7
  %3813 = mul nsw i64 %3812, %1
  %3814 = getelementptr inbounds i16, i16* %0, i64 %3813
  %3815 = bitcast i16* %3814 to <2 x i64>*
  %3816 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %11, i64 0, i64 %3812
  %3817 = load <4 x i64>, <4 x i64>* %3816, align 32
  %3818 = shufflevector <4 x i64> %3817, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  store <2 x i64> %3818, <2 x i64>* %3815, align 1
  %3819 = getelementptr inbounds i16, i16* %3685, i64 %3764
  %3820 = bitcast i16* %3819 to <2 x i64>*
  %3821 = or i64 %3763, 8
  %3822 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %11, i64 0, i64 %3821
  %3823 = load <4 x i64>, <4 x i64>* %3822, align 32
  %3824 = shufflevector <4 x i64> %3823, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  store <2 x i64> %3824, <2 x i64>* %3820, align 1
  %3825 = getelementptr inbounds i16, i16* %3685, i64 %3771
  %3826 = bitcast i16* %3825 to <2 x i64>*
  %3827 = or i64 %3763, 9
  %3828 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %11, i64 0, i64 %3827
  %3829 = load <4 x i64>, <4 x i64>* %3828, align 32
  %3830 = shufflevector <4 x i64> %3829, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  store <2 x i64> %3830, <2 x i64>* %3826, align 1
  %3831 = getelementptr inbounds i16, i16* %3685, i64 %3778
  %3832 = bitcast i16* %3831 to <2 x i64>*
  %3833 = or i64 %3763, 10
  %3834 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %11, i64 0, i64 %3833
  %3835 = load <4 x i64>, <4 x i64>* %3834, align 32
  %3836 = shufflevector <4 x i64> %3835, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  store <2 x i64> %3836, <2 x i64>* %3832, align 1
  %3837 = getelementptr inbounds i16, i16* %3685, i64 %3785
  %3838 = bitcast i16* %3837 to <2 x i64>*
  %3839 = or i64 %3763, 11
  %3840 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %11, i64 0, i64 %3839
  %3841 = load <4 x i64>, <4 x i64>* %3840, align 32
  %3842 = shufflevector <4 x i64> %3841, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  store <2 x i64> %3842, <2 x i64>* %3838, align 1
  %3843 = getelementptr inbounds i16, i16* %3685, i64 %3792
  %3844 = bitcast i16* %3843 to <2 x i64>*
  %3845 = or i64 %3763, 12
  %3846 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %11, i64 0, i64 %3845
  %3847 = load <4 x i64>, <4 x i64>* %3846, align 32
  %3848 = shufflevector <4 x i64> %3847, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  store <2 x i64> %3848, <2 x i64>* %3844, align 1
  %3849 = getelementptr inbounds i16, i16* %3685, i64 %3799
  %3850 = bitcast i16* %3849 to <2 x i64>*
  %3851 = or i64 %3763, 13
  %3852 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %11, i64 0, i64 %3851
  %3853 = load <4 x i64>, <4 x i64>* %3852, align 32
  %3854 = shufflevector <4 x i64> %3853, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  store <2 x i64> %3854, <2 x i64>* %3850, align 1
  %3855 = getelementptr inbounds i16, i16* %3685, i64 %3806
  %3856 = bitcast i16* %3855 to <2 x i64>*
  %3857 = or i64 %3763, 14
  %3858 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %11, i64 0, i64 %3857
  %3859 = load <4 x i64>, <4 x i64>* %3858, align 32
  %3860 = shufflevector <4 x i64> %3859, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  store <2 x i64> %3860, <2 x i64>* %3856, align 1
  %3861 = getelementptr inbounds i16, i16* %3685, i64 %3813
  %3862 = bitcast i16* %3861 to <2 x i64>*
  %3863 = or i64 %3763, 15
  %3864 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %11, i64 0, i64 %3863
  %3865 = load <4 x i64>, <4 x i64>* %3864, align 32
  %3866 = shufflevector <4 x i64> %3865, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  store <2 x i64> %3866, <2 x i64>* %3862, align 1
  %3867 = mul nsw i64 %3821, %1
  %3868 = getelementptr inbounds i16, i16* %0, i64 %3867
  %3869 = bitcast i16* %3868 to <4 x i64>*
  %3870 = shufflevector <4 x i64> %3768, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %3871 = shufflevector <2 x i64> %3870, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %3872 = shufflevector <4 x i64> %3871, <4 x i64> %3823, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  store <4 x i64> %3872, <4 x i64>* %3869, align 1
  %3873 = mul nsw i64 %3827, %1
  %3874 = getelementptr inbounds i16, i16* %0, i64 %3873
  %3875 = bitcast i16* %3874 to <4 x i64>*
  %3876 = add nsw i64 %3827, -8
  %3877 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %11, i64 0, i64 %3876
  %3878 = load <4 x i64>, <4 x i64>* %3877, align 32
  %3879 = shufflevector <4 x i64> %3878, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %3880 = shufflevector <2 x i64> %3879, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %3881 = shufflevector <4 x i64> %3880, <4 x i64> %3829, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  store <4 x i64> %3881, <4 x i64>* %3875, align 1
  %3882 = mul nsw i64 %3833, %1
  %3883 = getelementptr inbounds i16, i16* %0, i64 %3882
  %3884 = bitcast i16* %3883 to <4 x i64>*
  %3885 = add nsw i64 %3833, -8
  %3886 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %11, i64 0, i64 %3885
  %3887 = load <4 x i64>, <4 x i64>* %3886, align 32
  %3888 = shufflevector <4 x i64> %3887, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %3889 = shufflevector <2 x i64> %3888, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %3890 = shufflevector <4 x i64> %3889, <4 x i64> %3835, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  store <4 x i64> %3890, <4 x i64>* %3884, align 1
  %3891 = mul nsw i64 %3839, %1
  %3892 = getelementptr inbounds i16, i16* %0, i64 %3891
  %3893 = bitcast i16* %3892 to <4 x i64>*
  %3894 = add nsw i64 %3839, -8
  %3895 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %11, i64 0, i64 %3894
  %3896 = load <4 x i64>, <4 x i64>* %3895, align 32
  %3897 = shufflevector <4 x i64> %3896, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %3898 = shufflevector <2 x i64> %3897, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %3899 = shufflevector <4 x i64> %3898, <4 x i64> %3841, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  store <4 x i64> %3899, <4 x i64>* %3893, align 1
  %3900 = mul nsw i64 %3845, %1
  %3901 = getelementptr inbounds i16, i16* %0, i64 %3900
  %3902 = bitcast i16* %3901 to <4 x i64>*
  %3903 = add nsw i64 %3845, -8
  %3904 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %11, i64 0, i64 %3903
  %3905 = load <4 x i64>, <4 x i64>* %3904, align 32
  %3906 = shufflevector <4 x i64> %3905, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %3907 = shufflevector <2 x i64> %3906, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %3908 = shufflevector <4 x i64> %3907, <4 x i64> %3847, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  store <4 x i64> %3908, <4 x i64>* %3902, align 1
  %3909 = mul nsw i64 %3851, %1
  %3910 = getelementptr inbounds i16, i16* %0, i64 %3909
  %3911 = bitcast i16* %3910 to <4 x i64>*
  %3912 = add nsw i64 %3851, -8
  %3913 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %11, i64 0, i64 %3912
  %3914 = load <4 x i64>, <4 x i64>* %3913, align 32
  %3915 = shufflevector <4 x i64> %3914, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %3916 = shufflevector <2 x i64> %3915, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %3917 = shufflevector <4 x i64> %3916, <4 x i64> %3853, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  store <4 x i64> %3917, <4 x i64>* %3911, align 1
  %3918 = mul nsw i64 %3857, %1
  %3919 = getelementptr inbounds i16, i16* %0, i64 %3918
  %3920 = bitcast i16* %3919 to <4 x i64>*
  %3921 = add nsw i64 %3857, -8
  %3922 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %11, i64 0, i64 %3921
  %3923 = load <4 x i64>, <4 x i64>* %3922, align 32
  %3924 = shufflevector <4 x i64> %3923, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %3925 = shufflevector <2 x i64> %3924, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %3926 = shufflevector <4 x i64> %3925, <4 x i64> %3859, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  store <4 x i64> %3926, <4 x i64>* %3920, align 1
  %3927 = mul nsw i64 %3863, %1
  %3928 = getelementptr inbounds i16, i16* %0, i64 %3927
  %3929 = bitcast i16* %3928 to <4 x i64>*
  %3930 = add nsw i64 %3863, -8
  %3931 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %11, i64 0, i64 %3930
  %3932 = load <4 x i64>, <4 x i64>* %3931, align 32
  %3933 = shufflevector <4 x i64> %3932, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %3934 = shufflevector <2 x i64> %3933, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %3935 = shufflevector <4 x i64> %3934, <4 x i64> %3865, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  store <4 x i64> %3935, <4 x i64>* %3929, align 1
  %3936 = add nuw nsw i64 %3763, 16
  %3937 = icmp ult i64 %3936, 32
  br i1 %3937, label %3762, label %3938

3938:                                             ; preds = %3762
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %3304) #8
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %3303) #8
  br label %7784

3939:                                             ; preds = %2683
  %3940 = bitcast [2048 x i16]* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4096, i8* nonnull %3940) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %3940, i8 -86, i64 4096, i1 false) #8
  %3941 = icmp slt i32 %9, 12
  %3942 = getelementptr inbounds [2048 x i16], [2048 x i16]* %18, i64 0, i64 0
  br i1 %3941, label %3943, label %4088

3943:                                             ; preds = %3939
  %3944 = getelementptr inbounds i16, i16* %5, i64 95
  %3945 = load i16, i16* %3944, align 2
  %3946 = insertelement <16 x i16> undef, i16 %3945, i32 0
  %3947 = shufflevector <16 x i16> %3946, <16 x i16> undef, <16 x i32> zeroinitializer
  br label %3948

3948:                                             ; preds = %4083, %3943
  %3949 = phi i16* [ %4086, %4083 ], [ %3942, %3943 ]
  %3950 = phi i32 [ %4085, %4083 ], [ 0, %3943 ]
  %3951 = phi i32 [ %4084, %4083 ], [ %8, %3943 ]
  %3952 = icmp slt i32 %3951, 6080
  br i1 %3952, label %4016, label %3953

3953:                                             ; preds = %3948
  %3954 = icmp ult i32 %3950, 32
  br i1 %3954, label %3955, label %4089

3955:                                             ; preds = %3953
  %3956 = sub nsw i32 0, %3950
  %3957 = sub nsw i32 31, %3950
  %3958 = and i32 %3956, 3
  %3959 = icmp eq i32 %3958, 0
  br i1 %3959, label %3975, label %3960

3960:                                             ; preds = %3955, %3960
  %3961 = phi i16* [ %3971, %3960 ], [ %3949, %3955 ]
  %3962 = phi i32 [ %3972, %3960 ], [ %3950, %3955 ]
  %3963 = phi i32 [ %3973, %3960 ], [ %3958, %3955 ]
  %3964 = bitcast i16* %3961 to <16 x i16>*
  store <16 x i16> %3947, <16 x i16>* %3964, align 1
  %3965 = getelementptr inbounds i16, i16* %3961, i64 16
  %3966 = bitcast i16* %3965 to <16 x i16>*
  store <16 x i16> %3947, <16 x i16>* %3966, align 1
  %3967 = getelementptr inbounds i16, i16* %3961, i64 32
  %3968 = bitcast i16* %3967 to <16 x i16>*
  store <16 x i16> %3947, <16 x i16>* %3968, align 1
  %3969 = getelementptr inbounds i16, i16* %3961, i64 48
  %3970 = bitcast i16* %3969 to <16 x i16>*
  store <16 x i16> %3947, <16 x i16>* %3970, align 1
  %3971 = getelementptr inbounds i16, i16* %3961, i64 64
  %3972 = add nuw nsw i32 %3962, 1
  %3973 = add i32 %3963, -1
  %3974 = icmp eq i32 %3973, 0
  br i1 %3974, label %3975, label %3960, !llvm.loop !23

3975:                                             ; preds = %3960, %3955
  %3976 = phi i16* [ %3949, %3955 ], [ %3971, %3960 ]
  %3977 = phi i32 [ %3950, %3955 ], [ %3972, %3960 ]
  %3978 = icmp ult i32 %3957, 3
  br i1 %3978, label %4089, label %3979

3979:                                             ; preds = %3975, %3979
  %3980 = phi i16* [ %4013, %3979 ], [ %3976, %3975 ]
  %3981 = phi i32 [ %4014, %3979 ], [ %3977, %3975 ]
  %3982 = bitcast i16* %3980 to <16 x i16>*
  store <16 x i16> %3947, <16 x i16>* %3982, align 1
  %3983 = getelementptr inbounds i16, i16* %3980, i64 16
  %3984 = bitcast i16* %3983 to <16 x i16>*
  store <16 x i16> %3947, <16 x i16>* %3984, align 1
  %3985 = getelementptr inbounds i16, i16* %3980, i64 32
  %3986 = bitcast i16* %3985 to <16 x i16>*
  store <16 x i16> %3947, <16 x i16>* %3986, align 1
  %3987 = getelementptr inbounds i16, i16* %3980, i64 48
  %3988 = bitcast i16* %3987 to <16 x i16>*
  store <16 x i16> %3947, <16 x i16>* %3988, align 1
  %3989 = getelementptr inbounds i16, i16* %3980, i64 64
  %3990 = bitcast i16* %3989 to <16 x i16>*
  store <16 x i16> %3947, <16 x i16>* %3990, align 1
  %3991 = getelementptr inbounds i16, i16* %3980, i64 80
  %3992 = bitcast i16* %3991 to <16 x i16>*
  store <16 x i16> %3947, <16 x i16>* %3992, align 1
  %3993 = getelementptr inbounds i16, i16* %3980, i64 96
  %3994 = bitcast i16* %3993 to <16 x i16>*
  store <16 x i16> %3947, <16 x i16>* %3994, align 1
  %3995 = getelementptr inbounds i16, i16* %3980, i64 112
  %3996 = bitcast i16* %3995 to <16 x i16>*
  store <16 x i16> %3947, <16 x i16>* %3996, align 1
  %3997 = getelementptr inbounds i16, i16* %3980, i64 128
  %3998 = bitcast i16* %3997 to <16 x i16>*
  store <16 x i16> %3947, <16 x i16>* %3998, align 1
  %3999 = getelementptr inbounds i16, i16* %3980, i64 144
  %4000 = bitcast i16* %3999 to <16 x i16>*
  store <16 x i16> %3947, <16 x i16>* %4000, align 1
  %4001 = getelementptr inbounds i16, i16* %3980, i64 160
  %4002 = bitcast i16* %4001 to <16 x i16>*
  store <16 x i16> %3947, <16 x i16>* %4002, align 1
  %4003 = getelementptr inbounds i16, i16* %3980, i64 176
  %4004 = bitcast i16* %4003 to <16 x i16>*
  store <16 x i16> %3947, <16 x i16>* %4004, align 1
  %4005 = getelementptr inbounds i16, i16* %3980, i64 192
  %4006 = bitcast i16* %4005 to <16 x i16>*
  store <16 x i16> %3947, <16 x i16>* %4006, align 1
  %4007 = getelementptr inbounds i16, i16* %3980, i64 208
  %4008 = bitcast i16* %4007 to <16 x i16>*
  store <16 x i16> %3947, <16 x i16>* %4008, align 1
  %4009 = getelementptr inbounds i16, i16* %3980, i64 224
  %4010 = bitcast i16* %4009 to <16 x i16>*
  store <16 x i16> %3947, <16 x i16>* %4010, align 1
  %4011 = getelementptr inbounds i16, i16* %3980, i64 240
  %4012 = bitcast i16* %4011 to <16 x i16>*
  store <16 x i16> %3947, <16 x i16>* %4012, align 1
  %4013 = getelementptr inbounds i16, i16* %3980, i64 256
  %4014 = add nuw nsw i32 %3981, 4
  %4015 = icmp eq i32 %4014, 32
  br i1 %4015, label %4089, label %3979

4016:                                             ; preds = %3948
  %4017 = ashr i32 %3951, 6
  %4018 = trunc i32 %3951 to i16
  %4019 = insertelement <16 x i16> undef, i16 %4018, i32 0
  %4020 = and <16 x i16> %4019, <i16 63, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef>
  %4021 = lshr <16 x i16> %4020, <i16 1, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0>
  %4022 = shufflevector <16 x i16> %4021, <16 x i16> undef, <16 x i32> zeroinitializer
  %4023 = sext i32 %4017 to i64
  %4024 = getelementptr inbounds i16, i16* %5, i64 %4023
  %4025 = getelementptr inbounds i16, i16* %4024, i64 1
  br label %4026

4026:                                             ; preds = %4077, %4016
  %4027 = phi i64 [ 0, %4016 ], [ %4081, %4077 ]
  %4028 = add nsw i64 %4027, %4023
  %4029 = icmp slt i64 %4028, 95
  br i1 %4029, label %4030, label %4077

4030:                                             ; preds = %4026
  %4031 = getelementptr inbounds i16, i16* %4024, i64 %4027
  %4032 = bitcast i16* %4031 to <16 x i16>*
  %4033 = load <16 x i16>, <16 x i16>* %4032, align 1
  %4034 = getelementptr inbounds i16, i16* %4025, i64 %4027
  %4035 = bitcast i16* %4034 to <16 x i16>*
  %4036 = load <16 x i16>, <16 x i16>* %4035, align 1
  %4037 = sub <16 x i16> %4036, %4033
  %4038 = shl <16 x i16> %4033, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %4039 = or <16 x i16> %4038, <i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16>
  %4040 = mul <16 x i16> %4037, %4022
  %4041 = add <16 x i16> %4040, %4039
  %4042 = lshr <16 x i16> %4041, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %4043 = trunc i64 %4028 to i16
  %4044 = add i16 %4043, 1
  %4045 = add i16 %4043, 2
  %4046 = add i16 %4043, 3
  %4047 = add i16 %4043, 4
  %4048 = add i16 %4043, 5
  %4049 = add i16 %4043, 6
  %4050 = add i16 %4043, 7
  %4051 = add i16 %4043, 8
  %4052 = add i16 %4043, 9
  %4053 = add i16 %4043, 10
  %4054 = add i16 %4043, 11
  %4055 = add i16 %4043, 12
  %4056 = add i16 %4043, 13
  %4057 = add i16 %4043, 14
  %4058 = add i16 %4043, 15
  %4059 = insertelement <16 x i16> undef, i16 %4043, i32 0
  %4060 = insertelement <16 x i16> %4059, i16 %4044, i32 1
  %4061 = insertelement <16 x i16> %4060, i16 %4045, i32 2
  %4062 = insertelement <16 x i16> %4061, i16 %4046, i32 3
  %4063 = insertelement <16 x i16> %4062, i16 %4047, i32 4
  %4064 = insertelement <16 x i16> %4063, i16 %4048, i32 5
  %4065 = insertelement <16 x i16> %4064, i16 %4049, i32 6
  %4066 = insertelement <16 x i16> %4065, i16 %4050, i32 7
  %4067 = insertelement <16 x i16> %4066, i16 %4051, i32 8
  %4068 = insertelement <16 x i16> %4067, i16 %4052, i32 9
  %4069 = insertelement <16 x i16> %4068, i16 %4053, i32 10
  %4070 = insertelement <16 x i16> %4069, i16 %4054, i32 11
  %4071 = insertelement <16 x i16> %4070, i16 %4055, i32 12
  %4072 = insertelement <16 x i16> %4071, i16 %4056, i32 13
  %4073 = insertelement <16 x i16> %4072, i16 %4057, i32 14
  %4074 = insertelement <16 x i16> %4073, i16 %4058, i32 15
  %4075 = icmp slt <16 x i16> %4074, <i16 95, i16 95, i16 95, i16 95, i16 95, i16 95, i16 95, i16 95, i16 95, i16 95, i16 95, i16 95, i16 95, i16 95, i16 95, i16 95>
  %4076 = select <16 x i1> %4075, <16 x i16> %4042, <16 x i16> %3947
  br label %4077

4077:                                             ; preds = %4026, %4030
  %4078 = phi <16 x i16> [ %4076, %4030 ], [ %3947, %4026 ]
  %4079 = getelementptr inbounds i16, i16* %3949, i64 %4027
  %4080 = bitcast i16* %4079 to <16 x i16>*
  store <16 x i16> %4078, <16 x i16>* %4080, align 1
  %4081 = add nuw nsw i64 %4027, 16
  %4082 = icmp ult i64 %4081, 64
  br i1 %4082, label %4026, label %4083

4083:                                             ; preds = %4077
  %4084 = add nsw i32 %3951, %8
  %4085 = add nuw nsw i32 %3950, 1
  %4086 = getelementptr inbounds i16, i16* %3949, i64 64
  %4087 = icmp eq i32 %4085, 32
  br i1 %4087, label %4089, label %3948

4088:                                             ; preds = %3939
  call fastcc void @highbd_dr_prediction_32bit_z1_64xN_avx2(i32 32, i16* nonnull %3942, i64 64, i16* %5, i32 %8) #8
  br label %4089

4089:                                             ; preds = %4083, %3975, %3979, %3953, %4088
  call fastcc void @highbd_transpose(i16* nonnull %3942, i64 64, i16* %0, i64 %1, i32 32, i32 64) #8
  call void @llvm.lifetime.end.p0i8(i64 4096, i8* nonnull %3940) #8
  br label %7784

4090:                                             ; preds = %2680
  switch i32 %2, label %7784 [
    i32 4, label %4091
    i32 8, label %4378
    i32 16, label %4935
  ]

4091:                                             ; preds = %4090
  %4092 = bitcast [4 x <4 x i64>]* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %4092) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %4092, i8 -86, i64 128, i1 false) #8
  %4093 = icmp slt i32 %9, 12
  %4094 = getelementptr inbounds i16, i16* %5, i64 19
  %4095 = load i16, i16* %4094, align 2
  %4096 = insertelement <16 x i16> undef, i16 %4095, i32 0
  %4097 = shufflevector <16 x i16> %4096, <16 x i16> undef, <16 x i32> zeroinitializer
  br i1 %4093, label %4098, label %4170

4098:                                             ; preds = %4091, %4112
  %4099 = phi i64 [ %4168, %4112 ], [ 0, %4091 ]
  %4100 = phi i32 [ %4167, %4112 ], [ %8, %4091 ]
  %4101 = ashr i32 %4100, 6
  %4102 = icmp slt i32 %4100, 1216
  br i1 %4102, label %4112, label %4103

4103:                                             ; preds = %4098
  %4104 = trunc i64 %4099 to i32
  %4105 = icmp slt i32 %4104, 4
  br i1 %4105, label %4106, label %4275

4106:                                             ; preds = %4103
  %4107 = and i64 %4099, 4294967295
  %4108 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %12, i64 0, i64 %4107
  %4109 = bitcast <4 x i64>* %4108 to <16 x i16>*
  store <16 x i16> %4097, <16 x i16>* %4109, align 32
  %4110 = add nuw nsw i64 %4107, 1
  %4111 = icmp eq i64 %4110, 4
  br i1 %4111, label %4275, label %7949

4112:                                             ; preds = %4098
  %4113 = trunc i32 %4100 to i16
  %4114 = insertelement <16 x i16> undef, i16 %4113, i32 0
  %4115 = and <16 x i16> %4114, <i16 63, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef>
  %4116 = lshr <16 x i16> %4115, <i16 1, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0>
  %4117 = shufflevector <16 x i16> %4116, <16 x i16> undef, <16 x i32> zeroinitializer
  %4118 = sext i32 %4101 to i64
  %4119 = getelementptr inbounds i16, i16* %5, i64 %4118
  %4120 = bitcast i16* %4119 to <16 x i16>*
  %4121 = load <16 x i16>, <16 x i16>* %4120, align 1
  %4122 = getelementptr inbounds i16, i16* %4119, i64 1
  %4123 = bitcast i16* %4122 to <16 x i16>*
  %4124 = load <16 x i16>, <16 x i16>* %4123, align 1
  %4125 = sub <16 x i16> %4124, %4121
  %4126 = shl <16 x i16> %4121, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %4127 = or <16 x i16> %4126, <i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16>
  %4128 = mul <16 x i16> %4125, %4117
  %4129 = add <16 x i16> %4128, %4127
  %4130 = lshr <16 x i16> %4129, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %4131 = trunc i32 %4101 to i16
  %4132 = add i16 %4131, 1
  %4133 = add i16 %4131, 2
  %4134 = add i16 %4131, 3
  %4135 = add i16 %4131, 4
  %4136 = add i16 %4131, 5
  %4137 = add i16 %4131, 6
  %4138 = add i16 %4131, 7
  %4139 = add i16 %4131, 8
  %4140 = add i16 %4131, 9
  %4141 = add i16 %4131, 10
  %4142 = add i16 %4131, 11
  %4143 = add i16 %4131, 12
  %4144 = add i16 %4131, 13
  %4145 = add i16 %4131, 14
  %4146 = add i16 %4131, 15
  %4147 = insertelement <16 x i16> undef, i16 %4131, i32 0
  %4148 = insertelement <16 x i16> %4147, i16 %4132, i32 1
  %4149 = insertelement <16 x i16> %4148, i16 %4133, i32 2
  %4150 = insertelement <16 x i16> %4149, i16 %4134, i32 3
  %4151 = insertelement <16 x i16> %4150, i16 %4135, i32 4
  %4152 = insertelement <16 x i16> %4151, i16 %4136, i32 5
  %4153 = insertelement <16 x i16> %4152, i16 %4137, i32 6
  %4154 = insertelement <16 x i16> %4153, i16 %4138, i32 7
  %4155 = insertelement <16 x i16> %4154, i16 %4139, i32 8
  %4156 = insertelement <16 x i16> %4155, i16 %4140, i32 9
  %4157 = insertelement <16 x i16> %4156, i16 %4141, i32 10
  %4158 = insertelement <16 x i16> %4157, i16 %4142, i32 11
  %4159 = insertelement <16 x i16> %4158, i16 %4143, i32 12
  %4160 = insertelement <16 x i16> %4159, i16 %4144, i32 13
  %4161 = insertelement <16 x i16> %4160, i16 %4145, i32 14
  %4162 = insertelement <16 x i16> %4161, i16 %4146, i32 15
  %4163 = icmp slt <16 x i16> %4162, <i16 19, i16 19, i16 19, i16 19, i16 19, i16 19, i16 19, i16 19, i16 19, i16 19, i16 19, i16 19, i16 19, i16 19, i16 19, i16 19>
  %4164 = select <16 x i1> %4163, <16 x i16> %4130, <16 x i16> %4097
  %4165 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %12, i64 0, i64 %4099
  %4166 = bitcast <4 x i64>* %4165 to <16 x i16>*
  store <16 x i16> %4164, <16 x i16>* %4166, align 32
  %4167 = add nsw i32 %4100, %8
  %4168 = add nuw nsw i64 %4099, 1
  %4169 = icmp eq i64 %4168, 4
  br i1 %4169, label %4275, label %4098

4170:                                             ; preds = %4091, %4231
  %4171 = phi i64 [ %4273, %4231 ], [ 0, %4091 ]
  %4172 = phi i32 [ %4272, %4231 ], [ %8, %4091 ]
  %4173 = ashr i32 %4172, 6
  %4174 = icmp slt i32 %4172, 1216
  br i1 %4174, label %4184, label %4175

4175:                                             ; preds = %4170
  %4176 = trunc i64 %4171 to i32
  %4177 = icmp slt i32 %4176, 4
  br i1 %4177, label %4178, label %4275

4178:                                             ; preds = %4175
  %4179 = and i64 %4171, 4294967295
  %4180 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %12, i64 0, i64 %4179
  %4181 = bitcast <4 x i64>* %4180 to <16 x i16>*
  store <16 x i16> %4097, <16 x i16>* %4181, align 32
  %4182 = add nuw nsw i64 %4179, 1
  %4183 = icmp eq i64 %4182, 4
  br i1 %4183, label %4275, label %7962

4184:                                             ; preds = %4170
  %4185 = insertelement <8 x i32> undef, i32 %4172, i32 0
  %4186 = and <8 x i32> %4185, <i32 63, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %4187 = lshr <8 x i32> %4186, <i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>
  %4188 = shufflevector <8 x i32> %4187, <8 x i32> undef, <8 x i32> zeroinitializer
  %4189 = sext i32 %4173 to i64
  %4190 = getelementptr inbounds i16, i16* %5, i64 %4189
  %4191 = bitcast i16* %4190 to <8 x i16>*
  %4192 = load <8 x i16>, <8 x i16>* %4191, align 1
  %4193 = zext <8 x i16> %4192 to <8 x i32>
  %4194 = getelementptr inbounds i16, i16* %4190, i64 1
  %4195 = bitcast i16* %4194 to <8 x i16>*
  %4196 = load <8 x i16>, <8 x i16>* %4195, align 1
  %4197 = zext <8 x i16> %4196 to <8 x i32>
  %4198 = sub nsw <8 x i32> %4197, %4193
  %4199 = shl nuw nsw <8 x i32> %4193, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %4200 = or <8 x i32> %4199, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %4201 = mul <8 x i32> %4198, %4188
  %4202 = add <8 x i32> %4201, %4200
  %4203 = lshr <8 x i32> %4202, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %4204 = bitcast <8 x i32> %4203 to <4 x i64>
  %4205 = shufflevector <4 x i64> %4204, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %4206 = shufflevector <2 x i64> %4205, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %4207 = bitcast <4 x i64> %4206 to <8 x i32>
  %4208 = tail call <16 x i16> @llvm.x86.avx2.packusdw(<8 x i32> %4203, <8 x i32> %4207) #8
  %4209 = bitcast <16 x i16> %4208 to <4 x i64>
  %4210 = icmp slt i32 %4172, 704
  br i1 %4210, label %4211, label %4231

4211:                                             ; preds = %4184
  %4212 = getelementptr inbounds i16, i16* %4190, i64 8
  %4213 = bitcast i16* %4212 to <8 x i16>*
  %4214 = load <8 x i16>, <8 x i16>* %4213, align 1
  %4215 = zext <8 x i16> %4214 to <8 x i32>
  %4216 = getelementptr inbounds i16, i16* %4190, i64 9
  %4217 = bitcast i16* %4216 to <8 x i16>*
  %4218 = load <8 x i16>, <8 x i16>* %4217, align 1
  %4219 = zext <8 x i16> %4218 to <8 x i32>
  %4220 = sub nsw <8 x i32> %4219, %4215
  %4221 = shl nuw nsw <8 x i32> %4215, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %4222 = or <8 x i32> %4221, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %4223 = mul <8 x i32> %4220, %4188
  %4224 = add <8 x i32> %4223, %4222
  %4225 = lshr <8 x i32> %4224, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %4226 = bitcast <8 x i32> %4225 to <4 x i64>
  %4227 = shufflevector <4 x i64> %4226, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %4228 = shufflevector <2 x i64> %4227, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %4229 = bitcast <4 x i64> %4228 to <8 x i32>
  %4230 = tail call <16 x i16> @llvm.x86.avx2.packusdw(<8 x i32> %4225, <8 x i32> %4229) #8
  br label %4231

4231:                                             ; preds = %4211, %4184
  %4232 = phi <16 x i16> [ %4230, %4211 ], [ %4097, %4184 ]
  %4233 = bitcast <16 x i16> %4232 to <4 x i64>
  %4234 = shufflevector <4 x i64> %4209, <4 x i64> %4233, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %4235 = trunc i32 %4173 to i16
  %4236 = add i16 %4235, 1
  %4237 = add i16 %4235, 2
  %4238 = add i16 %4235, 3
  %4239 = add i16 %4235, 4
  %4240 = add i16 %4235, 5
  %4241 = add i16 %4235, 6
  %4242 = add i16 %4235, 7
  %4243 = add i16 %4235, 8
  %4244 = add i16 %4235, 9
  %4245 = add i16 %4235, 10
  %4246 = add i16 %4235, 11
  %4247 = add i16 %4235, 12
  %4248 = add i16 %4235, 13
  %4249 = add i16 %4235, 14
  %4250 = add i16 %4235, 15
  %4251 = insertelement <16 x i16> undef, i16 %4235, i32 0
  %4252 = insertelement <16 x i16> %4251, i16 %4236, i32 1
  %4253 = insertelement <16 x i16> %4252, i16 %4237, i32 2
  %4254 = insertelement <16 x i16> %4253, i16 %4238, i32 3
  %4255 = insertelement <16 x i16> %4254, i16 %4239, i32 4
  %4256 = insertelement <16 x i16> %4255, i16 %4240, i32 5
  %4257 = insertelement <16 x i16> %4256, i16 %4241, i32 6
  %4258 = insertelement <16 x i16> %4257, i16 %4242, i32 7
  %4259 = insertelement <16 x i16> %4258, i16 %4243, i32 8
  %4260 = insertelement <16 x i16> %4259, i16 %4244, i32 9
  %4261 = insertelement <16 x i16> %4260, i16 %4245, i32 10
  %4262 = insertelement <16 x i16> %4261, i16 %4246, i32 11
  %4263 = insertelement <16 x i16> %4262, i16 %4247, i32 12
  %4264 = insertelement <16 x i16> %4263, i16 %4248, i32 13
  %4265 = insertelement <16 x i16> %4264, i16 %4249, i32 14
  %4266 = insertelement <16 x i16> %4265, i16 %4250, i32 15
  %4267 = icmp slt <16 x i16> %4266, <i16 19, i16 19, i16 19, i16 19, i16 19, i16 19, i16 19, i16 19, i16 19, i16 19, i16 19, i16 19, i16 19, i16 19, i16 19, i16 19>
  %4268 = bitcast <4 x i64> %4234 to <16 x i16>
  %4269 = select <16 x i1> %4267, <16 x i16> %4268, <16 x i16> %4097
  %4270 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %12, i64 0, i64 %4171
  %4271 = bitcast <4 x i64>* %4270 to <16 x i16>*
  store <16 x i16> %4269, <16 x i16>* %4271, align 32
  %4272 = add nsw i32 %4172, %8
  %4273 = add nuw nsw i64 %4171, 1
  %4274 = icmp eq i64 %4273, 4
  br i1 %4274, label %4275, label %4170

4275:                                             ; preds = %4231, %4178, %7962, %7967, %7972, %4112, %4106, %7949, %7954, %7959, %4103, %4175
  %4276 = bitcast [4 x <4 x i64>]* %12 to <16 x i16>*
  %4277 = load <16 x i16>, <16 x i16>* %4276, align 32
  %4278 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %12, i64 0, i64 1
  %4279 = bitcast <4 x i64>* %4278 to <16 x i16>*
  %4280 = load <16 x i16>, <16 x i16>* %4279, align 32
  %4281 = shufflevector <16 x i16> %4277, <16 x i16> %4280, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %4282 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %12, i64 0, i64 2
  %4283 = bitcast <4 x i64>* %4282 to <16 x i16>*
  %4284 = load <16 x i16>, <16 x i16>* %4283, align 32
  %4285 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %12, i64 0, i64 3
  %4286 = bitcast <4 x i64>* %4285 to <16 x i16>*
  %4287 = load <16 x i16>, <16 x i16>* %4286, align 32
  %4288 = shufflevector <16 x i16> %4284, <16 x i16> %4287, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %4289 = shufflevector <16 x i16> %4277, <16 x i16> %4280, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %4290 = shufflevector <16 x i16> %4284, <16 x i16> %4287, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %4291 = bitcast <16 x i16> %4281 to <8 x i32>
  %4292 = bitcast <16 x i16> %4288 to <8 x i32>
  %4293 = shufflevector <8 x i32> %4291, <8 x i32> %4292, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %4294 = bitcast <8 x i32> %4293 to <4 x i64>
  %4295 = bitcast <16 x i16> %4289 to <8 x i32>
  %4296 = bitcast <16 x i16> %4290 to <8 x i32>
  %4297 = shufflevector <8 x i32> %4295, <8 x i32> %4296, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %4298 = bitcast <8 x i32> %4297 to <4 x i64>
  %4299 = shufflevector <4 x i64> %4298, <4 x i64> undef, <4 x i32> <i32 undef, i32 0, i32 undef, i32 2>
  %4300 = shufflevector <8 x i32> %4291, <8 x i32> %4292, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %4301 = bitcast <8 x i32> %4300 to <4 x i64>
  %4302 = shufflevector <8 x i32> %4295, <8 x i32> %4296, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %4303 = bitcast <8 x i32> %4302 to <4 x i64>
  %4304 = shufflevector <4 x i64> %4303, <4 x i64> undef, <4 x i32> <i32 undef, i32 0, i32 undef, i32 2>
  %4305 = extractelement <4 x i64> %4294, i32 0
  %4306 = bitcast i16* %0 to i64*
  store i64 %4305, i64* %4306, align 1
  %4307 = bitcast <4 x i64> %4299 to <32 x i8>
  %4308 = shufflevector <32 x i8> %4307, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %4309 = bitcast <32 x i8> %4308 to <4 x i64>
  %4310 = shl nsw i64 %1, 2
  %4311 = getelementptr inbounds i16, i16* %0, i64 %4310
  %4312 = extractelement <4 x i64> %4309, i32 0
  %4313 = bitcast i16* %4311 to i64*
  store i64 %4312, i64* %4313, align 1
  %4314 = shl nsw i64 %1, 3
  %4315 = getelementptr inbounds i16, i16* %0, i64 %4314
  %4316 = extractelement <4 x i64> %4294, i32 2
  %4317 = bitcast i16* %4315 to i64*
  store i64 %4316, i64* %4317, align 1
  %4318 = mul nsw i64 %1, 12
  %4319 = getelementptr inbounds i16, i16* %0, i64 %4318
  %4320 = extractelement <4 x i64> %4309, i32 2
  %4321 = bitcast i16* %4319 to i64*
  store i64 %4320, i64* %4321, align 1
  %4322 = getelementptr inbounds i16, i16* %0, i64 %1
  %4323 = extractelement <4 x i64> %4294, i32 1
  %4324 = bitcast i16* %4322 to i64*
  store i64 %4323, i64* %4324, align 1
  %4325 = bitcast <8 x i32> %4297 to <32 x i8>
  %4326 = shufflevector <32 x i8> %4325, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %4327 = bitcast <32 x i8> %4326 to <4 x i64>
  %4328 = mul nsw i64 %1, 5
  %4329 = getelementptr inbounds i16, i16* %0, i64 %4328
  %4330 = extractelement <4 x i64> %4327, i32 0
  %4331 = bitcast i16* %4329 to i64*
  store i64 %4330, i64* %4331, align 1
  %4332 = mul nsw i64 %1, 9
  %4333 = getelementptr inbounds i16, i16* %0, i64 %4332
  %4334 = extractelement <4 x i64> %4294, i32 3
  %4335 = bitcast i16* %4333 to i64*
  store i64 %4334, i64* %4335, align 1
  %4336 = mul nsw i64 %1, 13
  %4337 = getelementptr inbounds i16, i16* %0, i64 %4336
  %4338 = extractelement <4 x i64> %4327, i32 2
  %4339 = bitcast i16* %4337 to i64*
  store i64 %4338, i64* %4339, align 1
  %4340 = shl nsw i64 %1, 1
  %4341 = getelementptr inbounds i16, i16* %0, i64 %4340
  %4342 = extractelement <4 x i64> %4301, i32 0
  %4343 = bitcast i16* %4341 to i64*
  store i64 %4342, i64* %4343, align 1
  %4344 = bitcast <4 x i64> %4304 to <32 x i8>
  %4345 = shufflevector <32 x i8> %4344, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %4346 = bitcast <32 x i8> %4345 to <4 x i64>
  %4347 = mul nsw i64 %1, 6
  %4348 = getelementptr inbounds i16, i16* %0, i64 %4347
  %4349 = extractelement <4 x i64> %4346, i32 0
  %4350 = bitcast i16* %4348 to i64*
  store i64 %4349, i64* %4350, align 1
  %4351 = mul nsw i64 %1, 10
  %4352 = getelementptr inbounds i16, i16* %0, i64 %4351
  %4353 = extractelement <4 x i64> %4301, i32 2
  %4354 = bitcast i16* %4352 to i64*
  store i64 %4353, i64* %4354, align 1
  %4355 = mul nsw i64 %1, 14
  %4356 = getelementptr inbounds i16, i16* %0, i64 %4355
  %4357 = extractelement <4 x i64> %4346, i32 2
  %4358 = bitcast i16* %4356 to i64*
  store i64 %4357, i64* %4358, align 1
  %4359 = mul nsw i64 %1, 3
  %4360 = getelementptr inbounds i16, i16* %0, i64 %4359
  %4361 = extractelement <4 x i64> %4301, i32 1
  %4362 = bitcast i16* %4360 to i64*
  store i64 %4361, i64* %4362, align 1
  %4363 = bitcast <8 x i32> %4302 to <32 x i8>
  %4364 = shufflevector <32 x i8> %4363, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %4365 = bitcast <32 x i8> %4364 to <4 x i64>
  %4366 = mul nsw i64 %1, 7
  %4367 = getelementptr inbounds i16, i16* %0, i64 %4366
  %4368 = extractelement <4 x i64> %4365, i32 0
  %4369 = bitcast i16* %4367 to i64*
  store i64 %4368, i64* %4369, align 1
  %4370 = mul nsw i64 %1, 11
  %4371 = getelementptr inbounds i16, i16* %0, i64 %4370
  %4372 = extractelement <4 x i64> %4301, i32 3
  %4373 = bitcast i16* %4371 to i64*
  store i64 %4372, i64* %4373, align 1
  %4374 = mul nsw i64 %1, 15
  %4375 = getelementptr inbounds i16, i16* %0, i64 %4374
  %4376 = extractelement <4 x i64> %4365, i32 2
  %4377 = bitcast i16* %4375 to i64*
  store i64 %4376, i64* %4377, align 1
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %4092) #8
  br label %7784

4378:                                             ; preds = %4090
  %4379 = bitcast [16 x <4 x i64>]* %23 to i8*
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %4379) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %4379, i8 -86, i64 512, i1 false) #8
  %4380 = icmp slt i32 %9, 12
  %4381 = getelementptr inbounds i16, i16* %5, i64 39
  %4382 = load i16, i16* %4381, align 2
  %4383 = insertelement <16 x i16> undef, i16 %4382, i32 0
  %4384 = shufflevector <16 x i16> %4383, <16 x i16> undef, <16 x i32> zeroinitializer
  br i1 %4380, label %4385, label %4514

4385:                                             ; preds = %4378, %4509
  %4386 = phi i64 [ %4512, %4509 ], [ 0, %4378 ]
  %4387 = phi i32 [ %4511, %4509 ], [ %8, %4378 ]
  %4388 = ashr i32 %4387, 6
  %4389 = icmp slt i32 %4387, 2496
  br i1 %4389, label %4402, label %4390

4390:                                             ; preds = %4385
  %4391 = trunc i64 %4386 to i32
  %4392 = icmp slt i32 %4391, 8
  br i1 %4392, label %4393, label %4682

4393:                                             ; preds = %4390
  %4394 = and i64 %4386, 4294967295
  %4395 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %23, i64 0, i64 %4394
  %4396 = bitcast <4 x i64>* %4395 to <16 x i16>*
  store <16 x i16> %4384, <16 x i16>* %4396, align 32
  %4397 = add nuw nsw i64 %4394, 8
  %4398 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %23, i64 0, i64 %4397
  %4399 = bitcast <4 x i64>* %4398 to <16 x i16>*
  store <16 x i16> %4384, <16 x i16>* %4399, align 32
  %4400 = add nuw nsw i64 %4394, 1
  %4401 = icmp eq i64 %4400, 8
  br i1 %4401, label %4682, label %7975

4402:                                             ; preds = %4385
  %4403 = trunc i32 %4387 to i16
  %4404 = insertelement <16 x i16> undef, i16 %4403, i32 0
  %4405 = and <16 x i16> %4404, <i16 63, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef>
  %4406 = lshr <16 x i16> %4405, <i16 1, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0>
  %4407 = shufflevector <16 x i16> %4406, <16 x i16> undef, <16 x i32> zeroinitializer
  %4408 = sext i32 %4388 to i64
  %4409 = getelementptr inbounds i16, i16* %5, i64 %4408
  %4410 = getelementptr inbounds i16, i16* %4409, i64 1
  %4411 = add nuw nsw i64 %4386, 8
  %4412 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %23, i64 0, i64 %4411
  %4413 = bitcast <4 x i64>* %4412 to <16 x i16>*
  %4414 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %23, i64 0, i64 %4386
  %4415 = bitcast <4 x i64>* %4414 to <16 x i16>*
  %4416 = bitcast i16* %4409 to <16 x i16>*
  %4417 = load <16 x i16>, <16 x i16>* %4416, align 1
  %4418 = bitcast i16* %4410 to <16 x i16>*
  %4419 = load <16 x i16>, <16 x i16>* %4418, align 1
  %4420 = sub <16 x i16> %4419, %4417
  %4421 = shl <16 x i16> %4417, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %4422 = or <16 x i16> %4421, <i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16>
  %4423 = mul <16 x i16> %4420, %4407
  %4424 = add <16 x i16> %4423, %4422
  %4425 = lshr <16 x i16> %4424, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %4426 = trunc i32 %4388 to i16
  %4427 = add i16 %4426, 1
  %4428 = add i16 %4426, 2
  %4429 = add i16 %4426, 3
  %4430 = add i16 %4426, 4
  %4431 = add i16 %4426, 5
  %4432 = add i16 %4426, 6
  %4433 = add i16 %4426, 7
  %4434 = add i16 %4426, 8
  %4435 = add i16 %4426, 9
  %4436 = add i16 %4426, 10
  %4437 = add i16 %4426, 11
  %4438 = add i16 %4426, 12
  %4439 = add i16 %4426, 13
  %4440 = add i16 %4426, 14
  %4441 = add i16 %4426, 15
  %4442 = insertelement <16 x i16> undef, i16 %4426, i32 0
  %4443 = insertelement <16 x i16> %4442, i16 %4427, i32 1
  %4444 = insertelement <16 x i16> %4443, i16 %4428, i32 2
  %4445 = insertelement <16 x i16> %4444, i16 %4429, i32 3
  %4446 = insertelement <16 x i16> %4445, i16 %4430, i32 4
  %4447 = insertelement <16 x i16> %4446, i16 %4431, i32 5
  %4448 = insertelement <16 x i16> %4447, i16 %4432, i32 6
  %4449 = insertelement <16 x i16> %4448, i16 %4433, i32 7
  %4450 = insertelement <16 x i16> %4449, i16 %4434, i32 8
  %4451 = insertelement <16 x i16> %4450, i16 %4435, i32 9
  %4452 = insertelement <16 x i16> %4451, i16 %4436, i32 10
  %4453 = insertelement <16 x i16> %4452, i16 %4437, i32 11
  %4454 = insertelement <16 x i16> %4453, i16 %4438, i32 12
  %4455 = insertelement <16 x i16> %4454, i16 %4439, i32 13
  %4456 = insertelement <16 x i16> %4455, i16 %4440, i32 14
  %4457 = insertelement <16 x i16> %4456, i16 %4441, i32 15
  %4458 = icmp slt <16 x i16> %4457, <i16 39, i16 39, i16 39, i16 39, i16 39, i16 39, i16 39, i16 39, i16 39, i16 39, i16 39, i16 39, i16 39, i16 39, i16 39, i16 39>
  %4459 = select <16 x i1> %4458, <16 x i16> %4425, <16 x i16> %4384
  store <16 x i16> %4459, <16 x i16>* %4415, align 32
  %4460 = add nsw i64 %4408, 16
  %4461 = icmp slt i64 %4460, 39
  br i1 %4461, label %4462, label %4509

4462:                                             ; preds = %4402
  %4463 = getelementptr inbounds i16, i16* %4409, i64 16
  %4464 = bitcast i16* %4463 to <16 x i16>*
  %4465 = load <16 x i16>, <16 x i16>* %4464, align 1
  %4466 = getelementptr inbounds i16, i16* %4410, i64 16
  %4467 = bitcast i16* %4466 to <16 x i16>*
  %4468 = load <16 x i16>, <16 x i16>* %4467, align 1
  %4469 = sub <16 x i16> %4468, %4465
  %4470 = shl <16 x i16> %4465, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %4471 = or <16 x i16> %4470, <i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16>
  %4472 = mul <16 x i16> %4469, %4407
  %4473 = add <16 x i16> %4472, %4471
  %4474 = lshr <16 x i16> %4473, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %4475 = trunc i64 %4460 to i16
  %4476 = add i16 %4475, 1
  %4477 = add i16 %4475, 2
  %4478 = add i16 %4475, 3
  %4479 = add i16 %4475, 4
  %4480 = add i16 %4475, 5
  %4481 = add i16 %4475, 6
  %4482 = add i16 %4475, 7
  %4483 = add i16 %4475, 8
  %4484 = add i16 %4475, 9
  %4485 = add i16 %4475, 10
  %4486 = add i16 %4475, 11
  %4487 = add i16 %4475, 12
  %4488 = add i16 %4475, 13
  %4489 = add i16 %4475, 14
  %4490 = add i16 %4475, 15
  %4491 = insertelement <16 x i16> undef, i16 %4475, i32 0
  %4492 = insertelement <16 x i16> %4491, i16 %4476, i32 1
  %4493 = insertelement <16 x i16> %4492, i16 %4477, i32 2
  %4494 = insertelement <16 x i16> %4493, i16 %4478, i32 3
  %4495 = insertelement <16 x i16> %4494, i16 %4479, i32 4
  %4496 = insertelement <16 x i16> %4495, i16 %4480, i32 5
  %4497 = insertelement <16 x i16> %4496, i16 %4481, i32 6
  %4498 = insertelement <16 x i16> %4497, i16 %4482, i32 7
  %4499 = insertelement <16 x i16> %4498, i16 %4483, i32 8
  %4500 = insertelement <16 x i16> %4499, i16 %4484, i32 9
  %4501 = insertelement <16 x i16> %4500, i16 %4485, i32 10
  %4502 = insertelement <16 x i16> %4501, i16 %4486, i32 11
  %4503 = insertelement <16 x i16> %4502, i16 %4487, i32 12
  %4504 = insertelement <16 x i16> %4503, i16 %4488, i32 13
  %4505 = insertelement <16 x i16> %4504, i16 %4489, i32 14
  %4506 = insertelement <16 x i16> %4505, i16 %4490, i32 15
  %4507 = icmp slt <16 x i16> %4506, <i16 39, i16 39, i16 39, i16 39, i16 39, i16 39, i16 39, i16 39, i16 39, i16 39, i16 39, i16 39, i16 39, i16 39, i16 39, i16 39>
  %4508 = select <16 x i1> %4507, <16 x i16> %4474, <16 x i16> %4384
  br label %4509

4509:                                             ; preds = %4462, %4402
  %4510 = phi <16 x i16> [ %4508, %4462 ], [ %4384, %4402 ]
  store <16 x i16> %4510, <16 x i16>* %4413, align 32
  %4511 = add nsw i32 %4387, %8
  %4512 = add nuw nsw i64 %4386, 1
  %4513 = icmp eq i64 %4512, 8
  br i1 %4513, label %4682, label %4385

4514:                                             ; preds = %4378
  %4515 = bitcast <16 x i16> %4384 to <4 x i64>
  br label %4516

4516:                                             ; preds = %4677, %4514
  %4517 = phi i64 [ 0, %4514 ], [ %4680, %4677 ]
  %4518 = phi i32 [ %8, %4514 ], [ %4679, %4677 ]
  %4519 = ashr i32 %4518, 6
  %4520 = icmp slt i32 %4518, 2496
  br i1 %4520, label %4533, label %4521

4521:                                             ; preds = %4516
  %4522 = trunc i64 %4517 to i32
  %4523 = icmp slt i32 %4522, 8
  br i1 %4523, label %4524, label %4682

4524:                                             ; preds = %4521
  %4525 = and i64 %4517, 4294967295
  %4526 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %23, i64 0, i64 %4525
  %4527 = bitcast <4 x i64>* %4526 to <16 x i16>*
  store <16 x i16> %4384, <16 x i16>* %4527, align 32
  %4528 = add nuw nsw i64 %4525, 8
  %4529 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %23, i64 0, i64 %4528
  %4530 = bitcast <4 x i64>* %4529 to <16 x i16>*
  store <16 x i16> %4384, <16 x i16>* %4530, align 32
  %4531 = add nuw nsw i64 %4525, 1
  %4532 = icmp eq i64 %4531, 8
  br i1 %4532, label %4682, label %8029

4533:                                             ; preds = %4516
  %4534 = insertelement <8 x i32> undef, i32 %4518, i32 0
  %4535 = and <8 x i32> %4534, <i32 4128831, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %4536 = lshr <8 x i32> %4535, <i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>
  %4537 = shufflevector <8 x i32> %4536, <8 x i32> undef, <8 x i32> zeroinitializer
  %4538 = sext i32 %4519 to i64
  %4539 = getelementptr inbounds i16, i16* %5, i64 %4538
  %4540 = getelementptr inbounds i16, i16* %4539, i64 1
  %4541 = getelementptr inbounds i16, i16* %4539, i64 8
  %4542 = getelementptr inbounds i16, i16* %4539, i64 9
  %4543 = add nuw nsw i64 %4517, 8
  %4544 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %23, i64 0, i64 %4543
  %4545 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %23, i64 0, i64 %4517
  %4546 = bitcast i16* %4539 to <8 x i16>*
  %4547 = load <8 x i16>, <8 x i16>* %4546, align 1
  %4548 = zext <8 x i16> %4547 to <8 x i32>
  %4549 = bitcast i16* %4540 to <8 x i16>*
  %4550 = load <8 x i16>, <8 x i16>* %4549, align 1
  %4551 = zext <8 x i16> %4550 to <8 x i32>
  %4552 = sub nsw <8 x i32> %4551, %4548
  %4553 = shl nuw nsw <8 x i32> %4548, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %4554 = or <8 x i32> %4553, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %4555 = mul <8 x i32> %4552, %4537
  %4556 = add <8 x i32> %4555, %4554
  %4557 = lshr <8 x i32> %4556, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %4558 = bitcast <8 x i32> %4557 to <4 x i64>
  %4559 = shufflevector <4 x i64> %4558, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %4560 = shufflevector <2 x i64> %4559, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %4561 = bitcast <4 x i64> %4560 to <8 x i32>
  %4562 = tail call <16 x i16> @llvm.x86.avx2.packusdw(<8 x i32> %4557, <8 x i32> %4561) #8
  %4563 = bitcast <16 x i16> %4562 to <4 x i64>
  %4564 = icmp slt i32 %4518, 1984
  br i1 %4564, label %4565, label %4584

4565:                                             ; preds = %4533
  %4566 = bitcast i16* %4541 to <8 x i16>*
  %4567 = load <8 x i16>, <8 x i16>* %4566, align 1
  %4568 = zext <8 x i16> %4567 to <8 x i32>
  %4569 = bitcast i16* %4542 to <8 x i16>*
  %4570 = load <8 x i16>, <8 x i16>* %4569, align 1
  %4571 = zext <8 x i16> %4570 to <8 x i32>
  %4572 = sub nsw <8 x i32> %4571, %4568
  %4573 = shl nuw nsw <8 x i32> %4568, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %4574 = or <8 x i32> %4573, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %4575 = mul <8 x i32> %4572, %4537
  %4576 = add <8 x i32> %4575, %4574
  %4577 = lshr <8 x i32> %4576, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %4578 = bitcast <8 x i32> %4577 to <4 x i64>
  %4579 = shufflevector <4 x i64> %4578, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %4580 = shufflevector <2 x i64> %4579, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %4581 = bitcast <4 x i64> %4580 to <8 x i32>
  %4582 = tail call <16 x i16> @llvm.x86.avx2.packusdw(<8 x i32> %4577, <8 x i32> %4581) #8
  %4583 = bitcast <16 x i16> %4582 to <4 x i64>
  br label %4584

4584:                                             ; preds = %4565, %4533
  %4585 = phi <4 x i64> [ %4583, %4565 ], [ %4515, %4533 ]
  %4586 = shufflevector <4 x i64> %4563, <4 x i64> %4585, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %4587 = trunc i32 %4519 to i16
  %4588 = add i16 %4587, 1
  %4589 = add i16 %4587, 2
  %4590 = add i16 %4587, 3
  %4591 = add i16 %4587, 4
  %4592 = add i16 %4587, 5
  %4593 = add i16 %4587, 6
  %4594 = add i16 %4587, 7
  %4595 = add i16 %4587, 8
  %4596 = add i16 %4587, 9
  %4597 = add i16 %4587, 10
  %4598 = add i16 %4587, 11
  %4599 = add i16 %4587, 12
  %4600 = add i16 %4587, 13
  %4601 = add i16 %4587, 14
  %4602 = add i16 %4587, 15
  %4603 = insertelement <16 x i16> undef, i16 %4587, i32 0
  %4604 = insertelement <16 x i16> %4603, i16 %4588, i32 1
  %4605 = insertelement <16 x i16> %4604, i16 %4589, i32 2
  %4606 = insertelement <16 x i16> %4605, i16 %4590, i32 3
  %4607 = insertelement <16 x i16> %4606, i16 %4591, i32 4
  %4608 = insertelement <16 x i16> %4607, i16 %4592, i32 5
  %4609 = insertelement <16 x i16> %4608, i16 %4593, i32 6
  %4610 = insertelement <16 x i16> %4609, i16 %4594, i32 7
  %4611 = insertelement <16 x i16> %4610, i16 %4595, i32 8
  %4612 = insertelement <16 x i16> %4611, i16 %4596, i32 9
  %4613 = insertelement <16 x i16> %4612, i16 %4597, i32 10
  %4614 = insertelement <16 x i16> %4613, i16 %4598, i32 11
  %4615 = insertelement <16 x i16> %4614, i16 %4599, i32 12
  %4616 = insertelement <16 x i16> %4615, i16 %4600, i32 13
  %4617 = insertelement <16 x i16> %4616, i16 %4601, i32 14
  %4618 = insertelement <16 x i16> %4617, i16 %4602, i32 15
  %4619 = icmp slt <16 x i16> %4618, <i16 39, i16 39, i16 39, i16 39, i16 39, i16 39, i16 39, i16 39, i16 39, i16 39, i16 39, i16 39, i16 39, i16 39, i16 39, i16 39>
  %4620 = bitcast <4 x i64> %4586 to <16 x i16>
  %4621 = select <16 x i1> %4619, <16 x i16> %4620, <16 x i16> %4384
  %4622 = bitcast <4 x i64>* %4545 to <16 x i16>*
  store <16 x i16> %4621, <16 x i16>* %4622, align 32
  %4623 = icmp sgt i32 %4518, 1471
  br i1 %4623, label %4677, label %4624

4624:                                             ; preds = %4584
  %4625 = getelementptr inbounds i16, i16* %4539, i64 16
  %4626 = bitcast i16* %4625 to <8 x i16>*
  %4627 = load <8 x i16>, <8 x i16>* %4626, align 1
  %4628 = zext <8 x i16> %4627 to <8 x i32>
  %4629 = getelementptr inbounds i16, i16* %4540, i64 16
  %4630 = bitcast i16* %4629 to <8 x i16>*
  %4631 = load <8 x i16>, <8 x i16>* %4630, align 1
  %4632 = zext <8 x i16> %4631 to <8 x i32>
  %4633 = sub nsw <8 x i32> %4632, %4628
  %4634 = shl nuw nsw <8 x i32> %4628, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %4635 = or <8 x i32> %4634, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %4636 = mul <8 x i32> %4633, %4537
  %4637 = add <8 x i32> %4636, %4635
  %4638 = lshr <8 x i32> %4637, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %4639 = bitcast <8 x i32> %4638 to <4 x i64>
  %4640 = shufflevector <4 x i64> %4639, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %4641 = shufflevector <2 x i64> %4640, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %4642 = bitcast <4 x i64> %4641 to <8 x i32>
  %4643 = tail call <16 x i16> @llvm.x86.avx2.packusdw(<8 x i32> %4638, <8 x i32> %4642) #8
  %4644 = bitcast <16 x i16> %4643 to <4 x i64>
  %4645 = icmp slt i32 %4518, 960
  br i1 %4645, label %4646, label %4667

4646:                                             ; preds = %4624
  %4647 = getelementptr inbounds i16, i16* %4541, i64 16
  %4648 = bitcast i16* %4647 to <8 x i16>*
  %4649 = load <8 x i16>, <8 x i16>* %4648, align 1
  %4650 = zext <8 x i16> %4649 to <8 x i32>
  %4651 = getelementptr inbounds i16, i16* %4542, i64 16
  %4652 = bitcast i16* %4651 to <8 x i16>*
  %4653 = load <8 x i16>, <8 x i16>* %4652, align 1
  %4654 = zext <8 x i16> %4653 to <8 x i32>
  %4655 = sub nsw <8 x i32> %4654, %4650
  %4656 = shl nuw nsw <8 x i32> %4650, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %4657 = or <8 x i32> %4656, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %4658 = mul <8 x i32> %4655, %4537
  %4659 = add <8 x i32> %4658, %4657
  %4660 = lshr <8 x i32> %4659, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %4661 = bitcast <8 x i32> %4660 to <4 x i64>
  %4662 = shufflevector <4 x i64> %4661, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %4663 = shufflevector <2 x i64> %4662, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %4664 = bitcast <4 x i64> %4663 to <8 x i32>
  %4665 = tail call <16 x i16> @llvm.x86.avx2.packusdw(<8 x i32> %4660, <8 x i32> %4664) #8
  %4666 = bitcast <16 x i16> %4665 to <4 x i64>
  br label %4667

4667:                                             ; preds = %4646, %4624
  %4668 = phi <4 x i64> [ %4666, %4646 ], [ %4515, %4624 ]
  %4669 = shufflevector <4 x i64> %4644, <4 x i64> %4668, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %4670 = insertelement <16 x i16> undef, i16 %4587, i32 0
  %4671 = shufflevector <16 x i16> %4670, <16 x i16> undef, <16 x i32> zeroinitializer
  %4672 = add <16 x i16> %4671, <i16 16, i16 17, i16 18, i16 19, i16 20, i16 21, i16 22, i16 23, i16 24, i16 25, i16 26, i16 27, i16 28, i16 29, i16 30, i16 31>
  %4673 = icmp slt <16 x i16> %4672, <i16 39, i16 39, i16 39, i16 39, i16 39, i16 39, i16 39, i16 39, i16 39, i16 39, i16 39, i16 39, i16 39, i16 39, i16 39, i16 39>
  %4674 = bitcast <4 x i64> %4669 to <16 x i16>
  %4675 = select <16 x i1> %4673, <16 x i16> %4674, <16 x i16> %4384
  %4676 = bitcast <16 x i16> %4675 to <4 x i64>
  br label %4677

4677:                                             ; preds = %4667, %4584
  %4678 = phi <4 x i64> [ %4676, %4667 ], [ %4515, %4584 ]
  store <4 x i64> %4678, <4 x i64>* %4544, align 32
  %4679 = add nsw i32 %4518, %8
  %4680 = add nuw nsw i64 %4517, 1
  %4681 = icmp eq i64 %4680, 8
  br i1 %4681, label %4682, label %4516

4682:                                             ; preds = %4677, %4524, %8029, %8037, %8045, %8053, %8061, %8069, %8077, %4509, %4393, %7975, %7983, %7991, %7999, %8007, %8015, %8023, %4390, %4521
  %4683 = bitcast [16 x <4 x i64>]* %23 to <16 x i16>*
  %4684 = load <16 x i16>, <16 x i16>* %4683, align 32
  %4685 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %23, i64 0, i64 1
  %4686 = bitcast <4 x i64>* %4685 to <16 x i16>*
  %4687 = load <16 x i16>, <16 x i16>* %4686, align 32
  %4688 = shufflevector <16 x i16> %4684, <16 x i16> %4687, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %4689 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %23, i64 0, i64 2
  %4690 = bitcast <4 x i64>* %4689 to <16 x i16>*
  %4691 = load <16 x i16>, <16 x i16>* %4690, align 32
  %4692 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %23, i64 0, i64 3
  %4693 = bitcast <4 x i64>* %4692 to <16 x i16>*
  %4694 = load <16 x i16>, <16 x i16>* %4693, align 32
  %4695 = shufflevector <16 x i16> %4691, <16 x i16> %4694, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %4696 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %23, i64 0, i64 4
  %4697 = bitcast <4 x i64>* %4696 to <16 x i16>*
  %4698 = load <16 x i16>, <16 x i16>* %4697, align 32
  %4699 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %23, i64 0, i64 5
  %4700 = bitcast <4 x i64>* %4699 to <16 x i16>*
  %4701 = load <16 x i16>, <16 x i16>* %4700, align 32
  %4702 = shufflevector <16 x i16> %4698, <16 x i16> %4701, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %4703 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %23, i64 0, i64 6
  %4704 = bitcast <4 x i64>* %4703 to <16 x i16>*
  %4705 = load <16 x i16>, <16 x i16>* %4704, align 32
  %4706 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %23, i64 0, i64 7
  %4707 = bitcast <4 x i64>* %4706 to <16 x i16>*
  %4708 = load <16 x i16>, <16 x i16>* %4707, align 32
  %4709 = shufflevector <16 x i16> %4705, <16 x i16> %4708, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %4710 = bitcast <16 x i16> %4688 to <8 x i32>
  %4711 = bitcast <16 x i16> %4695 to <8 x i32>
  %4712 = shufflevector <8 x i32> %4710, <8 x i32> %4711, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %4713 = bitcast <8 x i32> %4712 to <4 x i64>
  %4714 = bitcast <16 x i16> %4702 to <8 x i32>
  %4715 = bitcast <16 x i16> %4709 to <8 x i32>
  %4716 = shufflevector <8 x i32> %4714, <8 x i32> %4715, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %4717 = bitcast <8 x i32> %4716 to <4 x i64>
  %4718 = shufflevector <4 x i64> %4713, <4 x i64> %4717, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %4719 = shufflevector <4 x i64> %4713, <4 x i64> %4717, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %4720 = shufflevector <8 x i32> %4710, <8 x i32> %4711, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %4721 = bitcast <8 x i32> %4720 to <4 x i64>
  %4722 = shufflevector <8 x i32> %4714, <8 x i32> %4715, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %4723 = bitcast <8 x i32> %4722 to <4 x i64>
  %4724 = shufflevector <4 x i64> %4721, <4 x i64> %4723, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %4725 = shufflevector <4 x i64> %4721, <4 x i64> %4723, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %4726 = shufflevector <16 x i16> %4684, <16 x i16> %4687, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %4727 = shufflevector <16 x i16> %4691, <16 x i16> %4694, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %4728 = shufflevector <16 x i16> %4698, <16 x i16> %4701, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %4729 = shufflevector <16 x i16> %4705, <16 x i16> %4708, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %4730 = bitcast <16 x i16> %4726 to <8 x i32>
  %4731 = bitcast <16 x i16> %4727 to <8 x i32>
  %4732 = shufflevector <8 x i32> %4730, <8 x i32> %4731, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %4733 = bitcast <8 x i32> %4732 to <4 x i64>
  %4734 = bitcast <16 x i16> %4728 to <8 x i32>
  %4735 = bitcast <16 x i16> %4729 to <8 x i32>
  %4736 = shufflevector <8 x i32> %4734, <8 x i32> %4735, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %4737 = bitcast <8 x i32> %4736 to <4 x i64>
  %4738 = shufflevector <4 x i64> %4733, <4 x i64> %4737, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %4739 = shufflevector <4 x i64> %4733, <4 x i64> %4737, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %4740 = shufflevector <8 x i32> %4730, <8 x i32> %4731, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %4741 = bitcast <8 x i32> %4740 to <4 x i64>
  %4742 = shufflevector <8 x i32> %4734, <8 x i32> %4735, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %4743 = bitcast <8 x i32> %4742 to <4 x i64>
  %4744 = shufflevector <4 x i64> %4741, <4 x i64> %4743, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %4745 = shufflevector <4 x i64> %4741, <4 x i64> %4743, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %4746 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %23, i64 0, i64 8
  %4747 = bitcast <4 x i64>* %4746 to <16 x i16>*
  %4748 = load <16 x i16>, <16 x i16>* %4747, align 32
  %4749 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %23, i64 0, i64 9
  %4750 = bitcast <4 x i64>* %4749 to <16 x i16>*
  %4751 = load <16 x i16>, <16 x i16>* %4750, align 32
  %4752 = shufflevector <16 x i16> %4748, <16 x i16> %4751, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %4753 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %23, i64 0, i64 10
  %4754 = bitcast <4 x i64>* %4753 to <16 x i16>*
  %4755 = load <16 x i16>, <16 x i16>* %4754, align 32
  %4756 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %23, i64 0, i64 11
  %4757 = bitcast <4 x i64>* %4756 to <16 x i16>*
  %4758 = load <16 x i16>, <16 x i16>* %4757, align 32
  %4759 = shufflevector <16 x i16> %4755, <16 x i16> %4758, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %4760 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %23, i64 0, i64 12
  %4761 = bitcast <4 x i64>* %4760 to <16 x i16>*
  %4762 = load <16 x i16>, <16 x i16>* %4761, align 32
  %4763 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %23, i64 0, i64 13
  %4764 = bitcast <4 x i64>* %4763 to <16 x i16>*
  %4765 = load <16 x i16>, <16 x i16>* %4764, align 32
  %4766 = shufflevector <16 x i16> %4762, <16 x i16> %4765, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %4767 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %23, i64 0, i64 14
  %4768 = bitcast <4 x i64>* %4767 to <16 x i16>*
  %4769 = load <16 x i16>, <16 x i16>* %4768, align 32
  %4770 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %23, i64 0, i64 15
  %4771 = bitcast <4 x i64>* %4770 to <16 x i16>*
  %4772 = load <16 x i16>, <16 x i16>* %4771, align 32
  %4773 = shufflevector <16 x i16> %4769, <16 x i16> %4772, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %4774 = bitcast <16 x i16> %4752 to <8 x i32>
  %4775 = bitcast <16 x i16> %4759 to <8 x i32>
  %4776 = shufflevector <8 x i32> %4774, <8 x i32> %4775, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %4777 = bitcast <8 x i32> %4776 to <4 x i64>
  %4778 = bitcast <16 x i16> %4766 to <8 x i32>
  %4779 = bitcast <16 x i16> %4773 to <8 x i32>
  %4780 = shufflevector <8 x i32> %4778, <8 x i32> %4779, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %4781 = bitcast <8 x i32> %4780 to <4 x i64>
  %4782 = shufflevector <4 x i64> %4777, <4 x i64> %4781, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %4783 = shufflevector <4 x i64> %4777, <4 x i64> %4781, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %4784 = shufflevector <8 x i32> %4774, <8 x i32> %4775, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %4785 = bitcast <8 x i32> %4784 to <4 x i64>
  %4786 = shufflevector <8 x i32> %4778, <8 x i32> %4779, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %4787 = bitcast <8 x i32> %4786 to <4 x i64>
  %4788 = shufflevector <4 x i64> %4785, <4 x i64> %4787, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %4789 = shufflevector <4 x i64> %4785, <4 x i64> %4787, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %4790 = shufflevector <16 x i16> %4748, <16 x i16> %4751, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %4791 = shufflevector <16 x i16> %4755, <16 x i16> %4758, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %4792 = shufflevector <16 x i16> %4762, <16 x i16> %4765, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %4793 = shufflevector <16 x i16> %4769, <16 x i16> %4772, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %4794 = bitcast <16 x i16> %4790 to <8 x i32>
  %4795 = bitcast <16 x i16> %4791 to <8 x i32>
  %4796 = shufflevector <8 x i32> %4794, <8 x i32> %4795, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %4797 = bitcast <8 x i32> %4796 to <4 x i64>
  %4798 = bitcast <16 x i16> %4792 to <8 x i32>
  %4799 = bitcast <16 x i16> %4793 to <8 x i32>
  %4800 = shufflevector <8 x i32> %4798, <8 x i32> %4799, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %4801 = bitcast <8 x i32> %4800 to <4 x i64>
  %4802 = shufflevector <4 x i64> %4797, <4 x i64> %4801, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %4803 = shufflevector <4 x i64> %4797, <4 x i64> %4801, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %4804 = shufflevector <8 x i32> %4794, <8 x i32> %4795, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %4805 = bitcast <8 x i32> %4804 to <4 x i64>
  %4806 = shufflevector <8 x i32> %4798, <8 x i32> %4799, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %4807 = bitcast <8 x i32> %4806 to <4 x i64>
  %4808 = shufflevector <4 x i64> %4805, <4 x i64> %4807, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %4809 = shufflevector <4 x i64> %4805, <4 x i64> %4807, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %4810 = bitcast i16* %0 to <2 x i64>*
  %4811 = shufflevector <4 x i64> %4718, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  store <2 x i64> %4811, <2 x i64>* %4810, align 1
  %4812 = getelementptr inbounds i16, i16* %0, i64 %1
  %4813 = bitcast i16* %4812 to <2 x i64>*
  %4814 = shufflevector <4 x i64> %4719, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  store <2 x i64> %4814, <2 x i64>* %4813, align 1
  %4815 = shl nsw i64 %1, 1
  %4816 = getelementptr inbounds i16, i16* %0, i64 %4815
  %4817 = bitcast i16* %4816 to <2 x i64>*
  %4818 = shufflevector <4 x i64> %4724, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  store <2 x i64> %4818, <2 x i64>* %4817, align 1
  %4819 = mul nsw i64 %1, 3
  %4820 = getelementptr inbounds i16, i16* %0, i64 %4819
  %4821 = bitcast i16* %4820 to <2 x i64>*
  %4822 = shufflevector <4 x i64> %4725, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  store <2 x i64> %4822, <2 x i64>* %4821, align 1
  %4823 = shl nsw i64 %1, 2
  %4824 = getelementptr inbounds i16, i16* %0, i64 %4823
  %4825 = bitcast i16* %4824 to <2 x i64>*
  %4826 = shufflevector <4 x i64> %4738, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  store <2 x i64> %4826, <2 x i64>* %4825, align 1
  %4827 = mul nsw i64 %1, 5
  %4828 = getelementptr inbounds i16, i16* %0, i64 %4827
  %4829 = bitcast i16* %4828 to <2 x i64>*
  %4830 = shufflevector <4 x i64> %4739, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  store <2 x i64> %4830, <2 x i64>* %4829, align 1
  %4831 = mul nsw i64 %1, 6
  %4832 = getelementptr inbounds i16, i16* %0, i64 %4831
  %4833 = bitcast i16* %4832 to <2 x i64>*
  %4834 = shufflevector <4 x i64> %4744, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  store <2 x i64> %4834, <2 x i64>* %4833, align 1
  %4835 = mul nsw i64 %1, 7
  %4836 = getelementptr inbounds i16, i16* %0, i64 %4835
  %4837 = bitcast i16* %4836 to <2 x i64>*
  %4838 = shufflevector <4 x i64> %4745, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  store <2 x i64> %4838, <2 x i64>* %4837, align 1
  %4839 = shl nsw i64 %1, 3
  %4840 = getelementptr inbounds i16, i16* %0, i64 %4839
  %4841 = bitcast i16* %4840 to <2 x i64>*
  %4842 = shufflevector <4 x i64> %4718, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  store <2 x i64> %4842, <2 x i64>* %4841, align 1
  %4843 = mul nsw i64 %1, 9
  %4844 = getelementptr inbounds i16, i16* %0, i64 %4843
  %4845 = bitcast i16* %4844 to <2 x i64>*
  %4846 = shufflevector <4 x i64> %4719, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  store <2 x i64> %4846, <2 x i64>* %4845, align 1
  %4847 = mul nsw i64 %1, 10
  %4848 = getelementptr inbounds i16, i16* %0, i64 %4847
  %4849 = bitcast i16* %4848 to <2 x i64>*
  %4850 = shufflevector <4 x i64> %4724, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  store <2 x i64> %4850, <2 x i64>* %4849, align 1
  %4851 = mul nsw i64 %1, 11
  %4852 = getelementptr inbounds i16, i16* %0, i64 %4851
  %4853 = bitcast i16* %4852 to <2 x i64>*
  %4854 = shufflevector <4 x i64> %4725, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  store <2 x i64> %4854, <2 x i64>* %4853, align 1
  %4855 = mul nsw i64 %1, 12
  %4856 = getelementptr inbounds i16, i16* %0, i64 %4855
  %4857 = bitcast i16* %4856 to <2 x i64>*
  %4858 = shufflevector <4 x i64> %4738, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  store <2 x i64> %4858, <2 x i64>* %4857, align 1
  %4859 = mul nsw i64 %1, 13
  %4860 = getelementptr inbounds i16, i16* %0, i64 %4859
  %4861 = bitcast i16* %4860 to <2 x i64>*
  %4862 = shufflevector <4 x i64> %4739, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  store <2 x i64> %4862, <2 x i64>* %4861, align 1
  %4863 = mul nsw i64 %1, 14
  %4864 = getelementptr inbounds i16, i16* %0, i64 %4863
  %4865 = bitcast i16* %4864 to <2 x i64>*
  %4866 = shufflevector <4 x i64> %4744, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  store <2 x i64> %4866, <2 x i64>* %4865, align 1
  %4867 = mul nsw i64 %1, 15
  %4868 = getelementptr inbounds i16, i16* %0, i64 %4867
  %4869 = bitcast i16* %4868 to <2 x i64>*
  %4870 = shufflevector <4 x i64> %4745, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  store <2 x i64> %4870, <2 x i64>* %4869, align 1
  %4871 = shl nsw i64 %1, 4
  %4872 = getelementptr inbounds i16, i16* %0, i64 %4871
  %4873 = bitcast i16* %4872 to <2 x i64>*
  %4874 = shufflevector <4 x i64> %4782, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  store <2 x i64> %4874, <2 x i64>* %4873, align 1
  %4875 = mul nsw i64 %1, 17
  %4876 = getelementptr inbounds i16, i16* %0, i64 %4875
  %4877 = bitcast i16* %4876 to <2 x i64>*
  %4878 = shufflevector <4 x i64> %4783, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  store <2 x i64> %4878, <2 x i64>* %4877, align 1
  %4879 = mul nsw i64 %1, 18
  %4880 = getelementptr inbounds i16, i16* %0, i64 %4879
  %4881 = bitcast i16* %4880 to <2 x i64>*
  %4882 = shufflevector <4 x i64> %4788, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  store <2 x i64> %4882, <2 x i64>* %4881, align 1
  %4883 = mul nsw i64 %1, 19
  %4884 = getelementptr inbounds i16, i16* %0, i64 %4883
  %4885 = bitcast i16* %4884 to <2 x i64>*
  %4886 = shufflevector <4 x i64> %4789, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  store <2 x i64> %4886, <2 x i64>* %4885, align 1
  %4887 = mul nsw i64 %1, 20
  %4888 = getelementptr inbounds i16, i16* %0, i64 %4887
  %4889 = bitcast i16* %4888 to <2 x i64>*
  %4890 = shufflevector <4 x i64> %4802, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  store <2 x i64> %4890, <2 x i64>* %4889, align 1
  %4891 = mul nsw i64 %1, 21
  %4892 = getelementptr inbounds i16, i16* %0, i64 %4891
  %4893 = bitcast i16* %4892 to <2 x i64>*
  %4894 = shufflevector <4 x i64> %4803, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  store <2 x i64> %4894, <2 x i64>* %4893, align 1
  %4895 = mul nsw i64 %1, 22
  %4896 = getelementptr inbounds i16, i16* %0, i64 %4895
  %4897 = bitcast i16* %4896 to <2 x i64>*
  %4898 = shufflevector <4 x i64> %4808, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  store <2 x i64> %4898, <2 x i64>* %4897, align 1
  %4899 = mul nsw i64 %1, 23
  %4900 = getelementptr inbounds i16, i16* %0, i64 %4899
  %4901 = bitcast i16* %4900 to <2 x i64>*
  %4902 = shufflevector <4 x i64> %4809, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  store <2 x i64> %4902, <2 x i64>* %4901, align 1
  %4903 = mul nsw i64 %1, 24
  %4904 = getelementptr inbounds i16, i16* %0, i64 %4903
  %4905 = bitcast i16* %4904 to <2 x i64>*
  %4906 = shufflevector <4 x i64> %4782, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  store <2 x i64> %4906, <2 x i64>* %4905, align 1
  %4907 = mul nsw i64 %1, 25
  %4908 = getelementptr inbounds i16, i16* %0, i64 %4907
  %4909 = bitcast i16* %4908 to <2 x i64>*
  %4910 = shufflevector <4 x i64> %4783, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  store <2 x i64> %4910, <2 x i64>* %4909, align 1
  %4911 = mul nsw i64 %1, 26
  %4912 = getelementptr inbounds i16, i16* %0, i64 %4911
  %4913 = bitcast i16* %4912 to <2 x i64>*
  %4914 = shufflevector <4 x i64> %4788, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  store <2 x i64> %4914, <2 x i64>* %4913, align 1
  %4915 = mul nsw i64 %1, 27
  %4916 = getelementptr inbounds i16, i16* %0, i64 %4915
  %4917 = bitcast i16* %4916 to <2 x i64>*
  %4918 = shufflevector <4 x i64> %4789, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  store <2 x i64> %4918, <2 x i64>* %4917, align 1
  %4919 = mul nsw i64 %1, 28
  %4920 = getelementptr inbounds i16, i16* %0, i64 %4919
  %4921 = bitcast i16* %4920 to <2 x i64>*
  %4922 = shufflevector <4 x i64> %4802, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  store <2 x i64> %4922, <2 x i64>* %4921, align 1
  %4923 = mul nsw i64 %1, 29
  %4924 = getelementptr inbounds i16, i16* %0, i64 %4923
  %4925 = bitcast i16* %4924 to <2 x i64>*
  %4926 = shufflevector <4 x i64> %4803, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  store <2 x i64> %4926, <2 x i64>* %4925, align 1
  %4927 = mul nsw i64 %1, 30
  %4928 = getelementptr inbounds i16, i16* %0, i64 %4927
  %4929 = bitcast i16* %4928 to <2 x i64>*
  %4930 = shufflevector <4 x i64> %4808, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  store <2 x i64> %4930, <2 x i64>* %4929, align 1
  %4931 = mul nsw i64 %1, 31
  %4932 = getelementptr inbounds i16, i16* %0, i64 %4931
  %4933 = bitcast i16* %4932 to <2 x i64>*
  %4934 = shufflevector <4 x i64> %4809, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  store <2 x i64> %4934, <2 x i64>* %4933, align 1
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %4379) #8
  br label %7784

4935:                                             ; preds = %4090
  %4936 = bitcast [1024 x i16]* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2048, i8* nonnull %4936) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %4936, i8 -86, i64 2048, i1 false) #8
  %4937 = icmp slt i32 %9, 12
  %4938 = getelementptr inbounds [1024 x i16], [1024 x i16]* %15, i64 0, i64 0
  br i1 %4937, label %4939, label %5084

4939:                                             ; preds = %4935
  %4940 = getelementptr inbounds i16, i16* %5, i64 79
  %4941 = load i16, i16* %4940, align 2
  %4942 = insertelement <16 x i16> undef, i16 %4941, i32 0
  %4943 = shufflevector <16 x i16> %4942, <16 x i16> undef, <16 x i32> zeroinitializer
  br label %4944

4944:                                             ; preds = %5079, %4939
  %4945 = phi i16* [ %5082, %5079 ], [ %4938, %4939 ]
  %4946 = phi i32 [ %5081, %5079 ], [ 0, %4939 ]
  %4947 = phi i32 [ %5080, %5079 ], [ %8, %4939 ]
  %4948 = icmp slt i32 %4947, 5056
  br i1 %4948, label %5012, label %4949

4949:                                             ; preds = %4944
  %4950 = icmp ult i32 %4946, 16
  br i1 %4950, label %4951, label %5085

4951:                                             ; preds = %4949
  %4952 = sub nsw i32 0, %4946
  %4953 = sub nsw i32 15, %4946
  %4954 = and i32 %4952, 3
  %4955 = icmp eq i32 %4954, 0
  br i1 %4955, label %4971, label %4956

4956:                                             ; preds = %4951, %4956
  %4957 = phi i16* [ %4967, %4956 ], [ %4945, %4951 ]
  %4958 = phi i32 [ %4968, %4956 ], [ %4946, %4951 ]
  %4959 = phi i32 [ %4969, %4956 ], [ %4954, %4951 ]
  %4960 = bitcast i16* %4957 to <16 x i16>*
  store <16 x i16> %4943, <16 x i16>* %4960, align 1
  %4961 = getelementptr inbounds i16, i16* %4957, i64 16
  %4962 = bitcast i16* %4961 to <16 x i16>*
  store <16 x i16> %4943, <16 x i16>* %4962, align 1
  %4963 = getelementptr inbounds i16, i16* %4957, i64 32
  %4964 = bitcast i16* %4963 to <16 x i16>*
  store <16 x i16> %4943, <16 x i16>* %4964, align 1
  %4965 = getelementptr inbounds i16, i16* %4957, i64 48
  %4966 = bitcast i16* %4965 to <16 x i16>*
  store <16 x i16> %4943, <16 x i16>* %4966, align 1
  %4967 = getelementptr inbounds i16, i16* %4957, i64 64
  %4968 = add nuw nsw i32 %4958, 1
  %4969 = add i32 %4959, -1
  %4970 = icmp eq i32 %4969, 0
  br i1 %4970, label %4971, label %4956, !llvm.loop !24

4971:                                             ; preds = %4956, %4951
  %4972 = phi i16* [ %4945, %4951 ], [ %4967, %4956 ]
  %4973 = phi i32 [ %4946, %4951 ], [ %4968, %4956 ]
  %4974 = icmp ult i32 %4953, 3
  br i1 %4974, label %5085, label %4975

4975:                                             ; preds = %4971, %4975
  %4976 = phi i16* [ %5009, %4975 ], [ %4972, %4971 ]
  %4977 = phi i32 [ %5010, %4975 ], [ %4973, %4971 ]
  %4978 = bitcast i16* %4976 to <16 x i16>*
  store <16 x i16> %4943, <16 x i16>* %4978, align 1
  %4979 = getelementptr inbounds i16, i16* %4976, i64 16
  %4980 = bitcast i16* %4979 to <16 x i16>*
  store <16 x i16> %4943, <16 x i16>* %4980, align 1
  %4981 = getelementptr inbounds i16, i16* %4976, i64 32
  %4982 = bitcast i16* %4981 to <16 x i16>*
  store <16 x i16> %4943, <16 x i16>* %4982, align 1
  %4983 = getelementptr inbounds i16, i16* %4976, i64 48
  %4984 = bitcast i16* %4983 to <16 x i16>*
  store <16 x i16> %4943, <16 x i16>* %4984, align 1
  %4985 = getelementptr inbounds i16, i16* %4976, i64 64
  %4986 = bitcast i16* %4985 to <16 x i16>*
  store <16 x i16> %4943, <16 x i16>* %4986, align 1
  %4987 = getelementptr inbounds i16, i16* %4976, i64 80
  %4988 = bitcast i16* %4987 to <16 x i16>*
  store <16 x i16> %4943, <16 x i16>* %4988, align 1
  %4989 = getelementptr inbounds i16, i16* %4976, i64 96
  %4990 = bitcast i16* %4989 to <16 x i16>*
  store <16 x i16> %4943, <16 x i16>* %4990, align 1
  %4991 = getelementptr inbounds i16, i16* %4976, i64 112
  %4992 = bitcast i16* %4991 to <16 x i16>*
  store <16 x i16> %4943, <16 x i16>* %4992, align 1
  %4993 = getelementptr inbounds i16, i16* %4976, i64 128
  %4994 = bitcast i16* %4993 to <16 x i16>*
  store <16 x i16> %4943, <16 x i16>* %4994, align 1
  %4995 = getelementptr inbounds i16, i16* %4976, i64 144
  %4996 = bitcast i16* %4995 to <16 x i16>*
  store <16 x i16> %4943, <16 x i16>* %4996, align 1
  %4997 = getelementptr inbounds i16, i16* %4976, i64 160
  %4998 = bitcast i16* %4997 to <16 x i16>*
  store <16 x i16> %4943, <16 x i16>* %4998, align 1
  %4999 = getelementptr inbounds i16, i16* %4976, i64 176
  %5000 = bitcast i16* %4999 to <16 x i16>*
  store <16 x i16> %4943, <16 x i16>* %5000, align 1
  %5001 = getelementptr inbounds i16, i16* %4976, i64 192
  %5002 = bitcast i16* %5001 to <16 x i16>*
  store <16 x i16> %4943, <16 x i16>* %5002, align 1
  %5003 = getelementptr inbounds i16, i16* %4976, i64 208
  %5004 = bitcast i16* %5003 to <16 x i16>*
  store <16 x i16> %4943, <16 x i16>* %5004, align 1
  %5005 = getelementptr inbounds i16, i16* %4976, i64 224
  %5006 = bitcast i16* %5005 to <16 x i16>*
  store <16 x i16> %4943, <16 x i16>* %5006, align 1
  %5007 = getelementptr inbounds i16, i16* %4976, i64 240
  %5008 = bitcast i16* %5007 to <16 x i16>*
  store <16 x i16> %4943, <16 x i16>* %5008, align 1
  %5009 = getelementptr inbounds i16, i16* %4976, i64 256
  %5010 = add nuw nsw i32 %4977, 4
  %5011 = icmp eq i32 %5010, 16
  br i1 %5011, label %5085, label %4975

5012:                                             ; preds = %4944
  %5013 = ashr i32 %4947, 6
  %5014 = trunc i32 %4947 to i16
  %5015 = insertelement <16 x i16> undef, i16 %5014, i32 0
  %5016 = and <16 x i16> %5015, <i16 63, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef>
  %5017 = lshr <16 x i16> %5016, <i16 1, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0>
  %5018 = shufflevector <16 x i16> %5017, <16 x i16> undef, <16 x i32> zeroinitializer
  %5019 = sext i32 %5013 to i64
  %5020 = getelementptr inbounds i16, i16* %5, i64 %5019
  %5021 = getelementptr inbounds i16, i16* %5020, i64 1
  br label %5022

5022:                                             ; preds = %5073, %5012
  %5023 = phi i64 [ 0, %5012 ], [ %5077, %5073 ]
  %5024 = add nsw i64 %5023, %5019
  %5025 = icmp slt i64 %5024, 79
  br i1 %5025, label %5026, label %5073

5026:                                             ; preds = %5022
  %5027 = getelementptr inbounds i16, i16* %5020, i64 %5023
  %5028 = bitcast i16* %5027 to <16 x i16>*
  %5029 = load <16 x i16>, <16 x i16>* %5028, align 1
  %5030 = getelementptr inbounds i16, i16* %5021, i64 %5023
  %5031 = bitcast i16* %5030 to <16 x i16>*
  %5032 = load <16 x i16>, <16 x i16>* %5031, align 1
  %5033 = sub <16 x i16> %5032, %5029
  %5034 = shl <16 x i16> %5029, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %5035 = or <16 x i16> %5034, <i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16>
  %5036 = mul <16 x i16> %5033, %5018
  %5037 = add <16 x i16> %5036, %5035
  %5038 = lshr <16 x i16> %5037, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %5039 = trunc i64 %5024 to i16
  %5040 = add i16 %5039, 1
  %5041 = add i16 %5039, 2
  %5042 = add i16 %5039, 3
  %5043 = add i16 %5039, 4
  %5044 = add i16 %5039, 5
  %5045 = add i16 %5039, 6
  %5046 = add i16 %5039, 7
  %5047 = add i16 %5039, 8
  %5048 = add i16 %5039, 9
  %5049 = add i16 %5039, 10
  %5050 = add i16 %5039, 11
  %5051 = add i16 %5039, 12
  %5052 = add i16 %5039, 13
  %5053 = add i16 %5039, 14
  %5054 = add i16 %5039, 15
  %5055 = insertelement <16 x i16> undef, i16 %5039, i32 0
  %5056 = insertelement <16 x i16> %5055, i16 %5040, i32 1
  %5057 = insertelement <16 x i16> %5056, i16 %5041, i32 2
  %5058 = insertelement <16 x i16> %5057, i16 %5042, i32 3
  %5059 = insertelement <16 x i16> %5058, i16 %5043, i32 4
  %5060 = insertelement <16 x i16> %5059, i16 %5044, i32 5
  %5061 = insertelement <16 x i16> %5060, i16 %5045, i32 6
  %5062 = insertelement <16 x i16> %5061, i16 %5046, i32 7
  %5063 = insertelement <16 x i16> %5062, i16 %5047, i32 8
  %5064 = insertelement <16 x i16> %5063, i16 %5048, i32 9
  %5065 = insertelement <16 x i16> %5064, i16 %5049, i32 10
  %5066 = insertelement <16 x i16> %5065, i16 %5050, i32 11
  %5067 = insertelement <16 x i16> %5066, i16 %5051, i32 12
  %5068 = insertelement <16 x i16> %5067, i16 %5052, i32 13
  %5069 = insertelement <16 x i16> %5068, i16 %5053, i32 14
  %5070 = insertelement <16 x i16> %5069, i16 %5054, i32 15
  %5071 = icmp slt <16 x i16> %5070, <i16 79, i16 79, i16 79, i16 79, i16 79, i16 79, i16 79, i16 79, i16 79, i16 79, i16 79, i16 79, i16 79, i16 79, i16 79, i16 79>
  %5072 = select <16 x i1> %5071, <16 x i16> %5038, <16 x i16> %4943
  br label %5073

5073:                                             ; preds = %5022, %5026
  %5074 = phi <16 x i16> [ %5072, %5026 ], [ %4943, %5022 ]
  %5075 = getelementptr inbounds i16, i16* %4945, i64 %5023
  %5076 = bitcast i16* %5075 to <16 x i16>*
  store <16 x i16> %5074, <16 x i16>* %5076, align 1
  %5077 = add nuw nsw i64 %5023, 16
  %5078 = icmp ult i64 %5077, 64
  br i1 %5078, label %5022, label %5079

5079:                                             ; preds = %5073
  %5080 = add nsw i32 %4947, %8
  %5081 = add nuw nsw i32 %4946, 1
  %5082 = getelementptr inbounds i16, i16* %4945, i64 64
  %5083 = icmp eq i32 %5081, 16
  br i1 %5083, label %5085, label %4944

5084:                                             ; preds = %4935
  call fastcc void @highbd_dr_prediction_32bit_z1_64xN_avx2(i32 16, i16* nonnull %4938, i64 64, i16* %5, i32 %8) #8
  br label %5085

5085:                                             ; preds = %5079, %4971, %4975, %4949, %5084
  call fastcc void @highbd_transpose(i16* nonnull %4938, i64 64, i16* %0, i64 %1, i32 16, i32 64) #8
  call void @llvm.lifetime.end.p0i8(i64 2048, i8* nonnull %4936) #8
  br label %7784

5086:                                             ; preds = %2678
  %5087 = shl nsw i32 %3, 1
  %5088 = icmp eq i32 %5087, %2
  br i1 %5088, label %5089, label %6345

5089:                                             ; preds = %5086
  %5090 = add i32 %3, -4
  %5091 = lshr i32 %5090, 2
  %5092 = shl i32 %5090, 30
  %5093 = or i32 %5091, %5092
  switch i32 %5093, label %7784 [
    i32 0, label %5094
    i32 1, label %5351
    i32 3, label %5808
    i32 7, label %6342
  ]

5094:                                             ; preds = %5089
  %5095 = bitcast [8 x <2 x i64>]* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %5095) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %5095, i8 -86, i64 128, i1 false) #8
  %5096 = icmp slt i32 %9, 12
  %5097 = sub nsw i32 6, %6
  %5098 = shl i32 11, %6
  %5099 = sext i32 %5098 to i64
  %5100 = getelementptr inbounds i16, i16* %5, i64 %5099
  %5101 = load i16, i16* %5100, align 2
  %5102 = insertelement <8 x i16> undef, i16 %5101, i32 0
  %5103 = shufflevector <8 x i16> %5102, <8 x i16> undef, <8 x i32> zeroinitializer
  br i1 %5096, label %5104, label %5209

5104:                                             ; preds = %5094
  %5105 = trunc i32 %5098 to i16
  %5106 = insertelement <8 x i16> undef, i16 %5105, i32 0
  %5107 = shufflevector <8 x i16> %5106, <8 x i16> undef, <8 x i32> zeroinitializer
  %5108 = icmp eq i32 %6, 0
  br label %5109

5109:                                             ; preds = %5183, %5104
  %5110 = phi i64 [ 0, %5104 ], [ %5207, %5183 ]
  %5111 = phi i32 [ %8, %5104 ], [ %5206, %5183 ]
  %5112 = ashr i32 %5111, %5097
  %5113 = icmp slt i32 %5112, %5098
  br i1 %5113, label %5123, label %5114

5114:                                             ; preds = %5109
  %5115 = trunc i64 %5110 to i32
  %5116 = icmp slt i32 %5115, 8
  br i1 %5116, label %5117, label %5298

5117:                                             ; preds = %5114
  %5118 = and i64 %5110, 4294967295
  %5119 = getelementptr inbounds [8 x <2 x i64>], [8 x <2 x i64>]* %17, i64 0, i64 %5118
  %5120 = bitcast <2 x i64>* %5119 to <8 x i16>*
  store <8 x i16> %5103, <8 x i16>* %5120, align 16
  %5121 = add nuw nsw i64 %5118, 1
  %5122 = icmp eq i64 %5121, 8
  br i1 %5122, label %5298, label %8083

5123:                                             ; preds = %5109
  %5124 = sext i32 %5112 to i64
  %5125 = getelementptr inbounds i16, i16* %5, i64 %5124
  %5126 = bitcast i16* %5125 to <2 x i64>*
  %5127 = load <2 x i64>, <2 x i64>* %5126, align 1
  br i1 %5108, label %5157, label %5128

5128:                                             ; preds = %5123
  %5129 = bitcast <2 x i64> %5127 to <16 x i8>
  %5130 = shufflevector <16 x i8> %5129, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 4, i32 5, i32 8, i32 9, i32 12, i32 13, i32 2, i32 3, i32 6, i32 7, i32 10, i32 11, i32 14, i32 15>
  %5131 = bitcast <16 x i8> %5130 to <2 x i64>
  %5132 = shufflevector <16 x i8> %5130, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %5133 = bitcast <16 x i8> %5132 to <2 x i64>
  %5134 = trunc i32 %5112 to i16
  %5135 = add i16 %5134, 2
  %5136 = add i16 %5134, 4
  %5137 = add i16 %5134, 6
  %5138 = add i16 %5134, 8
  %5139 = add i16 %5134, 10
  %5140 = add i16 %5134, 12
  %5141 = add i16 %5134, 14
  %5142 = insertelement <8 x i16> undef, i16 %5134, i32 0
  %5143 = insertelement <8 x i16> %5142, i16 %5135, i32 1
  %5144 = insertelement <8 x i16> %5143, i16 %5136, i32 2
  %5145 = insertelement <8 x i16> %5144, i16 %5137, i32 3
  %5146 = insertelement <8 x i16> %5145, i16 %5138, i32 4
  %5147 = insertelement <8 x i16> %5146, i16 %5139, i32 5
  %5148 = insertelement <8 x i16> %5147, i16 %5140, i32 6
  %5149 = insertelement <8 x i16> %5148, i16 %5141, i32 7
  %5150 = trunc i32 %5111 to i16
  %5151 = insertelement <16 x i16> undef, i16 %5150, i32 0
  %5152 = shufflevector <16 x i16> %5151, <16 x i16> undef, <16 x i32> zeroinitializer
  %5153 = tail call <16 x i16> @llvm.x86.avx2.pslli.w(<16 x i16> %5152, i32 %6) #8
  %5154 = lshr <16 x i16> %5153, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %5155 = bitcast <16 x i16> %5154 to <4 x i64>
  %5156 = and <4 x i64> %5155, <i64 8725857424048159, i64 8725857424048159, i64 8725857424048159, i64 8725857424048159>
  br label %5183

5157:                                             ; preds = %5123
  %5158 = getelementptr inbounds i16, i16* %5125, i64 1
  %5159 = bitcast i16* %5158 to <2 x i64>*
  %5160 = load <2 x i64>, <2 x i64>* %5159, align 1
  %5161 = trunc i32 %5112 to i16
  %5162 = add i16 %5161, 1
  %5163 = add i16 %5161, 2
  %5164 = add i16 %5161, 3
  %5165 = add i16 %5161, 4
  %5166 = add i16 %5161, 5
  %5167 = add i16 %5161, 6
  %5168 = add i16 %5161, 7
  %5169 = insertelement <8 x i16> undef, i16 %5161, i32 0
  %5170 = insertelement <8 x i16> %5169, i16 %5162, i32 1
  %5171 = insertelement <8 x i16> %5170, i16 %5163, i32 2
  %5172 = insertelement <8 x i16> %5171, i16 %5164, i32 3
  %5173 = insertelement <8 x i16> %5172, i16 %5165, i32 4
  %5174 = insertelement <8 x i16> %5173, i16 %5166, i32 5
  %5175 = insertelement <8 x i16> %5174, i16 %5167, i32 6
  %5176 = insertelement <8 x i16> %5175, i16 %5168, i32 7
  %5177 = trunc i32 %5111 to i16
  %5178 = insertelement <16 x i16> undef, i16 %5177, i32 0
  %5179 = and <16 x i16> %5178, <i16 63, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef>
  %5180 = lshr <16 x i16> %5179, <i16 1, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0>
  %5181 = shufflevector <16 x i16> %5180, <16 x i16> undef, <16 x i32> zeroinitializer
  %5182 = bitcast <16 x i16> %5181 to <4 x i64>
  br label %5183

5183:                                             ; preds = %5157, %5128
  %5184 = phi <8 x i16> [ %5149, %5128 ], [ %5176, %5157 ]
  %5185 = phi <2 x i64> [ %5131, %5128 ], [ %5127, %5157 ]
  %5186 = phi <2 x i64> [ %5133, %5128 ], [ %5160, %5157 ]
  %5187 = phi <4 x i64> [ %5156, %5128 ], [ %5182, %5157 ]
  %5188 = shufflevector <2 x i64> %5185, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %5189 = shufflevector <2 x i64> %5186, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %5190 = bitcast <4 x i64> %5189 to <16 x i16>
  %5191 = bitcast <4 x i64> %5188 to <16 x i16>
  %5192 = sub <16 x i16> %5190, %5191
  %5193 = shl <16 x i16> %5191, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %5194 = or <16 x i16> %5193, <i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16>
  %5195 = bitcast <4 x i64> %5187 to <16 x i16>
  %5196 = mul <16 x i16> %5192, %5195
  %5197 = add <16 x i16> %5196, %5194
  %5198 = lshr <16 x i16> %5197, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %5199 = bitcast <16 x i16> %5198 to <4 x i64>
  %5200 = shufflevector <4 x i64> %5199, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %5201 = icmp sgt <8 x i16> %5107, %5184
  %5202 = bitcast <2 x i64> %5200 to <8 x i16>
  %5203 = select <8 x i1> %5201, <8 x i16> %5202, <8 x i16> %5103
  %5204 = getelementptr inbounds [8 x <2 x i64>], [8 x <2 x i64>]* %17, i64 0, i64 %5110
  %5205 = bitcast <2 x i64>* %5204 to <8 x i16>*
  store <8 x i16> %5203, <8 x i16>* %5205, align 16
  %5206 = add nsw i32 %5111, %8
  %5207 = add nuw nsw i64 %5110, 1
  %5208 = icmp eq i64 %5207, 8
  br i1 %5208, label %5298, label %5109

5209:                                             ; preds = %5094
  %5210 = insertelement <4 x i32> undef, i32 %5098, i32 0
  %5211 = shufflevector <4 x i32> %5210, <4 x i32> undef, <4 x i32> zeroinitializer
  %5212 = icmp eq i32 %6, 0
  %5213 = bitcast <8 x i16> %5103 to <16 x i8>
  br label %5214

5214:                                             ; preds = %5270, %5209
  %5215 = phi i64 [ 0, %5209 ], [ %5296, %5270 ]
  %5216 = phi i32 [ %8, %5209 ], [ %5295, %5270 ]
  %5217 = ashr i32 %5216, %5097
  %5218 = icmp slt i32 %5217, %5098
  br i1 %5218, label %5228, label %5219

5219:                                             ; preds = %5214
  %5220 = trunc i64 %5215 to i32
  %5221 = icmp slt i32 %5220, 8
  br i1 %5221, label %5222, label %5298

5222:                                             ; preds = %5219
  %5223 = and i64 %5215, 4294967295
  %5224 = getelementptr inbounds [8 x <2 x i64>], [8 x <2 x i64>]* %17, i64 0, i64 %5223
  %5225 = bitcast <2 x i64>* %5224 to <8 x i16>*
  store <8 x i16> %5103, <8 x i16>* %5225, align 16
  %5226 = add nuw nsw i64 %5223, 1
  %5227 = icmp eq i64 %5226, 8
  br i1 %5227, label %5298, label %8116

5228:                                             ; preds = %5214
  %5229 = sext i32 %5217 to i64
  %5230 = getelementptr inbounds i16, i16* %5, i64 %5229
  %5231 = bitcast i16* %5230 to <8 x i16>*
  %5232 = load <8 x i16>, <8 x i16>* %5231, align 1
  %5233 = zext <8 x i16> %5232 to <8 x i32>
  br i1 %5212, label %5252, label %5234

5234:                                             ; preds = %5228
  %5235 = shufflevector <8 x i32> %5233, <8 x i32> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 1, i32 3, i32 5, i32 7>
  %5236 = bitcast <8 x i32> %5235 to <4 x i64>
  %5237 = shufflevector <4 x i64> %5236, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %5238 = shufflevector <2 x i64> %5237, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %5239 = add nsw i32 %5217, 2
  %5240 = add nsw i32 %5217, 4
  %5241 = add nsw i32 %5217, 6
  %5242 = insertelement <4 x i32> undef, i32 %5217, i32 0
  %5243 = insertelement <4 x i32> %5242, i32 %5239, i32 1
  %5244 = insertelement <4 x i32> %5243, i32 %5240, i32 2
  %5245 = insertelement <4 x i32> %5244, i32 %5241, i32 3
  %5246 = insertelement <8 x i32> undef, i32 %5216, i32 0
  %5247 = shufflevector <8 x i32> %5246, <8 x i32> undef, <8 x i32> zeroinitializer
  %5248 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %5247, i32 %6) #8
  %5249 = lshr <8 x i32> %5248, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %5250 = bitcast <8 x i32> %5249 to <4 x i64>
  %5251 = and <4 x i64> %5250, <i64 133143986207, i64 133143986207, i64 133143986207, i64 133143986207>
  br label %5270

5252:                                             ; preds = %5228
  %5253 = getelementptr inbounds i16, i16* %5230, i64 1
  %5254 = bitcast i16* %5253 to <8 x i16>*
  %5255 = load <8 x i16>, <8 x i16>* %5254, align 1
  %5256 = zext <8 x i16> %5255 to <8 x i32>
  %5257 = bitcast <8 x i32> %5256 to <4 x i64>
  %5258 = add nsw i32 %5217, 1
  %5259 = add nsw i32 %5217, 2
  %5260 = add nsw i32 %5217, 3
  %5261 = insertelement <4 x i32> undef, i32 %5217, i32 0
  %5262 = insertelement <4 x i32> %5261, i32 %5258, i32 1
  %5263 = insertelement <4 x i32> %5262, i32 %5259, i32 2
  %5264 = insertelement <4 x i32> %5263, i32 %5260, i32 3
  %5265 = insertelement <8 x i32> undef, i32 %5216, i32 0
  %5266 = and <8 x i32> %5265, <i32 63, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %5267 = lshr <8 x i32> %5266, <i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>
  %5268 = shufflevector <8 x i32> %5267, <8 x i32> undef, <8 x i32> zeroinitializer
  %5269 = bitcast <8 x i32> %5268 to <4 x i64>
  br label %5270

5270:                                             ; preds = %5252, %5234
  %5271 = phi <8 x i32> [ %5235, %5234 ], [ %5233, %5252 ]
  %5272 = phi <4 x i64> [ %5238, %5234 ], [ %5257, %5252 ]
  %5273 = phi <4 x i32> [ %5245, %5234 ], [ %5264, %5252 ]
  %5274 = phi <4 x i64> [ %5251, %5234 ], [ %5269, %5252 ]
  %5275 = bitcast <4 x i64> %5272 to <8 x i32>
  %5276 = sub <8 x i32> %5275, %5271
  %5277 = shl nsw <8 x i32> %5271, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %5278 = or <8 x i32> %5277, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %5279 = bitcast <4 x i64> %5274 to <8 x i32>
  %5280 = mul <8 x i32> %5276, %5279
  %5281 = add <8 x i32> %5280, %5278
  %5282 = lshr <8 x i32> %5281, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %5283 = bitcast <8 x i32> %5282 to <4 x i64>
  %5284 = shufflevector <4 x i64> %5283, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %5285 = bitcast <2 x i64> %5284 to <4 x i32>
  %5286 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %5285, <4 x i32> %5285) #8
  %5287 = icmp sgt <4 x i32> %5211, %5273
  %5288 = sext <4 x i1> %5287 to <4 x i32>
  %5289 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %5288, <4 x i32> %5288) #8
  %5290 = bitcast <8 x i16> %5286 to <16 x i8>
  %5291 = bitcast <8 x i16> %5289 to <16 x i8>
  %5292 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %5213, <16 x i8> %5290, <16 x i8> %5291) #8
  %5293 = getelementptr inbounds [8 x <2 x i64>], [8 x <2 x i64>]* %17, i64 0, i64 %5215
  %5294 = bitcast <2 x i64>* %5293 to <16 x i8>*
  store <16 x i8> %5292, <16 x i8>* %5294, align 16
  %5295 = add nsw i32 %5216, %8
  %5296 = add nuw nsw i64 %5215, 1
  %5297 = icmp eq i64 %5296, 8
  br i1 %5297, label %5298, label %5214

5298:                                             ; preds = %5270, %5222, %8116, %8121, %8126, %8131, %8136, %8141, %8146, %5183, %5117, %8083, %8088, %8093, %8098, %8103, %8108, %8113, %5114, %5219
  %5299 = getelementptr inbounds [8 x <2 x i64>], [8 x <2 x i64>]* %17, i64 0, i64 1
  %5300 = getelementptr inbounds [8 x <2 x i64>], [8 x <2 x i64>]* %17, i64 0, i64 2
  %5301 = getelementptr inbounds [8 x <2 x i64>], [8 x <2 x i64>]* %17, i64 0, i64 3
  %5302 = getelementptr inbounds [8 x <2 x i64>], [8 x <2 x i64>]* %17, i64 0, i64 4
  %5303 = getelementptr inbounds [8 x <2 x i64>], [8 x <2 x i64>]* %17, i64 0, i64 5
  %5304 = getelementptr inbounds [8 x <2 x i64>], [8 x <2 x i64>]* %17, i64 0, i64 6
  %5305 = getelementptr inbounds [8 x <2 x i64>], [8 x <2 x i64>]* %17, i64 0, i64 7
  %5306 = bitcast [8 x <2 x i64>]* %17 to <8 x i16>*
  %5307 = load <8 x i16>, <8 x i16>* %5306, align 16
  %5308 = bitcast <2 x i64>* %5299 to <8 x i16>*
  %5309 = load <8 x i16>, <8 x i16>* %5308, align 16
  %5310 = shufflevector <8 x i16> %5307, <8 x i16> %5309, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %5311 = bitcast <2 x i64>* %5300 to <8 x i16>*
  %5312 = load <8 x i16>, <8 x i16>* %5311, align 16
  %5313 = bitcast <2 x i64>* %5301 to <8 x i16>*
  %5314 = load <8 x i16>, <8 x i16>* %5313, align 16
  %5315 = shufflevector <8 x i16> %5312, <8 x i16> %5314, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %5316 = bitcast <2 x i64>* %5302 to <8 x i16>*
  %5317 = load <8 x i16>, <8 x i16>* %5316, align 16
  %5318 = bitcast <2 x i64>* %5303 to <8 x i16>*
  %5319 = load <8 x i16>, <8 x i16>* %5318, align 16
  %5320 = shufflevector <8 x i16> %5317, <8 x i16> %5319, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %5321 = bitcast <2 x i64>* %5304 to <8 x i16>*
  %5322 = load <8 x i16>, <8 x i16>* %5321, align 16
  %5323 = bitcast <2 x i64>* %5305 to <8 x i16>*
  %5324 = load <8 x i16>, <8 x i16>* %5323, align 16
  %5325 = shufflevector <8 x i16> %5322, <8 x i16> %5324, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %5326 = bitcast <8 x i16> %5310 to <4 x i32>
  %5327 = bitcast <8 x i16> %5315 to <4 x i32>
  %5328 = shufflevector <4 x i32> %5326, <4 x i32> %5327, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %5329 = bitcast <4 x i32> %5328 to <2 x i64>
  %5330 = bitcast <8 x i16> %5320 to <4 x i32>
  %5331 = bitcast <8 x i16> %5325 to <4 x i32>
  %5332 = shufflevector <4 x i32> %5330, <4 x i32> %5331, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %5333 = bitcast <4 x i32> %5332 to <2 x i64>
  %5334 = shufflevector <2 x i64> %5329, <2 x i64> %5333, <2 x i32> <i32 0, i32 2>
  %5335 = shufflevector <2 x i64> %5329, <2 x i64> %5333, <2 x i32> <i32 1, i32 3>
  %5336 = shufflevector <4 x i32> %5326, <4 x i32> %5327, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %5337 = bitcast <4 x i32> %5336 to <2 x i64>
  %5338 = shufflevector <4 x i32> %5330, <4 x i32> %5331, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %5339 = bitcast <4 x i32> %5338 to <2 x i64>
  %5340 = shufflevector <2 x i64> %5337, <2 x i64> %5339, <2 x i32> <i32 0, i32 2>
  %5341 = shufflevector <2 x i64> %5337, <2 x i64> %5339, <2 x i32> <i32 1, i32 3>
  %5342 = bitcast i16* %0 to <2 x i64>*
  store <2 x i64> %5334, <2 x i64>* %5342, align 1
  %5343 = getelementptr inbounds i16, i16* %0, i64 %1
  %5344 = bitcast i16* %5343 to <2 x i64>*
  store <2 x i64> %5335, <2 x i64>* %5344, align 1
  %5345 = shl nsw i64 %1, 1
  %5346 = getelementptr inbounds i16, i16* %0, i64 %5345
  %5347 = bitcast i16* %5346 to <2 x i64>*
  store <2 x i64> %5340, <2 x i64>* %5347, align 1
  %5348 = mul nsw i64 %1, 3
  %5349 = getelementptr inbounds i16, i16* %0, i64 %5348
  %5350 = bitcast i16* %5349 to <2 x i64>*
  store <2 x i64> %5341, <2 x i64>* %5350, align 1
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %5095) #8
  br label %7784

5351:                                             ; preds = %5089
  %5352 = bitcast [16 x <2 x i64>]* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %5352) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %5352, i8 -86, i64 256, i1 false) #8
  %5353 = icmp slt i32 %9, 12
  %5354 = sub nsw i32 6, %6
  %5355 = shl i32 23, %6
  %5356 = sext i32 %5355 to i64
  %5357 = getelementptr inbounds i16, i16* %5, i64 %5356
  %5358 = load i16, i16* %5357, align 2
  %5359 = insertelement <16 x i16> undef, i16 %5358, i32 0
  %5360 = shufflevector <16 x i16> %5359, <16 x i16> undef, <16 x i32> zeroinitializer
  %5361 = bitcast <16 x i16> %5360 to <4 x i64>
  br i1 %5353, label %5362, label %5494

5362:                                             ; preds = %5351
  %5363 = trunc i32 %5355 to i16
  %5364 = insertelement <16 x i16> undef, i16 %5363, i32 0
  %5365 = shufflevector <16 x i16> %5364, <16 x i16> undef, <16 x i32> zeroinitializer
  %5366 = icmp eq i32 %6, 0
  br label %5367

5367:                                             ; preds = %5470, %5362
  %5368 = phi i64 [ 0, %5362 ], [ %5492, %5470 ]
  %5369 = phi i32 [ %8, %5362 ], [ %5491, %5470 ]
  %5370 = ashr i32 %5369, %5354
  %5371 = icmp slt i32 %5370, %5355
  br i1 %5371, label %5403, label %5372

5372:                                             ; preds = %5367
  %5373 = trunc i64 %5368 to i32
  %5374 = icmp slt i32 %5373, 16
  br i1 %5374, label %5375, label %5643

5375:                                             ; preds = %5372
  %5376 = shufflevector <4 x i64> %5361, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %5377 = and i64 %5368, 4294967295
  %5378 = sub nsw i64 0, %5368
  %5379 = sub nsw i64 15, %5368
  %5380 = and i64 %5378, 3
  %5381 = icmp eq i64 %5380, 0
  br i1 %5381, label %5389, label %5382

5382:                                             ; preds = %5375, %5382
  %5383 = phi i64 [ %5386, %5382 ], [ %5377, %5375 ]
  %5384 = phi i64 [ %5387, %5382 ], [ %5380, %5375 ]
  %5385 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %19, i64 0, i64 %5383
  store <2 x i64> %5376, <2 x i64>* %5385, align 16
  %5386 = add nuw nsw i64 %5383, 1
  %5387 = add i64 %5384, -1
  %5388 = icmp eq i64 %5387, 0
  br i1 %5388, label %5389, label %5382, !llvm.loop !25

5389:                                             ; preds = %5382, %5375
  %5390 = phi i64 [ %5377, %5375 ], [ %5386, %5382 ]
  %5391 = icmp ult i64 %5379, 3
  br i1 %5391, label %5643, label %5392

5392:                                             ; preds = %5389, %5392
  %5393 = phi i64 [ %5401, %5392 ], [ %5390, %5389 ]
  %5394 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %19, i64 0, i64 %5393
  store <2 x i64> %5376, <2 x i64>* %5394, align 16
  %5395 = add nuw nsw i64 %5393, 1
  %5396 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %19, i64 0, i64 %5395
  store <2 x i64> %5376, <2 x i64>* %5396, align 16
  %5397 = add nuw nsw i64 %5393, 2
  %5398 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %19, i64 0, i64 %5397
  store <2 x i64> %5376, <2 x i64>* %5398, align 16
  %5399 = add nuw nsw i64 %5393, 3
  %5400 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %19, i64 0, i64 %5399
  store <2 x i64> %5376, <2 x i64>* %5400, align 16
  %5401 = add nuw nsw i64 %5393, 4
  %5402 = icmp eq i64 %5401, 16
  br i1 %5402, label %5643, label %5392

5403:                                             ; preds = %5367
  %5404 = sext i32 %5370 to i64
  %5405 = getelementptr inbounds i16, i16* %5, i64 %5404
  %5406 = bitcast i16* %5405 to <2 x i64>*
  %5407 = load <2 x i64>, <2 x i64>* %5406, align 1
  br i1 %5366, label %5444, label %5408

5408:                                             ; preds = %5403
  %5409 = getelementptr inbounds i16, i16* %5405, i64 8
  %5410 = bitcast i16* %5409 to <16 x i8>*
  %5411 = load <16 x i8>, <16 x i8>* %5410, align 1
  %5412 = bitcast <2 x i64> %5407 to <16 x i8>
  %5413 = shufflevector <16 x i8> %5412, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 4, i32 5, i32 8, i32 9, i32 12, i32 13, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %5414 = shufflevector <16 x i8> %5411, <16 x i8> undef, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 4, i32 5, i32 8, i32 9, i32 12, i32 13>
  %5415 = shufflevector <16 x i8> %5412, <16 x i8> undef, <16 x i32> <i32 2, i32 3, i32 6, i32 7, i32 10, i32 11, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %5416 = shufflevector <16 x i8> %5411, <16 x i8> undef, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 2, i32 3, i32 6, i32 7, i32 10, i32 11, i32 14, i32 15>
  %5417 = shufflevector <16 x i8> %5413, <16 x i8> %5414, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5418 = bitcast <16 x i8> %5417 to <2 x i64>
  %5419 = shufflevector <16 x i8> %5415, <16 x i8> %5416, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5420 = bitcast <16 x i8> %5419 to <2 x i64>
  %5421 = trunc i32 %5370 to i16
  %5422 = add i16 %5421, 2
  %5423 = add i16 %5421, 4
  %5424 = add i16 %5421, 6
  %5425 = add i16 %5421, 8
  %5426 = add i16 %5421, 10
  %5427 = add i16 %5421, 12
  %5428 = add i16 %5421, 14
  %5429 = insertelement <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0>, i16 %5421, i32 0
  %5430 = insertelement <16 x i16> %5429, i16 %5422, i32 1
  %5431 = insertelement <16 x i16> %5430, i16 %5423, i32 2
  %5432 = insertelement <16 x i16> %5431, i16 %5424, i32 3
  %5433 = insertelement <16 x i16> %5432, i16 %5425, i32 4
  %5434 = insertelement <16 x i16> %5433, i16 %5426, i32 5
  %5435 = insertelement <16 x i16> %5434, i16 %5427, i32 6
  %5436 = insertelement <16 x i16> %5435, i16 %5428, i32 7
  %5437 = trunc i32 %5369 to i16
  %5438 = insertelement <16 x i16> undef, i16 %5437, i32 0
  %5439 = shufflevector <16 x i16> %5438, <16 x i16> undef, <16 x i32> zeroinitializer
  %5440 = tail call <16 x i16> @llvm.x86.avx2.pslli.w(<16 x i16> %5439, i32 %6) #8
  %5441 = lshr <16 x i16> %5440, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %5442 = bitcast <16 x i16> %5441 to <4 x i64>
  %5443 = and <4 x i64> %5442, <i64 8725857424048159, i64 8725857424048159, i64 8725857424048159, i64 8725857424048159>
  br label %5470

5444:                                             ; preds = %5403
  %5445 = getelementptr inbounds i16, i16* %5405, i64 1
  %5446 = bitcast i16* %5445 to <2 x i64>*
  %5447 = load <2 x i64>, <2 x i64>* %5446, align 1
  %5448 = trunc i32 %5370 to i16
  %5449 = add i16 %5448, 1
  %5450 = add i16 %5448, 2
  %5451 = add i16 %5448, 3
  %5452 = add i16 %5448, 4
  %5453 = add i16 %5448, 5
  %5454 = add i16 %5448, 6
  %5455 = add i16 %5448, 7
  %5456 = insertelement <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0>, i16 %5448, i32 0
  %5457 = insertelement <16 x i16> %5456, i16 %5449, i32 1
  %5458 = insertelement <16 x i16> %5457, i16 %5450, i32 2
  %5459 = insertelement <16 x i16> %5458, i16 %5451, i32 3
  %5460 = insertelement <16 x i16> %5459, i16 %5452, i32 4
  %5461 = insertelement <16 x i16> %5460, i16 %5453, i32 5
  %5462 = insertelement <16 x i16> %5461, i16 %5454, i32 6
  %5463 = insertelement <16 x i16> %5462, i16 %5455, i32 7
  %5464 = trunc i32 %5369 to i16
  %5465 = insertelement <16 x i16> undef, i16 %5464, i32 0
  %5466 = and <16 x i16> %5465, <i16 63, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef>
  %5467 = lshr <16 x i16> %5466, <i16 1, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0>
  %5468 = shufflevector <16 x i16> %5467, <16 x i16> undef, <16 x i32> zeroinitializer
  %5469 = bitcast <16 x i16> %5468 to <4 x i64>
  br label %5470

5470:                                             ; preds = %5444, %5408
  %5471 = phi <16 x i16> [ %5436, %5408 ], [ %5463, %5444 ]
  %5472 = phi <2 x i64> [ %5418, %5408 ], [ %5407, %5444 ]
  %5473 = phi <2 x i64> [ %5420, %5408 ], [ %5447, %5444 ]
  %5474 = phi <4 x i64> [ %5443, %5408 ], [ %5469, %5444 ]
  %5475 = shufflevector <2 x i64> %5472, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %5476 = shufflevector <2 x i64> %5473, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %5477 = bitcast <4 x i64> %5476 to <16 x i16>
  %5478 = bitcast <4 x i64> %5475 to <16 x i16>
  %5479 = sub <16 x i16> %5477, %5478
  %5480 = shl <16 x i16> %5478, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %5481 = or <16 x i16> %5480, <i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16>
  %5482 = bitcast <4 x i64> %5474 to <16 x i16>
  %5483 = mul <16 x i16> %5479, %5482
  %5484 = add <16 x i16> %5483, %5481
  %5485 = lshr <16 x i16> %5484, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %5486 = icmp sgt <16 x i16> %5365, %5471
  %5487 = select <16 x i1> %5486, <16 x i16> %5485, <16 x i16> %5360
  %5488 = bitcast <16 x i16> %5487 to <4 x i64>
  %5489 = shufflevector <4 x i64> %5488, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %5490 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %19, i64 0, i64 %5368
  store <2 x i64> %5489, <2 x i64>* %5490, align 16
  %5491 = add nsw i32 %5369, %8
  %5492 = add nuw nsw i64 %5368, 1
  %5493 = icmp eq i64 %5492, 16
  br i1 %5493, label %5643, label %5367

5494:                                             ; preds = %5351
  %5495 = insertelement <8 x i32> undef, i32 %5355, i32 0
  %5496 = shufflevector <8 x i32> %5495, <8 x i32> undef, <8 x i32> zeroinitializer
  %5497 = icmp eq i32 %6, 0
  %5498 = bitcast <16 x i16> %5360 to <32 x i8>
  br label %5499

5499:                                             ; preds = %5608, %5494
  %5500 = phi i64 [ 0, %5494 ], [ %5641, %5608 ]
  %5501 = phi i32 [ %8, %5494 ], [ %5640, %5608 ]
  %5502 = ashr i32 %5501, %5354
  %5503 = icmp slt i32 %5502, %5355
  br i1 %5503, label %5535, label %5504

5504:                                             ; preds = %5499
  %5505 = trunc i64 %5500 to i32
  %5506 = icmp slt i32 %5505, 16
  br i1 %5506, label %5507, label %5643

5507:                                             ; preds = %5504
  %5508 = shufflevector <4 x i64> %5361, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %5509 = and i64 %5500, 4294967295
  %5510 = sub nsw i64 0, %5500
  %5511 = sub nsw i64 15, %5500
  %5512 = and i64 %5510, 3
  %5513 = icmp eq i64 %5512, 0
  br i1 %5513, label %5521, label %5514

5514:                                             ; preds = %5507, %5514
  %5515 = phi i64 [ %5518, %5514 ], [ %5509, %5507 ]
  %5516 = phi i64 [ %5519, %5514 ], [ %5512, %5507 ]
  %5517 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %19, i64 0, i64 %5515
  store <2 x i64> %5508, <2 x i64>* %5517, align 16
  %5518 = add nuw nsw i64 %5515, 1
  %5519 = add i64 %5516, -1
  %5520 = icmp eq i64 %5519, 0
  br i1 %5520, label %5521, label %5514, !llvm.loop !26

5521:                                             ; preds = %5514, %5507
  %5522 = phi i64 [ %5509, %5507 ], [ %5518, %5514 ]
  %5523 = icmp ult i64 %5511, 3
  br i1 %5523, label %5643, label %5524

5524:                                             ; preds = %5521, %5524
  %5525 = phi i64 [ %5533, %5524 ], [ %5522, %5521 ]
  %5526 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %19, i64 0, i64 %5525
  store <2 x i64> %5508, <2 x i64>* %5526, align 16
  %5527 = add nuw nsw i64 %5525, 1
  %5528 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %19, i64 0, i64 %5527
  store <2 x i64> %5508, <2 x i64>* %5528, align 16
  %5529 = add nuw nsw i64 %5525, 2
  %5530 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %19, i64 0, i64 %5529
  store <2 x i64> %5508, <2 x i64>* %5530, align 16
  %5531 = add nuw nsw i64 %5525, 3
  %5532 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %19, i64 0, i64 %5531
  store <2 x i64> %5508, <2 x i64>* %5532, align 16
  %5533 = add nuw nsw i64 %5525, 4
  %5534 = icmp eq i64 %5533, 16
  br i1 %5534, label %5643, label %5524

5535:                                             ; preds = %5499
  %5536 = sext i32 %5502 to i64
  %5537 = getelementptr inbounds i16, i16* %5, i64 %5536
  %5538 = bitcast i16* %5537 to <8 x i16>*
  %5539 = load <8 x i16>, <8 x i16>* %5538, align 1
  %5540 = zext <8 x i16> %5539 to <8 x i32>
  br i1 %5497, label %5578, label %5541

5541:                                             ; preds = %5535
  %5542 = shufflevector <8 x i32> %5540, <8 x i32> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 1, i32 3, i32 5, i32 7>
  %5543 = bitcast <8 x i32> %5542 to <4 x i64>
  %5544 = shufflevector <4 x i64> %5543, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %5545 = getelementptr inbounds i16, i16* %5537, i64 8
  %5546 = bitcast i16* %5545 to <8 x i16>*
  %5547 = load <8 x i16>, <8 x i16>* %5546, align 1
  %5548 = zext <8 x i16> %5547 to <8 x i32>
  %5549 = shufflevector <8 x i32> %5548, <8 x i32> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 1, i32 3, i32 5, i32 7>
  %5550 = bitcast <8 x i32> %5549 to <4 x i64>
  %5551 = shufflevector <4 x i64> %5550, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %5552 = shufflevector <4 x i64> %5543, <4 x i64> %5550, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %5553 = shufflevector <2 x i64> %5544, <2 x i64> %5551, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %5554 = insertelement <4 x i32> undef, i32 %5502, i32 0
  %5555 = shufflevector <4 x i32> %5554, <4 x i32> undef, <4 x i32> zeroinitializer
  %5556 = add nsw <4 x i32> %5555, <i32 2, i32 4, i32 6, i32 8>
  %5557 = add nsw i32 %5502, 10
  %5558 = add nsw i32 %5502, 12
  %5559 = add nsw i32 %5502, 14
  %5560 = insertelement <8 x i32> undef, i32 %5502, i32 0
  %5561 = extractelement <4 x i32> %5556, i32 0
  %5562 = insertelement <8 x i32> %5560, i32 %5561, i32 1
  %5563 = extractelement <4 x i32> %5556, i32 1
  %5564 = insertelement <8 x i32> %5562, i32 %5563, i32 2
  %5565 = extractelement <4 x i32> %5556, i32 2
  %5566 = insertelement <8 x i32> %5564, i32 %5565, i32 3
  %5567 = extractelement <4 x i32> %5556, i32 3
  %5568 = insertelement <8 x i32> %5566, i32 %5567, i32 4
  %5569 = insertelement <8 x i32> %5568, i32 %5557, i32 5
  %5570 = insertelement <8 x i32> %5569, i32 %5558, i32 6
  %5571 = insertelement <8 x i32> %5570, i32 %5559, i32 7
  %5572 = insertelement <8 x i32> undef, i32 %5501, i32 0
  %5573 = shufflevector <8 x i32> %5572, <8 x i32> undef, <8 x i32> zeroinitializer
  %5574 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %5573, i32 %6) #8
  %5575 = lshr <8 x i32> %5574, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %5576 = bitcast <8 x i32> %5575 to <4 x i64>
  %5577 = and <4 x i64> %5576, <i64 133143986207, i64 133143986207, i64 133143986207, i64 133143986207>
  br label %5608

5578:                                             ; preds = %5535
  %5579 = getelementptr inbounds i16, i16* %5537, i64 1
  %5580 = bitcast i16* %5579 to <8 x i16>*
  %5581 = load <8 x i16>, <8 x i16>* %5580, align 1
  %5582 = zext <8 x i16> %5581 to <8 x i32>
  %5583 = bitcast <8 x i32> %5582 to <4 x i64>
  %5584 = bitcast <8 x i32> %5540 to <4 x i64>
  %5585 = insertelement <4 x i32> undef, i32 %5502, i32 0
  %5586 = shufflevector <4 x i32> %5585, <4 x i32> undef, <4 x i32> zeroinitializer
  %5587 = add nsw <4 x i32> %5586, <i32 1, i32 2, i32 3, i32 4>
  %5588 = add nsw i32 %5502, 5
  %5589 = add nsw i32 %5502, 6
  %5590 = add nsw i32 %5502, 7
  %5591 = insertelement <8 x i32> undef, i32 %5502, i32 0
  %5592 = extractelement <4 x i32> %5587, i32 0
  %5593 = insertelement <8 x i32> %5591, i32 %5592, i32 1
  %5594 = extractelement <4 x i32> %5587, i32 1
  %5595 = insertelement <8 x i32> %5593, i32 %5594, i32 2
  %5596 = extractelement <4 x i32> %5587, i32 2
  %5597 = insertelement <8 x i32> %5595, i32 %5596, i32 3
  %5598 = extractelement <4 x i32> %5587, i32 3
  %5599 = insertelement <8 x i32> %5597, i32 %5598, i32 4
  %5600 = insertelement <8 x i32> %5599, i32 %5588, i32 5
  %5601 = insertelement <8 x i32> %5600, i32 %5589, i32 6
  %5602 = insertelement <8 x i32> %5601, i32 %5590, i32 7
  %5603 = insertelement <8 x i32> undef, i32 %5501, i32 0
  %5604 = and <8 x i32> %5603, <i32 63, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %5605 = lshr <8 x i32> %5604, <i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>
  %5606 = shufflevector <8 x i32> %5605, <8 x i32> undef, <8 x i32> zeroinitializer
  %5607 = bitcast <8 x i32> %5606 to <4 x i64>
  br label %5608

5608:                                             ; preds = %5578, %5541
  %5609 = phi <4 x i64> [ %5552, %5541 ], [ %5584, %5578 ]
  %5610 = phi <4 x i64> [ %5553, %5541 ], [ %5583, %5578 ]
  %5611 = phi <8 x i32> [ %5571, %5541 ], [ %5602, %5578 ]
  %5612 = phi <4 x i64> [ %5577, %5541 ], [ %5607, %5578 ]
  %5613 = bitcast <4 x i64> %5610 to <8 x i32>
  %5614 = bitcast <4 x i64> %5609 to <8 x i32>
  %5615 = sub <8 x i32> %5613, %5614
  %5616 = shl <8 x i32> %5614, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %5617 = or <8 x i32> %5616, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %5618 = bitcast <4 x i64> %5612 to <8 x i32>
  %5619 = mul <8 x i32> %5615, %5618
  %5620 = add <8 x i32> %5619, %5617
  %5621 = lshr <8 x i32> %5620, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %5622 = bitcast <8 x i32> %5621 to <4 x i64>
  %5623 = shufflevector <4 x i64> %5622, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %5624 = shufflevector <2 x i64> %5623, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %5625 = bitcast <4 x i64> %5624 to <8 x i32>
  %5626 = tail call <16 x i16> @llvm.x86.avx2.packusdw(<8 x i32> %5621, <8 x i32> %5625) #8
  %5627 = icmp sgt <8 x i32> %5496, %5611
  %5628 = sext <8 x i1> %5627 to <8 x i32>
  %5629 = bitcast <8 x i32> %5628 to <4 x i64>
  %5630 = shufflevector <4 x i64> %5629, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %5631 = shufflevector <2 x i64> %5630, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %5632 = bitcast <4 x i64> %5631 to <8 x i32>
  %5633 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %5628, <8 x i32> %5632) #8
  %5634 = bitcast <16 x i16> %5626 to <32 x i8>
  %5635 = bitcast <16 x i16> %5633 to <32 x i8>
  %5636 = tail call <32 x i8> @llvm.x86.avx2.pblendvb(<32 x i8> %5498, <32 x i8> %5634, <32 x i8> %5635) #8
  %5637 = bitcast <32 x i8> %5636 to <4 x i64>
  %5638 = shufflevector <4 x i64> %5637, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %5639 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %19, i64 0, i64 %5500
  store <2 x i64> %5638, <2 x i64>* %5639, align 16
  %5640 = add nsw i32 %5501, %8
  %5641 = add nuw nsw i64 %5500, 1
  %5642 = icmp eq i64 %5641, 16
  br i1 %5642, label %5643, label %5499

5643:                                             ; preds = %5608, %5521, %5524, %5470, %5389, %5392, %5372, %5504
  %5644 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %19, i64 0, i64 1
  %5645 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %19, i64 0, i64 2
  %5646 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %19, i64 0, i64 3
  %5647 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %19, i64 0, i64 4
  %5648 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %19, i64 0, i64 5
  %5649 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %19, i64 0, i64 6
  %5650 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %19, i64 0, i64 7
  %5651 = bitcast [16 x <2 x i64>]* %19 to <8 x i16>*
  %5652 = load <8 x i16>, <8 x i16>* %5651, align 16
  %5653 = bitcast <2 x i64>* %5644 to <8 x i16>*
  %5654 = load <8 x i16>, <8 x i16>* %5653, align 16
  %5655 = shufflevector <8 x i16> %5652, <8 x i16> %5654, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %5656 = bitcast <2 x i64>* %5645 to <8 x i16>*
  %5657 = load <8 x i16>, <8 x i16>* %5656, align 16
  %5658 = bitcast <2 x i64>* %5646 to <8 x i16>*
  %5659 = load <8 x i16>, <8 x i16>* %5658, align 16
  %5660 = shufflevector <8 x i16> %5657, <8 x i16> %5659, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %5661 = bitcast <2 x i64>* %5647 to <8 x i16>*
  %5662 = load <8 x i16>, <8 x i16>* %5661, align 16
  %5663 = bitcast <2 x i64>* %5648 to <8 x i16>*
  %5664 = load <8 x i16>, <8 x i16>* %5663, align 16
  %5665 = shufflevector <8 x i16> %5662, <8 x i16> %5664, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %5666 = bitcast <2 x i64>* %5649 to <8 x i16>*
  %5667 = load <8 x i16>, <8 x i16>* %5666, align 16
  %5668 = bitcast <2 x i64>* %5650 to <8 x i16>*
  %5669 = load <8 x i16>, <8 x i16>* %5668, align 16
  %5670 = shufflevector <8 x i16> %5667, <8 x i16> %5669, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %5671 = bitcast <8 x i16> %5655 to <4 x i32>
  %5672 = bitcast <8 x i16> %5660 to <4 x i32>
  %5673 = shufflevector <4 x i32> %5671, <4 x i32> %5672, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %5674 = bitcast <4 x i32> %5673 to <2 x i64>
  %5675 = bitcast <8 x i16> %5665 to <4 x i32>
  %5676 = bitcast <8 x i16> %5670 to <4 x i32>
  %5677 = shufflevector <4 x i32> %5675, <4 x i32> %5676, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %5678 = bitcast <4 x i32> %5677 to <2 x i64>
  %5679 = shufflevector <2 x i64> %5674, <2 x i64> %5678, <2 x i32> <i32 0, i32 2>
  %5680 = shufflevector <2 x i64> %5674, <2 x i64> %5678, <2 x i32> <i32 1, i32 3>
  %5681 = shufflevector <4 x i32> %5671, <4 x i32> %5672, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %5682 = bitcast <4 x i32> %5681 to <2 x i64>
  %5683 = shufflevector <4 x i32> %5675, <4 x i32> %5676, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %5684 = bitcast <4 x i32> %5683 to <2 x i64>
  %5685 = shufflevector <2 x i64> %5682, <2 x i64> %5684, <2 x i32> <i32 0, i32 2>
  %5686 = shufflevector <2 x i64> %5682, <2 x i64> %5684, <2 x i32> <i32 1, i32 3>
  %5687 = shufflevector <8 x i16> %5652, <8 x i16> %5654, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %5688 = shufflevector <8 x i16> %5657, <8 x i16> %5659, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %5689 = shufflevector <8 x i16> %5662, <8 x i16> %5664, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %5690 = shufflevector <8 x i16> %5667, <8 x i16> %5669, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %5691 = bitcast <8 x i16> %5687 to <4 x i32>
  %5692 = bitcast <8 x i16> %5688 to <4 x i32>
  %5693 = shufflevector <4 x i32> %5691, <4 x i32> %5692, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %5694 = bitcast <4 x i32> %5693 to <2 x i64>
  %5695 = bitcast <8 x i16> %5689 to <4 x i32>
  %5696 = bitcast <8 x i16> %5690 to <4 x i32>
  %5697 = shufflevector <4 x i32> %5695, <4 x i32> %5696, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %5698 = bitcast <4 x i32> %5697 to <2 x i64>
  %5699 = shufflevector <2 x i64> %5694, <2 x i64> %5698, <2 x i32> <i32 0, i32 2>
  %5700 = shufflevector <2 x i64> %5694, <2 x i64> %5698, <2 x i32> <i32 1, i32 3>
  %5701 = shufflevector <4 x i32> %5691, <4 x i32> %5692, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %5702 = bitcast <4 x i32> %5701 to <2 x i64>
  %5703 = shufflevector <4 x i32> %5695, <4 x i32> %5696, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %5704 = bitcast <4 x i32> %5703 to <2 x i64>
  %5705 = shufflevector <2 x i64> %5702, <2 x i64> %5704, <2 x i32> <i32 0, i32 2>
  %5706 = shufflevector <2 x i64> %5702, <2 x i64> %5704, <2 x i32> <i32 1, i32 3>
  %5707 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %19, i64 0, i64 8
  %5708 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %19, i64 0, i64 9
  %5709 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %19, i64 0, i64 10
  %5710 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %19, i64 0, i64 11
  %5711 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %19, i64 0, i64 12
  %5712 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %19, i64 0, i64 13
  %5713 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %19, i64 0, i64 14
  %5714 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %19, i64 0, i64 15
  %5715 = bitcast <2 x i64>* %5707 to <8 x i16>*
  %5716 = load <8 x i16>, <8 x i16>* %5715, align 16
  %5717 = bitcast <2 x i64>* %5708 to <8 x i16>*
  %5718 = load <8 x i16>, <8 x i16>* %5717, align 16
  %5719 = shufflevector <8 x i16> %5716, <8 x i16> %5718, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %5720 = bitcast <2 x i64>* %5709 to <8 x i16>*
  %5721 = load <8 x i16>, <8 x i16>* %5720, align 16
  %5722 = bitcast <2 x i64>* %5710 to <8 x i16>*
  %5723 = load <8 x i16>, <8 x i16>* %5722, align 16
  %5724 = shufflevector <8 x i16> %5721, <8 x i16> %5723, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %5725 = bitcast <2 x i64>* %5711 to <8 x i16>*
  %5726 = load <8 x i16>, <8 x i16>* %5725, align 16
  %5727 = bitcast <2 x i64>* %5712 to <8 x i16>*
  %5728 = load <8 x i16>, <8 x i16>* %5727, align 16
  %5729 = shufflevector <8 x i16> %5726, <8 x i16> %5728, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %5730 = bitcast <2 x i64>* %5713 to <8 x i16>*
  %5731 = load <8 x i16>, <8 x i16>* %5730, align 16
  %5732 = bitcast <2 x i64>* %5714 to <8 x i16>*
  %5733 = load <8 x i16>, <8 x i16>* %5732, align 16
  %5734 = shufflevector <8 x i16> %5731, <8 x i16> %5733, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %5735 = bitcast <8 x i16> %5719 to <4 x i32>
  %5736 = bitcast <8 x i16> %5724 to <4 x i32>
  %5737 = shufflevector <4 x i32> %5735, <4 x i32> %5736, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %5738 = bitcast <4 x i32> %5737 to <2 x i64>
  %5739 = bitcast <8 x i16> %5729 to <4 x i32>
  %5740 = bitcast <8 x i16> %5734 to <4 x i32>
  %5741 = shufflevector <4 x i32> %5739, <4 x i32> %5740, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %5742 = bitcast <4 x i32> %5741 to <2 x i64>
  %5743 = shufflevector <2 x i64> %5738, <2 x i64> %5742, <2 x i32> <i32 0, i32 2>
  %5744 = shufflevector <2 x i64> %5738, <2 x i64> %5742, <2 x i32> <i32 1, i32 3>
  %5745 = shufflevector <4 x i32> %5735, <4 x i32> %5736, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %5746 = bitcast <4 x i32> %5745 to <2 x i64>
  %5747 = shufflevector <4 x i32> %5739, <4 x i32> %5740, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %5748 = bitcast <4 x i32> %5747 to <2 x i64>
  %5749 = shufflevector <2 x i64> %5746, <2 x i64> %5748, <2 x i32> <i32 0, i32 2>
  %5750 = shufflevector <2 x i64> %5746, <2 x i64> %5748, <2 x i32> <i32 1, i32 3>
  %5751 = shufflevector <8 x i16> %5716, <8 x i16> %5718, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %5752 = shufflevector <8 x i16> %5721, <8 x i16> %5723, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %5753 = shufflevector <8 x i16> %5726, <8 x i16> %5728, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %5754 = shufflevector <8 x i16> %5731, <8 x i16> %5733, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %5755 = bitcast <8 x i16> %5751 to <4 x i32>
  %5756 = bitcast <8 x i16> %5752 to <4 x i32>
  %5757 = shufflevector <4 x i32> %5755, <4 x i32> %5756, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %5758 = bitcast <4 x i32> %5757 to <2 x i64>
  %5759 = bitcast <8 x i16> %5753 to <4 x i32>
  %5760 = bitcast <8 x i16> %5754 to <4 x i32>
  %5761 = shufflevector <4 x i32> %5759, <4 x i32> %5760, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %5762 = bitcast <4 x i32> %5761 to <2 x i64>
  %5763 = shufflevector <2 x i64> %5758, <2 x i64> %5762, <2 x i32> <i32 0, i32 2>
  %5764 = shufflevector <2 x i64> %5758, <2 x i64> %5762, <2 x i32> <i32 1, i32 3>
  %5765 = shufflevector <4 x i32> %5755, <4 x i32> %5756, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %5766 = bitcast <4 x i32> %5765 to <2 x i64>
  %5767 = shufflevector <4 x i32> %5759, <4 x i32> %5760, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %5768 = bitcast <4 x i32> %5767 to <2 x i64>
  %5769 = shufflevector <2 x i64> %5766, <2 x i64> %5768, <2 x i32> <i32 0, i32 2>
  %5770 = shufflevector <2 x i64> %5766, <2 x i64> %5768, <2 x i32> <i32 1, i32 3>
  %5771 = bitcast i16* %0 to <2 x i64>*
  store <2 x i64> %5679, <2 x i64>* %5771, align 1
  %5772 = getelementptr inbounds i16, i16* %0, i64 8
  %5773 = bitcast i16* %5772 to <2 x i64>*
  store <2 x i64> %5743, <2 x i64>* %5773, align 1
  %5774 = getelementptr inbounds i16, i16* %0, i64 %1
  %5775 = bitcast i16* %5774 to <2 x i64>*
  store <2 x i64> %5680, <2 x i64>* %5775, align 1
  %5776 = getelementptr inbounds i16, i16* %5774, i64 8
  %5777 = bitcast i16* %5776 to <2 x i64>*
  store <2 x i64> %5744, <2 x i64>* %5777, align 1
  %5778 = shl nsw i64 %1, 1
  %5779 = getelementptr inbounds i16, i16* %0, i64 %5778
  %5780 = bitcast i16* %5779 to <2 x i64>*
  store <2 x i64> %5685, <2 x i64>* %5780, align 1
  %5781 = getelementptr inbounds i16, i16* %5779, i64 8
  %5782 = bitcast i16* %5781 to <2 x i64>*
  store <2 x i64> %5749, <2 x i64>* %5782, align 1
  %5783 = mul nsw i64 %1, 3
  %5784 = getelementptr inbounds i16, i16* %0, i64 %5783
  %5785 = bitcast i16* %5784 to <2 x i64>*
  store <2 x i64> %5686, <2 x i64>* %5785, align 1
  %5786 = getelementptr inbounds i16, i16* %5784, i64 8
  %5787 = bitcast i16* %5786 to <2 x i64>*
  store <2 x i64> %5750, <2 x i64>* %5787, align 1
  %5788 = shl nsw i64 %1, 2
  %5789 = getelementptr inbounds i16, i16* %0, i64 %5788
  %5790 = bitcast i16* %5789 to <2 x i64>*
  store <2 x i64> %5699, <2 x i64>* %5790, align 1
  %5791 = getelementptr inbounds i16, i16* %5789, i64 8
  %5792 = bitcast i16* %5791 to <2 x i64>*
  store <2 x i64> %5763, <2 x i64>* %5792, align 1
  %5793 = mul nsw i64 %1, 5
  %5794 = getelementptr inbounds i16, i16* %0, i64 %5793
  %5795 = bitcast i16* %5794 to <2 x i64>*
  store <2 x i64> %5700, <2 x i64>* %5795, align 1
  %5796 = getelementptr inbounds i16, i16* %5794, i64 8
  %5797 = bitcast i16* %5796 to <2 x i64>*
  store <2 x i64> %5764, <2 x i64>* %5797, align 1
  %5798 = mul nsw i64 %1, 6
  %5799 = getelementptr inbounds i16, i16* %0, i64 %5798
  %5800 = bitcast i16* %5799 to <2 x i64>*
  store <2 x i64> %5705, <2 x i64>* %5800, align 1
  %5801 = getelementptr inbounds i16, i16* %5799, i64 8
  %5802 = bitcast i16* %5801 to <2 x i64>*
  store <2 x i64> %5769, <2 x i64>* %5802, align 1
  %5803 = mul nsw i64 %1, 7
  %5804 = getelementptr inbounds i16, i16* %0, i64 %5803
  %5805 = bitcast i16* %5804 to <2 x i64>*
  store <2 x i64> %5706, <2 x i64>* %5805, align 1
  %5806 = getelementptr inbounds i16, i16* %5804, i64 8
  %5807 = bitcast i16* %5806 to <2 x i64>*
  store <2 x i64> %5770, <2 x i64>* %5807, align 1
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %5352) #8
  br label %7784

5808:                                             ; preds = %5089
  %5809 = bitcast [32 x <4 x i64>]* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %5809) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %5809, i8 -86, i64 1024, i1 false) #8
  %5810 = bitcast [16 x <4 x i64>]* %23 to i8*
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %5810) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %5810, i8 -86, i64 512, i1 false) #8
  %5811 = icmp slt i32 %9, 12
  %5812 = getelementptr inbounds i16, i16* %5, i64 47
  %5813 = load i16, i16* %5812, align 2
  %5814 = insertelement <16 x i16> undef, i16 %5813, i32 0
  %5815 = shufflevector <16 x i16> %5814, <16 x i16> undef, <16 x i32> zeroinitializer
  br i1 %5811, label %5816, label %5926

5816:                                             ; preds = %5808, %5868
  %5817 = phi i64 [ %5924, %5868 ], [ 0, %5808 ]
  %5818 = phi i32 [ %5923, %5868 ], [ %8, %5808 ]
  %5819 = ashr i32 %5818, 6
  %5820 = icmp slt i32 %5818, 3008
  br i1 %5820, label %5868, label %5821

5821:                                             ; preds = %5816
  %5822 = trunc i64 %5817 to i32
  %5823 = icmp slt i32 %5822, 32
  br i1 %5823, label %5824, label %6069

5824:                                             ; preds = %5821
  %5825 = and i64 %5817, 4294967295
  %5826 = sub nsw i64 0, %5817
  %5827 = sub nsw i64 31, %5817
  %5828 = and i64 %5826, 7
  %5829 = icmp eq i64 %5828, 0
  br i1 %5829, label %5838, label %5830

5830:                                             ; preds = %5824, %5830
  %5831 = phi i64 [ %5835, %5830 ], [ %5825, %5824 ]
  %5832 = phi i64 [ %5836, %5830 ], [ %5828, %5824 ]
  %5833 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %16, i64 0, i64 %5831
  %5834 = bitcast <4 x i64>* %5833 to <16 x i16>*
  store <16 x i16> %5815, <16 x i16>* %5834, align 32
  %5835 = add nuw nsw i64 %5831, 1
  %5836 = add i64 %5832, -1
  %5837 = icmp eq i64 %5836, 0
  br i1 %5837, label %5838, label %5830, !llvm.loop !27

5838:                                             ; preds = %5830, %5824
  %5839 = phi i64 [ %5825, %5824 ], [ %5835, %5830 ]
  %5840 = icmp ult i64 %5827, 7
  br i1 %5840, label %6069, label %5841

5841:                                             ; preds = %5838, %5841
  %5842 = phi i64 [ %5866, %5841 ], [ %5839, %5838 ]
  %5843 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %16, i64 0, i64 %5842
  %5844 = bitcast <4 x i64>* %5843 to <16 x i16>*
  store <16 x i16> %5815, <16 x i16>* %5844, align 32
  %5845 = add nuw nsw i64 %5842, 1
  %5846 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %16, i64 0, i64 %5845
  %5847 = bitcast <4 x i64>* %5846 to <16 x i16>*
  store <16 x i16> %5815, <16 x i16>* %5847, align 32
  %5848 = add nuw nsw i64 %5842, 2
  %5849 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %16, i64 0, i64 %5848
  %5850 = bitcast <4 x i64>* %5849 to <16 x i16>*
  store <16 x i16> %5815, <16 x i16>* %5850, align 32
  %5851 = add nuw nsw i64 %5842, 3
  %5852 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %16, i64 0, i64 %5851
  %5853 = bitcast <4 x i64>* %5852 to <16 x i16>*
  store <16 x i16> %5815, <16 x i16>* %5853, align 32
  %5854 = add nuw nsw i64 %5842, 4
  %5855 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %16, i64 0, i64 %5854
  %5856 = bitcast <4 x i64>* %5855 to <16 x i16>*
  store <16 x i16> %5815, <16 x i16>* %5856, align 32
  %5857 = add nuw nsw i64 %5842, 5
  %5858 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %16, i64 0, i64 %5857
  %5859 = bitcast <4 x i64>* %5858 to <16 x i16>*
  store <16 x i16> %5815, <16 x i16>* %5859, align 32
  %5860 = add nuw nsw i64 %5842, 6
  %5861 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %16, i64 0, i64 %5860
  %5862 = bitcast <4 x i64>* %5861 to <16 x i16>*
  store <16 x i16> %5815, <16 x i16>* %5862, align 32
  %5863 = add nuw nsw i64 %5842, 7
  %5864 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %16, i64 0, i64 %5863
  %5865 = bitcast <4 x i64>* %5864 to <16 x i16>*
  store <16 x i16> %5815, <16 x i16>* %5865, align 32
  %5866 = add nuw nsw i64 %5842, 8
  %5867 = icmp eq i64 %5866, 32
  br i1 %5867, label %6069, label %5841

5868:                                             ; preds = %5816
  %5869 = trunc i32 %5818 to i16
  %5870 = insertelement <16 x i16> undef, i16 %5869, i32 0
  %5871 = and <16 x i16> %5870, <i16 63, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef>
  %5872 = lshr <16 x i16> %5871, <i16 1, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0>
  %5873 = shufflevector <16 x i16> %5872, <16 x i16> undef, <16 x i32> zeroinitializer
  %5874 = sext i32 %5819 to i64
  %5875 = getelementptr inbounds i16, i16* %5, i64 %5874
  %5876 = bitcast i16* %5875 to <16 x i16>*
  %5877 = load <16 x i16>, <16 x i16>* %5876, align 1
  %5878 = getelementptr inbounds i16, i16* %5875, i64 1
  %5879 = bitcast i16* %5878 to <16 x i16>*
  %5880 = load <16 x i16>, <16 x i16>* %5879, align 1
  %5881 = sub <16 x i16> %5880, %5877
  %5882 = shl <16 x i16> %5877, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %5883 = or <16 x i16> %5882, <i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16>
  %5884 = mul <16 x i16> %5881, %5873
  %5885 = add <16 x i16> %5884, %5883
  %5886 = lshr <16 x i16> %5885, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %5887 = trunc i32 %5819 to i16
  %5888 = add i16 %5887, 1
  %5889 = add i16 %5887, 2
  %5890 = add i16 %5887, 3
  %5891 = add i16 %5887, 4
  %5892 = add i16 %5887, 5
  %5893 = add i16 %5887, 6
  %5894 = add i16 %5887, 7
  %5895 = add i16 %5887, 8
  %5896 = add i16 %5887, 9
  %5897 = add i16 %5887, 10
  %5898 = add i16 %5887, 11
  %5899 = add i16 %5887, 12
  %5900 = add i16 %5887, 13
  %5901 = add i16 %5887, 14
  %5902 = add i16 %5887, 15
  %5903 = insertelement <16 x i16> undef, i16 %5887, i32 0
  %5904 = insertelement <16 x i16> %5903, i16 %5888, i32 1
  %5905 = insertelement <16 x i16> %5904, i16 %5889, i32 2
  %5906 = insertelement <16 x i16> %5905, i16 %5890, i32 3
  %5907 = insertelement <16 x i16> %5906, i16 %5891, i32 4
  %5908 = insertelement <16 x i16> %5907, i16 %5892, i32 5
  %5909 = insertelement <16 x i16> %5908, i16 %5893, i32 6
  %5910 = insertelement <16 x i16> %5909, i16 %5894, i32 7
  %5911 = insertelement <16 x i16> %5910, i16 %5895, i32 8
  %5912 = insertelement <16 x i16> %5911, i16 %5896, i32 9
  %5913 = insertelement <16 x i16> %5912, i16 %5897, i32 10
  %5914 = insertelement <16 x i16> %5913, i16 %5898, i32 11
  %5915 = insertelement <16 x i16> %5914, i16 %5899, i32 12
  %5916 = insertelement <16 x i16> %5915, i16 %5900, i32 13
  %5917 = insertelement <16 x i16> %5916, i16 %5901, i32 14
  %5918 = insertelement <16 x i16> %5917, i16 %5902, i32 15
  %5919 = icmp slt <16 x i16> %5918, <i16 47, i16 47, i16 47, i16 47, i16 47, i16 47, i16 47, i16 47, i16 47, i16 47, i16 47, i16 47, i16 47, i16 47, i16 47, i16 47>
  %5920 = select <16 x i1> %5919, <16 x i16> %5886, <16 x i16> %5815
  %5921 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %16, i64 0, i64 %5817
  %5922 = bitcast <4 x i64>* %5921 to <16 x i16>*
  store <16 x i16> %5920, <16 x i16>* %5922, align 32
  %5923 = add nsw i32 %5818, %8
  %5924 = add nuw nsw i64 %5817, 1
  %5925 = icmp eq i64 %5924, 32
  br i1 %5925, label %6069, label %5816

5926:                                             ; preds = %5808, %6025
  %5927 = phi i64 [ %6067, %6025 ], [ 0, %5808 ]
  %5928 = phi i32 [ %6066, %6025 ], [ %8, %5808 ]
  %5929 = ashr i32 %5928, 6
  %5930 = icmp slt i32 %5928, 3008
  br i1 %5930, label %5978, label %5931

5931:                                             ; preds = %5926
  %5932 = trunc i64 %5927 to i32
  %5933 = icmp slt i32 %5932, 32
  br i1 %5933, label %5934, label %6069

5934:                                             ; preds = %5931
  %5935 = and i64 %5927, 4294967295
  %5936 = sub nsw i64 0, %5927
  %5937 = sub nsw i64 31, %5927
  %5938 = and i64 %5936, 7
  %5939 = icmp eq i64 %5938, 0
  br i1 %5939, label %5948, label %5940

5940:                                             ; preds = %5934, %5940
  %5941 = phi i64 [ %5945, %5940 ], [ %5935, %5934 ]
  %5942 = phi i64 [ %5946, %5940 ], [ %5938, %5934 ]
  %5943 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %16, i64 0, i64 %5941
  %5944 = bitcast <4 x i64>* %5943 to <16 x i16>*
  store <16 x i16> %5815, <16 x i16>* %5944, align 32
  %5945 = add nuw nsw i64 %5941, 1
  %5946 = add i64 %5942, -1
  %5947 = icmp eq i64 %5946, 0
  br i1 %5947, label %5948, label %5940, !llvm.loop !28

5948:                                             ; preds = %5940, %5934
  %5949 = phi i64 [ %5935, %5934 ], [ %5945, %5940 ]
  %5950 = icmp ult i64 %5937, 7
  br i1 %5950, label %6069, label %5951

5951:                                             ; preds = %5948, %5951
  %5952 = phi i64 [ %5976, %5951 ], [ %5949, %5948 ]
  %5953 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %16, i64 0, i64 %5952
  %5954 = bitcast <4 x i64>* %5953 to <16 x i16>*
  store <16 x i16> %5815, <16 x i16>* %5954, align 32
  %5955 = add nuw nsw i64 %5952, 1
  %5956 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %16, i64 0, i64 %5955
  %5957 = bitcast <4 x i64>* %5956 to <16 x i16>*
  store <16 x i16> %5815, <16 x i16>* %5957, align 32
  %5958 = add nuw nsw i64 %5952, 2
  %5959 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %16, i64 0, i64 %5958
  %5960 = bitcast <4 x i64>* %5959 to <16 x i16>*
  store <16 x i16> %5815, <16 x i16>* %5960, align 32
  %5961 = add nuw nsw i64 %5952, 3
  %5962 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %16, i64 0, i64 %5961
  %5963 = bitcast <4 x i64>* %5962 to <16 x i16>*
  store <16 x i16> %5815, <16 x i16>* %5963, align 32
  %5964 = add nuw nsw i64 %5952, 4
  %5965 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %16, i64 0, i64 %5964
  %5966 = bitcast <4 x i64>* %5965 to <16 x i16>*
  store <16 x i16> %5815, <16 x i16>* %5966, align 32
  %5967 = add nuw nsw i64 %5952, 5
  %5968 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %16, i64 0, i64 %5967
  %5969 = bitcast <4 x i64>* %5968 to <16 x i16>*
  store <16 x i16> %5815, <16 x i16>* %5969, align 32
  %5970 = add nuw nsw i64 %5952, 6
  %5971 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %16, i64 0, i64 %5970
  %5972 = bitcast <4 x i64>* %5971 to <16 x i16>*
  store <16 x i16> %5815, <16 x i16>* %5972, align 32
  %5973 = add nuw nsw i64 %5952, 7
  %5974 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %16, i64 0, i64 %5973
  %5975 = bitcast <4 x i64>* %5974 to <16 x i16>*
  store <16 x i16> %5815, <16 x i16>* %5975, align 32
  %5976 = add nuw nsw i64 %5952, 8
  %5977 = icmp eq i64 %5976, 32
  br i1 %5977, label %6069, label %5951

5978:                                             ; preds = %5926
  %5979 = insertelement <8 x i32> undef, i32 %5928, i32 0
  %5980 = and <8 x i32> %5979, <i32 63, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %5981 = lshr <8 x i32> %5980, <i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>
  %5982 = shufflevector <8 x i32> %5981, <8 x i32> undef, <8 x i32> zeroinitializer
  %5983 = sext i32 %5929 to i64
  %5984 = getelementptr inbounds i16, i16* %5, i64 %5983
  %5985 = bitcast i16* %5984 to <8 x i16>*
  %5986 = load <8 x i16>, <8 x i16>* %5985, align 1
  %5987 = zext <8 x i16> %5986 to <8 x i32>
  %5988 = getelementptr inbounds i16, i16* %5984, i64 1
  %5989 = bitcast i16* %5988 to <8 x i16>*
  %5990 = load <8 x i16>, <8 x i16>* %5989, align 1
  %5991 = zext <8 x i16> %5990 to <8 x i32>
  %5992 = sub nsw <8 x i32> %5991, %5987
  %5993 = shl nuw nsw <8 x i32> %5987, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %5994 = or <8 x i32> %5993, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %5995 = mul <8 x i32> %5992, %5982
  %5996 = add <8 x i32> %5995, %5994
  %5997 = lshr <8 x i32> %5996, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %5998 = bitcast <8 x i32> %5997 to <4 x i64>
  %5999 = shufflevector <4 x i64> %5998, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %6000 = shufflevector <2 x i64> %5999, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %6001 = bitcast <4 x i64> %6000 to <8 x i32>
  %6002 = tail call <16 x i16> @llvm.x86.avx2.packusdw(<8 x i32> %5997, <8 x i32> %6001) #8
  %6003 = bitcast <16 x i16> %6002 to <4 x i64>
  %6004 = icmp slt i32 %5928, 2496
  br i1 %6004, label %6005, label %6025

6005:                                             ; preds = %5978
  %6006 = getelementptr inbounds i16, i16* %5984, i64 8
  %6007 = bitcast i16* %6006 to <8 x i16>*
  %6008 = load <8 x i16>, <8 x i16>* %6007, align 1
  %6009 = zext <8 x i16> %6008 to <8 x i32>
  %6010 = getelementptr inbounds i16, i16* %5984, i64 9
  %6011 = bitcast i16* %6010 to <8 x i16>*
  %6012 = load <8 x i16>, <8 x i16>* %6011, align 1
  %6013 = zext <8 x i16> %6012 to <8 x i32>
  %6014 = sub nsw <8 x i32> %6013, %6009
  %6015 = shl nuw nsw <8 x i32> %6009, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %6016 = or <8 x i32> %6015, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %6017 = mul <8 x i32> %6014, %5982
  %6018 = add <8 x i32> %6017, %6016
  %6019 = lshr <8 x i32> %6018, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %6020 = bitcast <8 x i32> %6019 to <4 x i64>
  %6021 = shufflevector <4 x i64> %6020, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %6022 = shufflevector <2 x i64> %6021, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %6023 = bitcast <4 x i64> %6022 to <8 x i32>
  %6024 = tail call <16 x i16> @llvm.x86.avx2.packusdw(<8 x i32> %6019, <8 x i32> %6023) #8
  br label %6025

6025:                                             ; preds = %6005, %5978
  %6026 = phi <16 x i16> [ %6024, %6005 ], [ %5815, %5978 ]
  %6027 = bitcast <16 x i16> %6026 to <4 x i64>
  %6028 = shufflevector <4 x i64> %6003, <4 x i64> %6027, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %6029 = trunc i32 %5929 to i16
  %6030 = add i16 %6029, 1
  %6031 = add i16 %6029, 2
  %6032 = add i16 %6029, 3
  %6033 = add i16 %6029, 4
  %6034 = add i16 %6029, 5
  %6035 = add i16 %6029, 6
  %6036 = add i16 %6029, 7
  %6037 = add i16 %6029, 8
  %6038 = add i16 %6029, 9
  %6039 = add i16 %6029, 10
  %6040 = add i16 %6029, 11
  %6041 = add i16 %6029, 12
  %6042 = add i16 %6029, 13
  %6043 = add i16 %6029, 14
  %6044 = add i16 %6029, 15
  %6045 = insertelement <16 x i16> undef, i16 %6029, i32 0
  %6046 = insertelement <16 x i16> %6045, i16 %6030, i32 1
  %6047 = insertelement <16 x i16> %6046, i16 %6031, i32 2
  %6048 = insertelement <16 x i16> %6047, i16 %6032, i32 3
  %6049 = insertelement <16 x i16> %6048, i16 %6033, i32 4
  %6050 = insertelement <16 x i16> %6049, i16 %6034, i32 5
  %6051 = insertelement <16 x i16> %6050, i16 %6035, i32 6
  %6052 = insertelement <16 x i16> %6051, i16 %6036, i32 7
  %6053 = insertelement <16 x i16> %6052, i16 %6037, i32 8
  %6054 = insertelement <16 x i16> %6053, i16 %6038, i32 9
  %6055 = insertelement <16 x i16> %6054, i16 %6039, i32 10
  %6056 = insertelement <16 x i16> %6055, i16 %6040, i32 11
  %6057 = insertelement <16 x i16> %6056, i16 %6041, i32 12
  %6058 = insertelement <16 x i16> %6057, i16 %6042, i32 13
  %6059 = insertelement <16 x i16> %6058, i16 %6043, i32 14
  %6060 = insertelement <16 x i16> %6059, i16 %6044, i32 15
  %6061 = icmp slt <16 x i16> %6060, <i16 47, i16 47, i16 47, i16 47, i16 47, i16 47, i16 47, i16 47, i16 47, i16 47, i16 47, i16 47, i16 47, i16 47, i16 47, i16 47>
  %6062 = bitcast <4 x i64> %6028 to <16 x i16>
  %6063 = select <16 x i1> %6061, <16 x i16> %6062, <16 x i16> %5815
  %6064 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %16, i64 0, i64 %5927
  %6065 = bitcast <4 x i64>* %6064 to <16 x i16>*
  store <16 x i16> %6063, <16 x i16>* %6065, align 32
  %6066 = add nsw i32 %5928, %8
  %6067 = add nuw nsw i64 %5927, 1
  %6068 = icmp eq i64 %6067, 32
  br i1 %6068, label %6069, label %5926

6069:                                             ; preds = %6025, %5948, %5951, %5868, %5838, %5841, %5931, %5821
  %6070 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %23, i64 0, i64 8
  %6071 = bitcast <4 x i64>* %6070 to <8 x i32>*
  %6072 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %23, i64 0, i64 9
  %6073 = bitcast <4 x i64>* %6072 to <8 x i32>*
  %6074 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %23, i64 0, i64 10
  %6075 = bitcast <4 x i64>* %6074 to <8 x i32>*
  %6076 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %23, i64 0, i64 11
  %6077 = bitcast <4 x i64>* %6076 to <8 x i32>*
  %6078 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %23, i64 0, i64 12
  %6079 = bitcast <4 x i64>* %6078 to <8 x i32>*
  %6080 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %23, i64 0, i64 13
  %6081 = bitcast <4 x i64>* %6080 to <8 x i32>*
  %6082 = shl nsw i64 %1, 1
  %6083 = mul nsw i64 %1, 3
  %6084 = shl nsw i64 %1, 2
  %6085 = mul nsw i64 %1, 5
  %6086 = mul nsw i64 %1, 6
  %6087 = mul nsw i64 %1, 7
  %6088 = shl nsw i64 %1, 3
  %6089 = mul nsw i64 %1, 9
  %6090 = mul nsw i64 %1, 10
  %6091 = mul nsw i64 %1, 11
  %6092 = mul nsw i64 %1, 12
  %6093 = mul nsw i64 %1, 13
  %6094 = mul nsw i64 %1, 14
  %6095 = mul nsw i64 %1, 15
  br label %6096

6096:                                             ; preds = %6096, %6069
  %6097 = phi i64 [ 0, %6069 ], [ %6339, %6096 ]
  %6098 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %16, i64 0, i64 %6097
  %6099 = bitcast <4 x i64>* %6098 to <16 x i16>*
  %6100 = load <16 x i16>, <16 x i16>* %6099, align 32
  %6101 = getelementptr inbounds <4 x i64>, <4 x i64>* %6098, i64 1
  %6102 = bitcast <4 x i64>* %6101 to <16 x i16>*
  %6103 = load <16 x i16>, <16 x i16>* %6102, align 32
  %6104 = shufflevector <16 x i16> %6100, <16 x i16> %6103, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %6105 = getelementptr inbounds <4 x i64>, <4 x i64>* %6098, i64 2
  %6106 = bitcast <4 x i64>* %6105 to <16 x i16>*
  %6107 = load <16 x i16>, <16 x i16>* %6106, align 32
  %6108 = getelementptr inbounds <4 x i64>, <4 x i64>* %6098, i64 3
  %6109 = bitcast <4 x i64>* %6108 to <16 x i16>*
  %6110 = load <16 x i16>, <16 x i16>* %6109, align 32
  %6111 = shufflevector <16 x i16> %6107, <16 x i16> %6110, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %6112 = getelementptr inbounds <4 x i64>, <4 x i64>* %6098, i64 4
  %6113 = bitcast <4 x i64>* %6112 to <16 x i16>*
  %6114 = load <16 x i16>, <16 x i16>* %6113, align 32
  %6115 = getelementptr inbounds <4 x i64>, <4 x i64>* %6098, i64 5
  %6116 = bitcast <4 x i64>* %6115 to <16 x i16>*
  %6117 = load <16 x i16>, <16 x i16>* %6116, align 32
  %6118 = shufflevector <16 x i16> %6114, <16 x i16> %6117, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %6119 = getelementptr inbounds <4 x i64>, <4 x i64>* %6098, i64 6
  %6120 = bitcast <4 x i64>* %6119 to <16 x i16>*
  %6121 = load <16 x i16>, <16 x i16>* %6120, align 32
  %6122 = getelementptr inbounds <4 x i64>, <4 x i64>* %6098, i64 7
  %6123 = bitcast <4 x i64>* %6122 to <16 x i16>*
  %6124 = load <16 x i16>, <16 x i16>* %6123, align 32
  %6125 = shufflevector <16 x i16> %6121, <16 x i16> %6124, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %6126 = bitcast <16 x i16> %6104 to <8 x i32>
  %6127 = bitcast <16 x i16> %6111 to <8 x i32>
  %6128 = shufflevector <8 x i32> %6126, <8 x i32> %6127, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %6129 = bitcast <8 x i32> %6128 to <4 x i64>
  %6130 = bitcast <16 x i16> %6118 to <8 x i32>
  %6131 = bitcast <16 x i16> %6125 to <8 x i32>
  %6132 = shufflevector <8 x i32> %6130, <8 x i32> %6131, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %6133 = bitcast <8 x i32> %6132 to <4 x i64>
  %6134 = shufflevector <4 x i64> %6129, <4 x i64> %6133, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %6135 = shufflevector <4 x i64> %6129, <4 x i64> %6133, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %6136 = shufflevector <8 x i32> %6126, <8 x i32> %6127, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %6137 = bitcast <8 x i32> %6136 to <4 x i64>
  %6138 = shufflevector <8 x i32> %6130, <8 x i32> %6131, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %6139 = bitcast <8 x i32> %6138 to <4 x i64>
  %6140 = shufflevector <4 x i64> %6137, <4 x i64> %6139, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %6141 = shufflevector <4 x i64> %6137, <4 x i64> %6139, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %6142 = shufflevector <16 x i16> %6100, <16 x i16> %6103, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %6143 = shufflevector <16 x i16> %6107, <16 x i16> %6110, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %6144 = shufflevector <16 x i16> %6114, <16 x i16> %6117, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %6145 = shufflevector <16 x i16> %6121, <16 x i16> %6124, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %6146 = bitcast <16 x i16> %6142 to <8 x i32>
  %6147 = bitcast <16 x i16> %6143 to <8 x i32>
  %6148 = shufflevector <8 x i32> %6146, <8 x i32> %6147, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %6149 = bitcast <8 x i32> %6148 to <4 x i64>
  %6150 = bitcast <16 x i16> %6144 to <8 x i32>
  %6151 = bitcast <16 x i16> %6145 to <8 x i32>
  %6152 = shufflevector <8 x i32> %6150, <8 x i32> %6151, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %6153 = bitcast <8 x i32> %6152 to <4 x i64>
  %6154 = shufflevector <4 x i64> %6149, <4 x i64> %6153, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %6155 = shufflevector <4 x i64> %6149, <4 x i64> %6153, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %6156 = shufflevector <8 x i32> %6146, <8 x i32> %6147, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %6157 = bitcast <8 x i32> %6156 to <4 x i64>
  %6158 = shufflevector <8 x i32> %6150, <8 x i32> %6151, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %6159 = bitcast <8 x i32> %6158 to <4 x i64>
  %6160 = shufflevector <4 x i64> %6157, <4 x i64> %6159, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %6161 = shufflevector <4 x i64> %6157, <4 x i64> %6159, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %6162 = getelementptr inbounds <4 x i64>, <4 x i64>* %6098, i64 8
  %6163 = bitcast <4 x i64>* %6162 to <16 x i16>*
  %6164 = load <16 x i16>, <16 x i16>* %6163, align 32
  %6165 = getelementptr inbounds <4 x i64>, <4 x i64>* %6098, i64 9
  %6166 = bitcast <4 x i64>* %6165 to <16 x i16>*
  %6167 = load <16 x i16>, <16 x i16>* %6166, align 32
  %6168 = shufflevector <16 x i16> %6164, <16 x i16> %6167, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %6169 = getelementptr inbounds <4 x i64>, <4 x i64>* %6098, i64 10
  %6170 = bitcast <4 x i64>* %6169 to <16 x i16>*
  %6171 = load <16 x i16>, <16 x i16>* %6170, align 32
  %6172 = getelementptr inbounds <4 x i64>, <4 x i64>* %6098, i64 11
  %6173 = bitcast <4 x i64>* %6172 to <16 x i16>*
  %6174 = load <16 x i16>, <16 x i16>* %6173, align 32
  %6175 = shufflevector <16 x i16> %6171, <16 x i16> %6174, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %6176 = getelementptr inbounds <4 x i64>, <4 x i64>* %6098, i64 12
  %6177 = bitcast <4 x i64>* %6176 to <16 x i16>*
  %6178 = load <16 x i16>, <16 x i16>* %6177, align 32
  %6179 = getelementptr inbounds <4 x i64>, <4 x i64>* %6098, i64 13
  %6180 = bitcast <4 x i64>* %6179 to <16 x i16>*
  %6181 = load <16 x i16>, <16 x i16>* %6180, align 32
  %6182 = shufflevector <16 x i16> %6178, <16 x i16> %6181, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %6183 = getelementptr inbounds <4 x i64>, <4 x i64>* %6098, i64 14
  %6184 = bitcast <4 x i64>* %6183 to <16 x i16>*
  %6185 = load <16 x i16>, <16 x i16>* %6184, align 32
  %6186 = getelementptr inbounds <4 x i64>, <4 x i64>* %6098, i64 15
  %6187 = bitcast <4 x i64>* %6186 to <16 x i16>*
  %6188 = load <16 x i16>, <16 x i16>* %6187, align 32
  %6189 = shufflevector <16 x i16> %6185, <16 x i16> %6188, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %6190 = bitcast <16 x i16> %6168 to <8 x i32>
  %6191 = bitcast <16 x i16> %6175 to <8 x i32>
  %6192 = shufflevector <8 x i32> %6190, <8 x i32> %6191, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %6193 = bitcast <8 x i32> %6192 to <4 x i64>
  %6194 = bitcast <16 x i16> %6182 to <8 x i32>
  %6195 = bitcast <16 x i16> %6189 to <8 x i32>
  %6196 = shufflevector <8 x i32> %6194, <8 x i32> %6195, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %6197 = bitcast <8 x i32> %6196 to <4 x i64>
  %6198 = shufflevector <4 x i64> %6193, <4 x i64> %6197, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %6199 = shufflevector <4 x i64> %6193, <4 x i64> %6197, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %6200 = shufflevector <8 x i32> %6190, <8 x i32> %6191, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %6201 = bitcast <8 x i32> %6200 to <4 x i64>
  %6202 = shufflevector <8 x i32> %6194, <8 x i32> %6195, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %6203 = bitcast <8 x i32> %6202 to <4 x i64>
  %6204 = shufflevector <4 x i64> %6201, <4 x i64> %6203, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %6205 = shufflevector <4 x i64> %6201, <4 x i64> %6203, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %6206 = shufflevector <16 x i16> %6164, <16 x i16> %6167, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %6207 = shufflevector <16 x i16> %6171, <16 x i16> %6174, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %6208 = shufflevector <16 x i16> %6178, <16 x i16> %6181, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %6209 = shufflevector <16 x i16> %6185, <16 x i16> %6188, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %6210 = bitcast <16 x i16> %6206 to <8 x i32>
  %6211 = bitcast <16 x i16> %6207 to <8 x i32>
  %6212 = shufflevector <8 x i32> %6210, <8 x i32> %6211, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %6213 = bitcast <8 x i32> %6212 to <4 x i64>
  %6214 = bitcast <16 x i16> %6208 to <8 x i32>
  %6215 = bitcast <16 x i16> %6209 to <8 x i32>
  %6216 = shufflevector <8 x i32> %6214, <8 x i32> %6215, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %6217 = bitcast <8 x i32> %6216 to <4 x i64>
  %6218 = shufflevector <4 x i64> %6213, <4 x i64> %6217, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %6219 = shufflevector <4 x i64> %6213, <4 x i64> %6217, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %6220 = shufflevector <8 x i32> %6210, <8 x i32> %6211, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %6221 = bitcast <8 x i32> %6220 to <4 x i64>
  %6222 = shufflevector <8 x i32> %6214, <8 x i32> %6215, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %6223 = bitcast <8 x i32> %6222 to <4 x i64>
  %6224 = shufflevector <4 x i64> %6221, <4 x i64> %6223, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %6225 = shufflevector <4 x i64> %6221, <4 x i64> %6223, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %6226 = bitcast <4 x i64> %6134 to <8 x i32>
  %6227 = shufflevector <4 x i64> %6198, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %6228 = bitcast <2 x i64> %6227 to <4 x i32>
  %6229 = shufflevector <4 x i32> %6228, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %6230 = shufflevector <8 x i32> %6226, <8 x i32> %6229, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %6231 = bitcast <4 x i64> %6198 to <8 x i32>
  %6232 = shufflevector <4 x i64> %6134, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %6233 = bitcast <2 x i64> %6232 to <4 x i32>
  %6234 = shufflevector <4 x i32> %6233, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %6235 = shufflevector <8 x i32> %6234, <8 x i32> %6231, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %6235, <8 x i32>* %6071, align 32
  %6236 = bitcast <4 x i64> %6135 to <8 x i32>
  %6237 = shufflevector <4 x i64> %6199, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %6238 = bitcast <2 x i64> %6237 to <4 x i32>
  %6239 = shufflevector <4 x i32> %6238, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %6240 = shufflevector <8 x i32> %6236, <8 x i32> %6239, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %6241 = bitcast <4 x i64> %6199 to <8 x i32>
  %6242 = shufflevector <4 x i64> %6135, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %6243 = bitcast <2 x i64> %6242 to <4 x i32>
  %6244 = shufflevector <4 x i32> %6243, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %6245 = shufflevector <8 x i32> %6244, <8 x i32> %6241, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  %6246 = bitcast <4 x i64> %6140 to <8 x i32>
  %6247 = shufflevector <4 x i64> %6204, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %6248 = bitcast <2 x i64> %6247 to <4 x i32>
  %6249 = shufflevector <4 x i32> %6248, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %6250 = shufflevector <8 x i32> %6246, <8 x i32> %6249, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %6251 = bitcast <4 x i64> %6204 to <8 x i32>
  %6252 = shufflevector <4 x i64> %6140, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %6253 = bitcast <2 x i64> %6252 to <4 x i32>
  %6254 = shufflevector <4 x i32> %6253, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %6255 = shufflevector <8 x i32> %6254, <8 x i32> %6251, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  %6256 = bitcast <4 x i64> %6141 to <8 x i32>
  %6257 = shufflevector <4 x i64> %6205, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %6258 = bitcast <2 x i64> %6257 to <4 x i32>
  %6259 = shufflevector <4 x i32> %6258, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %6260 = shufflevector <8 x i32> %6256, <8 x i32> %6259, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %6261 = bitcast <4 x i64> %6205 to <8 x i32>
  %6262 = shufflevector <4 x i64> %6141, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %6263 = bitcast <2 x i64> %6262 to <4 x i32>
  %6264 = shufflevector <4 x i32> %6263, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %6265 = shufflevector <8 x i32> %6264, <8 x i32> %6261, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  %6266 = bitcast <4 x i64> %6154 to <8 x i32>
  %6267 = shufflevector <4 x i64> %6218, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %6268 = bitcast <2 x i64> %6267 to <4 x i32>
  %6269 = shufflevector <4 x i32> %6268, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %6270 = shufflevector <8 x i32> %6266, <8 x i32> %6269, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %6271 = bitcast <4 x i64> %6218 to <8 x i32>
  %6272 = shufflevector <4 x i64> %6154, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %6273 = bitcast <2 x i64> %6272 to <4 x i32>
  %6274 = shufflevector <4 x i32> %6273, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %6275 = shufflevector <8 x i32> %6274, <8 x i32> %6271, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  %6276 = bitcast <4 x i64> %6155 to <8 x i32>
  %6277 = shufflevector <4 x i64> %6219, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %6278 = bitcast <2 x i64> %6277 to <4 x i32>
  %6279 = shufflevector <4 x i32> %6278, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %6280 = shufflevector <8 x i32> %6276, <8 x i32> %6279, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %6281 = bitcast <4 x i64> %6219 to <8 x i32>
  %6282 = shufflevector <4 x i64> %6155, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %6283 = bitcast <2 x i64> %6282 to <4 x i32>
  %6284 = shufflevector <4 x i32> %6283, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %6285 = shufflevector <8 x i32> %6284, <8 x i32> %6281, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  %6286 = bitcast <4 x i64> %6160 to <8 x i32>
  %6287 = shufflevector <4 x i64> %6224, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %6288 = bitcast <2 x i64> %6287 to <4 x i32>
  %6289 = shufflevector <4 x i32> %6288, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %6290 = shufflevector <8 x i32> %6286, <8 x i32> %6289, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %6291 = bitcast <4 x i64> %6224 to <8 x i32>
  %6292 = shufflevector <4 x i64> %6160, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %6293 = bitcast <2 x i64> %6292 to <4 x i32>
  %6294 = shufflevector <4 x i32> %6293, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %6295 = shufflevector <8 x i32> %6294, <8 x i32> %6291, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  %6296 = bitcast <4 x i64> %6161 to <8 x i32>
  %6297 = shufflevector <4 x i64> %6225, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %6298 = bitcast <2 x i64> %6297 to <4 x i32>
  %6299 = shufflevector <4 x i32> %6298, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %6300 = shufflevector <8 x i32> %6296, <8 x i32> %6299, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %6301 = bitcast <4 x i64> %6225 to <8 x i32>
  %6302 = shufflevector <4 x i64> %6161, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %6303 = bitcast <2 x i64> %6302 to <4 x i32>
  %6304 = shufflevector <4 x i32> %6303, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %6305 = shufflevector <8 x i32> %6304, <8 x i32> %6301, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  %6306 = getelementptr inbounds i16, i16* %0, i64 %6097
  %6307 = bitcast i16* %6306 to <8 x i32>*
  store <8 x i32> %6230, <8 x i32>* %6307, align 1
  %6308 = getelementptr inbounds i16, i16* %6306, i64 %1
  %6309 = bitcast i16* %6308 to <8 x i32>*
  store <8 x i32> %6240, <8 x i32>* %6309, align 1
  %6310 = getelementptr inbounds i16, i16* %6306, i64 %6082
  %6311 = bitcast i16* %6310 to <8 x i32>*
  store <8 x i32> %6250, <8 x i32>* %6311, align 1
  %6312 = getelementptr inbounds i16, i16* %6306, i64 %6083
  %6313 = bitcast i16* %6312 to <8 x i32>*
  store <8 x i32> %6260, <8 x i32>* %6313, align 1
  %6314 = getelementptr inbounds i16, i16* %6306, i64 %6084
  %6315 = bitcast i16* %6314 to <8 x i32>*
  store <8 x i32> %6270, <8 x i32>* %6315, align 1
  %6316 = getelementptr inbounds i16, i16* %6306, i64 %6085
  %6317 = bitcast i16* %6316 to <8 x i32>*
  store <8 x i32> %6280, <8 x i32>* %6317, align 1
  %6318 = getelementptr inbounds i16, i16* %6306, i64 %6086
  %6319 = bitcast i16* %6318 to <8 x i32>*
  store <8 x i32> %6290, <8 x i32>* %6319, align 1
  %6320 = getelementptr inbounds i16, i16* %6306, i64 %6087
  %6321 = bitcast i16* %6320 to <8 x i32>*
  store <8 x i32> %6300, <8 x i32>* %6321, align 1
  %6322 = getelementptr inbounds i16, i16* %6306, i64 %6088
  %6323 = bitcast i16* %6322 to <4 x i64>*
  %6324 = load <4 x i64>, <4 x i64>* %6070, align 32
  store <4 x i64> %6324, <4 x i64>* %6323, align 1
  %6325 = getelementptr inbounds i16, i16* %6306, i64 %6089
  %6326 = bitcast i16* %6325 to <8 x i32>*
  store <8 x i32> %6245, <8 x i32>* %6326, align 1
  %6327 = getelementptr inbounds i16, i16* %6306, i64 %6090
  %6328 = bitcast i16* %6327 to <8 x i32>*
  store <8 x i32> %6255, <8 x i32>* %6328, align 1
  %6329 = getelementptr inbounds i16, i16* %6306, i64 %6091
  %6330 = bitcast i16* %6329 to <8 x i32>*
  store <8 x i32> %6265, <8 x i32>* %6330, align 1
  %6331 = getelementptr inbounds i16, i16* %6306, i64 %6092
  %6332 = bitcast i16* %6331 to <8 x i32>*
  store <8 x i32> %6275, <8 x i32>* %6332, align 1
  %6333 = getelementptr inbounds i16, i16* %6306, i64 %6093
  %6334 = bitcast i16* %6333 to <8 x i32>*
  store <8 x i32> %6285, <8 x i32>* %6334, align 1
  %6335 = getelementptr inbounds i16, i16* %6306, i64 %6094
  %6336 = bitcast i16* %6335 to <8 x i32>*
  store <8 x i32> %6295, <8 x i32>* %6336, align 1
  %6337 = getelementptr inbounds i16, i16* %6306, i64 %6095
  %6338 = bitcast i16* %6337 to <8 x i32>*
  store <8 x i32> %6305, <8 x i32>* %6338, align 1
  %6339 = add nuw nsw i64 %6097, 16
  %6340 = icmp ult i64 %6339, 32
  br i1 %6340, label %6096, label %6341

6341:                                             ; preds = %6096
  store <8 x i32> %6245, <8 x i32>* %6073, align 32
  store <8 x i32> %6255, <8 x i32>* %6075, align 32
  store <8 x i32> %6265, <8 x i32>* %6077, align 32
  store <8 x i32> %6275, <8 x i32>* %6079, align 32
  store <8 x i32> %6285, <8 x i32>* %6081, align 32
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %5810) #8
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %5809) #8
  br label %7784

6342:                                             ; preds = %5089
  %6343 = bitcast [2048 x i16]* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4096, i8* nonnull %6343) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %6343, i8 -86, i64 4096, i1 false) #8
  %6344 = getelementptr inbounds [2048 x i16], [2048 x i16]* %18, i64 0, i64 0
  call fastcc void @highbd_dr_prediction_z1_32xN_avx2(i32 64, i16* nonnull %6344, i64 32, i16* %5, i32 %8, i32 %9) #8
  call fastcc void @highbd_transpose(i16* nonnull %6344, i64 32, i16* %0, i64 %1, i32 64, i32 32) #8
  call void @llvm.lifetime.end.p0i8(i64 4096, i8* nonnull %6343) #8
  br label %7784

6345:                                             ; preds = %5086
  switch i32 %3, label %7784 [
    i32 4, label %6346
    i32 8, label %6739
    i32 16, label %7250
  ]

6346:                                             ; preds = %6345
  %6347 = bitcast [16 x <2 x i64>]* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %6347) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %6347, i8 -86, i64 256, i1 false) #8
  %6348 = icmp slt i32 %9, 12
  %6349 = sub nsw i32 6, %6
  %6350 = shl i32 19, %6
  %6351 = sext i32 %6350 to i64
  %6352 = getelementptr inbounds i16, i16* %5, i64 %6351
  %6353 = load i16, i16* %6352, align 2
  %6354 = insertelement <8 x i16> undef, i16 %6353, i32 0
  %6355 = shufflevector <8 x i16> %6354, <8 x i16> undef, <8 x i32> zeroinitializer
  br i1 %6348, label %6356, label %6499

6356:                                             ; preds = %6346
  %6357 = trunc i32 %6350 to i16
  %6358 = insertelement <8 x i16> undef, i16 %6357, i32 0
  %6359 = shufflevector <8 x i16> %6358, <8 x i16> undef, <8 x i32> zeroinitializer
  %6360 = icmp eq i32 %6, 0
  br label %6361

6361:                                             ; preds = %6473, %6356
  %6362 = phi i64 [ 0, %6356 ], [ %6497, %6473 ]
  %6363 = phi i32 [ %8, %6356 ], [ %6496, %6473 ]
  %6364 = ashr i32 %6363, %6349
  %6365 = icmp slt i32 %6364, %6350
  br i1 %6365, label %6413, label %6366

6366:                                             ; preds = %6361
  %6367 = trunc i64 %6362 to i32
  %6368 = icmp slt i32 %6367, 16
  br i1 %6368, label %6369, label %6626

6369:                                             ; preds = %6366
  %6370 = and i64 %6362, 4294967295
  %6371 = sub nsw i64 0, %6362
  %6372 = sub nsw i64 15, %6362
  %6373 = and i64 %6371, 7
  %6374 = icmp eq i64 %6373, 0
  br i1 %6374, label %6383, label %6375

6375:                                             ; preds = %6369, %6375
  %6376 = phi i64 [ %6380, %6375 ], [ %6370, %6369 ]
  %6377 = phi i64 [ %6381, %6375 ], [ %6373, %6369 ]
  %6378 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %19, i64 0, i64 %6376
  %6379 = bitcast <2 x i64>* %6378 to <8 x i16>*
  store <8 x i16> %6355, <8 x i16>* %6379, align 16
  %6380 = add nuw nsw i64 %6376, 1
  %6381 = add i64 %6377, -1
  %6382 = icmp eq i64 %6381, 0
  br i1 %6382, label %6383, label %6375, !llvm.loop !29

6383:                                             ; preds = %6375, %6369
  %6384 = phi i64 [ %6370, %6369 ], [ %6380, %6375 ]
  %6385 = icmp ult i64 %6372, 7
  br i1 %6385, label %6626, label %6386

6386:                                             ; preds = %6383, %6386
  %6387 = phi i64 [ %6411, %6386 ], [ %6384, %6383 ]
  %6388 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %19, i64 0, i64 %6387
  %6389 = bitcast <2 x i64>* %6388 to <8 x i16>*
  store <8 x i16> %6355, <8 x i16>* %6389, align 16
  %6390 = add nuw nsw i64 %6387, 1
  %6391 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %19, i64 0, i64 %6390
  %6392 = bitcast <2 x i64>* %6391 to <8 x i16>*
  store <8 x i16> %6355, <8 x i16>* %6392, align 16
  %6393 = add nuw nsw i64 %6387, 2
  %6394 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %19, i64 0, i64 %6393
  %6395 = bitcast <2 x i64>* %6394 to <8 x i16>*
  store <8 x i16> %6355, <8 x i16>* %6395, align 16
  %6396 = add nuw nsw i64 %6387, 3
  %6397 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %19, i64 0, i64 %6396
  %6398 = bitcast <2 x i64>* %6397 to <8 x i16>*
  store <8 x i16> %6355, <8 x i16>* %6398, align 16
  %6399 = add nuw nsw i64 %6387, 4
  %6400 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %19, i64 0, i64 %6399
  %6401 = bitcast <2 x i64>* %6400 to <8 x i16>*
  store <8 x i16> %6355, <8 x i16>* %6401, align 16
  %6402 = add nuw nsw i64 %6387, 5
  %6403 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %19, i64 0, i64 %6402
  %6404 = bitcast <2 x i64>* %6403 to <8 x i16>*
  store <8 x i16> %6355, <8 x i16>* %6404, align 16
  %6405 = add nuw nsw i64 %6387, 6
  %6406 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %19, i64 0, i64 %6405
  %6407 = bitcast <2 x i64>* %6406 to <8 x i16>*
  store <8 x i16> %6355, <8 x i16>* %6407, align 16
  %6408 = add nuw nsw i64 %6387, 7
  %6409 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %19, i64 0, i64 %6408
  %6410 = bitcast <2 x i64>* %6409 to <8 x i16>*
  store <8 x i16> %6355, <8 x i16>* %6410, align 16
  %6411 = add nuw nsw i64 %6387, 8
  %6412 = icmp eq i64 %6411, 16
  br i1 %6412, label %6626, label %6386

6413:                                             ; preds = %6361
  %6414 = sext i32 %6364 to i64
  %6415 = getelementptr inbounds i16, i16* %5, i64 %6414
  %6416 = bitcast i16* %6415 to <2 x i64>*
  %6417 = load <2 x i64>, <2 x i64>* %6416, align 1
  br i1 %6360, label %6447, label %6418

6418:                                             ; preds = %6413
  %6419 = bitcast <2 x i64> %6417 to <16 x i8>
  %6420 = shufflevector <16 x i8> %6419, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 4, i32 5, i32 8, i32 9, i32 12, i32 13, i32 2, i32 3, i32 6, i32 7, i32 10, i32 11, i32 14, i32 15>
  %6421 = bitcast <16 x i8> %6420 to <2 x i64>
  %6422 = shufflevector <16 x i8> %6420, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %6423 = bitcast <16 x i8> %6422 to <2 x i64>
  %6424 = trunc i32 %6364 to i16
  %6425 = add i16 %6424, 2
  %6426 = add i16 %6424, 4
  %6427 = add i16 %6424, 6
  %6428 = add i16 %6424, 8
  %6429 = add i16 %6424, 10
  %6430 = add i16 %6424, 12
  %6431 = add i16 %6424, 14
  %6432 = insertelement <8 x i16> undef, i16 %6424, i32 0
  %6433 = insertelement <8 x i16> %6432, i16 %6425, i32 1
  %6434 = insertelement <8 x i16> %6433, i16 %6426, i32 2
  %6435 = insertelement <8 x i16> %6434, i16 %6427, i32 3
  %6436 = insertelement <8 x i16> %6435, i16 %6428, i32 4
  %6437 = insertelement <8 x i16> %6436, i16 %6429, i32 5
  %6438 = insertelement <8 x i16> %6437, i16 %6430, i32 6
  %6439 = insertelement <8 x i16> %6438, i16 %6431, i32 7
  %6440 = trunc i32 %6363 to i16
  %6441 = insertelement <16 x i16> undef, i16 %6440, i32 0
  %6442 = shufflevector <16 x i16> %6441, <16 x i16> undef, <16 x i32> zeroinitializer
  %6443 = tail call <16 x i16> @llvm.x86.avx2.pslli.w(<16 x i16> %6442, i32 %6) #8
  %6444 = lshr <16 x i16> %6443, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %6445 = bitcast <16 x i16> %6444 to <4 x i64>
  %6446 = and <4 x i64> %6445, <i64 8725857424048159, i64 8725857424048159, i64 8725857424048159, i64 8725857424048159>
  br label %6473

6447:                                             ; preds = %6413
  %6448 = getelementptr inbounds i16, i16* %6415, i64 1
  %6449 = bitcast i16* %6448 to <2 x i64>*
  %6450 = load <2 x i64>, <2 x i64>* %6449, align 1
  %6451 = trunc i32 %6364 to i16
  %6452 = add i16 %6451, 1
  %6453 = add i16 %6451, 2
  %6454 = add i16 %6451, 3
  %6455 = add i16 %6451, 4
  %6456 = add i16 %6451, 5
  %6457 = add i16 %6451, 6
  %6458 = add i16 %6451, 7
  %6459 = insertelement <8 x i16> undef, i16 %6451, i32 0
  %6460 = insertelement <8 x i16> %6459, i16 %6452, i32 1
  %6461 = insertelement <8 x i16> %6460, i16 %6453, i32 2
  %6462 = insertelement <8 x i16> %6461, i16 %6454, i32 3
  %6463 = insertelement <8 x i16> %6462, i16 %6455, i32 4
  %6464 = insertelement <8 x i16> %6463, i16 %6456, i32 5
  %6465 = insertelement <8 x i16> %6464, i16 %6457, i32 6
  %6466 = insertelement <8 x i16> %6465, i16 %6458, i32 7
  %6467 = trunc i32 %6363 to i16
  %6468 = insertelement <16 x i16> undef, i16 %6467, i32 0
  %6469 = and <16 x i16> %6468, <i16 63, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef>
  %6470 = lshr <16 x i16> %6469, <i16 1, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0>
  %6471 = shufflevector <16 x i16> %6470, <16 x i16> undef, <16 x i32> zeroinitializer
  %6472 = bitcast <16 x i16> %6471 to <4 x i64>
  br label %6473

6473:                                             ; preds = %6447, %6418
  %6474 = phi <8 x i16> [ %6439, %6418 ], [ %6466, %6447 ]
  %6475 = phi <2 x i64> [ %6421, %6418 ], [ %6417, %6447 ]
  %6476 = phi <2 x i64> [ %6423, %6418 ], [ %6450, %6447 ]
  %6477 = phi <4 x i64> [ %6446, %6418 ], [ %6472, %6447 ]
  %6478 = shufflevector <2 x i64> %6475, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %6479 = shufflevector <2 x i64> %6476, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %6480 = bitcast <4 x i64> %6479 to <16 x i16>
  %6481 = bitcast <4 x i64> %6478 to <16 x i16>
  %6482 = sub <16 x i16> %6480, %6481
  %6483 = shl <16 x i16> %6481, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %6484 = or <16 x i16> %6483, <i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16>
  %6485 = bitcast <4 x i64> %6477 to <16 x i16>
  %6486 = mul <16 x i16> %6482, %6485
  %6487 = add <16 x i16> %6486, %6484
  %6488 = lshr <16 x i16> %6487, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %6489 = bitcast <16 x i16> %6488 to <4 x i64>
  %6490 = shufflevector <4 x i64> %6489, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %6491 = icmp sgt <8 x i16> %6359, %6474
  %6492 = bitcast <2 x i64> %6490 to <8 x i16>
  %6493 = select <8 x i1> %6491, <8 x i16> %6492, <8 x i16> %6355
  %6494 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %19, i64 0, i64 %6362
  %6495 = bitcast <2 x i64>* %6494 to <8 x i16>*
  store <8 x i16> %6493, <8 x i16>* %6495, align 16
  %6496 = add nsw i32 %6363, %8
  %6497 = add nuw nsw i64 %6362, 1
  %6498 = icmp eq i64 %6497, 16
  br i1 %6498, label %6626, label %6361

6499:                                             ; preds = %6346
  %6500 = insertelement <4 x i32> undef, i32 %6350, i32 0
  %6501 = shufflevector <4 x i32> %6500, <4 x i32> undef, <4 x i32> zeroinitializer
  %6502 = icmp eq i32 %6, 0
  %6503 = bitcast <8 x i16> %6355 to <16 x i8>
  br label %6504

6504:                                             ; preds = %6598, %6499
  %6505 = phi i64 [ 0, %6499 ], [ %6624, %6598 ]
  %6506 = phi i32 [ %8, %6499 ], [ %6623, %6598 ]
  %6507 = ashr i32 %6506, %6349
  %6508 = icmp slt i32 %6507, %6350
  br i1 %6508, label %6556, label %6509

6509:                                             ; preds = %6504
  %6510 = trunc i64 %6505 to i32
  %6511 = icmp slt i32 %6510, 16
  br i1 %6511, label %6512, label %6626

6512:                                             ; preds = %6509
  %6513 = and i64 %6505, 4294967295
  %6514 = sub nsw i64 0, %6505
  %6515 = sub nsw i64 15, %6505
  %6516 = and i64 %6514, 7
  %6517 = icmp eq i64 %6516, 0
  br i1 %6517, label %6526, label %6518

6518:                                             ; preds = %6512, %6518
  %6519 = phi i64 [ %6523, %6518 ], [ %6513, %6512 ]
  %6520 = phi i64 [ %6524, %6518 ], [ %6516, %6512 ]
  %6521 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %19, i64 0, i64 %6519
  %6522 = bitcast <2 x i64>* %6521 to <8 x i16>*
  store <8 x i16> %6355, <8 x i16>* %6522, align 16
  %6523 = add nuw nsw i64 %6519, 1
  %6524 = add i64 %6520, -1
  %6525 = icmp eq i64 %6524, 0
  br i1 %6525, label %6526, label %6518, !llvm.loop !30

6526:                                             ; preds = %6518, %6512
  %6527 = phi i64 [ %6513, %6512 ], [ %6523, %6518 ]
  %6528 = icmp ult i64 %6515, 7
  br i1 %6528, label %6626, label %6529

6529:                                             ; preds = %6526, %6529
  %6530 = phi i64 [ %6554, %6529 ], [ %6527, %6526 ]
  %6531 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %19, i64 0, i64 %6530
  %6532 = bitcast <2 x i64>* %6531 to <8 x i16>*
  store <8 x i16> %6355, <8 x i16>* %6532, align 16
  %6533 = add nuw nsw i64 %6530, 1
  %6534 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %19, i64 0, i64 %6533
  %6535 = bitcast <2 x i64>* %6534 to <8 x i16>*
  store <8 x i16> %6355, <8 x i16>* %6535, align 16
  %6536 = add nuw nsw i64 %6530, 2
  %6537 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %19, i64 0, i64 %6536
  %6538 = bitcast <2 x i64>* %6537 to <8 x i16>*
  store <8 x i16> %6355, <8 x i16>* %6538, align 16
  %6539 = add nuw nsw i64 %6530, 3
  %6540 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %19, i64 0, i64 %6539
  %6541 = bitcast <2 x i64>* %6540 to <8 x i16>*
  store <8 x i16> %6355, <8 x i16>* %6541, align 16
  %6542 = add nuw nsw i64 %6530, 4
  %6543 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %19, i64 0, i64 %6542
  %6544 = bitcast <2 x i64>* %6543 to <8 x i16>*
  store <8 x i16> %6355, <8 x i16>* %6544, align 16
  %6545 = add nuw nsw i64 %6530, 5
  %6546 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %19, i64 0, i64 %6545
  %6547 = bitcast <2 x i64>* %6546 to <8 x i16>*
  store <8 x i16> %6355, <8 x i16>* %6547, align 16
  %6548 = add nuw nsw i64 %6530, 6
  %6549 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %19, i64 0, i64 %6548
  %6550 = bitcast <2 x i64>* %6549 to <8 x i16>*
  store <8 x i16> %6355, <8 x i16>* %6550, align 16
  %6551 = add nuw nsw i64 %6530, 7
  %6552 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %19, i64 0, i64 %6551
  %6553 = bitcast <2 x i64>* %6552 to <8 x i16>*
  store <8 x i16> %6355, <8 x i16>* %6553, align 16
  %6554 = add nuw nsw i64 %6530, 8
  %6555 = icmp eq i64 %6554, 16
  br i1 %6555, label %6626, label %6529

6556:                                             ; preds = %6504
  %6557 = sext i32 %6507 to i64
  %6558 = getelementptr inbounds i16, i16* %5, i64 %6557
  %6559 = bitcast i16* %6558 to <8 x i16>*
  %6560 = load <8 x i16>, <8 x i16>* %6559, align 1
  %6561 = zext <8 x i16> %6560 to <8 x i32>
  br i1 %6502, label %6580, label %6562

6562:                                             ; preds = %6556
  %6563 = shufflevector <8 x i32> %6561, <8 x i32> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 1, i32 3, i32 5, i32 7>
  %6564 = bitcast <8 x i32> %6563 to <4 x i64>
  %6565 = shufflevector <4 x i64> %6564, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %6566 = shufflevector <2 x i64> %6565, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %6567 = add nsw i32 %6507, 2
  %6568 = add nsw i32 %6507, 4
  %6569 = add nsw i32 %6507, 6
  %6570 = insertelement <4 x i32> undef, i32 %6507, i32 0
  %6571 = insertelement <4 x i32> %6570, i32 %6567, i32 1
  %6572 = insertelement <4 x i32> %6571, i32 %6568, i32 2
  %6573 = insertelement <4 x i32> %6572, i32 %6569, i32 3
  %6574 = insertelement <8 x i32> undef, i32 %6506, i32 0
  %6575 = shufflevector <8 x i32> %6574, <8 x i32> undef, <8 x i32> zeroinitializer
  %6576 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %6575, i32 %6) #8
  %6577 = lshr <8 x i32> %6576, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %6578 = bitcast <8 x i32> %6577 to <4 x i64>
  %6579 = and <4 x i64> %6578, <i64 133143986207, i64 133143986207, i64 133143986207, i64 133143986207>
  br label %6598

6580:                                             ; preds = %6556
  %6581 = getelementptr inbounds i16, i16* %6558, i64 1
  %6582 = bitcast i16* %6581 to <8 x i16>*
  %6583 = load <8 x i16>, <8 x i16>* %6582, align 1
  %6584 = zext <8 x i16> %6583 to <8 x i32>
  %6585 = bitcast <8 x i32> %6584 to <4 x i64>
  %6586 = add nsw i32 %6507, 1
  %6587 = add nsw i32 %6507, 2
  %6588 = add nsw i32 %6507, 3
  %6589 = insertelement <4 x i32> undef, i32 %6507, i32 0
  %6590 = insertelement <4 x i32> %6589, i32 %6586, i32 1
  %6591 = insertelement <4 x i32> %6590, i32 %6587, i32 2
  %6592 = insertelement <4 x i32> %6591, i32 %6588, i32 3
  %6593 = insertelement <8 x i32> undef, i32 %6506, i32 0
  %6594 = and <8 x i32> %6593, <i32 63, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %6595 = lshr <8 x i32> %6594, <i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>
  %6596 = shufflevector <8 x i32> %6595, <8 x i32> undef, <8 x i32> zeroinitializer
  %6597 = bitcast <8 x i32> %6596 to <4 x i64>
  br label %6598

6598:                                             ; preds = %6580, %6562
  %6599 = phi <8 x i32> [ %6563, %6562 ], [ %6561, %6580 ]
  %6600 = phi <4 x i64> [ %6566, %6562 ], [ %6585, %6580 ]
  %6601 = phi <4 x i32> [ %6573, %6562 ], [ %6592, %6580 ]
  %6602 = phi <4 x i64> [ %6579, %6562 ], [ %6597, %6580 ]
  %6603 = bitcast <4 x i64> %6600 to <8 x i32>
  %6604 = sub <8 x i32> %6603, %6599
  %6605 = shl nsw <8 x i32> %6599, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %6606 = or <8 x i32> %6605, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %6607 = bitcast <4 x i64> %6602 to <8 x i32>
  %6608 = mul <8 x i32> %6604, %6607
  %6609 = add <8 x i32> %6608, %6606
  %6610 = lshr <8 x i32> %6609, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %6611 = bitcast <8 x i32> %6610 to <4 x i64>
  %6612 = shufflevector <4 x i64> %6611, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %6613 = bitcast <2 x i64> %6612 to <4 x i32>
  %6614 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %6613, <4 x i32> %6613) #8
  %6615 = icmp sgt <4 x i32> %6501, %6601
  %6616 = sext <4 x i1> %6615 to <4 x i32>
  %6617 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %6616, <4 x i32> %6616) #8
  %6618 = bitcast <8 x i16> %6614 to <16 x i8>
  %6619 = bitcast <8 x i16> %6617 to <16 x i8>
  %6620 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %6503, <16 x i8> %6618, <16 x i8> %6619) #8
  %6621 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %19, i64 0, i64 %6505
  %6622 = bitcast <2 x i64>* %6621 to <16 x i8>*
  store <16 x i8> %6620, <16 x i8>* %6622, align 16
  %6623 = add nsw i32 %6506, %8
  %6624 = add nuw nsw i64 %6505, 1
  %6625 = icmp eq i64 %6624, 16
  br i1 %6625, label %6626, label %6504

6626:                                             ; preds = %6598, %6526, %6529, %6473, %6383, %6386, %6366, %6509
  %6627 = bitcast [16 x <2 x i64>]* %19 to <8 x i16>*
  %6628 = load <8 x i16>, <8 x i16>* %6627, align 16
  %6629 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %19, i64 0, i64 1
  %6630 = bitcast <2 x i64>* %6629 to <8 x i16>*
  %6631 = load <8 x i16>, <8 x i16>* %6630, align 16
  %6632 = shufflevector <8 x i16> %6628, <8 x i16> %6631, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %6633 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %19, i64 0, i64 2
  %6634 = bitcast <2 x i64>* %6633 to <8 x i16>*
  %6635 = load <8 x i16>, <8 x i16>* %6634, align 16
  %6636 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %19, i64 0, i64 3
  %6637 = bitcast <2 x i64>* %6636 to <8 x i16>*
  %6638 = load <8 x i16>, <8 x i16>* %6637, align 16
  %6639 = shufflevector <8 x i16> %6635, <8 x i16> %6638, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %6640 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %19, i64 0, i64 4
  %6641 = bitcast <2 x i64>* %6640 to <8 x i16>*
  %6642 = load <8 x i16>, <8 x i16>* %6641, align 16
  %6643 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %19, i64 0, i64 5
  %6644 = bitcast <2 x i64>* %6643 to <8 x i16>*
  %6645 = load <8 x i16>, <8 x i16>* %6644, align 16
  %6646 = shufflevector <8 x i16> %6642, <8 x i16> %6645, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %6647 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %19, i64 0, i64 6
  %6648 = bitcast <2 x i64>* %6647 to <8 x i16>*
  %6649 = load <8 x i16>, <8 x i16>* %6648, align 16
  %6650 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %19, i64 0, i64 7
  %6651 = bitcast <2 x i64>* %6650 to <8 x i16>*
  %6652 = load <8 x i16>, <8 x i16>* %6651, align 16
  %6653 = shufflevector <8 x i16> %6649, <8 x i16> %6652, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %6654 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %19, i64 0, i64 8
  %6655 = bitcast <2 x i64>* %6654 to <8 x i16>*
  %6656 = load <8 x i16>, <8 x i16>* %6655, align 16
  %6657 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %19, i64 0, i64 9
  %6658 = bitcast <2 x i64>* %6657 to <8 x i16>*
  %6659 = load <8 x i16>, <8 x i16>* %6658, align 16
  %6660 = shufflevector <8 x i16> %6656, <8 x i16> %6659, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %6661 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %19, i64 0, i64 10
  %6662 = bitcast <2 x i64>* %6661 to <8 x i16>*
  %6663 = load <8 x i16>, <8 x i16>* %6662, align 16
  %6664 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %19, i64 0, i64 11
  %6665 = bitcast <2 x i64>* %6664 to <8 x i16>*
  %6666 = load <8 x i16>, <8 x i16>* %6665, align 16
  %6667 = shufflevector <8 x i16> %6663, <8 x i16> %6666, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %6668 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %19, i64 0, i64 12
  %6669 = bitcast <2 x i64>* %6668 to <8 x i16>*
  %6670 = load <8 x i16>, <8 x i16>* %6669, align 16
  %6671 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %19, i64 0, i64 13
  %6672 = bitcast <2 x i64>* %6671 to <8 x i16>*
  %6673 = load <8 x i16>, <8 x i16>* %6672, align 16
  %6674 = shufflevector <8 x i16> %6670, <8 x i16> %6673, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %6675 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %19, i64 0, i64 14
  %6676 = bitcast <2 x i64>* %6675 to <8 x i16>*
  %6677 = load <8 x i16>, <8 x i16>* %6676, align 16
  %6678 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %19, i64 0, i64 15
  %6679 = bitcast <2 x i64>* %6678 to <8 x i16>*
  %6680 = load <8 x i16>, <8 x i16>* %6679, align 16
  %6681 = shufflevector <8 x i16> %6677, <8 x i16> %6680, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %6682 = bitcast <8 x i16> %6632 to <4 x i32>
  %6683 = bitcast <8 x i16> %6639 to <4 x i32>
  %6684 = shufflevector <4 x i32> %6682, <4 x i32> %6683, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %6685 = bitcast <4 x i32> %6684 to <2 x i64>
  %6686 = shufflevector <4 x i32> %6682, <4 x i32> %6683, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %6687 = bitcast <4 x i32> %6686 to <2 x i64>
  %6688 = bitcast <8 x i16> %6646 to <4 x i32>
  %6689 = bitcast <8 x i16> %6653 to <4 x i32>
  %6690 = shufflevector <4 x i32> %6688, <4 x i32> %6689, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %6691 = bitcast <4 x i32> %6690 to <2 x i64>
  %6692 = shufflevector <4 x i32> %6688, <4 x i32> %6689, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %6693 = bitcast <4 x i32> %6692 to <2 x i64>
  %6694 = bitcast <8 x i16> %6660 to <4 x i32>
  %6695 = bitcast <8 x i16> %6667 to <4 x i32>
  %6696 = shufflevector <4 x i32> %6694, <4 x i32> %6695, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %6697 = bitcast <4 x i32> %6696 to <2 x i64>
  %6698 = shufflevector <4 x i32> %6694, <4 x i32> %6695, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %6699 = bitcast <4 x i32> %6698 to <2 x i64>
  %6700 = bitcast <8 x i16> %6674 to <4 x i32>
  %6701 = bitcast <8 x i16> %6681 to <4 x i32>
  %6702 = shufflevector <4 x i32> %6700, <4 x i32> %6701, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %6703 = bitcast <4 x i32> %6702 to <2 x i64>
  %6704 = shufflevector <4 x i32> %6700, <4 x i32> %6701, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %6705 = bitcast <4 x i32> %6704 to <2 x i64>
  %6706 = shufflevector <2 x i64> %6685, <2 x i64> %6687, <2 x i32> <i32 0, i32 2>
  %6707 = shufflevector <2 x i64> %6685, <2 x i64> %6687, <2 x i32> <i32 1, i32 3>
  %6708 = shufflevector <2 x i64> %6691, <2 x i64> %6693, <2 x i32> <i32 0, i32 2>
  %6709 = shufflevector <2 x i64> %6691, <2 x i64> %6693, <2 x i32> <i32 1, i32 3>
  %6710 = shufflevector <2 x i64> %6697, <2 x i64> %6699, <2 x i32> <i32 0, i32 2>
  %6711 = shufflevector <2 x i64> %6697, <2 x i64> %6699, <2 x i32> <i32 1, i32 3>
  %6712 = shufflevector <2 x i64> %6703, <2 x i64> %6705, <2 x i32> <i32 0, i32 2>
  %6713 = shufflevector <2 x i64> %6703, <2 x i64> %6705, <2 x i32> <i32 1, i32 3>
  %6714 = shufflevector <2 x i64> %6706, <2 x i64> %6708, <2 x i32> <i32 0, i32 2>
  %6715 = shufflevector <2 x i64> %6710, <2 x i64> %6712, <2 x i32> <i32 0, i32 2>
  %6716 = shufflevector <2 x i64> %6707, <2 x i64> %6709, <2 x i32> <i32 0, i32 2>
  %6717 = shufflevector <2 x i64> %6711, <2 x i64> %6713, <2 x i32> <i32 0, i32 2>
  %6718 = shufflevector <2 x i64> %6706, <2 x i64> %6708, <2 x i32> <i32 1, i32 3>
  %6719 = shufflevector <2 x i64> %6710, <2 x i64> %6712, <2 x i32> <i32 1, i32 3>
  %6720 = shufflevector <2 x i64> %6707, <2 x i64> %6709, <2 x i32> <i32 1, i32 3>
  %6721 = shufflevector <2 x i64> %6711, <2 x i64> %6713, <2 x i32> <i32 1, i32 3>
  %6722 = bitcast i16* %0 to <2 x i64>*
  store <2 x i64> %6714, <2 x i64>* %6722, align 1
  %6723 = getelementptr inbounds i16, i16* %0, i64 8
  %6724 = bitcast i16* %6723 to <2 x i64>*
  store <2 x i64> %6715, <2 x i64>* %6724, align 1
  %6725 = getelementptr inbounds i16, i16* %0, i64 %1
  %6726 = bitcast i16* %6725 to <2 x i64>*
  store <2 x i64> %6716, <2 x i64>* %6726, align 1
  %6727 = getelementptr inbounds i16, i16* %6725, i64 8
  %6728 = bitcast i16* %6727 to <2 x i64>*
  store <2 x i64> %6717, <2 x i64>* %6728, align 1
  %6729 = shl nsw i64 %1, 1
  %6730 = getelementptr inbounds i16, i16* %0, i64 %6729
  %6731 = bitcast i16* %6730 to <2 x i64>*
  store <2 x i64> %6718, <2 x i64>* %6731, align 1
  %6732 = getelementptr inbounds i16, i16* %6730, i64 8
  %6733 = bitcast i16* %6732 to <2 x i64>*
  store <2 x i64> %6719, <2 x i64>* %6733, align 1
  %6734 = mul nsw i64 %1, 3
  %6735 = getelementptr inbounds i16, i16* %0, i64 %6734
  %6736 = bitcast i16* %6735 to <2 x i64>*
  store <2 x i64> %6720, <2 x i64>* %6736, align 1
  %6737 = getelementptr inbounds i16, i16* %6735, i64 8
  %6738 = bitcast i16* %6737 to <2 x i64>*
  store <2 x i64> %6721, <2 x i64>* %6738, align 1
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %6347) #8
  br label %7784

6739:                                             ; preds = %6345
  %6740 = bitcast [32 x <2 x i64>]* %20 to i8*
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %6740) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %6740, i8 -86, i64 512, i1 false) #8
  %6741 = bitcast [32 x <2 x i64>]* %21 to i8*
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %6741) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %6741, i8 -86, i64 512, i1 false) #8
  %6742 = icmp slt i32 %9, 12
  %6743 = sub nsw i32 6, %6
  %6744 = shl i32 39, %6
  %6745 = sext i32 %6744 to i64
  %6746 = getelementptr inbounds i16, i16* %5, i64 %6745
  %6747 = load i16, i16* %6746, align 2
  %6748 = insertelement <16 x i16> undef, i16 %6747, i32 0
  %6749 = shufflevector <16 x i16> %6748, <16 x i16> undef, <16 x i32> zeroinitializer
  %6750 = bitcast <16 x i16> %6749 to <4 x i64>
  br i1 %6742, label %6751, label %6883

6751:                                             ; preds = %6739
  %6752 = trunc i32 %6744 to i16
  %6753 = insertelement <16 x i16> undef, i16 %6752, i32 0
  %6754 = shufflevector <16 x i16> %6753, <16 x i16> undef, <16 x i32> zeroinitializer
  %6755 = icmp eq i32 %6, 0
  br label %6756

6756:                                             ; preds = %6859, %6751
  %6757 = phi i64 [ 0, %6751 ], [ %6881, %6859 ]
  %6758 = phi i32 [ %8, %6751 ], [ %6880, %6859 ]
  %6759 = ashr i32 %6758, %6743
  %6760 = icmp slt i32 %6759, %6744
  br i1 %6760, label %6792, label %6761

6761:                                             ; preds = %6756
  %6762 = trunc i64 %6757 to i32
  %6763 = icmp slt i32 %6762, 32
  br i1 %6763, label %6764, label %7032

6764:                                             ; preds = %6761
  %6765 = shufflevector <4 x i64> %6750, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %6766 = and i64 %6757, 4294967295
  %6767 = sub nsw i64 0, %6757
  %6768 = sub nsw i64 31, %6757
  %6769 = and i64 %6767, 3
  %6770 = icmp eq i64 %6769, 0
  br i1 %6770, label %6778, label %6771

6771:                                             ; preds = %6764, %6771
  %6772 = phi i64 [ %6775, %6771 ], [ %6766, %6764 ]
  %6773 = phi i64 [ %6776, %6771 ], [ %6769, %6764 ]
  %6774 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %20, i64 0, i64 %6772
  store <2 x i64> %6765, <2 x i64>* %6774, align 16
  %6775 = add nuw nsw i64 %6772, 1
  %6776 = add i64 %6773, -1
  %6777 = icmp eq i64 %6776, 0
  br i1 %6777, label %6778, label %6771, !llvm.loop !31

6778:                                             ; preds = %6771, %6764
  %6779 = phi i64 [ %6766, %6764 ], [ %6775, %6771 ]
  %6780 = icmp ult i64 %6768, 3
  br i1 %6780, label %7032, label %6781

6781:                                             ; preds = %6778, %6781
  %6782 = phi i64 [ %6790, %6781 ], [ %6779, %6778 ]
  %6783 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %20, i64 0, i64 %6782
  store <2 x i64> %6765, <2 x i64>* %6783, align 16
  %6784 = add nuw nsw i64 %6782, 1
  %6785 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %20, i64 0, i64 %6784
  store <2 x i64> %6765, <2 x i64>* %6785, align 16
  %6786 = add nuw nsw i64 %6782, 2
  %6787 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %20, i64 0, i64 %6786
  store <2 x i64> %6765, <2 x i64>* %6787, align 16
  %6788 = add nuw nsw i64 %6782, 3
  %6789 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %20, i64 0, i64 %6788
  store <2 x i64> %6765, <2 x i64>* %6789, align 16
  %6790 = add nuw nsw i64 %6782, 4
  %6791 = icmp eq i64 %6790, 32
  br i1 %6791, label %7032, label %6781

6792:                                             ; preds = %6756
  %6793 = sext i32 %6759 to i64
  %6794 = getelementptr inbounds i16, i16* %5, i64 %6793
  %6795 = bitcast i16* %6794 to <2 x i64>*
  %6796 = load <2 x i64>, <2 x i64>* %6795, align 1
  br i1 %6755, label %6833, label %6797

6797:                                             ; preds = %6792
  %6798 = getelementptr inbounds i16, i16* %6794, i64 8
  %6799 = bitcast i16* %6798 to <16 x i8>*
  %6800 = load <16 x i8>, <16 x i8>* %6799, align 1
  %6801 = bitcast <2 x i64> %6796 to <16 x i8>
  %6802 = shufflevector <16 x i8> %6801, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 4, i32 5, i32 8, i32 9, i32 12, i32 13, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %6803 = shufflevector <16 x i8> %6800, <16 x i8> undef, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 4, i32 5, i32 8, i32 9, i32 12, i32 13>
  %6804 = shufflevector <16 x i8> %6801, <16 x i8> undef, <16 x i32> <i32 2, i32 3, i32 6, i32 7, i32 10, i32 11, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %6805 = shufflevector <16 x i8> %6800, <16 x i8> undef, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 2, i32 3, i32 6, i32 7, i32 10, i32 11, i32 14, i32 15>
  %6806 = shufflevector <16 x i8> %6802, <16 x i8> %6803, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6807 = bitcast <16 x i8> %6806 to <2 x i64>
  %6808 = shufflevector <16 x i8> %6804, <16 x i8> %6805, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6809 = bitcast <16 x i8> %6808 to <2 x i64>
  %6810 = trunc i32 %6759 to i16
  %6811 = add i16 %6810, 2
  %6812 = add i16 %6810, 4
  %6813 = add i16 %6810, 6
  %6814 = add i16 %6810, 8
  %6815 = add i16 %6810, 10
  %6816 = add i16 %6810, 12
  %6817 = add i16 %6810, 14
  %6818 = insertelement <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0>, i16 %6810, i32 0
  %6819 = insertelement <16 x i16> %6818, i16 %6811, i32 1
  %6820 = insertelement <16 x i16> %6819, i16 %6812, i32 2
  %6821 = insertelement <16 x i16> %6820, i16 %6813, i32 3
  %6822 = insertelement <16 x i16> %6821, i16 %6814, i32 4
  %6823 = insertelement <16 x i16> %6822, i16 %6815, i32 5
  %6824 = insertelement <16 x i16> %6823, i16 %6816, i32 6
  %6825 = insertelement <16 x i16> %6824, i16 %6817, i32 7
  %6826 = trunc i32 %6758 to i16
  %6827 = insertelement <16 x i16> undef, i16 %6826, i32 0
  %6828 = shufflevector <16 x i16> %6827, <16 x i16> undef, <16 x i32> zeroinitializer
  %6829 = tail call <16 x i16> @llvm.x86.avx2.pslli.w(<16 x i16> %6828, i32 %6) #8
  %6830 = lshr <16 x i16> %6829, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %6831 = bitcast <16 x i16> %6830 to <4 x i64>
  %6832 = and <4 x i64> %6831, <i64 8725857424048159, i64 8725857424048159, i64 8725857424048159, i64 8725857424048159>
  br label %6859

6833:                                             ; preds = %6792
  %6834 = getelementptr inbounds i16, i16* %6794, i64 1
  %6835 = bitcast i16* %6834 to <2 x i64>*
  %6836 = load <2 x i64>, <2 x i64>* %6835, align 1
  %6837 = trunc i32 %6759 to i16
  %6838 = add i16 %6837, 1
  %6839 = add i16 %6837, 2
  %6840 = add i16 %6837, 3
  %6841 = add i16 %6837, 4
  %6842 = add i16 %6837, 5
  %6843 = add i16 %6837, 6
  %6844 = add i16 %6837, 7
  %6845 = insertelement <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0>, i16 %6837, i32 0
  %6846 = insertelement <16 x i16> %6845, i16 %6838, i32 1
  %6847 = insertelement <16 x i16> %6846, i16 %6839, i32 2
  %6848 = insertelement <16 x i16> %6847, i16 %6840, i32 3
  %6849 = insertelement <16 x i16> %6848, i16 %6841, i32 4
  %6850 = insertelement <16 x i16> %6849, i16 %6842, i32 5
  %6851 = insertelement <16 x i16> %6850, i16 %6843, i32 6
  %6852 = insertelement <16 x i16> %6851, i16 %6844, i32 7
  %6853 = trunc i32 %6758 to i16
  %6854 = insertelement <16 x i16> undef, i16 %6853, i32 0
  %6855 = and <16 x i16> %6854, <i16 63, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef>
  %6856 = lshr <16 x i16> %6855, <i16 1, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0>
  %6857 = shufflevector <16 x i16> %6856, <16 x i16> undef, <16 x i32> zeroinitializer
  %6858 = bitcast <16 x i16> %6857 to <4 x i64>
  br label %6859

6859:                                             ; preds = %6833, %6797
  %6860 = phi <16 x i16> [ %6825, %6797 ], [ %6852, %6833 ]
  %6861 = phi <2 x i64> [ %6807, %6797 ], [ %6796, %6833 ]
  %6862 = phi <2 x i64> [ %6809, %6797 ], [ %6836, %6833 ]
  %6863 = phi <4 x i64> [ %6832, %6797 ], [ %6858, %6833 ]
  %6864 = shufflevector <2 x i64> %6861, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %6865 = shufflevector <2 x i64> %6862, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %6866 = bitcast <4 x i64> %6865 to <16 x i16>
  %6867 = bitcast <4 x i64> %6864 to <16 x i16>
  %6868 = sub <16 x i16> %6866, %6867
  %6869 = shl <16 x i16> %6867, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %6870 = or <16 x i16> %6869, <i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16>
  %6871 = bitcast <4 x i64> %6863 to <16 x i16>
  %6872 = mul <16 x i16> %6868, %6871
  %6873 = add <16 x i16> %6872, %6870
  %6874 = lshr <16 x i16> %6873, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %6875 = icmp sgt <16 x i16> %6754, %6860
  %6876 = select <16 x i1> %6875, <16 x i16> %6874, <16 x i16> %6749
  %6877 = bitcast <16 x i16> %6876 to <4 x i64>
  %6878 = shufflevector <4 x i64> %6877, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %6879 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %20, i64 0, i64 %6757
  store <2 x i64> %6878, <2 x i64>* %6879, align 16
  %6880 = add nsw i32 %6758, %8
  %6881 = add nuw nsw i64 %6757, 1
  %6882 = icmp eq i64 %6881, 32
  br i1 %6882, label %7032, label %6756

6883:                                             ; preds = %6739
  %6884 = insertelement <8 x i32> undef, i32 %6744, i32 0
  %6885 = shufflevector <8 x i32> %6884, <8 x i32> undef, <8 x i32> zeroinitializer
  %6886 = icmp eq i32 %6, 0
  %6887 = bitcast <16 x i16> %6749 to <32 x i8>
  br label %6888

6888:                                             ; preds = %6997, %6883
  %6889 = phi i64 [ 0, %6883 ], [ %7030, %6997 ]
  %6890 = phi i32 [ %8, %6883 ], [ %7029, %6997 ]
  %6891 = ashr i32 %6890, %6743
  %6892 = icmp slt i32 %6891, %6744
  br i1 %6892, label %6924, label %6893

6893:                                             ; preds = %6888
  %6894 = trunc i64 %6889 to i32
  %6895 = icmp slt i32 %6894, 32
  br i1 %6895, label %6896, label %7032

6896:                                             ; preds = %6893
  %6897 = shufflevector <4 x i64> %6750, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %6898 = and i64 %6889, 4294967295
  %6899 = sub nsw i64 0, %6889
  %6900 = sub nsw i64 31, %6889
  %6901 = and i64 %6899, 3
  %6902 = icmp eq i64 %6901, 0
  br i1 %6902, label %6910, label %6903

6903:                                             ; preds = %6896, %6903
  %6904 = phi i64 [ %6907, %6903 ], [ %6898, %6896 ]
  %6905 = phi i64 [ %6908, %6903 ], [ %6901, %6896 ]
  %6906 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %20, i64 0, i64 %6904
  store <2 x i64> %6897, <2 x i64>* %6906, align 16
  %6907 = add nuw nsw i64 %6904, 1
  %6908 = add i64 %6905, -1
  %6909 = icmp eq i64 %6908, 0
  br i1 %6909, label %6910, label %6903, !llvm.loop !32

6910:                                             ; preds = %6903, %6896
  %6911 = phi i64 [ %6898, %6896 ], [ %6907, %6903 ]
  %6912 = icmp ult i64 %6900, 3
  br i1 %6912, label %7032, label %6913

6913:                                             ; preds = %6910, %6913
  %6914 = phi i64 [ %6922, %6913 ], [ %6911, %6910 ]
  %6915 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %20, i64 0, i64 %6914
  store <2 x i64> %6897, <2 x i64>* %6915, align 16
  %6916 = add nuw nsw i64 %6914, 1
  %6917 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %20, i64 0, i64 %6916
  store <2 x i64> %6897, <2 x i64>* %6917, align 16
  %6918 = add nuw nsw i64 %6914, 2
  %6919 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %20, i64 0, i64 %6918
  store <2 x i64> %6897, <2 x i64>* %6919, align 16
  %6920 = add nuw nsw i64 %6914, 3
  %6921 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %20, i64 0, i64 %6920
  store <2 x i64> %6897, <2 x i64>* %6921, align 16
  %6922 = add nuw nsw i64 %6914, 4
  %6923 = icmp eq i64 %6922, 32
  br i1 %6923, label %7032, label %6913

6924:                                             ; preds = %6888
  %6925 = sext i32 %6891 to i64
  %6926 = getelementptr inbounds i16, i16* %5, i64 %6925
  %6927 = bitcast i16* %6926 to <8 x i16>*
  %6928 = load <8 x i16>, <8 x i16>* %6927, align 1
  %6929 = zext <8 x i16> %6928 to <8 x i32>
  br i1 %6886, label %6967, label %6930

6930:                                             ; preds = %6924
  %6931 = shufflevector <8 x i32> %6929, <8 x i32> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 1, i32 3, i32 5, i32 7>
  %6932 = bitcast <8 x i32> %6931 to <4 x i64>
  %6933 = shufflevector <4 x i64> %6932, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %6934 = getelementptr inbounds i16, i16* %6926, i64 8
  %6935 = bitcast i16* %6934 to <8 x i16>*
  %6936 = load <8 x i16>, <8 x i16>* %6935, align 1
  %6937 = zext <8 x i16> %6936 to <8 x i32>
  %6938 = shufflevector <8 x i32> %6937, <8 x i32> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 1, i32 3, i32 5, i32 7>
  %6939 = bitcast <8 x i32> %6938 to <4 x i64>
  %6940 = shufflevector <4 x i64> %6939, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %6941 = shufflevector <4 x i64> %6932, <4 x i64> %6939, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %6942 = shufflevector <2 x i64> %6933, <2 x i64> %6940, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %6943 = insertelement <4 x i32> undef, i32 %6891, i32 0
  %6944 = shufflevector <4 x i32> %6943, <4 x i32> undef, <4 x i32> zeroinitializer
  %6945 = add nsw <4 x i32> %6944, <i32 2, i32 4, i32 6, i32 8>
  %6946 = add nsw i32 %6891, 10
  %6947 = add nsw i32 %6891, 12
  %6948 = add nsw i32 %6891, 14
  %6949 = insertelement <8 x i32> undef, i32 %6891, i32 0
  %6950 = extractelement <4 x i32> %6945, i32 0
  %6951 = insertelement <8 x i32> %6949, i32 %6950, i32 1
  %6952 = extractelement <4 x i32> %6945, i32 1
  %6953 = insertelement <8 x i32> %6951, i32 %6952, i32 2
  %6954 = extractelement <4 x i32> %6945, i32 2
  %6955 = insertelement <8 x i32> %6953, i32 %6954, i32 3
  %6956 = extractelement <4 x i32> %6945, i32 3
  %6957 = insertelement <8 x i32> %6955, i32 %6956, i32 4
  %6958 = insertelement <8 x i32> %6957, i32 %6946, i32 5
  %6959 = insertelement <8 x i32> %6958, i32 %6947, i32 6
  %6960 = insertelement <8 x i32> %6959, i32 %6948, i32 7
  %6961 = insertelement <8 x i32> undef, i32 %6890, i32 0
  %6962 = shufflevector <8 x i32> %6961, <8 x i32> undef, <8 x i32> zeroinitializer
  %6963 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %6962, i32 %6) #8
  %6964 = lshr <8 x i32> %6963, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %6965 = bitcast <8 x i32> %6964 to <4 x i64>
  %6966 = and <4 x i64> %6965, <i64 133143986207, i64 133143986207, i64 133143986207, i64 133143986207>
  br label %6997

6967:                                             ; preds = %6924
  %6968 = getelementptr inbounds i16, i16* %6926, i64 1
  %6969 = bitcast i16* %6968 to <8 x i16>*
  %6970 = load <8 x i16>, <8 x i16>* %6969, align 1
  %6971 = zext <8 x i16> %6970 to <8 x i32>
  %6972 = bitcast <8 x i32> %6971 to <4 x i64>
  %6973 = bitcast <8 x i32> %6929 to <4 x i64>
  %6974 = insertelement <4 x i32> undef, i32 %6891, i32 0
  %6975 = shufflevector <4 x i32> %6974, <4 x i32> undef, <4 x i32> zeroinitializer
  %6976 = add nsw <4 x i32> %6975, <i32 1, i32 2, i32 3, i32 4>
  %6977 = add nsw i32 %6891, 5
  %6978 = add nsw i32 %6891, 6
  %6979 = add nsw i32 %6891, 7
  %6980 = insertelement <8 x i32> undef, i32 %6891, i32 0
  %6981 = extractelement <4 x i32> %6976, i32 0
  %6982 = insertelement <8 x i32> %6980, i32 %6981, i32 1
  %6983 = extractelement <4 x i32> %6976, i32 1
  %6984 = insertelement <8 x i32> %6982, i32 %6983, i32 2
  %6985 = extractelement <4 x i32> %6976, i32 2
  %6986 = insertelement <8 x i32> %6984, i32 %6985, i32 3
  %6987 = extractelement <4 x i32> %6976, i32 3
  %6988 = insertelement <8 x i32> %6986, i32 %6987, i32 4
  %6989 = insertelement <8 x i32> %6988, i32 %6977, i32 5
  %6990 = insertelement <8 x i32> %6989, i32 %6978, i32 6
  %6991 = insertelement <8 x i32> %6990, i32 %6979, i32 7
  %6992 = insertelement <8 x i32> undef, i32 %6890, i32 0
  %6993 = and <8 x i32> %6992, <i32 63, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %6994 = lshr <8 x i32> %6993, <i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>
  %6995 = shufflevector <8 x i32> %6994, <8 x i32> undef, <8 x i32> zeroinitializer
  %6996 = bitcast <8 x i32> %6995 to <4 x i64>
  br label %6997

6997:                                             ; preds = %6967, %6930
  %6998 = phi <4 x i64> [ %6941, %6930 ], [ %6973, %6967 ]
  %6999 = phi <4 x i64> [ %6942, %6930 ], [ %6972, %6967 ]
  %7000 = phi <8 x i32> [ %6960, %6930 ], [ %6991, %6967 ]
  %7001 = phi <4 x i64> [ %6966, %6930 ], [ %6996, %6967 ]
  %7002 = bitcast <4 x i64> %6999 to <8 x i32>
  %7003 = bitcast <4 x i64> %6998 to <8 x i32>
  %7004 = sub <8 x i32> %7002, %7003
  %7005 = shl <8 x i32> %7003, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %7006 = or <8 x i32> %7005, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %7007 = bitcast <4 x i64> %7001 to <8 x i32>
  %7008 = mul <8 x i32> %7004, %7007
  %7009 = add <8 x i32> %7008, %7006
  %7010 = lshr <8 x i32> %7009, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %7011 = bitcast <8 x i32> %7010 to <4 x i64>
  %7012 = shufflevector <4 x i64> %7011, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %7013 = shufflevector <2 x i64> %7012, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %7014 = bitcast <4 x i64> %7013 to <8 x i32>
  %7015 = tail call <16 x i16> @llvm.x86.avx2.packusdw(<8 x i32> %7010, <8 x i32> %7014) #8
  %7016 = icmp sgt <8 x i32> %6885, %7000
  %7017 = sext <8 x i1> %7016 to <8 x i32>
  %7018 = bitcast <8 x i32> %7017 to <4 x i64>
  %7019 = shufflevector <4 x i64> %7018, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %7020 = shufflevector <2 x i64> %7019, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %7021 = bitcast <4 x i64> %7020 to <8 x i32>
  %7022 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %7017, <8 x i32> %7021) #8
  %7023 = bitcast <16 x i16> %7015 to <32 x i8>
  %7024 = bitcast <16 x i16> %7022 to <32 x i8>
  %7025 = tail call <32 x i8> @llvm.x86.avx2.pblendvb(<32 x i8> %6887, <32 x i8> %7023, <32 x i8> %7024) #8
  %7026 = bitcast <32 x i8> %7025 to <4 x i64>
  %7027 = shufflevector <4 x i64> %7026, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %7028 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %20, i64 0, i64 %6889
  store <2 x i64> %7027, <2 x i64>* %7028, align 16
  %7029 = add nsw i32 %6890, %8
  %7030 = add nuw nsw i64 %6889, 1
  %7031 = icmp eq i64 %7030, 32
  br i1 %7031, label %7032, label %6888

7032:                                             ; preds = %6997, %6910, %6913, %6859, %6778, %6781, %6893, %6761
  br label %7033

7033:                                             ; preds = %7032, %7033
  %7034 = phi i64 [ %7114, %7033 ], [ 0, %7032 ]
  %7035 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %20, i64 0, i64 %7034
  %7036 = or i64 %7034, 1
  %7037 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %20, i64 0, i64 %7036
  %7038 = or i64 %7034, 2
  %7039 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %20, i64 0, i64 %7038
  %7040 = or i64 %7034, 3
  %7041 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %20, i64 0, i64 %7040
  %7042 = or i64 %7034, 4
  %7043 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %20, i64 0, i64 %7042
  %7044 = or i64 %7034, 5
  %7045 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %20, i64 0, i64 %7044
  %7046 = or i64 %7034, 6
  %7047 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %20, i64 0, i64 %7046
  %7048 = or i64 %7034, 7
  %7049 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %20, i64 0, i64 %7048
  %7050 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %21, i64 0, i64 %7034
  %7051 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %21, i64 0, i64 %7036
  %7052 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %21, i64 0, i64 %7038
  %7053 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %21, i64 0, i64 %7040
  %7054 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %21, i64 0, i64 %7042
  %7055 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %21, i64 0, i64 %7044
  %7056 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %21, i64 0, i64 %7046
  %7057 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %21, i64 0, i64 %7048
  %7058 = bitcast <2 x i64>* %7035 to <8 x i16>*
  %7059 = load <8 x i16>, <8 x i16>* %7058, align 16
  %7060 = bitcast <2 x i64>* %7037 to <8 x i16>*
  %7061 = load <8 x i16>, <8 x i16>* %7060, align 16
  %7062 = shufflevector <8 x i16> %7059, <8 x i16> %7061, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %7063 = bitcast <2 x i64>* %7039 to <8 x i16>*
  %7064 = load <8 x i16>, <8 x i16>* %7063, align 16
  %7065 = bitcast <2 x i64>* %7041 to <8 x i16>*
  %7066 = load <8 x i16>, <8 x i16>* %7065, align 16
  %7067 = shufflevector <8 x i16> %7064, <8 x i16> %7066, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %7068 = bitcast <2 x i64>* %7043 to <8 x i16>*
  %7069 = load <8 x i16>, <8 x i16>* %7068, align 16
  %7070 = bitcast <2 x i64>* %7045 to <8 x i16>*
  %7071 = load <8 x i16>, <8 x i16>* %7070, align 16
  %7072 = shufflevector <8 x i16> %7069, <8 x i16> %7071, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %7073 = bitcast <2 x i64>* %7047 to <8 x i16>*
  %7074 = load <8 x i16>, <8 x i16>* %7073, align 16
  %7075 = bitcast <2 x i64>* %7049 to <8 x i16>*
  %7076 = load <8 x i16>, <8 x i16>* %7075, align 16
  %7077 = shufflevector <8 x i16> %7074, <8 x i16> %7076, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %7078 = bitcast <8 x i16> %7062 to <4 x i32>
  %7079 = bitcast <8 x i16> %7067 to <4 x i32>
  %7080 = shufflevector <4 x i32> %7078, <4 x i32> %7079, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %7081 = bitcast <4 x i32> %7080 to <2 x i64>
  %7082 = bitcast <8 x i16> %7072 to <4 x i32>
  %7083 = bitcast <8 x i16> %7077 to <4 x i32>
  %7084 = shufflevector <4 x i32> %7082, <4 x i32> %7083, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %7085 = bitcast <4 x i32> %7084 to <2 x i64>
  %7086 = shufflevector <2 x i64> %7081, <2 x i64> %7085, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %7086, <2 x i64>* %7050, align 16
  %7087 = shufflevector <2 x i64> %7081, <2 x i64> %7085, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %7087, <2 x i64>* %7051, align 16
  %7088 = shufflevector <4 x i32> %7078, <4 x i32> %7079, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %7089 = bitcast <4 x i32> %7088 to <2 x i64>
  %7090 = shufflevector <4 x i32> %7082, <4 x i32> %7083, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %7091 = bitcast <4 x i32> %7090 to <2 x i64>
  %7092 = shufflevector <2 x i64> %7089, <2 x i64> %7091, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %7092, <2 x i64>* %7052, align 16
  %7093 = shufflevector <2 x i64> %7089, <2 x i64> %7091, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %7093, <2 x i64>* %7053, align 16
  %7094 = shufflevector <8 x i16> %7059, <8 x i16> %7061, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %7095 = shufflevector <8 x i16> %7064, <8 x i16> %7066, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %7096 = shufflevector <8 x i16> %7069, <8 x i16> %7071, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %7097 = shufflevector <8 x i16> %7074, <8 x i16> %7076, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %7098 = bitcast <8 x i16> %7094 to <4 x i32>
  %7099 = bitcast <8 x i16> %7095 to <4 x i32>
  %7100 = shufflevector <4 x i32> %7098, <4 x i32> %7099, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %7101 = bitcast <4 x i32> %7100 to <2 x i64>
  %7102 = bitcast <8 x i16> %7096 to <4 x i32>
  %7103 = bitcast <8 x i16> %7097 to <4 x i32>
  %7104 = shufflevector <4 x i32> %7102, <4 x i32> %7103, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %7105 = bitcast <4 x i32> %7104 to <2 x i64>
  %7106 = shufflevector <2 x i64> %7101, <2 x i64> %7105, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %7106, <2 x i64>* %7054, align 16
  %7107 = shufflevector <2 x i64> %7101, <2 x i64> %7105, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %7107, <2 x i64>* %7055, align 16
  %7108 = shufflevector <4 x i32> %7098, <4 x i32> %7099, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %7109 = bitcast <4 x i32> %7108 to <2 x i64>
  %7110 = shufflevector <4 x i32> %7102, <4 x i32> %7103, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %7111 = bitcast <4 x i32> %7110 to <2 x i64>
  %7112 = shufflevector <2 x i64> %7109, <2 x i64> %7111, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %7112, <2 x i64>* %7056, align 16
  %7113 = shufflevector <2 x i64> %7109, <2 x i64> %7111, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %7113, <2 x i64>* %7057, align 16
  %7114 = add nuw nsw i64 %7034, 8
  %7115 = icmp ult i64 %7114, 32
  br i1 %7115, label %7033, label %7116

7116:                                             ; preds = %7033
  %7117 = bitcast i16* %0 to <2 x i64>*
  %7118 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %21, i64 0, i64 0
  %7119 = load <2 x i64>, <2 x i64>* %7118, align 16
  store <2 x i64> %7119, <2 x i64>* %7117, align 1
  %7120 = getelementptr inbounds i16, i16* %0, i64 8
  %7121 = bitcast i16* %7120 to <2 x i64>*
  %7122 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %21, i64 0, i64 8
  %7123 = load <2 x i64>, <2 x i64>* %7122, align 16
  store <2 x i64> %7123, <2 x i64>* %7121, align 1
  %7124 = getelementptr inbounds i16, i16* %0, i64 16
  %7125 = bitcast i16* %7124 to <2 x i64>*
  %7126 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %21, i64 0, i64 16
  %7127 = load <2 x i64>, <2 x i64>* %7126, align 16
  store <2 x i64> %7127, <2 x i64>* %7125, align 1
  %7128 = getelementptr inbounds i16, i16* %0, i64 24
  %7129 = bitcast i16* %7128 to <2 x i64>*
  %7130 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %21, i64 0, i64 24
  %7131 = load <2 x i64>, <2 x i64>* %7130, align 16
  store <2 x i64> %7131, <2 x i64>* %7129, align 1
  %7132 = getelementptr inbounds i16, i16* %0, i64 %1
  %7133 = bitcast i16* %7132 to <2 x i64>*
  %7134 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %21, i64 0, i64 1
  %7135 = load <2 x i64>, <2 x i64>* %7134, align 16
  store <2 x i64> %7135, <2 x i64>* %7133, align 1
  %7136 = getelementptr inbounds i16, i16* %7132, i64 8
  %7137 = bitcast i16* %7136 to <2 x i64>*
  %7138 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %21, i64 0, i64 9
  %7139 = load <2 x i64>, <2 x i64>* %7138, align 16
  store <2 x i64> %7139, <2 x i64>* %7137, align 1
  %7140 = getelementptr inbounds i16, i16* %7132, i64 16
  %7141 = bitcast i16* %7140 to <2 x i64>*
  %7142 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %21, i64 0, i64 17
  %7143 = load <2 x i64>, <2 x i64>* %7142, align 16
  store <2 x i64> %7143, <2 x i64>* %7141, align 1
  %7144 = getelementptr inbounds i16, i16* %7132, i64 24
  %7145 = bitcast i16* %7144 to <2 x i64>*
  %7146 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %21, i64 0, i64 25
  %7147 = load <2 x i64>, <2 x i64>* %7146, align 16
  store <2 x i64> %7147, <2 x i64>* %7145, align 1
  %7148 = shl nsw i64 %1, 1
  %7149 = getelementptr inbounds i16, i16* %0, i64 %7148
  %7150 = bitcast i16* %7149 to <2 x i64>*
  %7151 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %21, i64 0, i64 2
  %7152 = load <2 x i64>, <2 x i64>* %7151, align 16
  store <2 x i64> %7152, <2 x i64>* %7150, align 1
  %7153 = getelementptr inbounds i16, i16* %7149, i64 8
  %7154 = bitcast i16* %7153 to <2 x i64>*
  %7155 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %21, i64 0, i64 10
  %7156 = load <2 x i64>, <2 x i64>* %7155, align 16
  store <2 x i64> %7156, <2 x i64>* %7154, align 1
  %7157 = getelementptr inbounds i16, i16* %7149, i64 16
  %7158 = bitcast i16* %7157 to <2 x i64>*
  %7159 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %21, i64 0, i64 18
  %7160 = load <2 x i64>, <2 x i64>* %7159, align 16
  store <2 x i64> %7160, <2 x i64>* %7158, align 1
  %7161 = getelementptr inbounds i16, i16* %7149, i64 24
  %7162 = bitcast i16* %7161 to <2 x i64>*
  %7163 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %21, i64 0, i64 26
  %7164 = load <2 x i64>, <2 x i64>* %7163, align 16
  store <2 x i64> %7164, <2 x i64>* %7162, align 1
  %7165 = mul nsw i64 %1, 3
  %7166 = getelementptr inbounds i16, i16* %0, i64 %7165
  %7167 = bitcast i16* %7166 to <2 x i64>*
  %7168 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %21, i64 0, i64 3
  %7169 = load <2 x i64>, <2 x i64>* %7168, align 16
  store <2 x i64> %7169, <2 x i64>* %7167, align 1
  %7170 = getelementptr inbounds i16, i16* %7166, i64 8
  %7171 = bitcast i16* %7170 to <2 x i64>*
  %7172 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %21, i64 0, i64 11
  %7173 = load <2 x i64>, <2 x i64>* %7172, align 16
  store <2 x i64> %7173, <2 x i64>* %7171, align 1
  %7174 = getelementptr inbounds i16, i16* %7166, i64 16
  %7175 = bitcast i16* %7174 to <2 x i64>*
  %7176 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %21, i64 0, i64 19
  %7177 = load <2 x i64>, <2 x i64>* %7176, align 16
  store <2 x i64> %7177, <2 x i64>* %7175, align 1
  %7178 = getelementptr inbounds i16, i16* %7166, i64 24
  %7179 = bitcast i16* %7178 to <2 x i64>*
  %7180 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %21, i64 0, i64 27
  %7181 = load <2 x i64>, <2 x i64>* %7180, align 16
  store <2 x i64> %7181, <2 x i64>* %7179, align 1
  %7182 = shl nsw i64 %1, 2
  %7183 = getelementptr inbounds i16, i16* %0, i64 %7182
  %7184 = bitcast i16* %7183 to <2 x i64>*
  %7185 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %21, i64 0, i64 4
  %7186 = load <2 x i64>, <2 x i64>* %7185, align 16
  store <2 x i64> %7186, <2 x i64>* %7184, align 1
  %7187 = getelementptr inbounds i16, i16* %7183, i64 8
  %7188 = bitcast i16* %7187 to <2 x i64>*
  %7189 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %21, i64 0, i64 12
  %7190 = load <2 x i64>, <2 x i64>* %7189, align 16
  store <2 x i64> %7190, <2 x i64>* %7188, align 1
  %7191 = getelementptr inbounds i16, i16* %7183, i64 16
  %7192 = bitcast i16* %7191 to <2 x i64>*
  %7193 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %21, i64 0, i64 20
  %7194 = load <2 x i64>, <2 x i64>* %7193, align 16
  store <2 x i64> %7194, <2 x i64>* %7192, align 1
  %7195 = getelementptr inbounds i16, i16* %7183, i64 24
  %7196 = bitcast i16* %7195 to <2 x i64>*
  %7197 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %21, i64 0, i64 28
  %7198 = load <2 x i64>, <2 x i64>* %7197, align 16
  store <2 x i64> %7198, <2 x i64>* %7196, align 1
  %7199 = mul nsw i64 %1, 5
  %7200 = getelementptr inbounds i16, i16* %0, i64 %7199
  %7201 = bitcast i16* %7200 to <2 x i64>*
  %7202 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %21, i64 0, i64 5
  %7203 = load <2 x i64>, <2 x i64>* %7202, align 16
  store <2 x i64> %7203, <2 x i64>* %7201, align 1
  %7204 = getelementptr inbounds i16, i16* %7200, i64 8
  %7205 = bitcast i16* %7204 to <2 x i64>*
  %7206 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %21, i64 0, i64 13
  %7207 = load <2 x i64>, <2 x i64>* %7206, align 16
  store <2 x i64> %7207, <2 x i64>* %7205, align 1
  %7208 = getelementptr inbounds i16, i16* %7200, i64 16
  %7209 = bitcast i16* %7208 to <2 x i64>*
  %7210 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %21, i64 0, i64 21
  %7211 = load <2 x i64>, <2 x i64>* %7210, align 16
  store <2 x i64> %7211, <2 x i64>* %7209, align 1
  %7212 = getelementptr inbounds i16, i16* %7200, i64 24
  %7213 = bitcast i16* %7212 to <2 x i64>*
  %7214 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %21, i64 0, i64 29
  %7215 = load <2 x i64>, <2 x i64>* %7214, align 16
  store <2 x i64> %7215, <2 x i64>* %7213, align 1
  %7216 = mul nsw i64 %1, 6
  %7217 = getelementptr inbounds i16, i16* %0, i64 %7216
  %7218 = bitcast i16* %7217 to <2 x i64>*
  %7219 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %21, i64 0, i64 6
  %7220 = load <2 x i64>, <2 x i64>* %7219, align 16
  store <2 x i64> %7220, <2 x i64>* %7218, align 1
  %7221 = getelementptr inbounds i16, i16* %7217, i64 8
  %7222 = bitcast i16* %7221 to <2 x i64>*
  %7223 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %21, i64 0, i64 14
  %7224 = load <2 x i64>, <2 x i64>* %7223, align 16
  store <2 x i64> %7224, <2 x i64>* %7222, align 1
  %7225 = getelementptr inbounds i16, i16* %7217, i64 16
  %7226 = bitcast i16* %7225 to <2 x i64>*
  %7227 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %21, i64 0, i64 22
  %7228 = load <2 x i64>, <2 x i64>* %7227, align 16
  store <2 x i64> %7228, <2 x i64>* %7226, align 1
  %7229 = getelementptr inbounds i16, i16* %7217, i64 24
  %7230 = bitcast i16* %7229 to <2 x i64>*
  %7231 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %21, i64 0, i64 30
  %7232 = load <2 x i64>, <2 x i64>* %7231, align 16
  store <2 x i64> %7232, <2 x i64>* %7230, align 1
  %7233 = mul nsw i64 %1, 7
  %7234 = getelementptr inbounds i16, i16* %0, i64 %7233
  %7235 = bitcast i16* %7234 to <2 x i64>*
  %7236 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %21, i64 0, i64 7
  %7237 = load <2 x i64>, <2 x i64>* %7236, align 16
  store <2 x i64> %7237, <2 x i64>* %7235, align 1
  %7238 = getelementptr inbounds i16, i16* %7234, i64 8
  %7239 = bitcast i16* %7238 to <2 x i64>*
  %7240 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %21, i64 0, i64 15
  %7241 = load <2 x i64>, <2 x i64>* %7240, align 16
  store <2 x i64> %7241, <2 x i64>* %7239, align 1
  %7242 = getelementptr inbounds i16, i16* %7234, i64 16
  %7243 = bitcast i16* %7242 to <2 x i64>*
  %7244 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %21, i64 0, i64 23
  %7245 = load <2 x i64>, <2 x i64>* %7244, align 16
  store <2 x i64> %7245, <2 x i64>* %7243, align 1
  %7246 = getelementptr inbounds i16, i16* %7234, i64 24
  %7247 = bitcast i16* %7246 to <2 x i64>*
  %7248 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %21, i64 0, i64 31
  %7249 = load <2 x i64>, <2 x i64>* %7248, align 16
  store <2 x i64> %7249, <2 x i64>* %7247, align 1
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %6741) #8
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %6740) #8
  br label %7784

7250:                                             ; preds = %6345
  %7251 = bitcast [64 x <4 x i64>]* %22 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2048, i8* nonnull %7251) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %7251, i8 -86, i64 2048, i1 false) #8
  %7252 = bitcast [16 x <4 x i64>]* %23 to i8*
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %7252) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %7252, i8 -86, i64 512, i1 false) #8
  %7253 = icmp slt i32 %9, 12
  %7254 = getelementptr inbounds i16, i16* %5, i64 79
  %7255 = load i16, i16* %7254, align 2
  %7256 = insertelement <16 x i16> undef, i16 %7255, i32 0
  %7257 = shufflevector <16 x i16> %7256, <16 x i16> undef, <16 x i32> zeroinitializer
  br i1 %7253, label %7258, label %7368

7258:                                             ; preds = %7250, %7310
  %7259 = phi i64 [ %7366, %7310 ], [ 0, %7250 ]
  %7260 = phi i32 [ %7365, %7310 ], [ %8, %7250 ]
  %7261 = ashr i32 %7260, 6
  %7262 = icmp slt i32 %7260, 5056
  br i1 %7262, label %7310, label %7263

7263:                                             ; preds = %7258
  %7264 = trunc i64 %7259 to i32
  %7265 = icmp slt i32 %7264, 64
  br i1 %7265, label %7266, label %7511

7266:                                             ; preds = %7263
  %7267 = and i64 %7259, 4294967295
  %7268 = sub nsw i64 0, %7259
  %7269 = sub nsw i64 63, %7259
  %7270 = and i64 %7268, 7
  %7271 = icmp eq i64 %7270, 0
  br i1 %7271, label %7280, label %7272

7272:                                             ; preds = %7266, %7272
  %7273 = phi i64 [ %7277, %7272 ], [ %7267, %7266 ]
  %7274 = phi i64 [ %7278, %7272 ], [ %7270, %7266 ]
  %7275 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %22, i64 0, i64 %7273
  %7276 = bitcast <4 x i64>* %7275 to <16 x i16>*
  store <16 x i16> %7257, <16 x i16>* %7276, align 32
  %7277 = add nuw nsw i64 %7273, 1
  %7278 = add i64 %7274, -1
  %7279 = icmp eq i64 %7278, 0
  br i1 %7279, label %7280, label %7272, !llvm.loop !33

7280:                                             ; preds = %7272, %7266
  %7281 = phi i64 [ %7267, %7266 ], [ %7277, %7272 ]
  %7282 = icmp ult i64 %7269, 7
  br i1 %7282, label %7511, label %7283

7283:                                             ; preds = %7280, %7283
  %7284 = phi i64 [ %7308, %7283 ], [ %7281, %7280 ]
  %7285 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %22, i64 0, i64 %7284
  %7286 = bitcast <4 x i64>* %7285 to <16 x i16>*
  store <16 x i16> %7257, <16 x i16>* %7286, align 32
  %7287 = add nuw nsw i64 %7284, 1
  %7288 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %22, i64 0, i64 %7287
  %7289 = bitcast <4 x i64>* %7288 to <16 x i16>*
  store <16 x i16> %7257, <16 x i16>* %7289, align 32
  %7290 = add nuw nsw i64 %7284, 2
  %7291 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %22, i64 0, i64 %7290
  %7292 = bitcast <4 x i64>* %7291 to <16 x i16>*
  store <16 x i16> %7257, <16 x i16>* %7292, align 32
  %7293 = add nuw nsw i64 %7284, 3
  %7294 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %22, i64 0, i64 %7293
  %7295 = bitcast <4 x i64>* %7294 to <16 x i16>*
  store <16 x i16> %7257, <16 x i16>* %7295, align 32
  %7296 = add nuw nsw i64 %7284, 4
  %7297 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %22, i64 0, i64 %7296
  %7298 = bitcast <4 x i64>* %7297 to <16 x i16>*
  store <16 x i16> %7257, <16 x i16>* %7298, align 32
  %7299 = add nuw nsw i64 %7284, 5
  %7300 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %22, i64 0, i64 %7299
  %7301 = bitcast <4 x i64>* %7300 to <16 x i16>*
  store <16 x i16> %7257, <16 x i16>* %7301, align 32
  %7302 = add nuw nsw i64 %7284, 6
  %7303 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %22, i64 0, i64 %7302
  %7304 = bitcast <4 x i64>* %7303 to <16 x i16>*
  store <16 x i16> %7257, <16 x i16>* %7304, align 32
  %7305 = add nuw nsw i64 %7284, 7
  %7306 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %22, i64 0, i64 %7305
  %7307 = bitcast <4 x i64>* %7306 to <16 x i16>*
  store <16 x i16> %7257, <16 x i16>* %7307, align 32
  %7308 = add nuw nsw i64 %7284, 8
  %7309 = icmp eq i64 %7308, 64
  br i1 %7309, label %7511, label %7283

7310:                                             ; preds = %7258
  %7311 = trunc i32 %7260 to i16
  %7312 = insertelement <16 x i16> undef, i16 %7311, i32 0
  %7313 = and <16 x i16> %7312, <i16 63, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef>
  %7314 = lshr <16 x i16> %7313, <i16 1, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0>
  %7315 = shufflevector <16 x i16> %7314, <16 x i16> undef, <16 x i32> zeroinitializer
  %7316 = sext i32 %7261 to i64
  %7317 = getelementptr inbounds i16, i16* %5, i64 %7316
  %7318 = bitcast i16* %7317 to <16 x i16>*
  %7319 = load <16 x i16>, <16 x i16>* %7318, align 1
  %7320 = getelementptr inbounds i16, i16* %7317, i64 1
  %7321 = bitcast i16* %7320 to <16 x i16>*
  %7322 = load <16 x i16>, <16 x i16>* %7321, align 1
  %7323 = sub <16 x i16> %7322, %7319
  %7324 = shl <16 x i16> %7319, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %7325 = or <16 x i16> %7324, <i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16>
  %7326 = mul <16 x i16> %7323, %7315
  %7327 = add <16 x i16> %7326, %7325
  %7328 = lshr <16 x i16> %7327, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %7329 = trunc i32 %7261 to i16
  %7330 = add i16 %7329, 1
  %7331 = add i16 %7329, 2
  %7332 = add i16 %7329, 3
  %7333 = add i16 %7329, 4
  %7334 = add i16 %7329, 5
  %7335 = add i16 %7329, 6
  %7336 = add i16 %7329, 7
  %7337 = add i16 %7329, 8
  %7338 = add i16 %7329, 9
  %7339 = add i16 %7329, 10
  %7340 = add i16 %7329, 11
  %7341 = add i16 %7329, 12
  %7342 = add i16 %7329, 13
  %7343 = add i16 %7329, 14
  %7344 = add i16 %7329, 15
  %7345 = insertelement <16 x i16> undef, i16 %7329, i32 0
  %7346 = insertelement <16 x i16> %7345, i16 %7330, i32 1
  %7347 = insertelement <16 x i16> %7346, i16 %7331, i32 2
  %7348 = insertelement <16 x i16> %7347, i16 %7332, i32 3
  %7349 = insertelement <16 x i16> %7348, i16 %7333, i32 4
  %7350 = insertelement <16 x i16> %7349, i16 %7334, i32 5
  %7351 = insertelement <16 x i16> %7350, i16 %7335, i32 6
  %7352 = insertelement <16 x i16> %7351, i16 %7336, i32 7
  %7353 = insertelement <16 x i16> %7352, i16 %7337, i32 8
  %7354 = insertelement <16 x i16> %7353, i16 %7338, i32 9
  %7355 = insertelement <16 x i16> %7354, i16 %7339, i32 10
  %7356 = insertelement <16 x i16> %7355, i16 %7340, i32 11
  %7357 = insertelement <16 x i16> %7356, i16 %7341, i32 12
  %7358 = insertelement <16 x i16> %7357, i16 %7342, i32 13
  %7359 = insertelement <16 x i16> %7358, i16 %7343, i32 14
  %7360 = insertelement <16 x i16> %7359, i16 %7344, i32 15
  %7361 = icmp slt <16 x i16> %7360, <i16 79, i16 79, i16 79, i16 79, i16 79, i16 79, i16 79, i16 79, i16 79, i16 79, i16 79, i16 79, i16 79, i16 79, i16 79, i16 79>
  %7362 = select <16 x i1> %7361, <16 x i16> %7328, <16 x i16> %7257
  %7363 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %22, i64 0, i64 %7259
  %7364 = bitcast <4 x i64>* %7363 to <16 x i16>*
  store <16 x i16> %7362, <16 x i16>* %7364, align 32
  %7365 = add nsw i32 %7260, %8
  %7366 = add nuw nsw i64 %7259, 1
  %7367 = icmp eq i64 %7366, 64
  br i1 %7367, label %7511, label %7258

7368:                                             ; preds = %7250, %7467
  %7369 = phi i64 [ %7509, %7467 ], [ 0, %7250 ]
  %7370 = phi i32 [ %7508, %7467 ], [ %8, %7250 ]
  %7371 = ashr i32 %7370, 6
  %7372 = icmp slt i32 %7370, 5056
  br i1 %7372, label %7420, label %7373

7373:                                             ; preds = %7368
  %7374 = trunc i64 %7369 to i32
  %7375 = icmp slt i32 %7374, 64
  br i1 %7375, label %7376, label %7511

7376:                                             ; preds = %7373
  %7377 = and i64 %7369, 4294967295
  %7378 = sub nsw i64 0, %7369
  %7379 = sub nsw i64 63, %7369
  %7380 = and i64 %7378, 7
  %7381 = icmp eq i64 %7380, 0
  br i1 %7381, label %7390, label %7382

7382:                                             ; preds = %7376, %7382
  %7383 = phi i64 [ %7387, %7382 ], [ %7377, %7376 ]
  %7384 = phi i64 [ %7388, %7382 ], [ %7380, %7376 ]
  %7385 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %22, i64 0, i64 %7383
  %7386 = bitcast <4 x i64>* %7385 to <16 x i16>*
  store <16 x i16> %7257, <16 x i16>* %7386, align 32
  %7387 = add nuw nsw i64 %7383, 1
  %7388 = add i64 %7384, -1
  %7389 = icmp eq i64 %7388, 0
  br i1 %7389, label %7390, label %7382, !llvm.loop !34

7390:                                             ; preds = %7382, %7376
  %7391 = phi i64 [ %7377, %7376 ], [ %7387, %7382 ]
  %7392 = icmp ult i64 %7379, 7
  br i1 %7392, label %7511, label %7393

7393:                                             ; preds = %7390, %7393
  %7394 = phi i64 [ %7418, %7393 ], [ %7391, %7390 ]
  %7395 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %22, i64 0, i64 %7394
  %7396 = bitcast <4 x i64>* %7395 to <16 x i16>*
  store <16 x i16> %7257, <16 x i16>* %7396, align 32
  %7397 = add nuw nsw i64 %7394, 1
  %7398 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %22, i64 0, i64 %7397
  %7399 = bitcast <4 x i64>* %7398 to <16 x i16>*
  store <16 x i16> %7257, <16 x i16>* %7399, align 32
  %7400 = add nuw nsw i64 %7394, 2
  %7401 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %22, i64 0, i64 %7400
  %7402 = bitcast <4 x i64>* %7401 to <16 x i16>*
  store <16 x i16> %7257, <16 x i16>* %7402, align 32
  %7403 = add nuw nsw i64 %7394, 3
  %7404 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %22, i64 0, i64 %7403
  %7405 = bitcast <4 x i64>* %7404 to <16 x i16>*
  store <16 x i16> %7257, <16 x i16>* %7405, align 32
  %7406 = add nuw nsw i64 %7394, 4
  %7407 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %22, i64 0, i64 %7406
  %7408 = bitcast <4 x i64>* %7407 to <16 x i16>*
  store <16 x i16> %7257, <16 x i16>* %7408, align 32
  %7409 = add nuw nsw i64 %7394, 5
  %7410 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %22, i64 0, i64 %7409
  %7411 = bitcast <4 x i64>* %7410 to <16 x i16>*
  store <16 x i16> %7257, <16 x i16>* %7411, align 32
  %7412 = add nuw nsw i64 %7394, 6
  %7413 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %22, i64 0, i64 %7412
  %7414 = bitcast <4 x i64>* %7413 to <16 x i16>*
  store <16 x i16> %7257, <16 x i16>* %7414, align 32
  %7415 = add nuw nsw i64 %7394, 7
  %7416 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %22, i64 0, i64 %7415
  %7417 = bitcast <4 x i64>* %7416 to <16 x i16>*
  store <16 x i16> %7257, <16 x i16>* %7417, align 32
  %7418 = add nuw nsw i64 %7394, 8
  %7419 = icmp eq i64 %7418, 64
  br i1 %7419, label %7511, label %7393

7420:                                             ; preds = %7368
  %7421 = insertelement <8 x i32> undef, i32 %7370, i32 0
  %7422 = and <8 x i32> %7421, <i32 63, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %7423 = lshr <8 x i32> %7422, <i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>
  %7424 = shufflevector <8 x i32> %7423, <8 x i32> undef, <8 x i32> zeroinitializer
  %7425 = sext i32 %7371 to i64
  %7426 = getelementptr inbounds i16, i16* %5, i64 %7425
  %7427 = bitcast i16* %7426 to <8 x i16>*
  %7428 = load <8 x i16>, <8 x i16>* %7427, align 1
  %7429 = zext <8 x i16> %7428 to <8 x i32>
  %7430 = getelementptr inbounds i16, i16* %7426, i64 1
  %7431 = bitcast i16* %7430 to <8 x i16>*
  %7432 = load <8 x i16>, <8 x i16>* %7431, align 1
  %7433 = zext <8 x i16> %7432 to <8 x i32>
  %7434 = sub nsw <8 x i32> %7433, %7429
  %7435 = shl nuw nsw <8 x i32> %7429, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %7436 = or <8 x i32> %7435, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %7437 = mul <8 x i32> %7434, %7424
  %7438 = add <8 x i32> %7437, %7436
  %7439 = lshr <8 x i32> %7438, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %7440 = bitcast <8 x i32> %7439 to <4 x i64>
  %7441 = shufflevector <4 x i64> %7440, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %7442 = shufflevector <2 x i64> %7441, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %7443 = bitcast <4 x i64> %7442 to <8 x i32>
  %7444 = tail call <16 x i16> @llvm.x86.avx2.packusdw(<8 x i32> %7439, <8 x i32> %7443) #8
  %7445 = bitcast <16 x i16> %7444 to <4 x i64>
  %7446 = icmp slt i32 %7370, 4544
  br i1 %7446, label %7447, label %7467

7447:                                             ; preds = %7420
  %7448 = getelementptr inbounds i16, i16* %7426, i64 8
  %7449 = bitcast i16* %7448 to <8 x i16>*
  %7450 = load <8 x i16>, <8 x i16>* %7449, align 1
  %7451 = zext <8 x i16> %7450 to <8 x i32>
  %7452 = getelementptr inbounds i16, i16* %7426, i64 9
  %7453 = bitcast i16* %7452 to <8 x i16>*
  %7454 = load <8 x i16>, <8 x i16>* %7453, align 1
  %7455 = zext <8 x i16> %7454 to <8 x i32>
  %7456 = sub nsw <8 x i32> %7455, %7451
  %7457 = shl nuw nsw <8 x i32> %7451, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %7458 = or <8 x i32> %7457, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %7459 = mul <8 x i32> %7456, %7424
  %7460 = add <8 x i32> %7459, %7458
  %7461 = lshr <8 x i32> %7460, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %7462 = bitcast <8 x i32> %7461 to <4 x i64>
  %7463 = shufflevector <4 x i64> %7462, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %7464 = shufflevector <2 x i64> %7463, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %7465 = bitcast <4 x i64> %7464 to <8 x i32>
  %7466 = tail call <16 x i16> @llvm.x86.avx2.packusdw(<8 x i32> %7461, <8 x i32> %7465) #8
  br label %7467

7467:                                             ; preds = %7447, %7420
  %7468 = phi <16 x i16> [ %7466, %7447 ], [ %7257, %7420 ]
  %7469 = bitcast <16 x i16> %7468 to <4 x i64>
  %7470 = shufflevector <4 x i64> %7445, <4 x i64> %7469, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %7471 = trunc i32 %7371 to i16
  %7472 = add i16 %7471, 1
  %7473 = add i16 %7471, 2
  %7474 = add i16 %7471, 3
  %7475 = add i16 %7471, 4
  %7476 = add i16 %7471, 5
  %7477 = add i16 %7471, 6
  %7478 = add i16 %7471, 7
  %7479 = add i16 %7471, 8
  %7480 = add i16 %7471, 9
  %7481 = add i16 %7471, 10
  %7482 = add i16 %7471, 11
  %7483 = add i16 %7471, 12
  %7484 = add i16 %7471, 13
  %7485 = add i16 %7471, 14
  %7486 = add i16 %7471, 15
  %7487 = insertelement <16 x i16> undef, i16 %7471, i32 0
  %7488 = insertelement <16 x i16> %7487, i16 %7472, i32 1
  %7489 = insertelement <16 x i16> %7488, i16 %7473, i32 2
  %7490 = insertelement <16 x i16> %7489, i16 %7474, i32 3
  %7491 = insertelement <16 x i16> %7490, i16 %7475, i32 4
  %7492 = insertelement <16 x i16> %7491, i16 %7476, i32 5
  %7493 = insertelement <16 x i16> %7492, i16 %7477, i32 6
  %7494 = insertelement <16 x i16> %7493, i16 %7478, i32 7
  %7495 = insertelement <16 x i16> %7494, i16 %7479, i32 8
  %7496 = insertelement <16 x i16> %7495, i16 %7480, i32 9
  %7497 = insertelement <16 x i16> %7496, i16 %7481, i32 10
  %7498 = insertelement <16 x i16> %7497, i16 %7482, i32 11
  %7499 = insertelement <16 x i16> %7498, i16 %7483, i32 12
  %7500 = insertelement <16 x i16> %7499, i16 %7484, i32 13
  %7501 = insertelement <16 x i16> %7500, i16 %7485, i32 14
  %7502 = insertelement <16 x i16> %7501, i16 %7486, i32 15
  %7503 = icmp slt <16 x i16> %7502, <i16 79, i16 79, i16 79, i16 79, i16 79, i16 79, i16 79, i16 79, i16 79, i16 79, i16 79, i16 79, i16 79, i16 79, i16 79, i16 79>
  %7504 = bitcast <4 x i64> %7470 to <16 x i16>
  %7505 = select <16 x i1> %7503, <16 x i16> %7504, <16 x i16> %7257
  %7506 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %22, i64 0, i64 %7369
  %7507 = bitcast <4 x i64>* %7506 to <16 x i16>*
  store <16 x i16> %7505, <16 x i16>* %7507, align 32
  %7508 = add nsw i32 %7370, %8
  %7509 = add nuw nsw i64 %7369, 1
  %7510 = icmp eq i64 %7509, 64
  br i1 %7510, label %7511, label %7368

7511:                                             ; preds = %7467, %7390, %7393, %7310, %7280, %7283, %7373, %7263
  %7512 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %23, i64 0, i64 8
  %7513 = bitcast <4 x i64>* %7512 to <8 x i32>*
  %7514 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %23, i64 0, i64 9
  %7515 = bitcast <4 x i64>* %7514 to <8 x i32>*
  %7516 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %23, i64 0, i64 10
  %7517 = bitcast <4 x i64>* %7516 to <8 x i32>*
  %7518 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %23, i64 0, i64 11
  %7519 = bitcast <4 x i64>* %7518 to <8 x i32>*
  %7520 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %23, i64 0, i64 12
  %7521 = bitcast <4 x i64>* %7520 to <8 x i32>*
  %7522 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %23, i64 0, i64 13
  %7523 = bitcast <4 x i64>* %7522 to <8 x i32>*
  %7524 = shl nsw i64 %1, 1
  %7525 = mul nsw i64 %1, 3
  %7526 = shl nsw i64 %1, 2
  %7527 = mul nsw i64 %1, 5
  %7528 = mul nsw i64 %1, 6
  %7529 = mul nsw i64 %1, 7
  %7530 = shl nsw i64 %1, 3
  %7531 = mul nsw i64 %1, 9
  %7532 = mul nsw i64 %1, 10
  %7533 = mul nsw i64 %1, 11
  %7534 = mul nsw i64 %1, 12
  %7535 = mul nsw i64 %1, 13
  %7536 = mul nsw i64 %1, 14
  %7537 = mul nsw i64 %1, 15
  br label %7538

7538:                                             ; preds = %7538, %7511
  %7539 = phi i64 [ 0, %7511 ], [ %7781, %7538 ]
  %7540 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %22, i64 0, i64 %7539
  %7541 = bitcast <4 x i64>* %7540 to <16 x i16>*
  %7542 = load <16 x i16>, <16 x i16>* %7541, align 32
  %7543 = getelementptr inbounds <4 x i64>, <4 x i64>* %7540, i64 1
  %7544 = bitcast <4 x i64>* %7543 to <16 x i16>*
  %7545 = load <16 x i16>, <16 x i16>* %7544, align 32
  %7546 = shufflevector <16 x i16> %7542, <16 x i16> %7545, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %7547 = getelementptr inbounds <4 x i64>, <4 x i64>* %7540, i64 2
  %7548 = bitcast <4 x i64>* %7547 to <16 x i16>*
  %7549 = load <16 x i16>, <16 x i16>* %7548, align 32
  %7550 = getelementptr inbounds <4 x i64>, <4 x i64>* %7540, i64 3
  %7551 = bitcast <4 x i64>* %7550 to <16 x i16>*
  %7552 = load <16 x i16>, <16 x i16>* %7551, align 32
  %7553 = shufflevector <16 x i16> %7549, <16 x i16> %7552, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %7554 = getelementptr inbounds <4 x i64>, <4 x i64>* %7540, i64 4
  %7555 = bitcast <4 x i64>* %7554 to <16 x i16>*
  %7556 = load <16 x i16>, <16 x i16>* %7555, align 32
  %7557 = getelementptr inbounds <4 x i64>, <4 x i64>* %7540, i64 5
  %7558 = bitcast <4 x i64>* %7557 to <16 x i16>*
  %7559 = load <16 x i16>, <16 x i16>* %7558, align 32
  %7560 = shufflevector <16 x i16> %7556, <16 x i16> %7559, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %7561 = getelementptr inbounds <4 x i64>, <4 x i64>* %7540, i64 6
  %7562 = bitcast <4 x i64>* %7561 to <16 x i16>*
  %7563 = load <16 x i16>, <16 x i16>* %7562, align 32
  %7564 = getelementptr inbounds <4 x i64>, <4 x i64>* %7540, i64 7
  %7565 = bitcast <4 x i64>* %7564 to <16 x i16>*
  %7566 = load <16 x i16>, <16 x i16>* %7565, align 32
  %7567 = shufflevector <16 x i16> %7563, <16 x i16> %7566, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %7568 = bitcast <16 x i16> %7546 to <8 x i32>
  %7569 = bitcast <16 x i16> %7553 to <8 x i32>
  %7570 = shufflevector <8 x i32> %7568, <8 x i32> %7569, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %7571 = bitcast <8 x i32> %7570 to <4 x i64>
  %7572 = bitcast <16 x i16> %7560 to <8 x i32>
  %7573 = bitcast <16 x i16> %7567 to <8 x i32>
  %7574 = shufflevector <8 x i32> %7572, <8 x i32> %7573, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %7575 = bitcast <8 x i32> %7574 to <4 x i64>
  %7576 = shufflevector <4 x i64> %7571, <4 x i64> %7575, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %7577 = shufflevector <4 x i64> %7571, <4 x i64> %7575, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %7578 = shufflevector <8 x i32> %7568, <8 x i32> %7569, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %7579 = bitcast <8 x i32> %7578 to <4 x i64>
  %7580 = shufflevector <8 x i32> %7572, <8 x i32> %7573, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %7581 = bitcast <8 x i32> %7580 to <4 x i64>
  %7582 = shufflevector <4 x i64> %7579, <4 x i64> %7581, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %7583 = shufflevector <4 x i64> %7579, <4 x i64> %7581, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %7584 = shufflevector <16 x i16> %7542, <16 x i16> %7545, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %7585 = shufflevector <16 x i16> %7549, <16 x i16> %7552, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %7586 = shufflevector <16 x i16> %7556, <16 x i16> %7559, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %7587 = shufflevector <16 x i16> %7563, <16 x i16> %7566, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %7588 = bitcast <16 x i16> %7584 to <8 x i32>
  %7589 = bitcast <16 x i16> %7585 to <8 x i32>
  %7590 = shufflevector <8 x i32> %7588, <8 x i32> %7589, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %7591 = bitcast <8 x i32> %7590 to <4 x i64>
  %7592 = bitcast <16 x i16> %7586 to <8 x i32>
  %7593 = bitcast <16 x i16> %7587 to <8 x i32>
  %7594 = shufflevector <8 x i32> %7592, <8 x i32> %7593, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %7595 = bitcast <8 x i32> %7594 to <4 x i64>
  %7596 = shufflevector <4 x i64> %7591, <4 x i64> %7595, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %7597 = shufflevector <4 x i64> %7591, <4 x i64> %7595, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %7598 = shufflevector <8 x i32> %7588, <8 x i32> %7589, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %7599 = bitcast <8 x i32> %7598 to <4 x i64>
  %7600 = shufflevector <8 x i32> %7592, <8 x i32> %7593, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %7601 = bitcast <8 x i32> %7600 to <4 x i64>
  %7602 = shufflevector <4 x i64> %7599, <4 x i64> %7601, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %7603 = shufflevector <4 x i64> %7599, <4 x i64> %7601, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %7604 = getelementptr inbounds <4 x i64>, <4 x i64>* %7540, i64 8
  %7605 = bitcast <4 x i64>* %7604 to <16 x i16>*
  %7606 = load <16 x i16>, <16 x i16>* %7605, align 32
  %7607 = getelementptr inbounds <4 x i64>, <4 x i64>* %7540, i64 9
  %7608 = bitcast <4 x i64>* %7607 to <16 x i16>*
  %7609 = load <16 x i16>, <16 x i16>* %7608, align 32
  %7610 = shufflevector <16 x i16> %7606, <16 x i16> %7609, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %7611 = getelementptr inbounds <4 x i64>, <4 x i64>* %7540, i64 10
  %7612 = bitcast <4 x i64>* %7611 to <16 x i16>*
  %7613 = load <16 x i16>, <16 x i16>* %7612, align 32
  %7614 = getelementptr inbounds <4 x i64>, <4 x i64>* %7540, i64 11
  %7615 = bitcast <4 x i64>* %7614 to <16 x i16>*
  %7616 = load <16 x i16>, <16 x i16>* %7615, align 32
  %7617 = shufflevector <16 x i16> %7613, <16 x i16> %7616, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %7618 = getelementptr inbounds <4 x i64>, <4 x i64>* %7540, i64 12
  %7619 = bitcast <4 x i64>* %7618 to <16 x i16>*
  %7620 = load <16 x i16>, <16 x i16>* %7619, align 32
  %7621 = getelementptr inbounds <4 x i64>, <4 x i64>* %7540, i64 13
  %7622 = bitcast <4 x i64>* %7621 to <16 x i16>*
  %7623 = load <16 x i16>, <16 x i16>* %7622, align 32
  %7624 = shufflevector <16 x i16> %7620, <16 x i16> %7623, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %7625 = getelementptr inbounds <4 x i64>, <4 x i64>* %7540, i64 14
  %7626 = bitcast <4 x i64>* %7625 to <16 x i16>*
  %7627 = load <16 x i16>, <16 x i16>* %7626, align 32
  %7628 = getelementptr inbounds <4 x i64>, <4 x i64>* %7540, i64 15
  %7629 = bitcast <4 x i64>* %7628 to <16 x i16>*
  %7630 = load <16 x i16>, <16 x i16>* %7629, align 32
  %7631 = shufflevector <16 x i16> %7627, <16 x i16> %7630, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %7632 = bitcast <16 x i16> %7610 to <8 x i32>
  %7633 = bitcast <16 x i16> %7617 to <8 x i32>
  %7634 = shufflevector <8 x i32> %7632, <8 x i32> %7633, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %7635 = bitcast <8 x i32> %7634 to <4 x i64>
  %7636 = bitcast <16 x i16> %7624 to <8 x i32>
  %7637 = bitcast <16 x i16> %7631 to <8 x i32>
  %7638 = shufflevector <8 x i32> %7636, <8 x i32> %7637, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %7639 = bitcast <8 x i32> %7638 to <4 x i64>
  %7640 = shufflevector <4 x i64> %7635, <4 x i64> %7639, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %7641 = shufflevector <4 x i64> %7635, <4 x i64> %7639, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %7642 = shufflevector <8 x i32> %7632, <8 x i32> %7633, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %7643 = bitcast <8 x i32> %7642 to <4 x i64>
  %7644 = shufflevector <8 x i32> %7636, <8 x i32> %7637, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %7645 = bitcast <8 x i32> %7644 to <4 x i64>
  %7646 = shufflevector <4 x i64> %7643, <4 x i64> %7645, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %7647 = shufflevector <4 x i64> %7643, <4 x i64> %7645, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %7648 = shufflevector <16 x i16> %7606, <16 x i16> %7609, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %7649 = shufflevector <16 x i16> %7613, <16 x i16> %7616, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %7650 = shufflevector <16 x i16> %7620, <16 x i16> %7623, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %7651 = shufflevector <16 x i16> %7627, <16 x i16> %7630, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %7652 = bitcast <16 x i16> %7648 to <8 x i32>
  %7653 = bitcast <16 x i16> %7649 to <8 x i32>
  %7654 = shufflevector <8 x i32> %7652, <8 x i32> %7653, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %7655 = bitcast <8 x i32> %7654 to <4 x i64>
  %7656 = bitcast <16 x i16> %7650 to <8 x i32>
  %7657 = bitcast <16 x i16> %7651 to <8 x i32>
  %7658 = shufflevector <8 x i32> %7656, <8 x i32> %7657, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %7659 = bitcast <8 x i32> %7658 to <4 x i64>
  %7660 = shufflevector <4 x i64> %7655, <4 x i64> %7659, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %7661 = shufflevector <4 x i64> %7655, <4 x i64> %7659, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %7662 = shufflevector <8 x i32> %7652, <8 x i32> %7653, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %7663 = bitcast <8 x i32> %7662 to <4 x i64>
  %7664 = shufflevector <8 x i32> %7656, <8 x i32> %7657, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %7665 = bitcast <8 x i32> %7664 to <4 x i64>
  %7666 = shufflevector <4 x i64> %7663, <4 x i64> %7665, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %7667 = shufflevector <4 x i64> %7663, <4 x i64> %7665, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %7668 = bitcast <4 x i64> %7576 to <8 x i32>
  %7669 = shufflevector <4 x i64> %7640, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %7670 = bitcast <2 x i64> %7669 to <4 x i32>
  %7671 = shufflevector <4 x i32> %7670, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %7672 = shufflevector <8 x i32> %7668, <8 x i32> %7671, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %7673 = bitcast <4 x i64> %7640 to <8 x i32>
  %7674 = shufflevector <4 x i64> %7576, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %7675 = bitcast <2 x i64> %7674 to <4 x i32>
  %7676 = shufflevector <4 x i32> %7675, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %7677 = shufflevector <8 x i32> %7676, <8 x i32> %7673, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %7677, <8 x i32>* %7513, align 32
  %7678 = bitcast <4 x i64> %7577 to <8 x i32>
  %7679 = shufflevector <4 x i64> %7641, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %7680 = bitcast <2 x i64> %7679 to <4 x i32>
  %7681 = shufflevector <4 x i32> %7680, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %7682 = shufflevector <8 x i32> %7678, <8 x i32> %7681, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %7683 = bitcast <4 x i64> %7641 to <8 x i32>
  %7684 = shufflevector <4 x i64> %7577, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %7685 = bitcast <2 x i64> %7684 to <4 x i32>
  %7686 = shufflevector <4 x i32> %7685, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %7687 = shufflevector <8 x i32> %7686, <8 x i32> %7683, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  %7688 = bitcast <4 x i64> %7582 to <8 x i32>
  %7689 = shufflevector <4 x i64> %7646, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %7690 = bitcast <2 x i64> %7689 to <4 x i32>
  %7691 = shufflevector <4 x i32> %7690, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %7692 = shufflevector <8 x i32> %7688, <8 x i32> %7691, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %7693 = bitcast <4 x i64> %7646 to <8 x i32>
  %7694 = shufflevector <4 x i64> %7582, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %7695 = bitcast <2 x i64> %7694 to <4 x i32>
  %7696 = shufflevector <4 x i32> %7695, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %7697 = shufflevector <8 x i32> %7696, <8 x i32> %7693, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  %7698 = bitcast <4 x i64> %7583 to <8 x i32>
  %7699 = shufflevector <4 x i64> %7647, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %7700 = bitcast <2 x i64> %7699 to <4 x i32>
  %7701 = shufflevector <4 x i32> %7700, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %7702 = shufflevector <8 x i32> %7698, <8 x i32> %7701, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %7703 = bitcast <4 x i64> %7647 to <8 x i32>
  %7704 = shufflevector <4 x i64> %7583, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %7705 = bitcast <2 x i64> %7704 to <4 x i32>
  %7706 = shufflevector <4 x i32> %7705, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %7707 = shufflevector <8 x i32> %7706, <8 x i32> %7703, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  %7708 = bitcast <4 x i64> %7596 to <8 x i32>
  %7709 = shufflevector <4 x i64> %7660, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %7710 = bitcast <2 x i64> %7709 to <4 x i32>
  %7711 = shufflevector <4 x i32> %7710, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %7712 = shufflevector <8 x i32> %7708, <8 x i32> %7711, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %7713 = bitcast <4 x i64> %7660 to <8 x i32>
  %7714 = shufflevector <4 x i64> %7596, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %7715 = bitcast <2 x i64> %7714 to <4 x i32>
  %7716 = shufflevector <4 x i32> %7715, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %7717 = shufflevector <8 x i32> %7716, <8 x i32> %7713, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  %7718 = bitcast <4 x i64> %7597 to <8 x i32>
  %7719 = shufflevector <4 x i64> %7661, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %7720 = bitcast <2 x i64> %7719 to <4 x i32>
  %7721 = shufflevector <4 x i32> %7720, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %7722 = shufflevector <8 x i32> %7718, <8 x i32> %7721, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %7723 = bitcast <4 x i64> %7661 to <8 x i32>
  %7724 = shufflevector <4 x i64> %7597, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %7725 = bitcast <2 x i64> %7724 to <4 x i32>
  %7726 = shufflevector <4 x i32> %7725, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %7727 = shufflevector <8 x i32> %7726, <8 x i32> %7723, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  %7728 = bitcast <4 x i64> %7602 to <8 x i32>
  %7729 = shufflevector <4 x i64> %7666, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %7730 = bitcast <2 x i64> %7729 to <4 x i32>
  %7731 = shufflevector <4 x i32> %7730, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %7732 = shufflevector <8 x i32> %7728, <8 x i32> %7731, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %7733 = bitcast <4 x i64> %7666 to <8 x i32>
  %7734 = shufflevector <4 x i64> %7602, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %7735 = bitcast <2 x i64> %7734 to <4 x i32>
  %7736 = shufflevector <4 x i32> %7735, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %7737 = shufflevector <8 x i32> %7736, <8 x i32> %7733, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  %7738 = bitcast <4 x i64> %7603 to <8 x i32>
  %7739 = shufflevector <4 x i64> %7667, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %7740 = bitcast <2 x i64> %7739 to <4 x i32>
  %7741 = shufflevector <4 x i32> %7740, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %7742 = shufflevector <8 x i32> %7738, <8 x i32> %7741, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %7743 = bitcast <4 x i64> %7667 to <8 x i32>
  %7744 = shufflevector <4 x i64> %7603, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %7745 = bitcast <2 x i64> %7744 to <4 x i32>
  %7746 = shufflevector <4 x i32> %7745, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %7747 = shufflevector <8 x i32> %7746, <8 x i32> %7743, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  %7748 = getelementptr inbounds i16, i16* %0, i64 %7539
  %7749 = bitcast i16* %7748 to <8 x i32>*
  store <8 x i32> %7672, <8 x i32>* %7749, align 1
  %7750 = getelementptr inbounds i16, i16* %7748, i64 %1
  %7751 = bitcast i16* %7750 to <8 x i32>*
  store <8 x i32> %7682, <8 x i32>* %7751, align 1
  %7752 = getelementptr inbounds i16, i16* %7748, i64 %7524
  %7753 = bitcast i16* %7752 to <8 x i32>*
  store <8 x i32> %7692, <8 x i32>* %7753, align 1
  %7754 = getelementptr inbounds i16, i16* %7748, i64 %7525
  %7755 = bitcast i16* %7754 to <8 x i32>*
  store <8 x i32> %7702, <8 x i32>* %7755, align 1
  %7756 = getelementptr inbounds i16, i16* %7748, i64 %7526
  %7757 = bitcast i16* %7756 to <8 x i32>*
  store <8 x i32> %7712, <8 x i32>* %7757, align 1
  %7758 = getelementptr inbounds i16, i16* %7748, i64 %7527
  %7759 = bitcast i16* %7758 to <8 x i32>*
  store <8 x i32> %7722, <8 x i32>* %7759, align 1
  %7760 = getelementptr inbounds i16, i16* %7748, i64 %7528
  %7761 = bitcast i16* %7760 to <8 x i32>*
  store <8 x i32> %7732, <8 x i32>* %7761, align 1
  %7762 = getelementptr inbounds i16, i16* %7748, i64 %7529
  %7763 = bitcast i16* %7762 to <8 x i32>*
  store <8 x i32> %7742, <8 x i32>* %7763, align 1
  %7764 = getelementptr inbounds i16, i16* %7748, i64 %7530
  %7765 = bitcast i16* %7764 to <4 x i64>*
  %7766 = load <4 x i64>, <4 x i64>* %7512, align 32
  store <4 x i64> %7766, <4 x i64>* %7765, align 1
  %7767 = getelementptr inbounds i16, i16* %7748, i64 %7531
  %7768 = bitcast i16* %7767 to <8 x i32>*
  store <8 x i32> %7687, <8 x i32>* %7768, align 1
  %7769 = getelementptr inbounds i16, i16* %7748, i64 %7532
  %7770 = bitcast i16* %7769 to <8 x i32>*
  store <8 x i32> %7697, <8 x i32>* %7770, align 1
  %7771 = getelementptr inbounds i16, i16* %7748, i64 %7533
  %7772 = bitcast i16* %7771 to <8 x i32>*
  store <8 x i32> %7707, <8 x i32>* %7772, align 1
  %7773 = getelementptr inbounds i16, i16* %7748, i64 %7534
  %7774 = bitcast i16* %7773 to <8 x i32>*
  store <8 x i32> %7717, <8 x i32>* %7774, align 1
  %7775 = getelementptr inbounds i16, i16* %7748, i64 %7535
  %7776 = bitcast i16* %7775 to <8 x i32>*
  store <8 x i32> %7727, <8 x i32>* %7776, align 1
  %7777 = getelementptr inbounds i16, i16* %7748, i64 %7536
  %7778 = bitcast i16* %7777 to <8 x i32>*
  store <8 x i32> %7737, <8 x i32>* %7778, align 1
  %7779 = getelementptr inbounds i16, i16* %7748, i64 %7537
  %7780 = bitcast i16* %7779 to <8 x i32>*
  store <8 x i32> %7747, <8 x i32>* %7780, align 1
  %7781 = add nuw nsw i64 %7539, 16
  %7782 = icmp ult i64 %7781, 64
  br i1 %7782, label %7538, label %7783

7783:                                             ; preds = %7538
  store <8 x i32> %7687, <8 x i32>* %7515, align 32
  store <8 x i32> %7697, <8 x i32>* %7517, align 32
  store <8 x i32> %7707, <8 x i32>* %7519, align 32
  store <8 x i32> %7717, <8 x i32>* %7521, align 32
  store <8 x i32> %7727, <8 x i32>* %7523, align 32
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %7252) #8
  call void @llvm.lifetime.end.p0i8(i64 2048, i8* nonnull %7251) #8
  br label %7784

7784:                                             ; preds = %4275, %4682, %5085, %4090, %2936, %3177, %3938, %4089, %2683, %6626, %7116, %7783, %6345, %5298, %5643, %6341, %6342, %5089, %231, %512, %857, %1491, %2677, %26
  ret void

7785:                                             ; preds = %50
  %7786 = getelementptr inbounds [4 x <2 x i64>], [4 x <2 x i64>]* %24, i64 0, i64 %54
  %7787 = bitcast <2 x i64>* %7786 to <8 x i16>*
  store <8 x i16> %36, <8 x i16>* %7787, align 16
  %7788 = add nuw nsw i64 %51, 2
  %7789 = icmp eq i64 %7788, 4
  br i1 %7789, label %231, label %7790

7790:                                             ; preds = %7785
  %7791 = getelementptr inbounds [4 x <2 x i64>], [4 x <2 x i64>]* %24, i64 0, i64 %7788
  %7792 = bitcast <2 x i64>* %7791 to <8 x i16>*
  store <8 x i16> %36, <8 x i16>* %7792, align 16
  %7793 = add nuw nsw i64 %51, 3
  %7794 = icmp eq i64 %7793, 4
  br i1 %7794, label %231, label %7795

7795:                                             ; preds = %7790
  %7796 = getelementptr inbounds [4 x <2 x i64>], [4 x <2 x i64>]* %24, i64 0, i64 %7793
  %7797 = bitcast <2 x i64>* %7796 to <8 x i16>*
  store <8 x i16> %36, <8 x i16>* %7797, align 16
  br label %231

7798:                                             ; preds = %155
  %7799 = getelementptr inbounds [4 x <2 x i64>], [4 x <2 x i64>]* %24, i64 0, i64 %159
  %7800 = bitcast <2 x i64>* %7799 to <8 x i16>*
  store <8 x i16> %36, <8 x i16>* %7800, align 16
  %7801 = add nuw nsw i64 %156, 2
  %7802 = icmp eq i64 %7801, 4
  br i1 %7802, label %231, label %7803

7803:                                             ; preds = %7798
  %7804 = getelementptr inbounds [4 x <2 x i64>], [4 x <2 x i64>]* %24, i64 0, i64 %7801
  %7805 = bitcast <2 x i64>* %7804 to <8 x i16>*
  store <8 x i16> %36, <8 x i16>* %7805, align 16
  %7806 = add nuw nsw i64 %156, 3
  %7807 = icmp eq i64 %7806, 4
  br i1 %7807, label %231, label %7808

7808:                                             ; preds = %7803
  %7809 = getelementptr inbounds [4 x <2 x i64>], [4 x <2 x i64>]* %24, i64 0, i64 %7806
  %7810 = bitcast <2 x i64>* %7809 to <8 x i16>*
  store <8 x i16> %36, <8 x i16>* %7810, align 16
  br label %231

7811:                                             ; preds = %288
  %7812 = getelementptr inbounds [8 x <2 x i64>], [8 x <2 x i64>]* %17, i64 0, i64 %292
  store <2 x i64> %289, <2 x i64>* %7812, align 16
  %7813 = add nuw nsw i64 %290, 2
  %7814 = icmp eq i64 %7813, 8
  br i1 %7814, label %512, label %7815

7815:                                             ; preds = %7811
  %7816 = getelementptr inbounds [8 x <2 x i64>], [8 x <2 x i64>]* %17, i64 0, i64 %7813
  store <2 x i64> %289, <2 x i64>* %7816, align 16
  %7817 = add nuw nsw i64 %290, 3
  %7818 = icmp eq i64 %7817, 8
  br i1 %7818, label %512, label %7819

7819:                                             ; preds = %7815
  %7820 = getelementptr inbounds [8 x <2 x i64>], [8 x <2 x i64>]* %17, i64 0, i64 %7817
  store <2 x i64> %289, <2 x i64>* %7820, align 16
  %7821 = add nuw nsw i64 %290, 4
  %7822 = icmp eq i64 %7821, 8
  br i1 %7822, label %512, label %7823

7823:                                             ; preds = %7819
  %7824 = getelementptr inbounds [8 x <2 x i64>], [8 x <2 x i64>]* %17, i64 0, i64 %7821
  store <2 x i64> %289, <2 x i64>* %7824, align 16
  %7825 = add nuw nsw i64 %290, 5
  %7826 = icmp eq i64 %7825, 8
  br i1 %7826, label %512, label %7827

7827:                                             ; preds = %7823
  %7828 = getelementptr inbounds [8 x <2 x i64>], [8 x <2 x i64>]* %17, i64 0, i64 %7825
  store <2 x i64> %289, <2 x i64>* %7828, align 16
  %7829 = add nuw nsw i64 %290, 6
  %7830 = icmp eq i64 %7829, 8
  br i1 %7830, label %512, label %7831

7831:                                             ; preds = %7827
  %7832 = getelementptr inbounds [8 x <2 x i64>], [8 x <2 x i64>]* %17, i64 0, i64 %7829
  store <2 x i64> %289, <2 x i64>* %7832, align 16
  %7833 = add nuw nsw i64 %290, 7
  %7834 = icmp eq i64 %7833, 8
  br i1 %7834, label %512, label %7835

7835:                                             ; preds = %7831
  %7836 = getelementptr inbounds [8 x <2 x i64>], [8 x <2 x i64>]* %17, i64 0, i64 %7833
  store <2 x i64> %289, <2 x i64>* %7836, align 16
  br label %512

7837:                                             ; preds = %398
  %7838 = getelementptr inbounds [8 x <2 x i64>], [8 x <2 x i64>]* %17, i64 0, i64 %402
  store <2 x i64> %399, <2 x i64>* %7838, align 16
  %7839 = add nuw nsw i64 %400, 2
  %7840 = icmp eq i64 %7839, 8
  br i1 %7840, label %512, label %7841

7841:                                             ; preds = %7837
  %7842 = getelementptr inbounds [8 x <2 x i64>], [8 x <2 x i64>]* %17, i64 0, i64 %7839
  store <2 x i64> %399, <2 x i64>* %7842, align 16
  %7843 = add nuw nsw i64 %400, 3
  %7844 = icmp eq i64 %7843, 8
  br i1 %7844, label %512, label %7845

7845:                                             ; preds = %7841
  %7846 = getelementptr inbounds [8 x <2 x i64>], [8 x <2 x i64>]* %17, i64 0, i64 %7843
  store <2 x i64> %399, <2 x i64>* %7846, align 16
  %7847 = add nuw nsw i64 %400, 4
  %7848 = icmp eq i64 %7847, 8
  br i1 %7848, label %512, label %7849

7849:                                             ; preds = %7845
  %7850 = getelementptr inbounds [8 x <2 x i64>], [8 x <2 x i64>]* %17, i64 0, i64 %7847
  store <2 x i64> %399, <2 x i64>* %7850, align 16
  %7851 = add nuw nsw i64 %400, 5
  %7852 = icmp eq i64 %7851, 8
  br i1 %7852, label %512, label %7853

7853:                                             ; preds = %7849
  %7854 = getelementptr inbounds [8 x <2 x i64>], [8 x <2 x i64>]* %17, i64 0, i64 %7851
  store <2 x i64> %399, <2 x i64>* %7854, align 16
  %7855 = add nuw nsw i64 %400, 6
  %7856 = icmp eq i64 %7855, 8
  br i1 %7856, label %512, label %7857

7857:                                             ; preds = %7853
  %7858 = getelementptr inbounds [8 x <2 x i64>], [8 x <2 x i64>]* %17, i64 0, i64 %7855
  store <2 x i64> %399, <2 x i64>* %7858, align 16
  %7859 = add nuw nsw i64 %400, 7
  %7860 = icmp eq i64 %7859, 8
  br i1 %7860, label %512, label %7861

7861:                                             ; preds = %7857
  %7862 = getelementptr inbounds [8 x <2 x i64>], [8 x <2 x i64>]* %17, i64 0, i64 %7859
  store <2 x i64> %399, <2 x i64>* %7862, align 16
  br label %512

7863:                                             ; preds = %2712
  %7864 = getelementptr inbounds [4 x <2 x i64>], [4 x <2 x i64>]* %24, i64 0, i64 %2716
  store <2 x i64> %2713, <2 x i64>* %7864, align 16
  %7865 = add nuw nsw i64 %2714, 2
  %7866 = icmp eq i64 %7865, 4
  br i1 %7866, label %2936, label %7867

7867:                                             ; preds = %7863
  %7868 = getelementptr inbounds [4 x <2 x i64>], [4 x <2 x i64>]* %24, i64 0, i64 %7865
  store <2 x i64> %2713, <2 x i64>* %7868, align 16
  %7869 = add nuw nsw i64 %2714, 3
  %7870 = icmp eq i64 %7869, 4
  br i1 %7870, label %2936, label %7871

7871:                                             ; preds = %7867
  %7872 = getelementptr inbounds [4 x <2 x i64>], [4 x <2 x i64>]* %24, i64 0, i64 %7869
  store <2 x i64> %2713, <2 x i64>* %7872, align 16
  br label %2936

7873:                                             ; preds = %2822
  %7874 = getelementptr inbounds [4 x <2 x i64>], [4 x <2 x i64>]* %24, i64 0, i64 %2826
  store <2 x i64> %2823, <2 x i64>* %7874, align 16
  %7875 = add nuw nsw i64 %2824, 2
  %7876 = icmp eq i64 %7875, 4
  br i1 %7876, label %2936, label %7877

7877:                                             ; preds = %7873
  %7878 = getelementptr inbounds [4 x <2 x i64>], [4 x <2 x i64>]* %24, i64 0, i64 %7875
  store <2 x i64> %2823, <2 x i64>* %7878, align 16
  %7879 = add nuw nsw i64 %2824, 3
  %7880 = icmp eq i64 %7879, 4
  br i1 %7880, label %2936, label %7881

7881:                                             ; preds = %7877
  %7882 = getelementptr inbounds [4 x <2 x i64>], [4 x <2 x i64>]* %24, i64 0, i64 %7879
  store <2 x i64> %2823, <2 x i64>* %7882, align 16
  br label %2936

7883:                                             ; preds = %3008
  %7884 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %13, i64 0, i64 %3012
  %7885 = bitcast <4 x i64>* %7884 to <16 x i16>*
  store <16 x i16> %2999, <16 x i16>* %7885, align 32
  %7886 = add nuw nsw i64 %3009, 2
  %7887 = icmp eq i64 %7886, 8
  br i1 %7887, label %3177, label %7888

7888:                                             ; preds = %7883
  %7889 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %13, i64 0, i64 %7886
  %7890 = bitcast <4 x i64>* %7889 to <16 x i16>*
  store <16 x i16> %2999, <16 x i16>* %7890, align 32
  %7891 = add nuw nsw i64 %3009, 3
  %7892 = icmp eq i64 %7891, 8
  br i1 %7892, label %3177, label %7893

7893:                                             ; preds = %7888
  %7894 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %13, i64 0, i64 %7891
  %7895 = bitcast <4 x i64>* %7894 to <16 x i16>*
  store <16 x i16> %2999, <16 x i16>* %7895, align 32
  %7896 = add nuw nsw i64 %3009, 4
  %7897 = icmp eq i64 %7896, 8
  br i1 %7897, label %3177, label %7898

7898:                                             ; preds = %7893
  %7899 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %13, i64 0, i64 %7896
  %7900 = bitcast <4 x i64>* %7899 to <16 x i16>*
  store <16 x i16> %2999, <16 x i16>* %7900, align 32
  %7901 = add nuw nsw i64 %3009, 5
  %7902 = icmp eq i64 %7901, 8
  br i1 %7902, label %3177, label %7903

7903:                                             ; preds = %7898
  %7904 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %13, i64 0, i64 %7901
  %7905 = bitcast <4 x i64>* %7904 to <16 x i16>*
  store <16 x i16> %2999, <16 x i16>* %7905, align 32
  %7906 = add nuw nsw i64 %3009, 6
  %7907 = icmp eq i64 %7906, 8
  br i1 %7907, label %3177, label %7908

7908:                                             ; preds = %7903
  %7909 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %13, i64 0, i64 %7906
  %7910 = bitcast <4 x i64>* %7909 to <16 x i16>*
  store <16 x i16> %2999, <16 x i16>* %7910, align 32
  %7911 = add nuw nsw i64 %3009, 7
  %7912 = icmp eq i64 %7911, 8
  br i1 %7912, label %3177, label %7913

7913:                                             ; preds = %7908
  %7914 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %13, i64 0, i64 %7911
  %7915 = bitcast <4 x i64>* %7914 to <16 x i16>*
  store <16 x i16> %2999, <16 x i16>* %7915, align 32
  br label %3177

7916:                                             ; preds = %3080
  %7917 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %13, i64 0, i64 %3084
  %7918 = bitcast <4 x i64>* %7917 to <16 x i16>*
  store <16 x i16> %2999, <16 x i16>* %7918, align 32
  %7919 = add nuw nsw i64 %3081, 2
  %7920 = icmp eq i64 %7919, 8
  br i1 %7920, label %3177, label %7921

7921:                                             ; preds = %7916
  %7922 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %13, i64 0, i64 %7919
  %7923 = bitcast <4 x i64>* %7922 to <16 x i16>*
  store <16 x i16> %2999, <16 x i16>* %7923, align 32
  %7924 = add nuw nsw i64 %3081, 3
  %7925 = icmp eq i64 %7924, 8
  br i1 %7925, label %3177, label %7926

7926:                                             ; preds = %7921
  %7927 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %13, i64 0, i64 %7924
  %7928 = bitcast <4 x i64>* %7927 to <16 x i16>*
  store <16 x i16> %2999, <16 x i16>* %7928, align 32
  %7929 = add nuw nsw i64 %3081, 4
  %7930 = icmp eq i64 %7929, 8
  br i1 %7930, label %3177, label %7931

7931:                                             ; preds = %7926
  %7932 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %13, i64 0, i64 %7929
  %7933 = bitcast <4 x i64>* %7932 to <16 x i16>*
  store <16 x i16> %2999, <16 x i16>* %7933, align 32
  %7934 = add nuw nsw i64 %3081, 5
  %7935 = icmp eq i64 %7934, 8
  br i1 %7935, label %3177, label %7936

7936:                                             ; preds = %7931
  %7937 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %13, i64 0, i64 %7934
  %7938 = bitcast <4 x i64>* %7937 to <16 x i16>*
  store <16 x i16> %2999, <16 x i16>* %7938, align 32
  %7939 = add nuw nsw i64 %3081, 6
  %7940 = icmp eq i64 %7939, 8
  br i1 %7940, label %3177, label %7941

7941:                                             ; preds = %7936
  %7942 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %13, i64 0, i64 %7939
  %7943 = bitcast <4 x i64>* %7942 to <16 x i16>*
  store <16 x i16> %2999, <16 x i16>* %7943, align 32
  %7944 = add nuw nsw i64 %3081, 7
  %7945 = icmp eq i64 %7944, 8
  br i1 %7945, label %3177, label %7946

7946:                                             ; preds = %7941
  %7947 = getelementptr inbounds [8 x <4 x i64>], [8 x <4 x i64>]* %13, i64 0, i64 %7944
  %7948 = bitcast <4 x i64>* %7947 to <16 x i16>*
  store <16 x i16> %2999, <16 x i16>* %7948, align 32
  br label %3177

7949:                                             ; preds = %4106
  %7950 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %12, i64 0, i64 %4110
  %7951 = bitcast <4 x i64>* %7950 to <16 x i16>*
  store <16 x i16> %4097, <16 x i16>* %7951, align 32
  %7952 = add nuw nsw i64 %4107, 2
  %7953 = icmp eq i64 %7952, 4
  br i1 %7953, label %4275, label %7954

7954:                                             ; preds = %7949
  %7955 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %12, i64 0, i64 %7952
  %7956 = bitcast <4 x i64>* %7955 to <16 x i16>*
  store <16 x i16> %4097, <16 x i16>* %7956, align 32
  %7957 = add nuw nsw i64 %4107, 3
  %7958 = icmp eq i64 %7957, 4
  br i1 %7958, label %4275, label %7959

7959:                                             ; preds = %7954
  %7960 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %12, i64 0, i64 %7957
  %7961 = bitcast <4 x i64>* %7960 to <16 x i16>*
  store <16 x i16> %4097, <16 x i16>* %7961, align 32
  br label %4275

7962:                                             ; preds = %4178
  %7963 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %12, i64 0, i64 %4182
  %7964 = bitcast <4 x i64>* %7963 to <16 x i16>*
  store <16 x i16> %4097, <16 x i16>* %7964, align 32
  %7965 = add nuw nsw i64 %4179, 2
  %7966 = icmp eq i64 %7965, 4
  br i1 %7966, label %4275, label %7967

7967:                                             ; preds = %7962
  %7968 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %12, i64 0, i64 %7965
  %7969 = bitcast <4 x i64>* %7968 to <16 x i16>*
  store <16 x i16> %4097, <16 x i16>* %7969, align 32
  %7970 = add nuw nsw i64 %4179, 3
  %7971 = icmp eq i64 %7970, 4
  br i1 %7971, label %4275, label %7972

7972:                                             ; preds = %7967
  %7973 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %12, i64 0, i64 %7970
  %7974 = bitcast <4 x i64>* %7973 to <16 x i16>*
  store <16 x i16> %4097, <16 x i16>* %7974, align 32
  br label %4275

7975:                                             ; preds = %4393
  %7976 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %23, i64 0, i64 %4400
  %7977 = bitcast <4 x i64>* %7976 to <16 x i16>*
  store <16 x i16> %4384, <16 x i16>* %7977, align 32
  %7978 = add nuw nsw i64 %4394, 9
  %7979 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %23, i64 0, i64 %7978
  %7980 = bitcast <4 x i64>* %7979 to <16 x i16>*
  store <16 x i16> %4384, <16 x i16>* %7980, align 32
  %7981 = add nuw nsw i64 %4394, 2
  %7982 = icmp eq i64 %7981, 8
  br i1 %7982, label %4682, label %7983

7983:                                             ; preds = %7975
  %7984 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %23, i64 0, i64 %7981
  %7985 = bitcast <4 x i64>* %7984 to <16 x i16>*
  store <16 x i16> %4384, <16 x i16>* %7985, align 32
  %7986 = add nuw nsw i64 %4394, 10
  %7987 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %23, i64 0, i64 %7986
  %7988 = bitcast <4 x i64>* %7987 to <16 x i16>*
  store <16 x i16> %4384, <16 x i16>* %7988, align 32
  %7989 = add nuw nsw i64 %4394, 3
  %7990 = icmp eq i64 %7989, 8
  br i1 %7990, label %4682, label %7991

7991:                                             ; preds = %7983
  %7992 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %23, i64 0, i64 %7989
  %7993 = bitcast <4 x i64>* %7992 to <16 x i16>*
  store <16 x i16> %4384, <16 x i16>* %7993, align 32
  %7994 = add nuw nsw i64 %4394, 11
  %7995 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %23, i64 0, i64 %7994
  %7996 = bitcast <4 x i64>* %7995 to <16 x i16>*
  store <16 x i16> %4384, <16 x i16>* %7996, align 32
  %7997 = add nuw nsw i64 %4394, 4
  %7998 = icmp eq i64 %7997, 8
  br i1 %7998, label %4682, label %7999

7999:                                             ; preds = %7991
  %8000 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %23, i64 0, i64 %7997
  %8001 = bitcast <4 x i64>* %8000 to <16 x i16>*
  store <16 x i16> %4384, <16 x i16>* %8001, align 32
  %8002 = add nuw nsw i64 %4394, 12
  %8003 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %23, i64 0, i64 %8002
  %8004 = bitcast <4 x i64>* %8003 to <16 x i16>*
  store <16 x i16> %4384, <16 x i16>* %8004, align 32
  %8005 = add nuw nsw i64 %4394, 5
  %8006 = icmp eq i64 %8005, 8
  br i1 %8006, label %4682, label %8007

8007:                                             ; preds = %7999
  %8008 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %23, i64 0, i64 %8005
  %8009 = bitcast <4 x i64>* %8008 to <16 x i16>*
  store <16 x i16> %4384, <16 x i16>* %8009, align 32
  %8010 = add nuw nsw i64 %4394, 13
  %8011 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %23, i64 0, i64 %8010
  %8012 = bitcast <4 x i64>* %8011 to <16 x i16>*
  store <16 x i16> %4384, <16 x i16>* %8012, align 32
  %8013 = add nuw nsw i64 %4394, 6
  %8014 = icmp eq i64 %8013, 8
  br i1 %8014, label %4682, label %8015

8015:                                             ; preds = %8007
  %8016 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %23, i64 0, i64 %8013
  %8017 = bitcast <4 x i64>* %8016 to <16 x i16>*
  store <16 x i16> %4384, <16 x i16>* %8017, align 32
  %8018 = add nuw nsw i64 %4394, 14
  %8019 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %23, i64 0, i64 %8018
  %8020 = bitcast <4 x i64>* %8019 to <16 x i16>*
  store <16 x i16> %4384, <16 x i16>* %8020, align 32
  %8021 = add nuw nsw i64 %4394, 7
  %8022 = icmp eq i64 %8021, 8
  br i1 %8022, label %4682, label %8023

8023:                                             ; preds = %8015
  %8024 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %23, i64 0, i64 %8021
  %8025 = bitcast <4 x i64>* %8024 to <16 x i16>*
  store <16 x i16> %4384, <16 x i16>* %8025, align 32
  %8026 = add nuw nsw i64 %4394, 15
  %8027 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %23, i64 0, i64 %8026
  %8028 = bitcast <4 x i64>* %8027 to <16 x i16>*
  store <16 x i16> %4384, <16 x i16>* %8028, align 32
  br label %4682

8029:                                             ; preds = %4524
  %8030 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %23, i64 0, i64 %4531
  %8031 = bitcast <4 x i64>* %8030 to <16 x i16>*
  store <16 x i16> %4384, <16 x i16>* %8031, align 32
  %8032 = add nuw nsw i64 %4525, 9
  %8033 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %23, i64 0, i64 %8032
  %8034 = bitcast <4 x i64>* %8033 to <16 x i16>*
  store <16 x i16> %4384, <16 x i16>* %8034, align 32
  %8035 = add nuw nsw i64 %4525, 2
  %8036 = icmp eq i64 %8035, 8
  br i1 %8036, label %4682, label %8037

8037:                                             ; preds = %8029
  %8038 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %23, i64 0, i64 %8035
  %8039 = bitcast <4 x i64>* %8038 to <16 x i16>*
  store <16 x i16> %4384, <16 x i16>* %8039, align 32
  %8040 = add nuw nsw i64 %4525, 10
  %8041 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %23, i64 0, i64 %8040
  %8042 = bitcast <4 x i64>* %8041 to <16 x i16>*
  store <16 x i16> %4384, <16 x i16>* %8042, align 32
  %8043 = add nuw nsw i64 %4525, 3
  %8044 = icmp eq i64 %8043, 8
  br i1 %8044, label %4682, label %8045

8045:                                             ; preds = %8037
  %8046 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %23, i64 0, i64 %8043
  %8047 = bitcast <4 x i64>* %8046 to <16 x i16>*
  store <16 x i16> %4384, <16 x i16>* %8047, align 32
  %8048 = add nuw nsw i64 %4525, 11
  %8049 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %23, i64 0, i64 %8048
  %8050 = bitcast <4 x i64>* %8049 to <16 x i16>*
  store <16 x i16> %4384, <16 x i16>* %8050, align 32
  %8051 = add nuw nsw i64 %4525, 4
  %8052 = icmp eq i64 %8051, 8
  br i1 %8052, label %4682, label %8053

8053:                                             ; preds = %8045
  %8054 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %23, i64 0, i64 %8051
  %8055 = bitcast <4 x i64>* %8054 to <16 x i16>*
  store <16 x i16> %4384, <16 x i16>* %8055, align 32
  %8056 = add nuw nsw i64 %4525, 12
  %8057 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %23, i64 0, i64 %8056
  %8058 = bitcast <4 x i64>* %8057 to <16 x i16>*
  store <16 x i16> %4384, <16 x i16>* %8058, align 32
  %8059 = add nuw nsw i64 %4525, 5
  %8060 = icmp eq i64 %8059, 8
  br i1 %8060, label %4682, label %8061

8061:                                             ; preds = %8053
  %8062 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %23, i64 0, i64 %8059
  %8063 = bitcast <4 x i64>* %8062 to <16 x i16>*
  store <16 x i16> %4384, <16 x i16>* %8063, align 32
  %8064 = add nuw nsw i64 %4525, 13
  %8065 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %23, i64 0, i64 %8064
  %8066 = bitcast <4 x i64>* %8065 to <16 x i16>*
  store <16 x i16> %4384, <16 x i16>* %8066, align 32
  %8067 = add nuw nsw i64 %4525, 6
  %8068 = icmp eq i64 %8067, 8
  br i1 %8068, label %4682, label %8069

8069:                                             ; preds = %8061
  %8070 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %23, i64 0, i64 %8067
  %8071 = bitcast <4 x i64>* %8070 to <16 x i16>*
  store <16 x i16> %4384, <16 x i16>* %8071, align 32
  %8072 = add nuw nsw i64 %4525, 14
  %8073 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %23, i64 0, i64 %8072
  %8074 = bitcast <4 x i64>* %8073 to <16 x i16>*
  store <16 x i16> %4384, <16 x i16>* %8074, align 32
  %8075 = add nuw nsw i64 %4525, 7
  %8076 = icmp eq i64 %8075, 8
  br i1 %8076, label %4682, label %8077

8077:                                             ; preds = %8069
  %8078 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %23, i64 0, i64 %8075
  %8079 = bitcast <4 x i64>* %8078 to <16 x i16>*
  store <16 x i16> %4384, <16 x i16>* %8079, align 32
  %8080 = add nuw nsw i64 %4525, 15
  %8081 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %23, i64 0, i64 %8080
  %8082 = bitcast <4 x i64>* %8081 to <16 x i16>*
  store <16 x i16> %4384, <16 x i16>* %8082, align 32
  br label %4682

8083:                                             ; preds = %5117
  %8084 = getelementptr inbounds [8 x <2 x i64>], [8 x <2 x i64>]* %17, i64 0, i64 %5121
  %8085 = bitcast <2 x i64>* %8084 to <8 x i16>*
  store <8 x i16> %5103, <8 x i16>* %8085, align 16
  %8086 = add nuw nsw i64 %5118, 2
  %8087 = icmp eq i64 %8086, 8
  br i1 %8087, label %5298, label %8088

8088:                                             ; preds = %8083
  %8089 = getelementptr inbounds [8 x <2 x i64>], [8 x <2 x i64>]* %17, i64 0, i64 %8086
  %8090 = bitcast <2 x i64>* %8089 to <8 x i16>*
  store <8 x i16> %5103, <8 x i16>* %8090, align 16
  %8091 = add nuw nsw i64 %5118, 3
  %8092 = icmp eq i64 %8091, 8
  br i1 %8092, label %5298, label %8093

8093:                                             ; preds = %8088
  %8094 = getelementptr inbounds [8 x <2 x i64>], [8 x <2 x i64>]* %17, i64 0, i64 %8091
  %8095 = bitcast <2 x i64>* %8094 to <8 x i16>*
  store <8 x i16> %5103, <8 x i16>* %8095, align 16
  %8096 = add nuw nsw i64 %5118, 4
  %8097 = icmp eq i64 %8096, 8
  br i1 %8097, label %5298, label %8098

8098:                                             ; preds = %8093
  %8099 = getelementptr inbounds [8 x <2 x i64>], [8 x <2 x i64>]* %17, i64 0, i64 %8096
  %8100 = bitcast <2 x i64>* %8099 to <8 x i16>*
  store <8 x i16> %5103, <8 x i16>* %8100, align 16
  %8101 = add nuw nsw i64 %5118, 5
  %8102 = icmp eq i64 %8101, 8
  br i1 %8102, label %5298, label %8103

8103:                                             ; preds = %8098
  %8104 = getelementptr inbounds [8 x <2 x i64>], [8 x <2 x i64>]* %17, i64 0, i64 %8101
  %8105 = bitcast <2 x i64>* %8104 to <8 x i16>*
  store <8 x i16> %5103, <8 x i16>* %8105, align 16
  %8106 = add nuw nsw i64 %5118, 6
  %8107 = icmp eq i64 %8106, 8
  br i1 %8107, label %5298, label %8108

8108:                                             ; preds = %8103
  %8109 = getelementptr inbounds [8 x <2 x i64>], [8 x <2 x i64>]* %17, i64 0, i64 %8106
  %8110 = bitcast <2 x i64>* %8109 to <8 x i16>*
  store <8 x i16> %5103, <8 x i16>* %8110, align 16
  %8111 = add nuw nsw i64 %5118, 7
  %8112 = icmp eq i64 %8111, 8
  br i1 %8112, label %5298, label %8113

8113:                                             ; preds = %8108
  %8114 = getelementptr inbounds [8 x <2 x i64>], [8 x <2 x i64>]* %17, i64 0, i64 %8111
  %8115 = bitcast <2 x i64>* %8114 to <8 x i16>*
  store <8 x i16> %5103, <8 x i16>* %8115, align 16
  br label %5298

8116:                                             ; preds = %5222
  %8117 = getelementptr inbounds [8 x <2 x i64>], [8 x <2 x i64>]* %17, i64 0, i64 %5226
  %8118 = bitcast <2 x i64>* %8117 to <8 x i16>*
  store <8 x i16> %5103, <8 x i16>* %8118, align 16
  %8119 = add nuw nsw i64 %5223, 2
  %8120 = icmp eq i64 %8119, 8
  br i1 %8120, label %5298, label %8121

8121:                                             ; preds = %8116
  %8122 = getelementptr inbounds [8 x <2 x i64>], [8 x <2 x i64>]* %17, i64 0, i64 %8119
  %8123 = bitcast <2 x i64>* %8122 to <8 x i16>*
  store <8 x i16> %5103, <8 x i16>* %8123, align 16
  %8124 = add nuw nsw i64 %5223, 3
  %8125 = icmp eq i64 %8124, 8
  br i1 %8125, label %5298, label %8126

8126:                                             ; preds = %8121
  %8127 = getelementptr inbounds [8 x <2 x i64>], [8 x <2 x i64>]* %17, i64 0, i64 %8124
  %8128 = bitcast <2 x i64>* %8127 to <8 x i16>*
  store <8 x i16> %5103, <8 x i16>* %8128, align 16
  %8129 = add nuw nsw i64 %5223, 4
  %8130 = icmp eq i64 %8129, 8
  br i1 %8130, label %5298, label %8131

8131:                                             ; preds = %8126
  %8132 = getelementptr inbounds [8 x <2 x i64>], [8 x <2 x i64>]* %17, i64 0, i64 %8129
  %8133 = bitcast <2 x i64>* %8132 to <8 x i16>*
  store <8 x i16> %5103, <8 x i16>* %8133, align 16
  %8134 = add nuw nsw i64 %5223, 5
  %8135 = icmp eq i64 %8134, 8
  br i1 %8135, label %5298, label %8136

8136:                                             ; preds = %8131
  %8137 = getelementptr inbounds [8 x <2 x i64>], [8 x <2 x i64>]* %17, i64 0, i64 %8134
  %8138 = bitcast <2 x i64>* %8137 to <8 x i16>*
  store <8 x i16> %5103, <8 x i16>* %8138, align 16
  %8139 = add nuw nsw i64 %5223, 6
  %8140 = icmp eq i64 %8139, 8
  br i1 %8140, label %5298, label %8141

8141:                                             ; preds = %8136
  %8142 = getelementptr inbounds [8 x <2 x i64>], [8 x <2 x i64>]* %17, i64 0, i64 %8139
  %8143 = bitcast <2 x i64>* %8142 to <8 x i16>*
  store <8 x i16> %5103, <8 x i16>* %8143, align 16
  %8144 = add nuw nsw i64 %5223, 7
  %8145 = icmp eq i64 %8144, 8
  br i1 %8145, label %5298, label %8146

8146:                                             ; preds = %8141
  %8147 = getelementptr inbounds [8 x <2 x i64>], [8 x <2 x i64>]* %17, i64 0, i64 %8144
  %8148 = bitcast <2 x i64>* %8147 to <8 x i16>*
  store <8 x i16> %5103, <8 x i16>* %8148, align 16
  br label %5298
}

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_dr_prediction_z1_avx2(i8* nocapture, i64, i32, i32, i8* nocapture readonly, i8* nocapture readnone, i32, i32, i32) local_unnamed_addr #0 {
  %10 = alloca [32 x <2 x i64>], align 16
  %11 = alloca [64 x <2 x i64>], align 16
  %12 = alloca [64 x <4 x i64>], align 32
  %13 = alloca [16 x <2 x i64>], align 16
  switch i32 %2, label %914 [
    i32 4, label %14
    i32 8, label %204
    i32 16, label %389
    i32 32, label %569
    i32 64, label %749
  ]

14:                                               ; preds = %9
  %15 = bitcast [16 x <2 x i64>]* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %15) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %15, i8 -86, i64 256, i1 false) #8
  %16 = sub nsw i32 6, %6
  %17 = add i32 %3, 3
  %18 = shl i32 %17, %6
  %19 = sext i32 %18 to i64
  %20 = getelementptr inbounds i8, i8* %4, i64 %19
  %21 = load i8, i8* %20, align 1
  %22 = insertelement <16 x i8> undef, i8 %21, i32 0
  %23 = shufflevector <16 x i8> %22, <16 x i8> undef, <16 x i32> zeroinitializer
  %24 = icmp sgt i32 %3, 0
  br i1 %24, label %25, label %203

25:                                               ; preds = %14
  %26 = icmp eq i32 %6, 0
  %27 = zext i32 %3 to i64
  br label %28

28:                                               ; preds = %112, %25
  %29 = phi i64 [ 0, %25 ], [ %142, %112 ]
  %30 = phi i32 [ %7, %25 ], [ %141, %112 ]
  %31 = ashr i32 %30, %16
  %32 = sub nsw i32 %18, %31
  %33 = ashr i32 %32, %6
  %34 = icmp slt i32 %33, 1
  br i1 %34, label %35, label %83

35:                                               ; preds = %28
  %36 = trunc i64 %29 to i32
  %37 = icmp slt i32 %36, %3
  br i1 %37, label %38, label %144

38:                                               ; preds = %35
  %39 = and i64 %29, 4294967295
  %40 = sub nsw i64 %27, %29
  %41 = xor i64 %39, -1
  %42 = add nsw i64 %41, %27
  %43 = and i64 %40, 7
  %44 = icmp eq i64 %43, 0
  br i1 %44, label %53, label %45

45:                                               ; preds = %38, %45
  %46 = phi i64 [ %50, %45 ], [ %39, %38 ]
  %47 = phi i64 [ %51, %45 ], [ %43, %38 ]
  %48 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %13, i64 0, i64 %46
  %49 = bitcast <2 x i64>* %48 to <16 x i8>*
  store <16 x i8> %23, <16 x i8>* %49, align 16
  %50 = add nuw nsw i64 %46, 1
  %51 = add i64 %47, -1
  %52 = icmp eq i64 %51, 0
  br i1 %52, label %53, label %45, !llvm.loop !35

53:                                               ; preds = %45, %38
  %54 = phi i64 [ %39, %38 ], [ %50, %45 ]
  %55 = icmp ult i64 %42, 7
  br i1 %55, label %144, label %56

56:                                               ; preds = %53, %56
  %57 = phi i64 [ %81, %56 ], [ %54, %53 ]
  %58 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %13, i64 0, i64 %57
  %59 = bitcast <2 x i64>* %58 to <16 x i8>*
  store <16 x i8> %23, <16 x i8>* %59, align 16
  %60 = add nuw nsw i64 %57, 1
  %61 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %13, i64 0, i64 %60
  %62 = bitcast <2 x i64>* %61 to <16 x i8>*
  store <16 x i8> %23, <16 x i8>* %62, align 16
  %63 = add nuw nsw i64 %57, 2
  %64 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %13, i64 0, i64 %63
  %65 = bitcast <2 x i64>* %64 to <16 x i8>*
  store <16 x i8> %23, <16 x i8>* %65, align 16
  %66 = add nuw nsw i64 %57, 3
  %67 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %13, i64 0, i64 %66
  %68 = bitcast <2 x i64>* %67 to <16 x i8>*
  store <16 x i8> %23, <16 x i8>* %68, align 16
  %69 = add nuw nsw i64 %57, 4
  %70 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %13, i64 0, i64 %69
  %71 = bitcast <2 x i64>* %70 to <16 x i8>*
  store <16 x i8> %23, <16 x i8>* %71, align 16
  %72 = add nuw nsw i64 %57, 5
  %73 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %13, i64 0, i64 %72
  %74 = bitcast <2 x i64>* %73 to <16 x i8>*
  store <16 x i8> %23, <16 x i8>* %74, align 16
  %75 = add nuw nsw i64 %57, 6
  %76 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %13, i64 0, i64 %75
  %77 = bitcast <2 x i64>* %76 to <16 x i8>*
  store <16 x i8> %23, <16 x i8>* %77, align 16
  %78 = add nuw nsw i64 %57, 7
  %79 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %13, i64 0, i64 %78
  %80 = bitcast <2 x i64>* %79 to <16 x i8>*
  store <16 x i8> %23, <16 x i8>* %80, align 16
  %81 = add nuw nsw i64 %57, 8
  %82 = icmp eq i64 %81, %27
  br i1 %82, label %144, label %56

83:                                               ; preds = %28
  %84 = icmp slt i32 %33, 4
  %85 = select i1 %84, i32 %33, i32 4
  %86 = sext i32 %31 to i64
  %87 = getelementptr inbounds i8, i8* %4, i64 %86
  %88 = bitcast i8* %87 to <2 x i64>*
  %89 = load <2 x i64>, <2 x i64>* %88, align 1
  br i1 %26, label %102, label %90

90:                                               ; preds = %83
  %91 = bitcast <2 x i64> %89 to <16 x i8>
  %92 = shufflevector <16 x i8> %91, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %93 = bitcast <16 x i8> %92 to <2 x i64>
  %94 = shufflevector <16 x i8> %92, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %95 = trunc i32 %30 to i16
  %96 = insertelement <16 x i16> undef, i16 %95, i32 0
  %97 = shufflevector <16 x i16> %96, <16 x i16> undef, <16 x i32> zeroinitializer
  %98 = tail call <16 x i16> @llvm.x86.avx2.pslli.w(<16 x i16> %97, i32 %6) #8
  %99 = lshr <16 x i16> %98, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %100 = bitcast <16 x i16> %99 to <4 x i64>
  %101 = and <4 x i64> %100, <i64 8725857424048159, i64 8725857424048159, i64 8725857424048159, i64 8725857424048159>
  br label %112

102:                                              ; preds = %83
  %103 = getelementptr inbounds i8, i8* %87, i64 1
  %104 = bitcast i8* %103 to <16 x i8>*
  %105 = load <16 x i8>, <16 x i8>* %104, align 1
  %106 = trunc i32 %30 to i16
  %107 = insertelement <16 x i16> undef, i16 %106, i32 0
  %108 = and <16 x i16> %107, <i16 63, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef>
  %109 = lshr <16 x i16> %108, <i16 1, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0>
  %110 = shufflevector <16 x i16> %109, <16 x i16> undef, <16 x i32> zeroinitializer
  %111 = bitcast <16 x i16> %110 to <4 x i64>
  br label %112

112:                                              ; preds = %102, %90
  %113 = phi <4 x i64> [ %101, %90 ], [ %111, %102 ]
  %114 = phi <2 x i64> [ %93, %90 ], [ %89, %102 ]
  %115 = phi <16 x i8> [ %94, %90 ], [ %105, %102 ]
  %116 = bitcast <2 x i64> %114 to <16 x i8>
  %117 = zext <16 x i8> %116 to <16 x i16>
  %118 = zext <16 x i8> %115 to <16 x i16>
  %119 = sub nsw <16 x i16> %118, %117
  %120 = shl nuw nsw <16 x i16> %117, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %121 = or <16 x i16> %120, <i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16>
  %122 = bitcast <4 x i64> %113 to <16 x i16>
  %123 = mul <16 x i16> %119, %122
  %124 = add <16 x i16> %123, %121
  %125 = lshr <16 x i16> %124, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %126 = bitcast <16 x i16> %125 to <4 x i64>
  %127 = shufflevector <4 x i64> %126, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %128 = shufflevector <2 x i64> %127, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %129 = bitcast <4 x i64> %128 to <16 x i16>
  %130 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %125, <16 x i16> %129) #8
  %131 = bitcast <32 x i8> %130 to <4 x i64>
  %132 = shufflevector <4 x i64> %131, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %133 = sext i32 %85 to i64
  %134 = getelementptr inbounds [33 x [32 x i8]], [33 x [32 x i8]]* bitcast (<{ [32 x i8], <{ i8, [31 x i8] }>, <{ i8, i8, [30 x i8] }>, <{ i8, i8, i8, [29 x i8] }>, <{ i8, i8, i8, i8, [28 x i8] }>, <{ i8, i8, i8, i8, i8, [27 x i8] }>, <{ i8, i8, i8, i8, i8, i8, [26 x i8] }>, <{ i8, i8, i8, i8, i8, i8, i8, [25 x i8] }>, <{ [8 x i8], [24 x i8] }>, <{ [9 x i8], [23 x i8] }>, <{ [10 x i8], [22 x i8] }>, <{ [11 x i8], [21 x i8] }>, <{ [12 x i8], [20 x i8] }>, <{ [13 x i8], [19 x i8] }>, <{ [14 x i8], [18 x i8] }>, <{ [15 x i8], [17 x i8] }>, <{ [16 x i8], [16 x i8] }>, <{ [17 x i8], [15 x i8] }>, <{ [18 x i8], [14 x i8] }>, <{ [19 x i8], [13 x i8] }>, <{ [20 x i8], [12 x i8] }>, <{ [21 x i8], [11 x i8] }>, <{ [22 x i8], [10 x i8] }>, <{ [23 x i8], [9 x i8] }>, <{ [24 x i8], [8 x i8] }>, [32 x i8], [32 x i8], [32 x i8], [32 x i8], [32 x i8], [32 x i8], [32 x i8], [32 x i8] }>* @BaseMask to [33 x [32 x i8]]*), i64 0, i64 %133, i64 0
  %135 = bitcast i8* %134 to <16 x i8>*
  %136 = load <16 x i8>, <16 x i8>* %135, align 32
  %137 = bitcast <2 x i64> %132 to <16 x i8>
  %138 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %23, <16 x i8> %137, <16 x i8> %136) #8
  %139 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %13, i64 0, i64 %29
  %140 = bitcast <2 x i64>* %139 to <16 x i8>*
  store <16 x i8> %138, <16 x i8>* %140, align 16
  %141 = add nsw i32 %30, %7
  %142 = add nuw nsw i64 %29, 1
  %143 = icmp eq i64 %142, %27
  br i1 %143, label %144, label %28

144:                                              ; preds = %112, %53, %56, %35
  %145 = add nsw i64 %27, -1
  %146 = and i64 %27, 3
  %147 = icmp ult i64 %145, 3
  br i1 %147, label %187, label %148

148:                                              ; preds = %144
  %149 = sub nsw i64 %27, %146
  br label %150

150:                                              ; preds = %150, %148
  %151 = phi i64 [ 0, %148 ], [ %184, %150 ]
  %152 = phi i64 [ %149, %148 ], [ %185, %150 ]
  %153 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %13, i64 0, i64 %151
  %154 = bitcast <2 x i64>* %153 to <4 x i32>*
  %155 = load <4 x i32>, <4 x i32>* %154, align 16
  %156 = extractelement <4 x i32> %155, i32 0
  %157 = mul nsw i64 %151, %1
  %158 = getelementptr inbounds i8, i8* %0, i64 %157
  %159 = bitcast i8* %158 to i32*
  store i32 %156, i32* %159, align 4
  %160 = or i64 %151, 1
  %161 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %13, i64 0, i64 %160
  %162 = bitcast <2 x i64>* %161 to <4 x i32>*
  %163 = load <4 x i32>, <4 x i32>* %162, align 16
  %164 = extractelement <4 x i32> %163, i32 0
  %165 = mul nsw i64 %160, %1
  %166 = getelementptr inbounds i8, i8* %0, i64 %165
  %167 = bitcast i8* %166 to i32*
  store i32 %164, i32* %167, align 4
  %168 = or i64 %151, 2
  %169 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %13, i64 0, i64 %168
  %170 = bitcast <2 x i64>* %169 to <4 x i32>*
  %171 = load <4 x i32>, <4 x i32>* %170, align 16
  %172 = extractelement <4 x i32> %171, i32 0
  %173 = mul nsw i64 %168, %1
  %174 = getelementptr inbounds i8, i8* %0, i64 %173
  %175 = bitcast i8* %174 to i32*
  store i32 %172, i32* %175, align 4
  %176 = or i64 %151, 3
  %177 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %13, i64 0, i64 %176
  %178 = bitcast <2 x i64>* %177 to <4 x i32>*
  %179 = load <4 x i32>, <4 x i32>* %178, align 16
  %180 = extractelement <4 x i32> %179, i32 0
  %181 = mul nsw i64 %176, %1
  %182 = getelementptr inbounds i8, i8* %0, i64 %181
  %183 = bitcast i8* %182 to i32*
  store i32 %180, i32* %183, align 4
  %184 = add nuw nsw i64 %151, 4
  %185 = add i64 %152, -4
  %186 = icmp eq i64 %185, 0
  br i1 %186, label %187, label %150

187:                                              ; preds = %150, %144
  %188 = phi i64 [ 0, %144 ], [ %184, %150 ]
  %189 = icmp eq i64 %146, 0
  br i1 %189, label %203, label %190

190:                                              ; preds = %187, %190
  %191 = phi i64 [ %200, %190 ], [ %188, %187 ]
  %192 = phi i64 [ %201, %190 ], [ %146, %187 ]
  %193 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %13, i64 0, i64 %191
  %194 = bitcast <2 x i64>* %193 to <4 x i32>*
  %195 = load <4 x i32>, <4 x i32>* %194, align 16
  %196 = extractelement <4 x i32> %195, i32 0
  %197 = mul nsw i64 %191, %1
  %198 = getelementptr inbounds i8, i8* %0, i64 %197
  %199 = bitcast i8* %198 to i32*
  store i32 %196, i32* %199, align 4
  %200 = add nuw nsw i64 %191, 1
  %201 = add i64 %192, -1
  %202 = icmp eq i64 %201, 0
  br i1 %202, label %203, label %190, !llvm.loop !36

203:                                              ; preds = %187, %190, %14
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %15) #8
  br label %914

204:                                              ; preds = %9
  %205 = bitcast [32 x <2 x i64>]* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %205) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %205, i8 -86, i64 512, i1 false) #8
  %206 = sub nsw i32 6, %6
  %207 = add i32 %3, 7
  %208 = shl i32 %207, %6
  %209 = sext i32 %208 to i64
  %210 = getelementptr inbounds i8, i8* %4, i64 %209
  %211 = load i8, i8* %210, align 1
  %212 = insertelement <16 x i8> undef, i8 %211, i32 0
  %213 = shufflevector <16 x i8> %212, <16 x i8> undef, <16 x i32> zeroinitializer
  %214 = icmp sgt i32 %3, 0
  br i1 %214, label %215, label %388

215:                                              ; preds = %204
  %216 = icmp eq i32 %6, 0
  %217 = zext i32 %3 to i64
  br label %218

218:                                              ; preds = %302, %215
  %219 = phi i64 [ 0, %215 ], [ %332, %302 ]
  %220 = phi i32 [ %7, %215 ], [ %331, %302 ]
  %221 = ashr i32 %220, %206
  %222 = sub nsw i32 %208, %221
  %223 = ashr i32 %222, %6
  %224 = icmp slt i32 %223, 1
  br i1 %224, label %225, label %273

225:                                              ; preds = %218
  %226 = trunc i64 %219 to i32
  %227 = icmp slt i32 %226, %3
  br i1 %227, label %228, label %334

228:                                              ; preds = %225
  %229 = and i64 %219, 4294967295
  %230 = sub nsw i64 %217, %219
  %231 = xor i64 %229, -1
  %232 = add nsw i64 %231, %217
  %233 = and i64 %230, 7
  %234 = icmp eq i64 %233, 0
  br i1 %234, label %243, label %235

235:                                              ; preds = %228, %235
  %236 = phi i64 [ %240, %235 ], [ %229, %228 ]
  %237 = phi i64 [ %241, %235 ], [ %233, %228 ]
  %238 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %10, i64 0, i64 %236
  %239 = bitcast <2 x i64>* %238 to <16 x i8>*
  store <16 x i8> %213, <16 x i8>* %239, align 16
  %240 = add nuw nsw i64 %236, 1
  %241 = add i64 %237, -1
  %242 = icmp eq i64 %241, 0
  br i1 %242, label %243, label %235, !llvm.loop !37

243:                                              ; preds = %235, %228
  %244 = phi i64 [ %229, %228 ], [ %240, %235 ]
  %245 = icmp ult i64 %232, 7
  br i1 %245, label %334, label %246

246:                                              ; preds = %243, %246
  %247 = phi i64 [ %271, %246 ], [ %244, %243 ]
  %248 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %10, i64 0, i64 %247
  %249 = bitcast <2 x i64>* %248 to <16 x i8>*
  store <16 x i8> %213, <16 x i8>* %249, align 16
  %250 = add nuw nsw i64 %247, 1
  %251 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %10, i64 0, i64 %250
  %252 = bitcast <2 x i64>* %251 to <16 x i8>*
  store <16 x i8> %213, <16 x i8>* %252, align 16
  %253 = add nuw nsw i64 %247, 2
  %254 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %10, i64 0, i64 %253
  %255 = bitcast <2 x i64>* %254 to <16 x i8>*
  store <16 x i8> %213, <16 x i8>* %255, align 16
  %256 = add nuw nsw i64 %247, 3
  %257 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %10, i64 0, i64 %256
  %258 = bitcast <2 x i64>* %257 to <16 x i8>*
  store <16 x i8> %213, <16 x i8>* %258, align 16
  %259 = add nuw nsw i64 %247, 4
  %260 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %10, i64 0, i64 %259
  %261 = bitcast <2 x i64>* %260 to <16 x i8>*
  store <16 x i8> %213, <16 x i8>* %261, align 16
  %262 = add nuw nsw i64 %247, 5
  %263 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %10, i64 0, i64 %262
  %264 = bitcast <2 x i64>* %263 to <16 x i8>*
  store <16 x i8> %213, <16 x i8>* %264, align 16
  %265 = add nuw nsw i64 %247, 6
  %266 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %10, i64 0, i64 %265
  %267 = bitcast <2 x i64>* %266 to <16 x i8>*
  store <16 x i8> %213, <16 x i8>* %267, align 16
  %268 = add nuw nsw i64 %247, 7
  %269 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %10, i64 0, i64 %268
  %270 = bitcast <2 x i64>* %269 to <16 x i8>*
  store <16 x i8> %213, <16 x i8>* %270, align 16
  %271 = add nuw nsw i64 %247, 8
  %272 = icmp eq i64 %271, %217
  br i1 %272, label %334, label %246

273:                                              ; preds = %218
  %274 = icmp slt i32 %223, 8
  %275 = select i1 %274, i32 %223, i32 8
  %276 = sext i32 %221 to i64
  %277 = getelementptr inbounds i8, i8* %4, i64 %276
  %278 = bitcast i8* %277 to <2 x i64>*
  %279 = load <2 x i64>, <2 x i64>* %278, align 1
  br i1 %216, label %292, label %280

280:                                              ; preds = %273
  %281 = bitcast <2 x i64> %279 to <16 x i8>
  %282 = shufflevector <16 x i8> %281, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %283 = bitcast <16 x i8> %282 to <2 x i64>
  %284 = shufflevector <16 x i8> %282, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %285 = trunc i32 %220 to i16
  %286 = insertelement <16 x i16> undef, i16 %285, i32 0
  %287 = shufflevector <16 x i16> %286, <16 x i16> undef, <16 x i32> zeroinitializer
  %288 = tail call <16 x i16> @llvm.x86.avx2.pslli.w(<16 x i16> %287, i32 %6) #8
  %289 = lshr <16 x i16> %288, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %290 = bitcast <16 x i16> %289 to <4 x i64>
  %291 = and <4 x i64> %290, <i64 8725857424048159, i64 8725857424048159, i64 8725857424048159, i64 8725857424048159>
  br label %302

292:                                              ; preds = %273
  %293 = getelementptr inbounds i8, i8* %277, i64 1
  %294 = bitcast i8* %293 to <16 x i8>*
  %295 = load <16 x i8>, <16 x i8>* %294, align 1
  %296 = trunc i32 %220 to i16
  %297 = insertelement <16 x i16> undef, i16 %296, i32 0
  %298 = and <16 x i16> %297, <i16 63, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef>
  %299 = lshr <16 x i16> %298, <i16 1, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0>
  %300 = shufflevector <16 x i16> %299, <16 x i16> undef, <16 x i32> zeroinitializer
  %301 = bitcast <16 x i16> %300 to <4 x i64>
  br label %302

302:                                              ; preds = %292, %280
  %303 = phi <4 x i64> [ %291, %280 ], [ %301, %292 ]
  %304 = phi <2 x i64> [ %283, %280 ], [ %279, %292 ]
  %305 = phi <16 x i8> [ %284, %280 ], [ %295, %292 ]
  %306 = bitcast <2 x i64> %304 to <16 x i8>
  %307 = zext <16 x i8> %306 to <16 x i16>
  %308 = zext <16 x i8> %305 to <16 x i16>
  %309 = sub nsw <16 x i16> %308, %307
  %310 = shl nuw nsw <16 x i16> %307, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %311 = or <16 x i16> %310, <i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16>
  %312 = bitcast <4 x i64> %303 to <16 x i16>
  %313 = mul <16 x i16> %309, %312
  %314 = add <16 x i16> %313, %311
  %315 = lshr <16 x i16> %314, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %316 = bitcast <16 x i16> %315 to <4 x i64>
  %317 = shufflevector <4 x i64> %316, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %318 = shufflevector <2 x i64> %317, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %319 = bitcast <4 x i64> %318 to <16 x i16>
  %320 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %315, <16 x i16> %319) #8
  %321 = bitcast <32 x i8> %320 to <4 x i64>
  %322 = shufflevector <4 x i64> %321, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %323 = sext i32 %275 to i64
  %324 = getelementptr inbounds [33 x [32 x i8]], [33 x [32 x i8]]* bitcast (<{ [32 x i8], <{ i8, [31 x i8] }>, <{ i8, i8, [30 x i8] }>, <{ i8, i8, i8, [29 x i8] }>, <{ i8, i8, i8, i8, [28 x i8] }>, <{ i8, i8, i8, i8, i8, [27 x i8] }>, <{ i8, i8, i8, i8, i8, i8, [26 x i8] }>, <{ i8, i8, i8, i8, i8, i8, i8, [25 x i8] }>, <{ [8 x i8], [24 x i8] }>, <{ [9 x i8], [23 x i8] }>, <{ [10 x i8], [22 x i8] }>, <{ [11 x i8], [21 x i8] }>, <{ [12 x i8], [20 x i8] }>, <{ [13 x i8], [19 x i8] }>, <{ [14 x i8], [18 x i8] }>, <{ [15 x i8], [17 x i8] }>, <{ [16 x i8], [16 x i8] }>, <{ [17 x i8], [15 x i8] }>, <{ [18 x i8], [14 x i8] }>, <{ [19 x i8], [13 x i8] }>, <{ [20 x i8], [12 x i8] }>, <{ [21 x i8], [11 x i8] }>, <{ [22 x i8], [10 x i8] }>, <{ [23 x i8], [9 x i8] }>, <{ [24 x i8], [8 x i8] }>, [32 x i8], [32 x i8], [32 x i8], [32 x i8], [32 x i8], [32 x i8], [32 x i8], [32 x i8] }>* @BaseMask to [33 x [32 x i8]]*), i64 0, i64 %323, i64 0
  %325 = bitcast i8* %324 to <16 x i8>*
  %326 = load <16 x i8>, <16 x i8>* %325, align 32
  %327 = bitcast <2 x i64> %322 to <16 x i8>
  %328 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %213, <16 x i8> %327, <16 x i8> %326) #8
  %329 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %10, i64 0, i64 %219
  %330 = bitcast <2 x i64>* %329 to <16 x i8>*
  store <16 x i8> %328, <16 x i8>* %330, align 16
  %331 = add nsw i32 %220, %7
  %332 = add nuw nsw i64 %219, 1
  %333 = icmp eq i64 %332, %217
  br i1 %333, label %334, label %218

334:                                              ; preds = %302, %243, %246, %225
  %335 = add nsw i64 %217, -1
  %336 = and i64 %217, 3
  %337 = icmp ult i64 %335, 3
  br i1 %337, label %373, label %338

338:                                              ; preds = %334
  %339 = sub nsw i64 %217, %336
  br label %340

340:                                              ; preds = %340, %338
  %341 = phi i64 [ 0, %338 ], [ %370, %340 ]
  %342 = phi i64 [ %339, %338 ], [ %371, %340 ]
  %343 = mul nsw i64 %341, %1
  %344 = getelementptr inbounds i8, i8* %0, i64 %343
  %345 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %10, i64 0, i64 %341
  %346 = load <2 x i64>, <2 x i64>* %345, align 16
  %347 = extractelement <2 x i64> %346, i32 0
  %348 = bitcast i8* %344 to i64*
  store i64 %347, i64* %348, align 1
  %349 = or i64 %341, 1
  %350 = mul nsw i64 %349, %1
  %351 = getelementptr inbounds i8, i8* %0, i64 %350
  %352 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %10, i64 0, i64 %349
  %353 = load <2 x i64>, <2 x i64>* %352, align 16
  %354 = extractelement <2 x i64> %353, i32 0
  %355 = bitcast i8* %351 to i64*
  store i64 %354, i64* %355, align 1
  %356 = or i64 %341, 2
  %357 = mul nsw i64 %356, %1
  %358 = getelementptr inbounds i8, i8* %0, i64 %357
  %359 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %10, i64 0, i64 %356
  %360 = load <2 x i64>, <2 x i64>* %359, align 16
  %361 = extractelement <2 x i64> %360, i32 0
  %362 = bitcast i8* %358 to i64*
  store i64 %361, i64* %362, align 1
  %363 = or i64 %341, 3
  %364 = mul nsw i64 %363, %1
  %365 = getelementptr inbounds i8, i8* %0, i64 %364
  %366 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %10, i64 0, i64 %363
  %367 = load <2 x i64>, <2 x i64>* %366, align 16
  %368 = extractelement <2 x i64> %367, i32 0
  %369 = bitcast i8* %365 to i64*
  store i64 %368, i64* %369, align 1
  %370 = add nuw nsw i64 %341, 4
  %371 = add i64 %342, -4
  %372 = icmp eq i64 %371, 0
  br i1 %372, label %373, label %340

373:                                              ; preds = %340, %334
  %374 = phi i64 [ 0, %334 ], [ %370, %340 ]
  %375 = icmp eq i64 %336, 0
  br i1 %375, label %388, label %376

376:                                              ; preds = %373, %376
  %377 = phi i64 [ %385, %376 ], [ %374, %373 ]
  %378 = phi i64 [ %386, %376 ], [ %336, %373 ]
  %379 = mul nsw i64 %377, %1
  %380 = getelementptr inbounds i8, i8* %0, i64 %379
  %381 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %10, i64 0, i64 %377
  %382 = load <2 x i64>, <2 x i64>* %381, align 16
  %383 = extractelement <2 x i64> %382, i32 0
  %384 = bitcast i8* %380 to i64*
  store i64 %383, i64* %384, align 1
  %385 = add nuw nsw i64 %377, 1
  %386 = add i64 %378, -1
  %387 = icmp eq i64 %386, 0
  br i1 %387, label %388, label %376, !llvm.loop !38

388:                                              ; preds = %373, %376, %204
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %205) #8
  br label %914

389:                                              ; preds = %9
  %390 = bitcast [64 x <2 x i64>]* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %390) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %390, i8 -86, i64 1024, i1 false) #8
  %391 = sub nsw i32 6, %6
  %392 = add i32 %3, 15
  %393 = shl i32 %392, %6
  %394 = sext i32 %393 to i64
  %395 = getelementptr inbounds i8, i8* %4, i64 %394
  %396 = load i8, i8* %395, align 1
  %397 = insertelement <16 x i8> undef, i8 %396, i32 0
  %398 = shufflevector <16 x i8> %397, <16 x i8> undef, <16 x i32> zeroinitializer
  %399 = icmp sgt i32 %3, 0
  br i1 %399, label %400, label %568

400:                                              ; preds = %389
  %401 = icmp eq i32 %6, 0
  %402 = zext i32 %3 to i64
  br label %403

403:                                              ; preds = %487, %400
  %404 = phi i64 [ 0, %400 ], [ %517, %487 ]
  %405 = phi i32 [ %7, %400 ], [ %516, %487 ]
  %406 = ashr i32 %405, %391
  %407 = sub nsw i32 %393, %406
  %408 = ashr i32 %407, %6
  %409 = icmp slt i32 %408, 1
  br i1 %409, label %410, label %458

410:                                              ; preds = %403
  %411 = trunc i64 %404 to i32
  %412 = icmp slt i32 %411, %3
  br i1 %412, label %413, label %519

413:                                              ; preds = %410
  %414 = and i64 %404, 4294967295
  %415 = sub nsw i64 %402, %404
  %416 = xor i64 %414, -1
  %417 = add nsw i64 %416, %402
  %418 = and i64 %415, 7
  %419 = icmp eq i64 %418, 0
  br i1 %419, label %428, label %420

420:                                              ; preds = %413, %420
  %421 = phi i64 [ %425, %420 ], [ %414, %413 ]
  %422 = phi i64 [ %426, %420 ], [ %418, %413 ]
  %423 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %11, i64 0, i64 %421
  %424 = bitcast <2 x i64>* %423 to <16 x i8>*
  store <16 x i8> %398, <16 x i8>* %424, align 16
  %425 = add nuw nsw i64 %421, 1
  %426 = add i64 %422, -1
  %427 = icmp eq i64 %426, 0
  br i1 %427, label %428, label %420, !llvm.loop !39

428:                                              ; preds = %420, %413
  %429 = phi i64 [ %414, %413 ], [ %425, %420 ]
  %430 = icmp ult i64 %417, 7
  br i1 %430, label %519, label %431

431:                                              ; preds = %428, %431
  %432 = phi i64 [ %456, %431 ], [ %429, %428 ]
  %433 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %11, i64 0, i64 %432
  %434 = bitcast <2 x i64>* %433 to <16 x i8>*
  store <16 x i8> %398, <16 x i8>* %434, align 16
  %435 = add nuw nsw i64 %432, 1
  %436 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %11, i64 0, i64 %435
  %437 = bitcast <2 x i64>* %436 to <16 x i8>*
  store <16 x i8> %398, <16 x i8>* %437, align 16
  %438 = add nuw nsw i64 %432, 2
  %439 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %11, i64 0, i64 %438
  %440 = bitcast <2 x i64>* %439 to <16 x i8>*
  store <16 x i8> %398, <16 x i8>* %440, align 16
  %441 = add nuw nsw i64 %432, 3
  %442 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %11, i64 0, i64 %441
  %443 = bitcast <2 x i64>* %442 to <16 x i8>*
  store <16 x i8> %398, <16 x i8>* %443, align 16
  %444 = add nuw nsw i64 %432, 4
  %445 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %11, i64 0, i64 %444
  %446 = bitcast <2 x i64>* %445 to <16 x i8>*
  store <16 x i8> %398, <16 x i8>* %446, align 16
  %447 = add nuw nsw i64 %432, 5
  %448 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %11, i64 0, i64 %447
  %449 = bitcast <2 x i64>* %448 to <16 x i8>*
  store <16 x i8> %398, <16 x i8>* %449, align 16
  %450 = add nuw nsw i64 %432, 6
  %451 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %11, i64 0, i64 %450
  %452 = bitcast <2 x i64>* %451 to <16 x i8>*
  store <16 x i8> %398, <16 x i8>* %452, align 16
  %453 = add nuw nsw i64 %432, 7
  %454 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %11, i64 0, i64 %453
  %455 = bitcast <2 x i64>* %454 to <16 x i8>*
  store <16 x i8> %398, <16 x i8>* %455, align 16
  %456 = add nuw nsw i64 %432, 8
  %457 = icmp eq i64 %456, %402
  br i1 %457, label %519, label %431

458:                                              ; preds = %403
  %459 = icmp slt i32 %408, 16
  %460 = select i1 %459, i32 %408, i32 16
  %461 = sext i32 %406 to i64
  %462 = getelementptr inbounds i8, i8* %4, i64 %461
  %463 = bitcast i8* %462 to <2 x i64>*
  %464 = load <2 x i64>, <2 x i64>* %463, align 1
  br i1 %401, label %477, label %465

465:                                              ; preds = %458
  %466 = bitcast <2 x i64> %464 to <16 x i8>
  %467 = shufflevector <16 x i8> %466, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %468 = bitcast <16 x i8> %467 to <2 x i64>
  %469 = shufflevector <16 x i8> %467, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %470 = trunc i32 %405 to i16
  %471 = insertelement <16 x i16> undef, i16 %470, i32 0
  %472 = shufflevector <16 x i16> %471, <16 x i16> undef, <16 x i32> zeroinitializer
  %473 = tail call <16 x i16> @llvm.x86.avx2.pslli.w(<16 x i16> %472, i32 %6) #8
  %474 = lshr <16 x i16> %473, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %475 = bitcast <16 x i16> %474 to <4 x i64>
  %476 = and <4 x i64> %475, <i64 8725857424048159, i64 8725857424048159, i64 8725857424048159, i64 8725857424048159>
  br label %487

477:                                              ; preds = %458
  %478 = getelementptr inbounds i8, i8* %462, i64 1
  %479 = bitcast i8* %478 to <16 x i8>*
  %480 = load <16 x i8>, <16 x i8>* %479, align 1
  %481 = trunc i32 %405 to i16
  %482 = insertelement <16 x i16> undef, i16 %481, i32 0
  %483 = and <16 x i16> %482, <i16 63, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef>
  %484 = lshr <16 x i16> %483, <i16 1, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0>
  %485 = shufflevector <16 x i16> %484, <16 x i16> undef, <16 x i32> zeroinitializer
  %486 = bitcast <16 x i16> %485 to <4 x i64>
  br label %487

487:                                              ; preds = %477, %465
  %488 = phi <4 x i64> [ %476, %465 ], [ %486, %477 ]
  %489 = phi <2 x i64> [ %468, %465 ], [ %464, %477 ]
  %490 = phi <16 x i8> [ %469, %465 ], [ %480, %477 ]
  %491 = bitcast <2 x i64> %489 to <16 x i8>
  %492 = zext <16 x i8> %491 to <16 x i16>
  %493 = zext <16 x i8> %490 to <16 x i16>
  %494 = sub nsw <16 x i16> %493, %492
  %495 = shl nuw nsw <16 x i16> %492, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %496 = or <16 x i16> %495, <i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16>
  %497 = bitcast <4 x i64> %488 to <16 x i16>
  %498 = mul <16 x i16> %494, %497
  %499 = add <16 x i16> %498, %496
  %500 = lshr <16 x i16> %499, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %501 = bitcast <16 x i16> %500 to <4 x i64>
  %502 = shufflevector <4 x i64> %501, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %503 = shufflevector <2 x i64> %502, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %504 = bitcast <4 x i64> %503 to <16 x i16>
  %505 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %500, <16 x i16> %504) #8
  %506 = bitcast <32 x i8> %505 to <4 x i64>
  %507 = shufflevector <4 x i64> %506, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %508 = sext i32 %460 to i64
  %509 = getelementptr inbounds [33 x [32 x i8]], [33 x [32 x i8]]* bitcast (<{ [32 x i8], <{ i8, [31 x i8] }>, <{ i8, i8, [30 x i8] }>, <{ i8, i8, i8, [29 x i8] }>, <{ i8, i8, i8, i8, [28 x i8] }>, <{ i8, i8, i8, i8, i8, [27 x i8] }>, <{ i8, i8, i8, i8, i8, i8, [26 x i8] }>, <{ i8, i8, i8, i8, i8, i8, i8, [25 x i8] }>, <{ [8 x i8], [24 x i8] }>, <{ [9 x i8], [23 x i8] }>, <{ [10 x i8], [22 x i8] }>, <{ [11 x i8], [21 x i8] }>, <{ [12 x i8], [20 x i8] }>, <{ [13 x i8], [19 x i8] }>, <{ [14 x i8], [18 x i8] }>, <{ [15 x i8], [17 x i8] }>, <{ [16 x i8], [16 x i8] }>, <{ [17 x i8], [15 x i8] }>, <{ [18 x i8], [14 x i8] }>, <{ [19 x i8], [13 x i8] }>, <{ [20 x i8], [12 x i8] }>, <{ [21 x i8], [11 x i8] }>, <{ [22 x i8], [10 x i8] }>, <{ [23 x i8], [9 x i8] }>, <{ [24 x i8], [8 x i8] }>, [32 x i8], [32 x i8], [32 x i8], [32 x i8], [32 x i8], [32 x i8], [32 x i8], [32 x i8] }>* @BaseMask to [33 x [32 x i8]]*), i64 0, i64 %508, i64 0
  %510 = bitcast i8* %509 to <16 x i8>*
  %511 = load <16 x i8>, <16 x i8>* %510, align 32
  %512 = bitcast <2 x i64> %507 to <16 x i8>
  %513 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %398, <16 x i8> %512, <16 x i8> %511) #8
  %514 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %11, i64 0, i64 %404
  %515 = bitcast <2 x i64>* %514 to <16 x i8>*
  store <16 x i8> %513, <16 x i8>* %515, align 16
  %516 = add nsw i32 %405, %7
  %517 = add nuw nsw i64 %404, 1
  %518 = icmp eq i64 %517, %402
  br i1 %518, label %519, label %403

519:                                              ; preds = %487, %428, %431, %410
  %520 = add nsw i64 %402, -1
  %521 = and i64 %402, 3
  %522 = icmp ult i64 %520, 3
  br i1 %522, label %554, label %523

523:                                              ; preds = %519
  %524 = sub nsw i64 %402, %521
  br label %525

525:                                              ; preds = %525, %523
  %526 = phi i64 [ 0, %523 ], [ %551, %525 ]
  %527 = phi i64 [ %524, %523 ], [ %552, %525 ]
  %528 = mul nsw i64 %526, %1
  %529 = getelementptr inbounds i8, i8* %0, i64 %528
  %530 = bitcast i8* %529 to <2 x i64>*
  %531 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %11, i64 0, i64 %526
  %532 = load <2 x i64>, <2 x i64>* %531, align 16
  store <2 x i64> %532, <2 x i64>* %530, align 1
  %533 = or i64 %526, 1
  %534 = mul nsw i64 %533, %1
  %535 = getelementptr inbounds i8, i8* %0, i64 %534
  %536 = bitcast i8* %535 to <2 x i64>*
  %537 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %11, i64 0, i64 %533
  %538 = load <2 x i64>, <2 x i64>* %537, align 16
  store <2 x i64> %538, <2 x i64>* %536, align 1
  %539 = or i64 %526, 2
  %540 = mul nsw i64 %539, %1
  %541 = getelementptr inbounds i8, i8* %0, i64 %540
  %542 = bitcast i8* %541 to <2 x i64>*
  %543 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %11, i64 0, i64 %539
  %544 = load <2 x i64>, <2 x i64>* %543, align 16
  store <2 x i64> %544, <2 x i64>* %542, align 1
  %545 = or i64 %526, 3
  %546 = mul nsw i64 %545, %1
  %547 = getelementptr inbounds i8, i8* %0, i64 %546
  %548 = bitcast i8* %547 to <2 x i64>*
  %549 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %11, i64 0, i64 %545
  %550 = load <2 x i64>, <2 x i64>* %549, align 16
  store <2 x i64> %550, <2 x i64>* %548, align 1
  %551 = add nuw nsw i64 %526, 4
  %552 = add i64 %527, -4
  %553 = icmp eq i64 %552, 0
  br i1 %553, label %554, label %525

554:                                              ; preds = %525, %519
  %555 = phi i64 [ 0, %519 ], [ %551, %525 ]
  %556 = icmp eq i64 %521, 0
  br i1 %556, label %568, label %557

557:                                              ; preds = %554, %557
  %558 = phi i64 [ %565, %557 ], [ %555, %554 ]
  %559 = phi i64 [ %566, %557 ], [ %521, %554 ]
  %560 = mul nsw i64 %558, %1
  %561 = getelementptr inbounds i8, i8* %0, i64 %560
  %562 = bitcast i8* %561 to <2 x i64>*
  %563 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %11, i64 0, i64 %558
  %564 = load <2 x i64>, <2 x i64>* %563, align 16
  store <2 x i64> %564, <2 x i64>* %562, align 1
  %565 = add nuw nsw i64 %558, 1
  %566 = add i64 %559, -1
  %567 = icmp eq i64 %566, 0
  br i1 %567, label %568, label %557, !llvm.loop !40

568:                                              ; preds = %554, %557, %389
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %390) #8
  br label %914

569:                                              ; preds = %9
  %570 = bitcast [64 x <4 x i64>]* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2048, i8* nonnull %570) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %570, i8 -86, i64 2048, i1 false) #8
  %571 = add nsw i32 %3, 31
  %572 = sext i32 %571 to i64
  %573 = getelementptr inbounds i8, i8* %4, i64 %572
  %574 = load i8, i8* %573, align 1
  %575 = insertelement <32 x i8> undef, i8 %574, i32 0
  %576 = shufflevector <32 x i8> %575, <32 x i8> undef, <32 x i32> zeroinitializer
  %577 = icmp sgt i32 %3, 0
  br i1 %577, label %578, label %748

578:                                              ; preds = %569
  %579 = zext i32 %3 to i64
  br label %580

580:                                              ; preds = %685, %578
  %581 = phi i64 [ 0, %578 ], [ %697, %685 ]
  %582 = phi i32 [ %7, %578 ], [ %696, %685 ]
  %583 = ashr i32 %582, 6
  %584 = sub nsw i32 %571, %583
  %585 = icmp slt i32 %584, 1
  br i1 %585, label %586, label %634

586:                                              ; preds = %580
  %587 = trunc i64 %581 to i32
  %588 = icmp slt i32 %587, %3
  br i1 %588, label %589, label %699

589:                                              ; preds = %586
  %590 = and i64 %581, 4294967295
  %591 = sub nsw i64 %579, %581
  %592 = xor i64 %590, -1
  %593 = add nsw i64 %592, %579
  %594 = and i64 %591, 7
  %595 = icmp eq i64 %594, 0
  br i1 %595, label %604, label %596

596:                                              ; preds = %589, %596
  %597 = phi i64 [ %601, %596 ], [ %590, %589 ]
  %598 = phi i64 [ %602, %596 ], [ %594, %589 ]
  %599 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %12, i64 0, i64 %597
  %600 = bitcast <4 x i64>* %599 to <32 x i8>*
  store <32 x i8> %576, <32 x i8>* %600, align 32
  %601 = add nuw nsw i64 %597, 1
  %602 = add i64 %598, -1
  %603 = icmp eq i64 %602, 0
  br i1 %603, label %604, label %596, !llvm.loop !41

604:                                              ; preds = %596, %589
  %605 = phi i64 [ %590, %589 ], [ %601, %596 ]
  %606 = icmp ult i64 %593, 7
  br i1 %606, label %699, label %607

607:                                              ; preds = %604, %607
  %608 = phi i64 [ %632, %607 ], [ %605, %604 ]
  %609 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %12, i64 0, i64 %608
  %610 = bitcast <4 x i64>* %609 to <32 x i8>*
  store <32 x i8> %576, <32 x i8>* %610, align 32
  %611 = add nuw nsw i64 %608, 1
  %612 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %12, i64 0, i64 %611
  %613 = bitcast <4 x i64>* %612 to <32 x i8>*
  store <32 x i8> %576, <32 x i8>* %613, align 32
  %614 = add nuw nsw i64 %608, 2
  %615 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %12, i64 0, i64 %614
  %616 = bitcast <4 x i64>* %615 to <32 x i8>*
  store <32 x i8> %576, <32 x i8>* %616, align 32
  %617 = add nuw nsw i64 %608, 3
  %618 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %12, i64 0, i64 %617
  %619 = bitcast <4 x i64>* %618 to <32 x i8>*
  store <32 x i8> %576, <32 x i8>* %619, align 32
  %620 = add nuw nsw i64 %608, 4
  %621 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %12, i64 0, i64 %620
  %622 = bitcast <4 x i64>* %621 to <32 x i8>*
  store <32 x i8> %576, <32 x i8>* %622, align 32
  %623 = add nuw nsw i64 %608, 5
  %624 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %12, i64 0, i64 %623
  %625 = bitcast <4 x i64>* %624 to <32 x i8>*
  store <32 x i8> %576, <32 x i8>* %625, align 32
  %626 = add nuw nsw i64 %608, 6
  %627 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %12, i64 0, i64 %626
  %628 = bitcast <4 x i64>* %627 to <32 x i8>*
  store <32 x i8> %576, <32 x i8>* %628, align 32
  %629 = add nuw nsw i64 %608, 7
  %630 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %12, i64 0, i64 %629
  %631 = bitcast <4 x i64>* %630 to <32 x i8>*
  store <32 x i8> %576, <32 x i8>* %631, align 32
  %632 = add nuw nsw i64 %608, 8
  %633 = icmp eq i64 %632, %579
  br i1 %633, label %699, label %607

634:                                              ; preds = %580
  %635 = icmp slt i32 %584, 32
  %636 = select i1 %635, i32 %584, i32 32
  %637 = trunc i32 %582 to i16
  %638 = insertelement <16 x i16> undef, i16 %637, i32 0
  %639 = and <16 x i16> %638, <i16 63, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef>
  %640 = lshr <16 x i16> %639, <i16 1, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0>
  %641 = shufflevector <16 x i16> %640, <16 x i16> undef, <16 x i32> zeroinitializer
  %642 = sext i32 %583 to i64
  %643 = getelementptr inbounds i8, i8* %4, i64 %642
  %644 = sext i32 %636 to i64
  %645 = bitcast i8* %643 to <16 x i8>*
  %646 = load <16 x i8>, <16 x i8>* %645, align 1
  %647 = getelementptr inbounds i8, i8* %643, i64 1
  %648 = bitcast i8* %647 to <16 x i8>*
  %649 = load <16 x i8>, <16 x i8>* %648, align 1
  %650 = zext <16 x i8> %646 to <16 x i16>
  %651 = zext <16 x i8> %649 to <16 x i16>
  %652 = sub nsw <16 x i16> %651, %650
  %653 = shl nuw nsw <16 x i16> %650, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %654 = or <16 x i16> %653, <i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16>
  %655 = mul <16 x i16> %652, %641
  %656 = add <16 x i16> %655, %654
  %657 = lshr <16 x i16> %656, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %658 = bitcast <16 x i16> %657 to <4 x i64>
  %659 = shufflevector <4 x i64> %658, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %660 = shufflevector <2 x i64> %659, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %661 = bitcast <4 x i64> %660 to <16 x i16>
  %662 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %657, <16 x i16> %661) #8
  %663 = bitcast <32 x i8> %662 to <4 x i64>
  %664 = icmp sgt i32 %636, 16
  br i1 %664, label %665, label %685

665:                                              ; preds = %634
  %666 = getelementptr inbounds i8, i8* %643, i64 16
  %667 = bitcast i8* %666 to <16 x i8>*
  %668 = load <16 x i8>, <16 x i8>* %667, align 1
  %669 = getelementptr inbounds i8, i8* %666, i64 1
  %670 = bitcast i8* %669 to <16 x i8>*
  %671 = load <16 x i8>, <16 x i8>* %670, align 1
  %672 = zext <16 x i8> %668 to <16 x i16>
  %673 = zext <16 x i8> %671 to <16 x i16>
  %674 = sub nsw <16 x i16> %673, %672
  %675 = shl nuw nsw <16 x i16> %672, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %676 = or <16 x i16> %675, <i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16>
  %677 = mul <16 x i16> %674, %641
  %678 = add <16 x i16> %677, %676
  %679 = lshr <16 x i16> %678, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %680 = bitcast <16 x i16> %679 to <4 x i64>
  %681 = shufflevector <4 x i64> %680, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %682 = shufflevector <2 x i64> %681, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %683 = bitcast <4 x i64> %682 to <16 x i16>
  %684 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %679, <16 x i16> %683) #8
  br label %685

685:                                              ; preds = %665, %634
  %686 = phi <32 x i8> [ %684, %665 ], [ %576, %634 ]
  %687 = bitcast <32 x i8> %686 to <4 x i64>
  %688 = shufflevector <4 x i64> %663, <4 x i64> %687, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %689 = getelementptr inbounds [33 x [32 x i8]], [33 x [32 x i8]]* bitcast (<{ [32 x i8], <{ i8, [31 x i8] }>, <{ i8, i8, [30 x i8] }>, <{ i8, i8, i8, [29 x i8] }>, <{ i8, i8, i8, i8, [28 x i8] }>, <{ i8, i8, i8, i8, i8, [27 x i8] }>, <{ i8, i8, i8, i8, i8, i8, [26 x i8] }>, <{ i8, i8, i8, i8, i8, i8, i8, [25 x i8] }>, <{ [8 x i8], [24 x i8] }>, <{ [9 x i8], [23 x i8] }>, <{ [10 x i8], [22 x i8] }>, <{ [11 x i8], [21 x i8] }>, <{ [12 x i8], [20 x i8] }>, <{ [13 x i8], [19 x i8] }>, <{ [14 x i8], [18 x i8] }>, <{ [15 x i8], [17 x i8] }>, <{ [16 x i8], [16 x i8] }>, <{ [17 x i8], [15 x i8] }>, <{ [18 x i8], [14 x i8] }>, <{ [19 x i8], [13 x i8] }>, <{ [20 x i8], [12 x i8] }>, <{ [21 x i8], [11 x i8] }>, <{ [22 x i8], [10 x i8] }>, <{ [23 x i8], [9 x i8] }>, <{ [24 x i8], [8 x i8] }>, [32 x i8], [32 x i8], [32 x i8], [32 x i8], [32 x i8], [32 x i8], [32 x i8], [32 x i8] }>* @BaseMask to [33 x [32 x i8]]*), i64 0, i64 %644, i64 0
  %690 = bitcast i8* %689 to <32 x i8>*
  %691 = load <32 x i8>, <32 x i8>* %690, align 32
  %692 = bitcast <4 x i64> %688 to <32 x i8>
  %693 = tail call <32 x i8> @llvm.x86.avx2.pblendvb(<32 x i8> %576, <32 x i8> %692, <32 x i8> %691) #8
  %694 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %12, i64 0, i64 %581
  %695 = bitcast <4 x i64>* %694 to <32 x i8>*
  store <32 x i8> %693, <32 x i8>* %695, align 32
  %696 = add nsw i32 %582, %7
  %697 = add nuw nsw i64 %581, 1
  %698 = icmp eq i64 %697, %579
  br i1 %698, label %699, label %580

699:                                              ; preds = %685, %604, %607, %586
  %700 = add nsw i64 %579, -1
  %701 = and i64 %579, 3
  %702 = icmp ult i64 %700, 3
  br i1 %702, label %734, label %703

703:                                              ; preds = %699
  %704 = sub nsw i64 %579, %701
  br label %705

705:                                              ; preds = %705, %703
  %706 = phi i64 [ 0, %703 ], [ %731, %705 ]
  %707 = phi i64 [ %704, %703 ], [ %732, %705 ]
  %708 = mul nsw i64 %706, %1
  %709 = getelementptr inbounds i8, i8* %0, i64 %708
  %710 = bitcast i8* %709 to <4 x i64>*
  %711 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %12, i64 0, i64 %706
  %712 = load <4 x i64>, <4 x i64>* %711, align 32
  store <4 x i64> %712, <4 x i64>* %710, align 1
  %713 = or i64 %706, 1
  %714 = mul nsw i64 %713, %1
  %715 = getelementptr inbounds i8, i8* %0, i64 %714
  %716 = bitcast i8* %715 to <4 x i64>*
  %717 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %12, i64 0, i64 %713
  %718 = load <4 x i64>, <4 x i64>* %717, align 32
  store <4 x i64> %718, <4 x i64>* %716, align 1
  %719 = or i64 %706, 2
  %720 = mul nsw i64 %719, %1
  %721 = getelementptr inbounds i8, i8* %0, i64 %720
  %722 = bitcast i8* %721 to <4 x i64>*
  %723 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %12, i64 0, i64 %719
  %724 = load <4 x i64>, <4 x i64>* %723, align 32
  store <4 x i64> %724, <4 x i64>* %722, align 1
  %725 = or i64 %706, 3
  %726 = mul nsw i64 %725, %1
  %727 = getelementptr inbounds i8, i8* %0, i64 %726
  %728 = bitcast i8* %727 to <4 x i64>*
  %729 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %12, i64 0, i64 %725
  %730 = load <4 x i64>, <4 x i64>* %729, align 32
  store <4 x i64> %730, <4 x i64>* %728, align 1
  %731 = add nuw nsw i64 %706, 4
  %732 = add i64 %707, -4
  %733 = icmp eq i64 %732, 0
  br i1 %733, label %734, label %705

734:                                              ; preds = %705, %699
  %735 = phi i64 [ 0, %699 ], [ %731, %705 ]
  %736 = icmp eq i64 %701, 0
  br i1 %736, label %748, label %737

737:                                              ; preds = %734, %737
  %738 = phi i64 [ %745, %737 ], [ %735, %734 ]
  %739 = phi i64 [ %746, %737 ], [ %701, %734 ]
  %740 = mul nsw i64 %738, %1
  %741 = getelementptr inbounds i8, i8* %0, i64 %740
  %742 = bitcast i8* %741 to <4 x i64>*
  %743 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %12, i64 0, i64 %738
  %744 = load <4 x i64>, <4 x i64>* %743, align 32
  store <4 x i64> %744, <4 x i64>* %742, align 1
  %745 = add nuw nsw i64 %738, 1
  %746 = add i64 %739, -1
  %747 = icmp eq i64 %746, 0
  br i1 %747, label %748, label %737, !llvm.loop !42

748:                                              ; preds = %734, %737, %569
  call void @llvm.lifetime.end.p0i8(i64 2048, i8* nonnull %570) #8
  br label %914

749:                                              ; preds = %9
  %750 = add nsw i32 %3, 63
  %751 = sext i32 %750 to i64
  %752 = getelementptr inbounds i8, i8* %4, i64 %751
  %753 = load i8, i8* %752, align 1
  %754 = insertelement <32 x i8> undef, i8 %753, i32 0
  %755 = shufflevector <32 x i8> %754, <32 x i8> undef, <32 x i32> zeroinitializer
  %756 = trunc i32 %750 to i8
  %757 = insertelement <16 x i8> undef, i8 %756, i32 0
  %758 = shufflevector <16 x i8> %757, <16 x i8> undef, <16 x i32> zeroinitializer
  %759 = icmp sgt i32 %3, 0
  br i1 %759, label %760, label %914

760:                                              ; preds = %749
  %761 = bitcast <32 x i8> %755 to <4 x i64>
  %762 = shufflevector <4 x i64> %761, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %763 = bitcast <2 x i64> %762 to <16 x i8>
  br label %764

764:                                              ; preds = %909, %760
  %765 = phi i8* [ %0, %760 ], [ %912, %909 ]
  %766 = phi i32 [ 0, %760 ], [ %911, %909 ]
  %767 = phi i32 [ %7, %760 ], [ %910, %909 ]
  %768 = ashr i32 %767, 6
  %769 = icmp slt i32 %768, %750
  br i1 %769, label %830, label %770

770:                                              ; preds = %764
  %771 = icmp slt i32 %766, %3
  br i1 %771, label %772, label %914

772:                                              ; preds = %770
  %773 = sub i32 %3, %766
  %774 = xor i32 %766, -1
  %775 = add i32 %774, %3
  %776 = and i32 %773, 7
  %777 = icmp eq i32 %776, 0
  br i1 %777, label %789, label %778

778:                                              ; preds = %772, %778
  %779 = phi i8* [ %785, %778 ], [ %765, %772 ]
  %780 = phi i32 [ %786, %778 ], [ %766, %772 ]
  %781 = phi i32 [ %787, %778 ], [ %776, %772 ]
  %782 = bitcast i8* %779 to <32 x i8>*
  store <32 x i8> %755, <32 x i8>* %782, align 1
  %783 = getelementptr inbounds i8, i8* %779, i64 32
  %784 = bitcast i8* %783 to <32 x i8>*
  store <32 x i8> %755, <32 x i8>* %784, align 1
  %785 = getelementptr inbounds i8, i8* %779, i64 %1
  %786 = add nuw nsw i32 %780, 1
  %787 = add i32 %781, -1
  %788 = icmp eq i32 %787, 0
  br i1 %788, label %789, label %778, !llvm.loop !43

789:                                              ; preds = %778, %772
  %790 = phi i8* [ %765, %772 ], [ %785, %778 ]
  %791 = phi i32 [ %766, %772 ], [ %786, %778 ]
  %792 = icmp ult i32 %775, 7
  br i1 %792, label %914, label %793

793:                                              ; preds = %789, %793
  %794 = phi i8* [ %827, %793 ], [ %790, %789 ]
  %795 = phi i32 [ %828, %793 ], [ %791, %789 ]
  %796 = bitcast i8* %794 to <32 x i8>*
  store <32 x i8> %755, <32 x i8>* %796, align 1
  %797 = getelementptr inbounds i8, i8* %794, i64 32
  %798 = bitcast i8* %797 to <32 x i8>*
  store <32 x i8> %755, <32 x i8>* %798, align 1
  %799 = getelementptr inbounds i8, i8* %794, i64 %1
  %800 = bitcast i8* %799 to <32 x i8>*
  store <32 x i8> %755, <32 x i8>* %800, align 1
  %801 = getelementptr inbounds i8, i8* %799, i64 32
  %802 = bitcast i8* %801 to <32 x i8>*
  store <32 x i8> %755, <32 x i8>* %802, align 1
  %803 = getelementptr inbounds i8, i8* %799, i64 %1
  %804 = bitcast i8* %803 to <32 x i8>*
  store <32 x i8> %755, <32 x i8>* %804, align 1
  %805 = getelementptr inbounds i8, i8* %803, i64 32
  %806 = bitcast i8* %805 to <32 x i8>*
  store <32 x i8> %755, <32 x i8>* %806, align 1
  %807 = getelementptr inbounds i8, i8* %803, i64 %1
  %808 = bitcast i8* %807 to <32 x i8>*
  store <32 x i8> %755, <32 x i8>* %808, align 1
  %809 = getelementptr inbounds i8, i8* %807, i64 32
  %810 = bitcast i8* %809 to <32 x i8>*
  store <32 x i8> %755, <32 x i8>* %810, align 1
  %811 = getelementptr inbounds i8, i8* %807, i64 %1
  %812 = bitcast i8* %811 to <32 x i8>*
  store <32 x i8> %755, <32 x i8>* %812, align 1
  %813 = getelementptr inbounds i8, i8* %811, i64 32
  %814 = bitcast i8* %813 to <32 x i8>*
  store <32 x i8> %755, <32 x i8>* %814, align 1
  %815 = getelementptr inbounds i8, i8* %811, i64 %1
  %816 = bitcast i8* %815 to <32 x i8>*
  store <32 x i8> %755, <32 x i8>* %816, align 1
  %817 = getelementptr inbounds i8, i8* %815, i64 32
  %818 = bitcast i8* %817 to <32 x i8>*
  store <32 x i8> %755, <32 x i8>* %818, align 1
  %819 = getelementptr inbounds i8, i8* %815, i64 %1
  %820 = bitcast i8* %819 to <32 x i8>*
  store <32 x i8> %755, <32 x i8>* %820, align 1
  %821 = getelementptr inbounds i8, i8* %819, i64 32
  %822 = bitcast i8* %821 to <32 x i8>*
  store <32 x i8> %755, <32 x i8>* %822, align 1
  %823 = getelementptr inbounds i8, i8* %819, i64 %1
  %824 = bitcast i8* %823 to <32 x i8>*
  store <32 x i8> %755, <32 x i8>* %824, align 1
  %825 = getelementptr inbounds i8, i8* %823, i64 32
  %826 = bitcast i8* %825 to <32 x i8>*
  store <32 x i8> %755, <32 x i8>* %826, align 1
  %827 = getelementptr inbounds i8, i8* %823, i64 %1
  %828 = add nuw nsw i32 %795, 8
  %829 = icmp eq i32 %828, %3
  br i1 %829, label %914, label %793

830:                                              ; preds = %764
  %831 = trunc i32 %767 to i16
  %832 = insertelement <16 x i16> undef, i16 %831, i32 0
  %833 = and <16 x i16> %832, <i16 63, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef>
  %834 = lshr <16 x i16> %833, <i16 1, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0>
  %835 = shufflevector <16 x i16> %834, <16 x i16> undef, <16 x i32> zeroinitializer
  %836 = sext i32 %768 to i64
  %837 = getelementptr inbounds i8, i8* %4, i64 %836
  %838 = getelementptr inbounds i8, i8* %837, i64 1
  br label %839

839:                                              ; preds = %906, %830
  %840 = phi i64 [ 0, %830 ], [ %907, %906 ]
  %841 = add nsw i64 %840, %836
  %842 = icmp slt i64 %841, %751
  br i1 %842, label %846, label %843

843:                                              ; preds = %839
  %844 = getelementptr inbounds i8, i8* %765, i64 %840
  %845 = bitcast i8* %844 to <2 x i64>*
  store <2 x i64> %762, <2 x i64>* %845, align 1
  br label %906

846:                                              ; preds = %839
  %847 = getelementptr inbounds i8, i8* %837, i64 %840
  %848 = bitcast i8* %847 to <16 x i8>*
  %849 = load <16 x i8>, <16 x i8>* %848, align 1
  %850 = getelementptr inbounds i8, i8* %838, i64 %840
  %851 = bitcast i8* %850 to <16 x i8>*
  %852 = load <16 x i8>, <16 x i8>* %851, align 1
  %853 = zext <16 x i8> %849 to <16 x i16>
  %854 = zext <16 x i8> %852 to <16 x i16>
  %855 = sub nsw <16 x i16> %854, %853
  %856 = shl nuw nsw <16 x i16> %853, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %857 = or <16 x i16> %856, <i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16>
  %858 = mul <16 x i16> %855, %835
  %859 = add <16 x i16> %858, %857
  %860 = lshr <16 x i16> %859, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %861 = bitcast <16 x i16> %860 to <4 x i64>
  %862 = shufflevector <4 x i64> %861, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %863 = shufflevector <2 x i64> %862, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %864 = bitcast <4 x i64> %863 to <16 x i16>
  %865 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %860, <16 x i16> %864) #8
  %866 = bitcast <32 x i8> %865 to <4 x i64>
  %867 = trunc i64 %841 to i8
  %868 = add i8 %867, 1
  %869 = add i8 %867, 2
  %870 = add i8 %867, 3
  %871 = add i8 %867, 4
  %872 = add i8 %867, 5
  %873 = add i8 %867, 6
  %874 = add i8 %867, 7
  %875 = add i8 %867, 8
  %876 = add i8 %867, 9
  %877 = add i8 %867, 10
  %878 = add i8 %867, 11
  %879 = add i8 %867, 12
  %880 = add i8 %867, 13
  %881 = add i8 %867, 14
  %882 = add i8 %867, 15
  %883 = insertelement <16 x i8> undef, i8 %867, i32 0
  %884 = insertelement <16 x i8> %883, i8 %868, i32 1
  %885 = insertelement <16 x i8> %884, i8 %869, i32 2
  %886 = insertelement <16 x i8> %885, i8 %870, i32 3
  %887 = insertelement <16 x i8> %886, i8 %871, i32 4
  %888 = insertelement <16 x i8> %887, i8 %872, i32 5
  %889 = insertelement <16 x i8> %888, i8 %873, i32 6
  %890 = insertelement <16 x i8> %889, i8 %874, i32 7
  %891 = insertelement <16 x i8> %890, i8 %875, i32 8
  %892 = insertelement <16 x i8> %891, i8 %876, i32 9
  %893 = insertelement <16 x i8> %892, i8 %877, i32 10
  %894 = insertelement <16 x i8> %893, i8 %878, i32 11
  %895 = insertelement <16 x i8> %894, i8 %879, i32 12
  %896 = insertelement <16 x i8> %895, i8 %880, i32 13
  %897 = insertelement <16 x i8> %896, i8 %881, i32 14
  %898 = insertelement <16 x i8> %897, i8 %882, i32 15
  %899 = tail call <16 x i8> @llvm.usub.sat.v16i8(<16 x i8> %758, <16 x i8> %898) #8
  %900 = icmp sgt <16 x i8> %899, zeroinitializer
  %901 = shufflevector <4 x i64> %866, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %902 = bitcast <2 x i64> %901 to <16 x i8>
  %903 = select <16 x i1> %900, <16 x i8> %902, <16 x i8> %763
  %904 = getelementptr inbounds i8, i8* %765, i64 %840
  %905 = bitcast i8* %904 to <16 x i8>*
  store <16 x i8> %903, <16 x i8>* %905, align 1
  br label %906

906:                                              ; preds = %846, %843
  %907 = add nuw nsw i64 %840, 16
  %908 = icmp ult i64 %907, 64
  br i1 %908, label %839, label %909

909:                                              ; preds = %906
  %910 = add nsw i32 %767, %7
  %911 = add nuw nsw i32 %766, 1
  %912 = getelementptr inbounds i8, i8* %765, i64 %1
  %913 = icmp eq i32 %911, %3
  br i1 %913, label %914, label %764

914:                                              ; preds = %909, %789, %793, %770, %749, %9, %748, %568, %388, %203
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_dr_prediction_z2_avx2(i8* nocapture, i64, i32, i32, i8* nocapture readonly, i8*, i32, i32, i32, i32) local_unnamed_addr #0 {
  switch i32 %2, label %447 [
    i32 4, label %11
    i32 8, label %199
  ]

11:                                               ; preds = %10
  %12 = shl i32 -1, %6
  %13 = shl i32 -1, %7
  %14 = sub nsw i32 6, %6
  %15 = sub nsw i32 6, %7
  %16 = trunc i32 %13 to i16
  %17 = insertelement <8 x i16> undef, i16 %16, i32 0
  %18 = shufflevector <8 x i16> %17, <8 x i16> undef, <8 x i32> zeroinitializer
  %19 = icmp sgt i32 %3, 0
  br i1 %19, label %20, label %806

20:                                               ; preds = %11
  %21 = trunc i32 %9 to i16
  %22 = insertelement <8 x i16> undef, i16 %21, i32 0
  %23 = shufflevector <8 x i16> %22, <8 x i16> undef, <8 x i32> zeroinitializer
  %24 = add nsw i32 %12, -1
  %25 = add i32 %12, %6
  %26 = icmp eq i32 %6, 0
  %27 = mul <8 x i16> %23, <i16 -1, i16 -2, i16 -3, i16 -4, i16 0, i16 0, i16 0, i16 0>
  %28 = icmp eq i32 %7, 0
  br label %29

29:                                               ; preds = %174, %20
  %30 = phi i8* [ %0, %20 ], [ %197, %174 ]
  %31 = phi i32 [ 0, %20 ], [ %32, %174 ]
  %32 = add nuw nsw i32 %31, 1
  %33 = xor i32 %31, -1
  %34 = mul nsw i32 %33, %8
  %35 = ashr i32 %34, %14
  %36 = icmp slt i32 %35, %24
  br i1 %36, label %37, label %41

37:                                               ; preds = %29
  %38 = xor i32 %35, -1
  %39 = add i32 %12, %38
  %40 = ashr i32 %39, %6
  br label %41

41:                                               ; preds = %37, %29
  %42 = phi i32 [ %40, %37 ], [ 0, %29 ]
  %43 = sub i32 %25, %35
  %44 = ashr i32 %43, %6
  %45 = icmp sgt i32 %44, 0
  %46 = select i1 %45, i32 %44, i32 0
  %47 = icmp slt i32 %46, 4
  %48 = select i1 %47, i32 %46, i32 4
  %49 = icmp sgt i32 %42, 3
  br i1 %49, label %91, label %50

50:                                               ; preds = %41
  %51 = sext i32 %35 to i64
  %52 = getelementptr inbounds i8, i8* %4, i64 %51
  %53 = sext i32 %42 to i64
  %54 = getelementptr inbounds i8, i8* %52, i64 %53
  %55 = bitcast i8* %54 to <2 x i64>*
  %56 = load <2 x i64>, <2 x i64>* %55, align 1
  %57 = mul nsw i32 %32, %8
  %58 = trunc i32 %57 to i16
  %59 = insertelement <8 x i16> undef, i16 %58, i32 0
  %60 = shufflevector <8 x i16> %59, <8 x i16> undef, <8 x i32> zeroinitializer
  br i1 %26, label %70, label %61

61:                                               ; preds = %50
  %62 = getelementptr inbounds [8 x [16 x i8]], [8 x [16 x i8]]* @EvenOddMaskx, i64 0, i64 %53, i64 0
  %63 = bitcast i8* %62 to <16 x i8>*
  %64 = load <16 x i8>, <16 x i8>* %63, align 16
  %65 = bitcast <2 x i64> %56 to <16 x i8>
  %66 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %65, <16 x i8> %64) #8
  %67 = shufflevector <16 x i8> %66, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %68 = sub <8 x i16> <i16 0, i16 64, i16 128, i16 192, i16 256, i16 0, i16 0, i16 0>, %60
  %69 = tail call <8 x i16> @llvm.x86.sse2.pslli.w(<8 x i16> %68, i32 %6) #8
  br label %78

70:                                               ; preds = %50
  %71 = getelementptr inbounds [16 x [16 x i8]], [16 x [16 x i8]]* @LoadMaskx, i64 0, i64 %53, i64 0
  %72 = bitcast i8* %71 to <16 x i8>*
  %73 = load <16 x i8>, <16 x i8>* %72, align 16
  %74 = bitcast <2 x i64> %56 to <16 x i8>
  %75 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %74, <16 x i8> %73) #8
  %76 = shufflevector <16 x i8> %75, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16>
  %77 = sub <8 x i16> <i16 0, i16 64, i16 128, i16 192, i16 256, i16 0, i16 0, i16 0>, %60
  br label %78

78:                                               ; preds = %70, %61
  %79 = phi <8 x i16> [ %69, %61 ], [ %77, %70 ]
  %80 = phi <16 x i8> [ %66, %61 ], [ %75, %70 ]
  %81 = phi <16 x i8> [ %67, %61 ], [ %76, %70 ]
  %82 = lshr <8 x i16> %79, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %83 = bitcast <8 x i16> %82 to <2 x i64>
  %84 = and <2 x i64> %83, <i64 8725857424048159, i64 8725857424048159>
  %85 = shufflevector <16 x i8> %80, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %86 = zext <8 x i8> %85 to <8 x i16>
  %87 = bitcast <8 x i16> %86 to <2 x i64>
  %88 = shufflevector <16 x i8> %81, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %89 = zext <8 x i8> %88 to <8 x i16>
  %90 = bitcast <8 x i16> %89 to <2 x i64>
  br label %91

91:                                               ; preds = %78, %41
  %92 = phi <2 x i64> [ %87, %78 ], [ zeroinitializer, %41 ]
  %93 = phi <2 x i64> [ %90, %78 ], [ zeroinitializer, %41 ]
  %94 = phi <2 x i64> [ %84, %78 ], [ zeroinitializer, %41 ]
  %95 = icmp sgt i32 %12, %35
  br i1 %95, label %96, label %174

96:                                               ; preds = %91
  %97 = trunc i32 %31 to i16
  %98 = shl i16 %97, 6
  %99 = insertelement <8 x i16> undef, i16 %98, i32 0
  %100 = shufflevector <8 x i16> %99, <8 x i16> undef, <8 x i32> zeroinitializer
  %101 = add <8 x i16> %100, %27
  %102 = tail call <8 x i16> @llvm.x86.sse2.psrai.w(<8 x i16> %101, i32 %15) #8
  %103 = bitcast <8 x i16> %102 to <2 x i64>
  %104 = icmp sgt <8 x i16> %18, %102
  %105 = sext <8 x i1> %104 to <8 x i16>
  %106 = bitcast <8 x i16> %105 to <2 x i64>
  %107 = xor <2 x i64> %106, <i64 -1, i64 -1>
  %108 = and <2 x i64> %107, %103
  %109 = extractelement <2 x i64> %108, i32 0
  %110 = shl i64 %109, 48
  %111 = ashr exact i64 %110, 48
  %112 = getelementptr inbounds i8, i8* %5, i64 %111
  %113 = load i8, i8* %112, align 1
  %114 = zext i8 %113 to i16
  %115 = bitcast <2 x i64> %108 to <8 x i16>
  %116 = extractelement <8 x i16> %115, i32 1
  %117 = sext i16 %116 to i64
  %118 = getelementptr inbounds i8, i8* %5, i64 %117
  %119 = load i8, i8* %118, align 1
  %120 = zext i8 %119 to i16
  %121 = extractelement <8 x i16> %115, i32 2
  %122 = sext i16 %121 to i64
  %123 = getelementptr inbounds i8, i8* %5, i64 %122
  %124 = load i8, i8* %123, align 1
  %125 = zext i8 %124 to i16
  %126 = extractelement <8 x i16> %115, i32 3
  %127 = sext i16 %126 to i64
  %128 = getelementptr inbounds i8, i8* %5, i64 %127
  %129 = load i8, i8* %128, align 1
  %130 = zext i8 %129 to i16
  %131 = insertelement <8 x i16> undef, i16 %114, i32 0
  %132 = insertelement <8 x i16> %131, i16 %120, i32 1
  %133 = insertelement <8 x i16> %132, i16 %125, i32 2
  %134 = insertelement <8 x i16> %133, i16 %130, i32 3
  %135 = bitcast <8 x i16> %134 to <2 x i64>
  %136 = add <8 x i16> %115, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %137 = bitcast <8 x i16> %136 to <2 x i64>
  %138 = extractelement <2 x i64> %137, i32 0
  %139 = shl i64 %138, 48
  %140 = ashr exact i64 %139, 48
  %141 = getelementptr inbounds i8, i8* %5, i64 %140
  %142 = load i8, i8* %141, align 1
  %143 = zext i8 %142 to i16
  %144 = extractelement <8 x i16> %136, i32 1
  %145 = sext i16 %144 to i64
  %146 = getelementptr inbounds i8, i8* %5, i64 %145
  %147 = load i8, i8* %146, align 1
  %148 = zext i8 %147 to i16
  %149 = extractelement <8 x i16> %136, i32 2
  %150 = sext i16 %149 to i64
  %151 = getelementptr inbounds i8, i8* %5, i64 %150
  %152 = load i8, i8* %151, align 1
  %153 = zext i8 %152 to i16
  %154 = extractelement <8 x i16> %136, i32 3
  %155 = sext i16 %154 to i64
  %156 = getelementptr inbounds i8, i8* %5, i64 %155
  %157 = load i8, i8* %156, align 1
  %158 = zext i8 %157 to i16
  %159 = insertelement <8 x i16> undef, i16 %143, i32 0
  %160 = insertelement <8 x i16> %159, i16 %148, i32 1
  %161 = insertelement <8 x i16> %160, i16 %153, i32 2
  %162 = insertelement <8 x i16> %161, i16 %158, i32 3
  %163 = bitcast <8 x i16> %162 to <2 x i64>
  br i1 %28, label %166, label %164

164:                                              ; preds = %96
  %165 = tail call <8 x i16> @llvm.x86.sse2.pslli.w(<8 x i16> %101, i32 %7) #8
  br label %166

166:                                              ; preds = %164, %96
  %167 = phi <8 x i16> [ %165, %164 ], [ %101, %96 ]
  %168 = lshr <8 x i16> %167, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %169 = bitcast <8 x i16> %168 to <2 x i64>
  %170 = and <2 x i64> %169, <i64 8725857424048159, i64 undef>
  %171 = shufflevector <2 x i64> %92, <2 x i64> %135, <2 x i32> <i32 0, i32 2>
  %172 = shufflevector <2 x i64> %93, <2 x i64> %163, <2 x i32> <i32 0, i32 2>
  %173 = shufflevector <2 x i64> %94, <2 x i64> %170, <2 x i32> <i32 0, i32 2>
  br label %174

174:                                              ; preds = %166, %91
  %175 = phi <2 x i64> [ %171, %166 ], [ %92, %91 ]
  %176 = phi <2 x i64> [ %172, %166 ], [ %93, %91 ]
  %177 = phi <2 x i64> [ %173, %166 ], [ %94, %91 ]
  %178 = bitcast <2 x i64> %176 to <8 x i16>
  %179 = bitcast <2 x i64> %175 to <8 x i16>
  %180 = sub <8 x i16> %178, %179
  %181 = shl <8 x i16> %179, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %182 = or <8 x i16> %181, <i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16>
  %183 = bitcast <2 x i64> %177 to <8 x i16>
  %184 = mul <8 x i16> %180, %183
  %185 = add <8 x i16> %184, %182
  %186 = lshr <8 x i16> %185, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %187 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %186, <8 x i16> %186) #8
  %188 = shufflevector <16 x i8> %187, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %189 = zext i32 %48 to i64
  %190 = getelementptr inbounds [33 x [32 x i8]], [33 x [32 x i8]]* bitcast (<{ [32 x i8], <{ i8, [31 x i8] }>, <{ i8, i8, [30 x i8] }>, <{ i8, i8, i8, [29 x i8] }>, <{ i8, i8, i8, i8, [28 x i8] }>, <{ i8, i8, i8, i8, i8, [27 x i8] }>, <{ i8, i8, i8, i8, i8, i8, [26 x i8] }>, <{ i8, i8, i8, i8, i8, i8, i8, [25 x i8] }>, <{ [8 x i8], [24 x i8] }>, <{ [9 x i8], [23 x i8] }>, <{ [10 x i8], [22 x i8] }>, <{ [11 x i8], [21 x i8] }>, <{ [12 x i8], [20 x i8] }>, <{ [13 x i8], [19 x i8] }>, <{ [14 x i8], [18 x i8] }>, <{ [15 x i8], [17 x i8] }>, <{ [16 x i8], [16 x i8] }>, <{ [17 x i8], [15 x i8] }>, <{ [18 x i8], [14 x i8] }>, <{ [19 x i8], [13 x i8] }>, <{ [20 x i8], [12 x i8] }>, <{ [21 x i8], [11 x i8] }>, <{ [22 x i8], [10 x i8] }>, <{ [23 x i8], [9 x i8] }>, <{ [24 x i8], [8 x i8] }>, [32 x i8], [32 x i8], [32 x i8], [32 x i8], [32 x i8], [32 x i8], [32 x i8], [32 x i8] }>* @BaseMask to [33 x [32 x i8]]*), i64 0, i64 %189, i64 0
  %191 = bitcast i8* %190 to <16 x i8>*
  %192 = load <16 x i8>, <16 x i8>* %191, align 32
  %193 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %187, <16 x i8> %188, <16 x i8> %192) #8
  %194 = bitcast <16 x i8> %193 to <4 x i32>
  %195 = extractelement <4 x i32> %194, i32 0
  %196 = bitcast i8* %30 to i32*
  store i32 %195, i32* %196, align 4
  %197 = getelementptr inbounds i8, i8* %30, i64 %1
  %198 = icmp eq i32 %32, %3
  br i1 %198, label %806, label %29

199:                                              ; preds = %10
  %200 = shl i32 -1, %6
  %201 = shl i32 -1, %7
  %202 = sub nsw i32 6, %6
  %203 = sub nsw i32 6, %7
  %204 = trunc i32 %201 to i16
  %205 = insertelement <8 x i16> undef, i16 %204, i32 0
  %206 = shufflevector <8 x i16> %205, <8 x i16> undef, <8 x i32> zeroinitializer
  %207 = icmp sgt i32 %3, 0
  br i1 %207, label %208, label %806

208:                                              ; preds = %199
  %209 = trunc i32 %9 to i16
  %210 = insertelement <8 x i16> undef, i16 %209, i32 0
  %211 = shufflevector <8 x i16> %210, <8 x i16> undef, <8 x i32> zeroinitializer
  %212 = add nsw i32 %200, -1
  %213 = add i32 %200, %6
  %214 = icmp eq i32 %6, 0
  %215 = mul <8 x i16> %211, <i16 -1, i16 -2, i16 -3, i16 -4, i16 -5, i16 -6, i16 -7, i16 -8>
  %216 = icmp eq i32 %7, 0
  br label %217

217:                                              ; preds = %417, %208
  %218 = phi i8* [ %0, %208 ], [ %445, %417 ]
  %219 = phi i32 [ 0, %208 ], [ %220, %417 ]
  %220 = add nuw nsw i32 %219, 1
  %221 = xor i32 %219, -1
  %222 = mul nsw i32 %221, %8
  %223 = ashr i32 %222, %202
  %224 = icmp slt i32 %223, %212
  br i1 %224, label %225, label %229

225:                                              ; preds = %217
  %226 = xor i32 %223, -1
  %227 = add i32 %200, %226
  %228 = ashr i32 %227, %6
  br label %229

229:                                              ; preds = %225, %217
  %230 = phi i32 [ %228, %225 ], [ 0, %217 ]
  %231 = sub i32 %213, %223
  %232 = ashr i32 %231, %6
  %233 = icmp sgt i32 %232, 0
  %234 = select i1 %233, i32 %232, i32 0
  %235 = icmp slt i32 %234, 8
  %236 = select i1 %235, i32 %234, i32 8
  %237 = icmp sgt i32 %230, 7
  br i1 %237, label %283, label %238

238:                                              ; preds = %229
  %239 = sext i32 %223 to i64
  %240 = getelementptr inbounds i8, i8* %4, i64 %239
  %241 = sext i32 %230 to i64
  %242 = getelementptr inbounds i8, i8* %240, i64 %241
  %243 = bitcast i8* %242 to <2 x i64>*
  %244 = load <2 x i64>, <2 x i64>* %243, align 1
  %245 = mul nsw i32 %220, %8
  %246 = trunc i32 %245 to i16
  %247 = insertelement <8 x i16> undef, i16 %246, i32 0
  %248 = shufflevector <8 x i16> %247, <8 x i16> undef, <8 x i32> zeroinitializer
  br i1 %214, label %258, label %249

249:                                              ; preds = %238
  %250 = getelementptr inbounds [8 x [16 x i8]], [8 x [16 x i8]]* @EvenOddMaskx, i64 0, i64 %241, i64 0
  %251 = bitcast i8* %250 to <16 x i8>*
  %252 = load <16 x i8>, <16 x i8>* %251, align 16
  %253 = bitcast <2 x i64> %244 to <16 x i8>
  %254 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %253, <16 x i8> %252) #8
  %255 = shufflevector <16 x i8> %254, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %256 = sub <8 x i16> <i16 128, i16 192, i16 256, i16 320, i16 384, i16 448, i16 512, i16 0>, %248
  %257 = tail call <8 x i16> @llvm.x86.sse2.pslli.w(<8 x i16> %256, i32 %6) #8
  br label %267

258:                                              ; preds = %238
  %259 = bitcast <2 x i64> %244 to <16 x i8>
  %260 = shufflevector <16 x i8> %259, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16>
  %261 = getelementptr inbounds [16 x [16 x i8]], [16 x [16 x i8]]* @LoadMaskx, i64 0, i64 %241, i64 0
  %262 = bitcast i8* %261 to <16 x i8>*
  %263 = load <16 x i8>, <16 x i8>* %262, align 16
  %264 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %259, <16 x i8> %263) #8
  %265 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %260, <16 x i8> %263) #8
  %266 = sub <8 x i16> <i16 128, i16 192, i16 256, i16 320, i16 384, i16 448, i16 512, i16 0>, %248
  br label %267

267:                                              ; preds = %258, %249
  %268 = phi <8 x i16> [ %266, %258 ], [ %257, %249 ]
  %269 = phi <16 x i8> [ %264, %258 ], [ %254, %249 ]
  %270 = phi <16 x i8> [ %265, %258 ], [ %255, %249 ]
  %271 = lshr <8 x i16> %268, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %272 = bitcast <8 x i16> %271 to <2 x i64>
  %273 = and <2 x i64> %272, <i64 8725857424048159, i64 8725857424048159>
  %274 = shufflevector <2 x i64> %273, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %275 = shufflevector <16 x i8> %269, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %276 = zext <8 x i8> %275 to <8 x i16>
  %277 = bitcast <8 x i16> %276 to <2 x i64>
  %278 = shufflevector <2 x i64> %277, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %279 = shufflevector <16 x i8> %270, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %280 = zext <8 x i8> %279 to <8 x i16>
  %281 = bitcast <8 x i16> %280 to <2 x i64>
  %282 = shufflevector <2 x i64> %281, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  br label %283

283:                                              ; preds = %267, %229
  %284 = phi <4 x i64> [ %278, %267 ], [ zeroinitializer, %229 ]
  %285 = phi <4 x i64> [ %282, %267 ], [ zeroinitializer, %229 ]
  %286 = phi <4 x i64> [ %274, %267 ], [ zeroinitializer, %229 ]
  %287 = icmp sgt i32 %200, %223
  br i1 %287, label %288, label %417

288:                                              ; preds = %283
  %289 = trunc i32 %219 to i16
  %290 = shl i16 %289, 6
  %291 = insertelement <8 x i16> undef, i16 %290, i32 0
  %292 = shufflevector <8 x i16> %291, <8 x i16> undef, <8 x i32> zeroinitializer
  %293 = add <8 x i16> %292, %215
  %294 = tail call <8 x i16> @llvm.x86.sse2.psrai.w(<8 x i16> %293, i32 %203) #8
  %295 = bitcast <8 x i16> %294 to <2 x i64>
  %296 = icmp sgt <8 x i16> %206, %294
  %297 = sext <8 x i1> %296 to <8 x i16>
  %298 = bitcast <8 x i16> %297 to <2 x i64>
  %299 = xor <2 x i64> %298, <i64 -1, i64 -1>
  %300 = and <2 x i64> %299, %295
  %301 = extractelement <2 x i64> %300, i32 0
  %302 = shl i64 %301, 48
  %303 = ashr exact i64 %302, 48
  %304 = getelementptr inbounds i8, i8* %5, i64 %303
  %305 = load i8, i8* %304, align 1
  %306 = zext i8 %305 to i16
  %307 = bitcast <2 x i64> %300 to <8 x i16>
  %308 = extractelement <8 x i16> %307, i32 1
  %309 = sext i16 %308 to i64
  %310 = getelementptr inbounds i8, i8* %5, i64 %309
  %311 = load i8, i8* %310, align 1
  %312 = zext i8 %311 to i16
  %313 = extractelement <8 x i16> %307, i32 2
  %314 = sext i16 %313 to i64
  %315 = getelementptr inbounds i8, i8* %5, i64 %314
  %316 = load i8, i8* %315, align 1
  %317 = zext i8 %316 to i16
  %318 = extractelement <8 x i16> %307, i32 3
  %319 = sext i16 %318 to i64
  %320 = getelementptr inbounds i8, i8* %5, i64 %319
  %321 = load i8, i8* %320, align 1
  %322 = zext i8 %321 to i16
  %323 = extractelement <8 x i16> %307, i32 4
  %324 = sext i16 %323 to i64
  %325 = getelementptr inbounds i8, i8* %5, i64 %324
  %326 = load i8, i8* %325, align 1
  %327 = zext i8 %326 to i16
  %328 = extractelement <8 x i16> %307, i32 5
  %329 = sext i16 %328 to i64
  %330 = getelementptr inbounds i8, i8* %5, i64 %329
  %331 = load i8, i8* %330, align 1
  %332 = zext i8 %331 to i16
  %333 = extractelement <8 x i16> %307, i32 6
  %334 = sext i16 %333 to i64
  %335 = getelementptr inbounds i8, i8* %5, i64 %334
  %336 = load i8, i8* %335, align 1
  %337 = zext i8 %336 to i16
  %338 = extractelement <8 x i16> %307, i32 7
  %339 = sext i16 %338 to i64
  %340 = getelementptr inbounds i8, i8* %5, i64 %339
  %341 = load i8, i8* %340, align 1
  %342 = zext i8 %341 to i16
  %343 = insertelement <8 x i16> undef, i16 %306, i32 0
  %344 = insertelement <8 x i16> %343, i16 %312, i32 1
  %345 = insertelement <8 x i16> %344, i16 %317, i32 2
  %346 = insertelement <8 x i16> %345, i16 %322, i32 3
  %347 = insertelement <8 x i16> %346, i16 %327, i32 4
  %348 = insertelement <8 x i16> %347, i16 %332, i32 5
  %349 = insertelement <8 x i16> %348, i16 %337, i32 6
  %350 = insertelement <8 x i16> %349, i16 %342, i32 7
  %351 = bitcast <8 x i16> %350 to <2 x i64>
  %352 = add <8 x i16> %307, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %353 = bitcast <8 x i16> %352 to <2 x i64>
  %354 = extractelement <2 x i64> %353, i32 0
  %355 = shl i64 %354, 48
  %356 = ashr exact i64 %355, 48
  %357 = getelementptr inbounds i8, i8* %5, i64 %356
  %358 = load i8, i8* %357, align 1
  %359 = zext i8 %358 to i16
  %360 = extractelement <8 x i16> %352, i32 1
  %361 = sext i16 %360 to i64
  %362 = getelementptr inbounds i8, i8* %5, i64 %361
  %363 = load i8, i8* %362, align 1
  %364 = zext i8 %363 to i16
  %365 = extractelement <8 x i16> %352, i32 2
  %366 = sext i16 %365 to i64
  %367 = getelementptr inbounds i8, i8* %5, i64 %366
  %368 = load i8, i8* %367, align 1
  %369 = zext i8 %368 to i16
  %370 = extractelement <8 x i16> %352, i32 3
  %371 = sext i16 %370 to i64
  %372 = getelementptr inbounds i8, i8* %5, i64 %371
  %373 = load i8, i8* %372, align 1
  %374 = zext i8 %373 to i16
  %375 = extractelement <8 x i16> %352, i32 4
  %376 = sext i16 %375 to i64
  %377 = getelementptr inbounds i8, i8* %5, i64 %376
  %378 = load i8, i8* %377, align 1
  %379 = zext i8 %378 to i16
  %380 = extractelement <8 x i16> %352, i32 5
  %381 = sext i16 %380 to i64
  %382 = getelementptr inbounds i8, i8* %5, i64 %381
  %383 = load i8, i8* %382, align 1
  %384 = zext i8 %383 to i16
  %385 = extractelement <8 x i16> %352, i32 6
  %386 = sext i16 %385 to i64
  %387 = getelementptr inbounds i8, i8* %5, i64 %386
  %388 = load i8, i8* %387, align 1
  %389 = zext i8 %388 to i16
  %390 = extractelement <8 x i16> %352, i32 7
  %391 = sext i16 %390 to i64
  %392 = getelementptr inbounds i8, i8* %5, i64 %391
  %393 = load i8, i8* %392, align 1
  %394 = zext i8 %393 to i16
  %395 = insertelement <8 x i16> undef, i16 %359, i32 0
  %396 = insertelement <8 x i16> %395, i16 %364, i32 1
  %397 = insertelement <8 x i16> %396, i16 %369, i32 2
  %398 = insertelement <8 x i16> %397, i16 %374, i32 3
  %399 = insertelement <8 x i16> %398, i16 %379, i32 4
  %400 = insertelement <8 x i16> %399, i16 %384, i32 5
  %401 = insertelement <8 x i16> %400, i16 %389, i32 6
  %402 = insertelement <8 x i16> %401, i16 %394, i32 7
  %403 = bitcast <8 x i16> %402 to <2 x i64>
  br i1 %216, label %406, label %404

404:                                              ; preds = %288
  %405 = tail call <8 x i16> @llvm.x86.sse2.pslli.w(<8 x i16> %293, i32 %7) #8
  br label %406

406:                                              ; preds = %404, %288
  %407 = phi <8 x i16> [ %405, %404 ], [ %293, %288 ]
  %408 = lshr <8 x i16> %407, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %409 = bitcast <8 x i16> %408 to <2 x i64>
  %410 = and <2 x i64> %409, <i64 8725857424048159, i64 8725857424048159>
  %411 = shufflevector <2 x i64> %351, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %412 = shufflevector <4 x i64> %284, <4 x i64> %411, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %413 = shufflevector <2 x i64> %403, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %414 = shufflevector <4 x i64> %285, <4 x i64> %413, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %415 = shufflevector <2 x i64> %410, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %416 = shufflevector <4 x i64> %286, <4 x i64> %415, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  br label %417

417:                                              ; preds = %406, %283
  %418 = phi <4 x i64> [ %412, %406 ], [ %284, %283 ]
  %419 = phi <4 x i64> [ %414, %406 ], [ %285, %283 ]
  %420 = phi <4 x i64> [ %416, %406 ], [ %286, %283 ]
  %421 = bitcast <4 x i64> %419 to <16 x i16>
  %422 = bitcast <4 x i64> %418 to <16 x i16>
  %423 = sub <16 x i16> %421, %422
  %424 = shl <16 x i16> %422, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %425 = or <16 x i16> %424, <i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16>
  %426 = bitcast <4 x i64> %420 to <16 x i16>
  %427 = mul <16 x i16> %423, %426
  %428 = add <16 x i16> %427, %425
  %429 = lshr <16 x i16> %428, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %430 = bitcast <16 x i16> %429 to <4 x i64>
  %431 = shufflevector <4 x i64> %430, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %432 = bitcast <2 x i64> %431 to <8 x i16>
  %433 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %432, <8 x i16> %432) #8
  %434 = shufflevector <4 x i64> %430, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %435 = bitcast <2 x i64> %434 to <8 x i16>
  %436 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %435, <8 x i16> %435) #8
  %437 = zext i32 %236 to i64
  %438 = getelementptr inbounds [33 x [32 x i8]], [33 x [32 x i8]]* bitcast (<{ [32 x i8], <{ i8, [31 x i8] }>, <{ i8, i8, [30 x i8] }>, <{ i8, i8, i8, [29 x i8] }>, <{ i8, i8, i8, i8, [28 x i8] }>, <{ i8, i8, i8, i8, i8, [27 x i8] }>, <{ i8, i8, i8, i8, i8, i8, [26 x i8] }>, <{ i8, i8, i8, i8, i8, i8, i8, [25 x i8] }>, <{ [8 x i8], [24 x i8] }>, <{ [9 x i8], [23 x i8] }>, <{ [10 x i8], [22 x i8] }>, <{ [11 x i8], [21 x i8] }>, <{ [12 x i8], [20 x i8] }>, <{ [13 x i8], [19 x i8] }>, <{ [14 x i8], [18 x i8] }>, <{ [15 x i8], [17 x i8] }>, <{ [16 x i8], [16 x i8] }>, <{ [17 x i8], [15 x i8] }>, <{ [18 x i8], [14 x i8] }>, <{ [19 x i8], [13 x i8] }>, <{ [20 x i8], [12 x i8] }>, <{ [21 x i8], [11 x i8] }>, <{ [22 x i8], [10 x i8] }>, <{ [23 x i8], [9 x i8] }>, <{ [24 x i8], [8 x i8] }>, [32 x i8], [32 x i8], [32 x i8], [32 x i8], [32 x i8], [32 x i8], [32 x i8], [32 x i8] }>* @BaseMask to [33 x [32 x i8]]*), i64 0, i64 %437, i64 0
  %439 = bitcast i8* %438 to <16 x i8>*
  %440 = load <16 x i8>, <16 x i8>* %439, align 32
  %441 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %433, <16 x i8> %436, <16 x i8> %440) #8
  %442 = bitcast <16 x i8> %441 to <2 x i64>
  %443 = extractelement <2 x i64> %442, i32 0
  %444 = bitcast i8* %218 to i64*
  store i64 %443, i64* %444, align 1
  %445 = getelementptr inbounds i8, i8* %218, i64 %1
  %446 = icmp eq i32 %220, %3
  br i1 %446, label %806, label %217

447:                                              ; preds = %10
  %448 = trunc i32 %9 to i16
  %449 = insertelement <16 x i16> undef, i16 %448, i32 0
  %450 = shufflevector <16 x i16> %449, <16 x i16> undef, <16 x i32> zeroinitializer
  %451 = icmp sgt i32 %3, 0
  br i1 %451, label %452, label %806

452:                                              ; preds = %447
  %453 = icmp sgt i32 %2, 0
  %454 = sext i32 %2 to i64
  br label %455

455:                                              ; preds = %478, %452
  %456 = phi i8* [ %0, %452 ], [ %479, %478 ]
  %457 = phi i32 [ 0, %452 ], [ %458, %478 ]
  %458 = add nuw nsw i32 %457, 1
  %459 = xor i32 %457, -1
  %460 = mul nsw i32 %459, %8
  %461 = ashr i32 %460, 6
  br i1 %453, label %462, label %478

462:                                              ; preds = %455
  %463 = mul nsw i32 %458, %8
  %464 = trunc i32 %463 to i16
  %465 = insertelement <16 x i16> undef, i16 %464, i32 0
  %466 = xor i32 %461, -1
  %467 = sext i32 %461 to i64
  %468 = getelementptr inbounds i8, i8* %4, i64 %467
  %469 = sub <16 x i16> <i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef>, %465
  %470 = lshr <16 x i16> %469, <i16 1, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0>
  %471 = and <16 x i16> %470, <i16 31, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef>
  %472 = shufflevector <16 x i16> %471, <16 x i16> undef, <16 x i32> zeroinitializer
  %473 = icmp slt i32 %460, -64
  %474 = trunc i32 %457 to i16
  %475 = shl i16 %474, 6
  %476 = insertelement <16 x i16> undef, i16 %475, i32 0
  %477 = shufflevector <16 x i16> %476, <16 x i16> undef, <16 x i32> zeroinitializer
  br label %481

478:                                              ; preds = %793, %455
  %479 = getelementptr inbounds i8, i8* %456, i64 %1
  %480 = icmp eq i32 %458, %3
  br i1 %480, label %806, label %455

481:                                              ; preds = %793, %462
  %482 = phi i64 [ 0, %462 ], [ %804, %793 ]
  %483 = trunc i64 %482 to i32
  %484 = trunc i64 %482 to i16
  %485 = insertelement <16 x i16> undef, i16 %484, i32 0
  %486 = shufflevector <16 x i16> %485, <16 x i16> undef, <16 x i32> zeroinitializer
  %487 = add nsw i32 %461, %483
  %488 = icmp slt i32 %487, -2
  %489 = sub i32 -2, %487
  %490 = select i1 %488, i32 %489, i32 0
  %491 = sub nsw i32 %466, %483
  %492 = icmp sgt i32 %491, 0
  %493 = select i1 %492, i32 %491, i32 0
  %494 = icmp slt i32 %493, 16
  %495 = select i1 %494, i32 %493, i32 16
  %496 = icmp slt i32 %490, 16
  br i1 %496, label %497, label %527

497:                                              ; preds = %481
  %498 = sext i32 %490 to i64
  %499 = getelementptr inbounds i8, i8* %468, i64 %498
  %500 = getelementptr inbounds i8, i8* %499, i64 %482
  %501 = bitcast i8* %500 to <16 x i8>*
  %502 = load <16 x i8>, <16 x i8>* %501, align 1
  %503 = getelementptr inbounds i8, i8* %499, i64 1
  %504 = getelementptr inbounds i8, i8* %503, i64 %482
  %505 = bitcast i8* %504 to <16 x i8>*
  %506 = load <16 x i8>, <16 x i8>* %505, align 1
  %507 = getelementptr inbounds [16 x [16 x i8]], [16 x [16 x i8]]* @LoadMaskx, i64 0, i64 %498, i64 0
  %508 = bitcast i8* %507 to <16 x i8>*
  %509 = load <16 x i8>, <16 x i8>* %508, align 16
  %510 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %502, <16 x i8> %509) #8
  %511 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %506, <16 x i8> %509) #8
  %512 = zext <16 x i8> %510 to <16 x i16>
  %513 = zext <16 x i8> %511 to <16 x i16>
  %514 = sub nsw <16 x i16> %513, %512
  %515 = shl nuw nsw <16 x i16> %512, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %516 = or <16 x i16> %515, <i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16>
  %517 = mul <16 x i16> %514, %472
  %518 = add <16 x i16> %517, %516
  %519 = lshr <16 x i16> %518, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %520 = bitcast <16 x i16> %519 to <4 x i64>
  %521 = shufflevector <4 x i64> %520, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %522 = shufflevector <2 x i64> %521, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %523 = bitcast <4 x i64> %522 to <16 x i16>
  %524 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %519, <16 x i16> %523) #8
  %525 = bitcast <32 x i8> %524 to <4 x i64>
  %526 = shufflevector <4 x i64> %525, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  br label %527

527:                                              ; preds = %497, %481
  %528 = phi <2 x i64> [ %526, %497 ], [ zeroinitializer, %481 ]
  br i1 %473, label %529, label %793

529:                                              ; preds = %527
  %530 = add <16 x i16> %486, <i16 1, i16 2, i16 3, i16 4, i16 5, i16 6, i16 7, i16 8, i16 9, i16 10, i16 11, i16 12, i16 13, i16 14, i16 15, i16 16>
  %531 = mul <16 x i16> %530, %450
  %532 = icmp ult <16 x i16> %531, <i16 32767, i16 32767, i16 32767, i16 32767, i16 32767, i16 32767, i16 32767, i16 32767, i16 32767, i16 32767, i16 32767, i16 32767, i16 32767, i16 32767, i16 32767, i16 32767>
  %533 = select <16 x i1> %532, <16 x i16> %531, <16 x i16> <i16 32767, i16 32767, i16 32767, i16 32767, i16 32767, i16 32767, i16 32767, i16 32767, i16 32767, i16 32767, i16 32767, i16 32767, i16 32767, i16 32767, i16 32767, i16 32767>
  %534 = sub <16 x i16> %477, %533
  %535 = ashr <16 x i16> %534, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %536 = icmp slt <16 x i16> %534, <i16 -64, i16 -64, i16 -64, i16 -64, i16 -64, i16 -64, i16 -64, i16 -64, i16 -64, i16 -64, i16 -64, i16 -64, i16 -64, i16 -64, i16 -64, i16 -64>
  %537 = select <16 x i1> %536, <16 x i16> <i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1>, <16 x i16> %535
  %538 = bitcast <16 x i16> %537 to <4 x i64>
  %539 = shufflevector <4 x i64> %538, <4 x i64> undef, <2 x i32> <i32 undef, i32 3>
  %540 = bitcast <2 x i64> %539 to <8 x i16>
  %541 = extractelement <8 x i16> %540, i64 7
  %542 = shufflevector <4 x i64> %538, <4 x i64> undef, <2 x i32> <i32 0, i32 undef>
  %543 = bitcast <2 x i64> %542 to <8 x i16>
  %544 = extractelement <8 x i16> %543, i64 0
  %545 = sub i16 %544, %541
  %546 = icmp slt i16 %545, 16
  br i1 %546, label %547, label %572

547:                                              ; preds = %529
  %548 = shufflevector <8 x i16> %540, <8 x i16> undef, <16 x i32> <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %549 = sub <16 x i16> %537, %548
  %550 = bitcast <16 x i16> %549 to <4 x i64>
  %551 = shufflevector <4 x i64> %550, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %552 = shufflevector <4 x i64> %550, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %553 = bitcast <2 x i64> %551 to <8 x i16>
  %554 = bitcast <2 x i64> %552 to <8 x i16>
  %555 = tail call <16 x i8> @llvm.x86.sse2.packsswb.128(<8 x i16> %553, <8 x i16> %554) #8
  %556 = sext i16 %541 to i64
  %557 = getelementptr inbounds i8, i8* %5, i64 %556
  %558 = sdiv i16 %545, 4
  %559 = sext i16 %558 to i64
  %560 = getelementptr inbounds [8 x [8 x i32]], [8 x [8 x i32]]* @LoadMaskz2, i64 0, i64 %559, i64 0
  %561 = bitcast i32* %560 to <4 x i32>*
  %562 = load <4 x i32>, <4 x i32>* %561, align 32
  %563 = tail call <4 x i32> @llvm.x86.avx2.maskload.d(i8* %557, <4 x i32> %562) #8
  %564 = getelementptr inbounds i8, i8* %557, i64 1
  %565 = tail call <4 x i32> @llvm.x86.avx2.maskload.d(i8* %564, <4 x i32> %562) #8
  %566 = bitcast <4 x i32> %563 to <16 x i8>
  %567 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %566, <16 x i8> %555) #8
  %568 = bitcast <4 x i32> %565 to <16 x i8>
  %569 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %568, <16 x i8> %555) #8
  %570 = zext <16 x i8> %567 to <16 x i16>
  %571 = zext <16 x i8> %569 to <16 x i16>
  br label %775

572:                                              ; preds = %529
  %573 = sext <16 x i1> %536 to <16 x i16>
  %574 = bitcast <16 x i16> %573 to <4 x i64>
  %575 = xor <4 x i64> %574, <i64 -1, i64 -1, i64 -1, i64 -1>
  %576 = and <4 x i64> %575, %538
  %577 = extractelement <4 x i64> %576, i32 0
  %578 = shl i64 %577, 48
  %579 = ashr exact i64 %578, 48
  %580 = getelementptr inbounds i8, i8* %5, i64 %579
  %581 = load i8, i8* %580, align 1
  %582 = zext i8 %581 to i16
  %583 = bitcast <4 x i64> %576 to <16 x i16>
  %584 = extractelement <16 x i16> %583, i32 1
  %585 = sext i16 %584 to i64
  %586 = getelementptr inbounds i8, i8* %5, i64 %585
  %587 = load i8, i8* %586, align 1
  %588 = zext i8 %587 to i16
  %589 = extractelement <16 x i16> %583, i32 2
  %590 = sext i16 %589 to i64
  %591 = getelementptr inbounds i8, i8* %5, i64 %590
  %592 = load i8, i8* %591, align 1
  %593 = zext i8 %592 to i16
  %594 = extractelement <16 x i16> %583, i32 3
  %595 = sext i16 %594 to i64
  %596 = getelementptr inbounds i8, i8* %5, i64 %595
  %597 = load i8, i8* %596, align 1
  %598 = zext i8 %597 to i16
  %599 = extractelement <16 x i16> %583, i32 4
  %600 = sext i16 %599 to i64
  %601 = getelementptr inbounds i8, i8* %5, i64 %600
  %602 = load i8, i8* %601, align 1
  %603 = zext i8 %602 to i16
  %604 = extractelement <16 x i16> %583, i32 5
  %605 = sext i16 %604 to i64
  %606 = getelementptr inbounds i8, i8* %5, i64 %605
  %607 = load i8, i8* %606, align 1
  %608 = zext i8 %607 to i16
  %609 = extractelement <16 x i16> %583, i32 6
  %610 = sext i16 %609 to i64
  %611 = getelementptr inbounds i8, i8* %5, i64 %610
  %612 = load i8, i8* %611, align 1
  %613 = zext i8 %612 to i16
  %614 = extractelement <16 x i16> %583, i32 7
  %615 = sext i16 %614 to i64
  %616 = getelementptr inbounds i8, i8* %5, i64 %615
  %617 = load i8, i8* %616, align 1
  %618 = zext i8 %617 to i16
  %619 = extractelement <16 x i16> %583, i32 8
  %620 = sext i16 %619 to i64
  %621 = getelementptr inbounds i8, i8* %5, i64 %620
  %622 = load i8, i8* %621, align 1
  %623 = zext i8 %622 to i16
  %624 = extractelement <16 x i16> %583, i32 9
  %625 = sext i16 %624 to i64
  %626 = getelementptr inbounds i8, i8* %5, i64 %625
  %627 = load i8, i8* %626, align 1
  %628 = zext i8 %627 to i16
  %629 = extractelement <16 x i16> %583, i32 10
  %630 = sext i16 %629 to i64
  %631 = getelementptr inbounds i8, i8* %5, i64 %630
  %632 = load i8, i8* %631, align 1
  %633 = zext i8 %632 to i16
  %634 = extractelement <16 x i16> %583, i32 11
  %635 = sext i16 %634 to i64
  %636 = getelementptr inbounds i8, i8* %5, i64 %635
  %637 = load i8, i8* %636, align 1
  %638 = zext i8 %637 to i16
  %639 = extractelement <16 x i16> %583, i32 12
  %640 = sext i16 %639 to i64
  %641 = getelementptr inbounds i8, i8* %5, i64 %640
  %642 = load i8, i8* %641, align 1
  %643 = zext i8 %642 to i16
  %644 = extractelement <16 x i16> %583, i32 13
  %645 = sext i16 %644 to i64
  %646 = getelementptr inbounds i8, i8* %5, i64 %645
  %647 = load i8, i8* %646, align 1
  %648 = zext i8 %647 to i16
  %649 = extractelement <16 x i16> %583, i32 14
  %650 = sext i16 %649 to i64
  %651 = getelementptr inbounds i8, i8* %5, i64 %650
  %652 = load i8, i8* %651, align 1
  %653 = zext i8 %652 to i16
  %654 = bitcast <4 x i64> %576 to <16 x i16>
  %655 = extractelement <16 x i16> %654, i32 15
  %656 = sext i16 %655 to i64
  %657 = getelementptr inbounds i8, i8* %5, i64 %656
  %658 = load i8, i8* %657, align 1
  %659 = zext i8 %658 to i16
  %660 = insertelement <16 x i16> undef, i16 %582, i32 0
  %661 = insertelement <16 x i16> %660, i16 %588, i32 1
  %662 = insertelement <16 x i16> %661, i16 %593, i32 2
  %663 = insertelement <16 x i16> %662, i16 %598, i32 3
  %664 = insertelement <16 x i16> %663, i16 %603, i32 4
  %665 = insertelement <16 x i16> %664, i16 %608, i32 5
  %666 = insertelement <16 x i16> %665, i16 %613, i32 6
  %667 = insertelement <16 x i16> %666, i16 %618, i32 7
  %668 = insertelement <16 x i16> %667, i16 %623, i32 8
  %669 = insertelement <16 x i16> %668, i16 %628, i32 9
  %670 = insertelement <16 x i16> %669, i16 %633, i32 10
  %671 = insertelement <16 x i16> %670, i16 %638, i32 11
  %672 = insertelement <16 x i16> %671, i16 %643, i32 12
  %673 = insertelement <16 x i16> %672, i16 %648, i32 13
  %674 = insertelement <16 x i16> %673, i16 %653, i32 14
  %675 = insertelement <16 x i16> %674, i16 %659, i32 15
  %676 = add <16 x i16> %583, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %677 = bitcast <16 x i16> %676 to <4 x i64>
  %678 = extractelement <4 x i64> %677, i32 0
  %679 = shl i64 %678, 48
  %680 = ashr exact i64 %679, 48
  %681 = getelementptr inbounds i8, i8* %5, i64 %680
  %682 = load i8, i8* %681, align 1
  %683 = zext i8 %682 to i16
  %684 = extractelement <16 x i16> %676, i32 1
  %685 = sext i16 %684 to i64
  %686 = getelementptr inbounds i8, i8* %5, i64 %685
  %687 = load i8, i8* %686, align 1
  %688 = zext i8 %687 to i16
  %689 = extractelement <16 x i16> %676, i32 2
  %690 = sext i16 %689 to i64
  %691 = getelementptr inbounds i8, i8* %5, i64 %690
  %692 = load i8, i8* %691, align 1
  %693 = zext i8 %692 to i16
  %694 = extractelement <16 x i16> %676, i32 3
  %695 = sext i16 %694 to i64
  %696 = getelementptr inbounds i8, i8* %5, i64 %695
  %697 = load i8, i8* %696, align 1
  %698 = zext i8 %697 to i16
  %699 = extractelement <16 x i16> %676, i32 4
  %700 = sext i16 %699 to i64
  %701 = getelementptr inbounds i8, i8* %5, i64 %700
  %702 = load i8, i8* %701, align 1
  %703 = zext i8 %702 to i16
  %704 = extractelement <16 x i16> %676, i32 5
  %705 = sext i16 %704 to i64
  %706 = getelementptr inbounds i8, i8* %5, i64 %705
  %707 = load i8, i8* %706, align 1
  %708 = zext i8 %707 to i16
  %709 = extractelement <16 x i16> %676, i32 6
  %710 = sext i16 %709 to i64
  %711 = getelementptr inbounds i8, i8* %5, i64 %710
  %712 = load i8, i8* %711, align 1
  %713 = zext i8 %712 to i16
  %714 = extractelement <16 x i16> %676, i32 7
  %715 = sext i16 %714 to i64
  %716 = getelementptr inbounds i8, i8* %5, i64 %715
  %717 = load i8, i8* %716, align 1
  %718 = zext i8 %717 to i16
  %719 = extractelement <16 x i16> %676, i32 8
  %720 = sext i16 %719 to i64
  %721 = getelementptr inbounds i8, i8* %5, i64 %720
  %722 = load i8, i8* %721, align 1
  %723 = zext i8 %722 to i16
  %724 = extractelement <16 x i16> %676, i32 9
  %725 = sext i16 %724 to i64
  %726 = getelementptr inbounds i8, i8* %5, i64 %725
  %727 = load i8, i8* %726, align 1
  %728 = zext i8 %727 to i16
  %729 = extractelement <16 x i16> %676, i32 10
  %730 = sext i16 %729 to i64
  %731 = getelementptr inbounds i8, i8* %5, i64 %730
  %732 = load i8, i8* %731, align 1
  %733 = zext i8 %732 to i16
  %734 = extractelement <16 x i16> %676, i32 11
  %735 = sext i16 %734 to i64
  %736 = getelementptr inbounds i8, i8* %5, i64 %735
  %737 = load i8, i8* %736, align 1
  %738 = zext i8 %737 to i16
  %739 = extractelement <16 x i16> %676, i32 12
  %740 = sext i16 %739 to i64
  %741 = getelementptr inbounds i8, i8* %5, i64 %740
  %742 = load i8, i8* %741, align 1
  %743 = zext i8 %742 to i16
  %744 = extractelement <16 x i16> %676, i32 13
  %745 = sext i16 %744 to i64
  %746 = getelementptr inbounds i8, i8* %5, i64 %745
  %747 = load i8, i8* %746, align 1
  %748 = zext i8 %747 to i16
  %749 = extractelement <16 x i16> %676, i32 14
  %750 = sext i16 %749 to i64
  %751 = getelementptr inbounds i8, i8* %5, i64 %750
  %752 = load i8, i8* %751, align 1
  %753 = zext i8 %752 to i16
  %754 = extractelement <16 x i16> %676, i32 15
  %755 = sext i16 %754 to i64
  %756 = getelementptr inbounds i8, i8* %5, i64 %755
  %757 = load i8, i8* %756, align 1
  %758 = zext i8 %757 to i16
  %759 = insertelement <16 x i16> undef, i16 %683, i32 0
  %760 = insertelement <16 x i16> %759, i16 %688, i32 1
  %761 = insertelement <16 x i16> %760, i16 %693, i32 2
  %762 = insertelement <16 x i16> %761, i16 %698, i32 3
  %763 = insertelement <16 x i16> %762, i16 %703, i32 4
  %764 = insertelement <16 x i16> %763, i16 %708, i32 5
  %765 = insertelement <16 x i16> %764, i16 %713, i32 6
  %766 = insertelement <16 x i16> %765, i16 %718, i32 7
  %767 = insertelement <16 x i16> %766, i16 %723, i32 8
  %768 = insertelement <16 x i16> %767, i16 %728, i32 9
  %769 = insertelement <16 x i16> %768, i16 %733, i32 10
  %770 = insertelement <16 x i16> %769, i16 %738, i32 11
  %771 = insertelement <16 x i16> %770, i16 %743, i32 12
  %772 = insertelement <16 x i16> %771, i16 %748, i32 13
  %773 = insertelement <16 x i16> %772, i16 %753, i32 14
  %774 = insertelement <16 x i16> %773, i16 %758, i32 15
  br label %775

775:                                              ; preds = %572, %547
  %776 = phi <16 x i16> [ %571, %547 ], [ %774, %572 ]
  %777 = phi <16 x i16> [ %570, %547 ], [ %675, %572 ]
  %778 = lshr <16 x i16> %534, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %779 = and <16 x i16> %778, <i16 31, i16 31, i16 31, i16 31, i16 31, i16 31, i16 31, i16 31, i16 31, i16 31, i16 31, i16 31, i16 31, i16 31, i16 31, i16 31>
  %780 = sub <16 x i16> %776, %777
  %781 = shl <16 x i16> %777, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %782 = or <16 x i16> %781, <i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16>
  %783 = mul <16 x i16> %780, %779
  %784 = add <16 x i16> %783, %782
  %785 = lshr <16 x i16> %784, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %786 = bitcast <16 x i16> %785 to <4 x i64>
  %787 = shufflevector <4 x i64> %786, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %788 = shufflevector <2 x i64> %787, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %789 = bitcast <4 x i64> %788 to <16 x i16>
  %790 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %785, <16 x i16> %789) #8
  %791 = bitcast <32 x i8> %790 to <4 x i64>
  %792 = shufflevector <4 x i64> %791, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  br label %793

793:                                              ; preds = %775, %527
  %794 = phi <2 x i64> [ %792, %775 ], [ zeroinitializer, %527 ]
  %795 = zext i32 %495 to i64
  %796 = getelementptr inbounds [33 x [32 x i8]], [33 x [32 x i8]]* bitcast (<{ [32 x i8], <{ i8, [31 x i8] }>, <{ i8, i8, [30 x i8] }>, <{ i8, i8, i8, [29 x i8] }>, <{ i8, i8, i8, i8, [28 x i8] }>, <{ i8, i8, i8, i8, i8, [27 x i8] }>, <{ i8, i8, i8, i8, i8, i8, [26 x i8] }>, <{ i8, i8, i8, i8, i8, i8, i8, [25 x i8] }>, <{ [8 x i8], [24 x i8] }>, <{ [9 x i8], [23 x i8] }>, <{ [10 x i8], [22 x i8] }>, <{ [11 x i8], [21 x i8] }>, <{ [12 x i8], [20 x i8] }>, <{ [13 x i8], [19 x i8] }>, <{ [14 x i8], [18 x i8] }>, <{ [15 x i8], [17 x i8] }>, <{ [16 x i8], [16 x i8] }>, <{ [17 x i8], [15 x i8] }>, <{ [18 x i8], [14 x i8] }>, <{ [19 x i8], [13 x i8] }>, <{ [20 x i8], [12 x i8] }>, <{ [21 x i8], [11 x i8] }>, <{ [22 x i8], [10 x i8] }>, <{ [23 x i8], [9 x i8] }>, <{ [24 x i8], [8 x i8] }>, [32 x i8], [32 x i8], [32 x i8], [32 x i8], [32 x i8], [32 x i8], [32 x i8], [32 x i8] }>* @BaseMask to [33 x [32 x i8]]*), i64 0, i64 %795, i64 0
  %797 = bitcast i8* %796 to <16 x i8>*
  %798 = load <16 x i8>, <16 x i8>* %797, align 32
  %799 = bitcast <2 x i64> %528 to <16 x i8>
  %800 = bitcast <2 x i64> %794 to <16 x i8>
  %801 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %799, <16 x i8> %800, <16 x i8> %798) #8
  %802 = getelementptr inbounds i8, i8* %456, i64 %482
  %803 = bitcast i8* %802 to <16 x i8>*
  store <16 x i8> %801, <16 x i8>* %803, align 1
  %804 = add nuw nsw i64 %482, 16
  %805 = icmp slt i64 %804, %454
  br i1 %805, label %481, label %478

806:                                              ; preds = %417, %174, %478, %447, %199, %11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_dr_prediction_z3_avx2(i8*, i64, i32, i32, i8* nocapture readnone, i8* readonly, i32, i32, i32) local_unnamed_addr #0 {
  %10 = alloca [4096 x i8], align 16
  %11 = alloca [32 x <4 x i64>], align 32
  %12 = alloca [32 x <4 x i64>], align 32
  %13 = alloca [16 x <4 x i64>], align 32
  %14 = alloca [16 x <4 x i64>], align 32
  %15 = alloca [1024 x i8], align 16
  %16 = alloca [8 x <2 x i64>], align 16
  %17 = alloca [64 x <4 x i64>], align 32
  %18 = alloca [2048 x i8], align 16
  %19 = alloca [32 x <2 x i64>], align 16
  %20 = alloca [16 x <2 x i64>], align 16
  %21 = alloca [64 x <2 x i64>], align 16
  %22 = alloca [4 x <2 x i64>], align 16
  %23 = icmp eq i32 %2, %3
  br i1 %23, label %24, label %1351

24:                                               ; preds = %9
  switch i32 %2, label %4740 [
    i32 4, label %25
    i32 8, label %150
    i32 16, label %326
    i32 32, label %656
    i32 64, label %1192
  ]

25:                                               ; preds = %24
  %26 = bitcast [4 x <2 x i64>]* %22 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %26) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %26, i8 -86, i64 64, i1 false) #8
  %27 = sub nsw i32 6, %6
  %28 = shl i32 7, %6
  %29 = sext i32 %28 to i64
  %30 = getelementptr inbounds i8, i8* %5, i64 %29
  %31 = load i8, i8* %30, align 1
  %32 = insertelement <16 x i8> undef, i8 %31, i32 0
  %33 = shufflevector <16 x i8> %32, <16 x i8> undef, <16 x i32> zeroinitializer
  %34 = icmp eq i32 %6, 0
  br label %35

35:                                               ; preds = %80, %25
  %36 = phi i64 [ 0, %25 ], [ %110, %80 ]
  %37 = phi i32 [ %8, %25 ], [ %109, %80 ]
  %38 = ashr i32 %37, %27
  %39 = sub nsw i32 %28, %38
  %40 = ashr i32 %39, %6
  %41 = icmp slt i32 %40, 1
  br i1 %41, label %42, label %51

42:                                               ; preds = %35
  %43 = trunc i64 %36 to i32
  %44 = icmp slt i32 %43, 4
  br i1 %44, label %45, label %112

45:                                               ; preds = %42
  %46 = and i64 %36, 4294967295
  %47 = getelementptr inbounds [4 x <2 x i64>], [4 x <2 x i64>]* %22, i64 0, i64 %46
  %48 = bitcast <2 x i64>* %47 to <16 x i8>*
  store <16 x i8> %33, <16 x i8>* %48, align 16
  %49 = add nuw nsw i64 %46, 1
  %50 = icmp eq i64 %49, 4
  br i1 %50, label %112, label %4741

51:                                               ; preds = %35
  %52 = icmp slt i32 %40, 4
  %53 = select i1 %52, i32 %40, i32 4
  %54 = sext i32 %38 to i64
  %55 = getelementptr inbounds i8, i8* %5, i64 %54
  %56 = bitcast i8* %55 to <2 x i64>*
  %57 = load <2 x i64>, <2 x i64>* %56, align 1
  br i1 %34, label %70, label %58

58:                                               ; preds = %51
  %59 = bitcast <2 x i64> %57 to <16 x i8>
  %60 = shufflevector <16 x i8> %59, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %61 = bitcast <16 x i8> %60 to <2 x i64>
  %62 = shufflevector <16 x i8> %60, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %63 = trunc i32 %37 to i16
  %64 = insertelement <16 x i16> undef, i16 %63, i32 0
  %65 = shufflevector <16 x i16> %64, <16 x i16> undef, <16 x i32> zeroinitializer
  %66 = tail call <16 x i16> @llvm.x86.avx2.pslli.w(<16 x i16> %65, i32 %6) #8
  %67 = lshr <16 x i16> %66, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %68 = bitcast <16 x i16> %67 to <4 x i64>
  %69 = and <4 x i64> %68, <i64 8725857424048159, i64 8725857424048159, i64 8725857424048159, i64 8725857424048159>
  br label %80

70:                                               ; preds = %51
  %71 = getelementptr inbounds i8, i8* %55, i64 1
  %72 = bitcast i8* %71 to <16 x i8>*
  %73 = load <16 x i8>, <16 x i8>* %72, align 1
  %74 = trunc i32 %37 to i16
  %75 = insertelement <16 x i16> undef, i16 %74, i32 0
  %76 = and <16 x i16> %75, <i16 63, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef>
  %77 = lshr <16 x i16> %76, <i16 1, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0>
  %78 = shufflevector <16 x i16> %77, <16 x i16> undef, <16 x i32> zeroinitializer
  %79 = bitcast <16 x i16> %78 to <4 x i64>
  br label %80

80:                                               ; preds = %70, %58
  %81 = phi <4 x i64> [ %69, %58 ], [ %79, %70 ]
  %82 = phi <2 x i64> [ %61, %58 ], [ %57, %70 ]
  %83 = phi <16 x i8> [ %62, %58 ], [ %73, %70 ]
  %84 = bitcast <2 x i64> %82 to <16 x i8>
  %85 = zext <16 x i8> %84 to <16 x i16>
  %86 = zext <16 x i8> %83 to <16 x i16>
  %87 = sub nsw <16 x i16> %86, %85
  %88 = shl nuw nsw <16 x i16> %85, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %89 = or <16 x i16> %88, <i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16>
  %90 = bitcast <4 x i64> %81 to <16 x i16>
  %91 = mul <16 x i16> %87, %90
  %92 = add <16 x i16> %91, %89
  %93 = lshr <16 x i16> %92, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %94 = bitcast <16 x i16> %93 to <4 x i64>
  %95 = shufflevector <4 x i64> %94, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %96 = shufflevector <2 x i64> %95, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %97 = bitcast <4 x i64> %96 to <16 x i16>
  %98 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %93, <16 x i16> %97) #8
  %99 = bitcast <32 x i8> %98 to <4 x i64>
  %100 = shufflevector <4 x i64> %99, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %101 = sext i32 %53 to i64
  %102 = getelementptr inbounds [33 x [32 x i8]], [33 x [32 x i8]]* bitcast (<{ [32 x i8], <{ i8, [31 x i8] }>, <{ i8, i8, [30 x i8] }>, <{ i8, i8, i8, [29 x i8] }>, <{ i8, i8, i8, i8, [28 x i8] }>, <{ i8, i8, i8, i8, i8, [27 x i8] }>, <{ i8, i8, i8, i8, i8, i8, [26 x i8] }>, <{ i8, i8, i8, i8, i8, i8, i8, [25 x i8] }>, <{ [8 x i8], [24 x i8] }>, <{ [9 x i8], [23 x i8] }>, <{ [10 x i8], [22 x i8] }>, <{ [11 x i8], [21 x i8] }>, <{ [12 x i8], [20 x i8] }>, <{ [13 x i8], [19 x i8] }>, <{ [14 x i8], [18 x i8] }>, <{ [15 x i8], [17 x i8] }>, <{ [16 x i8], [16 x i8] }>, <{ [17 x i8], [15 x i8] }>, <{ [18 x i8], [14 x i8] }>, <{ [19 x i8], [13 x i8] }>, <{ [20 x i8], [12 x i8] }>, <{ [21 x i8], [11 x i8] }>, <{ [22 x i8], [10 x i8] }>, <{ [23 x i8], [9 x i8] }>, <{ [24 x i8], [8 x i8] }>, [32 x i8], [32 x i8], [32 x i8], [32 x i8], [32 x i8], [32 x i8], [32 x i8], [32 x i8] }>* @BaseMask to [33 x [32 x i8]]*), i64 0, i64 %101, i64 0
  %103 = bitcast i8* %102 to <16 x i8>*
  %104 = load <16 x i8>, <16 x i8>* %103, align 32
  %105 = bitcast <2 x i64> %100 to <16 x i8>
  %106 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %33, <16 x i8> %105, <16 x i8> %104) #8
  %107 = getelementptr inbounds [4 x <2 x i64>], [4 x <2 x i64>]* %22, i64 0, i64 %36
  %108 = bitcast <2 x i64>* %107 to <16 x i8>*
  store <16 x i8> %106, <16 x i8>* %108, align 16
  %109 = add nsw i32 %37, %8
  %110 = add nuw nsw i64 %36, 1
  %111 = icmp eq i64 %110, 4
  br i1 %111, label %112, label %35

112:                                              ; preds = %80, %45, %4741, %4746, %4751, %42
  %113 = getelementptr inbounds [4 x <2 x i64>], [4 x <2 x i64>]* %22, i64 0, i64 1
  %114 = getelementptr inbounds [4 x <2 x i64>], [4 x <2 x i64>]* %22, i64 0, i64 2
  %115 = getelementptr inbounds [4 x <2 x i64>], [4 x <2 x i64>]* %22, i64 0, i64 3
  %116 = bitcast [4 x <2 x i64>]* %22 to <16 x i8>*
  %117 = load <16 x i8>, <16 x i8>* %116, align 16
  %118 = bitcast <2 x i64>* %113 to <16 x i8>*
  %119 = load <16 x i8>, <16 x i8>* %118, align 16
  %120 = shufflevector <16 x i8> %117, <16 x i8> %119, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %121 = bitcast <2 x i64>* %114 to <16 x i8>*
  %122 = load <16 x i8>, <16 x i8>* %121, align 16
  %123 = bitcast <2 x i64>* %115 to <16 x i8>*
  %124 = load <16 x i8>, <16 x i8>* %123, align 16
  %125 = shufflevector <16 x i8> %122, <16 x i8> %124, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %126 = bitcast <16 x i8> %120 to <8 x i16>
  %127 = bitcast <16 x i8> %125 to <8 x i16>
  %128 = shufflevector <8 x i16> %126, <8 x i16> %127, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %129 = bitcast <8 x i16> %128 to <16 x i8>
  %130 = shufflevector <16 x i8> %129, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %131 = shufflevector <16 x i8> %129, <16 x i8> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %132 = shufflevector <16 x i8> %129, <16 x i8> undef, <16 x i32> <i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %133 = bitcast <8 x i16> %128 to <4 x i32>
  %134 = extractelement <4 x i32> %133, i32 0
  %135 = bitcast i8* %0 to i32*
  store i32 %134, i32* %135, align 4
  %136 = bitcast <16 x i8> %130 to <4 x i32>
  %137 = extractelement <4 x i32> %136, i32 0
  %138 = getelementptr inbounds i8, i8* %0, i64 %1
  %139 = bitcast i8* %138 to i32*
  store i32 %137, i32* %139, align 4
  %140 = bitcast <16 x i8> %131 to <4 x i32>
  %141 = extractelement <4 x i32> %140, i32 0
  %142 = shl nsw i64 %1, 1
  %143 = getelementptr inbounds i8, i8* %0, i64 %142
  %144 = bitcast i8* %143 to i32*
  store i32 %141, i32* %144, align 4
  %145 = bitcast <16 x i8> %132 to <4 x i32>
  %146 = extractelement <4 x i32> %145, i32 0
  %147 = mul nsw i64 %1, 3
  %148 = getelementptr inbounds i8, i8* %0, i64 %147
  %149 = bitcast i8* %148 to i32*
  store i32 %146, i32* %149, align 4
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %26) #8
  br label %4740

150:                                              ; preds = %24
  %151 = bitcast [8 x <2 x i64>]* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %151) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %151, i8 -86, i64 128, i1 false) #8
  %152 = sub nsw i32 6, %6
  %153 = shl i32 15, %6
  %154 = sext i32 %153 to i64
  %155 = getelementptr inbounds i8, i8* %5, i64 %154
  %156 = load i8, i8* %155, align 1
  %157 = insertelement <16 x i8> undef, i8 %156, i32 0
  %158 = shufflevector <16 x i8> %157, <16 x i8> undef, <16 x i32> zeroinitializer
  %159 = icmp eq i32 %6, 0
  br label %160

160:                                              ; preds = %205, %150
  %161 = phi i64 [ 0, %150 ], [ %235, %205 ]
  %162 = phi i32 [ %8, %150 ], [ %234, %205 ]
  %163 = ashr i32 %162, %152
  %164 = sub nsw i32 %153, %163
  %165 = ashr i32 %164, %6
  %166 = icmp slt i32 %165, 1
  br i1 %166, label %167, label %176

167:                                              ; preds = %160
  %168 = trunc i64 %161 to i32
  %169 = icmp slt i32 %168, 8
  br i1 %169, label %170, label %237

170:                                              ; preds = %167
  %171 = and i64 %161, 4294967295
  %172 = getelementptr inbounds [8 x <2 x i64>], [8 x <2 x i64>]* %16, i64 0, i64 %171
  %173 = bitcast <2 x i64>* %172 to <16 x i8>*
  store <16 x i8> %158, <16 x i8>* %173, align 16
  %174 = add nuw nsw i64 %171, 1
  %175 = icmp eq i64 %174, 8
  br i1 %175, label %237, label %4754

176:                                              ; preds = %160
  %177 = icmp slt i32 %165, 8
  %178 = select i1 %177, i32 %165, i32 8
  %179 = sext i32 %163 to i64
  %180 = getelementptr inbounds i8, i8* %5, i64 %179
  %181 = bitcast i8* %180 to <2 x i64>*
  %182 = load <2 x i64>, <2 x i64>* %181, align 1
  br i1 %159, label %195, label %183

183:                                              ; preds = %176
  %184 = bitcast <2 x i64> %182 to <16 x i8>
  %185 = shufflevector <16 x i8> %184, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %186 = bitcast <16 x i8> %185 to <2 x i64>
  %187 = shufflevector <16 x i8> %185, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %188 = trunc i32 %162 to i16
  %189 = insertelement <16 x i16> undef, i16 %188, i32 0
  %190 = shufflevector <16 x i16> %189, <16 x i16> undef, <16 x i32> zeroinitializer
  %191 = tail call <16 x i16> @llvm.x86.avx2.pslli.w(<16 x i16> %190, i32 %6) #8
  %192 = lshr <16 x i16> %191, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %193 = bitcast <16 x i16> %192 to <4 x i64>
  %194 = and <4 x i64> %193, <i64 8725857424048159, i64 8725857424048159, i64 8725857424048159, i64 8725857424048159>
  br label %205

195:                                              ; preds = %176
  %196 = getelementptr inbounds i8, i8* %180, i64 1
  %197 = bitcast i8* %196 to <16 x i8>*
  %198 = load <16 x i8>, <16 x i8>* %197, align 1
  %199 = trunc i32 %162 to i16
  %200 = insertelement <16 x i16> undef, i16 %199, i32 0
  %201 = and <16 x i16> %200, <i16 63, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef>
  %202 = lshr <16 x i16> %201, <i16 1, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0>
  %203 = shufflevector <16 x i16> %202, <16 x i16> undef, <16 x i32> zeroinitializer
  %204 = bitcast <16 x i16> %203 to <4 x i64>
  br label %205

205:                                              ; preds = %195, %183
  %206 = phi <4 x i64> [ %194, %183 ], [ %204, %195 ]
  %207 = phi <2 x i64> [ %186, %183 ], [ %182, %195 ]
  %208 = phi <16 x i8> [ %187, %183 ], [ %198, %195 ]
  %209 = bitcast <2 x i64> %207 to <16 x i8>
  %210 = zext <16 x i8> %209 to <16 x i16>
  %211 = zext <16 x i8> %208 to <16 x i16>
  %212 = sub nsw <16 x i16> %211, %210
  %213 = shl nuw nsw <16 x i16> %210, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %214 = or <16 x i16> %213, <i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16>
  %215 = bitcast <4 x i64> %206 to <16 x i16>
  %216 = mul <16 x i16> %212, %215
  %217 = add <16 x i16> %216, %214
  %218 = lshr <16 x i16> %217, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %219 = bitcast <16 x i16> %218 to <4 x i64>
  %220 = shufflevector <4 x i64> %219, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %221 = shufflevector <2 x i64> %220, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %222 = bitcast <4 x i64> %221 to <16 x i16>
  %223 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %218, <16 x i16> %222) #8
  %224 = bitcast <32 x i8> %223 to <4 x i64>
  %225 = shufflevector <4 x i64> %224, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %226 = sext i32 %178 to i64
  %227 = getelementptr inbounds [33 x [32 x i8]], [33 x [32 x i8]]* bitcast (<{ [32 x i8], <{ i8, [31 x i8] }>, <{ i8, i8, [30 x i8] }>, <{ i8, i8, i8, [29 x i8] }>, <{ i8, i8, i8, i8, [28 x i8] }>, <{ i8, i8, i8, i8, i8, [27 x i8] }>, <{ i8, i8, i8, i8, i8, i8, [26 x i8] }>, <{ i8, i8, i8, i8, i8, i8, i8, [25 x i8] }>, <{ [8 x i8], [24 x i8] }>, <{ [9 x i8], [23 x i8] }>, <{ [10 x i8], [22 x i8] }>, <{ [11 x i8], [21 x i8] }>, <{ [12 x i8], [20 x i8] }>, <{ [13 x i8], [19 x i8] }>, <{ [14 x i8], [18 x i8] }>, <{ [15 x i8], [17 x i8] }>, <{ [16 x i8], [16 x i8] }>, <{ [17 x i8], [15 x i8] }>, <{ [18 x i8], [14 x i8] }>, <{ [19 x i8], [13 x i8] }>, <{ [20 x i8], [12 x i8] }>, <{ [21 x i8], [11 x i8] }>, <{ [22 x i8], [10 x i8] }>, <{ [23 x i8], [9 x i8] }>, <{ [24 x i8], [8 x i8] }>, [32 x i8], [32 x i8], [32 x i8], [32 x i8], [32 x i8], [32 x i8], [32 x i8], [32 x i8] }>* @BaseMask to [33 x [32 x i8]]*), i64 0, i64 %226, i64 0
  %228 = bitcast i8* %227 to <16 x i8>*
  %229 = load <16 x i8>, <16 x i8>* %228, align 32
  %230 = bitcast <2 x i64> %225 to <16 x i8>
  %231 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %158, <16 x i8> %230, <16 x i8> %229) #8
  %232 = getelementptr inbounds [8 x <2 x i64>], [8 x <2 x i64>]* %16, i64 0, i64 %161
  %233 = bitcast <2 x i64>* %232 to <16 x i8>*
  store <16 x i8> %231, <16 x i8>* %233, align 16
  %234 = add nsw i32 %162, %8
  %235 = add nuw nsw i64 %161, 1
  %236 = icmp eq i64 %235, 8
  br i1 %236, label %237, label %160

237:                                              ; preds = %205, %170, %4754, %4759, %4764, %4769, %4774, %4779, %4784, %167
  %238 = getelementptr inbounds [8 x <2 x i64>], [8 x <2 x i64>]* %16, i64 0, i64 1
  %239 = getelementptr inbounds [8 x <2 x i64>], [8 x <2 x i64>]* %16, i64 0, i64 2
  %240 = getelementptr inbounds [8 x <2 x i64>], [8 x <2 x i64>]* %16, i64 0, i64 3
  %241 = getelementptr inbounds [8 x <2 x i64>], [8 x <2 x i64>]* %16, i64 0, i64 4
  %242 = getelementptr inbounds [8 x <2 x i64>], [8 x <2 x i64>]* %16, i64 0, i64 5
  %243 = getelementptr inbounds [8 x <2 x i64>], [8 x <2 x i64>]* %16, i64 0, i64 6
  %244 = getelementptr inbounds [8 x <2 x i64>], [8 x <2 x i64>]* %16, i64 0, i64 7
  %245 = bitcast [8 x <2 x i64>]* %16 to <16 x i8>*
  %246 = load <16 x i8>, <16 x i8>* %245, align 16
  %247 = bitcast <2 x i64>* %238 to <16 x i8>*
  %248 = load <16 x i8>, <16 x i8>* %247, align 16
  %249 = shufflevector <16 x i8> %246, <16 x i8> %248, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %250 = bitcast <2 x i64>* %239 to <16 x i8>*
  %251 = load <16 x i8>, <16 x i8>* %250, align 16
  %252 = bitcast <2 x i64>* %240 to <16 x i8>*
  %253 = load <16 x i8>, <16 x i8>* %252, align 16
  %254 = shufflevector <16 x i8> %251, <16 x i8> %253, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %255 = bitcast <2 x i64>* %241 to <16 x i8>*
  %256 = load <16 x i8>, <16 x i8>* %255, align 16
  %257 = bitcast <2 x i64>* %242 to <16 x i8>*
  %258 = load <16 x i8>, <16 x i8>* %257, align 16
  %259 = shufflevector <16 x i8> %256, <16 x i8> %258, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %260 = bitcast <2 x i64>* %243 to <16 x i8>*
  %261 = load <16 x i8>, <16 x i8>* %260, align 16
  %262 = bitcast <2 x i64>* %244 to <16 x i8>*
  %263 = load <16 x i8>, <16 x i8>* %262, align 16
  %264 = shufflevector <16 x i8> %261, <16 x i8> %263, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %265 = bitcast <16 x i8> %249 to <8 x i16>
  %266 = bitcast <16 x i8> %254 to <8 x i16>
  %267 = shufflevector <8 x i16> %265, <8 x i16> %266, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %268 = bitcast <16 x i8> %259 to <8 x i16>
  %269 = bitcast <16 x i8> %264 to <8 x i16>
  %270 = shufflevector <8 x i16> %268, <8 x i16> %269, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %271 = bitcast <8 x i16> %267 to <4 x i32>
  %272 = bitcast <8 x i16> %270 to <4 x i32>
  %273 = shufflevector <4 x i32> %271, <4 x i32> %272, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %274 = bitcast <4 x i32> %273 to <2 x i64>
  %275 = shufflevector <4 x i32> %271, <4 x i32> %272, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %276 = bitcast <4 x i32> %275 to <2 x i64>
  %277 = shufflevector <8 x i16> %265, <8 x i16> %266, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %278 = shufflevector <8 x i16> %268, <8 x i16> %269, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %279 = bitcast <8 x i16> %277 to <4 x i32>
  %280 = bitcast <8 x i16> %278 to <4 x i32>
  %281 = shufflevector <4 x i32> %279, <4 x i32> %280, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %282 = bitcast <4 x i32> %281 to <2 x i64>
  %283 = shufflevector <4 x i32> %279, <4 x i32> %280, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %284 = bitcast <4 x i32> %283 to <2 x i64>
  %285 = extractelement <2 x i64> %274, i32 0
  %286 = bitcast i8* %0 to i64*
  store i64 %285, i64* %286, align 1
  %287 = getelementptr inbounds i8, i8* %0, i64 %1
  %288 = bitcast <4 x i32> %273 to <16 x i8>
  %289 = shufflevector <16 x i8> %288, <16 x i8> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %290 = bitcast <16 x i8> %289 to <2 x i64>
  %291 = extractelement <2 x i64> %290, i32 0
  %292 = bitcast i8* %287 to i64*
  store i64 %291, i64* %292, align 1
  %293 = shl nsw i64 %1, 1
  %294 = getelementptr inbounds i8, i8* %0, i64 %293
  %295 = extractelement <2 x i64> %276, i32 0
  %296 = bitcast i8* %294 to i64*
  store i64 %295, i64* %296, align 1
  %297 = mul nsw i64 %1, 3
  %298 = getelementptr inbounds i8, i8* %0, i64 %297
  %299 = bitcast <4 x i32> %275 to <16 x i8>
  %300 = shufflevector <16 x i8> %299, <16 x i8> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %301 = bitcast <16 x i8> %300 to <2 x i64>
  %302 = extractelement <2 x i64> %301, i32 0
  %303 = bitcast i8* %298 to i64*
  store i64 %302, i64* %303, align 1
  %304 = shl nsw i64 %1, 2
  %305 = getelementptr inbounds i8, i8* %0, i64 %304
  %306 = extractelement <2 x i64> %282, i32 0
  %307 = bitcast i8* %305 to i64*
  store i64 %306, i64* %307, align 1
  %308 = mul nsw i64 %1, 5
  %309 = getelementptr inbounds i8, i8* %0, i64 %308
  %310 = bitcast <4 x i32> %281 to <16 x i8>
  %311 = shufflevector <16 x i8> %310, <16 x i8> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %312 = bitcast <16 x i8> %311 to <2 x i64>
  %313 = extractelement <2 x i64> %312, i32 0
  %314 = bitcast i8* %309 to i64*
  store i64 %313, i64* %314, align 1
  %315 = mul nsw i64 %1, 6
  %316 = getelementptr inbounds i8, i8* %0, i64 %315
  %317 = extractelement <2 x i64> %284, i32 0
  %318 = bitcast i8* %316 to i64*
  store i64 %317, i64* %318, align 1
  %319 = mul nsw i64 %1, 7
  %320 = getelementptr inbounds i8, i8* %0, i64 %319
  %321 = bitcast <4 x i32> %283 to <16 x i8>
  %322 = shufflevector <16 x i8> %321, <16 x i8> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %323 = bitcast <16 x i8> %322 to <2 x i64>
  %324 = extractelement <2 x i64> %323, i32 0
  %325 = bitcast i8* %320 to i64*
  store i64 %324, i64* %325, align 1
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %151) #8
  br label %4740

326:                                              ; preds = %24
  %327 = bitcast [16 x <2 x i64>]* %20 to i8*
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %327) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %327, i8 -86, i64 256, i1 false) #8
  %328 = sub nsw i32 6, %6
  %329 = shl i32 31, %6
  %330 = sext i32 %329 to i64
  %331 = getelementptr inbounds i8, i8* %5, i64 %330
  %332 = load i8, i8* %331, align 1
  %333 = insertelement <16 x i8> undef, i8 %332, i32 0
  %334 = shufflevector <16 x i8> %333, <16 x i8> undef, <16 x i32> zeroinitializer
  %335 = icmp eq i32 %6, 0
  br label %336

336:                                              ; preds = %419, %326
  %337 = phi i64 [ 0, %326 ], [ %449, %419 ]
  %338 = phi i32 [ %8, %326 ], [ %448, %419 ]
  %339 = ashr i32 %338, %328
  %340 = sub nsw i32 %329, %339
  %341 = ashr i32 %340, %6
  %342 = icmp slt i32 %341, 1
  br i1 %342, label %343, label %390

343:                                              ; preds = %336
  %344 = trunc i64 %337 to i32
  %345 = icmp slt i32 %344, 16
  br i1 %345, label %346, label %451

346:                                              ; preds = %343
  %347 = and i64 %337, 4294967295
  %348 = sub nsw i64 0, %337
  %349 = sub nsw i64 15, %337
  %350 = and i64 %348, 7
  %351 = icmp eq i64 %350, 0
  br i1 %351, label %360, label %352

352:                                              ; preds = %346, %352
  %353 = phi i64 [ %357, %352 ], [ %347, %346 ]
  %354 = phi i64 [ %358, %352 ], [ %350, %346 ]
  %355 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %20, i64 0, i64 %353
  %356 = bitcast <2 x i64>* %355 to <16 x i8>*
  store <16 x i8> %334, <16 x i8>* %356, align 16
  %357 = add nuw nsw i64 %353, 1
  %358 = add i64 %354, -1
  %359 = icmp eq i64 %358, 0
  br i1 %359, label %360, label %352, !llvm.loop !44

360:                                              ; preds = %352, %346
  %361 = phi i64 [ %347, %346 ], [ %357, %352 ]
  %362 = icmp ult i64 %349, 7
  br i1 %362, label %451, label %363

363:                                              ; preds = %360, %363
  %364 = phi i64 [ %388, %363 ], [ %361, %360 ]
  %365 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %20, i64 0, i64 %364
  %366 = bitcast <2 x i64>* %365 to <16 x i8>*
  store <16 x i8> %334, <16 x i8>* %366, align 16
  %367 = add nuw nsw i64 %364, 1
  %368 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %20, i64 0, i64 %367
  %369 = bitcast <2 x i64>* %368 to <16 x i8>*
  store <16 x i8> %334, <16 x i8>* %369, align 16
  %370 = add nuw nsw i64 %364, 2
  %371 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %20, i64 0, i64 %370
  %372 = bitcast <2 x i64>* %371 to <16 x i8>*
  store <16 x i8> %334, <16 x i8>* %372, align 16
  %373 = add nuw nsw i64 %364, 3
  %374 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %20, i64 0, i64 %373
  %375 = bitcast <2 x i64>* %374 to <16 x i8>*
  store <16 x i8> %334, <16 x i8>* %375, align 16
  %376 = add nuw nsw i64 %364, 4
  %377 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %20, i64 0, i64 %376
  %378 = bitcast <2 x i64>* %377 to <16 x i8>*
  store <16 x i8> %334, <16 x i8>* %378, align 16
  %379 = add nuw nsw i64 %364, 5
  %380 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %20, i64 0, i64 %379
  %381 = bitcast <2 x i64>* %380 to <16 x i8>*
  store <16 x i8> %334, <16 x i8>* %381, align 16
  %382 = add nuw nsw i64 %364, 6
  %383 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %20, i64 0, i64 %382
  %384 = bitcast <2 x i64>* %383 to <16 x i8>*
  store <16 x i8> %334, <16 x i8>* %384, align 16
  %385 = add nuw nsw i64 %364, 7
  %386 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %20, i64 0, i64 %385
  %387 = bitcast <2 x i64>* %386 to <16 x i8>*
  store <16 x i8> %334, <16 x i8>* %387, align 16
  %388 = add nuw nsw i64 %364, 8
  %389 = icmp eq i64 %388, 16
  br i1 %389, label %451, label %363

390:                                              ; preds = %336
  %391 = icmp slt i32 %341, 16
  %392 = select i1 %391, i32 %341, i32 16
  %393 = sext i32 %339 to i64
  %394 = getelementptr inbounds i8, i8* %5, i64 %393
  %395 = bitcast i8* %394 to <2 x i64>*
  %396 = load <2 x i64>, <2 x i64>* %395, align 1
  br i1 %335, label %409, label %397

397:                                              ; preds = %390
  %398 = bitcast <2 x i64> %396 to <16 x i8>
  %399 = shufflevector <16 x i8> %398, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %400 = bitcast <16 x i8> %399 to <2 x i64>
  %401 = shufflevector <16 x i8> %399, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %402 = trunc i32 %338 to i16
  %403 = insertelement <16 x i16> undef, i16 %402, i32 0
  %404 = shufflevector <16 x i16> %403, <16 x i16> undef, <16 x i32> zeroinitializer
  %405 = tail call <16 x i16> @llvm.x86.avx2.pslli.w(<16 x i16> %404, i32 %6) #8
  %406 = lshr <16 x i16> %405, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %407 = bitcast <16 x i16> %406 to <4 x i64>
  %408 = and <4 x i64> %407, <i64 8725857424048159, i64 8725857424048159, i64 8725857424048159, i64 8725857424048159>
  br label %419

409:                                              ; preds = %390
  %410 = getelementptr inbounds i8, i8* %394, i64 1
  %411 = bitcast i8* %410 to <16 x i8>*
  %412 = load <16 x i8>, <16 x i8>* %411, align 1
  %413 = trunc i32 %338 to i16
  %414 = insertelement <16 x i16> undef, i16 %413, i32 0
  %415 = and <16 x i16> %414, <i16 63, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef>
  %416 = lshr <16 x i16> %415, <i16 1, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0>
  %417 = shufflevector <16 x i16> %416, <16 x i16> undef, <16 x i32> zeroinitializer
  %418 = bitcast <16 x i16> %417 to <4 x i64>
  br label %419

419:                                              ; preds = %409, %397
  %420 = phi <4 x i64> [ %408, %397 ], [ %418, %409 ]
  %421 = phi <2 x i64> [ %400, %397 ], [ %396, %409 ]
  %422 = phi <16 x i8> [ %401, %397 ], [ %412, %409 ]
  %423 = bitcast <2 x i64> %421 to <16 x i8>
  %424 = zext <16 x i8> %423 to <16 x i16>
  %425 = zext <16 x i8> %422 to <16 x i16>
  %426 = sub nsw <16 x i16> %425, %424
  %427 = shl nuw nsw <16 x i16> %424, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %428 = or <16 x i16> %427, <i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16>
  %429 = bitcast <4 x i64> %420 to <16 x i16>
  %430 = mul <16 x i16> %426, %429
  %431 = add <16 x i16> %430, %428
  %432 = lshr <16 x i16> %431, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %433 = bitcast <16 x i16> %432 to <4 x i64>
  %434 = shufflevector <4 x i64> %433, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %435 = shufflevector <2 x i64> %434, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %436 = bitcast <4 x i64> %435 to <16 x i16>
  %437 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %432, <16 x i16> %436) #8
  %438 = bitcast <32 x i8> %437 to <4 x i64>
  %439 = shufflevector <4 x i64> %438, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %440 = sext i32 %392 to i64
  %441 = getelementptr inbounds [33 x [32 x i8]], [33 x [32 x i8]]* bitcast (<{ [32 x i8], <{ i8, [31 x i8] }>, <{ i8, i8, [30 x i8] }>, <{ i8, i8, i8, [29 x i8] }>, <{ i8, i8, i8, i8, [28 x i8] }>, <{ i8, i8, i8, i8, i8, [27 x i8] }>, <{ i8, i8, i8, i8, i8, i8, [26 x i8] }>, <{ i8, i8, i8, i8, i8, i8, i8, [25 x i8] }>, <{ [8 x i8], [24 x i8] }>, <{ [9 x i8], [23 x i8] }>, <{ [10 x i8], [22 x i8] }>, <{ [11 x i8], [21 x i8] }>, <{ [12 x i8], [20 x i8] }>, <{ [13 x i8], [19 x i8] }>, <{ [14 x i8], [18 x i8] }>, <{ [15 x i8], [17 x i8] }>, <{ [16 x i8], [16 x i8] }>, <{ [17 x i8], [15 x i8] }>, <{ [18 x i8], [14 x i8] }>, <{ [19 x i8], [13 x i8] }>, <{ [20 x i8], [12 x i8] }>, <{ [21 x i8], [11 x i8] }>, <{ [22 x i8], [10 x i8] }>, <{ [23 x i8], [9 x i8] }>, <{ [24 x i8], [8 x i8] }>, [32 x i8], [32 x i8], [32 x i8], [32 x i8], [32 x i8], [32 x i8], [32 x i8], [32 x i8] }>* @BaseMask to [33 x [32 x i8]]*), i64 0, i64 %440, i64 0
  %442 = bitcast i8* %441 to <16 x i8>*
  %443 = load <16 x i8>, <16 x i8>* %442, align 32
  %444 = bitcast <2 x i64> %439 to <16 x i8>
  %445 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %334, <16 x i8> %444, <16 x i8> %443) #8
  %446 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %20, i64 0, i64 %337
  %447 = bitcast <2 x i64>* %446 to <16 x i8>*
  store <16 x i8> %445, <16 x i8>* %447, align 16
  %448 = add nsw i32 %338, %8
  %449 = add nuw nsw i64 %337, 1
  %450 = icmp eq i64 %449, 16
  br i1 %450, label %451, label %336

451:                                              ; preds = %419, %360, %363, %343
  %452 = bitcast [16 x <2 x i64>]* %20 to <16 x i8>*
  %453 = load <16 x i8>, <16 x i8>* %452, align 16
  %454 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %20, i64 0, i64 1
  %455 = bitcast <2 x i64>* %454 to <16 x i8>*
  %456 = load <16 x i8>, <16 x i8>* %455, align 16
  %457 = shufflevector <16 x i8> %453, <16 x i8> %456, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %458 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %20, i64 0, i64 2
  %459 = bitcast <2 x i64>* %458 to <16 x i8>*
  %460 = load <16 x i8>, <16 x i8>* %459, align 16
  %461 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %20, i64 0, i64 3
  %462 = bitcast <2 x i64>* %461 to <16 x i8>*
  %463 = load <16 x i8>, <16 x i8>* %462, align 16
  %464 = shufflevector <16 x i8> %460, <16 x i8> %463, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %465 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %20, i64 0, i64 4
  %466 = bitcast <2 x i64>* %465 to <16 x i8>*
  %467 = load <16 x i8>, <16 x i8>* %466, align 16
  %468 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %20, i64 0, i64 5
  %469 = bitcast <2 x i64>* %468 to <16 x i8>*
  %470 = load <16 x i8>, <16 x i8>* %469, align 16
  %471 = shufflevector <16 x i8> %467, <16 x i8> %470, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %472 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %20, i64 0, i64 6
  %473 = bitcast <2 x i64>* %472 to <16 x i8>*
  %474 = load <16 x i8>, <16 x i8>* %473, align 16
  %475 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %20, i64 0, i64 7
  %476 = bitcast <2 x i64>* %475 to <16 x i8>*
  %477 = load <16 x i8>, <16 x i8>* %476, align 16
  %478 = shufflevector <16 x i8> %474, <16 x i8> %477, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %479 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %20, i64 0, i64 8
  %480 = bitcast <2 x i64>* %479 to <16 x i8>*
  %481 = load <16 x i8>, <16 x i8>* %480, align 16
  %482 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %20, i64 0, i64 9
  %483 = bitcast <2 x i64>* %482 to <16 x i8>*
  %484 = load <16 x i8>, <16 x i8>* %483, align 16
  %485 = shufflevector <16 x i8> %481, <16 x i8> %484, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %486 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %20, i64 0, i64 10
  %487 = bitcast <2 x i64>* %486 to <16 x i8>*
  %488 = load <16 x i8>, <16 x i8>* %487, align 16
  %489 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %20, i64 0, i64 11
  %490 = bitcast <2 x i64>* %489 to <16 x i8>*
  %491 = load <16 x i8>, <16 x i8>* %490, align 16
  %492 = shufflevector <16 x i8> %488, <16 x i8> %491, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %493 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %20, i64 0, i64 12
  %494 = bitcast <2 x i64>* %493 to <16 x i8>*
  %495 = load <16 x i8>, <16 x i8>* %494, align 16
  %496 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %20, i64 0, i64 13
  %497 = bitcast <2 x i64>* %496 to <16 x i8>*
  %498 = load <16 x i8>, <16 x i8>* %497, align 16
  %499 = shufflevector <16 x i8> %495, <16 x i8> %498, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %500 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %20, i64 0, i64 14
  %501 = bitcast <2 x i64>* %500 to <16 x i8>*
  %502 = load <16 x i8>, <16 x i8>* %501, align 16
  %503 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %20, i64 0, i64 15
  %504 = bitcast <2 x i64>* %503 to <16 x i8>*
  %505 = load <16 x i8>, <16 x i8>* %504, align 16
  %506 = shufflevector <16 x i8> %502, <16 x i8> %505, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %507 = bitcast <16 x i8> %457 to <8 x i16>
  %508 = bitcast <16 x i8> %464 to <8 x i16>
  %509 = shufflevector <8 x i16> %507, <8 x i16> %508, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %510 = bitcast <16 x i8> %471 to <8 x i16>
  %511 = bitcast <16 x i8> %478 to <8 x i16>
  %512 = shufflevector <8 x i16> %510, <8 x i16> %511, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %513 = bitcast <16 x i8> %485 to <8 x i16>
  %514 = bitcast <16 x i8> %492 to <8 x i16>
  %515 = shufflevector <8 x i16> %513, <8 x i16> %514, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %516 = bitcast <16 x i8> %499 to <8 x i16>
  %517 = bitcast <16 x i8> %506 to <8 x i16>
  %518 = shufflevector <8 x i16> %516, <8 x i16> %517, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %519 = bitcast <8 x i16> %509 to <4 x i32>
  %520 = bitcast <8 x i16> %512 to <4 x i32>
  %521 = shufflevector <4 x i32> %519, <4 x i32> %520, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %522 = bitcast <4 x i32> %521 to <2 x i64>
  %523 = shufflevector <4 x i32> %519, <4 x i32> %520, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %524 = bitcast <4 x i32> %523 to <2 x i64>
  %525 = bitcast <8 x i16> %515 to <4 x i32>
  %526 = bitcast <8 x i16> %518 to <4 x i32>
  %527 = shufflevector <4 x i32> %525, <4 x i32> %526, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %528 = bitcast <4 x i32> %527 to <2 x i64>
  %529 = shufflevector <4 x i32> %525, <4 x i32> %526, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %530 = bitcast <4 x i32> %529 to <2 x i64>
  %531 = shufflevector <2 x i64> %522, <2 x i64> %528, <2 x i32> <i32 0, i32 2>
  %532 = shufflevector <2 x i64> %522, <2 x i64> %528, <2 x i32> <i32 1, i32 3>
  %533 = shufflevector <2 x i64> %524, <2 x i64> %530, <2 x i32> <i32 0, i32 2>
  %534 = shufflevector <2 x i64> %524, <2 x i64> %530, <2 x i32> <i32 1, i32 3>
  %535 = shufflevector <8 x i16> %507, <8 x i16> %508, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %536 = shufflevector <8 x i16> %510, <8 x i16> %511, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %537 = shufflevector <8 x i16> %513, <8 x i16> %514, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %538 = shufflevector <8 x i16> %516, <8 x i16> %517, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %539 = bitcast <8 x i16> %535 to <4 x i32>
  %540 = bitcast <8 x i16> %536 to <4 x i32>
  %541 = shufflevector <4 x i32> %539, <4 x i32> %540, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %542 = bitcast <4 x i32> %541 to <2 x i64>
  %543 = shufflevector <4 x i32> %539, <4 x i32> %540, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %544 = bitcast <4 x i32> %543 to <2 x i64>
  %545 = bitcast <8 x i16> %537 to <4 x i32>
  %546 = bitcast <8 x i16> %538 to <4 x i32>
  %547 = shufflevector <4 x i32> %545, <4 x i32> %546, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %548 = bitcast <4 x i32> %547 to <2 x i64>
  %549 = shufflevector <4 x i32> %545, <4 x i32> %546, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %550 = bitcast <4 x i32> %549 to <2 x i64>
  %551 = shufflevector <2 x i64> %542, <2 x i64> %548, <2 x i32> <i32 0, i32 2>
  %552 = shufflevector <2 x i64> %542, <2 x i64> %548, <2 x i32> <i32 1, i32 3>
  %553 = shufflevector <2 x i64> %544, <2 x i64> %550, <2 x i32> <i32 0, i32 2>
  %554 = shufflevector <2 x i64> %544, <2 x i64> %550, <2 x i32> <i32 1, i32 3>
  %555 = shufflevector <16 x i8> %453, <16 x i8> %456, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %556 = shufflevector <16 x i8> %460, <16 x i8> %463, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %557 = shufflevector <16 x i8> %467, <16 x i8> %470, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %558 = shufflevector <16 x i8> %474, <16 x i8> %477, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %559 = shufflevector <16 x i8> %481, <16 x i8> %484, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %560 = shufflevector <16 x i8> %488, <16 x i8> %491, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %561 = shufflevector <16 x i8> %495, <16 x i8> %498, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %562 = shufflevector <16 x i8> %502, <16 x i8> %505, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %563 = bitcast <16 x i8> %555 to <8 x i16>
  %564 = bitcast <16 x i8> %556 to <8 x i16>
  %565 = shufflevector <8 x i16> %563, <8 x i16> %564, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %566 = bitcast <16 x i8> %557 to <8 x i16>
  %567 = bitcast <16 x i8> %558 to <8 x i16>
  %568 = shufflevector <8 x i16> %566, <8 x i16> %567, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %569 = bitcast <16 x i8> %559 to <8 x i16>
  %570 = bitcast <16 x i8> %560 to <8 x i16>
  %571 = shufflevector <8 x i16> %569, <8 x i16> %570, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %572 = bitcast <16 x i8> %561 to <8 x i16>
  %573 = bitcast <16 x i8> %562 to <8 x i16>
  %574 = shufflevector <8 x i16> %572, <8 x i16> %573, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %575 = bitcast <8 x i16> %565 to <4 x i32>
  %576 = bitcast <8 x i16> %568 to <4 x i32>
  %577 = shufflevector <4 x i32> %575, <4 x i32> %576, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %578 = bitcast <4 x i32> %577 to <2 x i64>
  %579 = shufflevector <4 x i32> %575, <4 x i32> %576, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %580 = bitcast <4 x i32> %579 to <2 x i64>
  %581 = bitcast <8 x i16> %571 to <4 x i32>
  %582 = bitcast <8 x i16> %574 to <4 x i32>
  %583 = shufflevector <4 x i32> %581, <4 x i32> %582, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %584 = bitcast <4 x i32> %583 to <2 x i64>
  %585 = shufflevector <4 x i32> %581, <4 x i32> %582, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %586 = bitcast <4 x i32> %585 to <2 x i64>
  %587 = shufflevector <2 x i64> %578, <2 x i64> %584, <2 x i32> <i32 0, i32 2>
  %588 = shufflevector <2 x i64> %578, <2 x i64> %584, <2 x i32> <i32 1, i32 3>
  %589 = shufflevector <2 x i64> %580, <2 x i64> %586, <2 x i32> <i32 0, i32 2>
  %590 = shufflevector <2 x i64> %580, <2 x i64> %586, <2 x i32> <i32 1, i32 3>
  %591 = shufflevector <8 x i16> %563, <8 x i16> %564, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %592 = shufflevector <8 x i16> %566, <8 x i16> %567, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %593 = shufflevector <8 x i16> %569, <8 x i16> %570, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %594 = shufflevector <8 x i16> %572, <8 x i16> %573, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %595 = bitcast <8 x i16> %591 to <4 x i32>
  %596 = bitcast <8 x i16> %592 to <4 x i32>
  %597 = shufflevector <4 x i32> %595, <4 x i32> %596, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %598 = bitcast <4 x i32> %597 to <2 x i64>
  %599 = shufflevector <4 x i32> %595, <4 x i32> %596, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %600 = bitcast <4 x i32> %599 to <2 x i64>
  %601 = bitcast <8 x i16> %593 to <4 x i32>
  %602 = bitcast <8 x i16> %594 to <4 x i32>
  %603 = shufflevector <4 x i32> %601, <4 x i32> %602, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %604 = bitcast <4 x i32> %603 to <2 x i64>
  %605 = shufflevector <4 x i32> %601, <4 x i32> %602, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %606 = bitcast <4 x i32> %605 to <2 x i64>
  %607 = shufflevector <2 x i64> %598, <2 x i64> %604, <2 x i32> <i32 0, i32 2>
  %608 = shufflevector <2 x i64> %598, <2 x i64> %604, <2 x i32> <i32 1, i32 3>
  %609 = shufflevector <2 x i64> %600, <2 x i64> %606, <2 x i32> <i32 0, i32 2>
  %610 = shufflevector <2 x i64> %600, <2 x i64> %606, <2 x i32> <i32 1, i32 3>
  %611 = bitcast i8* %0 to <2 x i64>*
  store <2 x i64> %531, <2 x i64>* %611, align 1
  %612 = getelementptr inbounds i8, i8* %0, i64 %1
  %613 = bitcast i8* %612 to <2 x i64>*
  store <2 x i64> %532, <2 x i64>* %613, align 1
  %614 = shl nsw i64 %1, 1
  %615 = getelementptr inbounds i8, i8* %0, i64 %614
  %616 = bitcast i8* %615 to <2 x i64>*
  store <2 x i64> %533, <2 x i64>* %616, align 1
  %617 = mul nsw i64 %1, 3
  %618 = getelementptr inbounds i8, i8* %0, i64 %617
  %619 = bitcast i8* %618 to <2 x i64>*
  store <2 x i64> %534, <2 x i64>* %619, align 1
  %620 = shl nsw i64 %1, 2
  %621 = getelementptr inbounds i8, i8* %0, i64 %620
  %622 = bitcast i8* %621 to <2 x i64>*
  store <2 x i64> %551, <2 x i64>* %622, align 1
  %623 = mul nsw i64 %1, 5
  %624 = getelementptr inbounds i8, i8* %0, i64 %623
  %625 = bitcast i8* %624 to <2 x i64>*
  store <2 x i64> %552, <2 x i64>* %625, align 1
  %626 = mul nsw i64 %1, 6
  %627 = getelementptr inbounds i8, i8* %0, i64 %626
  %628 = bitcast i8* %627 to <2 x i64>*
  store <2 x i64> %553, <2 x i64>* %628, align 1
  %629 = mul nsw i64 %1, 7
  %630 = getelementptr inbounds i8, i8* %0, i64 %629
  %631 = bitcast i8* %630 to <2 x i64>*
  store <2 x i64> %554, <2 x i64>* %631, align 1
  %632 = shl nsw i64 %1, 3
  %633 = getelementptr inbounds i8, i8* %0, i64 %632
  %634 = bitcast i8* %633 to <2 x i64>*
  store <2 x i64> %587, <2 x i64>* %634, align 1
  %635 = mul nsw i64 %1, 9
  %636 = getelementptr inbounds i8, i8* %0, i64 %635
  %637 = bitcast i8* %636 to <2 x i64>*
  store <2 x i64> %588, <2 x i64>* %637, align 1
  %638 = mul nsw i64 %1, 10
  %639 = getelementptr inbounds i8, i8* %0, i64 %638
  %640 = bitcast i8* %639 to <2 x i64>*
  store <2 x i64> %589, <2 x i64>* %640, align 1
  %641 = mul nsw i64 %1, 11
  %642 = getelementptr inbounds i8, i8* %0, i64 %641
  %643 = bitcast i8* %642 to <2 x i64>*
  store <2 x i64> %590, <2 x i64>* %643, align 1
  %644 = mul nsw i64 %1, 12
  %645 = getelementptr inbounds i8, i8* %0, i64 %644
  %646 = bitcast i8* %645 to <2 x i64>*
  store <2 x i64> %607, <2 x i64>* %646, align 1
  %647 = mul nsw i64 %1, 13
  %648 = getelementptr inbounds i8, i8* %0, i64 %647
  %649 = bitcast i8* %648 to <2 x i64>*
  store <2 x i64> %608, <2 x i64>* %649, align 1
  %650 = mul nsw i64 %1, 14
  %651 = getelementptr inbounds i8, i8* %0, i64 %650
  %652 = bitcast i8* %651 to <2 x i64>*
  store <2 x i64> %609, <2 x i64>* %652, align 1
  %653 = mul nsw i64 %1, 15
  %654 = getelementptr inbounds i8, i8* %0, i64 %653
  %655 = bitcast i8* %654 to <2 x i64>*
  store <2 x i64> %610, <2 x i64>* %655, align 1
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %327) #8
  br label %4740

656:                                              ; preds = %24
  %657 = bitcast [32 x <4 x i64>]* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %657) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %657, i8 -86, i64 1024, i1 false) #8
  %658 = bitcast [32 x <4 x i64>]* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %658) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %658, i8 -86, i64 1024, i1 false) #8
  %659 = getelementptr inbounds i8, i8* %5, i64 63
  %660 = load i8, i8* %659, align 1
  %661 = insertelement <32 x i8> undef, i8 %660, i32 0
  %662 = shufflevector <32 x i8> %661, <32 x i8> undef, <32 x i32> zeroinitializer
  br label %663

663:                                              ; preds = %767, %656
  %664 = phi i64 [ 0, %656 ], [ %779, %767 ]
  %665 = phi i32 [ %8, %656 ], [ %778, %767 ]
  %666 = ashr i32 %665, 6
  %667 = sub nsw i32 63, %666
  %668 = icmp sgt i32 %665, 4031
  br i1 %668, label %669, label %716

669:                                              ; preds = %663
  %670 = trunc i64 %664 to i32
  %671 = icmp slt i32 %670, 32
  br i1 %671, label %672, label %781

672:                                              ; preds = %669
  %673 = and i64 %664, 4294967295
  %674 = sub nsw i64 0, %664
  %675 = sub nsw i64 31, %664
  %676 = and i64 %674, 7
  %677 = icmp eq i64 %676, 0
  br i1 %677, label %686, label %678

678:                                              ; preds = %672, %678
  %679 = phi i64 [ %683, %678 ], [ %673, %672 ]
  %680 = phi i64 [ %684, %678 ], [ %676, %672 ]
  %681 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %11, i64 0, i64 %679
  %682 = bitcast <4 x i64>* %681 to <32 x i8>*
  store <32 x i8> %662, <32 x i8>* %682, align 32
  %683 = add nuw nsw i64 %679, 1
  %684 = add i64 %680, -1
  %685 = icmp eq i64 %684, 0
  br i1 %685, label %686, label %678, !llvm.loop !45

686:                                              ; preds = %678, %672
  %687 = phi i64 [ %673, %672 ], [ %683, %678 ]
  %688 = icmp ult i64 %675, 7
  br i1 %688, label %781, label %689

689:                                              ; preds = %686, %689
  %690 = phi i64 [ %714, %689 ], [ %687, %686 ]
  %691 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %11, i64 0, i64 %690
  %692 = bitcast <4 x i64>* %691 to <32 x i8>*
  store <32 x i8> %662, <32 x i8>* %692, align 32
  %693 = add nuw nsw i64 %690, 1
  %694 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %11, i64 0, i64 %693
  %695 = bitcast <4 x i64>* %694 to <32 x i8>*
  store <32 x i8> %662, <32 x i8>* %695, align 32
  %696 = add nuw nsw i64 %690, 2
  %697 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %11, i64 0, i64 %696
  %698 = bitcast <4 x i64>* %697 to <32 x i8>*
  store <32 x i8> %662, <32 x i8>* %698, align 32
  %699 = add nuw nsw i64 %690, 3
  %700 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %11, i64 0, i64 %699
  %701 = bitcast <4 x i64>* %700 to <32 x i8>*
  store <32 x i8> %662, <32 x i8>* %701, align 32
  %702 = add nuw nsw i64 %690, 4
  %703 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %11, i64 0, i64 %702
  %704 = bitcast <4 x i64>* %703 to <32 x i8>*
  store <32 x i8> %662, <32 x i8>* %704, align 32
  %705 = add nuw nsw i64 %690, 5
  %706 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %11, i64 0, i64 %705
  %707 = bitcast <4 x i64>* %706 to <32 x i8>*
  store <32 x i8> %662, <32 x i8>* %707, align 32
  %708 = add nuw nsw i64 %690, 6
  %709 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %11, i64 0, i64 %708
  %710 = bitcast <4 x i64>* %709 to <32 x i8>*
  store <32 x i8> %662, <32 x i8>* %710, align 32
  %711 = add nuw nsw i64 %690, 7
  %712 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %11, i64 0, i64 %711
  %713 = bitcast <4 x i64>* %712 to <32 x i8>*
  store <32 x i8> %662, <32 x i8>* %713, align 32
  %714 = add nuw nsw i64 %690, 8
  %715 = icmp eq i64 %714, 32
  br i1 %715, label %781, label %689

716:                                              ; preds = %663
  %717 = icmp slt i32 %667, 32
  %718 = select i1 %717, i32 %667, i32 32
  %719 = trunc i32 %665 to i16
  %720 = insertelement <16 x i16> undef, i16 %719, i32 0
  %721 = and <16 x i16> %720, <i16 63, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef>
  %722 = lshr <16 x i16> %721, <i16 1, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0>
  %723 = shufflevector <16 x i16> %722, <16 x i16> undef, <16 x i32> zeroinitializer
  %724 = sext i32 %666 to i64
  %725 = getelementptr inbounds i8, i8* %5, i64 %724
  %726 = sext i32 %718 to i64
  %727 = bitcast i8* %725 to <16 x i8>*
  %728 = load <16 x i8>, <16 x i8>* %727, align 1
  %729 = getelementptr inbounds i8, i8* %725, i64 1
  %730 = bitcast i8* %729 to <16 x i8>*
  %731 = load <16 x i8>, <16 x i8>* %730, align 1
  %732 = zext <16 x i8> %728 to <16 x i16>
  %733 = zext <16 x i8> %731 to <16 x i16>
  %734 = sub nsw <16 x i16> %733, %732
  %735 = shl nuw nsw <16 x i16> %732, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %736 = or <16 x i16> %735, <i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16>
  %737 = mul <16 x i16> %734, %723
  %738 = add <16 x i16> %737, %736
  %739 = lshr <16 x i16> %738, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %740 = bitcast <16 x i16> %739 to <4 x i64>
  %741 = shufflevector <4 x i64> %740, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %742 = shufflevector <2 x i64> %741, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %743 = bitcast <4 x i64> %742 to <16 x i16>
  %744 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %739, <16 x i16> %743) #8
  %745 = bitcast <32 x i8> %744 to <4 x i64>
  %746 = icmp sgt i32 %718, 16
  br i1 %746, label %747, label %767

747:                                              ; preds = %716
  %748 = getelementptr inbounds i8, i8* %725, i64 16
  %749 = bitcast i8* %748 to <16 x i8>*
  %750 = load <16 x i8>, <16 x i8>* %749, align 1
  %751 = getelementptr inbounds i8, i8* %748, i64 1
  %752 = bitcast i8* %751 to <16 x i8>*
  %753 = load <16 x i8>, <16 x i8>* %752, align 1
  %754 = zext <16 x i8> %750 to <16 x i16>
  %755 = zext <16 x i8> %753 to <16 x i16>
  %756 = sub nsw <16 x i16> %755, %754
  %757 = shl nuw nsw <16 x i16> %754, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %758 = or <16 x i16> %757, <i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16>
  %759 = mul <16 x i16> %756, %723
  %760 = add <16 x i16> %759, %758
  %761 = lshr <16 x i16> %760, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %762 = bitcast <16 x i16> %761 to <4 x i64>
  %763 = shufflevector <4 x i64> %762, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %764 = shufflevector <2 x i64> %763, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %765 = bitcast <4 x i64> %764 to <16 x i16>
  %766 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %761, <16 x i16> %765) #8
  br label %767

767:                                              ; preds = %747, %716
  %768 = phi <32 x i8> [ %766, %747 ], [ %662, %716 ]
  %769 = bitcast <32 x i8> %768 to <4 x i64>
  %770 = shufflevector <4 x i64> %745, <4 x i64> %769, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %771 = getelementptr inbounds [33 x [32 x i8]], [33 x [32 x i8]]* bitcast (<{ [32 x i8], <{ i8, [31 x i8] }>, <{ i8, i8, [30 x i8] }>, <{ i8, i8, i8, [29 x i8] }>, <{ i8, i8, i8, i8, [28 x i8] }>, <{ i8, i8, i8, i8, i8, [27 x i8] }>, <{ i8, i8, i8, i8, i8, i8, [26 x i8] }>, <{ i8, i8, i8, i8, i8, i8, i8, [25 x i8] }>, <{ [8 x i8], [24 x i8] }>, <{ [9 x i8], [23 x i8] }>, <{ [10 x i8], [22 x i8] }>, <{ [11 x i8], [21 x i8] }>, <{ [12 x i8], [20 x i8] }>, <{ [13 x i8], [19 x i8] }>, <{ [14 x i8], [18 x i8] }>, <{ [15 x i8], [17 x i8] }>, <{ [16 x i8], [16 x i8] }>, <{ [17 x i8], [15 x i8] }>, <{ [18 x i8], [14 x i8] }>, <{ [19 x i8], [13 x i8] }>, <{ [20 x i8], [12 x i8] }>, <{ [21 x i8], [11 x i8] }>, <{ [22 x i8], [10 x i8] }>, <{ [23 x i8], [9 x i8] }>, <{ [24 x i8], [8 x i8] }>, [32 x i8], [32 x i8], [32 x i8], [32 x i8], [32 x i8], [32 x i8], [32 x i8], [32 x i8] }>* @BaseMask to [33 x [32 x i8]]*), i64 0, i64 %726, i64 0
  %772 = bitcast i8* %771 to <32 x i8>*
  %773 = load <32 x i8>, <32 x i8>* %772, align 32
  %774 = bitcast <4 x i64> %770 to <32 x i8>
  %775 = tail call <32 x i8> @llvm.x86.avx2.pblendvb(<32 x i8> %662, <32 x i8> %774, <32 x i8> %773) #8
  %776 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %11, i64 0, i64 %664
  %777 = bitcast <4 x i64>* %776 to <32 x i8>*
  store <32 x i8> %775, <32 x i8>* %777, align 32
  %778 = add nsw i32 %665, %8
  %779 = add nuw nsw i64 %664, 1
  %780 = icmp eq i64 %779, 32
  br i1 %780, label %781, label %663

781:                                              ; preds = %767, %686, %689, %669
  %782 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %12, i64 0, i64 0
  %783 = bitcast [32 x <4 x i64>]* %11 to <32 x i8>*
  %784 = load <32 x i8>, <32 x i8>* %783, align 32
  %785 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %11, i64 0, i64 1
  %786 = bitcast <4 x i64>* %785 to <32 x i8>*
  %787 = load <32 x i8>, <32 x i8>* %786, align 32
  %788 = shufflevector <32 x i8> %784, <32 x i8> %787, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %789 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %11, i64 0, i64 2
  %790 = bitcast <4 x i64>* %789 to <32 x i8>*
  %791 = load <32 x i8>, <32 x i8>* %790, align 32
  %792 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %11, i64 0, i64 3
  %793 = bitcast <4 x i64>* %792 to <32 x i8>*
  %794 = load <32 x i8>, <32 x i8>* %793, align 32
  %795 = shufflevector <32 x i8> %791, <32 x i8> %794, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %796 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %11, i64 0, i64 4
  %797 = bitcast <4 x i64>* %796 to <32 x i8>*
  %798 = load <32 x i8>, <32 x i8>* %797, align 32
  %799 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %11, i64 0, i64 5
  %800 = bitcast <4 x i64>* %799 to <32 x i8>*
  %801 = load <32 x i8>, <32 x i8>* %800, align 32
  %802 = shufflevector <32 x i8> %798, <32 x i8> %801, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %803 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %11, i64 0, i64 6
  %804 = bitcast <4 x i64>* %803 to <32 x i8>*
  %805 = load <32 x i8>, <32 x i8>* %804, align 32
  %806 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %11, i64 0, i64 7
  %807 = bitcast <4 x i64>* %806 to <32 x i8>*
  %808 = load <32 x i8>, <32 x i8>* %807, align 32
  %809 = shufflevector <32 x i8> %805, <32 x i8> %808, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %810 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %11, i64 0, i64 8
  %811 = bitcast <4 x i64>* %810 to <32 x i8>*
  %812 = load <32 x i8>, <32 x i8>* %811, align 32
  %813 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %11, i64 0, i64 9
  %814 = bitcast <4 x i64>* %813 to <32 x i8>*
  %815 = load <32 x i8>, <32 x i8>* %814, align 32
  %816 = shufflevector <32 x i8> %812, <32 x i8> %815, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %817 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %11, i64 0, i64 10
  %818 = bitcast <4 x i64>* %817 to <32 x i8>*
  %819 = load <32 x i8>, <32 x i8>* %818, align 32
  %820 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %11, i64 0, i64 11
  %821 = bitcast <4 x i64>* %820 to <32 x i8>*
  %822 = load <32 x i8>, <32 x i8>* %821, align 32
  %823 = shufflevector <32 x i8> %819, <32 x i8> %822, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %824 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %11, i64 0, i64 12
  %825 = bitcast <4 x i64>* %824 to <32 x i8>*
  %826 = load <32 x i8>, <32 x i8>* %825, align 32
  %827 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %11, i64 0, i64 13
  %828 = bitcast <4 x i64>* %827 to <32 x i8>*
  %829 = load <32 x i8>, <32 x i8>* %828, align 32
  %830 = shufflevector <32 x i8> %826, <32 x i8> %829, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %831 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %11, i64 0, i64 14
  %832 = bitcast <4 x i64>* %831 to <32 x i8>*
  %833 = load <32 x i8>, <32 x i8>* %832, align 32
  %834 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %11, i64 0, i64 15
  %835 = bitcast <4 x i64>* %834 to <32 x i8>*
  %836 = load <32 x i8>, <32 x i8>* %835, align 32
  %837 = shufflevector <32 x i8> %833, <32 x i8> %836, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %838 = bitcast <32 x i8> %788 to <16 x i16>
  %839 = bitcast <32 x i8> %795 to <16 x i16>
  %840 = shufflevector <16 x i16> %838, <16 x i16> %839, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %841 = bitcast <32 x i8> %802 to <16 x i16>
  %842 = bitcast <32 x i8> %809 to <16 x i16>
  %843 = shufflevector <16 x i16> %841, <16 x i16> %842, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %844 = bitcast <32 x i8> %816 to <16 x i16>
  %845 = bitcast <32 x i8> %823 to <16 x i16>
  %846 = shufflevector <16 x i16> %844, <16 x i16> %845, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %847 = bitcast <32 x i8> %830 to <16 x i16>
  %848 = bitcast <32 x i8> %837 to <16 x i16>
  %849 = shufflevector <16 x i16> %847, <16 x i16> %848, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %850 = bitcast <16 x i16> %840 to <8 x i32>
  %851 = bitcast <16 x i16> %843 to <8 x i32>
  %852 = shufflevector <8 x i32> %850, <8 x i32> %851, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %853 = bitcast <8 x i32> %852 to <4 x i64>
  %854 = shufflevector <8 x i32> %850, <8 x i32> %851, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %855 = bitcast <8 x i32> %854 to <4 x i64>
  %856 = bitcast <16 x i16> %846 to <8 x i32>
  %857 = bitcast <16 x i16> %849 to <8 x i32>
  %858 = shufflevector <8 x i32> %856, <8 x i32> %857, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %859 = bitcast <8 x i32> %858 to <4 x i64>
  %860 = shufflevector <8 x i32> %856, <8 x i32> %857, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %861 = bitcast <8 x i32> %860 to <4 x i64>
  %862 = shufflevector <4 x i64> %853, <4 x i64> %859, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  store <4 x i64> %862, <4 x i64>* %782, align 32
  %863 = shufflevector <4 x i64> %853, <4 x i64> %859, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %864 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %12, i64 0, i64 1
  store <4 x i64> %863, <4 x i64>* %864, align 32
  %865 = shufflevector <4 x i64> %855, <4 x i64> %861, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %866 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %12, i64 0, i64 2
  store <4 x i64> %865, <4 x i64>* %866, align 32
  %867 = shufflevector <4 x i64> %855, <4 x i64> %861, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %868 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %12, i64 0, i64 3
  store <4 x i64> %867, <4 x i64>* %868, align 32
  %869 = shufflevector <16 x i16> %838, <16 x i16> %839, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %870 = shufflevector <16 x i16> %841, <16 x i16> %842, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %871 = shufflevector <16 x i16> %844, <16 x i16> %845, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %872 = shufflevector <16 x i16> %847, <16 x i16> %848, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %873 = bitcast <16 x i16> %869 to <8 x i32>
  %874 = bitcast <16 x i16> %870 to <8 x i32>
  %875 = shufflevector <8 x i32> %873, <8 x i32> %874, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %876 = bitcast <8 x i32> %875 to <4 x i64>
  %877 = shufflevector <8 x i32> %873, <8 x i32> %874, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %878 = bitcast <8 x i32> %877 to <4 x i64>
  %879 = bitcast <16 x i16> %871 to <8 x i32>
  %880 = bitcast <16 x i16> %872 to <8 x i32>
  %881 = shufflevector <8 x i32> %879, <8 x i32> %880, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %882 = bitcast <8 x i32> %881 to <4 x i64>
  %883 = shufflevector <8 x i32> %879, <8 x i32> %880, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %884 = bitcast <8 x i32> %883 to <4 x i64>
  %885 = shufflevector <4 x i64> %876, <4 x i64> %882, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %886 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %12, i64 0, i64 4
  store <4 x i64> %885, <4 x i64>* %886, align 32
  %887 = shufflevector <4 x i64> %876, <4 x i64> %882, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %888 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %12, i64 0, i64 5
  store <4 x i64> %887, <4 x i64>* %888, align 32
  %889 = shufflevector <4 x i64> %878, <4 x i64> %884, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %890 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %12, i64 0, i64 6
  store <4 x i64> %889, <4 x i64>* %890, align 32
  %891 = shufflevector <4 x i64> %878, <4 x i64> %884, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %892 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %12, i64 0, i64 7
  store <4 x i64> %891, <4 x i64>* %892, align 32
  %893 = shufflevector <32 x i8> %784, <32 x i8> %787, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %894 = shufflevector <32 x i8> %791, <32 x i8> %794, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %895 = shufflevector <32 x i8> %798, <32 x i8> %801, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %896 = shufflevector <32 x i8> %805, <32 x i8> %808, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %897 = shufflevector <32 x i8> %812, <32 x i8> %815, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %898 = shufflevector <32 x i8> %819, <32 x i8> %822, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %899 = shufflevector <32 x i8> %826, <32 x i8> %829, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %900 = shufflevector <32 x i8> %833, <32 x i8> %836, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %901 = bitcast <32 x i8> %893 to <16 x i16>
  %902 = bitcast <32 x i8> %894 to <16 x i16>
  %903 = shufflevector <16 x i16> %901, <16 x i16> %902, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %904 = bitcast <32 x i8> %895 to <16 x i16>
  %905 = bitcast <32 x i8> %896 to <16 x i16>
  %906 = shufflevector <16 x i16> %904, <16 x i16> %905, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %907 = bitcast <32 x i8> %897 to <16 x i16>
  %908 = bitcast <32 x i8> %898 to <16 x i16>
  %909 = shufflevector <16 x i16> %907, <16 x i16> %908, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %910 = bitcast <32 x i8> %899 to <16 x i16>
  %911 = bitcast <32 x i8> %900 to <16 x i16>
  %912 = shufflevector <16 x i16> %910, <16 x i16> %911, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %913 = bitcast <16 x i16> %903 to <8 x i32>
  %914 = bitcast <16 x i16> %906 to <8 x i32>
  %915 = shufflevector <8 x i32> %913, <8 x i32> %914, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %916 = bitcast <8 x i32> %915 to <4 x i64>
  %917 = shufflevector <8 x i32> %913, <8 x i32> %914, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %918 = bitcast <8 x i32> %917 to <4 x i64>
  %919 = bitcast <16 x i16> %909 to <8 x i32>
  %920 = bitcast <16 x i16> %912 to <8 x i32>
  %921 = shufflevector <8 x i32> %919, <8 x i32> %920, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %922 = bitcast <8 x i32> %921 to <4 x i64>
  %923 = shufflevector <8 x i32> %919, <8 x i32> %920, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %924 = bitcast <8 x i32> %923 to <4 x i64>
  %925 = shufflevector <4 x i64> %916, <4 x i64> %922, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %926 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %12, i64 0, i64 8
  store <4 x i64> %925, <4 x i64>* %926, align 32
  %927 = shufflevector <4 x i64> %916, <4 x i64> %922, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %928 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %12, i64 0, i64 9
  store <4 x i64> %927, <4 x i64>* %928, align 32
  %929 = shufflevector <4 x i64> %918, <4 x i64> %924, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %930 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %12, i64 0, i64 10
  store <4 x i64> %929, <4 x i64>* %930, align 32
  %931 = shufflevector <4 x i64> %918, <4 x i64> %924, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %932 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %12, i64 0, i64 11
  store <4 x i64> %931, <4 x i64>* %932, align 32
  %933 = shufflevector <16 x i16> %901, <16 x i16> %902, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %934 = shufflevector <16 x i16> %904, <16 x i16> %905, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %935 = shufflevector <16 x i16> %907, <16 x i16> %908, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %936 = shufflevector <16 x i16> %910, <16 x i16> %911, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %937 = bitcast <16 x i16> %933 to <8 x i32>
  %938 = bitcast <16 x i16> %934 to <8 x i32>
  %939 = shufflevector <8 x i32> %937, <8 x i32> %938, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %940 = bitcast <8 x i32> %939 to <4 x i64>
  %941 = shufflevector <8 x i32> %937, <8 x i32> %938, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %942 = bitcast <8 x i32> %941 to <4 x i64>
  %943 = bitcast <16 x i16> %935 to <8 x i32>
  %944 = bitcast <16 x i16> %936 to <8 x i32>
  %945 = shufflevector <8 x i32> %943, <8 x i32> %944, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %946 = bitcast <8 x i32> %945 to <4 x i64>
  %947 = shufflevector <8 x i32> %943, <8 x i32> %944, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %948 = bitcast <8 x i32> %947 to <4 x i64>
  %949 = shufflevector <4 x i64> %940, <4 x i64> %946, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %950 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %12, i64 0, i64 12
  store <4 x i64> %949, <4 x i64>* %950, align 32
  %951 = shufflevector <4 x i64> %940, <4 x i64> %946, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %952 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %12, i64 0, i64 13
  store <4 x i64> %951, <4 x i64>* %952, align 32
  %953 = shufflevector <4 x i64> %942, <4 x i64> %948, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %954 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %12, i64 0, i64 14
  store <4 x i64> %953, <4 x i64>* %954, align 32
  %955 = shufflevector <4 x i64> %942, <4 x i64> %948, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %956 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %12, i64 0, i64 15
  store <4 x i64> %955, <4 x i64>* %956, align 32
  %957 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %11, i64 0, i64 16
  %958 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %12, i64 0, i64 16
  %959 = bitcast <4 x i64>* %957 to <32 x i8>*
  %960 = load <32 x i8>, <32 x i8>* %959, align 32
  %961 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %11, i64 0, i64 17
  %962 = bitcast <4 x i64>* %961 to <32 x i8>*
  %963 = load <32 x i8>, <32 x i8>* %962, align 32
  %964 = shufflevector <32 x i8> %960, <32 x i8> %963, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %965 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %11, i64 0, i64 18
  %966 = bitcast <4 x i64>* %965 to <32 x i8>*
  %967 = load <32 x i8>, <32 x i8>* %966, align 32
  %968 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %11, i64 0, i64 19
  %969 = bitcast <4 x i64>* %968 to <32 x i8>*
  %970 = load <32 x i8>, <32 x i8>* %969, align 32
  %971 = shufflevector <32 x i8> %967, <32 x i8> %970, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %972 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %11, i64 0, i64 20
  %973 = bitcast <4 x i64>* %972 to <32 x i8>*
  %974 = load <32 x i8>, <32 x i8>* %973, align 32
  %975 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %11, i64 0, i64 21
  %976 = bitcast <4 x i64>* %975 to <32 x i8>*
  %977 = load <32 x i8>, <32 x i8>* %976, align 32
  %978 = shufflevector <32 x i8> %974, <32 x i8> %977, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %979 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %11, i64 0, i64 22
  %980 = bitcast <4 x i64>* %979 to <32 x i8>*
  %981 = load <32 x i8>, <32 x i8>* %980, align 32
  %982 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %11, i64 0, i64 23
  %983 = bitcast <4 x i64>* %982 to <32 x i8>*
  %984 = load <32 x i8>, <32 x i8>* %983, align 32
  %985 = shufflevector <32 x i8> %981, <32 x i8> %984, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %986 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %11, i64 0, i64 24
  %987 = bitcast <4 x i64>* %986 to <32 x i8>*
  %988 = load <32 x i8>, <32 x i8>* %987, align 32
  %989 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %11, i64 0, i64 25
  %990 = bitcast <4 x i64>* %989 to <32 x i8>*
  %991 = load <32 x i8>, <32 x i8>* %990, align 32
  %992 = shufflevector <32 x i8> %988, <32 x i8> %991, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %993 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %11, i64 0, i64 26
  %994 = bitcast <4 x i64>* %993 to <32 x i8>*
  %995 = load <32 x i8>, <32 x i8>* %994, align 32
  %996 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %11, i64 0, i64 27
  %997 = bitcast <4 x i64>* %996 to <32 x i8>*
  %998 = load <32 x i8>, <32 x i8>* %997, align 32
  %999 = shufflevector <32 x i8> %995, <32 x i8> %998, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %1000 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %11, i64 0, i64 28
  %1001 = bitcast <4 x i64>* %1000 to <32 x i8>*
  %1002 = load <32 x i8>, <32 x i8>* %1001, align 32
  %1003 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %11, i64 0, i64 29
  %1004 = bitcast <4 x i64>* %1003 to <32 x i8>*
  %1005 = load <32 x i8>, <32 x i8>* %1004, align 32
  %1006 = shufflevector <32 x i8> %1002, <32 x i8> %1005, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %1007 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %11, i64 0, i64 30
  %1008 = bitcast <4 x i64>* %1007 to <32 x i8>*
  %1009 = load <32 x i8>, <32 x i8>* %1008, align 32
  %1010 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %11, i64 0, i64 31
  %1011 = bitcast <4 x i64>* %1010 to <32 x i8>*
  %1012 = load <32 x i8>, <32 x i8>* %1011, align 32
  %1013 = shufflevector <32 x i8> %1009, <32 x i8> %1012, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %1014 = bitcast <32 x i8> %964 to <16 x i16>
  %1015 = bitcast <32 x i8> %971 to <16 x i16>
  %1016 = shufflevector <16 x i16> %1014, <16 x i16> %1015, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %1017 = bitcast <32 x i8> %978 to <16 x i16>
  %1018 = bitcast <32 x i8> %985 to <16 x i16>
  %1019 = shufflevector <16 x i16> %1017, <16 x i16> %1018, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %1020 = bitcast <32 x i8> %992 to <16 x i16>
  %1021 = bitcast <32 x i8> %999 to <16 x i16>
  %1022 = shufflevector <16 x i16> %1020, <16 x i16> %1021, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %1023 = bitcast <32 x i8> %1006 to <16 x i16>
  %1024 = bitcast <32 x i8> %1013 to <16 x i16>
  %1025 = shufflevector <16 x i16> %1023, <16 x i16> %1024, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %1026 = bitcast <16 x i16> %1016 to <8 x i32>
  %1027 = bitcast <16 x i16> %1019 to <8 x i32>
  %1028 = shufflevector <8 x i32> %1026, <8 x i32> %1027, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %1029 = bitcast <8 x i32> %1028 to <4 x i64>
  %1030 = shufflevector <8 x i32> %1026, <8 x i32> %1027, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %1031 = bitcast <8 x i32> %1030 to <4 x i64>
  %1032 = bitcast <16 x i16> %1022 to <8 x i32>
  %1033 = bitcast <16 x i16> %1025 to <8 x i32>
  %1034 = shufflevector <8 x i32> %1032, <8 x i32> %1033, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %1035 = bitcast <8 x i32> %1034 to <4 x i64>
  %1036 = shufflevector <8 x i32> %1032, <8 x i32> %1033, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %1037 = bitcast <8 x i32> %1036 to <4 x i64>
  %1038 = shufflevector <4 x i64> %1029, <4 x i64> %1035, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  store <4 x i64> %1038, <4 x i64>* %958, align 32
  %1039 = shufflevector <4 x i64> %1029, <4 x i64> %1035, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %1040 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %12, i64 0, i64 17
  store <4 x i64> %1039, <4 x i64>* %1040, align 32
  %1041 = shufflevector <4 x i64> %1031, <4 x i64> %1037, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %1042 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %12, i64 0, i64 18
  store <4 x i64> %1041, <4 x i64>* %1042, align 32
  %1043 = shufflevector <4 x i64> %1031, <4 x i64> %1037, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %1044 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %12, i64 0, i64 19
  store <4 x i64> %1043, <4 x i64>* %1044, align 32
  %1045 = shufflevector <16 x i16> %1014, <16 x i16> %1015, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %1046 = shufflevector <16 x i16> %1017, <16 x i16> %1018, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %1047 = shufflevector <16 x i16> %1020, <16 x i16> %1021, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %1048 = shufflevector <16 x i16> %1023, <16 x i16> %1024, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %1049 = bitcast <16 x i16> %1045 to <8 x i32>
  %1050 = bitcast <16 x i16> %1046 to <8 x i32>
  %1051 = shufflevector <8 x i32> %1049, <8 x i32> %1050, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %1052 = bitcast <8 x i32> %1051 to <4 x i64>
  %1053 = shufflevector <8 x i32> %1049, <8 x i32> %1050, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %1054 = bitcast <8 x i32> %1053 to <4 x i64>
  %1055 = bitcast <16 x i16> %1047 to <8 x i32>
  %1056 = bitcast <16 x i16> %1048 to <8 x i32>
  %1057 = shufflevector <8 x i32> %1055, <8 x i32> %1056, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %1058 = bitcast <8 x i32> %1057 to <4 x i64>
  %1059 = shufflevector <8 x i32> %1055, <8 x i32> %1056, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %1060 = bitcast <8 x i32> %1059 to <4 x i64>
  %1061 = shufflevector <4 x i64> %1052, <4 x i64> %1058, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %1062 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %12, i64 0, i64 20
  store <4 x i64> %1061, <4 x i64>* %1062, align 32
  %1063 = shufflevector <4 x i64> %1052, <4 x i64> %1058, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %1064 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %12, i64 0, i64 21
  store <4 x i64> %1063, <4 x i64>* %1064, align 32
  %1065 = shufflevector <4 x i64> %1054, <4 x i64> %1060, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %1066 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %12, i64 0, i64 22
  store <4 x i64> %1065, <4 x i64>* %1066, align 32
  %1067 = shufflevector <4 x i64> %1054, <4 x i64> %1060, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %1068 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %12, i64 0, i64 23
  store <4 x i64> %1067, <4 x i64>* %1068, align 32
  %1069 = shufflevector <32 x i8> %960, <32 x i8> %963, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %1070 = shufflevector <32 x i8> %967, <32 x i8> %970, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %1071 = shufflevector <32 x i8> %974, <32 x i8> %977, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %1072 = shufflevector <32 x i8> %981, <32 x i8> %984, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %1073 = shufflevector <32 x i8> %988, <32 x i8> %991, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %1074 = shufflevector <32 x i8> %995, <32 x i8> %998, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %1075 = shufflevector <32 x i8> %1002, <32 x i8> %1005, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %1076 = shufflevector <32 x i8> %1009, <32 x i8> %1012, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %1077 = bitcast <32 x i8> %1069 to <16 x i16>
  %1078 = bitcast <32 x i8> %1070 to <16 x i16>
  %1079 = shufflevector <16 x i16> %1077, <16 x i16> %1078, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %1080 = bitcast <32 x i8> %1071 to <16 x i16>
  %1081 = bitcast <32 x i8> %1072 to <16 x i16>
  %1082 = shufflevector <16 x i16> %1080, <16 x i16> %1081, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %1083 = bitcast <32 x i8> %1073 to <16 x i16>
  %1084 = bitcast <32 x i8> %1074 to <16 x i16>
  %1085 = shufflevector <16 x i16> %1083, <16 x i16> %1084, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %1086 = bitcast <32 x i8> %1075 to <16 x i16>
  %1087 = bitcast <32 x i8> %1076 to <16 x i16>
  %1088 = shufflevector <16 x i16> %1086, <16 x i16> %1087, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %1089 = bitcast <16 x i16> %1079 to <8 x i32>
  %1090 = bitcast <16 x i16> %1082 to <8 x i32>
  %1091 = shufflevector <8 x i32> %1089, <8 x i32> %1090, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %1092 = bitcast <8 x i32> %1091 to <4 x i64>
  %1093 = shufflevector <8 x i32> %1089, <8 x i32> %1090, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %1094 = bitcast <8 x i32> %1093 to <4 x i64>
  %1095 = bitcast <16 x i16> %1085 to <8 x i32>
  %1096 = bitcast <16 x i16> %1088 to <8 x i32>
  %1097 = shufflevector <8 x i32> %1095, <8 x i32> %1096, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %1098 = bitcast <8 x i32> %1097 to <4 x i64>
  %1099 = shufflevector <8 x i32> %1095, <8 x i32> %1096, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %1100 = bitcast <8 x i32> %1099 to <4 x i64>
  %1101 = shufflevector <4 x i64> %1092, <4 x i64> %1098, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %1102 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %12, i64 0, i64 24
  store <4 x i64> %1101, <4 x i64>* %1102, align 32
  %1103 = shufflevector <4 x i64> %1092, <4 x i64> %1098, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %1104 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %12, i64 0, i64 25
  store <4 x i64> %1103, <4 x i64>* %1104, align 32
  %1105 = shufflevector <4 x i64> %1094, <4 x i64> %1100, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %1106 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %12, i64 0, i64 26
  store <4 x i64> %1105, <4 x i64>* %1106, align 32
  %1107 = shufflevector <4 x i64> %1094, <4 x i64> %1100, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %1108 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %12, i64 0, i64 27
  store <4 x i64> %1107, <4 x i64>* %1108, align 32
  %1109 = shufflevector <16 x i16> %1077, <16 x i16> %1078, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %1110 = shufflevector <16 x i16> %1080, <16 x i16> %1081, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %1111 = shufflevector <16 x i16> %1083, <16 x i16> %1084, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %1112 = shufflevector <16 x i16> %1086, <16 x i16> %1087, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %1113 = bitcast <16 x i16> %1109 to <8 x i32>
  %1114 = bitcast <16 x i16> %1110 to <8 x i32>
  %1115 = shufflevector <8 x i32> %1113, <8 x i32> %1114, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %1116 = bitcast <8 x i32> %1115 to <4 x i64>
  %1117 = shufflevector <8 x i32> %1113, <8 x i32> %1114, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %1118 = bitcast <8 x i32> %1117 to <4 x i64>
  %1119 = bitcast <16 x i16> %1111 to <8 x i32>
  %1120 = bitcast <16 x i16> %1112 to <8 x i32>
  %1121 = shufflevector <8 x i32> %1119, <8 x i32> %1120, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %1122 = bitcast <8 x i32> %1121 to <4 x i64>
  %1123 = shufflevector <8 x i32> %1119, <8 x i32> %1120, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %1124 = bitcast <8 x i32> %1123 to <4 x i64>
  %1125 = shufflevector <4 x i64> %1116, <4 x i64> %1122, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %1126 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %12, i64 0, i64 28
  store <4 x i64> %1125, <4 x i64>* %1126, align 32
  %1127 = shufflevector <4 x i64> %1116, <4 x i64> %1122, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %1128 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %12, i64 0, i64 29
  store <4 x i64> %1127, <4 x i64>* %1128, align 32
  %1129 = shufflevector <4 x i64> %1118, <4 x i64> %1124, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %1130 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %12, i64 0, i64 30
  store <4 x i64> %1129, <4 x i64>* %1130, align 32
  %1131 = shufflevector <4 x i64> %1118, <4 x i64> %1124, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %1132 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %12, i64 0, i64 31
  store <4 x i64> %1131, <4 x i64>* %1132, align 32
  br label %1133

1133:                                             ; preds = %1133, %781
  %1134 = phi i64 [ 0, %781 ], [ %1160, %1133 ]
  %1135 = mul nsw i64 %1134, %1
  %1136 = getelementptr inbounds i8, i8* %0, i64 %1135
  %1137 = bitcast i8* %1136 to <2 x i64>*
  %1138 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %12, i64 0, i64 %1134
  %1139 = load <4 x i64>, <4 x i64>* %1138, align 32
  %1140 = shufflevector <4 x i64> %1139, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  store <2 x i64> %1140, <2 x i64>* %1137, align 1
  %1141 = getelementptr inbounds i8, i8* %1136, i64 16
  %1142 = bitcast i8* %1141 to <2 x i64>*
  %1143 = add nuw nsw i64 %1134, 16
  %1144 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %12, i64 0, i64 %1143
  %1145 = load <4 x i64>, <4 x i64>* %1144, align 32
  %1146 = shufflevector <4 x i64> %1145, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  store <2 x i64> %1146, <2 x i64>* %1142, align 1
  %1147 = or i64 %1134, 1
  %1148 = mul nsw i64 %1147, %1
  %1149 = getelementptr inbounds i8, i8* %0, i64 %1148
  %1150 = bitcast i8* %1149 to <2 x i64>*
  %1151 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %12, i64 0, i64 %1147
  %1152 = load <4 x i64>, <4 x i64>* %1151, align 32
  %1153 = shufflevector <4 x i64> %1152, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  store <2 x i64> %1153, <2 x i64>* %1150, align 1
  %1154 = getelementptr inbounds i8, i8* %1149, i64 16
  %1155 = bitcast i8* %1154 to <2 x i64>*
  %1156 = add nuw nsw i64 %1134, 17
  %1157 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %12, i64 0, i64 %1156
  %1158 = load <4 x i64>, <4 x i64>* %1157, align 32
  %1159 = shufflevector <4 x i64> %1158, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  store <2 x i64> %1159, <2 x i64>* %1155, align 1
  %1160 = add nuw nsw i64 %1134, 2
  %1161 = icmp eq i64 %1160, 16
  br i1 %1161, label %1162, label %1133

1162:                                             ; preds = %1133, %1162
  %1163 = phi i64 [ %1189, %1162 ], [ 0, %1133 ]
  %1164 = add nuw nsw i64 %1163, 16
  %1165 = mul nsw i64 %1164, %1
  %1166 = getelementptr inbounds i8, i8* %0, i64 %1165
  %1167 = bitcast i8* %1166 to <2 x i64>*
  %1168 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %12, i64 0, i64 %1163
  %1169 = load <4 x i64>, <4 x i64>* %1168, align 32
  %1170 = shufflevector <4 x i64> %1169, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  store <2 x i64> %1170, <2 x i64>* %1167, align 1
  %1171 = getelementptr inbounds i8, i8* %1166, i64 16
  %1172 = bitcast i8* %1171 to <2 x i64>*
  %1173 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %12, i64 0, i64 %1164
  %1174 = load <4 x i64>, <4 x i64>* %1173, align 32
  %1175 = shufflevector <4 x i64> %1174, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  store <2 x i64> %1175, <2 x i64>* %1172, align 1
  %1176 = or i64 %1163, 1
  %1177 = add nuw nsw i64 %1163, 17
  %1178 = mul nsw i64 %1177, %1
  %1179 = getelementptr inbounds i8, i8* %0, i64 %1178
  %1180 = bitcast i8* %1179 to <2 x i64>*
  %1181 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %12, i64 0, i64 %1176
  %1182 = load <4 x i64>, <4 x i64>* %1181, align 32
  %1183 = shufflevector <4 x i64> %1182, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  store <2 x i64> %1183, <2 x i64>* %1180, align 1
  %1184 = getelementptr inbounds i8, i8* %1179, i64 16
  %1185 = bitcast i8* %1184 to <2 x i64>*
  %1186 = getelementptr inbounds [32 x <4 x i64>], [32 x <4 x i64>]* %12, i64 0, i64 %1177
  %1187 = load <4 x i64>, <4 x i64>* %1186, align 32
  %1188 = shufflevector <4 x i64> %1187, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  store <2 x i64> %1188, <2 x i64>* %1185, align 1
  %1189 = add nuw nsw i64 %1163, 2
  %1190 = icmp eq i64 %1189, 16
  br i1 %1190, label %1191, label %1162

1191:                                             ; preds = %1162
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %658) #8
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %657) #8
  br label %4740

1192:                                             ; preds = %24
  %1193 = getelementptr inbounds [4096 x i8], [4096 x i8]* %10, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 4096, i8* nonnull %1193) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %1193, i8 -86, i64 4096, i1 false) #8
  %1194 = getelementptr inbounds i8, i8* %5, i64 127
  %1195 = load i8, i8* %1194, align 1
  %1196 = insertelement <32 x i8> undef, i8 %1195, i32 0
  %1197 = shufflevector <32 x i8> %1196, <32 x i8> undef, <32 x i32> zeroinitializer
  %1198 = bitcast <32 x i8> %1197 to <4 x i64>
  %1199 = shufflevector <4 x i64> %1198, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %1200 = bitcast <2 x i64> %1199 to <16 x i8>
  br label %1201

1201:                                             ; preds = %1345, %1192
  %1202 = phi i8* [ %1193, %1192 ], [ %1348, %1345 ]
  %1203 = phi i32 [ 0, %1192 ], [ %1347, %1345 ]
  %1204 = phi i32 [ %8, %1192 ], [ %1346, %1345 ]
  %1205 = icmp slt i32 %1204, 8128
  br i1 %1205, label %1265, label %1206

1206:                                             ; preds = %1201
  %1207 = icmp ult i32 %1203, 64
  br i1 %1207, label %1208, label %1350

1208:                                             ; preds = %1206
  %1209 = sub nsw i32 0, %1203
  %1210 = sub nsw i32 63, %1203
  %1211 = and i32 %1209, 7
  %1212 = icmp eq i32 %1211, 0
  br i1 %1212, label %1224, label %1213

1213:                                             ; preds = %1208, %1213
  %1214 = phi i8* [ %1220, %1213 ], [ %1202, %1208 ]
  %1215 = phi i32 [ %1221, %1213 ], [ %1203, %1208 ]
  %1216 = phi i32 [ %1222, %1213 ], [ %1211, %1208 ]
  %1217 = bitcast i8* %1214 to <32 x i8>*
  store <32 x i8> %1197, <32 x i8>* %1217, align 1
  %1218 = getelementptr inbounds i8, i8* %1214, i64 32
  %1219 = bitcast i8* %1218 to <32 x i8>*
  store <32 x i8> %1197, <32 x i8>* %1219, align 1
  %1220 = getelementptr inbounds i8, i8* %1214, i64 64
  %1221 = add nuw nsw i32 %1215, 1
  %1222 = add i32 %1216, -1
  %1223 = icmp eq i32 %1222, 0
  br i1 %1223, label %1224, label %1213, !llvm.loop !46

1224:                                             ; preds = %1213, %1208
  %1225 = phi i8* [ %1202, %1208 ], [ %1220, %1213 ]
  %1226 = phi i32 [ %1203, %1208 ], [ %1221, %1213 ]
  %1227 = icmp ult i32 %1210, 7
  br i1 %1227, label %1350, label %1228

1228:                                             ; preds = %1224, %1228
  %1229 = phi i8* [ %1262, %1228 ], [ %1225, %1224 ]
  %1230 = phi i32 [ %1263, %1228 ], [ %1226, %1224 ]
  %1231 = bitcast i8* %1229 to <32 x i8>*
  store <32 x i8> %1197, <32 x i8>* %1231, align 1
  %1232 = getelementptr inbounds i8, i8* %1229, i64 32
  %1233 = bitcast i8* %1232 to <32 x i8>*
  store <32 x i8> %1197, <32 x i8>* %1233, align 1
  %1234 = getelementptr inbounds i8, i8* %1229, i64 64
  %1235 = bitcast i8* %1234 to <32 x i8>*
  store <32 x i8> %1197, <32 x i8>* %1235, align 1
  %1236 = getelementptr inbounds i8, i8* %1229, i64 96
  %1237 = bitcast i8* %1236 to <32 x i8>*
  store <32 x i8> %1197, <32 x i8>* %1237, align 1
  %1238 = getelementptr inbounds i8, i8* %1229, i64 128
  %1239 = bitcast i8* %1238 to <32 x i8>*
  store <32 x i8> %1197, <32 x i8>* %1239, align 1
  %1240 = getelementptr inbounds i8, i8* %1229, i64 160
  %1241 = bitcast i8* %1240 to <32 x i8>*
  store <32 x i8> %1197, <32 x i8>* %1241, align 1
  %1242 = getelementptr inbounds i8, i8* %1229, i64 192
  %1243 = bitcast i8* %1242 to <32 x i8>*
  store <32 x i8> %1197, <32 x i8>* %1243, align 1
  %1244 = getelementptr inbounds i8, i8* %1229, i64 224
  %1245 = bitcast i8* %1244 to <32 x i8>*
  store <32 x i8> %1197, <32 x i8>* %1245, align 1
  %1246 = getelementptr inbounds i8, i8* %1229, i64 256
  %1247 = bitcast i8* %1246 to <32 x i8>*
  store <32 x i8> %1197, <32 x i8>* %1247, align 1
  %1248 = getelementptr inbounds i8, i8* %1229, i64 288
  %1249 = bitcast i8* %1248 to <32 x i8>*
  store <32 x i8> %1197, <32 x i8>* %1249, align 1
  %1250 = getelementptr inbounds i8, i8* %1229, i64 320
  %1251 = bitcast i8* %1250 to <32 x i8>*
  store <32 x i8> %1197, <32 x i8>* %1251, align 1
  %1252 = getelementptr inbounds i8, i8* %1229, i64 352
  %1253 = bitcast i8* %1252 to <32 x i8>*
  store <32 x i8> %1197, <32 x i8>* %1253, align 1
  %1254 = getelementptr inbounds i8, i8* %1229, i64 384
  %1255 = bitcast i8* %1254 to <32 x i8>*
  store <32 x i8> %1197, <32 x i8>* %1255, align 1
  %1256 = getelementptr inbounds i8, i8* %1229, i64 416
  %1257 = bitcast i8* %1256 to <32 x i8>*
  store <32 x i8> %1197, <32 x i8>* %1257, align 1
  %1258 = getelementptr inbounds i8, i8* %1229, i64 448
  %1259 = bitcast i8* %1258 to <32 x i8>*
  store <32 x i8> %1197, <32 x i8>* %1259, align 1
  %1260 = getelementptr inbounds i8, i8* %1229, i64 480
  %1261 = bitcast i8* %1260 to <32 x i8>*
  store <32 x i8> %1197, <32 x i8>* %1261, align 1
  %1262 = getelementptr inbounds i8, i8* %1229, i64 512
  %1263 = add nuw nsw i32 %1230, 8
  %1264 = icmp eq i32 %1263, 64
  br i1 %1264, label %1350, label %1228

1265:                                             ; preds = %1201
  %1266 = ashr i32 %1204, 6
  %1267 = trunc i32 %1204 to i16
  %1268 = insertelement <16 x i16> undef, i16 %1267, i32 0
  %1269 = and <16 x i16> %1268, <i16 63, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef>
  %1270 = lshr <16 x i16> %1269, <i16 1, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0>
  %1271 = shufflevector <16 x i16> %1270, <16 x i16> undef, <16 x i32> zeroinitializer
  %1272 = sext i32 %1266 to i64
  %1273 = getelementptr inbounds i8, i8* %5, i64 %1272
  %1274 = getelementptr inbounds i8, i8* %1273, i64 1
  br label %1275

1275:                                             ; preds = %1342, %1265
  %1276 = phi i64 [ 0, %1265 ], [ %1343, %1342 ]
  %1277 = add nsw i64 %1276, %1272
  %1278 = icmp slt i64 %1277, 127
  br i1 %1278, label %1282, label %1279

1279:                                             ; preds = %1275
  %1280 = getelementptr inbounds i8, i8* %1202, i64 %1276
  %1281 = bitcast i8* %1280 to <2 x i64>*
  store <2 x i64> %1199, <2 x i64>* %1281, align 1
  br label %1342

1282:                                             ; preds = %1275
  %1283 = getelementptr inbounds i8, i8* %1273, i64 %1276
  %1284 = bitcast i8* %1283 to <16 x i8>*
  %1285 = load <16 x i8>, <16 x i8>* %1284, align 1
  %1286 = getelementptr inbounds i8, i8* %1274, i64 %1276
  %1287 = bitcast i8* %1286 to <16 x i8>*
  %1288 = load <16 x i8>, <16 x i8>* %1287, align 1
  %1289 = zext <16 x i8> %1285 to <16 x i16>
  %1290 = zext <16 x i8> %1288 to <16 x i16>
  %1291 = sub nsw <16 x i16> %1290, %1289
  %1292 = shl nuw nsw <16 x i16> %1289, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %1293 = or <16 x i16> %1292, <i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16>
  %1294 = mul <16 x i16> %1291, %1271
  %1295 = add <16 x i16> %1294, %1293
  %1296 = lshr <16 x i16> %1295, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %1297 = bitcast <16 x i16> %1296 to <4 x i64>
  %1298 = shufflevector <4 x i64> %1297, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %1299 = shufflevector <2 x i64> %1298, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1300 = bitcast <4 x i64> %1299 to <16 x i16>
  %1301 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %1296, <16 x i16> %1300) #8
  %1302 = bitcast <32 x i8> %1301 to <4 x i64>
  %1303 = trunc i64 %1277 to i8
  %1304 = add i8 %1303, 1
  %1305 = add i8 %1303, 2
  %1306 = add i8 %1303, 3
  %1307 = add i8 %1303, 4
  %1308 = add i8 %1303, 5
  %1309 = add i8 %1303, 6
  %1310 = add i8 %1303, 7
  %1311 = add i8 %1303, 8
  %1312 = add i8 %1303, 9
  %1313 = add i8 %1303, 10
  %1314 = add i8 %1303, 11
  %1315 = add i8 %1303, 12
  %1316 = add i8 %1303, 13
  %1317 = add i8 %1303, 14
  %1318 = add i8 %1303, 15
  %1319 = insertelement <16 x i8> undef, i8 %1303, i32 0
  %1320 = insertelement <16 x i8> %1319, i8 %1304, i32 1
  %1321 = insertelement <16 x i8> %1320, i8 %1305, i32 2
  %1322 = insertelement <16 x i8> %1321, i8 %1306, i32 3
  %1323 = insertelement <16 x i8> %1322, i8 %1307, i32 4
  %1324 = insertelement <16 x i8> %1323, i8 %1308, i32 5
  %1325 = insertelement <16 x i8> %1324, i8 %1309, i32 6
  %1326 = insertelement <16 x i8> %1325, i8 %1310, i32 7
  %1327 = insertelement <16 x i8> %1326, i8 %1311, i32 8
  %1328 = insertelement <16 x i8> %1327, i8 %1312, i32 9
  %1329 = insertelement <16 x i8> %1328, i8 %1313, i32 10
  %1330 = insertelement <16 x i8> %1329, i8 %1314, i32 11
  %1331 = insertelement <16 x i8> %1330, i8 %1315, i32 12
  %1332 = insertelement <16 x i8> %1331, i8 %1316, i32 13
  %1333 = insertelement <16 x i8> %1332, i8 %1317, i32 14
  %1334 = insertelement <16 x i8> %1333, i8 %1318, i32 15
  %1335 = tail call <16 x i8> @llvm.usub.sat.v16i8(<16 x i8> <i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127>, <16 x i8> %1334) #8
  %1336 = icmp eq <16 x i8> %1335, zeroinitializer
  %1337 = shufflevector <4 x i64> %1302, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %1338 = bitcast <2 x i64> %1337 to <16 x i8>
  %1339 = select <16 x i1> %1336, <16 x i8> %1200, <16 x i8> %1338
  %1340 = getelementptr inbounds i8, i8* %1202, i64 %1276
  %1341 = bitcast i8* %1340 to <16 x i8>*
  store <16 x i8> %1339, <16 x i8>* %1341, align 1
  br label %1342

1342:                                             ; preds = %1282, %1279
  %1343 = add nuw nsw i64 %1276, 16
  %1344 = icmp ult i64 %1343, 64
  br i1 %1344, label %1275, label %1345

1345:                                             ; preds = %1342
  %1346 = add nsw i32 %1204, %8
  %1347 = add nuw nsw i32 %1203, 1
  %1348 = getelementptr inbounds i8, i8* %1202, i64 64
  %1349 = icmp eq i32 %1347, 64
  br i1 %1349, label %1350, label %1201

1350:                                             ; preds = %1345, %1224, %1228, %1206
  call fastcc void @transpose(i8* nonnull %1193, i64 64, i8* %0, i64 %1, i32 64, i32 64) #8
  call void @llvm.lifetime.end.p0i8(i64 4096, i8* nonnull %1193) #8
  br label %4740

1351:                                             ; preds = %9
  %1352 = icmp slt i32 %2, %3
  br i1 %1352, label %1353, label %2946

1353:                                             ; preds = %1351
  %1354 = shl nsw i32 %2, 1
  %1355 = icmp eq i32 %1354, %3
  br i1 %1355, label %1356, label %2247

1356:                                             ; preds = %1353
  %1357 = add i32 %2, -4
  %1358 = lshr i32 %1357, 2
  %1359 = shl i32 %1357, 30
  %1360 = or i32 %1358, %1359
  switch i32 %1360, label %4740 [
    i32 0, label %1361
    i32 1, label %1511
    i32 3, label %1759
    i32 7, label %2088
  ]

1361:                                             ; preds = %1356
  %1362 = bitcast [4 x <2 x i64>]* %22 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %1362) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %1362, i8 -86, i64 64, i1 false) #8
  %1363 = sub nsw i32 6, %6
  %1364 = shl i32 11, %6
  %1365 = sext i32 %1364 to i64
  %1366 = getelementptr inbounds i8, i8* %5, i64 %1365
  %1367 = load i8, i8* %1366, align 1
  %1368 = insertelement <16 x i8> undef, i8 %1367, i32 0
  %1369 = shufflevector <16 x i8> %1368, <16 x i8> undef, <16 x i32> zeroinitializer
  %1370 = icmp eq i32 %6, 0
  br label %1371

1371:                                             ; preds = %1416, %1361
  %1372 = phi i64 [ 0, %1361 ], [ %1446, %1416 ]
  %1373 = phi i32 [ %8, %1361 ], [ %1445, %1416 ]
  %1374 = ashr i32 %1373, %1363
  %1375 = sub nsw i32 %1364, %1374
  %1376 = ashr i32 %1375, %6
  %1377 = icmp slt i32 %1376, 1
  br i1 %1377, label %1378, label %1387

1378:                                             ; preds = %1371
  %1379 = trunc i64 %1372 to i32
  %1380 = icmp slt i32 %1379, 4
  br i1 %1380, label %1381, label %1448

1381:                                             ; preds = %1378
  %1382 = and i64 %1372, 4294967295
  %1383 = getelementptr inbounds [4 x <2 x i64>], [4 x <2 x i64>]* %22, i64 0, i64 %1382
  %1384 = bitcast <2 x i64>* %1383 to <16 x i8>*
  store <16 x i8> %1369, <16 x i8>* %1384, align 16
  %1385 = add nuw nsw i64 %1382, 1
  %1386 = icmp eq i64 %1385, 4
  br i1 %1386, label %1448, label %4787

1387:                                             ; preds = %1371
  %1388 = icmp slt i32 %1376, 8
  %1389 = select i1 %1388, i32 %1376, i32 8
  %1390 = sext i32 %1374 to i64
  %1391 = getelementptr inbounds i8, i8* %5, i64 %1390
  %1392 = bitcast i8* %1391 to <2 x i64>*
  %1393 = load <2 x i64>, <2 x i64>* %1392, align 1
  br i1 %1370, label %1406, label %1394

1394:                                             ; preds = %1387
  %1395 = bitcast <2 x i64> %1393 to <16 x i8>
  %1396 = shufflevector <16 x i8> %1395, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %1397 = bitcast <16 x i8> %1396 to <2 x i64>
  %1398 = shufflevector <16 x i8> %1396, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %1399 = trunc i32 %1373 to i16
  %1400 = insertelement <16 x i16> undef, i16 %1399, i32 0
  %1401 = shufflevector <16 x i16> %1400, <16 x i16> undef, <16 x i32> zeroinitializer
  %1402 = tail call <16 x i16> @llvm.x86.avx2.pslli.w(<16 x i16> %1401, i32 %6) #8
  %1403 = lshr <16 x i16> %1402, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %1404 = bitcast <16 x i16> %1403 to <4 x i64>
  %1405 = and <4 x i64> %1404, <i64 8725857424048159, i64 8725857424048159, i64 8725857424048159, i64 8725857424048159>
  br label %1416

1406:                                             ; preds = %1387
  %1407 = getelementptr inbounds i8, i8* %1391, i64 1
  %1408 = bitcast i8* %1407 to <16 x i8>*
  %1409 = load <16 x i8>, <16 x i8>* %1408, align 1
  %1410 = trunc i32 %1373 to i16
  %1411 = insertelement <16 x i16> undef, i16 %1410, i32 0
  %1412 = and <16 x i16> %1411, <i16 63, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef>
  %1413 = lshr <16 x i16> %1412, <i16 1, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0>
  %1414 = shufflevector <16 x i16> %1413, <16 x i16> undef, <16 x i32> zeroinitializer
  %1415 = bitcast <16 x i16> %1414 to <4 x i64>
  br label %1416

1416:                                             ; preds = %1406, %1394
  %1417 = phi <4 x i64> [ %1405, %1394 ], [ %1415, %1406 ]
  %1418 = phi <2 x i64> [ %1397, %1394 ], [ %1393, %1406 ]
  %1419 = phi <16 x i8> [ %1398, %1394 ], [ %1409, %1406 ]
  %1420 = bitcast <2 x i64> %1418 to <16 x i8>
  %1421 = zext <16 x i8> %1420 to <16 x i16>
  %1422 = zext <16 x i8> %1419 to <16 x i16>
  %1423 = sub nsw <16 x i16> %1422, %1421
  %1424 = shl nuw nsw <16 x i16> %1421, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %1425 = or <16 x i16> %1424, <i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16>
  %1426 = bitcast <4 x i64> %1417 to <16 x i16>
  %1427 = mul <16 x i16> %1423, %1426
  %1428 = add <16 x i16> %1427, %1425
  %1429 = lshr <16 x i16> %1428, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %1430 = bitcast <16 x i16> %1429 to <4 x i64>
  %1431 = shufflevector <4 x i64> %1430, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %1432 = shufflevector <2 x i64> %1431, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1433 = bitcast <4 x i64> %1432 to <16 x i16>
  %1434 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %1429, <16 x i16> %1433) #8
  %1435 = bitcast <32 x i8> %1434 to <4 x i64>
  %1436 = shufflevector <4 x i64> %1435, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %1437 = sext i32 %1389 to i64
  %1438 = getelementptr inbounds [33 x [32 x i8]], [33 x [32 x i8]]* bitcast (<{ [32 x i8], <{ i8, [31 x i8] }>, <{ i8, i8, [30 x i8] }>, <{ i8, i8, i8, [29 x i8] }>, <{ i8, i8, i8, i8, [28 x i8] }>, <{ i8, i8, i8, i8, i8, [27 x i8] }>, <{ i8, i8, i8, i8, i8, i8, [26 x i8] }>, <{ i8, i8, i8, i8, i8, i8, i8, [25 x i8] }>, <{ [8 x i8], [24 x i8] }>, <{ [9 x i8], [23 x i8] }>, <{ [10 x i8], [22 x i8] }>, <{ [11 x i8], [21 x i8] }>, <{ [12 x i8], [20 x i8] }>, <{ [13 x i8], [19 x i8] }>, <{ [14 x i8], [18 x i8] }>, <{ [15 x i8], [17 x i8] }>, <{ [16 x i8], [16 x i8] }>, <{ [17 x i8], [15 x i8] }>, <{ [18 x i8], [14 x i8] }>, <{ [19 x i8], [13 x i8] }>, <{ [20 x i8], [12 x i8] }>, <{ [21 x i8], [11 x i8] }>, <{ [22 x i8], [10 x i8] }>, <{ [23 x i8], [9 x i8] }>, <{ [24 x i8], [8 x i8] }>, [32 x i8], [32 x i8], [32 x i8], [32 x i8], [32 x i8], [32 x i8], [32 x i8], [32 x i8] }>* @BaseMask to [33 x [32 x i8]]*), i64 0, i64 %1437, i64 0
  %1439 = bitcast i8* %1438 to <16 x i8>*
  %1440 = load <16 x i8>, <16 x i8>* %1439, align 32
  %1441 = bitcast <2 x i64> %1436 to <16 x i8>
  %1442 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %1369, <16 x i8> %1441, <16 x i8> %1440) #8
  %1443 = getelementptr inbounds [4 x <2 x i64>], [4 x <2 x i64>]* %22, i64 0, i64 %1372
  %1444 = bitcast <2 x i64>* %1443 to <16 x i8>*
  store <16 x i8> %1442, <16 x i8>* %1444, align 16
  %1445 = add nsw i32 %1373, %8
  %1446 = add nuw nsw i64 %1372, 1
  %1447 = icmp eq i64 %1446, 4
  br i1 %1447, label %1448, label %1371

1448:                                             ; preds = %1416, %1381, %4787, %4792, %4797, %1378
  %1449 = getelementptr inbounds [4 x <2 x i64>], [4 x <2 x i64>]* %22, i64 0, i64 1
  %1450 = getelementptr inbounds [4 x <2 x i64>], [4 x <2 x i64>]* %22, i64 0, i64 2
  %1451 = getelementptr inbounds [4 x <2 x i64>], [4 x <2 x i64>]* %22, i64 0, i64 3
  %1452 = bitcast [4 x <2 x i64>]* %22 to <16 x i8>*
  %1453 = load <16 x i8>, <16 x i8>* %1452, align 16
  %1454 = bitcast <2 x i64>* %1449 to <16 x i8>*
  %1455 = load <16 x i8>, <16 x i8>* %1454, align 16
  %1456 = shufflevector <16 x i8> %1453, <16 x i8> %1455, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %1457 = bitcast <2 x i64>* %1450 to <16 x i8>*
  %1458 = load <16 x i8>, <16 x i8>* %1457, align 16
  %1459 = bitcast <2 x i64>* %1451 to <16 x i8>*
  %1460 = load <16 x i8>, <16 x i8>* %1459, align 16
  %1461 = shufflevector <16 x i8> %1458, <16 x i8> %1460, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %1462 = bitcast <16 x i8> %1456 to <8 x i16>
  %1463 = bitcast <16 x i8> %1461 to <8 x i16>
  %1464 = shufflevector <8 x i16> %1462, <8 x i16> %1463, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %1465 = shufflevector <8 x i16> %1462, <8 x i16> %1463, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %1466 = bitcast <8 x i16> %1464 to <16 x i8>
  %1467 = shufflevector <16 x i8> %1466, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1468 = shufflevector <16 x i8> %1466, <16 x i8> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1469 = shufflevector <16 x i8> %1466, <16 x i8> undef, <16 x i32> <i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1470 = bitcast <8 x i16> %1465 to <16 x i8>
  %1471 = shufflevector <16 x i8> %1470, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1472 = shufflevector <16 x i8> %1470, <16 x i8> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1473 = shufflevector <16 x i8> %1470, <16 x i8> undef, <16 x i32> <i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1474 = bitcast <8 x i16> %1464 to <4 x i32>
  %1475 = extractelement <4 x i32> %1474, i32 0
  %1476 = bitcast i8* %0 to i32*
  store i32 %1475, i32* %1476, align 4
  %1477 = bitcast <16 x i8> %1467 to <4 x i32>
  %1478 = extractelement <4 x i32> %1477, i32 0
  %1479 = getelementptr inbounds i8, i8* %0, i64 %1
  %1480 = bitcast i8* %1479 to i32*
  store i32 %1478, i32* %1480, align 4
  %1481 = bitcast <16 x i8> %1468 to <4 x i32>
  %1482 = extractelement <4 x i32> %1481, i32 0
  %1483 = shl nsw i64 %1, 1
  %1484 = getelementptr inbounds i8, i8* %0, i64 %1483
  %1485 = bitcast i8* %1484 to i32*
  store i32 %1482, i32* %1485, align 4
  %1486 = bitcast <16 x i8> %1469 to <4 x i32>
  %1487 = extractelement <4 x i32> %1486, i32 0
  %1488 = mul nsw i64 %1, 3
  %1489 = getelementptr inbounds i8, i8* %0, i64 %1488
  %1490 = bitcast i8* %1489 to i32*
  store i32 %1487, i32* %1490, align 4
  %1491 = bitcast <8 x i16> %1465 to <4 x i32>
  %1492 = extractelement <4 x i32> %1491, i32 0
  %1493 = shl nsw i64 %1, 2
  %1494 = getelementptr inbounds i8, i8* %0, i64 %1493
  %1495 = bitcast i8* %1494 to i32*
  store i32 %1492, i32* %1495, align 4
  %1496 = bitcast <16 x i8> %1471 to <4 x i32>
  %1497 = extractelement <4 x i32> %1496, i32 0
  %1498 = mul nsw i64 %1, 5
  %1499 = getelementptr inbounds i8, i8* %0, i64 %1498
  %1500 = bitcast i8* %1499 to i32*
  store i32 %1497, i32* %1500, align 4
  %1501 = bitcast <16 x i8> %1472 to <4 x i32>
  %1502 = extractelement <4 x i32> %1501, i32 0
  %1503 = mul nsw i64 %1, 6
  %1504 = getelementptr inbounds i8, i8* %0, i64 %1503
  %1505 = bitcast i8* %1504 to i32*
  store i32 %1502, i32* %1505, align 4
  %1506 = bitcast <16 x i8> %1473 to <4 x i32>
  %1507 = extractelement <4 x i32> %1506, i32 0
  %1508 = mul nsw i64 %1, 7
  %1509 = getelementptr inbounds i8, i8* %0, i64 %1508
  %1510 = bitcast i8* %1509 to i32*
  store i32 %1507, i32* %1510, align 4
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %1362) #8
  br label %4740

1511:                                             ; preds = %1356
  %1512 = bitcast [8 x <2 x i64>]* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %1512) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %1512, i8 -86, i64 128, i1 false) #8
  %1513 = sub nsw i32 6, %6
  %1514 = shl i32 23, %6
  %1515 = sext i32 %1514 to i64
  %1516 = getelementptr inbounds i8, i8* %5, i64 %1515
  %1517 = load i8, i8* %1516, align 1
  %1518 = insertelement <16 x i8> undef, i8 %1517, i32 0
  %1519 = shufflevector <16 x i8> %1518, <16 x i8> undef, <16 x i32> zeroinitializer
  %1520 = icmp eq i32 %6, 0
  br label %1521

1521:                                             ; preds = %1566, %1511
  %1522 = phi i64 [ 0, %1511 ], [ %1596, %1566 ]
  %1523 = phi i32 [ %8, %1511 ], [ %1595, %1566 ]
  %1524 = ashr i32 %1523, %1513
  %1525 = sub nsw i32 %1514, %1524
  %1526 = ashr i32 %1525, %6
  %1527 = icmp slt i32 %1526, 1
  br i1 %1527, label %1528, label %1537

1528:                                             ; preds = %1521
  %1529 = trunc i64 %1522 to i32
  %1530 = icmp slt i32 %1529, 8
  br i1 %1530, label %1531, label %1598

1531:                                             ; preds = %1528
  %1532 = and i64 %1522, 4294967295
  %1533 = getelementptr inbounds [8 x <2 x i64>], [8 x <2 x i64>]* %16, i64 0, i64 %1532
  %1534 = bitcast <2 x i64>* %1533 to <16 x i8>*
  store <16 x i8> %1519, <16 x i8>* %1534, align 16
  %1535 = add nuw nsw i64 %1532, 1
  %1536 = icmp eq i64 %1535, 8
  br i1 %1536, label %1598, label %4800

1537:                                             ; preds = %1521
  %1538 = icmp slt i32 %1526, 16
  %1539 = select i1 %1538, i32 %1526, i32 16
  %1540 = sext i32 %1524 to i64
  %1541 = getelementptr inbounds i8, i8* %5, i64 %1540
  %1542 = bitcast i8* %1541 to <2 x i64>*
  %1543 = load <2 x i64>, <2 x i64>* %1542, align 1
  br i1 %1520, label %1556, label %1544

1544:                                             ; preds = %1537
  %1545 = bitcast <2 x i64> %1543 to <16 x i8>
  %1546 = shufflevector <16 x i8> %1545, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %1547 = bitcast <16 x i8> %1546 to <2 x i64>
  %1548 = shufflevector <16 x i8> %1546, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %1549 = trunc i32 %1523 to i16
  %1550 = insertelement <16 x i16> undef, i16 %1549, i32 0
  %1551 = shufflevector <16 x i16> %1550, <16 x i16> undef, <16 x i32> zeroinitializer
  %1552 = tail call <16 x i16> @llvm.x86.avx2.pslli.w(<16 x i16> %1551, i32 %6) #8
  %1553 = lshr <16 x i16> %1552, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %1554 = bitcast <16 x i16> %1553 to <4 x i64>
  %1555 = and <4 x i64> %1554, <i64 8725857424048159, i64 8725857424048159, i64 8725857424048159, i64 8725857424048159>
  br label %1566

1556:                                             ; preds = %1537
  %1557 = getelementptr inbounds i8, i8* %1541, i64 1
  %1558 = bitcast i8* %1557 to <16 x i8>*
  %1559 = load <16 x i8>, <16 x i8>* %1558, align 1
  %1560 = trunc i32 %1523 to i16
  %1561 = insertelement <16 x i16> undef, i16 %1560, i32 0
  %1562 = and <16 x i16> %1561, <i16 63, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef>
  %1563 = lshr <16 x i16> %1562, <i16 1, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0>
  %1564 = shufflevector <16 x i16> %1563, <16 x i16> undef, <16 x i32> zeroinitializer
  %1565 = bitcast <16 x i16> %1564 to <4 x i64>
  br label %1566

1566:                                             ; preds = %1556, %1544
  %1567 = phi <4 x i64> [ %1555, %1544 ], [ %1565, %1556 ]
  %1568 = phi <2 x i64> [ %1547, %1544 ], [ %1543, %1556 ]
  %1569 = phi <16 x i8> [ %1548, %1544 ], [ %1559, %1556 ]
  %1570 = bitcast <2 x i64> %1568 to <16 x i8>
  %1571 = zext <16 x i8> %1570 to <16 x i16>
  %1572 = zext <16 x i8> %1569 to <16 x i16>
  %1573 = sub nsw <16 x i16> %1572, %1571
  %1574 = shl nuw nsw <16 x i16> %1571, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %1575 = or <16 x i16> %1574, <i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16>
  %1576 = bitcast <4 x i64> %1567 to <16 x i16>
  %1577 = mul <16 x i16> %1573, %1576
  %1578 = add <16 x i16> %1577, %1575
  %1579 = lshr <16 x i16> %1578, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %1580 = bitcast <16 x i16> %1579 to <4 x i64>
  %1581 = shufflevector <4 x i64> %1580, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %1582 = shufflevector <2 x i64> %1581, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1583 = bitcast <4 x i64> %1582 to <16 x i16>
  %1584 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %1579, <16 x i16> %1583) #8
  %1585 = bitcast <32 x i8> %1584 to <4 x i64>
  %1586 = shufflevector <4 x i64> %1585, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %1587 = sext i32 %1539 to i64
  %1588 = getelementptr inbounds [33 x [32 x i8]], [33 x [32 x i8]]* bitcast (<{ [32 x i8], <{ i8, [31 x i8] }>, <{ i8, i8, [30 x i8] }>, <{ i8, i8, i8, [29 x i8] }>, <{ i8, i8, i8, i8, [28 x i8] }>, <{ i8, i8, i8, i8, i8, [27 x i8] }>, <{ i8, i8, i8, i8, i8, i8, [26 x i8] }>, <{ i8, i8, i8, i8, i8, i8, i8, [25 x i8] }>, <{ [8 x i8], [24 x i8] }>, <{ [9 x i8], [23 x i8] }>, <{ [10 x i8], [22 x i8] }>, <{ [11 x i8], [21 x i8] }>, <{ [12 x i8], [20 x i8] }>, <{ [13 x i8], [19 x i8] }>, <{ [14 x i8], [18 x i8] }>, <{ [15 x i8], [17 x i8] }>, <{ [16 x i8], [16 x i8] }>, <{ [17 x i8], [15 x i8] }>, <{ [18 x i8], [14 x i8] }>, <{ [19 x i8], [13 x i8] }>, <{ [20 x i8], [12 x i8] }>, <{ [21 x i8], [11 x i8] }>, <{ [22 x i8], [10 x i8] }>, <{ [23 x i8], [9 x i8] }>, <{ [24 x i8], [8 x i8] }>, [32 x i8], [32 x i8], [32 x i8], [32 x i8], [32 x i8], [32 x i8], [32 x i8], [32 x i8] }>* @BaseMask to [33 x [32 x i8]]*), i64 0, i64 %1587, i64 0
  %1589 = bitcast i8* %1588 to <16 x i8>*
  %1590 = load <16 x i8>, <16 x i8>* %1589, align 32
  %1591 = bitcast <2 x i64> %1586 to <16 x i8>
  %1592 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %1519, <16 x i8> %1591, <16 x i8> %1590) #8
  %1593 = getelementptr inbounds [8 x <2 x i64>], [8 x <2 x i64>]* %16, i64 0, i64 %1522
  %1594 = bitcast <2 x i64>* %1593 to <16 x i8>*
  store <16 x i8> %1592, <16 x i8>* %1594, align 16
  %1595 = add nsw i32 %1523, %8
  %1596 = add nuw nsw i64 %1522, 1
  %1597 = icmp eq i64 %1596, 8
  br i1 %1597, label %1598, label %1521

1598:                                             ; preds = %1566, %1531, %4800, %4805, %4810, %4815, %4820, %4825, %4830, %1528
  %1599 = getelementptr inbounds [8 x <2 x i64>], [8 x <2 x i64>]* %16, i64 0, i64 1
  %1600 = getelementptr inbounds [8 x <2 x i64>], [8 x <2 x i64>]* %16, i64 0, i64 2
  %1601 = getelementptr inbounds [8 x <2 x i64>], [8 x <2 x i64>]* %16, i64 0, i64 3
  %1602 = getelementptr inbounds [8 x <2 x i64>], [8 x <2 x i64>]* %16, i64 0, i64 4
  %1603 = getelementptr inbounds [8 x <2 x i64>], [8 x <2 x i64>]* %16, i64 0, i64 5
  %1604 = getelementptr inbounds [8 x <2 x i64>], [8 x <2 x i64>]* %16, i64 0, i64 6
  %1605 = getelementptr inbounds [8 x <2 x i64>], [8 x <2 x i64>]* %16, i64 0, i64 7
  %1606 = bitcast [8 x <2 x i64>]* %16 to <16 x i8>*
  %1607 = load <16 x i8>, <16 x i8>* %1606, align 16
  %1608 = bitcast <2 x i64>* %1599 to <16 x i8>*
  %1609 = load <16 x i8>, <16 x i8>* %1608, align 16
  %1610 = shufflevector <16 x i8> %1607, <16 x i8> %1609, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %1611 = bitcast <2 x i64>* %1600 to <16 x i8>*
  %1612 = load <16 x i8>, <16 x i8>* %1611, align 16
  %1613 = bitcast <2 x i64>* %1601 to <16 x i8>*
  %1614 = load <16 x i8>, <16 x i8>* %1613, align 16
  %1615 = shufflevector <16 x i8> %1612, <16 x i8> %1614, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %1616 = bitcast <2 x i64>* %1602 to <16 x i8>*
  %1617 = load <16 x i8>, <16 x i8>* %1616, align 16
  %1618 = bitcast <2 x i64>* %1603 to <16 x i8>*
  %1619 = load <16 x i8>, <16 x i8>* %1618, align 16
  %1620 = shufflevector <16 x i8> %1617, <16 x i8> %1619, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %1621 = bitcast <2 x i64>* %1604 to <16 x i8>*
  %1622 = load <16 x i8>, <16 x i8>* %1621, align 16
  %1623 = bitcast <2 x i64>* %1605 to <16 x i8>*
  %1624 = load <16 x i8>, <16 x i8>* %1623, align 16
  %1625 = shufflevector <16 x i8> %1622, <16 x i8> %1624, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %1626 = shufflevector <16 x i8> %1607, <16 x i8> %1609, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %1627 = shufflevector <16 x i8> %1612, <16 x i8> %1614, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %1628 = shufflevector <16 x i8> %1617, <16 x i8> %1619, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %1629 = shufflevector <16 x i8> %1622, <16 x i8> %1624, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %1630 = bitcast <16 x i8> %1610 to <8 x i16>
  %1631 = bitcast <16 x i8> %1615 to <8 x i16>
  %1632 = shufflevector <8 x i16> %1630, <8 x i16> %1631, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %1633 = bitcast <16 x i8> %1620 to <8 x i16>
  %1634 = bitcast <16 x i8> %1625 to <8 x i16>
  %1635 = shufflevector <8 x i16> %1633, <8 x i16> %1634, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %1636 = bitcast <16 x i8> %1626 to <8 x i16>
  %1637 = bitcast <16 x i8> %1627 to <8 x i16>
  %1638 = shufflevector <8 x i16> %1636, <8 x i16> %1637, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %1639 = bitcast <16 x i8> %1628 to <8 x i16>
  %1640 = bitcast <16 x i8> %1629 to <8 x i16>
  %1641 = shufflevector <8 x i16> %1639, <8 x i16> %1640, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %1642 = bitcast <8 x i16> %1632 to <4 x i32>
  %1643 = bitcast <8 x i16> %1635 to <4 x i32>
  %1644 = shufflevector <4 x i32> %1642, <4 x i32> %1643, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1645 = bitcast <4 x i32> %1644 to <2 x i64>
  %1646 = shufflevector <4 x i32> %1642, <4 x i32> %1643, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1647 = bitcast <4 x i32> %1646 to <2 x i64>
  %1648 = bitcast <8 x i16> %1638 to <4 x i32>
  %1649 = bitcast <8 x i16> %1641 to <4 x i32>
  %1650 = shufflevector <4 x i32> %1648, <4 x i32> %1649, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1651 = bitcast <4 x i32> %1650 to <2 x i64>
  %1652 = shufflevector <4 x i32> %1648, <4 x i32> %1649, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1653 = bitcast <4 x i32> %1652 to <2 x i64>
  %1654 = shufflevector <2 x i64> %1651, <2 x i64> undef, <2 x i32> <i32 undef, i32 0>
  %1655 = shufflevector <2 x i64> %1653, <2 x i64> undef, <2 x i32> <i32 undef, i32 0>
  %1656 = shufflevector <8 x i16> %1630, <8 x i16> %1631, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %1657 = shufflevector <8 x i16> %1633, <8 x i16> %1634, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %1658 = shufflevector <8 x i16> %1636, <8 x i16> %1637, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %1659 = shufflevector <8 x i16> %1639, <8 x i16> %1640, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %1660 = bitcast <8 x i16> %1656 to <4 x i32>
  %1661 = bitcast <8 x i16> %1657 to <4 x i32>
  %1662 = shufflevector <4 x i32> %1660, <4 x i32> %1661, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1663 = bitcast <4 x i32> %1662 to <2 x i64>
  %1664 = shufflevector <4 x i32> %1660, <4 x i32> %1661, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1665 = bitcast <4 x i32> %1664 to <2 x i64>
  %1666 = bitcast <8 x i16> %1658 to <4 x i32>
  %1667 = bitcast <8 x i16> %1659 to <4 x i32>
  %1668 = shufflevector <4 x i32> %1666, <4 x i32> %1667, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1669 = bitcast <4 x i32> %1668 to <2 x i64>
  %1670 = shufflevector <4 x i32> %1666, <4 x i32> %1667, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1671 = bitcast <4 x i32> %1670 to <2 x i64>
  %1672 = shufflevector <2 x i64> %1669, <2 x i64> undef, <2 x i32> <i32 undef, i32 0>
  %1673 = shufflevector <2 x i64> %1671, <2 x i64> undef, <2 x i32> <i32 undef, i32 0>
  %1674 = extractelement <2 x i64> %1645, i32 0
  %1675 = bitcast i8* %0 to i64*
  store i64 %1674, i64* %1675, align 1
  %1676 = shl nsw i64 %1, 3
  %1677 = getelementptr inbounds i8, i8* %0, i64 %1676
  %1678 = bitcast <2 x i64> %1654 to <16 x i8>
  %1679 = shufflevector <16 x i8> %1678, <16 x i8> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1680 = bitcast <16 x i8> %1679 to <2 x i64>
  %1681 = extractelement <2 x i64> %1680, i32 0
  %1682 = bitcast i8* %1677 to i64*
  store i64 %1681, i64* %1682, align 1
  %1683 = getelementptr inbounds i8, i8* %0, i64 %1
  %1684 = extractelement <2 x i64> %1645, i32 1
  %1685 = bitcast i8* %1683 to i64*
  store i64 %1684, i64* %1685, align 1
  %1686 = mul nsw i64 %1, 9
  %1687 = getelementptr inbounds i8, i8* %0, i64 %1686
  %1688 = bitcast <4 x i32> %1650 to <16 x i8>
  %1689 = shufflevector <16 x i8> %1688, <16 x i8> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1690 = bitcast <16 x i8> %1689 to <2 x i64>
  %1691 = extractelement <2 x i64> %1690, i32 0
  %1692 = bitcast i8* %1687 to i64*
  store i64 %1691, i64* %1692, align 1
  %1693 = shl nsw i64 %1, 1
  %1694 = getelementptr inbounds i8, i8* %0, i64 %1693
  %1695 = extractelement <2 x i64> %1647, i32 0
  %1696 = bitcast i8* %1694 to i64*
  store i64 %1695, i64* %1696, align 1
  %1697 = mul nsw i64 %1, 10
  %1698 = getelementptr inbounds i8, i8* %0, i64 %1697
  %1699 = bitcast <2 x i64> %1655 to <16 x i8>
  %1700 = shufflevector <16 x i8> %1699, <16 x i8> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1701 = bitcast <16 x i8> %1700 to <2 x i64>
  %1702 = extractelement <2 x i64> %1701, i32 0
  %1703 = bitcast i8* %1698 to i64*
  store i64 %1702, i64* %1703, align 1
  %1704 = mul nsw i64 %1, 3
  %1705 = getelementptr inbounds i8, i8* %0, i64 %1704
  %1706 = extractelement <2 x i64> %1647, i32 1
  %1707 = bitcast i8* %1705 to i64*
  store i64 %1706, i64* %1707, align 1
  %1708 = mul nsw i64 %1, 11
  %1709 = getelementptr inbounds i8, i8* %0, i64 %1708
  %1710 = bitcast <4 x i32> %1652 to <16 x i8>
  %1711 = shufflevector <16 x i8> %1710, <16 x i8> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1712 = bitcast <16 x i8> %1711 to <2 x i64>
  %1713 = extractelement <2 x i64> %1712, i32 0
  %1714 = bitcast i8* %1709 to i64*
  store i64 %1713, i64* %1714, align 1
  %1715 = shl nsw i64 %1, 2
  %1716 = getelementptr inbounds i8, i8* %0, i64 %1715
  %1717 = extractelement <2 x i64> %1663, i32 0
  %1718 = bitcast i8* %1716 to i64*
  store i64 %1717, i64* %1718, align 1
  %1719 = mul nsw i64 %1, 12
  %1720 = getelementptr inbounds i8, i8* %0, i64 %1719
  %1721 = bitcast <2 x i64> %1672 to <16 x i8>
  %1722 = shufflevector <16 x i8> %1721, <16 x i8> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1723 = bitcast <16 x i8> %1722 to <2 x i64>
  %1724 = extractelement <2 x i64> %1723, i32 0
  %1725 = bitcast i8* %1720 to i64*
  store i64 %1724, i64* %1725, align 1
  %1726 = mul nsw i64 %1, 5
  %1727 = getelementptr inbounds i8, i8* %0, i64 %1726
  %1728 = extractelement <2 x i64> %1663, i32 1
  %1729 = bitcast i8* %1727 to i64*
  store i64 %1728, i64* %1729, align 1
  %1730 = mul nsw i64 %1, 13
  %1731 = getelementptr inbounds i8, i8* %0, i64 %1730
  %1732 = bitcast <4 x i32> %1668 to <16 x i8>
  %1733 = shufflevector <16 x i8> %1732, <16 x i8> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1734 = bitcast <16 x i8> %1733 to <2 x i64>
  %1735 = extractelement <2 x i64> %1734, i32 0
  %1736 = bitcast i8* %1731 to i64*
  store i64 %1735, i64* %1736, align 1
  %1737 = mul nsw i64 %1, 6
  %1738 = getelementptr inbounds i8, i8* %0, i64 %1737
  %1739 = extractelement <2 x i64> %1665, i32 0
  %1740 = bitcast i8* %1738 to i64*
  store i64 %1739, i64* %1740, align 1
  %1741 = mul nsw i64 %1, 14
  %1742 = getelementptr inbounds i8, i8* %0, i64 %1741
  %1743 = bitcast <2 x i64> %1673 to <16 x i8>
  %1744 = shufflevector <16 x i8> %1743, <16 x i8> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1745 = bitcast <16 x i8> %1744 to <2 x i64>
  %1746 = extractelement <2 x i64> %1745, i32 0
  %1747 = bitcast i8* %1742 to i64*
  store i64 %1746, i64* %1747, align 1
  %1748 = mul nsw i64 %1, 7
  %1749 = getelementptr inbounds i8, i8* %0, i64 %1748
  %1750 = extractelement <2 x i64> %1665, i32 1
  %1751 = bitcast i8* %1749 to i64*
  store i64 %1750, i64* %1751, align 1
  %1752 = mul nsw i64 %1, 15
  %1753 = getelementptr inbounds i8, i8* %0, i64 %1752
  %1754 = bitcast <4 x i32> %1670 to <16 x i8>
  %1755 = shufflevector <16 x i8> %1754, <16 x i8> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1756 = bitcast <16 x i8> %1755 to <2 x i64>
  %1757 = extractelement <2 x i64> %1756, i32 0
  %1758 = bitcast i8* %1753 to i64*
  store i64 %1757, i64* %1758, align 1
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %1512) #8
  br label %4740

1759:                                             ; preds = %1356
  %1760 = bitcast [16 x <4 x i64>]* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %1760) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %1760, i8 -86, i64 512, i1 false) #8
  %1761 = bitcast [16 x <4 x i64>]* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %1761) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %1761, i8 -86, i64 512, i1 false) #8
  %1762 = getelementptr inbounds i8, i8* %5, i64 47
  %1763 = load i8, i8* %1762, align 1
  %1764 = insertelement <32 x i8> undef, i8 %1763, i32 0
  %1765 = shufflevector <32 x i8> %1764, <32 x i8> undef, <32 x i32> zeroinitializer
  br label %1766

1766:                                             ; preds = %1870, %1759
  %1767 = phi i64 [ 0, %1759 ], [ %1882, %1870 ]
  %1768 = phi i32 [ %8, %1759 ], [ %1881, %1870 ]
  %1769 = ashr i32 %1768, 6
  %1770 = sub nsw i32 47, %1769
  %1771 = icmp sgt i32 %1768, 3007
  br i1 %1771, label %1772, label %1819

1772:                                             ; preds = %1766
  %1773 = trunc i64 %1767 to i32
  %1774 = icmp slt i32 %1773, 16
  br i1 %1774, label %1775, label %1884

1775:                                             ; preds = %1772
  %1776 = and i64 %1767, 4294967295
  %1777 = sub nsw i64 0, %1767
  %1778 = sub nsw i64 15, %1767
  %1779 = and i64 %1777, 7
  %1780 = icmp eq i64 %1779, 0
  br i1 %1780, label %1789, label %1781

1781:                                             ; preds = %1775, %1781
  %1782 = phi i64 [ %1786, %1781 ], [ %1776, %1775 ]
  %1783 = phi i64 [ %1787, %1781 ], [ %1779, %1775 ]
  %1784 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %13, i64 0, i64 %1782
  %1785 = bitcast <4 x i64>* %1784 to <32 x i8>*
  store <32 x i8> %1765, <32 x i8>* %1785, align 32
  %1786 = add nuw nsw i64 %1782, 1
  %1787 = add i64 %1783, -1
  %1788 = icmp eq i64 %1787, 0
  br i1 %1788, label %1789, label %1781, !llvm.loop !47

1789:                                             ; preds = %1781, %1775
  %1790 = phi i64 [ %1776, %1775 ], [ %1786, %1781 ]
  %1791 = icmp ult i64 %1778, 7
  br i1 %1791, label %1884, label %1792

1792:                                             ; preds = %1789, %1792
  %1793 = phi i64 [ %1817, %1792 ], [ %1790, %1789 ]
  %1794 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %13, i64 0, i64 %1793
  %1795 = bitcast <4 x i64>* %1794 to <32 x i8>*
  store <32 x i8> %1765, <32 x i8>* %1795, align 32
  %1796 = add nuw nsw i64 %1793, 1
  %1797 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %13, i64 0, i64 %1796
  %1798 = bitcast <4 x i64>* %1797 to <32 x i8>*
  store <32 x i8> %1765, <32 x i8>* %1798, align 32
  %1799 = add nuw nsw i64 %1793, 2
  %1800 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %13, i64 0, i64 %1799
  %1801 = bitcast <4 x i64>* %1800 to <32 x i8>*
  store <32 x i8> %1765, <32 x i8>* %1801, align 32
  %1802 = add nuw nsw i64 %1793, 3
  %1803 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %13, i64 0, i64 %1802
  %1804 = bitcast <4 x i64>* %1803 to <32 x i8>*
  store <32 x i8> %1765, <32 x i8>* %1804, align 32
  %1805 = add nuw nsw i64 %1793, 4
  %1806 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %13, i64 0, i64 %1805
  %1807 = bitcast <4 x i64>* %1806 to <32 x i8>*
  store <32 x i8> %1765, <32 x i8>* %1807, align 32
  %1808 = add nuw nsw i64 %1793, 5
  %1809 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %13, i64 0, i64 %1808
  %1810 = bitcast <4 x i64>* %1809 to <32 x i8>*
  store <32 x i8> %1765, <32 x i8>* %1810, align 32
  %1811 = add nuw nsw i64 %1793, 6
  %1812 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %13, i64 0, i64 %1811
  %1813 = bitcast <4 x i64>* %1812 to <32 x i8>*
  store <32 x i8> %1765, <32 x i8>* %1813, align 32
  %1814 = add nuw nsw i64 %1793, 7
  %1815 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %13, i64 0, i64 %1814
  %1816 = bitcast <4 x i64>* %1815 to <32 x i8>*
  store <32 x i8> %1765, <32 x i8>* %1816, align 32
  %1817 = add nuw nsw i64 %1793, 8
  %1818 = icmp eq i64 %1817, 16
  br i1 %1818, label %1884, label %1792

1819:                                             ; preds = %1766
  %1820 = icmp slt i32 %1770, 32
  %1821 = select i1 %1820, i32 %1770, i32 32
  %1822 = trunc i32 %1768 to i16
  %1823 = insertelement <16 x i16> undef, i16 %1822, i32 0
  %1824 = and <16 x i16> %1823, <i16 63, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef>
  %1825 = lshr <16 x i16> %1824, <i16 1, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0>
  %1826 = shufflevector <16 x i16> %1825, <16 x i16> undef, <16 x i32> zeroinitializer
  %1827 = sext i32 %1769 to i64
  %1828 = getelementptr inbounds i8, i8* %5, i64 %1827
  %1829 = sext i32 %1821 to i64
  %1830 = bitcast i8* %1828 to <16 x i8>*
  %1831 = load <16 x i8>, <16 x i8>* %1830, align 1
  %1832 = getelementptr inbounds i8, i8* %1828, i64 1
  %1833 = bitcast i8* %1832 to <16 x i8>*
  %1834 = load <16 x i8>, <16 x i8>* %1833, align 1
  %1835 = zext <16 x i8> %1831 to <16 x i16>
  %1836 = zext <16 x i8> %1834 to <16 x i16>
  %1837 = sub nsw <16 x i16> %1836, %1835
  %1838 = shl nuw nsw <16 x i16> %1835, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %1839 = or <16 x i16> %1838, <i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16>
  %1840 = mul <16 x i16> %1837, %1826
  %1841 = add <16 x i16> %1840, %1839
  %1842 = lshr <16 x i16> %1841, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %1843 = bitcast <16 x i16> %1842 to <4 x i64>
  %1844 = shufflevector <4 x i64> %1843, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %1845 = shufflevector <2 x i64> %1844, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1846 = bitcast <4 x i64> %1845 to <16 x i16>
  %1847 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %1842, <16 x i16> %1846) #8
  %1848 = bitcast <32 x i8> %1847 to <4 x i64>
  %1849 = icmp sgt i32 %1821, 16
  br i1 %1849, label %1850, label %1870

1850:                                             ; preds = %1819
  %1851 = getelementptr inbounds i8, i8* %1828, i64 16
  %1852 = bitcast i8* %1851 to <16 x i8>*
  %1853 = load <16 x i8>, <16 x i8>* %1852, align 1
  %1854 = getelementptr inbounds i8, i8* %1851, i64 1
  %1855 = bitcast i8* %1854 to <16 x i8>*
  %1856 = load <16 x i8>, <16 x i8>* %1855, align 1
  %1857 = zext <16 x i8> %1853 to <16 x i16>
  %1858 = zext <16 x i8> %1856 to <16 x i16>
  %1859 = sub nsw <16 x i16> %1858, %1857
  %1860 = shl nuw nsw <16 x i16> %1857, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %1861 = or <16 x i16> %1860, <i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16>
  %1862 = mul <16 x i16> %1859, %1826
  %1863 = add <16 x i16> %1862, %1861
  %1864 = lshr <16 x i16> %1863, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %1865 = bitcast <16 x i16> %1864 to <4 x i64>
  %1866 = shufflevector <4 x i64> %1865, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %1867 = shufflevector <2 x i64> %1866, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1868 = bitcast <4 x i64> %1867 to <16 x i16>
  %1869 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %1864, <16 x i16> %1868) #8
  br label %1870

1870:                                             ; preds = %1850, %1819
  %1871 = phi <32 x i8> [ %1869, %1850 ], [ %1765, %1819 ]
  %1872 = bitcast <32 x i8> %1871 to <4 x i64>
  %1873 = shufflevector <4 x i64> %1848, <4 x i64> %1872, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %1874 = getelementptr inbounds [33 x [32 x i8]], [33 x [32 x i8]]* bitcast (<{ [32 x i8], <{ i8, [31 x i8] }>, <{ i8, i8, [30 x i8] }>, <{ i8, i8, i8, [29 x i8] }>, <{ i8, i8, i8, i8, [28 x i8] }>, <{ i8, i8, i8, i8, i8, [27 x i8] }>, <{ i8, i8, i8, i8, i8, i8, [26 x i8] }>, <{ i8, i8, i8, i8, i8, i8, i8, [25 x i8] }>, <{ [8 x i8], [24 x i8] }>, <{ [9 x i8], [23 x i8] }>, <{ [10 x i8], [22 x i8] }>, <{ [11 x i8], [21 x i8] }>, <{ [12 x i8], [20 x i8] }>, <{ [13 x i8], [19 x i8] }>, <{ [14 x i8], [18 x i8] }>, <{ [15 x i8], [17 x i8] }>, <{ [16 x i8], [16 x i8] }>, <{ [17 x i8], [15 x i8] }>, <{ [18 x i8], [14 x i8] }>, <{ [19 x i8], [13 x i8] }>, <{ [20 x i8], [12 x i8] }>, <{ [21 x i8], [11 x i8] }>, <{ [22 x i8], [10 x i8] }>, <{ [23 x i8], [9 x i8] }>, <{ [24 x i8], [8 x i8] }>, [32 x i8], [32 x i8], [32 x i8], [32 x i8], [32 x i8], [32 x i8], [32 x i8], [32 x i8] }>* @BaseMask to [33 x [32 x i8]]*), i64 0, i64 %1829, i64 0
  %1875 = bitcast i8* %1874 to <32 x i8>*
  %1876 = load <32 x i8>, <32 x i8>* %1875, align 32
  %1877 = bitcast <4 x i64> %1873 to <32 x i8>
  %1878 = tail call <32 x i8> @llvm.x86.avx2.pblendvb(<32 x i8> %1765, <32 x i8> %1877, <32 x i8> %1876) #8
  %1879 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %13, i64 0, i64 %1767
  %1880 = bitcast <4 x i64>* %1879 to <32 x i8>*
  store <32 x i8> %1878, <32 x i8>* %1880, align 32
  %1881 = add nsw i32 %1768, %8
  %1882 = add nuw nsw i64 %1767, 1
  %1883 = icmp eq i64 %1882, 16
  br i1 %1883, label %1884, label %1766

1884:                                             ; preds = %1870, %1789, %1792, %1772
  %1885 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %14, i64 0, i64 0
  %1886 = bitcast [16 x <4 x i64>]* %13 to <32 x i8>*
  %1887 = load <32 x i8>, <32 x i8>* %1886, align 32
  %1888 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %13, i64 0, i64 1
  %1889 = bitcast <4 x i64>* %1888 to <32 x i8>*
  %1890 = load <32 x i8>, <32 x i8>* %1889, align 32
  %1891 = shufflevector <32 x i8> %1887, <32 x i8> %1890, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %1892 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %13, i64 0, i64 2
  %1893 = bitcast <4 x i64>* %1892 to <32 x i8>*
  %1894 = load <32 x i8>, <32 x i8>* %1893, align 32
  %1895 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %13, i64 0, i64 3
  %1896 = bitcast <4 x i64>* %1895 to <32 x i8>*
  %1897 = load <32 x i8>, <32 x i8>* %1896, align 32
  %1898 = shufflevector <32 x i8> %1894, <32 x i8> %1897, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %1899 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %13, i64 0, i64 4
  %1900 = bitcast <4 x i64>* %1899 to <32 x i8>*
  %1901 = load <32 x i8>, <32 x i8>* %1900, align 32
  %1902 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %13, i64 0, i64 5
  %1903 = bitcast <4 x i64>* %1902 to <32 x i8>*
  %1904 = load <32 x i8>, <32 x i8>* %1903, align 32
  %1905 = shufflevector <32 x i8> %1901, <32 x i8> %1904, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %1906 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %13, i64 0, i64 6
  %1907 = bitcast <4 x i64>* %1906 to <32 x i8>*
  %1908 = load <32 x i8>, <32 x i8>* %1907, align 32
  %1909 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %13, i64 0, i64 7
  %1910 = bitcast <4 x i64>* %1909 to <32 x i8>*
  %1911 = load <32 x i8>, <32 x i8>* %1910, align 32
  %1912 = shufflevector <32 x i8> %1908, <32 x i8> %1911, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %1913 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %13, i64 0, i64 8
  %1914 = bitcast <4 x i64>* %1913 to <32 x i8>*
  %1915 = load <32 x i8>, <32 x i8>* %1914, align 32
  %1916 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %13, i64 0, i64 9
  %1917 = bitcast <4 x i64>* %1916 to <32 x i8>*
  %1918 = load <32 x i8>, <32 x i8>* %1917, align 32
  %1919 = shufflevector <32 x i8> %1915, <32 x i8> %1918, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %1920 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %13, i64 0, i64 10
  %1921 = bitcast <4 x i64>* %1920 to <32 x i8>*
  %1922 = load <32 x i8>, <32 x i8>* %1921, align 32
  %1923 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %13, i64 0, i64 11
  %1924 = bitcast <4 x i64>* %1923 to <32 x i8>*
  %1925 = load <32 x i8>, <32 x i8>* %1924, align 32
  %1926 = shufflevector <32 x i8> %1922, <32 x i8> %1925, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %1927 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %13, i64 0, i64 12
  %1928 = bitcast <4 x i64>* %1927 to <32 x i8>*
  %1929 = load <32 x i8>, <32 x i8>* %1928, align 32
  %1930 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %13, i64 0, i64 13
  %1931 = bitcast <4 x i64>* %1930 to <32 x i8>*
  %1932 = load <32 x i8>, <32 x i8>* %1931, align 32
  %1933 = shufflevector <32 x i8> %1929, <32 x i8> %1932, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %1934 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %13, i64 0, i64 14
  %1935 = bitcast <4 x i64>* %1934 to <32 x i8>*
  %1936 = load <32 x i8>, <32 x i8>* %1935, align 32
  %1937 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %13, i64 0, i64 15
  %1938 = bitcast <4 x i64>* %1937 to <32 x i8>*
  %1939 = load <32 x i8>, <32 x i8>* %1938, align 32
  %1940 = shufflevector <32 x i8> %1936, <32 x i8> %1939, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %1941 = bitcast <32 x i8> %1891 to <16 x i16>
  %1942 = bitcast <32 x i8> %1898 to <16 x i16>
  %1943 = shufflevector <16 x i16> %1941, <16 x i16> %1942, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %1944 = bitcast <32 x i8> %1905 to <16 x i16>
  %1945 = bitcast <32 x i8> %1912 to <16 x i16>
  %1946 = shufflevector <16 x i16> %1944, <16 x i16> %1945, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %1947 = bitcast <32 x i8> %1919 to <16 x i16>
  %1948 = bitcast <32 x i8> %1926 to <16 x i16>
  %1949 = shufflevector <16 x i16> %1947, <16 x i16> %1948, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %1950 = bitcast <32 x i8> %1933 to <16 x i16>
  %1951 = bitcast <32 x i8> %1940 to <16 x i16>
  %1952 = shufflevector <16 x i16> %1950, <16 x i16> %1951, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %1953 = bitcast <16 x i16> %1943 to <8 x i32>
  %1954 = bitcast <16 x i16> %1946 to <8 x i32>
  %1955 = shufflevector <8 x i32> %1953, <8 x i32> %1954, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %1956 = bitcast <8 x i32> %1955 to <4 x i64>
  %1957 = shufflevector <8 x i32> %1953, <8 x i32> %1954, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %1958 = bitcast <8 x i32> %1957 to <4 x i64>
  %1959 = bitcast <16 x i16> %1949 to <8 x i32>
  %1960 = bitcast <16 x i16> %1952 to <8 x i32>
  %1961 = shufflevector <8 x i32> %1959, <8 x i32> %1960, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %1962 = bitcast <8 x i32> %1961 to <4 x i64>
  %1963 = shufflevector <8 x i32> %1959, <8 x i32> %1960, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %1964 = bitcast <8 x i32> %1963 to <4 x i64>
  %1965 = shufflevector <4 x i64> %1956, <4 x i64> %1962, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  store <4 x i64> %1965, <4 x i64>* %1885, align 32
  %1966 = shufflevector <4 x i64> %1956, <4 x i64> %1962, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %1967 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %14, i64 0, i64 1
  store <4 x i64> %1966, <4 x i64>* %1967, align 32
  %1968 = shufflevector <4 x i64> %1958, <4 x i64> %1964, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %1969 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %14, i64 0, i64 2
  store <4 x i64> %1968, <4 x i64>* %1969, align 32
  %1970 = shufflevector <4 x i64> %1958, <4 x i64> %1964, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %1971 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %14, i64 0, i64 3
  store <4 x i64> %1970, <4 x i64>* %1971, align 32
  %1972 = shufflevector <16 x i16> %1941, <16 x i16> %1942, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %1973 = shufflevector <16 x i16> %1944, <16 x i16> %1945, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %1974 = shufflevector <16 x i16> %1947, <16 x i16> %1948, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %1975 = shufflevector <16 x i16> %1950, <16 x i16> %1951, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %1976 = bitcast <16 x i16> %1972 to <8 x i32>
  %1977 = bitcast <16 x i16> %1973 to <8 x i32>
  %1978 = shufflevector <8 x i32> %1976, <8 x i32> %1977, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %1979 = bitcast <8 x i32> %1978 to <4 x i64>
  %1980 = shufflevector <8 x i32> %1976, <8 x i32> %1977, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %1981 = bitcast <8 x i32> %1980 to <4 x i64>
  %1982 = bitcast <16 x i16> %1974 to <8 x i32>
  %1983 = bitcast <16 x i16> %1975 to <8 x i32>
  %1984 = shufflevector <8 x i32> %1982, <8 x i32> %1983, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %1985 = bitcast <8 x i32> %1984 to <4 x i64>
  %1986 = shufflevector <8 x i32> %1982, <8 x i32> %1983, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %1987 = bitcast <8 x i32> %1986 to <4 x i64>
  %1988 = shufflevector <4 x i64> %1979, <4 x i64> %1985, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %1989 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %14, i64 0, i64 4
  store <4 x i64> %1988, <4 x i64>* %1989, align 32
  %1990 = shufflevector <4 x i64> %1979, <4 x i64> %1985, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %1991 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %14, i64 0, i64 5
  store <4 x i64> %1990, <4 x i64>* %1991, align 32
  %1992 = shufflevector <4 x i64> %1981, <4 x i64> %1987, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %1993 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %14, i64 0, i64 6
  store <4 x i64> %1992, <4 x i64>* %1993, align 32
  %1994 = shufflevector <4 x i64> %1981, <4 x i64> %1987, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %1995 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %14, i64 0, i64 7
  store <4 x i64> %1994, <4 x i64>* %1995, align 32
  %1996 = shufflevector <32 x i8> %1887, <32 x i8> %1890, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %1997 = shufflevector <32 x i8> %1894, <32 x i8> %1897, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %1998 = shufflevector <32 x i8> %1901, <32 x i8> %1904, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %1999 = shufflevector <32 x i8> %1908, <32 x i8> %1911, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %2000 = shufflevector <32 x i8> %1915, <32 x i8> %1918, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %2001 = shufflevector <32 x i8> %1922, <32 x i8> %1925, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %2002 = shufflevector <32 x i8> %1929, <32 x i8> %1932, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %2003 = shufflevector <32 x i8> %1936, <32 x i8> %1939, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %2004 = bitcast <32 x i8> %1996 to <16 x i16>
  %2005 = bitcast <32 x i8> %1997 to <16 x i16>
  %2006 = shufflevector <16 x i16> %2004, <16 x i16> %2005, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %2007 = bitcast <32 x i8> %1998 to <16 x i16>
  %2008 = bitcast <32 x i8> %1999 to <16 x i16>
  %2009 = shufflevector <16 x i16> %2007, <16 x i16> %2008, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %2010 = bitcast <32 x i8> %2000 to <16 x i16>
  %2011 = bitcast <32 x i8> %2001 to <16 x i16>
  %2012 = shufflevector <16 x i16> %2010, <16 x i16> %2011, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %2013 = bitcast <32 x i8> %2002 to <16 x i16>
  %2014 = bitcast <32 x i8> %2003 to <16 x i16>
  %2015 = shufflevector <16 x i16> %2013, <16 x i16> %2014, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %2016 = bitcast <16 x i16> %2006 to <8 x i32>
  %2017 = bitcast <16 x i16> %2009 to <8 x i32>
  %2018 = shufflevector <8 x i32> %2016, <8 x i32> %2017, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %2019 = bitcast <8 x i32> %2018 to <4 x i64>
  %2020 = shufflevector <8 x i32> %2016, <8 x i32> %2017, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %2021 = bitcast <8 x i32> %2020 to <4 x i64>
  %2022 = bitcast <16 x i16> %2012 to <8 x i32>
  %2023 = bitcast <16 x i16> %2015 to <8 x i32>
  %2024 = shufflevector <8 x i32> %2022, <8 x i32> %2023, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %2025 = bitcast <8 x i32> %2024 to <4 x i64>
  %2026 = shufflevector <8 x i32> %2022, <8 x i32> %2023, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %2027 = bitcast <8 x i32> %2026 to <4 x i64>
  %2028 = shufflevector <4 x i64> %2019, <4 x i64> %2025, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %2029 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %14, i64 0, i64 8
  store <4 x i64> %2028, <4 x i64>* %2029, align 32
  %2030 = shufflevector <4 x i64> %2019, <4 x i64> %2025, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %2031 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %14, i64 0, i64 9
  store <4 x i64> %2030, <4 x i64>* %2031, align 32
  %2032 = shufflevector <4 x i64> %2021, <4 x i64> %2027, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %2033 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %14, i64 0, i64 10
  store <4 x i64> %2032, <4 x i64>* %2033, align 32
  %2034 = shufflevector <4 x i64> %2021, <4 x i64> %2027, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %2035 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %14, i64 0, i64 11
  store <4 x i64> %2034, <4 x i64>* %2035, align 32
  %2036 = shufflevector <16 x i16> %2004, <16 x i16> %2005, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %2037 = shufflevector <16 x i16> %2007, <16 x i16> %2008, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %2038 = shufflevector <16 x i16> %2010, <16 x i16> %2011, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %2039 = shufflevector <16 x i16> %2013, <16 x i16> %2014, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %2040 = bitcast <16 x i16> %2036 to <8 x i32>
  %2041 = bitcast <16 x i16> %2037 to <8 x i32>
  %2042 = shufflevector <8 x i32> %2040, <8 x i32> %2041, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %2043 = bitcast <8 x i32> %2042 to <4 x i64>
  %2044 = shufflevector <8 x i32> %2040, <8 x i32> %2041, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %2045 = bitcast <8 x i32> %2044 to <4 x i64>
  %2046 = bitcast <16 x i16> %2038 to <8 x i32>
  %2047 = bitcast <16 x i16> %2039 to <8 x i32>
  %2048 = shufflevector <8 x i32> %2046, <8 x i32> %2047, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %2049 = bitcast <8 x i32> %2048 to <4 x i64>
  %2050 = shufflevector <8 x i32> %2046, <8 x i32> %2047, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %2051 = bitcast <8 x i32> %2050 to <4 x i64>
  %2052 = shufflevector <4 x i64> %2043, <4 x i64> %2049, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %2053 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %14, i64 0, i64 12
  store <4 x i64> %2052, <4 x i64>* %2053, align 32
  %2054 = shufflevector <4 x i64> %2043, <4 x i64> %2049, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %2055 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %14, i64 0, i64 13
  store <4 x i64> %2054, <4 x i64>* %2055, align 32
  %2056 = shufflevector <4 x i64> %2045, <4 x i64> %2051, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %2057 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %14, i64 0, i64 14
  store <4 x i64> %2056, <4 x i64>* %2057, align 32
  %2058 = shufflevector <4 x i64> %2045, <4 x i64> %2051, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %2059 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %14, i64 0, i64 15
  store <4 x i64> %2058, <4 x i64>* %2059, align 32
  br label %2060

2060:                                             ; preds = %2060, %1884
  %2061 = phi i64 [ 0, %1884 ], [ %2085, %2060 ]
  %2062 = mul nsw i64 %2061, %1
  %2063 = getelementptr inbounds i8, i8* %0, i64 %2062
  %2064 = bitcast i8* %2063 to <2 x i64>*
  %2065 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %14, i64 0, i64 %2061
  %2066 = load <4 x i64>, <4 x i64>* %2065, align 32
  %2067 = shufflevector <4 x i64> %2066, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  store <2 x i64> %2067, <2 x i64>* %2064, align 1
  %2068 = add nuw nsw i64 %2061, 16
  %2069 = mul nsw i64 %2068, %1
  %2070 = getelementptr inbounds i8, i8* %0, i64 %2069
  %2071 = bitcast i8* %2070 to <2 x i64>*
  %2072 = shufflevector <4 x i64> %2066, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  store <2 x i64> %2072, <2 x i64>* %2071, align 1
  %2073 = or i64 %2061, 1
  %2074 = mul nsw i64 %2073, %1
  %2075 = getelementptr inbounds i8, i8* %0, i64 %2074
  %2076 = bitcast i8* %2075 to <2 x i64>*
  %2077 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %14, i64 0, i64 %2073
  %2078 = load <4 x i64>, <4 x i64>* %2077, align 32
  %2079 = shufflevector <4 x i64> %2078, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  store <2 x i64> %2079, <2 x i64>* %2076, align 1
  %2080 = add nuw nsw i64 %2061, 17
  %2081 = mul nsw i64 %2080, %1
  %2082 = getelementptr inbounds i8, i8* %0, i64 %2081
  %2083 = bitcast i8* %2082 to <2 x i64>*
  %2084 = shufflevector <4 x i64> %2078, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  store <2 x i64> %2084, <2 x i64>* %2083, align 1
  %2085 = add nuw nsw i64 %2061, 2
  %2086 = icmp eq i64 %2085, 16
  br i1 %2086, label %2087, label %2060

2087:                                             ; preds = %2060
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %1761) #8
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %1760) #8
  br label %4740

2088:                                             ; preds = %1356
  %2089 = getelementptr inbounds [2048 x i8], [2048 x i8]* %18, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 2048, i8* nonnull %2089) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %2089, i8 -86, i64 2048, i1 false) #8
  %2090 = getelementptr inbounds i8, i8* %5, i64 95
  %2091 = load i8, i8* %2090, align 1
  %2092 = insertelement <32 x i8> undef, i8 %2091, i32 0
  %2093 = shufflevector <32 x i8> %2092, <32 x i8> undef, <32 x i32> zeroinitializer
  %2094 = bitcast <32 x i8> %2093 to <4 x i64>
  %2095 = shufflevector <4 x i64> %2094, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %2096 = bitcast <2 x i64> %2095 to <16 x i8>
  br label %2097

2097:                                             ; preds = %2241, %2088
  %2098 = phi i8* [ %2089, %2088 ], [ %2244, %2241 ]
  %2099 = phi i32 [ 0, %2088 ], [ %2243, %2241 ]
  %2100 = phi i32 [ %8, %2088 ], [ %2242, %2241 ]
  %2101 = icmp slt i32 %2100, 6080
  br i1 %2101, label %2161, label %2102

2102:                                             ; preds = %2097
  %2103 = icmp ult i32 %2099, 32
  br i1 %2103, label %2104, label %2246

2104:                                             ; preds = %2102
  %2105 = sub nsw i32 0, %2099
  %2106 = sub nsw i32 31, %2099
  %2107 = and i32 %2105, 7
  %2108 = icmp eq i32 %2107, 0
  br i1 %2108, label %2120, label %2109

2109:                                             ; preds = %2104, %2109
  %2110 = phi i8* [ %2116, %2109 ], [ %2098, %2104 ]
  %2111 = phi i32 [ %2117, %2109 ], [ %2099, %2104 ]
  %2112 = phi i32 [ %2118, %2109 ], [ %2107, %2104 ]
  %2113 = bitcast i8* %2110 to <32 x i8>*
  store <32 x i8> %2093, <32 x i8>* %2113, align 1
  %2114 = getelementptr inbounds i8, i8* %2110, i64 32
  %2115 = bitcast i8* %2114 to <32 x i8>*
  store <32 x i8> %2093, <32 x i8>* %2115, align 1
  %2116 = getelementptr inbounds i8, i8* %2110, i64 64
  %2117 = add nuw nsw i32 %2111, 1
  %2118 = add i32 %2112, -1
  %2119 = icmp eq i32 %2118, 0
  br i1 %2119, label %2120, label %2109, !llvm.loop !48

2120:                                             ; preds = %2109, %2104
  %2121 = phi i8* [ %2098, %2104 ], [ %2116, %2109 ]
  %2122 = phi i32 [ %2099, %2104 ], [ %2117, %2109 ]
  %2123 = icmp ult i32 %2106, 7
  br i1 %2123, label %2246, label %2124

2124:                                             ; preds = %2120, %2124
  %2125 = phi i8* [ %2158, %2124 ], [ %2121, %2120 ]
  %2126 = phi i32 [ %2159, %2124 ], [ %2122, %2120 ]
  %2127 = bitcast i8* %2125 to <32 x i8>*
  store <32 x i8> %2093, <32 x i8>* %2127, align 1
  %2128 = getelementptr inbounds i8, i8* %2125, i64 32
  %2129 = bitcast i8* %2128 to <32 x i8>*
  store <32 x i8> %2093, <32 x i8>* %2129, align 1
  %2130 = getelementptr inbounds i8, i8* %2125, i64 64
  %2131 = bitcast i8* %2130 to <32 x i8>*
  store <32 x i8> %2093, <32 x i8>* %2131, align 1
  %2132 = getelementptr inbounds i8, i8* %2125, i64 96
  %2133 = bitcast i8* %2132 to <32 x i8>*
  store <32 x i8> %2093, <32 x i8>* %2133, align 1
  %2134 = getelementptr inbounds i8, i8* %2125, i64 128
  %2135 = bitcast i8* %2134 to <32 x i8>*
  store <32 x i8> %2093, <32 x i8>* %2135, align 1
  %2136 = getelementptr inbounds i8, i8* %2125, i64 160
  %2137 = bitcast i8* %2136 to <32 x i8>*
  store <32 x i8> %2093, <32 x i8>* %2137, align 1
  %2138 = getelementptr inbounds i8, i8* %2125, i64 192
  %2139 = bitcast i8* %2138 to <32 x i8>*
  store <32 x i8> %2093, <32 x i8>* %2139, align 1
  %2140 = getelementptr inbounds i8, i8* %2125, i64 224
  %2141 = bitcast i8* %2140 to <32 x i8>*
  store <32 x i8> %2093, <32 x i8>* %2141, align 1
  %2142 = getelementptr inbounds i8, i8* %2125, i64 256
  %2143 = bitcast i8* %2142 to <32 x i8>*
  store <32 x i8> %2093, <32 x i8>* %2143, align 1
  %2144 = getelementptr inbounds i8, i8* %2125, i64 288
  %2145 = bitcast i8* %2144 to <32 x i8>*
  store <32 x i8> %2093, <32 x i8>* %2145, align 1
  %2146 = getelementptr inbounds i8, i8* %2125, i64 320
  %2147 = bitcast i8* %2146 to <32 x i8>*
  store <32 x i8> %2093, <32 x i8>* %2147, align 1
  %2148 = getelementptr inbounds i8, i8* %2125, i64 352
  %2149 = bitcast i8* %2148 to <32 x i8>*
  store <32 x i8> %2093, <32 x i8>* %2149, align 1
  %2150 = getelementptr inbounds i8, i8* %2125, i64 384
  %2151 = bitcast i8* %2150 to <32 x i8>*
  store <32 x i8> %2093, <32 x i8>* %2151, align 1
  %2152 = getelementptr inbounds i8, i8* %2125, i64 416
  %2153 = bitcast i8* %2152 to <32 x i8>*
  store <32 x i8> %2093, <32 x i8>* %2153, align 1
  %2154 = getelementptr inbounds i8, i8* %2125, i64 448
  %2155 = bitcast i8* %2154 to <32 x i8>*
  store <32 x i8> %2093, <32 x i8>* %2155, align 1
  %2156 = getelementptr inbounds i8, i8* %2125, i64 480
  %2157 = bitcast i8* %2156 to <32 x i8>*
  store <32 x i8> %2093, <32 x i8>* %2157, align 1
  %2158 = getelementptr inbounds i8, i8* %2125, i64 512
  %2159 = add nuw nsw i32 %2126, 8
  %2160 = icmp eq i32 %2159, 32
  br i1 %2160, label %2246, label %2124

2161:                                             ; preds = %2097
  %2162 = ashr i32 %2100, 6
  %2163 = trunc i32 %2100 to i16
  %2164 = insertelement <16 x i16> undef, i16 %2163, i32 0
  %2165 = and <16 x i16> %2164, <i16 63, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef>
  %2166 = lshr <16 x i16> %2165, <i16 1, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0>
  %2167 = shufflevector <16 x i16> %2166, <16 x i16> undef, <16 x i32> zeroinitializer
  %2168 = sext i32 %2162 to i64
  %2169 = getelementptr inbounds i8, i8* %5, i64 %2168
  %2170 = getelementptr inbounds i8, i8* %2169, i64 1
  br label %2171

2171:                                             ; preds = %2238, %2161
  %2172 = phi i64 [ 0, %2161 ], [ %2239, %2238 ]
  %2173 = add nsw i64 %2172, %2168
  %2174 = icmp slt i64 %2173, 95
  br i1 %2174, label %2178, label %2175

2175:                                             ; preds = %2171
  %2176 = getelementptr inbounds i8, i8* %2098, i64 %2172
  %2177 = bitcast i8* %2176 to <2 x i64>*
  store <2 x i64> %2095, <2 x i64>* %2177, align 1
  br label %2238

2178:                                             ; preds = %2171
  %2179 = getelementptr inbounds i8, i8* %2169, i64 %2172
  %2180 = bitcast i8* %2179 to <16 x i8>*
  %2181 = load <16 x i8>, <16 x i8>* %2180, align 1
  %2182 = getelementptr inbounds i8, i8* %2170, i64 %2172
  %2183 = bitcast i8* %2182 to <16 x i8>*
  %2184 = load <16 x i8>, <16 x i8>* %2183, align 1
  %2185 = zext <16 x i8> %2181 to <16 x i16>
  %2186 = zext <16 x i8> %2184 to <16 x i16>
  %2187 = sub nsw <16 x i16> %2186, %2185
  %2188 = shl nuw nsw <16 x i16> %2185, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %2189 = or <16 x i16> %2188, <i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16>
  %2190 = mul <16 x i16> %2187, %2167
  %2191 = add <16 x i16> %2190, %2189
  %2192 = lshr <16 x i16> %2191, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %2193 = bitcast <16 x i16> %2192 to <4 x i64>
  %2194 = shufflevector <4 x i64> %2193, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %2195 = shufflevector <2 x i64> %2194, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %2196 = bitcast <4 x i64> %2195 to <16 x i16>
  %2197 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %2192, <16 x i16> %2196) #8
  %2198 = bitcast <32 x i8> %2197 to <4 x i64>
  %2199 = trunc i64 %2173 to i8
  %2200 = add i8 %2199, 1
  %2201 = add i8 %2199, 2
  %2202 = add i8 %2199, 3
  %2203 = add i8 %2199, 4
  %2204 = add i8 %2199, 5
  %2205 = add i8 %2199, 6
  %2206 = add i8 %2199, 7
  %2207 = add i8 %2199, 8
  %2208 = add i8 %2199, 9
  %2209 = add i8 %2199, 10
  %2210 = add i8 %2199, 11
  %2211 = add i8 %2199, 12
  %2212 = add i8 %2199, 13
  %2213 = add i8 %2199, 14
  %2214 = add i8 %2199, 15
  %2215 = insertelement <16 x i8> undef, i8 %2199, i32 0
  %2216 = insertelement <16 x i8> %2215, i8 %2200, i32 1
  %2217 = insertelement <16 x i8> %2216, i8 %2201, i32 2
  %2218 = insertelement <16 x i8> %2217, i8 %2202, i32 3
  %2219 = insertelement <16 x i8> %2218, i8 %2203, i32 4
  %2220 = insertelement <16 x i8> %2219, i8 %2204, i32 5
  %2221 = insertelement <16 x i8> %2220, i8 %2205, i32 6
  %2222 = insertelement <16 x i8> %2221, i8 %2206, i32 7
  %2223 = insertelement <16 x i8> %2222, i8 %2207, i32 8
  %2224 = insertelement <16 x i8> %2223, i8 %2208, i32 9
  %2225 = insertelement <16 x i8> %2224, i8 %2209, i32 10
  %2226 = insertelement <16 x i8> %2225, i8 %2210, i32 11
  %2227 = insertelement <16 x i8> %2226, i8 %2211, i32 12
  %2228 = insertelement <16 x i8> %2227, i8 %2212, i32 13
  %2229 = insertelement <16 x i8> %2228, i8 %2213, i32 14
  %2230 = insertelement <16 x i8> %2229, i8 %2214, i32 15
  %2231 = tail call <16 x i8> @llvm.usub.sat.v16i8(<16 x i8> <i8 95, i8 95, i8 95, i8 95, i8 95, i8 95, i8 95, i8 95, i8 95, i8 95, i8 95, i8 95, i8 95, i8 95, i8 95, i8 95>, <16 x i8> %2230) #8
  %2232 = icmp eq <16 x i8> %2231, zeroinitializer
  %2233 = shufflevector <4 x i64> %2198, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %2234 = bitcast <2 x i64> %2233 to <16 x i8>
  %2235 = select <16 x i1> %2232, <16 x i8> %2096, <16 x i8> %2234
  %2236 = getelementptr inbounds i8, i8* %2098, i64 %2172
  %2237 = bitcast i8* %2236 to <16 x i8>*
  store <16 x i8> %2235, <16 x i8>* %2237, align 1
  br label %2238

2238:                                             ; preds = %2178, %2175
  %2239 = add nuw nsw i64 %2172, 16
  %2240 = icmp ult i64 %2239, 64
  br i1 %2240, label %2171, label %2241

2241:                                             ; preds = %2238
  %2242 = add nsw i32 %2100, %8
  %2243 = add nuw nsw i32 %2099, 1
  %2244 = getelementptr inbounds i8, i8* %2098, i64 64
  %2245 = icmp eq i32 %2243, 32
  br i1 %2245, label %2246, label %2097

2246:                                             ; preds = %2241, %2120, %2124, %2102
  call fastcc void @transpose(i8* nonnull %2089, i64 64, i8* %0, i64 %1, i32 32, i32 64) #8
  call void @llvm.lifetime.end.p0i8(i64 2048, i8* nonnull %2089) #8
  br label %4740

2247:                                             ; preds = %1353
  switch i32 %2, label %4740 [
    i32 4, label %2248
    i32 8, label %2469
    i32 16, label %2787
  ]

2248:                                             ; preds = %2247
  %2249 = bitcast [4 x <2 x i64>]* %22 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %2249) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %2249, i8 -86, i64 64, i1 false) #8
  %2250 = bitcast [16 x <2 x i64>]* %20 to i8*
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %2250) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %2250, i8 -86, i64 256, i1 false) #8
  %2251 = sub nsw i32 6, %6
  %2252 = shl i32 19, %6
  %2253 = sext i32 %2252 to i64
  %2254 = getelementptr inbounds i8, i8* %5, i64 %2253
  %2255 = load i8, i8* %2254, align 1
  %2256 = insertelement <16 x i8> undef, i8 %2255, i32 0
  %2257 = shufflevector <16 x i8> %2256, <16 x i8> undef, <16 x i32> zeroinitializer
  %2258 = icmp eq i32 %6, 0
  br label %2259

2259:                                             ; preds = %2304, %2248
  %2260 = phi i64 [ 0, %2248 ], [ %2334, %2304 ]
  %2261 = phi i32 [ %8, %2248 ], [ %2333, %2304 ]
  %2262 = ashr i32 %2261, %2251
  %2263 = sub nsw i32 %2252, %2262
  %2264 = ashr i32 %2263, %6
  %2265 = icmp slt i32 %2264, 1
  br i1 %2265, label %2266, label %2275

2266:                                             ; preds = %2259
  %2267 = trunc i64 %2260 to i32
  %2268 = icmp slt i32 %2267, 4
  br i1 %2268, label %2269, label %2336

2269:                                             ; preds = %2266
  %2270 = and i64 %2260, 4294967295
  %2271 = getelementptr inbounds [4 x <2 x i64>], [4 x <2 x i64>]* %22, i64 0, i64 %2270
  %2272 = bitcast <2 x i64>* %2271 to <16 x i8>*
  store <16 x i8> %2257, <16 x i8>* %2272, align 16
  %2273 = add nuw nsw i64 %2270, 1
  %2274 = icmp eq i64 %2273, 4
  br i1 %2274, label %2336, label %4833

2275:                                             ; preds = %2259
  %2276 = icmp slt i32 %2264, 16
  %2277 = select i1 %2276, i32 %2264, i32 16
  %2278 = sext i32 %2262 to i64
  %2279 = getelementptr inbounds i8, i8* %5, i64 %2278
  %2280 = bitcast i8* %2279 to <2 x i64>*
  %2281 = load <2 x i64>, <2 x i64>* %2280, align 1
  br i1 %2258, label %2294, label %2282

2282:                                             ; preds = %2275
  %2283 = bitcast <2 x i64> %2281 to <16 x i8>
  %2284 = shufflevector <16 x i8> %2283, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %2285 = bitcast <16 x i8> %2284 to <2 x i64>
  %2286 = shufflevector <16 x i8> %2284, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %2287 = trunc i32 %2261 to i16
  %2288 = insertelement <16 x i16> undef, i16 %2287, i32 0
  %2289 = shufflevector <16 x i16> %2288, <16 x i16> undef, <16 x i32> zeroinitializer
  %2290 = tail call <16 x i16> @llvm.x86.avx2.pslli.w(<16 x i16> %2289, i32 %6) #8
  %2291 = lshr <16 x i16> %2290, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2292 = bitcast <16 x i16> %2291 to <4 x i64>
  %2293 = and <4 x i64> %2292, <i64 8725857424048159, i64 8725857424048159, i64 8725857424048159, i64 8725857424048159>
  br label %2304

2294:                                             ; preds = %2275
  %2295 = getelementptr inbounds i8, i8* %2279, i64 1
  %2296 = bitcast i8* %2295 to <16 x i8>*
  %2297 = load <16 x i8>, <16 x i8>* %2296, align 1
  %2298 = trunc i32 %2261 to i16
  %2299 = insertelement <16 x i16> undef, i16 %2298, i32 0
  %2300 = and <16 x i16> %2299, <i16 63, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef>
  %2301 = lshr <16 x i16> %2300, <i16 1, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0>
  %2302 = shufflevector <16 x i16> %2301, <16 x i16> undef, <16 x i32> zeroinitializer
  %2303 = bitcast <16 x i16> %2302 to <4 x i64>
  br label %2304

2304:                                             ; preds = %2294, %2282
  %2305 = phi <4 x i64> [ %2293, %2282 ], [ %2303, %2294 ]
  %2306 = phi <2 x i64> [ %2285, %2282 ], [ %2281, %2294 ]
  %2307 = phi <16 x i8> [ %2286, %2282 ], [ %2297, %2294 ]
  %2308 = bitcast <2 x i64> %2306 to <16 x i8>
  %2309 = zext <16 x i8> %2308 to <16 x i16>
  %2310 = zext <16 x i8> %2307 to <16 x i16>
  %2311 = sub nsw <16 x i16> %2310, %2309
  %2312 = shl nuw nsw <16 x i16> %2309, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %2313 = or <16 x i16> %2312, <i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16>
  %2314 = bitcast <4 x i64> %2305 to <16 x i16>
  %2315 = mul <16 x i16> %2311, %2314
  %2316 = add <16 x i16> %2315, %2313
  %2317 = lshr <16 x i16> %2316, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %2318 = bitcast <16 x i16> %2317 to <4 x i64>
  %2319 = shufflevector <4 x i64> %2318, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %2320 = shufflevector <2 x i64> %2319, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %2321 = bitcast <4 x i64> %2320 to <16 x i16>
  %2322 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %2317, <16 x i16> %2321) #8
  %2323 = bitcast <32 x i8> %2322 to <4 x i64>
  %2324 = shufflevector <4 x i64> %2323, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %2325 = sext i32 %2277 to i64
  %2326 = getelementptr inbounds [33 x [32 x i8]], [33 x [32 x i8]]* bitcast (<{ [32 x i8], <{ i8, [31 x i8] }>, <{ i8, i8, [30 x i8] }>, <{ i8, i8, i8, [29 x i8] }>, <{ i8, i8, i8, i8, [28 x i8] }>, <{ i8, i8, i8, i8, i8, [27 x i8] }>, <{ i8, i8, i8, i8, i8, i8, [26 x i8] }>, <{ i8, i8, i8, i8, i8, i8, i8, [25 x i8] }>, <{ [8 x i8], [24 x i8] }>, <{ [9 x i8], [23 x i8] }>, <{ [10 x i8], [22 x i8] }>, <{ [11 x i8], [21 x i8] }>, <{ [12 x i8], [20 x i8] }>, <{ [13 x i8], [19 x i8] }>, <{ [14 x i8], [18 x i8] }>, <{ [15 x i8], [17 x i8] }>, <{ [16 x i8], [16 x i8] }>, <{ [17 x i8], [15 x i8] }>, <{ [18 x i8], [14 x i8] }>, <{ [19 x i8], [13 x i8] }>, <{ [20 x i8], [12 x i8] }>, <{ [21 x i8], [11 x i8] }>, <{ [22 x i8], [10 x i8] }>, <{ [23 x i8], [9 x i8] }>, <{ [24 x i8], [8 x i8] }>, [32 x i8], [32 x i8], [32 x i8], [32 x i8], [32 x i8], [32 x i8], [32 x i8], [32 x i8] }>* @BaseMask to [33 x [32 x i8]]*), i64 0, i64 %2325, i64 0
  %2327 = bitcast i8* %2326 to <16 x i8>*
  %2328 = load <16 x i8>, <16 x i8>* %2327, align 32
  %2329 = bitcast <2 x i64> %2324 to <16 x i8>
  %2330 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %2257, <16 x i8> %2329, <16 x i8> %2328) #8
  %2331 = getelementptr inbounds [4 x <2 x i64>], [4 x <2 x i64>]* %22, i64 0, i64 %2260
  %2332 = bitcast <2 x i64>* %2331 to <16 x i8>*
  store <16 x i8> %2330, <16 x i8>* %2332, align 16
  %2333 = add nsw i32 %2261, %8
  %2334 = add nuw nsw i64 %2260, 1
  %2335 = icmp eq i64 %2334, 4
  br i1 %2335, label %2336, label %2259

2336:                                             ; preds = %2304, %2269, %4833, %4838, %4843, %2266
  %2337 = bitcast [4 x <2 x i64>]* %22 to <16 x i8>*
  %2338 = load <16 x i8>, <16 x i8>* %2337, align 16
  %2339 = getelementptr inbounds [4 x <2 x i64>], [4 x <2 x i64>]* %22, i64 0, i64 1
  %2340 = bitcast <2 x i64>* %2339 to <16 x i8>*
  %2341 = load <16 x i8>, <16 x i8>* %2340, align 16
  %2342 = shufflevector <16 x i8> %2338, <16 x i8> %2341, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %2343 = getelementptr inbounds [4 x <2 x i64>], [4 x <2 x i64>]* %22, i64 0, i64 2
  %2344 = bitcast <2 x i64>* %2343 to <16 x i8>*
  %2345 = load <16 x i8>, <16 x i8>* %2344, align 16
  %2346 = getelementptr inbounds [4 x <2 x i64>], [4 x <2 x i64>]* %22, i64 0, i64 3
  %2347 = bitcast <2 x i64>* %2346 to <16 x i8>*
  %2348 = load <16 x i8>, <16 x i8>* %2347, align 16
  %2349 = shufflevector <16 x i8> %2345, <16 x i8> %2348, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %2350 = shufflevector <16 x i8> %2338, <16 x i8> %2341, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %2351 = shufflevector <16 x i8> %2345, <16 x i8> %2348, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %2352 = bitcast <16 x i8> %2342 to <8 x i16>
  %2353 = bitcast <16 x i8> %2349 to <8 x i16>
  %2354 = shufflevector <8 x i16> %2352, <8 x i16> %2353, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %2355 = bitcast <16 x i8> %2350 to <8 x i16>
  %2356 = bitcast <16 x i8> %2351 to <8 x i16>
  %2357 = shufflevector <8 x i16> %2355, <8 x i16> %2356, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %2358 = shufflevector <8 x i16> %2352, <8 x i16> %2353, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %2359 = shufflevector <8 x i16> %2355, <8 x i16> %2356, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %2360 = bitcast <8 x i16> %2354 to <4 x i32>
  %2361 = bitcast <8 x i16> %2357 to <4 x i32>
  %2362 = shufflevector <4 x i32> %2360, <4 x i32> %2361, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %2363 = bitcast <4 x i32> %2362 to <2 x i64>
  %2364 = bitcast <8 x i16> %2358 to <4 x i32>
  %2365 = bitcast <8 x i16> %2359 to <4 x i32>
  %2366 = shufflevector <4 x i32> %2364, <4 x i32> %2365, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %2367 = bitcast <4 x i32> %2366 to <2 x i64>
  %2368 = shufflevector <4 x i32> %2360, <4 x i32> %2361, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %2369 = bitcast <4 x i32> %2368 to <2 x i64>
  %2370 = shufflevector <4 x i32> %2364, <4 x i32> %2365, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %2371 = bitcast <4 x i32> %2370 to <2 x i64>
  %2372 = shufflevector <2 x i64> %2363, <2 x i64> %2367, <2 x i32> <i32 0, i32 2>
  %2373 = shufflevector <2 x i64> %2363, <2 x i64> %2367, <2 x i32> <i32 1, i32 3>
  %2374 = shufflevector <2 x i64> %2369, <2 x i64> %2371, <2 x i32> <i32 0, i32 2>
  %2375 = shufflevector <2 x i64> %2369, <2 x i64> %2371, <2 x i32> <i32 1, i32 3>
  %2376 = bitcast <2 x i64> %2372 to <16 x i8>
  %2377 = shufflevector <16 x i8> %2376, <16 x i8> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2378 = bitcast <2 x i64> %2373 to <16 x i8>
  %2379 = shufflevector <16 x i8> %2378, <16 x i8> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2380 = bitcast <2 x i64> %2374 to <16 x i8>
  %2381 = shufflevector <16 x i8> %2380, <16 x i8> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2382 = bitcast <2 x i64> %2375 to <16 x i8>
  %2383 = shufflevector <16 x i8> %2382, <16 x i8> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2384 = shufflevector <16 x i8> %2376, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2385 = shufflevector <16 x i8> %2378, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2386 = shufflevector <16 x i8> %2380, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2387 = shufflevector <16 x i8> %2382, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2388 = shufflevector <16 x i8> %2376, <16 x i8> undef, <16 x i32> <i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2389 = shufflevector <16 x i8> %2378, <16 x i8> undef, <16 x i32> <i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2390 = shufflevector <16 x i8> %2380, <16 x i8> undef, <16 x i32> <i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2391 = shufflevector <16 x i8> %2382, <16 x i8> undef, <16 x i32> <i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2392 = bitcast <2 x i64> %2372 to <4 x i32>
  %2393 = extractelement <4 x i32> %2392, i32 0
  %2394 = bitcast i8* %0 to i32*
  store i32 %2393, i32* %2394, align 4
  %2395 = bitcast <2 x i64> %2373 to <4 x i32>
  %2396 = extractelement <4 x i32> %2395, i32 0
  %2397 = getelementptr inbounds i8, i8* %0, i64 %1
  %2398 = bitcast i8* %2397 to i32*
  store i32 %2396, i32* %2398, align 4
  %2399 = bitcast <2 x i64> %2374 to <4 x i32>
  %2400 = extractelement <4 x i32> %2399, i32 0
  %2401 = shl nsw i64 %1, 1
  %2402 = getelementptr inbounds i8, i8* %0, i64 %2401
  %2403 = bitcast i8* %2402 to i32*
  store i32 %2400, i32* %2403, align 4
  %2404 = bitcast <2 x i64> %2375 to <4 x i32>
  %2405 = extractelement <4 x i32> %2404, i32 0
  %2406 = mul nsw i64 %1, 3
  %2407 = getelementptr inbounds i8, i8* %0, i64 %2406
  %2408 = bitcast i8* %2407 to i32*
  store i32 %2405, i32* %2408, align 4
  %2409 = bitcast <16 x i8> %2377 to <4 x i32>
  %2410 = extractelement <4 x i32> %2409, i32 0
  %2411 = shl nsw i64 %1, 2
  %2412 = getelementptr inbounds i8, i8* %0, i64 %2411
  %2413 = bitcast i8* %2412 to i32*
  store i32 %2410, i32* %2413, align 4
  %2414 = bitcast <16 x i8> %2379 to <4 x i32>
  %2415 = extractelement <4 x i32> %2414, i32 0
  %2416 = mul nsw i64 %1, 5
  %2417 = getelementptr inbounds i8, i8* %0, i64 %2416
  %2418 = bitcast i8* %2417 to i32*
  store i32 %2415, i32* %2418, align 4
  %2419 = bitcast <16 x i8> %2381 to <4 x i32>
  %2420 = extractelement <4 x i32> %2419, i32 0
  %2421 = mul nsw i64 %1, 6
  %2422 = getelementptr inbounds i8, i8* %0, i64 %2421
  %2423 = bitcast i8* %2422 to i32*
  store i32 %2420, i32* %2423, align 4
  %2424 = bitcast <16 x i8> %2383 to <4 x i32>
  %2425 = extractelement <4 x i32> %2424, i32 0
  %2426 = mul nsw i64 %1, 7
  %2427 = getelementptr inbounds i8, i8* %0, i64 %2426
  %2428 = bitcast i8* %2427 to i32*
  store i32 %2425, i32* %2428, align 4
  %2429 = bitcast <16 x i8> %2384 to <4 x i32>
  %2430 = extractelement <4 x i32> %2429, i32 0
  %2431 = shl nsw i64 %1, 3
  %2432 = getelementptr inbounds i8, i8* %0, i64 %2431
  %2433 = bitcast i8* %2432 to i32*
  store i32 %2430, i32* %2433, align 4
  %2434 = bitcast <16 x i8> %2385 to <4 x i32>
  %2435 = extractelement <4 x i32> %2434, i32 0
  %2436 = mul nsw i64 %1, 9
  %2437 = getelementptr inbounds i8, i8* %0, i64 %2436
  %2438 = bitcast i8* %2437 to i32*
  store i32 %2435, i32* %2438, align 4
  %2439 = bitcast <16 x i8> %2386 to <4 x i32>
  %2440 = extractelement <4 x i32> %2439, i32 0
  %2441 = mul nsw i64 %1, 10
  %2442 = getelementptr inbounds i8, i8* %0, i64 %2441
  %2443 = bitcast i8* %2442 to i32*
  store i32 %2440, i32* %2443, align 4
  %2444 = bitcast <16 x i8> %2387 to <4 x i32>
  %2445 = extractelement <4 x i32> %2444, i32 0
  %2446 = mul nsw i64 %1, 11
  %2447 = getelementptr inbounds i8, i8* %0, i64 %2446
  %2448 = bitcast i8* %2447 to i32*
  store i32 %2445, i32* %2448, align 4
  %2449 = bitcast <16 x i8> %2388 to <4 x i32>
  %2450 = extractelement <4 x i32> %2449, i32 0
  %2451 = mul nsw i64 %1, 12
  %2452 = getelementptr inbounds i8, i8* %0, i64 %2451
  %2453 = bitcast i8* %2452 to i32*
  store i32 %2450, i32* %2453, align 4
  %2454 = bitcast <16 x i8> %2389 to <4 x i32>
  %2455 = extractelement <4 x i32> %2454, i32 0
  %2456 = mul nsw i64 %1, 13
  %2457 = getelementptr inbounds i8, i8* %0, i64 %2456
  %2458 = bitcast i8* %2457 to i32*
  store i32 %2455, i32* %2458, align 4
  %2459 = bitcast <16 x i8> %2390 to <4 x i32>
  %2460 = extractelement <4 x i32> %2459, i32 0
  %2461 = mul nsw i64 %1, 14
  %2462 = getelementptr inbounds i8, i8* %0, i64 %2461
  %2463 = bitcast i8* %2462 to i32*
  store i32 %2460, i32* %2463, align 4
  %2464 = bitcast <16 x i8> %2391 to <4 x i32>
  %2465 = extractelement <4 x i32> %2464, i32 0
  %2466 = mul nsw i64 %1, 15
  %2467 = getelementptr inbounds i8, i8* %0, i64 %2466
  %2468 = bitcast i8* %2467 to i32*
  store i32 %2465, i32* %2468, align 4
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %2250) #8
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %2249) #8
  br label %4740

2469:                                             ; preds = %2247
  %2470 = bitcast [16 x <4 x i64>]* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %2470) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %2470, i8 -86, i64 512, i1 false) #8
  %2471 = bitcast [16 x <4 x i64>]* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %2471) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %2471, i8 -86, i64 512, i1 false) #8
  %2472 = getelementptr inbounds i8, i8* %5, i64 39
  %2473 = load i8, i8* %2472, align 1
  %2474 = insertelement <32 x i8> undef, i8 %2473, i32 0
  %2475 = shufflevector <32 x i8> %2474, <32 x i8> undef, <32 x i32> zeroinitializer
  br label %2476

2476:                                             ; preds = %2542, %2469
  %2477 = phi i64 [ 0, %2469 ], [ %2554, %2542 ]
  %2478 = phi i32 [ %8, %2469 ], [ %2553, %2542 ]
  %2479 = ashr i32 %2478, 6
  %2480 = sub nsw i32 39, %2479
  %2481 = icmp sgt i32 %2478, 2495
  br i1 %2481, label %2482, label %2491

2482:                                             ; preds = %2476
  %2483 = trunc i64 %2477 to i32
  %2484 = icmp slt i32 %2483, 8
  br i1 %2484, label %2485, label %2556

2485:                                             ; preds = %2482
  %2486 = and i64 %2477, 4294967295
  %2487 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %13, i64 0, i64 %2486
  %2488 = bitcast <4 x i64>* %2487 to <32 x i8>*
  store <32 x i8> %2475, <32 x i8>* %2488, align 32
  %2489 = add nuw nsw i64 %2486, 1
  %2490 = icmp eq i64 %2489, 8
  br i1 %2490, label %2556, label %4846

2491:                                             ; preds = %2476
  %2492 = icmp slt i32 %2480, 32
  %2493 = select i1 %2492, i32 %2480, i32 32
  %2494 = trunc i32 %2478 to i16
  %2495 = insertelement <16 x i16> undef, i16 %2494, i32 0
  %2496 = and <16 x i16> %2495, <i16 63, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef>
  %2497 = lshr <16 x i16> %2496, <i16 1, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0>
  %2498 = shufflevector <16 x i16> %2497, <16 x i16> undef, <16 x i32> zeroinitializer
  %2499 = sext i32 %2479 to i64
  %2500 = getelementptr inbounds i8, i8* %5, i64 %2499
  %2501 = sext i32 %2493 to i64
  %2502 = bitcast i8* %2500 to <16 x i8>*
  %2503 = load <16 x i8>, <16 x i8>* %2502, align 1
  %2504 = getelementptr inbounds i8, i8* %2500, i64 1
  %2505 = bitcast i8* %2504 to <16 x i8>*
  %2506 = load <16 x i8>, <16 x i8>* %2505, align 1
  %2507 = zext <16 x i8> %2503 to <16 x i16>
  %2508 = zext <16 x i8> %2506 to <16 x i16>
  %2509 = sub nsw <16 x i16> %2508, %2507
  %2510 = shl nuw nsw <16 x i16> %2507, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %2511 = or <16 x i16> %2510, <i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16>
  %2512 = mul <16 x i16> %2509, %2498
  %2513 = add <16 x i16> %2512, %2511
  %2514 = lshr <16 x i16> %2513, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %2515 = bitcast <16 x i16> %2514 to <4 x i64>
  %2516 = shufflevector <4 x i64> %2515, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %2517 = shufflevector <2 x i64> %2516, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %2518 = bitcast <4 x i64> %2517 to <16 x i16>
  %2519 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %2514, <16 x i16> %2518) #8
  %2520 = bitcast <32 x i8> %2519 to <4 x i64>
  %2521 = icmp sgt i32 %2493, 16
  br i1 %2521, label %2522, label %2542

2522:                                             ; preds = %2491
  %2523 = getelementptr inbounds i8, i8* %2500, i64 16
  %2524 = bitcast i8* %2523 to <16 x i8>*
  %2525 = load <16 x i8>, <16 x i8>* %2524, align 1
  %2526 = getelementptr inbounds i8, i8* %2523, i64 1
  %2527 = bitcast i8* %2526 to <16 x i8>*
  %2528 = load <16 x i8>, <16 x i8>* %2527, align 1
  %2529 = zext <16 x i8> %2525 to <16 x i16>
  %2530 = zext <16 x i8> %2528 to <16 x i16>
  %2531 = sub nsw <16 x i16> %2530, %2529
  %2532 = shl nuw nsw <16 x i16> %2529, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %2533 = or <16 x i16> %2532, <i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16>
  %2534 = mul <16 x i16> %2531, %2498
  %2535 = add <16 x i16> %2534, %2533
  %2536 = lshr <16 x i16> %2535, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %2537 = bitcast <16 x i16> %2536 to <4 x i64>
  %2538 = shufflevector <4 x i64> %2537, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %2539 = shufflevector <2 x i64> %2538, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %2540 = bitcast <4 x i64> %2539 to <16 x i16>
  %2541 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %2536, <16 x i16> %2540) #8
  br label %2542

2542:                                             ; preds = %2522, %2491
  %2543 = phi <32 x i8> [ %2541, %2522 ], [ %2475, %2491 ]
  %2544 = bitcast <32 x i8> %2543 to <4 x i64>
  %2545 = shufflevector <4 x i64> %2520, <4 x i64> %2544, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %2546 = getelementptr inbounds [33 x [32 x i8]], [33 x [32 x i8]]* bitcast (<{ [32 x i8], <{ i8, [31 x i8] }>, <{ i8, i8, [30 x i8] }>, <{ i8, i8, i8, [29 x i8] }>, <{ i8, i8, i8, i8, [28 x i8] }>, <{ i8, i8, i8, i8, i8, [27 x i8] }>, <{ i8, i8, i8, i8, i8, i8, [26 x i8] }>, <{ i8, i8, i8, i8, i8, i8, i8, [25 x i8] }>, <{ [8 x i8], [24 x i8] }>, <{ [9 x i8], [23 x i8] }>, <{ [10 x i8], [22 x i8] }>, <{ [11 x i8], [21 x i8] }>, <{ [12 x i8], [20 x i8] }>, <{ [13 x i8], [19 x i8] }>, <{ [14 x i8], [18 x i8] }>, <{ [15 x i8], [17 x i8] }>, <{ [16 x i8], [16 x i8] }>, <{ [17 x i8], [15 x i8] }>, <{ [18 x i8], [14 x i8] }>, <{ [19 x i8], [13 x i8] }>, <{ [20 x i8], [12 x i8] }>, <{ [21 x i8], [11 x i8] }>, <{ [22 x i8], [10 x i8] }>, <{ [23 x i8], [9 x i8] }>, <{ [24 x i8], [8 x i8] }>, [32 x i8], [32 x i8], [32 x i8], [32 x i8], [32 x i8], [32 x i8], [32 x i8], [32 x i8] }>* @BaseMask to [33 x [32 x i8]]*), i64 0, i64 %2501, i64 0
  %2547 = bitcast i8* %2546 to <32 x i8>*
  %2548 = load <32 x i8>, <32 x i8>* %2547, align 32
  %2549 = bitcast <4 x i64> %2545 to <32 x i8>
  %2550 = tail call <32 x i8> @llvm.x86.avx2.pblendvb(<32 x i8> %2475, <32 x i8> %2549, <32 x i8> %2548) #8
  %2551 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %13, i64 0, i64 %2477
  %2552 = bitcast <4 x i64>* %2551 to <32 x i8>*
  store <32 x i8> %2550, <32 x i8>* %2552, align 32
  %2553 = add nsw i32 %2478, %8
  %2554 = add nuw nsw i64 %2477, 1
  %2555 = icmp eq i64 %2554, 8
  br i1 %2555, label %2556, label %2476

2556:                                             ; preds = %2542, %2485, %4846, %4851, %4856, %4861, %4866, %4871, %4876, %2482
  %2557 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %13, i64 0, i64 8
  %2558 = bitcast <4 x i64>* %2557 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 32 %2558, i8 0, i64 256, i1 false) #8
  %2559 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %14, i64 0, i64 0
  %2560 = bitcast [16 x <4 x i64>]* %13 to <32 x i8>*
  %2561 = load <32 x i8>, <32 x i8>* %2560, align 32
  %2562 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %13, i64 0, i64 1
  %2563 = bitcast <4 x i64>* %2562 to <32 x i8>*
  %2564 = load <32 x i8>, <32 x i8>* %2563, align 32
  %2565 = shufflevector <32 x i8> %2561, <32 x i8> %2564, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %2566 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %13, i64 0, i64 2
  %2567 = bitcast <4 x i64>* %2566 to <32 x i8>*
  %2568 = load <32 x i8>, <32 x i8>* %2567, align 32
  %2569 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %13, i64 0, i64 3
  %2570 = bitcast <4 x i64>* %2569 to <32 x i8>*
  %2571 = load <32 x i8>, <32 x i8>* %2570, align 32
  %2572 = shufflevector <32 x i8> %2568, <32 x i8> %2571, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %2573 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %13, i64 0, i64 4
  %2574 = bitcast <4 x i64>* %2573 to <32 x i8>*
  %2575 = load <32 x i8>, <32 x i8>* %2574, align 32
  %2576 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %13, i64 0, i64 5
  %2577 = bitcast <4 x i64>* %2576 to <32 x i8>*
  %2578 = load <32 x i8>, <32 x i8>* %2577, align 32
  %2579 = shufflevector <32 x i8> %2575, <32 x i8> %2578, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %2580 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %13, i64 0, i64 6
  %2581 = bitcast <4 x i64>* %2580 to <32 x i8>*
  %2582 = load <32 x i8>, <32 x i8>* %2581, align 32
  %2583 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %13, i64 0, i64 7
  %2584 = bitcast <4 x i64>* %2583 to <32 x i8>*
  %2585 = load <32 x i8>, <32 x i8>* %2584, align 32
  %2586 = shufflevector <32 x i8> %2582, <32 x i8> %2585, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %2587 = bitcast <32 x i8> %2565 to <16 x i16>
  %2588 = bitcast <32 x i8> %2572 to <16 x i16>
  %2589 = shufflevector <16 x i16> %2587, <16 x i16> %2588, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %2590 = bitcast <32 x i8> %2579 to <16 x i16>
  %2591 = bitcast <32 x i8> %2586 to <16 x i16>
  %2592 = shufflevector <16 x i16> %2590, <16 x i16> %2591, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %2593 = bitcast <16 x i16> %2589 to <8 x i32>
  %2594 = bitcast <16 x i16> %2592 to <8 x i32>
  %2595 = shufflevector <8 x i32> %2593, <8 x i32> %2594, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %2596 = bitcast <8 x i32> %2595 to <4 x i64>
  %2597 = shufflevector <8 x i32> %2593, <8 x i32> %2594, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %2598 = bitcast <8 x i32> %2597 to <4 x i64>
  %2599 = shufflevector <4 x i64> %2596, <4 x i64> <i64 0, i64 undef, i64 0, i64 undef>, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  store <4 x i64> %2599, <4 x i64>* %2559, align 32
  %2600 = shufflevector <4 x i64> %2596, <4 x i64> <i64 undef, i64 0, i64 undef, i64 0>, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %2601 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %14, i64 0, i64 1
  store <4 x i64> %2600, <4 x i64>* %2601, align 32
  %2602 = shufflevector <4 x i64> %2598, <4 x i64> <i64 0, i64 undef, i64 0, i64 undef>, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %2603 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %14, i64 0, i64 2
  store <4 x i64> %2602, <4 x i64>* %2603, align 32
  %2604 = shufflevector <4 x i64> %2598, <4 x i64> <i64 undef, i64 0, i64 undef, i64 0>, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %2605 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %14, i64 0, i64 3
  store <4 x i64> %2604, <4 x i64>* %2605, align 32
  %2606 = shufflevector <16 x i16> %2587, <16 x i16> %2588, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %2607 = shufflevector <16 x i16> %2590, <16 x i16> %2591, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %2608 = bitcast <16 x i16> %2606 to <8 x i32>
  %2609 = bitcast <16 x i16> %2607 to <8 x i32>
  %2610 = shufflevector <8 x i32> %2608, <8 x i32> %2609, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %2611 = bitcast <8 x i32> %2610 to <4 x i64>
  %2612 = shufflevector <8 x i32> %2608, <8 x i32> %2609, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %2613 = bitcast <8 x i32> %2612 to <4 x i64>
  %2614 = shufflevector <4 x i64> %2611, <4 x i64> <i64 0, i64 undef, i64 0, i64 undef>, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %2615 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %14, i64 0, i64 4
  store <4 x i64> %2614, <4 x i64>* %2615, align 32
  %2616 = shufflevector <4 x i64> %2611, <4 x i64> <i64 undef, i64 0, i64 undef, i64 0>, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %2617 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %14, i64 0, i64 5
  store <4 x i64> %2616, <4 x i64>* %2617, align 32
  %2618 = shufflevector <4 x i64> %2613, <4 x i64> <i64 0, i64 undef, i64 0, i64 undef>, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %2619 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %14, i64 0, i64 6
  store <4 x i64> %2618, <4 x i64>* %2619, align 32
  %2620 = shufflevector <4 x i64> %2613, <4 x i64> <i64 undef, i64 0, i64 undef, i64 0>, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %2621 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %14, i64 0, i64 7
  store <4 x i64> %2620, <4 x i64>* %2621, align 32
  %2622 = shufflevector <32 x i8> %2561, <32 x i8> %2564, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %2623 = shufflevector <32 x i8> %2568, <32 x i8> %2571, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %2624 = shufflevector <32 x i8> %2575, <32 x i8> %2578, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %2625 = shufflevector <32 x i8> %2582, <32 x i8> %2585, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %2626 = bitcast <32 x i8> %2622 to <16 x i16>
  %2627 = bitcast <32 x i8> %2623 to <16 x i16>
  %2628 = shufflevector <16 x i16> %2626, <16 x i16> %2627, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %2629 = bitcast <32 x i8> %2624 to <16 x i16>
  %2630 = bitcast <32 x i8> %2625 to <16 x i16>
  %2631 = shufflevector <16 x i16> %2629, <16 x i16> %2630, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %2632 = bitcast <16 x i16> %2628 to <8 x i32>
  %2633 = bitcast <16 x i16> %2631 to <8 x i32>
  %2634 = shufflevector <8 x i32> %2632, <8 x i32> %2633, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %2635 = bitcast <8 x i32> %2634 to <4 x i64>
  %2636 = shufflevector <8 x i32> %2632, <8 x i32> %2633, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %2637 = bitcast <8 x i32> %2636 to <4 x i64>
  %2638 = shufflevector <4 x i64> %2635, <4 x i64> <i64 0, i64 undef, i64 0, i64 undef>, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %2639 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %14, i64 0, i64 8
  store <4 x i64> %2638, <4 x i64>* %2639, align 32
  %2640 = shufflevector <4 x i64> %2635, <4 x i64> <i64 undef, i64 0, i64 undef, i64 0>, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %2641 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %14, i64 0, i64 9
  store <4 x i64> %2640, <4 x i64>* %2641, align 32
  %2642 = shufflevector <4 x i64> %2637, <4 x i64> <i64 0, i64 undef, i64 0, i64 undef>, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %2643 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %14, i64 0, i64 10
  store <4 x i64> %2642, <4 x i64>* %2643, align 32
  %2644 = shufflevector <4 x i64> %2637, <4 x i64> <i64 undef, i64 0, i64 undef, i64 0>, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %2645 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %14, i64 0, i64 11
  store <4 x i64> %2644, <4 x i64>* %2645, align 32
  %2646 = shufflevector <16 x i16> %2626, <16 x i16> %2627, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %2647 = shufflevector <16 x i16> %2629, <16 x i16> %2630, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %2648 = bitcast <16 x i16> %2646 to <8 x i32>
  %2649 = bitcast <16 x i16> %2647 to <8 x i32>
  %2650 = shufflevector <8 x i32> %2648, <8 x i32> %2649, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %2651 = bitcast <8 x i32> %2650 to <4 x i64>
  %2652 = shufflevector <8 x i32> %2648, <8 x i32> %2649, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %2653 = bitcast <8 x i32> %2652 to <4 x i64>
  %2654 = shufflevector <4 x i64> %2651, <4 x i64> <i64 0, i64 undef, i64 0, i64 undef>, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %2655 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %14, i64 0, i64 12
  store <4 x i64> %2654, <4 x i64>* %2655, align 32
  %2656 = shufflevector <4 x i64> %2651, <4 x i64> <i64 undef, i64 0, i64 undef, i64 0>, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %2657 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %14, i64 0, i64 13
  store <4 x i64> %2656, <4 x i64>* %2657, align 32
  %2658 = shufflevector <4 x i64> %2653, <4 x i64> <i64 0, i64 undef, i64 0, i64 undef>, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %2659 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %14, i64 0, i64 14
  store <4 x i64> %2658, <4 x i64>* %2659, align 32
  %2660 = shufflevector <4 x i64> %2653, <4 x i64> <i64 undef, i64 0, i64 undef, i64 0>, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %2661 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %14, i64 0, i64 15
  store <4 x i64> %2660, <4 x i64>* %2661, align 32
  %2662 = extractelement <4 x i64> %2596, i32 0
  %2663 = bitcast i8* %0 to i64*
  store i64 %2662, i64* %2663, align 1
  %2664 = getelementptr inbounds i8, i8* %0, i64 %1
  %2665 = extractelement <4 x i64> %2596, i32 1
  %2666 = bitcast i8* %2664 to i64*
  store i64 %2665, i64* %2666, align 1
  %2667 = shl nsw i64 %1, 1
  %2668 = getelementptr inbounds i8, i8* %0, i64 %2667
  %2669 = extractelement <4 x i64> %2598, i32 0
  %2670 = bitcast i8* %2668 to i64*
  store i64 %2669, i64* %2670, align 1
  %2671 = mul nsw i64 %1, 3
  %2672 = getelementptr inbounds i8, i8* %0, i64 %2671
  %2673 = extractelement <4 x i64> %2598, i32 1
  %2674 = bitcast i8* %2672 to i64*
  store i64 %2673, i64* %2674, align 1
  %2675 = shl nsw i64 %1, 2
  %2676 = getelementptr inbounds i8, i8* %0, i64 %2675
  %2677 = extractelement <4 x i64> %2611, i32 0
  %2678 = bitcast i8* %2676 to i64*
  store i64 %2677, i64* %2678, align 1
  %2679 = mul nsw i64 %1, 5
  %2680 = getelementptr inbounds i8, i8* %0, i64 %2679
  %2681 = extractelement <4 x i64> %2611, i32 1
  %2682 = bitcast i8* %2680 to i64*
  store i64 %2681, i64* %2682, align 1
  %2683 = mul nsw i64 %1, 6
  %2684 = getelementptr inbounds i8, i8* %0, i64 %2683
  %2685 = extractelement <4 x i64> %2613, i32 0
  %2686 = bitcast i8* %2684 to i64*
  store i64 %2685, i64* %2686, align 1
  %2687 = mul nsw i64 %1, 7
  %2688 = getelementptr inbounds i8, i8* %0, i64 %2687
  %2689 = extractelement <4 x i64> %2613, i32 1
  %2690 = bitcast i8* %2688 to i64*
  store i64 %2689, i64* %2690, align 1
  %2691 = shl nsw i64 %1, 3
  %2692 = getelementptr inbounds i8, i8* %0, i64 %2691
  %2693 = extractelement <4 x i64> %2635, i32 0
  %2694 = bitcast i8* %2692 to i64*
  store i64 %2693, i64* %2694, align 1
  %2695 = mul nsw i64 %1, 9
  %2696 = getelementptr inbounds i8, i8* %0, i64 %2695
  %2697 = extractelement <4 x i64> %2635, i32 1
  %2698 = bitcast i8* %2696 to i64*
  store i64 %2697, i64* %2698, align 1
  %2699 = mul nsw i64 %1, 10
  %2700 = getelementptr inbounds i8, i8* %0, i64 %2699
  %2701 = extractelement <4 x i64> %2637, i32 0
  %2702 = bitcast i8* %2700 to i64*
  store i64 %2701, i64* %2702, align 1
  %2703 = mul nsw i64 %1, 11
  %2704 = getelementptr inbounds i8, i8* %0, i64 %2703
  %2705 = extractelement <4 x i64> %2637, i32 1
  %2706 = bitcast i8* %2704 to i64*
  store i64 %2705, i64* %2706, align 1
  %2707 = mul nsw i64 %1, 12
  %2708 = getelementptr inbounds i8, i8* %0, i64 %2707
  %2709 = extractelement <4 x i64> %2651, i32 0
  %2710 = bitcast i8* %2708 to i64*
  store i64 %2709, i64* %2710, align 1
  %2711 = mul nsw i64 %1, 13
  %2712 = getelementptr inbounds i8, i8* %0, i64 %2711
  %2713 = extractelement <4 x i64> %2651, i32 1
  %2714 = bitcast i8* %2712 to i64*
  store i64 %2713, i64* %2714, align 1
  %2715 = mul nsw i64 %1, 14
  %2716 = getelementptr inbounds i8, i8* %0, i64 %2715
  %2717 = extractelement <4 x i64> %2653, i32 0
  %2718 = bitcast i8* %2716 to i64*
  store i64 %2717, i64* %2718, align 1
  %2719 = mul nsw i64 %1, 15
  %2720 = getelementptr inbounds i8, i8* %0, i64 %2719
  %2721 = extractelement <4 x i64> %2653, i32 1
  %2722 = bitcast i8* %2720 to i64*
  store i64 %2721, i64* %2722, align 1
  %2723 = shl nsw i64 %1, 4
  %2724 = getelementptr inbounds i8, i8* %0, i64 %2723
  %2725 = extractelement <4 x i64> %2596, i32 2
  %2726 = bitcast i8* %2724 to i64*
  store i64 %2725, i64* %2726, align 1
  %2727 = mul nsw i64 %1, 17
  %2728 = getelementptr inbounds i8, i8* %0, i64 %2727
  %2729 = extractelement <4 x i64> %2596, i32 3
  %2730 = bitcast i8* %2728 to i64*
  store i64 %2729, i64* %2730, align 1
  %2731 = mul nsw i64 %1, 18
  %2732 = getelementptr inbounds i8, i8* %0, i64 %2731
  %2733 = extractelement <4 x i64> %2598, i32 2
  %2734 = bitcast i8* %2732 to i64*
  store i64 %2733, i64* %2734, align 1
  %2735 = mul nsw i64 %1, 19
  %2736 = getelementptr inbounds i8, i8* %0, i64 %2735
  %2737 = extractelement <4 x i64> %2598, i32 3
  %2738 = bitcast i8* %2736 to i64*
  store i64 %2737, i64* %2738, align 1
  %2739 = mul nsw i64 %1, 20
  %2740 = getelementptr inbounds i8, i8* %0, i64 %2739
  %2741 = extractelement <4 x i64> %2611, i32 2
  %2742 = bitcast i8* %2740 to i64*
  store i64 %2741, i64* %2742, align 1
  %2743 = mul nsw i64 %1, 21
  %2744 = getelementptr inbounds i8, i8* %0, i64 %2743
  %2745 = extractelement <4 x i64> %2611, i32 3
  %2746 = bitcast i8* %2744 to i64*
  store i64 %2745, i64* %2746, align 1
  %2747 = mul nsw i64 %1, 22
  %2748 = getelementptr inbounds i8, i8* %0, i64 %2747
  %2749 = extractelement <4 x i64> %2613, i32 2
  %2750 = bitcast i8* %2748 to i64*
  store i64 %2749, i64* %2750, align 1
  %2751 = mul nsw i64 %1, 23
  %2752 = getelementptr inbounds i8, i8* %0, i64 %2751
  %2753 = extractelement <4 x i64> %2613, i32 3
  %2754 = bitcast i8* %2752 to i64*
  store i64 %2753, i64* %2754, align 1
  %2755 = mul nsw i64 %1, 24
  %2756 = getelementptr inbounds i8, i8* %0, i64 %2755
  %2757 = extractelement <4 x i64> %2635, i32 2
  %2758 = bitcast i8* %2756 to i64*
  store i64 %2757, i64* %2758, align 1
  %2759 = mul nsw i64 %1, 25
  %2760 = getelementptr inbounds i8, i8* %0, i64 %2759
  %2761 = extractelement <4 x i64> %2635, i32 3
  %2762 = bitcast i8* %2760 to i64*
  store i64 %2761, i64* %2762, align 1
  %2763 = mul nsw i64 %1, 26
  %2764 = getelementptr inbounds i8, i8* %0, i64 %2763
  %2765 = extractelement <4 x i64> %2637, i32 2
  %2766 = bitcast i8* %2764 to i64*
  store i64 %2765, i64* %2766, align 1
  %2767 = mul nsw i64 %1, 27
  %2768 = getelementptr inbounds i8, i8* %0, i64 %2767
  %2769 = extractelement <4 x i64> %2637, i32 3
  %2770 = bitcast i8* %2768 to i64*
  store i64 %2769, i64* %2770, align 1
  %2771 = mul nsw i64 %1, 28
  %2772 = getelementptr inbounds i8, i8* %0, i64 %2771
  %2773 = extractelement <4 x i64> %2651, i32 2
  %2774 = bitcast i8* %2772 to i64*
  store i64 %2773, i64* %2774, align 1
  %2775 = mul nsw i64 %1, 29
  %2776 = getelementptr inbounds i8, i8* %0, i64 %2775
  %2777 = extractelement <4 x i64> %2651, i32 3
  %2778 = bitcast i8* %2776 to i64*
  store i64 %2777, i64* %2778, align 1
  %2779 = mul nsw i64 %1, 30
  %2780 = getelementptr inbounds i8, i8* %0, i64 %2779
  %2781 = extractelement <4 x i64> %2653, i32 2
  %2782 = bitcast i8* %2780 to i64*
  store i64 %2781, i64* %2782, align 1
  %2783 = mul nsw i64 %1, 31
  %2784 = getelementptr inbounds i8, i8* %0, i64 %2783
  %2785 = extractelement <4 x i64> %2653, i32 3
  %2786 = bitcast i8* %2784 to i64*
  store i64 %2785, i64* %2786, align 1
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %2471) #8
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %2470) #8
  br label %4740

2787:                                             ; preds = %2247
  %2788 = getelementptr inbounds [1024 x i8], [1024 x i8]* %15, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %2788) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %2788, i8 -86, i64 1024, i1 false) #8
  %2789 = getelementptr inbounds i8, i8* %5, i64 79
  %2790 = load i8, i8* %2789, align 1
  %2791 = insertelement <32 x i8> undef, i8 %2790, i32 0
  %2792 = shufflevector <32 x i8> %2791, <32 x i8> undef, <32 x i32> zeroinitializer
  %2793 = bitcast <32 x i8> %2792 to <4 x i64>
  %2794 = shufflevector <4 x i64> %2793, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %2795 = bitcast <2 x i64> %2794 to <16 x i8>
  br label %2796

2796:                                             ; preds = %2940, %2787
  %2797 = phi i8* [ %2788, %2787 ], [ %2943, %2940 ]
  %2798 = phi i32 [ 0, %2787 ], [ %2942, %2940 ]
  %2799 = phi i32 [ %8, %2787 ], [ %2941, %2940 ]
  %2800 = icmp slt i32 %2799, 5056
  br i1 %2800, label %2860, label %2801

2801:                                             ; preds = %2796
  %2802 = icmp ult i32 %2798, 16
  br i1 %2802, label %2803, label %2945

2803:                                             ; preds = %2801
  %2804 = sub nsw i32 0, %2798
  %2805 = sub nsw i32 15, %2798
  %2806 = and i32 %2804, 7
  %2807 = icmp eq i32 %2806, 0
  br i1 %2807, label %2819, label %2808

2808:                                             ; preds = %2803, %2808
  %2809 = phi i8* [ %2815, %2808 ], [ %2797, %2803 ]
  %2810 = phi i32 [ %2816, %2808 ], [ %2798, %2803 ]
  %2811 = phi i32 [ %2817, %2808 ], [ %2806, %2803 ]
  %2812 = bitcast i8* %2809 to <32 x i8>*
  store <32 x i8> %2792, <32 x i8>* %2812, align 1
  %2813 = getelementptr inbounds i8, i8* %2809, i64 32
  %2814 = bitcast i8* %2813 to <32 x i8>*
  store <32 x i8> %2792, <32 x i8>* %2814, align 1
  %2815 = getelementptr inbounds i8, i8* %2809, i64 64
  %2816 = add nuw nsw i32 %2810, 1
  %2817 = add i32 %2811, -1
  %2818 = icmp eq i32 %2817, 0
  br i1 %2818, label %2819, label %2808, !llvm.loop !49

2819:                                             ; preds = %2808, %2803
  %2820 = phi i8* [ %2797, %2803 ], [ %2815, %2808 ]
  %2821 = phi i32 [ %2798, %2803 ], [ %2816, %2808 ]
  %2822 = icmp ult i32 %2805, 7
  br i1 %2822, label %2945, label %2823

2823:                                             ; preds = %2819, %2823
  %2824 = phi i8* [ %2857, %2823 ], [ %2820, %2819 ]
  %2825 = phi i32 [ %2858, %2823 ], [ %2821, %2819 ]
  %2826 = bitcast i8* %2824 to <32 x i8>*
  store <32 x i8> %2792, <32 x i8>* %2826, align 1
  %2827 = getelementptr inbounds i8, i8* %2824, i64 32
  %2828 = bitcast i8* %2827 to <32 x i8>*
  store <32 x i8> %2792, <32 x i8>* %2828, align 1
  %2829 = getelementptr inbounds i8, i8* %2824, i64 64
  %2830 = bitcast i8* %2829 to <32 x i8>*
  store <32 x i8> %2792, <32 x i8>* %2830, align 1
  %2831 = getelementptr inbounds i8, i8* %2824, i64 96
  %2832 = bitcast i8* %2831 to <32 x i8>*
  store <32 x i8> %2792, <32 x i8>* %2832, align 1
  %2833 = getelementptr inbounds i8, i8* %2824, i64 128
  %2834 = bitcast i8* %2833 to <32 x i8>*
  store <32 x i8> %2792, <32 x i8>* %2834, align 1
  %2835 = getelementptr inbounds i8, i8* %2824, i64 160
  %2836 = bitcast i8* %2835 to <32 x i8>*
  store <32 x i8> %2792, <32 x i8>* %2836, align 1
  %2837 = getelementptr inbounds i8, i8* %2824, i64 192
  %2838 = bitcast i8* %2837 to <32 x i8>*
  store <32 x i8> %2792, <32 x i8>* %2838, align 1
  %2839 = getelementptr inbounds i8, i8* %2824, i64 224
  %2840 = bitcast i8* %2839 to <32 x i8>*
  store <32 x i8> %2792, <32 x i8>* %2840, align 1
  %2841 = getelementptr inbounds i8, i8* %2824, i64 256
  %2842 = bitcast i8* %2841 to <32 x i8>*
  store <32 x i8> %2792, <32 x i8>* %2842, align 1
  %2843 = getelementptr inbounds i8, i8* %2824, i64 288
  %2844 = bitcast i8* %2843 to <32 x i8>*
  store <32 x i8> %2792, <32 x i8>* %2844, align 1
  %2845 = getelementptr inbounds i8, i8* %2824, i64 320
  %2846 = bitcast i8* %2845 to <32 x i8>*
  store <32 x i8> %2792, <32 x i8>* %2846, align 1
  %2847 = getelementptr inbounds i8, i8* %2824, i64 352
  %2848 = bitcast i8* %2847 to <32 x i8>*
  store <32 x i8> %2792, <32 x i8>* %2848, align 1
  %2849 = getelementptr inbounds i8, i8* %2824, i64 384
  %2850 = bitcast i8* %2849 to <32 x i8>*
  store <32 x i8> %2792, <32 x i8>* %2850, align 1
  %2851 = getelementptr inbounds i8, i8* %2824, i64 416
  %2852 = bitcast i8* %2851 to <32 x i8>*
  store <32 x i8> %2792, <32 x i8>* %2852, align 1
  %2853 = getelementptr inbounds i8, i8* %2824, i64 448
  %2854 = bitcast i8* %2853 to <32 x i8>*
  store <32 x i8> %2792, <32 x i8>* %2854, align 1
  %2855 = getelementptr inbounds i8, i8* %2824, i64 480
  %2856 = bitcast i8* %2855 to <32 x i8>*
  store <32 x i8> %2792, <32 x i8>* %2856, align 1
  %2857 = getelementptr inbounds i8, i8* %2824, i64 512
  %2858 = add nuw nsw i32 %2825, 8
  %2859 = icmp eq i32 %2858, 16
  br i1 %2859, label %2945, label %2823

2860:                                             ; preds = %2796
  %2861 = ashr i32 %2799, 6
  %2862 = trunc i32 %2799 to i16
  %2863 = insertelement <16 x i16> undef, i16 %2862, i32 0
  %2864 = and <16 x i16> %2863, <i16 63, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef>
  %2865 = lshr <16 x i16> %2864, <i16 1, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0>
  %2866 = shufflevector <16 x i16> %2865, <16 x i16> undef, <16 x i32> zeroinitializer
  %2867 = sext i32 %2861 to i64
  %2868 = getelementptr inbounds i8, i8* %5, i64 %2867
  %2869 = getelementptr inbounds i8, i8* %2868, i64 1
  br label %2870

2870:                                             ; preds = %2937, %2860
  %2871 = phi i64 [ 0, %2860 ], [ %2938, %2937 ]
  %2872 = add nsw i64 %2871, %2867
  %2873 = icmp slt i64 %2872, 79
  br i1 %2873, label %2877, label %2874

2874:                                             ; preds = %2870
  %2875 = getelementptr inbounds i8, i8* %2797, i64 %2871
  %2876 = bitcast i8* %2875 to <2 x i64>*
  store <2 x i64> %2794, <2 x i64>* %2876, align 1
  br label %2937

2877:                                             ; preds = %2870
  %2878 = getelementptr inbounds i8, i8* %2868, i64 %2871
  %2879 = bitcast i8* %2878 to <16 x i8>*
  %2880 = load <16 x i8>, <16 x i8>* %2879, align 1
  %2881 = getelementptr inbounds i8, i8* %2869, i64 %2871
  %2882 = bitcast i8* %2881 to <16 x i8>*
  %2883 = load <16 x i8>, <16 x i8>* %2882, align 1
  %2884 = zext <16 x i8> %2880 to <16 x i16>
  %2885 = zext <16 x i8> %2883 to <16 x i16>
  %2886 = sub nsw <16 x i16> %2885, %2884
  %2887 = shl nuw nsw <16 x i16> %2884, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %2888 = or <16 x i16> %2887, <i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16>
  %2889 = mul <16 x i16> %2886, %2866
  %2890 = add <16 x i16> %2889, %2888
  %2891 = lshr <16 x i16> %2890, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %2892 = bitcast <16 x i16> %2891 to <4 x i64>
  %2893 = shufflevector <4 x i64> %2892, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %2894 = shufflevector <2 x i64> %2893, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %2895 = bitcast <4 x i64> %2894 to <16 x i16>
  %2896 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %2891, <16 x i16> %2895) #8
  %2897 = bitcast <32 x i8> %2896 to <4 x i64>
  %2898 = trunc i64 %2872 to i8
  %2899 = add i8 %2898, 1
  %2900 = add i8 %2898, 2
  %2901 = add i8 %2898, 3
  %2902 = add i8 %2898, 4
  %2903 = add i8 %2898, 5
  %2904 = add i8 %2898, 6
  %2905 = add i8 %2898, 7
  %2906 = add i8 %2898, 8
  %2907 = add i8 %2898, 9
  %2908 = add i8 %2898, 10
  %2909 = add i8 %2898, 11
  %2910 = add i8 %2898, 12
  %2911 = add i8 %2898, 13
  %2912 = add i8 %2898, 14
  %2913 = add i8 %2898, 15
  %2914 = insertelement <16 x i8> undef, i8 %2898, i32 0
  %2915 = insertelement <16 x i8> %2914, i8 %2899, i32 1
  %2916 = insertelement <16 x i8> %2915, i8 %2900, i32 2
  %2917 = insertelement <16 x i8> %2916, i8 %2901, i32 3
  %2918 = insertelement <16 x i8> %2917, i8 %2902, i32 4
  %2919 = insertelement <16 x i8> %2918, i8 %2903, i32 5
  %2920 = insertelement <16 x i8> %2919, i8 %2904, i32 6
  %2921 = insertelement <16 x i8> %2920, i8 %2905, i32 7
  %2922 = insertelement <16 x i8> %2921, i8 %2906, i32 8
  %2923 = insertelement <16 x i8> %2922, i8 %2907, i32 9
  %2924 = insertelement <16 x i8> %2923, i8 %2908, i32 10
  %2925 = insertelement <16 x i8> %2924, i8 %2909, i32 11
  %2926 = insertelement <16 x i8> %2925, i8 %2910, i32 12
  %2927 = insertelement <16 x i8> %2926, i8 %2911, i32 13
  %2928 = insertelement <16 x i8> %2927, i8 %2912, i32 14
  %2929 = insertelement <16 x i8> %2928, i8 %2913, i32 15
  %2930 = tail call <16 x i8> @llvm.usub.sat.v16i8(<16 x i8> <i8 79, i8 79, i8 79, i8 79, i8 79, i8 79, i8 79, i8 79, i8 79, i8 79, i8 79, i8 79, i8 79, i8 79, i8 79, i8 79>, <16 x i8> %2929) #8
  %2931 = icmp eq <16 x i8> %2930, zeroinitializer
  %2932 = shufflevector <4 x i64> %2897, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %2933 = bitcast <2 x i64> %2932 to <16 x i8>
  %2934 = select <16 x i1> %2931, <16 x i8> %2795, <16 x i8> %2933
  %2935 = getelementptr inbounds i8, i8* %2797, i64 %2871
  %2936 = bitcast i8* %2935 to <16 x i8>*
  store <16 x i8> %2934, <16 x i8>* %2936, align 1
  br label %2937

2937:                                             ; preds = %2877, %2874
  %2938 = add nuw nsw i64 %2871, 16
  %2939 = icmp ult i64 %2938, 64
  br i1 %2939, label %2870, label %2940

2940:                                             ; preds = %2937
  %2941 = add nsw i32 %2799, %8
  %2942 = add nuw nsw i32 %2798, 1
  %2943 = getelementptr inbounds i8, i8* %2797, i64 64
  %2944 = icmp eq i32 %2942, 16
  br i1 %2944, label %2945, label %2796

2945:                                             ; preds = %2940, %2819, %2823, %2801
  call fastcc void @transpose(i8* nonnull %2788, i64 64, i8* %0, i64 %1, i32 16, i32 64) #8
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %2788) #8
  br label %4740

2946:                                             ; preds = %1351
  %2947 = shl nsw i32 %3, 1
  %2948 = icmp eq i32 %2947, %2
  br i1 %2948, label %2949, label %3813

2949:                                             ; preds = %2946
  %2950 = add i32 %3, -4
  %2951 = lshr i32 %2950, 2
  %2952 = shl i32 %2950, 30
  %2953 = or i32 %2951, %2952
  switch i32 %2953, label %4740 [
    i32 0, label %2954
    i32 1, label %3100
    i32 3, label %3350
    i32 7, label %3687
  ]

2954:                                             ; preds = %2949
  %2955 = bitcast [8 x <2 x i64>]* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %2955) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %2955, i8 -86, i64 128, i1 false) #8
  %2956 = sub nsw i32 6, %6
  %2957 = shl i32 11, %6
  %2958 = sext i32 %2957 to i64
  %2959 = getelementptr inbounds i8, i8* %5, i64 %2958
  %2960 = load i8, i8* %2959, align 1
  %2961 = insertelement <16 x i8> undef, i8 %2960, i32 0
  %2962 = shufflevector <16 x i8> %2961, <16 x i8> undef, <16 x i32> zeroinitializer
  %2963 = icmp eq i32 %6, 0
  br label %2964

2964:                                             ; preds = %3009, %2954
  %2965 = phi i64 [ 0, %2954 ], [ %3039, %3009 ]
  %2966 = phi i32 [ %8, %2954 ], [ %3038, %3009 ]
  %2967 = ashr i32 %2966, %2956
  %2968 = sub nsw i32 %2957, %2967
  %2969 = ashr i32 %2968, %6
  %2970 = icmp slt i32 %2969, 1
  br i1 %2970, label %2971, label %2980

2971:                                             ; preds = %2964
  %2972 = trunc i64 %2965 to i32
  %2973 = icmp slt i32 %2972, 8
  br i1 %2973, label %2974, label %3041

2974:                                             ; preds = %2971
  %2975 = and i64 %2965, 4294967295
  %2976 = getelementptr inbounds [8 x <2 x i64>], [8 x <2 x i64>]* %16, i64 0, i64 %2975
  %2977 = bitcast <2 x i64>* %2976 to <16 x i8>*
  store <16 x i8> %2962, <16 x i8>* %2977, align 16
  %2978 = add nuw nsw i64 %2975, 1
  %2979 = icmp eq i64 %2978, 8
  br i1 %2979, label %3041, label %4879

2980:                                             ; preds = %2964
  %2981 = icmp slt i32 %2969, 4
  %2982 = select i1 %2981, i32 %2969, i32 4
  %2983 = sext i32 %2967 to i64
  %2984 = getelementptr inbounds i8, i8* %5, i64 %2983
  %2985 = bitcast i8* %2984 to <2 x i64>*
  %2986 = load <2 x i64>, <2 x i64>* %2985, align 1
  br i1 %2963, label %2999, label %2987

2987:                                             ; preds = %2980
  %2988 = bitcast <2 x i64> %2986 to <16 x i8>
  %2989 = shufflevector <16 x i8> %2988, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %2990 = bitcast <16 x i8> %2989 to <2 x i64>
  %2991 = shufflevector <16 x i8> %2989, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %2992 = trunc i32 %2966 to i16
  %2993 = insertelement <16 x i16> undef, i16 %2992, i32 0
  %2994 = shufflevector <16 x i16> %2993, <16 x i16> undef, <16 x i32> zeroinitializer
  %2995 = tail call <16 x i16> @llvm.x86.avx2.pslli.w(<16 x i16> %2994, i32 %6) #8
  %2996 = lshr <16 x i16> %2995, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2997 = bitcast <16 x i16> %2996 to <4 x i64>
  %2998 = and <4 x i64> %2997, <i64 8725857424048159, i64 8725857424048159, i64 8725857424048159, i64 8725857424048159>
  br label %3009

2999:                                             ; preds = %2980
  %3000 = getelementptr inbounds i8, i8* %2984, i64 1
  %3001 = bitcast i8* %3000 to <16 x i8>*
  %3002 = load <16 x i8>, <16 x i8>* %3001, align 1
  %3003 = trunc i32 %2966 to i16
  %3004 = insertelement <16 x i16> undef, i16 %3003, i32 0
  %3005 = and <16 x i16> %3004, <i16 63, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef>
  %3006 = lshr <16 x i16> %3005, <i16 1, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0>
  %3007 = shufflevector <16 x i16> %3006, <16 x i16> undef, <16 x i32> zeroinitializer
  %3008 = bitcast <16 x i16> %3007 to <4 x i64>
  br label %3009

3009:                                             ; preds = %2999, %2987
  %3010 = phi <4 x i64> [ %2998, %2987 ], [ %3008, %2999 ]
  %3011 = phi <2 x i64> [ %2990, %2987 ], [ %2986, %2999 ]
  %3012 = phi <16 x i8> [ %2991, %2987 ], [ %3002, %2999 ]
  %3013 = bitcast <2 x i64> %3011 to <16 x i8>
  %3014 = zext <16 x i8> %3013 to <16 x i16>
  %3015 = zext <16 x i8> %3012 to <16 x i16>
  %3016 = sub nsw <16 x i16> %3015, %3014
  %3017 = shl nuw nsw <16 x i16> %3014, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %3018 = or <16 x i16> %3017, <i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16>
  %3019 = bitcast <4 x i64> %3010 to <16 x i16>
  %3020 = mul <16 x i16> %3016, %3019
  %3021 = add <16 x i16> %3020, %3018
  %3022 = lshr <16 x i16> %3021, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %3023 = bitcast <16 x i16> %3022 to <4 x i64>
  %3024 = shufflevector <4 x i64> %3023, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %3025 = shufflevector <2 x i64> %3024, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %3026 = bitcast <4 x i64> %3025 to <16 x i16>
  %3027 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %3022, <16 x i16> %3026) #8
  %3028 = bitcast <32 x i8> %3027 to <4 x i64>
  %3029 = shufflevector <4 x i64> %3028, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %3030 = sext i32 %2982 to i64
  %3031 = getelementptr inbounds [33 x [32 x i8]], [33 x [32 x i8]]* bitcast (<{ [32 x i8], <{ i8, [31 x i8] }>, <{ i8, i8, [30 x i8] }>, <{ i8, i8, i8, [29 x i8] }>, <{ i8, i8, i8, i8, [28 x i8] }>, <{ i8, i8, i8, i8, i8, [27 x i8] }>, <{ i8, i8, i8, i8, i8, i8, [26 x i8] }>, <{ i8, i8, i8, i8, i8, i8, i8, [25 x i8] }>, <{ [8 x i8], [24 x i8] }>, <{ [9 x i8], [23 x i8] }>, <{ [10 x i8], [22 x i8] }>, <{ [11 x i8], [21 x i8] }>, <{ [12 x i8], [20 x i8] }>, <{ [13 x i8], [19 x i8] }>, <{ [14 x i8], [18 x i8] }>, <{ [15 x i8], [17 x i8] }>, <{ [16 x i8], [16 x i8] }>, <{ [17 x i8], [15 x i8] }>, <{ [18 x i8], [14 x i8] }>, <{ [19 x i8], [13 x i8] }>, <{ [20 x i8], [12 x i8] }>, <{ [21 x i8], [11 x i8] }>, <{ [22 x i8], [10 x i8] }>, <{ [23 x i8], [9 x i8] }>, <{ [24 x i8], [8 x i8] }>, [32 x i8], [32 x i8], [32 x i8], [32 x i8], [32 x i8], [32 x i8], [32 x i8], [32 x i8] }>* @BaseMask to [33 x [32 x i8]]*), i64 0, i64 %3030, i64 0
  %3032 = bitcast i8* %3031 to <16 x i8>*
  %3033 = load <16 x i8>, <16 x i8>* %3032, align 32
  %3034 = bitcast <2 x i64> %3029 to <16 x i8>
  %3035 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %2962, <16 x i8> %3034, <16 x i8> %3033) #8
  %3036 = getelementptr inbounds [8 x <2 x i64>], [8 x <2 x i64>]* %16, i64 0, i64 %2965
  %3037 = bitcast <2 x i64>* %3036 to <16 x i8>*
  store <16 x i8> %3035, <16 x i8>* %3037, align 16
  %3038 = add nsw i32 %2966, %8
  %3039 = add nuw nsw i64 %2965, 1
  %3040 = icmp eq i64 %3039, 8
  br i1 %3040, label %3041, label %2964

3041:                                             ; preds = %3009, %2974, %4879, %4884, %4889, %4894, %4899, %4904, %4909, %2971
  %3042 = getelementptr inbounds [8 x <2 x i64>], [8 x <2 x i64>]* %16, i64 0, i64 1
  %3043 = getelementptr inbounds [8 x <2 x i64>], [8 x <2 x i64>]* %16, i64 0, i64 2
  %3044 = getelementptr inbounds [8 x <2 x i64>], [8 x <2 x i64>]* %16, i64 0, i64 3
  %3045 = getelementptr inbounds [8 x <2 x i64>], [8 x <2 x i64>]* %16, i64 0, i64 4
  %3046 = getelementptr inbounds [8 x <2 x i64>], [8 x <2 x i64>]* %16, i64 0, i64 5
  %3047 = getelementptr inbounds [8 x <2 x i64>], [8 x <2 x i64>]* %16, i64 0, i64 6
  %3048 = getelementptr inbounds [8 x <2 x i64>], [8 x <2 x i64>]* %16, i64 0, i64 7
  %3049 = bitcast [8 x <2 x i64>]* %16 to <16 x i8>*
  %3050 = load <16 x i8>, <16 x i8>* %3049, align 16
  %3051 = bitcast <2 x i64>* %3042 to <16 x i8>*
  %3052 = load <16 x i8>, <16 x i8>* %3051, align 16
  %3053 = shufflevector <16 x i8> %3050, <16 x i8> %3052, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3054 = bitcast <2 x i64>* %3043 to <16 x i8>*
  %3055 = load <16 x i8>, <16 x i8>* %3054, align 16
  %3056 = bitcast <2 x i64>* %3044 to <16 x i8>*
  %3057 = load <16 x i8>, <16 x i8>* %3056, align 16
  %3058 = shufflevector <16 x i8> %3055, <16 x i8> %3057, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3059 = bitcast <2 x i64>* %3045 to <16 x i8>*
  %3060 = load <16 x i8>, <16 x i8>* %3059, align 16
  %3061 = bitcast <2 x i64>* %3046 to <16 x i8>*
  %3062 = load <16 x i8>, <16 x i8>* %3061, align 16
  %3063 = shufflevector <16 x i8> %3060, <16 x i8> %3062, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3064 = bitcast <2 x i64>* %3047 to <16 x i8>*
  %3065 = load <16 x i8>, <16 x i8>* %3064, align 16
  %3066 = bitcast <2 x i64>* %3048 to <16 x i8>*
  %3067 = load <16 x i8>, <16 x i8>* %3066, align 16
  %3068 = shufflevector <16 x i8> %3065, <16 x i8> %3067, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3069 = bitcast <16 x i8> %3053 to <8 x i16>
  %3070 = bitcast <16 x i8> %3058 to <8 x i16>
  %3071 = shufflevector <8 x i16> %3069, <8 x i16> %3070, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %3072 = bitcast <16 x i8> %3063 to <8 x i16>
  %3073 = bitcast <16 x i8> %3068 to <8 x i16>
  %3074 = shufflevector <8 x i16> %3072, <8 x i16> %3073, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %3075 = bitcast <8 x i16> %3071 to <4 x i32>
  %3076 = bitcast <8 x i16> %3074 to <4 x i32>
  %3077 = shufflevector <4 x i32> %3075, <4 x i32> %3076, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %3078 = bitcast <4 x i32> %3077 to <2 x i64>
  %3079 = bitcast <4 x i32> %3077 to <16 x i8>
  %3080 = shufflevector <16 x i8> %3079, <16 x i8> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3081 = bitcast <16 x i8> %3080 to <2 x i64>
  %3082 = shufflevector <4 x i32> %3075, <4 x i32> %3076, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %3083 = bitcast <4 x i32> %3082 to <2 x i64>
  %3084 = bitcast <4 x i32> %3082 to <16 x i8>
  %3085 = shufflevector <16 x i8> %3084, <16 x i8> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3086 = bitcast <16 x i8> %3085 to <2 x i64>
  %3087 = extractelement <2 x i64> %3078, i32 0
  %3088 = bitcast i8* %0 to i64*
  store i64 %3087, i64* %3088, align 1
  %3089 = getelementptr inbounds i8, i8* %0, i64 %1
  %3090 = extractelement <2 x i64> %3081, i32 0
  %3091 = bitcast i8* %3089 to i64*
  store i64 %3090, i64* %3091, align 1
  %3092 = shl nsw i64 %1, 1
  %3093 = getelementptr inbounds i8, i8* %0, i64 %3092
  %3094 = extractelement <2 x i64> %3083, i32 0
  %3095 = bitcast i8* %3093 to i64*
  store i64 %3094, i64* %3095, align 1
  %3096 = mul nsw i64 %1, 3
  %3097 = getelementptr inbounds i8, i8* %0, i64 %3096
  %3098 = extractelement <2 x i64> %3086, i32 0
  %3099 = bitcast i8* %3097 to i64*
  store i64 %3098, i64* %3099, align 1
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %2955) #8
  br label %4740

3100:                                             ; preds = %2949
  %3101 = bitcast [16 x <2 x i64>]* %20 to i8*
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %3101) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %3101, i8 -86, i64 256, i1 false) #8
  %3102 = sub nsw i32 6, %6
  %3103 = shl i32 23, %6
  %3104 = sext i32 %3103 to i64
  %3105 = getelementptr inbounds i8, i8* %5, i64 %3104
  %3106 = load i8, i8* %3105, align 1
  %3107 = insertelement <16 x i8> undef, i8 %3106, i32 0
  %3108 = shufflevector <16 x i8> %3107, <16 x i8> undef, <16 x i32> zeroinitializer
  %3109 = icmp eq i32 %6, 0
  br label %3110

3110:                                             ; preds = %3193, %3100
  %3111 = phi i64 [ 0, %3100 ], [ %3223, %3193 ]
  %3112 = phi i32 [ %8, %3100 ], [ %3222, %3193 ]
  %3113 = ashr i32 %3112, %3102
  %3114 = sub nsw i32 %3103, %3113
  %3115 = ashr i32 %3114, %6
  %3116 = icmp slt i32 %3115, 1
  br i1 %3116, label %3117, label %3164

3117:                                             ; preds = %3110
  %3118 = trunc i64 %3111 to i32
  %3119 = icmp slt i32 %3118, 16
  br i1 %3119, label %3120, label %3225

3120:                                             ; preds = %3117
  %3121 = and i64 %3111, 4294967295
  %3122 = sub nsw i64 0, %3111
  %3123 = sub nsw i64 15, %3111
  %3124 = and i64 %3122, 7
  %3125 = icmp eq i64 %3124, 0
  br i1 %3125, label %3134, label %3126

3126:                                             ; preds = %3120, %3126
  %3127 = phi i64 [ %3131, %3126 ], [ %3121, %3120 ]
  %3128 = phi i64 [ %3132, %3126 ], [ %3124, %3120 ]
  %3129 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %20, i64 0, i64 %3127
  %3130 = bitcast <2 x i64>* %3129 to <16 x i8>*
  store <16 x i8> %3108, <16 x i8>* %3130, align 16
  %3131 = add nuw nsw i64 %3127, 1
  %3132 = add i64 %3128, -1
  %3133 = icmp eq i64 %3132, 0
  br i1 %3133, label %3134, label %3126, !llvm.loop !50

3134:                                             ; preds = %3126, %3120
  %3135 = phi i64 [ %3121, %3120 ], [ %3131, %3126 ]
  %3136 = icmp ult i64 %3123, 7
  br i1 %3136, label %3225, label %3137

3137:                                             ; preds = %3134, %3137
  %3138 = phi i64 [ %3162, %3137 ], [ %3135, %3134 ]
  %3139 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %20, i64 0, i64 %3138
  %3140 = bitcast <2 x i64>* %3139 to <16 x i8>*
  store <16 x i8> %3108, <16 x i8>* %3140, align 16
  %3141 = add nuw nsw i64 %3138, 1
  %3142 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %20, i64 0, i64 %3141
  %3143 = bitcast <2 x i64>* %3142 to <16 x i8>*
  store <16 x i8> %3108, <16 x i8>* %3143, align 16
  %3144 = add nuw nsw i64 %3138, 2
  %3145 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %20, i64 0, i64 %3144
  %3146 = bitcast <2 x i64>* %3145 to <16 x i8>*
  store <16 x i8> %3108, <16 x i8>* %3146, align 16
  %3147 = add nuw nsw i64 %3138, 3
  %3148 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %20, i64 0, i64 %3147
  %3149 = bitcast <2 x i64>* %3148 to <16 x i8>*
  store <16 x i8> %3108, <16 x i8>* %3149, align 16
  %3150 = add nuw nsw i64 %3138, 4
  %3151 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %20, i64 0, i64 %3150
  %3152 = bitcast <2 x i64>* %3151 to <16 x i8>*
  store <16 x i8> %3108, <16 x i8>* %3152, align 16
  %3153 = add nuw nsw i64 %3138, 5
  %3154 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %20, i64 0, i64 %3153
  %3155 = bitcast <2 x i64>* %3154 to <16 x i8>*
  store <16 x i8> %3108, <16 x i8>* %3155, align 16
  %3156 = add nuw nsw i64 %3138, 6
  %3157 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %20, i64 0, i64 %3156
  %3158 = bitcast <2 x i64>* %3157 to <16 x i8>*
  store <16 x i8> %3108, <16 x i8>* %3158, align 16
  %3159 = add nuw nsw i64 %3138, 7
  %3160 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %20, i64 0, i64 %3159
  %3161 = bitcast <2 x i64>* %3160 to <16 x i8>*
  store <16 x i8> %3108, <16 x i8>* %3161, align 16
  %3162 = add nuw nsw i64 %3138, 8
  %3163 = icmp eq i64 %3162, 16
  br i1 %3163, label %3225, label %3137

3164:                                             ; preds = %3110
  %3165 = icmp slt i32 %3115, 8
  %3166 = select i1 %3165, i32 %3115, i32 8
  %3167 = sext i32 %3113 to i64
  %3168 = getelementptr inbounds i8, i8* %5, i64 %3167
  %3169 = bitcast i8* %3168 to <2 x i64>*
  %3170 = load <2 x i64>, <2 x i64>* %3169, align 1
  br i1 %3109, label %3183, label %3171

3171:                                             ; preds = %3164
  %3172 = bitcast <2 x i64> %3170 to <16 x i8>
  %3173 = shufflevector <16 x i8> %3172, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %3174 = bitcast <16 x i8> %3173 to <2 x i64>
  %3175 = shufflevector <16 x i8> %3173, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %3176 = trunc i32 %3112 to i16
  %3177 = insertelement <16 x i16> undef, i16 %3176, i32 0
  %3178 = shufflevector <16 x i16> %3177, <16 x i16> undef, <16 x i32> zeroinitializer
  %3179 = tail call <16 x i16> @llvm.x86.avx2.pslli.w(<16 x i16> %3178, i32 %6) #8
  %3180 = lshr <16 x i16> %3179, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %3181 = bitcast <16 x i16> %3180 to <4 x i64>
  %3182 = and <4 x i64> %3181, <i64 8725857424048159, i64 8725857424048159, i64 8725857424048159, i64 8725857424048159>
  br label %3193

3183:                                             ; preds = %3164
  %3184 = getelementptr inbounds i8, i8* %3168, i64 1
  %3185 = bitcast i8* %3184 to <16 x i8>*
  %3186 = load <16 x i8>, <16 x i8>* %3185, align 1
  %3187 = trunc i32 %3112 to i16
  %3188 = insertelement <16 x i16> undef, i16 %3187, i32 0
  %3189 = and <16 x i16> %3188, <i16 63, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef>
  %3190 = lshr <16 x i16> %3189, <i16 1, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0>
  %3191 = shufflevector <16 x i16> %3190, <16 x i16> undef, <16 x i32> zeroinitializer
  %3192 = bitcast <16 x i16> %3191 to <4 x i64>
  br label %3193

3193:                                             ; preds = %3183, %3171
  %3194 = phi <4 x i64> [ %3182, %3171 ], [ %3192, %3183 ]
  %3195 = phi <2 x i64> [ %3174, %3171 ], [ %3170, %3183 ]
  %3196 = phi <16 x i8> [ %3175, %3171 ], [ %3186, %3183 ]
  %3197 = bitcast <2 x i64> %3195 to <16 x i8>
  %3198 = zext <16 x i8> %3197 to <16 x i16>
  %3199 = zext <16 x i8> %3196 to <16 x i16>
  %3200 = sub nsw <16 x i16> %3199, %3198
  %3201 = shl nuw nsw <16 x i16> %3198, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %3202 = or <16 x i16> %3201, <i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16>
  %3203 = bitcast <4 x i64> %3194 to <16 x i16>
  %3204 = mul <16 x i16> %3200, %3203
  %3205 = add <16 x i16> %3204, %3202
  %3206 = lshr <16 x i16> %3205, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %3207 = bitcast <16 x i16> %3206 to <4 x i64>
  %3208 = shufflevector <4 x i64> %3207, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %3209 = shufflevector <2 x i64> %3208, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %3210 = bitcast <4 x i64> %3209 to <16 x i16>
  %3211 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %3206, <16 x i16> %3210) #8
  %3212 = bitcast <32 x i8> %3211 to <4 x i64>
  %3213 = shufflevector <4 x i64> %3212, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %3214 = sext i32 %3166 to i64
  %3215 = getelementptr inbounds [33 x [32 x i8]], [33 x [32 x i8]]* bitcast (<{ [32 x i8], <{ i8, [31 x i8] }>, <{ i8, i8, [30 x i8] }>, <{ i8, i8, i8, [29 x i8] }>, <{ i8, i8, i8, i8, [28 x i8] }>, <{ i8, i8, i8, i8, i8, [27 x i8] }>, <{ i8, i8, i8, i8, i8, i8, [26 x i8] }>, <{ i8, i8, i8, i8, i8, i8, i8, [25 x i8] }>, <{ [8 x i8], [24 x i8] }>, <{ [9 x i8], [23 x i8] }>, <{ [10 x i8], [22 x i8] }>, <{ [11 x i8], [21 x i8] }>, <{ [12 x i8], [20 x i8] }>, <{ [13 x i8], [19 x i8] }>, <{ [14 x i8], [18 x i8] }>, <{ [15 x i8], [17 x i8] }>, <{ [16 x i8], [16 x i8] }>, <{ [17 x i8], [15 x i8] }>, <{ [18 x i8], [14 x i8] }>, <{ [19 x i8], [13 x i8] }>, <{ [20 x i8], [12 x i8] }>, <{ [21 x i8], [11 x i8] }>, <{ [22 x i8], [10 x i8] }>, <{ [23 x i8], [9 x i8] }>, <{ [24 x i8], [8 x i8] }>, [32 x i8], [32 x i8], [32 x i8], [32 x i8], [32 x i8], [32 x i8], [32 x i8], [32 x i8] }>* @BaseMask to [33 x [32 x i8]]*), i64 0, i64 %3214, i64 0
  %3216 = bitcast i8* %3215 to <16 x i8>*
  %3217 = load <16 x i8>, <16 x i8>* %3216, align 32
  %3218 = bitcast <2 x i64> %3213 to <16 x i8>
  %3219 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %3108, <16 x i8> %3218, <16 x i8> %3217) #8
  %3220 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %20, i64 0, i64 %3111
  %3221 = bitcast <2 x i64>* %3220 to <16 x i8>*
  store <16 x i8> %3219, <16 x i8>* %3221, align 16
  %3222 = add nsw i32 %3112, %8
  %3223 = add nuw nsw i64 %3111, 1
  %3224 = icmp eq i64 %3223, 16
  br i1 %3224, label %3225, label %3110

3225:                                             ; preds = %3193, %3134, %3137, %3117
  %3226 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %20, i64 0, i64 1
  %3227 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %20, i64 0, i64 2
  %3228 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %20, i64 0, i64 3
  %3229 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %20, i64 0, i64 4
  %3230 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %20, i64 0, i64 5
  %3231 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %20, i64 0, i64 6
  %3232 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %20, i64 0, i64 7
  %3233 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %20, i64 0, i64 8
  %3234 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %20, i64 0, i64 9
  %3235 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %20, i64 0, i64 10
  %3236 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %20, i64 0, i64 11
  %3237 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %20, i64 0, i64 12
  %3238 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %20, i64 0, i64 13
  %3239 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %20, i64 0, i64 14
  %3240 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %20, i64 0, i64 15
  %3241 = bitcast [16 x <2 x i64>]* %20 to <16 x i8>*
  %3242 = load <16 x i8>, <16 x i8>* %3241, align 16
  %3243 = bitcast <2 x i64>* %3226 to <16 x i8>*
  %3244 = load <16 x i8>, <16 x i8>* %3243, align 16
  %3245 = shufflevector <16 x i8> %3242, <16 x i8> %3244, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %3246 = bitcast <2 x i64>* %3227 to <16 x i8>*
  %3247 = load <16 x i8>, <16 x i8>* %3246, align 16
  %3248 = bitcast <2 x i64>* %3228 to <16 x i8>*
  %3249 = load <16 x i8>, <16 x i8>* %3248, align 16
  %3250 = shufflevector <16 x i8> %3247, <16 x i8> %3249, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %3251 = bitcast <2 x i64>* %3229 to <16 x i8>*
  %3252 = load <16 x i8>, <16 x i8>* %3251, align 16
  %3253 = bitcast <2 x i64>* %3230 to <16 x i8>*
  %3254 = load <16 x i8>, <16 x i8>* %3253, align 16
  %3255 = shufflevector <16 x i8> %3252, <16 x i8> %3254, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %3256 = bitcast <2 x i64>* %3231 to <16 x i8>*
  %3257 = load <16 x i8>, <16 x i8>* %3256, align 16
  %3258 = bitcast <2 x i64>* %3232 to <16 x i8>*
  %3259 = load <16 x i8>, <16 x i8>* %3258, align 16
  %3260 = shufflevector <16 x i8> %3257, <16 x i8> %3259, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %3261 = bitcast <2 x i64>* %3233 to <16 x i8>*
  %3262 = load <16 x i8>, <16 x i8>* %3261, align 16
  %3263 = bitcast <2 x i64>* %3234 to <16 x i8>*
  %3264 = load <16 x i8>, <16 x i8>* %3263, align 16
  %3265 = shufflevector <16 x i8> %3262, <16 x i8> %3264, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %3266 = bitcast <2 x i64>* %3235 to <16 x i8>*
  %3267 = load <16 x i8>, <16 x i8>* %3266, align 16
  %3268 = bitcast <2 x i64>* %3236 to <16 x i8>*
  %3269 = load <16 x i8>, <16 x i8>* %3268, align 16
  %3270 = shufflevector <16 x i8> %3267, <16 x i8> %3269, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %3271 = bitcast <2 x i64>* %3237 to <16 x i8>*
  %3272 = load <16 x i8>, <16 x i8>* %3271, align 16
  %3273 = bitcast <2 x i64>* %3238 to <16 x i8>*
  %3274 = load <16 x i8>, <16 x i8>* %3273, align 16
  %3275 = shufflevector <16 x i8> %3272, <16 x i8> %3274, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %3276 = bitcast <2 x i64>* %3239 to <16 x i8>*
  %3277 = load <16 x i8>, <16 x i8>* %3276, align 16
  %3278 = bitcast <2 x i64>* %3240 to <16 x i8>*
  %3279 = load <16 x i8>, <16 x i8>* %3278, align 16
  %3280 = shufflevector <16 x i8> %3277, <16 x i8> %3279, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %3281 = bitcast <16 x i8> %3245 to <8 x i16>
  %3282 = bitcast <16 x i8> %3250 to <8 x i16>
  %3283 = shufflevector <8 x i16> %3281, <8 x i16> %3282, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %3284 = bitcast <16 x i8> %3255 to <8 x i16>
  %3285 = bitcast <16 x i8> %3260 to <8 x i16>
  %3286 = shufflevector <8 x i16> %3284, <8 x i16> %3285, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %3287 = bitcast <16 x i8> %3265 to <8 x i16>
  %3288 = bitcast <16 x i8> %3270 to <8 x i16>
  %3289 = shufflevector <8 x i16> %3287, <8 x i16> %3288, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %3290 = bitcast <16 x i8> %3275 to <8 x i16>
  %3291 = bitcast <16 x i8> %3280 to <8 x i16>
  %3292 = shufflevector <8 x i16> %3290, <8 x i16> %3291, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %3293 = bitcast <8 x i16> %3283 to <4 x i32>
  %3294 = bitcast <8 x i16> %3286 to <4 x i32>
  %3295 = shufflevector <4 x i32> %3293, <4 x i32> %3294, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %3296 = bitcast <4 x i32> %3295 to <2 x i64>
  %3297 = shufflevector <4 x i32> %3293, <4 x i32> %3294, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %3298 = bitcast <4 x i32> %3297 to <2 x i64>
  %3299 = bitcast <8 x i16> %3289 to <4 x i32>
  %3300 = bitcast <8 x i16> %3292 to <4 x i32>
  %3301 = shufflevector <4 x i32> %3299, <4 x i32> %3300, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %3302 = bitcast <4 x i32> %3301 to <2 x i64>
  %3303 = shufflevector <4 x i32> %3299, <4 x i32> %3300, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %3304 = bitcast <4 x i32> %3303 to <2 x i64>
  %3305 = shufflevector <2 x i64> %3296, <2 x i64> %3302, <2 x i32> <i32 0, i32 2>
  %3306 = shufflevector <2 x i64> %3296, <2 x i64> %3302, <2 x i32> <i32 1, i32 3>
  %3307 = shufflevector <2 x i64> %3298, <2 x i64> %3304, <2 x i32> <i32 0, i32 2>
  %3308 = shufflevector <2 x i64> %3298, <2 x i64> %3304, <2 x i32> <i32 1, i32 3>
  %3309 = shufflevector <8 x i16> %3281, <8 x i16> %3282, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %3310 = shufflevector <8 x i16> %3284, <8 x i16> %3285, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %3311 = shufflevector <8 x i16> %3287, <8 x i16> %3288, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %3312 = shufflevector <8 x i16> %3290, <8 x i16> %3291, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %3313 = bitcast <8 x i16> %3309 to <4 x i32>
  %3314 = bitcast <8 x i16> %3310 to <4 x i32>
  %3315 = shufflevector <4 x i32> %3313, <4 x i32> %3314, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %3316 = bitcast <4 x i32> %3315 to <2 x i64>
  %3317 = shufflevector <4 x i32> %3313, <4 x i32> %3314, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %3318 = bitcast <4 x i32> %3317 to <2 x i64>
  %3319 = bitcast <8 x i16> %3311 to <4 x i32>
  %3320 = bitcast <8 x i16> %3312 to <4 x i32>
  %3321 = shufflevector <4 x i32> %3319, <4 x i32> %3320, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %3322 = bitcast <4 x i32> %3321 to <2 x i64>
  %3323 = shufflevector <4 x i32> %3319, <4 x i32> %3320, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %3324 = bitcast <4 x i32> %3323 to <2 x i64>
  %3325 = shufflevector <2 x i64> %3316, <2 x i64> %3322, <2 x i32> <i32 0, i32 2>
  %3326 = shufflevector <2 x i64> %3316, <2 x i64> %3322, <2 x i32> <i32 1, i32 3>
  %3327 = shufflevector <2 x i64> %3318, <2 x i64> %3324, <2 x i32> <i32 0, i32 2>
  %3328 = shufflevector <2 x i64> %3318, <2 x i64> %3324, <2 x i32> <i32 1, i32 3>
  %3329 = bitcast i8* %0 to <2 x i64>*
  store <2 x i64> %3305, <2 x i64>* %3329, align 1
  %3330 = getelementptr inbounds i8, i8* %0, i64 %1
  %3331 = bitcast i8* %3330 to <2 x i64>*
  store <2 x i64> %3306, <2 x i64>* %3331, align 1
  %3332 = shl nsw i64 %1, 1
  %3333 = getelementptr inbounds i8, i8* %0, i64 %3332
  %3334 = bitcast i8* %3333 to <2 x i64>*
  store <2 x i64> %3307, <2 x i64>* %3334, align 1
  %3335 = mul nsw i64 %1, 3
  %3336 = getelementptr inbounds i8, i8* %0, i64 %3335
  %3337 = bitcast i8* %3336 to <2 x i64>*
  store <2 x i64> %3308, <2 x i64>* %3337, align 1
  %3338 = shl nsw i64 %1, 2
  %3339 = getelementptr inbounds i8, i8* %0, i64 %3338
  %3340 = bitcast i8* %3339 to <2 x i64>*
  store <2 x i64> %3325, <2 x i64>* %3340, align 1
  %3341 = mul nsw i64 %1, 5
  %3342 = getelementptr inbounds i8, i8* %0, i64 %3341
  %3343 = bitcast i8* %3342 to <2 x i64>*
  store <2 x i64> %3326, <2 x i64>* %3343, align 1
  %3344 = mul nsw i64 %1, 6
  %3345 = getelementptr inbounds i8, i8* %0, i64 %3344
  %3346 = bitcast i8* %3345 to <2 x i64>*
  store <2 x i64> %3327, <2 x i64>* %3346, align 1
  %3347 = mul nsw i64 %1, 7
  %3348 = getelementptr inbounds i8, i8* %0, i64 %3347
  %3349 = bitcast i8* %3348 to <2 x i64>*
  store <2 x i64> %3328, <2 x i64>* %3349, align 1
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %3101) #8
  br label %4740

3350:                                             ; preds = %2949
  %3351 = bitcast [32 x <2 x i64>]* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %3351) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %3351, i8 -86, i64 512, i1 false) #8
  %3352 = sub nsw i32 6, %6
  %3353 = shl i32 47, %6
  %3354 = sext i32 %3353 to i64
  %3355 = getelementptr inbounds i8, i8* %5, i64 %3354
  %3356 = load i8, i8* %3355, align 1
  %3357 = insertelement <16 x i8> undef, i8 %3356, i32 0
  %3358 = shufflevector <16 x i8> %3357, <16 x i8> undef, <16 x i32> zeroinitializer
  %3359 = icmp eq i32 %6, 0
  br label %3360

3360:                                             ; preds = %3443, %3350
  %3361 = phi i64 [ 0, %3350 ], [ %3473, %3443 ]
  %3362 = phi i32 [ %8, %3350 ], [ %3472, %3443 ]
  %3363 = ashr i32 %3362, %3352
  %3364 = sub nsw i32 %3353, %3363
  %3365 = ashr i32 %3364, %6
  %3366 = icmp slt i32 %3365, 1
  br i1 %3366, label %3367, label %3414

3367:                                             ; preds = %3360
  %3368 = trunc i64 %3361 to i32
  %3369 = icmp slt i32 %3368, 32
  br i1 %3369, label %3370, label %3475

3370:                                             ; preds = %3367
  %3371 = and i64 %3361, 4294967295
  %3372 = sub nsw i64 0, %3361
  %3373 = sub nsw i64 31, %3361
  %3374 = and i64 %3372, 7
  %3375 = icmp eq i64 %3374, 0
  br i1 %3375, label %3384, label %3376

3376:                                             ; preds = %3370, %3376
  %3377 = phi i64 [ %3381, %3376 ], [ %3371, %3370 ]
  %3378 = phi i64 [ %3382, %3376 ], [ %3374, %3370 ]
  %3379 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %19, i64 0, i64 %3377
  %3380 = bitcast <2 x i64>* %3379 to <16 x i8>*
  store <16 x i8> %3358, <16 x i8>* %3380, align 16
  %3381 = add nuw nsw i64 %3377, 1
  %3382 = add i64 %3378, -1
  %3383 = icmp eq i64 %3382, 0
  br i1 %3383, label %3384, label %3376, !llvm.loop !51

3384:                                             ; preds = %3376, %3370
  %3385 = phi i64 [ %3371, %3370 ], [ %3381, %3376 ]
  %3386 = icmp ult i64 %3373, 7
  br i1 %3386, label %3475, label %3387

3387:                                             ; preds = %3384, %3387
  %3388 = phi i64 [ %3412, %3387 ], [ %3385, %3384 ]
  %3389 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %19, i64 0, i64 %3388
  %3390 = bitcast <2 x i64>* %3389 to <16 x i8>*
  store <16 x i8> %3358, <16 x i8>* %3390, align 16
  %3391 = add nuw nsw i64 %3388, 1
  %3392 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %19, i64 0, i64 %3391
  %3393 = bitcast <2 x i64>* %3392 to <16 x i8>*
  store <16 x i8> %3358, <16 x i8>* %3393, align 16
  %3394 = add nuw nsw i64 %3388, 2
  %3395 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %19, i64 0, i64 %3394
  %3396 = bitcast <2 x i64>* %3395 to <16 x i8>*
  store <16 x i8> %3358, <16 x i8>* %3396, align 16
  %3397 = add nuw nsw i64 %3388, 3
  %3398 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %19, i64 0, i64 %3397
  %3399 = bitcast <2 x i64>* %3398 to <16 x i8>*
  store <16 x i8> %3358, <16 x i8>* %3399, align 16
  %3400 = add nuw nsw i64 %3388, 4
  %3401 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %19, i64 0, i64 %3400
  %3402 = bitcast <2 x i64>* %3401 to <16 x i8>*
  store <16 x i8> %3358, <16 x i8>* %3402, align 16
  %3403 = add nuw nsw i64 %3388, 5
  %3404 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %19, i64 0, i64 %3403
  %3405 = bitcast <2 x i64>* %3404 to <16 x i8>*
  store <16 x i8> %3358, <16 x i8>* %3405, align 16
  %3406 = add nuw nsw i64 %3388, 6
  %3407 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %19, i64 0, i64 %3406
  %3408 = bitcast <2 x i64>* %3407 to <16 x i8>*
  store <16 x i8> %3358, <16 x i8>* %3408, align 16
  %3409 = add nuw nsw i64 %3388, 7
  %3410 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %19, i64 0, i64 %3409
  %3411 = bitcast <2 x i64>* %3410 to <16 x i8>*
  store <16 x i8> %3358, <16 x i8>* %3411, align 16
  %3412 = add nuw nsw i64 %3388, 8
  %3413 = icmp eq i64 %3412, 32
  br i1 %3413, label %3475, label %3387

3414:                                             ; preds = %3360
  %3415 = icmp slt i32 %3365, 16
  %3416 = select i1 %3415, i32 %3365, i32 16
  %3417 = sext i32 %3363 to i64
  %3418 = getelementptr inbounds i8, i8* %5, i64 %3417
  %3419 = bitcast i8* %3418 to <2 x i64>*
  %3420 = load <2 x i64>, <2 x i64>* %3419, align 1
  br i1 %3359, label %3433, label %3421

3421:                                             ; preds = %3414
  %3422 = bitcast <2 x i64> %3420 to <16 x i8>
  %3423 = shufflevector <16 x i8> %3422, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %3424 = bitcast <16 x i8> %3423 to <2 x i64>
  %3425 = shufflevector <16 x i8> %3423, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %3426 = trunc i32 %3362 to i16
  %3427 = insertelement <16 x i16> undef, i16 %3426, i32 0
  %3428 = shufflevector <16 x i16> %3427, <16 x i16> undef, <16 x i32> zeroinitializer
  %3429 = tail call <16 x i16> @llvm.x86.avx2.pslli.w(<16 x i16> %3428, i32 %6) #8
  %3430 = lshr <16 x i16> %3429, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %3431 = bitcast <16 x i16> %3430 to <4 x i64>
  %3432 = and <4 x i64> %3431, <i64 8725857424048159, i64 8725857424048159, i64 8725857424048159, i64 8725857424048159>
  br label %3443

3433:                                             ; preds = %3414
  %3434 = getelementptr inbounds i8, i8* %3418, i64 1
  %3435 = bitcast i8* %3434 to <16 x i8>*
  %3436 = load <16 x i8>, <16 x i8>* %3435, align 1
  %3437 = trunc i32 %3362 to i16
  %3438 = insertelement <16 x i16> undef, i16 %3437, i32 0
  %3439 = and <16 x i16> %3438, <i16 63, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef>
  %3440 = lshr <16 x i16> %3439, <i16 1, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0>
  %3441 = shufflevector <16 x i16> %3440, <16 x i16> undef, <16 x i32> zeroinitializer
  %3442 = bitcast <16 x i16> %3441 to <4 x i64>
  br label %3443

3443:                                             ; preds = %3433, %3421
  %3444 = phi <4 x i64> [ %3432, %3421 ], [ %3442, %3433 ]
  %3445 = phi <2 x i64> [ %3424, %3421 ], [ %3420, %3433 ]
  %3446 = phi <16 x i8> [ %3425, %3421 ], [ %3436, %3433 ]
  %3447 = bitcast <2 x i64> %3445 to <16 x i8>
  %3448 = zext <16 x i8> %3447 to <16 x i16>
  %3449 = zext <16 x i8> %3446 to <16 x i16>
  %3450 = sub nsw <16 x i16> %3449, %3448
  %3451 = shl nuw nsw <16 x i16> %3448, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %3452 = or <16 x i16> %3451, <i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16>
  %3453 = bitcast <4 x i64> %3444 to <16 x i16>
  %3454 = mul <16 x i16> %3450, %3453
  %3455 = add <16 x i16> %3454, %3452
  %3456 = lshr <16 x i16> %3455, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %3457 = bitcast <16 x i16> %3456 to <4 x i64>
  %3458 = shufflevector <4 x i64> %3457, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %3459 = shufflevector <2 x i64> %3458, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %3460 = bitcast <4 x i64> %3459 to <16 x i16>
  %3461 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %3456, <16 x i16> %3460) #8
  %3462 = bitcast <32 x i8> %3461 to <4 x i64>
  %3463 = shufflevector <4 x i64> %3462, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %3464 = sext i32 %3416 to i64
  %3465 = getelementptr inbounds [33 x [32 x i8]], [33 x [32 x i8]]* bitcast (<{ [32 x i8], <{ i8, [31 x i8] }>, <{ i8, i8, [30 x i8] }>, <{ i8, i8, i8, [29 x i8] }>, <{ i8, i8, i8, i8, [28 x i8] }>, <{ i8, i8, i8, i8, i8, [27 x i8] }>, <{ i8, i8, i8, i8, i8, i8, [26 x i8] }>, <{ i8, i8, i8, i8, i8, i8, i8, [25 x i8] }>, <{ [8 x i8], [24 x i8] }>, <{ [9 x i8], [23 x i8] }>, <{ [10 x i8], [22 x i8] }>, <{ [11 x i8], [21 x i8] }>, <{ [12 x i8], [20 x i8] }>, <{ [13 x i8], [19 x i8] }>, <{ [14 x i8], [18 x i8] }>, <{ [15 x i8], [17 x i8] }>, <{ [16 x i8], [16 x i8] }>, <{ [17 x i8], [15 x i8] }>, <{ [18 x i8], [14 x i8] }>, <{ [19 x i8], [13 x i8] }>, <{ [20 x i8], [12 x i8] }>, <{ [21 x i8], [11 x i8] }>, <{ [22 x i8], [10 x i8] }>, <{ [23 x i8], [9 x i8] }>, <{ [24 x i8], [8 x i8] }>, [32 x i8], [32 x i8], [32 x i8], [32 x i8], [32 x i8], [32 x i8], [32 x i8], [32 x i8] }>* @BaseMask to [33 x [32 x i8]]*), i64 0, i64 %3464, i64 0
  %3466 = bitcast i8* %3465 to <16 x i8>*
  %3467 = load <16 x i8>, <16 x i8>* %3466, align 32
  %3468 = bitcast <2 x i64> %3463 to <16 x i8>
  %3469 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %3358, <16 x i8> %3468, <16 x i8> %3467) #8
  %3470 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %19, i64 0, i64 %3361
  %3471 = bitcast <2 x i64>* %3470 to <16 x i8>*
  store <16 x i8> %3469, <16 x i8>* %3471, align 16
  %3472 = add nsw i32 %3362, %8
  %3473 = add nuw nsw i64 %3361, 1
  %3474 = icmp eq i64 %3473, 32
  br i1 %3474, label %3475, label %3360

3475:                                             ; preds = %3443, %3384, %3387, %3367
  %3476 = shl nsw i64 %1, 1
  %3477 = mul nsw i64 %1, 3
  %3478 = shl nsw i64 %1, 2
  %3479 = mul nsw i64 %1, 5
  %3480 = mul nsw i64 %1, 6
  %3481 = mul nsw i64 %1, 7
  %3482 = shl nsw i64 %1, 3
  %3483 = mul nsw i64 %1, 9
  %3484 = mul nsw i64 %1, 10
  %3485 = mul nsw i64 %1, 11
  %3486 = mul nsw i64 %1, 12
  %3487 = mul nsw i64 %1, 13
  %3488 = mul nsw i64 %1, 14
  %3489 = mul nsw i64 %1, 15
  br label %3490

3490:                                             ; preds = %3490, %3475
  %3491 = phi i64 [ 0, %3475 ], [ %3684, %3490 ]
  %3492 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %19, i64 0, i64 %3491
  %3493 = bitcast <2 x i64>* %3492 to <16 x i8>*
  %3494 = load <16 x i8>, <16 x i8>* %3493, align 16
  %3495 = getelementptr inbounds <2 x i64>, <2 x i64>* %3492, i64 1
  %3496 = bitcast <2 x i64>* %3495 to <16 x i8>*
  %3497 = load <16 x i8>, <16 x i8>* %3496, align 16
  %3498 = shufflevector <16 x i8> %3494, <16 x i8> %3497, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %3499 = getelementptr inbounds <2 x i64>, <2 x i64>* %3492, i64 2
  %3500 = bitcast <2 x i64>* %3499 to <16 x i8>*
  %3501 = load <16 x i8>, <16 x i8>* %3500, align 16
  %3502 = getelementptr inbounds <2 x i64>, <2 x i64>* %3492, i64 3
  %3503 = bitcast <2 x i64>* %3502 to <16 x i8>*
  %3504 = load <16 x i8>, <16 x i8>* %3503, align 16
  %3505 = shufflevector <16 x i8> %3501, <16 x i8> %3504, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %3506 = getelementptr inbounds <2 x i64>, <2 x i64>* %3492, i64 4
  %3507 = bitcast <2 x i64>* %3506 to <16 x i8>*
  %3508 = load <16 x i8>, <16 x i8>* %3507, align 16
  %3509 = getelementptr inbounds <2 x i64>, <2 x i64>* %3492, i64 5
  %3510 = bitcast <2 x i64>* %3509 to <16 x i8>*
  %3511 = load <16 x i8>, <16 x i8>* %3510, align 16
  %3512 = shufflevector <16 x i8> %3508, <16 x i8> %3511, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %3513 = getelementptr inbounds <2 x i64>, <2 x i64>* %3492, i64 6
  %3514 = bitcast <2 x i64>* %3513 to <16 x i8>*
  %3515 = load <16 x i8>, <16 x i8>* %3514, align 16
  %3516 = getelementptr inbounds <2 x i64>, <2 x i64>* %3492, i64 7
  %3517 = bitcast <2 x i64>* %3516 to <16 x i8>*
  %3518 = load <16 x i8>, <16 x i8>* %3517, align 16
  %3519 = shufflevector <16 x i8> %3515, <16 x i8> %3518, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %3520 = getelementptr inbounds <2 x i64>, <2 x i64>* %3492, i64 8
  %3521 = bitcast <2 x i64>* %3520 to <16 x i8>*
  %3522 = load <16 x i8>, <16 x i8>* %3521, align 16
  %3523 = getelementptr inbounds <2 x i64>, <2 x i64>* %3492, i64 9
  %3524 = bitcast <2 x i64>* %3523 to <16 x i8>*
  %3525 = load <16 x i8>, <16 x i8>* %3524, align 16
  %3526 = shufflevector <16 x i8> %3522, <16 x i8> %3525, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %3527 = getelementptr inbounds <2 x i64>, <2 x i64>* %3492, i64 10
  %3528 = bitcast <2 x i64>* %3527 to <16 x i8>*
  %3529 = load <16 x i8>, <16 x i8>* %3528, align 16
  %3530 = getelementptr inbounds <2 x i64>, <2 x i64>* %3492, i64 11
  %3531 = bitcast <2 x i64>* %3530 to <16 x i8>*
  %3532 = load <16 x i8>, <16 x i8>* %3531, align 16
  %3533 = shufflevector <16 x i8> %3529, <16 x i8> %3532, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %3534 = getelementptr inbounds <2 x i64>, <2 x i64>* %3492, i64 12
  %3535 = bitcast <2 x i64>* %3534 to <16 x i8>*
  %3536 = load <16 x i8>, <16 x i8>* %3535, align 16
  %3537 = getelementptr inbounds <2 x i64>, <2 x i64>* %3492, i64 13
  %3538 = bitcast <2 x i64>* %3537 to <16 x i8>*
  %3539 = load <16 x i8>, <16 x i8>* %3538, align 16
  %3540 = shufflevector <16 x i8> %3536, <16 x i8> %3539, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %3541 = getelementptr inbounds <2 x i64>, <2 x i64>* %3492, i64 14
  %3542 = bitcast <2 x i64>* %3541 to <16 x i8>*
  %3543 = load <16 x i8>, <16 x i8>* %3542, align 16
  %3544 = getelementptr inbounds <2 x i64>, <2 x i64>* %3492, i64 15
  %3545 = bitcast <2 x i64>* %3544 to <16 x i8>*
  %3546 = load <16 x i8>, <16 x i8>* %3545, align 16
  %3547 = shufflevector <16 x i8> %3543, <16 x i8> %3546, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %3548 = bitcast <16 x i8> %3498 to <8 x i16>
  %3549 = bitcast <16 x i8> %3505 to <8 x i16>
  %3550 = shufflevector <8 x i16> %3548, <8 x i16> %3549, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %3551 = bitcast <16 x i8> %3512 to <8 x i16>
  %3552 = bitcast <16 x i8> %3519 to <8 x i16>
  %3553 = shufflevector <8 x i16> %3551, <8 x i16> %3552, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %3554 = bitcast <16 x i8> %3526 to <8 x i16>
  %3555 = bitcast <16 x i8> %3533 to <8 x i16>
  %3556 = shufflevector <8 x i16> %3554, <8 x i16> %3555, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %3557 = bitcast <16 x i8> %3540 to <8 x i16>
  %3558 = bitcast <16 x i8> %3547 to <8 x i16>
  %3559 = shufflevector <8 x i16> %3557, <8 x i16> %3558, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %3560 = bitcast <8 x i16> %3550 to <4 x i32>
  %3561 = bitcast <8 x i16> %3553 to <4 x i32>
  %3562 = shufflevector <4 x i32> %3560, <4 x i32> %3561, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %3563 = bitcast <4 x i32> %3562 to <2 x i64>
  %3564 = shufflevector <4 x i32> %3560, <4 x i32> %3561, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %3565 = bitcast <4 x i32> %3564 to <2 x i64>
  %3566 = bitcast <8 x i16> %3556 to <4 x i32>
  %3567 = bitcast <8 x i16> %3559 to <4 x i32>
  %3568 = shufflevector <4 x i32> %3566, <4 x i32> %3567, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %3569 = bitcast <4 x i32> %3568 to <2 x i64>
  %3570 = shufflevector <4 x i32> %3566, <4 x i32> %3567, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %3571 = bitcast <4 x i32> %3570 to <2 x i64>
  %3572 = shufflevector <2 x i64> %3563, <2 x i64> %3569, <2 x i32> <i32 0, i32 2>
  %3573 = shufflevector <2 x i64> %3563, <2 x i64> %3569, <2 x i32> <i32 1, i32 3>
  %3574 = shufflevector <2 x i64> %3565, <2 x i64> %3571, <2 x i32> <i32 0, i32 2>
  %3575 = shufflevector <2 x i64> %3565, <2 x i64> %3571, <2 x i32> <i32 1, i32 3>
  %3576 = shufflevector <8 x i16> %3548, <8 x i16> %3549, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %3577 = shufflevector <8 x i16> %3551, <8 x i16> %3552, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %3578 = shufflevector <8 x i16> %3554, <8 x i16> %3555, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %3579 = shufflevector <8 x i16> %3557, <8 x i16> %3558, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %3580 = bitcast <8 x i16> %3576 to <4 x i32>
  %3581 = bitcast <8 x i16> %3577 to <4 x i32>
  %3582 = shufflevector <4 x i32> %3580, <4 x i32> %3581, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %3583 = bitcast <4 x i32> %3582 to <2 x i64>
  %3584 = shufflevector <4 x i32> %3580, <4 x i32> %3581, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %3585 = bitcast <4 x i32> %3584 to <2 x i64>
  %3586 = bitcast <8 x i16> %3578 to <4 x i32>
  %3587 = bitcast <8 x i16> %3579 to <4 x i32>
  %3588 = shufflevector <4 x i32> %3586, <4 x i32> %3587, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %3589 = bitcast <4 x i32> %3588 to <2 x i64>
  %3590 = shufflevector <4 x i32> %3586, <4 x i32> %3587, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %3591 = bitcast <4 x i32> %3590 to <2 x i64>
  %3592 = shufflevector <2 x i64> %3583, <2 x i64> %3589, <2 x i32> <i32 0, i32 2>
  %3593 = shufflevector <2 x i64> %3583, <2 x i64> %3589, <2 x i32> <i32 1, i32 3>
  %3594 = shufflevector <2 x i64> %3585, <2 x i64> %3591, <2 x i32> <i32 0, i32 2>
  %3595 = shufflevector <2 x i64> %3585, <2 x i64> %3591, <2 x i32> <i32 1, i32 3>
  %3596 = shufflevector <16 x i8> %3494, <16 x i8> %3497, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %3597 = shufflevector <16 x i8> %3501, <16 x i8> %3504, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %3598 = shufflevector <16 x i8> %3508, <16 x i8> %3511, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %3599 = shufflevector <16 x i8> %3515, <16 x i8> %3518, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %3600 = shufflevector <16 x i8> %3522, <16 x i8> %3525, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %3601 = shufflevector <16 x i8> %3529, <16 x i8> %3532, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %3602 = shufflevector <16 x i8> %3536, <16 x i8> %3539, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %3603 = shufflevector <16 x i8> %3543, <16 x i8> %3546, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %3604 = bitcast <16 x i8> %3596 to <8 x i16>
  %3605 = bitcast <16 x i8> %3597 to <8 x i16>
  %3606 = shufflevector <8 x i16> %3604, <8 x i16> %3605, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %3607 = bitcast <16 x i8> %3598 to <8 x i16>
  %3608 = bitcast <16 x i8> %3599 to <8 x i16>
  %3609 = shufflevector <8 x i16> %3607, <8 x i16> %3608, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %3610 = bitcast <16 x i8> %3600 to <8 x i16>
  %3611 = bitcast <16 x i8> %3601 to <8 x i16>
  %3612 = shufflevector <8 x i16> %3610, <8 x i16> %3611, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %3613 = bitcast <16 x i8> %3602 to <8 x i16>
  %3614 = bitcast <16 x i8> %3603 to <8 x i16>
  %3615 = shufflevector <8 x i16> %3613, <8 x i16> %3614, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %3616 = bitcast <8 x i16> %3606 to <4 x i32>
  %3617 = bitcast <8 x i16> %3609 to <4 x i32>
  %3618 = shufflevector <4 x i32> %3616, <4 x i32> %3617, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %3619 = bitcast <4 x i32> %3618 to <2 x i64>
  %3620 = shufflevector <4 x i32> %3616, <4 x i32> %3617, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %3621 = bitcast <4 x i32> %3620 to <2 x i64>
  %3622 = bitcast <8 x i16> %3612 to <4 x i32>
  %3623 = bitcast <8 x i16> %3615 to <4 x i32>
  %3624 = shufflevector <4 x i32> %3622, <4 x i32> %3623, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %3625 = bitcast <4 x i32> %3624 to <2 x i64>
  %3626 = shufflevector <4 x i32> %3622, <4 x i32> %3623, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %3627 = bitcast <4 x i32> %3626 to <2 x i64>
  %3628 = shufflevector <2 x i64> %3619, <2 x i64> %3625, <2 x i32> <i32 0, i32 2>
  %3629 = shufflevector <2 x i64> %3619, <2 x i64> %3625, <2 x i32> <i32 1, i32 3>
  %3630 = shufflevector <2 x i64> %3621, <2 x i64> %3627, <2 x i32> <i32 0, i32 2>
  %3631 = shufflevector <2 x i64> %3621, <2 x i64> %3627, <2 x i32> <i32 1, i32 3>
  %3632 = shufflevector <8 x i16> %3604, <8 x i16> %3605, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %3633 = shufflevector <8 x i16> %3607, <8 x i16> %3608, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %3634 = shufflevector <8 x i16> %3610, <8 x i16> %3611, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %3635 = shufflevector <8 x i16> %3613, <8 x i16> %3614, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %3636 = bitcast <8 x i16> %3632 to <4 x i32>
  %3637 = bitcast <8 x i16> %3633 to <4 x i32>
  %3638 = shufflevector <4 x i32> %3636, <4 x i32> %3637, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %3639 = bitcast <4 x i32> %3638 to <2 x i64>
  %3640 = shufflevector <4 x i32> %3636, <4 x i32> %3637, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %3641 = bitcast <4 x i32> %3640 to <2 x i64>
  %3642 = bitcast <8 x i16> %3634 to <4 x i32>
  %3643 = bitcast <8 x i16> %3635 to <4 x i32>
  %3644 = shufflevector <4 x i32> %3642, <4 x i32> %3643, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %3645 = bitcast <4 x i32> %3644 to <2 x i64>
  %3646 = shufflevector <4 x i32> %3642, <4 x i32> %3643, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %3647 = bitcast <4 x i32> %3646 to <2 x i64>
  %3648 = shufflevector <2 x i64> %3639, <2 x i64> %3645, <2 x i32> <i32 0, i32 2>
  %3649 = shufflevector <2 x i64> %3639, <2 x i64> %3645, <2 x i32> <i32 1, i32 3>
  %3650 = shufflevector <2 x i64> %3641, <2 x i64> %3647, <2 x i32> <i32 0, i32 2>
  %3651 = shufflevector <2 x i64> %3641, <2 x i64> %3647, <2 x i32> <i32 1, i32 3>
  %3652 = getelementptr inbounds i8, i8* %0, i64 %3491
  %3653 = bitcast i8* %3652 to <2 x i64>*
  store <2 x i64> %3572, <2 x i64>* %3653, align 1
  %3654 = getelementptr inbounds i8, i8* %3652, i64 %1
  %3655 = bitcast i8* %3654 to <2 x i64>*
  store <2 x i64> %3573, <2 x i64>* %3655, align 1
  %3656 = getelementptr inbounds i8, i8* %3652, i64 %3476
  %3657 = bitcast i8* %3656 to <2 x i64>*
  store <2 x i64> %3574, <2 x i64>* %3657, align 1
  %3658 = getelementptr inbounds i8, i8* %3652, i64 %3477
  %3659 = bitcast i8* %3658 to <2 x i64>*
  store <2 x i64> %3575, <2 x i64>* %3659, align 1
  %3660 = getelementptr inbounds i8, i8* %3652, i64 %3478
  %3661 = bitcast i8* %3660 to <2 x i64>*
  store <2 x i64> %3592, <2 x i64>* %3661, align 1
  %3662 = getelementptr inbounds i8, i8* %3652, i64 %3479
  %3663 = bitcast i8* %3662 to <2 x i64>*
  store <2 x i64> %3593, <2 x i64>* %3663, align 1
  %3664 = getelementptr inbounds i8, i8* %3652, i64 %3480
  %3665 = bitcast i8* %3664 to <2 x i64>*
  store <2 x i64> %3594, <2 x i64>* %3665, align 1
  %3666 = getelementptr inbounds i8, i8* %3652, i64 %3481
  %3667 = bitcast i8* %3666 to <2 x i64>*
  store <2 x i64> %3595, <2 x i64>* %3667, align 1
  %3668 = getelementptr inbounds i8, i8* %3652, i64 %3482
  %3669 = bitcast i8* %3668 to <2 x i64>*
  store <2 x i64> %3628, <2 x i64>* %3669, align 1
  %3670 = getelementptr inbounds i8, i8* %3652, i64 %3483
  %3671 = bitcast i8* %3670 to <2 x i64>*
  store <2 x i64> %3629, <2 x i64>* %3671, align 1
  %3672 = getelementptr inbounds i8, i8* %3652, i64 %3484
  %3673 = bitcast i8* %3672 to <2 x i64>*
  store <2 x i64> %3630, <2 x i64>* %3673, align 1
  %3674 = getelementptr inbounds i8, i8* %3652, i64 %3485
  %3675 = bitcast i8* %3674 to <2 x i64>*
  store <2 x i64> %3631, <2 x i64>* %3675, align 1
  %3676 = getelementptr inbounds i8, i8* %3652, i64 %3486
  %3677 = bitcast i8* %3676 to <2 x i64>*
  store <2 x i64> %3648, <2 x i64>* %3677, align 1
  %3678 = getelementptr inbounds i8, i8* %3652, i64 %3487
  %3679 = bitcast i8* %3678 to <2 x i64>*
  store <2 x i64> %3649, <2 x i64>* %3679, align 1
  %3680 = getelementptr inbounds i8, i8* %3652, i64 %3488
  %3681 = bitcast i8* %3680 to <2 x i64>*
  store <2 x i64> %3650, <2 x i64>* %3681, align 1
  %3682 = getelementptr inbounds i8, i8* %3652, i64 %3489
  %3683 = bitcast i8* %3682 to <2 x i64>*
  store <2 x i64> %3651, <2 x i64>* %3683, align 1
  %3684 = add nuw nsw i64 %3491, 16
  %3685 = icmp ult i64 %3684, 32
  br i1 %3685, label %3490, label %3686

3686:                                             ; preds = %3490
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %3351) #8
  br label %4740

3687:                                             ; preds = %2949
  %3688 = bitcast [64 x <4 x i64>]* %17 to i8*
  %3689 = getelementptr inbounds [2048 x i8], [2048 x i8]* %18, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 2048, i8* nonnull %3689) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %3689, i8 -86, i64 2048, i1 false) #8
  call void @llvm.lifetime.start.p0i8(i64 2048, i8* nonnull %3688) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %3688, i8 -86, i64 2048, i1 false) #8
  %3690 = getelementptr inbounds i8, i8* %5, i64 95
  %3691 = load i8, i8* %3690, align 1
  %3692 = insertelement <32 x i8> undef, i8 %3691, i32 0
  %3693 = shufflevector <32 x i8> %3692, <32 x i8> undef, <32 x i32> zeroinitializer
  br label %3694

3694:                                             ; preds = %3798, %3687
  %3695 = phi i64 [ 0, %3687 ], [ %3810, %3798 ]
  %3696 = phi i32 [ %8, %3687 ], [ %3809, %3798 ]
  %3697 = ashr i32 %3696, 6
  %3698 = sub nsw i32 95, %3697
  %3699 = icmp sgt i32 %3696, 6079
  br i1 %3699, label %3700, label %3747

3700:                                             ; preds = %3694
  %3701 = trunc i64 %3695 to i32
  %3702 = icmp slt i32 %3701, 64
  br i1 %3702, label %3703, label %3812

3703:                                             ; preds = %3700
  %3704 = and i64 %3695, 4294967295
  %3705 = sub nsw i64 0, %3695
  %3706 = sub nsw i64 63, %3695
  %3707 = and i64 %3705, 7
  %3708 = icmp eq i64 %3707, 0
  br i1 %3708, label %3717, label %3709

3709:                                             ; preds = %3703, %3709
  %3710 = phi i64 [ %3714, %3709 ], [ %3704, %3703 ]
  %3711 = phi i64 [ %3715, %3709 ], [ %3707, %3703 ]
  %3712 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %17, i64 0, i64 %3710
  %3713 = bitcast <4 x i64>* %3712 to <32 x i8>*
  store <32 x i8> %3693, <32 x i8>* %3713, align 32
  %3714 = add nuw nsw i64 %3710, 1
  %3715 = add i64 %3711, -1
  %3716 = icmp eq i64 %3715, 0
  br i1 %3716, label %3717, label %3709, !llvm.loop !52

3717:                                             ; preds = %3709, %3703
  %3718 = phi i64 [ %3704, %3703 ], [ %3714, %3709 ]
  %3719 = icmp ult i64 %3706, 7
  br i1 %3719, label %3812, label %3720

3720:                                             ; preds = %3717, %3720
  %3721 = phi i64 [ %3745, %3720 ], [ %3718, %3717 ]
  %3722 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %17, i64 0, i64 %3721
  %3723 = bitcast <4 x i64>* %3722 to <32 x i8>*
  store <32 x i8> %3693, <32 x i8>* %3723, align 32
  %3724 = add nuw nsw i64 %3721, 1
  %3725 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %17, i64 0, i64 %3724
  %3726 = bitcast <4 x i64>* %3725 to <32 x i8>*
  store <32 x i8> %3693, <32 x i8>* %3726, align 32
  %3727 = add nuw nsw i64 %3721, 2
  %3728 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %17, i64 0, i64 %3727
  %3729 = bitcast <4 x i64>* %3728 to <32 x i8>*
  store <32 x i8> %3693, <32 x i8>* %3729, align 32
  %3730 = add nuw nsw i64 %3721, 3
  %3731 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %17, i64 0, i64 %3730
  %3732 = bitcast <4 x i64>* %3731 to <32 x i8>*
  store <32 x i8> %3693, <32 x i8>* %3732, align 32
  %3733 = add nuw nsw i64 %3721, 4
  %3734 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %17, i64 0, i64 %3733
  %3735 = bitcast <4 x i64>* %3734 to <32 x i8>*
  store <32 x i8> %3693, <32 x i8>* %3735, align 32
  %3736 = add nuw nsw i64 %3721, 5
  %3737 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %17, i64 0, i64 %3736
  %3738 = bitcast <4 x i64>* %3737 to <32 x i8>*
  store <32 x i8> %3693, <32 x i8>* %3738, align 32
  %3739 = add nuw nsw i64 %3721, 6
  %3740 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %17, i64 0, i64 %3739
  %3741 = bitcast <4 x i64>* %3740 to <32 x i8>*
  store <32 x i8> %3693, <32 x i8>* %3741, align 32
  %3742 = add nuw nsw i64 %3721, 7
  %3743 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %17, i64 0, i64 %3742
  %3744 = bitcast <4 x i64>* %3743 to <32 x i8>*
  store <32 x i8> %3693, <32 x i8>* %3744, align 32
  %3745 = add nuw nsw i64 %3721, 8
  %3746 = icmp eq i64 %3745, 64
  br i1 %3746, label %3812, label %3720

3747:                                             ; preds = %3694
  %3748 = icmp slt i32 %3698, 32
  %3749 = select i1 %3748, i32 %3698, i32 32
  %3750 = trunc i32 %3696 to i16
  %3751 = insertelement <16 x i16> undef, i16 %3750, i32 0
  %3752 = and <16 x i16> %3751, <i16 63, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef>
  %3753 = lshr <16 x i16> %3752, <i16 1, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0>
  %3754 = shufflevector <16 x i16> %3753, <16 x i16> undef, <16 x i32> zeroinitializer
  %3755 = sext i32 %3697 to i64
  %3756 = getelementptr inbounds i8, i8* %5, i64 %3755
  %3757 = sext i32 %3749 to i64
  %3758 = bitcast i8* %3756 to <16 x i8>*
  %3759 = load <16 x i8>, <16 x i8>* %3758, align 1
  %3760 = getelementptr inbounds i8, i8* %3756, i64 1
  %3761 = bitcast i8* %3760 to <16 x i8>*
  %3762 = load <16 x i8>, <16 x i8>* %3761, align 1
  %3763 = zext <16 x i8> %3759 to <16 x i16>
  %3764 = zext <16 x i8> %3762 to <16 x i16>
  %3765 = sub nsw <16 x i16> %3764, %3763
  %3766 = shl nuw nsw <16 x i16> %3763, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %3767 = or <16 x i16> %3766, <i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16>
  %3768 = mul <16 x i16> %3765, %3754
  %3769 = add <16 x i16> %3768, %3767
  %3770 = lshr <16 x i16> %3769, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %3771 = bitcast <16 x i16> %3770 to <4 x i64>
  %3772 = shufflevector <4 x i64> %3771, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %3773 = shufflevector <2 x i64> %3772, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %3774 = bitcast <4 x i64> %3773 to <16 x i16>
  %3775 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %3770, <16 x i16> %3774) #8
  %3776 = bitcast <32 x i8> %3775 to <4 x i64>
  %3777 = icmp sgt i32 %3749, 16
  br i1 %3777, label %3778, label %3798

3778:                                             ; preds = %3747
  %3779 = getelementptr inbounds i8, i8* %3756, i64 16
  %3780 = bitcast i8* %3779 to <16 x i8>*
  %3781 = load <16 x i8>, <16 x i8>* %3780, align 1
  %3782 = getelementptr inbounds i8, i8* %3779, i64 1
  %3783 = bitcast i8* %3782 to <16 x i8>*
  %3784 = load <16 x i8>, <16 x i8>* %3783, align 1
  %3785 = zext <16 x i8> %3781 to <16 x i16>
  %3786 = zext <16 x i8> %3784 to <16 x i16>
  %3787 = sub nsw <16 x i16> %3786, %3785
  %3788 = shl nuw nsw <16 x i16> %3785, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %3789 = or <16 x i16> %3788, <i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16>
  %3790 = mul <16 x i16> %3787, %3754
  %3791 = add <16 x i16> %3790, %3789
  %3792 = lshr <16 x i16> %3791, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %3793 = bitcast <16 x i16> %3792 to <4 x i64>
  %3794 = shufflevector <4 x i64> %3793, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %3795 = shufflevector <2 x i64> %3794, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %3796 = bitcast <4 x i64> %3795 to <16 x i16>
  %3797 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %3792, <16 x i16> %3796) #8
  br label %3798

3798:                                             ; preds = %3778, %3747
  %3799 = phi <32 x i8> [ %3797, %3778 ], [ %3693, %3747 ]
  %3800 = bitcast <32 x i8> %3799 to <4 x i64>
  %3801 = shufflevector <4 x i64> %3776, <4 x i64> %3800, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %3802 = getelementptr inbounds [33 x [32 x i8]], [33 x [32 x i8]]* bitcast (<{ [32 x i8], <{ i8, [31 x i8] }>, <{ i8, i8, [30 x i8] }>, <{ i8, i8, i8, [29 x i8] }>, <{ i8, i8, i8, i8, [28 x i8] }>, <{ i8, i8, i8, i8, i8, [27 x i8] }>, <{ i8, i8, i8, i8, i8, i8, [26 x i8] }>, <{ i8, i8, i8, i8, i8, i8, i8, [25 x i8] }>, <{ [8 x i8], [24 x i8] }>, <{ [9 x i8], [23 x i8] }>, <{ [10 x i8], [22 x i8] }>, <{ [11 x i8], [21 x i8] }>, <{ [12 x i8], [20 x i8] }>, <{ [13 x i8], [19 x i8] }>, <{ [14 x i8], [18 x i8] }>, <{ [15 x i8], [17 x i8] }>, <{ [16 x i8], [16 x i8] }>, <{ [17 x i8], [15 x i8] }>, <{ [18 x i8], [14 x i8] }>, <{ [19 x i8], [13 x i8] }>, <{ [20 x i8], [12 x i8] }>, <{ [21 x i8], [11 x i8] }>, <{ [22 x i8], [10 x i8] }>, <{ [23 x i8], [9 x i8] }>, <{ [24 x i8], [8 x i8] }>, [32 x i8], [32 x i8], [32 x i8], [32 x i8], [32 x i8], [32 x i8], [32 x i8], [32 x i8] }>* @BaseMask to [33 x [32 x i8]]*), i64 0, i64 %3757, i64 0
  %3803 = bitcast i8* %3802 to <32 x i8>*
  %3804 = load <32 x i8>, <32 x i8>* %3803, align 32
  %3805 = bitcast <4 x i64> %3801 to <32 x i8>
  %3806 = tail call <32 x i8> @llvm.x86.avx2.pblendvb(<32 x i8> %3693, <32 x i8> %3805, <32 x i8> %3804) #8
  %3807 = getelementptr inbounds [64 x <4 x i64>], [64 x <4 x i64>]* %17, i64 0, i64 %3695
  %3808 = bitcast <4 x i64>* %3807 to <32 x i8>*
  store <32 x i8> %3806, <32 x i8>* %3808, align 32
  %3809 = add nsw i32 %3696, %8
  %3810 = add nuw nsw i64 %3695, 1
  %3811 = icmp eq i64 %3810, 64
  br i1 %3811, label %3812, label %3694

3812:                                             ; preds = %3798, %3717, %3720, %3700
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %3689, i8* nonnull align 32 %3688, i64 2048, i1 false) #8
  call void @llvm.lifetime.end.p0i8(i64 2048, i8* nonnull %3688) #8
  call fastcc void @transpose(i8* nonnull %3689, i64 32, i8* %0, i64 %1, i32 64, i32 32) #8
  call void @llvm.lifetime.end.p0i8(i64 2048, i8* nonnull %3689) #8
  br label %4740

3813:                                             ; preds = %2946
  switch i32 %3, label %4740 [
    i32 4, label %3814
    i32 8, label %4032
    i32 16, label %4403
  ]

3814:                                             ; preds = %3813
  %3815 = bitcast [16 x <2 x i64>]* %20 to i8*
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %3815) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %3815, i8 -86, i64 256, i1 false) #8
  %3816 = sub nsw i32 6, %6
  %3817 = shl i32 19, %6
  %3818 = sext i32 %3817 to i64
  %3819 = getelementptr inbounds i8, i8* %5, i64 %3818
  %3820 = load i8, i8* %3819, align 1
  %3821 = insertelement <16 x i8> undef, i8 %3820, i32 0
  %3822 = shufflevector <16 x i8> %3821, <16 x i8> undef, <16 x i32> zeroinitializer
  %3823 = icmp eq i32 %6, 0
  br label %3824

3824:                                             ; preds = %3907, %3814
  %3825 = phi i64 [ 0, %3814 ], [ %3937, %3907 ]
  %3826 = phi i32 [ %8, %3814 ], [ %3936, %3907 ]
  %3827 = ashr i32 %3826, %3816
  %3828 = sub nsw i32 %3817, %3827
  %3829 = ashr i32 %3828, %6
  %3830 = icmp slt i32 %3829, 1
  br i1 %3830, label %3831, label %3878

3831:                                             ; preds = %3824
  %3832 = trunc i64 %3825 to i32
  %3833 = icmp slt i32 %3832, 16
  br i1 %3833, label %3834, label %3939

3834:                                             ; preds = %3831
  %3835 = and i64 %3825, 4294967295
  %3836 = sub nsw i64 0, %3825
  %3837 = sub nsw i64 15, %3825
  %3838 = and i64 %3836, 7
  %3839 = icmp eq i64 %3838, 0
  br i1 %3839, label %3848, label %3840

3840:                                             ; preds = %3834, %3840
  %3841 = phi i64 [ %3845, %3840 ], [ %3835, %3834 ]
  %3842 = phi i64 [ %3846, %3840 ], [ %3838, %3834 ]
  %3843 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %20, i64 0, i64 %3841
  %3844 = bitcast <2 x i64>* %3843 to <16 x i8>*
  store <16 x i8> %3822, <16 x i8>* %3844, align 16
  %3845 = add nuw nsw i64 %3841, 1
  %3846 = add i64 %3842, -1
  %3847 = icmp eq i64 %3846, 0
  br i1 %3847, label %3848, label %3840, !llvm.loop !53

3848:                                             ; preds = %3840, %3834
  %3849 = phi i64 [ %3835, %3834 ], [ %3845, %3840 ]
  %3850 = icmp ult i64 %3837, 7
  br i1 %3850, label %3939, label %3851

3851:                                             ; preds = %3848, %3851
  %3852 = phi i64 [ %3876, %3851 ], [ %3849, %3848 ]
  %3853 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %20, i64 0, i64 %3852
  %3854 = bitcast <2 x i64>* %3853 to <16 x i8>*
  store <16 x i8> %3822, <16 x i8>* %3854, align 16
  %3855 = add nuw nsw i64 %3852, 1
  %3856 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %20, i64 0, i64 %3855
  %3857 = bitcast <2 x i64>* %3856 to <16 x i8>*
  store <16 x i8> %3822, <16 x i8>* %3857, align 16
  %3858 = add nuw nsw i64 %3852, 2
  %3859 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %20, i64 0, i64 %3858
  %3860 = bitcast <2 x i64>* %3859 to <16 x i8>*
  store <16 x i8> %3822, <16 x i8>* %3860, align 16
  %3861 = add nuw nsw i64 %3852, 3
  %3862 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %20, i64 0, i64 %3861
  %3863 = bitcast <2 x i64>* %3862 to <16 x i8>*
  store <16 x i8> %3822, <16 x i8>* %3863, align 16
  %3864 = add nuw nsw i64 %3852, 4
  %3865 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %20, i64 0, i64 %3864
  %3866 = bitcast <2 x i64>* %3865 to <16 x i8>*
  store <16 x i8> %3822, <16 x i8>* %3866, align 16
  %3867 = add nuw nsw i64 %3852, 5
  %3868 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %20, i64 0, i64 %3867
  %3869 = bitcast <2 x i64>* %3868 to <16 x i8>*
  store <16 x i8> %3822, <16 x i8>* %3869, align 16
  %3870 = add nuw nsw i64 %3852, 6
  %3871 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %20, i64 0, i64 %3870
  %3872 = bitcast <2 x i64>* %3871 to <16 x i8>*
  store <16 x i8> %3822, <16 x i8>* %3872, align 16
  %3873 = add nuw nsw i64 %3852, 7
  %3874 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %20, i64 0, i64 %3873
  %3875 = bitcast <2 x i64>* %3874 to <16 x i8>*
  store <16 x i8> %3822, <16 x i8>* %3875, align 16
  %3876 = add nuw nsw i64 %3852, 8
  %3877 = icmp eq i64 %3876, 16
  br i1 %3877, label %3939, label %3851

3878:                                             ; preds = %3824
  %3879 = icmp slt i32 %3829, 4
  %3880 = select i1 %3879, i32 %3829, i32 4
  %3881 = sext i32 %3827 to i64
  %3882 = getelementptr inbounds i8, i8* %5, i64 %3881
  %3883 = bitcast i8* %3882 to <2 x i64>*
  %3884 = load <2 x i64>, <2 x i64>* %3883, align 1
  br i1 %3823, label %3897, label %3885

3885:                                             ; preds = %3878
  %3886 = bitcast <2 x i64> %3884 to <16 x i8>
  %3887 = shufflevector <16 x i8> %3886, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %3888 = bitcast <16 x i8> %3887 to <2 x i64>
  %3889 = shufflevector <16 x i8> %3887, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %3890 = trunc i32 %3826 to i16
  %3891 = insertelement <16 x i16> undef, i16 %3890, i32 0
  %3892 = shufflevector <16 x i16> %3891, <16 x i16> undef, <16 x i32> zeroinitializer
  %3893 = tail call <16 x i16> @llvm.x86.avx2.pslli.w(<16 x i16> %3892, i32 %6) #8
  %3894 = lshr <16 x i16> %3893, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %3895 = bitcast <16 x i16> %3894 to <4 x i64>
  %3896 = and <4 x i64> %3895, <i64 8725857424048159, i64 8725857424048159, i64 8725857424048159, i64 8725857424048159>
  br label %3907

3897:                                             ; preds = %3878
  %3898 = getelementptr inbounds i8, i8* %3882, i64 1
  %3899 = bitcast i8* %3898 to <16 x i8>*
  %3900 = load <16 x i8>, <16 x i8>* %3899, align 1
  %3901 = trunc i32 %3826 to i16
  %3902 = insertelement <16 x i16> undef, i16 %3901, i32 0
  %3903 = and <16 x i16> %3902, <i16 63, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef>
  %3904 = lshr <16 x i16> %3903, <i16 1, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0>
  %3905 = shufflevector <16 x i16> %3904, <16 x i16> undef, <16 x i32> zeroinitializer
  %3906 = bitcast <16 x i16> %3905 to <4 x i64>
  br label %3907

3907:                                             ; preds = %3897, %3885
  %3908 = phi <4 x i64> [ %3896, %3885 ], [ %3906, %3897 ]
  %3909 = phi <2 x i64> [ %3888, %3885 ], [ %3884, %3897 ]
  %3910 = phi <16 x i8> [ %3889, %3885 ], [ %3900, %3897 ]
  %3911 = bitcast <2 x i64> %3909 to <16 x i8>
  %3912 = zext <16 x i8> %3911 to <16 x i16>
  %3913 = zext <16 x i8> %3910 to <16 x i16>
  %3914 = sub nsw <16 x i16> %3913, %3912
  %3915 = shl nuw nsw <16 x i16> %3912, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %3916 = or <16 x i16> %3915, <i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16>
  %3917 = bitcast <4 x i64> %3908 to <16 x i16>
  %3918 = mul <16 x i16> %3914, %3917
  %3919 = add <16 x i16> %3918, %3916
  %3920 = lshr <16 x i16> %3919, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %3921 = bitcast <16 x i16> %3920 to <4 x i64>
  %3922 = shufflevector <4 x i64> %3921, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %3923 = shufflevector <2 x i64> %3922, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %3924 = bitcast <4 x i64> %3923 to <16 x i16>
  %3925 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %3920, <16 x i16> %3924) #8
  %3926 = bitcast <32 x i8> %3925 to <4 x i64>
  %3927 = shufflevector <4 x i64> %3926, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %3928 = sext i32 %3880 to i64
  %3929 = getelementptr inbounds [33 x [32 x i8]], [33 x [32 x i8]]* bitcast (<{ [32 x i8], <{ i8, [31 x i8] }>, <{ i8, i8, [30 x i8] }>, <{ i8, i8, i8, [29 x i8] }>, <{ i8, i8, i8, i8, [28 x i8] }>, <{ i8, i8, i8, i8, i8, [27 x i8] }>, <{ i8, i8, i8, i8, i8, i8, [26 x i8] }>, <{ i8, i8, i8, i8, i8, i8, i8, [25 x i8] }>, <{ [8 x i8], [24 x i8] }>, <{ [9 x i8], [23 x i8] }>, <{ [10 x i8], [22 x i8] }>, <{ [11 x i8], [21 x i8] }>, <{ [12 x i8], [20 x i8] }>, <{ [13 x i8], [19 x i8] }>, <{ [14 x i8], [18 x i8] }>, <{ [15 x i8], [17 x i8] }>, <{ [16 x i8], [16 x i8] }>, <{ [17 x i8], [15 x i8] }>, <{ [18 x i8], [14 x i8] }>, <{ [19 x i8], [13 x i8] }>, <{ [20 x i8], [12 x i8] }>, <{ [21 x i8], [11 x i8] }>, <{ [22 x i8], [10 x i8] }>, <{ [23 x i8], [9 x i8] }>, <{ [24 x i8], [8 x i8] }>, [32 x i8], [32 x i8], [32 x i8], [32 x i8], [32 x i8], [32 x i8], [32 x i8], [32 x i8] }>* @BaseMask to [33 x [32 x i8]]*), i64 0, i64 %3928, i64 0
  %3930 = bitcast i8* %3929 to <16 x i8>*
  %3931 = load <16 x i8>, <16 x i8>* %3930, align 32
  %3932 = bitcast <2 x i64> %3927 to <16 x i8>
  %3933 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %3822, <16 x i8> %3932, <16 x i8> %3931) #8
  %3934 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %20, i64 0, i64 %3825
  %3935 = bitcast <2 x i64>* %3934 to <16 x i8>*
  store <16 x i8> %3933, <16 x i8>* %3935, align 16
  %3936 = add nsw i32 %3826, %8
  %3937 = add nuw nsw i64 %3825, 1
  %3938 = icmp eq i64 %3937, 16
  br i1 %3938, label %3939, label %3824

3939:                                             ; preds = %3907, %3848, %3851, %3831
  %3940 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %20, i64 0, i64 1
  %3941 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %20, i64 0, i64 2
  %3942 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %20, i64 0, i64 3
  %3943 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %20, i64 0, i64 4
  %3944 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %20, i64 0, i64 5
  %3945 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %20, i64 0, i64 6
  %3946 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %20, i64 0, i64 7
  %3947 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %20, i64 0, i64 8
  %3948 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %20, i64 0, i64 9
  %3949 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %20, i64 0, i64 10
  %3950 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %20, i64 0, i64 11
  %3951 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %20, i64 0, i64 12
  %3952 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %20, i64 0, i64 13
  %3953 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %20, i64 0, i64 14
  %3954 = getelementptr inbounds [16 x <2 x i64>], [16 x <2 x i64>]* %20, i64 0, i64 15
  %3955 = bitcast [16 x <2 x i64>]* %20 to <16 x i8>*
  %3956 = load <16 x i8>, <16 x i8>* %3955, align 16
  %3957 = bitcast <2 x i64>* %3940 to <16 x i8>*
  %3958 = load <16 x i8>, <16 x i8>* %3957, align 16
  %3959 = shufflevector <16 x i8> %3956, <16 x i8> %3958, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3960 = bitcast <2 x i64>* %3941 to <16 x i8>*
  %3961 = load <16 x i8>, <16 x i8>* %3960, align 16
  %3962 = bitcast <2 x i64>* %3942 to <16 x i8>*
  %3963 = load <16 x i8>, <16 x i8>* %3962, align 16
  %3964 = shufflevector <16 x i8> %3961, <16 x i8> %3963, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3965 = bitcast <2 x i64>* %3943 to <16 x i8>*
  %3966 = load <16 x i8>, <16 x i8>* %3965, align 16
  %3967 = bitcast <2 x i64>* %3944 to <16 x i8>*
  %3968 = load <16 x i8>, <16 x i8>* %3967, align 16
  %3969 = shufflevector <16 x i8> %3966, <16 x i8> %3968, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3970 = bitcast <2 x i64>* %3945 to <16 x i8>*
  %3971 = load <16 x i8>, <16 x i8>* %3970, align 16
  %3972 = bitcast <2 x i64>* %3946 to <16 x i8>*
  %3973 = load <16 x i8>, <16 x i8>* %3972, align 16
  %3974 = shufflevector <16 x i8> %3971, <16 x i8> %3973, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3975 = bitcast <2 x i64>* %3947 to <16 x i8>*
  %3976 = load <16 x i8>, <16 x i8>* %3975, align 16
  %3977 = bitcast <2 x i64>* %3948 to <16 x i8>*
  %3978 = load <16 x i8>, <16 x i8>* %3977, align 16
  %3979 = shufflevector <16 x i8> %3976, <16 x i8> %3978, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3980 = bitcast <2 x i64>* %3949 to <16 x i8>*
  %3981 = load <16 x i8>, <16 x i8>* %3980, align 16
  %3982 = bitcast <2 x i64>* %3950 to <16 x i8>*
  %3983 = load <16 x i8>, <16 x i8>* %3982, align 16
  %3984 = shufflevector <16 x i8> %3981, <16 x i8> %3983, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3985 = bitcast <2 x i64>* %3951 to <16 x i8>*
  %3986 = load <16 x i8>, <16 x i8>* %3985, align 16
  %3987 = bitcast <2 x i64>* %3952 to <16 x i8>*
  %3988 = load <16 x i8>, <16 x i8>* %3987, align 16
  %3989 = shufflevector <16 x i8> %3986, <16 x i8> %3988, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3990 = bitcast <2 x i64>* %3953 to <16 x i8>*
  %3991 = load <16 x i8>, <16 x i8>* %3990, align 16
  %3992 = bitcast <2 x i64>* %3954 to <16 x i8>*
  %3993 = load <16 x i8>, <16 x i8>* %3992, align 16
  %3994 = shufflevector <16 x i8> %3991, <16 x i8> %3993, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3995 = bitcast <16 x i8> %3959 to <8 x i16>
  %3996 = bitcast <16 x i8> %3964 to <8 x i16>
  %3997 = shufflevector <8 x i16> %3995, <8 x i16> %3996, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %3998 = bitcast <16 x i8> %3969 to <8 x i16>
  %3999 = bitcast <16 x i8> %3974 to <8 x i16>
  %4000 = shufflevector <8 x i16> %3998, <8 x i16> %3999, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %4001 = bitcast <16 x i8> %3979 to <8 x i16>
  %4002 = bitcast <16 x i8> %3984 to <8 x i16>
  %4003 = shufflevector <8 x i16> %4001, <8 x i16> %4002, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %4004 = bitcast <16 x i8> %3989 to <8 x i16>
  %4005 = bitcast <16 x i8> %3994 to <8 x i16>
  %4006 = shufflevector <8 x i16> %4004, <8 x i16> %4005, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %4007 = bitcast <8 x i16> %3997 to <4 x i32>
  %4008 = bitcast <8 x i16> %4000 to <4 x i32>
  %4009 = shufflevector <4 x i32> %4007, <4 x i32> %4008, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %4010 = bitcast <4 x i32> %4009 to <2 x i64>
  %4011 = shufflevector <4 x i32> %4007, <4 x i32> %4008, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %4012 = bitcast <4 x i32> %4011 to <2 x i64>
  %4013 = bitcast <8 x i16> %4003 to <4 x i32>
  %4014 = bitcast <8 x i16> %4006 to <4 x i32>
  %4015 = shufflevector <4 x i32> %4013, <4 x i32> %4014, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %4016 = bitcast <4 x i32> %4015 to <2 x i64>
  %4017 = shufflevector <4 x i32> %4013, <4 x i32> %4014, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %4018 = bitcast <4 x i32> %4017 to <2 x i64>
  %4019 = shufflevector <2 x i64> %4010, <2 x i64> %4016, <2 x i32> <i32 0, i32 2>
  %4020 = shufflevector <2 x i64> %4010, <2 x i64> %4016, <2 x i32> <i32 1, i32 3>
  %4021 = shufflevector <2 x i64> %4012, <2 x i64> %4018, <2 x i32> <i32 0, i32 2>
  %4022 = shufflevector <2 x i64> %4012, <2 x i64> %4018, <2 x i32> <i32 1, i32 3>
  %4023 = bitcast i8* %0 to <2 x i64>*
  store <2 x i64> %4019, <2 x i64>* %4023, align 1
  %4024 = getelementptr inbounds i8, i8* %0, i64 %1
  %4025 = bitcast i8* %4024 to <2 x i64>*
  store <2 x i64> %4020, <2 x i64>* %4025, align 1
  %4026 = shl nsw i64 %1, 1
  %4027 = getelementptr inbounds i8, i8* %0, i64 %4026
  %4028 = bitcast i8* %4027 to <2 x i64>*
  store <2 x i64> %4021, <2 x i64>* %4028, align 1
  %4029 = mul nsw i64 %1, 3
  %4030 = getelementptr inbounds i8, i8* %0, i64 %4029
  %4031 = bitcast i8* %4030 to <2 x i64>*
  store <2 x i64> %4022, <2 x i64>* %4031, align 1
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %3815) #8
  br label %4740

4032:                                             ; preds = %3813
  %4033 = bitcast [32 x <2 x i64>]* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %4033) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %4033, i8 -86, i64 512, i1 false) #8
  %4034 = bitcast [16 x <2 x i64>]* %20 to i8*
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %4034) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %4034, i8 -86, i64 256, i1 false) #8
  %4035 = sub nsw i32 6, %6
  %4036 = shl i32 39, %6
  %4037 = sext i32 %4036 to i64
  %4038 = getelementptr inbounds i8, i8* %5, i64 %4037
  %4039 = load i8, i8* %4038, align 1
  %4040 = insertelement <16 x i8> undef, i8 %4039, i32 0
  %4041 = shufflevector <16 x i8> %4040, <16 x i8> undef, <16 x i32> zeroinitializer
  %4042 = icmp eq i32 %6, 0
  br label %4043

4043:                                             ; preds = %4126, %4032
  %4044 = phi i64 [ 0, %4032 ], [ %4156, %4126 ]
  %4045 = phi i32 [ %8, %4032 ], [ %4155, %4126 ]
  %4046 = ashr i32 %4045, %4035
  %4047 = sub nsw i32 %4036, %4046
  %4048 = ashr i32 %4047, %6
  %4049 = icmp slt i32 %4048, 1
  br i1 %4049, label %4050, label %4097

4050:                                             ; preds = %4043
  %4051 = trunc i64 %4044 to i32
  %4052 = icmp slt i32 %4051, 32
  br i1 %4052, label %4053, label %4158

4053:                                             ; preds = %4050
  %4054 = and i64 %4044, 4294967295
  %4055 = sub nsw i64 0, %4044
  %4056 = sub nsw i64 31, %4044
  %4057 = and i64 %4055, 7
  %4058 = icmp eq i64 %4057, 0
  br i1 %4058, label %4067, label %4059

4059:                                             ; preds = %4053, %4059
  %4060 = phi i64 [ %4064, %4059 ], [ %4054, %4053 ]
  %4061 = phi i64 [ %4065, %4059 ], [ %4057, %4053 ]
  %4062 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %19, i64 0, i64 %4060
  %4063 = bitcast <2 x i64>* %4062 to <16 x i8>*
  store <16 x i8> %4041, <16 x i8>* %4063, align 16
  %4064 = add nuw nsw i64 %4060, 1
  %4065 = add i64 %4061, -1
  %4066 = icmp eq i64 %4065, 0
  br i1 %4066, label %4067, label %4059, !llvm.loop !54

4067:                                             ; preds = %4059, %4053
  %4068 = phi i64 [ %4054, %4053 ], [ %4064, %4059 ]
  %4069 = icmp ult i64 %4056, 7
  br i1 %4069, label %4158, label %4070

4070:                                             ; preds = %4067, %4070
  %4071 = phi i64 [ %4095, %4070 ], [ %4068, %4067 ]
  %4072 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %19, i64 0, i64 %4071
  %4073 = bitcast <2 x i64>* %4072 to <16 x i8>*
  store <16 x i8> %4041, <16 x i8>* %4073, align 16
  %4074 = add nuw nsw i64 %4071, 1
  %4075 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %19, i64 0, i64 %4074
  %4076 = bitcast <2 x i64>* %4075 to <16 x i8>*
  store <16 x i8> %4041, <16 x i8>* %4076, align 16
  %4077 = add nuw nsw i64 %4071, 2
  %4078 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %19, i64 0, i64 %4077
  %4079 = bitcast <2 x i64>* %4078 to <16 x i8>*
  store <16 x i8> %4041, <16 x i8>* %4079, align 16
  %4080 = add nuw nsw i64 %4071, 3
  %4081 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %19, i64 0, i64 %4080
  %4082 = bitcast <2 x i64>* %4081 to <16 x i8>*
  store <16 x i8> %4041, <16 x i8>* %4082, align 16
  %4083 = add nuw nsw i64 %4071, 4
  %4084 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %19, i64 0, i64 %4083
  %4085 = bitcast <2 x i64>* %4084 to <16 x i8>*
  store <16 x i8> %4041, <16 x i8>* %4085, align 16
  %4086 = add nuw nsw i64 %4071, 5
  %4087 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %19, i64 0, i64 %4086
  %4088 = bitcast <2 x i64>* %4087 to <16 x i8>*
  store <16 x i8> %4041, <16 x i8>* %4088, align 16
  %4089 = add nuw nsw i64 %4071, 6
  %4090 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %19, i64 0, i64 %4089
  %4091 = bitcast <2 x i64>* %4090 to <16 x i8>*
  store <16 x i8> %4041, <16 x i8>* %4091, align 16
  %4092 = add nuw nsw i64 %4071, 7
  %4093 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %19, i64 0, i64 %4092
  %4094 = bitcast <2 x i64>* %4093 to <16 x i8>*
  store <16 x i8> %4041, <16 x i8>* %4094, align 16
  %4095 = add nuw nsw i64 %4071, 8
  %4096 = icmp eq i64 %4095, 32
  br i1 %4096, label %4158, label %4070

4097:                                             ; preds = %4043
  %4098 = icmp slt i32 %4048, 8
  %4099 = select i1 %4098, i32 %4048, i32 8
  %4100 = sext i32 %4046 to i64
  %4101 = getelementptr inbounds i8, i8* %5, i64 %4100
  %4102 = bitcast i8* %4101 to <2 x i64>*
  %4103 = load <2 x i64>, <2 x i64>* %4102, align 1
  br i1 %4042, label %4116, label %4104

4104:                                             ; preds = %4097
  %4105 = bitcast <2 x i64> %4103 to <16 x i8>
  %4106 = shufflevector <16 x i8> %4105, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %4107 = bitcast <16 x i8> %4106 to <2 x i64>
  %4108 = shufflevector <16 x i8> %4106, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %4109 = trunc i32 %4045 to i16
  %4110 = insertelement <16 x i16> undef, i16 %4109, i32 0
  %4111 = shufflevector <16 x i16> %4110, <16 x i16> undef, <16 x i32> zeroinitializer
  %4112 = tail call <16 x i16> @llvm.x86.avx2.pslli.w(<16 x i16> %4111, i32 %6) #8
  %4113 = lshr <16 x i16> %4112, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %4114 = bitcast <16 x i16> %4113 to <4 x i64>
  %4115 = and <4 x i64> %4114, <i64 8725857424048159, i64 8725857424048159, i64 8725857424048159, i64 8725857424048159>
  br label %4126

4116:                                             ; preds = %4097
  %4117 = getelementptr inbounds i8, i8* %4101, i64 1
  %4118 = bitcast i8* %4117 to <16 x i8>*
  %4119 = load <16 x i8>, <16 x i8>* %4118, align 1
  %4120 = trunc i32 %4045 to i16
  %4121 = insertelement <16 x i16> undef, i16 %4120, i32 0
  %4122 = and <16 x i16> %4121, <i16 63, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef>
  %4123 = lshr <16 x i16> %4122, <i16 1, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0>
  %4124 = shufflevector <16 x i16> %4123, <16 x i16> undef, <16 x i32> zeroinitializer
  %4125 = bitcast <16 x i16> %4124 to <4 x i64>
  br label %4126

4126:                                             ; preds = %4116, %4104
  %4127 = phi <4 x i64> [ %4115, %4104 ], [ %4125, %4116 ]
  %4128 = phi <2 x i64> [ %4107, %4104 ], [ %4103, %4116 ]
  %4129 = phi <16 x i8> [ %4108, %4104 ], [ %4119, %4116 ]
  %4130 = bitcast <2 x i64> %4128 to <16 x i8>
  %4131 = zext <16 x i8> %4130 to <16 x i16>
  %4132 = zext <16 x i8> %4129 to <16 x i16>
  %4133 = sub nsw <16 x i16> %4132, %4131
  %4134 = shl nuw nsw <16 x i16> %4131, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %4135 = or <16 x i16> %4134, <i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16>
  %4136 = bitcast <4 x i64> %4127 to <16 x i16>
  %4137 = mul <16 x i16> %4133, %4136
  %4138 = add <16 x i16> %4137, %4135
  %4139 = lshr <16 x i16> %4138, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %4140 = bitcast <16 x i16> %4139 to <4 x i64>
  %4141 = shufflevector <4 x i64> %4140, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %4142 = shufflevector <2 x i64> %4141, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %4143 = bitcast <4 x i64> %4142 to <16 x i16>
  %4144 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %4139, <16 x i16> %4143) #8
  %4145 = bitcast <32 x i8> %4144 to <4 x i64>
  %4146 = shufflevector <4 x i64> %4145, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %4147 = sext i32 %4099 to i64
  %4148 = getelementptr inbounds [33 x [32 x i8]], [33 x [32 x i8]]* bitcast (<{ [32 x i8], <{ i8, [31 x i8] }>, <{ i8, i8, [30 x i8] }>, <{ i8, i8, i8, [29 x i8] }>, <{ i8, i8, i8, i8, [28 x i8] }>, <{ i8, i8, i8, i8, i8, [27 x i8] }>, <{ i8, i8, i8, i8, i8, i8, [26 x i8] }>, <{ i8, i8, i8, i8, i8, i8, i8, [25 x i8] }>, <{ [8 x i8], [24 x i8] }>, <{ [9 x i8], [23 x i8] }>, <{ [10 x i8], [22 x i8] }>, <{ [11 x i8], [21 x i8] }>, <{ [12 x i8], [20 x i8] }>, <{ [13 x i8], [19 x i8] }>, <{ [14 x i8], [18 x i8] }>, <{ [15 x i8], [17 x i8] }>, <{ [16 x i8], [16 x i8] }>, <{ [17 x i8], [15 x i8] }>, <{ [18 x i8], [14 x i8] }>, <{ [19 x i8], [13 x i8] }>, <{ [20 x i8], [12 x i8] }>, <{ [21 x i8], [11 x i8] }>, <{ [22 x i8], [10 x i8] }>, <{ [23 x i8], [9 x i8] }>, <{ [24 x i8], [8 x i8] }>, [32 x i8], [32 x i8], [32 x i8], [32 x i8], [32 x i8], [32 x i8], [32 x i8], [32 x i8] }>* @BaseMask to [33 x [32 x i8]]*), i64 0, i64 %4147, i64 0
  %4149 = bitcast i8* %4148 to <16 x i8>*
  %4150 = load <16 x i8>, <16 x i8>* %4149, align 32
  %4151 = bitcast <2 x i64> %4146 to <16 x i8>
  %4152 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %4041, <16 x i8> %4151, <16 x i8> %4150) #8
  %4153 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %19, i64 0, i64 %4044
  %4154 = bitcast <2 x i64>* %4153 to <16 x i8>*
  store <16 x i8> %4152, <16 x i8>* %4154, align 16
  %4155 = add nsw i32 %4045, %8
  %4156 = add nuw nsw i64 %4044, 1
  %4157 = icmp eq i64 %4156, 32
  br i1 %4157, label %4158, label %4043

4158:                                             ; preds = %4126, %4067, %4070, %4050
  %4159 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %19, i64 0, i64 1
  %4160 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %19, i64 0, i64 2
  %4161 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %19, i64 0, i64 3
  %4162 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %19, i64 0, i64 4
  %4163 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %19, i64 0, i64 5
  %4164 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %19, i64 0, i64 6
  %4165 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %19, i64 0, i64 7
  %4166 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %19, i64 0, i64 8
  %4167 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %19, i64 0, i64 9
  %4168 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %19, i64 0, i64 10
  %4169 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %19, i64 0, i64 11
  %4170 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %19, i64 0, i64 12
  %4171 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %19, i64 0, i64 13
  %4172 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %19, i64 0, i64 14
  %4173 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %19, i64 0, i64 15
  %4174 = bitcast [32 x <2 x i64>]* %19 to <16 x i8>*
  %4175 = load <16 x i8>, <16 x i8>* %4174, align 16
  %4176 = bitcast <2 x i64>* %4159 to <16 x i8>*
  %4177 = load <16 x i8>, <16 x i8>* %4176, align 16
  %4178 = shufflevector <16 x i8> %4175, <16 x i8> %4177, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %4179 = bitcast <2 x i64>* %4160 to <16 x i8>*
  %4180 = load <16 x i8>, <16 x i8>* %4179, align 16
  %4181 = bitcast <2 x i64>* %4161 to <16 x i8>*
  %4182 = load <16 x i8>, <16 x i8>* %4181, align 16
  %4183 = shufflevector <16 x i8> %4180, <16 x i8> %4182, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %4184 = bitcast <2 x i64>* %4162 to <16 x i8>*
  %4185 = load <16 x i8>, <16 x i8>* %4184, align 16
  %4186 = bitcast <2 x i64>* %4163 to <16 x i8>*
  %4187 = load <16 x i8>, <16 x i8>* %4186, align 16
  %4188 = shufflevector <16 x i8> %4185, <16 x i8> %4187, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %4189 = bitcast <2 x i64>* %4164 to <16 x i8>*
  %4190 = load <16 x i8>, <16 x i8>* %4189, align 16
  %4191 = bitcast <2 x i64>* %4165 to <16 x i8>*
  %4192 = load <16 x i8>, <16 x i8>* %4191, align 16
  %4193 = shufflevector <16 x i8> %4190, <16 x i8> %4192, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %4194 = bitcast <2 x i64>* %4166 to <16 x i8>*
  %4195 = load <16 x i8>, <16 x i8>* %4194, align 16
  %4196 = bitcast <2 x i64>* %4167 to <16 x i8>*
  %4197 = load <16 x i8>, <16 x i8>* %4196, align 16
  %4198 = shufflevector <16 x i8> %4195, <16 x i8> %4197, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %4199 = bitcast <2 x i64>* %4168 to <16 x i8>*
  %4200 = load <16 x i8>, <16 x i8>* %4199, align 16
  %4201 = bitcast <2 x i64>* %4169 to <16 x i8>*
  %4202 = load <16 x i8>, <16 x i8>* %4201, align 16
  %4203 = shufflevector <16 x i8> %4200, <16 x i8> %4202, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %4204 = bitcast <2 x i64>* %4170 to <16 x i8>*
  %4205 = load <16 x i8>, <16 x i8>* %4204, align 16
  %4206 = bitcast <2 x i64>* %4171 to <16 x i8>*
  %4207 = load <16 x i8>, <16 x i8>* %4206, align 16
  %4208 = shufflevector <16 x i8> %4205, <16 x i8> %4207, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %4209 = bitcast <2 x i64>* %4172 to <16 x i8>*
  %4210 = load <16 x i8>, <16 x i8>* %4209, align 16
  %4211 = bitcast <2 x i64>* %4173 to <16 x i8>*
  %4212 = load <16 x i8>, <16 x i8>* %4211, align 16
  %4213 = shufflevector <16 x i8> %4210, <16 x i8> %4212, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %4214 = bitcast <16 x i8> %4178 to <8 x i16>
  %4215 = bitcast <16 x i8> %4183 to <8 x i16>
  %4216 = shufflevector <8 x i16> %4214, <8 x i16> %4215, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %4217 = bitcast <16 x i8> %4188 to <8 x i16>
  %4218 = bitcast <16 x i8> %4193 to <8 x i16>
  %4219 = shufflevector <8 x i16> %4217, <8 x i16> %4218, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %4220 = bitcast <16 x i8> %4198 to <8 x i16>
  %4221 = bitcast <16 x i8> %4203 to <8 x i16>
  %4222 = shufflevector <8 x i16> %4220, <8 x i16> %4221, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %4223 = bitcast <16 x i8> %4208 to <8 x i16>
  %4224 = bitcast <16 x i8> %4213 to <8 x i16>
  %4225 = shufflevector <8 x i16> %4223, <8 x i16> %4224, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %4226 = bitcast <8 x i16> %4216 to <4 x i32>
  %4227 = bitcast <8 x i16> %4219 to <4 x i32>
  %4228 = shufflevector <4 x i32> %4226, <4 x i32> %4227, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %4229 = bitcast <4 x i32> %4228 to <2 x i64>
  %4230 = shufflevector <4 x i32> %4226, <4 x i32> %4227, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %4231 = bitcast <4 x i32> %4230 to <2 x i64>
  %4232 = bitcast <8 x i16> %4222 to <4 x i32>
  %4233 = bitcast <8 x i16> %4225 to <4 x i32>
  %4234 = shufflevector <4 x i32> %4232, <4 x i32> %4233, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %4235 = bitcast <4 x i32> %4234 to <2 x i64>
  %4236 = shufflevector <4 x i32> %4232, <4 x i32> %4233, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %4237 = bitcast <4 x i32> %4236 to <2 x i64>
  %4238 = shufflevector <2 x i64> %4229, <2 x i64> %4235, <2 x i32> <i32 0, i32 2>
  %4239 = shufflevector <2 x i64> %4229, <2 x i64> %4235, <2 x i32> <i32 1, i32 3>
  %4240 = shufflevector <2 x i64> %4231, <2 x i64> %4237, <2 x i32> <i32 0, i32 2>
  %4241 = shufflevector <2 x i64> %4231, <2 x i64> %4237, <2 x i32> <i32 1, i32 3>
  %4242 = shufflevector <8 x i16> %4214, <8 x i16> %4215, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %4243 = shufflevector <8 x i16> %4217, <8 x i16> %4218, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %4244 = shufflevector <8 x i16> %4220, <8 x i16> %4221, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %4245 = shufflevector <8 x i16> %4223, <8 x i16> %4224, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %4246 = bitcast <8 x i16> %4242 to <4 x i32>
  %4247 = bitcast <8 x i16> %4243 to <4 x i32>
  %4248 = shufflevector <4 x i32> %4246, <4 x i32> %4247, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %4249 = bitcast <4 x i32> %4248 to <2 x i64>
  %4250 = shufflevector <4 x i32> %4246, <4 x i32> %4247, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %4251 = bitcast <4 x i32> %4250 to <2 x i64>
  %4252 = bitcast <8 x i16> %4244 to <4 x i32>
  %4253 = bitcast <8 x i16> %4245 to <4 x i32>
  %4254 = shufflevector <4 x i32> %4252, <4 x i32> %4253, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %4255 = bitcast <4 x i32> %4254 to <2 x i64>
  %4256 = shufflevector <4 x i32> %4252, <4 x i32> %4253, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %4257 = bitcast <4 x i32> %4256 to <2 x i64>
  %4258 = shufflevector <2 x i64> %4249, <2 x i64> %4255, <2 x i32> <i32 0, i32 2>
  %4259 = shufflevector <2 x i64> %4249, <2 x i64> %4255, <2 x i32> <i32 1, i32 3>
  %4260 = shufflevector <2 x i64> %4251, <2 x i64> %4257, <2 x i32> <i32 0, i32 2>
  %4261 = shufflevector <2 x i64> %4251, <2 x i64> %4257, <2 x i32> <i32 1, i32 3>
  %4262 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %19, i64 0, i64 16
  %4263 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %19, i64 0, i64 17
  %4264 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %19, i64 0, i64 18
  %4265 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %19, i64 0, i64 19
  %4266 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %19, i64 0, i64 20
  %4267 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %19, i64 0, i64 21
  %4268 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %19, i64 0, i64 22
  %4269 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %19, i64 0, i64 23
  %4270 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %19, i64 0, i64 24
  %4271 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %19, i64 0, i64 25
  %4272 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %19, i64 0, i64 26
  %4273 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %19, i64 0, i64 27
  %4274 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %19, i64 0, i64 28
  %4275 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %19, i64 0, i64 29
  %4276 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %19, i64 0, i64 30
  %4277 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %19, i64 0, i64 31
  %4278 = bitcast <2 x i64>* %4262 to <16 x i8>*
  %4279 = load <16 x i8>, <16 x i8>* %4278, align 16
  %4280 = bitcast <2 x i64>* %4263 to <16 x i8>*
  %4281 = load <16 x i8>, <16 x i8>* %4280, align 16
  %4282 = shufflevector <16 x i8> %4279, <16 x i8> %4281, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %4283 = bitcast <2 x i64>* %4264 to <16 x i8>*
  %4284 = load <16 x i8>, <16 x i8>* %4283, align 16
  %4285 = bitcast <2 x i64>* %4265 to <16 x i8>*
  %4286 = load <16 x i8>, <16 x i8>* %4285, align 16
  %4287 = shufflevector <16 x i8> %4284, <16 x i8> %4286, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %4288 = bitcast <2 x i64>* %4266 to <16 x i8>*
  %4289 = load <16 x i8>, <16 x i8>* %4288, align 16
  %4290 = bitcast <2 x i64>* %4267 to <16 x i8>*
  %4291 = load <16 x i8>, <16 x i8>* %4290, align 16
  %4292 = shufflevector <16 x i8> %4289, <16 x i8> %4291, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %4293 = bitcast <2 x i64>* %4268 to <16 x i8>*
  %4294 = load <16 x i8>, <16 x i8>* %4293, align 16
  %4295 = bitcast <2 x i64>* %4269 to <16 x i8>*
  %4296 = load <16 x i8>, <16 x i8>* %4295, align 16
  %4297 = shufflevector <16 x i8> %4294, <16 x i8> %4296, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %4298 = bitcast <2 x i64>* %4270 to <16 x i8>*
  %4299 = load <16 x i8>, <16 x i8>* %4298, align 16
  %4300 = bitcast <2 x i64>* %4271 to <16 x i8>*
  %4301 = load <16 x i8>, <16 x i8>* %4300, align 16
  %4302 = shufflevector <16 x i8> %4299, <16 x i8> %4301, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %4303 = bitcast <2 x i64>* %4272 to <16 x i8>*
  %4304 = load <16 x i8>, <16 x i8>* %4303, align 16
  %4305 = bitcast <2 x i64>* %4273 to <16 x i8>*
  %4306 = load <16 x i8>, <16 x i8>* %4305, align 16
  %4307 = shufflevector <16 x i8> %4304, <16 x i8> %4306, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %4308 = bitcast <2 x i64>* %4274 to <16 x i8>*
  %4309 = load <16 x i8>, <16 x i8>* %4308, align 16
  %4310 = bitcast <2 x i64>* %4275 to <16 x i8>*
  %4311 = load <16 x i8>, <16 x i8>* %4310, align 16
  %4312 = shufflevector <16 x i8> %4309, <16 x i8> %4311, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %4313 = bitcast <2 x i64>* %4276 to <16 x i8>*
  %4314 = load <16 x i8>, <16 x i8>* %4313, align 16
  %4315 = bitcast <2 x i64>* %4277 to <16 x i8>*
  %4316 = load <16 x i8>, <16 x i8>* %4315, align 16
  %4317 = shufflevector <16 x i8> %4314, <16 x i8> %4316, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %4318 = bitcast <16 x i8> %4282 to <8 x i16>
  %4319 = bitcast <16 x i8> %4287 to <8 x i16>
  %4320 = shufflevector <8 x i16> %4318, <8 x i16> %4319, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %4321 = bitcast <16 x i8> %4292 to <8 x i16>
  %4322 = bitcast <16 x i8> %4297 to <8 x i16>
  %4323 = shufflevector <8 x i16> %4321, <8 x i16> %4322, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %4324 = bitcast <16 x i8> %4302 to <8 x i16>
  %4325 = bitcast <16 x i8> %4307 to <8 x i16>
  %4326 = shufflevector <8 x i16> %4324, <8 x i16> %4325, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %4327 = bitcast <16 x i8> %4312 to <8 x i16>
  %4328 = bitcast <16 x i8> %4317 to <8 x i16>
  %4329 = shufflevector <8 x i16> %4327, <8 x i16> %4328, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %4330 = bitcast <8 x i16> %4320 to <4 x i32>
  %4331 = bitcast <8 x i16> %4323 to <4 x i32>
  %4332 = shufflevector <4 x i32> %4330, <4 x i32> %4331, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %4333 = bitcast <4 x i32> %4332 to <2 x i64>
  %4334 = shufflevector <4 x i32> %4330, <4 x i32> %4331, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %4335 = bitcast <4 x i32> %4334 to <2 x i64>
  %4336 = bitcast <8 x i16> %4326 to <4 x i32>
  %4337 = bitcast <8 x i16> %4329 to <4 x i32>
  %4338 = shufflevector <4 x i32> %4336, <4 x i32> %4337, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %4339 = bitcast <4 x i32> %4338 to <2 x i64>
  %4340 = shufflevector <4 x i32> %4336, <4 x i32> %4337, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %4341 = bitcast <4 x i32> %4340 to <2 x i64>
  %4342 = shufflevector <2 x i64> %4333, <2 x i64> %4339, <2 x i32> <i32 0, i32 2>
  %4343 = shufflevector <2 x i64> %4333, <2 x i64> %4339, <2 x i32> <i32 1, i32 3>
  %4344 = shufflevector <2 x i64> %4335, <2 x i64> %4341, <2 x i32> <i32 0, i32 2>
  %4345 = shufflevector <2 x i64> %4335, <2 x i64> %4341, <2 x i32> <i32 1, i32 3>
  %4346 = shufflevector <8 x i16> %4318, <8 x i16> %4319, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %4347 = shufflevector <8 x i16> %4321, <8 x i16> %4322, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %4348 = shufflevector <8 x i16> %4324, <8 x i16> %4325, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %4349 = shufflevector <8 x i16> %4327, <8 x i16> %4328, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %4350 = bitcast <8 x i16> %4346 to <4 x i32>
  %4351 = bitcast <8 x i16> %4347 to <4 x i32>
  %4352 = shufflevector <4 x i32> %4350, <4 x i32> %4351, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %4353 = bitcast <4 x i32> %4352 to <2 x i64>
  %4354 = shufflevector <4 x i32> %4350, <4 x i32> %4351, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %4355 = bitcast <4 x i32> %4354 to <2 x i64>
  %4356 = bitcast <8 x i16> %4348 to <4 x i32>
  %4357 = bitcast <8 x i16> %4349 to <4 x i32>
  %4358 = shufflevector <4 x i32> %4356, <4 x i32> %4357, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %4359 = bitcast <4 x i32> %4358 to <2 x i64>
  %4360 = shufflevector <4 x i32> %4356, <4 x i32> %4357, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %4361 = bitcast <4 x i32> %4360 to <2 x i64>
  %4362 = shufflevector <2 x i64> %4353, <2 x i64> %4359, <2 x i32> <i32 0, i32 2>
  %4363 = shufflevector <2 x i64> %4353, <2 x i64> %4359, <2 x i32> <i32 1, i32 3>
  %4364 = shufflevector <2 x i64> %4355, <2 x i64> %4361, <2 x i32> <i32 0, i32 2>
  %4365 = shufflevector <2 x i64> %4355, <2 x i64> %4361, <2 x i32> <i32 1, i32 3>
  %4366 = bitcast i8* %0 to <2 x i64>*
  store <2 x i64> %4238, <2 x i64>* %4366, align 1
  %4367 = getelementptr inbounds i8, i8* %0, i64 16
  %4368 = bitcast i8* %4367 to <2 x i64>*
  store <2 x i64> %4342, <2 x i64>* %4368, align 1
  %4369 = getelementptr inbounds i8, i8* %0, i64 %1
  %4370 = bitcast i8* %4369 to <2 x i64>*
  store <2 x i64> %4239, <2 x i64>* %4370, align 1
  %4371 = getelementptr inbounds i8, i8* %4369, i64 16
  %4372 = bitcast i8* %4371 to <2 x i64>*
  store <2 x i64> %4343, <2 x i64>* %4372, align 1
  %4373 = shl nsw i64 %1, 1
  %4374 = getelementptr inbounds i8, i8* %0, i64 %4373
  %4375 = bitcast i8* %4374 to <2 x i64>*
  store <2 x i64> %4240, <2 x i64>* %4375, align 1
  %4376 = getelementptr inbounds i8, i8* %4374, i64 16
  %4377 = bitcast i8* %4376 to <2 x i64>*
  store <2 x i64> %4344, <2 x i64>* %4377, align 1
  %4378 = mul nsw i64 %1, 3
  %4379 = getelementptr inbounds i8, i8* %0, i64 %4378
  %4380 = bitcast i8* %4379 to <2 x i64>*
  store <2 x i64> %4241, <2 x i64>* %4380, align 1
  %4381 = getelementptr inbounds i8, i8* %4379, i64 16
  %4382 = bitcast i8* %4381 to <2 x i64>*
  store <2 x i64> %4345, <2 x i64>* %4382, align 1
  %4383 = shl nsw i64 %1, 2
  %4384 = getelementptr inbounds i8, i8* %0, i64 %4383
  %4385 = bitcast i8* %4384 to <2 x i64>*
  store <2 x i64> %4258, <2 x i64>* %4385, align 1
  %4386 = getelementptr inbounds i8, i8* %4384, i64 16
  %4387 = bitcast i8* %4386 to <2 x i64>*
  store <2 x i64> %4362, <2 x i64>* %4387, align 1
  %4388 = mul nsw i64 %1, 5
  %4389 = getelementptr inbounds i8, i8* %0, i64 %4388
  %4390 = bitcast i8* %4389 to <2 x i64>*
  store <2 x i64> %4259, <2 x i64>* %4390, align 1
  %4391 = getelementptr inbounds i8, i8* %4389, i64 16
  %4392 = bitcast i8* %4391 to <2 x i64>*
  store <2 x i64> %4363, <2 x i64>* %4392, align 1
  %4393 = mul nsw i64 %1, 6
  %4394 = getelementptr inbounds i8, i8* %0, i64 %4393
  %4395 = bitcast i8* %4394 to <2 x i64>*
  store <2 x i64> %4260, <2 x i64>* %4395, align 1
  %4396 = getelementptr inbounds i8, i8* %4394, i64 16
  %4397 = bitcast i8* %4396 to <2 x i64>*
  store <2 x i64> %4364, <2 x i64>* %4397, align 1
  %4398 = mul nsw i64 %1, 7
  %4399 = getelementptr inbounds i8, i8* %0, i64 %4398
  %4400 = bitcast i8* %4399 to <2 x i64>*
  store <2 x i64> %4261, <2 x i64>* %4400, align 1
  %4401 = getelementptr inbounds i8, i8* %4399, i64 16
  %4402 = bitcast i8* %4401 to <2 x i64>*
  store <2 x i64> %4365, <2 x i64>* %4402, align 1
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %4034) #8
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %4033) #8
  br label %4740

4403:                                             ; preds = %3813
  %4404 = bitcast [64 x <2 x i64>]* %21 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %4404) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %4404, i8 -86, i64 1024, i1 false) #8
  %4405 = sub nsw i32 6, %6
  %4406 = shl i32 79, %6
  %4407 = sext i32 %4406 to i64
  %4408 = getelementptr inbounds i8, i8* %5, i64 %4407
  %4409 = load i8, i8* %4408, align 1
  %4410 = insertelement <16 x i8> undef, i8 %4409, i32 0
  %4411 = shufflevector <16 x i8> %4410, <16 x i8> undef, <16 x i32> zeroinitializer
  %4412 = icmp eq i32 %6, 0
  br label %4413

4413:                                             ; preds = %4496, %4403
  %4414 = phi i64 [ 0, %4403 ], [ %4526, %4496 ]
  %4415 = phi i32 [ %8, %4403 ], [ %4525, %4496 ]
  %4416 = ashr i32 %4415, %4405
  %4417 = sub nsw i32 %4406, %4416
  %4418 = ashr i32 %4417, %6
  %4419 = icmp slt i32 %4418, 1
  br i1 %4419, label %4420, label %4467

4420:                                             ; preds = %4413
  %4421 = trunc i64 %4414 to i32
  %4422 = icmp slt i32 %4421, 64
  br i1 %4422, label %4423, label %4528

4423:                                             ; preds = %4420
  %4424 = and i64 %4414, 4294967295
  %4425 = sub nsw i64 0, %4414
  %4426 = sub nsw i64 63, %4414
  %4427 = and i64 %4425, 7
  %4428 = icmp eq i64 %4427, 0
  br i1 %4428, label %4437, label %4429

4429:                                             ; preds = %4423, %4429
  %4430 = phi i64 [ %4434, %4429 ], [ %4424, %4423 ]
  %4431 = phi i64 [ %4435, %4429 ], [ %4427, %4423 ]
  %4432 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %21, i64 0, i64 %4430
  %4433 = bitcast <2 x i64>* %4432 to <16 x i8>*
  store <16 x i8> %4411, <16 x i8>* %4433, align 16
  %4434 = add nuw nsw i64 %4430, 1
  %4435 = add i64 %4431, -1
  %4436 = icmp eq i64 %4435, 0
  br i1 %4436, label %4437, label %4429, !llvm.loop !55

4437:                                             ; preds = %4429, %4423
  %4438 = phi i64 [ %4424, %4423 ], [ %4434, %4429 ]
  %4439 = icmp ult i64 %4426, 7
  br i1 %4439, label %4528, label %4440

4440:                                             ; preds = %4437, %4440
  %4441 = phi i64 [ %4465, %4440 ], [ %4438, %4437 ]
  %4442 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %21, i64 0, i64 %4441
  %4443 = bitcast <2 x i64>* %4442 to <16 x i8>*
  store <16 x i8> %4411, <16 x i8>* %4443, align 16
  %4444 = add nuw nsw i64 %4441, 1
  %4445 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %21, i64 0, i64 %4444
  %4446 = bitcast <2 x i64>* %4445 to <16 x i8>*
  store <16 x i8> %4411, <16 x i8>* %4446, align 16
  %4447 = add nuw nsw i64 %4441, 2
  %4448 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %21, i64 0, i64 %4447
  %4449 = bitcast <2 x i64>* %4448 to <16 x i8>*
  store <16 x i8> %4411, <16 x i8>* %4449, align 16
  %4450 = add nuw nsw i64 %4441, 3
  %4451 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %21, i64 0, i64 %4450
  %4452 = bitcast <2 x i64>* %4451 to <16 x i8>*
  store <16 x i8> %4411, <16 x i8>* %4452, align 16
  %4453 = add nuw nsw i64 %4441, 4
  %4454 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %21, i64 0, i64 %4453
  %4455 = bitcast <2 x i64>* %4454 to <16 x i8>*
  store <16 x i8> %4411, <16 x i8>* %4455, align 16
  %4456 = add nuw nsw i64 %4441, 5
  %4457 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %21, i64 0, i64 %4456
  %4458 = bitcast <2 x i64>* %4457 to <16 x i8>*
  store <16 x i8> %4411, <16 x i8>* %4458, align 16
  %4459 = add nuw nsw i64 %4441, 6
  %4460 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %21, i64 0, i64 %4459
  %4461 = bitcast <2 x i64>* %4460 to <16 x i8>*
  store <16 x i8> %4411, <16 x i8>* %4461, align 16
  %4462 = add nuw nsw i64 %4441, 7
  %4463 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %21, i64 0, i64 %4462
  %4464 = bitcast <2 x i64>* %4463 to <16 x i8>*
  store <16 x i8> %4411, <16 x i8>* %4464, align 16
  %4465 = add nuw nsw i64 %4441, 8
  %4466 = icmp eq i64 %4465, 64
  br i1 %4466, label %4528, label %4440

4467:                                             ; preds = %4413
  %4468 = icmp slt i32 %4418, 16
  %4469 = select i1 %4468, i32 %4418, i32 16
  %4470 = sext i32 %4416 to i64
  %4471 = getelementptr inbounds i8, i8* %5, i64 %4470
  %4472 = bitcast i8* %4471 to <2 x i64>*
  %4473 = load <2 x i64>, <2 x i64>* %4472, align 1
  br i1 %4412, label %4486, label %4474

4474:                                             ; preds = %4467
  %4475 = bitcast <2 x i64> %4473 to <16 x i8>
  %4476 = shufflevector <16 x i8> %4475, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %4477 = bitcast <16 x i8> %4476 to <2 x i64>
  %4478 = shufflevector <16 x i8> %4476, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %4479 = trunc i32 %4415 to i16
  %4480 = insertelement <16 x i16> undef, i16 %4479, i32 0
  %4481 = shufflevector <16 x i16> %4480, <16 x i16> undef, <16 x i32> zeroinitializer
  %4482 = tail call <16 x i16> @llvm.x86.avx2.pslli.w(<16 x i16> %4481, i32 %6) #8
  %4483 = lshr <16 x i16> %4482, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %4484 = bitcast <16 x i16> %4483 to <4 x i64>
  %4485 = and <4 x i64> %4484, <i64 8725857424048159, i64 8725857424048159, i64 8725857424048159, i64 8725857424048159>
  br label %4496

4486:                                             ; preds = %4467
  %4487 = getelementptr inbounds i8, i8* %4471, i64 1
  %4488 = bitcast i8* %4487 to <16 x i8>*
  %4489 = load <16 x i8>, <16 x i8>* %4488, align 1
  %4490 = trunc i32 %4415 to i16
  %4491 = insertelement <16 x i16> undef, i16 %4490, i32 0
  %4492 = and <16 x i16> %4491, <i16 63, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef>
  %4493 = lshr <16 x i16> %4492, <i16 1, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0>
  %4494 = shufflevector <16 x i16> %4493, <16 x i16> undef, <16 x i32> zeroinitializer
  %4495 = bitcast <16 x i16> %4494 to <4 x i64>
  br label %4496

4496:                                             ; preds = %4486, %4474
  %4497 = phi <4 x i64> [ %4485, %4474 ], [ %4495, %4486 ]
  %4498 = phi <2 x i64> [ %4477, %4474 ], [ %4473, %4486 ]
  %4499 = phi <16 x i8> [ %4478, %4474 ], [ %4489, %4486 ]
  %4500 = bitcast <2 x i64> %4498 to <16 x i8>
  %4501 = zext <16 x i8> %4500 to <16 x i16>
  %4502 = zext <16 x i8> %4499 to <16 x i16>
  %4503 = sub nsw <16 x i16> %4502, %4501
  %4504 = shl nuw nsw <16 x i16> %4501, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %4505 = or <16 x i16> %4504, <i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16>
  %4506 = bitcast <4 x i64> %4497 to <16 x i16>
  %4507 = mul <16 x i16> %4503, %4506
  %4508 = add <16 x i16> %4507, %4505
  %4509 = lshr <16 x i16> %4508, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %4510 = bitcast <16 x i16> %4509 to <4 x i64>
  %4511 = shufflevector <4 x i64> %4510, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %4512 = shufflevector <2 x i64> %4511, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %4513 = bitcast <4 x i64> %4512 to <16 x i16>
  %4514 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %4509, <16 x i16> %4513) #8
  %4515 = bitcast <32 x i8> %4514 to <4 x i64>
  %4516 = shufflevector <4 x i64> %4515, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %4517 = sext i32 %4469 to i64
  %4518 = getelementptr inbounds [33 x [32 x i8]], [33 x [32 x i8]]* bitcast (<{ [32 x i8], <{ i8, [31 x i8] }>, <{ i8, i8, [30 x i8] }>, <{ i8, i8, i8, [29 x i8] }>, <{ i8, i8, i8, i8, [28 x i8] }>, <{ i8, i8, i8, i8, i8, [27 x i8] }>, <{ i8, i8, i8, i8, i8, i8, [26 x i8] }>, <{ i8, i8, i8, i8, i8, i8, i8, [25 x i8] }>, <{ [8 x i8], [24 x i8] }>, <{ [9 x i8], [23 x i8] }>, <{ [10 x i8], [22 x i8] }>, <{ [11 x i8], [21 x i8] }>, <{ [12 x i8], [20 x i8] }>, <{ [13 x i8], [19 x i8] }>, <{ [14 x i8], [18 x i8] }>, <{ [15 x i8], [17 x i8] }>, <{ [16 x i8], [16 x i8] }>, <{ [17 x i8], [15 x i8] }>, <{ [18 x i8], [14 x i8] }>, <{ [19 x i8], [13 x i8] }>, <{ [20 x i8], [12 x i8] }>, <{ [21 x i8], [11 x i8] }>, <{ [22 x i8], [10 x i8] }>, <{ [23 x i8], [9 x i8] }>, <{ [24 x i8], [8 x i8] }>, [32 x i8], [32 x i8], [32 x i8], [32 x i8], [32 x i8], [32 x i8], [32 x i8], [32 x i8] }>* @BaseMask to [33 x [32 x i8]]*), i64 0, i64 %4517, i64 0
  %4519 = bitcast i8* %4518 to <16 x i8>*
  %4520 = load <16 x i8>, <16 x i8>* %4519, align 32
  %4521 = bitcast <2 x i64> %4516 to <16 x i8>
  %4522 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %4411, <16 x i8> %4521, <16 x i8> %4520) #8
  %4523 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %21, i64 0, i64 %4414
  %4524 = bitcast <2 x i64>* %4523 to <16 x i8>*
  store <16 x i8> %4522, <16 x i8>* %4524, align 16
  %4525 = add nsw i32 %4415, %8
  %4526 = add nuw nsw i64 %4414, 1
  %4527 = icmp eq i64 %4526, 64
  br i1 %4527, label %4528, label %4413

4528:                                             ; preds = %4496, %4437, %4440, %4420
  %4529 = shl nsw i64 %1, 1
  %4530 = mul nsw i64 %1, 3
  %4531 = shl nsw i64 %1, 2
  %4532 = mul nsw i64 %1, 5
  %4533 = mul nsw i64 %1, 6
  %4534 = mul nsw i64 %1, 7
  %4535 = shl nsw i64 %1, 3
  %4536 = mul nsw i64 %1, 9
  %4537 = mul nsw i64 %1, 10
  %4538 = mul nsw i64 %1, 11
  %4539 = mul nsw i64 %1, 12
  %4540 = mul nsw i64 %1, 13
  %4541 = mul nsw i64 %1, 14
  %4542 = mul nsw i64 %1, 15
  br label %4543

4543:                                             ; preds = %4543, %4528
  %4544 = phi i64 [ 0, %4528 ], [ %4737, %4543 ]
  %4545 = getelementptr inbounds [64 x <2 x i64>], [64 x <2 x i64>]* %21, i64 0, i64 %4544
  %4546 = bitcast <2 x i64>* %4545 to <16 x i8>*
  %4547 = load <16 x i8>, <16 x i8>* %4546, align 16
  %4548 = getelementptr inbounds <2 x i64>, <2 x i64>* %4545, i64 1
  %4549 = bitcast <2 x i64>* %4548 to <16 x i8>*
  %4550 = load <16 x i8>, <16 x i8>* %4549, align 16
  %4551 = shufflevector <16 x i8> %4547, <16 x i8> %4550, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %4552 = getelementptr inbounds <2 x i64>, <2 x i64>* %4545, i64 2
  %4553 = bitcast <2 x i64>* %4552 to <16 x i8>*
  %4554 = load <16 x i8>, <16 x i8>* %4553, align 16
  %4555 = getelementptr inbounds <2 x i64>, <2 x i64>* %4545, i64 3
  %4556 = bitcast <2 x i64>* %4555 to <16 x i8>*
  %4557 = load <16 x i8>, <16 x i8>* %4556, align 16
  %4558 = shufflevector <16 x i8> %4554, <16 x i8> %4557, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %4559 = getelementptr inbounds <2 x i64>, <2 x i64>* %4545, i64 4
  %4560 = bitcast <2 x i64>* %4559 to <16 x i8>*
  %4561 = load <16 x i8>, <16 x i8>* %4560, align 16
  %4562 = getelementptr inbounds <2 x i64>, <2 x i64>* %4545, i64 5
  %4563 = bitcast <2 x i64>* %4562 to <16 x i8>*
  %4564 = load <16 x i8>, <16 x i8>* %4563, align 16
  %4565 = shufflevector <16 x i8> %4561, <16 x i8> %4564, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %4566 = getelementptr inbounds <2 x i64>, <2 x i64>* %4545, i64 6
  %4567 = bitcast <2 x i64>* %4566 to <16 x i8>*
  %4568 = load <16 x i8>, <16 x i8>* %4567, align 16
  %4569 = getelementptr inbounds <2 x i64>, <2 x i64>* %4545, i64 7
  %4570 = bitcast <2 x i64>* %4569 to <16 x i8>*
  %4571 = load <16 x i8>, <16 x i8>* %4570, align 16
  %4572 = shufflevector <16 x i8> %4568, <16 x i8> %4571, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %4573 = getelementptr inbounds <2 x i64>, <2 x i64>* %4545, i64 8
  %4574 = bitcast <2 x i64>* %4573 to <16 x i8>*
  %4575 = load <16 x i8>, <16 x i8>* %4574, align 16
  %4576 = getelementptr inbounds <2 x i64>, <2 x i64>* %4545, i64 9
  %4577 = bitcast <2 x i64>* %4576 to <16 x i8>*
  %4578 = load <16 x i8>, <16 x i8>* %4577, align 16
  %4579 = shufflevector <16 x i8> %4575, <16 x i8> %4578, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %4580 = getelementptr inbounds <2 x i64>, <2 x i64>* %4545, i64 10
  %4581 = bitcast <2 x i64>* %4580 to <16 x i8>*
  %4582 = load <16 x i8>, <16 x i8>* %4581, align 16
  %4583 = getelementptr inbounds <2 x i64>, <2 x i64>* %4545, i64 11
  %4584 = bitcast <2 x i64>* %4583 to <16 x i8>*
  %4585 = load <16 x i8>, <16 x i8>* %4584, align 16
  %4586 = shufflevector <16 x i8> %4582, <16 x i8> %4585, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %4587 = getelementptr inbounds <2 x i64>, <2 x i64>* %4545, i64 12
  %4588 = bitcast <2 x i64>* %4587 to <16 x i8>*
  %4589 = load <16 x i8>, <16 x i8>* %4588, align 16
  %4590 = getelementptr inbounds <2 x i64>, <2 x i64>* %4545, i64 13
  %4591 = bitcast <2 x i64>* %4590 to <16 x i8>*
  %4592 = load <16 x i8>, <16 x i8>* %4591, align 16
  %4593 = shufflevector <16 x i8> %4589, <16 x i8> %4592, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %4594 = getelementptr inbounds <2 x i64>, <2 x i64>* %4545, i64 14
  %4595 = bitcast <2 x i64>* %4594 to <16 x i8>*
  %4596 = load <16 x i8>, <16 x i8>* %4595, align 16
  %4597 = getelementptr inbounds <2 x i64>, <2 x i64>* %4545, i64 15
  %4598 = bitcast <2 x i64>* %4597 to <16 x i8>*
  %4599 = load <16 x i8>, <16 x i8>* %4598, align 16
  %4600 = shufflevector <16 x i8> %4596, <16 x i8> %4599, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %4601 = bitcast <16 x i8> %4551 to <8 x i16>
  %4602 = bitcast <16 x i8> %4558 to <8 x i16>
  %4603 = shufflevector <8 x i16> %4601, <8 x i16> %4602, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %4604 = bitcast <16 x i8> %4565 to <8 x i16>
  %4605 = bitcast <16 x i8> %4572 to <8 x i16>
  %4606 = shufflevector <8 x i16> %4604, <8 x i16> %4605, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %4607 = bitcast <16 x i8> %4579 to <8 x i16>
  %4608 = bitcast <16 x i8> %4586 to <8 x i16>
  %4609 = shufflevector <8 x i16> %4607, <8 x i16> %4608, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %4610 = bitcast <16 x i8> %4593 to <8 x i16>
  %4611 = bitcast <16 x i8> %4600 to <8 x i16>
  %4612 = shufflevector <8 x i16> %4610, <8 x i16> %4611, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %4613 = bitcast <8 x i16> %4603 to <4 x i32>
  %4614 = bitcast <8 x i16> %4606 to <4 x i32>
  %4615 = shufflevector <4 x i32> %4613, <4 x i32> %4614, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %4616 = bitcast <4 x i32> %4615 to <2 x i64>
  %4617 = shufflevector <4 x i32> %4613, <4 x i32> %4614, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %4618 = bitcast <4 x i32> %4617 to <2 x i64>
  %4619 = bitcast <8 x i16> %4609 to <4 x i32>
  %4620 = bitcast <8 x i16> %4612 to <4 x i32>
  %4621 = shufflevector <4 x i32> %4619, <4 x i32> %4620, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %4622 = bitcast <4 x i32> %4621 to <2 x i64>
  %4623 = shufflevector <4 x i32> %4619, <4 x i32> %4620, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %4624 = bitcast <4 x i32> %4623 to <2 x i64>
  %4625 = shufflevector <2 x i64> %4616, <2 x i64> %4622, <2 x i32> <i32 0, i32 2>
  %4626 = shufflevector <2 x i64> %4616, <2 x i64> %4622, <2 x i32> <i32 1, i32 3>
  %4627 = shufflevector <2 x i64> %4618, <2 x i64> %4624, <2 x i32> <i32 0, i32 2>
  %4628 = shufflevector <2 x i64> %4618, <2 x i64> %4624, <2 x i32> <i32 1, i32 3>
  %4629 = shufflevector <8 x i16> %4601, <8 x i16> %4602, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %4630 = shufflevector <8 x i16> %4604, <8 x i16> %4605, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %4631 = shufflevector <8 x i16> %4607, <8 x i16> %4608, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %4632 = shufflevector <8 x i16> %4610, <8 x i16> %4611, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %4633 = bitcast <8 x i16> %4629 to <4 x i32>
  %4634 = bitcast <8 x i16> %4630 to <4 x i32>
  %4635 = shufflevector <4 x i32> %4633, <4 x i32> %4634, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %4636 = bitcast <4 x i32> %4635 to <2 x i64>
  %4637 = shufflevector <4 x i32> %4633, <4 x i32> %4634, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %4638 = bitcast <4 x i32> %4637 to <2 x i64>
  %4639 = bitcast <8 x i16> %4631 to <4 x i32>
  %4640 = bitcast <8 x i16> %4632 to <4 x i32>
  %4641 = shufflevector <4 x i32> %4639, <4 x i32> %4640, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %4642 = bitcast <4 x i32> %4641 to <2 x i64>
  %4643 = shufflevector <4 x i32> %4639, <4 x i32> %4640, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %4644 = bitcast <4 x i32> %4643 to <2 x i64>
  %4645 = shufflevector <2 x i64> %4636, <2 x i64> %4642, <2 x i32> <i32 0, i32 2>
  %4646 = shufflevector <2 x i64> %4636, <2 x i64> %4642, <2 x i32> <i32 1, i32 3>
  %4647 = shufflevector <2 x i64> %4638, <2 x i64> %4644, <2 x i32> <i32 0, i32 2>
  %4648 = shufflevector <2 x i64> %4638, <2 x i64> %4644, <2 x i32> <i32 1, i32 3>
  %4649 = shufflevector <16 x i8> %4547, <16 x i8> %4550, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %4650 = shufflevector <16 x i8> %4554, <16 x i8> %4557, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %4651 = shufflevector <16 x i8> %4561, <16 x i8> %4564, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %4652 = shufflevector <16 x i8> %4568, <16 x i8> %4571, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %4653 = shufflevector <16 x i8> %4575, <16 x i8> %4578, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %4654 = shufflevector <16 x i8> %4582, <16 x i8> %4585, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %4655 = shufflevector <16 x i8> %4589, <16 x i8> %4592, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %4656 = shufflevector <16 x i8> %4596, <16 x i8> %4599, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %4657 = bitcast <16 x i8> %4649 to <8 x i16>
  %4658 = bitcast <16 x i8> %4650 to <8 x i16>
  %4659 = shufflevector <8 x i16> %4657, <8 x i16> %4658, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %4660 = bitcast <16 x i8> %4651 to <8 x i16>
  %4661 = bitcast <16 x i8> %4652 to <8 x i16>
  %4662 = shufflevector <8 x i16> %4660, <8 x i16> %4661, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %4663 = bitcast <16 x i8> %4653 to <8 x i16>
  %4664 = bitcast <16 x i8> %4654 to <8 x i16>
  %4665 = shufflevector <8 x i16> %4663, <8 x i16> %4664, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %4666 = bitcast <16 x i8> %4655 to <8 x i16>
  %4667 = bitcast <16 x i8> %4656 to <8 x i16>
  %4668 = shufflevector <8 x i16> %4666, <8 x i16> %4667, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %4669 = bitcast <8 x i16> %4659 to <4 x i32>
  %4670 = bitcast <8 x i16> %4662 to <4 x i32>
  %4671 = shufflevector <4 x i32> %4669, <4 x i32> %4670, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %4672 = bitcast <4 x i32> %4671 to <2 x i64>
  %4673 = shufflevector <4 x i32> %4669, <4 x i32> %4670, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %4674 = bitcast <4 x i32> %4673 to <2 x i64>
  %4675 = bitcast <8 x i16> %4665 to <4 x i32>
  %4676 = bitcast <8 x i16> %4668 to <4 x i32>
  %4677 = shufflevector <4 x i32> %4675, <4 x i32> %4676, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %4678 = bitcast <4 x i32> %4677 to <2 x i64>
  %4679 = shufflevector <4 x i32> %4675, <4 x i32> %4676, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %4680 = bitcast <4 x i32> %4679 to <2 x i64>
  %4681 = shufflevector <2 x i64> %4672, <2 x i64> %4678, <2 x i32> <i32 0, i32 2>
  %4682 = shufflevector <2 x i64> %4672, <2 x i64> %4678, <2 x i32> <i32 1, i32 3>
  %4683 = shufflevector <2 x i64> %4674, <2 x i64> %4680, <2 x i32> <i32 0, i32 2>
  %4684 = shufflevector <2 x i64> %4674, <2 x i64> %4680, <2 x i32> <i32 1, i32 3>
  %4685 = shufflevector <8 x i16> %4657, <8 x i16> %4658, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %4686 = shufflevector <8 x i16> %4660, <8 x i16> %4661, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %4687 = shufflevector <8 x i16> %4663, <8 x i16> %4664, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %4688 = shufflevector <8 x i16> %4666, <8 x i16> %4667, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %4689 = bitcast <8 x i16> %4685 to <4 x i32>
  %4690 = bitcast <8 x i16> %4686 to <4 x i32>
  %4691 = shufflevector <4 x i32> %4689, <4 x i32> %4690, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %4692 = bitcast <4 x i32> %4691 to <2 x i64>
  %4693 = shufflevector <4 x i32> %4689, <4 x i32> %4690, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %4694 = bitcast <4 x i32> %4693 to <2 x i64>
  %4695 = bitcast <8 x i16> %4687 to <4 x i32>
  %4696 = bitcast <8 x i16> %4688 to <4 x i32>
  %4697 = shufflevector <4 x i32> %4695, <4 x i32> %4696, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %4698 = bitcast <4 x i32> %4697 to <2 x i64>
  %4699 = shufflevector <4 x i32> %4695, <4 x i32> %4696, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %4700 = bitcast <4 x i32> %4699 to <2 x i64>
  %4701 = shufflevector <2 x i64> %4692, <2 x i64> %4698, <2 x i32> <i32 0, i32 2>
  %4702 = shufflevector <2 x i64> %4692, <2 x i64> %4698, <2 x i32> <i32 1, i32 3>
  %4703 = shufflevector <2 x i64> %4694, <2 x i64> %4700, <2 x i32> <i32 0, i32 2>
  %4704 = shufflevector <2 x i64> %4694, <2 x i64> %4700, <2 x i32> <i32 1, i32 3>
  %4705 = getelementptr inbounds i8, i8* %0, i64 %4544
  %4706 = bitcast i8* %4705 to <2 x i64>*
  store <2 x i64> %4625, <2 x i64>* %4706, align 1
  %4707 = getelementptr inbounds i8, i8* %4705, i64 %1
  %4708 = bitcast i8* %4707 to <2 x i64>*
  store <2 x i64> %4626, <2 x i64>* %4708, align 1
  %4709 = getelementptr inbounds i8, i8* %4705, i64 %4529
  %4710 = bitcast i8* %4709 to <2 x i64>*
  store <2 x i64> %4627, <2 x i64>* %4710, align 1
  %4711 = getelementptr inbounds i8, i8* %4705, i64 %4530
  %4712 = bitcast i8* %4711 to <2 x i64>*
  store <2 x i64> %4628, <2 x i64>* %4712, align 1
  %4713 = getelementptr inbounds i8, i8* %4705, i64 %4531
  %4714 = bitcast i8* %4713 to <2 x i64>*
  store <2 x i64> %4645, <2 x i64>* %4714, align 1
  %4715 = getelementptr inbounds i8, i8* %4705, i64 %4532
  %4716 = bitcast i8* %4715 to <2 x i64>*
  store <2 x i64> %4646, <2 x i64>* %4716, align 1
  %4717 = getelementptr inbounds i8, i8* %4705, i64 %4533
  %4718 = bitcast i8* %4717 to <2 x i64>*
  store <2 x i64> %4647, <2 x i64>* %4718, align 1
  %4719 = getelementptr inbounds i8, i8* %4705, i64 %4534
  %4720 = bitcast i8* %4719 to <2 x i64>*
  store <2 x i64> %4648, <2 x i64>* %4720, align 1
  %4721 = getelementptr inbounds i8, i8* %4705, i64 %4535
  %4722 = bitcast i8* %4721 to <2 x i64>*
  store <2 x i64> %4681, <2 x i64>* %4722, align 1
  %4723 = getelementptr inbounds i8, i8* %4705, i64 %4536
  %4724 = bitcast i8* %4723 to <2 x i64>*
  store <2 x i64> %4682, <2 x i64>* %4724, align 1
  %4725 = getelementptr inbounds i8, i8* %4705, i64 %4537
  %4726 = bitcast i8* %4725 to <2 x i64>*
  store <2 x i64> %4683, <2 x i64>* %4726, align 1
  %4727 = getelementptr inbounds i8, i8* %4705, i64 %4538
  %4728 = bitcast i8* %4727 to <2 x i64>*
  store <2 x i64> %4684, <2 x i64>* %4728, align 1
  %4729 = getelementptr inbounds i8, i8* %4705, i64 %4539
  %4730 = bitcast i8* %4729 to <2 x i64>*
  store <2 x i64> %4701, <2 x i64>* %4730, align 1
  %4731 = getelementptr inbounds i8, i8* %4705, i64 %4540
  %4732 = bitcast i8* %4731 to <2 x i64>*
  store <2 x i64> %4702, <2 x i64>* %4732, align 1
  %4733 = getelementptr inbounds i8, i8* %4705, i64 %4541
  %4734 = bitcast i8* %4733 to <2 x i64>*
  store <2 x i64> %4703, <2 x i64>* %4734, align 1
  %4735 = getelementptr inbounds i8, i8* %4705, i64 %4542
  %4736 = bitcast i8* %4735 to <2 x i64>*
  store <2 x i64> %4704, <2 x i64>* %4736, align 1
  %4737 = add nuw nsw i64 %4544, 16
  %4738 = icmp ult i64 %4737, 64
  br i1 %4738, label %4543, label %4739

4739:                                             ; preds = %4543
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %4404) #8
  br label %4740

4740:                                             ; preds = %2336, %2556, %2945, %2247, %1448, %1598, %2087, %2246, %1356, %3939, %4158, %4739, %3813, %3041, %3225, %3686, %3812, %2949, %112, %237, %451, %1191, %1350, %24
  ret void

4741:                                             ; preds = %45
  %4742 = getelementptr inbounds [4 x <2 x i64>], [4 x <2 x i64>]* %22, i64 0, i64 %49
  %4743 = bitcast <2 x i64>* %4742 to <16 x i8>*
  store <16 x i8> %33, <16 x i8>* %4743, align 16
  %4744 = add nuw nsw i64 %46, 2
  %4745 = icmp eq i64 %4744, 4
  br i1 %4745, label %112, label %4746

4746:                                             ; preds = %4741
  %4747 = getelementptr inbounds [4 x <2 x i64>], [4 x <2 x i64>]* %22, i64 0, i64 %4744
  %4748 = bitcast <2 x i64>* %4747 to <16 x i8>*
  store <16 x i8> %33, <16 x i8>* %4748, align 16
  %4749 = add nuw nsw i64 %46, 3
  %4750 = icmp eq i64 %4749, 4
  br i1 %4750, label %112, label %4751

4751:                                             ; preds = %4746
  %4752 = getelementptr inbounds [4 x <2 x i64>], [4 x <2 x i64>]* %22, i64 0, i64 %4749
  %4753 = bitcast <2 x i64>* %4752 to <16 x i8>*
  store <16 x i8> %33, <16 x i8>* %4753, align 16
  br label %112

4754:                                             ; preds = %170
  %4755 = getelementptr inbounds [8 x <2 x i64>], [8 x <2 x i64>]* %16, i64 0, i64 %174
  %4756 = bitcast <2 x i64>* %4755 to <16 x i8>*
  store <16 x i8> %158, <16 x i8>* %4756, align 16
  %4757 = add nuw nsw i64 %171, 2
  %4758 = icmp eq i64 %4757, 8
  br i1 %4758, label %237, label %4759

4759:                                             ; preds = %4754
  %4760 = getelementptr inbounds [8 x <2 x i64>], [8 x <2 x i64>]* %16, i64 0, i64 %4757
  %4761 = bitcast <2 x i64>* %4760 to <16 x i8>*
  store <16 x i8> %158, <16 x i8>* %4761, align 16
  %4762 = add nuw nsw i64 %171, 3
  %4763 = icmp eq i64 %4762, 8
  br i1 %4763, label %237, label %4764

4764:                                             ; preds = %4759
  %4765 = getelementptr inbounds [8 x <2 x i64>], [8 x <2 x i64>]* %16, i64 0, i64 %4762
  %4766 = bitcast <2 x i64>* %4765 to <16 x i8>*
  store <16 x i8> %158, <16 x i8>* %4766, align 16
  %4767 = add nuw nsw i64 %171, 4
  %4768 = icmp eq i64 %4767, 8
  br i1 %4768, label %237, label %4769

4769:                                             ; preds = %4764
  %4770 = getelementptr inbounds [8 x <2 x i64>], [8 x <2 x i64>]* %16, i64 0, i64 %4767
  %4771 = bitcast <2 x i64>* %4770 to <16 x i8>*
  store <16 x i8> %158, <16 x i8>* %4771, align 16
  %4772 = add nuw nsw i64 %171, 5
  %4773 = icmp eq i64 %4772, 8
  br i1 %4773, label %237, label %4774

4774:                                             ; preds = %4769
  %4775 = getelementptr inbounds [8 x <2 x i64>], [8 x <2 x i64>]* %16, i64 0, i64 %4772
  %4776 = bitcast <2 x i64>* %4775 to <16 x i8>*
  store <16 x i8> %158, <16 x i8>* %4776, align 16
  %4777 = add nuw nsw i64 %171, 6
  %4778 = icmp eq i64 %4777, 8
  br i1 %4778, label %237, label %4779

4779:                                             ; preds = %4774
  %4780 = getelementptr inbounds [8 x <2 x i64>], [8 x <2 x i64>]* %16, i64 0, i64 %4777
  %4781 = bitcast <2 x i64>* %4780 to <16 x i8>*
  store <16 x i8> %158, <16 x i8>* %4781, align 16
  %4782 = add nuw nsw i64 %171, 7
  %4783 = icmp eq i64 %4782, 8
  br i1 %4783, label %237, label %4784

4784:                                             ; preds = %4779
  %4785 = getelementptr inbounds [8 x <2 x i64>], [8 x <2 x i64>]* %16, i64 0, i64 %4782
  %4786 = bitcast <2 x i64>* %4785 to <16 x i8>*
  store <16 x i8> %158, <16 x i8>* %4786, align 16
  br label %237

4787:                                             ; preds = %1381
  %4788 = getelementptr inbounds [4 x <2 x i64>], [4 x <2 x i64>]* %22, i64 0, i64 %1385
  %4789 = bitcast <2 x i64>* %4788 to <16 x i8>*
  store <16 x i8> %1369, <16 x i8>* %4789, align 16
  %4790 = add nuw nsw i64 %1382, 2
  %4791 = icmp eq i64 %4790, 4
  br i1 %4791, label %1448, label %4792

4792:                                             ; preds = %4787
  %4793 = getelementptr inbounds [4 x <2 x i64>], [4 x <2 x i64>]* %22, i64 0, i64 %4790
  %4794 = bitcast <2 x i64>* %4793 to <16 x i8>*
  store <16 x i8> %1369, <16 x i8>* %4794, align 16
  %4795 = add nuw nsw i64 %1382, 3
  %4796 = icmp eq i64 %4795, 4
  br i1 %4796, label %1448, label %4797

4797:                                             ; preds = %4792
  %4798 = getelementptr inbounds [4 x <2 x i64>], [4 x <2 x i64>]* %22, i64 0, i64 %4795
  %4799 = bitcast <2 x i64>* %4798 to <16 x i8>*
  store <16 x i8> %1369, <16 x i8>* %4799, align 16
  br label %1448

4800:                                             ; preds = %1531
  %4801 = getelementptr inbounds [8 x <2 x i64>], [8 x <2 x i64>]* %16, i64 0, i64 %1535
  %4802 = bitcast <2 x i64>* %4801 to <16 x i8>*
  store <16 x i8> %1519, <16 x i8>* %4802, align 16
  %4803 = add nuw nsw i64 %1532, 2
  %4804 = icmp eq i64 %4803, 8
  br i1 %4804, label %1598, label %4805

4805:                                             ; preds = %4800
  %4806 = getelementptr inbounds [8 x <2 x i64>], [8 x <2 x i64>]* %16, i64 0, i64 %4803
  %4807 = bitcast <2 x i64>* %4806 to <16 x i8>*
  store <16 x i8> %1519, <16 x i8>* %4807, align 16
  %4808 = add nuw nsw i64 %1532, 3
  %4809 = icmp eq i64 %4808, 8
  br i1 %4809, label %1598, label %4810

4810:                                             ; preds = %4805
  %4811 = getelementptr inbounds [8 x <2 x i64>], [8 x <2 x i64>]* %16, i64 0, i64 %4808
  %4812 = bitcast <2 x i64>* %4811 to <16 x i8>*
  store <16 x i8> %1519, <16 x i8>* %4812, align 16
  %4813 = add nuw nsw i64 %1532, 4
  %4814 = icmp eq i64 %4813, 8
  br i1 %4814, label %1598, label %4815

4815:                                             ; preds = %4810
  %4816 = getelementptr inbounds [8 x <2 x i64>], [8 x <2 x i64>]* %16, i64 0, i64 %4813
  %4817 = bitcast <2 x i64>* %4816 to <16 x i8>*
  store <16 x i8> %1519, <16 x i8>* %4817, align 16
  %4818 = add nuw nsw i64 %1532, 5
  %4819 = icmp eq i64 %4818, 8
  br i1 %4819, label %1598, label %4820

4820:                                             ; preds = %4815
  %4821 = getelementptr inbounds [8 x <2 x i64>], [8 x <2 x i64>]* %16, i64 0, i64 %4818
  %4822 = bitcast <2 x i64>* %4821 to <16 x i8>*
  store <16 x i8> %1519, <16 x i8>* %4822, align 16
  %4823 = add nuw nsw i64 %1532, 6
  %4824 = icmp eq i64 %4823, 8
  br i1 %4824, label %1598, label %4825

4825:                                             ; preds = %4820
  %4826 = getelementptr inbounds [8 x <2 x i64>], [8 x <2 x i64>]* %16, i64 0, i64 %4823
  %4827 = bitcast <2 x i64>* %4826 to <16 x i8>*
  store <16 x i8> %1519, <16 x i8>* %4827, align 16
  %4828 = add nuw nsw i64 %1532, 7
  %4829 = icmp eq i64 %4828, 8
  br i1 %4829, label %1598, label %4830

4830:                                             ; preds = %4825
  %4831 = getelementptr inbounds [8 x <2 x i64>], [8 x <2 x i64>]* %16, i64 0, i64 %4828
  %4832 = bitcast <2 x i64>* %4831 to <16 x i8>*
  store <16 x i8> %1519, <16 x i8>* %4832, align 16
  br label %1598

4833:                                             ; preds = %2269
  %4834 = getelementptr inbounds [4 x <2 x i64>], [4 x <2 x i64>]* %22, i64 0, i64 %2273
  %4835 = bitcast <2 x i64>* %4834 to <16 x i8>*
  store <16 x i8> %2257, <16 x i8>* %4835, align 16
  %4836 = add nuw nsw i64 %2270, 2
  %4837 = icmp eq i64 %4836, 4
  br i1 %4837, label %2336, label %4838

4838:                                             ; preds = %4833
  %4839 = getelementptr inbounds [4 x <2 x i64>], [4 x <2 x i64>]* %22, i64 0, i64 %4836
  %4840 = bitcast <2 x i64>* %4839 to <16 x i8>*
  store <16 x i8> %2257, <16 x i8>* %4840, align 16
  %4841 = add nuw nsw i64 %2270, 3
  %4842 = icmp eq i64 %4841, 4
  br i1 %4842, label %2336, label %4843

4843:                                             ; preds = %4838
  %4844 = getelementptr inbounds [4 x <2 x i64>], [4 x <2 x i64>]* %22, i64 0, i64 %4841
  %4845 = bitcast <2 x i64>* %4844 to <16 x i8>*
  store <16 x i8> %2257, <16 x i8>* %4845, align 16
  br label %2336

4846:                                             ; preds = %2485
  %4847 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %13, i64 0, i64 %2489
  %4848 = bitcast <4 x i64>* %4847 to <32 x i8>*
  store <32 x i8> %2475, <32 x i8>* %4848, align 32
  %4849 = add nuw nsw i64 %2486, 2
  %4850 = icmp eq i64 %4849, 8
  br i1 %4850, label %2556, label %4851

4851:                                             ; preds = %4846
  %4852 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %13, i64 0, i64 %4849
  %4853 = bitcast <4 x i64>* %4852 to <32 x i8>*
  store <32 x i8> %2475, <32 x i8>* %4853, align 32
  %4854 = add nuw nsw i64 %2486, 3
  %4855 = icmp eq i64 %4854, 8
  br i1 %4855, label %2556, label %4856

4856:                                             ; preds = %4851
  %4857 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %13, i64 0, i64 %4854
  %4858 = bitcast <4 x i64>* %4857 to <32 x i8>*
  store <32 x i8> %2475, <32 x i8>* %4858, align 32
  %4859 = add nuw nsw i64 %2486, 4
  %4860 = icmp eq i64 %4859, 8
  br i1 %4860, label %2556, label %4861

4861:                                             ; preds = %4856
  %4862 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %13, i64 0, i64 %4859
  %4863 = bitcast <4 x i64>* %4862 to <32 x i8>*
  store <32 x i8> %2475, <32 x i8>* %4863, align 32
  %4864 = add nuw nsw i64 %2486, 5
  %4865 = icmp eq i64 %4864, 8
  br i1 %4865, label %2556, label %4866

4866:                                             ; preds = %4861
  %4867 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %13, i64 0, i64 %4864
  %4868 = bitcast <4 x i64>* %4867 to <32 x i8>*
  store <32 x i8> %2475, <32 x i8>* %4868, align 32
  %4869 = add nuw nsw i64 %2486, 6
  %4870 = icmp eq i64 %4869, 8
  br i1 %4870, label %2556, label %4871

4871:                                             ; preds = %4866
  %4872 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %13, i64 0, i64 %4869
  %4873 = bitcast <4 x i64>* %4872 to <32 x i8>*
  store <32 x i8> %2475, <32 x i8>* %4873, align 32
  %4874 = add nuw nsw i64 %2486, 7
  %4875 = icmp eq i64 %4874, 8
  br i1 %4875, label %2556, label %4876

4876:                                             ; preds = %4871
  %4877 = getelementptr inbounds [16 x <4 x i64>], [16 x <4 x i64>]* %13, i64 0, i64 %4874
  %4878 = bitcast <4 x i64>* %4877 to <32 x i8>*
  store <32 x i8> %2475, <32 x i8>* %4878, align 32
  br label %2556

4879:                                             ; preds = %2974
  %4880 = getelementptr inbounds [8 x <2 x i64>], [8 x <2 x i64>]* %16, i64 0, i64 %2978
  %4881 = bitcast <2 x i64>* %4880 to <16 x i8>*
  store <16 x i8> %2962, <16 x i8>* %4881, align 16
  %4882 = add nuw nsw i64 %2975, 2
  %4883 = icmp eq i64 %4882, 8
  br i1 %4883, label %3041, label %4884

4884:                                             ; preds = %4879
  %4885 = getelementptr inbounds [8 x <2 x i64>], [8 x <2 x i64>]* %16, i64 0, i64 %4882
  %4886 = bitcast <2 x i64>* %4885 to <16 x i8>*
  store <16 x i8> %2962, <16 x i8>* %4886, align 16
  %4887 = add nuw nsw i64 %2975, 3
  %4888 = icmp eq i64 %4887, 8
  br i1 %4888, label %3041, label %4889

4889:                                             ; preds = %4884
  %4890 = getelementptr inbounds [8 x <2 x i64>], [8 x <2 x i64>]* %16, i64 0, i64 %4887
  %4891 = bitcast <2 x i64>* %4890 to <16 x i8>*
  store <16 x i8> %2962, <16 x i8>* %4891, align 16
  %4892 = add nuw nsw i64 %2975, 4
  %4893 = icmp eq i64 %4892, 8
  br i1 %4893, label %3041, label %4894

4894:                                             ; preds = %4889
  %4895 = getelementptr inbounds [8 x <2 x i64>], [8 x <2 x i64>]* %16, i64 0, i64 %4892
  %4896 = bitcast <2 x i64>* %4895 to <16 x i8>*
  store <16 x i8> %2962, <16 x i8>* %4896, align 16
  %4897 = add nuw nsw i64 %2975, 5
  %4898 = icmp eq i64 %4897, 8
  br i1 %4898, label %3041, label %4899

4899:                                             ; preds = %4894
  %4900 = getelementptr inbounds [8 x <2 x i64>], [8 x <2 x i64>]* %16, i64 0, i64 %4897
  %4901 = bitcast <2 x i64>* %4900 to <16 x i8>*
  store <16 x i8> %2962, <16 x i8>* %4901, align 16
  %4902 = add nuw nsw i64 %2975, 6
  %4903 = icmp eq i64 %4902, 8
  br i1 %4903, label %3041, label %4904

4904:                                             ; preds = %4899
  %4905 = getelementptr inbounds [8 x <2 x i64>], [8 x <2 x i64>]* %16, i64 0, i64 %4902
  %4906 = bitcast <2 x i64>* %4905 to <16 x i8>*
  store <16 x i8> %2962, <16 x i8>* %4906, align 16
  %4907 = add nuw nsw i64 %2975, 7
  %4908 = icmp eq i64 %4907, 8
  br i1 %4908, label %3041, label %4909

4909:                                             ; preds = %4904
  %4910 = getelementptr inbounds [8 x <2 x i64>], [8 x <2 x i64>]* %16, i64 0, i64 %4907
  %4911 = bitcast <2 x i64>* %4910 to <16 x i8>*
  store <16 x i8> %2962, <16 x i8>* %4911, align 16
  br label %3041
}

; Function Attrs: nounwind readnone
declare <4 x i64> @llvm.x86.avx2.psad.bw(<32 x i8>, <32 x i8>) #4

; Function Attrs: nounwind readnone
declare <32 x i8> @llvm.x86.avx2.pshuf.b(<32 x i8>, <32 x i8>) #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind readnone
declare <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8>, <16 x i8>) #4

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.sse2.psrai.w(<8 x i16>, i32) #4

; Function Attrs: nounwind readnone
declare <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8>, <16 x i8>) #4

; Function Attrs: nounwind readnone
declare <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16>, <16 x i16>) #4

; Function Attrs: nounwind readnone
declare <16 x i16> @llvm.x86.avx2.pslli.w(<16 x i16>, i32) #4

; Function Attrs: nounwind readnone
declare <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8>, <16 x i8>, <16 x i8>) #4

; Function Attrs: nounwind readnone
declare <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32>, i32) #4

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32>, <4 x i32>) #4

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32>, <4 x i32>) #4

; Function Attrs: nounwind readnone
declare <32 x i8> @llvm.x86.avx2.pblendvb(<32 x i8>, <32 x i8>, <32 x i8>) #4

; Function Attrs: nounwind readnone
declare <16 x i16> @llvm.x86.avx2.packusdw(<8 x i32>, <8 x i32>) #4

; Function Attrs: nounwind readnone
declare <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32>, <8 x i32>) #4

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.sse2.pslli.w(<8 x i16>, i32) #4

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32>, i32) #4

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32>, i32) #4

; Function Attrs: nounwind readnone
declare <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32>, i32) #4

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @highbd_transpose(i16* nocapture readonly, i64, i16* nocapture, i64, i32, i32) unnamed_addr #0 {
  %7 = icmp sgt i32 %5, 0
  br i1 %7, label %8, label %46

8:                                                ; preds = %6
  %9 = icmp sgt i32 %4, 0
  %10 = shl nsw i64 %1, 1
  %11 = mul nsw i64 %1, 3
  %12 = shl nsw i64 %1, 2
  %13 = mul nsw i64 %1, 5
  %14 = mul nsw i64 %1, 6
  %15 = mul nsw i64 %1, 7
  %16 = shl nsw i64 %1, 3
  %17 = mul nsw i64 %1, 9
  %18 = mul nsw i64 %1, 10
  %19 = mul nsw i64 %1, 11
  %20 = mul nsw i64 %1, 12
  %21 = mul nsw i64 %1, 13
  %22 = mul nsw i64 %1, 14
  %23 = mul nsw i64 %1, 15
  %24 = shl nsw i64 %3, 1
  %25 = mul nsw i64 %3, 3
  %26 = shl nsw i64 %3, 2
  %27 = mul nsw i64 %3, 5
  %28 = mul nsw i64 %3, 6
  %29 = mul nsw i64 %3, 7
  %30 = shl nsw i64 %3, 3
  %31 = mul nsw i64 %3, 9
  %32 = mul nsw i64 %3, 10
  %33 = mul nsw i64 %3, 11
  %34 = mul nsw i64 %3, 12
  %35 = mul nsw i64 %3, 13
  %36 = mul nsw i64 %3, 14
  %37 = mul nsw i64 %3, 15
  %38 = sext i32 %4 to i64
  %39 = sext i32 %5 to i64
  br label %40

40:                                               ; preds = %8, %47
  %41 = phi i64 [ 0, %8 ], [ %48, %47 ]
  br i1 %9, label %42, label %47

42:                                               ; preds = %40
  %43 = mul nsw i64 %41, %3
  %44 = getelementptr inbounds i16, i16* %2, i64 %43
  %45 = getelementptr inbounds i16, i16* %0, i64 %41
  br label %50

46:                                               ; preds = %47, %6
  ret void

47:                                               ; preds = %50, %40
  %48 = add nuw nsw i64 %41, 16
  %49 = icmp slt i64 %48, %39
  br i1 %49, label %40, label %46

50:                                               ; preds = %42, %50
  %51 = phi i64 [ 0, %42 ], [ %293, %50 ]
  %52 = mul nsw i64 %51, %1
  %53 = getelementptr inbounds i16, i16* %45, i64 %52
  %54 = getelementptr inbounds i16, i16* %44, i64 %51
  %55 = bitcast i16* %53 to <16 x i16>*
  %56 = load <16 x i16>, <16 x i16>* %55, align 1
  %57 = getelementptr inbounds i16, i16* %53, i64 %1
  %58 = bitcast i16* %57 to <16 x i16>*
  %59 = load <16 x i16>, <16 x i16>* %58, align 1
  %60 = getelementptr inbounds i16, i16* %53, i64 %10
  %61 = bitcast i16* %60 to <16 x i16>*
  %62 = load <16 x i16>, <16 x i16>* %61, align 1
  %63 = getelementptr inbounds i16, i16* %53, i64 %11
  %64 = bitcast i16* %63 to <16 x i16>*
  %65 = load <16 x i16>, <16 x i16>* %64, align 1
  %66 = getelementptr inbounds i16, i16* %53, i64 %12
  %67 = bitcast i16* %66 to <16 x i16>*
  %68 = load <16 x i16>, <16 x i16>* %67, align 1
  %69 = getelementptr inbounds i16, i16* %53, i64 %13
  %70 = bitcast i16* %69 to <16 x i16>*
  %71 = load <16 x i16>, <16 x i16>* %70, align 1
  %72 = getelementptr inbounds i16, i16* %53, i64 %14
  %73 = bitcast i16* %72 to <16 x i16>*
  %74 = load <16 x i16>, <16 x i16>* %73, align 1
  %75 = getelementptr inbounds i16, i16* %53, i64 %15
  %76 = bitcast i16* %75 to <16 x i16>*
  %77 = load <16 x i16>, <16 x i16>* %76, align 1
  %78 = getelementptr inbounds i16, i16* %53, i64 %16
  %79 = bitcast i16* %78 to <16 x i16>*
  %80 = load <16 x i16>, <16 x i16>* %79, align 1
  %81 = getelementptr inbounds i16, i16* %53, i64 %17
  %82 = bitcast i16* %81 to <16 x i16>*
  %83 = load <16 x i16>, <16 x i16>* %82, align 1
  %84 = getelementptr inbounds i16, i16* %53, i64 %18
  %85 = bitcast i16* %84 to <16 x i16>*
  %86 = load <16 x i16>, <16 x i16>* %85, align 1
  %87 = getelementptr inbounds i16, i16* %53, i64 %19
  %88 = bitcast i16* %87 to <16 x i16>*
  %89 = load <16 x i16>, <16 x i16>* %88, align 1
  %90 = getelementptr inbounds i16, i16* %53, i64 %20
  %91 = bitcast i16* %90 to <16 x i16>*
  %92 = load <16 x i16>, <16 x i16>* %91, align 1
  %93 = getelementptr inbounds i16, i16* %53, i64 %21
  %94 = bitcast i16* %93 to <16 x i16>*
  %95 = load <16 x i16>, <16 x i16>* %94, align 1
  %96 = getelementptr inbounds i16, i16* %53, i64 %22
  %97 = bitcast i16* %96 to <16 x i16>*
  %98 = load <16 x i16>, <16 x i16>* %97, align 1
  %99 = getelementptr inbounds i16, i16* %53, i64 %23
  %100 = bitcast i16* %99 to <16 x i16>*
  %101 = load <16 x i16>, <16 x i16>* %100, align 1
  %102 = shufflevector <16 x i16> %56, <16 x i16> %59, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %103 = shufflevector <16 x i16> %62, <16 x i16> %65, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %104 = shufflevector <16 x i16> %68, <16 x i16> %71, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %105 = shufflevector <16 x i16> %74, <16 x i16> %77, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %106 = bitcast <16 x i16> %102 to <8 x i32>
  %107 = bitcast <16 x i16> %103 to <8 x i32>
  %108 = shufflevector <8 x i32> %106, <8 x i32> %107, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %109 = bitcast <8 x i32> %108 to <4 x i64>
  %110 = bitcast <16 x i16> %104 to <8 x i32>
  %111 = bitcast <16 x i16> %105 to <8 x i32>
  %112 = shufflevector <8 x i32> %110, <8 x i32> %111, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %113 = bitcast <8 x i32> %112 to <4 x i64>
  %114 = shufflevector <4 x i64> %109, <4 x i64> %113, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %115 = shufflevector <4 x i64> %109, <4 x i64> %113, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %116 = shufflevector <8 x i32> %106, <8 x i32> %107, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %117 = bitcast <8 x i32> %116 to <4 x i64>
  %118 = shufflevector <8 x i32> %110, <8 x i32> %111, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %119 = bitcast <8 x i32> %118 to <4 x i64>
  %120 = shufflevector <4 x i64> %117, <4 x i64> %119, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %121 = shufflevector <4 x i64> %117, <4 x i64> %119, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %122 = shufflevector <16 x i16> %56, <16 x i16> %59, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %123 = shufflevector <16 x i16> %62, <16 x i16> %65, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %124 = shufflevector <16 x i16> %68, <16 x i16> %71, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %125 = shufflevector <16 x i16> %74, <16 x i16> %77, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %126 = bitcast <16 x i16> %122 to <8 x i32>
  %127 = bitcast <16 x i16> %123 to <8 x i32>
  %128 = shufflevector <8 x i32> %126, <8 x i32> %127, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %129 = bitcast <8 x i32> %128 to <4 x i64>
  %130 = bitcast <16 x i16> %124 to <8 x i32>
  %131 = bitcast <16 x i16> %125 to <8 x i32>
  %132 = shufflevector <8 x i32> %130, <8 x i32> %131, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %133 = bitcast <8 x i32> %132 to <4 x i64>
  %134 = shufflevector <4 x i64> %129, <4 x i64> %133, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %135 = shufflevector <4 x i64> %129, <4 x i64> %133, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %136 = shufflevector <8 x i32> %126, <8 x i32> %127, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %137 = bitcast <8 x i32> %136 to <4 x i64>
  %138 = shufflevector <8 x i32> %130, <8 x i32> %131, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %139 = bitcast <8 x i32> %138 to <4 x i64>
  %140 = shufflevector <4 x i64> %137, <4 x i64> %139, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %141 = shufflevector <4 x i64> %137, <4 x i64> %139, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %142 = shufflevector <16 x i16> %80, <16 x i16> %83, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %143 = shufflevector <16 x i16> %86, <16 x i16> %89, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %144 = shufflevector <16 x i16> %92, <16 x i16> %95, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %145 = shufflevector <16 x i16> %98, <16 x i16> %101, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %146 = bitcast <16 x i16> %142 to <8 x i32>
  %147 = bitcast <16 x i16> %143 to <8 x i32>
  %148 = shufflevector <8 x i32> %146, <8 x i32> %147, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %149 = bitcast <8 x i32> %148 to <4 x i64>
  %150 = bitcast <16 x i16> %144 to <8 x i32>
  %151 = bitcast <16 x i16> %145 to <8 x i32>
  %152 = shufflevector <8 x i32> %150, <8 x i32> %151, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %153 = bitcast <8 x i32> %152 to <4 x i64>
  %154 = shufflevector <4 x i64> %149, <4 x i64> %153, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %155 = shufflevector <4 x i64> %149, <4 x i64> %153, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %156 = shufflevector <8 x i32> %146, <8 x i32> %147, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %157 = bitcast <8 x i32> %156 to <4 x i64>
  %158 = shufflevector <8 x i32> %150, <8 x i32> %151, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %159 = bitcast <8 x i32> %158 to <4 x i64>
  %160 = shufflevector <4 x i64> %157, <4 x i64> %159, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %161 = shufflevector <4 x i64> %157, <4 x i64> %159, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %162 = shufflevector <16 x i16> %80, <16 x i16> %83, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %163 = shufflevector <16 x i16> %86, <16 x i16> %89, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %164 = shufflevector <16 x i16> %92, <16 x i16> %95, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %165 = shufflevector <16 x i16> %98, <16 x i16> %101, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %166 = bitcast <16 x i16> %162 to <8 x i32>
  %167 = bitcast <16 x i16> %163 to <8 x i32>
  %168 = shufflevector <8 x i32> %166, <8 x i32> %167, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %169 = bitcast <8 x i32> %168 to <4 x i64>
  %170 = bitcast <16 x i16> %164 to <8 x i32>
  %171 = bitcast <16 x i16> %165 to <8 x i32>
  %172 = shufflevector <8 x i32> %170, <8 x i32> %171, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %173 = bitcast <8 x i32> %172 to <4 x i64>
  %174 = shufflevector <4 x i64> %169, <4 x i64> %173, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %175 = shufflevector <4 x i64> %169, <4 x i64> %173, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %176 = shufflevector <8 x i32> %166, <8 x i32> %167, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %177 = bitcast <8 x i32> %176 to <4 x i64>
  %178 = shufflevector <8 x i32> %170, <8 x i32> %171, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %179 = bitcast <8 x i32> %178 to <4 x i64>
  %180 = shufflevector <4 x i64> %177, <4 x i64> %179, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %181 = shufflevector <4 x i64> %177, <4 x i64> %179, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %182 = bitcast <4 x i64> %114 to <8 x i32>
  %183 = shufflevector <4 x i64> %154, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %184 = bitcast <2 x i64> %183 to <4 x i32>
  %185 = shufflevector <4 x i32> %184, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %186 = shufflevector <8 x i32> %182, <8 x i32> %185, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %187 = bitcast <4 x i64> %154 to <8 x i32>
  %188 = shufflevector <4 x i64> %114, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %189 = bitcast <2 x i64> %188 to <4 x i32>
  %190 = shufflevector <4 x i32> %189, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %191 = shufflevector <8 x i32> %190, <8 x i32> %187, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  %192 = bitcast <4 x i64> %115 to <8 x i32>
  %193 = shufflevector <4 x i64> %155, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %194 = bitcast <2 x i64> %193 to <4 x i32>
  %195 = shufflevector <4 x i32> %194, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %196 = shufflevector <8 x i32> %192, <8 x i32> %195, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %197 = bitcast <4 x i64> %155 to <8 x i32>
  %198 = shufflevector <4 x i64> %115, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %199 = bitcast <2 x i64> %198 to <4 x i32>
  %200 = shufflevector <4 x i32> %199, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %201 = shufflevector <8 x i32> %200, <8 x i32> %197, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  %202 = bitcast <4 x i64> %120 to <8 x i32>
  %203 = shufflevector <4 x i64> %160, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %204 = bitcast <2 x i64> %203 to <4 x i32>
  %205 = shufflevector <4 x i32> %204, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %206 = shufflevector <8 x i32> %202, <8 x i32> %205, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %207 = bitcast <4 x i64> %160 to <8 x i32>
  %208 = shufflevector <4 x i64> %120, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %209 = bitcast <2 x i64> %208 to <4 x i32>
  %210 = shufflevector <4 x i32> %209, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %211 = shufflevector <8 x i32> %210, <8 x i32> %207, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  %212 = bitcast <4 x i64> %121 to <8 x i32>
  %213 = shufflevector <4 x i64> %161, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %214 = bitcast <2 x i64> %213 to <4 x i32>
  %215 = shufflevector <4 x i32> %214, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %216 = shufflevector <8 x i32> %212, <8 x i32> %215, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %217 = bitcast <4 x i64> %161 to <8 x i32>
  %218 = shufflevector <4 x i64> %121, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %219 = bitcast <2 x i64> %218 to <4 x i32>
  %220 = shufflevector <4 x i32> %219, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %221 = shufflevector <8 x i32> %220, <8 x i32> %217, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  %222 = bitcast <4 x i64> %134 to <8 x i32>
  %223 = shufflevector <4 x i64> %174, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %224 = bitcast <2 x i64> %223 to <4 x i32>
  %225 = shufflevector <4 x i32> %224, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %226 = shufflevector <8 x i32> %222, <8 x i32> %225, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %227 = bitcast <4 x i64> %174 to <8 x i32>
  %228 = shufflevector <4 x i64> %134, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %229 = bitcast <2 x i64> %228 to <4 x i32>
  %230 = shufflevector <4 x i32> %229, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %231 = shufflevector <8 x i32> %230, <8 x i32> %227, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  %232 = bitcast <4 x i64> %135 to <8 x i32>
  %233 = shufflevector <4 x i64> %175, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %234 = bitcast <2 x i64> %233 to <4 x i32>
  %235 = shufflevector <4 x i32> %234, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %236 = shufflevector <8 x i32> %232, <8 x i32> %235, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %237 = bitcast <4 x i64> %175 to <8 x i32>
  %238 = shufflevector <4 x i64> %135, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %239 = bitcast <2 x i64> %238 to <4 x i32>
  %240 = shufflevector <4 x i32> %239, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %241 = shufflevector <8 x i32> %240, <8 x i32> %237, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  %242 = bitcast <4 x i64> %140 to <8 x i32>
  %243 = shufflevector <4 x i64> %180, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %244 = bitcast <2 x i64> %243 to <4 x i32>
  %245 = shufflevector <4 x i32> %244, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %246 = shufflevector <8 x i32> %242, <8 x i32> %245, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %247 = bitcast <4 x i64> %180 to <8 x i32>
  %248 = shufflevector <4 x i64> %140, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %249 = bitcast <2 x i64> %248 to <4 x i32>
  %250 = shufflevector <4 x i32> %249, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %251 = shufflevector <8 x i32> %250, <8 x i32> %247, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  %252 = bitcast <4 x i64> %141 to <8 x i32>
  %253 = shufflevector <4 x i64> %181, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %254 = bitcast <2 x i64> %253 to <4 x i32>
  %255 = shufflevector <4 x i32> %254, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %256 = shufflevector <8 x i32> %252, <8 x i32> %255, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %257 = bitcast <4 x i64> %181 to <8 x i32>
  %258 = shufflevector <4 x i64> %141, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %259 = bitcast <2 x i64> %258 to <4 x i32>
  %260 = shufflevector <4 x i32> %259, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %261 = shufflevector <8 x i32> %260, <8 x i32> %257, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  %262 = bitcast i16* %54 to <8 x i32>*
  store <8 x i32> %186, <8 x i32>* %262, align 1
  %263 = getelementptr inbounds i16, i16* %54, i64 %3
  %264 = bitcast i16* %263 to <8 x i32>*
  store <8 x i32> %196, <8 x i32>* %264, align 1
  %265 = getelementptr inbounds i16, i16* %54, i64 %24
  %266 = bitcast i16* %265 to <8 x i32>*
  store <8 x i32> %206, <8 x i32>* %266, align 1
  %267 = getelementptr inbounds i16, i16* %54, i64 %25
  %268 = bitcast i16* %267 to <8 x i32>*
  store <8 x i32> %216, <8 x i32>* %268, align 1
  %269 = getelementptr inbounds i16, i16* %54, i64 %26
  %270 = bitcast i16* %269 to <8 x i32>*
  store <8 x i32> %226, <8 x i32>* %270, align 1
  %271 = getelementptr inbounds i16, i16* %54, i64 %27
  %272 = bitcast i16* %271 to <8 x i32>*
  store <8 x i32> %236, <8 x i32>* %272, align 1
  %273 = getelementptr inbounds i16, i16* %54, i64 %28
  %274 = bitcast i16* %273 to <8 x i32>*
  store <8 x i32> %246, <8 x i32>* %274, align 1
  %275 = getelementptr inbounds i16, i16* %54, i64 %29
  %276 = bitcast i16* %275 to <8 x i32>*
  store <8 x i32> %256, <8 x i32>* %276, align 1
  %277 = getelementptr inbounds i16, i16* %54, i64 %30
  %278 = bitcast i16* %277 to <8 x i32>*
  store <8 x i32> %191, <8 x i32>* %278, align 1
  %279 = getelementptr inbounds i16, i16* %54, i64 %31
  %280 = bitcast i16* %279 to <8 x i32>*
  store <8 x i32> %201, <8 x i32>* %280, align 1
  %281 = getelementptr inbounds i16, i16* %54, i64 %32
  %282 = bitcast i16* %281 to <8 x i32>*
  store <8 x i32> %211, <8 x i32>* %282, align 1
  %283 = getelementptr inbounds i16, i16* %54, i64 %33
  %284 = bitcast i16* %283 to <8 x i32>*
  store <8 x i32> %221, <8 x i32>* %284, align 1
  %285 = getelementptr inbounds i16, i16* %54, i64 %34
  %286 = bitcast i16* %285 to <8 x i32>*
  store <8 x i32> %231, <8 x i32>* %286, align 1
  %287 = getelementptr inbounds i16, i16* %54, i64 %35
  %288 = bitcast i16* %287 to <8 x i32>*
  store <8 x i32> %241, <8 x i32>* %288, align 1
  %289 = getelementptr inbounds i16, i16* %54, i64 %36
  %290 = bitcast i16* %289 to <8 x i32>*
  store <8 x i32> %251, <8 x i32>* %290, align 1
  %291 = getelementptr inbounds i16, i16* %54, i64 %37
  %292 = bitcast i16* %291 to <8 x i32>*
  store <8 x i32> %261, <8 x i32>* %292, align 1
  %293 = add nuw nsw i64 %51, 16
  %294 = icmp slt i64 %293, %38
  br i1 %294, label %50, label %47
}

; Function Attrs: nounwind readnone speculatable
declare <16 x i8> @llvm.usub.sat.v16i8(<16 x i8>, <16 x i8>) #5

; Function Attrs: nounwind readnone
declare <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16>, <8 x i16>) #4

; Function Attrs: nounwind readnone
declare <16 x i8> @llvm.x86.sse2.packsswb.128(<8 x i16>, <8 x i16>) #4

; Function Attrs: argmemonly nounwind readonly
declare <4 x i32> @llvm.x86.avx2.maskload.d(i8*, <4 x i32>) #6

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @transpose(i8* nocapture readonly, i64, i8* nocapture, i64, i32, i32) unnamed_addr #7 {
  %7 = icmp sgt i32 %5, 0
  br i1 %7, label %8, label %46

8:                                                ; preds = %6
  %9 = icmp sgt i32 %4, 0
  %10 = shl nsw i64 %1, 1
  %11 = mul nsw i64 %1, 3
  %12 = shl nsw i64 %1, 2
  %13 = mul nsw i64 %1, 5
  %14 = mul nsw i64 %1, 6
  %15 = mul nsw i64 %1, 7
  %16 = shl nsw i64 %1, 3
  %17 = mul nsw i64 %1, 9
  %18 = mul nsw i64 %1, 10
  %19 = mul nsw i64 %1, 11
  %20 = mul nsw i64 %1, 12
  %21 = mul nsw i64 %1, 13
  %22 = mul nsw i64 %1, 14
  %23 = mul nsw i64 %1, 15
  %24 = shl nsw i64 %3, 1
  %25 = mul nsw i64 %3, 3
  %26 = shl nsw i64 %3, 2
  %27 = mul nsw i64 %3, 5
  %28 = mul nsw i64 %3, 6
  %29 = mul nsw i64 %3, 7
  %30 = shl nsw i64 %3, 3
  %31 = mul nsw i64 %3, 9
  %32 = mul nsw i64 %3, 10
  %33 = mul nsw i64 %3, 11
  %34 = mul nsw i64 %3, 12
  %35 = mul nsw i64 %3, 13
  %36 = mul nsw i64 %3, 14
  %37 = mul nsw i64 %3, 15
  %38 = sext i32 %4 to i64
  %39 = sext i32 %5 to i64
  br label %40

40:                                               ; preds = %8, %47
  %41 = phi i64 [ 0, %8 ], [ %48, %47 ]
  br i1 %9, label %42, label %47

42:                                               ; preds = %40
  %43 = mul nsw i64 %41, %3
  %44 = getelementptr inbounds i8, i8* %2, i64 %43
  %45 = getelementptr inbounds i8, i8* %0, i64 %41
  br label %50

46:                                               ; preds = %47, %6
  ret void

47:                                               ; preds = %50, %40
  %48 = add nuw nsw i64 %41, 16
  %49 = icmp slt i64 %48, %39
  br i1 %49, label %40, label %46

50:                                               ; preds = %42, %50
  %51 = phi i64 [ 0, %42 ], [ %245, %50 ]
  %52 = mul nsw i64 %51, %1
  %53 = getelementptr inbounds i8, i8* %45, i64 %52
  %54 = getelementptr inbounds i8, i8* %44, i64 %51
  %55 = bitcast i8* %53 to <16 x i8>*
  %56 = load <16 x i8>, <16 x i8>* %55, align 1
  %57 = getelementptr inbounds i8, i8* %53, i64 %1
  %58 = bitcast i8* %57 to <16 x i8>*
  %59 = load <16 x i8>, <16 x i8>* %58, align 1
  %60 = getelementptr inbounds i8, i8* %53, i64 %10
  %61 = bitcast i8* %60 to <16 x i8>*
  %62 = load <16 x i8>, <16 x i8>* %61, align 1
  %63 = getelementptr inbounds i8, i8* %53, i64 %11
  %64 = bitcast i8* %63 to <16 x i8>*
  %65 = load <16 x i8>, <16 x i8>* %64, align 1
  %66 = getelementptr inbounds i8, i8* %53, i64 %12
  %67 = bitcast i8* %66 to <16 x i8>*
  %68 = load <16 x i8>, <16 x i8>* %67, align 1
  %69 = getelementptr inbounds i8, i8* %53, i64 %13
  %70 = bitcast i8* %69 to <16 x i8>*
  %71 = load <16 x i8>, <16 x i8>* %70, align 1
  %72 = getelementptr inbounds i8, i8* %53, i64 %14
  %73 = bitcast i8* %72 to <16 x i8>*
  %74 = load <16 x i8>, <16 x i8>* %73, align 1
  %75 = getelementptr inbounds i8, i8* %53, i64 %15
  %76 = bitcast i8* %75 to <16 x i8>*
  %77 = load <16 x i8>, <16 x i8>* %76, align 1
  %78 = getelementptr inbounds i8, i8* %53, i64 %16
  %79 = bitcast i8* %78 to <16 x i8>*
  %80 = load <16 x i8>, <16 x i8>* %79, align 1
  %81 = getelementptr inbounds i8, i8* %53, i64 %17
  %82 = bitcast i8* %81 to <16 x i8>*
  %83 = load <16 x i8>, <16 x i8>* %82, align 1
  %84 = getelementptr inbounds i8, i8* %53, i64 %18
  %85 = bitcast i8* %84 to <16 x i8>*
  %86 = load <16 x i8>, <16 x i8>* %85, align 1
  %87 = getelementptr inbounds i8, i8* %53, i64 %19
  %88 = bitcast i8* %87 to <16 x i8>*
  %89 = load <16 x i8>, <16 x i8>* %88, align 1
  %90 = getelementptr inbounds i8, i8* %53, i64 %20
  %91 = bitcast i8* %90 to <16 x i8>*
  %92 = load <16 x i8>, <16 x i8>* %91, align 1
  %93 = getelementptr inbounds i8, i8* %53, i64 %21
  %94 = bitcast i8* %93 to <16 x i8>*
  %95 = load <16 x i8>, <16 x i8>* %94, align 1
  %96 = getelementptr inbounds i8, i8* %53, i64 %22
  %97 = bitcast i8* %96 to <16 x i8>*
  %98 = load <16 x i8>, <16 x i8>* %97, align 1
  %99 = getelementptr inbounds i8, i8* %53, i64 %23
  %100 = bitcast i8* %99 to <16 x i8>*
  %101 = load <16 x i8>, <16 x i8>* %100, align 1
  %102 = shufflevector <16 x i8> %56, <16 x i8> %59, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %103 = shufflevector <16 x i8> %62, <16 x i8> %65, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %104 = shufflevector <16 x i8> %68, <16 x i8> %71, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %105 = shufflevector <16 x i8> %74, <16 x i8> %77, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %106 = shufflevector <16 x i8> %80, <16 x i8> %83, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %107 = shufflevector <16 x i8> %86, <16 x i8> %89, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %108 = shufflevector <16 x i8> %92, <16 x i8> %95, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %109 = shufflevector <16 x i8> %98, <16 x i8> %101, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %110 = bitcast <16 x i8> %102 to <8 x i16>
  %111 = bitcast <16 x i8> %103 to <8 x i16>
  %112 = shufflevector <8 x i16> %110, <8 x i16> %111, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %113 = bitcast <16 x i8> %104 to <8 x i16>
  %114 = bitcast <16 x i8> %105 to <8 x i16>
  %115 = shufflevector <8 x i16> %113, <8 x i16> %114, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %116 = bitcast <16 x i8> %106 to <8 x i16>
  %117 = bitcast <16 x i8> %107 to <8 x i16>
  %118 = shufflevector <8 x i16> %116, <8 x i16> %117, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %119 = bitcast <16 x i8> %108 to <8 x i16>
  %120 = bitcast <16 x i8> %109 to <8 x i16>
  %121 = shufflevector <8 x i16> %119, <8 x i16> %120, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %122 = bitcast <8 x i16> %112 to <4 x i32>
  %123 = bitcast <8 x i16> %115 to <4 x i32>
  %124 = shufflevector <4 x i32> %122, <4 x i32> %123, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %125 = bitcast <4 x i32> %124 to <2 x i64>
  %126 = shufflevector <4 x i32> %122, <4 x i32> %123, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %127 = bitcast <4 x i32> %126 to <2 x i64>
  %128 = bitcast <8 x i16> %118 to <4 x i32>
  %129 = bitcast <8 x i16> %121 to <4 x i32>
  %130 = shufflevector <4 x i32> %128, <4 x i32> %129, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %131 = bitcast <4 x i32> %130 to <2 x i64>
  %132 = shufflevector <4 x i32> %128, <4 x i32> %129, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %133 = bitcast <4 x i32> %132 to <2 x i64>
  %134 = shufflevector <2 x i64> %125, <2 x i64> %131, <2 x i32> <i32 0, i32 2>
  %135 = shufflevector <2 x i64> %125, <2 x i64> %131, <2 x i32> <i32 1, i32 3>
  %136 = shufflevector <2 x i64> %127, <2 x i64> %133, <2 x i32> <i32 0, i32 2>
  %137 = shufflevector <2 x i64> %127, <2 x i64> %133, <2 x i32> <i32 1, i32 3>
  %138 = shufflevector <8 x i16> %110, <8 x i16> %111, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %139 = shufflevector <8 x i16> %113, <8 x i16> %114, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %140 = shufflevector <8 x i16> %116, <8 x i16> %117, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %141 = shufflevector <8 x i16> %119, <8 x i16> %120, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %142 = bitcast <8 x i16> %138 to <4 x i32>
  %143 = bitcast <8 x i16> %139 to <4 x i32>
  %144 = shufflevector <4 x i32> %142, <4 x i32> %143, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %145 = bitcast <4 x i32> %144 to <2 x i64>
  %146 = shufflevector <4 x i32> %142, <4 x i32> %143, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %147 = bitcast <4 x i32> %146 to <2 x i64>
  %148 = bitcast <8 x i16> %140 to <4 x i32>
  %149 = bitcast <8 x i16> %141 to <4 x i32>
  %150 = shufflevector <4 x i32> %148, <4 x i32> %149, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %151 = bitcast <4 x i32> %150 to <2 x i64>
  %152 = shufflevector <4 x i32> %148, <4 x i32> %149, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %153 = bitcast <4 x i32> %152 to <2 x i64>
  %154 = shufflevector <2 x i64> %145, <2 x i64> %151, <2 x i32> <i32 0, i32 2>
  %155 = shufflevector <2 x i64> %145, <2 x i64> %151, <2 x i32> <i32 1, i32 3>
  %156 = shufflevector <2 x i64> %147, <2 x i64> %153, <2 x i32> <i32 0, i32 2>
  %157 = shufflevector <2 x i64> %147, <2 x i64> %153, <2 x i32> <i32 1, i32 3>
  %158 = shufflevector <16 x i8> %56, <16 x i8> %59, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %159 = shufflevector <16 x i8> %62, <16 x i8> %65, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %160 = shufflevector <16 x i8> %68, <16 x i8> %71, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %161 = shufflevector <16 x i8> %74, <16 x i8> %77, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %162 = shufflevector <16 x i8> %80, <16 x i8> %83, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %163 = shufflevector <16 x i8> %86, <16 x i8> %89, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %164 = shufflevector <16 x i8> %92, <16 x i8> %95, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %165 = shufflevector <16 x i8> %98, <16 x i8> %101, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %166 = bitcast <16 x i8> %158 to <8 x i16>
  %167 = bitcast <16 x i8> %159 to <8 x i16>
  %168 = shufflevector <8 x i16> %166, <8 x i16> %167, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %169 = bitcast <16 x i8> %160 to <8 x i16>
  %170 = bitcast <16 x i8> %161 to <8 x i16>
  %171 = shufflevector <8 x i16> %169, <8 x i16> %170, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %172 = bitcast <16 x i8> %162 to <8 x i16>
  %173 = bitcast <16 x i8> %163 to <8 x i16>
  %174 = shufflevector <8 x i16> %172, <8 x i16> %173, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %175 = bitcast <16 x i8> %164 to <8 x i16>
  %176 = bitcast <16 x i8> %165 to <8 x i16>
  %177 = shufflevector <8 x i16> %175, <8 x i16> %176, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %178 = bitcast <8 x i16> %168 to <4 x i32>
  %179 = bitcast <8 x i16> %171 to <4 x i32>
  %180 = shufflevector <4 x i32> %178, <4 x i32> %179, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %181 = bitcast <4 x i32> %180 to <2 x i64>
  %182 = shufflevector <4 x i32> %178, <4 x i32> %179, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %183 = bitcast <4 x i32> %182 to <2 x i64>
  %184 = bitcast <8 x i16> %174 to <4 x i32>
  %185 = bitcast <8 x i16> %177 to <4 x i32>
  %186 = shufflevector <4 x i32> %184, <4 x i32> %185, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %187 = bitcast <4 x i32> %186 to <2 x i64>
  %188 = shufflevector <4 x i32> %184, <4 x i32> %185, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %189 = bitcast <4 x i32> %188 to <2 x i64>
  %190 = shufflevector <2 x i64> %181, <2 x i64> %187, <2 x i32> <i32 0, i32 2>
  %191 = shufflevector <2 x i64> %181, <2 x i64> %187, <2 x i32> <i32 1, i32 3>
  %192 = shufflevector <2 x i64> %183, <2 x i64> %189, <2 x i32> <i32 0, i32 2>
  %193 = shufflevector <2 x i64> %183, <2 x i64> %189, <2 x i32> <i32 1, i32 3>
  %194 = shufflevector <8 x i16> %166, <8 x i16> %167, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %195 = shufflevector <8 x i16> %169, <8 x i16> %170, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %196 = shufflevector <8 x i16> %172, <8 x i16> %173, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %197 = shufflevector <8 x i16> %175, <8 x i16> %176, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %198 = bitcast <8 x i16> %194 to <4 x i32>
  %199 = bitcast <8 x i16> %195 to <4 x i32>
  %200 = shufflevector <4 x i32> %198, <4 x i32> %199, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %201 = bitcast <4 x i32> %200 to <2 x i64>
  %202 = shufflevector <4 x i32> %198, <4 x i32> %199, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %203 = bitcast <4 x i32> %202 to <2 x i64>
  %204 = bitcast <8 x i16> %196 to <4 x i32>
  %205 = bitcast <8 x i16> %197 to <4 x i32>
  %206 = shufflevector <4 x i32> %204, <4 x i32> %205, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %207 = bitcast <4 x i32> %206 to <2 x i64>
  %208 = shufflevector <4 x i32> %204, <4 x i32> %205, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %209 = bitcast <4 x i32> %208 to <2 x i64>
  %210 = shufflevector <2 x i64> %201, <2 x i64> %207, <2 x i32> <i32 0, i32 2>
  %211 = shufflevector <2 x i64> %201, <2 x i64> %207, <2 x i32> <i32 1, i32 3>
  %212 = shufflevector <2 x i64> %203, <2 x i64> %209, <2 x i32> <i32 0, i32 2>
  %213 = shufflevector <2 x i64> %203, <2 x i64> %209, <2 x i32> <i32 1, i32 3>
  %214 = bitcast i8* %54 to <2 x i64>*
  store <2 x i64> %134, <2 x i64>* %214, align 1
  %215 = getelementptr inbounds i8, i8* %54, i64 %3
  %216 = bitcast i8* %215 to <2 x i64>*
  store <2 x i64> %135, <2 x i64>* %216, align 1
  %217 = getelementptr inbounds i8, i8* %54, i64 %24
  %218 = bitcast i8* %217 to <2 x i64>*
  store <2 x i64> %136, <2 x i64>* %218, align 1
  %219 = getelementptr inbounds i8, i8* %54, i64 %25
  %220 = bitcast i8* %219 to <2 x i64>*
  store <2 x i64> %137, <2 x i64>* %220, align 1
  %221 = getelementptr inbounds i8, i8* %54, i64 %26
  %222 = bitcast i8* %221 to <2 x i64>*
  store <2 x i64> %154, <2 x i64>* %222, align 1
  %223 = getelementptr inbounds i8, i8* %54, i64 %27
  %224 = bitcast i8* %223 to <2 x i64>*
  store <2 x i64> %155, <2 x i64>* %224, align 1
  %225 = getelementptr inbounds i8, i8* %54, i64 %28
  %226 = bitcast i8* %225 to <2 x i64>*
  store <2 x i64> %156, <2 x i64>* %226, align 1
  %227 = getelementptr inbounds i8, i8* %54, i64 %29
  %228 = bitcast i8* %227 to <2 x i64>*
  store <2 x i64> %157, <2 x i64>* %228, align 1
  %229 = getelementptr inbounds i8, i8* %54, i64 %30
  %230 = bitcast i8* %229 to <2 x i64>*
  store <2 x i64> %190, <2 x i64>* %230, align 1
  %231 = getelementptr inbounds i8, i8* %54, i64 %31
  %232 = bitcast i8* %231 to <2 x i64>*
  store <2 x i64> %191, <2 x i64>* %232, align 1
  %233 = getelementptr inbounds i8, i8* %54, i64 %32
  %234 = bitcast i8* %233 to <2 x i64>*
  store <2 x i64> %192, <2 x i64>* %234, align 1
  %235 = getelementptr inbounds i8, i8* %54, i64 %33
  %236 = bitcast i8* %235 to <2 x i64>*
  store <2 x i64> %193, <2 x i64>* %236, align 1
  %237 = getelementptr inbounds i8, i8* %54, i64 %34
  %238 = bitcast i8* %237 to <2 x i64>*
  store <2 x i64> %210, <2 x i64>* %238, align 1
  %239 = getelementptr inbounds i8, i8* %54, i64 %35
  %240 = bitcast i8* %239 to <2 x i64>*
  store <2 x i64> %211, <2 x i64>* %240, align 1
  %241 = getelementptr inbounds i8, i8* %54, i64 %36
  %242 = bitcast i8* %241 to <2 x i64>*
  store <2 x i64> %212, <2 x i64>* %242, align 1
  %243 = getelementptr inbounds i8, i8* %54, i64 %37
  %244 = bitcast i8* %243 to <2 x i64>*
  store <2 x i64> %213, <2 x i64>* %244, align 1
  %245 = add nuw nsw i64 %51, 16
  %246 = icmp slt i64 %245, %38
  br i1 %246, label %50, label %47
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="256" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="256" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="256" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone }
attributes #5 = { nounwind readnone speculatable }
attributes #6 = { argmemonly nounwind readonly }
attributes #7 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = distinct !{!4, !3}
!5 = distinct !{!5, !3}
!6 = distinct !{!6, !3}
!7 = distinct !{!7, !3}
!8 = distinct !{!8, !3}
!9 = distinct !{!9, !3}
!10 = distinct !{!10, !3}
!11 = distinct !{!11, !3}
!12 = distinct !{!12, !3}
!13 = distinct !{!13, !3}
!14 = distinct !{!14, !3}
!15 = distinct !{!15, !3}
!16 = distinct !{!16, !3}
!17 = distinct !{!17, !3}
!18 = distinct !{!18, !3}
!19 = distinct !{!19, !3}
!20 = distinct !{!20, !3}
!21 = distinct !{!21, !3}
!22 = distinct !{!22, !3}
!23 = distinct !{!23, !3}
!24 = distinct !{!24, !3}
!25 = distinct !{!25, !3}
!26 = distinct !{!26, !3}
!27 = distinct !{!27, !3}
!28 = distinct !{!28, !3}
!29 = distinct !{!29, !3}
!30 = distinct !{!30, !3}
!31 = distinct !{!31, !3}
!32 = distinct !{!32, !3}
!33 = distinct !{!33, !3}
!34 = distinct !{!34, !3}
!35 = distinct !{!35, !3}
!36 = distinct !{!36, !3}
!37 = distinct !{!37, !3}
!38 = distinct !{!38, !3}
!39 = distinct !{!39, !3}
!40 = distinct !{!40, !3}
!41 = distinct !{!41, !3}
!42 = distinct !{!42, !3}
!43 = distinct !{!43, !3}
!44 = distinct !{!44, !3}
!45 = distinct !{!45, !3}
!46 = distinct !{!46, !3}
!47 = distinct !{!47, !3}
!48 = distinct !{!48, !3}
!49 = distinct !{!49, !3}
!50 = distinct !{!50, !3}
!51 = distinct !{!51, !3}
!52 = distinct !{!52, !3}
!53 = distinct !{!53, !3}
!54 = distinct !{!54, !3}
!55 = distinct !{!55, !3}
