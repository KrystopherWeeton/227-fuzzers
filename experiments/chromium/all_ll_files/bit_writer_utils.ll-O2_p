; ModuleID = '../../third_party/libwebp/src/utils/bit_writer_utils.c'
source_filename = "../../third_party/libwebp/src/utils/bit_writer_utils.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.VP8BitWriter = type { i32, i32, i32, i32, i8*, i64, i64, i32 }
%struct.VP8LBitWriter = type { i64, i32, i8*, i8*, i8*, i32 }

@kNorm = internal unnamed_addr constant [128 x i8] c"\07\06\06\05\05\05\05\04\04\04\04\04\04\04\04\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\00", align 16
@kNewRange = internal unnamed_addr constant [128 x i8] c"\7F\7F\BF\7F\9F\BF\DF\7F\8F\9F\AF\BF\CF\DF\EF\7F\87\8F\97\9F\A7\AF\B7\BF\C7\CF\D7\DF\E7\EF\F7\7F\83\87\8B\8F\93\97\9B\9F\A3\A7\AB\AF\B3\B7\BB\BF\C3\C7\CB\CF\D3\D7\DB\DF\E3\E7\EB\EF\F3\F7\FB\7F\81\83\85\87\89\8B\8D\8F\91\93\95\97\99\9B\9D\9F\A1\A3\A5\A7\A9\AB\AD\AF\B1\B3\B5\B7\B9\BB\BD\BF\C1\C3\C5\C7\C9\CB\CD\CF\D1\D3\D5\D7\D9\DB\DD\DF\E1\E3\E5\E7\E9\EB\ED\EF\F1\F3\F5\F7\F9\FB\FD\7F", align 16

; Function Attrs: nounwind ssp uwtable
define hidden i32 @VP8PutBit(%struct.VP8BitWriter* nocapture, i32 returned, i32) local_unnamed_addr #0 {
  %4 = getelementptr inbounds %struct.VP8BitWriter, %struct.VP8BitWriter* %0, i64 0, i32 0
  %5 = load i32, i32* %4, align 8
  %6 = mul nsw i32 %5, %2
  %7 = ashr i32 %6, 8
  %8 = icmp eq i32 %1, 0
  br i1 %8, label %15, label %9

9:                                                ; preds = %3
  %10 = add nsw i32 %7, 1
  %11 = getelementptr inbounds %struct.VP8BitWriter, %struct.VP8BitWriter* %0, i64 0, i32 1
  %12 = load i32, i32* %11, align 4
  %13 = add nsw i32 %12, %10
  store i32 %13, i32* %11, align 4
  %14 = sub nsw i32 %5, %10
  br label %15

15:                                               ; preds = %3, %9
  %16 = phi i32 [ %14, %9 ], [ %7, %3 ]
  store i32 %16, i32* %4, align 8
  %17 = icmp slt i32 %16, 127
  br i1 %17, label %18, label %34

18:                                               ; preds = %15
  %19 = sext i32 %16 to i64
  %20 = getelementptr inbounds [128 x i8], [128 x i8]* @kNorm, i64 0, i64 %19
  %21 = load i8, i8* %20, align 1
  %22 = zext i8 %21 to i32
  %23 = getelementptr inbounds [128 x i8], [128 x i8]* @kNewRange, i64 0, i64 %19
  %24 = load i8, i8* %23, align 1
  %25 = zext i8 %24 to i32
  store i32 %25, i32* %4, align 8
  %26 = getelementptr inbounds %struct.VP8BitWriter, %struct.VP8BitWriter* %0, i64 0, i32 1
  %27 = load i32, i32* %26, align 4
  %28 = shl i32 %27, %22
  store i32 %28, i32* %26, align 4
  %29 = getelementptr inbounds %struct.VP8BitWriter, %struct.VP8BitWriter* %0, i64 0, i32 3
  %30 = load i32, i32* %29, align 4
  %31 = add nsw i32 %30, %22
  store i32 %31, i32* %29, align 4
  %32 = icmp sgt i32 %31, 0
  br i1 %32, label %33, label %34

33:                                               ; preds = %18
  tail call fastcc void @Flush(%struct.VP8BitWriter* %0)
  br label %34

34:                                               ; preds = %18, %33, %15
  ret i32 %1
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @Flush(%struct.VP8BitWriter* nocapture) unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.VP8BitWriter, %struct.VP8BitWriter* %0, i64 0, i32 3
  %3 = load i32, i32* %2, align 4
  %4 = add nsw i32 %3, 8
  %5 = getelementptr inbounds %struct.VP8BitWriter, %struct.VP8BitWriter* %0, i64 0, i32 1
  %6 = load i32, i32* %5, align 4
  %7 = ashr i32 %6, %4
  %8 = shl i32 %7, %4
  %9 = sub nsw i32 %6, %8
  store i32 %9, i32* %5, align 4
  %10 = add nsw i32 %3, -8
  store i32 %10, i32* %2, align 4
  %11 = and i32 %7, 255
  %12 = icmp eq i32 %11, 255
  br i1 %12, label %77, label %13

13:                                               ; preds = %1
  %14 = getelementptr inbounds %struct.VP8BitWriter, %struct.VP8BitWriter* %0, i64 0, i32 5
  %15 = load i64, i64* %14, align 8
  %16 = getelementptr inbounds %struct.VP8BitWriter, %struct.VP8BitWriter* %0, i64 0, i32 2
  %17 = load i32, i32* %16, align 8
  %18 = add nsw i32 %17, 1
  %19 = sext i32 %18 to i64
  %20 = add i64 %15, %19
  %21 = getelementptr inbounds %struct.VP8BitWriter, %struct.VP8BitWriter* %0, i64 0, i32 6
  %22 = load i64, i64* %21, align 8
  %23 = icmp ugt i64 %20, %22
  br i1 %23, label %24, label %43

24:                                               ; preds = %13
  %25 = shl i64 %22, 1
  %26 = icmp ult i64 %25, %20
  %27 = select i1 %26, i64 %20, i64 %25
  %28 = icmp ugt i64 %27, 1024
  %29 = select i1 %28, i64 %27, i64 1024
  %30 = tail call i8* @WebPSafeMalloc(i64 1, i64 %29) #4
  %31 = icmp eq i8* %30, null
  br i1 %31, label %41, label %32

32:                                               ; preds = %24
  %33 = load i64, i64* %14, align 8
  %34 = icmp eq i64 %33, 0
  br i1 %34, label %38, label %35

35:                                               ; preds = %32
  %36 = getelementptr inbounds %struct.VP8BitWriter, %struct.VP8BitWriter* %0, i64 0, i32 4
  %37 = load i8*, i8** %36, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %30, i8* align 1 %37, i64 %33, i1 false) #4
  br label %38

38:                                               ; preds = %35, %32
  %39 = getelementptr inbounds %struct.VP8BitWriter, %struct.VP8BitWriter* %0, i64 0, i32 4
  %40 = load i8*, i8** %39, align 8
  tail call void @WebPSafeFree(i8* %40) #4
  store i8* %30, i8** %39, align 8
  store i64 %29, i64* %21, align 8
  br label %43

41:                                               ; preds = %24
  %42 = getelementptr inbounds %struct.VP8BitWriter, %struct.VP8BitWriter* %0, i64 0, i32 7
  store i32 1, i32* %42, align 8
  br label %81

43:                                               ; preds = %38, %13
  %44 = and i32 %7, 256
  %45 = icmp ne i32 %44, 0
  %46 = icmp ne i64 %15, 0
  %47 = and i1 %45, %46
  br i1 %47, label %48, label %55

48:                                               ; preds = %43
  %49 = getelementptr inbounds %struct.VP8BitWriter, %struct.VP8BitWriter* %0, i64 0, i32 4
  %50 = load i8*, i8** %49, align 8
  %51 = add i64 %15, -1
  %52 = getelementptr inbounds i8, i8* %50, i64 %51
  %53 = load i8, i8* %52, align 1
  %54 = add i8 %53, 1
  store i8 %54, i8* %52, align 1
  br label %55

55:                                               ; preds = %48, %43
  %56 = load i32, i32* %16, align 8
  %57 = icmp sgt i32 %56, 0
  br i1 %57, label %58, label %70

58:                                               ; preds = %55
  %59 = xor i1 %45, true
  %60 = sext i1 %59 to i8
  %61 = getelementptr inbounds %struct.VP8BitWriter, %struct.VP8BitWriter* %0, i64 0, i32 4
  br label %62

62:                                               ; preds = %58, %62
  %63 = phi i64 [ %15, %58 ], [ %65, %62 ]
  %64 = load i8*, i8** %61, align 8
  %65 = add i64 %63, 1
  %66 = getelementptr inbounds i8, i8* %64, i64 %63
  store i8 %60, i8* %66, align 1
  %67 = load i32, i32* %16, align 8
  %68 = add nsw i32 %67, -1
  store i32 %68, i32* %16, align 8
  %69 = icmp sgt i32 %68, 0
  br i1 %69, label %62, label %70

70:                                               ; preds = %62, %55
  %71 = phi i64 [ %15, %55 ], [ %65, %62 ]
  %72 = trunc i32 %7 to i8
  %73 = getelementptr inbounds %struct.VP8BitWriter, %struct.VP8BitWriter* %0, i64 0, i32 4
  %74 = load i8*, i8** %73, align 8
  %75 = add i64 %71, 1
  %76 = getelementptr inbounds i8, i8* %74, i64 %71
  store i8 %72, i8* %76, align 1
  store i64 %75, i64* %14, align 8
  br label %81

77:                                               ; preds = %1
  %78 = getelementptr inbounds %struct.VP8BitWriter, %struct.VP8BitWriter* %0, i64 0, i32 2
  %79 = load i32, i32* %78, align 8
  %80 = add nsw i32 %79, 1
  store i32 %80, i32* %78, align 8
  br label %81

81:                                               ; preds = %41, %77, %70
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @VP8PutBitUniform(%struct.VP8BitWriter* nocapture, i32 returned) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.VP8BitWriter, %struct.VP8BitWriter* %0, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = ashr i32 %4, 1
  %6 = icmp eq i32 %1, 0
  br i1 %6, label %13, label %7

7:                                                ; preds = %2
  %8 = add nsw i32 %5, 1
  %9 = getelementptr inbounds %struct.VP8BitWriter, %struct.VP8BitWriter* %0, i64 0, i32 1
  %10 = load i32, i32* %9, align 4
  %11 = add nsw i32 %10, %8
  store i32 %11, i32* %9, align 4
  %12 = sub nsw i32 %4, %8
  br label %13

13:                                               ; preds = %2, %7
  %14 = phi i32 [ %12, %7 ], [ %5, %2 ]
  store i32 %14, i32* %3, align 8
  %15 = icmp slt i32 %14, 127
  br i1 %15, label %16, label %29

16:                                               ; preds = %13
  %17 = sext i32 %14 to i64
  %18 = getelementptr inbounds [128 x i8], [128 x i8]* @kNewRange, i64 0, i64 %17
  %19 = load i8, i8* %18, align 1
  %20 = zext i8 %19 to i32
  store i32 %20, i32* %3, align 8
  %21 = getelementptr inbounds %struct.VP8BitWriter, %struct.VP8BitWriter* %0, i64 0, i32 1
  %22 = load i32, i32* %21, align 4
  %23 = shl i32 %22, 1
  store i32 %23, i32* %21, align 4
  %24 = getelementptr inbounds %struct.VP8BitWriter, %struct.VP8BitWriter* %0, i64 0, i32 3
  %25 = load i32, i32* %24, align 4
  %26 = add nsw i32 %25, 1
  store i32 %26, i32* %24, align 4
  %27 = icmp sgt i32 %25, -1
  br i1 %27, label %28, label %29

28:                                               ; preds = %16
  tail call fastcc void @Flush(%struct.VP8BitWriter* %0)
  br label %29

29:                                               ; preds = %16, %28, %13
  ret i32 %1
}

; Function Attrs: nounwind ssp uwtable
define hidden void @VP8PutBits(%struct.VP8BitWriter* nocapture, i32, i32) local_unnamed_addr #0 {
  %4 = add nsw i32 %2, -1
  %5 = shl i32 1, %4
  %6 = getelementptr inbounds %struct.VP8BitWriter, %struct.VP8BitWriter* %0, i64 0, i32 0
  %7 = getelementptr inbounds %struct.VP8BitWriter, %struct.VP8BitWriter* %0, i64 0, i32 1
  %8 = getelementptr inbounds %struct.VP8BitWriter, %struct.VP8BitWriter* %0, i64 0, i32 3
  br label %9

9:                                                ; preds = %3, %34
  %10 = phi i32 [ %5, %3 ], [ %35, %34 ]
  %11 = and i32 %10, %1
  %12 = load i32, i32* %6, align 8
  %13 = ashr i32 %12, 1
  %14 = icmp eq i32 %11, 0
  br i1 %14, label %20, label %15

15:                                               ; preds = %9
  %16 = add nsw i32 %13, 1
  %17 = load i32, i32* %7, align 4
  %18 = add nsw i32 %17, %16
  store i32 %18, i32* %7, align 4
  %19 = sub nsw i32 %12, %16
  br label %20

20:                                               ; preds = %15, %9
  %21 = phi i32 [ %19, %15 ], [ %13, %9 ]
  store i32 %21, i32* %6, align 8
  %22 = icmp slt i32 %21, 127
  br i1 %22, label %23, label %34

23:                                               ; preds = %20
  %24 = sext i32 %21 to i64
  %25 = getelementptr inbounds [128 x i8], [128 x i8]* @kNewRange, i64 0, i64 %24
  %26 = load i8, i8* %25, align 1
  %27 = zext i8 %26 to i32
  store i32 %27, i32* %6, align 8
  %28 = load i32, i32* %7, align 4
  %29 = shl i32 %28, 1
  store i32 %29, i32* %7, align 4
  %30 = load i32, i32* %8, align 4
  %31 = add nsw i32 %30, 1
  store i32 %31, i32* %8, align 4
  %32 = icmp sgt i32 %30, -1
  br i1 %32, label %33, label %34

33:                                               ; preds = %23
  tail call fastcc void @Flush(%struct.VP8BitWriter* %0) #4
  br label %34

34:                                               ; preds = %20, %23, %33
  %35 = lshr i32 %10, 1
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %37, label %9

37:                                               ; preds = %34
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @VP8PutSignedBits(%struct.VP8BitWriter* nocapture, i32, i32) local_unnamed_addr #0 {
  %4 = icmp eq i32 %1, 0
  %5 = getelementptr inbounds %struct.VP8BitWriter, %struct.VP8BitWriter* %0, i64 0, i32 0
  %6 = load i32, i32* %5, align 8
  %7 = ashr i32 %6, 1
  br i1 %4, label %14, label %8

8:                                                ; preds = %3
  %9 = add nsw i32 %7, 1
  %10 = getelementptr inbounds %struct.VP8BitWriter, %struct.VP8BitWriter* %0, i64 0, i32 1
  %11 = load i32, i32* %10, align 4
  %12 = add nsw i32 %11, %9
  store i32 %12, i32* %10, align 4
  %13 = sub nsw i32 %6, %9
  br label %14

14:                                               ; preds = %8, %3
  %15 = phi i32 [ %13, %8 ], [ %7, %3 ]
  store i32 %15, i32* %5, align 8
  %16 = icmp slt i32 %15, 127
  br i1 %16, label %17, label %30

17:                                               ; preds = %14
  %18 = sext i32 %15 to i64
  %19 = getelementptr inbounds [128 x i8], [128 x i8]* @kNewRange, i64 0, i64 %18
  %20 = load i8, i8* %19, align 1
  %21 = zext i8 %20 to i32
  store i32 %21, i32* %5, align 8
  %22 = getelementptr inbounds %struct.VP8BitWriter, %struct.VP8BitWriter* %0, i64 0, i32 1
  %23 = load i32, i32* %22, align 4
  %24 = shl i32 %23, 1
  store i32 %24, i32* %22, align 4
  %25 = getelementptr inbounds %struct.VP8BitWriter, %struct.VP8BitWriter* %0, i64 0, i32 3
  %26 = load i32, i32* %25, align 4
  %27 = add nsw i32 %26, 1
  store i32 %27, i32* %25, align 4
  %28 = icmp sgt i32 %26, -1
  br i1 %28, label %29, label %30

29:                                               ; preds = %17
  tail call fastcc void @Flush(%struct.VP8BitWriter* %0) #4
  br label %30

30:                                               ; preds = %14, %17, %29
  br i1 %4, label %100, label %31

31:                                               ; preds = %30
  %32 = icmp slt i32 %1, 0
  %33 = shl i32 %1, 1
  br i1 %32, label %34, label %68

34:                                               ; preds = %31
  %35 = sub i32 0, %33
  %36 = or i32 %35, 1
  %37 = shl i32 1, %2
  %38 = getelementptr inbounds %struct.VP8BitWriter, %struct.VP8BitWriter* %0, i64 0, i32 1
  %39 = getelementptr inbounds %struct.VP8BitWriter, %struct.VP8BitWriter* %0, i64 0, i32 3
  br label %40

40:                                               ; preds = %65, %34
  %41 = phi i32 [ %37, %34 ], [ %66, %65 ]
  %42 = and i32 %41, %36
  %43 = load i32, i32* %5, align 8
  %44 = ashr i32 %43, 1
  %45 = icmp eq i32 %42, 0
  br i1 %45, label %51, label %46

46:                                               ; preds = %40
  %47 = add nsw i32 %44, 1
  %48 = load i32, i32* %38, align 4
  %49 = add nsw i32 %48, %47
  store i32 %49, i32* %38, align 4
  %50 = sub nsw i32 %43, %47
  br label %51

51:                                               ; preds = %46, %40
  %52 = phi i32 [ %50, %46 ], [ %44, %40 ]
  store i32 %52, i32* %5, align 8
  %53 = icmp slt i32 %52, 127
  br i1 %53, label %54, label %65

54:                                               ; preds = %51
  %55 = sext i32 %52 to i64
  %56 = getelementptr inbounds [128 x i8], [128 x i8]* @kNewRange, i64 0, i64 %55
  %57 = load i8, i8* %56, align 1
  %58 = zext i8 %57 to i32
  store i32 %58, i32* %5, align 8
  %59 = load i32, i32* %38, align 4
  %60 = shl i32 %59, 1
  store i32 %60, i32* %38, align 4
  %61 = load i32, i32* %39, align 4
  %62 = add nsw i32 %61, 1
  store i32 %62, i32* %39, align 4
  %63 = icmp sgt i32 %61, -1
  br i1 %63, label %64, label %65

64:                                               ; preds = %54
  tail call fastcc void @Flush(%struct.VP8BitWriter* %0) #4
  br label %65

65:                                               ; preds = %64, %54, %51
  %66 = lshr i32 %41, 1
  %67 = icmp eq i32 %66, 0
  br i1 %67, label %100, label %40

68:                                               ; preds = %31
  %69 = shl i32 1, %2
  %70 = getelementptr inbounds %struct.VP8BitWriter, %struct.VP8BitWriter* %0, i64 0, i32 1
  %71 = getelementptr inbounds %struct.VP8BitWriter, %struct.VP8BitWriter* %0, i64 0, i32 3
  br label %72

72:                                               ; preds = %97, %68
  %73 = phi i32 [ %69, %68 ], [ %98, %97 ]
  %74 = and i32 %73, %33
  %75 = load i32, i32* %5, align 8
  %76 = ashr i32 %75, 1
  %77 = icmp eq i32 %74, 0
  br i1 %77, label %83, label %78

78:                                               ; preds = %72
  %79 = add nsw i32 %76, 1
  %80 = load i32, i32* %70, align 4
  %81 = add nsw i32 %80, %79
  store i32 %81, i32* %70, align 4
  %82 = sub nsw i32 %75, %79
  br label %83

83:                                               ; preds = %78, %72
  %84 = phi i32 [ %82, %78 ], [ %76, %72 ]
  store i32 %84, i32* %5, align 8
  %85 = icmp slt i32 %84, 127
  br i1 %85, label %86, label %97

86:                                               ; preds = %83
  %87 = sext i32 %84 to i64
  %88 = getelementptr inbounds [128 x i8], [128 x i8]* @kNewRange, i64 0, i64 %87
  %89 = load i8, i8* %88, align 1
  %90 = zext i8 %89 to i32
  store i32 %90, i32* %5, align 8
  %91 = load i32, i32* %70, align 4
  %92 = shl i32 %91, 1
  store i32 %92, i32* %70, align 4
  %93 = load i32, i32* %71, align 4
  %94 = add nsw i32 %93, 1
  store i32 %94, i32* %71, align 4
  %95 = icmp sgt i32 %93, -1
  br i1 %95, label %96, label %97

96:                                               ; preds = %86
  tail call fastcc void @Flush(%struct.VP8BitWriter* %0) #4
  br label %97

97:                                               ; preds = %96, %86, %83
  %98 = lshr i32 %73, 1
  %99 = icmp eq i32 %98, 0
  br i1 %99, label %100, label %72

100:                                              ; preds = %97, %65, %30
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @VP8BitWriterInit(%struct.VP8BitWriter* nocapture, i64) local_unnamed_addr #0 {
  %3 = bitcast %struct.VP8BitWriter* %0 to <4 x i32>*
  store <4 x i32> <i32 254, i32 0, i32 0, i32 -8>, <4 x i32>* %3, align 8
  %4 = getelementptr inbounds %struct.VP8BitWriter, %struct.VP8BitWriter* %0, i64 0, i32 5
  %5 = getelementptr inbounds %struct.VP8BitWriter, %struct.VP8BitWriter* %0, i64 0, i32 6
  %6 = getelementptr inbounds %struct.VP8BitWriter, %struct.VP8BitWriter* %0, i64 0, i32 7
  %7 = getelementptr inbounds %struct.VP8BitWriter, %struct.VP8BitWriter* %0, i64 0, i32 4
  %8 = icmp eq i64 %1, 0
  %9 = bitcast i8** %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %9, i8 0, i64 28, i1 false)
  br i1 %8, label %23, label %10

10:                                               ; preds = %2
  %11 = icmp ugt i64 %1, 1024
  %12 = select i1 %11, i64 %1, i64 1024
  %13 = tail call i8* @WebPSafeMalloc(i64 1, i64 %12) #4
  %14 = icmp eq i8* %13, null
  br i1 %14, label %15, label %16

15:                                               ; preds = %10
  store i32 1, i32* %6, align 8
  br label %23

16:                                               ; preds = %10
  %17 = load i64, i64* %4, align 8
  %18 = icmp eq i64 %17, 0
  br i1 %18, label %21, label %19

19:                                               ; preds = %16
  %20 = load i8*, i8** %7, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %13, i8* align 1 %20, i64 %17, i1 false) #4
  br label %21

21:                                               ; preds = %19, %16
  %22 = load i8*, i8** %7, align 8
  tail call void @WebPSafeFree(i8* %22) #4
  store i8* %13, i8** %7, align 8
  store i64 %12, i64* %5, align 8
  br label %23

23:                                               ; preds = %21, %15, %2
  %24 = phi i32 [ 1, %2 ], [ 0, %15 ], [ 1, %21 ]
  ret i32 %24
}

; Function Attrs: nounwind ssp uwtable
define hidden i8* @VP8BitWriterFinish(%struct.VP8BitWriter* nocapture) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.VP8BitWriter, %struct.VP8BitWriter* %0, i64 0, i32 3
  %3 = load i32, i32* %2, align 4
  %4 = sub i32 8, %3
  %5 = shl i32 1, %4
  %6 = getelementptr inbounds %struct.VP8BitWriter, %struct.VP8BitWriter* %0, i64 0, i32 0
  %7 = getelementptr inbounds %struct.VP8BitWriter, %struct.VP8BitWriter* %0, i64 0, i32 1
  br label %8

8:                                                ; preds = %24, %1
  %9 = phi i32 [ %5, %1 ], [ %25, %24 ]
  %10 = load i32, i32* %6, align 8
  %11 = ashr i32 %10, 1
  store i32 %11, i32* %6, align 8
  %12 = icmp slt i32 %10, 254
  br i1 %12, label %13, label %24

13:                                               ; preds = %8
  %14 = sext i32 %11 to i64
  %15 = getelementptr inbounds [128 x i8], [128 x i8]* @kNewRange, i64 0, i64 %14
  %16 = load i8, i8* %15, align 1
  %17 = zext i8 %16 to i32
  store i32 %17, i32* %6, align 8
  %18 = load i32, i32* %7, align 4
  %19 = shl i32 %18, 1
  store i32 %19, i32* %7, align 4
  %20 = load i32, i32* %2, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, i32* %2, align 4
  %22 = icmp sgt i32 %20, -1
  br i1 %22, label %23, label %24

23:                                               ; preds = %13
  tail call fastcc void @Flush(%struct.VP8BitWriter* %0) #4
  br label %24

24:                                               ; preds = %23, %13, %8
  %25 = lshr i32 %9, 1
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %27, label %8

27:                                               ; preds = %24
  store i32 0, i32* %2, align 4
  tail call fastcc void @Flush(%struct.VP8BitWriter* %0)
  %28 = getelementptr inbounds %struct.VP8BitWriter, %struct.VP8BitWriter* %0, i64 0, i32 4
  %29 = load i8*, i8** %28, align 8
  ret i8* %29
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @VP8BitWriterAppend(%struct.VP8BitWriter* nocapture, i8* nocapture readonly, i64) local_unnamed_addr #0 {
  %4 = getelementptr inbounds %struct.VP8BitWriter, %struct.VP8BitWriter* %0, i64 0, i32 3
  %5 = load i32, i32* %4, align 4
  %6 = icmp eq i32 %5, -8
  br i1 %6, label %7, label %43

7:                                                ; preds = %3
  %8 = getelementptr inbounds %struct.VP8BitWriter, %struct.VP8BitWriter* %0, i64 0, i32 5
  %9 = load i64, i64* %8, align 8
  %10 = add i64 %9, %2
  %11 = getelementptr inbounds %struct.VP8BitWriter, %struct.VP8BitWriter* %0, i64 0, i32 6
  %12 = load i64, i64* %11, align 8
  %13 = icmp ugt i64 %10, %12
  br i1 %13, label %17, label %14

14:                                               ; preds = %7
  %15 = getelementptr inbounds %struct.VP8BitWriter, %struct.VP8BitWriter* %0, i64 0, i32 4
  %16 = load i8*, i8** %15, align 8
  br label %37

17:                                               ; preds = %7
  %18 = shl i64 %12, 1
  %19 = icmp ult i64 %18, %10
  %20 = select i1 %19, i64 %10, i64 %18
  %21 = icmp ugt i64 %20, 1024
  %22 = select i1 %21, i64 %20, i64 1024
  %23 = tail call i8* @WebPSafeMalloc(i64 1, i64 %22) #4
  %24 = icmp eq i8* %23, null
  br i1 %24, label %35, label %25

25:                                               ; preds = %17
  %26 = load i64, i64* %8, align 8
  %27 = icmp eq i64 %26, 0
  br i1 %27, label %31, label %28

28:                                               ; preds = %25
  %29 = getelementptr inbounds %struct.VP8BitWriter, %struct.VP8BitWriter* %0, i64 0, i32 4
  %30 = load i8*, i8** %29, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %23, i8* align 1 %30, i64 %26, i1 false) #4
  br label %31

31:                                               ; preds = %28, %25
  %32 = getelementptr inbounds %struct.VP8BitWriter, %struct.VP8BitWriter* %0, i64 0, i32 4
  %33 = load i8*, i8** %32, align 8
  tail call void @WebPSafeFree(i8* %33) #4
  store i8* %23, i8** %32, align 8
  store i64 %22, i64* %11, align 8
  %34 = load i64, i64* %8, align 8
  br label %37

35:                                               ; preds = %17
  %36 = getelementptr inbounds %struct.VP8BitWriter, %struct.VP8BitWriter* %0, i64 0, i32 7
  store i32 1, i32* %36, align 8
  br label %43

37:                                               ; preds = %14, %31
  %38 = phi i64 [ %9, %14 ], [ %34, %31 ]
  %39 = phi i8* [ %16, %14 ], [ %23, %31 ]
  %40 = getelementptr inbounds i8, i8* %39, i64 %38
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %40, i8* align 1 %1, i64 %2, i1 false)
  %41 = load i64, i64* %8, align 8
  %42 = add i64 %41, %2
  store i64 %42, i64* %8, align 8
  br label %43

43:                                               ; preds = %35, %3, %37
  %44 = phi i32 [ 1, %37 ], [ 0, %3 ], [ 0, %35 ]
  ret i32 %44
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @VP8BitWriterWipeOut(%struct.VP8BitWriter*) local_unnamed_addr #0 {
  %2 = icmp eq %struct.VP8BitWriter* %0, null
  br i1 %2, label %7, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.VP8BitWriter, %struct.VP8BitWriter* %0, i64 0, i32 4
  %5 = load i8*, i8** %4, align 8
  tail call void @WebPSafeFree(i8* %5) #4
  %6 = bitcast %struct.VP8BitWriter* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 0, i64 48, i1 false)
  br label %7

7:                                                ; preds = %1, %3
  ret void
}

declare void @WebPSafeFree(i8*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @VP8LBitWriterInit(%struct.VP8LBitWriter* nocapture, i64) local_unnamed_addr #0 {
  %3 = bitcast %struct.VP8LBitWriter* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %3, i8 0, i64 48, i1 false)
  %4 = getelementptr inbounds %struct.VP8LBitWriter, %struct.VP8LBitWriter* %0, i64 0, i32 2
  %5 = add i64 %1, 1024
  %6 = and i64 %5, -1024
  %7 = tail call i8* @WebPSafeMalloc(i64 1, i64 %6) #4
  %8 = icmp eq i8* %7, null
  br i1 %8, label %9, label %11

9:                                                ; preds = %2
  %10 = getelementptr inbounds %struct.VP8LBitWriter, %struct.VP8LBitWriter* %0, i64 0, i32 5
  store i32 1, i32* %10, align 8
  br label %16

11:                                               ; preds = %2
  %12 = getelementptr inbounds %struct.VP8LBitWriter, %struct.VP8LBitWriter* %0, i64 0, i32 3
  %13 = getelementptr inbounds %struct.VP8LBitWriter, %struct.VP8LBitWriter* %0, i64 0, i32 4
  %14 = load i8*, i8** %4, align 8
  tail call void @WebPSafeFree(i8* %14) #4
  store i8* %7, i8** %4, align 8
  store i8* %7, i8** %12, align 8
  %15 = getelementptr inbounds i8, i8* %7, i64 %6
  store i8* %15, i8** %13, align 8
  br label %16

16:                                               ; preds = %9, %11
  %17 = phi i32 [ 0, %9 ], [ 1, %11 ]
  ret i32 %17
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @VP8LBitWriterClone(%struct.VP8LBitWriter* nocapture readonly, %struct.VP8LBitWriter* nocapture) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.VP8LBitWriter, %struct.VP8LBitWriter* %0, i64 0, i32 3
  %4 = bitcast i8** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %struct.VP8LBitWriter, %struct.VP8LBitWriter* %0, i64 0, i32 2
  %7 = bitcast i8** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = getelementptr inbounds %struct.VP8LBitWriter, %struct.VP8LBitWriter* %1, i64 0, i32 4
  %11 = bitcast i8** %10 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = getelementptr inbounds %struct.VP8LBitWriter, %struct.VP8LBitWriter* %1, i64 0, i32 2
  %14 = bitcast i8** %13 to i64*
  %15 = load i64, i64* %14, align 8
  %16 = sub i64 %12, %15
  %17 = getelementptr inbounds %struct.VP8LBitWriter, %struct.VP8LBitWriter* %1, i64 0, i32 3
  %18 = bitcast i8** %17 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = sub i64 %19, %15
  %21 = add i64 %20, %9
  %22 = icmp eq i64 %16, 0
  %23 = icmp ugt i64 %21, %16
  %24 = or i1 %22, %23
  %25 = inttoptr i64 %15 to i8*
  %26 = inttoptr i64 %8 to i8*
  br i1 %24, label %27, label %47

27:                                               ; preds = %2
  %28 = mul i64 %16, 3
  %29 = lshr i64 %28, 1
  %30 = icmp ult i64 %29, %21
  %31 = select i1 %30, i64 %21, i64 %29
  %32 = add i64 %31, 1024
  %33 = and i64 %32, -1024
  %34 = tail call i8* @WebPSafeMalloc(i64 1, i64 %33) #4
  %35 = icmp eq i8* %34, null
  br i1 %35, label %45, label %36

36:                                               ; preds = %27
  %37 = icmp eq i64 %20, 0
  br i1 %37, label %40, label %38

38:                                               ; preds = %36
  %39 = load i8*, i8** %13, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %34, i8* align 1 %39, i64 %20, i1 false) #4
  br label %40

40:                                               ; preds = %38, %36
  %41 = load i8*, i8** %13, align 8
  tail call void @WebPSafeFree(i8* %41) #4
  store i8* %34, i8** %13, align 8
  %42 = getelementptr inbounds i8, i8* %34, i64 %20
  store i8* %42, i8** %17, align 8
  %43 = getelementptr inbounds i8, i8* %34, i64 %33
  store i8* %43, i8** %10, align 8
  %44 = load i8*, i8** %6, align 8
  br label %47

45:                                               ; preds = %27
  %46 = getelementptr inbounds %struct.VP8LBitWriter, %struct.VP8LBitWriter* %1, i64 0, i32 5
  store i32 1, i32* %46, align 8
  br label %61

47:                                               ; preds = %40, %2
  %48 = phi i8* [ %44, %40 ], [ %26, %2 ]
  %49 = phi i8* [ %34, %40 ], [ %25, %2 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %49, i8* align 1 %48, i64 %9, i1 false)
  %50 = getelementptr inbounds %struct.VP8LBitWriter, %struct.VP8LBitWriter* %0, i64 0, i32 0
  %51 = load i64, i64* %50, align 8
  %52 = getelementptr inbounds %struct.VP8LBitWriter, %struct.VP8LBitWriter* %1, i64 0, i32 0
  store i64 %51, i64* %52, align 8
  %53 = getelementptr inbounds %struct.VP8LBitWriter, %struct.VP8LBitWriter* %0, i64 0, i32 1
  %54 = load i32, i32* %53, align 8
  %55 = getelementptr inbounds %struct.VP8LBitWriter, %struct.VP8LBitWriter* %1, i64 0, i32 1
  store i32 %54, i32* %55, align 8
  %56 = getelementptr inbounds %struct.VP8LBitWriter, %struct.VP8LBitWriter* %0, i64 0, i32 5
  %57 = load i32, i32* %56, align 8
  %58 = getelementptr inbounds %struct.VP8LBitWriter, %struct.VP8LBitWriter* %1, i64 0, i32 5
  store i32 %57, i32* %58, align 8
  %59 = load i8*, i8** %13, align 8
  %60 = getelementptr inbounds i8, i8* %59, i64 %9
  store i8* %60, i8** %17, align 8
  br label %61

61:                                               ; preds = %45, %47
  %62 = phi i32 [ 1, %47 ], [ 0, %45 ]
  ret i32 %62
}

; Function Attrs: nounwind ssp uwtable
define hidden void @VP8LBitWriterWipeOut(%struct.VP8LBitWriter*) local_unnamed_addr #0 {
  %2 = icmp eq %struct.VP8LBitWriter* %0, null
  br i1 %2, label %7, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.VP8LBitWriter, %struct.VP8LBitWriter* %0, i64 0, i32 2
  %5 = load i8*, i8** %4, align 8
  tail call void @WebPSafeFree(i8* %5) #4
  %6 = bitcast %struct.VP8LBitWriter* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 0, i64 48, i1 false)
  br label %7

7:                                                ; preds = %1, %3
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @VP8LBitWriterReset(%struct.VP8LBitWriter* nocapture readonly, %struct.VP8LBitWriter* nocapture) local_unnamed_addr #3 {
  %3 = getelementptr inbounds %struct.VP8LBitWriter, %struct.VP8LBitWriter* %0, i64 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %struct.VP8LBitWriter, %struct.VP8LBitWriter* %1, i64 0, i32 0
  store i64 %4, i64* %5, align 8
  %6 = getelementptr inbounds %struct.VP8LBitWriter, %struct.VP8LBitWriter* %0, i64 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = getelementptr inbounds %struct.VP8LBitWriter, %struct.VP8LBitWriter* %1, i64 0, i32 1
  store i32 %7, i32* %8, align 8
  %9 = getelementptr inbounds %struct.VP8LBitWriter, %struct.VP8LBitWriter* %1, i64 0, i32 2
  %10 = load i8*, i8** %9, align 8
  %11 = getelementptr inbounds %struct.VP8LBitWriter, %struct.VP8LBitWriter* %0, i64 0, i32 3
  %12 = bitcast i8** %11 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = getelementptr inbounds %struct.VP8LBitWriter, %struct.VP8LBitWriter* %0, i64 0, i32 2
  %15 = bitcast i8** %14 to i64*
  %16 = load i64, i64* %15, align 8
  %17 = sub i64 %13, %16
  %18 = getelementptr inbounds i8, i8* %10, i64 %17
  %19 = getelementptr inbounds %struct.VP8LBitWriter, %struct.VP8LBitWriter* %1, i64 0, i32 3
  store i8* %18, i8** %19, align 8
  %20 = getelementptr inbounds %struct.VP8LBitWriter, %struct.VP8LBitWriter* %0, i64 0, i32 5
  %21 = load i32, i32* %20, align 8
  %22 = getelementptr inbounds %struct.VP8LBitWriter, %struct.VP8LBitWriter* %1, i64 0, i32 5
  store i32 %21, i32* %22, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @VP8LBitWriterSwap(%struct.VP8LBitWriter* nocapture, %struct.VP8LBitWriter* nocapture) local_unnamed_addr #0 {
  %3 = alloca %struct.VP8LBitWriter, align 8
  %4 = bitcast %struct.VP8LBitWriter* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %4)
  %5 = bitcast %struct.VP8LBitWriter* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %4, i8* align 8 %5, i64 48, i1 false)
  %6 = bitcast %struct.VP8LBitWriter* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %5, i8* align 8 %6, i64 48, i1 false)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* nonnull align 8 %4, i64 48, i1 false)
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %4)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @VP8LPutBitsFlushBits(%struct.VP8LBitWriter* nocapture) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.VP8LBitWriter, %struct.VP8LBitWriter* %0, i64 0, i32 3
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr inbounds i8, i8* %3, i64 4
  %5 = getelementptr inbounds %struct.VP8LBitWriter, %struct.VP8LBitWriter* %0, i64 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = icmp ugt i8* %4, %6
  %8 = ptrtoint i8* %6 to i64
  %9 = bitcast i8* %3 to i32*
  br i1 %7, label %10, label %45

10:                                               ; preds = %1
  %11 = ptrtoint i8* %3 to i64
  %12 = getelementptr inbounds %struct.VP8LBitWriter, %struct.VP8LBitWriter* %0, i64 0, i32 2
  %13 = bitcast i8** %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = sub i64 %8, %14
  %16 = bitcast i8** %2 to i64*
  %17 = sub i64 %11, %14
  %18 = add i64 %8, 32768
  %19 = sub i64 %18, %14
  %20 = add i64 %19, %17
  %21 = icmp eq i64 %15, 0
  %22 = icmp ugt i64 %20, %15
  %23 = or i1 %21, %22
  br i1 %23, label %24, label %45

24:                                               ; preds = %10
  %25 = mul i64 %15, 3
  %26 = lshr i64 %25, 1
  %27 = icmp ult i64 %26, %20
  %28 = select i1 %27, i64 %20, i64 %26
  %29 = add i64 %28, 1024
  %30 = and i64 %29, -1024
  %31 = tail call i8* @WebPSafeMalloc(i64 1, i64 %30) #4
  %32 = icmp eq i8* %31, null
  br i1 %32, label %42, label %33

33:                                               ; preds = %24
  %34 = icmp eq i64 %17, 0
  br i1 %34, label %37, label %35

35:                                               ; preds = %33
  %36 = load i8*, i8** %12, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %31, i8* align 1 %36, i64 %17, i1 false) #4
  br label %37

37:                                               ; preds = %35, %33
  %38 = load i8*, i8** %12, align 8
  tail call void @WebPSafeFree(i8* %38) #4
  store i8* %31, i8** %12, align 8
  %39 = getelementptr inbounds i8, i8* %31, i64 %17
  store i8* %39, i8** %2, align 8
  %40 = getelementptr inbounds i8, i8* %31, i64 %30
  store i8* %40, i8** %5, align 8
  %41 = bitcast i8* %39 to i32*
  br label %45

42:                                               ; preds = %24
  %43 = getelementptr inbounds %struct.VP8LBitWriter, %struct.VP8LBitWriter* %0, i64 0, i32 5
  %44 = load i64, i64* %13, align 8
  store i64 %44, i64* %16, align 8
  store i32 1, i32* %43, align 8
  br label %57

45:                                               ; preds = %10, %37, %1
  %46 = phi i32* [ %9, %10 ], [ %41, %37 ], [ %9, %1 ]
  %47 = getelementptr inbounds %struct.VP8LBitWriter, %struct.VP8LBitWriter* %0, i64 0, i32 0
  %48 = load i64, i64* %47, align 8
  %49 = trunc i64 %48 to i32
  store i32 %49, i32* %46, align 4
  %50 = load i8*, i8** %2, align 8
  %51 = getelementptr inbounds i8, i8* %50, i64 4
  store i8* %51, i8** %2, align 8
  %52 = load i64, i64* %47, align 8
  %53 = lshr i64 %52, 32
  store i64 %53, i64* %47, align 8
  %54 = getelementptr inbounds %struct.VP8LBitWriter, %struct.VP8LBitWriter* %0, i64 0, i32 1
  %55 = load i32, i32* %54, align 8
  %56 = add nsw i32 %55, -32
  store i32 %56, i32* %54, align 8
  br label %57

57:                                               ; preds = %42, %45
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @VP8LPutBitsInternal(%struct.VP8LBitWriter* nocapture, i32, i32) local_unnamed_addr #0 {
  %4 = icmp sgt i32 %2, 0
  br i1 %4, label %5, label %75

5:                                                ; preds = %3
  %6 = getelementptr inbounds %struct.VP8LBitWriter, %struct.VP8LBitWriter* %0, i64 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %struct.VP8LBitWriter, %struct.VP8LBitWriter* %0, i64 0, i32 1
  %9 = load i32, i32* %8, align 8
  %10 = icmp sgt i32 %9, 31
  br i1 %10, label %11, label %67

11:                                               ; preds = %5
  %12 = getelementptr inbounds %struct.VP8LBitWriter, %struct.VP8LBitWriter* %0, i64 0, i32 3
  %13 = getelementptr inbounds %struct.VP8LBitWriter, %struct.VP8LBitWriter* %0, i64 0, i32 4
  %14 = getelementptr inbounds %struct.VP8LBitWriter, %struct.VP8LBitWriter* %0, i64 0, i32 2
  %15 = bitcast i8** %14 to i64*
  %16 = bitcast i8** %12 to i64*
  %17 = load i8*, i8** %12, align 8
  br label %18

18:                                               ; preds = %11, %59
  %19 = phi i8* [ %17, %11 ], [ %63, %59 ]
  %20 = phi i32 [ %9, %11 ], [ %65, %59 ]
  %21 = phi i64 [ %7, %11 ], [ %64, %59 ]
  %22 = bitcast i8* %19 to i32*
  %23 = getelementptr inbounds i8, i8* %19, i64 4
  %24 = load i8*, i8** %13, align 8
  %25 = icmp ugt i8* %23, %24
  %26 = ptrtoint i8* %24 to i64
  br i1 %25, label %27, label %59

27:                                               ; preds = %18
  %28 = ptrtoint i8* %19 to i64
  %29 = load i64, i64* %15, align 8
  %30 = sub i64 %26, %29
  %31 = sub i64 %28, %29
  %32 = add i64 %26, 32768
  %33 = sub i64 %32, %29
  %34 = add i64 %33, %31
  %35 = icmp eq i64 %30, 0
  %36 = icmp ugt i64 %34, %30
  %37 = or i1 %35, %36
  br i1 %37, label %38, label %59

38:                                               ; preds = %27
  %39 = mul i64 %30, 3
  %40 = lshr i64 %39, 1
  %41 = icmp ult i64 %40, %34
  %42 = select i1 %41, i64 %34, i64 %40
  %43 = add i64 %42, 1024
  %44 = and i64 %43, -1024
  %45 = tail call i8* @WebPSafeMalloc(i64 1, i64 %44) #4
  %46 = icmp eq i8* %45, null
  br i1 %46, label %56, label %47

47:                                               ; preds = %38
  %48 = icmp eq i64 %31, 0
  br i1 %48, label %51, label %49

49:                                               ; preds = %47
  %50 = load i8*, i8** %14, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %45, i8* align 1 %50, i64 %31, i1 false) #4
  br label %51

51:                                               ; preds = %49, %47
  %52 = load i8*, i8** %14, align 8
  tail call void @WebPSafeFree(i8* %52) #4
  store i8* %45, i8** %14, align 8
  %53 = getelementptr inbounds i8, i8* %45, i64 %31
  store i8* %53, i8** %12, align 8
  %54 = getelementptr inbounds i8, i8* %45, i64 %44
  store i8* %54, i8** %13, align 8
  %55 = bitcast i8* %53 to i32*
  br label %59

56:                                               ; preds = %38
  %57 = getelementptr inbounds %struct.VP8LBitWriter, %struct.VP8LBitWriter* %0, i64 0, i32 5
  %58 = load i64, i64* %15, align 8
  store i64 %58, i64* %16, align 8
  store i32 1, i32* %57, align 8
  br label %75

59:                                               ; preds = %27, %51, %18
  %60 = phi i32* [ %22, %27 ], [ %55, %51 ], [ %22, %18 ]
  %61 = trunc i64 %21 to i32
  store i32 %61, i32* %60, align 4
  %62 = load i8*, i8** %12, align 8
  %63 = getelementptr inbounds i8, i8* %62, i64 4
  store i8* %63, i8** %12, align 8
  %64 = lshr i64 %21, 32
  %65 = add nsw i32 %20, -32
  %66 = icmp sgt i32 %65, 31
  br i1 %66, label %18, label %67

67:                                               ; preds = %59, %5
  %68 = phi i64 [ %7, %5 ], [ %64, %59 ]
  %69 = phi i32 [ %9, %5 ], [ %65, %59 ]
  %70 = zext i32 %1 to i64
  %71 = zext i32 %69 to i64
  %72 = shl i64 %70, %71
  %73 = or i64 %72, %68
  store i64 %73, i64* %6, align 8
  %74 = add nsw i32 %69, %2
  store i32 %74, i32* %8, align 8
  br label %75

75:                                               ; preds = %56, %3, %67
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i8* @VP8LBitWriterFinish(%struct.VP8LBitWriter* nocapture) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.VP8LBitWriter, %struct.VP8LBitWriter* %0, i64 0, i32 1
  %3 = load i32, i32* %2, align 8
  %4 = add nsw i32 %3, 7
  %5 = ashr i32 %4, 3
  %6 = sext i32 %5 to i64
  %7 = getelementptr inbounds %struct.VP8LBitWriter, %struct.VP8LBitWriter* %0, i64 0, i32 4
  %8 = bitcast i8** %7 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = getelementptr inbounds %struct.VP8LBitWriter, %struct.VP8LBitWriter* %0, i64 0, i32 2
  %11 = bitcast i8** %10 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = sub i64 %9, %12
  %14 = getelementptr inbounds %struct.VP8LBitWriter, %struct.VP8LBitWriter* %0, i64 0, i32 3
  %15 = bitcast i8** %14 to i64*
  %16 = load i64, i64* %15, align 8
  %17 = sub i64 %16, %12
  %18 = add i64 %17, %6
  %19 = icmp eq i64 %13, 0
  %20 = icmp ugt i64 %18, %13
  %21 = or i1 %19, %20
  %22 = inttoptr i64 %16 to i8*
  br i1 %21, label %23, label %43

23:                                               ; preds = %1
  %24 = mul i64 %13, 3
  %25 = lshr i64 %24, 1
  %26 = icmp ult i64 %25, %18
  %27 = select i1 %26, i64 %18, i64 %25
  %28 = add i64 %27, 1024
  %29 = and i64 %28, -1024
  %30 = tail call i8* @WebPSafeMalloc(i64 1, i64 %29) #4
  %31 = icmp eq i8* %30, null
  br i1 %31, label %32, label %34

32:                                               ; preds = %23
  %33 = getelementptr inbounds %struct.VP8LBitWriter, %struct.VP8LBitWriter* %0, i64 0, i32 5
  store i32 1, i32* %33, align 8
  br label %68

34:                                               ; preds = %23
  %35 = icmp eq i64 %17, 0
  br i1 %35, label %38, label %36

36:                                               ; preds = %34
  %37 = load i8*, i8** %10, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %30, i8* align 1 %37, i64 %17, i1 false) #4
  br label %38

38:                                               ; preds = %36, %34
  %39 = load i8*, i8** %10, align 8
  tail call void @WebPSafeFree(i8* %39) #4
  store i8* %30, i8** %10, align 8
  %40 = getelementptr inbounds i8, i8* %30, i64 %17
  store i8* %40, i8** %14, align 8
  %41 = getelementptr inbounds i8, i8* %30, i64 %29
  store i8* %41, i8** %7, align 8
  %42 = load i32, i32* %2, align 8
  br label %43

43:                                               ; preds = %1, %38
  %44 = phi i8* [ %22, %1 ], [ %40, %38 ]
  %45 = phi i32 [ %3, %1 ], [ %42, %38 ]
  %46 = icmp sgt i32 %45, 0
  br i1 %46, label %47, label %67

47:                                               ; preds = %43
  %48 = getelementptr inbounds %struct.VP8LBitWriter, %struct.VP8LBitWriter* %0, i64 0, i32 0
  %49 = load i64, i64* %48, align 8
  %50 = trunc i64 %49 to i8
  %51 = getelementptr inbounds i8, i8* %44, i64 1
  store i8* %51, i8** %14, align 8
  store i8 %50, i8* %44, align 1
  %52 = load i64, i64* %48, align 8
  %53 = lshr i64 %52, 8
  store i64 %53, i64* %48, align 8
  %54 = load i32, i32* %2, align 8
  %55 = add nsw i32 %54, -8
  store i32 %55, i32* %2, align 8
  %56 = icmp sgt i32 %55, 0
  br i1 %56, label %57, label %67

57:                                               ; preds = %47, %57
  %58 = phi i64 [ %63, %57 ], [ %53, %47 ]
  %59 = load i8*, i8** %14, align 8
  %60 = trunc i64 %58 to i8
  %61 = getelementptr inbounds i8, i8* %59, i64 1
  store i8* %61, i8** %14, align 8
  store i8 %60, i8* %59, align 1
  %62 = load i64, i64* %48, align 8
  %63 = lshr i64 %62, 8
  store i64 %63, i64* %48, align 8
  %64 = load i32, i32* %2, align 8
  %65 = add nsw i32 %64, -8
  store i32 %65, i32* %2, align 8
  %66 = icmp sgt i32 %65, 0
  br i1 %66, label %57, label %67

67:                                               ; preds = %57, %47, %43
  store i32 0, i32* %2, align 8
  br label %68

68:                                               ; preds = %32, %67
  %69 = load i8*, i8** %10, align 8
  ret i8* %69
}

declare i8* @WebPSafeMalloc(i64, i64) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
