; ModuleID = '../../third_party/libvpx/source/libvpx/vp9/vp9_cx_iface.c'
source_filename = "../../third_party/libvpx/source/libvpx/vp9/vp9_cx_iface.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.vpx_codec_iface = type { i8*, i32, i64, i32 (%struct.vpx_codec_ctx*, %struct.vpx_codec_priv_enc_mr_cfg*)*, i32 (%struct.vpx_codec_alg_priv*)*, %struct.vpx_codec_ctrl_fn_map*, %struct.vpx_codec_dec_iface, %struct.vpx_codec_enc_iface }
%struct.vpx_codec_ctx = type { i8*, %struct.vpx_codec_iface*, i32, i8*, i64, %union.anon, %struct.vpx_codec_priv* }
%union.anon = type { %struct.vpx_codec_dec_cfg* }
%struct.vpx_codec_dec_cfg = type { i32, i32, i32 }
%struct.vpx_codec_priv = type { i8*, i64, %struct.anon, %struct.anon.1 }
%struct.anon = type { %struct.vpx_codec_priv_cb_pair, %struct.vpx_codec_priv_cb_pair }
%struct.vpx_codec_priv_cb_pair = type { %union.anon.0, i8* }
%union.anon.0 = type { void (i8*, %struct.vpx_image*)* }
%struct.vpx_image = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [4 x i8*], [4 x i32], i32, i8*, i8*, i32, i32, i8* }
%struct.anon.1 = type { %struct.vpx_fixed_buf, i32, i32, %struct.vpx_codec_cx_pkt, i32 }
%struct.vpx_fixed_buf = type { i8*, i64 }
%struct.vpx_codec_cx_pkt = type { i32, %union.anon.2 }
%union.anon.2 = type { %struct.anon.3, [40 x i8] }
%struct.anon.3 = type { i8*, i64, i64, i64, i32, i32, [5 x i32], [5 x i32], [5 x i8] }
%struct.vpx_codec_priv_enc_mr_cfg = type { i32, i32, %struct.vpx_rational, i8* }
%struct.vpx_rational = type { i32, i32 }
%struct.vpx_codec_alg_priv = type { %struct.vpx_codec_priv, %struct.vpx_codec_enc_cfg, %struct.vp9_extracfg, %struct.vpx_rational64, i64, i8, %struct.VP9EncoderConfig, %struct.VP9_COMP*, i8*, i64, i8*, i64, i32, [8 x i64], i64, %struct.vpx_image, i64, %struct.vp8_postproc_cfg, %union.anon.12, i32, %struct.vpx_codec_enc_output_cx_cb_pair, %struct.BufferPool* }
%struct.vpx_codec_enc_cfg = type { i32, i32, i32, i32, i32, i32, i32, %struct.vpx_rational, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.vpx_fixed_buf, %struct.vpx_fixed_buf, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [5 x i32], [5 x i32], i32, [5 x i32], [5 x i32], i32, [16 x i32], [12 x i32], i32 }
%struct.vp9_extracfg = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.vpx_rational64 = type { i64, i32 }
%struct.VP9EncoderConfig = type { i32, i32, i32, i32, i32, double, %struct.vpx_rational, %struct.vpx_rational64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [12 x i32], [5 x i32], [5 x i32], [5 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.vpx_fixed_buf, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.VP9_COMP = type { %struct.FRAME_INFO, [8 x i8], %struct.QUANTS, %struct.ThreadData, %struct.MB_MODE_INFO_EXT*, [8 x i8], [256 x [8 x i16]], [256 x [8 x i16]], %struct.VP9Common, %struct.VP9EncoderConfig, %struct.lookahead_ctx*, %struct.lookahead_entry*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config, %struct.yv12_buffer_config*, %struct.yv12_buffer_config, %struct.yv12_buffer_config*, i8, [50 x %struct.TplDepFrame], [8 x %struct.yv12_buffer_config*], [8 x %struct.EncFrameBuf], %union.pthread_mutex_t, i32, %struct.KMEANS_DATA*, i32, i32, [8 x double], [8 x double], [8 x i32], i32, %struct.TileDataEnc*, i32, i32, [3 x i32], i32, i32, i32, [8 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64*, i32, i32, double*, %struct.yv12_buffer_config, [4 x [64 x %struct.TOKENEXTRA*]], [4 x [64 x %struct.TOKENLIST*]], i64, %struct.RD_OPT, %struct.CODING_CONTEXT, [2 x i32*], [2 x i32*], [2 x i32*], [2 x i32*], i64, i64, i64, %struct.RATE_CONTROL, double, [8 x [4 x i32]], %struct.vpx_codec_pkt_list*, [25 x %struct.MBGRAPH_FRAME_STATS], i32, i32, i32, %struct.SPEED_FEATURES, i32, i32, i32, i32, i32, i8*, i8*, [8 x i32], %struct.CYCLIC_REFRESH*, %struct.ActiveMap, i32 (%struct.macroblock*, %struct.mv*, %struct.mv*, i32, i32, %struct.vp9_variance_vtable*, i32, i32, i32*, i32*, i32**, i32*, i32*, i8*, i32, i32, i32)*, %struct.scale_factors, i32 (%struct.macroblock*, %struct.search_site_config*, %struct.mv*, %struct.mv*, i32, i32, i32*, %struct.vp9_variance_vtable*, %struct.mv*)*, [13 x %struct.vp9_variance_vtable], i64, i64, i64, i64, %struct.TWO_PASS, i8, %struct.yv12_buffer_config, %struct.ALT_REF_AQ*, i32, i32, i32, i32, i32, i32, %struct.SVC, %struct.diff*, i32, i32, i32, %struct.search_site_config, [10 x i32], [7 x [4 x i32]], [2 x [10 x [10 x i32]]], [10 x [10 x [10 x i32]]], [4 x [3 x i32]], [16 x [4 x i32]], [3 x [2 x [4 x i32]]], %struct.vp9_denoiser, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.noise_estimate, i8*, [4 x i64], i64, i64, i64, i8, i32, %struct.VPxWorker*, %struct.EncWorkerData*, %struct.VP9LfSyncData, %struct.VP9BitstreamWorkerData*, i32, %struct.Vp9LevelInfo, %struct.MultiThreadHandle, void (%struct.VP9RowMTSyncData*, i32, i32)*, void (%struct.VP9RowMTSyncData*, i32, i32, i32)*, %struct.ARNRFilterData, i32, i32, i8*, i8*, i8*, i8*, i8, i8, i8*, i32, %struct.LevelConstraint, i8*, i8*, i32, %struct.vpx_roi_map, i32, %struct.EXT_RATECTRL, [8 x i8] }
%struct.FRAME_INFO = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.QUANTS = type { [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]] }
%struct.ThreadData = type { %struct.macroblock, %struct.RD_COUNTS, %struct.FRAME_COUNTS*, %struct.PICK_MODE_CONTEXT*, %struct.PC_TREE*, %struct.PC_TREE*, [8 x i8] }
%struct.macroblock = type { [3 x %struct.macroblock_plane], %struct.macroblockd, %struct.MB_MODE_INFO_EXT*, %struct.MB_MODE_INFO_EXT*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i8, [4 x i32], [4 x i32], i32, [4 x i32], [4 x i32], [4 x i32], [2 x i32*], [2 x i32*], i32**, [4 x i32], [2 x i32*], [2 x i32*], i32**, i32, i32, %struct.MvLimits, [4 x [256 x i8]], [4 x i32], i32, i32, [4 x [2 x [2 x [6 x [2 x [6 x [12 x i32]]]]]]], i32, i32, i32, i32, i32, [12 x i8], [12 x i64], [4 x %struct.mv], [2 x i8], i8, i8, i8, i8, i32, i32, i32, i32, i32, i8, [25 x i8], i8, i8, void (i16*, i32*, i32)*, void (i32*, i8*, i32, i32)*, void (i32*, i16*, i32, i32, i32)*, [8 x i8], [4096 x i8], %struct.scale_factors*, [8 x i8] }
%struct.macroblock_plane = type { [4096 x i16], i32*, i32*, i16*, %struct.buf_2d, [8 x i8], [8 x i16], i16*, i16*, i16*, i16*, i16*, [2 x i64], [8 x i8] }
%struct.buf_2d = type { i8*, i32 }
%struct.macroblockd = type { [3 x %struct.macroblockd_plane], i8, i8, %struct.FRAME_COUNTS*, %struct.TileInfo, i32, %struct.MODE_INFO**, %struct.MODE_INFO*, %struct.MODE_INFO*, i32, i32, [3 x i8]*, i32, i32, i32, i32, %struct.frame_contexts*, [2 x %struct.RefBuffer*], %struct.yv12_buffer_config*, [3 x i8*], [3 x [16 x i8]], i8*, [8 x i8], i32, i32, i32, %struct.vpx_internal_error_info*, i32* }
%struct.macroblockd_plane = type { i32*, i32, i32, %struct.buf_2d, [2 x %struct.buf_2d], i8*, i8*, [8 x [2 x i16]], i16, i16, i8, i8, i16*, i32* }
%struct.TileInfo = type { i32, i32, i32, i32 }
%struct.MODE_INFO = type { i8, i8, i8, i8, i8, i8, i8, i8, [2 x i8], [2 x %union.int_mv], [4 x %struct.b_mode_info] }
%union.int_mv = type { i32 }
%struct.b_mode_info = type { i8, [2 x %union.int_mv] }
%struct.frame_contexts = type { [4 x [9 x i8]], [10 x [9 x i8]], [16 x [3 x i8]], [4 x [2 x [2 x [6 x [6 x [3 x i8]]]]]], [4 x [2 x i8]], [7 x [3 x i8]], [4 x i8], [5 x i8], [5 x [2 x i8]], [5 x i8], %struct.tx_probs, [3 x i8], %struct.nmv_context, i32 }
%struct.tx_probs = type { [2 x [3 x i8]], [2 x [2 x i8]], [2 x [1 x i8]] }
%struct.nmv_context = type { [3 x i8], [2 x %struct.nmv_component] }
%struct.nmv_component = type { i8, [10 x i8], [1 x i8], [10 x i8], [2 x [3 x i8]], [3 x i8], i8, i8 }
%struct.RefBuffer = type { i32, %struct.yv12_buffer_config*, %struct.scale_factors }
%struct.vpx_internal_error_info = type { i32, i32, [80 x i8], i32, [1 x %struct.__jmp_buf_tag] }
%struct.__jmp_buf_tag = type { [8 x i64], i32, %struct.__sigset_t }
%struct.__sigset_t = type { [16 x i64] }
%struct.MvLimits = type { i32, i32, i32, i32 }
%struct.mv = type { i16, i16 }
%struct.RD_COUNTS = type { [4 x [2 x [2 x [6 x [6 x [12 x i32]]]]]], [3 x i64], [4 x i64] }
%struct.FRAME_COUNTS = type { [4 x [10 x i32]], [10 x [10 x i32]], [16 x [4 x i32]], [4 x [2 x [2 x [6 x [6 x [4 x i32]]]]]], [4 x [2 x [2 x [6 x [6 x i32]]]]], [4 x [3 x i32]], [7 x [4 x i32]], [4 x [2 x i32]], [5 x [2 x i32]], [5 x [2 x [2 x i32]]], [5 x [2 x i32]], %struct.tx_counts, [3 x [2 x i32]], %struct.nmv_context_counts }
%struct.tx_counts = type { [2 x [4 x i32]], [2 x [3 x i32]], [2 x [2 x i32]], [4 x i32] }
%struct.nmv_context_counts = type { [4 x i32], [2 x %struct.nmv_component_counts] }
%struct.nmv_component_counts = type { [2 x i32], [11 x i32], [2 x i32], [10 x [2 x i32]], [2 x [4 x i32]], [4 x i32], [2 x i32], [2 x i32] }
%struct.PICK_MODE_CONTEXT = type { %struct.MODE_INFO, %struct.MB_MODE_INFO_EXT, i8*, [3 x [3 x i32*]], [3 x [3 x i32*]], [3 x [3 x i32*]], [3 x [3 x i16*]], [3 x [3 x i32*]], [3 x [3 x i32*]], [3 x [3 x i32*]], [3 x [3 x i16*]], i32, i32, i32, i32, i32, [12 x i8], i32, i32, i32, i32, [4 x i64], i32, i64, i64, i32, i32, i32, i8, %union.int_mv, i8, i8, i32, [4 x %struct.mv], i8, i32, i8 }
%struct.MB_MODE_INFO_EXT = type { [4 x [2 x %union.int_mv]], [4 x i8] }
%struct.PC_TREE = type { i32, i32, i8, %struct.PICK_MODE_CONTEXT, [2 x %struct.PICK_MODE_CONTEXT], [2 x %struct.PICK_MODE_CONTEXT], %union.anon.4, %struct.mv }
%union.anon.4 = type { [4 x %struct.PC_TREE*] }
%struct.VP9Common = type { %struct.vpx_internal_error_info, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.yv12_buffer_config*, %struct.RefCntBuffer*, %struct.RefCntBuffer*, [8 x i32], [8 x i32], [3 x %struct.RefBuffer], i32, i32, %struct.yv12_buffer_config, %struct.yv12_buffer_config, i32, i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [8 x [2 x i16]], [8 x [2 x i16]], i32, %struct.MODE_INFO*, %struct.MODE_INFO*, %struct.MODE_INFO*, %struct.MODE_INFO*, i32 (%struct.VP9Common*, i32)*, void (%struct.VP9Common*)*, void (%struct.VP9Common*)*, %struct.MODE_INFO**, %struct.MODE_INFO**, %struct.MODE_INFO**, %struct.MODE_INFO**, i32, i32, i32, [2 x i8*], i8*, i8*, i32, i8, [11 x i8], %struct.loop_filter_info_n, i32, [4 x i32], %struct.loopfilter, %struct.segmentation, i8, [2 x i8], i32, %struct.frame_contexts*, %struct.frame_contexts*, i32, %struct.FRAME_COUNTS, i32, i32, i32, i32, i32, %struct.postproc_state, i32, i32, i32, i32, i32, i32, %struct.BufferPool*, i8*, i8*, i32, i32, [8 x i8] }
%struct.RefCntBuffer = type { i32, %struct.MV_REF*, i32, i32, i8, i32, i32, %struct.vpx_codec_frame_buffer, %struct.yv12_buffer_config }
%struct.MV_REF = type { [2 x %union.int_mv], [2 x i8] }
%struct.vpx_codec_frame_buffer = type { i8*, i64, i8* }
%struct.loop_filter_info_n = type { [64 x %struct.loop_filter_thresh], [8 x [4 x [2 x i8]]] }
%struct.loop_filter_thresh = type { [16 x i8], [16 x i8], [16 x i8] }
%struct.loopfilter = type { i32, i32, i32, i32, i8, i8, [4 x i8], [4 x i8], [2 x i8], [2 x i8], %struct.LOOP_FILTER_MASK*, i32 }
%struct.LOOP_FILTER_MASK = type { [4 x i64], [4 x i64], i64, [4 x i16], [4 x i16], i16, [64 x i8] }
%struct.segmentation = type { i8, i8, i8, i8, i8, [7 x i8], [3 x i8], [8 x [4 x i16]], [8 x i32], i32 }
%struct.postproc_state = type { i32, i32, i32, i32, %struct.MODE_INFO*, %struct.MODE_INFO*, i32, i8*, i8* }
%struct.lookahead_ctx = type { i32, i32, i32, i32, i32, %struct.lookahead_entry* }
%struct.lookahead_entry = type { %struct.yv12_buffer_config, i64, i64, i32, i64 }
%struct.TplDepFrame = type { i8, %struct.TplDepStats*, i32, i32, i32, i32, i32, i32 }
%struct.TplDepStats = type { i64, i64, i64, i64, i64, i32, %union.int_mv }
%struct.EncFrameBuf = type { i32, i32, %struct.yv12_buffer_config }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%struct.KMEANS_DATA = type { double, i32, i32 }
%struct.TileDataEnc = type { %struct.TileInfo, [13 x [30 x i32]], [13 x [30 x i8]], %struct.FIRSTPASS_DATA, %struct.VP9RowMTSyncData, i32* }
%struct.FIRSTPASS_DATA = type { double, double, i64, i64, i64, i64, i32, i32, double, double, double, i32, i32, i32, i32, i32, i32, i32, i64, i64, i32, i32 }
%struct.VP9RowMTSyncData = type { %union.pthread_mutex_t*, %union.pthread_cond_t*, i32*, i32, i32 }
%union.pthread_cond_t = type { %struct.__pthread_cond_s }
%struct.__pthread_cond_s = type { %union.anon.5, %union.anon.7, [2 x i32], [2 x i32], i32, i32, [2 x i32] }
%union.anon.5 = type { i64 }
%union.anon.7 = type { i64 }
%struct.TOKENEXTRA = type { i8*, i16, i32 }
%struct.TOKENLIST = type { %struct.TOKENEXTRA*, %struct.TOKENEXTRA*, i32 }
%struct.RD_OPT = type { [30 x i32], [6 x i32], [8 x [13 x [30 x i32]]], [4 x [3 x i64]], [4 x [4 x i64]], i32, i32, double }
%struct.CODING_CONTEXT = type { [4 x i32], [2 x [32767 x i32]], [2 x [32767 x i32]], [3 x i8], i8*, [4 x i8], [2 x i8], %struct.frame_contexts }
%struct.RATE_CONTROL = type { i32, i32, i32, i32, [2 x i32], i32, i32, i32, i32, i32, [5 x double], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [2 x i32], double, double, i64, i64, i64, i64, i32, i32, i32, i32, i32, i32, i32, i64, i64, i64, i32, i32, i64, i64, i64, i32, i32, i32, i32, i32, i32, i32, [2 x i32], [2 x i32], [5 x i32], i32, i32, [25 x i64], i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, double, i32, i32, i32, i32, i32, [5 x i32], double, i32, i32, i32, i32 }
%struct.vpx_codec_pkt_list = type { i32, i32, [1 x %struct.vpx_codec_cx_pkt] }
%struct.MBGRAPH_FRAME_STATS = type { %struct.MBGRAPH_MB_STATS* }
%struct.MBGRAPH_MB_STATS = type { [4 x %struct.anon.9] }
%struct.anon.9 = type { i32, %union.anon.10 }
%union.anon.10 = type { %union.int_mv }
%struct.SPEED_FEATURES = type { %struct.MV_SPEED_FEATURES, i32, i32, i32, i32, i8, i32, i32, i32, i32, i32, i32, i32, double, i32, i32, i32, double, i32, i32, i32, i32, i32, i32, i32, i8, i32, i32, i8, i8, i32, i32, i8, i8, i8, i32, i32, i32, i32, i32, i32, [4 x %struct.MESH_PATTERN], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [4 x i32], [4 x i32], [13 x i32], i32, i32, i32, i32, i32, [13 x i32], i32, i32, i32, i8, i32, i32, i32, i8, i32, i32, i32, %struct.PARTITION_SEARCH_BREAKOUT_THR, %struct.anon.11, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.MV_SPEED_FEATURES = type { i32, i32, i32, i32, i32, i32, i32, %struct.ADAPT_SUBPEL_FORCE_STOP, i32 }
%struct.ADAPT_SUBPEL_FORCE_STOP = type { i32, i32, i32 }
%struct.MESH_PATTERN = type { i32, i32 }
%struct.PARTITION_SEARCH_BREAKOUT_THR = type { i64, i32 }
%struct.anon.11 = type { i32, [3 x float], i32, i32, [4 x i32] }
%struct.CYCLIC_REFRESH = type { i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i64, i64, i16, double, i32, double, [3 x i32], i32, double, i32, i32, i32 }
%struct.ActiveMap = type { i32, i32, i8* }
%struct.vp9_variance_vtable = type { i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32, i8*)*, i32 (i8*, i32, i8*, i32, i32*)*, i32 (i8*, i32, i32, i32, i8*, i32, i32*)*, i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*)*, void (i8*, i32, i8**, i32, i32*)*, void (i8*, i32, i8*, i32, i32*)* }
%struct.scale_factors = type { i32, i32, i32, i32, i32 (i32, %struct.scale_factors*)*, i32 (i32, %struct.scale_factors*)*, [2 x [2 x [2 x void (i8*, i64, i8*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32)*]]], [2 x [2 x [2 x void (i16*, i64, i16*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32, i32)*]]] }
%struct.TWO_PASS = type { i32, i32, %struct.FIRSTPASS_STATS, %struct.FIRSTPASS_STATS, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS*, %struct.FIRST_PASS_INFO, %struct.FIRSTPASS_STATS, i32, i64, double, double, double, double, %struct.FP_MB_FLOAT_STATS*, i32, i64, double, double, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [6 x i32], %struct.GF_GROUP }
%struct.FIRST_PASS_INFO = type { %struct.FIRSTPASS_STATS*, i32 }
%struct.FIRSTPASS_STATS = type { double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, i64 }
%struct.FP_MB_FLOAT_STATS = type { double, double, double }
%struct.GF_GROUP = type { i8, [252 x i32], [252 x i32], [252 x i8], [252 x i8], [252 x i8], [252 x i32], [252 x i32], i32, i32, [50 x i32], i32, i32, i32, i32, i32, i32 }
%struct.yv12_buffer_config = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i8*, i8*, i8*, i64, i32, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.ALT_REF_AQ = type opaque
%struct.SVC = type { i32, i32, i32, i32, i32, i32, %struct.lookahead_entry, i32, [25 x %struct.yv12_buffer_config], %struct.yv12_buffer_config, i32, i32, [12 x %struct.LAYER_CONTEXT], i32, [12 x i32], [12 x i32], [12 x i32], [12 x i32], i32, i32, i32, [2 x %struct.BUFFER_LONGTERM_REF], i32, i32, i32, i32, [5 x i8], [5 x i32], i8*, [12 x i32], [12 x i32], [12 x i32], i32, i32, i32, [12 x i32], [12 x i32], [12 x i32], [12 x i32], [12 x i32], i32, i32, i32, i32, i32, [5 x i32], [5 x i8], [5 x i8], [5 x i8], [5 x i8], [5 x i8], [5 x i8], [5 x i32], [8 x i8], [8 x i8], [5 x i32], i8, i8, i8, [8 x i8], i32, [5 x i32], i32, [5 x i64], i64, i64, [5 x i64], i32, i32, i32, i32 }
%struct.LAYER_CONTEXT = type { %struct.RATE_CONTROL, i32, i32, double, i32, i32, i32, i32, i32, i32, i32, %struct.TWO_PASS, %struct.vpx_fixed_buf, i32, i32, i32, i32, %struct.lookahead_entry*, i32, i32, i32, i64, i32, i8*, i8*, i8*, i32, i32, i32, i8, i32 }
%struct.BUFFER_LONGTERM_REF = type { i32, i32 }
%struct.diff = type { i32, i32, i32 }
%struct.search_site_config = type { [88 x %struct.mv], [88 x i64], i32, i32 }
%struct.vp9_denoiser = type { %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config, i32, i32, i32, i32, i32, i32, i32 }
%struct.noise_estimate = type { i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.VPxWorker = type { %struct.VPxWorkerImpl*, i32, i32 (i8*, i8*)*, i8*, i8*, i32 }
%struct.VPxWorkerImpl = type opaque
%struct.EncWorkerData = type { %struct.VP9_COMP*, %struct.ThreadData*, i32, i32, [64 x i32] }
%struct.VP9LfSyncData = type { %union.pthread_mutex_t*, %union.pthread_cond_t*, i32*, i32, i32, %struct.LoopFilterWorkerData*, i32, i32, %union.pthread_mutex_t*, %union.pthread_mutex_t*, %union.pthread_cond_t*, i32*, i32 }
%struct.LoopFilterWorkerData = type { %struct.yv12_buffer_config*, %struct.VP9Common*, [3 x %struct.macroblockd_plane], i32, i32, i32 }
%struct.VP9BitstreamWorkerData = type opaque
%struct.Vp9LevelInfo = type { %struct.Vp9LevelStats, %struct.Vp9LevelSpec }
%struct.Vp9LevelStats = type { i8, i32, i64, i64, double, %struct.FrameWindowBuffer, i32 }
%struct.FrameWindowBuffer = type { [128 x %struct.FrameRecord], i8, i8 }
%struct.FrameRecord = type { i64, i32, i32 }
%struct.Vp9LevelSpec = type { i32, i64, i32, i32, double, double, double, i8, i32, i8 }
%struct.MultiThreadHandle = type { i32, i32, i32, [4 x i32], %struct.JobQueue*, i32, [64 x %struct.RowMTInfo], [80 x i32] }
%struct.JobQueue = type { i8*, %struct.JobNode }
%struct.JobNode = type { i32, i32, i32 }
%struct.RowMTInfo = type { %struct.JobQueueHandle, %union.pthread_mutex_t }
%struct.JobQueueHandle = type { i8*, i32 }
%struct.ARNRFilterData = type { [25 x %struct.yv12_buffer_config*], i32, i32, i32, %struct.scale_factors }
%struct.LevelConstraint = type { i8, i8, i32, double }
%struct.vpx_roi_map = type { i8, i8*, i32, i32, [8 x i32], [8 x i32], [8 x i32], [8 x i32], [4 x i32] }
%struct.EXT_RATECTRL = type { i32, i8*, %struct.vpx_rc_funcs, %struct.vpx_rc_config, %struct.vpx_rc_firstpass_stats }
%struct.vpx_rc_funcs = type { i32 (i8*, %struct.vpx_rc_config*, i8**)*, i32 (i8*, %struct.vpx_rc_firstpass_stats*)*, i32 (i8*, %struct.vpx_rc_encodeframe_info*, %struct.vpx_rc_encodeframe_decision*)*, i32 (i8*, %struct.vpx_rc_encodeframe_result*)*, i32 (i8*)*, i8* }
%struct.vpx_rc_encodeframe_info = type { i32, i32, i32, i32, [3 x i32], [3 x i32] }
%struct.vpx_rc_encodeframe_decision = type { i32 }
%struct.vpx_rc_encodeframe_result = type { i64, i64, i64 }
%struct.vpx_rc_config = type { i32, i32, i32, i32, i32, i32 }
%struct.vpx_rc_firstpass_stats = type { %struct.vpx_rc_frame_stats*, i32 }
%struct.vpx_rc_frame_stats = type { double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double }
%struct.vp8_postproc_cfg = type { i32, i32, i32 }
%union.anon.12 = type { %struct.anon.13 }
%struct.anon.13 = type { %struct.vpx_codec_pkt_list, [256 x %struct.vpx_codec_cx_pkt] }
%struct.vpx_codec_enc_output_cx_cb_pair = type { void (%struct.vpx_codec_cx_pkt*, i8*)*, i8* }
%struct.BufferPool = type { i8*, i32 (i8*, i64, %struct.vpx_codec_frame_buffer*)*, i32 (i8*, %struct.vpx_codec_frame_buffer*)*, [12 x %struct.RefCntBuffer], %struct.InternalFrameBufferList }
%struct.InternalFrameBufferList = type { i32, %struct.InternalFrameBuffer* }
%struct.InternalFrameBuffer = type { i8*, i64, i32 }
%struct.vpx_codec_ctrl_fn_map = type { i32, i32 (%struct.vpx_codec_alg_priv*, %struct.__va_list_tag*)* }
%struct.__va_list_tag = type { i32, i32, i8*, i8* }
%struct.vpx_codec_dec_iface = type { i32 (i8*, i32, %struct.vpx_codec_stream_info*)*, i32 (%struct.vpx_codec_alg_priv*, %struct.vpx_codec_stream_info*)*, i32 (%struct.vpx_codec_alg_priv*, i8*, i32, i8*, i64)*, %struct.vpx_image* (%struct.vpx_codec_alg_priv*, i8**)*, i32 (%struct.vpx_codec_alg_priv*, i32 (i8*, i64, %struct.vpx_codec_frame_buffer*)*, i32 (i8*, %struct.vpx_codec_frame_buffer*)*, i8*)* }
%struct.vpx_codec_stream_info = type { i32, i32, i32, i32 }
%struct.vpx_codec_enc_iface = type { i32, %struct.vpx_codec_enc_cfg_map*, i32 (%struct.vpx_codec_alg_priv*, %struct.vpx_image*, i64, i64, i64, i64)*, %struct.vpx_codec_cx_pkt* (%struct.vpx_codec_alg_priv*, i8**)*, i32 (%struct.vpx_codec_alg_priv*, %struct.vpx_codec_enc_cfg*)*, %struct.vpx_fixed_buf* (%struct.vpx_codec_alg_priv*)*, %struct.vpx_image* (%struct.vpx_codec_alg_priv*)*, i32 (%struct.vpx_codec_enc_cfg*, i8**)* }
%struct.vpx_codec_enc_cfg_map = type { i32, %struct.vpx_codec_enc_cfg }
%struct.vpx_psnr_pkt = type { [4 x i32], [4 x i64], [4 x double] }
%struct.ENCODE_FRAME_RESULT = type { i32, i32, i32 }
%struct.vp9_ppflags_t = type { i32, i32, i32 }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.vpx_ref_frame = type { i32, %struct.vpx_image }
%struct.vpx_active_map = type { i8*, i32, i32 }
%struct.vpx_scaling_mode = type { i32, i32 }
%struct.vpx_svc_parameters = type { [12 x i32], [12 x i32], [12 x i32], [12 x i32], [12 x i32], i32, [12 x i32] }
%struct.vpx_svc_layer_id = type { i32, i32, [5 x i32] }
%struct.vpx_svc_ref_frame_config = type { [5 x i32], [5 x i32], [5 x i32], [5 x i32], [5 x i32], [5 x i32], [5 x i32], [5 x i32], [5 x i32], [5 x i32], [5 x i64] }
%struct.vpx_svc_frame_drop = type { [5 x i32], i32, i32 }
%struct.vpx_svc_spatial_layer_sync = type { [5 x i32], i32 }
%struct.vp9_ref_frame = type { i32, %struct.vpx_image }

@kMinCompressedSize = hidden local_unnamed_addr constant i64 8192, align 8
@vpx_codec_vp9_cx_algo = hidden constant %struct.vpx_codec_iface { i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str, i32 0, i32 0), i32 5, i64 65542, i32 (%struct.vpx_codec_ctx*, %struct.vpx_codec_priv_enc_mr_cfg*)* @encoder_init, i32 (%struct.vpx_codec_alg_priv*)* @encoder_destroy, %struct.vpx_codec_ctrl_fn_map* getelementptr inbounds ([58 x %struct.vpx_codec_ctrl_fn_map], [58 x %struct.vpx_codec_ctrl_fn_map]* @encoder_ctrl_maps, i32 0, i32 0), %struct.vpx_codec_dec_iface zeroinitializer, %struct.vpx_codec_enc_iface { i32 1, %struct.vpx_codec_enc_cfg_map* getelementptr inbounds ([1 x %struct.vpx_codec_enc_cfg_map], [1 x %struct.vpx_codec_enc_cfg_map]* @encoder_usage_cfg_map, i32 0, i32 0), i32 (%struct.vpx_codec_alg_priv*, %struct.vpx_image*, i64, i64, i64, i64)* @encoder_encode, %struct.vpx_codec_cx_pkt* (%struct.vpx_codec_alg_priv*, i8**)* @encoder_get_cxdata, i32 (%struct.vpx_codec_alg_priv*, %struct.vpx_codec_enc_cfg*)* @encoder_set_config, %struct.vpx_fixed_buf* (%struct.vpx_codec_alg_priv*)* null, %struct.vpx_image* (%struct.vpx_codec_alg_priv*)* @encoder_get_preview, i32 (%struct.vpx_codec_enc_cfg*, i8**)* null } }, align 8
@.str = private unnamed_addr constant [47 x i8] c"WebM Project VP9 Encoder v1.9.0-147-g61edec1ef\00", align 1
@encoder_ctrl_maps = internal constant [58 x %struct.vpx_codec_ctrl_fn_map] [%struct.vpx_codec_ctrl_fn_map { i32 2, i32 (%struct.vpx_codec_alg_priv*, %struct.__va_list_tag*)* @ctrl_copy_reference }, %struct.vpx_codec_ctrl_fn_map { i32 1, i32 (%struct.vpx_codec_alg_priv*, %struct.__va_list_tag*)* @ctrl_set_reference }, %struct.vpx_codec_ctrl_fn_map { i32 3, i32 (%struct.vpx_codec_alg_priv*, %struct.__va_list_tag*)* @ctrl_set_previewpp }, %struct.vpx_codec_ctrl_fn_map { i32 40, i32 (%struct.vpx_codec_alg_priv*, %struct.__va_list_tag*)* @ctrl_set_roi_map }, %struct.vpx_codec_ctrl_fn_map { i32 9, i32 (%struct.vpx_codec_alg_priv*, %struct.__va_list_tag*)* @ctrl_set_active_map }, %struct.vpx_codec_ctrl_fn_map { i32 11, i32 (%struct.vpx_codec_alg_priv*, %struct.__va_list_tag*)* @ctrl_set_scale_mode }, %struct.vpx_codec_ctrl_fn_map { i32 13, i32 (%struct.vpx_codec_alg_priv*, %struct.__va_list_tag*)* @ctrl_set_cpuused }, %struct.vpx_codec_ctrl_fn_map { i32 14, i32 (%struct.vpx_codec_alg_priv*, %struct.__va_list_tag*)* @ctrl_set_enable_auto_alt_ref }, %struct.vpx_codec_ctrl_fn_map { i32 16, i32 (%struct.vpx_codec_alg_priv*, %struct.__va_list_tag*)* @ctrl_set_sharpness }, %struct.vpx_codec_ctrl_fn_map { i32 17, i32 (%struct.vpx_codec_alg_priv*, %struct.__va_list_tag*)* @ctrl_set_static_thresh }, %struct.vpx_codec_ctrl_fn_map { i32 33, i32 (%struct.vpx_codec_alg_priv*, %struct.__va_list_tag*)* @ctrl_set_tile_columns }, %struct.vpx_codec_ctrl_fn_map { i32 34, i32 (%struct.vpx_codec_alg_priv*, %struct.__va_list_tag*)* @ctrl_set_tile_rows }, %struct.vpx_codec_ctrl_fn_map { i32 65, i32 (%struct.vpx_codec_alg_priv*, %struct.__va_list_tag*)* @ctrl_set_tpl_model }, %struct.vpx_codec_ctrl_fn_map { i32 21, i32 (%struct.vpx_codec_alg_priv*, %struct.__va_list_tag*)* @ctrl_set_arnr_max_frames }, %struct.vpx_codec_ctrl_fn_map { i32 22, i32 (%struct.vpx_codec_alg_priv*, %struct.__va_list_tag*)* @ctrl_set_arnr_strength }, %struct.vpx_codec_ctrl_fn_map { i32 23, i32 (%struct.vpx_codec_alg_priv*, %struct.__va_list_tag*)* @ctrl_set_arnr_type }, %struct.vpx_codec_ctrl_fn_map { i32 24, i32 (%struct.vpx_codec_alg_priv*, %struct.__va_list_tag*)* @ctrl_set_tuning }, %struct.vpx_codec_ctrl_fn_map { i32 25, i32 (%struct.vpx_codec_alg_priv*, %struct.__va_list_tag*)* @ctrl_set_cq_level }, %struct.vpx_codec_ctrl_fn_map { i32 26, i32 (%struct.vpx_codec_alg_priv*, %struct.__va_list_tag*)* @ctrl_set_rc_max_intra_bitrate_pct }, %struct.vpx_codec_ctrl_fn_map { i32 28, i32 (%struct.vpx_codec_alg_priv*, %struct.__va_list_tag*)* @ctrl_set_rc_max_inter_bitrate_pct }, %struct.vpx_codec_ctrl_fn_map { i32 29, i32 (%struct.vpx_codec_alg_priv*, %struct.__va_list_tag*)* @ctrl_set_rc_gf_cbr_boost_pct }, %struct.vpx_codec_ctrl_fn_map { i32 32, i32 (%struct.vpx_codec_alg_priv*, %struct.__va_list_tag*)* @ctrl_set_lossless }, %struct.vpx_codec_ctrl_fn_map { i32 35, i32 (%struct.vpx_codec_alg_priv*, %struct.__va_list_tag*)* @ctrl_set_frame_parallel_decoding_mode }, %struct.vpx_codec_ctrl_fn_map { i32 36, i32 (%struct.vpx_codec_alg_priv*, %struct.__va_list_tag*)* @ctrl_set_aq_mode }, %struct.vpx_codec_ctrl_fn_map { i32 57, i32 (%struct.vpx_codec_alg_priv*, %struct.__va_list_tag*)* @ctrl_set_alt_ref_aq }, %struct.vpx_codec_ctrl_fn_map { i32 37, i32 (%struct.vpx_codec_alg_priv*, %struct.__va_list_tag*)* @ctrl_set_frame_periodic_boost }, %struct.vpx_codec_ctrl_fn_map { i32 39, i32 (%struct.vpx_codec_alg_priv*, %struct.__va_list_tag*)* @ctrl_set_svc }, %struct.vpx_codec_ctrl_fn_map { i32 41, i32 (%struct.vpx_codec_alg_priv*, %struct.__va_list_tag*)* @ctrl_set_svc_parameters }, %struct.vpx_codec_ctrl_fn_map { i32 45, i32 (%struct.vpx_codec_alg_priv*, %struct.__va_list_tag*)* @ctrl_register_cx_callback }, %struct.vpx_codec_ctrl_fn_map { i32 42, i32 (%struct.vpx_codec_alg_priv*, %struct.__va_list_tag*)* @ctrl_set_svc_layer_id }, %struct.vpx_codec_ctrl_fn_map { i32 43, i32 (%struct.vpx_codec_alg_priv*, %struct.__va_list_tag*)* @ctrl_set_tune_content }, %struct.vpx_codec_ctrl_fn_map { i32 46, i32 (%struct.vpx_codec_alg_priv*, %struct.__va_list_tag*)* @ctrl_set_color_space }, %struct.vpx_codec_ctrl_fn_map { i32 51, i32 (%struct.vpx_codec_alg_priv*, %struct.__va_list_tag*)* @ctrl_set_color_range }, %struct.vpx_codec_ctrl_fn_map { i32 38, i32 (%struct.vpx_codec_alg_priv*, %struct.__va_list_tag*)* @ctrl_set_noise_sensitivity }, %struct.vpx_codec_ctrl_fn_map { i32 48, i32 (%struct.vpx_codec_alg_priv*, %struct.__va_list_tag*)* @ctrl_set_min_gf_interval }, %struct.vpx_codec_ctrl_fn_map { i32 49, i32 (%struct.vpx_codec_alg_priv*, %struct.__va_list_tag*)* @ctrl_set_max_gf_interval }, %struct.vpx_codec_ctrl_fn_map { i32 52, i32 (%struct.vpx_codec_alg_priv*, %struct.__va_list_tag*)* @ctrl_set_svc_ref_frame_config }, %struct.vpx_codec_ctrl_fn_map { i32 53, i32 (%struct.vpx_codec_alg_priv*, %struct.__va_list_tag*)* @ctrl_set_render_size }, %struct.vpx_codec_ctrl_fn_map { i32 54, i32 (%struct.vpx_codec_alg_priv*, %struct.__va_list_tag*)* @ctrl_set_target_level }, %struct.vpx_codec_ctrl_fn_map { i32 55, i32 (%struct.vpx_codec_alg_priv*, %struct.__va_list_tag*)* @ctrl_set_row_mt }, %struct.vpx_codec_ctrl_fn_map { i32 66, i32 (%struct.vpx_codec_alg_priv*, %struct.__va_list_tag*)* @ctrl_set_postencode_drop }, %struct.vpx_codec_ctrl_fn_map { i32 68, i32 (%struct.vpx_codec_alg_priv*, %struct.__va_list_tag*)* @ctrl_set_disable_overshoot_maxq_cbr }, %struct.vpx_codec_ctrl_fn_map { i32 59, i32 (%struct.vpx_codec_alg_priv*, %struct.__va_list_tag*)* @ctrl_enable_motion_vector_unit_test }, %struct.vpx_codec_ctrl_fn_map { i32 60, i32 (%struct.vpx_codec_alg_priv*, %struct.__va_list_tag*)* @ctrl_set_svc_inter_layer_pred }, %struct.vpx_codec_ctrl_fn_map { i32 61, i32 (%struct.vpx_codec_alg_priv*, %struct.__va_list_tag*)* @ctrl_set_svc_frame_drop_layer }, %struct.vpx_codec_ctrl_fn_map { i32 63, i32 (%struct.vpx_codec_alg_priv*, %struct.__va_list_tag*)* @ctrl_set_svc_gf_temporal_ref }, %struct.vpx_codec_ctrl_fn_map { i32 64, i32 (%struct.vpx_codec_alg_priv*, %struct.__va_list_tag*)* @ctrl_set_svc_spatial_layer_sync }, %struct.vpx_codec_ctrl_fn_map { i32 67, i32 (%struct.vpx_codec_alg_priv*, %struct.__va_list_tag*)* @ctrl_set_delta_q_uv }, %struct.vpx_codec_ctrl_fn_map { i32 69, i32 (%struct.vpx_codec_alg_priv*, %struct.__va_list_tag*)* @ctrl_set_disable_loopfilter }, %struct.vpx_codec_ctrl_fn_map { i32 70, i32 (%struct.vpx_codec_alg_priv*, %struct.__va_list_tag*)* @ctrl_set_external_rate_control }, %struct.vpx_codec_ctrl_fn_map { i32 19, i32 (%struct.vpx_codec_alg_priv*, %struct.__va_list_tag*)* @ctrl_get_quantizer }, %struct.vpx_codec_ctrl_fn_map { i32 20, i32 (%struct.vpx_codec_alg_priv*, %struct.__va_list_tag*)* @ctrl_get_quantizer64 }, %struct.vpx_codec_ctrl_fn_map { i32 128, i32 (%struct.vpx_codec_alg_priv*, %struct.__va_list_tag*)* @ctrl_get_reference }, %struct.vpx_codec_ctrl_fn_map { i32 44, i32 (%struct.vpx_codec_alg_priv*, %struct.__va_list_tag*)* @ctrl_get_svc_layer_id }, %struct.vpx_codec_ctrl_fn_map { i32 50, i32 (%struct.vpx_codec_alg_priv*, %struct.__va_list_tag*)* @ctrl_get_active_map }, %struct.vpx_codec_ctrl_fn_map { i32 56, i32 (%struct.vpx_codec_alg_priv*, %struct.__va_list_tag*)* @ctrl_get_level }, %struct.vpx_codec_ctrl_fn_map { i32 62, i32 (%struct.vpx_codec_alg_priv*, %struct.__va_list_tag*)* @ctrl_get_svc_ref_frame_config }, %struct.vpx_codec_ctrl_fn_map { i32 -1, i32 (%struct.vpx_codec_alg_priv*, %struct.__va_list_tag*)* null }], align 16
@encoder_usage_cfg_map = internal constant [1 x %struct.vpx_codec_enc_cfg_map] [%struct.vpx_codec_enc_cfg_map { i32 0, %struct.vpx_codec_enc_cfg { i32 0, i32 8, i32 0, i32 320, i32 240, i32 8, i32 8, %struct.vpx_rational { i32 1, i32 30 }, i32 0, i32 0, i32 25, i32 0, i32 0, i32 0, i32 0, i32 60, i32 30, i32 0, %struct.vpx_fixed_buf zeroinitializer, %struct.vpx_fixed_buf zeroinitializer, i32 256, i32 0, i32 63, i32 25, i32 25, i32 6000, i32 4000, i32 5000, i32 50, i32 0, i32 2000, i32 0, i32 1, i32 0, i32 128, i32 1, [5 x i32] zeroinitializer, [5 x i32] zeroinitializer, i32 1, [5 x i32] zeroinitializer, [5 x i32] zeroinitializer, i32 0, [16 x i32] zeroinitializer, [12 x i32] zeroinitializer, i32 0 } }], align 16
@__const.vp9_get_encoder_config.oxcf = private unnamed_addr constant { i32, i32, i32, i32, i32, [4 x i8], double, %struct.vpx_rational, { i64, i32, [4 x i8] }, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [12 x i32], [5 x i32], [5 x i32], [5 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [4 x i8], %struct.vpx_fixed_buf, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [4 x i8] } { i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", double 0xFFFFFFFFFFFFFFFF, %struct.vpx_rational { i32 -1431655766, i32 -1431655766 }, { i64, i32, [4 x i8] } { i64 -6148914691236517206, i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA" }, i64 -6148914691236517206, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, [12 x i32] [i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766], [5 x i32] [i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766], [5 x i32] [i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766], [5 x i32] [i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766], i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", %struct.vpx_fixed_buf { i8* inttoptr (i64 -6148914691236517206 to i8*), i64 -6148914691236517206 }, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA" }, align 8
@.str.1 = private unnamed_addr constant [13 x i8] c"profile %ld\0A\00", align 1
@.str.2 = private unnamed_addr constant [15 x i8] c"bit_depth %ld\0A\00", align 1
@.str.3 = private unnamed_addr constant [11 x i8] c"width %ld\0A\00", align 1
@.str.4 = private unnamed_addr constant [12 x i8] c"height %ld\0A\00", align 1
@.str.5 = private unnamed_addr constant [21 x i8] c"input_bit_depth %ld\0A\00", align 1
@.str.6 = private unnamed_addr constant [20 x i8] c"init_framerate %ld\0A\00", align 1
@.str.7 = private unnamed_addr constant [22 x i8] c"target_bandwidth %ld\0A\00", align 1
@.str.8 = private unnamed_addr constant [23 x i8] c"noise_sensitivity %ld\0A\00", align 1
@.str.9 = private unnamed_addr constant [15 x i8] c"sharpness %ld\0A\00", align 1
@.str.10 = private unnamed_addr constant [11 x i8] c"speed %ld\0A\00", align 1
@.str.11 = private unnamed_addr constant [30 x i8] c"rc_max_intra_bitrate_pct %ld\0A\00", align 1
@.str.12 = private unnamed_addr constant [30 x i8] c"rc_max_inter_bitrate_pct %ld\0A\00", align 1
@.str.13 = private unnamed_addr constant [22 x i8] c"gf_cbr_boost_pct %ld\0A\00", align 1
@.str.14 = private unnamed_addr constant [10 x i8] c"mode %ld\0A\00", align 1
@.str.15 = private unnamed_addr constant [10 x i8] c"pass %ld\0A\00", align 1
@.str.16 = private unnamed_addr constant [14 x i8] c"auto_key %ld\0A\00", align 1
@.str.17 = private unnamed_addr constant [14 x i8] c"key_freq %ld\0A\00", align 1
@.str.18 = private unnamed_addr constant [19 x i8] c"lag_in_frames %ld\0A\00", align 1
@.str.19 = private unnamed_addr constant [13 x i8] c"rc_mode %ld\0A\00", align 1
@.str.20 = private unnamed_addr constant [21 x i8] c"under_shoot_pct %ld\0A\00", align 1
@.str.21 = private unnamed_addr constant [20 x i8] c"over_shoot_pct %ld\0A\00", align 1
@.str.22 = private unnamed_addr constant [28 x i8] c"drop_frames_water_mark %ld\0A\00", align 1
@.str.23 = private unnamed_addr constant [13 x i8] c"fixed_q %ld\0A\00", align 1
@.str.24 = private unnamed_addr constant [21 x i8] c"worst_allowed_q %ld\0A\00", align 1
@.str.25 = private unnamed_addr constant [20 x i8] c"best_allowed_q %ld\0A\00", align 1
@.str.26 = private unnamed_addr constant [14 x i8] c"cq_level %ld\0A\00", align 1
@.str.27 = private unnamed_addr constant [13 x i8] c"aq_mode %ld\0A\00", align 1
@.str.28 = private unnamed_addr constant [16 x i8] c"alt_ref_aq %ld\0A\00", align 1
@.str.29 = private unnamed_addr constant [17 x i8] c"resize_mode %ld\0A\00", align 1
@.str.30 = private unnamed_addr constant [24 x i8] c"scaled_frame_width %ld\0A\00", align 1
@.str.31 = private unnamed_addr constant [25 x i8] c"scaled_frame_height %ld\0A\00", align 1
@.str.32 = private unnamed_addr constant [26 x i8] c"frame_periodic_boost %ld\0A\00", align 1
@.str.33 = private unnamed_addr constant [22 x i8] c"two_pass_vbrbias %ld\0A\00", align 1
@.str.34 = private unnamed_addr constant [29 x i8] c"two_pass_vbrmin_section %ld\0A\00", align 1
@.str.35 = private unnamed_addr constant [29 x i8] c"two_pass_vbrmax_section %ld\0A\00", align 1
@.str.36 = private unnamed_addr constant [27 x i8] c"vbr_corpus_complexity %ld\0A\00", align 1
@.str.37 = private unnamed_addr constant [22 x i8] c"ss_number_layers %ld\0A\00", align 1
@.str.38 = private unnamed_addr constant [22 x i8] c"ts_number_layers %ld\0A\00", align 1
@.str.39 = private unnamed_addr constant [21 x i8] c"enable_auto_arf %ld\0A\00", align 1
@.str.40 = private unnamed_addr constant [21 x i8] c"encode_breakout %ld\0A\00", align 1
@.str.41 = private unnamed_addr constant [26 x i8] c"error_resilient_mode %ld\0A\00", align 1
@.str.42 = private unnamed_addr constant [34 x i8] c"frame_parallel_decoding_mode %ld\0A\00", align 1
@.str.43 = private unnamed_addr constant [21 x i8] c"arnr_max_frames %ld\0A\00", align 1
@.str.44 = private unnamed_addr constant [19 x i8] c"arnr_strength %ld\0A\00", align 1
@.str.45 = private unnamed_addr constant [21 x i8] c"min_gf_interval %ld\0A\00", align 1
@.str.46 = private unnamed_addr constant [21 x i8] c"max_gf_interval %ld\0A\00", align 1
@.str.47 = private unnamed_addr constant [18 x i8] c"tile_columns %ld\0A\00", align 1
@.str.48 = private unnamed_addr constant [15 x i8] c"tile_rows %ld\0A\00", align 1
@.str.49 = private unnamed_addr constant [22 x i8] c"enable_tpl_model %ld\0A\00", align 1
@.str.50 = private unnamed_addr constant [17 x i8] c"max_threads %ld\0A\00", align 1
@.str.51 = private unnamed_addr constant [18 x i8] c"target_level %ld\0A\00", align 1
@.str.52 = private unnamed_addr constant [12 x i8] c"tuning %ld\0A\00", align 1
@.str.53 = private unnamed_addr constant [13 x i8] c"content %ld\0A\00", align 1
@.str.54 = private unnamed_addr constant [22 x i8] c"use_highbitdepth %ld\0A\00", align 1
@.str.55 = private unnamed_addr constant [17 x i8] c"color_space %ld\0A\00", align 1
@.str.56 = private unnamed_addr constant [17 x i8] c"color_range %ld\0A\00", align 1
@.str.57 = private unnamed_addr constant [18 x i8] c"render_width %ld\0A\00", align 1
@.str.58 = private unnamed_addr constant [19 x i8] c"render_height %ld\0A\00", align 1
@.str.59 = private unnamed_addr constant [28 x i8] c"temporal_layering_mode %ld\0A\00", align 1
@.str.60 = private unnamed_addr constant [12 x i8] c"row_mt %ld\0A\00", align 1
@.str.61 = private unnamed_addr constant [29 x i8] c"motion_vector_unit_test %ld\0A\00", align 1
@default_extra_cfg = internal unnamed_addr constant %struct.vp9_extracfg { i32 0, i32 1, i32 0, i32 0, i32 0, i32 6, i32 0, i32 1, i32 7, i32 5, i32 0, i32 0, i32 0, i32 10, i32 0, i32 0, i32 0, i32 0, i32 255, i32 1, i32 0, i32 0, i32 0, i32 8, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0 }, align 4
@once.lock = internal global i32 0, align 4
@.str.62 = private unnamed_addr constant [28 x i8] c"g_w out of range [1..65535]\00", align 1
@.str.63 = private unnamed_addr constant [28 x i8] c"g_h out of range [1..65535]\00", align 1
@.str.64 = private unnamed_addr constant [44 x i8] c"g_timebase.den out of range [1..1000000000]\00", align 1
@.str.65 = private unnamed_addr constant [44 x i8] c"g_timebase.num out of range [1..1000000000]\00", align 1
@.str.66 = private unnamed_addr constant [29 x i8] c"g_profile out of range [..3]\00", align 1
@.str.67 = private unnamed_addr constant [37 x i8] c"rc_max_quantizer out of range [..63]\00", align 1
@.str.68 = private unnamed_addr constant [56 x i8] c"rc_min_quantizer out of range [..cfg->rc_max_quantizer]\00", align 1
@.str.69 = private unnamed_addr constant [26 x i8] c"lossless expected boolean\00", align 1
@.str.70 = private unnamed_addr constant [46 x i8] c"frame_parallel_decoding_mode expected boolean\00", align 1
@.str.71 = private unnamed_addr constant [44 x i8] c"aq_mode out of range [0..AQ_MODE_COUNT - 2]\00", align 1
@.str.72 = private unnamed_addr constant [31 x i8] c"alt_ref_aq out of range [0..1]\00", align 1
@.str.73 = private unnamed_addr constant [41 x i8] c"frame_periodic_boost out of range [0..1]\00", align 1
@.str.74 = private unnamed_addr constant [30 x i8] c"g_threads out of range [..64]\00", align 1
@.str.75 = private unnamed_addr constant [49 x i8] c"g_lag_in_frames out of range [..MAX_LAG_BUFFERS]\00", align 1
@.str.76 = private unnamed_addr constant [43 x i8] c"rc_end_usage out of range [VPX_VBR..VPX_Q]\00", align 1
@.str.77 = private unnamed_addr constant [39 x i8] c"rc_undershoot_pct out of range [..100]\00", align 1
@.str.78 = private unnamed_addr constant [38 x i8] c"rc_overshoot_pct out of range [..100]\00", align 1
@.str.79 = private unnamed_addr constant [43 x i8] c"rc_2pass_vbr_bias_pct out of range [..100]\00", align 1
@.str.80 = private unnamed_addr constant [55 x i8] c"rc_2pass_vbr_corpus_complexity out of range [0..10000]\00", align 1
@.str.81 = private unnamed_addr constant [52 x i8] c"kf_mode out of range [VPX_KF_DISABLED..VPX_KF_AUTO]\00", align 1
@.str.82 = private unnamed_addr constant [35 x i8] c"rc_resize_allowed expected boolean\00", align 1
@.str.83 = private unnamed_addr constant [41 x i8] c"rc_dropframe_thresh out of range [..100]\00", align 1
@.str.84 = private unnamed_addr constant [41 x i8] c"rc_resize_up_thresh out of range [..100]\00", align 1
@.str.85 = private unnamed_addr constant [43 x i8] c"rc_resize_down_thresh out of range [..100]\00", align 1
@.str.86 = private unnamed_addr constant [55 x i8] c"g_pass out of range [VPX_RC_ONE_PASS..VPX_RC_ONE_PASS]\00", align 1
@.str.87 = private unnamed_addr constant [56 x i8] c"min_gf_interval out of range [0..(MAX_LAG_BUFFERS - 1)]\00", align 1
@.str.88 = private unnamed_addr constant [56 x i8] c"max_gf_interval out of range [0..(MAX_LAG_BUFFERS - 1)]\00", align 1
@.str.89 = private unnamed_addr constant [56 x i8] c"max_gf_interval out of range [2..(MAX_LAG_BUFFERS - 1)]\00", align 1
@.str.90 = private unnamed_addr constant [81 x i8] c"max_gf_interval out of range [extra_cfg->min_gf_interval..(MAX_LAG_BUFFERS - 1)]\00", align 1
@.str.91 = private unnamed_addr constant [63 x i8] c"Set lag in frames to 0 (low delay) or >= (max-gf-interval + 2)\00", align 1
@.str.92 = private unnamed_addr constant [43 x i8] c"rc_scaled_width out of range [0..cfg->g_w]\00", align 1
@.str.93 = private unnamed_addr constant [44 x i8] c"rc_scaled_height out of range [0..cfg->g_h]\00", align 1
@.str.94 = private unnamed_addr constant [53 x i8] c"ss_number_layers out of range [1..VPX_SS_MAX_LAYERS]\00", align 1
@.str.95 = private unnamed_addr constant [53 x i8] c"ts_number_layers out of range [1..VPX_TS_MAX_LAYERS]\00", align 1
@.str.96 = private unnamed_addr constant [24 x i8] c"target_level is invalid\00", align 1
@.str.97 = private unnamed_addr constant [52 x i8] c"ss_number_layers * ts_number_layers is out of range\00", align 1
@.str.98 = private unnamed_addr constant [45 x i8] c"ts_target_bitrate entries are not increasing\00", align 1
@.str.99 = private unnamed_addr constant [65 x i8] c"ts_rate_decimator[cfg->ts_number_layers - 1] out of range [1..1]\00", align 1
@.str.100 = private unnamed_addr constant [46 x i8] c"ts_rate_decimator factors are not powers of 2\00", align 1
@.str.101 = private unnamed_addr constant [70 x i8] c"kf_min_dist not supported in auto mode, use 0 or kf_max_dist instead.\00", align 1
@.str.102 = private unnamed_addr constant [27 x i8] c"row_mt out of range [0..1]\00", align 1
@.str.103 = private unnamed_addr constant [44 x i8] c"motion_vector_unit_test out of range [0..2]\00", align 1
@.str.104 = private unnamed_addr constant [53 x i8] c"enable_auto_alt_ref out of range [0..MAX_ARF_LAYERS]\00", align 1
@.str.105 = private unnamed_addr constant [30 x i8] c"cpu_used out of range [-9..9]\00", align 1
@.str.106 = private unnamed_addr constant [37 x i8] c"noise_sensitivity out of range [..6]\00", align 1
@.str.107 = private unnamed_addr constant [33 x i8] c"tile_columns out of range [0..6]\00", align 1
@.str.108 = private unnamed_addr constant [30 x i8] c"tile_rows out of range [0..2]\00", align 1
@.str.109 = private unnamed_addr constant [29 x i8] c"sharpness out of range [..7]\00", align 1
@.str.110 = private unnamed_addr constant [37 x i8] c"arnr_max_frames out of range [0..15]\00", align 1
@.str.111 = private unnamed_addr constant [33 x i8] c"arnr_strength out of range [..6]\00", align 1
@.str.112 = private unnamed_addr constant [30 x i8] c"cq_level out of range [0..63]\00", align 1
@.str.113 = private unnamed_addr constant [51 x i8] c"g_bit_depth out of range [VPX_BITS_8..VPX_BITS_12]\00", align 1
@.str.114 = private unnamed_addr constant [39 x i8] c"g_input_bit_depth out of range [8..12]\00", align 1
@.str.115 = private unnamed_addr constant [70 x i8] c"content out of range [VP9E_CONTENT_DEFAULT..VP9E_CONTENT_INVALID - 1]\00", align 1
@.str.116 = private unnamed_addr constant [50 x i8] c"Codec high bit-depth not supported in profile < 2\00", align 1
@.str.117 = private unnamed_addr constant [51 x i8] c"Source high bit-depth not supported in profile < 2\00", align 1
@.str.118 = private unnamed_addr constant [47 x i8] c"Codec bit-depth 8 not supported in profile > 1\00", align 1
@.str.119 = private unnamed_addr constant [55 x i8] c"color_space out of range [VPX_CS_UNKNOWN..VPX_CS_SRGB]\00", align 1
@.str.120 = private unnamed_addr constant [66 x i8] c"color_range out of range [VPX_CR_STUDIO_RANGE..VPX_CR_FULL_RANGE]\00", align 1
@.str.121 = private unnamed_addr constant [19 x i8] c"Conflicting flags.\00", align 1
@.str.122 = private unnamed_addr constant [33 x i8] c"Compressed data buffer too small\00", align 1
@__const.encoder_encode.psnr = private unnamed_addr constant %struct.vpx_psnr_pkt { [4 x i32] [i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766], [4 x i64] [i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206], [4 x double] [double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF] }, align 8
@.str.123 = private unnamed_addr constant [82 x i8] c"Invalid image format. I422, I444, I440, NV12 images are not supported in profile.\00", align 1
@.str.124 = private unnamed_addr constant [83 x i8] c"Invalid image format. 16-bit I422, I444, I440 images are not supported in profile.\00", align 1
@.str.125 = private unnamed_addr constant [72 x i8] c"Invalid image format. Only YV12, I420, I422, I444 images are supported.\00", align 1
@.str.126 = private unnamed_addr constant [54 x i8] c"Image size must match encoder init configuration size\00", align 1
@.str.127 = private unnamed_addr constant [51 x i8] c"Cannot change width or height after initialization\00", align 1
@.str.128 = private unnamed_addr constant [30 x i8] c"Cannot increase lag_in_frames\00", align 1
@vp9_level_defs = external local_unnamed_addr constant [14 x %struct.Vp9LevelSpec], align 16

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden nonnull %struct.vpx_codec_iface* @vpx_codec_vp9_cx() local_unnamed_addr #0 {
  ret %struct.vpx_codec_iface* @vpx_codec_vp9_cx_algo
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @encoder_init(%struct.vpx_codec_ctx* nocapture, %struct.vpx_codec_priv_enc_mr_cfg* nocapture readnone) #1 {
  %3 = getelementptr inbounds %struct.vpx_codec_ctx, %struct.vpx_codec_ctx* %0, i64 0, i32 6
  %4 = load %struct.vpx_codec_priv*, %struct.vpx_codec_priv** %3, align 8
  %5 = icmp eq %struct.vpx_codec_priv* %4, null
  br i1 %5, label %6, label %84

6:                                                ; preds = %2
  %7 = tail call i8* @vpx_calloc(i64 1, i64 36472) #9
  %8 = bitcast i8* %7 to %struct.vpx_codec_alg_priv*
  %9 = icmp eq i8* %7, null
  br i1 %9, label %84, label %10

10:                                               ; preds = %6
  %11 = bitcast %struct.vpx_codec_priv** %3 to i8**
  store i8* %7, i8** %11, align 8
  %12 = getelementptr inbounds %struct.vpx_codec_ctx, %struct.vpx_codec_ctx* %0, i64 0, i32 4
  %13 = load i64, i64* %12, align 8
  %14 = getelementptr inbounds i8, i8* %7, i64 8
  %15 = bitcast i8* %14 to i64*
  store i64 %13, i64* %15, align 8
  %16 = load %struct.vpx_codec_priv*, %struct.vpx_codec_priv** %3, align 8
  %17 = getelementptr inbounds %struct.vpx_codec_priv, %struct.vpx_codec_priv* %16, i64 0, i32 3, i32 4
  store i32 1, i32* %17, align 8
  %18 = tail call i8* @vpx_calloc(i64 1, i64 2728) #9
  %19 = getelementptr inbounds i8, i8* %7, i64 36464
  %20 = bitcast i8* %19 to %struct.BufferPool**
  %21 = bitcast i8* %19 to i8**
  store i8* %18, i8** %21, align 8
  %22 = icmp eq i8* %18, null
  br i1 %22, label %84, label %23

23:                                               ; preds = %10
  %24 = getelementptr inbounds %struct.vpx_codec_ctx, %struct.vpx_codec_ctx* %0, i64 0, i32 5
  %25 = bitcast %union.anon* %24 to %struct.vpx_codec_enc_cfg**
  %26 = load %struct.vpx_codec_enc_cfg*, %struct.vpx_codec_enc_cfg** %25, align 8
  %27 = icmp eq %struct.vpx_codec_enc_cfg* %26, null
  br i1 %27, label %32, label %28

28:                                               ; preds = %23
  %29 = getelementptr inbounds i8, i8* %7, i64 216
  %30 = bitcast %struct.vpx_codec_enc_cfg* %26 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %29, i8* nonnull align 8 %30, i64 384, i1 false)
  %31 = bitcast %union.anon* %24 to i8**
  store i8* %29, i8** %31, align 8
  br label %32

32:                                               ; preds = %23, %28
  %33 = getelementptr inbounds i8, i8* %7, i64 600
  %34 = bitcast i8* %33 to %struct.vp9_extracfg*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %33, i8* align 4 bitcast (%struct.vp9_extracfg* @default_extra_cfg to i8*), i64 128, i1 false)
  %35 = tail call i32 @pthread_once(i32* nonnull @once.lock, void ()* nonnull @vp9_initialize_enc) #9
  %36 = getelementptr inbounds i8, i8* %7, i64 216
  %37 = bitcast i8* %36 to %struct.vpx_codec_enc_cfg*
  %38 = tail call fastcc i32 @validate_config(%struct.vpx_codec_alg_priv* nonnull %8, %struct.vpx_codec_enc_cfg* %37, %struct.vp9_extracfg* %34)
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %40, label %84

40:                                               ; preds = %32
  %41 = getelementptr inbounds i8, i8* %7, i64 752
  store i8 0, i8* %41, align 8
  %42 = getelementptr inbounds i8, i8* %7, i64 244
  %43 = bitcast i8* %42 to i64*
  %44 = load i64, i64* %43, align 4
  %45 = lshr i64 %44, 32
  %46 = trunc i64 %45 to i32
  %47 = shl i64 %44, 32
  %48 = ashr exact i64 %47, 32
  %49 = mul nsw i64 %48, 10000000
  %50 = icmp eq i32 %46, 0
  br i1 %50, label %59, label %51

51:                                               ; preds = %40, %51
  %52 = phi i64 [ %56, %51 ], [ %45, %40 ]
  %53 = phi i64 [ %55, %51 ], [ %49, %40 ]
  %54 = shl i64 %52, 32
  %55 = ashr exact i64 %54, 32
  %56 = srem i64 %53, %55
  %57 = trunc i64 %56 to i32
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %59, label %51

59:                                               ; preds = %51, %40
  %60 = phi i64 [ %49, %40 ], [ %55, %51 ]
  %61 = trunc i64 %60 to i32
  %62 = shl i64 %60, 32
  %63 = ashr exact i64 %62, 32
  %64 = sdiv i64 %49, %63
  %65 = sdiv i32 %46, %61
  %66 = getelementptr inbounds i8, i8* %7, i64 728
  %67 = bitcast i8* %66 to i64*
  store i64 %64, i64* %67, align 8
  %68 = getelementptr inbounds i8, i8* %7, i64 736
  %69 = bitcast i8* %68 to i32*
  store i32 %65, i32* %69, align 8
  %70 = getelementptr inbounds i8, i8* %7, i64 760
  %71 = bitcast i8* %70 to %struct.VP9EncoderConfig*
  tail call fastcc void @set_encoder_config(%struct.VP9EncoderConfig* %71, %struct.vpx_codec_enc_cfg* %37, %struct.vp9_extracfg* %34)
  %72 = load i64, i64* %12, align 8
  %73 = lshr i64 %72, 18
  %74 = trunc i64 %73 to i32
  %75 = and i32 %74, 1
  %76 = getelementptr inbounds i8, i8* %7, i64 1160
  %77 = bitcast i8* %76 to i32*
  store i32 %75, i32* %77, align 8
  %78 = load %struct.BufferPool*, %struct.BufferPool** %20, align 8
  %79 = tail call %struct.VP9_COMP* @vp9_create_compressor(%struct.VP9EncoderConfig* %71, %struct.BufferPool* %78) #9
  %80 = getelementptr inbounds i8, i8* %7, i64 1200
  %81 = bitcast i8* %80 to %struct.VP9_COMP**
  store %struct.VP9_COMP* %79, %struct.VP9_COMP** %81, align 8
  %82 = icmp eq %struct.VP9_COMP* %79, null
  %83 = select i1 %82, i32 2, i32 0
  br label %84

84:                                               ; preds = %32, %59, %2, %6, %10
  %85 = phi i32 [ 2, %10 ], [ 2, %6 ], [ 0, %2 ], [ %83, %59 ], [ %38, %32 ]
  ret i32 %85
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @encoder_destroy(%struct.vpx_codec_alg_priv*) #1 {
  %2 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 8
  %3 = load i8*, i8** %2, align 8
  tail call void @free(i8* %3) #9
  %4 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 7
  %5 = load %struct.VP9_COMP*, %struct.VP9_COMP** %4, align 8
  tail call void @vp9_remove_compressor(%struct.VP9_COMP* %5) #9
  %6 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 21
  %7 = bitcast %struct.BufferPool** %6 to i8**
  %8 = load i8*, i8** %7, align 8
  tail call void @vpx_free(i8* %8) #9
  %9 = bitcast %struct.vpx_codec_alg_priv* %0 to i8*
  tail call void @vpx_free(i8* %9) #9
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @encoder_encode(%struct.vpx_codec_alg_priv*, %struct.vpx_image*, i64, i64, i64, i64) #1 {
  %7 = alloca i32, align 4
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca %struct.vpx_codec_cx_pkt, align 8
  %11 = alloca i32, align 4
  %12 = alloca %struct.yv12_buffer_config, align 8
  %13 = alloca i64, align 8
  %14 = alloca i64, align 8
  %15 = alloca i64, align 8
  %16 = alloca %struct.ENCODE_FRAME_RESULT, align 4
  %17 = alloca %struct.vpx_psnr_pkt, align 8
  %18 = alloca %struct.vpx_codec_cx_pkt, align 8
  %19 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %19)
  store volatile i32 -1431655766, i32* %7, align 4
  store volatile i32 0, i32* %7, align 4
  %20 = bitcast i64* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20)
  store volatile i64 -6148914691236517206, i64* %8, align 8
  store volatile i64 %4, i64* %8, align 8
  %21 = bitcast i64* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %21)
  store volatile i64 -6148914691236517206, i64* %9, align 8
  store volatile i64 %2, i64* %9, align 8
  %22 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 7
  %23 = load %struct.VP9_COMP*, %struct.VP9_COMP** %22, align 8
  %24 = bitcast %struct.vpx_codec_cx_pkt* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 136, i8* nonnull %24) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %24, i8 0, i64 136, i1 false)
  %25 = icmp eq %struct.VP9_COMP* %23, null
  br i1 %25, label %595, label %26

26:                                               ; preds = %6
  %27 = icmp ne %struct.vpx_image* %1, null
  br i1 %27, label %28, label %96

28:                                               ; preds = %26
  %29 = getelementptr inbounds %struct.vpx_image, %struct.vpx_image* %1, i64 0, i32 0
  %30 = load i32, i32* %29, align 8
  switch i32 %30, label %50 [
    i32 769, label %38
    i32 258, label %38
    i32 2306, label %38
    i32 265, label %38
    i32 261, label %31
    i32 262, label %31
    i32 263, label %31
    i32 2309, label %35
    i32 2310, label %35
    i32 2311, label %35
  ]

31:                                               ; preds = %28, %28, %28
  %32 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 1, i32 2
  %33 = load i32, i32* %32, align 8
  %34 = icmp eq i32 %33, 1
  br i1 %34, label %38, label %50

35:                                               ; preds = %28, %28, %28
  %36 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 1, i32 2
  %37 = load i32, i32* %36, align 8
  switch i32 %37, label %50 [
    i32 1, label %38
    i32 3, label %38
  ]

38:                                               ; preds = %35, %35, %31, %28, %28, %28, %28
  %39 = getelementptr inbounds %struct.vpx_image, %struct.vpx_image* %1, i64 0, i32 6
  %40 = load i32, i32* %39, align 8
  %41 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 1, i32 3
  %42 = load i32, i32* %41, align 4
  %43 = icmp eq i32 %40, %42
  br i1 %43, label %44, label %50

44:                                               ; preds = %38
  %45 = getelementptr inbounds %struct.vpx_image, %struct.vpx_image* %1, i64 0, i32 7
  %46 = load i32, i32* %45, align 4
  %47 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 1, i32 4
  %48 = load i32, i32* %47, align 8
  %49 = icmp eq i32 %46, %48
  br i1 %49, label %53, label %50

50:                                               ; preds = %38, %44, %28, %35, %31
  %51 = phi i8* [ getelementptr inbounds ([82 x i8], [82 x i8]* @.str.123, i64 0, i64 0), %31 ], [ getelementptr inbounds ([83 x i8], [83 x i8]* @.str.124, i64 0, i64 0), %35 ], [ getelementptr inbounds ([72 x i8], [72 x i8]* @.str.125, i64 0, i64 0), %28 ], [ getelementptr inbounds ([54 x i8], [54 x i8]* @.str.126, i64 0, i64 0), %44 ], [ getelementptr inbounds ([54 x i8], [54 x i8]* @.str.126, i64 0, i64 0), %38 ]
  %52 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 0, i32 0
  store i8* %51, i8** %52, align 8
  br label %53

53:                                               ; preds = %50, %44
  %54 = phi i32 [ 0, %44 ], [ 8, %50 ]
  store volatile i32 %54, i32* %7, align 4
  %55 = load volatile i32, i32* %7, align 4
  %56 = icmp eq i32 %55, 0
  br i1 %56, label %57, label %96

57:                                               ; preds = %53
  %58 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 1, i32 3
  %59 = load i32, i32* %58, align 4
  %60 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 1, i32 4
  %61 = load i32, i32* %60, align 8
  %62 = mul i32 %61, %59
  %63 = load i32, i32* %29, align 8
  switch i32 %63, label %71 [
    i32 769, label %72
    i32 265, label %72
    i32 258, label %72
    i32 261, label %64
    i32 262, label %65
    i32 263, label %66
    i32 2306, label %67
    i32 2309, label %68
    i32 2310, label %69
    i32 2311, label %70
  ]

64:                                               ; preds = %57
  br label %72

65:                                               ; preds = %57
  br label %72

66:                                               ; preds = %57
  br label %72

67:                                               ; preds = %57
  br label %72

68:                                               ; preds = %57
  br label %72

69:                                               ; preds = %57
  br label %72

70:                                               ; preds = %57
  br label %72

71:                                               ; preds = %57
  br label %72

72:                                               ; preds = %57, %57, %57, %64, %65, %66, %67, %68, %69, %70, %71
  %73 = phi i32 [ 0, %71 ], [ 32, %70 ], [ 48, %69 ], [ 32, %68 ], [ 24, %67 ], [ 16, %66 ], [ 24, %65 ], [ 16, %64 ], [ 12, %57 ], [ 12, %57 ], [ 12, %57 ]
  %74 = mul i32 %62, %73
  %75 = lshr i32 %74, 3
  %76 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %23, i64 0, i32 159
  %77 = load i32, i32* %76, align 8
  %78 = icmp eq i32 %77, 0
  %79 = select i1 %78, i32 2, i32 8
  %80 = mul i32 %79, %75
  %81 = zext i32 %80 to i64
  %82 = icmp ugt i64 %81, 8192
  %83 = select i1 %82, i64 %81, i64 8192
  %84 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 8
  %85 = load i8*, i8** %84, align 8
  %86 = icmp eq i8* %85, null
  br i1 %86, label %91, label %87

87:                                               ; preds = %72
  %88 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 9
  %89 = load i64, i64* %88, align 8
  %90 = icmp ult i64 %89, %83
  br i1 %90, label %91, label %96

91:                                               ; preds = %87, %72
  %92 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 9
  store i64 %83, i64* %92, align 8
  call void @free(i8* %85) #9
  %93 = load i64, i64* %92, align 8
  %94 = call noalias i8* @malloc(i64 %93) #9
  store i8* %94, i8** %84, align 8
  %95 = icmp eq i8* %94, null
  br i1 %95, label %595, label %96

96:                                               ; preds = %53, %91, %87, %26
  %97 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 5
  %98 = load i8, i8* %97, align 8
  %99 = icmp eq i8 %98, 0
  br i1 %99, label %103, label %100

100:                                              ; preds = %96
  %101 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 4
  %102 = load i64, i64* %101, align 8
  br label %106

103:                                              ; preds = %96
  %104 = load volatile i64, i64* %9, align 8
  %105 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 4
  store i64 %104, i64* %105, align 8
  store i8 1, i8* %97, align 8
  br label %106

106:                                              ; preds = %100, %103
  %107 = phi i64 [ %102, %100 ], [ %104, %103 ]
  %108 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 4
  %109 = load volatile i64, i64* %9, align 8
  %110 = sub nsw i64 %109, %107
  store volatile i64 %110, i64* %9, align 8
  %111 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 6, i32 16
  store i32 0, i32* %111, align 4
  %112 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 6, i32 15
  %113 = load i32, i32* %112, align 8
  %114 = icmp eq i32 %113, 2
  br i1 %114, label %118, label %115

115:                                              ; preds = %106
  %116 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 6
  store i32 2, i32* %112, align 8
  %117 = load %struct.VP9_COMP*, %struct.VP9_COMP** %22, align 8
  call void @vp9_change_config(%struct.VP9_COMP* %117, %struct.VP9EncoderConfig* %116) #9
  br label %118

118:                                              ; preds = %106, %115
  %119 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 18
  %120 = getelementptr inbounds %union.anon.12, %union.anon.12* %119, i64 0, i32 0, i32 0, i32 0
  store i32 0, i32* %120, align 8
  %121 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 18, i32 0, i32 0, i32 1
  store i32 256, i32* %121, align 4
  %122 = load volatile i64, i64* %8, align 8
  %123 = and i64 %122, 4194304
  %124 = icmp eq i64 %123, 0
  br i1 %124, label %129, label %125

125:                                              ; preds = %118
  %126 = load volatile i64, i64* %8, align 8
  %127 = and i64 %126, 524288
  %128 = icmp eq i64 %127, 0
  br i1 %128, label %129, label %137

129:                                              ; preds = %125, %118
  %130 = load volatile i64, i64* %8, align 8
  %131 = and i64 %130, 8388608
  %132 = icmp eq i64 %131, 0
  br i1 %132, label %139, label %133

133:                                              ; preds = %129
  %134 = load volatile i64, i64* %8, align 8
  %135 = and i64 %134, 16777216
  %136 = icmp eq i64 %135, 0
  br i1 %136, label %139, label %137

137:                                              ; preds = %125, %133
  %138 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 0, i32 0
  store i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.121, i64 0, i64 0), i8** %138, align 8
  br label %595

139:                                              ; preds = %133, %129
  %140 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %23, i64 0, i32 8, i32 0
  %141 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %23, i64 0, i32 8, i32 0, i32 4, i64 0
  %142 = call i32 @_setjmp(%struct.__jmp_buf_tag* %141) #10
  %143 = icmp eq i32 %142, 0
  %144 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %23, i64 0, i32 8, i32 0, i32 3
  br i1 %143, label %158, label %145

145:                                              ; preds = %139
  store i32 0, i32* %144, align 8
  %146 = getelementptr inbounds %struct.vpx_internal_error_info, %struct.vpx_internal_error_info* %140, i64 0, i32 0
  %147 = load i32, i32* %146, align 8
  %148 = icmp eq i32 %147, 0
  br i1 %148, label %156, label %149

149:                                              ; preds = %145
  %150 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %23, i64 0, i32 8, i32 0, i32 1
  %151 = load i32, i32* %150, align 4
  %152 = icmp eq i32 %151, 0
  %153 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %23, i64 0, i32 8, i32 0, i32 2, i64 0
  %154 = select i1 %152, i8* null, i8* %153
  %155 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 0, i32 0
  store i8* %154, i8** %155, align 8
  br label %156

156:                                              ; preds = %145, %149
  store volatile i32 %147, i32* %7, align 4
  call void @vpx_clear_system_state() #9
  %157 = load volatile i32, i32* %7, align 4
  br label %595

158:                                              ; preds = %139
  store i32 1, i32* %144, align 8
  %159 = load volatile i32, i32* %7, align 4
  %160 = icmp eq i32 %159, 0
  br i1 %160, label %161, label %163

161:                                              ; preds = %158
  %162 = load volatile i64, i64* %8, align 8
  call void @vp9_apply_encoding_flags(%struct.VP9_COMP* nonnull %23, i64 %162) #9
  br label %163

163:                                              ; preds = %161, %158
  %164 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 1, i32 32
  %165 = load i32, i32* %164, align 8
  %166 = icmp eq i32 %165, 1
  br i1 %166, label %167, label %181

167:                                              ; preds = %163
  %168 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 1, i32 33
  %169 = load i32, i32* %168, align 4
  %170 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 1, i32 34
  %171 = load i32, i32* %170, align 8
  %172 = icmp eq i32 %169, %171
  br i1 %172, label %173, label %181

173:                                              ; preds = %167
  %174 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 19
  %175 = load i32, i32* %174, align 8
  %176 = add i32 %175, 1
  store i32 %176, i32* %174, align 8
  %177 = icmp ugt i32 %176, %169
  br i1 %177, label %178, label %181

178:                                              ; preds = %173
  %179 = load volatile i64, i64* %8, align 8
  %180 = or i64 %179, 1
  store volatile i64 %180, i64* %8, align 8
  store i32 1, i32* %174, align 8
  br label %181

181:                                              ; preds = %173, %178, %167, %163
  %182 = load volatile i32, i32* %7, align 4
  %183 = icmp eq i32 %182, 0
  br i1 %183, label %184, label %593

184:                                              ; preds = %181
  %185 = bitcast i32* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %185) #9
  store i32 0, i32* %11, align 4
  %186 = bitcast %struct.yv12_buffer_config* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %186) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %186, i8 -86, i64 160, i1 false)
  %187 = bitcast i64* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %187) #9
  %188 = load volatile i64, i64* %9, align 8
  %189 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 3, i32 0
  %190 = load i64, i64* %189, align 8
  %191 = mul nsw i64 %190, %188
  %192 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 3, i32 1
  %193 = load i32, i32* %192, align 8
  %194 = sext i32 %193 to i64
  %195 = sdiv i64 %191, %194
  store i64 %195, i64* %13, align 8
  %196 = bitcast i64* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %196) #9
  %197 = load volatile i64, i64* %9, align 8
  %198 = add i64 %197, %3
  %199 = mul nsw i64 %198, %190
  %200 = sdiv i64 %199, %194
  store i64 %200, i64* %14, align 8
  %201 = bitcast i64* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %201) #9
  store i64 -6148914691236517206, i64* %15, align 8
  %202 = sdiv i64 %190, %194
  %203 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %23, i64 0, i32 104, i32 64
  store i64 %202, i64* %203, align 16
  %204 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %23, i64 0, i32 104, i32 65
  store i64 %195, i64* %204, align 8
  %205 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 0, i32 1
  %206 = load i64, i64* %205, align 8
  %207 = and i64 %206, 65536
  %208 = icmp eq i64 %207, 0
  br i1 %208, label %211, label %209

209:                                              ; preds = %184
  %210 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %23, i64 0, i32 98
  store i32 1, i32* %210, align 8
  br label %211

211:                                              ; preds = %184, %209
  br i1 %27, label %212, label %235

212:                                              ; preds = %211
  %213 = call i32 @image2yuvconfig(%struct.vpx_image* nonnull %1, %struct.yv12_buffer_config* nonnull %12) #9
  store volatile i32 %213, i32* %7, align 4
  %214 = load volatile i64, i64* %8, align 8
  %215 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 16
  %216 = load i64, i64* %215, align 8
  %217 = or i64 %216, %214
  %218 = load i64, i64* %13, align 8
  %219 = load i64, i64* %14, align 8
  %220 = call i32 @vp9_receive_raw_frame(%struct.VP9_COMP* nonnull %23, i64 %217, %struct.yv12_buffer_config* nonnull %12, i64 %218, i64 %219) #9
  %221 = icmp eq i32 %220, 0
  br i1 %221, label %234, label %222

222:                                              ; preds = %212
  %223 = getelementptr inbounds %struct.vpx_internal_error_info, %struct.vpx_internal_error_info* %140, i64 0, i32 0
  %224 = load i32, i32* %223, align 8
  %225 = icmp eq i32 %224, 0
  br i1 %225, label %233, label %226

226:                                              ; preds = %222
  %227 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %23, i64 0, i32 8, i32 0, i32 1
  %228 = load i32, i32* %227, align 4
  %229 = icmp eq i32 %228, 0
  %230 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %23, i64 0, i32 8, i32 0, i32 2, i64 0
  %231 = select i1 %229, i8* null, i8* %230
  %232 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 0, i32 0
  store i8* %231, i8** %232, align 8
  br label %233

233:                                              ; preds = %222, %226
  store volatile i32 %224, i32* %7, align 4
  br label %234

234:                                              ; preds = %212, %233
  store i64 0, i64* %215, align 8
  br label %235

235:                                              ; preds = %234, %211
  %236 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 8
  %237 = load i8*, i8** %236, align 8
  %238 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 9
  %239 = load i64, i64* %238, align 8
  %240 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 10
  %241 = load i8*, i8** %240, align 8
  %242 = icmp eq i8* %241, null
  br i1 %242, label %253, label %243

243:                                              ; preds = %235
  %244 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 11
  %245 = load i64, i64* %244, align 8
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %237, i8* nonnull align 1 %241, i64 %245, i1 false)
  store i8* %237, i8** %240, align 8
  %246 = load i64, i64* %244, align 8
  %247 = getelementptr inbounds i8, i8* %237, i64 %246
  %248 = sub i64 %239, %246
  %249 = load i64, i64* %238, align 8
  %250 = lshr i64 %249, 1
  %251 = icmp ult i64 %248, %250
  br i1 %251, label %252, label %253

252:                                              ; preds = %243
  call void (%struct.vpx_internal_error_info*, i32, i8*, ...) @vpx_internal_error(%struct.vpx_internal_error_info* %140, i32 1, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.122, i64 0, i64 0)) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %201) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %196) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %187) #9
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %186) #9
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %185) #9
  br label %595

253:                                              ; preds = %235, %243
  %254 = phi i64 [ %248, %243 ], [ %239, %235 ]
  %255 = phi i8* [ %247, %243 ], [ %237, %235 ]
  %256 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %23, i64 0, i32 9, i32 16
  %257 = load i32, i32* %256, align 4
  %258 = icmp eq i32 %257, 1
  br i1 %258, label %259, label %263

259:                                              ; preds = %253
  %260 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %23, i64 0, i32 103
  %261 = load i32, i32* %260, align 4
  %262 = icmp eq i32 %261, 0
  br i1 %262, label %592, label %263

263:                                              ; preds = %259, %253
  %264 = bitcast %struct.ENCODE_FRAME_RESULT* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %264) #9
  %265 = getelementptr inbounds %struct.ENCODE_FRAME_RESULT, %struct.ENCODE_FRAME_RESULT* %16, i64 0, i32 0
  store i32 -1431655766, i32* %265, align 4
  %266 = getelementptr inbounds %struct.ENCODE_FRAME_RESULT, %struct.ENCODE_FRAME_RESULT* %16, i64 0, i32 1
  store i32 -1431655766, i32* %266, align 4
  %267 = getelementptr inbounds %struct.ENCODE_FRAME_RESULT, %struct.ENCODE_FRAME_RESULT* %16, i64 0, i32 2
  store i32 -1431655766, i32* %267, align 4
  call void @vp9_init_encode_frame_result(%struct.ENCODE_FRAME_RESULT* nonnull %16) #9
  %268 = xor i1 %27, true
  %269 = zext i1 %268 to i32
  %270 = load i64, i64* %238, align 8
  %271 = lshr i64 %270, 1
  %272 = icmp ult i64 %254, %271
  br i1 %272, label %591, label %273

273:                                              ; preds = %263
  %274 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %23, i64 0, i32 103
  %275 = bitcast %struct.vpx_psnr_pkt* %17 to i8*
  %276 = bitcast %struct.vpx_codec_cx_pkt* %18 to i8*
  %277 = getelementptr inbounds %struct.vpx_codec_cx_pkt, %struct.vpx_codec_cx_pkt* %18, i64 0, i32 0
  %278 = getelementptr inbounds %struct.vpx_codec_cx_pkt, %struct.vpx_codec_cx_pkt* %18, i64 0, i32 1
  %279 = bitcast %union.anon.2* %278 to i8*
  %280 = getelementptr inbounds %union.anon.12, %union.anon.12* %119, i64 0, i32 0, i32 0
  %281 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %23, i64 0, i32 104, i32 33
  %282 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %23, i64 0, i32 8, i32 24
  %283 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %23, i64 0, i32 104, i32 0
  %284 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %23, i64 0, i32 104, i32 2
  %285 = getelementptr inbounds %struct.vpx_codec_cx_pkt, %struct.vpx_codec_cx_pkt* %10, i64 0, i32 0
  %286 = getelementptr inbounds %struct.vpx_codec_cx_pkt, %struct.vpx_codec_cx_pkt* %10, i64 0, i32 1, i32 0
  %287 = getelementptr inbounds %struct.vpx_codec_cx_pkt, %struct.vpx_codec_cx_pkt* %10, i64 0, i32 1, i32 0, i32 2
  %288 = getelementptr inbounds %struct.vpx_codec_cx_pkt, %struct.vpx_codec_cx_pkt* %10, i64 0, i32 1, i32 0, i32 3
  %289 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %23, i64 0, i32 104, i32 0
  %290 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %23, i64 0, i32 104, i32 3
  %291 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %23, i64 0, i32 104, i32 1
  %292 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %23, i64 0, i32 99
  %293 = getelementptr inbounds %struct.vpx_codec_cx_pkt, %struct.vpx_codec_cx_pkt* %10, i64 0, i32 1, i32 0, i32 4
  %294 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %23, i64 0, i32 8, i32 3
  %295 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %23, i64 0, i32 8, i32 4
  %296 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 12
  %297 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 14
  %298 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 11
  %299 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 20, i32 0
  %300 = bitcast i8** %240 to i64*
  %301 = bitcast %struct.anon.3* %286 to i64*
  %302 = getelementptr inbounds %struct.vpx_codec_cx_pkt, %struct.vpx_codec_cx_pkt* %10, i64 0, i32 1, i32 0, i32 1
  %303 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %286, i64 0, i32 0
  %304 = getelementptr inbounds %struct.vpx_codec_cx_pkt, %struct.vpx_codec_cx_pkt* %10, i64 0, i32 1, i32 0, i32 5
  %305 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 20, i32 1
  %306 = bitcast %struct.vpx_codec_cx_pkt* %18 to i8*
  %307 = bitcast i8** %240 to i8*
  %308 = bitcast i8** %240 to i8*
  br label %309

309:                                              ; preds = %273, %427
  %310 = phi i8* [ %255, %273 ], [ %429, %427 ]
  %311 = phi i64 [ %254, %273 ], [ %428, %427 ]
  %312 = call i32 @vp9_get_compressed_data(%struct.VP9_COMP* %23, i32* nonnull %11, i64* nonnull %15, i8* %310, i64* nonnull %13, i64* nonnull %14, i32 %269, %struct.ENCODE_FRAME_RESULT* nonnull %16) #9
  %313 = icmp eq i32 %312, -1
  br i1 %313, label %591, label %314

314:                                              ; preds = %309
  %315 = load i64, i64* %15, align 8
  %316 = icmp eq i64 %315, 0
  br i1 %316, label %328, label %317

317:                                              ; preds = %314
  %318 = load i32, i32* %274, align 4
  %319 = icmp eq i32 %318, 0
  br i1 %319, label %320, label %334

320:                                              ; preds = %317
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %275) #9
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %275, i8* align 8 bitcast (%struct.vpx_psnr_pkt* @__const.encoder_encode.psnr to i8*), i64 80, i1 false)
  %321 = call i32 @vp9_get_psnr(%struct.VP9_COMP* %23, %struct.vpx_psnr_pkt* nonnull %17) #9
  %322 = icmp eq i32 %321, 0
  br i1 %322, label %325, label %323

323:                                              ; preds = %320
  call void @llvm.lifetime.start.p0i8(i64 136, i8* nonnull %276) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %306, i8 -86, i64 136, i1 false)
  store i32 3, i32* %277, align 8, !alias.scope !2
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %279, i8* nonnull align 8 %275, i64 80, i1 false) #9
  %324 = call i32 @vpx_codec_pkt_list_add(%struct.vpx_codec_pkt_list* %280, %struct.vpx_codec_cx_pkt* nonnull %18) #9
  call void @llvm.lifetime.end.p0i8(i64 136, i8* nonnull %276) #9
  br label %325

325:                                              ; preds = %323, %320
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %275) #9
  %326 = load i64, i64* %15, align 8
  %327 = icmp eq i64 %326, 0
  br i1 %327, label %328, label %334

328:                                              ; preds = %314, %325
  %329 = load i32, i32* %274, align 4
  %330 = icmp eq i32 %329, 0
  br i1 %330, label %427, label %331

331:                                              ; preds = %328
  %332 = load i32, i32* %281, align 4
  %333 = icmp eq i32 %332, 0
  br i1 %333, label %427, label %334

334:                                              ; preds = %317, %331, %325
  %335 = phi i64 [ 0, %331 ], [ %326, %325 ], [ %315, %317 ]
  %336 = phi i1 [ true, %331 ], [ false, %325 ], [ false, %317 ]
  %337 = load i32, i32* %282, align 16
  %338 = icmp eq i32 %337, 0
  br i1 %338, label %347, label %339

339:                                              ; preds = %334
  %340 = load i32, i32* %274, align 4
  %341 = icmp eq i32 %340, 0
  br i1 %341, label %433, label %342

342:                                              ; preds = %339
  %343 = load i32, i32* %283, align 16
  %344 = load i32, i32* %284, align 8
  %345 = add nsw i32 %344, -1
  %346 = icmp slt i32 %343, %345
  br i1 %346, label %347, label %433

347:                                              ; preds = %334, %342
  %348 = load i8*, i8** %240, align 8
  %349 = icmp eq i8* %348, null
  br i1 %349, label %350, label %351

350:                                              ; preds = %347
  store i8* %310, i8** %240, align 8
  br label %351

351:                                              ; preds = %350, %347
  %352 = load i64, i64* %298, align 8
  %353 = add i64 %352, %335
  store i64 %353, i64* %298, align 8
  br i1 %336, label %359, label %354

354:                                              ; preds = %351
  %355 = load i32, i32* %296, align 8
  %356 = add nsw i32 %355, 1
  store i32 %356, i32* %296, align 8
  %357 = sext i32 %355 to i64
  %358 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 13, i64 %357
  store i64 %335, i64* %358, align 8
  br label %359

359:                                              ; preds = %351, %354
  %360 = load i64, i64* %297, align 8
  %361 = or i64 %360, %335
  store i64 %361, i64* %297, align 8
  %362 = getelementptr inbounds i8, i8* %310, i64 %335
  %363 = sub i64 %311, %335
  %364 = load i32, i32* %294, align 16
  %365 = load i32, i32* %283, align 16
  %366 = sext i32 %365 to i64
  %367 = getelementptr inbounds %struct.vpx_codec_cx_pkt, %struct.vpx_codec_cx_pkt* %10, i64 0, i32 1, i32 0, i32 6, i64 %366
  store i32 %364, i32* %367, align 4
  %368 = load i32, i32* %295, align 4
  %369 = load i32, i32* %283, align 16
  %370 = sext i32 %369 to i64
  %371 = getelementptr inbounds %struct.vpx_codec_cx_pkt, %struct.vpx_codec_cx_pkt* %10, i64 0, i32 1, i32 0, i32 7, i64 %370
  store i32 %368, i32* %371, align 4
  %372 = load i32, i32* %283, align 16
  %373 = sext i32 %372 to i64
  %374 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %23, i64 0, i32 104, i32 36, i64 %373
  %375 = load i32, i32* %374, align 4
  %376 = trunc i32 %375 to i8
  %377 = sub i8 1, %376
  %378 = getelementptr inbounds %struct.vpx_codec_cx_pkt, %struct.vpx_codec_cx_pkt* %10, i64 0, i32 1, i32 0, i32 8, i64 %373
  store i8 %377, i8* %378, align 1
  %379 = load void (%struct.vpx_codec_cx_pkt*, i8*)*, void (%struct.vpx_codec_cx_pkt*, i8*)** %299, align 8
  %380 = icmp eq void (%struct.vpx_codec_cx_pkt*, i8*)* %379, null
  br i1 %380, label %427, label %381

381:                                              ; preds = %359
  store i32 0, i32* %285, align 8
  %382 = load i64, i64* %13, align 8
  %383 = load i64, i64* %189, align 8
  %384 = sdiv i64 %383, 2
  %385 = icmp sgt i64 %383, 1
  %386 = zext i1 %385 to i64
  %387 = sub nsw i64 %384, %386
  %388 = load i32, i32* %192, align 8
  %389 = sext i32 %388 to i64
  %390 = mul nsw i64 %382, %389
  %391 = add nsw i64 %387, %390
  %392 = sdiv i64 %391, %383
  %393 = load i64, i64* %108, align 8
  %394 = add nsw i64 %393, %392
  store i64 %394, i64* %287, align 8
  %395 = load i64, i64* %14, align 8
  %396 = sub nsw i64 %395, %382
  %397 = mul nsw i64 %396, %389
  %398 = add nsw i64 %397, %387
  %399 = sdiv i64 %398, %383
  store i64 %399, i64* %288, align 8
  %400 = load i32, i32* %11, align 4
  %401 = shl i32 %400, 16
  %402 = and i32 %400, 1
  %403 = icmp eq i32 %402, 0
  br i1 %403, label %404, label %417

404:                                              ; preds = %381
  %405 = load i32, i32* %274, align 4
  %406 = icmp eq i32 %405, 0
  br i1 %406, label %419, label %407

407:                                              ; preds = %404
  %408 = load i32, i32* %289, align 16
  %409 = load i32, i32* %290, align 4
  %410 = mul nsw i32 %409, %408
  %411 = load i32, i32* %291, align 4
  %412 = add nsw i32 %410, %411
  %413 = sext i32 %412 to i64
  %414 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %23, i64 0, i32 104, i32 12, i64 %413, i32 14
  %415 = load i32, i32* %414, align 4
  %416 = icmp eq i32 %415, 0
  br i1 %416, label %419, label %417

417:                                              ; preds = %407, %381
  %418 = or i32 %401, 1
  br label %419

419:                                              ; preds = %404, %407, %417
  %420 = phi i32 [ %418, %417 ], [ %401, %407 ], [ %401, %404 ]
  %421 = load i32, i32* %292, align 4
  %422 = icmp eq i32 %421, 0
  %423 = or i32 %420, 2
  %424 = select i1 %422, i32 %420, i32 %423
  store i32 %424, i32* %293, align 8
  %425 = load i64, i64* %300, align 8
  store i64 %425, i64* %301, align 8
  store i64 %335, i64* %302, align 8
  store i64 0, i64* %297, align 8
  call void @llvm.memset.p0i8.i64(i8* align 8 %308, i8 0, i64 20, i1 false)
  %426 = load i8*, i8** %305, align 8
  call void %379(%struct.vpx_codec_cx_pkt* nonnull %10, i8* %426) #9
  br label %427

427:                                              ; preds = %586, %328, %331, %577, %583, %419, %359
  %428 = phi i64 [ %363, %359 ], [ %363, %419 ], [ %580, %586 ], [ %580, %583 ], [ %311, %331 ], [ %311, %328 ], [ %580, %577 ]
  %429 = phi i8* [ %362, %359 ], [ %362, %419 ], [ %579, %586 ], [ %579, %583 ], [ %310, %331 ], [ %310, %328 ], [ %579, %577 ]
  %430 = load i64, i64* %238, align 8
  %431 = lshr i64 %430, 1
  %432 = icmp ult i64 %428, %431
  br i1 %432, label %591, label %309

433:                                              ; preds = %339, %342
  store i32 0, i32* %285, align 8
  %434 = load i64, i64* %13, align 8
  %435 = load i64, i64* %189, align 8
  %436 = sdiv i64 %435, 2
  %437 = icmp sgt i64 %435, 1
  %438 = zext i1 %437 to i64
  %439 = sub nsw i64 %436, %438
  %440 = load i32, i32* %192, align 8
  %441 = sext i32 %440 to i64
  %442 = mul nsw i64 %434, %441
  %443 = add nsw i64 %439, %442
  %444 = sdiv i64 %443, %435
  %445 = load i64, i64* %108, align 8
  %446 = add nsw i64 %445, %444
  store i64 %446, i64* %287, align 8
  %447 = load i64, i64* %14, align 8
  %448 = sub nsw i64 %447, %434
  %449 = mul nsw i64 %448, %441
  %450 = add nsw i64 %449, %439
  %451 = sdiv i64 %450, %435
  store i64 %451, i64* %288, align 8
  %452 = load i32, i32* %11, align 4
  %453 = shl i32 %452, 16
  %454 = and i32 %452, 1
  %455 = icmp eq i32 %454, 0
  br i1 %455, label %456, label %467

456:                                              ; preds = %433
  br i1 %341, label %469, label %457

457:                                              ; preds = %456
  %458 = load i32, i32* %289, align 16
  %459 = load i32, i32* %290, align 4
  %460 = mul nsw i32 %459, %458
  %461 = load i32, i32* %291, align 4
  %462 = add nsw i32 %460, %461
  %463 = sext i32 %462 to i64
  %464 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %23, i64 0, i32 104, i32 12, i64 %463, i32 14
  %465 = load i32, i32* %464, align 4
  %466 = icmp eq i32 %465, 0
  br i1 %466, label %469, label %467

467:                                              ; preds = %457, %433
  %468 = or i32 %453, 1
  br label %469

469:                                              ; preds = %456, %457, %467
  %470 = phi i32 [ %468, %467 ], [ %453, %457 ], [ %453, %456 ]
  %471 = load i32, i32* %292, align 4
  %472 = icmp eq i32 %471, 0
  %473 = or i32 %470, 2
  %474 = select i1 %472, i32 %470, i32 %473
  store i32 %474, i32* %293, align 8
  %475 = load i32, i32* %294, align 16
  %476 = load i32, i32* %283, align 16
  %477 = sext i32 %476 to i64
  %478 = getelementptr inbounds %struct.vpx_codec_cx_pkt, %struct.vpx_codec_cx_pkt* %10, i64 0, i32 1, i32 0, i32 6, i64 %477
  store i32 %475, i32* %478, align 4
  %479 = load i32, i32* %295, align 4
  %480 = load i32, i32* %283, align 16
  %481 = sext i32 %480 to i64
  %482 = getelementptr inbounds %struct.vpx_codec_cx_pkt, %struct.vpx_codec_cx_pkt* %10, i64 0, i32 1, i32 0, i32 7, i64 %481
  store i32 %479, i32* %482, align 4
  %483 = load i32, i32* %283, align 16
  %484 = sext i32 %483 to i64
  %485 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %23, i64 0, i32 104, i32 36, i64 %484
  %486 = load i32, i32* %485, align 4
  %487 = trunc i32 %486 to i8
  %488 = sub i8 1, %487
  %489 = getelementptr inbounds %struct.vpx_codec_cx_pkt, %struct.vpx_codec_cx_pkt* %10, i64 0, i32 1, i32 0, i32 8, i64 %484
  store i8 %488, i8* %489, align 1
  %490 = load i8*, i8** %240, align 8
  %491 = icmp eq i8* %490, null
  br i1 %491, label %569, label %492

492:                                              ; preds = %469
  br i1 %336, label %498, label %493

493:                                              ; preds = %492
  %494 = load i32, i32* %296, align 8
  %495 = add nsw i32 %494, 1
  store i32 %495, i32* %296, align 8
  %496 = sext i32 %494 to i64
  %497 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 13, i64 %496
  store i64 %335, i64* %497, align 8
  br label %498

498:                                              ; preds = %492, %493
  %499 = load i64, i64* %297, align 8
  %500 = or i64 %499, %335
  store i64 %500, i64* %297, align 8
  %501 = load i64, i64* %298, align 8
  %502 = add i64 %501, %335
  store i64 %502, i64* %298, align 8
  %503 = load void (%struct.vpx_codec_cx_pkt*, i8*)*, void (%struct.vpx_codec_cx_pkt*, i8*)** %299, align 8
  %504 = icmp eq void (%struct.vpx_codec_cx_pkt*, i8*)* %503, null
  br i1 %504, label %505, label %566

505:                                              ; preds = %498
  %506 = load i32, i32* %296, align 8
  %507 = add i32 %506, 63
  %508 = icmp ult i64 %500, 255
  br i1 %508, label %511, label %509

509:                                              ; preds = %505
  %510 = icmp ult i64 %500, 65535
  br i1 %510, label %511, label %557

511:                                              ; preds = %559, %557, %509, %505
  %512 = phi i32 [ 0, %505 ], [ 1, %509 ], [ 2, %557 ], [ %561, %559 ]
  %513 = shl nuw nsw i32 %512, 3
  %514 = or i32 %513, %507
  %515 = trunc i32 %514 to i8
  %516 = or i8 %515, -64
  %517 = add nuw nsw i32 %512, 1
  %518 = mul nsw i32 %517, %506
  %519 = add nsw i32 %518, 2
  %520 = sext i32 %519 to i64
  %521 = add i64 %502, %520
  %522 = load i64, i64* %238, align 8
  %523 = icmp ult i64 %521, %522
  br i1 %523, label %524, label %562

524:                                              ; preds = %511
  %525 = load i8*, i8** %240, align 8
  %526 = getelementptr inbounds i8, i8* %525, i64 %502
  %527 = getelementptr inbounds i8, i8* %526, i64 1
  store i8 %516, i8* %526, align 1
  %528 = load i32, i32* %296, align 8
  %529 = icmp sgt i32 %528, 0
  br i1 %529, label %530, label %552

530:                                              ; preds = %524
  %531 = icmp eq i32 %512, 0
  %532 = icmp eq i32 %517, 2
  %533 = icmp eq i32 %517, 3
  %534 = icmp eq i32 %517, 4
  %535 = icmp eq i32 %517, 5
  %536 = icmp eq i32 %517, 6
  %537 = icmp eq i32 %517, 7
  br label %538

538:                                              ; preds = %530, %546
  %539 = phi i64 [ %548, %546 ], [ 0, %530 ]
  %540 = phi i8* [ %547, %546 ], [ %527, %530 ]
  %541 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 13, i64 %539
  %542 = load i64, i64* %541, align 8
  %543 = trunc i64 %542 to i32
  %544 = trunc i64 %542 to i8
  %545 = getelementptr inbounds i8, i8* %540, i64 1
  store i8 %544, i8* %540, align 1
  br i1 %531, label %546, label %597

546:                                              ; preds = %615, %613, %611, %609, %605, %601, %597, %538
  %547 = phi i8* [ %545, %538 ], [ %600, %597 ], [ %604, %601 ], [ %608, %605 ], [ %610, %609 ], [ %612, %611 ], [ %614, %613 ], [ %616, %615 ]
  %548 = add nuw nsw i64 %539, 1
  %549 = load i32, i32* %296, align 8
  %550 = sext i32 %549 to i64
  %551 = icmp slt i64 %548, %550
  br i1 %551, label %538, label %552

552:                                              ; preds = %546, %524
  %553 = phi i8* [ %527, %524 ], [ %547, %546 ]
  store i8 %516, i8* %553, align 1
  %554 = load i64, i64* %298, align 8
  %555 = add i64 %554, %520
  store i64 %555, i64* %298, align 8
  %556 = load i64, i64* %15, align 8
  br label %562

557:                                              ; preds = %509
  %558 = icmp ult i64 %500, 16777215
  br i1 %558, label %511, label %559

559:                                              ; preds = %557
  %560 = icmp ult i64 %500, 4294967295
  %561 = select i1 %560, i32 3, i32 4
  br label %511

562:                                              ; preds = %511, %552
  %563 = phi i64 [ %502, %511 ], [ %555, %552 ]
  %564 = phi i64 [ %335, %511 ], [ %556, %552 ]
  %565 = add i64 %564, %520
  store i64 %565, i64* %15, align 8
  br label %566

566:                                              ; preds = %498, %562
  %567 = phi i64 [ %502, %498 ], [ %563, %562 ]
  %568 = load i64, i64* %300, align 8
  store i64 %568, i64* %301, align 8
  store i64 %567, i64* %302, align 8
  store i64 0, i64* %297, align 8
  call void @llvm.memset.p0i8.i64(i8* align 8 %307, i8 0, i64 20, i1 false)
  br label %570

569:                                              ; preds = %469
  store i8* %310, i8** %303, align 8
  store i64 %335, i64* %302, align 8
  br label %570

570:                                              ; preds = %569, %566
  store i32 -1, i32* %304, align 4
  %571 = load void (%struct.vpx_codec_cx_pkt*, i8*)*, void (%struct.vpx_codec_cx_pkt*, i8*)** %299, align 8
  %572 = icmp eq void (%struct.vpx_codec_cx_pkt*, i8*)* %571, null
  br i1 %572, label %575, label %573

573:                                              ; preds = %570
  %574 = load i8*, i8** %305, align 8
  call void %571(%struct.vpx_codec_cx_pkt* nonnull %10, i8* %574) #9
  br label %577

575:                                              ; preds = %570
  %576 = call i32 @vpx_codec_pkt_list_add(%struct.vpx_codec_pkt_list* %280, %struct.vpx_codec_cx_pkt* nonnull %10) #9
  br label %577

577:                                              ; preds = %575, %573
  %578 = load i64, i64* %15, align 8
  %579 = getelementptr inbounds i8, i8* %310, i64 %578
  %580 = sub i64 %311, %578
  %581 = load i32, i32* %274, align 4
  %582 = icmp eq i32 %581, 0
  br i1 %582, label %427, label %583

583:                                              ; preds = %577
  %584 = load i32, i32* %256, align 4
  %585 = icmp eq i32 %584, 0
  br i1 %585, label %586, label %427

586:                                              ; preds = %583
  %587 = load i32, i32* %283, align 16
  %588 = load i32, i32* %284, align 8
  %589 = add nsw i32 %588, -1
  %590 = icmp eq i32 %587, %589
  br i1 %590, label %591, label %427

591:                                              ; preds = %586, %427, %309, %263
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %264) #9
  br label %592

592:                                              ; preds = %591, %259
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %201) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %196) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %187) #9
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %186) #9
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %185) #9
  br label %593

593:                                              ; preds = %592, %181
  store i32 0, i32* %144, align 8
  %594 = load volatile i32, i32* %7, align 4
  br label %595

595:                                              ; preds = %252, %91, %6, %593, %156, %137
  %596 = phi i32 [ 8, %137 ], [ %157, %156 ], [ %594, %593 ], [ 8, %6 ], [ 2, %91 ], [ 1, %252 ]
  call void @llvm.lifetime.end.p0i8(i64 136, i8* nonnull %24) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %19)
  ret i32 %596

597:                                              ; preds = %538
  %598 = lshr i32 %543, 8
  %599 = trunc i32 %598 to i8
  %600 = getelementptr inbounds i8, i8* %540, i64 2
  store i8 %599, i8* %545, align 1
  br i1 %532, label %546, label %601

601:                                              ; preds = %597
  %602 = lshr i32 %543, 16
  %603 = trunc i32 %602 to i8
  %604 = getelementptr inbounds i8, i8* %540, i64 3
  store i8 %603, i8* %600, align 1
  br i1 %533, label %546, label %605

605:                                              ; preds = %601
  %606 = lshr i32 %543, 24
  %607 = trunc i32 %606 to i8
  %608 = getelementptr inbounds i8, i8* %540, i64 4
  store i8 %607, i8* %604, align 1
  br i1 %534, label %546, label %609

609:                                              ; preds = %605
  %610 = getelementptr inbounds i8, i8* %540, i64 5
  store i8 0, i8* %608, align 1
  br i1 %535, label %546, label %611

611:                                              ; preds = %609
  %612 = getelementptr inbounds i8, i8* %540, i64 6
  store i8 0, i8* %610, align 1
  br i1 %536, label %546, label %613

613:                                              ; preds = %611
  %614 = getelementptr inbounds i8, i8* %540, i64 7
  store i8 0, i8* %612, align 1
  br i1 %537, label %546, label %615

615:                                              ; preds = %613
  %616 = getelementptr inbounds i8, i8* %540, i64 8
  store i8 0, i8* %614, align 1
  br label %546
}

; Function Attrs: nounwind ssp uwtable
define internal %struct.vpx_codec_cx_pkt* @encoder_get_cxdata(%struct.vpx_codec_alg_priv*, i8**) #1 {
  %3 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 18, i32 0, i32 0
  %4 = tail call %struct.vpx_codec_cx_pkt* @vpx_codec_pkt_list_get(%struct.vpx_codec_pkt_list* %3, i8** %1) #9
  ret %struct.vpx_codec_cx_pkt* %4
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @encoder_set_config(%struct.vpx_codec_alg_priv*, %struct.vpx_codec_enc_cfg* readonly) #1 {
  %3 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 3
  %4 = load i32, i32* %3, align 4
  %5 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 1
  %6 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 1, i32 3
  %7 = load i32, i32* %6, align 4
  %8 = icmp eq i32 %4, %7
  br i1 %8, label %9, label %18

9:                                                ; preds = %2
  %10 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 4
  %11 = load i32, i32* %10, align 8
  %12 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 1, i32 4
  %13 = load i32, i32* %12, align 8
  %14 = icmp eq i32 %11, %13
  br i1 %14, label %15, label %18

15:                                               ; preds = %9
  %16 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 10
  %17 = load i32, i32* %16, align 4
  br label %59

18:                                               ; preds = %9, %2
  %19 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 10
  %20 = load i32, i32* %19, align 4
  %21 = icmp ugt i32 %20, 1
  br i1 %21, label %26, label %22

22:                                               ; preds = %18
  %23 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 9
  %24 = load i32, i32* %23, align 8
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %28, label %26

26:                                               ; preds = %22, %18
  %27 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 0, i32 0
  store i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.127, i64 0, i64 0), i8** %27, align 8
  br label %91

28:                                               ; preds = %22
  %29 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 1, i32 4
  %30 = load i32, i32* %29, align 8
  %31 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 4
  %32 = load i32, i32* %31, align 8
  %33 = shl nsw i32 %4, 1
  %34 = icmp slt i32 %33, %7
  %35 = shl nsw i32 %32, 1
  %36 = icmp slt i32 %35, %30
  %37 = or i1 %34, %36
  %38 = shl nsw i32 %7, 4
  %39 = icmp slt i32 %38, %4
  %40 = or i1 %39, %37
  %41 = shl nsw i32 %30, 4
  %42 = icmp slt i32 %41, %32
  %43 = or i1 %42, %40
  br i1 %43, label %58, label %44

44:                                               ; preds = %28
  %45 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 7
  %46 = load %struct.VP9_COMP*, %struct.VP9_COMP** %45, align 8
  %47 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %46, i64 0, i32 100
  %48 = load i32, i32* %47, align 16
  %49 = icmp ne i32 %48, 0
  %50 = icmp sgt i32 %4, %48
  %51 = and i1 %49, %50
  br i1 %51, label %58, label %52

52:                                               ; preds = %44
  %53 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %46, i64 0, i32 101
  %54 = load i32, i32* %53, align 4
  %55 = icmp ne i32 %54, 0
  %56 = icmp sgt i32 %32, %54
  %57 = and i1 %55, %56
  br i1 %57, label %58, label %59

58:                                               ; preds = %52, %44, %28
  br label %59

59:                                               ; preds = %15, %52, %58
  %60 = phi i32 [ %20, %58 ], [ %20, %52 ], [ %17, %15 ]
  %61 = phi i32 [ 1, %58 ], [ 0, %52 ], [ 0, %15 ]
  %62 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 1, i32 10
  %63 = load i32, i32* %62, align 4
  %64 = icmp ugt i32 %60, %63
  br i1 %64, label %65, label %67

65:                                               ; preds = %59
  %66 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 0, i32 0
  store i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.128, i64 0, i64 0), i8** %66, align 8
  br label %91

67:                                               ; preds = %59
  %68 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 2
  %69 = tail call fastcc i32 @validate_config(%struct.vpx_codec_alg_priv* %0, %struct.vpx_codec_enc_cfg* %1, %struct.vp9_extracfg* %68)
  %70 = icmp eq i32 %69, 0
  br i1 %70, label %71, label %84

71:                                               ; preds = %67
  %72 = bitcast %struct.vpx_codec_enc_cfg* %5 to i8*
  %73 = bitcast %struct.vpx_codec_enc_cfg* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %72, i8* align 8 %73, i64 384, i1 false)
  %74 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 6
  tail call fastcc void @set_encoder_config(%struct.VP9EncoderConfig* %74, %struct.vpx_codec_enc_cfg* %5, %struct.vp9_extracfg* %68)
  %75 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 7
  %76 = load %struct.VP9_COMP*, %struct.VP9_COMP** %75, align 8
  %77 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %76, i64 0, i32 8, i32 79
  %78 = load i32, i32* %77, align 4
  %79 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %74, i64 0, i32 0
  %80 = load i32, i32* %79, align 8
  %81 = icmp ne i32 %78, %80
  %82 = zext i1 %81 to i32
  %83 = or i32 %61, %82
  tail call void @vp9_change_config(%struct.VP9_COMP* %76, %struct.VP9EncoderConfig* %74) #9
  br label %84

84:                                               ; preds = %71, %67
  %85 = phi i32 [ %83, %71 ], [ %61, %67 ]
  %86 = icmp eq i32 %85, 0
  br i1 %86, label %91, label %87

87:                                               ; preds = %84
  %88 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 16
  %89 = load i64, i64* %88, align 8
  %90 = or i64 %89, 1
  store i64 %90, i64* %88, align 8
  br label %91

91:                                               ; preds = %87, %84, %65, %26
  %92 = phi i32 [ 8, %26 ], [ 8, %65 ], [ %69, %84 ], [ %69, %87 ]
  ret i32 %92
}

; Function Attrs: nounwind ssp uwtable
define internal %struct.vpx_image* @encoder_get_preview(%struct.vpx_codec_alg_priv*) #1 {
  %2 = alloca %struct.yv12_buffer_config, align 8
  %3 = alloca %struct.vp9_ppflags_t, align 4
  %4 = bitcast %struct.yv12_buffer_config* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %4) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %4, i8 -86, i64 160, i1 false)
  %5 = bitcast %struct.vp9_ppflags_t* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %5) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %5, i8 0, i64 12, i1 false)
  %6 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 17, i32 0
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %17, label %9

9:                                                ; preds = %1
  %10 = getelementptr inbounds %struct.vp9_ppflags_t, %struct.vp9_ppflags_t* %3, i64 0, i32 2
  %11 = getelementptr inbounds %struct.vp9_ppflags_t, %struct.vp9_ppflags_t* %3, i64 0, i32 1
  %12 = getelementptr inbounds %struct.vp9_ppflags_t, %struct.vp9_ppflags_t* %3, i64 0, i32 0
  store i32 %7, i32* %12, align 4
  %13 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 17, i32 1
  %14 = load i32, i32* %13, align 4
  store i32 %14, i32* %11, align 4
  %15 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 17, i32 2
  %16 = load i32, i32* %15, align 8
  store i32 %16, i32* %10, align 4
  br label %17

17:                                               ; preds = %1, %9
  %18 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 7
  %19 = load %struct.VP9_COMP*, %struct.VP9_COMP** %18, align 8
  %20 = call i32 @vp9_get_preview_raw_frame(%struct.VP9_COMP* %19, %struct.yv12_buffer_config* nonnull %2, %struct.vp9_ppflags_t* nonnull %3) #9
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %24

22:                                               ; preds = %17
  %23 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 15
  call void @yuvconfig2image(%struct.vpx_image* %23, %struct.yv12_buffer_config* nonnull %2, i8* null) #9
  br label %24

24:                                               ; preds = %17, %22
  %25 = phi %struct.vpx_image* [ %23, %22 ], [ null, %17 ]
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %5) #9
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %4) #9
  ret %struct.vpx_image* %25
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vp9_get_encoder_config(%struct.VP9EncoderConfig* noalias sret, i32, i32, i64, i32, i32, i32) local_unnamed_addr #1 {
  %8 = alloca %struct.vp9_extracfg, align 4
  %9 = alloca %struct.vpx_codec_enc_cfg, align 8
  %10 = bitcast %struct.VP9EncoderConfig* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %10, i8* align 8 bitcast ({ i32, i32, i32, i32, i32, [4 x i8], double, %struct.vpx_rational, { i64, i32, [4 x i8] }, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [12 x i32], [5 x i32], [5 x i32], [5 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [4 x i8], %struct.vpx_fixed_buf, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [4 x i8] }* @__const.vp9_get_encoder_config.oxcf to i8*), i64 440, i1 false)
  %11 = bitcast %struct.vp9_extracfg* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %11) #9
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %11, i8* align 4 bitcast (%struct.vp9_extracfg* @default_extra_cfg to i8*), i64 128, i1 false) #9
  %12 = bitcast %struct.vpx_codec_enc_cfg* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 384, i8* nonnull %12) #9
  %13 = trunc i64 %3 to i32
  %14 = lshr i64 %3, 32
  %15 = trunc i64 %14 to i32
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %12, i8* align 8 bitcast (%struct.vpx_codec_enc_cfg* getelementptr inbounds ([1 x %struct.vpx_codec_enc_cfg_map], [1 x %struct.vpx_codec_enc_cfg_map]* @encoder_usage_cfg_map, i64 0, i64 0, i32 1) to i8*), i64 384, i1 false) #9
  %16 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %9, i64 0, i32 3
  store i32 %1, i32* %16, align 4, !alias.scope !5
  %17 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %9, i64 0, i32 4
  store i32 %2, i32* %17, align 8, !alias.scope !5
  %18 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %9, i64 0, i32 20
  store i32 %4, i32* %18, align 8, !alias.scope !5
  %19 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %9, i64 0, i32 9
  store i32 %6, i32* %19, align 8, !alias.scope !5
  %20 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %9, i64 0, i32 7, i32 0
  store i32 %15, i32* %20, align 4, !alias.scope !5
  %21 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %9, i64 0, i32 7, i32 1
  store i32 %13, i32* %21, align 4, !alias.scope !5
  call fastcc void @set_encoder_config(%struct.VP9EncoderConfig* %0, %struct.vpx_codec_enc_cfg* nonnull %9, %struct.vp9_extracfg* nonnull %8)
  %22 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 18
  store i32 150, i32* %22, align 4
  %23 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 21
  store i32 100, i32* %23, align 8
  %24 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 22
  store i32 100, i32* %24, align 4
  %25 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 58
  store i32 0, i32* %25, align 4
  %26 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 55
  store i32 0, i32* %26, align 8
  %27 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 50
  store i32 0, i32* %27, align 4
  %28 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 39
  store i32 150, i32* %28, align 4
  %29 = icmp slt i32 %5, 0
  %30 = sub nsw i32 0, %5
  %31 = select i1 %29, i32 %30, i32 %5
  %32 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 11
  store i32 %31, i32* %32, align 8
  call void @llvm.lifetime.end.p0i8(i64 384, i8* nonnull %12) #9
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %11) #9
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @set_encoder_config(%struct.VP9EncoderConfig*, %struct.vpx_codec_enc_cfg*, %struct.vp9_extracfg* readonly) unnamed_addr #1 {
  %4 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 17
  %5 = load i32, i32* %4, align 8
  %6 = icmp eq i32 %5, 0
  %7 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 2
  %8 = load i32, i32* %7, align 8
  %9 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 0
  store i32 %8, i32* %9, align 8
  %10 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 1
  %11 = load i32, i32* %10, align 4
  %12 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 58
  store i32 %11, i32* %12, align 4
  %13 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 3
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 2
  store i32 %14, i32* %15, align 8
  %16 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 4
  %17 = load i32, i32* %16, align 8
  %18 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 3
  store i32 %17, i32* %18, align 4
  %19 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 5
  %20 = load i32, i32* %19, align 4
  %21 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 1
  store i32 %20, i32* %21, align 4
  %22 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 6
  %23 = load i32, i32* %22, align 8
  %24 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 4
  store i32 %23, i32* %24, align 8
  %25 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 7
  %26 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 7, i32 1
  %27 = load i32, i32* %26, align 4
  %28 = sitofp i32 %27 to double
  %29 = getelementptr inbounds %struct.vpx_rational, %struct.vpx_rational* %25, i64 0, i32 0
  %30 = load i32, i32* %29, align 4
  %31 = sitofp i32 %30 to double
  %32 = fdiv double %28, %31
  %33 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 5
  %34 = fcmp ogt double %32, 1.800000e+02
  %35 = select i1 %34, double 3.000000e+01, double %32
  store double %35, double* %33, align 8
  %36 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 6
  %37 = bitcast %struct.vpx_rational* %25 to i64*
  %38 = bitcast %struct.vpx_rational* %36 to i64*
  %39 = load i64, i64* %37, align 4
  store i64 %39, i64* %38, align 8
  %40 = lshr i64 %39, 32
  %41 = trunc i64 %40 to i32
  %42 = shl i64 %39, 32
  %43 = ashr exact i64 %42, 32
  %44 = mul nsw i64 %43, 10000000
  %45 = icmp eq i32 %41, 0
  br i1 %45, label %54, label %46

46:                                               ; preds = %3, %46
  %47 = phi i64 [ %51, %46 ], [ %40, %3 ]
  %48 = phi i64 [ %50, %46 ], [ %44, %3 ]
  %49 = shl i64 %47, 32
  %50 = ashr exact i64 %49, 32
  %51 = srem i64 %48, %50
  %52 = trunc i64 %51 to i32
  %53 = icmp eq i32 %52, 0
  br i1 %53, label %54, label %46

54:                                               ; preds = %46, %3
  %55 = phi i64 [ %44, %3 ], [ %50, %46 ]
  %56 = trunc i64 %55 to i32
  %57 = shl i64 %55, 32
  %58 = ashr exact i64 %57, 32
  %59 = sdiv i64 %44, %58
  %60 = sdiv i32 %41, %56
  %61 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 7, i32 0
  store i64 %59, i64* %61, align 8
  %62 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 7, i32 1
  store i32 %60, i32* %62, align 8
  %63 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 15
  store i32 0, i32* %63, align 8
  %64 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 9
  %65 = load i32, i32* %64, align 8
  %66 = icmp ult i32 %65, 3
  br i1 %66, label %67, label %71

67:                                               ; preds = %54
  %68 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 16
  store i32 %65, i32* %68, align 4
  %69 = load i32, i32* %64, align 8
  %70 = icmp eq i32 %69, 1
  br i1 %70, label %74, label %71

71:                                               ; preds = %54, %67
  %72 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 10
  %73 = load i32, i32* %72, align 4
  br label %74

74:                                               ; preds = %67, %71
  %75 = phi i32 [ %73, %71 ], [ 0, %67 ]
  %76 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 19
  store i32 %75, i32* %76, align 8
  %77 = load i32, i32* %4, align 8
  %78 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 20
  store i32 %77, i32* %78, align 4
  %79 = sext i32 %14 to i64
  %80 = sext i32 %17 to i64
  %81 = zext i32 %20 to i64
  %82 = mul nsw i64 %79, 3
  %83 = mul i64 %82, %80
  %84 = mul i64 %83, %81
  %85 = sitofp i64 %84 to double
  %86 = fmul double %35, %85
  %87 = fdiv double %86, 1.000000e+03
  %88 = fptoui double %87 to i32
  %89 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 20
  %90 = load i32, i32* %89, align 8
  %91 = icmp ugt i32 %90, %88
  %92 = select i1 %91, i32 %88, i32 %90
  store i32 %92, i32* %89, align 8
  %93 = zext i32 %92 to i64
  %94 = mul nuw nsw i64 %93, 1000
  %95 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 8
  store i64 %94, i64* %95, align 8
  %96 = getelementptr inbounds %struct.vp9_extracfg, %struct.vp9_extracfg* %2, i64 0, i32 14
  %97 = load i32, i32* %96, align 4
  %98 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 12
  store i32 %97, i32* %98, align 4
  %99 = getelementptr inbounds %struct.vp9_extracfg, %struct.vp9_extracfg* %2, i64 0, i32 15
  %100 = load i32, i32* %99, align 4
  %101 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 13
  store i32 %100, i32* %101, align 8
  %102 = getelementptr inbounds %struct.vp9_extracfg, %struct.vp9_extracfg* %2, i64 0, i32 16
  %103 = load i32, i32* %102, align 4
  %104 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 14
  store i32 %103, i32* %104, align 4
  %105 = getelementptr inbounds %struct.vp9_extracfg, %struct.vp9_extracfg* %2, i64 0, i32 17
  %106 = load i32, i32* %105, align 4
  %107 = icmp eq i32 %106, 0
  br i1 %107, label %108, label %112

108:                                              ; preds = %74
  %109 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 21
  %110 = load i32, i32* %109, align 4
  %111 = tail call i32 @vp9_quantizer_to_qindex(i32 %110) #9
  br label %112

112:                                              ; preds = %74, %108
  %113 = phi i32 [ %111, %108 ], [ 0, %74 ]
  %114 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 29
  store i32 %113, i32* %114, align 4
  %115 = load i32, i32* %105, align 4
  %116 = icmp eq i32 %115, 0
  br i1 %116, label %117, label %121

117:                                              ; preds = %112
  %118 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 22
  %119 = load i32, i32* %118, align 8
  %120 = tail call i32 @vp9_quantizer_to_qindex(i32 %119) #9
  br label %121

121:                                              ; preds = %112, %117
  %122 = phi i32 [ %120, %117 ], [ 0, %112 ]
  %123 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 28
  store i32 %122, i32* %123, align 8
  %124 = getelementptr inbounds %struct.vp9_extracfg, %struct.vp9_extracfg* %2, i64 0, i32 13
  %125 = load i32, i32* %124, align 4
  %126 = tail call i32 @vp9_quantizer_to_qindex(i32 %125) #9
  %127 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 30
  store i32 %126, i32* %127, align 8
  %128 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 27
  store i32 -1, i32* %128, align 4
  %129 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 23
  %130 = load i32, i32* %129, align 4
  %131 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 21
  store i32 %130, i32* %131, align 8
  %132 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 24
  %133 = load i32, i32* %132, align 8
  %134 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 22
  store i32 %133, i32* %134, align 4
  %135 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 13
  %136 = load i32, i32* %135, align 8
  %137 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 34
  store i32 %136, i32* %137, align 8
  %138 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 14
  %139 = load i32, i32* %138, align 4
  %140 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 35
  store i32 %139, i32* %140, align 4
  %141 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 12
  %142 = load i32, i32* %141, align 4
  %143 = icmp eq i32 %142, 1
  br i1 %143, label %144, label %149

144:                                              ; preds = %121
  %145 = icmp eq i32 %136, 0
  %146 = icmp eq i32 %139, 0
  %147 = or i1 %145, %146
  %148 = select i1 %147, i32 2, i32 1
  br label %149

149:                                              ; preds = %121, %144
  %150 = phi i32 [ %148, %144 ], [ 0, %121 ]
  %151 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 33
  store i32 %150, i32* %151, align 4
  br i1 %6, label %152, label %155

152:                                              ; preds = %149
  %153 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 25
  store i64 240000, i64* %153, align 8
  %154 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 23
  store i64 60000, i64* %154, align 8
  br label %167

155:                                              ; preds = %149
  %156 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 25
  %157 = load i32, i32* %156, align 4
  %158 = zext i32 %157 to i64
  %159 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 25
  store i64 %158, i64* %159, align 8
  %160 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 26
  %161 = load i32, i32* %160, align 8
  %162 = zext i32 %161 to i64
  %163 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 23
  store i64 %162, i64* %163, align 8
  %164 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 27
  %165 = load i32, i32* %164, align 4
  %166 = zext i32 %165 to i64
  br label %167

167:                                              ; preds = %152, %155
  %168 = phi i64 [ %166, %155 ], [ 60000, %152 ]
  %169 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 24
  store i64 %168, i64* %169, align 8
  %170 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 11
  %171 = load i32, i32* %170, align 8
  %172 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 26
  store i32 %171, i32* %172, align 8
  %173 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 28
  %174 = load i32, i32* %173, align 8
  %175 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 37
  store i32 %174, i32* %175, align 4
  %176 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 29
  %177 = load i32, i32* %176, align 4
  %178 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 38
  store i32 %177, i32* %178, align 8
  %179 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 30
  %180 = load i32, i32* %179, align 8
  %181 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 39
  store i32 %180, i32* %181, align 4
  %182 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 31
  %183 = load i32, i32* %182, align 4
  %184 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 40
  store i32 %183, i32* %184, align 8
  %185 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 32
  %186 = load i32, i32* %185, align 8
  %187 = icmp eq i32 %186, 1
  br i1 %187, label %188, label %195

188:                                              ; preds = %167
  %189 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 33
  %190 = load i32, i32* %189, align 4
  %191 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 34
  %192 = load i32, i32* %191, align 8
  %193 = icmp ne i32 %190, %192
  %194 = zext i1 %193 to i32
  br label %195

195:                                              ; preds = %188, %167
  %196 = phi i32 [ 0, %167 ], [ %194, %188 ]
  %197 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 17
  store i32 %196, i32* %197, align 8
  %198 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 34
  %199 = load i32, i32* %198, align 8
  %200 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 18
  store i32 %199, i32* %200, align 4
  %201 = getelementptr inbounds %struct.vp9_extracfg, %struct.vp9_extracfg* %2, i64 0, i32 0
  %202 = load i32, i32* %201, align 4
  %203 = icmp slt i32 %202, 0
  %204 = sub nsw i32 0, %202
  %205 = select i1 %203, i32 %204, i32 %202
  %206 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 11
  store i32 %205, i32* %206, align 8
  %207 = getelementptr inbounds %struct.vp9_extracfg, %struct.vp9_extracfg* %2, i64 0, i32 4
  %208 = load i32, i32* %207, align 4
  %209 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 48
  store i32 %208, i32* %209, align 4
  %210 = getelementptr inbounds %struct.vp9_extracfg, %struct.vp9_extracfg* %2, i64 0, i32 1
  %211 = load i32, i32* %210, align 4
  %212 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 47
  store i32 %211, i32* %212, align 8
  %213 = load i32, i32* %21, align 4
  %214 = icmp eq i32 %213, 8
  br i1 %214, label %215, label %218

215:                                              ; preds = %195
  %216 = getelementptr inbounds %struct.vp9_extracfg, %struct.vp9_extracfg* %2, i64 0, i32 2
  %217 = load i32, i32* %216, align 4
  br label %218

218:                                              ; preds = %195, %215
  %219 = phi i32 [ %217, %215 ], [ 0, %195 ]
  %220 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 9
  store i32 %219, i32* %220, align 8
  %221 = getelementptr inbounds %struct.vp9_extracfg, %struct.vp9_extracfg* %2, i64 0, i32 3
  %222 = load i32, i32* %221, align 4
  %223 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 10
  store i32 %222, i32* %223, align 4
  %224 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 18
  %225 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 60
  %226 = bitcast %struct.vpx_fixed_buf* %225 to i8*
  %227 = bitcast %struct.vpx_fixed_buf* %224 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %226, i8* align 8 %227, i64 16, i1 false) #9
  %228 = getelementptr inbounds %struct.vp9_extracfg, %struct.vp9_extracfg* %2, i64 0, i32 25
  %229 = load i32, i32* %228, align 4
  %230 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 64
  store i32 %229, i32* %230, align 4
  %231 = getelementptr inbounds %struct.vp9_extracfg, %struct.vp9_extracfg* %2, i64 0, i32 26
  %232 = load i32, i32* %231, align 4
  %233 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 65
  store i32 %232, i32* %233, align 8
  %234 = getelementptr inbounds %struct.vp9_extracfg, %struct.vp9_extracfg* %2, i64 0, i32 27
  %235 = load i32, i32* %234, align 4
  %236 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 66
  store i32 %235, i32* %236, align 4
  %237 = getelementptr inbounds %struct.vp9_extracfg, %struct.vp9_extracfg* %2, i64 0, i32 28
  %238 = load i32, i32* %237, align 4
  %239 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 67
  store i32 %238, i32* %239, align 8
  %240 = getelementptr inbounds %struct.vp9_extracfg, %struct.vp9_extracfg* %2, i64 0, i32 8
  %241 = load i32, i32* %240, align 4
  %242 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 51
  store i32 %241, i32* %242, align 8
  %243 = getelementptr inbounds %struct.vp9_extracfg, %struct.vp9_extracfg* %2, i64 0, i32 9
  %244 = load i32, i32* %243, align 4
  %245 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 52
  store i32 %244, i32* %245, align 4
  %246 = getelementptr inbounds %struct.vp9_extracfg, %struct.vp9_extracfg* %2, i64 0, i32 10
  %247 = load i32, i32* %246, align 4
  %248 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 53
  store i32 %247, i32* %248, align 8
  %249 = getelementptr inbounds %struct.vp9_extracfg, %struct.vp9_extracfg* %2, i64 0, i32 11
  %250 = load i32, i32* %249, align 4
  %251 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 54
  store i32 %250, i32* %251, align 4
  %252 = getelementptr inbounds %struct.vp9_extracfg, %struct.vp9_extracfg* %2, i64 0, i32 12
  %253 = load i32, i32* %252, align 4
  %254 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 61
  store i32 %253, i32* %254, align 8
  %255 = getelementptr inbounds %struct.vp9_extracfg, %struct.vp9_extracfg* %2, i64 0, i32 24
  %256 = load i32, i32* %255, align 4
  %257 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 62
  store i32 %256, i32* %257, align 4
  %258 = getelementptr inbounds %struct.vp9_extracfg, %struct.vp9_extracfg* %2, i64 0, i32 5
  %259 = load i32, i32* %258, align 4
  %260 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 55
  store i32 %259, i32* %260, align 8
  %261 = getelementptr inbounds %struct.vp9_extracfg, %struct.vp9_extracfg* %2, i64 0, i32 7
  %262 = load i32, i32* %261, align 4
  %263 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 57
  store i32 %262, i32* %263, align 8
  %264 = load i32, i32* %12, align 4
  %265 = icmp sgt i32 %264, 1
  %266 = icmp sgt i32 %259, 0
  %267 = and i1 %266, %265
  br i1 %267, label %271, label %268

268:                                              ; preds = %218
  %269 = getelementptr inbounds %struct.vp9_extracfg, %struct.vp9_extracfg* %2, i64 0, i32 6
  %270 = load i32, i32* %269, align 4
  br label %271

271:                                              ; preds = %218, %268
  %272 = phi i32 [ %270, %268 ], [ 0, %218 ]
  %273 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 56
  store i32 %272, i32* %273, align 4
  %274 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 8
  %275 = load i32, i32* %274, align 4
  %276 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 49
  store i32 %275, i32* %276, align 8
  %277 = getelementptr inbounds %struct.vp9_extracfg, %struct.vp9_extracfg* %2, i64 0, i32 19
  %278 = load i32, i32* %277, align 4
  %279 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 50
  store i32 %278, i32* %279, align 4
  %280 = getelementptr inbounds %struct.vp9_extracfg, %struct.vp9_extracfg* %2, i64 0, i32 20
  %281 = load i32, i32* %280, align 4
  %282 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 31
  store i32 %281, i32* %282, align 4
  %283 = getelementptr inbounds %struct.vp9_extracfg, %struct.vp9_extracfg* %2, i64 0, i32 21
  %284 = load i32, i32* %283, align 4
  %285 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 32
  store i32 %284, i32* %285, align 8
  %286 = getelementptr inbounds %struct.vp9_extracfg, %struct.vp9_extracfg* %2, i64 0, i32 22
  %287 = load i32, i32* %286, align 4
  %288 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 36
  store i32 %287, i32* %288, align 8
  %289 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 35
  %290 = load i32, i32* %289, align 4
  %291 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 41
  store i32 %290, i32* %291, align 4
  %292 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 38
  %293 = load i32, i32* %292, align 8
  %294 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 42
  store i32 %293, i32* %294, align 8
  %295 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 44
  %296 = load i32, i32* %295, align 8
  %297 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 68
  store i32 %296, i32* %297, align 4
  %298 = getelementptr inbounds %struct.vp9_extracfg, %struct.vp9_extracfg* %2, i64 0, i32 18
  %299 = load i32, i32* %298, align 4
  %300 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 59
  store i32 %299, i32* %300, align 8
  %301 = getelementptr inbounds %struct.vp9_extracfg, %struct.vp9_extracfg* %2, i64 0, i32 29
  %302 = load i32, i32* %301, align 4
  %303 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 69
  store i32 %302, i32* %303, align 8
  %304 = getelementptr inbounds %struct.vp9_extracfg, %struct.vp9_extracfg* %2, i64 0, i32 30
  %305 = load i32, i32* %304, align 4
  %306 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 70
  store i32 %305, i32* %306, align 4
  %307 = getelementptr inbounds %struct.vp9_extracfg, %struct.vp9_extracfg* %2, i64 0, i32 31
  %308 = load i32, i32* %307, align 4
  %309 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 71
  store i32 %308, i32* %309, align 8
  %310 = icmp sgt i32 %290, 0
  br i1 %310, label %311, label %346

311:                                              ; preds = %271, %331
  %312 = phi i32 [ %332, %331 ], [ %290, %271 ]
  %313 = phi i32 [ %333, %331 ], [ %293, %271 ]
  %314 = phi i32 [ %334, %331 ], [ 0, %271 ]
  %315 = icmp sgt i32 %313, 0
  br i1 %315, label %316, label %331

316:                                              ; preds = %311, %316
  %317 = phi i32 [ %327, %316 ], [ %313, %311 ]
  %318 = phi i32 [ %326, %316 ], [ 0, %311 ]
  %319 = mul nsw i32 %317, %314
  %320 = add nsw i32 %319, %318
  %321 = sext i32 %320 to i64
  %322 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 43, i64 %321
  %323 = load i32, i32* %322, align 4
  %324 = mul i32 %323, 1000
  %325 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 43, i64 %321
  store i32 %324, i32* %325, align 4
  %326 = add nuw nsw i32 %318, 1
  %327 = load i32, i32* %294, align 8
  %328 = icmp slt i32 %326, %327
  br i1 %328, label %316, label %329

329:                                              ; preds = %316
  %330 = load i32, i32* %291, align 4
  br label %331

331:                                              ; preds = %329, %311
  %332 = phi i32 [ %330, %329 ], [ %312, %311 ]
  %333 = phi i32 [ %327, %329 ], [ %313, %311 ]
  %334 = add nuw nsw i32 %314, 1
  %335 = icmp slt i32 %334, %332
  br i1 %335, label %311, label %336

336:                                              ; preds = %331
  %337 = icmp eq i32 %332, 1
  br i1 %337, label %338, label %346

338:                                              ; preds = %336
  %339 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 16
  %340 = load i32, i32* %339, align 4
  %341 = icmp eq i32 %340, 0
  br i1 %341, label %346, label %342

342:                                              ; preds = %338
  %343 = load i64, i64* %95, align 8
  %344 = trunc i64 %343 to i32
  %345 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 44, i64 0
  store i32 %344, i32* %345, align 4
  br label %346

346:                                              ; preds = %271, %338, %342, %336
  %347 = phi i32 [ %333, %338 ], [ %333, %342 ], [ %333, %336 ], [ %293, %271 ]
  %348 = icmp sgt i32 %347, 1
  br i1 %348, label %349, label %375

349:                                              ; preds = %346
  %350 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 40, i64 0
  %351 = load i32, i32* %350, align 4
  %352 = icmp eq i32 %351, 0
  %353 = select i1 %352, i32 1, i32 %351
  %354 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 46, i64 0
  store i32 %353, i32* %354, align 4
  %355 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 40, i64 1
  %356 = load i32, i32* %355, align 4
  %357 = icmp eq i32 %356, 0
  %358 = select i1 %357, i32 1, i32 %356
  %359 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 46, i64 1
  store i32 %358, i32* %359, align 4
  %360 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 40, i64 2
  %361 = load i32, i32* %360, align 4
  %362 = icmp eq i32 %361, 0
  %363 = select i1 %362, i32 1, i32 %361
  %364 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 46, i64 2
  store i32 %363, i32* %364, align 4
  %365 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 40, i64 3
  %366 = load i32, i32* %365, align 4
  %367 = icmp eq i32 %366, 0
  %368 = select i1 %367, i32 1, i32 %366
  %369 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 46, i64 3
  store i32 %368, i32* %369, align 4
  %370 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 40, i64 4
  %371 = load i32, i32* %370, align 4
  %372 = icmp eq i32 %371, 0
  %373 = select i1 %372, i32 1, i32 %371
  %374 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 46, i64 4
  store i32 %373, i32* %374, align 4
  br label %379

375:                                              ; preds = %346
  %376 = icmp eq i32 %347, 1
  br i1 %376, label %377, label %379

377:                                              ; preds = %375
  %378 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 46, i64 0
  store i32 1, i32* %378, align 4
  br label %379

379:                                              ; preds = %349, %375, %377
  %380 = load i32, i32* %300, align 8
  %381 = load i32, i32* getelementptr inbounds ([14 x %struct.Vp9LevelSpec], [14 x %struct.Vp9LevelSpec]* @vp9_level_defs, i64 0, i64 0, i32 0), align 16
  %382 = icmp eq i32 %381, %380
  br i1 %382, label %446, label %383

383:                                              ; preds = %379
  %384 = load i32, i32* getelementptr inbounds ([14 x %struct.Vp9LevelSpec], [14 x %struct.Vp9LevelSpec]* @vp9_level_defs, i64 0, i64 1, i32 0), align 16
  %385 = icmp eq i32 %384, %380
  %386 = load i32, i32* getelementptr inbounds ([14 x %struct.Vp9LevelSpec], [14 x %struct.Vp9LevelSpec]* @vp9_level_defs, i64 0, i64 2, i32 0), align 16
  %387 = icmp eq i32 %386, %380
  %388 = or i1 %385, %387
  %389 = load i32, i32* getelementptr inbounds ([14 x %struct.Vp9LevelSpec], [14 x %struct.Vp9LevelSpec]* @vp9_level_defs, i64 0, i64 3, i32 0), align 16
  %390 = icmp eq i32 %389, %380
  %391 = or i1 %388, %390
  %392 = load i32, i32* getelementptr inbounds ([14 x %struct.Vp9LevelSpec], [14 x %struct.Vp9LevelSpec]* @vp9_level_defs, i64 0, i64 4, i32 0), align 16
  %393 = icmp eq i32 %392, %380
  %394 = or i1 %391, %393
  %395 = load i32, i32* getelementptr inbounds ([14 x %struct.Vp9LevelSpec], [14 x %struct.Vp9LevelSpec]* @vp9_level_defs, i64 0, i64 5, i32 0), align 16
  %396 = icmp eq i32 %395, %380
  %397 = or i1 %394, %396
  %398 = load i32, i32* getelementptr inbounds ([14 x %struct.Vp9LevelSpec], [14 x %struct.Vp9LevelSpec]* @vp9_level_defs, i64 0, i64 6, i32 0), align 16
  %399 = icmp eq i32 %398, %380
  %400 = or i1 %397, %399
  %401 = load i32, i32* getelementptr inbounds ([14 x %struct.Vp9LevelSpec], [14 x %struct.Vp9LevelSpec]* @vp9_level_defs, i64 0, i64 7, i32 0), align 16
  %402 = icmp eq i32 %401, %380
  %403 = or i1 %400, %402
  %404 = load i32, i32* getelementptr inbounds ([14 x %struct.Vp9LevelSpec], [14 x %struct.Vp9LevelSpec]* @vp9_level_defs, i64 0, i64 8, i32 0), align 16
  %405 = icmp eq i32 %404, %380
  %406 = or i1 %403, %405
  %407 = load i32, i32* getelementptr inbounds ([14 x %struct.Vp9LevelSpec], [14 x %struct.Vp9LevelSpec]* @vp9_level_defs, i64 0, i64 9, i32 0), align 16
  %408 = icmp eq i32 %407, %380
  %409 = or i1 %406, %408
  %410 = load i32, i32* getelementptr inbounds ([14 x %struct.Vp9LevelSpec], [14 x %struct.Vp9LevelSpec]* @vp9_level_defs, i64 0, i64 10, i32 0), align 16
  %411 = icmp eq i32 %410, %380
  %412 = or i1 %409, %411
  %413 = load i32, i32* getelementptr inbounds ([14 x %struct.Vp9LevelSpec], [14 x %struct.Vp9LevelSpec]* @vp9_level_defs, i64 0, i64 11, i32 0), align 16
  %414 = icmp eq i32 %413, %380
  %415 = or i1 %412, %414
  %416 = load i32, i32* getelementptr inbounds ([14 x %struct.Vp9LevelSpec], [14 x %struct.Vp9LevelSpec]* @vp9_level_defs, i64 0, i64 12, i32 0), align 16
  %417 = icmp eq i32 %416, %380
  %418 = or i1 %415, %417
  %419 = load i32, i32* getelementptr inbounds ([14 x %struct.Vp9LevelSpec], [14 x %struct.Vp9LevelSpec]* @vp9_level_defs, i64 0, i64 13, i32 0), align 16
  %420 = icmp eq i32 %419, %380
  %421 = or i1 %418, %420
  br i1 %421, label %422, label %507

422:                                              ; preds = %383
  %423 = or i1 %385, %387
  %424 = select i1 %385, i64 1, i64 2
  %425 = or i1 %423, %390
  %426 = select i1 %423, i64 %424, i64 3
  %427 = or i1 %425, %393
  %428 = select i1 %425, i64 %426, i64 4
  %429 = or i1 %427, %396
  %430 = select i1 %427, i64 %428, i64 5
  %431 = or i1 %429, %399
  %432 = select i1 %429, i64 %430, i64 6
  %433 = or i1 %431, %402
  %434 = select i1 %431, i64 %432, i64 7
  %435 = or i1 %433, %405
  %436 = select i1 %433, i64 %434, i64 8
  %437 = or i1 %435, %408
  %438 = select i1 %435, i64 %436, i64 9
  %439 = or i1 %437, %411
  %440 = select i1 %437, i64 %438, i64 10
  %441 = or i1 %439, %414
  %442 = select i1 %439, i64 %440, i64 11
  br i1 %441, label %446, label %443

443:                                              ; preds = %422
  %444 = select i1 %420, i64 13, i64 -1
  %445 = select i1 %417, i64 12, i64 %444
  br label %446

446:                                              ; preds = %443, %422, %379
  %447 = phi i64 [ %442, %422 ], [ 0, %379 ], [ %445, %443 ]
  tail call void @vpx_clear_system_state() #9
  %448 = getelementptr inbounds [14 x %struct.Vp9LevelSpec], [14 x %struct.Vp9LevelSpec]* @vp9_level_defs, i64 0, i64 %447, i32 4
  %449 = load double, double* %448, align 8
  %450 = fmul double %449, 8.000000e+02
  %451 = load i64, i64* %95, align 8
  %452 = sitofp i64 %451 to double
  %453 = fcmp olt double %450, %452
  br i1 %453, label %454, label %456

454:                                              ; preds = %446
  %455 = fptosi double %450 to i64
  store i64 %455, i64* %95, align 8
  br label %456

456:                                              ; preds = %454, %446
  %457 = phi i64 [ %455, %454 ], [ %451, %446 ]
  %458 = load i32, i32* %291, align 4
  %459 = icmp eq i32 %458, 1
  br i1 %459, label %460, label %467

460:                                              ; preds = %456
  %461 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 16
  %462 = load i32, i32* %461, align 4
  %463 = icmp eq i32 %462, 0
  br i1 %463, label %467, label %464

464:                                              ; preds = %460
  %465 = trunc i64 %457 to i32
  %466 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 44, i64 0
  store i32 %465, i32* %466, align 4
  br label %467

467:                                              ; preds = %464, %460, %456
  %468 = fmul double %450, 1.100000e+00
  %469 = sitofp i64 %457 to double
  %470 = fsub double %468, %469
  %471 = fmul double %470, 1.000000e+02
  %472 = fdiv double %471, %469
  %473 = fptosi double %472 to i32
  %474 = load i32, i32* %134, align 4
  %475 = icmp sgt i32 %474, %473
  br i1 %475, label %476, label %477

476:                                              ; preds = %467
  store i32 %473, i32* %134, align 4
  br label %477

477:                                              ; preds = %476, %467
  %478 = tail call i32 @vp9_quantizer_to_qindex(i32 63) #9
  store i32 %478, i32* %123, align 8
  %479 = load i32, i32* %248, align 8
  %480 = getelementptr inbounds [14 x %struct.Vp9LevelSpec], [14 x %struct.Vp9LevelSpec]* @vp9_level_defs, i64 0, i64 %447, i32 8
  %481 = load i32, i32* %480, align 4
  %482 = icmp sgt i32 %479, %481
  br i1 %482, label %490, label %483

483:                                              ; preds = %477
  %484 = add nsw i32 %481, 1
  store i32 %484, i32* %248, align 8
  %485 = load i32, i32* %251, align 4
  %486 = icmp eq i32 %485, 0
  br i1 %486, label %490, label %487

487:                                              ; preds = %483
  %488 = icmp sgt i32 %485, %484
  %489 = select i1 %488, i32 %485, i32 %484
  store i32 %489, i32* %251, align 4
  br label %490

490:                                              ; preds = %487, %483, %477
  %491 = getelementptr inbounds [14 x %struct.Vp9LevelSpec], [14 x %struct.Vp9LevelSpec]* @vp9_level_defs, i64 0, i64 %447, i32 7
  %492 = load i8, i8* %491, align 16
  %493 = zext i8 %492 to i32
  %494 = load i32, i32* %260, align 8
  %495 = shl i32 1, %494
  %496 = icmp sgt i32 %495, %493
  %497 = icmp sgt i32 %494, 0
  %498 = and i1 %497, %496
  br i1 %498, label %499, label %507

499:                                              ; preds = %490, %499
  %500 = phi i32 [ %501, %499 ], [ %494, %490 ]
  %501 = add nsw i32 %500, -1
  %502 = icmp sgt i32 %501, 0
  %503 = shl i32 1, %501
  %504 = icmp sgt i32 %503, %493
  %505 = and i1 %502, %504
  br i1 %505, label %499, label %506

506:                                              ; preds = %499
  store i32 %501, i32* %260, align 8
  br label %507

507:                                              ; preds = %383, %506, %490
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @vp9_dump_encoder_config(%struct.VP9EncoderConfig* readonly, %struct._IO_FILE*) local_unnamed_addr #3 {
  %3 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = zext i32 %4 to i64
  %6 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.1, i64 0, i64 0), i64 %5)
  %7 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 1
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  %10 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i64 %9)
  %11 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 2
  %12 = load i32, i32* %11, align 8
  %13 = sext i32 %12 to i64
  %14 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.3, i64 0, i64 0), i64 %13)
  %15 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 3
  %16 = load i32, i32* %15, align 4
  %17 = sext i32 %16 to i64
  %18 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i64 0, i64 0), i64 %17)
  %19 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 4
  %20 = load i32, i32* %19, align 8
  %21 = zext i32 %20 to i64
  %22 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.5, i64 0, i64 0), i64 %21)
  %23 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 5
  %24 = load double, double* %23, align 8
  %25 = fptosi double %24 to i64
  %26 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.6, i64 0, i64 0), i64 %25)
  %27 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 8
  %28 = load i64, i64* %27, align 8
  %29 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.7, i64 0, i64 0), i64 %28)
  %30 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 9
  %31 = load i32, i32* %30, align 8
  %32 = sext i32 %31 to i64
  %33 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.8, i64 0, i64 0), i64 %32)
  %34 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 10
  %35 = load i32, i32* %34, align 4
  %36 = sext i32 %35 to i64
  %37 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.9, i64 0, i64 0), i64 %36)
  %38 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 11
  %39 = load i32, i32* %38, align 8
  %40 = sext i32 %39 to i64
  %41 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.10, i64 0, i64 0), i64 %40)
  %42 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 12
  %43 = load i32, i32* %42, align 4
  %44 = zext i32 %43 to i64
  %45 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.11, i64 0, i64 0), i64 %44)
  %46 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 13
  %47 = load i32, i32* %46, align 8
  %48 = zext i32 %47 to i64
  %49 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.12, i64 0, i64 0), i64 %48)
  %50 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 14
  %51 = load i32, i32* %50, align 4
  %52 = zext i32 %51 to i64
  %53 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.13, i64 0, i64 0), i64 %52)
  %54 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 15
  %55 = load i32, i32* %54, align 8
  %56 = zext i32 %55 to i64
  %57 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.14, i64 0, i64 0), i64 %56)
  %58 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 16
  %59 = load i32, i32* %58, align 4
  %60 = sext i32 %59 to i64
  %61 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.15, i64 0, i64 0), i64 %60)
  %62 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 17
  %63 = load i32, i32* %62, align 8
  %64 = sext i32 %63 to i64
  %65 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.16, i64 0, i64 0), i64 %64)
  %66 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 18
  %67 = load i32, i32* %66, align 4
  %68 = sext i32 %67 to i64
  %69 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.17, i64 0, i64 0), i64 %68)
  %70 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 19
  %71 = load i32, i32* %70, align 8
  %72 = sext i32 %71 to i64
  %73 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.18, i64 0, i64 0), i64 %72)
  %74 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 20
  %75 = load i32, i32* %74, align 4
  %76 = zext i32 %75 to i64
  %77 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.19, i64 0, i64 0), i64 %76)
  %78 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 21
  %79 = load i32, i32* %78, align 8
  %80 = sext i32 %79 to i64
  %81 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.20, i64 0, i64 0), i64 %80)
  %82 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 22
  %83 = load i32, i32* %82, align 4
  %84 = sext i32 %83 to i64
  %85 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.21, i64 0, i64 0), i64 %84)
  %86 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 26
  %87 = load i32, i32* %86, align 8
  %88 = sext i32 %87 to i64
  %89 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.22, i64 0, i64 0), i64 %88)
  %90 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 27
  %91 = load i32, i32* %90, align 4
  %92 = sext i32 %91 to i64
  %93 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.23, i64 0, i64 0), i64 %92)
  %94 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 28
  %95 = load i32, i32* %94, align 8
  %96 = sext i32 %95 to i64
  %97 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.24, i64 0, i64 0), i64 %96)
  %98 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 29
  %99 = load i32, i32* %98, align 4
  %100 = sext i32 %99 to i64
  %101 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.25, i64 0, i64 0), i64 %100)
  %102 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 30
  %103 = load i32, i32* %102, align 8
  %104 = sext i32 %103 to i64
  %105 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.26, i64 0, i64 0), i64 %104)
  %106 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 31
  %107 = load i32, i32* %106, align 4
  %108 = zext i32 %107 to i64
  %109 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.27, i64 0, i64 0), i64 %108)
  %110 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 32
  %111 = load i32, i32* %110, align 8
  %112 = sext i32 %111 to i64
  %113 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.28, i64 0, i64 0), i64 %112)
  %114 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 33
  %115 = load i32, i32* %114, align 4
  %116 = zext i32 %115 to i64
  %117 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.29, i64 0, i64 0), i64 %116)
  %118 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 34
  %119 = load i32, i32* %118, align 8
  %120 = sext i32 %119 to i64
  %121 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.30, i64 0, i64 0), i64 %120)
  %122 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 35
  %123 = load i32, i32* %122, align 4
  %124 = sext i32 %123 to i64
  %125 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.31, i64 0, i64 0), i64 %124)
  %126 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 36
  %127 = load i32, i32* %126, align 8
  %128 = sext i32 %127 to i64
  %129 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.32, i64 0, i64 0), i64 %128)
  %130 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 37
  %131 = load i32, i32* %130, align 4
  %132 = sext i32 %131 to i64
  %133 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.33, i64 0, i64 0), i64 %132)
  %134 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 38
  %135 = load i32, i32* %134, align 8
  %136 = sext i32 %135 to i64
  %137 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.34, i64 0, i64 0), i64 %136)
  %138 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 39
  %139 = load i32, i32* %138, align 4
  %140 = sext i32 %139 to i64
  %141 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.35, i64 0, i64 0), i64 %140)
  %142 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 40
  %143 = load i32, i32* %142, align 8
  %144 = sext i32 %143 to i64
  %145 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.36, i64 0, i64 0), i64 %144)
  %146 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 41
  %147 = load i32, i32* %146, align 4
  %148 = sext i32 %147 to i64
  %149 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.37, i64 0, i64 0), i64 %148)
  %150 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 42
  %151 = load i32, i32* %150, align 8
  %152 = sext i32 %151 to i64
  %153 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.38, i64 0, i64 0), i64 %152)
  %154 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 47
  %155 = load i32, i32* %154, align 8
  %156 = sext i32 %155 to i64
  %157 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.39, i64 0, i64 0), i64 %156)
  %158 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 48
  %159 = load i32, i32* %158, align 4
  %160 = sext i32 %159 to i64
  %161 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.40, i64 0, i64 0), i64 %160)
  %162 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 49
  %163 = load i32, i32* %162, align 8
  %164 = zext i32 %163 to i64
  %165 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.41, i64 0, i64 0), i64 %164)
  %166 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 50
  %167 = load i32, i32* %166, align 4
  %168 = zext i32 %167 to i64
  %169 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.42, i64 0, i64 0), i64 %168)
  %170 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 51
  %171 = load i32, i32* %170, align 8
  %172 = sext i32 %171 to i64
  %173 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.43, i64 0, i64 0), i64 %172)
  %174 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 52
  %175 = load i32, i32* %174, align 4
  %176 = sext i32 %175 to i64
  %177 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.44, i64 0, i64 0), i64 %176)
  %178 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 53
  %179 = load i32, i32* %178, align 8
  %180 = sext i32 %179 to i64
  %181 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.45, i64 0, i64 0), i64 %180)
  %182 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 54
  %183 = load i32, i32* %182, align 4
  %184 = sext i32 %183 to i64
  %185 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.46, i64 0, i64 0), i64 %184)
  %186 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 55
  %187 = load i32, i32* %186, align 8
  %188 = sext i32 %187 to i64
  %189 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.47, i64 0, i64 0), i64 %188)
  %190 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 56
  %191 = load i32, i32* %190, align 4
  %192 = sext i32 %191 to i64
  %193 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.48, i64 0, i64 0), i64 %192)
  %194 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 57
  %195 = load i32, i32* %194, align 8
  %196 = sext i32 %195 to i64
  %197 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.49, i64 0, i64 0), i64 %196)
  %198 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 58
  %199 = load i32, i32* %198, align 4
  %200 = sext i32 %199 to i64
  %201 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.50, i64 0, i64 0), i64 %200)
  %202 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 59
  %203 = load i32, i32* %202, align 8
  %204 = zext i32 %203 to i64
  %205 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.51, i64 0, i64 0), i64 %204)
  %206 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 61
  %207 = load i32, i32* %206, align 8
  %208 = zext i32 %207 to i64
  %209 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.52, i64 0, i64 0), i64 %208)
  %210 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 62
  %211 = load i32, i32* %210, align 4
  %212 = zext i32 %211 to i64
  %213 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.53, i64 0, i64 0), i64 %212)
  %214 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 63
  %215 = load i32, i32* %214, align 8
  %216 = sext i32 %215 to i64
  %217 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.54, i64 0, i64 0), i64 %216)
  %218 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 64
  %219 = load i32, i32* %218, align 4
  %220 = zext i32 %219 to i64
  %221 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.55, i64 0, i64 0), i64 %220)
  %222 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 65
  %223 = load i32, i32* %222, align 8
  %224 = zext i32 %223 to i64
  %225 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.56, i64 0, i64 0), i64 %224)
  %226 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 66
  %227 = load i32, i32* %226, align 4
  %228 = sext i32 %227 to i64
  %229 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.57, i64 0, i64 0), i64 %228)
  %230 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 67
  %231 = load i32, i32* %230, align 8
  %232 = sext i32 %231 to i64
  %233 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.58, i64 0, i64 0), i64 %232)
  %234 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 68
  %235 = load i32, i32* %234, align 4
  %236 = zext i32 %235 to i64
  %237 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.59, i64 0, i64 0), i64 %236)
  %238 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 69
  %239 = load i32, i32* %238, align 8
  %240 = sext i32 %239 to i64
  %241 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.60, i64 0, i64 0), i64 %240)
  %242 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 70
  %243 = load i32, i32* %242, align 4
  %244 = zext i32 %243 to i64
  %245 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.61, i64 0, i64 0), i64 %244)
  ret void
}

; Function Attrs: nofree nounwind
declare i32 @fprintf(%struct._IO_FILE* nocapture, i8* nocapture readonly, ...) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @vp9_get_frame_info(%struct.FRAME_INFO* noalias sret, %struct.VP9EncoderConfig* nocapture readonly) local_unnamed_addr #1 {
  %3 = alloca i32, align 4
  %4 = getelementptr inbounds %struct.FRAME_INFO, %struct.FRAME_INFO* %0, i64 0, i32 4
  %5 = bitcast i32* %4 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %5, i8 -86, i64 20, i1 false)
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #9
  store i32 -1431655766, i32* %3, align 4
  %7 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %1, i64 0, i32 2
  %8 = bitcast i32* %7 to <2 x i32>*
  %9 = load <2 x i32>, <2 x i32>* %8, align 8
  %10 = shufflevector <2 x i32> %9, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %11 = bitcast %struct.FRAME_INFO* %0 to <4 x i32>*
  store <4 x i32> %10, <4 x i32>* %11, align 4
  %12 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %1, i64 0, i32 1
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %struct.FRAME_INFO, %struct.FRAME_INFO* %0, i64 0, i32 9
  store i32 %13, i32* %14, align 4
  %15 = getelementptr inbounds %struct.FRAME_INFO, %struct.FRAME_INFO* %0, i64 0, i32 4
  %16 = getelementptr inbounds %struct.FRAME_INFO, %struct.FRAME_INFO* %0, i64 0, i32 5
  %17 = extractelement <2 x i32> %9, i32 0
  %18 = extractelement <2 x i32> %9, i32 1
  call void @vp9_set_mi_size(i32* %15, i32* %16, i32* nonnull %3, i32 %17, i32 %18) #9
  %19 = getelementptr inbounds %struct.FRAME_INFO, %struct.FRAME_INFO* %0, i64 0, i32 6
  %20 = getelementptr inbounds %struct.FRAME_INFO, %struct.FRAME_INFO* %0, i64 0, i32 7
  %21 = getelementptr inbounds %struct.FRAME_INFO, %struct.FRAME_INFO* %0, i64 0, i32 8
  %22 = load i32, i32* %15, align 4
  %23 = load i32, i32* %16, align 4
  call void @vp9_set_mb_size(i32* %19, i32* %20, i32* %21, i32 %22, i32 %23) #9
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #9
  ret void
}

declare void @vp9_set_mi_size(i32*, i32*, i32*, i32, i32) local_unnamed_addr #5

declare void @vp9_set_mb_size(i32*, i32*, i32*, i32, i32) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden void @vp9_set_first_pass_stats(%struct.VP9EncoderConfig* nocapture, %struct.vpx_fixed_buf* nocapture readonly) local_unnamed_addr #1 {
  %3 = getelementptr inbounds %struct.VP9EncoderConfig, %struct.VP9EncoderConfig* %0, i64 0, i32 60
  %4 = bitcast %struct.vpx_fixed_buf* %3 to i8*
  %5 = bitcast %struct.vpx_fixed_buf* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %4, i8* align 8 %5, i64 16, i1 false)
  ret void
}

declare i8* @vpx_calloc(i64, i64) local_unnamed_addr #5

declare void @vp9_initialize_enc() #5

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal fastcc i32 @validate_config(%struct.vpx_codec_alg_priv*, %struct.vpx_codec_enc_cfg* readonly, %struct.vp9_extracfg* readonly) unnamed_addr #6 {
  %4 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 3
  %5 = load i32, i32* %4, align 4
  %6 = add i32 %5, -1
  %7 = icmp ult i32 %6, 65535
  br i1 %7, label %8, label %290

8:                                                ; preds = %3
  %9 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 4
  %10 = load i32, i32* %9, align 8
  %11 = add i32 %10, -1
  %12 = icmp ult i32 %11, 65535
  br i1 %12, label %13, label %290

13:                                               ; preds = %8
  %14 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 7, i32 1
  %15 = load i32, i32* %14, align 4
  %16 = add i32 %15, -1
  %17 = icmp ult i32 %16, 1000000000
  br i1 %17, label %18, label %290

18:                                               ; preds = %13
  %19 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 7, i32 0
  %20 = load i32, i32* %19, align 4
  %21 = add i32 %20, -1
  %22 = icmp ult i32 %21, 1000000000
  br i1 %22, label %23, label %290

23:                                               ; preds = %18
  %24 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 2
  %25 = load i32, i32* %24, align 8
  %26 = icmp ult i32 %25, 4
  br i1 %26, label %27, label %290

27:                                               ; preds = %23
  %28 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 22
  %29 = load i32, i32* %28, align 8
  %30 = icmp ult i32 %29, 64
  br i1 %30, label %31, label %290

31:                                               ; preds = %27
  %32 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 21
  %33 = load i32, i32* %32, align 4
  %34 = icmp ugt i32 %33, %29
  br i1 %34, label %290, label %35

35:                                               ; preds = %31
  %36 = getelementptr inbounds %struct.vp9_extracfg, %struct.vp9_extracfg* %2, i64 0, i32 17
  %37 = load i32, i32* %36, align 4
  %38 = icmp ne i32 %37, 0
  %39 = zext i1 %38 to i32
  %40 = icmp eq i32 %37, %39
  br i1 %40, label %41, label %290

41:                                               ; preds = %35
  %42 = getelementptr inbounds %struct.vp9_extracfg, %struct.vp9_extracfg* %2, i64 0, i32 19
  %43 = load i32, i32* %42, align 4
  %44 = icmp ne i32 %43, 0
  %45 = zext i1 %44 to i32
  %46 = icmp eq i32 %43, %45
  br i1 %46, label %47, label %290

47:                                               ; preds = %41
  %48 = getelementptr inbounds %struct.vp9_extracfg, %struct.vp9_extracfg* %2, i64 0, i32 20
  %49 = load i32, i32* %48, align 4
  %50 = icmp ult i32 %49, 7
  br i1 %50, label %51, label %290

51:                                               ; preds = %47
  %52 = getelementptr inbounds %struct.vp9_extracfg, %struct.vp9_extracfg* %2, i64 0, i32 21
  %53 = load i32, i32* %52, align 4
  %54 = icmp ult i32 %53, 2
  br i1 %54, label %55, label %290

55:                                               ; preds = %51
  %56 = getelementptr inbounds %struct.vp9_extracfg, %struct.vp9_extracfg* %2, i64 0, i32 22
  %57 = load i32, i32* %56, align 4
  %58 = icmp ult i32 %57, 2
  br i1 %58, label %59, label %290

59:                                               ; preds = %55
  %60 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 1
  %61 = load i32, i32* %60, align 4
  %62 = icmp ult i32 %61, 65
  br i1 %62, label %63, label %290

63:                                               ; preds = %59
  %64 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 10
  %65 = load i32, i32* %64, align 4
  %66 = icmp ult i32 %65, 26
  br i1 %66, label %67, label %290

67:                                               ; preds = %63
  %68 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 17
  %69 = load i32, i32* %68, align 8
  %70 = icmp ult i32 %69, 4
  br i1 %70, label %71, label %290

71:                                               ; preds = %67
  %72 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 23
  %73 = load i32, i32* %72, align 4
  %74 = icmp ult i32 %73, 101
  br i1 %74, label %75, label %290

75:                                               ; preds = %71
  %76 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 24
  %77 = load i32, i32* %76, align 8
  %78 = icmp ult i32 %77, 101
  br i1 %78, label %79, label %290

79:                                               ; preds = %75
  %80 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 28
  %81 = load i32, i32* %80, align 8
  %82 = icmp ult i32 %81, 101
  br i1 %82, label %83, label %290

83:                                               ; preds = %79
  %84 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 31
  %85 = load i32, i32* %84, align 4
  %86 = icmp ult i32 %85, 10001
  br i1 %86, label %87, label %290

87:                                               ; preds = %83
  %88 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 32
  %89 = load i32, i32* %88, align 8
  %90 = icmp ult i32 %89, 2
  br i1 %90, label %91, label %290

91:                                               ; preds = %87
  %92 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 12
  %93 = load i32, i32* %92, align 4
  %94 = icmp ne i32 %93, 0
  %95 = zext i1 %94 to i32
  %96 = icmp eq i32 %93, %95
  br i1 %96, label %97, label %290

97:                                               ; preds = %91
  %98 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 11
  %99 = load i32, i32* %98, align 8
  %100 = icmp ult i32 %99, 101
  br i1 %100, label %101, label %290

101:                                              ; preds = %97
  %102 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 15
  %103 = load i32, i32* %102, align 8
  %104 = icmp ult i32 %103, 101
  br i1 %104, label %105, label %290

105:                                              ; preds = %101
  %106 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 16
  %107 = load i32, i32* %106, align 4
  %108 = icmp ult i32 %107, 101
  br i1 %108, label %109, label %290

109:                                              ; preds = %105
  %110 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 9
  %111 = load i32, i32* %110, align 8
  %112 = icmp eq i32 %111, 0
  br i1 %112, label %113, label %290

113:                                              ; preds = %109
  %114 = getelementptr inbounds %struct.vp9_extracfg, %struct.vp9_extracfg* %2, i64 0, i32 10
  %115 = load i32, i32* %114, align 4
  %116 = icmp ult i32 %115, 25
  br i1 %116, label %117, label %290

117:                                              ; preds = %113
  %118 = getelementptr inbounds %struct.vp9_extracfg, %struct.vp9_extracfg* %2, i64 0, i32 11
  %119 = load i32, i32* %118, align 4
  %120 = icmp ult i32 %119, 25
  br i1 %120, label %121, label %290

121:                                              ; preds = %117
  switch i32 %119, label %122 [
    i32 0, label %124
    i32 2, label %124
  ]

122:                                              ; preds = %121
  %123 = icmp ugt i32 %119, 2
  br i1 %123, label %124, label %290

124:                                              ; preds = %122, %121, %121
  %125 = icmp ne i32 %119, 0
  %126 = icmp ult i32 %119, %115
  %127 = and i1 %125, %126
  br i1 %127, label %290, label %128

128:                                              ; preds = %124
  %129 = icmp eq i32 %65, 0
  br i1 %129, label %134, label %130

130:                                              ; preds = %128
  %131 = add nuw nsw i32 %119, 2
  %132 = icmp ult i32 %65, %131
  %133 = and i1 %125, %132
  br i1 %133, label %290, label %134

134:                                              ; preds = %130, %128
  %135 = icmp eq i32 %93, 1
  br i1 %135, label %136, label %144

136:                                              ; preds = %134
  %137 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 13
  %138 = load i32, i32* %137, align 8
  %139 = icmp ugt i32 %138, %5
  br i1 %139, label %290, label %140

140:                                              ; preds = %136
  %141 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 14
  %142 = load i32, i32* %141, align 4
  %143 = icmp ugt i32 %142, %10
  br i1 %143, label %290, label %144

144:                                              ; preds = %140, %134
  %145 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 35
  %146 = load i32, i32* %145, align 4
  %147 = add i32 %146, -1
  %148 = icmp ult i32 %147, 5
  br i1 %148, label %149, label %290

149:                                              ; preds = %144
  %150 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 38
  %151 = load i32, i32* %150, align 8
  %152 = add i32 %151, -1
  %153 = icmp ult i32 %152, 5
  br i1 %153, label %154, label %290

154:                                              ; preds = %149
  %155 = getelementptr inbounds %struct.vp9_extracfg, %struct.vp9_extracfg* %2, i64 0, i32 18
  %156 = load i32, i32* %155, align 4
  switch i32 %156, label %290 [
    i32 255, label %157
    i32 62, label %157
    i32 61, label %157
    i32 60, label %157
    i32 52, label %157
    i32 51, label %157
    i32 50, label %157
    i32 41, label %157
    i32 40, label %157
    i32 31, label %157
    i32 30, label %157
    i32 21, label %157
    i32 20, label %157
    i32 11, label %157
    i32 10, label %157
    i32 1, label %157
    i32 0, label %157
  ]

157:                                              ; preds = %154, %154, %154, %154, %154, %154, %154, %154, %154, %154, %154, %154, %154, %154, %154, %154, %154
  %158 = mul i32 %151, %146
  %159 = icmp ugt i32 %158, 12
  br i1 %159, label %290, label %160

160:                                              ; preds = %157
  %161 = icmp ugt i32 %151, 1
  br i1 %161, label %162, label %204

162:                                              ; preds = %160
  %163 = icmp ugt i32 %146, 1
  br i1 %163, label %164, label %184

164:                                              ; preds = %162, %181
  %165 = phi i32 [ %182, %181 ], [ 1, %162 ]
  %166 = mul i32 %151, %165
  br label %169

167:                                              ; preds = %169
  %168 = icmp ult i32 %180, %151
  br i1 %168, label %169, label %181

169:                                              ; preds = %164, %167
  %170 = phi i32 [ %180, %167 ], [ 1, %164 ]
  %171 = add i32 %166, %170
  %172 = sext i32 %171 to i64
  %173 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 43, i64 %172
  %174 = load i32, i32* %173, align 4
  %175 = add nsw i32 %171, -1
  %176 = sext i32 %175 to i64
  %177 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 43, i64 %176
  %178 = load i32, i32* %177, align 4
  %179 = icmp ult i32 %174, %178
  %180 = add nuw i32 %170, 1
  br i1 %179, label %290, label %167

181:                                              ; preds = %167
  %182 = add nuw i32 %165, 1
  %183 = icmp ult i32 %182, %146
  br i1 %183, label %164, label %184

184:                                              ; preds = %181, %162
  %185 = zext i32 %152 to i64
  %186 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 40, i64 %185
  %187 = load i32, i32* %186, align 4
  %188 = icmp eq i32 %187, 1
  br i1 %188, label %189, label %290

189:                                              ; preds = %184
  %190 = add i32 %151, -2
  br label %191

191:                                              ; preds = %194, %189
  %192 = phi i32 [ %190, %189 ], [ %195, %194 ]
  %193 = icmp eq i32 %192, 0
  br i1 %193, label %204, label %194

194:                                              ; preds = %191
  %195 = add i32 %192, -1
  %196 = zext i32 %195 to i64
  %197 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 40, i64 %196
  %198 = load i32, i32* %197, align 4
  %199 = zext i32 %192 to i64
  %200 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 40, i64 %199
  %201 = load i32, i32* %200, align 4
  %202 = shl i32 %201, 1
  %203 = icmp eq i32 %198, %202
  br i1 %203, label %191, label %290

204:                                              ; preds = %191, %160
  %205 = icmp eq i32 %89, 0
  br i1 %205, label %214, label %206

206:                                              ; preds = %204
  %207 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 33
  %208 = load i32, i32* %207, align 4
  %209 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 34
  %210 = load i32, i32* %209, align 8
  %211 = icmp eq i32 %208, %210
  %212 = icmp eq i32 %208, 0
  %213 = or i1 %212, %211
  br i1 %213, label %214, label %290

214:                                              ; preds = %206, %204
  %215 = getelementptr inbounds %struct.vp9_extracfg, %struct.vp9_extracfg* %2, i64 0, i32 29
  %216 = load i32, i32* %215, align 4
  %217 = icmp ult i32 %216, 2
  br i1 %217, label %218, label %290

218:                                              ; preds = %214
  %219 = getelementptr inbounds %struct.vp9_extracfg, %struct.vp9_extracfg* %2, i64 0, i32 30
  %220 = load i32, i32* %219, align 4
  %221 = icmp ult i32 %220, 3
  br i1 %221, label %222, label %290

222:                                              ; preds = %218
  %223 = getelementptr inbounds %struct.vp9_extracfg, %struct.vp9_extracfg* %2, i64 0, i32 1
  %224 = load i32, i32* %223, align 4
  %225 = icmp ult i32 %224, 7
  br i1 %225, label %226, label %290

226:                                              ; preds = %222
  %227 = getelementptr inbounds %struct.vp9_extracfg, %struct.vp9_extracfg* %2, i64 0, i32 0
  %228 = load i32, i32* %227, align 4
  %229 = add i32 %228, 9
  %230 = icmp ult i32 %229, 19
  br i1 %230, label %231, label %290

231:                                              ; preds = %226
  %232 = getelementptr inbounds %struct.vp9_extracfg, %struct.vp9_extracfg* %2, i64 0, i32 2
  %233 = load i32, i32* %232, align 4
  %234 = icmp ult i32 %233, 7
  br i1 %234, label %235, label %290

235:                                              ; preds = %231
  %236 = getelementptr inbounds %struct.vp9_extracfg, %struct.vp9_extracfg* %2, i64 0, i32 5
  %237 = load i32, i32* %236, align 4
  %238 = icmp ult i32 %237, 7
  br i1 %238, label %239, label %290

239:                                              ; preds = %235
  %240 = getelementptr inbounds %struct.vp9_extracfg, %struct.vp9_extracfg* %2, i64 0, i32 6
  %241 = load i32, i32* %240, align 4
  %242 = icmp ult i32 %241, 3
  br i1 %242, label %243, label %290

243:                                              ; preds = %239
  %244 = getelementptr inbounds %struct.vp9_extracfg, %struct.vp9_extracfg* %2, i64 0, i32 3
  %245 = load i32, i32* %244, align 4
  %246 = icmp ult i32 %245, 8
  br i1 %246, label %247, label %290

247:                                              ; preds = %243
  %248 = getelementptr inbounds %struct.vp9_extracfg, %struct.vp9_extracfg* %2, i64 0, i32 8
  %249 = load i32, i32* %248, align 4
  %250 = icmp ult i32 %249, 16
  br i1 %250, label %251, label %290

251:                                              ; preds = %247
  %252 = getelementptr inbounds %struct.vp9_extracfg, %struct.vp9_extracfg* %2, i64 0, i32 9
  %253 = load i32, i32* %252, align 4
  %254 = icmp ult i32 %253, 7
  br i1 %254, label %255, label %290

255:                                              ; preds = %251
  %256 = getelementptr inbounds %struct.vp9_extracfg, %struct.vp9_extracfg* %2, i64 0, i32 13
  %257 = load i32, i32* %256, align 4
  %258 = icmp ult i32 %257, 64
  br i1 %258, label %259, label %290

259:                                              ; preds = %255
  %260 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 5
  %261 = load i32, i32* %260, align 4
  %262 = icmp eq i32 %261, 8
  %263 = icmp ugt i32 %261, 8
  %264 = add i32 %261, -8
  %265 = icmp ult i32 %264, 5
  br i1 %265, label %266, label %290

266:                                              ; preds = %259
  %267 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 6
  %268 = load i32, i32* %267, align 8
  %269 = icmp ugt i32 %268, 8
  %270 = add i32 %268, -8
  %271 = icmp ult i32 %270, 5
  br i1 %271, label %272, label %290

272:                                              ; preds = %266
  %273 = getelementptr inbounds %struct.vp9_extracfg, %struct.vp9_extracfg* %2, i64 0, i32 24
  %274 = load i32, i32* %273, align 4
  %275 = icmp ult i32 %274, 3
  br i1 %275, label %276, label %290

276:                                              ; preds = %272
  %277 = icmp ult i32 %25, 2
  br i1 %277, label %278, label %281

278:                                              ; preds = %276
  %279 = or i1 %263, %269
  %280 = select i1 %263, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.116, i64 0, i64 0), i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.117, i64 0, i64 0)
  br i1 %279, label %290, label %282

281:                                              ; preds = %276
  br i1 %262, label %290, label %282

282:                                              ; preds = %278, %281
  %283 = getelementptr inbounds %struct.vp9_extracfg, %struct.vp9_extracfg* %2, i64 0, i32 25
  %284 = load i32, i32* %283, align 4
  %285 = icmp ult i32 %284, 8
  br i1 %285, label %286, label %290

286:                                              ; preds = %282
  %287 = getelementptr inbounds %struct.vp9_extracfg, %struct.vp9_extracfg* %2, i64 0, i32 26
  %288 = load i32, i32* %287, align 4
  %289 = icmp ult i32 %288, 2
  br i1 %289, label %293, label %290

290:                                              ; preds = %169, %194, %278, %286, %282, %281, %272, %266, %259, %255, %251, %247, %243, %239, %235, %231, %226, %222, %218, %214, %206, %184, %157, %154, %149, %144, %140, %136, %130, %124, %122, %117, %113, %109, %105, %101, %97, %91, %87, %83, %79, %75, %71, %67, %63, %59, %55, %51, %47, %41, %35, %31, %27, %23, %18, %13, %8, %3
  %291 = phi i8* [ getelementptr inbounds ([28 x i8], [28 x i8]* @.str.62, i64 0, i64 0), %3 ], [ getelementptr inbounds ([28 x i8], [28 x i8]* @.str.63, i64 0, i64 0), %8 ], [ getelementptr inbounds ([44 x i8], [44 x i8]* @.str.64, i64 0, i64 0), %13 ], [ getelementptr inbounds ([44 x i8], [44 x i8]* @.str.65, i64 0, i64 0), %18 ], [ getelementptr inbounds ([29 x i8], [29 x i8]* @.str.66, i64 0, i64 0), %23 ], [ getelementptr inbounds ([37 x i8], [37 x i8]* @.str.67, i64 0, i64 0), %27 ], [ getelementptr inbounds ([56 x i8], [56 x i8]* @.str.68, i64 0, i64 0), %31 ], [ getelementptr inbounds ([26 x i8], [26 x i8]* @.str.69, i64 0, i64 0), %35 ], [ getelementptr inbounds ([46 x i8], [46 x i8]* @.str.70, i64 0, i64 0), %41 ], [ getelementptr inbounds ([44 x i8], [44 x i8]* @.str.71, i64 0, i64 0), %47 ], [ getelementptr inbounds ([31 x i8], [31 x i8]* @.str.72, i64 0, i64 0), %51 ], [ getelementptr inbounds ([41 x i8], [41 x i8]* @.str.73, i64 0, i64 0), %55 ], [ getelementptr inbounds ([30 x i8], [30 x i8]* @.str.74, i64 0, i64 0), %59 ], [ getelementptr inbounds ([49 x i8], [49 x i8]* @.str.75, i64 0, i64 0), %63 ], [ getelementptr inbounds ([43 x i8], [43 x i8]* @.str.76, i64 0, i64 0), %67 ], [ getelementptr inbounds ([39 x i8], [39 x i8]* @.str.77, i64 0, i64 0), %71 ], [ getelementptr inbounds ([38 x i8], [38 x i8]* @.str.78, i64 0, i64 0), %75 ], [ getelementptr inbounds ([43 x i8], [43 x i8]* @.str.79, i64 0, i64 0), %79 ], [ getelementptr inbounds ([55 x i8], [55 x i8]* @.str.80, i64 0, i64 0), %83 ], [ getelementptr inbounds ([52 x i8], [52 x i8]* @.str.81, i64 0, i64 0), %87 ], [ getelementptr inbounds ([35 x i8], [35 x i8]* @.str.82, i64 0, i64 0), %91 ], [ getelementptr inbounds ([41 x i8], [41 x i8]* @.str.83, i64 0, i64 0), %97 ], [ getelementptr inbounds ([41 x i8], [41 x i8]* @.str.84, i64 0, i64 0), %101 ], [ getelementptr inbounds ([43 x i8], [43 x i8]* @.str.85, i64 0, i64 0), %105 ], [ getelementptr inbounds ([55 x i8], [55 x i8]* @.str.86, i64 0, i64 0), %109 ], [ getelementptr inbounds ([56 x i8], [56 x i8]* @.str.87, i64 0, i64 0), %113 ], [ getelementptr inbounds ([56 x i8], [56 x i8]* @.str.88, i64 0, i64 0), %117 ], [ getelementptr inbounds ([56 x i8], [56 x i8]* @.str.89, i64 0, i64 0), %122 ], [ getelementptr inbounds ([81 x i8], [81 x i8]* @.str.90, i64 0, i64 0), %124 ], [ getelementptr inbounds ([63 x i8], [63 x i8]* @.str.91, i64 0, i64 0), %130 ], [ getelementptr inbounds ([43 x i8], [43 x i8]* @.str.92, i64 0, i64 0), %136 ], [ getelementptr inbounds ([44 x i8], [44 x i8]* @.str.93, i64 0, i64 0), %140 ], [ getelementptr inbounds ([53 x i8], [53 x i8]* @.str.94, i64 0, i64 0), %144 ], [ getelementptr inbounds ([53 x i8], [53 x i8]* @.str.95, i64 0, i64 0), %149 ], [ getelementptr inbounds ([24 x i8], [24 x i8]* @.str.96, i64 0, i64 0), %154 ], [ getelementptr inbounds ([52 x i8], [52 x i8]* @.str.97, i64 0, i64 0), %157 ], [ getelementptr inbounds ([65 x i8], [65 x i8]* @.str.99, i64 0, i64 0), %184 ], [ getelementptr inbounds ([70 x i8], [70 x i8]* @.str.101, i64 0, i64 0), %206 ], [ getelementptr inbounds ([27 x i8], [27 x i8]* @.str.102, i64 0, i64 0), %214 ], [ getelementptr inbounds ([44 x i8], [44 x i8]* @.str.103, i64 0, i64 0), %218 ], [ getelementptr inbounds ([53 x i8], [53 x i8]* @.str.104, i64 0, i64 0), %222 ], [ getelementptr inbounds ([30 x i8], [30 x i8]* @.str.105, i64 0, i64 0), %226 ], [ getelementptr inbounds ([37 x i8], [37 x i8]* @.str.106, i64 0, i64 0), %231 ], [ getelementptr inbounds ([33 x i8], [33 x i8]* @.str.107, i64 0, i64 0), %235 ], [ getelementptr inbounds ([30 x i8], [30 x i8]* @.str.108, i64 0, i64 0), %239 ], [ getelementptr inbounds ([29 x i8], [29 x i8]* @.str.109, i64 0, i64 0), %243 ], [ getelementptr inbounds ([37 x i8], [37 x i8]* @.str.110, i64 0, i64 0), %247 ], [ getelementptr inbounds ([33 x i8], [33 x i8]* @.str.111, i64 0, i64 0), %251 ], [ getelementptr inbounds ([30 x i8], [30 x i8]* @.str.112, i64 0, i64 0), %255 ], [ getelementptr inbounds ([51 x i8], [51 x i8]* @.str.113, i64 0, i64 0), %259 ], [ getelementptr inbounds ([39 x i8], [39 x i8]* @.str.114, i64 0, i64 0), %266 ], [ getelementptr inbounds ([70 x i8], [70 x i8]* @.str.115, i64 0, i64 0), %272 ], [ %280, %278 ], [ getelementptr inbounds ([47 x i8], [47 x i8]* @.str.118, i64 0, i64 0), %281 ], [ getelementptr inbounds ([55 x i8], [55 x i8]* @.str.119, i64 0, i64 0), %282 ], [ getelementptr inbounds ([66 x i8], [66 x i8]* @.str.120, i64 0, i64 0), %286 ], [ getelementptr inbounds ([46 x i8], [46 x i8]* @.str.100, i64 0, i64 0), %194 ], [ getelementptr inbounds ([45 x i8], [45 x i8]* @.str.98, i64 0, i64 0), %169 ]
  %292 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 0, i32 0
  store i8* %291, i8** %292, align 8
  br label %293

293:                                              ; preds = %290, %286
  %294 = phi i32 [ 0, %286 ], [ 8, %290 ]
  ret i32 %294
}

declare %struct.VP9_COMP* @vp9_create_compressor(%struct.VP9EncoderConfig*, %struct.BufferPool*) local_unnamed_addr #5

declare i32 @pthread_once(i32*, void ()*) local_unnamed_addr #5

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #7

declare void @vp9_remove_compressor(%struct.VP9_COMP*) local_unnamed_addr #5

declare void @vpx_free(i8*) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define internal i32 @ctrl_copy_reference(%struct.vpx_codec_alg_priv* nocapture readonly, %struct.__va_list_tag* nocapture) #1 {
  %3 = alloca %struct.yv12_buffer_config, align 8
  %4 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 0
  %5 = load i32, i32* %4, align 8
  %6 = icmp ult i32 %5, 41
  br i1 %6, label %7, label %13

7:                                                ; preds = %2
  %8 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 3
  %9 = load i8*, i8** %8, align 8
  %10 = sext i32 %5 to i64
  %11 = getelementptr i8, i8* %9, i64 %10
  %12 = add nuw nsw i32 %5, 8
  store i32 %12, i32* %4, align 8
  br label %17

13:                                               ; preds = %2
  %14 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 2
  %15 = load i8*, i8** %14, align 8
  %16 = getelementptr i8, i8* %15, i64 8
  store i8* %16, i8** %14, align 8
  br label %17

17:                                               ; preds = %13, %7
  %18 = phi i8* [ %11, %7 ], [ %15, %13 ]
  %19 = bitcast i8* %18 to %struct.vpx_ref_frame**
  %20 = load %struct.vpx_ref_frame*, %struct.vpx_ref_frame** %19, align 8
  %21 = icmp eq %struct.vpx_ref_frame* %20, null
  br i1 %21, label %35, label %22

22:                                               ; preds = %17
  %23 = bitcast %struct.yv12_buffer_config* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %23) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %23, i8 -86, i64 160, i1 false)
  %24 = getelementptr inbounds %struct.vpx_ref_frame, %struct.vpx_ref_frame* %20, i64 0, i32 1
  %25 = call i32 @image2yuvconfig(%struct.vpx_image* %24, %struct.yv12_buffer_config* nonnull %3) #9
  %26 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 7
  %27 = load %struct.VP9_COMP*, %struct.VP9_COMP** %26, align 8
  %28 = getelementptr inbounds %struct.vpx_ref_frame, %struct.vpx_ref_frame* %20, i64 0, i32 0
  %29 = load i32, i32* %28, align 8
  %30 = icmp eq i32 %29, 2
  %31 = select i1 %30, i32 2, i32 1
  %32 = icmp eq i32 %29, 4
  %33 = select i1 %32, i32 4, i32 %31
  %34 = call i32 @vp9_copy_reference_enc(%struct.VP9_COMP* %27, i32 %33, %struct.yv12_buffer_config* nonnull %3) #9
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %23) #9
  br label %35

35:                                               ; preds = %17, %22
  %36 = phi i32 [ 0, %22 ], [ 8, %17 ]
  ret i32 %36
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @ctrl_set_reference(%struct.vpx_codec_alg_priv* nocapture readonly, %struct.__va_list_tag* nocapture) #1 {
  %3 = alloca %struct.yv12_buffer_config, align 8
  %4 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 0
  %5 = load i32, i32* %4, align 8
  %6 = icmp ult i32 %5, 41
  br i1 %6, label %7, label %13

7:                                                ; preds = %2
  %8 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 3
  %9 = load i8*, i8** %8, align 8
  %10 = sext i32 %5 to i64
  %11 = getelementptr i8, i8* %9, i64 %10
  %12 = add nuw nsw i32 %5, 8
  store i32 %12, i32* %4, align 8
  br label %17

13:                                               ; preds = %2
  %14 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 2
  %15 = load i8*, i8** %14, align 8
  %16 = getelementptr i8, i8* %15, i64 8
  store i8* %16, i8** %14, align 8
  br label %17

17:                                               ; preds = %13, %7
  %18 = phi i8* [ %11, %7 ], [ %15, %13 ]
  %19 = bitcast i8* %18 to %struct.vpx_ref_frame**
  %20 = load %struct.vpx_ref_frame*, %struct.vpx_ref_frame** %19, align 8
  %21 = icmp eq %struct.vpx_ref_frame* %20, null
  br i1 %21, label %35, label %22

22:                                               ; preds = %17
  %23 = bitcast %struct.yv12_buffer_config* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %23) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %23, i8 -86, i64 160, i1 false)
  %24 = getelementptr inbounds %struct.vpx_ref_frame, %struct.vpx_ref_frame* %20, i64 0, i32 1
  %25 = call i32 @image2yuvconfig(%struct.vpx_image* %24, %struct.yv12_buffer_config* nonnull %3) #9
  %26 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 7
  %27 = load %struct.VP9_COMP*, %struct.VP9_COMP** %26, align 8
  %28 = getelementptr inbounds %struct.vpx_ref_frame, %struct.vpx_ref_frame* %20, i64 0, i32 0
  %29 = load i32, i32* %28, align 8
  %30 = icmp eq i32 %29, 2
  %31 = select i1 %30, i32 2, i32 1
  %32 = icmp eq i32 %29, 4
  %33 = select i1 %32, i32 4, i32 %31
  %34 = call i32 @vp9_set_reference_enc(%struct.VP9_COMP* %27, i32 %33, %struct.yv12_buffer_config* nonnull %3) #9
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %23) #9
  br label %35

35:                                               ; preds = %17, %22
  %36 = phi i32 [ 0, %22 ], [ 8, %17 ]
  ret i32 %36
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @ctrl_set_previewpp(%struct.vpx_codec_alg_priv* nocapture, %struct.__va_list_tag* nocapture) #1 {
  %3 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = icmp ult i32 %4, 41
  br i1 %5, label %6, label %12

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 3
  %8 = load i8*, i8** %7, align 8
  %9 = sext i32 %4 to i64
  %10 = getelementptr i8, i8* %8, i64 %9
  %11 = add nuw nsw i32 %4, 8
  store i32 %11, i32* %3, align 8
  br label %16

12:                                               ; preds = %2
  %13 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 2
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr i8, i8* %14, i64 8
  store i8* %15, i8** %13, align 8
  br label %16

16:                                               ; preds = %12, %6
  %17 = phi i8* [ %10, %6 ], [ %14, %12 ]
  %18 = bitcast i8* %17 to %struct.vp8_postproc_cfg**
  %19 = load %struct.vp8_postproc_cfg*, %struct.vp8_postproc_cfg** %18, align 8
  %20 = icmp eq %struct.vp8_postproc_cfg* %19, null
  br i1 %20, label %25, label %21

21:                                               ; preds = %16
  %22 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 17
  %23 = bitcast %struct.vp8_postproc_cfg* %22 to i8*
  %24 = bitcast %struct.vp8_postproc_cfg* %19 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %23, i8* nonnull align 4 %24, i64 12, i1 false)
  br label %25

25:                                               ; preds = %16, %21
  %26 = phi i32 [ 0, %21 ], [ 8, %16 ]
  ret i32 %26
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @ctrl_set_roi_map(%struct.vpx_codec_alg_priv* nocapture readonly, %struct.__va_list_tag* nocapture) #1 {
  %3 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = icmp ult i32 %4, 41
  br i1 %5, label %6, label %12

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 3
  %8 = load i8*, i8** %7, align 8
  %9 = sext i32 %4 to i64
  %10 = getelementptr i8, i8* %8, i64 %9
  %11 = add nuw nsw i32 %4, 8
  store i32 %11, i32* %3, align 8
  br label %16

12:                                               ; preds = %2
  %13 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 2
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr i8, i8* %14, i64 8
  store i8* %15, i8** %13, align 8
  br label %16

16:                                               ; preds = %12, %6
  %17 = phi i8* [ %10, %6 ], [ %14, %12 ]
  %18 = bitcast i8* %17 to %struct.vpx_roi_map**
  %19 = load %struct.vpx_roi_map*, %struct.vpx_roi_map** %18, align 8
  %20 = icmp eq %struct.vpx_roi_map* %19, null
  br i1 %20, label %37, label %21

21:                                               ; preds = %16
  %22 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 7
  %23 = load %struct.VP9_COMP*, %struct.VP9_COMP** %22, align 8
  %24 = getelementptr inbounds %struct.vpx_roi_map, %struct.vpx_roi_map* %19, i64 0, i32 1
  %25 = load i8*, i8** %24, align 8
  %26 = getelementptr inbounds %struct.vpx_roi_map, %struct.vpx_roi_map* %19, i64 0, i32 2
  %27 = load i32, i32* %26, align 8
  %28 = getelementptr inbounds %struct.vpx_roi_map, %struct.vpx_roi_map* %19, i64 0, i32 3
  %29 = load i32, i32* %28, align 4
  %30 = getelementptr inbounds %struct.vpx_roi_map, %struct.vpx_roi_map* %19, i64 0, i32 4, i64 0
  %31 = getelementptr inbounds %struct.vpx_roi_map, %struct.vpx_roi_map* %19, i64 0, i32 5, i64 0
  %32 = getelementptr inbounds %struct.vpx_roi_map, %struct.vpx_roi_map* %19, i64 0, i32 6, i64 0
  %33 = getelementptr inbounds %struct.vpx_roi_map, %struct.vpx_roi_map* %19, i64 0, i32 7, i64 0
  %34 = tail call i32 @vp9_set_roi_map(%struct.VP9_COMP* %23, i8* %25, i32 %27, i32 %29, i32* %30, i32* %31, i32* %32, i32* %33) #9
  %35 = icmp eq i32 %34, 0
  %36 = select i1 %35, i32 0, i32 8
  br label %37

37:                                               ; preds = %16, %21
  %38 = phi i32 [ %36, %21 ], [ 8, %16 ]
  ret i32 %38
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @ctrl_set_active_map(%struct.vpx_codec_alg_priv* nocapture readonly, %struct.__va_list_tag* nocapture) #1 {
  %3 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = icmp ult i32 %4, 41
  br i1 %5, label %6, label %12

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 3
  %8 = load i8*, i8** %7, align 8
  %9 = sext i32 %4 to i64
  %10 = getelementptr i8, i8* %8, i64 %9
  %11 = add nuw nsw i32 %4, 8
  store i32 %11, i32* %3, align 8
  br label %16

12:                                               ; preds = %2
  %13 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 2
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr i8, i8* %14, i64 8
  store i8* %15, i8** %13, align 8
  br label %16

16:                                               ; preds = %12, %6
  %17 = phi i8* [ %10, %6 ], [ %14, %12 ]
  %18 = bitcast i8* %17 to %struct.vpx_active_map**
  %19 = load %struct.vpx_active_map*, %struct.vpx_active_map** %18, align 8
  %20 = icmp eq %struct.vpx_active_map* %19, null
  br i1 %20, label %33, label %21

21:                                               ; preds = %16
  %22 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 7
  %23 = load %struct.VP9_COMP*, %struct.VP9_COMP** %22, align 8
  %24 = getelementptr inbounds %struct.vpx_active_map, %struct.vpx_active_map* %19, i64 0, i32 0
  %25 = load i8*, i8** %24, align 8
  %26 = getelementptr inbounds %struct.vpx_active_map, %struct.vpx_active_map* %19, i64 0, i32 1
  %27 = load i32, i32* %26, align 8
  %28 = getelementptr inbounds %struct.vpx_active_map, %struct.vpx_active_map* %19, i64 0, i32 2
  %29 = load i32, i32* %28, align 4
  %30 = tail call i32 @vp9_set_active_map(%struct.VP9_COMP* %23, i8* %25, i32 %27, i32 %29) #9
  %31 = icmp eq i32 %30, 0
  %32 = select i1 %31, i32 0, i32 8
  br label %33

33:                                               ; preds = %16, %21
  %34 = phi i32 [ %32, %21 ], [ 8, %16 ]
  ret i32 %34
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @ctrl_set_scale_mode(%struct.vpx_codec_alg_priv* nocapture readonly, %struct.__va_list_tag* nocapture) #1 {
  %3 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = icmp ult i32 %4, 41
  br i1 %5, label %6, label %12

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 3
  %8 = load i8*, i8** %7, align 8
  %9 = sext i32 %4 to i64
  %10 = getelementptr i8, i8* %8, i64 %9
  %11 = add nuw nsw i32 %4, 8
  store i32 %11, i32* %3, align 8
  br label %16

12:                                               ; preds = %2
  %13 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 2
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr i8, i8* %14, i64 8
  store i8* %15, i8** %13, align 8
  br label %16

16:                                               ; preds = %12, %6
  %17 = phi i8* [ %10, %6 ], [ %14, %12 ]
  %18 = bitcast i8* %17 to %struct.vpx_scaling_mode**
  %19 = load %struct.vpx_scaling_mode*, %struct.vpx_scaling_mode** %18, align 8
  %20 = icmp eq %struct.vpx_scaling_mode* %19, null
  br i1 %20, label %31, label %21

21:                                               ; preds = %16
  %22 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 7
  %23 = load %struct.VP9_COMP*, %struct.VP9_COMP** %22, align 8
  %24 = getelementptr inbounds %struct.vpx_scaling_mode, %struct.vpx_scaling_mode* %19, i64 0, i32 0
  %25 = load i32, i32* %24, align 4
  %26 = getelementptr inbounds %struct.vpx_scaling_mode, %struct.vpx_scaling_mode* %19, i64 0, i32 1
  %27 = load i32, i32* %26, align 4
  %28 = tail call i32 @vp9_set_internal_size(%struct.VP9_COMP* %23, i32 %25, i32 %27) #9
  %29 = icmp eq i32 %28, 0
  %30 = select i1 %29, i32 0, i32 8
  br label %31

31:                                               ; preds = %16, %21
  %32 = phi i32 [ %30, %21 ], [ 8, %16 ]
  ret i32 %32
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @ctrl_set_cpuused(%struct.vpx_codec_alg_priv*, %struct.__va_list_tag* nocapture) #1 {
  %3 = alloca %struct.vp9_extracfg, align 4
  %4 = bitcast %struct.vp9_extracfg* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %4) #9
  %5 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 2
  %6 = bitcast %struct.vp9_extracfg* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %4, i8* align 8 %6, i64 128, i1 false)
  %7 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 0
  %8 = load i32, i32* %7, align 8
  %9 = icmp ult i32 %8, 41
  br i1 %9, label %10, label %16

10:                                               ; preds = %2
  %11 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 3
  %12 = load i8*, i8** %11, align 8
  %13 = sext i32 %8 to i64
  %14 = getelementptr i8, i8* %12, i64 %13
  %15 = add nuw nsw i32 %8, 8
  store i32 %15, i32* %7, align 8
  br label %20

16:                                               ; preds = %2
  %17 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 2
  %18 = load i8*, i8** %17, align 8
  %19 = getelementptr i8, i8* %18, i64 8
  store i8* %19, i8** %17, align 8
  br label %20

20:                                               ; preds = %10, %16
  %21 = phi i8* [ %14, %10 ], [ %18, %16 ]
  %22 = bitcast i8* %21 to i32*
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds %struct.vp9_extracfg, %struct.vp9_extracfg* %3, i64 0, i32 0
  %25 = icmp slt i32 %23, 9
  %26 = select i1 %25, i32 %23, i32 9
  %27 = icmp sgt i32 %26, -9
  %28 = select i1 %27, i32 %26, i32 -9
  %29 = add nsw i32 %28, 4
  %30 = icmp ult i32 %29, 9
  %31 = icmp sgt i32 %28, 0
  %32 = select i1 %31, i32 5, i32 -5
  %33 = select i1 %30, i32 %32, i32 %28
  store i32 %33, i32* %24, align 4
  %34 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 1
  %35 = call fastcc i32 @validate_config(%struct.vpx_codec_alg_priv* %0, %struct.vpx_codec_enc_cfg* %34, %struct.vp9_extracfg* nonnull %3) #9
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %37, label %41

37:                                               ; preds = %20
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* nonnull align 4 %4, i64 128, i1 false) #9
  %38 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 6
  call fastcc void @set_encoder_config(%struct.VP9EncoderConfig* %38, %struct.vpx_codec_enc_cfg* %34, %struct.vp9_extracfg* %5) #9
  %39 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 7
  %40 = load %struct.VP9_COMP*, %struct.VP9_COMP** %39, align 8
  call void @vp9_change_config(%struct.VP9_COMP* %40, %struct.VP9EncoderConfig* %38) #9
  br label %41

41:                                               ; preds = %20, %37
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %4) #9
  ret i32 %35
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @ctrl_set_enable_auto_alt_ref(%struct.vpx_codec_alg_priv*, %struct.__va_list_tag* nocapture) #1 {
  %3 = alloca %struct.vp9_extracfg, align 4
  %4 = bitcast %struct.vp9_extracfg* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %4) #9
  %5 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 2
  %6 = bitcast %struct.vp9_extracfg* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %4, i8* align 8 %6, i64 128, i1 false)
  %7 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 0
  %8 = load i32, i32* %7, align 8
  %9 = icmp ult i32 %8, 41
  br i1 %9, label %10, label %16

10:                                               ; preds = %2
  %11 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 3
  %12 = load i8*, i8** %11, align 8
  %13 = sext i32 %8 to i64
  %14 = getelementptr i8, i8* %12, i64 %13
  %15 = add nuw nsw i32 %8, 8
  store i32 %15, i32* %7, align 8
  br label %20

16:                                               ; preds = %2
  %17 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 2
  %18 = load i8*, i8** %17, align 8
  %19 = getelementptr i8, i8* %18, i64 8
  store i8* %19, i8** %17, align 8
  br label %20

20:                                               ; preds = %10, %16
  %21 = phi i8* [ %14, %10 ], [ %18, %16 ]
  %22 = bitcast i8* %21 to i32*
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds %struct.vp9_extracfg, %struct.vp9_extracfg* %3, i64 0, i32 1
  store i32 %23, i32* %24, align 4
  %25 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 1
  %26 = call fastcc i32 @validate_config(%struct.vpx_codec_alg_priv* %0, %struct.vpx_codec_enc_cfg* %25, %struct.vp9_extracfg* nonnull %3) #9
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %28, label %32

28:                                               ; preds = %20
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* nonnull align 4 %4, i64 128, i1 false) #9
  %29 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 6
  call fastcc void @set_encoder_config(%struct.VP9EncoderConfig* %29, %struct.vpx_codec_enc_cfg* %25, %struct.vp9_extracfg* %5) #9
  %30 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 7
  %31 = load %struct.VP9_COMP*, %struct.VP9_COMP** %30, align 8
  call void @vp9_change_config(%struct.VP9_COMP* %31, %struct.VP9EncoderConfig* %29) #9
  br label %32

32:                                               ; preds = %20, %28
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %4) #9
  ret i32 %26
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @ctrl_set_sharpness(%struct.vpx_codec_alg_priv*, %struct.__va_list_tag* nocapture) #1 {
  %3 = alloca %struct.vp9_extracfg, align 4
  %4 = bitcast %struct.vp9_extracfg* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %4) #9
  %5 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 2
  %6 = bitcast %struct.vp9_extracfg* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %4, i8* align 8 %6, i64 128, i1 false)
  %7 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 0
  %8 = load i32, i32* %7, align 8
  %9 = icmp ult i32 %8, 41
  br i1 %9, label %10, label %16

10:                                               ; preds = %2
  %11 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 3
  %12 = load i8*, i8** %11, align 8
  %13 = sext i32 %8 to i64
  %14 = getelementptr i8, i8* %12, i64 %13
  %15 = add nuw nsw i32 %8, 8
  store i32 %15, i32* %7, align 8
  br label %20

16:                                               ; preds = %2
  %17 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 2
  %18 = load i8*, i8** %17, align 8
  %19 = getelementptr i8, i8* %18, i64 8
  store i8* %19, i8** %17, align 8
  br label %20

20:                                               ; preds = %10, %16
  %21 = phi i8* [ %14, %10 ], [ %18, %16 ]
  %22 = bitcast i8* %21 to i32*
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds %struct.vp9_extracfg, %struct.vp9_extracfg* %3, i64 0, i32 3
  store i32 %23, i32* %24, align 4
  %25 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 1
  %26 = call fastcc i32 @validate_config(%struct.vpx_codec_alg_priv* %0, %struct.vpx_codec_enc_cfg* %25, %struct.vp9_extracfg* nonnull %3) #9
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %28, label %32

28:                                               ; preds = %20
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* nonnull align 4 %4, i64 128, i1 false) #9
  %29 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 6
  call fastcc void @set_encoder_config(%struct.VP9EncoderConfig* %29, %struct.vpx_codec_enc_cfg* %25, %struct.vp9_extracfg* %5) #9
  %30 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 7
  %31 = load %struct.VP9_COMP*, %struct.VP9_COMP** %30, align 8
  call void @vp9_change_config(%struct.VP9_COMP* %31, %struct.VP9EncoderConfig* %29) #9
  br label %32

32:                                               ; preds = %20, %28
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %4) #9
  ret i32 %26
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @ctrl_set_static_thresh(%struct.vpx_codec_alg_priv*, %struct.__va_list_tag* nocapture) #1 {
  %3 = alloca %struct.vp9_extracfg, align 4
  %4 = bitcast %struct.vp9_extracfg* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %4) #9
  %5 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 2
  %6 = bitcast %struct.vp9_extracfg* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %4, i8* align 8 %6, i64 128, i1 false)
  %7 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 0
  %8 = load i32, i32* %7, align 8
  %9 = icmp ult i32 %8, 41
  br i1 %9, label %10, label %16

10:                                               ; preds = %2
  %11 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 3
  %12 = load i8*, i8** %11, align 8
  %13 = sext i32 %8 to i64
  %14 = getelementptr i8, i8* %12, i64 %13
  %15 = add nuw nsw i32 %8, 8
  store i32 %15, i32* %7, align 8
  br label %20

16:                                               ; preds = %2
  %17 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 2
  %18 = load i8*, i8** %17, align 8
  %19 = getelementptr i8, i8* %18, i64 8
  store i8* %19, i8** %17, align 8
  br label %20

20:                                               ; preds = %10, %16
  %21 = phi i8* [ %14, %10 ], [ %18, %16 ]
  %22 = bitcast i8* %21 to i32*
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds %struct.vp9_extracfg, %struct.vp9_extracfg* %3, i64 0, i32 4
  store i32 %23, i32* %24, align 4
  %25 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 1
  %26 = call fastcc i32 @validate_config(%struct.vpx_codec_alg_priv* %0, %struct.vpx_codec_enc_cfg* %25, %struct.vp9_extracfg* nonnull %3) #9
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %28, label %32

28:                                               ; preds = %20
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* nonnull align 4 %4, i64 128, i1 false) #9
  %29 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 6
  call fastcc void @set_encoder_config(%struct.VP9EncoderConfig* %29, %struct.vpx_codec_enc_cfg* %25, %struct.vp9_extracfg* %5) #9
  %30 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 7
  %31 = load %struct.VP9_COMP*, %struct.VP9_COMP** %30, align 8
  call void @vp9_change_config(%struct.VP9_COMP* %31, %struct.VP9EncoderConfig* %29) #9
  br label %32

32:                                               ; preds = %20, %28
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %4) #9
  ret i32 %26
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @ctrl_set_tile_columns(%struct.vpx_codec_alg_priv*, %struct.__va_list_tag* nocapture) #1 {
  %3 = alloca %struct.vp9_extracfg, align 4
  %4 = bitcast %struct.vp9_extracfg* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %4) #9
  %5 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 2
  %6 = bitcast %struct.vp9_extracfg* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %4, i8* align 8 %6, i64 128, i1 false)
  %7 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 0
  %8 = load i32, i32* %7, align 8
  %9 = icmp ult i32 %8, 41
  br i1 %9, label %10, label %16

10:                                               ; preds = %2
  %11 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 3
  %12 = load i8*, i8** %11, align 8
  %13 = sext i32 %8 to i64
  %14 = getelementptr i8, i8* %12, i64 %13
  %15 = add nuw nsw i32 %8, 8
  store i32 %15, i32* %7, align 8
  br label %20

16:                                               ; preds = %2
  %17 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 2
  %18 = load i8*, i8** %17, align 8
  %19 = getelementptr i8, i8* %18, i64 8
  store i8* %19, i8** %17, align 8
  br label %20

20:                                               ; preds = %10, %16
  %21 = phi i8* [ %14, %10 ], [ %18, %16 ]
  %22 = bitcast i8* %21 to i32*
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds %struct.vp9_extracfg, %struct.vp9_extracfg* %3, i64 0, i32 5
  store i32 %23, i32* %24, align 4
  %25 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 1
  %26 = call fastcc i32 @validate_config(%struct.vpx_codec_alg_priv* %0, %struct.vpx_codec_enc_cfg* %25, %struct.vp9_extracfg* nonnull %3) #9
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %28, label %32

28:                                               ; preds = %20
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* nonnull align 4 %4, i64 128, i1 false) #9
  %29 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 6
  call fastcc void @set_encoder_config(%struct.VP9EncoderConfig* %29, %struct.vpx_codec_enc_cfg* %25, %struct.vp9_extracfg* %5) #9
  %30 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 7
  %31 = load %struct.VP9_COMP*, %struct.VP9_COMP** %30, align 8
  call void @vp9_change_config(%struct.VP9_COMP* %31, %struct.VP9EncoderConfig* %29) #9
  br label %32

32:                                               ; preds = %20, %28
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %4) #9
  ret i32 %26
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @ctrl_set_tile_rows(%struct.vpx_codec_alg_priv*, %struct.__va_list_tag* nocapture) #1 {
  %3 = alloca %struct.vp9_extracfg, align 4
  %4 = bitcast %struct.vp9_extracfg* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %4) #9
  %5 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 2
  %6 = bitcast %struct.vp9_extracfg* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %4, i8* align 8 %6, i64 128, i1 false)
  %7 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 0
  %8 = load i32, i32* %7, align 8
  %9 = icmp ult i32 %8, 41
  br i1 %9, label %10, label %16

10:                                               ; preds = %2
  %11 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 3
  %12 = load i8*, i8** %11, align 8
  %13 = sext i32 %8 to i64
  %14 = getelementptr i8, i8* %12, i64 %13
  %15 = add nuw nsw i32 %8, 8
  store i32 %15, i32* %7, align 8
  br label %20

16:                                               ; preds = %2
  %17 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 2
  %18 = load i8*, i8** %17, align 8
  %19 = getelementptr i8, i8* %18, i64 8
  store i8* %19, i8** %17, align 8
  br label %20

20:                                               ; preds = %10, %16
  %21 = phi i8* [ %14, %10 ], [ %18, %16 ]
  %22 = bitcast i8* %21 to i32*
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds %struct.vp9_extracfg, %struct.vp9_extracfg* %3, i64 0, i32 6
  store i32 %23, i32* %24, align 4
  %25 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 1
  %26 = call fastcc i32 @validate_config(%struct.vpx_codec_alg_priv* %0, %struct.vpx_codec_enc_cfg* %25, %struct.vp9_extracfg* nonnull %3) #9
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %28, label %32

28:                                               ; preds = %20
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* nonnull align 4 %4, i64 128, i1 false) #9
  %29 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 6
  call fastcc void @set_encoder_config(%struct.VP9EncoderConfig* %29, %struct.vpx_codec_enc_cfg* %25, %struct.vp9_extracfg* %5) #9
  %30 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 7
  %31 = load %struct.VP9_COMP*, %struct.VP9_COMP** %30, align 8
  call void @vp9_change_config(%struct.VP9_COMP* %31, %struct.VP9EncoderConfig* %29) #9
  br label %32

32:                                               ; preds = %20, %28
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %4) #9
  ret i32 %26
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @ctrl_set_tpl_model(%struct.vpx_codec_alg_priv*, %struct.__va_list_tag* nocapture) #1 {
  %3 = alloca %struct.vp9_extracfg, align 4
  %4 = bitcast %struct.vp9_extracfg* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %4) #9
  %5 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 2
  %6 = bitcast %struct.vp9_extracfg* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %4, i8* align 8 %6, i64 128, i1 false)
  %7 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 0
  %8 = load i32, i32* %7, align 8
  %9 = icmp ult i32 %8, 41
  br i1 %9, label %10, label %16

10:                                               ; preds = %2
  %11 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 3
  %12 = load i8*, i8** %11, align 8
  %13 = sext i32 %8 to i64
  %14 = getelementptr i8, i8* %12, i64 %13
  %15 = add nuw nsw i32 %8, 8
  store i32 %15, i32* %7, align 8
  br label %20

16:                                               ; preds = %2
  %17 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 2
  %18 = load i8*, i8** %17, align 8
  %19 = getelementptr i8, i8* %18, i64 8
  store i8* %19, i8** %17, align 8
  br label %20

20:                                               ; preds = %10, %16
  %21 = phi i8* [ %14, %10 ], [ %18, %16 ]
  %22 = bitcast i8* %21 to i32*
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds %struct.vp9_extracfg, %struct.vp9_extracfg* %3, i64 0, i32 7
  store i32 %23, i32* %24, align 4
  %25 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 1
  %26 = call fastcc i32 @validate_config(%struct.vpx_codec_alg_priv* %0, %struct.vpx_codec_enc_cfg* %25, %struct.vp9_extracfg* nonnull %3) #9
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %28, label %32

28:                                               ; preds = %20
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* nonnull align 4 %4, i64 128, i1 false) #9
  %29 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 6
  call fastcc void @set_encoder_config(%struct.VP9EncoderConfig* %29, %struct.vpx_codec_enc_cfg* %25, %struct.vp9_extracfg* %5) #9
  %30 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 7
  %31 = load %struct.VP9_COMP*, %struct.VP9_COMP** %30, align 8
  call void @vp9_change_config(%struct.VP9_COMP* %31, %struct.VP9EncoderConfig* %29) #9
  br label %32

32:                                               ; preds = %20, %28
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %4) #9
  ret i32 %26
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @ctrl_set_arnr_max_frames(%struct.vpx_codec_alg_priv*, %struct.__va_list_tag* nocapture) #1 {
  %3 = alloca %struct.vp9_extracfg, align 4
  %4 = bitcast %struct.vp9_extracfg* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %4) #9
  %5 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 2
  %6 = bitcast %struct.vp9_extracfg* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %4, i8* align 8 %6, i64 128, i1 false)
  %7 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 0
  %8 = load i32, i32* %7, align 8
  %9 = icmp ult i32 %8, 41
  br i1 %9, label %10, label %16

10:                                               ; preds = %2
  %11 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 3
  %12 = load i8*, i8** %11, align 8
  %13 = sext i32 %8 to i64
  %14 = getelementptr i8, i8* %12, i64 %13
  %15 = add nuw nsw i32 %8, 8
  store i32 %15, i32* %7, align 8
  br label %20

16:                                               ; preds = %2
  %17 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 2
  %18 = load i8*, i8** %17, align 8
  %19 = getelementptr i8, i8* %18, i64 8
  store i8* %19, i8** %17, align 8
  br label %20

20:                                               ; preds = %10, %16
  %21 = phi i8* [ %14, %10 ], [ %18, %16 ]
  %22 = bitcast i8* %21 to i32*
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds %struct.vp9_extracfg, %struct.vp9_extracfg* %3, i64 0, i32 8
  store i32 %23, i32* %24, align 4
  %25 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 1
  %26 = call fastcc i32 @validate_config(%struct.vpx_codec_alg_priv* %0, %struct.vpx_codec_enc_cfg* %25, %struct.vp9_extracfg* nonnull %3) #9
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %28, label %32

28:                                               ; preds = %20
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* nonnull align 4 %4, i64 128, i1 false) #9
  %29 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 6
  call fastcc void @set_encoder_config(%struct.VP9EncoderConfig* %29, %struct.vpx_codec_enc_cfg* %25, %struct.vp9_extracfg* %5) #9
  %30 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 7
  %31 = load %struct.VP9_COMP*, %struct.VP9_COMP** %30, align 8
  call void @vp9_change_config(%struct.VP9_COMP* %31, %struct.VP9EncoderConfig* %29) #9
  br label %32

32:                                               ; preds = %20, %28
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %4) #9
  ret i32 %26
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @ctrl_set_arnr_strength(%struct.vpx_codec_alg_priv*, %struct.__va_list_tag* nocapture) #1 {
  %3 = alloca %struct.vp9_extracfg, align 4
  %4 = bitcast %struct.vp9_extracfg* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %4) #9
  %5 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 2
  %6 = bitcast %struct.vp9_extracfg* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %4, i8* align 8 %6, i64 128, i1 false)
  %7 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 0
  %8 = load i32, i32* %7, align 8
  %9 = icmp ult i32 %8, 41
  br i1 %9, label %10, label %16

10:                                               ; preds = %2
  %11 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 3
  %12 = load i8*, i8** %11, align 8
  %13 = sext i32 %8 to i64
  %14 = getelementptr i8, i8* %12, i64 %13
  %15 = add nuw nsw i32 %8, 8
  store i32 %15, i32* %7, align 8
  br label %20

16:                                               ; preds = %2
  %17 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 2
  %18 = load i8*, i8** %17, align 8
  %19 = getelementptr i8, i8* %18, i64 8
  store i8* %19, i8** %17, align 8
  br label %20

20:                                               ; preds = %10, %16
  %21 = phi i8* [ %14, %10 ], [ %18, %16 ]
  %22 = bitcast i8* %21 to i32*
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds %struct.vp9_extracfg, %struct.vp9_extracfg* %3, i64 0, i32 9
  store i32 %23, i32* %24, align 4
  %25 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 1
  %26 = call fastcc i32 @validate_config(%struct.vpx_codec_alg_priv* %0, %struct.vpx_codec_enc_cfg* %25, %struct.vp9_extracfg* nonnull %3) #9
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %28, label %32

28:                                               ; preds = %20
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* nonnull align 4 %4, i64 128, i1 false) #9
  %29 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 6
  call fastcc void @set_encoder_config(%struct.VP9EncoderConfig* %29, %struct.vpx_codec_enc_cfg* %25, %struct.vp9_extracfg* %5) #9
  %30 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 7
  %31 = load %struct.VP9_COMP*, %struct.VP9_COMP** %30, align 8
  call void @vp9_change_config(%struct.VP9_COMP* %31, %struct.VP9EncoderConfig* %29) #9
  br label %32

32:                                               ; preds = %20, %28
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %4) #9
  ret i32 %26
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal i32 @ctrl_set_arnr_type(%struct.vpx_codec_alg_priv* nocapture readnone, %struct.__va_list_tag* nocapture readnone) #0 {
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @ctrl_set_tuning(%struct.vpx_codec_alg_priv*, %struct.__va_list_tag* nocapture) #1 {
  %3 = alloca %struct.vp9_extracfg, align 4
  %4 = bitcast %struct.vp9_extracfg* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %4) #9
  %5 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 2
  %6 = bitcast %struct.vp9_extracfg* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %4, i8* align 8 %6, i64 128, i1 false)
  %7 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 0
  %8 = load i32, i32* %7, align 8
  %9 = icmp ult i32 %8, 41
  br i1 %9, label %10, label %16

10:                                               ; preds = %2
  %11 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 3
  %12 = load i8*, i8** %11, align 8
  %13 = sext i32 %8 to i64
  %14 = getelementptr i8, i8* %12, i64 %13
  %15 = add nuw nsw i32 %8, 8
  store i32 %15, i32* %7, align 8
  br label %20

16:                                               ; preds = %2
  %17 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 2
  %18 = load i8*, i8** %17, align 8
  %19 = getelementptr i8, i8* %18, i64 8
  store i8* %19, i8** %17, align 8
  br label %20

20:                                               ; preds = %10, %16
  %21 = phi i8* [ %14, %10 ], [ %18, %16 ]
  %22 = bitcast i8* %21 to i32*
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds %struct.vp9_extracfg, %struct.vp9_extracfg* %3, i64 0, i32 12
  store i32 %23, i32* %24, align 4
  %25 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 1
  %26 = call fastcc i32 @validate_config(%struct.vpx_codec_alg_priv* %0, %struct.vpx_codec_enc_cfg* %25, %struct.vp9_extracfg* nonnull %3) #9
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %28, label %32

28:                                               ; preds = %20
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* nonnull align 4 %4, i64 128, i1 false) #9
  %29 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 6
  call fastcc void @set_encoder_config(%struct.VP9EncoderConfig* %29, %struct.vpx_codec_enc_cfg* %25, %struct.vp9_extracfg* %5) #9
  %30 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 7
  %31 = load %struct.VP9_COMP*, %struct.VP9_COMP** %30, align 8
  call void @vp9_change_config(%struct.VP9_COMP* %31, %struct.VP9EncoderConfig* %29) #9
  br label %32

32:                                               ; preds = %20, %28
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %4) #9
  ret i32 %26
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @ctrl_set_cq_level(%struct.vpx_codec_alg_priv*, %struct.__va_list_tag* nocapture) #1 {
  %3 = alloca %struct.vp9_extracfg, align 4
  %4 = bitcast %struct.vp9_extracfg* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %4) #9
  %5 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 2
  %6 = bitcast %struct.vp9_extracfg* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %4, i8* align 8 %6, i64 128, i1 false)
  %7 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 0
  %8 = load i32, i32* %7, align 8
  %9 = icmp ult i32 %8, 41
  br i1 %9, label %10, label %16

10:                                               ; preds = %2
  %11 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 3
  %12 = load i8*, i8** %11, align 8
  %13 = sext i32 %8 to i64
  %14 = getelementptr i8, i8* %12, i64 %13
  %15 = add nuw nsw i32 %8, 8
  store i32 %15, i32* %7, align 8
  br label %20

16:                                               ; preds = %2
  %17 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 2
  %18 = load i8*, i8** %17, align 8
  %19 = getelementptr i8, i8* %18, i64 8
  store i8* %19, i8** %17, align 8
  br label %20

20:                                               ; preds = %10, %16
  %21 = phi i8* [ %14, %10 ], [ %18, %16 ]
  %22 = bitcast i8* %21 to i32*
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds %struct.vp9_extracfg, %struct.vp9_extracfg* %3, i64 0, i32 13
  store i32 %23, i32* %24, align 4
  %25 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 1
  %26 = call fastcc i32 @validate_config(%struct.vpx_codec_alg_priv* %0, %struct.vpx_codec_enc_cfg* %25, %struct.vp9_extracfg* nonnull %3) #9
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %28, label %32

28:                                               ; preds = %20
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* nonnull align 4 %4, i64 128, i1 false) #9
  %29 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 6
  call fastcc void @set_encoder_config(%struct.VP9EncoderConfig* %29, %struct.vpx_codec_enc_cfg* %25, %struct.vp9_extracfg* %5) #9
  %30 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 7
  %31 = load %struct.VP9_COMP*, %struct.VP9_COMP** %30, align 8
  call void @vp9_change_config(%struct.VP9_COMP* %31, %struct.VP9EncoderConfig* %29) #9
  br label %32

32:                                               ; preds = %20, %28
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %4) #9
  ret i32 %26
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @ctrl_set_rc_max_intra_bitrate_pct(%struct.vpx_codec_alg_priv*, %struct.__va_list_tag* nocapture) #1 {
  %3 = alloca %struct.vp9_extracfg, align 4
  %4 = bitcast %struct.vp9_extracfg* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %4) #9
  %5 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 2
  %6 = bitcast %struct.vp9_extracfg* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %4, i8* align 8 %6, i64 128, i1 false)
  %7 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 0
  %8 = load i32, i32* %7, align 8
  %9 = icmp ult i32 %8, 41
  br i1 %9, label %10, label %16

10:                                               ; preds = %2
  %11 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 3
  %12 = load i8*, i8** %11, align 8
  %13 = sext i32 %8 to i64
  %14 = getelementptr i8, i8* %12, i64 %13
  %15 = add nuw nsw i32 %8, 8
  store i32 %15, i32* %7, align 8
  br label %20

16:                                               ; preds = %2
  %17 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 2
  %18 = load i8*, i8** %17, align 8
  %19 = getelementptr i8, i8* %18, i64 8
  store i8* %19, i8** %17, align 8
  br label %20

20:                                               ; preds = %10, %16
  %21 = phi i8* [ %14, %10 ], [ %18, %16 ]
  %22 = bitcast i8* %21 to i32*
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds %struct.vp9_extracfg, %struct.vp9_extracfg* %3, i64 0, i32 14
  store i32 %23, i32* %24, align 4
  %25 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 1
  %26 = call fastcc i32 @validate_config(%struct.vpx_codec_alg_priv* %0, %struct.vpx_codec_enc_cfg* %25, %struct.vp9_extracfg* nonnull %3) #9
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %28, label %32

28:                                               ; preds = %20
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* nonnull align 4 %4, i64 128, i1 false) #9
  %29 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 6
  call fastcc void @set_encoder_config(%struct.VP9EncoderConfig* %29, %struct.vpx_codec_enc_cfg* %25, %struct.vp9_extracfg* %5) #9
  %30 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 7
  %31 = load %struct.VP9_COMP*, %struct.VP9_COMP** %30, align 8
  call void @vp9_change_config(%struct.VP9_COMP* %31, %struct.VP9EncoderConfig* %29) #9
  br label %32

32:                                               ; preds = %20, %28
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %4) #9
  ret i32 %26
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @ctrl_set_rc_max_inter_bitrate_pct(%struct.vpx_codec_alg_priv*, %struct.__va_list_tag* nocapture) #1 {
  %3 = alloca %struct.vp9_extracfg, align 4
  %4 = bitcast %struct.vp9_extracfg* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %4) #9
  %5 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 2
  %6 = bitcast %struct.vp9_extracfg* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %4, i8* align 8 %6, i64 128, i1 false)
  %7 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 0
  %8 = load i32, i32* %7, align 8
  %9 = icmp ult i32 %8, 41
  br i1 %9, label %10, label %16

10:                                               ; preds = %2
  %11 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 3
  %12 = load i8*, i8** %11, align 8
  %13 = sext i32 %8 to i64
  %14 = getelementptr i8, i8* %12, i64 %13
  %15 = add nuw nsw i32 %8, 8
  store i32 %15, i32* %7, align 8
  br label %20

16:                                               ; preds = %2
  %17 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 2
  %18 = load i8*, i8** %17, align 8
  %19 = getelementptr i8, i8* %18, i64 8
  store i8* %19, i8** %17, align 8
  br label %20

20:                                               ; preds = %10, %16
  %21 = phi i8* [ %14, %10 ], [ %18, %16 ]
  %22 = bitcast i8* %21 to i32*
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds %struct.vp9_extracfg, %struct.vp9_extracfg* %3, i64 0, i32 15
  store i32 %23, i32* %24, align 4
  %25 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 1
  %26 = call fastcc i32 @validate_config(%struct.vpx_codec_alg_priv* %0, %struct.vpx_codec_enc_cfg* %25, %struct.vp9_extracfg* nonnull %3) #9
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %28, label %32

28:                                               ; preds = %20
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* nonnull align 4 %4, i64 128, i1 false) #9
  %29 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 6
  call fastcc void @set_encoder_config(%struct.VP9EncoderConfig* %29, %struct.vpx_codec_enc_cfg* %25, %struct.vp9_extracfg* %5) #9
  %30 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 7
  %31 = load %struct.VP9_COMP*, %struct.VP9_COMP** %30, align 8
  call void @vp9_change_config(%struct.VP9_COMP* %31, %struct.VP9EncoderConfig* %29) #9
  br label %32

32:                                               ; preds = %20, %28
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %4) #9
  ret i32 %26
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @ctrl_set_rc_gf_cbr_boost_pct(%struct.vpx_codec_alg_priv*, %struct.__va_list_tag* nocapture) #1 {
  %3 = alloca %struct.vp9_extracfg, align 4
  %4 = bitcast %struct.vp9_extracfg* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %4) #9
  %5 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 2
  %6 = bitcast %struct.vp9_extracfg* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %4, i8* align 8 %6, i64 128, i1 false)
  %7 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 0
  %8 = load i32, i32* %7, align 8
  %9 = icmp ult i32 %8, 41
  br i1 %9, label %10, label %16

10:                                               ; preds = %2
  %11 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 3
  %12 = load i8*, i8** %11, align 8
  %13 = sext i32 %8 to i64
  %14 = getelementptr i8, i8* %12, i64 %13
  %15 = add nuw nsw i32 %8, 8
  store i32 %15, i32* %7, align 8
  br label %20

16:                                               ; preds = %2
  %17 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 2
  %18 = load i8*, i8** %17, align 8
  %19 = getelementptr i8, i8* %18, i64 8
  store i8* %19, i8** %17, align 8
  br label %20

20:                                               ; preds = %10, %16
  %21 = phi i8* [ %14, %10 ], [ %18, %16 ]
  %22 = bitcast i8* %21 to i32*
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds %struct.vp9_extracfg, %struct.vp9_extracfg* %3, i64 0, i32 16
  store i32 %23, i32* %24, align 4
  %25 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 1
  %26 = call fastcc i32 @validate_config(%struct.vpx_codec_alg_priv* %0, %struct.vpx_codec_enc_cfg* %25, %struct.vp9_extracfg* nonnull %3) #9
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %28, label %32

28:                                               ; preds = %20
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* nonnull align 4 %4, i64 128, i1 false) #9
  %29 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 6
  call fastcc void @set_encoder_config(%struct.VP9EncoderConfig* %29, %struct.vpx_codec_enc_cfg* %25, %struct.vp9_extracfg* %5) #9
  %30 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 7
  %31 = load %struct.VP9_COMP*, %struct.VP9_COMP** %30, align 8
  call void @vp9_change_config(%struct.VP9_COMP* %31, %struct.VP9EncoderConfig* %29) #9
  br label %32

32:                                               ; preds = %20, %28
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %4) #9
  ret i32 %26
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @ctrl_set_lossless(%struct.vpx_codec_alg_priv*, %struct.__va_list_tag* nocapture) #1 {
  %3 = alloca %struct.vp9_extracfg, align 4
  %4 = bitcast %struct.vp9_extracfg* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %4) #9
  %5 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 2
  %6 = bitcast %struct.vp9_extracfg* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %4, i8* align 8 %6, i64 128, i1 false)
  %7 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 0
  %8 = load i32, i32* %7, align 8
  %9 = icmp ult i32 %8, 41
  br i1 %9, label %10, label %16

10:                                               ; preds = %2
  %11 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 3
  %12 = load i8*, i8** %11, align 8
  %13 = sext i32 %8 to i64
  %14 = getelementptr i8, i8* %12, i64 %13
  %15 = add nuw nsw i32 %8, 8
  store i32 %15, i32* %7, align 8
  br label %20

16:                                               ; preds = %2
  %17 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 2
  %18 = load i8*, i8** %17, align 8
  %19 = getelementptr i8, i8* %18, i64 8
  store i8* %19, i8** %17, align 8
  br label %20

20:                                               ; preds = %10, %16
  %21 = phi i8* [ %14, %10 ], [ %18, %16 ]
  %22 = bitcast i8* %21 to i32*
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds %struct.vp9_extracfg, %struct.vp9_extracfg* %3, i64 0, i32 17
  store i32 %23, i32* %24, align 4
  %25 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 1
  %26 = call fastcc i32 @validate_config(%struct.vpx_codec_alg_priv* %0, %struct.vpx_codec_enc_cfg* %25, %struct.vp9_extracfg* nonnull %3) #9
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %28, label %32

28:                                               ; preds = %20
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* nonnull align 4 %4, i64 128, i1 false) #9
  %29 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 6
  call fastcc void @set_encoder_config(%struct.VP9EncoderConfig* %29, %struct.vpx_codec_enc_cfg* %25, %struct.vp9_extracfg* %5) #9
  %30 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 7
  %31 = load %struct.VP9_COMP*, %struct.VP9_COMP** %30, align 8
  call void @vp9_change_config(%struct.VP9_COMP* %31, %struct.VP9EncoderConfig* %29) #9
  br label %32

32:                                               ; preds = %20, %28
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %4) #9
  ret i32 %26
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @ctrl_set_frame_parallel_decoding_mode(%struct.vpx_codec_alg_priv*, %struct.__va_list_tag* nocapture) #1 {
  %3 = alloca %struct.vp9_extracfg, align 4
  %4 = bitcast %struct.vp9_extracfg* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %4) #9
  %5 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 2
  %6 = bitcast %struct.vp9_extracfg* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %4, i8* align 8 %6, i64 128, i1 false)
  %7 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 0
  %8 = load i32, i32* %7, align 8
  %9 = icmp ult i32 %8, 41
  br i1 %9, label %10, label %16

10:                                               ; preds = %2
  %11 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 3
  %12 = load i8*, i8** %11, align 8
  %13 = sext i32 %8 to i64
  %14 = getelementptr i8, i8* %12, i64 %13
  %15 = add nuw nsw i32 %8, 8
  store i32 %15, i32* %7, align 8
  br label %20

16:                                               ; preds = %2
  %17 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 2
  %18 = load i8*, i8** %17, align 8
  %19 = getelementptr i8, i8* %18, i64 8
  store i8* %19, i8** %17, align 8
  br label %20

20:                                               ; preds = %10, %16
  %21 = phi i8* [ %14, %10 ], [ %18, %16 ]
  %22 = bitcast i8* %21 to i32*
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds %struct.vp9_extracfg, %struct.vp9_extracfg* %3, i64 0, i32 19
  store i32 %23, i32* %24, align 4
  %25 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 1
  %26 = call fastcc i32 @validate_config(%struct.vpx_codec_alg_priv* %0, %struct.vpx_codec_enc_cfg* %25, %struct.vp9_extracfg* nonnull %3) #9
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %28, label %32

28:                                               ; preds = %20
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* nonnull align 4 %4, i64 128, i1 false) #9
  %29 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 6
  call fastcc void @set_encoder_config(%struct.VP9EncoderConfig* %29, %struct.vpx_codec_enc_cfg* %25, %struct.vp9_extracfg* %5) #9
  %30 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 7
  %31 = load %struct.VP9_COMP*, %struct.VP9_COMP** %30, align 8
  call void @vp9_change_config(%struct.VP9_COMP* %31, %struct.VP9EncoderConfig* %29) #9
  br label %32

32:                                               ; preds = %20, %28
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %4) #9
  ret i32 %26
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @ctrl_set_aq_mode(%struct.vpx_codec_alg_priv*, %struct.__va_list_tag* nocapture) #1 {
  %3 = alloca %struct.vp9_extracfg, align 4
  %4 = bitcast %struct.vp9_extracfg* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %4) #9
  %5 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 2
  %6 = bitcast %struct.vp9_extracfg* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %4, i8* align 8 %6, i64 128, i1 false)
  %7 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 0
  %8 = load i32, i32* %7, align 8
  %9 = icmp ult i32 %8, 41
  br i1 %9, label %10, label %16

10:                                               ; preds = %2
  %11 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 3
  %12 = load i8*, i8** %11, align 8
  %13 = sext i32 %8 to i64
  %14 = getelementptr i8, i8* %12, i64 %13
  %15 = add nuw nsw i32 %8, 8
  store i32 %15, i32* %7, align 8
  br label %20

16:                                               ; preds = %2
  %17 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 2
  %18 = load i8*, i8** %17, align 8
  %19 = getelementptr i8, i8* %18, i64 8
  store i8* %19, i8** %17, align 8
  br label %20

20:                                               ; preds = %10, %16
  %21 = phi i8* [ %14, %10 ], [ %18, %16 ]
  %22 = bitcast i8* %21 to i32*
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds %struct.vp9_extracfg, %struct.vp9_extracfg* %3, i64 0, i32 20
  store i32 %23, i32* %24, align 4
  %25 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 1
  %26 = call fastcc i32 @validate_config(%struct.vpx_codec_alg_priv* %0, %struct.vpx_codec_enc_cfg* %25, %struct.vp9_extracfg* nonnull %3) #9
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %28, label %32

28:                                               ; preds = %20
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* nonnull align 4 %4, i64 128, i1 false) #9
  %29 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 6
  call fastcc void @set_encoder_config(%struct.VP9EncoderConfig* %29, %struct.vpx_codec_enc_cfg* %25, %struct.vp9_extracfg* %5) #9
  %30 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 7
  %31 = load %struct.VP9_COMP*, %struct.VP9_COMP** %30, align 8
  call void @vp9_change_config(%struct.VP9_COMP* %31, %struct.VP9EncoderConfig* %29) #9
  br label %32

32:                                               ; preds = %20, %28
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %4) #9
  ret i32 %26
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @ctrl_set_alt_ref_aq(%struct.vpx_codec_alg_priv*, %struct.__va_list_tag* nocapture) #1 {
  %3 = alloca %struct.vp9_extracfg, align 4
  %4 = bitcast %struct.vp9_extracfg* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %4) #9
  %5 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 2
  %6 = bitcast %struct.vp9_extracfg* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %4, i8* align 8 %6, i64 128, i1 false)
  %7 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 0
  %8 = load i32, i32* %7, align 8
  %9 = icmp ult i32 %8, 41
  br i1 %9, label %10, label %16

10:                                               ; preds = %2
  %11 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 3
  %12 = load i8*, i8** %11, align 8
  %13 = sext i32 %8 to i64
  %14 = getelementptr i8, i8* %12, i64 %13
  %15 = add nuw nsw i32 %8, 8
  store i32 %15, i32* %7, align 8
  br label %20

16:                                               ; preds = %2
  %17 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 2
  %18 = load i8*, i8** %17, align 8
  %19 = getelementptr i8, i8* %18, i64 8
  store i8* %19, i8** %17, align 8
  br label %20

20:                                               ; preds = %10, %16
  %21 = phi i8* [ %14, %10 ], [ %18, %16 ]
  %22 = bitcast i8* %21 to i32*
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds %struct.vp9_extracfg, %struct.vp9_extracfg* %3, i64 0, i32 21
  store i32 %23, i32* %24, align 4
  %25 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 1
  %26 = call fastcc i32 @validate_config(%struct.vpx_codec_alg_priv* %0, %struct.vpx_codec_enc_cfg* %25, %struct.vp9_extracfg* nonnull %3) #9
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %28, label %32

28:                                               ; preds = %20
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* nonnull align 4 %4, i64 128, i1 false) #9
  %29 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 6
  call fastcc void @set_encoder_config(%struct.VP9EncoderConfig* %29, %struct.vpx_codec_enc_cfg* %25, %struct.vp9_extracfg* %5) #9
  %30 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 7
  %31 = load %struct.VP9_COMP*, %struct.VP9_COMP** %30, align 8
  call void @vp9_change_config(%struct.VP9_COMP* %31, %struct.VP9EncoderConfig* %29) #9
  br label %32

32:                                               ; preds = %20, %28
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %4) #9
  ret i32 %26
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @ctrl_set_frame_periodic_boost(%struct.vpx_codec_alg_priv*, %struct.__va_list_tag* nocapture) #1 {
  %3 = alloca %struct.vp9_extracfg, align 4
  %4 = bitcast %struct.vp9_extracfg* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %4) #9
  %5 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 2
  %6 = bitcast %struct.vp9_extracfg* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %4, i8* align 8 %6, i64 128, i1 false)
  %7 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 0
  %8 = load i32, i32* %7, align 8
  %9 = icmp ult i32 %8, 41
  br i1 %9, label %10, label %16

10:                                               ; preds = %2
  %11 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 3
  %12 = load i8*, i8** %11, align 8
  %13 = sext i32 %8 to i64
  %14 = getelementptr i8, i8* %12, i64 %13
  %15 = add nuw nsw i32 %8, 8
  store i32 %15, i32* %7, align 8
  br label %20

16:                                               ; preds = %2
  %17 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 2
  %18 = load i8*, i8** %17, align 8
  %19 = getelementptr i8, i8* %18, i64 8
  store i8* %19, i8** %17, align 8
  br label %20

20:                                               ; preds = %10, %16
  %21 = phi i8* [ %14, %10 ], [ %18, %16 ]
  %22 = bitcast i8* %21 to i32*
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds %struct.vp9_extracfg, %struct.vp9_extracfg* %3, i64 0, i32 22
  store i32 %23, i32* %24, align 4
  %25 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 1
  %26 = call fastcc i32 @validate_config(%struct.vpx_codec_alg_priv* %0, %struct.vpx_codec_enc_cfg* %25, %struct.vp9_extracfg* nonnull %3) #9
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %28, label %32

28:                                               ; preds = %20
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* nonnull align 4 %4, i64 128, i1 false) #9
  %29 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 6
  call fastcc void @set_encoder_config(%struct.VP9EncoderConfig* %29, %struct.vpx_codec_enc_cfg* %25, %struct.vp9_extracfg* %5) #9
  %30 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 7
  %31 = load %struct.VP9_COMP*, %struct.VP9_COMP** %30, align 8
  call void @vp9_change_config(%struct.VP9_COMP* %31, %struct.VP9EncoderConfig* %29) #9
  br label %32

32:                                               ; preds = %20, %28
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %4) #9
  ret i32 %26
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @ctrl_set_svc(%struct.vpx_codec_alg_priv* nocapture readonly, %struct.__va_list_tag* nocapture) #1 {
  %3 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = icmp ult i32 %4, 41
  br i1 %5, label %6, label %12

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 3
  %8 = load i8*, i8** %7, align 8
  %9 = sext i32 %4 to i64
  %10 = getelementptr i8, i8* %8, i64 %9
  %11 = add nuw nsw i32 %4, 8
  store i32 %11, i32* %3, align 8
  br label %16

12:                                               ; preds = %2
  %13 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 2
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr i8, i8* %14, i64 8
  store i8* %15, i8** %13, align 8
  br label %16

16:                                               ; preds = %12, %6
  %17 = phi i8* [ %10, %6 ], [ %14, %12 ]
  %18 = bitcast i8* %17 to i32*
  %19 = load i32, i32* %18, align 4
  %20 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 7
  %21 = load %struct.VP9_COMP*, %struct.VP9_COMP** %20, align 8
  tail call void @vp9_set_svc(%struct.VP9_COMP* %21, i32 %19) #9
  %22 = icmp eq i32 %19, 1
  br i1 %22, label %23, label %36

23:                                               ; preds = %16
  %24 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 1, i32 9
  %25 = load i32, i32* %24, align 8
  %26 = add i32 %25, -1
  %27 = icmp ult i32 %26, 2
  br i1 %27, label %28, label %36

28:                                               ; preds = %23
  %29 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 1, i32 35
  %30 = load i32, i32* %29, align 4
  %31 = icmp ugt i32 %30, 1
  br i1 %31, label %32, label %36

32:                                               ; preds = %28
  %33 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 1, i32 38
  %34 = load i32, i32* %33, align 8
  %35 = icmp ugt i32 %34, 1
  br i1 %35, label %38, label %36

36:                                               ; preds = %23, %32, %28, %16
  %37 = load %struct.VP9_COMP*, %struct.VP9_COMP** %20, align 8
  tail call void @vp9_set_row_mt(%struct.VP9_COMP* %37) #9
  br label %38

38:                                               ; preds = %32, %36
  %39 = phi i32 [ 0, %36 ], [ 8, %32 ]
  ret i32 %39
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i32 @ctrl_set_svc_parameters(%struct.vpx_codec_alg_priv* nocapture readonly, %struct.__va_list_tag* nocapture) #6 {
  %3 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 7
  %4 = load %struct.VP9_COMP*, %struct.VP9_COMP** %3, align 8
  %5 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 0
  %6 = load i32, i32* %5, align 8
  %7 = icmp ult i32 %6, 41
  br i1 %7, label %8, label %14

8:                                                ; preds = %2
  %9 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 3
  %10 = load i8*, i8** %9, align 8
  %11 = sext i32 %6 to i64
  %12 = getelementptr i8, i8* %10, i64 %11
  %13 = add nuw nsw i32 %6, 8
  store i32 %13, i32* %5, align 8
  br label %18

14:                                               ; preds = %2
  %15 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 2
  %16 = load i8*, i8** %15, align 8
  %17 = getelementptr i8, i8* %16, i64 8
  store i8* %17, i8** %15, align 8
  br label %18

18:                                               ; preds = %14, %8
  %19 = phi i8* [ %12, %8 ], [ %16, %14 ]
  %20 = bitcast i8* %19 to %struct.vpx_svc_parameters**
  %21 = load %struct.vpx_svc_parameters*, %struct.vpx_svc_parameters** %20, align 8
  %22 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %4, i64 0, i32 104, i32 2
  %23 = load i32, i32* %22, align 8
  %24 = icmp sgt i32 %23, 0
  br i1 %24, label %25, label %71

25:                                               ; preds = %18
  %26 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %4, i64 0, i32 104, i32 3
  %27 = load i32, i32* %26, align 4
  br label %28

28:                                               ; preds = %25, %65
  %29 = phi i32 [ %23, %25 ], [ %66, %65 ]
  %30 = phi i32 [ %27, %25 ], [ %67, %65 ]
  %31 = phi i64 [ 0, %25 ], [ %68, %65 ]
  %32 = icmp sgt i32 %30, 0
  br i1 %32, label %33, label %65

33:                                               ; preds = %28
  %34 = getelementptr inbounds %struct.vpx_svc_parameters, %struct.vpx_svc_parameters* %21, i64 0, i32 2, i64 %31
  %35 = getelementptr inbounds %struct.vpx_svc_parameters, %struct.vpx_svc_parameters* %21, i64 0, i32 3, i64 %31
  %36 = getelementptr inbounds %struct.vpx_svc_parameters, %struct.vpx_svc_parameters* %21, i64 0, i32 4, i64 %31
  %37 = getelementptr inbounds %struct.vpx_svc_parameters, %struct.vpx_svc_parameters* %21, i64 0, i32 6, i64 %31
  %38 = trunc i64 %31 to i32
  br label %39

39:                                               ; preds = %33, %39
  %40 = phi i32 [ %30, %33 ], [ %61, %39 ]
  %41 = phi i32 [ 0, %33 ], [ %60, %39 ]
  %42 = mul nsw i32 %40, %38
  %43 = add nsw i32 %42, %41
  %44 = sext i32 %43 to i64
  %45 = getelementptr inbounds %struct.vpx_svc_parameters, %struct.vpx_svc_parameters* %21, i64 0, i32 0, i64 %44
  %46 = load i32, i32* %45, align 4
  %47 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %4, i64 0, i32 104, i32 12, i64 %44, i32 5
  store i32 %46, i32* %47, align 4
  %48 = getelementptr inbounds %struct.vpx_svc_parameters, %struct.vpx_svc_parameters* %21, i64 0, i32 1, i64 %44
  %49 = load i32, i32* %48, align 4
  %50 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %4, i64 0, i32 104, i32 12, i64 %44, i32 6
  store i32 %49, i32* %50, align 8
  %51 = load i32, i32* %34, align 4
  %52 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %4, i64 0, i32 104, i32 12, i64 %44, i32 7
  store i32 %51, i32* %52, align 4
  %53 = load i32, i32* %35, align 4
  %54 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %4, i64 0, i32 104, i32 12, i64 %44, i32 8
  store i32 %53, i32* %54, align 8
  %55 = load i32, i32* %36, align 4
  %56 = trunc i32 %55 to i8
  %57 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %4, i64 0, i32 104, i32 12, i64 %44, i32 29
  store i8 %56, i8* %57, align 4
  %58 = load i32, i32* %37, align 4
  %59 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %4, i64 0, i32 104, i32 12, i64 %44, i32 30
  store i32 %58, i32* %59, align 8
  %60 = add nuw nsw i32 %41, 1
  %61 = load i32, i32* %26, align 4
  %62 = icmp slt i32 %60, %61
  br i1 %62, label %39, label %63

63:                                               ; preds = %39
  %64 = load i32, i32* %22, align 8
  br label %65

65:                                               ; preds = %63, %28
  %66 = phi i32 [ %64, %63 ], [ %29, %28 ]
  %67 = phi i32 [ %61, %63 ], [ %30, %28 ]
  %68 = add nuw nsw i64 %31, 1
  %69 = sext i32 %66 to i64
  %70 = icmp slt i64 %68, %69
  br i1 %70, label %28, label %71

71:                                               ; preds = %65, %18
  ret i32 0
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i32 @ctrl_register_cx_callback(%struct.vpx_codec_alg_priv* nocapture, %struct.__va_list_tag* nocapture) #6 {
  %3 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = icmp ult i32 %4, 41
  br i1 %5, label %6, label %12

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 3
  %8 = load i8*, i8** %7, align 8
  %9 = sext i32 %4 to i64
  %10 = getelementptr i8, i8* %8, i64 %9
  %11 = add nuw nsw i32 %4, 8
  store i32 %11, i32* %3, align 8
  br label %16

12:                                               ; preds = %2
  %13 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 2
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr i8, i8* %14, i64 8
  store i8* %15, i8** %13, align 8
  br label %16

16:                                               ; preds = %12, %6
  %17 = phi i8* [ %10, %6 ], [ %14, %12 ]
  %18 = bitcast i8* %17 to %struct.vpx_codec_enc_output_cx_cb_pair**
  %19 = load %struct.vpx_codec_enc_output_cx_cb_pair*, %struct.vpx_codec_enc_output_cx_cb_pair** %18, align 8
  %20 = bitcast %struct.vpx_codec_enc_output_cx_cb_pair* %19 to i64*
  %21 = load i64, i64* %20, align 8
  %22 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 20
  %23 = bitcast %struct.vpx_codec_enc_output_cx_cb_pair* %22 to i64*
  store i64 %21, i64* %23, align 8
  %24 = getelementptr inbounds %struct.vpx_codec_enc_output_cx_cb_pair, %struct.vpx_codec_enc_output_cx_cb_pair* %19, i64 0, i32 1
  %25 = bitcast i8** %24 to i64*
  %26 = load i64, i64* %25, align 8
  %27 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 20, i32 1
  %28 = bitcast i8** %27 to i64*
  store i64 %26, i64* %28, align 8
  ret i32 0
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i32 @ctrl_set_svc_layer_id(%struct.vpx_codec_alg_priv* nocapture readonly, %struct.__va_list_tag* nocapture) #6 {
  %3 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = icmp ult i32 %4, 41
  br i1 %5, label %6, label %12

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 3
  %8 = load i8*, i8** %7, align 8
  %9 = sext i32 %4 to i64
  %10 = getelementptr i8, i8* %8, i64 %9
  %11 = add nuw nsw i32 %4, 8
  store i32 %11, i32* %3, align 8
  br label %16

12:                                               ; preds = %2
  %13 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 2
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr i8, i8* %14, i64 8
  store i8* %15, i8** %13, align 8
  br label %16

16:                                               ; preds = %12, %6
  %17 = phi i8* [ %10, %6 ], [ %14, %12 ]
  %18 = bitcast i8* %17 to %struct.vpx_svc_layer_id**
  %19 = load %struct.vpx_svc_layer_id*, %struct.vpx_svc_layer_id** %18, align 8
  %20 = bitcast %struct.vpx_svc_layer_id* %19 to i8*
  %21 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 7
  %22 = load %struct.VP9_COMP*, %struct.VP9_COMP** %21, align 8
  %23 = bitcast %struct.VP9_COMP* %22 to i8*
  %24 = getelementptr inbounds %struct.vpx_svc_layer_id, %struct.vpx_svc_layer_id* %19, i64 0, i32 0
  %25 = load i32, i32* %24, align 4
  %26 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %22, i64 0, i32 104, i32 4
  store i32 %25, i32* %26, align 8
  %27 = load i32, i32* %24, align 4
  %28 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %22, i64 0, i32 104, i32 62
  store i32 %27, i32* %28, align 8
  %29 = getelementptr inbounds %struct.vpx_svc_layer_id, %struct.vpx_svc_layer_id* %19, i64 0, i32 1
  %30 = load i32, i32* %29, align 4
  %31 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %22, i64 0, i32 104, i32 1
  store i32 %30, i32* %31, align 4
  %32 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %22, i64 0, i32 104, i32 2
  %33 = load i32, i32* %32, align 8
  %34 = icmp sgt i32 %33, 0
  br i1 %34, label %35, label %139

35:                                               ; preds = %16
  %36 = sext i32 %33 to i64
  %37 = icmp ult i32 %33, 8
  br i1 %37, label %130, label %38

38:                                               ; preds = %35
  %39 = getelementptr %struct.VP9_COMP, %struct.VP9_COMP* %22, i64 0, i32 104, i32 61, i64 0
  %40 = bitcast i32* %39 to i8*
  %41 = shl nsw i64 %36, 2
  %42 = add nsw i64 %41, 833084
  %43 = getelementptr i8, i8* %23, i64 %42
  %44 = getelementptr %struct.vpx_svc_layer_id, %struct.vpx_svc_layer_id* %19, i64 0, i32 2, i64 0
  %45 = bitcast i32* %44 to i8*
  %46 = add nsw i64 %41, 8
  %47 = getelementptr i8, i8* %20, i64 %46
  %48 = icmp ugt i8* %47, %40
  %49 = icmp ugt i8* %43, %45
  %50 = and i1 %48, %49
  br i1 %50, label %130, label %51

51:                                               ; preds = %38
  %52 = and i64 %36, -8
  %53 = add nsw i64 %52, -8
  %54 = lshr exact i64 %53, 3
  %55 = add nuw nsw i64 %54, 1
  %56 = and i64 %55, 3
  %57 = icmp ult i64 %53, 24
  br i1 %57, label %109, label %58

58:                                               ; preds = %51
  %59 = sub nsw i64 %55, %56
  br label %60

60:                                               ; preds = %60, %58
  %61 = phi i64 [ 0, %58 ], [ %106, %60 ]
  %62 = phi i64 [ %59, %58 ], [ %107, %60 ]
  %63 = getelementptr inbounds %struct.vpx_svc_layer_id, %struct.vpx_svc_layer_id* %19, i64 0, i32 2, i64 %61
  %64 = bitcast i32* %63 to <4 x i32>*
  %65 = load <4 x i32>, <4 x i32>* %64, align 4, !alias.scope !8
  %66 = getelementptr inbounds i32, i32* %63, i64 4
  %67 = bitcast i32* %66 to <4 x i32>*
  %68 = load <4 x i32>, <4 x i32>* %67, align 4, !alias.scope !8
  %69 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %22, i64 0, i32 104, i32 61, i64 %61
  %70 = bitcast i32* %69 to <4 x i32>*
  store <4 x i32> %65, <4 x i32>* %70, align 4, !alias.scope !11, !noalias !8
  %71 = getelementptr inbounds i32, i32* %69, i64 4
  %72 = bitcast i32* %71 to <4 x i32>*
  store <4 x i32> %68, <4 x i32>* %72, align 4, !alias.scope !11, !noalias !8
  %73 = or i64 %61, 8
  %74 = getelementptr inbounds %struct.vpx_svc_layer_id, %struct.vpx_svc_layer_id* %19, i64 0, i32 2, i64 %73
  %75 = bitcast i32* %74 to <4 x i32>*
  %76 = load <4 x i32>, <4 x i32>* %75, align 4, !alias.scope !8
  %77 = getelementptr inbounds i32, i32* %74, i64 4
  %78 = bitcast i32* %77 to <4 x i32>*
  %79 = load <4 x i32>, <4 x i32>* %78, align 4, !alias.scope !8
  %80 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %22, i64 0, i32 104, i32 61, i64 %73
  %81 = bitcast i32* %80 to <4 x i32>*
  store <4 x i32> %76, <4 x i32>* %81, align 4, !alias.scope !11, !noalias !8
  %82 = getelementptr inbounds i32, i32* %80, i64 4
  %83 = bitcast i32* %82 to <4 x i32>*
  store <4 x i32> %79, <4 x i32>* %83, align 4, !alias.scope !11, !noalias !8
  %84 = or i64 %61, 16
  %85 = getelementptr inbounds %struct.vpx_svc_layer_id, %struct.vpx_svc_layer_id* %19, i64 0, i32 2, i64 %84
  %86 = bitcast i32* %85 to <4 x i32>*
  %87 = load <4 x i32>, <4 x i32>* %86, align 4, !alias.scope !8
  %88 = getelementptr inbounds i32, i32* %85, i64 4
  %89 = bitcast i32* %88 to <4 x i32>*
  %90 = load <4 x i32>, <4 x i32>* %89, align 4, !alias.scope !8
  %91 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %22, i64 0, i32 104, i32 61, i64 %84
  %92 = bitcast i32* %91 to <4 x i32>*
  store <4 x i32> %87, <4 x i32>* %92, align 4, !alias.scope !11, !noalias !8
  %93 = getelementptr inbounds i32, i32* %91, i64 4
  %94 = bitcast i32* %93 to <4 x i32>*
  store <4 x i32> %90, <4 x i32>* %94, align 4, !alias.scope !11, !noalias !8
  %95 = or i64 %61, 24
  %96 = getelementptr inbounds %struct.vpx_svc_layer_id, %struct.vpx_svc_layer_id* %19, i64 0, i32 2, i64 %95
  %97 = bitcast i32* %96 to <4 x i32>*
  %98 = load <4 x i32>, <4 x i32>* %97, align 4, !alias.scope !8
  %99 = getelementptr inbounds i32, i32* %96, i64 4
  %100 = bitcast i32* %99 to <4 x i32>*
  %101 = load <4 x i32>, <4 x i32>* %100, align 4, !alias.scope !8
  %102 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %22, i64 0, i32 104, i32 61, i64 %95
  %103 = bitcast i32* %102 to <4 x i32>*
  store <4 x i32> %98, <4 x i32>* %103, align 4, !alias.scope !11, !noalias !8
  %104 = getelementptr inbounds i32, i32* %102, i64 4
  %105 = bitcast i32* %104 to <4 x i32>*
  store <4 x i32> %101, <4 x i32>* %105, align 4, !alias.scope !11, !noalias !8
  %106 = add i64 %61, 32
  %107 = add i64 %62, -4
  %108 = icmp eq i64 %107, 0
  br i1 %108, label %109, label %60, !llvm.loop !13

109:                                              ; preds = %60, %51
  %110 = phi i64 [ 0, %51 ], [ %106, %60 ]
  %111 = icmp eq i64 %56, 0
  br i1 %111, label %128, label %112

112:                                              ; preds = %109, %112
  %113 = phi i64 [ %125, %112 ], [ %110, %109 ]
  %114 = phi i64 [ %126, %112 ], [ %56, %109 ]
  %115 = getelementptr inbounds %struct.vpx_svc_layer_id, %struct.vpx_svc_layer_id* %19, i64 0, i32 2, i64 %113
  %116 = bitcast i32* %115 to <4 x i32>*
  %117 = load <4 x i32>, <4 x i32>* %116, align 4, !alias.scope !8
  %118 = getelementptr inbounds i32, i32* %115, i64 4
  %119 = bitcast i32* %118 to <4 x i32>*
  %120 = load <4 x i32>, <4 x i32>* %119, align 4, !alias.scope !8
  %121 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %22, i64 0, i32 104, i32 61, i64 %113
  %122 = bitcast i32* %121 to <4 x i32>*
  store <4 x i32> %117, <4 x i32>* %122, align 4, !alias.scope !11, !noalias !8
  %123 = getelementptr inbounds i32, i32* %121, i64 4
  %124 = bitcast i32* %123 to <4 x i32>*
  store <4 x i32> %120, <4 x i32>* %124, align 4, !alias.scope !11, !noalias !8
  %125 = add i64 %113, 8
  %126 = add i64 %114, -1
  %127 = icmp eq i64 %126, 0
  br i1 %127, label %128, label %112, !llvm.loop !15

128:                                              ; preds = %112, %109
  %129 = icmp eq i64 %52, %36
  br i1 %129, label %139, label %130

130:                                              ; preds = %128, %38, %35
  %131 = phi i64 [ 0, %38 ], [ 0, %35 ], [ %52, %128 ]
  br label %132

132:                                              ; preds = %130, %132
  %133 = phi i64 [ %137, %132 ], [ %131, %130 ]
  %134 = getelementptr inbounds %struct.vpx_svc_layer_id, %struct.vpx_svc_layer_id* %19, i64 0, i32 2, i64 %133
  %135 = load i32, i32* %134, align 4
  %136 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %22, i64 0, i32 104, i32 61, i64 %133
  store i32 %135, i32* %136, align 4
  %137 = add nuw nsw i64 %133, 1
  %138 = icmp slt i64 %137, %36
  br i1 %138, label %132, label %139, !llvm.loop !17

139:                                              ; preds = %132, %128, %16
  %140 = icmp slt i32 %30, 0
  br i1 %140, label %146, label %141

141:                                              ; preds = %139
  %142 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 1, i32 38
  %143 = load i32, i32* %142, align 8
  %144 = icmp slt i32 %30, %143
  %145 = select i1 %144, i32 0, i32 8
  ret i32 %145

146:                                              ; preds = %139
  ret i32 8
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @ctrl_set_tune_content(%struct.vpx_codec_alg_priv*, %struct.__va_list_tag* nocapture) #1 {
  %3 = alloca %struct.vp9_extracfg, align 4
  %4 = bitcast %struct.vp9_extracfg* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %4) #9
  %5 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 2
  %6 = bitcast %struct.vp9_extracfg* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %4, i8* align 8 %6, i64 128, i1 false)
  %7 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 0
  %8 = load i32, i32* %7, align 8
  %9 = icmp ult i32 %8, 41
  br i1 %9, label %10, label %16

10:                                               ; preds = %2
  %11 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 3
  %12 = load i8*, i8** %11, align 8
  %13 = sext i32 %8 to i64
  %14 = getelementptr i8, i8* %12, i64 %13
  %15 = add nuw nsw i32 %8, 8
  store i32 %15, i32* %7, align 8
  br label %20

16:                                               ; preds = %2
  %17 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 2
  %18 = load i8*, i8** %17, align 8
  %19 = getelementptr i8, i8* %18, i64 8
  store i8* %19, i8** %17, align 8
  br label %20

20:                                               ; preds = %10, %16
  %21 = phi i8* [ %14, %10 ], [ %18, %16 ]
  %22 = bitcast i8* %21 to i32*
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds %struct.vp9_extracfg, %struct.vp9_extracfg* %3, i64 0, i32 24
  store i32 %23, i32* %24, align 4
  %25 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 1
  %26 = call fastcc i32 @validate_config(%struct.vpx_codec_alg_priv* %0, %struct.vpx_codec_enc_cfg* %25, %struct.vp9_extracfg* nonnull %3) #9
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %28, label %32

28:                                               ; preds = %20
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* nonnull align 4 %4, i64 128, i1 false) #9
  %29 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 6
  call fastcc void @set_encoder_config(%struct.VP9EncoderConfig* %29, %struct.vpx_codec_enc_cfg* %25, %struct.vp9_extracfg* %5) #9
  %30 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 7
  %31 = load %struct.VP9_COMP*, %struct.VP9_COMP** %30, align 8
  call void @vp9_change_config(%struct.VP9_COMP* %31, %struct.VP9EncoderConfig* %29) #9
  br label %32

32:                                               ; preds = %20, %28
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %4) #9
  ret i32 %26
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @ctrl_set_color_space(%struct.vpx_codec_alg_priv*, %struct.__va_list_tag* nocapture) #1 {
  %3 = alloca %struct.vp9_extracfg, align 4
  %4 = bitcast %struct.vp9_extracfg* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %4) #9
  %5 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 2
  %6 = bitcast %struct.vp9_extracfg* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %4, i8* align 8 %6, i64 128, i1 false)
  %7 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 0
  %8 = load i32, i32* %7, align 8
  %9 = icmp ult i32 %8, 41
  br i1 %9, label %10, label %16

10:                                               ; preds = %2
  %11 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 3
  %12 = load i8*, i8** %11, align 8
  %13 = sext i32 %8 to i64
  %14 = getelementptr i8, i8* %12, i64 %13
  %15 = add nuw nsw i32 %8, 8
  store i32 %15, i32* %7, align 8
  br label %20

16:                                               ; preds = %2
  %17 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 2
  %18 = load i8*, i8** %17, align 8
  %19 = getelementptr i8, i8* %18, i64 8
  store i8* %19, i8** %17, align 8
  br label %20

20:                                               ; preds = %10, %16
  %21 = phi i8* [ %14, %10 ], [ %18, %16 ]
  %22 = bitcast i8* %21 to i32*
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds %struct.vp9_extracfg, %struct.vp9_extracfg* %3, i64 0, i32 25
  store i32 %23, i32* %24, align 4
  %25 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 1
  %26 = call fastcc i32 @validate_config(%struct.vpx_codec_alg_priv* %0, %struct.vpx_codec_enc_cfg* %25, %struct.vp9_extracfg* nonnull %3) #9
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %28, label %32

28:                                               ; preds = %20
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* nonnull align 4 %4, i64 128, i1 false) #9
  %29 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 6
  call fastcc void @set_encoder_config(%struct.VP9EncoderConfig* %29, %struct.vpx_codec_enc_cfg* %25, %struct.vp9_extracfg* %5) #9
  %30 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 7
  %31 = load %struct.VP9_COMP*, %struct.VP9_COMP** %30, align 8
  call void @vp9_change_config(%struct.VP9_COMP* %31, %struct.VP9EncoderConfig* %29) #9
  br label %32

32:                                               ; preds = %20, %28
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %4) #9
  ret i32 %26
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @ctrl_set_color_range(%struct.vpx_codec_alg_priv*, %struct.__va_list_tag* nocapture) #1 {
  %3 = alloca %struct.vp9_extracfg, align 4
  %4 = bitcast %struct.vp9_extracfg* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %4) #9
  %5 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 2
  %6 = bitcast %struct.vp9_extracfg* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %4, i8* align 8 %6, i64 128, i1 false)
  %7 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 0
  %8 = load i32, i32* %7, align 8
  %9 = icmp ult i32 %8, 41
  br i1 %9, label %10, label %16

10:                                               ; preds = %2
  %11 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 3
  %12 = load i8*, i8** %11, align 8
  %13 = sext i32 %8 to i64
  %14 = getelementptr i8, i8* %12, i64 %13
  %15 = add nuw nsw i32 %8, 8
  store i32 %15, i32* %7, align 8
  br label %20

16:                                               ; preds = %2
  %17 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 2
  %18 = load i8*, i8** %17, align 8
  %19 = getelementptr i8, i8* %18, i64 8
  store i8* %19, i8** %17, align 8
  br label %20

20:                                               ; preds = %10, %16
  %21 = phi i8* [ %14, %10 ], [ %18, %16 ]
  %22 = bitcast i8* %21 to i32*
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds %struct.vp9_extracfg, %struct.vp9_extracfg* %3, i64 0, i32 26
  store i32 %23, i32* %24, align 4
  %25 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 1
  %26 = call fastcc i32 @validate_config(%struct.vpx_codec_alg_priv* %0, %struct.vpx_codec_enc_cfg* %25, %struct.vp9_extracfg* nonnull %3) #9
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %28, label %32

28:                                               ; preds = %20
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* nonnull align 4 %4, i64 128, i1 false) #9
  %29 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 6
  call fastcc void @set_encoder_config(%struct.VP9EncoderConfig* %29, %struct.vpx_codec_enc_cfg* %25, %struct.vp9_extracfg* %5) #9
  %30 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 7
  %31 = load %struct.VP9_COMP*, %struct.VP9_COMP** %30, align 8
  call void @vp9_change_config(%struct.VP9_COMP* %31, %struct.VP9EncoderConfig* %29) #9
  br label %32

32:                                               ; preds = %20, %28
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %4) #9
  ret i32 %26
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @ctrl_set_noise_sensitivity(%struct.vpx_codec_alg_priv*, %struct.__va_list_tag* nocapture) #1 {
  %3 = alloca %struct.vp9_extracfg, align 4
  %4 = bitcast %struct.vp9_extracfg* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %4) #9
  %5 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 2
  %6 = bitcast %struct.vp9_extracfg* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %4, i8* align 8 %6, i64 128, i1 false)
  %7 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 0
  %8 = load i32, i32* %7, align 8
  %9 = icmp ult i32 %8, 41
  br i1 %9, label %10, label %16

10:                                               ; preds = %2
  %11 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 3
  %12 = load i8*, i8** %11, align 8
  %13 = sext i32 %8 to i64
  %14 = getelementptr i8, i8* %12, i64 %13
  %15 = add nuw nsw i32 %8, 8
  store i32 %15, i32* %7, align 8
  br label %20

16:                                               ; preds = %2
  %17 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 2
  %18 = load i8*, i8** %17, align 8
  %19 = getelementptr i8, i8* %18, i64 8
  store i8* %19, i8** %17, align 8
  br label %20

20:                                               ; preds = %10, %16
  %21 = phi i8* [ %14, %10 ], [ %18, %16 ]
  %22 = bitcast i8* %21 to i32*
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds %struct.vp9_extracfg, %struct.vp9_extracfg* %3, i64 0, i32 2
  store i32 %23, i32* %24, align 4
  %25 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 1
  %26 = call fastcc i32 @validate_config(%struct.vpx_codec_alg_priv* %0, %struct.vpx_codec_enc_cfg* %25, %struct.vp9_extracfg* nonnull %3) #9
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %28, label %32

28:                                               ; preds = %20
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* nonnull align 4 %4, i64 128, i1 false) #9
  %29 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 6
  call fastcc void @set_encoder_config(%struct.VP9EncoderConfig* %29, %struct.vpx_codec_enc_cfg* %25, %struct.vp9_extracfg* %5) #9
  %30 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 7
  %31 = load %struct.VP9_COMP*, %struct.VP9_COMP** %30, align 8
  call void @vp9_change_config(%struct.VP9_COMP* %31, %struct.VP9EncoderConfig* %29) #9
  br label %32

32:                                               ; preds = %20, %28
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %4) #9
  ret i32 %26
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @ctrl_set_min_gf_interval(%struct.vpx_codec_alg_priv*, %struct.__va_list_tag* nocapture) #1 {
  %3 = alloca %struct.vp9_extracfg, align 4
  %4 = bitcast %struct.vp9_extracfg* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %4) #9
  %5 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 2
  %6 = bitcast %struct.vp9_extracfg* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %4, i8* align 8 %6, i64 128, i1 false)
  %7 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 0
  %8 = load i32, i32* %7, align 8
  %9 = icmp ult i32 %8, 41
  br i1 %9, label %10, label %16

10:                                               ; preds = %2
  %11 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 3
  %12 = load i8*, i8** %11, align 8
  %13 = sext i32 %8 to i64
  %14 = getelementptr i8, i8* %12, i64 %13
  %15 = add nuw nsw i32 %8, 8
  store i32 %15, i32* %7, align 8
  br label %20

16:                                               ; preds = %2
  %17 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 2
  %18 = load i8*, i8** %17, align 8
  %19 = getelementptr i8, i8* %18, i64 8
  store i8* %19, i8** %17, align 8
  br label %20

20:                                               ; preds = %10, %16
  %21 = phi i8* [ %14, %10 ], [ %18, %16 ]
  %22 = bitcast i8* %21 to i32*
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds %struct.vp9_extracfg, %struct.vp9_extracfg* %3, i64 0, i32 10
  store i32 %23, i32* %24, align 4
  %25 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 1
  %26 = call fastcc i32 @validate_config(%struct.vpx_codec_alg_priv* %0, %struct.vpx_codec_enc_cfg* %25, %struct.vp9_extracfg* nonnull %3) #9
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %28, label %32

28:                                               ; preds = %20
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* nonnull align 4 %4, i64 128, i1 false) #9
  %29 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 6
  call fastcc void @set_encoder_config(%struct.VP9EncoderConfig* %29, %struct.vpx_codec_enc_cfg* %25, %struct.vp9_extracfg* %5) #9
  %30 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 7
  %31 = load %struct.VP9_COMP*, %struct.VP9_COMP** %30, align 8
  call void @vp9_change_config(%struct.VP9_COMP* %31, %struct.VP9EncoderConfig* %29) #9
  br label %32

32:                                               ; preds = %20, %28
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %4) #9
  ret i32 %26
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @ctrl_set_max_gf_interval(%struct.vpx_codec_alg_priv*, %struct.__va_list_tag* nocapture) #1 {
  %3 = alloca %struct.vp9_extracfg, align 4
  %4 = bitcast %struct.vp9_extracfg* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %4) #9
  %5 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 2
  %6 = bitcast %struct.vp9_extracfg* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %4, i8* align 8 %6, i64 128, i1 false)
  %7 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 0
  %8 = load i32, i32* %7, align 8
  %9 = icmp ult i32 %8, 41
  br i1 %9, label %10, label %16

10:                                               ; preds = %2
  %11 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 3
  %12 = load i8*, i8** %11, align 8
  %13 = sext i32 %8 to i64
  %14 = getelementptr i8, i8* %12, i64 %13
  %15 = add nuw nsw i32 %8, 8
  store i32 %15, i32* %7, align 8
  br label %20

16:                                               ; preds = %2
  %17 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 2
  %18 = load i8*, i8** %17, align 8
  %19 = getelementptr i8, i8* %18, i64 8
  store i8* %19, i8** %17, align 8
  br label %20

20:                                               ; preds = %10, %16
  %21 = phi i8* [ %14, %10 ], [ %18, %16 ]
  %22 = bitcast i8* %21 to i32*
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds %struct.vp9_extracfg, %struct.vp9_extracfg* %3, i64 0, i32 11
  store i32 %23, i32* %24, align 4
  %25 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 1
  %26 = call fastcc i32 @validate_config(%struct.vpx_codec_alg_priv* %0, %struct.vpx_codec_enc_cfg* %25, %struct.vp9_extracfg* nonnull %3) #9
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %28, label %32

28:                                               ; preds = %20
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* nonnull align 4 %4, i64 128, i1 false) #9
  %29 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 6
  call fastcc void @set_encoder_config(%struct.VP9EncoderConfig* %29, %struct.vpx_codec_enc_cfg* %25, %struct.vp9_extracfg* %5) #9
  %30 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 7
  %31 = load %struct.VP9_COMP*, %struct.VP9_COMP** %30, align 8
  call void @vp9_change_config(%struct.VP9_COMP* %31, %struct.VP9EncoderConfig* %29) #9
  br label %32

32:                                               ; preds = %20, %28
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %4) #9
  ret i32 %26
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i32 @ctrl_set_svc_ref_frame_config(%struct.vpx_codec_alg_priv* nocapture readonly, %struct.__va_list_tag* nocapture) #6 {
  %3 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 7
  %4 = load %struct.VP9_COMP*, %struct.VP9_COMP** %3, align 8
  %5 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 0
  %6 = load i32, i32* %5, align 8
  %7 = icmp ult i32 %6, 41
  br i1 %7, label %8, label %14

8:                                                ; preds = %2
  %9 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 3
  %10 = load i8*, i8** %9, align 8
  %11 = sext i32 %6 to i64
  %12 = getelementptr i8, i8* %10, i64 %11
  %13 = add nuw nsw i32 %6, 8
  store i32 %13, i32* %5, align 8
  br label %18

14:                                               ; preds = %2
  %15 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 2
  %16 = load i8*, i8** %15, align 8
  %17 = getelementptr i8, i8* %16, i64 8
  store i8* %17, i8** %15, align 8
  br label %18

18:                                               ; preds = %14, %8
  %19 = phi i8* [ %12, %8 ], [ %16, %14 ]
  %20 = bitcast i8* %19 to %struct.vpx_svc_ref_frame_config**
  %21 = load %struct.vpx_svc_ref_frame_config*, %struct.vpx_svc_ref_frame_config** %20, align 8
  %22 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %4, i64 0, i32 104, i32 60
  store i32 1, i32* %22, align 8
  %23 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %4, i64 0, i32 104, i32 2
  %24 = load i32, i32* %23, align 8
  %25 = icmp sgt i32 %24, 0
  br i1 %25, label %26, label %59

26:                                               ; preds = %18
  %27 = sext i32 %24 to i64
  br label %28

28:                                               ; preds = %26, %28
  %29 = phi i64 [ 0, %26 ], [ %57, %28 ]
  %30 = getelementptr inbounds %struct.vpx_svc_ref_frame_config, %struct.vpx_svc_ref_frame_config* %21, i64 0, i32 3, i64 %29
  %31 = load i32, i32* %30, align 4
  %32 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %4, i64 0, i32 104, i32 45, i64 %29
  store i32 %31, i32* %32, align 4
  %33 = getelementptr inbounds %struct.vpx_svc_ref_frame_config, %struct.vpx_svc_ref_frame_config* %21, i64 0, i32 7, i64 %29
  %34 = load i32, i32* %33, align 4
  %35 = trunc i32 %34 to i8
  %36 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %4, i64 0, i32 104, i32 46, i64 %29
  store i8 %35, i8* %36, align 1
  %37 = getelementptr inbounds %struct.vpx_svc_ref_frame_config, %struct.vpx_svc_ref_frame_config* %21, i64 0, i32 8, i64 %29
  %38 = load i32, i32* %37, align 4
  %39 = trunc i32 %38 to i8
  %40 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %4, i64 0, i32 104, i32 47, i64 %29
  store i8 %39, i8* %40, align 1
  %41 = getelementptr inbounds %struct.vpx_svc_ref_frame_config, %struct.vpx_svc_ref_frame_config* %21, i64 0, i32 9, i64 %29
  %42 = load i32, i32* %41, align 4
  %43 = trunc i32 %42 to i8
  %44 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %4, i64 0, i32 104, i32 48, i64 %29
  store i8 %43, i8* %44, align 1
  %45 = getelementptr inbounds %struct.vpx_svc_ref_frame_config, %struct.vpx_svc_ref_frame_config* %21, i64 0, i32 0, i64 %29
  %46 = load i32, i32* %45, align 4
  %47 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %4, i64 0, i32 104, i32 15, i64 %29
  store i32 %46, i32* %47, align 4
  %48 = getelementptr inbounds %struct.vpx_svc_ref_frame_config, %struct.vpx_svc_ref_frame_config* %21, i64 0, i32 1, i64 %29
  %49 = load i32, i32* %48, align 4
  %50 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %4, i64 0, i32 104, i32 16, i64 %29
  store i32 %49, i32* %50, align 4
  %51 = getelementptr inbounds %struct.vpx_svc_ref_frame_config, %struct.vpx_svc_ref_frame_config* %21, i64 0, i32 2, i64 %29
  %52 = load i32, i32* %51, align 4
  %53 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %4, i64 0, i32 104, i32 17, i64 %29
  store i32 %52, i32* %53, align 4
  %54 = getelementptr inbounds %struct.vpx_svc_ref_frame_config, %struct.vpx_svc_ref_frame_config* %21, i64 0, i32 10, i64 %29
  %55 = load i64, i64* %54, align 8
  %56 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %4, i64 0, i32 104, i32 63, i64 %29
  store i64 %55, i64* %56, align 8
  %57 = add nuw nsw i64 %29, 1
  %58 = icmp slt i64 %57, %27
  br i1 %58, label %28, label %59

59:                                               ; preds = %28, %18
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @ctrl_set_render_size(%struct.vpx_codec_alg_priv*, %struct.__va_list_tag* nocapture) #1 {
  %3 = alloca %struct.vp9_extracfg, align 4
  %4 = bitcast %struct.vp9_extracfg* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %4) #9
  %5 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 2
  %6 = bitcast %struct.vp9_extracfg* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %4, i8* align 8 %6, i64 128, i1 false)
  %7 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 0
  %8 = load i32, i32* %7, align 8
  %9 = icmp ult i32 %8, 41
  br i1 %9, label %10, label %16

10:                                               ; preds = %2
  %11 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 3
  %12 = load i8*, i8** %11, align 8
  %13 = sext i32 %8 to i64
  %14 = getelementptr i8, i8* %12, i64 %13
  %15 = add nuw nsw i32 %8, 8
  store i32 %15, i32* %7, align 8
  br label %20

16:                                               ; preds = %2
  %17 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 2
  %18 = load i8*, i8** %17, align 8
  %19 = getelementptr i8, i8* %18, i64 8
  store i8* %19, i8** %17, align 8
  br label %20

20:                                               ; preds = %16, %10
  %21 = phi i8* [ %14, %10 ], [ %18, %16 ]
  %22 = bitcast i8* %21 to i32**
  %23 = load i32*, i32** %22, align 8
  %24 = load i32, i32* %23, align 4
  %25 = getelementptr inbounds %struct.vp9_extracfg, %struct.vp9_extracfg* %3, i64 0, i32 27
  store i32 %24, i32* %25, align 4
  %26 = getelementptr inbounds i32, i32* %23, i64 1
  %27 = load i32, i32* %26, align 4
  %28 = getelementptr inbounds %struct.vp9_extracfg, %struct.vp9_extracfg* %3, i64 0, i32 28
  store i32 %27, i32* %28, align 4
  %29 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 1
  %30 = call fastcc i32 @validate_config(%struct.vpx_codec_alg_priv* %0, %struct.vpx_codec_enc_cfg* %29, %struct.vp9_extracfg* nonnull %3) #9
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %32, label %36

32:                                               ; preds = %20
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* nonnull align 4 %4, i64 128, i1 false) #9
  %33 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 6
  call fastcc void @set_encoder_config(%struct.VP9EncoderConfig* %33, %struct.vpx_codec_enc_cfg* %29, %struct.vp9_extracfg* %5) #9
  %34 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 7
  %35 = load %struct.VP9_COMP*, %struct.VP9_COMP** %34, align 8
  call void @vp9_change_config(%struct.VP9_COMP* %35, %struct.VP9EncoderConfig* %33) #9
  br label %36

36:                                               ; preds = %20, %32
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %4) #9
  ret i32 %30
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @ctrl_set_target_level(%struct.vpx_codec_alg_priv*, %struct.__va_list_tag* nocapture) #1 {
  %3 = alloca %struct.vp9_extracfg, align 4
  %4 = bitcast %struct.vp9_extracfg* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %4) #9
  %5 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 2
  %6 = bitcast %struct.vp9_extracfg* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %4, i8* align 8 %6, i64 128, i1 false)
  %7 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 0
  %8 = load i32, i32* %7, align 8
  %9 = icmp ult i32 %8, 41
  br i1 %9, label %10, label %16

10:                                               ; preds = %2
  %11 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 3
  %12 = load i8*, i8** %11, align 8
  %13 = sext i32 %8 to i64
  %14 = getelementptr i8, i8* %12, i64 %13
  %15 = add nuw nsw i32 %8, 8
  store i32 %15, i32* %7, align 8
  br label %20

16:                                               ; preds = %2
  %17 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 2
  %18 = load i8*, i8** %17, align 8
  %19 = getelementptr i8, i8* %18, i64 8
  store i8* %19, i8** %17, align 8
  br label %20

20:                                               ; preds = %10, %16
  %21 = phi i8* [ %14, %10 ], [ %18, %16 ]
  %22 = bitcast i8* %21 to i32*
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds %struct.vp9_extracfg, %struct.vp9_extracfg* %3, i64 0, i32 18
  store i32 %23, i32* %24, align 4
  %25 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 1
  %26 = call fastcc i32 @validate_config(%struct.vpx_codec_alg_priv* %0, %struct.vpx_codec_enc_cfg* %25, %struct.vp9_extracfg* nonnull %3) #9
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %28, label %32

28:                                               ; preds = %20
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* nonnull align 4 %4, i64 128, i1 false) #9
  %29 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 6
  call fastcc void @set_encoder_config(%struct.VP9EncoderConfig* %29, %struct.vpx_codec_enc_cfg* %25, %struct.vp9_extracfg* %5) #9
  %30 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 7
  %31 = load %struct.VP9_COMP*, %struct.VP9_COMP** %30, align 8
  call void @vp9_change_config(%struct.VP9_COMP* %31, %struct.VP9EncoderConfig* %29) #9
  br label %32

32:                                               ; preds = %20, %28
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %4) #9
  ret i32 %26
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @ctrl_set_row_mt(%struct.vpx_codec_alg_priv*, %struct.__va_list_tag* nocapture) #1 {
  %3 = alloca %struct.vp9_extracfg, align 4
  %4 = bitcast %struct.vp9_extracfg* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %4) #9
  %5 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 2
  %6 = bitcast %struct.vp9_extracfg* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %4, i8* align 8 %6, i64 128, i1 false)
  %7 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 0
  %8 = load i32, i32* %7, align 8
  %9 = icmp ult i32 %8, 41
  br i1 %9, label %10, label %16

10:                                               ; preds = %2
  %11 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 3
  %12 = load i8*, i8** %11, align 8
  %13 = sext i32 %8 to i64
  %14 = getelementptr i8, i8* %12, i64 %13
  %15 = add nuw nsw i32 %8, 8
  store i32 %15, i32* %7, align 8
  br label %20

16:                                               ; preds = %2
  %17 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 2
  %18 = load i8*, i8** %17, align 8
  %19 = getelementptr i8, i8* %18, i64 8
  store i8* %19, i8** %17, align 8
  br label %20

20:                                               ; preds = %10, %16
  %21 = phi i8* [ %14, %10 ], [ %18, %16 ]
  %22 = bitcast i8* %21 to i32*
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds %struct.vp9_extracfg, %struct.vp9_extracfg* %3, i64 0, i32 29
  store i32 %23, i32* %24, align 4
  %25 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 1
  %26 = call fastcc i32 @validate_config(%struct.vpx_codec_alg_priv* %0, %struct.vpx_codec_enc_cfg* %25, %struct.vp9_extracfg* nonnull %3) #9
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %28, label %32

28:                                               ; preds = %20
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* nonnull align 4 %4, i64 128, i1 false) #9
  %29 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 6
  call fastcc void @set_encoder_config(%struct.VP9EncoderConfig* %29, %struct.vpx_codec_enc_cfg* %25, %struct.vp9_extracfg* %5) #9
  %30 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 7
  %31 = load %struct.VP9_COMP*, %struct.VP9_COMP** %30, align 8
  call void @vp9_change_config(%struct.VP9_COMP* %31, %struct.VP9EncoderConfig* %29) #9
  br label %32

32:                                               ; preds = %20, %28
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %4) #9
  ret i32 %26
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i32 @ctrl_set_postencode_drop(%struct.vpx_codec_alg_priv* nocapture readonly, %struct.__va_list_tag* nocapture) #6 {
  %3 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 7
  %4 = load %struct.VP9_COMP*, %struct.VP9_COMP** %3, align 8
  %5 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 0
  %6 = load i32, i32* %5, align 8
  %7 = icmp ult i32 %6, 41
  br i1 %7, label %8, label %14

8:                                                ; preds = %2
  %9 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 3
  %10 = load i8*, i8** %9, align 8
  %11 = sext i32 %6 to i64
  %12 = getelementptr i8, i8* %10, i64 %11
  %13 = add nuw nsw i32 %6, 8
  store i32 %13, i32* %5, align 8
  br label %18

14:                                               ; preds = %2
  %15 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 2
  %16 = load i8*, i8** %15, align 8
  %17 = getelementptr i8, i8* %16, i64 8
  store i8* %17, i8** %15, align 8
  br label %18

18:                                               ; preds = %14, %8
  %19 = phi i8* [ %12, %8 ], [ %16, %14 ]
  %20 = bitcast i8* %19 to i32*
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %4, i64 0, i32 67, i32 83
  store i32 %21, i32* %22, align 4
  ret i32 0
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i32 @ctrl_set_disable_overshoot_maxq_cbr(%struct.vpx_codec_alg_priv* nocapture readonly, %struct.__va_list_tag* nocapture) #6 {
  %3 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 7
  %4 = load %struct.VP9_COMP*, %struct.VP9_COMP** %3, align 8
  %5 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 0
  %6 = load i32, i32* %5, align 8
  %7 = icmp ult i32 %6, 41
  br i1 %7, label %8, label %14

8:                                                ; preds = %2
  %9 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 3
  %10 = load i8*, i8** %9, align 8
  %11 = sext i32 %6 to i64
  %12 = getelementptr i8, i8* %10, i64 %11
  %13 = add nuw nsw i32 %6, 8
  store i32 %13, i32* %5, align 8
  br label %18

14:                                               ; preds = %2
  %15 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 2
  %16 = load i8*, i8** %15, align 8
  %17 = getelementptr i8, i8* %16, i64 8
  store i8* %17, i8** %15, align 8
  br label %18

18:                                               ; preds = %14, %8
  %19 = phi i8* [ %12, %8 ], [ %16, %14 ]
  %20 = bitcast i8* %19 to i32*
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %4, i64 0, i32 67, i32 84
  store i32 %21, i32* %22, align 8
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @ctrl_enable_motion_vector_unit_test(%struct.vpx_codec_alg_priv*, %struct.__va_list_tag* nocapture) #1 {
  %3 = alloca %struct.vp9_extracfg, align 4
  %4 = bitcast %struct.vp9_extracfg* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %4) #9
  %5 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 2
  %6 = bitcast %struct.vp9_extracfg* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %4, i8* align 8 %6, i64 128, i1 false)
  %7 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 0
  %8 = load i32, i32* %7, align 8
  %9 = icmp ult i32 %8, 41
  br i1 %9, label %10, label %16

10:                                               ; preds = %2
  %11 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 3
  %12 = load i8*, i8** %11, align 8
  %13 = sext i32 %8 to i64
  %14 = getelementptr i8, i8* %12, i64 %13
  %15 = add nuw nsw i32 %8, 8
  store i32 %15, i32* %7, align 8
  br label %20

16:                                               ; preds = %2
  %17 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 2
  %18 = load i8*, i8** %17, align 8
  %19 = getelementptr i8, i8* %18, i64 8
  store i8* %19, i8** %17, align 8
  br label %20

20:                                               ; preds = %10, %16
  %21 = phi i8* [ %14, %10 ], [ %18, %16 ]
  %22 = bitcast i8* %21 to i32*
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds %struct.vp9_extracfg, %struct.vp9_extracfg* %3, i64 0, i32 30
  store i32 %23, i32* %24, align 4
  %25 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 1
  %26 = call fastcc i32 @validate_config(%struct.vpx_codec_alg_priv* %0, %struct.vpx_codec_enc_cfg* %25, %struct.vp9_extracfg* nonnull %3) #9
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %28, label %32

28:                                               ; preds = %20
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* nonnull align 4 %4, i64 128, i1 false) #9
  %29 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 6
  call fastcc void @set_encoder_config(%struct.VP9EncoderConfig* %29, %struct.vpx_codec_enc_cfg* %25, %struct.vp9_extracfg* %5) #9
  %30 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 7
  %31 = load %struct.VP9_COMP*, %struct.VP9_COMP** %30, align 8
  call void @vp9_change_config(%struct.VP9_COMP* %31, %struct.VP9EncoderConfig* %29) #9
  br label %32

32:                                               ; preds = %20, %28
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %4) #9
  ret i32 %26
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i32 @ctrl_set_svc_inter_layer_pred(%struct.vpx_codec_alg_priv* nocapture readonly, %struct.__va_list_tag* nocapture) #6 {
  %3 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = icmp ult i32 %4, 41
  br i1 %5, label %6, label %12

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 3
  %8 = load i8*, i8** %7, align 8
  %9 = sext i32 %4 to i64
  %10 = getelementptr i8, i8* %8, i64 %9
  %11 = add nuw nsw i32 %4, 8
  store i32 %11, i32* %3, align 8
  br label %16

12:                                               ; preds = %2
  %13 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 2
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr i8, i8* %14, i64 8
  store i8* %15, i8** %13, align 8
  br label %16

16:                                               ; preds = %12, %6
  %17 = phi i8* [ %10, %6 ], [ %14, %12 ]
  %18 = bitcast i8* %17 to i32*
  %19 = load i32, i32* %18, align 4
  %20 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 7
  %21 = load %struct.VP9_COMP*, %struct.VP9_COMP** %20, align 8
  %22 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %21, i64 0, i32 104, i32 42
  store i32 %19, i32* %22, align 4
  ret i32 0
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i32 @ctrl_set_svc_frame_drop_layer(%struct.vpx_codec_alg_priv* nocapture readonly, %struct.__va_list_tag* nocapture) #6 {
  %3 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 7
  %4 = load %struct.VP9_COMP*, %struct.VP9_COMP** %3, align 8
  %5 = bitcast %struct.VP9_COMP* %4 to i8*
  %6 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 0
  %7 = load i32, i32* %6, align 8
  %8 = icmp ult i32 %7, 41
  br i1 %8, label %9, label %15

9:                                                ; preds = %2
  %10 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 3
  %11 = load i8*, i8** %10, align 8
  %12 = sext i32 %7 to i64
  %13 = getelementptr i8, i8* %11, i64 %12
  %14 = add nuw nsw i32 %7, 8
  store i32 %14, i32* %6, align 8
  br label %19

15:                                               ; preds = %2
  %16 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 2
  %17 = load i8*, i8** %16, align 8
  %18 = getelementptr i8, i8* %17, i64 8
  store i8* %18, i8** %16, align 8
  br label %19

19:                                               ; preds = %15, %9
  %20 = phi i8* [ %13, %9 ], [ %17, %15 ]
  %21 = bitcast i8* %20 to %struct.vpx_svc_frame_drop**
  %22 = load %struct.vpx_svc_frame_drop*, %struct.vpx_svc_frame_drop** %21, align 8
  %23 = bitcast %struct.vpx_svc_frame_drop* %22 to i8*
  %24 = getelementptr inbounds %struct.vpx_svc_frame_drop, %struct.vpx_svc_frame_drop* %22, i64 0, i32 1
  %25 = load i32, i32* %24, align 4
  %26 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %4, i64 0, i32 104, i32 41
  store i32 %25, i32* %26, align 16
  %27 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %4, i64 0, i32 104, i32 2
  %28 = load i32, i32* %27, align 8
  %29 = icmp sgt i32 %28, 0
  br i1 %29, label %30, label %130

30:                                               ; preds = %19
  %31 = sext i32 %28 to i64
  %32 = icmp ult i32 %28, 8
  br i1 %32, label %121, label %33

33:                                               ; preds = %30
  %34 = getelementptr %struct.VP9_COMP, %struct.VP9_COMP* %4, i64 0, i32 104, i32 37, i64 0
  %35 = shl nsw i64 %31, 2
  %36 = add nsw i64 %35, 832796
  %37 = getelementptr i8, i8* %5, i64 %36
  %38 = getelementptr %struct.vpx_svc_frame_drop, %struct.vpx_svc_frame_drop* %22, i64 0, i32 0, i64 %31
  %39 = icmp ult i32* %34, %38
  %40 = icmp ugt i8* %37, %23
  %41 = and i1 %39, %40
  br i1 %41, label %121, label %42

42:                                               ; preds = %33
  %43 = and i64 %31, -8
  %44 = add nsw i64 %43, -8
  %45 = lshr exact i64 %44, 3
  %46 = add nuw nsw i64 %45, 1
  %47 = and i64 %46, 3
  %48 = icmp ult i64 %44, 24
  br i1 %48, label %100, label %49

49:                                               ; preds = %42
  %50 = sub nsw i64 %46, %47
  br label %51

51:                                               ; preds = %51, %49
  %52 = phi i64 [ 0, %49 ], [ %97, %51 ]
  %53 = phi i64 [ %50, %49 ], [ %98, %51 ]
  %54 = getelementptr inbounds %struct.vpx_svc_frame_drop, %struct.vpx_svc_frame_drop* %22, i64 0, i32 0, i64 %52
  %55 = bitcast i32* %54 to <4 x i32>*
  %56 = load <4 x i32>, <4 x i32>* %55, align 4, !alias.scope !18
  %57 = getelementptr inbounds i32, i32* %54, i64 4
  %58 = bitcast i32* %57 to <4 x i32>*
  %59 = load <4 x i32>, <4 x i32>* %58, align 4, !alias.scope !18
  %60 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %4, i64 0, i32 104, i32 37, i64 %52
  %61 = bitcast i32* %60 to <4 x i32>*
  store <4 x i32> %56, <4 x i32>* %61, align 4, !alias.scope !21, !noalias !18
  %62 = getelementptr inbounds i32, i32* %60, i64 4
  %63 = bitcast i32* %62 to <4 x i32>*
  store <4 x i32> %59, <4 x i32>* %63, align 4, !alias.scope !21, !noalias !18
  %64 = or i64 %52, 8
  %65 = getelementptr inbounds %struct.vpx_svc_frame_drop, %struct.vpx_svc_frame_drop* %22, i64 0, i32 0, i64 %64
  %66 = bitcast i32* %65 to <4 x i32>*
  %67 = load <4 x i32>, <4 x i32>* %66, align 4, !alias.scope !18
  %68 = getelementptr inbounds i32, i32* %65, i64 4
  %69 = bitcast i32* %68 to <4 x i32>*
  %70 = load <4 x i32>, <4 x i32>* %69, align 4, !alias.scope !18
  %71 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %4, i64 0, i32 104, i32 37, i64 %64
  %72 = bitcast i32* %71 to <4 x i32>*
  store <4 x i32> %67, <4 x i32>* %72, align 4, !alias.scope !21, !noalias !18
  %73 = getelementptr inbounds i32, i32* %71, i64 4
  %74 = bitcast i32* %73 to <4 x i32>*
  store <4 x i32> %70, <4 x i32>* %74, align 4, !alias.scope !21, !noalias !18
  %75 = or i64 %52, 16
  %76 = getelementptr inbounds %struct.vpx_svc_frame_drop, %struct.vpx_svc_frame_drop* %22, i64 0, i32 0, i64 %75
  %77 = bitcast i32* %76 to <4 x i32>*
  %78 = load <4 x i32>, <4 x i32>* %77, align 4, !alias.scope !18
  %79 = getelementptr inbounds i32, i32* %76, i64 4
  %80 = bitcast i32* %79 to <4 x i32>*
  %81 = load <4 x i32>, <4 x i32>* %80, align 4, !alias.scope !18
  %82 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %4, i64 0, i32 104, i32 37, i64 %75
  %83 = bitcast i32* %82 to <4 x i32>*
  store <4 x i32> %78, <4 x i32>* %83, align 4, !alias.scope !21, !noalias !18
  %84 = getelementptr inbounds i32, i32* %82, i64 4
  %85 = bitcast i32* %84 to <4 x i32>*
  store <4 x i32> %81, <4 x i32>* %85, align 4, !alias.scope !21, !noalias !18
  %86 = or i64 %52, 24
  %87 = getelementptr inbounds %struct.vpx_svc_frame_drop, %struct.vpx_svc_frame_drop* %22, i64 0, i32 0, i64 %86
  %88 = bitcast i32* %87 to <4 x i32>*
  %89 = load <4 x i32>, <4 x i32>* %88, align 4, !alias.scope !18
  %90 = getelementptr inbounds i32, i32* %87, i64 4
  %91 = bitcast i32* %90 to <4 x i32>*
  %92 = load <4 x i32>, <4 x i32>* %91, align 4, !alias.scope !18
  %93 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %4, i64 0, i32 104, i32 37, i64 %86
  %94 = bitcast i32* %93 to <4 x i32>*
  store <4 x i32> %89, <4 x i32>* %94, align 4, !alias.scope !21, !noalias !18
  %95 = getelementptr inbounds i32, i32* %93, i64 4
  %96 = bitcast i32* %95 to <4 x i32>*
  store <4 x i32> %92, <4 x i32>* %96, align 4, !alias.scope !21, !noalias !18
  %97 = add i64 %52, 32
  %98 = add i64 %53, -4
  %99 = icmp eq i64 %98, 0
  br i1 %99, label %100, label %51, !llvm.loop !23

100:                                              ; preds = %51, %42
  %101 = phi i64 [ 0, %42 ], [ %97, %51 ]
  %102 = icmp eq i64 %47, 0
  br i1 %102, label %119, label %103

103:                                              ; preds = %100, %103
  %104 = phi i64 [ %116, %103 ], [ %101, %100 ]
  %105 = phi i64 [ %117, %103 ], [ %47, %100 ]
  %106 = getelementptr inbounds %struct.vpx_svc_frame_drop, %struct.vpx_svc_frame_drop* %22, i64 0, i32 0, i64 %104
  %107 = bitcast i32* %106 to <4 x i32>*
  %108 = load <4 x i32>, <4 x i32>* %107, align 4, !alias.scope !18
  %109 = getelementptr inbounds i32, i32* %106, i64 4
  %110 = bitcast i32* %109 to <4 x i32>*
  %111 = load <4 x i32>, <4 x i32>* %110, align 4, !alias.scope !18
  %112 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %4, i64 0, i32 104, i32 37, i64 %104
  %113 = bitcast i32* %112 to <4 x i32>*
  store <4 x i32> %108, <4 x i32>* %113, align 4, !alias.scope !21, !noalias !18
  %114 = getelementptr inbounds i32, i32* %112, i64 4
  %115 = bitcast i32* %114 to <4 x i32>*
  store <4 x i32> %111, <4 x i32>* %115, align 4, !alias.scope !21, !noalias !18
  %116 = add i64 %104, 8
  %117 = add i64 %105, -1
  %118 = icmp eq i64 %117, 0
  br i1 %118, label %119, label %103, !llvm.loop !24

119:                                              ; preds = %103, %100
  %120 = icmp eq i64 %43, %31
  br i1 %120, label %130, label %121

121:                                              ; preds = %119, %33, %30
  %122 = phi i64 [ 0, %33 ], [ 0, %30 ], [ %43, %119 ]
  br label %123

123:                                              ; preds = %121, %123
  %124 = phi i64 [ %128, %123 ], [ %122, %121 ]
  %125 = getelementptr inbounds %struct.vpx_svc_frame_drop, %struct.vpx_svc_frame_drop* %22, i64 0, i32 0, i64 %124
  %126 = load i32, i32* %125, align 4
  %127 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %4, i64 0, i32 104, i32 37, i64 %124
  store i32 %126, i32* %127, align 4
  %128 = add nuw nsw i64 %124, 1
  %129 = icmp slt i64 %128, %31
  br i1 %129, label %123, label %130, !llvm.loop !25

130:                                              ; preds = %123, %119, %19
  %131 = getelementptr inbounds %struct.vpx_svc_frame_drop, %struct.vpx_svc_frame_drop* %22, i64 0, i32 2
  %132 = load i32, i32* %131, align 4
  %133 = icmp sgt i32 %132, 1
  %134 = select i1 %133, i32 %132, i32 1
  %135 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %4, i64 0, i32 104, i32 40
  store i32 %134, i32* %135, align 4
  ret i32 0
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i32 @ctrl_set_svc_gf_temporal_ref(%struct.vpx_codec_alg_priv* nocapture readonly, %struct.__va_list_tag* nocapture) #6 {
  %3 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 7
  %4 = load %struct.VP9_COMP*, %struct.VP9_COMP** %3, align 8
  %5 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 0
  %6 = load i32, i32* %5, align 8
  %7 = icmp ult i32 %6, 41
  br i1 %7, label %8, label %14

8:                                                ; preds = %2
  %9 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 3
  %10 = load i8*, i8** %9, align 8
  %11 = sext i32 %6 to i64
  %12 = getelementptr i8, i8* %10, i64 %11
  %13 = add nuw nsw i32 %6, 8
  store i32 %13, i32* %5, align 8
  br label %18

14:                                               ; preds = %2
  %15 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 2
  %16 = load i8*, i8** %15, align 8
  %17 = getelementptr i8, i8* %16, i64 8
  store i8* %17, i8** %15, align 8
  br label %18

18:                                               ; preds = %14, %8
  %19 = phi i8* [ %12, %8 ], [ %16, %14 ]
  %20 = bitcast i8* %19 to i32*
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %4, i64 0, i32 104, i32 19
  store i32 %21, i32* %22, align 16
  ret i32 0
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i32 @ctrl_set_svc_spatial_layer_sync(%struct.vpx_codec_alg_priv* nocapture readonly, %struct.__va_list_tag* nocapture) #6 {
  %3 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 7
  %4 = load %struct.VP9_COMP*, %struct.VP9_COMP** %3, align 8
  %5 = bitcast %struct.VP9_COMP* %4 to i8*
  %6 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 0
  %7 = load i32, i32* %6, align 8
  %8 = icmp ult i32 %7, 41
  br i1 %8, label %9, label %15

9:                                                ; preds = %2
  %10 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 3
  %11 = load i8*, i8** %10, align 8
  %12 = sext i32 %7 to i64
  %13 = getelementptr i8, i8* %11, i64 %12
  %14 = add nuw nsw i32 %7, 8
  store i32 %14, i32* %6, align 8
  br label %19

15:                                               ; preds = %2
  %16 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 2
  %17 = load i8*, i8** %16, align 8
  %18 = getelementptr i8, i8* %17, i64 8
  store i8* %18, i8** %16, align 8
  br label %19

19:                                               ; preds = %15, %9
  %20 = phi i8* [ %13, %9 ], [ %17, %15 ]
  %21 = bitcast i8* %20 to %struct.vpx_svc_spatial_layer_sync**
  %22 = load %struct.vpx_svc_spatial_layer_sync*, %struct.vpx_svc_spatial_layer_sync** %21, align 8
  %23 = bitcast %struct.vpx_svc_spatial_layer_sync* %22 to i8*
  %24 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %4, i64 0, i32 104, i32 2
  %25 = load i32, i32* %24, align 8
  %26 = icmp sgt i32 %25, 0
  br i1 %26, label %27, label %127

27:                                               ; preds = %19
  %28 = sext i32 %25 to i64
  %29 = icmp ult i32 %25, 8
  br i1 %29, label %118, label %30

30:                                               ; preds = %27
  %31 = getelementptr %struct.VP9_COMP, %struct.VP9_COMP* %4, i64 0, i32 104, i32 55, i64 0
  %32 = shl nsw i64 %28, 2
  %33 = add nsw i64 %32, 833048
  %34 = getelementptr i8, i8* %5, i64 %33
  %35 = getelementptr %struct.vpx_svc_spatial_layer_sync, %struct.vpx_svc_spatial_layer_sync* %22, i64 0, i32 0, i64 %28
  %36 = icmp ult i32* %31, %35
  %37 = icmp ugt i8* %34, %23
  %38 = and i1 %36, %37
  br i1 %38, label %118, label %39

39:                                               ; preds = %30
  %40 = and i64 %28, -8
  %41 = add nsw i64 %40, -8
  %42 = lshr exact i64 %41, 3
  %43 = add nuw nsw i64 %42, 1
  %44 = and i64 %43, 3
  %45 = icmp ult i64 %41, 24
  br i1 %45, label %97, label %46

46:                                               ; preds = %39
  %47 = sub nsw i64 %43, %44
  br label %48

48:                                               ; preds = %48, %46
  %49 = phi i64 [ 0, %46 ], [ %94, %48 ]
  %50 = phi i64 [ %47, %46 ], [ %95, %48 ]
  %51 = getelementptr inbounds %struct.vpx_svc_spatial_layer_sync, %struct.vpx_svc_spatial_layer_sync* %22, i64 0, i32 0, i64 %49
  %52 = bitcast i32* %51 to <4 x i32>*
  %53 = load <4 x i32>, <4 x i32>* %52, align 4, !alias.scope !26
  %54 = getelementptr inbounds i32, i32* %51, i64 4
  %55 = bitcast i32* %54 to <4 x i32>*
  %56 = load <4 x i32>, <4 x i32>* %55, align 4, !alias.scope !26
  %57 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %4, i64 0, i32 104, i32 55, i64 %49
  %58 = bitcast i32* %57 to <4 x i32>*
  store <4 x i32> %53, <4 x i32>* %58, align 4, !alias.scope !29, !noalias !26
  %59 = getelementptr inbounds i32, i32* %57, i64 4
  %60 = bitcast i32* %59 to <4 x i32>*
  store <4 x i32> %56, <4 x i32>* %60, align 4, !alias.scope !29, !noalias !26
  %61 = or i64 %49, 8
  %62 = getelementptr inbounds %struct.vpx_svc_spatial_layer_sync, %struct.vpx_svc_spatial_layer_sync* %22, i64 0, i32 0, i64 %61
  %63 = bitcast i32* %62 to <4 x i32>*
  %64 = load <4 x i32>, <4 x i32>* %63, align 4, !alias.scope !26
  %65 = getelementptr inbounds i32, i32* %62, i64 4
  %66 = bitcast i32* %65 to <4 x i32>*
  %67 = load <4 x i32>, <4 x i32>* %66, align 4, !alias.scope !26
  %68 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %4, i64 0, i32 104, i32 55, i64 %61
  %69 = bitcast i32* %68 to <4 x i32>*
  store <4 x i32> %64, <4 x i32>* %69, align 4, !alias.scope !29, !noalias !26
  %70 = getelementptr inbounds i32, i32* %68, i64 4
  %71 = bitcast i32* %70 to <4 x i32>*
  store <4 x i32> %67, <4 x i32>* %71, align 4, !alias.scope !29, !noalias !26
  %72 = or i64 %49, 16
  %73 = getelementptr inbounds %struct.vpx_svc_spatial_layer_sync, %struct.vpx_svc_spatial_layer_sync* %22, i64 0, i32 0, i64 %72
  %74 = bitcast i32* %73 to <4 x i32>*
  %75 = load <4 x i32>, <4 x i32>* %74, align 4, !alias.scope !26
  %76 = getelementptr inbounds i32, i32* %73, i64 4
  %77 = bitcast i32* %76 to <4 x i32>*
  %78 = load <4 x i32>, <4 x i32>* %77, align 4, !alias.scope !26
  %79 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %4, i64 0, i32 104, i32 55, i64 %72
  %80 = bitcast i32* %79 to <4 x i32>*
  store <4 x i32> %75, <4 x i32>* %80, align 4, !alias.scope !29, !noalias !26
  %81 = getelementptr inbounds i32, i32* %79, i64 4
  %82 = bitcast i32* %81 to <4 x i32>*
  store <4 x i32> %78, <4 x i32>* %82, align 4, !alias.scope !29, !noalias !26
  %83 = or i64 %49, 24
  %84 = getelementptr inbounds %struct.vpx_svc_spatial_layer_sync, %struct.vpx_svc_spatial_layer_sync* %22, i64 0, i32 0, i64 %83
  %85 = bitcast i32* %84 to <4 x i32>*
  %86 = load <4 x i32>, <4 x i32>* %85, align 4, !alias.scope !26
  %87 = getelementptr inbounds i32, i32* %84, i64 4
  %88 = bitcast i32* %87 to <4 x i32>*
  %89 = load <4 x i32>, <4 x i32>* %88, align 4, !alias.scope !26
  %90 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %4, i64 0, i32 104, i32 55, i64 %83
  %91 = bitcast i32* %90 to <4 x i32>*
  store <4 x i32> %86, <4 x i32>* %91, align 4, !alias.scope !29, !noalias !26
  %92 = getelementptr inbounds i32, i32* %90, i64 4
  %93 = bitcast i32* %92 to <4 x i32>*
  store <4 x i32> %89, <4 x i32>* %93, align 4, !alias.scope !29, !noalias !26
  %94 = add i64 %49, 32
  %95 = add i64 %50, -4
  %96 = icmp eq i64 %95, 0
  br i1 %96, label %97, label %48, !llvm.loop !31

97:                                               ; preds = %48, %39
  %98 = phi i64 [ 0, %39 ], [ %94, %48 ]
  %99 = icmp eq i64 %44, 0
  br i1 %99, label %116, label %100

100:                                              ; preds = %97, %100
  %101 = phi i64 [ %113, %100 ], [ %98, %97 ]
  %102 = phi i64 [ %114, %100 ], [ %44, %97 ]
  %103 = getelementptr inbounds %struct.vpx_svc_spatial_layer_sync, %struct.vpx_svc_spatial_layer_sync* %22, i64 0, i32 0, i64 %101
  %104 = bitcast i32* %103 to <4 x i32>*
  %105 = load <4 x i32>, <4 x i32>* %104, align 4, !alias.scope !26
  %106 = getelementptr inbounds i32, i32* %103, i64 4
  %107 = bitcast i32* %106 to <4 x i32>*
  %108 = load <4 x i32>, <4 x i32>* %107, align 4, !alias.scope !26
  %109 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %4, i64 0, i32 104, i32 55, i64 %101
  %110 = bitcast i32* %109 to <4 x i32>*
  store <4 x i32> %105, <4 x i32>* %110, align 4, !alias.scope !29, !noalias !26
  %111 = getelementptr inbounds i32, i32* %109, i64 4
  %112 = bitcast i32* %111 to <4 x i32>*
  store <4 x i32> %108, <4 x i32>* %112, align 4, !alias.scope !29, !noalias !26
  %113 = add i64 %101, 8
  %114 = add i64 %102, -1
  %115 = icmp eq i64 %114, 0
  br i1 %115, label %116, label %100, !llvm.loop !32

116:                                              ; preds = %100, %97
  %117 = icmp eq i64 %40, %28
  br i1 %117, label %127, label %118

118:                                              ; preds = %116, %30, %27
  %119 = phi i64 [ 0, %30 ], [ 0, %27 ], [ %40, %116 ]
  br label %120

120:                                              ; preds = %118, %120
  %121 = phi i64 [ %125, %120 ], [ %119, %118 ]
  %122 = getelementptr inbounds %struct.vpx_svc_spatial_layer_sync, %struct.vpx_svc_spatial_layer_sync* %22, i64 0, i32 0, i64 %121
  %123 = load i32, i32* %122, align 4
  %124 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %4, i64 0, i32 104, i32 55, i64 %121
  store i32 %123, i32* %124, align 4
  %125 = add nuw nsw i64 %121, 1
  %126 = icmp slt i64 %125, %28
  br i1 %126, label %120, label %127, !llvm.loop !33

127:                                              ; preds = %120, %116, %19
  %128 = getelementptr inbounds %struct.vpx_svc_spatial_layer_sync, %struct.vpx_svc_spatial_layer_sync* %22, i64 0, i32 1
  %129 = load i32, i32* %128, align 4
  %130 = trunc i32 %129 to i8
  %131 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %4, i64 0, i32 104, i32 56
  store i8 %130, i8* %131, align 4
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @ctrl_set_delta_q_uv(%struct.vpx_codec_alg_priv*, %struct.__va_list_tag* nocapture) #1 {
  %3 = alloca %struct.vp9_extracfg, align 4
  %4 = bitcast %struct.vp9_extracfg* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %4) #9
  %5 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 2
  %6 = bitcast %struct.vp9_extracfg* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %4, i8* align 8 %6, i64 128, i1 false)
  %7 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 0
  %8 = load i32, i32* %7, align 8
  %9 = icmp ult i32 %8, 41
  br i1 %9, label %10, label %16

10:                                               ; preds = %2
  %11 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 3
  %12 = load i8*, i8** %11, align 8
  %13 = sext i32 %8 to i64
  %14 = getelementptr i8, i8* %12, i64 %13
  %15 = add nuw nsw i32 %8, 8
  store i32 %15, i32* %7, align 8
  br label %20

16:                                               ; preds = %2
  %17 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 2
  %18 = load i8*, i8** %17, align 8
  %19 = getelementptr i8, i8* %18, i64 8
  store i8* %19, i8** %17, align 8
  br label %20

20:                                               ; preds = %16, %10
  %21 = phi i8* [ %14, %10 ], [ %18, %16 ]
  %22 = bitcast i8* %21 to i32*
  %23 = load i32, i32* %22, align 4
  %24 = icmp sgt i32 %23, -15
  %25 = select i1 %24, i32 %23, i32 -15
  %26 = icmp slt i32 %25, 15
  %27 = select i1 %26, i32 %25, i32 15
  %28 = getelementptr inbounds %struct.vp9_extracfg, %struct.vp9_extracfg* %3, i64 0, i32 31
  store i32 %27, i32* %28, align 4
  %29 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 1
  %30 = call fastcc i32 @validate_config(%struct.vpx_codec_alg_priv* %0, %struct.vpx_codec_enc_cfg* %29, %struct.vp9_extracfg* nonnull %3) #9
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %32, label %36

32:                                               ; preds = %20
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* nonnull align 4 %4, i64 128, i1 false) #9
  %33 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 6
  call fastcc void @set_encoder_config(%struct.VP9EncoderConfig* %33, %struct.vpx_codec_enc_cfg* %29, %struct.vp9_extracfg* %5) #9
  %34 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 7
  %35 = load %struct.VP9_COMP*, %struct.VP9_COMP** %34, align 8
  call void @vp9_change_config(%struct.VP9_COMP* %35, %struct.VP9EncoderConfig* %33) #9
  br label %36

36:                                               ; preds = %20, %32
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %4) #9
  ret i32 %30
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i32 @ctrl_set_disable_loopfilter(%struct.vpx_codec_alg_priv* nocapture readonly, %struct.__va_list_tag* nocapture) #6 {
  %3 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 7
  %4 = load %struct.VP9_COMP*, %struct.VP9_COMP** %3, align 8
  %5 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 0
  %6 = load i32, i32* %5, align 8
  %7 = icmp ult i32 %6, 41
  br i1 %7, label %8, label %14

8:                                                ; preds = %2
  %9 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 3
  %10 = load i8*, i8** %9, align 8
  %11 = sext i32 %6 to i64
  %12 = getelementptr i8, i8* %10, i64 %11
  %13 = add nuw nsw i32 %6, 8
  store i32 %13, i32* %5, align 8
  br label %18

14:                                               ; preds = %2
  %15 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 2
  %16 = load i8*, i8** %15, align 8
  %17 = getelementptr i8, i8* %16, i64 8
  store i8* %17, i8** %15, align 8
  br label %18

18:                                               ; preds = %14, %8
  %19 = phi i8* [ %12, %8 ], [ %16, %14 ]
  %20 = bitcast i8* %19 to i32*
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %4, i64 0, i32 161
  store i32 %21, i32* %22, align 8
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @ctrl_set_external_rate_control(%struct.vpx_codec_alg_priv* nocapture readonly, %struct.__va_list_tag* nocapture) #1 {
  %3 = alloca %struct.vpx_rc_funcs, align 8
  %4 = alloca %struct.vpx_rc_config, align 8
  %5 = bitcast %struct.vpx_rc_funcs* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %5) #9
  %6 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 0
  %7 = bitcast %struct.vpx_rc_funcs* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %7, i8 -86, i64 48, i1 false)
  %8 = load i32, i32* %6, align 8
  %9 = icmp ult i32 %8, 41
  br i1 %9, label %10, label %16

10:                                               ; preds = %2
  %11 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 3
  %12 = load i8*, i8** %11, align 8
  %13 = sext i32 %8 to i64
  %14 = getelementptr i8, i8* %12, i64 %13
  %15 = add nuw nsw i32 %8, 8
  store i32 %15, i32* %6, align 8
  br label %20

16:                                               ; preds = %2
  %17 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 2
  %18 = load i8*, i8** %17, align 8
  %19 = getelementptr i8, i8* %18, i64 8
  store i8* %19, i8** %17, align 8
  br label %20

20:                                               ; preds = %10, %16
  %21 = phi i8* [ %14, %10 ], [ %18, %16 ]
  %22 = bitcast i8* %21 to i8**
  %23 = load i8*, i8** %22, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %5, i8* align 8 %23, i64 48, i1 false)
  %24 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 7
  %25 = load %struct.VP9_COMP*, %struct.VP9_COMP** %24, align 8
  %26 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %25, i64 0, i32 9, i32 16
  %27 = load i32, i32* %26, align 4
  %28 = icmp eq i32 %27, 2
  br i1 %28, label %29, label %55

29:                                               ; preds = %20
  %30 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %25, i64 0, i32 162
  %31 = bitcast %struct.vpx_rc_config* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %31) #9
  %32 = getelementptr inbounds %struct.vpx_rc_config, %struct.vpx_rc_config* %4, i64 0, i32 0
  %33 = getelementptr inbounds %struct.vpx_rc_config, %struct.vpx_rc_config* %4, i64 0, i32 1
  %34 = getelementptr inbounds %struct.vpx_rc_config, %struct.vpx_rc_config* %4, i64 0, i32 2
  %35 = getelementptr inbounds %struct.vpx_rc_config, %struct.vpx_rc_config* %4, i64 0, i32 3
  %36 = getelementptr inbounds %struct.vpx_rc_config, %struct.vpx_rc_config* %4, i64 0, i32 4
  %37 = getelementptr inbounds %struct.vpx_rc_config, %struct.vpx_rc_config* %4, i64 0, i32 5
  %38 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %25, i64 0, i32 0, i32 0
  %39 = bitcast %struct.vpx_rc_config* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %39, i8 -86, i64 24, i1 false)
  %40 = load i32, i32* %38, align 4
  store i32 %40, i32* %32, align 8
  %41 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %25, i64 0, i32 0, i32 1
  %42 = load i32, i32* %41, align 4
  store i32 %42, i32* %33, align 4
  %43 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %25, i64 0, i32 94, i32 7, i32 1
  %44 = load i32, i32* %43, align 8
  store i32 %44, i32* %34, align 8
  %45 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %25, i64 0, i32 9, i32 8
  %46 = load i64, i64* %45, align 8
  %47 = sdiv i64 %46, 1000
  %48 = trunc i64 %47 to i32
  store i32 %48, i32* %35, align 4
  %49 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %25, i64 0, i32 9, i32 6, i32 1
  %50 = load i32, i32* %49, align 4
  store i32 %50, i32* %36, align 8
  %51 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %25, i64 0, i32 9, i32 6, i32 0
  %52 = load i32, i32* %51, align 8
  store i32 %52, i32* %37, align 4
  %53 = tail call i32 @vp9_extrc_create(%struct.vpx_rc_funcs* nonnull byval(%struct.vpx_rc_funcs) align 8 %3, %struct.vpx_rc_config* nonnull byval(%struct.vpx_rc_config) align 8 %4, %struct.EXT_RATECTRL* %30) #9
  %54 = icmp eq i32 %53, 0
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %31) #9
  br i1 %54, label %55, label %56

55:                                               ; preds = %29, %20
  br label %56

56:                                               ; preds = %29, %55
  %57 = phi i32 [ 0, %55 ], [ %53, %29 ]
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %5) #9
  ret i32 %57
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @ctrl_get_quantizer(%struct.vpx_codec_alg_priv* nocapture readonly, %struct.__va_list_tag* nocapture) #1 {
  %3 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = icmp ult i32 %4, 41
  br i1 %5, label %6, label %12

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 3
  %8 = load i8*, i8** %7, align 8
  %9 = sext i32 %4 to i64
  %10 = getelementptr i8, i8* %8, i64 %9
  %11 = add nuw nsw i32 %4, 8
  store i32 %11, i32* %3, align 8
  br label %16

12:                                               ; preds = %2
  %13 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 2
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr i8, i8* %14, i64 8
  store i8* %15, i8** %13, align 8
  br label %16

16:                                               ; preds = %12, %6
  %17 = phi i8* [ %10, %6 ], [ %14, %12 ]
  %18 = bitcast i8* %17 to i32**
  %19 = load i32*, i32** %18, align 8
  %20 = icmp eq i32* %19, null
  br i1 %20, label %25, label %21

21:                                               ; preds = %16
  %22 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 7
  %23 = load %struct.VP9_COMP*, %struct.VP9_COMP** %22, align 8
  %24 = tail call i32 @vp9_get_quantizer(%struct.VP9_COMP* %23) #9
  store i32 %24, i32* %19, align 4
  br label %25

25:                                               ; preds = %16, %21
  %26 = phi i32 [ 0, %21 ], [ 8, %16 ]
  ret i32 %26
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @ctrl_get_quantizer64(%struct.vpx_codec_alg_priv* nocapture readonly, %struct.__va_list_tag* nocapture) #1 {
  %3 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = icmp ult i32 %4, 41
  br i1 %5, label %6, label %12

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 3
  %8 = load i8*, i8** %7, align 8
  %9 = sext i32 %4 to i64
  %10 = getelementptr i8, i8* %8, i64 %9
  %11 = add nuw nsw i32 %4, 8
  store i32 %11, i32* %3, align 8
  br label %16

12:                                               ; preds = %2
  %13 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 2
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr i8, i8* %14, i64 8
  store i8* %15, i8** %13, align 8
  br label %16

16:                                               ; preds = %12, %6
  %17 = phi i8* [ %10, %6 ], [ %14, %12 ]
  %18 = bitcast i8* %17 to i32**
  %19 = load i32*, i32** %18, align 8
  %20 = icmp eq i32* %19, null
  br i1 %20, label %26, label %21

21:                                               ; preds = %16
  %22 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 7
  %23 = load %struct.VP9_COMP*, %struct.VP9_COMP** %22, align 8
  %24 = tail call i32 @vp9_get_quantizer(%struct.VP9_COMP* %23) #9
  %25 = tail call i32 @vp9_qindex_to_quantizer(i32 %24) #9
  store i32 %25, i32* %19, align 4
  br label %26

26:                                               ; preds = %16, %21
  %27 = phi i32 [ 0, %21 ], [ 8, %16 ]
  ret i32 %27
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @ctrl_get_reference(%struct.vpx_codec_alg_priv* nocapture readonly, %struct.__va_list_tag* nocapture) #1 {
  %3 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = icmp ult i32 %4, 41
  br i1 %5, label %6, label %12

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 3
  %8 = load i8*, i8** %7, align 8
  %9 = sext i32 %4 to i64
  %10 = getelementptr i8, i8* %8, i64 %9
  %11 = add nuw nsw i32 %4, 8
  store i32 %11, i32* %3, align 8
  br label %16

12:                                               ; preds = %2
  %13 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 2
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr i8, i8* %14, i64 8
  store i8* %15, i8** %13, align 8
  br label %16

16:                                               ; preds = %12, %6
  %17 = phi i8* [ %10, %6 ], [ %14, %12 ]
  %18 = bitcast i8* %17 to %struct.vp9_ref_frame**
  %19 = load %struct.vp9_ref_frame*, %struct.vp9_ref_frame** %18, align 8
  %20 = icmp eq %struct.vp9_ref_frame* %19, null
  br i1 %20, label %39, label %21

21:                                               ; preds = %16
  %22 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 7
  %23 = load %struct.VP9_COMP*, %struct.VP9_COMP** %22, align 8
  %24 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %23, i64 0, i32 8, i32 19
  %25 = load i32, i32* %24, align 4
  %26 = icmp ugt i32 %25, 11
  br i1 %26, label %39, label %27

27:                                               ; preds = %21
  %28 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %23, i64 0, i32 8, i32 0, i32 0
  %29 = load i32, i32* %28, align 16
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %31, label %39

31:                                               ; preds = %27
  %32 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %23, i64 0, i32 8, i32 89
  %33 = load %struct.BufferPool*, %struct.BufferPool** %32, align 8
  %34 = sext i32 %25 to i64
  %35 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %33, i64 0, i32 3, i64 %34, i32 8
  %36 = icmp eq %struct.yv12_buffer_config* %35, null
  br i1 %36, label %39, label %37

37:                                               ; preds = %31
  %38 = getelementptr inbounds %struct.vp9_ref_frame, %struct.vp9_ref_frame* %19, i64 0, i32 1
  tail call void @yuvconfig2image(%struct.vpx_image* %38, %struct.yv12_buffer_config* nonnull %35, i8* null) #9
  br label %39

39:                                               ; preds = %27, %21, %16, %37, %31
  %40 = phi i32 [ 0, %37 ], [ 1, %31 ], [ 8, %16 ], [ 1, %21 ], [ 1, %27 ]
  ret i32 %40
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i32 @ctrl_get_svc_layer_id(%struct.vpx_codec_alg_priv* nocapture readonly, %struct.__va_list_tag* nocapture) #6 {
  %3 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = icmp ult i32 %4, 41
  br i1 %5, label %6, label %12

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 3
  %8 = load i8*, i8** %7, align 8
  %9 = sext i32 %4 to i64
  %10 = getelementptr i8, i8* %8, i64 %9
  %11 = add nuw nsw i32 %4, 8
  store i32 %11, i32* %3, align 8
  br label %16

12:                                               ; preds = %2
  %13 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 2
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr i8, i8* %14, i64 8
  store i8* %15, i8** %13, align 8
  br label %16

16:                                               ; preds = %12, %6
  %17 = phi i8* [ %10, %6 ], [ %14, %12 ]
  %18 = bitcast i8* %17 to %struct.vpx_svc_layer_id**
  %19 = load %struct.vpx_svc_layer_id*, %struct.vpx_svc_layer_id** %18, align 8
  %20 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 7
  %21 = load %struct.VP9_COMP*, %struct.VP9_COMP** %20, align 8
  %22 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %21, i64 0, i32 104, i32 0
  %23 = load i32, i32* %22, align 8
  %24 = getelementptr inbounds %struct.vpx_svc_layer_id, %struct.vpx_svc_layer_id* %19, i64 0, i32 0
  store i32 %23, i32* %24, align 4
  %25 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %21, i64 0, i32 104, i32 1
  %26 = load i32, i32* %25, align 4
  %27 = getelementptr inbounds %struct.vpx_svc_layer_id, %struct.vpx_svc_layer_id* %19, i64 0, i32 1
  store i32 %26, i32* %27, align 4
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @ctrl_get_active_map(%struct.vpx_codec_alg_priv* nocapture readonly, %struct.__va_list_tag* nocapture) #1 {
  %3 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = icmp ult i32 %4, 41
  br i1 %5, label %6, label %12

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 3
  %8 = load i8*, i8** %7, align 8
  %9 = sext i32 %4 to i64
  %10 = getelementptr i8, i8* %8, i64 %9
  %11 = add nuw nsw i32 %4, 8
  store i32 %11, i32* %3, align 8
  br label %16

12:                                               ; preds = %2
  %13 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 2
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr i8, i8* %14, i64 8
  store i8* %15, i8** %13, align 8
  br label %16

16:                                               ; preds = %12, %6
  %17 = phi i8* [ %10, %6 ], [ %14, %12 ]
  %18 = bitcast i8* %17 to %struct.vpx_active_map**
  %19 = load %struct.vpx_active_map*, %struct.vpx_active_map** %18, align 8
  %20 = icmp eq %struct.vpx_active_map* %19, null
  br i1 %20, label %33, label %21

21:                                               ; preds = %16
  %22 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 7
  %23 = load %struct.VP9_COMP*, %struct.VP9_COMP** %22, align 8
  %24 = getelementptr inbounds %struct.vpx_active_map, %struct.vpx_active_map* %19, i64 0, i32 0
  %25 = load i8*, i8** %24, align 8
  %26 = getelementptr inbounds %struct.vpx_active_map, %struct.vpx_active_map* %19, i64 0, i32 1
  %27 = load i32, i32* %26, align 8
  %28 = getelementptr inbounds %struct.vpx_active_map, %struct.vpx_active_map* %19, i64 0, i32 2
  %29 = load i32, i32* %28, align 4
  %30 = tail call i32 @vp9_get_active_map(%struct.VP9_COMP* %23, i8* %25, i32 %27, i32 %29) #9
  %31 = icmp eq i32 %30, 0
  %32 = select i1 %31, i32 0, i32 8
  br label %33

33:                                               ; preds = %16, %21
  %34 = phi i32 [ %32, %21 ], [ 8, %16 ]
  ret i32 %34
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @ctrl_get_level(%struct.vpx_codec_alg_priv* nocapture readonly, %struct.__va_list_tag* nocapture) #1 {
  %3 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = icmp ult i32 %4, 41
  br i1 %5, label %6, label %12

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 3
  %8 = load i8*, i8** %7, align 8
  %9 = sext i32 %4 to i64
  %10 = getelementptr i8, i8* %8, i64 %9
  %11 = add nuw nsw i32 %4, 8
  store i32 %11, i32* %3, align 8
  br label %16

12:                                               ; preds = %2
  %13 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 2
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr i8, i8* %14, i64 8
  store i8* %15, i8** %13, align 8
  br label %16

16:                                               ; preds = %12, %6
  %17 = phi i8* [ %10, %6 ], [ %14, %12 ]
  %18 = bitcast i8* %17 to i32**
  %19 = load i32*, i32** %18, align 8
  %20 = icmp eq i32* %19, null
  br i1 %20, label %26, label %21

21:                                               ; preds = %16
  %22 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 7
  %23 = load %struct.VP9_COMP*, %struct.VP9_COMP** %22, align 8
  %24 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %23, i64 0, i32 141, i32 1
  %25 = tail call i32 @vp9_get_level(%struct.Vp9LevelSpec* %24) #9
  store i32 %25, i32* %19, align 4
  br label %26

26:                                               ; preds = %16, %21
  %27 = phi i32 [ 0, %21 ], [ 8, %16 ]
  ret i32 %27
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i32 @ctrl_get_svc_ref_frame_config(%struct.vpx_codec_alg_priv* nocapture readonly, %struct.__va_list_tag* nocapture) #6 {
  %3 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 7
  %4 = load %struct.VP9_COMP*, %struct.VP9_COMP** %3, align 8
  %5 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 0
  %6 = load i32, i32* %5, align 8
  %7 = icmp ult i32 %6, 41
  br i1 %7, label %8, label %14

8:                                                ; preds = %2
  %9 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 3
  %10 = load i8*, i8** %9, align 8
  %11 = sext i32 %6 to i64
  %12 = getelementptr i8, i8* %10, i64 %11
  %13 = add nuw nsw i32 %6, 8
  store i32 %13, i32* %5, align 8
  br label %18

14:                                               ; preds = %2
  %15 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 2
  %16 = load i8*, i8** %15, align 8
  %17 = getelementptr i8, i8* %16, i64 8
  store i8* %17, i8** %15, align 8
  br label %18

18:                                               ; preds = %14, %8
  %19 = phi i8* [ %12, %8 ], [ %16, %14 ]
  %20 = bitcast i8* %19 to %struct.vpx_svc_ref_frame_config**
  %21 = load %struct.vpx_svc_ref_frame_config*, %struct.vpx_svc_ref_frame_config** %20, align 8
  %22 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %4, i64 0, i32 104, i32 0
  %23 = load i32, i32* %22, align 16
  %24 = icmp slt i32 %23, 0
  br i1 %24, label %67, label %25

25:                                               ; preds = %18, %25
  %26 = phi i64 [ %63, %25 ], [ 0, %18 ]
  %27 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %4, i64 0, i32 104, i32 45, i64 %26
  %28 = load i32, i32* %27, align 4
  %29 = getelementptr inbounds %struct.vpx_svc_ref_frame_config, %struct.vpx_svc_ref_frame_config* %21, i64 0, i32 3, i64 %26
  store i32 %28, i32* %29, align 4
  %30 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %4, i64 0, i32 104, i32 46, i64 %26
  %31 = load i8, i8* %30, align 1
  %32 = zext i8 %31 to i32
  %33 = getelementptr inbounds %struct.vpx_svc_ref_frame_config, %struct.vpx_svc_ref_frame_config* %21, i64 0, i32 7, i64 %26
  store i32 %32, i32* %33, align 4
  %34 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %4, i64 0, i32 104, i32 47, i64 %26
  %35 = load i8, i8* %34, align 1
  %36 = zext i8 %35 to i32
  %37 = getelementptr inbounds %struct.vpx_svc_ref_frame_config, %struct.vpx_svc_ref_frame_config* %21, i64 0, i32 8, i64 %26
  store i32 %36, i32* %37, align 4
  %38 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %4, i64 0, i32 104, i32 48, i64 %26
  %39 = load i8, i8* %38, align 1
  %40 = zext i8 %39 to i32
  %41 = getelementptr inbounds %struct.vpx_svc_ref_frame_config, %struct.vpx_svc_ref_frame_config* %21, i64 0, i32 9, i64 %26
  store i32 %40, i32* %41, align 4
  %42 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %4, i64 0, i32 104, i32 15, i64 %26
  %43 = load i32, i32* %42, align 4
  %44 = getelementptr inbounds %struct.vpx_svc_ref_frame_config, %struct.vpx_svc_ref_frame_config* %21, i64 0, i32 0, i64 %26
  store i32 %43, i32* %44, align 4
  %45 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %4, i64 0, i32 104, i32 16, i64 %26
  %46 = load i32, i32* %45, align 4
  %47 = getelementptr inbounds %struct.vpx_svc_ref_frame_config, %struct.vpx_svc_ref_frame_config* %21, i64 0, i32 1, i64 %26
  store i32 %46, i32* %47, align 4
  %48 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %4, i64 0, i32 104, i32 17, i64 %26
  %49 = load i32, i32* %48, align 4
  %50 = getelementptr inbounds %struct.vpx_svc_ref_frame_config, %struct.vpx_svc_ref_frame_config* %21, i64 0, i32 2, i64 %26
  store i32 %49, i32* %50, align 4
  %51 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %4, i64 0, i32 104, i32 49, i64 %26
  %52 = load i8, i8* %51, align 1
  %53 = zext i8 %52 to i32
  %54 = getelementptr inbounds %struct.vpx_svc_ref_frame_config, %struct.vpx_svc_ref_frame_config* %21, i64 0, i32 4, i64 %26
  store i32 %53, i32* %54, align 4
  %55 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %4, i64 0, i32 104, i32 50, i64 %26
  %56 = load i8, i8* %55, align 1
  %57 = zext i8 %56 to i32
  %58 = getelementptr inbounds %struct.vpx_svc_ref_frame_config, %struct.vpx_svc_ref_frame_config* %21, i64 0, i32 5, i64 %26
  store i32 %57, i32* %58, align 4
  %59 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %4, i64 0, i32 104, i32 51, i64 %26
  %60 = load i8, i8* %59, align 1
  %61 = zext i8 %60 to i32
  %62 = getelementptr inbounds %struct.vpx_svc_ref_frame_config, %struct.vpx_svc_ref_frame_config* %21, i64 0, i32 6, i64 %26
  store i32 %61, i32* %62, align 4
  %63 = add nuw nsw i64 %26, 1
  %64 = load i32, i32* %22, align 16
  %65 = sext i32 %64 to i64
  %66 = icmp slt i64 %26, %65
  br i1 %66, label %25, label %67

67:                                               ; preds = %25, %18
  ret i32 0
}

declare i32 @image2yuvconfig(%struct.vpx_image*, %struct.yv12_buffer_config*) local_unnamed_addr #5

declare i32 @vp9_copy_reference_enc(%struct.VP9_COMP*, i32, %struct.yv12_buffer_config*) local_unnamed_addr #5

declare i32 @vp9_set_reference_enc(%struct.VP9_COMP*, i32, %struct.yv12_buffer_config*) local_unnamed_addr #5

declare i32 @vp9_set_roi_map(%struct.VP9_COMP*, i8*, i32, i32, i32*, i32*, i32*, i32*) local_unnamed_addr #5

declare i32 @vp9_set_active_map(%struct.VP9_COMP*, i8*, i32, i32) local_unnamed_addr #5

declare i32 @vp9_set_internal_size(%struct.VP9_COMP*, i32, i32) local_unnamed_addr #5

declare void @vp9_change_config(%struct.VP9_COMP*, %struct.VP9EncoderConfig*) local_unnamed_addr #5

declare void @vp9_set_svc(%struct.VP9_COMP*, i32) local_unnamed_addr #5

declare void @vp9_set_row_mt(%struct.VP9_COMP*) local_unnamed_addr #5

declare i32 @vp9_extrc_create(%struct.vpx_rc_funcs* byval(%struct.vpx_rc_funcs) align 8, %struct.vpx_rc_config* byval(%struct.vpx_rc_config) align 8, %struct.EXT_RATECTRL*) local_unnamed_addr #5

declare i32 @vp9_get_quantizer(%struct.VP9_COMP*) local_unnamed_addr #5

declare i32 @vp9_qindex_to_quantizer(i32) local_unnamed_addr #5

declare void @yuvconfig2image(%struct.vpx_image*, %struct.yv12_buffer_config*, i8*) local_unnamed_addr #5

declare i32 @vp9_get_active_map(%struct.VP9_COMP*, i8*, i32, i32) local_unnamed_addr #5

declare i32 @vp9_get_level(%struct.Vp9LevelSpec*) local_unnamed_addr #5

; Function Attrs: nofree nounwind
declare noalias i8* @malloc(i64) local_unnamed_addr #4

; Function Attrs: nounwind returns_twice
declare i32 @_setjmp(%struct.__jmp_buf_tag*) local_unnamed_addr #8

declare void @vpx_clear_system_state() local_unnamed_addr #5

declare void @vp9_apply_encoding_flags(%struct.VP9_COMP*, i64) local_unnamed_addr #5

declare i32 @vp9_receive_raw_frame(%struct.VP9_COMP*, i64, %struct.yv12_buffer_config*, i64, i64) local_unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #2

declare void @vpx_internal_error(%struct.vpx_internal_error_info*, i32, i8*, ...) local_unnamed_addr #5

declare void @vp9_init_encode_frame_result(%struct.ENCODE_FRAME_RESULT*) local_unnamed_addr #5

declare i32 @vp9_get_compressed_data(%struct.VP9_COMP*, i32*, i64*, i8*, i64*, i64*, i32, %struct.ENCODE_FRAME_RESULT*) local_unnamed_addr #5

declare i32 @vp9_get_psnr(%struct.VP9_COMP*, %struct.vpx_psnr_pkt*) local_unnamed_addr #5

declare i32 @vpx_codec_pkt_list_add(%struct.vpx_codec_pkt_list*, %struct.vpx_codec_cx_pkt*) local_unnamed_addr #5

declare %struct.vpx_codec_cx_pkt* @vpx_codec_pkt_list_get(%struct.vpx_codec_pkt_list*, i8**) local_unnamed_addr #5

declare i32 @vp9_get_preview_raw_frame(%struct.VP9_COMP*, %struct.yv12_buffer_config*, %struct.vp9_ppflags_t*) local_unnamed_addr #5

declare i32 @vp9_quantizer_to_qindex(i32) local_unnamed_addr #5

attributes #0 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind returns_twice "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }
attributes #10 = { nounwind returns_twice }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"get_psnr_pkt: argument 0"}
!4 = distinct !{!4, !"get_psnr_pkt"}
!5 = !{!6}
!6 = distinct !{!6, !7, !"get_enc_cfg: argument 0"}
!7 = distinct !{!7, !"get_enc_cfg"}
!8 = !{!9}
!9 = distinct !{!9, !10}
!10 = distinct !{!10, !"LVerDomain"}
!11 = !{!12}
!12 = distinct !{!12, !10}
!13 = distinct !{!13, !14}
!14 = !{!"llvm.loop.isvectorized", i32 1}
!15 = distinct !{!15, !16}
!16 = !{!"llvm.loop.unroll.disable"}
!17 = distinct !{!17, !14}
!18 = !{!19}
!19 = distinct !{!19, !20}
!20 = distinct !{!20, !"LVerDomain"}
!21 = !{!22}
!22 = distinct !{!22, !20}
!23 = distinct !{!23, !14}
!24 = distinct !{!24, !16}
!25 = distinct !{!25, !14}
!26 = !{!27}
!27 = distinct !{!27, !28}
!28 = distinct !{!28, !"LVerDomain"}
!29 = !{!30}
!30 = distinct !{!30, !28}
!31 = distinct !{!31, !14}
!32 = distinct !{!32, !16}
!33 = distinct !{!33, !14}
