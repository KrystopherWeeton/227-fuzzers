; ModuleID = '../../third_party/boringssl/src/crypto/pem/pem_info.c'
source_filename = "../../third_party/boringssl/src/crypto/pem/pem_info.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.stack_st_X509_INFO = type opaque
%struct.bio_st = type { %struct.bio_method_st*, i32, i32, i32, i32, i32, i32, i8*, %struct.bio_st*, i64, i64 }
%struct.bio_method_st = type { i32, i8*, i32 (%struct.bio_st*, i8*, i32)*, i32 (%struct.bio_st*, i8*, i32)*, i32 (%struct.bio_st*, i8*)*, i32 (%struct.bio_st*, i8*, i32)*, i64 (%struct.bio_st*, i32, i64, i8*)*, i32 (%struct.bio_st*)*, i32 (%struct.bio_st*)*, i64 (%struct.bio_st*, i32, i64 (%struct.bio_st*, i32, i8*, i32, i64, i64)*)* }
%struct.evp_cipher_info_st = type { %struct.evp_cipher_st*, [16 x i8] }
%struct.evp_cipher_st = type { i32, i32, i32, i32, i32, i32, i8*, i32 (%struct.evp_cipher_ctx_st*, i8*, i8*, i32)*, i32 (%struct.evp_cipher_ctx_st*, i8*, i8*, i64)*, void (%struct.evp_cipher_ctx_st*)*, i32 (%struct.evp_cipher_ctx_st*, i32, i32, i8*)* }
%struct.evp_cipher_ctx_st = type { %struct.evp_cipher_st*, i8*, i8*, i32, i32, i32, [16 x i8], [16 x i8], [32 x i8], i32, i32, i32, [32 x i8] }
%struct.stack_st = type { i64, i8**, i32, i64, i32 (i8**, i8**)* }
%struct.X509_info_st = type { %struct.x509_st*, %struct.X509_crl_st*, %struct.private_key_st*, %struct.evp_cipher_info_st, i32, i8* }
%struct.x509_st = type { %struct.x509_cinf_st*, %struct.X509_algor_st*, %struct.asn1_string_st*, i32, %struct.crypto_ex_data_st, i64, i64, i64, i64, i64, i64, %struct.asn1_string_st*, %struct.AUTHORITY_KEYID_st*, %struct.X509_POLICY_CACHE_st*, %struct.stack_st_DIST_POINT*, %struct.stack_st_GENERAL_NAME*, %struct.NAME_CONSTRAINTS_st*, [20 x i8], %struct.x509_cert_aux_st*, %struct.crypto_buffer_st*, %union.crypto_mutex_st }
%struct.x509_cinf_st = type { %struct.asn1_string_st*, %struct.asn1_string_st*, %struct.X509_algor_st*, %struct.X509_name_st*, %struct.X509_val_st*, %struct.X509_name_st*, %struct.X509_pubkey_st*, %struct.asn1_string_st*, %struct.asn1_string_st*, %struct.stack_st_X509_EXTENSION*, %struct.ASN1_ENCODING_st }
%struct.X509_val_st = type opaque
%struct.X509_name_st = type { %struct.stack_st_X509_NAME_ENTRY*, i32, %struct.buf_mem_st*, i8*, i32 }
%struct.stack_st_X509_NAME_ENTRY = type opaque
%struct.buf_mem_st = type { i64, i8*, i64 }
%struct.X509_pubkey_st = type opaque
%struct.stack_st_X509_EXTENSION = type opaque
%struct.ASN1_ENCODING_st = type { i8*, i64, i32, i8 }
%struct.X509_algor_st = type { %struct.asn1_object_st*, %struct.asn1_type_st* }
%struct.asn1_object_st = type { i8*, i8*, i32, i32, i8*, i32 }
%struct.asn1_type_st = type { i32, %union.anon }
%union.anon = type { i8* }
%struct.crypto_ex_data_st = type { %struct.stack_st_void* }
%struct.stack_st_void = type opaque
%struct.asn1_string_st = type { i32, i32, i8*, i64 }
%struct.AUTHORITY_KEYID_st = type opaque
%struct.X509_POLICY_CACHE_st = type opaque
%struct.stack_st_DIST_POINT = type opaque
%struct.stack_st_GENERAL_NAME = type opaque
%struct.NAME_CONSTRAINTS_st = type opaque
%struct.x509_cert_aux_st = type opaque
%struct.crypto_buffer_st = type opaque
%union.crypto_mutex_st = type { double, [48 x i8] }
%struct.X509_crl_st = type { %struct.X509_crl_info_st*, %struct.X509_algor_st*, %struct.asn1_string_st*, i32, i32, %struct.AUTHORITY_KEYID_st*, %struct.ISSUING_DIST_POINT_st*, i32, i32, %struct.asn1_string_st*, %struct.asn1_string_st*, [20 x i8], %struct.stack_st_GENERAL_NAMES*, %struct.x509_crl_method_st*, i8* }
%struct.X509_crl_info_st = type { %struct.asn1_string_st*, %struct.X509_algor_st*, %struct.X509_name_st*, %struct.asn1_string_st*, %struct.asn1_string_st*, %struct.stack_st_X509_REVOKED*, %struct.stack_st_X509_EXTENSION*, %struct.ASN1_ENCODING_st }
%struct.stack_st_X509_REVOKED = type opaque
%struct.ISSUING_DIST_POINT_st = type opaque
%struct.stack_st_GENERAL_NAMES = type opaque
%struct.x509_crl_method_st = type opaque
%struct.private_key_st = type { i32, %struct.X509_algor_st*, %struct.asn1_string_st*, %struct.evp_pkey_st*, i32, i8*, i32, %struct.evp_cipher_info_st }
%struct.evp_pkey_st = type { i32, i32, %union.anon.0, %struct.evp_pkey_asn1_method_st* }
%union.anon.0 = type { i8* }
%struct.evp_pkey_asn1_method_st = type opaque
%struct.rsa_st = type { %struct.rsa_meth_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.crypto_ex_data_st, i32, i32, %union.crypto_mutex_st, %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.bignum_st*, i32, %struct.bn_blinding_st**, i8*, i64, i8 }
%struct.rsa_meth_st = type { %struct.openssl_method_common_st, i8*, i32 (%struct.rsa_st*)*, i32 (%struct.rsa_st*)*, i64 (%struct.rsa_st*)*, i32 (i32, i8*, i32, i8*, i32*, %struct.rsa_st*)*, i32 (%struct.rsa_st*, i64*, i8*, i64, i8*, i64, i32)*, i32 (%struct.rsa_st*, i64*, i8*, i64, i8*, i64, i32)*, i32 (%struct.rsa_st*, i8*, i8*, i64)*, i32 }
%struct.openssl_method_common_st = type { i32, i8 }
%struct.bn_mont_ctx_st = type { %struct.bignum_st, %struct.bignum_st, [2 x i64] }
%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
%struct.bn_blinding_st = type opaque

@.str = private unnamed_addr constant [54 x i8] c"../../third_party/boringssl/src/crypto/pem/pem_info.c\00", align 1
@.str.1 = private unnamed_addr constant [12 x i8] c"CERTIFICATE\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"X509 CERTIFICATE\00", align 1
@.str.3 = private unnamed_addr constant [20 x i8] c"TRUSTED CERTIFICATE\00", align 1
@.str.4 = private unnamed_addr constant [9 x i8] c"X509 CRL\00", align 1
@.str.5 = private unnamed_addr constant [16 x i8] c"RSA PRIVATE KEY\00", align 1
@.str.6 = private unnamed_addr constant [16 x i8] c"DSA PRIVATE KEY\00", align 1
@.str.7 = private unnamed_addr constant [15 x i8] c"EC PRIVATE KEY\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden %struct.stack_st_X509_INFO* @PEM_X509_INFO_read(%struct._IO_FILE*, %struct.stack_st_X509_INFO*, i32 (i8*, i32, i32, i8*)*, i8*) local_unnamed_addr #0 {
  %5 = tail call %struct.bio_st* @BIO_new_fp(%struct._IO_FILE* %0, i32 0) #5
  %6 = icmp eq %struct.bio_st* %5, null
  br i1 %6, label %7, label %8

7:                                                ; preds = %4
  tail call void @ERR_put_error(i32 9, i32 0, i32 7, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str, i64 0, i64 0), i32 79) #5
  br label %11

8:                                                ; preds = %4
  %9 = tail call %struct.stack_st_X509_INFO* @PEM_X509_INFO_read_bio(%struct.bio_st* nonnull %5, %struct.stack_st_X509_INFO* %1, i32 (i8*, i32, i32, i8*)* %2, i8* %3)
  %10 = tail call i32 @BIO_free(%struct.bio_st* nonnull %5) #5
  br label %11

11:                                               ; preds = %8, %7
  %12 = phi %struct.stack_st_X509_INFO* [ null, %7 ], [ %9, %8 ]
  ret %struct.stack_st_X509_INFO* %12
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare %struct.bio_st* @BIO_new_fp(%struct._IO_FILE*, i32) local_unnamed_addr #2

declare void @ERR_put_error(i32, i32, i32, i8*, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden %struct.stack_st_X509_INFO* @PEM_X509_INFO_read_bio(%struct.bio_st*, %struct.stack_st_X509_INFO*, i32 (i8*, i32, i32, i8*)*, i8*) local_unnamed_addr #0 {
  %5 = alloca i8*, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i64, align 8
  %9 = alloca %struct.evp_cipher_info_st, align 8
  %10 = bitcast i8** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10) #5
  store i8* null, i8** %5, align 8
  %11 = bitcast i8** %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11) #5
  store i8* null, i8** %6, align 8
  %12 = bitcast i8** %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %12) #5
  store i8* null, i8** %7, align 8
  %13 = bitcast i64* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %13) #5
  store i64 -6148914691236517206, i64* %8, align 8
  %14 = icmp eq %struct.stack_st_X509_INFO* %1, null
  br i1 %14, label %15, label %20

15:                                               ; preds = %4
  %16 = tail call %struct.stack_st* @sk_new_null() #5
  %17 = bitcast %struct.stack_st* %16 to %struct.stack_st_X509_INFO*
  %18 = icmp eq %struct.stack_st* %16, null
  br i1 %18, label %19, label %20

19:                                               ; preds = %15
  tail call void @ERR_put_error(i32 9, i32 0, i32 65, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str, i64 0, i64 0), i32 151) #5
  br label %178

20:                                               ; preds = %4, %15
  %21 = phi %struct.stack_st_X509_INFO* [ %17, %15 ], [ %1, %4 ]
  %22 = bitcast %struct.stack_st_X509_INFO* %21 to %struct.stack_st*
  %23 = tail call i64 @sk_num(%struct.stack_st* %22) #5
  %24 = tail call %struct.X509_info_st* @X509_INFO_new() #5
  %25 = icmp eq %struct.X509_info_st* %24, null
  br i1 %25, label %158, label %26

26:                                               ; preds = %20
  %27 = call i32 @PEM_read_bio(%struct.bio_st* %0, i8** nonnull %5, i8** nonnull %6, i8** nonnull %7, i64* nonnull %8) #5
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %33, label %29

29:                                               ; preds = %26
  %30 = bitcast i8** %7 to i64*
  %31 = bitcast %struct.evp_cipher_info_st* %9 to i8*
  %32 = bitcast %struct.evp_cipher_info_st* %9 to i8*
  br label %38

33:                                               ; preds = %128, %26
  %34 = phi %struct.X509_info_st* [ %24, %26 ], [ %129, %128 ]
  %35 = call i32 @ERR_peek_last_error() #5
  %36 = and i32 %35, -16773121
  %37 = icmp eq i32 %36, 150995054
  br i1 %37, label %135, label %161

38:                                               ; preds = %29, %128
  %39 = phi %struct.X509_info_st* [ %24, %29 ], [ %129, %128 ]
  %40 = load i8*, i8** %5, align 8
  %41 = call i32 @strcmp(i8* %40, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.1, i64 0, i64 0)) #6
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %94, label %43

43:                                               ; preds = %38
  %44 = call i32 @strcmp(i8* %40, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.2, i64 0, i64 0)) #6
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %94, label %46

46:                                               ; preds = %43
  %47 = call i32 @strcmp(i8* %40, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i64 0, i64 0)) #6
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %94, label %49

49:                                               ; preds = %46
  %50 = call i32 @strcmp(i8* %40, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.4, i64 0, i64 0)) #6
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %94, label %52

52:                                               ; preds = %49
  %53 = call i32 @strcmp(i8* %40, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.5, i64 0, i64 0)) #6
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %61, label %55

55:                                               ; preds = %52
  %56 = call i32 @strcmp(i8* %40, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.6, i64 0, i64 0)) #6
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %61, label %58

58:                                               ; preds = %55
  %59 = call i32 @strcmp(i8* %40, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.7, i64 0, i64 0)) #6
  %60 = icmp eq i32 %59, 0
  br i1 %60, label %61, label %128

61:                                               ; preds = %58, %52, %55
  %62 = phi i32 [ 6, %52 ], [ 116, %55 ], [ 408, %58 ]
  %63 = load i8*, i8** %6, align 8
  %64 = call i64 @strlen(i8* %63) #6
  %65 = icmp ugt i64 %64, 10
  br i1 %65, label %66, label %94

66:                                               ; preds = %61
  %67 = getelementptr inbounds %struct.X509_info_st, %struct.X509_info_st* %39, i64 0, i32 2
  %68 = load %struct.private_key_st*, %struct.private_key_st** %67, align 8
  %69 = icmp eq %struct.private_key_st* %68, null
  br i1 %69, label %77, label %70

70:                                               ; preds = %66
  %71 = bitcast %struct.X509_info_st* %39 to i8*
  %72 = call i64 @sk_push(%struct.stack_st* %22, i8* %71) #5
  %73 = icmp eq i64 %72, 0
  br i1 %73, label %159, label %74

74:                                               ; preds = %70
  %75 = call %struct.X509_info_st* @X509_INFO_new() #5
  %76 = icmp eq %struct.X509_info_st* %75, null
  br i1 %76, label %159, label %77

77:                                               ; preds = %66, %74
  %78 = phi %struct.X509_info_st* [ %75, %74 ], [ %39, %66 ]
  %79 = call %struct.private_key_st* @X509_PKEY_new() #5
  %80 = getelementptr inbounds %struct.X509_info_st, %struct.X509_info_st* %78, i64 0, i32 2
  store %struct.private_key_st* %79, %struct.private_key_st** %80, align 8
  %81 = icmp eq %struct.private_key_st* %79, null
  br i1 %81, label %159, label %82

82:                                               ; preds = %77
  %83 = load i8*, i8** %6, align 8
  %84 = getelementptr inbounds %struct.X509_info_st, %struct.X509_info_st* %78, i64 0, i32 3
  %85 = call i32 @PEM_get_EVP_CIPHER_INFO(i8* %83, %struct.evp_cipher_info_st* %84) #5
  %86 = icmp eq i32 %85, 0
  br i1 %86, label %159, label %87

87:                                               ; preds = %82
  %88 = load i64, i64* %30, align 8
  %89 = getelementptr inbounds %struct.X509_info_st, %struct.X509_info_st* %78, i64 0, i32 5
  %90 = bitcast i8** %89 to i64*
  store i64 %88, i64* %90, align 8
  %91 = load i64, i64* %8, align 8
  %92 = trunc i64 %91 to i32
  %93 = getelementptr inbounds %struct.X509_info_st, %struct.X509_info_st* %78, i64 0, i32 4
  store i32 %92, i32* %93, align 8
  store i8* null, i8** %7, align 8
  br label %128

94:                                               ; preds = %61, %43, %38, %46, %49
  %95 = phi i32 (%struct.X509_info_st*, i8*, i64, i32)* [ @parse_x509, %43 ], [ @parse_x509, %38 ], [ @parse_x509_aux, %46 ], [ @parse_crl, %49 ], [ @parse_key, %61 ]
  %96 = phi i32 [ 0, %43 ], [ 0, %38 ], [ 0, %46 ], [ 0, %49 ], [ %62, %61 ]
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %31) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %32, i8 -86, i64 24, i1 false)
  %97 = load i8*, i8** %6, align 8
  %98 = call i32 @PEM_get_EVP_CIPHER_INFO(i8* %97, %struct.evp_cipher_info_st* nonnull %9) #5
  %99 = icmp eq i32 %98, 0
  br i1 %99, label %125, label %100

100:                                              ; preds = %94
  %101 = load i8*, i8** %7, align 8
  %102 = call i32 @PEM_do_header(%struct.evp_cipher_info_st* nonnull %9, i8* %101, i64* nonnull %8, i32 (i8*, i32, i32, i8*)* %2, i8* %3) #5
  %103 = icmp eq i32 %102, 0
  br i1 %103, label %125, label %104

104:                                              ; preds = %100
  %105 = load i8*, i8** %7, align 8
  %106 = load i64, i64* %8, align 8
  %107 = call i32 %95(%struct.X509_info_st* %39, i8* %105, i64 %106, i32 %96) #5, !callees !2
  %108 = icmp eq i32 %107, 2
  br i1 %108, label %109, label %120

109:                                              ; preds = %104
  %110 = bitcast %struct.X509_info_st* %39 to i8*
  %111 = call i64 @sk_push(%struct.stack_st* %22, i8* %110) #5
  %112 = icmp eq i64 %111, 0
  br i1 %112, label %125, label %113

113:                                              ; preds = %109
  %114 = call %struct.X509_info_st* @X509_INFO_new() #5
  %115 = icmp eq %struct.X509_info_st* %114, null
  br i1 %115, label %125, label %116

116:                                              ; preds = %113
  %117 = load i8*, i8** %7, align 8
  %118 = load i64, i64* %8, align 8
  %119 = call i32 %95(%struct.X509_info_st* nonnull %114, i8* %117, i64 %118, i32 %96) #5, !callees !2
  br label %120

120:                                              ; preds = %116, %104
  %121 = phi %struct.X509_info_st* [ %114, %116 ], [ %39, %104 ]
  %122 = phi i32 [ %119, %116 ], [ %107, %104 ]
  %123 = icmp eq i32 %122, 0
  br i1 %123, label %127, label %124

124:                                              ; preds = %120
  call void @ERR_put_error(i32 9, i32 0, i32 12, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str, i64 0, i64 0), i32 235) #5
  br label %125

125:                                              ; preds = %100, %94, %109, %113, %124
  %126 = phi %struct.X509_info_st* [ %121, %124 ], [ null, %113 ], [ %39, %109 ], [ %39, %94 ], [ %39, %100 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %31) #5
  br label %159

127:                                              ; preds = %120
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %31) #5
  br label %128

128:                                              ; preds = %58, %87, %127
  %129 = phi %struct.X509_info_st* [ %78, %87 ], [ %121, %127 ], [ %39, %58 ]
  %130 = load i8*, i8** %5, align 8
  call void @OPENSSL_free(i8* %130) #5
  %131 = load i8*, i8** %6, align 8
  call void @OPENSSL_free(i8* %131) #5
  %132 = load i8*, i8** %7, align 8
  call void @OPENSSL_free(i8* %132) #5
  store i8* null, i8** %5, align 8
  store i8* null, i8** %6, align 8
  store i8* null, i8** %7, align 8
  %133 = call i32 @PEM_read_bio(%struct.bio_st* %0, i8** nonnull %5, i8** nonnull %6, i8** nonnull %7, i64* nonnull %8) #5
  %134 = icmp eq i32 %133, 0
  br i1 %134, label %33, label %38

135:                                              ; preds = %33
  call void @ERR_clear_error() #5
  %136 = getelementptr inbounds %struct.X509_info_st, %struct.X509_info_st* %34, i64 0, i32 0
  %137 = load %struct.x509_st*, %struct.x509_st** %136, align 8
  %138 = icmp eq %struct.x509_st* %137, null
  br i1 %138, label %139, label %151

139:                                              ; preds = %135
  %140 = getelementptr inbounds %struct.X509_info_st, %struct.X509_info_st* %34, i64 0, i32 1
  %141 = load %struct.X509_crl_st*, %struct.X509_crl_st** %140, align 8
  %142 = icmp eq %struct.X509_crl_st* %141, null
  br i1 %142, label %143, label %151

143:                                              ; preds = %139
  %144 = getelementptr inbounds %struct.X509_info_st, %struct.X509_info_st* %34, i64 0, i32 2
  %145 = load %struct.private_key_st*, %struct.private_key_st** %144, align 8
  %146 = icmp eq %struct.private_key_st* %145, null
  br i1 %146, label %147, label %151

147:                                              ; preds = %143
  %148 = getelementptr inbounds %struct.X509_info_st, %struct.X509_info_st* %34, i64 0, i32 5
  %149 = load i8*, i8** %148, align 8
  %150 = icmp eq i8* %149, null
  br i1 %150, label %155, label %151

151:                                              ; preds = %147, %143, %139, %135
  %152 = bitcast %struct.X509_info_st* %34 to i8*
  %153 = call i64 @sk_push(%struct.stack_st* %22, i8* %152) #5
  %154 = icmp eq i64 %153, 0
  br i1 %154, label %157, label %155

155:                                              ; preds = %151, %147
  %156 = phi %struct.X509_info_st* [ %34, %147 ], [ null, %151 ]
  call void @X509_INFO_free(%struct.X509_info_st* %156) #5
  br label %173

157:                                              ; preds = %151
  call void @X509_INFO_free(%struct.X509_info_st* %34) #5
  br label %162

158:                                              ; preds = %20
  tail call void @X509_INFO_free(%struct.X509_info_st* null) #5
  br label %162

159:                                              ; preds = %70, %74, %82, %77, %125
  %160 = phi %struct.X509_info_st* [ %126, %125 ], [ %39, %70 ], [ null, %74 ], [ %78, %82 ], [ %78, %77 ]
  call void @X509_INFO_free(%struct.X509_info_st* %160) #5
  br label %162

161:                                              ; preds = %33
  call void @X509_INFO_free(%struct.X509_info_st* %34) #5
  br label %162

162:                                              ; preds = %158, %159, %161, %157
  %163 = call i64 @sk_num(%struct.stack_st* %22) #5
  %164 = icmp ugt i64 %163, %23
  br i1 %164, label %165, label %170

165:                                              ; preds = %162, %165
  %166 = call i8* @sk_pop(%struct.stack_st* %22) #5
  %167 = bitcast i8* %166 to %struct.X509_info_st*
  call void @X509_INFO_free(%struct.X509_info_st* %167) #5
  %168 = call i64 @sk_num(%struct.stack_st* %22) #5
  %169 = icmp ugt i64 %168, %23
  br i1 %169, label %165, label %170

170:                                              ; preds = %165, %162
  %171 = icmp eq %struct.stack_st_X509_INFO* %21, %1
  br i1 %171, label %173, label %172

172:                                              ; preds = %170
  call void @sk_free(%struct.stack_st* %22) #5
  br label %173

173:                                              ; preds = %172, %170, %155
  %174 = phi %struct.stack_st_X509_INFO* [ %21, %155 ], [ null, %170 ], [ null, %172 ]
  %175 = load i8*, i8** %5, align 8
  call void @OPENSSL_free(i8* %175) #5
  %176 = load i8*, i8** %6, align 8
  call void @OPENSSL_free(i8* %176) #5
  %177 = load i8*, i8** %7, align 8
  call void @OPENSSL_free(i8* %177) #5
  br label %178

178:                                              ; preds = %173, %19
  %179 = phi %struct.stack_st_X509_INFO* [ null, %19 ], [ %174, %173 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %13) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10) #5
  ret %struct.stack_st_X509_INFO* %179
}

declare i32 @BIO_free(%struct.bio_st*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare %struct.X509_info_st* @X509_INFO_new() local_unnamed_addr #2

declare i32 @PEM_read_bio(%struct.bio_st*, i8**, i8**, i8**, i64*) local_unnamed_addr #2

declare i32 @ERR_peek_last_error() local_unnamed_addr #2

declare void @ERR_clear_error() local_unnamed_addr #2

; Function Attrs: nofree nounwind readonly
declare i32 @strcmp(i8* nocapture, i8* nocapture) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define internal i32 @parse_x509(%struct.X509_info_st* nocapture, i8*, i64, i32) unnamed_addr #0 {
  %5 = alloca i8*, align 8
  store i8* %1, i8** %5, align 8
  %6 = getelementptr inbounds %struct.X509_info_st, %struct.X509_info_st* %0, i64 0, i32 0
  %7 = load %struct.x509_st*, %struct.x509_st** %6, align 8
  %8 = icmp eq %struct.x509_st* %7, null
  br i1 %8, label %9, label %13

9:                                                ; preds = %4
  %10 = call %struct.x509_st* @d2i_X509(%struct.x509_st** null, i8** nonnull %5, i64 %2) #5
  store %struct.x509_st* %10, %struct.x509_st** %6, align 8
  %11 = icmp eq %struct.x509_st* %10, null
  %12 = zext i1 %11 to i32
  br label %13

13:                                               ; preds = %4, %9
  %14 = phi i32 [ %12, %9 ], [ 2, %4 ]
  ret i32 %14
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @parse_x509_aux(%struct.X509_info_st* nocapture, i8*, i64, i32) unnamed_addr #0 {
  %5 = alloca i8*, align 8
  store i8* %1, i8** %5, align 8
  %6 = getelementptr inbounds %struct.X509_info_st, %struct.X509_info_st* %0, i64 0, i32 0
  %7 = load %struct.x509_st*, %struct.x509_st** %6, align 8
  %8 = icmp eq %struct.x509_st* %7, null
  br i1 %8, label %9, label %13

9:                                                ; preds = %4
  %10 = call %struct.x509_st* @d2i_X509_AUX(%struct.x509_st** null, i8** nonnull %5, i64 %2) #5
  store %struct.x509_st* %10, %struct.x509_st** %6, align 8
  %11 = icmp eq %struct.x509_st* %10, null
  %12 = zext i1 %11 to i32
  br label %13

13:                                               ; preds = %4, %9
  %14 = phi i32 [ %12, %9 ], [ 2, %4 ]
  ret i32 %14
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @parse_crl(%struct.X509_info_st* nocapture, i8*, i64, i32) unnamed_addr #0 {
  %5 = alloca i8*, align 8
  store i8* %1, i8** %5, align 8
  %6 = getelementptr inbounds %struct.X509_info_st, %struct.X509_info_st* %0, i64 0, i32 1
  %7 = load %struct.X509_crl_st*, %struct.X509_crl_st** %6, align 8
  %8 = icmp eq %struct.X509_crl_st* %7, null
  br i1 %8, label %9, label %13

9:                                                ; preds = %4
  %10 = call %struct.X509_crl_st* @d2i_X509_CRL(%struct.X509_crl_st** null, i8** nonnull %5, i64 %2) #5
  store %struct.X509_crl_st* %10, %struct.X509_crl_st** %6, align 8
  %11 = icmp eq %struct.X509_crl_st* %10, null
  %12 = zext i1 %11 to i32
  br label %13

13:                                               ; preds = %4, %9
  %14 = phi i32 [ %12, %9 ], [ 2, %4 ]
  ret i32 %14
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @parse_key(%struct.X509_info_st* nocapture, i8*, i64, i32) unnamed_addr #0 {
  %5 = alloca i8*, align 8
  store i8* %1, i8** %5, align 8
  %6 = getelementptr inbounds %struct.X509_info_st, %struct.X509_info_st* %0, i64 0, i32 2
  %7 = load %struct.private_key_st*, %struct.private_key_st** %6, align 8
  %8 = icmp eq %struct.private_key_st* %7, null
  br i1 %8, label %9, label %21

9:                                                ; preds = %4
  %10 = tail call %struct.private_key_st* @X509_PKEY_new() #5
  store %struct.private_key_st* %10, %struct.private_key_st** %6, align 8
  %11 = icmp eq %struct.private_key_st* %10, null
  br i1 %11, label %21, label %12

12:                                               ; preds = %9
  %13 = call %struct.evp_pkey_st* @d2i_PrivateKey(i32 %3, %struct.evp_pkey_st** null, i8** nonnull %5, i64 %2) #5
  %14 = load %struct.private_key_st*, %struct.private_key_st** %6, align 8
  %15 = getelementptr inbounds %struct.private_key_st, %struct.private_key_st* %14, i64 0, i32 3
  store %struct.evp_pkey_st* %13, %struct.evp_pkey_st** %15, align 8
  %16 = load %struct.private_key_st*, %struct.private_key_st** %6, align 8
  %17 = getelementptr inbounds %struct.private_key_st, %struct.private_key_st* %16, i64 0, i32 3
  %18 = load %struct.evp_pkey_st*, %struct.evp_pkey_st** %17, align 8
  %19 = icmp eq %struct.evp_pkey_st* %18, null
  %20 = zext i1 %19 to i32
  br label %21

21:                                               ; preds = %9, %4, %12
  %22 = phi i32 [ %20, %12 ], [ 2, %4 ], [ 1, %9 ]
  ret i32 %22
}

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #4

declare %struct.private_key_st* @X509_PKEY_new() local_unnamed_addr #2

declare i32 @PEM_get_EVP_CIPHER_INFO(i8*, %struct.evp_cipher_info_st*) local_unnamed_addr #2

declare i32 @PEM_do_header(%struct.evp_cipher_info_st*, i8*, i64*, i32 (i8*, i32, i32, i8*)*, i8*) local_unnamed_addr #2

declare void @OPENSSL_free(i8*) local_unnamed_addr #2

declare void @X509_INFO_free(%struct.X509_info_st*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @PEM_X509_INFO_write_bio(%struct.bio_st*, %struct.X509_info_st*, %struct.evp_cipher_st*, i8*, i32, i32 (i8*, i32, i32, i8*)*, i8*) local_unnamed_addr #0 {
  %8 = alloca [1024 x i8], align 16
  %9 = getelementptr inbounds [1024 x i8], [1024 x i8]* %8, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %9) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %9, i8 -86, i64 1024, i1 false)
  %10 = icmp eq %struct.evp_cipher_st* %2, null
  br i1 %10, label %17, label %11

11:                                               ; preds = %7
  %12 = tail call i32 @EVP_CIPHER_iv_length(%struct.evp_cipher_st* nonnull %2) #5
  %13 = tail call i32 @EVP_CIPHER_nid(%struct.evp_cipher_st* nonnull %2) #5
  %14 = tail call i8* @OBJ_nid2sn(i32 %13) #5
  %15 = icmp eq i8* %14, null
  br i1 %15, label %16, label %17

16:                                               ; preds = %11
  tail call void @ERR_put_error(i32 9, i32 0, i32 113, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str, i64 0, i64 0), i32 292) #5
  br label %60

17:                                               ; preds = %7, %11
  %18 = phi i32 [ %12, %11 ], [ 0, %7 ]
  %19 = getelementptr inbounds %struct.X509_info_st, %struct.X509_info_st* %1, i64 0, i32 2
  %20 = load %struct.private_key_st*, %struct.private_key_st** %19, align 8
  %21 = icmp eq %struct.private_key_st* %20, null
  br i1 %21, label %52, label %22

22:                                               ; preds = %17
  %23 = getelementptr inbounds %struct.X509_info_st, %struct.X509_info_st* %1, i64 0, i32 5
  %24 = load i8*, i8** %23, align 8
  %25 = icmp eq i8* %24, null
  br i1 %25, label %44, label %26

26:                                               ; preds = %22
  %27 = getelementptr inbounds %struct.X509_info_st, %struct.X509_info_st* %1, i64 0, i32 4
  %28 = load i32, i32* %27, align 8
  %29 = icmp sgt i32 %28, 0
  br i1 %29, label %30, label %44

30:                                               ; preds = %26
  br i1 %10, label %31, label %32

31:                                               ; preds = %30
  tail call void @ERR_put_error(i32 9, i32 0, i32 105, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str, i64 0, i64 0), i32 305) #5
  br label %60

32:                                               ; preds = %30
  %33 = getelementptr inbounds %struct.X509_info_st, %struct.X509_info_st* %1, i64 0, i32 3, i32 0
  %34 = load %struct.evp_cipher_st*, %struct.evp_cipher_st** %33, align 8
  %35 = tail call i32 @EVP_CIPHER_nid(%struct.evp_cipher_st* %34) #5
  %36 = tail call i8* @OBJ_nid2sn(i32 %35) #5
  %37 = icmp eq i8* %36, null
  br i1 %37, label %38, label %39

38:                                               ; preds = %32
  tail call void @ERR_put_error(i32 9, i32 0, i32 113, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str, i64 0, i64 0), i32 321) #5
  br label %60

39:                                               ; preds = %32
  %40 = getelementptr inbounds %struct.X509_info_st, %struct.X509_info_st* %1, i64 0, i32 3, i32 1, i64 0
  store i8 0, i8* %9, align 16
  call void @PEM_proc_type(i8* nonnull %9, i32 10) #5
  call void @PEM_dek_info(i8* nonnull %9, i8* nonnull %36, i32 %18, i8* %40) #5
  %41 = sext i32 %28 to i64
  %42 = call i32 @PEM_write_bio(%struct.bio_st* %0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.5, i64 0, i64 0), i8* nonnull %9, i8* nonnull %24, i64 %41) #5
  %43 = icmp slt i32 %42, 1
  br i1 %43, label %60, label %52

44:                                               ; preds = %22, %26
  %45 = getelementptr inbounds %struct.private_key_st, %struct.private_key_st* %20, i64 0, i32 3
  %46 = load %struct.evp_pkey_st*, %struct.evp_pkey_st** %45, align 8
  %47 = getelementptr inbounds %struct.evp_pkey_st, %struct.evp_pkey_st* %46, i64 0, i32 2
  %48 = bitcast %union.anon.0* %47 to %struct.rsa_st**
  %49 = load %struct.rsa_st*, %struct.rsa_st** %48, align 8
  %50 = tail call i32 @PEM_write_bio_RSAPrivateKey(%struct.bio_st* %0, %struct.rsa_st* %49, %struct.evp_cipher_st* %2, i8* %3, i32 %4, i32 (i8*, i32, i32, i8*)* %5, i8* %6) #5
  %51 = icmp slt i32 %50, 1
  br i1 %51, label %60, label %52

52:                                               ; preds = %17, %39, %44
  %53 = getelementptr inbounds %struct.X509_info_st, %struct.X509_info_st* %1, i64 0, i32 0
  %54 = load %struct.x509_st*, %struct.x509_st** %53, align 8
  %55 = icmp eq %struct.x509_st* %54, null
  br i1 %55, label %59, label %56

56:                                               ; preds = %52
  %57 = call i32 @PEM_write_bio_X509(%struct.bio_st* %0, %struct.x509_st* nonnull %54) #5
  %58 = icmp slt i32 %57, 1
  br i1 %58, label %60, label %59

59:                                               ; preds = %52, %56
  br label %60

60:                                               ; preds = %56, %44, %39, %59, %38, %31, %16
  %61 = phi i32 [ 0, %16 ], [ 0, %31 ], [ 0, %38 ], [ 0, %39 ], [ 0, %56 ], [ 1, %59 ], [ 0, %44 ]
  call void @OPENSSL_cleanse(i8* nonnull %9, i64 1024) #5
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %9) #5
  ret i32 %61
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare i32 @EVP_CIPHER_iv_length(%struct.evp_cipher_st*) local_unnamed_addr #2

declare i8* @OBJ_nid2sn(i32) local_unnamed_addr #2

declare i32 @EVP_CIPHER_nid(%struct.evp_cipher_st*) local_unnamed_addr #2

declare void @PEM_proc_type(i8*, i32) local_unnamed_addr #2

declare void @PEM_dek_info(i8*, i8*, i32, i8*) local_unnamed_addr #2

declare i32 @PEM_write_bio(%struct.bio_st*, i8*, i8*, i8*, i64) local_unnamed_addr #2

declare i32 @PEM_write_bio_RSAPrivateKey(%struct.bio_st*, %struct.rsa_st*, %struct.evp_cipher_st*, i8*, i32, i32 (i8*, i32, i32, i8*)*, i8*) local_unnamed_addr #2

declare i32 @PEM_write_bio_X509(%struct.bio_st*, %struct.x509_st*) local_unnamed_addr #2

declare void @OPENSSL_cleanse(i8*, i64) local_unnamed_addr #2

declare %struct.stack_st* @sk_new_null() local_unnamed_addr #2

declare i64 @sk_num(%struct.stack_st*) local_unnamed_addr #2

declare %struct.x509_st* @d2i_X509(%struct.x509_st**, i8**, i64) local_unnamed_addr #2

declare %struct.x509_st* @d2i_X509_AUX(%struct.x509_st**, i8**, i64) local_unnamed_addr #2

declare %struct.X509_crl_st* @d2i_X509_CRL(%struct.X509_crl_st**, i8**, i64) local_unnamed_addr #2

declare %struct.evp_pkey_st* @d2i_PrivateKey(i32, %struct.evp_pkey_st**, i8**, i64) local_unnamed_addr #2

declare i64 @sk_push(%struct.stack_st*, i8*) local_unnamed_addr #2

declare i8* @sk_pop(%struct.stack_st*) local_unnamed_addr #2

declare void @sk_free(%struct.stack_st*) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { nounwind readonly }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 (%struct.X509_info_st*, i8*, i64, i32)* @parse_crl, i32 (%struct.X509_info_st*, i8*, i64, i32)* @parse_key, i32 (%struct.X509_info_st*, i8*, i64, i32)* @parse_x509, i32 (%struct.X509_info_st*, i8*, i64, i32)* @parse_x509_aux}
