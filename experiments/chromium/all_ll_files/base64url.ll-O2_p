; ModuleID = '../../base/base64url.cc'
source_filename = "../../base/base64url.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.base::BasicStringPiece" = type { i8*, i64 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }

@.str = private unnamed_addr constant [2 x i8] c"+\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"-\00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"/\00", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c"_\00", align 1
@_ZN4baseL12kBase64CharsE = internal constant [3 x i8] c"+/\00", align 1
@_ZN4baseL19kBase64UrlSafeCharsE = internal constant [3 x i8] c"-_\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base15Base64UrlEncodeERKNS_16BasicStringPieceIcNSt3__111char_traitsIcEEEENS_21Base64UrlEncodePolicyEPNS1_12basic_stringIcS3_NS1_9allocatorIcEEEE(%"class.base::BasicStringPiece"* dereferenceable(16), i32, %"class.std::__1::basic_string"*) local_unnamed_addr #0 {
  tail call void @_ZN4base12Base64EncodeERKNS_16BasicStringPieceIcNSt3__111char_traitsIcEEEEPNS1_12basic_stringIcS3_NS1_9allocatorIcEEEE(%"class.base::BasicStringPiece"* dereferenceable(16) %0, %"class.std::__1::basic_string"* %2) #7
  %4 = bitcast %"class.std::__1::basic_string"* %2 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %5 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %4, i64 0, i32 1, i32 0
  %6 = load i8, i8* %5, align 1
  %7 = icmp slt i8 %6, 0
  %8 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = bitcast %"class.std::__1::basic_string"* %2 to i8*
  %11 = select i1 %7, i8* %9, i8* %10
  %12 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %13 = load i64, i64* %12, align 8
  %14 = zext i8 %6 to i64
  %15 = select i1 %7, i64 %13, i64 %14
  %16 = tail call zeroext i1 @_ZN4base12ReplaceCharsENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEES4_S4_PNS1_12basic_stringIcS3_NS1_9allocatorIcEEEE(i8* %11, i64 %15, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0), i64 1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0), i64 1, %"class.std::__1::basic_string"* %2) #7
  %17 = load i8, i8* %5, align 1
  %18 = icmp slt i8 %17, 0
  %19 = load i8*, i8** %8, align 8
  %20 = select i1 %18, i8* %19, i8* %10
  %21 = load i64, i64* %12, align 8
  %22 = zext i8 %17 to i64
  %23 = select i1 %18, i64 %21, i64 %22
  %24 = tail call zeroext i1 @_ZN4base12ReplaceCharsENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEES4_S4_PNS1_12basic_stringIcS3_NS1_9allocatorIcEEEE(i8* %20, i64 %23, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0), i64 1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0), i64 1, %"class.std::__1::basic_string"* %2) #7
  %25 = icmp eq i32 %1, 1
  br i1 %25, label %26, label %52

26:                                               ; preds = %3
  %27 = load i8, i8* %5, align 1
  %28 = icmp slt i8 %27, 0
  br i1 %28, label %29, label %32

29:                                               ; preds = %26
  %30 = load i8*, i8** %8, align 8
  %31 = load i64, i64* %12, align 8
  br label %34

32:                                               ; preds = %26
  %33 = zext i8 %27 to i64
  br label %34

34:                                               ; preds = %32, %29
  %35 = phi i8* [ %30, %29 ], [ %10, %32 ]
  %36 = phi i64 [ %31, %29 ], [ %33, %32 ]
  %37 = getelementptr inbounds i8, i8* %35, i64 %36
  br label %38

38:                                               ; preds = %41, %34
  %39 = phi i8* [ %37, %34 ], [ %42, %41 ]
  %40 = icmp eq i8* %39, %35
  br i1 %40, label %52, label %41

41:                                               ; preds = %38
  %42 = getelementptr inbounds i8, i8* %39, i64 -1
  %43 = load i8, i8* %42, align 1
  %44 = icmp eq i8 %43, 61
  br i1 %44, label %38, label %45

45:                                               ; preds = %41
  %46 = ptrtoint i8* %42 to i64
  %47 = ptrtoint i8* %35 to i64
  %48 = sub i64 %46, %47
  %49 = icmp eq i64 %48, -1
  br i1 %49, label %52, label %50

50:                                               ; preds = %45
  %51 = add nuw i64 %48, 1
  tail call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc(%"class.std::__1::basic_string"* %2, i64 %51, i8 signext 0) #7
  br label %52

52:                                               ; preds = %38, %50, %45, %3
  ret void
}

declare void @_ZN4base12Base64EncodeERKNS_16BasicStringPieceIcNSt3__111char_traitsIcEEEEPNS1_12basic_stringIcS3_NS1_9allocatorIcEEEE(%"class.base::BasicStringPiece"* dereferenceable(16), %"class.std::__1::basic_string"*) local_unnamed_addr #1

declare zeroext i1 @_ZN4base12ReplaceCharsENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEES4_S4_PNS1_12basic_stringIcS3_NS1_9allocatorIcEEEE(i8*, i64, i8*, i64, i8*, i64, %"class.std::__1::basic_string"*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4base15Base64UrlDecodeERKNS_16BasicStringPieceIcNSt3__111char_traitsIcEEEENS_21Base64UrlDecodePolicyEPNS1_12basic_stringIcS3_NS1_9allocatorIcEEEE(%"class.base::BasicStringPiece"* dereferenceable(16), i32, %"class.std::__1::basic_string"*) local_unnamed_addr #0 {
  %4 = alloca %"class.std::__1::basic_string", align 8
  %5 = alloca %"class.base::BasicStringPiece", align 8
  %6 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 0, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 0, i32 1
  %9 = load i64, i64* %8, align 8
  %10 = tail call i64 @_ZN4base8internal13find_first_ofENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEES5_m(i8* %7, i64 %9, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @_ZN4baseL12kBase64CharsE, i64 0, i64 0), i64 2, i64 0) #7
  %11 = icmp eq i64 %10, -1
  br i1 %11, label %12, label %87

12:                                               ; preds = %3
  %13 = load i64, i64* %8, align 8
  %14 = and i64 %13, 3
  %15 = load i8*, i8** %6, align 8
  %16 = tail call i64 @_ZN4base8internal13find_first_ofENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEES5_m(i8* %15, i64 %13, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @_ZN4baseL19kBase64UrlSafeCharsE, i64 0, i64 0), i64 2, i64 0) #7
  %17 = icmp ne i64 %16, -1
  switch i32 %1, label %32 [
    i32 0, label %18
    i32 2, label %20
  ]

18:                                               ; preds = %12
  %19 = icmp eq i64 %14, 0
  br i1 %19, label %32, label %87

20:                                               ; preds = %12
  %21 = load i64, i64* %8, align 8
  %22 = icmp eq i64 %21, 0
  br i1 %22, label %32, label %23

23:                                               ; preds = %20
  %24 = load i8*, i8** %6, align 8
  %25 = tail call i8* @memchr(i8* %24, i32 61, i64 %21) #7
  %26 = icmp eq i8* %25, null
  br i1 %26, label %32, label %27

27:                                               ; preds = %23
  %28 = ptrtoint i8* %25 to i64
  %29 = ptrtoint i8* %24 to i64
  %30 = sub i64 %28, %29
  %31 = icmp eq i64 %30, -1
  br i1 %31, label %32, label %87

32:                                               ; preds = %20, %23, %18, %27, %12
  %33 = icmp ne i64 %14, 0
  %34 = or i1 %33, %17
  br i1 %34, label %35, label %85

35:                                               ; preds = %32
  %36 = bitcast %"class.std::__1::basic_string"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %36) #7
  %37 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %38 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %36, i8 0, i64 24, i1 false) #7
  %39 = load i64, i64* %8, align 8
  br i1 %33, label %40, label %46

40:                                               ; preds = %35
  %41 = sub nuw nsw i64 4, %14
  %42 = tail call { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %39, i64 %41) #7
  %43 = extractvalue { i64, i1 } %42, 1
  %44 = extractvalue { i64, i1 } %42, 0
  br i1 %43, label %45, label %46, !prof !2

45:                                               ; preds = %40
  tail call void @llvm.trap() #7
  unreachable

46:                                               ; preds = %35, %40
  %47 = phi i64 [ %44, %40 ], [ %39, %35 ]
  call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm(%"class.std::__1::basic_string"* nonnull %4, i64 %47) #7
  %48 = load i8*, i8** %6, align 8
  %49 = load i64, i64* %8, align 8
  %50 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string"* nonnull %4, i8* %48, i64 %49) #7
  %51 = bitcast %"class.std::__1::basic_string"* %4 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %52 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %51, i64 0, i32 1, i32 0
  %53 = load i8, i8* %52, align 1
  %54 = icmp slt i8 %53, 0
  %55 = load i8*, i8** %37, align 8
  %56 = select i1 %54, i8* %55, i8* %36
  %57 = load i64, i64* %38, align 8
  %58 = zext i8 %53 to i64
  %59 = select i1 %54, i64 %57, i64 %58
  %60 = call zeroext i1 @_ZN4base12ReplaceCharsENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEES4_S4_PNS1_12basic_stringIcS3_NS1_9allocatorIcEEEE(i8* %56, i64 %59, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0), i64 1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0), i64 1, %"class.std::__1::basic_string"* nonnull %4) #7
  %61 = load i8, i8* %52, align 1
  %62 = icmp slt i8 %61, 0
  %63 = load i8*, i8** %37, align 8
  %64 = select i1 %62, i8* %63, i8* %36
  %65 = load i64, i64* %38, align 8
  %66 = zext i8 %61 to i64
  %67 = select i1 %62, i64 %65, i64 %66
  %68 = call zeroext i1 @_ZN4base12ReplaceCharsENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEES4_S4_PNS1_12basic_stringIcS3_NS1_9allocatorIcEEEE(i8* %64, i64 %67, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0), i64 1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0), i64 1, %"class.std::__1::basic_string"* nonnull %4) #7
  call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc(%"class.std::__1::basic_string"* nonnull %4, i64 %47, i8 signext 61) #7
  %69 = bitcast %"class.base::BasicStringPiece"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %69) #7
  %70 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %5, i64 0, i32 0
  %71 = load i8, i8* %52, align 1
  %72 = icmp slt i8 %71, 0
  %73 = load i8*, i8** %37, align 8
  %74 = select i1 %72, i8* %73, i8* %36
  store i8* %74, i8** %70, align 8
  %75 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %5, i64 0, i32 1
  %76 = load i64, i64* %38, align 8
  %77 = zext i8 %71 to i64
  %78 = select i1 %72, i64 %76, i64 %77
  store i64 %78, i64* %75, align 8
  %79 = call zeroext i1 @_ZN4base12Base64DecodeERKNS_16BasicStringPieceIcNSt3__111char_traitsIcEEEEPNS1_12basic_stringIcS3_NS1_9allocatorIcEEEE(%"class.base::BasicStringPiece"* nonnull dereferenceable(16) %5, %"class.std::__1::basic_string"* %2) #7
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %69) #7
  %80 = load i8, i8* %52, align 1
  %81 = icmp slt i8 %80, 0
  br i1 %81, label %82, label %84

82:                                               ; preds = %46
  %83 = load i8*, i8** %37, align 8
  call void @_ZdlPv(i8* %83) #8
  br label %84

84:                                               ; preds = %46, %82
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %36) #7
  br label %87

85:                                               ; preds = %32
  %86 = tail call zeroext i1 @_ZN4base12Base64DecodeERKNS_16BasicStringPieceIcNSt3__111char_traitsIcEEEEPNS1_12basic_stringIcS3_NS1_9allocatorIcEEEE(%"class.base::BasicStringPiece"* dereferenceable(16) %0, %"class.std::__1::basic_string"* %2) #7
  br label %87

87:                                               ; preds = %84, %85, %18, %27, %3
  %88 = phi i1 [ false, %3 ], [ %79, %84 ], [ %86, %85 ], [ false, %18 ], [ false, %27 ]
  ret i1 %88
}

declare void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm(%"class.std::__1::basic_string"*, i64) local_unnamed_addr #1

declare dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string"*, i8*, i64) local_unnamed_addr #1

declare void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc(%"class.std::__1::basic_string"*, i64, i8 signext) local_unnamed_addr #1

declare zeroext i1 @_ZN4base12Base64DecodeERKNS_16BasicStringPieceIcNSt3__111char_traitsIcEEEEPNS1_12basic_stringIcS3_NS1_9allocatorIcEEEE(%"class.base::BasicStringPiece"* dereferenceable(16), %"class.std::__1::basic_string"*) local_unnamed_addr #1

declare i64 @_ZN4base8internal13find_first_ofENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEES5_m(i8*, i64, i8*, i64, i64) local_unnamed_addr #1

; Function Attrs: nofree nounwind readonly
declare i8* @memchr(i8*, i32, i64) local_unnamed_addr #3

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.uadd.with.overflow.i64(i64, i64) #4

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #5

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #6

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone speculatable }
attributes #5 = { cold noreturn nounwind }
attributes #6 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }
attributes #8 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
