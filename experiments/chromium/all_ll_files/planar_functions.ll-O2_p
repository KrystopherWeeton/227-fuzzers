; ModuleID = '../../third_party/libyuv/source/planar_functions.cc'
source_filename = "../../third_party/libyuv/source/planar_functions.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@cpu_info_ = external local_unnamed_addr global i32, align 4

; Function Attrs: nounwind ssp uwtable
define hidden void @CopyPlane(i8*, i32, i8*, i32, i32, i32) local_unnamed_addr #0 {
  %7 = icmp slt i32 %5, 0
  br i1 %7, label %8, label %15

8:                                                ; preds = %6
  %9 = sub nsw i32 0, %5
  %10 = xor i32 %5, -1
  %11 = mul nsw i32 %10, %3
  %12 = sext i32 %11 to i64
  %13 = getelementptr inbounds i8, i8* %2, i64 %12
  %14 = sub nsw i32 0, %3
  br label %15

15:                                               ; preds = %8, %6
  %16 = phi i8* [ %13, %8 ], [ %2, %6 ]
  %17 = phi i32 [ %14, %8 ], [ %3, %6 ]
  %18 = phi i32 [ %9, %8 ], [ %5, %6 ]
  %19 = icmp eq i32 %1, %4
  %20 = icmp eq i32 %17, %4
  %21 = and i1 %19, %20
  %22 = select i1 %21, i32 0, i32 %1
  %23 = select i1 %21, i32 0, i32 %17
  %24 = select i1 %21, i32 %18, i32 1
  %25 = mul nsw i32 %24, %4
  %26 = select i1 %21, i32 1, i32 %18
  %27 = icmp eq i8* %16, %0
  %28 = icmp eq i32 %22, %23
  %29 = and i1 %27, %28
  br i1 %29, label %80, label %30

30:                                               ; preds = %15
  %31 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %33, label %35

33:                                               ; preds = %30
  %34 = tail call i32 @InitCpuFlags() #6
  br label %35

35:                                               ; preds = %30, %33
  %36 = phi i32 [ %34, %33 ], [ %31, %30 ]
  %37 = and i32 %36, 32
  %38 = icmp eq i32 %37, 0
  br i1 %38, label %43, label %39

39:                                               ; preds = %35
  %40 = and i32 %25, 31
  %41 = icmp eq i32 %40, 0
  %42 = select i1 %41, void (i8*, i8*, i32)* @CopyRow_SSE2, void (i8*, i8*, i32)* @CopyRow_Any_SSE2
  br label %43

43:                                               ; preds = %35, %39
  %44 = phi void (i8*, i8*, i32)* [ %42, %39 ], [ @CopyRow_C, %35 ]
  %45 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %47, label %49

47:                                               ; preds = %43
  %48 = tail call i32 @InitCpuFlags() #6
  br label %49

49:                                               ; preds = %43, %47
  %50 = phi i32 [ %48, %47 ], [ %45, %43 ]
  %51 = and i32 %50, 512
  %52 = icmp eq i32 %51, 0
  br i1 %52, label %57, label %53

53:                                               ; preds = %49
  %54 = and i32 %25, 63
  %55 = icmp eq i32 %54, 0
  %56 = select i1 %55, void (i8*, i8*, i32)* @CopyRow_AVX, void (i8*, i8*, i32)* @CopyRow_Any_AVX
  br label %57

57:                                               ; preds = %49, %53
  %58 = phi void (i8*, i8*, i32)* [ %56, %53 ], [ %44, %49 ]
  %59 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %60 = icmp eq i32 %59, 0
  br i1 %60, label %61, label %63

61:                                               ; preds = %57
  %62 = tail call i32 @InitCpuFlags() #6
  br label %63

63:                                               ; preds = %57, %61
  %64 = phi i32 [ %62, %61 ], [ %59, %57 ]
  %65 = and i32 %64, 2048
  %66 = icmp eq i32 %65, 0
  %67 = select i1 %66, void (i8*, i8*, i32)* %58, void (i8*, i8*, i32)* @CopyRow_ERMS
  %68 = icmp sgt i32 %26, 0
  br i1 %68, label %69, label %80

69:                                               ; preds = %63
  %70 = sext i32 %22 to i64
  %71 = sext i32 %23 to i64
  br label %72

72:                                               ; preds = %72, %69
  %73 = phi i32 [ 0, %69 ], [ %78, %72 ]
  %74 = phi i8* [ %16, %69 ], [ %77, %72 ]
  %75 = phi i8* [ %0, %69 ], [ %76, %72 ]
  tail call void %67(i8* %75, i8* %74, i32 %25) #6
  %76 = getelementptr inbounds i8, i8* %75, i64 %70
  %77 = getelementptr inbounds i8, i8* %74, i64 %71
  %78 = add nuw nsw i32 %73, 1
  %79 = icmp eq i32 %78, %26
  br i1 %79, label %80, label %72

80:                                               ; preds = %72, %63, %15
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare void @CopyRow_C(i8*, i8*, i32) local_unnamed_addr #2

declare void @CopyRow_SSE2(i8*, i8*, i32) local_unnamed_addr #2

declare void @CopyRow_Any_SSE2(i8*, i8*, i32) local_unnamed_addr #2

declare void @CopyRow_AVX(i8*, i8*, i32) local_unnamed_addr #2

declare void @CopyRow_Any_AVX(i8*, i8*, i32) local_unnamed_addr #2

declare void @CopyRow_ERMS(i8*, i8*, i32) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @CopyPlane_16(i16*, i32, i16*, i32, i32, i32) local_unnamed_addr #0 {
  %7 = icmp eq i32 %1, %4
  %8 = icmp eq i32 %3, %4
  %9 = and i1 %7, %8
  %10 = select i1 %9, i32 %5, i32 1
  %11 = mul nsw i32 %10, %4
  %12 = select i1 %9, i32 1, i32 %5
  %13 = icmp sgt i32 %12, 0
  br i1 %13, label %14, label %27

14:                                               ; preds = %6
  %15 = sext i32 %1 to i64
  %16 = select i1 %9, i64 0, i64 %15
  %17 = sext i32 %3 to i64
  %18 = select i1 %9, i64 0, i64 %17
  br label %19

19:                                               ; preds = %19, %14
  %20 = phi i32 [ 0, %14 ], [ %25, %19 ]
  %21 = phi i16* [ %2, %14 ], [ %24, %19 ]
  %22 = phi i16* [ %0, %14 ], [ %23, %19 ]
  tail call void @CopyRow_16_C(i16* %22, i16* %21, i32 %11) #6
  %23 = getelementptr inbounds i16, i16* %22, i64 %16
  %24 = getelementptr inbounds i16, i16* %21, i64 %18
  %25 = add nuw nsw i32 %20, 1
  %26 = icmp eq i32 %25, %12
  br i1 %26, label %27, label %19

27:                                               ; preds = %19, %6
  ret void
}

declare void @CopyRow_16_C(i16*, i16*, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @Convert16To8Plane(i16*, i32, i8*, i32, i32, i32, i32) local_unnamed_addr #0 {
  %8 = icmp slt i32 %6, 0
  br i1 %8, label %9, label %16

9:                                                ; preds = %7
  %10 = sub nsw i32 0, %6
  %11 = xor i32 %6, -1
  %12 = mul nsw i32 %11, %3
  %13 = sext i32 %12 to i64
  %14 = getelementptr inbounds i8, i8* %2, i64 %13
  %15 = sub nsw i32 0, %3
  br label %16

16:                                               ; preds = %9, %7
  %17 = phi i8* [ %14, %9 ], [ %2, %7 ]
  %18 = phi i32 [ %15, %9 ], [ %3, %7 ]
  %19 = phi i32 [ %10, %9 ], [ %6, %7 ]
  %20 = icmp eq i32 %1, %5
  %21 = icmp eq i32 %18, %5
  %22 = and i1 %20, %21
  %23 = select i1 %22, i32 %19, i32 1
  %24 = mul nsw i32 %23, %5
  %25 = select i1 %22, i32 1, i32 %19
  %26 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %28, label %30

28:                                               ; preds = %16
  %29 = tail call i32 @InitCpuFlags() #6
  br label %30

30:                                               ; preds = %16, %28
  %31 = phi i32 [ %29, %28 ], [ %26, %16 ]
  %32 = and i32 %31, 64
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %38, label %34

34:                                               ; preds = %30
  %35 = and i32 %24, 15
  %36 = icmp eq i32 %35, 0
  %37 = select i1 %36, void (i16*, i8*, i32, i32)* @Convert16To8Row_SSSE3, void (i16*, i8*, i32, i32)* @Convert16To8Row_Any_SSSE3
  br label %38

38:                                               ; preds = %30, %34
  %39 = phi void (i16*, i8*, i32, i32)* [ %37, %34 ], [ @Convert16To8Row_C, %30 ]
  %40 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %42, label %44

42:                                               ; preds = %38
  %43 = tail call i32 @InitCpuFlags() #6
  br label %44

44:                                               ; preds = %38, %42
  %45 = phi i32 [ %43, %42 ], [ %40, %38 ]
  %46 = and i32 %45, 1024
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %52, label %48

48:                                               ; preds = %44
  %49 = and i32 %24, 31
  %50 = icmp eq i32 %49, 0
  %51 = select i1 %50, void (i16*, i8*, i32, i32)* @Convert16To8Row_AVX2, void (i16*, i8*, i32, i32)* @Convert16To8Row_Any_AVX2
  br label %52

52:                                               ; preds = %44, %48
  %53 = phi void (i16*, i8*, i32, i32)* [ %51, %48 ], [ %39, %44 ]
  %54 = icmp sgt i32 %25, 0
  br i1 %54, label %55, label %68

55:                                               ; preds = %52
  %56 = sext i32 %1 to i64
  %57 = select i1 %22, i64 0, i64 %56
  %58 = sext i32 %18 to i64
  %59 = select i1 %22, i64 0, i64 %58
  br label %60

60:                                               ; preds = %60, %55
  %61 = phi i32 [ 0, %55 ], [ %66, %60 ]
  %62 = phi i16* [ %0, %55 ], [ %64, %60 ]
  %63 = phi i8* [ %17, %55 ], [ %65, %60 ]
  tail call void %53(i16* %62, i8* %63, i32 %4, i32 %24) #6
  %64 = getelementptr inbounds i16, i16* %62, i64 %57
  %65 = getelementptr inbounds i8, i8* %63, i64 %59
  %66 = add nuw nsw i32 %61, 1
  %67 = icmp eq i32 %66, %25
  br i1 %67, label %68, label %60

68:                                               ; preds = %60, %52
  ret void
}

declare void @Convert16To8Row_C(i16*, i8*, i32, i32) local_unnamed_addr #2

declare void @Convert16To8Row_Any_SSSE3(i16*, i8*, i32, i32) local_unnamed_addr #2

declare void @Convert16To8Row_SSSE3(i16*, i8*, i32, i32) local_unnamed_addr #2

declare void @Convert16To8Row_Any_AVX2(i16*, i8*, i32, i32) local_unnamed_addr #2

declare void @Convert16To8Row_AVX2(i16*, i8*, i32, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @Convert8To16Plane(i8*, i32, i16*, i32, i32, i32, i32) local_unnamed_addr #0 {
  %8 = icmp slt i32 %6, 0
  br i1 %8, label %9, label %16

9:                                                ; preds = %7
  %10 = sub nsw i32 0, %6
  %11 = xor i32 %6, -1
  %12 = mul nsw i32 %11, %3
  %13 = sext i32 %12 to i64
  %14 = getelementptr inbounds i16, i16* %2, i64 %13
  %15 = sub nsw i32 0, %3
  br label %16

16:                                               ; preds = %9, %7
  %17 = phi i16* [ %14, %9 ], [ %2, %7 ]
  %18 = phi i32 [ %15, %9 ], [ %3, %7 ]
  %19 = phi i32 [ %10, %9 ], [ %6, %7 ]
  %20 = icmp eq i32 %1, %5
  %21 = icmp eq i32 %18, %5
  %22 = and i1 %20, %21
  %23 = select i1 %22, i32 %19, i32 1
  %24 = mul nsw i32 %23, %5
  %25 = select i1 %22, i32 1, i32 %19
  %26 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %28, label %30

28:                                               ; preds = %16
  %29 = tail call i32 @InitCpuFlags() #6
  br label %30

30:                                               ; preds = %16, %28
  %31 = phi i32 [ %29, %28 ], [ %26, %16 ]
  %32 = and i32 %31, 32
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %38, label %34

34:                                               ; preds = %30
  %35 = and i32 %24, 15
  %36 = icmp eq i32 %35, 0
  %37 = select i1 %36, void (i8*, i16*, i32, i32)* @Convert8To16Row_SSE2, void (i8*, i16*, i32, i32)* @Convert8To16Row_Any_SSE2
  br label %38

38:                                               ; preds = %30, %34
  %39 = phi void (i8*, i16*, i32, i32)* [ %37, %34 ], [ @Convert8To16Row_C, %30 ]
  %40 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %42, label %44

42:                                               ; preds = %38
  %43 = tail call i32 @InitCpuFlags() #6
  br label %44

44:                                               ; preds = %38, %42
  %45 = phi i32 [ %43, %42 ], [ %40, %38 ]
  %46 = and i32 %45, 1024
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %52, label %48

48:                                               ; preds = %44
  %49 = and i32 %24, 31
  %50 = icmp eq i32 %49, 0
  %51 = select i1 %50, void (i8*, i16*, i32, i32)* @Convert8To16Row_AVX2, void (i8*, i16*, i32, i32)* @Convert8To16Row_Any_AVX2
  br label %52

52:                                               ; preds = %44, %48
  %53 = phi void (i8*, i16*, i32, i32)* [ %51, %48 ], [ %39, %44 ]
  %54 = icmp sgt i32 %25, 0
  br i1 %54, label %55, label %68

55:                                               ; preds = %52
  %56 = sext i32 %1 to i64
  %57 = select i1 %22, i64 0, i64 %56
  %58 = sext i32 %18 to i64
  %59 = select i1 %22, i64 0, i64 %58
  br label %60

60:                                               ; preds = %60, %55
  %61 = phi i32 [ 0, %55 ], [ %66, %60 ]
  %62 = phi i8* [ %0, %55 ], [ %64, %60 ]
  %63 = phi i16* [ %17, %55 ], [ %65, %60 ]
  tail call void %53(i8* %62, i16* %63, i32 %4, i32 %24) #6
  %64 = getelementptr inbounds i8, i8* %62, i64 %57
  %65 = getelementptr inbounds i16, i16* %63, i64 %59
  %66 = add nuw nsw i32 %61, 1
  %67 = icmp eq i32 %66, %25
  br i1 %67, label %68, label %60

68:                                               ; preds = %60, %52
  ret void
}

declare void @Convert8To16Row_C(i8*, i16*, i32, i32) local_unnamed_addr #2

declare void @Convert8To16Row_Any_SSE2(i8*, i16*, i32, i32) local_unnamed_addr #2

declare void @Convert8To16Row_SSE2(i8*, i16*, i32, i32) local_unnamed_addr #2

declare void @Convert8To16Row_Any_AVX2(i8*, i16*, i32, i32) local_unnamed_addr #2

declare void @Convert8To16Row_AVX2(i8*, i16*, i32, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @I422Copy(i8*, i32, i8*, i32, i8*, i32, i8*, i32, i8*, i32, i8*, i32, i32, i32) local_unnamed_addr #0 {
  %15 = add nsw i32 %12, 1
  %16 = ashr i32 %15, 1
  %17 = icmp ne i8* %2, null
  %18 = icmp ne i8* %4, null
  %19 = and i1 %17, %18
  %20 = icmp ne i8* %8, null
  %21 = and i1 %19, %20
  %22 = icmp ne i8* %10, null
  %23 = and i1 %21, %22
  %24 = xor i1 %23, true
  %25 = icmp slt i32 %12, 1
  %26 = or i1 %25, %24
  %27 = icmp eq i32 %13, 0
  %28 = or i1 %26, %27
  br i1 %28, label %57, label %29

29:                                               ; preds = %14
  %30 = icmp slt i32 %13, 0
  br i1 %30, label %31, label %46

31:                                               ; preds = %29
  %32 = sub nsw i32 0, %13
  %33 = xor i32 %13, -1
  %34 = mul nsw i32 %33, %1
  %35 = sext i32 %34 to i64
  %36 = getelementptr inbounds i8, i8* %0, i64 %35
  %37 = mul nsw i32 %33, %3
  %38 = sext i32 %37 to i64
  %39 = getelementptr inbounds i8, i8* %2, i64 %38
  %40 = mul nsw i32 %33, %5
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds i8, i8* %4, i64 %41
  %43 = sub nsw i32 0, %1
  %44 = sub nsw i32 0, %3
  %45 = sub nsw i32 0, %5
  br label %46

46:                                               ; preds = %31, %29
  %47 = phi i32 [ %45, %31 ], [ %5, %29 ]
  %48 = phi i8* [ %42, %31 ], [ %4, %29 ]
  %49 = phi i32 [ %44, %31 ], [ %3, %29 ]
  %50 = phi i8* [ %39, %31 ], [ %2, %29 ]
  %51 = phi i32 [ %43, %31 ], [ %1, %29 ]
  %52 = phi i8* [ %36, %31 ], [ %0, %29 ]
  %53 = phi i32 [ %32, %31 ], [ %13, %29 ]
  %54 = icmp eq i8* %6, null
  br i1 %54, label %56, label %55

55:                                               ; preds = %46
  tail call void @CopyPlane(i8* %52, i32 %51, i8* nonnull %6, i32 %7, i32 %12, i32 %53)
  br label %56

56:                                               ; preds = %46, %55
  tail call void @CopyPlane(i8* %50, i32 %49, i8* %8, i32 %9, i32 %16, i32 %53)
  tail call void @CopyPlane(i8* %48, i32 %47, i8* %10, i32 %11, i32 %16, i32 %53)
  br label %57

57:                                               ; preds = %14, %56
  %58 = phi i32 [ 0, %56 ], [ -1, %14 ]
  ret i32 %58
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @I444Copy(i8*, i32, i8*, i32, i8*, i32, i8*, i32, i8*, i32, i8*, i32, i32, i32) local_unnamed_addr #0 {
  %15 = icmp ne i8* %2, null
  %16 = icmp ne i8* %4, null
  %17 = and i1 %15, %16
  %18 = icmp ne i8* %8, null
  %19 = and i1 %17, %18
  %20 = icmp ne i8* %10, null
  %21 = and i1 %19, %20
  %22 = xor i1 %21, true
  %23 = icmp slt i32 %12, 1
  %24 = or i1 %23, %22
  %25 = icmp eq i32 %13, 0
  %26 = or i1 %24, %25
  br i1 %26, label %55, label %27

27:                                               ; preds = %14
  %28 = icmp slt i32 %13, 0
  br i1 %28, label %29, label %44

29:                                               ; preds = %27
  %30 = sub nsw i32 0, %13
  %31 = xor i32 %13, -1
  %32 = mul nsw i32 %31, %1
  %33 = sext i32 %32 to i64
  %34 = getelementptr inbounds i8, i8* %0, i64 %33
  %35 = mul nsw i32 %31, %3
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds i8, i8* %2, i64 %36
  %38 = mul nsw i32 %31, %5
  %39 = sext i32 %38 to i64
  %40 = getelementptr inbounds i8, i8* %4, i64 %39
  %41 = sub nsw i32 0, %1
  %42 = sub nsw i32 0, %3
  %43 = sub nsw i32 0, %5
  br label %44

44:                                               ; preds = %29, %27
  %45 = phi i32 [ %43, %29 ], [ %5, %27 ]
  %46 = phi i8* [ %40, %29 ], [ %4, %27 ]
  %47 = phi i32 [ %42, %29 ], [ %3, %27 ]
  %48 = phi i8* [ %37, %29 ], [ %2, %27 ]
  %49 = phi i32 [ %41, %29 ], [ %1, %27 ]
  %50 = phi i8* [ %34, %29 ], [ %0, %27 ]
  %51 = phi i32 [ %30, %29 ], [ %13, %27 ]
  %52 = icmp eq i8* %6, null
  br i1 %52, label %54, label %53

53:                                               ; preds = %44
  tail call void @CopyPlane(i8* %50, i32 %49, i8* nonnull %6, i32 %7, i32 %12, i32 %51)
  br label %54

54:                                               ; preds = %44, %53
  tail call void @CopyPlane(i8* %48, i32 %47, i8* %8, i32 %9, i32 %12, i32 %51)
  tail call void @CopyPlane(i8* %46, i32 %45, i8* %10, i32 %11, i32 %12, i32 %51)
  br label %55

55:                                               ; preds = %14, %54
  %56 = phi i32 [ 0, %54 ], [ -1, %14 ]
  ret i32 %56
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @I400ToI400(i8*, i32, i8*, i32, i32, i32) local_unnamed_addr #0 {
  %7 = icmp eq i8* %0, null
  %8 = icmp eq i8* %2, null
  %9 = or i1 %7, %8
  %10 = icmp slt i32 %4, 1
  %11 = or i1 %9, %10
  %12 = icmp eq i32 %5, 0
  %13 = or i1 %11, %12
  br i1 %13, label %27, label %14

14:                                               ; preds = %6
  %15 = icmp slt i32 %5, 0
  br i1 %15, label %16, label %23

16:                                               ; preds = %14
  %17 = sub nsw i32 0, %5
  %18 = xor i32 %5, -1
  %19 = mul nsw i32 %18, %1
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds i8, i8* %0, i64 %20
  %22 = sub nsw i32 0, %1
  br label %23

23:                                               ; preds = %16, %14
  %24 = phi i32 [ %22, %16 ], [ %1, %14 ]
  %25 = phi i8* [ %21, %16 ], [ %0, %14 ]
  %26 = phi i32 [ %17, %16 ], [ %5, %14 ]
  tail call void @CopyPlane(i8* %25, i32 %24, i8* nonnull %2, i32 %3, i32 %4, i32 %26)
  br label %27

27:                                               ; preds = %6, %23
  %28 = phi i32 [ 0, %23 ], [ -1, %6 ]
  ret i32 %28
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @I420ToI400(i8*, i32, i8* nocapture readnone, i32, i8* nocapture readnone, i32, i8*, i32, i32, i32) local_unnamed_addr #0 {
  %11 = icmp eq i8* %0, null
  %12 = icmp eq i8* %6, null
  %13 = or i1 %11, %12
  %14 = icmp slt i32 %8, 1
  %15 = or i1 %13, %14
  %16 = icmp eq i32 %9, 0
  %17 = or i1 %15, %16
  br i1 %17, label %31, label %18

18:                                               ; preds = %10
  %19 = icmp slt i32 %9, 0
  br i1 %19, label %20, label %27

20:                                               ; preds = %18
  %21 = sub nsw i32 0, %9
  %22 = xor i32 %9, -1
  %23 = mul nsw i32 %22, %1
  %24 = sext i32 %23 to i64
  %25 = getelementptr inbounds i8, i8* %0, i64 %24
  %26 = sub nsw i32 0, %1
  br label %27

27:                                               ; preds = %20, %18
  %28 = phi i32 [ %26, %20 ], [ %1, %18 ]
  %29 = phi i8* [ %25, %20 ], [ %0, %18 ]
  %30 = phi i32 [ %21, %20 ], [ %9, %18 ]
  tail call void @CopyPlane(i8* %29, i32 %28, i8* nonnull %6, i32 %7, i32 %8, i32 %30)
  br label %31

31:                                               ; preds = %10, %27
  %32 = phi i32 [ 0, %27 ], [ -1, %10 ]
  ret i32 %32
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @NV12Copy(i8*, i32, i8*, i32, i8*, i32, i8*, i32, i32, i32) local_unnamed_addr #0 {
  %11 = icmp ne i8* %0, null
  %12 = icmp ne i8* %4, null
  %13 = and i1 %11, %12
  %14 = icmp ne i8* %2, null
  %15 = and i1 %14, %13
  %16 = icmp ne i8* %6, null
  %17 = and i1 %15, %16
  %18 = xor i1 %17, true
  %19 = icmp slt i32 %8, 1
  %20 = or i1 %19, %18
  %21 = icmp eq i32 %9, 0
  %22 = or i1 %20, %21
  br i1 %22, label %50, label %23

23:                                               ; preds = %10
  %24 = add nuw nsw i32 %8, 1
  %25 = add nsw i32 %9, 1
  %26 = ashr i32 %25, 1
  %27 = icmp slt i32 %9, 0
  br i1 %27, label %28, label %42

28:                                               ; preds = %23
  %29 = sub nsw i32 0, %9
  %30 = sub i32 1, %9
  %31 = ashr i32 %30, 1
  %32 = xor i32 %9, -1
  %33 = mul nsw i32 %32, %1
  %34 = sext i32 %33 to i64
  %35 = getelementptr inbounds i8, i8* %0, i64 %34
  %36 = add nsw i32 %31, -1
  %37 = mul nsw i32 %36, %3
  %38 = sext i32 %37 to i64
  %39 = getelementptr inbounds i8, i8* %2, i64 %38
  %40 = sub nsw i32 0, %1
  %41 = sub nsw i32 0, %3
  br label %42

42:                                               ; preds = %28, %23
  %43 = phi i32 [ %41, %28 ], [ %3, %23 ]
  %44 = phi i8* [ %39, %28 ], [ %2, %23 ]
  %45 = phi i32 [ %40, %28 ], [ %1, %23 ]
  %46 = phi i8* [ %35, %28 ], [ %0, %23 ]
  %47 = phi i32 [ %29, %28 ], [ %9, %23 ]
  %48 = phi i32 [ %31, %28 ], [ %26, %23 ]
  tail call void @CopyPlane(i8* %46, i32 %45, i8* %4, i32 %5, i32 %8, i32 %47)
  %49 = and i32 %24, -2
  tail call void @CopyPlane(i8* %44, i32 %43, i8* %6, i32 %7, i32 %49, i32 %48)
  br label %50

50:                                               ; preds = %10, %42
  %51 = phi i32 [ 0, %42 ], [ -1, %10 ]
  ret i32 %51
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @NV21Copy(i8*, i32, i8*, i32, i8*, i32, i8*, i32, i32, i32) local_unnamed_addr #0 {
  %11 = icmp ne i8* %0, null
  %12 = icmp ne i8* %4, null
  %13 = and i1 %11, %12
  %14 = icmp ne i8* %2, null
  %15 = and i1 %14, %13
  %16 = icmp ne i8* %6, null
  %17 = and i1 %15, %16
  %18 = xor i1 %17, true
  %19 = icmp slt i32 %8, 1
  %20 = or i1 %19, %18
  %21 = icmp eq i32 %9, 0
  %22 = or i1 %20, %21
  br i1 %22, label %50, label %23

23:                                               ; preds = %10
  %24 = add nuw nsw i32 %8, 1
  %25 = add nsw i32 %9, 1
  %26 = ashr i32 %25, 1
  %27 = icmp slt i32 %9, 0
  br i1 %27, label %28, label %42

28:                                               ; preds = %23
  %29 = sub nsw i32 0, %9
  %30 = sub i32 1, %9
  %31 = ashr i32 %30, 1
  %32 = xor i32 %9, -1
  %33 = mul nsw i32 %32, %1
  %34 = sext i32 %33 to i64
  %35 = getelementptr inbounds i8, i8* %0, i64 %34
  %36 = add nsw i32 %31, -1
  %37 = mul nsw i32 %36, %3
  %38 = sext i32 %37 to i64
  %39 = getelementptr inbounds i8, i8* %2, i64 %38
  %40 = sub nsw i32 0, %1
  %41 = sub nsw i32 0, %3
  br label %42

42:                                               ; preds = %28, %23
  %43 = phi i32 [ %41, %28 ], [ %3, %23 ]
  %44 = phi i8* [ %39, %28 ], [ %2, %23 ]
  %45 = phi i32 [ %40, %28 ], [ %1, %23 ]
  %46 = phi i8* [ %35, %28 ], [ %0, %23 ]
  %47 = phi i32 [ %29, %28 ], [ %9, %23 ]
  %48 = phi i32 [ %31, %28 ], [ %26, %23 ]
  tail call void @CopyPlane(i8* %46, i32 %45, i8* %4, i32 %5, i32 %8, i32 %47) #6
  %49 = and i32 %24, -2
  tail call void @CopyPlane(i8* %44, i32 %43, i8* %6, i32 %7, i32 %49, i32 %48) #6
  br label %50

50:                                               ; preds = %10, %42
  %51 = phi i32 [ 0, %42 ], [ -1, %10 ]
  ret i32 %51
}

; Function Attrs: nounwind ssp uwtable
define hidden void @SplitUVPlane(i8*, i32, i8*, i32, i8*, i32, i32, i32) local_unnamed_addr #0 {
  %9 = icmp slt i32 %7, 0
  br i1 %9, label %10, label %21

10:                                               ; preds = %8
  %11 = sub nsw i32 0, %7
  %12 = xor i32 %7, -1
  %13 = mul nsw i32 %12, %3
  %14 = sext i32 %13 to i64
  %15 = getelementptr inbounds i8, i8* %2, i64 %14
  %16 = mul nsw i32 %12, %5
  %17 = sext i32 %16 to i64
  %18 = getelementptr inbounds i8, i8* %4, i64 %17
  %19 = sub nsw i32 0, %3
  %20 = sub nsw i32 0, %5
  br label %21

21:                                               ; preds = %10, %8
  %22 = phi i8* [ %15, %10 ], [ %2, %8 ]
  %23 = phi i32 [ %19, %10 ], [ %3, %8 ]
  %24 = phi i8* [ %18, %10 ], [ %4, %8 ]
  %25 = phi i32 [ %20, %10 ], [ %5, %8 ]
  %26 = phi i32 [ %11, %10 ], [ %7, %8 ]
  %27 = shl nsw i32 %6, 1
  %28 = icmp eq i32 %27, %1
  %29 = icmp eq i32 %23, %6
  %30 = and i1 %28, %29
  %31 = icmp eq i32 %25, %6
  %32 = and i1 %30, %31
  %33 = select i1 %32, i32 %26, i32 1
  %34 = mul nsw i32 %33, %6
  %35 = select i1 %32, i32 1, i32 %26
  %36 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %38, label %40

38:                                               ; preds = %21
  %39 = tail call i32 @InitCpuFlags() #6
  br label %40

40:                                               ; preds = %21, %38
  %41 = phi i32 [ %39, %38 ], [ %36, %21 ]
  %42 = and i32 %41, 32
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %48, label %44

44:                                               ; preds = %40
  %45 = and i32 %34, 15
  %46 = icmp eq i32 %45, 0
  %47 = select i1 %46, void (i8*, i8*, i8*, i32)* @SplitUVRow_SSE2, void (i8*, i8*, i8*, i32)* @SplitUVRow_Any_SSE2
  br label %48

48:                                               ; preds = %40, %44
  %49 = phi void (i8*, i8*, i8*, i32)* [ %47, %44 ], [ @SplitUVRow_C, %40 ]
  %50 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %52, label %54

52:                                               ; preds = %48
  %53 = tail call i32 @InitCpuFlags() #6
  br label %54

54:                                               ; preds = %48, %52
  %55 = phi i32 [ %53, %52 ], [ %50, %48 ]
  %56 = and i32 %55, 1024
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %62, label %58

58:                                               ; preds = %54
  %59 = and i32 %34, 31
  %60 = icmp eq i32 %59, 0
  %61 = select i1 %60, void (i8*, i8*, i8*, i32)* @SplitUVRow_AVX2, void (i8*, i8*, i8*, i32)* @SplitUVRow_Any_AVX2
  br label %62

62:                                               ; preds = %54, %58
  %63 = phi void (i8*, i8*, i8*, i32)* [ %61, %58 ], [ %49, %54 ]
  %64 = icmp sgt i32 %35, 0
  br i1 %64, label %65, label %82

65:                                               ; preds = %62
  %66 = sext i32 %23 to i64
  %67 = select i1 %32, i64 0, i64 %66
  %68 = sext i32 %25 to i64
  %69 = select i1 %32, i64 0, i64 %68
  %70 = sext i32 %1 to i64
  %71 = select i1 %32, i64 0, i64 %70
  br label %72

72:                                               ; preds = %72, %65
  %73 = phi i32 [ 0, %65 ], [ %80, %72 ]
  %74 = phi i8* [ %24, %65 ], [ %78, %72 ]
  %75 = phi i8* [ %22, %65 ], [ %77, %72 ]
  %76 = phi i8* [ %0, %65 ], [ %79, %72 ]
  tail call void %63(i8* %76, i8* %75, i8* %74, i32 %34) #6
  %77 = getelementptr inbounds i8, i8* %75, i64 %67
  %78 = getelementptr inbounds i8, i8* %74, i64 %69
  %79 = getelementptr inbounds i8, i8* %76, i64 %71
  %80 = add nuw nsw i32 %73, 1
  %81 = icmp eq i32 %80, %35
  br i1 %81, label %82, label %72

82:                                               ; preds = %72, %62
  ret void
}

declare void @SplitUVRow_C(i8*, i8*, i8*, i32) local_unnamed_addr #2

declare void @SplitUVRow_Any_SSE2(i8*, i8*, i8*, i32) local_unnamed_addr #2

declare void @SplitUVRow_SSE2(i8*, i8*, i8*, i32) local_unnamed_addr #2

declare void @SplitUVRow_Any_AVX2(i8*, i8*, i8*, i32) local_unnamed_addr #2

declare void @SplitUVRow_AVX2(i8*, i8*, i8*, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @MergeUVPlane(i8*, i32, i8*, i32, i8*, i32, i32, i32) local_unnamed_addr #0 {
  %9 = icmp slt i32 %7, 0
  br i1 %9, label %10, label %17

10:                                               ; preds = %8
  %11 = sub nsw i32 0, %7
  %12 = xor i32 %7, -1
  %13 = mul nsw i32 %12, %5
  %14 = sext i32 %13 to i64
  %15 = getelementptr inbounds i8, i8* %4, i64 %14
  %16 = sub nsw i32 0, %5
  br label %17

17:                                               ; preds = %10, %8
  %18 = phi i8* [ %15, %10 ], [ %4, %8 ]
  %19 = phi i32 [ %16, %10 ], [ %5, %8 ]
  %20 = phi i32 [ %11, %10 ], [ %7, %8 ]
  %21 = icmp eq i32 %1, %6
  %22 = icmp eq i32 %3, %6
  %23 = and i1 %21, %22
  %24 = shl nsw i32 %6, 1
  %25 = icmp eq i32 %19, %24
  %26 = and i1 %23, %25
  %27 = select i1 %26, i32 %20, i32 1
  %28 = mul nsw i32 %27, %6
  %29 = select i1 %26, i32 1, i32 %20
  %30 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %32, label %34

32:                                               ; preds = %17
  %33 = tail call i32 @InitCpuFlags() #6
  br label %34

34:                                               ; preds = %17, %32
  %35 = phi i32 [ %33, %32 ], [ %30, %17 ]
  %36 = and i32 %35, 32
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %42, label %38

38:                                               ; preds = %34
  %39 = and i32 %28, 15
  %40 = icmp eq i32 %39, 0
  %41 = select i1 %40, void (i8*, i8*, i8*, i32)* @MergeUVRow_SSE2, void (i8*, i8*, i8*, i32)* @MergeUVRow_Any_SSE2
  br label %42

42:                                               ; preds = %34, %38
  %43 = phi void (i8*, i8*, i8*, i32)* [ %41, %38 ], [ @MergeUVRow_C, %34 ]
  %44 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %46, label %48

46:                                               ; preds = %42
  %47 = tail call i32 @InitCpuFlags() #6
  br label %48

48:                                               ; preds = %42, %46
  %49 = phi i32 [ %47, %46 ], [ %44, %42 ]
  %50 = and i32 %49, 1024
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %56, label %52

52:                                               ; preds = %48
  %53 = and i32 %28, 31
  %54 = icmp eq i32 %53, 0
  %55 = select i1 %54, void (i8*, i8*, i8*, i32)* @MergeUVRow_AVX2, void (i8*, i8*, i8*, i32)* @MergeUVRow_Any_AVX2
  br label %56

56:                                               ; preds = %48, %52
  %57 = phi void (i8*, i8*, i8*, i32)* [ %55, %52 ], [ %43, %48 ]
  %58 = icmp sgt i32 %29, 0
  br i1 %58, label %59, label %76

59:                                               ; preds = %56
  %60 = sext i32 %1 to i64
  %61 = select i1 %26, i64 0, i64 %60
  %62 = sext i32 %3 to i64
  %63 = select i1 %26, i64 0, i64 %62
  %64 = sext i32 %19 to i64
  %65 = select i1 %26, i64 0, i64 %64
  br label %66

66:                                               ; preds = %66, %59
  %67 = phi i32 [ 0, %59 ], [ %74, %66 ]
  %68 = phi i8* [ %18, %59 ], [ %73, %66 ]
  %69 = phi i8* [ %2, %59 ], [ %72, %66 ]
  %70 = phi i8* [ %0, %59 ], [ %71, %66 ]
  tail call void %57(i8* %70, i8* %69, i8* %68, i32 %28) #6
  %71 = getelementptr inbounds i8, i8* %70, i64 %61
  %72 = getelementptr inbounds i8, i8* %69, i64 %63
  %73 = getelementptr inbounds i8, i8* %68, i64 %65
  %74 = add nuw nsw i32 %67, 1
  %75 = icmp eq i32 %74, %29
  br i1 %75, label %76, label %66

76:                                               ; preds = %66, %56
  ret void
}

declare void @MergeUVRow_C(i8*, i8*, i8*, i32) local_unnamed_addr #2

declare void @MergeUVRow_Any_SSE2(i8*, i8*, i8*, i32) local_unnamed_addr #2

declare void @MergeUVRow_SSE2(i8*, i8*, i8*, i32) local_unnamed_addr #2

declare void @MergeUVRow_Any_AVX2(i8*, i8*, i8*, i32) local_unnamed_addr #2

declare void @MergeUVRow_AVX2(i8*, i8*, i8*, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @SplitUVPlane_16(i16*, i32, i16*, i32, i16*, i32, i32, i32, i32) local_unnamed_addr #0 {
  %10 = icmp slt i32 %7, 0
  br i1 %10, label %11, label %22

11:                                               ; preds = %9
  %12 = sub nsw i32 0, %7
  %13 = xor i32 %7, -1
  %14 = mul nsw i32 %13, %3
  %15 = sext i32 %14 to i64
  %16 = getelementptr inbounds i16, i16* %2, i64 %15
  %17 = mul nsw i32 %13, %5
  %18 = sext i32 %17 to i64
  %19 = getelementptr inbounds i16, i16* %4, i64 %18
  %20 = sub nsw i32 0, %3
  %21 = sub nsw i32 0, %5
  br label %22

22:                                               ; preds = %11, %9
  %23 = phi i16* [ %16, %11 ], [ %2, %9 ]
  %24 = phi i32 [ %20, %11 ], [ %3, %9 ]
  %25 = phi i16* [ %19, %11 ], [ %4, %9 ]
  %26 = phi i32 [ %21, %11 ], [ %5, %9 ]
  %27 = phi i32 [ %12, %11 ], [ %7, %9 ]
  %28 = shl nsw i32 %6, 1
  %29 = icmp eq i32 %28, %1
  %30 = icmp eq i32 %24, %6
  %31 = and i1 %29, %30
  %32 = icmp eq i32 %26, %6
  %33 = and i1 %31, %32
  %34 = select i1 %33, i32 %27, i32 1
  %35 = mul nsw i32 %34, %6
  %36 = select i1 %33, i32 1, i32 %27
  %37 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %38 = icmp eq i32 %37, 0
  br i1 %38, label %39, label %41

39:                                               ; preds = %22
  %40 = tail call i32 @InitCpuFlags() #6
  br label %41

41:                                               ; preds = %22, %39
  %42 = phi i32 [ %40, %39 ], [ %37, %22 ]
  %43 = and i32 %42, 1024
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %49, label %45

45:                                               ; preds = %41
  %46 = and i32 %35, 15
  %47 = icmp eq i32 %46, 0
  %48 = select i1 %47, void (i16*, i16*, i16*, i32, i32)* @SplitUVRow_16_AVX2, void (i16*, i16*, i16*, i32, i32)* @SplitUVRow_16_Any_AVX2
  br label %49

49:                                               ; preds = %41, %45
  %50 = phi void (i16*, i16*, i16*, i32, i32)* [ %48, %45 ], [ @SplitUVRow_16_C, %41 ]
  %51 = icmp sgt i32 %36, 0
  br i1 %51, label %52, label %69

52:                                               ; preds = %49
  %53 = sext i32 %24 to i64
  %54 = select i1 %33, i64 0, i64 %53
  %55 = sext i32 %26 to i64
  %56 = select i1 %33, i64 0, i64 %55
  %57 = sext i32 %1 to i64
  %58 = select i1 %33, i64 0, i64 %57
  br label %59

59:                                               ; preds = %59, %52
  %60 = phi i32 [ 0, %52 ], [ %67, %59 ]
  %61 = phi i16* [ %0, %52 ], [ %66, %59 ]
  %62 = phi i16* [ %25, %52 ], [ %65, %59 ]
  %63 = phi i16* [ %23, %52 ], [ %64, %59 ]
  tail call void %50(i16* %61, i16* %63, i16* %62, i32 %8, i32 %35) #6, !callees !2
  %64 = getelementptr inbounds i16, i16* %63, i64 %54
  %65 = getelementptr inbounds i16, i16* %62, i64 %56
  %66 = getelementptr inbounds i16, i16* %61, i64 %58
  %67 = add nuw nsw i32 %60, 1
  %68 = icmp eq i32 %67, %36
  br i1 %68, label %69, label %59

69:                                               ; preds = %59, %49
  ret void
}

declare void @SplitUVRow_16_C(i16*, i16*, i16*, i32, i32) local_unnamed_addr #2

declare void @SplitUVRow_16_Any_AVX2(i16*, i16*, i16*, i32, i32) local_unnamed_addr #2

declare void @SplitUVRow_16_AVX2(i16*, i16*, i16*, i32, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @MergeUVPlane_16(i16*, i32, i16*, i32, i16*, i32, i32, i32, i32) local_unnamed_addr #0 {
  %10 = icmp slt i32 %7, 0
  br i1 %10, label %11, label %18

11:                                               ; preds = %9
  %12 = sub nsw i32 0, %7
  %13 = xor i32 %7, -1
  %14 = mul nsw i32 %13, %5
  %15 = sext i32 %14 to i64
  %16 = getelementptr inbounds i16, i16* %4, i64 %15
  %17 = sub nsw i32 0, %5
  br label %18

18:                                               ; preds = %11, %9
  %19 = phi i16* [ %16, %11 ], [ %4, %9 ]
  %20 = phi i32 [ %17, %11 ], [ %5, %9 ]
  %21 = phi i32 [ %12, %11 ], [ %7, %9 ]
  %22 = icmp eq i32 %1, %6
  %23 = icmp eq i32 %3, %6
  %24 = and i1 %22, %23
  %25 = shl nsw i32 %6, 1
  %26 = icmp eq i32 %20, %25
  %27 = and i1 %24, %26
  %28 = select i1 %27, i32 %21, i32 1
  %29 = mul nsw i32 %28, %6
  %30 = select i1 %27, i32 1, i32 %21
  %31 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %33, label %35

33:                                               ; preds = %18
  %34 = tail call i32 @InitCpuFlags() #6
  br label %35

35:                                               ; preds = %18, %33
  %36 = phi i32 [ %34, %33 ], [ %31, %18 ]
  %37 = and i32 %36, 1024
  %38 = icmp eq i32 %37, 0
  br i1 %38, label %43, label %39

39:                                               ; preds = %35
  %40 = and i32 %29, 15
  %41 = icmp eq i32 %40, 0
  %42 = select i1 %41, void (i16*, i16*, i16*, i32, i32)* @MergeUVRow_16_AVX2, void (i16*, i16*, i16*, i32, i32)* @MergeUVRow_16_Any_AVX2
  br label %43

43:                                               ; preds = %35, %39
  %44 = phi void (i16*, i16*, i16*, i32, i32)* [ %42, %39 ], [ @MergeUVRow_16_C, %35 ]
  %45 = icmp sgt i32 %30, 0
  br i1 %45, label %46, label %63

46:                                               ; preds = %43
  %47 = sext i32 %1 to i64
  %48 = select i1 %27, i64 0, i64 %47
  %49 = sext i32 %3 to i64
  %50 = select i1 %27, i64 0, i64 %49
  %51 = sext i32 %20 to i64
  %52 = select i1 %27, i64 0, i64 %51
  br label %53

53:                                               ; preds = %53, %46
  %54 = phi i32 [ 0, %46 ], [ %61, %53 ]
  %55 = phi i16* [ %0, %46 ], [ %58, %53 ]
  %56 = phi i16* [ %19, %46 ], [ %60, %53 ]
  %57 = phi i16* [ %2, %46 ], [ %59, %53 ]
  tail call void %44(i16* %55, i16* %57, i16* %56, i32 %8, i32 %29) #6, !callees !3
  %58 = getelementptr inbounds i16, i16* %55, i64 %48
  %59 = getelementptr inbounds i16, i16* %57, i64 %50
  %60 = getelementptr inbounds i16, i16* %56, i64 %52
  %61 = add nuw nsw i32 %54, 1
  %62 = icmp eq i32 %61, %30
  br i1 %62, label %63, label %53

63:                                               ; preds = %53, %43
  ret void
}

declare void @MergeUVRow_16_C(i16*, i16*, i16*, i32, i32) local_unnamed_addr #2

declare void @MergeUVRow_16_Any_AVX2(i16*, i16*, i16*, i32, i32) local_unnamed_addr #2

declare void @MergeUVRow_16_AVX2(i16*, i16*, i16*, i32, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @ConvertToMSBPlane_16(i16*, i32, i16*, i32, i32, i32, i32) local_unnamed_addr #0 {
  %8 = sub nsw i32 16, %6
  %9 = shl i32 1, %8
  %10 = icmp slt i32 %5, 0
  br i1 %10, label %11, label %18

11:                                               ; preds = %7
  %12 = sub nsw i32 0, %5
  %13 = xor i32 %5, -1
  %14 = mul nsw i32 %13, %3
  %15 = sext i32 %14 to i64
  %16 = getelementptr inbounds i16, i16* %2, i64 %15
  %17 = sub nsw i32 0, %3
  br label %18

18:                                               ; preds = %11, %7
  %19 = phi i16* [ %16, %11 ], [ %2, %7 ]
  %20 = phi i32 [ %17, %11 ], [ %3, %7 ]
  %21 = phi i32 [ %12, %11 ], [ %5, %7 ]
  %22 = icmp eq i32 %1, %4
  %23 = icmp eq i32 %20, %4
  %24 = and i1 %22, %23
  %25 = select i1 %24, i32 %21, i32 1
  %26 = mul nsw i32 %25, %4
  %27 = select i1 %24, i32 1, i32 %21
  %28 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %30, label %32

30:                                               ; preds = %18
  %31 = tail call i32 @InitCpuFlags() #6
  br label %32

32:                                               ; preds = %18, %30
  %33 = phi i32 [ %31, %30 ], [ %28, %18 ]
  %34 = and i32 %33, 1024
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %40, label %36

36:                                               ; preds = %32
  %37 = and i32 %26, 31
  %38 = icmp eq i32 %37, 0
  %39 = select i1 %38, void (i16*, i16*, i32, i32)* @MultiplyRow_16_AVX2, void (i16*, i16*, i32, i32)* @MultiplyRow_16_Any_AVX2
  br label %40

40:                                               ; preds = %32, %36
  %41 = phi void (i16*, i16*, i32, i32)* [ %39, %36 ], [ @MultiplyRow_16_C, %32 ]
  %42 = icmp sgt i32 %27, 0
  br i1 %42, label %43, label %56

43:                                               ; preds = %40
  %44 = sext i32 %1 to i64
  %45 = select i1 %24, i64 0, i64 %44
  %46 = sext i32 %20 to i64
  %47 = select i1 %24, i64 0, i64 %46
  br label %48

48:                                               ; preds = %48, %43
  %49 = phi i32 [ 0, %43 ], [ %54, %48 ]
  %50 = phi i16* [ %0, %43 ], [ %52, %48 ]
  %51 = phi i16* [ %19, %43 ], [ %53, %48 ]
  tail call void %41(i16* %50, i16* %51, i32 %9, i32 %26) #6, !callees !4
  %52 = getelementptr inbounds i16, i16* %50, i64 %45
  %53 = getelementptr inbounds i16, i16* %51, i64 %47
  %54 = add nuw nsw i32 %49, 1
  %55 = icmp eq i32 %54, %27
  br i1 %55, label %56, label %48

56:                                               ; preds = %48, %40
  ret void
}

declare void @MultiplyRow_16_C(i16*, i16*, i32, i32) local_unnamed_addr #2

declare void @MultiplyRow_16_Any_AVX2(i16*, i16*, i32, i32) local_unnamed_addr #2

declare void @MultiplyRow_16_AVX2(i16*, i16*, i32, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @ConvertToLSBPlane_16(i16*, i32, i16*, i32, i32, i32, i32) local_unnamed_addr #0 {
  %8 = shl i32 1, %6
  %9 = icmp slt i32 %5, 0
  br i1 %9, label %10, label %17

10:                                               ; preds = %7
  %11 = sub nsw i32 0, %5
  %12 = xor i32 %5, -1
  %13 = mul nsw i32 %12, %3
  %14 = sext i32 %13 to i64
  %15 = getelementptr inbounds i16, i16* %2, i64 %14
  %16 = sub nsw i32 0, %3
  br label %17

17:                                               ; preds = %10, %7
  %18 = phi i16* [ %15, %10 ], [ %2, %7 ]
  %19 = phi i32 [ %16, %10 ], [ %3, %7 ]
  %20 = phi i32 [ %11, %10 ], [ %5, %7 ]
  %21 = icmp eq i32 %1, %4
  %22 = icmp eq i32 %19, %4
  %23 = and i1 %21, %22
  %24 = select i1 %23, i32 %20, i32 1
  %25 = mul nsw i32 %24, %4
  %26 = select i1 %23, i32 1, i32 %20
  %27 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %29, label %31

29:                                               ; preds = %17
  %30 = tail call i32 @InitCpuFlags() #6
  br label %31

31:                                               ; preds = %17, %29
  %32 = phi i32 [ %30, %29 ], [ %27, %17 ]
  %33 = and i32 %32, 1024
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %39, label %35

35:                                               ; preds = %31
  %36 = and i32 %25, 31
  %37 = icmp eq i32 %36, 0
  %38 = select i1 %37, void (i16*, i16*, i32, i32)* @DivideRow_16_AVX2, void (i16*, i16*, i32, i32)* @DivideRow_16_Any_AVX2
  br label %39

39:                                               ; preds = %31, %35
  %40 = phi void (i16*, i16*, i32, i32)* [ %38, %35 ], [ @DivideRow_16_C, %31 ]
  %41 = icmp sgt i32 %26, 0
  br i1 %41, label %42, label %55

42:                                               ; preds = %39
  %43 = sext i32 %1 to i64
  %44 = select i1 %23, i64 0, i64 %43
  %45 = sext i32 %19 to i64
  %46 = select i1 %23, i64 0, i64 %45
  br label %47

47:                                               ; preds = %47, %42
  %48 = phi i32 [ 0, %42 ], [ %53, %47 ]
  %49 = phi i16* [ %0, %42 ], [ %51, %47 ]
  %50 = phi i16* [ %18, %42 ], [ %52, %47 ]
  tail call void %40(i16* %49, i16* %50, i32 %8, i32 %25) #6, !callees !5
  %51 = getelementptr inbounds i16, i16* %49, i64 %44
  %52 = getelementptr inbounds i16, i16* %50, i64 %46
  %53 = add nuw nsw i32 %48, 1
  %54 = icmp eq i32 %53, %26
  br i1 %54, label %55, label %47

55:                                               ; preds = %47, %39
  ret void
}

declare void @DivideRow_16_C(i16*, i16*, i32, i32) local_unnamed_addr #2

declare void @DivideRow_16_Any_AVX2(i16*, i16*, i32, i32) local_unnamed_addr #2

declare void @DivideRow_16_AVX2(i16*, i16*, i32, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @SwapUVPlane(i8*, i32, i8*, i32, i32, i32) local_unnamed_addr #0 {
  %7 = icmp slt i32 %5, 0
  br i1 %7, label %8, label %15

8:                                                ; preds = %6
  %9 = sub nsw i32 0, %5
  %10 = xor i32 %5, -1
  %11 = mul nsw i32 %10, %1
  %12 = sext i32 %11 to i64
  %13 = getelementptr inbounds i8, i8* %0, i64 %12
  %14 = sub nsw i32 0, %1
  br label %15

15:                                               ; preds = %8, %6
  %16 = phi i8* [ %13, %8 ], [ %0, %6 ]
  %17 = phi i32 [ %14, %8 ], [ %1, %6 ]
  %18 = phi i32 [ %9, %8 ], [ %5, %6 ]
  %19 = shl nsw i32 %4, 1
  %20 = icmp eq i32 %17, %19
  %21 = icmp eq i32 %19, %3
  %22 = and i1 %21, %20
  %23 = select i1 %22, i32 %18, i32 1
  %24 = mul nsw i32 %23, %4
  %25 = select i1 %22, i32 1, i32 %18
  %26 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %28, label %30

28:                                               ; preds = %15
  %29 = tail call i32 @InitCpuFlags() #6
  br label %30

30:                                               ; preds = %15, %28
  %31 = phi i32 [ %29, %28 ], [ %26, %15 ]
  %32 = and i32 %31, 64
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %38, label %34

34:                                               ; preds = %30
  %35 = and i32 %24, 15
  %36 = icmp eq i32 %35, 0
  %37 = select i1 %36, void (i8*, i8*, i32)* @SwapUVRow_SSSE3, void (i8*, i8*, i32)* @SwapUVRow_Any_SSSE3
  br label %38

38:                                               ; preds = %30, %34
  %39 = phi void (i8*, i8*, i32)* [ %37, %34 ], [ @SwapUVRow_C, %30 ]
  %40 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %42, label %44

42:                                               ; preds = %38
  %43 = tail call i32 @InitCpuFlags() #6
  br label %44

44:                                               ; preds = %38, %42
  %45 = phi i32 [ %43, %42 ], [ %40, %38 ]
  %46 = and i32 %45, 1024
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %52, label %48

48:                                               ; preds = %44
  %49 = and i32 %24, 31
  %50 = icmp eq i32 %49, 0
  %51 = select i1 %50, void (i8*, i8*, i32)* @SwapUVRow_AVX2, void (i8*, i8*, i32)* @SwapUVRow_Any_AVX2
  br label %52

52:                                               ; preds = %44, %48
  %53 = phi void (i8*, i8*, i32)* [ %51, %48 ], [ %39, %44 ]
  %54 = icmp sgt i32 %25, 0
  br i1 %54, label %55, label %68

55:                                               ; preds = %52
  %56 = sext i32 %17 to i64
  %57 = select i1 %22, i64 0, i64 %56
  %58 = sext i32 %3 to i64
  %59 = select i1 %22, i64 0, i64 %58
  br label %60

60:                                               ; preds = %60, %55
  %61 = phi i32 [ 0, %55 ], [ %66, %60 ]
  %62 = phi i8* [ %2, %55 ], [ %65, %60 ]
  %63 = phi i8* [ %16, %55 ], [ %64, %60 ]
  tail call void %53(i8* %63, i8* %62, i32 %24) #6
  %64 = getelementptr inbounds i8, i8* %63, i64 %57
  %65 = getelementptr inbounds i8, i8* %62, i64 %59
  %66 = add nuw nsw i32 %61, 1
  %67 = icmp eq i32 %66, %25
  br i1 %67, label %68, label %60

68:                                               ; preds = %60, %52
  ret void
}

declare void @SwapUVRow_C(i8*, i8*, i32) local_unnamed_addr #2

declare void @SwapUVRow_Any_SSSE3(i8*, i8*, i32) local_unnamed_addr #2

declare void @SwapUVRow_SSSE3(i8*, i8*, i32) local_unnamed_addr #2

declare void @SwapUVRow_Any_AVX2(i8*, i8*, i32) local_unnamed_addr #2

declare void @SwapUVRow_AVX2(i8*, i8*, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @NV21ToNV12(i8*, i32, i8*, i32, i8*, i32, i8*, i32, i32, i32) local_unnamed_addr #0 {
  %11 = add nsw i32 %8, 1
  %12 = ashr i32 %11, 1
  %13 = add nsw i32 %9, 1
  %14 = ashr i32 %13, 1
  %15 = icmp eq i8* %2, null
  %16 = icmp eq i8* %6, null
  %17 = or i1 %15, %16
  %18 = icmp slt i32 %8, 1
  %19 = or i1 %17, %18
  %20 = icmp eq i32 %9, 0
  %21 = or i1 %19, %20
  br i1 %21, label %39, label %22

22:                                               ; preds = %10
  %23 = icmp eq i8* %4, null
  br i1 %23, label %25, label %24

24:                                               ; preds = %22
  tail call void @CopyPlane(i8* %0, i32 %1, i8* nonnull %4, i32 %5, i32 %8, i32 %9)
  br label %25

25:                                               ; preds = %22, %24
  %26 = icmp slt i32 %9, 0
  br i1 %26, label %27, label %35

27:                                               ; preds = %25
  %28 = sub i32 1, %9
  %29 = ashr i32 %28, 1
  %30 = add nsw i32 %29, -1
  %31 = mul nsw i32 %30, %3
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds i8, i8* %2, i64 %32
  %34 = sub nsw i32 0, %3
  br label %35

35:                                               ; preds = %27, %25
  %36 = phi i32 [ %34, %27 ], [ %3, %25 ]
  %37 = phi i8* [ %33, %27 ], [ %2, %25 ]
  %38 = phi i32 [ %29, %27 ], [ %14, %25 ]
  tail call void @SwapUVPlane(i8* %37, i32 %36, i8* nonnull %6, i32 %7, i32 %12, i32 %38)
  br label %39

39:                                               ; preds = %10, %35
  %40 = phi i32 [ 0, %35 ], [ -1, %10 ]
  ret i32 %40
}

; Function Attrs: nounwind ssp uwtable
define hidden void @SplitRGBPlane(i8*, i32, i8*, i32, i8*, i32, i8*, i32, i32, i32) local_unnamed_addr #0 {
  %11 = icmp slt i32 %9, 0
  br i1 %11, label %12, label %27

12:                                               ; preds = %10
  %13 = sub nsw i32 0, %9
  %14 = xor i32 %9, -1
  %15 = mul nsw i32 %14, %3
  %16 = sext i32 %15 to i64
  %17 = getelementptr inbounds i8, i8* %2, i64 %16
  %18 = mul nsw i32 %14, %5
  %19 = sext i32 %18 to i64
  %20 = getelementptr inbounds i8, i8* %4, i64 %19
  %21 = mul nsw i32 %14, %7
  %22 = sext i32 %21 to i64
  %23 = getelementptr inbounds i8, i8* %6, i64 %22
  %24 = sub nsw i32 0, %3
  %25 = sub nsw i32 0, %5
  %26 = sub nsw i32 0, %7
  br label %27

27:                                               ; preds = %12, %10
  %28 = phi i8* [ %17, %12 ], [ %2, %10 ]
  %29 = phi i32 [ %24, %12 ], [ %3, %10 ]
  %30 = phi i8* [ %20, %12 ], [ %4, %10 ]
  %31 = phi i32 [ %25, %12 ], [ %5, %10 ]
  %32 = phi i8* [ %23, %12 ], [ %6, %10 ]
  %33 = phi i32 [ %26, %12 ], [ %7, %10 ]
  %34 = phi i32 [ %13, %12 ], [ %9, %10 ]
  %35 = mul nsw i32 %8, 3
  %36 = icmp eq i32 %35, %1
  %37 = icmp eq i32 %29, %8
  %38 = and i1 %36, %37
  %39 = icmp eq i32 %31, %8
  %40 = and i1 %38, %39
  %41 = icmp eq i32 %33, %8
  %42 = and i1 %40, %41
  %43 = select i1 %42, i32 %34, i32 1
  %44 = mul nsw i32 %43, %8
  %45 = select i1 %42, i32 1, i32 %34
  %46 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %48, label %50

48:                                               ; preds = %27
  %49 = tail call i32 @InitCpuFlags() #6
  br label %50

50:                                               ; preds = %27, %48
  %51 = phi i32 [ %49, %48 ], [ %46, %27 ]
  %52 = and i32 %51, 64
  %53 = icmp eq i32 %52, 0
  br i1 %53, label %58, label %54

54:                                               ; preds = %50
  %55 = and i32 %44, 15
  %56 = icmp eq i32 %55, 0
  %57 = select i1 %56, void (i8*, i8*, i8*, i8*, i32)* @SplitRGBRow_SSSE3, void (i8*, i8*, i8*, i8*, i32)* @SplitRGBRow_Any_SSSE3
  br label %58

58:                                               ; preds = %50, %54
  %59 = phi void (i8*, i8*, i8*, i8*, i32)* [ %57, %54 ], [ @SplitRGBRow_C, %50 ]
  %60 = icmp sgt i32 %45, 0
  br i1 %60, label %61, label %82

61:                                               ; preds = %58
  %62 = sext i32 %29 to i64
  %63 = select i1 %42, i64 0, i64 %62
  %64 = sext i32 %31 to i64
  %65 = select i1 %42, i64 0, i64 %64
  %66 = sext i32 %33 to i64
  %67 = select i1 %42, i64 0, i64 %66
  %68 = sext i32 %1 to i64
  %69 = select i1 %42, i64 0, i64 %68
  br label %70

70:                                               ; preds = %70, %61
  %71 = phi i32 [ 0, %61 ], [ %80, %70 ]
  %72 = phi i8* [ %32, %61 ], [ %78, %70 ]
  %73 = phi i8* [ %30, %61 ], [ %77, %70 ]
  %74 = phi i8* [ %28, %61 ], [ %76, %70 ]
  %75 = phi i8* [ %0, %61 ], [ %79, %70 ]
  tail call void %59(i8* %75, i8* %74, i8* %73, i8* %72, i32 %44) #6, !callees !6
  %76 = getelementptr inbounds i8, i8* %74, i64 %63
  %77 = getelementptr inbounds i8, i8* %73, i64 %65
  %78 = getelementptr inbounds i8, i8* %72, i64 %67
  %79 = getelementptr inbounds i8, i8* %75, i64 %69
  %80 = add nuw nsw i32 %71, 1
  %81 = icmp eq i32 %80, %45
  br i1 %81, label %82, label %70

82:                                               ; preds = %70, %58
  ret void
}

declare void @SplitRGBRow_C(i8*, i8*, i8*, i8*, i32) local_unnamed_addr #2

declare void @SplitRGBRow_Any_SSSE3(i8*, i8*, i8*, i8*, i32) local_unnamed_addr #2

declare void @SplitRGBRow_SSSE3(i8*, i8*, i8*, i8*, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @MergeRGBPlane(i8*, i32, i8*, i32, i8*, i32, i8*, i32, i32, i32) local_unnamed_addr #0 {
  %11 = icmp slt i32 %9, 0
  br i1 %11, label %12, label %19

12:                                               ; preds = %10
  %13 = sub nsw i32 0, %9
  %14 = xor i32 %9, -1
  %15 = mul nsw i32 %14, %7
  %16 = sext i32 %15 to i64
  %17 = getelementptr inbounds i8, i8* %6, i64 %16
  %18 = sub nsw i32 0, %7
  br label %19

19:                                               ; preds = %12, %10
  %20 = phi i8* [ %17, %12 ], [ %6, %10 ]
  %21 = phi i32 [ %18, %12 ], [ %7, %10 ]
  %22 = phi i32 [ %13, %12 ], [ %9, %10 ]
  %23 = icmp eq i32 %1, %8
  %24 = icmp eq i32 %3, %8
  %25 = and i1 %23, %24
  %26 = icmp eq i32 %5, %8
  %27 = and i1 %26, %25
  %28 = mul nsw i32 %8, 3
  %29 = icmp eq i32 %21, %28
  %30 = and i1 %27, %29
  %31 = select i1 %30, i32 %22, i32 1
  %32 = mul nsw i32 %31, %8
  %33 = select i1 %30, i32 1, i32 %22
  %34 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %36, label %38

36:                                               ; preds = %19
  %37 = tail call i32 @InitCpuFlags() #6
  br label %38

38:                                               ; preds = %19, %36
  %39 = phi i32 [ %37, %36 ], [ %34, %19 ]
  %40 = and i32 %39, 64
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %46, label %42

42:                                               ; preds = %38
  %43 = and i32 %32, 15
  %44 = icmp eq i32 %43, 0
  %45 = select i1 %44, void (i8*, i8*, i8*, i8*, i32)* @MergeRGBRow_SSSE3, void (i8*, i8*, i8*, i8*, i32)* @MergeRGBRow_Any_SSSE3
  br label %46

46:                                               ; preds = %38, %42
  %47 = phi void (i8*, i8*, i8*, i8*, i32)* [ %45, %42 ], [ @MergeRGBRow_C, %38 ]
  %48 = icmp sgt i32 %33, 0
  br i1 %48, label %49, label %70

49:                                               ; preds = %46
  %50 = sext i32 %1 to i64
  %51 = select i1 %30, i64 0, i64 %50
  %52 = sext i32 %3 to i64
  %53 = select i1 %30, i64 0, i64 %52
  %54 = sext i32 %5 to i64
  %55 = select i1 %30, i64 0, i64 %54
  %56 = sext i32 %21 to i64
  %57 = select i1 %30, i64 0, i64 %56
  br label %58

58:                                               ; preds = %58, %49
  %59 = phi i32 [ 0, %49 ], [ %68, %58 ]
  %60 = phi i8* [ %20, %49 ], [ %67, %58 ]
  %61 = phi i8* [ %4, %49 ], [ %66, %58 ]
  %62 = phi i8* [ %2, %49 ], [ %65, %58 ]
  %63 = phi i8* [ %0, %49 ], [ %64, %58 ]
  tail call void %47(i8* %63, i8* %62, i8* %61, i8* %60, i32 %32) #6, !callees !7
  %64 = getelementptr inbounds i8, i8* %63, i64 %51
  %65 = getelementptr inbounds i8, i8* %62, i64 %53
  %66 = getelementptr inbounds i8, i8* %61, i64 %55
  %67 = getelementptr inbounds i8, i8* %60, i64 %57
  %68 = add nuw nsw i32 %59, 1
  %69 = icmp eq i32 %68, %33
  br i1 %69, label %70, label %58

70:                                               ; preds = %58, %46
  ret void
}

declare void @MergeRGBRow_C(i8*, i8*, i8*, i8*, i32) local_unnamed_addr #2

declare void @MergeRGBRow_Any_SSSE3(i8*, i8*, i8*, i8*, i32) local_unnamed_addr #2

declare void @MergeRGBRow_SSSE3(i8*, i8*, i8*, i8*, i32) local_unnamed_addr #2

; Function Attrs: noinline nounwind ssp uwtable
define hidden void @SplitARGBPlaneAlpha(i8*, i32, i8*, i32, i8*, i32, i8*, i32, i8*, i32, i32, i32) local_unnamed_addr #3 {
  %13 = shl nsw i32 %10, 2
  %14 = icmp eq i32 %13, %1
  %15 = icmp eq i32 %3, %10
  %16 = and i1 %15, %14
  %17 = icmp eq i32 %5, %10
  %18 = and i1 %17, %16
  %19 = icmp eq i32 %7, %10
  %20 = and i1 %19, %18
  %21 = icmp eq i32 %9, %10
  %22 = and i1 %21, %20
  %23 = select i1 %22, i32 %11, i32 1
  %24 = mul nsw i32 %23, %10
  %25 = select i1 %22, i32 1, i32 %11
  %26 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %28, label %30

28:                                               ; preds = %12
  %29 = tail call i32 @InitCpuFlags() #6
  br label %30

30:                                               ; preds = %12, %28
  %31 = phi i32 [ %29, %28 ], [ %26, %12 ]
  %32 = and i32 %31, 32
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %38, label %34

34:                                               ; preds = %30
  %35 = and i32 %24, 7
  %36 = icmp eq i32 %35, 0
  %37 = select i1 %36, void (i8*, i8*, i8*, i8*, i8*, i32)* @SplitARGBRow_SSE2, void (i8*, i8*, i8*, i8*, i8*, i32)* @SplitARGBRow_Any_SSE2
  br label %38

38:                                               ; preds = %30, %34
  %39 = phi void (i8*, i8*, i8*, i8*, i8*, i32)* [ %37, %34 ], [ @SplitARGBRow_C, %30 ]
  %40 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %42, label %44

42:                                               ; preds = %38
  %43 = tail call i32 @InitCpuFlags() #6
  br label %44

44:                                               ; preds = %38, %42
  %45 = phi i32 [ %43, %42 ], [ %40, %38 ]
  %46 = and i32 %45, 64
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %52, label %48

48:                                               ; preds = %44
  %49 = and i32 %24, 7
  %50 = icmp eq i32 %49, 0
  %51 = select i1 %50, void (i8*, i8*, i8*, i8*, i8*, i32)* @SplitARGBRow_SSSE3, void (i8*, i8*, i8*, i8*, i8*, i32)* @SplitARGBRow_Any_SSSE3
  br label %52

52:                                               ; preds = %44, %48
  %53 = phi void (i8*, i8*, i8*, i8*, i8*, i32)* [ %51, %48 ], [ %39, %44 ]
  %54 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %56, label %58

56:                                               ; preds = %52
  %57 = tail call i32 @InitCpuFlags() #6
  br label %58

58:                                               ; preds = %52, %56
  %59 = phi i32 [ %57, %56 ], [ %54, %52 ]
  %60 = and i32 %59, 1024
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %66, label %62

62:                                               ; preds = %58
  %63 = and i32 %24, 15
  %64 = icmp eq i32 %63, 0
  %65 = select i1 %64, void (i8*, i8*, i8*, i8*, i8*, i32)* @SplitARGBRow_AVX2, void (i8*, i8*, i8*, i8*, i8*, i32)* @SplitARGBRow_Any_AVX2
  br label %66

66:                                               ; preds = %58, %62
  %67 = phi void (i8*, i8*, i8*, i8*, i8*, i32)* [ %65, %62 ], [ %53, %58 ]
  %68 = icmp sgt i32 %25, 0
  br i1 %68, label %69, label %94

69:                                               ; preds = %66
  %70 = sext i32 %3 to i64
  %71 = select i1 %22, i64 0, i64 %70
  %72 = sext i32 %5 to i64
  %73 = select i1 %22, i64 0, i64 %72
  %74 = sext i32 %7 to i64
  %75 = select i1 %22, i64 0, i64 %74
  %76 = sext i32 %9 to i64
  %77 = select i1 %22, i64 0, i64 %76
  %78 = sext i32 %1 to i64
  %79 = select i1 %22, i64 0, i64 %78
  br label %80

80:                                               ; preds = %80, %69
  %81 = phi i32 [ 0, %69 ], [ %92, %80 ]
  %82 = phi i8* [ %8, %69 ], [ %90, %80 ]
  %83 = phi i8* [ %6, %69 ], [ %89, %80 ]
  %84 = phi i8* [ %4, %69 ], [ %88, %80 ]
  %85 = phi i8* [ %2, %69 ], [ %87, %80 ]
  %86 = phi i8* [ %0, %69 ], [ %91, %80 ]
  tail call void %67(i8* %86, i8* %85, i8* %84, i8* %83, i8* %82, i32 %24) #6
  %87 = getelementptr inbounds i8, i8* %85, i64 %71
  %88 = getelementptr inbounds i8, i8* %84, i64 %73
  %89 = getelementptr inbounds i8, i8* %83, i64 %75
  %90 = getelementptr inbounds i8, i8* %82, i64 %77
  %91 = getelementptr inbounds i8, i8* %86, i64 %79
  %92 = add nuw nsw i32 %81, 1
  %93 = icmp eq i32 %92, %25
  br i1 %93, label %94, label %80

94:                                               ; preds = %80, %66
  ret void
}

declare void @SplitARGBRow_C(i8*, i8*, i8*, i8*, i8*, i32) local_unnamed_addr #2

declare void @SplitARGBRow_Any_SSE2(i8*, i8*, i8*, i8*, i8*, i32) local_unnamed_addr #2

declare void @SplitARGBRow_SSE2(i8*, i8*, i8*, i8*, i8*, i32) local_unnamed_addr #2

declare void @SplitARGBRow_Any_SSSE3(i8*, i8*, i8*, i8*, i8*, i32) local_unnamed_addr #2

declare void @SplitARGBRow_SSSE3(i8*, i8*, i8*, i8*, i8*, i32) local_unnamed_addr #2

declare void @SplitARGBRow_Any_AVX2(i8*, i8*, i8*, i8*, i8*, i32) local_unnamed_addr #2

declare void @SplitARGBRow_AVX2(i8*, i8*, i8*, i8*, i8*, i32) local_unnamed_addr #2

; Function Attrs: noinline nounwind ssp uwtable
define hidden void @SplitARGBPlaneOpaque(i8*, i32, i8*, i32, i8*, i32, i8*, i32, i32, i32) local_unnamed_addr #3 {
  %11 = shl nsw i32 %8, 2
  %12 = icmp eq i32 %11, %1
  %13 = icmp eq i32 %3, %8
  %14 = and i1 %13, %12
  %15 = icmp eq i32 %5, %8
  %16 = and i1 %15, %14
  %17 = icmp eq i32 %7, %8
  %18 = and i1 %17, %16
  %19 = select i1 %18, i32 %9, i32 1
  %20 = mul nsw i32 %19, %8
  %21 = select i1 %18, i32 1, i32 %9
  %22 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %24, label %26

24:                                               ; preds = %10
  %25 = tail call i32 @InitCpuFlags() #6
  br label %26

26:                                               ; preds = %10, %24
  %27 = phi i32 [ %25, %24 ], [ %22, %10 ]
  %28 = and i32 %27, 32
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %34, label %30

30:                                               ; preds = %26
  %31 = and i32 %20, 7
  %32 = icmp eq i32 %31, 0
  %33 = select i1 %32, void (i8*, i8*, i8*, i8*, i32)* @SplitXRGBRow_SSE2, void (i8*, i8*, i8*, i8*, i32)* @SplitXRGBRow_Any_SSE2
  br label %34

34:                                               ; preds = %26, %30
  %35 = phi void (i8*, i8*, i8*, i8*, i32)* [ %33, %30 ], [ @SplitXRGBRow_C, %26 ]
  %36 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %38, label %40

38:                                               ; preds = %34
  %39 = tail call i32 @InitCpuFlags() #6
  br label %40

40:                                               ; preds = %34, %38
  %41 = phi i32 [ %39, %38 ], [ %36, %34 ]
  %42 = and i32 %41, 64
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %48, label %44

44:                                               ; preds = %40
  %45 = and i32 %20, 7
  %46 = icmp eq i32 %45, 0
  %47 = select i1 %46, void (i8*, i8*, i8*, i8*, i32)* @SplitXRGBRow_SSSE3, void (i8*, i8*, i8*, i8*, i32)* @SplitXRGBRow_Any_SSSE3
  br label %48

48:                                               ; preds = %40, %44
  %49 = phi void (i8*, i8*, i8*, i8*, i32)* [ %47, %44 ], [ %35, %40 ]
  %50 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %52, label %54

52:                                               ; preds = %48
  %53 = tail call i32 @InitCpuFlags() #6
  br label %54

54:                                               ; preds = %48, %52
  %55 = phi i32 [ %53, %52 ], [ %50, %48 ]
  %56 = and i32 %55, 1024
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %62, label %58

58:                                               ; preds = %54
  %59 = and i32 %20, 15
  %60 = icmp eq i32 %59, 0
  %61 = select i1 %60, void (i8*, i8*, i8*, i8*, i32)* @SplitXRGBRow_AVX2, void (i8*, i8*, i8*, i8*, i32)* @SplitXRGBRow_Any_AVX2
  br label %62

62:                                               ; preds = %54, %58
  %63 = phi void (i8*, i8*, i8*, i8*, i32)* [ %61, %58 ], [ %49, %54 ]
  %64 = icmp sgt i32 %21, 0
  br i1 %64, label %65, label %86

65:                                               ; preds = %62
  %66 = sext i32 %3 to i64
  %67 = select i1 %18, i64 0, i64 %66
  %68 = sext i32 %5 to i64
  %69 = select i1 %18, i64 0, i64 %68
  %70 = sext i32 %7 to i64
  %71 = select i1 %18, i64 0, i64 %70
  %72 = sext i32 %1 to i64
  %73 = select i1 %18, i64 0, i64 %72
  br label %74

74:                                               ; preds = %74, %65
  %75 = phi i32 [ 0, %65 ], [ %84, %74 ]
  %76 = phi i8* [ %6, %65 ], [ %82, %74 ]
  %77 = phi i8* [ %4, %65 ], [ %81, %74 ]
  %78 = phi i8* [ %2, %65 ], [ %80, %74 ]
  %79 = phi i8* [ %0, %65 ], [ %83, %74 ]
  tail call void %63(i8* %79, i8* %78, i8* %77, i8* %76, i32 %20) #6
  %80 = getelementptr inbounds i8, i8* %78, i64 %67
  %81 = getelementptr inbounds i8, i8* %77, i64 %69
  %82 = getelementptr inbounds i8, i8* %76, i64 %71
  %83 = getelementptr inbounds i8, i8* %79, i64 %73
  %84 = add nuw nsw i32 %75, 1
  %85 = icmp eq i32 %84, %21
  br i1 %85, label %86, label %74

86:                                               ; preds = %74, %62
  ret void
}

declare void @SplitXRGBRow_C(i8*, i8*, i8*, i8*, i32) local_unnamed_addr #2

declare void @SplitXRGBRow_Any_SSE2(i8*, i8*, i8*, i8*, i32) local_unnamed_addr #2

declare void @SplitXRGBRow_SSE2(i8*, i8*, i8*, i8*, i32) local_unnamed_addr #2

declare void @SplitXRGBRow_Any_SSSE3(i8*, i8*, i8*, i8*, i32) local_unnamed_addr #2

declare void @SplitXRGBRow_SSSE3(i8*, i8*, i8*, i8*, i32) local_unnamed_addr #2

declare void @SplitXRGBRow_Any_AVX2(i8*, i8*, i8*, i8*, i32) local_unnamed_addr #2

declare void @SplitXRGBRow_AVX2(i8*, i8*, i8*, i8*, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @SplitARGBPlane(i8*, i32, i8*, i32, i8*, i32, i8*, i32, i8*, i32, i32, i32) local_unnamed_addr #0 {
  %13 = icmp slt i32 %11, 0
  br i1 %13, label %14, label %33

14:                                               ; preds = %12
  %15 = sub nsw i32 0, %11
  %16 = xor i32 %11, -1
  %17 = mul nsw i32 %16, %3
  %18 = sext i32 %17 to i64
  %19 = getelementptr inbounds i8, i8* %2, i64 %18
  %20 = mul nsw i32 %16, %5
  %21 = sext i32 %20 to i64
  %22 = getelementptr inbounds i8, i8* %4, i64 %21
  %23 = mul nsw i32 %16, %7
  %24 = sext i32 %23 to i64
  %25 = getelementptr inbounds i8, i8* %6, i64 %24
  %26 = mul nsw i32 %16, %9
  %27 = sext i32 %26 to i64
  %28 = getelementptr inbounds i8, i8* %8, i64 %27
  %29 = sub nsw i32 0, %3
  %30 = sub nsw i32 0, %5
  %31 = sub nsw i32 0, %7
  %32 = sub nsw i32 0, %9
  br label %33

33:                                               ; preds = %14, %12
  %34 = phi i32 [ %29, %14 ], [ %3, %12 ]
  %35 = phi i8* [ %22, %14 ], [ %4, %12 ]
  %36 = phi i32 [ %30, %14 ], [ %5, %12 ]
  %37 = phi i8* [ %25, %14 ], [ %6, %12 ]
  %38 = phi i32 [ %31, %14 ], [ %7, %12 ]
  %39 = phi i8* [ %28, %14 ], [ %8, %12 ]
  %40 = phi i32 [ %32, %14 ], [ %9, %12 ]
  %41 = phi i8* [ %19, %14 ], [ %2, %12 ]
  %42 = phi i32 [ %15, %14 ], [ %11, %12 ]
  %43 = icmp eq i8* %39, null
  br i1 %43, label %44, label %45

44:                                               ; preds = %33
  tail call void @SplitARGBPlaneOpaque(i8* %0, i32 %1, i8* %41, i32 %34, i8* %35, i32 %36, i8* %37, i32 %38, i32 %10, i32 %42)
  br label %46

45:                                               ; preds = %33
  tail call void @SplitARGBPlaneAlpha(i8* %0, i32 %1, i8* %41, i32 %34, i8* %35, i32 %36, i8* %37, i32 %38, i8* nonnull %39, i32 %40, i32 %10, i32 %42)
  br label %46

46:                                               ; preds = %45, %44
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define hidden void @MergeARGBPlaneAlpha(i8*, i32, i8*, i32, i8*, i32, i8*, i32, i8*, i32, i32, i32) local_unnamed_addr #3 {
  %13 = icmp eq i32 %1, %10
  %14 = icmp eq i32 %3, %10
  %15 = and i1 %13, %14
  %16 = icmp eq i32 %5, %10
  %17 = and i1 %16, %15
  %18 = icmp eq i32 %7, %10
  %19 = and i1 %18, %17
  %20 = shl nsw i32 %10, 2
  %21 = icmp eq i32 %20, %9
  %22 = and i1 %21, %19
  %23 = select i1 %22, i32 %11, i32 1
  %24 = mul nsw i32 %23, %10
  %25 = select i1 %22, i32 1, i32 %11
  %26 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %28, label %30

28:                                               ; preds = %12
  %29 = tail call i32 @InitCpuFlags() #6
  br label %30

30:                                               ; preds = %12, %28
  %31 = phi i32 [ %29, %28 ], [ %26, %12 ]
  %32 = and i32 %31, 32
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %38, label %34

34:                                               ; preds = %30
  %35 = and i32 %24, 7
  %36 = icmp eq i32 %35, 0
  %37 = select i1 %36, void (i8*, i8*, i8*, i8*, i8*, i32)* @MergeARGBRow_SSE2, void (i8*, i8*, i8*, i8*, i8*, i32)* @MergeARGBRow_Any_SSE2
  br label %38

38:                                               ; preds = %30, %34
  %39 = phi void (i8*, i8*, i8*, i8*, i8*, i32)* [ %37, %34 ], [ @MergeARGBRow_C, %30 ]
  %40 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %42, label %44

42:                                               ; preds = %38
  %43 = tail call i32 @InitCpuFlags() #6
  br label %44

44:                                               ; preds = %38, %42
  %45 = phi i32 [ %43, %42 ], [ %40, %38 ]
  %46 = and i32 %45, 1024
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %52, label %48

48:                                               ; preds = %44
  %49 = and i32 %24, 15
  %50 = icmp eq i32 %49, 0
  %51 = select i1 %50, void (i8*, i8*, i8*, i8*, i8*, i32)* @MergeARGBRow_AVX2, void (i8*, i8*, i8*, i8*, i8*, i32)* @MergeARGBRow_Any_AVX2
  br label %52

52:                                               ; preds = %44, %48
  %53 = phi void (i8*, i8*, i8*, i8*, i8*, i32)* [ %51, %48 ], [ %39, %44 ]
  %54 = icmp sgt i32 %25, 0
  br i1 %54, label %55, label %80

55:                                               ; preds = %52
  %56 = sext i32 %1 to i64
  %57 = select i1 %22, i64 0, i64 %56
  %58 = sext i32 %3 to i64
  %59 = select i1 %22, i64 0, i64 %58
  %60 = sext i32 %5 to i64
  %61 = select i1 %22, i64 0, i64 %60
  %62 = sext i32 %7 to i64
  %63 = select i1 %22, i64 0, i64 %62
  %64 = sext i32 %9 to i64
  %65 = select i1 %22, i64 0, i64 %64
  br label %66

66:                                               ; preds = %66, %55
  %67 = phi i32 [ 0, %55 ], [ %78, %66 ]
  %68 = phi i8* [ %8, %55 ], [ %77, %66 ]
  %69 = phi i8* [ %6, %55 ], [ %76, %66 ]
  %70 = phi i8* [ %4, %55 ], [ %75, %66 ]
  %71 = phi i8* [ %2, %55 ], [ %74, %66 ]
  %72 = phi i8* [ %0, %55 ], [ %73, %66 ]
  tail call void %53(i8* %72, i8* %71, i8* %70, i8* %69, i8* %68, i32 %24) #6
  %73 = getelementptr inbounds i8, i8* %72, i64 %57
  %74 = getelementptr inbounds i8, i8* %71, i64 %59
  %75 = getelementptr inbounds i8, i8* %70, i64 %61
  %76 = getelementptr inbounds i8, i8* %69, i64 %63
  %77 = getelementptr inbounds i8, i8* %68, i64 %65
  %78 = add nuw nsw i32 %67, 1
  %79 = icmp eq i32 %78, %25
  br i1 %79, label %80, label %66

80:                                               ; preds = %66, %52
  ret void
}

declare void @MergeARGBRow_C(i8*, i8*, i8*, i8*, i8*, i32) local_unnamed_addr #2

declare void @MergeARGBRow_Any_SSE2(i8*, i8*, i8*, i8*, i8*, i32) local_unnamed_addr #2

declare void @MergeARGBRow_SSE2(i8*, i8*, i8*, i8*, i8*, i32) local_unnamed_addr #2

declare void @MergeARGBRow_Any_AVX2(i8*, i8*, i8*, i8*, i8*, i32) local_unnamed_addr #2

declare void @MergeARGBRow_AVX2(i8*, i8*, i8*, i8*, i8*, i32) local_unnamed_addr #2

; Function Attrs: noinline nounwind ssp uwtable
define hidden void @MergeARGBPlaneOpaque(i8*, i32, i8*, i32, i8*, i32, i8*, i32, i32, i32) local_unnamed_addr #3 {
  %11 = icmp eq i32 %1, %8
  %12 = icmp eq i32 %3, %8
  %13 = and i1 %11, %12
  %14 = icmp eq i32 %5, %8
  %15 = and i1 %14, %13
  %16 = shl nsw i32 %8, 2
  %17 = icmp eq i32 %16, %7
  %18 = and i1 %17, %15
  %19 = select i1 %18, i32 %9, i32 1
  %20 = mul nsw i32 %19, %8
  %21 = select i1 %18, i32 1, i32 %9
  %22 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %24, label %26

24:                                               ; preds = %10
  %25 = tail call i32 @InitCpuFlags() #6
  br label %26

26:                                               ; preds = %10, %24
  %27 = phi i32 [ %25, %24 ], [ %22, %10 ]
  %28 = and i32 %27, 32
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %34, label %30

30:                                               ; preds = %26
  %31 = and i32 %20, 7
  %32 = icmp eq i32 %31, 0
  %33 = select i1 %32, void (i8*, i8*, i8*, i8*, i32)* @MergeXRGBRow_SSE2, void (i8*, i8*, i8*, i8*, i32)* @MergeXRGBRow_Any_SSE2
  br label %34

34:                                               ; preds = %26, %30
  %35 = phi void (i8*, i8*, i8*, i8*, i32)* [ %33, %30 ], [ @MergeXRGBRow_C, %26 ]
  %36 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %38, label %40

38:                                               ; preds = %34
  %39 = tail call i32 @InitCpuFlags() #6
  br label %40

40:                                               ; preds = %34, %38
  %41 = phi i32 [ %39, %38 ], [ %36, %34 ]
  %42 = and i32 %41, 1024
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %48, label %44

44:                                               ; preds = %40
  %45 = and i32 %20, 15
  %46 = icmp eq i32 %45, 0
  %47 = select i1 %46, void (i8*, i8*, i8*, i8*, i32)* @MergeXRGBRow_AVX2, void (i8*, i8*, i8*, i8*, i32)* @MergeXRGBRow_Any_AVX2
  br label %48

48:                                               ; preds = %40, %44
  %49 = phi void (i8*, i8*, i8*, i8*, i32)* [ %47, %44 ], [ %35, %40 ]
  %50 = icmp sgt i32 %21, 0
  br i1 %50, label %51, label %72

51:                                               ; preds = %48
  %52 = sext i32 %1 to i64
  %53 = select i1 %18, i64 0, i64 %52
  %54 = sext i32 %3 to i64
  %55 = select i1 %18, i64 0, i64 %54
  %56 = sext i32 %5 to i64
  %57 = select i1 %18, i64 0, i64 %56
  %58 = sext i32 %7 to i64
  %59 = select i1 %18, i64 0, i64 %58
  br label %60

60:                                               ; preds = %60, %51
  %61 = phi i32 [ 0, %51 ], [ %70, %60 ]
  %62 = phi i8* [ %6, %51 ], [ %69, %60 ]
  %63 = phi i8* [ %4, %51 ], [ %68, %60 ]
  %64 = phi i8* [ %2, %51 ], [ %67, %60 ]
  %65 = phi i8* [ %0, %51 ], [ %66, %60 ]
  tail call void %49(i8* %65, i8* %64, i8* %63, i8* %62, i32 %20) #6
  %66 = getelementptr inbounds i8, i8* %65, i64 %53
  %67 = getelementptr inbounds i8, i8* %64, i64 %55
  %68 = getelementptr inbounds i8, i8* %63, i64 %57
  %69 = getelementptr inbounds i8, i8* %62, i64 %59
  %70 = add nuw nsw i32 %61, 1
  %71 = icmp eq i32 %70, %21
  br i1 %71, label %72, label %60

72:                                               ; preds = %60, %48
  ret void
}

declare void @MergeXRGBRow_C(i8*, i8*, i8*, i8*, i32) local_unnamed_addr #2

declare void @MergeXRGBRow_Any_SSE2(i8*, i8*, i8*, i8*, i32) local_unnamed_addr #2

declare void @MergeXRGBRow_SSE2(i8*, i8*, i8*, i8*, i32) local_unnamed_addr #2

declare void @MergeXRGBRow_Any_AVX2(i8*, i8*, i8*, i8*, i32) local_unnamed_addr #2

declare void @MergeXRGBRow_AVX2(i8*, i8*, i8*, i8*, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @MergeARGBPlane(i8*, i32, i8*, i32, i8*, i32, i8*, i32, i8*, i32, i32, i32) local_unnamed_addr #0 {
  %13 = icmp slt i32 %11, 0
  br i1 %13, label %14, label %21

14:                                               ; preds = %12
  %15 = sub nsw i32 0, %11
  %16 = xor i32 %11, -1
  %17 = mul nsw i32 %16, %9
  %18 = sext i32 %17 to i64
  %19 = getelementptr inbounds i8, i8* %8, i64 %18
  %20 = sub nsw i32 0, %9
  br label %21

21:                                               ; preds = %14, %12
  %22 = phi i32 [ %20, %14 ], [ %9, %12 ]
  %23 = phi i8* [ %19, %14 ], [ %8, %12 ]
  %24 = phi i32 [ %15, %14 ], [ %11, %12 ]
  %25 = icmp eq i8* %6, null
  br i1 %25, label %26, label %27

26:                                               ; preds = %21
  tail call void @MergeARGBPlaneOpaque(i8* %0, i32 %1, i8* %2, i32 %3, i8* %4, i32 %5, i8* %23, i32 %22, i32 %10, i32 %24)
  br label %28

27:                                               ; preds = %21
  tail call void @MergeARGBPlaneAlpha(i8* %0, i32 %1, i8* %2, i32 %3, i8* %4, i32 %5, i8* nonnull %6, i32 %7, i8* %23, i32 %22, i32 %10, i32 %24)
  br label %28

28:                                               ; preds = %27, %26
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @MergeXR30Plane(i16*, i32, i16*, i32, i16*, i32, i8*, i32, i32, i32, i32) local_unnamed_addr #0 {
  %12 = icmp slt i32 %9, 0
  br i1 %12, label %13, label %20

13:                                               ; preds = %11
  %14 = sub nsw i32 0, %9
  %15 = xor i32 %9, -1
  %16 = mul nsw i32 %15, %7
  %17 = sext i32 %16 to i64
  %18 = getelementptr inbounds i8, i8* %6, i64 %17
  %19 = sub nsw i32 0, %7
  br label %20

20:                                               ; preds = %13, %11
  %21 = phi i8* [ %18, %13 ], [ %6, %11 ]
  %22 = phi i32 [ %19, %13 ], [ %7, %11 ]
  %23 = phi i32 [ %14, %13 ], [ %9, %11 ]
  %24 = icmp eq i32 %1, %8
  %25 = icmp eq i32 %3, %8
  %26 = and i1 %24, %25
  %27 = icmp eq i32 %5, %8
  %28 = and i1 %27, %26
  %29 = shl nsw i32 %8, 2
  %30 = icmp eq i32 %22, %29
  %31 = and i1 %28, %30
  %32 = select i1 %31, i32 %23, i32 1
  %33 = mul nsw i32 %32, %8
  %34 = select i1 %31, i32 1, i32 %23
  %35 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %37, label %39

37:                                               ; preds = %20
  %38 = tail call i32 @InitCpuFlags() #6
  br label %39

39:                                               ; preds = %20, %37
  %40 = phi i32 [ %38, %37 ], [ %35, %20 ]
  %41 = and i32 %40, 1024
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %47, label %43

43:                                               ; preds = %39
  %44 = and i32 %33, 15
  %45 = icmp eq i32 %44, 0
  %46 = select i1 %45, void (i16*, i16*, i16*, i8*, i32, i32)* @MergeXR30Row_AVX2, void (i16*, i16*, i16*, i8*, i32, i32)* @MergeXR30Row_Any_AVX2
  br label %47

47:                                               ; preds = %39, %43
  %48 = phi void (i16*, i16*, i16*, i8*, i32, i32)* [ %46, %43 ], [ @MergeXR30Row_C, %39 ]
  %49 = icmp sgt i32 %34, 0
  br i1 %49, label %50, label %71

50:                                               ; preds = %47
  %51 = sext i32 %1 to i64
  %52 = select i1 %31, i64 0, i64 %51
  %53 = sext i32 %3 to i64
  %54 = select i1 %31, i64 0, i64 %53
  %55 = sext i32 %5 to i64
  %56 = select i1 %31, i64 0, i64 %55
  %57 = sext i32 %22 to i64
  %58 = select i1 %31, i64 0, i64 %57
  br label %59

59:                                               ; preds = %59, %50
  %60 = phi i32 [ 0, %50 ], [ %69, %59 ]
  %61 = phi i16* [ %0, %50 ], [ %65, %59 ]
  %62 = phi i8* [ %21, %50 ], [ %68, %59 ]
  %63 = phi i16* [ %4, %50 ], [ %67, %59 ]
  %64 = phi i16* [ %2, %50 ], [ %66, %59 ]
  tail call void %48(i16* %61, i16* %64, i16* %63, i8* %62, i32 %10, i32 %33) #6, !callees !8
  %65 = getelementptr inbounds i16, i16* %61, i64 %52
  %66 = getelementptr inbounds i16, i16* %64, i64 %54
  %67 = getelementptr inbounds i16, i16* %63, i64 %56
  %68 = getelementptr inbounds i8, i8* %62, i64 %58
  %69 = add nuw nsw i32 %60, 1
  %70 = icmp eq i32 %69, %34
  br i1 %70, label %71, label %59

71:                                               ; preds = %59, %47
  ret void
}

declare void @MergeXR30Row_C(i16*, i16*, i16*, i8*, i32, i32) local_unnamed_addr #2

declare void @MergeXR30Row_Any_AVX2(i16*, i16*, i16*, i8*, i32, i32) local_unnamed_addr #2

declare void @MergeXR30Row_AVX2(i16*, i16*, i16*, i8*, i32, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @MergeAR64Plane(i16*, i32, i16*, i32, i16*, i32, i16*, i32, i16*, i32, i32, i32, i32) local_unnamed_addr #0 {
  %14 = icmp slt i32 %11, 0
  br i1 %14, label %15, label %22

15:                                               ; preds = %13
  %16 = sub nsw i32 0, %11
  %17 = xor i32 %11, -1
  %18 = mul nsw i32 %17, %9
  %19 = sext i32 %18 to i64
  %20 = getelementptr inbounds i16, i16* %8, i64 %19
  %21 = sub nsw i32 0, %9
  br label %22

22:                                               ; preds = %15, %13
  %23 = phi i32 [ %21, %15 ], [ %9, %13 ]
  %24 = phi i32 [ %16, %15 ], [ %11, %13 ]
  %25 = phi i16* [ %20, %15 ], [ %8, %13 ]
  %26 = icmp eq i16* %6, null
  br i1 %26, label %27, label %28

27:                                               ; preds = %22
  tail call fastcc void @_ZN6libyuvL20MergeAR64PlaneOpaqueEPKtiS1_iS1_iPtiiii(i16* %0, i32 %1, i16* %2, i32 %3, i16* %4, i32 %5, i16* %25, i32 %23, i32 %10, i32 %24, i32 %12)
  br label %29

28:                                               ; preds = %22
  tail call fastcc void @_ZN6libyuvL19MergeAR64PlaneAlphaEPKtiS1_iS1_iS1_iPtiiii(i16* %0, i32 %1, i16* %2, i32 %3, i16* %4, i32 %5, i16* nonnull %6, i32 %7, i16* %25, i32 %23, i32 %10, i32 %24, i32 %12)
  br label %29

29:                                               ; preds = %28, %27
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define internal fastcc void @_ZN6libyuvL20MergeAR64PlaneOpaqueEPKtiS1_iS1_iPtiiii(i16*, i32, i16*, i32, i16*, i32, i16*, i32, i32, i32, i32) unnamed_addr #3 {
  %12 = icmp eq i32 %1, %8
  %13 = icmp eq i32 %3, %8
  %14 = and i1 %12, %13
  %15 = icmp eq i32 %5, %8
  %16 = and i1 %15, %14
  %17 = shl nsw i32 %8, 2
  %18 = icmp eq i32 %17, %7
  %19 = and i1 %18, %16
  %20 = select i1 %19, i32 %9, i32 1
  %21 = mul nsw i32 %20, %8
  %22 = select i1 %19, i32 1, i32 %9
  %23 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %25, label %27

25:                                               ; preds = %11
  %26 = tail call i32 @InitCpuFlags() #6
  br label %27

27:                                               ; preds = %11, %25
  %28 = phi i32 [ %26, %25 ], [ %23, %11 ]
  %29 = and i32 %28, 1024
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %35, label %31

31:                                               ; preds = %27
  %32 = and i32 %21, 15
  %33 = icmp eq i32 %32, 0
  %34 = select i1 %33, void (i16*, i16*, i16*, i16*, i32, i32)* @MergeXR64Row_AVX2, void (i16*, i16*, i16*, i16*, i32, i32)* @MergeXR64Row_Any_AVX2
  br label %35

35:                                               ; preds = %27, %31
  %36 = phi void (i16*, i16*, i16*, i16*, i32, i32)* [ %34, %31 ], [ @MergeXR64Row_C, %27 ]
  %37 = icmp sgt i32 %22, 0
  br i1 %37, label %38, label %59

38:                                               ; preds = %35
  %39 = sext i32 %1 to i64
  %40 = select i1 %19, i64 0, i64 %39
  %41 = sext i32 %3 to i64
  %42 = select i1 %19, i64 0, i64 %41
  %43 = sext i32 %5 to i64
  %44 = select i1 %19, i64 0, i64 %43
  %45 = sext i32 %7 to i64
  %46 = select i1 %19, i64 0, i64 %45
  br label %47

47:                                               ; preds = %47, %38
  %48 = phi i32 [ 0, %38 ], [ %57, %47 ]
  %49 = phi i16* [ %0, %38 ], [ %53, %47 ]
  %50 = phi i16* [ %6, %38 ], [ %56, %47 ]
  %51 = phi i16* [ %4, %38 ], [ %55, %47 ]
  %52 = phi i16* [ %2, %38 ], [ %54, %47 ]
  tail call void %36(i16* %49, i16* %52, i16* %51, i16* %50, i32 %10, i32 %21) #6, !callees !9
  %53 = getelementptr inbounds i16, i16* %49, i64 %40
  %54 = getelementptr inbounds i16, i16* %52, i64 %42
  %55 = getelementptr inbounds i16, i16* %51, i64 %44
  %56 = getelementptr inbounds i16, i16* %50, i64 %46
  %57 = add nuw nsw i32 %48, 1
  %58 = icmp eq i32 %57, %22
  br i1 %58, label %59, label %47

59:                                               ; preds = %47, %35
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define internal fastcc void @_ZN6libyuvL19MergeAR64PlaneAlphaEPKtiS1_iS1_iS1_iPtiiii(i16*, i32, i16*, i32, i16*, i32, i16*, i32, i16*, i32, i32, i32, i32) unnamed_addr #3 {
  %14 = icmp eq i32 %1, %10
  %15 = icmp eq i32 %3, %10
  %16 = and i1 %14, %15
  %17 = icmp eq i32 %5, %10
  %18 = and i1 %17, %16
  %19 = icmp eq i32 %7, %10
  %20 = and i1 %19, %18
  %21 = shl nsw i32 %10, 2
  %22 = icmp eq i32 %21, %9
  %23 = and i1 %22, %20
  %24 = select i1 %23, i32 %11, i32 1
  %25 = mul nsw i32 %24, %10
  %26 = select i1 %23, i32 1, i32 %11
  %27 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %29, label %31

29:                                               ; preds = %13
  %30 = tail call i32 @InitCpuFlags() #6
  br label %31

31:                                               ; preds = %13, %29
  %32 = phi i32 [ %30, %29 ], [ %27, %13 ]
  %33 = and i32 %32, 1024
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %39, label %35

35:                                               ; preds = %31
  %36 = and i32 %25, 15
  %37 = icmp eq i32 %36, 0
  %38 = select i1 %37, void (i16*, i16*, i16*, i16*, i16*, i32, i32)* @MergeAR64Row_AVX2, void (i16*, i16*, i16*, i16*, i16*, i32, i32)* @MergeAR64Row_Any_AVX2
  br label %39

39:                                               ; preds = %31, %35
  %40 = phi void (i16*, i16*, i16*, i16*, i16*, i32, i32)* [ %38, %35 ], [ @MergeAR64Row_C, %31 ]
  %41 = icmp sgt i32 %26, 0
  br i1 %41, label %42, label %67

42:                                               ; preds = %39
  %43 = sext i32 %1 to i64
  %44 = select i1 %23, i64 0, i64 %43
  %45 = sext i32 %3 to i64
  %46 = select i1 %23, i64 0, i64 %45
  %47 = sext i32 %5 to i64
  %48 = select i1 %23, i64 0, i64 %47
  %49 = sext i32 %7 to i64
  %50 = select i1 %23, i64 0, i64 %49
  %51 = sext i32 %9 to i64
  %52 = select i1 %23, i64 0, i64 %51
  br label %53

53:                                               ; preds = %53, %42
  %54 = phi i32 [ 0, %42 ], [ %65, %53 ]
  %55 = phi i16* [ %0, %42 ], [ %60, %53 ]
  %56 = phi i16* [ %8, %42 ], [ %64, %53 ]
  %57 = phi i16* [ %6, %42 ], [ %63, %53 ]
  %58 = phi i16* [ %4, %42 ], [ %62, %53 ]
  %59 = phi i16* [ %2, %42 ], [ %61, %53 ]
  tail call void %40(i16* %55, i16* %59, i16* %58, i16* %57, i16* %56, i32 %12, i32 %25) #6, !callees !10
  %60 = getelementptr inbounds i16, i16* %55, i64 %44
  %61 = getelementptr inbounds i16, i16* %59, i64 %46
  %62 = getelementptr inbounds i16, i16* %58, i64 %48
  %63 = getelementptr inbounds i16, i16* %57, i64 %50
  %64 = getelementptr inbounds i16, i16* %56, i64 %52
  %65 = add nuw nsw i32 %54, 1
  %66 = icmp eq i32 %65, %26
  br i1 %66, label %67, label %53

67:                                               ; preds = %53, %39
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @MergeARGB16To8Plane(i16*, i32, i16*, i32, i16*, i32, i16*, i32, i8*, i32, i32, i32, i32) local_unnamed_addr #0 {
  %14 = icmp slt i32 %11, 0
  br i1 %14, label %15, label %22

15:                                               ; preds = %13
  %16 = sub nsw i32 0, %11
  %17 = xor i32 %11, -1
  %18 = mul nsw i32 %17, %9
  %19 = sext i32 %18 to i64
  %20 = getelementptr inbounds i8, i8* %8, i64 %19
  %21 = sub nsw i32 0, %9
  br label %22

22:                                               ; preds = %15, %13
  %23 = phi i32 [ %21, %15 ], [ %9, %13 ]
  %24 = phi i32 [ %16, %15 ], [ %11, %13 ]
  %25 = phi i8* [ %20, %15 ], [ %8, %13 ]
  %26 = icmp eq i16* %6, null
  br i1 %26, label %27, label %28

27:                                               ; preds = %22
  tail call fastcc void @_ZN6libyuvL25MergeARGB16To8PlaneOpaqueEPKtiS1_iS1_iPhiiii(i16* %0, i32 %1, i16* %2, i32 %3, i16* %4, i32 %5, i8* %25, i32 %23, i32 %10, i32 %24, i32 %12)
  br label %29

28:                                               ; preds = %22
  tail call fastcc void @_ZN6libyuvL24MergeARGB16To8PlaneAlphaEPKtiS1_iS1_iS1_iPhiiii(i16* %0, i32 %1, i16* %2, i32 %3, i16* %4, i32 %5, i16* nonnull %6, i32 %7, i8* %25, i32 %23, i32 %10, i32 %24, i32 %12)
  br label %29

29:                                               ; preds = %28, %27
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define internal fastcc void @_ZN6libyuvL25MergeARGB16To8PlaneOpaqueEPKtiS1_iS1_iPhiiii(i16*, i32, i16*, i32, i16*, i32, i8*, i32, i32, i32, i32) unnamed_addr #3 {
  %12 = icmp eq i32 %1, %8
  %13 = icmp eq i32 %3, %8
  %14 = and i1 %12, %13
  %15 = icmp eq i32 %5, %8
  %16 = and i1 %15, %14
  %17 = shl nsw i32 %8, 2
  %18 = icmp eq i32 %17, %7
  %19 = and i1 %18, %16
  %20 = select i1 %19, i32 %9, i32 1
  %21 = mul nsw i32 %20, %8
  %22 = select i1 %19, i32 1, i32 %9
  %23 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %25, label %27

25:                                               ; preds = %11
  %26 = tail call i32 @InitCpuFlags() #6
  br label %27

27:                                               ; preds = %11, %25
  %28 = phi i32 [ %26, %25 ], [ %23, %11 ]
  %29 = and i32 %28, 1024
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %35, label %31

31:                                               ; preds = %27
  %32 = and i32 %21, 15
  %33 = icmp eq i32 %32, 0
  %34 = select i1 %33, void (i16*, i16*, i16*, i8*, i32, i32)* @MergeXRGB16To8Row_AVX2, void (i16*, i16*, i16*, i8*, i32, i32)* @MergeXRGB16To8Row_Any_AVX2
  br label %35

35:                                               ; preds = %27, %31
  %36 = phi void (i16*, i16*, i16*, i8*, i32, i32)* [ %34, %31 ], [ @MergeXRGB16To8Row_C, %27 ]
  %37 = icmp sgt i32 %22, 0
  br i1 %37, label %38, label %59

38:                                               ; preds = %35
  %39 = sext i32 %1 to i64
  %40 = select i1 %19, i64 0, i64 %39
  %41 = sext i32 %3 to i64
  %42 = select i1 %19, i64 0, i64 %41
  %43 = sext i32 %5 to i64
  %44 = select i1 %19, i64 0, i64 %43
  %45 = sext i32 %7 to i64
  %46 = select i1 %19, i64 0, i64 %45
  br label %47

47:                                               ; preds = %47, %38
  %48 = phi i32 [ 0, %38 ], [ %57, %47 ]
  %49 = phi i16* [ %0, %38 ], [ %53, %47 ]
  %50 = phi i8* [ %6, %38 ], [ %56, %47 ]
  %51 = phi i16* [ %4, %38 ], [ %55, %47 ]
  %52 = phi i16* [ %2, %38 ], [ %54, %47 ]
  tail call void %36(i16* %49, i16* %52, i16* %51, i8* %50, i32 %10, i32 %21) #6, !callees !11
  %53 = getelementptr inbounds i16, i16* %49, i64 %40
  %54 = getelementptr inbounds i16, i16* %52, i64 %42
  %55 = getelementptr inbounds i16, i16* %51, i64 %44
  %56 = getelementptr inbounds i8, i8* %50, i64 %46
  %57 = add nuw nsw i32 %48, 1
  %58 = icmp eq i32 %57, %22
  br i1 %58, label %59, label %47

59:                                               ; preds = %47, %35
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define internal fastcc void @_ZN6libyuvL24MergeARGB16To8PlaneAlphaEPKtiS1_iS1_iS1_iPhiiii(i16*, i32, i16*, i32, i16*, i32, i16*, i32, i8*, i32, i32, i32, i32) unnamed_addr #3 {
  %14 = icmp eq i32 %1, %10
  %15 = icmp eq i32 %3, %10
  %16 = and i1 %14, %15
  %17 = icmp eq i32 %5, %10
  %18 = and i1 %17, %16
  %19 = icmp eq i32 %7, %10
  %20 = and i1 %19, %18
  %21 = shl nsw i32 %10, 2
  %22 = icmp eq i32 %21, %9
  %23 = and i1 %22, %20
  %24 = select i1 %23, i32 %11, i32 1
  %25 = mul nsw i32 %24, %10
  %26 = select i1 %23, i32 1, i32 %11
  %27 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %29, label %31

29:                                               ; preds = %13
  %30 = tail call i32 @InitCpuFlags() #6
  br label %31

31:                                               ; preds = %13, %29
  %32 = phi i32 [ %30, %29 ], [ %27, %13 ]
  %33 = and i32 %32, 1024
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %39, label %35

35:                                               ; preds = %31
  %36 = and i32 %25, 15
  %37 = icmp eq i32 %36, 0
  %38 = select i1 %37, void (i16*, i16*, i16*, i16*, i8*, i32, i32)* @MergeARGB16To8Row_AVX2, void (i16*, i16*, i16*, i16*, i8*, i32, i32)* @MergeARGB16To8Row_Any_AVX2
  br label %39

39:                                               ; preds = %31, %35
  %40 = phi void (i16*, i16*, i16*, i16*, i8*, i32, i32)* [ %38, %35 ], [ @MergeARGB16To8Row_C, %31 ]
  %41 = icmp sgt i32 %26, 0
  br i1 %41, label %42, label %67

42:                                               ; preds = %39
  %43 = sext i32 %1 to i64
  %44 = select i1 %23, i64 0, i64 %43
  %45 = sext i32 %3 to i64
  %46 = select i1 %23, i64 0, i64 %45
  %47 = sext i32 %5 to i64
  %48 = select i1 %23, i64 0, i64 %47
  %49 = sext i32 %7 to i64
  %50 = select i1 %23, i64 0, i64 %49
  %51 = sext i32 %9 to i64
  %52 = select i1 %23, i64 0, i64 %51
  br label %53

53:                                               ; preds = %53, %42
  %54 = phi i32 [ 0, %42 ], [ %65, %53 ]
  %55 = phi i16* [ %0, %42 ], [ %60, %53 ]
  %56 = phi i8* [ %8, %42 ], [ %64, %53 ]
  %57 = phi i16* [ %6, %42 ], [ %63, %53 ]
  %58 = phi i16* [ %4, %42 ], [ %62, %53 ]
  %59 = phi i16* [ %2, %42 ], [ %61, %53 ]
  tail call void %40(i16* %55, i16* %59, i16* %58, i16* %57, i8* %56, i32 %12, i32 %25) #6, !callees !12
  %60 = getelementptr inbounds i16, i16* %55, i64 %44
  %61 = getelementptr inbounds i16, i16* %59, i64 %46
  %62 = getelementptr inbounds i16, i16* %58, i64 %48
  %63 = getelementptr inbounds i16, i16* %57, i64 %50
  %64 = getelementptr inbounds i8, i8* %56, i64 %52
  %65 = add nuw nsw i32 %54, 1
  %66 = icmp eq i32 %65, %26
  br i1 %66, label %67, label %53

67:                                               ; preds = %53, %39
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @YUY2ToI422(i8*, i32, i8*, i32, i8*, i32, i8*, i32, i32, i32) local_unnamed_addr #0 {
  %11 = icmp ne i8* %0, null
  %12 = icmp ne i8* %2, null
  %13 = and i1 %11, %12
  %14 = icmp ne i8* %4, null
  %15 = and i1 %13, %14
  %16 = icmp ne i8* %6, null
  %17 = and i1 %15, %16
  %18 = xor i1 %17, true
  %19 = icmp slt i32 %8, 1
  %20 = or i1 %19, %18
  %21 = icmp eq i32 %9, 0
  %22 = or i1 %20, %21
  br i1 %22, label %112, label %23

23:                                               ; preds = %10
  %24 = icmp slt i32 %9, 0
  br i1 %24, label %25, label %32

25:                                               ; preds = %23
  %26 = sub nsw i32 0, %9
  %27 = xor i32 %9, -1
  %28 = mul nsw i32 %27, %1
  %29 = sext i32 %28 to i64
  %30 = getelementptr inbounds i8, i8* %0, i64 %29
  %31 = sub nsw i32 0, %1
  br label %32

32:                                               ; preds = %25, %23
  %33 = phi i8* [ %30, %25 ], [ %0, %23 ]
  %34 = phi i32 [ %31, %25 ], [ %1, %23 ]
  %35 = phi i32 [ %26, %25 ], [ %9, %23 ]
  %36 = shl nsw i32 %8, 1
  %37 = icmp eq i32 %34, %36
  %38 = icmp eq i32 %3, %8
  %39 = and i1 %38, %37
  %40 = shl nsw i32 %5, 1
  %41 = icmp eq i32 %40, %8
  %42 = and i1 %41, %39
  %43 = shl nsw i32 %7, 1
  %44 = icmp eq i32 %43, %8
  %45 = and i1 %44, %42
  br i1 %45, label %46, label %55

46:                                               ; preds = %32
  %47 = mul nsw i32 %35, %8
  %48 = icmp slt i32 %47, 32769
  %49 = select i1 %48, i32 0, i32 %34
  %50 = select i1 %48, i32 0, i32 %8
  %51 = select i1 %48, i32 0, i32 %5
  %52 = select i1 %48, i32 0, i32 %7
  %53 = select i1 %48, i32 %47, i32 %8
  %54 = select i1 %48, i32 1, i32 %35
  br label %55

55:                                               ; preds = %46, %32
  %56 = phi i32 [ %34, %32 ], [ %49, %46 ]
  %57 = phi i32 [ %3, %32 ], [ %50, %46 ]
  %58 = phi i32 [ %5, %32 ], [ %51, %46 ]
  %59 = phi i32 [ %7, %32 ], [ %52, %46 ]
  %60 = phi i32 [ %8, %32 ], [ %53, %46 ]
  %61 = phi i32 [ %35, %32 ], [ %54, %46 ]
  %62 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %63 = icmp eq i32 %62, 0
  br i1 %63, label %64, label %66

64:                                               ; preds = %55
  %65 = tail call i32 @InitCpuFlags() #6
  br label %66

66:                                               ; preds = %55, %64
  %67 = phi i32 [ %65, %64 ], [ %62, %55 ]
  %68 = and i32 %67, 32
  %69 = icmp eq i32 %68, 0
  br i1 %69, label %75, label %70

70:                                               ; preds = %66
  %71 = and i32 %60, 15
  %72 = icmp eq i32 %71, 0
  %73 = select i1 %72, void (i8*, i8*, i8*, i32)* @YUY2ToUV422Row_SSE2, void (i8*, i8*, i8*, i32)* @YUY2ToUV422Row_Any_SSE2
  %74 = select i1 %72, void (i8*, i8*, i32)* @YUY2ToYRow_SSE2, void (i8*, i8*, i32)* @YUY2ToYRow_Any_SSE2
  br label %75

75:                                               ; preds = %70, %66
  %76 = phi void (i8*, i8*, i8*, i32)* [ @YUY2ToUV422Row_C, %66 ], [ %73, %70 ]
  %77 = phi void (i8*, i8*, i32)* [ @YUY2ToYRow_C, %66 ], [ %74, %70 ]
  %78 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %79 = icmp eq i32 %78, 0
  br i1 %79, label %80, label %82

80:                                               ; preds = %75
  %81 = tail call i32 @InitCpuFlags() #6
  br label %82

82:                                               ; preds = %75, %80
  %83 = phi i32 [ %81, %80 ], [ %78, %75 ]
  %84 = and i32 %83, 1024
  %85 = icmp eq i32 %84, 0
  br i1 %85, label %91, label %86

86:                                               ; preds = %82
  %87 = and i32 %60, 31
  %88 = icmp eq i32 %87, 0
  %89 = select i1 %88, void (i8*, i8*, i8*, i32)* @YUY2ToUV422Row_AVX2, void (i8*, i8*, i8*, i32)* @YUY2ToUV422Row_Any_AVX2
  %90 = select i1 %88, void (i8*, i8*, i32)* @YUY2ToYRow_AVX2, void (i8*, i8*, i32)* @YUY2ToYRow_Any_AVX2
  br label %91

91:                                               ; preds = %86, %82
  %92 = phi void (i8*, i8*, i8*, i32)* [ %76, %82 ], [ %89, %86 ]
  %93 = phi void (i8*, i8*, i32)* [ %77, %82 ], [ %90, %86 ]
  %94 = icmp sgt i32 %61, 0
  br i1 %94, label %95, label %112

95:                                               ; preds = %91
  %96 = sext i32 %56 to i64
  %97 = sext i32 %57 to i64
  %98 = sext i32 %58 to i64
  %99 = sext i32 %59 to i64
  br label %100

100:                                              ; preds = %100, %95
  %101 = phi i32 [ 0, %95 ], [ %110, %100 ]
  %102 = phi i8* [ %6, %95 ], [ %109, %100 ]
  %103 = phi i8* [ %4, %95 ], [ %108, %100 ]
  %104 = phi i8* [ %2, %95 ], [ %107, %100 ]
  %105 = phi i8* [ %33, %95 ], [ %106, %100 ]
  tail call void %92(i8* %105, i8* %103, i8* %102, i32 %60) #6
  tail call void %93(i8* %105, i8* %104, i32 %60) #6
  %106 = getelementptr inbounds i8, i8* %105, i64 %96
  %107 = getelementptr inbounds i8, i8* %104, i64 %97
  %108 = getelementptr inbounds i8, i8* %103, i64 %98
  %109 = getelementptr inbounds i8, i8* %102, i64 %99
  %110 = add nuw nsw i32 %101, 1
  %111 = icmp eq i32 %110, %61
  br i1 %111, label %112, label %100

112:                                              ; preds = %100, %91, %10
  %113 = phi i32 [ -1, %10 ], [ 0, %91 ], [ 0, %100 ]
  ret i32 %113
}

declare void @YUY2ToUV422Row_C(i8*, i8*, i8*, i32) local_unnamed_addr #2

declare void @YUY2ToYRow_C(i8*, i8*, i32) local_unnamed_addr #2

declare void @YUY2ToUV422Row_Any_SSE2(i8*, i8*, i8*, i32) local_unnamed_addr #2

declare void @YUY2ToYRow_Any_SSE2(i8*, i8*, i32) local_unnamed_addr #2

declare void @YUY2ToUV422Row_SSE2(i8*, i8*, i8*, i32) local_unnamed_addr #2

declare void @YUY2ToYRow_SSE2(i8*, i8*, i32) local_unnamed_addr #2

declare void @YUY2ToUV422Row_Any_AVX2(i8*, i8*, i8*, i32) local_unnamed_addr #2

declare void @YUY2ToYRow_Any_AVX2(i8*, i8*, i32) local_unnamed_addr #2

declare void @YUY2ToUV422Row_AVX2(i8*, i8*, i8*, i32) local_unnamed_addr #2

declare void @YUY2ToYRow_AVX2(i8*, i8*, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @UYVYToI422(i8*, i32, i8*, i32, i8*, i32, i8*, i32, i32, i32) local_unnamed_addr #0 {
  %11 = icmp ne i8* %0, null
  %12 = icmp ne i8* %2, null
  %13 = and i1 %11, %12
  %14 = icmp ne i8* %4, null
  %15 = and i1 %13, %14
  %16 = icmp ne i8* %6, null
  %17 = and i1 %15, %16
  %18 = xor i1 %17, true
  %19 = icmp slt i32 %8, 1
  %20 = or i1 %19, %18
  %21 = icmp eq i32 %9, 0
  %22 = or i1 %20, %21
  br i1 %22, label %112, label %23

23:                                               ; preds = %10
  %24 = icmp slt i32 %9, 0
  br i1 %24, label %25, label %32

25:                                               ; preds = %23
  %26 = sub nsw i32 0, %9
  %27 = xor i32 %9, -1
  %28 = mul nsw i32 %27, %1
  %29 = sext i32 %28 to i64
  %30 = getelementptr inbounds i8, i8* %0, i64 %29
  %31 = sub nsw i32 0, %1
  br label %32

32:                                               ; preds = %25, %23
  %33 = phi i8* [ %30, %25 ], [ %0, %23 ]
  %34 = phi i32 [ %31, %25 ], [ %1, %23 ]
  %35 = phi i32 [ %26, %25 ], [ %9, %23 ]
  %36 = shl nsw i32 %8, 1
  %37 = icmp eq i32 %34, %36
  %38 = icmp eq i32 %3, %8
  %39 = and i1 %38, %37
  %40 = shl nsw i32 %5, 1
  %41 = icmp eq i32 %40, %8
  %42 = and i1 %41, %39
  %43 = shl nsw i32 %7, 1
  %44 = icmp eq i32 %43, %8
  %45 = and i1 %44, %42
  br i1 %45, label %46, label %55

46:                                               ; preds = %32
  %47 = mul nsw i32 %35, %8
  %48 = icmp slt i32 %47, 32769
  %49 = select i1 %48, i32 0, i32 %34
  %50 = select i1 %48, i32 0, i32 %8
  %51 = select i1 %48, i32 0, i32 %5
  %52 = select i1 %48, i32 0, i32 %7
  %53 = select i1 %48, i32 %47, i32 %8
  %54 = select i1 %48, i32 1, i32 %35
  br label %55

55:                                               ; preds = %46, %32
  %56 = phi i32 [ %34, %32 ], [ %49, %46 ]
  %57 = phi i32 [ %3, %32 ], [ %50, %46 ]
  %58 = phi i32 [ %5, %32 ], [ %51, %46 ]
  %59 = phi i32 [ %7, %32 ], [ %52, %46 ]
  %60 = phi i32 [ %8, %32 ], [ %53, %46 ]
  %61 = phi i32 [ %35, %32 ], [ %54, %46 ]
  %62 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %63 = icmp eq i32 %62, 0
  br i1 %63, label %64, label %66

64:                                               ; preds = %55
  %65 = tail call i32 @InitCpuFlags() #6
  br label %66

66:                                               ; preds = %55, %64
  %67 = phi i32 [ %65, %64 ], [ %62, %55 ]
  %68 = and i32 %67, 32
  %69 = icmp eq i32 %68, 0
  br i1 %69, label %75, label %70

70:                                               ; preds = %66
  %71 = and i32 %60, 15
  %72 = icmp eq i32 %71, 0
  %73 = select i1 %72, void (i8*, i8*, i8*, i32)* @UYVYToUV422Row_SSE2, void (i8*, i8*, i8*, i32)* @UYVYToUV422Row_Any_SSE2
  %74 = select i1 %72, void (i8*, i8*, i32)* @UYVYToYRow_SSE2, void (i8*, i8*, i32)* @UYVYToYRow_Any_SSE2
  br label %75

75:                                               ; preds = %70, %66
  %76 = phi void (i8*, i8*, i8*, i32)* [ @UYVYToUV422Row_C, %66 ], [ %73, %70 ]
  %77 = phi void (i8*, i8*, i32)* [ @UYVYToYRow_C, %66 ], [ %74, %70 ]
  %78 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %79 = icmp eq i32 %78, 0
  br i1 %79, label %80, label %82

80:                                               ; preds = %75
  %81 = tail call i32 @InitCpuFlags() #6
  br label %82

82:                                               ; preds = %75, %80
  %83 = phi i32 [ %81, %80 ], [ %78, %75 ]
  %84 = and i32 %83, 1024
  %85 = icmp eq i32 %84, 0
  br i1 %85, label %91, label %86

86:                                               ; preds = %82
  %87 = and i32 %60, 31
  %88 = icmp eq i32 %87, 0
  %89 = select i1 %88, void (i8*, i8*, i8*, i32)* @UYVYToUV422Row_AVX2, void (i8*, i8*, i8*, i32)* @UYVYToUV422Row_Any_AVX2
  %90 = select i1 %88, void (i8*, i8*, i32)* @UYVYToYRow_AVX2, void (i8*, i8*, i32)* @UYVYToYRow_Any_AVX2
  br label %91

91:                                               ; preds = %86, %82
  %92 = phi void (i8*, i8*, i8*, i32)* [ %76, %82 ], [ %89, %86 ]
  %93 = phi void (i8*, i8*, i32)* [ %77, %82 ], [ %90, %86 ]
  %94 = icmp sgt i32 %61, 0
  br i1 %94, label %95, label %112

95:                                               ; preds = %91
  %96 = sext i32 %56 to i64
  %97 = sext i32 %57 to i64
  %98 = sext i32 %58 to i64
  %99 = sext i32 %59 to i64
  br label %100

100:                                              ; preds = %100, %95
  %101 = phi i32 [ 0, %95 ], [ %110, %100 ]
  %102 = phi i8* [ %6, %95 ], [ %109, %100 ]
  %103 = phi i8* [ %4, %95 ], [ %108, %100 ]
  %104 = phi i8* [ %2, %95 ], [ %107, %100 ]
  %105 = phi i8* [ %33, %95 ], [ %106, %100 ]
  tail call void %92(i8* %105, i8* %103, i8* %102, i32 %60) #6
  tail call void %93(i8* %105, i8* %104, i32 %60) #6
  %106 = getelementptr inbounds i8, i8* %105, i64 %96
  %107 = getelementptr inbounds i8, i8* %104, i64 %97
  %108 = getelementptr inbounds i8, i8* %103, i64 %98
  %109 = getelementptr inbounds i8, i8* %102, i64 %99
  %110 = add nuw nsw i32 %101, 1
  %111 = icmp eq i32 %110, %61
  br i1 %111, label %112, label %100

112:                                              ; preds = %100, %91, %10
  %113 = phi i32 [ -1, %10 ], [ 0, %91 ], [ 0, %100 ]
  ret i32 %113
}

declare void @UYVYToUV422Row_C(i8*, i8*, i8*, i32) local_unnamed_addr #2

declare void @UYVYToYRow_C(i8*, i8*, i32) local_unnamed_addr #2

declare void @UYVYToUV422Row_Any_SSE2(i8*, i8*, i8*, i32) local_unnamed_addr #2

declare void @UYVYToYRow_Any_SSE2(i8*, i8*, i32) local_unnamed_addr #2

declare void @UYVYToUV422Row_SSE2(i8*, i8*, i8*, i32) local_unnamed_addr #2

declare void @UYVYToYRow_SSE2(i8*, i8*, i32) local_unnamed_addr #2

declare void @UYVYToUV422Row_Any_AVX2(i8*, i8*, i8*, i32) local_unnamed_addr #2

declare void @UYVYToYRow_Any_AVX2(i8*, i8*, i32) local_unnamed_addr #2

declare void @UYVYToUV422Row_AVX2(i8*, i8*, i8*, i32) local_unnamed_addr #2

declare void @UYVYToYRow_AVX2(i8*, i8*, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @YUY2ToY(i8*, i32, i8*, i32, i32, i32) local_unnamed_addr #0 {
  %7 = icmp eq i8* %0, null
  %8 = icmp eq i8* %2, null
  %9 = or i1 %7, %8
  %10 = icmp slt i32 %4, 1
  %11 = or i1 %9, %10
  %12 = icmp eq i32 %5, 0
  %13 = or i1 %11, %12
  br i1 %13, label %76, label %14

14:                                               ; preds = %6
  %15 = icmp slt i32 %5, 0
  br i1 %15, label %16, label %23

16:                                               ; preds = %14
  %17 = sub nsw i32 0, %5
  %18 = xor i32 %5, -1
  %19 = mul nsw i32 %18, %1
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds i8, i8* %0, i64 %20
  %22 = sub nsw i32 0, %1
  br label %23

23:                                               ; preds = %16, %14
  %24 = phi i8* [ %21, %16 ], [ %0, %14 ]
  %25 = phi i32 [ %22, %16 ], [ %1, %14 ]
  %26 = phi i32 [ %17, %16 ], [ %5, %14 ]
  %27 = shl nsw i32 %4, 1
  %28 = icmp eq i32 %25, %27
  %29 = icmp eq i32 %3, %4
  %30 = and i1 %29, %28
  %31 = select i1 %30, i32 %26, i32 1
  %32 = mul nsw i32 %31, %4
  %33 = select i1 %30, i32 1, i32 %26
  %34 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %36, label %38

36:                                               ; preds = %23
  %37 = tail call i32 @InitCpuFlags() #6
  br label %38

38:                                               ; preds = %23, %36
  %39 = phi i32 [ %37, %36 ], [ %34, %23 ]
  %40 = and i32 %39, 32
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %46, label %42

42:                                               ; preds = %38
  %43 = and i32 %32, 15
  %44 = icmp eq i32 %43, 0
  %45 = select i1 %44, void (i8*, i8*, i32)* @YUY2ToYRow_SSE2, void (i8*, i8*, i32)* @YUY2ToYRow_Any_SSE2
  br label %46

46:                                               ; preds = %38, %42
  %47 = phi void (i8*, i8*, i32)* [ %45, %42 ], [ @YUY2ToYRow_C, %38 ]
  %48 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %50, label %52

50:                                               ; preds = %46
  %51 = tail call i32 @InitCpuFlags() #6
  br label %52

52:                                               ; preds = %46, %50
  %53 = phi i32 [ %51, %50 ], [ %48, %46 ]
  %54 = and i32 %53, 1024
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %60, label %56

56:                                               ; preds = %52
  %57 = and i32 %32, 31
  %58 = icmp eq i32 %57, 0
  %59 = select i1 %58, void (i8*, i8*, i32)* @YUY2ToYRow_AVX2, void (i8*, i8*, i32)* @YUY2ToYRow_Any_AVX2
  br label %60

60:                                               ; preds = %52, %56
  %61 = phi void (i8*, i8*, i32)* [ %59, %56 ], [ %47, %52 ]
  %62 = icmp sgt i32 %33, 0
  br i1 %62, label %63, label %76

63:                                               ; preds = %60
  %64 = sext i32 %25 to i64
  %65 = select i1 %30, i64 0, i64 %64
  %66 = sext i32 %3 to i64
  %67 = select i1 %30, i64 0, i64 %66
  br label %68

68:                                               ; preds = %68, %63
  %69 = phi i32 [ 0, %63 ], [ %74, %68 ]
  %70 = phi i8* [ %2, %63 ], [ %73, %68 ]
  %71 = phi i8* [ %24, %63 ], [ %72, %68 ]
  tail call void %61(i8* %71, i8* %70, i32 %32) #6
  %72 = getelementptr inbounds i8, i8* %71, i64 %65
  %73 = getelementptr inbounds i8, i8* %70, i64 %67
  %74 = add nuw nsw i32 %69, 1
  %75 = icmp eq i32 %74, %33
  br i1 %75, label %76, label %68

76:                                               ; preds = %68, %60, %6
  %77 = phi i32 [ -1, %6 ], [ 0, %60 ], [ 0, %68 ]
  ret i32 %77
}

; Function Attrs: nounwind ssp uwtable
define hidden void @MirrorPlane(i8*, i32, i8*, i32, i32, i32) local_unnamed_addr #0 {
  %7 = icmp slt i32 %5, 0
  br i1 %7, label %8, label %15

8:                                                ; preds = %6
  %9 = sub nsw i32 0, %5
  %10 = xor i32 %5, -1
  %11 = mul nsw i32 %10, %1
  %12 = sext i32 %11 to i64
  %13 = getelementptr inbounds i8, i8* %0, i64 %12
  %14 = sub nsw i32 0, %1
  br label %15

15:                                               ; preds = %8, %6
  %16 = phi i32 [ %14, %8 ], [ %1, %6 ]
  %17 = phi i8* [ %13, %8 ], [ %0, %6 ]
  %18 = phi i32 [ %9, %8 ], [ %5, %6 ]
  %19 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %21, label %23

21:                                               ; preds = %15
  %22 = tail call i32 @InitCpuFlags() #6
  br label %23

23:                                               ; preds = %15, %21
  %24 = phi i32 [ %22, %21 ], [ %19, %15 ]
  %25 = and i32 %24, 64
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %31, label %27

27:                                               ; preds = %23
  %28 = and i32 %4, 15
  %29 = icmp eq i32 %28, 0
  %30 = select i1 %29, void (i8*, i8*, i32)* @MirrorRow_SSSE3, void (i8*, i8*, i32)* @MirrorRow_Any_SSSE3
  br label %31

31:                                               ; preds = %23, %27
  %32 = phi void (i8*, i8*, i32)* [ %30, %27 ], [ @MirrorRow_C, %23 ]
  %33 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %35, label %37

35:                                               ; preds = %31
  %36 = tail call i32 @InitCpuFlags() #6
  br label %37

37:                                               ; preds = %31, %35
  %38 = phi i32 [ %36, %35 ], [ %33, %31 ]
  %39 = and i32 %38, 1024
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %45, label %41

41:                                               ; preds = %37
  %42 = and i32 %4, 31
  %43 = icmp eq i32 %42, 0
  %44 = select i1 %43, void (i8*, i8*, i32)* @MirrorRow_AVX2, void (i8*, i8*, i32)* @MirrorRow_Any_AVX2
  br label %45

45:                                               ; preds = %37, %41
  %46 = phi void (i8*, i8*, i32)* [ %44, %41 ], [ %32, %37 ]
  %47 = icmp sgt i32 %18, 0
  br i1 %47, label %48, label %59

48:                                               ; preds = %45
  %49 = sext i32 %16 to i64
  %50 = sext i32 %3 to i64
  br label %51

51:                                               ; preds = %51, %48
  %52 = phi i32 [ 0, %48 ], [ %57, %51 ]
  %53 = phi i8* [ %17, %48 ], [ %55, %51 ]
  %54 = phi i8* [ %2, %48 ], [ %56, %51 ]
  tail call void %46(i8* %53, i8* %54, i32 %4) #6
  %55 = getelementptr inbounds i8, i8* %53, i64 %49
  %56 = getelementptr inbounds i8, i8* %54, i64 %50
  %57 = add nuw nsw i32 %52, 1
  %58 = icmp eq i32 %57, %18
  br i1 %58, label %59, label %51

59:                                               ; preds = %51, %45
  ret void
}

declare void @MirrorRow_C(i8*, i8*, i32) local_unnamed_addr #2

declare void @MirrorRow_Any_SSSE3(i8*, i8*, i32) local_unnamed_addr #2

declare void @MirrorRow_SSSE3(i8*, i8*, i32) local_unnamed_addr #2

declare void @MirrorRow_Any_AVX2(i8*, i8*, i32) local_unnamed_addr #2

declare void @MirrorRow_AVX2(i8*, i8*, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @MirrorUVPlane(i8*, i32, i8*, i32, i32, i32) local_unnamed_addr #0 {
  %7 = icmp slt i32 %5, 0
  br i1 %7, label %8, label %15

8:                                                ; preds = %6
  %9 = sub nsw i32 0, %5
  %10 = xor i32 %5, -1
  %11 = mul nsw i32 %10, %1
  %12 = sext i32 %11 to i64
  %13 = getelementptr inbounds i8, i8* %0, i64 %12
  %14 = sub nsw i32 0, %1
  br label %15

15:                                               ; preds = %8, %6
  %16 = phi i32 [ %14, %8 ], [ %1, %6 ]
  %17 = phi i8* [ %13, %8 ], [ %0, %6 ]
  %18 = phi i32 [ %9, %8 ], [ %5, %6 ]
  %19 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %21, label %23

21:                                               ; preds = %15
  %22 = tail call i32 @InitCpuFlags() #6
  br label %23

23:                                               ; preds = %15, %21
  %24 = phi i32 [ %22, %21 ], [ %19, %15 ]
  %25 = and i32 %24, 64
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %31, label %27

27:                                               ; preds = %23
  %28 = and i32 %4, 7
  %29 = icmp eq i32 %28, 0
  %30 = select i1 %29, void (i8*, i8*, i32)* @MirrorUVRow_SSSE3, void (i8*, i8*, i32)* @MirrorUVRow_Any_SSSE3
  br label %31

31:                                               ; preds = %23, %27
  %32 = phi void (i8*, i8*, i32)* [ %30, %27 ], [ @MirrorUVRow_C, %23 ]
  %33 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %35, label %37

35:                                               ; preds = %31
  %36 = tail call i32 @InitCpuFlags() #6
  br label %37

37:                                               ; preds = %31, %35
  %38 = phi i32 [ %36, %35 ], [ %33, %31 ]
  %39 = and i32 %38, 1024
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %45, label %41

41:                                               ; preds = %37
  %42 = and i32 %4, 15
  %43 = icmp eq i32 %42, 0
  %44 = select i1 %43, void (i8*, i8*, i32)* @MirrorUVRow_AVX2, void (i8*, i8*, i32)* @MirrorUVRow_Any_AVX2
  br label %45

45:                                               ; preds = %37, %41
  %46 = phi void (i8*, i8*, i32)* [ %44, %41 ], [ %32, %37 ]
  %47 = icmp sgt i32 %18, 0
  br i1 %47, label %48, label %59

48:                                               ; preds = %45
  %49 = sext i32 %16 to i64
  %50 = sext i32 %3 to i64
  br label %51

51:                                               ; preds = %51, %48
  %52 = phi i32 [ 0, %48 ], [ %57, %51 ]
  %53 = phi i8* [ %17, %48 ], [ %55, %51 ]
  %54 = phi i8* [ %2, %48 ], [ %56, %51 ]
  tail call void %46(i8* %53, i8* %54, i32 %4) #6
  %55 = getelementptr inbounds i8, i8* %53, i64 %49
  %56 = getelementptr inbounds i8, i8* %54, i64 %50
  %57 = add nuw nsw i32 %52, 1
  %58 = icmp eq i32 %57, %18
  br i1 %58, label %59, label %51

59:                                               ; preds = %51, %45
  ret void
}

declare void @MirrorUVRow_C(i8*, i8*, i32) local_unnamed_addr #2

declare void @MirrorUVRow_Any_SSSE3(i8*, i8*, i32) local_unnamed_addr #2

declare void @MirrorUVRow_SSSE3(i8*, i8*, i32) local_unnamed_addr #2

declare void @MirrorUVRow_Any_AVX2(i8*, i8*, i32) local_unnamed_addr #2

declare void @MirrorUVRow_AVX2(i8*, i8*, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @I400Mirror(i8*, i32, i8*, i32, i32, i32) local_unnamed_addr #0 {
  %7 = icmp eq i8* %0, null
  %8 = icmp eq i8* %2, null
  %9 = or i1 %7, %8
  %10 = icmp slt i32 %4, 1
  %11 = or i1 %9, %10
  %12 = icmp eq i32 %5, 0
  %13 = or i1 %11, %12
  br i1 %13, label %67, label %14

14:                                               ; preds = %6
  %15 = icmp slt i32 %5, 0
  br i1 %15, label %16, label %23

16:                                               ; preds = %14
  %17 = sub nsw i32 0, %5
  %18 = xor i32 %5, -1
  %19 = mul nsw i32 %18, %1
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds i8, i8* %0, i64 %20
  %22 = sub nsw i32 0, %1
  br label %23

23:                                               ; preds = %16, %14
  %24 = phi i32 [ %22, %16 ], [ %1, %14 ]
  %25 = phi i8* [ %21, %16 ], [ %0, %14 ]
  %26 = phi i32 [ %17, %16 ], [ %5, %14 ]
  %27 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %29, label %31

29:                                               ; preds = %23
  %30 = tail call i32 @InitCpuFlags() #6
  br label %31

31:                                               ; preds = %29, %23
  %32 = phi i32 [ %30, %29 ], [ %27, %23 ]
  %33 = and i32 %32, 64
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %39, label %35

35:                                               ; preds = %31
  %36 = and i32 %4, 15
  %37 = icmp eq i32 %36, 0
  %38 = select i1 %37, void (i8*, i8*, i32)* @MirrorRow_SSSE3, void (i8*, i8*, i32)* @MirrorRow_Any_SSSE3
  br label %39

39:                                               ; preds = %35, %31
  %40 = phi void (i8*, i8*, i32)* [ %38, %35 ], [ @MirrorRow_C, %31 ]
  %41 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %43, label %45

43:                                               ; preds = %39
  %44 = tail call i32 @InitCpuFlags() #6
  br label %45

45:                                               ; preds = %43, %39
  %46 = phi i32 [ %44, %43 ], [ %41, %39 ]
  %47 = and i32 %46, 1024
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %53, label %49

49:                                               ; preds = %45
  %50 = and i32 %4, 31
  %51 = icmp eq i32 %50, 0
  %52 = select i1 %51, void (i8*, i8*, i32)* @MirrorRow_AVX2, void (i8*, i8*, i32)* @MirrorRow_Any_AVX2
  br label %53

53:                                               ; preds = %49, %45
  %54 = phi void (i8*, i8*, i32)* [ %52, %49 ], [ %40, %45 ]
  %55 = icmp sgt i32 %26, 0
  br i1 %55, label %56, label %67

56:                                               ; preds = %53
  %57 = sext i32 %24 to i64
  %58 = sext i32 %3 to i64
  br label %59

59:                                               ; preds = %59, %56
  %60 = phi i32 [ 0, %56 ], [ %65, %59 ]
  %61 = phi i8* [ %25, %56 ], [ %63, %59 ]
  %62 = phi i8* [ %2, %56 ], [ %64, %59 ]
  tail call void %54(i8* %61, i8* %62, i32 %4) #6
  %63 = getelementptr inbounds i8, i8* %61, i64 %57
  %64 = getelementptr inbounds i8, i8* %62, i64 %58
  %65 = add nuw nsw i32 %60, 1
  %66 = icmp eq i32 %65, %26
  br i1 %66, label %67, label %59

67:                                               ; preds = %59, %53, %6
  %68 = phi i32 [ -1, %6 ], [ 0, %53 ], [ 0, %59 ]
  ret i32 %68
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @I420Mirror(i8*, i32, i8*, i32, i8*, i32, i8*, i32, i8*, i32, i8*, i32, i32, i32) local_unnamed_addr #0 {
  %15 = add nsw i32 %12, 1
  %16 = ashr i32 %15, 1
  %17 = icmp ne i8* %0, null
  %18 = icmp ne i8* %2, null
  %19 = and i1 %17, %18
  %20 = icmp ne i8* %4, null
  %21 = and i1 %19, %20
  %22 = icmp ne i8* %8, null
  %23 = and i1 %21, %22
  %24 = icmp ne i8* %10, null
  %25 = and i1 %23, %24
  %26 = xor i1 %25, true
  %27 = icmp slt i32 %12, 1
  %28 = or i1 %27, %26
  %29 = icmp eq i32 %13, 0
  %30 = or i1 %28, %29
  br i1 %30, label %219, label %31

31:                                               ; preds = %14
  %32 = add nsw i32 %13, 1
  %33 = ashr i32 %32, 1
  %34 = icmp slt i32 %13, 0
  br i1 %34, label %35, label %53

35:                                               ; preds = %31
  %36 = sub nsw i32 0, %13
  %37 = sub i32 1, %13
  %38 = ashr i32 %37, 1
  %39 = xor i32 %13, -1
  %40 = mul nsw i32 %39, %1
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds i8, i8* %0, i64 %41
  %43 = add nsw i32 %38, -1
  %44 = mul nsw i32 %43, %3
  %45 = sext i32 %44 to i64
  %46 = getelementptr inbounds i8, i8* %2, i64 %45
  %47 = mul nsw i32 %43, %5
  %48 = sext i32 %47 to i64
  %49 = getelementptr inbounds i8, i8* %4, i64 %48
  %50 = sub nsw i32 0, %1
  %51 = sub nsw i32 0, %3
  %52 = sub nsw i32 0, %5
  br label %53

53:                                               ; preds = %35, %31
  %54 = phi i32 [ %52, %35 ], [ %5, %31 ]
  %55 = phi i8* [ %49, %35 ], [ %4, %31 ]
  %56 = phi i32 [ %51, %35 ], [ %3, %31 ]
  %57 = phi i8* [ %46, %35 ], [ %2, %31 ]
  %58 = phi i32 [ %50, %35 ], [ %1, %31 ]
  %59 = phi i8* [ %42, %35 ], [ %0, %31 ]
  %60 = phi i32 [ %36, %35 ], [ %13, %31 ]
  %61 = phi i32 [ %38, %35 ], [ %33, %31 ]
  %62 = icmp eq i8* %6, null
  br i1 %62, label %114, label %63

63:                                               ; preds = %53
  %64 = icmp slt i32 %60, 0
  br i1 %64, label %65, label %71

65:                                               ; preds = %63
  %66 = xor i32 %60, -1
  %67 = mul nsw i32 %58, %66
  %68 = sext i32 %67 to i64
  %69 = getelementptr inbounds i8, i8* %59, i64 %68
  %70 = sub nsw i32 0, %58
  br label %71

71:                                               ; preds = %65, %63
  %72 = phi i32 [ %70, %65 ], [ %58, %63 ]
  %73 = phi i8* [ %69, %65 ], [ %59, %63 ]
  %74 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %75 = icmp eq i32 %74, 0
  br i1 %75, label %76, label %78

76:                                               ; preds = %71
  %77 = tail call i32 @InitCpuFlags() #6
  br label %78

78:                                               ; preds = %76, %71
  %79 = phi i32 [ %77, %76 ], [ %74, %71 ]
  %80 = and i32 %79, 64
  %81 = icmp eq i32 %80, 0
  br i1 %81, label %86, label %82

82:                                               ; preds = %78
  %83 = and i32 %12, 15
  %84 = icmp eq i32 %83, 0
  %85 = select i1 %84, void (i8*, i8*, i32)* @MirrorRow_SSSE3, void (i8*, i8*, i32)* @MirrorRow_Any_SSSE3
  br label %86

86:                                               ; preds = %82, %78
  %87 = phi void (i8*, i8*, i32)* [ %85, %82 ], [ @MirrorRow_C, %78 ]
  %88 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %89 = icmp eq i32 %88, 0
  br i1 %89, label %90, label %92

90:                                               ; preds = %86
  %91 = tail call i32 @InitCpuFlags() #6
  br label %92

92:                                               ; preds = %90, %86
  %93 = phi i32 [ %91, %90 ], [ %88, %86 ]
  %94 = and i32 %93, 1024
  %95 = icmp eq i32 %94, 0
  br i1 %95, label %100, label %96

96:                                               ; preds = %92
  %97 = and i32 %12, 31
  %98 = icmp eq i32 %97, 0
  %99 = select i1 %98, void (i8*, i8*, i32)* @MirrorRow_AVX2, void (i8*, i8*, i32)* @MirrorRow_Any_AVX2
  br label %100

100:                                              ; preds = %96, %92
  %101 = phi void (i8*, i8*, i32)* [ %99, %96 ], [ %87, %92 ]
  %102 = icmp sgt i32 %60, 0
  br i1 %102, label %103, label %114

103:                                              ; preds = %100
  %104 = sext i32 %72 to i64
  %105 = sext i32 %7 to i64
  br label %106

106:                                              ; preds = %106, %103
  %107 = phi i32 [ 0, %103 ], [ %112, %106 ]
  %108 = phi i8* [ %73, %103 ], [ %110, %106 ]
  %109 = phi i8* [ %6, %103 ], [ %111, %106 ]
  tail call void %101(i8* %108, i8* %109, i32 %12) #6
  %110 = getelementptr inbounds i8, i8* %108, i64 %104
  %111 = getelementptr inbounds i8, i8* %109, i64 %105
  %112 = add nuw nsw i32 %107, 1
  %113 = icmp eq i32 %112, %60
  br i1 %113, label %114, label %106

114:                                              ; preds = %106, %100, %53
  %115 = icmp slt i32 %61, 0
  br i1 %115, label %116, label %123

116:                                              ; preds = %114
  %117 = sub nsw i32 0, %61
  %118 = xor i32 %61, -1
  %119 = mul nsw i32 %56, %118
  %120 = sext i32 %119 to i64
  %121 = getelementptr inbounds i8, i8* %57, i64 %120
  %122 = sub nsw i32 0, %56
  br label %123

123:                                              ; preds = %116, %114
  %124 = phi i32 [ %122, %116 ], [ %56, %114 ]
  %125 = phi i8* [ %121, %116 ], [ %57, %114 ]
  %126 = phi i32 [ %117, %116 ], [ %61, %114 ]
  %127 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %128 = icmp eq i32 %127, 0
  br i1 %128, label %129, label %131

129:                                              ; preds = %123
  %130 = tail call i32 @InitCpuFlags() #6
  br label %131

131:                                              ; preds = %129, %123
  %132 = phi i32 [ %130, %129 ], [ %127, %123 ]
  %133 = and i32 %132, 64
  %134 = icmp eq i32 %133, 0
  br i1 %134, label %139, label %135

135:                                              ; preds = %131
  %136 = and i32 %15, 30
  %137 = icmp eq i32 %136, 0
  %138 = select i1 %137, void (i8*, i8*, i32)* @MirrorRow_SSSE3, void (i8*, i8*, i32)* @MirrorRow_Any_SSSE3
  br label %139

139:                                              ; preds = %135, %131
  %140 = phi void (i8*, i8*, i32)* [ %138, %135 ], [ @MirrorRow_C, %131 ]
  %141 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %142 = icmp eq i32 %141, 0
  br i1 %142, label %143, label %145

143:                                              ; preds = %139
  %144 = tail call i32 @InitCpuFlags() #6
  br label %145

145:                                              ; preds = %143, %139
  %146 = phi i32 [ %144, %143 ], [ %141, %139 ]
  %147 = and i32 %146, 1024
  %148 = icmp eq i32 %147, 0
  br i1 %148, label %153, label %149

149:                                              ; preds = %145
  %150 = and i32 %15, 62
  %151 = icmp eq i32 %150, 0
  %152 = select i1 %151, void (i8*, i8*, i32)* @MirrorRow_AVX2, void (i8*, i8*, i32)* @MirrorRow_Any_AVX2
  br label %153

153:                                              ; preds = %149, %145
  %154 = phi void (i8*, i8*, i32)* [ %152, %149 ], [ %140, %145 ]
  %155 = icmp sgt i32 %126, 0
  br i1 %155, label %156, label %167

156:                                              ; preds = %153
  %157 = sext i32 %124 to i64
  %158 = sext i32 %9 to i64
  br label %159

159:                                              ; preds = %159, %156
  %160 = phi i32 [ 0, %156 ], [ %165, %159 ]
  %161 = phi i8* [ %125, %156 ], [ %163, %159 ]
  %162 = phi i8* [ %8, %156 ], [ %164, %159 ]
  tail call void %154(i8* %161, i8* %162, i32 %16) #6
  %163 = getelementptr inbounds i8, i8* %161, i64 %157
  %164 = getelementptr inbounds i8, i8* %162, i64 %158
  %165 = add nuw nsw i32 %160, 1
  %166 = icmp eq i32 %165, %126
  br i1 %166, label %167, label %159

167:                                              ; preds = %159, %153
  br i1 %115, label %168, label %175

168:                                              ; preds = %167
  %169 = sub nsw i32 0, %61
  %170 = xor i32 %61, -1
  %171 = mul nsw i32 %54, %170
  %172 = sext i32 %171 to i64
  %173 = getelementptr inbounds i8, i8* %55, i64 %172
  %174 = sub nsw i32 0, %54
  br label %175

175:                                              ; preds = %168, %167
  %176 = phi i32 [ %174, %168 ], [ %54, %167 ]
  %177 = phi i8* [ %173, %168 ], [ %55, %167 ]
  %178 = phi i32 [ %169, %168 ], [ %61, %167 ]
  %179 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %180 = icmp eq i32 %179, 0
  br i1 %180, label %181, label %183

181:                                              ; preds = %175
  %182 = tail call i32 @InitCpuFlags() #6
  br label %183

183:                                              ; preds = %181, %175
  %184 = phi i32 [ %182, %181 ], [ %179, %175 ]
  %185 = and i32 %184, 64
  %186 = icmp eq i32 %185, 0
  br i1 %186, label %191, label %187

187:                                              ; preds = %183
  %188 = and i32 %15, 30
  %189 = icmp eq i32 %188, 0
  %190 = select i1 %189, void (i8*, i8*, i32)* @MirrorRow_SSSE3, void (i8*, i8*, i32)* @MirrorRow_Any_SSSE3
  br label %191

191:                                              ; preds = %187, %183
  %192 = phi void (i8*, i8*, i32)* [ %190, %187 ], [ @MirrorRow_C, %183 ]
  %193 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %194 = icmp eq i32 %193, 0
  br i1 %194, label %195, label %197

195:                                              ; preds = %191
  %196 = tail call i32 @InitCpuFlags() #6
  br label %197

197:                                              ; preds = %195, %191
  %198 = phi i32 [ %196, %195 ], [ %193, %191 ]
  %199 = and i32 %198, 1024
  %200 = icmp eq i32 %199, 0
  br i1 %200, label %205, label %201

201:                                              ; preds = %197
  %202 = and i32 %15, 62
  %203 = icmp eq i32 %202, 0
  %204 = select i1 %203, void (i8*, i8*, i32)* @MirrorRow_AVX2, void (i8*, i8*, i32)* @MirrorRow_Any_AVX2
  br label %205

205:                                              ; preds = %201, %197
  %206 = phi void (i8*, i8*, i32)* [ %204, %201 ], [ %192, %197 ]
  %207 = icmp sgt i32 %178, 0
  br i1 %207, label %208, label %219

208:                                              ; preds = %205
  %209 = sext i32 %176 to i64
  %210 = sext i32 %11 to i64
  br label %211

211:                                              ; preds = %211, %208
  %212 = phi i32 [ 0, %208 ], [ %217, %211 ]
  %213 = phi i8* [ %177, %208 ], [ %215, %211 ]
  %214 = phi i8* [ %10, %208 ], [ %216, %211 ]
  tail call void %206(i8* %213, i8* %214, i32 %16) #6
  %215 = getelementptr inbounds i8, i8* %213, i64 %209
  %216 = getelementptr inbounds i8, i8* %214, i64 %210
  %217 = add nuw nsw i32 %212, 1
  %218 = icmp eq i32 %217, %178
  br i1 %218, label %219, label %211

219:                                              ; preds = %211, %205, %14
  %220 = phi i32 [ -1, %14 ], [ 0, %205 ], [ 0, %211 ]
  ret i32 %220
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @NV12Mirror(i8*, i32, i8*, i32, i8*, i32, i8*, i32, i32, i32) local_unnamed_addr #0 {
  %11 = add nsw i32 %8, 1
  %12 = ashr i32 %11, 1
  %13 = icmp ne i8* %0, null
  %14 = icmp ne i8* %2, null
  %15 = and i1 %13, %14
  %16 = icmp ne i8* %6, null
  %17 = and i1 %15, %16
  %18 = xor i1 %17, true
  %19 = icmp slt i32 %8, 1
  %20 = or i1 %19, %18
  %21 = icmp eq i32 %9, 0
  %22 = or i1 %20, %21
  br i1 %22, label %153, label %23

23:                                               ; preds = %10
  %24 = add nsw i32 %9, 1
  %25 = ashr i32 %24, 1
  %26 = icmp slt i32 %9, 0
  br i1 %26, label %27, label %41

27:                                               ; preds = %23
  %28 = sub nsw i32 0, %9
  %29 = sub i32 1, %9
  %30 = ashr i32 %29, 1
  %31 = xor i32 %9, -1
  %32 = mul nsw i32 %31, %1
  %33 = sext i32 %32 to i64
  %34 = getelementptr inbounds i8, i8* %0, i64 %33
  %35 = add nsw i32 %30, -1
  %36 = mul nsw i32 %35, %3
  %37 = sext i32 %36 to i64
  %38 = getelementptr inbounds i8, i8* %2, i64 %37
  %39 = sub nsw i32 0, %1
  %40 = sub nsw i32 0, %3
  br label %41

41:                                               ; preds = %27, %23
  %42 = phi i32 [ %40, %27 ], [ %3, %23 ]
  %43 = phi i8* [ %38, %27 ], [ %2, %23 ]
  %44 = phi i32 [ %39, %27 ], [ %1, %23 ]
  %45 = phi i8* [ %34, %27 ], [ %0, %23 ]
  %46 = phi i32 [ %28, %27 ], [ %9, %23 ]
  %47 = phi i32 [ %30, %27 ], [ %25, %23 ]
  %48 = icmp eq i8* %4, null
  br i1 %48, label %100, label %49

49:                                               ; preds = %41
  %50 = icmp slt i32 %46, 0
  br i1 %50, label %51, label %57

51:                                               ; preds = %49
  %52 = xor i32 %46, -1
  %53 = mul nsw i32 %44, %52
  %54 = sext i32 %53 to i64
  %55 = getelementptr inbounds i8, i8* %45, i64 %54
  %56 = sub nsw i32 0, %44
  br label %57

57:                                               ; preds = %51, %49
  %58 = phi i32 [ %56, %51 ], [ %44, %49 ]
  %59 = phi i8* [ %55, %51 ], [ %45, %49 ]
  %60 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %62, label %64

62:                                               ; preds = %57
  %63 = tail call i32 @InitCpuFlags() #6
  br label %64

64:                                               ; preds = %62, %57
  %65 = phi i32 [ %63, %62 ], [ %60, %57 ]
  %66 = and i32 %65, 64
  %67 = icmp eq i32 %66, 0
  br i1 %67, label %72, label %68

68:                                               ; preds = %64
  %69 = and i32 %8, 15
  %70 = icmp eq i32 %69, 0
  %71 = select i1 %70, void (i8*, i8*, i32)* @MirrorRow_SSSE3, void (i8*, i8*, i32)* @MirrorRow_Any_SSSE3
  br label %72

72:                                               ; preds = %68, %64
  %73 = phi void (i8*, i8*, i32)* [ %71, %68 ], [ @MirrorRow_C, %64 ]
  %74 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %75 = icmp eq i32 %74, 0
  br i1 %75, label %76, label %78

76:                                               ; preds = %72
  %77 = tail call i32 @InitCpuFlags() #6
  br label %78

78:                                               ; preds = %76, %72
  %79 = phi i32 [ %77, %76 ], [ %74, %72 ]
  %80 = and i32 %79, 1024
  %81 = icmp eq i32 %80, 0
  br i1 %81, label %86, label %82

82:                                               ; preds = %78
  %83 = and i32 %8, 31
  %84 = icmp eq i32 %83, 0
  %85 = select i1 %84, void (i8*, i8*, i32)* @MirrorRow_AVX2, void (i8*, i8*, i32)* @MirrorRow_Any_AVX2
  br label %86

86:                                               ; preds = %82, %78
  %87 = phi void (i8*, i8*, i32)* [ %85, %82 ], [ %73, %78 ]
  %88 = icmp sgt i32 %46, 0
  br i1 %88, label %89, label %100

89:                                               ; preds = %86
  %90 = sext i32 %58 to i64
  %91 = sext i32 %5 to i64
  br label %92

92:                                               ; preds = %92, %89
  %93 = phi i32 [ 0, %89 ], [ %98, %92 ]
  %94 = phi i8* [ %59, %89 ], [ %96, %92 ]
  %95 = phi i8* [ %4, %89 ], [ %97, %92 ]
  tail call void %87(i8* %94, i8* %95, i32 %8) #6
  %96 = getelementptr inbounds i8, i8* %94, i64 %90
  %97 = getelementptr inbounds i8, i8* %95, i64 %91
  %98 = add nuw nsw i32 %93, 1
  %99 = icmp eq i32 %98, %46
  br i1 %99, label %100, label %92

100:                                              ; preds = %92, %86, %41
  %101 = icmp slt i32 %47, 0
  br i1 %101, label %102, label %109

102:                                              ; preds = %100
  %103 = sub nsw i32 0, %47
  %104 = xor i32 %47, -1
  %105 = mul nsw i32 %42, %104
  %106 = sext i32 %105 to i64
  %107 = getelementptr inbounds i8, i8* %43, i64 %106
  %108 = sub nsw i32 0, %42
  br label %109

109:                                              ; preds = %102, %100
  %110 = phi i32 [ %108, %102 ], [ %42, %100 ]
  %111 = phi i8* [ %107, %102 ], [ %43, %100 ]
  %112 = phi i32 [ %103, %102 ], [ %47, %100 ]
  %113 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %114 = icmp eq i32 %113, 0
  br i1 %114, label %115, label %117

115:                                              ; preds = %109
  %116 = tail call i32 @InitCpuFlags() #6
  br label %117

117:                                              ; preds = %115, %109
  %118 = phi i32 [ %116, %115 ], [ %113, %109 ]
  %119 = and i32 %118, 64
  %120 = icmp eq i32 %119, 0
  br i1 %120, label %125, label %121

121:                                              ; preds = %117
  %122 = and i32 %11, 14
  %123 = icmp eq i32 %122, 0
  %124 = select i1 %123, void (i8*, i8*, i32)* @MirrorUVRow_SSSE3, void (i8*, i8*, i32)* @MirrorUVRow_Any_SSSE3
  br label %125

125:                                              ; preds = %121, %117
  %126 = phi void (i8*, i8*, i32)* [ %124, %121 ], [ @MirrorUVRow_C, %117 ]
  %127 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %128 = icmp eq i32 %127, 0
  br i1 %128, label %129, label %131

129:                                              ; preds = %125
  %130 = tail call i32 @InitCpuFlags() #6
  br label %131

131:                                              ; preds = %129, %125
  %132 = phi i32 [ %130, %129 ], [ %127, %125 ]
  %133 = and i32 %132, 1024
  %134 = icmp eq i32 %133, 0
  br i1 %134, label %139, label %135

135:                                              ; preds = %131
  %136 = and i32 %11, 30
  %137 = icmp eq i32 %136, 0
  %138 = select i1 %137, void (i8*, i8*, i32)* @MirrorUVRow_AVX2, void (i8*, i8*, i32)* @MirrorUVRow_Any_AVX2
  br label %139

139:                                              ; preds = %135, %131
  %140 = phi void (i8*, i8*, i32)* [ %138, %135 ], [ %126, %131 ]
  %141 = icmp sgt i32 %112, 0
  br i1 %141, label %142, label %153

142:                                              ; preds = %139
  %143 = sext i32 %110 to i64
  %144 = sext i32 %7 to i64
  br label %145

145:                                              ; preds = %145, %142
  %146 = phi i32 [ 0, %142 ], [ %151, %145 ]
  %147 = phi i8* [ %111, %142 ], [ %149, %145 ]
  %148 = phi i8* [ %6, %142 ], [ %150, %145 ]
  tail call void %140(i8* %147, i8* %148, i32 %12) #6
  %149 = getelementptr inbounds i8, i8* %147, i64 %143
  %150 = getelementptr inbounds i8, i8* %148, i64 %144
  %151 = add nuw nsw i32 %146, 1
  %152 = icmp eq i32 %151, %112
  br i1 %152, label %153, label %145

153:                                              ; preds = %145, %139, %10
  %154 = phi i32 [ -1, %10 ], [ 0, %139 ], [ 0, %145 ]
  ret i32 %154
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @ARGBMirror(i8*, i32, i8*, i32, i32, i32) local_unnamed_addr #0 {
  %7 = icmp eq i8* %0, null
  %8 = icmp eq i8* %2, null
  %9 = or i1 %7, %8
  %10 = icmp slt i32 %4, 1
  %11 = or i1 %9, %10
  %12 = icmp eq i32 %5, 0
  %13 = or i1 %11, %12
  br i1 %13, label %67, label %14

14:                                               ; preds = %6
  %15 = icmp slt i32 %5, 0
  br i1 %15, label %16, label %23

16:                                               ; preds = %14
  %17 = sub nsw i32 0, %5
  %18 = xor i32 %5, -1
  %19 = mul nsw i32 %18, %1
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds i8, i8* %0, i64 %20
  %22 = sub nsw i32 0, %1
  br label %23

23:                                               ; preds = %16, %14
  %24 = phi i32 [ %22, %16 ], [ %1, %14 ]
  %25 = phi i8* [ %21, %16 ], [ %0, %14 ]
  %26 = phi i32 [ %17, %16 ], [ %5, %14 ]
  %27 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %29, label %31

29:                                               ; preds = %23
  %30 = tail call i32 @InitCpuFlags() #6
  br label %31

31:                                               ; preds = %23, %29
  %32 = phi i32 [ %30, %29 ], [ %27, %23 ]
  %33 = and i32 %32, 32
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %39, label %35

35:                                               ; preds = %31
  %36 = and i32 %4, 3
  %37 = icmp eq i32 %36, 0
  %38 = select i1 %37, void (i8*, i8*, i32)* @ARGBMirrorRow_SSE2, void (i8*, i8*, i32)* @ARGBMirrorRow_Any_SSE2
  br label %39

39:                                               ; preds = %31, %35
  %40 = phi void (i8*, i8*, i32)* [ %38, %35 ], [ @ARGBMirrorRow_C, %31 ]
  %41 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %43, label %45

43:                                               ; preds = %39
  %44 = tail call i32 @InitCpuFlags() #6
  br label %45

45:                                               ; preds = %39, %43
  %46 = phi i32 [ %44, %43 ], [ %41, %39 ]
  %47 = and i32 %46, 1024
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %53, label %49

49:                                               ; preds = %45
  %50 = and i32 %4, 7
  %51 = icmp eq i32 %50, 0
  %52 = select i1 %51, void (i8*, i8*, i32)* @ARGBMirrorRow_AVX2, void (i8*, i8*, i32)* @ARGBMirrorRow_Any_AVX2
  br label %53

53:                                               ; preds = %45, %49
  %54 = phi void (i8*, i8*, i32)* [ %52, %49 ], [ %40, %45 ]
  %55 = icmp sgt i32 %26, 0
  br i1 %55, label %56, label %67

56:                                               ; preds = %53
  %57 = sext i32 %24 to i64
  %58 = sext i32 %3 to i64
  br label %59

59:                                               ; preds = %59, %56
  %60 = phi i32 [ 0, %56 ], [ %65, %59 ]
  %61 = phi i8* [ %25, %56 ], [ %63, %59 ]
  %62 = phi i8* [ %2, %56 ], [ %64, %59 ]
  tail call void %54(i8* %61, i8* %62, i32 %4) #6
  %63 = getelementptr inbounds i8, i8* %61, i64 %57
  %64 = getelementptr inbounds i8, i8* %62, i64 %58
  %65 = add nuw nsw i32 %60, 1
  %66 = icmp eq i32 %65, %26
  br i1 %66, label %67, label %59

67:                                               ; preds = %59, %53, %6
  %68 = phi i32 [ -1, %6 ], [ 0, %53 ], [ 0, %59 ]
  ret i32 %68
}

declare void @ARGBMirrorRow_C(i8*, i8*, i32) local_unnamed_addr #2

declare void @ARGBMirrorRow_Any_SSE2(i8*, i8*, i32) local_unnamed_addr #2

declare void @ARGBMirrorRow_SSE2(i8*, i8*, i32) local_unnamed_addr #2

declare void @ARGBMirrorRow_Any_AVX2(i8*, i8*, i32) local_unnamed_addr #2

declare void @ARGBMirrorRow_AVX2(i8*, i8*, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @RGB24Mirror(i8*, i32, i8*, i32, i32, i32) local_unnamed_addr #0 {
  %7 = icmp eq i8* %0, null
  %8 = icmp eq i8* %2, null
  %9 = or i1 %7, %8
  %10 = icmp slt i32 %4, 1
  %11 = or i1 %9, %10
  %12 = icmp eq i32 %5, 0
  %13 = or i1 %11, %12
  br i1 %13, label %53, label %14

14:                                               ; preds = %6
  %15 = icmp slt i32 %5, 0
  br i1 %15, label %16, label %23

16:                                               ; preds = %14
  %17 = sub nsw i32 0, %5
  %18 = xor i32 %5, -1
  %19 = mul nsw i32 %18, %1
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds i8, i8* %0, i64 %20
  %22 = sub nsw i32 0, %1
  br label %23

23:                                               ; preds = %16, %14
  %24 = phi i32 [ %22, %16 ], [ %1, %14 ]
  %25 = phi i8* [ %21, %16 ], [ %0, %14 ]
  %26 = phi i32 [ %17, %16 ], [ %5, %14 ]
  %27 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %29, label %31

29:                                               ; preds = %23
  %30 = tail call i32 @InitCpuFlags() #6
  br label %31

31:                                               ; preds = %23, %29
  %32 = phi i32 [ %30, %29 ], [ %27, %23 ]
  %33 = and i32 %32, 64
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %39, label %35

35:                                               ; preds = %31
  %36 = and i32 %4, 15
  %37 = icmp eq i32 %36, 0
  %38 = select i1 %37, void (i8*, i8*, i32)* @RGB24MirrorRow_SSSE3, void (i8*, i8*, i32)* @RGB24MirrorRow_Any_SSSE3
  br label %39

39:                                               ; preds = %31, %35
  %40 = phi void (i8*, i8*, i32)* [ %38, %35 ], [ @RGB24MirrorRow_C, %31 ]
  %41 = icmp sgt i32 %26, 0
  br i1 %41, label %42, label %53

42:                                               ; preds = %39
  %43 = sext i32 %24 to i64
  %44 = sext i32 %3 to i64
  br label %45

45:                                               ; preds = %45, %42
  %46 = phi i32 [ 0, %42 ], [ %51, %45 ]
  %47 = phi i8* [ %25, %42 ], [ %49, %45 ]
  %48 = phi i8* [ %2, %42 ], [ %50, %45 ]
  tail call void %40(i8* %47, i8* %48, i32 %4) #6, !callees !13
  %49 = getelementptr inbounds i8, i8* %47, i64 %43
  %50 = getelementptr inbounds i8, i8* %48, i64 %44
  %51 = add nuw nsw i32 %46, 1
  %52 = icmp eq i32 %51, %26
  br i1 %52, label %53, label %45

53:                                               ; preds = %45, %39, %6
  %54 = phi i32 [ -1, %6 ], [ 0, %39 ], [ 0, %45 ]
  ret i32 %54
}

declare void @RGB24MirrorRow_C(i8*, i8*, i32) local_unnamed_addr #2

declare void @RGB24MirrorRow_Any_SSSE3(i8*, i8*, i32) local_unnamed_addr #2

declare void @RGB24MirrorRow_SSSE3(i8*, i8*, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden nonnull void (i8*, i8*, i8*, i32)* @GetARGBBlend() local_unnamed_addr #0 {
  %1 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %2 = icmp eq i32 %1, 0
  br i1 %2, label %3, label %5

3:                                                ; preds = %0
  %4 = tail call i32 @InitCpuFlags() #6
  br label %5

5:                                                ; preds = %0, %3
  %6 = phi i32 [ %4, %3 ], [ %1, %0 ]
  %7 = and i32 %6, 64
  %8 = icmp eq i32 %7, 0
  %9 = select i1 %8, void (i8*, i8*, i8*, i32)* @ARGBBlendRow_C, void (i8*, i8*, i8*, i32)* @ARGBBlendRow_SSSE3
  ret void (i8*, i8*, i8*, i32)* %9
}

declare void @ARGBBlendRow_C(i8*, i8*, i8*, i32) #2

declare void @ARGBBlendRow_SSSE3(i8*, i8*, i8*, i32) #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @ARGBBlend(i8*, i32, i8*, i32, i8*, i32, i32, i32) local_unnamed_addr #0 {
  %9 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %13

11:                                               ; preds = %8
  %12 = tail call i32 @InitCpuFlags() #6
  br label %13

13:                                               ; preds = %8, %11
  %14 = phi i32 [ %12, %11 ], [ %9, %8 ]
  %15 = and i32 %14, 64
  %16 = icmp eq i32 %15, 0
  %17 = select i1 %16, void (i8*, i8*, i8*, i32)* @ARGBBlendRow_C, void (i8*, i8*, i8*, i32)* @ARGBBlendRow_SSSE3
  %18 = icmp ne i8* %0, null
  %19 = icmp ne i8* %2, null
  %20 = and i1 %18, %19
  %21 = icmp ne i8* %4, null
  %22 = and i1 %20, %21
  %23 = xor i1 %22, true
  %24 = icmp slt i32 %6, 1
  %25 = or i1 %24, %23
  %26 = icmp eq i32 %7, 0
  %27 = or i1 %25, %26
  br i1 %27, label %68, label %28

28:                                               ; preds = %13
  %29 = icmp slt i32 %7, 0
  br i1 %29, label %30, label %37

30:                                               ; preds = %28
  %31 = sub nsw i32 0, %7
  %32 = xor i32 %7, -1
  %33 = mul nsw i32 %32, %5
  %34 = sext i32 %33 to i64
  %35 = getelementptr inbounds i8, i8* %4, i64 %34
  %36 = sub nsw i32 0, %5
  br label %37

37:                                               ; preds = %30, %28
  %38 = phi i8* [ %35, %30 ], [ %4, %28 ]
  %39 = phi i32 [ %36, %30 ], [ %5, %28 ]
  %40 = phi i32 [ %31, %30 ], [ %7, %28 ]
  %41 = shl nsw i32 %6, 2
  %42 = icmp eq i32 %41, %1
  %43 = icmp eq i32 %41, %3
  %44 = and i1 %42, %43
  %45 = icmp eq i32 %39, %41
  %46 = and i1 %44, %45
  %47 = select i1 %46, i32 %40, i32 1
  %48 = mul nsw i32 %47, %6
  %49 = select i1 %46, i32 1, i32 %40
  %50 = icmp sgt i32 %49, 0
  br i1 %50, label %51, label %68

51:                                               ; preds = %37
  %52 = sext i32 %1 to i64
  %53 = select i1 %46, i64 0, i64 %52
  %54 = sext i32 %3 to i64
  %55 = select i1 %46, i64 0, i64 %54
  %56 = sext i32 %39 to i64
  %57 = select i1 %46, i64 0, i64 %56
  br label %58

58:                                               ; preds = %58, %51
  %59 = phi i32 [ 0, %51 ], [ %66, %58 ]
  %60 = phi i8* [ %38, %51 ], [ %65, %58 ]
  %61 = phi i8* [ %2, %51 ], [ %64, %58 ]
  %62 = phi i8* [ %0, %51 ], [ %63, %58 ]
  tail call void %17(i8* %62, i8* %61, i8* %60, i32 %48) #6, !callees !14
  %63 = getelementptr inbounds i8, i8* %62, i64 %53
  %64 = getelementptr inbounds i8, i8* %61, i64 %55
  %65 = getelementptr inbounds i8, i8* %60, i64 %57
  %66 = add nuw nsw i32 %59, 1
  %67 = icmp eq i32 %66, %49
  br i1 %67, label %68, label %58

68:                                               ; preds = %58, %37, %13
  %69 = phi i32 [ -1, %13 ], [ 0, %37 ], [ 0, %58 ]
  ret i32 %69
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @BlendPlane(i8*, i32, i8*, i32, i8*, i32, i8*, i32, i32, i32) local_unnamed_addr #0 {
  %11 = icmp ne i8* %0, null
  %12 = icmp ne i8* %2, null
  %13 = and i1 %11, %12
  %14 = icmp ne i8* %4, null
  %15 = and i1 %13, %14
  %16 = icmp ne i8* %6, null
  %17 = and i1 %15, %16
  %18 = xor i1 %17, true
  %19 = icmp slt i32 %8, 1
  %20 = or i1 %19, %18
  %21 = icmp eq i32 %9, 0
  %22 = or i1 %20, %21
  br i1 %22, label %96, label %23

23:                                               ; preds = %10
  %24 = icmp slt i32 %9, 0
  br i1 %24, label %25, label %32

25:                                               ; preds = %23
  %26 = sub nsw i32 0, %9
  %27 = xor i32 %9, -1
  %28 = mul nsw i32 %27, %7
  %29 = sext i32 %28 to i64
  %30 = getelementptr inbounds i8, i8* %6, i64 %29
  %31 = sub nsw i32 0, %7
  br label %32

32:                                               ; preds = %25, %23
  %33 = phi i8* [ %30, %25 ], [ %6, %23 ]
  %34 = phi i32 [ %31, %25 ], [ %7, %23 ]
  %35 = phi i32 [ %26, %25 ], [ %9, %23 ]
  %36 = icmp eq i32 %1, %8
  %37 = icmp eq i32 %3, %8
  %38 = and i1 %36, %37
  %39 = icmp eq i32 %5, %8
  %40 = and i1 %39, %38
  %41 = icmp eq i32 %34, %8
  %42 = and i1 %40, %41
  %43 = select i1 %42, i32 %35, i32 1
  %44 = mul nsw i32 %43, %8
  %45 = select i1 %42, i32 1, i32 %35
  %46 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %48, label %50

48:                                               ; preds = %32
  %49 = tail call i32 @InitCpuFlags() #6
  br label %50

50:                                               ; preds = %32, %48
  %51 = phi i32 [ %49, %48 ], [ %46, %32 ]
  %52 = and i32 %51, 64
  %53 = icmp eq i32 %52, 0
  br i1 %53, label %58, label %54

54:                                               ; preds = %50
  %55 = and i32 %44, 7
  %56 = icmp eq i32 %55, 0
  %57 = select i1 %56, void (i8*, i8*, i8*, i8*, i32)* @BlendPlaneRow_SSSE3, void (i8*, i8*, i8*, i8*, i32)* @BlendPlaneRow_Any_SSSE3
  br label %58

58:                                               ; preds = %50, %54
  %59 = phi void (i8*, i8*, i8*, i8*, i32)* [ %57, %54 ], [ @BlendPlaneRow_C, %50 ]
  %60 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %62, label %64

62:                                               ; preds = %58
  %63 = tail call i32 @InitCpuFlags() #6
  br label %64

64:                                               ; preds = %58, %62
  %65 = phi i32 [ %63, %62 ], [ %60, %58 ]
  %66 = and i32 %65, 1024
  %67 = icmp eq i32 %66, 0
  br i1 %67, label %72, label %68

68:                                               ; preds = %64
  %69 = and i32 %44, 31
  %70 = icmp eq i32 %69, 0
  %71 = select i1 %70, void (i8*, i8*, i8*, i8*, i32)* @BlendPlaneRow_AVX2, void (i8*, i8*, i8*, i8*, i32)* @BlendPlaneRow_Any_AVX2
  br label %72

72:                                               ; preds = %64, %68
  %73 = phi void (i8*, i8*, i8*, i8*, i32)* [ %71, %68 ], [ %59, %64 ]
  %74 = icmp sgt i32 %45, 0
  br i1 %74, label %75, label %96

75:                                               ; preds = %72
  %76 = sext i32 %1 to i64
  %77 = select i1 %42, i64 0, i64 %76
  %78 = sext i32 %3 to i64
  %79 = select i1 %42, i64 0, i64 %78
  %80 = sext i32 %5 to i64
  %81 = select i1 %42, i64 0, i64 %80
  %82 = sext i32 %34 to i64
  %83 = select i1 %42, i64 0, i64 %82
  br label %84

84:                                               ; preds = %84, %75
  %85 = phi i32 [ 0, %75 ], [ %94, %84 ]
  %86 = phi i8* [ %33, %75 ], [ %93, %84 ]
  %87 = phi i8* [ %4, %75 ], [ %92, %84 ]
  %88 = phi i8* [ %2, %75 ], [ %91, %84 ]
  %89 = phi i8* [ %0, %75 ], [ %90, %84 ]
  tail call void %73(i8* %89, i8* %88, i8* %87, i8* %86, i32 %44) #6
  %90 = getelementptr inbounds i8, i8* %89, i64 %77
  %91 = getelementptr inbounds i8, i8* %88, i64 %79
  %92 = getelementptr inbounds i8, i8* %87, i64 %81
  %93 = getelementptr inbounds i8, i8* %86, i64 %83
  %94 = add nuw nsw i32 %85, 1
  %95 = icmp eq i32 %94, %45
  br i1 %95, label %96, label %84

96:                                               ; preds = %84, %72, %10
  %97 = phi i32 [ -1, %10 ], [ 0, %72 ], [ 0, %84 ]
  ret i32 %97
}

declare void @BlendPlaneRow_C(i8*, i8*, i8*, i8*, i32) local_unnamed_addr #2

declare void @BlendPlaneRow_Any_SSSE3(i8*, i8*, i8*, i8*, i32) local_unnamed_addr #2

declare void @BlendPlaneRow_SSSE3(i8*, i8*, i8*, i8*, i32) local_unnamed_addr #2

declare void @BlendPlaneRow_Any_AVX2(i8*, i8*, i8*, i8*, i32) local_unnamed_addr #2

declare void @BlendPlaneRow_AVX2(i8*, i8*, i8*, i8*, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @I420Blend(i8*, i32, i8*, i32, i8*, i32, i8*, i32, i8*, i32, i8*, i32, i8*, i32, i8*, i32, i8*, i32, i8*, i32, i32, i32) local_unnamed_addr #0 {
  %23 = add nsw i32 %20, 1
  %24 = ashr i32 %23, 1
  %25 = icmp ne i8* %0, null
  %26 = icmp ne i8* %2, null
  %27 = and i1 %25, %26
  %28 = icmp ne i8* %4, null
  %29 = and i1 %27, %28
  %30 = icmp ne i8* %6, null
  %31 = and i1 %29, %30
  %32 = icmp ne i8* %8, null
  %33 = and i1 %31, %32
  %34 = icmp ne i8* %10, null
  %35 = and i1 %33, %34
  %36 = icmp ne i8* %12, null
  %37 = and i1 %35, %36
  %38 = icmp ne i8* %14, null
  %39 = and i1 %37, %38
  %40 = icmp ne i8* %16, null
  %41 = and i1 %39, %40
  %42 = icmp ne i8* %18, null
  %43 = and i1 %41, %42
  %44 = xor i1 %43, true
  %45 = icmp slt i32 %20, 1
  %46 = or i1 %45, %44
  %47 = icmp eq i32 %21, 0
  %48 = or i1 %46, %47
  br i1 %48, label %167, label %49

49:                                               ; preds = %22
  %50 = icmp slt i32 %21, 0
  br i1 %50, label %51, label %58

51:                                               ; preds = %49
  %52 = sub nsw i32 0, %21
  %53 = xor i32 %21, -1
  %54 = mul nsw i32 %53, %15
  %55 = sext i32 %54 to i64
  %56 = getelementptr inbounds i8, i8* %14, i64 %55
  %57 = sub nsw i32 0, %15
  br label %58

58:                                               ; preds = %51, %49
  %59 = phi i8* [ %56, %51 ], [ %14, %49 ]
  %60 = phi i32 [ %57, %51 ], [ %15, %49 ]
  %61 = phi i32 [ %52, %51 ], [ %21, %49 ]
  %62 = tail call i32 @BlendPlane(i8* %0, i32 %1, i8* %6, i32 %7, i8* %12, i32 %13, i8* %59, i32 %60, i32 %20, i32 %61)
  %63 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %64 = icmp eq i32 %63, 0
  br i1 %64, label %65, label %67

65:                                               ; preds = %58
  %66 = tail call i32 @InitCpuFlags() #6
  br label %67

67:                                               ; preds = %58, %65
  %68 = phi i32 [ %66, %65 ], [ %63, %58 ]
  %69 = and i32 %68, 64
  %70 = icmp eq i32 %69, 0
  br i1 %70, label %75, label %71

71:                                               ; preds = %67
  %72 = and i32 %23, 14
  %73 = icmp eq i32 %72, 0
  %74 = select i1 %73, void (i8*, i8*, i8*, i8*, i32)* @BlendPlaneRow_SSSE3, void (i8*, i8*, i8*, i8*, i32)* @BlendPlaneRow_Any_SSSE3
  br label %75

75:                                               ; preds = %67, %71
  %76 = phi void (i8*, i8*, i8*, i8*, i32)* [ %74, %71 ], [ @BlendPlaneRow_C, %67 ]
  %77 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %78 = icmp eq i32 %77, 0
  br i1 %78, label %79, label %81

79:                                               ; preds = %75
  %80 = tail call i32 @InitCpuFlags() #6
  br label %81

81:                                               ; preds = %75, %79
  %82 = phi i32 [ %80, %79 ], [ %77, %75 ]
  %83 = and i32 %82, 1024
  %84 = icmp eq i32 %83, 0
  br i1 %84, label %89, label %85

85:                                               ; preds = %81
  %86 = and i32 %23, 62
  %87 = icmp eq i32 %86, 0
  %88 = select i1 %87, void (i8*, i8*, i8*, i8*, i32)* @BlendPlaneRow_AVX2, void (i8*, i8*, i8*, i8*, i32)* @BlendPlaneRow_Any_AVX2
  br label %89

89:                                               ; preds = %81, %85
  %90 = phi void (i8*, i8*, i8*, i8*, i32)* [ %88, %85 ], [ %76, %81 ]
  %91 = and i32 %20, 1
  %92 = icmp ne i32 %91, 0
  %93 = select i1 %92, void (i8*, i64, i8*, i32)* @ScaleRowDown2Box_Odd_C, void (i8*, i64, i8*, i32)* @ScaleRowDown2Box_C
  %94 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %95 = icmp eq i32 %94, 0
  br i1 %95, label %96, label %98

96:                                               ; preds = %89
  %97 = tail call i32 @InitCpuFlags() #6
  br label %98

98:                                               ; preds = %89, %96
  %99 = phi i32 [ %97, %96 ], [ %94, %89 ]
  %100 = and i32 %99, 64
  %101 = icmp eq i32 %100, 0
  %102 = or i1 %92, %101
  %103 = select i1 %101, void (i8*, i64, i8*, i32)* %93, void (i8*, i64, i8*, i32)* @ScaleRowDown2Box_Odd_SSSE3
  br i1 %102, label %108, label %104

104:                                              ; preds = %98
  %105 = and i32 %23, 30
  %106 = icmp eq i32 %105, 0
  %107 = select i1 %106, void (i8*, i64, i8*, i32)* @ScaleRowDown2Box_SSSE3, void (i8*, i64, i8*, i32)* @ScaleRowDown2Box_Any_SSSE3
  br label %108

108:                                              ; preds = %98, %104
  %109 = phi void (i8*, i64, i8*, i32)* [ %107, %104 ], [ %103, %98 ]
  %110 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %111 = icmp eq i32 %110, 0
  br i1 %111, label %112, label %114

112:                                              ; preds = %108
  %113 = tail call i32 @InitCpuFlags() #6
  br label %114

114:                                              ; preds = %108, %112
  %115 = phi i32 [ %113, %112 ], [ %110, %108 ]
  %116 = and i32 %115, 1024
  %117 = icmp eq i32 %116, 0
  %118 = or i1 %92, %117
  %119 = select i1 %117, void (i8*, i64, i8*, i32)* %109, void (i8*, i64, i8*, i32)* @ScaleRowDown2Box_Odd_AVX2
  br i1 %118, label %124, label %120

120:                                              ; preds = %114
  %121 = and i32 %23, 62
  %122 = icmp eq i32 %121, 0
  %123 = select i1 %122, void (i8*, i64, i8*, i32)* @ScaleRowDown2Box_AVX2, void (i8*, i64, i8*, i32)* @ScaleRowDown2Box_Any_AVX2
  br label %124

124:                                              ; preds = %114, %120
  %125 = phi void (i8*, i64, i8*, i32)* [ %123, %120 ], [ %119, %114 ]
  %126 = add nsw i32 %24, 63
  %127 = sext i32 %126 to i64
  %128 = tail call noalias i8* @malloc(i64 %127) #6
  %129 = ptrtoint i8* %128 to i64
  %130 = add nsw i64 %129, 63
  %131 = and i64 %130, -64
  %132 = inttoptr i64 %131 to i8*
  %133 = icmp sgt i32 %61, 0
  br i1 %133, label %134, label %166

134:                                              ; preds = %124
  %135 = add nsw i32 %61, -1
  %136 = sext i32 %3 to i64
  %137 = sext i32 %9 to i64
  %138 = sext i32 %17 to i64
  %139 = sext i32 %5 to i64
  %140 = sext i32 %11 to i64
  %141 = sext i32 %19 to i64
  br label %142

142:                                              ; preds = %134, %142
  %143 = phi i32 [ 0, %134 ], [ %164, %142 ]
  %144 = phi i8* [ %2, %134 ], [ %158, %142 ]
  %145 = phi i8* [ %18, %134 ], [ %163, %142 ]
  %146 = phi i8* [ %4, %134 ], [ %161, %142 ]
  %147 = phi i8* [ %16, %134 ], [ %160, %142 ]
  %148 = phi i32 [ %13, %134 ], [ %153, %142 ]
  %149 = phi i8* [ %12, %134 ], [ %157, %142 ]
  %150 = phi i8* [ %8, %134 ], [ %159, %142 ]
  %151 = phi i8* [ %10, %134 ], [ %162, %142 ]
  %152 = icmp eq i32 %143, %135
  %153 = select i1 %152, i32 0, i32 %148
  %154 = sext i32 %153 to i64
  tail call void %125(i8* %149, i64 %154, i8* %132, i32 %24) #6
  %155 = shl nsw i32 %153, 1
  %156 = sext i32 %155 to i64
  %157 = getelementptr inbounds i8, i8* %149, i64 %156
  tail call void %90(i8* %144, i8* %150, i8* %132, i8* %147, i32 %24) #6
  tail call void %90(i8* %146, i8* %151, i8* %132, i8* %145, i32 %24) #6
  %158 = getelementptr inbounds i8, i8* %144, i64 %136
  %159 = getelementptr inbounds i8, i8* %150, i64 %137
  %160 = getelementptr inbounds i8, i8* %147, i64 %138
  %161 = getelementptr inbounds i8, i8* %146, i64 %139
  %162 = getelementptr inbounds i8, i8* %151, i64 %140
  %163 = getelementptr inbounds i8, i8* %145, i64 %141
  %164 = add nuw nsw i32 %143, 2
  %165 = icmp slt i32 %164, %61
  br i1 %165, label %142, label %166

166:                                              ; preds = %142, %124
  tail call void @free(i8* %128) #6
  br label %167

167:                                              ; preds = %22, %166
  %168 = phi i32 [ 0, %166 ], [ -1, %22 ]
  ret i32 %168
}

declare void @ScaleRowDown2Box_C(i8*, i64, i8*, i32) local_unnamed_addr #2

declare void @ScaleRowDown2Box_Odd_C(i8*, i64, i8*, i32) local_unnamed_addr #2

declare void @ScaleRowDown2Box_Odd_SSSE3(i8*, i64, i8*, i32) local_unnamed_addr #2

declare void @ScaleRowDown2Box_Any_SSSE3(i8*, i64, i8*, i32) local_unnamed_addr #2

declare void @ScaleRowDown2Box_SSSE3(i8*, i64, i8*, i32) local_unnamed_addr #2

declare void @ScaleRowDown2Box_Odd_AVX2(i8*, i64, i8*, i32) local_unnamed_addr #2

declare void @ScaleRowDown2Box_Any_AVX2(i8*, i64, i8*, i32) local_unnamed_addr #2

declare void @ScaleRowDown2Box_AVX2(i8*, i64, i8*, i32) local_unnamed_addr #2

; Function Attrs: nofree nounwind
declare noalias i8* @malloc(i64) local_unnamed_addr #4

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden i32 @ARGBMultiply(i8*, i32, i8*, i32, i8*, i32, i32, i32) local_unnamed_addr #0 {
  %9 = icmp ne i8* %0, null
  %10 = icmp ne i8* %2, null
  %11 = and i1 %9, %10
  %12 = icmp ne i8* %4, null
  %13 = and i1 %11, %12
  %14 = xor i1 %13, true
  %15 = icmp slt i32 %6, 1
  %16 = or i1 %15, %14
  %17 = icmp eq i32 %7, 0
  %18 = or i1 %16, %17
  br i1 %18, label %87, label %19

19:                                               ; preds = %8
  %20 = icmp slt i32 %7, 0
  br i1 %20, label %21, label %28

21:                                               ; preds = %19
  %22 = sub nsw i32 0, %7
  %23 = xor i32 %7, -1
  %24 = mul nsw i32 %23, %5
  %25 = sext i32 %24 to i64
  %26 = getelementptr inbounds i8, i8* %4, i64 %25
  %27 = sub nsw i32 0, %5
  br label %28

28:                                               ; preds = %21, %19
  %29 = phi i8* [ %26, %21 ], [ %4, %19 ]
  %30 = phi i32 [ %27, %21 ], [ %5, %19 ]
  %31 = phi i32 [ %22, %21 ], [ %7, %19 ]
  %32 = shl nsw i32 %6, 2
  %33 = icmp eq i32 %32, %1
  %34 = icmp eq i32 %32, %3
  %35 = and i1 %33, %34
  %36 = icmp eq i32 %30, %32
  %37 = and i1 %35, %36
  %38 = select i1 %37, i32 %31, i32 1
  %39 = mul nsw i32 %38, %6
  %40 = select i1 %37, i32 1, i32 %31
  %41 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %43, label %45

43:                                               ; preds = %28
  %44 = tail call i32 @InitCpuFlags() #6
  br label %45

45:                                               ; preds = %28, %43
  %46 = phi i32 [ %44, %43 ], [ %41, %28 ]
  %47 = and i32 %46, 32
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %53, label %49

49:                                               ; preds = %45
  %50 = and i32 %39, 3
  %51 = icmp eq i32 %50, 0
  %52 = select i1 %51, void (i8*, i8*, i8*, i32)* @ARGBMultiplyRow_SSE2, void (i8*, i8*, i8*, i32)* @ARGBMultiplyRow_Any_SSE2
  br label %53

53:                                               ; preds = %45, %49
  %54 = phi void (i8*, i8*, i8*, i32)* [ %52, %49 ], [ @ARGBMultiplyRow_C, %45 ]
  %55 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %56 = icmp eq i32 %55, 0
  br i1 %56, label %57, label %59

57:                                               ; preds = %53
  %58 = tail call i32 @InitCpuFlags() #6
  br label %59

59:                                               ; preds = %53, %57
  %60 = phi i32 [ %58, %57 ], [ %55, %53 ]
  %61 = and i32 %60, 1024
  %62 = icmp eq i32 %61, 0
  br i1 %62, label %67, label %63

63:                                               ; preds = %59
  %64 = and i32 %39, 7
  %65 = icmp eq i32 %64, 0
  %66 = select i1 %65, void (i8*, i8*, i8*, i32)* @ARGBMultiplyRow_AVX2, void (i8*, i8*, i8*, i32)* @ARGBMultiplyRow_Any_AVX2
  br label %67

67:                                               ; preds = %59, %63
  %68 = phi void (i8*, i8*, i8*, i32)* [ %66, %63 ], [ %54, %59 ]
  %69 = icmp sgt i32 %40, 0
  br i1 %69, label %70, label %87

70:                                               ; preds = %67
  %71 = sext i32 %1 to i64
  %72 = select i1 %37, i64 0, i64 %71
  %73 = sext i32 %3 to i64
  %74 = select i1 %37, i64 0, i64 %73
  %75 = sext i32 %30 to i64
  %76 = select i1 %37, i64 0, i64 %75
  br label %77

77:                                               ; preds = %77, %70
  %78 = phi i32 [ 0, %70 ], [ %85, %77 ]
  %79 = phi i8* [ %29, %70 ], [ %84, %77 ]
  %80 = phi i8* [ %2, %70 ], [ %83, %77 ]
  %81 = phi i8* [ %0, %70 ], [ %82, %77 ]
  tail call void %68(i8* %81, i8* %80, i8* %79, i32 %39) #6
  %82 = getelementptr inbounds i8, i8* %81, i64 %72
  %83 = getelementptr inbounds i8, i8* %80, i64 %74
  %84 = getelementptr inbounds i8, i8* %79, i64 %76
  %85 = add nuw nsw i32 %78, 1
  %86 = icmp eq i32 %85, %40
  br i1 %86, label %87, label %77

87:                                               ; preds = %77, %67, %8
  %88 = phi i32 [ -1, %8 ], [ 0, %67 ], [ 0, %77 ]
  ret i32 %88
}

declare void @ARGBMultiplyRow_C(i8*, i8*, i8*, i32) local_unnamed_addr #2

declare void @ARGBMultiplyRow_Any_SSE2(i8*, i8*, i8*, i32) local_unnamed_addr #2

declare void @ARGBMultiplyRow_SSE2(i8*, i8*, i8*, i32) local_unnamed_addr #2

declare void @ARGBMultiplyRow_Any_AVX2(i8*, i8*, i8*, i32) local_unnamed_addr #2

declare void @ARGBMultiplyRow_AVX2(i8*, i8*, i8*, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @ARGBAdd(i8*, i32, i8*, i32, i8*, i32, i32, i32) local_unnamed_addr #0 {
  %9 = icmp ne i8* %0, null
  %10 = icmp ne i8* %2, null
  %11 = and i1 %9, %10
  %12 = icmp ne i8* %4, null
  %13 = and i1 %11, %12
  %14 = xor i1 %13, true
  %15 = icmp slt i32 %6, 1
  %16 = or i1 %15, %14
  %17 = icmp eq i32 %7, 0
  %18 = or i1 %16, %17
  br i1 %18, label %96, label %19

19:                                               ; preds = %8
  %20 = icmp slt i32 %7, 0
  br i1 %20, label %21, label %28

21:                                               ; preds = %19
  %22 = sub nsw i32 0, %7
  %23 = xor i32 %7, -1
  %24 = mul nsw i32 %23, %5
  %25 = sext i32 %24 to i64
  %26 = getelementptr inbounds i8, i8* %4, i64 %25
  %27 = sub nsw i32 0, %5
  br label %28

28:                                               ; preds = %21, %19
  %29 = phi i8* [ %26, %21 ], [ %4, %19 ]
  %30 = phi i32 [ %27, %21 ], [ %5, %19 ]
  %31 = phi i32 [ %22, %21 ], [ %7, %19 ]
  %32 = shl nsw i32 %6, 2
  %33 = icmp eq i32 %32, %1
  %34 = icmp eq i32 %32, %3
  %35 = and i1 %33, %34
  %36 = icmp eq i32 %30, %32
  %37 = and i1 %35, %36
  %38 = select i1 %37, i32 %31, i32 1
  %39 = mul nsw i32 %38, %6
  %40 = select i1 %37, i32 1, i32 %31
  %41 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %43, label %45

43:                                               ; preds = %28
  %44 = tail call i32 @InitCpuFlags() #6
  br label %45

45:                                               ; preds = %28, %43
  %46 = phi i32 [ %44, %43 ], [ %41, %28 ]
  %47 = and i32 %46, 32
  %48 = icmp eq i32 %47, 0
  %49 = select i1 %48, void (i8*, i8*, i8*, i32)* @ARGBAddRow_C, void (i8*, i8*, i8*, i32)* @ARGBAddRow_SSE2
  %50 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %52, label %54

52:                                               ; preds = %45
  %53 = tail call i32 @InitCpuFlags() #6
  br label %54

54:                                               ; preds = %45, %52
  %55 = phi i32 [ %53, %52 ], [ %50, %45 ]
  %56 = and i32 %55, 32
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %62, label %58

58:                                               ; preds = %54
  %59 = and i32 %39, 3
  %60 = icmp eq i32 %59, 0
  %61 = select i1 %60, void (i8*, i8*, i8*, i32)* @ARGBAddRow_SSE2, void (i8*, i8*, i8*, i32)* @ARGBAddRow_Any_SSE2
  br label %62

62:                                               ; preds = %54, %58
  %63 = phi void (i8*, i8*, i8*, i32)* [ %61, %58 ], [ %49, %54 ]
  %64 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %65 = icmp eq i32 %64, 0
  br i1 %65, label %66, label %68

66:                                               ; preds = %62
  %67 = tail call i32 @InitCpuFlags() #6
  br label %68

68:                                               ; preds = %62, %66
  %69 = phi i32 [ %67, %66 ], [ %64, %62 ]
  %70 = and i32 %69, 1024
  %71 = icmp eq i32 %70, 0
  br i1 %71, label %76, label %72

72:                                               ; preds = %68
  %73 = and i32 %39, 7
  %74 = icmp eq i32 %73, 0
  %75 = select i1 %74, void (i8*, i8*, i8*, i32)* @ARGBAddRow_AVX2, void (i8*, i8*, i8*, i32)* @ARGBAddRow_Any_AVX2
  br label %76

76:                                               ; preds = %68, %72
  %77 = phi void (i8*, i8*, i8*, i32)* [ %75, %72 ], [ %63, %68 ]
  %78 = icmp sgt i32 %40, 0
  br i1 %78, label %79, label %96

79:                                               ; preds = %76
  %80 = sext i32 %1 to i64
  %81 = select i1 %37, i64 0, i64 %80
  %82 = sext i32 %3 to i64
  %83 = select i1 %37, i64 0, i64 %82
  %84 = sext i32 %30 to i64
  %85 = select i1 %37, i64 0, i64 %84
  br label %86

86:                                               ; preds = %86, %79
  %87 = phi i32 [ 0, %79 ], [ %94, %86 ]
  %88 = phi i8* [ %29, %79 ], [ %93, %86 ]
  %89 = phi i8* [ %2, %79 ], [ %92, %86 ]
  %90 = phi i8* [ %0, %79 ], [ %91, %86 ]
  tail call void %77(i8* %90, i8* %89, i8* %88, i32 %39) #6
  %91 = getelementptr inbounds i8, i8* %90, i64 %81
  %92 = getelementptr inbounds i8, i8* %89, i64 %83
  %93 = getelementptr inbounds i8, i8* %88, i64 %85
  %94 = add nuw nsw i32 %87, 1
  %95 = icmp eq i32 %94, %40
  br i1 %95, label %96, label %86

96:                                               ; preds = %86, %76, %8
  %97 = phi i32 [ -1, %8 ], [ 0, %76 ], [ 0, %86 ]
  ret i32 %97
}

declare void @ARGBAddRow_C(i8*, i8*, i8*, i32) local_unnamed_addr #2

declare void @ARGBAddRow_SSE2(i8*, i8*, i8*, i32) local_unnamed_addr #2

declare void @ARGBAddRow_Any_SSE2(i8*, i8*, i8*, i32) local_unnamed_addr #2

declare void @ARGBAddRow_Any_AVX2(i8*, i8*, i8*, i32) local_unnamed_addr #2

declare void @ARGBAddRow_AVX2(i8*, i8*, i8*, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @ARGBSubtract(i8*, i32, i8*, i32, i8*, i32, i32, i32) local_unnamed_addr #0 {
  %9 = icmp ne i8* %0, null
  %10 = icmp ne i8* %2, null
  %11 = and i1 %9, %10
  %12 = icmp ne i8* %4, null
  %13 = and i1 %11, %12
  %14 = xor i1 %13, true
  %15 = icmp slt i32 %6, 1
  %16 = or i1 %15, %14
  %17 = icmp eq i32 %7, 0
  %18 = or i1 %16, %17
  br i1 %18, label %87, label %19

19:                                               ; preds = %8
  %20 = icmp slt i32 %7, 0
  br i1 %20, label %21, label %28

21:                                               ; preds = %19
  %22 = sub nsw i32 0, %7
  %23 = xor i32 %7, -1
  %24 = mul nsw i32 %23, %5
  %25 = sext i32 %24 to i64
  %26 = getelementptr inbounds i8, i8* %4, i64 %25
  %27 = sub nsw i32 0, %5
  br label %28

28:                                               ; preds = %21, %19
  %29 = phi i8* [ %26, %21 ], [ %4, %19 ]
  %30 = phi i32 [ %27, %21 ], [ %5, %19 ]
  %31 = phi i32 [ %22, %21 ], [ %7, %19 ]
  %32 = shl nsw i32 %6, 2
  %33 = icmp eq i32 %32, %1
  %34 = icmp eq i32 %32, %3
  %35 = and i1 %33, %34
  %36 = icmp eq i32 %30, %32
  %37 = and i1 %35, %36
  %38 = select i1 %37, i32 %31, i32 1
  %39 = mul nsw i32 %38, %6
  %40 = select i1 %37, i32 1, i32 %31
  %41 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %43, label %45

43:                                               ; preds = %28
  %44 = tail call i32 @InitCpuFlags() #6
  br label %45

45:                                               ; preds = %28, %43
  %46 = phi i32 [ %44, %43 ], [ %41, %28 ]
  %47 = and i32 %46, 32
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %53, label %49

49:                                               ; preds = %45
  %50 = and i32 %39, 3
  %51 = icmp eq i32 %50, 0
  %52 = select i1 %51, void (i8*, i8*, i8*, i32)* @ARGBSubtractRow_SSE2, void (i8*, i8*, i8*, i32)* @ARGBSubtractRow_Any_SSE2
  br label %53

53:                                               ; preds = %45, %49
  %54 = phi void (i8*, i8*, i8*, i32)* [ %52, %49 ], [ @ARGBSubtractRow_C, %45 ]
  %55 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %56 = icmp eq i32 %55, 0
  br i1 %56, label %57, label %59

57:                                               ; preds = %53
  %58 = tail call i32 @InitCpuFlags() #6
  br label %59

59:                                               ; preds = %53, %57
  %60 = phi i32 [ %58, %57 ], [ %55, %53 ]
  %61 = and i32 %60, 1024
  %62 = icmp eq i32 %61, 0
  br i1 %62, label %67, label %63

63:                                               ; preds = %59
  %64 = and i32 %39, 7
  %65 = icmp eq i32 %64, 0
  %66 = select i1 %65, void (i8*, i8*, i8*, i32)* @ARGBSubtractRow_AVX2, void (i8*, i8*, i8*, i32)* @ARGBSubtractRow_Any_AVX2
  br label %67

67:                                               ; preds = %59, %63
  %68 = phi void (i8*, i8*, i8*, i32)* [ %66, %63 ], [ %54, %59 ]
  %69 = icmp sgt i32 %40, 0
  br i1 %69, label %70, label %87

70:                                               ; preds = %67
  %71 = sext i32 %1 to i64
  %72 = select i1 %37, i64 0, i64 %71
  %73 = sext i32 %3 to i64
  %74 = select i1 %37, i64 0, i64 %73
  %75 = sext i32 %30 to i64
  %76 = select i1 %37, i64 0, i64 %75
  br label %77

77:                                               ; preds = %77, %70
  %78 = phi i32 [ 0, %70 ], [ %85, %77 ]
  %79 = phi i8* [ %29, %70 ], [ %84, %77 ]
  %80 = phi i8* [ %2, %70 ], [ %83, %77 ]
  %81 = phi i8* [ %0, %70 ], [ %82, %77 ]
  tail call void %68(i8* %81, i8* %80, i8* %79, i32 %39) #6
  %82 = getelementptr inbounds i8, i8* %81, i64 %72
  %83 = getelementptr inbounds i8, i8* %80, i64 %74
  %84 = getelementptr inbounds i8, i8* %79, i64 %76
  %85 = add nuw nsw i32 %78, 1
  %86 = icmp eq i32 %85, %40
  br i1 %86, label %87, label %77

87:                                               ; preds = %77, %67, %8
  %88 = phi i32 [ -1, %8 ], [ 0, %67 ], [ 0, %77 ]
  ret i32 %88
}

declare void @ARGBSubtractRow_C(i8*, i8*, i8*, i32) local_unnamed_addr #2

declare void @ARGBSubtractRow_Any_SSE2(i8*, i8*, i8*, i32) local_unnamed_addr #2

declare void @ARGBSubtractRow_SSE2(i8*, i8*, i8*, i32) local_unnamed_addr #2

declare void @ARGBSubtractRow_Any_AVX2(i8*, i8*, i8*, i32) local_unnamed_addr #2

declare void @ARGBSubtractRow_AVX2(i8*, i8*, i8*, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @RAWToRGB24(i8*, i32, i8*, i32, i32, i32) local_unnamed_addr #0 {
  %7 = icmp eq i8* %0, null
  %8 = icmp eq i8* %2, null
  %9 = or i1 %7, %8
  %10 = icmp slt i32 %4, 1
  %11 = or i1 %9, %10
  %12 = icmp eq i32 %5, 0
  %13 = or i1 %11, %12
  br i1 %13, label %62, label %14

14:                                               ; preds = %6
  %15 = icmp slt i32 %5, 0
  br i1 %15, label %16, label %23

16:                                               ; preds = %14
  %17 = sub nsw i32 0, %5
  %18 = xor i32 %5, -1
  %19 = mul nsw i32 %18, %1
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds i8, i8* %0, i64 %20
  %22 = sub nsw i32 0, %1
  br label %23

23:                                               ; preds = %16, %14
  %24 = phi i8* [ %21, %16 ], [ %0, %14 ]
  %25 = phi i32 [ %22, %16 ], [ %1, %14 ]
  %26 = phi i32 [ %17, %16 ], [ %5, %14 ]
  %27 = mul nsw i32 %4, 3
  %28 = icmp eq i32 %25, %27
  %29 = icmp eq i32 %27, %3
  %30 = and i1 %29, %28
  %31 = select i1 %30, i32 %26, i32 1
  %32 = mul nsw i32 %31, %4
  %33 = select i1 %30, i32 1, i32 %26
  %34 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %36, label %38

36:                                               ; preds = %23
  %37 = tail call i32 @InitCpuFlags() #6
  br label %38

38:                                               ; preds = %23, %36
  %39 = phi i32 [ %37, %36 ], [ %34, %23 ]
  %40 = and i32 %39, 64
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %46, label %42

42:                                               ; preds = %38
  %43 = and i32 %32, 7
  %44 = icmp eq i32 %43, 0
  %45 = select i1 %44, void (i8*, i8*, i32)* @RAWToRGB24Row_SSSE3, void (i8*, i8*, i32)* @RAWToRGB24Row_Any_SSSE3
  br label %46

46:                                               ; preds = %38, %42
  %47 = phi void (i8*, i8*, i32)* [ %45, %42 ], [ @RAWToRGB24Row_C, %38 ]
  %48 = icmp sgt i32 %33, 0
  br i1 %48, label %49, label %62

49:                                               ; preds = %46
  %50 = sext i32 %25 to i64
  %51 = select i1 %30, i64 0, i64 %50
  %52 = sext i32 %3 to i64
  %53 = select i1 %30, i64 0, i64 %52
  br label %54

54:                                               ; preds = %54, %49
  %55 = phi i32 [ 0, %49 ], [ %60, %54 ]
  %56 = phi i8* [ %2, %49 ], [ %59, %54 ]
  %57 = phi i8* [ %24, %49 ], [ %58, %54 ]
  tail call void %47(i8* %57, i8* %56, i32 %32) #6, !callees !15
  %58 = getelementptr inbounds i8, i8* %57, i64 %51
  %59 = getelementptr inbounds i8, i8* %56, i64 %53
  %60 = add nuw nsw i32 %55, 1
  %61 = icmp eq i32 %60, %33
  br i1 %61, label %62, label %54

62:                                               ; preds = %54, %46, %6
  %63 = phi i32 [ -1, %6 ], [ 0, %46 ], [ 0, %54 ]
  ret i32 %63
}

declare void @RAWToRGB24Row_C(i8*, i8*, i32) local_unnamed_addr #2

declare void @RAWToRGB24Row_Any_SSSE3(i8*, i8*, i32) local_unnamed_addr #2

declare void @RAWToRGB24Row_SSSE3(i8*, i8*, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @SetPlane(i8*, i32, i32, i32, i32) local_unnamed_addr #0 {
  %6 = icmp slt i32 %3, 0
  br i1 %6, label %7, label %14

7:                                                ; preds = %5
  %8 = sub nsw i32 0, %3
  %9 = xor i32 %3, -1
  %10 = mul nsw i32 %9, %1
  %11 = sext i32 %10 to i64
  %12 = getelementptr inbounds i8, i8* %0, i64 %11
  %13 = sub nsw i32 0, %1
  br label %14

14:                                               ; preds = %7, %5
  %15 = phi i32 [ %13, %7 ], [ %1, %5 ]
  %16 = phi i32 [ %8, %7 ], [ %3, %5 ]
  %17 = phi i8* [ %12, %7 ], [ %0, %5 ]
  %18 = icmp eq i32 %15, %2
  %19 = select i1 %18, i32 0, i32 %15
  %20 = select i1 %18, i32 %16, i32 1
  %21 = mul nsw i32 %20, %2
  %22 = select i1 %18, i32 1, i32 %16
  %23 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %25, label %27

25:                                               ; preds = %14
  %26 = tail call i32 @InitCpuFlags() #6
  br label %27

27:                                               ; preds = %14, %25
  %28 = phi i32 [ %26, %25 ], [ %23, %14 ]
  %29 = and i32 %28, 16
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %35, label %31

31:                                               ; preds = %27
  %32 = and i32 %21, 3
  %33 = icmp eq i32 %32, 0
  %34 = select i1 %33, void (i8*, i8, i32)* @SetRow_X86, void (i8*, i8, i32)* @SetRow_Any_X86
  br label %35

35:                                               ; preds = %27, %31
  %36 = phi void (i8*, i8, i32)* [ %34, %31 ], [ @SetRow_C, %27 ]
  %37 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %38 = icmp eq i32 %37, 0
  br i1 %38, label %39, label %41

39:                                               ; preds = %35
  %40 = tail call i32 @InitCpuFlags() #6
  br label %41

41:                                               ; preds = %35, %39
  %42 = phi i32 [ %40, %39 ], [ %37, %35 ]
  %43 = and i32 %42, 2048
  %44 = icmp eq i32 %43, 0
  %45 = select i1 %44, void (i8*, i8, i32)* %36, void (i8*, i8, i32)* @SetRow_ERMS
  %46 = icmp sgt i32 %22, 0
  br i1 %46, label %47, label %56

47:                                               ; preds = %41
  %48 = trunc i32 %4 to i8
  %49 = sext i32 %19 to i64
  br label %50

50:                                               ; preds = %50, %47
  %51 = phi i32 [ 0, %47 ], [ %54, %50 ]
  %52 = phi i8* [ %17, %47 ], [ %53, %50 ]
  tail call void %45(i8* %52, i8 zeroext %48, i32 %21) #6, !callees !16
  %53 = getelementptr inbounds i8, i8* %52, i64 %49
  %54 = add nuw nsw i32 %51, 1
  %55 = icmp eq i32 %54, %22
  br i1 %55, label %56, label %50

56:                                               ; preds = %50, %41
  ret void
}

declare void @SetRow_C(i8*, i8 zeroext, i32) local_unnamed_addr #2

declare void @SetRow_Any_X86(i8*, i8 zeroext, i32) local_unnamed_addr #2

declare void @SetRow_X86(i8*, i8 zeroext, i32) local_unnamed_addr #2

declare void @SetRow_ERMS(i8*, i8 zeroext, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @I420Rect(i8*, i32, i8*, i32, i8*, i32, i32, i32, i32, i32, i32, i32, i32) local_unnamed_addr #0 {
  %14 = add nsw i32 %8, 1
  %15 = ashr i32 %14, 1
  %16 = add nsw i32 %9, 1
  %17 = ashr i32 %16, 1
  %18 = sdiv i32 %7, 2
  %19 = sdiv i32 %6, 2
  %20 = sext i32 %19 to i64
  %21 = icmp ne i8* %0, null
  %22 = icmp ne i8* %2, null
  %23 = and i1 %21, %22
  %24 = icmp ne i8* %4, null
  %25 = and i1 %23, %24
  %26 = xor i1 %25, true
  %27 = icmp slt i32 %8, 1
  %28 = or i1 %27, %26
  %29 = icmp eq i32 %9, 0
  %30 = or i1 %28, %29
  %31 = or i32 %7, %6
  %32 = or i32 %31, %10
  %33 = icmp slt i32 %32, 0
  %34 = or i1 %30, %33
  %35 = icmp sgt i32 %10, 255
  %36 = or i1 %35, %34
  %37 = or i32 %12, %11
  %38 = icmp ugt i32 %37, 255
  %39 = or i1 %38, %36
  br i1 %39, label %205, label %40

40:                                               ; preds = %13
  %41 = mul nsw i32 %18, %5
  %42 = sext i32 %41 to i64
  %43 = getelementptr inbounds i8, i8* %4, i64 %42
  %44 = getelementptr inbounds i8, i8* %43, i64 %20
  %45 = mul nsw i32 %18, %3
  %46 = sext i32 %45 to i64
  %47 = getelementptr inbounds i8, i8* %2, i64 %46
  %48 = getelementptr inbounds i8, i8* %47, i64 %20
  %49 = mul nsw i32 %7, %1
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds i8, i8* %0, i64 %50
  %52 = sext i32 %6 to i64
  %53 = getelementptr inbounds i8, i8* %51, i64 %52
  %54 = icmp slt i32 %9, 0
  br i1 %54, label %55, label %62

55:                                               ; preds = %40
  %56 = sub nsw i32 0, %9
  %57 = xor i32 %9, -1
  %58 = mul nsw i32 %57, %1
  %59 = sext i32 %58 to i64
  %60 = getelementptr inbounds i8, i8* %53, i64 %59
  %61 = sub nsw i32 0, %1
  br label %62

62:                                               ; preds = %55, %40
  %63 = phi i32 [ %61, %55 ], [ %1, %40 ]
  %64 = phi i32 [ %56, %55 ], [ %9, %40 ]
  %65 = phi i8* [ %60, %55 ], [ %53, %40 ]
  %66 = icmp eq i32 %63, %8
  %67 = select i1 %66, i32 0, i32 %63
  %68 = select i1 %66, i32 %64, i32 1
  %69 = mul nsw i32 %68, %8
  %70 = select i1 %66, i32 1, i32 %64
  %71 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %72 = icmp eq i32 %71, 0
  br i1 %72, label %73, label %75

73:                                               ; preds = %62
  %74 = tail call i32 @InitCpuFlags() #6
  br label %75

75:                                               ; preds = %73, %62
  %76 = phi i32 [ %74, %73 ], [ %71, %62 ]
  %77 = and i32 %76, 16
  %78 = icmp eq i32 %77, 0
  br i1 %78, label %83, label %79

79:                                               ; preds = %75
  %80 = and i32 %69, 3
  %81 = icmp eq i32 %80, 0
  %82 = select i1 %81, void (i8*, i8, i32)* @SetRow_X86, void (i8*, i8, i32)* @SetRow_Any_X86
  br label %83

83:                                               ; preds = %79, %75
  %84 = phi void (i8*, i8, i32)* [ %82, %79 ], [ @SetRow_C, %75 ]
  %85 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %86 = icmp eq i32 %85, 0
  br i1 %86, label %87, label %89

87:                                               ; preds = %83
  %88 = tail call i32 @InitCpuFlags() #6
  br label %89

89:                                               ; preds = %87, %83
  %90 = phi i32 [ %88, %87 ], [ %85, %83 ]
  %91 = and i32 %90, 2048
  %92 = icmp eq i32 %91, 0
  %93 = select i1 %92, void (i8*, i8, i32)* %84, void (i8*, i8, i32)* @SetRow_ERMS
  %94 = icmp sgt i32 %70, 0
  br i1 %94, label %95, label %104

95:                                               ; preds = %89
  %96 = trunc i32 %10 to i8
  %97 = sext i32 %67 to i64
  br label %98

98:                                               ; preds = %98, %95
  %99 = phi i32 [ 0, %95 ], [ %102, %98 ]
  %100 = phi i8* [ %65, %95 ], [ %101, %98 ]
  tail call void %93(i8* %100, i8 zeroext %96, i32 %69) #6, !callees !16
  %101 = getelementptr inbounds i8, i8* %100, i64 %97
  %102 = add nuw nsw i32 %99, 1
  %103 = icmp eq i32 %102, %70
  br i1 %103, label %104, label %98

104:                                              ; preds = %98, %89
  %105 = icmp slt i32 %16, 0
  br i1 %105, label %106, label %113

106:                                              ; preds = %104
  %107 = sub nsw i32 0, %17
  %108 = xor i32 %17, -1
  %109 = mul nsw i32 %108, %3
  %110 = sext i32 %109 to i64
  %111 = getelementptr inbounds i8, i8* %48, i64 %110
  %112 = sub nsw i32 0, %3
  br label %113

113:                                              ; preds = %106, %104
  %114 = phi i32 [ %112, %106 ], [ %3, %104 ]
  %115 = phi i32 [ %107, %106 ], [ %17, %104 ]
  %116 = phi i8* [ %111, %106 ], [ %48, %104 ]
  %117 = icmp eq i32 %114, %15
  %118 = select i1 %117, i32 0, i32 %114
  %119 = select i1 %117, i32 %115, i32 1
  %120 = mul nsw i32 %119, %15
  %121 = select i1 %117, i32 1, i32 %115
  %122 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %123 = icmp eq i32 %122, 0
  br i1 %123, label %124, label %126

124:                                              ; preds = %113
  %125 = tail call i32 @InitCpuFlags() #6
  br label %126

126:                                              ; preds = %124, %113
  %127 = phi i32 [ %125, %124 ], [ %122, %113 ]
  %128 = and i32 %127, 16
  %129 = icmp eq i32 %128, 0
  br i1 %129, label %134, label %130

130:                                              ; preds = %126
  %131 = and i32 %120, 3
  %132 = icmp eq i32 %131, 0
  %133 = select i1 %132, void (i8*, i8, i32)* @SetRow_X86, void (i8*, i8, i32)* @SetRow_Any_X86
  br label %134

134:                                              ; preds = %130, %126
  %135 = phi void (i8*, i8, i32)* [ %133, %130 ], [ @SetRow_C, %126 ]
  %136 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %137 = icmp eq i32 %136, 0
  br i1 %137, label %138, label %140

138:                                              ; preds = %134
  %139 = tail call i32 @InitCpuFlags() #6
  br label %140

140:                                              ; preds = %138, %134
  %141 = phi i32 [ %139, %138 ], [ %136, %134 ]
  %142 = and i32 %141, 2048
  %143 = icmp eq i32 %142, 0
  %144 = select i1 %143, void (i8*, i8, i32)* %135, void (i8*, i8, i32)* @SetRow_ERMS
  %145 = icmp sgt i32 %121, 0
  br i1 %145, label %146, label %155

146:                                              ; preds = %140
  %147 = trunc i32 %11 to i8
  %148 = sext i32 %118 to i64
  br label %149

149:                                              ; preds = %149, %146
  %150 = phi i32 [ 0, %146 ], [ %153, %149 ]
  %151 = phi i8* [ %116, %146 ], [ %152, %149 ]
  tail call void %144(i8* %151, i8 zeroext %147, i32 %120) #6, !callees !16
  %152 = getelementptr inbounds i8, i8* %151, i64 %148
  %153 = add nuw nsw i32 %150, 1
  %154 = icmp eq i32 %153, %121
  br i1 %154, label %155, label %149

155:                                              ; preds = %149, %140
  br i1 %105, label %156, label %163

156:                                              ; preds = %155
  %157 = sub nsw i32 0, %17
  %158 = xor i32 %17, -1
  %159 = mul nsw i32 %158, %5
  %160 = sext i32 %159 to i64
  %161 = getelementptr inbounds i8, i8* %44, i64 %160
  %162 = sub nsw i32 0, %5
  br label %163

163:                                              ; preds = %156, %155
  %164 = phi i32 [ %162, %156 ], [ %5, %155 ]
  %165 = phi i32 [ %157, %156 ], [ %17, %155 ]
  %166 = phi i8* [ %161, %156 ], [ %44, %155 ]
  %167 = icmp eq i32 %164, %15
  %168 = select i1 %167, i32 0, i32 %164
  %169 = select i1 %167, i32 %165, i32 1
  %170 = mul nsw i32 %169, %15
  %171 = select i1 %167, i32 1, i32 %165
  %172 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %173 = icmp eq i32 %172, 0
  br i1 %173, label %174, label %176

174:                                              ; preds = %163
  %175 = tail call i32 @InitCpuFlags() #6
  br label %176

176:                                              ; preds = %174, %163
  %177 = phi i32 [ %175, %174 ], [ %172, %163 ]
  %178 = and i32 %177, 16
  %179 = icmp eq i32 %178, 0
  br i1 %179, label %184, label %180

180:                                              ; preds = %176
  %181 = and i32 %170, 3
  %182 = icmp eq i32 %181, 0
  %183 = select i1 %182, void (i8*, i8, i32)* @SetRow_X86, void (i8*, i8, i32)* @SetRow_Any_X86
  br label %184

184:                                              ; preds = %180, %176
  %185 = phi void (i8*, i8, i32)* [ %183, %180 ], [ @SetRow_C, %176 ]
  %186 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %187 = icmp eq i32 %186, 0
  br i1 %187, label %188, label %190

188:                                              ; preds = %184
  %189 = tail call i32 @InitCpuFlags() #6
  br label %190

190:                                              ; preds = %188, %184
  %191 = phi i32 [ %189, %188 ], [ %186, %184 ]
  %192 = and i32 %191, 2048
  %193 = icmp eq i32 %192, 0
  %194 = select i1 %193, void (i8*, i8, i32)* %185, void (i8*, i8, i32)* @SetRow_ERMS
  %195 = icmp sgt i32 %171, 0
  br i1 %195, label %196, label %205

196:                                              ; preds = %190
  %197 = trunc i32 %12 to i8
  %198 = sext i32 %168 to i64
  br label %199

199:                                              ; preds = %199, %196
  %200 = phi i32 [ 0, %196 ], [ %203, %199 ]
  %201 = phi i8* [ %166, %196 ], [ %202, %199 ]
  tail call void %194(i8* %201, i8 zeroext %197, i32 %170) #6, !callees !16
  %202 = getelementptr inbounds i8, i8* %201, i64 %198
  %203 = add nuw nsw i32 %200, 1
  %204 = icmp eq i32 %203, %171
  br i1 %204, label %205, label %199

205:                                              ; preds = %199, %190, %13
  %206 = phi i32 [ -1, %13 ], [ 0, %190 ], [ 0, %199 ]
  ret i32 %206
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @ARGBRect(i8*, i32, i32, i32, i32, i32, i32) local_unnamed_addr #0 {
  %8 = icmp eq i8* %0, null
  %9 = icmp slt i32 %4, 1
  %10 = or i1 %8, %9
  %11 = icmp eq i32 %5, 0
  %12 = or i1 %10, %11
  %13 = or i32 %3, %2
  %14 = icmp slt i32 %13, 0
  %15 = or i1 %14, %12
  br i1 %15, label %58, label %16

16:                                               ; preds = %7
  %17 = icmp slt i32 %5, 0
  br i1 %17, label %18, label %25

18:                                               ; preds = %16
  %19 = sub nsw i32 0, %5
  %20 = xor i32 %5, -1
  %21 = mul nsw i32 %20, %1
  %22 = sext i32 %21 to i64
  %23 = getelementptr inbounds i8, i8* %0, i64 %22
  %24 = sub nsw i32 0, %1
  br label %25

25:                                               ; preds = %18, %16
  %26 = phi i32 [ %24, %18 ], [ %1, %16 ]
  %27 = phi i8* [ %23, %18 ], [ %0, %16 ]
  %28 = phi i32 [ %19, %18 ], [ %5, %16 ]
  %29 = mul nsw i32 %26, %3
  %30 = shl i32 %2, 2
  %31 = add nsw i32 %29, %30
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds i8, i8* %27, i64 %32
  %34 = shl nsw i32 %4, 2
  %35 = icmp eq i32 %26, %34
  %36 = select i1 %35, i32 0, i32 %26
  %37 = select i1 %35, i32 %28, i32 1
  %38 = mul nsw i32 %37, %4
  %39 = select i1 %35, i32 1, i32 %28
  %40 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %42, label %44

42:                                               ; preds = %25
  %43 = tail call i32 @InitCpuFlags() #6
  br label %44

44:                                               ; preds = %25, %42
  %45 = phi i32 [ %43, %42 ], [ %40, %25 ]
  %46 = and i32 %45, 16
  %47 = icmp eq i32 %46, 0
  %48 = select i1 %47, void (i8*, i32, i32)* @ARGBSetRow_C, void (i8*, i32, i32)* @ARGBSetRow_X86
  %49 = icmp sgt i32 %39, 0
  br i1 %49, label %50, label %58

50:                                               ; preds = %44
  %51 = sext i32 %36 to i64
  br label %52

52:                                               ; preds = %52, %50
  %53 = phi i32 [ 0, %50 ], [ %56, %52 ]
  %54 = phi i8* [ %33, %50 ], [ %55, %52 ]
  tail call void %48(i8* %54, i32 %6, i32 %38) #6, !callees !17
  %55 = getelementptr inbounds i8, i8* %54, i64 %51
  %56 = add nuw nsw i32 %53, 1
  %57 = icmp eq i32 %56, %39
  br i1 %57, label %58, label %52

58:                                               ; preds = %52, %44, %7
  %59 = phi i32 [ -1, %7 ], [ 0, %44 ], [ 0, %52 ]
  ret i32 %59
}

declare void @ARGBSetRow_C(i8*, i32, i32) local_unnamed_addr #2

declare void @ARGBSetRow_X86(i8*, i32, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @ARGBAttenuate(i8*, i32, i8*, i32, i32, i32) local_unnamed_addr #0 {
  %7 = icmp eq i8* %0, null
  %8 = icmp eq i8* %2, null
  %9 = or i1 %7, %8
  %10 = icmp slt i32 %4, 1
  %11 = or i1 %9, %10
  %12 = icmp eq i32 %5, 0
  %13 = or i1 %11, %12
  br i1 %13, label %76, label %14

14:                                               ; preds = %6
  %15 = icmp slt i32 %5, 0
  br i1 %15, label %16, label %23

16:                                               ; preds = %14
  %17 = sub nsw i32 0, %5
  %18 = xor i32 %5, -1
  %19 = mul nsw i32 %18, %1
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds i8, i8* %0, i64 %20
  %22 = sub nsw i32 0, %1
  br label %23

23:                                               ; preds = %16, %14
  %24 = phi i8* [ %21, %16 ], [ %0, %14 ]
  %25 = phi i32 [ %22, %16 ], [ %1, %14 ]
  %26 = phi i32 [ %17, %16 ], [ %5, %14 ]
  %27 = shl nsw i32 %4, 2
  %28 = icmp eq i32 %25, %27
  %29 = icmp eq i32 %27, %3
  %30 = and i1 %29, %28
  %31 = select i1 %30, i32 %26, i32 1
  %32 = mul nsw i32 %31, %4
  %33 = select i1 %30, i32 1, i32 %26
  %34 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %36, label %38

36:                                               ; preds = %23
  %37 = tail call i32 @InitCpuFlags() #6
  br label %38

38:                                               ; preds = %23, %36
  %39 = phi i32 [ %37, %36 ], [ %34, %23 ]
  %40 = and i32 %39, 64
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %46, label %42

42:                                               ; preds = %38
  %43 = and i32 %32, 3
  %44 = icmp eq i32 %43, 0
  %45 = select i1 %44, void (i8*, i8*, i32)* @ARGBAttenuateRow_SSSE3, void (i8*, i8*, i32)* @ARGBAttenuateRow_Any_SSSE3
  br label %46

46:                                               ; preds = %38, %42
  %47 = phi void (i8*, i8*, i32)* [ %45, %42 ], [ @ARGBAttenuateRow_C, %38 ]
  %48 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %50, label %52

50:                                               ; preds = %46
  %51 = tail call i32 @InitCpuFlags() #6
  br label %52

52:                                               ; preds = %46, %50
  %53 = phi i32 [ %51, %50 ], [ %48, %46 ]
  %54 = and i32 %53, 1024
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %60, label %56

56:                                               ; preds = %52
  %57 = and i32 %32, 7
  %58 = icmp eq i32 %57, 0
  %59 = select i1 %58, void (i8*, i8*, i32)* @ARGBAttenuateRow_AVX2, void (i8*, i8*, i32)* @ARGBAttenuateRow_Any_AVX2
  br label %60

60:                                               ; preds = %52, %56
  %61 = phi void (i8*, i8*, i32)* [ %59, %56 ], [ %47, %52 ]
  %62 = icmp sgt i32 %33, 0
  br i1 %62, label %63, label %76

63:                                               ; preds = %60
  %64 = sext i32 %25 to i64
  %65 = select i1 %30, i64 0, i64 %64
  %66 = sext i32 %3 to i64
  %67 = select i1 %30, i64 0, i64 %66
  br label %68

68:                                               ; preds = %68, %63
  %69 = phi i32 [ 0, %63 ], [ %74, %68 ]
  %70 = phi i8* [ %2, %63 ], [ %73, %68 ]
  %71 = phi i8* [ %24, %63 ], [ %72, %68 ]
  tail call void %61(i8* %71, i8* %70, i32 %32) #6
  %72 = getelementptr inbounds i8, i8* %71, i64 %65
  %73 = getelementptr inbounds i8, i8* %70, i64 %67
  %74 = add nuw nsw i32 %69, 1
  %75 = icmp eq i32 %74, %33
  br i1 %75, label %76, label %68

76:                                               ; preds = %68, %60, %6
  %77 = phi i32 [ -1, %6 ], [ 0, %60 ], [ 0, %68 ]
  ret i32 %77
}

declare void @ARGBAttenuateRow_C(i8*, i8*, i32) local_unnamed_addr #2

declare void @ARGBAttenuateRow_Any_SSSE3(i8*, i8*, i32) local_unnamed_addr #2

declare void @ARGBAttenuateRow_SSSE3(i8*, i8*, i32) local_unnamed_addr #2

declare void @ARGBAttenuateRow_Any_AVX2(i8*, i8*, i32) local_unnamed_addr #2

declare void @ARGBAttenuateRow_AVX2(i8*, i8*, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @ARGBUnattenuate(i8*, i32, i8*, i32, i32, i32) local_unnamed_addr #0 {
  %7 = icmp eq i8* %0, null
  %8 = icmp eq i8* %2, null
  %9 = or i1 %7, %8
  %10 = icmp slt i32 %4, 1
  %11 = or i1 %9, %10
  %12 = icmp eq i32 %5, 0
  %13 = or i1 %11, %12
  br i1 %13, label %76, label %14

14:                                               ; preds = %6
  %15 = icmp slt i32 %5, 0
  br i1 %15, label %16, label %23

16:                                               ; preds = %14
  %17 = sub nsw i32 0, %5
  %18 = xor i32 %5, -1
  %19 = mul nsw i32 %18, %1
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds i8, i8* %0, i64 %20
  %22 = sub nsw i32 0, %1
  br label %23

23:                                               ; preds = %16, %14
  %24 = phi i8* [ %21, %16 ], [ %0, %14 ]
  %25 = phi i32 [ %22, %16 ], [ %1, %14 ]
  %26 = phi i32 [ %17, %16 ], [ %5, %14 ]
  %27 = shl nsw i32 %4, 2
  %28 = icmp eq i32 %25, %27
  %29 = icmp eq i32 %27, %3
  %30 = and i1 %29, %28
  %31 = select i1 %30, i32 %26, i32 1
  %32 = mul nsw i32 %31, %4
  %33 = select i1 %30, i32 1, i32 %26
  %34 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %36, label %38

36:                                               ; preds = %23
  %37 = tail call i32 @InitCpuFlags() #6
  br label %38

38:                                               ; preds = %23, %36
  %39 = phi i32 [ %37, %36 ], [ %34, %23 ]
  %40 = and i32 %39, 32
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %46, label %42

42:                                               ; preds = %38
  %43 = and i32 %32, 3
  %44 = icmp eq i32 %43, 0
  %45 = select i1 %44, void (i8*, i8*, i32)* @ARGBUnattenuateRow_SSE2, void (i8*, i8*, i32)* @ARGBUnattenuateRow_Any_SSE2
  br label %46

46:                                               ; preds = %38, %42
  %47 = phi void (i8*, i8*, i32)* [ %45, %42 ], [ @ARGBUnattenuateRow_C, %38 ]
  %48 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %50, label %52

50:                                               ; preds = %46
  %51 = tail call i32 @InitCpuFlags() #6
  br label %52

52:                                               ; preds = %46, %50
  %53 = phi i32 [ %51, %50 ], [ %48, %46 ]
  %54 = and i32 %53, 1024
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %60, label %56

56:                                               ; preds = %52
  %57 = and i32 %32, 7
  %58 = icmp eq i32 %57, 0
  %59 = select i1 %58, void (i8*, i8*, i32)* @ARGBUnattenuateRow_AVX2, void (i8*, i8*, i32)* @ARGBUnattenuateRow_Any_AVX2
  br label %60

60:                                               ; preds = %52, %56
  %61 = phi void (i8*, i8*, i32)* [ %59, %56 ], [ %47, %52 ]
  %62 = icmp sgt i32 %33, 0
  br i1 %62, label %63, label %76

63:                                               ; preds = %60
  %64 = sext i32 %25 to i64
  %65 = select i1 %30, i64 0, i64 %64
  %66 = sext i32 %3 to i64
  %67 = select i1 %30, i64 0, i64 %66
  br label %68

68:                                               ; preds = %68, %63
  %69 = phi i32 [ 0, %63 ], [ %74, %68 ]
  %70 = phi i8* [ %2, %63 ], [ %73, %68 ]
  %71 = phi i8* [ %24, %63 ], [ %72, %68 ]
  tail call void %61(i8* %71, i8* %70, i32 %32) #6
  %72 = getelementptr inbounds i8, i8* %71, i64 %65
  %73 = getelementptr inbounds i8, i8* %70, i64 %67
  %74 = add nuw nsw i32 %69, 1
  %75 = icmp eq i32 %74, %33
  br i1 %75, label %76, label %68

76:                                               ; preds = %68, %60, %6
  %77 = phi i32 [ -1, %6 ], [ 0, %60 ], [ 0, %68 ]
  ret i32 %77
}

declare void @ARGBUnattenuateRow_C(i8*, i8*, i32) local_unnamed_addr #2

declare void @ARGBUnattenuateRow_Any_SSE2(i8*, i8*, i32) local_unnamed_addr #2

declare void @ARGBUnattenuateRow_SSE2(i8*, i8*, i32) local_unnamed_addr #2

declare void @ARGBUnattenuateRow_Any_AVX2(i8*, i8*, i32) local_unnamed_addr #2

declare void @ARGBUnattenuateRow_AVX2(i8*, i8*, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @ARGBGrayTo(i8*, i32, i8*, i32, i32, i32) local_unnamed_addr #0 {
  %7 = icmp eq i8* %0, null
  %8 = icmp eq i8* %2, null
  %9 = or i1 %7, %8
  %10 = icmp slt i32 %4, 1
  %11 = or i1 %9, %10
  %12 = icmp eq i32 %5, 0
  %13 = or i1 %11, %12
  br i1 %13, label %60, label %14

14:                                               ; preds = %6
  %15 = icmp slt i32 %5, 0
  br i1 %15, label %16, label %23

16:                                               ; preds = %14
  %17 = sub nsw i32 0, %5
  %18 = xor i32 %5, -1
  %19 = mul nsw i32 %18, %1
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds i8, i8* %0, i64 %20
  %22 = sub nsw i32 0, %1
  br label %23

23:                                               ; preds = %16, %14
  %24 = phi i8* [ %21, %16 ], [ %0, %14 ]
  %25 = phi i32 [ %22, %16 ], [ %1, %14 ]
  %26 = phi i32 [ %17, %16 ], [ %5, %14 ]
  %27 = shl nsw i32 %4, 2
  %28 = icmp eq i32 %25, %27
  %29 = icmp eq i32 %27, %3
  %30 = and i1 %29, %28
  %31 = select i1 %30, i32 %26, i32 1
  %32 = mul nsw i32 %31, %4
  %33 = select i1 %30, i32 1, i32 %26
  %34 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %36, label %38

36:                                               ; preds = %23
  %37 = tail call i32 @InitCpuFlags() #6
  br label %38

38:                                               ; preds = %23, %36
  %39 = phi i32 [ %37, %36 ], [ %34, %23 ]
  %40 = and i32 %39, 64
  %41 = icmp ne i32 %40, 0
  %42 = and i32 %32, 7
  %43 = icmp eq i32 %42, 0
  %44 = and i1 %43, %41
  %45 = select i1 %44, void (i8*, i8*, i32)* @ARGBGrayRow_SSSE3, void (i8*, i8*, i32)* @ARGBGrayRow_C
  %46 = icmp sgt i32 %33, 0
  br i1 %46, label %47, label %60

47:                                               ; preds = %38
  %48 = sext i32 %25 to i64
  %49 = select i1 %30, i64 0, i64 %48
  %50 = sext i32 %3 to i64
  %51 = select i1 %30, i64 0, i64 %50
  br label %52

52:                                               ; preds = %52, %47
  %53 = phi i32 [ 0, %47 ], [ %58, %52 ]
  %54 = phi i8* [ %2, %47 ], [ %57, %52 ]
  %55 = phi i8* [ %24, %47 ], [ %56, %52 ]
  tail call void %45(i8* %55, i8* %54, i32 %32) #6, !callees !18
  %56 = getelementptr inbounds i8, i8* %55, i64 %49
  %57 = getelementptr inbounds i8, i8* %54, i64 %51
  %58 = add nuw nsw i32 %53, 1
  %59 = icmp eq i32 %58, %33
  br i1 %59, label %60, label %52

60:                                               ; preds = %52, %38, %6
  %61 = phi i32 [ -1, %6 ], [ 0, %38 ], [ 0, %52 ]
  ret i32 %61
}

declare void @ARGBGrayRow_C(i8*, i8*, i32) local_unnamed_addr #2

declare void @ARGBGrayRow_SSSE3(i8*, i8*, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @ARGBGray(i8*, i32, i32, i32, i32, i32) local_unnamed_addr #0 {
  %7 = mul nsw i32 %3, %1
  %8 = sext i32 %7 to i64
  %9 = getelementptr inbounds i8, i8* %0, i64 %8
  %10 = shl nsw i32 %2, 2
  %11 = sext i32 %10 to i64
  %12 = getelementptr inbounds i8, i8* %9, i64 %11
  %13 = icmp eq i8* %0, null
  %14 = icmp slt i32 %4, 1
  %15 = or i1 %13, %14
  %16 = icmp slt i32 %5, 1
  %17 = or i1 %15, %16
  %18 = or i32 %3, %2
  %19 = icmp slt i32 %18, 0
  %20 = or i1 %19, %17
  br i1 %20, label %47, label %21

21:                                               ; preds = %6
  %22 = shl nsw i32 %4, 2
  %23 = icmp eq i32 %22, %1
  %24 = select i1 %23, i32 0, i32 %1
  %25 = select i1 %23, i32 %5, i32 1
  %26 = mul nsw i32 %25, %4
  %27 = select i1 %23, i32 1, i32 %5
  %28 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %30, label %32

30:                                               ; preds = %21
  %31 = tail call i32 @InitCpuFlags() #6
  br label %32

32:                                               ; preds = %30, %21
  %33 = phi i32 [ %31, %30 ], [ %28, %21 ]
  %34 = and i32 %33, 64
  %35 = icmp ne i32 %34, 0
  %36 = and i32 %26, 7
  %37 = icmp eq i32 %36, 0
  %38 = and i1 %37, %35
  %39 = select i1 %38, void (i8*, i8*, i32)* @ARGBGrayRow_SSSE3, void (i8*, i8*, i32)* @ARGBGrayRow_C
  %40 = sext i32 %24 to i64
  br label %41

41:                                               ; preds = %41, %32
  %42 = phi i8* [ %12, %32 ], [ %44, %41 ]
  %43 = phi i32 [ 0, %32 ], [ %45, %41 ]
  tail call void %39(i8* %42, i8* %42, i32 %26) #6, !callees !18
  %44 = getelementptr inbounds i8, i8* %42, i64 %40
  %45 = add nuw nsw i32 %43, 1
  %46 = icmp eq i32 %45, %27
  br i1 %46, label %47, label %41

47:                                               ; preds = %41, %6
  %48 = phi i32 [ -1, %6 ], [ 0, %41 ]
  ret i32 %48
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @ARGBSepia(i8*, i32, i32, i32, i32, i32) local_unnamed_addr #0 {
  %7 = mul nsw i32 %3, %1
  %8 = sext i32 %7 to i64
  %9 = getelementptr inbounds i8, i8* %0, i64 %8
  %10 = shl nsw i32 %2, 2
  %11 = sext i32 %10 to i64
  %12 = getelementptr inbounds i8, i8* %9, i64 %11
  %13 = icmp eq i8* %0, null
  %14 = icmp slt i32 %4, 1
  %15 = or i1 %13, %14
  %16 = icmp slt i32 %5, 1
  %17 = or i1 %15, %16
  %18 = or i32 %3, %2
  %19 = icmp slt i32 %18, 0
  %20 = or i1 %19, %17
  br i1 %20, label %47, label %21

21:                                               ; preds = %6
  %22 = shl nsw i32 %4, 2
  %23 = icmp eq i32 %22, %1
  %24 = select i1 %23, i32 0, i32 %1
  %25 = select i1 %23, i32 %5, i32 1
  %26 = mul nsw i32 %25, %4
  %27 = select i1 %23, i32 1, i32 %5
  %28 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %30, label %32

30:                                               ; preds = %21
  %31 = tail call i32 @InitCpuFlags() #6
  br label %32

32:                                               ; preds = %30, %21
  %33 = phi i32 [ %31, %30 ], [ %28, %21 ]
  %34 = and i32 %33, 64
  %35 = icmp ne i32 %34, 0
  %36 = and i32 %26, 7
  %37 = icmp eq i32 %36, 0
  %38 = and i1 %37, %35
  %39 = select i1 %38, void (i8*, i32)* @ARGBSepiaRow_SSSE3, void (i8*, i32)* @ARGBSepiaRow_C
  %40 = sext i32 %24 to i64
  br label %41

41:                                               ; preds = %41, %32
  %42 = phi i8* [ %12, %32 ], [ %44, %41 ]
  %43 = phi i32 [ 0, %32 ], [ %45, %41 ]
  tail call void %39(i8* %42, i32 %26) #6, !callees !19
  %44 = getelementptr inbounds i8, i8* %42, i64 %40
  %45 = add nuw nsw i32 %43, 1
  %46 = icmp eq i32 %45, %27
  br i1 %46, label %47, label %41

47:                                               ; preds = %41, %6
  %48 = phi i32 [ -1, %6 ], [ 0, %41 ]
  ret i32 %48
}

declare void @ARGBSepiaRow_C(i8*, i32) local_unnamed_addr #2

declare void @ARGBSepiaRow_SSSE3(i8*, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @ARGBColorMatrix(i8*, i32, i8*, i32, i8*, i32, i32) local_unnamed_addr #0 {
  %8 = icmp ne i8* %0, null
  %9 = icmp ne i8* %2, null
  %10 = and i1 %8, %9
  %11 = icmp ne i8* %4, null
  %12 = and i1 %10, %11
  %13 = xor i1 %12, true
  %14 = icmp slt i32 %5, 1
  %15 = or i1 %14, %13
  %16 = icmp eq i32 %6, 0
  %17 = or i1 %15, %16
  br i1 %17, label %64, label %18

18:                                               ; preds = %7
  %19 = icmp slt i32 %6, 0
  br i1 %19, label %20, label %27

20:                                               ; preds = %18
  %21 = sub nsw i32 0, %6
  %22 = xor i32 %6, -1
  %23 = mul nsw i32 %22, %1
  %24 = sext i32 %23 to i64
  %25 = getelementptr inbounds i8, i8* %0, i64 %24
  %26 = sub nsw i32 0, %1
  br label %27

27:                                               ; preds = %20, %18
  %28 = phi i8* [ %25, %20 ], [ %0, %18 ]
  %29 = phi i32 [ %26, %20 ], [ %1, %18 ]
  %30 = phi i32 [ %21, %20 ], [ %6, %18 ]
  %31 = shl nsw i32 %5, 2
  %32 = icmp eq i32 %29, %31
  %33 = icmp eq i32 %31, %3
  %34 = and i1 %33, %32
  %35 = select i1 %34, i32 %30, i32 1
  %36 = mul nsw i32 %35, %5
  %37 = select i1 %34, i32 1, i32 %30
  %38 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %40, label %42

40:                                               ; preds = %27
  %41 = tail call i32 @InitCpuFlags() #6
  br label %42

42:                                               ; preds = %27, %40
  %43 = phi i32 [ %41, %40 ], [ %38, %27 ]
  %44 = and i32 %43, 64
  %45 = icmp ne i32 %44, 0
  %46 = and i32 %36, 7
  %47 = icmp eq i32 %46, 0
  %48 = and i1 %47, %45
  %49 = select i1 %48, void (i8*, i8*, i8*, i32)* @ARGBColorMatrixRow_SSSE3, void (i8*, i8*, i8*, i32)* @ARGBColorMatrixRow_C
  %50 = icmp sgt i32 %37, 0
  br i1 %50, label %51, label %64

51:                                               ; preds = %42
  %52 = sext i32 %29 to i64
  %53 = select i1 %34, i64 0, i64 %52
  %54 = sext i32 %3 to i64
  %55 = select i1 %34, i64 0, i64 %54
  br label %56

56:                                               ; preds = %56, %51
  %57 = phi i32 [ 0, %51 ], [ %62, %56 ]
  %58 = phi i8* [ %2, %51 ], [ %61, %56 ]
  %59 = phi i8* [ %28, %51 ], [ %60, %56 ]
  tail call void %49(i8* %59, i8* %58, i8* %4, i32 %36) #6, !callees !20
  %60 = getelementptr inbounds i8, i8* %59, i64 %53
  %61 = getelementptr inbounds i8, i8* %58, i64 %55
  %62 = add nuw nsw i32 %57, 1
  %63 = icmp eq i32 %62, %37
  br i1 %63, label %64, label %56

64:                                               ; preds = %56, %42, %7
  %65 = phi i32 [ -1, %7 ], [ 0, %42 ], [ 0, %56 ]
  ret i32 %65
}

declare void @ARGBColorMatrixRow_C(i8*, i8*, i8*, i32) local_unnamed_addr #2

declare void @ARGBColorMatrixRow_SSSE3(i8*, i8*, i8*, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @RGBColorMatrix(i8*, i32, i8* readonly, i32, i32, i32, i32) local_unnamed_addr #0 {
  %8 = alloca [16 x i8], align 32
  %9 = getelementptr inbounds [16 x i8], [16 x i8]* %8, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %9) #6
  %10 = mul nsw i32 %4, %1
  %11 = sext i32 %10 to i64
  %12 = getelementptr inbounds i8, i8* %0, i64 %11
  %13 = shl nsw i32 %3, 2
  %14 = sext i32 %13 to i64
  %15 = getelementptr inbounds i8, i8* %12, i64 %14
  %16 = icmp eq i8* %0, null
  %17 = icmp eq i8* %2, null
  %18 = or i1 %16, %17
  %19 = icmp slt i32 %5, 1
  %20 = or i1 %18, %19
  %21 = icmp slt i32 %6, 1
  %22 = or i1 %20, %21
  %23 = or i32 %4, %3
  %24 = icmp slt i32 %23, 0
  %25 = or i1 %24, %22
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %9, i8 -86, i64 16, i1 false)
  br i1 %25, label %106, label %26

26:                                               ; preds = %7
  %27 = getelementptr inbounds [16 x i8], [16 x i8]* %8, i64 0, i64 15
  %28 = getelementptr inbounds [16 x i8], [16 x i8]* %8, i64 0, i64 14
  %29 = getelementptr inbounds [16 x i8], [16 x i8]* %8, i64 0, i64 13
  %30 = getelementptr inbounds [16 x i8], [16 x i8]* %8, i64 0, i64 12
  %31 = getelementptr inbounds [16 x i8], [16 x i8]* %8, i64 0, i64 11
  %32 = getelementptr inbounds [16 x i8], [16 x i8]* %8, i64 0, i64 10
  %33 = getelementptr inbounds [16 x i8], [16 x i8]* %8, i64 0, i64 9
  %34 = getelementptr inbounds [16 x i8], [16 x i8]* %8, i64 0, i64 8
  %35 = getelementptr inbounds [16 x i8], [16 x i8]* %8, i64 0, i64 7
  %36 = getelementptr inbounds [16 x i8], [16 x i8]* %8, i64 0, i64 6
  %37 = getelementptr inbounds [16 x i8], [16 x i8]* %8, i64 0, i64 5
  %38 = getelementptr inbounds [16 x i8], [16 x i8]* %8, i64 0, i64 4
  %39 = getelementptr inbounds [16 x i8], [16 x i8]* %8, i64 0, i64 3
  %40 = getelementptr inbounds [16 x i8], [16 x i8]* %8, i64 0, i64 2
  %41 = getelementptr inbounds [16 x i8], [16 x i8]* %8, i64 0, i64 1
  %42 = load i8, i8* %2, align 1
  %43 = sdiv i8 %42, 2
  store i8 %43, i8* %9, align 32
  %44 = getelementptr inbounds i8, i8* %2, i64 1
  %45 = load i8, i8* %44, align 1
  %46 = sdiv i8 %45, 2
  store i8 %46, i8* %41, align 1
  %47 = getelementptr inbounds i8, i8* %2, i64 2
  %48 = load i8, i8* %47, align 1
  %49 = sdiv i8 %48, 2
  store i8 %49, i8* %40, align 2
  %50 = getelementptr inbounds i8, i8* %2, i64 3
  %51 = load i8, i8* %50, align 1
  %52 = sdiv i8 %51, 2
  store i8 %52, i8* %39, align 1
  %53 = getelementptr inbounds i8, i8* %2, i64 4
  %54 = load i8, i8* %53, align 1
  %55 = sdiv i8 %54, 2
  store i8 %55, i8* %38, align 4
  %56 = getelementptr inbounds i8, i8* %2, i64 5
  %57 = load i8, i8* %56, align 1
  %58 = sdiv i8 %57, 2
  store i8 %58, i8* %37, align 1
  %59 = getelementptr inbounds i8, i8* %2, i64 6
  %60 = load i8, i8* %59, align 1
  %61 = sdiv i8 %60, 2
  store i8 %61, i8* %36, align 2
  %62 = getelementptr inbounds i8, i8* %2, i64 7
  %63 = load i8, i8* %62, align 1
  %64 = sdiv i8 %63, 2
  store i8 %64, i8* %35, align 1
  %65 = getelementptr inbounds i8, i8* %2, i64 8
  %66 = load i8, i8* %65, align 1
  %67 = sdiv i8 %66, 2
  store i8 %67, i8* %34, align 8
  %68 = getelementptr inbounds i8, i8* %2, i64 9
  %69 = load i8, i8* %68, align 1
  %70 = sdiv i8 %69, 2
  store i8 %70, i8* %33, align 1
  %71 = getelementptr inbounds i8, i8* %2, i64 10
  %72 = load i8, i8* %71, align 1
  %73 = sdiv i8 %72, 2
  store i8 %73, i8* %32, align 2
  %74 = getelementptr inbounds i8, i8* %2, i64 11
  %75 = load i8, i8* %74, align 1
  %76 = sdiv i8 %75, 2
  store i8 %76, i8* %31, align 1
  store i8 0, i8* %30, align 4
  store i8 0, i8* %29, align 1
  store i8 0, i8* %28, align 2
  store i8 64, i8* %27, align 1
  %77 = icmp eq i8* %15, null
  br i1 %77, label %106, label %78

78:                                               ; preds = %26
  %79 = shl nsw i32 %5, 2
  %80 = icmp eq i32 %79, %1
  %81 = select i1 %80, i32 %6, i32 1
  %82 = mul nsw i32 %81, %5
  %83 = select i1 %80, i32 1, i32 %6
  %84 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %85 = icmp eq i32 %84, 0
  br i1 %85, label %86, label %88

86:                                               ; preds = %78
  %87 = tail call i32 @InitCpuFlags() #6
  br label %88

88:                                               ; preds = %78, %86
  %89 = phi i32 [ %87, %86 ], [ %84, %78 ]
  %90 = and i32 %89, 64
  %91 = icmp ne i32 %90, 0
  %92 = and i32 %82, 7
  %93 = icmp eq i32 %92, 0
  %94 = and i1 %93, %91
  %95 = select i1 %94, void (i8*, i8*, i8*, i32)* @ARGBColorMatrixRow_SSSE3, void (i8*, i8*, i8*, i32)* @ARGBColorMatrixRow_C
  %96 = select i1 %80, i32 0, i32 %1
  %97 = sext i32 %96 to i64
  br label %98

98:                                               ; preds = %98, %88
  %99 = phi i32 [ 0, %88 ], [ %104, %98 ]
  %100 = phi i8* [ %15, %88 ], [ %103, %98 ]
  %101 = phi i8* [ %15, %88 ], [ %102, %98 ]
  call void %95(i8* %101, i8* %100, i8* nonnull %9, i32 %82) #6, !callees !20
  %102 = getelementptr inbounds i8, i8* %101, i64 %97
  %103 = getelementptr inbounds i8, i8* %100, i64 %97
  %104 = add nuw nsw i32 %99, 1
  %105 = icmp eq i32 %104, %83
  br i1 %105, label %106, label %98

106:                                              ; preds = %98, %26, %7
  %107 = phi i32 [ -1, %7 ], [ -1, %26 ], [ 0, %98 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %9) #6
  ret i32 %107
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @ARGBColorTable(i8*, i32, i8*, i32, i32, i32, i32) local_unnamed_addr #0 {
  %8 = mul nsw i32 %4, %1
  %9 = sext i32 %8 to i64
  %10 = getelementptr inbounds i8, i8* %0, i64 %9
  %11 = shl nsw i32 %3, 2
  %12 = sext i32 %11 to i64
  %13 = getelementptr inbounds i8, i8* %10, i64 %12
  %14 = icmp eq i8* %0, null
  %15 = icmp eq i8* %2, null
  %16 = or i1 %14, %15
  %17 = icmp slt i32 %5, 1
  %18 = or i1 %16, %17
  %19 = icmp slt i32 %6, 1
  %20 = or i1 %18, %19
  %21 = or i32 %4, %3
  %22 = icmp slt i32 %21, 0
  %23 = or i1 %22, %20
  br i1 %23, label %47, label %24

24:                                               ; preds = %7
  %25 = shl nsw i32 %5, 2
  %26 = icmp eq i32 %25, %1
  %27 = select i1 %26, i32 0, i32 %1
  %28 = select i1 %26, i32 %6, i32 1
  %29 = mul nsw i32 %28, %5
  %30 = select i1 %26, i32 1, i32 %6
  %31 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %33, label %35

33:                                               ; preds = %24
  %34 = tail call i32 @InitCpuFlags() #6
  br label %35

35:                                               ; preds = %33, %24
  %36 = phi i32 [ %34, %33 ], [ %31, %24 ]
  %37 = and i32 %36, 16
  %38 = icmp eq i32 %37, 0
  %39 = select i1 %38, void (i8*, i8*, i32)* @ARGBColorTableRow_C, void (i8*, i8*, i32)* @ARGBColorTableRow_X86
  %40 = sext i32 %27 to i64
  br label %41

41:                                               ; preds = %41, %35
  %42 = phi i8* [ %13, %35 ], [ %44, %41 ]
  %43 = phi i32 [ 0, %35 ], [ %45, %41 ]
  tail call void %39(i8* %42, i8* %2, i32 %29) #6, !callees !21
  %44 = getelementptr inbounds i8, i8* %42, i64 %40
  %45 = add nuw nsw i32 %43, 1
  %46 = icmp eq i32 %45, %30
  br i1 %46, label %47, label %41

47:                                               ; preds = %41, %7
  %48 = phi i32 [ -1, %7 ], [ 0, %41 ]
  ret i32 %48
}

declare void @ARGBColorTableRow_C(i8*, i8*, i32) local_unnamed_addr #2

declare void @ARGBColorTableRow_X86(i8*, i8*, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @RGBColorTable(i8*, i32, i8*, i32, i32, i32, i32) local_unnamed_addr #0 {
  %8 = mul nsw i32 %4, %1
  %9 = sext i32 %8 to i64
  %10 = getelementptr inbounds i8, i8* %0, i64 %9
  %11 = shl nsw i32 %3, 2
  %12 = sext i32 %11 to i64
  %13 = getelementptr inbounds i8, i8* %10, i64 %12
  %14 = icmp eq i8* %0, null
  %15 = icmp eq i8* %2, null
  %16 = or i1 %14, %15
  %17 = icmp slt i32 %5, 1
  %18 = or i1 %16, %17
  %19 = icmp slt i32 %6, 1
  %20 = or i1 %18, %19
  %21 = or i32 %4, %3
  %22 = icmp slt i32 %21, 0
  %23 = or i1 %22, %20
  br i1 %23, label %47, label %24

24:                                               ; preds = %7
  %25 = shl nsw i32 %5, 2
  %26 = icmp eq i32 %25, %1
  %27 = select i1 %26, i32 0, i32 %1
  %28 = select i1 %26, i32 %6, i32 1
  %29 = mul nsw i32 %28, %5
  %30 = select i1 %26, i32 1, i32 %6
  %31 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %33, label %35

33:                                               ; preds = %24
  %34 = tail call i32 @InitCpuFlags() #6
  br label %35

35:                                               ; preds = %33, %24
  %36 = phi i32 [ %34, %33 ], [ %31, %24 ]
  %37 = and i32 %36, 16
  %38 = icmp eq i32 %37, 0
  %39 = select i1 %38, void (i8*, i8*, i32)* @RGBColorTableRow_C, void (i8*, i8*, i32)* @RGBColorTableRow_X86
  %40 = sext i32 %27 to i64
  br label %41

41:                                               ; preds = %41, %35
  %42 = phi i8* [ %13, %35 ], [ %44, %41 ]
  %43 = phi i32 [ 0, %35 ], [ %45, %41 ]
  tail call void %39(i8* %42, i8* %2, i32 %29) #6, !callees !22
  %44 = getelementptr inbounds i8, i8* %42, i64 %40
  %45 = add nuw nsw i32 %43, 1
  %46 = icmp eq i32 %45, %30
  br i1 %46, label %47, label %41

47:                                               ; preds = %41, %7
  %48 = phi i32 [ -1, %7 ], [ 0, %41 ]
  ret i32 %48
}

declare void @RGBColorTableRow_C(i8*, i8*, i32) local_unnamed_addr #2

declare void @RGBColorTableRow_X86(i8*, i8*, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @ARGBQuantize(i8*, i32, i32, i32, i32, i32, i32, i32, i32) local_unnamed_addr #0 {
  %10 = mul nsw i32 %6, %1
  %11 = sext i32 %10 to i64
  %12 = getelementptr inbounds i8, i8* %0, i64 %11
  %13 = shl nsw i32 %5, 2
  %14 = sext i32 %13 to i64
  %15 = getelementptr inbounds i8, i8* %12, i64 %14
  %16 = icmp eq i8* %0, null
  %17 = icmp slt i32 %7, 1
  %18 = or i1 %16, %17
  %19 = icmp slt i32 %8, 1
  %20 = or i1 %18, %19
  %21 = or i32 %6, %5
  %22 = icmp slt i32 %21, 0
  %23 = or i1 %22, %20
  %24 = add i32 %3, -1
  %25 = icmp ugt i32 %24, 254
  %26 = or i1 %25, %23
  br i1 %26, label %53, label %27

27:                                               ; preds = %9
  %28 = shl nsw i32 %7, 2
  %29 = icmp eq i32 %28, %1
  %30 = select i1 %29, i32 0, i32 %1
  %31 = select i1 %29, i32 %8, i32 1
  %32 = mul nsw i32 %31, %7
  %33 = select i1 %29, i32 1, i32 %8
  %34 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %36, label %38

36:                                               ; preds = %27
  %37 = tail call i32 @InitCpuFlags() #6
  br label %38

38:                                               ; preds = %36, %27
  %39 = phi i32 [ %37, %36 ], [ %34, %27 ]
  %40 = and i32 %39, 32
  %41 = icmp ne i32 %40, 0
  %42 = and i32 %32, 3
  %43 = icmp eq i32 %42, 0
  %44 = and i1 %43, %41
  %45 = select i1 %44, void (i8*, i32, i32, i32, i32)* @ARGBQuantizeRow_SSE2, void (i8*, i32, i32, i32, i32)* @ARGBQuantizeRow_C
  %46 = sext i32 %30 to i64
  br label %47

47:                                               ; preds = %47, %38
  %48 = phi i8* [ %15, %38 ], [ %50, %47 ]
  %49 = phi i32 [ 0, %38 ], [ %51, %47 ]
  tail call void %45(i8* %48, i32 %2, i32 %3, i32 %4, i32 %32) #6, !callees !23
  %50 = getelementptr inbounds i8, i8* %48, i64 %46
  %51 = add nuw nsw i32 %49, 1
  %52 = icmp eq i32 %51, %33
  br i1 %52, label %53, label %47

53:                                               ; preds = %47, %9
  %54 = phi i32 [ -1, %9 ], [ 0, %47 ]
  ret i32 %54
}

declare void @ARGBQuantizeRow_C(i8*, i32, i32, i32, i32) local_unnamed_addr #2

declare void @ARGBQuantizeRow_SSE2(i8*, i32, i32, i32, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @ARGBComputeCumulativeSum(i8*, i32, i32*, i32, i32, i32) local_unnamed_addr #0 {
  %7 = icmp eq i32* %2, null
  %8 = icmp eq i8* %0, null
  %9 = or i1 %8, %7
  %10 = icmp slt i32 %4, 1
  %11 = or i1 %9, %10
  %12 = icmp slt i32 %5, 1
  %13 = or i1 %11, %12
  br i1 %13, label %38, label %14

14:                                               ; preds = %6
  %15 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %17, label %19

17:                                               ; preds = %14
  %18 = tail call i32 @InitCpuFlags() #6
  br label %19

19:                                               ; preds = %17, %14
  %20 = phi i32 [ %18, %17 ], [ %15, %14 ]
  %21 = and i32 %20, 32
  %22 = icmp eq i32 %21, 0
  %23 = select i1 %22, void (i8*, i32*, i32*, i32)* @ComputeCumulativeSumRow_C, void (i8*, i32*, i32*, i32)* @ComputeCumulativeSumRow_SSE2
  %24 = bitcast i32* %2 to i8*
  %25 = sext i32 %4 to i64
  %26 = shl nsw i64 %25, 4
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %24, i8 0, i64 %26, i1 false)
  %27 = sext i32 %3 to i64
  %28 = sext i32 %1 to i64
  br label %29

29:                                               ; preds = %29, %19
  %30 = phi i32* [ %2, %19 ], [ %33, %29 ]
  %31 = phi i32 [ 0, %19 ], [ %36, %29 ]
  %32 = phi i8* [ %0, %19 ], [ %35, %29 ]
  %33 = phi i32* [ %2, %19 ], [ %34, %29 ]
  tail call void %23(i8* %32, i32* %33, i32* %30, i32 %4) #6, !callees !24
  %34 = getelementptr inbounds i32, i32* %33, i64 %27
  %35 = getelementptr inbounds i8, i8* %32, i64 %28
  %36 = add nuw nsw i32 %31, 1
  %37 = icmp eq i32 %36, %5
  br i1 %37, label %38, label %29

38:                                               ; preds = %29, %6
  %39 = phi i32 [ -1, %6 ], [ 0, %29 ]
  ret i32 %39
}

declare void @ComputeCumulativeSumRow_C(i8*, i32*, i32*, i32) local_unnamed_addr #2

declare void @ComputeCumulativeSumRow_SSE2(i8*, i32*, i32*, i32) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @ARGBBlur(i8*, i32, i8*, i32, i32*, i32, i32, i32, i32) local_unnamed_addr #0 {
  %10 = icmp eq i8* %0, null
  %11 = icmp eq i8* %2, null
  %12 = or i1 %10, %11
  %13 = icmp slt i32 %6, 1
  %14 = or i1 %12, %13
  %15 = icmp eq i32 %7, 0
  %16 = or i1 %14, %15
  br i1 %16, label %172, label %17

17:                                               ; preds = %9
  %18 = icmp slt i32 %7, 0
  br i1 %18, label %19, label %26

19:                                               ; preds = %17
  %20 = sub nsw i32 0, %7
  %21 = xor i32 %7, -1
  %22 = mul nsw i32 %21, %1
  %23 = sext i32 %22 to i64
  %24 = getelementptr inbounds i8, i8* %0, i64 %23
  %25 = sub nsw i32 0, %1
  br label %26

26:                                               ; preds = %19, %17
  %27 = phi i32 [ %25, %19 ], [ %1, %17 ]
  %28 = phi i8* [ %24, %19 ], [ %0, %17 ]
  %29 = phi i32 [ %20, %19 ], [ %7, %17 ]
  %30 = icmp slt i32 %29, %8
  %31 = select i1 %30, i32 %29, i32 %8
  %32 = lshr i32 %6, 1
  %33 = icmp slt i32 %31, %32
  %34 = add nsw i32 %32, -1
  %35 = select i1 %33, i32 %31, i32 %34
  %36 = icmp slt i32 %35, 1
  br i1 %36, label %172, label %37

37:                                               ; preds = %26
  %38 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %40, label %42

40:                                               ; preds = %37
  %41 = tail call i32 @InitCpuFlags() #6
  br label %42

42:                                               ; preds = %37, %40
  %43 = phi i32 [ %41, %40 ], [ %38, %37 ]
  %44 = and i32 %43, 32
  %45 = icmp eq i32 %44, 0
  %46 = select i1 %45, void (i8*, i32*, i32*, i32)* @ComputeCumulativeSumRow_C, void (i8*, i32*, i32*, i32)* @ComputeCumulativeSumRow_SSE2
  %47 = select i1 %45, void (i32*, i32*, i32, i32, i8*, i32)* @CumulativeSumToAverageRow_C, void (i32*, i32*, i32, i32, i8*, i32)* @CumulativeSumToAverageRow_SSE2
  %48 = icmp eq i32* %4, null
  %49 = icmp eq i8* %28, null
  %50 = or i1 %48, %49
  br i1 %50, label %75, label %51

51:                                               ; preds = %42
  %52 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %53 = icmp eq i32 %52, 0
  br i1 %53, label %54, label %56

54:                                               ; preds = %51
  %55 = tail call i32 @InitCpuFlags() #6
  br label %56

56:                                               ; preds = %54, %51
  %57 = phi i32 [ %55, %54 ], [ %52, %51 ]
  %58 = and i32 %57, 32
  %59 = icmp eq i32 %58, 0
  %60 = select i1 %59, void (i8*, i32*, i32*, i32)* @ComputeCumulativeSumRow_C, void (i8*, i32*, i32*, i32)* @ComputeCumulativeSumRow_SSE2
  %61 = bitcast i32* %4 to i8*
  %62 = sext i32 %6 to i64
  %63 = shl nsw i64 %62, 4
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %61, i8 0, i64 %63, i1 false) #6
  %64 = sext i32 %5 to i64
  %65 = sext i32 %27 to i64
  br label %66

66:                                               ; preds = %66, %56
  %67 = phi i32* [ %4, %56 ], [ %70, %66 ]
  %68 = phi i32 [ 0, %56 ], [ %73, %66 ]
  %69 = phi i8* [ %28, %56 ], [ %72, %66 ]
  %70 = phi i32* [ %4, %56 ], [ %71, %66 ]
  tail call void %60(i8* %69, i32* %70, i32* %67, i32 %6) #6, !callees !24
  %71 = getelementptr inbounds i32, i32* %70, i64 %64
  %72 = getelementptr inbounds i8, i8* %69, i64 %65
  %73 = add nuw nsw i32 %68, 1
  %74 = icmp eq i32 %73, %35
  br i1 %74, label %75, label %66

75:                                               ; preds = %66, %42
  %76 = shl i32 %35, 1
  %77 = add nsw i32 %76, 2
  %78 = mul nsw i32 %77, %5
  %79 = sext i32 %78 to i64
  %80 = getelementptr inbounds i32, i32* %4, i64 %79
  %81 = icmp sgt i32 %29, 0
  br i1 %81, label %82, label %172

82:                                               ; preds = %75
  %83 = add nsw i32 %35, -1
  %84 = mul nsw i32 %83, %5
  %85 = sext i32 %84 to i64
  %86 = getelementptr inbounds i32, i32* %4, i64 %85
  %87 = mul nsw i32 %35, %27
  %88 = sext i32 %87 to i64
  %89 = getelementptr inbounds i8, i8* %28, i64 %88
  %90 = xor i32 %35, -1
  %91 = add nsw i32 %29, -1
  %92 = shl nsw i32 %35, 2
  %93 = sext i32 %5 to i64
  %94 = sext i32 %27 to i64
  %95 = icmp slt i32 %35, 0
  %96 = add i32 %90, %6
  %97 = sub i32 %6, %35
  %98 = icmp slt i32 %97, %6
  %99 = sext i32 %3 to i64
  %100 = add i32 %35, 1
  %101 = sext i32 %97 to i64
  %102 = zext i32 %100 to i64
  %103 = sext i32 %6 to i64
  br label %104

104:                                              ; preds = %168, %82
  %105 = phi i32* [ %4, %82 ], [ %122, %168 ]
  %106 = phi i32* [ %86, %82 ], [ %130, %168 ]
  %107 = phi i32 [ 0, %82 ], [ %170, %168 ]
  %108 = phi i8* [ %89, %82 ], [ %129, %168 ]
  %109 = phi i8* [ %2, %82 ], [ %169, %168 ]
  %110 = add i32 %107, %90
  %111 = icmp sgt i32 %110, 0
  %112 = select i1 %111, i32 %110, i32 0
  %113 = add nsw i32 %107, %35
  %114 = icmp slt i32 %113, %29
  %115 = select i1 %114, i32 %113, i32 %91
  %116 = sub nsw i32 %115, %112
  %117 = mul nsw i32 %116, %35
  %118 = icmp slt i32 %110, 1
  %119 = getelementptr inbounds i32, i32* %105, i64 %93
  %120 = icmp ult i32* %119, %80
  %121 = select i1 %120, i32* %119, i32* %4
  %122 = select i1 %118, i32* %105, i32* %121
  br i1 %114, label %123, label %128

123:                                              ; preds = %104
  %124 = getelementptr inbounds i32, i32* %106, i64 %93
  %125 = icmp ult i32* %124, %80
  %126 = select i1 %125, i32* %124, i32* %4
  tail call void %46(i8* %108, i32* %126, i32* %106, i32 %6) #6, !callees !24
  %127 = getelementptr inbounds i8, i8* %108, i64 %94
  br label %128

128:                                              ; preds = %123, %104
  %129 = phi i8* [ %127, %123 ], [ %108, %104 ]
  %130 = phi i32* [ %126, %123 ], [ %106, %104 ]
  br i1 %95, label %142, label %131

131:                                              ; preds = %128, %131
  %132 = phi i64 [ %140, %131 ], [ 0, %128 ]
  %133 = phi i32 [ %139, %131 ], [ %92, %128 ]
  %134 = phi i32 [ %138, %131 ], [ %117, %128 ]
  %135 = shl i64 %132, 2
  %136 = and i64 %135, 4294967292
  %137 = getelementptr inbounds i8, i8* %109, i64 %136
  tail call void %47(i32* %122, i32* %130, i32 %133, i32 %134, i8* %137, i32 1) #6, !callees !25
  %138 = add nsw i32 %134, %116
  %139 = add nsw i32 %133, 4
  %140 = add nuw nsw i64 %132, 1
  %141 = icmp eq i64 %140, %102
  br i1 %141, label %142, label %131

142:                                              ; preds = %131, %128
  %143 = phi i32 [ %117, %128 ], [ %138, %131 ]
  %144 = phi i32 [ %92, %128 ], [ %139, %131 ]
  %145 = phi i32 [ 0, %128 ], [ %100, %131 ]
  %146 = sub i32 %97, %145
  %147 = shl nsw i32 %145, 2
  %148 = zext i32 %147 to i64
  %149 = getelementptr inbounds i8, i8* %109, i64 %148
  tail call void %47(i32* %122, i32* %130, i32 %144, i32 %143, i8* %149, i32 %146) #6, !callees !25
  br i1 %98, label %150, label %168

150:                                              ; preds = %142, %150
  %151 = phi i64 [ %166, %150 ], [ %101, %142 ]
  %152 = phi i32 [ %162, %150 ], [ %96, %142 ]
  %153 = phi i32 [ %156, %150 ], [ %144, %142 ]
  %154 = phi i32 [ %155, %150 ], [ %143, %142 ]
  %155 = sub nsw i32 %154, %116
  %156 = add nsw i32 %153, -4
  %157 = sub i32 %152, %35
  %158 = shl nsw i32 %157, 2
  %159 = sext i32 %158 to i64
  %160 = getelementptr inbounds i32, i32* %122, i64 %159
  %161 = getelementptr inbounds i32, i32* %130, i64 %159
  %162 = trunc i64 %151 to i32
  %163 = shl nsw i32 %162, 2
  %164 = sext i32 %163 to i64
  %165 = getelementptr inbounds i8, i8* %109, i64 %164
  tail call void %47(i32* %160, i32* %161, i32 %156, i32 %155, i8* %165, i32 1) #6, !callees !25
  %166 = add nsw i64 %151, 1
  %167 = icmp eq i64 %166, %103
  br i1 %167, label %168, label %150

168:                                              ; preds = %150, %142
  %169 = getelementptr inbounds i8, i8* %109, i64 %99
  %170 = add nuw nsw i32 %107, 1
  %171 = icmp eq i32 %170, %29
  br i1 %171, label %172, label %104

172:                                              ; preds = %168, %75, %26, %9
  %173 = phi i32 [ -1, %9 ], [ -1, %26 ], [ 0, %75 ], [ 0, %168 ]
  ret i32 %173
}

declare void @CumulativeSumToAverageRow_C(i32*, i32*, i32, i32, i8*, i32) local_unnamed_addr #2

declare void @CumulativeSumToAverageRow_SSE2(i32*, i32*, i32, i32, i8*, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @ARGBShade(i8*, i32, i8*, i32, i32, i32, i32) local_unnamed_addr #0 {
  %8 = icmp eq i8* %0, null
  %9 = icmp eq i8* %2, null
  %10 = or i1 %8, %9
  %11 = icmp slt i32 %4, 1
  %12 = or i1 %10, %11
  %13 = icmp eq i32 %5, 0
  %14 = or i1 %12, %13
  %15 = icmp eq i32 %6, 0
  %16 = or i1 %14, %15
  br i1 %16, label %63, label %17

17:                                               ; preds = %7
  %18 = icmp slt i32 %5, 0
  br i1 %18, label %19, label %26

19:                                               ; preds = %17
  %20 = sub nsw i32 0, %5
  %21 = xor i32 %5, -1
  %22 = mul nsw i32 %21, %1
  %23 = sext i32 %22 to i64
  %24 = getelementptr inbounds i8, i8* %0, i64 %23
  %25 = sub nsw i32 0, %1
  br label %26

26:                                               ; preds = %19, %17
  %27 = phi i8* [ %24, %19 ], [ %0, %17 ]
  %28 = phi i32 [ %25, %19 ], [ %1, %17 ]
  %29 = phi i32 [ %20, %19 ], [ %5, %17 ]
  %30 = shl nsw i32 %4, 2
  %31 = icmp eq i32 %28, %30
  %32 = icmp eq i32 %30, %3
  %33 = and i1 %32, %31
  %34 = select i1 %33, i32 %29, i32 1
  %35 = mul nsw i32 %34, %4
  %36 = select i1 %33, i32 1, i32 %29
  %37 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %38 = icmp eq i32 %37, 0
  br i1 %38, label %39, label %41

39:                                               ; preds = %26
  %40 = tail call i32 @InitCpuFlags() #6
  br label %41

41:                                               ; preds = %26, %39
  %42 = phi i32 [ %40, %39 ], [ %37, %26 ]
  %43 = and i32 %42, 32
  %44 = icmp ne i32 %43, 0
  %45 = and i32 %35, 3
  %46 = icmp eq i32 %45, 0
  %47 = and i1 %46, %44
  %48 = select i1 %47, void (i8*, i8*, i32, i32)* @ARGBShadeRow_SSE2, void (i8*, i8*, i32, i32)* @ARGBShadeRow_C
  %49 = icmp sgt i32 %36, 0
  br i1 %49, label %50, label %63

50:                                               ; preds = %41
  %51 = sext i32 %28 to i64
  %52 = select i1 %33, i64 0, i64 %51
  %53 = sext i32 %3 to i64
  %54 = select i1 %33, i64 0, i64 %53
  br label %55

55:                                               ; preds = %55, %50
  %56 = phi i32 [ 0, %50 ], [ %61, %55 ]
  %57 = phi i8* [ %2, %50 ], [ %60, %55 ]
  %58 = phi i8* [ %27, %50 ], [ %59, %55 ]
  tail call void %48(i8* %58, i8* %57, i32 %35, i32 %6) #6, !callees !26
  %59 = getelementptr inbounds i8, i8* %58, i64 %52
  %60 = getelementptr inbounds i8, i8* %57, i64 %54
  %61 = add nuw nsw i32 %56, 1
  %62 = icmp eq i32 %61, %36
  br i1 %62, label %63, label %55

63:                                               ; preds = %55, %41, %7
  %64 = phi i32 [ -1, %7 ], [ 0, %41 ], [ 0, %55 ]
  ret i32 %64
}

declare void @ARGBShadeRow_C(i8*, i8*, i32, i32) local_unnamed_addr #2

declare void @ARGBShadeRow_SSE2(i8*, i8*, i32, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @InterpolatePlane(i8*, i32, i8*, i32, i8*, i32, i32, i32, i32) local_unnamed_addr #0 {
  %10 = icmp ne i8* %0, null
  %11 = icmp ne i8* %2, null
  %12 = and i1 %10, %11
  %13 = icmp ne i8* %4, null
  %14 = and i1 %12, %13
  %15 = xor i1 %14, true
  %16 = icmp slt i32 %6, 1
  %17 = or i1 %16, %15
  %18 = icmp eq i32 %7, 0
  %19 = or i1 %17, %18
  br i1 %19, label %90, label %20

20:                                               ; preds = %9
  %21 = icmp slt i32 %7, 0
  br i1 %21, label %22, label %29

22:                                               ; preds = %20
  %23 = sub nsw i32 0, %7
  %24 = xor i32 %7, -1
  %25 = mul nsw i32 %24, %5
  %26 = sext i32 %25 to i64
  %27 = getelementptr inbounds i8, i8* %4, i64 %26
  %28 = sub nsw i32 0, %5
  br label %29

29:                                               ; preds = %22, %20
  %30 = phi i8* [ %27, %22 ], [ %4, %20 ]
  %31 = phi i32 [ %28, %22 ], [ %5, %20 ]
  %32 = phi i32 [ %23, %22 ], [ %7, %20 ]
  %33 = icmp eq i32 %1, %6
  %34 = icmp eq i32 %3, %6
  %35 = and i1 %33, %34
  %36 = icmp eq i32 %31, %6
  %37 = and i1 %35, %36
  %38 = select i1 %37, i32 %32, i32 1
  %39 = mul nsw i32 %38, %6
  %40 = select i1 %37, i32 1, i32 %32
  %41 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %43, label %45

43:                                               ; preds = %29
  %44 = tail call i32 @InitCpuFlags() #6
  br label %45

45:                                               ; preds = %29, %43
  %46 = phi i32 [ %44, %43 ], [ %41, %29 ]
  %47 = and i32 %46, 64
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %53, label %49

49:                                               ; preds = %45
  %50 = and i32 %39, 15
  %51 = icmp eq i32 %50, 0
  %52 = select i1 %51, void (i8*, i8*, i64, i32, i32)* @InterpolateRow_SSSE3, void (i8*, i8*, i64, i32, i32)* @InterpolateRow_Any_SSSE3
  br label %53

53:                                               ; preds = %45, %49
  %54 = phi void (i8*, i8*, i64, i32, i32)* [ %52, %49 ], [ @InterpolateRow_C, %45 ]
  %55 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %56 = icmp eq i32 %55, 0
  br i1 %56, label %57, label %59

57:                                               ; preds = %53
  %58 = tail call i32 @InitCpuFlags() #6
  br label %59

59:                                               ; preds = %53, %57
  %60 = phi i32 [ %58, %57 ], [ %55, %53 ]
  %61 = and i32 %60, 1024
  %62 = icmp eq i32 %61, 0
  br i1 %62, label %67, label %63

63:                                               ; preds = %59
  %64 = and i32 %39, 31
  %65 = icmp eq i32 %64, 0
  %66 = select i1 %65, void (i8*, i8*, i64, i32, i32)* @InterpolateRow_AVX2, void (i8*, i8*, i64, i32, i32)* @InterpolateRow_Any_AVX2
  br label %67

67:                                               ; preds = %59, %63
  %68 = phi void (i8*, i8*, i64, i32, i32)* [ %66, %63 ], [ %54, %59 ]
  %69 = icmp sgt i32 %40, 0
  br i1 %69, label %70, label %90

70:                                               ; preds = %67
  %71 = sext i32 %1 to i64
  %72 = select i1 %37, i64 0, i64 %71
  %73 = sext i32 %3 to i64
  %74 = select i1 %37, i64 0, i64 %73
  %75 = sext i32 %31 to i64
  %76 = select i1 %37, i64 0, i64 %75
  br label %77

77:                                               ; preds = %77, %70
  %78 = phi i32 [ 0, %70 ], [ %88, %77 ]
  %79 = phi i8* [ %30, %70 ], [ %87, %77 ]
  %80 = phi i8* [ %2, %70 ], [ %86, %77 ]
  %81 = phi i8* [ %0, %70 ], [ %85, %77 ]
  %82 = ptrtoint i8* %80 to i64
  %83 = ptrtoint i8* %81 to i64
  %84 = sub i64 %82, %83
  tail call void %68(i8* %79, i8* %81, i64 %84, i32 %39, i32 %8) #6
  %85 = getelementptr inbounds i8, i8* %81, i64 %72
  %86 = getelementptr inbounds i8, i8* %80, i64 %74
  %87 = getelementptr inbounds i8, i8* %79, i64 %76
  %88 = add nuw nsw i32 %78, 1
  %89 = icmp eq i32 %88, %40
  br i1 %89, label %90, label %77

90:                                               ; preds = %77, %67, %9
  %91 = phi i32 [ -1, %9 ], [ 0, %67 ], [ 0, %77 ]
  ret i32 %91
}

declare void @InterpolateRow_C(i8*, i8*, i64, i32, i32) local_unnamed_addr #2

declare void @InterpolateRow_Any_SSSE3(i8*, i8*, i64, i32, i32) local_unnamed_addr #2

declare void @InterpolateRow_SSSE3(i8*, i8*, i64, i32, i32) local_unnamed_addr #2

declare void @InterpolateRow_Any_AVX2(i8*, i8*, i64, i32, i32) local_unnamed_addr #2

declare void @InterpolateRow_AVX2(i8*, i8*, i64, i32, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @ARGBInterpolate(i8*, i32, i8*, i32, i8*, i32, i32, i32, i32) local_unnamed_addr #0 {
  %10 = shl nsw i32 %6, 2
  %11 = tail call i32 @InterpolatePlane(i8* %0, i32 %1, i8* %2, i32 %3, i8* %4, i32 %5, i32 %10, i32 %7, i32 %8)
  ret i32 %11
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @I420Interpolate(i8*, i32, i8*, i32, i8*, i32, i8*, i32, i8*, i32, i8*, i32, i8*, i32, i8*, i32, i8*, i32, i32, i32, i32) local_unnamed_addr #0 {
  %22 = add nsw i32 %18, 1
  %23 = ashr i32 %22, 1
  %24 = add nsw i32 %19, 1
  %25 = ashr i32 %24, 1
  %26 = icmp ne i8* %0, null
  %27 = icmp ne i8* %2, null
  %28 = and i1 %26, %27
  %29 = icmp ne i8* %4, null
  %30 = and i1 %28, %29
  %31 = icmp ne i8* %6, null
  %32 = and i1 %30, %31
  %33 = icmp ne i8* %8, null
  %34 = and i1 %32, %33
  %35 = icmp ne i8* %10, null
  %36 = and i1 %34, %35
  %37 = icmp ne i8* %12, null
  %38 = and i1 %36, %37
  %39 = icmp ne i8* %14, null
  %40 = and i1 %38, %39
  %41 = icmp ne i8* %16, null
  %42 = and i1 %40, %41
  %43 = xor i1 %42, true
  %44 = icmp slt i32 %18, 1
  %45 = or i1 %44, %43
  %46 = icmp eq i32 %19, 0
  %47 = or i1 %45, %46
  br i1 %47, label %52, label %48

48:                                               ; preds = %21
  %49 = tail call i32 @InterpolatePlane(i8* %0, i32 %1, i8* %6, i32 %7, i8* %12, i32 %13, i32 %18, i32 %19, i32 %20)
  %50 = tail call i32 @InterpolatePlane(i8* %2, i32 %3, i8* %8, i32 %9, i8* %14, i32 %15, i32 %23, i32 %25, i32 %20)
  %51 = tail call i32 @InterpolatePlane(i8* %4, i32 %5, i8* %10, i32 %11, i8* %16, i32 %17, i32 %23, i32 %25, i32 %20)
  br label %52

52:                                               ; preds = %21, %48
  %53 = phi i32 [ 0, %48 ], [ -1, %21 ]
  ret i32 %53
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @ARGBShuffle(i8*, i32, i8*, i32, i8*, i32, i32) local_unnamed_addr #0 {
  %8 = icmp eq i8* %0, null
  %9 = icmp eq i8* %2, null
  %10 = or i1 %8, %9
  %11 = icmp slt i32 %5, 1
  %12 = or i1 %10, %11
  %13 = icmp eq i32 %6, 0
  %14 = or i1 %12, %13
  br i1 %14, label %77, label %15

15:                                               ; preds = %7
  %16 = icmp slt i32 %6, 0
  br i1 %16, label %17, label %24

17:                                               ; preds = %15
  %18 = sub nsw i32 0, %6
  %19 = xor i32 %6, -1
  %20 = mul nsw i32 %19, %1
  %21 = sext i32 %20 to i64
  %22 = getelementptr inbounds i8, i8* %0, i64 %21
  %23 = sub nsw i32 0, %1
  br label %24

24:                                               ; preds = %17, %15
  %25 = phi i8* [ %22, %17 ], [ %0, %15 ]
  %26 = phi i32 [ %23, %17 ], [ %1, %15 ]
  %27 = phi i32 [ %18, %17 ], [ %6, %15 ]
  %28 = shl nsw i32 %5, 2
  %29 = icmp eq i32 %26, %28
  %30 = icmp eq i32 %28, %3
  %31 = and i1 %30, %29
  %32 = select i1 %31, i32 %27, i32 1
  %33 = mul nsw i32 %32, %5
  %34 = select i1 %31, i32 1, i32 %27
  %35 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %37, label %39

37:                                               ; preds = %24
  %38 = tail call i32 @InitCpuFlags() #6
  br label %39

39:                                               ; preds = %24, %37
  %40 = phi i32 [ %38, %37 ], [ %35, %24 ]
  %41 = and i32 %40, 64
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %47, label %43

43:                                               ; preds = %39
  %44 = and i32 %33, 7
  %45 = icmp eq i32 %44, 0
  %46 = select i1 %45, void (i8*, i8*, i8*, i32)* @ARGBShuffleRow_SSSE3, void (i8*, i8*, i8*, i32)* @ARGBShuffleRow_Any_SSSE3
  br label %47

47:                                               ; preds = %39, %43
  %48 = phi void (i8*, i8*, i8*, i32)* [ %46, %43 ], [ @ARGBShuffleRow_C, %39 ]
  %49 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %51, label %53

51:                                               ; preds = %47
  %52 = tail call i32 @InitCpuFlags() #6
  br label %53

53:                                               ; preds = %47, %51
  %54 = phi i32 [ %52, %51 ], [ %49, %47 ]
  %55 = and i32 %54, 1024
  %56 = icmp eq i32 %55, 0
  br i1 %56, label %61, label %57

57:                                               ; preds = %53
  %58 = and i32 %33, 15
  %59 = icmp eq i32 %58, 0
  %60 = select i1 %59, void (i8*, i8*, i8*, i32)* @ARGBShuffleRow_AVX2, void (i8*, i8*, i8*, i32)* @ARGBShuffleRow_Any_AVX2
  br label %61

61:                                               ; preds = %53, %57
  %62 = phi void (i8*, i8*, i8*, i32)* [ %60, %57 ], [ %48, %53 ]
  %63 = icmp sgt i32 %34, 0
  br i1 %63, label %64, label %77

64:                                               ; preds = %61
  %65 = sext i32 %26 to i64
  %66 = select i1 %31, i64 0, i64 %65
  %67 = sext i32 %3 to i64
  %68 = select i1 %31, i64 0, i64 %67
  br label %69

69:                                               ; preds = %69, %64
  %70 = phi i32 [ 0, %64 ], [ %75, %69 ]
  %71 = phi i8* [ %2, %64 ], [ %74, %69 ]
  %72 = phi i8* [ %25, %64 ], [ %73, %69 ]
  tail call void %62(i8* %72, i8* %71, i8* %4, i32 %33) #6
  %73 = getelementptr inbounds i8, i8* %72, i64 %66
  %74 = getelementptr inbounds i8, i8* %71, i64 %68
  %75 = add nuw nsw i32 %70, 1
  %76 = icmp eq i32 %75, %34
  br i1 %76, label %77, label %69

77:                                               ; preds = %69, %61, %7
  %78 = phi i32 [ -1, %7 ], [ 0, %61 ], [ 0, %69 ]
  ret i32 %78
}

declare void @ARGBShuffleRow_C(i8*, i8*, i8*, i32) local_unnamed_addr #2

declare void @ARGBShuffleRow_Any_SSSE3(i8*, i8*, i8*, i32) local_unnamed_addr #2

declare void @ARGBShuffleRow_SSSE3(i8*, i8*, i8*, i32) local_unnamed_addr #2

declare void @ARGBShuffleRow_Any_AVX2(i8*, i8*, i8*, i32) local_unnamed_addr #2

declare void @ARGBShuffleRow_AVX2(i8*, i8*, i8*, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @AR64Shuffle(i16*, i32, i16*, i32, i8*, i32, i32) local_unnamed_addr #0 {
  %8 = icmp eq i16* %0, null
  %9 = icmp eq i16* %2, null
  %10 = or i1 %8, %9
  %11 = icmp slt i32 %5, 1
  %12 = or i1 %10, %11
  %13 = icmp eq i32 %6, 0
  %14 = or i1 %12, %13
  br i1 %14, label %80, label %15

15:                                               ; preds = %7
  %16 = icmp slt i32 %6, 0
  br i1 %16, label %17, label %24

17:                                               ; preds = %15
  %18 = sub nsw i32 0, %6
  %19 = xor i32 %6, -1
  %20 = mul nsw i32 %19, %1
  %21 = sext i32 %20 to i64
  %22 = getelementptr inbounds i16, i16* %0, i64 %21
  %23 = sub nsw i32 0, %1
  br label %24

24:                                               ; preds = %17, %15
  %25 = phi i16* [ %22, %17 ], [ %0, %15 ]
  %26 = phi i32 [ %23, %17 ], [ %1, %15 ]
  %27 = phi i32 [ %18, %17 ], [ %6, %15 ]
  %28 = shl nsw i32 %5, 2
  %29 = icmp eq i32 %26, %28
  %30 = icmp eq i32 %28, %3
  %31 = and i1 %30, %29
  %32 = select i1 %31, i32 %27, i32 1
  %33 = mul nsw i32 %32, %5
  %34 = select i1 %31, i32 1, i32 %27
  %35 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %37, label %39

37:                                               ; preds = %24
  %38 = tail call i32 @InitCpuFlags() #6
  br label %39

39:                                               ; preds = %24, %37
  %40 = phi i32 [ %38, %37 ], [ %35, %24 ]
  %41 = and i32 %40, 64
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %47, label %43

43:                                               ; preds = %39
  %44 = and i32 %33, 7
  %45 = icmp eq i32 %44, 0
  %46 = select i1 %45, void (i8*, i8*, i8*, i32)* @ARGBShuffleRow_SSSE3, void (i8*, i8*, i8*, i32)* @ARGBShuffleRow_Any_SSSE3
  br label %47

47:                                               ; preds = %39, %43
  %48 = phi void (i8*, i8*, i8*, i32)* [ %46, %43 ], [ @AR64ShuffleRow_C, %39 ]
  %49 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %51, label %53

51:                                               ; preds = %47
  %52 = tail call i32 @InitCpuFlags() #6
  br label %53

53:                                               ; preds = %47, %51
  %54 = phi i32 [ %52, %51 ], [ %49, %47 ]
  %55 = and i32 %54, 1024
  %56 = icmp eq i32 %55, 0
  br i1 %56, label %61, label %57

57:                                               ; preds = %53
  %58 = and i32 %33, 15
  %59 = icmp eq i32 %58, 0
  %60 = select i1 %59, void (i8*, i8*, i8*, i32)* @ARGBShuffleRow_AVX2, void (i8*, i8*, i8*, i32)* @ARGBShuffleRow_Any_AVX2
  br label %61

61:                                               ; preds = %53, %57
  %62 = phi void (i8*, i8*, i8*, i32)* [ %60, %57 ], [ %48, %53 ]
  %63 = icmp sgt i32 %34, 0
  br i1 %63, label %64, label %80

64:                                               ; preds = %61
  %65 = shl nsw i32 %33, 1
  %66 = sext i32 %26 to i64
  %67 = select i1 %31, i64 0, i64 %66
  %68 = sext i32 %3 to i64
  %69 = select i1 %31, i64 0, i64 %68
  br label %70

70:                                               ; preds = %70, %64
  %71 = phi i32 [ 0, %64 ], [ %78, %70 ]
  %72 = phi i16* [ %2, %64 ], [ %77, %70 ]
  %73 = phi i16* [ %25, %64 ], [ %76, %70 ]
  %74 = bitcast i16* %73 to i8*
  %75 = bitcast i16* %72 to i8*
  tail call void %62(i8* %74, i8* %75, i8* %4, i32 %65) #6
  %76 = getelementptr inbounds i16, i16* %73, i64 %67
  %77 = getelementptr inbounds i16, i16* %72, i64 %69
  %78 = add nuw nsw i32 %71, 1
  %79 = icmp eq i32 %78, %34
  br i1 %79, label %80, label %70

80:                                               ; preds = %70, %61, %7
  %81 = phi i32 [ -1, %7 ], [ 0, %61 ], [ 0, %70 ]
  ret i32 %81
}

declare void @AR64ShuffleRow_C(i8*, i8*, i8*, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @GaussPlane_F32(float*, i32, float*, i32, i32, i32) local_unnamed_addr #0 {
  %7 = icmp eq float* %0, null
  %8 = icmp eq float* %2, null
  %9 = or i1 %7, %8
  %10 = icmp slt i32 %4, 1
  %11 = or i1 %9, %10
  %12 = icmp eq i32 %5, 0
  %13 = or i1 %11, %12
  br i1 %13, label %88, label %14

14:                                               ; preds = %6
  %15 = icmp slt i32 %5, 0
  br i1 %15, label %16, label %23

16:                                               ; preds = %14
  %17 = sub nsw i32 0, %5
  %18 = xor i32 %5, -1
  %19 = mul nsw i32 %18, %1
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds float, float* %0, i64 %20
  %22 = sub nsw i32 0, %1
  br label %23

23:                                               ; preds = %16, %14
  %24 = phi i32 [ %22, %16 ], [ %1, %14 ]
  %25 = phi float* [ %21, %16 ], [ %0, %14 ]
  %26 = phi i32 [ %17, %16 ], [ %5, %14 ]
  %27 = shl i32 %4, 2
  %28 = add i32 %27, 95
  %29 = sext i32 %28 to i64
  %30 = tail call noalias i8* @malloc(i64 %29) #6
  %31 = ptrtoint i8* %30 to i64
  %32 = add nsw i64 %31, 63
  %33 = and i64 %32, -64
  %34 = inttoptr i64 %33 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 64 %34, i8 0, i64 16, i1 false)
  %35 = add i32 %27, 16
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds i8, i8* %34, i64 %36
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %37, i8 0, i64 16, i1 false)
  %38 = getelementptr inbounds i8, i8* %34, i64 16
  %39 = bitcast i8* %38 to float*
  %40 = icmp sgt i32 %26, 1
  %41 = select i1 %40, i32 %24, i32 0
  %42 = sext i32 %41 to i64
  %43 = getelementptr inbounds float, float* %25, i64 %42
  %44 = icmp sgt i32 %26, 0
  br i1 %44, label %45, label %87

45:                                               ; preds = %23
  %46 = icmp sgt i32 %26, 2
  %47 = select i1 %46, i32 %24, i32 0
  %48 = sext i32 %47 to i64
  %49 = getelementptr inbounds float, float* %43, i64 %48
  %50 = bitcast i8* %38 to i32*
  %51 = getelementptr inbounds i8, i8* %34, i64 12
  %52 = bitcast i8* %51 to i32*
  %53 = getelementptr inbounds i8, i8* %34, i64 8
  %54 = bitcast i8* %53 to float*
  %55 = bitcast i8* %53 to i32*
  %56 = add nsw i32 %4, -1
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds float, float* %39, i64 %57
  %59 = bitcast float* %58 to i32*
  %60 = sext i32 %4 to i64
  %61 = getelementptr inbounds float, float* %39, i64 %60
  %62 = bitcast float* %61 to i32*
  %63 = add nuw nsw i32 %4, 1
  %64 = sext i32 %63 to i64
  %65 = getelementptr inbounds float, float* %39, i64 %64
  %66 = bitcast float* %65 to i32*
  %67 = add nsw i32 %26, -1
  %68 = sext i32 %24 to i64
  %69 = sext i32 %3 to i64
  br label %70

70:                                               ; preds = %70, %45
  %71 = phi float* [ %49, %45 ], [ %83, %70 ]
  %72 = phi float* [ %43, %45 ], [ %71, %70 ]
  %73 = phi float* [ %25, %45 ], [ %72, %70 ]
  %74 = phi float* [ %25, %45 ], [ %73, %70 ]
  %75 = phi float* [ %25, %45 ], [ %74, %70 ]
  %76 = phi i32 [ 0, %45 ], [ %85, %70 ]
  %77 = phi float* [ %2, %45 ], [ %84, %70 ]
  tail call void @GaussCol_F32_C(float* %75, float* %74, float* %73, float* %72, float* %71, float* %39, i32 %4) #6
  %78 = load i32, i32* %50, align 16
  store i32 %78, i32* %52, align 4
  store i32 %78, i32* %55, align 8
  %79 = load i32, i32* %59, align 4
  store i32 %79, i32* %62, align 4
  store i32 %79, i32* %66, align 4
  tail call void @GaussRow_F32_C(float* %54, float* %77, i32 %4) #6
  %80 = add nuw nsw i32 %76, 2
  %81 = icmp slt i32 %80, %67
  %82 = getelementptr inbounds float, float* %71, i64 %68
  %83 = select i1 %81, float* %82, float* %71
  %84 = getelementptr inbounds float, float* %77, i64 %69
  %85 = add nuw nsw i32 %76, 1
  %86 = icmp eq i32 %85, %26
  br i1 %86, label %87, label %70

87:                                               ; preds = %70, %23
  tail call void @free(i8* %30) #6
  br label %88

88:                                               ; preds = %6, %87
  %89 = phi i32 [ 0, %87 ], [ -1, %6 ]
  ret i32 %89
}

declare void @GaussCol_F32_C(float*, float*, float*, float*, float*, float*, i32) local_unnamed_addr #2

declare void @GaussRow_F32_C(float*, float*, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @ARGBSobel(i8*, i32, i8*, i32, i32, i32) local_unnamed_addr #0 {
  %7 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %9, label %11

9:                                                ; preds = %6
  %10 = tail call i32 @InitCpuFlags() #6
  br label %11

11:                                               ; preds = %6, %9
  %12 = phi i32 [ %10, %9 ], [ %7, %6 ]
  %13 = and i32 %12, 32
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %19, label %15

15:                                               ; preds = %11
  %16 = and i32 %4, 15
  %17 = icmp eq i32 %16, 0
  %18 = select i1 %17, void (i8*, i8*, i8*, i32)* @SobelRow_SSE2, void (i8*, i8*, i8*, i32)* @SobelRow_Any_SSE2
  br label %19

19:                                               ; preds = %11, %15
  %20 = phi void (i8*, i8*, i8*, i32)* [ %18, %15 ], [ @SobelRow_C, %11 ]
  %21 = tail call fastcc i32 @_ZN6libyuvL12ARGBSobelizeEPKhiPhiiiPFvS1_S1_S2_iE(i8* %0, i32 %1, i8* %2, i32 %3, i32 %4, i32 %5, void (i8*, i8*, i8*, i32)* %20)
  ret i32 %21
}

declare void @SobelRow_C(i8*, i8*, i8*, i32) #2

declare void @SobelRow_Any_SSE2(i8*, i8*, i8*, i32) #2

declare void @SobelRow_SSE2(i8*, i8*, i8*, i32) #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @_ZN6libyuvL12ARGBSobelizeEPKhiPhiiiPFvS1_S1_S2_iE(i8*, i32, i8*, i32, i32, i32, void (i8*, i8*, i8*, i32)* nocapture) unnamed_addr #0 {
  %8 = icmp eq i8* %0, null
  %9 = icmp eq i8* %2, null
  %10 = or i1 %8, %9
  %11 = icmp slt i32 %4, 1
  %12 = or i1 %10, %11
  %13 = icmp eq i32 %5, 0
  %14 = or i1 %12, %13
  br i1 %14, label %134, label %15

15:                                               ; preds = %7
  %16 = icmp slt i32 %5, 0
  br i1 %16, label %17, label %24

17:                                               ; preds = %15
  %18 = sub nsw i32 0, %5
  %19 = xor i32 %5, -1
  %20 = mul nsw i32 %19, %1
  %21 = sext i32 %20 to i64
  %22 = getelementptr inbounds i8, i8* %0, i64 %21
  %23 = sub nsw i32 0, %1
  br label %24

24:                                               ; preds = %17, %15
  %25 = phi i32 [ %18, %17 ], [ %5, %15 ]
  %26 = phi i32 [ %23, %17 ], [ %1, %15 ]
  %27 = phi i8* [ %22, %17 ], [ %0, %15 ]
  %28 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %30, label %32

30:                                               ; preds = %24
  %31 = tail call i32 @InitCpuFlags() #6
  br label %32

32:                                               ; preds = %24, %30
  %33 = phi i32 [ %31, %30 ], [ %28, %24 ]
  %34 = and i32 %33, 64
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %40, label %36

36:                                               ; preds = %32
  %37 = and i32 %4, 15
  %38 = icmp eq i32 %37, 0
  %39 = select i1 %38, void (i8*, i8*, i32)* @ARGBToYJRow_SSSE3, void (i8*, i8*, i32)* @ARGBToYJRow_Any_SSSE3
  br label %40

40:                                               ; preds = %32, %36
  %41 = phi void (i8*, i8*, i32)* [ %39, %36 ], [ @ARGBToYJRow_C, %32 ]
  %42 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %44, label %46

44:                                               ; preds = %40
  %45 = tail call i32 @InitCpuFlags() #6
  br label %46

46:                                               ; preds = %40, %44
  %47 = phi i32 [ %45, %44 ], [ %42, %40 ]
  %48 = and i32 %47, 1024
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %54, label %50

50:                                               ; preds = %46
  %51 = and i32 %4, 31
  %52 = icmp eq i32 %51, 0
  %53 = select i1 %52, void (i8*, i8*, i32)* @ARGBToYJRow_AVX2, void (i8*, i8*, i32)* @ARGBToYJRow_Any_AVX2
  br label %54

54:                                               ; preds = %46, %50
  %55 = phi void (i8*, i8*, i32)* [ %53, %50 ], [ %41, %46 ]
  %56 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %58, label %60

58:                                               ; preds = %54
  %59 = tail call i32 @InitCpuFlags() #6
  br label %60

60:                                               ; preds = %54, %58
  %61 = phi i32 [ %59, %58 ], [ %56, %54 ]
  %62 = and i32 %61, 32
  %63 = icmp eq i32 %62, 0
  %64 = select i1 %63, void (i8*, i8*, i8*, i32)* @SobelYRow_C, void (i8*, i8*, i8*, i32)* @SobelYRow_SSE2
  %65 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %66 = icmp eq i32 %65, 0
  br i1 %66, label %67, label %69

67:                                               ; preds = %60
  %68 = tail call i32 @InitCpuFlags() #6
  br label %69

69:                                               ; preds = %60, %67
  %70 = phi i32 [ %68, %67 ], [ %65, %60 ]
  %71 = and i32 %70, 32
  %72 = icmp eq i32 %71, 0
  %73 = select i1 %72, void (i8*, i8*, i8*, i8*, i32)* @SobelXRow_C, void (i8*, i8*, i8*, i8*, i32)* @SobelXRow_SSE2
  %74 = add nuw nsw i32 %4, 47
  %75 = and i32 %74, -32
  %76 = shl nsw i32 %75, 1
  %77 = mul nsw i32 %75, 3
  %78 = or i32 %77, 16
  %79 = add i32 %76, 79
  %80 = add i32 %79, %78
  %81 = sext i32 %80 to i64
  %82 = tail call noalias i8* @malloc(i64 %81) #6
  %83 = ptrtoint i8* %82 to i64
  %84 = add nsw i64 %83, 63
  %85 = and i64 %84, -64
  %86 = inttoptr i64 %85 to i8*
  %87 = sext i32 %75 to i64
  %88 = getelementptr inbounds i8, i8* %86, i64 %87
  %89 = sext i32 %76 to i64
  %90 = getelementptr inbounds i8, i8* %86, i64 %89
  %91 = getelementptr inbounds i8, i8* %90, i64 16
  %92 = getelementptr inbounds i8, i8* %91, i64 %87
  %93 = getelementptr inbounds i8, i8* %92, i64 %87
  tail call void %55(i8* %27, i8* %91, i32 %4) #6
  %94 = load i8, i8* %91, align 16
  %95 = getelementptr inbounds i8, i8* %91, i64 -1
  store i8 %94, i8* %95, align 1
  %96 = sext i32 %4 to i64
  %97 = getelementptr inbounds i8, i8* %91, i64 %96
  %98 = add nsw i32 %4, -1
  %99 = sext i32 %98 to i64
  %100 = getelementptr inbounds i8, i8* %91, i64 %99
  %101 = load i8, i8* %100, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %97, i8 %101, i64 16, i1 false)
  tail call void %55(i8* %27, i8* %92, i32 %4) #6
  %102 = load i8, i8* %92, align 16
  %103 = getelementptr inbounds i8, i8* %92, i64 -1
  store i8 %102, i8* %103, align 1
  %104 = getelementptr inbounds i8, i8* %92, i64 %96
  %105 = getelementptr inbounds i8, i8* %92, i64 %99
  %106 = load i8, i8* %105, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %104, i8 %106, i64 16, i1 false)
  %107 = getelementptr inbounds i8, i8* %93, i64 %96
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %107, i8 0, i64 16, i1 false)
  %108 = icmp sgt i32 %25, 0
  br i1 %108, label %109, label %133

109:                                              ; preds = %69
  %110 = add nsw i32 %25, -1
  %111 = sext i32 %26 to i64
  %112 = sext i32 %3 to i64
  br label %113

113:                                              ; preds = %113, %109
  %114 = phi i8* [ %93, %109 ], [ %116, %113 ]
  %115 = phi i8* [ %92, %109 ], [ %114, %113 ]
  %116 = phi i8* [ %91, %109 ], [ %115, %113 ]
  %117 = phi i8* [ %27, %109 ], [ %122, %113 ]
  %118 = phi i8* [ %2, %109 ], [ %130, %113 ]
  %119 = phi i32 [ 0, %109 ], [ %131, %113 ]
  %120 = icmp slt i32 %119, %110
  %121 = getelementptr inbounds i8, i8* %117, i64 %111
  %122 = select i1 %120, i8* %121, i8* %117
  tail call void %55(i8* %122, i8* %114, i32 %4) #6
  %123 = load i8, i8* %114, align 1
  %124 = getelementptr inbounds i8, i8* %114, i64 -1
  store i8 %123, i8* %124, align 1
  %125 = getelementptr inbounds i8, i8* %114, i64 %99
  %126 = load i8, i8* %125, align 1
  %127 = getelementptr inbounds i8, i8* %114, i64 %96
  store i8 %126, i8* %127, align 1
  %128 = getelementptr inbounds i8, i8* %116, i64 -1
  %129 = getelementptr inbounds i8, i8* %115, i64 -1
  tail call void %73(i8* %128, i8* %129, i8* %124, i8* %86, i32 %4) #6, !callees !27
  tail call void %64(i8* %128, i8* %124, i8* %88, i32 %4) #6, !callees !28
  tail call void %6(i8* %86, i8* %88, i8* %118, i32 %4) #6
  %130 = getelementptr inbounds i8, i8* %118, i64 %112
  %131 = add nuw nsw i32 %119, 1
  %132 = icmp eq i32 %131, %25
  br i1 %132, label %133, label %113

133:                                              ; preds = %113, %69
  tail call void @free(i8* %82) #6
  br label %134

134:                                              ; preds = %7, %133
  %135 = phi i32 [ 0, %133 ], [ -1, %7 ]
  ret i32 %135
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @ARGBSobelToPlane(i8*, i32, i8*, i32, i32, i32) local_unnamed_addr #0 {
  %7 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %9, label %11

9:                                                ; preds = %6
  %10 = tail call i32 @InitCpuFlags() #6
  br label %11

11:                                               ; preds = %6, %9
  %12 = phi i32 [ %10, %9 ], [ %7, %6 ]
  %13 = and i32 %12, 32
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %19, label %15

15:                                               ; preds = %11
  %16 = and i32 %4, 15
  %17 = icmp eq i32 %16, 0
  %18 = select i1 %17, void (i8*, i8*, i8*, i32)* @SobelToPlaneRow_SSE2, void (i8*, i8*, i8*, i32)* @SobelToPlaneRow_Any_SSE2
  br label %19

19:                                               ; preds = %11, %15
  %20 = phi void (i8*, i8*, i8*, i32)* [ %18, %15 ], [ @SobelToPlaneRow_C, %11 ]
  %21 = tail call fastcc i32 @_ZN6libyuvL12ARGBSobelizeEPKhiPhiiiPFvS1_S1_S2_iE(i8* %0, i32 %1, i8* %2, i32 %3, i32 %4, i32 %5, void (i8*, i8*, i8*, i32)* %20)
  ret i32 %21
}

declare void @SobelToPlaneRow_C(i8*, i8*, i8*, i32) #2

declare void @SobelToPlaneRow_Any_SSE2(i8*, i8*, i8*, i32) #2

declare void @SobelToPlaneRow_SSE2(i8*, i8*, i8*, i32) #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @ARGBSobelXY(i8*, i32, i8*, i32, i32, i32) local_unnamed_addr #0 {
  %7 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %9, label %11

9:                                                ; preds = %6
  %10 = tail call i32 @InitCpuFlags() #6
  br label %11

11:                                               ; preds = %6, %9
  %12 = phi i32 [ %10, %9 ], [ %7, %6 ]
  %13 = and i32 %12, 32
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %19, label %15

15:                                               ; preds = %11
  %16 = and i32 %4, 15
  %17 = icmp eq i32 %16, 0
  %18 = select i1 %17, void (i8*, i8*, i8*, i32)* @SobelXYRow_SSE2, void (i8*, i8*, i8*, i32)* @SobelXYRow_Any_SSE2
  br label %19

19:                                               ; preds = %11, %15
  %20 = phi void (i8*, i8*, i8*, i32)* [ %18, %15 ], [ @SobelXYRow_C, %11 ]
  %21 = tail call fastcc i32 @_ZN6libyuvL12ARGBSobelizeEPKhiPhiiiPFvS1_S1_S2_iE(i8* %0, i32 %1, i8* %2, i32 %3, i32 %4, i32 %5, void (i8*, i8*, i8*, i32)* %20)
  ret i32 %21
}

declare void @SobelXYRow_C(i8*, i8*, i8*, i32) #2

declare void @SobelXYRow_Any_SSE2(i8*, i8*, i8*, i32) #2

declare void @SobelXYRow_SSE2(i8*, i8*, i8*, i32) #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @ARGBPolynomial(i8*, i32, i8*, i32, float*, i32, i32) local_unnamed_addr #0 {
  %8 = icmp ne i8* %0, null
  %9 = icmp ne i8* %2, null
  %10 = and i1 %8, %9
  %11 = icmp ne float* %4, null
  %12 = and i1 %10, %11
  %13 = xor i1 %12, true
  %14 = icmp slt i32 %5, 1
  %15 = or i1 %14, %13
  %16 = icmp eq i32 %6, 0
  %17 = or i1 %15, %16
  br i1 %17, label %85, label %18

18:                                               ; preds = %7
  %19 = icmp slt i32 %6, 0
  br i1 %19, label %20, label %27

20:                                               ; preds = %18
  %21 = sub nsw i32 0, %6
  %22 = xor i32 %6, -1
  %23 = mul nsw i32 %22, %1
  %24 = sext i32 %23 to i64
  %25 = getelementptr inbounds i8, i8* %0, i64 %24
  %26 = sub nsw i32 0, %1
  br label %27

27:                                               ; preds = %20, %18
  %28 = phi i8* [ %25, %20 ], [ %0, %18 ]
  %29 = phi i32 [ %26, %20 ], [ %1, %18 ]
  %30 = phi i32 [ %21, %20 ], [ %6, %18 ]
  %31 = shl nsw i32 %5, 2
  %32 = icmp eq i32 %29, %31
  %33 = icmp eq i32 %31, %3
  %34 = and i1 %33, %32
  %35 = select i1 %34, i32 %30, i32 1
  %36 = mul nsw i32 %35, %5
  %37 = select i1 %34, i32 1, i32 %30
  %38 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %40, label %42

40:                                               ; preds = %27
  %41 = tail call i32 @InitCpuFlags() #6
  br label %42

42:                                               ; preds = %27, %40
  %43 = phi i32 [ %41, %40 ], [ %38, %27 ]
  %44 = and i32 %43, 32
  %45 = icmp ne i32 %44, 0
  %46 = and i32 %36, 1
  %47 = icmp eq i32 %46, 0
  %48 = and i1 %47, %45
  %49 = select i1 %48, void (i8*, i8*, float*, i32)* @ARGBPolynomialRow_SSE2, void (i8*, i8*, float*, i32)* @ARGBPolynomialRow_C
  %50 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %52, label %54

52:                                               ; preds = %42
  %53 = tail call i32 @InitCpuFlags() #6
  br label %54

54:                                               ; preds = %42, %52
  %55 = phi i32 [ %53, %52 ], [ %50, %42 ]
  %56 = and i32 %55, 1024
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %69, label %58

58:                                               ; preds = %54
  %59 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %60 = icmp eq i32 %59, 0
  br i1 %60, label %61, label %63

61:                                               ; preds = %58
  %62 = tail call i32 @InitCpuFlags() #6
  br label %63

63:                                               ; preds = %58, %61
  %64 = phi i32 [ %62, %61 ], [ %59, %58 ]
  %65 = and i32 %64, 4096
  %66 = icmp ne i32 %65, 0
  %67 = and i1 %47, %66
  %68 = select i1 %67, void (i8*, i8*, float*, i32)* @ARGBPolynomialRow_AVX2, void (i8*, i8*, float*, i32)* %49
  br label %69

69:                                               ; preds = %63, %54
  %70 = phi void (i8*, i8*, float*, i32)* [ %49, %54 ], [ %68, %63 ]
  %71 = icmp sgt i32 %37, 0
  br i1 %71, label %72, label %85

72:                                               ; preds = %69
  %73 = sext i32 %29 to i64
  %74 = select i1 %34, i64 0, i64 %73
  %75 = sext i32 %3 to i64
  %76 = select i1 %34, i64 0, i64 %75
  br label %77

77:                                               ; preds = %77, %72
  %78 = phi i32 [ 0, %72 ], [ %83, %77 ]
  %79 = phi i8* [ %2, %72 ], [ %82, %77 ]
  %80 = phi i8* [ %28, %72 ], [ %81, %77 ]
  tail call void %70(i8* %80, i8* %79, float* %4, i32 %36) #6, !callees !29
  %81 = getelementptr inbounds i8, i8* %80, i64 %74
  %82 = getelementptr inbounds i8, i8* %79, i64 %76
  %83 = add nuw nsw i32 %78, 1
  %84 = icmp eq i32 %83, %37
  br i1 %84, label %85, label %77

85:                                               ; preds = %77, %69, %7
  %86 = phi i32 [ -1, %7 ], [ 0, %69 ], [ 0, %77 ]
  ret i32 %86
}

declare void @ARGBPolynomialRow_C(i8*, i8*, float*, i32) local_unnamed_addr #2

declare void @ARGBPolynomialRow_SSE2(i8*, i8*, float*, i32) local_unnamed_addr #2

declare void @ARGBPolynomialRow_AVX2(i8*, i8*, float*, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @HalfFloatPlane(i16*, i32, i16*, i32, float, i32, i32) local_unnamed_addr #0 {
  %8 = icmp eq i16* %0, null
  %9 = icmp eq i16* %2, null
  %10 = or i1 %8, %9
  %11 = icmp slt i32 %5, 1
  %12 = or i1 %10, %11
  %13 = icmp eq i32 %6, 0
  %14 = or i1 %12, %13
  br i1 %14, label %78, label %15

15:                                               ; preds = %7
  %16 = ashr i32 %1, 1
  %17 = ashr i32 %3, 1
  %18 = icmp slt i32 %6, 0
  br i1 %18, label %19, label %26

19:                                               ; preds = %15
  %20 = sub nsw i32 0, %6
  %21 = xor i32 %6, -1
  %22 = mul nsw i32 %16, %21
  %23 = sext i32 %22 to i64
  %24 = getelementptr inbounds i16, i16* %0, i64 %23
  %25 = sub nsw i32 0, %16
  br label %26

26:                                               ; preds = %19, %15
  %27 = phi i16* [ %24, %19 ], [ %0, %15 ]
  %28 = phi i32 [ %25, %19 ], [ %16, %15 ]
  %29 = phi i32 [ %20, %19 ], [ %6, %15 ]
  %30 = icmp eq i32 %28, %5
  %31 = icmp eq i32 %17, %5
  %32 = and i1 %31, %30
  %33 = select i1 %32, i32 %29, i32 1
  %34 = mul nsw i32 %33, %5
  %35 = select i1 %32, i32 1, i32 %29
  %36 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %38, label %40

38:                                               ; preds = %26
  %39 = tail call i32 @InitCpuFlags() #6
  br label %40

40:                                               ; preds = %26, %38
  %41 = phi i32 [ %39, %38 ], [ %36, %26 ]
  %42 = and i32 %41, 32
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %48, label %44

44:                                               ; preds = %40
  %45 = and i32 %34, 7
  %46 = icmp eq i32 %45, 0
  %47 = select i1 %46, void (i16*, i16*, float, i32)* @HalfFloatRow_SSE2, void (i16*, i16*, float, i32)* @HalfFloatRow_Any_SSE2
  br label %48

48:                                               ; preds = %40, %44
  %49 = phi void (i16*, i16*, float, i32)* [ %47, %44 ], [ @HalfFloatRow_C, %40 ]
  %50 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %52, label %54

52:                                               ; preds = %48
  %53 = tail call i32 @InitCpuFlags() #6
  br label %54

54:                                               ; preds = %48, %52
  %55 = phi i32 [ %53, %52 ], [ %50, %48 ]
  %56 = and i32 %55, 1024
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %62, label %58

58:                                               ; preds = %54
  %59 = and i32 %34, 15
  %60 = icmp eq i32 %59, 0
  %61 = select i1 %60, void (i16*, i16*, float, i32)* @HalfFloatRow_AVX2, void (i16*, i16*, float, i32)* @HalfFloatRow_Any_AVX2
  br label %62

62:                                               ; preds = %54, %58
  %63 = phi void (i16*, i16*, float, i32)* [ %61, %58 ], [ %49, %54 ]
  %64 = icmp sgt i32 %35, 0
  br i1 %64, label %65, label %78

65:                                               ; preds = %62
  %66 = sext i32 %28 to i64
  %67 = select i1 %32, i64 0, i64 %66
  %68 = sext i32 %17 to i64
  %69 = select i1 %32, i64 0, i64 %68
  br label %70

70:                                               ; preds = %70, %65
  %71 = phi i32 [ 0, %65 ], [ %76, %70 ]
  %72 = phi i16* [ %2, %65 ], [ %75, %70 ]
  %73 = phi i16* [ %27, %65 ], [ %74, %70 ]
  tail call void %63(i16* %73, i16* %72, float %4, i32 %34) #6
  %74 = getelementptr inbounds i16, i16* %73, i64 %67
  %75 = getelementptr inbounds i16, i16* %72, i64 %69
  %76 = add nuw nsw i32 %71, 1
  %77 = icmp eq i32 %76, %35
  br i1 %77, label %78, label %70

78:                                               ; preds = %70, %62, %7
  %79 = phi i32 [ -1, %7 ], [ 0, %62 ], [ 0, %70 ]
  ret i32 %79
}

declare void @HalfFloatRow_C(i16*, i16*, float, i32) local_unnamed_addr #2

declare void @HalfFloatRow_Any_SSE2(i16*, i16*, float, i32) local_unnamed_addr #2

declare void @HalfFloatRow_SSE2(i16*, i16*, float, i32) local_unnamed_addr #2

declare void @HalfFloatRow_Any_AVX2(i16*, i16*, float, i32) local_unnamed_addr #2

declare void @HalfFloatRow_AVX2(i16*, i16*, float, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @ByteToFloat(i8*, float*, float, i32) local_unnamed_addr #0 {
  %5 = icmp eq i8* %0, null
  %6 = icmp eq float* %1, null
  %7 = or i1 %5, %6
  %8 = icmp slt i32 %3, 1
  %9 = or i1 %7, %8
  br i1 %9, label %11, label %10

10:                                               ; preds = %4
  tail call void @ByteToFloatRow_C(i8* nonnull %0, float* nonnull %1, float %2, i32 %3) #6
  br label %11

11:                                               ; preds = %4, %10
  %12 = phi i32 [ 0, %10 ], [ -1, %4 ]
  ret i32 %12
}

declare void @ByteToFloatRow_C(i8*, float*, float, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @ARGBLumaColorTable(i8*, i32, i8*, i32, i8*, i32, i32) local_unnamed_addr #0 {
  %8 = icmp ne i8* %0, null
  %9 = icmp ne i8* %2, null
  %10 = and i1 %8, %9
  %11 = icmp ne i8* %4, null
  %12 = and i1 %10, %11
  %13 = xor i1 %12, true
  %14 = icmp slt i32 %5, 1
  %15 = or i1 %14, %13
  %16 = icmp eq i32 %6, 0
  %17 = or i1 %15, %16
  br i1 %17, label %64, label %18

18:                                               ; preds = %7
  %19 = icmp slt i32 %6, 0
  br i1 %19, label %20, label %27

20:                                               ; preds = %18
  %21 = sub nsw i32 0, %6
  %22 = xor i32 %6, -1
  %23 = mul nsw i32 %22, %1
  %24 = sext i32 %23 to i64
  %25 = getelementptr inbounds i8, i8* %0, i64 %24
  %26 = sub nsw i32 0, %1
  br label %27

27:                                               ; preds = %20, %18
  %28 = phi i8* [ %25, %20 ], [ %0, %18 ]
  %29 = phi i32 [ %26, %20 ], [ %1, %18 ]
  %30 = phi i32 [ %21, %20 ], [ %6, %18 ]
  %31 = shl nsw i32 %5, 2
  %32 = icmp eq i32 %29, %31
  %33 = icmp eq i32 %31, %3
  %34 = and i1 %33, %32
  %35 = select i1 %34, i32 %30, i32 1
  %36 = mul nsw i32 %35, %5
  %37 = select i1 %34, i32 1, i32 %30
  %38 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %40, label %42

40:                                               ; preds = %27
  %41 = tail call i32 @InitCpuFlags() #6
  br label %42

42:                                               ; preds = %27, %40
  %43 = phi i32 [ %41, %40 ], [ %38, %27 ]
  %44 = and i32 %43, 64
  %45 = icmp ne i32 %44, 0
  %46 = and i32 %36, 3
  %47 = icmp eq i32 %46, 0
  %48 = and i1 %47, %45
  %49 = select i1 %48, void (i8*, i8*, i32, i8*, i32)* @ARGBLumaColorTableRow_SSSE3, void (i8*, i8*, i32, i8*, i32)* @ARGBLumaColorTableRow_C
  %50 = icmp sgt i32 %37, 0
  br i1 %50, label %51, label %64

51:                                               ; preds = %42
  %52 = sext i32 %29 to i64
  %53 = select i1 %34, i64 0, i64 %52
  %54 = sext i32 %3 to i64
  %55 = select i1 %34, i64 0, i64 %54
  br label %56

56:                                               ; preds = %56, %51
  %57 = phi i32 [ 0, %51 ], [ %62, %56 ]
  %58 = phi i8* [ %2, %51 ], [ %61, %56 ]
  %59 = phi i8* [ %28, %51 ], [ %60, %56 ]
  tail call void %49(i8* %59, i8* %58, i32 %36, i8* %4, i32 2509583) #6, !callees !30
  %60 = getelementptr inbounds i8, i8* %59, i64 %53
  %61 = getelementptr inbounds i8, i8* %58, i64 %55
  %62 = add nuw nsw i32 %57, 1
  %63 = icmp eq i32 %62, %37
  br i1 %63, label %64, label %56

64:                                               ; preds = %56, %42, %7
  %65 = phi i32 [ -1, %7 ], [ 0, %42 ], [ 0, %56 ]
  ret i32 %65
}

declare void @ARGBLumaColorTableRow_C(i8*, i8*, i32, i8*, i32) local_unnamed_addr #2

declare void @ARGBLumaColorTableRow_SSSE3(i8*, i8*, i32, i8*, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @ARGBCopyAlpha(i8*, i32, i8*, i32, i32, i32) local_unnamed_addr #0 {
  %7 = icmp eq i8* %0, null
  %8 = icmp eq i8* %2, null
  %9 = or i1 %7, %8
  %10 = icmp slt i32 %4, 1
  %11 = or i1 %9, %10
  %12 = icmp eq i32 %5, 0
  %13 = or i1 %11, %12
  br i1 %13, label %76, label %14

14:                                               ; preds = %6
  %15 = icmp slt i32 %5, 0
  br i1 %15, label %16, label %23

16:                                               ; preds = %14
  %17 = sub nsw i32 0, %5
  %18 = xor i32 %5, -1
  %19 = mul nsw i32 %18, %1
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds i8, i8* %0, i64 %20
  %22 = sub nsw i32 0, %1
  br label %23

23:                                               ; preds = %16, %14
  %24 = phi i8* [ %21, %16 ], [ %0, %14 ]
  %25 = phi i32 [ %22, %16 ], [ %1, %14 ]
  %26 = phi i32 [ %17, %16 ], [ %5, %14 ]
  %27 = shl nsw i32 %4, 2
  %28 = icmp eq i32 %25, %27
  %29 = icmp eq i32 %27, %3
  %30 = and i1 %29, %28
  %31 = select i1 %30, i32 %26, i32 1
  %32 = mul nsw i32 %31, %4
  %33 = select i1 %30, i32 1, i32 %26
  %34 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %36, label %38

36:                                               ; preds = %23
  %37 = tail call i32 @InitCpuFlags() #6
  br label %38

38:                                               ; preds = %23, %36
  %39 = phi i32 [ %37, %36 ], [ %34, %23 ]
  %40 = and i32 %39, 32
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %46, label %42

42:                                               ; preds = %38
  %43 = and i32 %32, 7
  %44 = icmp eq i32 %43, 0
  %45 = select i1 %44, void (i8*, i8*, i32)* @ARGBCopyAlphaRow_SSE2, void (i8*, i8*, i32)* @ARGBCopyAlphaRow_Any_SSE2
  br label %46

46:                                               ; preds = %38, %42
  %47 = phi void (i8*, i8*, i32)* [ %45, %42 ], [ @ARGBCopyAlphaRow_C, %38 ]
  %48 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %50, label %52

50:                                               ; preds = %46
  %51 = tail call i32 @InitCpuFlags() #6
  br label %52

52:                                               ; preds = %46, %50
  %53 = phi i32 [ %51, %50 ], [ %48, %46 ]
  %54 = and i32 %53, 1024
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %60, label %56

56:                                               ; preds = %52
  %57 = and i32 %32, 15
  %58 = icmp eq i32 %57, 0
  %59 = select i1 %58, void (i8*, i8*, i32)* @ARGBCopyAlphaRow_AVX2, void (i8*, i8*, i32)* @ARGBCopyAlphaRow_Any_AVX2
  br label %60

60:                                               ; preds = %52, %56
  %61 = phi void (i8*, i8*, i32)* [ %59, %56 ], [ %47, %52 ]
  %62 = icmp sgt i32 %33, 0
  br i1 %62, label %63, label %76

63:                                               ; preds = %60
  %64 = sext i32 %25 to i64
  %65 = select i1 %30, i64 0, i64 %64
  %66 = sext i32 %3 to i64
  %67 = select i1 %30, i64 0, i64 %66
  br label %68

68:                                               ; preds = %68, %63
  %69 = phi i32 [ 0, %63 ], [ %74, %68 ]
  %70 = phi i8* [ %2, %63 ], [ %73, %68 ]
  %71 = phi i8* [ %24, %63 ], [ %72, %68 ]
  tail call void %61(i8* %71, i8* %70, i32 %32) #6
  %72 = getelementptr inbounds i8, i8* %71, i64 %65
  %73 = getelementptr inbounds i8, i8* %70, i64 %67
  %74 = add nuw nsw i32 %69, 1
  %75 = icmp eq i32 %74, %33
  br i1 %75, label %76, label %68

76:                                               ; preds = %68, %60, %6
  %77 = phi i32 [ -1, %6 ], [ 0, %60 ], [ 0, %68 ]
  ret i32 %77
}

declare void @ARGBCopyAlphaRow_C(i8*, i8*, i32) local_unnamed_addr #2

declare void @ARGBCopyAlphaRow_Any_SSE2(i8*, i8*, i32) local_unnamed_addr #2

declare void @ARGBCopyAlphaRow_SSE2(i8*, i8*, i32) local_unnamed_addr #2

declare void @ARGBCopyAlphaRow_Any_AVX2(i8*, i8*, i32) local_unnamed_addr #2

declare void @ARGBCopyAlphaRow_AVX2(i8*, i8*, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @ARGBExtractAlpha(i8*, i32, i8*, i32, i32, i32) local_unnamed_addr #0 {
  %7 = icmp eq i8* %0, null
  %8 = icmp eq i8* %2, null
  %9 = or i1 %7, %8
  %10 = icmp slt i32 %4, 1
  %11 = or i1 %9, %10
  %12 = icmp eq i32 %5, 0
  %13 = or i1 %11, %12
  br i1 %13, label %76, label %14

14:                                               ; preds = %6
  %15 = icmp slt i32 %5, 0
  br i1 %15, label %16, label %23

16:                                               ; preds = %14
  %17 = sub nsw i32 0, %5
  %18 = xor i32 %5, -1
  %19 = mul nsw i32 %18, %1
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds i8, i8* %0, i64 %20
  %22 = sub nsw i32 0, %1
  br label %23

23:                                               ; preds = %16, %14
  %24 = phi i8* [ %21, %16 ], [ %0, %14 ]
  %25 = phi i32 [ %22, %16 ], [ %1, %14 ]
  %26 = phi i32 [ %17, %16 ], [ %5, %14 ]
  %27 = shl nsw i32 %4, 2
  %28 = icmp eq i32 %25, %27
  %29 = icmp eq i32 %3, %4
  %30 = and i1 %29, %28
  %31 = select i1 %30, i32 %26, i32 1
  %32 = mul nsw i32 %31, %4
  %33 = select i1 %30, i32 1, i32 %26
  %34 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %36, label %38

36:                                               ; preds = %23
  %37 = tail call i32 @InitCpuFlags() #6
  br label %38

38:                                               ; preds = %23, %36
  %39 = phi i32 [ %37, %36 ], [ %34, %23 ]
  %40 = and i32 %39, 32
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %46, label %42

42:                                               ; preds = %38
  %43 = and i32 %32, 7
  %44 = icmp eq i32 %43, 0
  %45 = select i1 %44, void (i8*, i8*, i32)* @ARGBExtractAlphaRow_SSE2, void (i8*, i8*, i32)* @ARGBExtractAlphaRow_Any_SSE2
  br label %46

46:                                               ; preds = %38, %42
  %47 = phi void (i8*, i8*, i32)* [ %45, %42 ], [ @ARGBExtractAlphaRow_C, %38 ]
  %48 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %50, label %52

50:                                               ; preds = %46
  %51 = tail call i32 @InitCpuFlags() #6
  br label %52

52:                                               ; preds = %46, %50
  %53 = phi i32 [ %51, %50 ], [ %48, %46 ]
  %54 = and i32 %53, 1024
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %60, label %56

56:                                               ; preds = %52
  %57 = and i32 %32, 31
  %58 = icmp eq i32 %57, 0
  %59 = select i1 %58, void (i8*, i8*, i32)* @ARGBExtractAlphaRow_AVX2, void (i8*, i8*, i32)* @ARGBExtractAlphaRow_Any_AVX2
  br label %60

60:                                               ; preds = %52, %56
  %61 = phi void (i8*, i8*, i32)* [ %59, %56 ], [ %47, %52 ]
  %62 = icmp sgt i32 %33, 0
  br i1 %62, label %63, label %76

63:                                               ; preds = %60
  %64 = sext i32 %25 to i64
  %65 = select i1 %30, i64 0, i64 %64
  %66 = sext i32 %3 to i64
  %67 = select i1 %30, i64 0, i64 %66
  br label %68

68:                                               ; preds = %68, %63
  %69 = phi i32 [ 0, %63 ], [ %74, %68 ]
  %70 = phi i8* [ %2, %63 ], [ %73, %68 ]
  %71 = phi i8* [ %24, %63 ], [ %72, %68 ]
  tail call void %61(i8* %71, i8* %70, i32 %32) #6
  %72 = getelementptr inbounds i8, i8* %71, i64 %65
  %73 = getelementptr inbounds i8, i8* %70, i64 %67
  %74 = add nuw nsw i32 %69, 1
  %75 = icmp eq i32 %74, %33
  br i1 %75, label %76, label %68

76:                                               ; preds = %68, %60, %6
  %77 = phi i32 [ -1, %6 ], [ 0, %60 ], [ 0, %68 ]
  ret i32 %77
}

declare void @ARGBExtractAlphaRow_C(i8*, i8*, i32) local_unnamed_addr #2

declare void @ARGBExtractAlphaRow_SSE2(i8*, i8*, i32) local_unnamed_addr #2

declare void @ARGBExtractAlphaRow_Any_SSE2(i8*, i8*, i32) local_unnamed_addr #2

declare void @ARGBExtractAlphaRow_AVX2(i8*, i8*, i32) local_unnamed_addr #2

declare void @ARGBExtractAlphaRow_Any_AVX2(i8*, i8*, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @ARGBCopyYToAlpha(i8*, i32, i8*, i32, i32, i32) local_unnamed_addr #0 {
  %7 = icmp eq i8* %0, null
  %8 = icmp eq i8* %2, null
  %9 = or i1 %7, %8
  %10 = icmp slt i32 %4, 1
  %11 = or i1 %9, %10
  %12 = icmp eq i32 %5, 0
  %13 = or i1 %11, %12
  br i1 %13, label %76, label %14

14:                                               ; preds = %6
  %15 = icmp slt i32 %5, 0
  br i1 %15, label %16, label %23

16:                                               ; preds = %14
  %17 = sub nsw i32 0, %5
  %18 = xor i32 %5, -1
  %19 = mul nsw i32 %18, %1
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds i8, i8* %0, i64 %20
  %22 = sub nsw i32 0, %1
  br label %23

23:                                               ; preds = %16, %14
  %24 = phi i8* [ %21, %16 ], [ %0, %14 ]
  %25 = phi i32 [ %22, %16 ], [ %1, %14 ]
  %26 = phi i32 [ %17, %16 ], [ %5, %14 ]
  %27 = icmp eq i32 %25, %4
  %28 = shl nsw i32 %4, 2
  %29 = icmp eq i32 %28, %3
  %30 = and i1 %29, %27
  %31 = select i1 %30, i32 %26, i32 1
  %32 = mul nsw i32 %31, %4
  %33 = select i1 %30, i32 1, i32 %26
  %34 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %36, label %38

36:                                               ; preds = %23
  %37 = tail call i32 @InitCpuFlags() #6
  br label %38

38:                                               ; preds = %23, %36
  %39 = phi i32 [ %37, %36 ], [ %34, %23 ]
  %40 = and i32 %39, 32
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %46, label %42

42:                                               ; preds = %38
  %43 = and i32 %32, 7
  %44 = icmp eq i32 %43, 0
  %45 = select i1 %44, void (i8*, i8*, i32)* @ARGBCopyYToAlphaRow_SSE2, void (i8*, i8*, i32)* @ARGBCopyYToAlphaRow_Any_SSE2
  br label %46

46:                                               ; preds = %38, %42
  %47 = phi void (i8*, i8*, i32)* [ %45, %42 ], [ @ARGBCopyYToAlphaRow_C, %38 ]
  %48 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %50, label %52

50:                                               ; preds = %46
  %51 = tail call i32 @InitCpuFlags() #6
  br label %52

52:                                               ; preds = %46, %50
  %53 = phi i32 [ %51, %50 ], [ %48, %46 ]
  %54 = and i32 %53, 1024
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %60, label %56

56:                                               ; preds = %52
  %57 = and i32 %32, 15
  %58 = icmp eq i32 %57, 0
  %59 = select i1 %58, void (i8*, i8*, i32)* @ARGBCopyYToAlphaRow_AVX2, void (i8*, i8*, i32)* @ARGBCopyYToAlphaRow_Any_AVX2
  br label %60

60:                                               ; preds = %52, %56
  %61 = phi void (i8*, i8*, i32)* [ %59, %56 ], [ %47, %52 ]
  %62 = icmp sgt i32 %33, 0
  br i1 %62, label %63, label %76

63:                                               ; preds = %60
  %64 = sext i32 %25 to i64
  %65 = select i1 %30, i64 0, i64 %64
  %66 = sext i32 %3 to i64
  %67 = select i1 %30, i64 0, i64 %66
  br label %68

68:                                               ; preds = %68, %63
  %69 = phi i32 [ 0, %63 ], [ %74, %68 ]
  %70 = phi i8* [ %2, %63 ], [ %73, %68 ]
  %71 = phi i8* [ %24, %63 ], [ %72, %68 ]
  tail call void %61(i8* %71, i8* %70, i32 %32) #6
  %72 = getelementptr inbounds i8, i8* %71, i64 %65
  %73 = getelementptr inbounds i8, i8* %70, i64 %67
  %74 = add nuw nsw i32 %69, 1
  %75 = icmp eq i32 %74, %33
  br i1 %75, label %76, label %68

76:                                               ; preds = %68, %60, %6
  %77 = phi i32 [ -1, %6 ], [ 0, %60 ], [ 0, %68 ]
  ret i32 %77
}

declare void @ARGBCopyYToAlphaRow_C(i8*, i8*, i32) local_unnamed_addr #2

declare void @ARGBCopyYToAlphaRow_Any_SSE2(i8*, i8*, i32) local_unnamed_addr #2

declare void @ARGBCopyYToAlphaRow_SSE2(i8*, i8*, i32) local_unnamed_addr #2

declare void @ARGBCopyYToAlphaRow_Any_AVX2(i8*, i8*, i32) local_unnamed_addr #2

declare void @ARGBCopyYToAlphaRow_AVX2(i8*, i8*, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @YUY2ToNV12(i8*, i32, i8*, i32, i8*, i32, i32, i32) local_unnamed_addr #0 {
  %9 = add nsw i32 %6, 1
  %10 = icmp ne i8* %0, null
  %11 = icmp ne i8* %2, null
  %12 = and i1 %10, %11
  %13 = icmp ne i8* %4, null
  %14 = and i1 %12, %13
  %15 = xor i1 %14, true
  %16 = icmp slt i32 %6, 1
  %17 = or i1 %16, %15
  %18 = icmp eq i32 %7, 0
  %19 = or i1 %17, %18
  br i1 %19, label %135, label %20

20:                                               ; preds = %8
  %21 = icmp slt i32 %7, 0
  br i1 %21, label %22, label %29

22:                                               ; preds = %20
  %23 = sub nsw i32 0, %7
  %24 = xor i32 %7, -1
  %25 = mul nsw i32 %24, %1
  %26 = sext i32 %25 to i64
  %27 = getelementptr inbounds i8, i8* %0, i64 %26
  %28 = sub nsw i32 0, %1
  br label %29

29:                                               ; preds = %22, %20
  %30 = phi i32 [ %28, %22 ], [ %1, %20 ]
  %31 = phi i8* [ %27, %22 ], [ %0, %20 ]
  %32 = phi i32 [ %23, %22 ], [ %7, %20 ]
  %33 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %35, label %37

35:                                               ; preds = %29
  %36 = tail call i32 @InitCpuFlags() #6
  br label %37

37:                                               ; preds = %29, %35
  %38 = phi i32 [ %36, %35 ], [ %33, %29 ]
  %39 = and i32 %38, 32
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %45, label %41

41:                                               ; preds = %37
  %42 = and i32 %6, 15
  %43 = icmp eq i32 %42, 0
  %44 = select i1 %43, void (i8*, i8*, i8*, i32)* @SplitUVRow_SSE2, void (i8*, i8*, i8*, i32)* @SplitUVRow_Any_SSE2
  br label %45

45:                                               ; preds = %37, %41
  %46 = phi void (i8*, i8*, i8*, i32)* [ %44, %41 ], [ @SplitUVRow_C, %37 ]
  %47 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %49, label %51

49:                                               ; preds = %45
  %50 = tail call i32 @InitCpuFlags() #6
  br label %51

51:                                               ; preds = %45, %49
  %52 = phi i32 [ %50, %49 ], [ %47, %45 ]
  %53 = and i32 %52, 1024
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %59, label %55

55:                                               ; preds = %51
  %56 = and i32 %6, 31
  %57 = icmp eq i32 %56, 0
  %58 = select i1 %57, void (i8*, i8*, i8*, i32)* @SplitUVRow_AVX2, void (i8*, i8*, i8*, i32)* @SplitUVRow_Any_AVX2
  br label %59

59:                                               ; preds = %51, %55
  %60 = phi void (i8*, i8*, i8*, i32)* [ %58, %55 ], [ %46, %51 ]
  %61 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %62 = icmp eq i32 %61, 0
  br i1 %62, label %63, label %65

63:                                               ; preds = %59
  %64 = tail call i32 @InitCpuFlags() #6
  br label %65

65:                                               ; preds = %59, %63
  %66 = phi i32 [ %64, %63 ], [ %61, %59 ]
  %67 = and i32 %66, 64
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %73, label %69

69:                                               ; preds = %65
  %70 = and i32 %6, 15
  %71 = icmp eq i32 %70, 0
  %72 = select i1 %71, void (i8*, i8*, i64, i32, i32)* @InterpolateRow_SSSE3, void (i8*, i8*, i64, i32, i32)* @InterpolateRow_Any_SSSE3
  br label %73

73:                                               ; preds = %65, %69
  %74 = phi void (i8*, i8*, i64, i32, i32)* [ %72, %69 ], [ @InterpolateRow_C, %65 ]
  %75 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %76 = icmp eq i32 %75, 0
  br i1 %76, label %77, label %79

77:                                               ; preds = %73
  %78 = tail call i32 @InitCpuFlags() #6
  br label %79

79:                                               ; preds = %73, %77
  %80 = phi i32 [ %78, %77 ], [ %75, %73 ]
  %81 = and i32 %80, 1024
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %87, label %83

83:                                               ; preds = %79
  %84 = and i32 %6, 31
  %85 = icmp eq i32 %84, 0
  %86 = select i1 %85, void (i8*, i8*, i64, i32, i32)* @InterpolateRow_AVX2, void (i8*, i8*, i64, i32, i32)* @InterpolateRow_Any_AVX2
  br label %87

87:                                               ; preds = %79, %83
  %88 = phi void (i8*, i8*, i64, i32, i32)* [ %86, %83 ], [ %74, %79 ]
  %89 = and i32 %9, -2
  %90 = mul nsw i32 %89, 3
  %91 = add nsw i32 %90, 63
  %92 = sext i32 %91 to i64
  %93 = tail call noalias i8* @malloc(i64 %92) #6
  %94 = ptrtoint i8* %93 to i64
  %95 = add nsw i64 %94, 63
  %96 = and i64 %95, -64
  %97 = inttoptr i64 %96 to i8*
  %98 = add nsw i32 %32, -1
  %99 = icmp sgt i32 %98, 0
  br i1 %99, label %100, label %129

100:                                              ; preds = %87
  %101 = sext i32 %89 to i64
  %102 = getelementptr inbounds i8, i8* %97, i64 %101
  %103 = sext i32 %6 to i64
  %104 = sext i32 %30 to i64
  %105 = shl nsw i32 %89, 1
  %106 = sext i32 %105 to i64
  %107 = getelementptr inbounds i8, i8* %97, i64 %106
  %108 = sext i32 %3 to i64
  %109 = shl nsw i32 %30, 1
  %110 = sext i32 %109 to i64
  %111 = shl nsw i32 %3, 1
  %112 = sext i32 %111 to i64
  %113 = sext i32 %5 to i64
  br label %114

114:                                              ; preds = %100, %114
  %115 = phi i32 [ 0, %100 ], [ %124, %114 ]
  %116 = phi i8* [ %31, %100 ], [ %121, %114 ]
  %117 = phi i8* [ %4, %100 ], [ %123, %114 ]
  %118 = phi i8* [ %2, %100 ], [ %122, %114 ]
  tail call void %60(i8* %116, i8* %97, i8* %102, i32 %89) #6
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %118, i8* align 64 %97, i64 %103, i1 false)
  %119 = getelementptr inbounds i8, i8* %116, i64 %104
  tail call void %60(i8* %119, i8* %97, i8* %107, i32 %89) #6
  %120 = getelementptr inbounds i8, i8* %118, i64 %108
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %120, i8* align 64 %97, i64 %103, i1 false)
  tail call void %88(i8* %117, i8* %102, i64 %101, i32 %89, i32 128) #6
  %121 = getelementptr inbounds i8, i8* %116, i64 %110
  %122 = getelementptr inbounds i8, i8* %118, i64 %112
  %123 = getelementptr inbounds i8, i8* %117, i64 %113
  %124 = add nuw nsw i32 %115, 2
  %125 = icmp slt i32 %124, %98
  br i1 %125, label %114, label %126

126:                                              ; preds = %114
  %127 = and i32 %32, 1
  %128 = icmp eq i32 %127, 0
  br i1 %128, label %134, label %129

129:                                              ; preds = %87, %126
  %130 = phi i8* [ %121, %126 ], [ %31, %87 ]
  %131 = phi i8* [ %123, %126 ], [ %4, %87 ]
  %132 = phi i8* [ %122, %126 ], [ %2, %87 ]
  tail call void %60(i8* %130, i8* %97, i8* %131, i32 %89) #6
  %133 = sext i32 %6 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %132, i8* align 64 %97, i64 %133, i1 false)
  br label %134

134:                                              ; preds = %126, %129
  tail call void @free(i8* %93) #6
  br label %135

135:                                              ; preds = %8, %134
  %136 = phi i32 [ 0, %134 ], [ -1, %8 ]
  ret i32 %136
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @UYVYToNV12(i8*, i32, i8*, i32, i8*, i32, i32, i32) local_unnamed_addr #0 {
  %9 = add nsw i32 %6, 1
  %10 = icmp ne i8* %0, null
  %11 = icmp ne i8* %2, null
  %12 = and i1 %10, %11
  %13 = icmp ne i8* %4, null
  %14 = and i1 %12, %13
  %15 = xor i1 %14, true
  %16 = icmp slt i32 %6, 1
  %17 = or i1 %16, %15
  %18 = icmp eq i32 %7, 0
  %19 = or i1 %17, %18
  br i1 %19, label %135, label %20

20:                                               ; preds = %8
  %21 = icmp slt i32 %7, 0
  br i1 %21, label %22, label %29

22:                                               ; preds = %20
  %23 = sub nsw i32 0, %7
  %24 = xor i32 %7, -1
  %25 = mul nsw i32 %24, %1
  %26 = sext i32 %25 to i64
  %27 = getelementptr inbounds i8, i8* %0, i64 %26
  %28 = sub nsw i32 0, %1
  br label %29

29:                                               ; preds = %22, %20
  %30 = phi i32 [ %28, %22 ], [ %1, %20 ]
  %31 = phi i8* [ %27, %22 ], [ %0, %20 ]
  %32 = phi i32 [ %23, %22 ], [ %7, %20 ]
  %33 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %35, label %37

35:                                               ; preds = %29
  %36 = tail call i32 @InitCpuFlags() #6
  br label %37

37:                                               ; preds = %29, %35
  %38 = phi i32 [ %36, %35 ], [ %33, %29 ]
  %39 = and i32 %38, 32
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %45, label %41

41:                                               ; preds = %37
  %42 = and i32 %6, 15
  %43 = icmp eq i32 %42, 0
  %44 = select i1 %43, void (i8*, i8*, i8*, i32)* @SplitUVRow_SSE2, void (i8*, i8*, i8*, i32)* @SplitUVRow_Any_SSE2
  br label %45

45:                                               ; preds = %37, %41
  %46 = phi void (i8*, i8*, i8*, i32)* [ %44, %41 ], [ @SplitUVRow_C, %37 ]
  %47 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %49, label %51

49:                                               ; preds = %45
  %50 = tail call i32 @InitCpuFlags() #6
  br label %51

51:                                               ; preds = %45, %49
  %52 = phi i32 [ %50, %49 ], [ %47, %45 ]
  %53 = and i32 %52, 1024
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %59, label %55

55:                                               ; preds = %51
  %56 = and i32 %6, 31
  %57 = icmp eq i32 %56, 0
  %58 = select i1 %57, void (i8*, i8*, i8*, i32)* @SplitUVRow_AVX2, void (i8*, i8*, i8*, i32)* @SplitUVRow_Any_AVX2
  br label %59

59:                                               ; preds = %51, %55
  %60 = phi void (i8*, i8*, i8*, i32)* [ %58, %55 ], [ %46, %51 ]
  %61 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %62 = icmp eq i32 %61, 0
  br i1 %62, label %63, label %65

63:                                               ; preds = %59
  %64 = tail call i32 @InitCpuFlags() #6
  br label %65

65:                                               ; preds = %59, %63
  %66 = phi i32 [ %64, %63 ], [ %61, %59 ]
  %67 = and i32 %66, 64
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %73, label %69

69:                                               ; preds = %65
  %70 = and i32 %6, 15
  %71 = icmp eq i32 %70, 0
  %72 = select i1 %71, void (i8*, i8*, i64, i32, i32)* @InterpolateRow_SSSE3, void (i8*, i8*, i64, i32, i32)* @InterpolateRow_Any_SSSE3
  br label %73

73:                                               ; preds = %65, %69
  %74 = phi void (i8*, i8*, i64, i32, i32)* [ %72, %69 ], [ @InterpolateRow_C, %65 ]
  %75 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %76 = icmp eq i32 %75, 0
  br i1 %76, label %77, label %79

77:                                               ; preds = %73
  %78 = tail call i32 @InitCpuFlags() #6
  br label %79

79:                                               ; preds = %73, %77
  %80 = phi i32 [ %78, %77 ], [ %75, %73 ]
  %81 = and i32 %80, 1024
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %87, label %83

83:                                               ; preds = %79
  %84 = and i32 %6, 31
  %85 = icmp eq i32 %84, 0
  %86 = select i1 %85, void (i8*, i8*, i64, i32, i32)* @InterpolateRow_AVX2, void (i8*, i8*, i64, i32, i32)* @InterpolateRow_Any_AVX2
  br label %87

87:                                               ; preds = %79, %83
  %88 = phi void (i8*, i8*, i64, i32, i32)* [ %86, %83 ], [ %74, %79 ]
  %89 = and i32 %9, -2
  %90 = mul nsw i32 %89, 3
  %91 = add nsw i32 %90, 63
  %92 = sext i32 %91 to i64
  %93 = tail call noalias i8* @malloc(i64 %92) #6
  %94 = ptrtoint i8* %93 to i64
  %95 = add nsw i64 %94, 63
  %96 = and i64 %95, -64
  %97 = inttoptr i64 %96 to i8*
  %98 = add nsw i32 %32, -1
  %99 = icmp sgt i32 %98, 0
  br i1 %99, label %100, label %129

100:                                              ; preds = %87
  %101 = sext i32 %89 to i64
  %102 = getelementptr inbounds i8, i8* %97, i64 %101
  %103 = sext i32 %6 to i64
  %104 = sext i32 %30 to i64
  %105 = shl nsw i32 %89, 1
  %106 = sext i32 %105 to i64
  %107 = getelementptr inbounds i8, i8* %97, i64 %106
  %108 = sext i32 %3 to i64
  %109 = shl nsw i32 %30, 1
  %110 = sext i32 %109 to i64
  %111 = shl nsw i32 %3, 1
  %112 = sext i32 %111 to i64
  %113 = sext i32 %5 to i64
  br label %114

114:                                              ; preds = %100, %114
  %115 = phi i32 [ 0, %100 ], [ %124, %114 ]
  %116 = phi i8* [ %31, %100 ], [ %121, %114 ]
  %117 = phi i8* [ %4, %100 ], [ %123, %114 ]
  %118 = phi i8* [ %2, %100 ], [ %122, %114 ]
  tail call void %60(i8* %116, i8* %102, i8* %97, i32 %89) #6
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %118, i8* align 64 %97, i64 %103, i1 false)
  %119 = getelementptr inbounds i8, i8* %116, i64 %104
  tail call void %60(i8* %119, i8* %107, i8* %97, i32 %89) #6
  %120 = getelementptr inbounds i8, i8* %118, i64 %108
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %120, i8* align 64 %97, i64 %103, i1 false)
  tail call void %88(i8* %117, i8* %102, i64 %101, i32 %89, i32 128) #6
  %121 = getelementptr inbounds i8, i8* %116, i64 %110
  %122 = getelementptr inbounds i8, i8* %118, i64 %112
  %123 = getelementptr inbounds i8, i8* %117, i64 %113
  %124 = add nuw nsw i32 %115, 2
  %125 = icmp slt i32 %124, %98
  br i1 %125, label %114, label %126

126:                                              ; preds = %114
  %127 = and i32 %32, 1
  %128 = icmp eq i32 %127, 0
  br i1 %128, label %134, label %129

129:                                              ; preds = %87, %126
  %130 = phi i8* [ %121, %126 ], [ %31, %87 ]
  %131 = phi i8* [ %123, %126 ], [ %4, %87 ]
  %132 = phi i8* [ %122, %126 ], [ %2, %87 ]
  tail call void %60(i8* %130, i8* %131, i8* %97, i32 %89) #6
  %133 = sext i32 %6 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %132, i8* align 64 %97, i64 %133, i1 false)
  br label %134

134:                                              ; preds = %126, %129
  tail call void @free(i8* %93) #6
  br label %135

135:                                              ; preds = %8, %134
  %136 = phi i32 [ 0, %134 ], [ -1, %8 ]
  ret i32 %136
}

; Function Attrs: nounwind ssp uwtable
define hidden void @HalfMergeUVPlane(i8*, i32, i8*, i32, i8*, i32, i32, i32) local_unnamed_addr #0 {
  %9 = icmp slt i32 %7, 0
  br i1 %9, label %10, label %21

10:                                               ; preds = %8
  %11 = sub nsw i32 0, %7
  %12 = xor i32 %7, -1
  %13 = mul nsw i32 %12, %1
  %14 = sext i32 %13 to i64
  %15 = getelementptr inbounds i8, i8* %0, i64 %14
  %16 = mul nsw i32 %12, %3
  %17 = sext i32 %16 to i64
  %18 = getelementptr inbounds i8, i8* %2, i64 %17
  %19 = sub nsw i32 0, %1
  %20 = sub nsw i32 0, %3
  br label %21

21:                                               ; preds = %10, %8
  %22 = phi i8* [ %18, %10 ], [ %2, %8 ]
  %23 = phi i32 [ %20, %10 ], [ %3, %8 ]
  %24 = phi i32 [ %19, %10 ], [ %1, %8 ]
  %25 = phi i8* [ %15, %10 ], [ %0, %8 ]
  %26 = phi i32 [ %11, %10 ], [ %7, %8 ]
  %27 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %29, label %31

29:                                               ; preds = %21
  %30 = tail call i32 @InitCpuFlags() #6
  br label %31

31:                                               ; preds = %21, %29
  %32 = phi i32 [ %30, %29 ], [ %27, %21 ]
  %33 = and i32 %32, 64
  %34 = icmp ne i32 %33, 0
  %35 = and i32 %6, 15
  %36 = icmp eq i32 %35, 0
  %37 = and i1 %36, %34
  %38 = select i1 %37, void (i8*, i32, i8*, i32, i8*, i32)* @HalfMergeUVRow_SSSE3, void (i8*, i32, i8*, i32, i8*, i32)* @HalfMergeUVRow_C
  %39 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %41, label %43

41:                                               ; preds = %31
  %42 = tail call i32 @InitCpuFlags() #6
  br label %43

43:                                               ; preds = %31, %41
  %44 = phi i32 [ %42, %41 ], [ %39, %31 ]
  %45 = and i32 %44, 1024
  %46 = icmp ne i32 %45, 0
  %47 = and i32 %6, 31
  %48 = icmp eq i32 %47, 0
  %49 = and i1 %48, %46
  %50 = select i1 %49, void (i8*, i32, i8*, i32, i8*, i32)* @HalfMergeUVRow_AVX2, void (i8*, i32, i8*, i32, i8*, i32)* %38
  %51 = add nsw i32 %26, -1
  %52 = icmp sgt i32 %51, 0
  br i1 %52, label %53, label %69

53:                                               ; preds = %43
  %54 = shl nsw i32 %24, 1
  %55 = sext i32 %54 to i64
  %56 = shl nsw i32 %23, 1
  %57 = sext i32 %56 to i64
  %58 = sext i32 %5 to i64
  br label %59

59:                                               ; preds = %53, %59
  %60 = phi i32 [ 0, %53 ], [ %67, %59 ]
  %61 = phi i8* [ %25, %53 ], [ %64, %59 ]
  %62 = phi i8* [ %4, %53 ], [ %66, %59 ]
  %63 = phi i8* [ %22, %53 ], [ %65, %59 ]
  tail call void %50(i8* %61, i32 %24, i8* %63, i32 %23, i8* %62, i32 %6) #6, !callees !31
  %64 = getelementptr inbounds i8, i8* %61, i64 %55
  %65 = getelementptr inbounds i8, i8* %63, i64 %57
  %66 = getelementptr inbounds i8, i8* %62, i64 %58
  %67 = add nuw nsw i32 %60, 2
  %68 = icmp slt i32 %67, %51
  br i1 %68, label %59, label %69

69:                                               ; preds = %59, %43
  %70 = phi i8* [ %22, %43 ], [ %65, %59 ]
  %71 = phi i8* [ %4, %43 ], [ %66, %59 ]
  %72 = phi i8* [ %25, %43 ], [ %64, %59 ]
  %73 = and i32 %26, 1
  %74 = icmp eq i32 %73, 0
  br i1 %74, label %76, label %75

75:                                               ; preds = %69
  tail call void %50(i8* %72, i32 0, i8* %70, i32 0, i8* %71, i32 %6) #6, !callees !31
  br label %76

76:                                               ; preds = %69, %75
  ret void
}

declare void @HalfMergeUVRow_C(i8*, i32, i8*, i32, i8*, i32) local_unnamed_addr #2

declare void @HalfMergeUVRow_SSSE3(i8*, i32, i8*, i32, i8*, i32) local_unnamed_addr #2

declare void @HalfMergeUVRow_AVX2(i8*, i32, i8*, i32, i8*, i32) local_unnamed_addr #2

declare i32 @InitCpuFlags() local_unnamed_addr #2

declare void @MergeXR64Row_C(i16*, i16*, i16*, i16*, i32, i32) local_unnamed_addr #2

declare void @MergeXR64Row_Any_AVX2(i16*, i16*, i16*, i16*, i32, i32) local_unnamed_addr #2

declare void @MergeXR64Row_AVX2(i16*, i16*, i16*, i16*, i32, i32) local_unnamed_addr #2

declare void @MergeAR64Row_C(i16*, i16*, i16*, i16*, i16*, i32, i32) local_unnamed_addr #2

declare void @MergeAR64Row_Any_AVX2(i16*, i16*, i16*, i16*, i16*, i32, i32) local_unnamed_addr #2

declare void @MergeAR64Row_AVX2(i16*, i16*, i16*, i16*, i16*, i32, i32) local_unnamed_addr #2

declare void @MergeXRGB16To8Row_C(i16*, i16*, i16*, i8*, i32, i32) local_unnamed_addr #2

declare void @MergeXRGB16To8Row_Any_AVX2(i16*, i16*, i16*, i8*, i32, i32) local_unnamed_addr #2

declare void @MergeXRGB16To8Row_AVX2(i16*, i16*, i16*, i8*, i32, i32) local_unnamed_addr #2

declare void @MergeARGB16To8Row_C(i16*, i16*, i16*, i16*, i8*, i32, i32) local_unnamed_addr #2

declare void @MergeARGB16To8Row_Any_AVX2(i16*, i16*, i16*, i16*, i8*, i32, i32) local_unnamed_addr #2

declare void @MergeARGB16To8Row_AVX2(i16*, i16*, i16*, i16*, i8*, i32, i32) local_unnamed_addr #2

declare void @ARGBToYJRow_C(i8*, i8*, i32) local_unnamed_addr #2

declare void @SobelYRow_C(i8*, i8*, i8*, i32) local_unnamed_addr #2

declare void @SobelXRow_C(i8*, i8*, i8*, i8*, i32) local_unnamed_addr #2

declare void @ARGBToYJRow_Any_SSSE3(i8*, i8*, i32) local_unnamed_addr #2

declare void @ARGBToYJRow_SSSE3(i8*, i8*, i32) local_unnamed_addr #2

declare void @ARGBToYJRow_Any_AVX2(i8*, i8*, i32) local_unnamed_addr #2

declare void @ARGBToYJRow_AVX2(i8*, i8*, i32) local_unnamed_addr #2

declare void @SobelYRow_SSE2(i8*, i8*, i8*, i32) local_unnamed_addr #2

declare void @SobelXRow_SSE2(i8*, i8*, i8*, i8*, i32) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{void (i16*, i16*, i16*, i32, i32)* @SplitUVRow_16_AVX2, void (i16*, i16*, i16*, i32, i32)* @SplitUVRow_16_Any_AVX2, void (i16*, i16*, i16*, i32, i32)* @SplitUVRow_16_C}
!3 = !{void (i16*, i16*, i16*, i32, i32)* @MergeUVRow_16_AVX2, void (i16*, i16*, i16*, i32, i32)* @MergeUVRow_16_Any_AVX2, void (i16*, i16*, i16*, i32, i32)* @MergeUVRow_16_C}
!4 = !{void (i16*, i16*, i32, i32)* @MultiplyRow_16_AVX2, void (i16*, i16*, i32, i32)* @MultiplyRow_16_Any_AVX2, void (i16*, i16*, i32, i32)* @MultiplyRow_16_C}
!5 = !{void (i16*, i16*, i32, i32)* @DivideRow_16_AVX2, void (i16*, i16*, i32, i32)* @DivideRow_16_Any_AVX2, void (i16*, i16*, i32, i32)* @DivideRow_16_C}
!6 = !{void (i8*, i8*, i8*, i8*, i32)* @SplitRGBRow_Any_SSSE3, void (i8*, i8*, i8*, i8*, i32)* @SplitRGBRow_C, void (i8*, i8*, i8*, i8*, i32)* @SplitRGBRow_SSSE3}
!7 = !{void (i8*, i8*, i8*, i8*, i32)* @MergeRGBRow_Any_SSSE3, void (i8*, i8*, i8*, i8*, i32)* @MergeRGBRow_C, void (i8*, i8*, i8*, i8*, i32)* @MergeRGBRow_SSSE3}
!8 = !{void (i16*, i16*, i16*, i8*, i32, i32)* @MergeXR30Row_AVX2, void (i16*, i16*, i16*, i8*, i32, i32)* @MergeXR30Row_Any_AVX2, void (i16*, i16*, i16*, i8*, i32, i32)* @MergeXR30Row_C}
!9 = !{void (i16*, i16*, i16*, i16*, i32, i32)* @MergeXR64Row_AVX2, void (i16*, i16*, i16*, i16*, i32, i32)* @MergeXR64Row_Any_AVX2, void (i16*, i16*, i16*, i16*, i32, i32)* @MergeXR64Row_C}
!10 = !{void (i16*, i16*, i16*, i16*, i16*, i32, i32)* @MergeAR64Row_AVX2, void (i16*, i16*, i16*, i16*, i16*, i32, i32)* @MergeAR64Row_Any_AVX2, void (i16*, i16*, i16*, i16*, i16*, i32, i32)* @MergeAR64Row_C}
!11 = !{void (i16*, i16*, i16*, i8*, i32, i32)* @MergeXRGB16To8Row_AVX2, void (i16*, i16*, i16*, i8*, i32, i32)* @MergeXRGB16To8Row_Any_AVX2, void (i16*, i16*, i16*, i8*, i32, i32)* @MergeXRGB16To8Row_C}
!12 = !{void (i16*, i16*, i16*, i16*, i8*, i32, i32)* @MergeARGB16To8Row_AVX2, void (i16*, i16*, i16*, i16*, i8*, i32, i32)* @MergeARGB16To8Row_Any_AVX2, void (i16*, i16*, i16*, i16*, i8*, i32, i32)* @MergeARGB16To8Row_C}
!13 = !{void (i8*, i8*, i32)* @RGB24MirrorRow_Any_SSSE3, void (i8*, i8*, i32)* @RGB24MirrorRow_C, void (i8*, i8*, i32)* @RGB24MirrorRow_SSSE3}
!14 = !{void (i8*, i8*, i8*, i32)* @ARGBBlendRow_C, void (i8*, i8*, i8*, i32)* @ARGBBlendRow_SSSE3}
!15 = !{void (i8*, i8*, i32)* @RAWToRGB24Row_Any_SSSE3, void (i8*, i8*, i32)* @RAWToRGB24Row_C, void (i8*, i8*, i32)* @RAWToRGB24Row_SSSE3}
!16 = !{void (i8*, i8, i32)* @SetRow_Any_X86, void (i8*, i8, i32)* @SetRow_C, void (i8*, i8, i32)* @SetRow_ERMS, void (i8*, i8, i32)* @SetRow_X86}
!17 = !{void (i8*, i32, i32)* @ARGBSetRow_C, void (i8*, i32, i32)* @ARGBSetRow_X86}
!18 = !{void (i8*, i8*, i32)* @ARGBGrayRow_C, void (i8*, i8*, i32)* @ARGBGrayRow_SSSE3}
!19 = !{void (i8*, i32)* @ARGBSepiaRow_C, void (i8*, i32)* @ARGBSepiaRow_SSSE3}
!20 = !{void (i8*, i8*, i8*, i32)* @ARGBColorMatrixRow_C, void (i8*, i8*, i8*, i32)* @ARGBColorMatrixRow_SSSE3}
!21 = !{void (i8*, i8*, i32)* @ARGBColorTableRow_C, void (i8*, i8*, i32)* @ARGBColorTableRow_X86}
!22 = !{void (i8*, i8*, i32)* @RGBColorTableRow_C, void (i8*, i8*, i32)* @RGBColorTableRow_X86}
!23 = !{void (i8*, i32, i32, i32, i32)* @ARGBQuantizeRow_C, void (i8*, i32, i32, i32, i32)* @ARGBQuantizeRow_SSE2}
!24 = !{void (i8*, i32*, i32*, i32)* @ComputeCumulativeSumRow_C, void (i8*, i32*, i32*, i32)* @ComputeCumulativeSumRow_SSE2}
!25 = !{void (i32*, i32*, i32, i32, i8*, i32)* @CumulativeSumToAverageRow_C, void (i32*, i32*, i32, i32, i8*, i32)* @CumulativeSumToAverageRow_SSE2}
!26 = !{void (i8*, i8*, i32, i32)* @ARGBShadeRow_C, void (i8*, i8*, i32, i32)* @ARGBShadeRow_SSE2}
!27 = !{void (i8*, i8*, i8*, i8*, i32)* @SobelXRow_C, void (i8*, i8*, i8*, i8*, i32)* @SobelXRow_SSE2}
!28 = !{void (i8*, i8*, i8*, i32)* @SobelYRow_C, void (i8*, i8*, i8*, i32)* @SobelYRow_SSE2}
!29 = !{void (i8*, i8*, float*, i32)* @ARGBPolynomialRow_AVX2, void (i8*, i8*, float*, i32)* @ARGBPolynomialRow_C, void (i8*, i8*, float*, i32)* @ARGBPolynomialRow_SSE2}
!30 = !{void (i8*, i8*, i32, i8*, i32)* @ARGBLumaColorTableRow_C, void (i8*, i8*, i32, i8*, i32)* @ARGBLumaColorTableRow_SSSE3}
!31 = !{void (i8*, i32, i8*, i32, i8*, i32)* @HalfMergeUVRow_AVX2, void (i8*, i32, i8*, i32, i8*, i32)* @HalfMergeUVRow_C, void (i8*, i32, i8*, i32, i8*, i32)* @HalfMergeUVRow_SSSE3}
