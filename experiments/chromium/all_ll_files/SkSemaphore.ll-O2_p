; ModuleID = '../../third_party/skia/src/core/SkSemaphore.cpp'
source_filename = "../../third_party/skia/src/core/SkSemaphore.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%class.SkSemaphore = type { %"struct.std::__1::atomic", %class.SkOnce, %"struct.SkSemaphore::OSSemaphore"* }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%class.SkOnce = type { %"struct.std::__1::atomic.1" }
%"struct.std::__1::atomic.1" = type { %"struct.std::__1::__atomic_base.2" }
%"struct.std::__1::__atomic_base.2" = type { %"struct.std::__1::__atomic_base.3" }
%"struct.std::__1::__atomic_base.3" = type { %"struct.std::__1::__cxx_atomic_impl.4" }
%"struct.std::__1::__cxx_atomic_impl.4" = type { %"struct.std::__1::__cxx_atomic_base_impl.5" }
%"struct.std::__1::__cxx_atomic_base_impl.5" = type { i8 }
%"struct.SkSemaphore::OSSemaphore" = type { %union.sem_t }
%union.sem_t = type { i64, [24 x i8] }

@_ZN11SkSemaphoreD1Ev = hidden unnamed_addr alias void (%class.SkSemaphore*), void (%class.SkSemaphore*)* @_ZN11SkSemaphoreD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN11SkSemaphoreD2Ev(%class.SkSemaphore* nocapture readonly) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.SkSemaphore, %class.SkSemaphore* %0, i64 0, i32 2
  %3 = load %"struct.SkSemaphore::OSSemaphore"*, %"struct.SkSemaphore::OSSemaphore"** %2, align 8
  %4 = icmp eq %"struct.SkSemaphore::OSSemaphore"* %3, null
  br i1 %4, label %9, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"struct.SkSemaphore::OSSemaphore", %"struct.SkSemaphore::OSSemaphore"* %3, i64 0, i32 0
  %7 = tail call i32 @sem_destroy(%union.sem_t* %6) #6
  %8 = bitcast %"struct.SkSemaphore::OSSemaphore"* %3 to i8*
  tail call void @_ZdlPv(i8* %8) #7
  br label %9

9:                                                ; preds = %5, %1
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN11SkSemaphore8osSignalEi(%class.SkSemaphore*, i32) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.SkSemaphore, %class.SkSemaphore* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %4 = load atomic i8, i8* %3 acquire, align 1
  switch i8 %4, label %5 [
    i8 2, label %18
    i8 0, label %6
  ]

5:                                                ; preds = %6, %2
  br label %15

6:                                                ; preds = %2
  %7 = cmpxchg i8* %3, i8 0, i8 1 monotonic monotonic
  %8 = extractvalue { i8, i1 } %7, 1
  br i1 %8, label %9, label %5

9:                                                ; preds = %6
  %10 = tail call i8* @_Znwm(i64 32) #7
  %11 = bitcast i8* %10 to %union.sem_t*
  %12 = tail call i32 @sem_init(%union.sem_t* nonnull %11, i32 0, i32 0) #6
  %13 = getelementptr inbounds %class.SkSemaphore, %class.SkSemaphore* %0, i64 0, i32 2
  %14 = bitcast %"struct.SkSemaphore::OSSemaphore"** %13 to i8**
  store i8* %10, i8** %14, align 8
  store atomic i8 2, i8* %3 release, align 1
  br label %18

15:                                               ; preds = %5, %15
  %16 = load atomic i8, i8* %3 acquire, align 1
  %17 = icmp eq i8 %16, 2
  br i1 %17, label %18, label %15

18:                                               ; preds = %15, %2, %9
  %19 = icmp sgt i32 %1, 0
  br i1 %19, label %20, label %29

20:                                               ; preds = %18
  %21 = getelementptr inbounds %class.SkSemaphore, %class.SkSemaphore* %0, i64 0, i32 2
  %22 = load %"struct.SkSemaphore::OSSemaphore"*, %"struct.SkSemaphore::OSSemaphore"** %21, align 8
  %23 = getelementptr inbounds %"struct.SkSemaphore::OSSemaphore", %"struct.SkSemaphore::OSSemaphore"* %22, i64 0, i32 0
  br label %24

24:                                               ; preds = %24, %20
  %25 = phi i32 [ %1, %20 ], [ %26, %24 ]
  %26 = add nsw i32 %25, -1
  %27 = tail call i32 @sem_post(%union.sem_t* %23) #6
  %28 = icmp sgt i32 %26, 0
  br i1 %28, label %24, label %29

29:                                               ; preds = %24, %18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN11SkSemaphore6osWaitEv(%class.SkSemaphore*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.SkSemaphore, %class.SkSemaphore* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %3 = load atomic i8, i8* %2 acquire, align 1
  switch i8 %3, label %4 [
    i8 2, label %17
    i8 0, label %5
  ]

4:                                                ; preds = %5, %1
  br label %14

5:                                                ; preds = %1
  %6 = cmpxchg i8* %2, i8 0, i8 1 monotonic monotonic
  %7 = extractvalue { i8, i1 } %6, 1
  br i1 %7, label %8, label %4

8:                                                ; preds = %5
  %9 = tail call i8* @_Znwm(i64 32) #7
  %10 = bitcast i8* %9 to %union.sem_t*
  %11 = tail call i32 @sem_init(%union.sem_t* nonnull %10, i32 0, i32 0) #6
  %12 = getelementptr inbounds %class.SkSemaphore, %class.SkSemaphore* %0, i64 0, i32 2
  %13 = bitcast %"struct.SkSemaphore::OSSemaphore"** %12 to i8**
  store i8* %9, i8** %13, align 8
  store atomic i8 2, i8* %2 release, align 1
  br label %17

14:                                               ; preds = %4, %14
  %15 = load atomic i8, i8* %2 acquire, align 1
  %16 = icmp eq i8 %15, 2
  br i1 %16, label %17, label %14

17:                                               ; preds = %14, %1, %8
  %18 = getelementptr inbounds %class.SkSemaphore, %class.SkSemaphore* %0, i64 0, i32 2
  %19 = load %"struct.SkSemaphore::OSSemaphore"*, %"struct.SkSemaphore::OSSemaphore"** %18, align 8
  %20 = getelementptr inbounds %"struct.SkSemaphore::OSSemaphore", %"struct.SkSemaphore::OSSemaphore"* %19, i64 0, i32 0
  br label %21

21:                                               ; preds = %24, %17
  %22 = tail call i32 @sem_wait(%union.sem_t* %20) #6
  %23 = icmp eq i32 %22, -1
  br i1 %23, label %24, label %28

24:                                               ; preds = %21
  %25 = tail call i32* @__errno_location() #8
  %26 = load i32, i32* %25, align 4
  %27 = icmp eq i32 %26, 4
  br i1 %27, label %21, label %28

28:                                               ; preds = %21, %24
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN11SkSemaphore8try_waitEv(%class.SkSemaphore* nocapture) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.SkSemaphore, %class.SkSemaphore* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %3 = load atomic i32, i32* %2 monotonic, align 4
  %4 = icmp sgt i32 %3, 0
  br i1 %4, label %5, label %9

5:                                                ; preds = %1
  %6 = add nsw i32 %3, -1
  %7 = cmpxchg weak i32* %2, i32 %3, i32 %6 acquire acquire
  %8 = extractvalue { i32, i1 } %7, 1
  ret i1 %8

9:                                                ; preds = %1
  ret i1 false
}

; Function Attrs: nounwind
declare i32 @sem_destroy(%union.sem_t*) local_unnamed_addr #2

; Function Attrs: nounwind
declare i32 @sem_post(%union.sem_t*) local_unnamed_addr #2

declare i32 @sem_wait(%union.sem_t*) local_unnamed_addr #3

; Function Attrs: nounwind readnone
declare i32* @__errno_location() local_unnamed_addr #4

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #5

; Function Attrs: nounwind
declare i32 @sem_init(%union.sem_t*, i32, i32) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }
attributes #7 = { builtin nounwind }
attributes #8 = { nounwind readnone }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
