; ModuleID = '../../services/device/generic_sensor/orientation_euler_angles_fusion_algorithm_using_quaternion.cc'
source_filename = "../../services/device/generic_sensor/orientation_euler_angles_fusion_algorithm_using_quaternion.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.device::OrientationEulerAnglesFusionAlgorithmUsingQuaternion" = type { %"class.device::PlatformSensorFusionAlgorithm" }
%"class.device::PlatformSensorFusionAlgorithm" = type { i32 (...)**, %"class.device::PlatformSensorFusion"*, double, i32, %"class.std::__1::vector.29" }
%"class.device::PlatformSensorFusion" = type <{ %"class.device::PlatformSensor", %"class.device::PlatformSensor::Client", %"union.device::SensorReading", %"class.std::__1::unique_ptr", %"class.base::flat_map", i32, [4 x i8] }>
%"class.device::PlatformSensor" = type { i32 (...)**, %"class.base::RefCountedThreadSafe", [4 x i8], %"class.base::ObserverList", %class.scoped_refptr, %"struct.device::SensorReadingSharedBuffer"*, i32, %"class.std::__1::map", %"class.device::PlatformSensorProvider"*, i8, %"union.device::SensorReading", %"class.base::Lock", i8, %"class.base::WeakPtrFactory" }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.base::ObserverList" = type <{ %"class.std::__1::vector", %"class.base::LinkedList", i64, i32, [4 x i8] }>
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.base::internal::UncheckedObserverAdapter"*, %"class.base::internal::UncheckedObserverAdapter"*, %"class.std::__1::__compressed_pair" }
%"class.base::internal::UncheckedObserverAdapter" = type { i8* }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.base::internal::UncheckedObserverAdapter"* }
%"class.base::LinkedList" = type { %"class.base::LinkNode" }
%"class.base::LinkNode" = type { %"class.base::internal::LinkNodeBase" }
%"class.base::internal::LinkNodeBase" = type { %"class.base::internal::LinkNodeBase"*, %"class.base::internal::LinkNodeBase"* }
%class.scoped_refptr = type { %"class.base::SequencedTaskRunner"* }
%"class.base::SequencedTaskRunner" = type { %"class.base::TaskRunner.base", [4 x i8] }
%"class.base::TaskRunner.base" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.2" }>
%"class.base::RefCountedThreadSafe.2" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"struct.device::SensorReadingSharedBuffer" = type { %"class.device::SensorReadingField", %"union.device::SensorReading" }
%"class.device::SensorReadingField" = type { %"union.device::SensorReadingField<device::OneWriterSeqLock>::Storage" }
%"union.device::SensorReadingField<device::OneWriterSeqLock>::Storage" = type { i64 }
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.4", %"class.std::__1::__compressed_pair.9" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type opaque
%"class.std::__1::__compressed_pair.4" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"struct.std::__1::__compressed_pair_elem.5" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.9" = type { %"struct.std::__1::__compressed_pair_elem.10" }
%"struct.std::__1::__compressed_pair_elem.10" = type { i64 }
%"class.device::PlatformSensorProvider" = type opaque
%"class.base::Lock" = type { %"class.base::internal::LockImpl" }
%"class.base::internal::LockImpl" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"class.base::WeakPtrFactory" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.base::internal::WeakPtrFactoryBase" = type { %"class.base::internal::WeakReferenceOwner", i64 }
%"class.base::internal::WeakReferenceOwner" = type { %class.scoped_refptr.12 }
%class.scoped_refptr.12 = type { %"class.base::internal::WeakReference::Flag"* }
%"class.base::internal::WeakReference::Flag" = type <{ %"class.base::RefCountedThreadSafe.13", %"class.base::AtomicFlag", [3 x i8] }>
%"class.base::RefCountedThreadSafe.13" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::AtomicFlag" = type { %"struct.std::__1::atomic.14" }
%"struct.std::__1::atomic.14" = type { %"struct.std::__1::__atomic_base.15" }
%"struct.std::__1::__atomic_base.15" = type { %"struct.std::__1::__atomic_base.16" }
%"struct.std::__1::__atomic_base.16" = type { %"struct.std::__1::__cxx_atomic_impl.17" }
%"struct.std::__1::__cxx_atomic_impl.17" = type { %"struct.std::__1::__cxx_atomic_base_impl.18" }
%"struct.std::__1::__cxx_atomic_base_impl.18" = type { i8 }
%"class.device::PlatformSensor::Client" = type { i32 (...)** }
%"union.device::SensorReading" = type { %"struct.device::SensorReadingRaw" }
%"struct.device::SensorReadingRaw" = type { %"struct.device::SensorReadingBase", [4 x %"class.device::SensorReadingField.3"] }
%"struct.device::SensorReadingBase" = type { %"class.device::SensorReadingField.3" }
%"class.device::SensorReadingField.3" = type { %"union.device::SensorReadingField<double>::Storage" }
%"union.device::SensorReadingField<double>::Storage" = type { i64 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.19" }
%"class.std::__1::__compressed_pair.19" = type { %"struct.std::__1::__compressed_pair_elem.20" }
%"struct.std::__1::__compressed_pair_elem.20" = type { %"class.device::PlatformSensorFusionAlgorithm"* }
%"class.base::flat_map" = type { %"class.base::internal::flat_tree" }
%"class.base::internal::flat_tree" = type { %"class.std::__1::vector.22" }
%"class.std::__1::vector.22" = type { %"class.std::__1::__vector_base.23" }
%"class.std::__1::__vector_base.23" = type { %"struct.std::__1::pair"*, %"struct.std::__1::pair"*, %"class.std::__1::__compressed_pair.24" }
%"struct.std::__1::pair" = type opaque
%"class.std::__1::__compressed_pair.24" = type { %"struct.std::__1::__compressed_pair_elem.25" }
%"struct.std::__1::__compressed_pair_elem.25" = type { %"struct.std::__1::pair"* }
%"class.std::__1::vector.29" = type { %"class.std::__1::__vector_base.30" }
%"class.std::__1::__vector_base.30" = type { i32*, i32*, %"class.std::__1::__compressed_pair.31" }
%"class.std::__1::__compressed_pair.31" = type { %"struct.std::__1::__compressed_pair_elem.32" }
%"struct.std::__1::__compressed_pair_elem.32" = type { i32* }
%"class.std::__1::vector.36" = type { %"class.std::__1::__vector_base.37" }
%"class.std::__1::__vector_base.37" = type { double*, double*, %"class.std::__1::__compressed_pair.38" }
%"class.std::__1::__compressed_pair.38" = type { %"struct.std::__1::__compressed_pair_elem.39" }
%"struct.std::__1::__compressed_pair_elem.39" = type { double* }

@_ZTVN6device52OrientationEulerAnglesFusionAlgorithmUsingQuaternionE = hidden unnamed_addr constant { [7 x i8*] } { [7 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.device::OrientationEulerAnglesFusionAlgorithmUsingQuaternion"*)* @_ZN6device52OrientationEulerAnglesFusionAlgorithmUsingQuaternionD2Ev to i8*), i8* bitcast (void (%"class.device::OrientationEulerAnglesFusionAlgorithmUsingQuaternion"*)* @_ZN6device52OrientationEulerAnglesFusionAlgorithmUsingQuaternionD0Ev to i8*), i8* bitcast (void (%"class.device::PlatformSensorFusionAlgorithm"*, double)* @_ZN6device29PlatformSensorFusionAlgorithm12SetFrequencyEd to i8*), i8* bitcast (void (%"class.device::PlatformSensorFusionAlgorithm"*)* @_ZN6device29PlatformSensorFusionAlgorithm5ResetEv to i8*), i8* bitcast (i1 (%"class.device::OrientationEulerAnglesFusionAlgorithmUsingQuaternion"*, i32, %"union.device::SensorReading"*)* @_ZN6device52OrientationEulerAnglesFusionAlgorithmUsingQuaternion20GetFusedDataInternalENS_5mojom10SensorTypeEPNS_13SensorReadingE to i8*)] }, align 8

@_ZN6device52OrientationEulerAnglesFusionAlgorithmUsingQuaternionC1Eb = hidden unnamed_addr alias void (%"class.device::OrientationEulerAnglesFusionAlgorithmUsingQuaternion"*, i1), void (%"class.device::OrientationEulerAnglesFusionAlgorithmUsingQuaternion"*, i1)* @_ZN6device52OrientationEulerAnglesFusionAlgorithmUsingQuaternionC2Eb
@_ZN6device52OrientationEulerAnglesFusionAlgorithmUsingQuaternionD1Ev = hidden unnamed_addr alias void (%"class.device::OrientationEulerAnglesFusionAlgorithmUsingQuaternion"*), void (%"class.device::OrientationEulerAnglesFusionAlgorithmUsingQuaternion"*)* @_ZN6device52OrientationEulerAnglesFusionAlgorithmUsingQuaternionD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6device52OrientationEulerAnglesFusionAlgorithmUsingQuaternionC2Eb(%"class.device::OrientationEulerAnglesFusionAlgorithmUsingQuaternion"*, i1 zeroext) unnamed_addr #0 align 2 {
  %3 = alloca %"class.std::__1::vector.29", align 8
  %4 = getelementptr inbounds %"class.device::OrientationEulerAnglesFusionAlgorithmUsingQuaternion", %"class.device::OrientationEulerAnglesFusionAlgorithmUsingQuaternion"* %0, i64 0, i32 0
  %5 = select i1 %1, i32 8, i32 10
  %6 = bitcast %"class.std::__1::vector.29"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %6) #6
  %7 = select i1 %1, i32 9, i32 11
  %8 = tail call i8* @_Znwm(i64 4) #7
  %9 = bitcast i8* %8 to i32*
  %10 = getelementptr inbounds %"class.std::__1::vector.29", %"class.std::__1::vector.29"* %3, i64 0, i32 0, i32 1
  %11 = bitcast %"class.std::__1::vector.29"* %3 to i8**
  store i8* %8, i8** %11, align 8
  %12 = getelementptr inbounds i8, i8* %8, i64 4
  %13 = getelementptr inbounds %"class.std::__1::vector.29", %"class.std::__1::vector.29"* %3, i64 0, i32 0, i32 2, i32 0, i32 0
  %14 = bitcast i32** %13 to i8**
  store i8* %12, i8** %14, align 8
  %15 = bitcast i32** %10 to i64*
  store i32 %7, i32* %9, align 4
  %16 = ptrtoint i8* %12 to i64
  store i64 %16, i64* %15, align 8
  call void @_ZN6device29PlatformSensorFusionAlgorithmC2ENS_5mojom10SensorTypeERKNSt3__16vectorIS2_NS3_9allocatorIS2_EEEE(%"class.device::PlatformSensorFusionAlgorithm"* %4, i32 %5, %"class.std::__1::vector.29"* nonnull dereferenceable(24) %3) #6
  %17 = getelementptr inbounds %"class.std::__1::vector.29", %"class.std::__1::vector.29"* %3, i64 0, i32 0, i32 0
  %18 = load i32*, i32** %17, align 8
  %19 = icmp eq i32* %18, null
  br i1 %19, label %23, label %20

20:                                               ; preds = %2
  %21 = ptrtoint i32* %18 to i64
  store i64 %21, i64* %15, align 8
  %22 = bitcast i32* %18 to i8*
  call void @_ZdlPv(i8* %22) #7
  br label %23

23:                                               ; preds = %2, %20
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %6) #6
  %24 = getelementptr inbounds %"class.device::OrientationEulerAnglesFusionAlgorithmUsingQuaternion", %"class.device::OrientationEulerAnglesFusionAlgorithmUsingQuaternion"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN6device52OrientationEulerAnglesFusionAlgorithmUsingQuaternionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %24, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZN6device29PlatformSensorFusionAlgorithmC2ENS_5mojom10SensorTypeERKNSt3__16vectorIS2_NS3_9allocatorIS2_EEEE(%"class.device::PlatformSensorFusionAlgorithm"*, i32, %"class.std::__1::vector.29"* dereferenceable(24)) unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind
declare void @_ZN6device29PlatformSensorFusionAlgorithmD2Ev(%"class.device::PlatformSensorFusionAlgorithm"*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6device52OrientationEulerAnglesFusionAlgorithmUsingQuaternionD2Ev(%"class.device::OrientationEulerAnglesFusionAlgorithmUsingQuaternion"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.device::OrientationEulerAnglesFusionAlgorithmUsingQuaternion", %"class.device::OrientationEulerAnglesFusionAlgorithmUsingQuaternion"* %0, i64 0, i32 0
  tail call void @_ZN6device29PlatformSensorFusionAlgorithmD2Ev(%"class.device::PlatformSensorFusionAlgorithm"* %2) #6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6device52OrientationEulerAnglesFusionAlgorithmUsingQuaternionD0Ev(%"class.device::OrientationEulerAnglesFusionAlgorithmUsingQuaternion"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.device::OrientationEulerAnglesFusionAlgorithmUsingQuaternion", %"class.device::OrientationEulerAnglesFusionAlgorithmUsingQuaternion"* %0, i64 0, i32 0
  tail call void @_ZN6device29PlatformSensorFusionAlgorithmD2Ev(%"class.device::PlatformSensorFusionAlgorithm"* %2) #6
  %3 = bitcast %"class.device::OrientationEulerAnglesFusionAlgorithmUsingQuaternion"* %0 to i8*
  tail call void @_ZdlPv(i8* %3) #7
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN6device52OrientationEulerAnglesFusionAlgorithmUsingQuaternion20GetFusedDataInternalENS_5mojom10SensorTypeEPNS_13SensorReadingE(%"class.device::OrientationEulerAnglesFusionAlgorithmUsingQuaternion"* nocapture readonly, i32, %"union.device::SensorReading"*) unnamed_addr #0 align 2 {
  %4 = alloca %"class.std::__1::vector.36", align 8
  %5 = alloca %"union.device::SensorReading", align 8
  %6 = bitcast %"union.device::SensorReading"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %6) #6
  %7 = bitcast %"union.device::SensorReading"* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %7, i8 -86, i64 40, i1 false)
  call void @_ZN6device13SensorReadingC1Ev(%"union.device::SensorReading"* nonnull %5) #6
  %8 = getelementptr inbounds %"class.device::OrientationEulerAnglesFusionAlgorithmUsingQuaternion", %"class.device::OrientationEulerAnglesFusionAlgorithmUsingQuaternion"* %0, i64 0, i32 0, i32 1
  %9 = load %"class.device::PlatformSensorFusion"*, %"class.device::PlatformSensorFusion"** %8, align 8
  %10 = bitcast %"class.device::PlatformSensorFusion"* %9 to i1 (%"class.device::PlatformSensorFusion"*, i32, %"union.device::SensorReading"*)***
  %11 = load i1 (%"class.device::PlatformSensorFusion"*, i32, %"union.device::SensorReading"*)**, i1 (%"class.device::PlatformSensorFusion"*, i32, %"union.device::SensorReading"*)*** %10, align 8
  %12 = getelementptr inbounds i1 (%"class.device::PlatformSensorFusion"*, i32, %"union.device::SensorReading"*)*, i1 (%"class.device::PlatformSensorFusion"*, i32, %"union.device::SensorReading"*)** %11, i64 14
  %13 = load i1 (%"class.device::PlatformSensorFusion"*, i32, %"union.device::SensorReading"*)*, i1 (%"class.device::PlatformSensorFusion"*, i32, %"union.device::SensorReading"*)** %12, align 8
  %14 = call zeroext i1 %13(%"class.device::PlatformSensorFusion"* %9, i32 %1, %"union.device::SensorReading"* nonnull %5) #6
  br i1 %14, label %15, label %93

15:                                               ; preds = %3
  %16 = getelementptr inbounds %"union.device::SensorReading", %"union.device::SensorReading"* %5, i64 0, i32 0, i32 1, i64 0
  %17 = bitcast %"class.device::SensorReadingField.3"* %16 to double*
  %18 = load double, double* %17, align 8
  %19 = getelementptr inbounds %"union.device::SensorReading", %"union.device::SensorReading"* %5, i64 0, i32 0, i32 1, i64 1
  %20 = bitcast %"class.device::SensorReadingField.3"* %19 to <2 x double>*
  %21 = load <2 x double>, <2 x double>* %20, align 8
  %22 = shufflevector <2 x double> %21, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %23 = getelementptr inbounds %"union.device::SensorReading", %"union.device::SensorReading"* %5, i64 0, i32 0, i32 1, i64 3
  %24 = bitcast %"class.device::SensorReadingField.3"* %23 to double*
  %25 = load double, double* %24, align 8
  %26 = getelementptr inbounds %"union.device::SensorReading", %"union.device::SensorReading"* %2, i64 0, i32 0, i32 1, i64 2
  %27 = bitcast %"class.device::SensorReadingField.3"* %26 to double*
  %28 = getelementptr inbounds %"union.device::SensorReading", %"union.device::SensorReading"* %2, i64 0, i32 0, i32 1, i64 0
  %29 = bitcast %"class.device::SensorReadingField.3"* %28 to double*
  %30 = getelementptr inbounds %"union.device::SensorReading", %"union.device::SensorReading"* %2, i64 0, i32 0, i32 1, i64 1
  %31 = bitcast %"class.device::SensorReadingField.3"* %30 to double*
  %32 = bitcast %"class.std::__1::vector.36"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %32) #6
  %33 = getelementptr inbounds %"class.std::__1::vector.36", %"class.std::__1::vector.36"* %4, i64 0, i32 0, i32 0
  %34 = getelementptr inbounds %"class.std::__1::vector.36", %"class.std::__1::vector.36"* %4, i64 0, i32 0, i32 1
  %35 = getelementptr inbounds %"class.std::__1::vector.36", %"class.std::__1::vector.36"* %4, i64 0, i32 0, i32 2, i32 0, i32 0
  %36 = call i8* @_Znwm(i64 72) #7, !noalias !2
  %37 = bitcast %"class.std::__1::vector.36"* %4 to i8**
  store i8* %36, i8** %37, align 8, !alias.scope !2
  %38 = getelementptr inbounds i8, i8* %36, i64 72
  %39 = bitcast double** %35 to i8**
  store i8* %38, i8** %39, align 8, !alias.scope !2
  %40 = bitcast double** %34 to i64*
  %41 = ptrtoint i8* %38 to i64
  store i64 %41, i64* %40, align 8, !alias.scope !2
  %42 = fmul double %18, 2.000000e+00
  %43 = fmul double %18, %42
  %44 = extractelement <2 x double> %21, i32 0
  %45 = extractelement <2 x double> %21, i32 1
  %46 = fmul <2 x double> %21, <double 2.000000e+00, double 2.000000e+00>
  %47 = extractelement <2 x double> %46, i32 0
  %48 = fmul double %44, %47
  %49 = extractelement <2 x double> %46, i32 1
  %50 = fmul double %45, %49
  %51 = insertelement <2 x double> undef, double %42, i32 0
  %52 = shufflevector <2 x double> %51, <2 x double> undef, <2 x i32> zeroinitializer
  %53 = fmul <2 x double> %52, %22
  %54 = insertelement <2 x double> undef, double %25, i32 0
  %55 = shufflevector <2 x double> %54, <2 x double> undef, <2 x i32> zeroinitializer
  %56 = fmul <2 x double> %46, %55
  %57 = fmul double %47, %45
  %58 = fmul double %42, %25
  %59 = fsub double 1.000000e+00, %48
  %60 = fsub double %59, %50
  %61 = bitcast i8* %36 to double*
  store double %60, double* %61, align 8, !noalias !2
  %62 = extractelement <2 x double> %53, i32 1
  %63 = extractelement <2 x double> %56, i32 1
  %64 = fsub double %62, %63
  %65 = getelementptr inbounds i8, i8* %36, i64 8
  %66 = bitcast i8* %65 to double*
  store double %64, double* %66, align 8, !noalias !2
  %67 = getelementptr inbounds i8, i8* %36, i64 16
  %68 = fadd <2 x double> %53, %56
  %69 = bitcast i8* %67 to <2 x double>*
  store <2 x double> %68, <2 x double>* %69, align 8, !noalias !2
  %70 = fsub double 1.000000e+00, %43
  %71 = fsub double %70, %50
  %72 = getelementptr inbounds i8, i8* %36, i64 32
  %73 = bitcast i8* %72 to double*
  store double %71, double* %73, align 8, !noalias !2
  %74 = getelementptr inbounds i8, i8* %36, i64 40
  %75 = insertelement <2 x double> undef, double %57, i32 0
  %76 = shufflevector <2 x double> %75, <2 x double> %53, <2 x i32> <i32 0, i32 2>
  %77 = insertelement <2 x double> undef, double %58, i32 0
  %78 = shufflevector <2 x double> %77, <2 x double> %56, <2 x i32> <i32 0, i32 2>
  %79 = fsub <2 x double> %76, %78
  %80 = bitcast i8* %74 to <2 x double>*
  store <2 x double> %79, <2 x double>* %80, align 8, !noalias !2
  %81 = fadd double %57, %58
  %82 = getelementptr inbounds i8, i8* %36, i64 56
  %83 = bitcast i8* %82 to double*
  store double %81, double* %83, align 8, !noalias !2
  %84 = fsub double %70, %48
  %85 = getelementptr inbounds i8, i8* %36, i64 64
  %86 = bitcast i8* %85 to double*
  store double %84, double* %86, align 8, !noalias !2
  call void @_ZN6device47ComputeOrientationEulerAnglesFromRotationMatrixERKNSt3__16vectorIdNS0_9allocatorIdEEEEPdS7_S7_(%"class.std::__1::vector.36"* nonnull dereferenceable(24) %4, double* %27, double* %29, double* %31) #6
  %87 = load double*, double** %33, align 8
  %88 = icmp eq double* %87, null
  br i1 %88, label %92, label %89

89:                                               ; preds = %15
  %90 = ptrtoint double* %87 to i64
  store i64 %90, i64* %40, align 8
  %91 = bitcast double* %87 to i8*
  call void @_ZdlPv(i8* %91) #7
  br label %92

92:                                               ; preds = %15, %89
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %32) #6
  br label %93

93:                                               ; preds = %3, %92
  %94 = phi i1 [ true, %92 ], [ false, %3 ]
  call void @_ZN6device13SensorReadingD1Ev(%"union.device::SensorReading"* nonnull %5) #6
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %6) #6
  ret i1 %94
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @_ZN6device13SensorReadingC1Ev(%"union.device::SensorReading"*) unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN6device13SensorReadingD1Ev(%"union.device::SensorReading"*) unnamed_addr #3

declare void @_ZN6device29PlatformSensorFusionAlgorithm12SetFrequencyEd(%"class.device::PlatformSensorFusionAlgorithm"*, double) unnamed_addr #2

declare void @_ZN6device29PlatformSensorFusionAlgorithm5ResetEv(%"class.device::PlatformSensorFusionAlgorithm"*) unnamed_addr #2

declare void @_ZN6device47ComputeOrientationEulerAnglesFromRotationMatrixERKNSt3__16vectorIdNS0_9allocatorIdEEEEPdS7_S7_(%"class.std::__1::vector.36"* dereferenceable(24), double*, double*, double*) local_unnamed_addr #2

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #5

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }
attributes #7 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZN6device12_GLOBAL__N_135ComputeRotationMatrixFromQuaternionEdddd: argument 0"}
!4 = distinct !{!4, !"_ZN6device12_GLOBAL__N_135ComputeRotationMatrixFromQuaternionEdddd"}
