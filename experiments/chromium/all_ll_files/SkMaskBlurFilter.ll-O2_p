; ModuleID = '../../third_party/skia/src/core/SkMaskBlurFilter.cpp'
source_filename = "../../third_party/skia/src/core/SkMaskBlurFilter.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.SkMaskBlurFilter = type { double, double }
%struct.SkMask = type <{ i8*, %struct.SkIRect, i32, i8, [3 x i8] }>
%struct.SkIRect = type { i32, i32, i32, i32 }
%class.SkGaussFilter = type <{ [6 x double], i32, [4 x i8] }>
%class.SkSTArenaAlloc = type { %"struct.std::__1::array", %class.SkArenaAlloc.base, [4 x i8] }
%"struct.std::__1::array" = type { [1024 x i8] }
%class.SkArenaAlloc.base = type <{ i8*, i8*, i8*, %class.SkFibBlockSizes }>
%class.SkFibBlockSizes = type { i32 }
%class.SkArenaAlloc = type <{ i8*, i8*, i8*, %class.SkFibBlockSizes, [4 x i8] }>
%"class.(anonymous namespace)::SkNx" = type { <2 x i64> }

@.str = private unnamed_addr constant [53 x i8] c"../../third_party/skia/src/core/SkMaskBlurFilter.cpp\00", align 1
@.str.1 = private unnamed_addr constant [18 x i8] c"Unhandled format.\00", align 1

@_ZN16SkMaskBlurFilterC1Edd = hidden unnamed_addr alias void (%class.SkMaskBlurFilter*, double, double), void (%class.SkMaskBlurFilter*, double, double)* @_ZN16SkMaskBlurFilterC2Edd

; Function Attrs: nounwind ssp uwtable writeonly
define hidden void @_ZN16SkMaskBlurFilterC2Edd(%class.SkMaskBlurFilter* nocapture, double, double) unnamed_addr #0 align 2 {
  %4 = alloca double, align 8
  %5 = alloca double, align 8
  %6 = alloca double, align 8
  %7 = alloca double, align 8
  %8 = alloca double, align 8
  %9 = alloca double, align 8
  store double %1, double* %4, align 8
  store double %2, double* %5, align 8
  %10 = bitcast double* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10)
  store double 0.000000e+00, double* %6, align 8
  %11 = bitcast double* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11)
  store double 1.350000e+02, double* %7, align 8
  %12 = fcmp ogt double %1, 1.350000e+02
  %13 = select i1 %12, double* %7, double* %4
  %14 = load double, double* %13, align 8
  %15 = fcmp ogt double %14, 0.000000e+00
  %16 = select i1 %15, double* %13, double* %6
  %17 = bitcast double* %16 to i64*
  %18 = load i64, i64* %17, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  %19 = bitcast %class.SkMaskBlurFilter* %0 to i64*
  store i64 %18, i64* %19, align 8
  %20 = getelementptr inbounds %class.SkMaskBlurFilter, %class.SkMaskBlurFilter* %0, i64 0, i32 1
  %21 = bitcast double* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %21)
  store double 0.000000e+00, double* %8, align 8
  %22 = bitcast double* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %22)
  store double 1.350000e+02, double* %9, align 8
  %23 = fcmp ogt double %2, 1.350000e+02
  %24 = select i1 %23, double* %9, double* %5
  %25 = load double, double* %24, align 8
  %26 = fcmp ogt double %25, 0.000000e+00
  %27 = select i1 %26, double* %24, double* %8
  %28 = bitcast double* %27 to i64*
  %29 = load i64, i64* %28, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %22)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21)
  %30 = bitcast double* %20 to i64*
  store i64 %29, i64* %30, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK16SkMaskBlurFilter9hasNoBlurEv(%class.SkMaskBlurFilter* nocapture readonly) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %class.SkMaskBlurFilter, %class.SkMaskBlurFilter* %0, i64 0, i32 0
  %3 = load double, double* %2, align 8
  %4 = fmul double %3, 3.000000e+00
  %5 = fcmp ugt double %4, 1.000000e+00
  br i1 %5, label %11, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %class.SkMaskBlurFilter, %class.SkMaskBlurFilter* %0, i64 0, i32 1
  %8 = load double, double* %7, align 8
  %9 = fmul double %8, 3.000000e+00
  %10 = fcmp ole double %9, 1.000000e+00
  br label %11

11:                                               ; preds = %1, %6
  %12 = phi i1 [ false, %1 ], [ %10, %6 ]
  ret i1 %12
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZNK16SkMaskBlurFilter4blurERK6SkMaskPS0_(%class.SkMaskBlurFilter* nocapture readonly, %struct.SkMask* dereferenceable(32), %struct.SkMask* nocapture) local_unnamed_addr #3 align 2 {
  %4 = alloca %class.SkGaussFilter, align 8
  %5 = alloca %class.SkGaussFilter, align 8
  %6 = alloca [6 x i16], align 2
  %7 = alloca [6 x i16], align 2
  %8 = alloca %struct.SkMask, align 8
  %9 = alloca %class.SkSTArenaAlloc, align 8
  %10 = alloca %struct.SkMask, align 8
  %11 = getelementptr inbounds %class.SkMaskBlurFilter, %class.SkMaskBlurFilter* %0, i64 0, i32 0
  %12 = load double, double* %11, align 8
  %13 = fcmp olt double %12, 2.000000e+00
  br i1 %13, label %14, label %184

14:                                               ; preds = %3
  %15 = getelementptr inbounds %class.SkMaskBlurFilter, %class.SkMaskBlurFilter* %0, i64 0, i32 1
  %16 = load double, double* %15, align 8
  %17 = fcmp olt double %16, 2.000000e+00
  br i1 %17, label %18, label %184

18:                                               ; preds = %14
  %19 = bitcast %class.SkGaussFilter* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %19) #12
  %20 = getelementptr inbounds %class.SkGaussFilter, %class.SkGaussFilter* %4, i64 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %19, i8 -1, i64 48, i1 false) #12
  %21 = bitcast i32* %20 to i64*
  store i64 -6148914691236517206, i64* %21, align 8
  call void @_ZN13SkGaussFilterC1Ed(%class.SkGaussFilter* nonnull %4, double %12) #12
  %22 = bitcast %class.SkGaussFilter* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %22) #12
  %23 = getelementptr inbounds %class.SkGaussFilter, %class.SkGaussFilter* %5, i64 0, i32 0, i64 0
  %24 = getelementptr inbounds %class.SkGaussFilter, %class.SkGaussFilter* %5, i64 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %22, i8 -1, i64 48, i1 false) #12
  %25 = bitcast i32* %24 to i64*
  store i64 -6148914691236517206, i64* %25, align 8
  call void @_ZN13SkGaussFilterC1Ed(%class.SkGaussFilter* nonnull %5, double %16) #12
  %26 = load i32, i32* %20, align 8
  %27 = add nsw i32 %26, -1
  %28 = load i32, i32* %24, align 8
  %29 = add nsw i32 %28, -1
  %30 = bitcast [6 x i16]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %30) #12
  %31 = getelementptr inbounds [6 x i16], [6 x i16]* %6, i64 0, i64 0
  %32 = bitcast [6 x i16]* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 2 %30, i8 -86, i64 12, i1 false) #12
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %32) #12
  %33 = getelementptr inbounds [6 x i16], [6 x i16]* %7, i64 0, i64 0
  %34 = icmp eq i32 %26, 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 2 %32, i8 -86, i64 12, i1 false) #12
  br i1 %34, label %76, label %35

35:                                               ; preds = %18
  %36 = sext i32 %26 to i64
  %37 = getelementptr inbounds %class.SkGaussFilter, %class.SkGaussFilter* %4, i64 0, i32 0, i64 0
  %38 = shl nsw i64 %36, 3
  %39 = add nsw i64 %38, -8
  %40 = lshr exact i64 %39, 3
  %41 = add nuw nsw i64 %40, 1
  %42 = and i64 %41, 1
  %43 = icmp eq i64 %39, 0
  br i1 %43, label %66, label %44

44:                                               ; preds = %35
  %45 = sub nuw nsw i64 %41, %42
  br label %46

46:                                               ; preds = %46, %44
  %47 = phi i64 [ 0, %44 ], [ %61, %46 ]
  %48 = phi double* [ %37, %44 ], [ %63, %46 ]
  %49 = phi i64 [ %45, %44 ], [ %64, %46 ]
  %50 = load double, double* %48, align 8
  %51 = fmul double %50, 6.553600e+04
  %52 = call double @llvm.round.f64(double %51) #12
  %53 = fptoui double %52 to i16
  %54 = or i64 %47, 1
  %55 = getelementptr inbounds [6 x i16], [6 x i16]* %6, i64 0, i64 %47
  store i16 %53, i16* %55, align 2
  %56 = getelementptr inbounds double, double* %48, i64 1
  %57 = load double, double* %56, align 8
  %58 = fmul double %57, 6.553600e+04
  %59 = call double @llvm.round.f64(double %58) #12
  %60 = fptoui double %59 to i16
  %61 = add nuw nsw i64 %47, 2
  %62 = getelementptr inbounds [6 x i16], [6 x i16]* %6, i64 0, i64 %54
  store i16 %60, i16* %62, align 2
  %63 = getelementptr inbounds double, double* %48, i64 2
  %64 = add i64 %49, -2
  %65 = icmp eq i64 %64, 0
  br i1 %65, label %66, label %46

66:                                               ; preds = %46, %35
  %67 = phi i64 [ 0, %35 ], [ %61, %46 ]
  %68 = phi double* [ %37, %35 ], [ %63, %46 ]
  %69 = icmp eq i64 %42, 0
  br i1 %69, label %76, label %70

70:                                               ; preds = %66
  %71 = load double, double* %68, align 8
  %72 = fmul double %71, 6.553600e+04
  %73 = call double @llvm.round.f64(double %72) #12
  %74 = fptoui double %73 to i16
  %75 = getelementptr inbounds [6 x i16], [6 x i16]* %6, i64 0, i64 %67
  store i16 %74, i16* %75, align 2
  br label %76

76:                                               ; preds = %70, %66, %18
  %77 = icmp eq i32 %28, 0
  br i1 %77, label %118, label %78

78:                                               ; preds = %76
  %79 = sext i32 %28 to i64
  %80 = shl nsw i64 %79, 3
  %81 = add nsw i64 %80, -8
  %82 = lshr exact i64 %81, 3
  %83 = add nuw nsw i64 %82, 1
  %84 = and i64 %83, 1
  %85 = icmp eq i64 %81, 0
  br i1 %85, label %108, label %86

86:                                               ; preds = %78
  %87 = sub nuw nsw i64 %83, %84
  br label %88

88:                                               ; preds = %88, %86
  %89 = phi i64 [ 0, %86 ], [ %103, %88 ]
  %90 = phi double* [ %23, %86 ], [ %105, %88 ]
  %91 = phi i64 [ %87, %86 ], [ %106, %88 ]
  %92 = load double, double* %90, align 8
  %93 = fmul double %92, 6.553600e+04
  %94 = call double @llvm.round.f64(double %93) #12
  %95 = fptoui double %94 to i16
  %96 = or i64 %89, 1
  %97 = getelementptr inbounds [6 x i16], [6 x i16]* %7, i64 0, i64 %89
  store i16 %95, i16* %97, align 2
  %98 = getelementptr inbounds double, double* %90, i64 1
  %99 = load double, double* %98, align 8
  %100 = fmul double %99, 6.553600e+04
  %101 = call double @llvm.round.f64(double %100) #12
  %102 = fptoui double %101 to i16
  %103 = add nuw nsw i64 %89, 2
  %104 = getelementptr inbounds [6 x i16], [6 x i16]* %7, i64 0, i64 %96
  store i16 %102, i16* %104, align 2
  %105 = getelementptr inbounds double, double* %90, i64 2
  %106 = add i64 %91, -2
  %107 = icmp eq i64 %106, 0
  br i1 %107, label %108, label %88

108:                                              ; preds = %88, %78
  %109 = phi i64 [ 0, %78 ], [ %103, %88 ]
  %110 = phi double* [ %23, %78 ], [ %105, %88 ]
  %111 = icmp eq i64 %84, 0
  br i1 %111, label %118, label %112

112:                                              ; preds = %108
  %113 = load double, double* %110, align 8
  %114 = fmul double %113, 6.553600e+04
  %115 = call double @llvm.round.f64(double %114) #12
  %116 = fptoui double %115 to i16
  %117 = getelementptr inbounds [6 x i16], [6 x i16]* %7, i64 0, i64 %109
  store i16 %116, i16* %117, align 2
  br label %118

118:                                              ; preds = %112, %108, %76
  %119 = bitcast %struct.SkMask* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %119) #12
  call void @_ZN6SkMask18PrepareDestinationEiiRKS_(%struct.SkMask* nonnull sret %8, i32 %27, i32 %29, %struct.SkMask* dereferenceable(32) %1) #12
  %120 = bitcast %struct.SkMask* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %120, i8* nonnull align 8 %119, i64 29, i1 false) #12
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %119) #12
  %121 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 0
  %122 = load i8*, i8** %121, align 8
  %123 = icmp eq i8* %122, null
  br i1 %123, label %181, label %124

124:                                              ; preds = %118
  %125 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %2, i64 0, i32 0
  %126 = load i8*, i8** %125, align 8
  %127 = icmp eq i8* %126, null
  br i1 %127, label %128, label %131

128:                                              ; preds = %124
  %129 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %2, i64 0, i32 1
  %130 = bitcast %struct.SkIRect* %129 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %130, i8 0, i64 16, i1 false) #12
  br label %181

131:                                              ; preds = %124
  %132 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 1, i32 2
  %133 = load i32, i32* %132, align 4
  %134 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 1, i32 0
  %135 = load i32, i32* %134, align 4
  %136 = sub i32 %133, %135
  %137 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 1, i32 3
  %138 = load i32, i32* %137, align 4
  %139 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 1, i32 1
  %140 = load i32, i32* %139, align 4
  %141 = sub i32 %138, %140
  %142 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %2, i64 0, i32 1, i32 2
  %143 = load i32, i32* %142, align 4
  %144 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %2, i64 0, i32 1, i32 0
  %145 = load i32, i32* %144, align 4
  %146 = sub i32 %143, %145
  %147 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %2, i64 0, i32 1, i32 3
  %148 = load i32, i32* %147, align 4
  %149 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %2, i64 0, i32 1, i32 1
  %150 = load i32, i32* %149, align 4
  %151 = sub i32 %148, %150
  %152 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 2
  %153 = load i32, i32* %152, align 8
  %154 = zext i32 %153 to i64
  %155 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %2, i64 0, i32 2
  %156 = load i32, i32* %155, align 8
  %157 = zext i32 %156 to i64
  %158 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 3
  %159 = load i8, i8* %158, align 4
  switch i8 %159, label %172 [
    i8 0, label %160
    i8 1, label %163
    i8 3, label %166
    i8 4, label %169
  ]

160:                                              ; preds = %131
  %161 = sext i32 %27 to i64
  %162 = getelementptr inbounds i8, i8* %126, i64 %161
  call fastcc void @_ZL13direct_blur_yPFvPhPKhiEiiPtS1_miiS_m(void (i8*, i8*, i32)* nonnull @_ZL8bw_to_a8PhPKhi, i32 1, i32 %29, i16* nonnull %33, i8* nonnull %122, i64 %154, i32 %136, i32 %141, i8* %162, i64 %157) #12
  br label %173

163:                                              ; preds = %131
  %164 = sext i32 %27 to i64
  %165 = getelementptr inbounds i8, i8* %126, i64 %164
  call fastcc void @_ZL13direct_blur_yPFvPhPKhiEiiPtS1_miiS_m(void (i8*, i8*, i32)* null, i32 8, i32 %29, i16* nonnull %33, i8* nonnull %122, i64 %154, i32 %136, i32 %141, i8* %165, i64 %157) #12
  br label %173

166:                                              ; preds = %131
  %167 = sext i32 %27 to i64
  %168 = getelementptr inbounds i8, i8* %126, i64 %167
  call fastcc void @_ZL13direct_blur_yPFvPhPKhiEiiPtS1_miiS_m(void (i8*, i8*, i32)* nonnull @_ZL12argb32_to_a8PhPKhi, i32 32, i32 %29, i16* nonnull %33, i8* nonnull %122, i64 %154, i32 %136, i32 %141, i8* %168, i64 %157) #12
  br label %173

169:                                              ; preds = %131
  %170 = sext i32 %27 to i64
  %171 = getelementptr inbounds i8, i8* %126, i64 %170
  call fastcc void @_ZL13direct_blur_yPFvPhPKhiEiiPtS1_miiS_m(void (i8*, i8*, i32)* nonnull @_ZL9lcd_to_a8PhPKhi, i32 16, i32 %29, i16* nonnull %33, i8* nonnull %122, i64 %154, i32 %136, i32 %141, i8* %171, i64 %157) #12
  br label %173

172:                                              ; preds = %131
  call void (i8*, i32, i8*, ...) @_Z16SkAbort_FileLinePKciS0_z(i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str, i64 0, i64 0), i32 944, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.1, i64 0, i64 0)) #13
  unreachable

173:                                              ; preds = %169, %166, %163, %160
  %174 = phi i64 [ %170, %169 ], [ %167, %166 ], [ %164, %163 ], [ %161, %160 ]
  %175 = load i8*, i8** %125, align 8
  %176 = getelementptr inbounds i8, i8* %175, i64 %174
  switch i32 %26, label %181 [
    i32 2, label %177
    i32 3, label %178
    i32 4, label %179
    i32 5, label %180
  ]

177:                                              ; preds = %173
  call fastcc void @_ZL11blur_x_rectPFvRKN12_GLOBAL__N_14SkNxILi8EtEES3_S3_S3_S3_S3_PS1_S4_EPtPKhmiPhmii(void (%"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*)* nonnull @_ZL15blur_x_radius_1RKN12_GLOBAL__N_14SkNxILi8EtEES3_S3_S3_S3_S3_PS1_S4_, i16* nonnull %31, i8* %176, i64 %157, i32 %136, i8* %175, i64 %157, i32 %146, i32 %151) #12
  br label %181

178:                                              ; preds = %173
  call fastcc void @_ZL11blur_x_rectPFvRKN12_GLOBAL__N_14SkNxILi8EtEES3_S3_S3_S3_S3_PS1_S4_EPtPKhmiPhmii(void (%"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*)* nonnull @_ZL15blur_x_radius_2RKN12_GLOBAL__N_14SkNxILi8EtEES3_S3_S3_S3_S3_PS1_S4_, i16* nonnull %31, i8* %176, i64 %157, i32 %136, i8* %175, i64 %157, i32 %146, i32 %151) #12
  br label %181

179:                                              ; preds = %173
  call fastcc void @_ZL11blur_x_rectPFvRKN12_GLOBAL__N_14SkNxILi8EtEES3_S3_S3_S3_S3_PS1_S4_EPtPKhmiPhmii(void (%"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*)* nonnull @_ZL15blur_x_radius_3RKN12_GLOBAL__N_14SkNxILi8EtEES3_S3_S3_S3_S3_PS1_S4_, i16* nonnull %31, i8* %176, i64 %157, i32 %136, i8* %175, i64 %157, i32 %146, i32 %151) #12
  br label %181

180:                                              ; preds = %173
  call fastcc void @_ZL11blur_x_rectPFvRKN12_GLOBAL__N_14SkNxILi8EtEES3_S3_S3_S3_S3_PS1_S4_EPtPKhmiPhmii(void (%"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*)* nonnull @_ZL15blur_x_radius_4RKN12_GLOBAL__N_14SkNxILi8EtEES3_S3_S3_S3_S3_PS1_S4_, i16* nonnull %31, i8* %176, i64 %157, i32 %136, i8* %175, i64 %157, i32 %146, i32 %151) #12
  br label %181

181:                                              ; preds = %118, %128, %173, %177, %178, %179, %180
  %182 = phi i32 [ 0, %128 ], [ %27, %118 ], [ %27, %173 ], [ 1, %177 ], [ 2, %178 ], [ 3, %179 ], [ 4, %180 ]
  %183 = phi i32 [ 0, %128 ], [ %29, %118 ], [ %29, %173 ], [ %29, %177 ], [ %29, %178 ], [ %29, %179 ], [ %29, %180 ]
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %32) #12
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %30) #12
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %22) #12
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %19) #12
  br label %1198

184:                                              ; preds = %14, %3
  %185 = getelementptr inbounds %class.SkSTArenaAlloc, %class.SkSTArenaAlloc* %9, i64 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 1056, i8* nonnull %185) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %185, i8 -86, i64 1056, i1 false)
  %186 = getelementptr inbounds %class.SkSTArenaAlloc, %class.SkSTArenaAlloc* %9, i64 0, i32 0, i32 0, i64 1024
  %187 = bitcast i8* %186 to %class.SkArenaAlloc*
  call void @_ZN12SkArenaAllocC2EPcmm(%class.SkArenaAlloc* %187, i8* nonnull %185, i64 1024, i64 1024) #12
  %188 = load double, double* %11, align 8
  %189 = fmul double %188, 3.000000e+00
  %190 = fmul double %189, 0x40040D931FF62705
  %191 = fmul double %190, 2.500000e-01
  %192 = fadd double %191, 5.000000e-01
  %193 = call double @llvm.floor.f64(double %192) #12
  %194 = fptosi double %193 to i32
  %195 = icmp sgt i32 %194, 1
  %196 = select i1 %195, i32 %194, i32 1
  %197 = add nsw i32 %196, -1
  %198 = and i32 %196, 1
  %199 = icmp ne i32 %198, 0
  %200 = select i1 %199, i32 %197, i32 %196
  br i1 %199, label %201, label %204

201:                                              ; preds = %184
  %202 = sdiv i32 %197, 2
  %203 = mul nsw i32 %202, 3
  br label %208

204:                                              ; preds = %184
  %205 = lshr i32 %196, 1
  %206 = mul nuw nsw i32 %205, 3
  %207 = add nsw i32 %206, -1
  br label %208

208:                                              ; preds = %201, %204
  %209 = phi i32 [ %203, %201 ], [ %207, %204 ]
  %210 = shl nsw i32 %209, 1
  %211 = or i32 %210, 1
  %212 = mul nsw i32 %196, %196
  %213 = mul nsw i32 %212, %196
  %214 = select i1 %199, i32 0, i32 %212
  %215 = add nuw nsw i32 %214, %213
  %216 = sitofp i32 %215 to double
  %217 = fdiv double 1.000000e+00, %216
  %218 = fmul double %217, 0x41F0000000000000
  %219 = call double @llvm.round.f64(double %218) #12
  %220 = fptoui double %219 to i64
  %221 = getelementptr inbounds %class.SkMaskBlurFilter, %class.SkMaskBlurFilter* %0, i64 0, i32 1
  %222 = load double, double* %221, align 8
  %223 = fmul double %222, 3.000000e+00
  %224 = fmul double %223, 0x40040D931FF62705
  %225 = fmul double %224, 2.500000e-01
  %226 = fadd double %225, 5.000000e-01
  %227 = call double @llvm.floor.f64(double %226) #12
  %228 = fptosi double %227 to i32
  %229 = icmp sgt i32 %228, 1
  %230 = select i1 %229, i32 %228, i32 1
  %231 = add nsw i32 %230, -1
  %232 = and i32 %230, 1
  %233 = icmp ne i32 %232, 0
  %234 = select i1 %233, i32 %231, i32 %230
  br i1 %233, label %235, label %238

235:                                              ; preds = %208
  %236 = sdiv i32 %231, 2
  %237 = mul nsw i32 %236, 3
  br label %242

238:                                              ; preds = %208
  %239 = lshr i32 %230, 1
  %240 = mul nuw nsw i32 %239, 3
  %241 = add nsw i32 %240, -1
  br label %242

242:                                              ; preds = %235, %238
  %243 = phi i32 [ %237, %235 ], [ %241, %238 ]
  %244 = shl nsw i32 %243, 1
  %245 = or i32 %244, 1
  %246 = mul nsw i32 %230, %230
  %247 = mul nsw i32 %246, %230
  %248 = select i1 %233, i32 0, i32 %246
  %249 = add nuw nsw i32 %248, %247
  %250 = sitofp i32 %249 to double
  %251 = fdiv double 1.000000e+00, %250
  %252 = fmul double %251, 0x41F0000000000000
  %253 = call double @llvm.round.f64(double %252) #12
  %254 = fptoui double %253 to i64
  %255 = bitcast %struct.SkMask* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %255) #12
  call void @_ZN6SkMask18PrepareDestinationEiiRKS_(%struct.SkMask* nonnull sret %10, i32 %209, i32 %243, %struct.SkMask* dereferenceable(32) %1) #12
  %256 = bitcast %struct.SkMask* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %256, i8* nonnull align 8 %255, i64 29, i1 false)
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %255) #12
  %257 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 0
  %258 = load i8*, i8** %257, align 8
  %259 = icmp eq i8* %258, null
  br i1 %259, label %1195, label %260

260:                                              ; preds = %242
  %261 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %2, i64 0, i32 0
  %262 = load i8*, i8** %261, align 8
  %263 = icmp eq i8* %262, null
  br i1 %263, label %264, label %267

264:                                              ; preds = %260
  %265 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %2, i64 0, i32 1
  %266 = bitcast %struct.SkIRect* %265 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %266, i8 0, i64 16, i1 false) #12
  br label %1195

267:                                              ; preds = %260
  %268 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 1, i32 2
  %269 = load i32, i32* %268, align 4
  %270 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 1, i32 0
  %271 = load i32, i32* %270, align 4
  %272 = sub i32 %269, %271
  %273 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 1, i32 3
  %274 = load i32, i32* %273, align 4
  %275 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 1, i32 1
  %276 = load i32, i32* %275, align 4
  %277 = sub i32 %274, %276
  %278 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %2, i64 0, i32 1, i32 2
  %279 = load i32, i32* %278, align 4
  %280 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %2, i64 0, i32 1, i32 0
  %281 = load i32, i32* %280, align 4
  %282 = sub i32 %279, %281
  %283 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %2, i64 0, i32 1, i32 3
  %284 = load i32, i32* %283, align 4
  %285 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %2, i64 0, i32 1, i32 1
  %286 = load i32, i32* %285, align 4
  %287 = sub i32 %284, %286
  %288 = shl i32 %197, 1
  %289 = add nsw i32 %200, %288
  %290 = sext i32 %289 to i64
  %291 = shl i32 %231, 1
  %292 = add nsw i32 %234, %291
  %293 = sext i32 %292 to i64
  %294 = icmp ult i64 %290, %293
  %295 = select i1 %294, i64 %293, i64 %290
  %296 = icmp ult i64 %295, 4294967296
  br i1 %296, label %298, label %297

297:                                              ; preds = %267
  call void @abort() #13
  unreachable

298:                                              ; preds = %267
  %299 = trunc i64 %295 to i32
  %300 = icmp ult i32 %299, 1073741824
  br i1 %300, label %302, label %301

301:                                              ; preds = %298
  call void @abort() #13
  unreachable

302:                                              ; preds = %298
  %303 = shl nsw i64 %295, 2
  %304 = getelementptr inbounds %class.SkSTArenaAlloc, %class.SkSTArenaAlloc* %9, i64 0, i32 0, i32 0, i64 1032
  %305 = bitcast i8* %304 to i8**
  %306 = bitcast i8* %304 to i64*
  %307 = load i64, i64* %306, align 8
  %308 = sub i64 0, %307
  %309 = and i64 %308, 3
  %310 = and i64 %303, 4294967292
  %311 = or i64 %309, %310
  %312 = getelementptr inbounds %class.SkSTArenaAlloc, %class.SkSTArenaAlloc* %9, i64 0, i32 0, i32 0, i64 1040
  %313 = bitcast i8* %312 to i64*
  %314 = load i64, i64* %313, align 8
  %315 = sub i64 %314, %307
  %316 = icmp ugt i64 %311, %315
  br i1 %316, label %317, label %322

317:                                              ; preds = %302
  %318 = trunc i64 %303 to i32
  call void @_ZN12SkArenaAlloc11ensureSpaceEjj(%class.SkArenaAlloc* %187, i32 %318, i32 4) #12
  %319 = load i64, i64* %306, align 8
  %320 = sub i64 0, %319
  %321 = and i64 %320, 3
  br label %322

322:                                              ; preds = %302, %317
  %323 = phi i64 [ %319, %317 ], [ %307, %302 ]
  %324 = phi i64 [ %321, %317 ], [ %309, %302 ]
  %325 = inttoptr i64 %323 to i8*
  %326 = getelementptr inbounds i8, i8* %325, i64 %324
  %327 = getelementptr inbounds i8, i8* %326, i64 %310
  store i8* %327, i8** %305, align 8
  %328 = bitcast i8* %326 to i32*
  %329 = sdiv i32 2147483647, %277
  %330 = icmp sgt i32 %282, %329
  %331 = ptrtoint i8* %327 to i64
  br i1 %330, label %1195, label %332

332:                                              ; preds = %322
  %333 = mul nsw i32 %282, %277
  %334 = sext i32 %333 to i64
  %335 = icmp sgt i32 %333, -1
  br i1 %335, label %337, label %336

336:                                              ; preds = %332
  call void @abort() #13
  unreachable

337:                                              ; preds = %332
  %338 = and i64 %334, 4294967295
  %339 = load i64, i64* %313, align 8
  %340 = sub i64 %339, %331
  %341 = icmp ugt i64 %338, %340
  br i1 %341, label %342, label %345

342:                                              ; preds = %337
  call void @_ZN12SkArenaAlloc11ensureSpaceEjj(%class.SkArenaAlloc* %187, i32 %333, i32 1) #12
  %343 = bitcast i8* %304 to i8**
  %344 = load i8*, i8** %343, align 8
  br label %345

345:                                              ; preds = %337, %342
  %346 = phi i8* [ %344, %342 ], [ %327, %337 ]
  %347 = getelementptr inbounds i8, i8* %346, i64 %338
  store i8* %347, i8** %305, align 8
  %348 = sext i32 %197 to i64
  %349 = getelementptr inbounds i32, i32* %328, i64 %348
  %350 = getelementptr inbounds i32, i32* %349, i64 %348
  %351 = sext i32 %200 to i64
  %352 = getelementptr inbounds i32, i32* %350, i64 %351
  %353 = icmp sgt i32 %211, %272
  %354 = sub nsw i32 %211, %272
  %355 = select i1 %353, i32 %354, i32 0
  %356 = ptrtoint i32* %352 to i64
  %357 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 3
  %358 = load i8, i8* %357, align 4
  switch i8 %358, label %1032 [
    i8 0, label %359
    i8 1, label %533
    i8 3, label %682
    i8 4, label %840
  ]

359:                                              ; preds = %345
  %360 = load i8*, i8** %257, align 8
  %361 = srem i32 %272, 8
  %362 = sdiv i32 %272, 8
  %363 = sub nsw i32 7, %361
  %364 = icmp sgt i32 %277, 0
  br i1 %364, label %365, label %1033

365:                                              ; preds = %359
  %366 = sext i32 %362 to i64
  %367 = getelementptr inbounds i8, i8* %360, i64 %366
  %368 = ptrtoint i8* %326 to i64
  %369 = sub i64 %356, %368
  %370 = sext i32 %277 to i64
  %371 = icmp sgt i32 %355, 0
  %372 = sub nsw i64 0, %370
  %373 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 2
  %374 = zext i32 %277 to i64
  br label %375

375:                                              ; preds = %526, %365
  %376 = phi i64 [ 0, %365 ], [ %527, %526 ]
  %377 = phi i8* [ %367, %365 ], [ %531, %526 ]
  %378 = phi i8* [ %360, %365 ], [ %530, %526 ]
  %379 = ptrtoint i8* %378 to i64
  %380 = getelementptr inbounds i8, i8* %346, i64 %376
  call void @llvm.memset.p0i8.i64(i8* align 4 %326, i8 0, i64 %369, i1 false) #12
  br label %381

381:                                              ; preds = %400, %375
  %382 = phi i64 [ %379, %375 ], [ %434, %400 ]
  %383 = phi i32 [ 7, %375 ], [ %435, %400 ]
  %384 = phi i8* [ %380, %375 ], [ %436, %400 ]
  %385 = phi i32* [ %328, %375 ], [ %429, %400 ]
  %386 = phi i32* [ %349, %375 ], [ %424, %400 ]
  %387 = phi i32* [ %350, %375 ], [ %419, %400 ]
  %388 = phi i32 [ 0, %375 ], [ %426, %400 ]
  %389 = phi i32 [ 0, %375 ], [ %421, %400 ]
  %390 = phi i32 [ 0, %375 ], [ %416, %400 ]
  %391 = inttoptr i64 %382 to i8*
  %392 = icmp ugt i8* %377, %391
  br i1 %392, label %400, label %393

393:                                              ; preds = %381
  %394 = icmp eq i8* %377, %391
  %395 = icmp sgt i32 %383, %363
  %396 = and i1 %394, %395
  br i1 %396, label %400, label %397

397:                                              ; preds = %393
  %398 = ptrtoint i8* %377 to i64
  %399 = getelementptr inbounds i8, i8* %380, i64 %334
  br i1 %371, label %443, label %437

400:                                              ; preds = %393, %381
  %401 = load i8, i8* %391, align 1
  %402 = zext i8 %401 to i32
  %403 = shl i32 1, %383
  %404 = and i32 %403, %402
  %405 = icmp eq i32 %404, 0
  %406 = select i1 %405, i32 0, i32 255
  %407 = add i32 %406, %388
  %408 = add i32 %407, %389
  %409 = add i32 %408, %390
  %410 = zext i32 %409 to i64
  %411 = mul i64 %410, %220
  %412 = add i64 %411, 2147483648
  %413 = lshr i64 %412, 32
  %414 = trunc i64 %413 to i8
  store i8 %414, i8* %384, align 1
  %415 = load i32, i32* %387, align 4
  %416 = sub i32 %409, %415
  store i32 %408, i32* %387, align 4
  %417 = getelementptr inbounds i32, i32* %387, i64 1
  %418 = icmp ult i32* %417, %352
  %419 = select i1 %418, i32* %417, i32* %350
  %420 = load i32, i32* %386, align 4
  %421 = sub i32 %408, %420
  store i32 %407, i32* %386, align 4
  %422 = getelementptr inbounds i32, i32* %386, i64 1
  %423 = icmp ult i32* %422, %350
  %424 = select i1 %423, i32* %422, i32* %349
  %425 = load i32, i32* %385, align 4
  %426 = sub i32 %407, %425
  store i32 %406, i32* %385, align 4
  %427 = getelementptr inbounds i32, i32* %385, i64 1
  %428 = icmp ult i32* %427, %349
  %429 = select i1 %428, i32* %427, i32* %328
  %430 = icmp sgt i32 %383, 0
  %431 = add nsw i32 %383, -1
  %432 = getelementptr inbounds i8, i8* %391, i64 1
  %433 = ptrtoint i8* %432 to i64
  %434 = select i1 %430, i64 %382, i64 %433
  %435 = select i1 %430, i32 %431, i32 7
  %436 = getelementptr inbounds i8, i8* %384, i64 %370
  br label %381

437:                                              ; preds = %443, %397
  %438 = phi i8* [ %384, %397 ], [ %474, %443 ]
  %439 = phi i32* [ %385, %397 ], [ %473, %443 ]
  %440 = phi i32* [ %386, %397 ], [ %468, %443 ]
  %441 = phi i32* [ %387, %397 ], [ %463, %443 ]
  call void @llvm.memset.p0i8.i64(i8* align 4 %326, i8 0, i64 %369, i1 false) #12
  %442 = icmp ult i8* %438, %399
  br i1 %442, label %477, label %526

443:                                              ; preds = %397, %443
  %444 = phi i32 [ %475, %443 ], [ 0, %397 ]
  %445 = phi i32 [ %460, %443 ], [ %390, %397 ]
  %446 = phi i32 [ %465, %443 ], [ %389, %397 ]
  %447 = phi i32 [ %470, %443 ], [ %388, %397 ]
  %448 = phi i32* [ %463, %443 ], [ %387, %397 ]
  %449 = phi i32* [ %468, %443 ], [ %386, %397 ]
  %450 = phi i32* [ %473, %443 ], [ %385, %397 ]
  %451 = phi i8* [ %474, %443 ], [ %384, %397 ]
  %452 = add i32 %447, %446
  %453 = add i32 %452, %445
  %454 = zext i32 %453 to i64
  %455 = mul i64 %454, %220
  %456 = add i64 %455, 2147483648
  %457 = lshr i64 %456, 32
  %458 = trunc i64 %457 to i8
  store i8 %458, i8* %451, align 1
  %459 = load i32, i32* %448, align 4
  %460 = sub i32 %453, %459
  store i32 %452, i32* %448, align 4
  %461 = getelementptr inbounds i32, i32* %448, i64 1
  %462 = icmp ult i32* %461, %352
  %463 = select i1 %462, i32* %461, i32* %350
  %464 = load i32, i32* %449, align 4
  %465 = sub i32 %452, %464
  store i32 %447, i32* %449, align 4
  %466 = getelementptr inbounds i32, i32* %449, i64 1
  %467 = icmp ult i32* %466, %350
  %468 = select i1 %467, i32* %466, i32* %349
  %469 = load i32, i32* %450, align 4
  %470 = sub i32 %447, %469
  store i32 0, i32* %450, align 4
  %471 = getelementptr inbounds i32, i32* %450, i64 1
  %472 = icmp ult i32* %471, %349
  %473 = select i1 %472, i32* %471, i32* %328
  %474 = getelementptr inbounds i8, i8* %451, i64 %370
  %475 = add nuw nsw i32 %444, 1
  %476 = icmp slt i32 %475, %355
  br i1 %476, label %443, label %437

477:                                              ; preds = %437, %477
  %478 = phi i8* [ %487, %477 ], [ %399, %437 ]
  %479 = phi i32 [ %511, %477 ], [ 0, %437 ]
  %480 = phi i32 [ %516, %477 ], [ 0, %437 ]
  %481 = phi i32 [ %521, %477 ], [ 0, %437 ]
  %482 = phi i32* [ %514, %477 ], [ %441, %437 ]
  %483 = phi i32* [ %519, %477 ], [ %440, %437 ]
  %484 = phi i32* [ %524, %477 ], [ %439, %437 ]
  %485 = phi i64 [ %493, %477 ], [ %398, %437 ]
  %486 = phi i32 [ %494, %477 ], [ %363, %437 ]
  %487 = getelementptr inbounds i8, i8* %478, i64 %372
  %488 = icmp slt i32 %486, 7
  %489 = add nsw i32 %486, 1
  %490 = inttoptr i64 %485 to i8*
  %491 = getelementptr inbounds i8, i8* %490, i64 -1
  %492 = ptrtoint i8* %491 to i64
  %493 = select i1 %488, i64 %485, i64 %492
  %494 = select i1 %488, i32 %489, i32 0
  %495 = inttoptr i64 %493 to i8*
  %496 = load i8, i8* %495, align 1
  %497 = zext i8 %496 to i32
  %498 = shl i32 1, %494
  %499 = and i32 %498, %497
  %500 = icmp eq i32 %499, 0
  %501 = select i1 %500, i32 0, i32 255
  %502 = add i32 %501, %481
  %503 = add i32 %502, %480
  %504 = add i32 %503, %479
  %505 = zext i32 %504 to i64
  %506 = mul i64 %505, %220
  %507 = add i64 %506, 2147483648
  %508 = lshr i64 %507, 32
  %509 = trunc i64 %508 to i8
  store i8 %509, i8* %487, align 1
  %510 = load i32, i32* %482, align 4
  %511 = sub i32 %504, %510
  store i32 %503, i32* %482, align 4
  %512 = getelementptr inbounds i32, i32* %482, i64 1
  %513 = icmp ult i32* %512, %352
  %514 = select i1 %513, i32* %512, i32* %350
  %515 = load i32, i32* %483, align 4
  %516 = sub i32 %503, %515
  store i32 %502, i32* %483, align 4
  %517 = getelementptr inbounds i32, i32* %483, i64 1
  %518 = icmp ult i32* %517, %350
  %519 = select i1 %518, i32* %517, i32* %349
  %520 = load i32, i32* %484, align 4
  %521 = sub i32 %502, %520
  store i32 %501, i32* %484, align 4
  %522 = getelementptr inbounds i32, i32* %484, i64 1
  %523 = icmp ult i32* %522, %349
  %524 = select i1 %523, i32* %522, i32* %328
  %525 = icmp ugt i8* %487, %438
  br i1 %525, label %477, label %526

526:                                              ; preds = %477, %437
  %527 = add nuw nsw i64 %376, 1
  %528 = load i32, i32* %373, align 8
  %529 = zext i32 %528 to i64
  %530 = getelementptr inbounds i8, i8* %378, i64 %529
  %531 = getelementptr inbounds i8, i8* %377, i64 %529
  %532 = icmp eq i64 %527, %374
  br i1 %532, label %1033, label %375

533:                                              ; preds = %345
  %534 = load i8*, i8** %257, align 8
  %535 = icmp sgt i32 %277, 0
  br i1 %535, label %536, label %1033

536:                                              ; preds = %533
  %537 = sext i32 %272 to i64
  %538 = getelementptr inbounds i8, i8* %534, i64 %537
  %539 = ptrtoint i8* %326 to i64
  %540 = sub i64 %356, %539
  %541 = sext i32 %277 to i64
  %542 = icmp sgt i32 %355, 0
  %543 = sub nsw i64 0, %541
  %544 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 2
  %545 = zext i32 %277 to i64
  br label %546

546:                                              ; preds = %675, %536
  %547 = phi i64 [ 0, %536 ], [ %676, %675 ]
  %548 = phi i8* [ %538, %536 ], [ %680, %675 ]
  %549 = phi i8* [ %534, %536 ], [ %679, %675 ]
  %550 = getelementptr inbounds i8, i8* %346, i64 %547
  %551 = getelementptr inbounds i8, i8* %550, i64 %334
  call void @llvm.memset.p0i8.i64(i8* align 4 %326, i8 0, i64 %540, i1 false) #12
  %552 = icmp ult i8* %549, %548
  br i1 %552, label %561, label %553

553:                                              ; preds = %561, %546
  %554 = phi i8* [ %550, %546 ], [ %596, %561 ]
  %555 = phi i32* [ %328, %546 ], [ %594, %561 ]
  %556 = phi i32* [ %349, %546 ], [ %589, %561 ]
  %557 = phi i32* [ %350, %546 ], [ %584, %561 ]
  %558 = phi i32 [ 0, %546 ], [ %591, %561 ]
  %559 = phi i32 [ 0, %546 ], [ %586, %561 ]
  %560 = phi i32 [ 0, %546 ], [ %581, %561 ]
  br i1 %542, label %604, label %598

561:                                              ; preds = %546, %561
  %562 = phi i32 [ %581, %561 ], [ 0, %546 ]
  %563 = phi i32 [ %586, %561 ], [ 0, %546 ]
  %564 = phi i32 [ %591, %561 ], [ 0, %546 ]
  %565 = phi i32* [ %584, %561 ], [ %350, %546 ]
  %566 = phi i32* [ %589, %561 ], [ %349, %546 ]
  %567 = phi i32* [ %594, %561 ], [ %328, %546 ]
  %568 = phi i8* [ %596, %561 ], [ %550, %546 ]
  %569 = phi i8* [ %595, %561 ], [ %549, %546 ]
  %570 = load i8, i8* %569, align 1
  %571 = zext i8 %570 to i32
  %572 = add i32 %564, %571
  %573 = add i32 %572, %563
  %574 = add i32 %573, %562
  %575 = zext i32 %574 to i64
  %576 = mul i64 %575, %220
  %577 = add i64 %576, 2147483648
  %578 = lshr i64 %577, 32
  %579 = trunc i64 %578 to i8
  store i8 %579, i8* %568, align 1
  %580 = load i32, i32* %565, align 4
  %581 = sub i32 %574, %580
  store i32 %573, i32* %565, align 4
  %582 = getelementptr inbounds i32, i32* %565, i64 1
  %583 = icmp ult i32* %582, %352
  %584 = select i1 %583, i32* %582, i32* %350
  %585 = load i32, i32* %566, align 4
  %586 = sub i32 %573, %585
  store i32 %572, i32* %566, align 4
  %587 = getelementptr inbounds i32, i32* %566, i64 1
  %588 = icmp ult i32* %587, %350
  %589 = select i1 %588, i32* %587, i32* %349
  %590 = load i32, i32* %567, align 4
  %591 = sub i32 %572, %590
  store i32 %571, i32* %567, align 4
  %592 = getelementptr inbounds i32, i32* %567, i64 1
  %593 = icmp ult i32* %592, %349
  %594 = select i1 %593, i32* %592, i32* %328
  %595 = getelementptr inbounds i8, i8* %569, i64 1
  %596 = getelementptr inbounds i8, i8* %568, i64 %541
  %597 = icmp eq i8* %595, %548
  br i1 %597, label %553, label %561

598:                                              ; preds = %604, %553
  %599 = phi i8* [ %554, %553 ], [ %635, %604 ]
  %600 = phi i32* [ %555, %553 ], [ %634, %604 ]
  %601 = phi i32* [ %556, %553 ], [ %629, %604 ]
  %602 = phi i32* [ %557, %553 ], [ %624, %604 ]
  call void @llvm.memset.p0i8.i64(i8* align 4 %326, i8 0, i64 %540, i1 false) #12
  %603 = icmp ult i8* %599, %551
  br i1 %603, label %638, label %675

604:                                              ; preds = %553, %604
  %605 = phi i32 [ %636, %604 ], [ 0, %553 ]
  %606 = phi i32 [ %621, %604 ], [ %560, %553 ]
  %607 = phi i32 [ %626, %604 ], [ %559, %553 ]
  %608 = phi i32 [ %631, %604 ], [ %558, %553 ]
  %609 = phi i32* [ %624, %604 ], [ %557, %553 ]
  %610 = phi i32* [ %629, %604 ], [ %556, %553 ]
  %611 = phi i32* [ %634, %604 ], [ %555, %553 ]
  %612 = phi i8* [ %635, %604 ], [ %554, %553 ]
  %613 = add i32 %608, %607
  %614 = add i32 %613, %606
  %615 = zext i32 %614 to i64
  %616 = mul i64 %615, %220
  %617 = add i64 %616, 2147483648
  %618 = lshr i64 %617, 32
  %619 = trunc i64 %618 to i8
  store i8 %619, i8* %612, align 1
  %620 = load i32, i32* %609, align 4
  %621 = sub i32 %614, %620
  store i32 %613, i32* %609, align 4
  %622 = getelementptr inbounds i32, i32* %609, i64 1
  %623 = icmp ult i32* %622, %352
  %624 = select i1 %623, i32* %622, i32* %350
  %625 = load i32, i32* %610, align 4
  %626 = sub i32 %613, %625
  store i32 %608, i32* %610, align 4
  %627 = getelementptr inbounds i32, i32* %610, i64 1
  %628 = icmp ult i32* %627, %350
  %629 = select i1 %628, i32* %627, i32* %349
  %630 = load i32, i32* %611, align 4
  %631 = sub i32 %608, %630
  store i32 0, i32* %611, align 4
  %632 = getelementptr inbounds i32, i32* %611, i64 1
  %633 = icmp ult i32* %632, %349
  %634 = select i1 %633, i32* %632, i32* %328
  %635 = getelementptr inbounds i8, i8* %612, i64 %541
  %636 = add nuw nsw i32 %605, 1
  %637 = icmp slt i32 %636, %355
  br i1 %637, label %604, label %598

638:                                              ; preds = %598, %638
  %639 = phi i8* [ %647, %638 ], [ %551, %598 ]
  %640 = phi i32 [ %660, %638 ], [ 0, %598 ]
  %641 = phi i32 [ %665, %638 ], [ 0, %598 ]
  %642 = phi i32 [ %670, %638 ], [ 0, %598 ]
  %643 = phi i32* [ %663, %638 ], [ %602, %598 ]
  %644 = phi i32* [ %668, %638 ], [ %601, %598 ]
  %645 = phi i32* [ %673, %638 ], [ %600, %598 ]
  %646 = phi i8* [ %648, %638 ], [ %548, %598 ]
  %647 = getelementptr inbounds i8, i8* %639, i64 %543
  %648 = getelementptr inbounds i8, i8* %646, i64 -1
  %649 = load i8, i8* %648, align 1
  %650 = zext i8 %649 to i32
  %651 = add i32 %642, %650
  %652 = add i32 %651, %641
  %653 = add i32 %652, %640
  %654 = zext i32 %653 to i64
  %655 = mul i64 %654, %220
  %656 = add i64 %655, 2147483648
  %657 = lshr i64 %656, 32
  %658 = trunc i64 %657 to i8
  store i8 %658, i8* %647, align 1
  %659 = load i32, i32* %643, align 4
  %660 = sub i32 %653, %659
  store i32 %652, i32* %643, align 4
  %661 = getelementptr inbounds i32, i32* %643, i64 1
  %662 = icmp ult i32* %661, %352
  %663 = select i1 %662, i32* %661, i32* %350
  %664 = load i32, i32* %644, align 4
  %665 = sub i32 %652, %664
  store i32 %651, i32* %644, align 4
  %666 = getelementptr inbounds i32, i32* %644, i64 1
  %667 = icmp ult i32* %666, %350
  %668 = select i1 %667, i32* %666, i32* %349
  %669 = load i32, i32* %645, align 4
  %670 = sub i32 %651, %669
  store i32 %650, i32* %645, align 4
  %671 = getelementptr inbounds i32, i32* %645, i64 1
  %672 = icmp ult i32* %671, %349
  %673 = select i1 %672, i32* %671, i32* %328
  %674 = icmp ugt i8* %647, %599
  br i1 %674, label %638, label %675

675:                                              ; preds = %638, %598
  %676 = add nuw nsw i64 %547, 1
  %677 = load i32, i32* %544, align 8
  %678 = zext i32 %677 to i64
  %679 = getelementptr inbounds i8, i8* %549, i64 %678
  %680 = getelementptr inbounds i8, i8* %548, i64 %678
  %681 = icmp eq i64 %676, %545
  br i1 %681, label %1033, label %546

682:                                              ; preds = %345
  %683 = bitcast %struct.SkMask* %1 to i32**
  %684 = load i32*, i32** %683, align 8
  %685 = icmp sgt i32 %277, 0
  br i1 %685, label %686, label %1033

686:                                              ; preds = %682
  %687 = sext i32 %272 to i64
  %688 = getelementptr inbounds i32, i32* %684, i64 %687
  %689 = ptrtoint i32* %688 to i64
  %690 = ptrtoint i32* %684 to i64
  %691 = ptrtoint i8* %326 to i64
  %692 = sub i64 %356, %691
  %693 = sext i32 %277 to i64
  %694 = icmp sgt i32 %355, 0
  %695 = sub nsw i64 0, %693
  %696 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 2
  %697 = zext i32 %277 to i64
  br label %698

698:                                              ; preds = %829, %686
  %699 = phi i64 [ 0, %686 ], [ %830, %829 ]
  %700 = phi i64 [ %689, %686 ], [ %838, %829 ]
  %701 = phi i64 [ %690, %686 ], [ %835, %829 ]
  %702 = getelementptr inbounds i8, i8* %346, i64 %699
  %703 = getelementptr inbounds i8, i8* %702, i64 %334
  call void @llvm.memset.p0i8.i64(i8* align 4 %326, i8 0, i64 %692, i1 false) #12
  %704 = inttoptr i64 %701 to i32*
  %705 = inttoptr i64 %700 to i32*
  %706 = icmp ult i32* %704, %705
  br i1 %706, label %715, label %707

707:                                              ; preds = %715, %698
  %708 = phi i8* [ %702, %698 ], [ %750, %715 ]
  %709 = phi i32* [ %328, %698 ], [ %748, %715 ]
  %710 = phi i32* [ %349, %698 ], [ %743, %715 ]
  %711 = phi i32* [ %350, %698 ], [ %738, %715 ]
  %712 = phi i32 [ 0, %698 ], [ %745, %715 ]
  %713 = phi i32 [ 0, %698 ], [ %740, %715 ]
  %714 = phi i32 [ 0, %698 ], [ %735, %715 ]
  br i1 %694, label %758, label %752

715:                                              ; preds = %698, %715
  %716 = phi i32 [ %735, %715 ], [ 0, %698 ]
  %717 = phi i32 [ %740, %715 ], [ 0, %698 ]
  %718 = phi i32 [ %745, %715 ], [ 0, %698 ]
  %719 = phi i32* [ %738, %715 ], [ %350, %698 ]
  %720 = phi i32* [ %743, %715 ], [ %349, %698 ]
  %721 = phi i32* [ %748, %715 ], [ %328, %698 ]
  %722 = phi i8* [ %750, %715 ], [ %702, %698 ]
  %723 = phi i32* [ %749, %715 ], [ %704, %698 ]
  %724 = load i32, i32* %723, align 4
  %725 = lshr i32 %724, 24
  %726 = add i32 %725, %718
  %727 = add i32 %726, %717
  %728 = add i32 %727, %716
  %729 = zext i32 %728 to i64
  %730 = mul i64 %729, %220
  %731 = add i64 %730, 2147483648
  %732 = lshr i64 %731, 32
  %733 = trunc i64 %732 to i8
  store i8 %733, i8* %722, align 1
  %734 = load i32, i32* %719, align 4
  %735 = sub i32 %728, %734
  store i32 %727, i32* %719, align 4
  %736 = getelementptr inbounds i32, i32* %719, i64 1
  %737 = icmp ult i32* %736, %352
  %738 = select i1 %737, i32* %736, i32* %350
  %739 = load i32, i32* %720, align 4
  %740 = sub i32 %727, %739
  store i32 %726, i32* %720, align 4
  %741 = getelementptr inbounds i32, i32* %720, i64 1
  %742 = icmp ult i32* %741, %350
  %743 = select i1 %742, i32* %741, i32* %349
  %744 = load i32, i32* %721, align 4
  %745 = sub i32 %726, %744
  store i32 %725, i32* %721, align 4
  %746 = getelementptr inbounds i32, i32* %721, i64 1
  %747 = icmp ult i32* %746, %349
  %748 = select i1 %747, i32* %746, i32* %328
  %749 = getelementptr inbounds i32, i32* %723, i64 1
  %750 = getelementptr inbounds i8, i8* %722, i64 %693
  %751 = icmp ult i32* %749, %705
  br i1 %751, label %715, label %707

752:                                              ; preds = %758, %707
  %753 = phi i8* [ %708, %707 ], [ %789, %758 ]
  %754 = phi i32* [ %709, %707 ], [ %788, %758 ]
  %755 = phi i32* [ %710, %707 ], [ %783, %758 ]
  %756 = phi i32* [ %711, %707 ], [ %778, %758 ]
  call void @llvm.memset.p0i8.i64(i8* align 4 %326, i8 0, i64 %692, i1 false) #12
  %757 = icmp ult i8* %753, %703
  br i1 %757, label %792, label %829

758:                                              ; preds = %707, %758
  %759 = phi i32 [ %790, %758 ], [ 0, %707 ]
  %760 = phi i32 [ %775, %758 ], [ %714, %707 ]
  %761 = phi i32 [ %780, %758 ], [ %713, %707 ]
  %762 = phi i32 [ %785, %758 ], [ %712, %707 ]
  %763 = phi i32* [ %778, %758 ], [ %711, %707 ]
  %764 = phi i32* [ %783, %758 ], [ %710, %707 ]
  %765 = phi i32* [ %788, %758 ], [ %709, %707 ]
  %766 = phi i8* [ %789, %758 ], [ %708, %707 ]
  %767 = add i32 %762, %761
  %768 = add i32 %767, %760
  %769 = zext i32 %768 to i64
  %770 = mul i64 %769, %220
  %771 = add i64 %770, 2147483648
  %772 = lshr i64 %771, 32
  %773 = trunc i64 %772 to i8
  store i8 %773, i8* %766, align 1
  %774 = load i32, i32* %763, align 4
  %775 = sub i32 %768, %774
  store i32 %767, i32* %763, align 4
  %776 = getelementptr inbounds i32, i32* %763, i64 1
  %777 = icmp ult i32* %776, %352
  %778 = select i1 %777, i32* %776, i32* %350
  %779 = load i32, i32* %764, align 4
  %780 = sub i32 %767, %779
  store i32 %762, i32* %764, align 4
  %781 = getelementptr inbounds i32, i32* %764, i64 1
  %782 = icmp ult i32* %781, %350
  %783 = select i1 %782, i32* %781, i32* %349
  %784 = load i32, i32* %765, align 4
  %785 = sub i32 %762, %784
  store i32 0, i32* %765, align 4
  %786 = getelementptr inbounds i32, i32* %765, i64 1
  %787 = icmp ult i32* %786, %349
  %788 = select i1 %787, i32* %786, i32* %328
  %789 = getelementptr inbounds i8, i8* %766, i64 %693
  %790 = add nuw nsw i32 %759, 1
  %791 = icmp slt i32 %790, %355
  br i1 %791, label %758, label %752

792:                                              ; preds = %752, %792
  %793 = phi i8* [ %801, %792 ], [ %703, %752 ]
  %794 = phi i32 [ %814, %792 ], [ 0, %752 ]
  %795 = phi i32 [ %819, %792 ], [ 0, %752 ]
  %796 = phi i32 [ %824, %792 ], [ 0, %752 ]
  %797 = phi i32* [ %817, %792 ], [ %756, %752 ]
  %798 = phi i32* [ %822, %792 ], [ %755, %752 ]
  %799 = phi i32* [ %827, %792 ], [ %754, %752 ]
  %800 = phi i32* [ %802, %792 ], [ %705, %752 ]
  %801 = getelementptr inbounds i8, i8* %793, i64 %695
  %802 = getelementptr inbounds i32, i32* %800, i64 -1
  %803 = load i32, i32* %802, align 4
  %804 = lshr i32 %803, 24
  %805 = add i32 %804, %796
  %806 = add i32 %805, %795
  %807 = add i32 %806, %794
  %808 = zext i32 %807 to i64
  %809 = mul i64 %808, %220
  %810 = add i64 %809, 2147483648
  %811 = lshr i64 %810, 32
  %812 = trunc i64 %811 to i8
  store i8 %812, i8* %801, align 1
  %813 = load i32, i32* %797, align 4
  %814 = sub i32 %807, %813
  store i32 %806, i32* %797, align 4
  %815 = getelementptr inbounds i32, i32* %797, i64 1
  %816 = icmp ult i32* %815, %352
  %817 = select i1 %816, i32* %815, i32* %350
  %818 = load i32, i32* %798, align 4
  %819 = sub i32 %806, %818
  store i32 %805, i32* %798, align 4
  %820 = getelementptr inbounds i32, i32* %798, i64 1
  %821 = icmp ult i32* %820, %350
  %822 = select i1 %821, i32* %820, i32* %349
  %823 = load i32, i32* %799, align 4
  %824 = sub i32 %805, %823
  store i32 %804, i32* %799, align 4
  %825 = getelementptr inbounds i32, i32* %799, i64 1
  %826 = icmp ult i32* %825, %349
  %827 = select i1 %826, i32* %825, i32* %328
  %828 = icmp ugt i8* %801, %753
  br i1 %828, label %792, label %829

829:                                              ; preds = %792, %752
  %830 = add nuw nsw i64 %699, 1
  %831 = load i32, i32* %696, align 8
  %832 = inttoptr i64 %701 to i8*
  %833 = zext i32 %831 to i64
  %834 = getelementptr inbounds i8, i8* %832, i64 %833
  %835 = ptrtoint i8* %834 to i64
  %836 = inttoptr i64 %700 to i8*
  %837 = getelementptr inbounds i8, i8* %836, i64 %833
  %838 = ptrtoint i8* %837 to i64
  %839 = icmp eq i64 %830, %697
  br i1 %839, label %1033, label %698

840:                                              ; preds = %345
  %841 = bitcast %struct.SkMask* %1 to i16**
  %842 = load i16*, i16** %841, align 8
  %843 = icmp sgt i32 %277, 0
  br i1 %843, label %844, label %1033

844:                                              ; preds = %840
  %845 = sext i32 %272 to i64
  %846 = getelementptr inbounds i16, i16* %842, i64 %845
  %847 = ptrtoint i16* %846 to i64
  %848 = ptrtoint i16* %842 to i64
  %849 = ptrtoint i8* %326 to i64
  %850 = sub i64 %356, %849
  %851 = sext i32 %277 to i64
  %852 = icmp sgt i32 %355, 0
  %853 = sub nsw i64 0, %851
  %854 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 2
  %855 = zext i32 %277 to i64
  br label %856

856:                                              ; preds = %1021, %844
  %857 = phi i64 [ 0, %844 ], [ %1022, %1021 ]
  %858 = phi i64 [ %847, %844 ], [ %1030, %1021 ]
  %859 = phi i64 [ %848, %844 ], [ %1027, %1021 ]
  %860 = getelementptr inbounds i8, i8* %346, i64 %857
  %861 = getelementptr inbounds i8, i8* %860, i64 %334
  call void @llvm.memset.p0i8.i64(i8* align 4 %326, i8 0, i64 %850, i1 false) #12
  %862 = inttoptr i64 %859 to i16*
  %863 = inttoptr i64 %858 to i16*
  %864 = icmp ult i16* %862, %863
  br i1 %864, label %873, label %865

865:                                              ; preds = %873, %856
  %866 = phi i8* [ %860, %856 ], [ %925, %873 ]
  %867 = phi i32* [ %328, %856 ], [ %923, %873 ]
  %868 = phi i32* [ %349, %856 ], [ %918, %873 ]
  %869 = phi i32* [ %350, %856 ], [ %913, %873 ]
  %870 = phi i32 [ 0, %856 ], [ %920, %873 ]
  %871 = phi i32 [ 0, %856 ], [ %915, %873 ]
  %872 = phi i32 [ 0, %856 ], [ %910, %873 ]
  br i1 %852, label %933, label %927

873:                                              ; preds = %856, %873
  %874 = phi i32 [ %910, %873 ], [ 0, %856 ]
  %875 = phi i32 [ %915, %873 ], [ 0, %856 ]
  %876 = phi i32 [ %920, %873 ], [ 0, %856 ]
  %877 = phi i32* [ %913, %873 ], [ %350, %856 ]
  %878 = phi i32* [ %918, %873 ], [ %349, %856 ]
  %879 = phi i32* [ %923, %873 ], [ %328, %856 ]
  %880 = phi i8* [ %925, %873 ], [ %860, %856 ]
  %881 = phi i16* [ %924, %873 ], [ %862, %856 ]
  %882 = load i16, i16* %881, align 2
  %883 = zext i16 %882 to i32
  %884 = lshr i32 %883, 11
  %885 = shl nuw nsw i32 %884, 3
  %886 = lshr i32 %883, 13
  %887 = or i32 %885, %886
  %888 = lshr i32 %883, 5
  %889 = and i32 %888, 63
  %890 = shl nuw nsw i32 %889, 2
  %891 = lshr i32 %889, 4
  %892 = or i32 %890, %891
  %893 = and i32 %883, 31
  %894 = shl nuw nsw i32 %893, 3
  %895 = lshr i32 %893, 2
  %896 = or i32 %894, %895
  %897 = add nuw nsw i32 %896, %887
  %898 = add nuw nsw i32 %897, %892
  %899 = udiv i32 %898, 3
  %900 = and i32 %899, 255
  %901 = add i32 %900, %876
  %902 = add i32 %901, %875
  %903 = add i32 %902, %874
  %904 = zext i32 %903 to i64
  %905 = mul i64 %904, %220
  %906 = add i64 %905, 2147483648
  %907 = lshr i64 %906, 32
  %908 = trunc i64 %907 to i8
  store i8 %908, i8* %880, align 1
  %909 = load i32, i32* %877, align 4
  %910 = sub i32 %903, %909
  store i32 %902, i32* %877, align 4
  %911 = getelementptr inbounds i32, i32* %877, i64 1
  %912 = icmp ult i32* %911, %352
  %913 = select i1 %912, i32* %911, i32* %350
  %914 = load i32, i32* %878, align 4
  %915 = sub i32 %902, %914
  store i32 %901, i32* %878, align 4
  %916 = getelementptr inbounds i32, i32* %878, i64 1
  %917 = icmp ult i32* %916, %350
  %918 = select i1 %917, i32* %916, i32* %349
  %919 = load i32, i32* %879, align 4
  %920 = sub i32 %901, %919
  store i32 %900, i32* %879, align 4
  %921 = getelementptr inbounds i32, i32* %879, i64 1
  %922 = icmp ult i32* %921, %349
  %923 = select i1 %922, i32* %921, i32* %328
  %924 = getelementptr inbounds i16, i16* %881, i64 1
  %925 = getelementptr inbounds i8, i8* %880, i64 %851
  %926 = icmp ult i16* %924, %863
  br i1 %926, label %873, label %865

927:                                              ; preds = %933, %865
  %928 = phi i8* [ %866, %865 ], [ %964, %933 ]
  %929 = phi i32* [ %867, %865 ], [ %963, %933 ]
  %930 = phi i32* [ %868, %865 ], [ %958, %933 ]
  %931 = phi i32* [ %869, %865 ], [ %953, %933 ]
  call void @llvm.memset.p0i8.i64(i8* align 4 %326, i8 0, i64 %850, i1 false) #12
  %932 = icmp ult i8* %928, %861
  br i1 %932, label %967, label %1021

933:                                              ; preds = %865, %933
  %934 = phi i32 [ %965, %933 ], [ 0, %865 ]
  %935 = phi i32 [ %950, %933 ], [ %872, %865 ]
  %936 = phi i32 [ %955, %933 ], [ %871, %865 ]
  %937 = phi i32 [ %960, %933 ], [ %870, %865 ]
  %938 = phi i32* [ %953, %933 ], [ %869, %865 ]
  %939 = phi i32* [ %958, %933 ], [ %868, %865 ]
  %940 = phi i32* [ %963, %933 ], [ %867, %865 ]
  %941 = phi i8* [ %964, %933 ], [ %866, %865 ]
  %942 = add i32 %937, %936
  %943 = add i32 %942, %935
  %944 = zext i32 %943 to i64
  %945 = mul i64 %944, %220
  %946 = add i64 %945, 2147483648
  %947 = lshr i64 %946, 32
  %948 = trunc i64 %947 to i8
  store i8 %948, i8* %941, align 1
  %949 = load i32, i32* %938, align 4
  %950 = sub i32 %943, %949
  store i32 %942, i32* %938, align 4
  %951 = getelementptr inbounds i32, i32* %938, i64 1
  %952 = icmp ult i32* %951, %352
  %953 = select i1 %952, i32* %951, i32* %350
  %954 = load i32, i32* %939, align 4
  %955 = sub i32 %942, %954
  store i32 %937, i32* %939, align 4
  %956 = getelementptr inbounds i32, i32* %939, i64 1
  %957 = icmp ult i32* %956, %350
  %958 = select i1 %957, i32* %956, i32* %349
  %959 = load i32, i32* %940, align 4
  %960 = sub i32 %937, %959
  store i32 0, i32* %940, align 4
  %961 = getelementptr inbounds i32, i32* %940, i64 1
  %962 = icmp ult i32* %961, %349
  %963 = select i1 %962, i32* %961, i32* %328
  %964 = getelementptr inbounds i8, i8* %941, i64 %851
  %965 = add nuw nsw i32 %934, 1
  %966 = icmp slt i32 %965, %355
  br i1 %966, label %933, label %927

967:                                              ; preds = %927, %967
  %968 = phi i8* [ %976, %967 ], [ %861, %927 ]
  %969 = phi i32 [ %1006, %967 ], [ 0, %927 ]
  %970 = phi i32 [ %1011, %967 ], [ 0, %927 ]
  %971 = phi i32 [ %1016, %967 ], [ 0, %927 ]
  %972 = phi i32* [ %1009, %967 ], [ %931, %927 ]
  %973 = phi i32* [ %1014, %967 ], [ %930, %927 ]
  %974 = phi i32* [ %1019, %967 ], [ %929, %927 ]
  %975 = phi i16* [ %977, %967 ], [ %863, %927 ]
  %976 = getelementptr inbounds i8, i8* %968, i64 %853
  %977 = getelementptr inbounds i16, i16* %975, i64 -1
  %978 = load i16, i16* %977, align 2
  %979 = zext i16 %978 to i32
  %980 = lshr i32 %979, 11
  %981 = shl nuw nsw i32 %980, 3
  %982 = lshr i32 %979, 13
  %983 = or i32 %981, %982
  %984 = lshr i32 %979, 5
  %985 = and i32 %984, 63
  %986 = shl nuw nsw i32 %985, 2
  %987 = lshr i32 %985, 4
  %988 = or i32 %986, %987
  %989 = and i32 %979, 31
  %990 = shl nuw nsw i32 %989, 3
  %991 = lshr i32 %989, 2
  %992 = or i32 %990, %991
  %993 = add nuw nsw i32 %992, %983
  %994 = add nuw nsw i32 %993, %988
  %995 = udiv i32 %994, 3
  %996 = and i32 %995, 255
  %997 = add i32 %996, %971
  %998 = add i32 %997, %970
  %999 = add i32 %998, %969
  %1000 = zext i32 %999 to i64
  %1001 = mul i64 %1000, %220
  %1002 = add i64 %1001, 2147483648
  %1003 = lshr i64 %1002, 32
  %1004 = trunc i64 %1003 to i8
  store i8 %1004, i8* %976, align 1
  %1005 = load i32, i32* %972, align 4
  %1006 = sub i32 %999, %1005
  store i32 %998, i32* %972, align 4
  %1007 = getelementptr inbounds i32, i32* %972, i64 1
  %1008 = icmp ult i32* %1007, %352
  %1009 = select i1 %1008, i32* %1007, i32* %350
  %1010 = load i32, i32* %973, align 4
  %1011 = sub i32 %998, %1010
  store i32 %997, i32* %973, align 4
  %1012 = getelementptr inbounds i32, i32* %973, i64 1
  %1013 = icmp ult i32* %1012, %350
  %1014 = select i1 %1013, i32* %1012, i32* %349
  %1015 = load i32, i32* %974, align 4
  %1016 = sub i32 %997, %1015
  store i32 %996, i32* %974, align 4
  %1017 = getelementptr inbounds i32, i32* %974, i64 1
  %1018 = icmp ult i32* %1017, %349
  %1019 = select i1 %1018, i32* %1017, i32* %328
  %1020 = icmp ugt i8* %976, %928
  br i1 %1020, label %967, label %1021

1021:                                             ; preds = %967, %927
  %1022 = add nuw nsw i64 %857, 1
  %1023 = load i32, i32* %854, align 8
  %1024 = inttoptr i64 %859 to i8*
  %1025 = zext i32 %1023 to i64
  %1026 = getelementptr inbounds i8, i8* %1024, i64 %1025
  %1027 = ptrtoint i8* %1026 to i64
  %1028 = inttoptr i64 %858 to i8*
  %1029 = getelementptr inbounds i8, i8* %1028, i64 %1025
  %1030 = ptrtoint i8* %1029 to i64
  %1031 = icmp eq i64 %1022, %855
  br i1 %1031, label %1033, label %856

1032:                                             ; preds = %345
  call void (i8*, i32, i8*, ...) @_Z16SkAbort_FileLinePKciS0_z(i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str, i64 0, i64 0), i32 1041, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.1, i64 0, i64 0)) #13
  unreachable

1033:                                             ; preds = %1021, %829, %675, %526, %840, %682, %533, %359
  %1034 = sext i32 %231 to i64
  %1035 = getelementptr inbounds i32, i32* %328, i64 %1034
  %1036 = getelementptr inbounds i32, i32* %1035, i64 %1034
  %1037 = sext i32 %234 to i64
  %1038 = getelementptr inbounds i32, i32* %1036, i64 %1037
  %1039 = icmp sgt i32 %245, %277
  %1040 = sub nsw i32 %245, %277
  %1041 = select i1 %1039, i32 %1040, i32 0
  %1042 = icmp sgt i32 %282, 0
  br i1 %1042, label %1043, label %1195

1043:                                             ; preds = %1033
  %1044 = ptrtoint i32* %1038 to i64
  %1045 = sext i32 %277 to i64
  %1046 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %2, i64 0, i32 2
  %1047 = ptrtoint i8* %326 to i64
  %1048 = sub i64 %1044, %1047
  %1049 = icmp sgt i32 %277, 0
  %1050 = icmp sgt i32 %1041, 0
  %1051 = zext i32 %282 to i64
  br label %1052

1052:                                             ; preds = %1192, %1043
  %1053 = phi i64 [ 0, %1043 ], [ %1193, %1192 ]
  %1054 = mul nsw i64 %1053, %1045
  %1055 = getelementptr inbounds i8, i8* %346, i64 %1054
  %1056 = load i8*, i8** %261, align 8
  %1057 = getelementptr inbounds i8, i8* %1056, i64 %1053
  %1058 = getelementptr inbounds i8, i8* %1055, i64 %1045
  %1059 = load i32, i32* %1046, align 8
  %1060 = mul i32 %1059, %287
  %1061 = zext i32 %1060 to i64
  %1062 = getelementptr inbounds i8, i8* %1057, i64 %1061
  call void @llvm.memset.p0i8.i64(i8* align 4 %326, i8 0, i64 %1048, i1 false) #12
  br i1 %1049, label %1063, label %1065

1063:                                             ; preds = %1052
  %1064 = sext i32 %1059 to i64
  br label %1075

1065:                                             ; preds = %1075, %1052
  %1066 = phi i8* [ %1057, %1052 ], [ %1110, %1075 ]
  %1067 = phi i32* [ %328, %1052 ], [ %1108, %1075 ]
  %1068 = phi i32* [ %1035, %1052 ], [ %1103, %1075 ]
  %1069 = phi i32* [ %1036, %1052 ], [ %1098, %1075 ]
  %1070 = phi i32 [ 0, %1052 ], [ %1105, %1075 ]
  %1071 = phi i32 [ 0, %1052 ], [ %1100, %1075 ]
  %1072 = phi i32 [ 0, %1052 ], [ %1095, %1075 ]
  br i1 %1050, label %1073, label %1112

1073:                                             ; preds = %1065
  %1074 = sext i32 %1059 to i64
  br label %1121

1075:                                             ; preds = %1075, %1063
  %1076 = phi i8* [ %1055, %1063 ], [ %1109, %1075 ]
  %1077 = phi i32 [ 0, %1063 ], [ %1095, %1075 ]
  %1078 = phi i32 [ 0, %1063 ], [ %1100, %1075 ]
  %1079 = phi i32 [ 0, %1063 ], [ %1105, %1075 ]
  %1080 = phi i32* [ %1036, %1063 ], [ %1098, %1075 ]
  %1081 = phi i32* [ %1035, %1063 ], [ %1103, %1075 ]
  %1082 = phi i32* [ %328, %1063 ], [ %1108, %1075 ]
  %1083 = phi i8* [ %1057, %1063 ], [ %1110, %1075 ]
  %1084 = load i8, i8* %1076, align 1
  %1085 = zext i8 %1084 to i32
  %1086 = add i32 %1079, %1085
  %1087 = add i32 %1086, %1078
  %1088 = add i32 %1087, %1077
  %1089 = zext i32 %1088 to i64
  %1090 = mul i64 %1089, %254
  %1091 = add i64 %1090, 2147483648
  %1092 = lshr i64 %1091, 32
  %1093 = trunc i64 %1092 to i8
  store i8 %1093, i8* %1083, align 1
  %1094 = load i32, i32* %1080, align 4
  %1095 = sub i32 %1088, %1094
  store i32 %1087, i32* %1080, align 4
  %1096 = getelementptr inbounds i32, i32* %1080, i64 1
  %1097 = icmp ult i32* %1096, %1038
  %1098 = select i1 %1097, i32* %1096, i32* %1036
  %1099 = load i32, i32* %1081, align 4
  %1100 = sub i32 %1087, %1099
  store i32 %1086, i32* %1081, align 4
  %1101 = getelementptr inbounds i32, i32* %1081, i64 1
  %1102 = icmp ult i32* %1101, %1036
  %1103 = select i1 %1102, i32* %1101, i32* %1035
  %1104 = load i32, i32* %1082, align 4
  %1105 = sub i32 %1086, %1104
  store i32 %1085, i32* %1082, align 4
  %1106 = getelementptr inbounds i32, i32* %1082, i64 1
  %1107 = icmp ult i32* %1106, %1035
  %1108 = select i1 %1107, i32* %1106, i32* %328
  %1109 = getelementptr inbounds i8, i8* %1076, i64 1
  %1110 = getelementptr inbounds i8, i8* %1083, i64 %1064
  %1111 = icmp eq i8* %1109, %1058
  br i1 %1111, label %1065, label %1075

1112:                                             ; preds = %1121, %1065
  %1113 = phi i8* [ %1066, %1065 ], [ %1152, %1121 ]
  %1114 = phi i32* [ %1067, %1065 ], [ %1151, %1121 ]
  %1115 = phi i32* [ %1068, %1065 ], [ %1146, %1121 ]
  %1116 = phi i32* [ %1069, %1065 ], [ %1141, %1121 ]
  call void @llvm.memset.p0i8.i64(i8* align 4 %326, i8 0, i64 %1048, i1 false) #12
  %1117 = icmp ult i8* %1113, %1062
  br i1 %1117, label %1118, label %1192

1118:                                             ; preds = %1112
  %1119 = sext i32 %1059 to i64
  %1120 = sub nsw i64 0, %1119
  br label %1155

1121:                                             ; preds = %1121, %1073
  %1122 = phi i32 [ 0, %1073 ], [ %1153, %1121 ]
  %1123 = phi i32 [ %1072, %1073 ], [ %1138, %1121 ]
  %1124 = phi i32 [ %1071, %1073 ], [ %1143, %1121 ]
  %1125 = phi i32 [ %1070, %1073 ], [ %1148, %1121 ]
  %1126 = phi i32* [ %1069, %1073 ], [ %1141, %1121 ]
  %1127 = phi i32* [ %1068, %1073 ], [ %1146, %1121 ]
  %1128 = phi i32* [ %1067, %1073 ], [ %1151, %1121 ]
  %1129 = phi i8* [ %1066, %1073 ], [ %1152, %1121 ]
  %1130 = add i32 %1125, %1124
  %1131 = add i32 %1130, %1123
  %1132 = zext i32 %1131 to i64
  %1133 = mul i64 %1132, %254
  %1134 = add i64 %1133, 2147483648
  %1135 = lshr i64 %1134, 32
  %1136 = trunc i64 %1135 to i8
  store i8 %1136, i8* %1129, align 1
  %1137 = load i32, i32* %1126, align 4
  %1138 = sub i32 %1131, %1137
  store i32 %1130, i32* %1126, align 4
  %1139 = getelementptr inbounds i32, i32* %1126, i64 1
  %1140 = icmp ult i32* %1139, %1038
  %1141 = select i1 %1140, i32* %1139, i32* %1036
  %1142 = load i32, i32* %1127, align 4
  %1143 = sub i32 %1130, %1142
  store i32 %1125, i32* %1127, align 4
  %1144 = getelementptr inbounds i32, i32* %1127, i64 1
  %1145 = icmp ult i32* %1144, %1036
  %1146 = select i1 %1145, i32* %1144, i32* %1035
  %1147 = load i32, i32* %1128, align 4
  %1148 = sub i32 %1125, %1147
  store i32 0, i32* %1128, align 4
  %1149 = getelementptr inbounds i32, i32* %1128, i64 1
  %1150 = icmp ult i32* %1149, %1035
  %1151 = select i1 %1150, i32* %1149, i32* %328
  %1152 = getelementptr inbounds i8, i8* %1129, i64 %1074
  %1153 = add nuw nsw i32 %1122, 1
  %1154 = icmp slt i32 %1153, %1041
  br i1 %1154, label %1121, label %1112

1155:                                             ; preds = %1155, %1118
  %1156 = phi i8* [ %1058, %1118 ], [ %1165, %1155 ]
  %1157 = phi i8* [ %1062, %1118 ], [ %1164, %1155 ]
  %1158 = phi i32 [ 0, %1118 ], [ %1177, %1155 ]
  %1159 = phi i32 [ 0, %1118 ], [ %1182, %1155 ]
  %1160 = phi i32 [ 0, %1118 ], [ %1187, %1155 ]
  %1161 = phi i32* [ %1116, %1118 ], [ %1180, %1155 ]
  %1162 = phi i32* [ %1115, %1118 ], [ %1185, %1155 ]
  %1163 = phi i32* [ %1114, %1118 ], [ %1190, %1155 ]
  %1164 = getelementptr inbounds i8, i8* %1157, i64 %1120
  %1165 = getelementptr inbounds i8, i8* %1156, i64 -1
  %1166 = load i8, i8* %1165, align 1
  %1167 = zext i8 %1166 to i32
  %1168 = add i32 %1160, %1167
  %1169 = add i32 %1168, %1159
  %1170 = add i32 %1169, %1158
  %1171 = zext i32 %1170 to i64
  %1172 = mul i64 %1171, %254
  %1173 = add i64 %1172, 2147483648
  %1174 = lshr i64 %1173, 32
  %1175 = trunc i64 %1174 to i8
  store i8 %1175, i8* %1164, align 1
  %1176 = load i32, i32* %1161, align 4
  %1177 = sub i32 %1170, %1176
  store i32 %1169, i32* %1161, align 4
  %1178 = getelementptr inbounds i32, i32* %1161, i64 1
  %1179 = icmp ult i32* %1178, %1038
  %1180 = select i1 %1179, i32* %1178, i32* %1036
  %1181 = load i32, i32* %1162, align 4
  %1182 = sub i32 %1169, %1181
  store i32 %1168, i32* %1162, align 4
  %1183 = getelementptr inbounds i32, i32* %1162, i64 1
  %1184 = icmp ult i32* %1183, %1036
  %1185 = select i1 %1184, i32* %1183, i32* %1035
  %1186 = load i32, i32* %1163, align 4
  %1187 = sub i32 %1168, %1186
  store i32 %1167, i32* %1163, align 4
  %1188 = getelementptr inbounds i32, i32* %1163, i64 1
  %1189 = icmp ult i32* %1188, %1035
  %1190 = select i1 %1189, i32* %1188, i32* %328
  %1191 = icmp ugt i8* %1164, %1113
  br i1 %1191, label %1155, label %1192

1192:                                             ; preds = %1155, %1112
  %1193 = add nuw nsw i64 %1053, 1
  %1194 = icmp eq i64 %1193, %1051
  br i1 %1194, label %1195, label %1052

1195:                                             ; preds = %1192, %1033, %242, %322, %264
  %1196 = phi i32 [ 0, %264 ], [ 0, %322 ], [ %209, %242 ], [ %209, %1033 ], [ %209, %1192 ]
  %1197 = phi i32 [ 0, %264 ], [ 0, %322 ], [ %243, %242 ], [ %243, %1033 ], [ %243, %1192 ]
  call void @_ZN12SkArenaAllocD2Ev(%class.SkArenaAlloc* %187) #12
  call void @llvm.lifetime.end.p0i8(i64 1056, i8* nonnull %185) #12
  br label %1198

1198:                                             ; preds = %1195, %181
  %1199 = phi i32 [ %182, %181 ], [ %1196, %1195 ]
  %1200 = phi i32 [ %183, %181 ], [ %1197, %1195 ]
  %1201 = zext i32 %1200 to i64
  %1202 = shl nuw i64 %1201, 32
  %1203 = zext i32 %1199 to i64
  %1204 = or i64 %1202, %1203
  ret i64 %1204
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @_ZN6SkMask18PrepareDestinationEiiRKS_(%struct.SkMask* sret, i32, i32, %struct.SkMask* dereferenceable(32)) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: noreturn
declare void @_Z16SkAbort_FileLinePKciS0_z(i8*, i32, i8*, ...) local_unnamed_addr #5

declare void @_ZN13SkGaussFilterC1Ed(%class.SkGaussFilter*, double) unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZL13direct_blur_yPFvPhPKhiEiiPtS1_miiS_m(void (i8*, i8*, i32)*, i32, i32, i16* nocapture readonly, i8*, i64, i32, i32, i8* nocapture, i64) unnamed_addr #6 {
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  %14 = alloca i64, align 8
  %15 = alloca %"class.(anonymous namespace)::SkNx", align 16
  %16 = alloca %"class.(anonymous namespace)::SkNx", align 16
  %17 = alloca %"class.(anonymous namespace)::SkNx", align 16
  %18 = alloca %"class.(anonymous namespace)::SkNx", align 16
  %19 = alloca %"class.(anonymous namespace)::SkNx", align 16
  %20 = alloca i64, align 8
  %21 = alloca %"class.(anonymous namespace)::SkNx", align 16
  %22 = alloca %"class.(anonymous namespace)::SkNx", align 16
  %23 = alloca %"class.(anonymous namespace)::SkNx", align 16
  %24 = alloca %"class.(anonymous namespace)::SkNx", align 16
  %25 = alloca %"class.(anonymous namespace)::SkNx", align 16
  %26 = alloca i64, align 8
  %27 = alloca %"class.(anonymous namespace)::SkNx", align 16
  %28 = alloca %"class.(anonymous namespace)::SkNx", align 16
  %29 = alloca %"class.(anonymous namespace)::SkNx", align 16
  %30 = alloca %"class.(anonymous namespace)::SkNx", align 16
  %31 = alloca %"class.(anonymous namespace)::SkNx", align 16
  %32 = alloca i64, align 8
  switch i32 %2, label %492 [
    i32 1, label %33
    i32 2, label %182
    i32 3, label %302
    i32 4, label %442
  ]

33:                                               ; preds = %10
  %34 = load i16, i16* %3, align 2
  %35 = insertelement <8 x i16> undef, i16 %34, i32 0
  %36 = shufflevector <8 x i16> %35, <8 x i16> undef, <8 x i32> zeroinitializer
  %37 = getelementptr inbounds i16, i16* %3, i64 1
  %38 = load i16, i16* %37, align 2
  %39 = insertelement <8 x i16> undef, i16 %38, i32 0
  %40 = shufflevector <8 x i16> %39, <8 x i16> undef, <8 x i32> zeroinitializer
  %41 = add nsw i32 %6, -8
  %42 = icmp slt i32 %41, 0
  br i1 %42, label %101, label %43

43:                                               ; preds = %33
  %44 = sext i32 %1 to i64
  %45 = icmp sgt i32 %7, 0
  %46 = bitcast i64* %32 to i8*
  %47 = icmp eq void (i8*, i8*, i32)* %0, null
  br label %48

48:                                               ; preds = %82, %43
  %49 = phi i32 [ 0, %43 ], [ %99, %82 ]
  %50 = phi i8* [ %4, %43 ], [ %97, %82 ]
  %51 = phi i8* [ %8, %43 ], [ %98, %82 ]
  br i1 %45, label %52, label %82

52:                                               ; preds = %48, %59
  %53 = phi <8 x i16> [ %71, %59 ], [ <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>, %48 ]
  %54 = phi <8 x i16> [ %72, %59 ], [ <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>, %48 ]
  %55 = phi i32 [ %80, %59 ], [ 0, %48 ]
  %56 = phi i8* [ %79, %59 ], [ %51, %48 ]
  %57 = phi i8* [ %78, %59 ], [ %50, %48 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %46) #12
  store i64 0, i64* %32, align 8
  br i1 %47, label %59, label %58

58:                                               ; preds = %52
  call void %0(i8* nonnull %46, i8* %57, i32 8) #12, !callees !2
  br label %59

59:                                               ; preds = %52, %58
  %60 = phi i8* [ %46, %58 ], [ %57, %52 ]
  %61 = bitcast i8* %60 to i64*
  %62 = load i64, i64* %61, align 1
  %63 = insertelement <2 x i64> undef, i64 %62, i32 0
  %64 = bitcast <2 x i64> %63 to <16 x i8>
  %65 = shufflevector <16 x i8> %64, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %66 = bitcast <16 x i8> %65 to <8 x i16>
  %67 = shl <8 x i16> %66, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %46) #12
  %68 = call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %67, <8 x i16> %36) #12
  %69 = call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %67, <8 x i16> %40) #12
  %70 = add <8 x i16> %69, %53
  %71 = add <8 x i16> %68, %54
  %72 = add <8 x i16> %69, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %73 = lshr <8 x i16> %70, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %74 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %73, <8 x i16> undef) #12
  %75 = bitcast <16 x i8> %74 to <2 x i64>
  %76 = extractelement <2 x i64> %75, i32 0
  %77 = bitcast i8* %56 to i64*
  store i64 %76, i64* %77, align 1
  %78 = getelementptr inbounds i8, i8* %57, i64 %5
  %79 = getelementptr inbounds i8, i8* %56, i64 %9
  %80 = add nuw nsw i32 %55, 1
  %81 = icmp eq i32 %80, %7
  br i1 %81, label %82, label %52

82:                                               ; preds = %59, %48
  %83 = phi <8 x i16> [ <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>, %48 ], [ %71, %59 ]
  %84 = phi <8 x i16> [ <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>, %48 ], [ %72, %59 ]
  %85 = phi i8* [ %51, %48 ], [ %79, %59 ]
  %86 = lshr <8 x i16> %83, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %87 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %86, <8 x i16> undef) #12
  %88 = bitcast <16 x i8> %87 to <2 x i64>
  %89 = extractelement <2 x i64> %88, i32 0
  %90 = bitcast i8* %85 to i64*
  store i64 %89, i64* %90, align 1
  %91 = getelementptr inbounds i8, i8* %85, i64 %9
  %92 = lshr <8 x i16> %84, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %93 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %92, <8 x i16> undef) #12
  %94 = bitcast <16 x i8> %93 to <2 x i64>
  %95 = extractelement <2 x i64> %94, i32 0
  %96 = bitcast i8* %91 to i64*
  store i64 %95, i64* %96, align 1
  %97 = getelementptr inbounds i8, i8* %50, i64 %44
  %98 = getelementptr inbounds i8, i8* %51, i64 8
  %99 = add nuw nsw i32 %49, 8
  %100 = icmp sgt i32 %99, %41
  br i1 %100, label %101, label %48

101:                                              ; preds = %82, %33
  %102 = phi i8* [ %8, %33 ], [ %98, %82 ]
  %103 = phi i8* [ %4, %33 ], [ %97, %82 ]
  %104 = phi i32 [ 0, %33 ], [ %99, %82 ]
  %105 = sub nsw i32 %6, %104
  %106 = icmp sgt i32 %105, 0
  br i1 %106, label %107, label %492

107:                                              ; preds = %101
  %108 = icmp sgt i32 %7, 0
  br i1 %108, label %109, label %121

109:                                              ; preds = %107
  %110 = bitcast i64* %11 to i8*
  %111 = icmp eq void (i8*, i8*, i32)* %0, null
  %112 = icmp sgt i32 %105, 7
  %113 = zext i32 %105 to i64
  %114 = icmp eq i32 %105, 8
  %115 = add nsw i32 %105, -1
  %116 = icmp ugt i32 %115, 6
  %117 = bitcast i64* %12 to i8*
  br label %128

118:                                              ; preds = %160
  %119 = lshr <8 x i16> %150, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %120 = lshr <8 x i16> %151, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  br label %121

121:                                              ; preds = %118, %107
  %122 = phi <8 x i16> [ zeroinitializer, %107 ], [ %120, %118 ]
  %123 = phi <8 x i16> [ zeroinitializer, %107 ], [ %119, %118 ]
  %124 = phi i8* [ %102, %107 ], [ %162, %118 ]
  %125 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %123, <8 x i16> %123) #12
  %126 = bitcast <16 x i8> %125 to <2 x i64>
  %127 = icmp eq i32 %105, 8
  br i1 %127, label %165, label %173

128:                                              ; preds = %160, %109
  %129 = phi <8 x i16> [ <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>, %109 ], [ %151, %160 ]
  %130 = phi <8 x i16> [ <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>, %109 ], [ %150, %160 ]
  %131 = phi i32 [ 0, %109 ], [ %163, %160 ]
  %132 = phi i8* [ %102, %109 ], [ %162, %160 ]
  %133 = phi i8* [ %103, %109 ], [ %161, %160 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %110) #12
  store i64 0, i64* %11, align 8
  br i1 %111, label %135, label %134

134:                                              ; preds = %128
  call void %0(i8* nonnull %110, i8* %133, i32 %105) #12, !callees !2
  br label %138

135:                                              ; preds = %128
  %136 = select i1 %112, i8* %133, i8* %110
  br i1 %116, label %138, label %137

137:                                              ; preds = %135
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %110, i8* align 1 %133, i64 %113, i1 false) #12
  br label %138

138:                                              ; preds = %137, %135, %134
  %139 = phi i8* [ %110, %134 ], [ %136, %135 ], [ %110, %137 ]
  %140 = bitcast i8* %139 to i64*
  %141 = load i64, i64* %140, align 1
  %142 = insertelement <2 x i64> undef, i64 %141, i32 0
  %143 = bitcast <2 x i64> %142 to <16 x i8>
  %144 = shufflevector <16 x i8> %143, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %145 = bitcast <16 x i8> %144 to <8 x i16>
  %146 = shl <8 x i16> %145, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %110) #12
  %147 = call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %146, <8 x i16> %36) #12
  %148 = call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %146, <8 x i16> %40) #12
  %149 = add <8 x i16> %148, %130
  %150 = add <8 x i16> %147, %129
  %151 = add <8 x i16> %148, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %152 = lshr <8 x i16> %149, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %153 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %152, <8 x i16> %152) #12
  %154 = bitcast <16 x i8> %153 to <2 x i64>
  br i1 %114, label %155, label %158

155:                                              ; preds = %138
  %156 = extractelement <2 x i64> %154, i32 0
  %157 = bitcast i8* %132 to i64*
  store i64 %156, i64* %157, align 1
  br label %160

158:                                              ; preds = %138
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %117)
  %159 = extractelement <2 x i64> %154, i32 0
  store i64 %159, i64* %12, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %132, i8* nonnull align 8 %117, i64 %113, i1 false) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %117)
  br label %160

160:                                              ; preds = %158, %155
  %161 = getelementptr inbounds i8, i8* %133, i64 %5
  %162 = getelementptr inbounds i8, i8* %132, i64 %9
  %163 = add nuw nsw i32 %131, 1
  %164 = icmp eq i32 %163, %7
  br i1 %164, label %118, label %128

165:                                              ; preds = %121
  %166 = extractelement <2 x i64> %126, i32 0
  %167 = bitcast i8* %124 to i64*
  store i64 %166, i64* %167, align 1
  %168 = getelementptr inbounds i8, i8* %124, i64 %9
  %169 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %122, <8 x i16> undef) #12
  %170 = bitcast <16 x i8> %169 to <2 x i64>
  %171 = extractelement <2 x i64> %170, i32 0
  %172 = bitcast i8* %168 to i64*
  store i64 %171, i64* %172, align 1
  br label %492

173:                                              ; preds = %121
  %174 = bitcast i64* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %174)
  %175 = extractelement <2 x i64> %126, i32 0
  store i64 %175, i64* %14, align 8
  %176 = zext i32 %105 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %124, i8* nonnull align 8 %174, i64 %176, i1 false) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %174)
  %177 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %122, <8 x i16> undef) #12
  %178 = bitcast <16 x i8> %177 to <2 x i64>
  %179 = bitcast i64* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %179)
  %180 = extractelement <2 x i64> %178, i32 0
  store i64 %180, i64* %13, align 8
  %181 = getelementptr inbounds i8, i8* %124, i64 %9
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %181, i8* nonnull align 8 %179, i64 %176, i1 false) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %179)
  br label %492

182:                                              ; preds = %10
  %183 = bitcast %"class.(anonymous namespace)::SkNx"* %27 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %183) #12
  %184 = load i16, i16* %3, align 2
  %185 = insertelement <8 x i16> undef, i16 %184, i32 0
  %186 = shufflevector <8 x i16> %185, <8 x i16> undef, <8 x i32> zeroinitializer
  %187 = bitcast %"class.(anonymous namespace)::SkNx"* %27 to <8 x i16>*
  store <8 x i16> %186, <8 x i16>* %187, align 16
  %188 = bitcast %"class.(anonymous namespace)::SkNx"* %28 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %188) #12
  %189 = getelementptr inbounds i16, i16* %3, i64 1
  %190 = load i16, i16* %189, align 2
  %191 = insertelement <8 x i16> undef, i16 %190, i32 0
  %192 = shufflevector <8 x i16> %191, <8 x i16> undef, <8 x i32> zeroinitializer
  %193 = bitcast %"class.(anonymous namespace)::SkNx"* %28 to <8 x i16>*
  store <8 x i16> %192, <8 x i16>* %193, align 16
  %194 = bitcast %"class.(anonymous namespace)::SkNx"* %29 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %194) #12
  %195 = getelementptr inbounds i16, i16* %3, i64 2
  %196 = load i16, i16* %195, align 2
  %197 = insertelement <8 x i16> undef, i16 %196, i32 0
  %198 = shufflevector <8 x i16> %197, <8 x i16> undef, <8 x i32> zeroinitializer
  %199 = bitcast %"class.(anonymous namespace)::SkNx"* %29 to <8 x i16>*
  store <8 x i16> %198, <8 x i16>* %199, align 16
  %200 = bitcast %"class.(anonymous namespace)::SkNx"* %30 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %200) #12
  %201 = getelementptr inbounds i16, i16* %3, i64 3
  %202 = load i16, i16* %201, align 2
  %203 = insertelement <8 x i16> undef, i16 %202, i32 0
  %204 = shufflevector <8 x i16> %203, <8 x i16> undef, <8 x i32> zeroinitializer
  %205 = bitcast %"class.(anonymous namespace)::SkNx"* %30 to <8 x i16>*
  store <8 x i16> %204, <8 x i16>* %205, align 16
  %206 = bitcast %"class.(anonymous namespace)::SkNx"* %31 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %206) #12
  %207 = getelementptr inbounds i16, i16* %3, i64 4
  %208 = load i16, i16* %207, align 2
  %209 = insertelement <8 x i16> undef, i16 %208, i32 0
  %210 = shufflevector <8 x i16> %209, <8 x i16> undef, <8 x i32> zeroinitializer
  %211 = bitcast %"class.(anonymous namespace)::SkNx"* %31 to <8 x i16>*
  store <8 x i16> %210, <8 x i16>* %211, align 16
  %212 = add nsw i32 %6, -8
  %213 = icmp slt i32 %212, 0
  br i1 %213, label %294, label %214

214:                                              ; preds = %182
  %215 = sext i32 %1 to i64
  %216 = icmp sgt i32 %7, 0
  %217 = bitcast i64* %26 to i8*
  %218 = icmp eq void (i8*, i8*, i32)* %0, null
  br label %219

219:                                              ; preds = %261, %214
  %220 = phi i32 [ 0, %214 ], [ %292, %261 ]
  %221 = phi i8* [ %4, %214 ], [ %290, %261 ]
  %222 = phi i8* [ %8, %214 ], [ %291, %261 ]
  br i1 %216, label %223, label %261

223:                                              ; preds = %219, %232
  %224 = phi <8 x i16> [ %251, %232 ], [ <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>, %219 ]
  %225 = phi <8 x i16> [ %250, %232 ], [ <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>, %219 ]
  %226 = phi <8 x i16> [ %249, %232 ], [ <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>, %219 ]
  %227 = phi <8 x i16> [ %248, %232 ], [ <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>, %219 ]
  %228 = phi i32 [ %259, %232 ], [ 0, %219 ]
  %229 = phi i8* [ %258, %232 ], [ %222, %219 ]
  %230 = phi i8* [ %257, %232 ], [ %221, %219 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %217) #12
  store i64 0, i64* %26, align 8
  br i1 %218, label %232, label %231

231:                                              ; preds = %223
  call void %0(i8* nonnull %217, i8* %230, i32 8) #12, !callees !2
  br label %232

232:                                              ; preds = %223, %231
  %233 = phi i8* [ %217, %231 ], [ %230, %223 ]
  %234 = bitcast i8* %233 to i64*
  %235 = load i64, i64* %234, align 1
  %236 = insertelement <2 x i64> undef, i64 %235, i32 0
  %237 = bitcast <2 x i64> %236 to <16 x i8>
  %238 = shufflevector <16 x i8> %237, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %239 = bitcast <16 x i8> %238 to <8 x i16>
  %240 = shl <8 x i16> %239, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %217) #12
  %241 = load <8 x i16>, <8 x i16>* %187, align 16
  %242 = call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %240, <8 x i16> %241) #12
  %243 = load <8 x i16>, <8 x i16>* %193, align 16
  %244 = call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %240, <8 x i16> %243) #12
  %245 = load <8 x i16>, <8 x i16>* %199, align 16
  %246 = call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %240, <8 x i16> %245) #12
  %247 = add <8 x i16> %246, %227
  %248 = add <8 x i16> %244, %226
  %249 = add <8 x i16> %242, %225
  %250 = add <8 x i16> %244, %224
  %251 = add <8 x i16> %246, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %252 = lshr <8 x i16> %247, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %253 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %252, <8 x i16> undef) #12
  %254 = bitcast <16 x i8> %253 to <2 x i64>
  %255 = extractelement <2 x i64> %254, i32 0
  %256 = bitcast i8* %229 to i64*
  store i64 %255, i64* %256, align 1
  %257 = getelementptr inbounds i8, i8* %230, i64 %5
  %258 = getelementptr inbounds i8, i8* %229, i64 %9
  %259 = add nuw nsw i32 %228, 1
  %260 = icmp eq i32 %259, %7
  br i1 %260, label %261, label %223

261:                                              ; preds = %232, %219
  %262 = phi <8 x i16> [ <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>, %219 ], [ %251, %232 ]
  %263 = phi <8 x i16> [ <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>, %219 ], [ %250, %232 ]
  %264 = phi <8 x i16> [ <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>, %219 ], [ %249, %232 ]
  %265 = phi <8 x i16> [ <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>, %219 ], [ %248, %232 ]
  %266 = phi i8* [ %222, %219 ], [ %258, %232 ]
  %267 = lshr <8 x i16> %265, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %268 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %267, <8 x i16> undef) #12
  %269 = bitcast <16 x i8> %268 to <2 x i64>
  %270 = extractelement <2 x i64> %269, i32 0
  %271 = bitcast i8* %266 to i64*
  store i64 %270, i64* %271, align 1
  %272 = getelementptr inbounds i8, i8* %266, i64 %9
  %273 = lshr <8 x i16> %264, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %274 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %273, <8 x i16> undef) #12
  %275 = bitcast <16 x i8> %274 to <2 x i64>
  %276 = extractelement <2 x i64> %275, i32 0
  %277 = bitcast i8* %272 to i64*
  store i64 %276, i64* %277, align 1
  %278 = getelementptr inbounds i8, i8* %272, i64 %9
  %279 = lshr <8 x i16> %263, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %280 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %279, <8 x i16> undef) #12
  %281 = bitcast <16 x i8> %280 to <2 x i64>
  %282 = extractelement <2 x i64> %281, i32 0
  %283 = bitcast i8* %278 to i64*
  store i64 %282, i64* %283, align 1
  %284 = getelementptr inbounds i8, i8* %278, i64 %9
  %285 = lshr <8 x i16> %262, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %286 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %285, <8 x i16> undef) #12
  %287 = bitcast <16 x i8> %286 to <2 x i64>
  %288 = extractelement <2 x i64> %287, i32 0
  %289 = bitcast i8* %284 to i64*
  store i64 %288, i64* %289, align 1
  %290 = getelementptr inbounds i8, i8* %221, i64 %215
  %291 = getelementptr inbounds i8, i8* %222, i64 8
  %292 = add nuw nsw i32 %220, 8
  %293 = icmp sgt i32 %292, %212
  br i1 %293, label %294, label %219

294:                                              ; preds = %261, %182
  %295 = phi i8* [ %8, %182 ], [ %291, %261 ]
  %296 = phi i8* [ %4, %182 ], [ %290, %261 ]
  %297 = phi i32 [ 0, %182 ], [ %292, %261 ]
  %298 = sub nsw i32 %6, %297
  %299 = icmp sgt i32 %298, 0
  br i1 %299, label %300, label %301

300:                                              ; preds = %294
  call fastcc void @_ZL11blur_columnPFvPhPKhiEPFN12_GLOBAL__N_14SkNxILi8EtEERKS6_S8_S8_S8_S8_S8_PS6_S9_S9_S9_S9_S9_S9_S9_EiiS8_S8_S8_S8_S8_S1_miS_m(void (i8*, i8*, i32)* %0, <2 x i64> (%"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*)* nonnull @_ZL15blur_y_radius_2RKN12_GLOBAL__N_14SkNxILi8EtEES3_S3_S3_S3_S3_PS1_S4_S4_S4_S4_S4_S4_S4_, i32 2, i32 %298, %"class.(anonymous namespace)::SkNx"* nonnull dereferenceable(16) %27, %"class.(anonymous namespace)::SkNx"* nonnull dereferenceable(16) %28, %"class.(anonymous namespace)::SkNx"* nonnull dereferenceable(16) %29, %"class.(anonymous namespace)::SkNx"* nonnull dereferenceable(16) %30, %"class.(anonymous namespace)::SkNx"* nonnull dereferenceable(16) %31, i8* %296, i64 %5, i32 %7, i8* %295, i64 %9) #12
  br label %301

301:                                              ; preds = %294, %300
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %206) #12
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %200) #12
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %194) #12
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %188) #12
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %183) #12
  br label %492

302:                                              ; preds = %10
  %303 = bitcast %"class.(anonymous namespace)::SkNx"* %21 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %303) #12
  %304 = load i16, i16* %3, align 2
  %305 = insertelement <8 x i16> undef, i16 %304, i32 0
  %306 = shufflevector <8 x i16> %305, <8 x i16> undef, <8 x i32> zeroinitializer
  %307 = bitcast %"class.(anonymous namespace)::SkNx"* %21 to <8 x i16>*
  store <8 x i16> %306, <8 x i16>* %307, align 16
  %308 = bitcast %"class.(anonymous namespace)::SkNx"* %22 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %308) #12
  %309 = getelementptr inbounds i16, i16* %3, i64 1
  %310 = load i16, i16* %309, align 2
  %311 = insertelement <8 x i16> undef, i16 %310, i32 0
  %312 = shufflevector <8 x i16> %311, <8 x i16> undef, <8 x i32> zeroinitializer
  %313 = bitcast %"class.(anonymous namespace)::SkNx"* %22 to <8 x i16>*
  store <8 x i16> %312, <8 x i16>* %313, align 16
  %314 = bitcast %"class.(anonymous namespace)::SkNx"* %23 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %314) #12
  %315 = getelementptr inbounds i16, i16* %3, i64 2
  %316 = load i16, i16* %315, align 2
  %317 = insertelement <8 x i16> undef, i16 %316, i32 0
  %318 = shufflevector <8 x i16> %317, <8 x i16> undef, <8 x i32> zeroinitializer
  %319 = bitcast %"class.(anonymous namespace)::SkNx"* %23 to <8 x i16>*
  store <8 x i16> %318, <8 x i16>* %319, align 16
  %320 = bitcast %"class.(anonymous namespace)::SkNx"* %24 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %320) #12
  %321 = getelementptr inbounds i16, i16* %3, i64 3
  %322 = load i16, i16* %321, align 2
  %323 = insertelement <8 x i16> undef, i16 %322, i32 0
  %324 = shufflevector <8 x i16> %323, <8 x i16> undef, <8 x i32> zeroinitializer
  %325 = bitcast %"class.(anonymous namespace)::SkNx"* %24 to <8 x i16>*
  store <8 x i16> %324, <8 x i16>* %325, align 16
  %326 = bitcast %"class.(anonymous namespace)::SkNx"* %25 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %326) #12
  %327 = getelementptr inbounds i16, i16* %3, i64 4
  %328 = load i16, i16* %327, align 2
  %329 = insertelement <8 x i16> undef, i16 %328, i32 0
  %330 = shufflevector <8 x i16> %329, <8 x i16> undef, <8 x i32> zeroinitializer
  %331 = bitcast %"class.(anonymous namespace)::SkNx"* %25 to <8 x i16>*
  store <8 x i16> %330, <8 x i16>* %331, align 16
  %332 = add nsw i32 %6, -8
  %333 = icmp slt i32 %332, 0
  br i1 %333, label %434, label %334

334:                                              ; preds = %302
  %335 = sext i32 %1 to i64
  %336 = icmp sgt i32 %7, 0
  %337 = bitcast i64* %20 to i8*
  %338 = icmp eq void (i8*, i8*, i32)* %0, null
  br label %339

339:                                              ; preds = %387, %334
  %340 = phi i32 [ 0, %334 ], [ %432, %387 ]
  %341 = phi i8* [ %4, %334 ], [ %430, %387 ]
  %342 = phi i8* [ %8, %334 ], [ %431, %387 ]
  br i1 %336, label %343, label %387

343:                                              ; preds = %339, %354
  %344 = phi <8 x i16> [ %377, %354 ], [ <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>, %339 ]
  %345 = phi <8 x i16> [ %376, %354 ], [ <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>, %339 ]
  %346 = phi <8 x i16> [ %375, %354 ], [ <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>, %339 ]
  %347 = phi <8 x i16> [ %374, %354 ], [ <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>, %339 ]
  %348 = phi <8 x i16> [ %373, %354 ], [ <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>, %339 ]
  %349 = phi <8 x i16> [ %372, %354 ], [ <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>, %339 ]
  %350 = phi i32 [ %385, %354 ], [ 0, %339 ]
  %351 = phi i8* [ %384, %354 ], [ %342, %339 ]
  %352 = phi i8* [ %383, %354 ], [ %341, %339 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %337) #12
  store i64 0, i64* %20, align 8
  br i1 %338, label %354, label %353

353:                                              ; preds = %343
  call void %0(i8* nonnull %337, i8* %352, i32 8) #12, !callees !2
  br label %354

354:                                              ; preds = %343, %353
  %355 = phi i8* [ %337, %353 ], [ %352, %343 ]
  %356 = bitcast i8* %355 to i64*
  %357 = load i64, i64* %356, align 1
  %358 = insertelement <2 x i64> undef, i64 %357, i32 0
  %359 = bitcast <2 x i64> %358 to <16 x i8>
  %360 = shufflevector <16 x i8> %359, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %361 = bitcast <16 x i8> %360 to <8 x i16>
  %362 = shl <8 x i16> %361, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %337) #12
  %363 = load <8 x i16>, <8 x i16>* %307, align 16
  %364 = call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %362, <8 x i16> %363) #12
  %365 = load <8 x i16>, <8 x i16>* %313, align 16
  %366 = call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %362, <8 x i16> %365) #12
  %367 = load <8 x i16>, <8 x i16>* %319, align 16
  %368 = call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %362, <8 x i16> %367) #12
  %369 = load <8 x i16>, <8 x i16>* %325, align 16
  %370 = call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %362, <8 x i16> %369) #12
  %371 = add <8 x i16> %370, %349
  %372 = add <8 x i16> %368, %348
  %373 = add <8 x i16> %366, %347
  %374 = add <8 x i16> %364, %346
  %375 = add <8 x i16> %366, %345
  %376 = add <8 x i16> %368, %344
  %377 = add <8 x i16> %370, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %378 = lshr <8 x i16> %371, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %379 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %378, <8 x i16> undef) #12
  %380 = bitcast <16 x i8> %379 to <2 x i64>
  %381 = extractelement <2 x i64> %380, i32 0
  %382 = bitcast i8* %351 to i64*
  store i64 %381, i64* %382, align 1
  %383 = getelementptr inbounds i8, i8* %352, i64 %5
  %384 = getelementptr inbounds i8, i8* %351, i64 %9
  %385 = add nuw nsw i32 %350, 1
  %386 = icmp eq i32 %385, %7
  br i1 %386, label %387, label %343

387:                                              ; preds = %354, %339
  %388 = phi <8 x i16> [ <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>, %339 ], [ %377, %354 ]
  %389 = phi <8 x i16> [ <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>, %339 ], [ %376, %354 ]
  %390 = phi <8 x i16> [ <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>, %339 ], [ %375, %354 ]
  %391 = phi <8 x i16> [ <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>, %339 ], [ %374, %354 ]
  %392 = phi <8 x i16> [ <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>, %339 ], [ %373, %354 ]
  %393 = phi <8 x i16> [ <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>, %339 ], [ %372, %354 ]
  %394 = phi i8* [ %342, %339 ], [ %384, %354 ]
  %395 = lshr <8 x i16> %393, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %396 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %395, <8 x i16> undef) #12
  %397 = bitcast <16 x i8> %396 to <2 x i64>
  %398 = extractelement <2 x i64> %397, i32 0
  %399 = bitcast i8* %394 to i64*
  store i64 %398, i64* %399, align 1
  %400 = getelementptr inbounds i8, i8* %394, i64 %9
  %401 = lshr <8 x i16> %392, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %402 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %401, <8 x i16> undef) #12
  %403 = bitcast <16 x i8> %402 to <2 x i64>
  %404 = extractelement <2 x i64> %403, i32 0
  %405 = bitcast i8* %400 to i64*
  store i64 %404, i64* %405, align 1
  %406 = getelementptr inbounds i8, i8* %400, i64 %9
  %407 = lshr <8 x i16> %391, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %408 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %407, <8 x i16> undef) #12
  %409 = bitcast <16 x i8> %408 to <2 x i64>
  %410 = extractelement <2 x i64> %409, i32 0
  %411 = bitcast i8* %406 to i64*
  store i64 %410, i64* %411, align 1
  %412 = getelementptr inbounds i8, i8* %406, i64 %9
  %413 = lshr <8 x i16> %390, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %414 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %413, <8 x i16> undef) #12
  %415 = bitcast <16 x i8> %414 to <2 x i64>
  %416 = extractelement <2 x i64> %415, i32 0
  %417 = bitcast i8* %412 to i64*
  store i64 %416, i64* %417, align 1
  %418 = getelementptr inbounds i8, i8* %412, i64 %9
  %419 = lshr <8 x i16> %389, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %420 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %419, <8 x i16> undef) #12
  %421 = bitcast <16 x i8> %420 to <2 x i64>
  %422 = extractelement <2 x i64> %421, i32 0
  %423 = bitcast i8* %418 to i64*
  store i64 %422, i64* %423, align 1
  %424 = getelementptr inbounds i8, i8* %418, i64 %9
  %425 = lshr <8 x i16> %388, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %426 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %425, <8 x i16> undef) #12
  %427 = bitcast <16 x i8> %426 to <2 x i64>
  %428 = extractelement <2 x i64> %427, i32 0
  %429 = bitcast i8* %424 to i64*
  store i64 %428, i64* %429, align 1
  %430 = getelementptr inbounds i8, i8* %341, i64 %335
  %431 = getelementptr inbounds i8, i8* %342, i64 8
  %432 = add nuw nsw i32 %340, 8
  %433 = icmp sgt i32 %432, %332
  br i1 %433, label %434, label %339

434:                                              ; preds = %387, %302
  %435 = phi i8* [ %8, %302 ], [ %431, %387 ]
  %436 = phi i8* [ %4, %302 ], [ %430, %387 ]
  %437 = phi i32 [ 0, %302 ], [ %432, %387 ]
  %438 = sub nsw i32 %6, %437
  %439 = icmp sgt i32 %438, 0
  br i1 %439, label %440, label %441

440:                                              ; preds = %434
  call fastcc void @_ZL11blur_columnPFvPhPKhiEPFN12_GLOBAL__N_14SkNxILi8EtEERKS6_S8_S8_S8_S8_S8_PS6_S9_S9_S9_S9_S9_S9_S9_EiiS8_S8_S8_S8_S8_S1_miS_m(void (i8*, i8*, i32)* %0, <2 x i64> (%"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*)* nonnull @_ZL15blur_y_radius_3RKN12_GLOBAL__N_14SkNxILi8EtEES3_S3_S3_S3_S3_PS1_S4_S4_S4_S4_S4_S4_S4_, i32 3, i32 %438, %"class.(anonymous namespace)::SkNx"* nonnull dereferenceable(16) %21, %"class.(anonymous namespace)::SkNx"* nonnull dereferenceable(16) %22, %"class.(anonymous namespace)::SkNx"* nonnull dereferenceable(16) %23, %"class.(anonymous namespace)::SkNx"* nonnull dereferenceable(16) %24, %"class.(anonymous namespace)::SkNx"* nonnull dereferenceable(16) %25, i8* %436, i64 %5, i32 %7, i8* %435, i64 %9) #12
  br label %441

441:                                              ; preds = %434, %440
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %326) #12
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %320) #12
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %314) #12
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %308) #12
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %303) #12
  br label %492

442:                                              ; preds = %10
  %443 = bitcast %"class.(anonymous namespace)::SkNx"* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %443) #12
  %444 = load i16, i16* %3, align 2
  %445 = insertelement <8 x i16> undef, i16 %444, i32 0
  %446 = shufflevector <8 x i16> %445, <8 x i16> undef, <8 x i32> zeroinitializer
  %447 = bitcast %"class.(anonymous namespace)::SkNx"* %15 to <8 x i16>*
  store <8 x i16> %446, <8 x i16>* %447, align 16
  %448 = bitcast %"class.(anonymous namespace)::SkNx"* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %448) #12
  %449 = getelementptr inbounds i16, i16* %3, i64 1
  %450 = load i16, i16* %449, align 2
  %451 = insertelement <8 x i16> undef, i16 %450, i32 0
  %452 = shufflevector <8 x i16> %451, <8 x i16> undef, <8 x i32> zeroinitializer
  %453 = bitcast %"class.(anonymous namespace)::SkNx"* %16 to <8 x i16>*
  store <8 x i16> %452, <8 x i16>* %453, align 16
  %454 = bitcast %"class.(anonymous namespace)::SkNx"* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %454) #12
  %455 = getelementptr inbounds i16, i16* %3, i64 2
  %456 = load i16, i16* %455, align 2
  %457 = insertelement <8 x i16> undef, i16 %456, i32 0
  %458 = shufflevector <8 x i16> %457, <8 x i16> undef, <8 x i32> zeroinitializer
  %459 = bitcast %"class.(anonymous namespace)::SkNx"* %17 to <8 x i16>*
  store <8 x i16> %458, <8 x i16>* %459, align 16
  %460 = bitcast %"class.(anonymous namespace)::SkNx"* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %460) #12
  %461 = getelementptr inbounds i16, i16* %3, i64 3
  %462 = load i16, i16* %461, align 2
  %463 = insertelement <8 x i16> undef, i16 %462, i32 0
  %464 = shufflevector <8 x i16> %463, <8 x i16> undef, <8 x i32> zeroinitializer
  %465 = bitcast %"class.(anonymous namespace)::SkNx"* %18 to <8 x i16>*
  store <8 x i16> %464, <8 x i16>* %465, align 16
  %466 = bitcast %"class.(anonymous namespace)::SkNx"* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %466) #12
  %467 = getelementptr inbounds i16, i16* %3, i64 4
  %468 = load i16, i16* %467, align 2
  %469 = insertelement <8 x i16> undef, i16 %468, i32 0
  %470 = shufflevector <8 x i16> %469, <8 x i16> undef, <8 x i32> zeroinitializer
  %471 = bitcast %"class.(anonymous namespace)::SkNx"* %19 to <8 x i16>*
  store <8 x i16> %470, <8 x i16>* %471, align 16
  %472 = add nsw i32 %6, -8
  %473 = icmp slt i32 %472, 0
  br i1 %473, label %484, label %474

474:                                              ; preds = %442
  %475 = sext i32 %1 to i64
  br label %476

476:                                              ; preds = %476, %474
  %477 = phi i32 [ 0, %474 ], [ %482, %476 ]
  %478 = phi i8* [ %4, %474 ], [ %480, %476 ]
  %479 = phi i8* [ %8, %474 ], [ %481, %476 ]
  call fastcc void @_ZL11blur_columnPFvPhPKhiEPFN12_GLOBAL__N_14SkNxILi8EtEERKS6_S8_S8_S8_S8_S8_PS6_S9_S9_S9_S9_S9_S9_S9_EiiS8_S8_S8_S8_S8_S1_miS_m(void (i8*, i8*, i32)* %0, <2 x i64> (%"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*)* nonnull @_ZL15blur_y_radius_4RKN12_GLOBAL__N_14SkNxILi8EtEES3_S3_S3_S3_S3_PS1_S4_S4_S4_S4_S4_S4_S4_, i32 4, i32 8, %"class.(anonymous namespace)::SkNx"* nonnull dereferenceable(16) %15, %"class.(anonymous namespace)::SkNx"* nonnull dereferenceable(16) %16, %"class.(anonymous namespace)::SkNx"* nonnull dereferenceable(16) %17, %"class.(anonymous namespace)::SkNx"* nonnull dereferenceable(16) %18, %"class.(anonymous namespace)::SkNx"* nonnull dereferenceable(16) %19, i8* %478, i64 %5, i32 %7, i8* %479, i64 %9) #12
  %480 = getelementptr inbounds i8, i8* %478, i64 %475
  %481 = getelementptr inbounds i8, i8* %479, i64 8
  %482 = add nuw nsw i32 %477, 8
  %483 = icmp sgt i32 %482, %472
  br i1 %483, label %484, label %476

484:                                              ; preds = %476, %442
  %485 = phi i8* [ %8, %442 ], [ %481, %476 ]
  %486 = phi i8* [ %4, %442 ], [ %480, %476 ]
  %487 = phi i32 [ 0, %442 ], [ %482, %476 ]
  %488 = sub nsw i32 %6, %487
  %489 = icmp sgt i32 %488, 0
  br i1 %489, label %490, label %491

490:                                              ; preds = %484
  call fastcc void @_ZL11blur_columnPFvPhPKhiEPFN12_GLOBAL__N_14SkNxILi8EtEERKS6_S8_S8_S8_S8_S8_PS6_S9_S9_S9_S9_S9_S9_S9_EiiS8_S8_S8_S8_S8_S1_miS_m(void (i8*, i8*, i32)* %0, <2 x i64> (%"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*)* nonnull @_ZL15blur_y_radius_4RKN12_GLOBAL__N_14SkNxILi8EtEES3_S3_S3_S3_S3_PS1_S4_S4_S4_S4_S4_S4_S4_, i32 4, i32 %488, %"class.(anonymous namespace)::SkNx"* nonnull dereferenceable(16) %15, %"class.(anonymous namespace)::SkNx"* nonnull dereferenceable(16) %16, %"class.(anonymous namespace)::SkNx"* nonnull dereferenceable(16) %17, %"class.(anonymous namespace)::SkNx"* nonnull dereferenceable(16) %18, %"class.(anonymous namespace)::SkNx"* nonnull dereferenceable(16) %19, i8* %486, i64 %5, i32 %7, i8* %485, i64 %9) #12
  br label %491

491:                                              ; preds = %484, %490
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %466) #12
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %460) #12
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %454) #12
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %448) #12
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %443) #12
  br label %492

492:                                              ; preds = %173, %165, %101, %10, %491, %441, %301
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZL8bw_to_a8PhPKhi(i8* nocapture, i8* nocapture readonly, i32) #7 {
  %4 = icmp sgt i32 %2, 0
  br i1 %4, label %5, label %61

5:                                                ; preds = %3
  %6 = load i8, i8* %1, align 1
  %7 = zext i8 %6 to i32
  %8 = zext i32 %2 to i64
  %9 = icmp ult i32 %2, 16
  br i1 %9, label %10, label %12

10:                                               ; preds = %59, %5
  %11 = phi i64 [ 0, %5 ], [ %13, %59 ]
  br label %62

12:                                               ; preds = %5
  %13 = and i64 %8, 4294967280
  %14 = insertelement <16 x i32> undef, i32 %7, i32 0
  %15 = shufflevector <16 x i32> %14, <16 x i32> undef, <16 x i32> zeroinitializer
  %16 = add nsw i64 %13, -16
  %17 = lshr exact i64 %16, 4
  %18 = add nuw nsw i64 %17, 1
  %19 = and i64 %18, 1
  %20 = icmp eq i64 %16, 0
  br i1 %20, label %48, label %21

21:                                               ; preds = %12
  %22 = sub nuw nsw i64 %18, %19
  br label %23

23:                                               ; preds = %23, %21
  %24 = phi i64 [ 0, %21 ], [ %42, %23 ]
  %25 = phi <16 x i32> [ <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>, %21 ], [ %43, %23 ]
  %26 = phi i64 [ %22, %21 ], [ %44, %23 ]
  %27 = sub <16 x i32> <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>, %25
  %28 = shl <16 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, %27
  %29 = and <16 x i32> %28, %15
  %30 = icmp ne <16 x i32> %29, zeroinitializer
  %31 = sext <16 x i1> %30 to <16 x i8>
  %32 = getelementptr inbounds i8, i8* %0, i64 %24
  %33 = bitcast i8* %32 to <16 x i8>*
  store <16 x i8> %31, <16 x i8>* %33, align 1
  %34 = or i64 %24, 16
  %35 = sub <16 x i32> <i32 -9, i32 -9, i32 -9, i32 -9, i32 -9, i32 -9, i32 -9, i32 -9, i32 -9, i32 -9, i32 -9, i32 -9, i32 -9, i32 -9, i32 -9, i32 -9>, %25
  %36 = shl <16 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, %35
  %37 = and <16 x i32> %36, %15
  %38 = icmp ne <16 x i32> %37, zeroinitializer
  %39 = sext <16 x i1> %38 to <16 x i8>
  %40 = getelementptr inbounds i8, i8* %0, i64 %34
  %41 = bitcast i8* %40 to <16 x i8>*
  store <16 x i8> %39, <16 x i8>* %41, align 1
  %42 = add i64 %24, 32
  %43 = add <16 x i32> %25, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %44 = add i64 %26, -2
  %45 = icmp eq i64 %44, 0
  br i1 %45, label %46, label %23, !llvm.loop !3

46:                                               ; preds = %23
  %47 = sub <16 x i32> <i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25>, %25
  br label %48

48:                                               ; preds = %46, %12
  %49 = phi i64 [ 0, %12 ], [ %42, %46 ]
  %50 = phi <16 x i32> [ <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0, i32 -1, i32 -2, i32 -3, i32 -4, i32 -5, i32 -6, i32 -7, i32 -8>, %12 ], [ %47, %46 ]
  %51 = icmp eq i64 %19, 0
  br i1 %51, label %59, label %52

52:                                               ; preds = %48
  %53 = shl <16 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, %50
  %54 = and <16 x i32> %53, %15
  %55 = icmp ne <16 x i32> %54, zeroinitializer
  %56 = sext <16 x i1> %55 to <16 x i8>
  %57 = getelementptr inbounds i8, i8* %0, i64 %49
  %58 = bitcast i8* %57 to <16 x i8>*
  store <16 x i8> %56, <16 x i8>* %58, align 1
  br label %59

59:                                               ; preds = %48, %52
  %60 = icmp eq i64 %13, %8
  br i1 %60, label %61, label %10

61:                                               ; preds = %62, %59, %3
  ret void

62:                                               ; preds = %10, %62
  %63 = phi i64 [ %71, %62 ], [ %11, %10 ]
  %64 = trunc i64 %63 to i32
  %65 = sub i32 7, %64
  %66 = shl i32 1, %65
  %67 = and i32 %66, %7
  %68 = icmp ne i32 %67, 0
  %69 = sext i1 %68 to i8
  %70 = getelementptr inbounds i8, i8* %0, i64 %63
  store i8 %69, i8* %70, align 1
  %71 = add nuw nsw i64 %63, 1
  %72 = icmp eq i64 %71, %8
  br i1 %72, label %61, label %62, !llvm.loop !5
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZL12argb32_to_a8PhPKhi(i8* nocapture, i8* nocapture readonly, i32) #7 {
  %4 = icmp sgt i32 %2, 0
  br i1 %4, label %5, label %100

5:                                                ; preds = %3
  %6 = bitcast i8* %1 to i32*
  %7 = zext i32 %2 to i64
  %8 = icmp ult i32 %2, 8
  br i1 %8, label %9, label %29

9:                                                ; preds = %98, %29, %5
  %10 = phi i64 [ 0, %29 ], [ 0, %5 ], [ %37, %98 ]
  %11 = xor i64 %10, -1
  %12 = add nsw i64 %11, %7
  %13 = and i64 %7, 3
  %14 = icmp eq i64 %13, 0
  br i1 %14, label %26, label %15

15:                                               ; preds = %9, %15
  %16 = phi i64 [ %23, %15 ], [ %10, %9 ]
  %17 = phi i64 [ %24, %15 ], [ %13, %9 ]
  %18 = getelementptr inbounds i32, i32* %6, i64 %16
  %19 = load i32, i32* %18, align 4
  %20 = lshr i32 %19, 24
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds i8, i8* %0, i64 %16
  store i8 %21, i8* %22, align 1
  %23 = add nuw nsw i64 %16, 1
  %24 = add i64 %17, -1
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %26, label %15, !llvm.loop !7

26:                                               ; preds = %15, %9
  %27 = phi i64 [ %10, %9 ], [ %23, %15 ]
  %28 = icmp ult i64 %12, 3
  br i1 %28, label %100, label %101

29:                                               ; preds = %5
  %30 = getelementptr i8, i8* %0, i64 %7
  %31 = shl nuw nsw i64 %7, 2
  %32 = getelementptr i8, i8* %1, i64 %31
  %33 = icmp ugt i8* %32, %0
  %34 = icmp ugt i8* %30, %1
  %35 = and i1 %33, %34
  br i1 %35, label %9, label %36

36:                                               ; preds = %29
  %37 = and i64 %7, 4294967288
  %38 = add nsw i64 %37, -8
  %39 = lshr exact i64 %38, 3
  %40 = add nuw nsw i64 %39, 1
  %41 = and i64 %40, 1
  %42 = icmp eq i64 %38, 0
  br i1 %42, label %80, label %43

43:                                               ; preds = %36
  %44 = sub nuw nsw i64 %40, %41
  br label %45

45:                                               ; preds = %45, %43
  %46 = phi i64 [ 0, %43 ], [ %77, %45 ]
  %47 = phi i64 [ %44, %43 ], [ %78, %45 ]
  %48 = getelementptr inbounds i32, i32* %6, i64 %46
  %49 = bitcast i32* %48 to <4 x i32>*
  %50 = load <4 x i32>, <4 x i32>* %49, align 4, !alias.scope !9
  %51 = getelementptr inbounds i32, i32* %48, i64 4
  %52 = bitcast i32* %51 to <4 x i32>*
  %53 = load <4 x i32>, <4 x i32>* %52, align 4, !alias.scope !9
  %54 = lshr <4 x i32> %50, <i32 24, i32 24, i32 24, i32 24>
  %55 = lshr <4 x i32> %53, <i32 24, i32 24, i32 24, i32 24>
  %56 = trunc <4 x i32> %54 to <4 x i8>
  %57 = trunc <4 x i32> %55 to <4 x i8>
  %58 = getelementptr inbounds i8, i8* %0, i64 %46
  %59 = bitcast i8* %58 to <4 x i8>*
  store <4 x i8> %56, <4 x i8>* %59, align 1, !alias.scope !12, !noalias !9
  %60 = getelementptr inbounds i8, i8* %58, i64 4
  %61 = bitcast i8* %60 to <4 x i8>*
  store <4 x i8> %57, <4 x i8>* %61, align 1, !alias.scope !12, !noalias !9
  %62 = or i64 %46, 8
  %63 = getelementptr inbounds i32, i32* %6, i64 %62
  %64 = bitcast i32* %63 to <4 x i32>*
  %65 = load <4 x i32>, <4 x i32>* %64, align 4, !alias.scope !9
  %66 = getelementptr inbounds i32, i32* %63, i64 4
  %67 = bitcast i32* %66 to <4 x i32>*
  %68 = load <4 x i32>, <4 x i32>* %67, align 4, !alias.scope !9
  %69 = lshr <4 x i32> %65, <i32 24, i32 24, i32 24, i32 24>
  %70 = lshr <4 x i32> %68, <i32 24, i32 24, i32 24, i32 24>
  %71 = trunc <4 x i32> %69 to <4 x i8>
  %72 = trunc <4 x i32> %70 to <4 x i8>
  %73 = getelementptr inbounds i8, i8* %0, i64 %62
  %74 = bitcast i8* %73 to <4 x i8>*
  store <4 x i8> %71, <4 x i8>* %74, align 1, !alias.scope !12, !noalias !9
  %75 = getelementptr inbounds i8, i8* %73, i64 4
  %76 = bitcast i8* %75 to <4 x i8>*
  store <4 x i8> %72, <4 x i8>* %76, align 1, !alias.scope !12, !noalias !9
  %77 = add i64 %46, 16
  %78 = add i64 %47, -2
  %79 = icmp eq i64 %78, 0
  br i1 %79, label %80, label %45, !llvm.loop !14

80:                                               ; preds = %45, %36
  %81 = phi i64 [ 0, %36 ], [ %77, %45 ]
  %82 = icmp eq i64 %41, 0
  br i1 %82, label %98, label %83

83:                                               ; preds = %80
  %84 = getelementptr inbounds i32, i32* %6, i64 %81
  %85 = bitcast i32* %84 to <4 x i32>*
  %86 = load <4 x i32>, <4 x i32>* %85, align 4, !alias.scope !9
  %87 = getelementptr inbounds i32, i32* %84, i64 4
  %88 = bitcast i32* %87 to <4 x i32>*
  %89 = load <4 x i32>, <4 x i32>* %88, align 4, !alias.scope !9
  %90 = lshr <4 x i32> %86, <i32 24, i32 24, i32 24, i32 24>
  %91 = lshr <4 x i32> %89, <i32 24, i32 24, i32 24, i32 24>
  %92 = trunc <4 x i32> %90 to <4 x i8>
  %93 = trunc <4 x i32> %91 to <4 x i8>
  %94 = getelementptr inbounds i8, i8* %0, i64 %81
  %95 = bitcast i8* %94 to <4 x i8>*
  store <4 x i8> %92, <4 x i8>* %95, align 1, !alias.scope !12, !noalias !9
  %96 = getelementptr inbounds i8, i8* %94, i64 4
  %97 = bitcast i8* %96 to <4 x i8>*
  store <4 x i8> %93, <4 x i8>* %97, align 1, !alias.scope !12, !noalias !9
  br label %98

98:                                               ; preds = %80, %83
  %99 = icmp eq i64 %37, %7
  br i1 %99, label %100, label %9

100:                                              ; preds = %26, %101, %98, %3
  ret void

101:                                              ; preds = %26, %101
  %102 = phi i64 [ %126, %101 ], [ %27, %26 ]
  %103 = getelementptr inbounds i32, i32* %6, i64 %102
  %104 = load i32, i32* %103, align 4
  %105 = lshr i32 %104, 24
  %106 = trunc i32 %105 to i8
  %107 = getelementptr inbounds i8, i8* %0, i64 %102
  store i8 %106, i8* %107, align 1
  %108 = add nuw nsw i64 %102, 1
  %109 = getelementptr inbounds i32, i32* %6, i64 %108
  %110 = load i32, i32* %109, align 4
  %111 = lshr i32 %110, 24
  %112 = trunc i32 %111 to i8
  %113 = getelementptr inbounds i8, i8* %0, i64 %108
  store i8 %112, i8* %113, align 1
  %114 = add nuw nsw i64 %102, 2
  %115 = getelementptr inbounds i32, i32* %6, i64 %114
  %116 = load i32, i32* %115, align 4
  %117 = lshr i32 %116, 24
  %118 = trunc i32 %117 to i8
  %119 = getelementptr inbounds i8, i8* %0, i64 %114
  store i8 %118, i8* %119, align 1
  %120 = add nuw nsw i64 %102, 3
  %121 = getelementptr inbounds i32, i32* %6, i64 %120
  %122 = load i32, i32* %121, align 4
  %123 = lshr i32 %122, 24
  %124 = trunc i32 %123 to i8
  %125 = getelementptr inbounds i8, i8* %0, i64 %120
  store i8 %124, i8* %125, align 1
  %126 = add nuw nsw i64 %102, 4
  %127 = icmp eq i64 %126, %7
  br i1 %127, label %100, label %101, !llvm.loop !15
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZL9lcd_to_a8PhPKhi(i8* nocapture, i8* nocapture readonly, i32) #7 {
  %4 = icmp sgt i32 %2, 0
  br i1 %4, label %5, label %49

5:                                                ; preds = %3
  %6 = bitcast i8* %1 to i16*
  %7 = zext i32 %2 to i64
  %8 = icmp ult i32 %2, 8
  br i1 %8, label %9, label %11

9:                                                ; preds = %47, %11, %5
  %10 = phi i64 [ 0, %11 ], [ 0, %5 ], [ %19, %47 ]
  br label %50

11:                                               ; preds = %5
  %12 = getelementptr i8, i8* %0, i64 %7
  %13 = shl nuw nsw i64 %7, 1
  %14 = getelementptr i8, i8* %1, i64 %13
  %15 = icmp ugt i8* %14, %0
  %16 = icmp ugt i8* %12, %1
  %17 = and i1 %15, %16
  br i1 %17, label %9, label %18

18:                                               ; preds = %11
  %19 = and i64 %7, 4294967288
  br label %20

20:                                               ; preds = %20, %18
  %21 = phi i64 [ 0, %18 ], [ %45, %20 ]
  %22 = getelementptr inbounds i16, i16* %6, i64 %21
  %23 = bitcast i16* %22 to <8 x i16>*
  %24 = load <8 x i16>, <8 x i16>* %23, align 2, !alias.scope !16
  %25 = zext <8 x i16> %24 to <8 x i32>
  %26 = lshr <8 x i32> %25, <i32 11, i32 11, i32 11, i32 11, i32 11, i32 11, i32 11, i32 11>
  %27 = shl nuw nsw <8 x i32> %26, <i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3>
  %28 = lshr <8 x i32> %25, <i32 13, i32 13, i32 13, i32 13, i32 13, i32 13, i32 13, i32 13>
  %29 = or <8 x i32> %27, %28
  %30 = lshr <8 x i32> %25, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %31 = and <8 x i32> %30, <i32 63, i32 63, i32 63, i32 63, i32 63, i32 63, i32 63, i32 63>
  %32 = shl nuw nsw <8 x i32> %31, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %33 = lshr <8 x i32> %31, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>
  %34 = or <8 x i32> %32, %33
  %35 = and <8 x i32> %25, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %36 = shl nuw nsw <8 x i32> %35, <i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3>
  %37 = lshr <8 x i32> %35, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %38 = or <8 x i32> %36, %37
  %39 = add nuw nsw <8 x i32> %38, %29
  %40 = add nuw nsw <8 x i32> %39, %34
  %41 = udiv <8 x i32> %40, <i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3>
  %42 = trunc <8 x i32> %41 to <8 x i8>
  %43 = getelementptr inbounds i8, i8* %0, i64 %21
  %44 = bitcast i8* %43 to <8 x i8>*
  store <8 x i8> %42, <8 x i8>* %44, align 1, !alias.scope !19, !noalias !16
  %45 = add i64 %21, 8
  %46 = icmp eq i64 %45, %19
  br i1 %46, label %47, label %20, !llvm.loop !21

47:                                               ; preds = %20
  %48 = icmp eq i64 %19, %7
  br i1 %48, label %49, label %9

49:                                               ; preds = %50, %47, %3
  ret void

50:                                               ; preds = %9, %50
  %51 = phi i64 [ %73, %50 ], [ %10, %9 ]
  %52 = getelementptr inbounds i16, i16* %6, i64 %51
  %53 = load i16, i16* %52, align 2
  %54 = zext i16 %53 to i32
  %55 = lshr i32 %54, 11
  %56 = shl nuw nsw i32 %55, 3
  %57 = lshr i32 %54, 13
  %58 = or i32 %56, %57
  %59 = lshr i32 %54, 5
  %60 = and i32 %59, 63
  %61 = shl nuw nsw i32 %60, 2
  %62 = lshr i32 %60, 4
  %63 = or i32 %61, %62
  %64 = and i32 %54, 31
  %65 = shl nuw nsw i32 %64, 3
  %66 = lshr i32 %64, 2
  %67 = or i32 %65, %66
  %68 = add nuw nsw i32 %67, %58
  %69 = add nuw nsw i32 %68, %63
  %70 = udiv i32 %69, 3
  %71 = trunc i32 %70 to i8
  %72 = getelementptr inbounds i8, i8* %0, i64 %51
  store i8 %71, i8* %72, align 1
  %73 = add nuw nsw i64 %51, 1
  %74 = icmp eq i64 %73, %7
  br i1 %74, label %49, label %50, !llvm.loop !22
}

; Function Attrs: nounwind readnone speculatable
declare double @llvm.round.f64(double) #8

; Function Attrs: nounwind ssp uwtable
define internal <2 x i64> @_ZL15blur_y_radius_2RKN12_GLOBAL__N_14SkNxILi8EtEES3_S3_S3_S3_S3_PS1_S4_S4_S4_S4_S4_S4_S4_(%"class.(anonymous namespace)::SkNx"* nocapture readonly dereferenceable(16), %"class.(anonymous namespace)::SkNx"* nocapture readonly dereferenceable(16), %"class.(anonymous namespace)::SkNx"* nocapture readonly dereferenceable(16), %"class.(anonymous namespace)::SkNx"* nocapture readonly dereferenceable(16), %"class.(anonymous namespace)::SkNx"* nocapture readnone dereferenceable(16), %"class.(anonymous namespace)::SkNx"* nocapture readnone dereferenceable(16), %"class.(anonymous namespace)::SkNx"* nocapture, %"class.(anonymous namespace)::SkNx"* nocapture, %"class.(anonymous namespace)::SkNx"* nocapture, %"class.(anonymous namespace)::SkNx"* nocapture, %"class.(anonymous namespace)::SkNx"* nocapture readnone, %"class.(anonymous namespace)::SkNx"* nocapture readnone, %"class.(anonymous namespace)::SkNx"* nocapture readnone, %"class.(anonymous namespace)::SkNx"* nocapture readnone) #6 {
  %15 = bitcast %"class.(anonymous namespace)::SkNx"* %0 to <8 x i16>*
  %16 = load <8 x i16>, <8 x i16>* %15, align 16
  %17 = bitcast %"class.(anonymous namespace)::SkNx"* %1 to <8 x i16>*
  %18 = load <8 x i16>, <8 x i16>* %17, align 16
  %19 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %16, <8 x i16> %18) #12
  %20 = bitcast %"class.(anonymous namespace)::SkNx"* %2 to <8 x i16>*
  %21 = load <8 x i16>, <8 x i16>* %20, align 16
  %22 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %16, <8 x i16> %21) #12
  %23 = bitcast %"class.(anonymous namespace)::SkNx"* %3 to <8 x i16>*
  %24 = load <8 x i16>, <8 x i16>* %23, align 16
  %25 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %16, <8 x i16> %24) #12
  %26 = bitcast %"class.(anonymous namespace)::SkNx"* %6 to <8 x i16>*
  %27 = load <8 x i16>, <8 x i16>* %26, align 16
  %28 = add <8 x i16> %27, %25
  %29 = bitcast <8 x i16> %28 to <2 x i64>
  %30 = bitcast %"class.(anonymous namespace)::SkNx"* %7 to <8 x i16>*
  %31 = load <8 x i16>, <8 x i16>* %30, align 16
  %32 = add <8 x i16> %31, %22
  store <8 x i16> %32, <8 x i16>* %26, align 16
  %33 = bitcast %"class.(anonymous namespace)::SkNx"* %8 to <8 x i16>*
  %34 = load <8 x i16>, <8 x i16>* %33, align 16
  %35 = add <8 x i16> %34, %19
  store <8 x i16> %35, <8 x i16>* %30, align 16
  %36 = bitcast %"class.(anonymous namespace)::SkNx"* %9 to <8 x i16>*
  %37 = load <8 x i16>, <8 x i16>* %36, align 16
  %38 = add <8 x i16> %37, %22
  store <8 x i16> %38, <8 x i16>* %33, align 16
  %39 = add <8 x i16> %25, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  store <8 x i16> %39, <8 x i16>* %36, align 16
  ret <2 x i64> %29
}

; Function Attrs: nounwind ssp uwtable
define internal <2 x i64> @_ZL15blur_y_radius_3RKN12_GLOBAL__N_14SkNxILi8EtEES3_S3_S3_S3_S3_PS1_S4_S4_S4_S4_S4_S4_S4_(%"class.(anonymous namespace)::SkNx"* nocapture readonly dereferenceable(16), %"class.(anonymous namespace)::SkNx"* nocapture readonly dereferenceable(16), %"class.(anonymous namespace)::SkNx"* nocapture readonly dereferenceable(16), %"class.(anonymous namespace)::SkNx"* nocapture readonly dereferenceable(16), %"class.(anonymous namespace)::SkNx"* nocapture readonly dereferenceable(16), %"class.(anonymous namespace)::SkNx"* nocapture readnone dereferenceable(16), %"class.(anonymous namespace)::SkNx"* nocapture, %"class.(anonymous namespace)::SkNx"* nocapture, %"class.(anonymous namespace)::SkNx"* nocapture, %"class.(anonymous namespace)::SkNx"* nocapture, %"class.(anonymous namespace)::SkNx"* nocapture, %"class.(anonymous namespace)::SkNx"* nocapture, %"class.(anonymous namespace)::SkNx"* nocapture readnone, %"class.(anonymous namespace)::SkNx"* nocapture readnone) #6 {
  %15 = bitcast %"class.(anonymous namespace)::SkNx"* %0 to <8 x i16>*
  %16 = load <8 x i16>, <8 x i16>* %15, align 16
  %17 = bitcast %"class.(anonymous namespace)::SkNx"* %1 to <8 x i16>*
  %18 = load <8 x i16>, <8 x i16>* %17, align 16
  %19 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %16, <8 x i16> %18) #12
  %20 = bitcast %"class.(anonymous namespace)::SkNx"* %2 to <8 x i16>*
  %21 = load <8 x i16>, <8 x i16>* %20, align 16
  %22 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %16, <8 x i16> %21) #12
  %23 = bitcast %"class.(anonymous namespace)::SkNx"* %3 to <8 x i16>*
  %24 = load <8 x i16>, <8 x i16>* %23, align 16
  %25 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %16, <8 x i16> %24) #12
  %26 = bitcast %"class.(anonymous namespace)::SkNx"* %4 to <8 x i16>*
  %27 = load <8 x i16>, <8 x i16>* %26, align 16
  %28 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %16, <8 x i16> %27) #12
  %29 = bitcast %"class.(anonymous namespace)::SkNx"* %6 to <8 x i16>*
  %30 = load <8 x i16>, <8 x i16>* %29, align 16
  %31 = add <8 x i16> %30, %28
  %32 = bitcast <8 x i16> %31 to <2 x i64>
  %33 = bitcast %"class.(anonymous namespace)::SkNx"* %7 to <8 x i16>*
  %34 = load <8 x i16>, <8 x i16>* %33, align 16
  %35 = add <8 x i16> %34, %25
  store <8 x i16> %35, <8 x i16>* %29, align 16
  %36 = bitcast %"class.(anonymous namespace)::SkNx"* %8 to <8 x i16>*
  %37 = load <8 x i16>, <8 x i16>* %36, align 16
  %38 = add <8 x i16> %37, %22
  store <8 x i16> %38, <8 x i16>* %33, align 16
  %39 = bitcast %"class.(anonymous namespace)::SkNx"* %9 to <8 x i16>*
  %40 = load <8 x i16>, <8 x i16>* %39, align 16
  %41 = add <8 x i16> %40, %19
  store <8 x i16> %41, <8 x i16>* %36, align 16
  %42 = bitcast %"class.(anonymous namespace)::SkNx"* %10 to <8 x i16>*
  %43 = load <8 x i16>, <8 x i16>* %42, align 16
  %44 = add <8 x i16> %43, %22
  store <8 x i16> %44, <8 x i16>* %39, align 16
  %45 = bitcast %"class.(anonymous namespace)::SkNx"* %11 to <8 x i16>*
  %46 = load <8 x i16>, <8 x i16>* %45, align 16
  %47 = add <8 x i16> %46, %25
  store <8 x i16> %47, <8 x i16>* %42, align 16
  %48 = add <8 x i16> %28, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  store <8 x i16> %48, <8 x i16>* %45, align 16
  ret <2 x i64> %32
}

; Function Attrs: nounwind ssp uwtable
define internal <2 x i64> @_ZL15blur_y_radius_4RKN12_GLOBAL__N_14SkNxILi8EtEES3_S3_S3_S3_S3_PS1_S4_S4_S4_S4_S4_S4_S4_(%"class.(anonymous namespace)::SkNx"* nocapture readonly dereferenceable(16), %"class.(anonymous namespace)::SkNx"* nocapture readonly dereferenceable(16), %"class.(anonymous namespace)::SkNx"* nocapture readonly dereferenceable(16), %"class.(anonymous namespace)::SkNx"* nocapture readonly dereferenceable(16), %"class.(anonymous namespace)::SkNx"* nocapture readonly dereferenceable(16), %"class.(anonymous namespace)::SkNx"* nocapture readonly dereferenceable(16), %"class.(anonymous namespace)::SkNx"* nocapture, %"class.(anonymous namespace)::SkNx"* nocapture, %"class.(anonymous namespace)::SkNx"* nocapture, %"class.(anonymous namespace)::SkNx"* nocapture, %"class.(anonymous namespace)::SkNx"* nocapture, %"class.(anonymous namespace)::SkNx"* nocapture, %"class.(anonymous namespace)::SkNx"* nocapture, %"class.(anonymous namespace)::SkNx"* nocapture) #6 {
  %15 = bitcast %"class.(anonymous namespace)::SkNx"* %0 to <8 x i16>*
  %16 = load <8 x i16>, <8 x i16>* %15, align 16
  %17 = bitcast %"class.(anonymous namespace)::SkNx"* %1 to <8 x i16>*
  %18 = load <8 x i16>, <8 x i16>* %17, align 16
  %19 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %16, <8 x i16> %18) #12
  %20 = bitcast %"class.(anonymous namespace)::SkNx"* %2 to <8 x i16>*
  %21 = load <8 x i16>, <8 x i16>* %20, align 16
  %22 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %16, <8 x i16> %21) #12
  %23 = bitcast %"class.(anonymous namespace)::SkNx"* %3 to <8 x i16>*
  %24 = load <8 x i16>, <8 x i16>* %23, align 16
  %25 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %16, <8 x i16> %24) #12
  %26 = bitcast %"class.(anonymous namespace)::SkNx"* %4 to <8 x i16>*
  %27 = load <8 x i16>, <8 x i16>* %26, align 16
  %28 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %16, <8 x i16> %27) #12
  %29 = bitcast %"class.(anonymous namespace)::SkNx"* %5 to <8 x i16>*
  %30 = load <8 x i16>, <8 x i16>* %29, align 16
  %31 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %16, <8 x i16> %30) #12
  %32 = bitcast %"class.(anonymous namespace)::SkNx"* %6 to <8 x i16>*
  %33 = load <8 x i16>, <8 x i16>* %32, align 16
  %34 = add <8 x i16> %33, %31
  %35 = bitcast <8 x i16> %34 to <2 x i64>
  %36 = bitcast %"class.(anonymous namespace)::SkNx"* %7 to <8 x i16>*
  %37 = load <8 x i16>, <8 x i16>* %36, align 16
  %38 = add <8 x i16> %37, %28
  store <8 x i16> %38, <8 x i16>* %32, align 16
  %39 = bitcast %"class.(anonymous namespace)::SkNx"* %8 to <8 x i16>*
  %40 = load <8 x i16>, <8 x i16>* %39, align 16
  %41 = add <8 x i16> %40, %25
  store <8 x i16> %41, <8 x i16>* %36, align 16
  %42 = bitcast %"class.(anonymous namespace)::SkNx"* %9 to <8 x i16>*
  %43 = load <8 x i16>, <8 x i16>* %42, align 16
  %44 = add <8 x i16> %43, %22
  store <8 x i16> %44, <8 x i16>* %39, align 16
  %45 = bitcast %"class.(anonymous namespace)::SkNx"* %10 to <8 x i16>*
  %46 = load <8 x i16>, <8 x i16>* %45, align 16
  %47 = add <8 x i16> %46, %19
  store <8 x i16> %47, <8 x i16>* %42, align 16
  %48 = bitcast %"class.(anonymous namespace)::SkNx"* %11 to <8 x i16>*
  %49 = load <8 x i16>, <8 x i16>* %48, align 16
  %50 = add <8 x i16> %49, %22
  store <8 x i16> %50, <8 x i16>* %45, align 16
  %51 = bitcast %"class.(anonymous namespace)::SkNx"* %12 to <8 x i16>*
  %52 = load <8 x i16>, <8 x i16>* %51, align 16
  %53 = add <8 x i16> %52, %25
  store <8 x i16> %53, <8 x i16>* %48, align 16
  %54 = bitcast %"class.(anonymous namespace)::SkNx"* %13 to <8 x i16>*
  %55 = load <8 x i16>, <8 x i16>* %54, align 16
  %56 = add <8 x i16> %55, %28
  store <8 x i16> %56, <8 x i16>* %51, align 16
  %57 = add <8 x i16> %31, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  store <8 x i16> %57, <8 x i16>* %54, align 16
  ret <2 x i64> %35
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZL11blur_columnPFvPhPKhiEPFN12_GLOBAL__N_14SkNxILi8EtEERKS6_S8_S8_S8_S8_S8_PS6_S9_S9_S9_S9_S9_S9_S9_EiiS8_S8_S8_S8_S8_S1_miS_m(void (i8*, i8*, i32)*, <2 x i64> (%"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*)* nocapture, i32, i32, %"class.(anonymous namespace)::SkNx"* dereferenceable(16), %"class.(anonymous namespace)::SkNx"* dereferenceable(16), %"class.(anonymous namespace)::SkNx"* dereferenceable(16), %"class.(anonymous namespace)::SkNx"* dereferenceable(16), %"class.(anonymous namespace)::SkNx"* dereferenceable(16), i8*, i64, i32, i8* nocapture, i64) unnamed_addr #6 {
  %15 = alloca i64, align 8
  %16 = alloca i64, align 8
  %17 = alloca i64, align 8
  %18 = alloca i64, align 8
  %19 = alloca i64, align 8
  %20 = alloca i64, align 8
  %21 = alloca i64, align 8
  %22 = alloca i64, align 8
  %23 = alloca i64, align 8
  %24 = alloca i64, align 8
  %25 = alloca %"class.(anonymous namespace)::SkNx", align 16
  %26 = alloca %"class.(anonymous namespace)::SkNx", align 16
  %27 = alloca %"class.(anonymous namespace)::SkNx", align 16
  %28 = alloca %"class.(anonymous namespace)::SkNx", align 16
  %29 = alloca %"class.(anonymous namespace)::SkNx", align 16
  %30 = alloca %"class.(anonymous namespace)::SkNx", align 16
  %31 = alloca %"class.(anonymous namespace)::SkNx", align 16
  %32 = alloca %"class.(anonymous namespace)::SkNx", align 16
  %33 = alloca %"class.(anonymous namespace)::SkNx", align 16
  %34 = bitcast %"class.(anonymous namespace)::SkNx"* %25 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %34) #12
  %35 = bitcast %"class.(anonymous namespace)::SkNx"* %25 to <8 x i16>*
  store <8 x i16> <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>, <8 x i16>* %35, align 16
  %36 = bitcast %"class.(anonymous namespace)::SkNx"* %26 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %36) #12
  %37 = bitcast %"class.(anonymous namespace)::SkNx"* %26 to <8 x i16>*
  store <8 x i16> <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>, <8 x i16>* %37, align 16
  %38 = bitcast %"class.(anonymous namespace)::SkNx"* %27 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %38) #12
  %39 = bitcast %"class.(anonymous namespace)::SkNx"* %27 to <8 x i16>*
  store <8 x i16> <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>, <8 x i16>* %39, align 16
  %40 = bitcast %"class.(anonymous namespace)::SkNx"* %28 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %40) #12
  %41 = bitcast %"class.(anonymous namespace)::SkNx"* %28 to <8 x i16>*
  store <8 x i16> <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>, <8 x i16>* %41, align 16
  %42 = bitcast %"class.(anonymous namespace)::SkNx"* %29 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %42) #12
  %43 = bitcast %"class.(anonymous namespace)::SkNx"* %29 to <8 x i16>*
  store <8 x i16> <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>, <8 x i16>* %43, align 16
  %44 = bitcast %"class.(anonymous namespace)::SkNx"* %30 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %44) #12
  %45 = bitcast %"class.(anonymous namespace)::SkNx"* %30 to <8 x i16>*
  store <8 x i16> <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>, <8 x i16>* %45, align 16
  %46 = bitcast %"class.(anonymous namespace)::SkNx"* %31 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %46) #12
  %47 = bitcast %"class.(anonymous namespace)::SkNx"* %31 to <8 x i16>*
  store <8 x i16> <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>, <8 x i16>* %47, align 16
  %48 = bitcast %"class.(anonymous namespace)::SkNx"* %32 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %48) #12
  %49 = bitcast %"class.(anonymous namespace)::SkNx"* %32 to <8 x i16>*
  store <8 x i16> <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>, <8 x i16>* %49, align 16
  %50 = icmp sgt i32 %11, 0
  br i1 %50, label %51, label %64

51:                                               ; preds = %14
  %52 = bitcast %"class.(anonymous namespace)::SkNx"* %33 to i8*
  %53 = getelementptr inbounds %"class.(anonymous namespace)::SkNx", %"class.(anonymous namespace)::SkNx"* %33, i64 0, i32 0
  %54 = bitcast i64* %15 to i8*
  %55 = icmp eq void (i8*, i8*, i32)* %0, null
  %56 = icmp sgt i32 %3, 7
  %57 = zext i32 %3 to i64
  %58 = bitcast %"class.(anonymous namespace)::SkNx"* %33 to <8 x i16>*
  %59 = icmp eq i32 %3, 8
  %60 = bitcast i64* %16 to i8*
  %61 = icmp sgt i32 %3, 0
  %62 = add i32 %3, -1
  %63 = icmp ugt i32 %62, 6
  br label %67

64:                                               ; preds = %96, %14
  %65 = phi i8* [ %12, %14 ], [ %98, %96 ]
  %66 = icmp sgt i32 %2, 0
  br i1 %66, label %101, label %242

67:                                               ; preds = %96, %51
  %68 = phi i32 [ 0, %51 ], [ %99, %96 ]
  %69 = phi i8* [ %12, %51 ], [ %98, %96 ]
  %70 = phi i8* [ %9, %51 ], [ %97, %96 ]
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %52) #12
  store <2 x i64> <i64 -6148914691236517206, i64 -6148914691236517206>, <2 x i64>* %53, align 16
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %54) #12
  store i64 0, i64* %15, align 8
  br i1 %55, label %72, label %71

71:                                               ; preds = %67
  call void %0(i8* nonnull %54, i8* %70, i32 %3) #12, !callees !2
  br label %75

72:                                               ; preds = %67
  %73 = select i1 %56, i8* %70, i8* %54
  br i1 %63, label %75, label %74

74:                                               ; preds = %72
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %54, i8* align 1 %70, i64 %57, i1 false) #12
  br label %75

75:                                               ; preds = %72, %71, %74
  %76 = phi i8* [ %54, %71 ], [ %73, %72 ], [ %54, %74 ]
  %77 = bitcast i8* %76 to i64*
  %78 = load i64, i64* %77, align 1
  %79 = insertelement <2 x i64> undef, i64 %78, i32 0
  %80 = bitcast <2 x i64> %79 to <16 x i8>
  %81 = shufflevector <16 x i8> %80, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %82 = bitcast <16 x i8> %81 to <8 x i16>
  %83 = shl <8 x i16> %82, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %54) #12
  store <8 x i16> %83, <8 x i16>* %58, align 16
  %84 = call <2 x i64> %1(%"class.(anonymous namespace)::SkNx"* nonnull dereferenceable(16) %33, %"class.(anonymous namespace)::SkNx"* dereferenceable(16) %4, %"class.(anonymous namespace)::SkNx"* dereferenceable(16) %5, %"class.(anonymous namespace)::SkNx"* dereferenceable(16) %6, %"class.(anonymous namespace)::SkNx"* dereferenceable(16) %7, %"class.(anonymous namespace)::SkNx"* dereferenceable(16) %8, %"class.(anonymous namespace)::SkNx"* nonnull %25, %"class.(anonymous namespace)::SkNx"* nonnull %26, %"class.(anonymous namespace)::SkNx"* nonnull %27, %"class.(anonymous namespace)::SkNx"* nonnull %28, %"class.(anonymous namespace)::SkNx"* nonnull %29, %"class.(anonymous namespace)::SkNx"* nonnull %30, %"class.(anonymous namespace)::SkNx"* nonnull %31, %"class.(anonymous namespace)::SkNx"* nonnull %32) #12, !callees !23
  %85 = bitcast <2 x i64> %84 to <8 x i16>
  %86 = lshr <8 x i16> %85, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %87 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %86, <8 x i16> %86) #12
  %88 = bitcast <16 x i8> %87 to <2 x i64>
  br i1 %59, label %89, label %92

89:                                               ; preds = %75
  %90 = extractelement <2 x i64> %88, i32 0
  %91 = bitcast i8* %69 to i64*
  store i64 %90, i64* %91, align 1
  br label %96

92:                                               ; preds = %75
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %60)
  %93 = extractelement <2 x i64> %88, i32 0
  store i64 %93, i64* %16, align 8
  br i1 %61, label %94, label %95

94:                                               ; preds = %92
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %69, i8* nonnull align 8 %60, i64 %57, i1 false) #12
  br label %95

95:                                               ; preds = %94, %92
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %60)
  br label %96

96:                                               ; preds = %89, %95
  %97 = getelementptr inbounds i8, i8* %70, i64 %10
  %98 = getelementptr inbounds i8, i8* %69, i64 %13
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %52) #12
  %99 = add nuw nsw i32 %68, 1
  %100 = icmp eq i32 %99, %11
  br i1 %100, label %64, label %67

101:                                              ; preds = %64
  %102 = load <8 x i16>, <8 x i16>* %35, align 16
  %103 = lshr <8 x i16> %102, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %104 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %103, <8 x i16> %103) #12
  %105 = bitcast <16 x i8> %104 to <2 x i64>
  %106 = icmp eq i32 %3, 8
  br i1 %106, label %113, label %107

107:                                              ; preds = %101
  %108 = bitcast i64* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %108)
  %109 = extractelement <2 x i64> %105, i32 0
  store i64 %109, i64* %18, align 8
  %110 = icmp sgt i32 %3, 0
  br i1 %110, label %111, label %123

111:                                              ; preds = %107
  %112 = zext i32 %3 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %65, i8* nonnull align 8 %108, i64 %112, i1 false) #12
  br label %123

113:                                              ; preds = %101
  %114 = extractelement <2 x i64> %105, i32 0
  %115 = bitcast i8* %65 to i64*
  store i64 %114, i64* %115, align 1
  %116 = getelementptr inbounds i8, i8* %65, i64 %13
  %117 = load <8 x i16>, <8 x i16>* %37, align 16
  %118 = lshr <8 x i16> %117, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %119 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %118, <8 x i16> undef) #12
  %120 = bitcast <16 x i8> %119 to <2 x i64>
  %121 = extractelement <2 x i64> %120, i32 0
  %122 = bitcast i8* %116 to i64*
  store i64 %121, i64* %122, align 1
  br label %134

123:                                              ; preds = %111, %107
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %108)
  %124 = load <8 x i16>, <8 x i16>* %37, align 16
  %125 = lshr <8 x i16> %124, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %126 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %125, <8 x i16> undef) #12
  %127 = bitcast <16 x i8> %126 to <2 x i64>
  %128 = bitcast i64* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %128)
  %129 = extractelement <2 x i64> %127, i32 0
  store i64 %129, i64* %17, align 8
  br i1 %110, label %130, label %133

130:                                              ; preds = %123
  %131 = getelementptr inbounds i8, i8* %65, i64 %13
  %132 = zext i32 %3 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %131, i8* nonnull align 8 %128, i64 %132, i1 false) #12
  br label %133

133:                                              ; preds = %130, %123
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %128)
  br label %134

134:                                              ; preds = %133, %113
  %135 = getelementptr inbounds i8, i8* %65, i64 %13
  %136 = getelementptr inbounds i8, i8* %135, i64 %13
  %137 = icmp sgt i32 %2, 1
  br i1 %137, label %138, label %242

138:                                              ; preds = %134
  %139 = load <8 x i16>, <8 x i16>* %39, align 16
  %140 = lshr <8 x i16> %139, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %141 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %140, <8 x i16> %140) #12
  %142 = bitcast <16 x i8> %141 to <2 x i64>
  br i1 %106, label %149, label %143

143:                                              ; preds = %138
  %144 = bitcast i64* %20 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %144)
  %145 = extractelement <2 x i64> %142, i32 0
  store i64 %145, i64* %20, align 8
  %146 = icmp sgt i32 %3, 0
  br i1 %146, label %147, label %159

147:                                              ; preds = %143
  %148 = zext i32 %3 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %136, i8* nonnull align 8 %144, i64 %148, i1 false) #12
  br label %159

149:                                              ; preds = %138
  %150 = extractelement <2 x i64> %142, i32 0
  %151 = bitcast i8* %136 to i64*
  store i64 %150, i64* %151, align 1
  %152 = getelementptr inbounds i8, i8* %136, i64 %13
  %153 = load <8 x i16>, <8 x i16>* %41, align 16
  %154 = lshr <8 x i16> %153, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %155 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %154, <8 x i16> undef) #12
  %156 = bitcast <16 x i8> %155 to <2 x i64>
  %157 = extractelement <2 x i64> %156, i32 0
  %158 = bitcast i8* %152 to i64*
  store i64 %157, i64* %158, align 1
  br label %170

159:                                              ; preds = %147, %143
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %144)
  %160 = load <8 x i16>, <8 x i16>* %41, align 16
  %161 = lshr <8 x i16> %160, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %162 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %161, <8 x i16> undef) #12
  %163 = bitcast <16 x i8> %162 to <2 x i64>
  %164 = bitcast i64* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %164)
  %165 = extractelement <2 x i64> %163, i32 0
  store i64 %165, i64* %19, align 8
  br i1 %146, label %166, label %169

166:                                              ; preds = %159
  %167 = getelementptr inbounds i8, i8* %136, i64 %13
  %168 = zext i32 %3 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %167, i8* nonnull align 8 %164, i64 %168, i1 false) #12
  br label %169

169:                                              ; preds = %166, %159
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %164)
  br label %170

170:                                              ; preds = %169, %149
  %171 = getelementptr inbounds i8, i8* %136, i64 %13
  %172 = getelementptr inbounds i8, i8* %171, i64 %13
  %173 = icmp sgt i32 %2, 2
  br i1 %173, label %174, label %242

174:                                              ; preds = %170
  %175 = load <8 x i16>, <8 x i16>* %43, align 16
  %176 = lshr <8 x i16> %175, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %177 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %176, <8 x i16> %176) #12
  %178 = bitcast <16 x i8> %177 to <2 x i64>
  br i1 %106, label %185, label %179

179:                                              ; preds = %174
  %180 = bitcast i64* %22 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %180)
  %181 = extractelement <2 x i64> %178, i32 0
  store i64 %181, i64* %22, align 8
  %182 = icmp sgt i32 %3, 0
  br i1 %182, label %183, label %195

183:                                              ; preds = %179
  %184 = zext i32 %3 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %172, i8* nonnull align 8 %180, i64 %184, i1 false) #12
  br label %195

185:                                              ; preds = %174
  %186 = extractelement <2 x i64> %178, i32 0
  %187 = bitcast i8* %172 to i64*
  store i64 %186, i64* %187, align 1
  %188 = getelementptr inbounds i8, i8* %172, i64 %13
  %189 = load <8 x i16>, <8 x i16>* %45, align 16
  %190 = lshr <8 x i16> %189, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %191 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %190, <8 x i16> undef) #12
  %192 = bitcast <16 x i8> %191 to <2 x i64>
  %193 = extractelement <2 x i64> %192, i32 0
  %194 = bitcast i8* %188 to i64*
  store i64 %193, i64* %194, align 1
  br label %206

195:                                              ; preds = %183, %179
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %180)
  %196 = load <8 x i16>, <8 x i16>* %45, align 16
  %197 = lshr <8 x i16> %196, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %198 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %197, <8 x i16> undef) #12
  %199 = bitcast <16 x i8> %198 to <2 x i64>
  %200 = bitcast i64* %21 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %200)
  %201 = extractelement <2 x i64> %199, i32 0
  store i64 %201, i64* %21, align 8
  br i1 %182, label %202, label %205

202:                                              ; preds = %195
  %203 = getelementptr inbounds i8, i8* %172, i64 %13
  %204 = zext i32 %3 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %203, i8* nonnull align 8 %200, i64 %204, i1 false) #12
  br label %205

205:                                              ; preds = %202, %195
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %200)
  br label %206

206:                                              ; preds = %205, %185
  %207 = getelementptr inbounds i8, i8* %172, i64 %13
  %208 = getelementptr inbounds i8, i8* %207, i64 %13
  %209 = icmp sgt i32 %2, 3
  br i1 %209, label %210, label %242

210:                                              ; preds = %206
  %211 = load <8 x i16>, <8 x i16>* %47, align 16
  %212 = lshr <8 x i16> %211, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %213 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %212, <8 x i16> %212) #12
  %214 = bitcast <16 x i8> %213 to <2 x i64>
  br i1 %106, label %221, label %215

215:                                              ; preds = %210
  %216 = bitcast i64* %24 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %216)
  %217 = extractelement <2 x i64> %214, i32 0
  store i64 %217, i64* %24, align 8
  %218 = icmp sgt i32 %3, 0
  br i1 %218, label %219, label %231

219:                                              ; preds = %215
  %220 = zext i32 %3 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %208, i8* nonnull align 8 %216, i64 %220, i1 false) #12
  br label %231

221:                                              ; preds = %210
  %222 = extractelement <2 x i64> %214, i32 0
  %223 = bitcast i8* %208 to i64*
  store i64 %222, i64* %223, align 1
  %224 = getelementptr inbounds i8, i8* %208, i64 %13
  %225 = load <8 x i16>, <8 x i16>* %49, align 16
  %226 = lshr <8 x i16> %225, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %227 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %226, <8 x i16> undef) #12
  %228 = bitcast <16 x i8> %227 to <2 x i64>
  %229 = extractelement <2 x i64> %228, i32 0
  %230 = bitcast i8* %224 to i64*
  store i64 %229, i64* %230, align 1
  br label %242

231:                                              ; preds = %219, %215
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %216)
  %232 = load <8 x i16>, <8 x i16>* %49, align 16
  %233 = lshr <8 x i16> %232, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %234 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %233, <8 x i16> undef) #12
  %235 = bitcast <16 x i8> %234 to <2 x i64>
  %236 = bitcast i64* %23 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %236)
  %237 = extractelement <2 x i64> %235, i32 0
  store i64 %237, i64* %23, align 8
  br i1 %218, label %238, label %241

238:                                              ; preds = %231
  %239 = getelementptr inbounds i8, i8* %208, i64 %13
  %240 = zext i32 %3 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %239, i8* nonnull align 8 %236, i64 %240, i1 false) #12
  br label %241

241:                                              ; preds = %238, %231
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %236)
  br label %242

242:                                              ; preds = %64, %134, %170, %241, %221, %206
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %48) #12
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %46) #12
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %44) #12
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %42) #12
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %40) #12
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %38) #12
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %36) #12
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %34) #12
  ret void
}

; Function Attrs: nounwind readnone
declare <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16>, <8 x i16>) #9

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16>, <8 x i16>) #9

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZL11blur_x_rectPFvRKN12_GLOBAL__N_14SkNxILi8EtEES3_S3_S3_S3_S3_PS1_S4_EPtPKhmiPhmii(void (%"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*)* nocapture, i16* nocapture readonly, i8* nocapture readonly, i64, i32, i8* nocapture, i64, i32, i32) unnamed_addr #6 {
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = alloca %"class.(anonymous namespace)::SkNx", align 16
  %14 = alloca %"class.(anonymous namespace)::SkNx", align 16
  %15 = alloca %"class.(anonymous namespace)::SkNx", align 16
  %16 = alloca %"class.(anonymous namespace)::SkNx", align 16
  %17 = alloca %"class.(anonymous namespace)::SkNx", align 16
  %18 = alloca %"class.(anonymous namespace)::SkNx", align 16
  %19 = alloca %"class.(anonymous namespace)::SkNx", align 16
  %20 = alloca %"class.(anonymous namespace)::SkNx", align 16
  %21 = alloca %"class.(anonymous namespace)::SkNx", align 16
  %22 = bitcast %"class.(anonymous namespace)::SkNx"* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %22) #12
  %23 = load i16, i16* %1, align 2
  %24 = insertelement <8 x i16> undef, i16 %23, i32 0
  %25 = shufflevector <8 x i16> %24, <8 x i16> undef, <8 x i32> zeroinitializer
  %26 = bitcast %"class.(anonymous namespace)::SkNx"* %17 to <8 x i16>*
  store <8 x i16> %25, <8 x i16>* %26, align 16
  %27 = bitcast %"class.(anonymous namespace)::SkNx"* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %27) #12
  %28 = getelementptr inbounds i16, i16* %1, i64 1
  %29 = load i16, i16* %28, align 2
  %30 = insertelement <8 x i16> undef, i16 %29, i32 0
  %31 = shufflevector <8 x i16> %30, <8 x i16> undef, <8 x i32> zeroinitializer
  %32 = bitcast %"class.(anonymous namespace)::SkNx"* %18 to <8 x i16>*
  store <8 x i16> %31, <8 x i16>* %32, align 16
  %33 = bitcast %"class.(anonymous namespace)::SkNx"* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %33) #12
  %34 = getelementptr inbounds i16, i16* %1, i64 2
  %35 = load i16, i16* %34, align 2
  %36 = insertelement <8 x i16> undef, i16 %35, i32 0
  %37 = shufflevector <8 x i16> %36, <8 x i16> undef, <8 x i32> zeroinitializer
  %38 = bitcast %"class.(anonymous namespace)::SkNx"* %19 to <8 x i16>*
  store <8 x i16> %37, <8 x i16>* %38, align 16
  %39 = bitcast %"class.(anonymous namespace)::SkNx"* %20 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %39) #12
  %40 = getelementptr inbounds i16, i16* %1, i64 3
  %41 = load i16, i16* %40, align 2
  %42 = insertelement <8 x i16> undef, i16 %41, i32 0
  %43 = shufflevector <8 x i16> %42, <8 x i16> undef, <8 x i32> zeroinitializer
  %44 = bitcast %"class.(anonymous namespace)::SkNx"* %20 to <8 x i16>*
  store <8 x i16> %43, <8 x i16>* %44, align 16
  %45 = bitcast %"class.(anonymous namespace)::SkNx"* %21 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %45) #12
  %46 = getelementptr inbounds i16, i16* %1, i64 4
  %47 = load i16, i16* %46, align 2
  %48 = insertelement <8 x i16> undef, i16 %47, i32 0
  %49 = shufflevector <8 x i16> %48, <8 x i16> undef, <8 x i32> zeroinitializer
  %50 = bitcast %"class.(anonymous namespace)::SkNx"* %21 to <8 x i16>*
  store <8 x i16> %49, <8 x i16>* %50, align 16
  %51 = icmp sgt i32 %8, 0
  br i1 %51, label %52, label %66

52:                                               ; preds = %9
  %53 = bitcast %"class.(anonymous namespace)::SkNx"* %13 to i8*
  %54 = bitcast %"class.(anonymous namespace)::SkNx"* %13 to <8 x i16>*
  %55 = bitcast %"class.(anonymous namespace)::SkNx"* %14 to i8*
  %56 = bitcast %"class.(anonymous namespace)::SkNx"* %14 to <8 x i16>*
  %57 = add nsw i32 %4, -8
  %58 = icmp slt i32 %57, 0
  %59 = bitcast %"class.(anonymous namespace)::SkNx"* %15 to i8*
  %60 = bitcast %"class.(anonymous namespace)::SkNx"* %15 to <8 x i16>*
  %61 = bitcast %"class.(anonymous namespace)::SkNx"* %16 to i8*
  %62 = bitcast i64* %10 to i8*
  %63 = bitcast %"class.(anonymous namespace)::SkNx"* %16 to <8 x i16>*
  %64 = bitcast i64* %11 to i8*
  %65 = bitcast i64* %12 to i8*
  br label %67

66:                                               ; preds = %149, %9
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %45) #12
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %39) #12
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %33) #12
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %27) #12
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %22) #12
  ret void

67:                                               ; preds = %149, %52
  %68 = phi i32 [ 0, %52 ], [ %152, %149 ]
  %69 = phi i8* [ %2, %52 ], [ %150, %149 ]
  %70 = phi i8* [ %5, %52 ], [ %151, %149 ]
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %53) #12
  store <8 x i16> <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>, <8 x i16>* %54, align 16
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %55) #12
  store <8 x i16> <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>, <8 x i16>* %56, align 16
  br i1 %58, label %92, label %71

71:                                               ; preds = %67, %71
  %72 = phi i8* [ %88, %71 ], [ %69, %67 ]
  %73 = phi i32 [ %90, %71 ], [ 0, %67 ]
  %74 = phi i8* [ %89, %71 ], [ %70, %67 ]
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %59) #12
  %75 = bitcast i8* %72 to i64*
  %76 = load i64, i64* %75, align 1
  %77 = insertelement <2 x i64> undef, i64 %76, i32 0
  %78 = bitcast <2 x i64> %77 to <16 x i8>
  %79 = shufflevector <16 x i8> %78, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %80 = bitcast <16 x i8> %79 to <8 x i16>
  %81 = shl <8 x i16> %80, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  store <8 x i16> %81, <8 x i16>* %60, align 16
  call void %0(%"class.(anonymous namespace)::SkNx"* nonnull dereferenceable(16) %15, %"class.(anonymous namespace)::SkNx"* nonnull dereferenceable(16) %17, %"class.(anonymous namespace)::SkNx"* nonnull dereferenceable(16) %18, %"class.(anonymous namespace)::SkNx"* nonnull dereferenceable(16) %19, %"class.(anonymous namespace)::SkNx"* nonnull dereferenceable(16) %20, %"class.(anonymous namespace)::SkNx"* nonnull dereferenceable(16) %21, %"class.(anonymous namespace)::SkNx"* nonnull %13, %"class.(anonymous namespace)::SkNx"* nonnull %14) #12, !callees !24
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %59) #12
  %82 = load <8 x i16>, <8 x i16>* %54, align 16
  %83 = lshr <8 x i16> %82, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %84 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %83, <8 x i16> undef) #12
  %85 = bitcast <16 x i8> %84 to <2 x i64>
  %86 = extractelement <2 x i64> %85, i32 0
  %87 = bitcast i8* %74 to i64*
  store i64 %86, i64* %87, align 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %53, i8* nonnull align 16 %55, i64 16, i1 false) #12
  store <8 x i16> <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>, <8 x i16>* %56, align 16
  %88 = getelementptr inbounds i8, i8* %72, i64 8
  %89 = getelementptr inbounds i8, i8* %74, i64 8
  %90 = add nuw nsw i32 %73, 8
  %91 = icmp sgt i32 %90, %57
  br i1 %91, label %92, label %71

92:                                               ; preds = %71, %67
  %93 = phi i8* [ %70, %67 ], [ %89, %71 ]
  %94 = phi i32 [ 0, %67 ], [ %90, %71 ]
  %95 = phi i8* [ %69, %67 ], [ %88, %71 ]
  %96 = sub nsw i32 %4, %94
  %97 = icmp sgt i32 %96, 0
  br i1 %97, label %98, label %132

98:                                               ; preds = %92
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %61) #12
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %62)
  store i64 0, i64* %10, align 8
  %99 = icmp slt i32 %96, 8
  br i1 %99, label %100, label %102

100:                                              ; preds = %98
  %101 = zext i32 %96 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %62, i8* align 1 %95, i64 %101, i1 false) #12
  br label %102

102:                                              ; preds = %100, %98
  %103 = phi i8* [ %95, %98 ], [ %62, %100 ]
  %104 = bitcast i8* %103 to i64*
  %105 = load i64, i64* %104, align 1
  %106 = insertelement <2 x i64> undef, i64 %105, i32 0
  %107 = bitcast <2 x i64> %106 to <16 x i8>
  %108 = shufflevector <16 x i8> %107, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %109 = bitcast <16 x i8> %108 to <8 x i16>
  %110 = shl <8 x i16> %109, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %62)
  store <8 x i16> %110, <8 x i16>* %63, align 16
  call void %0(%"class.(anonymous namespace)::SkNx"* nonnull dereferenceable(16) %16, %"class.(anonymous namespace)::SkNx"* nonnull dereferenceable(16) %17, %"class.(anonymous namespace)::SkNx"* nonnull dereferenceable(16) %18, %"class.(anonymous namespace)::SkNx"* nonnull dereferenceable(16) %19, %"class.(anonymous namespace)::SkNx"* nonnull dereferenceable(16) %20, %"class.(anonymous namespace)::SkNx"* nonnull dereferenceable(16) %21, %"class.(anonymous namespace)::SkNx"* nonnull %13, %"class.(anonymous namespace)::SkNx"* nonnull %14) #12, !callees !24
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %61) #12
  %111 = sub nsw i32 %7, %94
  %112 = icmp slt i32 %111, 8
  %113 = select i1 %112, i32 %111, i32 8
  %114 = load <8 x i16>, <8 x i16>* %54, align 16
  %115 = lshr <8 x i16> %114, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %116 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %115, <8 x i16> %115) #12
  %117 = bitcast <16 x i8> %116 to <2 x i64>
  %118 = icmp sgt i32 %111, 7
  br i1 %118, label %119, label %122

119:                                              ; preds = %102
  %120 = extractelement <2 x i64> %117, i32 0
  %121 = bitcast i8* %93 to i64*
  store i64 %120, i64* %121, align 1
  br label %128

122:                                              ; preds = %102
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %64)
  %123 = extractelement <2 x i64> %117, i32 0
  store i64 %123, i64* %11, align 8
  %124 = icmp sgt i32 %111, 0
  br i1 %124, label %125, label %127

125:                                              ; preds = %122
  %126 = zext i32 %113 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %93, i8* nonnull align 8 %64, i64 %126, i1 false) #12
  br label %127

127:                                              ; preds = %125, %122
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %64)
  br label %128

128:                                              ; preds = %127, %119
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %53, i8* nonnull align 16 %55, i64 16, i1 false) #12
  %129 = sext i32 %113 to i64
  %130 = getelementptr inbounds i8, i8* %93, i64 %129
  %131 = add nsw i32 %113, %94
  br label %132

132:                                              ; preds = %128, %92
  %133 = phi i8* [ %130, %128 ], [ %93, %92 ]
  %134 = phi i32 [ %131, %128 ], [ %94, %92 ]
  %135 = sub nsw i32 %7, %134
  %136 = icmp sgt i32 %135, 0
  br i1 %136, label %137, label %149

137:                                              ; preds = %132
  %138 = load <8 x i16>, <8 x i16>* %54, align 16
  %139 = lshr <8 x i16> %138, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %140 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %139, <8 x i16> %139) #12
  %141 = bitcast <16 x i8> %140 to <2 x i64>
  %142 = icmp eq i32 %135, 8
  br i1 %142, label %143, label %146

143:                                              ; preds = %137
  %144 = extractelement <2 x i64> %141, i32 0
  %145 = bitcast i8* %133 to i64*
  store i64 %144, i64* %145, align 1
  br label %149

146:                                              ; preds = %137
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %65)
  %147 = extractelement <2 x i64> %141, i32 0
  store i64 %147, i64* %12, align 8
  %148 = zext i32 %135 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %133, i8* nonnull align 8 %65, i64 %148, i1 false) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %65)
  br label %149

149:                                              ; preds = %132, %143, %146
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %55) #12
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %53) #12
  %150 = getelementptr inbounds i8, i8* %69, i64 %3
  %151 = getelementptr inbounds i8, i8* %70, i64 %6
  %152 = add nuw nsw i32 %68, 1
  %153 = icmp eq i32 %152, %8
  br i1 %153, label %66, label %67
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZL15blur_x_radius_1RKN12_GLOBAL__N_14SkNxILi8EtEES3_S3_S3_S3_S3_PS1_S4_(%"class.(anonymous namespace)::SkNx"* nocapture readonly dereferenceable(16), %"class.(anonymous namespace)::SkNx"* nocapture readonly dereferenceable(16), %"class.(anonymous namespace)::SkNx"* nocapture readonly dereferenceable(16), %"class.(anonymous namespace)::SkNx"* nocapture readnone dereferenceable(16), %"class.(anonymous namespace)::SkNx"* nocapture readnone dereferenceable(16), %"class.(anonymous namespace)::SkNx"* nocapture readnone dereferenceable(16), %"class.(anonymous namespace)::SkNx"* nocapture, %"class.(anonymous namespace)::SkNx"* nocapture) #6 {
  %9 = bitcast %"class.(anonymous namespace)::SkNx"* %0 to <8 x i16>*
  %10 = load <8 x i16>, <8 x i16>* %9, align 16
  %11 = bitcast %"class.(anonymous namespace)::SkNx"* %2 to <8 x i16>*
  %12 = load <8 x i16>, <8 x i16>* %11, align 16
  %13 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %10, <8 x i16> %12) #12
  %14 = bitcast %"class.(anonymous namespace)::SkNx"* %1 to <8 x i16>*
  %15 = load <8 x i16>, <8 x i16>* %14, align 16
  %16 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %10, <8 x i16> %15) #12
  %17 = bitcast %"class.(anonymous namespace)::SkNx"* %6 to <8 x i16>*
  %18 = load <8 x i16>, <8 x i16>* %17, align 16
  %19 = add <8 x i16> %18, %13
  %20 = shufflevector <8 x i16> <i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i16> %16, <8 x i32> <i32 0, i32 8, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %21 = shufflevector <8 x i16> %20, <8 x i16> %16, <8 x i32> <i32 0, i32 1, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14>
  %22 = add <8 x i16> %21, %19
  store <8 x i16> %22, <8 x i16>* %17, align 16
  %23 = shufflevector <8 x i16> <i16 undef, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0>, <8 x i16> %16, <8 x i32> <i32 15, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %24 = bitcast %"class.(anonymous namespace)::SkNx"* %7 to <8 x i16>*
  %25 = load <8 x i16>, <8 x i16>* %24, align 16
  %26 = add <8 x i16> %25, %23
  store <8 x i16> %26, <8 x i16>* %24, align 16
  %27 = shufflevector <8 x i16> <i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i16> %13, <8 x i32> <i32 0, i32 1, i32 8, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %28 = shufflevector <8 x i16> %27, <8 x i16> %13, <8 x i32> <i32 0, i32 1, i32 2, i32 9, i32 10, i32 11, i32 12, i32 13>
  %29 = load <8 x i16>, <8 x i16>* %17, align 16
  %30 = add <8 x i16> %29, %28
  store <8 x i16> %30, <8 x i16>* %17, align 16
  %31 = shufflevector <8 x i16> <i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0>, <8 x i16> %13, <8 x i32> <i32 14, i32 15, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %32 = load <8 x i16>, <8 x i16>* %24, align 16
  %33 = add <8 x i16> %32, %31
  store <8 x i16> %33, <8 x i16>* %24, align 16
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZL15blur_x_radius_2RKN12_GLOBAL__N_14SkNxILi8EtEES3_S3_S3_S3_S3_PS1_S4_(%"class.(anonymous namespace)::SkNx"* nocapture readonly dereferenceable(16), %"class.(anonymous namespace)::SkNx"* nocapture readonly dereferenceable(16), %"class.(anonymous namespace)::SkNx"* nocapture readonly dereferenceable(16), %"class.(anonymous namespace)::SkNx"* nocapture readonly dereferenceable(16), %"class.(anonymous namespace)::SkNx"* nocapture readnone dereferenceable(16), %"class.(anonymous namespace)::SkNx"* nocapture readnone dereferenceable(16), %"class.(anonymous namespace)::SkNx"* nocapture, %"class.(anonymous namespace)::SkNx"* nocapture) #6 {
  %9 = bitcast %"class.(anonymous namespace)::SkNx"* %0 to <8 x i16>*
  %10 = load <8 x i16>, <8 x i16>* %9, align 16
  %11 = bitcast %"class.(anonymous namespace)::SkNx"* %1 to <8 x i16>*
  %12 = load <8 x i16>, <8 x i16>* %11, align 16
  %13 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %10, <8 x i16> %12) #12
  %14 = bitcast %"class.(anonymous namespace)::SkNx"* %2 to <8 x i16>*
  %15 = load <8 x i16>, <8 x i16>* %14, align 16
  %16 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %10, <8 x i16> %15) #12
  %17 = bitcast %"class.(anonymous namespace)::SkNx"* %3 to <8 x i16>*
  %18 = load <8 x i16>, <8 x i16>* %17, align 16
  %19 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %10, <8 x i16> %18) #12
  %20 = bitcast %"class.(anonymous namespace)::SkNx"* %6 to <8 x i16>*
  %21 = load <8 x i16>, <8 x i16>* %20, align 16
  %22 = add <8 x i16> %21, %19
  %23 = shufflevector <8 x i16> <i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i16> %16, <8 x i32> <i32 0, i32 8, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %24 = shufflevector <8 x i16> %23, <8 x i16> %16, <8 x i32> <i32 0, i32 1, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14>
  %25 = add <8 x i16> %24, %22
  store <8 x i16> %25, <8 x i16>* %20, align 16
  %26 = shufflevector <8 x i16> <i16 undef, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0>, <8 x i16> %16, <8 x i32> <i32 15, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %27 = bitcast %"class.(anonymous namespace)::SkNx"* %7 to <8 x i16>*
  %28 = load <8 x i16>, <8 x i16>* %27, align 16
  %29 = add <8 x i16> %28, %26
  store <8 x i16> %29, <8 x i16>* %27, align 16
  %30 = shufflevector <8 x i16> <i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i16> %13, <8 x i32> <i32 0, i32 1, i32 8, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %31 = shufflevector <8 x i16> %30, <8 x i16> %13, <8 x i32> <i32 0, i32 1, i32 2, i32 9, i32 10, i32 11, i32 12, i32 13>
  %32 = load <8 x i16>, <8 x i16>* %20, align 16
  %33 = add <8 x i16> %32, %31
  store <8 x i16> %33, <8 x i16>* %20, align 16
  %34 = shufflevector <8 x i16> <i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0>, <8 x i16> %13, <8 x i32> <i32 14, i32 15, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %35 = load <8 x i16>, <8 x i16>* %27, align 16
  %36 = add <8 x i16> %35, %34
  store <8 x i16> %36, <8 x i16>* %27, align 16
  %37 = shufflevector <8 x i16> <i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i16> %16, <8 x i32> <i32 0, i32 1, i32 2, i32 8, i32 undef, i32 undef, i32 undef, i32 undef>
  %38 = shufflevector <8 x i16> %37, <8 x i16> %16, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 9, i32 10, i32 11, i32 12>
  %39 = load <8 x i16>, <8 x i16>* %20, align 16
  %40 = add <8 x i16> %39, %38
  store <8 x i16> %40, <8 x i16>* %20, align 16
  %41 = shufflevector <8 x i16> <i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 0>, <8 x i16> %16, <8 x i32> <i32 13, i32 14, i32 15, i32 3, i32 4, i32 5, i32 6, i32 7>
  %42 = load <8 x i16>, <8 x i16>* %27, align 16
  %43 = add <8 x i16> %42, %41
  store <8 x i16> %43, <8 x i16>* %27, align 16
  %44 = shufflevector <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i16> %19, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 undef, i32 undef, i32 undef>
  %45 = shufflevector <8 x i16> %44, <8 x i16> %19, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 10, i32 11>
  %46 = load <8 x i16>, <8 x i16>* %20, align 16
  %47 = add <8 x i16> %46, %45
  store <8 x i16> %47, <8 x i16>* %20, align 16
  %48 = shufflevector <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i16> %19, <8 x i32> <i32 12, i32 13, i32 14, i32 15, i32 4, i32 5, i32 6, i32 7>
  %49 = load <8 x i16>, <8 x i16>* %27, align 16
  %50 = add <8 x i16> %49, %48
  store <8 x i16> %50, <8 x i16>* %27, align 16
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZL15blur_x_radius_3RKN12_GLOBAL__N_14SkNxILi8EtEES3_S3_S3_S3_S3_PS1_S4_(%"class.(anonymous namespace)::SkNx"* nocapture readonly dereferenceable(16), %"class.(anonymous namespace)::SkNx"* nocapture readonly dereferenceable(16), %"class.(anonymous namespace)::SkNx"* nocapture readonly dereferenceable(16), %"class.(anonymous namespace)::SkNx"* nocapture readonly dereferenceable(16), %"class.(anonymous namespace)::SkNx"* nocapture readonly dereferenceable(16), %"class.(anonymous namespace)::SkNx"* nocapture readnone dereferenceable(16), %"class.(anonymous namespace)::SkNx"* nocapture, %"class.(anonymous namespace)::SkNx"* nocapture) #6 {
  %9 = bitcast %"class.(anonymous namespace)::SkNx"* %0 to <8 x i16>*
  %10 = load <8 x i16>, <8 x i16>* %9, align 16
  %11 = bitcast %"class.(anonymous namespace)::SkNx"* %1 to <8 x i16>*
  %12 = load <8 x i16>, <8 x i16>* %11, align 16
  %13 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %10, <8 x i16> %12) #12
  %14 = bitcast %"class.(anonymous namespace)::SkNx"* %2 to <8 x i16>*
  %15 = load <8 x i16>, <8 x i16>* %14, align 16
  %16 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %10, <8 x i16> %15) #12
  %17 = bitcast %"class.(anonymous namespace)::SkNx"* %3 to <8 x i16>*
  %18 = load <8 x i16>, <8 x i16>* %17, align 16
  %19 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %10, <8 x i16> %18) #12
  %20 = bitcast %"class.(anonymous namespace)::SkNx"* %4 to <8 x i16>*
  %21 = load <8 x i16>, <8 x i16>* %20, align 16
  %22 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %10, <8 x i16> %21) #12
  %23 = bitcast %"class.(anonymous namespace)::SkNx"* %6 to <8 x i16>*
  %24 = load <8 x i16>, <8 x i16>* %23, align 16
  %25 = add <8 x i16> %24, %22
  %26 = shufflevector <8 x i16> <i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i16> %19, <8 x i32> <i32 0, i32 8, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %27 = shufflevector <8 x i16> %26, <8 x i16> %19, <8 x i32> <i32 0, i32 1, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14>
  %28 = add <8 x i16> %27, %25
  store <8 x i16> %28, <8 x i16>* %23, align 16
  %29 = shufflevector <8 x i16> <i16 undef, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0>, <8 x i16> %19, <8 x i32> <i32 15, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %30 = bitcast %"class.(anonymous namespace)::SkNx"* %7 to <8 x i16>*
  %31 = load <8 x i16>, <8 x i16>* %30, align 16
  %32 = add <8 x i16> %31, %29
  store <8 x i16> %32, <8 x i16>* %30, align 16
  %33 = shufflevector <8 x i16> <i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i16> %16, <8 x i32> <i32 0, i32 1, i32 8, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %34 = shufflevector <8 x i16> %33, <8 x i16> %16, <8 x i32> <i32 0, i32 1, i32 2, i32 9, i32 10, i32 11, i32 12, i32 13>
  %35 = load <8 x i16>, <8 x i16>* %23, align 16
  %36 = add <8 x i16> %35, %34
  store <8 x i16> %36, <8 x i16>* %23, align 16
  %37 = shufflevector <8 x i16> <i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0>, <8 x i16> %16, <8 x i32> <i32 14, i32 15, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %38 = load <8 x i16>, <8 x i16>* %30, align 16
  %39 = add <8 x i16> %38, %37
  store <8 x i16> %39, <8 x i16>* %30, align 16
  %40 = shufflevector <8 x i16> <i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i16> %13, <8 x i32> <i32 0, i32 1, i32 2, i32 8, i32 undef, i32 undef, i32 undef, i32 undef>
  %41 = shufflevector <8 x i16> %40, <8 x i16> %13, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 9, i32 10, i32 11, i32 12>
  %42 = load <8 x i16>, <8 x i16>* %23, align 16
  %43 = add <8 x i16> %42, %41
  store <8 x i16> %43, <8 x i16>* %23, align 16
  %44 = shufflevector <8 x i16> <i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 0>, <8 x i16> %13, <8 x i32> <i32 13, i32 14, i32 15, i32 3, i32 4, i32 5, i32 6, i32 7>
  %45 = load <8 x i16>, <8 x i16>* %30, align 16
  %46 = add <8 x i16> %45, %44
  store <8 x i16> %46, <8 x i16>* %30, align 16
  %47 = shufflevector <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i16> %16, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 undef, i32 undef, i32 undef>
  %48 = shufflevector <8 x i16> %47, <8 x i16> %16, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 10, i32 11>
  %49 = load <8 x i16>, <8 x i16>* %23, align 16
  %50 = add <8 x i16> %49, %48
  store <8 x i16> %50, <8 x i16>* %23, align 16
  %51 = shufflevector <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i16> %16, <8 x i32> <i32 12, i32 13, i32 14, i32 15, i32 4, i32 5, i32 6, i32 7>
  %52 = load <8 x i16>, <8 x i16>* %30, align 16
  %53 = add <8 x i16> %52, %51
  store <8 x i16> %53, <8 x i16>* %30, align 16
  %54 = shufflevector <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef>, <8 x i16> %19, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 8, i32 undef, i32 undef>
  %55 = shufflevector <8 x i16> %54, <8 x i16> %19, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 9, i32 10>
  %56 = load <8 x i16>, <8 x i16>* %23, align 16
  %57 = add <8 x i16> %56, %55
  store <8 x i16> %57, <8 x i16>* %23, align 16
  %58 = shufflevector <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0>, <8 x i16> %19, <8 x i32> <i32 11, i32 12, i32 13, i32 14, i32 15, i32 5, i32 6, i32 7>
  %59 = load <8 x i16>, <8 x i16>* %30, align 16
  %60 = add <8 x i16> %59, %58
  store <8 x i16> %60, <8 x i16>* %30, align 16
  %61 = shufflevector <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef>, <8 x i16> %22, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 undef>
  %62 = shufflevector <8 x i16> %61, <8 x i16> %22, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>
  %63 = load <8 x i16>, <8 x i16>* %23, align 16
  %64 = add <8 x i16> %63, %62
  store <8 x i16> %64, <8 x i16>* %23, align 16
  %65 = shufflevector <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0>, <8 x i16> %22, <8 x i32> <i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 6, i32 7>
  %66 = load <8 x i16>, <8 x i16>* %30, align 16
  %67 = add <8 x i16> %66, %65
  store <8 x i16> %67, <8 x i16>* %30, align 16
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZL15blur_x_radius_4RKN12_GLOBAL__N_14SkNxILi8EtEES3_S3_S3_S3_S3_PS1_S4_(%"class.(anonymous namespace)::SkNx"* nocapture readonly dereferenceable(16), %"class.(anonymous namespace)::SkNx"* nocapture readonly dereferenceable(16), %"class.(anonymous namespace)::SkNx"* nocapture readonly dereferenceable(16), %"class.(anonymous namespace)::SkNx"* nocapture readonly dereferenceable(16), %"class.(anonymous namespace)::SkNx"* nocapture readonly dereferenceable(16), %"class.(anonymous namespace)::SkNx"* nocapture readonly dereferenceable(16), %"class.(anonymous namespace)::SkNx"* nocapture, %"class.(anonymous namespace)::SkNx"* nocapture) #6 {
  %9 = bitcast %"class.(anonymous namespace)::SkNx"* %0 to <8 x i16>*
  %10 = load <8 x i16>, <8 x i16>* %9, align 16
  %11 = bitcast %"class.(anonymous namespace)::SkNx"* %1 to <8 x i16>*
  %12 = load <8 x i16>, <8 x i16>* %11, align 16
  %13 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %10, <8 x i16> %12) #12
  %14 = bitcast %"class.(anonymous namespace)::SkNx"* %2 to <8 x i16>*
  %15 = load <8 x i16>, <8 x i16>* %14, align 16
  %16 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %10, <8 x i16> %15) #12
  %17 = bitcast %"class.(anonymous namespace)::SkNx"* %3 to <8 x i16>*
  %18 = load <8 x i16>, <8 x i16>* %17, align 16
  %19 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %10, <8 x i16> %18) #12
  %20 = bitcast %"class.(anonymous namespace)::SkNx"* %4 to <8 x i16>*
  %21 = load <8 x i16>, <8 x i16>* %20, align 16
  %22 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %10, <8 x i16> %21) #12
  %23 = bitcast %"class.(anonymous namespace)::SkNx"* %5 to <8 x i16>*
  %24 = load <8 x i16>, <8 x i16>* %23, align 16
  %25 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %10, <8 x i16> %24) #12
  %26 = bitcast %"class.(anonymous namespace)::SkNx"* %6 to <8 x i16>*
  %27 = load <8 x i16>, <8 x i16>* %26, align 16
  %28 = add <8 x i16> %27, %25
  %29 = shufflevector <8 x i16> <i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i16> %22, <8 x i32> <i32 0, i32 8, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %30 = shufflevector <8 x i16> %29, <8 x i16> %22, <8 x i32> <i32 0, i32 1, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14>
  %31 = add <8 x i16> %30, %28
  store <8 x i16> %31, <8 x i16>* %26, align 16
  %32 = shufflevector <8 x i16> <i16 undef, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0>, <8 x i16> %22, <8 x i32> <i32 15, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %33 = bitcast %"class.(anonymous namespace)::SkNx"* %7 to <8 x i16>*
  %34 = load <8 x i16>, <8 x i16>* %33, align 16
  %35 = add <8 x i16> %34, %32
  store <8 x i16> %35, <8 x i16>* %33, align 16
  %36 = shufflevector <8 x i16> <i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i16> %19, <8 x i32> <i32 0, i32 1, i32 8, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %37 = shufflevector <8 x i16> %36, <8 x i16> %19, <8 x i32> <i32 0, i32 1, i32 2, i32 9, i32 10, i32 11, i32 12, i32 13>
  %38 = load <8 x i16>, <8 x i16>* %26, align 16
  %39 = add <8 x i16> %38, %37
  store <8 x i16> %39, <8 x i16>* %26, align 16
  %40 = shufflevector <8 x i16> <i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0>, <8 x i16> %19, <8 x i32> <i32 14, i32 15, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %41 = load <8 x i16>, <8 x i16>* %33, align 16
  %42 = add <8 x i16> %41, %40
  store <8 x i16> %42, <8 x i16>* %33, align 16
  %43 = shufflevector <8 x i16> <i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i16> %16, <8 x i32> <i32 0, i32 1, i32 2, i32 8, i32 undef, i32 undef, i32 undef, i32 undef>
  %44 = shufflevector <8 x i16> %43, <8 x i16> %16, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 9, i32 10, i32 11, i32 12>
  %45 = load <8 x i16>, <8 x i16>* %26, align 16
  %46 = add <8 x i16> %45, %44
  store <8 x i16> %46, <8 x i16>* %26, align 16
  %47 = shufflevector <8 x i16> <i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 0>, <8 x i16> %16, <8 x i32> <i32 13, i32 14, i32 15, i32 3, i32 4, i32 5, i32 6, i32 7>
  %48 = load <8 x i16>, <8 x i16>* %33, align 16
  %49 = add <8 x i16> %48, %47
  store <8 x i16> %49, <8 x i16>* %33, align 16
  %50 = shufflevector <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i16> %13, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 undef, i32 undef, i32 undef>
  %51 = shufflevector <8 x i16> %50, <8 x i16> %13, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 10, i32 11>
  %52 = load <8 x i16>, <8 x i16>* %26, align 16
  %53 = add <8 x i16> %52, %51
  store <8 x i16> %53, <8 x i16>* %26, align 16
  %54 = shufflevector <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i16> %13, <8 x i32> <i32 12, i32 13, i32 14, i32 15, i32 4, i32 5, i32 6, i32 7>
  %55 = load <8 x i16>, <8 x i16>* %33, align 16
  %56 = add <8 x i16> %55, %54
  store <8 x i16> %56, <8 x i16>* %33, align 16
  %57 = shufflevector <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef>, <8 x i16> %16, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 8, i32 undef, i32 undef>
  %58 = shufflevector <8 x i16> %57, <8 x i16> %16, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 9, i32 10>
  %59 = load <8 x i16>, <8 x i16>* %26, align 16
  %60 = add <8 x i16> %59, %58
  store <8 x i16> %60, <8 x i16>* %26, align 16
  %61 = shufflevector <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0>, <8 x i16> %16, <8 x i32> <i32 11, i32 12, i32 13, i32 14, i32 15, i32 5, i32 6, i32 7>
  %62 = load <8 x i16>, <8 x i16>* %33, align 16
  %63 = add <8 x i16> %62, %61
  store <8 x i16> %63, <8 x i16>* %33, align 16
  %64 = shufflevector <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef>, <8 x i16> %19, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 undef>
  %65 = shufflevector <8 x i16> %64, <8 x i16> %19, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>
  %66 = load <8 x i16>, <8 x i16>* %26, align 16
  %67 = add <8 x i16> %66, %65
  store <8 x i16> %67, <8 x i16>* %26, align 16
  %68 = shufflevector <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0>, <8 x i16> %19, <8 x i32> <i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 6, i32 7>
  %69 = load <8 x i16>, <8 x i16>* %33, align 16
  %70 = add <8 x i16> %69, %68
  store <8 x i16> %70, <8 x i16>* %33, align 16
  %71 = shufflevector <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 undef>, <8 x i16> %22, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 8>
  %72 = load <8 x i16>, <8 x i16>* %26, align 16
  %73 = add <8 x i16> %72, %71
  store <8 x i16> %73, <8 x i16>* %26, align 16
  %74 = shufflevector <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 undef, i16 0>, <8 x i16> %22, <8 x i32> <i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 7>
  %75 = load <8 x i16>, <8 x i16>* %33, align 16
  %76 = add <8 x i16> %74, %25
  %77 = add <8 x i16> %76, %75
  store <8 x i16> %77, <8 x i16>* %33, align 16
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare double @llvm.floor.f64(double) #8

; Function Attrs: nounwind
declare void @_ZN12SkArenaAllocD2Ev(%class.SkArenaAlloc*) unnamed_addr #10

declare void @_ZN12SkArenaAllocC2EPcmm(%class.SkArenaAlloc*, i8*, i64, i64) unnamed_addr #4

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #11

declare void @_ZN12SkArenaAlloc11ensureSpaceEjj(%class.SkArenaAlloc*, i32, i32) local_unnamed_addr #4

attributes #0 = { nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind readnone speculatable }
attributes #9 = { nounwind readnone }
attributes #10 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { nounwind }
attributes #13 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{void (i8*, i8*, i32)* @_ZL12argb32_to_a8PhPKhi, void (i8*, i8*, i32)* @_ZL8bw_to_a8PhPKhi, void (i8*, i8*, i32)* @_ZL9lcd_to_a8PhPKhi}
!3 = distinct !{!3, !4}
!4 = !{!"llvm.loop.isvectorized", i32 1}
!5 = distinct !{!5, !6, !4}
!6 = !{!"llvm.loop.unroll.runtime.disable"}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.unroll.disable"}
!9 = !{!10}
!10 = distinct !{!10, !11}
!11 = distinct !{!11, !"LVerDomain"}
!12 = !{!13}
!13 = distinct !{!13, !11}
!14 = distinct !{!14, !4}
!15 = distinct !{!15, !4}
!16 = !{!17}
!17 = distinct !{!17, !18}
!18 = distinct !{!18, !"LVerDomain"}
!19 = !{!20}
!20 = distinct !{!20, !18}
!21 = distinct !{!21, !4}
!22 = distinct !{!22, !4}
!23 = distinct !{null, <2 x i64> (%"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*)* @_ZL15blur_y_radius_2RKN12_GLOBAL__N_14SkNxILi8EtEES3_S3_S3_S3_S3_PS1_S4_S4_S4_S4_S4_S4_S4_, <2 x i64> (%"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*)* @_ZL15blur_y_radius_3RKN12_GLOBAL__N_14SkNxILi8EtEES3_S3_S3_S3_S3_PS1_S4_S4_S4_S4_S4_S4_S4_, <2 x i64> (%"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*)* @_ZL15blur_y_radius_4RKN12_GLOBAL__N_14SkNxILi8EtEES3_S3_S3_S3_S3_PS1_S4_S4_S4_S4_S4_S4_S4_}
!24 = !{void (%"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*)* @_ZL15blur_x_radius_1RKN12_GLOBAL__N_14SkNxILi8EtEES3_S3_S3_S3_S3_PS1_S4_, void (%"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*)* @_ZL15blur_x_radius_2RKN12_GLOBAL__N_14SkNxILi8EtEES3_S3_S3_S3_S3_PS1_S4_, void (%"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*)* @_ZL15blur_x_radius_3RKN12_GLOBAL__N_14SkNxILi8EtEES3_S3_S3_S3_S3_PS1_S4_, void (%"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*, %"class.(anonymous namespace)::SkNx"*)* @_ZL15blur_x_radius_4RKN12_GLOBAL__N_14SkNxILi8EtEES3_S3_S3_S3_S3_PS1_S4_}
