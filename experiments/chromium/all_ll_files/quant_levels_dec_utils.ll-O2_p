; ModuleID = '../../third_party/libwebp/src/utils/quant_levels_dec_utils.c'
source_filename = "../../third_party/libwebp/src/utils/quant_levels_dec_utils.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nounwind ssp uwtable
define hidden i32 @WebPDequantizeLevels(i8*, i32, i32, i32, i32) local_unnamed_addr #0 {
  %6 = alloca [256 x i8], align 16
  %7 = sdiv i32 %4, 25
  %8 = icmp ugt i32 %4, 100
  br i1 %8, label %816, label %9

9:                                                ; preds = %5
  %10 = icmp eq i8* %0, null
  %11 = icmp slt i32 %1, 1
  %12 = or i1 %10, %11
  %13 = icmp slt i32 %2, 1
  %14 = or i1 %12, %13
  br i1 %14, label %816, label %15

15:                                               ; preds = %9
  %16 = shl nsw i32 %7, 1
  %17 = or i32 %16, 1
  %18 = icmp sgt i32 %17, %1
  %19 = add nsw i32 %1, -1
  %20 = ashr i32 %19, 1
  %21 = select i1 %18, i32 %20, i32 %7
  %22 = shl nsw i32 %21, 1
  %23 = or i32 %22, 1
  %24 = icmp sgt i32 %23, %2
  %25 = add nsw i32 %2, -1
  %26 = ashr i32 %25, 1
  %27 = select i1 %24, i32 %26, i32 %21
  %28 = sub nsw i32 0, %27
  %29 = icmp sgt i32 %27, 0
  br i1 %29, label %30, label %816

30:                                               ; preds = %15
  %31 = shl nsw i32 %27, 1
  %32 = or i32 %31, 1
  %33 = add nsw i32 %32, 1
  %34 = mul nsw i32 %33, %1
  %35 = sext i32 %34 to i64
  %36 = shl nsw i64 %35, 1
  %37 = sext i32 %1 to i64
  %38 = shl nsw i64 %37, 1
  %39 = add nuw nsw i64 %38, 4094
  %40 = add nsw i64 %39, %36
  %41 = tail call i8* @WebPSafeMalloc(i64 1, i64 %40) #4
  %42 = icmp eq i8* %41, null
  br i1 %42, label %816, label %43

43:                                               ; preds = %30
  %44 = bitcast i8* %41 to i16*
  %45 = mul nsw i32 %32, %1
  %46 = sext i32 %45 to i64
  %47 = getelementptr inbounds i16, i16* %44, i64 %46
  %48 = sub nsw i64 0, %37
  %49 = getelementptr inbounds i16, i16* %47, i64 %48
  %50 = bitcast i16* %49 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 2 %50, i8 0, i64 %38, i1 false) #4
  %51 = getelementptr inbounds i8, i8* %41, i64 %36
  %52 = bitcast i8* %51 to i16*
  %53 = mul nsw i32 %32, %32
  %54 = getelementptr inbounds [256 x i8], [256 x i8]* %6, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %54) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %54, i8 0, i64 256, i1 false) #4
  %55 = sext i32 %3 to i64
  %56 = and i64 %37, 1
  %57 = icmp eq i32 %1, 1
  %58 = sub nsw i64 %37, %56
  %59 = icmp eq i64 %56, 0
  br label %60

60:                                               ; preds = %122, %43
  %61 = phi i32 [ 255, %43 ], [ %123, %122 ]
  %62 = phi i32 [ 0, %43 ], [ %125, %122 ]
  %63 = phi i32 [ 0, %43 ], [ %126, %122 ]
  %64 = phi i32 [ 255, %43 ], [ %124, %122 ]
  %65 = phi i8* [ %0, %43 ], [ %127, %122 ]
  %66 = phi i32 [ 0, %43 ], [ %128, %122 ]
  br i1 %57, label %100, label %67

67:                                               ; preds = %60, %67
  %68 = phi i32 [ %90, %67 ], [ %61, %60 ]
  %69 = phi i32 [ %93, %67 ], [ %62, %60 ]
  %70 = phi i32 [ %94, %67 ], [ %63, %60 ]
  %71 = phi i32 [ %91, %67 ], [ %64, %60 ]
  %72 = phi i64 [ %97, %67 ], [ 0, %60 ]
  %73 = phi i64 [ %98, %67 ], [ %58, %60 ]
  %74 = getelementptr inbounds i8, i8* %65, i64 %72
  %75 = load i8, i8* %74, align 1
  %76 = zext i8 %75 to i32
  %77 = icmp sgt i32 %71, %76
  %78 = select i1 %77, i32 %76, i32 %68
  %79 = select i1 %77, i32 %76, i32 %71
  %80 = icmp slt i32 %70, %76
  %81 = select i1 %80, i32 %76, i32 %69
  %82 = select i1 %80, i32 %76, i32 %70
  %83 = zext i8 %75 to i64
  %84 = getelementptr inbounds [256 x i8], [256 x i8]* %6, i64 0, i64 %83
  store i8 1, i8* %84, align 1
  %85 = or i64 %72, 1
  %86 = getelementptr inbounds i8, i8* %65, i64 %85
  %87 = load i8, i8* %86, align 1
  %88 = zext i8 %87 to i32
  %89 = icmp sgt i32 %79, %88
  %90 = select i1 %89, i32 %88, i32 %78
  %91 = select i1 %89, i32 %88, i32 %79
  %92 = icmp slt i32 %82, %88
  %93 = select i1 %92, i32 %88, i32 %81
  %94 = select i1 %92, i32 %88, i32 %82
  %95 = zext i8 %87 to i64
  %96 = getelementptr inbounds [256 x i8], [256 x i8]* %6, i64 0, i64 %95
  store i8 1, i8* %96, align 1
  %97 = add nuw nsw i64 %72, 2
  %98 = add i64 %73, -2
  %99 = icmp eq i64 %98, 0
  br i1 %99, label %100, label %67

100:                                              ; preds = %67, %60
  %101 = phi i32 [ undef, %60 ], [ %90, %67 ]
  %102 = phi i32 [ undef, %60 ], [ %91, %67 ]
  %103 = phi i32 [ undef, %60 ], [ %93, %67 ]
  %104 = phi i32 [ undef, %60 ], [ %94, %67 ]
  %105 = phi i32 [ %61, %60 ], [ %90, %67 ]
  %106 = phi i32 [ %62, %60 ], [ %93, %67 ]
  %107 = phi i32 [ %63, %60 ], [ %94, %67 ]
  %108 = phi i32 [ %64, %60 ], [ %91, %67 ]
  %109 = phi i64 [ 0, %60 ], [ %97, %67 ]
  br i1 %59, label %122, label %110

110:                                              ; preds = %100
  %111 = getelementptr inbounds i8, i8* %65, i64 %109
  %112 = load i8, i8* %111, align 1
  %113 = zext i8 %112 to i32
  %114 = icmp sgt i32 %108, %113
  %115 = icmp slt i32 %107, %113
  %116 = zext i8 %112 to i64
  %117 = getelementptr inbounds [256 x i8], [256 x i8]* %6, i64 0, i64 %116
  store i8 1, i8* %117, align 1
  %118 = select i1 %115, i32 %113, i32 %107
  %119 = select i1 %115, i32 %113, i32 %106
  %120 = select i1 %114, i32 %113, i32 %108
  %121 = select i1 %114, i32 %113, i32 %105
  br label %122

122:                                              ; preds = %100, %110
  %123 = phi i32 [ %101, %100 ], [ %121, %110 ]
  %124 = phi i32 [ %102, %100 ], [ %120, %110 ]
  %125 = phi i32 [ %103, %100 ], [ %119, %110 ]
  %126 = phi i32 [ %104, %100 ], [ %118, %110 ]
  %127 = getelementptr inbounds i8, i8* %65, i64 %55
  %128 = add nuw nsw i32 %66, 1
  %129 = icmp eq i32 %128, %2
  br i1 %129, label %130, label %60

130:                                              ; preds = %122
  %131 = ptrtoint i8* %41 to i64
  %132 = getelementptr inbounds i8, i8* %51, i64 %38
  %133 = udiv i32 262144, %53
  %134 = sub nsw i32 %126, %124
  br label %135

135:                                              ; preds = %826, %130
  %136 = phi i32 [ 0, %130 ], [ %827, %826 ]
  %137 = phi i32 [ %134, %130 ], [ %828, %826 ]
  %138 = phi i64 [ 0, %130 ], [ %830, %826 ]
  %139 = phi i32 [ -1, %130 ], [ %829, %826 ]
  %140 = getelementptr inbounds [256 x i8], [256 x i8]* %6, i64 0, i64 %138
  %141 = load i8, i8* %140, align 2
  %142 = icmp eq i8 %141, 0
  br i1 %142, label %151, label %143

143:                                              ; preds = %135
  %144 = add nsw i32 %136, 1
  %145 = icmp sgt i32 %139, -1
  %146 = trunc i64 %138 to i32
  br i1 %145, label %147, label %151

147:                                              ; preds = %143
  %148 = sub nsw i32 %146, %139
  %149 = icmp slt i32 %148, %137
  %150 = select i1 %149, i32 %148, i32 %137
  br label %151

151:                                              ; preds = %147, %143, %135
  %152 = phi i32 [ %136, %135 ], [ %144, %143 ], [ %144, %147 ]
  %153 = phi i32 [ %137, %135 ], [ %137, %143 ], [ %150, %147 ]
  %154 = phi i32 [ %139, %135 ], [ %146, %143 ], [ %146, %147 ]
  %155 = or i64 %138, 1
  %156 = getelementptr inbounds [256 x i8], [256 x i8]* %6, i64 0, i64 %155
  %157 = load i8, i8* %156, align 1
  %158 = icmp eq i8 %157, 0
  br i1 %158, label %826, label %818

159:                                              ; preds = %826
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %54) #4
  %160 = getelementptr inbounds i8, i8* %132, i64 2046
  %161 = bitcast i8* %160 to i16*
  %162 = shl i32 %828, 2
  %163 = mul i32 %828, 12
  %164 = ashr exact i32 %163, 2
  %165 = sub nsw i32 %162, %164
  %166 = sext i32 %162 to i64
  %167 = sext i32 %164 to i64
  br label %168

168:                                              ; preds = %178, %159
  %169 = phi i64 [ 1, %159 ], [ %186, %178 ]
  %170 = icmp sgt i64 %169, %167
  %171 = trunc i64 %169 to i32
  br i1 %170, label %172, label %178

172:                                              ; preds = %168
  %173 = icmp slt i64 %169, %166
  br i1 %173, label %174, label %178

174:                                              ; preds = %172
  %175 = sub nsw i32 %162, %171
  %176 = mul nsw i32 %175, %164
  %177 = sdiv i32 %176, %165
  br label %178

178:                                              ; preds = %174, %172, %168
  %179 = phi i32 [ %177, %174 ], [ 0, %172 ], [ %171, %168 ]
  %180 = lshr i32 %179, 2
  %181 = trunc i32 %180 to i16
  %182 = getelementptr inbounds i16, i16* %161, i64 %169
  store i16 %181, i16* %182, align 2
  %183 = sub i16 0, %181
  %184 = sub nsw i64 0, %169
  %185 = getelementptr inbounds i16, i16* %161, i64 %184
  store i16 %183, i16* %185, align 2
  %186 = add nuw nsw i64 %169, 1
  %187 = icmp eq i64 %186, 1024
  br i1 %187, label %188, label %168

188:                                              ; preds = %178
  store i16 0, i16* %161, align 2
  %189 = icmp sgt i32 %827, 2
  %190 = icmp slt i32 %28, %2
  %191 = and i1 %189, %190
  br i1 %191, label %192, label %815

192:                                              ; preds = %188
  %193 = icmp sgt i32 %1, 0
  %194 = zext i32 %1 to i64
  %195 = icmp slt i32 %27, 0
  %196 = add nsw i32 %27, -1
  %197 = sext i32 %27 to i64
  %198 = add nuw nsw i32 %27, 1
  %199 = zext i32 %198 to i64
  %200 = sub i32 %1, %27
  %201 = xor i32 %27, -1
  %202 = sext i32 %200 to i64
  %203 = sext i32 %19 to i64
  %204 = getelementptr inbounds i16, i16* %47, i64 %203
  %205 = shl i32 %1, 1
  %206 = add nsw i32 %205, -2
  %207 = sub i32 %206, %27
  %208 = add i32 %205, -2
  %209 = sub i32 %208, %27
  %210 = xor i32 %27, -1
  %211 = shl nsw i64 %46, 1
  %212 = getelementptr i8, i8* %41, i64 %211
  %213 = getelementptr i8, i8* %41, i64 %36
  %214 = add nsw i64 %37, %35
  %215 = shl nsw i64 %46, 1
  %216 = shl nsw i64 %203, 1
  %217 = add nsw i64 %215, %216
  %218 = or i64 %217, 1
  %219 = getelementptr i8, i8* %41, i64 %218
  %220 = getelementptr i8, i8* %41, i64 %215
  %221 = xor i32 %27, -1
  %222 = add nsw i64 %37, %46
  %223 = sub nsw i64 2, %38
  %224 = getelementptr i8, i8* %41, i64 %223
  %225 = add i32 %205, -2
  %226 = sub i32 %225, %27
  %227 = add nsw i64 %215, 2
  %228 = getelementptr i8, i8* %41, i64 %227
  %229 = xor i32 %27, -1
  %230 = getelementptr i8, i8* %41, i64 %36
  %231 = add nsw i64 %35, %202
  %232 = shl nsw i64 %46, 1
  %233 = getelementptr i8, i8* %41, i64 %232
  %234 = add nsw i64 %197, %46
  %235 = add nsw i64 %234, %202
  %236 = shl nsw i64 %235, 1
  %237 = getelementptr i8, i8* %41, i64 %236
  %238 = getelementptr i8, i8* %41, i64 %232
  %239 = xor i32 %27, -1
  %240 = add nsw i64 %46, %202
  %241 = add nsw i64 %199, -1
  %242 = add nsw i32 %27, -1
  %243 = add nsw i64 %197, %46
  %244 = shl nsw i64 %243, 1
  %245 = getelementptr i8, i8* %41, i64 %244
  %246 = ptrtoint i8* %245 to i64
  %247 = shl nuw nsw i64 %199, 1
  %248 = add nsw i64 %36, %247
  %249 = getelementptr i8, i8* %41, i64 %248
  %250 = shl nsw i64 %197, 1
  %251 = shl nsw i64 %46, 1
  %252 = add nsw i64 %250, %251
  %253 = add nsw i64 %252, -2
  %254 = getelementptr i8, i8* %41, i64 %253
  %255 = add nsw i64 %252, %247
  %256 = add nsw i64 %255, -2
  %257 = getelementptr i8, i8* %41, i64 %256
  %258 = add nsw i64 %252, 2
  %259 = sub nsw i64 %258, %247
  %260 = getelementptr i8, i8* %41, i64 %259
  %261 = add nsw i64 %250, %251
  %262 = add nsw i64 %261, 2
  %263 = getelementptr i8, i8* %41, i64 %262
  %264 = and i64 %199, 4294967288
  %265 = add nsw i64 %264, -8
  %266 = lshr exact i64 %265, 3
  %267 = add nuw nsw i64 %266, 1
  %268 = and i64 %194, 1
  %269 = icmp eq i32 %1, 1
  %270 = sub nsw i64 %194, %268
  %271 = icmp eq i64 %268, 0
  %272 = icmp ult i32 %198, 8
  %273 = trunc i64 %241 to i32
  %274 = add i32 %242, %273
  %275 = icmp slt i32 %274, %242
  %276 = icmp ugt i64 %241, 4294967295
  %277 = or i1 %275, %276
  %278 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %241, i64 2)
  %279 = extractvalue { i64, i1 } %278, 0
  %280 = extractvalue { i64, i1 } %278, 1
  %281 = icmp ugt i64 %279, %246
  %282 = or i1 %281, %280
  %283 = or i1 %277, %282
  %284 = icmp ult i8* %51, %257
  %285 = icmp ult i8* %254, %249
  %286 = and i1 %284, %285
  %287 = icmp ult i8* %51, %263
  %288 = icmp ult i8* %260, %249
  %289 = and i1 %287, %288
  %290 = or i1 %286, %289
  %291 = and i64 %199, 4294967288
  %292 = insertelement <8 x i32> undef, i32 %133, i32 0
  %293 = shufflevector <8 x i32> %292, <8 x i32> undef, <8 x i32> zeroinitializer
  %294 = and i64 %267, 1
  %295 = icmp eq i64 %265, 0
  %296 = sub nuw nsw i64 %267, %294
  %297 = getelementptr inbounds i16, i16* %47, i64 -7
  %298 = getelementptr inbounds i16, i16* %47, i64 -7
  %299 = icmp eq i64 %294, 0
  %300 = getelementptr inbounds i16, i16* %47, i64 -7
  %301 = icmp eq i64 %291, %199
  %302 = and i64 %199, 1
  %303 = icmp eq i64 %302, 0
  %304 = sub nsw i64 0, %199
  %305 = insertelement <8 x i32> undef, i32 %133, i32 0
  %306 = shufflevector <8 x i32> %305, <8 x i32> undef, <8 x i32> zeroinitializer
  %307 = sub nsw i64 0, %202
  %308 = bitcast i16* %204 to i8*
  %309 = insertelement <8 x i32> undef, i32 %133, i32 0
  %310 = shufflevector <8 x i32> %309, <8 x i32> undef, <8 x i32> zeroinitializer
  %311 = getelementptr inbounds i16, i16* %47, i64 -7
  br label %312

312:                                              ; preds = %811, %192
  %313 = phi i16* [ %49, %192 ], [ %318, %811 ]
  %314 = phi i64 [ %131, %192 ], [ %374, %811 ]
  %315 = phi i8* [ %0, %192 ], [ %812, %811 ]
  %316 = phi i8* [ %0, %192 ], [ %379, %811 ]
  %317 = phi i32 [ %28, %192 ], [ %813, %811 ]
  %318 = inttoptr i64 %314 to i16*
  br i1 %193, label %319, label %370

319:                                              ; preds = %312
  br i1 %269, label %354, label %320

320:                                              ; preds = %319, %320
  %321 = phi i64 [ %351, %320 ], [ 0, %319 ]
  %322 = phi i32 [ %342, %320 ], [ 0, %319 ]
  %323 = phi i64 [ %352, %320 ], [ %270, %319 ]
  %324 = getelementptr inbounds i8, i8* %316, i64 %321
  %325 = load i8, i8* %324, align 1
  %326 = zext i8 %325 to i32
  %327 = and i32 %322, 65535
  %328 = add nuw nsw i32 %327, %326
  %329 = getelementptr inbounds i16, i16* %313, i64 %321
  %330 = load i16, i16* %329, align 2
  %331 = trunc i32 %328 to i16
  %332 = add i16 %330, %331
  %333 = getelementptr inbounds i16, i16* %318, i64 %321
  %334 = load i16, i16* %333, align 2
  %335 = sub i16 %332, %334
  %336 = getelementptr inbounds i16, i16* %47, i64 %321
  store i16 %335, i16* %336, align 2
  store i16 %332, i16* %333, align 2
  %337 = or i64 %321, 1
  %338 = getelementptr inbounds i8, i8* %316, i64 %337
  %339 = load i8, i8* %338, align 1
  %340 = zext i8 %339 to i32
  %341 = and i32 %328, 65535
  %342 = add nuw nsw i32 %341, %340
  %343 = getelementptr inbounds i16, i16* %313, i64 %337
  %344 = load i16, i16* %343, align 2
  %345 = trunc i32 %342 to i16
  %346 = add i16 %344, %345
  %347 = getelementptr inbounds i16, i16* %318, i64 %337
  %348 = load i16, i16* %347, align 2
  %349 = sub i16 %346, %348
  %350 = getelementptr inbounds i16, i16* %47, i64 %337
  store i16 %349, i16* %350, align 2
  store i16 %346, i16* %347, align 2
  %351 = add nuw nsw i64 %321, 2
  %352 = add i64 %323, -2
  %353 = icmp eq i64 %352, 0
  br i1 %353, label %354, label %320

354:                                              ; preds = %320, %319
  %355 = phi i64 [ 0, %319 ], [ %351, %320 ]
  %356 = phi i32 [ 0, %319 ], [ %342, %320 ]
  br i1 %271, label %370, label %357

357:                                              ; preds = %354
  %358 = getelementptr inbounds i8, i8* %316, i64 %355
  %359 = load i8, i8* %358, align 1
  %360 = zext i8 %359 to i32
  %361 = add nsw i32 %356, %360
  %362 = getelementptr inbounds i16, i16* %313, i64 %355
  %363 = load i16, i16* %362, align 2
  %364 = trunc i32 %361 to i16
  %365 = add i16 %363, %364
  %366 = getelementptr inbounds i16, i16* %318, i64 %355
  %367 = load i16, i16* %366, align 2
  %368 = sub i16 %365, %367
  %369 = getelementptr inbounds i16, i16* %47, i64 %355
  store i16 %368, i16* %369, align 2
  store i16 %365, i16* %366, align 2
  br label %370

370:                                              ; preds = %357, %354, %312
  %371 = getelementptr inbounds i16, i16* %318, i64 %37
  %372 = ptrtoint i16* %371 to i64
  %373 = icmp eq i16* %371, %47
  %374 = select i1 %373, i64 %131, i64 %372
  %375 = icmp sgt i32 %317, -1
  %376 = icmp slt i32 %317, %25
  %377 = and i1 %375, %376
  %378 = getelementptr inbounds i8, i8* %316, i64 %55
  %379 = select i1 %377, i8* %378, i8* %316
  %380 = icmp slt i32 %317, %27
  br i1 %380, label %811, label %381

381:                                              ; preds = %370
  br i1 %195, label %473, label %382

382:                                              ; preds = %381
  %383 = or i1 %272, %283
  %384 = or i1 %383, %290
  br i1 %384, label %385, label %407

385:                                              ; preds = %382, %472
  %386 = phi i64 [ 0, %382 ], [ %291, %472 ]
  %387 = xor i64 %386, -1
  br i1 %303, label %404, label %388

388:                                              ; preds = %385
  %389 = trunc i64 %386 to i32
  %390 = add i32 %196, %389
  %391 = sext i32 %390 to i64
  %392 = getelementptr inbounds i16, i16* %47, i64 %391
  %393 = load i16, i16* %392, align 2
  %394 = sub nsw i64 %197, %386
  %395 = getelementptr inbounds i16, i16* %47, i64 %394
  %396 = load i16, i16* %395, align 2
  %397 = add i16 %396, %393
  %398 = zext i16 %397 to i32
  %399 = mul i32 %133, %398
  %400 = lshr i32 %399, 16
  %401 = trunc i32 %400 to i16
  %402 = getelementptr inbounds i16, i16* %52, i64 %386
  store i16 %401, i16* %402, align 2
  %403 = or i64 %386, 1
  br label %404

404:                                              ; preds = %388, %385
  %405 = phi i64 [ %403, %388 ], [ %386, %385 ]
  %406 = icmp eq i64 %387, %304
  br i1 %406, label %473, label %577

407:                                              ; preds = %382
  br i1 %295, label %451, label %408

408:                                              ; preds = %407, %408
  %409 = phi i64 [ %448, %408 ], [ 0, %407 ]
  %410 = phi i64 [ %449, %408 ], [ %296, %407 ]
  %411 = trunc i64 %409 to i32
  %412 = add i32 %196, %411
  %413 = sext i32 %412 to i64
  %414 = getelementptr inbounds i16, i16* %47, i64 %413
  %415 = bitcast i16* %414 to <8 x i16>*
  %416 = load <8 x i16>, <8 x i16>* %415, align 2, !alias.scope !2
  %417 = sub nsw i64 %197, %409
  %418 = getelementptr inbounds i16, i16* %297, i64 %417
  %419 = bitcast i16* %418 to <8 x i16>*
  %420 = load <8 x i16>, <8 x i16>* %419, align 2, !alias.scope !5
  %421 = shufflevector <8 x i16> %420, <8 x i16> undef, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %422 = add <8 x i16> %421, %416
  %423 = zext <8 x i16> %422 to <8 x i32>
  %424 = mul <8 x i32> %293, %423
  %425 = lshr <8 x i32> %424, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %426 = trunc <8 x i32> %425 to <8 x i16>
  %427 = getelementptr inbounds i16, i16* %52, i64 %409
  %428 = bitcast i16* %427 to <8 x i16>*
  store <8 x i16> %426, <8 x i16>* %428, align 2, !alias.scope !7, !noalias !9
  %429 = or i64 %409, 8
  %430 = trunc i64 %429 to i32
  %431 = add i32 %196, %430
  %432 = sext i32 %431 to i64
  %433 = getelementptr inbounds i16, i16* %47, i64 %432
  %434 = bitcast i16* %433 to <8 x i16>*
  %435 = load <8 x i16>, <8 x i16>* %434, align 2, !alias.scope !2
  %436 = sub nsw i64 %197, %429
  %437 = getelementptr inbounds i16, i16* %298, i64 %436
  %438 = bitcast i16* %437 to <8 x i16>*
  %439 = load <8 x i16>, <8 x i16>* %438, align 2, !alias.scope !5
  %440 = shufflevector <8 x i16> %439, <8 x i16> undef, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %441 = add <8 x i16> %440, %435
  %442 = zext <8 x i16> %441 to <8 x i32>
  %443 = mul <8 x i32> %293, %442
  %444 = lshr <8 x i32> %443, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %445 = trunc <8 x i32> %444 to <8 x i16>
  %446 = getelementptr inbounds i16, i16* %52, i64 %429
  %447 = bitcast i16* %446 to <8 x i16>*
  store <8 x i16> %445, <8 x i16>* %447, align 2, !alias.scope !7, !noalias !9
  %448 = add i64 %409, 16
  %449 = add i64 %410, -2
  %450 = icmp eq i64 %449, 0
  br i1 %450, label %451, label %408, !llvm.loop !10

451:                                              ; preds = %408, %407
  %452 = phi i64 [ 0, %407 ], [ %448, %408 ]
  br i1 %299, label %472, label %453

453:                                              ; preds = %451
  %454 = trunc i64 %452 to i32
  %455 = add i32 %196, %454
  %456 = sext i32 %455 to i64
  %457 = getelementptr inbounds i16, i16* %47, i64 %456
  %458 = bitcast i16* %457 to <8 x i16>*
  %459 = load <8 x i16>, <8 x i16>* %458, align 2, !alias.scope !2
  %460 = sub nsw i64 %197, %452
  %461 = getelementptr inbounds i16, i16* %300, i64 %460
  %462 = bitcast i16* %461 to <8 x i16>*
  %463 = load <8 x i16>, <8 x i16>* %462, align 2, !alias.scope !5
  %464 = shufflevector <8 x i16> %463, <8 x i16> undef, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %465 = add <8 x i16> %464, %459
  %466 = zext <8 x i16> %465 to <8 x i32>
  %467 = mul <8 x i32> %293, %466
  %468 = lshr <8 x i32> %467, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %469 = trunc <8 x i32> %468 to <8 x i16>
  %470 = getelementptr inbounds i16, i16* %52, i64 %452
  %471 = bitcast i16* %470 to <8 x i16>*
  store <8 x i16> %469, <8 x i16>* %471, align 2, !alias.scope !7, !noalias !9
  br label %472

472:                                              ; preds = %451, %453
  br i1 %301, label %473, label %385

473:                                              ; preds = %404, %577, %472, %381
  %474 = phi i32 [ 0, %381 ], [ %198, %472 ], [ %198, %577 ], [ %198, %404 ]
  %475 = icmp slt i32 %474, %200
  br i1 %475, label %476, label %610

476:                                              ; preds = %473
  %477 = sext i32 %474 to i64
  %478 = sub nsw i64 %202, %477
  %479 = icmp ult i64 %478, 8
  br i1 %479, label %480, label %506

480:                                              ; preds = %575, %521, %506, %476
  %481 = phi i64 [ %477, %521 ], [ %477, %506 ], [ %477, %476 ], [ %550, %575 ]
  %482 = sub nsw i64 %202, %481
  %483 = xor i64 %481, -1
  %484 = and i64 %482, 1
  %485 = icmp eq i64 %484, 0
  br i1 %485, label %503, label %486

486:                                              ; preds = %480
  %487 = add nsw i64 %481, %197
  %488 = getelementptr inbounds i16, i16* %47, i64 %487
  %489 = load i16, i16* %488, align 2
  %490 = trunc i64 %481 to i32
  %491 = add i32 %490, %201
  %492 = sext i32 %491 to i64
  %493 = getelementptr inbounds i16, i16* %47, i64 %492
  %494 = load i16, i16* %493, align 2
  %495 = sub i16 %489, %494
  %496 = zext i16 %495 to i32
  %497 = mul i32 %133, %496
  %498 = lshr i32 %497, 16
  %499 = trunc i32 %498 to i16
  %500 = and i64 %481, 4294967295
  %501 = getelementptr inbounds i16, i16* %52, i64 %500
  store i16 %499, i16* %501, align 2
  %502 = add nsw i64 %481, 1
  br label %503

503:                                              ; preds = %486, %480
  %504 = phi i64 [ %502, %486 ], [ %481, %480 ]
  %505 = icmp eq i64 %483, %307
  br i1 %505, label %610, label %723

506:                                              ; preds = %476
  %507 = xor i64 %477, -1
  %508 = add nsw i64 %507, %202
  %509 = trunc i64 %508 to i32
  %510 = xor i32 %474, -1
  %511 = icmp ult i32 %510, %509
  %512 = icmp ugt i64 %508, 4294967295
  %513 = or i1 %511, %512
  %514 = add i32 %474, %229
  %515 = trunc i64 %508 to i32
  %516 = add i32 %514, %515
  %517 = icmp slt i32 %516, %514
  %518 = icmp ugt i64 %508, 4294967295
  %519 = or i1 %517, %518
  %520 = or i1 %513, %519
  br i1 %520, label %480, label %521

521:                                              ; preds = %506
  %522 = zext i32 %474 to i64
  %523 = shl nuw nsw i64 %522, 1
  %524 = getelementptr i8, i8* %230, i64 %523
  %525 = add nsw i64 %231, %522
  %526 = shl nsw i64 %525, 1
  %527 = shl nsw i64 %477, 1
  %528 = sub nsw i64 %526, %527
  %529 = getelementptr i8, i8* %41, i64 %528
  %530 = add nsw i64 %197, %477
  %531 = shl nsw i64 %530, 1
  %532 = getelementptr i8, i8* %233, i64 %531
  %533 = add i32 %474, %239
  %534 = sext i32 %533 to i64
  %535 = shl nsw i64 %534, 1
  %536 = getelementptr i8, i8* %238, i64 %535
  %537 = add nsw i64 %240, %534
  %538 = shl nsw i64 %537, 1
  %539 = sub nsw i64 %538, %527
  %540 = getelementptr i8, i8* %41, i64 %539
  %541 = icmp ult i8* %524, %237
  %542 = icmp ult i8* %532, %529
  %543 = and i1 %541, %542
  %544 = icmp ult i8* %524, %540
  %545 = icmp ult i8* %536, %529
  %546 = and i1 %544, %545
  %547 = or i1 %543, %546
  br i1 %547, label %480, label %548

548:                                              ; preds = %521
  %549 = and i64 %478, -8
  %550 = add nsw i64 %549, %477
  br label %551

551:                                              ; preds = %551, %548
  %552 = phi i64 [ 0, %548 ], [ %573, %551 ]
  %553 = add i64 %552, %477
  %554 = add nsw i64 %553, %197
  %555 = getelementptr inbounds i16, i16* %47, i64 %554
  %556 = bitcast i16* %555 to <8 x i16>*
  %557 = load <8 x i16>, <8 x i16>* %556, align 2, !alias.scope !12
  %558 = trunc i64 %552 to i32
  %559 = add i32 %474, %558
  %560 = add i32 %559, %201
  %561 = sext i32 %560 to i64
  %562 = getelementptr inbounds i16, i16* %47, i64 %561
  %563 = bitcast i16* %562 to <8 x i16>*
  %564 = load <8 x i16>, <8 x i16>* %563, align 2, !alias.scope !15
  %565 = sub <8 x i16> %557, %564
  %566 = zext <8 x i16> %565 to <8 x i32>
  %567 = mul <8 x i32> %306, %566
  %568 = lshr <8 x i32> %567, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %569 = trunc <8 x i32> %568 to <8 x i16>
  %570 = and i64 %553, 4294967295
  %571 = getelementptr inbounds i16, i16* %52, i64 %570
  %572 = bitcast i16* %571 to <8 x i16>*
  store <8 x i16> %569, <8 x i16>* %572, align 2, !alias.scope !17, !noalias !19
  %573 = add i64 %552, 8
  %574 = icmp eq i64 %573, %549
  br i1 %574, label %575, label %551, !llvm.loop !20

575:                                              ; preds = %551
  %576 = icmp eq i64 %478, %549
  br i1 %576, label %610, label %480

577:                                              ; preds = %404, %577
  %578 = phi i64 [ %608, %577 ], [ %405, %404 ]
  %579 = trunc i64 %578 to i32
  %580 = add i32 %196, %579
  %581 = sext i32 %580 to i64
  %582 = getelementptr inbounds i16, i16* %47, i64 %581
  %583 = load i16, i16* %582, align 2
  %584 = sub nsw i64 %197, %578
  %585 = getelementptr inbounds i16, i16* %47, i64 %584
  %586 = load i16, i16* %585, align 2
  %587 = add i16 %586, %583
  %588 = zext i16 %587 to i32
  %589 = mul i32 %133, %588
  %590 = lshr i32 %589, 16
  %591 = trunc i32 %590 to i16
  %592 = getelementptr inbounds i16, i16* %52, i64 %578
  store i16 %591, i16* %592, align 2
  %593 = add nuw nsw i64 %578, 1
  %594 = trunc i64 %593 to i32
  %595 = add i32 %196, %594
  %596 = sext i32 %595 to i64
  %597 = getelementptr inbounds i16, i16* %47, i64 %596
  %598 = load i16, i16* %597, align 2
  %599 = sub nsw i64 %197, %593
  %600 = getelementptr inbounds i16, i16* %47, i64 %599
  %601 = load i16, i16* %600, align 2
  %602 = add i16 %601, %598
  %603 = zext i16 %602 to i32
  %604 = mul i32 %133, %603
  %605 = lshr i32 %604, 16
  %606 = trunc i32 %605 to i16
  %607 = getelementptr inbounds i16, i16* %52, i64 %593
  store i16 %606, i16* %607, align 2
  %608 = add nuw nsw i64 %578, 2
  %609 = icmp eq i64 %608, %199
  br i1 %609, label %473, label %577, !llvm.loop !21

610:                                              ; preds = %503, %723, %575, %473
  %611 = phi i32 [ %474, %473 ], [ %200, %575 ], [ %200, %723 ], [ %200, %503 ]
  %612 = icmp slt i32 %611, %1
  br i1 %612, label %613, label %781

613:                                              ; preds = %610
  %614 = sext i32 %611 to i64
  %615 = sub nsw i64 %37, %614
  %616 = icmp ult i64 %615, 8
  br i1 %616, label %617, label %619

617:                                              ; preds = %721, %651, %619, %613
  %618 = phi i64 [ %614, %651 ], [ %614, %619 ], [ %614, %613 ], [ %689, %721 ]
  br label %758

619:                                              ; preds = %613
  %620 = xor i64 %614, -1
  %621 = add nsw i64 %620, %37
  %622 = trunc i64 %621 to i32
  %623 = xor i32 %611, -1
  %624 = icmp ult i32 %623, %622
  %625 = icmp ugt i64 %621, 4294967295
  %626 = or i1 %624, %625
  %627 = sub i32 %209, %611
  %628 = trunc i64 %621 to i32
  %629 = sub i32 %627, %628
  %630 = icmp sgt i32 %629, %627
  %631 = icmp ugt i64 %621, 4294967295
  %632 = or i1 %630, %631
  %633 = or i1 %626, %632
  %634 = add i32 %611, %210
  %635 = trunc i64 %621 to i32
  %636 = add i32 %634, %635
  %637 = icmp slt i32 %636, %634
  %638 = icmp ugt i64 %621, 4294967295
  %639 = or i1 %637, %638
  %640 = or i1 %633, %639
  %641 = sext i32 %627 to i64
  %642 = shl nsw i64 %641, 1
  %643 = getelementptr i8, i8* %212, i64 %642
  %644 = ptrtoint i8* %643 to i64
  %645 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %621, i64 2)
  %646 = extractvalue { i64, i1 } %645, 0
  %647 = extractvalue { i64, i1 } %645, 1
  %648 = icmp ugt i64 %646, %644
  %649 = or i1 %648, %647
  %650 = or i1 %640, %649
  br i1 %650, label %617, label %651

651:                                              ; preds = %619
  %652 = zext i32 %611 to i64
  %653 = shl nuw nsw i64 %652, 1
  %654 = getelementptr i8, i8* %213, i64 %653
  %655 = add nsw i64 %214, %652
  %656 = shl nsw i64 %655, 1
  %657 = shl nsw i64 %614, 1
  %658 = sub nsw i64 %656, %657
  %659 = getelementptr i8, i8* %41, i64 %658
  %660 = add i32 %611, %221
  %661 = sext i32 %660 to i64
  %662 = shl nsw i64 %661, 1
  %663 = getelementptr i8, i8* %220, i64 %662
  %664 = add nsw i64 %222, %661
  %665 = shl nsw i64 %664, 1
  %666 = sub nsw i64 %665, %657
  %667 = getelementptr i8, i8* %41, i64 %666
  %668 = add nsw i64 %46, %614
  %669 = sub i32 %226, %611
  %670 = sext i32 %669 to i64
  %671 = add nsw i64 %668, %670
  %672 = shl nsw i64 %671, 1
  %673 = getelementptr i8, i8* %224, i64 %672
  %674 = shl nsw i64 %670, 1
  %675 = getelementptr i8, i8* %228, i64 %674
  %676 = icmp ult i8* %654, %219
  %677 = icmp ugt i8* %659, %308
  %678 = and i1 %676, %677
  %679 = icmp ult i8* %654, %667
  %680 = icmp ult i8* %663, %659
  %681 = and i1 %679, %680
  %682 = or i1 %678, %681
  %683 = icmp ult i8* %654, %675
  %684 = icmp ult i8* %673, %659
  %685 = and i1 %683, %684
  %686 = or i1 %682, %685
  br i1 %686, label %617, label %687

687:                                              ; preds = %651
  %688 = and i64 %615, -8
  %689 = add nsw i64 %688, %614
  %690 = load i16, i16* %204, align 2, !alias.scope !22
  %691 = insertelement <8 x i16> undef, i16 %690, i32 0
  %692 = shl <8 x i16> %691, <i16 1, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0>
  %693 = shufflevector <8 x i16> %692, <8 x i16> undef, <8 x i32> zeroinitializer
  br label %694

694:                                              ; preds = %694, %687
  %695 = phi i64 [ 0, %687 ], [ %719, %694 ]
  %696 = add i64 %695, %614
  %697 = trunc i64 %695 to i32
  %698 = add i32 %611, %697
  %699 = sub i32 %207, %698
  %700 = sext i32 %699 to i64
  %701 = getelementptr inbounds i16, i16* %311, i64 %700
  %702 = bitcast i16* %701 to <8 x i16>*
  %703 = load <8 x i16>, <8 x i16>* %702, align 2, !alias.scope !25
  %704 = shufflevector <8 x i16> %703, <8 x i16> undef, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %705 = sub <8 x i16> %693, %704
  %706 = add i32 %698, %201
  %707 = sext i32 %706 to i64
  %708 = getelementptr inbounds i16, i16* %47, i64 %707
  %709 = bitcast i16* %708 to <8 x i16>*
  %710 = load <8 x i16>, <8 x i16>* %709, align 2, !alias.scope !27
  %711 = sub <8 x i16> %705, %710
  %712 = zext <8 x i16> %711 to <8 x i32>
  %713 = mul <8 x i32> %310, %712
  %714 = lshr <8 x i32> %713, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %715 = trunc <8 x i32> %714 to <8 x i16>
  %716 = and i64 %696, 4294967295
  %717 = getelementptr inbounds i16, i16* %52, i64 %716
  %718 = bitcast i16* %717 to <8 x i16>*
  store <8 x i16> %715, <8 x i16>* %718, align 2, !alias.scope !29, !noalias !31
  %719 = add i64 %695, 8
  %720 = icmp eq i64 %719, %688
  br i1 %720, label %721, label %694, !llvm.loop !32

721:                                              ; preds = %694
  %722 = icmp eq i64 %615, %688
  br i1 %722, label %781, label %617

723:                                              ; preds = %503, %723
  %724 = phi i64 [ %756, %723 ], [ %504, %503 ]
  %725 = add nsw i64 %724, %197
  %726 = getelementptr inbounds i16, i16* %47, i64 %725
  %727 = load i16, i16* %726, align 2
  %728 = trunc i64 %724 to i32
  %729 = add i32 %728, %201
  %730 = sext i32 %729 to i64
  %731 = getelementptr inbounds i16, i16* %47, i64 %730
  %732 = load i16, i16* %731, align 2
  %733 = sub i16 %727, %732
  %734 = zext i16 %733 to i32
  %735 = mul i32 %133, %734
  %736 = lshr i32 %735, 16
  %737 = trunc i32 %736 to i16
  %738 = and i64 %724, 4294967295
  %739 = getelementptr inbounds i16, i16* %52, i64 %738
  store i16 %737, i16* %739, align 2
  %740 = add nsw i64 %724, 1
  %741 = add nsw i64 %740, %197
  %742 = getelementptr inbounds i16, i16* %47, i64 %741
  %743 = load i16, i16* %742, align 2
  %744 = trunc i64 %740 to i32
  %745 = add i32 %744, %201
  %746 = sext i32 %745 to i64
  %747 = getelementptr inbounds i16, i16* %47, i64 %746
  %748 = load i16, i16* %747, align 2
  %749 = sub i16 %743, %748
  %750 = zext i16 %749 to i32
  %751 = mul i32 %133, %750
  %752 = lshr i32 %751, 16
  %753 = trunc i32 %752 to i16
  %754 = and i64 %740, 4294967295
  %755 = getelementptr inbounds i16, i16* %52, i64 %754
  store i16 %753, i16* %755, align 2
  %756 = add nsw i64 %724, 2
  %757 = icmp eq i64 %756, %202
  br i1 %757, label %610, label %723, !llvm.loop !33

758:                                              ; preds = %617, %758
  %759 = phi i64 [ %779, %758 ], [ %618, %617 ]
  %760 = load i16, i16* %204, align 2
  %761 = shl i16 %760, 1
  %762 = trunc i64 %759 to i32
  %763 = sub i32 %207, %762
  %764 = sext i32 %763 to i64
  %765 = getelementptr inbounds i16, i16* %47, i64 %764
  %766 = load i16, i16* %765, align 2
  %767 = sub i16 %761, %766
  %768 = add i32 %762, %201
  %769 = sext i32 %768 to i64
  %770 = getelementptr inbounds i16, i16* %47, i64 %769
  %771 = load i16, i16* %770, align 2
  %772 = sub i16 %767, %771
  %773 = zext i16 %772 to i32
  %774 = mul i32 %133, %773
  %775 = lshr i32 %774, 16
  %776 = trunc i32 %775 to i16
  %777 = and i64 %759, 4294967295
  %778 = getelementptr inbounds i16, i16* %52, i64 %777
  store i16 %776, i16* %778, align 2
  %779 = add nsw i64 %759, 1
  %780 = icmp eq i64 %779, %37
  br i1 %780, label %781, label %758, !llvm.loop !34

781:                                              ; preds = %758, %721, %610
  br i1 %193, label %782, label %809

782:                                              ; preds = %781, %806
  %783 = phi i64 [ %807, %806 ], [ 0, %781 ]
  %784 = getelementptr inbounds i8, i8* %315, i64 %783
  %785 = load i8, i8* %784, align 1
  %786 = zext i8 %785 to i32
  %787 = icmp sgt i32 %125, %786
  %788 = icmp slt i32 %123, %786
  %789 = and i1 %787, %788
  br i1 %789, label %790, label %806

790:                                              ; preds = %782
  %791 = getelementptr inbounds i16, i16* %52, i64 %783
  %792 = load i16, i16* %791, align 2
  %793 = zext i16 %792 to i32
  %794 = shl nuw nsw i32 %786, 2
  %795 = sub nsw i32 %793, %794
  %796 = sext i32 %795 to i64
  %797 = getelementptr inbounds i16, i16* %161, i64 %796
  %798 = load i16, i16* %797, align 2
  %799 = sext i16 %798 to i32
  %800 = add nsw i32 %799, %786
  %801 = icmp ugt i32 %800, 255
  %802 = icmp slt i32 %800, 0
  %803 = select i1 %802, i32 0, i32 255
  %804 = select i1 %801, i32 %803, i32 %800
  %805 = trunc i32 %804 to i8
  store i8 %805, i8* %784, align 1
  br label %806

806:                                              ; preds = %790, %782
  %807 = add nuw nsw i64 %783, 1
  %808 = icmp eq i64 %807, %194
  br i1 %808, label %809, label %782

809:                                              ; preds = %806, %781
  %810 = getelementptr inbounds i8, i8* %315, i64 %55
  br label %811

811:                                              ; preds = %370, %809
  %812 = phi i8* [ %315, %370 ], [ %810, %809 ]
  %813 = add nsw i32 %317, 1
  %814 = icmp eq i32 %813, %2
  br i1 %814, label %815, label %312

815:                                              ; preds = %811, %188
  tail call void @WebPSafeFree(i8* nonnull %41) #4
  br label %816

816:                                              ; preds = %30, %15, %815, %9, %5
  %817 = phi i32 [ 0, %5 ], [ 0, %9 ], [ 1, %815 ], [ 1, %15 ], [ 0, %30 ]
  ret i32 %817

818:                                              ; preds = %151
  %819 = add nsw i32 %152, 1
  %820 = icmp sgt i32 %154, -1
  %821 = trunc i64 %155 to i32
  br i1 %820, label %822, label %826

822:                                              ; preds = %818
  %823 = sub nsw i32 %821, %154
  %824 = icmp slt i32 %823, %153
  %825 = select i1 %824, i32 %823, i32 %153
  br label %826

826:                                              ; preds = %822, %818, %151
  %827 = phi i32 [ %152, %151 ], [ %819, %818 ], [ %819, %822 ]
  %828 = phi i32 [ %153, %151 ], [ %153, %818 ], [ %825, %822 ]
  %829 = phi i32 [ %154, %151 ], [ %821, %818 ], [ %821, %822 ]
  %830 = add nuw nsw i64 %138, 2
  %831 = icmp eq i64 %830, 256
  br i1 %831, label %159, label %135
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare i8* @WebPSafeMalloc(i64, i64) local_unnamed_addr #2

declare void @WebPSafeFree(i8*) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.umul.with.overflow.i64(i64, i64) #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone speculatable }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = !{!8}
!8 = distinct !{!8, !4}
!9 = !{!3, !6}
!10 = distinct !{!10, !11}
!11 = !{!"llvm.loop.isvectorized", i32 1}
!12 = !{!13}
!13 = distinct !{!13, !14}
!14 = distinct !{!14, !"LVerDomain"}
!15 = !{!16}
!16 = distinct !{!16, !14}
!17 = !{!18}
!18 = distinct !{!18, !14}
!19 = !{!13, !16}
!20 = distinct !{!20, !11}
!21 = distinct !{!21, !11}
!22 = !{!23}
!23 = distinct !{!23, !24}
!24 = distinct !{!24, !"LVerDomain"}
!25 = !{!26}
!26 = distinct !{!26, !24}
!27 = !{!28}
!28 = distinct !{!28, !24}
!29 = !{!30}
!30 = distinct !{!30, !24}
!31 = !{!23, !28, !26}
!32 = distinct !{!32, !11}
!33 = distinct !{!33, !11}
!34 = distinct !{!34, !11}
