; ModuleID = '../../net/third_party/quiche/src/quic/core/legacy_quic_stream_id_manager.cc'
source_filename = "../../net/third_party/quiche/src/quic/core/legacy_quic_stream_id_manager.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.quic::LegacyQuicStreamIdManager" = type { i8, i32, i64, i64, i32, %"class.absl::flat_hash_set", i32, i64, i64 }
%"class.absl::flat_hash_set" = type { %"class.absl::container_internal::raw_hash_set" }
%"class.absl::container_internal::raw_hash_set" = type { i8*, i32*, i64, i64, %"class.absl::container_internal::CompressedTuple" }
%"class.absl::container_internal::CompressedTuple" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"struct.absl::container_internal::internal_compressed_tuple::Storage" = type { i64 }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.4 }
%union.anon.4 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }

$_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashSetPolicyIjEENS_13hash_internal4HashIjEENSt3__18equal_toIjEENS7_9allocatorIjEEE5eraseIjEEmRKj = comdat any

$_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashSetPolicyIjEENS_13hash_internal4HashIjEENSt3__18equal_toIjEENS7_9allocatorIjEEE14prepare_insertEm = comdat any

$_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashSetPolicyIjEENS_13hash_internal4HashIjEENSt3__18equal_toIjEENS7_9allocatorIjEEE6resizeEm = comdat any

$_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashSetPolicyIjEENS_13hash_internal4HashIjEENSt3__18equal_toIjEENS7_9allocatorIjEEE27drop_deletes_without_resizeEv = comdat any

$_ZZN4absl18container_internal10EmptyGroupEvE11empty_group = comdat any

@.str = private unnamed_addr constant [76 x i8] c"../../net/third_party/quiche/src/quic/core/legacy_quic_stream_id_manager.cc\00", align 1
@_ZZN4absl18container_internal10EmptyGroupEvE11empty_group = linkonce_odr hidden constant [16 x i8] c"\FF\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80", comdat, align 16
@_ZN4absl13hash_internal15MixingHashState5kSeedE = external local_unnamed_addr constant i8*, align 8

@_ZN4quic25LegacyQuicStreamIdManagerC1ENS_11PerspectiveENS_20QuicTransportVersionEmm = hidden unnamed_addr alias void (%"class.quic::LegacyQuicStreamIdManager"*, i8, i32, i64, i64), void (%"class.quic::LegacyQuicStreamIdManager"*, i8, i32, i64, i64)* @_ZN4quic25LegacyQuicStreamIdManagerC2ENS_11PerspectiveENS_20QuicTransportVersionEmm
@_ZN4quic25LegacyQuicStreamIdManagerD1Ev = hidden unnamed_addr alias void (%"class.quic::LegacyQuicStreamIdManager"*), void (%"class.quic::LegacyQuicStreamIdManager"*)* @_ZN4quic25LegacyQuicStreamIdManagerD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4quic25LegacyQuicStreamIdManagerC2ENS_11PerspectiveENS_20QuicTransportVersionEmm(%"class.quic::LegacyQuicStreamIdManager"* nocapture, i8 zeroext, i32, i64, i64) unnamed_addr #0 align 2 {
  %6 = getelementptr inbounds %"class.quic::LegacyQuicStreamIdManager", %"class.quic::LegacyQuicStreamIdManager"* %0, i64 0, i32 0
  store i8 %1, i8* %6, align 8
  %7 = getelementptr inbounds %"class.quic::LegacyQuicStreamIdManager", %"class.quic::LegacyQuicStreamIdManager"* %0, i64 0, i32 1
  store i32 %2, i32* %7, align 4
  %8 = getelementptr inbounds %"class.quic::LegacyQuicStreamIdManager", %"class.quic::LegacyQuicStreamIdManager"* %0, i64 0, i32 2
  store i64 %3, i64* %8, align 8
  %9 = getelementptr inbounds %"class.quic::LegacyQuicStreamIdManager", %"class.quic::LegacyQuicStreamIdManager"* %0, i64 0, i32 3
  store i64 %4, i64* %9, align 8
  %10 = getelementptr inbounds %"class.quic::LegacyQuicStreamIdManager", %"class.quic::LegacyQuicStreamIdManager"* %0, i64 0, i32 4
  %11 = tail call i32 @_ZN4quic9QuicUtils29GetFirstBidirectionalStreamIdENS_20QuicTransportVersionENS_11PerspectiveE(i32 %2, i8 zeroext %1) #8
  store i32 %11, i32* %10, align 8
  %12 = getelementptr inbounds %"class.quic::LegacyQuicStreamIdManager", %"class.quic::LegacyQuicStreamIdManager"* %0, i64 0, i32 5, i32 0, i32 0
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @_ZZN4absl18container_internal10EmptyGroupEvE11empty_group, i64 0, i64 0), i8** %12, align 8
  %13 = getelementptr inbounds %"class.quic::LegacyQuicStreamIdManager", %"class.quic::LegacyQuicStreamIdManager"* %0, i64 0, i32 5, i32 0, i32 1
  %14 = bitcast i32** %13 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %14, i8 0, i64 32, i1 false) #8
  %15 = getelementptr inbounds %"class.quic::LegacyQuicStreamIdManager", %"class.quic::LegacyQuicStreamIdManager"* %0, i64 0, i32 6
  %16 = load i8, i8* %6, align 8
  %17 = icmp eq i8 %16, 0
  %18 = load i32, i32* %7, align 4
  br i1 %17, label %19, label %25

19:                                               ; preds = %5
  %20 = icmp sgt i32 %18, 46
  br i1 %20, label %21, label %23

21:                                               ; preds = %19
  %22 = tail call i32 @_ZN4quic9QuicUtils18GetInvalidStreamIdENS_20QuicTransportVersionE(i32 %18) #8
  br label %27

23:                                               ; preds = %19
  %24 = tail call i32 @_ZN4quic9QuicUtils17GetCryptoStreamIdENS_20QuicTransportVersionE(i32 %18) #8
  br label %27

25:                                               ; preds = %5
  %26 = tail call i32 @_ZN4quic9QuicUtils18GetInvalidStreamIdENS_20QuicTransportVersionE(i32 %18) #8
  br label %27

27:                                               ; preds = %21, %23, %25
  %28 = phi i32 [ %26, %25 ], [ %22, %21 ], [ %24, %23 ]
  store i32 %28, i32* %15, align 8
  %29 = getelementptr inbounds %"class.quic::LegacyQuicStreamIdManager", %"class.quic::LegacyQuicStreamIdManager"* %0, i64 0, i32 7
  %30 = bitcast i64* %29 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %30, i8 0, i64 16, i1 false)
  ret void
}

declare i32 @_ZN4quic9QuicUtils29GetFirstBidirectionalStreamIdENS_20QuicTransportVersionENS_11PerspectiveE(i32, i8 zeroext) local_unnamed_addr #1

declare i32 @_ZN4quic9QuicUtils18GetInvalidStreamIdENS_20QuicTransportVersionE(i32) local_unnamed_addr #1

declare i32 @_ZN4quic9QuicUtils17GetCryptoStreamIdENS_20QuicTransportVersionE(i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4quic25LegacyQuicStreamIdManagerD2Ev(%"class.quic::LegacyQuicStreamIdManager"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.quic::LegacyQuicStreamIdManager", %"class.quic::LegacyQuicStreamIdManager"* %0, i64 0, i32 5, i32 0, i32 3
  %3 = load i64, i64* %2, align 8
  %4 = icmp eq i64 %3, 0
  br i1 %4, label %10, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.quic::LegacyQuicStreamIdManager", %"class.quic::LegacyQuicStreamIdManager"* %0, i64 0, i32 5, i32 0, i32 1
  %7 = getelementptr inbounds %"class.quic::LegacyQuicStreamIdManager", %"class.quic::LegacyQuicStreamIdManager"* %0, i64 0, i32 5, i32 0, i32 0
  %8 = load i8*, i8** %7, align 8
  tail call void @_ZdlPv(i8* %8) #13
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @_ZZN4absl18container_internal10EmptyGroupEvE11empty_group, i64 0, i64 0), i8** %7, align 8
  %9 = bitcast i32** %6 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %9, i8 0, i64 32, i1 false) #8
  br label %10

10:                                               ; preds = %1, %5
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK4quic25LegacyQuicStreamIdManager25CanOpenNextOutgoingStreamEv(%"class.quic::LegacyQuicStreamIdManager"* nocapture readonly) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.quic::LegacyQuicStreamIdManager", %"class.quic::LegacyQuicStreamIdManager"* %0, i64 0, i32 8
  %3 = load i64, i64* %2, align 8
  %4 = getelementptr inbounds %"class.quic::LegacyQuicStreamIdManager", %"class.quic::LegacyQuicStreamIdManager"* %0, i64 0, i32 2
  %5 = load i64, i64* %4, align 8
  %6 = icmp ult i64 %3, %5
  ret i1 %6
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK4quic25LegacyQuicStreamIdManager21CanOpenIncomingStreamEv(%"class.quic::LegacyQuicStreamIdManager"* nocapture readonly) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.quic::LegacyQuicStreamIdManager", %"class.quic::LegacyQuicStreamIdManager"* %0, i64 0, i32 7
  %3 = load i64, i64* %2, align 8
  %4 = getelementptr inbounds %"class.quic::LegacyQuicStreamIdManager", %"class.quic::LegacyQuicStreamIdManager"* %0, i64 0, i32 3
  %5 = load i64, i64* %4, align 8
  %6 = icmp ult i64 %3, %5
  ret i1 %6
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4quic25LegacyQuicStreamIdManager32MaybeIncreaseLargestPeerStreamIdEj(%"class.quic::LegacyQuicStreamIdManager"*, i32) local_unnamed_addr #3 align 2 {
  %3 = alloca i32, align 4
  store i32 %1, i32* %3, align 4
  %4 = getelementptr inbounds %"class.quic::LegacyQuicStreamIdManager", %"class.quic::LegacyQuicStreamIdManager"* %0, i64 0, i32 5, i32 0
  %5 = call i64 @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashSetPolicyIjEENS_13hash_internal4HashIjEENSt3__18equal_toIjEENS7_9allocatorIjEEE5eraseIjEEmRKj(%"class.absl::container_internal::raw_hash_set"* %4, i32* nonnull dereferenceable(4) %3)
  %6 = getelementptr inbounds %"class.quic::LegacyQuicStreamIdManager", %"class.quic::LegacyQuicStreamIdManager"* %0, i64 0, i32 6
  %7 = load i32, i32* %6, align 8
  %8 = getelementptr inbounds %"class.quic::LegacyQuicStreamIdManager", %"class.quic::LegacyQuicStreamIdManager"* %0, i64 0, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = call i32 @_ZN4quic9QuicUtils18GetInvalidStreamIdENS_20QuicTransportVersionE(i32 %9) #8
  %11 = icmp eq i32 %7, %10
  %12 = load i32, i32* %3, align 4
  %13 = load i32, i32* %6, align 8
  %14 = icmp ugt i32 %12, %13
  %15 = or i1 %11, %14
  br i1 %15, label %16, label %126

16:                                               ; preds = %2
  %17 = sub i32 %12, %13
  %18 = load i32, i32* %8, align 4
  %19 = call i32 @_ZN4quic9QuicUtils18GetInvalidStreamIdENS_20QuicTransportVersionE(i32 %18) #8
  %20 = icmp eq i32 %13, %19
  %21 = load i32, i32* %3, align 4
  %22 = add i32 %21, 1
  %23 = select i1 %20, i32 %22, i32 %17
  %24 = lshr i32 %23, 1
  %25 = add nsw i32 %24, -1
  %26 = zext i32 %25 to i64
  %27 = getelementptr inbounds %"class.quic::LegacyQuicStreamIdManager", %"class.quic::LegacyQuicStreamIdManager"* %0, i64 0, i32 5, i32 0, i32 2
  %28 = load i64, i64* %27, align 8
  %29 = add i64 %28, %26
  %30 = getelementptr inbounds %"class.quic::LegacyQuicStreamIdManager", %"class.quic::LegacyQuicStreamIdManager"* %0, i64 0, i32 3
  %31 = load i64, i64* %30, align 8
  %32 = mul i64 %31, 10
  %33 = icmp ugt i64 %29, %32
  br i1 %33, label %126, label %34

34:                                               ; preds = %16
  %35 = load i32, i32* %6, align 8
  %36 = add i32 %35, 2
  %37 = load i32, i32* %8, align 4
  %38 = call i32 @_ZN4quic9QuicUtils18GetInvalidStreamIdENS_20QuicTransportVersionE(i32 %37) #8
  %39 = icmp eq i32 %35, %38
  br i1 %39, label %40, label %47

40:                                               ; preds = %34
  %41 = load i32, i32* %8, align 4
  %42 = getelementptr inbounds %"class.quic::LegacyQuicStreamIdManager", %"class.quic::LegacyQuicStreamIdManager"* %0, i64 0, i32 0
  %43 = load i8, i8* %42, align 8
  %44 = icmp ne i8 %43, 1
  %45 = zext i1 %44 to i8
  %46 = call i32 @_ZN4quic9QuicUtils29GetFirstBidirectionalStreamIdENS_20QuicTransportVersionENS_11PerspectiveE(i32 %41, i8 zeroext %45) #8
  br label %47

47:                                               ; preds = %40, %34
  %48 = phi i32 [ %46, %40 ], [ %36, %34 ]
  %49 = load i32, i32* %3, align 4
  %50 = icmp ult i32 %48, %49
  br i1 %50, label %51, label %57

51:                                               ; preds = %47
  %52 = load i64, i64* bitcast (i8** @_ZN4absl13hash_internal15MixingHashState5kSeedE to i64*), align 8, !noalias !2
  %53 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %4, i64 0, i32 0
  %54 = getelementptr inbounds %"class.quic::LegacyQuicStreamIdManager", %"class.quic::LegacyQuicStreamIdManager"* %0, i64 0, i32 5, i32 0, i32 3
  %55 = getelementptr inbounds %"class.quic::LegacyQuicStreamIdManager", %"class.quic::LegacyQuicStreamIdManager"* %0, i64 0, i32 5, i32 0, i32 1
  %56 = load i8*, i8** %53, align 8, !noalias !2
  br label %59

57:                                               ; preds = %118, %47
  %58 = phi i32 [ %49, %47 ], [ %119, %118 ]
  store i32 %58, i32* %6, align 8
  br label %126

59:                                               ; preds = %51, %118
  %60 = phi i32 [ %49, %51 ], [ %119, %118 ]
  %61 = phi i8* [ %56, %51 ], [ %120, %118 ]
  %62 = phi i32 [ %48, %51 ], [ %124, %118 ]
  %63 = zext i32 %62 to i64
  %64 = add i64 %52, %63
  %65 = zext i64 %64 to i128
  %66 = mul nuw i128 %65, 11376068507788127593
  %67 = lshr i128 %66, 64
  %68 = xor i128 %67, %66
  %69 = trunc i128 %68 to i64
  %70 = load i64, i64* %54, align 8, !noalias !2
  %71 = lshr i64 %69, 7
  %72 = ptrtoint i8* %61 to i64
  %73 = lshr i64 %72, 12
  %74 = xor i64 %71, %73
  %75 = trunc i128 %68 to i8
  %76 = and i8 %75, 127
  %77 = insertelement <16 x i8> undef, i8 %76, i32 0
  %78 = shufflevector <16 x i8> %77, <16 x i8> undef, <16 x i32> zeroinitializer
  br label %79

79:                                               ; preds = %109, %59
  %80 = phi i64 [ %74, %59 ], [ %111, %109 ]
  %81 = phi i64 [ 0, %59 ], [ %110, %109 ]
  %82 = and i64 %80, %70
  %83 = getelementptr inbounds i8, i8* %61, i64 %82
  %84 = bitcast i8* %83 to <16 x i8>*
  %85 = load <16 x i8>, <16 x i8>* %84, align 1, !noalias !2
  %86 = icmp eq <16 x i8> %78, %85
  %87 = bitcast <16 x i1> %86 to i16
  %88 = icmp eq i16 %87, 0
  br i1 %88, label %105, label %89

89:                                               ; preds = %79
  %90 = zext i16 %87 to i32
  %91 = load i32*, i32** %55, align 8, !noalias !2
  br label %92

92:                                               ; preds = %101, %89
  %93 = phi i32 [ %90, %89 ], [ %103, %101 ]
  %94 = call i32 @llvm.cttz.i32(i32 %93, i1 false) #8, !range !9
  %95 = zext i32 %94 to i64
  %96 = add i64 %82, %95
  %97 = and i64 %96, %70
  %98 = getelementptr inbounds i32, i32* %91, i64 %97
  %99 = load i32, i32* %98, align 4, !noalias !2
  %100 = icmp eq i32 %99, %62
  br i1 %100, label %118, label %101, !prof !10

101:                                              ; preds = %92
  %102 = add i32 %93, -1
  %103 = and i32 %102, %93
  %104 = icmp eq i32 %103, 0
  br i1 %104, label %105, label %92

105:                                              ; preds = %101, %79
  %106 = icmp eq <16 x i8> %85, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %107 = bitcast <16 x i1> %106 to i16
  %108 = icmp eq i16 %107, 0
  br i1 %108, label %109, label %112, !prof !11

109:                                              ; preds = %105
  %110 = add i64 %81, 16
  %111 = add i64 %110, %82
  br label %79

112:                                              ; preds = %105
  %113 = call i64 @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashSetPolicyIjEENS_13hash_internal4HashIjEENSt3__18equal_toIjEENS7_9allocatorIjEEE14prepare_insertEm(%"class.absl::container_internal::raw_hash_set"* %4, i64 %69) #8, !noalias !2
  %114 = load i32*, i32** %55, align 8, !noalias !2
  %115 = getelementptr inbounds i32, i32* %114, i64 %113
  store i32 %62, i32* %115, align 4, !noalias !2
  %116 = load i8*, i8** %53, align 8, !noalias !2
  %117 = load i32, i32* %3, align 4
  br label %118

118:                                              ; preds = %92, %112
  %119 = phi i32 [ %117, %112 ], [ %60, %92 ]
  %120 = phi i8* [ %116, %112 ], [ %61, %92 ]
  %121 = phi i64 [ %113, %112 ], [ %97, %92 ]
  %122 = getelementptr inbounds i8, i8* %120, i64 %121
  %123 = icmp ne i8* %122, null
  call void @llvm.assume(i1 %123) #8, !noalias !2
  %124 = add i32 %62, 2
  %125 = icmp ult i32 %124, %119
  br i1 %125, label %59, label %57

126:                                              ; preds = %2, %57, %16
  %127 = phi i1 [ true, %57 ], [ false, %16 ], [ true, %2 ]
  ret i1 %127
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashSetPolicyIjEENS_13hash_internal4HashIjEENSt3__18equal_toIjEENS7_9allocatorIjEEE5eraseIjEEmRKj(%"class.absl::container_internal::raw_hash_set"*, i32* dereferenceable(4)) local_unnamed_addr #3 comdat align 2 {
  %3 = load i32, i32* %1, align 4
  %4 = load i64, i64* bitcast (i8** @_ZN4absl13hash_internal15MixingHashState5kSeedE to i64*), align 8
  %5 = zext i32 %3 to i64
  %6 = add i64 %4, %5
  %7 = zext i64 %6 to i128
  %8 = mul nuw i128 %7, 11376068507788127593
  %9 = lshr i128 %8, 64
  %10 = xor i128 %9, %8
  %11 = trunc i128 %10 to i64
  %12 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 0
  %13 = load i8*, i8** %12, align 8
  %14 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 3
  %15 = load i64, i64* %14, align 8
  %16 = lshr i64 %11, 7
  %17 = ptrtoint i8* %13 to i64
  %18 = lshr i64 %17, 12
  %19 = xor i64 %16, %18
  %20 = trunc i128 %10 to i8
  %21 = and i8 %20, 127
  %22 = insertelement <16 x i8> undef, i8 %21, i32 0
  %23 = shufflevector <16 x i8> %22, <16 x i8> undef, <16 x i32> zeroinitializer
  %24 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 1
  br label %25

25:                                               ; preds = %55, %2
  %26 = phi i64 [ %19, %2 ], [ %57, %55 ]
  %27 = phi i64 [ 0, %2 ], [ %56, %55 ]
  %28 = and i64 %26, %15
  %29 = getelementptr inbounds i8, i8* %13, i64 %28
  %30 = bitcast i8* %29 to <16 x i8>*
  %31 = load <16 x i8>, <16 x i8>* %30, align 1
  %32 = icmp eq <16 x i8> %23, %31
  %33 = bitcast <16 x i1> %32 to i16
  %34 = icmp eq i16 %33, 0
  br i1 %34, label %51, label %35

35:                                               ; preds = %25
  %36 = zext i16 %33 to i32
  %37 = load i32*, i32** %24, align 8
  br label %38

38:                                               ; preds = %47, %35
  %39 = phi i32 [ %36, %35 ], [ %49, %47 ]
  %40 = tail call i32 @llvm.cttz.i32(i32 %39, i1 false) #8, !range !9
  %41 = zext i32 %40 to i64
  %42 = add i64 %28, %41
  %43 = and i64 %42, %15
  %44 = getelementptr inbounds i32, i32* %37, i64 %43
  %45 = load i32, i32* %44, align 4
  %46 = icmp eq i32 %45, %3
  br i1 %46, label %58, label %47, !prof !10

47:                                               ; preds = %38
  %48 = add i32 %39, -1
  %49 = and i32 %48, %39
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %51, label %38

51:                                               ; preds = %47, %25
  %52 = icmp eq <16 x i8> %31, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %53 = bitcast <16 x i1> %52 to i16
  %54 = icmp eq i16 %53, 0
  br i1 %54, label %55, label %105, !prof !11

55:                                               ; preds = %51
  %56 = add i64 %27, 16
  %57 = add i64 %56, %28
  br label %25

58:                                               ; preds = %38
  %59 = getelementptr inbounds i8, i8* %13, i64 %43
  %60 = icmp ne i8* %59, null
  tail call void @llvm.assume(i1 %60) #8
  %61 = load i8, i8* %59, align 1
  %62 = icmp sgt i8 %61, -1
  br i1 %62, label %64, label %63, !prof !10

63:                                               ; preds = %58
  tail call void @llvm.trap() #8
  unreachable

64:                                               ; preds = %58
  %65 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 2
  %66 = load i64, i64* %65, align 8
  %67 = add i64 %66, -1
  store i64 %67, i64* %65, align 8
  %68 = add i64 %43, -16
  %69 = and i64 %68, %15
  %70 = bitcast i8* %59 to <16 x i8>*
  %71 = load <16 x i8>, <16 x i8>* %70, align 1
  %72 = icmp eq <16 x i8> %71, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %73 = bitcast <16 x i1> %72 to i16
  %74 = getelementptr inbounds i8, i8* %13, i64 %69
  %75 = bitcast i8* %74 to <16 x i8>*
  %76 = load <16 x i8>, <16 x i8>* %75, align 1
  %77 = icmp eq <16 x i8> %76, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %78 = bitcast <16 x i1> %77 to i16
  %79 = icmp ne i16 %78, 0
  %80 = icmp ne i16 %73, 0
  %81 = and i1 %80, %79
  br i1 %81, label %82, label %92

82:                                               ; preds = %64
  %83 = zext i16 %73 to i32
  %84 = zext i16 %78 to i32
  %85 = tail call i32 @llvm.cttz.i32(i32 %83, i1 false) #8, !range !9
  %86 = shl nuw i32 %84, 16
  %87 = tail call i32 @llvm.ctlz.i32(i32 %86, i1 false) #8, !range !9
  %88 = add nuw nsw i32 %87, %85
  %89 = icmp ult i32 %88, 16
  %90 = zext i1 %89 to i64
  %91 = select i1 %89, i8 -128, i8 -2
  br label %92

92:                                               ; preds = %64, %82
  %93 = phi i64 [ 0, %64 ], [ %90, %82 ]
  %94 = phi i8 [ -2, %64 ], [ %91, %82 ]
  store i8 %94, i8* %59, align 1
  %95 = load i8*, i8** %12, align 8
  %96 = add i64 %43, -15
  %97 = load i64, i64* %14, align 8
  %98 = and i64 %97, %96
  %99 = and i64 %97, 15
  %100 = add i64 %98, %99
  %101 = getelementptr inbounds i8, i8* %95, i64 %100
  store i8 %94, i8* %101, align 1
  %102 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  %103 = load i64, i64* %102, align 8
  %104 = add i64 %103, %93
  store i64 %104, i64* %102, align 8
  br label %105

105:                                              ; preds = %51, %92
  %106 = phi i64 [ 1, %92 ], [ 0, %51 ]
  ret i64 %106
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #4

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @_ZNK4quic25LegacyQuicStreamIdManager22GetNumAvailableStreamsEv(%"class.quic::LegacyQuicStreamIdManager"* nocapture readonly) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.quic::LegacyQuicStreamIdManager", %"class.quic::LegacyQuicStreamIdManager"* %0, i64 0, i32 5, i32 0, i32 2
  %3 = load i64, i64* %2, align 8
  ret i64 %3
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @_ZNK4quic25LegacyQuicStreamIdManager19MaxAvailableStreamsEv(%"class.quic::LegacyQuicStreamIdManager"* nocapture readonly) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.quic::LegacyQuicStreamIdManager", %"class.quic::LegacyQuicStreamIdManager"* %0, i64 0, i32 3
  %3 = load i64, i64* %2, align 8
  %4 = mul i64 %3, 10
  ret i64 %4
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #4

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i32 @_ZN4quic25LegacyQuicStreamIdManager23GetNextOutgoingStreamIdEv(%"class.quic::LegacyQuicStreamIdManager"* nocapture) local_unnamed_addr #5 align 2 {
  %2 = getelementptr inbounds %"class.quic::LegacyQuicStreamIdManager", %"class.quic::LegacyQuicStreamIdManager"* %0, i64 0, i32 4
  %3 = load i32, i32* %2, align 8
  %4 = add i32 %3, 2
  store i32 %4, i32* %2, align 8
  ret i32 %3
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN4quic25LegacyQuicStreamIdManager14ActivateStreamEb(%"class.quic::LegacyQuicStreamIdManager"* nocapture, i1 zeroext) local_unnamed_addr #5 align 2 {
  %3 = getelementptr inbounds %"class.quic::LegacyQuicStreamIdManager", %"class.quic::LegacyQuicStreamIdManager"* %0, i64 0, i32 8
  %4 = getelementptr inbounds %"class.quic::LegacyQuicStreamIdManager", %"class.quic::LegacyQuicStreamIdManager"* %0, i64 0, i32 7
  %5 = select i1 %1, i64* %4, i64* %3
  %6 = select i1 %1, i64* %4, i64* %3
  %7 = load i64, i64* %5, align 8
  %8 = add i64 %7, 1
  store i64 %8, i64* %6, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4quic25LegacyQuicStreamIdManager14OnStreamClosedEb(%"class.quic::LegacyQuicStreamIdManager"* nocapture, i1 zeroext) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.logging::LogMessage", align 8
  %4 = alloca %"class.logging::LogMessage", align 8
  %5 = tail call zeroext i1 @_ZN7logging22ShouldCreateLogMessageEi(i32 2) #8
  br i1 %1, label %6, label %15

6:                                                ; preds = %2
  br i1 %5, label %7, label %13

7:                                                ; preds = %6
  %8 = getelementptr inbounds %"class.quic::LegacyQuicStreamIdManager", %"class.quic::LegacyQuicStreamIdManager"* %0, i64 0, i32 7
  %9 = load i64, i64* %8, align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %11, label %13

11:                                               ; preds = %7
  %12 = bitcast %"class.logging::LogMessage"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 304, i8* nonnull %12) #8
  call void @_ZN7logging10LogMessageC1EPKcii(%"class.logging::LogMessage"* nonnull %3, i8* getelementptr inbounds ([76 x i8], [76 x i8]* @.str, i64 0, i64 0), i32 110, i32 2) #8
  call void @_ZN7logging10LogMessageD1Ev(%"class.logging::LogMessage"* nonnull %3) #8
  call void @llvm.lifetime.end.p0i8(i64 304, i8* nonnull %12) #8
  br label %13

13:                                               ; preds = %7, %6, %11
  %14 = getelementptr inbounds %"class.quic::LegacyQuicStreamIdManager", %"class.quic::LegacyQuicStreamIdManager"* %0, i64 0, i32 7
  br label %24

15:                                               ; preds = %2
  br i1 %5, label %16, label %22

16:                                               ; preds = %15
  %17 = getelementptr inbounds %"class.quic::LegacyQuicStreamIdManager", %"class.quic::LegacyQuicStreamIdManager"* %0, i64 0, i32 8
  %18 = load i64, i64* %17, align 8
  %19 = icmp eq i64 %18, 0
  br i1 %19, label %20, label %22

20:                                               ; preds = %16
  %21 = bitcast %"class.logging::LogMessage"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 304, i8* nonnull %21) #8
  call void @_ZN7logging10LogMessageC1EPKcii(%"class.logging::LogMessage"* nonnull %4, i8* getelementptr inbounds ([76 x i8], [76 x i8]* @.str, i64 0, i64 0), i32 114, i32 2) #8
  call void @_ZN7logging10LogMessageD1Ev(%"class.logging::LogMessage"* nonnull %4) #8
  call void @llvm.lifetime.end.p0i8(i64 304, i8* nonnull %21) #8
  br label %22

22:                                               ; preds = %16, %15, %20
  %23 = getelementptr inbounds %"class.quic::LegacyQuicStreamIdManager", %"class.quic::LegacyQuicStreamIdManager"* %0, i64 0, i32 8
  br label %24

24:                                               ; preds = %22, %13
  %25 = phi i64* [ %23, %22 ], [ %14, %13 ]
  %26 = load i64, i64* %25, align 8
  %27 = add i64 %26, -1
  store i64 %27, i64* %25, align 8
  ret void
}

declare zeroext i1 @_ZN7logging22ShouldCreateLogMessageEi(i32) local_unnamed_addr #1

declare void @_ZN7logging10LogMessageC1EPKcii(%"class.logging::LogMessage"*, i8*, i32, i32) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN7logging10LogMessageD1Ev(%"class.logging::LogMessage"*) unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK4quic25LegacyQuicStreamIdManager17IsAvailableStreamEj(%"class.quic::LegacyQuicStreamIdManager"* nocapture readonly, i32) local_unnamed_addr #3 align 2 {
  %3 = getelementptr inbounds %"class.quic::LegacyQuicStreamIdManager", %"class.quic::LegacyQuicStreamIdManager"* %0, i64 0, i32 4
  %4 = load i32, i32* %3, align 8
  %5 = xor i32 %4, %1
  %6 = and i32 %5, 1
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %8, label %10

8:                                                ; preds = %2
  %9 = icmp ule i32 %4, %1
  br label %84

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"class.quic::LegacyQuicStreamIdManager", %"class.quic::LegacyQuicStreamIdManager"* %0, i64 0, i32 6
  %12 = load i32, i32* %11, align 8
  %13 = getelementptr inbounds %"class.quic::LegacyQuicStreamIdManager", %"class.quic::LegacyQuicStreamIdManager"* %0, i64 0, i32 1
  %14 = load i32, i32* %13, align 4
  %15 = tail call i32 @_ZN4quic9QuicUtils18GetInvalidStreamIdENS_20QuicTransportVersionE(i32 %14) #8
  %16 = icmp eq i32 %12, %15
  br i1 %16, label %84, label %17

17:                                               ; preds = %10
  %18 = load i32, i32* %11, align 8
  %19 = icmp ult i32 %18, %1
  br i1 %19, label %84, label %20

20:                                               ; preds = %17
  %21 = load i64, i64* bitcast (i8** @_ZN4absl13hash_internal15MixingHashState5kSeedE to i64*), align 8
  %22 = zext i32 %1 to i64
  %23 = add i64 %21, %22
  %24 = zext i64 %23 to i128
  %25 = mul nuw i128 %24, 11376068507788127593
  %26 = lshr i128 %25, 64
  %27 = xor i128 %26, %25
  %28 = trunc i128 %27 to i64
  %29 = getelementptr inbounds %"class.quic::LegacyQuicStreamIdManager", %"class.quic::LegacyQuicStreamIdManager"* %0, i64 0, i32 5, i32 0, i32 0
  %30 = load i8*, i8** %29, align 8
  %31 = getelementptr inbounds %"class.quic::LegacyQuicStreamIdManager", %"class.quic::LegacyQuicStreamIdManager"* %0, i64 0, i32 5, i32 0, i32 3
  %32 = load i64, i64* %31, align 8
  %33 = lshr i64 %28, 7
  %34 = ptrtoint i8* %30 to i64
  %35 = lshr i64 %34, 12
  %36 = xor i64 %33, %35
  %37 = trunc i128 %27 to i8
  %38 = and i8 %37, 127
  %39 = insertelement <16 x i8> undef, i8 %38, i32 0
  %40 = shufflevector <16 x i8> %39, <16 x i8> undef, <16 x i32> zeroinitializer
  %41 = getelementptr inbounds %"class.quic::LegacyQuicStreamIdManager", %"class.quic::LegacyQuicStreamIdManager"* %0, i64 0, i32 5, i32 0, i32 1
  %42 = load i32*, i32** %41, align 8
  br label %43

43:                                               ; preds = %72, %20
  %44 = phi i64 [ %36, %20 ], [ %74, %72 ]
  %45 = phi i64 [ 0, %20 ], [ %73, %72 ]
  %46 = and i64 %44, %32
  %47 = getelementptr inbounds i8, i8* %30, i64 %46
  %48 = bitcast i8* %47 to <16 x i8>*
  %49 = load <16 x i8>, <16 x i8>* %48, align 1
  %50 = icmp eq <16 x i8> %40, %49
  %51 = bitcast <16 x i1> %50 to i16
  %52 = icmp eq i16 %51, 0
  br i1 %52, label %68, label %53

53:                                               ; preds = %43
  %54 = zext i16 %51 to i32
  br label %55

55:                                               ; preds = %64, %53
  %56 = phi i32 [ %54, %53 ], [ %66, %64 ]
  %57 = tail call i32 @llvm.cttz.i32(i32 %56, i1 false) #8, !range !9
  %58 = zext i32 %57 to i64
  %59 = add i64 %46, %58
  %60 = and i64 %59, %32
  %61 = getelementptr inbounds i32, i32* %42, i64 %60
  %62 = load i32, i32* %61, align 4
  %63 = icmp eq i32 %62, %1
  br i1 %63, label %75, label %64, !prof !10

64:                                               ; preds = %55
  %65 = add i32 %56, -1
  %66 = and i32 %65, %56
  %67 = icmp eq i32 %66, 0
  br i1 %67, label %68, label %55

68:                                               ; preds = %64, %43
  %69 = icmp eq <16 x i8> %49, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %70 = bitcast <16 x i1> %69 to i16
  %71 = icmp eq i16 %70, 0
  br i1 %71, label %72, label %81, !prof !11

72:                                               ; preds = %68
  %73 = add i64 %45, 16
  %74 = add i64 %73, %46
  br label %43

75:                                               ; preds = %55
  %76 = getelementptr inbounds i8, i8* %30, i64 %60
  %77 = icmp ne i8* %76, null
  tail call void @llvm.assume(i1 %77) #8
  %78 = load i8, i8* %76, align 1
  %79 = icmp sgt i8 %78, -1
  br i1 %79, label %81, label %80, !prof !10

80:                                               ; preds = %75
  tail call void @llvm.trap() #8
  unreachable

81:                                               ; preds = %68, %75
  %82 = phi i8* [ %76, %75 ], [ null, %68 ]
  %83 = icmp ne i8* %82, null
  br label %84

84:                                               ; preds = %10, %17, %81, %8
  %85 = phi i1 [ %9, %8 ], [ true, %17 ], [ true, %10 ], [ %83, %81 ]
  ret i1 %85
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK4quic25LegacyQuicStreamIdManager16IsIncomingStreamEj(%"class.quic::LegacyQuicStreamIdManager"* nocapture readonly, i32) local_unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"class.quic::LegacyQuicStreamIdManager", %"class.quic::LegacyQuicStreamIdManager"* %0, i64 0, i32 4
  %4 = load i32, i32* %3, align 8
  %5 = xor i32 %4, %1
  %6 = and i32 %5, 1
  %7 = icmp ne i32 %6, 0
  ret i1 %7
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #7

; Function Attrs: nounwind
declare void @llvm.assume(i1) #8

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.cttz.i32(i32, i1 immarg) #9

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #10

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #9

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashSetPolicyIjEENS_13hash_internal4HashIjEENSt3__18equal_toIjEENS7_9allocatorIjEEE14prepare_insertEm(%"class.absl::container_internal::raw_hash_set"*, i64) local_unnamed_addr #11 comdat align 2 {
  %3 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 0
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 3
  %6 = load i64, i64* %5, align 8
  %7 = lshr i64 %1, 7
  %8 = ptrtoint i8* %4 to i64
  %9 = lshr i64 %8, 12
  %10 = xor i64 %9, %7
  %11 = and i64 %10, %6
  %12 = getelementptr inbounds i8, i8* %4, i64 %11
  %13 = bitcast i8* %12 to <16 x i8>*
  %14 = load <16 x i8>, <16 x i8>* %13, align 1
  %15 = icmp slt <16 x i8> %14, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %16 = bitcast <16 x i1> %15 to i16
  %17 = icmp eq i16 %16, 0
  br i1 %17, label %18, label %30

18:                                               ; preds = %2, %18
  %19 = phi i64 [ %23, %18 ], [ %11, %2 ]
  %20 = phi i64 [ %21, %18 ], [ 0, %2 ]
  %21 = add i64 %20, 16
  %22 = add i64 %21, %19
  %23 = and i64 %22, %6
  %24 = getelementptr inbounds i8, i8* %4, i64 %23
  %25 = bitcast i8* %24 to <16 x i8>*
  %26 = load <16 x i8>, <16 x i8>* %25, align 1
  %27 = icmp slt <16 x i8> %26, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %28 = bitcast <16 x i1> %27 to i16
  %29 = icmp eq i16 %28, 0
  br i1 %29, label %18, label %30

30:                                               ; preds = %18, %2
  %31 = phi i64 [ %11, %2 ], [ %23, %18 ]
  %32 = phi i16 [ %16, %2 ], [ %28, %18 ]
  %33 = zext i16 %32 to i32
  %34 = tail call i32 @llvm.cttz.i32(i32 %33, i1 false) #8, !range !9
  %35 = zext i32 %34 to i64
  %36 = add i64 %31, %35
  %37 = and i64 %36, %6
  %38 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  %39 = load i64, i64* %38, align 8
  %40 = icmp eq i64 %39, 0
  br i1 %40, label %41, label %93

41:                                               ; preds = %30
  %42 = getelementptr inbounds i8, i8* %4, i64 %37
  %43 = load i8, i8* %42, align 1
  %44 = icmp eq i8 %43, -2
  br i1 %44, label %93, label %45, !prof !10

45:                                               ; preds = %41
  %46 = icmp eq i64 %6, 0
  br i1 %46, label %47, label %48

47:                                               ; preds = %45
  tail call void @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashSetPolicyIjEENS_13hash_internal4HashIjEENSt3__18equal_toIjEENS7_9allocatorIjEEE6resizeEm(%"class.absl::container_internal::raw_hash_set"* %0, i64 1) #8
  br label %59

48:                                               ; preds = %45
  %49 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 2
  %50 = load i64, i64* %49, align 8
  %51 = lshr i64 %6, 3
  %52 = sub i64 %6, %51
  %53 = lshr i64 %52, 1
  %54 = icmp ugt i64 %50, %53
  br i1 %54, label %56, label %55

55:                                               ; preds = %48
  tail call void @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashSetPolicyIjEENS_13hash_internal4HashIjEENSt3__18equal_toIjEENS7_9allocatorIjEEE27drop_deletes_without_resizeEv(%"class.absl::container_internal::raw_hash_set"* %0) #8
  br label %59

56:                                               ; preds = %48
  %57 = shl i64 %6, 1
  %58 = or i64 %57, 1
  tail call void @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashSetPolicyIjEENS_13hash_internal4HashIjEENSt3__18equal_toIjEENS7_9allocatorIjEEE6resizeEm(%"class.absl::container_internal::raw_hash_set"* %0, i64 %58) #8
  br label %59

59:                                               ; preds = %47, %55, %56
  %60 = load i8*, i8** %3, align 8
  %61 = load i64, i64* %5, align 8
  %62 = ptrtoint i8* %60 to i64
  %63 = lshr i64 %62, 12
  %64 = xor i64 %63, %7
  %65 = and i64 %64, %61
  %66 = getelementptr inbounds i8, i8* %60, i64 %65
  %67 = bitcast i8* %66 to <16 x i8>*
  %68 = load <16 x i8>, <16 x i8>* %67, align 1
  %69 = icmp slt <16 x i8> %68, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %70 = bitcast <16 x i1> %69 to i16
  %71 = icmp eq i16 %70, 0
  br i1 %71, label %72, label %84

72:                                               ; preds = %59, %72
  %73 = phi i64 [ %77, %72 ], [ %65, %59 ]
  %74 = phi i64 [ %75, %72 ], [ 0, %59 ]
  %75 = add i64 %74, 16
  %76 = add i64 %75, %73
  %77 = and i64 %76, %61
  %78 = getelementptr inbounds i8, i8* %60, i64 %77
  %79 = bitcast i8* %78 to <16 x i8>*
  %80 = load <16 x i8>, <16 x i8>* %79, align 1
  %81 = icmp slt <16 x i8> %80, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %82 = bitcast <16 x i1> %81 to i16
  %83 = icmp eq i16 %82, 0
  br i1 %83, label %72, label %84

84:                                               ; preds = %72, %59
  %85 = phi i64 [ %65, %59 ], [ %77, %72 ]
  %86 = phi i16 [ %70, %59 ], [ %82, %72 ]
  %87 = zext i16 %86 to i32
  %88 = tail call i32 @llvm.cttz.i32(i32 %87, i1 false) #8, !range !9
  %89 = zext i32 %88 to i64
  %90 = add i64 %85, %89
  %91 = and i64 %90, %61
  %92 = load i64, i64* %38, align 8
  br label %93

93:                                               ; preds = %41, %30, %84
  %94 = phi i64 [ %92, %84 ], [ 0, %41 ], [ %39, %30 ]
  %95 = phi i8* [ %60, %84 ], [ %4, %41 ], [ %4, %30 ]
  %96 = phi i64 [ %91, %84 ], [ %37, %41 ], [ %37, %30 ]
  %97 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 2
  %98 = load i64, i64* %97, align 8
  %99 = add i64 %98, 1
  store i64 %99, i64* %97, align 8
  %100 = getelementptr inbounds i8, i8* %95, i64 %96
  %101 = load i8, i8* %100, align 1
  %102 = icmp eq i8 %101, -128
  %103 = zext i1 %102 to i64
  %104 = sub i64 %94, %103
  store i64 %104, i64* %38, align 8
  %105 = trunc i64 %1 to i8
  %106 = and i8 %105, 127
  store i8 %106, i8* %100, align 1
  %107 = load i8*, i8** %3, align 8
  %108 = add i64 %96, -15
  %109 = load i64, i64* %5, align 8
  %110 = and i64 %109, %108
  %111 = and i64 %109, 15
  %112 = add i64 %110, %111
  %113 = getelementptr inbounds i8, i8* %107, i64 %112
  store i8 %106, i8* %113, align 1
  ret i64 %96
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashSetPolicyIjEENS_13hash_internal4HashIjEENSt3__18equal_toIjEENS7_9allocatorIjEEE6resizeEm(%"class.absl::container_internal::raw_hash_set"*, i64) local_unnamed_addr #3 comdat align 2 {
  %3 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 0
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 1
  %6 = load i32*, i32** %5, align 8
  %7 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 3
  %8 = load i64, i64* %7, align 8
  store i64 %1, i64* %7, align 8
  %9 = add i64 %1, 16
  %10 = add i64 %1, 19
  %11 = and i64 %10, -4
  %12 = shl i64 %1, 2
  %13 = add i64 %11, %12
  %14 = tail call i8* @_Znwm(i64 %13) #13
  store i8* %14, i8** %3, align 8
  %15 = getelementptr inbounds i8, i8* %14, i64 %11
  %16 = bitcast i32** %5 to i8**
  store i8* %15, i8** %16, align 8
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %14, i8 -128, i64 %9, i1 false) #8
  %17 = getelementptr inbounds i8, i8* %14, i64 %1
  store i8 -1, i8* %17, align 1
  %18 = lshr i64 %1, 3
  %19 = sub i64 %1, %18
  %20 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 2
  %21 = load i64, i64* %20, align 8
  %22 = sub i64 %19, %21
  %23 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  store i64 %22, i64* %23, align 8
  %24 = icmp eq i64 %8, 0
  br i1 %24, label %93, label %25

25:                                               ; preds = %2
  %26 = load i64, i64* bitcast (i8** @_ZN4absl13hash_internal15MixingHashState5kSeedE to i64*), align 8
  br label %28

27:                                               ; preds = %89
  br i1 %24, label %93, label %92

28:                                               ; preds = %25, %89
  %29 = phi i64 [ 0, %25 ], [ %90, %89 ]
  %30 = getelementptr inbounds i8, i8* %4, i64 %29
  %31 = load i8, i8* %30, align 1
  %32 = icmp sgt i8 %31, -1
  br i1 %32, label %33, label %89

33:                                               ; preds = %28
  %34 = getelementptr inbounds i32, i32* %6, i64 %29
  %35 = load i32, i32* %34, align 4
  %36 = zext i32 %35 to i64
  %37 = add i64 %26, %36
  %38 = zext i64 %37 to i128
  %39 = mul nuw i128 %38, 11376068507788127593
  %40 = lshr i128 %39, 64
  %41 = xor i128 %40, %39
  %42 = trunc i128 %41 to i64
  %43 = load i8*, i8** %3, align 8
  %44 = load i64, i64* %7, align 8
  %45 = lshr i64 %42, 7
  %46 = ptrtoint i8* %43 to i64
  %47 = lshr i64 %46, 12
  %48 = xor i64 %45, %47
  %49 = and i64 %48, %44
  %50 = getelementptr inbounds i8, i8* %43, i64 %49
  %51 = bitcast i8* %50 to <16 x i8>*
  %52 = load <16 x i8>, <16 x i8>* %51, align 1
  %53 = icmp slt <16 x i8> %52, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %54 = bitcast <16 x i1> %53 to i16
  %55 = icmp eq i16 %54, 0
  br i1 %55, label %56, label %68

56:                                               ; preds = %33, %56
  %57 = phi i64 [ %61, %56 ], [ %49, %33 ]
  %58 = phi i64 [ %59, %56 ], [ 0, %33 ]
  %59 = add i64 %58, 16
  %60 = add i64 %59, %57
  %61 = and i64 %60, %44
  %62 = getelementptr inbounds i8, i8* %43, i64 %61
  %63 = bitcast i8* %62 to <16 x i8>*
  %64 = load <16 x i8>, <16 x i8>* %63, align 1
  %65 = icmp slt <16 x i8> %64, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %66 = bitcast <16 x i1> %65 to i16
  %67 = icmp eq i16 %66, 0
  br i1 %67, label %56, label %68

68:                                               ; preds = %56, %33
  %69 = phi i64 [ %49, %33 ], [ %61, %56 ]
  %70 = phi i16 [ %54, %33 ], [ %66, %56 ]
  %71 = zext i16 %70 to i32
  %72 = tail call i32 @llvm.cttz.i32(i32 %71, i1 false) #8, !range !9
  %73 = zext i32 %72 to i64
  %74 = add i64 %69, %73
  %75 = and i64 %74, %44
  %76 = trunc i128 %41 to i8
  %77 = and i8 %76, 127
  %78 = getelementptr inbounds i8, i8* %43, i64 %75
  store i8 %77, i8* %78, align 1
  %79 = load i8*, i8** %3, align 8
  %80 = add i64 %75, -15
  %81 = load i64, i64* %7, align 8
  %82 = and i64 %80, %81
  %83 = and i64 %81, 15
  %84 = add i64 %82, %83
  %85 = getelementptr inbounds i8, i8* %79, i64 %84
  store i8 %77, i8* %85, align 1
  %86 = load i32*, i32** %5, align 8
  %87 = getelementptr inbounds i32, i32* %86, i64 %75
  %88 = load i32, i32* %34, align 4
  store i32 %88, i32* %87, align 4
  br label %89

89:                                               ; preds = %28, %68
  %90 = add nuw i64 %29, 1
  %91 = icmp eq i64 %90, %8
  br i1 %91, label %27, label %28

92:                                               ; preds = %27
  tail call void @_ZdlPv(i8* %4) #13
  br label %93

93:                                               ; preds = %2, %27, %92
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashSetPolicyIjEENS_13hash_internal4HashIjEENSt3__18equal_toIjEENS7_9allocatorIjEEE27drop_deletes_without_resizeEv(%"class.absl::container_internal::raw_hash_set"*) local_unnamed_addr #11 comdat align 2 {
  %2 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 0
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 3
  %5 = load i64, i64* %4, align 8
  tail call void @_ZN4absl18container_internal37ConvertDeletedToEmptyAndFullToDeletedEPam(i8* %3, i64 %5) #8
  %6 = load i64, i64* %4, align 8
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %11, label %8

8:                                                ; preds = %1
  %9 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 1
  %10 = load i64, i64* bitcast (i8** @_ZN4absl13hash_internal15MixingHashState5kSeedE to i64*), align 8
  br label %19

11:                                               ; preds = %118, %1
  %12 = phi i64 [ 0, %1 ], [ %120, %118 ]
  %13 = lshr i64 %12, 3
  %14 = sub i64 %12, %13
  %15 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 2
  %16 = load i64, i64* %15, align 8
  %17 = sub i64 %14, %16
  %18 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  store i64 %17, i64* %18, align 8
  ret void

19:                                               ; preds = %8, %118
  %20 = phi i64 [ %6, %8 ], [ %121, %118 ]
  %21 = phi i64 [ 0, %8 ], [ %120, %118 ]
  %22 = load i8*, i8** %2, align 8
  %23 = getelementptr inbounds i8, i8* %22, i64 %21
  %24 = load i8, i8* %23, align 1
  %25 = icmp eq i8 %24, -2
  br i1 %25, label %26, label %118

26:                                               ; preds = %19
  %27 = ptrtoint i8* %22 to i64
  %28 = load i32*, i32** %9, align 8
  %29 = getelementptr inbounds i32, i32* %28, i64 %21
  %30 = load i32, i32* %29, align 4
  %31 = zext i32 %30 to i64
  %32 = add i64 %10, %31
  %33 = zext i64 %32 to i128
  %34 = mul nuw i128 %33, 11376068507788127593
  %35 = lshr i128 %34, 64
  %36 = xor i128 %35, %34
  %37 = trunc i128 %36 to i64
  %38 = lshr i64 %37, 7
  %39 = lshr i64 %27, 12
  %40 = xor i64 %38, %39
  %41 = and i64 %40, %20
  %42 = getelementptr inbounds i8, i8* %22, i64 %41
  %43 = bitcast i8* %42 to <16 x i8>*
  %44 = load <16 x i8>, <16 x i8>* %43, align 1
  %45 = icmp slt <16 x i8> %44, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %46 = bitcast <16 x i1> %45 to i16
  %47 = icmp eq i16 %46, 0
  br i1 %47, label %48, label %60

48:                                               ; preds = %26, %48
  %49 = phi i64 [ %53, %48 ], [ %41, %26 ]
  %50 = phi i64 [ %51, %48 ], [ 0, %26 ]
  %51 = add i64 %50, 16
  %52 = add i64 %51, %49
  %53 = and i64 %52, %20
  %54 = getelementptr inbounds i8, i8* %22, i64 %53
  %55 = bitcast i8* %54 to <16 x i8>*
  %56 = load <16 x i8>, <16 x i8>* %55, align 1
  %57 = icmp slt <16 x i8> %56, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %58 = bitcast <16 x i1> %57 to i16
  %59 = icmp eq i16 %58, 0
  br i1 %59, label %48, label %60

60:                                               ; preds = %48, %26
  %61 = phi i64 [ %41, %26 ], [ %53, %48 ]
  %62 = phi i16 [ %46, %26 ], [ %58, %48 ]
  %63 = zext i16 %62 to i32
  %64 = tail call i32 @llvm.cttz.i32(i32 %63, i1 false) #8, !range !9
  %65 = zext i32 %64 to i64
  %66 = add i64 %61, %65
  %67 = and i64 %66, %20
  %68 = sub i64 %67, %41
  %69 = sub i64 %21, %41
  %70 = xor i64 %68, %69
  %71 = and i64 %70, %20
  %72 = icmp ult i64 %71, 16
  br i1 %72, label %73, label %83, !prof !10

73:                                               ; preds = %60
  %74 = trunc i128 %36 to i8
  %75 = and i8 %74, 127
  store i8 %75, i8* %23, align 1
  %76 = load i8*, i8** %2, align 8
  %77 = add i64 %21, -15
  %78 = load i64, i64* %4, align 8
  %79 = and i64 %78, %77
  %80 = and i64 %78, 15
  %81 = add i64 %79, %80
  %82 = getelementptr inbounds i8, i8* %76, i64 %81
  store i8 %75, i8* %82, align 1
  br label %118

83:                                               ; preds = %60
  %84 = getelementptr inbounds i8, i8* %22, i64 %67
  %85 = load i8, i8* %84, align 1
  %86 = icmp eq i8 %85, -128
  %87 = trunc i128 %36 to i8
  %88 = and i8 %87, 127
  store i8 %88, i8* %84, align 1
  %89 = load i8*, i8** %2, align 8
  %90 = add i64 %67, -15
  %91 = load i64, i64* %4, align 8
  %92 = and i64 %91, %90
  %93 = and i64 %91, 15
  %94 = add i64 %92, %93
  %95 = getelementptr inbounds i8, i8* %89, i64 %94
  store i8 %88, i8* %95, align 1
  %96 = load i32*, i32** %9, align 8
  br i1 %86, label %97, label %110

97:                                               ; preds = %83
  %98 = getelementptr inbounds i32, i32* %96, i64 %67
  %99 = getelementptr inbounds i32, i32* %96, i64 %21
  %100 = load i32, i32* %99, align 4
  store i32 %100, i32* %98, align 4
  %101 = load i8*, i8** %2, align 8
  %102 = getelementptr inbounds i8, i8* %101, i64 %21
  store i8 -128, i8* %102, align 1
  %103 = load i8*, i8** %2, align 8
  %104 = add i64 %21, -15
  %105 = load i64, i64* %4, align 8
  %106 = and i64 %105, %104
  %107 = and i64 %105, 15
  %108 = add i64 %106, %107
  %109 = getelementptr inbounds i8, i8* %103, i64 %108
  store i8 -128, i8* %109, align 1
  br label %118

110:                                              ; preds = %83
  %111 = getelementptr inbounds i32, i32* %96, i64 %21
  %112 = load i32, i32* %111, align 4
  %113 = getelementptr inbounds i32, i32* %96, i64 %67
  %114 = load i32, i32* %113, align 4
  store i32 %114, i32* %111, align 4
  %115 = load i32*, i32** %9, align 8
  %116 = getelementptr inbounds i32, i32* %115, i64 %67
  store i32 %112, i32* %116, align 4
  %117 = add i64 %21, -1
  br label %118

118:                                              ; preds = %73, %110, %97, %19
  %119 = phi i64 [ %21, %19 ], [ %21, %73 ], [ %21, %97 ], [ %117, %110 ]
  %120 = add i64 %119, 1
  %121 = load i64, i64* %4, align 8
  %122 = icmp eq i64 %120, %121
  br i1 %122, label %11, label %19
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #12

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #4

declare void @_ZN4absl18container_internal37ConvertDeletedToEmptyAndFullToDeletedEPam(i8*, i64) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }
attributes #9 = { nounwind readnone speculatable }
attributes #10 = { cold noreturn nounwind }
attributes #11 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3, !5, !7}
!3 = distinct !{!3, !4, !"_ZNK4absl18container_internal12raw_hash_setINS0_17FlatHashSetPolicyIjEENS_13hash_internal4HashIjEENSt3__18equal_toIjEENS7_9allocatorIjEEE19EmplaceDecomposableclIjJRKjEEENS7_4pairINSC_8iteratorEbEERKT_DpOT0_: argument 0"}
!4 = distinct !{!4, !"_ZNK4absl18container_internal12raw_hash_setINS0_17FlatHashSetPolicyIjEENS_13hash_internal4HashIjEENSt3__18equal_toIjEENS7_9allocatorIjEEE19EmplaceDecomposableclIjJRKjEEENS7_4pairINSC_8iteratorEbEERKT_DpOT0_"}
!5 = distinct !{!5, !6, !"_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashSetPolicyIjEENS_13hash_internal4HashIjEENSt3__18equal_toIjEENS7_9allocatorIjEEE7emplaceIJRKjELi0EEENS7_4pairINSC_8iteratorEbEEDpOT_: argument 0"}
!6 = distinct !{!6, !"_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashSetPolicyIjEENS_13hash_internal4HashIjEENSt3__18equal_toIjEENS7_9allocatorIjEEE7emplaceIJRKjELi0EEENS7_4pairINSC_8iteratorEbEEDpOT_"}
!7 = distinct !{!7, !8, !"_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashSetPolicyIjEENS_13hash_internal4HashIjEENSt3__18equal_toIjEENS7_9allocatorIjEEE6insertIjLi0ELi0EEENS7_4pairINSC_8iteratorEbEERKT_: argument 0"}
!8 = distinct !{!8, !"_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashSetPolicyIjEENS_13hash_internal4HashIjEENSt3__18equal_toIjEENS7_9allocatorIjEEE6insertIjLi0ELi0EEENS7_4pairINSC_8iteratorEbEERKT_"}
!9 = !{i32 0, i32 33}
!10 = !{!"branch_weights", i32 2000, i32 1}
!11 = !{!"branch_weights", i32 1, i32 2000}
