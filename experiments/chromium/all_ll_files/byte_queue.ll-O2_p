; ModuleID = '../../media/base/byte_queue.cc'
source_filename = "../../media/base/byte_queue.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.media::ByteQueue" = type { i64, i64, i32, %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }

@_ZN5media9ByteQueueC1Ev = hidden unnamed_addr alias void (%"class.media::ByteQueue"*), void (%"class.media::ByteQueue"*)* @_ZN5media9ByteQueueC2Ev
@_ZN5media9ByteQueueD1Ev = hidden unnamed_addr alias void (%"class.media::ByteQueue"*), void (%"class.media::ByteQueue"*)* @_ZN5media9ByteQueueD2Ev

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @_ZN5media9ByteQueueC2Ev(%"class.media::ByteQueue"* nocapture) unnamed_addr #0 align 2 {
  %2 = bitcast %"class.media::ByteQueue"* %0 to <2 x i64>*
  store <2 x i64> <i64 1024, i64 0>, <2 x i64>* %2, align 8
  %3 = getelementptr inbounds %"class.media::ByteQueue", %"class.media::ByteQueue"* %0, i64 0, i32 2
  store i32 0, i32* %3, align 8
  %4 = getelementptr inbounds %"class.media::ByteQueue", %"class.media::ByteQueue"* %0, i64 0, i32 3
  %5 = tail call i8* @_Znam(i64 1024) #10
  %6 = ptrtoint i8* %5 to i64
  %7 = bitcast %"class.std::__1::unique_ptr"* %4 to i64*
  store i64 %6, i64* %7, align 8
  ret void
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znam(i64) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5media9ByteQueueD2Ev(%"class.media::ByteQueue"* nocapture) unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.media::ByteQueue", %"class.media::ByteQueue"* %0, i64 0, i32 3, i32 0, i32 0, i32 0
  %3 = load i8*, i8** %2, align 8
  store i8* null, i8** %2, align 8
  %4 = icmp eq i8* %3, null
  br i1 %4, label %6, label %5

5:                                                ; preds = %1
  tail call void @_ZdaPv(i8* nonnull %3) #10
  br label %6

6:                                                ; preds = %1, %5
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN5media9ByteQueue5ResetEv(%"class.media::ByteQueue"* nocapture) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.media::ByteQueue", %"class.media::ByteQueue"* %0, i64 0, i32 1
  store i64 0, i64* %2, align 8
  %3 = getelementptr inbounds %"class.media::ByteQueue", %"class.media::ByteQueue"* %0, i64 0, i32 2
  store i32 0, i32* %3, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5media9ByteQueue4PushEPKhi(%"class.media::ByteQueue"* nocapture, i8* nocapture readonly, i32) local_unnamed_addr #2 align 2 {
  %4 = getelementptr inbounds %"class.media::ByteQueue", %"class.media::ByteQueue"* %0, i64 0, i32 2
  %5 = load i32, i32* %4, align 8
  %6 = sext i32 %5 to i64
  %7 = sext i32 %2 to i64
  %8 = add nsw i64 %6, %7
  %9 = getelementptr inbounds %"class.media::ByteQueue", %"class.media::ByteQueue"* %0, i64 0, i32 0
  %10 = load i64, i64* %9, align 8
  %11 = icmp ugt i64 %8, %10
  br i1 %11, label %12, label %46

12:                                               ; preds = %3
  %13 = lshr i64 %10, 2
  %14 = tail call { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %10, i64 %13) #11
  %15 = extractvalue { i64, i1 } %14, 1
  %16 = extractvalue { i64, i1 } %14, 0
  br i1 %15, label %17, label %18, !prof !2

17:                                               ; preds = %12
  tail call void @llvm.trap() #11
  unreachable

18:                                               ; preds = %12
  %19 = icmp ult i64 %8, %16
  %20 = select i1 %19, i64 %16, i64 %8
  %21 = icmp sgt i32 %5, 0
  br i1 %21, label %22, label %34

22:                                               ; preds = %18
  %23 = tail call i8* @_Znam(i64 %20) #10
  %24 = ptrtoint i8* %23 to i64
  %25 = getelementptr inbounds %"class.media::ByteQueue", %"class.media::ByteQueue"* %0, i64 0, i32 3, i32 0, i32 0, i32 0
  %26 = load i8*, i8** %25, align 8
  %27 = getelementptr inbounds %"class.media::ByteQueue", %"class.media::ByteQueue"* %0, i64 0, i32 1
  %28 = load i64, i64* %27, align 8
  %29 = getelementptr inbounds i8, i8* %26, i64 %28
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %23, i8* align 1 %29, i64 %6, i1 false)
  %30 = getelementptr inbounds %"class.media::ByteQueue", %"class.media::ByteQueue"* %0, i64 0, i32 3
  %31 = bitcast %"class.std::__1::unique_ptr"* %30 to i64*
  store i64 %24, i64* %31, align 8
  %32 = icmp eq i8* %26, null
  br i1 %32, label %44, label %33

33:                                               ; preds = %22
  tail call void @_ZdaPv(i8* nonnull %26) #10
  br label %44

34:                                               ; preds = %18
  %35 = getelementptr inbounds %"class.media::ByteQueue", %"class.media::ByteQueue"* %0, i64 0, i32 3, i32 0, i32 0, i32 0
  %36 = load i8*, i8** %35, align 8
  store i8* null, i8** %35, align 8
  %37 = icmp eq i8* %36, null
  br i1 %37, label %39, label %38

38:                                               ; preds = %34
  tail call void @_ZdaPv(i8* nonnull %36) #10
  br label %39

39:                                               ; preds = %34, %38
  %40 = tail call i8* @_Znam(i64 %20) #10
  %41 = load i8*, i8** %35, align 8
  store i8* %40, i8** %35, align 8
  %42 = icmp eq i8* %41, null
  br i1 %42, label %44, label %43

43:                                               ; preds = %39
  tail call void @_ZdaPv(i8* nonnull %41) #10
  br label %44

44:                                               ; preds = %43, %39, %22, %33
  store i64 %20, i64* %9, align 8
  %45 = getelementptr inbounds %"class.media::ByteQueue", %"class.media::ByteQueue"* %0, i64 0, i32 1
  br label %55

46:                                               ; preds = %3
  %47 = getelementptr inbounds %"class.media::ByteQueue", %"class.media::ByteQueue"* %0, i64 0, i32 1
  %48 = load i64, i64* %47, align 8
  %49 = add i64 %8, %48
  %50 = icmp ugt i64 %49, %10
  br i1 %50, label %51, label %57

51:                                               ; preds = %46
  %52 = getelementptr inbounds %"class.media::ByteQueue", %"class.media::ByteQueue"* %0, i64 0, i32 3, i32 0, i32 0, i32 0
  %53 = load i8*, i8** %52, align 8
  %54 = getelementptr inbounds i8, i8* %53, i64 %48
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %53, i8* align 1 %54, i64 %6, i1 false)
  br label %55

55:                                               ; preds = %44, %51
  %56 = phi i64* [ %47, %51 ], [ %45, %44 ]
  store i64 0, i64* %56, align 8
  br label %57

57:                                               ; preds = %55, %46
  %58 = phi i64 [ %48, %46 ], [ 0, %55 ]
  %59 = getelementptr inbounds %"class.media::ByteQueue", %"class.media::ByteQueue"* %0, i64 0, i32 3, i32 0, i32 0, i32 0
  %60 = load i8*, i8** %59, align 8
  %61 = getelementptr inbounds i8, i8* %60, i64 %58
  %62 = load i32, i32* %4, align 8
  %63 = sext i32 %62 to i64
  %64 = getelementptr inbounds i8, i8* %61, i64 %63
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %64, i8* align 1 %1, i64 %7, i1 false)
  %65 = load i32, i32* %4, align 8
  %66 = add nsw i32 %65, %2
  store i32 %66, i32* %4, align 8
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i8* @_ZNK5media9ByteQueue5FrontEv(%"class.media::ByteQueue"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.media::ByteQueue", %"class.media::ByteQueue"* %0, i64 0, i32 3, i32 0, i32 0, i32 0
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr inbounds %"class.media::ByteQueue", %"class.media::ByteQueue"* %0, i64 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds i8, i8* %3, i64 %5
  ret i8* %6
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #5

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZNK5media9ByteQueue4PeekEPPKhPi(%"class.media::ByteQueue"* nocapture readonly, i8** nocapture, i32* nocapture) local_unnamed_addr #6 align 2 {
  %4 = getelementptr inbounds %"class.media::ByteQueue", %"class.media::ByteQueue"* %0, i64 0, i32 3, i32 0, i32 0, i32 0
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds %"class.media::ByteQueue", %"class.media::ByteQueue"* %0, i64 0, i32 1
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds i8, i8* %5, i64 %7
  store i8* %8, i8** %1, align 8
  %9 = getelementptr inbounds %"class.media::ByteQueue", %"class.media::ByteQueue"* %0, i64 0, i32 2
  %10 = load i32, i32* %9, align 8
  store i32 %10, i32* %2, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5media9ByteQueue3PopEi(%"class.media::ByteQueue"* nocapture, i32) local_unnamed_addr #6 align 2 {
  %3 = sext i32 %1 to i64
  %4 = getelementptr inbounds %"class.media::ByteQueue", %"class.media::ByteQueue"* %0, i64 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = add i64 %5, %3
  store i64 %6, i64* %4, align 8
  %7 = getelementptr inbounds %"class.media::ByteQueue", %"class.media::ByteQueue"* %0, i64 0, i32 2
  %8 = load i32, i32* %7, align 8
  %9 = sub nsw i32 %8, %1
  store i32 %9, i32* %7, align 8
  %10 = getelementptr inbounds %"class.media::ByteQueue", %"class.media::ByteQueue"* %0, i64 0, i32 0
  %11 = load i64, i64* %10, align 8
  %12 = icmp eq i64 %6, %11
  br i1 %12, label %13, label %14

13:                                               ; preds = %2
  store i64 0, i64* %4, align 8
  br label %14

14:                                               ; preds = %13, %2
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.uadd.with.overflow.i64(i64, i64) #7

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #8

; Function Attrs: nobuiltin nounwind
declare void @_ZdaPv(i8*) local_unnamed_addr #9

attributes #0 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nounwind }
attributes #6 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readnone speculatable }
attributes #8 = { cold noreturn nounwind }
attributes #9 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { builtin nounwind }
attributes #11 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
