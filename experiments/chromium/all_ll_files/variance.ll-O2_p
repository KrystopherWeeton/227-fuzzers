; ModuleID = '../../third_party/libvpx/source/libvpx/vpx_dsp/variance.c'
source_filename = "../../third_party/libvpx/source/libvpx/vpx_dsp/variance.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@bilinear_filters = internal unnamed_addr constant [8 x [2 x i8]] [[2 x i8] c"\80\00", [2 x i8] c"p\10", [2 x i8] c"` ", [2 x i8] c"P0", [2 x i8] c"@@", [2 x i8] c"0P", [2 x i8] c" `", [2 x i8] c"\10p"], align 16

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @vpx_get4x4sse_cs_c(i8* nocapture readonly, i32, i8* nocapture readonly, i32) local_unnamed_addr #0 {
  %5 = sext i32 %1 to i64
  %6 = sext i32 %3 to i64
  %7 = load i8, i8* %0, align 1
  %8 = zext i8 %7 to i32
  %9 = load i8, i8* %2, align 1
  %10 = zext i8 %9 to i32
  %11 = sub nsw i32 %8, %10
  %12 = mul nsw i32 %11, %11
  %13 = getelementptr inbounds i8, i8* %0, i64 1
  %14 = load i8, i8* %13, align 1
  %15 = zext i8 %14 to i32
  %16 = getelementptr inbounds i8, i8* %2, i64 1
  %17 = load i8, i8* %16, align 1
  %18 = zext i8 %17 to i32
  %19 = sub nsw i32 %15, %18
  %20 = mul nsw i32 %19, %19
  %21 = add nuw nsw i32 %20, %12
  %22 = getelementptr inbounds i8, i8* %0, i64 2
  %23 = load i8, i8* %22, align 1
  %24 = zext i8 %23 to i32
  %25 = getelementptr inbounds i8, i8* %2, i64 2
  %26 = load i8, i8* %25, align 1
  %27 = zext i8 %26 to i32
  %28 = sub nsw i32 %24, %27
  %29 = mul nsw i32 %28, %28
  %30 = add nuw nsw i32 %29, %21
  %31 = getelementptr inbounds i8, i8* %0, i64 3
  %32 = load i8, i8* %31, align 1
  %33 = zext i8 %32 to i32
  %34 = getelementptr inbounds i8, i8* %2, i64 3
  %35 = load i8, i8* %34, align 1
  %36 = zext i8 %35 to i32
  %37 = sub nsw i32 %33, %36
  %38 = mul nsw i32 %37, %37
  %39 = add nuw nsw i32 %38, %30
  %40 = getelementptr inbounds i8, i8* %0, i64 %5
  %41 = getelementptr inbounds i8, i8* %2, i64 %6
  %42 = load i8, i8* %40, align 1
  %43 = zext i8 %42 to i32
  %44 = load i8, i8* %41, align 1
  %45 = zext i8 %44 to i32
  %46 = sub nsw i32 %43, %45
  %47 = mul nsw i32 %46, %46
  %48 = add nuw nsw i32 %47, %39
  %49 = getelementptr inbounds i8, i8* %40, i64 1
  %50 = load i8, i8* %49, align 1
  %51 = zext i8 %50 to i32
  %52 = getelementptr inbounds i8, i8* %41, i64 1
  %53 = load i8, i8* %52, align 1
  %54 = zext i8 %53 to i32
  %55 = sub nsw i32 %51, %54
  %56 = mul nsw i32 %55, %55
  %57 = add nuw nsw i32 %56, %48
  %58 = getelementptr inbounds i8, i8* %40, i64 2
  %59 = load i8, i8* %58, align 1
  %60 = zext i8 %59 to i32
  %61 = getelementptr inbounds i8, i8* %41, i64 2
  %62 = load i8, i8* %61, align 1
  %63 = zext i8 %62 to i32
  %64 = sub nsw i32 %60, %63
  %65 = mul nsw i32 %64, %64
  %66 = add nuw nsw i32 %65, %57
  %67 = getelementptr inbounds i8, i8* %40, i64 3
  %68 = load i8, i8* %67, align 1
  %69 = zext i8 %68 to i32
  %70 = getelementptr inbounds i8, i8* %41, i64 3
  %71 = load i8, i8* %70, align 1
  %72 = zext i8 %71 to i32
  %73 = sub nsw i32 %69, %72
  %74 = mul nsw i32 %73, %73
  %75 = add nsw i32 %74, %66
  %76 = getelementptr inbounds i8, i8* %40, i64 %5
  %77 = getelementptr inbounds i8, i8* %41, i64 %6
  %78 = load i8, i8* %76, align 1
  %79 = zext i8 %78 to i32
  %80 = load i8, i8* %77, align 1
  %81 = zext i8 %80 to i32
  %82 = sub nsw i32 %79, %81
  %83 = mul nsw i32 %82, %82
  %84 = add nsw i32 %83, %75
  %85 = getelementptr inbounds i8, i8* %76, i64 1
  %86 = load i8, i8* %85, align 1
  %87 = zext i8 %86 to i32
  %88 = getelementptr inbounds i8, i8* %77, i64 1
  %89 = load i8, i8* %88, align 1
  %90 = zext i8 %89 to i32
  %91 = sub nsw i32 %87, %90
  %92 = mul nsw i32 %91, %91
  %93 = add nsw i32 %92, %84
  %94 = getelementptr inbounds i8, i8* %76, i64 2
  %95 = load i8, i8* %94, align 1
  %96 = zext i8 %95 to i32
  %97 = getelementptr inbounds i8, i8* %77, i64 2
  %98 = load i8, i8* %97, align 1
  %99 = zext i8 %98 to i32
  %100 = sub nsw i32 %96, %99
  %101 = mul nsw i32 %100, %100
  %102 = add nsw i32 %101, %93
  %103 = getelementptr inbounds i8, i8* %76, i64 3
  %104 = load i8, i8* %103, align 1
  %105 = zext i8 %104 to i32
  %106 = getelementptr inbounds i8, i8* %77, i64 3
  %107 = load i8, i8* %106, align 1
  %108 = zext i8 %107 to i32
  %109 = sub nsw i32 %105, %108
  %110 = mul nsw i32 %109, %109
  %111 = add nsw i32 %110, %102
  %112 = getelementptr inbounds i8, i8* %76, i64 %5
  %113 = getelementptr inbounds i8, i8* %77, i64 %6
  %114 = load i8, i8* %112, align 1
  %115 = zext i8 %114 to i32
  %116 = load i8, i8* %113, align 1
  %117 = zext i8 %116 to i32
  %118 = sub nsw i32 %115, %117
  %119 = mul nsw i32 %118, %118
  %120 = add nsw i32 %119, %111
  %121 = getelementptr inbounds i8, i8* %112, i64 1
  %122 = load i8, i8* %121, align 1
  %123 = zext i8 %122 to i32
  %124 = getelementptr inbounds i8, i8* %113, i64 1
  %125 = load i8, i8* %124, align 1
  %126 = zext i8 %125 to i32
  %127 = sub nsw i32 %123, %126
  %128 = mul nsw i32 %127, %127
  %129 = add nsw i32 %128, %120
  %130 = getelementptr inbounds i8, i8* %112, i64 2
  %131 = load i8, i8* %130, align 1
  %132 = zext i8 %131 to i32
  %133 = getelementptr inbounds i8, i8* %113, i64 2
  %134 = load i8, i8* %133, align 1
  %135 = zext i8 %134 to i32
  %136 = sub nsw i32 %132, %135
  %137 = mul nsw i32 %136, %136
  %138 = add nsw i32 %137, %129
  %139 = getelementptr inbounds i8, i8* %112, i64 3
  %140 = load i8, i8* %139, align 1
  %141 = zext i8 %140 to i32
  %142 = getelementptr inbounds i8, i8* %113, i64 3
  %143 = load i8, i8* %142, align 1
  %144 = zext i8 %143 to i32
  %145 = sub nsw i32 %141, %144
  %146 = mul nsw i32 %145, %145
  %147 = add nsw i32 %146, %138
  ret i32 %147
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @vpx_get_mb_ss_c(i16* nocapture readonly) local_unnamed_addr #0 {
  br label %2

2:                                                ; preds = %2, %1
  %3 = phi i64 [ 0, %1 ], [ %31, %2 ]
  %4 = phi <4 x i32> [ zeroinitializer, %1 ], [ %29, %2 ]
  %5 = phi <4 x i32> [ zeroinitializer, %1 ], [ %30, %2 ]
  %6 = getelementptr inbounds i16, i16* %0, i64 %3
  %7 = bitcast i16* %6 to <4 x i16>*
  %8 = load <4 x i16>, <4 x i16>* %7, align 2
  %9 = getelementptr inbounds i16, i16* %6, i64 4
  %10 = bitcast i16* %9 to <4 x i16>*
  %11 = load <4 x i16>, <4 x i16>* %10, align 2
  %12 = sext <4 x i16> %8 to <4 x i32>
  %13 = sext <4 x i16> %11 to <4 x i32>
  %14 = mul nsw <4 x i32> %12, %12
  %15 = mul nsw <4 x i32> %13, %13
  %16 = add <4 x i32> %14, %4
  %17 = add <4 x i32> %15, %5
  %18 = or i64 %3, 8
  %19 = getelementptr inbounds i16, i16* %0, i64 %18
  %20 = bitcast i16* %19 to <4 x i16>*
  %21 = load <4 x i16>, <4 x i16>* %20, align 2
  %22 = getelementptr inbounds i16, i16* %19, i64 4
  %23 = bitcast i16* %22 to <4 x i16>*
  %24 = load <4 x i16>, <4 x i16>* %23, align 2
  %25 = sext <4 x i16> %21 to <4 x i32>
  %26 = sext <4 x i16> %24 to <4 x i32>
  %27 = mul nsw <4 x i32> %25, %25
  %28 = mul nsw <4 x i32> %26, %26
  %29 = add <4 x i32> %27, %16
  %30 = add <4 x i32> %28, %17
  %31 = add nuw nsw i64 %3, 16
  %32 = icmp eq i64 %31, 256
  br i1 %32, label %33, label %2, !llvm.loop !2

33:                                               ; preds = %2
  %34 = add <4 x i32> %30, %29
  %35 = shufflevector <4 x i32> %34, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %36 = add <4 x i32> %34, %35
  %37 = shufflevector <4 x i32> %36, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %38 = add <4 x i32> %36, %37
  %39 = extractelement <4 x i32> %38, i32 0
  ret i32 %39
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_variance64x64_c(i8* nocapture readonly, i32, i8* nocapture readonly, i32, i32* nocapture) local_unnamed_addr #2 {
  store i32 0, i32* %4, align 4
  %6 = sext i32 %1 to i64
  %7 = sext i32 %3 to i64
  br label %8

8:                                                ; preds = %41, %5
  %9 = phi i32 [ 0, %5 ], [ %38, %41 ]
  %10 = phi i32 [ 0, %5 ], [ %36, %41 ]
  %11 = phi i8* [ %0, %5 ], [ %42, %41 ]
  %12 = phi i32 [ 0, %5 ], [ %44, %41 ]
  %13 = phi i8* [ %2, %5 ], [ %43, %41 ]
  br label %14

14:                                               ; preds = %14, %8
  %15 = phi i32 [ %9, %8 ], [ %38, %14 ]
  %16 = phi i32 [ %10, %8 ], [ %36, %14 ]
  %17 = phi i64 [ 0, %8 ], [ %39, %14 ]
  %18 = getelementptr inbounds i8, i8* %11, i64 %17
  %19 = load i8, i8* %18, align 1
  %20 = zext i8 %19 to i32
  %21 = getelementptr inbounds i8, i8* %13, i64 %17
  %22 = load i8, i8* %21, align 1
  %23 = zext i8 %22 to i32
  %24 = sub nsw i32 %20, %23
  %25 = add nsw i32 %24, %16
  %26 = mul nsw i32 %24, %24
  %27 = add i32 %26, %15
  store i32 %27, i32* %4, align 4
  %28 = or i64 %17, 1
  %29 = getelementptr inbounds i8, i8* %11, i64 %28
  %30 = load i8, i8* %29, align 1
  %31 = zext i8 %30 to i32
  %32 = getelementptr inbounds i8, i8* %13, i64 %28
  %33 = load i8, i8* %32, align 1
  %34 = zext i8 %33 to i32
  %35 = sub nsw i32 %31, %34
  %36 = add nsw i32 %35, %25
  %37 = mul nsw i32 %35, %35
  %38 = add i32 %37, %27
  store i32 %38, i32* %4, align 4
  %39 = add nuw nsw i64 %17, 2
  %40 = icmp eq i64 %39, 64
  br i1 %40, label %41, label %14

41:                                               ; preds = %14
  %42 = getelementptr inbounds i8, i8* %11, i64 %6
  %43 = getelementptr inbounds i8, i8* %13, i64 %7
  %44 = add nuw nsw i32 %12, 1
  %45 = icmp eq i32 %44, 64
  br i1 %45, label %46, label %8

46:                                               ; preds = %41
  %47 = sext i32 %36 to i64
  %48 = mul nsw i64 %47, %47
  %49 = lshr i64 %48, 12
  %50 = trunc i64 %49 to i32
  %51 = sub i32 %38, %50
  ret i32 %51
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_sub_pixel_variance64x64_c(i8* nocapture readonly, i32, i32, i32, i8* nocapture readonly, i32, i32* nocapture) local_unnamed_addr #2 {
  %8 = alloca [4160 x i16], align 16
  %9 = alloca [4096 x i8], align 16
  %10 = bitcast [4160 x i16]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8320, i8* nonnull %10) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %10, i8 -86, i64 8320, i1 false)
  %11 = getelementptr inbounds [4096 x i8], [4096 x i8]* %9, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 4096, i8* nonnull %11) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %11, i8 -86, i64 4096, i1 false)
  %12 = getelementptr inbounds [4160 x i16], [4160 x i16]* %8, i64 0, i64 0
  %13 = sext i32 %2 to i64
  %14 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %13, i64 0
  %15 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %13, i64 1
  %16 = add i32 %1, -64
  %17 = zext i32 %16 to i64
  %18 = load i8, i8* %14, align 2
  %19 = zext i8 %18 to i32
  %20 = load i8, i8* %15, align 1
  %21 = zext i8 %20 to i32
  %22 = insertelement <8 x i32> undef, i32 %19, i32 0
  %23 = shufflevector <8 x i32> %22, <8 x i32> undef, <8 x i32> zeroinitializer
  %24 = insertelement <8 x i32> undef, i32 %21, i32 0
  %25 = shufflevector <8 x i32> %24, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %26

26:                                               ; preds = %199, %7
  %27 = phi i64 [ %205, %199 ], [ 0, %7 ]
  %28 = phi i32 [ %203, %199 ], [ 0, %7 ]
  %29 = phi i8* [ %201, %199 ], [ %0, %7 ]
  %30 = phi i16* [ %202, %199 ], [ %12, %7 ]
  %31 = shl nuw nsw i64 %27, 6
  %32 = add i64 %31, 64
  %33 = getelementptr [4160 x i16], [4160 x i16]* %8, i64 0, i64 %32
  %34 = bitcast i16* %33 to i8*
  %35 = getelementptr [4160 x i16], [4160 x i16]* %8, i64 0, i64 %31
  %36 = bitcast i16* %35 to i8*
  %37 = getelementptr i8, i8* %29, i64 65
  %38 = icmp ugt i8* %37, %36
  %39 = icmp ult i8* %29, %34
  %40 = and i1 %38, %39
  br i1 %40, label %169, label %41

41:                                               ; preds = %26
  %42 = getelementptr i8, i8* %29, i64 64
  %43 = bitcast i8* %29 to <8 x i8>*
  %44 = load <8 x i8>, <8 x i8>* %43, align 1, !alias.scope !4
  %45 = zext <8 x i8> %44 to <8 x i32>
  %46 = mul nuw nsw <8 x i32> %23, %45
  %47 = getelementptr inbounds i8, i8* %29, i64 1
  %48 = bitcast i8* %47 to <8 x i8>*
  %49 = load <8 x i8>, <8 x i8>* %48, align 1, !alias.scope !4
  %50 = zext <8 x i8> %49 to <8 x i32>
  %51 = mul nuw nsw <8 x i32> %25, %50
  %52 = add nuw nsw <8 x i32> %46, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %53 = add nuw nsw <8 x i32> %52, %51
  %54 = lshr <8 x i32> %53, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %55 = trunc <8 x i32> %54 to <8 x i16>
  %56 = bitcast i16* %30 to <8 x i16>*
  store <8 x i16> %55, <8 x i16>* %56, align 2, !alias.scope !7, !noalias !4
  %57 = getelementptr i8, i8* %29, i64 8
  %58 = bitcast i8* %57 to <8 x i8>*
  %59 = load <8 x i8>, <8 x i8>* %58, align 1, !alias.scope !4
  %60 = zext <8 x i8> %59 to <8 x i32>
  %61 = mul nuw nsw <8 x i32> %23, %60
  %62 = getelementptr inbounds i8, i8* %29, i64 9
  %63 = bitcast i8* %62 to <8 x i8>*
  %64 = load <8 x i8>, <8 x i8>* %63, align 1, !alias.scope !4
  %65 = zext <8 x i8> %64 to <8 x i32>
  %66 = mul nuw nsw <8 x i32> %25, %65
  %67 = add nuw nsw <8 x i32> %61, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %68 = add nuw nsw <8 x i32> %67, %66
  %69 = lshr <8 x i32> %68, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %70 = trunc <8 x i32> %69 to <8 x i16>
  %71 = getelementptr inbounds i16, i16* %30, i64 8
  %72 = bitcast i16* %71 to <8 x i16>*
  store <8 x i16> %70, <8 x i16>* %72, align 2, !alias.scope !7, !noalias !4
  %73 = getelementptr i8, i8* %29, i64 16
  %74 = bitcast i8* %73 to <8 x i8>*
  %75 = load <8 x i8>, <8 x i8>* %74, align 1, !alias.scope !4
  %76 = zext <8 x i8> %75 to <8 x i32>
  %77 = mul nuw nsw <8 x i32> %23, %76
  %78 = getelementptr inbounds i8, i8* %29, i64 17
  %79 = bitcast i8* %78 to <8 x i8>*
  %80 = load <8 x i8>, <8 x i8>* %79, align 1, !alias.scope !4
  %81 = zext <8 x i8> %80 to <8 x i32>
  %82 = mul nuw nsw <8 x i32> %25, %81
  %83 = add nuw nsw <8 x i32> %77, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %84 = add nuw nsw <8 x i32> %83, %82
  %85 = lshr <8 x i32> %84, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %86 = trunc <8 x i32> %85 to <8 x i16>
  %87 = getelementptr inbounds i16, i16* %30, i64 16
  %88 = bitcast i16* %87 to <8 x i16>*
  store <8 x i16> %86, <8 x i16>* %88, align 2, !alias.scope !7, !noalias !4
  %89 = getelementptr i8, i8* %29, i64 24
  %90 = bitcast i8* %89 to <8 x i8>*
  %91 = load <8 x i8>, <8 x i8>* %90, align 1, !alias.scope !4
  %92 = zext <8 x i8> %91 to <8 x i32>
  %93 = mul nuw nsw <8 x i32> %23, %92
  %94 = getelementptr inbounds i8, i8* %29, i64 25
  %95 = bitcast i8* %94 to <8 x i8>*
  %96 = load <8 x i8>, <8 x i8>* %95, align 1, !alias.scope !4
  %97 = zext <8 x i8> %96 to <8 x i32>
  %98 = mul nuw nsw <8 x i32> %25, %97
  %99 = add nuw nsw <8 x i32> %93, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %100 = add nuw nsw <8 x i32> %99, %98
  %101 = lshr <8 x i32> %100, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %102 = trunc <8 x i32> %101 to <8 x i16>
  %103 = getelementptr inbounds i16, i16* %30, i64 24
  %104 = bitcast i16* %103 to <8 x i16>*
  store <8 x i16> %102, <8 x i16>* %104, align 2, !alias.scope !7, !noalias !4
  %105 = getelementptr i8, i8* %29, i64 32
  %106 = bitcast i8* %105 to <8 x i8>*
  %107 = load <8 x i8>, <8 x i8>* %106, align 1, !alias.scope !4
  %108 = zext <8 x i8> %107 to <8 x i32>
  %109 = mul nuw nsw <8 x i32> %23, %108
  %110 = getelementptr inbounds i8, i8* %29, i64 33
  %111 = bitcast i8* %110 to <8 x i8>*
  %112 = load <8 x i8>, <8 x i8>* %111, align 1, !alias.scope !4
  %113 = zext <8 x i8> %112 to <8 x i32>
  %114 = mul nuw nsw <8 x i32> %25, %113
  %115 = add nuw nsw <8 x i32> %109, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %116 = add nuw nsw <8 x i32> %115, %114
  %117 = lshr <8 x i32> %116, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %118 = trunc <8 x i32> %117 to <8 x i16>
  %119 = getelementptr inbounds i16, i16* %30, i64 32
  %120 = bitcast i16* %119 to <8 x i16>*
  store <8 x i16> %118, <8 x i16>* %120, align 2, !alias.scope !7, !noalias !4
  %121 = getelementptr i8, i8* %29, i64 40
  %122 = bitcast i8* %121 to <8 x i8>*
  %123 = load <8 x i8>, <8 x i8>* %122, align 1, !alias.scope !4
  %124 = zext <8 x i8> %123 to <8 x i32>
  %125 = mul nuw nsw <8 x i32> %23, %124
  %126 = getelementptr inbounds i8, i8* %29, i64 41
  %127 = bitcast i8* %126 to <8 x i8>*
  %128 = load <8 x i8>, <8 x i8>* %127, align 1, !alias.scope !4
  %129 = zext <8 x i8> %128 to <8 x i32>
  %130 = mul nuw nsw <8 x i32> %25, %129
  %131 = add nuw nsw <8 x i32> %125, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %132 = add nuw nsw <8 x i32> %131, %130
  %133 = lshr <8 x i32> %132, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %134 = trunc <8 x i32> %133 to <8 x i16>
  %135 = getelementptr inbounds i16, i16* %30, i64 40
  %136 = bitcast i16* %135 to <8 x i16>*
  store <8 x i16> %134, <8 x i16>* %136, align 2, !alias.scope !7, !noalias !4
  %137 = getelementptr i8, i8* %29, i64 48
  %138 = bitcast i8* %137 to <8 x i8>*
  %139 = load <8 x i8>, <8 x i8>* %138, align 1, !alias.scope !4
  %140 = zext <8 x i8> %139 to <8 x i32>
  %141 = mul nuw nsw <8 x i32> %23, %140
  %142 = getelementptr inbounds i8, i8* %29, i64 49
  %143 = bitcast i8* %142 to <8 x i8>*
  %144 = load <8 x i8>, <8 x i8>* %143, align 1, !alias.scope !4
  %145 = zext <8 x i8> %144 to <8 x i32>
  %146 = mul nuw nsw <8 x i32> %25, %145
  %147 = add nuw nsw <8 x i32> %141, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %148 = add nuw nsw <8 x i32> %147, %146
  %149 = lshr <8 x i32> %148, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %150 = trunc <8 x i32> %149 to <8 x i16>
  %151 = getelementptr inbounds i16, i16* %30, i64 48
  %152 = bitcast i16* %151 to <8 x i16>*
  store <8 x i16> %150, <8 x i16>* %152, align 2, !alias.scope !7, !noalias !4
  %153 = getelementptr i8, i8* %29, i64 56
  %154 = bitcast i8* %153 to <8 x i8>*
  %155 = load <8 x i8>, <8 x i8>* %154, align 1, !alias.scope !4
  %156 = zext <8 x i8> %155 to <8 x i32>
  %157 = mul nuw nsw <8 x i32> %23, %156
  %158 = getelementptr inbounds i8, i8* %29, i64 57
  %159 = bitcast i8* %158 to <8 x i8>*
  %160 = load <8 x i8>, <8 x i8>* %159, align 1, !alias.scope !4
  %161 = zext <8 x i8> %160 to <8 x i32>
  %162 = mul nuw nsw <8 x i32> %25, %161
  %163 = add nuw nsw <8 x i32> %157, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %164 = add nuw nsw <8 x i32> %163, %162
  %165 = lshr <8 x i32> %164, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %166 = trunc <8 x i32> %165 to <8 x i16>
  %167 = getelementptr inbounds i16, i16* %30, i64 56
  %168 = bitcast i16* %167 to <8 x i16>*
  store <8 x i16> %166, <8 x i16>* %168, align 2, !alias.scope !7, !noalias !4
  br label %199

169:                                              ; preds = %26, %169
  %170 = phi i64 [ %197, %169 ], [ 0, %26 ]
  %171 = phi i8* [ %188, %169 ], [ %29, %26 ]
  %172 = load i8, i8* %171, align 1
  %173 = zext i8 %172 to i32
  %174 = mul nuw nsw i32 %19, %173
  %175 = getelementptr inbounds i8, i8* %171, i64 1
  %176 = load i8, i8* %175, align 1
  %177 = zext i8 %176 to i32
  %178 = mul nuw nsw i32 %21, %177
  %179 = add nuw nsw i32 %174, 64
  %180 = add nuw nsw i32 %179, %178
  %181 = lshr i32 %180, 7
  %182 = trunc i32 %181 to i16
  %183 = getelementptr inbounds i16, i16* %30, i64 %170
  store i16 %182, i16* %183, align 2
  %184 = or i64 %170, 1
  %185 = load i8, i8* %175, align 1
  %186 = zext i8 %185 to i32
  %187 = mul nuw nsw i32 %19, %186
  %188 = getelementptr inbounds i8, i8* %171, i64 2
  %189 = load i8, i8* %188, align 1
  %190 = zext i8 %189 to i32
  %191 = mul nuw nsw i32 %21, %190
  %192 = add nuw nsw i32 %187, 64
  %193 = add nuw nsw i32 %192, %191
  %194 = lshr i32 %193, 7
  %195 = trunc i32 %194 to i16
  %196 = getelementptr inbounds i16, i16* %30, i64 %184
  store i16 %195, i16* %196, align 2
  %197 = add nuw nsw i64 %170, 2
  %198 = icmp eq i64 %197, 64
  br i1 %198, label %199, label %169, !llvm.loop !9

199:                                              ; preds = %169, %41
  %200 = phi i8* [ %42, %41 ], [ %188, %169 ]
  %201 = getelementptr inbounds i8, i8* %200, i64 %17
  %202 = getelementptr inbounds i16, i16* %30, i64 64
  %203 = add nuw nsw i32 %28, 1
  %204 = icmp eq i32 %203, 65
  %205 = add i64 %27, 1
  br i1 %204, label %206, label %26

206:                                              ; preds = %199
  %207 = sext i32 %3 to i64
  %208 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %207, i64 0
  %209 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %207, i64 1
  %210 = load i8, i8* %208, align 2
  %211 = zext i8 %210 to i32
  %212 = load i8, i8* %209, align 1
  %213 = zext i8 %212 to i32
  %214 = insertelement <8 x i32> undef, i32 %211, i32 0
  %215 = shufflevector <8 x i32> %214, <8 x i32> undef, <8 x i32> zeroinitializer
  %216 = insertelement <8 x i32> undef, i32 %213, i32 0
  %217 = shufflevector <8 x i32> %216, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %218

218:                                              ; preds = %393, %206
  %219 = phi i64 [ %398, %393 ], [ 0, %206 ]
  %220 = phi i32 [ %396, %393 ], [ 0, %206 ]
  %221 = phi i16* [ %394, %393 ], [ %12, %206 ]
  %222 = phi i8* [ %395, %393 ], [ %11, %206 ]
  %223 = shl nuw nsw i64 %219, 6
  %224 = add i64 %223, 64
  %225 = getelementptr [4096 x i8], [4096 x i8]* %9, i64 0, i64 %224
  %226 = getelementptr [4096 x i8], [4096 x i8]* %9, i64 0, i64 %223
  %227 = bitcast i16* %221 to i8*
  %228 = getelementptr i16, i16* %221, i64 128
  %229 = bitcast i16* %228 to i8*
  %230 = icmp ult i8* %226, %229
  %231 = icmp ugt i8* %225, %227
  %232 = and i1 %230, %231
  br i1 %232, label %361, label %233

233:                                              ; preds = %218
  %234 = getelementptr i16, i16* %221, i64 64
  %235 = bitcast i16* %221 to <8 x i16>*
  %236 = load <8 x i16>, <8 x i16>* %235, align 2, !alias.scope !10
  %237 = zext <8 x i16> %236 to <8 x i32>
  %238 = mul nuw nsw <8 x i32> %215, %237
  %239 = getelementptr inbounds i16, i16* %221, i64 64
  %240 = bitcast i16* %239 to <8 x i16>*
  %241 = load <8 x i16>, <8 x i16>* %240, align 2, !alias.scope !10
  %242 = zext <8 x i16> %241 to <8 x i32>
  %243 = mul nuw nsw <8 x i32> %217, %242
  %244 = add nuw nsw <8 x i32> %238, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %245 = add nuw nsw <8 x i32> %244, %243
  %246 = lshr <8 x i32> %245, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %247 = trunc <8 x i32> %246 to <8 x i8>
  %248 = bitcast i8* %222 to <8 x i8>*
  store <8 x i8> %247, <8 x i8>* %248, align 1, !alias.scope !13, !noalias !10
  %249 = getelementptr i16, i16* %221, i64 8
  %250 = bitcast i16* %249 to <8 x i16>*
  %251 = load <8 x i16>, <8 x i16>* %250, align 2, !alias.scope !10
  %252 = zext <8 x i16> %251 to <8 x i32>
  %253 = mul nuw nsw <8 x i32> %215, %252
  %254 = getelementptr inbounds i16, i16* %221, i64 72
  %255 = bitcast i16* %254 to <8 x i16>*
  %256 = load <8 x i16>, <8 x i16>* %255, align 2, !alias.scope !10
  %257 = zext <8 x i16> %256 to <8 x i32>
  %258 = mul nuw nsw <8 x i32> %217, %257
  %259 = add nuw nsw <8 x i32> %253, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %260 = add nuw nsw <8 x i32> %259, %258
  %261 = lshr <8 x i32> %260, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %262 = trunc <8 x i32> %261 to <8 x i8>
  %263 = getelementptr inbounds i8, i8* %222, i64 8
  %264 = bitcast i8* %263 to <8 x i8>*
  store <8 x i8> %262, <8 x i8>* %264, align 1, !alias.scope !13, !noalias !10
  %265 = getelementptr i16, i16* %221, i64 16
  %266 = bitcast i16* %265 to <8 x i16>*
  %267 = load <8 x i16>, <8 x i16>* %266, align 2, !alias.scope !10
  %268 = zext <8 x i16> %267 to <8 x i32>
  %269 = mul nuw nsw <8 x i32> %215, %268
  %270 = getelementptr inbounds i16, i16* %221, i64 80
  %271 = bitcast i16* %270 to <8 x i16>*
  %272 = load <8 x i16>, <8 x i16>* %271, align 2, !alias.scope !10
  %273 = zext <8 x i16> %272 to <8 x i32>
  %274 = mul nuw nsw <8 x i32> %217, %273
  %275 = add nuw nsw <8 x i32> %269, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %276 = add nuw nsw <8 x i32> %275, %274
  %277 = lshr <8 x i32> %276, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %278 = trunc <8 x i32> %277 to <8 x i8>
  %279 = getelementptr inbounds i8, i8* %222, i64 16
  %280 = bitcast i8* %279 to <8 x i8>*
  store <8 x i8> %278, <8 x i8>* %280, align 1, !alias.scope !13, !noalias !10
  %281 = getelementptr i16, i16* %221, i64 24
  %282 = bitcast i16* %281 to <8 x i16>*
  %283 = load <8 x i16>, <8 x i16>* %282, align 2, !alias.scope !10
  %284 = zext <8 x i16> %283 to <8 x i32>
  %285 = mul nuw nsw <8 x i32> %215, %284
  %286 = getelementptr inbounds i16, i16* %221, i64 88
  %287 = bitcast i16* %286 to <8 x i16>*
  %288 = load <8 x i16>, <8 x i16>* %287, align 2, !alias.scope !10
  %289 = zext <8 x i16> %288 to <8 x i32>
  %290 = mul nuw nsw <8 x i32> %217, %289
  %291 = add nuw nsw <8 x i32> %285, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %292 = add nuw nsw <8 x i32> %291, %290
  %293 = lshr <8 x i32> %292, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %294 = trunc <8 x i32> %293 to <8 x i8>
  %295 = getelementptr inbounds i8, i8* %222, i64 24
  %296 = bitcast i8* %295 to <8 x i8>*
  store <8 x i8> %294, <8 x i8>* %296, align 1, !alias.scope !13, !noalias !10
  %297 = getelementptr i16, i16* %221, i64 32
  %298 = bitcast i16* %297 to <8 x i16>*
  %299 = load <8 x i16>, <8 x i16>* %298, align 2, !alias.scope !10
  %300 = zext <8 x i16> %299 to <8 x i32>
  %301 = mul nuw nsw <8 x i32> %215, %300
  %302 = getelementptr inbounds i16, i16* %221, i64 96
  %303 = bitcast i16* %302 to <8 x i16>*
  %304 = load <8 x i16>, <8 x i16>* %303, align 2, !alias.scope !10
  %305 = zext <8 x i16> %304 to <8 x i32>
  %306 = mul nuw nsw <8 x i32> %217, %305
  %307 = add nuw nsw <8 x i32> %301, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %308 = add nuw nsw <8 x i32> %307, %306
  %309 = lshr <8 x i32> %308, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %310 = trunc <8 x i32> %309 to <8 x i8>
  %311 = getelementptr inbounds i8, i8* %222, i64 32
  %312 = bitcast i8* %311 to <8 x i8>*
  store <8 x i8> %310, <8 x i8>* %312, align 1, !alias.scope !13, !noalias !10
  %313 = getelementptr i16, i16* %221, i64 40
  %314 = bitcast i16* %313 to <8 x i16>*
  %315 = load <8 x i16>, <8 x i16>* %314, align 2, !alias.scope !10
  %316 = zext <8 x i16> %315 to <8 x i32>
  %317 = mul nuw nsw <8 x i32> %215, %316
  %318 = getelementptr inbounds i16, i16* %221, i64 104
  %319 = bitcast i16* %318 to <8 x i16>*
  %320 = load <8 x i16>, <8 x i16>* %319, align 2, !alias.scope !10
  %321 = zext <8 x i16> %320 to <8 x i32>
  %322 = mul nuw nsw <8 x i32> %217, %321
  %323 = add nuw nsw <8 x i32> %317, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %324 = add nuw nsw <8 x i32> %323, %322
  %325 = lshr <8 x i32> %324, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %326 = trunc <8 x i32> %325 to <8 x i8>
  %327 = getelementptr inbounds i8, i8* %222, i64 40
  %328 = bitcast i8* %327 to <8 x i8>*
  store <8 x i8> %326, <8 x i8>* %328, align 1, !alias.scope !13, !noalias !10
  %329 = getelementptr i16, i16* %221, i64 48
  %330 = bitcast i16* %329 to <8 x i16>*
  %331 = load <8 x i16>, <8 x i16>* %330, align 2, !alias.scope !10
  %332 = zext <8 x i16> %331 to <8 x i32>
  %333 = mul nuw nsw <8 x i32> %215, %332
  %334 = getelementptr inbounds i16, i16* %221, i64 112
  %335 = bitcast i16* %334 to <8 x i16>*
  %336 = load <8 x i16>, <8 x i16>* %335, align 2, !alias.scope !10
  %337 = zext <8 x i16> %336 to <8 x i32>
  %338 = mul nuw nsw <8 x i32> %217, %337
  %339 = add nuw nsw <8 x i32> %333, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %340 = add nuw nsw <8 x i32> %339, %338
  %341 = lshr <8 x i32> %340, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %342 = trunc <8 x i32> %341 to <8 x i8>
  %343 = getelementptr inbounds i8, i8* %222, i64 48
  %344 = bitcast i8* %343 to <8 x i8>*
  store <8 x i8> %342, <8 x i8>* %344, align 1, !alias.scope !13, !noalias !10
  %345 = getelementptr i16, i16* %221, i64 56
  %346 = bitcast i16* %345 to <8 x i16>*
  %347 = load <8 x i16>, <8 x i16>* %346, align 2, !alias.scope !10
  %348 = zext <8 x i16> %347 to <8 x i32>
  %349 = mul nuw nsw <8 x i32> %215, %348
  %350 = getelementptr inbounds i16, i16* %221, i64 120
  %351 = bitcast i16* %350 to <8 x i16>*
  %352 = load <8 x i16>, <8 x i16>* %351, align 2, !alias.scope !10
  %353 = zext <8 x i16> %352 to <8 x i32>
  %354 = mul nuw nsw <8 x i32> %217, %353
  %355 = add nuw nsw <8 x i32> %349, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %356 = add nuw nsw <8 x i32> %355, %354
  %357 = lshr <8 x i32> %356, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %358 = trunc <8 x i32> %357 to <8 x i8>
  %359 = getelementptr inbounds i8, i8* %222, i64 56
  %360 = bitcast i8* %359 to <8 x i8>*
  store <8 x i8> %358, <8 x i8>* %360, align 1, !alias.scope !13, !noalias !10
  br label %393

361:                                              ; preds = %218, %361
  %362 = phi i64 [ %391, %361 ], [ 0, %218 ]
  %363 = phi i16* [ %390, %361 ], [ %221, %218 ]
  %364 = load i16, i16* %363, align 2
  %365 = zext i16 %364 to i32
  %366 = mul nuw nsw i32 %211, %365
  %367 = getelementptr inbounds i16, i16* %363, i64 64
  %368 = load i16, i16* %367, align 2
  %369 = zext i16 %368 to i32
  %370 = mul nuw nsw i32 %213, %369
  %371 = add nuw nsw i32 %366, 64
  %372 = add nuw nsw i32 %371, %370
  %373 = lshr i32 %372, 7
  %374 = trunc i32 %373 to i8
  %375 = getelementptr inbounds i8, i8* %222, i64 %362
  store i8 %374, i8* %375, align 1
  %376 = getelementptr inbounds i16, i16* %363, i64 1
  %377 = or i64 %362, 1
  %378 = load i16, i16* %376, align 2
  %379 = zext i16 %378 to i32
  %380 = mul nuw nsw i32 %211, %379
  %381 = getelementptr inbounds i16, i16* %363, i64 65
  %382 = load i16, i16* %381, align 2
  %383 = zext i16 %382 to i32
  %384 = mul nuw nsw i32 %213, %383
  %385 = add nuw nsw i32 %380, 64
  %386 = add nuw nsw i32 %385, %384
  %387 = lshr i32 %386, 7
  %388 = trunc i32 %387 to i8
  %389 = getelementptr inbounds i8, i8* %222, i64 %377
  store i8 %388, i8* %389, align 1
  %390 = getelementptr inbounds i16, i16* %363, i64 2
  %391 = add nuw nsw i64 %362, 2
  %392 = icmp eq i64 %391, 64
  br i1 %392, label %393, label %361, !llvm.loop !15

393:                                              ; preds = %361, %233
  %394 = phi i16* [ %234, %233 ], [ %390, %361 ]
  %395 = getelementptr inbounds i8, i8* %222, i64 64
  %396 = add nuw nsw i32 %220, 1
  %397 = icmp eq i32 %396, 64
  %398 = add i64 %219, 1
  br i1 %397, label %399, label %218

399:                                              ; preds = %393
  store i32 0, i32* %6, align 4
  %400 = sext i32 %5 to i64
  br label %401

401:                                              ; preds = %434, %399
  %402 = phi i32 [ 0, %399 ], [ %431, %434 ]
  %403 = phi i32 [ 0, %399 ], [ %429, %434 ]
  %404 = phi i8* [ %11, %399 ], [ %435, %434 ]
  %405 = phi i32 [ 0, %399 ], [ %437, %434 ]
  %406 = phi i8* [ %4, %399 ], [ %436, %434 ]
  br label %407

407:                                              ; preds = %407, %401
  %408 = phi i32 [ %402, %401 ], [ %431, %407 ]
  %409 = phi i32 [ %403, %401 ], [ %429, %407 ]
  %410 = phi i64 [ 0, %401 ], [ %432, %407 ]
  %411 = getelementptr inbounds i8, i8* %404, i64 %410
  %412 = load i8, i8* %411, align 1
  %413 = zext i8 %412 to i32
  %414 = getelementptr inbounds i8, i8* %406, i64 %410
  %415 = load i8, i8* %414, align 1
  %416 = zext i8 %415 to i32
  %417 = sub nsw i32 %413, %416
  %418 = add nsw i32 %417, %409
  %419 = mul nsw i32 %417, %417
  %420 = add i32 %419, %408
  store i32 %420, i32* %6, align 4
  %421 = or i64 %410, 1
  %422 = getelementptr inbounds i8, i8* %404, i64 %421
  %423 = load i8, i8* %422, align 1
  %424 = zext i8 %423 to i32
  %425 = getelementptr inbounds i8, i8* %406, i64 %421
  %426 = load i8, i8* %425, align 1
  %427 = zext i8 %426 to i32
  %428 = sub nsw i32 %424, %427
  %429 = add nsw i32 %428, %418
  %430 = mul nsw i32 %428, %428
  %431 = add i32 %430, %420
  store i32 %431, i32* %6, align 4
  %432 = add nuw nsw i64 %410, 2
  %433 = icmp eq i64 %432, 64
  br i1 %433, label %434, label %407

434:                                              ; preds = %407
  %435 = getelementptr inbounds i8, i8* %404, i64 64
  %436 = getelementptr inbounds i8, i8* %406, i64 %400
  %437 = add nuw nsw i32 %405, 1
  %438 = icmp eq i32 %437, 64
  br i1 %438, label %439, label %401

439:                                              ; preds = %434
  %440 = sext i32 %429 to i64
  %441 = mul nsw i64 %440, %440
  %442 = lshr i64 %441, 12
  %443 = trunc i64 %442 to i32
  %444 = sub i32 %431, %443
  call void @llvm.lifetime.end.p0i8(i64 4096, i8* nonnull %11) #4
  call void @llvm.lifetime.end.p0i8(i64 8320, i8* nonnull %10) #4
  ret i32 %444
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_sub_pixel_avg_variance64x64_c(i8* nocapture readonly, i32, i32, i32, i8* nocapture readonly, i32, i32* nocapture, i8* nocapture readonly) local_unnamed_addr #2 {
  %9 = alloca [4160 x i16], align 16
  %10 = alloca [4096 x i8], align 16
  %11 = alloca [4096 x i8], align 16
  %12 = bitcast [4160 x i16]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8320, i8* nonnull %12) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %12, i8 -86, i64 8320, i1 false)
  %13 = getelementptr inbounds [4096 x i8], [4096 x i8]* %10, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 4096, i8* nonnull %13) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %13, i8 -86, i64 4096, i1 false)
  %14 = getelementptr inbounds [4096 x i8], [4096 x i8]* %11, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 4096, i8* nonnull %14) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %14, i8 -86, i64 4096, i1 false)
  %15 = getelementptr inbounds [4160 x i16], [4160 x i16]* %9, i64 0, i64 0
  %16 = sext i32 %2 to i64
  %17 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %16, i64 0
  %18 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %16, i64 1
  %19 = add i32 %1, -64
  %20 = zext i32 %19 to i64
  %21 = load i8, i8* %17, align 2
  %22 = zext i8 %21 to i32
  %23 = load i8, i8* %18, align 1
  %24 = zext i8 %23 to i32
  %25 = insertelement <8 x i32> undef, i32 %22, i32 0
  %26 = shufflevector <8 x i32> %25, <8 x i32> undef, <8 x i32> zeroinitializer
  %27 = insertelement <8 x i32> undef, i32 %24, i32 0
  %28 = shufflevector <8 x i32> %27, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %29

29:                                               ; preds = %202, %8
  %30 = phi i64 [ %208, %202 ], [ 0, %8 ]
  %31 = phi i32 [ %206, %202 ], [ 0, %8 ]
  %32 = phi i8* [ %204, %202 ], [ %0, %8 ]
  %33 = phi i16* [ %205, %202 ], [ %15, %8 ]
  %34 = shl nuw nsw i64 %30, 6
  %35 = add i64 %34, 64
  %36 = getelementptr [4160 x i16], [4160 x i16]* %9, i64 0, i64 %35
  %37 = bitcast i16* %36 to i8*
  %38 = getelementptr [4160 x i16], [4160 x i16]* %9, i64 0, i64 %34
  %39 = bitcast i16* %38 to i8*
  %40 = getelementptr i8, i8* %32, i64 65
  %41 = icmp ugt i8* %40, %39
  %42 = icmp ult i8* %32, %37
  %43 = and i1 %41, %42
  br i1 %43, label %172, label %44

44:                                               ; preds = %29
  %45 = getelementptr i8, i8* %32, i64 64
  %46 = bitcast i8* %32 to <8 x i8>*
  %47 = load <8 x i8>, <8 x i8>* %46, align 1, !alias.scope !16
  %48 = zext <8 x i8> %47 to <8 x i32>
  %49 = mul nuw nsw <8 x i32> %26, %48
  %50 = getelementptr inbounds i8, i8* %32, i64 1
  %51 = bitcast i8* %50 to <8 x i8>*
  %52 = load <8 x i8>, <8 x i8>* %51, align 1, !alias.scope !16
  %53 = zext <8 x i8> %52 to <8 x i32>
  %54 = mul nuw nsw <8 x i32> %28, %53
  %55 = add nuw nsw <8 x i32> %49, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %56 = add nuw nsw <8 x i32> %55, %54
  %57 = lshr <8 x i32> %56, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %58 = trunc <8 x i32> %57 to <8 x i16>
  %59 = bitcast i16* %33 to <8 x i16>*
  store <8 x i16> %58, <8 x i16>* %59, align 2, !alias.scope !19, !noalias !16
  %60 = getelementptr i8, i8* %32, i64 8
  %61 = bitcast i8* %60 to <8 x i8>*
  %62 = load <8 x i8>, <8 x i8>* %61, align 1, !alias.scope !16
  %63 = zext <8 x i8> %62 to <8 x i32>
  %64 = mul nuw nsw <8 x i32> %26, %63
  %65 = getelementptr inbounds i8, i8* %32, i64 9
  %66 = bitcast i8* %65 to <8 x i8>*
  %67 = load <8 x i8>, <8 x i8>* %66, align 1, !alias.scope !16
  %68 = zext <8 x i8> %67 to <8 x i32>
  %69 = mul nuw nsw <8 x i32> %28, %68
  %70 = add nuw nsw <8 x i32> %64, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %71 = add nuw nsw <8 x i32> %70, %69
  %72 = lshr <8 x i32> %71, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %73 = trunc <8 x i32> %72 to <8 x i16>
  %74 = getelementptr inbounds i16, i16* %33, i64 8
  %75 = bitcast i16* %74 to <8 x i16>*
  store <8 x i16> %73, <8 x i16>* %75, align 2, !alias.scope !19, !noalias !16
  %76 = getelementptr i8, i8* %32, i64 16
  %77 = bitcast i8* %76 to <8 x i8>*
  %78 = load <8 x i8>, <8 x i8>* %77, align 1, !alias.scope !16
  %79 = zext <8 x i8> %78 to <8 x i32>
  %80 = mul nuw nsw <8 x i32> %26, %79
  %81 = getelementptr inbounds i8, i8* %32, i64 17
  %82 = bitcast i8* %81 to <8 x i8>*
  %83 = load <8 x i8>, <8 x i8>* %82, align 1, !alias.scope !16
  %84 = zext <8 x i8> %83 to <8 x i32>
  %85 = mul nuw nsw <8 x i32> %28, %84
  %86 = add nuw nsw <8 x i32> %80, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %87 = add nuw nsw <8 x i32> %86, %85
  %88 = lshr <8 x i32> %87, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %89 = trunc <8 x i32> %88 to <8 x i16>
  %90 = getelementptr inbounds i16, i16* %33, i64 16
  %91 = bitcast i16* %90 to <8 x i16>*
  store <8 x i16> %89, <8 x i16>* %91, align 2, !alias.scope !19, !noalias !16
  %92 = getelementptr i8, i8* %32, i64 24
  %93 = bitcast i8* %92 to <8 x i8>*
  %94 = load <8 x i8>, <8 x i8>* %93, align 1, !alias.scope !16
  %95 = zext <8 x i8> %94 to <8 x i32>
  %96 = mul nuw nsw <8 x i32> %26, %95
  %97 = getelementptr inbounds i8, i8* %32, i64 25
  %98 = bitcast i8* %97 to <8 x i8>*
  %99 = load <8 x i8>, <8 x i8>* %98, align 1, !alias.scope !16
  %100 = zext <8 x i8> %99 to <8 x i32>
  %101 = mul nuw nsw <8 x i32> %28, %100
  %102 = add nuw nsw <8 x i32> %96, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %103 = add nuw nsw <8 x i32> %102, %101
  %104 = lshr <8 x i32> %103, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %105 = trunc <8 x i32> %104 to <8 x i16>
  %106 = getelementptr inbounds i16, i16* %33, i64 24
  %107 = bitcast i16* %106 to <8 x i16>*
  store <8 x i16> %105, <8 x i16>* %107, align 2, !alias.scope !19, !noalias !16
  %108 = getelementptr i8, i8* %32, i64 32
  %109 = bitcast i8* %108 to <8 x i8>*
  %110 = load <8 x i8>, <8 x i8>* %109, align 1, !alias.scope !16
  %111 = zext <8 x i8> %110 to <8 x i32>
  %112 = mul nuw nsw <8 x i32> %26, %111
  %113 = getelementptr inbounds i8, i8* %32, i64 33
  %114 = bitcast i8* %113 to <8 x i8>*
  %115 = load <8 x i8>, <8 x i8>* %114, align 1, !alias.scope !16
  %116 = zext <8 x i8> %115 to <8 x i32>
  %117 = mul nuw nsw <8 x i32> %28, %116
  %118 = add nuw nsw <8 x i32> %112, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %119 = add nuw nsw <8 x i32> %118, %117
  %120 = lshr <8 x i32> %119, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %121 = trunc <8 x i32> %120 to <8 x i16>
  %122 = getelementptr inbounds i16, i16* %33, i64 32
  %123 = bitcast i16* %122 to <8 x i16>*
  store <8 x i16> %121, <8 x i16>* %123, align 2, !alias.scope !19, !noalias !16
  %124 = getelementptr i8, i8* %32, i64 40
  %125 = bitcast i8* %124 to <8 x i8>*
  %126 = load <8 x i8>, <8 x i8>* %125, align 1, !alias.scope !16
  %127 = zext <8 x i8> %126 to <8 x i32>
  %128 = mul nuw nsw <8 x i32> %26, %127
  %129 = getelementptr inbounds i8, i8* %32, i64 41
  %130 = bitcast i8* %129 to <8 x i8>*
  %131 = load <8 x i8>, <8 x i8>* %130, align 1, !alias.scope !16
  %132 = zext <8 x i8> %131 to <8 x i32>
  %133 = mul nuw nsw <8 x i32> %28, %132
  %134 = add nuw nsw <8 x i32> %128, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %135 = add nuw nsw <8 x i32> %134, %133
  %136 = lshr <8 x i32> %135, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %137 = trunc <8 x i32> %136 to <8 x i16>
  %138 = getelementptr inbounds i16, i16* %33, i64 40
  %139 = bitcast i16* %138 to <8 x i16>*
  store <8 x i16> %137, <8 x i16>* %139, align 2, !alias.scope !19, !noalias !16
  %140 = getelementptr i8, i8* %32, i64 48
  %141 = bitcast i8* %140 to <8 x i8>*
  %142 = load <8 x i8>, <8 x i8>* %141, align 1, !alias.scope !16
  %143 = zext <8 x i8> %142 to <8 x i32>
  %144 = mul nuw nsw <8 x i32> %26, %143
  %145 = getelementptr inbounds i8, i8* %32, i64 49
  %146 = bitcast i8* %145 to <8 x i8>*
  %147 = load <8 x i8>, <8 x i8>* %146, align 1, !alias.scope !16
  %148 = zext <8 x i8> %147 to <8 x i32>
  %149 = mul nuw nsw <8 x i32> %28, %148
  %150 = add nuw nsw <8 x i32> %144, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %151 = add nuw nsw <8 x i32> %150, %149
  %152 = lshr <8 x i32> %151, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %153 = trunc <8 x i32> %152 to <8 x i16>
  %154 = getelementptr inbounds i16, i16* %33, i64 48
  %155 = bitcast i16* %154 to <8 x i16>*
  store <8 x i16> %153, <8 x i16>* %155, align 2, !alias.scope !19, !noalias !16
  %156 = getelementptr i8, i8* %32, i64 56
  %157 = bitcast i8* %156 to <8 x i8>*
  %158 = load <8 x i8>, <8 x i8>* %157, align 1, !alias.scope !16
  %159 = zext <8 x i8> %158 to <8 x i32>
  %160 = mul nuw nsw <8 x i32> %26, %159
  %161 = getelementptr inbounds i8, i8* %32, i64 57
  %162 = bitcast i8* %161 to <8 x i8>*
  %163 = load <8 x i8>, <8 x i8>* %162, align 1, !alias.scope !16
  %164 = zext <8 x i8> %163 to <8 x i32>
  %165 = mul nuw nsw <8 x i32> %28, %164
  %166 = add nuw nsw <8 x i32> %160, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %167 = add nuw nsw <8 x i32> %166, %165
  %168 = lshr <8 x i32> %167, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %169 = trunc <8 x i32> %168 to <8 x i16>
  %170 = getelementptr inbounds i16, i16* %33, i64 56
  %171 = bitcast i16* %170 to <8 x i16>*
  store <8 x i16> %169, <8 x i16>* %171, align 2, !alias.scope !19, !noalias !16
  br label %202

172:                                              ; preds = %29, %172
  %173 = phi i64 [ %200, %172 ], [ 0, %29 ]
  %174 = phi i8* [ %191, %172 ], [ %32, %29 ]
  %175 = load i8, i8* %174, align 1
  %176 = zext i8 %175 to i32
  %177 = mul nuw nsw i32 %22, %176
  %178 = getelementptr inbounds i8, i8* %174, i64 1
  %179 = load i8, i8* %178, align 1
  %180 = zext i8 %179 to i32
  %181 = mul nuw nsw i32 %24, %180
  %182 = add nuw nsw i32 %177, 64
  %183 = add nuw nsw i32 %182, %181
  %184 = lshr i32 %183, 7
  %185 = trunc i32 %184 to i16
  %186 = getelementptr inbounds i16, i16* %33, i64 %173
  store i16 %185, i16* %186, align 2
  %187 = or i64 %173, 1
  %188 = load i8, i8* %178, align 1
  %189 = zext i8 %188 to i32
  %190 = mul nuw nsw i32 %22, %189
  %191 = getelementptr inbounds i8, i8* %174, i64 2
  %192 = load i8, i8* %191, align 1
  %193 = zext i8 %192 to i32
  %194 = mul nuw nsw i32 %24, %193
  %195 = add nuw nsw i32 %190, 64
  %196 = add nuw nsw i32 %195, %194
  %197 = lshr i32 %196, 7
  %198 = trunc i32 %197 to i16
  %199 = getelementptr inbounds i16, i16* %33, i64 %187
  store i16 %198, i16* %199, align 2
  %200 = add nuw nsw i64 %173, 2
  %201 = icmp eq i64 %200, 64
  br i1 %201, label %202, label %172, !llvm.loop !21

202:                                              ; preds = %172, %44
  %203 = phi i8* [ %45, %44 ], [ %191, %172 ]
  %204 = getelementptr inbounds i8, i8* %203, i64 %20
  %205 = getelementptr inbounds i16, i16* %33, i64 64
  %206 = add nuw nsw i32 %31, 1
  %207 = icmp eq i32 %206, 65
  %208 = add i64 %30, 1
  br i1 %207, label %209, label %29

209:                                              ; preds = %202
  %210 = sext i32 %3 to i64
  %211 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %210, i64 0
  %212 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %210, i64 1
  %213 = load i8, i8* %211, align 2
  %214 = zext i8 %213 to i32
  %215 = load i8, i8* %212, align 1
  %216 = zext i8 %215 to i32
  %217 = insertelement <8 x i32> undef, i32 %214, i32 0
  %218 = shufflevector <8 x i32> %217, <8 x i32> undef, <8 x i32> zeroinitializer
  %219 = insertelement <8 x i32> undef, i32 %216, i32 0
  %220 = shufflevector <8 x i32> %219, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %221

221:                                              ; preds = %396, %209
  %222 = phi i64 [ %401, %396 ], [ 0, %209 ]
  %223 = phi i32 [ %399, %396 ], [ 0, %209 ]
  %224 = phi i16* [ %397, %396 ], [ %15, %209 ]
  %225 = phi i8* [ %398, %396 ], [ %13, %209 ]
  %226 = shl nuw nsw i64 %222, 6
  %227 = add i64 %226, 64
  %228 = getelementptr [4096 x i8], [4096 x i8]* %10, i64 0, i64 %227
  %229 = getelementptr [4096 x i8], [4096 x i8]* %10, i64 0, i64 %226
  %230 = bitcast i16* %224 to i8*
  %231 = getelementptr i16, i16* %224, i64 128
  %232 = bitcast i16* %231 to i8*
  %233 = icmp ult i8* %229, %232
  %234 = icmp ugt i8* %228, %230
  %235 = and i1 %233, %234
  br i1 %235, label %364, label %236

236:                                              ; preds = %221
  %237 = getelementptr i16, i16* %224, i64 64
  %238 = bitcast i16* %224 to <8 x i16>*
  %239 = load <8 x i16>, <8 x i16>* %238, align 2, !alias.scope !22
  %240 = zext <8 x i16> %239 to <8 x i32>
  %241 = mul nuw nsw <8 x i32> %218, %240
  %242 = getelementptr inbounds i16, i16* %224, i64 64
  %243 = bitcast i16* %242 to <8 x i16>*
  %244 = load <8 x i16>, <8 x i16>* %243, align 2, !alias.scope !22
  %245 = zext <8 x i16> %244 to <8 x i32>
  %246 = mul nuw nsw <8 x i32> %220, %245
  %247 = add nuw nsw <8 x i32> %241, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %248 = add nuw nsw <8 x i32> %247, %246
  %249 = lshr <8 x i32> %248, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %250 = trunc <8 x i32> %249 to <8 x i8>
  %251 = bitcast i8* %225 to <8 x i8>*
  store <8 x i8> %250, <8 x i8>* %251, align 1, !alias.scope !25, !noalias !22
  %252 = getelementptr i16, i16* %224, i64 8
  %253 = bitcast i16* %252 to <8 x i16>*
  %254 = load <8 x i16>, <8 x i16>* %253, align 2, !alias.scope !22
  %255 = zext <8 x i16> %254 to <8 x i32>
  %256 = mul nuw nsw <8 x i32> %218, %255
  %257 = getelementptr inbounds i16, i16* %224, i64 72
  %258 = bitcast i16* %257 to <8 x i16>*
  %259 = load <8 x i16>, <8 x i16>* %258, align 2, !alias.scope !22
  %260 = zext <8 x i16> %259 to <8 x i32>
  %261 = mul nuw nsw <8 x i32> %220, %260
  %262 = add nuw nsw <8 x i32> %256, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %263 = add nuw nsw <8 x i32> %262, %261
  %264 = lshr <8 x i32> %263, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %265 = trunc <8 x i32> %264 to <8 x i8>
  %266 = getelementptr inbounds i8, i8* %225, i64 8
  %267 = bitcast i8* %266 to <8 x i8>*
  store <8 x i8> %265, <8 x i8>* %267, align 1, !alias.scope !25, !noalias !22
  %268 = getelementptr i16, i16* %224, i64 16
  %269 = bitcast i16* %268 to <8 x i16>*
  %270 = load <8 x i16>, <8 x i16>* %269, align 2, !alias.scope !22
  %271 = zext <8 x i16> %270 to <8 x i32>
  %272 = mul nuw nsw <8 x i32> %218, %271
  %273 = getelementptr inbounds i16, i16* %224, i64 80
  %274 = bitcast i16* %273 to <8 x i16>*
  %275 = load <8 x i16>, <8 x i16>* %274, align 2, !alias.scope !22
  %276 = zext <8 x i16> %275 to <8 x i32>
  %277 = mul nuw nsw <8 x i32> %220, %276
  %278 = add nuw nsw <8 x i32> %272, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %279 = add nuw nsw <8 x i32> %278, %277
  %280 = lshr <8 x i32> %279, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %281 = trunc <8 x i32> %280 to <8 x i8>
  %282 = getelementptr inbounds i8, i8* %225, i64 16
  %283 = bitcast i8* %282 to <8 x i8>*
  store <8 x i8> %281, <8 x i8>* %283, align 1, !alias.scope !25, !noalias !22
  %284 = getelementptr i16, i16* %224, i64 24
  %285 = bitcast i16* %284 to <8 x i16>*
  %286 = load <8 x i16>, <8 x i16>* %285, align 2, !alias.scope !22
  %287 = zext <8 x i16> %286 to <8 x i32>
  %288 = mul nuw nsw <8 x i32> %218, %287
  %289 = getelementptr inbounds i16, i16* %224, i64 88
  %290 = bitcast i16* %289 to <8 x i16>*
  %291 = load <8 x i16>, <8 x i16>* %290, align 2, !alias.scope !22
  %292 = zext <8 x i16> %291 to <8 x i32>
  %293 = mul nuw nsw <8 x i32> %220, %292
  %294 = add nuw nsw <8 x i32> %288, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %295 = add nuw nsw <8 x i32> %294, %293
  %296 = lshr <8 x i32> %295, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %297 = trunc <8 x i32> %296 to <8 x i8>
  %298 = getelementptr inbounds i8, i8* %225, i64 24
  %299 = bitcast i8* %298 to <8 x i8>*
  store <8 x i8> %297, <8 x i8>* %299, align 1, !alias.scope !25, !noalias !22
  %300 = getelementptr i16, i16* %224, i64 32
  %301 = bitcast i16* %300 to <8 x i16>*
  %302 = load <8 x i16>, <8 x i16>* %301, align 2, !alias.scope !22
  %303 = zext <8 x i16> %302 to <8 x i32>
  %304 = mul nuw nsw <8 x i32> %218, %303
  %305 = getelementptr inbounds i16, i16* %224, i64 96
  %306 = bitcast i16* %305 to <8 x i16>*
  %307 = load <8 x i16>, <8 x i16>* %306, align 2, !alias.scope !22
  %308 = zext <8 x i16> %307 to <8 x i32>
  %309 = mul nuw nsw <8 x i32> %220, %308
  %310 = add nuw nsw <8 x i32> %304, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %311 = add nuw nsw <8 x i32> %310, %309
  %312 = lshr <8 x i32> %311, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %313 = trunc <8 x i32> %312 to <8 x i8>
  %314 = getelementptr inbounds i8, i8* %225, i64 32
  %315 = bitcast i8* %314 to <8 x i8>*
  store <8 x i8> %313, <8 x i8>* %315, align 1, !alias.scope !25, !noalias !22
  %316 = getelementptr i16, i16* %224, i64 40
  %317 = bitcast i16* %316 to <8 x i16>*
  %318 = load <8 x i16>, <8 x i16>* %317, align 2, !alias.scope !22
  %319 = zext <8 x i16> %318 to <8 x i32>
  %320 = mul nuw nsw <8 x i32> %218, %319
  %321 = getelementptr inbounds i16, i16* %224, i64 104
  %322 = bitcast i16* %321 to <8 x i16>*
  %323 = load <8 x i16>, <8 x i16>* %322, align 2, !alias.scope !22
  %324 = zext <8 x i16> %323 to <8 x i32>
  %325 = mul nuw nsw <8 x i32> %220, %324
  %326 = add nuw nsw <8 x i32> %320, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %327 = add nuw nsw <8 x i32> %326, %325
  %328 = lshr <8 x i32> %327, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %329 = trunc <8 x i32> %328 to <8 x i8>
  %330 = getelementptr inbounds i8, i8* %225, i64 40
  %331 = bitcast i8* %330 to <8 x i8>*
  store <8 x i8> %329, <8 x i8>* %331, align 1, !alias.scope !25, !noalias !22
  %332 = getelementptr i16, i16* %224, i64 48
  %333 = bitcast i16* %332 to <8 x i16>*
  %334 = load <8 x i16>, <8 x i16>* %333, align 2, !alias.scope !22
  %335 = zext <8 x i16> %334 to <8 x i32>
  %336 = mul nuw nsw <8 x i32> %218, %335
  %337 = getelementptr inbounds i16, i16* %224, i64 112
  %338 = bitcast i16* %337 to <8 x i16>*
  %339 = load <8 x i16>, <8 x i16>* %338, align 2, !alias.scope !22
  %340 = zext <8 x i16> %339 to <8 x i32>
  %341 = mul nuw nsw <8 x i32> %220, %340
  %342 = add nuw nsw <8 x i32> %336, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %343 = add nuw nsw <8 x i32> %342, %341
  %344 = lshr <8 x i32> %343, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %345 = trunc <8 x i32> %344 to <8 x i8>
  %346 = getelementptr inbounds i8, i8* %225, i64 48
  %347 = bitcast i8* %346 to <8 x i8>*
  store <8 x i8> %345, <8 x i8>* %347, align 1, !alias.scope !25, !noalias !22
  %348 = getelementptr i16, i16* %224, i64 56
  %349 = bitcast i16* %348 to <8 x i16>*
  %350 = load <8 x i16>, <8 x i16>* %349, align 2, !alias.scope !22
  %351 = zext <8 x i16> %350 to <8 x i32>
  %352 = mul nuw nsw <8 x i32> %218, %351
  %353 = getelementptr inbounds i16, i16* %224, i64 120
  %354 = bitcast i16* %353 to <8 x i16>*
  %355 = load <8 x i16>, <8 x i16>* %354, align 2, !alias.scope !22
  %356 = zext <8 x i16> %355 to <8 x i32>
  %357 = mul nuw nsw <8 x i32> %220, %356
  %358 = add nuw nsw <8 x i32> %352, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %359 = add nuw nsw <8 x i32> %358, %357
  %360 = lshr <8 x i32> %359, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %361 = trunc <8 x i32> %360 to <8 x i8>
  %362 = getelementptr inbounds i8, i8* %225, i64 56
  %363 = bitcast i8* %362 to <8 x i8>*
  store <8 x i8> %361, <8 x i8>* %363, align 1, !alias.scope !25, !noalias !22
  br label %396

364:                                              ; preds = %221, %364
  %365 = phi i64 [ %394, %364 ], [ 0, %221 ]
  %366 = phi i16* [ %393, %364 ], [ %224, %221 ]
  %367 = load i16, i16* %366, align 2
  %368 = zext i16 %367 to i32
  %369 = mul nuw nsw i32 %214, %368
  %370 = getelementptr inbounds i16, i16* %366, i64 64
  %371 = load i16, i16* %370, align 2
  %372 = zext i16 %371 to i32
  %373 = mul nuw nsw i32 %216, %372
  %374 = add nuw nsw i32 %369, 64
  %375 = add nuw nsw i32 %374, %373
  %376 = lshr i32 %375, 7
  %377 = trunc i32 %376 to i8
  %378 = getelementptr inbounds i8, i8* %225, i64 %365
  store i8 %377, i8* %378, align 1
  %379 = getelementptr inbounds i16, i16* %366, i64 1
  %380 = or i64 %365, 1
  %381 = load i16, i16* %379, align 2
  %382 = zext i16 %381 to i32
  %383 = mul nuw nsw i32 %214, %382
  %384 = getelementptr inbounds i16, i16* %366, i64 65
  %385 = load i16, i16* %384, align 2
  %386 = zext i16 %385 to i32
  %387 = mul nuw nsw i32 %216, %386
  %388 = add nuw nsw i32 %383, 64
  %389 = add nuw nsw i32 %388, %387
  %390 = lshr i32 %389, 7
  %391 = trunc i32 %390 to i8
  %392 = getelementptr inbounds i8, i8* %225, i64 %380
  store i8 %391, i8* %392, align 1
  %393 = getelementptr inbounds i16, i16* %366, i64 2
  %394 = add nuw nsw i64 %365, 2
  %395 = icmp eq i64 %394, 64
  br i1 %395, label %396, label %364, !llvm.loop !27

396:                                              ; preds = %364, %236
  %397 = phi i16* [ %237, %236 ], [ %393, %364 ]
  %398 = getelementptr inbounds i8, i8* %225, i64 64
  %399 = add nuw nsw i32 %223, 1
  %400 = icmp eq i32 %399, 64
  %401 = add i64 %222, 1
  br i1 %400, label %402, label %221

402:                                              ; preds = %396, %402
  %403 = phi i8* [ %460, %402 ], [ %14, %396 ]
  %404 = phi i32 [ %463, %402 ], [ 0, %396 ]
  %405 = phi i8* [ %461, %402 ], [ %7, %396 ]
  %406 = phi i8* [ %462, %402 ], [ %13, %396 ]
  %407 = bitcast i8* %405 to <16 x i8>*
  %408 = load <16 x i8>, <16 x i8>* %407, align 1
  %409 = zext <16 x i8> %408 to <16 x i32>
  %410 = bitcast i8* %406 to <16 x i8>*
  %411 = load <16 x i8>, <16 x i8>* %410, align 1
  %412 = zext <16 x i8> %411 to <16 x i32>
  %413 = add nuw nsw <16 x i32> %409, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %414 = add nuw nsw <16 x i32> %413, %412
  %415 = lshr <16 x i32> %414, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %416 = trunc <16 x i32> %415 to <16 x i8>
  %417 = bitcast i8* %403 to <16 x i8>*
  store <16 x i8> %416, <16 x i8>* %417, align 1
  %418 = getelementptr inbounds i8, i8* %405, i64 16
  %419 = bitcast i8* %418 to <16 x i8>*
  %420 = load <16 x i8>, <16 x i8>* %419, align 1
  %421 = zext <16 x i8> %420 to <16 x i32>
  %422 = getelementptr inbounds i8, i8* %406, i64 16
  %423 = bitcast i8* %422 to <16 x i8>*
  %424 = load <16 x i8>, <16 x i8>* %423, align 1
  %425 = zext <16 x i8> %424 to <16 x i32>
  %426 = add nuw nsw <16 x i32> %421, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %427 = add nuw nsw <16 x i32> %426, %425
  %428 = lshr <16 x i32> %427, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %429 = trunc <16 x i32> %428 to <16 x i8>
  %430 = getelementptr inbounds i8, i8* %403, i64 16
  %431 = bitcast i8* %430 to <16 x i8>*
  store <16 x i8> %429, <16 x i8>* %431, align 1
  %432 = getelementptr inbounds i8, i8* %405, i64 32
  %433 = bitcast i8* %432 to <16 x i8>*
  %434 = load <16 x i8>, <16 x i8>* %433, align 1
  %435 = zext <16 x i8> %434 to <16 x i32>
  %436 = getelementptr inbounds i8, i8* %406, i64 32
  %437 = bitcast i8* %436 to <16 x i8>*
  %438 = load <16 x i8>, <16 x i8>* %437, align 1
  %439 = zext <16 x i8> %438 to <16 x i32>
  %440 = add nuw nsw <16 x i32> %435, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %441 = add nuw nsw <16 x i32> %440, %439
  %442 = lshr <16 x i32> %441, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %443 = trunc <16 x i32> %442 to <16 x i8>
  %444 = getelementptr inbounds i8, i8* %403, i64 32
  %445 = bitcast i8* %444 to <16 x i8>*
  store <16 x i8> %443, <16 x i8>* %445, align 1
  %446 = getelementptr inbounds i8, i8* %405, i64 48
  %447 = bitcast i8* %446 to <16 x i8>*
  %448 = load <16 x i8>, <16 x i8>* %447, align 1
  %449 = zext <16 x i8> %448 to <16 x i32>
  %450 = getelementptr inbounds i8, i8* %406, i64 48
  %451 = bitcast i8* %450 to <16 x i8>*
  %452 = load <16 x i8>, <16 x i8>* %451, align 1
  %453 = zext <16 x i8> %452 to <16 x i32>
  %454 = add nuw nsw <16 x i32> %449, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %455 = add nuw nsw <16 x i32> %454, %453
  %456 = lshr <16 x i32> %455, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %457 = trunc <16 x i32> %456 to <16 x i8>
  %458 = getelementptr inbounds i8, i8* %403, i64 48
  %459 = bitcast i8* %458 to <16 x i8>*
  store <16 x i8> %457, <16 x i8>* %459, align 1
  %460 = getelementptr inbounds i8, i8* %403, i64 64
  %461 = getelementptr inbounds i8, i8* %405, i64 64
  %462 = getelementptr inbounds i8, i8* %406, i64 64
  %463 = add nuw nsw i32 %404, 1
  %464 = icmp eq i32 %463, 64
  br i1 %464, label %465, label %402

465:                                              ; preds = %402
  store i32 0, i32* %6, align 4
  %466 = sext i32 %5 to i64
  br label %467

467:                                              ; preds = %500, %465
  %468 = phi i32 [ 0, %465 ], [ %497, %500 ]
  %469 = phi i32 [ 0, %465 ], [ %495, %500 ]
  %470 = phi i8* [ %14, %465 ], [ %501, %500 ]
  %471 = phi i32 [ 0, %465 ], [ %503, %500 ]
  %472 = phi i8* [ %4, %465 ], [ %502, %500 ]
  br label %473

473:                                              ; preds = %473, %467
  %474 = phi i32 [ %468, %467 ], [ %497, %473 ]
  %475 = phi i32 [ %469, %467 ], [ %495, %473 ]
  %476 = phi i64 [ 0, %467 ], [ %498, %473 ]
  %477 = getelementptr inbounds i8, i8* %470, i64 %476
  %478 = load i8, i8* %477, align 1
  %479 = zext i8 %478 to i32
  %480 = getelementptr inbounds i8, i8* %472, i64 %476
  %481 = load i8, i8* %480, align 1
  %482 = zext i8 %481 to i32
  %483 = sub nsw i32 %479, %482
  %484 = add nsw i32 %483, %475
  %485 = mul nsw i32 %483, %483
  %486 = add i32 %485, %474
  store i32 %486, i32* %6, align 4
  %487 = or i64 %476, 1
  %488 = getelementptr inbounds i8, i8* %470, i64 %487
  %489 = load i8, i8* %488, align 1
  %490 = zext i8 %489 to i32
  %491 = getelementptr inbounds i8, i8* %472, i64 %487
  %492 = load i8, i8* %491, align 1
  %493 = zext i8 %492 to i32
  %494 = sub nsw i32 %490, %493
  %495 = add nsw i32 %494, %484
  %496 = mul nsw i32 %494, %494
  %497 = add i32 %496, %486
  store i32 %497, i32* %6, align 4
  %498 = add nuw nsw i64 %476, 2
  %499 = icmp eq i64 %498, 64
  br i1 %499, label %500, label %473

500:                                              ; preds = %473
  %501 = getelementptr inbounds i8, i8* %470, i64 64
  %502 = getelementptr inbounds i8, i8* %472, i64 %466
  %503 = add nuw nsw i32 %471, 1
  %504 = icmp eq i32 %503, 64
  br i1 %504, label %505, label %467

505:                                              ; preds = %500
  %506 = sext i32 %495 to i64
  %507 = mul nsw i64 %506, %506
  %508 = lshr i64 %507, 12
  %509 = trunc i64 %508 to i32
  %510 = sub i32 %497, %509
  call void @llvm.lifetime.end.p0i8(i64 4096, i8* nonnull %14) #4
  call void @llvm.lifetime.end.p0i8(i64 4096, i8* nonnull %13) #4
  call void @llvm.lifetime.end.p0i8(i64 8320, i8* nonnull %12) #4
  ret i32 %510
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @vpx_comp_avg_pred_c(i8* nocapture, i8* nocapture readonly, i32, i32, i8* nocapture readonly, i32) local_unnamed_addr #3 {
  %7 = icmp sgt i32 %3, 0
  br i1 %7, label %8, label %159

8:                                                ; preds = %6
  %9 = icmp sgt i32 %2, 0
  %10 = sext i32 %2 to i64
  %11 = sext i32 %5 to i64
  %12 = zext i32 %2 to i64
  %13 = and i64 %12, 4294967280
  %14 = add nsw i64 %13, -16
  %15 = lshr exact i64 %14, 4
  %16 = add nuw nsw i64 %15, 1
  %17 = icmp ult i32 %2, 16
  %18 = and i64 %12, 4294967280
  %19 = and i64 %16, 1
  %20 = icmp eq i64 %14, 0
  %21 = sub nuw nsw i64 %16, %19
  %22 = icmp eq i64 %19, 0
  %23 = icmp eq i64 %18, %12
  %24 = and i64 %12, 1
  %25 = icmp eq i64 %24, 0
  %26 = sub nsw i64 0, %12
  br label %27

27:                                               ; preds = %152, %8
  %28 = phi i64 [ %158, %152 ], [ 0, %8 ]
  %29 = phi i8* [ %153, %152 ], [ %0, %8 ]
  %30 = phi i32 [ %156, %152 ], [ 0, %8 ]
  %31 = phi i8* [ %154, %152 ], [ %1, %8 ]
  %32 = phi i8* [ %155, %152 ], [ %4, %8 ]
  %33 = mul i64 %28, %10
  %34 = getelementptr i8, i8* %0, i64 %33
  %35 = add i64 %33, %12
  %36 = getelementptr i8, i8* %0, i64 %35
  %37 = getelementptr i8, i8* %1, i64 %33
  %38 = getelementptr i8, i8* %1, i64 %35
  %39 = mul i64 %28, %11
  %40 = getelementptr i8, i8* %4, i64 %39
  %41 = add i64 %39, %12
  %42 = getelementptr i8, i8* %4, i64 %41
  br i1 %9, label %43, label %152

43:                                               ; preds = %27
  br i1 %17, label %106, label %44

44:                                               ; preds = %43
  %45 = icmp ult i8* %34, %38
  %46 = icmp ult i8* %37, %36
  %47 = and i1 %45, %46
  %48 = icmp ult i8* %34, %42
  %49 = icmp ult i8* %40, %36
  %50 = and i1 %48, %49
  %51 = or i1 %47, %50
  br i1 %51, label %106, label %52

52:                                               ; preds = %44
  br i1 %20, label %88, label %53

53:                                               ; preds = %52, %53
  %54 = phi i64 [ %85, %53 ], [ 0, %52 ]
  %55 = phi i64 [ %86, %53 ], [ %21, %52 ]
  %56 = getelementptr inbounds i8, i8* %31, i64 %54
  %57 = bitcast i8* %56 to <16 x i8>*
  %58 = load <16 x i8>, <16 x i8>* %57, align 1, !alias.scope !28
  %59 = zext <16 x i8> %58 to <16 x i32>
  %60 = getelementptr inbounds i8, i8* %32, i64 %54
  %61 = bitcast i8* %60 to <16 x i8>*
  %62 = load <16 x i8>, <16 x i8>* %61, align 1, !alias.scope !31
  %63 = zext <16 x i8> %62 to <16 x i32>
  %64 = add nuw nsw <16 x i32> %59, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %65 = add nuw nsw <16 x i32> %64, %63
  %66 = lshr <16 x i32> %65, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %67 = trunc <16 x i32> %66 to <16 x i8>
  %68 = getelementptr inbounds i8, i8* %29, i64 %54
  %69 = bitcast i8* %68 to <16 x i8>*
  store <16 x i8> %67, <16 x i8>* %69, align 1, !alias.scope !33, !noalias !35
  %70 = or i64 %54, 16
  %71 = getelementptr inbounds i8, i8* %31, i64 %70
  %72 = bitcast i8* %71 to <16 x i8>*
  %73 = load <16 x i8>, <16 x i8>* %72, align 1, !alias.scope !28
  %74 = zext <16 x i8> %73 to <16 x i32>
  %75 = getelementptr inbounds i8, i8* %32, i64 %70
  %76 = bitcast i8* %75 to <16 x i8>*
  %77 = load <16 x i8>, <16 x i8>* %76, align 1, !alias.scope !31
  %78 = zext <16 x i8> %77 to <16 x i32>
  %79 = add nuw nsw <16 x i32> %74, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %80 = add nuw nsw <16 x i32> %79, %78
  %81 = lshr <16 x i32> %80, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %82 = trunc <16 x i32> %81 to <16 x i8>
  %83 = getelementptr inbounds i8, i8* %29, i64 %70
  %84 = bitcast i8* %83 to <16 x i8>*
  store <16 x i8> %82, <16 x i8>* %84, align 1, !alias.scope !33, !noalias !35
  %85 = add i64 %54, 32
  %86 = add i64 %55, -2
  %87 = icmp eq i64 %86, 0
  br i1 %87, label %88, label %53, !llvm.loop !36

88:                                               ; preds = %53, %52
  %89 = phi i64 [ 0, %52 ], [ %85, %53 ]
  br i1 %22, label %105, label %90

90:                                               ; preds = %88
  %91 = getelementptr inbounds i8, i8* %31, i64 %89
  %92 = bitcast i8* %91 to <16 x i8>*
  %93 = load <16 x i8>, <16 x i8>* %92, align 1, !alias.scope !28
  %94 = zext <16 x i8> %93 to <16 x i32>
  %95 = getelementptr inbounds i8, i8* %32, i64 %89
  %96 = bitcast i8* %95 to <16 x i8>*
  %97 = load <16 x i8>, <16 x i8>* %96, align 1, !alias.scope !31
  %98 = zext <16 x i8> %97 to <16 x i32>
  %99 = add nuw nsw <16 x i32> %94, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %100 = add nuw nsw <16 x i32> %99, %98
  %101 = lshr <16 x i32> %100, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %102 = trunc <16 x i32> %101 to <16 x i8>
  %103 = getelementptr inbounds i8, i8* %29, i64 %89
  %104 = bitcast i8* %103 to <16 x i8>*
  store <16 x i8> %102, <16 x i8>* %104, align 1, !alias.scope !33, !noalias !35
  br label %105

105:                                              ; preds = %88, %90
  br i1 %23, label %152, label %106

106:                                              ; preds = %105, %44, %43
  %107 = phi i64 [ 0, %44 ], [ 0, %43 ], [ %18, %105 ]
  %108 = xor i64 %107, -1
  br i1 %25, label %122, label %109

109:                                              ; preds = %106
  %110 = getelementptr inbounds i8, i8* %31, i64 %107
  %111 = load i8, i8* %110, align 1
  %112 = zext i8 %111 to i32
  %113 = getelementptr inbounds i8, i8* %32, i64 %107
  %114 = load i8, i8* %113, align 1
  %115 = zext i8 %114 to i32
  %116 = add nuw nsw i32 %112, 1
  %117 = add nuw nsw i32 %116, %115
  %118 = lshr i32 %117, 1
  %119 = trunc i32 %118 to i8
  %120 = getelementptr inbounds i8, i8* %29, i64 %107
  store i8 %119, i8* %120, align 1
  %121 = or i64 %107, 1
  br label %122

122:                                              ; preds = %109, %106
  %123 = phi i64 [ %121, %109 ], [ %107, %106 ]
  %124 = icmp eq i64 %108, %26
  br i1 %124, label %152, label %125

125:                                              ; preds = %122, %125
  %126 = phi i64 [ %150, %125 ], [ %123, %122 ]
  %127 = getelementptr inbounds i8, i8* %31, i64 %126
  %128 = load i8, i8* %127, align 1
  %129 = zext i8 %128 to i32
  %130 = getelementptr inbounds i8, i8* %32, i64 %126
  %131 = load i8, i8* %130, align 1
  %132 = zext i8 %131 to i32
  %133 = add nuw nsw i32 %129, 1
  %134 = add nuw nsw i32 %133, %132
  %135 = lshr i32 %134, 1
  %136 = trunc i32 %135 to i8
  %137 = getelementptr inbounds i8, i8* %29, i64 %126
  store i8 %136, i8* %137, align 1
  %138 = add nuw nsw i64 %126, 1
  %139 = getelementptr inbounds i8, i8* %31, i64 %138
  %140 = load i8, i8* %139, align 1
  %141 = zext i8 %140 to i32
  %142 = getelementptr inbounds i8, i8* %32, i64 %138
  %143 = load i8, i8* %142, align 1
  %144 = zext i8 %143 to i32
  %145 = add nuw nsw i32 %141, 1
  %146 = add nuw nsw i32 %145, %144
  %147 = lshr i32 %146, 1
  %148 = trunc i32 %147 to i8
  %149 = getelementptr inbounds i8, i8* %29, i64 %138
  store i8 %148, i8* %149, align 1
  %150 = add nuw nsw i64 %126, 2
  %151 = icmp eq i64 %150, %12
  br i1 %151, label %152, label %125, !llvm.loop !37

152:                                              ; preds = %122, %125, %105, %27
  %153 = getelementptr inbounds i8, i8* %29, i64 %10
  %154 = getelementptr inbounds i8, i8* %31, i64 %10
  %155 = getelementptr inbounds i8, i8* %32, i64 %11
  %156 = add nuw nsw i32 %30, 1
  %157 = icmp eq i32 %156, %3
  %158 = add i64 %28, 1
  br i1 %157, label %159, label %27

159:                                              ; preds = %152, %6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_variance64x32_c(i8* nocapture readonly, i32, i8* nocapture readonly, i32, i32* nocapture) local_unnamed_addr #2 {
  store i32 0, i32* %4, align 4
  %6 = sext i32 %1 to i64
  %7 = sext i32 %3 to i64
  br label %8

8:                                                ; preds = %41, %5
  %9 = phi i32 [ 0, %5 ], [ %38, %41 ]
  %10 = phi i32 [ 0, %5 ], [ %36, %41 ]
  %11 = phi i8* [ %0, %5 ], [ %42, %41 ]
  %12 = phi i32 [ 0, %5 ], [ %44, %41 ]
  %13 = phi i8* [ %2, %5 ], [ %43, %41 ]
  br label %14

14:                                               ; preds = %14, %8
  %15 = phi i32 [ %9, %8 ], [ %38, %14 ]
  %16 = phi i32 [ %10, %8 ], [ %36, %14 ]
  %17 = phi i64 [ 0, %8 ], [ %39, %14 ]
  %18 = getelementptr inbounds i8, i8* %11, i64 %17
  %19 = load i8, i8* %18, align 1
  %20 = zext i8 %19 to i32
  %21 = getelementptr inbounds i8, i8* %13, i64 %17
  %22 = load i8, i8* %21, align 1
  %23 = zext i8 %22 to i32
  %24 = sub nsw i32 %20, %23
  %25 = add nsw i32 %24, %16
  %26 = mul nsw i32 %24, %24
  %27 = add i32 %26, %15
  store i32 %27, i32* %4, align 4
  %28 = or i64 %17, 1
  %29 = getelementptr inbounds i8, i8* %11, i64 %28
  %30 = load i8, i8* %29, align 1
  %31 = zext i8 %30 to i32
  %32 = getelementptr inbounds i8, i8* %13, i64 %28
  %33 = load i8, i8* %32, align 1
  %34 = zext i8 %33 to i32
  %35 = sub nsw i32 %31, %34
  %36 = add nsw i32 %35, %25
  %37 = mul nsw i32 %35, %35
  %38 = add i32 %37, %27
  store i32 %38, i32* %4, align 4
  %39 = add nuw nsw i64 %17, 2
  %40 = icmp eq i64 %39, 64
  br i1 %40, label %41, label %14

41:                                               ; preds = %14
  %42 = getelementptr inbounds i8, i8* %11, i64 %6
  %43 = getelementptr inbounds i8, i8* %13, i64 %7
  %44 = add nuw nsw i32 %12, 1
  %45 = icmp eq i32 %44, 32
  br i1 %45, label %46, label %8

46:                                               ; preds = %41
  %47 = sext i32 %36 to i64
  %48 = mul nsw i64 %47, %47
  %49 = lshr i64 %48, 11
  %50 = trunc i64 %49 to i32
  %51 = sub i32 %38, %50
  ret i32 %51
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_sub_pixel_variance64x32_c(i8* nocapture readonly, i32, i32, i32, i8* nocapture readonly, i32, i32* nocapture) local_unnamed_addr #2 {
  %8 = alloca [2112 x i16], align 16
  %9 = alloca [2048 x i8], align 16
  %10 = bitcast [2112 x i16]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4224, i8* nonnull %10) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %10, i8 -86, i64 4224, i1 false)
  %11 = getelementptr inbounds [2048 x i8], [2048 x i8]* %9, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 2048, i8* nonnull %11) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %11, i8 -86, i64 2048, i1 false)
  %12 = getelementptr inbounds [2112 x i16], [2112 x i16]* %8, i64 0, i64 0
  %13 = sext i32 %2 to i64
  %14 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %13, i64 0
  %15 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %13, i64 1
  %16 = add i32 %1, -64
  %17 = zext i32 %16 to i64
  %18 = load i8, i8* %14, align 2
  %19 = zext i8 %18 to i32
  %20 = load i8, i8* %15, align 1
  %21 = zext i8 %20 to i32
  %22 = insertelement <8 x i32> undef, i32 %19, i32 0
  %23 = shufflevector <8 x i32> %22, <8 x i32> undef, <8 x i32> zeroinitializer
  %24 = insertelement <8 x i32> undef, i32 %21, i32 0
  %25 = shufflevector <8 x i32> %24, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %26

26:                                               ; preds = %199, %7
  %27 = phi i64 [ %205, %199 ], [ 0, %7 ]
  %28 = phi i32 [ %203, %199 ], [ 0, %7 ]
  %29 = phi i8* [ %201, %199 ], [ %0, %7 ]
  %30 = phi i16* [ %202, %199 ], [ %12, %7 ]
  %31 = shl nuw nsw i64 %27, 6
  %32 = add i64 %31, 64
  %33 = getelementptr [2112 x i16], [2112 x i16]* %8, i64 0, i64 %32
  %34 = bitcast i16* %33 to i8*
  %35 = getelementptr [2112 x i16], [2112 x i16]* %8, i64 0, i64 %31
  %36 = bitcast i16* %35 to i8*
  %37 = getelementptr i8, i8* %29, i64 65
  %38 = icmp ugt i8* %37, %36
  %39 = icmp ult i8* %29, %34
  %40 = and i1 %38, %39
  br i1 %40, label %169, label %41

41:                                               ; preds = %26
  %42 = getelementptr i8, i8* %29, i64 64
  %43 = bitcast i8* %29 to <8 x i8>*
  %44 = load <8 x i8>, <8 x i8>* %43, align 1, !alias.scope !38
  %45 = zext <8 x i8> %44 to <8 x i32>
  %46 = mul nuw nsw <8 x i32> %23, %45
  %47 = getelementptr inbounds i8, i8* %29, i64 1
  %48 = bitcast i8* %47 to <8 x i8>*
  %49 = load <8 x i8>, <8 x i8>* %48, align 1, !alias.scope !38
  %50 = zext <8 x i8> %49 to <8 x i32>
  %51 = mul nuw nsw <8 x i32> %25, %50
  %52 = add nuw nsw <8 x i32> %46, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %53 = add nuw nsw <8 x i32> %52, %51
  %54 = lshr <8 x i32> %53, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %55 = trunc <8 x i32> %54 to <8 x i16>
  %56 = bitcast i16* %30 to <8 x i16>*
  store <8 x i16> %55, <8 x i16>* %56, align 2, !alias.scope !41, !noalias !38
  %57 = getelementptr i8, i8* %29, i64 8
  %58 = bitcast i8* %57 to <8 x i8>*
  %59 = load <8 x i8>, <8 x i8>* %58, align 1, !alias.scope !38
  %60 = zext <8 x i8> %59 to <8 x i32>
  %61 = mul nuw nsw <8 x i32> %23, %60
  %62 = getelementptr inbounds i8, i8* %29, i64 9
  %63 = bitcast i8* %62 to <8 x i8>*
  %64 = load <8 x i8>, <8 x i8>* %63, align 1, !alias.scope !38
  %65 = zext <8 x i8> %64 to <8 x i32>
  %66 = mul nuw nsw <8 x i32> %25, %65
  %67 = add nuw nsw <8 x i32> %61, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %68 = add nuw nsw <8 x i32> %67, %66
  %69 = lshr <8 x i32> %68, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %70 = trunc <8 x i32> %69 to <8 x i16>
  %71 = getelementptr inbounds i16, i16* %30, i64 8
  %72 = bitcast i16* %71 to <8 x i16>*
  store <8 x i16> %70, <8 x i16>* %72, align 2, !alias.scope !41, !noalias !38
  %73 = getelementptr i8, i8* %29, i64 16
  %74 = bitcast i8* %73 to <8 x i8>*
  %75 = load <8 x i8>, <8 x i8>* %74, align 1, !alias.scope !38
  %76 = zext <8 x i8> %75 to <8 x i32>
  %77 = mul nuw nsw <8 x i32> %23, %76
  %78 = getelementptr inbounds i8, i8* %29, i64 17
  %79 = bitcast i8* %78 to <8 x i8>*
  %80 = load <8 x i8>, <8 x i8>* %79, align 1, !alias.scope !38
  %81 = zext <8 x i8> %80 to <8 x i32>
  %82 = mul nuw nsw <8 x i32> %25, %81
  %83 = add nuw nsw <8 x i32> %77, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %84 = add nuw nsw <8 x i32> %83, %82
  %85 = lshr <8 x i32> %84, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %86 = trunc <8 x i32> %85 to <8 x i16>
  %87 = getelementptr inbounds i16, i16* %30, i64 16
  %88 = bitcast i16* %87 to <8 x i16>*
  store <8 x i16> %86, <8 x i16>* %88, align 2, !alias.scope !41, !noalias !38
  %89 = getelementptr i8, i8* %29, i64 24
  %90 = bitcast i8* %89 to <8 x i8>*
  %91 = load <8 x i8>, <8 x i8>* %90, align 1, !alias.scope !38
  %92 = zext <8 x i8> %91 to <8 x i32>
  %93 = mul nuw nsw <8 x i32> %23, %92
  %94 = getelementptr inbounds i8, i8* %29, i64 25
  %95 = bitcast i8* %94 to <8 x i8>*
  %96 = load <8 x i8>, <8 x i8>* %95, align 1, !alias.scope !38
  %97 = zext <8 x i8> %96 to <8 x i32>
  %98 = mul nuw nsw <8 x i32> %25, %97
  %99 = add nuw nsw <8 x i32> %93, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %100 = add nuw nsw <8 x i32> %99, %98
  %101 = lshr <8 x i32> %100, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %102 = trunc <8 x i32> %101 to <8 x i16>
  %103 = getelementptr inbounds i16, i16* %30, i64 24
  %104 = bitcast i16* %103 to <8 x i16>*
  store <8 x i16> %102, <8 x i16>* %104, align 2, !alias.scope !41, !noalias !38
  %105 = getelementptr i8, i8* %29, i64 32
  %106 = bitcast i8* %105 to <8 x i8>*
  %107 = load <8 x i8>, <8 x i8>* %106, align 1, !alias.scope !38
  %108 = zext <8 x i8> %107 to <8 x i32>
  %109 = mul nuw nsw <8 x i32> %23, %108
  %110 = getelementptr inbounds i8, i8* %29, i64 33
  %111 = bitcast i8* %110 to <8 x i8>*
  %112 = load <8 x i8>, <8 x i8>* %111, align 1, !alias.scope !38
  %113 = zext <8 x i8> %112 to <8 x i32>
  %114 = mul nuw nsw <8 x i32> %25, %113
  %115 = add nuw nsw <8 x i32> %109, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %116 = add nuw nsw <8 x i32> %115, %114
  %117 = lshr <8 x i32> %116, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %118 = trunc <8 x i32> %117 to <8 x i16>
  %119 = getelementptr inbounds i16, i16* %30, i64 32
  %120 = bitcast i16* %119 to <8 x i16>*
  store <8 x i16> %118, <8 x i16>* %120, align 2, !alias.scope !41, !noalias !38
  %121 = getelementptr i8, i8* %29, i64 40
  %122 = bitcast i8* %121 to <8 x i8>*
  %123 = load <8 x i8>, <8 x i8>* %122, align 1, !alias.scope !38
  %124 = zext <8 x i8> %123 to <8 x i32>
  %125 = mul nuw nsw <8 x i32> %23, %124
  %126 = getelementptr inbounds i8, i8* %29, i64 41
  %127 = bitcast i8* %126 to <8 x i8>*
  %128 = load <8 x i8>, <8 x i8>* %127, align 1, !alias.scope !38
  %129 = zext <8 x i8> %128 to <8 x i32>
  %130 = mul nuw nsw <8 x i32> %25, %129
  %131 = add nuw nsw <8 x i32> %125, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %132 = add nuw nsw <8 x i32> %131, %130
  %133 = lshr <8 x i32> %132, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %134 = trunc <8 x i32> %133 to <8 x i16>
  %135 = getelementptr inbounds i16, i16* %30, i64 40
  %136 = bitcast i16* %135 to <8 x i16>*
  store <8 x i16> %134, <8 x i16>* %136, align 2, !alias.scope !41, !noalias !38
  %137 = getelementptr i8, i8* %29, i64 48
  %138 = bitcast i8* %137 to <8 x i8>*
  %139 = load <8 x i8>, <8 x i8>* %138, align 1, !alias.scope !38
  %140 = zext <8 x i8> %139 to <8 x i32>
  %141 = mul nuw nsw <8 x i32> %23, %140
  %142 = getelementptr inbounds i8, i8* %29, i64 49
  %143 = bitcast i8* %142 to <8 x i8>*
  %144 = load <8 x i8>, <8 x i8>* %143, align 1, !alias.scope !38
  %145 = zext <8 x i8> %144 to <8 x i32>
  %146 = mul nuw nsw <8 x i32> %25, %145
  %147 = add nuw nsw <8 x i32> %141, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %148 = add nuw nsw <8 x i32> %147, %146
  %149 = lshr <8 x i32> %148, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %150 = trunc <8 x i32> %149 to <8 x i16>
  %151 = getelementptr inbounds i16, i16* %30, i64 48
  %152 = bitcast i16* %151 to <8 x i16>*
  store <8 x i16> %150, <8 x i16>* %152, align 2, !alias.scope !41, !noalias !38
  %153 = getelementptr i8, i8* %29, i64 56
  %154 = bitcast i8* %153 to <8 x i8>*
  %155 = load <8 x i8>, <8 x i8>* %154, align 1, !alias.scope !38
  %156 = zext <8 x i8> %155 to <8 x i32>
  %157 = mul nuw nsw <8 x i32> %23, %156
  %158 = getelementptr inbounds i8, i8* %29, i64 57
  %159 = bitcast i8* %158 to <8 x i8>*
  %160 = load <8 x i8>, <8 x i8>* %159, align 1, !alias.scope !38
  %161 = zext <8 x i8> %160 to <8 x i32>
  %162 = mul nuw nsw <8 x i32> %25, %161
  %163 = add nuw nsw <8 x i32> %157, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %164 = add nuw nsw <8 x i32> %163, %162
  %165 = lshr <8 x i32> %164, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %166 = trunc <8 x i32> %165 to <8 x i16>
  %167 = getelementptr inbounds i16, i16* %30, i64 56
  %168 = bitcast i16* %167 to <8 x i16>*
  store <8 x i16> %166, <8 x i16>* %168, align 2, !alias.scope !41, !noalias !38
  br label %199

169:                                              ; preds = %26, %169
  %170 = phi i64 [ %197, %169 ], [ 0, %26 ]
  %171 = phi i8* [ %188, %169 ], [ %29, %26 ]
  %172 = load i8, i8* %171, align 1
  %173 = zext i8 %172 to i32
  %174 = mul nuw nsw i32 %19, %173
  %175 = getelementptr inbounds i8, i8* %171, i64 1
  %176 = load i8, i8* %175, align 1
  %177 = zext i8 %176 to i32
  %178 = mul nuw nsw i32 %21, %177
  %179 = add nuw nsw i32 %174, 64
  %180 = add nuw nsw i32 %179, %178
  %181 = lshr i32 %180, 7
  %182 = trunc i32 %181 to i16
  %183 = getelementptr inbounds i16, i16* %30, i64 %170
  store i16 %182, i16* %183, align 2
  %184 = or i64 %170, 1
  %185 = load i8, i8* %175, align 1
  %186 = zext i8 %185 to i32
  %187 = mul nuw nsw i32 %19, %186
  %188 = getelementptr inbounds i8, i8* %171, i64 2
  %189 = load i8, i8* %188, align 1
  %190 = zext i8 %189 to i32
  %191 = mul nuw nsw i32 %21, %190
  %192 = add nuw nsw i32 %187, 64
  %193 = add nuw nsw i32 %192, %191
  %194 = lshr i32 %193, 7
  %195 = trunc i32 %194 to i16
  %196 = getelementptr inbounds i16, i16* %30, i64 %184
  store i16 %195, i16* %196, align 2
  %197 = add nuw nsw i64 %170, 2
  %198 = icmp eq i64 %197, 64
  br i1 %198, label %199, label %169, !llvm.loop !43

199:                                              ; preds = %169, %41
  %200 = phi i8* [ %42, %41 ], [ %188, %169 ]
  %201 = getelementptr inbounds i8, i8* %200, i64 %17
  %202 = getelementptr inbounds i16, i16* %30, i64 64
  %203 = add nuw nsw i32 %28, 1
  %204 = icmp eq i32 %203, 33
  %205 = add i64 %27, 1
  br i1 %204, label %206, label %26

206:                                              ; preds = %199
  %207 = sext i32 %3 to i64
  %208 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %207, i64 0
  %209 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %207, i64 1
  %210 = load i8, i8* %208, align 2
  %211 = zext i8 %210 to i32
  %212 = load i8, i8* %209, align 1
  %213 = zext i8 %212 to i32
  %214 = insertelement <8 x i32> undef, i32 %211, i32 0
  %215 = shufflevector <8 x i32> %214, <8 x i32> undef, <8 x i32> zeroinitializer
  %216 = insertelement <8 x i32> undef, i32 %213, i32 0
  %217 = shufflevector <8 x i32> %216, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %218

218:                                              ; preds = %393, %206
  %219 = phi i64 [ %398, %393 ], [ 0, %206 ]
  %220 = phi i32 [ %396, %393 ], [ 0, %206 ]
  %221 = phi i16* [ %394, %393 ], [ %12, %206 ]
  %222 = phi i8* [ %395, %393 ], [ %11, %206 ]
  %223 = shl nuw nsw i64 %219, 6
  %224 = add i64 %223, 64
  %225 = getelementptr [2048 x i8], [2048 x i8]* %9, i64 0, i64 %224
  %226 = getelementptr [2048 x i8], [2048 x i8]* %9, i64 0, i64 %223
  %227 = bitcast i16* %221 to i8*
  %228 = getelementptr i16, i16* %221, i64 128
  %229 = bitcast i16* %228 to i8*
  %230 = icmp ult i8* %226, %229
  %231 = icmp ugt i8* %225, %227
  %232 = and i1 %230, %231
  br i1 %232, label %361, label %233

233:                                              ; preds = %218
  %234 = getelementptr i16, i16* %221, i64 64
  %235 = bitcast i16* %221 to <8 x i16>*
  %236 = load <8 x i16>, <8 x i16>* %235, align 2, !alias.scope !44
  %237 = zext <8 x i16> %236 to <8 x i32>
  %238 = mul nuw nsw <8 x i32> %215, %237
  %239 = getelementptr inbounds i16, i16* %221, i64 64
  %240 = bitcast i16* %239 to <8 x i16>*
  %241 = load <8 x i16>, <8 x i16>* %240, align 2, !alias.scope !44
  %242 = zext <8 x i16> %241 to <8 x i32>
  %243 = mul nuw nsw <8 x i32> %217, %242
  %244 = add nuw nsw <8 x i32> %238, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %245 = add nuw nsw <8 x i32> %244, %243
  %246 = lshr <8 x i32> %245, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %247 = trunc <8 x i32> %246 to <8 x i8>
  %248 = bitcast i8* %222 to <8 x i8>*
  store <8 x i8> %247, <8 x i8>* %248, align 1, !alias.scope !47, !noalias !44
  %249 = getelementptr i16, i16* %221, i64 8
  %250 = bitcast i16* %249 to <8 x i16>*
  %251 = load <8 x i16>, <8 x i16>* %250, align 2, !alias.scope !44
  %252 = zext <8 x i16> %251 to <8 x i32>
  %253 = mul nuw nsw <8 x i32> %215, %252
  %254 = getelementptr inbounds i16, i16* %221, i64 72
  %255 = bitcast i16* %254 to <8 x i16>*
  %256 = load <8 x i16>, <8 x i16>* %255, align 2, !alias.scope !44
  %257 = zext <8 x i16> %256 to <8 x i32>
  %258 = mul nuw nsw <8 x i32> %217, %257
  %259 = add nuw nsw <8 x i32> %253, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %260 = add nuw nsw <8 x i32> %259, %258
  %261 = lshr <8 x i32> %260, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %262 = trunc <8 x i32> %261 to <8 x i8>
  %263 = getelementptr inbounds i8, i8* %222, i64 8
  %264 = bitcast i8* %263 to <8 x i8>*
  store <8 x i8> %262, <8 x i8>* %264, align 1, !alias.scope !47, !noalias !44
  %265 = getelementptr i16, i16* %221, i64 16
  %266 = bitcast i16* %265 to <8 x i16>*
  %267 = load <8 x i16>, <8 x i16>* %266, align 2, !alias.scope !44
  %268 = zext <8 x i16> %267 to <8 x i32>
  %269 = mul nuw nsw <8 x i32> %215, %268
  %270 = getelementptr inbounds i16, i16* %221, i64 80
  %271 = bitcast i16* %270 to <8 x i16>*
  %272 = load <8 x i16>, <8 x i16>* %271, align 2, !alias.scope !44
  %273 = zext <8 x i16> %272 to <8 x i32>
  %274 = mul nuw nsw <8 x i32> %217, %273
  %275 = add nuw nsw <8 x i32> %269, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %276 = add nuw nsw <8 x i32> %275, %274
  %277 = lshr <8 x i32> %276, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %278 = trunc <8 x i32> %277 to <8 x i8>
  %279 = getelementptr inbounds i8, i8* %222, i64 16
  %280 = bitcast i8* %279 to <8 x i8>*
  store <8 x i8> %278, <8 x i8>* %280, align 1, !alias.scope !47, !noalias !44
  %281 = getelementptr i16, i16* %221, i64 24
  %282 = bitcast i16* %281 to <8 x i16>*
  %283 = load <8 x i16>, <8 x i16>* %282, align 2, !alias.scope !44
  %284 = zext <8 x i16> %283 to <8 x i32>
  %285 = mul nuw nsw <8 x i32> %215, %284
  %286 = getelementptr inbounds i16, i16* %221, i64 88
  %287 = bitcast i16* %286 to <8 x i16>*
  %288 = load <8 x i16>, <8 x i16>* %287, align 2, !alias.scope !44
  %289 = zext <8 x i16> %288 to <8 x i32>
  %290 = mul nuw nsw <8 x i32> %217, %289
  %291 = add nuw nsw <8 x i32> %285, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %292 = add nuw nsw <8 x i32> %291, %290
  %293 = lshr <8 x i32> %292, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %294 = trunc <8 x i32> %293 to <8 x i8>
  %295 = getelementptr inbounds i8, i8* %222, i64 24
  %296 = bitcast i8* %295 to <8 x i8>*
  store <8 x i8> %294, <8 x i8>* %296, align 1, !alias.scope !47, !noalias !44
  %297 = getelementptr i16, i16* %221, i64 32
  %298 = bitcast i16* %297 to <8 x i16>*
  %299 = load <8 x i16>, <8 x i16>* %298, align 2, !alias.scope !44
  %300 = zext <8 x i16> %299 to <8 x i32>
  %301 = mul nuw nsw <8 x i32> %215, %300
  %302 = getelementptr inbounds i16, i16* %221, i64 96
  %303 = bitcast i16* %302 to <8 x i16>*
  %304 = load <8 x i16>, <8 x i16>* %303, align 2, !alias.scope !44
  %305 = zext <8 x i16> %304 to <8 x i32>
  %306 = mul nuw nsw <8 x i32> %217, %305
  %307 = add nuw nsw <8 x i32> %301, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %308 = add nuw nsw <8 x i32> %307, %306
  %309 = lshr <8 x i32> %308, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %310 = trunc <8 x i32> %309 to <8 x i8>
  %311 = getelementptr inbounds i8, i8* %222, i64 32
  %312 = bitcast i8* %311 to <8 x i8>*
  store <8 x i8> %310, <8 x i8>* %312, align 1, !alias.scope !47, !noalias !44
  %313 = getelementptr i16, i16* %221, i64 40
  %314 = bitcast i16* %313 to <8 x i16>*
  %315 = load <8 x i16>, <8 x i16>* %314, align 2, !alias.scope !44
  %316 = zext <8 x i16> %315 to <8 x i32>
  %317 = mul nuw nsw <8 x i32> %215, %316
  %318 = getelementptr inbounds i16, i16* %221, i64 104
  %319 = bitcast i16* %318 to <8 x i16>*
  %320 = load <8 x i16>, <8 x i16>* %319, align 2, !alias.scope !44
  %321 = zext <8 x i16> %320 to <8 x i32>
  %322 = mul nuw nsw <8 x i32> %217, %321
  %323 = add nuw nsw <8 x i32> %317, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %324 = add nuw nsw <8 x i32> %323, %322
  %325 = lshr <8 x i32> %324, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %326 = trunc <8 x i32> %325 to <8 x i8>
  %327 = getelementptr inbounds i8, i8* %222, i64 40
  %328 = bitcast i8* %327 to <8 x i8>*
  store <8 x i8> %326, <8 x i8>* %328, align 1, !alias.scope !47, !noalias !44
  %329 = getelementptr i16, i16* %221, i64 48
  %330 = bitcast i16* %329 to <8 x i16>*
  %331 = load <8 x i16>, <8 x i16>* %330, align 2, !alias.scope !44
  %332 = zext <8 x i16> %331 to <8 x i32>
  %333 = mul nuw nsw <8 x i32> %215, %332
  %334 = getelementptr inbounds i16, i16* %221, i64 112
  %335 = bitcast i16* %334 to <8 x i16>*
  %336 = load <8 x i16>, <8 x i16>* %335, align 2, !alias.scope !44
  %337 = zext <8 x i16> %336 to <8 x i32>
  %338 = mul nuw nsw <8 x i32> %217, %337
  %339 = add nuw nsw <8 x i32> %333, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %340 = add nuw nsw <8 x i32> %339, %338
  %341 = lshr <8 x i32> %340, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %342 = trunc <8 x i32> %341 to <8 x i8>
  %343 = getelementptr inbounds i8, i8* %222, i64 48
  %344 = bitcast i8* %343 to <8 x i8>*
  store <8 x i8> %342, <8 x i8>* %344, align 1, !alias.scope !47, !noalias !44
  %345 = getelementptr i16, i16* %221, i64 56
  %346 = bitcast i16* %345 to <8 x i16>*
  %347 = load <8 x i16>, <8 x i16>* %346, align 2, !alias.scope !44
  %348 = zext <8 x i16> %347 to <8 x i32>
  %349 = mul nuw nsw <8 x i32> %215, %348
  %350 = getelementptr inbounds i16, i16* %221, i64 120
  %351 = bitcast i16* %350 to <8 x i16>*
  %352 = load <8 x i16>, <8 x i16>* %351, align 2, !alias.scope !44
  %353 = zext <8 x i16> %352 to <8 x i32>
  %354 = mul nuw nsw <8 x i32> %217, %353
  %355 = add nuw nsw <8 x i32> %349, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %356 = add nuw nsw <8 x i32> %355, %354
  %357 = lshr <8 x i32> %356, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %358 = trunc <8 x i32> %357 to <8 x i8>
  %359 = getelementptr inbounds i8, i8* %222, i64 56
  %360 = bitcast i8* %359 to <8 x i8>*
  store <8 x i8> %358, <8 x i8>* %360, align 1, !alias.scope !47, !noalias !44
  br label %393

361:                                              ; preds = %218, %361
  %362 = phi i64 [ %391, %361 ], [ 0, %218 ]
  %363 = phi i16* [ %390, %361 ], [ %221, %218 ]
  %364 = load i16, i16* %363, align 2
  %365 = zext i16 %364 to i32
  %366 = mul nuw nsw i32 %211, %365
  %367 = getelementptr inbounds i16, i16* %363, i64 64
  %368 = load i16, i16* %367, align 2
  %369 = zext i16 %368 to i32
  %370 = mul nuw nsw i32 %213, %369
  %371 = add nuw nsw i32 %366, 64
  %372 = add nuw nsw i32 %371, %370
  %373 = lshr i32 %372, 7
  %374 = trunc i32 %373 to i8
  %375 = getelementptr inbounds i8, i8* %222, i64 %362
  store i8 %374, i8* %375, align 1
  %376 = getelementptr inbounds i16, i16* %363, i64 1
  %377 = or i64 %362, 1
  %378 = load i16, i16* %376, align 2
  %379 = zext i16 %378 to i32
  %380 = mul nuw nsw i32 %211, %379
  %381 = getelementptr inbounds i16, i16* %363, i64 65
  %382 = load i16, i16* %381, align 2
  %383 = zext i16 %382 to i32
  %384 = mul nuw nsw i32 %213, %383
  %385 = add nuw nsw i32 %380, 64
  %386 = add nuw nsw i32 %385, %384
  %387 = lshr i32 %386, 7
  %388 = trunc i32 %387 to i8
  %389 = getelementptr inbounds i8, i8* %222, i64 %377
  store i8 %388, i8* %389, align 1
  %390 = getelementptr inbounds i16, i16* %363, i64 2
  %391 = add nuw nsw i64 %362, 2
  %392 = icmp eq i64 %391, 64
  br i1 %392, label %393, label %361, !llvm.loop !49

393:                                              ; preds = %361, %233
  %394 = phi i16* [ %234, %233 ], [ %390, %361 ]
  %395 = getelementptr inbounds i8, i8* %222, i64 64
  %396 = add nuw nsw i32 %220, 1
  %397 = icmp eq i32 %396, 32
  %398 = add i64 %219, 1
  br i1 %397, label %399, label %218

399:                                              ; preds = %393
  store i32 0, i32* %6, align 4
  %400 = sext i32 %5 to i64
  br label %401

401:                                              ; preds = %434, %399
  %402 = phi i32 [ 0, %399 ], [ %431, %434 ]
  %403 = phi i32 [ 0, %399 ], [ %429, %434 ]
  %404 = phi i8* [ %11, %399 ], [ %435, %434 ]
  %405 = phi i32 [ 0, %399 ], [ %437, %434 ]
  %406 = phi i8* [ %4, %399 ], [ %436, %434 ]
  br label %407

407:                                              ; preds = %407, %401
  %408 = phi i32 [ %402, %401 ], [ %431, %407 ]
  %409 = phi i32 [ %403, %401 ], [ %429, %407 ]
  %410 = phi i64 [ 0, %401 ], [ %432, %407 ]
  %411 = getelementptr inbounds i8, i8* %404, i64 %410
  %412 = load i8, i8* %411, align 1
  %413 = zext i8 %412 to i32
  %414 = getelementptr inbounds i8, i8* %406, i64 %410
  %415 = load i8, i8* %414, align 1
  %416 = zext i8 %415 to i32
  %417 = sub nsw i32 %413, %416
  %418 = add nsw i32 %417, %409
  %419 = mul nsw i32 %417, %417
  %420 = add i32 %419, %408
  store i32 %420, i32* %6, align 4
  %421 = or i64 %410, 1
  %422 = getelementptr inbounds i8, i8* %404, i64 %421
  %423 = load i8, i8* %422, align 1
  %424 = zext i8 %423 to i32
  %425 = getelementptr inbounds i8, i8* %406, i64 %421
  %426 = load i8, i8* %425, align 1
  %427 = zext i8 %426 to i32
  %428 = sub nsw i32 %424, %427
  %429 = add nsw i32 %428, %418
  %430 = mul nsw i32 %428, %428
  %431 = add i32 %430, %420
  store i32 %431, i32* %6, align 4
  %432 = add nuw nsw i64 %410, 2
  %433 = icmp eq i64 %432, 64
  br i1 %433, label %434, label %407

434:                                              ; preds = %407
  %435 = getelementptr inbounds i8, i8* %404, i64 64
  %436 = getelementptr inbounds i8, i8* %406, i64 %400
  %437 = add nuw nsw i32 %405, 1
  %438 = icmp eq i32 %437, 32
  br i1 %438, label %439, label %401

439:                                              ; preds = %434
  %440 = sext i32 %429 to i64
  %441 = mul nsw i64 %440, %440
  %442 = lshr i64 %441, 11
  %443 = trunc i64 %442 to i32
  %444 = sub i32 %431, %443
  call void @llvm.lifetime.end.p0i8(i64 2048, i8* nonnull %11) #4
  call void @llvm.lifetime.end.p0i8(i64 4224, i8* nonnull %10) #4
  ret i32 %444
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_sub_pixel_avg_variance64x32_c(i8* nocapture readonly, i32, i32, i32, i8* nocapture readonly, i32, i32* nocapture, i8* nocapture readonly) local_unnamed_addr #2 {
  %9 = alloca [2112 x i16], align 16
  %10 = alloca [2048 x i8], align 16
  %11 = alloca [2048 x i8], align 16
  %12 = bitcast [2112 x i16]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4224, i8* nonnull %12) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %12, i8 -86, i64 4224, i1 false)
  %13 = getelementptr inbounds [2048 x i8], [2048 x i8]* %10, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 2048, i8* nonnull %13) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %13, i8 -86, i64 2048, i1 false)
  %14 = getelementptr inbounds [2048 x i8], [2048 x i8]* %11, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 2048, i8* nonnull %14) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %14, i8 -86, i64 2048, i1 false)
  %15 = getelementptr inbounds [2112 x i16], [2112 x i16]* %9, i64 0, i64 0
  %16 = sext i32 %2 to i64
  %17 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %16, i64 0
  %18 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %16, i64 1
  %19 = add i32 %1, -64
  %20 = zext i32 %19 to i64
  %21 = load i8, i8* %17, align 2
  %22 = zext i8 %21 to i32
  %23 = load i8, i8* %18, align 1
  %24 = zext i8 %23 to i32
  %25 = insertelement <8 x i32> undef, i32 %22, i32 0
  %26 = shufflevector <8 x i32> %25, <8 x i32> undef, <8 x i32> zeroinitializer
  %27 = insertelement <8 x i32> undef, i32 %24, i32 0
  %28 = shufflevector <8 x i32> %27, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %29

29:                                               ; preds = %202, %8
  %30 = phi i64 [ %208, %202 ], [ 0, %8 ]
  %31 = phi i32 [ %206, %202 ], [ 0, %8 ]
  %32 = phi i8* [ %204, %202 ], [ %0, %8 ]
  %33 = phi i16* [ %205, %202 ], [ %15, %8 ]
  %34 = shl nuw nsw i64 %30, 6
  %35 = add i64 %34, 64
  %36 = getelementptr [2112 x i16], [2112 x i16]* %9, i64 0, i64 %35
  %37 = bitcast i16* %36 to i8*
  %38 = getelementptr [2112 x i16], [2112 x i16]* %9, i64 0, i64 %34
  %39 = bitcast i16* %38 to i8*
  %40 = getelementptr i8, i8* %32, i64 65
  %41 = icmp ugt i8* %40, %39
  %42 = icmp ult i8* %32, %37
  %43 = and i1 %41, %42
  br i1 %43, label %172, label %44

44:                                               ; preds = %29
  %45 = getelementptr i8, i8* %32, i64 64
  %46 = bitcast i8* %32 to <8 x i8>*
  %47 = load <8 x i8>, <8 x i8>* %46, align 1, !alias.scope !50
  %48 = zext <8 x i8> %47 to <8 x i32>
  %49 = mul nuw nsw <8 x i32> %26, %48
  %50 = getelementptr inbounds i8, i8* %32, i64 1
  %51 = bitcast i8* %50 to <8 x i8>*
  %52 = load <8 x i8>, <8 x i8>* %51, align 1, !alias.scope !50
  %53 = zext <8 x i8> %52 to <8 x i32>
  %54 = mul nuw nsw <8 x i32> %28, %53
  %55 = add nuw nsw <8 x i32> %49, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %56 = add nuw nsw <8 x i32> %55, %54
  %57 = lshr <8 x i32> %56, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %58 = trunc <8 x i32> %57 to <8 x i16>
  %59 = bitcast i16* %33 to <8 x i16>*
  store <8 x i16> %58, <8 x i16>* %59, align 2, !alias.scope !53, !noalias !50
  %60 = getelementptr i8, i8* %32, i64 8
  %61 = bitcast i8* %60 to <8 x i8>*
  %62 = load <8 x i8>, <8 x i8>* %61, align 1, !alias.scope !50
  %63 = zext <8 x i8> %62 to <8 x i32>
  %64 = mul nuw nsw <8 x i32> %26, %63
  %65 = getelementptr inbounds i8, i8* %32, i64 9
  %66 = bitcast i8* %65 to <8 x i8>*
  %67 = load <8 x i8>, <8 x i8>* %66, align 1, !alias.scope !50
  %68 = zext <8 x i8> %67 to <8 x i32>
  %69 = mul nuw nsw <8 x i32> %28, %68
  %70 = add nuw nsw <8 x i32> %64, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %71 = add nuw nsw <8 x i32> %70, %69
  %72 = lshr <8 x i32> %71, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %73 = trunc <8 x i32> %72 to <8 x i16>
  %74 = getelementptr inbounds i16, i16* %33, i64 8
  %75 = bitcast i16* %74 to <8 x i16>*
  store <8 x i16> %73, <8 x i16>* %75, align 2, !alias.scope !53, !noalias !50
  %76 = getelementptr i8, i8* %32, i64 16
  %77 = bitcast i8* %76 to <8 x i8>*
  %78 = load <8 x i8>, <8 x i8>* %77, align 1, !alias.scope !50
  %79 = zext <8 x i8> %78 to <8 x i32>
  %80 = mul nuw nsw <8 x i32> %26, %79
  %81 = getelementptr inbounds i8, i8* %32, i64 17
  %82 = bitcast i8* %81 to <8 x i8>*
  %83 = load <8 x i8>, <8 x i8>* %82, align 1, !alias.scope !50
  %84 = zext <8 x i8> %83 to <8 x i32>
  %85 = mul nuw nsw <8 x i32> %28, %84
  %86 = add nuw nsw <8 x i32> %80, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %87 = add nuw nsw <8 x i32> %86, %85
  %88 = lshr <8 x i32> %87, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %89 = trunc <8 x i32> %88 to <8 x i16>
  %90 = getelementptr inbounds i16, i16* %33, i64 16
  %91 = bitcast i16* %90 to <8 x i16>*
  store <8 x i16> %89, <8 x i16>* %91, align 2, !alias.scope !53, !noalias !50
  %92 = getelementptr i8, i8* %32, i64 24
  %93 = bitcast i8* %92 to <8 x i8>*
  %94 = load <8 x i8>, <8 x i8>* %93, align 1, !alias.scope !50
  %95 = zext <8 x i8> %94 to <8 x i32>
  %96 = mul nuw nsw <8 x i32> %26, %95
  %97 = getelementptr inbounds i8, i8* %32, i64 25
  %98 = bitcast i8* %97 to <8 x i8>*
  %99 = load <8 x i8>, <8 x i8>* %98, align 1, !alias.scope !50
  %100 = zext <8 x i8> %99 to <8 x i32>
  %101 = mul nuw nsw <8 x i32> %28, %100
  %102 = add nuw nsw <8 x i32> %96, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %103 = add nuw nsw <8 x i32> %102, %101
  %104 = lshr <8 x i32> %103, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %105 = trunc <8 x i32> %104 to <8 x i16>
  %106 = getelementptr inbounds i16, i16* %33, i64 24
  %107 = bitcast i16* %106 to <8 x i16>*
  store <8 x i16> %105, <8 x i16>* %107, align 2, !alias.scope !53, !noalias !50
  %108 = getelementptr i8, i8* %32, i64 32
  %109 = bitcast i8* %108 to <8 x i8>*
  %110 = load <8 x i8>, <8 x i8>* %109, align 1, !alias.scope !50
  %111 = zext <8 x i8> %110 to <8 x i32>
  %112 = mul nuw nsw <8 x i32> %26, %111
  %113 = getelementptr inbounds i8, i8* %32, i64 33
  %114 = bitcast i8* %113 to <8 x i8>*
  %115 = load <8 x i8>, <8 x i8>* %114, align 1, !alias.scope !50
  %116 = zext <8 x i8> %115 to <8 x i32>
  %117 = mul nuw nsw <8 x i32> %28, %116
  %118 = add nuw nsw <8 x i32> %112, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %119 = add nuw nsw <8 x i32> %118, %117
  %120 = lshr <8 x i32> %119, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %121 = trunc <8 x i32> %120 to <8 x i16>
  %122 = getelementptr inbounds i16, i16* %33, i64 32
  %123 = bitcast i16* %122 to <8 x i16>*
  store <8 x i16> %121, <8 x i16>* %123, align 2, !alias.scope !53, !noalias !50
  %124 = getelementptr i8, i8* %32, i64 40
  %125 = bitcast i8* %124 to <8 x i8>*
  %126 = load <8 x i8>, <8 x i8>* %125, align 1, !alias.scope !50
  %127 = zext <8 x i8> %126 to <8 x i32>
  %128 = mul nuw nsw <8 x i32> %26, %127
  %129 = getelementptr inbounds i8, i8* %32, i64 41
  %130 = bitcast i8* %129 to <8 x i8>*
  %131 = load <8 x i8>, <8 x i8>* %130, align 1, !alias.scope !50
  %132 = zext <8 x i8> %131 to <8 x i32>
  %133 = mul nuw nsw <8 x i32> %28, %132
  %134 = add nuw nsw <8 x i32> %128, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %135 = add nuw nsw <8 x i32> %134, %133
  %136 = lshr <8 x i32> %135, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %137 = trunc <8 x i32> %136 to <8 x i16>
  %138 = getelementptr inbounds i16, i16* %33, i64 40
  %139 = bitcast i16* %138 to <8 x i16>*
  store <8 x i16> %137, <8 x i16>* %139, align 2, !alias.scope !53, !noalias !50
  %140 = getelementptr i8, i8* %32, i64 48
  %141 = bitcast i8* %140 to <8 x i8>*
  %142 = load <8 x i8>, <8 x i8>* %141, align 1, !alias.scope !50
  %143 = zext <8 x i8> %142 to <8 x i32>
  %144 = mul nuw nsw <8 x i32> %26, %143
  %145 = getelementptr inbounds i8, i8* %32, i64 49
  %146 = bitcast i8* %145 to <8 x i8>*
  %147 = load <8 x i8>, <8 x i8>* %146, align 1, !alias.scope !50
  %148 = zext <8 x i8> %147 to <8 x i32>
  %149 = mul nuw nsw <8 x i32> %28, %148
  %150 = add nuw nsw <8 x i32> %144, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %151 = add nuw nsw <8 x i32> %150, %149
  %152 = lshr <8 x i32> %151, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %153 = trunc <8 x i32> %152 to <8 x i16>
  %154 = getelementptr inbounds i16, i16* %33, i64 48
  %155 = bitcast i16* %154 to <8 x i16>*
  store <8 x i16> %153, <8 x i16>* %155, align 2, !alias.scope !53, !noalias !50
  %156 = getelementptr i8, i8* %32, i64 56
  %157 = bitcast i8* %156 to <8 x i8>*
  %158 = load <8 x i8>, <8 x i8>* %157, align 1, !alias.scope !50
  %159 = zext <8 x i8> %158 to <8 x i32>
  %160 = mul nuw nsw <8 x i32> %26, %159
  %161 = getelementptr inbounds i8, i8* %32, i64 57
  %162 = bitcast i8* %161 to <8 x i8>*
  %163 = load <8 x i8>, <8 x i8>* %162, align 1, !alias.scope !50
  %164 = zext <8 x i8> %163 to <8 x i32>
  %165 = mul nuw nsw <8 x i32> %28, %164
  %166 = add nuw nsw <8 x i32> %160, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %167 = add nuw nsw <8 x i32> %166, %165
  %168 = lshr <8 x i32> %167, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %169 = trunc <8 x i32> %168 to <8 x i16>
  %170 = getelementptr inbounds i16, i16* %33, i64 56
  %171 = bitcast i16* %170 to <8 x i16>*
  store <8 x i16> %169, <8 x i16>* %171, align 2, !alias.scope !53, !noalias !50
  br label %202

172:                                              ; preds = %29, %172
  %173 = phi i64 [ %200, %172 ], [ 0, %29 ]
  %174 = phi i8* [ %191, %172 ], [ %32, %29 ]
  %175 = load i8, i8* %174, align 1
  %176 = zext i8 %175 to i32
  %177 = mul nuw nsw i32 %22, %176
  %178 = getelementptr inbounds i8, i8* %174, i64 1
  %179 = load i8, i8* %178, align 1
  %180 = zext i8 %179 to i32
  %181 = mul nuw nsw i32 %24, %180
  %182 = add nuw nsw i32 %177, 64
  %183 = add nuw nsw i32 %182, %181
  %184 = lshr i32 %183, 7
  %185 = trunc i32 %184 to i16
  %186 = getelementptr inbounds i16, i16* %33, i64 %173
  store i16 %185, i16* %186, align 2
  %187 = or i64 %173, 1
  %188 = load i8, i8* %178, align 1
  %189 = zext i8 %188 to i32
  %190 = mul nuw nsw i32 %22, %189
  %191 = getelementptr inbounds i8, i8* %174, i64 2
  %192 = load i8, i8* %191, align 1
  %193 = zext i8 %192 to i32
  %194 = mul nuw nsw i32 %24, %193
  %195 = add nuw nsw i32 %190, 64
  %196 = add nuw nsw i32 %195, %194
  %197 = lshr i32 %196, 7
  %198 = trunc i32 %197 to i16
  %199 = getelementptr inbounds i16, i16* %33, i64 %187
  store i16 %198, i16* %199, align 2
  %200 = add nuw nsw i64 %173, 2
  %201 = icmp eq i64 %200, 64
  br i1 %201, label %202, label %172, !llvm.loop !55

202:                                              ; preds = %172, %44
  %203 = phi i8* [ %45, %44 ], [ %191, %172 ]
  %204 = getelementptr inbounds i8, i8* %203, i64 %20
  %205 = getelementptr inbounds i16, i16* %33, i64 64
  %206 = add nuw nsw i32 %31, 1
  %207 = icmp eq i32 %206, 33
  %208 = add i64 %30, 1
  br i1 %207, label %209, label %29

209:                                              ; preds = %202
  %210 = sext i32 %3 to i64
  %211 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %210, i64 0
  %212 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %210, i64 1
  %213 = load i8, i8* %211, align 2
  %214 = zext i8 %213 to i32
  %215 = load i8, i8* %212, align 1
  %216 = zext i8 %215 to i32
  %217 = insertelement <8 x i32> undef, i32 %214, i32 0
  %218 = shufflevector <8 x i32> %217, <8 x i32> undef, <8 x i32> zeroinitializer
  %219 = insertelement <8 x i32> undef, i32 %216, i32 0
  %220 = shufflevector <8 x i32> %219, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %221

221:                                              ; preds = %396, %209
  %222 = phi i64 [ %401, %396 ], [ 0, %209 ]
  %223 = phi i32 [ %399, %396 ], [ 0, %209 ]
  %224 = phi i16* [ %397, %396 ], [ %15, %209 ]
  %225 = phi i8* [ %398, %396 ], [ %13, %209 ]
  %226 = shl nuw nsw i64 %222, 6
  %227 = add i64 %226, 64
  %228 = getelementptr [2048 x i8], [2048 x i8]* %10, i64 0, i64 %227
  %229 = getelementptr [2048 x i8], [2048 x i8]* %10, i64 0, i64 %226
  %230 = bitcast i16* %224 to i8*
  %231 = getelementptr i16, i16* %224, i64 128
  %232 = bitcast i16* %231 to i8*
  %233 = icmp ult i8* %229, %232
  %234 = icmp ugt i8* %228, %230
  %235 = and i1 %233, %234
  br i1 %235, label %364, label %236

236:                                              ; preds = %221
  %237 = getelementptr i16, i16* %224, i64 64
  %238 = bitcast i16* %224 to <8 x i16>*
  %239 = load <8 x i16>, <8 x i16>* %238, align 2, !alias.scope !56
  %240 = zext <8 x i16> %239 to <8 x i32>
  %241 = mul nuw nsw <8 x i32> %218, %240
  %242 = getelementptr inbounds i16, i16* %224, i64 64
  %243 = bitcast i16* %242 to <8 x i16>*
  %244 = load <8 x i16>, <8 x i16>* %243, align 2, !alias.scope !56
  %245 = zext <8 x i16> %244 to <8 x i32>
  %246 = mul nuw nsw <8 x i32> %220, %245
  %247 = add nuw nsw <8 x i32> %241, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %248 = add nuw nsw <8 x i32> %247, %246
  %249 = lshr <8 x i32> %248, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %250 = trunc <8 x i32> %249 to <8 x i8>
  %251 = bitcast i8* %225 to <8 x i8>*
  store <8 x i8> %250, <8 x i8>* %251, align 1, !alias.scope !59, !noalias !56
  %252 = getelementptr i16, i16* %224, i64 8
  %253 = bitcast i16* %252 to <8 x i16>*
  %254 = load <8 x i16>, <8 x i16>* %253, align 2, !alias.scope !56
  %255 = zext <8 x i16> %254 to <8 x i32>
  %256 = mul nuw nsw <8 x i32> %218, %255
  %257 = getelementptr inbounds i16, i16* %224, i64 72
  %258 = bitcast i16* %257 to <8 x i16>*
  %259 = load <8 x i16>, <8 x i16>* %258, align 2, !alias.scope !56
  %260 = zext <8 x i16> %259 to <8 x i32>
  %261 = mul nuw nsw <8 x i32> %220, %260
  %262 = add nuw nsw <8 x i32> %256, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %263 = add nuw nsw <8 x i32> %262, %261
  %264 = lshr <8 x i32> %263, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %265 = trunc <8 x i32> %264 to <8 x i8>
  %266 = getelementptr inbounds i8, i8* %225, i64 8
  %267 = bitcast i8* %266 to <8 x i8>*
  store <8 x i8> %265, <8 x i8>* %267, align 1, !alias.scope !59, !noalias !56
  %268 = getelementptr i16, i16* %224, i64 16
  %269 = bitcast i16* %268 to <8 x i16>*
  %270 = load <8 x i16>, <8 x i16>* %269, align 2, !alias.scope !56
  %271 = zext <8 x i16> %270 to <8 x i32>
  %272 = mul nuw nsw <8 x i32> %218, %271
  %273 = getelementptr inbounds i16, i16* %224, i64 80
  %274 = bitcast i16* %273 to <8 x i16>*
  %275 = load <8 x i16>, <8 x i16>* %274, align 2, !alias.scope !56
  %276 = zext <8 x i16> %275 to <8 x i32>
  %277 = mul nuw nsw <8 x i32> %220, %276
  %278 = add nuw nsw <8 x i32> %272, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %279 = add nuw nsw <8 x i32> %278, %277
  %280 = lshr <8 x i32> %279, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %281 = trunc <8 x i32> %280 to <8 x i8>
  %282 = getelementptr inbounds i8, i8* %225, i64 16
  %283 = bitcast i8* %282 to <8 x i8>*
  store <8 x i8> %281, <8 x i8>* %283, align 1, !alias.scope !59, !noalias !56
  %284 = getelementptr i16, i16* %224, i64 24
  %285 = bitcast i16* %284 to <8 x i16>*
  %286 = load <8 x i16>, <8 x i16>* %285, align 2, !alias.scope !56
  %287 = zext <8 x i16> %286 to <8 x i32>
  %288 = mul nuw nsw <8 x i32> %218, %287
  %289 = getelementptr inbounds i16, i16* %224, i64 88
  %290 = bitcast i16* %289 to <8 x i16>*
  %291 = load <8 x i16>, <8 x i16>* %290, align 2, !alias.scope !56
  %292 = zext <8 x i16> %291 to <8 x i32>
  %293 = mul nuw nsw <8 x i32> %220, %292
  %294 = add nuw nsw <8 x i32> %288, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %295 = add nuw nsw <8 x i32> %294, %293
  %296 = lshr <8 x i32> %295, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %297 = trunc <8 x i32> %296 to <8 x i8>
  %298 = getelementptr inbounds i8, i8* %225, i64 24
  %299 = bitcast i8* %298 to <8 x i8>*
  store <8 x i8> %297, <8 x i8>* %299, align 1, !alias.scope !59, !noalias !56
  %300 = getelementptr i16, i16* %224, i64 32
  %301 = bitcast i16* %300 to <8 x i16>*
  %302 = load <8 x i16>, <8 x i16>* %301, align 2, !alias.scope !56
  %303 = zext <8 x i16> %302 to <8 x i32>
  %304 = mul nuw nsw <8 x i32> %218, %303
  %305 = getelementptr inbounds i16, i16* %224, i64 96
  %306 = bitcast i16* %305 to <8 x i16>*
  %307 = load <8 x i16>, <8 x i16>* %306, align 2, !alias.scope !56
  %308 = zext <8 x i16> %307 to <8 x i32>
  %309 = mul nuw nsw <8 x i32> %220, %308
  %310 = add nuw nsw <8 x i32> %304, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %311 = add nuw nsw <8 x i32> %310, %309
  %312 = lshr <8 x i32> %311, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %313 = trunc <8 x i32> %312 to <8 x i8>
  %314 = getelementptr inbounds i8, i8* %225, i64 32
  %315 = bitcast i8* %314 to <8 x i8>*
  store <8 x i8> %313, <8 x i8>* %315, align 1, !alias.scope !59, !noalias !56
  %316 = getelementptr i16, i16* %224, i64 40
  %317 = bitcast i16* %316 to <8 x i16>*
  %318 = load <8 x i16>, <8 x i16>* %317, align 2, !alias.scope !56
  %319 = zext <8 x i16> %318 to <8 x i32>
  %320 = mul nuw nsw <8 x i32> %218, %319
  %321 = getelementptr inbounds i16, i16* %224, i64 104
  %322 = bitcast i16* %321 to <8 x i16>*
  %323 = load <8 x i16>, <8 x i16>* %322, align 2, !alias.scope !56
  %324 = zext <8 x i16> %323 to <8 x i32>
  %325 = mul nuw nsw <8 x i32> %220, %324
  %326 = add nuw nsw <8 x i32> %320, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %327 = add nuw nsw <8 x i32> %326, %325
  %328 = lshr <8 x i32> %327, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %329 = trunc <8 x i32> %328 to <8 x i8>
  %330 = getelementptr inbounds i8, i8* %225, i64 40
  %331 = bitcast i8* %330 to <8 x i8>*
  store <8 x i8> %329, <8 x i8>* %331, align 1, !alias.scope !59, !noalias !56
  %332 = getelementptr i16, i16* %224, i64 48
  %333 = bitcast i16* %332 to <8 x i16>*
  %334 = load <8 x i16>, <8 x i16>* %333, align 2, !alias.scope !56
  %335 = zext <8 x i16> %334 to <8 x i32>
  %336 = mul nuw nsw <8 x i32> %218, %335
  %337 = getelementptr inbounds i16, i16* %224, i64 112
  %338 = bitcast i16* %337 to <8 x i16>*
  %339 = load <8 x i16>, <8 x i16>* %338, align 2, !alias.scope !56
  %340 = zext <8 x i16> %339 to <8 x i32>
  %341 = mul nuw nsw <8 x i32> %220, %340
  %342 = add nuw nsw <8 x i32> %336, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %343 = add nuw nsw <8 x i32> %342, %341
  %344 = lshr <8 x i32> %343, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %345 = trunc <8 x i32> %344 to <8 x i8>
  %346 = getelementptr inbounds i8, i8* %225, i64 48
  %347 = bitcast i8* %346 to <8 x i8>*
  store <8 x i8> %345, <8 x i8>* %347, align 1, !alias.scope !59, !noalias !56
  %348 = getelementptr i16, i16* %224, i64 56
  %349 = bitcast i16* %348 to <8 x i16>*
  %350 = load <8 x i16>, <8 x i16>* %349, align 2, !alias.scope !56
  %351 = zext <8 x i16> %350 to <8 x i32>
  %352 = mul nuw nsw <8 x i32> %218, %351
  %353 = getelementptr inbounds i16, i16* %224, i64 120
  %354 = bitcast i16* %353 to <8 x i16>*
  %355 = load <8 x i16>, <8 x i16>* %354, align 2, !alias.scope !56
  %356 = zext <8 x i16> %355 to <8 x i32>
  %357 = mul nuw nsw <8 x i32> %220, %356
  %358 = add nuw nsw <8 x i32> %352, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %359 = add nuw nsw <8 x i32> %358, %357
  %360 = lshr <8 x i32> %359, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %361 = trunc <8 x i32> %360 to <8 x i8>
  %362 = getelementptr inbounds i8, i8* %225, i64 56
  %363 = bitcast i8* %362 to <8 x i8>*
  store <8 x i8> %361, <8 x i8>* %363, align 1, !alias.scope !59, !noalias !56
  br label %396

364:                                              ; preds = %221, %364
  %365 = phi i64 [ %394, %364 ], [ 0, %221 ]
  %366 = phi i16* [ %393, %364 ], [ %224, %221 ]
  %367 = load i16, i16* %366, align 2
  %368 = zext i16 %367 to i32
  %369 = mul nuw nsw i32 %214, %368
  %370 = getelementptr inbounds i16, i16* %366, i64 64
  %371 = load i16, i16* %370, align 2
  %372 = zext i16 %371 to i32
  %373 = mul nuw nsw i32 %216, %372
  %374 = add nuw nsw i32 %369, 64
  %375 = add nuw nsw i32 %374, %373
  %376 = lshr i32 %375, 7
  %377 = trunc i32 %376 to i8
  %378 = getelementptr inbounds i8, i8* %225, i64 %365
  store i8 %377, i8* %378, align 1
  %379 = getelementptr inbounds i16, i16* %366, i64 1
  %380 = or i64 %365, 1
  %381 = load i16, i16* %379, align 2
  %382 = zext i16 %381 to i32
  %383 = mul nuw nsw i32 %214, %382
  %384 = getelementptr inbounds i16, i16* %366, i64 65
  %385 = load i16, i16* %384, align 2
  %386 = zext i16 %385 to i32
  %387 = mul nuw nsw i32 %216, %386
  %388 = add nuw nsw i32 %383, 64
  %389 = add nuw nsw i32 %388, %387
  %390 = lshr i32 %389, 7
  %391 = trunc i32 %390 to i8
  %392 = getelementptr inbounds i8, i8* %225, i64 %380
  store i8 %391, i8* %392, align 1
  %393 = getelementptr inbounds i16, i16* %366, i64 2
  %394 = add nuw nsw i64 %365, 2
  %395 = icmp eq i64 %394, 64
  br i1 %395, label %396, label %364, !llvm.loop !61

396:                                              ; preds = %364, %236
  %397 = phi i16* [ %237, %236 ], [ %393, %364 ]
  %398 = getelementptr inbounds i8, i8* %225, i64 64
  %399 = add nuw nsw i32 %223, 1
  %400 = icmp eq i32 %399, 32
  %401 = add i64 %222, 1
  br i1 %400, label %402, label %221

402:                                              ; preds = %396, %402
  %403 = phi i8* [ %460, %402 ], [ %14, %396 ]
  %404 = phi i32 [ %463, %402 ], [ 0, %396 ]
  %405 = phi i8* [ %461, %402 ], [ %7, %396 ]
  %406 = phi i8* [ %462, %402 ], [ %13, %396 ]
  %407 = bitcast i8* %405 to <16 x i8>*
  %408 = load <16 x i8>, <16 x i8>* %407, align 1
  %409 = zext <16 x i8> %408 to <16 x i32>
  %410 = bitcast i8* %406 to <16 x i8>*
  %411 = load <16 x i8>, <16 x i8>* %410, align 1
  %412 = zext <16 x i8> %411 to <16 x i32>
  %413 = add nuw nsw <16 x i32> %409, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %414 = add nuw nsw <16 x i32> %413, %412
  %415 = lshr <16 x i32> %414, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %416 = trunc <16 x i32> %415 to <16 x i8>
  %417 = bitcast i8* %403 to <16 x i8>*
  store <16 x i8> %416, <16 x i8>* %417, align 1
  %418 = getelementptr inbounds i8, i8* %405, i64 16
  %419 = bitcast i8* %418 to <16 x i8>*
  %420 = load <16 x i8>, <16 x i8>* %419, align 1
  %421 = zext <16 x i8> %420 to <16 x i32>
  %422 = getelementptr inbounds i8, i8* %406, i64 16
  %423 = bitcast i8* %422 to <16 x i8>*
  %424 = load <16 x i8>, <16 x i8>* %423, align 1
  %425 = zext <16 x i8> %424 to <16 x i32>
  %426 = add nuw nsw <16 x i32> %421, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %427 = add nuw nsw <16 x i32> %426, %425
  %428 = lshr <16 x i32> %427, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %429 = trunc <16 x i32> %428 to <16 x i8>
  %430 = getelementptr inbounds i8, i8* %403, i64 16
  %431 = bitcast i8* %430 to <16 x i8>*
  store <16 x i8> %429, <16 x i8>* %431, align 1
  %432 = getelementptr inbounds i8, i8* %405, i64 32
  %433 = bitcast i8* %432 to <16 x i8>*
  %434 = load <16 x i8>, <16 x i8>* %433, align 1
  %435 = zext <16 x i8> %434 to <16 x i32>
  %436 = getelementptr inbounds i8, i8* %406, i64 32
  %437 = bitcast i8* %436 to <16 x i8>*
  %438 = load <16 x i8>, <16 x i8>* %437, align 1
  %439 = zext <16 x i8> %438 to <16 x i32>
  %440 = add nuw nsw <16 x i32> %435, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %441 = add nuw nsw <16 x i32> %440, %439
  %442 = lshr <16 x i32> %441, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %443 = trunc <16 x i32> %442 to <16 x i8>
  %444 = getelementptr inbounds i8, i8* %403, i64 32
  %445 = bitcast i8* %444 to <16 x i8>*
  store <16 x i8> %443, <16 x i8>* %445, align 1
  %446 = getelementptr inbounds i8, i8* %405, i64 48
  %447 = bitcast i8* %446 to <16 x i8>*
  %448 = load <16 x i8>, <16 x i8>* %447, align 1
  %449 = zext <16 x i8> %448 to <16 x i32>
  %450 = getelementptr inbounds i8, i8* %406, i64 48
  %451 = bitcast i8* %450 to <16 x i8>*
  %452 = load <16 x i8>, <16 x i8>* %451, align 1
  %453 = zext <16 x i8> %452 to <16 x i32>
  %454 = add nuw nsw <16 x i32> %449, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %455 = add nuw nsw <16 x i32> %454, %453
  %456 = lshr <16 x i32> %455, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %457 = trunc <16 x i32> %456 to <16 x i8>
  %458 = getelementptr inbounds i8, i8* %403, i64 48
  %459 = bitcast i8* %458 to <16 x i8>*
  store <16 x i8> %457, <16 x i8>* %459, align 1
  %460 = getelementptr inbounds i8, i8* %403, i64 64
  %461 = getelementptr inbounds i8, i8* %405, i64 64
  %462 = getelementptr inbounds i8, i8* %406, i64 64
  %463 = add nuw nsw i32 %404, 1
  %464 = icmp eq i32 %463, 32
  br i1 %464, label %465, label %402

465:                                              ; preds = %402
  store i32 0, i32* %6, align 4
  %466 = sext i32 %5 to i64
  br label %467

467:                                              ; preds = %500, %465
  %468 = phi i32 [ 0, %465 ], [ %497, %500 ]
  %469 = phi i32 [ 0, %465 ], [ %495, %500 ]
  %470 = phi i8* [ %14, %465 ], [ %501, %500 ]
  %471 = phi i32 [ 0, %465 ], [ %503, %500 ]
  %472 = phi i8* [ %4, %465 ], [ %502, %500 ]
  br label %473

473:                                              ; preds = %473, %467
  %474 = phi i32 [ %468, %467 ], [ %497, %473 ]
  %475 = phi i32 [ %469, %467 ], [ %495, %473 ]
  %476 = phi i64 [ 0, %467 ], [ %498, %473 ]
  %477 = getelementptr inbounds i8, i8* %470, i64 %476
  %478 = load i8, i8* %477, align 1
  %479 = zext i8 %478 to i32
  %480 = getelementptr inbounds i8, i8* %472, i64 %476
  %481 = load i8, i8* %480, align 1
  %482 = zext i8 %481 to i32
  %483 = sub nsw i32 %479, %482
  %484 = add nsw i32 %483, %475
  %485 = mul nsw i32 %483, %483
  %486 = add i32 %485, %474
  store i32 %486, i32* %6, align 4
  %487 = or i64 %476, 1
  %488 = getelementptr inbounds i8, i8* %470, i64 %487
  %489 = load i8, i8* %488, align 1
  %490 = zext i8 %489 to i32
  %491 = getelementptr inbounds i8, i8* %472, i64 %487
  %492 = load i8, i8* %491, align 1
  %493 = zext i8 %492 to i32
  %494 = sub nsw i32 %490, %493
  %495 = add nsw i32 %494, %484
  %496 = mul nsw i32 %494, %494
  %497 = add i32 %496, %486
  store i32 %497, i32* %6, align 4
  %498 = add nuw nsw i64 %476, 2
  %499 = icmp eq i64 %498, 64
  br i1 %499, label %500, label %473

500:                                              ; preds = %473
  %501 = getelementptr inbounds i8, i8* %470, i64 64
  %502 = getelementptr inbounds i8, i8* %472, i64 %466
  %503 = add nuw nsw i32 %471, 1
  %504 = icmp eq i32 %503, 32
  br i1 %504, label %505, label %467

505:                                              ; preds = %500
  %506 = sext i32 %495 to i64
  %507 = mul nsw i64 %506, %506
  %508 = lshr i64 %507, 11
  %509 = trunc i64 %508 to i32
  %510 = sub i32 %497, %509
  call void @llvm.lifetime.end.p0i8(i64 2048, i8* nonnull %14) #4
  call void @llvm.lifetime.end.p0i8(i64 2048, i8* nonnull %13) #4
  call void @llvm.lifetime.end.p0i8(i64 4224, i8* nonnull %12) #4
  ret i32 %510
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_variance32x64_c(i8* nocapture readonly, i32, i8* nocapture readonly, i32, i32* nocapture) local_unnamed_addr #2 {
  store i32 0, i32* %4, align 4
  %6 = sext i32 %1 to i64
  %7 = sext i32 %3 to i64
  br label %8

8:                                                ; preds = %41, %5
  %9 = phi i32 [ 0, %5 ], [ %38, %41 ]
  %10 = phi i32 [ 0, %5 ], [ %36, %41 ]
  %11 = phi i8* [ %0, %5 ], [ %42, %41 ]
  %12 = phi i32 [ 0, %5 ], [ %44, %41 ]
  %13 = phi i8* [ %2, %5 ], [ %43, %41 ]
  br label %14

14:                                               ; preds = %14, %8
  %15 = phi i32 [ %9, %8 ], [ %38, %14 ]
  %16 = phi i32 [ %10, %8 ], [ %36, %14 ]
  %17 = phi i64 [ 0, %8 ], [ %39, %14 ]
  %18 = getelementptr inbounds i8, i8* %11, i64 %17
  %19 = load i8, i8* %18, align 1
  %20 = zext i8 %19 to i32
  %21 = getelementptr inbounds i8, i8* %13, i64 %17
  %22 = load i8, i8* %21, align 1
  %23 = zext i8 %22 to i32
  %24 = sub nsw i32 %20, %23
  %25 = add nsw i32 %24, %16
  %26 = mul nsw i32 %24, %24
  %27 = add i32 %26, %15
  store i32 %27, i32* %4, align 4
  %28 = or i64 %17, 1
  %29 = getelementptr inbounds i8, i8* %11, i64 %28
  %30 = load i8, i8* %29, align 1
  %31 = zext i8 %30 to i32
  %32 = getelementptr inbounds i8, i8* %13, i64 %28
  %33 = load i8, i8* %32, align 1
  %34 = zext i8 %33 to i32
  %35 = sub nsw i32 %31, %34
  %36 = add nsw i32 %35, %25
  %37 = mul nsw i32 %35, %35
  %38 = add i32 %37, %27
  store i32 %38, i32* %4, align 4
  %39 = add nuw nsw i64 %17, 2
  %40 = icmp eq i64 %39, 32
  br i1 %40, label %41, label %14

41:                                               ; preds = %14
  %42 = getelementptr inbounds i8, i8* %11, i64 %6
  %43 = getelementptr inbounds i8, i8* %13, i64 %7
  %44 = add nuw nsw i32 %12, 1
  %45 = icmp eq i32 %44, 64
  br i1 %45, label %46, label %8

46:                                               ; preds = %41
  %47 = sext i32 %36 to i64
  %48 = mul nsw i64 %47, %47
  %49 = lshr i64 %48, 11
  %50 = trunc i64 %49 to i32
  %51 = sub i32 %38, %50
  ret i32 %51
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_sub_pixel_variance32x64_c(i8* nocapture readonly, i32, i32, i32, i8* nocapture readonly, i32, i32* nocapture) local_unnamed_addr #2 {
  %8 = alloca [2080 x i16], align 16
  %9 = alloca [2048 x i8], align 16
  %10 = bitcast [2080 x i16]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4160, i8* nonnull %10) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %10, i8 -86, i64 4160, i1 false)
  %11 = getelementptr inbounds [2048 x i8], [2048 x i8]* %9, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 2048, i8* nonnull %11) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %11, i8 -86, i64 2048, i1 false)
  %12 = getelementptr inbounds [2080 x i16], [2080 x i16]* %8, i64 0, i64 0
  %13 = sext i32 %2 to i64
  %14 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %13, i64 0
  %15 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %13, i64 1
  %16 = add i32 %1, -32
  %17 = zext i32 %16 to i64
  %18 = load i8, i8* %14, align 2
  %19 = zext i8 %18 to i32
  %20 = load i8, i8* %15, align 1
  %21 = zext i8 %20 to i32
  %22 = insertelement <8 x i32> undef, i32 %19, i32 0
  %23 = shufflevector <8 x i32> %22, <8 x i32> undef, <8 x i32> zeroinitializer
  %24 = insertelement <8 x i32> undef, i32 %21, i32 0
  %25 = shufflevector <8 x i32> %24, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %26

26:                                               ; preds = %135, %7
  %27 = phi i64 [ %141, %135 ], [ 0, %7 ]
  %28 = phi i32 [ %139, %135 ], [ 0, %7 ]
  %29 = phi i8* [ %137, %135 ], [ %0, %7 ]
  %30 = phi i16* [ %138, %135 ], [ %12, %7 ]
  %31 = shl nuw nsw i64 %27, 5
  %32 = add i64 %31, 32
  %33 = getelementptr [2080 x i16], [2080 x i16]* %8, i64 0, i64 %32
  %34 = bitcast i16* %33 to i8*
  %35 = getelementptr [2080 x i16], [2080 x i16]* %8, i64 0, i64 %31
  %36 = bitcast i16* %35 to i8*
  %37 = getelementptr i8, i8* %29, i64 33
  %38 = icmp ugt i8* %37, %36
  %39 = icmp ult i8* %29, %34
  %40 = and i1 %38, %39
  br i1 %40, label %105, label %41

41:                                               ; preds = %26
  %42 = getelementptr i8, i8* %29, i64 32
  %43 = bitcast i8* %29 to <8 x i8>*
  %44 = load <8 x i8>, <8 x i8>* %43, align 1, !alias.scope !62
  %45 = zext <8 x i8> %44 to <8 x i32>
  %46 = mul nuw nsw <8 x i32> %23, %45
  %47 = getelementptr inbounds i8, i8* %29, i64 1
  %48 = bitcast i8* %47 to <8 x i8>*
  %49 = load <8 x i8>, <8 x i8>* %48, align 1, !alias.scope !62
  %50 = zext <8 x i8> %49 to <8 x i32>
  %51 = mul nuw nsw <8 x i32> %25, %50
  %52 = add nuw nsw <8 x i32> %46, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %53 = add nuw nsw <8 x i32> %52, %51
  %54 = lshr <8 x i32> %53, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %55 = trunc <8 x i32> %54 to <8 x i16>
  %56 = bitcast i16* %30 to <8 x i16>*
  store <8 x i16> %55, <8 x i16>* %56, align 2, !alias.scope !65, !noalias !62
  %57 = getelementptr i8, i8* %29, i64 8
  %58 = bitcast i8* %57 to <8 x i8>*
  %59 = load <8 x i8>, <8 x i8>* %58, align 1, !alias.scope !62
  %60 = zext <8 x i8> %59 to <8 x i32>
  %61 = mul nuw nsw <8 x i32> %23, %60
  %62 = getelementptr inbounds i8, i8* %29, i64 9
  %63 = bitcast i8* %62 to <8 x i8>*
  %64 = load <8 x i8>, <8 x i8>* %63, align 1, !alias.scope !62
  %65 = zext <8 x i8> %64 to <8 x i32>
  %66 = mul nuw nsw <8 x i32> %25, %65
  %67 = add nuw nsw <8 x i32> %61, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %68 = add nuw nsw <8 x i32> %67, %66
  %69 = lshr <8 x i32> %68, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %70 = trunc <8 x i32> %69 to <8 x i16>
  %71 = getelementptr inbounds i16, i16* %30, i64 8
  %72 = bitcast i16* %71 to <8 x i16>*
  store <8 x i16> %70, <8 x i16>* %72, align 2, !alias.scope !65, !noalias !62
  %73 = getelementptr i8, i8* %29, i64 16
  %74 = bitcast i8* %73 to <8 x i8>*
  %75 = load <8 x i8>, <8 x i8>* %74, align 1, !alias.scope !62
  %76 = zext <8 x i8> %75 to <8 x i32>
  %77 = mul nuw nsw <8 x i32> %23, %76
  %78 = getelementptr inbounds i8, i8* %29, i64 17
  %79 = bitcast i8* %78 to <8 x i8>*
  %80 = load <8 x i8>, <8 x i8>* %79, align 1, !alias.scope !62
  %81 = zext <8 x i8> %80 to <8 x i32>
  %82 = mul nuw nsw <8 x i32> %25, %81
  %83 = add nuw nsw <8 x i32> %77, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %84 = add nuw nsw <8 x i32> %83, %82
  %85 = lshr <8 x i32> %84, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %86 = trunc <8 x i32> %85 to <8 x i16>
  %87 = getelementptr inbounds i16, i16* %30, i64 16
  %88 = bitcast i16* %87 to <8 x i16>*
  store <8 x i16> %86, <8 x i16>* %88, align 2, !alias.scope !65, !noalias !62
  %89 = getelementptr i8, i8* %29, i64 24
  %90 = bitcast i8* %89 to <8 x i8>*
  %91 = load <8 x i8>, <8 x i8>* %90, align 1, !alias.scope !62
  %92 = zext <8 x i8> %91 to <8 x i32>
  %93 = mul nuw nsw <8 x i32> %23, %92
  %94 = getelementptr inbounds i8, i8* %29, i64 25
  %95 = bitcast i8* %94 to <8 x i8>*
  %96 = load <8 x i8>, <8 x i8>* %95, align 1, !alias.scope !62
  %97 = zext <8 x i8> %96 to <8 x i32>
  %98 = mul nuw nsw <8 x i32> %25, %97
  %99 = add nuw nsw <8 x i32> %93, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %100 = add nuw nsw <8 x i32> %99, %98
  %101 = lshr <8 x i32> %100, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %102 = trunc <8 x i32> %101 to <8 x i16>
  %103 = getelementptr inbounds i16, i16* %30, i64 24
  %104 = bitcast i16* %103 to <8 x i16>*
  store <8 x i16> %102, <8 x i16>* %104, align 2, !alias.scope !65, !noalias !62
  br label %135

105:                                              ; preds = %26, %105
  %106 = phi i64 [ %133, %105 ], [ 0, %26 ]
  %107 = phi i8* [ %124, %105 ], [ %29, %26 ]
  %108 = load i8, i8* %107, align 1
  %109 = zext i8 %108 to i32
  %110 = mul nuw nsw i32 %19, %109
  %111 = getelementptr inbounds i8, i8* %107, i64 1
  %112 = load i8, i8* %111, align 1
  %113 = zext i8 %112 to i32
  %114 = mul nuw nsw i32 %21, %113
  %115 = add nuw nsw i32 %110, 64
  %116 = add nuw nsw i32 %115, %114
  %117 = lshr i32 %116, 7
  %118 = trunc i32 %117 to i16
  %119 = getelementptr inbounds i16, i16* %30, i64 %106
  store i16 %118, i16* %119, align 2
  %120 = or i64 %106, 1
  %121 = load i8, i8* %111, align 1
  %122 = zext i8 %121 to i32
  %123 = mul nuw nsw i32 %19, %122
  %124 = getelementptr inbounds i8, i8* %107, i64 2
  %125 = load i8, i8* %124, align 1
  %126 = zext i8 %125 to i32
  %127 = mul nuw nsw i32 %21, %126
  %128 = add nuw nsw i32 %123, 64
  %129 = add nuw nsw i32 %128, %127
  %130 = lshr i32 %129, 7
  %131 = trunc i32 %130 to i16
  %132 = getelementptr inbounds i16, i16* %30, i64 %120
  store i16 %131, i16* %132, align 2
  %133 = add nuw nsw i64 %106, 2
  %134 = icmp eq i64 %133, 32
  br i1 %134, label %135, label %105, !llvm.loop !67

135:                                              ; preds = %105, %41
  %136 = phi i8* [ %42, %41 ], [ %124, %105 ]
  %137 = getelementptr inbounds i8, i8* %136, i64 %17
  %138 = getelementptr inbounds i16, i16* %30, i64 32
  %139 = add nuw nsw i32 %28, 1
  %140 = icmp eq i32 %139, 65
  %141 = add i64 %27, 1
  br i1 %140, label %142, label %26

142:                                              ; preds = %135
  %143 = sext i32 %3 to i64
  %144 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %143, i64 0
  %145 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %143, i64 1
  %146 = load i8, i8* %144, align 2
  %147 = zext i8 %146 to i32
  %148 = load i8, i8* %145, align 1
  %149 = zext i8 %148 to i32
  %150 = insertelement <8 x i32> undef, i32 %147, i32 0
  %151 = shufflevector <8 x i32> %150, <8 x i32> undef, <8 x i32> zeroinitializer
  %152 = insertelement <8 x i32> undef, i32 %149, i32 0
  %153 = shufflevector <8 x i32> %152, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %154

154:                                              ; preds = %265, %142
  %155 = phi i64 [ %270, %265 ], [ 0, %142 ]
  %156 = phi i32 [ %268, %265 ], [ 0, %142 ]
  %157 = phi i16* [ %266, %265 ], [ %12, %142 ]
  %158 = phi i8* [ %267, %265 ], [ %11, %142 ]
  %159 = shl nuw nsw i64 %155, 5
  %160 = add i64 %159, 32
  %161 = getelementptr [2048 x i8], [2048 x i8]* %9, i64 0, i64 %160
  %162 = getelementptr [2048 x i8], [2048 x i8]* %9, i64 0, i64 %159
  %163 = bitcast i16* %157 to i8*
  %164 = getelementptr i16, i16* %157, i64 64
  %165 = bitcast i16* %164 to i8*
  %166 = icmp ult i8* %162, %165
  %167 = icmp ugt i8* %161, %163
  %168 = and i1 %166, %167
  br i1 %168, label %233, label %169

169:                                              ; preds = %154
  %170 = getelementptr i16, i16* %157, i64 32
  %171 = bitcast i16* %157 to <8 x i16>*
  %172 = load <8 x i16>, <8 x i16>* %171, align 2, !alias.scope !68
  %173 = zext <8 x i16> %172 to <8 x i32>
  %174 = mul nuw nsw <8 x i32> %151, %173
  %175 = getelementptr inbounds i16, i16* %157, i64 32
  %176 = bitcast i16* %175 to <8 x i16>*
  %177 = load <8 x i16>, <8 x i16>* %176, align 2, !alias.scope !68
  %178 = zext <8 x i16> %177 to <8 x i32>
  %179 = mul nuw nsw <8 x i32> %153, %178
  %180 = add nuw nsw <8 x i32> %174, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %181 = add nuw nsw <8 x i32> %180, %179
  %182 = lshr <8 x i32> %181, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %183 = trunc <8 x i32> %182 to <8 x i8>
  %184 = bitcast i8* %158 to <8 x i8>*
  store <8 x i8> %183, <8 x i8>* %184, align 1, !alias.scope !71, !noalias !68
  %185 = getelementptr i16, i16* %157, i64 8
  %186 = bitcast i16* %185 to <8 x i16>*
  %187 = load <8 x i16>, <8 x i16>* %186, align 2, !alias.scope !68
  %188 = zext <8 x i16> %187 to <8 x i32>
  %189 = mul nuw nsw <8 x i32> %151, %188
  %190 = getelementptr inbounds i16, i16* %157, i64 40
  %191 = bitcast i16* %190 to <8 x i16>*
  %192 = load <8 x i16>, <8 x i16>* %191, align 2, !alias.scope !68
  %193 = zext <8 x i16> %192 to <8 x i32>
  %194 = mul nuw nsw <8 x i32> %153, %193
  %195 = add nuw nsw <8 x i32> %189, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %196 = add nuw nsw <8 x i32> %195, %194
  %197 = lshr <8 x i32> %196, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %198 = trunc <8 x i32> %197 to <8 x i8>
  %199 = getelementptr inbounds i8, i8* %158, i64 8
  %200 = bitcast i8* %199 to <8 x i8>*
  store <8 x i8> %198, <8 x i8>* %200, align 1, !alias.scope !71, !noalias !68
  %201 = getelementptr i16, i16* %157, i64 16
  %202 = bitcast i16* %201 to <8 x i16>*
  %203 = load <8 x i16>, <8 x i16>* %202, align 2, !alias.scope !68
  %204 = zext <8 x i16> %203 to <8 x i32>
  %205 = mul nuw nsw <8 x i32> %151, %204
  %206 = getelementptr inbounds i16, i16* %157, i64 48
  %207 = bitcast i16* %206 to <8 x i16>*
  %208 = load <8 x i16>, <8 x i16>* %207, align 2, !alias.scope !68
  %209 = zext <8 x i16> %208 to <8 x i32>
  %210 = mul nuw nsw <8 x i32> %153, %209
  %211 = add nuw nsw <8 x i32> %205, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %212 = add nuw nsw <8 x i32> %211, %210
  %213 = lshr <8 x i32> %212, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %214 = trunc <8 x i32> %213 to <8 x i8>
  %215 = getelementptr inbounds i8, i8* %158, i64 16
  %216 = bitcast i8* %215 to <8 x i8>*
  store <8 x i8> %214, <8 x i8>* %216, align 1, !alias.scope !71, !noalias !68
  %217 = getelementptr i16, i16* %157, i64 24
  %218 = bitcast i16* %217 to <8 x i16>*
  %219 = load <8 x i16>, <8 x i16>* %218, align 2, !alias.scope !68
  %220 = zext <8 x i16> %219 to <8 x i32>
  %221 = mul nuw nsw <8 x i32> %151, %220
  %222 = getelementptr inbounds i16, i16* %157, i64 56
  %223 = bitcast i16* %222 to <8 x i16>*
  %224 = load <8 x i16>, <8 x i16>* %223, align 2, !alias.scope !68
  %225 = zext <8 x i16> %224 to <8 x i32>
  %226 = mul nuw nsw <8 x i32> %153, %225
  %227 = add nuw nsw <8 x i32> %221, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %228 = add nuw nsw <8 x i32> %227, %226
  %229 = lshr <8 x i32> %228, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %230 = trunc <8 x i32> %229 to <8 x i8>
  %231 = getelementptr inbounds i8, i8* %158, i64 24
  %232 = bitcast i8* %231 to <8 x i8>*
  store <8 x i8> %230, <8 x i8>* %232, align 1, !alias.scope !71, !noalias !68
  br label %265

233:                                              ; preds = %154, %233
  %234 = phi i64 [ %263, %233 ], [ 0, %154 ]
  %235 = phi i16* [ %262, %233 ], [ %157, %154 ]
  %236 = load i16, i16* %235, align 2
  %237 = zext i16 %236 to i32
  %238 = mul nuw nsw i32 %147, %237
  %239 = getelementptr inbounds i16, i16* %235, i64 32
  %240 = load i16, i16* %239, align 2
  %241 = zext i16 %240 to i32
  %242 = mul nuw nsw i32 %149, %241
  %243 = add nuw nsw i32 %238, 64
  %244 = add nuw nsw i32 %243, %242
  %245 = lshr i32 %244, 7
  %246 = trunc i32 %245 to i8
  %247 = getelementptr inbounds i8, i8* %158, i64 %234
  store i8 %246, i8* %247, align 1
  %248 = getelementptr inbounds i16, i16* %235, i64 1
  %249 = or i64 %234, 1
  %250 = load i16, i16* %248, align 2
  %251 = zext i16 %250 to i32
  %252 = mul nuw nsw i32 %147, %251
  %253 = getelementptr inbounds i16, i16* %235, i64 33
  %254 = load i16, i16* %253, align 2
  %255 = zext i16 %254 to i32
  %256 = mul nuw nsw i32 %149, %255
  %257 = add nuw nsw i32 %252, 64
  %258 = add nuw nsw i32 %257, %256
  %259 = lshr i32 %258, 7
  %260 = trunc i32 %259 to i8
  %261 = getelementptr inbounds i8, i8* %158, i64 %249
  store i8 %260, i8* %261, align 1
  %262 = getelementptr inbounds i16, i16* %235, i64 2
  %263 = add nuw nsw i64 %234, 2
  %264 = icmp eq i64 %263, 32
  br i1 %264, label %265, label %233, !llvm.loop !73

265:                                              ; preds = %233, %169
  %266 = phi i16* [ %170, %169 ], [ %262, %233 ]
  %267 = getelementptr inbounds i8, i8* %158, i64 32
  %268 = add nuw nsw i32 %156, 1
  %269 = icmp eq i32 %268, 64
  %270 = add i64 %155, 1
  br i1 %269, label %271, label %154

271:                                              ; preds = %265
  store i32 0, i32* %6, align 4
  %272 = sext i32 %5 to i64
  br label %273

273:                                              ; preds = %306, %271
  %274 = phi i32 [ 0, %271 ], [ %303, %306 ]
  %275 = phi i32 [ 0, %271 ], [ %301, %306 ]
  %276 = phi i8* [ %11, %271 ], [ %307, %306 ]
  %277 = phi i32 [ 0, %271 ], [ %309, %306 ]
  %278 = phi i8* [ %4, %271 ], [ %308, %306 ]
  br label %279

279:                                              ; preds = %279, %273
  %280 = phi i32 [ %274, %273 ], [ %303, %279 ]
  %281 = phi i32 [ %275, %273 ], [ %301, %279 ]
  %282 = phi i64 [ 0, %273 ], [ %304, %279 ]
  %283 = getelementptr inbounds i8, i8* %276, i64 %282
  %284 = load i8, i8* %283, align 1
  %285 = zext i8 %284 to i32
  %286 = getelementptr inbounds i8, i8* %278, i64 %282
  %287 = load i8, i8* %286, align 1
  %288 = zext i8 %287 to i32
  %289 = sub nsw i32 %285, %288
  %290 = add nsw i32 %289, %281
  %291 = mul nsw i32 %289, %289
  %292 = add i32 %291, %280
  store i32 %292, i32* %6, align 4
  %293 = or i64 %282, 1
  %294 = getelementptr inbounds i8, i8* %276, i64 %293
  %295 = load i8, i8* %294, align 1
  %296 = zext i8 %295 to i32
  %297 = getelementptr inbounds i8, i8* %278, i64 %293
  %298 = load i8, i8* %297, align 1
  %299 = zext i8 %298 to i32
  %300 = sub nsw i32 %296, %299
  %301 = add nsw i32 %300, %290
  %302 = mul nsw i32 %300, %300
  %303 = add i32 %302, %292
  store i32 %303, i32* %6, align 4
  %304 = add nuw nsw i64 %282, 2
  %305 = icmp eq i64 %304, 32
  br i1 %305, label %306, label %279

306:                                              ; preds = %279
  %307 = getelementptr inbounds i8, i8* %276, i64 32
  %308 = getelementptr inbounds i8, i8* %278, i64 %272
  %309 = add nuw nsw i32 %277, 1
  %310 = icmp eq i32 %309, 64
  br i1 %310, label %311, label %273

311:                                              ; preds = %306
  %312 = sext i32 %301 to i64
  %313 = mul nsw i64 %312, %312
  %314 = lshr i64 %313, 11
  %315 = trunc i64 %314 to i32
  %316 = sub i32 %303, %315
  call void @llvm.lifetime.end.p0i8(i64 2048, i8* nonnull %11) #4
  call void @llvm.lifetime.end.p0i8(i64 4160, i8* nonnull %10) #4
  ret i32 %316
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_sub_pixel_avg_variance32x64_c(i8* nocapture readonly, i32, i32, i32, i8* nocapture readonly, i32, i32* nocapture, i8* nocapture readonly) local_unnamed_addr #2 {
  %9 = alloca [2080 x i16], align 16
  %10 = alloca [2048 x i8], align 16
  %11 = alloca [2048 x i8], align 16
  %12 = bitcast [2080 x i16]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4160, i8* nonnull %12) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %12, i8 -86, i64 4160, i1 false)
  %13 = getelementptr inbounds [2048 x i8], [2048 x i8]* %10, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 2048, i8* nonnull %13) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %13, i8 -86, i64 2048, i1 false)
  %14 = getelementptr inbounds [2048 x i8], [2048 x i8]* %11, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 2048, i8* nonnull %14) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %14, i8 -86, i64 2048, i1 false)
  %15 = getelementptr inbounds [2080 x i16], [2080 x i16]* %9, i64 0, i64 0
  %16 = sext i32 %2 to i64
  %17 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %16, i64 0
  %18 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %16, i64 1
  %19 = add i32 %1, -32
  %20 = zext i32 %19 to i64
  %21 = load i8, i8* %17, align 2
  %22 = zext i8 %21 to i32
  %23 = load i8, i8* %18, align 1
  %24 = zext i8 %23 to i32
  %25 = insertelement <8 x i32> undef, i32 %22, i32 0
  %26 = shufflevector <8 x i32> %25, <8 x i32> undef, <8 x i32> zeroinitializer
  %27 = insertelement <8 x i32> undef, i32 %24, i32 0
  %28 = shufflevector <8 x i32> %27, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %29

29:                                               ; preds = %138, %8
  %30 = phi i64 [ %144, %138 ], [ 0, %8 ]
  %31 = phi i32 [ %142, %138 ], [ 0, %8 ]
  %32 = phi i8* [ %140, %138 ], [ %0, %8 ]
  %33 = phi i16* [ %141, %138 ], [ %15, %8 ]
  %34 = shl nuw nsw i64 %30, 5
  %35 = add i64 %34, 32
  %36 = getelementptr [2080 x i16], [2080 x i16]* %9, i64 0, i64 %35
  %37 = bitcast i16* %36 to i8*
  %38 = getelementptr [2080 x i16], [2080 x i16]* %9, i64 0, i64 %34
  %39 = bitcast i16* %38 to i8*
  %40 = getelementptr i8, i8* %32, i64 33
  %41 = icmp ugt i8* %40, %39
  %42 = icmp ult i8* %32, %37
  %43 = and i1 %41, %42
  br i1 %43, label %108, label %44

44:                                               ; preds = %29
  %45 = getelementptr i8, i8* %32, i64 32
  %46 = bitcast i8* %32 to <8 x i8>*
  %47 = load <8 x i8>, <8 x i8>* %46, align 1, !alias.scope !74
  %48 = zext <8 x i8> %47 to <8 x i32>
  %49 = mul nuw nsw <8 x i32> %26, %48
  %50 = getelementptr inbounds i8, i8* %32, i64 1
  %51 = bitcast i8* %50 to <8 x i8>*
  %52 = load <8 x i8>, <8 x i8>* %51, align 1, !alias.scope !74
  %53 = zext <8 x i8> %52 to <8 x i32>
  %54 = mul nuw nsw <8 x i32> %28, %53
  %55 = add nuw nsw <8 x i32> %49, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %56 = add nuw nsw <8 x i32> %55, %54
  %57 = lshr <8 x i32> %56, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %58 = trunc <8 x i32> %57 to <8 x i16>
  %59 = bitcast i16* %33 to <8 x i16>*
  store <8 x i16> %58, <8 x i16>* %59, align 2, !alias.scope !77, !noalias !74
  %60 = getelementptr i8, i8* %32, i64 8
  %61 = bitcast i8* %60 to <8 x i8>*
  %62 = load <8 x i8>, <8 x i8>* %61, align 1, !alias.scope !74
  %63 = zext <8 x i8> %62 to <8 x i32>
  %64 = mul nuw nsw <8 x i32> %26, %63
  %65 = getelementptr inbounds i8, i8* %32, i64 9
  %66 = bitcast i8* %65 to <8 x i8>*
  %67 = load <8 x i8>, <8 x i8>* %66, align 1, !alias.scope !74
  %68 = zext <8 x i8> %67 to <8 x i32>
  %69 = mul nuw nsw <8 x i32> %28, %68
  %70 = add nuw nsw <8 x i32> %64, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %71 = add nuw nsw <8 x i32> %70, %69
  %72 = lshr <8 x i32> %71, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %73 = trunc <8 x i32> %72 to <8 x i16>
  %74 = getelementptr inbounds i16, i16* %33, i64 8
  %75 = bitcast i16* %74 to <8 x i16>*
  store <8 x i16> %73, <8 x i16>* %75, align 2, !alias.scope !77, !noalias !74
  %76 = getelementptr i8, i8* %32, i64 16
  %77 = bitcast i8* %76 to <8 x i8>*
  %78 = load <8 x i8>, <8 x i8>* %77, align 1, !alias.scope !74
  %79 = zext <8 x i8> %78 to <8 x i32>
  %80 = mul nuw nsw <8 x i32> %26, %79
  %81 = getelementptr inbounds i8, i8* %32, i64 17
  %82 = bitcast i8* %81 to <8 x i8>*
  %83 = load <8 x i8>, <8 x i8>* %82, align 1, !alias.scope !74
  %84 = zext <8 x i8> %83 to <8 x i32>
  %85 = mul nuw nsw <8 x i32> %28, %84
  %86 = add nuw nsw <8 x i32> %80, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %87 = add nuw nsw <8 x i32> %86, %85
  %88 = lshr <8 x i32> %87, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %89 = trunc <8 x i32> %88 to <8 x i16>
  %90 = getelementptr inbounds i16, i16* %33, i64 16
  %91 = bitcast i16* %90 to <8 x i16>*
  store <8 x i16> %89, <8 x i16>* %91, align 2, !alias.scope !77, !noalias !74
  %92 = getelementptr i8, i8* %32, i64 24
  %93 = bitcast i8* %92 to <8 x i8>*
  %94 = load <8 x i8>, <8 x i8>* %93, align 1, !alias.scope !74
  %95 = zext <8 x i8> %94 to <8 x i32>
  %96 = mul nuw nsw <8 x i32> %26, %95
  %97 = getelementptr inbounds i8, i8* %32, i64 25
  %98 = bitcast i8* %97 to <8 x i8>*
  %99 = load <8 x i8>, <8 x i8>* %98, align 1, !alias.scope !74
  %100 = zext <8 x i8> %99 to <8 x i32>
  %101 = mul nuw nsw <8 x i32> %28, %100
  %102 = add nuw nsw <8 x i32> %96, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %103 = add nuw nsw <8 x i32> %102, %101
  %104 = lshr <8 x i32> %103, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %105 = trunc <8 x i32> %104 to <8 x i16>
  %106 = getelementptr inbounds i16, i16* %33, i64 24
  %107 = bitcast i16* %106 to <8 x i16>*
  store <8 x i16> %105, <8 x i16>* %107, align 2, !alias.scope !77, !noalias !74
  br label %138

108:                                              ; preds = %29, %108
  %109 = phi i64 [ %136, %108 ], [ 0, %29 ]
  %110 = phi i8* [ %127, %108 ], [ %32, %29 ]
  %111 = load i8, i8* %110, align 1
  %112 = zext i8 %111 to i32
  %113 = mul nuw nsw i32 %22, %112
  %114 = getelementptr inbounds i8, i8* %110, i64 1
  %115 = load i8, i8* %114, align 1
  %116 = zext i8 %115 to i32
  %117 = mul nuw nsw i32 %24, %116
  %118 = add nuw nsw i32 %113, 64
  %119 = add nuw nsw i32 %118, %117
  %120 = lshr i32 %119, 7
  %121 = trunc i32 %120 to i16
  %122 = getelementptr inbounds i16, i16* %33, i64 %109
  store i16 %121, i16* %122, align 2
  %123 = or i64 %109, 1
  %124 = load i8, i8* %114, align 1
  %125 = zext i8 %124 to i32
  %126 = mul nuw nsw i32 %22, %125
  %127 = getelementptr inbounds i8, i8* %110, i64 2
  %128 = load i8, i8* %127, align 1
  %129 = zext i8 %128 to i32
  %130 = mul nuw nsw i32 %24, %129
  %131 = add nuw nsw i32 %126, 64
  %132 = add nuw nsw i32 %131, %130
  %133 = lshr i32 %132, 7
  %134 = trunc i32 %133 to i16
  %135 = getelementptr inbounds i16, i16* %33, i64 %123
  store i16 %134, i16* %135, align 2
  %136 = add nuw nsw i64 %109, 2
  %137 = icmp eq i64 %136, 32
  br i1 %137, label %138, label %108, !llvm.loop !79

138:                                              ; preds = %108, %44
  %139 = phi i8* [ %45, %44 ], [ %127, %108 ]
  %140 = getelementptr inbounds i8, i8* %139, i64 %20
  %141 = getelementptr inbounds i16, i16* %33, i64 32
  %142 = add nuw nsw i32 %31, 1
  %143 = icmp eq i32 %142, 65
  %144 = add i64 %30, 1
  br i1 %143, label %145, label %29

145:                                              ; preds = %138
  %146 = sext i32 %3 to i64
  %147 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %146, i64 0
  %148 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %146, i64 1
  %149 = load i8, i8* %147, align 2
  %150 = zext i8 %149 to i32
  %151 = load i8, i8* %148, align 1
  %152 = zext i8 %151 to i32
  %153 = insertelement <8 x i32> undef, i32 %150, i32 0
  %154 = shufflevector <8 x i32> %153, <8 x i32> undef, <8 x i32> zeroinitializer
  %155 = insertelement <8 x i32> undef, i32 %152, i32 0
  %156 = shufflevector <8 x i32> %155, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %157

157:                                              ; preds = %268, %145
  %158 = phi i64 [ %273, %268 ], [ 0, %145 ]
  %159 = phi i32 [ %271, %268 ], [ 0, %145 ]
  %160 = phi i16* [ %269, %268 ], [ %15, %145 ]
  %161 = phi i8* [ %270, %268 ], [ %13, %145 ]
  %162 = shl nuw nsw i64 %158, 5
  %163 = add i64 %162, 32
  %164 = getelementptr [2048 x i8], [2048 x i8]* %10, i64 0, i64 %163
  %165 = getelementptr [2048 x i8], [2048 x i8]* %10, i64 0, i64 %162
  %166 = bitcast i16* %160 to i8*
  %167 = getelementptr i16, i16* %160, i64 64
  %168 = bitcast i16* %167 to i8*
  %169 = icmp ult i8* %165, %168
  %170 = icmp ugt i8* %164, %166
  %171 = and i1 %169, %170
  br i1 %171, label %236, label %172

172:                                              ; preds = %157
  %173 = getelementptr i16, i16* %160, i64 32
  %174 = bitcast i16* %160 to <8 x i16>*
  %175 = load <8 x i16>, <8 x i16>* %174, align 2, !alias.scope !80
  %176 = zext <8 x i16> %175 to <8 x i32>
  %177 = mul nuw nsw <8 x i32> %154, %176
  %178 = getelementptr inbounds i16, i16* %160, i64 32
  %179 = bitcast i16* %178 to <8 x i16>*
  %180 = load <8 x i16>, <8 x i16>* %179, align 2, !alias.scope !80
  %181 = zext <8 x i16> %180 to <8 x i32>
  %182 = mul nuw nsw <8 x i32> %156, %181
  %183 = add nuw nsw <8 x i32> %177, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %184 = add nuw nsw <8 x i32> %183, %182
  %185 = lshr <8 x i32> %184, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %186 = trunc <8 x i32> %185 to <8 x i8>
  %187 = bitcast i8* %161 to <8 x i8>*
  store <8 x i8> %186, <8 x i8>* %187, align 1, !alias.scope !83, !noalias !80
  %188 = getelementptr i16, i16* %160, i64 8
  %189 = bitcast i16* %188 to <8 x i16>*
  %190 = load <8 x i16>, <8 x i16>* %189, align 2, !alias.scope !80
  %191 = zext <8 x i16> %190 to <8 x i32>
  %192 = mul nuw nsw <8 x i32> %154, %191
  %193 = getelementptr inbounds i16, i16* %160, i64 40
  %194 = bitcast i16* %193 to <8 x i16>*
  %195 = load <8 x i16>, <8 x i16>* %194, align 2, !alias.scope !80
  %196 = zext <8 x i16> %195 to <8 x i32>
  %197 = mul nuw nsw <8 x i32> %156, %196
  %198 = add nuw nsw <8 x i32> %192, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %199 = add nuw nsw <8 x i32> %198, %197
  %200 = lshr <8 x i32> %199, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %201 = trunc <8 x i32> %200 to <8 x i8>
  %202 = getelementptr inbounds i8, i8* %161, i64 8
  %203 = bitcast i8* %202 to <8 x i8>*
  store <8 x i8> %201, <8 x i8>* %203, align 1, !alias.scope !83, !noalias !80
  %204 = getelementptr i16, i16* %160, i64 16
  %205 = bitcast i16* %204 to <8 x i16>*
  %206 = load <8 x i16>, <8 x i16>* %205, align 2, !alias.scope !80
  %207 = zext <8 x i16> %206 to <8 x i32>
  %208 = mul nuw nsw <8 x i32> %154, %207
  %209 = getelementptr inbounds i16, i16* %160, i64 48
  %210 = bitcast i16* %209 to <8 x i16>*
  %211 = load <8 x i16>, <8 x i16>* %210, align 2, !alias.scope !80
  %212 = zext <8 x i16> %211 to <8 x i32>
  %213 = mul nuw nsw <8 x i32> %156, %212
  %214 = add nuw nsw <8 x i32> %208, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %215 = add nuw nsw <8 x i32> %214, %213
  %216 = lshr <8 x i32> %215, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %217 = trunc <8 x i32> %216 to <8 x i8>
  %218 = getelementptr inbounds i8, i8* %161, i64 16
  %219 = bitcast i8* %218 to <8 x i8>*
  store <8 x i8> %217, <8 x i8>* %219, align 1, !alias.scope !83, !noalias !80
  %220 = getelementptr i16, i16* %160, i64 24
  %221 = bitcast i16* %220 to <8 x i16>*
  %222 = load <8 x i16>, <8 x i16>* %221, align 2, !alias.scope !80
  %223 = zext <8 x i16> %222 to <8 x i32>
  %224 = mul nuw nsw <8 x i32> %154, %223
  %225 = getelementptr inbounds i16, i16* %160, i64 56
  %226 = bitcast i16* %225 to <8 x i16>*
  %227 = load <8 x i16>, <8 x i16>* %226, align 2, !alias.scope !80
  %228 = zext <8 x i16> %227 to <8 x i32>
  %229 = mul nuw nsw <8 x i32> %156, %228
  %230 = add nuw nsw <8 x i32> %224, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %231 = add nuw nsw <8 x i32> %230, %229
  %232 = lshr <8 x i32> %231, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %233 = trunc <8 x i32> %232 to <8 x i8>
  %234 = getelementptr inbounds i8, i8* %161, i64 24
  %235 = bitcast i8* %234 to <8 x i8>*
  store <8 x i8> %233, <8 x i8>* %235, align 1, !alias.scope !83, !noalias !80
  br label %268

236:                                              ; preds = %157, %236
  %237 = phi i64 [ %266, %236 ], [ 0, %157 ]
  %238 = phi i16* [ %265, %236 ], [ %160, %157 ]
  %239 = load i16, i16* %238, align 2
  %240 = zext i16 %239 to i32
  %241 = mul nuw nsw i32 %150, %240
  %242 = getelementptr inbounds i16, i16* %238, i64 32
  %243 = load i16, i16* %242, align 2
  %244 = zext i16 %243 to i32
  %245 = mul nuw nsw i32 %152, %244
  %246 = add nuw nsw i32 %241, 64
  %247 = add nuw nsw i32 %246, %245
  %248 = lshr i32 %247, 7
  %249 = trunc i32 %248 to i8
  %250 = getelementptr inbounds i8, i8* %161, i64 %237
  store i8 %249, i8* %250, align 1
  %251 = getelementptr inbounds i16, i16* %238, i64 1
  %252 = or i64 %237, 1
  %253 = load i16, i16* %251, align 2
  %254 = zext i16 %253 to i32
  %255 = mul nuw nsw i32 %150, %254
  %256 = getelementptr inbounds i16, i16* %238, i64 33
  %257 = load i16, i16* %256, align 2
  %258 = zext i16 %257 to i32
  %259 = mul nuw nsw i32 %152, %258
  %260 = add nuw nsw i32 %255, 64
  %261 = add nuw nsw i32 %260, %259
  %262 = lshr i32 %261, 7
  %263 = trunc i32 %262 to i8
  %264 = getelementptr inbounds i8, i8* %161, i64 %252
  store i8 %263, i8* %264, align 1
  %265 = getelementptr inbounds i16, i16* %238, i64 2
  %266 = add nuw nsw i64 %237, 2
  %267 = icmp eq i64 %266, 32
  br i1 %267, label %268, label %236, !llvm.loop !85

268:                                              ; preds = %236, %172
  %269 = phi i16* [ %173, %172 ], [ %265, %236 ]
  %270 = getelementptr inbounds i8, i8* %161, i64 32
  %271 = add nuw nsw i32 %159, 1
  %272 = icmp eq i32 %271, 64
  %273 = add i64 %158, 1
  br i1 %272, label %274, label %157

274:                                              ; preds = %268, %274
  %275 = phi i8* [ %304, %274 ], [ %14, %268 ]
  %276 = phi i32 [ %307, %274 ], [ 0, %268 ]
  %277 = phi i8* [ %305, %274 ], [ %7, %268 ]
  %278 = phi i8* [ %306, %274 ], [ %13, %268 ]
  %279 = bitcast i8* %277 to <16 x i8>*
  %280 = load <16 x i8>, <16 x i8>* %279, align 1
  %281 = zext <16 x i8> %280 to <16 x i32>
  %282 = bitcast i8* %278 to <16 x i8>*
  %283 = load <16 x i8>, <16 x i8>* %282, align 1
  %284 = zext <16 x i8> %283 to <16 x i32>
  %285 = add nuw nsw <16 x i32> %281, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %286 = add nuw nsw <16 x i32> %285, %284
  %287 = lshr <16 x i32> %286, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %288 = trunc <16 x i32> %287 to <16 x i8>
  %289 = bitcast i8* %275 to <16 x i8>*
  store <16 x i8> %288, <16 x i8>* %289, align 1
  %290 = getelementptr inbounds i8, i8* %277, i64 16
  %291 = bitcast i8* %290 to <16 x i8>*
  %292 = load <16 x i8>, <16 x i8>* %291, align 1
  %293 = zext <16 x i8> %292 to <16 x i32>
  %294 = getelementptr inbounds i8, i8* %278, i64 16
  %295 = bitcast i8* %294 to <16 x i8>*
  %296 = load <16 x i8>, <16 x i8>* %295, align 1
  %297 = zext <16 x i8> %296 to <16 x i32>
  %298 = add nuw nsw <16 x i32> %293, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %299 = add nuw nsw <16 x i32> %298, %297
  %300 = lshr <16 x i32> %299, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %301 = trunc <16 x i32> %300 to <16 x i8>
  %302 = getelementptr inbounds i8, i8* %275, i64 16
  %303 = bitcast i8* %302 to <16 x i8>*
  store <16 x i8> %301, <16 x i8>* %303, align 1
  %304 = getelementptr inbounds i8, i8* %275, i64 32
  %305 = getelementptr inbounds i8, i8* %277, i64 32
  %306 = getelementptr inbounds i8, i8* %278, i64 32
  %307 = add nuw nsw i32 %276, 1
  %308 = icmp eq i32 %307, 64
  br i1 %308, label %309, label %274

309:                                              ; preds = %274
  store i32 0, i32* %6, align 4
  %310 = sext i32 %5 to i64
  br label %311

311:                                              ; preds = %344, %309
  %312 = phi i32 [ 0, %309 ], [ %341, %344 ]
  %313 = phi i32 [ 0, %309 ], [ %339, %344 ]
  %314 = phi i8* [ %14, %309 ], [ %345, %344 ]
  %315 = phi i32 [ 0, %309 ], [ %347, %344 ]
  %316 = phi i8* [ %4, %309 ], [ %346, %344 ]
  br label %317

317:                                              ; preds = %317, %311
  %318 = phi i32 [ %312, %311 ], [ %341, %317 ]
  %319 = phi i32 [ %313, %311 ], [ %339, %317 ]
  %320 = phi i64 [ 0, %311 ], [ %342, %317 ]
  %321 = getelementptr inbounds i8, i8* %314, i64 %320
  %322 = load i8, i8* %321, align 1
  %323 = zext i8 %322 to i32
  %324 = getelementptr inbounds i8, i8* %316, i64 %320
  %325 = load i8, i8* %324, align 1
  %326 = zext i8 %325 to i32
  %327 = sub nsw i32 %323, %326
  %328 = add nsw i32 %327, %319
  %329 = mul nsw i32 %327, %327
  %330 = add i32 %329, %318
  store i32 %330, i32* %6, align 4
  %331 = or i64 %320, 1
  %332 = getelementptr inbounds i8, i8* %314, i64 %331
  %333 = load i8, i8* %332, align 1
  %334 = zext i8 %333 to i32
  %335 = getelementptr inbounds i8, i8* %316, i64 %331
  %336 = load i8, i8* %335, align 1
  %337 = zext i8 %336 to i32
  %338 = sub nsw i32 %334, %337
  %339 = add nsw i32 %338, %328
  %340 = mul nsw i32 %338, %338
  %341 = add i32 %340, %330
  store i32 %341, i32* %6, align 4
  %342 = add nuw nsw i64 %320, 2
  %343 = icmp eq i64 %342, 32
  br i1 %343, label %344, label %317

344:                                              ; preds = %317
  %345 = getelementptr inbounds i8, i8* %314, i64 32
  %346 = getelementptr inbounds i8, i8* %316, i64 %310
  %347 = add nuw nsw i32 %315, 1
  %348 = icmp eq i32 %347, 64
  br i1 %348, label %349, label %311

349:                                              ; preds = %344
  %350 = sext i32 %339 to i64
  %351 = mul nsw i64 %350, %350
  %352 = lshr i64 %351, 11
  %353 = trunc i64 %352 to i32
  %354 = sub i32 %341, %353
  call void @llvm.lifetime.end.p0i8(i64 2048, i8* nonnull %14) #4
  call void @llvm.lifetime.end.p0i8(i64 2048, i8* nonnull %13) #4
  call void @llvm.lifetime.end.p0i8(i64 4160, i8* nonnull %12) #4
  ret i32 %354
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_variance32x32_c(i8* nocapture readonly, i32, i8* nocapture readonly, i32, i32* nocapture) local_unnamed_addr #2 {
  store i32 0, i32* %4, align 4
  %6 = sext i32 %1 to i64
  %7 = sext i32 %3 to i64
  br label %8

8:                                                ; preds = %41, %5
  %9 = phi i32 [ 0, %5 ], [ %38, %41 ]
  %10 = phi i32 [ 0, %5 ], [ %36, %41 ]
  %11 = phi i8* [ %0, %5 ], [ %42, %41 ]
  %12 = phi i32 [ 0, %5 ], [ %44, %41 ]
  %13 = phi i8* [ %2, %5 ], [ %43, %41 ]
  br label %14

14:                                               ; preds = %14, %8
  %15 = phi i32 [ %9, %8 ], [ %38, %14 ]
  %16 = phi i32 [ %10, %8 ], [ %36, %14 ]
  %17 = phi i64 [ 0, %8 ], [ %39, %14 ]
  %18 = getelementptr inbounds i8, i8* %11, i64 %17
  %19 = load i8, i8* %18, align 1
  %20 = zext i8 %19 to i32
  %21 = getelementptr inbounds i8, i8* %13, i64 %17
  %22 = load i8, i8* %21, align 1
  %23 = zext i8 %22 to i32
  %24 = sub nsw i32 %20, %23
  %25 = add nsw i32 %24, %16
  %26 = mul nsw i32 %24, %24
  %27 = add i32 %26, %15
  store i32 %27, i32* %4, align 4
  %28 = or i64 %17, 1
  %29 = getelementptr inbounds i8, i8* %11, i64 %28
  %30 = load i8, i8* %29, align 1
  %31 = zext i8 %30 to i32
  %32 = getelementptr inbounds i8, i8* %13, i64 %28
  %33 = load i8, i8* %32, align 1
  %34 = zext i8 %33 to i32
  %35 = sub nsw i32 %31, %34
  %36 = add nsw i32 %35, %25
  %37 = mul nsw i32 %35, %35
  %38 = add i32 %37, %27
  store i32 %38, i32* %4, align 4
  %39 = add nuw nsw i64 %17, 2
  %40 = icmp eq i64 %39, 32
  br i1 %40, label %41, label %14

41:                                               ; preds = %14
  %42 = getelementptr inbounds i8, i8* %11, i64 %6
  %43 = getelementptr inbounds i8, i8* %13, i64 %7
  %44 = add nuw nsw i32 %12, 1
  %45 = icmp eq i32 %44, 32
  br i1 %45, label %46, label %8

46:                                               ; preds = %41
  %47 = sext i32 %36 to i64
  %48 = mul nsw i64 %47, %47
  %49 = lshr i64 %48, 10
  %50 = trunc i64 %49 to i32
  %51 = sub i32 %38, %50
  ret i32 %51
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_sub_pixel_variance32x32_c(i8* nocapture readonly, i32, i32, i32, i8* nocapture readonly, i32, i32* nocapture) local_unnamed_addr #2 {
  %8 = alloca [1056 x i16], align 16
  %9 = alloca [1024 x i8], align 16
  %10 = bitcast [1056 x i16]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2112, i8* nonnull %10) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %10, i8 -86, i64 2112, i1 false)
  %11 = getelementptr inbounds [1024 x i8], [1024 x i8]* %9, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %11) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %11, i8 -86, i64 1024, i1 false)
  %12 = getelementptr inbounds [1056 x i16], [1056 x i16]* %8, i64 0, i64 0
  %13 = sext i32 %2 to i64
  %14 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %13, i64 0
  %15 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %13, i64 1
  %16 = add i32 %1, -32
  %17 = zext i32 %16 to i64
  %18 = load i8, i8* %14, align 2
  %19 = zext i8 %18 to i32
  %20 = load i8, i8* %15, align 1
  %21 = zext i8 %20 to i32
  %22 = insertelement <8 x i32> undef, i32 %19, i32 0
  %23 = shufflevector <8 x i32> %22, <8 x i32> undef, <8 x i32> zeroinitializer
  %24 = insertelement <8 x i32> undef, i32 %21, i32 0
  %25 = shufflevector <8 x i32> %24, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %26

26:                                               ; preds = %135, %7
  %27 = phi i64 [ %141, %135 ], [ 0, %7 ]
  %28 = phi i32 [ %139, %135 ], [ 0, %7 ]
  %29 = phi i8* [ %137, %135 ], [ %0, %7 ]
  %30 = phi i16* [ %138, %135 ], [ %12, %7 ]
  %31 = shl nuw nsw i64 %27, 5
  %32 = add i64 %31, 32
  %33 = getelementptr [1056 x i16], [1056 x i16]* %8, i64 0, i64 %32
  %34 = bitcast i16* %33 to i8*
  %35 = getelementptr [1056 x i16], [1056 x i16]* %8, i64 0, i64 %31
  %36 = bitcast i16* %35 to i8*
  %37 = getelementptr i8, i8* %29, i64 33
  %38 = icmp ugt i8* %37, %36
  %39 = icmp ult i8* %29, %34
  %40 = and i1 %38, %39
  br i1 %40, label %105, label %41

41:                                               ; preds = %26
  %42 = getelementptr i8, i8* %29, i64 32
  %43 = bitcast i8* %29 to <8 x i8>*
  %44 = load <8 x i8>, <8 x i8>* %43, align 1, !alias.scope !86
  %45 = zext <8 x i8> %44 to <8 x i32>
  %46 = mul nuw nsw <8 x i32> %23, %45
  %47 = getelementptr inbounds i8, i8* %29, i64 1
  %48 = bitcast i8* %47 to <8 x i8>*
  %49 = load <8 x i8>, <8 x i8>* %48, align 1, !alias.scope !86
  %50 = zext <8 x i8> %49 to <8 x i32>
  %51 = mul nuw nsw <8 x i32> %25, %50
  %52 = add nuw nsw <8 x i32> %46, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %53 = add nuw nsw <8 x i32> %52, %51
  %54 = lshr <8 x i32> %53, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %55 = trunc <8 x i32> %54 to <8 x i16>
  %56 = bitcast i16* %30 to <8 x i16>*
  store <8 x i16> %55, <8 x i16>* %56, align 2, !alias.scope !89, !noalias !86
  %57 = getelementptr i8, i8* %29, i64 8
  %58 = bitcast i8* %57 to <8 x i8>*
  %59 = load <8 x i8>, <8 x i8>* %58, align 1, !alias.scope !86
  %60 = zext <8 x i8> %59 to <8 x i32>
  %61 = mul nuw nsw <8 x i32> %23, %60
  %62 = getelementptr inbounds i8, i8* %29, i64 9
  %63 = bitcast i8* %62 to <8 x i8>*
  %64 = load <8 x i8>, <8 x i8>* %63, align 1, !alias.scope !86
  %65 = zext <8 x i8> %64 to <8 x i32>
  %66 = mul nuw nsw <8 x i32> %25, %65
  %67 = add nuw nsw <8 x i32> %61, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %68 = add nuw nsw <8 x i32> %67, %66
  %69 = lshr <8 x i32> %68, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %70 = trunc <8 x i32> %69 to <8 x i16>
  %71 = getelementptr inbounds i16, i16* %30, i64 8
  %72 = bitcast i16* %71 to <8 x i16>*
  store <8 x i16> %70, <8 x i16>* %72, align 2, !alias.scope !89, !noalias !86
  %73 = getelementptr i8, i8* %29, i64 16
  %74 = bitcast i8* %73 to <8 x i8>*
  %75 = load <8 x i8>, <8 x i8>* %74, align 1, !alias.scope !86
  %76 = zext <8 x i8> %75 to <8 x i32>
  %77 = mul nuw nsw <8 x i32> %23, %76
  %78 = getelementptr inbounds i8, i8* %29, i64 17
  %79 = bitcast i8* %78 to <8 x i8>*
  %80 = load <8 x i8>, <8 x i8>* %79, align 1, !alias.scope !86
  %81 = zext <8 x i8> %80 to <8 x i32>
  %82 = mul nuw nsw <8 x i32> %25, %81
  %83 = add nuw nsw <8 x i32> %77, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %84 = add nuw nsw <8 x i32> %83, %82
  %85 = lshr <8 x i32> %84, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %86 = trunc <8 x i32> %85 to <8 x i16>
  %87 = getelementptr inbounds i16, i16* %30, i64 16
  %88 = bitcast i16* %87 to <8 x i16>*
  store <8 x i16> %86, <8 x i16>* %88, align 2, !alias.scope !89, !noalias !86
  %89 = getelementptr i8, i8* %29, i64 24
  %90 = bitcast i8* %89 to <8 x i8>*
  %91 = load <8 x i8>, <8 x i8>* %90, align 1, !alias.scope !86
  %92 = zext <8 x i8> %91 to <8 x i32>
  %93 = mul nuw nsw <8 x i32> %23, %92
  %94 = getelementptr inbounds i8, i8* %29, i64 25
  %95 = bitcast i8* %94 to <8 x i8>*
  %96 = load <8 x i8>, <8 x i8>* %95, align 1, !alias.scope !86
  %97 = zext <8 x i8> %96 to <8 x i32>
  %98 = mul nuw nsw <8 x i32> %25, %97
  %99 = add nuw nsw <8 x i32> %93, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %100 = add nuw nsw <8 x i32> %99, %98
  %101 = lshr <8 x i32> %100, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %102 = trunc <8 x i32> %101 to <8 x i16>
  %103 = getelementptr inbounds i16, i16* %30, i64 24
  %104 = bitcast i16* %103 to <8 x i16>*
  store <8 x i16> %102, <8 x i16>* %104, align 2, !alias.scope !89, !noalias !86
  br label %135

105:                                              ; preds = %26, %105
  %106 = phi i64 [ %133, %105 ], [ 0, %26 ]
  %107 = phi i8* [ %124, %105 ], [ %29, %26 ]
  %108 = load i8, i8* %107, align 1
  %109 = zext i8 %108 to i32
  %110 = mul nuw nsw i32 %19, %109
  %111 = getelementptr inbounds i8, i8* %107, i64 1
  %112 = load i8, i8* %111, align 1
  %113 = zext i8 %112 to i32
  %114 = mul nuw nsw i32 %21, %113
  %115 = add nuw nsw i32 %110, 64
  %116 = add nuw nsw i32 %115, %114
  %117 = lshr i32 %116, 7
  %118 = trunc i32 %117 to i16
  %119 = getelementptr inbounds i16, i16* %30, i64 %106
  store i16 %118, i16* %119, align 2
  %120 = or i64 %106, 1
  %121 = load i8, i8* %111, align 1
  %122 = zext i8 %121 to i32
  %123 = mul nuw nsw i32 %19, %122
  %124 = getelementptr inbounds i8, i8* %107, i64 2
  %125 = load i8, i8* %124, align 1
  %126 = zext i8 %125 to i32
  %127 = mul nuw nsw i32 %21, %126
  %128 = add nuw nsw i32 %123, 64
  %129 = add nuw nsw i32 %128, %127
  %130 = lshr i32 %129, 7
  %131 = trunc i32 %130 to i16
  %132 = getelementptr inbounds i16, i16* %30, i64 %120
  store i16 %131, i16* %132, align 2
  %133 = add nuw nsw i64 %106, 2
  %134 = icmp eq i64 %133, 32
  br i1 %134, label %135, label %105, !llvm.loop !91

135:                                              ; preds = %105, %41
  %136 = phi i8* [ %42, %41 ], [ %124, %105 ]
  %137 = getelementptr inbounds i8, i8* %136, i64 %17
  %138 = getelementptr inbounds i16, i16* %30, i64 32
  %139 = add nuw nsw i32 %28, 1
  %140 = icmp eq i32 %139, 33
  %141 = add i64 %27, 1
  br i1 %140, label %142, label %26

142:                                              ; preds = %135
  %143 = sext i32 %3 to i64
  %144 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %143, i64 0
  %145 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %143, i64 1
  %146 = load i8, i8* %144, align 2
  %147 = zext i8 %146 to i32
  %148 = load i8, i8* %145, align 1
  %149 = zext i8 %148 to i32
  %150 = insertelement <8 x i32> undef, i32 %147, i32 0
  %151 = shufflevector <8 x i32> %150, <8 x i32> undef, <8 x i32> zeroinitializer
  %152 = insertelement <8 x i32> undef, i32 %149, i32 0
  %153 = shufflevector <8 x i32> %152, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %154

154:                                              ; preds = %265, %142
  %155 = phi i64 [ %270, %265 ], [ 0, %142 ]
  %156 = phi i32 [ %268, %265 ], [ 0, %142 ]
  %157 = phi i16* [ %266, %265 ], [ %12, %142 ]
  %158 = phi i8* [ %267, %265 ], [ %11, %142 ]
  %159 = shl nuw nsw i64 %155, 5
  %160 = add i64 %159, 32
  %161 = getelementptr [1024 x i8], [1024 x i8]* %9, i64 0, i64 %160
  %162 = getelementptr [1024 x i8], [1024 x i8]* %9, i64 0, i64 %159
  %163 = bitcast i16* %157 to i8*
  %164 = getelementptr i16, i16* %157, i64 64
  %165 = bitcast i16* %164 to i8*
  %166 = icmp ult i8* %162, %165
  %167 = icmp ugt i8* %161, %163
  %168 = and i1 %166, %167
  br i1 %168, label %233, label %169

169:                                              ; preds = %154
  %170 = getelementptr i16, i16* %157, i64 32
  %171 = bitcast i16* %157 to <8 x i16>*
  %172 = load <8 x i16>, <8 x i16>* %171, align 2, !alias.scope !92
  %173 = zext <8 x i16> %172 to <8 x i32>
  %174 = mul nuw nsw <8 x i32> %151, %173
  %175 = getelementptr inbounds i16, i16* %157, i64 32
  %176 = bitcast i16* %175 to <8 x i16>*
  %177 = load <8 x i16>, <8 x i16>* %176, align 2, !alias.scope !92
  %178 = zext <8 x i16> %177 to <8 x i32>
  %179 = mul nuw nsw <8 x i32> %153, %178
  %180 = add nuw nsw <8 x i32> %174, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %181 = add nuw nsw <8 x i32> %180, %179
  %182 = lshr <8 x i32> %181, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %183 = trunc <8 x i32> %182 to <8 x i8>
  %184 = bitcast i8* %158 to <8 x i8>*
  store <8 x i8> %183, <8 x i8>* %184, align 1, !alias.scope !95, !noalias !92
  %185 = getelementptr i16, i16* %157, i64 8
  %186 = bitcast i16* %185 to <8 x i16>*
  %187 = load <8 x i16>, <8 x i16>* %186, align 2, !alias.scope !92
  %188 = zext <8 x i16> %187 to <8 x i32>
  %189 = mul nuw nsw <8 x i32> %151, %188
  %190 = getelementptr inbounds i16, i16* %157, i64 40
  %191 = bitcast i16* %190 to <8 x i16>*
  %192 = load <8 x i16>, <8 x i16>* %191, align 2, !alias.scope !92
  %193 = zext <8 x i16> %192 to <8 x i32>
  %194 = mul nuw nsw <8 x i32> %153, %193
  %195 = add nuw nsw <8 x i32> %189, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %196 = add nuw nsw <8 x i32> %195, %194
  %197 = lshr <8 x i32> %196, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %198 = trunc <8 x i32> %197 to <8 x i8>
  %199 = getelementptr inbounds i8, i8* %158, i64 8
  %200 = bitcast i8* %199 to <8 x i8>*
  store <8 x i8> %198, <8 x i8>* %200, align 1, !alias.scope !95, !noalias !92
  %201 = getelementptr i16, i16* %157, i64 16
  %202 = bitcast i16* %201 to <8 x i16>*
  %203 = load <8 x i16>, <8 x i16>* %202, align 2, !alias.scope !92
  %204 = zext <8 x i16> %203 to <8 x i32>
  %205 = mul nuw nsw <8 x i32> %151, %204
  %206 = getelementptr inbounds i16, i16* %157, i64 48
  %207 = bitcast i16* %206 to <8 x i16>*
  %208 = load <8 x i16>, <8 x i16>* %207, align 2, !alias.scope !92
  %209 = zext <8 x i16> %208 to <8 x i32>
  %210 = mul nuw nsw <8 x i32> %153, %209
  %211 = add nuw nsw <8 x i32> %205, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %212 = add nuw nsw <8 x i32> %211, %210
  %213 = lshr <8 x i32> %212, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %214 = trunc <8 x i32> %213 to <8 x i8>
  %215 = getelementptr inbounds i8, i8* %158, i64 16
  %216 = bitcast i8* %215 to <8 x i8>*
  store <8 x i8> %214, <8 x i8>* %216, align 1, !alias.scope !95, !noalias !92
  %217 = getelementptr i16, i16* %157, i64 24
  %218 = bitcast i16* %217 to <8 x i16>*
  %219 = load <8 x i16>, <8 x i16>* %218, align 2, !alias.scope !92
  %220 = zext <8 x i16> %219 to <8 x i32>
  %221 = mul nuw nsw <8 x i32> %151, %220
  %222 = getelementptr inbounds i16, i16* %157, i64 56
  %223 = bitcast i16* %222 to <8 x i16>*
  %224 = load <8 x i16>, <8 x i16>* %223, align 2, !alias.scope !92
  %225 = zext <8 x i16> %224 to <8 x i32>
  %226 = mul nuw nsw <8 x i32> %153, %225
  %227 = add nuw nsw <8 x i32> %221, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %228 = add nuw nsw <8 x i32> %227, %226
  %229 = lshr <8 x i32> %228, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %230 = trunc <8 x i32> %229 to <8 x i8>
  %231 = getelementptr inbounds i8, i8* %158, i64 24
  %232 = bitcast i8* %231 to <8 x i8>*
  store <8 x i8> %230, <8 x i8>* %232, align 1, !alias.scope !95, !noalias !92
  br label %265

233:                                              ; preds = %154, %233
  %234 = phi i64 [ %263, %233 ], [ 0, %154 ]
  %235 = phi i16* [ %262, %233 ], [ %157, %154 ]
  %236 = load i16, i16* %235, align 2
  %237 = zext i16 %236 to i32
  %238 = mul nuw nsw i32 %147, %237
  %239 = getelementptr inbounds i16, i16* %235, i64 32
  %240 = load i16, i16* %239, align 2
  %241 = zext i16 %240 to i32
  %242 = mul nuw nsw i32 %149, %241
  %243 = add nuw nsw i32 %238, 64
  %244 = add nuw nsw i32 %243, %242
  %245 = lshr i32 %244, 7
  %246 = trunc i32 %245 to i8
  %247 = getelementptr inbounds i8, i8* %158, i64 %234
  store i8 %246, i8* %247, align 1
  %248 = getelementptr inbounds i16, i16* %235, i64 1
  %249 = or i64 %234, 1
  %250 = load i16, i16* %248, align 2
  %251 = zext i16 %250 to i32
  %252 = mul nuw nsw i32 %147, %251
  %253 = getelementptr inbounds i16, i16* %235, i64 33
  %254 = load i16, i16* %253, align 2
  %255 = zext i16 %254 to i32
  %256 = mul nuw nsw i32 %149, %255
  %257 = add nuw nsw i32 %252, 64
  %258 = add nuw nsw i32 %257, %256
  %259 = lshr i32 %258, 7
  %260 = trunc i32 %259 to i8
  %261 = getelementptr inbounds i8, i8* %158, i64 %249
  store i8 %260, i8* %261, align 1
  %262 = getelementptr inbounds i16, i16* %235, i64 2
  %263 = add nuw nsw i64 %234, 2
  %264 = icmp eq i64 %263, 32
  br i1 %264, label %265, label %233, !llvm.loop !97

265:                                              ; preds = %233, %169
  %266 = phi i16* [ %170, %169 ], [ %262, %233 ]
  %267 = getelementptr inbounds i8, i8* %158, i64 32
  %268 = add nuw nsw i32 %156, 1
  %269 = icmp eq i32 %268, 32
  %270 = add i64 %155, 1
  br i1 %269, label %271, label %154

271:                                              ; preds = %265
  store i32 0, i32* %6, align 4
  %272 = sext i32 %5 to i64
  br label %273

273:                                              ; preds = %306, %271
  %274 = phi i32 [ 0, %271 ], [ %303, %306 ]
  %275 = phi i32 [ 0, %271 ], [ %301, %306 ]
  %276 = phi i8* [ %11, %271 ], [ %307, %306 ]
  %277 = phi i32 [ 0, %271 ], [ %309, %306 ]
  %278 = phi i8* [ %4, %271 ], [ %308, %306 ]
  br label %279

279:                                              ; preds = %279, %273
  %280 = phi i32 [ %274, %273 ], [ %303, %279 ]
  %281 = phi i32 [ %275, %273 ], [ %301, %279 ]
  %282 = phi i64 [ 0, %273 ], [ %304, %279 ]
  %283 = getelementptr inbounds i8, i8* %276, i64 %282
  %284 = load i8, i8* %283, align 1
  %285 = zext i8 %284 to i32
  %286 = getelementptr inbounds i8, i8* %278, i64 %282
  %287 = load i8, i8* %286, align 1
  %288 = zext i8 %287 to i32
  %289 = sub nsw i32 %285, %288
  %290 = add nsw i32 %289, %281
  %291 = mul nsw i32 %289, %289
  %292 = add i32 %291, %280
  store i32 %292, i32* %6, align 4
  %293 = or i64 %282, 1
  %294 = getelementptr inbounds i8, i8* %276, i64 %293
  %295 = load i8, i8* %294, align 1
  %296 = zext i8 %295 to i32
  %297 = getelementptr inbounds i8, i8* %278, i64 %293
  %298 = load i8, i8* %297, align 1
  %299 = zext i8 %298 to i32
  %300 = sub nsw i32 %296, %299
  %301 = add nsw i32 %300, %290
  %302 = mul nsw i32 %300, %300
  %303 = add i32 %302, %292
  store i32 %303, i32* %6, align 4
  %304 = add nuw nsw i64 %282, 2
  %305 = icmp eq i64 %304, 32
  br i1 %305, label %306, label %279

306:                                              ; preds = %279
  %307 = getelementptr inbounds i8, i8* %276, i64 32
  %308 = getelementptr inbounds i8, i8* %278, i64 %272
  %309 = add nuw nsw i32 %277, 1
  %310 = icmp eq i32 %309, 32
  br i1 %310, label %311, label %273

311:                                              ; preds = %306
  %312 = sext i32 %301 to i64
  %313 = mul nsw i64 %312, %312
  %314 = lshr i64 %313, 10
  %315 = trunc i64 %314 to i32
  %316 = sub i32 %303, %315
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %11) #4
  call void @llvm.lifetime.end.p0i8(i64 2112, i8* nonnull %10) #4
  ret i32 %316
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_sub_pixel_avg_variance32x32_c(i8* nocapture readonly, i32, i32, i32, i8* nocapture readonly, i32, i32* nocapture, i8* nocapture readonly) local_unnamed_addr #2 {
  %9 = alloca [1056 x i16], align 16
  %10 = alloca [1024 x i8], align 16
  %11 = alloca [1024 x i8], align 16
  %12 = bitcast [1056 x i16]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2112, i8* nonnull %12) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %12, i8 -86, i64 2112, i1 false)
  %13 = getelementptr inbounds [1024 x i8], [1024 x i8]* %10, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %13) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %13, i8 -86, i64 1024, i1 false)
  %14 = getelementptr inbounds [1024 x i8], [1024 x i8]* %11, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %14) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %14, i8 -86, i64 1024, i1 false)
  %15 = getelementptr inbounds [1056 x i16], [1056 x i16]* %9, i64 0, i64 0
  %16 = sext i32 %2 to i64
  %17 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %16, i64 0
  %18 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %16, i64 1
  %19 = add i32 %1, -32
  %20 = zext i32 %19 to i64
  %21 = load i8, i8* %17, align 2
  %22 = zext i8 %21 to i32
  %23 = load i8, i8* %18, align 1
  %24 = zext i8 %23 to i32
  %25 = insertelement <8 x i32> undef, i32 %22, i32 0
  %26 = shufflevector <8 x i32> %25, <8 x i32> undef, <8 x i32> zeroinitializer
  %27 = insertelement <8 x i32> undef, i32 %24, i32 0
  %28 = shufflevector <8 x i32> %27, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %29

29:                                               ; preds = %138, %8
  %30 = phi i64 [ %144, %138 ], [ 0, %8 ]
  %31 = phi i32 [ %142, %138 ], [ 0, %8 ]
  %32 = phi i8* [ %140, %138 ], [ %0, %8 ]
  %33 = phi i16* [ %141, %138 ], [ %15, %8 ]
  %34 = shl nuw nsw i64 %30, 5
  %35 = add i64 %34, 32
  %36 = getelementptr [1056 x i16], [1056 x i16]* %9, i64 0, i64 %35
  %37 = bitcast i16* %36 to i8*
  %38 = getelementptr [1056 x i16], [1056 x i16]* %9, i64 0, i64 %34
  %39 = bitcast i16* %38 to i8*
  %40 = getelementptr i8, i8* %32, i64 33
  %41 = icmp ugt i8* %40, %39
  %42 = icmp ult i8* %32, %37
  %43 = and i1 %41, %42
  br i1 %43, label %108, label %44

44:                                               ; preds = %29
  %45 = getelementptr i8, i8* %32, i64 32
  %46 = bitcast i8* %32 to <8 x i8>*
  %47 = load <8 x i8>, <8 x i8>* %46, align 1, !alias.scope !98
  %48 = zext <8 x i8> %47 to <8 x i32>
  %49 = mul nuw nsw <8 x i32> %26, %48
  %50 = getelementptr inbounds i8, i8* %32, i64 1
  %51 = bitcast i8* %50 to <8 x i8>*
  %52 = load <8 x i8>, <8 x i8>* %51, align 1, !alias.scope !98
  %53 = zext <8 x i8> %52 to <8 x i32>
  %54 = mul nuw nsw <8 x i32> %28, %53
  %55 = add nuw nsw <8 x i32> %49, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %56 = add nuw nsw <8 x i32> %55, %54
  %57 = lshr <8 x i32> %56, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %58 = trunc <8 x i32> %57 to <8 x i16>
  %59 = bitcast i16* %33 to <8 x i16>*
  store <8 x i16> %58, <8 x i16>* %59, align 2, !alias.scope !101, !noalias !98
  %60 = getelementptr i8, i8* %32, i64 8
  %61 = bitcast i8* %60 to <8 x i8>*
  %62 = load <8 x i8>, <8 x i8>* %61, align 1, !alias.scope !98
  %63 = zext <8 x i8> %62 to <8 x i32>
  %64 = mul nuw nsw <8 x i32> %26, %63
  %65 = getelementptr inbounds i8, i8* %32, i64 9
  %66 = bitcast i8* %65 to <8 x i8>*
  %67 = load <8 x i8>, <8 x i8>* %66, align 1, !alias.scope !98
  %68 = zext <8 x i8> %67 to <8 x i32>
  %69 = mul nuw nsw <8 x i32> %28, %68
  %70 = add nuw nsw <8 x i32> %64, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %71 = add nuw nsw <8 x i32> %70, %69
  %72 = lshr <8 x i32> %71, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %73 = trunc <8 x i32> %72 to <8 x i16>
  %74 = getelementptr inbounds i16, i16* %33, i64 8
  %75 = bitcast i16* %74 to <8 x i16>*
  store <8 x i16> %73, <8 x i16>* %75, align 2, !alias.scope !101, !noalias !98
  %76 = getelementptr i8, i8* %32, i64 16
  %77 = bitcast i8* %76 to <8 x i8>*
  %78 = load <8 x i8>, <8 x i8>* %77, align 1, !alias.scope !98
  %79 = zext <8 x i8> %78 to <8 x i32>
  %80 = mul nuw nsw <8 x i32> %26, %79
  %81 = getelementptr inbounds i8, i8* %32, i64 17
  %82 = bitcast i8* %81 to <8 x i8>*
  %83 = load <8 x i8>, <8 x i8>* %82, align 1, !alias.scope !98
  %84 = zext <8 x i8> %83 to <8 x i32>
  %85 = mul nuw nsw <8 x i32> %28, %84
  %86 = add nuw nsw <8 x i32> %80, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %87 = add nuw nsw <8 x i32> %86, %85
  %88 = lshr <8 x i32> %87, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %89 = trunc <8 x i32> %88 to <8 x i16>
  %90 = getelementptr inbounds i16, i16* %33, i64 16
  %91 = bitcast i16* %90 to <8 x i16>*
  store <8 x i16> %89, <8 x i16>* %91, align 2, !alias.scope !101, !noalias !98
  %92 = getelementptr i8, i8* %32, i64 24
  %93 = bitcast i8* %92 to <8 x i8>*
  %94 = load <8 x i8>, <8 x i8>* %93, align 1, !alias.scope !98
  %95 = zext <8 x i8> %94 to <8 x i32>
  %96 = mul nuw nsw <8 x i32> %26, %95
  %97 = getelementptr inbounds i8, i8* %32, i64 25
  %98 = bitcast i8* %97 to <8 x i8>*
  %99 = load <8 x i8>, <8 x i8>* %98, align 1, !alias.scope !98
  %100 = zext <8 x i8> %99 to <8 x i32>
  %101 = mul nuw nsw <8 x i32> %28, %100
  %102 = add nuw nsw <8 x i32> %96, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %103 = add nuw nsw <8 x i32> %102, %101
  %104 = lshr <8 x i32> %103, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %105 = trunc <8 x i32> %104 to <8 x i16>
  %106 = getelementptr inbounds i16, i16* %33, i64 24
  %107 = bitcast i16* %106 to <8 x i16>*
  store <8 x i16> %105, <8 x i16>* %107, align 2, !alias.scope !101, !noalias !98
  br label %138

108:                                              ; preds = %29, %108
  %109 = phi i64 [ %136, %108 ], [ 0, %29 ]
  %110 = phi i8* [ %127, %108 ], [ %32, %29 ]
  %111 = load i8, i8* %110, align 1
  %112 = zext i8 %111 to i32
  %113 = mul nuw nsw i32 %22, %112
  %114 = getelementptr inbounds i8, i8* %110, i64 1
  %115 = load i8, i8* %114, align 1
  %116 = zext i8 %115 to i32
  %117 = mul nuw nsw i32 %24, %116
  %118 = add nuw nsw i32 %113, 64
  %119 = add nuw nsw i32 %118, %117
  %120 = lshr i32 %119, 7
  %121 = trunc i32 %120 to i16
  %122 = getelementptr inbounds i16, i16* %33, i64 %109
  store i16 %121, i16* %122, align 2
  %123 = or i64 %109, 1
  %124 = load i8, i8* %114, align 1
  %125 = zext i8 %124 to i32
  %126 = mul nuw nsw i32 %22, %125
  %127 = getelementptr inbounds i8, i8* %110, i64 2
  %128 = load i8, i8* %127, align 1
  %129 = zext i8 %128 to i32
  %130 = mul nuw nsw i32 %24, %129
  %131 = add nuw nsw i32 %126, 64
  %132 = add nuw nsw i32 %131, %130
  %133 = lshr i32 %132, 7
  %134 = trunc i32 %133 to i16
  %135 = getelementptr inbounds i16, i16* %33, i64 %123
  store i16 %134, i16* %135, align 2
  %136 = add nuw nsw i64 %109, 2
  %137 = icmp eq i64 %136, 32
  br i1 %137, label %138, label %108, !llvm.loop !103

138:                                              ; preds = %108, %44
  %139 = phi i8* [ %45, %44 ], [ %127, %108 ]
  %140 = getelementptr inbounds i8, i8* %139, i64 %20
  %141 = getelementptr inbounds i16, i16* %33, i64 32
  %142 = add nuw nsw i32 %31, 1
  %143 = icmp eq i32 %142, 33
  %144 = add i64 %30, 1
  br i1 %143, label %145, label %29

145:                                              ; preds = %138
  %146 = sext i32 %3 to i64
  %147 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %146, i64 0
  %148 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %146, i64 1
  %149 = load i8, i8* %147, align 2
  %150 = zext i8 %149 to i32
  %151 = load i8, i8* %148, align 1
  %152 = zext i8 %151 to i32
  %153 = insertelement <8 x i32> undef, i32 %150, i32 0
  %154 = shufflevector <8 x i32> %153, <8 x i32> undef, <8 x i32> zeroinitializer
  %155 = insertelement <8 x i32> undef, i32 %152, i32 0
  %156 = shufflevector <8 x i32> %155, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %157

157:                                              ; preds = %268, %145
  %158 = phi i64 [ %273, %268 ], [ 0, %145 ]
  %159 = phi i32 [ %271, %268 ], [ 0, %145 ]
  %160 = phi i16* [ %269, %268 ], [ %15, %145 ]
  %161 = phi i8* [ %270, %268 ], [ %13, %145 ]
  %162 = shl nuw nsw i64 %158, 5
  %163 = add i64 %162, 32
  %164 = getelementptr [1024 x i8], [1024 x i8]* %10, i64 0, i64 %163
  %165 = getelementptr [1024 x i8], [1024 x i8]* %10, i64 0, i64 %162
  %166 = bitcast i16* %160 to i8*
  %167 = getelementptr i16, i16* %160, i64 64
  %168 = bitcast i16* %167 to i8*
  %169 = icmp ult i8* %165, %168
  %170 = icmp ugt i8* %164, %166
  %171 = and i1 %169, %170
  br i1 %171, label %236, label %172

172:                                              ; preds = %157
  %173 = getelementptr i16, i16* %160, i64 32
  %174 = bitcast i16* %160 to <8 x i16>*
  %175 = load <8 x i16>, <8 x i16>* %174, align 2, !alias.scope !104
  %176 = zext <8 x i16> %175 to <8 x i32>
  %177 = mul nuw nsw <8 x i32> %154, %176
  %178 = getelementptr inbounds i16, i16* %160, i64 32
  %179 = bitcast i16* %178 to <8 x i16>*
  %180 = load <8 x i16>, <8 x i16>* %179, align 2, !alias.scope !104
  %181 = zext <8 x i16> %180 to <8 x i32>
  %182 = mul nuw nsw <8 x i32> %156, %181
  %183 = add nuw nsw <8 x i32> %177, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %184 = add nuw nsw <8 x i32> %183, %182
  %185 = lshr <8 x i32> %184, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %186 = trunc <8 x i32> %185 to <8 x i8>
  %187 = bitcast i8* %161 to <8 x i8>*
  store <8 x i8> %186, <8 x i8>* %187, align 1, !alias.scope !107, !noalias !104
  %188 = getelementptr i16, i16* %160, i64 8
  %189 = bitcast i16* %188 to <8 x i16>*
  %190 = load <8 x i16>, <8 x i16>* %189, align 2, !alias.scope !104
  %191 = zext <8 x i16> %190 to <8 x i32>
  %192 = mul nuw nsw <8 x i32> %154, %191
  %193 = getelementptr inbounds i16, i16* %160, i64 40
  %194 = bitcast i16* %193 to <8 x i16>*
  %195 = load <8 x i16>, <8 x i16>* %194, align 2, !alias.scope !104
  %196 = zext <8 x i16> %195 to <8 x i32>
  %197 = mul nuw nsw <8 x i32> %156, %196
  %198 = add nuw nsw <8 x i32> %192, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %199 = add nuw nsw <8 x i32> %198, %197
  %200 = lshr <8 x i32> %199, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %201 = trunc <8 x i32> %200 to <8 x i8>
  %202 = getelementptr inbounds i8, i8* %161, i64 8
  %203 = bitcast i8* %202 to <8 x i8>*
  store <8 x i8> %201, <8 x i8>* %203, align 1, !alias.scope !107, !noalias !104
  %204 = getelementptr i16, i16* %160, i64 16
  %205 = bitcast i16* %204 to <8 x i16>*
  %206 = load <8 x i16>, <8 x i16>* %205, align 2, !alias.scope !104
  %207 = zext <8 x i16> %206 to <8 x i32>
  %208 = mul nuw nsw <8 x i32> %154, %207
  %209 = getelementptr inbounds i16, i16* %160, i64 48
  %210 = bitcast i16* %209 to <8 x i16>*
  %211 = load <8 x i16>, <8 x i16>* %210, align 2, !alias.scope !104
  %212 = zext <8 x i16> %211 to <8 x i32>
  %213 = mul nuw nsw <8 x i32> %156, %212
  %214 = add nuw nsw <8 x i32> %208, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %215 = add nuw nsw <8 x i32> %214, %213
  %216 = lshr <8 x i32> %215, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %217 = trunc <8 x i32> %216 to <8 x i8>
  %218 = getelementptr inbounds i8, i8* %161, i64 16
  %219 = bitcast i8* %218 to <8 x i8>*
  store <8 x i8> %217, <8 x i8>* %219, align 1, !alias.scope !107, !noalias !104
  %220 = getelementptr i16, i16* %160, i64 24
  %221 = bitcast i16* %220 to <8 x i16>*
  %222 = load <8 x i16>, <8 x i16>* %221, align 2, !alias.scope !104
  %223 = zext <8 x i16> %222 to <8 x i32>
  %224 = mul nuw nsw <8 x i32> %154, %223
  %225 = getelementptr inbounds i16, i16* %160, i64 56
  %226 = bitcast i16* %225 to <8 x i16>*
  %227 = load <8 x i16>, <8 x i16>* %226, align 2, !alias.scope !104
  %228 = zext <8 x i16> %227 to <8 x i32>
  %229 = mul nuw nsw <8 x i32> %156, %228
  %230 = add nuw nsw <8 x i32> %224, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %231 = add nuw nsw <8 x i32> %230, %229
  %232 = lshr <8 x i32> %231, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %233 = trunc <8 x i32> %232 to <8 x i8>
  %234 = getelementptr inbounds i8, i8* %161, i64 24
  %235 = bitcast i8* %234 to <8 x i8>*
  store <8 x i8> %233, <8 x i8>* %235, align 1, !alias.scope !107, !noalias !104
  br label %268

236:                                              ; preds = %157, %236
  %237 = phi i64 [ %266, %236 ], [ 0, %157 ]
  %238 = phi i16* [ %265, %236 ], [ %160, %157 ]
  %239 = load i16, i16* %238, align 2
  %240 = zext i16 %239 to i32
  %241 = mul nuw nsw i32 %150, %240
  %242 = getelementptr inbounds i16, i16* %238, i64 32
  %243 = load i16, i16* %242, align 2
  %244 = zext i16 %243 to i32
  %245 = mul nuw nsw i32 %152, %244
  %246 = add nuw nsw i32 %241, 64
  %247 = add nuw nsw i32 %246, %245
  %248 = lshr i32 %247, 7
  %249 = trunc i32 %248 to i8
  %250 = getelementptr inbounds i8, i8* %161, i64 %237
  store i8 %249, i8* %250, align 1
  %251 = getelementptr inbounds i16, i16* %238, i64 1
  %252 = or i64 %237, 1
  %253 = load i16, i16* %251, align 2
  %254 = zext i16 %253 to i32
  %255 = mul nuw nsw i32 %150, %254
  %256 = getelementptr inbounds i16, i16* %238, i64 33
  %257 = load i16, i16* %256, align 2
  %258 = zext i16 %257 to i32
  %259 = mul nuw nsw i32 %152, %258
  %260 = add nuw nsw i32 %255, 64
  %261 = add nuw nsw i32 %260, %259
  %262 = lshr i32 %261, 7
  %263 = trunc i32 %262 to i8
  %264 = getelementptr inbounds i8, i8* %161, i64 %252
  store i8 %263, i8* %264, align 1
  %265 = getelementptr inbounds i16, i16* %238, i64 2
  %266 = add nuw nsw i64 %237, 2
  %267 = icmp eq i64 %266, 32
  br i1 %267, label %268, label %236, !llvm.loop !109

268:                                              ; preds = %236, %172
  %269 = phi i16* [ %173, %172 ], [ %265, %236 ]
  %270 = getelementptr inbounds i8, i8* %161, i64 32
  %271 = add nuw nsw i32 %159, 1
  %272 = icmp eq i32 %271, 32
  %273 = add i64 %158, 1
  br i1 %272, label %274, label %157

274:                                              ; preds = %268, %274
  %275 = phi i8* [ %304, %274 ], [ %14, %268 ]
  %276 = phi i32 [ %307, %274 ], [ 0, %268 ]
  %277 = phi i8* [ %305, %274 ], [ %7, %268 ]
  %278 = phi i8* [ %306, %274 ], [ %13, %268 ]
  %279 = bitcast i8* %277 to <16 x i8>*
  %280 = load <16 x i8>, <16 x i8>* %279, align 1
  %281 = zext <16 x i8> %280 to <16 x i32>
  %282 = bitcast i8* %278 to <16 x i8>*
  %283 = load <16 x i8>, <16 x i8>* %282, align 1
  %284 = zext <16 x i8> %283 to <16 x i32>
  %285 = add nuw nsw <16 x i32> %281, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %286 = add nuw nsw <16 x i32> %285, %284
  %287 = lshr <16 x i32> %286, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %288 = trunc <16 x i32> %287 to <16 x i8>
  %289 = bitcast i8* %275 to <16 x i8>*
  store <16 x i8> %288, <16 x i8>* %289, align 1
  %290 = getelementptr inbounds i8, i8* %277, i64 16
  %291 = bitcast i8* %290 to <16 x i8>*
  %292 = load <16 x i8>, <16 x i8>* %291, align 1
  %293 = zext <16 x i8> %292 to <16 x i32>
  %294 = getelementptr inbounds i8, i8* %278, i64 16
  %295 = bitcast i8* %294 to <16 x i8>*
  %296 = load <16 x i8>, <16 x i8>* %295, align 1
  %297 = zext <16 x i8> %296 to <16 x i32>
  %298 = add nuw nsw <16 x i32> %293, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %299 = add nuw nsw <16 x i32> %298, %297
  %300 = lshr <16 x i32> %299, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %301 = trunc <16 x i32> %300 to <16 x i8>
  %302 = getelementptr inbounds i8, i8* %275, i64 16
  %303 = bitcast i8* %302 to <16 x i8>*
  store <16 x i8> %301, <16 x i8>* %303, align 1
  %304 = getelementptr inbounds i8, i8* %275, i64 32
  %305 = getelementptr inbounds i8, i8* %277, i64 32
  %306 = getelementptr inbounds i8, i8* %278, i64 32
  %307 = add nuw nsw i32 %276, 1
  %308 = icmp eq i32 %307, 32
  br i1 %308, label %309, label %274

309:                                              ; preds = %274
  store i32 0, i32* %6, align 4
  %310 = sext i32 %5 to i64
  br label %311

311:                                              ; preds = %344, %309
  %312 = phi i32 [ 0, %309 ], [ %341, %344 ]
  %313 = phi i32 [ 0, %309 ], [ %339, %344 ]
  %314 = phi i8* [ %14, %309 ], [ %345, %344 ]
  %315 = phi i32 [ 0, %309 ], [ %347, %344 ]
  %316 = phi i8* [ %4, %309 ], [ %346, %344 ]
  br label %317

317:                                              ; preds = %317, %311
  %318 = phi i32 [ %312, %311 ], [ %341, %317 ]
  %319 = phi i32 [ %313, %311 ], [ %339, %317 ]
  %320 = phi i64 [ 0, %311 ], [ %342, %317 ]
  %321 = getelementptr inbounds i8, i8* %314, i64 %320
  %322 = load i8, i8* %321, align 1
  %323 = zext i8 %322 to i32
  %324 = getelementptr inbounds i8, i8* %316, i64 %320
  %325 = load i8, i8* %324, align 1
  %326 = zext i8 %325 to i32
  %327 = sub nsw i32 %323, %326
  %328 = add nsw i32 %327, %319
  %329 = mul nsw i32 %327, %327
  %330 = add i32 %329, %318
  store i32 %330, i32* %6, align 4
  %331 = or i64 %320, 1
  %332 = getelementptr inbounds i8, i8* %314, i64 %331
  %333 = load i8, i8* %332, align 1
  %334 = zext i8 %333 to i32
  %335 = getelementptr inbounds i8, i8* %316, i64 %331
  %336 = load i8, i8* %335, align 1
  %337 = zext i8 %336 to i32
  %338 = sub nsw i32 %334, %337
  %339 = add nsw i32 %338, %328
  %340 = mul nsw i32 %338, %338
  %341 = add i32 %340, %330
  store i32 %341, i32* %6, align 4
  %342 = add nuw nsw i64 %320, 2
  %343 = icmp eq i64 %342, 32
  br i1 %343, label %344, label %317

344:                                              ; preds = %317
  %345 = getelementptr inbounds i8, i8* %314, i64 32
  %346 = getelementptr inbounds i8, i8* %316, i64 %310
  %347 = add nuw nsw i32 %315, 1
  %348 = icmp eq i32 %347, 32
  br i1 %348, label %349, label %311

349:                                              ; preds = %344
  %350 = sext i32 %339 to i64
  %351 = mul nsw i64 %350, %350
  %352 = lshr i64 %351, 10
  %353 = trunc i64 %352 to i32
  %354 = sub i32 %341, %353
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %14) #4
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %13) #4
  call void @llvm.lifetime.end.p0i8(i64 2112, i8* nonnull %12) #4
  ret i32 %354
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_variance32x16_c(i8* nocapture readonly, i32, i8* nocapture readonly, i32, i32* nocapture) local_unnamed_addr #2 {
  store i32 0, i32* %4, align 4
  %6 = sext i32 %1 to i64
  %7 = sext i32 %3 to i64
  br label %8

8:                                                ; preds = %41, %5
  %9 = phi i32 [ 0, %5 ], [ %38, %41 ]
  %10 = phi i32 [ 0, %5 ], [ %36, %41 ]
  %11 = phi i8* [ %0, %5 ], [ %42, %41 ]
  %12 = phi i32 [ 0, %5 ], [ %44, %41 ]
  %13 = phi i8* [ %2, %5 ], [ %43, %41 ]
  br label %14

14:                                               ; preds = %14, %8
  %15 = phi i32 [ %9, %8 ], [ %38, %14 ]
  %16 = phi i32 [ %10, %8 ], [ %36, %14 ]
  %17 = phi i64 [ 0, %8 ], [ %39, %14 ]
  %18 = getelementptr inbounds i8, i8* %11, i64 %17
  %19 = load i8, i8* %18, align 1
  %20 = zext i8 %19 to i32
  %21 = getelementptr inbounds i8, i8* %13, i64 %17
  %22 = load i8, i8* %21, align 1
  %23 = zext i8 %22 to i32
  %24 = sub nsw i32 %20, %23
  %25 = add nsw i32 %24, %16
  %26 = mul nsw i32 %24, %24
  %27 = add i32 %26, %15
  store i32 %27, i32* %4, align 4
  %28 = or i64 %17, 1
  %29 = getelementptr inbounds i8, i8* %11, i64 %28
  %30 = load i8, i8* %29, align 1
  %31 = zext i8 %30 to i32
  %32 = getelementptr inbounds i8, i8* %13, i64 %28
  %33 = load i8, i8* %32, align 1
  %34 = zext i8 %33 to i32
  %35 = sub nsw i32 %31, %34
  %36 = add nsw i32 %35, %25
  %37 = mul nsw i32 %35, %35
  %38 = add i32 %37, %27
  store i32 %38, i32* %4, align 4
  %39 = add nuw nsw i64 %17, 2
  %40 = icmp eq i64 %39, 32
  br i1 %40, label %41, label %14

41:                                               ; preds = %14
  %42 = getelementptr inbounds i8, i8* %11, i64 %6
  %43 = getelementptr inbounds i8, i8* %13, i64 %7
  %44 = add nuw nsw i32 %12, 1
  %45 = icmp eq i32 %44, 16
  br i1 %45, label %46, label %8

46:                                               ; preds = %41
  %47 = sext i32 %36 to i64
  %48 = mul nsw i64 %47, %47
  %49 = lshr i64 %48, 9
  %50 = trunc i64 %49 to i32
  %51 = sub i32 %38, %50
  ret i32 %51
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_sub_pixel_variance32x16_c(i8* nocapture readonly, i32, i32, i32, i8* nocapture readonly, i32, i32* nocapture) local_unnamed_addr #2 {
  %8 = alloca [544 x i16], align 16
  %9 = alloca [512 x i8], align 16
  %10 = bitcast [544 x i16]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1088, i8* nonnull %10) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %10, i8 -86, i64 1088, i1 false)
  %11 = getelementptr inbounds [512 x i8], [512 x i8]* %9, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %11) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %11, i8 -86, i64 512, i1 false)
  %12 = getelementptr inbounds [544 x i16], [544 x i16]* %8, i64 0, i64 0
  %13 = sext i32 %2 to i64
  %14 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %13, i64 0
  %15 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %13, i64 1
  %16 = add i32 %1, -32
  %17 = zext i32 %16 to i64
  %18 = load i8, i8* %14, align 2
  %19 = zext i8 %18 to i32
  %20 = load i8, i8* %15, align 1
  %21 = zext i8 %20 to i32
  %22 = insertelement <8 x i32> undef, i32 %19, i32 0
  %23 = shufflevector <8 x i32> %22, <8 x i32> undef, <8 x i32> zeroinitializer
  %24 = insertelement <8 x i32> undef, i32 %21, i32 0
  %25 = shufflevector <8 x i32> %24, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %26

26:                                               ; preds = %135, %7
  %27 = phi i64 [ %141, %135 ], [ 0, %7 ]
  %28 = phi i32 [ %139, %135 ], [ 0, %7 ]
  %29 = phi i8* [ %137, %135 ], [ %0, %7 ]
  %30 = phi i16* [ %138, %135 ], [ %12, %7 ]
  %31 = shl nuw nsw i64 %27, 5
  %32 = add i64 %31, 32
  %33 = getelementptr [544 x i16], [544 x i16]* %8, i64 0, i64 %32
  %34 = bitcast i16* %33 to i8*
  %35 = getelementptr [544 x i16], [544 x i16]* %8, i64 0, i64 %31
  %36 = bitcast i16* %35 to i8*
  %37 = getelementptr i8, i8* %29, i64 33
  %38 = icmp ugt i8* %37, %36
  %39 = icmp ult i8* %29, %34
  %40 = and i1 %38, %39
  br i1 %40, label %105, label %41

41:                                               ; preds = %26
  %42 = getelementptr i8, i8* %29, i64 32
  %43 = bitcast i8* %29 to <8 x i8>*
  %44 = load <8 x i8>, <8 x i8>* %43, align 1, !alias.scope !110
  %45 = zext <8 x i8> %44 to <8 x i32>
  %46 = mul nuw nsw <8 x i32> %23, %45
  %47 = getelementptr inbounds i8, i8* %29, i64 1
  %48 = bitcast i8* %47 to <8 x i8>*
  %49 = load <8 x i8>, <8 x i8>* %48, align 1, !alias.scope !110
  %50 = zext <8 x i8> %49 to <8 x i32>
  %51 = mul nuw nsw <8 x i32> %25, %50
  %52 = add nuw nsw <8 x i32> %46, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %53 = add nuw nsw <8 x i32> %52, %51
  %54 = lshr <8 x i32> %53, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %55 = trunc <8 x i32> %54 to <8 x i16>
  %56 = bitcast i16* %30 to <8 x i16>*
  store <8 x i16> %55, <8 x i16>* %56, align 2, !alias.scope !113, !noalias !110
  %57 = getelementptr i8, i8* %29, i64 8
  %58 = bitcast i8* %57 to <8 x i8>*
  %59 = load <8 x i8>, <8 x i8>* %58, align 1, !alias.scope !110
  %60 = zext <8 x i8> %59 to <8 x i32>
  %61 = mul nuw nsw <8 x i32> %23, %60
  %62 = getelementptr inbounds i8, i8* %29, i64 9
  %63 = bitcast i8* %62 to <8 x i8>*
  %64 = load <8 x i8>, <8 x i8>* %63, align 1, !alias.scope !110
  %65 = zext <8 x i8> %64 to <8 x i32>
  %66 = mul nuw nsw <8 x i32> %25, %65
  %67 = add nuw nsw <8 x i32> %61, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %68 = add nuw nsw <8 x i32> %67, %66
  %69 = lshr <8 x i32> %68, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %70 = trunc <8 x i32> %69 to <8 x i16>
  %71 = getelementptr inbounds i16, i16* %30, i64 8
  %72 = bitcast i16* %71 to <8 x i16>*
  store <8 x i16> %70, <8 x i16>* %72, align 2, !alias.scope !113, !noalias !110
  %73 = getelementptr i8, i8* %29, i64 16
  %74 = bitcast i8* %73 to <8 x i8>*
  %75 = load <8 x i8>, <8 x i8>* %74, align 1, !alias.scope !110
  %76 = zext <8 x i8> %75 to <8 x i32>
  %77 = mul nuw nsw <8 x i32> %23, %76
  %78 = getelementptr inbounds i8, i8* %29, i64 17
  %79 = bitcast i8* %78 to <8 x i8>*
  %80 = load <8 x i8>, <8 x i8>* %79, align 1, !alias.scope !110
  %81 = zext <8 x i8> %80 to <8 x i32>
  %82 = mul nuw nsw <8 x i32> %25, %81
  %83 = add nuw nsw <8 x i32> %77, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %84 = add nuw nsw <8 x i32> %83, %82
  %85 = lshr <8 x i32> %84, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %86 = trunc <8 x i32> %85 to <8 x i16>
  %87 = getelementptr inbounds i16, i16* %30, i64 16
  %88 = bitcast i16* %87 to <8 x i16>*
  store <8 x i16> %86, <8 x i16>* %88, align 2, !alias.scope !113, !noalias !110
  %89 = getelementptr i8, i8* %29, i64 24
  %90 = bitcast i8* %89 to <8 x i8>*
  %91 = load <8 x i8>, <8 x i8>* %90, align 1, !alias.scope !110
  %92 = zext <8 x i8> %91 to <8 x i32>
  %93 = mul nuw nsw <8 x i32> %23, %92
  %94 = getelementptr inbounds i8, i8* %29, i64 25
  %95 = bitcast i8* %94 to <8 x i8>*
  %96 = load <8 x i8>, <8 x i8>* %95, align 1, !alias.scope !110
  %97 = zext <8 x i8> %96 to <8 x i32>
  %98 = mul nuw nsw <8 x i32> %25, %97
  %99 = add nuw nsw <8 x i32> %93, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %100 = add nuw nsw <8 x i32> %99, %98
  %101 = lshr <8 x i32> %100, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %102 = trunc <8 x i32> %101 to <8 x i16>
  %103 = getelementptr inbounds i16, i16* %30, i64 24
  %104 = bitcast i16* %103 to <8 x i16>*
  store <8 x i16> %102, <8 x i16>* %104, align 2, !alias.scope !113, !noalias !110
  br label %135

105:                                              ; preds = %26, %105
  %106 = phi i64 [ %133, %105 ], [ 0, %26 ]
  %107 = phi i8* [ %124, %105 ], [ %29, %26 ]
  %108 = load i8, i8* %107, align 1
  %109 = zext i8 %108 to i32
  %110 = mul nuw nsw i32 %19, %109
  %111 = getelementptr inbounds i8, i8* %107, i64 1
  %112 = load i8, i8* %111, align 1
  %113 = zext i8 %112 to i32
  %114 = mul nuw nsw i32 %21, %113
  %115 = add nuw nsw i32 %110, 64
  %116 = add nuw nsw i32 %115, %114
  %117 = lshr i32 %116, 7
  %118 = trunc i32 %117 to i16
  %119 = getelementptr inbounds i16, i16* %30, i64 %106
  store i16 %118, i16* %119, align 2
  %120 = or i64 %106, 1
  %121 = load i8, i8* %111, align 1
  %122 = zext i8 %121 to i32
  %123 = mul nuw nsw i32 %19, %122
  %124 = getelementptr inbounds i8, i8* %107, i64 2
  %125 = load i8, i8* %124, align 1
  %126 = zext i8 %125 to i32
  %127 = mul nuw nsw i32 %21, %126
  %128 = add nuw nsw i32 %123, 64
  %129 = add nuw nsw i32 %128, %127
  %130 = lshr i32 %129, 7
  %131 = trunc i32 %130 to i16
  %132 = getelementptr inbounds i16, i16* %30, i64 %120
  store i16 %131, i16* %132, align 2
  %133 = add nuw nsw i64 %106, 2
  %134 = icmp eq i64 %133, 32
  br i1 %134, label %135, label %105, !llvm.loop !115

135:                                              ; preds = %105, %41
  %136 = phi i8* [ %42, %41 ], [ %124, %105 ]
  %137 = getelementptr inbounds i8, i8* %136, i64 %17
  %138 = getelementptr inbounds i16, i16* %30, i64 32
  %139 = add nuw nsw i32 %28, 1
  %140 = icmp eq i32 %139, 17
  %141 = add i64 %27, 1
  br i1 %140, label %142, label %26

142:                                              ; preds = %135
  %143 = sext i32 %3 to i64
  %144 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %143, i64 0
  %145 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %143, i64 1
  %146 = load i8, i8* %144, align 2
  %147 = zext i8 %146 to i32
  %148 = load i8, i8* %145, align 1
  %149 = zext i8 %148 to i32
  %150 = insertelement <8 x i32> undef, i32 %147, i32 0
  %151 = shufflevector <8 x i32> %150, <8 x i32> undef, <8 x i32> zeroinitializer
  %152 = insertelement <8 x i32> undef, i32 %149, i32 0
  %153 = shufflevector <8 x i32> %152, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %154

154:                                              ; preds = %265, %142
  %155 = phi i64 [ %270, %265 ], [ 0, %142 ]
  %156 = phi i32 [ %268, %265 ], [ 0, %142 ]
  %157 = phi i16* [ %266, %265 ], [ %12, %142 ]
  %158 = phi i8* [ %267, %265 ], [ %11, %142 ]
  %159 = shl nuw nsw i64 %155, 5
  %160 = add i64 %159, 32
  %161 = getelementptr [512 x i8], [512 x i8]* %9, i64 0, i64 %160
  %162 = getelementptr [512 x i8], [512 x i8]* %9, i64 0, i64 %159
  %163 = bitcast i16* %157 to i8*
  %164 = getelementptr i16, i16* %157, i64 64
  %165 = bitcast i16* %164 to i8*
  %166 = icmp ult i8* %162, %165
  %167 = icmp ugt i8* %161, %163
  %168 = and i1 %166, %167
  br i1 %168, label %233, label %169

169:                                              ; preds = %154
  %170 = getelementptr i16, i16* %157, i64 32
  %171 = bitcast i16* %157 to <8 x i16>*
  %172 = load <8 x i16>, <8 x i16>* %171, align 2, !alias.scope !116
  %173 = zext <8 x i16> %172 to <8 x i32>
  %174 = mul nuw nsw <8 x i32> %151, %173
  %175 = getelementptr inbounds i16, i16* %157, i64 32
  %176 = bitcast i16* %175 to <8 x i16>*
  %177 = load <8 x i16>, <8 x i16>* %176, align 2, !alias.scope !116
  %178 = zext <8 x i16> %177 to <8 x i32>
  %179 = mul nuw nsw <8 x i32> %153, %178
  %180 = add nuw nsw <8 x i32> %174, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %181 = add nuw nsw <8 x i32> %180, %179
  %182 = lshr <8 x i32> %181, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %183 = trunc <8 x i32> %182 to <8 x i8>
  %184 = bitcast i8* %158 to <8 x i8>*
  store <8 x i8> %183, <8 x i8>* %184, align 1, !alias.scope !119, !noalias !116
  %185 = getelementptr i16, i16* %157, i64 8
  %186 = bitcast i16* %185 to <8 x i16>*
  %187 = load <8 x i16>, <8 x i16>* %186, align 2, !alias.scope !116
  %188 = zext <8 x i16> %187 to <8 x i32>
  %189 = mul nuw nsw <8 x i32> %151, %188
  %190 = getelementptr inbounds i16, i16* %157, i64 40
  %191 = bitcast i16* %190 to <8 x i16>*
  %192 = load <8 x i16>, <8 x i16>* %191, align 2, !alias.scope !116
  %193 = zext <8 x i16> %192 to <8 x i32>
  %194 = mul nuw nsw <8 x i32> %153, %193
  %195 = add nuw nsw <8 x i32> %189, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %196 = add nuw nsw <8 x i32> %195, %194
  %197 = lshr <8 x i32> %196, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %198 = trunc <8 x i32> %197 to <8 x i8>
  %199 = getelementptr inbounds i8, i8* %158, i64 8
  %200 = bitcast i8* %199 to <8 x i8>*
  store <8 x i8> %198, <8 x i8>* %200, align 1, !alias.scope !119, !noalias !116
  %201 = getelementptr i16, i16* %157, i64 16
  %202 = bitcast i16* %201 to <8 x i16>*
  %203 = load <8 x i16>, <8 x i16>* %202, align 2, !alias.scope !116
  %204 = zext <8 x i16> %203 to <8 x i32>
  %205 = mul nuw nsw <8 x i32> %151, %204
  %206 = getelementptr inbounds i16, i16* %157, i64 48
  %207 = bitcast i16* %206 to <8 x i16>*
  %208 = load <8 x i16>, <8 x i16>* %207, align 2, !alias.scope !116
  %209 = zext <8 x i16> %208 to <8 x i32>
  %210 = mul nuw nsw <8 x i32> %153, %209
  %211 = add nuw nsw <8 x i32> %205, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %212 = add nuw nsw <8 x i32> %211, %210
  %213 = lshr <8 x i32> %212, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %214 = trunc <8 x i32> %213 to <8 x i8>
  %215 = getelementptr inbounds i8, i8* %158, i64 16
  %216 = bitcast i8* %215 to <8 x i8>*
  store <8 x i8> %214, <8 x i8>* %216, align 1, !alias.scope !119, !noalias !116
  %217 = getelementptr i16, i16* %157, i64 24
  %218 = bitcast i16* %217 to <8 x i16>*
  %219 = load <8 x i16>, <8 x i16>* %218, align 2, !alias.scope !116
  %220 = zext <8 x i16> %219 to <8 x i32>
  %221 = mul nuw nsw <8 x i32> %151, %220
  %222 = getelementptr inbounds i16, i16* %157, i64 56
  %223 = bitcast i16* %222 to <8 x i16>*
  %224 = load <8 x i16>, <8 x i16>* %223, align 2, !alias.scope !116
  %225 = zext <8 x i16> %224 to <8 x i32>
  %226 = mul nuw nsw <8 x i32> %153, %225
  %227 = add nuw nsw <8 x i32> %221, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %228 = add nuw nsw <8 x i32> %227, %226
  %229 = lshr <8 x i32> %228, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %230 = trunc <8 x i32> %229 to <8 x i8>
  %231 = getelementptr inbounds i8, i8* %158, i64 24
  %232 = bitcast i8* %231 to <8 x i8>*
  store <8 x i8> %230, <8 x i8>* %232, align 1, !alias.scope !119, !noalias !116
  br label %265

233:                                              ; preds = %154, %233
  %234 = phi i64 [ %263, %233 ], [ 0, %154 ]
  %235 = phi i16* [ %262, %233 ], [ %157, %154 ]
  %236 = load i16, i16* %235, align 2
  %237 = zext i16 %236 to i32
  %238 = mul nuw nsw i32 %147, %237
  %239 = getelementptr inbounds i16, i16* %235, i64 32
  %240 = load i16, i16* %239, align 2
  %241 = zext i16 %240 to i32
  %242 = mul nuw nsw i32 %149, %241
  %243 = add nuw nsw i32 %238, 64
  %244 = add nuw nsw i32 %243, %242
  %245 = lshr i32 %244, 7
  %246 = trunc i32 %245 to i8
  %247 = getelementptr inbounds i8, i8* %158, i64 %234
  store i8 %246, i8* %247, align 1
  %248 = getelementptr inbounds i16, i16* %235, i64 1
  %249 = or i64 %234, 1
  %250 = load i16, i16* %248, align 2
  %251 = zext i16 %250 to i32
  %252 = mul nuw nsw i32 %147, %251
  %253 = getelementptr inbounds i16, i16* %235, i64 33
  %254 = load i16, i16* %253, align 2
  %255 = zext i16 %254 to i32
  %256 = mul nuw nsw i32 %149, %255
  %257 = add nuw nsw i32 %252, 64
  %258 = add nuw nsw i32 %257, %256
  %259 = lshr i32 %258, 7
  %260 = trunc i32 %259 to i8
  %261 = getelementptr inbounds i8, i8* %158, i64 %249
  store i8 %260, i8* %261, align 1
  %262 = getelementptr inbounds i16, i16* %235, i64 2
  %263 = add nuw nsw i64 %234, 2
  %264 = icmp eq i64 %263, 32
  br i1 %264, label %265, label %233, !llvm.loop !121

265:                                              ; preds = %233, %169
  %266 = phi i16* [ %170, %169 ], [ %262, %233 ]
  %267 = getelementptr inbounds i8, i8* %158, i64 32
  %268 = add nuw nsw i32 %156, 1
  %269 = icmp eq i32 %268, 16
  %270 = add i64 %155, 1
  br i1 %269, label %271, label %154

271:                                              ; preds = %265
  store i32 0, i32* %6, align 4
  %272 = sext i32 %5 to i64
  br label %273

273:                                              ; preds = %306, %271
  %274 = phi i32 [ 0, %271 ], [ %303, %306 ]
  %275 = phi i32 [ 0, %271 ], [ %301, %306 ]
  %276 = phi i8* [ %11, %271 ], [ %307, %306 ]
  %277 = phi i32 [ 0, %271 ], [ %309, %306 ]
  %278 = phi i8* [ %4, %271 ], [ %308, %306 ]
  br label %279

279:                                              ; preds = %279, %273
  %280 = phi i32 [ %274, %273 ], [ %303, %279 ]
  %281 = phi i32 [ %275, %273 ], [ %301, %279 ]
  %282 = phi i64 [ 0, %273 ], [ %304, %279 ]
  %283 = getelementptr inbounds i8, i8* %276, i64 %282
  %284 = load i8, i8* %283, align 1
  %285 = zext i8 %284 to i32
  %286 = getelementptr inbounds i8, i8* %278, i64 %282
  %287 = load i8, i8* %286, align 1
  %288 = zext i8 %287 to i32
  %289 = sub nsw i32 %285, %288
  %290 = add nsw i32 %289, %281
  %291 = mul nsw i32 %289, %289
  %292 = add i32 %291, %280
  store i32 %292, i32* %6, align 4
  %293 = or i64 %282, 1
  %294 = getelementptr inbounds i8, i8* %276, i64 %293
  %295 = load i8, i8* %294, align 1
  %296 = zext i8 %295 to i32
  %297 = getelementptr inbounds i8, i8* %278, i64 %293
  %298 = load i8, i8* %297, align 1
  %299 = zext i8 %298 to i32
  %300 = sub nsw i32 %296, %299
  %301 = add nsw i32 %300, %290
  %302 = mul nsw i32 %300, %300
  %303 = add i32 %302, %292
  store i32 %303, i32* %6, align 4
  %304 = add nuw nsw i64 %282, 2
  %305 = icmp eq i64 %304, 32
  br i1 %305, label %306, label %279

306:                                              ; preds = %279
  %307 = getelementptr inbounds i8, i8* %276, i64 32
  %308 = getelementptr inbounds i8, i8* %278, i64 %272
  %309 = add nuw nsw i32 %277, 1
  %310 = icmp eq i32 %309, 16
  br i1 %310, label %311, label %273

311:                                              ; preds = %306
  %312 = sext i32 %301 to i64
  %313 = mul nsw i64 %312, %312
  %314 = lshr i64 %313, 9
  %315 = trunc i64 %314 to i32
  %316 = sub i32 %303, %315
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %11) #4
  call void @llvm.lifetime.end.p0i8(i64 1088, i8* nonnull %10) #4
  ret i32 %316
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_sub_pixel_avg_variance32x16_c(i8* nocapture readonly, i32, i32, i32, i8* nocapture readonly, i32, i32* nocapture, i8* nocapture readonly) local_unnamed_addr #2 {
  %9 = alloca [544 x i16], align 16
  %10 = alloca [512 x i8], align 16
  %11 = alloca [512 x i8], align 16
  %12 = bitcast [544 x i16]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1088, i8* nonnull %12) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %12, i8 -86, i64 1088, i1 false)
  %13 = getelementptr inbounds [512 x i8], [512 x i8]* %10, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %13) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %13, i8 -86, i64 512, i1 false)
  %14 = getelementptr inbounds [512 x i8], [512 x i8]* %11, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %14) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %14, i8 -86, i64 512, i1 false)
  %15 = getelementptr inbounds [544 x i16], [544 x i16]* %9, i64 0, i64 0
  %16 = sext i32 %2 to i64
  %17 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %16, i64 0
  %18 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %16, i64 1
  %19 = add i32 %1, -32
  %20 = zext i32 %19 to i64
  %21 = load i8, i8* %17, align 2
  %22 = zext i8 %21 to i32
  %23 = load i8, i8* %18, align 1
  %24 = zext i8 %23 to i32
  %25 = insertelement <8 x i32> undef, i32 %22, i32 0
  %26 = shufflevector <8 x i32> %25, <8 x i32> undef, <8 x i32> zeroinitializer
  %27 = insertelement <8 x i32> undef, i32 %24, i32 0
  %28 = shufflevector <8 x i32> %27, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %29

29:                                               ; preds = %138, %8
  %30 = phi i64 [ %144, %138 ], [ 0, %8 ]
  %31 = phi i32 [ %142, %138 ], [ 0, %8 ]
  %32 = phi i8* [ %140, %138 ], [ %0, %8 ]
  %33 = phi i16* [ %141, %138 ], [ %15, %8 ]
  %34 = shl nuw nsw i64 %30, 5
  %35 = add i64 %34, 32
  %36 = getelementptr [544 x i16], [544 x i16]* %9, i64 0, i64 %35
  %37 = bitcast i16* %36 to i8*
  %38 = getelementptr [544 x i16], [544 x i16]* %9, i64 0, i64 %34
  %39 = bitcast i16* %38 to i8*
  %40 = getelementptr i8, i8* %32, i64 33
  %41 = icmp ugt i8* %40, %39
  %42 = icmp ult i8* %32, %37
  %43 = and i1 %41, %42
  br i1 %43, label %108, label %44

44:                                               ; preds = %29
  %45 = getelementptr i8, i8* %32, i64 32
  %46 = bitcast i8* %32 to <8 x i8>*
  %47 = load <8 x i8>, <8 x i8>* %46, align 1, !alias.scope !122
  %48 = zext <8 x i8> %47 to <8 x i32>
  %49 = mul nuw nsw <8 x i32> %26, %48
  %50 = getelementptr inbounds i8, i8* %32, i64 1
  %51 = bitcast i8* %50 to <8 x i8>*
  %52 = load <8 x i8>, <8 x i8>* %51, align 1, !alias.scope !122
  %53 = zext <8 x i8> %52 to <8 x i32>
  %54 = mul nuw nsw <8 x i32> %28, %53
  %55 = add nuw nsw <8 x i32> %49, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %56 = add nuw nsw <8 x i32> %55, %54
  %57 = lshr <8 x i32> %56, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %58 = trunc <8 x i32> %57 to <8 x i16>
  %59 = bitcast i16* %33 to <8 x i16>*
  store <8 x i16> %58, <8 x i16>* %59, align 2, !alias.scope !125, !noalias !122
  %60 = getelementptr i8, i8* %32, i64 8
  %61 = bitcast i8* %60 to <8 x i8>*
  %62 = load <8 x i8>, <8 x i8>* %61, align 1, !alias.scope !122
  %63 = zext <8 x i8> %62 to <8 x i32>
  %64 = mul nuw nsw <8 x i32> %26, %63
  %65 = getelementptr inbounds i8, i8* %32, i64 9
  %66 = bitcast i8* %65 to <8 x i8>*
  %67 = load <8 x i8>, <8 x i8>* %66, align 1, !alias.scope !122
  %68 = zext <8 x i8> %67 to <8 x i32>
  %69 = mul nuw nsw <8 x i32> %28, %68
  %70 = add nuw nsw <8 x i32> %64, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %71 = add nuw nsw <8 x i32> %70, %69
  %72 = lshr <8 x i32> %71, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %73 = trunc <8 x i32> %72 to <8 x i16>
  %74 = getelementptr inbounds i16, i16* %33, i64 8
  %75 = bitcast i16* %74 to <8 x i16>*
  store <8 x i16> %73, <8 x i16>* %75, align 2, !alias.scope !125, !noalias !122
  %76 = getelementptr i8, i8* %32, i64 16
  %77 = bitcast i8* %76 to <8 x i8>*
  %78 = load <8 x i8>, <8 x i8>* %77, align 1, !alias.scope !122
  %79 = zext <8 x i8> %78 to <8 x i32>
  %80 = mul nuw nsw <8 x i32> %26, %79
  %81 = getelementptr inbounds i8, i8* %32, i64 17
  %82 = bitcast i8* %81 to <8 x i8>*
  %83 = load <8 x i8>, <8 x i8>* %82, align 1, !alias.scope !122
  %84 = zext <8 x i8> %83 to <8 x i32>
  %85 = mul nuw nsw <8 x i32> %28, %84
  %86 = add nuw nsw <8 x i32> %80, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %87 = add nuw nsw <8 x i32> %86, %85
  %88 = lshr <8 x i32> %87, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %89 = trunc <8 x i32> %88 to <8 x i16>
  %90 = getelementptr inbounds i16, i16* %33, i64 16
  %91 = bitcast i16* %90 to <8 x i16>*
  store <8 x i16> %89, <8 x i16>* %91, align 2, !alias.scope !125, !noalias !122
  %92 = getelementptr i8, i8* %32, i64 24
  %93 = bitcast i8* %92 to <8 x i8>*
  %94 = load <8 x i8>, <8 x i8>* %93, align 1, !alias.scope !122
  %95 = zext <8 x i8> %94 to <8 x i32>
  %96 = mul nuw nsw <8 x i32> %26, %95
  %97 = getelementptr inbounds i8, i8* %32, i64 25
  %98 = bitcast i8* %97 to <8 x i8>*
  %99 = load <8 x i8>, <8 x i8>* %98, align 1, !alias.scope !122
  %100 = zext <8 x i8> %99 to <8 x i32>
  %101 = mul nuw nsw <8 x i32> %28, %100
  %102 = add nuw nsw <8 x i32> %96, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %103 = add nuw nsw <8 x i32> %102, %101
  %104 = lshr <8 x i32> %103, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %105 = trunc <8 x i32> %104 to <8 x i16>
  %106 = getelementptr inbounds i16, i16* %33, i64 24
  %107 = bitcast i16* %106 to <8 x i16>*
  store <8 x i16> %105, <8 x i16>* %107, align 2, !alias.scope !125, !noalias !122
  br label %138

108:                                              ; preds = %29, %108
  %109 = phi i64 [ %136, %108 ], [ 0, %29 ]
  %110 = phi i8* [ %127, %108 ], [ %32, %29 ]
  %111 = load i8, i8* %110, align 1
  %112 = zext i8 %111 to i32
  %113 = mul nuw nsw i32 %22, %112
  %114 = getelementptr inbounds i8, i8* %110, i64 1
  %115 = load i8, i8* %114, align 1
  %116 = zext i8 %115 to i32
  %117 = mul nuw nsw i32 %24, %116
  %118 = add nuw nsw i32 %113, 64
  %119 = add nuw nsw i32 %118, %117
  %120 = lshr i32 %119, 7
  %121 = trunc i32 %120 to i16
  %122 = getelementptr inbounds i16, i16* %33, i64 %109
  store i16 %121, i16* %122, align 2
  %123 = or i64 %109, 1
  %124 = load i8, i8* %114, align 1
  %125 = zext i8 %124 to i32
  %126 = mul nuw nsw i32 %22, %125
  %127 = getelementptr inbounds i8, i8* %110, i64 2
  %128 = load i8, i8* %127, align 1
  %129 = zext i8 %128 to i32
  %130 = mul nuw nsw i32 %24, %129
  %131 = add nuw nsw i32 %126, 64
  %132 = add nuw nsw i32 %131, %130
  %133 = lshr i32 %132, 7
  %134 = trunc i32 %133 to i16
  %135 = getelementptr inbounds i16, i16* %33, i64 %123
  store i16 %134, i16* %135, align 2
  %136 = add nuw nsw i64 %109, 2
  %137 = icmp eq i64 %136, 32
  br i1 %137, label %138, label %108, !llvm.loop !127

138:                                              ; preds = %108, %44
  %139 = phi i8* [ %45, %44 ], [ %127, %108 ]
  %140 = getelementptr inbounds i8, i8* %139, i64 %20
  %141 = getelementptr inbounds i16, i16* %33, i64 32
  %142 = add nuw nsw i32 %31, 1
  %143 = icmp eq i32 %142, 17
  %144 = add i64 %30, 1
  br i1 %143, label %145, label %29

145:                                              ; preds = %138
  %146 = sext i32 %3 to i64
  %147 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %146, i64 0
  %148 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %146, i64 1
  %149 = load i8, i8* %147, align 2
  %150 = zext i8 %149 to i32
  %151 = load i8, i8* %148, align 1
  %152 = zext i8 %151 to i32
  %153 = insertelement <8 x i32> undef, i32 %150, i32 0
  %154 = shufflevector <8 x i32> %153, <8 x i32> undef, <8 x i32> zeroinitializer
  %155 = insertelement <8 x i32> undef, i32 %152, i32 0
  %156 = shufflevector <8 x i32> %155, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %157

157:                                              ; preds = %268, %145
  %158 = phi i64 [ %273, %268 ], [ 0, %145 ]
  %159 = phi i32 [ %271, %268 ], [ 0, %145 ]
  %160 = phi i16* [ %269, %268 ], [ %15, %145 ]
  %161 = phi i8* [ %270, %268 ], [ %13, %145 ]
  %162 = shl nuw nsw i64 %158, 5
  %163 = add i64 %162, 32
  %164 = getelementptr [512 x i8], [512 x i8]* %10, i64 0, i64 %163
  %165 = getelementptr [512 x i8], [512 x i8]* %10, i64 0, i64 %162
  %166 = bitcast i16* %160 to i8*
  %167 = getelementptr i16, i16* %160, i64 64
  %168 = bitcast i16* %167 to i8*
  %169 = icmp ult i8* %165, %168
  %170 = icmp ugt i8* %164, %166
  %171 = and i1 %169, %170
  br i1 %171, label %236, label %172

172:                                              ; preds = %157
  %173 = getelementptr i16, i16* %160, i64 32
  %174 = bitcast i16* %160 to <8 x i16>*
  %175 = load <8 x i16>, <8 x i16>* %174, align 2, !alias.scope !128
  %176 = zext <8 x i16> %175 to <8 x i32>
  %177 = mul nuw nsw <8 x i32> %154, %176
  %178 = getelementptr inbounds i16, i16* %160, i64 32
  %179 = bitcast i16* %178 to <8 x i16>*
  %180 = load <8 x i16>, <8 x i16>* %179, align 2, !alias.scope !128
  %181 = zext <8 x i16> %180 to <8 x i32>
  %182 = mul nuw nsw <8 x i32> %156, %181
  %183 = add nuw nsw <8 x i32> %177, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %184 = add nuw nsw <8 x i32> %183, %182
  %185 = lshr <8 x i32> %184, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %186 = trunc <8 x i32> %185 to <8 x i8>
  %187 = bitcast i8* %161 to <8 x i8>*
  store <8 x i8> %186, <8 x i8>* %187, align 1, !alias.scope !131, !noalias !128
  %188 = getelementptr i16, i16* %160, i64 8
  %189 = bitcast i16* %188 to <8 x i16>*
  %190 = load <8 x i16>, <8 x i16>* %189, align 2, !alias.scope !128
  %191 = zext <8 x i16> %190 to <8 x i32>
  %192 = mul nuw nsw <8 x i32> %154, %191
  %193 = getelementptr inbounds i16, i16* %160, i64 40
  %194 = bitcast i16* %193 to <8 x i16>*
  %195 = load <8 x i16>, <8 x i16>* %194, align 2, !alias.scope !128
  %196 = zext <8 x i16> %195 to <8 x i32>
  %197 = mul nuw nsw <8 x i32> %156, %196
  %198 = add nuw nsw <8 x i32> %192, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %199 = add nuw nsw <8 x i32> %198, %197
  %200 = lshr <8 x i32> %199, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %201 = trunc <8 x i32> %200 to <8 x i8>
  %202 = getelementptr inbounds i8, i8* %161, i64 8
  %203 = bitcast i8* %202 to <8 x i8>*
  store <8 x i8> %201, <8 x i8>* %203, align 1, !alias.scope !131, !noalias !128
  %204 = getelementptr i16, i16* %160, i64 16
  %205 = bitcast i16* %204 to <8 x i16>*
  %206 = load <8 x i16>, <8 x i16>* %205, align 2, !alias.scope !128
  %207 = zext <8 x i16> %206 to <8 x i32>
  %208 = mul nuw nsw <8 x i32> %154, %207
  %209 = getelementptr inbounds i16, i16* %160, i64 48
  %210 = bitcast i16* %209 to <8 x i16>*
  %211 = load <8 x i16>, <8 x i16>* %210, align 2, !alias.scope !128
  %212 = zext <8 x i16> %211 to <8 x i32>
  %213 = mul nuw nsw <8 x i32> %156, %212
  %214 = add nuw nsw <8 x i32> %208, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %215 = add nuw nsw <8 x i32> %214, %213
  %216 = lshr <8 x i32> %215, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %217 = trunc <8 x i32> %216 to <8 x i8>
  %218 = getelementptr inbounds i8, i8* %161, i64 16
  %219 = bitcast i8* %218 to <8 x i8>*
  store <8 x i8> %217, <8 x i8>* %219, align 1, !alias.scope !131, !noalias !128
  %220 = getelementptr i16, i16* %160, i64 24
  %221 = bitcast i16* %220 to <8 x i16>*
  %222 = load <8 x i16>, <8 x i16>* %221, align 2, !alias.scope !128
  %223 = zext <8 x i16> %222 to <8 x i32>
  %224 = mul nuw nsw <8 x i32> %154, %223
  %225 = getelementptr inbounds i16, i16* %160, i64 56
  %226 = bitcast i16* %225 to <8 x i16>*
  %227 = load <8 x i16>, <8 x i16>* %226, align 2, !alias.scope !128
  %228 = zext <8 x i16> %227 to <8 x i32>
  %229 = mul nuw nsw <8 x i32> %156, %228
  %230 = add nuw nsw <8 x i32> %224, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %231 = add nuw nsw <8 x i32> %230, %229
  %232 = lshr <8 x i32> %231, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %233 = trunc <8 x i32> %232 to <8 x i8>
  %234 = getelementptr inbounds i8, i8* %161, i64 24
  %235 = bitcast i8* %234 to <8 x i8>*
  store <8 x i8> %233, <8 x i8>* %235, align 1, !alias.scope !131, !noalias !128
  br label %268

236:                                              ; preds = %157, %236
  %237 = phi i64 [ %266, %236 ], [ 0, %157 ]
  %238 = phi i16* [ %265, %236 ], [ %160, %157 ]
  %239 = load i16, i16* %238, align 2
  %240 = zext i16 %239 to i32
  %241 = mul nuw nsw i32 %150, %240
  %242 = getelementptr inbounds i16, i16* %238, i64 32
  %243 = load i16, i16* %242, align 2
  %244 = zext i16 %243 to i32
  %245 = mul nuw nsw i32 %152, %244
  %246 = add nuw nsw i32 %241, 64
  %247 = add nuw nsw i32 %246, %245
  %248 = lshr i32 %247, 7
  %249 = trunc i32 %248 to i8
  %250 = getelementptr inbounds i8, i8* %161, i64 %237
  store i8 %249, i8* %250, align 1
  %251 = getelementptr inbounds i16, i16* %238, i64 1
  %252 = or i64 %237, 1
  %253 = load i16, i16* %251, align 2
  %254 = zext i16 %253 to i32
  %255 = mul nuw nsw i32 %150, %254
  %256 = getelementptr inbounds i16, i16* %238, i64 33
  %257 = load i16, i16* %256, align 2
  %258 = zext i16 %257 to i32
  %259 = mul nuw nsw i32 %152, %258
  %260 = add nuw nsw i32 %255, 64
  %261 = add nuw nsw i32 %260, %259
  %262 = lshr i32 %261, 7
  %263 = trunc i32 %262 to i8
  %264 = getelementptr inbounds i8, i8* %161, i64 %252
  store i8 %263, i8* %264, align 1
  %265 = getelementptr inbounds i16, i16* %238, i64 2
  %266 = add nuw nsw i64 %237, 2
  %267 = icmp eq i64 %266, 32
  br i1 %267, label %268, label %236, !llvm.loop !133

268:                                              ; preds = %236, %172
  %269 = phi i16* [ %173, %172 ], [ %265, %236 ]
  %270 = getelementptr inbounds i8, i8* %161, i64 32
  %271 = add nuw nsw i32 %159, 1
  %272 = icmp eq i32 %271, 16
  %273 = add i64 %158, 1
  br i1 %272, label %274, label %157

274:                                              ; preds = %268, %274
  %275 = phi i8* [ %304, %274 ], [ %14, %268 ]
  %276 = phi i32 [ %307, %274 ], [ 0, %268 ]
  %277 = phi i8* [ %305, %274 ], [ %7, %268 ]
  %278 = phi i8* [ %306, %274 ], [ %13, %268 ]
  %279 = bitcast i8* %277 to <16 x i8>*
  %280 = load <16 x i8>, <16 x i8>* %279, align 1
  %281 = zext <16 x i8> %280 to <16 x i32>
  %282 = bitcast i8* %278 to <16 x i8>*
  %283 = load <16 x i8>, <16 x i8>* %282, align 1
  %284 = zext <16 x i8> %283 to <16 x i32>
  %285 = add nuw nsw <16 x i32> %281, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %286 = add nuw nsw <16 x i32> %285, %284
  %287 = lshr <16 x i32> %286, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %288 = trunc <16 x i32> %287 to <16 x i8>
  %289 = bitcast i8* %275 to <16 x i8>*
  store <16 x i8> %288, <16 x i8>* %289, align 1
  %290 = getelementptr inbounds i8, i8* %277, i64 16
  %291 = bitcast i8* %290 to <16 x i8>*
  %292 = load <16 x i8>, <16 x i8>* %291, align 1
  %293 = zext <16 x i8> %292 to <16 x i32>
  %294 = getelementptr inbounds i8, i8* %278, i64 16
  %295 = bitcast i8* %294 to <16 x i8>*
  %296 = load <16 x i8>, <16 x i8>* %295, align 1
  %297 = zext <16 x i8> %296 to <16 x i32>
  %298 = add nuw nsw <16 x i32> %293, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %299 = add nuw nsw <16 x i32> %298, %297
  %300 = lshr <16 x i32> %299, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %301 = trunc <16 x i32> %300 to <16 x i8>
  %302 = getelementptr inbounds i8, i8* %275, i64 16
  %303 = bitcast i8* %302 to <16 x i8>*
  store <16 x i8> %301, <16 x i8>* %303, align 1
  %304 = getelementptr inbounds i8, i8* %275, i64 32
  %305 = getelementptr inbounds i8, i8* %277, i64 32
  %306 = getelementptr inbounds i8, i8* %278, i64 32
  %307 = add nuw nsw i32 %276, 1
  %308 = icmp eq i32 %307, 16
  br i1 %308, label %309, label %274

309:                                              ; preds = %274
  store i32 0, i32* %6, align 4
  %310 = sext i32 %5 to i64
  br label %311

311:                                              ; preds = %344, %309
  %312 = phi i32 [ 0, %309 ], [ %341, %344 ]
  %313 = phi i32 [ 0, %309 ], [ %339, %344 ]
  %314 = phi i8* [ %14, %309 ], [ %345, %344 ]
  %315 = phi i32 [ 0, %309 ], [ %347, %344 ]
  %316 = phi i8* [ %4, %309 ], [ %346, %344 ]
  br label %317

317:                                              ; preds = %317, %311
  %318 = phi i32 [ %312, %311 ], [ %341, %317 ]
  %319 = phi i32 [ %313, %311 ], [ %339, %317 ]
  %320 = phi i64 [ 0, %311 ], [ %342, %317 ]
  %321 = getelementptr inbounds i8, i8* %314, i64 %320
  %322 = load i8, i8* %321, align 1
  %323 = zext i8 %322 to i32
  %324 = getelementptr inbounds i8, i8* %316, i64 %320
  %325 = load i8, i8* %324, align 1
  %326 = zext i8 %325 to i32
  %327 = sub nsw i32 %323, %326
  %328 = add nsw i32 %327, %319
  %329 = mul nsw i32 %327, %327
  %330 = add i32 %329, %318
  store i32 %330, i32* %6, align 4
  %331 = or i64 %320, 1
  %332 = getelementptr inbounds i8, i8* %314, i64 %331
  %333 = load i8, i8* %332, align 1
  %334 = zext i8 %333 to i32
  %335 = getelementptr inbounds i8, i8* %316, i64 %331
  %336 = load i8, i8* %335, align 1
  %337 = zext i8 %336 to i32
  %338 = sub nsw i32 %334, %337
  %339 = add nsw i32 %338, %328
  %340 = mul nsw i32 %338, %338
  %341 = add i32 %340, %330
  store i32 %341, i32* %6, align 4
  %342 = add nuw nsw i64 %320, 2
  %343 = icmp eq i64 %342, 32
  br i1 %343, label %344, label %317

344:                                              ; preds = %317
  %345 = getelementptr inbounds i8, i8* %314, i64 32
  %346 = getelementptr inbounds i8, i8* %316, i64 %310
  %347 = add nuw nsw i32 %315, 1
  %348 = icmp eq i32 %347, 16
  br i1 %348, label %349, label %311

349:                                              ; preds = %344
  %350 = sext i32 %339 to i64
  %351 = mul nsw i64 %350, %350
  %352 = lshr i64 %351, 9
  %353 = trunc i64 %352 to i32
  %354 = sub i32 %341, %353
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %14) #4
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %13) #4
  call void @llvm.lifetime.end.p0i8(i64 1088, i8* nonnull %12) #4
  ret i32 %354
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_variance16x32_c(i8* nocapture readonly, i32, i8* nocapture readonly, i32, i32* nocapture) local_unnamed_addr #2 {
  store i32 0, i32* %4, align 4
  %6 = sext i32 %1 to i64
  %7 = sext i32 %3 to i64
  br label %8

8:                                                ; preds = %8, %5
  %9 = phi i32 [ 0, %5 ], [ %171, %8 ]
  %10 = phi i32 [ 0, %5 ], [ %169, %8 ]
  %11 = phi i8* [ %0, %5 ], [ %172, %8 ]
  %12 = phi i32 [ 0, %5 ], [ %174, %8 ]
  %13 = phi i8* [ %2, %5 ], [ %173, %8 ]
  %14 = load i8, i8* %11, align 1
  %15 = zext i8 %14 to i32
  %16 = load i8, i8* %13, align 1
  %17 = zext i8 %16 to i32
  %18 = sub nsw i32 %15, %17
  %19 = add nsw i32 %18, %10
  %20 = mul nsw i32 %18, %18
  %21 = add i32 %20, %9
  store i32 %21, i32* %4, align 4
  %22 = getelementptr inbounds i8, i8* %11, i64 1
  %23 = load i8, i8* %22, align 1
  %24 = zext i8 %23 to i32
  %25 = getelementptr inbounds i8, i8* %13, i64 1
  %26 = load i8, i8* %25, align 1
  %27 = zext i8 %26 to i32
  %28 = sub nsw i32 %24, %27
  %29 = add nsw i32 %28, %19
  %30 = mul nsw i32 %28, %28
  %31 = add i32 %30, %21
  store i32 %31, i32* %4, align 4
  %32 = getelementptr inbounds i8, i8* %11, i64 2
  %33 = load i8, i8* %32, align 1
  %34 = zext i8 %33 to i32
  %35 = getelementptr inbounds i8, i8* %13, i64 2
  %36 = load i8, i8* %35, align 1
  %37 = zext i8 %36 to i32
  %38 = sub nsw i32 %34, %37
  %39 = add nsw i32 %38, %29
  %40 = mul nsw i32 %38, %38
  %41 = add i32 %40, %31
  store i32 %41, i32* %4, align 4
  %42 = getelementptr inbounds i8, i8* %11, i64 3
  %43 = load i8, i8* %42, align 1
  %44 = zext i8 %43 to i32
  %45 = getelementptr inbounds i8, i8* %13, i64 3
  %46 = load i8, i8* %45, align 1
  %47 = zext i8 %46 to i32
  %48 = sub nsw i32 %44, %47
  %49 = add nsw i32 %48, %39
  %50 = mul nsw i32 %48, %48
  %51 = add i32 %50, %41
  store i32 %51, i32* %4, align 4
  %52 = getelementptr inbounds i8, i8* %11, i64 4
  %53 = load i8, i8* %52, align 1
  %54 = zext i8 %53 to i32
  %55 = getelementptr inbounds i8, i8* %13, i64 4
  %56 = load i8, i8* %55, align 1
  %57 = zext i8 %56 to i32
  %58 = sub nsw i32 %54, %57
  %59 = add nsw i32 %58, %49
  %60 = mul nsw i32 %58, %58
  %61 = add i32 %60, %51
  store i32 %61, i32* %4, align 4
  %62 = getelementptr inbounds i8, i8* %11, i64 5
  %63 = load i8, i8* %62, align 1
  %64 = zext i8 %63 to i32
  %65 = getelementptr inbounds i8, i8* %13, i64 5
  %66 = load i8, i8* %65, align 1
  %67 = zext i8 %66 to i32
  %68 = sub nsw i32 %64, %67
  %69 = add nsw i32 %68, %59
  %70 = mul nsw i32 %68, %68
  %71 = add i32 %70, %61
  store i32 %71, i32* %4, align 4
  %72 = getelementptr inbounds i8, i8* %11, i64 6
  %73 = load i8, i8* %72, align 1
  %74 = zext i8 %73 to i32
  %75 = getelementptr inbounds i8, i8* %13, i64 6
  %76 = load i8, i8* %75, align 1
  %77 = zext i8 %76 to i32
  %78 = sub nsw i32 %74, %77
  %79 = add nsw i32 %78, %69
  %80 = mul nsw i32 %78, %78
  %81 = add i32 %80, %71
  store i32 %81, i32* %4, align 4
  %82 = getelementptr inbounds i8, i8* %11, i64 7
  %83 = load i8, i8* %82, align 1
  %84 = zext i8 %83 to i32
  %85 = getelementptr inbounds i8, i8* %13, i64 7
  %86 = load i8, i8* %85, align 1
  %87 = zext i8 %86 to i32
  %88 = sub nsw i32 %84, %87
  %89 = add nsw i32 %88, %79
  %90 = mul nsw i32 %88, %88
  %91 = add i32 %90, %81
  store i32 %91, i32* %4, align 4
  %92 = getelementptr inbounds i8, i8* %11, i64 8
  %93 = load i8, i8* %92, align 1
  %94 = zext i8 %93 to i32
  %95 = getelementptr inbounds i8, i8* %13, i64 8
  %96 = load i8, i8* %95, align 1
  %97 = zext i8 %96 to i32
  %98 = sub nsw i32 %94, %97
  %99 = add nsw i32 %98, %89
  %100 = mul nsw i32 %98, %98
  %101 = add i32 %100, %91
  store i32 %101, i32* %4, align 4
  %102 = getelementptr inbounds i8, i8* %11, i64 9
  %103 = load i8, i8* %102, align 1
  %104 = zext i8 %103 to i32
  %105 = getelementptr inbounds i8, i8* %13, i64 9
  %106 = load i8, i8* %105, align 1
  %107 = zext i8 %106 to i32
  %108 = sub nsw i32 %104, %107
  %109 = add nsw i32 %108, %99
  %110 = mul nsw i32 %108, %108
  %111 = add i32 %110, %101
  store i32 %111, i32* %4, align 4
  %112 = getelementptr inbounds i8, i8* %11, i64 10
  %113 = load i8, i8* %112, align 1
  %114 = zext i8 %113 to i32
  %115 = getelementptr inbounds i8, i8* %13, i64 10
  %116 = load i8, i8* %115, align 1
  %117 = zext i8 %116 to i32
  %118 = sub nsw i32 %114, %117
  %119 = add nsw i32 %118, %109
  %120 = mul nsw i32 %118, %118
  %121 = add i32 %120, %111
  store i32 %121, i32* %4, align 4
  %122 = getelementptr inbounds i8, i8* %11, i64 11
  %123 = load i8, i8* %122, align 1
  %124 = zext i8 %123 to i32
  %125 = getelementptr inbounds i8, i8* %13, i64 11
  %126 = load i8, i8* %125, align 1
  %127 = zext i8 %126 to i32
  %128 = sub nsw i32 %124, %127
  %129 = add nsw i32 %128, %119
  %130 = mul nsw i32 %128, %128
  %131 = add i32 %130, %121
  store i32 %131, i32* %4, align 4
  %132 = getelementptr inbounds i8, i8* %11, i64 12
  %133 = load i8, i8* %132, align 1
  %134 = zext i8 %133 to i32
  %135 = getelementptr inbounds i8, i8* %13, i64 12
  %136 = load i8, i8* %135, align 1
  %137 = zext i8 %136 to i32
  %138 = sub nsw i32 %134, %137
  %139 = add nsw i32 %138, %129
  %140 = mul nsw i32 %138, %138
  %141 = add i32 %140, %131
  store i32 %141, i32* %4, align 4
  %142 = getelementptr inbounds i8, i8* %11, i64 13
  %143 = load i8, i8* %142, align 1
  %144 = zext i8 %143 to i32
  %145 = getelementptr inbounds i8, i8* %13, i64 13
  %146 = load i8, i8* %145, align 1
  %147 = zext i8 %146 to i32
  %148 = sub nsw i32 %144, %147
  %149 = add nsw i32 %148, %139
  %150 = mul nsw i32 %148, %148
  %151 = add i32 %150, %141
  store i32 %151, i32* %4, align 4
  %152 = getelementptr inbounds i8, i8* %11, i64 14
  %153 = load i8, i8* %152, align 1
  %154 = zext i8 %153 to i32
  %155 = getelementptr inbounds i8, i8* %13, i64 14
  %156 = load i8, i8* %155, align 1
  %157 = zext i8 %156 to i32
  %158 = sub nsw i32 %154, %157
  %159 = add nsw i32 %158, %149
  %160 = mul nsw i32 %158, %158
  %161 = add i32 %160, %151
  store i32 %161, i32* %4, align 4
  %162 = getelementptr inbounds i8, i8* %11, i64 15
  %163 = load i8, i8* %162, align 1
  %164 = zext i8 %163 to i32
  %165 = getelementptr inbounds i8, i8* %13, i64 15
  %166 = load i8, i8* %165, align 1
  %167 = zext i8 %166 to i32
  %168 = sub nsw i32 %164, %167
  %169 = add nsw i32 %168, %159
  %170 = mul nsw i32 %168, %168
  %171 = add i32 %170, %161
  store i32 %171, i32* %4, align 4
  %172 = getelementptr inbounds i8, i8* %11, i64 %6
  %173 = getelementptr inbounds i8, i8* %13, i64 %7
  %174 = add nuw nsw i32 %12, 1
  %175 = icmp eq i32 %174, 32
  br i1 %175, label %176, label %8

176:                                              ; preds = %8
  %177 = sext i32 %169 to i64
  %178 = mul nsw i64 %177, %177
  %179 = lshr i64 %178, 9
  %180 = trunc i64 %179 to i32
  %181 = sub i32 %171, %180
  ret i32 %181
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_sub_pixel_variance16x32_c(i8* nocapture readonly, i32, i32, i32, i8* nocapture readonly, i32, i32* nocapture) local_unnamed_addr #2 {
  %8 = alloca [528 x i16], align 16
  %9 = alloca [512 x i8], align 16
  %10 = bitcast [528 x i16]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1056, i8* nonnull %10) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %10, i8 -86, i64 1056, i1 false)
  %11 = getelementptr inbounds [512 x i8], [512 x i8]* %9, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %11) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %11, i8 -86, i64 512, i1 false)
  %12 = getelementptr inbounds [528 x i16], [528 x i16]* %8, i64 0, i64 0
  %13 = sext i32 %2 to i64
  %14 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %13, i64 0
  %15 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %13, i64 1
  %16 = add i32 %1, -16
  %17 = zext i32 %16 to i64
  %18 = load i8, i8* %14, align 2
  %19 = zext i8 %18 to i32
  %20 = load i8, i8* %15, align 1
  %21 = zext i8 %20 to i32
  %22 = insertelement <8 x i32> undef, i32 %19, i32 0
  %23 = shufflevector <8 x i32> %22, <8 x i32> undef, <8 x i32> zeroinitializer
  %24 = insertelement <8 x i32> undef, i32 %21, i32 0
  %25 = shufflevector <8 x i32> %24, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %26

26:                                               ; preds = %103, %7
  %27 = phi i64 [ %109, %103 ], [ 0, %7 ]
  %28 = phi i32 [ %107, %103 ], [ 0, %7 ]
  %29 = phi i8* [ %105, %103 ], [ %0, %7 ]
  %30 = phi i16* [ %106, %103 ], [ %12, %7 ]
  %31 = shl nuw nsw i64 %27, 4
  %32 = add i64 %31, 16
  %33 = getelementptr [528 x i16], [528 x i16]* %8, i64 0, i64 %32
  %34 = bitcast i16* %33 to i8*
  %35 = getelementptr [528 x i16], [528 x i16]* %8, i64 0, i64 %31
  %36 = bitcast i16* %35 to i8*
  %37 = getelementptr i8, i8* %29, i64 17
  %38 = icmp ugt i8* %37, %36
  %39 = icmp ult i8* %29, %34
  %40 = and i1 %38, %39
  br i1 %40, label %73, label %41

41:                                               ; preds = %26
  %42 = getelementptr i8, i8* %29, i64 16
  %43 = bitcast i8* %29 to <8 x i8>*
  %44 = load <8 x i8>, <8 x i8>* %43, align 1, !alias.scope !134
  %45 = zext <8 x i8> %44 to <8 x i32>
  %46 = mul nuw nsw <8 x i32> %23, %45
  %47 = getelementptr inbounds i8, i8* %29, i64 1
  %48 = bitcast i8* %47 to <8 x i8>*
  %49 = load <8 x i8>, <8 x i8>* %48, align 1, !alias.scope !134
  %50 = zext <8 x i8> %49 to <8 x i32>
  %51 = mul nuw nsw <8 x i32> %25, %50
  %52 = add nuw nsw <8 x i32> %46, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %53 = add nuw nsw <8 x i32> %52, %51
  %54 = lshr <8 x i32> %53, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %55 = trunc <8 x i32> %54 to <8 x i16>
  %56 = bitcast i16* %30 to <8 x i16>*
  store <8 x i16> %55, <8 x i16>* %56, align 2, !alias.scope !137, !noalias !134
  %57 = getelementptr i8, i8* %29, i64 8
  %58 = bitcast i8* %57 to <8 x i8>*
  %59 = load <8 x i8>, <8 x i8>* %58, align 1, !alias.scope !134
  %60 = zext <8 x i8> %59 to <8 x i32>
  %61 = mul nuw nsw <8 x i32> %23, %60
  %62 = getelementptr inbounds i8, i8* %29, i64 9
  %63 = bitcast i8* %62 to <8 x i8>*
  %64 = load <8 x i8>, <8 x i8>* %63, align 1, !alias.scope !134
  %65 = zext <8 x i8> %64 to <8 x i32>
  %66 = mul nuw nsw <8 x i32> %25, %65
  %67 = add nuw nsw <8 x i32> %61, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %68 = add nuw nsw <8 x i32> %67, %66
  %69 = lshr <8 x i32> %68, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %70 = trunc <8 x i32> %69 to <8 x i16>
  %71 = getelementptr inbounds i16, i16* %30, i64 8
  %72 = bitcast i16* %71 to <8 x i16>*
  store <8 x i16> %70, <8 x i16>* %72, align 2, !alias.scope !137, !noalias !134
  br label %103

73:                                               ; preds = %26, %73
  %74 = phi i64 [ %101, %73 ], [ 0, %26 ]
  %75 = phi i8* [ %92, %73 ], [ %29, %26 ]
  %76 = load i8, i8* %75, align 1
  %77 = zext i8 %76 to i32
  %78 = mul nuw nsw i32 %19, %77
  %79 = getelementptr inbounds i8, i8* %75, i64 1
  %80 = load i8, i8* %79, align 1
  %81 = zext i8 %80 to i32
  %82 = mul nuw nsw i32 %21, %81
  %83 = add nuw nsw i32 %78, 64
  %84 = add nuw nsw i32 %83, %82
  %85 = lshr i32 %84, 7
  %86 = trunc i32 %85 to i16
  %87 = getelementptr inbounds i16, i16* %30, i64 %74
  store i16 %86, i16* %87, align 2
  %88 = or i64 %74, 1
  %89 = load i8, i8* %79, align 1
  %90 = zext i8 %89 to i32
  %91 = mul nuw nsw i32 %19, %90
  %92 = getelementptr inbounds i8, i8* %75, i64 2
  %93 = load i8, i8* %92, align 1
  %94 = zext i8 %93 to i32
  %95 = mul nuw nsw i32 %21, %94
  %96 = add nuw nsw i32 %91, 64
  %97 = add nuw nsw i32 %96, %95
  %98 = lshr i32 %97, 7
  %99 = trunc i32 %98 to i16
  %100 = getelementptr inbounds i16, i16* %30, i64 %88
  store i16 %99, i16* %100, align 2
  %101 = add nuw nsw i64 %74, 2
  %102 = icmp eq i64 %101, 16
  br i1 %102, label %103, label %73, !llvm.loop !139

103:                                              ; preds = %73, %41
  %104 = phi i8* [ %42, %41 ], [ %92, %73 ]
  %105 = getelementptr inbounds i8, i8* %104, i64 %17
  %106 = getelementptr inbounds i16, i16* %30, i64 16
  %107 = add nuw nsw i32 %28, 1
  %108 = icmp eq i32 %107, 33
  %109 = add i64 %27, 1
  br i1 %108, label %110, label %26

110:                                              ; preds = %103
  %111 = sext i32 %3 to i64
  %112 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %111, i64 0
  %113 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %111, i64 1
  %114 = load i8, i8* %112, align 2
  %115 = zext i8 %114 to i32
  %116 = load i8, i8* %113, align 1
  %117 = zext i8 %116 to i32
  %118 = insertelement <8 x i32> undef, i32 %115, i32 0
  %119 = shufflevector <8 x i32> %118, <8 x i32> undef, <8 x i32> zeroinitializer
  %120 = insertelement <8 x i32> undef, i32 %117, i32 0
  %121 = shufflevector <8 x i32> %120, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %122

122:                                              ; preds = %201, %110
  %123 = phi i64 [ %206, %201 ], [ 0, %110 ]
  %124 = phi i32 [ %204, %201 ], [ 0, %110 ]
  %125 = phi i16* [ %202, %201 ], [ %12, %110 ]
  %126 = phi i8* [ %203, %201 ], [ %11, %110 ]
  %127 = shl nuw nsw i64 %123, 4
  %128 = add i64 %127, 16
  %129 = getelementptr [512 x i8], [512 x i8]* %9, i64 0, i64 %128
  %130 = getelementptr [512 x i8], [512 x i8]* %9, i64 0, i64 %127
  %131 = bitcast i16* %125 to i8*
  %132 = getelementptr i16, i16* %125, i64 32
  %133 = bitcast i16* %132 to i8*
  %134 = icmp ult i8* %130, %133
  %135 = icmp ugt i8* %129, %131
  %136 = and i1 %134, %135
  br i1 %136, label %169, label %137

137:                                              ; preds = %122
  %138 = getelementptr i16, i16* %125, i64 16
  %139 = bitcast i16* %125 to <8 x i16>*
  %140 = load <8 x i16>, <8 x i16>* %139, align 2, !alias.scope !140
  %141 = zext <8 x i16> %140 to <8 x i32>
  %142 = mul nuw nsw <8 x i32> %119, %141
  %143 = getelementptr inbounds i16, i16* %125, i64 16
  %144 = bitcast i16* %143 to <8 x i16>*
  %145 = load <8 x i16>, <8 x i16>* %144, align 2, !alias.scope !140
  %146 = zext <8 x i16> %145 to <8 x i32>
  %147 = mul nuw nsw <8 x i32> %121, %146
  %148 = add nuw nsw <8 x i32> %142, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %149 = add nuw nsw <8 x i32> %148, %147
  %150 = lshr <8 x i32> %149, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %151 = trunc <8 x i32> %150 to <8 x i8>
  %152 = bitcast i8* %126 to <8 x i8>*
  store <8 x i8> %151, <8 x i8>* %152, align 1, !alias.scope !143, !noalias !140
  %153 = getelementptr i16, i16* %125, i64 8
  %154 = bitcast i16* %153 to <8 x i16>*
  %155 = load <8 x i16>, <8 x i16>* %154, align 2, !alias.scope !140
  %156 = zext <8 x i16> %155 to <8 x i32>
  %157 = mul nuw nsw <8 x i32> %119, %156
  %158 = getelementptr inbounds i16, i16* %125, i64 24
  %159 = bitcast i16* %158 to <8 x i16>*
  %160 = load <8 x i16>, <8 x i16>* %159, align 2, !alias.scope !140
  %161 = zext <8 x i16> %160 to <8 x i32>
  %162 = mul nuw nsw <8 x i32> %121, %161
  %163 = add nuw nsw <8 x i32> %157, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %164 = add nuw nsw <8 x i32> %163, %162
  %165 = lshr <8 x i32> %164, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %166 = trunc <8 x i32> %165 to <8 x i8>
  %167 = getelementptr inbounds i8, i8* %126, i64 8
  %168 = bitcast i8* %167 to <8 x i8>*
  store <8 x i8> %166, <8 x i8>* %168, align 1, !alias.scope !143, !noalias !140
  br label %201

169:                                              ; preds = %122, %169
  %170 = phi i64 [ %199, %169 ], [ 0, %122 ]
  %171 = phi i16* [ %198, %169 ], [ %125, %122 ]
  %172 = load i16, i16* %171, align 2
  %173 = zext i16 %172 to i32
  %174 = mul nuw nsw i32 %115, %173
  %175 = getelementptr inbounds i16, i16* %171, i64 16
  %176 = load i16, i16* %175, align 2
  %177 = zext i16 %176 to i32
  %178 = mul nuw nsw i32 %117, %177
  %179 = add nuw nsw i32 %174, 64
  %180 = add nuw nsw i32 %179, %178
  %181 = lshr i32 %180, 7
  %182 = trunc i32 %181 to i8
  %183 = getelementptr inbounds i8, i8* %126, i64 %170
  store i8 %182, i8* %183, align 1
  %184 = getelementptr inbounds i16, i16* %171, i64 1
  %185 = or i64 %170, 1
  %186 = load i16, i16* %184, align 2
  %187 = zext i16 %186 to i32
  %188 = mul nuw nsw i32 %115, %187
  %189 = getelementptr inbounds i16, i16* %171, i64 17
  %190 = load i16, i16* %189, align 2
  %191 = zext i16 %190 to i32
  %192 = mul nuw nsw i32 %117, %191
  %193 = add nuw nsw i32 %188, 64
  %194 = add nuw nsw i32 %193, %192
  %195 = lshr i32 %194, 7
  %196 = trunc i32 %195 to i8
  %197 = getelementptr inbounds i8, i8* %126, i64 %185
  store i8 %196, i8* %197, align 1
  %198 = getelementptr inbounds i16, i16* %171, i64 2
  %199 = add nuw nsw i64 %170, 2
  %200 = icmp eq i64 %199, 16
  br i1 %200, label %201, label %169, !llvm.loop !145

201:                                              ; preds = %169, %137
  %202 = phi i16* [ %138, %137 ], [ %198, %169 ]
  %203 = getelementptr inbounds i8, i8* %126, i64 16
  %204 = add nuw nsw i32 %124, 1
  %205 = icmp eq i32 %204, 32
  %206 = add i64 %123, 1
  br i1 %205, label %207, label %122

207:                                              ; preds = %201
  %208 = call i32 @vpx_variance16x32_c(i8* nonnull %11, i32 16, i8* %4, i32 %5, i32* %6)
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %11) #4
  call void @llvm.lifetime.end.p0i8(i64 1056, i8* nonnull %10) #4
  ret i32 %208
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_sub_pixel_avg_variance16x32_c(i8* nocapture readonly, i32, i32, i32, i8* nocapture readonly, i32, i32* nocapture, i8* nocapture readonly) local_unnamed_addr #2 {
  %9 = alloca [528 x i16], align 16
  %10 = alloca [512 x i8], align 16
  %11 = alloca [512 x i8], align 16
  %12 = bitcast [528 x i16]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1056, i8* nonnull %12) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %12, i8 -86, i64 1056, i1 false)
  %13 = getelementptr inbounds [512 x i8], [512 x i8]* %10, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %13) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %13, i8 -86, i64 512, i1 false)
  %14 = getelementptr inbounds [512 x i8], [512 x i8]* %11, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %14) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %14, i8 -86, i64 512, i1 false)
  %15 = getelementptr inbounds [528 x i16], [528 x i16]* %9, i64 0, i64 0
  %16 = sext i32 %2 to i64
  %17 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %16, i64 0
  %18 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %16, i64 1
  %19 = add i32 %1, -16
  %20 = zext i32 %19 to i64
  %21 = load i8, i8* %17, align 2
  %22 = zext i8 %21 to i32
  %23 = load i8, i8* %18, align 1
  %24 = zext i8 %23 to i32
  %25 = insertelement <8 x i32> undef, i32 %22, i32 0
  %26 = shufflevector <8 x i32> %25, <8 x i32> undef, <8 x i32> zeroinitializer
  %27 = insertelement <8 x i32> undef, i32 %24, i32 0
  %28 = shufflevector <8 x i32> %27, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %29

29:                                               ; preds = %106, %8
  %30 = phi i64 [ %112, %106 ], [ 0, %8 ]
  %31 = phi i32 [ %110, %106 ], [ 0, %8 ]
  %32 = phi i8* [ %108, %106 ], [ %0, %8 ]
  %33 = phi i16* [ %109, %106 ], [ %15, %8 ]
  %34 = shl nuw nsw i64 %30, 4
  %35 = add i64 %34, 16
  %36 = getelementptr [528 x i16], [528 x i16]* %9, i64 0, i64 %35
  %37 = bitcast i16* %36 to i8*
  %38 = getelementptr [528 x i16], [528 x i16]* %9, i64 0, i64 %34
  %39 = bitcast i16* %38 to i8*
  %40 = getelementptr i8, i8* %32, i64 17
  %41 = icmp ugt i8* %40, %39
  %42 = icmp ult i8* %32, %37
  %43 = and i1 %41, %42
  br i1 %43, label %76, label %44

44:                                               ; preds = %29
  %45 = getelementptr i8, i8* %32, i64 16
  %46 = bitcast i8* %32 to <8 x i8>*
  %47 = load <8 x i8>, <8 x i8>* %46, align 1, !alias.scope !146
  %48 = zext <8 x i8> %47 to <8 x i32>
  %49 = mul nuw nsw <8 x i32> %26, %48
  %50 = getelementptr inbounds i8, i8* %32, i64 1
  %51 = bitcast i8* %50 to <8 x i8>*
  %52 = load <8 x i8>, <8 x i8>* %51, align 1, !alias.scope !146
  %53 = zext <8 x i8> %52 to <8 x i32>
  %54 = mul nuw nsw <8 x i32> %28, %53
  %55 = add nuw nsw <8 x i32> %49, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %56 = add nuw nsw <8 x i32> %55, %54
  %57 = lshr <8 x i32> %56, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %58 = trunc <8 x i32> %57 to <8 x i16>
  %59 = bitcast i16* %33 to <8 x i16>*
  store <8 x i16> %58, <8 x i16>* %59, align 2, !alias.scope !149, !noalias !146
  %60 = getelementptr i8, i8* %32, i64 8
  %61 = bitcast i8* %60 to <8 x i8>*
  %62 = load <8 x i8>, <8 x i8>* %61, align 1, !alias.scope !146
  %63 = zext <8 x i8> %62 to <8 x i32>
  %64 = mul nuw nsw <8 x i32> %26, %63
  %65 = getelementptr inbounds i8, i8* %32, i64 9
  %66 = bitcast i8* %65 to <8 x i8>*
  %67 = load <8 x i8>, <8 x i8>* %66, align 1, !alias.scope !146
  %68 = zext <8 x i8> %67 to <8 x i32>
  %69 = mul nuw nsw <8 x i32> %28, %68
  %70 = add nuw nsw <8 x i32> %64, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %71 = add nuw nsw <8 x i32> %70, %69
  %72 = lshr <8 x i32> %71, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %73 = trunc <8 x i32> %72 to <8 x i16>
  %74 = getelementptr inbounds i16, i16* %33, i64 8
  %75 = bitcast i16* %74 to <8 x i16>*
  store <8 x i16> %73, <8 x i16>* %75, align 2, !alias.scope !149, !noalias !146
  br label %106

76:                                               ; preds = %29, %76
  %77 = phi i64 [ %104, %76 ], [ 0, %29 ]
  %78 = phi i8* [ %95, %76 ], [ %32, %29 ]
  %79 = load i8, i8* %78, align 1
  %80 = zext i8 %79 to i32
  %81 = mul nuw nsw i32 %22, %80
  %82 = getelementptr inbounds i8, i8* %78, i64 1
  %83 = load i8, i8* %82, align 1
  %84 = zext i8 %83 to i32
  %85 = mul nuw nsw i32 %24, %84
  %86 = add nuw nsw i32 %81, 64
  %87 = add nuw nsw i32 %86, %85
  %88 = lshr i32 %87, 7
  %89 = trunc i32 %88 to i16
  %90 = getelementptr inbounds i16, i16* %33, i64 %77
  store i16 %89, i16* %90, align 2
  %91 = or i64 %77, 1
  %92 = load i8, i8* %82, align 1
  %93 = zext i8 %92 to i32
  %94 = mul nuw nsw i32 %22, %93
  %95 = getelementptr inbounds i8, i8* %78, i64 2
  %96 = load i8, i8* %95, align 1
  %97 = zext i8 %96 to i32
  %98 = mul nuw nsw i32 %24, %97
  %99 = add nuw nsw i32 %94, 64
  %100 = add nuw nsw i32 %99, %98
  %101 = lshr i32 %100, 7
  %102 = trunc i32 %101 to i16
  %103 = getelementptr inbounds i16, i16* %33, i64 %91
  store i16 %102, i16* %103, align 2
  %104 = add nuw nsw i64 %77, 2
  %105 = icmp eq i64 %104, 16
  br i1 %105, label %106, label %76, !llvm.loop !151

106:                                              ; preds = %76, %44
  %107 = phi i8* [ %45, %44 ], [ %95, %76 ]
  %108 = getelementptr inbounds i8, i8* %107, i64 %20
  %109 = getelementptr inbounds i16, i16* %33, i64 16
  %110 = add nuw nsw i32 %31, 1
  %111 = icmp eq i32 %110, 33
  %112 = add i64 %30, 1
  br i1 %111, label %113, label %29

113:                                              ; preds = %106
  %114 = sext i32 %3 to i64
  %115 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %114, i64 0
  %116 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %114, i64 1
  %117 = load i8, i8* %115, align 2
  %118 = zext i8 %117 to i32
  %119 = load i8, i8* %116, align 1
  %120 = zext i8 %119 to i32
  %121 = insertelement <8 x i32> undef, i32 %118, i32 0
  %122 = shufflevector <8 x i32> %121, <8 x i32> undef, <8 x i32> zeroinitializer
  %123 = insertelement <8 x i32> undef, i32 %120, i32 0
  %124 = shufflevector <8 x i32> %123, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %125

125:                                              ; preds = %204, %113
  %126 = phi i64 [ %209, %204 ], [ 0, %113 ]
  %127 = phi i32 [ %207, %204 ], [ 0, %113 ]
  %128 = phi i16* [ %205, %204 ], [ %15, %113 ]
  %129 = phi i8* [ %206, %204 ], [ %13, %113 ]
  %130 = shl nuw nsw i64 %126, 4
  %131 = add i64 %130, 16
  %132 = getelementptr [512 x i8], [512 x i8]* %10, i64 0, i64 %131
  %133 = getelementptr [512 x i8], [512 x i8]* %10, i64 0, i64 %130
  %134 = bitcast i16* %128 to i8*
  %135 = getelementptr i16, i16* %128, i64 32
  %136 = bitcast i16* %135 to i8*
  %137 = icmp ult i8* %133, %136
  %138 = icmp ugt i8* %132, %134
  %139 = and i1 %137, %138
  br i1 %139, label %172, label %140

140:                                              ; preds = %125
  %141 = getelementptr i16, i16* %128, i64 16
  %142 = bitcast i16* %128 to <8 x i16>*
  %143 = load <8 x i16>, <8 x i16>* %142, align 2, !alias.scope !152
  %144 = zext <8 x i16> %143 to <8 x i32>
  %145 = mul nuw nsw <8 x i32> %122, %144
  %146 = getelementptr inbounds i16, i16* %128, i64 16
  %147 = bitcast i16* %146 to <8 x i16>*
  %148 = load <8 x i16>, <8 x i16>* %147, align 2, !alias.scope !152
  %149 = zext <8 x i16> %148 to <8 x i32>
  %150 = mul nuw nsw <8 x i32> %124, %149
  %151 = add nuw nsw <8 x i32> %145, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %152 = add nuw nsw <8 x i32> %151, %150
  %153 = lshr <8 x i32> %152, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %154 = trunc <8 x i32> %153 to <8 x i8>
  %155 = bitcast i8* %129 to <8 x i8>*
  store <8 x i8> %154, <8 x i8>* %155, align 1, !alias.scope !155, !noalias !152
  %156 = getelementptr i16, i16* %128, i64 8
  %157 = bitcast i16* %156 to <8 x i16>*
  %158 = load <8 x i16>, <8 x i16>* %157, align 2, !alias.scope !152
  %159 = zext <8 x i16> %158 to <8 x i32>
  %160 = mul nuw nsw <8 x i32> %122, %159
  %161 = getelementptr inbounds i16, i16* %128, i64 24
  %162 = bitcast i16* %161 to <8 x i16>*
  %163 = load <8 x i16>, <8 x i16>* %162, align 2, !alias.scope !152
  %164 = zext <8 x i16> %163 to <8 x i32>
  %165 = mul nuw nsw <8 x i32> %124, %164
  %166 = add nuw nsw <8 x i32> %160, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %167 = add nuw nsw <8 x i32> %166, %165
  %168 = lshr <8 x i32> %167, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %169 = trunc <8 x i32> %168 to <8 x i8>
  %170 = getelementptr inbounds i8, i8* %129, i64 8
  %171 = bitcast i8* %170 to <8 x i8>*
  store <8 x i8> %169, <8 x i8>* %171, align 1, !alias.scope !155, !noalias !152
  br label %204

172:                                              ; preds = %125, %172
  %173 = phi i64 [ %202, %172 ], [ 0, %125 ]
  %174 = phi i16* [ %201, %172 ], [ %128, %125 ]
  %175 = load i16, i16* %174, align 2
  %176 = zext i16 %175 to i32
  %177 = mul nuw nsw i32 %118, %176
  %178 = getelementptr inbounds i16, i16* %174, i64 16
  %179 = load i16, i16* %178, align 2
  %180 = zext i16 %179 to i32
  %181 = mul nuw nsw i32 %120, %180
  %182 = add nuw nsw i32 %177, 64
  %183 = add nuw nsw i32 %182, %181
  %184 = lshr i32 %183, 7
  %185 = trunc i32 %184 to i8
  %186 = getelementptr inbounds i8, i8* %129, i64 %173
  store i8 %185, i8* %186, align 1
  %187 = getelementptr inbounds i16, i16* %174, i64 1
  %188 = or i64 %173, 1
  %189 = load i16, i16* %187, align 2
  %190 = zext i16 %189 to i32
  %191 = mul nuw nsw i32 %118, %190
  %192 = getelementptr inbounds i16, i16* %174, i64 17
  %193 = load i16, i16* %192, align 2
  %194 = zext i16 %193 to i32
  %195 = mul nuw nsw i32 %120, %194
  %196 = add nuw nsw i32 %191, 64
  %197 = add nuw nsw i32 %196, %195
  %198 = lshr i32 %197, 7
  %199 = trunc i32 %198 to i8
  %200 = getelementptr inbounds i8, i8* %129, i64 %188
  store i8 %199, i8* %200, align 1
  %201 = getelementptr inbounds i16, i16* %174, i64 2
  %202 = add nuw nsw i64 %173, 2
  %203 = icmp eq i64 %202, 16
  br i1 %203, label %204, label %172, !llvm.loop !157

204:                                              ; preds = %172, %140
  %205 = phi i16* [ %141, %140 ], [ %201, %172 ]
  %206 = getelementptr inbounds i8, i8* %129, i64 16
  %207 = add nuw nsw i32 %127, 1
  %208 = icmp eq i32 %207, 32
  %209 = add i64 %126, 1
  br i1 %208, label %210, label %125

210:                                              ; preds = %204, %210
  %211 = phi i8* [ %240, %210 ], [ %14, %204 ]
  %212 = phi i32 [ %243, %210 ], [ 0, %204 ]
  %213 = phi i8* [ %241, %210 ], [ %7, %204 ]
  %214 = phi i8* [ %242, %210 ], [ %13, %204 ]
  %215 = bitcast i8* %213 to <16 x i8>*
  %216 = load <16 x i8>, <16 x i8>* %215, align 1
  %217 = zext <16 x i8> %216 to <16 x i32>
  %218 = bitcast i8* %214 to <16 x i8>*
  %219 = load <16 x i8>, <16 x i8>* %218, align 1
  %220 = zext <16 x i8> %219 to <16 x i32>
  %221 = add nuw nsw <16 x i32> %217, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %222 = add nuw nsw <16 x i32> %221, %220
  %223 = lshr <16 x i32> %222, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %224 = trunc <16 x i32> %223 to <16 x i8>
  %225 = bitcast i8* %211 to <16 x i8>*
  store <16 x i8> %224, <16 x i8>* %225, align 1
  %226 = getelementptr inbounds i8, i8* %211, i64 16
  %227 = getelementptr inbounds i8, i8* %213, i64 16
  %228 = getelementptr inbounds i8, i8* %214, i64 16
  %229 = bitcast i8* %227 to <16 x i8>*
  %230 = load <16 x i8>, <16 x i8>* %229, align 1
  %231 = zext <16 x i8> %230 to <16 x i32>
  %232 = bitcast i8* %228 to <16 x i8>*
  %233 = load <16 x i8>, <16 x i8>* %232, align 1
  %234 = zext <16 x i8> %233 to <16 x i32>
  %235 = add nuw nsw <16 x i32> %231, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %236 = add nuw nsw <16 x i32> %235, %234
  %237 = lshr <16 x i32> %236, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %238 = trunc <16 x i32> %237 to <16 x i8>
  %239 = bitcast i8* %226 to <16 x i8>*
  store <16 x i8> %238, <16 x i8>* %239, align 1
  %240 = getelementptr inbounds i8, i8* %211, i64 32
  %241 = getelementptr inbounds i8, i8* %213, i64 32
  %242 = getelementptr inbounds i8, i8* %214, i64 32
  %243 = add nuw nsw i32 %212, 2
  %244 = icmp eq i32 %243, 32
  br i1 %244, label %245, label %210

245:                                              ; preds = %210
  %246 = call i32 @vpx_variance16x32_c(i8* nonnull %14, i32 16, i8* %4, i32 %5, i32* %6)
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %14) #4
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %13) #4
  call void @llvm.lifetime.end.p0i8(i64 1056, i8* nonnull %12) #4
  ret i32 %246
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_variance16x16_c(i8* nocapture readonly, i32, i8* nocapture readonly, i32, i32* nocapture) local_unnamed_addr #2 {
  store i32 0, i32* %4, align 4
  %6 = sext i32 %1 to i64
  %7 = sext i32 %3 to i64
  br label %8

8:                                                ; preds = %8, %5
  %9 = phi i32 [ 0, %5 ], [ %171, %8 ]
  %10 = phi i32 [ 0, %5 ], [ %169, %8 ]
  %11 = phi i8* [ %0, %5 ], [ %172, %8 ]
  %12 = phi i32 [ 0, %5 ], [ %174, %8 ]
  %13 = phi i8* [ %2, %5 ], [ %173, %8 ]
  %14 = load i8, i8* %11, align 1
  %15 = zext i8 %14 to i32
  %16 = load i8, i8* %13, align 1
  %17 = zext i8 %16 to i32
  %18 = sub nsw i32 %15, %17
  %19 = add nsw i32 %18, %10
  %20 = mul nsw i32 %18, %18
  %21 = add i32 %20, %9
  store i32 %21, i32* %4, align 4
  %22 = getelementptr inbounds i8, i8* %11, i64 1
  %23 = load i8, i8* %22, align 1
  %24 = zext i8 %23 to i32
  %25 = getelementptr inbounds i8, i8* %13, i64 1
  %26 = load i8, i8* %25, align 1
  %27 = zext i8 %26 to i32
  %28 = sub nsw i32 %24, %27
  %29 = add nsw i32 %28, %19
  %30 = mul nsw i32 %28, %28
  %31 = add i32 %30, %21
  store i32 %31, i32* %4, align 4
  %32 = getelementptr inbounds i8, i8* %11, i64 2
  %33 = load i8, i8* %32, align 1
  %34 = zext i8 %33 to i32
  %35 = getelementptr inbounds i8, i8* %13, i64 2
  %36 = load i8, i8* %35, align 1
  %37 = zext i8 %36 to i32
  %38 = sub nsw i32 %34, %37
  %39 = add nsw i32 %38, %29
  %40 = mul nsw i32 %38, %38
  %41 = add i32 %40, %31
  store i32 %41, i32* %4, align 4
  %42 = getelementptr inbounds i8, i8* %11, i64 3
  %43 = load i8, i8* %42, align 1
  %44 = zext i8 %43 to i32
  %45 = getelementptr inbounds i8, i8* %13, i64 3
  %46 = load i8, i8* %45, align 1
  %47 = zext i8 %46 to i32
  %48 = sub nsw i32 %44, %47
  %49 = add nsw i32 %48, %39
  %50 = mul nsw i32 %48, %48
  %51 = add i32 %50, %41
  store i32 %51, i32* %4, align 4
  %52 = getelementptr inbounds i8, i8* %11, i64 4
  %53 = load i8, i8* %52, align 1
  %54 = zext i8 %53 to i32
  %55 = getelementptr inbounds i8, i8* %13, i64 4
  %56 = load i8, i8* %55, align 1
  %57 = zext i8 %56 to i32
  %58 = sub nsw i32 %54, %57
  %59 = add nsw i32 %58, %49
  %60 = mul nsw i32 %58, %58
  %61 = add i32 %60, %51
  store i32 %61, i32* %4, align 4
  %62 = getelementptr inbounds i8, i8* %11, i64 5
  %63 = load i8, i8* %62, align 1
  %64 = zext i8 %63 to i32
  %65 = getelementptr inbounds i8, i8* %13, i64 5
  %66 = load i8, i8* %65, align 1
  %67 = zext i8 %66 to i32
  %68 = sub nsw i32 %64, %67
  %69 = add nsw i32 %68, %59
  %70 = mul nsw i32 %68, %68
  %71 = add i32 %70, %61
  store i32 %71, i32* %4, align 4
  %72 = getelementptr inbounds i8, i8* %11, i64 6
  %73 = load i8, i8* %72, align 1
  %74 = zext i8 %73 to i32
  %75 = getelementptr inbounds i8, i8* %13, i64 6
  %76 = load i8, i8* %75, align 1
  %77 = zext i8 %76 to i32
  %78 = sub nsw i32 %74, %77
  %79 = add nsw i32 %78, %69
  %80 = mul nsw i32 %78, %78
  %81 = add i32 %80, %71
  store i32 %81, i32* %4, align 4
  %82 = getelementptr inbounds i8, i8* %11, i64 7
  %83 = load i8, i8* %82, align 1
  %84 = zext i8 %83 to i32
  %85 = getelementptr inbounds i8, i8* %13, i64 7
  %86 = load i8, i8* %85, align 1
  %87 = zext i8 %86 to i32
  %88 = sub nsw i32 %84, %87
  %89 = add nsw i32 %88, %79
  %90 = mul nsw i32 %88, %88
  %91 = add i32 %90, %81
  store i32 %91, i32* %4, align 4
  %92 = getelementptr inbounds i8, i8* %11, i64 8
  %93 = load i8, i8* %92, align 1
  %94 = zext i8 %93 to i32
  %95 = getelementptr inbounds i8, i8* %13, i64 8
  %96 = load i8, i8* %95, align 1
  %97 = zext i8 %96 to i32
  %98 = sub nsw i32 %94, %97
  %99 = add nsw i32 %98, %89
  %100 = mul nsw i32 %98, %98
  %101 = add i32 %100, %91
  store i32 %101, i32* %4, align 4
  %102 = getelementptr inbounds i8, i8* %11, i64 9
  %103 = load i8, i8* %102, align 1
  %104 = zext i8 %103 to i32
  %105 = getelementptr inbounds i8, i8* %13, i64 9
  %106 = load i8, i8* %105, align 1
  %107 = zext i8 %106 to i32
  %108 = sub nsw i32 %104, %107
  %109 = add nsw i32 %108, %99
  %110 = mul nsw i32 %108, %108
  %111 = add i32 %110, %101
  store i32 %111, i32* %4, align 4
  %112 = getelementptr inbounds i8, i8* %11, i64 10
  %113 = load i8, i8* %112, align 1
  %114 = zext i8 %113 to i32
  %115 = getelementptr inbounds i8, i8* %13, i64 10
  %116 = load i8, i8* %115, align 1
  %117 = zext i8 %116 to i32
  %118 = sub nsw i32 %114, %117
  %119 = add nsw i32 %118, %109
  %120 = mul nsw i32 %118, %118
  %121 = add i32 %120, %111
  store i32 %121, i32* %4, align 4
  %122 = getelementptr inbounds i8, i8* %11, i64 11
  %123 = load i8, i8* %122, align 1
  %124 = zext i8 %123 to i32
  %125 = getelementptr inbounds i8, i8* %13, i64 11
  %126 = load i8, i8* %125, align 1
  %127 = zext i8 %126 to i32
  %128 = sub nsw i32 %124, %127
  %129 = add nsw i32 %128, %119
  %130 = mul nsw i32 %128, %128
  %131 = add i32 %130, %121
  store i32 %131, i32* %4, align 4
  %132 = getelementptr inbounds i8, i8* %11, i64 12
  %133 = load i8, i8* %132, align 1
  %134 = zext i8 %133 to i32
  %135 = getelementptr inbounds i8, i8* %13, i64 12
  %136 = load i8, i8* %135, align 1
  %137 = zext i8 %136 to i32
  %138 = sub nsw i32 %134, %137
  %139 = add nsw i32 %138, %129
  %140 = mul nsw i32 %138, %138
  %141 = add i32 %140, %131
  store i32 %141, i32* %4, align 4
  %142 = getelementptr inbounds i8, i8* %11, i64 13
  %143 = load i8, i8* %142, align 1
  %144 = zext i8 %143 to i32
  %145 = getelementptr inbounds i8, i8* %13, i64 13
  %146 = load i8, i8* %145, align 1
  %147 = zext i8 %146 to i32
  %148 = sub nsw i32 %144, %147
  %149 = add nsw i32 %148, %139
  %150 = mul nsw i32 %148, %148
  %151 = add i32 %150, %141
  store i32 %151, i32* %4, align 4
  %152 = getelementptr inbounds i8, i8* %11, i64 14
  %153 = load i8, i8* %152, align 1
  %154 = zext i8 %153 to i32
  %155 = getelementptr inbounds i8, i8* %13, i64 14
  %156 = load i8, i8* %155, align 1
  %157 = zext i8 %156 to i32
  %158 = sub nsw i32 %154, %157
  %159 = add nsw i32 %158, %149
  %160 = mul nsw i32 %158, %158
  %161 = add i32 %160, %151
  store i32 %161, i32* %4, align 4
  %162 = getelementptr inbounds i8, i8* %11, i64 15
  %163 = load i8, i8* %162, align 1
  %164 = zext i8 %163 to i32
  %165 = getelementptr inbounds i8, i8* %13, i64 15
  %166 = load i8, i8* %165, align 1
  %167 = zext i8 %166 to i32
  %168 = sub nsw i32 %164, %167
  %169 = add nsw i32 %168, %159
  %170 = mul nsw i32 %168, %168
  %171 = add i32 %170, %161
  store i32 %171, i32* %4, align 4
  %172 = getelementptr inbounds i8, i8* %11, i64 %6
  %173 = getelementptr inbounds i8, i8* %13, i64 %7
  %174 = add nuw nsw i32 %12, 1
  %175 = icmp eq i32 %174, 16
  br i1 %175, label %176, label %8

176:                                              ; preds = %8
  %177 = sext i32 %169 to i64
  %178 = mul nsw i64 %177, %177
  %179 = lshr i64 %178, 8
  %180 = trunc i64 %179 to i32
  %181 = sub i32 %171, %180
  ret i32 %181
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_sub_pixel_variance16x16_c(i8* nocapture readonly, i32, i32, i32, i8* nocapture readonly, i32, i32* nocapture) local_unnamed_addr #2 {
  %8 = alloca [272 x i16], align 16
  %9 = alloca [256 x i8], align 16
  %10 = bitcast [272 x i16]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 544, i8* nonnull %10) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %10, i8 -86, i64 544, i1 false)
  %11 = getelementptr inbounds [256 x i8], [256 x i8]* %9, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %11) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %11, i8 -86, i64 256, i1 false)
  %12 = getelementptr inbounds [272 x i16], [272 x i16]* %8, i64 0, i64 0
  %13 = sext i32 %2 to i64
  %14 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %13, i64 0
  %15 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %13, i64 1
  %16 = add i32 %1, -16
  %17 = zext i32 %16 to i64
  %18 = load i8, i8* %14, align 2
  %19 = zext i8 %18 to i32
  %20 = load i8, i8* %15, align 1
  %21 = zext i8 %20 to i32
  %22 = insertelement <8 x i32> undef, i32 %19, i32 0
  %23 = shufflevector <8 x i32> %22, <8 x i32> undef, <8 x i32> zeroinitializer
  %24 = insertelement <8 x i32> undef, i32 %21, i32 0
  %25 = shufflevector <8 x i32> %24, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %26

26:                                               ; preds = %103, %7
  %27 = phi i64 [ %109, %103 ], [ 0, %7 ]
  %28 = phi i32 [ %107, %103 ], [ 0, %7 ]
  %29 = phi i8* [ %105, %103 ], [ %0, %7 ]
  %30 = phi i16* [ %106, %103 ], [ %12, %7 ]
  %31 = shl nuw nsw i64 %27, 4
  %32 = add i64 %31, 16
  %33 = getelementptr [272 x i16], [272 x i16]* %8, i64 0, i64 %32
  %34 = bitcast i16* %33 to i8*
  %35 = getelementptr [272 x i16], [272 x i16]* %8, i64 0, i64 %31
  %36 = bitcast i16* %35 to i8*
  %37 = getelementptr i8, i8* %29, i64 17
  %38 = icmp ugt i8* %37, %36
  %39 = icmp ult i8* %29, %34
  %40 = and i1 %38, %39
  br i1 %40, label %73, label %41

41:                                               ; preds = %26
  %42 = getelementptr i8, i8* %29, i64 16
  %43 = bitcast i8* %29 to <8 x i8>*
  %44 = load <8 x i8>, <8 x i8>* %43, align 1, !alias.scope !158
  %45 = zext <8 x i8> %44 to <8 x i32>
  %46 = mul nuw nsw <8 x i32> %23, %45
  %47 = getelementptr inbounds i8, i8* %29, i64 1
  %48 = bitcast i8* %47 to <8 x i8>*
  %49 = load <8 x i8>, <8 x i8>* %48, align 1, !alias.scope !158
  %50 = zext <8 x i8> %49 to <8 x i32>
  %51 = mul nuw nsw <8 x i32> %25, %50
  %52 = add nuw nsw <8 x i32> %46, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %53 = add nuw nsw <8 x i32> %52, %51
  %54 = lshr <8 x i32> %53, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %55 = trunc <8 x i32> %54 to <8 x i16>
  %56 = bitcast i16* %30 to <8 x i16>*
  store <8 x i16> %55, <8 x i16>* %56, align 2, !alias.scope !161, !noalias !158
  %57 = getelementptr i8, i8* %29, i64 8
  %58 = bitcast i8* %57 to <8 x i8>*
  %59 = load <8 x i8>, <8 x i8>* %58, align 1, !alias.scope !158
  %60 = zext <8 x i8> %59 to <8 x i32>
  %61 = mul nuw nsw <8 x i32> %23, %60
  %62 = getelementptr inbounds i8, i8* %29, i64 9
  %63 = bitcast i8* %62 to <8 x i8>*
  %64 = load <8 x i8>, <8 x i8>* %63, align 1, !alias.scope !158
  %65 = zext <8 x i8> %64 to <8 x i32>
  %66 = mul nuw nsw <8 x i32> %25, %65
  %67 = add nuw nsw <8 x i32> %61, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %68 = add nuw nsw <8 x i32> %67, %66
  %69 = lshr <8 x i32> %68, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %70 = trunc <8 x i32> %69 to <8 x i16>
  %71 = getelementptr inbounds i16, i16* %30, i64 8
  %72 = bitcast i16* %71 to <8 x i16>*
  store <8 x i16> %70, <8 x i16>* %72, align 2, !alias.scope !161, !noalias !158
  br label %103

73:                                               ; preds = %26, %73
  %74 = phi i64 [ %101, %73 ], [ 0, %26 ]
  %75 = phi i8* [ %92, %73 ], [ %29, %26 ]
  %76 = load i8, i8* %75, align 1
  %77 = zext i8 %76 to i32
  %78 = mul nuw nsw i32 %19, %77
  %79 = getelementptr inbounds i8, i8* %75, i64 1
  %80 = load i8, i8* %79, align 1
  %81 = zext i8 %80 to i32
  %82 = mul nuw nsw i32 %21, %81
  %83 = add nuw nsw i32 %78, 64
  %84 = add nuw nsw i32 %83, %82
  %85 = lshr i32 %84, 7
  %86 = trunc i32 %85 to i16
  %87 = getelementptr inbounds i16, i16* %30, i64 %74
  store i16 %86, i16* %87, align 2
  %88 = or i64 %74, 1
  %89 = load i8, i8* %79, align 1
  %90 = zext i8 %89 to i32
  %91 = mul nuw nsw i32 %19, %90
  %92 = getelementptr inbounds i8, i8* %75, i64 2
  %93 = load i8, i8* %92, align 1
  %94 = zext i8 %93 to i32
  %95 = mul nuw nsw i32 %21, %94
  %96 = add nuw nsw i32 %91, 64
  %97 = add nuw nsw i32 %96, %95
  %98 = lshr i32 %97, 7
  %99 = trunc i32 %98 to i16
  %100 = getelementptr inbounds i16, i16* %30, i64 %88
  store i16 %99, i16* %100, align 2
  %101 = add nuw nsw i64 %74, 2
  %102 = icmp eq i64 %101, 16
  br i1 %102, label %103, label %73, !llvm.loop !163

103:                                              ; preds = %73, %41
  %104 = phi i8* [ %42, %41 ], [ %92, %73 ]
  %105 = getelementptr inbounds i8, i8* %104, i64 %17
  %106 = getelementptr inbounds i16, i16* %30, i64 16
  %107 = add nuw nsw i32 %28, 1
  %108 = icmp eq i32 %107, 17
  %109 = add i64 %27, 1
  br i1 %108, label %110, label %26

110:                                              ; preds = %103
  %111 = sext i32 %3 to i64
  %112 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %111, i64 0
  %113 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %111, i64 1
  %114 = load i8, i8* %112, align 2
  %115 = zext i8 %114 to i32
  %116 = load i8, i8* %113, align 1
  %117 = zext i8 %116 to i32
  %118 = insertelement <8 x i32> undef, i32 %115, i32 0
  %119 = shufflevector <8 x i32> %118, <8 x i32> undef, <8 x i32> zeroinitializer
  %120 = insertelement <8 x i32> undef, i32 %117, i32 0
  %121 = shufflevector <8 x i32> %120, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %122

122:                                              ; preds = %201, %110
  %123 = phi i64 [ %206, %201 ], [ 0, %110 ]
  %124 = phi i32 [ %204, %201 ], [ 0, %110 ]
  %125 = phi i16* [ %202, %201 ], [ %12, %110 ]
  %126 = phi i8* [ %203, %201 ], [ %11, %110 ]
  %127 = shl nuw nsw i64 %123, 4
  %128 = add i64 %127, 16
  %129 = getelementptr [256 x i8], [256 x i8]* %9, i64 0, i64 %128
  %130 = getelementptr [256 x i8], [256 x i8]* %9, i64 0, i64 %127
  %131 = bitcast i16* %125 to i8*
  %132 = getelementptr i16, i16* %125, i64 32
  %133 = bitcast i16* %132 to i8*
  %134 = icmp ult i8* %130, %133
  %135 = icmp ugt i8* %129, %131
  %136 = and i1 %134, %135
  br i1 %136, label %169, label %137

137:                                              ; preds = %122
  %138 = getelementptr i16, i16* %125, i64 16
  %139 = bitcast i16* %125 to <8 x i16>*
  %140 = load <8 x i16>, <8 x i16>* %139, align 2, !alias.scope !164
  %141 = zext <8 x i16> %140 to <8 x i32>
  %142 = mul nuw nsw <8 x i32> %119, %141
  %143 = getelementptr inbounds i16, i16* %125, i64 16
  %144 = bitcast i16* %143 to <8 x i16>*
  %145 = load <8 x i16>, <8 x i16>* %144, align 2, !alias.scope !164
  %146 = zext <8 x i16> %145 to <8 x i32>
  %147 = mul nuw nsw <8 x i32> %121, %146
  %148 = add nuw nsw <8 x i32> %142, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %149 = add nuw nsw <8 x i32> %148, %147
  %150 = lshr <8 x i32> %149, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %151 = trunc <8 x i32> %150 to <8 x i8>
  %152 = bitcast i8* %126 to <8 x i8>*
  store <8 x i8> %151, <8 x i8>* %152, align 1, !alias.scope !167, !noalias !164
  %153 = getelementptr i16, i16* %125, i64 8
  %154 = bitcast i16* %153 to <8 x i16>*
  %155 = load <8 x i16>, <8 x i16>* %154, align 2, !alias.scope !164
  %156 = zext <8 x i16> %155 to <8 x i32>
  %157 = mul nuw nsw <8 x i32> %119, %156
  %158 = getelementptr inbounds i16, i16* %125, i64 24
  %159 = bitcast i16* %158 to <8 x i16>*
  %160 = load <8 x i16>, <8 x i16>* %159, align 2, !alias.scope !164
  %161 = zext <8 x i16> %160 to <8 x i32>
  %162 = mul nuw nsw <8 x i32> %121, %161
  %163 = add nuw nsw <8 x i32> %157, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %164 = add nuw nsw <8 x i32> %163, %162
  %165 = lshr <8 x i32> %164, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %166 = trunc <8 x i32> %165 to <8 x i8>
  %167 = getelementptr inbounds i8, i8* %126, i64 8
  %168 = bitcast i8* %167 to <8 x i8>*
  store <8 x i8> %166, <8 x i8>* %168, align 1, !alias.scope !167, !noalias !164
  br label %201

169:                                              ; preds = %122, %169
  %170 = phi i64 [ %199, %169 ], [ 0, %122 ]
  %171 = phi i16* [ %198, %169 ], [ %125, %122 ]
  %172 = load i16, i16* %171, align 2
  %173 = zext i16 %172 to i32
  %174 = mul nuw nsw i32 %115, %173
  %175 = getelementptr inbounds i16, i16* %171, i64 16
  %176 = load i16, i16* %175, align 2
  %177 = zext i16 %176 to i32
  %178 = mul nuw nsw i32 %117, %177
  %179 = add nuw nsw i32 %174, 64
  %180 = add nuw nsw i32 %179, %178
  %181 = lshr i32 %180, 7
  %182 = trunc i32 %181 to i8
  %183 = getelementptr inbounds i8, i8* %126, i64 %170
  store i8 %182, i8* %183, align 1
  %184 = getelementptr inbounds i16, i16* %171, i64 1
  %185 = or i64 %170, 1
  %186 = load i16, i16* %184, align 2
  %187 = zext i16 %186 to i32
  %188 = mul nuw nsw i32 %115, %187
  %189 = getelementptr inbounds i16, i16* %171, i64 17
  %190 = load i16, i16* %189, align 2
  %191 = zext i16 %190 to i32
  %192 = mul nuw nsw i32 %117, %191
  %193 = add nuw nsw i32 %188, 64
  %194 = add nuw nsw i32 %193, %192
  %195 = lshr i32 %194, 7
  %196 = trunc i32 %195 to i8
  %197 = getelementptr inbounds i8, i8* %126, i64 %185
  store i8 %196, i8* %197, align 1
  %198 = getelementptr inbounds i16, i16* %171, i64 2
  %199 = add nuw nsw i64 %170, 2
  %200 = icmp eq i64 %199, 16
  br i1 %200, label %201, label %169, !llvm.loop !169

201:                                              ; preds = %169, %137
  %202 = phi i16* [ %138, %137 ], [ %198, %169 ]
  %203 = getelementptr inbounds i8, i8* %126, i64 16
  %204 = add nuw nsw i32 %124, 1
  %205 = icmp eq i32 %204, 16
  %206 = add i64 %123, 1
  br i1 %205, label %207, label %122

207:                                              ; preds = %201
  %208 = call i32 @vpx_variance16x16_c(i8* nonnull %11, i32 16, i8* %4, i32 %5, i32* %6)
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %11) #4
  call void @llvm.lifetime.end.p0i8(i64 544, i8* nonnull %10) #4
  ret i32 %208
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_sub_pixel_avg_variance16x16_c(i8* nocapture readonly, i32, i32, i32, i8* nocapture readonly, i32, i32* nocapture, i8* nocapture readonly) local_unnamed_addr #2 {
  %9 = alloca [272 x i16], align 16
  %10 = alloca [256 x i8], align 16
  %11 = alloca [256 x i8], align 16
  %12 = bitcast [272 x i16]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 544, i8* nonnull %12) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %12, i8 -86, i64 544, i1 false)
  %13 = getelementptr inbounds [256 x i8], [256 x i8]* %10, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %13) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %13, i8 -86, i64 256, i1 false)
  %14 = getelementptr inbounds [256 x i8], [256 x i8]* %11, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %14) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %14, i8 -86, i64 256, i1 false)
  %15 = getelementptr inbounds [272 x i16], [272 x i16]* %9, i64 0, i64 0
  %16 = sext i32 %2 to i64
  %17 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %16, i64 0
  %18 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %16, i64 1
  %19 = add i32 %1, -16
  %20 = zext i32 %19 to i64
  %21 = load i8, i8* %17, align 2
  %22 = zext i8 %21 to i32
  %23 = load i8, i8* %18, align 1
  %24 = zext i8 %23 to i32
  %25 = insertelement <8 x i32> undef, i32 %22, i32 0
  %26 = shufflevector <8 x i32> %25, <8 x i32> undef, <8 x i32> zeroinitializer
  %27 = insertelement <8 x i32> undef, i32 %24, i32 0
  %28 = shufflevector <8 x i32> %27, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %29

29:                                               ; preds = %106, %8
  %30 = phi i64 [ %112, %106 ], [ 0, %8 ]
  %31 = phi i32 [ %110, %106 ], [ 0, %8 ]
  %32 = phi i8* [ %108, %106 ], [ %0, %8 ]
  %33 = phi i16* [ %109, %106 ], [ %15, %8 ]
  %34 = shl nuw nsw i64 %30, 4
  %35 = add i64 %34, 16
  %36 = getelementptr [272 x i16], [272 x i16]* %9, i64 0, i64 %35
  %37 = bitcast i16* %36 to i8*
  %38 = getelementptr [272 x i16], [272 x i16]* %9, i64 0, i64 %34
  %39 = bitcast i16* %38 to i8*
  %40 = getelementptr i8, i8* %32, i64 17
  %41 = icmp ugt i8* %40, %39
  %42 = icmp ult i8* %32, %37
  %43 = and i1 %41, %42
  br i1 %43, label %76, label %44

44:                                               ; preds = %29
  %45 = getelementptr i8, i8* %32, i64 16
  %46 = bitcast i8* %32 to <8 x i8>*
  %47 = load <8 x i8>, <8 x i8>* %46, align 1, !alias.scope !170
  %48 = zext <8 x i8> %47 to <8 x i32>
  %49 = mul nuw nsw <8 x i32> %26, %48
  %50 = getelementptr inbounds i8, i8* %32, i64 1
  %51 = bitcast i8* %50 to <8 x i8>*
  %52 = load <8 x i8>, <8 x i8>* %51, align 1, !alias.scope !170
  %53 = zext <8 x i8> %52 to <8 x i32>
  %54 = mul nuw nsw <8 x i32> %28, %53
  %55 = add nuw nsw <8 x i32> %49, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %56 = add nuw nsw <8 x i32> %55, %54
  %57 = lshr <8 x i32> %56, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %58 = trunc <8 x i32> %57 to <8 x i16>
  %59 = bitcast i16* %33 to <8 x i16>*
  store <8 x i16> %58, <8 x i16>* %59, align 2, !alias.scope !173, !noalias !170
  %60 = getelementptr i8, i8* %32, i64 8
  %61 = bitcast i8* %60 to <8 x i8>*
  %62 = load <8 x i8>, <8 x i8>* %61, align 1, !alias.scope !170
  %63 = zext <8 x i8> %62 to <8 x i32>
  %64 = mul nuw nsw <8 x i32> %26, %63
  %65 = getelementptr inbounds i8, i8* %32, i64 9
  %66 = bitcast i8* %65 to <8 x i8>*
  %67 = load <8 x i8>, <8 x i8>* %66, align 1, !alias.scope !170
  %68 = zext <8 x i8> %67 to <8 x i32>
  %69 = mul nuw nsw <8 x i32> %28, %68
  %70 = add nuw nsw <8 x i32> %64, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %71 = add nuw nsw <8 x i32> %70, %69
  %72 = lshr <8 x i32> %71, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %73 = trunc <8 x i32> %72 to <8 x i16>
  %74 = getelementptr inbounds i16, i16* %33, i64 8
  %75 = bitcast i16* %74 to <8 x i16>*
  store <8 x i16> %73, <8 x i16>* %75, align 2, !alias.scope !173, !noalias !170
  br label %106

76:                                               ; preds = %29, %76
  %77 = phi i64 [ %104, %76 ], [ 0, %29 ]
  %78 = phi i8* [ %95, %76 ], [ %32, %29 ]
  %79 = load i8, i8* %78, align 1
  %80 = zext i8 %79 to i32
  %81 = mul nuw nsw i32 %22, %80
  %82 = getelementptr inbounds i8, i8* %78, i64 1
  %83 = load i8, i8* %82, align 1
  %84 = zext i8 %83 to i32
  %85 = mul nuw nsw i32 %24, %84
  %86 = add nuw nsw i32 %81, 64
  %87 = add nuw nsw i32 %86, %85
  %88 = lshr i32 %87, 7
  %89 = trunc i32 %88 to i16
  %90 = getelementptr inbounds i16, i16* %33, i64 %77
  store i16 %89, i16* %90, align 2
  %91 = or i64 %77, 1
  %92 = load i8, i8* %82, align 1
  %93 = zext i8 %92 to i32
  %94 = mul nuw nsw i32 %22, %93
  %95 = getelementptr inbounds i8, i8* %78, i64 2
  %96 = load i8, i8* %95, align 1
  %97 = zext i8 %96 to i32
  %98 = mul nuw nsw i32 %24, %97
  %99 = add nuw nsw i32 %94, 64
  %100 = add nuw nsw i32 %99, %98
  %101 = lshr i32 %100, 7
  %102 = trunc i32 %101 to i16
  %103 = getelementptr inbounds i16, i16* %33, i64 %91
  store i16 %102, i16* %103, align 2
  %104 = add nuw nsw i64 %77, 2
  %105 = icmp eq i64 %104, 16
  br i1 %105, label %106, label %76, !llvm.loop !175

106:                                              ; preds = %76, %44
  %107 = phi i8* [ %45, %44 ], [ %95, %76 ]
  %108 = getelementptr inbounds i8, i8* %107, i64 %20
  %109 = getelementptr inbounds i16, i16* %33, i64 16
  %110 = add nuw nsw i32 %31, 1
  %111 = icmp eq i32 %110, 17
  %112 = add i64 %30, 1
  br i1 %111, label %113, label %29

113:                                              ; preds = %106
  %114 = sext i32 %3 to i64
  %115 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %114, i64 0
  %116 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %114, i64 1
  %117 = load i8, i8* %115, align 2
  %118 = zext i8 %117 to i32
  %119 = load i8, i8* %116, align 1
  %120 = zext i8 %119 to i32
  %121 = insertelement <8 x i32> undef, i32 %118, i32 0
  %122 = shufflevector <8 x i32> %121, <8 x i32> undef, <8 x i32> zeroinitializer
  %123 = insertelement <8 x i32> undef, i32 %120, i32 0
  %124 = shufflevector <8 x i32> %123, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %125

125:                                              ; preds = %204, %113
  %126 = phi i64 [ %209, %204 ], [ 0, %113 ]
  %127 = phi i32 [ %207, %204 ], [ 0, %113 ]
  %128 = phi i16* [ %205, %204 ], [ %15, %113 ]
  %129 = phi i8* [ %206, %204 ], [ %13, %113 ]
  %130 = shl nuw nsw i64 %126, 4
  %131 = add i64 %130, 16
  %132 = getelementptr [256 x i8], [256 x i8]* %10, i64 0, i64 %131
  %133 = getelementptr [256 x i8], [256 x i8]* %10, i64 0, i64 %130
  %134 = bitcast i16* %128 to i8*
  %135 = getelementptr i16, i16* %128, i64 32
  %136 = bitcast i16* %135 to i8*
  %137 = icmp ult i8* %133, %136
  %138 = icmp ugt i8* %132, %134
  %139 = and i1 %137, %138
  br i1 %139, label %172, label %140

140:                                              ; preds = %125
  %141 = getelementptr i16, i16* %128, i64 16
  %142 = bitcast i16* %128 to <8 x i16>*
  %143 = load <8 x i16>, <8 x i16>* %142, align 2, !alias.scope !176
  %144 = zext <8 x i16> %143 to <8 x i32>
  %145 = mul nuw nsw <8 x i32> %122, %144
  %146 = getelementptr inbounds i16, i16* %128, i64 16
  %147 = bitcast i16* %146 to <8 x i16>*
  %148 = load <8 x i16>, <8 x i16>* %147, align 2, !alias.scope !176
  %149 = zext <8 x i16> %148 to <8 x i32>
  %150 = mul nuw nsw <8 x i32> %124, %149
  %151 = add nuw nsw <8 x i32> %145, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %152 = add nuw nsw <8 x i32> %151, %150
  %153 = lshr <8 x i32> %152, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %154 = trunc <8 x i32> %153 to <8 x i8>
  %155 = bitcast i8* %129 to <8 x i8>*
  store <8 x i8> %154, <8 x i8>* %155, align 1, !alias.scope !179, !noalias !176
  %156 = getelementptr i16, i16* %128, i64 8
  %157 = bitcast i16* %156 to <8 x i16>*
  %158 = load <8 x i16>, <8 x i16>* %157, align 2, !alias.scope !176
  %159 = zext <8 x i16> %158 to <8 x i32>
  %160 = mul nuw nsw <8 x i32> %122, %159
  %161 = getelementptr inbounds i16, i16* %128, i64 24
  %162 = bitcast i16* %161 to <8 x i16>*
  %163 = load <8 x i16>, <8 x i16>* %162, align 2, !alias.scope !176
  %164 = zext <8 x i16> %163 to <8 x i32>
  %165 = mul nuw nsw <8 x i32> %124, %164
  %166 = add nuw nsw <8 x i32> %160, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %167 = add nuw nsw <8 x i32> %166, %165
  %168 = lshr <8 x i32> %167, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %169 = trunc <8 x i32> %168 to <8 x i8>
  %170 = getelementptr inbounds i8, i8* %129, i64 8
  %171 = bitcast i8* %170 to <8 x i8>*
  store <8 x i8> %169, <8 x i8>* %171, align 1, !alias.scope !179, !noalias !176
  br label %204

172:                                              ; preds = %125, %172
  %173 = phi i64 [ %202, %172 ], [ 0, %125 ]
  %174 = phi i16* [ %201, %172 ], [ %128, %125 ]
  %175 = load i16, i16* %174, align 2
  %176 = zext i16 %175 to i32
  %177 = mul nuw nsw i32 %118, %176
  %178 = getelementptr inbounds i16, i16* %174, i64 16
  %179 = load i16, i16* %178, align 2
  %180 = zext i16 %179 to i32
  %181 = mul nuw nsw i32 %120, %180
  %182 = add nuw nsw i32 %177, 64
  %183 = add nuw nsw i32 %182, %181
  %184 = lshr i32 %183, 7
  %185 = trunc i32 %184 to i8
  %186 = getelementptr inbounds i8, i8* %129, i64 %173
  store i8 %185, i8* %186, align 1
  %187 = getelementptr inbounds i16, i16* %174, i64 1
  %188 = or i64 %173, 1
  %189 = load i16, i16* %187, align 2
  %190 = zext i16 %189 to i32
  %191 = mul nuw nsw i32 %118, %190
  %192 = getelementptr inbounds i16, i16* %174, i64 17
  %193 = load i16, i16* %192, align 2
  %194 = zext i16 %193 to i32
  %195 = mul nuw nsw i32 %120, %194
  %196 = add nuw nsw i32 %191, 64
  %197 = add nuw nsw i32 %196, %195
  %198 = lshr i32 %197, 7
  %199 = trunc i32 %198 to i8
  %200 = getelementptr inbounds i8, i8* %129, i64 %188
  store i8 %199, i8* %200, align 1
  %201 = getelementptr inbounds i16, i16* %174, i64 2
  %202 = add nuw nsw i64 %173, 2
  %203 = icmp eq i64 %202, 16
  br i1 %203, label %204, label %172, !llvm.loop !181

204:                                              ; preds = %172, %140
  %205 = phi i16* [ %141, %140 ], [ %201, %172 ]
  %206 = getelementptr inbounds i8, i8* %129, i64 16
  %207 = add nuw nsw i32 %127, 1
  %208 = icmp eq i32 %207, 16
  %209 = add i64 %126, 1
  br i1 %208, label %210, label %125

210:                                              ; preds = %204, %210
  %211 = phi i8* [ %240, %210 ], [ %14, %204 ]
  %212 = phi i32 [ %243, %210 ], [ 0, %204 ]
  %213 = phi i8* [ %241, %210 ], [ %7, %204 ]
  %214 = phi i8* [ %242, %210 ], [ %13, %204 ]
  %215 = bitcast i8* %213 to <16 x i8>*
  %216 = load <16 x i8>, <16 x i8>* %215, align 1
  %217 = zext <16 x i8> %216 to <16 x i32>
  %218 = bitcast i8* %214 to <16 x i8>*
  %219 = load <16 x i8>, <16 x i8>* %218, align 1
  %220 = zext <16 x i8> %219 to <16 x i32>
  %221 = add nuw nsw <16 x i32> %217, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %222 = add nuw nsw <16 x i32> %221, %220
  %223 = lshr <16 x i32> %222, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %224 = trunc <16 x i32> %223 to <16 x i8>
  %225 = bitcast i8* %211 to <16 x i8>*
  store <16 x i8> %224, <16 x i8>* %225, align 1
  %226 = getelementptr inbounds i8, i8* %211, i64 16
  %227 = getelementptr inbounds i8, i8* %213, i64 16
  %228 = getelementptr inbounds i8, i8* %214, i64 16
  %229 = bitcast i8* %227 to <16 x i8>*
  %230 = load <16 x i8>, <16 x i8>* %229, align 1
  %231 = zext <16 x i8> %230 to <16 x i32>
  %232 = bitcast i8* %228 to <16 x i8>*
  %233 = load <16 x i8>, <16 x i8>* %232, align 1
  %234 = zext <16 x i8> %233 to <16 x i32>
  %235 = add nuw nsw <16 x i32> %231, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %236 = add nuw nsw <16 x i32> %235, %234
  %237 = lshr <16 x i32> %236, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %238 = trunc <16 x i32> %237 to <16 x i8>
  %239 = bitcast i8* %226 to <16 x i8>*
  store <16 x i8> %238, <16 x i8>* %239, align 1
  %240 = getelementptr inbounds i8, i8* %211, i64 32
  %241 = getelementptr inbounds i8, i8* %213, i64 32
  %242 = getelementptr inbounds i8, i8* %214, i64 32
  %243 = add nuw nsw i32 %212, 2
  %244 = icmp eq i32 %243, 16
  br i1 %244, label %245, label %210

245:                                              ; preds = %210
  %246 = call i32 @vpx_variance16x16_c(i8* nonnull %14, i32 16, i8* %4, i32 %5, i32* %6)
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %14) #4
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %13) #4
  call void @llvm.lifetime.end.p0i8(i64 544, i8* nonnull %12) #4
  ret i32 %246
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_variance16x8_c(i8* nocapture readonly, i32, i8* nocapture readonly, i32, i32* nocapture) local_unnamed_addr #2 {
  store i32 0, i32* %4, align 4
  %6 = sext i32 %1 to i64
  %7 = sext i32 %3 to i64
  br label %8

8:                                                ; preds = %8, %5
  %9 = phi i32 [ 0, %5 ], [ %171, %8 ]
  %10 = phi i32 [ 0, %5 ], [ %169, %8 ]
  %11 = phi i8* [ %0, %5 ], [ %172, %8 ]
  %12 = phi i32 [ 0, %5 ], [ %174, %8 ]
  %13 = phi i8* [ %2, %5 ], [ %173, %8 ]
  %14 = load i8, i8* %11, align 1
  %15 = zext i8 %14 to i32
  %16 = load i8, i8* %13, align 1
  %17 = zext i8 %16 to i32
  %18 = sub nsw i32 %15, %17
  %19 = add nsw i32 %18, %10
  %20 = mul nsw i32 %18, %18
  %21 = add i32 %20, %9
  store i32 %21, i32* %4, align 4
  %22 = getelementptr inbounds i8, i8* %11, i64 1
  %23 = load i8, i8* %22, align 1
  %24 = zext i8 %23 to i32
  %25 = getelementptr inbounds i8, i8* %13, i64 1
  %26 = load i8, i8* %25, align 1
  %27 = zext i8 %26 to i32
  %28 = sub nsw i32 %24, %27
  %29 = add nsw i32 %28, %19
  %30 = mul nsw i32 %28, %28
  %31 = add i32 %30, %21
  store i32 %31, i32* %4, align 4
  %32 = getelementptr inbounds i8, i8* %11, i64 2
  %33 = load i8, i8* %32, align 1
  %34 = zext i8 %33 to i32
  %35 = getelementptr inbounds i8, i8* %13, i64 2
  %36 = load i8, i8* %35, align 1
  %37 = zext i8 %36 to i32
  %38 = sub nsw i32 %34, %37
  %39 = add nsw i32 %38, %29
  %40 = mul nsw i32 %38, %38
  %41 = add i32 %40, %31
  store i32 %41, i32* %4, align 4
  %42 = getelementptr inbounds i8, i8* %11, i64 3
  %43 = load i8, i8* %42, align 1
  %44 = zext i8 %43 to i32
  %45 = getelementptr inbounds i8, i8* %13, i64 3
  %46 = load i8, i8* %45, align 1
  %47 = zext i8 %46 to i32
  %48 = sub nsw i32 %44, %47
  %49 = add nsw i32 %48, %39
  %50 = mul nsw i32 %48, %48
  %51 = add i32 %50, %41
  store i32 %51, i32* %4, align 4
  %52 = getelementptr inbounds i8, i8* %11, i64 4
  %53 = load i8, i8* %52, align 1
  %54 = zext i8 %53 to i32
  %55 = getelementptr inbounds i8, i8* %13, i64 4
  %56 = load i8, i8* %55, align 1
  %57 = zext i8 %56 to i32
  %58 = sub nsw i32 %54, %57
  %59 = add nsw i32 %58, %49
  %60 = mul nsw i32 %58, %58
  %61 = add i32 %60, %51
  store i32 %61, i32* %4, align 4
  %62 = getelementptr inbounds i8, i8* %11, i64 5
  %63 = load i8, i8* %62, align 1
  %64 = zext i8 %63 to i32
  %65 = getelementptr inbounds i8, i8* %13, i64 5
  %66 = load i8, i8* %65, align 1
  %67 = zext i8 %66 to i32
  %68 = sub nsw i32 %64, %67
  %69 = add nsw i32 %68, %59
  %70 = mul nsw i32 %68, %68
  %71 = add i32 %70, %61
  store i32 %71, i32* %4, align 4
  %72 = getelementptr inbounds i8, i8* %11, i64 6
  %73 = load i8, i8* %72, align 1
  %74 = zext i8 %73 to i32
  %75 = getelementptr inbounds i8, i8* %13, i64 6
  %76 = load i8, i8* %75, align 1
  %77 = zext i8 %76 to i32
  %78 = sub nsw i32 %74, %77
  %79 = add nsw i32 %78, %69
  %80 = mul nsw i32 %78, %78
  %81 = add i32 %80, %71
  store i32 %81, i32* %4, align 4
  %82 = getelementptr inbounds i8, i8* %11, i64 7
  %83 = load i8, i8* %82, align 1
  %84 = zext i8 %83 to i32
  %85 = getelementptr inbounds i8, i8* %13, i64 7
  %86 = load i8, i8* %85, align 1
  %87 = zext i8 %86 to i32
  %88 = sub nsw i32 %84, %87
  %89 = add nsw i32 %88, %79
  %90 = mul nsw i32 %88, %88
  %91 = add i32 %90, %81
  store i32 %91, i32* %4, align 4
  %92 = getelementptr inbounds i8, i8* %11, i64 8
  %93 = load i8, i8* %92, align 1
  %94 = zext i8 %93 to i32
  %95 = getelementptr inbounds i8, i8* %13, i64 8
  %96 = load i8, i8* %95, align 1
  %97 = zext i8 %96 to i32
  %98 = sub nsw i32 %94, %97
  %99 = add nsw i32 %98, %89
  %100 = mul nsw i32 %98, %98
  %101 = add i32 %100, %91
  store i32 %101, i32* %4, align 4
  %102 = getelementptr inbounds i8, i8* %11, i64 9
  %103 = load i8, i8* %102, align 1
  %104 = zext i8 %103 to i32
  %105 = getelementptr inbounds i8, i8* %13, i64 9
  %106 = load i8, i8* %105, align 1
  %107 = zext i8 %106 to i32
  %108 = sub nsw i32 %104, %107
  %109 = add nsw i32 %108, %99
  %110 = mul nsw i32 %108, %108
  %111 = add i32 %110, %101
  store i32 %111, i32* %4, align 4
  %112 = getelementptr inbounds i8, i8* %11, i64 10
  %113 = load i8, i8* %112, align 1
  %114 = zext i8 %113 to i32
  %115 = getelementptr inbounds i8, i8* %13, i64 10
  %116 = load i8, i8* %115, align 1
  %117 = zext i8 %116 to i32
  %118 = sub nsw i32 %114, %117
  %119 = add nsw i32 %118, %109
  %120 = mul nsw i32 %118, %118
  %121 = add i32 %120, %111
  store i32 %121, i32* %4, align 4
  %122 = getelementptr inbounds i8, i8* %11, i64 11
  %123 = load i8, i8* %122, align 1
  %124 = zext i8 %123 to i32
  %125 = getelementptr inbounds i8, i8* %13, i64 11
  %126 = load i8, i8* %125, align 1
  %127 = zext i8 %126 to i32
  %128 = sub nsw i32 %124, %127
  %129 = add nsw i32 %128, %119
  %130 = mul nsw i32 %128, %128
  %131 = add i32 %130, %121
  store i32 %131, i32* %4, align 4
  %132 = getelementptr inbounds i8, i8* %11, i64 12
  %133 = load i8, i8* %132, align 1
  %134 = zext i8 %133 to i32
  %135 = getelementptr inbounds i8, i8* %13, i64 12
  %136 = load i8, i8* %135, align 1
  %137 = zext i8 %136 to i32
  %138 = sub nsw i32 %134, %137
  %139 = add nsw i32 %138, %129
  %140 = mul nsw i32 %138, %138
  %141 = add i32 %140, %131
  store i32 %141, i32* %4, align 4
  %142 = getelementptr inbounds i8, i8* %11, i64 13
  %143 = load i8, i8* %142, align 1
  %144 = zext i8 %143 to i32
  %145 = getelementptr inbounds i8, i8* %13, i64 13
  %146 = load i8, i8* %145, align 1
  %147 = zext i8 %146 to i32
  %148 = sub nsw i32 %144, %147
  %149 = add nsw i32 %148, %139
  %150 = mul nsw i32 %148, %148
  %151 = add i32 %150, %141
  store i32 %151, i32* %4, align 4
  %152 = getelementptr inbounds i8, i8* %11, i64 14
  %153 = load i8, i8* %152, align 1
  %154 = zext i8 %153 to i32
  %155 = getelementptr inbounds i8, i8* %13, i64 14
  %156 = load i8, i8* %155, align 1
  %157 = zext i8 %156 to i32
  %158 = sub nsw i32 %154, %157
  %159 = add nsw i32 %158, %149
  %160 = mul nsw i32 %158, %158
  %161 = add i32 %160, %151
  store i32 %161, i32* %4, align 4
  %162 = getelementptr inbounds i8, i8* %11, i64 15
  %163 = load i8, i8* %162, align 1
  %164 = zext i8 %163 to i32
  %165 = getelementptr inbounds i8, i8* %13, i64 15
  %166 = load i8, i8* %165, align 1
  %167 = zext i8 %166 to i32
  %168 = sub nsw i32 %164, %167
  %169 = add nsw i32 %168, %159
  %170 = mul nsw i32 %168, %168
  %171 = add i32 %170, %161
  store i32 %171, i32* %4, align 4
  %172 = getelementptr inbounds i8, i8* %11, i64 %6
  %173 = getelementptr inbounds i8, i8* %13, i64 %7
  %174 = add nuw nsw i32 %12, 1
  %175 = icmp eq i32 %174, 8
  br i1 %175, label %176, label %8

176:                                              ; preds = %8
  %177 = sext i32 %169 to i64
  %178 = mul nsw i64 %177, %177
  %179 = lshr i64 %178, 7
  %180 = trunc i64 %179 to i32
  %181 = sub i32 %171, %180
  ret i32 %181
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_sub_pixel_variance16x8_c(i8* nocapture readonly, i32, i32, i32, i8* nocapture readonly, i32, i32* nocapture) local_unnamed_addr #2 {
  %8 = alloca [144 x i16], align 16
  %9 = bitcast [144 x i16]* %8 to i8*
  %10 = alloca [128 x i8], align 16
  %11 = getelementptr inbounds [128 x i8], [128 x i8]* %10, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 288, i8* nonnull %9) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %9, i8 -86, i64 288, i1 false)
  %12 = getelementptr inbounds [128 x i8], [128 x i8]* %10, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %12) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %12, i8 -86, i64 128, i1 false)
  %13 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 0
  %14 = sext i32 %2 to i64
  %15 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %14, i64 0
  %16 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %14, i64 1
  %17 = add i32 %1, -16
  %18 = zext i32 %17 to i64
  %19 = load i8, i8* %15, align 2
  %20 = zext i8 %19 to i32
  %21 = load i8, i8* %16, align 1
  %22 = zext i8 %21 to i32
  %23 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 16
  %24 = bitcast i16* %23 to i8*
  %25 = getelementptr i8, i8* %0, i64 17
  %26 = icmp ugt i8* %25, %9
  %27 = icmp ugt i8* %24, %0
  %28 = and i1 %26, %27
  br i1 %28, label %65, label %29

29:                                               ; preds = %7
  %30 = insertelement <8 x i32> undef, i32 %20, i32 0
  %31 = shufflevector <8 x i32> %30, <8 x i32> undef, <8 x i32> zeroinitializer
  %32 = insertelement <8 x i32> undef, i32 %22, i32 0
  %33 = shufflevector <8 x i32> %32, <8 x i32> undef, <8 x i32> zeroinitializer
  %34 = getelementptr i8, i8* %0, i64 16
  %35 = bitcast i8* %0 to <8 x i8>*
  %36 = load <8 x i8>, <8 x i8>* %35, align 1, !alias.scope !182
  %37 = zext <8 x i8> %36 to <8 x i32>
  %38 = mul nuw nsw <8 x i32> %31, %37
  %39 = getelementptr inbounds i8, i8* %0, i64 1
  %40 = bitcast i8* %39 to <8 x i8>*
  %41 = load <8 x i8>, <8 x i8>* %40, align 1, !alias.scope !182
  %42 = zext <8 x i8> %41 to <8 x i32>
  %43 = mul nuw nsw <8 x i32> %33, %42
  %44 = add nuw nsw <8 x i32> %38, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %45 = add nuw nsw <8 x i32> %44, %43
  %46 = lshr <8 x i32> %45, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %47 = trunc <8 x i32> %46 to <8 x i16>
  %48 = bitcast [144 x i16]* %8 to <8 x i16>*
  store <8 x i16> %47, <8 x i16>* %48, align 16, !alias.scope !185, !noalias !182
  %49 = getelementptr i8, i8* %0, i64 8
  %50 = bitcast i8* %49 to <8 x i8>*
  %51 = load <8 x i8>, <8 x i8>* %50, align 1, !alias.scope !182
  %52 = zext <8 x i8> %51 to <8 x i32>
  %53 = mul nuw nsw <8 x i32> %31, %52
  %54 = getelementptr inbounds i8, i8* %0, i64 9
  %55 = bitcast i8* %54 to <8 x i8>*
  %56 = load <8 x i8>, <8 x i8>* %55, align 1, !alias.scope !182
  %57 = zext <8 x i8> %56 to <8 x i32>
  %58 = mul nuw nsw <8 x i32> %33, %57
  %59 = add nuw nsw <8 x i32> %53, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %60 = add nuw nsw <8 x i32> %59, %58
  %61 = lshr <8 x i32> %60, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %62 = trunc <8 x i32> %61 to <8 x i16>
  %63 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 8
  %64 = bitcast i16* %63 to <8 x i16>*
  store <8 x i16> %62, <8 x i16>* %64, align 16, !alias.scope !185, !noalias !182
  br label %95

65:                                               ; preds = %7, %65
  %66 = phi i64 [ %93, %65 ], [ 0, %7 ]
  %67 = phi i8* [ %84, %65 ], [ %0, %7 ]
  %68 = load i8, i8* %67, align 1
  %69 = zext i8 %68 to i32
  %70 = mul nuw nsw i32 %20, %69
  %71 = getelementptr inbounds i8, i8* %67, i64 1
  %72 = load i8, i8* %71, align 1
  %73 = zext i8 %72 to i32
  %74 = mul nuw nsw i32 %22, %73
  %75 = add nuw nsw i32 %70, 64
  %76 = add nuw nsw i32 %75, %74
  %77 = lshr i32 %76, 7
  %78 = trunc i32 %77 to i16
  %79 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 %66
  store i16 %78, i16* %79, align 4
  %80 = or i64 %66, 1
  %81 = load i8, i8* %71, align 1
  %82 = zext i8 %81 to i32
  %83 = mul nuw nsw i32 %20, %82
  %84 = getelementptr inbounds i8, i8* %67, i64 2
  %85 = load i8, i8* %84, align 1
  %86 = zext i8 %85 to i32
  %87 = mul nuw nsw i32 %22, %86
  %88 = add nuw nsw i32 %83, 64
  %89 = add nuw nsw i32 %88, %87
  %90 = lshr i32 %89, 7
  %91 = trunc i32 %90 to i16
  %92 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 %80
  store i16 %91, i16* %92, align 2
  %93 = add nuw nsw i64 %66, 2
  %94 = icmp eq i64 %93, 16
  br i1 %94, label %95, label %65, !llvm.loop !187

95:                                               ; preds = %65, %29
  %96 = phi i8* [ %34, %29 ], [ %84, %65 ]
  %97 = getelementptr inbounds i8, i8* %96, i64 %18
  %98 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 16
  %99 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 16
  %100 = bitcast i16* %99 to i8*
  %101 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 32
  %102 = bitcast i16* %101 to i8*
  %103 = add nuw nsw i64 %18, 17
  %104 = getelementptr i8, i8* %96, i64 %103
  %105 = icmp ugt i8* %104, %100
  %106 = icmp ult i8* %97, %102
  %107 = and i1 %105, %106
  br i1 %107, label %730, label %108

108:                                              ; preds = %95
  %109 = insertelement <8 x i32> undef, i32 %20, i32 0
  %110 = shufflevector <8 x i32> %109, <8 x i32> undef, <8 x i32> zeroinitializer
  %111 = insertelement <8 x i32> undef, i32 %22, i32 0
  %112 = shufflevector <8 x i32> %111, <8 x i32> undef, <8 x i32> zeroinitializer
  %113 = getelementptr i8, i8* %97, i64 16
  %114 = bitcast i8* %97 to <8 x i8>*
  %115 = load <8 x i8>, <8 x i8>* %114, align 1, !alias.scope !188
  %116 = zext <8 x i8> %115 to <8 x i32>
  %117 = mul nuw nsw <8 x i32> %110, %116
  %118 = getelementptr inbounds i8, i8* %97, i64 1
  %119 = bitcast i8* %118 to <8 x i8>*
  %120 = load <8 x i8>, <8 x i8>* %119, align 1, !alias.scope !188
  %121 = zext <8 x i8> %120 to <8 x i32>
  %122 = mul nuw nsw <8 x i32> %112, %121
  %123 = add nuw nsw <8 x i32> %117, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %124 = add nuw nsw <8 x i32> %123, %122
  %125 = lshr <8 x i32> %124, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %126 = trunc <8 x i32> %125 to <8 x i16>
  %127 = bitcast i16* %98 to <8 x i16>*
  store <8 x i16> %126, <8 x i16>* %127, align 16, !alias.scope !191, !noalias !188
  %128 = getelementptr i8, i8* %97, i64 8
  %129 = bitcast i8* %128 to <8 x i8>*
  %130 = load <8 x i8>, <8 x i8>* %129, align 1, !alias.scope !188
  %131 = zext <8 x i8> %130 to <8 x i32>
  %132 = mul nuw nsw <8 x i32> %110, %131
  %133 = getelementptr inbounds i8, i8* %128, i64 1
  %134 = bitcast i8* %133 to <8 x i8>*
  %135 = load <8 x i8>, <8 x i8>* %134, align 1, !alias.scope !188
  %136 = zext <8 x i8> %135 to <8 x i32>
  %137 = mul nuw nsw <8 x i32> %112, %136
  %138 = add nuw nsw <8 x i32> %132, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %139 = add nuw nsw <8 x i32> %138, %137
  %140 = lshr <8 x i32> %139, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %141 = trunc <8 x i32> %140 to <8 x i16>
  %142 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 24
  %143 = bitcast i16* %142 to <8 x i16>*
  store <8 x i16> %141, <8 x i16>* %143, align 16, !alias.scope !191, !noalias !188
  br label %760

144:                                              ; preds = %1312, %144
  %145 = phi i64 [ %174, %144 ], [ 0, %1312 ]
  %146 = phi i16* [ %173, %144 ], [ %13, %1312 ]
  %147 = load i16, i16* %146, align 2
  %148 = zext i16 %147 to i32
  %149 = mul nuw nsw i32 %1317, %148
  %150 = getelementptr inbounds i16, i16* %146, i64 16
  %151 = load i16, i16* %150, align 2
  %152 = zext i16 %151 to i32
  %153 = mul nuw nsw i32 %1319, %152
  %154 = add nuw nsw i32 %149, 64
  %155 = add nuw nsw i32 %154, %153
  %156 = lshr i32 %155, 7
  %157 = trunc i32 %156 to i8
  %158 = getelementptr inbounds [128 x i8], [128 x i8]* %10, i64 0, i64 %145
  store i8 %157, i8* %158, align 2
  %159 = getelementptr inbounds i16, i16* %146, i64 1
  %160 = or i64 %145, 1
  %161 = load i16, i16* %159, align 2
  %162 = zext i16 %161 to i32
  %163 = mul nuw nsw i32 %1317, %162
  %164 = getelementptr inbounds i16, i16* %146, i64 17
  %165 = load i16, i16* %164, align 2
  %166 = zext i16 %165 to i32
  %167 = mul nuw nsw i32 %1319, %166
  %168 = add nuw nsw i32 %163, 64
  %169 = add nuw nsw i32 %168, %167
  %170 = lshr i32 %169, 7
  %171 = trunc i32 %170 to i8
  %172 = getelementptr inbounds [128 x i8], [128 x i8]* %10, i64 0, i64 %160
  store i8 %171, i8* %172, align 1
  %173 = getelementptr inbounds i16, i16* %146, i64 2
  %174 = add nuw nsw i64 %145, 2
  %175 = icmp eq i64 %174, 16
  br i1 %175, label %176, label %144, !llvm.loop !193

176:                                              ; preds = %144, %1326
  %177 = phi i16* [ %1331, %1326 ], [ %173, %144 ]
  %178 = getelementptr inbounds [128 x i8], [128 x i8]* %10, i64 0, i64 16
  %179 = bitcast i16* %177 to i8*
  %180 = getelementptr inbounds [128 x i8], [128 x i8]* %10, i64 0, i64 16
  %181 = getelementptr inbounds [128 x i8], [128 x i8]* %10, i64 0, i64 32
  %182 = getelementptr i16, i16* %177, i64 32
  %183 = bitcast i16* %182 to i8*
  %184 = icmp ult i8* %180, %183
  %185 = icmp ugt i8* %181, %179
  %186 = and i1 %184, %185
  br i1 %186, label %223, label %187

187:                                              ; preds = %176
  %188 = insertelement <8 x i32> undef, i32 %1317, i32 0
  %189 = shufflevector <8 x i32> %188, <8 x i32> undef, <8 x i32> zeroinitializer
  %190 = insertelement <8 x i32> undef, i32 %1319, i32 0
  %191 = shufflevector <8 x i32> %190, <8 x i32> undef, <8 x i32> zeroinitializer
  %192 = getelementptr i16, i16* %177, i64 16
  %193 = bitcast i16* %177 to <8 x i16>*
  %194 = load <8 x i16>, <8 x i16>* %193, align 2, !alias.scope !194
  %195 = zext <8 x i16> %194 to <8 x i32>
  %196 = mul nuw nsw <8 x i32> %189, %195
  %197 = getelementptr inbounds i16, i16* %177, i64 16
  %198 = bitcast i16* %197 to <8 x i16>*
  %199 = load <8 x i16>, <8 x i16>* %198, align 2, !alias.scope !194
  %200 = zext <8 x i16> %199 to <8 x i32>
  %201 = mul nuw nsw <8 x i32> %191, %200
  %202 = add nuw nsw <8 x i32> %196, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %203 = add nuw nsw <8 x i32> %202, %201
  %204 = lshr <8 x i32> %203, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %205 = trunc <8 x i32> %204 to <8 x i8>
  %206 = bitcast i8* %178 to <8 x i8>*
  store <8 x i8> %205, <8 x i8>* %206, align 16, !alias.scope !197, !noalias !194
  %207 = getelementptr i16, i16* %177, i64 8
  %208 = bitcast i16* %207 to <8 x i16>*
  %209 = load <8 x i16>, <8 x i16>* %208, align 2, !alias.scope !194
  %210 = zext <8 x i16> %209 to <8 x i32>
  %211 = mul nuw nsw <8 x i32> %189, %210
  %212 = getelementptr inbounds i16, i16* %177, i64 24
  %213 = bitcast i16* %212 to <8 x i16>*
  %214 = load <8 x i16>, <8 x i16>* %213, align 2, !alias.scope !194
  %215 = zext <8 x i16> %214 to <8 x i32>
  %216 = mul nuw nsw <8 x i32> %191, %215
  %217 = add nuw nsw <8 x i32> %211, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %218 = add nuw nsw <8 x i32> %217, %216
  %219 = lshr <8 x i32> %218, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %220 = trunc <8 x i32> %219 to <8 x i8>
  %221 = getelementptr inbounds [128 x i8], [128 x i8]* %10, i64 0, i64 24
  %222 = bitcast i8* %221 to <8 x i8>*
  store <8 x i8> %220, <8 x i8>* %222, align 8, !alias.scope !197, !noalias !194
  br label %255

223:                                              ; preds = %176, %223
  %224 = phi i64 [ %253, %223 ], [ 0, %176 ]
  %225 = phi i16* [ %252, %223 ], [ %177, %176 ]
  %226 = load i16, i16* %225, align 2
  %227 = zext i16 %226 to i32
  %228 = mul nuw nsw i32 %1317, %227
  %229 = getelementptr inbounds i16, i16* %225, i64 16
  %230 = load i16, i16* %229, align 2
  %231 = zext i16 %230 to i32
  %232 = mul nuw nsw i32 %1319, %231
  %233 = add nuw nsw i32 %228, 64
  %234 = add nuw nsw i32 %233, %232
  %235 = lshr i32 %234, 7
  %236 = trunc i32 %235 to i8
  %237 = getelementptr inbounds i8, i8* %178, i64 %224
  store i8 %236, i8* %237, align 2
  %238 = getelementptr inbounds i16, i16* %225, i64 1
  %239 = or i64 %224, 1
  %240 = load i16, i16* %238, align 2
  %241 = zext i16 %240 to i32
  %242 = mul nuw nsw i32 %1317, %241
  %243 = getelementptr inbounds i16, i16* %225, i64 17
  %244 = load i16, i16* %243, align 2
  %245 = zext i16 %244 to i32
  %246 = mul nuw nsw i32 %1319, %245
  %247 = add nuw nsw i32 %242, 64
  %248 = add nuw nsw i32 %247, %246
  %249 = lshr i32 %248, 7
  %250 = trunc i32 %249 to i8
  %251 = getelementptr inbounds i8, i8* %178, i64 %239
  store i8 %250, i8* %251, align 1
  %252 = getelementptr inbounds i16, i16* %225, i64 2
  %253 = add nuw nsw i64 %224, 2
  %254 = icmp eq i64 %253, 16
  br i1 %254, label %255, label %223, !llvm.loop !199

255:                                              ; preds = %223, %187
  %256 = phi i16* [ %192, %187 ], [ %252, %223 ]
  %257 = getelementptr inbounds [128 x i8], [128 x i8]* %10, i64 0, i64 32
  %258 = bitcast i16* %256 to i8*
  %259 = getelementptr inbounds [128 x i8], [128 x i8]* %10, i64 0, i64 32
  %260 = getelementptr inbounds [128 x i8], [128 x i8]* %10, i64 0, i64 48
  %261 = getelementptr i16, i16* %256, i64 32
  %262 = bitcast i16* %261 to i8*
  %263 = icmp ult i8* %259, %262
  %264 = icmp ugt i8* %260, %258
  %265 = and i1 %263, %264
  br i1 %265, label %302, label %266

266:                                              ; preds = %255
  %267 = insertelement <8 x i32> undef, i32 %1317, i32 0
  %268 = shufflevector <8 x i32> %267, <8 x i32> undef, <8 x i32> zeroinitializer
  %269 = insertelement <8 x i32> undef, i32 %1319, i32 0
  %270 = shufflevector <8 x i32> %269, <8 x i32> undef, <8 x i32> zeroinitializer
  %271 = getelementptr i16, i16* %256, i64 16
  %272 = bitcast i16* %256 to <8 x i16>*
  %273 = load <8 x i16>, <8 x i16>* %272, align 2, !alias.scope !200
  %274 = zext <8 x i16> %273 to <8 x i32>
  %275 = mul nuw nsw <8 x i32> %268, %274
  %276 = getelementptr inbounds i16, i16* %256, i64 16
  %277 = bitcast i16* %276 to <8 x i16>*
  %278 = load <8 x i16>, <8 x i16>* %277, align 2, !alias.scope !200
  %279 = zext <8 x i16> %278 to <8 x i32>
  %280 = mul nuw nsw <8 x i32> %270, %279
  %281 = add nuw nsw <8 x i32> %275, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %282 = add nuw nsw <8 x i32> %281, %280
  %283 = lshr <8 x i32> %282, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %284 = trunc <8 x i32> %283 to <8 x i8>
  %285 = bitcast i8* %257 to <8 x i8>*
  store <8 x i8> %284, <8 x i8>* %285, align 16, !alias.scope !203, !noalias !200
  %286 = getelementptr i16, i16* %256, i64 8
  %287 = bitcast i16* %286 to <8 x i16>*
  %288 = load <8 x i16>, <8 x i16>* %287, align 2, !alias.scope !200
  %289 = zext <8 x i16> %288 to <8 x i32>
  %290 = mul nuw nsw <8 x i32> %268, %289
  %291 = getelementptr inbounds i16, i16* %256, i64 24
  %292 = bitcast i16* %291 to <8 x i16>*
  %293 = load <8 x i16>, <8 x i16>* %292, align 2, !alias.scope !200
  %294 = zext <8 x i16> %293 to <8 x i32>
  %295 = mul nuw nsw <8 x i32> %270, %294
  %296 = add nuw nsw <8 x i32> %290, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %297 = add nuw nsw <8 x i32> %296, %295
  %298 = lshr <8 x i32> %297, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %299 = trunc <8 x i32> %298 to <8 x i8>
  %300 = getelementptr inbounds [128 x i8], [128 x i8]* %10, i64 0, i64 40
  %301 = bitcast i8* %300 to <8 x i8>*
  store <8 x i8> %299, <8 x i8>* %301, align 8, !alias.scope !203, !noalias !200
  br label %334

302:                                              ; preds = %255, %302
  %303 = phi i64 [ %332, %302 ], [ 0, %255 ]
  %304 = phi i16* [ %331, %302 ], [ %256, %255 ]
  %305 = load i16, i16* %304, align 2
  %306 = zext i16 %305 to i32
  %307 = mul nuw nsw i32 %1317, %306
  %308 = getelementptr inbounds i16, i16* %304, i64 16
  %309 = load i16, i16* %308, align 2
  %310 = zext i16 %309 to i32
  %311 = mul nuw nsw i32 %1319, %310
  %312 = add nuw nsw i32 %307, 64
  %313 = add nuw nsw i32 %312, %311
  %314 = lshr i32 %313, 7
  %315 = trunc i32 %314 to i8
  %316 = getelementptr inbounds i8, i8* %257, i64 %303
  store i8 %315, i8* %316, align 2
  %317 = getelementptr inbounds i16, i16* %304, i64 1
  %318 = or i64 %303, 1
  %319 = load i16, i16* %317, align 2
  %320 = zext i16 %319 to i32
  %321 = mul nuw nsw i32 %1317, %320
  %322 = getelementptr inbounds i16, i16* %304, i64 17
  %323 = load i16, i16* %322, align 2
  %324 = zext i16 %323 to i32
  %325 = mul nuw nsw i32 %1319, %324
  %326 = add nuw nsw i32 %321, 64
  %327 = add nuw nsw i32 %326, %325
  %328 = lshr i32 %327, 7
  %329 = trunc i32 %328 to i8
  %330 = getelementptr inbounds i8, i8* %257, i64 %318
  store i8 %329, i8* %330, align 1
  %331 = getelementptr inbounds i16, i16* %304, i64 2
  %332 = add nuw nsw i64 %303, 2
  %333 = icmp eq i64 %332, 16
  br i1 %333, label %334, label %302, !llvm.loop !205

334:                                              ; preds = %302, %266
  %335 = phi i16* [ %271, %266 ], [ %331, %302 ]
  %336 = getelementptr inbounds [128 x i8], [128 x i8]* %10, i64 0, i64 48
  %337 = bitcast i16* %335 to i8*
  %338 = getelementptr inbounds [128 x i8], [128 x i8]* %10, i64 0, i64 48
  %339 = getelementptr inbounds [128 x i8], [128 x i8]* %10, i64 0, i64 64
  %340 = getelementptr i16, i16* %335, i64 32
  %341 = bitcast i16* %340 to i8*
  %342 = icmp ult i8* %338, %341
  %343 = icmp ugt i8* %339, %337
  %344 = and i1 %342, %343
  br i1 %344, label %381, label %345

345:                                              ; preds = %334
  %346 = insertelement <8 x i32> undef, i32 %1317, i32 0
  %347 = shufflevector <8 x i32> %346, <8 x i32> undef, <8 x i32> zeroinitializer
  %348 = insertelement <8 x i32> undef, i32 %1319, i32 0
  %349 = shufflevector <8 x i32> %348, <8 x i32> undef, <8 x i32> zeroinitializer
  %350 = getelementptr i16, i16* %335, i64 16
  %351 = bitcast i16* %335 to <8 x i16>*
  %352 = load <8 x i16>, <8 x i16>* %351, align 2, !alias.scope !206
  %353 = zext <8 x i16> %352 to <8 x i32>
  %354 = mul nuw nsw <8 x i32> %347, %353
  %355 = getelementptr inbounds i16, i16* %335, i64 16
  %356 = bitcast i16* %355 to <8 x i16>*
  %357 = load <8 x i16>, <8 x i16>* %356, align 2, !alias.scope !206
  %358 = zext <8 x i16> %357 to <8 x i32>
  %359 = mul nuw nsw <8 x i32> %349, %358
  %360 = add nuw nsw <8 x i32> %354, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %361 = add nuw nsw <8 x i32> %360, %359
  %362 = lshr <8 x i32> %361, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %363 = trunc <8 x i32> %362 to <8 x i8>
  %364 = bitcast i8* %336 to <8 x i8>*
  store <8 x i8> %363, <8 x i8>* %364, align 16, !alias.scope !209, !noalias !206
  %365 = getelementptr i16, i16* %335, i64 8
  %366 = bitcast i16* %365 to <8 x i16>*
  %367 = load <8 x i16>, <8 x i16>* %366, align 2, !alias.scope !206
  %368 = zext <8 x i16> %367 to <8 x i32>
  %369 = mul nuw nsw <8 x i32> %347, %368
  %370 = getelementptr inbounds i16, i16* %335, i64 24
  %371 = bitcast i16* %370 to <8 x i16>*
  %372 = load <8 x i16>, <8 x i16>* %371, align 2, !alias.scope !206
  %373 = zext <8 x i16> %372 to <8 x i32>
  %374 = mul nuw nsw <8 x i32> %349, %373
  %375 = add nuw nsw <8 x i32> %369, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %376 = add nuw nsw <8 x i32> %375, %374
  %377 = lshr <8 x i32> %376, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %378 = trunc <8 x i32> %377 to <8 x i8>
  %379 = getelementptr inbounds [128 x i8], [128 x i8]* %10, i64 0, i64 56
  %380 = bitcast i8* %379 to <8 x i8>*
  store <8 x i8> %378, <8 x i8>* %380, align 8, !alias.scope !209, !noalias !206
  br label %413

381:                                              ; preds = %334, %381
  %382 = phi i64 [ %411, %381 ], [ 0, %334 ]
  %383 = phi i16* [ %410, %381 ], [ %335, %334 ]
  %384 = load i16, i16* %383, align 2
  %385 = zext i16 %384 to i32
  %386 = mul nuw nsw i32 %1317, %385
  %387 = getelementptr inbounds i16, i16* %383, i64 16
  %388 = load i16, i16* %387, align 2
  %389 = zext i16 %388 to i32
  %390 = mul nuw nsw i32 %1319, %389
  %391 = add nuw nsw i32 %386, 64
  %392 = add nuw nsw i32 %391, %390
  %393 = lshr i32 %392, 7
  %394 = trunc i32 %393 to i8
  %395 = getelementptr inbounds i8, i8* %336, i64 %382
  store i8 %394, i8* %395, align 2
  %396 = getelementptr inbounds i16, i16* %383, i64 1
  %397 = or i64 %382, 1
  %398 = load i16, i16* %396, align 2
  %399 = zext i16 %398 to i32
  %400 = mul nuw nsw i32 %1317, %399
  %401 = getelementptr inbounds i16, i16* %383, i64 17
  %402 = load i16, i16* %401, align 2
  %403 = zext i16 %402 to i32
  %404 = mul nuw nsw i32 %1319, %403
  %405 = add nuw nsw i32 %400, 64
  %406 = add nuw nsw i32 %405, %404
  %407 = lshr i32 %406, 7
  %408 = trunc i32 %407 to i8
  %409 = getelementptr inbounds i8, i8* %336, i64 %397
  store i8 %408, i8* %409, align 1
  %410 = getelementptr inbounds i16, i16* %383, i64 2
  %411 = add nuw nsw i64 %382, 2
  %412 = icmp eq i64 %411, 16
  br i1 %412, label %413, label %381, !llvm.loop !211

413:                                              ; preds = %381, %345
  %414 = phi i16* [ %350, %345 ], [ %410, %381 ]
  %415 = getelementptr inbounds [128 x i8], [128 x i8]* %10, i64 0, i64 64
  %416 = bitcast i16* %414 to i8*
  %417 = getelementptr inbounds [128 x i8], [128 x i8]* %10, i64 0, i64 64
  %418 = getelementptr inbounds [128 x i8], [128 x i8]* %10, i64 0, i64 80
  %419 = getelementptr i16, i16* %414, i64 32
  %420 = bitcast i16* %419 to i8*
  %421 = icmp ult i8* %417, %420
  %422 = icmp ugt i8* %418, %416
  %423 = and i1 %421, %422
  br i1 %423, label %460, label %424

424:                                              ; preds = %413
  %425 = insertelement <8 x i32> undef, i32 %1317, i32 0
  %426 = shufflevector <8 x i32> %425, <8 x i32> undef, <8 x i32> zeroinitializer
  %427 = insertelement <8 x i32> undef, i32 %1319, i32 0
  %428 = shufflevector <8 x i32> %427, <8 x i32> undef, <8 x i32> zeroinitializer
  %429 = getelementptr i16, i16* %414, i64 16
  %430 = bitcast i16* %414 to <8 x i16>*
  %431 = load <8 x i16>, <8 x i16>* %430, align 2, !alias.scope !212
  %432 = zext <8 x i16> %431 to <8 x i32>
  %433 = mul nuw nsw <8 x i32> %426, %432
  %434 = getelementptr inbounds i16, i16* %414, i64 16
  %435 = bitcast i16* %434 to <8 x i16>*
  %436 = load <8 x i16>, <8 x i16>* %435, align 2, !alias.scope !212
  %437 = zext <8 x i16> %436 to <8 x i32>
  %438 = mul nuw nsw <8 x i32> %428, %437
  %439 = add nuw nsw <8 x i32> %433, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %440 = add nuw nsw <8 x i32> %439, %438
  %441 = lshr <8 x i32> %440, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %442 = trunc <8 x i32> %441 to <8 x i8>
  %443 = bitcast i8* %415 to <8 x i8>*
  store <8 x i8> %442, <8 x i8>* %443, align 16, !alias.scope !215, !noalias !212
  %444 = getelementptr i16, i16* %414, i64 8
  %445 = bitcast i16* %444 to <8 x i16>*
  %446 = load <8 x i16>, <8 x i16>* %445, align 2, !alias.scope !212
  %447 = zext <8 x i16> %446 to <8 x i32>
  %448 = mul nuw nsw <8 x i32> %426, %447
  %449 = getelementptr inbounds i16, i16* %414, i64 24
  %450 = bitcast i16* %449 to <8 x i16>*
  %451 = load <8 x i16>, <8 x i16>* %450, align 2, !alias.scope !212
  %452 = zext <8 x i16> %451 to <8 x i32>
  %453 = mul nuw nsw <8 x i32> %428, %452
  %454 = add nuw nsw <8 x i32> %448, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %455 = add nuw nsw <8 x i32> %454, %453
  %456 = lshr <8 x i32> %455, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %457 = trunc <8 x i32> %456 to <8 x i8>
  %458 = getelementptr inbounds [128 x i8], [128 x i8]* %10, i64 0, i64 72
  %459 = bitcast i8* %458 to <8 x i8>*
  store <8 x i8> %457, <8 x i8>* %459, align 8, !alias.scope !215, !noalias !212
  br label %492

460:                                              ; preds = %413, %460
  %461 = phi i64 [ %490, %460 ], [ 0, %413 ]
  %462 = phi i16* [ %489, %460 ], [ %414, %413 ]
  %463 = load i16, i16* %462, align 2
  %464 = zext i16 %463 to i32
  %465 = mul nuw nsw i32 %1317, %464
  %466 = getelementptr inbounds i16, i16* %462, i64 16
  %467 = load i16, i16* %466, align 2
  %468 = zext i16 %467 to i32
  %469 = mul nuw nsw i32 %1319, %468
  %470 = add nuw nsw i32 %465, 64
  %471 = add nuw nsw i32 %470, %469
  %472 = lshr i32 %471, 7
  %473 = trunc i32 %472 to i8
  %474 = getelementptr inbounds i8, i8* %415, i64 %461
  store i8 %473, i8* %474, align 2
  %475 = getelementptr inbounds i16, i16* %462, i64 1
  %476 = or i64 %461, 1
  %477 = load i16, i16* %475, align 2
  %478 = zext i16 %477 to i32
  %479 = mul nuw nsw i32 %1317, %478
  %480 = getelementptr inbounds i16, i16* %462, i64 17
  %481 = load i16, i16* %480, align 2
  %482 = zext i16 %481 to i32
  %483 = mul nuw nsw i32 %1319, %482
  %484 = add nuw nsw i32 %479, 64
  %485 = add nuw nsw i32 %484, %483
  %486 = lshr i32 %485, 7
  %487 = trunc i32 %486 to i8
  %488 = getelementptr inbounds i8, i8* %415, i64 %476
  store i8 %487, i8* %488, align 1
  %489 = getelementptr inbounds i16, i16* %462, i64 2
  %490 = add nuw nsw i64 %461, 2
  %491 = icmp eq i64 %490, 16
  br i1 %491, label %492, label %460, !llvm.loop !217

492:                                              ; preds = %460, %424
  %493 = phi i16* [ %429, %424 ], [ %489, %460 ]
  %494 = getelementptr inbounds [128 x i8], [128 x i8]* %10, i64 0, i64 80
  %495 = bitcast i16* %493 to i8*
  %496 = getelementptr inbounds [128 x i8], [128 x i8]* %10, i64 0, i64 80
  %497 = getelementptr inbounds [128 x i8], [128 x i8]* %10, i64 0, i64 96
  %498 = getelementptr i16, i16* %493, i64 32
  %499 = bitcast i16* %498 to i8*
  %500 = icmp ult i8* %496, %499
  %501 = icmp ugt i8* %497, %495
  %502 = and i1 %500, %501
  br i1 %502, label %539, label %503

503:                                              ; preds = %492
  %504 = insertelement <8 x i32> undef, i32 %1317, i32 0
  %505 = shufflevector <8 x i32> %504, <8 x i32> undef, <8 x i32> zeroinitializer
  %506 = insertelement <8 x i32> undef, i32 %1319, i32 0
  %507 = shufflevector <8 x i32> %506, <8 x i32> undef, <8 x i32> zeroinitializer
  %508 = getelementptr i16, i16* %493, i64 16
  %509 = bitcast i16* %493 to <8 x i16>*
  %510 = load <8 x i16>, <8 x i16>* %509, align 2, !alias.scope !218
  %511 = zext <8 x i16> %510 to <8 x i32>
  %512 = mul nuw nsw <8 x i32> %505, %511
  %513 = getelementptr inbounds i16, i16* %493, i64 16
  %514 = bitcast i16* %513 to <8 x i16>*
  %515 = load <8 x i16>, <8 x i16>* %514, align 2, !alias.scope !218
  %516 = zext <8 x i16> %515 to <8 x i32>
  %517 = mul nuw nsw <8 x i32> %507, %516
  %518 = add nuw nsw <8 x i32> %512, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %519 = add nuw nsw <8 x i32> %518, %517
  %520 = lshr <8 x i32> %519, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %521 = trunc <8 x i32> %520 to <8 x i8>
  %522 = bitcast i8* %494 to <8 x i8>*
  store <8 x i8> %521, <8 x i8>* %522, align 16, !alias.scope !221, !noalias !218
  %523 = getelementptr i16, i16* %493, i64 8
  %524 = bitcast i16* %523 to <8 x i16>*
  %525 = load <8 x i16>, <8 x i16>* %524, align 2, !alias.scope !218
  %526 = zext <8 x i16> %525 to <8 x i32>
  %527 = mul nuw nsw <8 x i32> %505, %526
  %528 = getelementptr inbounds i16, i16* %493, i64 24
  %529 = bitcast i16* %528 to <8 x i16>*
  %530 = load <8 x i16>, <8 x i16>* %529, align 2, !alias.scope !218
  %531 = zext <8 x i16> %530 to <8 x i32>
  %532 = mul nuw nsw <8 x i32> %507, %531
  %533 = add nuw nsw <8 x i32> %527, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %534 = add nuw nsw <8 x i32> %533, %532
  %535 = lshr <8 x i32> %534, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %536 = trunc <8 x i32> %535 to <8 x i8>
  %537 = getelementptr inbounds [128 x i8], [128 x i8]* %10, i64 0, i64 88
  %538 = bitcast i8* %537 to <8 x i8>*
  store <8 x i8> %536, <8 x i8>* %538, align 8, !alias.scope !221, !noalias !218
  br label %571

539:                                              ; preds = %492, %539
  %540 = phi i64 [ %569, %539 ], [ 0, %492 ]
  %541 = phi i16* [ %568, %539 ], [ %493, %492 ]
  %542 = load i16, i16* %541, align 2
  %543 = zext i16 %542 to i32
  %544 = mul nuw nsw i32 %1317, %543
  %545 = getelementptr inbounds i16, i16* %541, i64 16
  %546 = load i16, i16* %545, align 2
  %547 = zext i16 %546 to i32
  %548 = mul nuw nsw i32 %1319, %547
  %549 = add nuw nsw i32 %544, 64
  %550 = add nuw nsw i32 %549, %548
  %551 = lshr i32 %550, 7
  %552 = trunc i32 %551 to i8
  %553 = getelementptr inbounds i8, i8* %494, i64 %540
  store i8 %552, i8* %553, align 2
  %554 = getelementptr inbounds i16, i16* %541, i64 1
  %555 = or i64 %540, 1
  %556 = load i16, i16* %554, align 2
  %557 = zext i16 %556 to i32
  %558 = mul nuw nsw i32 %1317, %557
  %559 = getelementptr inbounds i16, i16* %541, i64 17
  %560 = load i16, i16* %559, align 2
  %561 = zext i16 %560 to i32
  %562 = mul nuw nsw i32 %1319, %561
  %563 = add nuw nsw i32 %558, 64
  %564 = add nuw nsw i32 %563, %562
  %565 = lshr i32 %564, 7
  %566 = trunc i32 %565 to i8
  %567 = getelementptr inbounds i8, i8* %494, i64 %555
  store i8 %566, i8* %567, align 1
  %568 = getelementptr inbounds i16, i16* %541, i64 2
  %569 = add nuw nsw i64 %540, 2
  %570 = icmp eq i64 %569, 16
  br i1 %570, label %571, label %539, !llvm.loop !223

571:                                              ; preds = %539, %503
  %572 = phi i16* [ %508, %503 ], [ %568, %539 ]
  %573 = getelementptr inbounds [128 x i8], [128 x i8]* %10, i64 0, i64 96
  %574 = bitcast i16* %572 to i8*
  %575 = getelementptr inbounds [128 x i8], [128 x i8]* %10, i64 0, i64 96
  %576 = getelementptr inbounds [128 x i8], [128 x i8]* %10, i64 0, i64 112
  %577 = getelementptr i16, i16* %572, i64 32
  %578 = bitcast i16* %577 to i8*
  %579 = icmp ult i8* %575, %578
  %580 = icmp ugt i8* %576, %574
  %581 = and i1 %579, %580
  br i1 %581, label %618, label %582

582:                                              ; preds = %571
  %583 = insertelement <8 x i32> undef, i32 %1317, i32 0
  %584 = shufflevector <8 x i32> %583, <8 x i32> undef, <8 x i32> zeroinitializer
  %585 = insertelement <8 x i32> undef, i32 %1319, i32 0
  %586 = shufflevector <8 x i32> %585, <8 x i32> undef, <8 x i32> zeroinitializer
  %587 = getelementptr i16, i16* %572, i64 16
  %588 = bitcast i16* %572 to <8 x i16>*
  %589 = load <8 x i16>, <8 x i16>* %588, align 2, !alias.scope !224
  %590 = zext <8 x i16> %589 to <8 x i32>
  %591 = mul nuw nsw <8 x i32> %584, %590
  %592 = getelementptr inbounds i16, i16* %572, i64 16
  %593 = bitcast i16* %592 to <8 x i16>*
  %594 = load <8 x i16>, <8 x i16>* %593, align 2, !alias.scope !224
  %595 = zext <8 x i16> %594 to <8 x i32>
  %596 = mul nuw nsw <8 x i32> %586, %595
  %597 = add nuw nsw <8 x i32> %591, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %598 = add nuw nsw <8 x i32> %597, %596
  %599 = lshr <8 x i32> %598, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %600 = trunc <8 x i32> %599 to <8 x i8>
  %601 = bitcast i8* %573 to <8 x i8>*
  store <8 x i8> %600, <8 x i8>* %601, align 16, !alias.scope !227, !noalias !224
  %602 = getelementptr i16, i16* %572, i64 8
  %603 = bitcast i16* %602 to <8 x i16>*
  %604 = load <8 x i16>, <8 x i16>* %603, align 2, !alias.scope !224
  %605 = zext <8 x i16> %604 to <8 x i32>
  %606 = mul nuw nsw <8 x i32> %584, %605
  %607 = getelementptr inbounds i16, i16* %572, i64 24
  %608 = bitcast i16* %607 to <8 x i16>*
  %609 = load <8 x i16>, <8 x i16>* %608, align 2, !alias.scope !224
  %610 = zext <8 x i16> %609 to <8 x i32>
  %611 = mul nuw nsw <8 x i32> %586, %610
  %612 = add nuw nsw <8 x i32> %606, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %613 = add nuw nsw <8 x i32> %612, %611
  %614 = lshr <8 x i32> %613, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %615 = trunc <8 x i32> %614 to <8 x i8>
  %616 = getelementptr inbounds [128 x i8], [128 x i8]* %10, i64 0, i64 104
  %617 = bitcast i8* %616 to <8 x i8>*
  store <8 x i8> %615, <8 x i8>* %617, align 8, !alias.scope !227, !noalias !224
  br label %650

618:                                              ; preds = %571, %618
  %619 = phi i64 [ %648, %618 ], [ 0, %571 ]
  %620 = phi i16* [ %647, %618 ], [ %572, %571 ]
  %621 = load i16, i16* %620, align 2
  %622 = zext i16 %621 to i32
  %623 = mul nuw nsw i32 %1317, %622
  %624 = getelementptr inbounds i16, i16* %620, i64 16
  %625 = load i16, i16* %624, align 2
  %626 = zext i16 %625 to i32
  %627 = mul nuw nsw i32 %1319, %626
  %628 = add nuw nsw i32 %623, 64
  %629 = add nuw nsw i32 %628, %627
  %630 = lshr i32 %629, 7
  %631 = trunc i32 %630 to i8
  %632 = getelementptr inbounds i8, i8* %573, i64 %619
  store i8 %631, i8* %632, align 2
  %633 = getelementptr inbounds i16, i16* %620, i64 1
  %634 = or i64 %619, 1
  %635 = load i16, i16* %633, align 2
  %636 = zext i16 %635 to i32
  %637 = mul nuw nsw i32 %1317, %636
  %638 = getelementptr inbounds i16, i16* %620, i64 17
  %639 = load i16, i16* %638, align 2
  %640 = zext i16 %639 to i32
  %641 = mul nuw nsw i32 %1319, %640
  %642 = add nuw nsw i32 %637, 64
  %643 = add nuw nsw i32 %642, %641
  %644 = lshr i32 %643, 7
  %645 = trunc i32 %644 to i8
  %646 = getelementptr inbounds i8, i8* %573, i64 %634
  store i8 %645, i8* %646, align 1
  %647 = getelementptr inbounds i16, i16* %620, i64 2
  %648 = add nuw nsw i64 %619, 2
  %649 = icmp eq i64 %648, 16
  br i1 %649, label %650, label %618, !llvm.loop !229

650:                                              ; preds = %618, %582
  %651 = phi i16* [ %587, %582 ], [ %647, %618 ]
  %652 = getelementptr inbounds [128 x i8], [128 x i8]* %10, i64 0, i64 112
  %653 = bitcast i16* %651 to i8*
  %654 = getelementptr inbounds [128 x i8], [128 x i8]* %10, i64 0, i64 112
  %655 = getelementptr inbounds [128 x i8], [128 x i8]* %10, i64 1, i64 0
  %656 = getelementptr i16, i16* %651, i64 32
  %657 = bitcast i16* %656 to i8*
  %658 = icmp ult i8* %654, %657
  %659 = icmp ugt i8* %655, %653
  %660 = and i1 %658, %659
  br i1 %660, label %696, label %661

661:                                              ; preds = %650
  %662 = insertelement <8 x i32> undef, i32 %1317, i32 0
  %663 = shufflevector <8 x i32> %662, <8 x i32> undef, <8 x i32> zeroinitializer
  %664 = insertelement <8 x i32> undef, i32 %1319, i32 0
  %665 = shufflevector <8 x i32> %664, <8 x i32> undef, <8 x i32> zeroinitializer
  %666 = bitcast i16* %651 to <8 x i16>*
  %667 = load <8 x i16>, <8 x i16>* %666, align 2, !alias.scope !230
  %668 = zext <8 x i16> %667 to <8 x i32>
  %669 = mul nuw nsw <8 x i32> %663, %668
  %670 = getelementptr inbounds i16, i16* %651, i64 16
  %671 = bitcast i16* %670 to <8 x i16>*
  %672 = load <8 x i16>, <8 x i16>* %671, align 2, !alias.scope !230
  %673 = zext <8 x i16> %672 to <8 x i32>
  %674 = mul nuw nsw <8 x i32> %665, %673
  %675 = add nuw nsw <8 x i32> %669, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %676 = add nuw nsw <8 x i32> %675, %674
  %677 = lshr <8 x i32> %676, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %678 = trunc <8 x i32> %677 to <8 x i8>
  %679 = bitcast i8* %652 to <8 x i8>*
  store <8 x i8> %678, <8 x i8>* %679, align 16, !alias.scope !233, !noalias !230
  %680 = getelementptr i16, i16* %651, i64 8
  %681 = bitcast i16* %680 to <8 x i16>*
  %682 = load <8 x i16>, <8 x i16>* %681, align 2, !alias.scope !230
  %683 = zext <8 x i16> %682 to <8 x i32>
  %684 = mul nuw nsw <8 x i32> %663, %683
  %685 = getelementptr inbounds i16, i16* %651, i64 24
  %686 = bitcast i16* %685 to <8 x i16>*
  %687 = load <8 x i16>, <8 x i16>* %686, align 2, !alias.scope !230
  %688 = zext <8 x i16> %687 to <8 x i32>
  %689 = mul nuw nsw <8 x i32> %665, %688
  %690 = add nuw nsw <8 x i32> %684, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %691 = add nuw nsw <8 x i32> %690, %689
  %692 = lshr <8 x i32> %691, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %693 = trunc <8 x i32> %692 to <8 x i8>
  %694 = getelementptr inbounds [128 x i8], [128 x i8]* %10, i64 0, i64 120
  %695 = bitcast i8* %694 to <8 x i8>*
  store <8 x i8> %693, <8 x i8>* %695, align 8, !alias.scope !233, !noalias !230
  br label %728

696:                                              ; preds = %650, %696
  %697 = phi i64 [ %726, %696 ], [ 0, %650 ]
  %698 = phi i16* [ %725, %696 ], [ %651, %650 ]
  %699 = load i16, i16* %698, align 2
  %700 = zext i16 %699 to i32
  %701 = mul nuw nsw i32 %1317, %700
  %702 = getelementptr inbounds i16, i16* %698, i64 16
  %703 = load i16, i16* %702, align 2
  %704 = zext i16 %703 to i32
  %705 = mul nuw nsw i32 %1319, %704
  %706 = add nuw nsw i32 %701, 64
  %707 = add nuw nsw i32 %706, %705
  %708 = lshr i32 %707, 7
  %709 = trunc i32 %708 to i8
  %710 = getelementptr inbounds i8, i8* %652, i64 %697
  store i8 %709, i8* %710, align 2
  %711 = getelementptr inbounds i16, i16* %698, i64 1
  %712 = or i64 %697, 1
  %713 = load i16, i16* %711, align 2
  %714 = zext i16 %713 to i32
  %715 = mul nuw nsw i32 %1317, %714
  %716 = getelementptr inbounds i16, i16* %698, i64 17
  %717 = load i16, i16* %716, align 2
  %718 = zext i16 %717 to i32
  %719 = mul nuw nsw i32 %1319, %718
  %720 = add nuw nsw i32 %715, 64
  %721 = add nuw nsw i32 %720, %719
  %722 = lshr i32 %721, 7
  %723 = trunc i32 %722 to i8
  %724 = getelementptr inbounds i8, i8* %652, i64 %712
  store i8 %723, i8* %724, align 1
  %725 = getelementptr inbounds i16, i16* %698, i64 2
  %726 = add nuw nsw i64 %697, 2
  %727 = icmp eq i64 %726, 16
  br i1 %727, label %728, label %696, !llvm.loop !235

728:                                              ; preds = %696, %661
  %729 = call i32 @vpx_variance16x8_c(i8* nonnull %12, i32 16, i8* %4, i32 %5, i32* %6)
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %12) #4
  call void @llvm.lifetime.end.p0i8(i64 288, i8* nonnull %9) #4
  ret i32 %729

730:                                              ; preds = %95, %730
  %731 = phi i64 [ %758, %730 ], [ 0, %95 ]
  %732 = phi i8* [ %749, %730 ], [ %97, %95 ]
  %733 = load i8, i8* %732, align 1
  %734 = zext i8 %733 to i32
  %735 = mul nuw nsw i32 %20, %734
  %736 = getelementptr inbounds i8, i8* %732, i64 1
  %737 = load i8, i8* %736, align 1
  %738 = zext i8 %737 to i32
  %739 = mul nuw nsw i32 %22, %738
  %740 = add nuw nsw i32 %735, 64
  %741 = add nuw nsw i32 %740, %739
  %742 = lshr i32 %741, 7
  %743 = trunc i32 %742 to i16
  %744 = getelementptr inbounds i16, i16* %98, i64 %731
  store i16 %743, i16* %744, align 4
  %745 = or i64 %731, 1
  %746 = load i8, i8* %736, align 1
  %747 = zext i8 %746 to i32
  %748 = mul nuw nsw i32 %20, %747
  %749 = getelementptr inbounds i8, i8* %732, i64 2
  %750 = load i8, i8* %749, align 1
  %751 = zext i8 %750 to i32
  %752 = mul nuw nsw i32 %22, %751
  %753 = add nuw nsw i32 %748, 64
  %754 = add nuw nsw i32 %753, %752
  %755 = lshr i32 %754, 7
  %756 = trunc i32 %755 to i16
  %757 = getelementptr inbounds i16, i16* %98, i64 %745
  store i16 %756, i16* %757, align 2
  %758 = add nuw nsw i64 %731, 2
  %759 = icmp eq i64 %758, 16
  br i1 %759, label %760, label %730, !llvm.loop !236

760:                                              ; preds = %730, %108
  %761 = phi i8* [ %113, %108 ], [ %749, %730 ]
  %762 = getelementptr inbounds i8, i8* %761, i64 %18
  %763 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 32
  %764 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 32
  %765 = bitcast i16* %764 to i8*
  %766 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 48
  %767 = bitcast i16* %766 to i8*
  %768 = add nuw nsw i64 %18, 17
  %769 = getelementptr i8, i8* %761, i64 %768
  %770 = icmp ugt i8* %769, %765
  %771 = icmp ult i8* %762, %767
  %772 = and i1 %770, %771
  br i1 %772, label %809, label %773

773:                                              ; preds = %760
  %774 = insertelement <8 x i32> undef, i32 %20, i32 0
  %775 = shufflevector <8 x i32> %774, <8 x i32> undef, <8 x i32> zeroinitializer
  %776 = insertelement <8 x i32> undef, i32 %22, i32 0
  %777 = shufflevector <8 x i32> %776, <8 x i32> undef, <8 x i32> zeroinitializer
  %778 = getelementptr i8, i8* %762, i64 16
  %779 = bitcast i8* %762 to <8 x i8>*
  %780 = load <8 x i8>, <8 x i8>* %779, align 1, !alias.scope !237
  %781 = zext <8 x i8> %780 to <8 x i32>
  %782 = mul nuw nsw <8 x i32> %775, %781
  %783 = getelementptr inbounds i8, i8* %762, i64 1
  %784 = bitcast i8* %783 to <8 x i8>*
  %785 = load <8 x i8>, <8 x i8>* %784, align 1, !alias.scope !237
  %786 = zext <8 x i8> %785 to <8 x i32>
  %787 = mul nuw nsw <8 x i32> %777, %786
  %788 = add nuw nsw <8 x i32> %782, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %789 = add nuw nsw <8 x i32> %788, %787
  %790 = lshr <8 x i32> %789, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %791 = trunc <8 x i32> %790 to <8 x i16>
  %792 = bitcast i16* %763 to <8 x i16>*
  store <8 x i16> %791, <8 x i16>* %792, align 16, !alias.scope !240, !noalias !237
  %793 = getelementptr i8, i8* %762, i64 8
  %794 = bitcast i8* %793 to <8 x i8>*
  %795 = load <8 x i8>, <8 x i8>* %794, align 1, !alias.scope !237
  %796 = zext <8 x i8> %795 to <8 x i32>
  %797 = mul nuw nsw <8 x i32> %775, %796
  %798 = getelementptr inbounds i8, i8* %793, i64 1
  %799 = bitcast i8* %798 to <8 x i8>*
  %800 = load <8 x i8>, <8 x i8>* %799, align 1, !alias.scope !237
  %801 = zext <8 x i8> %800 to <8 x i32>
  %802 = mul nuw nsw <8 x i32> %777, %801
  %803 = add nuw nsw <8 x i32> %797, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %804 = add nuw nsw <8 x i32> %803, %802
  %805 = lshr <8 x i32> %804, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %806 = trunc <8 x i32> %805 to <8 x i16>
  %807 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 40
  %808 = bitcast i16* %807 to <8 x i16>*
  store <8 x i16> %806, <8 x i16>* %808, align 16, !alias.scope !240, !noalias !237
  br label %839

809:                                              ; preds = %760, %809
  %810 = phi i64 [ %837, %809 ], [ 0, %760 ]
  %811 = phi i8* [ %828, %809 ], [ %762, %760 ]
  %812 = load i8, i8* %811, align 1
  %813 = zext i8 %812 to i32
  %814 = mul nuw nsw i32 %20, %813
  %815 = getelementptr inbounds i8, i8* %811, i64 1
  %816 = load i8, i8* %815, align 1
  %817 = zext i8 %816 to i32
  %818 = mul nuw nsw i32 %22, %817
  %819 = add nuw nsw i32 %814, 64
  %820 = add nuw nsw i32 %819, %818
  %821 = lshr i32 %820, 7
  %822 = trunc i32 %821 to i16
  %823 = getelementptr inbounds i16, i16* %763, i64 %810
  store i16 %822, i16* %823, align 4
  %824 = or i64 %810, 1
  %825 = load i8, i8* %815, align 1
  %826 = zext i8 %825 to i32
  %827 = mul nuw nsw i32 %20, %826
  %828 = getelementptr inbounds i8, i8* %811, i64 2
  %829 = load i8, i8* %828, align 1
  %830 = zext i8 %829 to i32
  %831 = mul nuw nsw i32 %22, %830
  %832 = add nuw nsw i32 %827, 64
  %833 = add nuw nsw i32 %832, %831
  %834 = lshr i32 %833, 7
  %835 = trunc i32 %834 to i16
  %836 = getelementptr inbounds i16, i16* %763, i64 %824
  store i16 %835, i16* %836, align 2
  %837 = add nuw nsw i64 %810, 2
  %838 = icmp eq i64 %837, 16
  br i1 %838, label %839, label %809, !llvm.loop !242

839:                                              ; preds = %809, %773
  %840 = phi i8* [ %778, %773 ], [ %828, %809 ]
  %841 = getelementptr inbounds i8, i8* %840, i64 %18
  %842 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 48
  %843 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 48
  %844 = bitcast i16* %843 to i8*
  %845 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 64
  %846 = bitcast i16* %845 to i8*
  %847 = add nuw nsw i64 %18, 17
  %848 = getelementptr i8, i8* %840, i64 %847
  %849 = icmp ugt i8* %848, %844
  %850 = icmp ult i8* %841, %846
  %851 = and i1 %849, %850
  br i1 %851, label %888, label %852

852:                                              ; preds = %839
  %853 = insertelement <8 x i32> undef, i32 %20, i32 0
  %854 = shufflevector <8 x i32> %853, <8 x i32> undef, <8 x i32> zeroinitializer
  %855 = insertelement <8 x i32> undef, i32 %22, i32 0
  %856 = shufflevector <8 x i32> %855, <8 x i32> undef, <8 x i32> zeroinitializer
  %857 = getelementptr i8, i8* %841, i64 16
  %858 = bitcast i8* %841 to <8 x i8>*
  %859 = load <8 x i8>, <8 x i8>* %858, align 1, !alias.scope !243
  %860 = zext <8 x i8> %859 to <8 x i32>
  %861 = mul nuw nsw <8 x i32> %854, %860
  %862 = getelementptr inbounds i8, i8* %841, i64 1
  %863 = bitcast i8* %862 to <8 x i8>*
  %864 = load <8 x i8>, <8 x i8>* %863, align 1, !alias.scope !243
  %865 = zext <8 x i8> %864 to <8 x i32>
  %866 = mul nuw nsw <8 x i32> %856, %865
  %867 = add nuw nsw <8 x i32> %861, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %868 = add nuw nsw <8 x i32> %867, %866
  %869 = lshr <8 x i32> %868, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %870 = trunc <8 x i32> %869 to <8 x i16>
  %871 = bitcast i16* %842 to <8 x i16>*
  store <8 x i16> %870, <8 x i16>* %871, align 16, !alias.scope !246, !noalias !243
  %872 = getelementptr i8, i8* %841, i64 8
  %873 = bitcast i8* %872 to <8 x i8>*
  %874 = load <8 x i8>, <8 x i8>* %873, align 1, !alias.scope !243
  %875 = zext <8 x i8> %874 to <8 x i32>
  %876 = mul nuw nsw <8 x i32> %854, %875
  %877 = getelementptr inbounds i8, i8* %872, i64 1
  %878 = bitcast i8* %877 to <8 x i8>*
  %879 = load <8 x i8>, <8 x i8>* %878, align 1, !alias.scope !243
  %880 = zext <8 x i8> %879 to <8 x i32>
  %881 = mul nuw nsw <8 x i32> %856, %880
  %882 = add nuw nsw <8 x i32> %876, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %883 = add nuw nsw <8 x i32> %882, %881
  %884 = lshr <8 x i32> %883, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %885 = trunc <8 x i32> %884 to <8 x i16>
  %886 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 56
  %887 = bitcast i16* %886 to <8 x i16>*
  store <8 x i16> %885, <8 x i16>* %887, align 16, !alias.scope !246, !noalias !243
  br label %918

888:                                              ; preds = %839, %888
  %889 = phi i64 [ %916, %888 ], [ 0, %839 ]
  %890 = phi i8* [ %907, %888 ], [ %841, %839 ]
  %891 = load i8, i8* %890, align 1
  %892 = zext i8 %891 to i32
  %893 = mul nuw nsw i32 %20, %892
  %894 = getelementptr inbounds i8, i8* %890, i64 1
  %895 = load i8, i8* %894, align 1
  %896 = zext i8 %895 to i32
  %897 = mul nuw nsw i32 %22, %896
  %898 = add nuw nsw i32 %893, 64
  %899 = add nuw nsw i32 %898, %897
  %900 = lshr i32 %899, 7
  %901 = trunc i32 %900 to i16
  %902 = getelementptr inbounds i16, i16* %842, i64 %889
  store i16 %901, i16* %902, align 4
  %903 = or i64 %889, 1
  %904 = load i8, i8* %894, align 1
  %905 = zext i8 %904 to i32
  %906 = mul nuw nsw i32 %20, %905
  %907 = getelementptr inbounds i8, i8* %890, i64 2
  %908 = load i8, i8* %907, align 1
  %909 = zext i8 %908 to i32
  %910 = mul nuw nsw i32 %22, %909
  %911 = add nuw nsw i32 %906, 64
  %912 = add nuw nsw i32 %911, %910
  %913 = lshr i32 %912, 7
  %914 = trunc i32 %913 to i16
  %915 = getelementptr inbounds i16, i16* %842, i64 %903
  store i16 %914, i16* %915, align 2
  %916 = add nuw nsw i64 %889, 2
  %917 = icmp eq i64 %916, 16
  br i1 %917, label %918, label %888, !llvm.loop !248

918:                                              ; preds = %888, %852
  %919 = phi i8* [ %857, %852 ], [ %907, %888 ]
  %920 = getelementptr inbounds i8, i8* %919, i64 %18
  %921 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 64
  %922 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 64
  %923 = bitcast i16* %922 to i8*
  %924 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 80
  %925 = bitcast i16* %924 to i8*
  %926 = add nuw nsw i64 %18, 17
  %927 = getelementptr i8, i8* %919, i64 %926
  %928 = icmp ugt i8* %927, %923
  %929 = icmp ult i8* %920, %925
  %930 = and i1 %928, %929
  br i1 %930, label %967, label %931

931:                                              ; preds = %918
  %932 = insertelement <8 x i32> undef, i32 %20, i32 0
  %933 = shufflevector <8 x i32> %932, <8 x i32> undef, <8 x i32> zeroinitializer
  %934 = insertelement <8 x i32> undef, i32 %22, i32 0
  %935 = shufflevector <8 x i32> %934, <8 x i32> undef, <8 x i32> zeroinitializer
  %936 = getelementptr i8, i8* %920, i64 16
  %937 = bitcast i8* %920 to <8 x i8>*
  %938 = load <8 x i8>, <8 x i8>* %937, align 1, !alias.scope !249
  %939 = zext <8 x i8> %938 to <8 x i32>
  %940 = mul nuw nsw <8 x i32> %933, %939
  %941 = getelementptr inbounds i8, i8* %920, i64 1
  %942 = bitcast i8* %941 to <8 x i8>*
  %943 = load <8 x i8>, <8 x i8>* %942, align 1, !alias.scope !249
  %944 = zext <8 x i8> %943 to <8 x i32>
  %945 = mul nuw nsw <8 x i32> %935, %944
  %946 = add nuw nsw <8 x i32> %940, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %947 = add nuw nsw <8 x i32> %946, %945
  %948 = lshr <8 x i32> %947, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %949 = trunc <8 x i32> %948 to <8 x i16>
  %950 = bitcast i16* %921 to <8 x i16>*
  store <8 x i16> %949, <8 x i16>* %950, align 16, !alias.scope !252, !noalias !249
  %951 = getelementptr i8, i8* %920, i64 8
  %952 = bitcast i8* %951 to <8 x i8>*
  %953 = load <8 x i8>, <8 x i8>* %952, align 1, !alias.scope !249
  %954 = zext <8 x i8> %953 to <8 x i32>
  %955 = mul nuw nsw <8 x i32> %933, %954
  %956 = getelementptr inbounds i8, i8* %951, i64 1
  %957 = bitcast i8* %956 to <8 x i8>*
  %958 = load <8 x i8>, <8 x i8>* %957, align 1, !alias.scope !249
  %959 = zext <8 x i8> %958 to <8 x i32>
  %960 = mul nuw nsw <8 x i32> %935, %959
  %961 = add nuw nsw <8 x i32> %955, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %962 = add nuw nsw <8 x i32> %961, %960
  %963 = lshr <8 x i32> %962, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %964 = trunc <8 x i32> %963 to <8 x i16>
  %965 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 72
  %966 = bitcast i16* %965 to <8 x i16>*
  store <8 x i16> %964, <8 x i16>* %966, align 16, !alias.scope !252, !noalias !249
  br label %997

967:                                              ; preds = %918, %967
  %968 = phi i64 [ %995, %967 ], [ 0, %918 ]
  %969 = phi i8* [ %986, %967 ], [ %920, %918 ]
  %970 = load i8, i8* %969, align 1
  %971 = zext i8 %970 to i32
  %972 = mul nuw nsw i32 %20, %971
  %973 = getelementptr inbounds i8, i8* %969, i64 1
  %974 = load i8, i8* %973, align 1
  %975 = zext i8 %974 to i32
  %976 = mul nuw nsw i32 %22, %975
  %977 = add nuw nsw i32 %972, 64
  %978 = add nuw nsw i32 %977, %976
  %979 = lshr i32 %978, 7
  %980 = trunc i32 %979 to i16
  %981 = getelementptr inbounds i16, i16* %921, i64 %968
  store i16 %980, i16* %981, align 4
  %982 = or i64 %968, 1
  %983 = load i8, i8* %973, align 1
  %984 = zext i8 %983 to i32
  %985 = mul nuw nsw i32 %20, %984
  %986 = getelementptr inbounds i8, i8* %969, i64 2
  %987 = load i8, i8* %986, align 1
  %988 = zext i8 %987 to i32
  %989 = mul nuw nsw i32 %22, %988
  %990 = add nuw nsw i32 %985, 64
  %991 = add nuw nsw i32 %990, %989
  %992 = lshr i32 %991, 7
  %993 = trunc i32 %992 to i16
  %994 = getelementptr inbounds i16, i16* %921, i64 %982
  store i16 %993, i16* %994, align 2
  %995 = add nuw nsw i64 %968, 2
  %996 = icmp eq i64 %995, 16
  br i1 %996, label %997, label %967, !llvm.loop !254

997:                                              ; preds = %967, %931
  %998 = phi i8* [ %936, %931 ], [ %986, %967 ]
  %999 = getelementptr inbounds i8, i8* %998, i64 %18
  %1000 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 80
  %1001 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 80
  %1002 = bitcast i16* %1001 to i8*
  %1003 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 96
  %1004 = bitcast i16* %1003 to i8*
  %1005 = add nuw nsw i64 %18, 17
  %1006 = getelementptr i8, i8* %998, i64 %1005
  %1007 = icmp ugt i8* %1006, %1002
  %1008 = icmp ult i8* %999, %1004
  %1009 = and i1 %1007, %1008
  br i1 %1009, label %1046, label %1010

1010:                                             ; preds = %997
  %1011 = insertelement <8 x i32> undef, i32 %20, i32 0
  %1012 = shufflevector <8 x i32> %1011, <8 x i32> undef, <8 x i32> zeroinitializer
  %1013 = insertelement <8 x i32> undef, i32 %22, i32 0
  %1014 = shufflevector <8 x i32> %1013, <8 x i32> undef, <8 x i32> zeroinitializer
  %1015 = getelementptr i8, i8* %999, i64 16
  %1016 = bitcast i8* %999 to <8 x i8>*
  %1017 = load <8 x i8>, <8 x i8>* %1016, align 1, !alias.scope !255
  %1018 = zext <8 x i8> %1017 to <8 x i32>
  %1019 = mul nuw nsw <8 x i32> %1012, %1018
  %1020 = getelementptr inbounds i8, i8* %999, i64 1
  %1021 = bitcast i8* %1020 to <8 x i8>*
  %1022 = load <8 x i8>, <8 x i8>* %1021, align 1, !alias.scope !255
  %1023 = zext <8 x i8> %1022 to <8 x i32>
  %1024 = mul nuw nsw <8 x i32> %1014, %1023
  %1025 = add nuw nsw <8 x i32> %1019, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %1026 = add nuw nsw <8 x i32> %1025, %1024
  %1027 = lshr <8 x i32> %1026, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %1028 = trunc <8 x i32> %1027 to <8 x i16>
  %1029 = bitcast i16* %1000 to <8 x i16>*
  store <8 x i16> %1028, <8 x i16>* %1029, align 16, !alias.scope !258, !noalias !255
  %1030 = getelementptr i8, i8* %999, i64 8
  %1031 = bitcast i8* %1030 to <8 x i8>*
  %1032 = load <8 x i8>, <8 x i8>* %1031, align 1, !alias.scope !255
  %1033 = zext <8 x i8> %1032 to <8 x i32>
  %1034 = mul nuw nsw <8 x i32> %1012, %1033
  %1035 = getelementptr inbounds i8, i8* %1030, i64 1
  %1036 = bitcast i8* %1035 to <8 x i8>*
  %1037 = load <8 x i8>, <8 x i8>* %1036, align 1, !alias.scope !255
  %1038 = zext <8 x i8> %1037 to <8 x i32>
  %1039 = mul nuw nsw <8 x i32> %1014, %1038
  %1040 = add nuw nsw <8 x i32> %1034, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %1041 = add nuw nsw <8 x i32> %1040, %1039
  %1042 = lshr <8 x i32> %1041, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %1043 = trunc <8 x i32> %1042 to <8 x i16>
  %1044 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 88
  %1045 = bitcast i16* %1044 to <8 x i16>*
  store <8 x i16> %1043, <8 x i16>* %1045, align 16, !alias.scope !258, !noalias !255
  br label %1076

1046:                                             ; preds = %997, %1046
  %1047 = phi i64 [ %1074, %1046 ], [ 0, %997 ]
  %1048 = phi i8* [ %1065, %1046 ], [ %999, %997 ]
  %1049 = load i8, i8* %1048, align 1
  %1050 = zext i8 %1049 to i32
  %1051 = mul nuw nsw i32 %20, %1050
  %1052 = getelementptr inbounds i8, i8* %1048, i64 1
  %1053 = load i8, i8* %1052, align 1
  %1054 = zext i8 %1053 to i32
  %1055 = mul nuw nsw i32 %22, %1054
  %1056 = add nuw nsw i32 %1051, 64
  %1057 = add nuw nsw i32 %1056, %1055
  %1058 = lshr i32 %1057, 7
  %1059 = trunc i32 %1058 to i16
  %1060 = getelementptr inbounds i16, i16* %1000, i64 %1047
  store i16 %1059, i16* %1060, align 4
  %1061 = or i64 %1047, 1
  %1062 = load i8, i8* %1052, align 1
  %1063 = zext i8 %1062 to i32
  %1064 = mul nuw nsw i32 %20, %1063
  %1065 = getelementptr inbounds i8, i8* %1048, i64 2
  %1066 = load i8, i8* %1065, align 1
  %1067 = zext i8 %1066 to i32
  %1068 = mul nuw nsw i32 %22, %1067
  %1069 = add nuw nsw i32 %1064, 64
  %1070 = add nuw nsw i32 %1069, %1068
  %1071 = lshr i32 %1070, 7
  %1072 = trunc i32 %1071 to i16
  %1073 = getelementptr inbounds i16, i16* %1000, i64 %1061
  store i16 %1072, i16* %1073, align 2
  %1074 = add nuw nsw i64 %1047, 2
  %1075 = icmp eq i64 %1074, 16
  br i1 %1075, label %1076, label %1046, !llvm.loop !260

1076:                                             ; preds = %1046, %1010
  %1077 = phi i8* [ %1015, %1010 ], [ %1065, %1046 ]
  %1078 = getelementptr inbounds i8, i8* %1077, i64 %18
  %1079 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 96
  %1080 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 96
  %1081 = bitcast i16* %1080 to i8*
  %1082 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 112
  %1083 = bitcast i16* %1082 to i8*
  %1084 = add nuw nsw i64 %18, 17
  %1085 = getelementptr i8, i8* %1077, i64 %1084
  %1086 = icmp ugt i8* %1085, %1081
  %1087 = icmp ult i8* %1078, %1083
  %1088 = and i1 %1086, %1087
  br i1 %1088, label %1125, label %1089

1089:                                             ; preds = %1076
  %1090 = insertelement <8 x i32> undef, i32 %20, i32 0
  %1091 = shufflevector <8 x i32> %1090, <8 x i32> undef, <8 x i32> zeroinitializer
  %1092 = insertelement <8 x i32> undef, i32 %22, i32 0
  %1093 = shufflevector <8 x i32> %1092, <8 x i32> undef, <8 x i32> zeroinitializer
  %1094 = getelementptr i8, i8* %1078, i64 16
  %1095 = bitcast i8* %1078 to <8 x i8>*
  %1096 = load <8 x i8>, <8 x i8>* %1095, align 1, !alias.scope !261
  %1097 = zext <8 x i8> %1096 to <8 x i32>
  %1098 = mul nuw nsw <8 x i32> %1091, %1097
  %1099 = getelementptr inbounds i8, i8* %1078, i64 1
  %1100 = bitcast i8* %1099 to <8 x i8>*
  %1101 = load <8 x i8>, <8 x i8>* %1100, align 1, !alias.scope !261
  %1102 = zext <8 x i8> %1101 to <8 x i32>
  %1103 = mul nuw nsw <8 x i32> %1093, %1102
  %1104 = add nuw nsw <8 x i32> %1098, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %1105 = add nuw nsw <8 x i32> %1104, %1103
  %1106 = lshr <8 x i32> %1105, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %1107 = trunc <8 x i32> %1106 to <8 x i16>
  %1108 = bitcast i16* %1079 to <8 x i16>*
  store <8 x i16> %1107, <8 x i16>* %1108, align 16, !alias.scope !264, !noalias !261
  %1109 = getelementptr i8, i8* %1078, i64 8
  %1110 = bitcast i8* %1109 to <8 x i8>*
  %1111 = load <8 x i8>, <8 x i8>* %1110, align 1, !alias.scope !261
  %1112 = zext <8 x i8> %1111 to <8 x i32>
  %1113 = mul nuw nsw <8 x i32> %1091, %1112
  %1114 = getelementptr inbounds i8, i8* %1109, i64 1
  %1115 = bitcast i8* %1114 to <8 x i8>*
  %1116 = load <8 x i8>, <8 x i8>* %1115, align 1, !alias.scope !261
  %1117 = zext <8 x i8> %1116 to <8 x i32>
  %1118 = mul nuw nsw <8 x i32> %1093, %1117
  %1119 = add nuw nsw <8 x i32> %1113, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %1120 = add nuw nsw <8 x i32> %1119, %1118
  %1121 = lshr <8 x i32> %1120, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %1122 = trunc <8 x i32> %1121 to <8 x i16>
  %1123 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 104
  %1124 = bitcast i16* %1123 to <8 x i16>*
  store <8 x i16> %1122, <8 x i16>* %1124, align 16, !alias.scope !264, !noalias !261
  br label %1155

1125:                                             ; preds = %1076, %1125
  %1126 = phi i64 [ %1153, %1125 ], [ 0, %1076 ]
  %1127 = phi i8* [ %1144, %1125 ], [ %1078, %1076 ]
  %1128 = load i8, i8* %1127, align 1
  %1129 = zext i8 %1128 to i32
  %1130 = mul nuw nsw i32 %20, %1129
  %1131 = getelementptr inbounds i8, i8* %1127, i64 1
  %1132 = load i8, i8* %1131, align 1
  %1133 = zext i8 %1132 to i32
  %1134 = mul nuw nsw i32 %22, %1133
  %1135 = add nuw nsw i32 %1130, 64
  %1136 = add nuw nsw i32 %1135, %1134
  %1137 = lshr i32 %1136, 7
  %1138 = trunc i32 %1137 to i16
  %1139 = getelementptr inbounds i16, i16* %1079, i64 %1126
  store i16 %1138, i16* %1139, align 4
  %1140 = or i64 %1126, 1
  %1141 = load i8, i8* %1131, align 1
  %1142 = zext i8 %1141 to i32
  %1143 = mul nuw nsw i32 %20, %1142
  %1144 = getelementptr inbounds i8, i8* %1127, i64 2
  %1145 = load i8, i8* %1144, align 1
  %1146 = zext i8 %1145 to i32
  %1147 = mul nuw nsw i32 %22, %1146
  %1148 = add nuw nsw i32 %1143, 64
  %1149 = add nuw nsw i32 %1148, %1147
  %1150 = lshr i32 %1149, 7
  %1151 = trunc i32 %1150 to i16
  %1152 = getelementptr inbounds i16, i16* %1079, i64 %1140
  store i16 %1151, i16* %1152, align 2
  %1153 = add nuw nsw i64 %1126, 2
  %1154 = icmp eq i64 %1153, 16
  br i1 %1154, label %1155, label %1125, !llvm.loop !266

1155:                                             ; preds = %1125, %1089
  %1156 = phi i8* [ %1094, %1089 ], [ %1144, %1125 ]
  %1157 = getelementptr inbounds i8, i8* %1156, i64 %18
  %1158 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 112
  %1159 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 112
  %1160 = bitcast i16* %1159 to i8*
  %1161 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 128
  %1162 = bitcast i16* %1161 to i8*
  %1163 = add nuw nsw i64 %18, 17
  %1164 = getelementptr i8, i8* %1156, i64 %1163
  %1165 = icmp ugt i8* %1164, %1160
  %1166 = icmp ult i8* %1157, %1162
  %1167 = and i1 %1165, %1166
  br i1 %1167, label %1204, label %1168

1168:                                             ; preds = %1155
  %1169 = insertelement <8 x i32> undef, i32 %20, i32 0
  %1170 = shufflevector <8 x i32> %1169, <8 x i32> undef, <8 x i32> zeroinitializer
  %1171 = insertelement <8 x i32> undef, i32 %22, i32 0
  %1172 = shufflevector <8 x i32> %1171, <8 x i32> undef, <8 x i32> zeroinitializer
  %1173 = getelementptr i8, i8* %1157, i64 16
  %1174 = bitcast i8* %1157 to <8 x i8>*
  %1175 = load <8 x i8>, <8 x i8>* %1174, align 1, !alias.scope !267
  %1176 = zext <8 x i8> %1175 to <8 x i32>
  %1177 = mul nuw nsw <8 x i32> %1170, %1176
  %1178 = getelementptr inbounds i8, i8* %1157, i64 1
  %1179 = bitcast i8* %1178 to <8 x i8>*
  %1180 = load <8 x i8>, <8 x i8>* %1179, align 1, !alias.scope !267
  %1181 = zext <8 x i8> %1180 to <8 x i32>
  %1182 = mul nuw nsw <8 x i32> %1172, %1181
  %1183 = add nuw nsw <8 x i32> %1177, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %1184 = add nuw nsw <8 x i32> %1183, %1182
  %1185 = lshr <8 x i32> %1184, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %1186 = trunc <8 x i32> %1185 to <8 x i16>
  %1187 = bitcast i16* %1158 to <8 x i16>*
  store <8 x i16> %1186, <8 x i16>* %1187, align 16, !alias.scope !270, !noalias !267
  %1188 = getelementptr i8, i8* %1157, i64 8
  %1189 = bitcast i8* %1188 to <8 x i8>*
  %1190 = load <8 x i8>, <8 x i8>* %1189, align 1, !alias.scope !267
  %1191 = zext <8 x i8> %1190 to <8 x i32>
  %1192 = mul nuw nsw <8 x i32> %1170, %1191
  %1193 = getelementptr inbounds i8, i8* %1188, i64 1
  %1194 = bitcast i8* %1193 to <8 x i8>*
  %1195 = load <8 x i8>, <8 x i8>* %1194, align 1, !alias.scope !267
  %1196 = zext <8 x i8> %1195 to <8 x i32>
  %1197 = mul nuw nsw <8 x i32> %1172, %1196
  %1198 = add nuw nsw <8 x i32> %1192, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %1199 = add nuw nsw <8 x i32> %1198, %1197
  %1200 = lshr <8 x i32> %1199, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %1201 = trunc <8 x i32> %1200 to <8 x i16>
  %1202 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 120
  %1203 = bitcast i16* %1202 to <8 x i16>*
  store <8 x i16> %1201, <8 x i16>* %1203, align 16, !alias.scope !270, !noalias !267
  br label %1234

1204:                                             ; preds = %1155, %1204
  %1205 = phi i64 [ %1232, %1204 ], [ 0, %1155 ]
  %1206 = phi i8* [ %1223, %1204 ], [ %1157, %1155 ]
  %1207 = load i8, i8* %1206, align 1
  %1208 = zext i8 %1207 to i32
  %1209 = mul nuw nsw i32 %20, %1208
  %1210 = getelementptr inbounds i8, i8* %1206, i64 1
  %1211 = load i8, i8* %1210, align 1
  %1212 = zext i8 %1211 to i32
  %1213 = mul nuw nsw i32 %22, %1212
  %1214 = add nuw nsw i32 %1209, 64
  %1215 = add nuw nsw i32 %1214, %1213
  %1216 = lshr i32 %1215, 7
  %1217 = trunc i32 %1216 to i16
  %1218 = getelementptr inbounds i16, i16* %1158, i64 %1205
  store i16 %1217, i16* %1218, align 4
  %1219 = or i64 %1205, 1
  %1220 = load i8, i8* %1210, align 1
  %1221 = zext i8 %1220 to i32
  %1222 = mul nuw nsw i32 %20, %1221
  %1223 = getelementptr inbounds i8, i8* %1206, i64 2
  %1224 = load i8, i8* %1223, align 1
  %1225 = zext i8 %1224 to i32
  %1226 = mul nuw nsw i32 %22, %1225
  %1227 = add nuw nsw i32 %1222, 64
  %1228 = add nuw nsw i32 %1227, %1226
  %1229 = lshr i32 %1228, 7
  %1230 = trunc i32 %1229 to i16
  %1231 = getelementptr inbounds i16, i16* %1158, i64 %1219
  store i16 %1230, i16* %1231, align 2
  %1232 = add nuw nsw i64 %1205, 2
  %1233 = icmp eq i64 %1232, 16
  br i1 %1233, label %1234, label %1204, !llvm.loop !272

1234:                                             ; preds = %1204, %1168
  %1235 = phi i8* [ %1173, %1168 ], [ %1223, %1204 ]
  %1236 = getelementptr inbounds i8, i8* %1235, i64 %18
  %1237 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 128
  %1238 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 128
  %1239 = bitcast i16* %1238 to i8*
  %1240 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 1, i64 0
  %1241 = bitcast i16* %1240 to i8*
  %1242 = add nuw nsw i64 %18, 17
  %1243 = getelementptr i8, i8* %1235, i64 %1242
  %1244 = icmp ugt i8* %1243, %1239
  %1245 = icmp ult i8* %1236, %1241
  %1246 = and i1 %1244, %1245
  br i1 %1246, label %1282, label %1247

1247:                                             ; preds = %1234
  %1248 = insertelement <8 x i32> undef, i32 %20, i32 0
  %1249 = shufflevector <8 x i32> %1248, <8 x i32> undef, <8 x i32> zeroinitializer
  %1250 = insertelement <8 x i32> undef, i32 %22, i32 0
  %1251 = shufflevector <8 x i32> %1250, <8 x i32> undef, <8 x i32> zeroinitializer
  %1252 = bitcast i8* %1236 to <8 x i8>*
  %1253 = load <8 x i8>, <8 x i8>* %1252, align 1, !alias.scope !273
  %1254 = zext <8 x i8> %1253 to <8 x i32>
  %1255 = mul nuw nsw <8 x i32> %1249, %1254
  %1256 = getelementptr inbounds i8, i8* %1236, i64 1
  %1257 = bitcast i8* %1256 to <8 x i8>*
  %1258 = load <8 x i8>, <8 x i8>* %1257, align 1, !alias.scope !273
  %1259 = zext <8 x i8> %1258 to <8 x i32>
  %1260 = mul nuw nsw <8 x i32> %1251, %1259
  %1261 = add nuw nsw <8 x i32> %1255, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %1262 = add nuw nsw <8 x i32> %1261, %1260
  %1263 = lshr <8 x i32> %1262, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %1264 = trunc <8 x i32> %1263 to <8 x i16>
  %1265 = bitcast i16* %1237 to <8 x i16>*
  store <8 x i16> %1264, <8 x i16>* %1265, align 16, !alias.scope !276, !noalias !273
  %1266 = getelementptr i8, i8* %1236, i64 8
  %1267 = bitcast i8* %1266 to <8 x i8>*
  %1268 = load <8 x i8>, <8 x i8>* %1267, align 1, !alias.scope !273
  %1269 = zext <8 x i8> %1268 to <8 x i32>
  %1270 = mul nuw nsw <8 x i32> %1249, %1269
  %1271 = getelementptr inbounds i8, i8* %1266, i64 1
  %1272 = bitcast i8* %1271 to <8 x i8>*
  %1273 = load <8 x i8>, <8 x i8>* %1272, align 1, !alias.scope !273
  %1274 = zext <8 x i8> %1273 to <8 x i32>
  %1275 = mul nuw nsw <8 x i32> %1251, %1274
  %1276 = add nuw nsw <8 x i32> %1270, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %1277 = add nuw nsw <8 x i32> %1276, %1275
  %1278 = lshr <8 x i32> %1277, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %1279 = trunc <8 x i32> %1278 to <8 x i16>
  %1280 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 136
  %1281 = bitcast i16* %1280 to <8 x i16>*
  store <8 x i16> %1279, <8 x i16>* %1281, align 16, !alias.scope !276, !noalias !273
  br label %1312

1282:                                             ; preds = %1234, %1282
  %1283 = phi i64 [ %1310, %1282 ], [ 0, %1234 ]
  %1284 = phi i8* [ %1301, %1282 ], [ %1236, %1234 ]
  %1285 = load i8, i8* %1284, align 1
  %1286 = zext i8 %1285 to i32
  %1287 = mul nuw nsw i32 %20, %1286
  %1288 = getelementptr inbounds i8, i8* %1284, i64 1
  %1289 = load i8, i8* %1288, align 1
  %1290 = zext i8 %1289 to i32
  %1291 = mul nuw nsw i32 %22, %1290
  %1292 = add nuw nsw i32 %1287, 64
  %1293 = add nuw nsw i32 %1292, %1291
  %1294 = lshr i32 %1293, 7
  %1295 = trunc i32 %1294 to i16
  %1296 = getelementptr inbounds i16, i16* %1237, i64 %1283
  store i16 %1295, i16* %1296, align 4
  %1297 = or i64 %1283, 1
  %1298 = load i8, i8* %1288, align 1
  %1299 = zext i8 %1298 to i32
  %1300 = mul nuw nsw i32 %20, %1299
  %1301 = getelementptr inbounds i8, i8* %1284, i64 2
  %1302 = load i8, i8* %1301, align 1
  %1303 = zext i8 %1302 to i32
  %1304 = mul nuw nsw i32 %22, %1303
  %1305 = add nuw nsw i32 %1300, 64
  %1306 = add nuw nsw i32 %1305, %1304
  %1307 = lshr i32 %1306, 7
  %1308 = trunc i32 %1307 to i16
  %1309 = getelementptr inbounds i16, i16* %1237, i64 %1297
  store i16 %1308, i16* %1309, align 2
  %1310 = add nuw nsw i64 %1283, 2
  %1311 = icmp eq i64 %1310, 16
  br i1 %1311, label %1312, label %1282, !llvm.loop !278

1312:                                             ; preds = %1282, %1247
  %1313 = sext i32 %3 to i64
  %1314 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %1313, i64 0
  %1315 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %1313, i64 1
  %1316 = load i8, i8* %1314, align 2
  %1317 = zext i8 %1316 to i32
  %1318 = load i8, i8* %1315, align 1
  %1319 = zext i8 %1318 to i32
  %1320 = getelementptr inbounds [128 x i8], [128 x i8]* %10, i64 0, i64 16
  %1321 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 32
  %1322 = bitcast i16* %1321 to i8*
  %1323 = icmp ult i8* %11, %1322
  %1324 = icmp ugt i8* %1320, %9
  %1325 = and i1 %1323, %1324
  br i1 %1325, label %144, label %1326

1326:                                             ; preds = %1312
  %1327 = insertelement <8 x i32> undef, i32 %1317, i32 0
  %1328 = shufflevector <8 x i32> %1327, <8 x i32> undef, <8 x i32> zeroinitializer
  %1329 = insertelement <8 x i32> undef, i32 %1319, i32 0
  %1330 = shufflevector <8 x i32> %1329, <8 x i32> undef, <8 x i32> zeroinitializer
  %1331 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 16
  %1332 = bitcast [144 x i16]* %8 to <8 x i16>*
  %1333 = load <8 x i16>, <8 x i16>* %1332, align 16, !alias.scope !279
  %1334 = zext <8 x i16> %1333 to <8 x i32>
  %1335 = mul nuw nsw <8 x i32> %1328, %1334
  %1336 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 16
  %1337 = bitcast i16* %1336 to <8 x i16>*
  %1338 = load <8 x i16>, <8 x i16>* %1337, align 16, !alias.scope !279
  %1339 = zext <8 x i16> %1338 to <8 x i32>
  %1340 = mul nuw nsw <8 x i32> %1330, %1339
  %1341 = add nuw nsw <8 x i32> %1335, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %1342 = add nuw nsw <8 x i32> %1341, %1340
  %1343 = lshr <8 x i32> %1342, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %1344 = trunc <8 x i32> %1343 to <8 x i8>
  %1345 = bitcast [128 x i8]* %10 to <8 x i8>*
  store <8 x i8> %1344, <8 x i8>* %1345, align 16, !alias.scope !282, !noalias !279
  %1346 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 8
  %1347 = bitcast i16* %1346 to <8 x i16>*
  %1348 = load <8 x i16>, <8 x i16>* %1347, align 16, !alias.scope !279
  %1349 = zext <8 x i16> %1348 to <8 x i32>
  %1350 = mul nuw nsw <8 x i32> %1328, %1349
  %1351 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 24
  %1352 = bitcast i16* %1351 to <8 x i16>*
  %1353 = load <8 x i16>, <8 x i16>* %1352, align 16, !alias.scope !279
  %1354 = zext <8 x i16> %1353 to <8 x i32>
  %1355 = mul nuw nsw <8 x i32> %1330, %1354
  %1356 = add nuw nsw <8 x i32> %1350, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %1357 = add nuw nsw <8 x i32> %1356, %1355
  %1358 = lshr <8 x i32> %1357, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %1359 = trunc <8 x i32> %1358 to <8 x i8>
  %1360 = getelementptr inbounds [128 x i8], [128 x i8]* %10, i64 0, i64 8
  %1361 = bitcast i8* %1360 to <8 x i8>*
  store <8 x i8> %1359, <8 x i8>* %1361, align 8, !alias.scope !282, !noalias !279
  br label %176
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_sub_pixel_avg_variance16x8_c(i8* nocapture readonly, i32, i32, i32, i8* nocapture readonly, i32, i32* nocapture, i8* nocapture readonly) local_unnamed_addr #2 {
  %9 = alloca [144 x i16], align 16
  %10 = bitcast [144 x i16]* %9 to i8*
  %11 = alloca [128 x i8], align 16
  %12 = getelementptr inbounds [128 x i8], [128 x i8]* %11, i64 0, i64 0
  %13 = alloca [128 x i8], align 16
  call void @llvm.lifetime.start.p0i8(i64 288, i8* nonnull %10) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %10, i8 -86, i64 288, i1 false)
  %14 = getelementptr inbounds [128 x i8], [128 x i8]* %11, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %14) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %14, i8 -86, i64 128, i1 false)
  %15 = getelementptr inbounds [128 x i8], [128 x i8]* %13, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %15) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %15, i8 -86, i64 128, i1 false)
  %16 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 0
  %17 = sext i32 %2 to i64
  %18 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %17, i64 0
  %19 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %17, i64 1
  %20 = add i32 %1, -16
  %21 = zext i32 %20 to i64
  %22 = load i8, i8* %18, align 2
  %23 = zext i8 %22 to i32
  %24 = load i8, i8* %19, align 1
  %25 = zext i8 %24 to i32
  %26 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 16
  %27 = bitcast i16* %26 to i8*
  %28 = getelementptr i8, i8* %0, i64 17
  %29 = icmp ugt i8* %28, %10
  %30 = icmp ugt i8* %27, %0
  %31 = and i1 %29, %30
  br i1 %31, label %68, label %32

32:                                               ; preds = %8
  %33 = insertelement <8 x i32> undef, i32 %23, i32 0
  %34 = shufflevector <8 x i32> %33, <8 x i32> undef, <8 x i32> zeroinitializer
  %35 = insertelement <8 x i32> undef, i32 %25, i32 0
  %36 = shufflevector <8 x i32> %35, <8 x i32> undef, <8 x i32> zeroinitializer
  %37 = getelementptr i8, i8* %0, i64 16
  %38 = bitcast i8* %0 to <8 x i8>*
  %39 = load <8 x i8>, <8 x i8>* %38, align 1, !alias.scope !284
  %40 = zext <8 x i8> %39 to <8 x i32>
  %41 = mul nuw nsw <8 x i32> %34, %40
  %42 = getelementptr inbounds i8, i8* %0, i64 1
  %43 = bitcast i8* %42 to <8 x i8>*
  %44 = load <8 x i8>, <8 x i8>* %43, align 1, !alias.scope !284
  %45 = zext <8 x i8> %44 to <8 x i32>
  %46 = mul nuw nsw <8 x i32> %36, %45
  %47 = add nuw nsw <8 x i32> %41, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %48 = add nuw nsw <8 x i32> %47, %46
  %49 = lshr <8 x i32> %48, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %50 = trunc <8 x i32> %49 to <8 x i16>
  %51 = bitcast [144 x i16]* %9 to <8 x i16>*
  store <8 x i16> %50, <8 x i16>* %51, align 16, !alias.scope !287, !noalias !284
  %52 = getelementptr i8, i8* %0, i64 8
  %53 = bitcast i8* %52 to <8 x i8>*
  %54 = load <8 x i8>, <8 x i8>* %53, align 1, !alias.scope !284
  %55 = zext <8 x i8> %54 to <8 x i32>
  %56 = mul nuw nsw <8 x i32> %34, %55
  %57 = getelementptr inbounds i8, i8* %0, i64 9
  %58 = bitcast i8* %57 to <8 x i8>*
  %59 = load <8 x i8>, <8 x i8>* %58, align 1, !alias.scope !284
  %60 = zext <8 x i8> %59 to <8 x i32>
  %61 = mul nuw nsw <8 x i32> %36, %60
  %62 = add nuw nsw <8 x i32> %56, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %63 = add nuw nsw <8 x i32> %62, %61
  %64 = lshr <8 x i32> %63, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %65 = trunc <8 x i32> %64 to <8 x i16>
  %66 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 8
  %67 = bitcast i16* %66 to <8 x i16>*
  store <8 x i16> %65, <8 x i16>* %67, align 16, !alias.scope !287, !noalias !284
  br label %98

68:                                               ; preds = %8, %68
  %69 = phi i64 [ %96, %68 ], [ 0, %8 ]
  %70 = phi i8* [ %87, %68 ], [ %0, %8 ]
  %71 = load i8, i8* %70, align 1
  %72 = zext i8 %71 to i32
  %73 = mul nuw nsw i32 %23, %72
  %74 = getelementptr inbounds i8, i8* %70, i64 1
  %75 = load i8, i8* %74, align 1
  %76 = zext i8 %75 to i32
  %77 = mul nuw nsw i32 %25, %76
  %78 = add nuw nsw i32 %73, 64
  %79 = add nuw nsw i32 %78, %77
  %80 = lshr i32 %79, 7
  %81 = trunc i32 %80 to i16
  %82 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 %69
  store i16 %81, i16* %82, align 4
  %83 = or i64 %69, 1
  %84 = load i8, i8* %74, align 1
  %85 = zext i8 %84 to i32
  %86 = mul nuw nsw i32 %23, %85
  %87 = getelementptr inbounds i8, i8* %70, i64 2
  %88 = load i8, i8* %87, align 1
  %89 = zext i8 %88 to i32
  %90 = mul nuw nsw i32 %25, %89
  %91 = add nuw nsw i32 %86, 64
  %92 = add nuw nsw i32 %91, %90
  %93 = lshr i32 %92, 7
  %94 = trunc i32 %93 to i16
  %95 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 %83
  store i16 %94, i16* %95, align 2
  %96 = add nuw nsw i64 %69, 2
  %97 = icmp eq i64 %96, 16
  br i1 %97, label %98, label %68, !llvm.loop !289

98:                                               ; preds = %68, %32
  %99 = phi i8* [ %37, %32 ], [ %87, %68 ]
  %100 = getelementptr inbounds i8, i8* %99, i64 %21
  %101 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 16
  %102 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 16
  %103 = bitcast i16* %102 to i8*
  %104 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 32
  %105 = bitcast i16* %104 to i8*
  %106 = add nuw nsw i64 %21, 17
  %107 = getelementptr i8, i8* %99, i64 %106
  %108 = icmp ugt i8* %107, %103
  %109 = icmp ult i8* %100, %105
  %110 = and i1 %108, %109
  br i1 %110, label %842, label %111

111:                                              ; preds = %98
  %112 = insertelement <8 x i32> undef, i32 %23, i32 0
  %113 = shufflevector <8 x i32> %112, <8 x i32> undef, <8 x i32> zeroinitializer
  %114 = insertelement <8 x i32> undef, i32 %25, i32 0
  %115 = shufflevector <8 x i32> %114, <8 x i32> undef, <8 x i32> zeroinitializer
  %116 = getelementptr i8, i8* %100, i64 16
  %117 = bitcast i8* %100 to <8 x i8>*
  %118 = load <8 x i8>, <8 x i8>* %117, align 1, !alias.scope !290
  %119 = zext <8 x i8> %118 to <8 x i32>
  %120 = mul nuw nsw <8 x i32> %113, %119
  %121 = getelementptr inbounds i8, i8* %100, i64 1
  %122 = bitcast i8* %121 to <8 x i8>*
  %123 = load <8 x i8>, <8 x i8>* %122, align 1, !alias.scope !290
  %124 = zext <8 x i8> %123 to <8 x i32>
  %125 = mul nuw nsw <8 x i32> %115, %124
  %126 = add nuw nsw <8 x i32> %120, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %127 = add nuw nsw <8 x i32> %126, %125
  %128 = lshr <8 x i32> %127, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %129 = trunc <8 x i32> %128 to <8 x i16>
  %130 = bitcast i16* %101 to <8 x i16>*
  store <8 x i16> %129, <8 x i16>* %130, align 16, !alias.scope !293, !noalias !290
  %131 = getelementptr i8, i8* %100, i64 8
  %132 = bitcast i8* %131 to <8 x i8>*
  %133 = load <8 x i8>, <8 x i8>* %132, align 1, !alias.scope !290
  %134 = zext <8 x i8> %133 to <8 x i32>
  %135 = mul nuw nsw <8 x i32> %113, %134
  %136 = getelementptr inbounds i8, i8* %131, i64 1
  %137 = bitcast i8* %136 to <8 x i8>*
  %138 = load <8 x i8>, <8 x i8>* %137, align 1, !alias.scope !290
  %139 = zext <8 x i8> %138 to <8 x i32>
  %140 = mul nuw nsw <8 x i32> %115, %139
  %141 = add nuw nsw <8 x i32> %135, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %142 = add nuw nsw <8 x i32> %141, %140
  %143 = lshr <8 x i32> %142, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %144 = trunc <8 x i32> %143 to <8 x i16>
  %145 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 24
  %146 = bitcast i16* %145 to <8 x i16>*
  store <8 x i16> %144, <8 x i16>* %146, align 16, !alias.scope !293, !noalias !290
  br label %872

147:                                              ; preds = %1424, %147
  %148 = phi i64 [ %177, %147 ], [ 0, %1424 ]
  %149 = phi i16* [ %176, %147 ], [ %16, %1424 ]
  %150 = load i16, i16* %149, align 2
  %151 = zext i16 %150 to i32
  %152 = mul nuw nsw i32 %1429, %151
  %153 = getelementptr inbounds i16, i16* %149, i64 16
  %154 = load i16, i16* %153, align 2
  %155 = zext i16 %154 to i32
  %156 = mul nuw nsw i32 %1431, %155
  %157 = add nuw nsw i32 %152, 64
  %158 = add nuw nsw i32 %157, %156
  %159 = lshr i32 %158, 7
  %160 = trunc i32 %159 to i8
  %161 = getelementptr inbounds [128 x i8], [128 x i8]* %11, i64 0, i64 %148
  store i8 %160, i8* %161, align 2
  %162 = getelementptr inbounds i16, i16* %149, i64 1
  %163 = or i64 %148, 1
  %164 = load i16, i16* %162, align 2
  %165 = zext i16 %164 to i32
  %166 = mul nuw nsw i32 %1429, %165
  %167 = getelementptr inbounds i16, i16* %149, i64 17
  %168 = load i16, i16* %167, align 2
  %169 = zext i16 %168 to i32
  %170 = mul nuw nsw i32 %1431, %169
  %171 = add nuw nsw i32 %166, 64
  %172 = add nuw nsw i32 %171, %170
  %173 = lshr i32 %172, 7
  %174 = trunc i32 %173 to i8
  %175 = getelementptr inbounds [128 x i8], [128 x i8]* %11, i64 0, i64 %163
  store i8 %174, i8* %175, align 1
  %176 = getelementptr inbounds i16, i16* %149, i64 2
  %177 = add nuw nsw i64 %148, 2
  %178 = icmp eq i64 %177, 16
  br i1 %178, label %179, label %147, !llvm.loop !295

179:                                              ; preds = %147, %1438
  %180 = phi i16* [ %1443, %1438 ], [ %176, %147 ]
  %181 = getelementptr inbounds [128 x i8], [128 x i8]* %11, i64 0, i64 16
  %182 = bitcast i16* %180 to i8*
  %183 = getelementptr inbounds [128 x i8], [128 x i8]* %11, i64 0, i64 16
  %184 = getelementptr inbounds [128 x i8], [128 x i8]* %11, i64 0, i64 32
  %185 = getelementptr i16, i16* %180, i64 32
  %186 = bitcast i16* %185 to i8*
  %187 = icmp ult i8* %183, %186
  %188 = icmp ugt i8* %184, %182
  %189 = and i1 %187, %188
  br i1 %189, label %226, label %190

190:                                              ; preds = %179
  %191 = insertelement <8 x i32> undef, i32 %1429, i32 0
  %192 = shufflevector <8 x i32> %191, <8 x i32> undef, <8 x i32> zeroinitializer
  %193 = insertelement <8 x i32> undef, i32 %1431, i32 0
  %194 = shufflevector <8 x i32> %193, <8 x i32> undef, <8 x i32> zeroinitializer
  %195 = getelementptr i16, i16* %180, i64 16
  %196 = bitcast i16* %180 to <8 x i16>*
  %197 = load <8 x i16>, <8 x i16>* %196, align 2, !alias.scope !296
  %198 = zext <8 x i16> %197 to <8 x i32>
  %199 = mul nuw nsw <8 x i32> %192, %198
  %200 = getelementptr inbounds i16, i16* %180, i64 16
  %201 = bitcast i16* %200 to <8 x i16>*
  %202 = load <8 x i16>, <8 x i16>* %201, align 2, !alias.scope !296
  %203 = zext <8 x i16> %202 to <8 x i32>
  %204 = mul nuw nsw <8 x i32> %194, %203
  %205 = add nuw nsw <8 x i32> %199, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %206 = add nuw nsw <8 x i32> %205, %204
  %207 = lshr <8 x i32> %206, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %208 = trunc <8 x i32> %207 to <8 x i8>
  %209 = bitcast i8* %181 to <8 x i8>*
  store <8 x i8> %208, <8 x i8>* %209, align 16, !alias.scope !299, !noalias !296
  %210 = getelementptr i16, i16* %180, i64 8
  %211 = bitcast i16* %210 to <8 x i16>*
  %212 = load <8 x i16>, <8 x i16>* %211, align 2, !alias.scope !296
  %213 = zext <8 x i16> %212 to <8 x i32>
  %214 = mul nuw nsw <8 x i32> %192, %213
  %215 = getelementptr inbounds i16, i16* %180, i64 24
  %216 = bitcast i16* %215 to <8 x i16>*
  %217 = load <8 x i16>, <8 x i16>* %216, align 2, !alias.scope !296
  %218 = zext <8 x i16> %217 to <8 x i32>
  %219 = mul nuw nsw <8 x i32> %194, %218
  %220 = add nuw nsw <8 x i32> %214, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %221 = add nuw nsw <8 x i32> %220, %219
  %222 = lshr <8 x i32> %221, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %223 = trunc <8 x i32> %222 to <8 x i8>
  %224 = getelementptr inbounds [128 x i8], [128 x i8]* %11, i64 0, i64 24
  %225 = bitcast i8* %224 to <8 x i8>*
  store <8 x i8> %223, <8 x i8>* %225, align 8, !alias.scope !299, !noalias !296
  br label %258

226:                                              ; preds = %179, %226
  %227 = phi i64 [ %256, %226 ], [ 0, %179 ]
  %228 = phi i16* [ %255, %226 ], [ %180, %179 ]
  %229 = load i16, i16* %228, align 2
  %230 = zext i16 %229 to i32
  %231 = mul nuw nsw i32 %1429, %230
  %232 = getelementptr inbounds i16, i16* %228, i64 16
  %233 = load i16, i16* %232, align 2
  %234 = zext i16 %233 to i32
  %235 = mul nuw nsw i32 %1431, %234
  %236 = add nuw nsw i32 %231, 64
  %237 = add nuw nsw i32 %236, %235
  %238 = lshr i32 %237, 7
  %239 = trunc i32 %238 to i8
  %240 = getelementptr inbounds i8, i8* %181, i64 %227
  store i8 %239, i8* %240, align 2
  %241 = getelementptr inbounds i16, i16* %228, i64 1
  %242 = or i64 %227, 1
  %243 = load i16, i16* %241, align 2
  %244 = zext i16 %243 to i32
  %245 = mul nuw nsw i32 %1429, %244
  %246 = getelementptr inbounds i16, i16* %228, i64 17
  %247 = load i16, i16* %246, align 2
  %248 = zext i16 %247 to i32
  %249 = mul nuw nsw i32 %1431, %248
  %250 = add nuw nsw i32 %245, 64
  %251 = add nuw nsw i32 %250, %249
  %252 = lshr i32 %251, 7
  %253 = trunc i32 %252 to i8
  %254 = getelementptr inbounds i8, i8* %181, i64 %242
  store i8 %253, i8* %254, align 1
  %255 = getelementptr inbounds i16, i16* %228, i64 2
  %256 = add nuw nsw i64 %227, 2
  %257 = icmp eq i64 %256, 16
  br i1 %257, label %258, label %226, !llvm.loop !301

258:                                              ; preds = %226, %190
  %259 = phi i16* [ %195, %190 ], [ %255, %226 ]
  %260 = getelementptr inbounds [128 x i8], [128 x i8]* %11, i64 0, i64 32
  %261 = bitcast i16* %259 to i8*
  %262 = getelementptr inbounds [128 x i8], [128 x i8]* %11, i64 0, i64 32
  %263 = getelementptr inbounds [128 x i8], [128 x i8]* %11, i64 0, i64 48
  %264 = getelementptr i16, i16* %259, i64 32
  %265 = bitcast i16* %264 to i8*
  %266 = icmp ult i8* %262, %265
  %267 = icmp ugt i8* %263, %261
  %268 = and i1 %266, %267
  br i1 %268, label %305, label %269

269:                                              ; preds = %258
  %270 = insertelement <8 x i32> undef, i32 %1429, i32 0
  %271 = shufflevector <8 x i32> %270, <8 x i32> undef, <8 x i32> zeroinitializer
  %272 = insertelement <8 x i32> undef, i32 %1431, i32 0
  %273 = shufflevector <8 x i32> %272, <8 x i32> undef, <8 x i32> zeroinitializer
  %274 = getelementptr i16, i16* %259, i64 16
  %275 = bitcast i16* %259 to <8 x i16>*
  %276 = load <8 x i16>, <8 x i16>* %275, align 2, !alias.scope !302
  %277 = zext <8 x i16> %276 to <8 x i32>
  %278 = mul nuw nsw <8 x i32> %271, %277
  %279 = getelementptr inbounds i16, i16* %259, i64 16
  %280 = bitcast i16* %279 to <8 x i16>*
  %281 = load <8 x i16>, <8 x i16>* %280, align 2, !alias.scope !302
  %282 = zext <8 x i16> %281 to <8 x i32>
  %283 = mul nuw nsw <8 x i32> %273, %282
  %284 = add nuw nsw <8 x i32> %278, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %285 = add nuw nsw <8 x i32> %284, %283
  %286 = lshr <8 x i32> %285, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %287 = trunc <8 x i32> %286 to <8 x i8>
  %288 = bitcast i8* %260 to <8 x i8>*
  store <8 x i8> %287, <8 x i8>* %288, align 16, !alias.scope !305, !noalias !302
  %289 = getelementptr i16, i16* %259, i64 8
  %290 = bitcast i16* %289 to <8 x i16>*
  %291 = load <8 x i16>, <8 x i16>* %290, align 2, !alias.scope !302
  %292 = zext <8 x i16> %291 to <8 x i32>
  %293 = mul nuw nsw <8 x i32> %271, %292
  %294 = getelementptr inbounds i16, i16* %259, i64 24
  %295 = bitcast i16* %294 to <8 x i16>*
  %296 = load <8 x i16>, <8 x i16>* %295, align 2, !alias.scope !302
  %297 = zext <8 x i16> %296 to <8 x i32>
  %298 = mul nuw nsw <8 x i32> %273, %297
  %299 = add nuw nsw <8 x i32> %293, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %300 = add nuw nsw <8 x i32> %299, %298
  %301 = lshr <8 x i32> %300, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %302 = trunc <8 x i32> %301 to <8 x i8>
  %303 = getelementptr inbounds [128 x i8], [128 x i8]* %11, i64 0, i64 40
  %304 = bitcast i8* %303 to <8 x i8>*
  store <8 x i8> %302, <8 x i8>* %304, align 8, !alias.scope !305, !noalias !302
  br label %337

305:                                              ; preds = %258, %305
  %306 = phi i64 [ %335, %305 ], [ 0, %258 ]
  %307 = phi i16* [ %334, %305 ], [ %259, %258 ]
  %308 = load i16, i16* %307, align 2
  %309 = zext i16 %308 to i32
  %310 = mul nuw nsw i32 %1429, %309
  %311 = getelementptr inbounds i16, i16* %307, i64 16
  %312 = load i16, i16* %311, align 2
  %313 = zext i16 %312 to i32
  %314 = mul nuw nsw i32 %1431, %313
  %315 = add nuw nsw i32 %310, 64
  %316 = add nuw nsw i32 %315, %314
  %317 = lshr i32 %316, 7
  %318 = trunc i32 %317 to i8
  %319 = getelementptr inbounds i8, i8* %260, i64 %306
  store i8 %318, i8* %319, align 2
  %320 = getelementptr inbounds i16, i16* %307, i64 1
  %321 = or i64 %306, 1
  %322 = load i16, i16* %320, align 2
  %323 = zext i16 %322 to i32
  %324 = mul nuw nsw i32 %1429, %323
  %325 = getelementptr inbounds i16, i16* %307, i64 17
  %326 = load i16, i16* %325, align 2
  %327 = zext i16 %326 to i32
  %328 = mul nuw nsw i32 %1431, %327
  %329 = add nuw nsw i32 %324, 64
  %330 = add nuw nsw i32 %329, %328
  %331 = lshr i32 %330, 7
  %332 = trunc i32 %331 to i8
  %333 = getelementptr inbounds i8, i8* %260, i64 %321
  store i8 %332, i8* %333, align 1
  %334 = getelementptr inbounds i16, i16* %307, i64 2
  %335 = add nuw nsw i64 %306, 2
  %336 = icmp eq i64 %335, 16
  br i1 %336, label %337, label %305, !llvm.loop !307

337:                                              ; preds = %305, %269
  %338 = phi i16* [ %274, %269 ], [ %334, %305 ]
  %339 = getelementptr inbounds [128 x i8], [128 x i8]* %11, i64 0, i64 48
  %340 = bitcast i16* %338 to i8*
  %341 = getelementptr inbounds [128 x i8], [128 x i8]* %11, i64 0, i64 48
  %342 = getelementptr inbounds [128 x i8], [128 x i8]* %11, i64 0, i64 64
  %343 = getelementptr i16, i16* %338, i64 32
  %344 = bitcast i16* %343 to i8*
  %345 = icmp ult i8* %341, %344
  %346 = icmp ugt i8* %342, %340
  %347 = and i1 %345, %346
  br i1 %347, label %384, label %348

348:                                              ; preds = %337
  %349 = insertelement <8 x i32> undef, i32 %1429, i32 0
  %350 = shufflevector <8 x i32> %349, <8 x i32> undef, <8 x i32> zeroinitializer
  %351 = insertelement <8 x i32> undef, i32 %1431, i32 0
  %352 = shufflevector <8 x i32> %351, <8 x i32> undef, <8 x i32> zeroinitializer
  %353 = getelementptr i16, i16* %338, i64 16
  %354 = bitcast i16* %338 to <8 x i16>*
  %355 = load <8 x i16>, <8 x i16>* %354, align 2, !alias.scope !308
  %356 = zext <8 x i16> %355 to <8 x i32>
  %357 = mul nuw nsw <8 x i32> %350, %356
  %358 = getelementptr inbounds i16, i16* %338, i64 16
  %359 = bitcast i16* %358 to <8 x i16>*
  %360 = load <8 x i16>, <8 x i16>* %359, align 2, !alias.scope !308
  %361 = zext <8 x i16> %360 to <8 x i32>
  %362 = mul nuw nsw <8 x i32> %352, %361
  %363 = add nuw nsw <8 x i32> %357, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %364 = add nuw nsw <8 x i32> %363, %362
  %365 = lshr <8 x i32> %364, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %366 = trunc <8 x i32> %365 to <8 x i8>
  %367 = bitcast i8* %339 to <8 x i8>*
  store <8 x i8> %366, <8 x i8>* %367, align 16, !alias.scope !311, !noalias !308
  %368 = getelementptr i16, i16* %338, i64 8
  %369 = bitcast i16* %368 to <8 x i16>*
  %370 = load <8 x i16>, <8 x i16>* %369, align 2, !alias.scope !308
  %371 = zext <8 x i16> %370 to <8 x i32>
  %372 = mul nuw nsw <8 x i32> %350, %371
  %373 = getelementptr inbounds i16, i16* %338, i64 24
  %374 = bitcast i16* %373 to <8 x i16>*
  %375 = load <8 x i16>, <8 x i16>* %374, align 2, !alias.scope !308
  %376 = zext <8 x i16> %375 to <8 x i32>
  %377 = mul nuw nsw <8 x i32> %352, %376
  %378 = add nuw nsw <8 x i32> %372, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %379 = add nuw nsw <8 x i32> %378, %377
  %380 = lshr <8 x i32> %379, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %381 = trunc <8 x i32> %380 to <8 x i8>
  %382 = getelementptr inbounds [128 x i8], [128 x i8]* %11, i64 0, i64 56
  %383 = bitcast i8* %382 to <8 x i8>*
  store <8 x i8> %381, <8 x i8>* %383, align 8, !alias.scope !311, !noalias !308
  br label %416

384:                                              ; preds = %337, %384
  %385 = phi i64 [ %414, %384 ], [ 0, %337 ]
  %386 = phi i16* [ %413, %384 ], [ %338, %337 ]
  %387 = load i16, i16* %386, align 2
  %388 = zext i16 %387 to i32
  %389 = mul nuw nsw i32 %1429, %388
  %390 = getelementptr inbounds i16, i16* %386, i64 16
  %391 = load i16, i16* %390, align 2
  %392 = zext i16 %391 to i32
  %393 = mul nuw nsw i32 %1431, %392
  %394 = add nuw nsw i32 %389, 64
  %395 = add nuw nsw i32 %394, %393
  %396 = lshr i32 %395, 7
  %397 = trunc i32 %396 to i8
  %398 = getelementptr inbounds i8, i8* %339, i64 %385
  store i8 %397, i8* %398, align 2
  %399 = getelementptr inbounds i16, i16* %386, i64 1
  %400 = or i64 %385, 1
  %401 = load i16, i16* %399, align 2
  %402 = zext i16 %401 to i32
  %403 = mul nuw nsw i32 %1429, %402
  %404 = getelementptr inbounds i16, i16* %386, i64 17
  %405 = load i16, i16* %404, align 2
  %406 = zext i16 %405 to i32
  %407 = mul nuw nsw i32 %1431, %406
  %408 = add nuw nsw i32 %403, 64
  %409 = add nuw nsw i32 %408, %407
  %410 = lshr i32 %409, 7
  %411 = trunc i32 %410 to i8
  %412 = getelementptr inbounds i8, i8* %339, i64 %400
  store i8 %411, i8* %412, align 1
  %413 = getelementptr inbounds i16, i16* %386, i64 2
  %414 = add nuw nsw i64 %385, 2
  %415 = icmp eq i64 %414, 16
  br i1 %415, label %416, label %384, !llvm.loop !313

416:                                              ; preds = %384, %348
  %417 = phi i16* [ %353, %348 ], [ %413, %384 ]
  %418 = getelementptr inbounds [128 x i8], [128 x i8]* %11, i64 0, i64 64
  %419 = bitcast i16* %417 to i8*
  %420 = getelementptr inbounds [128 x i8], [128 x i8]* %11, i64 0, i64 64
  %421 = getelementptr inbounds [128 x i8], [128 x i8]* %11, i64 0, i64 80
  %422 = getelementptr i16, i16* %417, i64 32
  %423 = bitcast i16* %422 to i8*
  %424 = icmp ult i8* %420, %423
  %425 = icmp ugt i8* %421, %419
  %426 = and i1 %424, %425
  br i1 %426, label %463, label %427

427:                                              ; preds = %416
  %428 = insertelement <8 x i32> undef, i32 %1429, i32 0
  %429 = shufflevector <8 x i32> %428, <8 x i32> undef, <8 x i32> zeroinitializer
  %430 = insertelement <8 x i32> undef, i32 %1431, i32 0
  %431 = shufflevector <8 x i32> %430, <8 x i32> undef, <8 x i32> zeroinitializer
  %432 = getelementptr i16, i16* %417, i64 16
  %433 = bitcast i16* %417 to <8 x i16>*
  %434 = load <8 x i16>, <8 x i16>* %433, align 2, !alias.scope !314
  %435 = zext <8 x i16> %434 to <8 x i32>
  %436 = mul nuw nsw <8 x i32> %429, %435
  %437 = getelementptr inbounds i16, i16* %417, i64 16
  %438 = bitcast i16* %437 to <8 x i16>*
  %439 = load <8 x i16>, <8 x i16>* %438, align 2, !alias.scope !314
  %440 = zext <8 x i16> %439 to <8 x i32>
  %441 = mul nuw nsw <8 x i32> %431, %440
  %442 = add nuw nsw <8 x i32> %436, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %443 = add nuw nsw <8 x i32> %442, %441
  %444 = lshr <8 x i32> %443, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %445 = trunc <8 x i32> %444 to <8 x i8>
  %446 = bitcast i8* %418 to <8 x i8>*
  store <8 x i8> %445, <8 x i8>* %446, align 16, !alias.scope !317, !noalias !314
  %447 = getelementptr i16, i16* %417, i64 8
  %448 = bitcast i16* %447 to <8 x i16>*
  %449 = load <8 x i16>, <8 x i16>* %448, align 2, !alias.scope !314
  %450 = zext <8 x i16> %449 to <8 x i32>
  %451 = mul nuw nsw <8 x i32> %429, %450
  %452 = getelementptr inbounds i16, i16* %417, i64 24
  %453 = bitcast i16* %452 to <8 x i16>*
  %454 = load <8 x i16>, <8 x i16>* %453, align 2, !alias.scope !314
  %455 = zext <8 x i16> %454 to <8 x i32>
  %456 = mul nuw nsw <8 x i32> %431, %455
  %457 = add nuw nsw <8 x i32> %451, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %458 = add nuw nsw <8 x i32> %457, %456
  %459 = lshr <8 x i32> %458, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %460 = trunc <8 x i32> %459 to <8 x i8>
  %461 = getelementptr inbounds [128 x i8], [128 x i8]* %11, i64 0, i64 72
  %462 = bitcast i8* %461 to <8 x i8>*
  store <8 x i8> %460, <8 x i8>* %462, align 8, !alias.scope !317, !noalias !314
  br label %495

463:                                              ; preds = %416, %463
  %464 = phi i64 [ %493, %463 ], [ 0, %416 ]
  %465 = phi i16* [ %492, %463 ], [ %417, %416 ]
  %466 = load i16, i16* %465, align 2
  %467 = zext i16 %466 to i32
  %468 = mul nuw nsw i32 %1429, %467
  %469 = getelementptr inbounds i16, i16* %465, i64 16
  %470 = load i16, i16* %469, align 2
  %471 = zext i16 %470 to i32
  %472 = mul nuw nsw i32 %1431, %471
  %473 = add nuw nsw i32 %468, 64
  %474 = add nuw nsw i32 %473, %472
  %475 = lshr i32 %474, 7
  %476 = trunc i32 %475 to i8
  %477 = getelementptr inbounds i8, i8* %418, i64 %464
  store i8 %476, i8* %477, align 2
  %478 = getelementptr inbounds i16, i16* %465, i64 1
  %479 = or i64 %464, 1
  %480 = load i16, i16* %478, align 2
  %481 = zext i16 %480 to i32
  %482 = mul nuw nsw i32 %1429, %481
  %483 = getelementptr inbounds i16, i16* %465, i64 17
  %484 = load i16, i16* %483, align 2
  %485 = zext i16 %484 to i32
  %486 = mul nuw nsw i32 %1431, %485
  %487 = add nuw nsw i32 %482, 64
  %488 = add nuw nsw i32 %487, %486
  %489 = lshr i32 %488, 7
  %490 = trunc i32 %489 to i8
  %491 = getelementptr inbounds i8, i8* %418, i64 %479
  store i8 %490, i8* %491, align 1
  %492 = getelementptr inbounds i16, i16* %465, i64 2
  %493 = add nuw nsw i64 %464, 2
  %494 = icmp eq i64 %493, 16
  br i1 %494, label %495, label %463, !llvm.loop !319

495:                                              ; preds = %463, %427
  %496 = phi i16* [ %432, %427 ], [ %492, %463 ]
  %497 = getelementptr inbounds [128 x i8], [128 x i8]* %11, i64 0, i64 80
  %498 = bitcast i16* %496 to i8*
  %499 = getelementptr inbounds [128 x i8], [128 x i8]* %11, i64 0, i64 80
  %500 = getelementptr inbounds [128 x i8], [128 x i8]* %11, i64 0, i64 96
  %501 = getelementptr i16, i16* %496, i64 32
  %502 = bitcast i16* %501 to i8*
  %503 = icmp ult i8* %499, %502
  %504 = icmp ugt i8* %500, %498
  %505 = and i1 %503, %504
  br i1 %505, label %542, label %506

506:                                              ; preds = %495
  %507 = insertelement <8 x i32> undef, i32 %1429, i32 0
  %508 = shufflevector <8 x i32> %507, <8 x i32> undef, <8 x i32> zeroinitializer
  %509 = insertelement <8 x i32> undef, i32 %1431, i32 0
  %510 = shufflevector <8 x i32> %509, <8 x i32> undef, <8 x i32> zeroinitializer
  %511 = getelementptr i16, i16* %496, i64 16
  %512 = bitcast i16* %496 to <8 x i16>*
  %513 = load <8 x i16>, <8 x i16>* %512, align 2, !alias.scope !320
  %514 = zext <8 x i16> %513 to <8 x i32>
  %515 = mul nuw nsw <8 x i32> %508, %514
  %516 = getelementptr inbounds i16, i16* %496, i64 16
  %517 = bitcast i16* %516 to <8 x i16>*
  %518 = load <8 x i16>, <8 x i16>* %517, align 2, !alias.scope !320
  %519 = zext <8 x i16> %518 to <8 x i32>
  %520 = mul nuw nsw <8 x i32> %510, %519
  %521 = add nuw nsw <8 x i32> %515, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %522 = add nuw nsw <8 x i32> %521, %520
  %523 = lshr <8 x i32> %522, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %524 = trunc <8 x i32> %523 to <8 x i8>
  %525 = bitcast i8* %497 to <8 x i8>*
  store <8 x i8> %524, <8 x i8>* %525, align 16, !alias.scope !323, !noalias !320
  %526 = getelementptr i16, i16* %496, i64 8
  %527 = bitcast i16* %526 to <8 x i16>*
  %528 = load <8 x i16>, <8 x i16>* %527, align 2, !alias.scope !320
  %529 = zext <8 x i16> %528 to <8 x i32>
  %530 = mul nuw nsw <8 x i32> %508, %529
  %531 = getelementptr inbounds i16, i16* %496, i64 24
  %532 = bitcast i16* %531 to <8 x i16>*
  %533 = load <8 x i16>, <8 x i16>* %532, align 2, !alias.scope !320
  %534 = zext <8 x i16> %533 to <8 x i32>
  %535 = mul nuw nsw <8 x i32> %510, %534
  %536 = add nuw nsw <8 x i32> %530, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %537 = add nuw nsw <8 x i32> %536, %535
  %538 = lshr <8 x i32> %537, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %539 = trunc <8 x i32> %538 to <8 x i8>
  %540 = getelementptr inbounds [128 x i8], [128 x i8]* %11, i64 0, i64 88
  %541 = bitcast i8* %540 to <8 x i8>*
  store <8 x i8> %539, <8 x i8>* %541, align 8, !alias.scope !323, !noalias !320
  br label %574

542:                                              ; preds = %495, %542
  %543 = phi i64 [ %572, %542 ], [ 0, %495 ]
  %544 = phi i16* [ %571, %542 ], [ %496, %495 ]
  %545 = load i16, i16* %544, align 2
  %546 = zext i16 %545 to i32
  %547 = mul nuw nsw i32 %1429, %546
  %548 = getelementptr inbounds i16, i16* %544, i64 16
  %549 = load i16, i16* %548, align 2
  %550 = zext i16 %549 to i32
  %551 = mul nuw nsw i32 %1431, %550
  %552 = add nuw nsw i32 %547, 64
  %553 = add nuw nsw i32 %552, %551
  %554 = lshr i32 %553, 7
  %555 = trunc i32 %554 to i8
  %556 = getelementptr inbounds i8, i8* %497, i64 %543
  store i8 %555, i8* %556, align 2
  %557 = getelementptr inbounds i16, i16* %544, i64 1
  %558 = or i64 %543, 1
  %559 = load i16, i16* %557, align 2
  %560 = zext i16 %559 to i32
  %561 = mul nuw nsw i32 %1429, %560
  %562 = getelementptr inbounds i16, i16* %544, i64 17
  %563 = load i16, i16* %562, align 2
  %564 = zext i16 %563 to i32
  %565 = mul nuw nsw i32 %1431, %564
  %566 = add nuw nsw i32 %561, 64
  %567 = add nuw nsw i32 %566, %565
  %568 = lshr i32 %567, 7
  %569 = trunc i32 %568 to i8
  %570 = getelementptr inbounds i8, i8* %497, i64 %558
  store i8 %569, i8* %570, align 1
  %571 = getelementptr inbounds i16, i16* %544, i64 2
  %572 = add nuw nsw i64 %543, 2
  %573 = icmp eq i64 %572, 16
  br i1 %573, label %574, label %542, !llvm.loop !325

574:                                              ; preds = %542, %506
  %575 = phi i16* [ %511, %506 ], [ %571, %542 ]
  %576 = getelementptr inbounds [128 x i8], [128 x i8]* %11, i64 0, i64 96
  %577 = bitcast i16* %575 to i8*
  %578 = getelementptr inbounds [128 x i8], [128 x i8]* %11, i64 0, i64 96
  %579 = getelementptr inbounds [128 x i8], [128 x i8]* %11, i64 0, i64 112
  %580 = getelementptr i16, i16* %575, i64 32
  %581 = bitcast i16* %580 to i8*
  %582 = icmp ult i8* %578, %581
  %583 = icmp ugt i8* %579, %577
  %584 = and i1 %582, %583
  br i1 %584, label %621, label %585

585:                                              ; preds = %574
  %586 = insertelement <8 x i32> undef, i32 %1429, i32 0
  %587 = shufflevector <8 x i32> %586, <8 x i32> undef, <8 x i32> zeroinitializer
  %588 = insertelement <8 x i32> undef, i32 %1431, i32 0
  %589 = shufflevector <8 x i32> %588, <8 x i32> undef, <8 x i32> zeroinitializer
  %590 = getelementptr i16, i16* %575, i64 16
  %591 = bitcast i16* %575 to <8 x i16>*
  %592 = load <8 x i16>, <8 x i16>* %591, align 2, !alias.scope !326
  %593 = zext <8 x i16> %592 to <8 x i32>
  %594 = mul nuw nsw <8 x i32> %587, %593
  %595 = getelementptr inbounds i16, i16* %575, i64 16
  %596 = bitcast i16* %595 to <8 x i16>*
  %597 = load <8 x i16>, <8 x i16>* %596, align 2, !alias.scope !326
  %598 = zext <8 x i16> %597 to <8 x i32>
  %599 = mul nuw nsw <8 x i32> %589, %598
  %600 = add nuw nsw <8 x i32> %594, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %601 = add nuw nsw <8 x i32> %600, %599
  %602 = lshr <8 x i32> %601, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %603 = trunc <8 x i32> %602 to <8 x i8>
  %604 = bitcast i8* %576 to <8 x i8>*
  store <8 x i8> %603, <8 x i8>* %604, align 16, !alias.scope !329, !noalias !326
  %605 = getelementptr i16, i16* %575, i64 8
  %606 = bitcast i16* %605 to <8 x i16>*
  %607 = load <8 x i16>, <8 x i16>* %606, align 2, !alias.scope !326
  %608 = zext <8 x i16> %607 to <8 x i32>
  %609 = mul nuw nsw <8 x i32> %587, %608
  %610 = getelementptr inbounds i16, i16* %575, i64 24
  %611 = bitcast i16* %610 to <8 x i16>*
  %612 = load <8 x i16>, <8 x i16>* %611, align 2, !alias.scope !326
  %613 = zext <8 x i16> %612 to <8 x i32>
  %614 = mul nuw nsw <8 x i32> %589, %613
  %615 = add nuw nsw <8 x i32> %609, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %616 = add nuw nsw <8 x i32> %615, %614
  %617 = lshr <8 x i32> %616, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %618 = trunc <8 x i32> %617 to <8 x i8>
  %619 = getelementptr inbounds [128 x i8], [128 x i8]* %11, i64 0, i64 104
  %620 = bitcast i8* %619 to <8 x i8>*
  store <8 x i8> %618, <8 x i8>* %620, align 8, !alias.scope !329, !noalias !326
  br label %653

621:                                              ; preds = %574, %621
  %622 = phi i64 [ %651, %621 ], [ 0, %574 ]
  %623 = phi i16* [ %650, %621 ], [ %575, %574 ]
  %624 = load i16, i16* %623, align 2
  %625 = zext i16 %624 to i32
  %626 = mul nuw nsw i32 %1429, %625
  %627 = getelementptr inbounds i16, i16* %623, i64 16
  %628 = load i16, i16* %627, align 2
  %629 = zext i16 %628 to i32
  %630 = mul nuw nsw i32 %1431, %629
  %631 = add nuw nsw i32 %626, 64
  %632 = add nuw nsw i32 %631, %630
  %633 = lshr i32 %632, 7
  %634 = trunc i32 %633 to i8
  %635 = getelementptr inbounds i8, i8* %576, i64 %622
  store i8 %634, i8* %635, align 2
  %636 = getelementptr inbounds i16, i16* %623, i64 1
  %637 = or i64 %622, 1
  %638 = load i16, i16* %636, align 2
  %639 = zext i16 %638 to i32
  %640 = mul nuw nsw i32 %1429, %639
  %641 = getelementptr inbounds i16, i16* %623, i64 17
  %642 = load i16, i16* %641, align 2
  %643 = zext i16 %642 to i32
  %644 = mul nuw nsw i32 %1431, %643
  %645 = add nuw nsw i32 %640, 64
  %646 = add nuw nsw i32 %645, %644
  %647 = lshr i32 %646, 7
  %648 = trunc i32 %647 to i8
  %649 = getelementptr inbounds i8, i8* %576, i64 %637
  store i8 %648, i8* %649, align 1
  %650 = getelementptr inbounds i16, i16* %623, i64 2
  %651 = add nuw nsw i64 %622, 2
  %652 = icmp eq i64 %651, 16
  br i1 %652, label %653, label %621, !llvm.loop !331

653:                                              ; preds = %621, %585
  %654 = phi i16* [ %590, %585 ], [ %650, %621 ]
  %655 = getelementptr inbounds [128 x i8], [128 x i8]* %11, i64 0, i64 112
  %656 = bitcast i16* %654 to i8*
  %657 = getelementptr inbounds [128 x i8], [128 x i8]* %11, i64 0, i64 112
  %658 = getelementptr inbounds [128 x i8], [128 x i8]* %11, i64 1, i64 0
  %659 = getelementptr i16, i16* %654, i64 32
  %660 = bitcast i16* %659 to i8*
  %661 = icmp ult i8* %657, %660
  %662 = icmp ugt i8* %658, %656
  %663 = and i1 %661, %662
  br i1 %663, label %810, label %664

664:                                              ; preds = %653
  %665 = insertelement <8 x i32> undef, i32 %1429, i32 0
  %666 = shufflevector <8 x i32> %665, <8 x i32> undef, <8 x i32> zeroinitializer
  %667 = insertelement <8 x i32> undef, i32 %1431, i32 0
  %668 = shufflevector <8 x i32> %667, <8 x i32> undef, <8 x i32> zeroinitializer
  %669 = bitcast i16* %654 to <8 x i16>*
  %670 = load <8 x i16>, <8 x i16>* %669, align 2, !alias.scope !332
  %671 = zext <8 x i16> %670 to <8 x i32>
  %672 = mul nuw nsw <8 x i32> %666, %671
  %673 = getelementptr inbounds i16, i16* %654, i64 16
  %674 = bitcast i16* %673 to <8 x i16>*
  %675 = load <8 x i16>, <8 x i16>* %674, align 2, !alias.scope !332
  %676 = zext <8 x i16> %675 to <8 x i32>
  %677 = mul nuw nsw <8 x i32> %668, %676
  %678 = add nuw nsw <8 x i32> %672, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %679 = add nuw nsw <8 x i32> %678, %677
  %680 = lshr <8 x i32> %679, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %681 = trunc <8 x i32> %680 to <8 x i8>
  %682 = bitcast i8* %655 to <8 x i8>*
  store <8 x i8> %681, <8 x i8>* %682, align 16, !alias.scope !335, !noalias !332
  %683 = getelementptr i16, i16* %654, i64 8
  %684 = bitcast i16* %683 to <8 x i16>*
  %685 = load <8 x i16>, <8 x i16>* %684, align 2, !alias.scope !332
  %686 = zext <8 x i16> %685 to <8 x i32>
  %687 = mul nuw nsw <8 x i32> %666, %686
  %688 = getelementptr inbounds i16, i16* %654, i64 24
  %689 = bitcast i16* %688 to <8 x i16>*
  %690 = load <8 x i16>, <8 x i16>* %689, align 2, !alias.scope !332
  %691 = zext <8 x i16> %690 to <8 x i32>
  %692 = mul nuw nsw <8 x i32> %668, %691
  %693 = add nuw nsw <8 x i32> %687, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %694 = add nuw nsw <8 x i32> %693, %692
  %695 = lshr <8 x i32> %694, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %696 = trunc <8 x i32> %695 to <8 x i8>
  %697 = getelementptr inbounds [128 x i8], [128 x i8]* %11, i64 0, i64 120
  %698 = bitcast i8* %697 to <8 x i8>*
  store <8 x i8> %696, <8 x i8>* %698, align 8, !alias.scope !335, !noalias !332
  br label %699

699:                                              ; preds = %810, %664
  %700 = bitcast i8* %7 to <16 x i8>*
  %701 = load <16 x i8>, <16 x i8>* %700, align 1
  %702 = zext <16 x i8> %701 to <16 x i32>
  %703 = bitcast [128 x i8]* %11 to <16 x i8>*
  %704 = load <16 x i8>, <16 x i8>* %703, align 16
  %705 = zext <16 x i8> %704 to <16 x i32>
  %706 = add nuw nsw <16 x i32> %702, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %707 = add nuw nsw <16 x i32> %706, %705
  %708 = lshr <16 x i32> %707, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %709 = trunc <16 x i32> %708 to <16 x i8>
  %710 = bitcast [128 x i8]* %13 to <16 x i8>*
  store <16 x i8> %709, <16 x i8>* %710, align 16
  %711 = getelementptr inbounds [128 x i8], [128 x i8]* %13, i64 0, i64 16
  %712 = getelementptr inbounds i8, i8* %7, i64 16
  %713 = getelementptr inbounds [128 x i8], [128 x i8]* %11, i64 0, i64 16
  %714 = bitcast i8* %712 to <16 x i8>*
  %715 = load <16 x i8>, <16 x i8>* %714, align 1
  %716 = zext <16 x i8> %715 to <16 x i32>
  %717 = bitcast i8* %713 to <16 x i8>*
  %718 = load <16 x i8>, <16 x i8>* %717, align 16
  %719 = zext <16 x i8> %718 to <16 x i32>
  %720 = add nuw nsw <16 x i32> %716, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %721 = add nuw nsw <16 x i32> %720, %719
  %722 = lshr <16 x i32> %721, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %723 = trunc <16 x i32> %722 to <16 x i8>
  %724 = bitcast i8* %711 to <16 x i8>*
  store <16 x i8> %723, <16 x i8>* %724, align 16
  %725 = getelementptr inbounds [128 x i8], [128 x i8]* %13, i64 0, i64 32
  %726 = getelementptr inbounds i8, i8* %7, i64 32
  %727 = getelementptr inbounds [128 x i8], [128 x i8]* %11, i64 0, i64 32
  %728 = bitcast i8* %726 to <16 x i8>*
  %729 = load <16 x i8>, <16 x i8>* %728, align 1
  %730 = zext <16 x i8> %729 to <16 x i32>
  %731 = bitcast i8* %727 to <16 x i8>*
  %732 = load <16 x i8>, <16 x i8>* %731, align 16
  %733 = zext <16 x i8> %732 to <16 x i32>
  %734 = add nuw nsw <16 x i32> %730, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %735 = add nuw nsw <16 x i32> %734, %733
  %736 = lshr <16 x i32> %735, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %737 = trunc <16 x i32> %736 to <16 x i8>
  %738 = bitcast i8* %725 to <16 x i8>*
  store <16 x i8> %737, <16 x i8>* %738, align 16
  %739 = getelementptr inbounds [128 x i8], [128 x i8]* %13, i64 0, i64 48
  %740 = getelementptr inbounds i8, i8* %7, i64 48
  %741 = getelementptr inbounds [128 x i8], [128 x i8]* %11, i64 0, i64 48
  %742 = bitcast i8* %740 to <16 x i8>*
  %743 = load <16 x i8>, <16 x i8>* %742, align 1
  %744 = zext <16 x i8> %743 to <16 x i32>
  %745 = bitcast i8* %741 to <16 x i8>*
  %746 = load <16 x i8>, <16 x i8>* %745, align 16
  %747 = zext <16 x i8> %746 to <16 x i32>
  %748 = add nuw nsw <16 x i32> %744, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %749 = add nuw nsw <16 x i32> %748, %747
  %750 = lshr <16 x i32> %749, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %751 = trunc <16 x i32> %750 to <16 x i8>
  %752 = bitcast i8* %739 to <16 x i8>*
  store <16 x i8> %751, <16 x i8>* %752, align 16
  %753 = getelementptr inbounds [128 x i8], [128 x i8]* %13, i64 0, i64 64
  %754 = getelementptr inbounds i8, i8* %7, i64 64
  %755 = getelementptr inbounds [128 x i8], [128 x i8]* %11, i64 0, i64 64
  %756 = bitcast i8* %754 to <16 x i8>*
  %757 = load <16 x i8>, <16 x i8>* %756, align 1
  %758 = zext <16 x i8> %757 to <16 x i32>
  %759 = bitcast i8* %755 to <16 x i8>*
  %760 = load <16 x i8>, <16 x i8>* %759, align 16
  %761 = zext <16 x i8> %760 to <16 x i32>
  %762 = add nuw nsw <16 x i32> %758, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %763 = add nuw nsw <16 x i32> %762, %761
  %764 = lshr <16 x i32> %763, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %765 = trunc <16 x i32> %764 to <16 x i8>
  %766 = bitcast i8* %753 to <16 x i8>*
  store <16 x i8> %765, <16 x i8>* %766, align 16
  %767 = getelementptr inbounds [128 x i8], [128 x i8]* %13, i64 0, i64 80
  %768 = getelementptr inbounds i8, i8* %7, i64 80
  %769 = getelementptr inbounds [128 x i8], [128 x i8]* %11, i64 0, i64 80
  %770 = bitcast i8* %768 to <16 x i8>*
  %771 = load <16 x i8>, <16 x i8>* %770, align 1
  %772 = zext <16 x i8> %771 to <16 x i32>
  %773 = bitcast i8* %769 to <16 x i8>*
  %774 = load <16 x i8>, <16 x i8>* %773, align 16
  %775 = zext <16 x i8> %774 to <16 x i32>
  %776 = add nuw nsw <16 x i32> %772, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %777 = add nuw nsw <16 x i32> %776, %775
  %778 = lshr <16 x i32> %777, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %779 = trunc <16 x i32> %778 to <16 x i8>
  %780 = bitcast i8* %767 to <16 x i8>*
  store <16 x i8> %779, <16 x i8>* %780, align 16
  %781 = getelementptr inbounds [128 x i8], [128 x i8]* %13, i64 0, i64 96
  %782 = getelementptr inbounds i8, i8* %7, i64 96
  %783 = getelementptr inbounds [128 x i8], [128 x i8]* %11, i64 0, i64 96
  %784 = bitcast i8* %782 to <16 x i8>*
  %785 = load <16 x i8>, <16 x i8>* %784, align 1
  %786 = zext <16 x i8> %785 to <16 x i32>
  %787 = bitcast i8* %783 to <16 x i8>*
  %788 = load <16 x i8>, <16 x i8>* %787, align 16
  %789 = zext <16 x i8> %788 to <16 x i32>
  %790 = add nuw nsw <16 x i32> %786, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %791 = add nuw nsw <16 x i32> %790, %789
  %792 = lshr <16 x i32> %791, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %793 = trunc <16 x i32> %792 to <16 x i8>
  %794 = bitcast i8* %781 to <16 x i8>*
  store <16 x i8> %793, <16 x i8>* %794, align 16
  %795 = getelementptr inbounds [128 x i8], [128 x i8]* %13, i64 0, i64 112
  %796 = getelementptr inbounds i8, i8* %7, i64 112
  %797 = getelementptr inbounds [128 x i8], [128 x i8]* %11, i64 0, i64 112
  %798 = bitcast i8* %796 to <16 x i8>*
  %799 = load <16 x i8>, <16 x i8>* %798, align 1
  %800 = zext <16 x i8> %799 to <16 x i32>
  %801 = bitcast i8* %797 to <16 x i8>*
  %802 = load <16 x i8>, <16 x i8>* %801, align 16
  %803 = zext <16 x i8> %802 to <16 x i32>
  %804 = add nuw nsw <16 x i32> %800, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %805 = add nuw nsw <16 x i32> %804, %803
  %806 = lshr <16 x i32> %805, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %807 = trunc <16 x i32> %806 to <16 x i8>
  %808 = bitcast i8* %795 to <16 x i8>*
  store <16 x i8> %807, <16 x i8>* %808, align 16
  %809 = call i32 @vpx_variance16x8_c(i8* nonnull %15, i32 16, i8* %4, i32 %5, i32* %6)
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %15) #4
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %14) #4
  call void @llvm.lifetime.end.p0i8(i64 288, i8* nonnull %10) #4
  ret i32 %809

810:                                              ; preds = %653, %810
  %811 = phi i64 [ %840, %810 ], [ 0, %653 ]
  %812 = phi i16* [ %839, %810 ], [ %654, %653 ]
  %813 = load i16, i16* %812, align 2
  %814 = zext i16 %813 to i32
  %815 = mul nuw nsw i32 %1429, %814
  %816 = getelementptr inbounds i16, i16* %812, i64 16
  %817 = load i16, i16* %816, align 2
  %818 = zext i16 %817 to i32
  %819 = mul nuw nsw i32 %1431, %818
  %820 = add nuw nsw i32 %815, 64
  %821 = add nuw nsw i32 %820, %819
  %822 = lshr i32 %821, 7
  %823 = trunc i32 %822 to i8
  %824 = getelementptr inbounds i8, i8* %655, i64 %811
  store i8 %823, i8* %824, align 2
  %825 = getelementptr inbounds i16, i16* %812, i64 1
  %826 = or i64 %811, 1
  %827 = load i16, i16* %825, align 2
  %828 = zext i16 %827 to i32
  %829 = mul nuw nsw i32 %1429, %828
  %830 = getelementptr inbounds i16, i16* %812, i64 17
  %831 = load i16, i16* %830, align 2
  %832 = zext i16 %831 to i32
  %833 = mul nuw nsw i32 %1431, %832
  %834 = add nuw nsw i32 %829, 64
  %835 = add nuw nsw i32 %834, %833
  %836 = lshr i32 %835, 7
  %837 = trunc i32 %836 to i8
  %838 = getelementptr inbounds i8, i8* %655, i64 %826
  store i8 %837, i8* %838, align 1
  %839 = getelementptr inbounds i16, i16* %812, i64 2
  %840 = add nuw nsw i64 %811, 2
  %841 = icmp eq i64 %840, 16
  br i1 %841, label %699, label %810, !llvm.loop !337

842:                                              ; preds = %98, %842
  %843 = phi i64 [ %870, %842 ], [ 0, %98 ]
  %844 = phi i8* [ %861, %842 ], [ %100, %98 ]
  %845 = load i8, i8* %844, align 1
  %846 = zext i8 %845 to i32
  %847 = mul nuw nsw i32 %23, %846
  %848 = getelementptr inbounds i8, i8* %844, i64 1
  %849 = load i8, i8* %848, align 1
  %850 = zext i8 %849 to i32
  %851 = mul nuw nsw i32 %25, %850
  %852 = add nuw nsw i32 %847, 64
  %853 = add nuw nsw i32 %852, %851
  %854 = lshr i32 %853, 7
  %855 = trunc i32 %854 to i16
  %856 = getelementptr inbounds i16, i16* %101, i64 %843
  store i16 %855, i16* %856, align 4
  %857 = or i64 %843, 1
  %858 = load i8, i8* %848, align 1
  %859 = zext i8 %858 to i32
  %860 = mul nuw nsw i32 %23, %859
  %861 = getelementptr inbounds i8, i8* %844, i64 2
  %862 = load i8, i8* %861, align 1
  %863 = zext i8 %862 to i32
  %864 = mul nuw nsw i32 %25, %863
  %865 = add nuw nsw i32 %860, 64
  %866 = add nuw nsw i32 %865, %864
  %867 = lshr i32 %866, 7
  %868 = trunc i32 %867 to i16
  %869 = getelementptr inbounds i16, i16* %101, i64 %857
  store i16 %868, i16* %869, align 2
  %870 = add nuw nsw i64 %843, 2
  %871 = icmp eq i64 %870, 16
  br i1 %871, label %872, label %842, !llvm.loop !338

872:                                              ; preds = %842, %111
  %873 = phi i8* [ %116, %111 ], [ %861, %842 ]
  %874 = getelementptr inbounds i8, i8* %873, i64 %21
  %875 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 32
  %876 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 32
  %877 = bitcast i16* %876 to i8*
  %878 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 48
  %879 = bitcast i16* %878 to i8*
  %880 = add nuw nsw i64 %21, 17
  %881 = getelementptr i8, i8* %873, i64 %880
  %882 = icmp ugt i8* %881, %877
  %883 = icmp ult i8* %874, %879
  %884 = and i1 %882, %883
  br i1 %884, label %921, label %885

885:                                              ; preds = %872
  %886 = insertelement <8 x i32> undef, i32 %23, i32 0
  %887 = shufflevector <8 x i32> %886, <8 x i32> undef, <8 x i32> zeroinitializer
  %888 = insertelement <8 x i32> undef, i32 %25, i32 0
  %889 = shufflevector <8 x i32> %888, <8 x i32> undef, <8 x i32> zeroinitializer
  %890 = getelementptr i8, i8* %874, i64 16
  %891 = bitcast i8* %874 to <8 x i8>*
  %892 = load <8 x i8>, <8 x i8>* %891, align 1, !alias.scope !339
  %893 = zext <8 x i8> %892 to <8 x i32>
  %894 = mul nuw nsw <8 x i32> %887, %893
  %895 = getelementptr inbounds i8, i8* %874, i64 1
  %896 = bitcast i8* %895 to <8 x i8>*
  %897 = load <8 x i8>, <8 x i8>* %896, align 1, !alias.scope !339
  %898 = zext <8 x i8> %897 to <8 x i32>
  %899 = mul nuw nsw <8 x i32> %889, %898
  %900 = add nuw nsw <8 x i32> %894, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %901 = add nuw nsw <8 x i32> %900, %899
  %902 = lshr <8 x i32> %901, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %903 = trunc <8 x i32> %902 to <8 x i16>
  %904 = bitcast i16* %875 to <8 x i16>*
  store <8 x i16> %903, <8 x i16>* %904, align 16, !alias.scope !342, !noalias !339
  %905 = getelementptr i8, i8* %874, i64 8
  %906 = bitcast i8* %905 to <8 x i8>*
  %907 = load <8 x i8>, <8 x i8>* %906, align 1, !alias.scope !339
  %908 = zext <8 x i8> %907 to <8 x i32>
  %909 = mul nuw nsw <8 x i32> %887, %908
  %910 = getelementptr inbounds i8, i8* %905, i64 1
  %911 = bitcast i8* %910 to <8 x i8>*
  %912 = load <8 x i8>, <8 x i8>* %911, align 1, !alias.scope !339
  %913 = zext <8 x i8> %912 to <8 x i32>
  %914 = mul nuw nsw <8 x i32> %889, %913
  %915 = add nuw nsw <8 x i32> %909, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %916 = add nuw nsw <8 x i32> %915, %914
  %917 = lshr <8 x i32> %916, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %918 = trunc <8 x i32> %917 to <8 x i16>
  %919 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 40
  %920 = bitcast i16* %919 to <8 x i16>*
  store <8 x i16> %918, <8 x i16>* %920, align 16, !alias.scope !342, !noalias !339
  br label %951

921:                                              ; preds = %872, %921
  %922 = phi i64 [ %949, %921 ], [ 0, %872 ]
  %923 = phi i8* [ %940, %921 ], [ %874, %872 ]
  %924 = load i8, i8* %923, align 1
  %925 = zext i8 %924 to i32
  %926 = mul nuw nsw i32 %23, %925
  %927 = getelementptr inbounds i8, i8* %923, i64 1
  %928 = load i8, i8* %927, align 1
  %929 = zext i8 %928 to i32
  %930 = mul nuw nsw i32 %25, %929
  %931 = add nuw nsw i32 %926, 64
  %932 = add nuw nsw i32 %931, %930
  %933 = lshr i32 %932, 7
  %934 = trunc i32 %933 to i16
  %935 = getelementptr inbounds i16, i16* %875, i64 %922
  store i16 %934, i16* %935, align 4
  %936 = or i64 %922, 1
  %937 = load i8, i8* %927, align 1
  %938 = zext i8 %937 to i32
  %939 = mul nuw nsw i32 %23, %938
  %940 = getelementptr inbounds i8, i8* %923, i64 2
  %941 = load i8, i8* %940, align 1
  %942 = zext i8 %941 to i32
  %943 = mul nuw nsw i32 %25, %942
  %944 = add nuw nsw i32 %939, 64
  %945 = add nuw nsw i32 %944, %943
  %946 = lshr i32 %945, 7
  %947 = trunc i32 %946 to i16
  %948 = getelementptr inbounds i16, i16* %875, i64 %936
  store i16 %947, i16* %948, align 2
  %949 = add nuw nsw i64 %922, 2
  %950 = icmp eq i64 %949, 16
  br i1 %950, label %951, label %921, !llvm.loop !344

951:                                              ; preds = %921, %885
  %952 = phi i8* [ %890, %885 ], [ %940, %921 ]
  %953 = getelementptr inbounds i8, i8* %952, i64 %21
  %954 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 48
  %955 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 48
  %956 = bitcast i16* %955 to i8*
  %957 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 64
  %958 = bitcast i16* %957 to i8*
  %959 = add nuw nsw i64 %21, 17
  %960 = getelementptr i8, i8* %952, i64 %959
  %961 = icmp ugt i8* %960, %956
  %962 = icmp ult i8* %953, %958
  %963 = and i1 %961, %962
  br i1 %963, label %1000, label %964

964:                                              ; preds = %951
  %965 = insertelement <8 x i32> undef, i32 %23, i32 0
  %966 = shufflevector <8 x i32> %965, <8 x i32> undef, <8 x i32> zeroinitializer
  %967 = insertelement <8 x i32> undef, i32 %25, i32 0
  %968 = shufflevector <8 x i32> %967, <8 x i32> undef, <8 x i32> zeroinitializer
  %969 = getelementptr i8, i8* %953, i64 16
  %970 = bitcast i8* %953 to <8 x i8>*
  %971 = load <8 x i8>, <8 x i8>* %970, align 1, !alias.scope !345
  %972 = zext <8 x i8> %971 to <8 x i32>
  %973 = mul nuw nsw <8 x i32> %966, %972
  %974 = getelementptr inbounds i8, i8* %953, i64 1
  %975 = bitcast i8* %974 to <8 x i8>*
  %976 = load <8 x i8>, <8 x i8>* %975, align 1, !alias.scope !345
  %977 = zext <8 x i8> %976 to <8 x i32>
  %978 = mul nuw nsw <8 x i32> %968, %977
  %979 = add nuw nsw <8 x i32> %973, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %980 = add nuw nsw <8 x i32> %979, %978
  %981 = lshr <8 x i32> %980, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %982 = trunc <8 x i32> %981 to <8 x i16>
  %983 = bitcast i16* %954 to <8 x i16>*
  store <8 x i16> %982, <8 x i16>* %983, align 16, !alias.scope !348, !noalias !345
  %984 = getelementptr i8, i8* %953, i64 8
  %985 = bitcast i8* %984 to <8 x i8>*
  %986 = load <8 x i8>, <8 x i8>* %985, align 1, !alias.scope !345
  %987 = zext <8 x i8> %986 to <8 x i32>
  %988 = mul nuw nsw <8 x i32> %966, %987
  %989 = getelementptr inbounds i8, i8* %984, i64 1
  %990 = bitcast i8* %989 to <8 x i8>*
  %991 = load <8 x i8>, <8 x i8>* %990, align 1, !alias.scope !345
  %992 = zext <8 x i8> %991 to <8 x i32>
  %993 = mul nuw nsw <8 x i32> %968, %992
  %994 = add nuw nsw <8 x i32> %988, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %995 = add nuw nsw <8 x i32> %994, %993
  %996 = lshr <8 x i32> %995, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %997 = trunc <8 x i32> %996 to <8 x i16>
  %998 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 56
  %999 = bitcast i16* %998 to <8 x i16>*
  store <8 x i16> %997, <8 x i16>* %999, align 16, !alias.scope !348, !noalias !345
  br label %1030

1000:                                             ; preds = %951, %1000
  %1001 = phi i64 [ %1028, %1000 ], [ 0, %951 ]
  %1002 = phi i8* [ %1019, %1000 ], [ %953, %951 ]
  %1003 = load i8, i8* %1002, align 1
  %1004 = zext i8 %1003 to i32
  %1005 = mul nuw nsw i32 %23, %1004
  %1006 = getelementptr inbounds i8, i8* %1002, i64 1
  %1007 = load i8, i8* %1006, align 1
  %1008 = zext i8 %1007 to i32
  %1009 = mul nuw nsw i32 %25, %1008
  %1010 = add nuw nsw i32 %1005, 64
  %1011 = add nuw nsw i32 %1010, %1009
  %1012 = lshr i32 %1011, 7
  %1013 = trunc i32 %1012 to i16
  %1014 = getelementptr inbounds i16, i16* %954, i64 %1001
  store i16 %1013, i16* %1014, align 4
  %1015 = or i64 %1001, 1
  %1016 = load i8, i8* %1006, align 1
  %1017 = zext i8 %1016 to i32
  %1018 = mul nuw nsw i32 %23, %1017
  %1019 = getelementptr inbounds i8, i8* %1002, i64 2
  %1020 = load i8, i8* %1019, align 1
  %1021 = zext i8 %1020 to i32
  %1022 = mul nuw nsw i32 %25, %1021
  %1023 = add nuw nsw i32 %1018, 64
  %1024 = add nuw nsw i32 %1023, %1022
  %1025 = lshr i32 %1024, 7
  %1026 = trunc i32 %1025 to i16
  %1027 = getelementptr inbounds i16, i16* %954, i64 %1015
  store i16 %1026, i16* %1027, align 2
  %1028 = add nuw nsw i64 %1001, 2
  %1029 = icmp eq i64 %1028, 16
  br i1 %1029, label %1030, label %1000, !llvm.loop !350

1030:                                             ; preds = %1000, %964
  %1031 = phi i8* [ %969, %964 ], [ %1019, %1000 ]
  %1032 = getelementptr inbounds i8, i8* %1031, i64 %21
  %1033 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 64
  %1034 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 64
  %1035 = bitcast i16* %1034 to i8*
  %1036 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 80
  %1037 = bitcast i16* %1036 to i8*
  %1038 = add nuw nsw i64 %21, 17
  %1039 = getelementptr i8, i8* %1031, i64 %1038
  %1040 = icmp ugt i8* %1039, %1035
  %1041 = icmp ult i8* %1032, %1037
  %1042 = and i1 %1040, %1041
  br i1 %1042, label %1079, label %1043

1043:                                             ; preds = %1030
  %1044 = insertelement <8 x i32> undef, i32 %23, i32 0
  %1045 = shufflevector <8 x i32> %1044, <8 x i32> undef, <8 x i32> zeroinitializer
  %1046 = insertelement <8 x i32> undef, i32 %25, i32 0
  %1047 = shufflevector <8 x i32> %1046, <8 x i32> undef, <8 x i32> zeroinitializer
  %1048 = getelementptr i8, i8* %1032, i64 16
  %1049 = bitcast i8* %1032 to <8 x i8>*
  %1050 = load <8 x i8>, <8 x i8>* %1049, align 1, !alias.scope !351
  %1051 = zext <8 x i8> %1050 to <8 x i32>
  %1052 = mul nuw nsw <8 x i32> %1045, %1051
  %1053 = getelementptr inbounds i8, i8* %1032, i64 1
  %1054 = bitcast i8* %1053 to <8 x i8>*
  %1055 = load <8 x i8>, <8 x i8>* %1054, align 1, !alias.scope !351
  %1056 = zext <8 x i8> %1055 to <8 x i32>
  %1057 = mul nuw nsw <8 x i32> %1047, %1056
  %1058 = add nuw nsw <8 x i32> %1052, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %1059 = add nuw nsw <8 x i32> %1058, %1057
  %1060 = lshr <8 x i32> %1059, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %1061 = trunc <8 x i32> %1060 to <8 x i16>
  %1062 = bitcast i16* %1033 to <8 x i16>*
  store <8 x i16> %1061, <8 x i16>* %1062, align 16, !alias.scope !354, !noalias !351
  %1063 = getelementptr i8, i8* %1032, i64 8
  %1064 = bitcast i8* %1063 to <8 x i8>*
  %1065 = load <8 x i8>, <8 x i8>* %1064, align 1, !alias.scope !351
  %1066 = zext <8 x i8> %1065 to <8 x i32>
  %1067 = mul nuw nsw <8 x i32> %1045, %1066
  %1068 = getelementptr inbounds i8, i8* %1063, i64 1
  %1069 = bitcast i8* %1068 to <8 x i8>*
  %1070 = load <8 x i8>, <8 x i8>* %1069, align 1, !alias.scope !351
  %1071 = zext <8 x i8> %1070 to <8 x i32>
  %1072 = mul nuw nsw <8 x i32> %1047, %1071
  %1073 = add nuw nsw <8 x i32> %1067, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %1074 = add nuw nsw <8 x i32> %1073, %1072
  %1075 = lshr <8 x i32> %1074, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %1076 = trunc <8 x i32> %1075 to <8 x i16>
  %1077 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 72
  %1078 = bitcast i16* %1077 to <8 x i16>*
  store <8 x i16> %1076, <8 x i16>* %1078, align 16, !alias.scope !354, !noalias !351
  br label %1109

1079:                                             ; preds = %1030, %1079
  %1080 = phi i64 [ %1107, %1079 ], [ 0, %1030 ]
  %1081 = phi i8* [ %1098, %1079 ], [ %1032, %1030 ]
  %1082 = load i8, i8* %1081, align 1
  %1083 = zext i8 %1082 to i32
  %1084 = mul nuw nsw i32 %23, %1083
  %1085 = getelementptr inbounds i8, i8* %1081, i64 1
  %1086 = load i8, i8* %1085, align 1
  %1087 = zext i8 %1086 to i32
  %1088 = mul nuw nsw i32 %25, %1087
  %1089 = add nuw nsw i32 %1084, 64
  %1090 = add nuw nsw i32 %1089, %1088
  %1091 = lshr i32 %1090, 7
  %1092 = trunc i32 %1091 to i16
  %1093 = getelementptr inbounds i16, i16* %1033, i64 %1080
  store i16 %1092, i16* %1093, align 4
  %1094 = or i64 %1080, 1
  %1095 = load i8, i8* %1085, align 1
  %1096 = zext i8 %1095 to i32
  %1097 = mul nuw nsw i32 %23, %1096
  %1098 = getelementptr inbounds i8, i8* %1081, i64 2
  %1099 = load i8, i8* %1098, align 1
  %1100 = zext i8 %1099 to i32
  %1101 = mul nuw nsw i32 %25, %1100
  %1102 = add nuw nsw i32 %1097, 64
  %1103 = add nuw nsw i32 %1102, %1101
  %1104 = lshr i32 %1103, 7
  %1105 = trunc i32 %1104 to i16
  %1106 = getelementptr inbounds i16, i16* %1033, i64 %1094
  store i16 %1105, i16* %1106, align 2
  %1107 = add nuw nsw i64 %1080, 2
  %1108 = icmp eq i64 %1107, 16
  br i1 %1108, label %1109, label %1079, !llvm.loop !356

1109:                                             ; preds = %1079, %1043
  %1110 = phi i8* [ %1048, %1043 ], [ %1098, %1079 ]
  %1111 = getelementptr inbounds i8, i8* %1110, i64 %21
  %1112 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 80
  %1113 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 80
  %1114 = bitcast i16* %1113 to i8*
  %1115 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 96
  %1116 = bitcast i16* %1115 to i8*
  %1117 = add nuw nsw i64 %21, 17
  %1118 = getelementptr i8, i8* %1110, i64 %1117
  %1119 = icmp ugt i8* %1118, %1114
  %1120 = icmp ult i8* %1111, %1116
  %1121 = and i1 %1119, %1120
  br i1 %1121, label %1158, label %1122

1122:                                             ; preds = %1109
  %1123 = insertelement <8 x i32> undef, i32 %23, i32 0
  %1124 = shufflevector <8 x i32> %1123, <8 x i32> undef, <8 x i32> zeroinitializer
  %1125 = insertelement <8 x i32> undef, i32 %25, i32 0
  %1126 = shufflevector <8 x i32> %1125, <8 x i32> undef, <8 x i32> zeroinitializer
  %1127 = getelementptr i8, i8* %1111, i64 16
  %1128 = bitcast i8* %1111 to <8 x i8>*
  %1129 = load <8 x i8>, <8 x i8>* %1128, align 1, !alias.scope !357
  %1130 = zext <8 x i8> %1129 to <8 x i32>
  %1131 = mul nuw nsw <8 x i32> %1124, %1130
  %1132 = getelementptr inbounds i8, i8* %1111, i64 1
  %1133 = bitcast i8* %1132 to <8 x i8>*
  %1134 = load <8 x i8>, <8 x i8>* %1133, align 1, !alias.scope !357
  %1135 = zext <8 x i8> %1134 to <8 x i32>
  %1136 = mul nuw nsw <8 x i32> %1126, %1135
  %1137 = add nuw nsw <8 x i32> %1131, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %1138 = add nuw nsw <8 x i32> %1137, %1136
  %1139 = lshr <8 x i32> %1138, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %1140 = trunc <8 x i32> %1139 to <8 x i16>
  %1141 = bitcast i16* %1112 to <8 x i16>*
  store <8 x i16> %1140, <8 x i16>* %1141, align 16, !alias.scope !360, !noalias !357
  %1142 = getelementptr i8, i8* %1111, i64 8
  %1143 = bitcast i8* %1142 to <8 x i8>*
  %1144 = load <8 x i8>, <8 x i8>* %1143, align 1, !alias.scope !357
  %1145 = zext <8 x i8> %1144 to <8 x i32>
  %1146 = mul nuw nsw <8 x i32> %1124, %1145
  %1147 = getelementptr inbounds i8, i8* %1142, i64 1
  %1148 = bitcast i8* %1147 to <8 x i8>*
  %1149 = load <8 x i8>, <8 x i8>* %1148, align 1, !alias.scope !357
  %1150 = zext <8 x i8> %1149 to <8 x i32>
  %1151 = mul nuw nsw <8 x i32> %1126, %1150
  %1152 = add nuw nsw <8 x i32> %1146, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %1153 = add nuw nsw <8 x i32> %1152, %1151
  %1154 = lshr <8 x i32> %1153, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %1155 = trunc <8 x i32> %1154 to <8 x i16>
  %1156 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 88
  %1157 = bitcast i16* %1156 to <8 x i16>*
  store <8 x i16> %1155, <8 x i16>* %1157, align 16, !alias.scope !360, !noalias !357
  br label %1188

1158:                                             ; preds = %1109, %1158
  %1159 = phi i64 [ %1186, %1158 ], [ 0, %1109 ]
  %1160 = phi i8* [ %1177, %1158 ], [ %1111, %1109 ]
  %1161 = load i8, i8* %1160, align 1
  %1162 = zext i8 %1161 to i32
  %1163 = mul nuw nsw i32 %23, %1162
  %1164 = getelementptr inbounds i8, i8* %1160, i64 1
  %1165 = load i8, i8* %1164, align 1
  %1166 = zext i8 %1165 to i32
  %1167 = mul nuw nsw i32 %25, %1166
  %1168 = add nuw nsw i32 %1163, 64
  %1169 = add nuw nsw i32 %1168, %1167
  %1170 = lshr i32 %1169, 7
  %1171 = trunc i32 %1170 to i16
  %1172 = getelementptr inbounds i16, i16* %1112, i64 %1159
  store i16 %1171, i16* %1172, align 4
  %1173 = or i64 %1159, 1
  %1174 = load i8, i8* %1164, align 1
  %1175 = zext i8 %1174 to i32
  %1176 = mul nuw nsw i32 %23, %1175
  %1177 = getelementptr inbounds i8, i8* %1160, i64 2
  %1178 = load i8, i8* %1177, align 1
  %1179 = zext i8 %1178 to i32
  %1180 = mul nuw nsw i32 %25, %1179
  %1181 = add nuw nsw i32 %1176, 64
  %1182 = add nuw nsw i32 %1181, %1180
  %1183 = lshr i32 %1182, 7
  %1184 = trunc i32 %1183 to i16
  %1185 = getelementptr inbounds i16, i16* %1112, i64 %1173
  store i16 %1184, i16* %1185, align 2
  %1186 = add nuw nsw i64 %1159, 2
  %1187 = icmp eq i64 %1186, 16
  br i1 %1187, label %1188, label %1158, !llvm.loop !362

1188:                                             ; preds = %1158, %1122
  %1189 = phi i8* [ %1127, %1122 ], [ %1177, %1158 ]
  %1190 = getelementptr inbounds i8, i8* %1189, i64 %21
  %1191 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 96
  %1192 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 96
  %1193 = bitcast i16* %1192 to i8*
  %1194 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 112
  %1195 = bitcast i16* %1194 to i8*
  %1196 = add nuw nsw i64 %21, 17
  %1197 = getelementptr i8, i8* %1189, i64 %1196
  %1198 = icmp ugt i8* %1197, %1193
  %1199 = icmp ult i8* %1190, %1195
  %1200 = and i1 %1198, %1199
  br i1 %1200, label %1237, label %1201

1201:                                             ; preds = %1188
  %1202 = insertelement <8 x i32> undef, i32 %23, i32 0
  %1203 = shufflevector <8 x i32> %1202, <8 x i32> undef, <8 x i32> zeroinitializer
  %1204 = insertelement <8 x i32> undef, i32 %25, i32 0
  %1205 = shufflevector <8 x i32> %1204, <8 x i32> undef, <8 x i32> zeroinitializer
  %1206 = getelementptr i8, i8* %1190, i64 16
  %1207 = bitcast i8* %1190 to <8 x i8>*
  %1208 = load <8 x i8>, <8 x i8>* %1207, align 1, !alias.scope !363
  %1209 = zext <8 x i8> %1208 to <8 x i32>
  %1210 = mul nuw nsw <8 x i32> %1203, %1209
  %1211 = getelementptr inbounds i8, i8* %1190, i64 1
  %1212 = bitcast i8* %1211 to <8 x i8>*
  %1213 = load <8 x i8>, <8 x i8>* %1212, align 1, !alias.scope !363
  %1214 = zext <8 x i8> %1213 to <8 x i32>
  %1215 = mul nuw nsw <8 x i32> %1205, %1214
  %1216 = add nuw nsw <8 x i32> %1210, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %1217 = add nuw nsw <8 x i32> %1216, %1215
  %1218 = lshr <8 x i32> %1217, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %1219 = trunc <8 x i32> %1218 to <8 x i16>
  %1220 = bitcast i16* %1191 to <8 x i16>*
  store <8 x i16> %1219, <8 x i16>* %1220, align 16, !alias.scope !366, !noalias !363
  %1221 = getelementptr i8, i8* %1190, i64 8
  %1222 = bitcast i8* %1221 to <8 x i8>*
  %1223 = load <8 x i8>, <8 x i8>* %1222, align 1, !alias.scope !363
  %1224 = zext <8 x i8> %1223 to <8 x i32>
  %1225 = mul nuw nsw <8 x i32> %1203, %1224
  %1226 = getelementptr inbounds i8, i8* %1221, i64 1
  %1227 = bitcast i8* %1226 to <8 x i8>*
  %1228 = load <8 x i8>, <8 x i8>* %1227, align 1, !alias.scope !363
  %1229 = zext <8 x i8> %1228 to <8 x i32>
  %1230 = mul nuw nsw <8 x i32> %1205, %1229
  %1231 = add nuw nsw <8 x i32> %1225, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %1232 = add nuw nsw <8 x i32> %1231, %1230
  %1233 = lshr <8 x i32> %1232, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %1234 = trunc <8 x i32> %1233 to <8 x i16>
  %1235 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 104
  %1236 = bitcast i16* %1235 to <8 x i16>*
  store <8 x i16> %1234, <8 x i16>* %1236, align 16, !alias.scope !366, !noalias !363
  br label %1267

1237:                                             ; preds = %1188, %1237
  %1238 = phi i64 [ %1265, %1237 ], [ 0, %1188 ]
  %1239 = phi i8* [ %1256, %1237 ], [ %1190, %1188 ]
  %1240 = load i8, i8* %1239, align 1
  %1241 = zext i8 %1240 to i32
  %1242 = mul nuw nsw i32 %23, %1241
  %1243 = getelementptr inbounds i8, i8* %1239, i64 1
  %1244 = load i8, i8* %1243, align 1
  %1245 = zext i8 %1244 to i32
  %1246 = mul nuw nsw i32 %25, %1245
  %1247 = add nuw nsw i32 %1242, 64
  %1248 = add nuw nsw i32 %1247, %1246
  %1249 = lshr i32 %1248, 7
  %1250 = trunc i32 %1249 to i16
  %1251 = getelementptr inbounds i16, i16* %1191, i64 %1238
  store i16 %1250, i16* %1251, align 4
  %1252 = or i64 %1238, 1
  %1253 = load i8, i8* %1243, align 1
  %1254 = zext i8 %1253 to i32
  %1255 = mul nuw nsw i32 %23, %1254
  %1256 = getelementptr inbounds i8, i8* %1239, i64 2
  %1257 = load i8, i8* %1256, align 1
  %1258 = zext i8 %1257 to i32
  %1259 = mul nuw nsw i32 %25, %1258
  %1260 = add nuw nsw i32 %1255, 64
  %1261 = add nuw nsw i32 %1260, %1259
  %1262 = lshr i32 %1261, 7
  %1263 = trunc i32 %1262 to i16
  %1264 = getelementptr inbounds i16, i16* %1191, i64 %1252
  store i16 %1263, i16* %1264, align 2
  %1265 = add nuw nsw i64 %1238, 2
  %1266 = icmp eq i64 %1265, 16
  br i1 %1266, label %1267, label %1237, !llvm.loop !368

1267:                                             ; preds = %1237, %1201
  %1268 = phi i8* [ %1206, %1201 ], [ %1256, %1237 ]
  %1269 = getelementptr inbounds i8, i8* %1268, i64 %21
  %1270 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 112
  %1271 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 112
  %1272 = bitcast i16* %1271 to i8*
  %1273 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 128
  %1274 = bitcast i16* %1273 to i8*
  %1275 = add nuw nsw i64 %21, 17
  %1276 = getelementptr i8, i8* %1268, i64 %1275
  %1277 = icmp ugt i8* %1276, %1272
  %1278 = icmp ult i8* %1269, %1274
  %1279 = and i1 %1277, %1278
  br i1 %1279, label %1316, label %1280

1280:                                             ; preds = %1267
  %1281 = insertelement <8 x i32> undef, i32 %23, i32 0
  %1282 = shufflevector <8 x i32> %1281, <8 x i32> undef, <8 x i32> zeroinitializer
  %1283 = insertelement <8 x i32> undef, i32 %25, i32 0
  %1284 = shufflevector <8 x i32> %1283, <8 x i32> undef, <8 x i32> zeroinitializer
  %1285 = getelementptr i8, i8* %1269, i64 16
  %1286 = bitcast i8* %1269 to <8 x i8>*
  %1287 = load <8 x i8>, <8 x i8>* %1286, align 1, !alias.scope !369
  %1288 = zext <8 x i8> %1287 to <8 x i32>
  %1289 = mul nuw nsw <8 x i32> %1282, %1288
  %1290 = getelementptr inbounds i8, i8* %1269, i64 1
  %1291 = bitcast i8* %1290 to <8 x i8>*
  %1292 = load <8 x i8>, <8 x i8>* %1291, align 1, !alias.scope !369
  %1293 = zext <8 x i8> %1292 to <8 x i32>
  %1294 = mul nuw nsw <8 x i32> %1284, %1293
  %1295 = add nuw nsw <8 x i32> %1289, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %1296 = add nuw nsw <8 x i32> %1295, %1294
  %1297 = lshr <8 x i32> %1296, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %1298 = trunc <8 x i32> %1297 to <8 x i16>
  %1299 = bitcast i16* %1270 to <8 x i16>*
  store <8 x i16> %1298, <8 x i16>* %1299, align 16, !alias.scope !372, !noalias !369
  %1300 = getelementptr i8, i8* %1269, i64 8
  %1301 = bitcast i8* %1300 to <8 x i8>*
  %1302 = load <8 x i8>, <8 x i8>* %1301, align 1, !alias.scope !369
  %1303 = zext <8 x i8> %1302 to <8 x i32>
  %1304 = mul nuw nsw <8 x i32> %1282, %1303
  %1305 = getelementptr inbounds i8, i8* %1300, i64 1
  %1306 = bitcast i8* %1305 to <8 x i8>*
  %1307 = load <8 x i8>, <8 x i8>* %1306, align 1, !alias.scope !369
  %1308 = zext <8 x i8> %1307 to <8 x i32>
  %1309 = mul nuw nsw <8 x i32> %1284, %1308
  %1310 = add nuw nsw <8 x i32> %1304, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %1311 = add nuw nsw <8 x i32> %1310, %1309
  %1312 = lshr <8 x i32> %1311, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %1313 = trunc <8 x i32> %1312 to <8 x i16>
  %1314 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 120
  %1315 = bitcast i16* %1314 to <8 x i16>*
  store <8 x i16> %1313, <8 x i16>* %1315, align 16, !alias.scope !372, !noalias !369
  br label %1346

1316:                                             ; preds = %1267, %1316
  %1317 = phi i64 [ %1344, %1316 ], [ 0, %1267 ]
  %1318 = phi i8* [ %1335, %1316 ], [ %1269, %1267 ]
  %1319 = load i8, i8* %1318, align 1
  %1320 = zext i8 %1319 to i32
  %1321 = mul nuw nsw i32 %23, %1320
  %1322 = getelementptr inbounds i8, i8* %1318, i64 1
  %1323 = load i8, i8* %1322, align 1
  %1324 = zext i8 %1323 to i32
  %1325 = mul nuw nsw i32 %25, %1324
  %1326 = add nuw nsw i32 %1321, 64
  %1327 = add nuw nsw i32 %1326, %1325
  %1328 = lshr i32 %1327, 7
  %1329 = trunc i32 %1328 to i16
  %1330 = getelementptr inbounds i16, i16* %1270, i64 %1317
  store i16 %1329, i16* %1330, align 4
  %1331 = or i64 %1317, 1
  %1332 = load i8, i8* %1322, align 1
  %1333 = zext i8 %1332 to i32
  %1334 = mul nuw nsw i32 %23, %1333
  %1335 = getelementptr inbounds i8, i8* %1318, i64 2
  %1336 = load i8, i8* %1335, align 1
  %1337 = zext i8 %1336 to i32
  %1338 = mul nuw nsw i32 %25, %1337
  %1339 = add nuw nsw i32 %1334, 64
  %1340 = add nuw nsw i32 %1339, %1338
  %1341 = lshr i32 %1340, 7
  %1342 = trunc i32 %1341 to i16
  %1343 = getelementptr inbounds i16, i16* %1270, i64 %1331
  store i16 %1342, i16* %1343, align 2
  %1344 = add nuw nsw i64 %1317, 2
  %1345 = icmp eq i64 %1344, 16
  br i1 %1345, label %1346, label %1316, !llvm.loop !374

1346:                                             ; preds = %1316, %1280
  %1347 = phi i8* [ %1285, %1280 ], [ %1335, %1316 ]
  %1348 = getelementptr inbounds i8, i8* %1347, i64 %21
  %1349 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 128
  %1350 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 128
  %1351 = bitcast i16* %1350 to i8*
  %1352 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 1, i64 0
  %1353 = bitcast i16* %1352 to i8*
  %1354 = add nuw nsw i64 %21, 17
  %1355 = getelementptr i8, i8* %1347, i64 %1354
  %1356 = icmp ugt i8* %1355, %1351
  %1357 = icmp ult i8* %1348, %1353
  %1358 = and i1 %1356, %1357
  br i1 %1358, label %1394, label %1359

1359:                                             ; preds = %1346
  %1360 = insertelement <8 x i32> undef, i32 %23, i32 0
  %1361 = shufflevector <8 x i32> %1360, <8 x i32> undef, <8 x i32> zeroinitializer
  %1362 = insertelement <8 x i32> undef, i32 %25, i32 0
  %1363 = shufflevector <8 x i32> %1362, <8 x i32> undef, <8 x i32> zeroinitializer
  %1364 = bitcast i8* %1348 to <8 x i8>*
  %1365 = load <8 x i8>, <8 x i8>* %1364, align 1, !alias.scope !375
  %1366 = zext <8 x i8> %1365 to <8 x i32>
  %1367 = mul nuw nsw <8 x i32> %1361, %1366
  %1368 = getelementptr inbounds i8, i8* %1348, i64 1
  %1369 = bitcast i8* %1368 to <8 x i8>*
  %1370 = load <8 x i8>, <8 x i8>* %1369, align 1, !alias.scope !375
  %1371 = zext <8 x i8> %1370 to <8 x i32>
  %1372 = mul nuw nsw <8 x i32> %1363, %1371
  %1373 = add nuw nsw <8 x i32> %1367, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %1374 = add nuw nsw <8 x i32> %1373, %1372
  %1375 = lshr <8 x i32> %1374, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %1376 = trunc <8 x i32> %1375 to <8 x i16>
  %1377 = bitcast i16* %1349 to <8 x i16>*
  store <8 x i16> %1376, <8 x i16>* %1377, align 16, !alias.scope !378, !noalias !375
  %1378 = getelementptr i8, i8* %1348, i64 8
  %1379 = bitcast i8* %1378 to <8 x i8>*
  %1380 = load <8 x i8>, <8 x i8>* %1379, align 1, !alias.scope !375
  %1381 = zext <8 x i8> %1380 to <8 x i32>
  %1382 = mul nuw nsw <8 x i32> %1361, %1381
  %1383 = getelementptr inbounds i8, i8* %1378, i64 1
  %1384 = bitcast i8* %1383 to <8 x i8>*
  %1385 = load <8 x i8>, <8 x i8>* %1384, align 1, !alias.scope !375
  %1386 = zext <8 x i8> %1385 to <8 x i32>
  %1387 = mul nuw nsw <8 x i32> %1363, %1386
  %1388 = add nuw nsw <8 x i32> %1382, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %1389 = add nuw nsw <8 x i32> %1388, %1387
  %1390 = lshr <8 x i32> %1389, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %1391 = trunc <8 x i32> %1390 to <8 x i16>
  %1392 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 136
  %1393 = bitcast i16* %1392 to <8 x i16>*
  store <8 x i16> %1391, <8 x i16>* %1393, align 16, !alias.scope !378, !noalias !375
  br label %1424

1394:                                             ; preds = %1346, %1394
  %1395 = phi i64 [ %1422, %1394 ], [ 0, %1346 ]
  %1396 = phi i8* [ %1413, %1394 ], [ %1348, %1346 ]
  %1397 = load i8, i8* %1396, align 1
  %1398 = zext i8 %1397 to i32
  %1399 = mul nuw nsw i32 %23, %1398
  %1400 = getelementptr inbounds i8, i8* %1396, i64 1
  %1401 = load i8, i8* %1400, align 1
  %1402 = zext i8 %1401 to i32
  %1403 = mul nuw nsw i32 %25, %1402
  %1404 = add nuw nsw i32 %1399, 64
  %1405 = add nuw nsw i32 %1404, %1403
  %1406 = lshr i32 %1405, 7
  %1407 = trunc i32 %1406 to i16
  %1408 = getelementptr inbounds i16, i16* %1349, i64 %1395
  store i16 %1407, i16* %1408, align 4
  %1409 = or i64 %1395, 1
  %1410 = load i8, i8* %1400, align 1
  %1411 = zext i8 %1410 to i32
  %1412 = mul nuw nsw i32 %23, %1411
  %1413 = getelementptr inbounds i8, i8* %1396, i64 2
  %1414 = load i8, i8* %1413, align 1
  %1415 = zext i8 %1414 to i32
  %1416 = mul nuw nsw i32 %25, %1415
  %1417 = add nuw nsw i32 %1412, 64
  %1418 = add nuw nsw i32 %1417, %1416
  %1419 = lshr i32 %1418, 7
  %1420 = trunc i32 %1419 to i16
  %1421 = getelementptr inbounds i16, i16* %1349, i64 %1409
  store i16 %1420, i16* %1421, align 2
  %1422 = add nuw nsw i64 %1395, 2
  %1423 = icmp eq i64 %1422, 16
  br i1 %1423, label %1424, label %1394, !llvm.loop !380

1424:                                             ; preds = %1394, %1359
  %1425 = sext i32 %3 to i64
  %1426 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %1425, i64 0
  %1427 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %1425, i64 1
  %1428 = load i8, i8* %1426, align 2
  %1429 = zext i8 %1428 to i32
  %1430 = load i8, i8* %1427, align 1
  %1431 = zext i8 %1430 to i32
  %1432 = getelementptr inbounds [128 x i8], [128 x i8]* %11, i64 0, i64 16
  %1433 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 32
  %1434 = bitcast i16* %1433 to i8*
  %1435 = icmp ult i8* %12, %1434
  %1436 = icmp ugt i8* %1432, %10
  %1437 = and i1 %1435, %1436
  br i1 %1437, label %147, label %1438

1438:                                             ; preds = %1424
  %1439 = insertelement <8 x i32> undef, i32 %1429, i32 0
  %1440 = shufflevector <8 x i32> %1439, <8 x i32> undef, <8 x i32> zeroinitializer
  %1441 = insertelement <8 x i32> undef, i32 %1431, i32 0
  %1442 = shufflevector <8 x i32> %1441, <8 x i32> undef, <8 x i32> zeroinitializer
  %1443 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 16
  %1444 = bitcast [144 x i16]* %9 to <8 x i16>*
  %1445 = load <8 x i16>, <8 x i16>* %1444, align 16, !alias.scope !381
  %1446 = zext <8 x i16> %1445 to <8 x i32>
  %1447 = mul nuw nsw <8 x i32> %1440, %1446
  %1448 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 16
  %1449 = bitcast i16* %1448 to <8 x i16>*
  %1450 = load <8 x i16>, <8 x i16>* %1449, align 16, !alias.scope !381
  %1451 = zext <8 x i16> %1450 to <8 x i32>
  %1452 = mul nuw nsw <8 x i32> %1442, %1451
  %1453 = add nuw nsw <8 x i32> %1447, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %1454 = add nuw nsw <8 x i32> %1453, %1452
  %1455 = lshr <8 x i32> %1454, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %1456 = trunc <8 x i32> %1455 to <8 x i8>
  %1457 = bitcast [128 x i8]* %11 to <8 x i8>*
  store <8 x i8> %1456, <8 x i8>* %1457, align 16, !alias.scope !384, !noalias !381
  %1458 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 8
  %1459 = bitcast i16* %1458 to <8 x i16>*
  %1460 = load <8 x i16>, <8 x i16>* %1459, align 16, !alias.scope !381
  %1461 = zext <8 x i16> %1460 to <8 x i32>
  %1462 = mul nuw nsw <8 x i32> %1440, %1461
  %1463 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 24
  %1464 = bitcast i16* %1463 to <8 x i16>*
  %1465 = load <8 x i16>, <8 x i16>* %1464, align 16, !alias.scope !381
  %1466 = zext <8 x i16> %1465 to <8 x i32>
  %1467 = mul nuw nsw <8 x i32> %1442, %1466
  %1468 = add nuw nsw <8 x i32> %1462, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %1469 = add nuw nsw <8 x i32> %1468, %1467
  %1470 = lshr <8 x i32> %1469, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %1471 = trunc <8 x i32> %1470 to <8 x i8>
  %1472 = getelementptr inbounds [128 x i8], [128 x i8]* %11, i64 0, i64 8
  %1473 = bitcast i8* %1472 to <8 x i8>*
  store <8 x i8> %1471, <8 x i8>* %1473, align 8, !alias.scope !384, !noalias !381
  br label %179
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_variance8x16_c(i8* nocapture readonly, i32, i8* nocapture readonly, i32, i32* nocapture) local_unnamed_addr #2 {
  store i32 0, i32* %4, align 4
  %6 = sext i32 %1 to i64
  %7 = sext i32 %3 to i64
  br label %8

8:                                                ; preds = %8, %5
  %9 = phi i32 [ 0, %5 ], [ %91, %8 ]
  %10 = phi i32 [ 0, %5 ], [ %89, %8 ]
  %11 = phi i8* [ %0, %5 ], [ %92, %8 ]
  %12 = phi i32 [ 0, %5 ], [ %94, %8 ]
  %13 = phi i8* [ %2, %5 ], [ %93, %8 ]
  %14 = load i8, i8* %11, align 1
  %15 = zext i8 %14 to i32
  %16 = load i8, i8* %13, align 1
  %17 = zext i8 %16 to i32
  %18 = sub nsw i32 %15, %17
  %19 = add nsw i32 %18, %10
  %20 = mul nsw i32 %18, %18
  %21 = add i32 %20, %9
  store i32 %21, i32* %4, align 4
  %22 = getelementptr inbounds i8, i8* %11, i64 1
  %23 = load i8, i8* %22, align 1
  %24 = zext i8 %23 to i32
  %25 = getelementptr inbounds i8, i8* %13, i64 1
  %26 = load i8, i8* %25, align 1
  %27 = zext i8 %26 to i32
  %28 = sub nsw i32 %24, %27
  %29 = add nsw i32 %28, %19
  %30 = mul nsw i32 %28, %28
  %31 = add i32 %30, %21
  store i32 %31, i32* %4, align 4
  %32 = getelementptr inbounds i8, i8* %11, i64 2
  %33 = load i8, i8* %32, align 1
  %34 = zext i8 %33 to i32
  %35 = getelementptr inbounds i8, i8* %13, i64 2
  %36 = load i8, i8* %35, align 1
  %37 = zext i8 %36 to i32
  %38 = sub nsw i32 %34, %37
  %39 = add nsw i32 %38, %29
  %40 = mul nsw i32 %38, %38
  %41 = add i32 %40, %31
  store i32 %41, i32* %4, align 4
  %42 = getelementptr inbounds i8, i8* %11, i64 3
  %43 = load i8, i8* %42, align 1
  %44 = zext i8 %43 to i32
  %45 = getelementptr inbounds i8, i8* %13, i64 3
  %46 = load i8, i8* %45, align 1
  %47 = zext i8 %46 to i32
  %48 = sub nsw i32 %44, %47
  %49 = add nsw i32 %48, %39
  %50 = mul nsw i32 %48, %48
  %51 = add i32 %50, %41
  store i32 %51, i32* %4, align 4
  %52 = getelementptr inbounds i8, i8* %11, i64 4
  %53 = load i8, i8* %52, align 1
  %54 = zext i8 %53 to i32
  %55 = getelementptr inbounds i8, i8* %13, i64 4
  %56 = load i8, i8* %55, align 1
  %57 = zext i8 %56 to i32
  %58 = sub nsw i32 %54, %57
  %59 = add nsw i32 %58, %49
  %60 = mul nsw i32 %58, %58
  %61 = add i32 %60, %51
  store i32 %61, i32* %4, align 4
  %62 = getelementptr inbounds i8, i8* %11, i64 5
  %63 = load i8, i8* %62, align 1
  %64 = zext i8 %63 to i32
  %65 = getelementptr inbounds i8, i8* %13, i64 5
  %66 = load i8, i8* %65, align 1
  %67 = zext i8 %66 to i32
  %68 = sub nsw i32 %64, %67
  %69 = add nsw i32 %68, %59
  %70 = mul nsw i32 %68, %68
  %71 = add i32 %70, %61
  store i32 %71, i32* %4, align 4
  %72 = getelementptr inbounds i8, i8* %11, i64 6
  %73 = load i8, i8* %72, align 1
  %74 = zext i8 %73 to i32
  %75 = getelementptr inbounds i8, i8* %13, i64 6
  %76 = load i8, i8* %75, align 1
  %77 = zext i8 %76 to i32
  %78 = sub nsw i32 %74, %77
  %79 = add nsw i32 %78, %69
  %80 = mul nsw i32 %78, %78
  %81 = add i32 %80, %71
  store i32 %81, i32* %4, align 4
  %82 = getelementptr inbounds i8, i8* %11, i64 7
  %83 = load i8, i8* %82, align 1
  %84 = zext i8 %83 to i32
  %85 = getelementptr inbounds i8, i8* %13, i64 7
  %86 = load i8, i8* %85, align 1
  %87 = zext i8 %86 to i32
  %88 = sub nsw i32 %84, %87
  %89 = add nsw i32 %88, %79
  %90 = mul nsw i32 %88, %88
  %91 = add i32 %90, %81
  store i32 %91, i32* %4, align 4
  %92 = getelementptr inbounds i8, i8* %11, i64 %6
  %93 = getelementptr inbounds i8, i8* %13, i64 %7
  %94 = add nuw nsw i32 %12, 1
  %95 = icmp eq i32 %94, 16
  br i1 %95, label %96, label %8

96:                                               ; preds = %8
  %97 = sext i32 %89 to i64
  %98 = mul nsw i64 %97, %97
  %99 = lshr i64 %98, 7
  %100 = trunc i64 %99 to i32
  %101 = sub i32 %91, %100
  ret i32 %101
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_sub_pixel_variance8x16_c(i8* nocapture readonly, i32, i32, i32, i8* nocapture readonly, i32, i32* nocapture) local_unnamed_addr #2 {
  %8 = alloca [136 x i16], align 16
  %9 = alloca [128 x i8], align 16
  %10 = bitcast [136 x i16]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 272, i8* nonnull %10) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %10, i8 -86, i64 272, i1 false)
  %11 = getelementptr inbounds [128 x i8], [128 x i8]* %9, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %11) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %11, i8 -86, i64 128, i1 false)
  %12 = getelementptr inbounds [136 x i16], [136 x i16]* %8, i64 0, i64 0
  %13 = sext i32 %2 to i64
  %14 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %13, i64 0
  %15 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %13, i64 1
  %16 = add i32 %1, -8
  %17 = zext i32 %16 to i64
  %18 = load i8, i8* %14, align 2
  %19 = zext i8 %18 to i32
  %20 = load i8, i8* %15, align 1
  %21 = zext i8 %20 to i32
  %22 = insertelement <8 x i32> undef, i32 %19, i32 0
  %23 = shufflevector <8 x i32> %22, <8 x i32> undef, <8 x i32> zeroinitializer
  %24 = insertelement <8 x i32> undef, i32 %21, i32 0
  %25 = shufflevector <8 x i32> %24, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %26

26:                                               ; preds = %168, %7
  %27 = phi i32 [ 0, %7 ], [ %187, %168 ]
  %28 = phi i8* [ %0, %7 ], [ %185, %168 ]
  %29 = phi i16* [ %12, %7 ], [ %186, %168 ]
  %30 = getelementptr inbounds i8, i8* %28, i64 1
  %31 = bitcast i8* %28 to <8 x i8>*
  %32 = load <8 x i8>, <8 x i8>* %31, align 1
  %33 = zext <8 x i8> %32 to <8 x i32>
  %34 = mul nuw nsw <8 x i32> %23, %33
  %35 = getelementptr inbounds i8, i8* %28, i64 8
  %36 = bitcast i8* %30 to <8 x i8>*
  %37 = load <8 x i8>, <8 x i8>* %36, align 1
  %38 = zext <8 x i8> %37 to <8 x i32>
  %39 = mul nuw nsw <8 x i32> %25, %38
  %40 = add nuw nsw <8 x i32> %34, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %41 = add nuw nsw <8 x i32> %40, %39
  %42 = lshr <8 x i32> %41, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %43 = trunc <8 x i32> %42 to <8 x i16>
  %44 = bitcast i16* %29 to <8 x i16>*
  store <8 x i16> %43, <8 x i16>* %44, align 2
  %45 = getelementptr inbounds i8, i8* %35, i64 %17
  %46 = or i32 %27, 1
  %47 = icmp eq i32 %46, 17
  br i1 %47, label %48, label %168

48:                                               ; preds = %26
  %49 = sext i32 %3 to i64
  %50 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %49, i64 0
  %51 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %49, i64 1
  %52 = load i8, i8* %50, align 2
  %53 = zext i8 %52 to i32
  %54 = load i8, i8* %51, align 1
  %55 = zext i8 %54 to i32
  br label %56

56:                                               ; preds = %56, %48
  %57 = phi i32 [ 0, %48 ], [ %164, %56 ]
  %58 = phi i16* [ %12, %48 ], [ %162, %56 ]
  %59 = phi i8* [ %11, %48 ], [ %163, %56 ]
  %60 = load i16, i16* %58, align 2
  %61 = zext i16 %60 to i32
  %62 = mul nuw nsw i32 %53, %61
  %63 = getelementptr inbounds i16, i16* %58, i64 8
  %64 = load i16, i16* %63, align 2
  %65 = zext i16 %64 to i32
  %66 = mul nuw nsw i32 %55, %65
  %67 = add nuw nsw i32 %62, 64
  %68 = add nuw nsw i32 %67, %66
  %69 = lshr i32 %68, 7
  %70 = trunc i32 %69 to i8
  store i8 %70, i8* %59, align 1
  %71 = getelementptr inbounds i16, i16* %58, i64 1
  %72 = load i16, i16* %71, align 2
  %73 = zext i16 %72 to i32
  %74 = mul nuw nsw i32 %53, %73
  %75 = getelementptr inbounds i16, i16* %58, i64 9
  %76 = load i16, i16* %75, align 2
  %77 = zext i16 %76 to i32
  %78 = mul nuw nsw i32 %55, %77
  %79 = add nuw nsw i32 %74, 64
  %80 = add nuw nsw i32 %79, %78
  %81 = lshr i32 %80, 7
  %82 = trunc i32 %81 to i8
  %83 = getelementptr inbounds i8, i8* %59, i64 1
  store i8 %82, i8* %83, align 1
  %84 = getelementptr inbounds i16, i16* %58, i64 2
  %85 = load i16, i16* %84, align 2
  %86 = zext i16 %85 to i32
  %87 = mul nuw nsw i32 %53, %86
  %88 = getelementptr inbounds i16, i16* %58, i64 10
  %89 = load i16, i16* %88, align 2
  %90 = zext i16 %89 to i32
  %91 = mul nuw nsw i32 %55, %90
  %92 = add nuw nsw i32 %87, 64
  %93 = add nuw nsw i32 %92, %91
  %94 = lshr i32 %93, 7
  %95 = trunc i32 %94 to i8
  %96 = getelementptr inbounds i8, i8* %59, i64 2
  store i8 %95, i8* %96, align 1
  %97 = getelementptr inbounds i16, i16* %58, i64 3
  %98 = load i16, i16* %97, align 2
  %99 = zext i16 %98 to i32
  %100 = mul nuw nsw i32 %53, %99
  %101 = getelementptr inbounds i16, i16* %58, i64 11
  %102 = load i16, i16* %101, align 2
  %103 = zext i16 %102 to i32
  %104 = mul nuw nsw i32 %55, %103
  %105 = add nuw nsw i32 %100, 64
  %106 = add nuw nsw i32 %105, %104
  %107 = lshr i32 %106, 7
  %108 = trunc i32 %107 to i8
  %109 = getelementptr inbounds i8, i8* %59, i64 3
  store i8 %108, i8* %109, align 1
  %110 = getelementptr inbounds i16, i16* %58, i64 4
  %111 = load i16, i16* %110, align 2
  %112 = zext i16 %111 to i32
  %113 = mul nuw nsw i32 %53, %112
  %114 = getelementptr inbounds i16, i16* %58, i64 12
  %115 = load i16, i16* %114, align 2
  %116 = zext i16 %115 to i32
  %117 = mul nuw nsw i32 %55, %116
  %118 = add nuw nsw i32 %113, 64
  %119 = add nuw nsw i32 %118, %117
  %120 = lshr i32 %119, 7
  %121 = trunc i32 %120 to i8
  %122 = getelementptr inbounds i8, i8* %59, i64 4
  store i8 %121, i8* %122, align 1
  %123 = getelementptr inbounds i16, i16* %58, i64 5
  %124 = load i16, i16* %123, align 2
  %125 = zext i16 %124 to i32
  %126 = mul nuw nsw i32 %53, %125
  %127 = getelementptr inbounds i16, i16* %58, i64 13
  %128 = load i16, i16* %127, align 2
  %129 = zext i16 %128 to i32
  %130 = mul nuw nsw i32 %55, %129
  %131 = add nuw nsw i32 %126, 64
  %132 = add nuw nsw i32 %131, %130
  %133 = lshr i32 %132, 7
  %134 = trunc i32 %133 to i8
  %135 = getelementptr inbounds i8, i8* %59, i64 5
  store i8 %134, i8* %135, align 1
  %136 = getelementptr inbounds i16, i16* %58, i64 6
  %137 = load i16, i16* %136, align 2
  %138 = zext i16 %137 to i32
  %139 = mul nuw nsw i32 %53, %138
  %140 = getelementptr inbounds i16, i16* %58, i64 14
  %141 = load i16, i16* %140, align 2
  %142 = zext i16 %141 to i32
  %143 = mul nuw nsw i32 %55, %142
  %144 = add nuw nsw i32 %139, 64
  %145 = add nuw nsw i32 %144, %143
  %146 = lshr i32 %145, 7
  %147 = trunc i32 %146 to i8
  %148 = getelementptr inbounds i8, i8* %59, i64 6
  store i8 %147, i8* %148, align 1
  %149 = getelementptr inbounds i16, i16* %58, i64 7
  %150 = load i16, i16* %149, align 2
  %151 = zext i16 %150 to i32
  %152 = mul nuw nsw i32 %53, %151
  %153 = getelementptr inbounds i16, i16* %58, i64 15
  %154 = load i16, i16* %153, align 2
  %155 = zext i16 %154 to i32
  %156 = mul nuw nsw i32 %55, %155
  %157 = add nuw nsw i32 %152, 64
  %158 = add nuw nsw i32 %157, %156
  %159 = lshr i32 %158, 7
  %160 = trunc i32 %159 to i8
  %161 = getelementptr inbounds i8, i8* %59, i64 7
  store i8 %160, i8* %161, align 1
  %162 = getelementptr inbounds i16, i16* %58, i64 8
  %163 = getelementptr inbounds i8, i8* %59, i64 8
  %164 = add nuw nsw i32 %57, 1
  %165 = icmp eq i32 %164, 16
  br i1 %165, label %166, label %56

166:                                              ; preds = %56
  %167 = call i32 @vpx_variance8x16_c(i8* nonnull %11, i32 8, i8* %4, i32 %5, i32* %6)
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %11) #4
  call void @llvm.lifetime.end.p0i8(i64 272, i8* nonnull %10) #4
  ret i32 %167

168:                                              ; preds = %26
  %169 = getelementptr inbounds i16, i16* %29, i64 8
  %170 = getelementptr inbounds i8, i8* %45, i64 1
  %171 = bitcast i8* %45 to <8 x i8>*
  %172 = load <8 x i8>, <8 x i8>* %171, align 1
  %173 = zext <8 x i8> %172 to <8 x i32>
  %174 = mul nuw nsw <8 x i32> %23, %173
  %175 = getelementptr inbounds i8, i8* %45, i64 8
  %176 = bitcast i8* %170 to <8 x i8>*
  %177 = load <8 x i8>, <8 x i8>* %176, align 1
  %178 = zext <8 x i8> %177 to <8 x i32>
  %179 = mul nuw nsw <8 x i32> %25, %178
  %180 = add nuw nsw <8 x i32> %174, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %181 = add nuw nsw <8 x i32> %180, %179
  %182 = lshr <8 x i32> %181, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %183 = trunc <8 x i32> %182 to <8 x i16>
  %184 = bitcast i16* %169 to <8 x i16>*
  store <8 x i16> %183, <8 x i16>* %184, align 2
  %185 = getelementptr inbounds i8, i8* %175, i64 %17
  %186 = getelementptr inbounds i16, i16* %29, i64 16
  %187 = add nuw nsw i32 %27, 2
  br label %26
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_sub_pixel_avg_variance8x16_c(i8* nocapture readonly, i32, i32, i32, i8* nocapture readonly, i32, i32* nocapture, i8* nocapture readonly) local_unnamed_addr #2 {
  %9 = alloca [136 x i16], align 16
  %10 = alloca [128 x i8], align 16
  %11 = alloca [128 x i8], align 16
  %12 = bitcast [136 x i16]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 272, i8* nonnull %12) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %12, i8 -86, i64 272, i1 false)
  %13 = getelementptr inbounds [128 x i8], [128 x i8]* %10, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %13) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %13, i8 -86, i64 128, i1 false)
  %14 = getelementptr inbounds [128 x i8], [128 x i8]* %11, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %14) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %14, i8 -86, i64 128, i1 false)
  %15 = getelementptr inbounds [136 x i16], [136 x i16]* %9, i64 0, i64 0
  %16 = sext i32 %2 to i64
  %17 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %16, i64 0
  %18 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %16, i64 1
  %19 = add i32 %1, -8
  %20 = zext i32 %19 to i64
  %21 = load i8, i8* %17, align 2
  %22 = zext i8 %21 to i32
  %23 = load i8, i8* %18, align 1
  %24 = zext i8 %23 to i32
  %25 = insertelement <8 x i32> undef, i32 %22, i32 0
  %26 = shufflevector <8 x i32> %25, <8 x i32> undef, <8 x i32> zeroinitializer
  %27 = insertelement <8 x i32> undef, i32 %24, i32 0
  %28 = shufflevector <8 x i32> %27, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %29

29:                                               ; preds = %266, %8
  %30 = phi i32 [ 0, %8 ], [ %285, %266 ]
  %31 = phi i8* [ %0, %8 ], [ %283, %266 ]
  %32 = phi i16* [ %15, %8 ], [ %284, %266 ]
  %33 = getelementptr inbounds i8, i8* %31, i64 1
  %34 = bitcast i8* %31 to <8 x i8>*
  %35 = load <8 x i8>, <8 x i8>* %34, align 1
  %36 = zext <8 x i8> %35 to <8 x i32>
  %37 = mul nuw nsw <8 x i32> %26, %36
  %38 = getelementptr inbounds i8, i8* %31, i64 8
  %39 = bitcast i8* %33 to <8 x i8>*
  %40 = load <8 x i8>, <8 x i8>* %39, align 1
  %41 = zext <8 x i8> %40 to <8 x i32>
  %42 = mul nuw nsw <8 x i32> %28, %41
  %43 = add nuw nsw <8 x i32> %37, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %44 = add nuw nsw <8 x i32> %43, %42
  %45 = lshr <8 x i32> %44, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %46 = trunc <8 x i32> %45 to <8 x i16>
  %47 = bitcast i16* %32 to <8 x i16>*
  store <8 x i16> %46, <8 x i16>* %47, align 2
  %48 = getelementptr inbounds i8, i8* %38, i64 %20
  %49 = or i32 %30, 1
  %50 = icmp eq i32 %49, 17
  br i1 %50, label %51, label %266

51:                                               ; preds = %29
  %52 = sext i32 %3 to i64
  %53 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %52, i64 0
  %54 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %52, i64 1
  %55 = load i8, i8* %53, align 2
  %56 = zext i8 %55 to i32
  %57 = load i8, i8* %54, align 1
  %58 = zext i8 %57 to i32
  br label %59

59:                                               ; preds = %59, %51
  %60 = phi i32 [ 0, %51 ], [ %167, %59 ]
  %61 = phi i16* [ %15, %51 ], [ %165, %59 ]
  %62 = phi i8* [ %13, %51 ], [ %166, %59 ]
  %63 = load i16, i16* %61, align 2
  %64 = zext i16 %63 to i32
  %65 = mul nuw nsw i32 %56, %64
  %66 = getelementptr inbounds i16, i16* %61, i64 8
  %67 = load i16, i16* %66, align 2
  %68 = zext i16 %67 to i32
  %69 = mul nuw nsw i32 %58, %68
  %70 = add nuw nsw i32 %65, 64
  %71 = add nuw nsw i32 %70, %69
  %72 = lshr i32 %71, 7
  %73 = trunc i32 %72 to i8
  store i8 %73, i8* %62, align 1
  %74 = getelementptr inbounds i16, i16* %61, i64 1
  %75 = load i16, i16* %74, align 2
  %76 = zext i16 %75 to i32
  %77 = mul nuw nsw i32 %56, %76
  %78 = getelementptr inbounds i16, i16* %61, i64 9
  %79 = load i16, i16* %78, align 2
  %80 = zext i16 %79 to i32
  %81 = mul nuw nsw i32 %58, %80
  %82 = add nuw nsw i32 %77, 64
  %83 = add nuw nsw i32 %82, %81
  %84 = lshr i32 %83, 7
  %85 = trunc i32 %84 to i8
  %86 = getelementptr inbounds i8, i8* %62, i64 1
  store i8 %85, i8* %86, align 1
  %87 = getelementptr inbounds i16, i16* %61, i64 2
  %88 = load i16, i16* %87, align 2
  %89 = zext i16 %88 to i32
  %90 = mul nuw nsw i32 %56, %89
  %91 = getelementptr inbounds i16, i16* %61, i64 10
  %92 = load i16, i16* %91, align 2
  %93 = zext i16 %92 to i32
  %94 = mul nuw nsw i32 %58, %93
  %95 = add nuw nsw i32 %90, 64
  %96 = add nuw nsw i32 %95, %94
  %97 = lshr i32 %96, 7
  %98 = trunc i32 %97 to i8
  %99 = getelementptr inbounds i8, i8* %62, i64 2
  store i8 %98, i8* %99, align 1
  %100 = getelementptr inbounds i16, i16* %61, i64 3
  %101 = load i16, i16* %100, align 2
  %102 = zext i16 %101 to i32
  %103 = mul nuw nsw i32 %56, %102
  %104 = getelementptr inbounds i16, i16* %61, i64 11
  %105 = load i16, i16* %104, align 2
  %106 = zext i16 %105 to i32
  %107 = mul nuw nsw i32 %58, %106
  %108 = add nuw nsw i32 %103, 64
  %109 = add nuw nsw i32 %108, %107
  %110 = lshr i32 %109, 7
  %111 = trunc i32 %110 to i8
  %112 = getelementptr inbounds i8, i8* %62, i64 3
  store i8 %111, i8* %112, align 1
  %113 = getelementptr inbounds i16, i16* %61, i64 4
  %114 = load i16, i16* %113, align 2
  %115 = zext i16 %114 to i32
  %116 = mul nuw nsw i32 %56, %115
  %117 = getelementptr inbounds i16, i16* %61, i64 12
  %118 = load i16, i16* %117, align 2
  %119 = zext i16 %118 to i32
  %120 = mul nuw nsw i32 %58, %119
  %121 = add nuw nsw i32 %116, 64
  %122 = add nuw nsw i32 %121, %120
  %123 = lshr i32 %122, 7
  %124 = trunc i32 %123 to i8
  %125 = getelementptr inbounds i8, i8* %62, i64 4
  store i8 %124, i8* %125, align 1
  %126 = getelementptr inbounds i16, i16* %61, i64 5
  %127 = load i16, i16* %126, align 2
  %128 = zext i16 %127 to i32
  %129 = mul nuw nsw i32 %56, %128
  %130 = getelementptr inbounds i16, i16* %61, i64 13
  %131 = load i16, i16* %130, align 2
  %132 = zext i16 %131 to i32
  %133 = mul nuw nsw i32 %58, %132
  %134 = add nuw nsw i32 %129, 64
  %135 = add nuw nsw i32 %134, %133
  %136 = lshr i32 %135, 7
  %137 = trunc i32 %136 to i8
  %138 = getelementptr inbounds i8, i8* %62, i64 5
  store i8 %137, i8* %138, align 1
  %139 = getelementptr inbounds i16, i16* %61, i64 6
  %140 = load i16, i16* %139, align 2
  %141 = zext i16 %140 to i32
  %142 = mul nuw nsw i32 %56, %141
  %143 = getelementptr inbounds i16, i16* %61, i64 14
  %144 = load i16, i16* %143, align 2
  %145 = zext i16 %144 to i32
  %146 = mul nuw nsw i32 %58, %145
  %147 = add nuw nsw i32 %142, 64
  %148 = add nuw nsw i32 %147, %146
  %149 = lshr i32 %148, 7
  %150 = trunc i32 %149 to i8
  %151 = getelementptr inbounds i8, i8* %62, i64 6
  store i8 %150, i8* %151, align 1
  %152 = getelementptr inbounds i16, i16* %61, i64 7
  %153 = load i16, i16* %152, align 2
  %154 = zext i16 %153 to i32
  %155 = mul nuw nsw i32 %56, %154
  %156 = getelementptr inbounds i16, i16* %61, i64 15
  %157 = load i16, i16* %156, align 2
  %158 = zext i16 %157 to i32
  %159 = mul nuw nsw i32 %58, %158
  %160 = add nuw nsw i32 %155, 64
  %161 = add nuw nsw i32 %160, %159
  %162 = lshr i32 %161, 7
  %163 = trunc i32 %162 to i8
  %164 = getelementptr inbounds i8, i8* %62, i64 7
  store i8 %163, i8* %164, align 1
  %165 = getelementptr inbounds i16, i16* %61, i64 8
  %166 = getelementptr inbounds i8, i8* %62, i64 8
  %167 = add nuw nsw i32 %60, 1
  %168 = icmp eq i32 %167, 16
  br i1 %168, label %169, label %59

169:                                              ; preds = %59, %169
  %170 = phi i8* [ %259, %169 ], [ %14, %59 ]
  %171 = phi i32 [ %262, %169 ], [ 0, %59 ]
  %172 = phi i8* [ %260, %169 ], [ %7, %59 ]
  %173 = phi i8* [ %261, %169 ], [ %13, %59 ]
  %174 = load i8, i8* %172, align 1
  %175 = zext i8 %174 to i32
  %176 = load i8, i8* %173, align 1
  %177 = zext i8 %176 to i32
  %178 = add nuw nsw i32 %175, 1
  %179 = add nuw nsw i32 %178, %177
  %180 = lshr i32 %179, 1
  %181 = trunc i32 %180 to i8
  store i8 %181, i8* %170, align 1
  %182 = getelementptr inbounds i8, i8* %172, i64 1
  %183 = load i8, i8* %182, align 1
  %184 = zext i8 %183 to i32
  %185 = getelementptr inbounds i8, i8* %173, i64 1
  %186 = load i8, i8* %185, align 1
  %187 = zext i8 %186 to i32
  %188 = add nuw nsw i32 %184, 1
  %189 = add nuw nsw i32 %188, %187
  %190 = lshr i32 %189, 1
  %191 = trunc i32 %190 to i8
  %192 = getelementptr inbounds i8, i8* %170, i64 1
  store i8 %191, i8* %192, align 1
  %193 = getelementptr inbounds i8, i8* %172, i64 2
  %194 = load i8, i8* %193, align 1
  %195 = zext i8 %194 to i32
  %196 = getelementptr inbounds i8, i8* %173, i64 2
  %197 = load i8, i8* %196, align 1
  %198 = zext i8 %197 to i32
  %199 = add nuw nsw i32 %195, 1
  %200 = add nuw nsw i32 %199, %198
  %201 = lshr i32 %200, 1
  %202 = trunc i32 %201 to i8
  %203 = getelementptr inbounds i8, i8* %170, i64 2
  store i8 %202, i8* %203, align 1
  %204 = getelementptr inbounds i8, i8* %172, i64 3
  %205 = load i8, i8* %204, align 1
  %206 = zext i8 %205 to i32
  %207 = getelementptr inbounds i8, i8* %173, i64 3
  %208 = load i8, i8* %207, align 1
  %209 = zext i8 %208 to i32
  %210 = add nuw nsw i32 %206, 1
  %211 = add nuw nsw i32 %210, %209
  %212 = lshr i32 %211, 1
  %213 = trunc i32 %212 to i8
  %214 = getelementptr inbounds i8, i8* %170, i64 3
  store i8 %213, i8* %214, align 1
  %215 = getelementptr inbounds i8, i8* %172, i64 4
  %216 = load i8, i8* %215, align 1
  %217 = zext i8 %216 to i32
  %218 = getelementptr inbounds i8, i8* %173, i64 4
  %219 = load i8, i8* %218, align 1
  %220 = zext i8 %219 to i32
  %221 = add nuw nsw i32 %217, 1
  %222 = add nuw nsw i32 %221, %220
  %223 = lshr i32 %222, 1
  %224 = trunc i32 %223 to i8
  %225 = getelementptr inbounds i8, i8* %170, i64 4
  store i8 %224, i8* %225, align 1
  %226 = getelementptr inbounds i8, i8* %172, i64 5
  %227 = load i8, i8* %226, align 1
  %228 = zext i8 %227 to i32
  %229 = getelementptr inbounds i8, i8* %173, i64 5
  %230 = load i8, i8* %229, align 1
  %231 = zext i8 %230 to i32
  %232 = add nuw nsw i32 %228, 1
  %233 = add nuw nsw i32 %232, %231
  %234 = lshr i32 %233, 1
  %235 = trunc i32 %234 to i8
  %236 = getelementptr inbounds i8, i8* %170, i64 5
  store i8 %235, i8* %236, align 1
  %237 = getelementptr inbounds i8, i8* %172, i64 6
  %238 = load i8, i8* %237, align 1
  %239 = zext i8 %238 to i32
  %240 = getelementptr inbounds i8, i8* %173, i64 6
  %241 = load i8, i8* %240, align 1
  %242 = zext i8 %241 to i32
  %243 = add nuw nsw i32 %239, 1
  %244 = add nuw nsw i32 %243, %242
  %245 = lshr i32 %244, 1
  %246 = trunc i32 %245 to i8
  %247 = getelementptr inbounds i8, i8* %170, i64 6
  store i8 %246, i8* %247, align 1
  %248 = getelementptr inbounds i8, i8* %172, i64 7
  %249 = load i8, i8* %248, align 1
  %250 = zext i8 %249 to i32
  %251 = getelementptr inbounds i8, i8* %173, i64 7
  %252 = load i8, i8* %251, align 1
  %253 = zext i8 %252 to i32
  %254 = add nuw nsw i32 %250, 1
  %255 = add nuw nsw i32 %254, %253
  %256 = lshr i32 %255, 1
  %257 = trunc i32 %256 to i8
  %258 = getelementptr inbounds i8, i8* %170, i64 7
  store i8 %257, i8* %258, align 1
  %259 = getelementptr inbounds i8, i8* %170, i64 8
  %260 = getelementptr inbounds i8, i8* %172, i64 8
  %261 = getelementptr inbounds i8, i8* %173, i64 8
  %262 = add nuw nsw i32 %171, 1
  %263 = icmp eq i32 %262, 16
  br i1 %263, label %264, label %169

264:                                              ; preds = %169
  %265 = call i32 @vpx_variance8x16_c(i8* nonnull %14, i32 8, i8* %4, i32 %5, i32* %6)
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %14) #4
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %13) #4
  call void @llvm.lifetime.end.p0i8(i64 272, i8* nonnull %12) #4
  ret i32 %265

266:                                              ; preds = %29
  %267 = getelementptr inbounds i16, i16* %32, i64 8
  %268 = getelementptr inbounds i8, i8* %48, i64 1
  %269 = bitcast i8* %48 to <8 x i8>*
  %270 = load <8 x i8>, <8 x i8>* %269, align 1
  %271 = zext <8 x i8> %270 to <8 x i32>
  %272 = mul nuw nsw <8 x i32> %26, %271
  %273 = getelementptr inbounds i8, i8* %48, i64 8
  %274 = bitcast i8* %268 to <8 x i8>*
  %275 = load <8 x i8>, <8 x i8>* %274, align 1
  %276 = zext <8 x i8> %275 to <8 x i32>
  %277 = mul nuw nsw <8 x i32> %28, %276
  %278 = add nuw nsw <8 x i32> %272, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %279 = add nuw nsw <8 x i32> %278, %277
  %280 = lshr <8 x i32> %279, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %281 = trunc <8 x i32> %280 to <8 x i16>
  %282 = bitcast i16* %267 to <8 x i16>*
  store <8 x i16> %281, <8 x i16>* %282, align 2
  %283 = getelementptr inbounds i8, i8* %273, i64 %20
  %284 = getelementptr inbounds i16, i16* %32, i64 16
  %285 = add nuw nsw i32 %30, 2
  br label %29
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_variance8x8_c(i8* nocapture readonly, i32, i8* nocapture readonly, i32, i32* nocapture) local_unnamed_addr #2 {
  store i32 0, i32* %4, align 4
  %6 = sext i32 %1 to i64
  %7 = sext i32 %3 to i64
  br label %8

8:                                                ; preds = %8, %5
  %9 = phi i32 [ 0, %5 ], [ %91, %8 ]
  %10 = phi i32 [ 0, %5 ], [ %89, %8 ]
  %11 = phi i8* [ %0, %5 ], [ %92, %8 ]
  %12 = phi i32 [ 0, %5 ], [ %94, %8 ]
  %13 = phi i8* [ %2, %5 ], [ %93, %8 ]
  %14 = load i8, i8* %11, align 1
  %15 = zext i8 %14 to i32
  %16 = load i8, i8* %13, align 1
  %17 = zext i8 %16 to i32
  %18 = sub nsw i32 %15, %17
  %19 = add nsw i32 %18, %10
  %20 = mul nsw i32 %18, %18
  %21 = add i32 %20, %9
  store i32 %21, i32* %4, align 4
  %22 = getelementptr inbounds i8, i8* %11, i64 1
  %23 = load i8, i8* %22, align 1
  %24 = zext i8 %23 to i32
  %25 = getelementptr inbounds i8, i8* %13, i64 1
  %26 = load i8, i8* %25, align 1
  %27 = zext i8 %26 to i32
  %28 = sub nsw i32 %24, %27
  %29 = add nsw i32 %28, %19
  %30 = mul nsw i32 %28, %28
  %31 = add i32 %30, %21
  store i32 %31, i32* %4, align 4
  %32 = getelementptr inbounds i8, i8* %11, i64 2
  %33 = load i8, i8* %32, align 1
  %34 = zext i8 %33 to i32
  %35 = getelementptr inbounds i8, i8* %13, i64 2
  %36 = load i8, i8* %35, align 1
  %37 = zext i8 %36 to i32
  %38 = sub nsw i32 %34, %37
  %39 = add nsw i32 %38, %29
  %40 = mul nsw i32 %38, %38
  %41 = add i32 %40, %31
  store i32 %41, i32* %4, align 4
  %42 = getelementptr inbounds i8, i8* %11, i64 3
  %43 = load i8, i8* %42, align 1
  %44 = zext i8 %43 to i32
  %45 = getelementptr inbounds i8, i8* %13, i64 3
  %46 = load i8, i8* %45, align 1
  %47 = zext i8 %46 to i32
  %48 = sub nsw i32 %44, %47
  %49 = add nsw i32 %48, %39
  %50 = mul nsw i32 %48, %48
  %51 = add i32 %50, %41
  store i32 %51, i32* %4, align 4
  %52 = getelementptr inbounds i8, i8* %11, i64 4
  %53 = load i8, i8* %52, align 1
  %54 = zext i8 %53 to i32
  %55 = getelementptr inbounds i8, i8* %13, i64 4
  %56 = load i8, i8* %55, align 1
  %57 = zext i8 %56 to i32
  %58 = sub nsw i32 %54, %57
  %59 = add nsw i32 %58, %49
  %60 = mul nsw i32 %58, %58
  %61 = add i32 %60, %51
  store i32 %61, i32* %4, align 4
  %62 = getelementptr inbounds i8, i8* %11, i64 5
  %63 = load i8, i8* %62, align 1
  %64 = zext i8 %63 to i32
  %65 = getelementptr inbounds i8, i8* %13, i64 5
  %66 = load i8, i8* %65, align 1
  %67 = zext i8 %66 to i32
  %68 = sub nsw i32 %64, %67
  %69 = add nsw i32 %68, %59
  %70 = mul nsw i32 %68, %68
  %71 = add i32 %70, %61
  store i32 %71, i32* %4, align 4
  %72 = getelementptr inbounds i8, i8* %11, i64 6
  %73 = load i8, i8* %72, align 1
  %74 = zext i8 %73 to i32
  %75 = getelementptr inbounds i8, i8* %13, i64 6
  %76 = load i8, i8* %75, align 1
  %77 = zext i8 %76 to i32
  %78 = sub nsw i32 %74, %77
  %79 = add nsw i32 %78, %69
  %80 = mul nsw i32 %78, %78
  %81 = add i32 %80, %71
  store i32 %81, i32* %4, align 4
  %82 = getelementptr inbounds i8, i8* %11, i64 7
  %83 = load i8, i8* %82, align 1
  %84 = zext i8 %83 to i32
  %85 = getelementptr inbounds i8, i8* %13, i64 7
  %86 = load i8, i8* %85, align 1
  %87 = zext i8 %86 to i32
  %88 = sub nsw i32 %84, %87
  %89 = add nsw i32 %88, %79
  %90 = mul nsw i32 %88, %88
  %91 = add i32 %90, %81
  store i32 %91, i32* %4, align 4
  %92 = getelementptr inbounds i8, i8* %11, i64 %6
  %93 = getelementptr inbounds i8, i8* %13, i64 %7
  %94 = add nuw nsw i32 %12, 1
  %95 = icmp eq i32 %94, 8
  br i1 %95, label %96, label %8

96:                                               ; preds = %8
  %97 = sext i32 %89 to i64
  %98 = mul nsw i64 %97, %97
  %99 = lshr i64 %98, 6
  %100 = trunc i64 %99 to i32
  %101 = sub i32 %91, %100
  ret i32 %101
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_sub_pixel_variance8x8_c(i8* nocapture readonly, i32, i32, i32, i8* nocapture readonly, i32, i32* nocapture) local_unnamed_addr #2 {
  %8 = alloca [72 x i16], align 16
  %9 = alloca [64 x i8], align 16
  %10 = bitcast [72 x i16]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 144, i8* nonnull %10) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %10, i8 -86, i64 144, i1 false)
  %11 = getelementptr inbounds [64 x i8], [64 x i8]* %9, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %11) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %11, i8 -86, i64 64, i1 false)
  %12 = sext i32 %2 to i64
  %13 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %12, i64 0
  %14 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %12, i64 1
  %15 = add i32 %1, -8
  %16 = zext i32 %15 to i64
  %17 = load i8, i8* %13, align 2
  %18 = zext i8 %17 to i32
  %19 = load i8, i8* %14, align 1
  %20 = zext i8 %19 to i32
  %21 = insertelement <8 x i32> undef, i32 %18, i32 0
  %22 = shufflevector <8 x i32> %21, <8 x i32> undef, <8 x i32> zeroinitializer
  %23 = insertelement <8 x i32> undef, i32 %20, i32 0
  %24 = shufflevector <8 x i32> %23, <8 x i32> undef, <8 x i32> zeroinitializer
  %25 = getelementptr inbounds [72 x i16], [72 x i16]* %8, i64 0, i64 0
  %26 = getelementptr inbounds i8, i8* %0, i64 1
  %27 = bitcast i8* %0 to <8 x i8>*
  %28 = load <8 x i8>, <8 x i8>* %27, align 1
  %29 = zext <8 x i8> %28 to <8 x i32>
  %30 = mul nuw nsw <8 x i32> %22, %29
  %31 = getelementptr inbounds i8, i8* %0, i64 8
  %32 = bitcast i8* %26 to <8 x i8>*
  %33 = load <8 x i8>, <8 x i8>* %32, align 1
  %34 = zext <8 x i8> %33 to <8 x i32>
  %35 = mul nuw nsw <8 x i32> %24, %34
  %36 = add nuw nsw <8 x i32> %30, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %37 = add nuw nsw <8 x i32> %36, %35
  %38 = lshr <8 x i32> %37, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %39 = trunc <8 x i32> %38 to <8 x i16>
  %40 = bitcast [72 x i16]* %8 to <8 x i16>*
  store <8 x i16> %39, <8 x i16>* %40, align 16
  %41 = getelementptr inbounds i8, i8* %31, i64 %16
  %42 = getelementptr inbounds [72 x i16], [72 x i16]* %8, i64 0, i64 8
  %43 = getelementptr inbounds i8, i8* %41, i64 1
  %44 = bitcast i8* %41 to <8 x i8>*
  %45 = load <8 x i8>, <8 x i8>* %44, align 1
  %46 = zext <8 x i8> %45 to <8 x i32>
  %47 = mul nuw nsw <8 x i32> %22, %46
  %48 = getelementptr inbounds i8, i8* %41, i64 8
  %49 = bitcast i8* %43 to <8 x i8>*
  %50 = load <8 x i8>, <8 x i8>* %49, align 1
  %51 = zext <8 x i8> %50 to <8 x i32>
  %52 = mul nuw nsw <8 x i32> %24, %51
  %53 = add nuw nsw <8 x i32> %47, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %54 = add nuw nsw <8 x i32> %53, %52
  %55 = lshr <8 x i32> %54, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %56 = trunc <8 x i32> %55 to <8 x i16>
  %57 = bitcast i16* %42 to <8 x i16>*
  store <8 x i16> %56, <8 x i16>* %57, align 16
  %58 = getelementptr inbounds i8, i8* %48, i64 %16
  %59 = getelementptr inbounds [72 x i16], [72 x i16]* %8, i64 0, i64 16
  %60 = getelementptr inbounds i8, i8* %58, i64 1
  %61 = bitcast i8* %58 to <8 x i8>*
  %62 = load <8 x i8>, <8 x i8>* %61, align 1
  %63 = zext <8 x i8> %62 to <8 x i32>
  %64 = mul nuw nsw <8 x i32> %22, %63
  %65 = getelementptr inbounds i8, i8* %58, i64 8
  %66 = bitcast i8* %60 to <8 x i8>*
  %67 = load <8 x i8>, <8 x i8>* %66, align 1
  %68 = zext <8 x i8> %67 to <8 x i32>
  %69 = mul nuw nsw <8 x i32> %24, %68
  %70 = add nuw nsw <8 x i32> %64, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %71 = add nuw nsw <8 x i32> %70, %69
  %72 = lshr <8 x i32> %71, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %73 = trunc <8 x i32> %72 to <8 x i16>
  %74 = bitcast i16* %59 to <8 x i16>*
  store <8 x i16> %73, <8 x i16>* %74, align 16
  %75 = getelementptr inbounds i8, i8* %65, i64 %16
  %76 = getelementptr inbounds [72 x i16], [72 x i16]* %8, i64 0, i64 24
  %77 = getelementptr inbounds i8, i8* %75, i64 1
  %78 = bitcast i8* %75 to <8 x i8>*
  %79 = load <8 x i8>, <8 x i8>* %78, align 1
  %80 = zext <8 x i8> %79 to <8 x i32>
  %81 = mul nuw nsw <8 x i32> %22, %80
  %82 = getelementptr inbounds i8, i8* %75, i64 8
  %83 = bitcast i8* %77 to <8 x i8>*
  %84 = load <8 x i8>, <8 x i8>* %83, align 1
  %85 = zext <8 x i8> %84 to <8 x i32>
  %86 = mul nuw nsw <8 x i32> %24, %85
  %87 = add nuw nsw <8 x i32> %81, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %88 = add nuw nsw <8 x i32> %87, %86
  %89 = lshr <8 x i32> %88, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %90 = trunc <8 x i32> %89 to <8 x i16>
  %91 = bitcast i16* %76 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %91, align 16
  %92 = getelementptr inbounds i8, i8* %82, i64 %16
  %93 = getelementptr inbounds [72 x i16], [72 x i16]* %8, i64 0, i64 32
  %94 = getelementptr inbounds i8, i8* %92, i64 1
  %95 = bitcast i8* %92 to <8 x i8>*
  %96 = load <8 x i8>, <8 x i8>* %95, align 1
  %97 = zext <8 x i8> %96 to <8 x i32>
  %98 = mul nuw nsw <8 x i32> %22, %97
  %99 = getelementptr inbounds i8, i8* %92, i64 8
  %100 = bitcast i8* %94 to <8 x i8>*
  %101 = load <8 x i8>, <8 x i8>* %100, align 1
  %102 = zext <8 x i8> %101 to <8 x i32>
  %103 = mul nuw nsw <8 x i32> %24, %102
  %104 = add nuw nsw <8 x i32> %98, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %105 = add nuw nsw <8 x i32> %104, %103
  %106 = lshr <8 x i32> %105, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %107 = trunc <8 x i32> %106 to <8 x i16>
  %108 = bitcast i16* %93 to <8 x i16>*
  store <8 x i16> %107, <8 x i16>* %108, align 16
  %109 = getelementptr inbounds i8, i8* %99, i64 %16
  %110 = getelementptr inbounds [72 x i16], [72 x i16]* %8, i64 0, i64 40
  %111 = getelementptr inbounds i8, i8* %109, i64 1
  %112 = bitcast i8* %109 to <8 x i8>*
  %113 = load <8 x i8>, <8 x i8>* %112, align 1
  %114 = zext <8 x i8> %113 to <8 x i32>
  %115 = mul nuw nsw <8 x i32> %22, %114
  %116 = getelementptr inbounds i8, i8* %109, i64 8
  %117 = bitcast i8* %111 to <8 x i8>*
  %118 = load <8 x i8>, <8 x i8>* %117, align 1
  %119 = zext <8 x i8> %118 to <8 x i32>
  %120 = mul nuw nsw <8 x i32> %24, %119
  %121 = add nuw nsw <8 x i32> %115, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %122 = add nuw nsw <8 x i32> %121, %120
  %123 = lshr <8 x i32> %122, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %124 = trunc <8 x i32> %123 to <8 x i16>
  %125 = bitcast i16* %110 to <8 x i16>*
  store <8 x i16> %124, <8 x i16>* %125, align 16
  %126 = getelementptr inbounds i8, i8* %116, i64 %16
  %127 = getelementptr inbounds [72 x i16], [72 x i16]* %8, i64 0, i64 48
  %128 = getelementptr inbounds i8, i8* %126, i64 1
  %129 = bitcast i8* %126 to <8 x i8>*
  %130 = load <8 x i8>, <8 x i8>* %129, align 1
  %131 = zext <8 x i8> %130 to <8 x i32>
  %132 = mul nuw nsw <8 x i32> %22, %131
  %133 = getelementptr inbounds i8, i8* %126, i64 8
  %134 = bitcast i8* %128 to <8 x i8>*
  %135 = load <8 x i8>, <8 x i8>* %134, align 1
  %136 = zext <8 x i8> %135 to <8 x i32>
  %137 = mul nuw nsw <8 x i32> %24, %136
  %138 = add nuw nsw <8 x i32> %132, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %139 = add nuw nsw <8 x i32> %138, %137
  %140 = lshr <8 x i32> %139, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %141 = trunc <8 x i32> %140 to <8 x i16>
  %142 = bitcast i16* %127 to <8 x i16>*
  store <8 x i16> %141, <8 x i16>* %142, align 16
  %143 = getelementptr inbounds i8, i8* %133, i64 %16
  %144 = getelementptr inbounds [72 x i16], [72 x i16]* %8, i64 0, i64 56
  %145 = getelementptr inbounds i8, i8* %143, i64 1
  %146 = bitcast i8* %143 to <8 x i8>*
  %147 = load <8 x i8>, <8 x i8>* %146, align 1
  %148 = zext <8 x i8> %147 to <8 x i32>
  %149 = mul nuw nsw <8 x i32> %22, %148
  %150 = getelementptr inbounds i8, i8* %143, i64 8
  %151 = bitcast i8* %145 to <8 x i8>*
  %152 = load <8 x i8>, <8 x i8>* %151, align 1
  %153 = zext <8 x i8> %152 to <8 x i32>
  %154 = mul nuw nsw <8 x i32> %24, %153
  %155 = add nuw nsw <8 x i32> %149, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %156 = add nuw nsw <8 x i32> %155, %154
  %157 = lshr <8 x i32> %156, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %158 = trunc <8 x i32> %157 to <8 x i16>
  %159 = bitcast i16* %144 to <8 x i16>*
  store <8 x i16> %158, <8 x i16>* %159, align 16
  %160 = getelementptr inbounds i8, i8* %150, i64 %16
  %161 = getelementptr inbounds [72 x i16], [72 x i16]* %8, i64 0, i64 64
  %162 = getelementptr inbounds i8, i8* %160, i64 1
  %163 = bitcast i8* %160 to <8 x i8>*
  %164 = load <8 x i8>, <8 x i8>* %163, align 1
  %165 = zext <8 x i8> %164 to <8 x i32>
  %166 = mul nuw nsw <8 x i32> %22, %165
  %167 = bitcast i8* %162 to <8 x i8>*
  %168 = load <8 x i8>, <8 x i8>* %167, align 1
  %169 = zext <8 x i8> %168 to <8 x i32>
  %170 = mul nuw nsw <8 x i32> %24, %169
  %171 = add nuw nsw <8 x i32> %166, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %172 = add nuw nsw <8 x i32> %171, %170
  %173 = lshr <8 x i32> %172, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %174 = trunc <8 x i32> %173 to <8 x i16>
  %175 = bitcast i16* %161 to <8 x i16>*
  store <8 x i16> %174, <8 x i16>* %175, align 16
  %176 = sext i32 %3 to i64
  %177 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %176, i64 0
  %178 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %176, i64 1
  %179 = load i8, i8* %177, align 2
  %180 = zext i8 %179 to i32
  %181 = load i8, i8* %178, align 1
  %182 = zext i8 %181 to i32
  br label %183

183:                                              ; preds = %183, %7
  %184 = phi i32 [ 0, %7 ], [ %291, %183 ]
  %185 = phi i16* [ %25, %7 ], [ %289, %183 ]
  %186 = phi i8* [ %11, %7 ], [ %290, %183 ]
  %187 = load i16, i16* %185, align 2
  %188 = zext i16 %187 to i32
  %189 = mul nuw nsw i32 %180, %188
  %190 = getelementptr inbounds i16, i16* %185, i64 8
  %191 = load i16, i16* %190, align 2
  %192 = zext i16 %191 to i32
  %193 = mul nuw nsw i32 %182, %192
  %194 = add nuw nsw i32 %189, 64
  %195 = add nuw nsw i32 %194, %193
  %196 = lshr i32 %195, 7
  %197 = trunc i32 %196 to i8
  store i8 %197, i8* %186, align 1
  %198 = getelementptr inbounds i16, i16* %185, i64 1
  %199 = load i16, i16* %198, align 2
  %200 = zext i16 %199 to i32
  %201 = mul nuw nsw i32 %180, %200
  %202 = getelementptr inbounds i16, i16* %185, i64 9
  %203 = load i16, i16* %202, align 2
  %204 = zext i16 %203 to i32
  %205 = mul nuw nsw i32 %182, %204
  %206 = add nuw nsw i32 %201, 64
  %207 = add nuw nsw i32 %206, %205
  %208 = lshr i32 %207, 7
  %209 = trunc i32 %208 to i8
  %210 = getelementptr inbounds i8, i8* %186, i64 1
  store i8 %209, i8* %210, align 1
  %211 = getelementptr inbounds i16, i16* %185, i64 2
  %212 = load i16, i16* %211, align 2
  %213 = zext i16 %212 to i32
  %214 = mul nuw nsw i32 %180, %213
  %215 = getelementptr inbounds i16, i16* %185, i64 10
  %216 = load i16, i16* %215, align 2
  %217 = zext i16 %216 to i32
  %218 = mul nuw nsw i32 %182, %217
  %219 = add nuw nsw i32 %214, 64
  %220 = add nuw nsw i32 %219, %218
  %221 = lshr i32 %220, 7
  %222 = trunc i32 %221 to i8
  %223 = getelementptr inbounds i8, i8* %186, i64 2
  store i8 %222, i8* %223, align 1
  %224 = getelementptr inbounds i16, i16* %185, i64 3
  %225 = load i16, i16* %224, align 2
  %226 = zext i16 %225 to i32
  %227 = mul nuw nsw i32 %180, %226
  %228 = getelementptr inbounds i16, i16* %185, i64 11
  %229 = load i16, i16* %228, align 2
  %230 = zext i16 %229 to i32
  %231 = mul nuw nsw i32 %182, %230
  %232 = add nuw nsw i32 %227, 64
  %233 = add nuw nsw i32 %232, %231
  %234 = lshr i32 %233, 7
  %235 = trunc i32 %234 to i8
  %236 = getelementptr inbounds i8, i8* %186, i64 3
  store i8 %235, i8* %236, align 1
  %237 = getelementptr inbounds i16, i16* %185, i64 4
  %238 = load i16, i16* %237, align 2
  %239 = zext i16 %238 to i32
  %240 = mul nuw nsw i32 %180, %239
  %241 = getelementptr inbounds i16, i16* %185, i64 12
  %242 = load i16, i16* %241, align 2
  %243 = zext i16 %242 to i32
  %244 = mul nuw nsw i32 %182, %243
  %245 = add nuw nsw i32 %240, 64
  %246 = add nuw nsw i32 %245, %244
  %247 = lshr i32 %246, 7
  %248 = trunc i32 %247 to i8
  %249 = getelementptr inbounds i8, i8* %186, i64 4
  store i8 %248, i8* %249, align 1
  %250 = getelementptr inbounds i16, i16* %185, i64 5
  %251 = load i16, i16* %250, align 2
  %252 = zext i16 %251 to i32
  %253 = mul nuw nsw i32 %180, %252
  %254 = getelementptr inbounds i16, i16* %185, i64 13
  %255 = load i16, i16* %254, align 2
  %256 = zext i16 %255 to i32
  %257 = mul nuw nsw i32 %182, %256
  %258 = add nuw nsw i32 %253, 64
  %259 = add nuw nsw i32 %258, %257
  %260 = lshr i32 %259, 7
  %261 = trunc i32 %260 to i8
  %262 = getelementptr inbounds i8, i8* %186, i64 5
  store i8 %261, i8* %262, align 1
  %263 = getelementptr inbounds i16, i16* %185, i64 6
  %264 = load i16, i16* %263, align 2
  %265 = zext i16 %264 to i32
  %266 = mul nuw nsw i32 %180, %265
  %267 = getelementptr inbounds i16, i16* %185, i64 14
  %268 = load i16, i16* %267, align 2
  %269 = zext i16 %268 to i32
  %270 = mul nuw nsw i32 %182, %269
  %271 = add nuw nsw i32 %266, 64
  %272 = add nuw nsw i32 %271, %270
  %273 = lshr i32 %272, 7
  %274 = trunc i32 %273 to i8
  %275 = getelementptr inbounds i8, i8* %186, i64 6
  store i8 %274, i8* %275, align 1
  %276 = getelementptr inbounds i16, i16* %185, i64 7
  %277 = load i16, i16* %276, align 2
  %278 = zext i16 %277 to i32
  %279 = mul nuw nsw i32 %180, %278
  %280 = getelementptr inbounds i16, i16* %185, i64 15
  %281 = load i16, i16* %280, align 2
  %282 = zext i16 %281 to i32
  %283 = mul nuw nsw i32 %182, %282
  %284 = add nuw nsw i32 %279, 64
  %285 = add nuw nsw i32 %284, %283
  %286 = lshr i32 %285, 7
  %287 = trunc i32 %286 to i8
  %288 = getelementptr inbounds i8, i8* %186, i64 7
  store i8 %287, i8* %288, align 1
  %289 = getelementptr inbounds i16, i16* %185, i64 8
  %290 = getelementptr inbounds i8, i8* %186, i64 8
  %291 = add nuw nsw i32 %184, 1
  %292 = icmp eq i32 %291, 8
  br i1 %292, label %293, label %183

293:                                              ; preds = %183
  %294 = call i32 @vpx_variance8x8_c(i8* nonnull %11, i32 8, i8* %4, i32 %5, i32* %6)
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %11) #4
  call void @llvm.lifetime.end.p0i8(i64 144, i8* nonnull %10) #4
  ret i32 %294
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_sub_pixel_avg_variance8x8_c(i8* nocapture readonly, i32, i32, i32, i8* nocapture readonly, i32, i32* nocapture, i8* nocapture readonly) local_unnamed_addr #2 {
  %9 = alloca [72 x i16], align 16
  %10 = alloca [64 x i8], align 16
  %11 = alloca [64 x i8], align 16
  %12 = bitcast [72 x i16]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 144, i8* nonnull %12) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %12, i8 -86, i64 144, i1 false)
  %13 = getelementptr inbounds [64 x i8], [64 x i8]* %10, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %13) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %13, i8 -86, i64 64, i1 false)
  %14 = getelementptr inbounds [64 x i8], [64 x i8]* %11, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %14) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %14, i8 -86, i64 64, i1 false)
  %15 = sext i32 %2 to i64
  %16 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %15, i64 0
  %17 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %15, i64 1
  %18 = add i32 %1, -8
  %19 = zext i32 %18 to i64
  %20 = load i8, i8* %16, align 2
  %21 = zext i8 %20 to i32
  %22 = load i8, i8* %17, align 1
  %23 = zext i8 %22 to i32
  %24 = insertelement <8 x i32> undef, i32 %21, i32 0
  %25 = shufflevector <8 x i32> %24, <8 x i32> undef, <8 x i32> zeroinitializer
  %26 = insertelement <8 x i32> undef, i32 %23, i32 0
  %27 = shufflevector <8 x i32> %26, <8 x i32> undef, <8 x i32> zeroinitializer
  %28 = getelementptr inbounds [72 x i16], [72 x i16]* %9, i64 0, i64 0
  %29 = getelementptr inbounds i8, i8* %0, i64 1
  %30 = bitcast i8* %0 to <8 x i8>*
  %31 = load <8 x i8>, <8 x i8>* %30, align 1
  %32 = zext <8 x i8> %31 to <8 x i32>
  %33 = mul nuw nsw <8 x i32> %25, %32
  %34 = getelementptr inbounds i8, i8* %0, i64 8
  %35 = bitcast i8* %29 to <8 x i8>*
  %36 = load <8 x i8>, <8 x i8>* %35, align 1
  %37 = zext <8 x i8> %36 to <8 x i32>
  %38 = mul nuw nsw <8 x i32> %27, %37
  %39 = add nuw nsw <8 x i32> %33, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %40 = add nuw nsw <8 x i32> %39, %38
  %41 = lshr <8 x i32> %40, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %42 = trunc <8 x i32> %41 to <8 x i16>
  %43 = bitcast [72 x i16]* %9 to <8 x i16>*
  store <8 x i16> %42, <8 x i16>* %43, align 16
  %44 = getelementptr inbounds i8, i8* %34, i64 %19
  %45 = getelementptr inbounds [72 x i16], [72 x i16]* %9, i64 0, i64 8
  %46 = getelementptr inbounds i8, i8* %44, i64 1
  %47 = bitcast i8* %44 to <8 x i8>*
  %48 = load <8 x i8>, <8 x i8>* %47, align 1
  %49 = zext <8 x i8> %48 to <8 x i32>
  %50 = mul nuw nsw <8 x i32> %25, %49
  %51 = getelementptr inbounds i8, i8* %44, i64 8
  %52 = bitcast i8* %46 to <8 x i8>*
  %53 = load <8 x i8>, <8 x i8>* %52, align 1
  %54 = zext <8 x i8> %53 to <8 x i32>
  %55 = mul nuw nsw <8 x i32> %27, %54
  %56 = add nuw nsw <8 x i32> %50, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %57 = add nuw nsw <8 x i32> %56, %55
  %58 = lshr <8 x i32> %57, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %59 = trunc <8 x i32> %58 to <8 x i16>
  %60 = bitcast i16* %45 to <8 x i16>*
  store <8 x i16> %59, <8 x i16>* %60, align 16
  %61 = getelementptr inbounds i8, i8* %51, i64 %19
  %62 = getelementptr inbounds [72 x i16], [72 x i16]* %9, i64 0, i64 16
  %63 = getelementptr inbounds i8, i8* %61, i64 1
  %64 = bitcast i8* %61 to <8 x i8>*
  %65 = load <8 x i8>, <8 x i8>* %64, align 1
  %66 = zext <8 x i8> %65 to <8 x i32>
  %67 = mul nuw nsw <8 x i32> %25, %66
  %68 = getelementptr inbounds i8, i8* %61, i64 8
  %69 = bitcast i8* %63 to <8 x i8>*
  %70 = load <8 x i8>, <8 x i8>* %69, align 1
  %71 = zext <8 x i8> %70 to <8 x i32>
  %72 = mul nuw nsw <8 x i32> %27, %71
  %73 = add nuw nsw <8 x i32> %67, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %74 = add nuw nsw <8 x i32> %73, %72
  %75 = lshr <8 x i32> %74, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %76 = trunc <8 x i32> %75 to <8 x i16>
  %77 = bitcast i16* %62 to <8 x i16>*
  store <8 x i16> %76, <8 x i16>* %77, align 16
  %78 = getelementptr inbounds i8, i8* %68, i64 %19
  %79 = getelementptr inbounds [72 x i16], [72 x i16]* %9, i64 0, i64 24
  %80 = getelementptr inbounds i8, i8* %78, i64 1
  %81 = bitcast i8* %78 to <8 x i8>*
  %82 = load <8 x i8>, <8 x i8>* %81, align 1
  %83 = zext <8 x i8> %82 to <8 x i32>
  %84 = mul nuw nsw <8 x i32> %25, %83
  %85 = getelementptr inbounds i8, i8* %78, i64 8
  %86 = bitcast i8* %80 to <8 x i8>*
  %87 = load <8 x i8>, <8 x i8>* %86, align 1
  %88 = zext <8 x i8> %87 to <8 x i32>
  %89 = mul nuw nsw <8 x i32> %27, %88
  %90 = add nuw nsw <8 x i32> %84, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %91 = add nuw nsw <8 x i32> %90, %89
  %92 = lshr <8 x i32> %91, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %93 = trunc <8 x i32> %92 to <8 x i16>
  %94 = bitcast i16* %79 to <8 x i16>*
  store <8 x i16> %93, <8 x i16>* %94, align 16
  %95 = getelementptr inbounds i8, i8* %85, i64 %19
  %96 = getelementptr inbounds [72 x i16], [72 x i16]* %9, i64 0, i64 32
  %97 = getelementptr inbounds i8, i8* %95, i64 1
  %98 = bitcast i8* %95 to <8 x i8>*
  %99 = load <8 x i8>, <8 x i8>* %98, align 1
  %100 = zext <8 x i8> %99 to <8 x i32>
  %101 = mul nuw nsw <8 x i32> %25, %100
  %102 = getelementptr inbounds i8, i8* %95, i64 8
  %103 = bitcast i8* %97 to <8 x i8>*
  %104 = load <8 x i8>, <8 x i8>* %103, align 1
  %105 = zext <8 x i8> %104 to <8 x i32>
  %106 = mul nuw nsw <8 x i32> %27, %105
  %107 = add nuw nsw <8 x i32> %101, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %108 = add nuw nsw <8 x i32> %107, %106
  %109 = lshr <8 x i32> %108, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %110 = trunc <8 x i32> %109 to <8 x i16>
  %111 = bitcast i16* %96 to <8 x i16>*
  store <8 x i16> %110, <8 x i16>* %111, align 16
  %112 = getelementptr inbounds i8, i8* %102, i64 %19
  %113 = getelementptr inbounds [72 x i16], [72 x i16]* %9, i64 0, i64 40
  %114 = getelementptr inbounds i8, i8* %112, i64 1
  %115 = bitcast i8* %112 to <8 x i8>*
  %116 = load <8 x i8>, <8 x i8>* %115, align 1
  %117 = zext <8 x i8> %116 to <8 x i32>
  %118 = mul nuw nsw <8 x i32> %25, %117
  %119 = getelementptr inbounds i8, i8* %112, i64 8
  %120 = bitcast i8* %114 to <8 x i8>*
  %121 = load <8 x i8>, <8 x i8>* %120, align 1
  %122 = zext <8 x i8> %121 to <8 x i32>
  %123 = mul nuw nsw <8 x i32> %27, %122
  %124 = add nuw nsw <8 x i32> %118, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %125 = add nuw nsw <8 x i32> %124, %123
  %126 = lshr <8 x i32> %125, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %127 = trunc <8 x i32> %126 to <8 x i16>
  %128 = bitcast i16* %113 to <8 x i16>*
  store <8 x i16> %127, <8 x i16>* %128, align 16
  %129 = getelementptr inbounds i8, i8* %119, i64 %19
  %130 = getelementptr inbounds [72 x i16], [72 x i16]* %9, i64 0, i64 48
  %131 = getelementptr inbounds i8, i8* %129, i64 1
  %132 = bitcast i8* %129 to <8 x i8>*
  %133 = load <8 x i8>, <8 x i8>* %132, align 1
  %134 = zext <8 x i8> %133 to <8 x i32>
  %135 = mul nuw nsw <8 x i32> %25, %134
  %136 = getelementptr inbounds i8, i8* %129, i64 8
  %137 = bitcast i8* %131 to <8 x i8>*
  %138 = load <8 x i8>, <8 x i8>* %137, align 1
  %139 = zext <8 x i8> %138 to <8 x i32>
  %140 = mul nuw nsw <8 x i32> %27, %139
  %141 = add nuw nsw <8 x i32> %135, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %142 = add nuw nsw <8 x i32> %141, %140
  %143 = lshr <8 x i32> %142, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %144 = trunc <8 x i32> %143 to <8 x i16>
  %145 = bitcast i16* %130 to <8 x i16>*
  store <8 x i16> %144, <8 x i16>* %145, align 16
  %146 = getelementptr inbounds i8, i8* %136, i64 %19
  %147 = getelementptr inbounds [72 x i16], [72 x i16]* %9, i64 0, i64 56
  %148 = getelementptr inbounds i8, i8* %146, i64 1
  %149 = bitcast i8* %146 to <8 x i8>*
  %150 = load <8 x i8>, <8 x i8>* %149, align 1
  %151 = zext <8 x i8> %150 to <8 x i32>
  %152 = mul nuw nsw <8 x i32> %25, %151
  %153 = getelementptr inbounds i8, i8* %146, i64 8
  %154 = bitcast i8* %148 to <8 x i8>*
  %155 = load <8 x i8>, <8 x i8>* %154, align 1
  %156 = zext <8 x i8> %155 to <8 x i32>
  %157 = mul nuw nsw <8 x i32> %27, %156
  %158 = add nuw nsw <8 x i32> %152, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %159 = add nuw nsw <8 x i32> %158, %157
  %160 = lshr <8 x i32> %159, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %161 = trunc <8 x i32> %160 to <8 x i16>
  %162 = bitcast i16* %147 to <8 x i16>*
  store <8 x i16> %161, <8 x i16>* %162, align 16
  %163 = getelementptr inbounds i8, i8* %153, i64 %19
  %164 = getelementptr inbounds [72 x i16], [72 x i16]* %9, i64 0, i64 64
  %165 = getelementptr inbounds i8, i8* %163, i64 1
  %166 = bitcast i8* %163 to <8 x i8>*
  %167 = load <8 x i8>, <8 x i8>* %166, align 1
  %168 = zext <8 x i8> %167 to <8 x i32>
  %169 = mul nuw nsw <8 x i32> %25, %168
  %170 = bitcast i8* %165 to <8 x i8>*
  %171 = load <8 x i8>, <8 x i8>* %170, align 1
  %172 = zext <8 x i8> %171 to <8 x i32>
  %173 = mul nuw nsw <8 x i32> %27, %172
  %174 = add nuw nsw <8 x i32> %169, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %175 = add nuw nsw <8 x i32> %174, %173
  %176 = lshr <8 x i32> %175, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %177 = trunc <8 x i32> %176 to <8 x i16>
  %178 = bitcast i16* %164 to <8 x i16>*
  store <8 x i16> %177, <8 x i16>* %178, align 16
  %179 = sext i32 %3 to i64
  %180 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %179, i64 0
  %181 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %179, i64 1
  %182 = load i8, i8* %180, align 2
  %183 = zext i8 %182 to i32
  %184 = load i8, i8* %181, align 1
  %185 = zext i8 %184 to i32
  br label %186

186:                                              ; preds = %186, %8
  %187 = phi i32 [ 0, %8 ], [ %294, %186 ]
  %188 = phi i16* [ %28, %8 ], [ %292, %186 ]
  %189 = phi i8* [ %13, %8 ], [ %293, %186 ]
  %190 = load i16, i16* %188, align 2
  %191 = zext i16 %190 to i32
  %192 = mul nuw nsw i32 %183, %191
  %193 = getelementptr inbounds i16, i16* %188, i64 8
  %194 = load i16, i16* %193, align 2
  %195 = zext i16 %194 to i32
  %196 = mul nuw nsw i32 %185, %195
  %197 = add nuw nsw i32 %192, 64
  %198 = add nuw nsw i32 %197, %196
  %199 = lshr i32 %198, 7
  %200 = trunc i32 %199 to i8
  store i8 %200, i8* %189, align 1
  %201 = getelementptr inbounds i16, i16* %188, i64 1
  %202 = load i16, i16* %201, align 2
  %203 = zext i16 %202 to i32
  %204 = mul nuw nsw i32 %183, %203
  %205 = getelementptr inbounds i16, i16* %188, i64 9
  %206 = load i16, i16* %205, align 2
  %207 = zext i16 %206 to i32
  %208 = mul nuw nsw i32 %185, %207
  %209 = add nuw nsw i32 %204, 64
  %210 = add nuw nsw i32 %209, %208
  %211 = lshr i32 %210, 7
  %212 = trunc i32 %211 to i8
  %213 = getelementptr inbounds i8, i8* %189, i64 1
  store i8 %212, i8* %213, align 1
  %214 = getelementptr inbounds i16, i16* %188, i64 2
  %215 = load i16, i16* %214, align 2
  %216 = zext i16 %215 to i32
  %217 = mul nuw nsw i32 %183, %216
  %218 = getelementptr inbounds i16, i16* %188, i64 10
  %219 = load i16, i16* %218, align 2
  %220 = zext i16 %219 to i32
  %221 = mul nuw nsw i32 %185, %220
  %222 = add nuw nsw i32 %217, 64
  %223 = add nuw nsw i32 %222, %221
  %224 = lshr i32 %223, 7
  %225 = trunc i32 %224 to i8
  %226 = getelementptr inbounds i8, i8* %189, i64 2
  store i8 %225, i8* %226, align 1
  %227 = getelementptr inbounds i16, i16* %188, i64 3
  %228 = load i16, i16* %227, align 2
  %229 = zext i16 %228 to i32
  %230 = mul nuw nsw i32 %183, %229
  %231 = getelementptr inbounds i16, i16* %188, i64 11
  %232 = load i16, i16* %231, align 2
  %233 = zext i16 %232 to i32
  %234 = mul nuw nsw i32 %185, %233
  %235 = add nuw nsw i32 %230, 64
  %236 = add nuw nsw i32 %235, %234
  %237 = lshr i32 %236, 7
  %238 = trunc i32 %237 to i8
  %239 = getelementptr inbounds i8, i8* %189, i64 3
  store i8 %238, i8* %239, align 1
  %240 = getelementptr inbounds i16, i16* %188, i64 4
  %241 = load i16, i16* %240, align 2
  %242 = zext i16 %241 to i32
  %243 = mul nuw nsw i32 %183, %242
  %244 = getelementptr inbounds i16, i16* %188, i64 12
  %245 = load i16, i16* %244, align 2
  %246 = zext i16 %245 to i32
  %247 = mul nuw nsw i32 %185, %246
  %248 = add nuw nsw i32 %243, 64
  %249 = add nuw nsw i32 %248, %247
  %250 = lshr i32 %249, 7
  %251 = trunc i32 %250 to i8
  %252 = getelementptr inbounds i8, i8* %189, i64 4
  store i8 %251, i8* %252, align 1
  %253 = getelementptr inbounds i16, i16* %188, i64 5
  %254 = load i16, i16* %253, align 2
  %255 = zext i16 %254 to i32
  %256 = mul nuw nsw i32 %183, %255
  %257 = getelementptr inbounds i16, i16* %188, i64 13
  %258 = load i16, i16* %257, align 2
  %259 = zext i16 %258 to i32
  %260 = mul nuw nsw i32 %185, %259
  %261 = add nuw nsw i32 %256, 64
  %262 = add nuw nsw i32 %261, %260
  %263 = lshr i32 %262, 7
  %264 = trunc i32 %263 to i8
  %265 = getelementptr inbounds i8, i8* %189, i64 5
  store i8 %264, i8* %265, align 1
  %266 = getelementptr inbounds i16, i16* %188, i64 6
  %267 = load i16, i16* %266, align 2
  %268 = zext i16 %267 to i32
  %269 = mul nuw nsw i32 %183, %268
  %270 = getelementptr inbounds i16, i16* %188, i64 14
  %271 = load i16, i16* %270, align 2
  %272 = zext i16 %271 to i32
  %273 = mul nuw nsw i32 %185, %272
  %274 = add nuw nsw i32 %269, 64
  %275 = add nuw nsw i32 %274, %273
  %276 = lshr i32 %275, 7
  %277 = trunc i32 %276 to i8
  %278 = getelementptr inbounds i8, i8* %189, i64 6
  store i8 %277, i8* %278, align 1
  %279 = getelementptr inbounds i16, i16* %188, i64 7
  %280 = load i16, i16* %279, align 2
  %281 = zext i16 %280 to i32
  %282 = mul nuw nsw i32 %183, %281
  %283 = getelementptr inbounds i16, i16* %188, i64 15
  %284 = load i16, i16* %283, align 2
  %285 = zext i16 %284 to i32
  %286 = mul nuw nsw i32 %185, %285
  %287 = add nuw nsw i32 %282, 64
  %288 = add nuw nsw i32 %287, %286
  %289 = lshr i32 %288, 7
  %290 = trunc i32 %289 to i8
  %291 = getelementptr inbounds i8, i8* %189, i64 7
  store i8 %290, i8* %291, align 1
  %292 = getelementptr inbounds i16, i16* %188, i64 8
  %293 = getelementptr inbounds i8, i8* %189, i64 8
  %294 = add nuw nsw i32 %187, 1
  %295 = icmp eq i32 %294, 8
  br i1 %295, label %296, label %186

296:                                              ; preds = %186, %296
  %297 = phi i8* [ %386, %296 ], [ %14, %186 ]
  %298 = phi i32 [ %389, %296 ], [ 0, %186 ]
  %299 = phi i8* [ %387, %296 ], [ %7, %186 ]
  %300 = phi i8* [ %388, %296 ], [ %13, %186 ]
  %301 = load i8, i8* %299, align 1
  %302 = zext i8 %301 to i32
  %303 = load i8, i8* %300, align 1
  %304 = zext i8 %303 to i32
  %305 = add nuw nsw i32 %302, 1
  %306 = add nuw nsw i32 %305, %304
  %307 = lshr i32 %306, 1
  %308 = trunc i32 %307 to i8
  store i8 %308, i8* %297, align 1
  %309 = getelementptr inbounds i8, i8* %299, i64 1
  %310 = load i8, i8* %309, align 1
  %311 = zext i8 %310 to i32
  %312 = getelementptr inbounds i8, i8* %300, i64 1
  %313 = load i8, i8* %312, align 1
  %314 = zext i8 %313 to i32
  %315 = add nuw nsw i32 %311, 1
  %316 = add nuw nsw i32 %315, %314
  %317 = lshr i32 %316, 1
  %318 = trunc i32 %317 to i8
  %319 = getelementptr inbounds i8, i8* %297, i64 1
  store i8 %318, i8* %319, align 1
  %320 = getelementptr inbounds i8, i8* %299, i64 2
  %321 = load i8, i8* %320, align 1
  %322 = zext i8 %321 to i32
  %323 = getelementptr inbounds i8, i8* %300, i64 2
  %324 = load i8, i8* %323, align 1
  %325 = zext i8 %324 to i32
  %326 = add nuw nsw i32 %322, 1
  %327 = add nuw nsw i32 %326, %325
  %328 = lshr i32 %327, 1
  %329 = trunc i32 %328 to i8
  %330 = getelementptr inbounds i8, i8* %297, i64 2
  store i8 %329, i8* %330, align 1
  %331 = getelementptr inbounds i8, i8* %299, i64 3
  %332 = load i8, i8* %331, align 1
  %333 = zext i8 %332 to i32
  %334 = getelementptr inbounds i8, i8* %300, i64 3
  %335 = load i8, i8* %334, align 1
  %336 = zext i8 %335 to i32
  %337 = add nuw nsw i32 %333, 1
  %338 = add nuw nsw i32 %337, %336
  %339 = lshr i32 %338, 1
  %340 = trunc i32 %339 to i8
  %341 = getelementptr inbounds i8, i8* %297, i64 3
  store i8 %340, i8* %341, align 1
  %342 = getelementptr inbounds i8, i8* %299, i64 4
  %343 = load i8, i8* %342, align 1
  %344 = zext i8 %343 to i32
  %345 = getelementptr inbounds i8, i8* %300, i64 4
  %346 = load i8, i8* %345, align 1
  %347 = zext i8 %346 to i32
  %348 = add nuw nsw i32 %344, 1
  %349 = add nuw nsw i32 %348, %347
  %350 = lshr i32 %349, 1
  %351 = trunc i32 %350 to i8
  %352 = getelementptr inbounds i8, i8* %297, i64 4
  store i8 %351, i8* %352, align 1
  %353 = getelementptr inbounds i8, i8* %299, i64 5
  %354 = load i8, i8* %353, align 1
  %355 = zext i8 %354 to i32
  %356 = getelementptr inbounds i8, i8* %300, i64 5
  %357 = load i8, i8* %356, align 1
  %358 = zext i8 %357 to i32
  %359 = add nuw nsw i32 %355, 1
  %360 = add nuw nsw i32 %359, %358
  %361 = lshr i32 %360, 1
  %362 = trunc i32 %361 to i8
  %363 = getelementptr inbounds i8, i8* %297, i64 5
  store i8 %362, i8* %363, align 1
  %364 = getelementptr inbounds i8, i8* %299, i64 6
  %365 = load i8, i8* %364, align 1
  %366 = zext i8 %365 to i32
  %367 = getelementptr inbounds i8, i8* %300, i64 6
  %368 = load i8, i8* %367, align 1
  %369 = zext i8 %368 to i32
  %370 = add nuw nsw i32 %366, 1
  %371 = add nuw nsw i32 %370, %369
  %372 = lshr i32 %371, 1
  %373 = trunc i32 %372 to i8
  %374 = getelementptr inbounds i8, i8* %297, i64 6
  store i8 %373, i8* %374, align 1
  %375 = getelementptr inbounds i8, i8* %299, i64 7
  %376 = load i8, i8* %375, align 1
  %377 = zext i8 %376 to i32
  %378 = getelementptr inbounds i8, i8* %300, i64 7
  %379 = load i8, i8* %378, align 1
  %380 = zext i8 %379 to i32
  %381 = add nuw nsw i32 %377, 1
  %382 = add nuw nsw i32 %381, %380
  %383 = lshr i32 %382, 1
  %384 = trunc i32 %383 to i8
  %385 = getelementptr inbounds i8, i8* %297, i64 7
  store i8 %384, i8* %385, align 1
  %386 = getelementptr inbounds i8, i8* %297, i64 8
  %387 = getelementptr inbounds i8, i8* %299, i64 8
  %388 = getelementptr inbounds i8, i8* %300, i64 8
  %389 = add nuw nsw i32 %298, 1
  %390 = icmp eq i32 %389, 8
  br i1 %390, label %391, label %296

391:                                              ; preds = %296
  %392 = call i32 @vpx_variance8x8_c(i8* nonnull %14, i32 8, i8* %4, i32 %5, i32* %6)
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %14) #4
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %13) #4
  call void @llvm.lifetime.end.p0i8(i64 144, i8* nonnull %12) #4
  ret i32 %392
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_variance8x4_c(i8* nocapture readonly, i32, i8* nocapture readonly, i32, i32* nocapture) local_unnamed_addr #2 {
  store i32 0, i32* %4, align 4
  %6 = sext i32 %1 to i64
  %7 = sext i32 %3 to i64
  br label %8

8:                                                ; preds = %8, %5
  %9 = phi i32 [ 0, %5 ], [ %91, %8 ]
  %10 = phi i32 [ 0, %5 ], [ %89, %8 ]
  %11 = phi i8* [ %0, %5 ], [ %92, %8 ]
  %12 = phi i32 [ 0, %5 ], [ %94, %8 ]
  %13 = phi i8* [ %2, %5 ], [ %93, %8 ]
  %14 = load i8, i8* %11, align 1
  %15 = zext i8 %14 to i32
  %16 = load i8, i8* %13, align 1
  %17 = zext i8 %16 to i32
  %18 = sub nsw i32 %15, %17
  %19 = add nsw i32 %18, %10
  %20 = mul nsw i32 %18, %18
  %21 = add i32 %20, %9
  store i32 %21, i32* %4, align 4
  %22 = getelementptr inbounds i8, i8* %11, i64 1
  %23 = load i8, i8* %22, align 1
  %24 = zext i8 %23 to i32
  %25 = getelementptr inbounds i8, i8* %13, i64 1
  %26 = load i8, i8* %25, align 1
  %27 = zext i8 %26 to i32
  %28 = sub nsw i32 %24, %27
  %29 = add nsw i32 %28, %19
  %30 = mul nsw i32 %28, %28
  %31 = add i32 %30, %21
  store i32 %31, i32* %4, align 4
  %32 = getelementptr inbounds i8, i8* %11, i64 2
  %33 = load i8, i8* %32, align 1
  %34 = zext i8 %33 to i32
  %35 = getelementptr inbounds i8, i8* %13, i64 2
  %36 = load i8, i8* %35, align 1
  %37 = zext i8 %36 to i32
  %38 = sub nsw i32 %34, %37
  %39 = add nsw i32 %38, %29
  %40 = mul nsw i32 %38, %38
  %41 = add i32 %40, %31
  store i32 %41, i32* %4, align 4
  %42 = getelementptr inbounds i8, i8* %11, i64 3
  %43 = load i8, i8* %42, align 1
  %44 = zext i8 %43 to i32
  %45 = getelementptr inbounds i8, i8* %13, i64 3
  %46 = load i8, i8* %45, align 1
  %47 = zext i8 %46 to i32
  %48 = sub nsw i32 %44, %47
  %49 = add nsw i32 %48, %39
  %50 = mul nsw i32 %48, %48
  %51 = add i32 %50, %41
  store i32 %51, i32* %4, align 4
  %52 = getelementptr inbounds i8, i8* %11, i64 4
  %53 = load i8, i8* %52, align 1
  %54 = zext i8 %53 to i32
  %55 = getelementptr inbounds i8, i8* %13, i64 4
  %56 = load i8, i8* %55, align 1
  %57 = zext i8 %56 to i32
  %58 = sub nsw i32 %54, %57
  %59 = add nsw i32 %58, %49
  %60 = mul nsw i32 %58, %58
  %61 = add i32 %60, %51
  store i32 %61, i32* %4, align 4
  %62 = getelementptr inbounds i8, i8* %11, i64 5
  %63 = load i8, i8* %62, align 1
  %64 = zext i8 %63 to i32
  %65 = getelementptr inbounds i8, i8* %13, i64 5
  %66 = load i8, i8* %65, align 1
  %67 = zext i8 %66 to i32
  %68 = sub nsw i32 %64, %67
  %69 = add nsw i32 %68, %59
  %70 = mul nsw i32 %68, %68
  %71 = add i32 %70, %61
  store i32 %71, i32* %4, align 4
  %72 = getelementptr inbounds i8, i8* %11, i64 6
  %73 = load i8, i8* %72, align 1
  %74 = zext i8 %73 to i32
  %75 = getelementptr inbounds i8, i8* %13, i64 6
  %76 = load i8, i8* %75, align 1
  %77 = zext i8 %76 to i32
  %78 = sub nsw i32 %74, %77
  %79 = add nsw i32 %78, %69
  %80 = mul nsw i32 %78, %78
  %81 = add i32 %80, %71
  store i32 %81, i32* %4, align 4
  %82 = getelementptr inbounds i8, i8* %11, i64 7
  %83 = load i8, i8* %82, align 1
  %84 = zext i8 %83 to i32
  %85 = getelementptr inbounds i8, i8* %13, i64 7
  %86 = load i8, i8* %85, align 1
  %87 = zext i8 %86 to i32
  %88 = sub nsw i32 %84, %87
  %89 = add nsw i32 %88, %79
  %90 = mul nsw i32 %88, %88
  %91 = add i32 %90, %81
  store i32 %91, i32* %4, align 4
  %92 = getelementptr inbounds i8, i8* %11, i64 %6
  %93 = getelementptr inbounds i8, i8* %13, i64 %7
  %94 = add nuw nsw i32 %12, 1
  %95 = icmp eq i32 %94, 4
  br i1 %95, label %96, label %8

96:                                               ; preds = %8
  %97 = sext i32 %89 to i64
  %98 = mul nsw i64 %97, %97
  %99 = lshr i64 %98, 5
  %100 = trunc i64 %99 to i32
  %101 = sub i32 %91, %100
  ret i32 %101
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_sub_pixel_variance8x4_c(i8* nocapture readonly, i32, i32, i32, i8* nocapture readonly, i32, i32* nocapture) local_unnamed_addr #2 {
  %8 = alloca [40 x i16], align 16
  %9 = alloca [32 x i8], align 16
  %10 = bitcast [40 x i16]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %10) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %10, i8 -86, i64 80, i1 false)
  %11 = getelementptr inbounds [32 x i8], [32 x i8]* %9, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %11) #4
  %12 = sext i32 %2 to i64
  %13 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %12, i64 0
  %14 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %12, i64 1
  %15 = add i32 %1, -8
  %16 = zext i32 %15 to i64
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %11, i8 -86, i64 32, i1 false)
  %17 = load i8, i8* %13, align 2
  %18 = zext i8 %17 to i32
  %19 = load i8, i8* %14, align 1
  %20 = zext i8 %19 to i32
  %21 = insertelement <8 x i32> undef, i32 %18, i32 0
  %22 = shufflevector <8 x i32> %21, <8 x i32> undef, <8 x i32> zeroinitializer
  %23 = insertelement <8 x i32> undef, i32 %20, i32 0
  %24 = shufflevector <8 x i32> %23, <8 x i32> undef, <8 x i32> zeroinitializer
  %25 = getelementptr inbounds [40 x i16], [40 x i16]* %8, i64 0, i64 0
  %26 = getelementptr inbounds i8, i8* %0, i64 1
  %27 = bitcast i8* %0 to <8 x i8>*
  %28 = load <8 x i8>, <8 x i8>* %27, align 1
  %29 = zext <8 x i8> %28 to <8 x i32>
  %30 = mul nuw nsw <8 x i32> %22, %29
  %31 = getelementptr inbounds i8, i8* %0, i64 8
  %32 = bitcast i8* %26 to <8 x i8>*
  %33 = load <8 x i8>, <8 x i8>* %32, align 1
  %34 = zext <8 x i8> %33 to <8 x i32>
  %35 = mul nuw nsw <8 x i32> %24, %34
  %36 = add nuw nsw <8 x i32> %30, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %37 = add nuw nsw <8 x i32> %36, %35
  %38 = lshr <8 x i32> %37, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %39 = trunc <8 x i32> %38 to <8 x i16>
  %40 = bitcast [40 x i16]* %8 to <8 x i16>*
  store <8 x i16> %39, <8 x i16>* %40, align 16
  %41 = getelementptr inbounds i8, i8* %31, i64 %16
  %42 = getelementptr inbounds [40 x i16], [40 x i16]* %8, i64 0, i64 8
  %43 = getelementptr inbounds i8, i8* %41, i64 1
  %44 = bitcast i8* %41 to <8 x i8>*
  %45 = load <8 x i8>, <8 x i8>* %44, align 1
  %46 = zext <8 x i8> %45 to <8 x i32>
  %47 = mul nuw nsw <8 x i32> %22, %46
  %48 = getelementptr inbounds i8, i8* %41, i64 8
  %49 = bitcast i8* %43 to <8 x i8>*
  %50 = load <8 x i8>, <8 x i8>* %49, align 1
  %51 = zext <8 x i8> %50 to <8 x i32>
  %52 = mul nuw nsw <8 x i32> %24, %51
  %53 = add nuw nsw <8 x i32> %47, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %54 = add nuw nsw <8 x i32> %53, %52
  %55 = lshr <8 x i32> %54, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %56 = trunc <8 x i32> %55 to <8 x i16>
  %57 = bitcast i16* %42 to <8 x i16>*
  store <8 x i16> %56, <8 x i16>* %57, align 16
  %58 = getelementptr inbounds i8, i8* %48, i64 %16
  %59 = getelementptr inbounds [40 x i16], [40 x i16]* %8, i64 0, i64 16
  %60 = getelementptr inbounds i8, i8* %58, i64 1
  %61 = bitcast i8* %58 to <8 x i8>*
  %62 = load <8 x i8>, <8 x i8>* %61, align 1
  %63 = zext <8 x i8> %62 to <8 x i32>
  %64 = mul nuw nsw <8 x i32> %22, %63
  %65 = getelementptr inbounds i8, i8* %58, i64 8
  %66 = bitcast i8* %60 to <8 x i8>*
  %67 = load <8 x i8>, <8 x i8>* %66, align 1
  %68 = zext <8 x i8> %67 to <8 x i32>
  %69 = mul nuw nsw <8 x i32> %24, %68
  %70 = add nuw nsw <8 x i32> %64, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %71 = add nuw nsw <8 x i32> %70, %69
  %72 = lshr <8 x i32> %71, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %73 = trunc <8 x i32> %72 to <8 x i16>
  %74 = bitcast i16* %59 to <8 x i16>*
  store <8 x i16> %73, <8 x i16>* %74, align 16
  %75 = getelementptr inbounds i8, i8* %65, i64 %16
  %76 = getelementptr inbounds [40 x i16], [40 x i16]* %8, i64 0, i64 24
  %77 = getelementptr inbounds i8, i8* %75, i64 1
  %78 = bitcast i8* %75 to <8 x i8>*
  %79 = load <8 x i8>, <8 x i8>* %78, align 1
  %80 = zext <8 x i8> %79 to <8 x i32>
  %81 = mul nuw nsw <8 x i32> %22, %80
  %82 = getelementptr inbounds i8, i8* %75, i64 8
  %83 = bitcast i8* %77 to <8 x i8>*
  %84 = load <8 x i8>, <8 x i8>* %83, align 1
  %85 = zext <8 x i8> %84 to <8 x i32>
  %86 = mul nuw nsw <8 x i32> %24, %85
  %87 = add nuw nsw <8 x i32> %81, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %88 = add nuw nsw <8 x i32> %87, %86
  %89 = lshr <8 x i32> %88, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %90 = trunc <8 x i32> %89 to <8 x i16>
  %91 = bitcast i16* %76 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %91, align 16
  %92 = getelementptr inbounds i8, i8* %82, i64 %16
  %93 = getelementptr inbounds [40 x i16], [40 x i16]* %8, i64 0, i64 32
  %94 = getelementptr inbounds i8, i8* %92, i64 1
  %95 = bitcast i8* %92 to <8 x i8>*
  %96 = load <8 x i8>, <8 x i8>* %95, align 1
  %97 = zext <8 x i8> %96 to <8 x i32>
  %98 = mul nuw nsw <8 x i32> %22, %97
  %99 = bitcast i8* %94 to <8 x i8>*
  %100 = load <8 x i8>, <8 x i8>* %99, align 1
  %101 = zext <8 x i8> %100 to <8 x i32>
  %102 = mul nuw nsw <8 x i32> %24, %101
  %103 = add nuw nsw <8 x i32> %98, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %104 = add nuw nsw <8 x i32> %103, %102
  %105 = lshr <8 x i32> %104, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %106 = trunc <8 x i32> %105 to <8 x i16>
  %107 = bitcast i16* %93 to <8 x i16>*
  store <8 x i16> %106, <8 x i16>* %107, align 16
  %108 = sext i32 %3 to i64
  %109 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %108, i64 0
  %110 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %108, i64 1
  %111 = load i8, i8* %109, align 2
  %112 = zext i8 %111 to i32
  %113 = load i8, i8* %110, align 1
  %114 = zext i8 %113 to i32
  br label %115

115:                                              ; preds = %115, %7
  %116 = phi i32 [ 0, %7 ], [ %223, %115 ]
  %117 = phi i16* [ %25, %7 ], [ %221, %115 ]
  %118 = phi i8* [ %11, %7 ], [ %222, %115 ]
  %119 = load i16, i16* %117, align 2
  %120 = zext i16 %119 to i32
  %121 = mul nuw nsw i32 %112, %120
  %122 = getelementptr inbounds i16, i16* %117, i64 8
  %123 = load i16, i16* %122, align 2
  %124 = zext i16 %123 to i32
  %125 = mul nuw nsw i32 %114, %124
  %126 = add nuw nsw i32 %121, 64
  %127 = add nuw nsw i32 %126, %125
  %128 = lshr i32 %127, 7
  %129 = trunc i32 %128 to i8
  store i8 %129, i8* %118, align 1
  %130 = getelementptr inbounds i16, i16* %117, i64 1
  %131 = load i16, i16* %130, align 2
  %132 = zext i16 %131 to i32
  %133 = mul nuw nsw i32 %112, %132
  %134 = getelementptr inbounds i16, i16* %117, i64 9
  %135 = load i16, i16* %134, align 2
  %136 = zext i16 %135 to i32
  %137 = mul nuw nsw i32 %114, %136
  %138 = add nuw nsw i32 %133, 64
  %139 = add nuw nsw i32 %138, %137
  %140 = lshr i32 %139, 7
  %141 = trunc i32 %140 to i8
  %142 = getelementptr inbounds i8, i8* %118, i64 1
  store i8 %141, i8* %142, align 1
  %143 = getelementptr inbounds i16, i16* %117, i64 2
  %144 = load i16, i16* %143, align 2
  %145 = zext i16 %144 to i32
  %146 = mul nuw nsw i32 %112, %145
  %147 = getelementptr inbounds i16, i16* %117, i64 10
  %148 = load i16, i16* %147, align 2
  %149 = zext i16 %148 to i32
  %150 = mul nuw nsw i32 %114, %149
  %151 = add nuw nsw i32 %146, 64
  %152 = add nuw nsw i32 %151, %150
  %153 = lshr i32 %152, 7
  %154 = trunc i32 %153 to i8
  %155 = getelementptr inbounds i8, i8* %118, i64 2
  store i8 %154, i8* %155, align 1
  %156 = getelementptr inbounds i16, i16* %117, i64 3
  %157 = load i16, i16* %156, align 2
  %158 = zext i16 %157 to i32
  %159 = mul nuw nsw i32 %112, %158
  %160 = getelementptr inbounds i16, i16* %117, i64 11
  %161 = load i16, i16* %160, align 2
  %162 = zext i16 %161 to i32
  %163 = mul nuw nsw i32 %114, %162
  %164 = add nuw nsw i32 %159, 64
  %165 = add nuw nsw i32 %164, %163
  %166 = lshr i32 %165, 7
  %167 = trunc i32 %166 to i8
  %168 = getelementptr inbounds i8, i8* %118, i64 3
  store i8 %167, i8* %168, align 1
  %169 = getelementptr inbounds i16, i16* %117, i64 4
  %170 = load i16, i16* %169, align 2
  %171 = zext i16 %170 to i32
  %172 = mul nuw nsw i32 %112, %171
  %173 = getelementptr inbounds i16, i16* %117, i64 12
  %174 = load i16, i16* %173, align 2
  %175 = zext i16 %174 to i32
  %176 = mul nuw nsw i32 %114, %175
  %177 = add nuw nsw i32 %172, 64
  %178 = add nuw nsw i32 %177, %176
  %179 = lshr i32 %178, 7
  %180 = trunc i32 %179 to i8
  %181 = getelementptr inbounds i8, i8* %118, i64 4
  store i8 %180, i8* %181, align 1
  %182 = getelementptr inbounds i16, i16* %117, i64 5
  %183 = load i16, i16* %182, align 2
  %184 = zext i16 %183 to i32
  %185 = mul nuw nsw i32 %112, %184
  %186 = getelementptr inbounds i16, i16* %117, i64 13
  %187 = load i16, i16* %186, align 2
  %188 = zext i16 %187 to i32
  %189 = mul nuw nsw i32 %114, %188
  %190 = add nuw nsw i32 %185, 64
  %191 = add nuw nsw i32 %190, %189
  %192 = lshr i32 %191, 7
  %193 = trunc i32 %192 to i8
  %194 = getelementptr inbounds i8, i8* %118, i64 5
  store i8 %193, i8* %194, align 1
  %195 = getelementptr inbounds i16, i16* %117, i64 6
  %196 = load i16, i16* %195, align 2
  %197 = zext i16 %196 to i32
  %198 = mul nuw nsw i32 %112, %197
  %199 = getelementptr inbounds i16, i16* %117, i64 14
  %200 = load i16, i16* %199, align 2
  %201 = zext i16 %200 to i32
  %202 = mul nuw nsw i32 %114, %201
  %203 = add nuw nsw i32 %198, 64
  %204 = add nuw nsw i32 %203, %202
  %205 = lshr i32 %204, 7
  %206 = trunc i32 %205 to i8
  %207 = getelementptr inbounds i8, i8* %118, i64 6
  store i8 %206, i8* %207, align 1
  %208 = getelementptr inbounds i16, i16* %117, i64 7
  %209 = load i16, i16* %208, align 2
  %210 = zext i16 %209 to i32
  %211 = mul nuw nsw i32 %112, %210
  %212 = getelementptr inbounds i16, i16* %117, i64 15
  %213 = load i16, i16* %212, align 2
  %214 = zext i16 %213 to i32
  %215 = mul nuw nsw i32 %114, %214
  %216 = add nuw nsw i32 %211, 64
  %217 = add nuw nsw i32 %216, %215
  %218 = lshr i32 %217, 7
  %219 = trunc i32 %218 to i8
  %220 = getelementptr inbounds i8, i8* %118, i64 7
  store i8 %219, i8* %220, align 1
  %221 = getelementptr inbounds i16, i16* %117, i64 8
  %222 = getelementptr inbounds i8, i8* %118, i64 8
  %223 = add nuw nsw i32 %116, 1
  %224 = icmp eq i32 %223, 4
  br i1 %224, label %225, label %115

225:                                              ; preds = %115
  %226 = call i32 @vpx_variance8x4_c(i8* nonnull %11, i32 8, i8* %4, i32 %5, i32* %6)
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %11) #4
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %10) #4
  ret i32 %226
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_sub_pixel_avg_variance8x4_c(i8* nocapture readonly, i32, i32, i32, i8* nocapture readonly, i32, i32* nocapture, i8* nocapture readonly) local_unnamed_addr #2 {
  %9 = alloca [40 x i16], align 16
  %10 = alloca [32 x i8], align 16
  %11 = alloca [32 x i8], align 16
  %12 = bitcast [40 x i16]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %12) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %12, i8 -86, i64 80, i1 false)
  %13 = getelementptr inbounds [32 x i8], [32 x i8]* %10, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %13) #4
  %14 = getelementptr inbounds [32 x i8], [32 x i8]* %11, i64 0, i64 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %13, i8 -86, i64 32, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %14) #4
  %15 = sext i32 %2 to i64
  %16 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %15, i64 0
  %17 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %15, i64 1
  %18 = add i32 %1, -8
  %19 = zext i32 %18 to i64
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %14, i8 -86, i64 32, i1 false)
  %20 = load i8, i8* %16, align 2
  %21 = zext i8 %20 to i32
  %22 = load i8, i8* %17, align 1
  %23 = zext i8 %22 to i32
  %24 = insertelement <8 x i32> undef, i32 %21, i32 0
  %25 = shufflevector <8 x i32> %24, <8 x i32> undef, <8 x i32> zeroinitializer
  %26 = insertelement <8 x i32> undef, i32 %23, i32 0
  %27 = shufflevector <8 x i32> %26, <8 x i32> undef, <8 x i32> zeroinitializer
  %28 = getelementptr inbounds [40 x i16], [40 x i16]* %9, i64 0, i64 0
  %29 = getelementptr inbounds i8, i8* %0, i64 1
  %30 = bitcast i8* %0 to <8 x i8>*
  %31 = load <8 x i8>, <8 x i8>* %30, align 1
  %32 = zext <8 x i8> %31 to <8 x i32>
  %33 = mul nuw nsw <8 x i32> %25, %32
  %34 = getelementptr inbounds i8, i8* %0, i64 8
  %35 = bitcast i8* %29 to <8 x i8>*
  %36 = load <8 x i8>, <8 x i8>* %35, align 1
  %37 = zext <8 x i8> %36 to <8 x i32>
  %38 = mul nuw nsw <8 x i32> %27, %37
  %39 = add nuw nsw <8 x i32> %33, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %40 = add nuw nsw <8 x i32> %39, %38
  %41 = lshr <8 x i32> %40, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %42 = trunc <8 x i32> %41 to <8 x i16>
  %43 = bitcast [40 x i16]* %9 to <8 x i16>*
  store <8 x i16> %42, <8 x i16>* %43, align 16
  %44 = getelementptr inbounds i8, i8* %34, i64 %19
  %45 = getelementptr inbounds [40 x i16], [40 x i16]* %9, i64 0, i64 8
  %46 = getelementptr inbounds i8, i8* %44, i64 1
  %47 = bitcast i8* %44 to <8 x i8>*
  %48 = load <8 x i8>, <8 x i8>* %47, align 1
  %49 = zext <8 x i8> %48 to <8 x i32>
  %50 = mul nuw nsw <8 x i32> %25, %49
  %51 = getelementptr inbounds i8, i8* %44, i64 8
  %52 = bitcast i8* %46 to <8 x i8>*
  %53 = load <8 x i8>, <8 x i8>* %52, align 1
  %54 = zext <8 x i8> %53 to <8 x i32>
  %55 = mul nuw nsw <8 x i32> %27, %54
  %56 = add nuw nsw <8 x i32> %50, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %57 = add nuw nsw <8 x i32> %56, %55
  %58 = lshr <8 x i32> %57, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %59 = trunc <8 x i32> %58 to <8 x i16>
  %60 = bitcast i16* %45 to <8 x i16>*
  store <8 x i16> %59, <8 x i16>* %60, align 16
  %61 = getelementptr inbounds i8, i8* %51, i64 %19
  %62 = getelementptr inbounds [40 x i16], [40 x i16]* %9, i64 0, i64 16
  %63 = getelementptr inbounds i8, i8* %61, i64 1
  %64 = bitcast i8* %61 to <8 x i8>*
  %65 = load <8 x i8>, <8 x i8>* %64, align 1
  %66 = zext <8 x i8> %65 to <8 x i32>
  %67 = mul nuw nsw <8 x i32> %25, %66
  %68 = getelementptr inbounds i8, i8* %61, i64 8
  %69 = bitcast i8* %63 to <8 x i8>*
  %70 = load <8 x i8>, <8 x i8>* %69, align 1
  %71 = zext <8 x i8> %70 to <8 x i32>
  %72 = mul nuw nsw <8 x i32> %27, %71
  %73 = add nuw nsw <8 x i32> %67, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %74 = add nuw nsw <8 x i32> %73, %72
  %75 = lshr <8 x i32> %74, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %76 = trunc <8 x i32> %75 to <8 x i16>
  %77 = bitcast i16* %62 to <8 x i16>*
  store <8 x i16> %76, <8 x i16>* %77, align 16
  %78 = getelementptr inbounds i8, i8* %68, i64 %19
  %79 = getelementptr inbounds [40 x i16], [40 x i16]* %9, i64 0, i64 24
  %80 = getelementptr inbounds i8, i8* %78, i64 1
  %81 = bitcast i8* %78 to <8 x i8>*
  %82 = load <8 x i8>, <8 x i8>* %81, align 1
  %83 = zext <8 x i8> %82 to <8 x i32>
  %84 = mul nuw nsw <8 x i32> %25, %83
  %85 = getelementptr inbounds i8, i8* %78, i64 8
  %86 = bitcast i8* %80 to <8 x i8>*
  %87 = load <8 x i8>, <8 x i8>* %86, align 1
  %88 = zext <8 x i8> %87 to <8 x i32>
  %89 = mul nuw nsw <8 x i32> %27, %88
  %90 = add nuw nsw <8 x i32> %84, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %91 = add nuw nsw <8 x i32> %90, %89
  %92 = lshr <8 x i32> %91, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %93 = trunc <8 x i32> %92 to <8 x i16>
  %94 = bitcast i16* %79 to <8 x i16>*
  store <8 x i16> %93, <8 x i16>* %94, align 16
  %95 = getelementptr inbounds i8, i8* %85, i64 %19
  %96 = getelementptr inbounds [40 x i16], [40 x i16]* %9, i64 0, i64 32
  %97 = getelementptr inbounds i8, i8* %95, i64 1
  %98 = bitcast i8* %95 to <8 x i8>*
  %99 = load <8 x i8>, <8 x i8>* %98, align 1
  %100 = zext <8 x i8> %99 to <8 x i32>
  %101 = mul nuw nsw <8 x i32> %25, %100
  %102 = bitcast i8* %97 to <8 x i8>*
  %103 = load <8 x i8>, <8 x i8>* %102, align 1
  %104 = zext <8 x i8> %103 to <8 x i32>
  %105 = mul nuw nsw <8 x i32> %27, %104
  %106 = add nuw nsw <8 x i32> %101, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %107 = add nuw nsw <8 x i32> %106, %105
  %108 = lshr <8 x i32> %107, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %109 = trunc <8 x i32> %108 to <8 x i16>
  %110 = bitcast i16* %96 to <8 x i16>*
  store <8 x i16> %109, <8 x i16>* %110, align 16
  %111 = sext i32 %3 to i64
  %112 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %111, i64 0
  %113 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %111, i64 1
  %114 = load i8, i8* %112, align 2
  %115 = zext i8 %114 to i32
  %116 = load i8, i8* %113, align 1
  %117 = zext i8 %116 to i32
  br label %118

118:                                              ; preds = %118, %8
  %119 = phi i32 [ 0, %8 ], [ %226, %118 ]
  %120 = phi i16* [ %28, %8 ], [ %224, %118 ]
  %121 = phi i8* [ %13, %8 ], [ %225, %118 ]
  %122 = load i16, i16* %120, align 2
  %123 = zext i16 %122 to i32
  %124 = mul nuw nsw i32 %115, %123
  %125 = getelementptr inbounds i16, i16* %120, i64 8
  %126 = load i16, i16* %125, align 2
  %127 = zext i16 %126 to i32
  %128 = mul nuw nsw i32 %117, %127
  %129 = add nuw nsw i32 %124, 64
  %130 = add nuw nsw i32 %129, %128
  %131 = lshr i32 %130, 7
  %132 = trunc i32 %131 to i8
  store i8 %132, i8* %121, align 1
  %133 = getelementptr inbounds i16, i16* %120, i64 1
  %134 = load i16, i16* %133, align 2
  %135 = zext i16 %134 to i32
  %136 = mul nuw nsw i32 %115, %135
  %137 = getelementptr inbounds i16, i16* %120, i64 9
  %138 = load i16, i16* %137, align 2
  %139 = zext i16 %138 to i32
  %140 = mul nuw nsw i32 %117, %139
  %141 = add nuw nsw i32 %136, 64
  %142 = add nuw nsw i32 %141, %140
  %143 = lshr i32 %142, 7
  %144 = trunc i32 %143 to i8
  %145 = getelementptr inbounds i8, i8* %121, i64 1
  store i8 %144, i8* %145, align 1
  %146 = getelementptr inbounds i16, i16* %120, i64 2
  %147 = load i16, i16* %146, align 2
  %148 = zext i16 %147 to i32
  %149 = mul nuw nsw i32 %115, %148
  %150 = getelementptr inbounds i16, i16* %120, i64 10
  %151 = load i16, i16* %150, align 2
  %152 = zext i16 %151 to i32
  %153 = mul nuw nsw i32 %117, %152
  %154 = add nuw nsw i32 %149, 64
  %155 = add nuw nsw i32 %154, %153
  %156 = lshr i32 %155, 7
  %157 = trunc i32 %156 to i8
  %158 = getelementptr inbounds i8, i8* %121, i64 2
  store i8 %157, i8* %158, align 1
  %159 = getelementptr inbounds i16, i16* %120, i64 3
  %160 = load i16, i16* %159, align 2
  %161 = zext i16 %160 to i32
  %162 = mul nuw nsw i32 %115, %161
  %163 = getelementptr inbounds i16, i16* %120, i64 11
  %164 = load i16, i16* %163, align 2
  %165 = zext i16 %164 to i32
  %166 = mul nuw nsw i32 %117, %165
  %167 = add nuw nsw i32 %162, 64
  %168 = add nuw nsw i32 %167, %166
  %169 = lshr i32 %168, 7
  %170 = trunc i32 %169 to i8
  %171 = getelementptr inbounds i8, i8* %121, i64 3
  store i8 %170, i8* %171, align 1
  %172 = getelementptr inbounds i16, i16* %120, i64 4
  %173 = load i16, i16* %172, align 2
  %174 = zext i16 %173 to i32
  %175 = mul nuw nsw i32 %115, %174
  %176 = getelementptr inbounds i16, i16* %120, i64 12
  %177 = load i16, i16* %176, align 2
  %178 = zext i16 %177 to i32
  %179 = mul nuw nsw i32 %117, %178
  %180 = add nuw nsw i32 %175, 64
  %181 = add nuw nsw i32 %180, %179
  %182 = lshr i32 %181, 7
  %183 = trunc i32 %182 to i8
  %184 = getelementptr inbounds i8, i8* %121, i64 4
  store i8 %183, i8* %184, align 1
  %185 = getelementptr inbounds i16, i16* %120, i64 5
  %186 = load i16, i16* %185, align 2
  %187 = zext i16 %186 to i32
  %188 = mul nuw nsw i32 %115, %187
  %189 = getelementptr inbounds i16, i16* %120, i64 13
  %190 = load i16, i16* %189, align 2
  %191 = zext i16 %190 to i32
  %192 = mul nuw nsw i32 %117, %191
  %193 = add nuw nsw i32 %188, 64
  %194 = add nuw nsw i32 %193, %192
  %195 = lshr i32 %194, 7
  %196 = trunc i32 %195 to i8
  %197 = getelementptr inbounds i8, i8* %121, i64 5
  store i8 %196, i8* %197, align 1
  %198 = getelementptr inbounds i16, i16* %120, i64 6
  %199 = load i16, i16* %198, align 2
  %200 = zext i16 %199 to i32
  %201 = mul nuw nsw i32 %115, %200
  %202 = getelementptr inbounds i16, i16* %120, i64 14
  %203 = load i16, i16* %202, align 2
  %204 = zext i16 %203 to i32
  %205 = mul nuw nsw i32 %117, %204
  %206 = add nuw nsw i32 %201, 64
  %207 = add nuw nsw i32 %206, %205
  %208 = lshr i32 %207, 7
  %209 = trunc i32 %208 to i8
  %210 = getelementptr inbounds i8, i8* %121, i64 6
  store i8 %209, i8* %210, align 1
  %211 = getelementptr inbounds i16, i16* %120, i64 7
  %212 = load i16, i16* %211, align 2
  %213 = zext i16 %212 to i32
  %214 = mul nuw nsw i32 %115, %213
  %215 = getelementptr inbounds i16, i16* %120, i64 15
  %216 = load i16, i16* %215, align 2
  %217 = zext i16 %216 to i32
  %218 = mul nuw nsw i32 %117, %217
  %219 = add nuw nsw i32 %214, 64
  %220 = add nuw nsw i32 %219, %218
  %221 = lshr i32 %220, 7
  %222 = trunc i32 %221 to i8
  %223 = getelementptr inbounds i8, i8* %121, i64 7
  store i8 %222, i8* %223, align 1
  %224 = getelementptr inbounds i16, i16* %120, i64 8
  %225 = getelementptr inbounds i8, i8* %121, i64 8
  %226 = add nuw nsw i32 %119, 1
  %227 = icmp eq i32 %226, 4
  br i1 %227, label %228, label %118

228:                                              ; preds = %118, %228
  %229 = phi i8* [ %318, %228 ], [ %14, %118 ]
  %230 = phi i32 [ %321, %228 ], [ 0, %118 ]
  %231 = phi i8* [ %319, %228 ], [ %7, %118 ]
  %232 = phi i8* [ %320, %228 ], [ %13, %118 ]
  %233 = load i8, i8* %231, align 1
  %234 = zext i8 %233 to i32
  %235 = load i8, i8* %232, align 1
  %236 = zext i8 %235 to i32
  %237 = add nuw nsw i32 %234, 1
  %238 = add nuw nsw i32 %237, %236
  %239 = lshr i32 %238, 1
  %240 = trunc i32 %239 to i8
  store i8 %240, i8* %229, align 1
  %241 = getelementptr inbounds i8, i8* %231, i64 1
  %242 = load i8, i8* %241, align 1
  %243 = zext i8 %242 to i32
  %244 = getelementptr inbounds i8, i8* %232, i64 1
  %245 = load i8, i8* %244, align 1
  %246 = zext i8 %245 to i32
  %247 = add nuw nsw i32 %243, 1
  %248 = add nuw nsw i32 %247, %246
  %249 = lshr i32 %248, 1
  %250 = trunc i32 %249 to i8
  %251 = getelementptr inbounds i8, i8* %229, i64 1
  store i8 %250, i8* %251, align 1
  %252 = getelementptr inbounds i8, i8* %231, i64 2
  %253 = load i8, i8* %252, align 1
  %254 = zext i8 %253 to i32
  %255 = getelementptr inbounds i8, i8* %232, i64 2
  %256 = load i8, i8* %255, align 1
  %257 = zext i8 %256 to i32
  %258 = add nuw nsw i32 %254, 1
  %259 = add nuw nsw i32 %258, %257
  %260 = lshr i32 %259, 1
  %261 = trunc i32 %260 to i8
  %262 = getelementptr inbounds i8, i8* %229, i64 2
  store i8 %261, i8* %262, align 1
  %263 = getelementptr inbounds i8, i8* %231, i64 3
  %264 = load i8, i8* %263, align 1
  %265 = zext i8 %264 to i32
  %266 = getelementptr inbounds i8, i8* %232, i64 3
  %267 = load i8, i8* %266, align 1
  %268 = zext i8 %267 to i32
  %269 = add nuw nsw i32 %265, 1
  %270 = add nuw nsw i32 %269, %268
  %271 = lshr i32 %270, 1
  %272 = trunc i32 %271 to i8
  %273 = getelementptr inbounds i8, i8* %229, i64 3
  store i8 %272, i8* %273, align 1
  %274 = getelementptr inbounds i8, i8* %231, i64 4
  %275 = load i8, i8* %274, align 1
  %276 = zext i8 %275 to i32
  %277 = getelementptr inbounds i8, i8* %232, i64 4
  %278 = load i8, i8* %277, align 1
  %279 = zext i8 %278 to i32
  %280 = add nuw nsw i32 %276, 1
  %281 = add nuw nsw i32 %280, %279
  %282 = lshr i32 %281, 1
  %283 = trunc i32 %282 to i8
  %284 = getelementptr inbounds i8, i8* %229, i64 4
  store i8 %283, i8* %284, align 1
  %285 = getelementptr inbounds i8, i8* %231, i64 5
  %286 = load i8, i8* %285, align 1
  %287 = zext i8 %286 to i32
  %288 = getelementptr inbounds i8, i8* %232, i64 5
  %289 = load i8, i8* %288, align 1
  %290 = zext i8 %289 to i32
  %291 = add nuw nsw i32 %287, 1
  %292 = add nuw nsw i32 %291, %290
  %293 = lshr i32 %292, 1
  %294 = trunc i32 %293 to i8
  %295 = getelementptr inbounds i8, i8* %229, i64 5
  store i8 %294, i8* %295, align 1
  %296 = getelementptr inbounds i8, i8* %231, i64 6
  %297 = load i8, i8* %296, align 1
  %298 = zext i8 %297 to i32
  %299 = getelementptr inbounds i8, i8* %232, i64 6
  %300 = load i8, i8* %299, align 1
  %301 = zext i8 %300 to i32
  %302 = add nuw nsw i32 %298, 1
  %303 = add nuw nsw i32 %302, %301
  %304 = lshr i32 %303, 1
  %305 = trunc i32 %304 to i8
  %306 = getelementptr inbounds i8, i8* %229, i64 6
  store i8 %305, i8* %306, align 1
  %307 = getelementptr inbounds i8, i8* %231, i64 7
  %308 = load i8, i8* %307, align 1
  %309 = zext i8 %308 to i32
  %310 = getelementptr inbounds i8, i8* %232, i64 7
  %311 = load i8, i8* %310, align 1
  %312 = zext i8 %311 to i32
  %313 = add nuw nsw i32 %309, 1
  %314 = add nuw nsw i32 %313, %312
  %315 = lshr i32 %314, 1
  %316 = trunc i32 %315 to i8
  %317 = getelementptr inbounds i8, i8* %229, i64 7
  store i8 %316, i8* %317, align 1
  %318 = getelementptr inbounds i8, i8* %229, i64 8
  %319 = getelementptr inbounds i8, i8* %231, i64 8
  %320 = getelementptr inbounds i8, i8* %232, i64 8
  %321 = add nuw nsw i32 %230, 1
  %322 = icmp eq i32 %321, 4
  br i1 %322, label %323, label %228

323:                                              ; preds = %228
  %324 = call i32 @vpx_variance8x4_c(i8* nonnull %14, i32 8, i8* %4, i32 %5, i32* %6)
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %14) #4
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %13) #4
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %12) #4
  ret i32 %324
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_variance4x8_c(i8* nocapture readonly, i32, i8* nocapture readonly, i32, i32* nocapture) local_unnamed_addr #2 {
  store i32 0, i32* %4, align 4
  %6 = sext i32 %1 to i64
  %7 = sext i32 %3 to i64
  br label %8

8:                                                ; preds = %8, %5
  %9 = phi i32 [ 0, %5 ], [ %51, %8 ]
  %10 = phi i32 [ 0, %5 ], [ %49, %8 ]
  %11 = phi i8* [ %0, %5 ], [ %52, %8 ]
  %12 = phi i32 [ 0, %5 ], [ %54, %8 ]
  %13 = phi i8* [ %2, %5 ], [ %53, %8 ]
  %14 = load i8, i8* %11, align 1
  %15 = zext i8 %14 to i32
  %16 = load i8, i8* %13, align 1
  %17 = zext i8 %16 to i32
  %18 = sub nsw i32 %15, %17
  %19 = add nsw i32 %18, %10
  %20 = mul nsw i32 %18, %18
  %21 = add i32 %20, %9
  store i32 %21, i32* %4, align 4
  %22 = getelementptr inbounds i8, i8* %11, i64 1
  %23 = load i8, i8* %22, align 1
  %24 = zext i8 %23 to i32
  %25 = getelementptr inbounds i8, i8* %13, i64 1
  %26 = load i8, i8* %25, align 1
  %27 = zext i8 %26 to i32
  %28 = sub nsw i32 %24, %27
  %29 = add nsw i32 %28, %19
  %30 = mul nsw i32 %28, %28
  %31 = add i32 %30, %21
  store i32 %31, i32* %4, align 4
  %32 = getelementptr inbounds i8, i8* %11, i64 2
  %33 = load i8, i8* %32, align 1
  %34 = zext i8 %33 to i32
  %35 = getelementptr inbounds i8, i8* %13, i64 2
  %36 = load i8, i8* %35, align 1
  %37 = zext i8 %36 to i32
  %38 = sub nsw i32 %34, %37
  %39 = add nsw i32 %38, %29
  %40 = mul nsw i32 %38, %38
  %41 = add i32 %40, %31
  store i32 %41, i32* %4, align 4
  %42 = getelementptr inbounds i8, i8* %11, i64 3
  %43 = load i8, i8* %42, align 1
  %44 = zext i8 %43 to i32
  %45 = getelementptr inbounds i8, i8* %13, i64 3
  %46 = load i8, i8* %45, align 1
  %47 = zext i8 %46 to i32
  %48 = sub nsw i32 %44, %47
  %49 = add nsw i32 %48, %39
  %50 = mul nsw i32 %48, %48
  %51 = add i32 %50, %41
  store i32 %51, i32* %4, align 4
  %52 = getelementptr inbounds i8, i8* %11, i64 %6
  %53 = getelementptr inbounds i8, i8* %13, i64 %7
  %54 = add nuw nsw i32 %12, 1
  %55 = icmp eq i32 %54, 8
  br i1 %55, label %56, label %8

56:                                               ; preds = %8
  %57 = sext i32 %49 to i64
  %58 = mul nsw i64 %57, %57
  %59 = lshr i64 %58, 5
  %60 = trunc i64 %59 to i32
  %61 = sub i32 %51, %60
  ret i32 %61
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_sub_pixel_variance4x8_c(i8* nocapture readonly, i32, i32, i32, i8* nocapture readonly, i32, i32* nocapture) local_unnamed_addr #2 {
  %8 = alloca [36 x i16], align 16
  %9 = alloca [32 x i8], align 16
  %10 = bitcast [36 x i16]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %10) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %10, i8 -86, i64 72, i1 false)
  %11 = getelementptr inbounds [32 x i8], [32 x i8]* %9, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %11) #4
  %12 = getelementptr inbounds [36 x i16], [36 x i16]* %8, i64 0, i64 0
  %13 = sext i32 %2 to i64
  %14 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %13, i64 0
  %15 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %13, i64 1
  %16 = add i32 %1, -4
  %17 = zext i32 %16 to i64
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %11, i8 -86, i64 32, i1 false)
  %18 = load i8, i8* %14, align 2
  %19 = zext i8 %18 to i32
  %20 = load i8, i8* %15, align 1
  %21 = zext i8 %20 to i32
  br label %22

22:                                               ; preds = %22, %7
  %23 = phi i32 [ 0, %7 ], [ %69, %22 ]
  %24 = phi i8* [ %0, %7 ], [ %67, %22 ]
  %25 = phi i16* [ %12, %7 ], [ %68, %22 ]
  %26 = load i8, i8* %24, align 1
  %27 = zext i8 %26 to i32
  %28 = mul nuw nsw i32 %19, %27
  %29 = getelementptr inbounds i8, i8* %24, i64 1
  %30 = load i8, i8* %29, align 1
  %31 = zext i8 %30 to i32
  %32 = mul nuw nsw i32 %21, %31
  %33 = add nuw nsw i32 %28, 64
  %34 = add nuw nsw i32 %33, %32
  %35 = lshr i32 %34, 7
  %36 = trunc i32 %35 to i16
  store i16 %36, i16* %25, align 2
  %37 = mul nuw nsw i32 %19, %31
  %38 = getelementptr inbounds i8, i8* %24, i64 2
  %39 = load i8, i8* %38, align 1
  %40 = zext i8 %39 to i32
  %41 = mul nuw nsw i32 %21, %40
  %42 = add nuw nsw i32 %37, 64
  %43 = add nuw nsw i32 %42, %41
  %44 = lshr i32 %43, 7
  %45 = trunc i32 %44 to i16
  %46 = getelementptr inbounds i16, i16* %25, i64 1
  store i16 %45, i16* %46, align 2
  %47 = mul nuw nsw i32 %19, %40
  %48 = getelementptr inbounds i8, i8* %24, i64 3
  %49 = load i8, i8* %48, align 1
  %50 = zext i8 %49 to i32
  %51 = mul nuw nsw i32 %21, %50
  %52 = add nuw nsw i32 %47, 64
  %53 = add nuw nsw i32 %52, %51
  %54 = lshr i32 %53, 7
  %55 = trunc i32 %54 to i16
  %56 = getelementptr inbounds i16, i16* %25, i64 2
  store i16 %55, i16* %56, align 2
  %57 = mul nuw nsw i32 %19, %50
  %58 = getelementptr inbounds i8, i8* %24, i64 4
  %59 = load i8, i8* %58, align 1
  %60 = zext i8 %59 to i32
  %61 = mul nuw nsw i32 %21, %60
  %62 = add nuw nsw i32 %57, 64
  %63 = add nuw nsw i32 %62, %61
  %64 = lshr i32 %63, 7
  %65 = trunc i32 %64 to i16
  %66 = getelementptr inbounds i16, i16* %25, i64 3
  store i16 %65, i16* %66, align 2
  %67 = getelementptr inbounds i8, i8* %58, i64 %17
  %68 = getelementptr inbounds i16, i16* %25, i64 4
  %69 = add nuw nsw i32 %23, 1
  %70 = icmp eq i32 %69, 9
  br i1 %70, label %71, label %22

71:                                               ; preds = %22
  %72 = sext i32 %3 to i64
  %73 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %72, i64 0
  %74 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %72, i64 1
  %75 = load i8, i8* %73, align 2
  %76 = zext i8 %75 to i32
  %77 = load i8, i8* %74, align 1
  %78 = zext i8 %77 to i32
  %79 = load i16, i16* %12, align 16
  br label %80

80:                                               ; preds = %80, %71
  %81 = phi i16 [ %79, %71 ], [ %88, %80 ]
  %82 = phi i32 [ 0, %71 ], [ %136, %80 ]
  %83 = phi i16* [ %12, %71 ], [ %134, %80 ]
  %84 = phi i8* [ %11, %71 ], [ %135, %80 ]
  %85 = zext i16 %81 to i32
  %86 = mul nuw nsw i32 %76, %85
  %87 = getelementptr inbounds i16, i16* %83, i64 4
  %88 = load i16, i16* %87, align 2
  %89 = zext i16 %88 to i32
  %90 = mul nuw nsw i32 %78, %89
  %91 = add nuw nsw i32 %86, 64
  %92 = add nuw nsw i32 %91, %90
  %93 = lshr i32 %92, 7
  %94 = trunc i32 %93 to i8
  store i8 %94, i8* %84, align 1
  %95 = getelementptr inbounds i16, i16* %83, i64 1
  %96 = load i16, i16* %95, align 2
  %97 = zext i16 %96 to i32
  %98 = mul nuw nsw i32 %76, %97
  %99 = getelementptr inbounds i16, i16* %83, i64 5
  %100 = load i16, i16* %99, align 2
  %101 = zext i16 %100 to i32
  %102 = mul nuw nsw i32 %78, %101
  %103 = add nuw nsw i32 %98, 64
  %104 = add nuw nsw i32 %103, %102
  %105 = lshr i32 %104, 7
  %106 = trunc i32 %105 to i8
  %107 = getelementptr inbounds i8, i8* %84, i64 1
  store i8 %106, i8* %107, align 1
  %108 = getelementptr inbounds i16, i16* %83, i64 2
  %109 = load i16, i16* %108, align 2
  %110 = zext i16 %109 to i32
  %111 = mul nuw nsw i32 %76, %110
  %112 = getelementptr inbounds i16, i16* %83, i64 6
  %113 = load i16, i16* %112, align 2
  %114 = zext i16 %113 to i32
  %115 = mul nuw nsw i32 %78, %114
  %116 = add nuw nsw i32 %111, 64
  %117 = add nuw nsw i32 %116, %115
  %118 = lshr i32 %117, 7
  %119 = trunc i32 %118 to i8
  %120 = getelementptr inbounds i8, i8* %84, i64 2
  store i8 %119, i8* %120, align 1
  %121 = getelementptr inbounds i16, i16* %83, i64 3
  %122 = load i16, i16* %121, align 2
  %123 = zext i16 %122 to i32
  %124 = mul nuw nsw i32 %76, %123
  %125 = getelementptr inbounds i16, i16* %83, i64 7
  %126 = load i16, i16* %125, align 2
  %127 = zext i16 %126 to i32
  %128 = mul nuw nsw i32 %78, %127
  %129 = add nuw nsw i32 %124, 64
  %130 = add nuw nsw i32 %129, %128
  %131 = lshr i32 %130, 7
  %132 = trunc i32 %131 to i8
  %133 = getelementptr inbounds i8, i8* %84, i64 3
  store i8 %132, i8* %133, align 1
  %134 = getelementptr inbounds i16, i16* %83, i64 4
  %135 = getelementptr inbounds i8, i8* %84, i64 4
  %136 = add nuw nsw i32 %82, 1
  %137 = icmp eq i32 %136, 8
  br i1 %137, label %138, label %80

138:                                              ; preds = %80
  store i32 0, i32* %6, align 4
  %139 = sext i32 %5 to i64
  br label %140

140:                                              ; preds = %140, %138
  %141 = phi i32 [ 0, %138 ], [ %183, %140 ]
  %142 = phi i32 [ 0, %138 ], [ %181, %140 ]
  %143 = phi i8* [ %11, %138 ], [ %184, %140 ]
  %144 = phi i32 [ 0, %138 ], [ %186, %140 ]
  %145 = phi i8* [ %4, %138 ], [ %185, %140 ]
  %146 = load i8, i8* %143, align 1
  %147 = zext i8 %146 to i32
  %148 = load i8, i8* %145, align 1
  %149 = zext i8 %148 to i32
  %150 = sub nsw i32 %147, %149
  %151 = add nsw i32 %150, %142
  %152 = mul nsw i32 %150, %150
  %153 = add i32 %152, %141
  store i32 %153, i32* %6, align 4
  %154 = getelementptr inbounds i8, i8* %143, i64 1
  %155 = load i8, i8* %154, align 1
  %156 = zext i8 %155 to i32
  %157 = getelementptr inbounds i8, i8* %145, i64 1
  %158 = load i8, i8* %157, align 1
  %159 = zext i8 %158 to i32
  %160 = sub nsw i32 %156, %159
  %161 = add nsw i32 %151, %160
  %162 = mul nsw i32 %160, %160
  %163 = add i32 %162, %153
  store i32 %163, i32* %6, align 4
  %164 = getelementptr inbounds i8, i8* %143, i64 2
  %165 = load i8, i8* %164, align 1
  %166 = zext i8 %165 to i32
  %167 = getelementptr inbounds i8, i8* %145, i64 2
  %168 = load i8, i8* %167, align 1
  %169 = zext i8 %168 to i32
  %170 = sub nsw i32 %166, %169
  %171 = add nsw i32 %161, %170
  %172 = mul nsw i32 %170, %170
  %173 = add i32 %172, %163
  store i32 %173, i32* %6, align 4
  %174 = getelementptr inbounds i8, i8* %143, i64 3
  %175 = load i8, i8* %174, align 1
  %176 = zext i8 %175 to i32
  %177 = getelementptr inbounds i8, i8* %145, i64 3
  %178 = load i8, i8* %177, align 1
  %179 = zext i8 %178 to i32
  %180 = sub nsw i32 %176, %179
  %181 = add nsw i32 %171, %180
  %182 = mul nsw i32 %180, %180
  %183 = add i32 %182, %173
  store i32 %183, i32* %6, align 4
  %184 = getelementptr inbounds i8, i8* %143, i64 4
  %185 = getelementptr inbounds i8, i8* %145, i64 %139
  %186 = add nuw nsw i32 %144, 1
  %187 = icmp eq i32 %186, 8
  br i1 %187, label %188, label %140

188:                                              ; preds = %140
  %189 = sext i32 %181 to i64
  %190 = mul nsw i64 %189, %189
  %191 = lshr i64 %190, 5
  %192 = trunc i64 %191 to i32
  %193 = sub i32 %183, %192
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %11) #4
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %10) #4
  ret i32 %193
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_sub_pixel_avg_variance4x8_c(i8* nocapture readonly, i32, i32, i32, i8* nocapture readonly, i32, i32* nocapture, i8* nocapture readonly) local_unnamed_addr #2 {
  %9 = alloca [36 x i16], align 16
  %10 = alloca [32 x i8], align 16
  %11 = alloca [32 x i8], align 16
  %12 = bitcast [36 x i16]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %12) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %12, i8 -86, i64 72, i1 false)
  %13 = getelementptr inbounds [32 x i8], [32 x i8]* %10, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %13) #4
  %14 = getelementptr inbounds [32 x i8], [32 x i8]* %11, i64 0, i64 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %13, i8 -86, i64 32, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %14) #4
  %15 = getelementptr inbounds [36 x i16], [36 x i16]* %9, i64 0, i64 0
  %16 = sext i32 %2 to i64
  %17 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %16, i64 0
  %18 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %16, i64 1
  %19 = add i32 %1, -4
  %20 = zext i32 %19 to i64
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %14, i8 -86, i64 32, i1 false)
  %21 = load i8, i8* %17, align 2
  %22 = zext i8 %21 to i32
  %23 = load i8, i8* %18, align 1
  %24 = zext i8 %23 to i32
  br label %25

25:                                               ; preds = %25, %8
  %26 = phi i32 [ 0, %8 ], [ %72, %25 ]
  %27 = phi i8* [ %0, %8 ], [ %70, %25 ]
  %28 = phi i16* [ %15, %8 ], [ %71, %25 ]
  %29 = load i8, i8* %27, align 1
  %30 = zext i8 %29 to i32
  %31 = mul nuw nsw i32 %22, %30
  %32 = getelementptr inbounds i8, i8* %27, i64 1
  %33 = load i8, i8* %32, align 1
  %34 = zext i8 %33 to i32
  %35 = mul nuw nsw i32 %24, %34
  %36 = add nuw nsw i32 %31, 64
  %37 = add nuw nsw i32 %36, %35
  %38 = lshr i32 %37, 7
  %39 = trunc i32 %38 to i16
  store i16 %39, i16* %28, align 2
  %40 = mul nuw nsw i32 %22, %34
  %41 = getelementptr inbounds i8, i8* %27, i64 2
  %42 = load i8, i8* %41, align 1
  %43 = zext i8 %42 to i32
  %44 = mul nuw nsw i32 %24, %43
  %45 = add nuw nsw i32 %40, 64
  %46 = add nuw nsw i32 %45, %44
  %47 = lshr i32 %46, 7
  %48 = trunc i32 %47 to i16
  %49 = getelementptr inbounds i16, i16* %28, i64 1
  store i16 %48, i16* %49, align 2
  %50 = mul nuw nsw i32 %22, %43
  %51 = getelementptr inbounds i8, i8* %27, i64 3
  %52 = load i8, i8* %51, align 1
  %53 = zext i8 %52 to i32
  %54 = mul nuw nsw i32 %24, %53
  %55 = add nuw nsw i32 %50, 64
  %56 = add nuw nsw i32 %55, %54
  %57 = lshr i32 %56, 7
  %58 = trunc i32 %57 to i16
  %59 = getelementptr inbounds i16, i16* %28, i64 2
  store i16 %58, i16* %59, align 2
  %60 = mul nuw nsw i32 %22, %53
  %61 = getelementptr inbounds i8, i8* %27, i64 4
  %62 = load i8, i8* %61, align 1
  %63 = zext i8 %62 to i32
  %64 = mul nuw nsw i32 %24, %63
  %65 = add nuw nsw i32 %60, 64
  %66 = add nuw nsw i32 %65, %64
  %67 = lshr i32 %66, 7
  %68 = trunc i32 %67 to i16
  %69 = getelementptr inbounds i16, i16* %28, i64 3
  store i16 %68, i16* %69, align 2
  %70 = getelementptr inbounds i8, i8* %61, i64 %20
  %71 = getelementptr inbounds i16, i16* %28, i64 4
  %72 = add nuw nsw i32 %26, 1
  %73 = icmp eq i32 %72, 9
  br i1 %73, label %74, label %25

74:                                               ; preds = %25
  %75 = sext i32 %3 to i64
  %76 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %75, i64 0
  %77 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %75, i64 1
  %78 = load i8, i8* %76, align 2
  %79 = zext i8 %78 to i32
  %80 = load i8, i8* %77, align 1
  %81 = zext i8 %80 to i32
  %82 = load i16, i16* %15, align 16
  br label %83

83:                                               ; preds = %83, %74
  %84 = phi i16 [ %82, %74 ], [ %91, %83 ]
  %85 = phi i32 [ 0, %74 ], [ %139, %83 ]
  %86 = phi i16* [ %15, %74 ], [ %137, %83 ]
  %87 = phi i8* [ %13, %74 ], [ %138, %83 ]
  %88 = zext i16 %84 to i32
  %89 = mul nuw nsw i32 %79, %88
  %90 = getelementptr inbounds i16, i16* %86, i64 4
  %91 = load i16, i16* %90, align 2
  %92 = zext i16 %91 to i32
  %93 = mul nuw nsw i32 %81, %92
  %94 = add nuw nsw i32 %89, 64
  %95 = add nuw nsw i32 %94, %93
  %96 = lshr i32 %95, 7
  %97 = trunc i32 %96 to i8
  store i8 %97, i8* %87, align 1
  %98 = getelementptr inbounds i16, i16* %86, i64 1
  %99 = load i16, i16* %98, align 2
  %100 = zext i16 %99 to i32
  %101 = mul nuw nsw i32 %79, %100
  %102 = getelementptr inbounds i16, i16* %86, i64 5
  %103 = load i16, i16* %102, align 2
  %104 = zext i16 %103 to i32
  %105 = mul nuw nsw i32 %81, %104
  %106 = add nuw nsw i32 %101, 64
  %107 = add nuw nsw i32 %106, %105
  %108 = lshr i32 %107, 7
  %109 = trunc i32 %108 to i8
  %110 = getelementptr inbounds i8, i8* %87, i64 1
  store i8 %109, i8* %110, align 1
  %111 = getelementptr inbounds i16, i16* %86, i64 2
  %112 = load i16, i16* %111, align 2
  %113 = zext i16 %112 to i32
  %114 = mul nuw nsw i32 %79, %113
  %115 = getelementptr inbounds i16, i16* %86, i64 6
  %116 = load i16, i16* %115, align 2
  %117 = zext i16 %116 to i32
  %118 = mul nuw nsw i32 %81, %117
  %119 = add nuw nsw i32 %114, 64
  %120 = add nuw nsw i32 %119, %118
  %121 = lshr i32 %120, 7
  %122 = trunc i32 %121 to i8
  %123 = getelementptr inbounds i8, i8* %87, i64 2
  store i8 %122, i8* %123, align 1
  %124 = getelementptr inbounds i16, i16* %86, i64 3
  %125 = load i16, i16* %124, align 2
  %126 = zext i16 %125 to i32
  %127 = mul nuw nsw i32 %79, %126
  %128 = getelementptr inbounds i16, i16* %86, i64 7
  %129 = load i16, i16* %128, align 2
  %130 = zext i16 %129 to i32
  %131 = mul nuw nsw i32 %81, %130
  %132 = add nuw nsw i32 %127, 64
  %133 = add nuw nsw i32 %132, %131
  %134 = lshr i32 %133, 7
  %135 = trunc i32 %134 to i8
  %136 = getelementptr inbounds i8, i8* %87, i64 3
  store i8 %135, i8* %136, align 1
  %137 = getelementptr inbounds i16, i16* %86, i64 4
  %138 = getelementptr inbounds i8, i8* %87, i64 4
  %139 = add nuw nsw i32 %85, 1
  %140 = icmp eq i32 %139, 8
  br i1 %140, label %141, label %83

141:                                              ; preds = %83, %141
  %142 = phi i8* [ %187, %141 ], [ %14, %83 ]
  %143 = phi i32 [ %190, %141 ], [ 0, %83 ]
  %144 = phi i8* [ %188, %141 ], [ %7, %83 ]
  %145 = phi i8* [ %189, %141 ], [ %13, %83 ]
  %146 = load i8, i8* %144, align 1
  %147 = zext i8 %146 to i32
  %148 = load i8, i8* %145, align 1
  %149 = zext i8 %148 to i32
  %150 = add nuw nsw i32 %147, 1
  %151 = add nuw nsw i32 %150, %149
  %152 = lshr i32 %151, 1
  %153 = trunc i32 %152 to i8
  store i8 %153, i8* %142, align 1
  %154 = getelementptr inbounds i8, i8* %144, i64 1
  %155 = load i8, i8* %154, align 1
  %156 = zext i8 %155 to i32
  %157 = getelementptr inbounds i8, i8* %145, i64 1
  %158 = load i8, i8* %157, align 1
  %159 = zext i8 %158 to i32
  %160 = add nuw nsw i32 %156, 1
  %161 = add nuw nsw i32 %160, %159
  %162 = lshr i32 %161, 1
  %163 = trunc i32 %162 to i8
  %164 = getelementptr inbounds i8, i8* %142, i64 1
  store i8 %163, i8* %164, align 1
  %165 = getelementptr inbounds i8, i8* %144, i64 2
  %166 = load i8, i8* %165, align 1
  %167 = zext i8 %166 to i32
  %168 = getelementptr inbounds i8, i8* %145, i64 2
  %169 = load i8, i8* %168, align 1
  %170 = zext i8 %169 to i32
  %171 = add nuw nsw i32 %167, 1
  %172 = add nuw nsw i32 %171, %170
  %173 = lshr i32 %172, 1
  %174 = trunc i32 %173 to i8
  %175 = getelementptr inbounds i8, i8* %142, i64 2
  store i8 %174, i8* %175, align 1
  %176 = getelementptr inbounds i8, i8* %144, i64 3
  %177 = load i8, i8* %176, align 1
  %178 = zext i8 %177 to i32
  %179 = getelementptr inbounds i8, i8* %145, i64 3
  %180 = load i8, i8* %179, align 1
  %181 = zext i8 %180 to i32
  %182 = add nuw nsw i32 %178, 1
  %183 = add nuw nsw i32 %182, %181
  %184 = lshr i32 %183, 1
  %185 = trunc i32 %184 to i8
  %186 = getelementptr inbounds i8, i8* %142, i64 3
  store i8 %185, i8* %186, align 1
  %187 = getelementptr inbounds i8, i8* %142, i64 4
  %188 = getelementptr inbounds i8, i8* %144, i64 4
  %189 = getelementptr inbounds i8, i8* %145, i64 4
  %190 = add nuw nsw i32 %143, 1
  %191 = icmp eq i32 %190, 8
  br i1 %191, label %192, label %141

192:                                              ; preds = %141
  store i32 0, i32* %6, align 4
  %193 = sext i32 %5 to i64
  br label %194

194:                                              ; preds = %194, %192
  %195 = phi i32 [ 0, %192 ], [ %237, %194 ]
  %196 = phi i32 [ 0, %192 ], [ %235, %194 ]
  %197 = phi i8* [ %14, %192 ], [ %238, %194 ]
  %198 = phi i32 [ 0, %192 ], [ %240, %194 ]
  %199 = phi i8* [ %4, %192 ], [ %239, %194 ]
  %200 = load i8, i8* %197, align 1
  %201 = zext i8 %200 to i32
  %202 = load i8, i8* %199, align 1
  %203 = zext i8 %202 to i32
  %204 = sub nsw i32 %201, %203
  %205 = add nsw i32 %204, %196
  %206 = mul nsw i32 %204, %204
  %207 = add i32 %206, %195
  store i32 %207, i32* %6, align 4
  %208 = getelementptr inbounds i8, i8* %197, i64 1
  %209 = load i8, i8* %208, align 1
  %210 = zext i8 %209 to i32
  %211 = getelementptr inbounds i8, i8* %199, i64 1
  %212 = load i8, i8* %211, align 1
  %213 = zext i8 %212 to i32
  %214 = sub nsw i32 %210, %213
  %215 = add nsw i32 %205, %214
  %216 = mul nsw i32 %214, %214
  %217 = add i32 %216, %207
  store i32 %217, i32* %6, align 4
  %218 = getelementptr inbounds i8, i8* %197, i64 2
  %219 = load i8, i8* %218, align 1
  %220 = zext i8 %219 to i32
  %221 = getelementptr inbounds i8, i8* %199, i64 2
  %222 = load i8, i8* %221, align 1
  %223 = zext i8 %222 to i32
  %224 = sub nsw i32 %220, %223
  %225 = add nsw i32 %215, %224
  %226 = mul nsw i32 %224, %224
  %227 = add i32 %226, %217
  store i32 %227, i32* %6, align 4
  %228 = getelementptr inbounds i8, i8* %197, i64 3
  %229 = load i8, i8* %228, align 1
  %230 = zext i8 %229 to i32
  %231 = getelementptr inbounds i8, i8* %199, i64 3
  %232 = load i8, i8* %231, align 1
  %233 = zext i8 %232 to i32
  %234 = sub nsw i32 %230, %233
  %235 = add nsw i32 %225, %234
  %236 = mul nsw i32 %234, %234
  %237 = add i32 %236, %227
  store i32 %237, i32* %6, align 4
  %238 = getelementptr inbounds i8, i8* %197, i64 4
  %239 = getelementptr inbounds i8, i8* %199, i64 %193
  %240 = add nuw nsw i32 %198, 1
  %241 = icmp eq i32 %240, 8
  br i1 %241, label %242, label %194

242:                                              ; preds = %194
  %243 = sext i32 %235 to i64
  %244 = mul nsw i64 %243, %243
  %245 = lshr i64 %244, 5
  %246 = trunc i64 %245 to i32
  %247 = sub i32 %237, %246
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %14) #4
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %13) #4
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %12) #4
  ret i32 %247
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_variance4x4_c(i8* nocapture readonly, i32, i8* nocapture readonly, i32, i32* nocapture) local_unnamed_addr #2 {
  store i32 0, i32* %4, align 4
  %6 = sext i32 %1 to i64
  %7 = sext i32 %3 to i64
  %8 = load i8, i8* %0, align 1
  %9 = zext i8 %8 to i32
  %10 = load i8, i8* %2, align 1
  %11 = zext i8 %10 to i32
  %12 = sub nsw i32 %9, %11
  %13 = mul nsw i32 %12, %12
  store i32 %13, i32* %4, align 4
  %14 = getelementptr inbounds i8, i8* %0, i64 1
  %15 = load i8, i8* %14, align 1
  %16 = zext i8 %15 to i32
  %17 = getelementptr inbounds i8, i8* %2, i64 1
  %18 = load i8, i8* %17, align 1
  %19 = zext i8 %18 to i32
  %20 = sub nsw i32 %16, %19
  %21 = add nsw i32 %20, %12
  %22 = mul nsw i32 %20, %20
  %23 = add nuw nsw i32 %22, %13
  store i32 %23, i32* %4, align 4
  %24 = getelementptr inbounds i8, i8* %0, i64 2
  %25 = load i8, i8* %24, align 1
  %26 = zext i8 %25 to i32
  %27 = getelementptr inbounds i8, i8* %2, i64 2
  %28 = load i8, i8* %27, align 1
  %29 = zext i8 %28 to i32
  %30 = sub nsw i32 %26, %29
  %31 = add nsw i32 %30, %21
  %32 = mul nsw i32 %30, %30
  %33 = add nuw nsw i32 %32, %23
  store i32 %33, i32* %4, align 4
  %34 = getelementptr inbounds i8, i8* %0, i64 3
  %35 = load i8, i8* %34, align 1
  %36 = zext i8 %35 to i32
  %37 = getelementptr inbounds i8, i8* %2, i64 3
  %38 = load i8, i8* %37, align 1
  %39 = zext i8 %38 to i32
  %40 = sub nsw i32 %36, %39
  %41 = add nsw i32 %40, %31
  %42 = mul nsw i32 %40, %40
  %43 = add nuw nsw i32 %42, %33
  store i32 %43, i32* %4, align 4
  %44 = getelementptr inbounds i8, i8* %0, i64 %6
  %45 = getelementptr inbounds i8, i8* %2, i64 %7
  %46 = load i8, i8* %44, align 1
  %47 = zext i8 %46 to i32
  %48 = load i8, i8* %45, align 1
  %49 = zext i8 %48 to i32
  %50 = sub nsw i32 %47, %49
  %51 = add nsw i32 %50, %41
  %52 = mul nsw i32 %50, %50
  %53 = add nuw nsw i32 %52, %43
  store i32 %53, i32* %4, align 4
  %54 = getelementptr inbounds i8, i8* %44, i64 1
  %55 = load i8, i8* %54, align 1
  %56 = zext i8 %55 to i32
  %57 = getelementptr inbounds i8, i8* %45, i64 1
  %58 = load i8, i8* %57, align 1
  %59 = zext i8 %58 to i32
  %60 = sub nsw i32 %56, %59
  %61 = add nsw i32 %60, %51
  %62 = mul nsw i32 %60, %60
  %63 = add nuw nsw i32 %62, %53
  store i32 %63, i32* %4, align 4
  %64 = getelementptr inbounds i8, i8* %44, i64 2
  %65 = load i8, i8* %64, align 1
  %66 = zext i8 %65 to i32
  %67 = getelementptr inbounds i8, i8* %45, i64 2
  %68 = load i8, i8* %67, align 1
  %69 = zext i8 %68 to i32
  %70 = sub nsw i32 %66, %69
  %71 = add nsw i32 %70, %61
  %72 = mul nsw i32 %70, %70
  %73 = add nuw nsw i32 %72, %63
  store i32 %73, i32* %4, align 4
  %74 = getelementptr inbounds i8, i8* %44, i64 3
  %75 = load i8, i8* %74, align 1
  %76 = zext i8 %75 to i32
  %77 = getelementptr inbounds i8, i8* %45, i64 3
  %78 = load i8, i8* %77, align 1
  %79 = zext i8 %78 to i32
  %80 = sub nsw i32 %76, %79
  %81 = add nsw i32 %80, %71
  %82 = mul nsw i32 %80, %80
  %83 = add nsw i32 %82, %73
  store i32 %83, i32* %4, align 4
  %84 = getelementptr inbounds i8, i8* %44, i64 %6
  %85 = getelementptr inbounds i8, i8* %45, i64 %7
  %86 = load i8, i8* %84, align 1
  %87 = zext i8 %86 to i32
  %88 = load i8, i8* %85, align 1
  %89 = zext i8 %88 to i32
  %90 = sub nsw i32 %87, %89
  %91 = add nsw i32 %90, %81
  %92 = mul nsw i32 %90, %90
  %93 = add nsw i32 %92, %83
  store i32 %93, i32* %4, align 4
  %94 = getelementptr inbounds i8, i8* %84, i64 1
  %95 = load i8, i8* %94, align 1
  %96 = zext i8 %95 to i32
  %97 = getelementptr inbounds i8, i8* %85, i64 1
  %98 = load i8, i8* %97, align 1
  %99 = zext i8 %98 to i32
  %100 = sub nsw i32 %96, %99
  %101 = add nsw i32 %100, %91
  %102 = mul nsw i32 %100, %100
  %103 = add nsw i32 %102, %93
  store i32 %103, i32* %4, align 4
  %104 = getelementptr inbounds i8, i8* %84, i64 2
  %105 = load i8, i8* %104, align 1
  %106 = zext i8 %105 to i32
  %107 = getelementptr inbounds i8, i8* %85, i64 2
  %108 = load i8, i8* %107, align 1
  %109 = zext i8 %108 to i32
  %110 = sub nsw i32 %106, %109
  %111 = add nsw i32 %110, %101
  %112 = mul nsw i32 %110, %110
  %113 = add nsw i32 %112, %103
  store i32 %113, i32* %4, align 4
  %114 = getelementptr inbounds i8, i8* %84, i64 3
  %115 = load i8, i8* %114, align 1
  %116 = zext i8 %115 to i32
  %117 = getelementptr inbounds i8, i8* %85, i64 3
  %118 = load i8, i8* %117, align 1
  %119 = zext i8 %118 to i32
  %120 = sub nsw i32 %116, %119
  %121 = add nsw i32 %120, %111
  %122 = mul nsw i32 %120, %120
  %123 = add nsw i32 %122, %113
  store i32 %123, i32* %4, align 4
  %124 = getelementptr inbounds i8, i8* %84, i64 %6
  %125 = getelementptr inbounds i8, i8* %85, i64 %7
  %126 = load i8, i8* %124, align 1
  %127 = zext i8 %126 to i32
  %128 = load i8, i8* %125, align 1
  %129 = zext i8 %128 to i32
  %130 = sub nsw i32 %127, %129
  %131 = add nsw i32 %130, %121
  %132 = mul nsw i32 %130, %130
  %133 = add nsw i32 %132, %123
  store i32 %133, i32* %4, align 4
  %134 = getelementptr inbounds i8, i8* %124, i64 1
  %135 = load i8, i8* %134, align 1
  %136 = zext i8 %135 to i32
  %137 = getelementptr inbounds i8, i8* %125, i64 1
  %138 = load i8, i8* %137, align 1
  %139 = zext i8 %138 to i32
  %140 = sub nsw i32 %136, %139
  %141 = add nsw i32 %140, %131
  %142 = mul nsw i32 %140, %140
  %143 = add nsw i32 %142, %133
  store i32 %143, i32* %4, align 4
  %144 = getelementptr inbounds i8, i8* %124, i64 2
  %145 = load i8, i8* %144, align 1
  %146 = zext i8 %145 to i32
  %147 = getelementptr inbounds i8, i8* %125, i64 2
  %148 = load i8, i8* %147, align 1
  %149 = zext i8 %148 to i32
  %150 = sub nsw i32 %146, %149
  %151 = add nsw i32 %150, %141
  %152 = mul nsw i32 %150, %150
  %153 = add nsw i32 %152, %143
  store i32 %153, i32* %4, align 4
  %154 = getelementptr inbounds i8, i8* %124, i64 3
  %155 = load i8, i8* %154, align 1
  %156 = zext i8 %155 to i32
  %157 = getelementptr inbounds i8, i8* %125, i64 3
  %158 = load i8, i8* %157, align 1
  %159 = zext i8 %158 to i32
  %160 = sub nsw i32 %156, %159
  %161 = add nsw i32 %160, %151
  %162 = mul nsw i32 %160, %160
  %163 = add nsw i32 %162, %153
  store i32 %163, i32* %4, align 4
  %164 = sext i32 %161 to i64
  %165 = mul nsw i64 %164, %164
  %166 = lshr i64 %165, 4
  %167 = trunc i64 %166 to i32
  %168 = sub i32 %163, %167
  ret i32 %168
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_sub_pixel_variance4x4_c(i8* nocapture readonly, i32, i32, i32, i8* nocapture readonly, i32, i32* nocapture) local_unnamed_addr #2 {
  %8 = alloca [20 x i16], align 16
  %9 = alloca <16 x i8>, align 16
  %10 = bitcast [20 x i16]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %10) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %10, i8 -86, i64 40, i1 false)
  %11 = getelementptr inbounds <16 x i8>, <16 x i8>* %9, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %11) #4
  %12 = sext i32 %2 to i64
  %13 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %12, i64 0
  %14 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %12, i64 1
  %15 = add i32 %1, -4
  %16 = zext i32 %15 to i64
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %11, i8 -86, i64 16, i1 false)
  %17 = load i8, i8* %13, align 2
  %18 = zext i8 %17 to i32
  %19 = load i8, i8* %14, align 1
  %20 = zext i8 %19 to i32
  %21 = getelementptr inbounds [20 x i16], [20 x i16]* %8, i64 0, i64 0
  %22 = load i8, i8* %0, align 1
  %23 = zext i8 %22 to i32
  %24 = mul nuw nsw i32 %18, %23
  %25 = getelementptr inbounds i8, i8* %0, i64 1
  %26 = load i8, i8* %25, align 1
  %27 = zext i8 %26 to i32
  %28 = mul nuw nsw i32 %20, %27
  %29 = add nuw nsw i32 %24, 64
  %30 = add nuw nsw i32 %29, %28
  %31 = lshr i32 %30, 7
  %32 = trunc i32 %31 to i16
  store i16 %32, i16* %21, align 16
  %33 = mul nuw nsw i32 %18, %27
  %34 = getelementptr inbounds i8, i8* %0, i64 2
  %35 = load i8, i8* %34, align 1
  %36 = zext i8 %35 to i32
  %37 = mul nuw nsw i32 %20, %36
  %38 = add nuw nsw i32 %33, 64
  %39 = add nuw nsw i32 %38, %37
  %40 = lshr i32 %39, 7
  %41 = trunc i32 %40 to i16
  %42 = getelementptr inbounds [20 x i16], [20 x i16]* %8, i64 0, i64 1
  store i16 %41, i16* %42, align 2
  %43 = mul nuw nsw i32 %18, %36
  %44 = getelementptr inbounds i8, i8* %0, i64 3
  %45 = load i8, i8* %44, align 1
  %46 = zext i8 %45 to i32
  %47 = mul nuw nsw i32 %20, %46
  %48 = add nuw nsw i32 %43, 64
  %49 = add nuw nsw i32 %48, %47
  %50 = lshr i32 %49, 7
  %51 = trunc i32 %50 to i16
  %52 = getelementptr inbounds [20 x i16], [20 x i16]* %8, i64 0, i64 2
  store i16 %51, i16* %52, align 4
  %53 = mul nuw nsw i32 %18, %46
  %54 = getelementptr inbounds i8, i8* %0, i64 4
  %55 = load i8, i8* %54, align 1
  %56 = zext i8 %55 to i32
  %57 = mul nuw nsw i32 %20, %56
  %58 = add nuw nsw i32 %53, 64
  %59 = add nuw nsw i32 %58, %57
  %60 = lshr i32 %59, 7
  %61 = trunc i32 %60 to i16
  %62 = getelementptr inbounds [20 x i16], [20 x i16]* %8, i64 0, i64 3
  store i16 %61, i16* %62, align 2
  %63 = getelementptr inbounds i8, i8* %54, i64 %16
  %64 = getelementptr inbounds [20 x i16], [20 x i16]* %8, i64 0, i64 4
  %65 = load i8, i8* %63, align 1
  %66 = zext i8 %65 to i32
  %67 = mul nuw nsw i32 %18, %66
  %68 = getelementptr inbounds i8, i8* %63, i64 1
  %69 = load i8, i8* %68, align 1
  %70 = zext i8 %69 to i32
  %71 = mul nuw nsw i32 %20, %70
  %72 = add nuw nsw i32 %67, 64
  %73 = add nuw nsw i32 %72, %71
  %74 = lshr i32 %73, 7
  %75 = trunc i32 %74 to i16
  store i16 %75, i16* %64, align 8
  %76 = mul nuw nsw i32 %18, %70
  %77 = getelementptr inbounds i8, i8* %63, i64 2
  %78 = load i8, i8* %77, align 1
  %79 = zext i8 %78 to i32
  %80 = mul nuw nsw i32 %20, %79
  %81 = add nuw nsw i32 %76, 64
  %82 = add nuw nsw i32 %81, %80
  %83 = lshr i32 %82, 7
  %84 = trunc i32 %83 to i16
  %85 = getelementptr inbounds [20 x i16], [20 x i16]* %8, i64 0, i64 5
  store i16 %84, i16* %85, align 2
  %86 = mul nuw nsw i32 %18, %79
  %87 = getelementptr inbounds i8, i8* %63, i64 3
  %88 = load i8, i8* %87, align 1
  %89 = zext i8 %88 to i32
  %90 = mul nuw nsw i32 %20, %89
  %91 = add nuw nsw i32 %86, 64
  %92 = add nuw nsw i32 %91, %90
  %93 = lshr i32 %92, 7
  %94 = trunc i32 %93 to i16
  %95 = getelementptr inbounds [20 x i16], [20 x i16]* %8, i64 0, i64 6
  store i16 %94, i16* %95, align 4
  %96 = mul nuw nsw i32 %18, %89
  %97 = getelementptr inbounds i8, i8* %63, i64 4
  %98 = load i8, i8* %97, align 1
  %99 = zext i8 %98 to i32
  %100 = mul nuw nsw i32 %20, %99
  %101 = add nuw nsw i32 %96, 64
  %102 = add nuw nsw i32 %101, %100
  %103 = lshr i32 %102, 7
  %104 = trunc i32 %103 to i16
  %105 = getelementptr inbounds [20 x i16], [20 x i16]* %8, i64 0, i64 7
  store i16 %104, i16* %105, align 2
  %106 = getelementptr inbounds i8, i8* %97, i64 %16
  %107 = getelementptr inbounds [20 x i16], [20 x i16]* %8, i64 0, i64 8
  %108 = load i8, i8* %106, align 1
  %109 = zext i8 %108 to i32
  %110 = mul nuw nsw i32 %18, %109
  %111 = getelementptr inbounds i8, i8* %106, i64 1
  %112 = load i8, i8* %111, align 1
  %113 = zext i8 %112 to i32
  %114 = mul nuw nsw i32 %20, %113
  %115 = add nuw nsw i32 %110, 64
  %116 = add nuw nsw i32 %115, %114
  %117 = lshr i32 %116, 7
  %118 = trunc i32 %117 to i16
  store i16 %118, i16* %107, align 16
  %119 = mul nuw nsw i32 %18, %113
  %120 = getelementptr inbounds i8, i8* %106, i64 2
  %121 = load i8, i8* %120, align 1
  %122 = zext i8 %121 to i32
  %123 = mul nuw nsw i32 %20, %122
  %124 = add nuw nsw i32 %119, 64
  %125 = add nuw nsw i32 %124, %123
  %126 = lshr i32 %125, 7
  %127 = trunc i32 %126 to i16
  %128 = getelementptr inbounds [20 x i16], [20 x i16]* %8, i64 0, i64 9
  store i16 %127, i16* %128, align 2
  %129 = mul nuw nsw i32 %18, %122
  %130 = getelementptr inbounds i8, i8* %106, i64 3
  %131 = load i8, i8* %130, align 1
  %132 = zext i8 %131 to i32
  %133 = mul nuw nsw i32 %20, %132
  %134 = add nuw nsw i32 %129, 64
  %135 = add nuw nsw i32 %134, %133
  %136 = lshr i32 %135, 7
  %137 = trunc i32 %136 to i16
  %138 = getelementptr inbounds [20 x i16], [20 x i16]* %8, i64 0, i64 10
  store i16 %137, i16* %138, align 4
  %139 = mul nuw nsw i32 %18, %132
  %140 = getelementptr inbounds i8, i8* %106, i64 4
  %141 = load i8, i8* %140, align 1
  %142 = zext i8 %141 to i32
  %143 = mul nuw nsw i32 %20, %142
  %144 = add nuw nsw i32 %139, 64
  %145 = add nuw nsw i32 %144, %143
  %146 = lshr i32 %145, 7
  %147 = trunc i32 %146 to i16
  %148 = getelementptr inbounds [20 x i16], [20 x i16]* %8, i64 0, i64 11
  store i16 %147, i16* %148, align 2
  %149 = getelementptr inbounds i8, i8* %140, i64 %16
  %150 = getelementptr inbounds [20 x i16], [20 x i16]* %8, i64 0, i64 12
  %151 = load i8, i8* %149, align 1
  %152 = zext i8 %151 to i32
  %153 = mul nuw nsw i32 %18, %152
  %154 = getelementptr inbounds i8, i8* %149, i64 1
  %155 = load i8, i8* %154, align 1
  %156 = zext i8 %155 to i32
  %157 = mul nuw nsw i32 %20, %156
  %158 = add nuw nsw i32 %153, 64
  %159 = add nuw nsw i32 %158, %157
  %160 = lshr i32 %159, 7
  %161 = trunc i32 %160 to i16
  store i16 %161, i16* %150, align 8
  %162 = mul nuw nsw i32 %18, %156
  %163 = getelementptr inbounds i8, i8* %149, i64 2
  %164 = load i8, i8* %163, align 1
  %165 = zext i8 %164 to i32
  %166 = mul nuw nsw i32 %20, %165
  %167 = add nuw nsw i32 %162, 64
  %168 = add nuw nsw i32 %167, %166
  %169 = lshr i32 %168, 7
  %170 = trunc i32 %169 to i16
  %171 = getelementptr inbounds [20 x i16], [20 x i16]* %8, i64 0, i64 13
  store i16 %170, i16* %171, align 2
  %172 = mul nuw nsw i32 %18, %165
  %173 = getelementptr inbounds i8, i8* %149, i64 3
  %174 = load i8, i8* %173, align 1
  %175 = zext i8 %174 to i32
  %176 = mul nuw nsw i32 %20, %175
  %177 = add nuw nsw i32 %172, 64
  %178 = add nuw nsw i32 %177, %176
  %179 = lshr i32 %178, 7
  %180 = trunc i32 %179 to i16
  %181 = getelementptr inbounds [20 x i16], [20 x i16]* %8, i64 0, i64 14
  store i16 %180, i16* %181, align 4
  %182 = mul nuw nsw i32 %18, %175
  %183 = getelementptr inbounds i8, i8* %149, i64 4
  %184 = load i8, i8* %183, align 1
  %185 = zext i8 %184 to i32
  %186 = mul nuw nsw i32 %20, %185
  %187 = add nuw nsw i32 %182, 64
  %188 = add nuw nsw i32 %187, %186
  %189 = lshr i32 %188, 7
  %190 = trunc i32 %189 to i16
  %191 = getelementptr inbounds [20 x i16], [20 x i16]* %8, i64 0, i64 15
  store i16 %190, i16* %191, align 2
  %192 = getelementptr inbounds i8, i8* %183, i64 %16
  %193 = getelementptr inbounds [20 x i16], [20 x i16]* %8, i64 0, i64 16
  %194 = load i8, i8* %192, align 1
  %195 = zext i8 %194 to i32
  %196 = mul nuw nsw i32 %18, %195
  %197 = getelementptr inbounds i8, i8* %192, i64 1
  %198 = load i8, i8* %197, align 1
  %199 = zext i8 %198 to i32
  %200 = mul nuw nsw i32 %20, %199
  %201 = add nuw nsw i32 %196, 64
  %202 = add nuw nsw i32 %201, %200
  %203 = lshr i32 %202, 7
  %204 = trunc i32 %203 to i16
  store i16 %204, i16* %193, align 16
  %205 = mul nuw nsw i32 %18, %199
  %206 = getelementptr inbounds i8, i8* %192, i64 2
  %207 = load i8, i8* %206, align 1
  %208 = zext i8 %207 to i32
  %209 = mul nuw nsw i32 %20, %208
  %210 = add nuw nsw i32 %205, 64
  %211 = add nuw nsw i32 %210, %209
  %212 = lshr i32 %211, 7
  %213 = trunc i32 %212 to i16
  %214 = getelementptr inbounds [20 x i16], [20 x i16]* %8, i64 0, i64 17
  store i16 %213, i16* %214, align 2
  %215 = mul nuw nsw i32 %18, %208
  %216 = getelementptr inbounds i8, i8* %192, i64 3
  %217 = load i8, i8* %216, align 1
  %218 = zext i8 %217 to i32
  %219 = mul nuw nsw i32 %20, %218
  %220 = add nuw nsw i32 %215, 64
  %221 = add nuw nsw i32 %220, %219
  %222 = lshr i32 %221, 7
  %223 = trunc i32 %222 to i16
  %224 = getelementptr inbounds [20 x i16], [20 x i16]* %8, i64 0, i64 18
  store i16 %223, i16* %224, align 4
  %225 = mul nuw nsw i32 %18, %218
  %226 = getelementptr inbounds i8, i8* %192, i64 4
  %227 = load i8, i8* %226, align 1
  %228 = zext i8 %227 to i32
  %229 = mul nuw nsw i32 %20, %228
  %230 = add nuw nsw i32 %225, 64
  %231 = add nuw nsw i32 %230, %229
  %232 = lshr i32 %231, 7
  %233 = trunc i32 %232 to i16
  %234 = getelementptr inbounds [20 x i16], [20 x i16]* %8, i64 0, i64 19
  store i16 %233, i16* %234, align 2
  %235 = sext i32 %3 to i64
  %236 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %235, i64 0
  %237 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %235, i64 1
  %238 = load i8, i8* %236, align 2
  %239 = zext i8 %238 to i32
  %240 = load i8, i8* %237, align 1
  %241 = zext i8 %240 to i32
  %242 = getelementptr inbounds [20 x i16], [20 x i16]* %8, i64 0, i64 5
  %243 = load i16, i16* %242, align 2
  %244 = zext i16 %243 to i32
  %245 = getelementptr inbounds [20 x i16], [20 x i16]* %8, i64 0, i64 6
  %246 = load i16, i16* %245, align 4
  %247 = zext i16 %246 to i32
  %248 = getelementptr inbounds [20 x i16], [20 x i16]* %8, i64 0, i64 7
  %249 = load i16, i16* %248, align 2
  %250 = zext i16 %249 to i32
  %251 = getelementptr inbounds [20 x i16], [20 x i16]* %8, i64 0, i64 8
  %252 = load i16, i16* %251, align 16
  %253 = zext i16 %252 to i32
  %254 = getelementptr inbounds [20 x i16], [20 x i16]* %8, i64 0, i64 9
  %255 = load i16, i16* %254, align 2
  %256 = zext i16 %255 to i32
  %257 = getelementptr inbounds [20 x i16], [20 x i16]* %8, i64 0, i64 10
  %258 = load i16, i16* %257, align 4
  %259 = zext i16 %258 to i32
  %260 = getelementptr inbounds [20 x i16], [20 x i16]* %8, i64 0, i64 11
  %261 = load i16, i16* %260, align 2
  %262 = zext i16 %261 to i32
  %263 = getelementptr inbounds [20 x i16], [20 x i16]* %8, i64 0, i64 12
  %264 = load i16, i16* %263, align 8
  %265 = zext i16 %264 to i32
  %266 = getelementptr inbounds [20 x i16], [20 x i16]* %8, i64 0, i64 13
  %267 = load i16, i16* %266, align 2
  %268 = zext i16 %267 to i32
  %269 = getelementptr inbounds [20 x i16], [20 x i16]* %8, i64 0, i64 14
  %270 = load i16, i16* %269, align 4
  %271 = zext i16 %270 to i32
  %272 = getelementptr inbounds [20 x i16], [20 x i16]* %8, i64 0, i64 15
  %273 = load i16, i16* %272, align 2
  %274 = zext i16 %273 to i32
  %275 = getelementptr inbounds [20 x i16], [20 x i16]* %8, i64 0, i64 16
  %276 = load i16, i16* %275, align 16
  %277 = zext i16 %276 to i32
  %278 = getelementptr inbounds [20 x i16], [20 x i16]* %8, i64 0, i64 17
  %279 = load i16, i16* %278, align 2
  %280 = zext i16 %279 to i32
  %281 = getelementptr inbounds [20 x i16], [20 x i16]* %8, i64 0, i64 18
  %282 = load i16, i16* %281, align 4
  %283 = zext i16 %282 to i32
  %284 = bitcast [20 x i16]* %8 to <16 x i16>*
  %285 = load <16 x i16>, <16 x i16>* %284, align 16
  %286 = zext <16 x i16> %285 to <16 x i32>
  %287 = insertelement <16 x i32> undef, i32 %239, i32 0
  %288 = shufflevector <16 x i32> %287, <16 x i32> undef, <16 x i32> zeroinitializer
  %289 = mul nuw nsw <16 x i32> %288, %286
  %290 = getelementptr inbounds [20 x i16], [20 x i16]* %8, i64 0, i64 19
  %291 = load i16, i16* %290, align 2
  %292 = zext i16 %291 to i32
  %293 = insertelement <16 x i32> undef, i32 %241, i32 0
  %294 = shufflevector <16 x i32> %293, <16 x i32> undef, <16 x i32> zeroinitializer
  %295 = extractelement <16 x i32> %286, i32 4
  %296 = insertelement <16 x i32> undef, i32 %295, i32 0
  %297 = insertelement <16 x i32> %296, i32 %244, i32 1
  %298 = insertelement <16 x i32> %297, i32 %247, i32 2
  %299 = insertelement <16 x i32> %298, i32 %250, i32 3
  %300 = insertelement <16 x i32> %299, i32 %253, i32 4
  %301 = insertelement <16 x i32> %300, i32 %256, i32 5
  %302 = insertelement <16 x i32> %301, i32 %259, i32 6
  %303 = insertelement <16 x i32> %302, i32 %262, i32 7
  %304 = insertelement <16 x i32> %303, i32 %265, i32 8
  %305 = insertelement <16 x i32> %304, i32 %268, i32 9
  %306 = insertelement <16 x i32> %305, i32 %271, i32 10
  %307 = insertelement <16 x i32> %306, i32 %274, i32 11
  %308 = insertelement <16 x i32> %307, i32 %277, i32 12
  %309 = insertelement <16 x i32> %308, i32 %280, i32 13
  %310 = insertelement <16 x i32> %309, i32 %283, i32 14
  %311 = insertelement <16 x i32> %310, i32 %292, i32 15
  %312 = mul nuw nsw <16 x i32> %294, %311
  %313 = add nuw nsw <16 x i32> %289, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %314 = add nuw nsw <16 x i32> %313, %312
  %315 = lshr <16 x i32> %314, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %316 = trunc <16 x i32> %315 to <16 x i8>
  store <16 x i8> %316, <16 x i8>* %9, align 16
  %317 = call i32 @vpx_variance4x4_c(i8* nonnull %11, i32 4, i8* %4, i32 %5, i32* %6)
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %11) #4
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %10) #4
  ret i32 %317
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_sub_pixel_avg_variance4x4_c(i8* nocapture readonly, i32, i32, i32, i8* nocapture readonly, i32, i32* nocapture, i8* nocapture readonly) local_unnamed_addr #2 {
  %9 = alloca [20 x i16], align 16
  %10 = alloca <16 x i8>, align 16
  %11 = bitcast [20 x i16]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %11) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %11, i8 -86, i64 40, i1 false)
  %12 = getelementptr inbounds <16 x i8>, <16 x i8>* %10, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %12) #4
  %13 = sext i32 %2 to i64
  %14 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %13, i64 0
  %15 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %13, i64 1
  %16 = add i32 %1, -4
  %17 = zext i32 %16 to i64
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %12, i8 -86, i64 16, i1 false)
  %18 = load i8, i8* %14, align 2
  %19 = zext i8 %18 to i32
  %20 = load i8, i8* %15, align 1
  %21 = zext i8 %20 to i32
  %22 = getelementptr inbounds [20 x i16], [20 x i16]* %9, i64 0, i64 0
  %23 = load i8, i8* %0, align 1
  %24 = zext i8 %23 to i32
  %25 = mul nuw nsw i32 %19, %24
  %26 = getelementptr inbounds i8, i8* %0, i64 1
  %27 = load i8, i8* %26, align 1
  %28 = zext i8 %27 to i32
  %29 = mul nuw nsw i32 %21, %28
  %30 = add nuw nsw i32 %25, 64
  %31 = add nuw nsw i32 %30, %29
  %32 = lshr i32 %31, 7
  %33 = trunc i32 %32 to i16
  store i16 %33, i16* %22, align 16
  %34 = mul nuw nsw i32 %19, %28
  %35 = getelementptr inbounds i8, i8* %0, i64 2
  %36 = load i8, i8* %35, align 1
  %37 = zext i8 %36 to i32
  %38 = mul nuw nsw i32 %21, %37
  %39 = add nuw nsw i32 %34, 64
  %40 = add nuw nsw i32 %39, %38
  %41 = lshr i32 %40, 7
  %42 = trunc i32 %41 to i16
  %43 = getelementptr inbounds [20 x i16], [20 x i16]* %9, i64 0, i64 1
  store i16 %42, i16* %43, align 2
  %44 = mul nuw nsw i32 %19, %37
  %45 = getelementptr inbounds i8, i8* %0, i64 3
  %46 = load i8, i8* %45, align 1
  %47 = zext i8 %46 to i32
  %48 = mul nuw nsw i32 %21, %47
  %49 = add nuw nsw i32 %44, 64
  %50 = add nuw nsw i32 %49, %48
  %51 = lshr i32 %50, 7
  %52 = trunc i32 %51 to i16
  %53 = getelementptr inbounds [20 x i16], [20 x i16]* %9, i64 0, i64 2
  store i16 %52, i16* %53, align 4
  %54 = mul nuw nsw i32 %19, %47
  %55 = getelementptr inbounds i8, i8* %0, i64 4
  %56 = load i8, i8* %55, align 1
  %57 = zext i8 %56 to i32
  %58 = mul nuw nsw i32 %21, %57
  %59 = add nuw nsw i32 %54, 64
  %60 = add nuw nsw i32 %59, %58
  %61 = lshr i32 %60, 7
  %62 = trunc i32 %61 to i16
  %63 = getelementptr inbounds [20 x i16], [20 x i16]* %9, i64 0, i64 3
  store i16 %62, i16* %63, align 2
  %64 = getelementptr inbounds i8, i8* %55, i64 %17
  %65 = getelementptr inbounds [20 x i16], [20 x i16]* %9, i64 0, i64 4
  %66 = load i8, i8* %64, align 1
  %67 = zext i8 %66 to i32
  %68 = mul nuw nsw i32 %19, %67
  %69 = getelementptr inbounds i8, i8* %64, i64 1
  %70 = load i8, i8* %69, align 1
  %71 = zext i8 %70 to i32
  %72 = mul nuw nsw i32 %21, %71
  %73 = add nuw nsw i32 %68, 64
  %74 = add nuw nsw i32 %73, %72
  %75 = lshr i32 %74, 7
  %76 = trunc i32 %75 to i16
  store i16 %76, i16* %65, align 8
  %77 = mul nuw nsw i32 %19, %71
  %78 = getelementptr inbounds i8, i8* %64, i64 2
  %79 = load i8, i8* %78, align 1
  %80 = zext i8 %79 to i32
  %81 = mul nuw nsw i32 %21, %80
  %82 = add nuw nsw i32 %77, 64
  %83 = add nuw nsw i32 %82, %81
  %84 = lshr i32 %83, 7
  %85 = trunc i32 %84 to i16
  %86 = getelementptr inbounds [20 x i16], [20 x i16]* %9, i64 0, i64 5
  store i16 %85, i16* %86, align 2
  %87 = mul nuw nsw i32 %19, %80
  %88 = getelementptr inbounds i8, i8* %64, i64 3
  %89 = load i8, i8* %88, align 1
  %90 = zext i8 %89 to i32
  %91 = mul nuw nsw i32 %21, %90
  %92 = add nuw nsw i32 %87, 64
  %93 = add nuw nsw i32 %92, %91
  %94 = lshr i32 %93, 7
  %95 = trunc i32 %94 to i16
  %96 = getelementptr inbounds [20 x i16], [20 x i16]* %9, i64 0, i64 6
  store i16 %95, i16* %96, align 4
  %97 = mul nuw nsw i32 %19, %90
  %98 = getelementptr inbounds i8, i8* %64, i64 4
  %99 = load i8, i8* %98, align 1
  %100 = zext i8 %99 to i32
  %101 = mul nuw nsw i32 %21, %100
  %102 = add nuw nsw i32 %97, 64
  %103 = add nuw nsw i32 %102, %101
  %104 = lshr i32 %103, 7
  %105 = trunc i32 %104 to i16
  %106 = getelementptr inbounds [20 x i16], [20 x i16]* %9, i64 0, i64 7
  store i16 %105, i16* %106, align 2
  %107 = getelementptr inbounds i8, i8* %98, i64 %17
  %108 = getelementptr inbounds [20 x i16], [20 x i16]* %9, i64 0, i64 8
  %109 = load i8, i8* %107, align 1
  %110 = zext i8 %109 to i32
  %111 = mul nuw nsw i32 %19, %110
  %112 = getelementptr inbounds i8, i8* %107, i64 1
  %113 = load i8, i8* %112, align 1
  %114 = zext i8 %113 to i32
  %115 = mul nuw nsw i32 %21, %114
  %116 = add nuw nsw i32 %111, 64
  %117 = add nuw nsw i32 %116, %115
  %118 = lshr i32 %117, 7
  %119 = trunc i32 %118 to i16
  store i16 %119, i16* %108, align 16
  %120 = mul nuw nsw i32 %19, %114
  %121 = getelementptr inbounds i8, i8* %107, i64 2
  %122 = load i8, i8* %121, align 1
  %123 = zext i8 %122 to i32
  %124 = mul nuw nsw i32 %21, %123
  %125 = add nuw nsw i32 %120, 64
  %126 = add nuw nsw i32 %125, %124
  %127 = lshr i32 %126, 7
  %128 = trunc i32 %127 to i16
  %129 = getelementptr inbounds [20 x i16], [20 x i16]* %9, i64 0, i64 9
  store i16 %128, i16* %129, align 2
  %130 = mul nuw nsw i32 %19, %123
  %131 = getelementptr inbounds i8, i8* %107, i64 3
  %132 = load i8, i8* %131, align 1
  %133 = zext i8 %132 to i32
  %134 = mul nuw nsw i32 %21, %133
  %135 = add nuw nsw i32 %130, 64
  %136 = add nuw nsw i32 %135, %134
  %137 = lshr i32 %136, 7
  %138 = trunc i32 %137 to i16
  %139 = getelementptr inbounds [20 x i16], [20 x i16]* %9, i64 0, i64 10
  store i16 %138, i16* %139, align 4
  %140 = mul nuw nsw i32 %19, %133
  %141 = getelementptr inbounds i8, i8* %107, i64 4
  %142 = load i8, i8* %141, align 1
  %143 = zext i8 %142 to i32
  %144 = mul nuw nsw i32 %21, %143
  %145 = add nuw nsw i32 %140, 64
  %146 = add nuw nsw i32 %145, %144
  %147 = lshr i32 %146, 7
  %148 = trunc i32 %147 to i16
  %149 = getelementptr inbounds [20 x i16], [20 x i16]* %9, i64 0, i64 11
  store i16 %148, i16* %149, align 2
  %150 = getelementptr inbounds i8, i8* %141, i64 %17
  %151 = getelementptr inbounds [20 x i16], [20 x i16]* %9, i64 0, i64 12
  %152 = load i8, i8* %150, align 1
  %153 = zext i8 %152 to i32
  %154 = mul nuw nsw i32 %19, %153
  %155 = getelementptr inbounds i8, i8* %150, i64 1
  %156 = load i8, i8* %155, align 1
  %157 = zext i8 %156 to i32
  %158 = mul nuw nsw i32 %21, %157
  %159 = add nuw nsw i32 %154, 64
  %160 = add nuw nsw i32 %159, %158
  %161 = lshr i32 %160, 7
  %162 = trunc i32 %161 to i16
  store i16 %162, i16* %151, align 8
  %163 = mul nuw nsw i32 %19, %157
  %164 = getelementptr inbounds i8, i8* %150, i64 2
  %165 = load i8, i8* %164, align 1
  %166 = zext i8 %165 to i32
  %167 = mul nuw nsw i32 %21, %166
  %168 = add nuw nsw i32 %163, 64
  %169 = add nuw nsw i32 %168, %167
  %170 = lshr i32 %169, 7
  %171 = trunc i32 %170 to i16
  %172 = getelementptr inbounds [20 x i16], [20 x i16]* %9, i64 0, i64 13
  store i16 %171, i16* %172, align 2
  %173 = mul nuw nsw i32 %19, %166
  %174 = getelementptr inbounds i8, i8* %150, i64 3
  %175 = load i8, i8* %174, align 1
  %176 = zext i8 %175 to i32
  %177 = mul nuw nsw i32 %21, %176
  %178 = add nuw nsw i32 %173, 64
  %179 = add nuw nsw i32 %178, %177
  %180 = lshr i32 %179, 7
  %181 = trunc i32 %180 to i16
  %182 = getelementptr inbounds [20 x i16], [20 x i16]* %9, i64 0, i64 14
  store i16 %181, i16* %182, align 4
  %183 = mul nuw nsw i32 %19, %176
  %184 = getelementptr inbounds i8, i8* %150, i64 4
  %185 = load i8, i8* %184, align 1
  %186 = zext i8 %185 to i32
  %187 = mul nuw nsw i32 %21, %186
  %188 = add nuw nsw i32 %183, 64
  %189 = add nuw nsw i32 %188, %187
  %190 = lshr i32 %189, 7
  %191 = trunc i32 %190 to i16
  %192 = getelementptr inbounds [20 x i16], [20 x i16]* %9, i64 0, i64 15
  store i16 %191, i16* %192, align 2
  %193 = getelementptr inbounds i8, i8* %184, i64 %17
  %194 = getelementptr inbounds [20 x i16], [20 x i16]* %9, i64 0, i64 16
  %195 = load i8, i8* %193, align 1
  %196 = zext i8 %195 to i32
  %197 = mul nuw nsw i32 %19, %196
  %198 = getelementptr inbounds i8, i8* %193, i64 1
  %199 = load i8, i8* %198, align 1
  %200 = zext i8 %199 to i32
  %201 = mul nuw nsw i32 %21, %200
  %202 = add nuw nsw i32 %197, 64
  %203 = add nuw nsw i32 %202, %201
  %204 = lshr i32 %203, 7
  %205 = trunc i32 %204 to i16
  store i16 %205, i16* %194, align 16
  %206 = mul nuw nsw i32 %19, %200
  %207 = getelementptr inbounds i8, i8* %193, i64 2
  %208 = load i8, i8* %207, align 1
  %209 = zext i8 %208 to i32
  %210 = mul nuw nsw i32 %21, %209
  %211 = add nuw nsw i32 %206, 64
  %212 = add nuw nsw i32 %211, %210
  %213 = lshr i32 %212, 7
  %214 = trunc i32 %213 to i16
  %215 = getelementptr inbounds [20 x i16], [20 x i16]* %9, i64 0, i64 17
  store i16 %214, i16* %215, align 2
  %216 = mul nuw nsw i32 %19, %209
  %217 = getelementptr inbounds i8, i8* %193, i64 3
  %218 = load i8, i8* %217, align 1
  %219 = zext i8 %218 to i32
  %220 = mul nuw nsw i32 %21, %219
  %221 = add nuw nsw i32 %216, 64
  %222 = add nuw nsw i32 %221, %220
  %223 = lshr i32 %222, 7
  %224 = trunc i32 %223 to i16
  %225 = getelementptr inbounds [20 x i16], [20 x i16]* %9, i64 0, i64 18
  store i16 %224, i16* %225, align 4
  %226 = mul nuw nsw i32 %19, %219
  %227 = getelementptr inbounds i8, i8* %193, i64 4
  %228 = load i8, i8* %227, align 1
  %229 = zext i8 %228 to i32
  %230 = mul nuw nsw i32 %21, %229
  %231 = add nuw nsw i32 %226, 64
  %232 = add nuw nsw i32 %231, %230
  %233 = lshr i32 %232, 7
  %234 = trunc i32 %233 to i16
  %235 = getelementptr inbounds [20 x i16], [20 x i16]* %9, i64 0, i64 19
  store i16 %234, i16* %235, align 2
  %236 = sext i32 %3 to i64
  %237 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %236, i64 0
  %238 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %236, i64 1
  %239 = load i8, i8* %237, align 2
  %240 = zext i8 %239 to i32
  %241 = load i8, i8* %238, align 1
  %242 = zext i8 %241 to i32
  %243 = getelementptr inbounds [20 x i16], [20 x i16]* %9, i64 0, i64 5
  %244 = load i16, i16* %243, align 2
  %245 = zext i16 %244 to i32
  %246 = getelementptr inbounds [20 x i16], [20 x i16]* %9, i64 0, i64 6
  %247 = load i16, i16* %246, align 4
  %248 = zext i16 %247 to i32
  %249 = getelementptr inbounds [20 x i16], [20 x i16]* %9, i64 0, i64 7
  %250 = load i16, i16* %249, align 2
  %251 = zext i16 %250 to i32
  %252 = getelementptr inbounds [20 x i16], [20 x i16]* %9, i64 0, i64 8
  %253 = load i16, i16* %252, align 16
  %254 = zext i16 %253 to i32
  %255 = getelementptr inbounds [20 x i16], [20 x i16]* %9, i64 0, i64 9
  %256 = load i16, i16* %255, align 2
  %257 = zext i16 %256 to i32
  %258 = getelementptr inbounds [20 x i16], [20 x i16]* %9, i64 0, i64 10
  %259 = load i16, i16* %258, align 4
  %260 = zext i16 %259 to i32
  %261 = getelementptr inbounds [20 x i16], [20 x i16]* %9, i64 0, i64 11
  %262 = load i16, i16* %261, align 2
  %263 = zext i16 %262 to i32
  %264 = getelementptr inbounds [20 x i16], [20 x i16]* %9, i64 0, i64 12
  %265 = load i16, i16* %264, align 8
  %266 = zext i16 %265 to i32
  %267 = getelementptr inbounds [20 x i16], [20 x i16]* %9, i64 0, i64 13
  %268 = load i16, i16* %267, align 2
  %269 = zext i16 %268 to i32
  %270 = getelementptr inbounds [20 x i16], [20 x i16]* %9, i64 0, i64 14
  %271 = load i16, i16* %270, align 4
  %272 = zext i16 %271 to i32
  %273 = getelementptr inbounds [20 x i16], [20 x i16]* %9, i64 0, i64 15
  %274 = load i16, i16* %273, align 2
  %275 = zext i16 %274 to i32
  %276 = getelementptr inbounds [20 x i16], [20 x i16]* %9, i64 0, i64 16
  %277 = load i16, i16* %276, align 16
  %278 = zext i16 %277 to i32
  %279 = getelementptr inbounds [20 x i16], [20 x i16]* %9, i64 0, i64 17
  %280 = load i16, i16* %279, align 2
  %281 = zext i16 %280 to i32
  %282 = getelementptr inbounds [20 x i16], [20 x i16]* %9, i64 0, i64 18
  %283 = load i16, i16* %282, align 4
  %284 = zext i16 %283 to i32
  %285 = bitcast [20 x i16]* %9 to <16 x i16>*
  %286 = load <16 x i16>, <16 x i16>* %285, align 16
  %287 = zext <16 x i16> %286 to <16 x i32>
  %288 = insertelement <16 x i32> undef, i32 %240, i32 0
  %289 = shufflevector <16 x i32> %288, <16 x i32> undef, <16 x i32> zeroinitializer
  %290 = mul nuw nsw <16 x i32> %289, %287
  %291 = getelementptr inbounds [20 x i16], [20 x i16]* %9, i64 0, i64 19
  %292 = load i16, i16* %291, align 2
  %293 = zext i16 %292 to i32
  %294 = insertelement <16 x i32> undef, i32 %242, i32 0
  %295 = shufflevector <16 x i32> %294, <16 x i32> undef, <16 x i32> zeroinitializer
  %296 = extractelement <16 x i32> %287, i32 4
  %297 = insertelement <16 x i32> undef, i32 %296, i32 0
  %298 = insertelement <16 x i32> %297, i32 %245, i32 1
  %299 = insertelement <16 x i32> %298, i32 %248, i32 2
  %300 = insertelement <16 x i32> %299, i32 %251, i32 3
  %301 = insertelement <16 x i32> %300, i32 %254, i32 4
  %302 = insertelement <16 x i32> %301, i32 %257, i32 5
  %303 = insertelement <16 x i32> %302, i32 %260, i32 6
  %304 = insertelement <16 x i32> %303, i32 %263, i32 7
  %305 = insertelement <16 x i32> %304, i32 %266, i32 8
  %306 = insertelement <16 x i32> %305, i32 %269, i32 9
  %307 = insertelement <16 x i32> %306, i32 %272, i32 10
  %308 = insertelement <16 x i32> %307, i32 %275, i32 11
  %309 = insertelement <16 x i32> %308, i32 %278, i32 12
  %310 = insertelement <16 x i32> %309, i32 %281, i32 13
  %311 = insertelement <16 x i32> %310, i32 %284, i32 14
  %312 = insertelement <16 x i32> %311, i32 %293, i32 15
  %313 = mul nuw nsw <16 x i32> %295, %312
  %314 = add nuw nsw <16 x i32> %290, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %315 = add nuw nsw <16 x i32> %314, %313
  %316 = lshr <16 x i32> %315, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %317 = bitcast i8* %7 to <16 x i8>*
  %318 = load <16 x i8>, <16 x i8>* %317, align 1
  %319 = zext <16 x i8> %318 to <16 x i32>
  %320 = and <16 x i32> %316, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %321 = add nuw nsw <16 x i32> %319, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %322 = add nuw nsw <16 x i32> %321, %320
  %323 = lshr <16 x i32> %322, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %324 = trunc <16 x i32> %323 to <16 x i8>
  store <16 x i8> %324, <16 x i8>* %10, align 16
  %325 = call i32 @vpx_variance4x4_c(i8* nonnull %12, i32 4, i8* %4, i32 %5, i32* %6)
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %12) #4
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %11) #4
  ret i32 %325
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @vpx_get16x16var_c(i8* nocapture readonly, i32, i8* nocapture readonly, i32, i32* nocapture, i32* nocapture) local_unnamed_addr #3 {
  store i32 0, i32* %5, align 4
  store i32 0, i32* %4, align 4
  %7 = sext i32 %1 to i64
  %8 = sext i32 %3 to i64
  br label %9

9:                                                ; preds = %42, %6
  %10 = phi i8* [ %0, %6 ], [ %43, %42 ]
  %11 = phi i32 [ 0, %6 ], [ %45, %42 ]
  %12 = phi i8* [ %2, %6 ], [ %44, %42 ]
  br label %13

13:                                               ; preds = %13, %9
  %14 = phi i64 [ 0, %9 ], [ %40, %13 ]
  %15 = getelementptr inbounds i8, i8* %10, i64 %14
  %16 = load i8, i8* %15, align 1
  %17 = zext i8 %16 to i32
  %18 = getelementptr inbounds i8, i8* %12, i64 %14
  %19 = load i8, i8* %18, align 1
  %20 = zext i8 %19 to i32
  %21 = sub nsw i32 %17, %20
  %22 = load i32, i32* %5, align 4
  %23 = add nsw i32 %21, %22
  store i32 %23, i32* %5, align 4
  %24 = mul nsw i32 %21, %21
  %25 = load i32, i32* %4, align 4
  %26 = add i32 %25, %24
  store i32 %26, i32* %4, align 4
  %27 = or i64 %14, 1
  %28 = getelementptr inbounds i8, i8* %10, i64 %27
  %29 = load i8, i8* %28, align 1
  %30 = zext i8 %29 to i32
  %31 = getelementptr inbounds i8, i8* %12, i64 %27
  %32 = load i8, i8* %31, align 1
  %33 = zext i8 %32 to i32
  %34 = sub nsw i32 %30, %33
  %35 = load i32, i32* %5, align 4
  %36 = add nsw i32 %34, %35
  store i32 %36, i32* %5, align 4
  %37 = mul nsw i32 %34, %34
  %38 = load i32, i32* %4, align 4
  %39 = add i32 %38, %37
  store i32 %39, i32* %4, align 4
  %40 = add nuw nsw i64 %14, 2
  %41 = icmp eq i64 %40, 16
  br i1 %41, label %42, label %13

42:                                               ; preds = %13
  %43 = getelementptr inbounds i8, i8* %10, i64 %7
  %44 = getelementptr inbounds i8, i8* %12, i64 %8
  %45 = add nuw nsw i32 %11, 1
  %46 = icmp eq i32 %45, 16
  br i1 %46, label %47, label %9

47:                                               ; preds = %42
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @vpx_get8x8var_c(i8* nocapture readonly, i32, i8* nocapture readonly, i32, i32* nocapture, i32* nocapture) local_unnamed_addr #3 {
  store i32 0, i32* %5, align 4
  store i32 0, i32* %4, align 4
  %7 = sext i32 %1 to i64
  %8 = sext i32 %3 to i64
  br label %9

9:                                                ; preds = %9, %6
  %10 = phi i8* [ %0, %6 ], [ %107, %9 ]
  %11 = phi i32 [ 0, %6 ], [ %109, %9 ]
  %12 = phi i8* [ %2, %6 ], [ %108, %9 ]
  %13 = load i8, i8* %10, align 1
  %14 = zext i8 %13 to i32
  %15 = load i8, i8* %12, align 1
  %16 = zext i8 %15 to i32
  %17 = sub nsw i32 %14, %16
  %18 = load i32, i32* %5, align 4
  %19 = add nsw i32 %17, %18
  store i32 %19, i32* %5, align 4
  %20 = mul nsw i32 %17, %17
  %21 = load i32, i32* %4, align 4
  %22 = add i32 %21, %20
  store i32 %22, i32* %4, align 4
  %23 = getelementptr inbounds i8, i8* %10, i64 1
  %24 = load i8, i8* %23, align 1
  %25 = zext i8 %24 to i32
  %26 = getelementptr inbounds i8, i8* %12, i64 1
  %27 = load i8, i8* %26, align 1
  %28 = zext i8 %27 to i32
  %29 = sub nsw i32 %25, %28
  %30 = load i32, i32* %5, align 4
  %31 = add nsw i32 %29, %30
  store i32 %31, i32* %5, align 4
  %32 = mul nsw i32 %29, %29
  %33 = load i32, i32* %4, align 4
  %34 = add i32 %33, %32
  store i32 %34, i32* %4, align 4
  %35 = getelementptr inbounds i8, i8* %10, i64 2
  %36 = load i8, i8* %35, align 1
  %37 = zext i8 %36 to i32
  %38 = getelementptr inbounds i8, i8* %12, i64 2
  %39 = load i8, i8* %38, align 1
  %40 = zext i8 %39 to i32
  %41 = sub nsw i32 %37, %40
  %42 = load i32, i32* %5, align 4
  %43 = add nsw i32 %41, %42
  store i32 %43, i32* %5, align 4
  %44 = mul nsw i32 %41, %41
  %45 = load i32, i32* %4, align 4
  %46 = add i32 %45, %44
  store i32 %46, i32* %4, align 4
  %47 = getelementptr inbounds i8, i8* %10, i64 3
  %48 = load i8, i8* %47, align 1
  %49 = zext i8 %48 to i32
  %50 = getelementptr inbounds i8, i8* %12, i64 3
  %51 = load i8, i8* %50, align 1
  %52 = zext i8 %51 to i32
  %53 = sub nsw i32 %49, %52
  %54 = load i32, i32* %5, align 4
  %55 = add nsw i32 %53, %54
  store i32 %55, i32* %5, align 4
  %56 = mul nsw i32 %53, %53
  %57 = load i32, i32* %4, align 4
  %58 = add i32 %57, %56
  store i32 %58, i32* %4, align 4
  %59 = getelementptr inbounds i8, i8* %10, i64 4
  %60 = load i8, i8* %59, align 1
  %61 = zext i8 %60 to i32
  %62 = getelementptr inbounds i8, i8* %12, i64 4
  %63 = load i8, i8* %62, align 1
  %64 = zext i8 %63 to i32
  %65 = sub nsw i32 %61, %64
  %66 = load i32, i32* %5, align 4
  %67 = add nsw i32 %65, %66
  store i32 %67, i32* %5, align 4
  %68 = mul nsw i32 %65, %65
  %69 = load i32, i32* %4, align 4
  %70 = add i32 %69, %68
  store i32 %70, i32* %4, align 4
  %71 = getelementptr inbounds i8, i8* %10, i64 5
  %72 = load i8, i8* %71, align 1
  %73 = zext i8 %72 to i32
  %74 = getelementptr inbounds i8, i8* %12, i64 5
  %75 = load i8, i8* %74, align 1
  %76 = zext i8 %75 to i32
  %77 = sub nsw i32 %73, %76
  %78 = load i32, i32* %5, align 4
  %79 = add nsw i32 %77, %78
  store i32 %79, i32* %5, align 4
  %80 = mul nsw i32 %77, %77
  %81 = load i32, i32* %4, align 4
  %82 = add i32 %81, %80
  store i32 %82, i32* %4, align 4
  %83 = getelementptr inbounds i8, i8* %10, i64 6
  %84 = load i8, i8* %83, align 1
  %85 = zext i8 %84 to i32
  %86 = getelementptr inbounds i8, i8* %12, i64 6
  %87 = load i8, i8* %86, align 1
  %88 = zext i8 %87 to i32
  %89 = sub nsw i32 %85, %88
  %90 = load i32, i32* %5, align 4
  %91 = add nsw i32 %89, %90
  store i32 %91, i32* %5, align 4
  %92 = mul nsw i32 %89, %89
  %93 = load i32, i32* %4, align 4
  %94 = add i32 %93, %92
  store i32 %94, i32* %4, align 4
  %95 = getelementptr inbounds i8, i8* %10, i64 7
  %96 = load i8, i8* %95, align 1
  %97 = zext i8 %96 to i32
  %98 = getelementptr inbounds i8, i8* %12, i64 7
  %99 = load i8, i8* %98, align 1
  %100 = zext i8 %99 to i32
  %101 = sub nsw i32 %97, %100
  %102 = load i32, i32* %5, align 4
  %103 = add nsw i32 %101, %102
  store i32 %103, i32* %5, align 4
  %104 = mul nsw i32 %101, %101
  %105 = load i32, i32* %4, align 4
  %106 = add i32 %105, %104
  store i32 %106, i32* %4, align 4
  %107 = getelementptr inbounds i8, i8* %10, i64 %7
  %108 = getelementptr inbounds i8, i8* %12, i64 %8
  %109 = add nuw nsw i32 %11, 1
  %110 = icmp eq i32 %109, 8
  br i1 %110, label %111, label %9

111:                                              ; preds = %9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_mse16x16_c(i8* nocapture readonly, i32, i8* nocapture readonly, i32, i32* nocapture) local_unnamed_addr #2 {
  store i32 0, i32* %4, align 4
  %6 = sext i32 %1 to i64
  %7 = sext i32 %3 to i64
  br label %8

8:                                                ; preds = %8, %5
  %9 = phi i32 [ 0, %5 ], [ %154, %8 ]
  %10 = phi i8* [ %0, %5 ], [ %155, %8 ]
  %11 = phi i32 [ 0, %5 ], [ %157, %8 ]
  %12 = phi i8* [ %2, %5 ], [ %156, %8 ]
  %13 = load i8, i8* %10, align 1
  %14 = zext i8 %13 to i32
  %15 = load i8, i8* %12, align 1
  %16 = zext i8 %15 to i32
  %17 = sub nsw i32 %14, %16
  %18 = mul nsw i32 %17, %17
  %19 = add i32 %18, %9
  store i32 %19, i32* %4, align 4
  %20 = getelementptr inbounds i8, i8* %10, i64 1
  %21 = load i8, i8* %20, align 1
  %22 = zext i8 %21 to i32
  %23 = getelementptr inbounds i8, i8* %12, i64 1
  %24 = load i8, i8* %23, align 1
  %25 = zext i8 %24 to i32
  %26 = sub nsw i32 %22, %25
  %27 = mul nsw i32 %26, %26
  %28 = add i32 %27, %19
  store i32 %28, i32* %4, align 4
  %29 = getelementptr inbounds i8, i8* %10, i64 2
  %30 = load i8, i8* %29, align 1
  %31 = zext i8 %30 to i32
  %32 = getelementptr inbounds i8, i8* %12, i64 2
  %33 = load i8, i8* %32, align 1
  %34 = zext i8 %33 to i32
  %35 = sub nsw i32 %31, %34
  %36 = mul nsw i32 %35, %35
  %37 = add i32 %36, %28
  store i32 %37, i32* %4, align 4
  %38 = getelementptr inbounds i8, i8* %10, i64 3
  %39 = load i8, i8* %38, align 1
  %40 = zext i8 %39 to i32
  %41 = getelementptr inbounds i8, i8* %12, i64 3
  %42 = load i8, i8* %41, align 1
  %43 = zext i8 %42 to i32
  %44 = sub nsw i32 %40, %43
  %45 = mul nsw i32 %44, %44
  %46 = add i32 %45, %37
  store i32 %46, i32* %4, align 4
  %47 = getelementptr inbounds i8, i8* %10, i64 4
  %48 = load i8, i8* %47, align 1
  %49 = zext i8 %48 to i32
  %50 = getelementptr inbounds i8, i8* %12, i64 4
  %51 = load i8, i8* %50, align 1
  %52 = zext i8 %51 to i32
  %53 = sub nsw i32 %49, %52
  %54 = mul nsw i32 %53, %53
  %55 = add i32 %54, %46
  store i32 %55, i32* %4, align 4
  %56 = getelementptr inbounds i8, i8* %10, i64 5
  %57 = load i8, i8* %56, align 1
  %58 = zext i8 %57 to i32
  %59 = getelementptr inbounds i8, i8* %12, i64 5
  %60 = load i8, i8* %59, align 1
  %61 = zext i8 %60 to i32
  %62 = sub nsw i32 %58, %61
  %63 = mul nsw i32 %62, %62
  %64 = add i32 %63, %55
  store i32 %64, i32* %4, align 4
  %65 = getelementptr inbounds i8, i8* %10, i64 6
  %66 = load i8, i8* %65, align 1
  %67 = zext i8 %66 to i32
  %68 = getelementptr inbounds i8, i8* %12, i64 6
  %69 = load i8, i8* %68, align 1
  %70 = zext i8 %69 to i32
  %71 = sub nsw i32 %67, %70
  %72 = mul nsw i32 %71, %71
  %73 = add i32 %72, %64
  store i32 %73, i32* %4, align 4
  %74 = getelementptr inbounds i8, i8* %10, i64 7
  %75 = load i8, i8* %74, align 1
  %76 = zext i8 %75 to i32
  %77 = getelementptr inbounds i8, i8* %12, i64 7
  %78 = load i8, i8* %77, align 1
  %79 = zext i8 %78 to i32
  %80 = sub nsw i32 %76, %79
  %81 = mul nsw i32 %80, %80
  %82 = add i32 %81, %73
  store i32 %82, i32* %4, align 4
  %83 = getelementptr inbounds i8, i8* %10, i64 8
  %84 = load i8, i8* %83, align 1
  %85 = zext i8 %84 to i32
  %86 = getelementptr inbounds i8, i8* %12, i64 8
  %87 = load i8, i8* %86, align 1
  %88 = zext i8 %87 to i32
  %89 = sub nsw i32 %85, %88
  %90 = mul nsw i32 %89, %89
  %91 = add i32 %90, %82
  store i32 %91, i32* %4, align 4
  %92 = getelementptr inbounds i8, i8* %10, i64 9
  %93 = load i8, i8* %92, align 1
  %94 = zext i8 %93 to i32
  %95 = getelementptr inbounds i8, i8* %12, i64 9
  %96 = load i8, i8* %95, align 1
  %97 = zext i8 %96 to i32
  %98 = sub nsw i32 %94, %97
  %99 = mul nsw i32 %98, %98
  %100 = add i32 %99, %91
  store i32 %100, i32* %4, align 4
  %101 = getelementptr inbounds i8, i8* %10, i64 10
  %102 = load i8, i8* %101, align 1
  %103 = zext i8 %102 to i32
  %104 = getelementptr inbounds i8, i8* %12, i64 10
  %105 = load i8, i8* %104, align 1
  %106 = zext i8 %105 to i32
  %107 = sub nsw i32 %103, %106
  %108 = mul nsw i32 %107, %107
  %109 = add i32 %108, %100
  store i32 %109, i32* %4, align 4
  %110 = getelementptr inbounds i8, i8* %10, i64 11
  %111 = load i8, i8* %110, align 1
  %112 = zext i8 %111 to i32
  %113 = getelementptr inbounds i8, i8* %12, i64 11
  %114 = load i8, i8* %113, align 1
  %115 = zext i8 %114 to i32
  %116 = sub nsw i32 %112, %115
  %117 = mul nsw i32 %116, %116
  %118 = add i32 %117, %109
  store i32 %118, i32* %4, align 4
  %119 = getelementptr inbounds i8, i8* %10, i64 12
  %120 = load i8, i8* %119, align 1
  %121 = zext i8 %120 to i32
  %122 = getelementptr inbounds i8, i8* %12, i64 12
  %123 = load i8, i8* %122, align 1
  %124 = zext i8 %123 to i32
  %125 = sub nsw i32 %121, %124
  %126 = mul nsw i32 %125, %125
  %127 = add i32 %126, %118
  store i32 %127, i32* %4, align 4
  %128 = getelementptr inbounds i8, i8* %10, i64 13
  %129 = load i8, i8* %128, align 1
  %130 = zext i8 %129 to i32
  %131 = getelementptr inbounds i8, i8* %12, i64 13
  %132 = load i8, i8* %131, align 1
  %133 = zext i8 %132 to i32
  %134 = sub nsw i32 %130, %133
  %135 = mul nsw i32 %134, %134
  %136 = add i32 %135, %127
  store i32 %136, i32* %4, align 4
  %137 = getelementptr inbounds i8, i8* %10, i64 14
  %138 = load i8, i8* %137, align 1
  %139 = zext i8 %138 to i32
  %140 = getelementptr inbounds i8, i8* %12, i64 14
  %141 = load i8, i8* %140, align 1
  %142 = zext i8 %141 to i32
  %143 = sub nsw i32 %139, %142
  %144 = mul nsw i32 %143, %143
  %145 = add i32 %144, %136
  store i32 %145, i32* %4, align 4
  %146 = getelementptr inbounds i8, i8* %10, i64 15
  %147 = load i8, i8* %146, align 1
  %148 = zext i8 %147 to i32
  %149 = getelementptr inbounds i8, i8* %12, i64 15
  %150 = load i8, i8* %149, align 1
  %151 = zext i8 %150 to i32
  %152 = sub nsw i32 %148, %151
  %153 = mul nsw i32 %152, %152
  %154 = add i32 %153, %145
  store i32 %154, i32* %4, align 4
  %155 = getelementptr inbounds i8, i8* %10, i64 %6
  %156 = getelementptr inbounds i8, i8* %12, i64 %7
  %157 = add nuw nsw i32 %11, 1
  %158 = icmp eq i32 %157, 16
  br i1 %158, label %159, label %8

159:                                              ; preds = %8
  ret i32 %154
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_mse16x8_c(i8* nocapture readonly, i32, i8* nocapture readonly, i32, i32* nocapture) local_unnamed_addr #2 {
  store i32 0, i32* %4, align 4
  %6 = sext i32 %1 to i64
  %7 = sext i32 %3 to i64
  br label %8

8:                                                ; preds = %8, %5
  %9 = phi i32 [ 0, %5 ], [ %154, %8 ]
  %10 = phi i8* [ %0, %5 ], [ %155, %8 ]
  %11 = phi i32 [ 0, %5 ], [ %157, %8 ]
  %12 = phi i8* [ %2, %5 ], [ %156, %8 ]
  %13 = load i8, i8* %10, align 1
  %14 = zext i8 %13 to i32
  %15 = load i8, i8* %12, align 1
  %16 = zext i8 %15 to i32
  %17 = sub nsw i32 %14, %16
  %18 = mul nsw i32 %17, %17
  %19 = add i32 %18, %9
  store i32 %19, i32* %4, align 4
  %20 = getelementptr inbounds i8, i8* %10, i64 1
  %21 = load i8, i8* %20, align 1
  %22 = zext i8 %21 to i32
  %23 = getelementptr inbounds i8, i8* %12, i64 1
  %24 = load i8, i8* %23, align 1
  %25 = zext i8 %24 to i32
  %26 = sub nsw i32 %22, %25
  %27 = mul nsw i32 %26, %26
  %28 = add i32 %27, %19
  store i32 %28, i32* %4, align 4
  %29 = getelementptr inbounds i8, i8* %10, i64 2
  %30 = load i8, i8* %29, align 1
  %31 = zext i8 %30 to i32
  %32 = getelementptr inbounds i8, i8* %12, i64 2
  %33 = load i8, i8* %32, align 1
  %34 = zext i8 %33 to i32
  %35 = sub nsw i32 %31, %34
  %36 = mul nsw i32 %35, %35
  %37 = add i32 %36, %28
  store i32 %37, i32* %4, align 4
  %38 = getelementptr inbounds i8, i8* %10, i64 3
  %39 = load i8, i8* %38, align 1
  %40 = zext i8 %39 to i32
  %41 = getelementptr inbounds i8, i8* %12, i64 3
  %42 = load i8, i8* %41, align 1
  %43 = zext i8 %42 to i32
  %44 = sub nsw i32 %40, %43
  %45 = mul nsw i32 %44, %44
  %46 = add i32 %45, %37
  store i32 %46, i32* %4, align 4
  %47 = getelementptr inbounds i8, i8* %10, i64 4
  %48 = load i8, i8* %47, align 1
  %49 = zext i8 %48 to i32
  %50 = getelementptr inbounds i8, i8* %12, i64 4
  %51 = load i8, i8* %50, align 1
  %52 = zext i8 %51 to i32
  %53 = sub nsw i32 %49, %52
  %54 = mul nsw i32 %53, %53
  %55 = add i32 %54, %46
  store i32 %55, i32* %4, align 4
  %56 = getelementptr inbounds i8, i8* %10, i64 5
  %57 = load i8, i8* %56, align 1
  %58 = zext i8 %57 to i32
  %59 = getelementptr inbounds i8, i8* %12, i64 5
  %60 = load i8, i8* %59, align 1
  %61 = zext i8 %60 to i32
  %62 = sub nsw i32 %58, %61
  %63 = mul nsw i32 %62, %62
  %64 = add i32 %63, %55
  store i32 %64, i32* %4, align 4
  %65 = getelementptr inbounds i8, i8* %10, i64 6
  %66 = load i8, i8* %65, align 1
  %67 = zext i8 %66 to i32
  %68 = getelementptr inbounds i8, i8* %12, i64 6
  %69 = load i8, i8* %68, align 1
  %70 = zext i8 %69 to i32
  %71 = sub nsw i32 %67, %70
  %72 = mul nsw i32 %71, %71
  %73 = add i32 %72, %64
  store i32 %73, i32* %4, align 4
  %74 = getelementptr inbounds i8, i8* %10, i64 7
  %75 = load i8, i8* %74, align 1
  %76 = zext i8 %75 to i32
  %77 = getelementptr inbounds i8, i8* %12, i64 7
  %78 = load i8, i8* %77, align 1
  %79 = zext i8 %78 to i32
  %80 = sub nsw i32 %76, %79
  %81 = mul nsw i32 %80, %80
  %82 = add i32 %81, %73
  store i32 %82, i32* %4, align 4
  %83 = getelementptr inbounds i8, i8* %10, i64 8
  %84 = load i8, i8* %83, align 1
  %85 = zext i8 %84 to i32
  %86 = getelementptr inbounds i8, i8* %12, i64 8
  %87 = load i8, i8* %86, align 1
  %88 = zext i8 %87 to i32
  %89 = sub nsw i32 %85, %88
  %90 = mul nsw i32 %89, %89
  %91 = add i32 %90, %82
  store i32 %91, i32* %4, align 4
  %92 = getelementptr inbounds i8, i8* %10, i64 9
  %93 = load i8, i8* %92, align 1
  %94 = zext i8 %93 to i32
  %95 = getelementptr inbounds i8, i8* %12, i64 9
  %96 = load i8, i8* %95, align 1
  %97 = zext i8 %96 to i32
  %98 = sub nsw i32 %94, %97
  %99 = mul nsw i32 %98, %98
  %100 = add i32 %99, %91
  store i32 %100, i32* %4, align 4
  %101 = getelementptr inbounds i8, i8* %10, i64 10
  %102 = load i8, i8* %101, align 1
  %103 = zext i8 %102 to i32
  %104 = getelementptr inbounds i8, i8* %12, i64 10
  %105 = load i8, i8* %104, align 1
  %106 = zext i8 %105 to i32
  %107 = sub nsw i32 %103, %106
  %108 = mul nsw i32 %107, %107
  %109 = add i32 %108, %100
  store i32 %109, i32* %4, align 4
  %110 = getelementptr inbounds i8, i8* %10, i64 11
  %111 = load i8, i8* %110, align 1
  %112 = zext i8 %111 to i32
  %113 = getelementptr inbounds i8, i8* %12, i64 11
  %114 = load i8, i8* %113, align 1
  %115 = zext i8 %114 to i32
  %116 = sub nsw i32 %112, %115
  %117 = mul nsw i32 %116, %116
  %118 = add i32 %117, %109
  store i32 %118, i32* %4, align 4
  %119 = getelementptr inbounds i8, i8* %10, i64 12
  %120 = load i8, i8* %119, align 1
  %121 = zext i8 %120 to i32
  %122 = getelementptr inbounds i8, i8* %12, i64 12
  %123 = load i8, i8* %122, align 1
  %124 = zext i8 %123 to i32
  %125 = sub nsw i32 %121, %124
  %126 = mul nsw i32 %125, %125
  %127 = add i32 %126, %118
  store i32 %127, i32* %4, align 4
  %128 = getelementptr inbounds i8, i8* %10, i64 13
  %129 = load i8, i8* %128, align 1
  %130 = zext i8 %129 to i32
  %131 = getelementptr inbounds i8, i8* %12, i64 13
  %132 = load i8, i8* %131, align 1
  %133 = zext i8 %132 to i32
  %134 = sub nsw i32 %130, %133
  %135 = mul nsw i32 %134, %134
  %136 = add i32 %135, %127
  store i32 %136, i32* %4, align 4
  %137 = getelementptr inbounds i8, i8* %10, i64 14
  %138 = load i8, i8* %137, align 1
  %139 = zext i8 %138 to i32
  %140 = getelementptr inbounds i8, i8* %12, i64 14
  %141 = load i8, i8* %140, align 1
  %142 = zext i8 %141 to i32
  %143 = sub nsw i32 %139, %142
  %144 = mul nsw i32 %143, %143
  %145 = add i32 %144, %136
  store i32 %145, i32* %4, align 4
  %146 = getelementptr inbounds i8, i8* %10, i64 15
  %147 = load i8, i8* %146, align 1
  %148 = zext i8 %147 to i32
  %149 = getelementptr inbounds i8, i8* %12, i64 15
  %150 = load i8, i8* %149, align 1
  %151 = zext i8 %150 to i32
  %152 = sub nsw i32 %148, %151
  %153 = mul nsw i32 %152, %152
  %154 = add i32 %153, %145
  store i32 %154, i32* %4, align 4
  %155 = getelementptr inbounds i8, i8* %10, i64 %6
  %156 = getelementptr inbounds i8, i8* %12, i64 %7
  %157 = add nuw nsw i32 %11, 1
  %158 = icmp eq i32 %157, 8
  br i1 %158, label %159, label %8

159:                                              ; preds = %8
  ret i32 %154
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_mse8x16_c(i8* nocapture readonly, i32, i8* nocapture readonly, i32, i32* nocapture) local_unnamed_addr #2 {
  store i32 0, i32* %4, align 4
  %6 = sext i32 %1 to i64
  %7 = sext i32 %3 to i64
  br label %8

8:                                                ; preds = %8, %5
  %9 = phi i32 [ 0, %5 ], [ %82, %8 ]
  %10 = phi i8* [ %0, %5 ], [ %83, %8 ]
  %11 = phi i32 [ 0, %5 ], [ %85, %8 ]
  %12 = phi i8* [ %2, %5 ], [ %84, %8 ]
  %13 = load i8, i8* %10, align 1
  %14 = zext i8 %13 to i32
  %15 = load i8, i8* %12, align 1
  %16 = zext i8 %15 to i32
  %17 = sub nsw i32 %14, %16
  %18 = mul nsw i32 %17, %17
  %19 = add i32 %18, %9
  store i32 %19, i32* %4, align 4
  %20 = getelementptr inbounds i8, i8* %10, i64 1
  %21 = load i8, i8* %20, align 1
  %22 = zext i8 %21 to i32
  %23 = getelementptr inbounds i8, i8* %12, i64 1
  %24 = load i8, i8* %23, align 1
  %25 = zext i8 %24 to i32
  %26 = sub nsw i32 %22, %25
  %27 = mul nsw i32 %26, %26
  %28 = add i32 %27, %19
  store i32 %28, i32* %4, align 4
  %29 = getelementptr inbounds i8, i8* %10, i64 2
  %30 = load i8, i8* %29, align 1
  %31 = zext i8 %30 to i32
  %32 = getelementptr inbounds i8, i8* %12, i64 2
  %33 = load i8, i8* %32, align 1
  %34 = zext i8 %33 to i32
  %35 = sub nsw i32 %31, %34
  %36 = mul nsw i32 %35, %35
  %37 = add i32 %36, %28
  store i32 %37, i32* %4, align 4
  %38 = getelementptr inbounds i8, i8* %10, i64 3
  %39 = load i8, i8* %38, align 1
  %40 = zext i8 %39 to i32
  %41 = getelementptr inbounds i8, i8* %12, i64 3
  %42 = load i8, i8* %41, align 1
  %43 = zext i8 %42 to i32
  %44 = sub nsw i32 %40, %43
  %45 = mul nsw i32 %44, %44
  %46 = add i32 %45, %37
  store i32 %46, i32* %4, align 4
  %47 = getelementptr inbounds i8, i8* %10, i64 4
  %48 = load i8, i8* %47, align 1
  %49 = zext i8 %48 to i32
  %50 = getelementptr inbounds i8, i8* %12, i64 4
  %51 = load i8, i8* %50, align 1
  %52 = zext i8 %51 to i32
  %53 = sub nsw i32 %49, %52
  %54 = mul nsw i32 %53, %53
  %55 = add i32 %54, %46
  store i32 %55, i32* %4, align 4
  %56 = getelementptr inbounds i8, i8* %10, i64 5
  %57 = load i8, i8* %56, align 1
  %58 = zext i8 %57 to i32
  %59 = getelementptr inbounds i8, i8* %12, i64 5
  %60 = load i8, i8* %59, align 1
  %61 = zext i8 %60 to i32
  %62 = sub nsw i32 %58, %61
  %63 = mul nsw i32 %62, %62
  %64 = add i32 %63, %55
  store i32 %64, i32* %4, align 4
  %65 = getelementptr inbounds i8, i8* %10, i64 6
  %66 = load i8, i8* %65, align 1
  %67 = zext i8 %66 to i32
  %68 = getelementptr inbounds i8, i8* %12, i64 6
  %69 = load i8, i8* %68, align 1
  %70 = zext i8 %69 to i32
  %71 = sub nsw i32 %67, %70
  %72 = mul nsw i32 %71, %71
  %73 = add i32 %72, %64
  store i32 %73, i32* %4, align 4
  %74 = getelementptr inbounds i8, i8* %10, i64 7
  %75 = load i8, i8* %74, align 1
  %76 = zext i8 %75 to i32
  %77 = getelementptr inbounds i8, i8* %12, i64 7
  %78 = load i8, i8* %77, align 1
  %79 = zext i8 %78 to i32
  %80 = sub nsw i32 %76, %79
  %81 = mul nsw i32 %80, %80
  %82 = add i32 %81, %73
  store i32 %82, i32* %4, align 4
  %83 = getelementptr inbounds i8, i8* %10, i64 %6
  %84 = getelementptr inbounds i8, i8* %12, i64 %7
  %85 = add nuw nsw i32 %11, 1
  %86 = icmp eq i32 %85, 16
  br i1 %86, label %87, label %8

87:                                               ; preds = %8
  ret i32 %82
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_mse8x8_c(i8* nocapture readonly, i32, i8* nocapture readonly, i32, i32* nocapture) local_unnamed_addr #2 {
  store i32 0, i32* %4, align 4
  %6 = sext i32 %1 to i64
  %7 = sext i32 %3 to i64
  br label %8

8:                                                ; preds = %8, %5
  %9 = phi i32 [ 0, %5 ], [ %82, %8 ]
  %10 = phi i8* [ %0, %5 ], [ %83, %8 ]
  %11 = phi i32 [ 0, %5 ], [ %85, %8 ]
  %12 = phi i8* [ %2, %5 ], [ %84, %8 ]
  %13 = load i8, i8* %10, align 1
  %14 = zext i8 %13 to i32
  %15 = load i8, i8* %12, align 1
  %16 = zext i8 %15 to i32
  %17 = sub nsw i32 %14, %16
  %18 = mul nsw i32 %17, %17
  %19 = add i32 %18, %9
  store i32 %19, i32* %4, align 4
  %20 = getelementptr inbounds i8, i8* %10, i64 1
  %21 = load i8, i8* %20, align 1
  %22 = zext i8 %21 to i32
  %23 = getelementptr inbounds i8, i8* %12, i64 1
  %24 = load i8, i8* %23, align 1
  %25 = zext i8 %24 to i32
  %26 = sub nsw i32 %22, %25
  %27 = mul nsw i32 %26, %26
  %28 = add i32 %27, %19
  store i32 %28, i32* %4, align 4
  %29 = getelementptr inbounds i8, i8* %10, i64 2
  %30 = load i8, i8* %29, align 1
  %31 = zext i8 %30 to i32
  %32 = getelementptr inbounds i8, i8* %12, i64 2
  %33 = load i8, i8* %32, align 1
  %34 = zext i8 %33 to i32
  %35 = sub nsw i32 %31, %34
  %36 = mul nsw i32 %35, %35
  %37 = add i32 %36, %28
  store i32 %37, i32* %4, align 4
  %38 = getelementptr inbounds i8, i8* %10, i64 3
  %39 = load i8, i8* %38, align 1
  %40 = zext i8 %39 to i32
  %41 = getelementptr inbounds i8, i8* %12, i64 3
  %42 = load i8, i8* %41, align 1
  %43 = zext i8 %42 to i32
  %44 = sub nsw i32 %40, %43
  %45 = mul nsw i32 %44, %44
  %46 = add i32 %45, %37
  store i32 %46, i32* %4, align 4
  %47 = getelementptr inbounds i8, i8* %10, i64 4
  %48 = load i8, i8* %47, align 1
  %49 = zext i8 %48 to i32
  %50 = getelementptr inbounds i8, i8* %12, i64 4
  %51 = load i8, i8* %50, align 1
  %52 = zext i8 %51 to i32
  %53 = sub nsw i32 %49, %52
  %54 = mul nsw i32 %53, %53
  %55 = add i32 %54, %46
  store i32 %55, i32* %4, align 4
  %56 = getelementptr inbounds i8, i8* %10, i64 5
  %57 = load i8, i8* %56, align 1
  %58 = zext i8 %57 to i32
  %59 = getelementptr inbounds i8, i8* %12, i64 5
  %60 = load i8, i8* %59, align 1
  %61 = zext i8 %60 to i32
  %62 = sub nsw i32 %58, %61
  %63 = mul nsw i32 %62, %62
  %64 = add i32 %63, %55
  store i32 %64, i32* %4, align 4
  %65 = getelementptr inbounds i8, i8* %10, i64 6
  %66 = load i8, i8* %65, align 1
  %67 = zext i8 %66 to i32
  %68 = getelementptr inbounds i8, i8* %12, i64 6
  %69 = load i8, i8* %68, align 1
  %70 = zext i8 %69 to i32
  %71 = sub nsw i32 %67, %70
  %72 = mul nsw i32 %71, %71
  %73 = add i32 %72, %64
  store i32 %73, i32* %4, align 4
  %74 = getelementptr inbounds i8, i8* %10, i64 7
  %75 = load i8, i8* %74, align 1
  %76 = zext i8 %75 to i32
  %77 = getelementptr inbounds i8, i8* %12, i64 7
  %78 = load i8, i8* %77, align 1
  %79 = zext i8 %78 to i32
  %80 = sub nsw i32 %76, %79
  %81 = mul nsw i32 %80, %80
  %82 = add i32 %81, %73
  store i32 %82, i32* %4, align 4
  %83 = getelementptr inbounds i8, i8* %10, i64 %6
  %84 = getelementptr inbounds i8, i8* %12, i64 %7
  %85 = add nuw nsw i32 %11, 1
  %86 = icmp eq i32 %85, 8
  br i1 %86, label %87, label %8

87:                                               ; preds = %8
  ret i32 %82
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_highbd_8_variance64x64_c(i8*, i32, i8*, i32, i32* nocapture) local_unnamed_addr #2 {
  %6 = ptrtoint i8* %2 to i64
  %7 = shl i64 %6, 1
  %8 = inttoptr i64 %7 to i16*
  %9 = ptrtoint i8* %0 to i64
  %10 = shl i64 %9, 1
  %11 = inttoptr i64 %10 to i16*
  %12 = sext i32 %1 to i64
  %13 = sext i32 %3 to i64
  br label %14

14:                                               ; preds = %51, %5
  %15 = phi i64 [ 0, %5 ], [ %48, %51 ]
  %16 = phi i64 [ 0, %5 ], [ %45, %51 ]
  %17 = phi i32 [ 0, %5 ], [ %54, %51 ]
  %18 = phi i16* [ %8, %5 ], [ %53, %51 ]
  %19 = phi i16* [ %11, %5 ], [ %52, %51 ]
  br label %20

20:                                               ; preds = %20, %14
  %21 = phi i64 [ %15, %14 ], [ %48, %20 ]
  %22 = phi i64 [ %16, %14 ], [ %45, %20 ]
  %23 = phi i64 [ 0, %14 ], [ %49, %20 ]
  %24 = getelementptr inbounds i16, i16* %19, i64 %23
  %25 = load i16, i16* %24, align 2
  %26 = zext i16 %25 to i32
  %27 = getelementptr inbounds i16, i16* %18, i64 %23
  %28 = load i16, i16* %27, align 2
  %29 = zext i16 %28 to i32
  %30 = sub nsw i32 %26, %29
  %31 = sext i32 %30 to i64
  %32 = add nsw i64 %22, %31
  %33 = mul nsw i32 %30, %30
  %34 = zext i32 %33 to i64
  %35 = add i64 %21, %34
  %36 = or i64 %23, 1
  %37 = getelementptr inbounds i16, i16* %19, i64 %36
  %38 = load i16, i16* %37, align 2
  %39 = zext i16 %38 to i32
  %40 = getelementptr inbounds i16, i16* %18, i64 %36
  %41 = load i16, i16* %40, align 2
  %42 = zext i16 %41 to i32
  %43 = sub nsw i32 %39, %42
  %44 = sext i32 %43 to i64
  %45 = add nsw i64 %32, %44
  %46 = mul nsw i32 %43, %43
  %47 = zext i32 %46 to i64
  %48 = add i64 %35, %47
  %49 = add nuw nsw i64 %23, 2
  %50 = icmp eq i64 %49, 64
  br i1 %50, label %51, label %20

51:                                               ; preds = %20
  %52 = getelementptr inbounds i16, i16* %19, i64 %12
  %53 = getelementptr inbounds i16, i16* %18, i64 %13
  %54 = add nuw nsw i32 %17, 1
  %55 = icmp eq i32 %54, 64
  br i1 %55, label %56, label %14

56:                                               ; preds = %51
  %57 = trunc i64 %48 to i32
  store i32 %57, i32* %4, align 4
  %58 = shl i64 %45, 32
  %59 = ashr exact i64 %58, 32
  %60 = mul nsw i64 %59, %59
  %61 = lshr i64 %60, 12
  %62 = trunc i64 %61 to i32
  %63 = sub i32 %57, %62
  ret i32 %63
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_highbd_10_variance64x64_c(i8*, i32, i8*, i32, i32* nocapture) local_unnamed_addr #2 {
  %6 = ptrtoint i8* %2 to i64
  %7 = shl i64 %6, 1
  %8 = inttoptr i64 %7 to i16*
  %9 = ptrtoint i8* %0 to i64
  %10 = shl i64 %9, 1
  %11 = inttoptr i64 %10 to i16*
  %12 = sext i32 %1 to i64
  %13 = sext i32 %3 to i64
  br label %14

14:                                               ; preds = %51, %5
  %15 = phi i64 [ 0, %5 ], [ %48, %51 ]
  %16 = phi i64 [ 0, %5 ], [ %45, %51 ]
  %17 = phi i32 [ 0, %5 ], [ %54, %51 ]
  %18 = phi i16* [ %8, %5 ], [ %53, %51 ]
  %19 = phi i16* [ %11, %5 ], [ %52, %51 ]
  br label %20

20:                                               ; preds = %20, %14
  %21 = phi i64 [ %15, %14 ], [ %48, %20 ]
  %22 = phi i64 [ %16, %14 ], [ %45, %20 ]
  %23 = phi i64 [ 0, %14 ], [ %49, %20 ]
  %24 = getelementptr inbounds i16, i16* %19, i64 %23
  %25 = load i16, i16* %24, align 2
  %26 = zext i16 %25 to i32
  %27 = getelementptr inbounds i16, i16* %18, i64 %23
  %28 = load i16, i16* %27, align 2
  %29 = zext i16 %28 to i32
  %30 = sub nsw i32 %26, %29
  %31 = sext i32 %30 to i64
  %32 = add nsw i64 %22, %31
  %33 = mul nsw i32 %30, %30
  %34 = zext i32 %33 to i64
  %35 = add i64 %21, %34
  %36 = or i64 %23, 1
  %37 = getelementptr inbounds i16, i16* %19, i64 %36
  %38 = load i16, i16* %37, align 2
  %39 = zext i16 %38 to i32
  %40 = getelementptr inbounds i16, i16* %18, i64 %36
  %41 = load i16, i16* %40, align 2
  %42 = zext i16 %41 to i32
  %43 = sub nsw i32 %39, %42
  %44 = sext i32 %43 to i64
  %45 = add nsw i64 %32, %44
  %46 = mul nsw i32 %43, %43
  %47 = zext i32 %46 to i64
  %48 = add i64 %35, %47
  %49 = add nuw nsw i64 %23, 2
  %50 = icmp eq i64 %49, 64
  br i1 %50, label %51, label %20

51:                                               ; preds = %20
  %52 = getelementptr inbounds i16, i16* %19, i64 %12
  %53 = getelementptr inbounds i16, i16* %18, i64 %13
  %54 = add nuw nsw i32 %17, 1
  %55 = icmp eq i32 %54, 64
  br i1 %55, label %56, label %14

56:                                               ; preds = %51
  %57 = add i64 %48, 8
  %58 = lshr i64 %57, 4
  %59 = trunc i64 %58 to i32
  store i32 %59, i32* %4, align 4
  %60 = and i64 %58, 4294967295
  %61 = shl i64 %45, 30
  %62 = add i64 %61, 2147483648
  %63 = ashr i64 %62, 32
  %64 = mul nsw i64 %63, %63
  %65 = lshr i64 %64, 12
  %66 = sub nsw i64 %60, %65
  %67 = icmp sgt i64 %66, -1
  %68 = trunc i64 %66 to i32
  %69 = select i1 %67, i32 %68, i32 0
  ret i32 %69
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_highbd_12_variance64x64_c(i8*, i32, i8*, i32, i32* nocapture) local_unnamed_addr #2 {
  %6 = ptrtoint i8* %2 to i64
  %7 = shl i64 %6, 1
  %8 = inttoptr i64 %7 to i16*
  %9 = ptrtoint i8* %0 to i64
  %10 = shl i64 %9, 1
  %11 = inttoptr i64 %10 to i16*
  %12 = sext i32 %1 to i64
  %13 = sext i32 %3 to i64
  br label %14

14:                                               ; preds = %51, %5
  %15 = phi i64 [ 0, %5 ], [ %48, %51 ]
  %16 = phi i64 [ 0, %5 ], [ %45, %51 ]
  %17 = phi i32 [ 0, %5 ], [ %54, %51 ]
  %18 = phi i16* [ %8, %5 ], [ %53, %51 ]
  %19 = phi i16* [ %11, %5 ], [ %52, %51 ]
  br label %20

20:                                               ; preds = %20, %14
  %21 = phi i64 [ %15, %14 ], [ %48, %20 ]
  %22 = phi i64 [ %16, %14 ], [ %45, %20 ]
  %23 = phi i64 [ 0, %14 ], [ %49, %20 ]
  %24 = getelementptr inbounds i16, i16* %19, i64 %23
  %25 = load i16, i16* %24, align 2
  %26 = zext i16 %25 to i32
  %27 = getelementptr inbounds i16, i16* %18, i64 %23
  %28 = load i16, i16* %27, align 2
  %29 = zext i16 %28 to i32
  %30 = sub nsw i32 %26, %29
  %31 = sext i32 %30 to i64
  %32 = add nsw i64 %22, %31
  %33 = mul nsw i32 %30, %30
  %34 = zext i32 %33 to i64
  %35 = add i64 %21, %34
  %36 = or i64 %23, 1
  %37 = getelementptr inbounds i16, i16* %19, i64 %36
  %38 = load i16, i16* %37, align 2
  %39 = zext i16 %38 to i32
  %40 = getelementptr inbounds i16, i16* %18, i64 %36
  %41 = load i16, i16* %40, align 2
  %42 = zext i16 %41 to i32
  %43 = sub nsw i32 %39, %42
  %44 = sext i32 %43 to i64
  %45 = add nsw i64 %32, %44
  %46 = mul nsw i32 %43, %43
  %47 = zext i32 %46 to i64
  %48 = add i64 %35, %47
  %49 = add nuw nsw i64 %23, 2
  %50 = icmp eq i64 %49, 64
  br i1 %50, label %51, label %20

51:                                               ; preds = %20
  %52 = getelementptr inbounds i16, i16* %19, i64 %12
  %53 = getelementptr inbounds i16, i16* %18, i64 %13
  %54 = add nuw nsw i32 %17, 1
  %55 = icmp eq i32 %54, 64
  br i1 %55, label %56, label %14

56:                                               ; preds = %51
  %57 = add i64 %48, 128
  %58 = lshr i64 %57, 8
  %59 = trunc i64 %58 to i32
  store i32 %59, i32* %4, align 4
  %60 = and i64 %58, 4294967295
  %61 = shl i64 %45, 28
  %62 = add i64 %61, 2147483648
  %63 = ashr i64 %62, 32
  %64 = mul nsw i64 %63, %63
  %65 = lshr i64 %64, 12
  %66 = sub nsw i64 %60, %65
  %67 = icmp sgt i64 %66, -1
  %68 = trunc i64 %66 to i32
  %69 = select i1 %67, i32 %68, i32 0
  ret i32 %69
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_highbd_8_sub_pixel_variance64x64_c(i8*, i32, i32, i32, i8*, i32, i32* nocapture) local_unnamed_addr #2 {
  %8 = alloca [4160 x i16], align 16
  %9 = alloca [4096 x i16], align 16
  %10 = bitcast [4160 x i16]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8320, i8* nonnull %10) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %10, i8 -86, i64 8320, i1 false)
  %11 = bitcast [4096 x i16]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8192, i8* nonnull %11) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %11, i8 -86, i64 8192, i1 false)
  %12 = getelementptr inbounds [4160 x i16], [4160 x i16]* %8, i64 0, i64 0
  %13 = sext i32 %2 to i64
  %14 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %13, i64 0
  %15 = ptrtoint i8* %0 to i64
  %16 = shl i64 %15, 1
  %17 = inttoptr i64 %16 to i16*
  %18 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %13, i64 1
  %19 = add i32 %1, -64
  %20 = zext i32 %19 to i64
  %21 = load i8, i8* %14, align 2
  %22 = zext i8 %21 to i32
  %23 = load i8, i8* %18, align 1
  %24 = zext i8 %23 to i32
  %25 = insertelement <8 x i32> undef, i32 %22, i32 0
  %26 = shufflevector <8 x i32> %25, <8 x i32> undef, <8 x i32> zeroinitializer
  %27 = insertelement <8 x i32> undef, i32 %24, i32 0
  %28 = shufflevector <8 x i32> %27, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %29

29:                                               ; preds = %200, %7
  %30 = phi i64 [ %206, %200 ], [ 0, %7 ]
  %31 = phi i16* [ %202, %200 ], [ %17, %7 ]
  %32 = phi i32 [ %204, %200 ], [ 0, %7 ]
  %33 = phi i16* [ %203, %200 ], [ %12, %7 ]
  %34 = shl nuw nsw i64 %30, 6
  %35 = add i64 %34, 64
  %36 = getelementptr [4160 x i16], [4160 x i16]* %8, i64 0, i64 %35
  %37 = getelementptr [4160 x i16], [4160 x i16]* %8, i64 0, i64 %34
  %38 = getelementptr i16, i16* %31, i64 65
  %39 = icmp ult i16* %37, %38
  %40 = icmp ult i16* %31, %36
  %41 = and i1 %39, %40
  br i1 %41, label %170, label %42

42:                                               ; preds = %29
  %43 = getelementptr i16, i16* %31, i64 64
  %44 = bitcast i16* %31 to <8 x i16>*
  %45 = load <8 x i16>, <8 x i16>* %44, align 2, !alias.scope !386
  %46 = zext <8 x i16> %45 to <8 x i32>
  %47 = mul nuw nsw <8 x i32> %26, %46
  %48 = getelementptr inbounds i16, i16* %31, i64 1
  %49 = bitcast i16* %48 to <8 x i16>*
  %50 = load <8 x i16>, <8 x i16>* %49, align 2, !alias.scope !386
  %51 = zext <8 x i16> %50 to <8 x i32>
  %52 = mul nuw nsw <8 x i32> %28, %51
  %53 = add nuw nsw <8 x i32> %47, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %54 = add nuw nsw <8 x i32> %53, %52
  %55 = lshr <8 x i32> %54, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %56 = trunc <8 x i32> %55 to <8 x i16>
  %57 = bitcast i16* %33 to <8 x i16>*
  store <8 x i16> %56, <8 x i16>* %57, align 2, !alias.scope !389, !noalias !386
  %58 = getelementptr i16, i16* %31, i64 8
  %59 = bitcast i16* %58 to <8 x i16>*
  %60 = load <8 x i16>, <8 x i16>* %59, align 2, !alias.scope !386
  %61 = zext <8 x i16> %60 to <8 x i32>
  %62 = mul nuw nsw <8 x i32> %26, %61
  %63 = getelementptr inbounds i16, i16* %31, i64 9
  %64 = bitcast i16* %63 to <8 x i16>*
  %65 = load <8 x i16>, <8 x i16>* %64, align 2, !alias.scope !386
  %66 = zext <8 x i16> %65 to <8 x i32>
  %67 = mul nuw nsw <8 x i32> %28, %66
  %68 = add nuw nsw <8 x i32> %62, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %69 = add nuw nsw <8 x i32> %68, %67
  %70 = lshr <8 x i32> %69, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %71 = trunc <8 x i32> %70 to <8 x i16>
  %72 = getelementptr inbounds i16, i16* %33, i64 8
  %73 = bitcast i16* %72 to <8 x i16>*
  store <8 x i16> %71, <8 x i16>* %73, align 2, !alias.scope !389, !noalias !386
  %74 = getelementptr i16, i16* %31, i64 16
  %75 = bitcast i16* %74 to <8 x i16>*
  %76 = load <8 x i16>, <8 x i16>* %75, align 2, !alias.scope !386
  %77 = zext <8 x i16> %76 to <8 x i32>
  %78 = mul nuw nsw <8 x i32> %26, %77
  %79 = getelementptr inbounds i16, i16* %31, i64 17
  %80 = bitcast i16* %79 to <8 x i16>*
  %81 = load <8 x i16>, <8 x i16>* %80, align 2, !alias.scope !386
  %82 = zext <8 x i16> %81 to <8 x i32>
  %83 = mul nuw nsw <8 x i32> %28, %82
  %84 = add nuw nsw <8 x i32> %78, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %85 = add nuw nsw <8 x i32> %84, %83
  %86 = lshr <8 x i32> %85, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %87 = trunc <8 x i32> %86 to <8 x i16>
  %88 = getelementptr inbounds i16, i16* %33, i64 16
  %89 = bitcast i16* %88 to <8 x i16>*
  store <8 x i16> %87, <8 x i16>* %89, align 2, !alias.scope !389, !noalias !386
  %90 = getelementptr i16, i16* %31, i64 24
  %91 = bitcast i16* %90 to <8 x i16>*
  %92 = load <8 x i16>, <8 x i16>* %91, align 2, !alias.scope !386
  %93 = zext <8 x i16> %92 to <8 x i32>
  %94 = mul nuw nsw <8 x i32> %26, %93
  %95 = getelementptr inbounds i16, i16* %31, i64 25
  %96 = bitcast i16* %95 to <8 x i16>*
  %97 = load <8 x i16>, <8 x i16>* %96, align 2, !alias.scope !386
  %98 = zext <8 x i16> %97 to <8 x i32>
  %99 = mul nuw nsw <8 x i32> %28, %98
  %100 = add nuw nsw <8 x i32> %94, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %101 = add nuw nsw <8 x i32> %100, %99
  %102 = lshr <8 x i32> %101, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %103 = trunc <8 x i32> %102 to <8 x i16>
  %104 = getelementptr inbounds i16, i16* %33, i64 24
  %105 = bitcast i16* %104 to <8 x i16>*
  store <8 x i16> %103, <8 x i16>* %105, align 2, !alias.scope !389, !noalias !386
  %106 = getelementptr i16, i16* %31, i64 32
  %107 = bitcast i16* %106 to <8 x i16>*
  %108 = load <8 x i16>, <8 x i16>* %107, align 2, !alias.scope !386
  %109 = zext <8 x i16> %108 to <8 x i32>
  %110 = mul nuw nsw <8 x i32> %26, %109
  %111 = getelementptr inbounds i16, i16* %31, i64 33
  %112 = bitcast i16* %111 to <8 x i16>*
  %113 = load <8 x i16>, <8 x i16>* %112, align 2, !alias.scope !386
  %114 = zext <8 x i16> %113 to <8 x i32>
  %115 = mul nuw nsw <8 x i32> %28, %114
  %116 = add nuw nsw <8 x i32> %110, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %117 = add nuw nsw <8 x i32> %116, %115
  %118 = lshr <8 x i32> %117, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %119 = trunc <8 x i32> %118 to <8 x i16>
  %120 = getelementptr inbounds i16, i16* %33, i64 32
  %121 = bitcast i16* %120 to <8 x i16>*
  store <8 x i16> %119, <8 x i16>* %121, align 2, !alias.scope !389, !noalias !386
  %122 = getelementptr i16, i16* %31, i64 40
  %123 = bitcast i16* %122 to <8 x i16>*
  %124 = load <8 x i16>, <8 x i16>* %123, align 2, !alias.scope !386
  %125 = zext <8 x i16> %124 to <8 x i32>
  %126 = mul nuw nsw <8 x i32> %26, %125
  %127 = getelementptr inbounds i16, i16* %31, i64 41
  %128 = bitcast i16* %127 to <8 x i16>*
  %129 = load <8 x i16>, <8 x i16>* %128, align 2, !alias.scope !386
  %130 = zext <8 x i16> %129 to <8 x i32>
  %131 = mul nuw nsw <8 x i32> %28, %130
  %132 = add nuw nsw <8 x i32> %126, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %133 = add nuw nsw <8 x i32> %132, %131
  %134 = lshr <8 x i32> %133, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %135 = trunc <8 x i32> %134 to <8 x i16>
  %136 = getelementptr inbounds i16, i16* %33, i64 40
  %137 = bitcast i16* %136 to <8 x i16>*
  store <8 x i16> %135, <8 x i16>* %137, align 2, !alias.scope !389, !noalias !386
  %138 = getelementptr i16, i16* %31, i64 48
  %139 = bitcast i16* %138 to <8 x i16>*
  %140 = load <8 x i16>, <8 x i16>* %139, align 2, !alias.scope !386
  %141 = zext <8 x i16> %140 to <8 x i32>
  %142 = mul nuw nsw <8 x i32> %26, %141
  %143 = getelementptr inbounds i16, i16* %31, i64 49
  %144 = bitcast i16* %143 to <8 x i16>*
  %145 = load <8 x i16>, <8 x i16>* %144, align 2, !alias.scope !386
  %146 = zext <8 x i16> %145 to <8 x i32>
  %147 = mul nuw nsw <8 x i32> %28, %146
  %148 = add nuw nsw <8 x i32> %142, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %149 = add nuw nsw <8 x i32> %148, %147
  %150 = lshr <8 x i32> %149, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %151 = trunc <8 x i32> %150 to <8 x i16>
  %152 = getelementptr inbounds i16, i16* %33, i64 48
  %153 = bitcast i16* %152 to <8 x i16>*
  store <8 x i16> %151, <8 x i16>* %153, align 2, !alias.scope !389, !noalias !386
  %154 = getelementptr i16, i16* %31, i64 56
  %155 = bitcast i16* %154 to <8 x i16>*
  %156 = load <8 x i16>, <8 x i16>* %155, align 2, !alias.scope !386
  %157 = zext <8 x i16> %156 to <8 x i32>
  %158 = mul nuw nsw <8 x i32> %26, %157
  %159 = getelementptr inbounds i16, i16* %31, i64 57
  %160 = bitcast i16* %159 to <8 x i16>*
  %161 = load <8 x i16>, <8 x i16>* %160, align 2, !alias.scope !386
  %162 = zext <8 x i16> %161 to <8 x i32>
  %163 = mul nuw nsw <8 x i32> %28, %162
  %164 = add nuw nsw <8 x i32> %158, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %165 = add nuw nsw <8 x i32> %164, %163
  %166 = lshr <8 x i32> %165, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %167 = trunc <8 x i32> %166 to <8 x i16>
  %168 = getelementptr inbounds i16, i16* %33, i64 56
  %169 = bitcast i16* %168 to <8 x i16>*
  store <8 x i16> %167, <8 x i16>* %169, align 2, !alias.scope !389, !noalias !386
  br label %200

170:                                              ; preds = %29, %170
  %171 = phi i64 [ %198, %170 ], [ 0, %29 ]
  %172 = phi i16* [ %189, %170 ], [ %31, %29 ]
  %173 = load i16, i16* %172, align 2
  %174 = zext i16 %173 to i32
  %175 = mul nuw nsw i32 %22, %174
  %176 = getelementptr inbounds i16, i16* %172, i64 1
  %177 = load i16, i16* %176, align 2
  %178 = zext i16 %177 to i32
  %179 = mul nuw nsw i32 %24, %178
  %180 = add nuw nsw i32 %175, 64
  %181 = add nuw nsw i32 %180, %179
  %182 = lshr i32 %181, 7
  %183 = trunc i32 %182 to i16
  %184 = getelementptr inbounds i16, i16* %33, i64 %171
  store i16 %183, i16* %184, align 2
  %185 = or i64 %171, 1
  %186 = load i16, i16* %176, align 2
  %187 = zext i16 %186 to i32
  %188 = mul nuw nsw i32 %22, %187
  %189 = getelementptr inbounds i16, i16* %172, i64 2
  %190 = load i16, i16* %189, align 2
  %191 = zext i16 %190 to i32
  %192 = mul nuw nsw i32 %24, %191
  %193 = add nuw nsw i32 %188, 64
  %194 = add nuw nsw i32 %193, %192
  %195 = lshr i32 %194, 7
  %196 = trunc i32 %195 to i16
  %197 = getelementptr inbounds i16, i16* %33, i64 %185
  store i16 %196, i16* %197, align 2
  %198 = add nuw nsw i64 %171, 2
  %199 = icmp eq i64 %198, 64
  br i1 %199, label %200, label %170, !llvm.loop !391

200:                                              ; preds = %170, %42
  %201 = phi i16* [ %43, %42 ], [ %189, %170 ]
  %202 = getelementptr inbounds i16, i16* %201, i64 %20
  %203 = getelementptr inbounds i16, i16* %33, i64 64
  %204 = add nuw nsw i32 %32, 1
  %205 = icmp eq i32 %204, 65
  %206 = add i64 %30, 1
  br i1 %205, label %207, label %29

207:                                              ; preds = %200
  %208 = getelementptr inbounds [4096 x i16], [4096 x i16]* %9, i64 0, i64 0
  %209 = sext i32 %3 to i64
  %210 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %209, i64 0
  %211 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %209, i64 1
  %212 = load i8, i8* %210, align 2
  %213 = zext i8 %212 to i32
  %214 = load i8, i8* %211, align 1
  %215 = zext i8 %214 to i32
  %216 = insertelement <8 x i32> undef, i32 %213, i32 0
  %217 = shufflevector <8 x i32> %216, <8 x i32> undef, <8 x i32> zeroinitializer
  %218 = insertelement <8 x i32> undef, i32 %215, i32 0
  %219 = shufflevector <8 x i32> %218, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %220

220:                                              ; preds = %393, %207
  %221 = phi i64 [ %398, %393 ], [ 0, %207 ]
  %222 = phi i32 [ %396, %393 ], [ 0, %207 ]
  %223 = phi i16* [ %394, %393 ], [ %12, %207 ]
  %224 = phi i16* [ %395, %393 ], [ %208, %207 ]
  %225 = shl nuw nsw i64 %221, 6
  %226 = add i64 %225, 64
  %227 = getelementptr [4096 x i16], [4096 x i16]* %9, i64 0, i64 %226
  %228 = getelementptr [4096 x i16], [4096 x i16]* %9, i64 0, i64 %225
  %229 = getelementptr i16, i16* %223, i64 128
  %230 = icmp ult i16* %228, %229
  %231 = icmp ult i16* %223, %227
  %232 = and i1 %230, %231
  br i1 %232, label %361, label %233

233:                                              ; preds = %220
  %234 = getelementptr i16, i16* %223, i64 64
  %235 = bitcast i16* %223 to <8 x i16>*
  %236 = load <8 x i16>, <8 x i16>* %235, align 2, !alias.scope !392
  %237 = zext <8 x i16> %236 to <8 x i32>
  %238 = mul nuw nsw <8 x i32> %217, %237
  %239 = getelementptr inbounds i16, i16* %223, i64 64
  %240 = bitcast i16* %239 to <8 x i16>*
  %241 = load <8 x i16>, <8 x i16>* %240, align 2, !alias.scope !392
  %242 = zext <8 x i16> %241 to <8 x i32>
  %243 = mul nuw nsw <8 x i32> %219, %242
  %244 = add nuw nsw <8 x i32> %238, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %245 = add nuw nsw <8 x i32> %244, %243
  %246 = lshr <8 x i32> %245, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %247 = trunc <8 x i32> %246 to <8 x i16>
  %248 = bitcast i16* %224 to <8 x i16>*
  store <8 x i16> %247, <8 x i16>* %248, align 2, !alias.scope !395, !noalias !392
  %249 = getelementptr i16, i16* %223, i64 8
  %250 = bitcast i16* %249 to <8 x i16>*
  %251 = load <8 x i16>, <8 x i16>* %250, align 2, !alias.scope !392
  %252 = zext <8 x i16> %251 to <8 x i32>
  %253 = mul nuw nsw <8 x i32> %217, %252
  %254 = getelementptr inbounds i16, i16* %223, i64 72
  %255 = bitcast i16* %254 to <8 x i16>*
  %256 = load <8 x i16>, <8 x i16>* %255, align 2, !alias.scope !392
  %257 = zext <8 x i16> %256 to <8 x i32>
  %258 = mul nuw nsw <8 x i32> %219, %257
  %259 = add nuw nsw <8 x i32> %253, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %260 = add nuw nsw <8 x i32> %259, %258
  %261 = lshr <8 x i32> %260, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %262 = trunc <8 x i32> %261 to <8 x i16>
  %263 = getelementptr inbounds i16, i16* %224, i64 8
  %264 = bitcast i16* %263 to <8 x i16>*
  store <8 x i16> %262, <8 x i16>* %264, align 2, !alias.scope !395, !noalias !392
  %265 = getelementptr i16, i16* %223, i64 16
  %266 = bitcast i16* %265 to <8 x i16>*
  %267 = load <8 x i16>, <8 x i16>* %266, align 2, !alias.scope !392
  %268 = zext <8 x i16> %267 to <8 x i32>
  %269 = mul nuw nsw <8 x i32> %217, %268
  %270 = getelementptr inbounds i16, i16* %223, i64 80
  %271 = bitcast i16* %270 to <8 x i16>*
  %272 = load <8 x i16>, <8 x i16>* %271, align 2, !alias.scope !392
  %273 = zext <8 x i16> %272 to <8 x i32>
  %274 = mul nuw nsw <8 x i32> %219, %273
  %275 = add nuw nsw <8 x i32> %269, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %276 = add nuw nsw <8 x i32> %275, %274
  %277 = lshr <8 x i32> %276, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %278 = trunc <8 x i32> %277 to <8 x i16>
  %279 = getelementptr inbounds i16, i16* %224, i64 16
  %280 = bitcast i16* %279 to <8 x i16>*
  store <8 x i16> %278, <8 x i16>* %280, align 2, !alias.scope !395, !noalias !392
  %281 = getelementptr i16, i16* %223, i64 24
  %282 = bitcast i16* %281 to <8 x i16>*
  %283 = load <8 x i16>, <8 x i16>* %282, align 2, !alias.scope !392
  %284 = zext <8 x i16> %283 to <8 x i32>
  %285 = mul nuw nsw <8 x i32> %217, %284
  %286 = getelementptr inbounds i16, i16* %223, i64 88
  %287 = bitcast i16* %286 to <8 x i16>*
  %288 = load <8 x i16>, <8 x i16>* %287, align 2, !alias.scope !392
  %289 = zext <8 x i16> %288 to <8 x i32>
  %290 = mul nuw nsw <8 x i32> %219, %289
  %291 = add nuw nsw <8 x i32> %285, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %292 = add nuw nsw <8 x i32> %291, %290
  %293 = lshr <8 x i32> %292, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %294 = trunc <8 x i32> %293 to <8 x i16>
  %295 = getelementptr inbounds i16, i16* %224, i64 24
  %296 = bitcast i16* %295 to <8 x i16>*
  store <8 x i16> %294, <8 x i16>* %296, align 2, !alias.scope !395, !noalias !392
  %297 = getelementptr i16, i16* %223, i64 32
  %298 = bitcast i16* %297 to <8 x i16>*
  %299 = load <8 x i16>, <8 x i16>* %298, align 2, !alias.scope !392
  %300 = zext <8 x i16> %299 to <8 x i32>
  %301 = mul nuw nsw <8 x i32> %217, %300
  %302 = getelementptr inbounds i16, i16* %223, i64 96
  %303 = bitcast i16* %302 to <8 x i16>*
  %304 = load <8 x i16>, <8 x i16>* %303, align 2, !alias.scope !392
  %305 = zext <8 x i16> %304 to <8 x i32>
  %306 = mul nuw nsw <8 x i32> %219, %305
  %307 = add nuw nsw <8 x i32> %301, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %308 = add nuw nsw <8 x i32> %307, %306
  %309 = lshr <8 x i32> %308, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %310 = trunc <8 x i32> %309 to <8 x i16>
  %311 = getelementptr inbounds i16, i16* %224, i64 32
  %312 = bitcast i16* %311 to <8 x i16>*
  store <8 x i16> %310, <8 x i16>* %312, align 2, !alias.scope !395, !noalias !392
  %313 = getelementptr i16, i16* %223, i64 40
  %314 = bitcast i16* %313 to <8 x i16>*
  %315 = load <8 x i16>, <8 x i16>* %314, align 2, !alias.scope !392
  %316 = zext <8 x i16> %315 to <8 x i32>
  %317 = mul nuw nsw <8 x i32> %217, %316
  %318 = getelementptr inbounds i16, i16* %223, i64 104
  %319 = bitcast i16* %318 to <8 x i16>*
  %320 = load <8 x i16>, <8 x i16>* %319, align 2, !alias.scope !392
  %321 = zext <8 x i16> %320 to <8 x i32>
  %322 = mul nuw nsw <8 x i32> %219, %321
  %323 = add nuw nsw <8 x i32> %317, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %324 = add nuw nsw <8 x i32> %323, %322
  %325 = lshr <8 x i32> %324, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %326 = trunc <8 x i32> %325 to <8 x i16>
  %327 = getelementptr inbounds i16, i16* %224, i64 40
  %328 = bitcast i16* %327 to <8 x i16>*
  store <8 x i16> %326, <8 x i16>* %328, align 2, !alias.scope !395, !noalias !392
  %329 = getelementptr i16, i16* %223, i64 48
  %330 = bitcast i16* %329 to <8 x i16>*
  %331 = load <8 x i16>, <8 x i16>* %330, align 2, !alias.scope !392
  %332 = zext <8 x i16> %331 to <8 x i32>
  %333 = mul nuw nsw <8 x i32> %217, %332
  %334 = getelementptr inbounds i16, i16* %223, i64 112
  %335 = bitcast i16* %334 to <8 x i16>*
  %336 = load <8 x i16>, <8 x i16>* %335, align 2, !alias.scope !392
  %337 = zext <8 x i16> %336 to <8 x i32>
  %338 = mul nuw nsw <8 x i32> %219, %337
  %339 = add nuw nsw <8 x i32> %333, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %340 = add nuw nsw <8 x i32> %339, %338
  %341 = lshr <8 x i32> %340, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %342 = trunc <8 x i32> %341 to <8 x i16>
  %343 = getelementptr inbounds i16, i16* %224, i64 48
  %344 = bitcast i16* %343 to <8 x i16>*
  store <8 x i16> %342, <8 x i16>* %344, align 2, !alias.scope !395, !noalias !392
  %345 = getelementptr i16, i16* %223, i64 56
  %346 = bitcast i16* %345 to <8 x i16>*
  %347 = load <8 x i16>, <8 x i16>* %346, align 2, !alias.scope !392
  %348 = zext <8 x i16> %347 to <8 x i32>
  %349 = mul nuw nsw <8 x i32> %217, %348
  %350 = getelementptr inbounds i16, i16* %223, i64 120
  %351 = bitcast i16* %350 to <8 x i16>*
  %352 = load <8 x i16>, <8 x i16>* %351, align 2, !alias.scope !392
  %353 = zext <8 x i16> %352 to <8 x i32>
  %354 = mul nuw nsw <8 x i32> %219, %353
  %355 = add nuw nsw <8 x i32> %349, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %356 = add nuw nsw <8 x i32> %355, %354
  %357 = lshr <8 x i32> %356, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %358 = trunc <8 x i32> %357 to <8 x i16>
  %359 = getelementptr inbounds i16, i16* %224, i64 56
  %360 = bitcast i16* %359 to <8 x i16>*
  store <8 x i16> %358, <8 x i16>* %360, align 2, !alias.scope !395, !noalias !392
  br label %393

361:                                              ; preds = %220, %361
  %362 = phi i64 [ %391, %361 ], [ 0, %220 ]
  %363 = phi i16* [ %390, %361 ], [ %223, %220 ]
  %364 = load i16, i16* %363, align 2
  %365 = zext i16 %364 to i32
  %366 = mul nuw nsw i32 %213, %365
  %367 = getelementptr inbounds i16, i16* %363, i64 64
  %368 = load i16, i16* %367, align 2
  %369 = zext i16 %368 to i32
  %370 = mul nuw nsw i32 %215, %369
  %371 = add nuw nsw i32 %366, 64
  %372 = add nuw nsw i32 %371, %370
  %373 = lshr i32 %372, 7
  %374 = trunc i32 %373 to i16
  %375 = getelementptr inbounds i16, i16* %224, i64 %362
  store i16 %374, i16* %375, align 2
  %376 = getelementptr inbounds i16, i16* %363, i64 1
  %377 = or i64 %362, 1
  %378 = load i16, i16* %376, align 2
  %379 = zext i16 %378 to i32
  %380 = mul nuw nsw i32 %213, %379
  %381 = getelementptr inbounds i16, i16* %363, i64 65
  %382 = load i16, i16* %381, align 2
  %383 = zext i16 %382 to i32
  %384 = mul nuw nsw i32 %215, %383
  %385 = add nuw nsw i32 %380, 64
  %386 = add nuw nsw i32 %385, %384
  %387 = lshr i32 %386, 7
  %388 = trunc i32 %387 to i16
  %389 = getelementptr inbounds i16, i16* %224, i64 %377
  store i16 %388, i16* %389, align 2
  %390 = getelementptr inbounds i16, i16* %363, i64 2
  %391 = add nuw nsw i64 %362, 2
  %392 = icmp eq i64 %391, 64
  br i1 %392, label %393, label %361, !llvm.loop !397

393:                                              ; preds = %361, %233
  %394 = phi i16* [ %234, %233 ], [ %390, %361 ]
  %395 = getelementptr inbounds i16, i16* %224, i64 64
  %396 = add nuw nsw i32 %222, 1
  %397 = icmp eq i32 %396, 64
  %398 = add i64 %221, 1
  br i1 %397, label %399, label %220

399:                                              ; preds = %393
  %400 = ptrtoint i8* %4 to i64
  %401 = shl i64 %400, 1
  %402 = inttoptr i64 %401 to i16*
  %403 = sext i32 %5 to i64
  br label %404

404:                                              ; preds = %441, %399
  %405 = phi i64 [ 0, %399 ], [ %438, %441 ]
  %406 = phi i64 [ 0, %399 ], [ %435, %441 ]
  %407 = phi i32 [ 0, %399 ], [ %444, %441 ]
  %408 = phi i16* [ %402, %399 ], [ %443, %441 ]
  %409 = phi i16* [ %208, %399 ], [ %442, %441 ]
  br label %410

410:                                              ; preds = %410, %404
  %411 = phi i64 [ %405, %404 ], [ %438, %410 ]
  %412 = phi i64 [ %406, %404 ], [ %435, %410 ]
  %413 = phi i64 [ 0, %404 ], [ %439, %410 ]
  %414 = getelementptr inbounds i16, i16* %409, i64 %413
  %415 = load i16, i16* %414, align 2
  %416 = zext i16 %415 to i32
  %417 = getelementptr inbounds i16, i16* %408, i64 %413
  %418 = load i16, i16* %417, align 2
  %419 = zext i16 %418 to i32
  %420 = sub nsw i32 %416, %419
  %421 = sext i32 %420 to i64
  %422 = add nsw i64 %412, %421
  %423 = mul nsw i32 %420, %420
  %424 = zext i32 %423 to i64
  %425 = add i64 %411, %424
  %426 = or i64 %413, 1
  %427 = getelementptr inbounds i16, i16* %409, i64 %426
  %428 = load i16, i16* %427, align 2
  %429 = zext i16 %428 to i32
  %430 = getelementptr inbounds i16, i16* %408, i64 %426
  %431 = load i16, i16* %430, align 2
  %432 = zext i16 %431 to i32
  %433 = sub nsw i32 %429, %432
  %434 = sext i32 %433 to i64
  %435 = add nsw i64 %422, %434
  %436 = mul nsw i32 %433, %433
  %437 = zext i32 %436 to i64
  %438 = add i64 %425, %437
  %439 = add nuw nsw i64 %413, 2
  %440 = icmp eq i64 %439, 64
  br i1 %440, label %441, label %410

441:                                              ; preds = %410
  %442 = getelementptr inbounds i16, i16* %409, i64 64
  %443 = getelementptr inbounds i16, i16* %408, i64 %403
  %444 = add nuw nsw i32 %407, 1
  %445 = icmp eq i32 %444, 64
  br i1 %445, label %446, label %404

446:                                              ; preds = %441
  %447 = trunc i64 %438 to i32
  store i32 %447, i32* %6, align 4
  %448 = shl i64 %435, 32
  %449 = ashr exact i64 %448, 32
  %450 = mul nsw i64 %449, %449
  %451 = lshr i64 %450, 12
  %452 = trunc i64 %451 to i32
  %453 = sub i32 %447, %452
  call void @llvm.lifetime.end.p0i8(i64 8192, i8* nonnull %11) #4
  call void @llvm.lifetime.end.p0i8(i64 8320, i8* nonnull %10) #4
  ret i32 %453
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_highbd_10_sub_pixel_variance64x64_c(i8*, i32, i32, i32, i8*, i32, i32* nocapture) local_unnamed_addr #2 {
  %8 = alloca [4160 x i16], align 16
  %9 = alloca [4096 x i16], align 16
  %10 = bitcast [4160 x i16]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8320, i8* nonnull %10) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %10, i8 -86, i64 8320, i1 false)
  %11 = bitcast [4096 x i16]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8192, i8* nonnull %11) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %11, i8 -86, i64 8192, i1 false)
  %12 = getelementptr inbounds [4160 x i16], [4160 x i16]* %8, i64 0, i64 0
  %13 = sext i32 %2 to i64
  %14 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %13, i64 0
  %15 = ptrtoint i8* %0 to i64
  %16 = shl i64 %15, 1
  %17 = inttoptr i64 %16 to i16*
  %18 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %13, i64 1
  %19 = add i32 %1, -64
  %20 = zext i32 %19 to i64
  %21 = load i8, i8* %14, align 2
  %22 = zext i8 %21 to i32
  %23 = load i8, i8* %18, align 1
  %24 = zext i8 %23 to i32
  %25 = insertelement <8 x i32> undef, i32 %22, i32 0
  %26 = shufflevector <8 x i32> %25, <8 x i32> undef, <8 x i32> zeroinitializer
  %27 = insertelement <8 x i32> undef, i32 %24, i32 0
  %28 = shufflevector <8 x i32> %27, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %29

29:                                               ; preds = %200, %7
  %30 = phi i64 [ %206, %200 ], [ 0, %7 ]
  %31 = phi i16* [ %202, %200 ], [ %17, %7 ]
  %32 = phi i32 [ %204, %200 ], [ 0, %7 ]
  %33 = phi i16* [ %203, %200 ], [ %12, %7 ]
  %34 = shl nuw nsw i64 %30, 6
  %35 = add i64 %34, 64
  %36 = getelementptr [4160 x i16], [4160 x i16]* %8, i64 0, i64 %35
  %37 = getelementptr [4160 x i16], [4160 x i16]* %8, i64 0, i64 %34
  %38 = getelementptr i16, i16* %31, i64 65
  %39 = icmp ult i16* %37, %38
  %40 = icmp ult i16* %31, %36
  %41 = and i1 %39, %40
  br i1 %41, label %170, label %42

42:                                               ; preds = %29
  %43 = getelementptr i16, i16* %31, i64 64
  %44 = bitcast i16* %31 to <8 x i16>*
  %45 = load <8 x i16>, <8 x i16>* %44, align 2, !alias.scope !398
  %46 = zext <8 x i16> %45 to <8 x i32>
  %47 = mul nuw nsw <8 x i32> %26, %46
  %48 = getelementptr inbounds i16, i16* %31, i64 1
  %49 = bitcast i16* %48 to <8 x i16>*
  %50 = load <8 x i16>, <8 x i16>* %49, align 2, !alias.scope !398
  %51 = zext <8 x i16> %50 to <8 x i32>
  %52 = mul nuw nsw <8 x i32> %28, %51
  %53 = add nuw nsw <8 x i32> %47, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %54 = add nuw nsw <8 x i32> %53, %52
  %55 = lshr <8 x i32> %54, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %56 = trunc <8 x i32> %55 to <8 x i16>
  %57 = bitcast i16* %33 to <8 x i16>*
  store <8 x i16> %56, <8 x i16>* %57, align 2, !alias.scope !401, !noalias !398
  %58 = getelementptr i16, i16* %31, i64 8
  %59 = bitcast i16* %58 to <8 x i16>*
  %60 = load <8 x i16>, <8 x i16>* %59, align 2, !alias.scope !398
  %61 = zext <8 x i16> %60 to <8 x i32>
  %62 = mul nuw nsw <8 x i32> %26, %61
  %63 = getelementptr inbounds i16, i16* %31, i64 9
  %64 = bitcast i16* %63 to <8 x i16>*
  %65 = load <8 x i16>, <8 x i16>* %64, align 2, !alias.scope !398
  %66 = zext <8 x i16> %65 to <8 x i32>
  %67 = mul nuw nsw <8 x i32> %28, %66
  %68 = add nuw nsw <8 x i32> %62, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %69 = add nuw nsw <8 x i32> %68, %67
  %70 = lshr <8 x i32> %69, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %71 = trunc <8 x i32> %70 to <8 x i16>
  %72 = getelementptr inbounds i16, i16* %33, i64 8
  %73 = bitcast i16* %72 to <8 x i16>*
  store <8 x i16> %71, <8 x i16>* %73, align 2, !alias.scope !401, !noalias !398
  %74 = getelementptr i16, i16* %31, i64 16
  %75 = bitcast i16* %74 to <8 x i16>*
  %76 = load <8 x i16>, <8 x i16>* %75, align 2, !alias.scope !398
  %77 = zext <8 x i16> %76 to <8 x i32>
  %78 = mul nuw nsw <8 x i32> %26, %77
  %79 = getelementptr inbounds i16, i16* %31, i64 17
  %80 = bitcast i16* %79 to <8 x i16>*
  %81 = load <8 x i16>, <8 x i16>* %80, align 2, !alias.scope !398
  %82 = zext <8 x i16> %81 to <8 x i32>
  %83 = mul nuw nsw <8 x i32> %28, %82
  %84 = add nuw nsw <8 x i32> %78, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %85 = add nuw nsw <8 x i32> %84, %83
  %86 = lshr <8 x i32> %85, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %87 = trunc <8 x i32> %86 to <8 x i16>
  %88 = getelementptr inbounds i16, i16* %33, i64 16
  %89 = bitcast i16* %88 to <8 x i16>*
  store <8 x i16> %87, <8 x i16>* %89, align 2, !alias.scope !401, !noalias !398
  %90 = getelementptr i16, i16* %31, i64 24
  %91 = bitcast i16* %90 to <8 x i16>*
  %92 = load <8 x i16>, <8 x i16>* %91, align 2, !alias.scope !398
  %93 = zext <8 x i16> %92 to <8 x i32>
  %94 = mul nuw nsw <8 x i32> %26, %93
  %95 = getelementptr inbounds i16, i16* %31, i64 25
  %96 = bitcast i16* %95 to <8 x i16>*
  %97 = load <8 x i16>, <8 x i16>* %96, align 2, !alias.scope !398
  %98 = zext <8 x i16> %97 to <8 x i32>
  %99 = mul nuw nsw <8 x i32> %28, %98
  %100 = add nuw nsw <8 x i32> %94, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %101 = add nuw nsw <8 x i32> %100, %99
  %102 = lshr <8 x i32> %101, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %103 = trunc <8 x i32> %102 to <8 x i16>
  %104 = getelementptr inbounds i16, i16* %33, i64 24
  %105 = bitcast i16* %104 to <8 x i16>*
  store <8 x i16> %103, <8 x i16>* %105, align 2, !alias.scope !401, !noalias !398
  %106 = getelementptr i16, i16* %31, i64 32
  %107 = bitcast i16* %106 to <8 x i16>*
  %108 = load <8 x i16>, <8 x i16>* %107, align 2, !alias.scope !398
  %109 = zext <8 x i16> %108 to <8 x i32>
  %110 = mul nuw nsw <8 x i32> %26, %109
  %111 = getelementptr inbounds i16, i16* %31, i64 33
  %112 = bitcast i16* %111 to <8 x i16>*
  %113 = load <8 x i16>, <8 x i16>* %112, align 2, !alias.scope !398
  %114 = zext <8 x i16> %113 to <8 x i32>
  %115 = mul nuw nsw <8 x i32> %28, %114
  %116 = add nuw nsw <8 x i32> %110, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %117 = add nuw nsw <8 x i32> %116, %115
  %118 = lshr <8 x i32> %117, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %119 = trunc <8 x i32> %118 to <8 x i16>
  %120 = getelementptr inbounds i16, i16* %33, i64 32
  %121 = bitcast i16* %120 to <8 x i16>*
  store <8 x i16> %119, <8 x i16>* %121, align 2, !alias.scope !401, !noalias !398
  %122 = getelementptr i16, i16* %31, i64 40
  %123 = bitcast i16* %122 to <8 x i16>*
  %124 = load <8 x i16>, <8 x i16>* %123, align 2, !alias.scope !398
  %125 = zext <8 x i16> %124 to <8 x i32>
  %126 = mul nuw nsw <8 x i32> %26, %125
  %127 = getelementptr inbounds i16, i16* %31, i64 41
  %128 = bitcast i16* %127 to <8 x i16>*
  %129 = load <8 x i16>, <8 x i16>* %128, align 2, !alias.scope !398
  %130 = zext <8 x i16> %129 to <8 x i32>
  %131 = mul nuw nsw <8 x i32> %28, %130
  %132 = add nuw nsw <8 x i32> %126, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %133 = add nuw nsw <8 x i32> %132, %131
  %134 = lshr <8 x i32> %133, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %135 = trunc <8 x i32> %134 to <8 x i16>
  %136 = getelementptr inbounds i16, i16* %33, i64 40
  %137 = bitcast i16* %136 to <8 x i16>*
  store <8 x i16> %135, <8 x i16>* %137, align 2, !alias.scope !401, !noalias !398
  %138 = getelementptr i16, i16* %31, i64 48
  %139 = bitcast i16* %138 to <8 x i16>*
  %140 = load <8 x i16>, <8 x i16>* %139, align 2, !alias.scope !398
  %141 = zext <8 x i16> %140 to <8 x i32>
  %142 = mul nuw nsw <8 x i32> %26, %141
  %143 = getelementptr inbounds i16, i16* %31, i64 49
  %144 = bitcast i16* %143 to <8 x i16>*
  %145 = load <8 x i16>, <8 x i16>* %144, align 2, !alias.scope !398
  %146 = zext <8 x i16> %145 to <8 x i32>
  %147 = mul nuw nsw <8 x i32> %28, %146
  %148 = add nuw nsw <8 x i32> %142, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %149 = add nuw nsw <8 x i32> %148, %147
  %150 = lshr <8 x i32> %149, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %151 = trunc <8 x i32> %150 to <8 x i16>
  %152 = getelementptr inbounds i16, i16* %33, i64 48
  %153 = bitcast i16* %152 to <8 x i16>*
  store <8 x i16> %151, <8 x i16>* %153, align 2, !alias.scope !401, !noalias !398
  %154 = getelementptr i16, i16* %31, i64 56
  %155 = bitcast i16* %154 to <8 x i16>*
  %156 = load <8 x i16>, <8 x i16>* %155, align 2, !alias.scope !398
  %157 = zext <8 x i16> %156 to <8 x i32>
  %158 = mul nuw nsw <8 x i32> %26, %157
  %159 = getelementptr inbounds i16, i16* %31, i64 57
  %160 = bitcast i16* %159 to <8 x i16>*
  %161 = load <8 x i16>, <8 x i16>* %160, align 2, !alias.scope !398
  %162 = zext <8 x i16> %161 to <8 x i32>
  %163 = mul nuw nsw <8 x i32> %28, %162
  %164 = add nuw nsw <8 x i32> %158, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %165 = add nuw nsw <8 x i32> %164, %163
  %166 = lshr <8 x i32> %165, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %167 = trunc <8 x i32> %166 to <8 x i16>
  %168 = getelementptr inbounds i16, i16* %33, i64 56
  %169 = bitcast i16* %168 to <8 x i16>*
  store <8 x i16> %167, <8 x i16>* %169, align 2, !alias.scope !401, !noalias !398
  br label %200

170:                                              ; preds = %29, %170
  %171 = phi i64 [ %198, %170 ], [ 0, %29 ]
  %172 = phi i16* [ %189, %170 ], [ %31, %29 ]
  %173 = load i16, i16* %172, align 2
  %174 = zext i16 %173 to i32
  %175 = mul nuw nsw i32 %22, %174
  %176 = getelementptr inbounds i16, i16* %172, i64 1
  %177 = load i16, i16* %176, align 2
  %178 = zext i16 %177 to i32
  %179 = mul nuw nsw i32 %24, %178
  %180 = add nuw nsw i32 %175, 64
  %181 = add nuw nsw i32 %180, %179
  %182 = lshr i32 %181, 7
  %183 = trunc i32 %182 to i16
  %184 = getelementptr inbounds i16, i16* %33, i64 %171
  store i16 %183, i16* %184, align 2
  %185 = or i64 %171, 1
  %186 = load i16, i16* %176, align 2
  %187 = zext i16 %186 to i32
  %188 = mul nuw nsw i32 %22, %187
  %189 = getelementptr inbounds i16, i16* %172, i64 2
  %190 = load i16, i16* %189, align 2
  %191 = zext i16 %190 to i32
  %192 = mul nuw nsw i32 %24, %191
  %193 = add nuw nsw i32 %188, 64
  %194 = add nuw nsw i32 %193, %192
  %195 = lshr i32 %194, 7
  %196 = trunc i32 %195 to i16
  %197 = getelementptr inbounds i16, i16* %33, i64 %185
  store i16 %196, i16* %197, align 2
  %198 = add nuw nsw i64 %171, 2
  %199 = icmp eq i64 %198, 64
  br i1 %199, label %200, label %170, !llvm.loop !403

200:                                              ; preds = %170, %42
  %201 = phi i16* [ %43, %42 ], [ %189, %170 ]
  %202 = getelementptr inbounds i16, i16* %201, i64 %20
  %203 = getelementptr inbounds i16, i16* %33, i64 64
  %204 = add nuw nsw i32 %32, 1
  %205 = icmp eq i32 %204, 65
  %206 = add i64 %30, 1
  br i1 %205, label %207, label %29

207:                                              ; preds = %200
  %208 = getelementptr inbounds [4096 x i16], [4096 x i16]* %9, i64 0, i64 0
  %209 = sext i32 %3 to i64
  %210 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %209, i64 0
  %211 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %209, i64 1
  %212 = load i8, i8* %210, align 2
  %213 = zext i8 %212 to i32
  %214 = load i8, i8* %211, align 1
  %215 = zext i8 %214 to i32
  %216 = insertelement <8 x i32> undef, i32 %213, i32 0
  %217 = shufflevector <8 x i32> %216, <8 x i32> undef, <8 x i32> zeroinitializer
  %218 = insertelement <8 x i32> undef, i32 %215, i32 0
  %219 = shufflevector <8 x i32> %218, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %220

220:                                              ; preds = %393, %207
  %221 = phi i64 [ %398, %393 ], [ 0, %207 ]
  %222 = phi i32 [ %396, %393 ], [ 0, %207 ]
  %223 = phi i16* [ %394, %393 ], [ %12, %207 ]
  %224 = phi i16* [ %395, %393 ], [ %208, %207 ]
  %225 = shl nuw nsw i64 %221, 6
  %226 = add i64 %225, 64
  %227 = getelementptr [4096 x i16], [4096 x i16]* %9, i64 0, i64 %226
  %228 = getelementptr [4096 x i16], [4096 x i16]* %9, i64 0, i64 %225
  %229 = getelementptr i16, i16* %223, i64 128
  %230 = icmp ult i16* %228, %229
  %231 = icmp ult i16* %223, %227
  %232 = and i1 %230, %231
  br i1 %232, label %361, label %233

233:                                              ; preds = %220
  %234 = getelementptr i16, i16* %223, i64 64
  %235 = bitcast i16* %223 to <8 x i16>*
  %236 = load <8 x i16>, <8 x i16>* %235, align 2, !alias.scope !404
  %237 = zext <8 x i16> %236 to <8 x i32>
  %238 = mul nuw nsw <8 x i32> %217, %237
  %239 = getelementptr inbounds i16, i16* %223, i64 64
  %240 = bitcast i16* %239 to <8 x i16>*
  %241 = load <8 x i16>, <8 x i16>* %240, align 2, !alias.scope !404
  %242 = zext <8 x i16> %241 to <8 x i32>
  %243 = mul nuw nsw <8 x i32> %219, %242
  %244 = add nuw nsw <8 x i32> %238, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %245 = add nuw nsw <8 x i32> %244, %243
  %246 = lshr <8 x i32> %245, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %247 = trunc <8 x i32> %246 to <8 x i16>
  %248 = bitcast i16* %224 to <8 x i16>*
  store <8 x i16> %247, <8 x i16>* %248, align 2, !alias.scope !407, !noalias !404
  %249 = getelementptr i16, i16* %223, i64 8
  %250 = bitcast i16* %249 to <8 x i16>*
  %251 = load <8 x i16>, <8 x i16>* %250, align 2, !alias.scope !404
  %252 = zext <8 x i16> %251 to <8 x i32>
  %253 = mul nuw nsw <8 x i32> %217, %252
  %254 = getelementptr inbounds i16, i16* %223, i64 72
  %255 = bitcast i16* %254 to <8 x i16>*
  %256 = load <8 x i16>, <8 x i16>* %255, align 2, !alias.scope !404
  %257 = zext <8 x i16> %256 to <8 x i32>
  %258 = mul nuw nsw <8 x i32> %219, %257
  %259 = add nuw nsw <8 x i32> %253, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %260 = add nuw nsw <8 x i32> %259, %258
  %261 = lshr <8 x i32> %260, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %262 = trunc <8 x i32> %261 to <8 x i16>
  %263 = getelementptr inbounds i16, i16* %224, i64 8
  %264 = bitcast i16* %263 to <8 x i16>*
  store <8 x i16> %262, <8 x i16>* %264, align 2, !alias.scope !407, !noalias !404
  %265 = getelementptr i16, i16* %223, i64 16
  %266 = bitcast i16* %265 to <8 x i16>*
  %267 = load <8 x i16>, <8 x i16>* %266, align 2, !alias.scope !404
  %268 = zext <8 x i16> %267 to <8 x i32>
  %269 = mul nuw nsw <8 x i32> %217, %268
  %270 = getelementptr inbounds i16, i16* %223, i64 80
  %271 = bitcast i16* %270 to <8 x i16>*
  %272 = load <8 x i16>, <8 x i16>* %271, align 2, !alias.scope !404
  %273 = zext <8 x i16> %272 to <8 x i32>
  %274 = mul nuw nsw <8 x i32> %219, %273
  %275 = add nuw nsw <8 x i32> %269, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %276 = add nuw nsw <8 x i32> %275, %274
  %277 = lshr <8 x i32> %276, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %278 = trunc <8 x i32> %277 to <8 x i16>
  %279 = getelementptr inbounds i16, i16* %224, i64 16
  %280 = bitcast i16* %279 to <8 x i16>*
  store <8 x i16> %278, <8 x i16>* %280, align 2, !alias.scope !407, !noalias !404
  %281 = getelementptr i16, i16* %223, i64 24
  %282 = bitcast i16* %281 to <8 x i16>*
  %283 = load <8 x i16>, <8 x i16>* %282, align 2, !alias.scope !404
  %284 = zext <8 x i16> %283 to <8 x i32>
  %285 = mul nuw nsw <8 x i32> %217, %284
  %286 = getelementptr inbounds i16, i16* %223, i64 88
  %287 = bitcast i16* %286 to <8 x i16>*
  %288 = load <8 x i16>, <8 x i16>* %287, align 2, !alias.scope !404
  %289 = zext <8 x i16> %288 to <8 x i32>
  %290 = mul nuw nsw <8 x i32> %219, %289
  %291 = add nuw nsw <8 x i32> %285, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %292 = add nuw nsw <8 x i32> %291, %290
  %293 = lshr <8 x i32> %292, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %294 = trunc <8 x i32> %293 to <8 x i16>
  %295 = getelementptr inbounds i16, i16* %224, i64 24
  %296 = bitcast i16* %295 to <8 x i16>*
  store <8 x i16> %294, <8 x i16>* %296, align 2, !alias.scope !407, !noalias !404
  %297 = getelementptr i16, i16* %223, i64 32
  %298 = bitcast i16* %297 to <8 x i16>*
  %299 = load <8 x i16>, <8 x i16>* %298, align 2, !alias.scope !404
  %300 = zext <8 x i16> %299 to <8 x i32>
  %301 = mul nuw nsw <8 x i32> %217, %300
  %302 = getelementptr inbounds i16, i16* %223, i64 96
  %303 = bitcast i16* %302 to <8 x i16>*
  %304 = load <8 x i16>, <8 x i16>* %303, align 2, !alias.scope !404
  %305 = zext <8 x i16> %304 to <8 x i32>
  %306 = mul nuw nsw <8 x i32> %219, %305
  %307 = add nuw nsw <8 x i32> %301, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %308 = add nuw nsw <8 x i32> %307, %306
  %309 = lshr <8 x i32> %308, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %310 = trunc <8 x i32> %309 to <8 x i16>
  %311 = getelementptr inbounds i16, i16* %224, i64 32
  %312 = bitcast i16* %311 to <8 x i16>*
  store <8 x i16> %310, <8 x i16>* %312, align 2, !alias.scope !407, !noalias !404
  %313 = getelementptr i16, i16* %223, i64 40
  %314 = bitcast i16* %313 to <8 x i16>*
  %315 = load <8 x i16>, <8 x i16>* %314, align 2, !alias.scope !404
  %316 = zext <8 x i16> %315 to <8 x i32>
  %317 = mul nuw nsw <8 x i32> %217, %316
  %318 = getelementptr inbounds i16, i16* %223, i64 104
  %319 = bitcast i16* %318 to <8 x i16>*
  %320 = load <8 x i16>, <8 x i16>* %319, align 2, !alias.scope !404
  %321 = zext <8 x i16> %320 to <8 x i32>
  %322 = mul nuw nsw <8 x i32> %219, %321
  %323 = add nuw nsw <8 x i32> %317, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %324 = add nuw nsw <8 x i32> %323, %322
  %325 = lshr <8 x i32> %324, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %326 = trunc <8 x i32> %325 to <8 x i16>
  %327 = getelementptr inbounds i16, i16* %224, i64 40
  %328 = bitcast i16* %327 to <8 x i16>*
  store <8 x i16> %326, <8 x i16>* %328, align 2, !alias.scope !407, !noalias !404
  %329 = getelementptr i16, i16* %223, i64 48
  %330 = bitcast i16* %329 to <8 x i16>*
  %331 = load <8 x i16>, <8 x i16>* %330, align 2, !alias.scope !404
  %332 = zext <8 x i16> %331 to <8 x i32>
  %333 = mul nuw nsw <8 x i32> %217, %332
  %334 = getelementptr inbounds i16, i16* %223, i64 112
  %335 = bitcast i16* %334 to <8 x i16>*
  %336 = load <8 x i16>, <8 x i16>* %335, align 2, !alias.scope !404
  %337 = zext <8 x i16> %336 to <8 x i32>
  %338 = mul nuw nsw <8 x i32> %219, %337
  %339 = add nuw nsw <8 x i32> %333, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %340 = add nuw nsw <8 x i32> %339, %338
  %341 = lshr <8 x i32> %340, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %342 = trunc <8 x i32> %341 to <8 x i16>
  %343 = getelementptr inbounds i16, i16* %224, i64 48
  %344 = bitcast i16* %343 to <8 x i16>*
  store <8 x i16> %342, <8 x i16>* %344, align 2, !alias.scope !407, !noalias !404
  %345 = getelementptr i16, i16* %223, i64 56
  %346 = bitcast i16* %345 to <8 x i16>*
  %347 = load <8 x i16>, <8 x i16>* %346, align 2, !alias.scope !404
  %348 = zext <8 x i16> %347 to <8 x i32>
  %349 = mul nuw nsw <8 x i32> %217, %348
  %350 = getelementptr inbounds i16, i16* %223, i64 120
  %351 = bitcast i16* %350 to <8 x i16>*
  %352 = load <8 x i16>, <8 x i16>* %351, align 2, !alias.scope !404
  %353 = zext <8 x i16> %352 to <8 x i32>
  %354 = mul nuw nsw <8 x i32> %219, %353
  %355 = add nuw nsw <8 x i32> %349, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %356 = add nuw nsw <8 x i32> %355, %354
  %357 = lshr <8 x i32> %356, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %358 = trunc <8 x i32> %357 to <8 x i16>
  %359 = getelementptr inbounds i16, i16* %224, i64 56
  %360 = bitcast i16* %359 to <8 x i16>*
  store <8 x i16> %358, <8 x i16>* %360, align 2, !alias.scope !407, !noalias !404
  br label %393

361:                                              ; preds = %220, %361
  %362 = phi i64 [ %391, %361 ], [ 0, %220 ]
  %363 = phi i16* [ %390, %361 ], [ %223, %220 ]
  %364 = load i16, i16* %363, align 2
  %365 = zext i16 %364 to i32
  %366 = mul nuw nsw i32 %213, %365
  %367 = getelementptr inbounds i16, i16* %363, i64 64
  %368 = load i16, i16* %367, align 2
  %369 = zext i16 %368 to i32
  %370 = mul nuw nsw i32 %215, %369
  %371 = add nuw nsw i32 %366, 64
  %372 = add nuw nsw i32 %371, %370
  %373 = lshr i32 %372, 7
  %374 = trunc i32 %373 to i16
  %375 = getelementptr inbounds i16, i16* %224, i64 %362
  store i16 %374, i16* %375, align 2
  %376 = getelementptr inbounds i16, i16* %363, i64 1
  %377 = or i64 %362, 1
  %378 = load i16, i16* %376, align 2
  %379 = zext i16 %378 to i32
  %380 = mul nuw nsw i32 %213, %379
  %381 = getelementptr inbounds i16, i16* %363, i64 65
  %382 = load i16, i16* %381, align 2
  %383 = zext i16 %382 to i32
  %384 = mul nuw nsw i32 %215, %383
  %385 = add nuw nsw i32 %380, 64
  %386 = add nuw nsw i32 %385, %384
  %387 = lshr i32 %386, 7
  %388 = trunc i32 %387 to i16
  %389 = getelementptr inbounds i16, i16* %224, i64 %377
  store i16 %388, i16* %389, align 2
  %390 = getelementptr inbounds i16, i16* %363, i64 2
  %391 = add nuw nsw i64 %362, 2
  %392 = icmp eq i64 %391, 64
  br i1 %392, label %393, label %361, !llvm.loop !409

393:                                              ; preds = %361, %233
  %394 = phi i16* [ %234, %233 ], [ %390, %361 ]
  %395 = getelementptr inbounds i16, i16* %224, i64 64
  %396 = add nuw nsw i32 %222, 1
  %397 = icmp eq i32 %396, 64
  %398 = add i64 %221, 1
  br i1 %397, label %399, label %220

399:                                              ; preds = %393
  %400 = ptrtoint i8* %4 to i64
  %401 = shl i64 %400, 1
  %402 = inttoptr i64 %401 to i16*
  %403 = sext i32 %5 to i64
  br label %404

404:                                              ; preds = %441, %399
  %405 = phi i64 [ 0, %399 ], [ %438, %441 ]
  %406 = phi i64 [ 0, %399 ], [ %435, %441 ]
  %407 = phi i32 [ 0, %399 ], [ %444, %441 ]
  %408 = phi i16* [ %402, %399 ], [ %443, %441 ]
  %409 = phi i16* [ %208, %399 ], [ %442, %441 ]
  br label %410

410:                                              ; preds = %410, %404
  %411 = phi i64 [ %405, %404 ], [ %438, %410 ]
  %412 = phi i64 [ %406, %404 ], [ %435, %410 ]
  %413 = phi i64 [ 0, %404 ], [ %439, %410 ]
  %414 = getelementptr inbounds i16, i16* %409, i64 %413
  %415 = load i16, i16* %414, align 2
  %416 = zext i16 %415 to i32
  %417 = getelementptr inbounds i16, i16* %408, i64 %413
  %418 = load i16, i16* %417, align 2
  %419 = zext i16 %418 to i32
  %420 = sub nsw i32 %416, %419
  %421 = sext i32 %420 to i64
  %422 = add nsw i64 %412, %421
  %423 = mul nsw i32 %420, %420
  %424 = zext i32 %423 to i64
  %425 = add i64 %411, %424
  %426 = or i64 %413, 1
  %427 = getelementptr inbounds i16, i16* %409, i64 %426
  %428 = load i16, i16* %427, align 2
  %429 = zext i16 %428 to i32
  %430 = getelementptr inbounds i16, i16* %408, i64 %426
  %431 = load i16, i16* %430, align 2
  %432 = zext i16 %431 to i32
  %433 = sub nsw i32 %429, %432
  %434 = sext i32 %433 to i64
  %435 = add nsw i64 %422, %434
  %436 = mul nsw i32 %433, %433
  %437 = zext i32 %436 to i64
  %438 = add i64 %425, %437
  %439 = add nuw nsw i64 %413, 2
  %440 = icmp eq i64 %439, 64
  br i1 %440, label %441, label %410

441:                                              ; preds = %410
  %442 = getelementptr inbounds i16, i16* %409, i64 64
  %443 = getelementptr inbounds i16, i16* %408, i64 %403
  %444 = add nuw nsw i32 %407, 1
  %445 = icmp eq i32 %444, 64
  br i1 %445, label %446, label %404

446:                                              ; preds = %441
  %447 = add i64 %438, 8
  %448 = lshr i64 %447, 4
  %449 = trunc i64 %448 to i32
  store i32 %449, i32* %6, align 4
  %450 = and i64 %448, 4294967295
  %451 = shl i64 %435, 30
  %452 = add i64 %451, 2147483648
  %453 = ashr i64 %452, 32
  %454 = mul nsw i64 %453, %453
  %455 = lshr i64 %454, 12
  %456 = sub nsw i64 %450, %455
  %457 = icmp sgt i64 %456, -1
  %458 = trunc i64 %456 to i32
  %459 = select i1 %457, i32 %458, i32 0
  call void @llvm.lifetime.end.p0i8(i64 8192, i8* nonnull %11) #4
  call void @llvm.lifetime.end.p0i8(i64 8320, i8* nonnull %10) #4
  ret i32 %459
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_highbd_12_sub_pixel_variance64x64_c(i8*, i32, i32, i32, i8*, i32, i32* nocapture) local_unnamed_addr #2 {
  %8 = alloca [4160 x i16], align 16
  %9 = alloca [4096 x i16], align 16
  %10 = bitcast [4160 x i16]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8320, i8* nonnull %10) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %10, i8 -86, i64 8320, i1 false)
  %11 = bitcast [4096 x i16]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8192, i8* nonnull %11) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %11, i8 -86, i64 8192, i1 false)
  %12 = getelementptr inbounds [4160 x i16], [4160 x i16]* %8, i64 0, i64 0
  %13 = sext i32 %2 to i64
  %14 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %13, i64 0
  %15 = ptrtoint i8* %0 to i64
  %16 = shl i64 %15, 1
  %17 = inttoptr i64 %16 to i16*
  %18 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %13, i64 1
  %19 = add i32 %1, -64
  %20 = zext i32 %19 to i64
  %21 = load i8, i8* %14, align 2
  %22 = zext i8 %21 to i32
  %23 = load i8, i8* %18, align 1
  %24 = zext i8 %23 to i32
  %25 = insertelement <8 x i32> undef, i32 %22, i32 0
  %26 = shufflevector <8 x i32> %25, <8 x i32> undef, <8 x i32> zeroinitializer
  %27 = insertelement <8 x i32> undef, i32 %24, i32 0
  %28 = shufflevector <8 x i32> %27, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %29

29:                                               ; preds = %200, %7
  %30 = phi i64 [ %206, %200 ], [ 0, %7 ]
  %31 = phi i16* [ %202, %200 ], [ %17, %7 ]
  %32 = phi i32 [ %204, %200 ], [ 0, %7 ]
  %33 = phi i16* [ %203, %200 ], [ %12, %7 ]
  %34 = shl nuw nsw i64 %30, 6
  %35 = add i64 %34, 64
  %36 = getelementptr [4160 x i16], [4160 x i16]* %8, i64 0, i64 %35
  %37 = getelementptr [4160 x i16], [4160 x i16]* %8, i64 0, i64 %34
  %38 = getelementptr i16, i16* %31, i64 65
  %39 = icmp ult i16* %37, %38
  %40 = icmp ult i16* %31, %36
  %41 = and i1 %39, %40
  br i1 %41, label %170, label %42

42:                                               ; preds = %29
  %43 = getelementptr i16, i16* %31, i64 64
  %44 = bitcast i16* %31 to <8 x i16>*
  %45 = load <8 x i16>, <8 x i16>* %44, align 2, !alias.scope !410
  %46 = zext <8 x i16> %45 to <8 x i32>
  %47 = mul nuw nsw <8 x i32> %26, %46
  %48 = getelementptr inbounds i16, i16* %31, i64 1
  %49 = bitcast i16* %48 to <8 x i16>*
  %50 = load <8 x i16>, <8 x i16>* %49, align 2, !alias.scope !410
  %51 = zext <8 x i16> %50 to <8 x i32>
  %52 = mul nuw nsw <8 x i32> %28, %51
  %53 = add nuw nsw <8 x i32> %47, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %54 = add nuw nsw <8 x i32> %53, %52
  %55 = lshr <8 x i32> %54, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %56 = trunc <8 x i32> %55 to <8 x i16>
  %57 = bitcast i16* %33 to <8 x i16>*
  store <8 x i16> %56, <8 x i16>* %57, align 2, !alias.scope !413, !noalias !410
  %58 = getelementptr i16, i16* %31, i64 8
  %59 = bitcast i16* %58 to <8 x i16>*
  %60 = load <8 x i16>, <8 x i16>* %59, align 2, !alias.scope !410
  %61 = zext <8 x i16> %60 to <8 x i32>
  %62 = mul nuw nsw <8 x i32> %26, %61
  %63 = getelementptr inbounds i16, i16* %31, i64 9
  %64 = bitcast i16* %63 to <8 x i16>*
  %65 = load <8 x i16>, <8 x i16>* %64, align 2, !alias.scope !410
  %66 = zext <8 x i16> %65 to <8 x i32>
  %67 = mul nuw nsw <8 x i32> %28, %66
  %68 = add nuw nsw <8 x i32> %62, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %69 = add nuw nsw <8 x i32> %68, %67
  %70 = lshr <8 x i32> %69, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %71 = trunc <8 x i32> %70 to <8 x i16>
  %72 = getelementptr inbounds i16, i16* %33, i64 8
  %73 = bitcast i16* %72 to <8 x i16>*
  store <8 x i16> %71, <8 x i16>* %73, align 2, !alias.scope !413, !noalias !410
  %74 = getelementptr i16, i16* %31, i64 16
  %75 = bitcast i16* %74 to <8 x i16>*
  %76 = load <8 x i16>, <8 x i16>* %75, align 2, !alias.scope !410
  %77 = zext <8 x i16> %76 to <8 x i32>
  %78 = mul nuw nsw <8 x i32> %26, %77
  %79 = getelementptr inbounds i16, i16* %31, i64 17
  %80 = bitcast i16* %79 to <8 x i16>*
  %81 = load <8 x i16>, <8 x i16>* %80, align 2, !alias.scope !410
  %82 = zext <8 x i16> %81 to <8 x i32>
  %83 = mul nuw nsw <8 x i32> %28, %82
  %84 = add nuw nsw <8 x i32> %78, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %85 = add nuw nsw <8 x i32> %84, %83
  %86 = lshr <8 x i32> %85, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %87 = trunc <8 x i32> %86 to <8 x i16>
  %88 = getelementptr inbounds i16, i16* %33, i64 16
  %89 = bitcast i16* %88 to <8 x i16>*
  store <8 x i16> %87, <8 x i16>* %89, align 2, !alias.scope !413, !noalias !410
  %90 = getelementptr i16, i16* %31, i64 24
  %91 = bitcast i16* %90 to <8 x i16>*
  %92 = load <8 x i16>, <8 x i16>* %91, align 2, !alias.scope !410
  %93 = zext <8 x i16> %92 to <8 x i32>
  %94 = mul nuw nsw <8 x i32> %26, %93
  %95 = getelementptr inbounds i16, i16* %31, i64 25
  %96 = bitcast i16* %95 to <8 x i16>*
  %97 = load <8 x i16>, <8 x i16>* %96, align 2, !alias.scope !410
  %98 = zext <8 x i16> %97 to <8 x i32>
  %99 = mul nuw nsw <8 x i32> %28, %98
  %100 = add nuw nsw <8 x i32> %94, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %101 = add nuw nsw <8 x i32> %100, %99
  %102 = lshr <8 x i32> %101, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %103 = trunc <8 x i32> %102 to <8 x i16>
  %104 = getelementptr inbounds i16, i16* %33, i64 24
  %105 = bitcast i16* %104 to <8 x i16>*
  store <8 x i16> %103, <8 x i16>* %105, align 2, !alias.scope !413, !noalias !410
  %106 = getelementptr i16, i16* %31, i64 32
  %107 = bitcast i16* %106 to <8 x i16>*
  %108 = load <8 x i16>, <8 x i16>* %107, align 2, !alias.scope !410
  %109 = zext <8 x i16> %108 to <8 x i32>
  %110 = mul nuw nsw <8 x i32> %26, %109
  %111 = getelementptr inbounds i16, i16* %31, i64 33
  %112 = bitcast i16* %111 to <8 x i16>*
  %113 = load <8 x i16>, <8 x i16>* %112, align 2, !alias.scope !410
  %114 = zext <8 x i16> %113 to <8 x i32>
  %115 = mul nuw nsw <8 x i32> %28, %114
  %116 = add nuw nsw <8 x i32> %110, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %117 = add nuw nsw <8 x i32> %116, %115
  %118 = lshr <8 x i32> %117, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %119 = trunc <8 x i32> %118 to <8 x i16>
  %120 = getelementptr inbounds i16, i16* %33, i64 32
  %121 = bitcast i16* %120 to <8 x i16>*
  store <8 x i16> %119, <8 x i16>* %121, align 2, !alias.scope !413, !noalias !410
  %122 = getelementptr i16, i16* %31, i64 40
  %123 = bitcast i16* %122 to <8 x i16>*
  %124 = load <8 x i16>, <8 x i16>* %123, align 2, !alias.scope !410
  %125 = zext <8 x i16> %124 to <8 x i32>
  %126 = mul nuw nsw <8 x i32> %26, %125
  %127 = getelementptr inbounds i16, i16* %31, i64 41
  %128 = bitcast i16* %127 to <8 x i16>*
  %129 = load <8 x i16>, <8 x i16>* %128, align 2, !alias.scope !410
  %130 = zext <8 x i16> %129 to <8 x i32>
  %131 = mul nuw nsw <8 x i32> %28, %130
  %132 = add nuw nsw <8 x i32> %126, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %133 = add nuw nsw <8 x i32> %132, %131
  %134 = lshr <8 x i32> %133, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %135 = trunc <8 x i32> %134 to <8 x i16>
  %136 = getelementptr inbounds i16, i16* %33, i64 40
  %137 = bitcast i16* %136 to <8 x i16>*
  store <8 x i16> %135, <8 x i16>* %137, align 2, !alias.scope !413, !noalias !410
  %138 = getelementptr i16, i16* %31, i64 48
  %139 = bitcast i16* %138 to <8 x i16>*
  %140 = load <8 x i16>, <8 x i16>* %139, align 2, !alias.scope !410
  %141 = zext <8 x i16> %140 to <8 x i32>
  %142 = mul nuw nsw <8 x i32> %26, %141
  %143 = getelementptr inbounds i16, i16* %31, i64 49
  %144 = bitcast i16* %143 to <8 x i16>*
  %145 = load <8 x i16>, <8 x i16>* %144, align 2, !alias.scope !410
  %146 = zext <8 x i16> %145 to <8 x i32>
  %147 = mul nuw nsw <8 x i32> %28, %146
  %148 = add nuw nsw <8 x i32> %142, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %149 = add nuw nsw <8 x i32> %148, %147
  %150 = lshr <8 x i32> %149, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %151 = trunc <8 x i32> %150 to <8 x i16>
  %152 = getelementptr inbounds i16, i16* %33, i64 48
  %153 = bitcast i16* %152 to <8 x i16>*
  store <8 x i16> %151, <8 x i16>* %153, align 2, !alias.scope !413, !noalias !410
  %154 = getelementptr i16, i16* %31, i64 56
  %155 = bitcast i16* %154 to <8 x i16>*
  %156 = load <8 x i16>, <8 x i16>* %155, align 2, !alias.scope !410
  %157 = zext <8 x i16> %156 to <8 x i32>
  %158 = mul nuw nsw <8 x i32> %26, %157
  %159 = getelementptr inbounds i16, i16* %31, i64 57
  %160 = bitcast i16* %159 to <8 x i16>*
  %161 = load <8 x i16>, <8 x i16>* %160, align 2, !alias.scope !410
  %162 = zext <8 x i16> %161 to <8 x i32>
  %163 = mul nuw nsw <8 x i32> %28, %162
  %164 = add nuw nsw <8 x i32> %158, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %165 = add nuw nsw <8 x i32> %164, %163
  %166 = lshr <8 x i32> %165, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %167 = trunc <8 x i32> %166 to <8 x i16>
  %168 = getelementptr inbounds i16, i16* %33, i64 56
  %169 = bitcast i16* %168 to <8 x i16>*
  store <8 x i16> %167, <8 x i16>* %169, align 2, !alias.scope !413, !noalias !410
  br label %200

170:                                              ; preds = %29, %170
  %171 = phi i64 [ %198, %170 ], [ 0, %29 ]
  %172 = phi i16* [ %189, %170 ], [ %31, %29 ]
  %173 = load i16, i16* %172, align 2
  %174 = zext i16 %173 to i32
  %175 = mul nuw nsw i32 %22, %174
  %176 = getelementptr inbounds i16, i16* %172, i64 1
  %177 = load i16, i16* %176, align 2
  %178 = zext i16 %177 to i32
  %179 = mul nuw nsw i32 %24, %178
  %180 = add nuw nsw i32 %175, 64
  %181 = add nuw nsw i32 %180, %179
  %182 = lshr i32 %181, 7
  %183 = trunc i32 %182 to i16
  %184 = getelementptr inbounds i16, i16* %33, i64 %171
  store i16 %183, i16* %184, align 2
  %185 = or i64 %171, 1
  %186 = load i16, i16* %176, align 2
  %187 = zext i16 %186 to i32
  %188 = mul nuw nsw i32 %22, %187
  %189 = getelementptr inbounds i16, i16* %172, i64 2
  %190 = load i16, i16* %189, align 2
  %191 = zext i16 %190 to i32
  %192 = mul nuw nsw i32 %24, %191
  %193 = add nuw nsw i32 %188, 64
  %194 = add nuw nsw i32 %193, %192
  %195 = lshr i32 %194, 7
  %196 = trunc i32 %195 to i16
  %197 = getelementptr inbounds i16, i16* %33, i64 %185
  store i16 %196, i16* %197, align 2
  %198 = add nuw nsw i64 %171, 2
  %199 = icmp eq i64 %198, 64
  br i1 %199, label %200, label %170, !llvm.loop !415

200:                                              ; preds = %170, %42
  %201 = phi i16* [ %43, %42 ], [ %189, %170 ]
  %202 = getelementptr inbounds i16, i16* %201, i64 %20
  %203 = getelementptr inbounds i16, i16* %33, i64 64
  %204 = add nuw nsw i32 %32, 1
  %205 = icmp eq i32 %204, 65
  %206 = add i64 %30, 1
  br i1 %205, label %207, label %29

207:                                              ; preds = %200
  %208 = getelementptr inbounds [4096 x i16], [4096 x i16]* %9, i64 0, i64 0
  %209 = sext i32 %3 to i64
  %210 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %209, i64 0
  %211 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %209, i64 1
  %212 = load i8, i8* %210, align 2
  %213 = zext i8 %212 to i32
  %214 = load i8, i8* %211, align 1
  %215 = zext i8 %214 to i32
  %216 = insertelement <8 x i32> undef, i32 %213, i32 0
  %217 = shufflevector <8 x i32> %216, <8 x i32> undef, <8 x i32> zeroinitializer
  %218 = insertelement <8 x i32> undef, i32 %215, i32 0
  %219 = shufflevector <8 x i32> %218, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %220

220:                                              ; preds = %393, %207
  %221 = phi i64 [ %398, %393 ], [ 0, %207 ]
  %222 = phi i32 [ %396, %393 ], [ 0, %207 ]
  %223 = phi i16* [ %394, %393 ], [ %12, %207 ]
  %224 = phi i16* [ %395, %393 ], [ %208, %207 ]
  %225 = shl nuw nsw i64 %221, 6
  %226 = add i64 %225, 64
  %227 = getelementptr [4096 x i16], [4096 x i16]* %9, i64 0, i64 %226
  %228 = getelementptr [4096 x i16], [4096 x i16]* %9, i64 0, i64 %225
  %229 = getelementptr i16, i16* %223, i64 128
  %230 = icmp ult i16* %228, %229
  %231 = icmp ult i16* %223, %227
  %232 = and i1 %230, %231
  br i1 %232, label %361, label %233

233:                                              ; preds = %220
  %234 = getelementptr i16, i16* %223, i64 64
  %235 = bitcast i16* %223 to <8 x i16>*
  %236 = load <8 x i16>, <8 x i16>* %235, align 2, !alias.scope !416
  %237 = zext <8 x i16> %236 to <8 x i32>
  %238 = mul nuw nsw <8 x i32> %217, %237
  %239 = getelementptr inbounds i16, i16* %223, i64 64
  %240 = bitcast i16* %239 to <8 x i16>*
  %241 = load <8 x i16>, <8 x i16>* %240, align 2, !alias.scope !416
  %242 = zext <8 x i16> %241 to <8 x i32>
  %243 = mul nuw nsw <8 x i32> %219, %242
  %244 = add nuw nsw <8 x i32> %238, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %245 = add nuw nsw <8 x i32> %244, %243
  %246 = lshr <8 x i32> %245, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %247 = trunc <8 x i32> %246 to <8 x i16>
  %248 = bitcast i16* %224 to <8 x i16>*
  store <8 x i16> %247, <8 x i16>* %248, align 2, !alias.scope !419, !noalias !416
  %249 = getelementptr i16, i16* %223, i64 8
  %250 = bitcast i16* %249 to <8 x i16>*
  %251 = load <8 x i16>, <8 x i16>* %250, align 2, !alias.scope !416
  %252 = zext <8 x i16> %251 to <8 x i32>
  %253 = mul nuw nsw <8 x i32> %217, %252
  %254 = getelementptr inbounds i16, i16* %223, i64 72
  %255 = bitcast i16* %254 to <8 x i16>*
  %256 = load <8 x i16>, <8 x i16>* %255, align 2, !alias.scope !416
  %257 = zext <8 x i16> %256 to <8 x i32>
  %258 = mul nuw nsw <8 x i32> %219, %257
  %259 = add nuw nsw <8 x i32> %253, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %260 = add nuw nsw <8 x i32> %259, %258
  %261 = lshr <8 x i32> %260, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %262 = trunc <8 x i32> %261 to <8 x i16>
  %263 = getelementptr inbounds i16, i16* %224, i64 8
  %264 = bitcast i16* %263 to <8 x i16>*
  store <8 x i16> %262, <8 x i16>* %264, align 2, !alias.scope !419, !noalias !416
  %265 = getelementptr i16, i16* %223, i64 16
  %266 = bitcast i16* %265 to <8 x i16>*
  %267 = load <8 x i16>, <8 x i16>* %266, align 2, !alias.scope !416
  %268 = zext <8 x i16> %267 to <8 x i32>
  %269 = mul nuw nsw <8 x i32> %217, %268
  %270 = getelementptr inbounds i16, i16* %223, i64 80
  %271 = bitcast i16* %270 to <8 x i16>*
  %272 = load <8 x i16>, <8 x i16>* %271, align 2, !alias.scope !416
  %273 = zext <8 x i16> %272 to <8 x i32>
  %274 = mul nuw nsw <8 x i32> %219, %273
  %275 = add nuw nsw <8 x i32> %269, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %276 = add nuw nsw <8 x i32> %275, %274
  %277 = lshr <8 x i32> %276, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %278 = trunc <8 x i32> %277 to <8 x i16>
  %279 = getelementptr inbounds i16, i16* %224, i64 16
  %280 = bitcast i16* %279 to <8 x i16>*
  store <8 x i16> %278, <8 x i16>* %280, align 2, !alias.scope !419, !noalias !416
  %281 = getelementptr i16, i16* %223, i64 24
  %282 = bitcast i16* %281 to <8 x i16>*
  %283 = load <8 x i16>, <8 x i16>* %282, align 2, !alias.scope !416
  %284 = zext <8 x i16> %283 to <8 x i32>
  %285 = mul nuw nsw <8 x i32> %217, %284
  %286 = getelementptr inbounds i16, i16* %223, i64 88
  %287 = bitcast i16* %286 to <8 x i16>*
  %288 = load <8 x i16>, <8 x i16>* %287, align 2, !alias.scope !416
  %289 = zext <8 x i16> %288 to <8 x i32>
  %290 = mul nuw nsw <8 x i32> %219, %289
  %291 = add nuw nsw <8 x i32> %285, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %292 = add nuw nsw <8 x i32> %291, %290
  %293 = lshr <8 x i32> %292, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %294 = trunc <8 x i32> %293 to <8 x i16>
  %295 = getelementptr inbounds i16, i16* %224, i64 24
  %296 = bitcast i16* %295 to <8 x i16>*
  store <8 x i16> %294, <8 x i16>* %296, align 2, !alias.scope !419, !noalias !416
  %297 = getelementptr i16, i16* %223, i64 32
  %298 = bitcast i16* %297 to <8 x i16>*
  %299 = load <8 x i16>, <8 x i16>* %298, align 2, !alias.scope !416
  %300 = zext <8 x i16> %299 to <8 x i32>
  %301 = mul nuw nsw <8 x i32> %217, %300
  %302 = getelementptr inbounds i16, i16* %223, i64 96
  %303 = bitcast i16* %302 to <8 x i16>*
  %304 = load <8 x i16>, <8 x i16>* %303, align 2, !alias.scope !416
  %305 = zext <8 x i16> %304 to <8 x i32>
  %306 = mul nuw nsw <8 x i32> %219, %305
  %307 = add nuw nsw <8 x i32> %301, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %308 = add nuw nsw <8 x i32> %307, %306
  %309 = lshr <8 x i32> %308, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %310 = trunc <8 x i32> %309 to <8 x i16>
  %311 = getelementptr inbounds i16, i16* %224, i64 32
  %312 = bitcast i16* %311 to <8 x i16>*
  store <8 x i16> %310, <8 x i16>* %312, align 2, !alias.scope !419, !noalias !416
  %313 = getelementptr i16, i16* %223, i64 40
  %314 = bitcast i16* %313 to <8 x i16>*
  %315 = load <8 x i16>, <8 x i16>* %314, align 2, !alias.scope !416
  %316 = zext <8 x i16> %315 to <8 x i32>
  %317 = mul nuw nsw <8 x i32> %217, %316
  %318 = getelementptr inbounds i16, i16* %223, i64 104
  %319 = bitcast i16* %318 to <8 x i16>*
  %320 = load <8 x i16>, <8 x i16>* %319, align 2, !alias.scope !416
  %321 = zext <8 x i16> %320 to <8 x i32>
  %322 = mul nuw nsw <8 x i32> %219, %321
  %323 = add nuw nsw <8 x i32> %317, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %324 = add nuw nsw <8 x i32> %323, %322
  %325 = lshr <8 x i32> %324, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %326 = trunc <8 x i32> %325 to <8 x i16>
  %327 = getelementptr inbounds i16, i16* %224, i64 40
  %328 = bitcast i16* %327 to <8 x i16>*
  store <8 x i16> %326, <8 x i16>* %328, align 2, !alias.scope !419, !noalias !416
  %329 = getelementptr i16, i16* %223, i64 48
  %330 = bitcast i16* %329 to <8 x i16>*
  %331 = load <8 x i16>, <8 x i16>* %330, align 2, !alias.scope !416
  %332 = zext <8 x i16> %331 to <8 x i32>
  %333 = mul nuw nsw <8 x i32> %217, %332
  %334 = getelementptr inbounds i16, i16* %223, i64 112
  %335 = bitcast i16* %334 to <8 x i16>*
  %336 = load <8 x i16>, <8 x i16>* %335, align 2, !alias.scope !416
  %337 = zext <8 x i16> %336 to <8 x i32>
  %338 = mul nuw nsw <8 x i32> %219, %337
  %339 = add nuw nsw <8 x i32> %333, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %340 = add nuw nsw <8 x i32> %339, %338
  %341 = lshr <8 x i32> %340, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %342 = trunc <8 x i32> %341 to <8 x i16>
  %343 = getelementptr inbounds i16, i16* %224, i64 48
  %344 = bitcast i16* %343 to <8 x i16>*
  store <8 x i16> %342, <8 x i16>* %344, align 2, !alias.scope !419, !noalias !416
  %345 = getelementptr i16, i16* %223, i64 56
  %346 = bitcast i16* %345 to <8 x i16>*
  %347 = load <8 x i16>, <8 x i16>* %346, align 2, !alias.scope !416
  %348 = zext <8 x i16> %347 to <8 x i32>
  %349 = mul nuw nsw <8 x i32> %217, %348
  %350 = getelementptr inbounds i16, i16* %223, i64 120
  %351 = bitcast i16* %350 to <8 x i16>*
  %352 = load <8 x i16>, <8 x i16>* %351, align 2, !alias.scope !416
  %353 = zext <8 x i16> %352 to <8 x i32>
  %354 = mul nuw nsw <8 x i32> %219, %353
  %355 = add nuw nsw <8 x i32> %349, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %356 = add nuw nsw <8 x i32> %355, %354
  %357 = lshr <8 x i32> %356, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %358 = trunc <8 x i32> %357 to <8 x i16>
  %359 = getelementptr inbounds i16, i16* %224, i64 56
  %360 = bitcast i16* %359 to <8 x i16>*
  store <8 x i16> %358, <8 x i16>* %360, align 2, !alias.scope !419, !noalias !416
  br label %393

361:                                              ; preds = %220, %361
  %362 = phi i64 [ %391, %361 ], [ 0, %220 ]
  %363 = phi i16* [ %390, %361 ], [ %223, %220 ]
  %364 = load i16, i16* %363, align 2
  %365 = zext i16 %364 to i32
  %366 = mul nuw nsw i32 %213, %365
  %367 = getelementptr inbounds i16, i16* %363, i64 64
  %368 = load i16, i16* %367, align 2
  %369 = zext i16 %368 to i32
  %370 = mul nuw nsw i32 %215, %369
  %371 = add nuw nsw i32 %366, 64
  %372 = add nuw nsw i32 %371, %370
  %373 = lshr i32 %372, 7
  %374 = trunc i32 %373 to i16
  %375 = getelementptr inbounds i16, i16* %224, i64 %362
  store i16 %374, i16* %375, align 2
  %376 = getelementptr inbounds i16, i16* %363, i64 1
  %377 = or i64 %362, 1
  %378 = load i16, i16* %376, align 2
  %379 = zext i16 %378 to i32
  %380 = mul nuw nsw i32 %213, %379
  %381 = getelementptr inbounds i16, i16* %363, i64 65
  %382 = load i16, i16* %381, align 2
  %383 = zext i16 %382 to i32
  %384 = mul nuw nsw i32 %215, %383
  %385 = add nuw nsw i32 %380, 64
  %386 = add nuw nsw i32 %385, %384
  %387 = lshr i32 %386, 7
  %388 = trunc i32 %387 to i16
  %389 = getelementptr inbounds i16, i16* %224, i64 %377
  store i16 %388, i16* %389, align 2
  %390 = getelementptr inbounds i16, i16* %363, i64 2
  %391 = add nuw nsw i64 %362, 2
  %392 = icmp eq i64 %391, 64
  br i1 %392, label %393, label %361, !llvm.loop !421

393:                                              ; preds = %361, %233
  %394 = phi i16* [ %234, %233 ], [ %390, %361 ]
  %395 = getelementptr inbounds i16, i16* %224, i64 64
  %396 = add nuw nsw i32 %222, 1
  %397 = icmp eq i32 %396, 64
  %398 = add i64 %221, 1
  br i1 %397, label %399, label %220

399:                                              ; preds = %393
  %400 = ptrtoint i8* %4 to i64
  %401 = shl i64 %400, 1
  %402 = inttoptr i64 %401 to i16*
  %403 = sext i32 %5 to i64
  br label %404

404:                                              ; preds = %441, %399
  %405 = phi i64 [ 0, %399 ], [ %438, %441 ]
  %406 = phi i64 [ 0, %399 ], [ %435, %441 ]
  %407 = phi i32 [ 0, %399 ], [ %444, %441 ]
  %408 = phi i16* [ %402, %399 ], [ %443, %441 ]
  %409 = phi i16* [ %208, %399 ], [ %442, %441 ]
  br label %410

410:                                              ; preds = %410, %404
  %411 = phi i64 [ %405, %404 ], [ %438, %410 ]
  %412 = phi i64 [ %406, %404 ], [ %435, %410 ]
  %413 = phi i64 [ 0, %404 ], [ %439, %410 ]
  %414 = getelementptr inbounds i16, i16* %409, i64 %413
  %415 = load i16, i16* %414, align 2
  %416 = zext i16 %415 to i32
  %417 = getelementptr inbounds i16, i16* %408, i64 %413
  %418 = load i16, i16* %417, align 2
  %419 = zext i16 %418 to i32
  %420 = sub nsw i32 %416, %419
  %421 = sext i32 %420 to i64
  %422 = add nsw i64 %412, %421
  %423 = mul nsw i32 %420, %420
  %424 = zext i32 %423 to i64
  %425 = add i64 %411, %424
  %426 = or i64 %413, 1
  %427 = getelementptr inbounds i16, i16* %409, i64 %426
  %428 = load i16, i16* %427, align 2
  %429 = zext i16 %428 to i32
  %430 = getelementptr inbounds i16, i16* %408, i64 %426
  %431 = load i16, i16* %430, align 2
  %432 = zext i16 %431 to i32
  %433 = sub nsw i32 %429, %432
  %434 = sext i32 %433 to i64
  %435 = add nsw i64 %422, %434
  %436 = mul nsw i32 %433, %433
  %437 = zext i32 %436 to i64
  %438 = add i64 %425, %437
  %439 = add nuw nsw i64 %413, 2
  %440 = icmp eq i64 %439, 64
  br i1 %440, label %441, label %410

441:                                              ; preds = %410
  %442 = getelementptr inbounds i16, i16* %409, i64 64
  %443 = getelementptr inbounds i16, i16* %408, i64 %403
  %444 = add nuw nsw i32 %407, 1
  %445 = icmp eq i32 %444, 64
  br i1 %445, label %446, label %404

446:                                              ; preds = %441
  %447 = add i64 %438, 128
  %448 = lshr i64 %447, 8
  %449 = trunc i64 %448 to i32
  store i32 %449, i32* %6, align 4
  %450 = and i64 %448, 4294967295
  %451 = shl i64 %435, 28
  %452 = add i64 %451, 2147483648
  %453 = ashr i64 %452, 32
  %454 = mul nsw i64 %453, %453
  %455 = lshr i64 %454, 12
  %456 = sub nsw i64 %450, %455
  %457 = icmp sgt i64 %456, -1
  %458 = trunc i64 %456 to i32
  %459 = select i1 %457, i32 %458, i32 0
  call void @llvm.lifetime.end.p0i8(i64 8192, i8* nonnull %11) #4
  call void @llvm.lifetime.end.p0i8(i64 8320, i8* nonnull %10) #4
  ret i32 %459
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_highbd_8_sub_pixel_avg_variance64x64_c(i8*, i32, i32, i32, i8*, i32, i32* nocapture, i8*) local_unnamed_addr #2 {
  %9 = alloca [4160 x i16], align 16
  %10 = alloca [4096 x i16], align 16
  %11 = alloca [4096 x i16], align 16
  %12 = bitcast [4160 x i16]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8320, i8* nonnull %12) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %12, i8 -86, i64 8320, i1 false)
  %13 = bitcast [4096 x i16]* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8192, i8* nonnull %13) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %13, i8 -86, i64 8192, i1 false)
  %14 = bitcast [4096 x i16]* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8192, i8* nonnull %14) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %14, i8 -86, i64 8192, i1 false)
  %15 = getelementptr inbounds [4160 x i16], [4160 x i16]* %9, i64 0, i64 0
  %16 = sext i32 %2 to i64
  %17 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %16, i64 0
  %18 = ptrtoint i8* %0 to i64
  %19 = shl i64 %18, 1
  %20 = inttoptr i64 %19 to i16*
  %21 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %16, i64 1
  %22 = add i32 %1, -64
  %23 = zext i32 %22 to i64
  %24 = load i8, i8* %17, align 2
  %25 = zext i8 %24 to i32
  %26 = load i8, i8* %21, align 1
  %27 = zext i8 %26 to i32
  %28 = insertelement <8 x i32> undef, i32 %25, i32 0
  %29 = shufflevector <8 x i32> %28, <8 x i32> undef, <8 x i32> zeroinitializer
  %30 = insertelement <8 x i32> undef, i32 %27, i32 0
  %31 = shufflevector <8 x i32> %30, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %32

32:                                               ; preds = %203, %8
  %33 = phi i64 [ %209, %203 ], [ 0, %8 ]
  %34 = phi i16* [ %205, %203 ], [ %20, %8 ]
  %35 = phi i32 [ %207, %203 ], [ 0, %8 ]
  %36 = phi i16* [ %206, %203 ], [ %15, %8 ]
  %37 = shl nuw nsw i64 %33, 6
  %38 = add i64 %37, 64
  %39 = getelementptr [4160 x i16], [4160 x i16]* %9, i64 0, i64 %38
  %40 = getelementptr [4160 x i16], [4160 x i16]* %9, i64 0, i64 %37
  %41 = getelementptr i16, i16* %34, i64 65
  %42 = icmp ult i16* %40, %41
  %43 = icmp ult i16* %34, %39
  %44 = and i1 %42, %43
  br i1 %44, label %173, label %45

45:                                               ; preds = %32
  %46 = getelementptr i16, i16* %34, i64 64
  %47 = bitcast i16* %34 to <8 x i16>*
  %48 = load <8 x i16>, <8 x i16>* %47, align 2, !alias.scope !422
  %49 = zext <8 x i16> %48 to <8 x i32>
  %50 = mul nuw nsw <8 x i32> %29, %49
  %51 = getelementptr inbounds i16, i16* %34, i64 1
  %52 = bitcast i16* %51 to <8 x i16>*
  %53 = load <8 x i16>, <8 x i16>* %52, align 2, !alias.scope !422
  %54 = zext <8 x i16> %53 to <8 x i32>
  %55 = mul nuw nsw <8 x i32> %31, %54
  %56 = add nuw nsw <8 x i32> %50, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %57 = add nuw nsw <8 x i32> %56, %55
  %58 = lshr <8 x i32> %57, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %59 = trunc <8 x i32> %58 to <8 x i16>
  %60 = bitcast i16* %36 to <8 x i16>*
  store <8 x i16> %59, <8 x i16>* %60, align 2, !alias.scope !425, !noalias !422
  %61 = getelementptr i16, i16* %34, i64 8
  %62 = bitcast i16* %61 to <8 x i16>*
  %63 = load <8 x i16>, <8 x i16>* %62, align 2, !alias.scope !422
  %64 = zext <8 x i16> %63 to <8 x i32>
  %65 = mul nuw nsw <8 x i32> %29, %64
  %66 = getelementptr inbounds i16, i16* %34, i64 9
  %67 = bitcast i16* %66 to <8 x i16>*
  %68 = load <8 x i16>, <8 x i16>* %67, align 2, !alias.scope !422
  %69 = zext <8 x i16> %68 to <8 x i32>
  %70 = mul nuw nsw <8 x i32> %31, %69
  %71 = add nuw nsw <8 x i32> %65, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %72 = add nuw nsw <8 x i32> %71, %70
  %73 = lshr <8 x i32> %72, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %74 = trunc <8 x i32> %73 to <8 x i16>
  %75 = getelementptr inbounds i16, i16* %36, i64 8
  %76 = bitcast i16* %75 to <8 x i16>*
  store <8 x i16> %74, <8 x i16>* %76, align 2, !alias.scope !425, !noalias !422
  %77 = getelementptr i16, i16* %34, i64 16
  %78 = bitcast i16* %77 to <8 x i16>*
  %79 = load <8 x i16>, <8 x i16>* %78, align 2, !alias.scope !422
  %80 = zext <8 x i16> %79 to <8 x i32>
  %81 = mul nuw nsw <8 x i32> %29, %80
  %82 = getelementptr inbounds i16, i16* %34, i64 17
  %83 = bitcast i16* %82 to <8 x i16>*
  %84 = load <8 x i16>, <8 x i16>* %83, align 2, !alias.scope !422
  %85 = zext <8 x i16> %84 to <8 x i32>
  %86 = mul nuw nsw <8 x i32> %31, %85
  %87 = add nuw nsw <8 x i32> %81, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %88 = add nuw nsw <8 x i32> %87, %86
  %89 = lshr <8 x i32> %88, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %90 = trunc <8 x i32> %89 to <8 x i16>
  %91 = getelementptr inbounds i16, i16* %36, i64 16
  %92 = bitcast i16* %91 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %92, align 2, !alias.scope !425, !noalias !422
  %93 = getelementptr i16, i16* %34, i64 24
  %94 = bitcast i16* %93 to <8 x i16>*
  %95 = load <8 x i16>, <8 x i16>* %94, align 2, !alias.scope !422
  %96 = zext <8 x i16> %95 to <8 x i32>
  %97 = mul nuw nsw <8 x i32> %29, %96
  %98 = getelementptr inbounds i16, i16* %34, i64 25
  %99 = bitcast i16* %98 to <8 x i16>*
  %100 = load <8 x i16>, <8 x i16>* %99, align 2, !alias.scope !422
  %101 = zext <8 x i16> %100 to <8 x i32>
  %102 = mul nuw nsw <8 x i32> %31, %101
  %103 = add nuw nsw <8 x i32> %97, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %104 = add nuw nsw <8 x i32> %103, %102
  %105 = lshr <8 x i32> %104, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %106 = trunc <8 x i32> %105 to <8 x i16>
  %107 = getelementptr inbounds i16, i16* %36, i64 24
  %108 = bitcast i16* %107 to <8 x i16>*
  store <8 x i16> %106, <8 x i16>* %108, align 2, !alias.scope !425, !noalias !422
  %109 = getelementptr i16, i16* %34, i64 32
  %110 = bitcast i16* %109 to <8 x i16>*
  %111 = load <8 x i16>, <8 x i16>* %110, align 2, !alias.scope !422
  %112 = zext <8 x i16> %111 to <8 x i32>
  %113 = mul nuw nsw <8 x i32> %29, %112
  %114 = getelementptr inbounds i16, i16* %34, i64 33
  %115 = bitcast i16* %114 to <8 x i16>*
  %116 = load <8 x i16>, <8 x i16>* %115, align 2, !alias.scope !422
  %117 = zext <8 x i16> %116 to <8 x i32>
  %118 = mul nuw nsw <8 x i32> %31, %117
  %119 = add nuw nsw <8 x i32> %113, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %120 = add nuw nsw <8 x i32> %119, %118
  %121 = lshr <8 x i32> %120, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %122 = trunc <8 x i32> %121 to <8 x i16>
  %123 = getelementptr inbounds i16, i16* %36, i64 32
  %124 = bitcast i16* %123 to <8 x i16>*
  store <8 x i16> %122, <8 x i16>* %124, align 2, !alias.scope !425, !noalias !422
  %125 = getelementptr i16, i16* %34, i64 40
  %126 = bitcast i16* %125 to <8 x i16>*
  %127 = load <8 x i16>, <8 x i16>* %126, align 2, !alias.scope !422
  %128 = zext <8 x i16> %127 to <8 x i32>
  %129 = mul nuw nsw <8 x i32> %29, %128
  %130 = getelementptr inbounds i16, i16* %34, i64 41
  %131 = bitcast i16* %130 to <8 x i16>*
  %132 = load <8 x i16>, <8 x i16>* %131, align 2, !alias.scope !422
  %133 = zext <8 x i16> %132 to <8 x i32>
  %134 = mul nuw nsw <8 x i32> %31, %133
  %135 = add nuw nsw <8 x i32> %129, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %136 = add nuw nsw <8 x i32> %135, %134
  %137 = lshr <8 x i32> %136, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %138 = trunc <8 x i32> %137 to <8 x i16>
  %139 = getelementptr inbounds i16, i16* %36, i64 40
  %140 = bitcast i16* %139 to <8 x i16>*
  store <8 x i16> %138, <8 x i16>* %140, align 2, !alias.scope !425, !noalias !422
  %141 = getelementptr i16, i16* %34, i64 48
  %142 = bitcast i16* %141 to <8 x i16>*
  %143 = load <8 x i16>, <8 x i16>* %142, align 2, !alias.scope !422
  %144 = zext <8 x i16> %143 to <8 x i32>
  %145 = mul nuw nsw <8 x i32> %29, %144
  %146 = getelementptr inbounds i16, i16* %34, i64 49
  %147 = bitcast i16* %146 to <8 x i16>*
  %148 = load <8 x i16>, <8 x i16>* %147, align 2, !alias.scope !422
  %149 = zext <8 x i16> %148 to <8 x i32>
  %150 = mul nuw nsw <8 x i32> %31, %149
  %151 = add nuw nsw <8 x i32> %145, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %152 = add nuw nsw <8 x i32> %151, %150
  %153 = lshr <8 x i32> %152, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %154 = trunc <8 x i32> %153 to <8 x i16>
  %155 = getelementptr inbounds i16, i16* %36, i64 48
  %156 = bitcast i16* %155 to <8 x i16>*
  store <8 x i16> %154, <8 x i16>* %156, align 2, !alias.scope !425, !noalias !422
  %157 = getelementptr i16, i16* %34, i64 56
  %158 = bitcast i16* %157 to <8 x i16>*
  %159 = load <8 x i16>, <8 x i16>* %158, align 2, !alias.scope !422
  %160 = zext <8 x i16> %159 to <8 x i32>
  %161 = mul nuw nsw <8 x i32> %29, %160
  %162 = getelementptr inbounds i16, i16* %34, i64 57
  %163 = bitcast i16* %162 to <8 x i16>*
  %164 = load <8 x i16>, <8 x i16>* %163, align 2, !alias.scope !422
  %165 = zext <8 x i16> %164 to <8 x i32>
  %166 = mul nuw nsw <8 x i32> %31, %165
  %167 = add nuw nsw <8 x i32> %161, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %168 = add nuw nsw <8 x i32> %167, %166
  %169 = lshr <8 x i32> %168, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %170 = trunc <8 x i32> %169 to <8 x i16>
  %171 = getelementptr inbounds i16, i16* %36, i64 56
  %172 = bitcast i16* %171 to <8 x i16>*
  store <8 x i16> %170, <8 x i16>* %172, align 2, !alias.scope !425, !noalias !422
  br label %203

173:                                              ; preds = %32, %173
  %174 = phi i64 [ %201, %173 ], [ 0, %32 ]
  %175 = phi i16* [ %192, %173 ], [ %34, %32 ]
  %176 = load i16, i16* %175, align 2
  %177 = zext i16 %176 to i32
  %178 = mul nuw nsw i32 %25, %177
  %179 = getelementptr inbounds i16, i16* %175, i64 1
  %180 = load i16, i16* %179, align 2
  %181 = zext i16 %180 to i32
  %182 = mul nuw nsw i32 %27, %181
  %183 = add nuw nsw i32 %178, 64
  %184 = add nuw nsw i32 %183, %182
  %185 = lshr i32 %184, 7
  %186 = trunc i32 %185 to i16
  %187 = getelementptr inbounds i16, i16* %36, i64 %174
  store i16 %186, i16* %187, align 2
  %188 = or i64 %174, 1
  %189 = load i16, i16* %179, align 2
  %190 = zext i16 %189 to i32
  %191 = mul nuw nsw i32 %25, %190
  %192 = getelementptr inbounds i16, i16* %175, i64 2
  %193 = load i16, i16* %192, align 2
  %194 = zext i16 %193 to i32
  %195 = mul nuw nsw i32 %27, %194
  %196 = add nuw nsw i32 %191, 64
  %197 = add nuw nsw i32 %196, %195
  %198 = lshr i32 %197, 7
  %199 = trunc i32 %198 to i16
  %200 = getelementptr inbounds i16, i16* %36, i64 %188
  store i16 %199, i16* %200, align 2
  %201 = add nuw nsw i64 %174, 2
  %202 = icmp eq i64 %201, 64
  br i1 %202, label %203, label %173, !llvm.loop !427

203:                                              ; preds = %173, %45
  %204 = phi i16* [ %46, %45 ], [ %192, %173 ]
  %205 = getelementptr inbounds i16, i16* %204, i64 %23
  %206 = getelementptr inbounds i16, i16* %36, i64 64
  %207 = add nuw nsw i32 %35, 1
  %208 = icmp eq i32 %207, 65
  %209 = add i64 %33, 1
  br i1 %208, label %210, label %32

210:                                              ; preds = %203
  %211 = getelementptr inbounds [4096 x i16], [4096 x i16]* %10, i64 0, i64 0
  %212 = sext i32 %3 to i64
  %213 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %212, i64 0
  %214 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %212, i64 1
  %215 = load i8, i8* %213, align 2
  %216 = zext i8 %215 to i32
  %217 = load i8, i8* %214, align 1
  %218 = zext i8 %217 to i32
  %219 = insertelement <8 x i32> undef, i32 %216, i32 0
  %220 = shufflevector <8 x i32> %219, <8 x i32> undef, <8 x i32> zeroinitializer
  %221 = insertelement <8 x i32> undef, i32 %218, i32 0
  %222 = shufflevector <8 x i32> %221, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %223

223:                                              ; preds = %396, %210
  %224 = phi i64 [ %401, %396 ], [ 0, %210 ]
  %225 = phi i32 [ %399, %396 ], [ 0, %210 ]
  %226 = phi i16* [ %397, %396 ], [ %15, %210 ]
  %227 = phi i16* [ %398, %396 ], [ %211, %210 ]
  %228 = shl nuw nsw i64 %224, 6
  %229 = add i64 %228, 64
  %230 = getelementptr [4096 x i16], [4096 x i16]* %10, i64 0, i64 %229
  %231 = getelementptr [4096 x i16], [4096 x i16]* %10, i64 0, i64 %228
  %232 = getelementptr i16, i16* %226, i64 128
  %233 = icmp ult i16* %231, %232
  %234 = icmp ult i16* %226, %230
  %235 = and i1 %233, %234
  br i1 %235, label %364, label %236

236:                                              ; preds = %223
  %237 = getelementptr i16, i16* %226, i64 64
  %238 = bitcast i16* %226 to <8 x i16>*
  %239 = load <8 x i16>, <8 x i16>* %238, align 2, !alias.scope !428
  %240 = zext <8 x i16> %239 to <8 x i32>
  %241 = mul nuw nsw <8 x i32> %220, %240
  %242 = getelementptr inbounds i16, i16* %226, i64 64
  %243 = bitcast i16* %242 to <8 x i16>*
  %244 = load <8 x i16>, <8 x i16>* %243, align 2, !alias.scope !428
  %245 = zext <8 x i16> %244 to <8 x i32>
  %246 = mul nuw nsw <8 x i32> %222, %245
  %247 = add nuw nsw <8 x i32> %241, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %248 = add nuw nsw <8 x i32> %247, %246
  %249 = lshr <8 x i32> %248, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %250 = trunc <8 x i32> %249 to <8 x i16>
  %251 = bitcast i16* %227 to <8 x i16>*
  store <8 x i16> %250, <8 x i16>* %251, align 2, !alias.scope !431, !noalias !428
  %252 = getelementptr i16, i16* %226, i64 8
  %253 = bitcast i16* %252 to <8 x i16>*
  %254 = load <8 x i16>, <8 x i16>* %253, align 2, !alias.scope !428
  %255 = zext <8 x i16> %254 to <8 x i32>
  %256 = mul nuw nsw <8 x i32> %220, %255
  %257 = getelementptr inbounds i16, i16* %226, i64 72
  %258 = bitcast i16* %257 to <8 x i16>*
  %259 = load <8 x i16>, <8 x i16>* %258, align 2, !alias.scope !428
  %260 = zext <8 x i16> %259 to <8 x i32>
  %261 = mul nuw nsw <8 x i32> %222, %260
  %262 = add nuw nsw <8 x i32> %256, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %263 = add nuw nsw <8 x i32> %262, %261
  %264 = lshr <8 x i32> %263, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %265 = trunc <8 x i32> %264 to <8 x i16>
  %266 = getelementptr inbounds i16, i16* %227, i64 8
  %267 = bitcast i16* %266 to <8 x i16>*
  store <8 x i16> %265, <8 x i16>* %267, align 2, !alias.scope !431, !noalias !428
  %268 = getelementptr i16, i16* %226, i64 16
  %269 = bitcast i16* %268 to <8 x i16>*
  %270 = load <8 x i16>, <8 x i16>* %269, align 2, !alias.scope !428
  %271 = zext <8 x i16> %270 to <8 x i32>
  %272 = mul nuw nsw <8 x i32> %220, %271
  %273 = getelementptr inbounds i16, i16* %226, i64 80
  %274 = bitcast i16* %273 to <8 x i16>*
  %275 = load <8 x i16>, <8 x i16>* %274, align 2, !alias.scope !428
  %276 = zext <8 x i16> %275 to <8 x i32>
  %277 = mul nuw nsw <8 x i32> %222, %276
  %278 = add nuw nsw <8 x i32> %272, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %279 = add nuw nsw <8 x i32> %278, %277
  %280 = lshr <8 x i32> %279, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %281 = trunc <8 x i32> %280 to <8 x i16>
  %282 = getelementptr inbounds i16, i16* %227, i64 16
  %283 = bitcast i16* %282 to <8 x i16>*
  store <8 x i16> %281, <8 x i16>* %283, align 2, !alias.scope !431, !noalias !428
  %284 = getelementptr i16, i16* %226, i64 24
  %285 = bitcast i16* %284 to <8 x i16>*
  %286 = load <8 x i16>, <8 x i16>* %285, align 2, !alias.scope !428
  %287 = zext <8 x i16> %286 to <8 x i32>
  %288 = mul nuw nsw <8 x i32> %220, %287
  %289 = getelementptr inbounds i16, i16* %226, i64 88
  %290 = bitcast i16* %289 to <8 x i16>*
  %291 = load <8 x i16>, <8 x i16>* %290, align 2, !alias.scope !428
  %292 = zext <8 x i16> %291 to <8 x i32>
  %293 = mul nuw nsw <8 x i32> %222, %292
  %294 = add nuw nsw <8 x i32> %288, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %295 = add nuw nsw <8 x i32> %294, %293
  %296 = lshr <8 x i32> %295, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %297 = trunc <8 x i32> %296 to <8 x i16>
  %298 = getelementptr inbounds i16, i16* %227, i64 24
  %299 = bitcast i16* %298 to <8 x i16>*
  store <8 x i16> %297, <8 x i16>* %299, align 2, !alias.scope !431, !noalias !428
  %300 = getelementptr i16, i16* %226, i64 32
  %301 = bitcast i16* %300 to <8 x i16>*
  %302 = load <8 x i16>, <8 x i16>* %301, align 2, !alias.scope !428
  %303 = zext <8 x i16> %302 to <8 x i32>
  %304 = mul nuw nsw <8 x i32> %220, %303
  %305 = getelementptr inbounds i16, i16* %226, i64 96
  %306 = bitcast i16* %305 to <8 x i16>*
  %307 = load <8 x i16>, <8 x i16>* %306, align 2, !alias.scope !428
  %308 = zext <8 x i16> %307 to <8 x i32>
  %309 = mul nuw nsw <8 x i32> %222, %308
  %310 = add nuw nsw <8 x i32> %304, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %311 = add nuw nsw <8 x i32> %310, %309
  %312 = lshr <8 x i32> %311, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %313 = trunc <8 x i32> %312 to <8 x i16>
  %314 = getelementptr inbounds i16, i16* %227, i64 32
  %315 = bitcast i16* %314 to <8 x i16>*
  store <8 x i16> %313, <8 x i16>* %315, align 2, !alias.scope !431, !noalias !428
  %316 = getelementptr i16, i16* %226, i64 40
  %317 = bitcast i16* %316 to <8 x i16>*
  %318 = load <8 x i16>, <8 x i16>* %317, align 2, !alias.scope !428
  %319 = zext <8 x i16> %318 to <8 x i32>
  %320 = mul nuw nsw <8 x i32> %220, %319
  %321 = getelementptr inbounds i16, i16* %226, i64 104
  %322 = bitcast i16* %321 to <8 x i16>*
  %323 = load <8 x i16>, <8 x i16>* %322, align 2, !alias.scope !428
  %324 = zext <8 x i16> %323 to <8 x i32>
  %325 = mul nuw nsw <8 x i32> %222, %324
  %326 = add nuw nsw <8 x i32> %320, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %327 = add nuw nsw <8 x i32> %326, %325
  %328 = lshr <8 x i32> %327, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %329 = trunc <8 x i32> %328 to <8 x i16>
  %330 = getelementptr inbounds i16, i16* %227, i64 40
  %331 = bitcast i16* %330 to <8 x i16>*
  store <8 x i16> %329, <8 x i16>* %331, align 2, !alias.scope !431, !noalias !428
  %332 = getelementptr i16, i16* %226, i64 48
  %333 = bitcast i16* %332 to <8 x i16>*
  %334 = load <8 x i16>, <8 x i16>* %333, align 2, !alias.scope !428
  %335 = zext <8 x i16> %334 to <8 x i32>
  %336 = mul nuw nsw <8 x i32> %220, %335
  %337 = getelementptr inbounds i16, i16* %226, i64 112
  %338 = bitcast i16* %337 to <8 x i16>*
  %339 = load <8 x i16>, <8 x i16>* %338, align 2, !alias.scope !428
  %340 = zext <8 x i16> %339 to <8 x i32>
  %341 = mul nuw nsw <8 x i32> %222, %340
  %342 = add nuw nsw <8 x i32> %336, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %343 = add nuw nsw <8 x i32> %342, %341
  %344 = lshr <8 x i32> %343, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %345 = trunc <8 x i32> %344 to <8 x i16>
  %346 = getelementptr inbounds i16, i16* %227, i64 48
  %347 = bitcast i16* %346 to <8 x i16>*
  store <8 x i16> %345, <8 x i16>* %347, align 2, !alias.scope !431, !noalias !428
  %348 = getelementptr i16, i16* %226, i64 56
  %349 = bitcast i16* %348 to <8 x i16>*
  %350 = load <8 x i16>, <8 x i16>* %349, align 2, !alias.scope !428
  %351 = zext <8 x i16> %350 to <8 x i32>
  %352 = mul nuw nsw <8 x i32> %220, %351
  %353 = getelementptr inbounds i16, i16* %226, i64 120
  %354 = bitcast i16* %353 to <8 x i16>*
  %355 = load <8 x i16>, <8 x i16>* %354, align 2, !alias.scope !428
  %356 = zext <8 x i16> %355 to <8 x i32>
  %357 = mul nuw nsw <8 x i32> %222, %356
  %358 = add nuw nsw <8 x i32> %352, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %359 = add nuw nsw <8 x i32> %358, %357
  %360 = lshr <8 x i32> %359, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %361 = trunc <8 x i32> %360 to <8 x i16>
  %362 = getelementptr inbounds i16, i16* %227, i64 56
  %363 = bitcast i16* %362 to <8 x i16>*
  store <8 x i16> %361, <8 x i16>* %363, align 2, !alias.scope !431, !noalias !428
  br label %396

364:                                              ; preds = %223, %364
  %365 = phi i64 [ %394, %364 ], [ 0, %223 ]
  %366 = phi i16* [ %393, %364 ], [ %226, %223 ]
  %367 = load i16, i16* %366, align 2
  %368 = zext i16 %367 to i32
  %369 = mul nuw nsw i32 %216, %368
  %370 = getelementptr inbounds i16, i16* %366, i64 64
  %371 = load i16, i16* %370, align 2
  %372 = zext i16 %371 to i32
  %373 = mul nuw nsw i32 %218, %372
  %374 = add nuw nsw i32 %369, 64
  %375 = add nuw nsw i32 %374, %373
  %376 = lshr i32 %375, 7
  %377 = trunc i32 %376 to i16
  %378 = getelementptr inbounds i16, i16* %227, i64 %365
  store i16 %377, i16* %378, align 2
  %379 = getelementptr inbounds i16, i16* %366, i64 1
  %380 = or i64 %365, 1
  %381 = load i16, i16* %379, align 2
  %382 = zext i16 %381 to i32
  %383 = mul nuw nsw i32 %216, %382
  %384 = getelementptr inbounds i16, i16* %366, i64 65
  %385 = load i16, i16* %384, align 2
  %386 = zext i16 %385 to i32
  %387 = mul nuw nsw i32 %218, %386
  %388 = add nuw nsw i32 %383, 64
  %389 = add nuw nsw i32 %388, %387
  %390 = lshr i32 %389, 7
  %391 = trunc i32 %390 to i16
  %392 = getelementptr inbounds i16, i16* %227, i64 %380
  store i16 %391, i16* %392, align 2
  %393 = getelementptr inbounds i16, i16* %366, i64 2
  %394 = add nuw nsw i64 %365, 2
  %395 = icmp eq i64 %394, 64
  br i1 %395, label %396, label %364, !llvm.loop !433

396:                                              ; preds = %364, %236
  %397 = phi i16* [ %237, %236 ], [ %393, %364 ]
  %398 = getelementptr inbounds i16, i16* %227, i64 64
  %399 = add nuw nsw i32 %225, 1
  %400 = icmp eq i32 %399, 64
  %401 = add i64 %224, 1
  br i1 %400, label %402, label %223

402:                                              ; preds = %396
  %403 = getelementptr inbounds [4096 x i16], [4096 x i16]* %11, i64 0, i64 0
  %404 = ptrtoint i8* %7 to i64
  %405 = shl i64 %404, 1
  %406 = inttoptr i64 %405 to i16*
  br label %407

407:                                              ; preds = %565, %402
  %408 = phi i64 [ %571, %565 ], [ 0, %402 ]
  %409 = phi i16* [ %566, %565 ], [ %403, %402 ]
  %410 = phi i32 [ %569, %565 ], [ 0, %402 ]
  %411 = phi i16* [ %567, %565 ], [ %406, %402 ]
  %412 = phi i16* [ %568, %565 ], [ %211, %402 ]
  %413 = shl nuw nsw i64 %408, 6
  %414 = getelementptr [4096 x i16], [4096 x i16]* %11, i64 0, i64 %413
  %415 = add i64 %413, 64
  %416 = getelementptr [4096 x i16], [4096 x i16]* %11, i64 0, i64 %415
  %417 = getelementptr [4096 x i16], [4096 x i16]* %10, i64 0, i64 %415
  %418 = getelementptr [4096 x i16], [4096 x i16]* %10, i64 0, i64 %413
  %419 = getelementptr i16, i16* %406, i64 %415
  %420 = getelementptr i16, i16* %406, i64 %413
  %421 = icmp ult i16* %414, %419
  %422 = icmp ult i16* %420, %416
  %423 = and i1 %421, %422
  %424 = icmp ult i16* %414, %417
  %425 = icmp ult i16* %418, %416
  %426 = and i1 %424, %425
  %427 = or i1 %423, %426
  br i1 %427, label %538, label %428

428:                                              ; preds = %407
  %429 = bitcast i16* %411 to <8 x i16>*
  %430 = load <8 x i16>, <8 x i16>* %429, align 2, !alias.scope !434
  %431 = zext <8 x i16> %430 to <8 x i32>
  %432 = bitcast i16* %412 to <8 x i16>*
  %433 = load <8 x i16>, <8 x i16>* %432, align 2, !alias.scope !437
  %434 = zext <8 x i16> %433 to <8 x i32>
  %435 = add nuw nsw <8 x i32> %431, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %436 = add nuw nsw <8 x i32> %435, %434
  %437 = lshr <8 x i32> %436, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %438 = trunc <8 x i32> %437 to <8 x i16>
  %439 = bitcast i16* %409 to <8 x i16>*
  store <8 x i16> %438, <8 x i16>* %439, align 2, !alias.scope !439, !noalias !441
  %440 = getelementptr inbounds i16, i16* %411, i64 8
  %441 = bitcast i16* %440 to <8 x i16>*
  %442 = load <8 x i16>, <8 x i16>* %441, align 2, !alias.scope !434
  %443 = zext <8 x i16> %442 to <8 x i32>
  %444 = getelementptr inbounds i16, i16* %412, i64 8
  %445 = bitcast i16* %444 to <8 x i16>*
  %446 = load <8 x i16>, <8 x i16>* %445, align 2, !alias.scope !437
  %447 = zext <8 x i16> %446 to <8 x i32>
  %448 = add nuw nsw <8 x i32> %443, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %449 = add nuw nsw <8 x i32> %448, %447
  %450 = lshr <8 x i32> %449, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %451 = trunc <8 x i32> %450 to <8 x i16>
  %452 = getelementptr inbounds i16, i16* %409, i64 8
  %453 = bitcast i16* %452 to <8 x i16>*
  store <8 x i16> %451, <8 x i16>* %453, align 2, !alias.scope !439, !noalias !441
  %454 = getelementptr inbounds i16, i16* %411, i64 16
  %455 = bitcast i16* %454 to <8 x i16>*
  %456 = load <8 x i16>, <8 x i16>* %455, align 2, !alias.scope !434
  %457 = zext <8 x i16> %456 to <8 x i32>
  %458 = getelementptr inbounds i16, i16* %412, i64 16
  %459 = bitcast i16* %458 to <8 x i16>*
  %460 = load <8 x i16>, <8 x i16>* %459, align 2, !alias.scope !437
  %461 = zext <8 x i16> %460 to <8 x i32>
  %462 = add nuw nsw <8 x i32> %457, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %463 = add nuw nsw <8 x i32> %462, %461
  %464 = lshr <8 x i32> %463, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %465 = trunc <8 x i32> %464 to <8 x i16>
  %466 = getelementptr inbounds i16, i16* %409, i64 16
  %467 = bitcast i16* %466 to <8 x i16>*
  store <8 x i16> %465, <8 x i16>* %467, align 2, !alias.scope !439, !noalias !441
  %468 = getelementptr inbounds i16, i16* %411, i64 24
  %469 = bitcast i16* %468 to <8 x i16>*
  %470 = load <8 x i16>, <8 x i16>* %469, align 2, !alias.scope !434
  %471 = zext <8 x i16> %470 to <8 x i32>
  %472 = getelementptr inbounds i16, i16* %412, i64 24
  %473 = bitcast i16* %472 to <8 x i16>*
  %474 = load <8 x i16>, <8 x i16>* %473, align 2, !alias.scope !437
  %475 = zext <8 x i16> %474 to <8 x i32>
  %476 = add nuw nsw <8 x i32> %471, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %477 = add nuw nsw <8 x i32> %476, %475
  %478 = lshr <8 x i32> %477, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %479 = trunc <8 x i32> %478 to <8 x i16>
  %480 = getelementptr inbounds i16, i16* %409, i64 24
  %481 = bitcast i16* %480 to <8 x i16>*
  store <8 x i16> %479, <8 x i16>* %481, align 2, !alias.scope !439, !noalias !441
  %482 = getelementptr inbounds i16, i16* %411, i64 32
  %483 = bitcast i16* %482 to <8 x i16>*
  %484 = load <8 x i16>, <8 x i16>* %483, align 2, !alias.scope !434
  %485 = zext <8 x i16> %484 to <8 x i32>
  %486 = getelementptr inbounds i16, i16* %412, i64 32
  %487 = bitcast i16* %486 to <8 x i16>*
  %488 = load <8 x i16>, <8 x i16>* %487, align 2, !alias.scope !437
  %489 = zext <8 x i16> %488 to <8 x i32>
  %490 = add nuw nsw <8 x i32> %485, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %491 = add nuw nsw <8 x i32> %490, %489
  %492 = lshr <8 x i32> %491, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %493 = trunc <8 x i32> %492 to <8 x i16>
  %494 = getelementptr inbounds i16, i16* %409, i64 32
  %495 = bitcast i16* %494 to <8 x i16>*
  store <8 x i16> %493, <8 x i16>* %495, align 2, !alias.scope !439, !noalias !441
  %496 = getelementptr inbounds i16, i16* %411, i64 40
  %497 = bitcast i16* %496 to <8 x i16>*
  %498 = load <8 x i16>, <8 x i16>* %497, align 2, !alias.scope !434
  %499 = zext <8 x i16> %498 to <8 x i32>
  %500 = getelementptr inbounds i16, i16* %412, i64 40
  %501 = bitcast i16* %500 to <8 x i16>*
  %502 = load <8 x i16>, <8 x i16>* %501, align 2, !alias.scope !437
  %503 = zext <8 x i16> %502 to <8 x i32>
  %504 = add nuw nsw <8 x i32> %499, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %505 = add nuw nsw <8 x i32> %504, %503
  %506 = lshr <8 x i32> %505, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %507 = trunc <8 x i32> %506 to <8 x i16>
  %508 = getelementptr inbounds i16, i16* %409, i64 40
  %509 = bitcast i16* %508 to <8 x i16>*
  store <8 x i16> %507, <8 x i16>* %509, align 2, !alias.scope !439, !noalias !441
  %510 = getelementptr inbounds i16, i16* %411, i64 48
  %511 = bitcast i16* %510 to <8 x i16>*
  %512 = load <8 x i16>, <8 x i16>* %511, align 2, !alias.scope !434
  %513 = zext <8 x i16> %512 to <8 x i32>
  %514 = getelementptr inbounds i16, i16* %412, i64 48
  %515 = bitcast i16* %514 to <8 x i16>*
  %516 = load <8 x i16>, <8 x i16>* %515, align 2, !alias.scope !437
  %517 = zext <8 x i16> %516 to <8 x i32>
  %518 = add nuw nsw <8 x i32> %513, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %519 = add nuw nsw <8 x i32> %518, %517
  %520 = lshr <8 x i32> %519, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %521 = trunc <8 x i32> %520 to <8 x i16>
  %522 = getelementptr inbounds i16, i16* %409, i64 48
  %523 = bitcast i16* %522 to <8 x i16>*
  store <8 x i16> %521, <8 x i16>* %523, align 2, !alias.scope !439, !noalias !441
  %524 = getelementptr inbounds i16, i16* %411, i64 56
  %525 = bitcast i16* %524 to <8 x i16>*
  %526 = load <8 x i16>, <8 x i16>* %525, align 2, !alias.scope !434
  %527 = zext <8 x i16> %526 to <8 x i32>
  %528 = getelementptr inbounds i16, i16* %412, i64 56
  %529 = bitcast i16* %528 to <8 x i16>*
  %530 = load <8 x i16>, <8 x i16>* %529, align 2, !alias.scope !437
  %531 = zext <8 x i16> %530 to <8 x i32>
  %532 = add nuw nsw <8 x i32> %527, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %533 = add nuw nsw <8 x i32> %532, %531
  %534 = lshr <8 x i32> %533, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %535 = trunc <8 x i32> %534 to <8 x i16>
  %536 = getelementptr inbounds i16, i16* %409, i64 56
  %537 = bitcast i16* %536 to <8 x i16>*
  store <8 x i16> %535, <8 x i16>* %537, align 2, !alias.scope !439, !noalias !441
  br label %565

538:                                              ; preds = %407, %538
  %539 = phi i64 [ %563, %538 ], [ 0, %407 ]
  %540 = getelementptr inbounds i16, i16* %411, i64 %539
  %541 = load i16, i16* %540, align 2
  %542 = zext i16 %541 to i32
  %543 = getelementptr inbounds i16, i16* %412, i64 %539
  %544 = load i16, i16* %543, align 2
  %545 = zext i16 %544 to i32
  %546 = add nuw nsw i32 %542, 1
  %547 = add nuw nsw i32 %546, %545
  %548 = lshr i32 %547, 1
  %549 = trunc i32 %548 to i16
  %550 = getelementptr inbounds i16, i16* %409, i64 %539
  store i16 %549, i16* %550, align 2
  %551 = or i64 %539, 1
  %552 = getelementptr inbounds i16, i16* %411, i64 %551
  %553 = load i16, i16* %552, align 2
  %554 = zext i16 %553 to i32
  %555 = getelementptr inbounds i16, i16* %412, i64 %551
  %556 = load i16, i16* %555, align 2
  %557 = zext i16 %556 to i32
  %558 = add nuw nsw i32 %554, 1
  %559 = add nuw nsw i32 %558, %557
  %560 = lshr i32 %559, 1
  %561 = trunc i32 %560 to i16
  %562 = getelementptr inbounds i16, i16* %409, i64 %551
  store i16 %561, i16* %562, align 2
  %563 = add nuw nsw i64 %539, 2
  %564 = icmp eq i64 %563, 64
  br i1 %564, label %565, label %538, !llvm.loop !442

565:                                              ; preds = %538, %428
  %566 = getelementptr inbounds i16, i16* %409, i64 64
  %567 = getelementptr inbounds i16, i16* %411, i64 64
  %568 = getelementptr inbounds i16, i16* %412, i64 64
  %569 = add nuw nsw i32 %410, 1
  %570 = icmp eq i32 %569, 64
  %571 = add i64 %408, 1
  br i1 %570, label %572, label %407

572:                                              ; preds = %565
  %573 = ptrtoint i8* %4 to i64
  %574 = shl i64 %573, 1
  %575 = inttoptr i64 %574 to i16*
  %576 = sext i32 %5 to i64
  br label %577

577:                                              ; preds = %614, %572
  %578 = phi i64 [ 0, %572 ], [ %611, %614 ]
  %579 = phi i64 [ 0, %572 ], [ %608, %614 ]
  %580 = phi i32 [ 0, %572 ], [ %617, %614 ]
  %581 = phi i16* [ %575, %572 ], [ %616, %614 ]
  %582 = phi i16* [ %403, %572 ], [ %615, %614 ]
  br label %583

583:                                              ; preds = %583, %577
  %584 = phi i64 [ %578, %577 ], [ %611, %583 ]
  %585 = phi i64 [ %579, %577 ], [ %608, %583 ]
  %586 = phi i64 [ 0, %577 ], [ %612, %583 ]
  %587 = getelementptr inbounds i16, i16* %582, i64 %586
  %588 = load i16, i16* %587, align 2
  %589 = zext i16 %588 to i32
  %590 = getelementptr inbounds i16, i16* %581, i64 %586
  %591 = load i16, i16* %590, align 2
  %592 = zext i16 %591 to i32
  %593 = sub nsw i32 %589, %592
  %594 = sext i32 %593 to i64
  %595 = add nsw i64 %585, %594
  %596 = mul nsw i32 %593, %593
  %597 = zext i32 %596 to i64
  %598 = add i64 %584, %597
  %599 = or i64 %586, 1
  %600 = getelementptr inbounds i16, i16* %582, i64 %599
  %601 = load i16, i16* %600, align 2
  %602 = zext i16 %601 to i32
  %603 = getelementptr inbounds i16, i16* %581, i64 %599
  %604 = load i16, i16* %603, align 2
  %605 = zext i16 %604 to i32
  %606 = sub nsw i32 %602, %605
  %607 = sext i32 %606 to i64
  %608 = add nsw i64 %595, %607
  %609 = mul nsw i32 %606, %606
  %610 = zext i32 %609 to i64
  %611 = add i64 %598, %610
  %612 = add nuw nsw i64 %586, 2
  %613 = icmp eq i64 %612, 64
  br i1 %613, label %614, label %583

614:                                              ; preds = %583
  %615 = getelementptr inbounds i16, i16* %582, i64 64
  %616 = getelementptr inbounds i16, i16* %581, i64 %576
  %617 = add nuw nsw i32 %580, 1
  %618 = icmp eq i32 %617, 64
  br i1 %618, label %619, label %577

619:                                              ; preds = %614
  %620 = trunc i64 %611 to i32
  store i32 %620, i32* %6, align 4
  %621 = shl i64 %608, 32
  %622 = ashr exact i64 %621, 32
  %623 = mul nsw i64 %622, %622
  %624 = lshr i64 %623, 12
  %625 = trunc i64 %624 to i32
  %626 = sub i32 %620, %625
  call void @llvm.lifetime.end.p0i8(i64 8192, i8* nonnull %14) #4
  call void @llvm.lifetime.end.p0i8(i64 8192, i8* nonnull %13) #4
  call void @llvm.lifetime.end.p0i8(i64 8320, i8* nonnull %12) #4
  ret i32 %626
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @vpx_highbd_comp_avg_pred_c(i16* nocapture, i16* nocapture readonly, i32, i32, i16* nocapture readonly, i32) local_unnamed_addr #3 {
  %7 = icmp sgt i32 %3, 0
  br i1 %7, label %8, label %159

8:                                                ; preds = %6
  %9 = icmp sgt i32 %2, 0
  %10 = sext i32 %2 to i64
  %11 = sext i32 %5 to i64
  %12 = zext i32 %2 to i64
  %13 = and i64 %12, 4294967288
  %14 = add nsw i64 %13, -8
  %15 = lshr exact i64 %14, 3
  %16 = add nuw nsw i64 %15, 1
  %17 = icmp ult i32 %2, 8
  %18 = and i64 %12, 4294967288
  %19 = and i64 %16, 1
  %20 = icmp eq i64 %14, 0
  %21 = sub nuw nsw i64 %16, %19
  %22 = icmp eq i64 %19, 0
  %23 = icmp eq i64 %18, %12
  %24 = and i64 %12, 1
  %25 = icmp eq i64 %24, 0
  %26 = sub nsw i64 0, %12
  br label %27

27:                                               ; preds = %152, %8
  %28 = phi i64 [ %158, %152 ], [ 0, %8 ]
  %29 = phi i16* [ %153, %152 ], [ %0, %8 ]
  %30 = phi i32 [ %156, %152 ], [ 0, %8 ]
  %31 = phi i16* [ %154, %152 ], [ %1, %8 ]
  %32 = phi i16* [ %155, %152 ], [ %4, %8 ]
  %33 = mul i64 %28, %10
  %34 = getelementptr i16, i16* %0, i64 %33
  %35 = add i64 %33, %12
  %36 = getelementptr i16, i16* %0, i64 %35
  %37 = getelementptr i16, i16* %1, i64 %33
  %38 = getelementptr i16, i16* %1, i64 %35
  %39 = mul i64 %28, %11
  %40 = getelementptr i16, i16* %4, i64 %39
  %41 = add i64 %39, %12
  %42 = getelementptr i16, i16* %4, i64 %41
  br i1 %9, label %43, label %152

43:                                               ; preds = %27
  br i1 %17, label %106, label %44

44:                                               ; preds = %43
  %45 = icmp ult i16* %34, %38
  %46 = icmp ult i16* %37, %36
  %47 = and i1 %45, %46
  %48 = icmp ult i16* %34, %42
  %49 = icmp ult i16* %40, %36
  %50 = and i1 %48, %49
  %51 = or i1 %47, %50
  br i1 %51, label %106, label %52

52:                                               ; preds = %44
  br i1 %20, label %88, label %53

53:                                               ; preds = %52, %53
  %54 = phi i64 [ %85, %53 ], [ 0, %52 ]
  %55 = phi i64 [ %86, %53 ], [ %21, %52 ]
  %56 = getelementptr inbounds i16, i16* %31, i64 %54
  %57 = bitcast i16* %56 to <8 x i16>*
  %58 = load <8 x i16>, <8 x i16>* %57, align 2, !alias.scope !443
  %59 = zext <8 x i16> %58 to <8 x i32>
  %60 = getelementptr inbounds i16, i16* %32, i64 %54
  %61 = bitcast i16* %60 to <8 x i16>*
  %62 = load <8 x i16>, <8 x i16>* %61, align 2, !alias.scope !446
  %63 = zext <8 x i16> %62 to <8 x i32>
  %64 = add nuw nsw <8 x i32> %59, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %65 = add nuw nsw <8 x i32> %64, %63
  %66 = lshr <8 x i32> %65, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %67 = trunc <8 x i32> %66 to <8 x i16>
  %68 = getelementptr inbounds i16, i16* %29, i64 %54
  %69 = bitcast i16* %68 to <8 x i16>*
  store <8 x i16> %67, <8 x i16>* %69, align 2, !alias.scope !448, !noalias !450
  %70 = or i64 %54, 8
  %71 = getelementptr inbounds i16, i16* %31, i64 %70
  %72 = bitcast i16* %71 to <8 x i16>*
  %73 = load <8 x i16>, <8 x i16>* %72, align 2, !alias.scope !443
  %74 = zext <8 x i16> %73 to <8 x i32>
  %75 = getelementptr inbounds i16, i16* %32, i64 %70
  %76 = bitcast i16* %75 to <8 x i16>*
  %77 = load <8 x i16>, <8 x i16>* %76, align 2, !alias.scope !446
  %78 = zext <8 x i16> %77 to <8 x i32>
  %79 = add nuw nsw <8 x i32> %74, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %80 = add nuw nsw <8 x i32> %79, %78
  %81 = lshr <8 x i32> %80, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %82 = trunc <8 x i32> %81 to <8 x i16>
  %83 = getelementptr inbounds i16, i16* %29, i64 %70
  %84 = bitcast i16* %83 to <8 x i16>*
  store <8 x i16> %82, <8 x i16>* %84, align 2, !alias.scope !448, !noalias !450
  %85 = add i64 %54, 16
  %86 = add i64 %55, -2
  %87 = icmp eq i64 %86, 0
  br i1 %87, label %88, label %53, !llvm.loop !451

88:                                               ; preds = %53, %52
  %89 = phi i64 [ 0, %52 ], [ %85, %53 ]
  br i1 %22, label %105, label %90

90:                                               ; preds = %88
  %91 = getelementptr inbounds i16, i16* %31, i64 %89
  %92 = bitcast i16* %91 to <8 x i16>*
  %93 = load <8 x i16>, <8 x i16>* %92, align 2, !alias.scope !443
  %94 = zext <8 x i16> %93 to <8 x i32>
  %95 = getelementptr inbounds i16, i16* %32, i64 %89
  %96 = bitcast i16* %95 to <8 x i16>*
  %97 = load <8 x i16>, <8 x i16>* %96, align 2, !alias.scope !446
  %98 = zext <8 x i16> %97 to <8 x i32>
  %99 = add nuw nsw <8 x i32> %94, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %100 = add nuw nsw <8 x i32> %99, %98
  %101 = lshr <8 x i32> %100, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %102 = trunc <8 x i32> %101 to <8 x i16>
  %103 = getelementptr inbounds i16, i16* %29, i64 %89
  %104 = bitcast i16* %103 to <8 x i16>*
  store <8 x i16> %102, <8 x i16>* %104, align 2, !alias.scope !448, !noalias !450
  br label %105

105:                                              ; preds = %88, %90
  br i1 %23, label %152, label %106

106:                                              ; preds = %105, %44, %43
  %107 = phi i64 [ 0, %44 ], [ 0, %43 ], [ %18, %105 ]
  %108 = xor i64 %107, -1
  br i1 %25, label %122, label %109

109:                                              ; preds = %106
  %110 = getelementptr inbounds i16, i16* %31, i64 %107
  %111 = load i16, i16* %110, align 2
  %112 = zext i16 %111 to i32
  %113 = getelementptr inbounds i16, i16* %32, i64 %107
  %114 = load i16, i16* %113, align 2
  %115 = zext i16 %114 to i32
  %116 = add nuw nsw i32 %112, 1
  %117 = add nuw nsw i32 %116, %115
  %118 = lshr i32 %117, 1
  %119 = trunc i32 %118 to i16
  %120 = getelementptr inbounds i16, i16* %29, i64 %107
  store i16 %119, i16* %120, align 2
  %121 = or i64 %107, 1
  br label %122

122:                                              ; preds = %109, %106
  %123 = phi i64 [ %121, %109 ], [ %107, %106 ]
  %124 = icmp eq i64 %108, %26
  br i1 %124, label %152, label %125

125:                                              ; preds = %122, %125
  %126 = phi i64 [ %150, %125 ], [ %123, %122 ]
  %127 = getelementptr inbounds i16, i16* %31, i64 %126
  %128 = load i16, i16* %127, align 2
  %129 = zext i16 %128 to i32
  %130 = getelementptr inbounds i16, i16* %32, i64 %126
  %131 = load i16, i16* %130, align 2
  %132 = zext i16 %131 to i32
  %133 = add nuw nsw i32 %129, 1
  %134 = add nuw nsw i32 %133, %132
  %135 = lshr i32 %134, 1
  %136 = trunc i32 %135 to i16
  %137 = getelementptr inbounds i16, i16* %29, i64 %126
  store i16 %136, i16* %137, align 2
  %138 = add nuw nsw i64 %126, 1
  %139 = getelementptr inbounds i16, i16* %31, i64 %138
  %140 = load i16, i16* %139, align 2
  %141 = zext i16 %140 to i32
  %142 = getelementptr inbounds i16, i16* %32, i64 %138
  %143 = load i16, i16* %142, align 2
  %144 = zext i16 %143 to i32
  %145 = add nuw nsw i32 %141, 1
  %146 = add nuw nsw i32 %145, %144
  %147 = lshr i32 %146, 1
  %148 = trunc i32 %147 to i16
  %149 = getelementptr inbounds i16, i16* %29, i64 %138
  store i16 %148, i16* %149, align 2
  %150 = add nuw nsw i64 %126, 2
  %151 = icmp eq i64 %150, %12
  br i1 %151, label %152, label %125, !llvm.loop !452

152:                                              ; preds = %122, %125, %105, %27
  %153 = getelementptr inbounds i16, i16* %29, i64 %10
  %154 = getelementptr inbounds i16, i16* %31, i64 %10
  %155 = getelementptr inbounds i16, i16* %32, i64 %11
  %156 = add nuw nsw i32 %30, 1
  %157 = icmp eq i32 %156, %3
  %158 = add i64 %28, 1
  br i1 %157, label %159, label %27

159:                                              ; preds = %152, %6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_highbd_10_sub_pixel_avg_variance64x64_c(i8*, i32, i32, i32, i8*, i32, i32* nocapture, i8*) local_unnamed_addr #2 {
  %9 = alloca [4160 x i16], align 16
  %10 = alloca [4096 x i16], align 16
  %11 = alloca [4096 x i16], align 16
  %12 = bitcast [4160 x i16]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8320, i8* nonnull %12) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %12, i8 -86, i64 8320, i1 false)
  %13 = bitcast [4096 x i16]* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8192, i8* nonnull %13) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %13, i8 -86, i64 8192, i1 false)
  %14 = bitcast [4096 x i16]* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8192, i8* nonnull %14) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %14, i8 -86, i64 8192, i1 false)
  %15 = getelementptr inbounds [4160 x i16], [4160 x i16]* %9, i64 0, i64 0
  %16 = sext i32 %2 to i64
  %17 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %16, i64 0
  %18 = ptrtoint i8* %0 to i64
  %19 = shl i64 %18, 1
  %20 = inttoptr i64 %19 to i16*
  %21 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %16, i64 1
  %22 = add i32 %1, -64
  %23 = zext i32 %22 to i64
  %24 = load i8, i8* %17, align 2
  %25 = zext i8 %24 to i32
  %26 = load i8, i8* %21, align 1
  %27 = zext i8 %26 to i32
  %28 = insertelement <8 x i32> undef, i32 %25, i32 0
  %29 = shufflevector <8 x i32> %28, <8 x i32> undef, <8 x i32> zeroinitializer
  %30 = insertelement <8 x i32> undef, i32 %27, i32 0
  %31 = shufflevector <8 x i32> %30, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %32

32:                                               ; preds = %203, %8
  %33 = phi i64 [ %209, %203 ], [ 0, %8 ]
  %34 = phi i16* [ %205, %203 ], [ %20, %8 ]
  %35 = phi i32 [ %207, %203 ], [ 0, %8 ]
  %36 = phi i16* [ %206, %203 ], [ %15, %8 ]
  %37 = shl nuw nsw i64 %33, 6
  %38 = add i64 %37, 64
  %39 = getelementptr [4160 x i16], [4160 x i16]* %9, i64 0, i64 %38
  %40 = getelementptr [4160 x i16], [4160 x i16]* %9, i64 0, i64 %37
  %41 = getelementptr i16, i16* %34, i64 65
  %42 = icmp ult i16* %40, %41
  %43 = icmp ult i16* %34, %39
  %44 = and i1 %42, %43
  br i1 %44, label %173, label %45

45:                                               ; preds = %32
  %46 = getelementptr i16, i16* %34, i64 64
  %47 = bitcast i16* %34 to <8 x i16>*
  %48 = load <8 x i16>, <8 x i16>* %47, align 2, !alias.scope !453
  %49 = zext <8 x i16> %48 to <8 x i32>
  %50 = mul nuw nsw <8 x i32> %29, %49
  %51 = getelementptr inbounds i16, i16* %34, i64 1
  %52 = bitcast i16* %51 to <8 x i16>*
  %53 = load <8 x i16>, <8 x i16>* %52, align 2, !alias.scope !453
  %54 = zext <8 x i16> %53 to <8 x i32>
  %55 = mul nuw nsw <8 x i32> %31, %54
  %56 = add nuw nsw <8 x i32> %50, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %57 = add nuw nsw <8 x i32> %56, %55
  %58 = lshr <8 x i32> %57, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %59 = trunc <8 x i32> %58 to <8 x i16>
  %60 = bitcast i16* %36 to <8 x i16>*
  store <8 x i16> %59, <8 x i16>* %60, align 2, !alias.scope !456, !noalias !453
  %61 = getelementptr i16, i16* %34, i64 8
  %62 = bitcast i16* %61 to <8 x i16>*
  %63 = load <8 x i16>, <8 x i16>* %62, align 2, !alias.scope !453
  %64 = zext <8 x i16> %63 to <8 x i32>
  %65 = mul nuw nsw <8 x i32> %29, %64
  %66 = getelementptr inbounds i16, i16* %34, i64 9
  %67 = bitcast i16* %66 to <8 x i16>*
  %68 = load <8 x i16>, <8 x i16>* %67, align 2, !alias.scope !453
  %69 = zext <8 x i16> %68 to <8 x i32>
  %70 = mul nuw nsw <8 x i32> %31, %69
  %71 = add nuw nsw <8 x i32> %65, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %72 = add nuw nsw <8 x i32> %71, %70
  %73 = lshr <8 x i32> %72, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %74 = trunc <8 x i32> %73 to <8 x i16>
  %75 = getelementptr inbounds i16, i16* %36, i64 8
  %76 = bitcast i16* %75 to <8 x i16>*
  store <8 x i16> %74, <8 x i16>* %76, align 2, !alias.scope !456, !noalias !453
  %77 = getelementptr i16, i16* %34, i64 16
  %78 = bitcast i16* %77 to <8 x i16>*
  %79 = load <8 x i16>, <8 x i16>* %78, align 2, !alias.scope !453
  %80 = zext <8 x i16> %79 to <8 x i32>
  %81 = mul nuw nsw <8 x i32> %29, %80
  %82 = getelementptr inbounds i16, i16* %34, i64 17
  %83 = bitcast i16* %82 to <8 x i16>*
  %84 = load <8 x i16>, <8 x i16>* %83, align 2, !alias.scope !453
  %85 = zext <8 x i16> %84 to <8 x i32>
  %86 = mul nuw nsw <8 x i32> %31, %85
  %87 = add nuw nsw <8 x i32> %81, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %88 = add nuw nsw <8 x i32> %87, %86
  %89 = lshr <8 x i32> %88, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %90 = trunc <8 x i32> %89 to <8 x i16>
  %91 = getelementptr inbounds i16, i16* %36, i64 16
  %92 = bitcast i16* %91 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %92, align 2, !alias.scope !456, !noalias !453
  %93 = getelementptr i16, i16* %34, i64 24
  %94 = bitcast i16* %93 to <8 x i16>*
  %95 = load <8 x i16>, <8 x i16>* %94, align 2, !alias.scope !453
  %96 = zext <8 x i16> %95 to <8 x i32>
  %97 = mul nuw nsw <8 x i32> %29, %96
  %98 = getelementptr inbounds i16, i16* %34, i64 25
  %99 = bitcast i16* %98 to <8 x i16>*
  %100 = load <8 x i16>, <8 x i16>* %99, align 2, !alias.scope !453
  %101 = zext <8 x i16> %100 to <8 x i32>
  %102 = mul nuw nsw <8 x i32> %31, %101
  %103 = add nuw nsw <8 x i32> %97, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %104 = add nuw nsw <8 x i32> %103, %102
  %105 = lshr <8 x i32> %104, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %106 = trunc <8 x i32> %105 to <8 x i16>
  %107 = getelementptr inbounds i16, i16* %36, i64 24
  %108 = bitcast i16* %107 to <8 x i16>*
  store <8 x i16> %106, <8 x i16>* %108, align 2, !alias.scope !456, !noalias !453
  %109 = getelementptr i16, i16* %34, i64 32
  %110 = bitcast i16* %109 to <8 x i16>*
  %111 = load <8 x i16>, <8 x i16>* %110, align 2, !alias.scope !453
  %112 = zext <8 x i16> %111 to <8 x i32>
  %113 = mul nuw nsw <8 x i32> %29, %112
  %114 = getelementptr inbounds i16, i16* %34, i64 33
  %115 = bitcast i16* %114 to <8 x i16>*
  %116 = load <8 x i16>, <8 x i16>* %115, align 2, !alias.scope !453
  %117 = zext <8 x i16> %116 to <8 x i32>
  %118 = mul nuw nsw <8 x i32> %31, %117
  %119 = add nuw nsw <8 x i32> %113, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %120 = add nuw nsw <8 x i32> %119, %118
  %121 = lshr <8 x i32> %120, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %122 = trunc <8 x i32> %121 to <8 x i16>
  %123 = getelementptr inbounds i16, i16* %36, i64 32
  %124 = bitcast i16* %123 to <8 x i16>*
  store <8 x i16> %122, <8 x i16>* %124, align 2, !alias.scope !456, !noalias !453
  %125 = getelementptr i16, i16* %34, i64 40
  %126 = bitcast i16* %125 to <8 x i16>*
  %127 = load <8 x i16>, <8 x i16>* %126, align 2, !alias.scope !453
  %128 = zext <8 x i16> %127 to <8 x i32>
  %129 = mul nuw nsw <8 x i32> %29, %128
  %130 = getelementptr inbounds i16, i16* %34, i64 41
  %131 = bitcast i16* %130 to <8 x i16>*
  %132 = load <8 x i16>, <8 x i16>* %131, align 2, !alias.scope !453
  %133 = zext <8 x i16> %132 to <8 x i32>
  %134 = mul nuw nsw <8 x i32> %31, %133
  %135 = add nuw nsw <8 x i32> %129, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %136 = add nuw nsw <8 x i32> %135, %134
  %137 = lshr <8 x i32> %136, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %138 = trunc <8 x i32> %137 to <8 x i16>
  %139 = getelementptr inbounds i16, i16* %36, i64 40
  %140 = bitcast i16* %139 to <8 x i16>*
  store <8 x i16> %138, <8 x i16>* %140, align 2, !alias.scope !456, !noalias !453
  %141 = getelementptr i16, i16* %34, i64 48
  %142 = bitcast i16* %141 to <8 x i16>*
  %143 = load <8 x i16>, <8 x i16>* %142, align 2, !alias.scope !453
  %144 = zext <8 x i16> %143 to <8 x i32>
  %145 = mul nuw nsw <8 x i32> %29, %144
  %146 = getelementptr inbounds i16, i16* %34, i64 49
  %147 = bitcast i16* %146 to <8 x i16>*
  %148 = load <8 x i16>, <8 x i16>* %147, align 2, !alias.scope !453
  %149 = zext <8 x i16> %148 to <8 x i32>
  %150 = mul nuw nsw <8 x i32> %31, %149
  %151 = add nuw nsw <8 x i32> %145, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %152 = add nuw nsw <8 x i32> %151, %150
  %153 = lshr <8 x i32> %152, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %154 = trunc <8 x i32> %153 to <8 x i16>
  %155 = getelementptr inbounds i16, i16* %36, i64 48
  %156 = bitcast i16* %155 to <8 x i16>*
  store <8 x i16> %154, <8 x i16>* %156, align 2, !alias.scope !456, !noalias !453
  %157 = getelementptr i16, i16* %34, i64 56
  %158 = bitcast i16* %157 to <8 x i16>*
  %159 = load <8 x i16>, <8 x i16>* %158, align 2, !alias.scope !453
  %160 = zext <8 x i16> %159 to <8 x i32>
  %161 = mul nuw nsw <8 x i32> %29, %160
  %162 = getelementptr inbounds i16, i16* %34, i64 57
  %163 = bitcast i16* %162 to <8 x i16>*
  %164 = load <8 x i16>, <8 x i16>* %163, align 2, !alias.scope !453
  %165 = zext <8 x i16> %164 to <8 x i32>
  %166 = mul nuw nsw <8 x i32> %31, %165
  %167 = add nuw nsw <8 x i32> %161, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %168 = add nuw nsw <8 x i32> %167, %166
  %169 = lshr <8 x i32> %168, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %170 = trunc <8 x i32> %169 to <8 x i16>
  %171 = getelementptr inbounds i16, i16* %36, i64 56
  %172 = bitcast i16* %171 to <8 x i16>*
  store <8 x i16> %170, <8 x i16>* %172, align 2, !alias.scope !456, !noalias !453
  br label %203

173:                                              ; preds = %32, %173
  %174 = phi i64 [ %201, %173 ], [ 0, %32 ]
  %175 = phi i16* [ %192, %173 ], [ %34, %32 ]
  %176 = load i16, i16* %175, align 2
  %177 = zext i16 %176 to i32
  %178 = mul nuw nsw i32 %25, %177
  %179 = getelementptr inbounds i16, i16* %175, i64 1
  %180 = load i16, i16* %179, align 2
  %181 = zext i16 %180 to i32
  %182 = mul nuw nsw i32 %27, %181
  %183 = add nuw nsw i32 %178, 64
  %184 = add nuw nsw i32 %183, %182
  %185 = lshr i32 %184, 7
  %186 = trunc i32 %185 to i16
  %187 = getelementptr inbounds i16, i16* %36, i64 %174
  store i16 %186, i16* %187, align 2
  %188 = or i64 %174, 1
  %189 = load i16, i16* %179, align 2
  %190 = zext i16 %189 to i32
  %191 = mul nuw nsw i32 %25, %190
  %192 = getelementptr inbounds i16, i16* %175, i64 2
  %193 = load i16, i16* %192, align 2
  %194 = zext i16 %193 to i32
  %195 = mul nuw nsw i32 %27, %194
  %196 = add nuw nsw i32 %191, 64
  %197 = add nuw nsw i32 %196, %195
  %198 = lshr i32 %197, 7
  %199 = trunc i32 %198 to i16
  %200 = getelementptr inbounds i16, i16* %36, i64 %188
  store i16 %199, i16* %200, align 2
  %201 = add nuw nsw i64 %174, 2
  %202 = icmp eq i64 %201, 64
  br i1 %202, label %203, label %173, !llvm.loop !458

203:                                              ; preds = %173, %45
  %204 = phi i16* [ %46, %45 ], [ %192, %173 ]
  %205 = getelementptr inbounds i16, i16* %204, i64 %23
  %206 = getelementptr inbounds i16, i16* %36, i64 64
  %207 = add nuw nsw i32 %35, 1
  %208 = icmp eq i32 %207, 65
  %209 = add i64 %33, 1
  br i1 %208, label %210, label %32

210:                                              ; preds = %203
  %211 = getelementptr inbounds [4096 x i16], [4096 x i16]* %10, i64 0, i64 0
  %212 = sext i32 %3 to i64
  %213 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %212, i64 0
  %214 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %212, i64 1
  %215 = load i8, i8* %213, align 2
  %216 = zext i8 %215 to i32
  %217 = load i8, i8* %214, align 1
  %218 = zext i8 %217 to i32
  %219 = insertelement <8 x i32> undef, i32 %216, i32 0
  %220 = shufflevector <8 x i32> %219, <8 x i32> undef, <8 x i32> zeroinitializer
  %221 = insertelement <8 x i32> undef, i32 %218, i32 0
  %222 = shufflevector <8 x i32> %221, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %223

223:                                              ; preds = %396, %210
  %224 = phi i64 [ %401, %396 ], [ 0, %210 ]
  %225 = phi i32 [ %399, %396 ], [ 0, %210 ]
  %226 = phi i16* [ %397, %396 ], [ %15, %210 ]
  %227 = phi i16* [ %398, %396 ], [ %211, %210 ]
  %228 = shl nuw nsw i64 %224, 6
  %229 = add i64 %228, 64
  %230 = getelementptr [4096 x i16], [4096 x i16]* %10, i64 0, i64 %229
  %231 = getelementptr [4096 x i16], [4096 x i16]* %10, i64 0, i64 %228
  %232 = getelementptr i16, i16* %226, i64 128
  %233 = icmp ult i16* %231, %232
  %234 = icmp ult i16* %226, %230
  %235 = and i1 %233, %234
  br i1 %235, label %364, label %236

236:                                              ; preds = %223
  %237 = getelementptr i16, i16* %226, i64 64
  %238 = bitcast i16* %226 to <8 x i16>*
  %239 = load <8 x i16>, <8 x i16>* %238, align 2, !alias.scope !459
  %240 = zext <8 x i16> %239 to <8 x i32>
  %241 = mul nuw nsw <8 x i32> %220, %240
  %242 = getelementptr inbounds i16, i16* %226, i64 64
  %243 = bitcast i16* %242 to <8 x i16>*
  %244 = load <8 x i16>, <8 x i16>* %243, align 2, !alias.scope !459
  %245 = zext <8 x i16> %244 to <8 x i32>
  %246 = mul nuw nsw <8 x i32> %222, %245
  %247 = add nuw nsw <8 x i32> %241, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %248 = add nuw nsw <8 x i32> %247, %246
  %249 = lshr <8 x i32> %248, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %250 = trunc <8 x i32> %249 to <8 x i16>
  %251 = bitcast i16* %227 to <8 x i16>*
  store <8 x i16> %250, <8 x i16>* %251, align 2, !alias.scope !462, !noalias !459
  %252 = getelementptr i16, i16* %226, i64 8
  %253 = bitcast i16* %252 to <8 x i16>*
  %254 = load <8 x i16>, <8 x i16>* %253, align 2, !alias.scope !459
  %255 = zext <8 x i16> %254 to <8 x i32>
  %256 = mul nuw nsw <8 x i32> %220, %255
  %257 = getelementptr inbounds i16, i16* %226, i64 72
  %258 = bitcast i16* %257 to <8 x i16>*
  %259 = load <8 x i16>, <8 x i16>* %258, align 2, !alias.scope !459
  %260 = zext <8 x i16> %259 to <8 x i32>
  %261 = mul nuw nsw <8 x i32> %222, %260
  %262 = add nuw nsw <8 x i32> %256, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %263 = add nuw nsw <8 x i32> %262, %261
  %264 = lshr <8 x i32> %263, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %265 = trunc <8 x i32> %264 to <8 x i16>
  %266 = getelementptr inbounds i16, i16* %227, i64 8
  %267 = bitcast i16* %266 to <8 x i16>*
  store <8 x i16> %265, <8 x i16>* %267, align 2, !alias.scope !462, !noalias !459
  %268 = getelementptr i16, i16* %226, i64 16
  %269 = bitcast i16* %268 to <8 x i16>*
  %270 = load <8 x i16>, <8 x i16>* %269, align 2, !alias.scope !459
  %271 = zext <8 x i16> %270 to <8 x i32>
  %272 = mul nuw nsw <8 x i32> %220, %271
  %273 = getelementptr inbounds i16, i16* %226, i64 80
  %274 = bitcast i16* %273 to <8 x i16>*
  %275 = load <8 x i16>, <8 x i16>* %274, align 2, !alias.scope !459
  %276 = zext <8 x i16> %275 to <8 x i32>
  %277 = mul nuw nsw <8 x i32> %222, %276
  %278 = add nuw nsw <8 x i32> %272, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %279 = add nuw nsw <8 x i32> %278, %277
  %280 = lshr <8 x i32> %279, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %281 = trunc <8 x i32> %280 to <8 x i16>
  %282 = getelementptr inbounds i16, i16* %227, i64 16
  %283 = bitcast i16* %282 to <8 x i16>*
  store <8 x i16> %281, <8 x i16>* %283, align 2, !alias.scope !462, !noalias !459
  %284 = getelementptr i16, i16* %226, i64 24
  %285 = bitcast i16* %284 to <8 x i16>*
  %286 = load <8 x i16>, <8 x i16>* %285, align 2, !alias.scope !459
  %287 = zext <8 x i16> %286 to <8 x i32>
  %288 = mul nuw nsw <8 x i32> %220, %287
  %289 = getelementptr inbounds i16, i16* %226, i64 88
  %290 = bitcast i16* %289 to <8 x i16>*
  %291 = load <8 x i16>, <8 x i16>* %290, align 2, !alias.scope !459
  %292 = zext <8 x i16> %291 to <8 x i32>
  %293 = mul nuw nsw <8 x i32> %222, %292
  %294 = add nuw nsw <8 x i32> %288, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %295 = add nuw nsw <8 x i32> %294, %293
  %296 = lshr <8 x i32> %295, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %297 = trunc <8 x i32> %296 to <8 x i16>
  %298 = getelementptr inbounds i16, i16* %227, i64 24
  %299 = bitcast i16* %298 to <8 x i16>*
  store <8 x i16> %297, <8 x i16>* %299, align 2, !alias.scope !462, !noalias !459
  %300 = getelementptr i16, i16* %226, i64 32
  %301 = bitcast i16* %300 to <8 x i16>*
  %302 = load <8 x i16>, <8 x i16>* %301, align 2, !alias.scope !459
  %303 = zext <8 x i16> %302 to <8 x i32>
  %304 = mul nuw nsw <8 x i32> %220, %303
  %305 = getelementptr inbounds i16, i16* %226, i64 96
  %306 = bitcast i16* %305 to <8 x i16>*
  %307 = load <8 x i16>, <8 x i16>* %306, align 2, !alias.scope !459
  %308 = zext <8 x i16> %307 to <8 x i32>
  %309 = mul nuw nsw <8 x i32> %222, %308
  %310 = add nuw nsw <8 x i32> %304, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %311 = add nuw nsw <8 x i32> %310, %309
  %312 = lshr <8 x i32> %311, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %313 = trunc <8 x i32> %312 to <8 x i16>
  %314 = getelementptr inbounds i16, i16* %227, i64 32
  %315 = bitcast i16* %314 to <8 x i16>*
  store <8 x i16> %313, <8 x i16>* %315, align 2, !alias.scope !462, !noalias !459
  %316 = getelementptr i16, i16* %226, i64 40
  %317 = bitcast i16* %316 to <8 x i16>*
  %318 = load <8 x i16>, <8 x i16>* %317, align 2, !alias.scope !459
  %319 = zext <8 x i16> %318 to <8 x i32>
  %320 = mul nuw nsw <8 x i32> %220, %319
  %321 = getelementptr inbounds i16, i16* %226, i64 104
  %322 = bitcast i16* %321 to <8 x i16>*
  %323 = load <8 x i16>, <8 x i16>* %322, align 2, !alias.scope !459
  %324 = zext <8 x i16> %323 to <8 x i32>
  %325 = mul nuw nsw <8 x i32> %222, %324
  %326 = add nuw nsw <8 x i32> %320, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %327 = add nuw nsw <8 x i32> %326, %325
  %328 = lshr <8 x i32> %327, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %329 = trunc <8 x i32> %328 to <8 x i16>
  %330 = getelementptr inbounds i16, i16* %227, i64 40
  %331 = bitcast i16* %330 to <8 x i16>*
  store <8 x i16> %329, <8 x i16>* %331, align 2, !alias.scope !462, !noalias !459
  %332 = getelementptr i16, i16* %226, i64 48
  %333 = bitcast i16* %332 to <8 x i16>*
  %334 = load <8 x i16>, <8 x i16>* %333, align 2, !alias.scope !459
  %335 = zext <8 x i16> %334 to <8 x i32>
  %336 = mul nuw nsw <8 x i32> %220, %335
  %337 = getelementptr inbounds i16, i16* %226, i64 112
  %338 = bitcast i16* %337 to <8 x i16>*
  %339 = load <8 x i16>, <8 x i16>* %338, align 2, !alias.scope !459
  %340 = zext <8 x i16> %339 to <8 x i32>
  %341 = mul nuw nsw <8 x i32> %222, %340
  %342 = add nuw nsw <8 x i32> %336, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %343 = add nuw nsw <8 x i32> %342, %341
  %344 = lshr <8 x i32> %343, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %345 = trunc <8 x i32> %344 to <8 x i16>
  %346 = getelementptr inbounds i16, i16* %227, i64 48
  %347 = bitcast i16* %346 to <8 x i16>*
  store <8 x i16> %345, <8 x i16>* %347, align 2, !alias.scope !462, !noalias !459
  %348 = getelementptr i16, i16* %226, i64 56
  %349 = bitcast i16* %348 to <8 x i16>*
  %350 = load <8 x i16>, <8 x i16>* %349, align 2, !alias.scope !459
  %351 = zext <8 x i16> %350 to <8 x i32>
  %352 = mul nuw nsw <8 x i32> %220, %351
  %353 = getelementptr inbounds i16, i16* %226, i64 120
  %354 = bitcast i16* %353 to <8 x i16>*
  %355 = load <8 x i16>, <8 x i16>* %354, align 2, !alias.scope !459
  %356 = zext <8 x i16> %355 to <8 x i32>
  %357 = mul nuw nsw <8 x i32> %222, %356
  %358 = add nuw nsw <8 x i32> %352, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %359 = add nuw nsw <8 x i32> %358, %357
  %360 = lshr <8 x i32> %359, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %361 = trunc <8 x i32> %360 to <8 x i16>
  %362 = getelementptr inbounds i16, i16* %227, i64 56
  %363 = bitcast i16* %362 to <8 x i16>*
  store <8 x i16> %361, <8 x i16>* %363, align 2, !alias.scope !462, !noalias !459
  br label %396

364:                                              ; preds = %223, %364
  %365 = phi i64 [ %394, %364 ], [ 0, %223 ]
  %366 = phi i16* [ %393, %364 ], [ %226, %223 ]
  %367 = load i16, i16* %366, align 2
  %368 = zext i16 %367 to i32
  %369 = mul nuw nsw i32 %216, %368
  %370 = getelementptr inbounds i16, i16* %366, i64 64
  %371 = load i16, i16* %370, align 2
  %372 = zext i16 %371 to i32
  %373 = mul nuw nsw i32 %218, %372
  %374 = add nuw nsw i32 %369, 64
  %375 = add nuw nsw i32 %374, %373
  %376 = lshr i32 %375, 7
  %377 = trunc i32 %376 to i16
  %378 = getelementptr inbounds i16, i16* %227, i64 %365
  store i16 %377, i16* %378, align 2
  %379 = getelementptr inbounds i16, i16* %366, i64 1
  %380 = or i64 %365, 1
  %381 = load i16, i16* %379, align 2
  %382 = zext i16 %381 to i32
  %383 = mul nuw nsw i32 %216, %382
  %384 = getelementptr inbounds i16, i16* %366, i64 65
  %385 = load i16, i16* %384, align 2
  %386 = zext i16 %385 to i32
  %387 = mul nuw nsw i32 %218, %386
  %388 = add nuw nsw i32 %383, 64
  %389 = add nuw nsw i32 %388, %387
  %390 = lshr i32 %389, 7
  %391 = trunc i32 %390 to i16
  %392 = getelementptr inbounds i16, i16* %227, i64 %380
  store i16 %391, i16* %392, align 2
  %393 = getelementptr inbounds i16, i16* %366, i64 2
  %394 = add nuw nsw i64 %365, 2
  %395 = icmp eq i64 %394, 64
  br i1 %395, label %396, label %364, !llvm.loop !464

396:                                              ; preds = %364, %236
  %397 = phi i16* [ %237, %236 ], [ %393, %364 ]
  %398 = getelementptr inbounds i16, i16* %227, i64 64
  %399 = add nuw nsw i32 %225, 1
  %400 = icmp eq i32 %399, 64
  %401 = add i64 %224, 1
  br i1 %400, label %402, label %223

402:                                              ; preds = %396
  %403 = getelementptr inbounds [4096 x i16], [4096 x i16]* %11, i64 0, i64 0
  %404 = ptrtoint i8* %7 to i64
  %405 = shl i64 %404, 1
  %406 = inttoptr i64 %405 to i16*
  br label %407

407:                                              ; preds = %565, %402
  %408 = phi i64 [ %571, %565 ], [ 0, %402 ]
  %409 = phi i16* [ %566, %565 ], [ %403, %402 ]
  %410 = phi i32 [ %569, %565 ], [ 0, %402 ]
  %411 = phi i16* [ %567, %565 ], [ %406, %402 ]
  %412 = phi i16* [ %568, %565 ], [ %211, %402 ]
  %413 = shl nuw nsw i64 %408, 6
  %414 = getelementptr [4096 x i16], [4096 x i16]* %11, i64 0, i64 %413
  %415 = add i64 %413, 64
  %416 = getelementptr [4096 x i16], [4096 x i16]* %11, i64 0, i64 %415
  %417 = getelementptr [4096 x i16], [4096 x i16]* %10, i64 0, i64 %415
  %418 = getelementptr [4096 x i16], [4096 x i16]* %10, i64 0, i64 %413
  %419 = getelementptr i16, i16* %406, i64 %415
  %420 = getelementptr i16, i16* %406, i64 %413
  %421 = icmp ult i16* %414, %419
  %422 = icmp ult i16* %420, %416
  %423 = and i1 %421, %422
  %424 = icmp ult i16* %414, %417
  %425 = icmp ult i16* %418, %416
  %426 = and i1 %424, %425
  %427 = or i1 %423, %426
  br i1 %427, label %538, label %428

428:                                              ; preds = %407
  %429 = bitcast i16* %411 to <8 x i16>*
  %430 = load <8 x i16>, <8 x i16>* %429, align 2, !alias.scope !465
  %431 = zext <8 x i16> %430 to <8 x i32>
  %432 = bitcast i16* %412 to <8 x i16>*
  %433 = load <8 x i16>, <8 x i16>* %432, align 2, !alias.scope !468
  %434 = zext <8 x i16> %433 to <8 x i32>
  %435 = add nuw nsw <8 x i32> %431, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %436 = add nuw nsw <8 x i32> %435, %434
  %437 = lshr <8 x i32> %436, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %438 = trunc <8 x i32> %437 to <8 x i16>
  %439 = bitcast i16* %409 to <8 x i16>*
  store <8 x i16> %438, <8 x i16>* %439, align 2, !alias.scope !470, !noalias !472
  %440 = getelementptr inbounds i16, i16* %411, i64 8
  %441 = bitcast i16* %440 to <8 x i16>*
  %442 = load <8 x i16>, <8 x i16>* %441, align 2, !alias.scope !465
  %443 = zext <8 x i16> %442 to <8 x i32>
  %444 = getelementptr inbounds i16, i16* %412, i64 8
  %445 = bitcast i16* %444 to <8 x i16>*
  %446 = load <8 x i16>, <8 x i16>* %445, align 2, !alias.scope !468
  %447 = zext <8 x i16> %446 to <8 x i32>
  %448 = add nuw nsw <8 x i32> %443, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %449 = add nuw nsw <8 x i32> %448, %447
  %450 = lshr <8 x i32> %449, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %451 = trunc <8 x i32> %450 to <8 x i16>
  %452 = getelementptr inbounds i16, i16* %409, i64 8
  %453 = bitcast i16* %452 to <8 x i16>*
  store <8 x i16> %451, <8 x i16>* %453, align 2, !alias.scope !470, !noalias !472
  %454 = getelementptr inbounds i16, i16* %411, i64 16
  %455 = bitcast i16* %454 to <8 x i16>*
  %456 = load <8 x i16>, <8 x i16>* %455, align 2, !alias.scope !465
  %457 = zext <8 x i16> %456 to <8 x i32>
  %458 = getelementptr inbounds i16, i16* %412, i64 16
  %459 = bitcast i16* %458 to <8 x i16>*
  %460 = load <8 x i16>, <8 x i16>* %459, align 2, !alias.scope !468
  %461 = zext <8 x i16> %460 to <8 x i32>
  %462 = add nuw nsw <8 x i32> %457, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %463 = add nuw nsw <8 x i32> %462, %461
  %464 = lshr <8 x i32> %463, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %465 = trunc <8 x i32> %464 to <8 x i16>
  %466 = getelementptr inbounds i16, i16* %409, i64 16
  %467 = bitcast i16* %466 to <8 x i16>*
  store <8 x i16> %465, <8 x i16>* %467, align 2, !alias.scope !470, !noalias !472
  %468 = getelementptr inbounds i16, i16* %411, i64 24
  %469 = bitcast i16* %468 to <8 x i16>*
  %470 = load <8 x i16>, <8 x i16>* %469, align 2, !alias.scope !465
  %471 = zext <8 x i16> %470 to <8 x i32>
  %472 = getelementptr inbounds i16, i16* %412, i64 24
  %473 = bitcast i16* %472 to <8 x i16>*
  %474 = load <8 x i16>, <8 x i16>* %473, align 2, !alias.scope !468
  %475 = zext <8 x i16> %474 to <8 x i32>
  %476 = add nuw nsw <8 x i32> %471, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %477 = add nuw nsw <8 x i32> %476, %475
  %478 = lshr <8 x i32> %477, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %479 = trunc <8 x i32> %478 to <8 x i16>
  %480 = getelementptr inbounds i16, i16* %409, i64 24
  %481 = bitcast i16* %480 to <8 x i16>*
  store <8 x i16> %479, <8 x i16>* %481, align 2, !alias.scope !470, !noalias !472
  %482 = getelementptr inbounds i16, i16* %411, i64 32
  %483 = bitcast i16* %482 to <8 x i16>*
  %484 = load <8 x i16>, <8 x i16>* %483, align 2, !alias.scope !465
  %485 = zext <8 x i16> %484 to <8 x i32>
  %486 = getelementptr inbounds i16, i16* %412, i64 32
  %487 = bitcast i16* %486 to <8 x i16>*
  %488 = load <8 x i16>, <8 x i16>* %487, align 2, !alias.scope !468
  %489 = zext <8 x i16> %488 to <8 x i32>
  %490 = add nuw nsw <8 x i32> %485, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %491 = add nuw nsw <8 x i32> %490, %489
  %492 = lshr <8 x i32> %491, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %493 = trunc <8 x i32> %492 to <8 x i16>
  %494 = getelementptr inbounds i16, i16* %409, i64 32
  %495 = bitcast i16* %494 to <8 x i16>*
  store <8 x i16> %493, <8 x i16>* %495, align 2, !alias.scope !470, !noalias !472
  %496 = getelementptr inbounds i16, i16* %411, i64 40
  %497 = bitcast i16* %496 to <8 x i16>*
  %498 = load <8 x i16>, <8 x i16>* %497, align 2, !alias.scope !465
  %499 = zext <8 x i16> %498 to <8 x i32>
  %500 = getelementptr inbounds i16, i16* %412, i64 40
  %501 = bitcast i16* %500 to <8 x i16>*
  %502 = load <8 x i16>, <8 x i16>* %501, align 2, !alias.scope !468
  %503 = zext <8 x i16> %502 to <8 x i32>
  %504 = add nuw nsw <8 x i32> %499, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %505 = add nuw nsw <8 x i32> %504, %503
  %506 = lshr <8 x i32> %505, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %507 = trunc <8 x i32> %506 to <8 x i16>
  %508 = getelementptr inbounds i16, i16* %409, i64 40
  %509 = bitcast i16* %508 to <8 x i16>*
  store <8 x i16> %507, <8 x i16>* %509, align 2, !alias.scope !470, !noalias !472
  %510 = getelementptr inbounds i16, i16* %411, i64 48
  %511 = bitcast i16* %510 to <8 x i16>*
  %512 = load <8 x i16>, <8 x i16>* %511, align 2, !alias.scope !465
  %513 = zext <8 x i16> %512 to <8 x i32>
  %514 = getelementptr inbounds i16, i16* %412, i64 48
  %515 = bitcast i16* %514 to <8 x i16>*
  %516 = load <8 x i16>, <8 x i16>* %515, align 2, !alias.scope !468
  %517 = zext <8 x i16> %516 to <8 x i32>
  %518 = add nuw nsw <8 x i32> %513, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %519 = add nuw nsw <8 x i32> %518, %517
  %520 = lshr <8 x i32> %519, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %521 = trunc <8 x i32> %520 to <8 x i16>
  %522 = getelementptr inbounds i16, i16* %409, i64 48
  %523 = bitcast i16* %522 to <8 x i16>*
  store <8 x i16> %521, <8 x i16>* %523, align 2, !alias.scope !470, !noalias !472
  %524 = getelementptr inbounds i16, i16* %411, i64 56
  %525 = bitcast i16* %524 to <8 x i16>*
  %526 = load <8 x i16>, <8 x i16>* %525, align 2, !alias.scope !465
  %527 = zext <8 x i16> %526 to <8 x i32>
  %528 = getelementptr inbounds i16, i16* %412, i64 56
  %529 = bitcast i16* %528 to <8 x i16>*
  %530 = load <8 x i16>, <8 x i16>* %529, align 2, !alias.scope !468
  %531 = zext <8 x i16> %530 to <8 x i32>
  %532 = add nuw nsw <8 x i32> %527, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %533 = add nuw nsw <8 x i32> %532, %531
  %534 = lshr <8 x i32> %533, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %535 = trunc <8 x i32> %534 to <8 x i16>
  %536 = getelementptr inbounds i16, i16* %409, i64 56
  %537 = bitcast i16* %536 to <8 x i16>*
  store <8 x i16> %535, <8 x i16>* %537, align 2, !alias.scope !470, !noalias !472
  br label %565

538:                                              ; preds = %407, %538
  %539 = phi i64 [ %563, %538 ], [ 0, %407 ]
  %540 = getelementptr inbounds i16, i16* %411, i64 %539
  %541 = load i16, i16* %540, align 2
  %542 = zext i16 %541 to i32
  %543 = getelementptr inbounds i16, i16* %412, i64 %539
  %544 = load i16, i16* %543, align 2
  %545 = zext i16 %544 to i32
  %546 = add nuw nsw i32 %542, 1
  %547 = add nuw nsw i32 %546, %545
  %548 = lshr i32 %547, 1
  %549 = trunc i32 %548 to i16
  %550 = getelementptr inbounds i16, i16* %409, i64 %539
  store i16 %549, i16* %550, align 2
  %551 = or i64 %539, 1
  %552 = getelementptr inbounds i16, i16* %411, i64 %551
  %553 = load i16, i16* %552, align 2
  %554 = zext i16 %553 to i32
  %555 = getelementptr inbounds i16, i16* %412, i64 %551
  %556 = load i16, i16* %555, align 2
  %557 = zext i16 %556 to i32
  %558 = add nuw nsw i32 %554, 1
  %559 = add nuw nsw i32 %558, %557
  %560 = lshr i32 %559, 1
  %561 = trunc i32 %560 to i16
  %562 = getelementptr inbounds i16, i16* %409, i64 %551
  store i16 %561, i16* %562, align 2
  %563 = add nuw nsw i64 %539, 2
  %564 = icmp eq i64 %563, 64
  br i1 %564, label %565, label %538, !llvm.loop !473

565:                                              ; preds = %538, %428
  %566 = getelementptr inbounds i16, i16* %409, i64 64
  %567 = getelementptr inbounds i16, i16* %411, i64 64
  %568 = getelementptr inbounds i16, i16* %412, i64 64
  %569 = add nuw nsw i32 %410, 1
  %570 = icmp eq i32 %569, 64
  %571 = add i64 %408, 1
  br i1 %570, label %572, label %407

572:                                              ; preds = %565
  %573 = ptrtoint i8* %4 to i64
  %574 = shl i64 %573, 1
  %575 = inttoptr i64 %574 to i16*
  %576 = sext i32 %5 to i64
  br label %577

577:                                              ; preds = %614, %572
  %578 = phi i64 [ 0, %572 ], [ %611, %614 ]
  %579 = phi i64 [ 0, %572 ], [ %608, %614 ]
  %580 = phi i32 [ 0, %572 ], [ %617, %614 ]
  %581 = phi i16* [ %575, %572 ], [ %616, %614 ]
  %582 = phi i16* [ %403, %572 ], [ %615, %614 ]
  br label %583

583:                                              ; preds = %583, %577
  %584 = phi i64 [ %578, %577 ], [ %611, %583 ]
  %585 = phi i64 [ %579, %577 ], [ %608, %583 ]
  %586 = phi i64 [ 0, %577 ], [ %612, %583 ]
  %587 = getelementptr inbounds i16, i16* %582, i64 %586
  %588 = load i16, i16* %587, align 2
  %589 = zext i16 %588 to i32
  %590 = getelementptr inbounds i16, i16* %581, i64 %586
  %591 = load i16, i16* %590, align 2
  %592 = zext i16 %591 to i32
  %593 = sub nsw i32 %589, %592
  %594 = sext i32 %593 to i64
  %595 = add nsw i64 %585, %594
  %596 = mul nsw i32 %593, %593
  %597 = zext i32 %596 to i64
  %598 = add i64 %584, %597
  %599 = or i64 %586, 1
  %600 = getelementptr inbounds i16, i16* %582, i64 %599
  %601 = load i16, i16* %600, align 2
  %602 = zext i16 %601 to i32
  %603 = getelementptr inbounds i16, i16* %581, i64 %599
  %604 = load i16, i16* %603, align 2
  %605 = zext i16 %604 to i32
  %606 = sub nsw i32 %602, %605
  %607 = sext i32 %606 to i64
  %608 = add nsw i64 %595, %607
  %609 = mul nsw i32 %606, %606
  %610 = zext i32 %609 to i64
  %611 = add i64 %598, %610
  %612 = add nuw nsw i64 %586, 2
  %613 = icmp eq i64 %612, 64
  br i1 %613, label %614, label %583

614:                                              ; preds = %583
  %615 = getelementptr inbounds i16, i16* %582, i64 64
  %616 = getelementptr inbounds i16, i16* %581, i64 %576
  %617 = add nuw nsw i32 %580, 1
  %618 = icmp eq i32 %617, 64
  br i1 %618, label %619, label %577

619:                                              ; preds = %614
  %620 = add i64 %611, 8
  %621 = lshr i64 %620, 4
  %622 = trunc i64 %621 to i32
  store i32 %622, i32* %6, align 4
  %623 = and i64 %621, 4294967295
  %624 = shl i64 %608, 30
  %625 = add i64 %624, 2147483648
  %626 = ashr i64 %625, 32
  %627 = mul nsw i64 %626, %626
  %628 = lshr i64 %627, 12
  %629 = sub nsw i64 %623, %628
  %630 = icmp sgt i64 %629, -1
  %631 = trunc i64 %629 to i32
  %632 = select i1 %630, i32 %631, i32 0
  call void @llvm.lifetime.end.p0i8(i64 8192, i8* nonnull %14) #4
  call void @llvm.lifetime.end.p0i8(i64 8192, i8* nonnull %13) #4
  call void @llvm.lifetime.end.p0i8(i64 8320, i8* nonnull %12) #4
  ret i32 %632
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_highbd_12_sub_pixel_avg_variance64x64_c(i8*, i32, i32, i32, i8*, i32, i32* nocapture, i8*) local_unnamed_addr #2 {
  %9 = alloca [4160 x i16], align 16
  %10 = alloca [4096 x i16], align 16
  %11 = alloca [4096 x i16], align 16
  %12 = bitcast [4160 x i16]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8320, i8* nonnull %12) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %12, i8 -86, i64 8320, i1 false)
  %13 = bitcast [4096 x i16]* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8192, i8* nonnull %13) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %13, i8 -86, i64 8192, i1 false)
  %14 = bitcast [4096 x i16]* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8192, i8* nonnull %14) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %14, i8 -86, i64 8192, i1 false)
  %15 = getelementptr inbounds [4160 x i16], [4160 x i16]* %9, i64 0, i64 0
  %16 = sext i32 %2 to i64
  %17 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %16, i64 0
  %18 = ptrtoint i8* %0 to i64
  %19 = shl i64 %18, 1
  %20 = inttoptr i64 %19 to i16*
  %21 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %16, i64 1
  %22 = add i32 %1, -64
  %23 = zext i32 %22 to i64
  %24 = load i8, i8* %17, align 2
  %25 = zext i8 %24 to i32
  %26 = load i8, i8* %21, align 1
  %27 = zext i8 %26 to i32
  %28 = insertelement <8 x i32> undef, i32 %25, i32 0
  %29 = shufflevector <8 x i32> %28, <8 x i32> undef, <8 x i32> zeroinitializer
  %30 = insertelement <8 x i32> undef, i32 %27, i32 0
  %31 = shufflevector <8 x i32> %30, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %32

32:                                               ; preds = %203, %8
  %33 = phi i64 [ %209, %203 ], [ 0, %8 ]
  %34 = phi i16* [ %205, %203 ], [ %20, %8 ]
  %35 = phi i32 [ %207, %203 ], [ 0, %8 ]
  %36 = phi i16* [ %206, %203 ], [ %15, %8 ]
  %37 = shl nuw nsw i64 %33, 6
  %38 = add i64 %37, 64
  %39 = getelementptr [4160 x i16], [4160 x i16]* %9, i64 0, i64 %38
  %40 = getelementptr [4160 x i16], [4160 x i16]* %9, i64 0, i64 %37
  %41 = getelementptr i16, i16* %34, i64 65
  %42 = icmp ult i16* %40, %41
  %43 = icmp ult i16* %34, %39
  %44 = and i1 %42, %43
  br i1 %44, label %173, label %45

45:                                               ; preds = %32
  %46 = getelementptr i16, i16* %34, i64 64
  %47 = bitcast i16* %34 to <8 x i16>*
  %48 = load <8 x i16>, <8 x i16>* %47, align 2, !alias.scope !474
  %49 = zext <8 x i16> %48 to <8 x i32>
  %50 = mul nuw nsw <8 x i32> %29, %49
  %51 = getelementptr inbounds i16, i16* %34, i64 1
  %52 = bitcast i16* %51 to <8 x i16>*
  %53 = load <8 x i16>, <8 x i16>* %52, align 2, !alias.scope !474
  %54 = zext <8 x i16> %53 to <8 x i32>
  %55 = mul nuw nsw <8 x i32> %31, %54
  %56 = add nuw nsw <8 x i32> %50, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %57 = add nuw nsw <8 x i32> %56, %55
  %58 = lshr <8 x i32> %57, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %59 = trunc <8 x i32> %58 to <8 x i16>
  %60 = bitcast i16* %36 to <8 x i16>*
  store <8 x i16> %59, <8 x i16>* %60, align 2, !alias.scope !477, !noalias !474
  %61 = getelementptr i16, i16* %34, i64 8
  %62 = bitcast i16* %61 to <8 x i16>*
  %63 = load <8 x i16>, <8 x i16>* %62, align 2, !alias.scope !474
  %64 = zext <8 x i16> %63 to <8 x i32>
  %65 = mul nuw nsw <8 x i32> %29, %64
  %66 = getelementptr inbounds i16, i16* %34, i64 9
  %67 = bitcast i16* %66 to <8 x i16>*
  %68 = load <8 x i16>, <8 x i16>* %67, align 2, !alias.scope !474
  %69 = zext <8 x i16> %68 to <8 x i32>
  %70 = mul nuw nsw <8 x i32> %31, %69
  %71 = add nuw nsw <8 x i32> %65, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %72 = add nuw nsw <8 x i32> %71, %70
  %73 = lshr <8 x i32> %72, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %74 = trunc <8 x i32> %73 to <8 x i16>
  %75 = getelementptr inbounds i16, i16* %36, i64 8
  %76 = bitcast i16* %75 to <8 x i16>*
  store <8 x i16> %74, <8 x i16>* %76, align 2, !alias.scope !477, !noalias !474
  %77 = getelementptr i16, i16* %34, i64 16
  %78 = bitcast i16* %77 to <8 x i16>*
  %79 = load <8 x i16>, <8 x i16>* %78, align 2, !alias.scope !474
  %80 = zext <8 x i16> %79 to <8 x i32>
  %81 = mul nuw nsw <8 x i32> %29, %80
  %82 = getelementptr inbounds i16, i16* %34, i64 17
  %83 = bitcast i16* %82 to <8 x i16>*
  %84 = load <8 x i16>, <8 x i16>* %83, align 2, !alias.scope !474
  %85 = zext <8 x i16> %84 to <8 x i32>
  %86 = mul nuw nsw <8 x i32> %31, %85
  %87 = add nuw nsw <8 x i32> %81, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %88 = add nuw nsw <8 x i32> %87, %86
  %89 = lshr <8 x i32> %88, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %90 = trunc <8 x i32> %89 to <8 x i16>
  %91 = getelementptr inbounds i16, i16* %36, i64 16
  %92 = bitcast i16* %91 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %92, align 2, !alias.scope !477, !noalias !474
  %93 = getelementptr i16, i16* %34, i64 24
  %94 = bitcast i16* %93 to <8 x i16>*
  %95 = load <8 x i16>, <8 x i16>* %94, align 2, !alias.scope !474
  %96 = zext <8 x i16> %95 to <8 x i32>
  %97 = mul nuw nsw <8 x i32> %29, %96
  %98 = getelementptr inbounds i16, i16* %34, i64 25
  %99 = bitcast i16* %98 to <8 x i16>*
  %100 = load <8 x i16>, <8 x i16>* %99, align 2, !alias.scope !474
  %101 = zext <8 x i16> %100 to <8 x i32>
  %102 = mul nuw nsw <8 x i32> %31, %101
  %103 = add nuw nsw <8 x i32> %97, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %104 = add nuw nsw <8 x i32> %103, %102
  %105 = lshr <8 x i32> %104, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %106 = trunc <8 x i32> %105 to <8 x i16>
  %107 = getelementptr inbounds i16, i16* %36, i64 24
  %108 = bitcast i16* %107 to <8 x i16>*
  store <8 x i16> %106, <8 x i16>* %108, align 2, !alias.scope !477, !noalias !474
  %109 = getelementptr i16, i16* %34, i64 32
  %110 = bitcast i16* %109 to <8 x i16>*
  %111 = load <8 x i16>, <8 x i16>* %110, align 2, !alias.scope !474
  %112 = zext <8 x i16> %111 to <8 x i32>
  %113 = mul nuw nsw <8 x i32> %29, %112
  %114 = getelementptr inbounds i16, i16* %34, i64 33
  %115 = bitcast i16* %114 to <8 x i16>*
  %116 = load <8 x i16>, <8 x i16>* %115, align 2, !alias.scope !474
  %117 = zext <8 x i16> %116 to <8 x i32>
  %118 = mul nuw nsw <8 x i32> %31, %117
  %119 = add nuw nsw <8 x i32> %113, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %120 = add nuw nsw <8 x i32> %119, %118
  %121 = lshr <8 x i32> %120, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %122 = trunc <8 x i32> %121 to <8 x i16>
  %123 = getelementptr inbounds i16, i16* %36, i64 32
  %124 = bitcast i16* %123 to <8 x i16>*
  store <8 x i16> %122, <8 x i16>* %124, align 2, !alias.scope !477, !noalias !474
  %125 = getelementptr i16, i16* %34, i64 40
  %126 = bitcast i16* %125 to <8 x i16>*
  %127 = load <8 x i16>, <8 x i16>* %126, align 2, !alias.scope !474
  %128 = zext <8 x i16> %127 to <8 x i32>
  %129 = mul nuw nsw <8 x i32> %29, %128
  %130 = getelementptr inbounds i16, i16* %34, i64 41
  %131 = bitcast i16* %130 to <8 x i16>*
  %132 = load <8 x i16>, <8 x i16>* %131, align 2, !alias.scope !474
  %133 = zext <8 x i16> %132 to <8 x i32>
  %134 = mul nuw nsw <8 x i32> %31, %133
  %135 = add nuw nsw <8 x i32> %129, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %136 = add nuw nsw <8 x i32> %135, %134
  %137 = lshr <8 x i32> %136, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %138 = trunc <8 x i32> %137 to <8 x i16>
  %139 = getelementptr inbounds i16, i16* %36, i64 40
  %140 = bitcast i16* %139 to <8 x i16>*
  store <8 x i16> %138, <8 x i16>* %140, align 2, !alias.scope !477, !noalias !474
  %141 = getelementptr i16, i16* %34, i64 48
  %142 = bitcast i16* %141 to <8 x i16>*
  %143 = load <8 x i16>, <8 x i16>* %142, align 2, !alias.scope !474
  %144 = zext <8 x i16> %143 to <8 x i32>
  %145 = mul nuw nsw <8 x i32> %29, %144
  %146 = getelementptr inbounds i16, i16* %34, i64 49
  %147 = bitcast i16* %146 to <8 x i16>*
  %148 = load <8 x i16>, <8 x i16>* %147, align 2, !alias.scope !474
  %149 = zext <8 x i16> %148 to <8 x i32>
  %150 = mul nuw nsw <8 x i32> %31, %149
  %151 = add nuw nsw <8 x i32> %145, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %152 = add nuw nsw <8 x i32> %151, %150
  %153 = lshr <8 x i32> %152, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %154 = trunc <8 x i32> %153 to <8 x i16>
  %155 = getelementptr inbounds i16, i16* %36, i64 48
  %156 = bitcast i16* %155 to <8 x i16>*
  store <8 x i16> %154, <8 x i16>* %156, align 2, !alias.scope !477, !noalias !474
  %157 = getelementptr i16, i16* %34, i64 56
  %158 = bitcast i16* %157 to <8 x i16>*
  %159 = load <8 x i16>, <8 x i16>* %158, align 2, !alias.scope !474
  %160 = zext <8 x i16> %159 to <8 x i32>
  %161 = mul nuw nsw <8 x i32> %29, %160
  %162 = getelementptr inbounds i16, i16* %34, i64 57
  %163 = bitcast i16* %162 to <8 x i16>*
  %164 = load <8 x i16>, <8 x i16>* %163, align 2, !alias.scope !474
  %165 = zext <8 x i16> %164 to <8 x i32>
  %166 = mul nuw nsw <8 x i32> %31, %165
  %167 = add nuw nsw <8 x i32> %161, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %168 = add nuw nsw <8 x i32> %167, %166
  %169 = lshr <8 x i32> %168, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %170 = trunc <8 x i32> %169 to <8 x i16>
  %171 = getelementptr inbounds i16, i16* %36, i64 56
  %172 = bitcast i16* %171 to <8 x i16>*
  store <8 x i16> %170, <8 x i16>* %172, align 2, !alias.scope !477, !noalias !474
  br label %203

173:                                              ; preds = %32, %173
  %174 = phi i64 [ %201, %173 ], [ 0, %32 ]
  %175 = phi i16* [ %192, %173 ], [ %34, %32 ]
  %176 = load i16, i16* %175, align 2
  %177 = zext i16 %176 to i32
  %178 = mul nuw nsw i32 %25, %177
  %179 = getelementptr inbounds i16, i16* %175, i64 1
  %180 = load i16, i16* %179, align 2
  %181 = zext i16 %180 to i32
  %182 = mul nuw nsw i32 %27, %181
  %183 = add nuw nsw i32 %178, 64
  %184 = add nuw nsw i32 %183, %182
  %185 = lshr i32 %184, 7
  %186 = trunc i32 %185 to i16
  %187 = getelementptr inbounds i16, i16* %36, i64 %174
  store i16 %186, i16* %187, align 2
  %188 = or i64 %174, 1
  %189 = load i16, i16* %179, align 2
  %190 = zext i16 %189 to i32
  %191 = mul nuw nsw i32 %25, %190
  %192 = getelementptr inbounds i16, i16* %175, i64 2
  %193 = load i16, i16* %192, align 2
  %194 = zext i16 %193 to i32
  %195 = mul nuw nsw i32 %27, %194
  %196 = add nuw nsw i32 %191, 64
  %197 = add nuw nsw i32 %196, %195
  %198 = lshr i32 %197, 7
  %199 = trunc i32 %198 to i16
  %200 = getelementptr inbounds i16, i16* %36, i64 %188
  store i16 %199, i16* %200, align 2
  %201 = add nuw nsw i64 %174, 2
  %202 = icmp eq i64 %201, 64
  br i1 %202, label %203, label %173, !llvm.loop !479

203:                                              ; preds = %173, %45
  %204 = phi i16* [ %46, %45 ], [ %192, %173 ]
  %205 = getelementptr inbounds i16, i16* %204, i64 %23
  %206 = getelementptr inbounds i16, i16* %36, i64 64
  %207 = add nuw nsw i32 %35, 1
  %208 = icmp eq i32 %207, 65
  %209 = add i64 %33, 1
  br i1 %208, label %210, label %32

210:                                              ; preds = %203
  %211 = getelementptr inbounds [4096 x i16], [4096 x i16]* %10, i64 0, i64 0
  %212 = sext i32 %3 to i64
  %213 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %212, i64 0
  %214 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %212, i64 1
  %215 = load i8, i8* %213, align 2
  %216 = zext i8 %215 to i32
  %217 = load i8, i8* %214, align 1
  %218 = zext i8 %217 to i32
  %219 = insertelement <8 x i32> undef, i32 %216, i32 0
  %220 = shufflevector <8 x i32> %219, <8 x i32> undef, <8 x i32> zeroinitializer
  %221 = insertelement <8 x i32> undef, i32 %218, i32 0
  %222 = shufflevector <8 x i32> %221, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %223

223:                                              ; preds = %396, %210
  %224 = phi i64 [ %401, %396 ], [ 0, %210 ]
  %225 = phi i32 [ %399, %396 ], [ 0, %210 ]
  %226 = phi i16* [ %397, %396 ], [ %15, %210 ]
  %227 = phi i16* [ %398, %396 ], [ %211, %210 ]
  %228 = shl nuw nsw i64 %224, 6
  %229 = add i64 %228, 64
  %230 = getelementptr [4096 x i16], [4096 x i16]* %10, i64 0, i64 %229
  %231 = getelementptr [4096 x i16], [4096 x i16]* %10, i64 0, i64 %228
  %232 = getelementptr i16, i16* %226, i64 128
  %233 = icmp ult i16* %231, %232
  %234 = icmp ult i16* %226, %230
  %235 = and i1 %233, %234
  br i1 %235, label %364, label %236

236:                                              ; preds = %223
  %237 = getelementptr i16, i16* %226, i64 64
  %238 = bitcast i16* %226 to <8 x i16>*
  %239 = load <8 x i16>, <8 x i16>* %238, align 2, !alias.scope !480
  %240 = zext <8 x i16> %239 to <8 x i32>
  %241 = mul nuw nsw <8 x i32> %220, %240
  %242 = getelementptr inbounds i16, i16* %226, i64 64
  %243 = bitcast i16* %242 to <8 x i16>*
  %244 = load <8 x i16>, <8 x i16>* %243, align 2, !alias.scope !480
  %245 = zext <8 x i16> %244 to <8 x i32>
  %246 = mul nuw nsw <8 x i32> %222, %245
  %247 = add nuw nsw <8 x i32> %241, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %248 = add nuw nsw <8 x i32> %247, %246
  %249 = lshr <8 x i32> %248, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %250 = trunc <8 x i32> %249 to <8 x i16>
  %251 = bitcast i16* %227 to <8 x i16>*
  store <8 x i16> %250, <8 x i16>* %251, align 2, !alias.scope !483, !noalias !480
  %252 = getelementptr i16, i16* %226, i64 8
  %253 = bitcast i16* %252 to <8 x i16>*
  %254 = load <8 x i16>, <8 x i16>* %253, align 2, !alias.scope !480
  %255 = zext <8 x i16> %254 to <8 x i32>
  %256 = mul nuw nsw <8 x i32> %220, %255
  %257 = getelementptr inbounds i16, i16* %226, i64 72
  %258 = bitcast i16* %257 to <8 x i16>*
  %259 = load <8 x i16>, <8 x i16>* %258, align 2, !alias.scope !480
  %260 = zext <8 x i16> %259 to <8 x i32>
  %261 = mul nuw nsw <8 x i32> %222, %260
  %262 = add nuw nsw <8 x i32> %256, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %263 = add nuw nsw <8 x i32> %262, %261
  %264 = lshr <8 x i32> %263, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %265 = trunc <8 x i32> %264 to <8 x i16>
  %266 = getelementptr inbounds i16, i16* %227, i64 8
  %267 = bitcast i16* %266 to <8 x i16>*
  store <8 x i16> %265, <8 x i16>* %267, align 2, !alias.scope !483, !noalias !480
  %268 = getelementptr i16, i16* %226, i64 16
  %269 = bitcast i16* %268 to <8 x i16>*
  %270 = load <8 x i16>, <8 x i16>* %269, align 2, !alias.scope !480
  %271 = zext <8 x i16> %270 to <8 x i32>
  %272 = mul nuw nsw <8 x i32> %220, %271
  %273 = getelementptr inbounds i16, i16* %226, i64 80
  %274 = bitcast i16* %273 to <8 x i16>*
  %275 = load <8 x i16>, <8 x i16>* %274, align 2, !alias.scope !480
  %276 = zext <8 x i16> %275 to <8 x i32>
  %277 = mul nuw nsw <8 x i32> %222, %276
  %278 = add nuw nsw <8 x i32> %272, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %279 = add nuw nsw <8 x i32> %278, %277
  %280 = lshr <8 x i32> %279, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %281 = trunc <8 x i32> %280 to <8 x i16>
  %282 = getelementptr inbounds i16, i16* %227, i64 16
  %283 = bitcast i16* %282 to <8 x i16>*
  store <8 x i16> %281, <8 x i16>* %283, align 2, !alias.scope !483, !noalias !480
  %284 = getelementptr i16, i16* %226, i64 24
  %285 = bitcast i16* %284 to <8 x i16>*
  %286 = load <8 x i16>, <8 x i16>* %285, align 2, !alias.scope !480
  %287 = zext <8 x i16> %286 to <8 x i32>
  %288 = mul nuw nsw <8 x i32> %220, %287
  %289 = getelementptr inbounds i16, i16* %226, i64 88
  %290 = bitcast i16* %289 to <8 x i16>*
  %291 = load <8 x i16>, <8 x i16>* %290, align 2, !alias.scope !480
  %292 = zext <8 x i16> %291 to <8 x i32>
  %293 = mul nuw nsw <8 x i32> %222, %292
  %294 = add nuw nsw <8 x i32> %288, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %295 = add nuw nsw <8 x i32> %294, %293
  %296 = lshr <8 x i32> %295, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %297 = trunc <8 x i32> %296 to <8 x i16>
  %298 = getelementptr inbounds i16, i16* %227, i64 24
  %299 = bitcast i16* %298 to <8 x i16>*
  store <8 x i16> %297, <8 x i16>* %299, align 2, !alias.scope !483, !noalias !480
  %300 = getelementptr i16, i16* %226, i64 32
  %301 = bitcast i16* %300 to <8 x i16>*
  %302 = load <8 x i16>, <8 x i16>* %301, align 2, !alias.scope !480
  %303 = zext <8 x i16> %302 to <8 x i32>
  %304 = mul nuw nsw <8 x i32> %220, %303
  %305 = getelementptr inbounds i16, i16* %226, i64 96
  %306 = bitcast i16* %305 to <8 x i16>*
  %307 = load <8 x i16>, <8 x i16>* %306, align 2, !alias.scope !480
  %308 = zext <8 x i16> %307 to <8 x i32>
  %309 = mul nuw nsw <8 x i32> %222, %308
  %310 = add nuw nsw <8 x i32> %304, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %311 = add nuw nsw <8 x i32> %310, %309
  %312 = lshr <8 x i32> %311, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %313 = trunc <8 x i32> %312 to <8 x i16>
  %314 = getelementptr inbounds i16, i16* %227, i64 32
  %315 = bitcast i16* %314 to <8 x i16>*
  store <8 x i16> %313, <8 x i16>* %315, align 2, !alias.scope !483, !noalias !480
  %316 = getelementptr i16, i16* %226, i64 40
  %317 = bitcast i16* %316 to <8 x i16>*
  %318 = load <8 x i16>, <8 x i16>* %317, align 2, !alias.scope !480
  %319 = zext <8 x i16> %318 to <8 x i32>
  %320 = mul nuw nsw <8 x i32> %220, %319
  %321 = getelementptr inbounds i16, i16* %226, i64 104
  %322 = bitcast i16* %321 to <8 x i16>*
  %323 = load <8 x i16>, <8 x i16>* %322, align 2, !alias.scope !480
  %324 = zext <8 x i16> %323 to <8 x i32>
  %325 = mul nuw nsw <8 x i32> %222, %324
  %326 = add nuw nsw <8 x i32> %320, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %327 = add nuw nsw <8 x i32> %326, %325
  %328 = lshr <8 x i32> %327, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %329 = trunc <8 x i32> %328 to <8 x i16>
  %330 = getelementptr inbounds i16, i16* %227, i64 40
  %331 = bitcast i16* %330 to <8 x i16>*
  store <8 x i16> %329, <8 x i16>* %331, align 2, !alias.scope !483, !noalias !480
  %332 = getelementptr i16, i16* %226, i64 48
  %333 = bitcast i16* %332 to <8 x i16>*
  %334 = load <8 x i16>, <8 x i16>* %333, align 2, !alias.scope !480
  %335 = zext <8 x i16> %334 to <8 x i32>
  %336 = mul nuw nsw <8 x i32> %220, %335
  %337 = getelementptr inbounds i16, i16* %226, i64 112
  %338 = bitcast i16* %337 to <8 x i16>*
  %339 = load <8 x i16>, <8 x i16>* %338, align 2, !alias.scope !480
  %340 = zext <8 x i16> %339 to <8 x i32>
  %341 = mul nuw nsw <8 x i32> %222, %340
  %342 = add nuw nsw <8 x i32> %336, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %343 = add nuw nsw <8 x i32> %342, %341
  %344 = lshr <8 x i32> %343, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %345 = trunc <8 x i32> %344 to <8 x i16>
  %346 = getelementptr inbounds i16, i16* %227, i64 48
  %347 = bitcast i16* %346 to <8 x i16>*
  store <8 x i16> %345, <8 x i16>* %347, align 2, !alias.scope !483, !noalias !480
  %348 = getelementptr i16, i16* %226, i64 56
  %349 = bitcast i16* %348 to <8 x i16>*
  %350 = load <8 x i16>, <8 x i16>* %349, align 2, !alias.scope !480
  %351 = zext <8 x i16> %350 to <8 x i32>
  %352 = mul nuw nsw <8 x i32> %220, %351
  %353 = getelementptr inbounds i16, i16* %226, i64 120
  %354 = bitcast i16* %353 to <8 x i16>*
  %355 = load <8 x i16>, <8 x i16>* %354, align 2, !alias.scope !480
  %356 = zext <8 x i16> %355 to <8 x i32>
  %357 = mul nuw nsw <8 x i32> %222, %356
  %358 = add nuw nsw <8 x i32> %352, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %359 = add nuw nsw <8 x i32> %358, %357
  %360 = lshr <8 x i32> %359, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %361 = trunc <8 x i32> %360 to <8 x i16>
  %362 = getelementptr inbounds i16, i16* %227, i64 56
  %363 = bitcast i16* %362 to <8 x i16>*
  store <8 x i16> %361, <8 x i16>* %363, align 2, !alias.scope !483, !noalias !480
  br label %396

364:                                              ; preds = %223, %364
  %365 = phi i64 [ %394, %364 ], [ 0, %223 ]
  %366 = phi i16* [ %393, %364 ], [ %226, %223 ]
  %367 = load i16, i16* %366, align 2
  %368 = zext i16 %367 to i32
  %369 = mul nuw nsw i32 %216, %368
  %370 = getelementptr inbounds i16, i16* %366, i64 64
  %371 = load i16, i16* %370, align 2
  %372 = zext i16 %371 to i32
  %373 = mul nuw nsw i32 %218, %372
  %374 = add nuw nsw i32 %369, 64
  %375 = add nuw nsw i32 %374, %373
  %376 = lshr i32 %375, 7
  %377 = trunc i32 %376 to i16
  %378 = getelementptr inbounds i16, i16* %227, i64 %365
  store i16 %377, i16* %378, align 2
  %379 = getelementptr inbounds i16, i16* %366, i64 1
  %380 = or i64 %365, 1
  %381 = load i16, i16* %379, align 2
  %382 = zext i16 %381 to i32
  %383 = mul nuw nsw i32 %216, %382
  %384 = getelementptr inbounds i16, i16* %366, i64 65
  %385 = load i16, i16* %384, align 2
  %386 = zext i16 %385 to i32
  %387 = mul nuw nsw i32 %218, %386
  %388 = add nuw nsw i32 %383, 64
  %389 = add nuw nsw i32 %388, %387
  %390 = lshr i32 %389, 7
  %391 = trunc i32 %390 to i16
  %392 = getelementptr inbounds i16, i16* %227, i64 %380
  store i16 %391, i16* %392, align 2
  %393 = getelementptr inbounds i16, i16* %366, i64 2
  %394 = add nuw nsw i64 %365, 2
  %395 = icmp eq i64 %394, 64
  br i1 %395, label %396, label %364, !llvm.loop !485

396:                                              ; preds = %364, %236
  %397 = phi i16* [ %237, %236 ], [ %393, %364 ]
  %398 = getelementptr inbounds i16, i16* %227, i64 64
  %399 = add nuw nsw i32 %225, 1
  %400 = icmp eq i32 %399, 64
  %401 = add i64 %224, 1
  br i1 %400, label %402, label %223

402:                                              ; preds = %396
  %403 = getelementptr inbounds [4096 x i16], [4096 x i16]* %11, i64 0, i64 0
  %404 = ptrtoint i8* %7 to i64
  %405 = shl i64 %404, 1
  %406 = inttoptr i64 %405 to i16*
  br label %407

407:                                              ; preds = %565, %402
  %408 = phi i64 [ %571, %565 ], [ 0, %402 ]
  %409 = phi i16* [ %566, %565 ], [ %403, %402 ]
  %410 = phi i32 [ %569, %565 ], [ 0, %402 ]
  %411 = phi i16* [ %567, %565 ], [ %406, %402 ]
  %412 = phi i16* [ %568, %565 ], [ %211, %402 ]
  %413 = shl nuw nsw i64 %408, 6
  %414 = getelementptr [4096 x i16], [4096 x i16]* %11, i64 0, i64 %413
  %415 = add i64 %413, 64
  %416 = getelementptr [4096 x i16], [4096 x i16]* %11, i64 0, i64 %415
  %417 = getelementptr [4096 x i16], [4096 x i16]* %10, i64 0, i64 %415
  %418 = getelementptr [4096 x i16], [4096 x i16]* %10, i64 0, i64 %413
  %419 = getelementptr i16, i16* %406, i64 %415
  %420 = getelementptr i16, i16* %406, i64 %413
  %421 = icmp ult i16* %414, %419
  %422 = icmp ult i16* %420, %416
  %423 = and i1 %421, %422
  %424 = icmp ult i16* %414, %417
  %425 = icmp ult i16* %418, %416
  %426 = and i1 %424, %425
  %427 = or i1 %423, %426
  br i1 %427, label %538, label %428

428:                                              ; preds = %407
  %429 = bitcast i16* %411 to <8 x i16>*
  %430 = load <8 x i16>, <8 x i16>* %429, align 2, !alias.scope !486
  %431 = zext <8 x i16> %430 to <8 x i32>
  %432 = bitcast i16* %412 to <8 x i16>*
  %433 = load <8 x i16>, <8 x i16>* %432, align 2, !alias.scope !489
  %434 = zext <8 x i16> %433 to <8 x i32>
  %435 = add nuw nsw <8 x i32> %431, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %436 = add nuw nsw <8 x i32> %435, %434
  %437 = lshr <8 x i32> %436, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %438 = trunc <8 x i32> %437 to <8 x i16>
  %439 = bitcast i16* %409 to <8 x i16>*
  store <8 x i16> %438, <8 x i16>* %439, align 2, !alias.scope !491, !noalias !493
  %440 = getelementptr inbounds i16, i16* %411, i64 8
  %441 = bitcast i16* %440 to <8 x i16>*
  %442 = load <8 x i16>, <8 x i16>* %441, align 2, !alias.scope !486
  %443 = zext <8 x i16> %442 to <8 x i32>
  %444 = getelementptr inbounds i16, i16* %412, i64 8
  %445 = bitcast i16* %444 to <8 x i16>*
  %446 = load <8 x i16>, <8 x i16>* %445, align 2, !alias.scope !489
  %447 = zext <8 x i16> %446 to <8 x i32>
  %448 = add nuw nsw <8 x i32> %443, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %449 = add nuw nsw <8 x i32> %448, %447
  %450 = lshr <8 x i32> %449, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %451 = trunc <8 x i32> %450 to <8 x i16>
  %452 = getelementptr inbounds i16, i16* %409, i64 8
  %453 = bitcast i16* %452 to <8 x i16>*
  store <8 x i16> %451, <8 x i16>* %453, align 2, !alias.scope !491, !noalias !493
  %454 = getelementptr inbounds i16, i16* %411, i64 16
  %455 = bitcast i16* %454 to <8 x i16>*
  %456 = load <8 x i16>, <8 x i16>* %455, align 2, !alias.scope !486
  %457 = zext <8 x i16> %456 to <8 x i32>
  %458 = getelementptr inbounds i16, i16* %412, i64 16
  %459 = bitcast i16* %458 to <8 x i16>*
  %460 = load <8 x i16>, <8 x i16>* %459, align 2, !alias.scope !489
  %461 = zext <8 x i16> %460 to <8 x i32>
  %462 = add nuw nsw <8 x i32> %457, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %463 = add nuw nsw <8 x i32> %462, %461
  %464 = lshr <8 x i32> %463, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %465 = trunc <8 x i32> %464 to <8 x i16>
  %466 = getelementptr inbounds i16, i16* %409, i64 16
  %467 = bitcast i16* %466 to <8 x i16>*
  store <8 x i16> %465, <8 x i16>* %467, align 2, !alias.scope !491, !noalias !493
  %468 = getelementptr inbounds i16, i16* %411, i64 24
  %469 = bitcast i16* %468 to <8 x i16>*
  %470 = load <8 x i16>, <8 x i16>* %469, align 2, !alias.scope !486
  %471 = zext <8 x i16> %470 to <8 x i32>
  %472 = getelementptr inbounds i16, i16* %412, i64 24
  %473 = bitcast i16* %472 to <8 x i16>*
  %474 = load <8 x i16>, <8 x i16>* %473, align 2, !alias.scope !489
  %475 = zext <8 x i16> %474 to <8 x i32>
  %476 = add nuw nsw <8 x i32> %471, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %477 = add nuw nsw <8 x i32> %476, %475
  %478 = lshr <8 x i32> %477, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %479 = trunc <8 x i32> %478 to <8 x i16>
  %480 = getelementptr inbounds i16, i16* %409, i64 24
  %481 = bitcast i16* %480 to <8 x i16>*
  store <8 x i16> %479, <8 x i16>* %481, align 2, !alias.scope !491, !noalias !493
  %482 = getelementptr inbounds i16, i16* %411, i64 32
  %483 = bitcast i16* %482 to <8 x i16>*
  %484 = load <8 x i16>, <8 x i16>* %483, align 2, !alias.scope !486
  %485 = zext <8 x i16> %484 to <8 x i32>
  %486 = getelementptr inbounds i16, i16* %412, i64 32
  %487 = bitcast i16* %486 to <8 x i16>*
  %488 = load <8 x i16>, <8 x i16>* %487, align 2, !alias.scope !489
  %489 = zext <8 x i16> %488 to <8 x i32>
  %490 = add nuw nsw <8 x i32> %485, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %491 = add nuw nsw <8 x i32> %490, %489
  %492 = lshr <8 x i32> %491, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %493 = trunc <8 x i32> %492 to <8 x i16>
  %494 = getelementptr inbounds i16, i16* %409, i64 32
  %495 = bitcast i16* %494 to <8 x i16>*
  store <8 x i16> %493, <8 x i16>* %495, align 2, !alias.scope !491, !noalias !493
  %496 = getelementptr inbounds i16, i16* %411, i64 40
  %497 = bitcast i16* %496 to <8 x i16>*
  %498 = load <8 x i16>, <8 x i16>* %497, align 2, !alias.scope !486
  %499 = zext <8 x i16> %498 to <8 x i32>
  %500 = getelementptr inbounds i16, i16* %412, i64 40
  %501 = bitcast i16* %500 to <8 x i16>*
  %502 = load <8 x i16>, <8 x i16>* %501, align 2, !alias.scope !489
  %503 = zext <8 x i16> %502 to <8 x i32>
  %504 = add nuw nsw <8 x i32> %499, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %505 = add nuw nsw <8 x i32> %504, %503
  %506 = lshr <8 x i32> %505, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %507 = trunc <8 x i32> %506 to <8 x i16>
  %508 = getelementptr inbounds i16, i16* %409, i64 40
  %509 = bitcast i16* %508 to <8 x i16>*
  store <8 x i16> %507, <8 x i16>* %509, align 2, !alias.scope !491, !noalias !493
  %510 = getelementptr inbounds i16, i16* %411, i64 48
  %511 = bitcast i16* %510 to <8 x i16>*
  %512 = load <8 x i16>, <8 x i16>* %511, align 2, !alias.scope !486
  %513 = zext <8 x i16> %512 to <8 x i32>
  %514 = getelementptr inbounds i16, i16* %412, i64 48
  %515 = bitcast i16* %514 to <8 x i16>*
  %516 = load <8 x i16>, <8 x i16>* %515, align 2, !alias.scope !489
  %517 = zext <8 x i16> %516 to <8 x i32>
  %518 = add nuw nsw <8 x i32> %513, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %519 = add nuw nsw <8 x i32> %518, %517
  %520 = lshr <8 x i32> %519, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %521 = trunc <8 x i32> %520 to <8 x i16>
  %522 = getelementptr inbounds i16, i16* %409, i64 48
  %523 = bitcast i16* %522 to <8 x i16>*
  store <8 x i16> %521, <8 x i16>* %523, align 2, !alias.scope !491, !noalias !493
  %524 = getelementptr inbounds i16, i16* %411, i64 56
  %525 = bitcast i16* %524 to <8 x i16>*
  %526 = load <8 x i16>, <8 x i16>* %525, align 2, !alias.scope !486
  %527 = zext <8 x i16> %526 to <8 x i32>
  %528 = getelementptr inbounds i16, i16* %412, i64 56
  %529 = bitcast i16* %528 to <8 x i16>*
  %530 = load <8 x i16>, <8 x i16>* %529, align 2, !alias.scope !489
  %531 = zext <8 x i16> %530 to <8 x i32>
  %532 = add nuw nsw <8 x i32> %527, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %533 = add nuw nsw <8 x i32> %532, %531
  %534 = lshr <8 x i32> %533, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %535 = trunc <8 x i32> %534 to <8 x i16>
  %536 = getelementptr inbounds i16, i16* %409, i64 56
  %537 = bitcast i16* %536 to <8 x i16>*
  store <8 x i16> %535, <8 x i16>* %537, align 2, !alias.scope !491, !noalias !493
  br label %565

538:                                              ; preds = %407, %538
  %539 = phi i64 [ %563, %538 ], [ 0, %407 ]
  %540 = getelementptr inbounds i16, i16* %411, i64 %539
  %541 = load i16, i16* %540, align 2
  %542 = zext i16 %541 to i32
  %543 = getelementptr inbounds i16, i16* %412, i64 %539
  %544 = load i16, i16* %543, align 2
  %545 = zext i16 %544 to i32
  %546 = add nuw nsw i32 %542, 1
  %547 = add nuw nsw i32 %546, %545
  %548 = lshr i32 %547, 1
  %549 = trunc i32 %548 to i16
  %550 = getelementptr inbounds i16, i16* %409, i64 %539
  store i16 %549, i16* %550, align 2
  %551 = or i64 %539, 1
  %552 = getelementptr inbounds i16, i16* %411, i64 %551
  %553 = load i16, i16* %552, align 2
  %554 = zext i16 %553 to i32
  %555 = getelementptr inbounds i16, i16* %412, i64 %551
  %556 = load i16, i16* %555, align 2
  %557 = zext i16 %556 to i32
  %558 = add nuw nsw i32 %554, 1
  %559 = add nuw nsw i32 %558, %557
  %560 = lshr i32 %559, 1
  %561 = trunc i32 %560 to i16
  %562 = getelementptr inbounds i16, i16* %409, i64 %551
  store i16 %561, i16* %562, align 2
  %563 = add nuw nsw i64 %539, 2
  %564 = icmp eq i64 %563, 64
  br i1 %564, label %565, label %538, !llvm.loop !494

565:                                              ; preds = %538, %428
  %566 = getelementptr inbounds i16, i16* %409, i64 64
  %567 = getelementptr inbounds i16, i16* %411, i64 64
  %568 = getelementptr inbounds i16, i16* %412, i64 64
  %569 = add nuw nsw i32 %410, 1
  %570 = icmp eq i32 %569, 64
  %571 = add i64 %408, 1
  br i1 %570, label %572, label %407

572:                                              ; preds = %565
  %573 = ptrtoint i8* %4 to i64
  %574 = shl i64 %573, 1
  %575 = inttoptr i64 %574 to i16*
  %576 = sext i32 %5 to i64
  br label %577

577:                                              ; preds = %614, %572
  %578 = phi i64 [ 0, %572 ], [ %611, %614 ]
  %579 = phi i64 [ 0, %572 ], [ %608, %614 ]
  %580 = phi i32 [ 0, %572 ], [ %617, %614 ]
  %581 = phi i16* [ %575, %572 ], [ %616, %614 ]
  %582 = phi i16* [ %403, %572 ], [ %615, %614 ]
  br label %583

583:                                              ; preds = %583, %577
  %584 = phi i64 [ %578, %577 ], [ %611, %583 ]
  %585 = phi i64 [ %579, %577 ], [ %608, %583 ]
  %586 = phi i64 [ 0, %577 ], [ %612, %583 ]
  %587 = getelementptr inbounds i16, i16* %582, i64 %586
  %588 = load i16, i16* %587, align 2
  %589 = zext i16 %588 to i32
  %590 = getelementptr inbounds i16, i16* %581, i64 %586
  %591 = load i16, i16* %590, align 2
  %592 = zext i16 %591 to i32
  %593 = sub nsw i32 %589, %592
  %594 = sext i32 %593 to i64
  %595 = add nsw i64 %585, %594
  %596 = mul nsw i32 %593, %593
  %597 = zext i32 %596 to i64
  %598 = add i64 %584, %597
  %599 = or i64 %586, 1
  %600 = getelementptr inbounds i16, i16* %582, i64 %599
  %601 = load i16, i16* %600, align 2
  %602 = zext i16 %601 to i32
  %603 = getelementptr inbounds i16, i16* %581, i64 %599
  %604 = load i16, i16* %603, align 2
  %605 = zext i16 %604 to i32
  %606 = sub nsw i32 %602, %605
  %607 = sext i32 %606 to i64
  %608 = add nsw i64 %595, %607
  %609 = mul nsw i32 %606, %606
  %610 = zext i32 %609 to i64
  %611 = add i64 %598, %610
  %612 = add nuw nsw i64 %586, 2
  %613 = icmp eq i64 %612, 64
  br i1 %613, label %614, label %583

614:                                              ; preds = %583
  %615 = getelementptr inbounds i16, i16* %582, i64 64
  %616 = getelementptr inbounds i16, i16* %581, i64 %576
  %617 = add nuw nsw i32 %580, 1
  %618 = icmp eq i32 %617, 64
  br i1 %618, label %619, label %577

619:                                              ; preds = %614
  %620 = add i64 %611, 128
  %621 = lshr i64 %620, 8
  %622 = trunc i64 %621 to i32
  store i32 %622, i32* %6, align 4
  %623 = and i64 %621, 4294967295
  %624 = shl i64 %608, 28
  %625 = add i64 %624, 2147483648
  %626 = ashr i64 %625, 32
  %627 = mul nsw i64 %626, %626
  %628 = lshr i64 %627, 12
  %629 = sub nsw i64 %623, %628
  %630 = icmp sgt i64 %629, -1
  %631 = trunc i64 %629 to i32
  %632 = select i1 %630, i32 %631, i32 0
  call void @llvm.lifetime.end.p0i8(i64 8192, i8* nonnull %14) #4
  call void @llvm.lifetime.end.p0i8(i64 8192, i8* nonnull %13) #4
  call void @llvm.lifetime.end.p0i8(i64 8320, i8* nonnull %12) #4
  ret i32 %632
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_highbd_8_variance64x32_c(i8*, i32, i8*, i32, i32* nocapture) local_unnamed_addr #2 {
  %6 = ptrtoint i8* %2 to i64
  %7 = shl i64 %6, 1
  %8 = inttoptr i64 %7 to i16*
  %9 = ptrtoint i8* %0 to i64
  %10 = shl i64 %9, 1
  %11 = inttoptr i64 %10 to i16*
  %12 = sext i32 %1 to i64
  %13 = sext i32 %3 to i64
  br label %14

14:                                               ; preds = %51, %5
  %15 = phi i64 [ 0, %5 ], [ %48, %51 ]
  %16 = phi i64 [ 0, %5 ], [ %45, %51 ]
  %17 = phi i32 [ 0, %5 ], [ %54, %51 ]
  %18 = phi i16* [ %8, %5 ], [ %53, %51 ]
  %19 = phi i16* [ %11, %5 ], [ %52, %51 ]
  br label %20

20:                                               ; preds = %20, %14
  %21 = phi i64 [ %15, %14 ], [ %48, %20 ]
  %22 = phi i64 [ %16, %14 ], [ %45, %20 ]
  %23 = phi i64 [ 0, %14 ], [ %49, %20 ]
  %24 = getelementptr inbounds i16, i16* %19, i64 %23
  %25 = load i16, i16* %24, align 2
  %26 = zext i16 %25 to i32
  %27 = getelementptr inbounds i16, i16* %18, i64 %23
  %28 = load i16, i16* %27, align 2
  %29 = zext i16 %28 to i32
  %30 = sub nsw i32 %26, %29
  %31 = sext i32 %30 to i64
  %32 = add nsw i64 %22, %31
  %33 = mul nsw i32 %30, %30
  %34 = zext i32 %33 to i64
  %35 = add i64 %21, %34
  %36 = or i64 %23, 1
  %37 = getelementptr inbounds i16, i16* %19, i64 %36
  %38 = load i16, i16* %37, align 2
  %39 = zext i16 %38 to i32
  %40 = getelementptr inbounds i16, i16* %18, i64 %36
  %41 = load i16, i16* %40, align 2
  %42 = zext i16 %41 to i32
  %43 = sub nsw i32 %39, %42
  %44 = sext i32 %43 to i64
  %45 = add nsw i64 %32, %44
  %46 = mul nsw i32 %43, %43
  %47 = zext i32 %46 to i64
  %48 = add i64 %35, %47
  %49 = add nuw nsw i64 %23, 2
  %50 = icmp eq i64 %49, 64
  br i1 %50, label %51, label %20

51:                                               ; preds = %20
  %52 = getelementptr inbounds i16, i16* %19, i64 %12
  %53 = getelementptr inbounds i16, i16* %18, i64 %13
  %54 = add nuw nsw i32 %17, 1
  %55 = icmp eq i32 %54, 32
  br i1 %55, label %56, label %14

56:                                               ; preds = %51
  %57 = trunc i64 %48 to i32
  store i32 %57, i32* %4, align 4
  %58 = shl i64 %45, 32
  %59 = ashr exact i64 %58, 32
  %60 = mul nsw i64 %59, %59
  %61 = lshr i64 %60, 11
  %62 = trunc i64 %61 to i32
  %63 = sub i32 %57, %62
  ret i32 %63
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_highbd_10_variance64x32_c(i8*, i32, i8*, i32, i32* nocapture) local_unnamed_addr #2 {
  %6 = ptrtoint i8* %2 to i64
  %7 = shl i64 %6, 1
  %8 = inttoptr i64 %7 to i16*
  %9 = ptrtoint i8* %0 to i64
  %10 = shl i64 %9, 1
  %11 = inttoptr i64 %10 to i16*
  %12 = sext i32 %1 to i64
  %13 = sext i32 %3 to i64
  br label %14

14:                                               ; preds = %51, %5
  %15 = phi i64 [ 0, %5 ], [ %48, %51 ]
  %16 = phi i64 [ 0, %5 ], [ %45, %51 ]
  %17 = phi i32 [ 0, %5 ], [ %54, %51 ]
  %18 = phi i16* [ %8, %5 ], [ %53, %51 ]
  %19 = phi i16* [ %11, %5 ], [ %52, %51 ]
  br label %20

20:                                               ; preds = %20, %14
  %21 = phi i64 [ %15, %14 ], [ %48, %20 ]
  %22 = phi i64 [ %16, %14 ], [ %45, %20 ]
  %23 = phi i64 [ 0, %14 ], [ %49, %20 ]
  %24 = getelementptr inbounds i16, i16* %19, i64 %23
  %25 = load i16, i16* %24, align 2
  %26 = zext i16 %25 to i32
  %27 = getelementptr inbounds i16, i16* %18, i64 %23
  %28 = load i16, i16* %27, align 2
  %29 = zext i16 %28 to i32
  %30 = sub nsw i32 %26, %29
  %31 = sext i32 %30 to i64
  %32 = add nsw i64 %22, %31
  %33 = mul nsw i32 %30, %30
  %34 = zext i32 %33 to i64
  %35 = add i64 %21, %34
  %36 = or i64 %23, 1
  %37 = getelementptr inbounds i16, i16* %19, i64 %36
  %38 = load i16, i16* %37, align 2
  %39 = zext i16 %38 to i32
  %40 = getelementptr inbounds i16, i16* %18, i64 %36
  %41 = load i16, i16* %40, align 2
  %42 = zext i16 %41 to i32
  %43 = sub nsw i32 %39, %42
  %44 = sext i32 %43 to i64
  %45 = add nsw i64 %32, %44
  %46 = mul nsw i32 %43, %43
  %47 = zext i32 %46 to i64
  %48 = add i64 %35, %47
  %49 = add nuw nsw i64 %23, 2
  %50 = icmp eq i64 %49, 64
  br i1 %50, label %51, label %20

51:                                               ; preds = %20
  %52 = getelementptr inbounds i16, i16* %19, i64 %12
  %53 = getelementptr inbounds i16, i16* %18, i64 %13
  %54 = add nuw nsw i32 %17, 1
  %55 = icmp eq i32 %54, 32
  br i1 %55, label %56, label %14

56:                                               ; preds = %51
  %57 = add i64 %48, 8
  %58 = lshr i64 %57, 4
  %59 = trunc i64 %58 to i32
  store i32 %59, i32* %4, align 4
  %60 = and i64 %58, 4294967295
  %61 = shl i64 %45, 30
  %62 = add i64 %61, 2147483648
  %63 = ashr i64 %62, 32
  %64 = mul nsw i64 %63, %63
  %65 = lshr i64 %64, 11
  %66 = sub nsw i64 %60, %65
  %67 = icmp sgt i64 %66, -1
  %68 = trunc i64 %66 to i32
  %69 = select i1 %67, i32 %68, i32 0
  ret i32 %69
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_highbd_12_variance64x32_c(i8*, i32, i8*, i32, i32* nocapture) local_unnamed_addr #2 {
  %6 = ptrtoint i8* %2 to i64
  %7 = shl i64 %6, 1
  %8 = inttoptr i64 %7 to i16*
  %9 = ptrtoint i8* %0 to i64
  %10 = shl i64 %9, 1
  %11 = inttoptr i64 %10 to i16*
  %12 = sext i32 %1 to i64
  %13 = sext i32 %3 to i64
  br label %14

14:                                               ; preds = %51, %5
  %15 = phi i64 [ 0, %5 ], [ %48, %51 ]
  %16 = phi i64 [ 0, %5 ], [ %45, %51 ]
  %17 = phi i32 [ 0, %5 ], [ %54, %51 ]
  %18 = phi i16* [ %8, %5 ], [ %53, %51 ]
  %19 = phi i16* [ %11, %5 ], [ %52, %51 ]
  br label %20

20:                                               ; preds = %20, %14
  %21 = phi i64 [ %15, %14 ], [ %48, %20 ]
  %22 = phi i64 [ %16, %14 ], [ %45, %20 ]
  %23 = phi i64 [ 0, %14 ], [ %49, %20 ]
  %24 = getelementptr inbounds i16, i16* %19, i64 %23
  %25 = load i16, i16* %24, align 2
  %26 = zext i16 %25 to i32
  %27 = getelementptr inbounds i16, i16* %18, i64 %23
  %28 = load i16, i16* %27, align 2
  %29 = zext i16 %28 to i32
  %30 = sub nsw i32 %26, %29
  %31 = sext i32 %30 to i64
  %32 = add nsw i64 %22, %31
  %33 = mul nsw i32 %30, %30
  %34 = zext i32 %33 to i64
  %35 = add i64 %21, %34
  %36 = or i64 %23, 1
  %37 = getelementptr inbounds i16, i16* %19, i64 %36
  %38 = load i16, i16* %37, align 2
  %39 = zext i16 %38 to i32
  %40 = getelementptr inbounds i16, i16* %18, i64 %36
  %41 = load i16, i16* %40, align 2
  %42 = zext i16 %41 to i32
  %43 = sub nsw i32 %39, %42
  %44 = sext i32 %43 to i64
  %45 = add nsw i64 %32, %44
  %46 = mul nsw i32 %43, %43
  %47 = zext i32 %46 to i64
  %48 = add i64 %35, %47
  %49 = add nuw nsw i64 %23, 2
  %50 = icmp eq i64 %49, 64
  br i1 %50, label %51, label %20

51:                                               ; preds = %20
  %52 = getelementptr inbounds i16, i16* %19, i64 %12
  %53 = getelementptr inbounds i16, i16* %18, i64 %13
  %54 = add nuw nsw i32 %17, 1
  %55 = icmp eq i32 %54, 32
  br i1 %55, label %56, label %14

56:                                               ; preds = %51
  %57 = add i64 %48, 128
  %58 = lshr i64 %57, 8
  %59 = trunc i64 %58 to i32
  store i32 %59, i32* %4, align 4
  %60 = and i64 %58, 4294967295
  %61 = shl i64 %45, 28
  %62 = add i64 %61, 2147483648
  %63 = ashr i64 %62, 32
  %64 = mul nsw i64 %63, %63
  %65 = lshr i64 %64, 11
  %66 = sub nsw i64 %60, %65
  %67 = icmp sgt i64 %66, -1
  %68 = trunc i64 %66 to i32
  %69 = select i1 %67, i32 %68, i32 0
  ret i32 %69
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_highbd_8_sub_pixel_variance64x32_c(i8*, i32, i32, i32, i8*, i32, i32* nocapture) local_unnamed_addr #2 {
  %8 = alloca [2112 x i16], align 16
  %9 = alloca [2048 x i16], align 16
  %10 = bitcast [2112 x i16]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4224, i8* nonnull %10) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %10, i8 -86, i64 4224, i1 false)
  %11 = bitcast [2048 x i16]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4096, i8* nonnull %11) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %11, i8 -86, i64 4096, i1 false)
  %12 = getelementptr inbounds [2112 x i16], [2112 x i16]* %8, i64 0, i64 0
  %13 = sext i32 %2 to i64
  %14 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %13, i64 0
  %15 = ptrtoint i8* %0 to i64
  %16 = shl i64 %15, 1
  %17 = inttoptr i64 %16 to i16*
  %18 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %13, i64 1
  %19 = add i32 %1, -64
  %20 = zext i32 %19 to i64
  %21 = load i8, i8* %14, align 2
  %22 = zext i8 %21 to i32
  %23 = load i8, i8* %18, align 1
  %24 = zext i8 %23 to i32
  %25 = insertelement <8 x i32> undef, i32 %22, i32 0
  %26 = shufflevector <8 x i32> %25, <8 x i32> undef, <8 x i32> zeroinitializer
  %27 = insertelement <8 x i32> undef, i32 %24, i32 0
  %28 = shufflevector <8 x i32> %27, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %29

29:                                               ; preds = %200, %7
  %30 = phi i64 [ %206, %200 ], [ 0, %7 ]
  %31 = phi i16* [ %202, %200 ], [ %17, %7 ]
  %32 = phi i32 [ %204, %200 ], [ 0, %7 ]
  %33 = phi i16* [ %203, %200 ], [ %12, %7 ]
  %34 = shl nuw nsw i64 %30, 6
  %35 = add i64 %34, 64
  %36 = getelementptr [2112 x i16], [2112 x i16]* %8, i64 0, i64 %35
  %37 = getelementptr [2112 x i16], [2112 x i16]* %8, i64 0, i64 %34
  %38 = getelementptr i16, i16* %31, i64 65
  %39 = icmp ult i16* %37, %38
  %40 = icmp ult i16* %31, %36
  %41 = and i1 %39, %40
  br i1 %41, label %170, label %42

42:                                               ; preds = %29
  %43 = getelementptr i16, i16* %31, i64 64
  %44 = bitcast i16* %31 to <8 x i16>*
  %45 = load <8 x i16>, <8 x i16>* %44, align 2, !alias.scope !495
  %46 = zext <8 x i16> %45 to <8 x i32>
  %47 = mul nuw nsw <8 x i32> %26, %46
  %48 = getelementptr inbounds i16, i16* %31, i64 1
  %49 = bitcast i16* %48 to <8 x i16>*
  %50 = load <8 x i16>, <8 x i16>* %49, align 2, !alias.scope !495
  %51 = zext <8 x i16> %50 to <8 x i32>
  %52 = mul nuw nsw <8 x i32> %28, %51
  %53 = add nuw nsw <8 x i32> %47, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %54 = add nuw nsw <8 x i32> %53, %52
  %55 = lshr <8 x i32> %54, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %56 = trunc <8 x i32> %55 to <8 x i16>
  %57 = bitcast i16* %33 to <8 x i16>*
  store <8 x i16> %56, <8 x i16>* %57, align 2, !alias.scope !498, !noalias !495
  %58 = getelementptr i16, i16* %31, i64 8
  %59 = bitcast i16* %58 to <8 x i16>*
  %60 = load <8 x i16>, <8 x i16>* %59, align 2, !alias.scope !495
  %61 = zext <8 x i16> %60 to <8 x i32>
  %62 = mul nuw nsw <8 x i32> %26, %61
  %63 = getelementptr inbounds i16, i16* %31, i64 9
  %64 = bitcast i16* %63 to <8 x i16>*
  %65 = load <8 x i16>, <8 x i16>* %64, align 2, !alias.scope !495
  %66 = zext <8 x i16> %65 to <8 x i32>
  %67 = mul nuw nsw <8 x i32> %28, %66
  %68 = add nuw nsw <8 x i32> %62, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %69 = add nuw nsw <8 x i32> %68, %67
  %70 = lshr <8 x i32> %69, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %71 = trunc <8 x i32> %70 to <8 x i16>
  %72 = getelementptr inbounds i16, i16* %33, i64 8
  %73 = bitcast i16* %72 to <8 x i16>*
  store <8 x i16> %71, <8 x i16>* %73, align 2, !alias.scope !498, !noalias !495
  %74 = getelementptr i16, i16* %31, i64 16
  %75 = bitcast i16* %74 to <8 x i16>*
  %76 = load <8 x i16>, <8 x i16>* %75, align 2, !alias.scope !495
  %77 = zext <8 x i16> %76 to <8 x i32>
  %78 = mul nuw nsw <8 x i32> %26, %77
  %79 = getelementptr inbounds i16, i16* %31, i64 17
  %80 = bitcast i16* %79 to <8 x i16>*
  %81 = load <8 x i16>, <8 x i16>* %80, align 2, !alias.scope !495
  %82 = zext <8 x i16> %81 to <8 x i32>
  %83 = mul nuw nsw <8 x i32> %28, %82
  %84 = add nuw nsw <8 x i32> %78, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %85 = add nuw nsw <8 x i32> %84, %83
  %86 = lshr <8 x i32> %85, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %87 = trunc <8 x i32> %86 to <8 x i16>
  %88 = getelementptr inbounds i16, i16* %33, i64 16
  %89 = bitcast i16* %88 to <8 x i16>*
  store <8 x i16> %87, <8 x i16>* %89, align 2, !alias.scope !498, !noalias !495
  %90 = getelementptr i16, i16* %31, i64 24
  %91 = bitcast i16* %90 to <8 x i16>*
  %92 = load <8 x i16>, <8 x i16>* %91, align 2, !alias.scope !495
  %93 = zext <8 x i16> %92 to <8 x i32>
  %94 = mul nuw nsw <8 x i32> %26, %93
  %95 = getelementptr inbounds i16, i16* %31, i64 25
  %96 = bitcast i16* %95 to <8 x i16>*
  %97 = load <8 x i16>, <8 x i16>* %96, align 2, !alias.scope !495
  %98 = zext <8 x i16> %97 to <8 x i32>
  %99 = mul nuw nsw <8 x i32> %28, %98
  %100 = add nuw nsw <8 x i32> %94, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %101 = add nuw nsw <8 x i32> %100, %99
  %102 = lshr <8 x i32> %101, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %103 = trunc <8 x i32> %102 to <8 x i16>
  %104 = getelementptr inbounds i16, i16* %33, i64 24
  %105 = bitcast i16* %104 to <8 x i16>*
  store <8 x i16> %103, <8 x i16>* %105, align 2, !alias.scope !498, !noalias !495
  %106 = getelementptr i16, i16* %31, i64 32
  %107 = bitcast i16* %106 to <8 x i16>*
  %108 = load <8 x i16>, <8 x i16>* %107, align 2, !alias.scope !495
  %109 = zext <8 x i16> %108 to <8 x i32>
  %110 = mul nuw nsw <8 x i32> %26, %109
  %111 = getelementptr inbounds i16, i16* %31, i64 33
  %112 = bitcast i16* %111 to <8 x i16>*
  %113 = load <8 x i16>, <8 x i16>* %112, align 2, !alias.scope !495
  %114 = zext <8 x i16> %113 to <8 x i32>
  %115 = mul nuw nsw <8 x i32> %28, %114
  %116 = add nuw nsw <8 x i32> %110, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %117 = add nuw nsw <8 x i32> %116, %115
  %118 = lshr <8 x i32> %117, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %119 = trunc <8 x i32> %118 to <8 x i16>
  %120 = getelementptr inbounds i16, i16* %33, i64 32
  %121 = bitcast i16* %120 to <8 x i16>*
  store <8 x i16> %119, <8 x i16>* %121, align 2, !alias.scope !498, !noalias !495
  %122 = getelementptr i16, i16* %31, i64 40
  %123 = bitcast i16* %122 to <8 x i16>*
  %124 = load <8 x i16>, <8 x i16>* %123, align 2, !alias.scope !495
  %125 = zext <8 x i16> %124 to <8 x i32>
  %126 = mul nuw nsw <8 x i32> %26, %125
  %127 = getelementptr inbounds i16, i16* %31, i64 41
  %128 = bitcast i16* %127 to <8 x i16>*
  %129 = load <8 x i16>, <8 x i16>* %128, align 2, !alias.scope !495
  %130 = zext <8 x i16> %129 to <8 x i32>
  %131 = mul nuw nsw <8 x i32> %28, %130
  %132 = add nuw nsw <8 x i32> %126, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %133 = add nuw nsw <8 x i32> %132, %131
  %134 = lshr <8 x i32> %133, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %135 = trunc <8 x i32> %134 to <8 x i16>
  %136 = getelementptr inbounds i16, i16* %33, i64 40
  %137 = bitcast i16* %136 to <8 x i16>*
  store <8 x i16> %135, <8 x i16>* %137, align 2, !alias.scope !498, !noalias !495
  %138 = getelementptr i16, i16* %31, i64 48
  %139 = bitcast i16* %138 to <8 x i16>*
  %140 = load <8 x i16>, <8 x i16>* %139, align 2, !alias.scope !495
  %141 = zext <8 x i16> %140 to <8 x i32>
  %142 = mul nuw nsw <8 x i32> %26, %141
  %143 = getelementptr inbounds i16, i16* %31, i64 49
  %144 = bitcast i16* %143 to <8 x i16>*
  %145 = load <8 x i16>, <8 x i16>* %144, align 2, !alias.scope !495
  %146 = zext <8 x i16> %145 to <8 x i32>
  %147 = mul nuw nsw <8 x i32> %28, %146
  %148 = add nuw nsw <8 x i32> %142, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %149 = add nuw nsw <8 x i32> %148, %147
  %150 = lshr <8 x i32> %149, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %151 = trunc <8 x i32> %150 to <8 x i16>
  %152 = getelementptr inbounds i16, i16* %33, i64 48
  %153 = bitcast i16* %152 to <8 x i16>*
  store <8 x i16> %151, <8 x i16>* %153, align 2, !alias.scope !498, !noalias !495
  %154 = getelementptr i16, i16* %31, i64 56
  %155 = bitcast i16* %154 to <8 x i16>*
  %156 = load <8 x i16>, <8 x i16>* %155, align 2, !alias.scope !495
  %157 = zext <8 x i16> %156 to <8 x i32>
  %158 = mul nuw nsw <8 x i32> %26, %157
  %159 = getelementptr inbounds i16, i16* %31, i64 57
  %160 = bitcast i16* %159 to <8 x i16>*
  %161 = load <8 x i16>, <8 x i16>* %160, align 2, !alias.scope !495
  %162 = zext <8 x i16> %161 to <8 x i32>
  %163 = mul nuw nsw <8 x i32> %28, %162
  %164 = add nuw nsw <8 x i32> %158, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %165 = add nuw nsw <8 x i32> %164, %163
  %166 = lshr <8 x i32> %165, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %167 = trunc <8 x i32> %166 to <8 x i16>
  %168 = getelementptr inbounds i16, i16* %33, i64 56
  %169 = bitcast i16* %168 to <8 x i16>*
  store <8 x i16> %167, <8 x i16>* %169, align 2, !alias.scope !498, !noalias !495
  br label %200

170:                                              ; preds = %29, %170
  %171 = phi i64 [ %198, %170 ], [ 0, %29 ]
  %172 = phi i16* [ %189, %170 ], [ %31, %29 ]
  %173 = load i16, i16* %172, align 2
  %174 = zext i16 %173 to i32
  %175 = mul nuw nsw i32 %22, %174
  %176 = getelementptr inbounds i16, i16* %172, i64 1
  %177 = load i16, i16* %176, align 2
  %178 = zext i16 %177 to i32
  %179 = mul nuw nsw i32 %24, %178
  %180 = add nuw nsw i32 %175, 64
  %181 = add nuw nsw i32 %180, %179
  %182 = lshr i32 %181, 7
  %183 = trunc i32 %182 to i16
  %184 = getelementptr inbounds i16, i16* %33, i64 %171
  store i16 %183, i16* %184, align 2
  %185 = or i64 %171, 1
  %186 = load i16, i16* %176, align 2
  %187 = zext i16 %186 to i32
  %188 = mul nuw nsw i32 %22, %187
  %189 = getelementptr inbounds i16, i16* %172, i64 2
  %190 = load i16, i16* %189, align 2
  %191 = zext i16 %190 to i32
  %192 = mul nuw nsw i32 %24, %191
  %193 = add nuw nsw i32 %188, 64
  %194 = add nuw nsw i32 %193, %192
  %195 = lshr i32 %194, 7
  %196 = trunc i32 %195 to i16
  %197 = getelementptr inbounds i16, i16* %33, i64 %185
  store i16 %196, i16* %197, align 2
  %198 = add nuw nsw i64 %171, 2
  %199 = icmp eq i64 %198, 64
  br i1 %199, label %200, label %170, !llvm.loop !500

200:                                              ; preds = %170, %42
  %201 = phi i16* [ %43, %42 ], [ %189, %170 ]
  %202 = getelementptr inbounds i16, i16* %201, i64 %20
  %203 = getelementptr inbounds i16, i16* %33, i64 64
  %204 = add nuw nsw i32 %32, 1
  %205 = icmp eq i32 %204, 33
  %206 = add i64 %30, 1
  br i1 %205, label %207, label %29

207:                                              ; preds = %200
  %208 = getelementptr inbounds [2048 x i16], [2048 x i16]* %9, i64 0, i64 0
  %209 = sext i32 %3 to i64
  %210 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %209, i64 0
  %211 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %209, i64 1
  %212 = load i8, i8* %210, align 2
  %213 = zext i8 %212 to i32
  %214 = load i8, i8* %211, align 1
  %215 = zext i8 %214 to i32
  %216 = insertelement <8 x i32> undef, i32 %213, i32 0
  %217 = shufflevector <8 x i32> %216, <8 x i32> undef, <8 x i32> zeroinitializer
  %218 = insertelement <8 x i32> undef, i32 %215, i32 0
  %219 = shufflevector <8 x i32> %218, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %220

220:                                              ; preds = %393, %207
  %221 = phi i64 [ %398, %393 ], [ 0, %207 ]
  %222 = phi i32 [ %396, %393 ], [ 0, %207 ]
  %223 = phi i16* [ %394, %393 ], [ %12, %207 ]
  %224 = phi i16* [ %395, %393 ], [ %208, %207 ]
  %225 = shl nuw nsw i64 %221, 6
  %226 = add i64 %225, 64
  %227 = getelementptr [2048 x i16], [2048 x i16]* %9, i64 0, i64 %226
  %228 = getelementptr [2048 x i16], [2048 x i16]* %9, i64 0, i64 %225
  %229 = getelementptr i16, i16* %223, i64 128
  %230 = icmp ult i16* %228, %229
  %231 = icmp ult i16* %223, %227
  %232 = and i1 %230, %231
  br i1 %232, label %361, label %233

233:                                              ; preds = %220
  %234 = getelementptr i16, i16* %223, i64 64
  %235 = bitcast i16* %223 to <8 x i16>*
  %236 = load <8 x i16>, <8 x i16>* %235, align 2, !alias.scope !501
  %237 = zext <8 x i16> %236 to <8 x i32>
  %238 = mul nuw nsw <8 x i32> %217, %237
  %239 = getelementptr inbounds i16, i16* %223, i64 64
  %240 = bitcast i16* %239 to <8 x i16>*
  %241 = load <8 x i16>, <8 x i16>* %240, align 2, !alias.scope !501
  %242 = zext <8 x i16> %241 to <8 x i32>
  %243 = mul nuw nsw <8 x i32> %219, %242
  %244 = add nuw nsw <8 x i32> %238, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %245 = add nuw nsw <8 x i32> %244, %243
  %246 = lshr <8 x i32> %245, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %247 = trunc <8 x i32> %246 to <8 x i16>
  %248 = bitcast i16* %224 to <8 x i16>*
  store <8 x i16> %247, <8 x i16>* %248, align 2, !alias.scope !504, !noalias !501
  %249 = getelementptr i16, i16* %223, i64 8
  %250 = bitcast i16* %249 to <8 x i16>*
  %251 = load <8 x i16>, <8 x i16>* %250, align 2, !alias.scope !501
  %252 = zext <8 x i16> %251 to <8 x i32>
  %253 = mul nuw nsw <8 x i32> %217, %252
  %254 = getelementptr inbounds i16, i16* %223, i64 72
  %255 = bitcast i16* %254 to <8 x i16>*
  %256 = load <8 x i16>, <8 x i16>* %255, align 2, !alias.scope !501
  %257 = zext <8 x i16> %256 to <8 x i32>
  %258 = mul nuw nsw <8 x i32> %219, %257
  %259 = add nuw nsw <8 x i32> %253, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %260 = add nuw nsw <8 x i32> %259, %258
  %261 = lshr <8 x i32> %260, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %262 = trunc <8 x i32> %261 to <8 x i16>
  %263 = getelementptr inbounds i16, i16* %224, i64 8
  %264 = bitcast i16* %263 to <8 x i16>*
  store <8 x i16> %262, <8 x i16>* %264, align 2, !alias.scope !504, !noalias !501
  %265 = getelementptr i16, i16* %223, i64 16
  %266 = bitcast i16* %265 to <8 x i16>*
  %267 = load <8 x i16>, <8 x i16>* %266, align 2, !alias.scope !501
  %268 = zext <8 x i16> %267 to <8 x i32>
  %269 = mul nuw nsw <8 x i32> %217, %268
  %270 = getelementptr inbounds i16, i16* %223, i64 80
  %271 = bitcast i16* %270 to <8 x i16>*
  %272 = load <8 x i16>, <8 x i16>* %271, align 2, !alias.scope !501
  %273 = zext <8 x i16> %272 to <8 x i32>
  %274 = mul nuw nsw <8 x i32> %219, %273
  %275 = add nuw nsw <8 x i32> %269, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %276 = add nuw nsw <8 x i32> %275, %274
  %277 = lshr <8 x i32> %276, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %278 = trunc <8 x i32> %277 to <8 x i16>
  %279 = getelementptr inbounds i16, i16* %224, i64 16
  %280 = bitcast i16* %279 to <8 x i16>*
  store <8 x i16> %278, <8 x i16>* %280, align 2, !alias.scope !504, !noalias !501
  %281 = getelementptr i16, i16* %223, i64 24
  %282 = bitcast i16* %281 to <8 x i16>*
  %283 = load <8 x i16>, <8 x i16>* %282, align 2, !alias.scope !501
  %284 = zext <8 x i16> %283 to <8 x i32>
  %285 = mul nuw nsw <8 x i32> %217, %284
  %286 = getelementptr inbounds i16, i16* %223, i64 88
  %287 = bitcast i16* %286 to <8 x i16>*
  %288 = load <8 x i16>, <8 x i16>* %287, align 2, !alias.scope !501
  %289 = zext <8 x i16> %288 to <8 x i32>
  %290 = mul nuw nsw <8 x i32> %219, %289
  %291 = add nuw nsw <8 x i32> %285, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %292 = add nuw nsw <8 x i32> %291, %290
  %293 = lshr <8 x i32> %292, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %294 = trunc <8 x i32> %293 to <8 x i16>
  %295 = getelementptr inbounds i16, i16* %224, i64 24
  %296 = bitcast i16* %295 to <8 x i16>*
  store <8 x i16> %294, <8 x i16>* %296, align 2, !alias.scope !504, !noalias !501
  %297 = getelementptr i16, i16* %223, i64 32
  %298 = bitcast i16* %297 to <8 x i16>*
  %299 = load <8 x i16>, <8 x i16>* %298, align 2, !alias.scope !501
  %300 = zext <8 x i16> %299 to <8 x i32>
  %301 = mul nuw nsw <8 x i32> %217, %300
  %302 = getelementptr inbounds i16, i16* %223, i64 96
  %303 = bitcast i16* %302 to <8 x i16>*
  %304 = load <8 x i16>, <8 x i16>* %303, align 2, !alias.scope !501
  %305 = zext <8 x i16> %304 to <8 x i32>
  %306 = mul nuw nsw <8 x i32> %219, %305
  %307 = add nuw nsw <8 x i32> %301, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %308 = add nuw nsw <8 x i32> %307, %306
  %309 = lshr <8 x i32> %308, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %310 = trunc <8 x i32> %309 to <8 x i16>
  %311 = getelementptr inbounds i16, i16* %224, i64 32
  %312 = bitcast i16* %311 to <8 x i16>*
  store <8 x i16> %310, <8 x i16>* %312, align 2, !alias.scope !504, !noalias !501
  %313 = getelementptr i16, i16* %223, i64 40
  %314 = bitcast i16* %313 to <8 x i16>*
  %315 = load <8 x i16>, <8 x i16>* %314, align 2, !alias.scope !501
  %316 = zext <8 x i16> %315 to <8 x i32>
  %317 = mul nuw nsw <8 x i32> %217, %316
  %318 = getelementptr inbounds i16, i16* %223, i64 104
  %319 = bitcast i16* %318 to <8 x i16>*
  %320 = load <8 x i16>, <8 x i16>* %319, align 2, !alias.scope !501
  %321 = zext <8 x i16> %320 to <8 x i32>
  %322 = mul nuw nsw <8 x i32> %219, %321
  %323 = add nuw nsw <8 x i32> %317, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %324 = add nuw nsw <8 x i32> %323, %322
  %325 = lshr <8 x i32> %324, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %326 = trunc <8 x i32> %325 to <8 x i16>
  %327 = getelementptr inbounds i16, i16* %224, i64 40
  %328 = bitcast i16* %327 to <8 x i16>*
  store <8 x i16> %326, <8 x i16>* %328, align 2, !alias.scope !504, !noalias !501
  %329 = getelementptr i16, i16* %223, i64 48
  %330 = bitcast i16* %329 to <8 x i16>*
  %331 = load <8 x i16>, <8 x i16>* %330, align 2, !alias.scope !501
  %332 = zext <8 x i16> %331 to <8 x i32>
  %333 = mul nuw nsw <8 x i32> %217, %332
  %334 = getelementptr inbounds i16, i16* %223, i64 112
  %335 = bitcast i16* %334 to <8 x i16>*
  %336 = load <8 x i16>, <8 x i16>* %335, align 2, !alias.scope !501
  %337 = zext <8 x i16> %336 to <8 x i32>
  %338 = mul nuw nsw <8 x i32> %219, %337
  %339 = add nuw nsw <8 x i32> %333, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %340 = add nuw nsw <8 x i32> %339, %338
  %341 = lshr <8 x i32> %340, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %342 = trunc <8 x i32> %341 to <8 x i16>
  %343 = getelementptr inbounds i16, i16* %224, i64 48
  %344 = bitcast i16* %343 to <8 x i16>*
  store <8 x i16> %342, <8 x i16>* %344, align 2, !alias.scope !504, !noalias !501
  %345 = getelementptr i16, i16* %223, i64 56
  %346 = bitcast i16* %345 to <8 x i16>*
  %347 = load <8 x i16>, <8 x i16>* %346, align 2, !alias.scope !501
  %348 = zext <8 x i16> %347 to <8 x i32>
  %349 = mul nuw nsw <8 x i32> %217, %348
  %350 = getelementptr inbounds i16, i16* %223, i64 120
  %351 = bitcast i16* %350 to <8 x i16>*
  %352 = load <8 x i16>, <8 x i16>* %351, align 2, !alias.scope !501
  %353 = zext <8 x i16> %352 to <8 x i32>
  %354 = mul nuw nsw <8 x i32> %219, %353
  %355 = add nuw nsw <8 x i32> %349, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %356 = add nuw nsw <8 x i32> %355, %354
  %357 = lshr <8 x i32> %356, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %358 = trunc <8 x i32> %357 to <8 x i16>
  %359 = getelementptr inbounds i16, i16* %224, i64 56
  %360 = bitcast i16* %359 to <8 x i16>*
  store <8 x i16> %358, <8 x i16>* %360, align 2, !alias.scope !504, !noalias !501
  br label %393

361:                                              ; preds = %220, %361
  %362 = phi i64 [ %391, %361 ], [ 0, %220 ]
  %363 = phi i16* [ %390, %361 ], [ %223, %220 ]
  %364 = load i16, i16* %363, align 2
  %365 = zext i16 %364 to i32
  %366 = mul nuw nsw i32 %213, %365
  %367 = getelementptr inbounds i16, i16* %363, i64 64
  %368 = load i16, i16* %367, align 2
  %369 = zext i16 %368 to i32
  %370 = mul nuw nsw i32 %215, %369
  %371 = add nuw nsw i32 %366, 64
  %372 = add nuw nsw i32 %371, %370
  %373 = lshr i32 %372, 7
  %374 = trunc i32 %373 to i16
  %375 = getelementptr inbounds i16, i16* %224, i64 %362
  store i16 %374, i16* %375, align 2
  %376 = getelementptr inbounds i16, i16* %363, i64 1
  %377 = or i64 %362, 1
  %378 = load i16, i16* %376, align 2
  %379 = zext i16 %378 to i32
  %380 = mul nuw nsw i32 %213, %379
  %381 = getelementptr inbounds i16, i16* %363, i64 65
  %382 = load i16, i16* %381, align 2
  %383 = zext i16 %382 to i32
  %384 = mul nuw nsw i32 %215, %383
  %385 = add nuw nsw i32 %380, 64
  %386 = add nuw nsw i32 %385, %384
  %387 = lshr i32 %386, 7
  %388 = trunc i32 %387 to i16
  %389 = getelementptr inbounds i16, i16* %224, i64 %377
  store i16 %388, i16* %389, align 2
  %390 = getelementptr inbounds i16, i16* %363, i64 2
  %391 = add nuw nsw i64 %362, 2
  %392 = icmp eq i64 %391, 64
  br i1 %392, label %393, label %361, !llvm.loop !506

393:                                              ; preds = %361, %233
  %394 = phi i16* [ %234, %233 ], [ %390, %361 ]
  %395 = getelementptr inbounds i16, i16* %224, i64 64
  %396 = add nuw nsw i32 %222, 1
  %397 = icmp eq i32 %396, 32
  %398 = add i64 %221, 1
  br i1 %397, label %399, label %220

399:                                              ; preds = %393
  %400 = ptrtoint i8* %4 to i64
  %401 = shl i64 %400, 1
  %402 = inttoptr i64 %401 to i16*
  %403 = sext i32 %5 to i64
  br label %404

404:                                              ; preds = %441, %399
  %405 = phi i64 [ 0, %399 ], [ %438, %441 ]
  %406 = phi i64 [ 0, %399 ], [ %435, %441 ]
  %407 = phi i32 [ 0, %399 ], [ %444, %441 ]
  %408 = phi i16* [ %402, %399 ], [ %443, %441 ]
  %409 = phi i16* [ %208, %399 ], [ %442, %441 ]
  br label %410

410:                                              ; preds = %410, %404
  %411 = phi i64 [ %405, %404 ], [ %438, %410 ]
  %412 = phi i64 [ %406, %404 ], [ %435, %410 ]
  %413 = phi i64 [ 0, %404 ], [ %439, %410 ]
  %414 = getelementptr inbounds i16, i16* %409, i64 %413
  %415 = load i16, i16* %414, align 2
  %416 = zext i16 %415 to i32
  %417 = getelementptr inbounds i16, i16* %408, i64 %413
  %418 = load i16, i16* %417, align 2
  %419 = zext i16 %418 to i32
  %420 = sub nsw i32 %416, %419
  %421 = sext i32 %420 to i64
  %422 = add nsw i64 %412, %421
  %423 = mul nsw i32 %420, %420
  %424 = zext i32 %423 to i64
  %425 = add i64 %411, %424
  %426 = or i64 %413, 1
  %427 = getelementptr inbounds i16, i16* %409, i64 %426
  %428 = load i16, i16* %427, align 2
  %429 = zext i16 %428 to i32
  %430 = getelementptr inbounds i16, i16* %408, i64 %426
  %431 = load i16, i16* %430, align 2
  %432 = zext i16 %431 to i32
  %433 = sub nsw i32 %429, %432
  %434 = sext i32 %433 to i64
  %435 = add nsw i64 %422, %434
  %436 = mul nsw i32 %433, %433
  %437 = zext i32 %436 to i64
  %438 = add i64 %425, %437
  %439 = add nuw nsw i64 %413, 2
  %440 = icmp eq i64 %439, 64
  br i1 %440, label %441, label %410

441:                                              ; preds = %410
  %442 = getelementptr inbounds i16, i16* %409, i64 64
  %443 = getelementptr inbounds i16, i16* %408, i64 %403
  %444 = add nuw nsw i32 %407, 1
  %445 = icmp eq i32 %444, 32
  br i1 %445, label %446, label %404

446:                                              ; preds = %441
  %447 = trunc i64 %438 to i32
  store i32 %447, i32* %6, align 4
  %448 = shl i64 %435, 32
  %449 = ashr exact i64 %448, 32
  %450 = mul nsw i64 %449, %449
  %451 = lshr i64 %450, 11
  %452 = trunc i64 %451 to i32
  %453 = sub i32 %447, %452
  call void @llvm.lifetime.end.p0i8(i64 4096, i8* nonnull %11) #4
  call void @llvm.lifetime.end.p0i8(i64 4224, i8* nonnull %10) #4
  ret i32 %453
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_highbd_10_sub_pixel_variance64x32_c(i8*, i32, i32, i32, i8*, i32, i32* nocapture) local_unnamed_addr #2 {
  %8 = alloca [2112 x i16], align 16
  %9 = alloca [2048 x i16], align 16
  %10 = bitcast [2112 x i16]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4224, i8* nonnull %10) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %10, i8 -86, i64 4224, i1 false)
  %11 = bitcast [2048 x i16]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4096, i8* nonnull %11) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %11, i8 -86, i64 4096, i1 false)
  %12 = getelementptr inbounds [2112 x i16], [2112 x i16]* %8, i64 0, i64 0
  %13 = sext i32 %2 to i64
  %14 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %13, i64 0
  %15 = ptrtoint i8* %0 to i64
  %16 = shl i64 %15, 1
  %17 = inttoptr i64 %16 to i16*
  %18 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %13, i64 1
  %19 = add i32 %1, -64
  %20 = zext i32 %19 to i64
  %21 = load i8, i8* %14, align 2
  %22 = zext i8 %21 to i32
  %23 = load i8, i8* %18, align 1
  %24 = zext i8 %23 to i32
  %25 = insertelement <8 x i32> undef, i32 %22, i32 0
  %26 = shufflevector <8 x i32> %25, <8 x i32> undef, <8 x i32> zeroinitializer
  %27 = insertelement <8 x i32> undef, i32 %24, i32 0
  %28 = shufflevector <8 x i32> %27, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %29

29:                                               ; preds = %200, %7
  %30 = phi i64 [ %206, %200 ], [ 0, %7 ]
  %31 = phi i16* [ %202, %200 ], [ %17, %7 ]
  %32 = phi i32 [ %204, %200 ], [ 0, %7 ]
  %33 = phi i16* [ %203, %200 ], [ %12, %7 ]
  %34 = shl nuw nsw i64 %30, 6
  %35 = add i64 %34, 64
  %36 = getelementptr [2112 x i16], [2112 x i16]* %8, i64 0, i64 %35
  %37 = getelementptr [2112 x i16], [2112 x i16]* %8, i64 0, i64 %34
  %38 = getelementptr i16, i16* %31, i64 65
  %39 = icmp ult i16* %37, %38
  %40 = icmp ult i16* %31, %36
  %41 = and i1 %39, %40
  br i1 %41, label %170, label %42

42:                                               ; preds = %29
  %43 = getelementptr i16, i16* %31, i64 64
  %44 = bitcast i16* %31 to <8 x i16>*
  %45 = load <8 x i16>, <8 x i16>* %44, align 2, !alias.scope !507
  %46 = zext <8 x i16> %45 to <8 x i32>
  %47 = mul nuw nsw <8 x i32> %26, %46
  %48 = getelementptr inbounds i16, i16* %31, i64 1
  %49 = bitcast i16* %48 to <8 x i16>*
  %50 = load <8 x i16>, <8 x i16>* %49, align 2, !alias.scope !507
  %51 = zext <8 x i16> %50 to <8 x i32>
  %52 = mul nuw nsw <8 x i32> %28, %51
  %53 = add nuw nsw <8 x i32> %47, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %54 = add nuw nsw <8 x i32> %53, %52
  %55 = lshr <8 x i32> %54, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %56 = trunc <8 x i32> %55 to <8 x i16>
  %57 = bitcast i16* %33 to <8 x i16>*
  store <8 x i16> %56, <8 x i16>* %57, align 2, !alias.scope !510, !noalias !507
  %58 = getelementptr i16, i16* %31, i64 8
  %59 = bitcast i16* %58 to <8 x i16>*
  %60 = load <8 x i16>, <8 x i16>* %59, align 2, !alias.scope !507
  %61 = zext <8 x i16> %60 to <8 x i32>
  %62 = mul nuw nsw <8 x i32> %26, %61
  %63 = getelementptr inbounds i16, i16* %31, i64 9
  %64 = bitcast i16* %63 to <8 x i16>*
  %65 = load <8 x i16>, <8 x i16>* %64, align 2, !alias.scope !507
  %66 = zext <8 x i16> %65 to <8 x i32>
  %67 = mul nuw nsw <8 x i32> %28, %66
  %68 = add nuw nsw <8 x i32> %62, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %69 = add nuw nsw <8 x i32> %68, %67
  %70 = lshr <8 x i32> %69, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %71 = trunc <8 x i32> %70 to <8 x i16>
  %72 = getelementptr inbounds i16, i16* %33, i64 8
  %73 = bitcast i16* %72 to <8 x i16>*
  store <8 x i16> %71, <8 x i16>* %73, align 2, !alias.scope !510, !noalias !507
  %74 = getelementptr i16, i16* %31, i64 16
  %75 = bitcast i16* %74 to <8 x i16>*
  %76 = load <8 x i16>, <8 x i16>* %75, align 2, !alias.scope !507
  %77 = zext <8 x i16> %76 to <8 x i32>
  %78 = mul nuw nsw <8 x i32> %26, %77
  %79 = getelementptr inbounds i16, i16* %31, i64 17
  %80 = bitcast i16* %79 to <8 x i16>*
  %81 = load <8 x i16>, <8 x i16>* %80, align 2, !alias.scope !507
  %82 = zext <8 x i16> %81 to <8 x i32>
  %83 = mul nuw nsw <8 x i32> %28, %82
  %84 = add nuw nsw <8 x i32> %78, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %85 = add nuw nsw <8 x i32> %84, %83
  %86 = lshr <8 x i32> %85, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %87 = trunc <8 x i32> %86 to <8 x i16>
  %88 = getelementptr inbounds i16, i16* %33, i64 16
  %89 = bitcast i16* %88 to <8 x i16>*
  store <8 x i16> %87, <8 x i16>* %89, align 2, !alias.scope !510, !noalias !507
  %90 = getelementptr i16, i16* %31, i64 24
  %91 = bitcast i16* %90 to <8 x i16>*
  %92 = load <8 x i16>, <8 x i16>* %91, align 2, !alias.scope !507
  %93 = zext <8 x i16> %92 to <8 x i32>
  %94 = mul nuw nsw <8 x i32> %26, %93
  %95 = getelementptr inbounds i16, i16* %31, i64 25
  %96 = bitcast i16* %95 to <8 x i16>*
  %97 = load <8 x i16>, <8 x i16>* %96, align 2, !alias.scope !507
  %98 = zext <8 x i16> %97 to <8 x i32>
  %99 = mul nuw nsw <8 x i32> %28, %98
  %100 = add nuw nsw <8 x i32> %94, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %101 = add nuw nsw <8 x i32> %100, %99
  %102 = lshr <8 x i32> %101, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %103 = trunc <8 x i32> %102 to <8 x i16>
  %104 = getelementptr inbounds i16, i16* %33, i64 24
  %105 = bitcast i16* %104 to <8 x i16>*
  store <8 x i16> %103, <8 x i16>* %105, align 2, !alias.scope !510, !noalias !507
  %106 = getelementptr i16, i16* %31, i64 32
  %107 = bitcast i16* %106 to <8 x i16>*
  %108 = load <8 x i16>, <8 x i16>* %107, align 2, !alias.scope !507
  %109 = zext <8 x i16> %108 to <8 x i32>
  %110 = mul nuw nsw <8 x i32> %26, %109
  %111 = getelementptr inbounds i16, i16* %31, i64 33
  %112 = bitcast i16* %111 to <8 x i16>*
  %113 = load <8 x i16>, <8 x i16>* %112, align 2, !alias.scope !507
  %114 = zext <8 x i16> %113 to <8 x i32>
  %115 = mul nuw nsw <8 x i32> %28, %114
  %116 = add nuw nsw <8 x i32> %110, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %117 = add nuw nsw <8 x i32> %116, %115
  %118 = lshr <8 x i32> %117, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %119 = trunc <8 x i32> %118 to <8 x i16>
  %120 = getelementptr inbounds i16, i16* %33, i64 32
  %121 = bitcast i16* %120 to <8 x i16>*
  store <8 x i16> %119, <8 x i16>* %121, align 2, !alias.scope !510, !noalias !507
  %122 = getelementptr i16, i16* %31, i64 40
  %123 = bitcast i16* %122 to <8 x i16>*
  %124 = load <8 x i16>, <8 x i16>* %123, align 2, !alias.scope !507
  %125 = zext <8 x i16> %124 to <8 x i32>
  %126 = mul nuw nsw <8 x i32> %26, %125
  %127 = getelementptr inbounds i16, i16* %31, i64 41
  %128 = bitcast i16* %127 to <8 x i16>*
  %129 = load <8 x i16>, <8 x i16>* %128, align 2, !alias.scope !507
  %130 = zext <8 x i16> %129 to <8 x i32>
  %131 = mul nuw nsw <8 x i32> %28, %130
  %132 = add nuw nsw <8 x i32> %126, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %133 = add nuw nsw <8 x i32> %132, %131
  %134 = lshr <8 x i32> %133, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %135 = trunc <8 x i32> %134 to <8 x i16>
  %136 = getelementptr inbounds i16, i16* %33, i64 40
  %137 = bitcast i16* %136 to <8 x i16>*
  store <8 x i16> %135, <8 x i16>* %137, align 2, !alias.scope !510, !noalias !507
  %138 = getelementptr i16, i16* %31, i64 48
  %139 = bitcast i16* %138 to <8 x i16>*
  %140 = load <8 x i16>, <8 x i16>* %139, align 2, !alias.scope !507
  %141 = zext <8 x i16> %140 to <8 x i32>
  %142 = mul nuw nsw <8 x i32> %26, %141
  %143 = getelementptr inbounds i16, i16* %31, i64 49
  %144 = bitcast i16* %143 to <8 x i16>*
  %145 = load <8 x i16>, <8 x i16>* %144, align 2, !alias.scope !507
  %146 = zext <8 x i16> %145 to <8 x i32>
  %147 = mul nuw nsw <8 x i32> %28, %146
  %148 = add nuw nsw <8 x i32> %142, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %149 = add nuw nsw <8 x i32> %148, %147
  %150 = lshr <8 x i32> %149, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %151 = trunc <8 x i32> %150 to <8 x i16>
  %152 = getelementptr inbounds i16, i16* %33, i64 48
  %153 = bitcast i16* %152 to <8 x i16>*
  store <8 x i16> %151, <8 x i16>* %153, align 2, !alias.scope !510, !noalias !507
  %154 = getelementptr i16, i16* %31, i64 56
  %155 = bitcast i16* %154 to <8 x i16>*
  %156 = load <8 x i16>, <8 x i16>* %155, align 2, !alias.scope !507
  %157 = zext <8 x i16> %156 to <8 x i32>
  %158 = mul nuw nsw <8 x i32> %26, %157
  %159 = getelementptr inbounds i16, i16* %31, i64 57
  %160 = bitcast i16* %159 to <8 x i16>*
  %161 = load <8 x i16>, <8 x i16>* %160, align 2, !alias.scope !507
  %162 = zext <8 x i16> %161 to <8 x i32>
  %163 = mul nuw nsw <8 x i32> %28, %162
  %164 = add nuw nsw <8 x i32> %158, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %165 = add nuw nsw <8 x i32> %164, %163
  %166 = lshr <8 x i32> %165, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %167 = trunc <8 x i32> %166 to <8 x i16>
  %168 = getelementptr inbounds i16, i16* %33, i64 56
  %169 = bitcast i16* %168 to <8 x i16>*
  store <8 x i16> %167, <8 x i16>* %169, align 2, !alias.scope !510, !noalias !507
  br label %200

170:                                              ; preds = %29, %170
  %171 = phi i64 [ %198, %170 ], [ 0, %29 ]
  %172 = phi i16* [ %189, %170 ], [ %31, %29 ]
  %173 = load i16, i16* %172, align 2
  %174 = zext i16 %173 to i32
  %175 = mul nuw nsw i32 %22, %174
  %176 = getelementptr inbounds i16, i16* %172, i64 1
  %177 = load i16, i16* %176, align 2
  %178 = zext i16 %177 to i32
  %179 = mul nuw nsw i32 %24, %178
  %180 = add nuw nsw i32 %175, 64
  %181 = add nuw nsw i32 %180, %179
  %182 = lshr i32 %181, 7
  %183 = trunc i32 %182 to i16
  %184 = getelementptr inbounds i16, i16* %33, i64 %171
  store i16 %183, i16* %184, align 2
  %185 = or i64 %171, 1
  %186 = load i16, i16* %176, align 2
  %187 = zext i16 %186 to i32
  %188 = mul nuw nsw i32 %22, %187
  %189 = getelementptr inbounds i16, i16* %172, i64 2
  %190 = load i16, i16* %189, align 2
  %191 = zext i16 %190 to i32
  %192 = mul nuw nsw i32 %24, %191
  %193 = add nuw nsw i32 %188, 64
  %194 = add nuw nsw i32 %193, %192
  %195 = lshr i32 %194, 7
  %196 = trunc i32 %195 to i16
  %197 = getelementptr inbounds i16, i16* %33, i64 %185
  store i16 %196, i16* %197, align 2
  %198 = add nuw nsw i64 %171, 2
  %199 = icmp eq i64 %198, 64
  br i1 %199, label %200, label %170, !llvm.loop !512

200:                                              ; preds = %170, %42
  %201 = phi i16* [ %43, %42 ], [ %189, %170 ]
  %202 = getelementptr inbounds i16, i16* %201, i64 %20
  %203 = getelementptr inbounds i16, i16* %33, i64 64
  %204 = add nuw nsw i32 %32, 1
  %205 = icmp eq i32 %204, 33
  %206 = add i64 %30, 1
  br i1 %205, label %207, label %29

207:                                              ; preds = %200
  %208 = getelementptr inbounds [2048 x i16], [2048 x i16]* %9, i64 0, i64 0
  %209 = sext i32 %3 to i64
  %210 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %209, i64 0
  %211 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %209, i64 1
  %212 = load i8, i8* %210, align 2
  %213 = zext i8 %212 to i32
  %214 = load i8, i8* %211, align 1
  %215 = zext i8 %214 to i32
  %216 = insertelement <8 x i32> undef, i32 %213, i32 0
  %217 = shufflevector <8 x i32> %216, <8 x i32> undef, <8 x i32> zeroinitializer
  %218 = insertelement <8 x i32> undef, i32 %215, i32 0
  %219 = shufflevector <8 x i32> %218, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %220

220:                                              ; preds = %393, %207
  %221 = phi i64 [ %398, %393 ], [ 0, %207 ]
  %222 = phi i32 [ %396, %393 ], [ 0, %207 ]
  %223 = phi i16* [ %394, %393 ], [ %12, %207 ]
  %224 = phi i16* [ %395, %393 ], [ %208, %207 ]
  %225 = shl nuw nsw i64 %221, 6
  %226 = add i64 %225, 64
  %227 = getelementptr [2048 x i16], [2048 x i16]* %9, i64 0, i64 %226
  %228 = getelementptr [2048 x i16], [2048 x i16]* %9, i64 0, i64 %225
  %229 = getelementptr i16, i16* %223, i64 128
  %230 = icmp ult i16* %228, %229
  %231 = icmp ult i16* %223, %227
  %232 = and i1 %230, %231
  br i1 %232, label %361, label %233

233:                                              ; preds = %220
  %234 = getelementptr i16, i16* %223, i64 64
  %235 = bitcast i16* %223 to <8 x i16>*
  %236 = load <8 x i16>, <8 x i16>* %235, align 2, !alias.scope !513
  %237 = zext <8 x i16> %236 to <8 x i32>
  %238 = mul nuw nsw <8 x i32> %217, %237
  %239 = getelementptr inbounds i16, i16* %223, i64 64
  %240 = bitcast i16* %239 to <8 x i16>*
  %241 = load <8 x i16>, <8 x i16>* %240, align 2, !alias.scope !513
  %242 = zext <8 x i16> %241 to <8 x i32>
  %243 = mul nuw nsw <8 x i32> %219, %242
  %244 = add nuw nsw <8 x i32> %238, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %245 = add nuw nsw <8 x i32> %244, %243
  %246 = lshr <8 x i32> %245, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %247 = trunc <8 x i32> %246 to <8 x i16>
  %248 = bitcast i16* %224 to <8 x i16>*
  store <8 x i16> %247, <8 x i16>* %248, align 2, !alias.scope !516, !noalias !513
  %249 = getelementptr i16, i16* %223, i64 8
  %250 = bitcast i16* %249 to <8 x i16>*
  %251 = load <8 x i16>, <8 x i16>* %250, align 2, !alias.scope !513
  %252 = zext <8 x i16> %251 to <8 x i32>
  %253 = mul nuw nsw <8 x i32> %217, %252
  %254 = getelementptr inbounds i16, i16* %223, i64 72
  %255 = bitcast i16* %254 to <8 x i16>*
  %256 = load <8 x i16>, <8 x i16>* %255, align 2, !alias.scope !513
  %257 = zext <8 x i16> %256 to <8 x i32>
  %258 = mul nuw nsw <8 x i32> %219, %257
  %259 = add nuw nsw <8 x i32> %253, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %260 = add nuw nsw <8 x i32> %259, %258
  %261 = lshr <8 x i32> %260, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %262 = trunc <8 x i32> %261 to <8 x i16>
  %263 = getelementptr inbounds i16, i16* %224, i64 8
  %264 = bitcast i16* %263 to <8 x i16>*
  store <8 x i16> %262, <8 x i16>* %264, align 2, !alias.scope !516, !noalias !513
  %265 = getelementptr i16, i16* %223, i64 16
  %266 = bitcast i16* %265 to <8 x i16>*
  %267 = load <8 x i16>, <8 x i16>* %266, align 2, !alias.scope !513
  %268 = zext <8 x i16> %267 to <8 x i32>
  %269 = mul nuw nsw <8 x i32> %217, %268
  %270 = getelementptr inbounds i16, i16* %223, i64 80
  %271 = bitcast i16* %270 to <8 x i16>*
  %272 = load <8 x i16>, <8 x i16>* %271, align 2, !alias.scope !513
  %273 = zext <8 x i16> %272 to <8 x i32>
  %274 = mul nuw nsw <8 x i32> %219, %273
  %275 = add nuw nsw <8 x i32> %269, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %276 = add nuw nsw <8 x i32> %275, %274
  %277 = lshr <8 x i32> %276, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %278 = trunc <8 x i32> %277 to <8 x i16>
  %279 = getelementptr inbounds i16, i16* %224, i64 16
  %280 = bitcast i16* %279 to <8 x i16>*
  store <8 x i16> %278, <8 x i16>* %280, align 2, !alias.scope !516, !noalias !513
  %281 = getelementptr i16, i16* %223, i64 24
  %282 = bitcast i16* %281 to <8 x i16>*
  %283 = load <8 x i16>, <8 x i16>* %282, align 2, !alias.scope !513
  %284 = zext <8 x i16> %283 to <8 x i32>
  %285 = mul nuw nsw <8 x i32> %217, %284
  %286 = getelementptr inbounds i16, i16* %223, i64 88
  %287 = bitcast i16* %286 to <8 x i16>*
  %288 = load <8 x i16>, <8 x i16>* %287, align 2, !alias.scope !513
  %289 = zext <8 x i16> %288 to <8 x i32>
  %290 = mul nuw nsw <8 x i32> %219, %289
  %291 = add nuw nsw <8 x i32> %285, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %292 = add nuw nsw <8 x i32> %291, %290
  %293 = lshr <8 x i32> %292, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %294 = trunc <8 x i32> %293 to <8 x i16>
  %295 = getelementptr inbounds i16, i16* %224, i64 24
  %296 = bitcast i16* %295 to <8 x i16>*
  store <8 x i16> %294, <8 x i16>* %296, align 2, !alias.scope !516, !noalias !513
  %297 = getelementptr i16, i16* %223, i64 32
  %298 = bitcast i16* %297 to <8 x i16>*
  %299 = load <8 x i16>, <8 x i16>* %298, align 2, !alias.scope !513
  %300 = zext <8 x i16> %299 to <8 x i32>
  %301 = mul nuw nsw <8 x i32> %217, %300
  %302 = getelementptr inbounds i16, i16* %223, i64 96
  %303 = bitcast i16* %302 to <8 x i16>*
  %304 = load <8 x i16>, <8 x i16>* %303, align 2, !alias.scope !513
  %305 = zext <8 x i16> %304 to <8 x i32>
  %306 = mul nuw nsw <8 x i32> %219, %305
  %307 = add nuw nsw <8 x i32> %301, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %308 = add nuw nsw <8 x i32> %307, %306
  %309 = lshr <8 x i32> %308, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %310 = trunc <8 x i32> %309 to <8 x i16>
  %311 = getelementptr inbounds i16, i16* %224, i64 32
  %312 = bitcast i16* %311 to <8 x i16>*
  store <8 x i16> %310, <8 x i16>* %312, align 2, !alias.scope !516, !noalias !513
  %313 = getelementptr i16, i16* %223, i64 40
  %314 = bitcast i16* %313 to <8 x i16>*
  %315 = load <8 x i16>, <8 x i16>* %314, align 2, !alias.scope !513
  %316 = zext <8 x i16> %315 to <8 x i32>
  %317 = mul nuw nsw <8 x i32> %217, %316
  %318 = getelementptr inbounds i16, i16* %223, i64 104
  %319 = bitcast i16* %318 to <8 x i16>*
  %320 = load <8 x i16>, <8 x i16>* %319, align 2, !alias.scope !513
  %321 = zext <8 x i16> %320 to <8 x i32>
  %322 = mul nuw nsw <8 x i32> %219, %321
  %323 = add nuw nsw <8 x i32> %317, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %324 = add nuw nsw <8 x i32> %323, %322
  %325 = lshr <8 x i32> %324, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %326 = trunc <8 x i32> %325 to <8 x i16>
  %327 = getelementptr inbounds i16, i16* %224, i64 40
  %328 = bitcast i16* %327 to <8 x i16>*
  store <8 x i16> %326, <8 x i16>* %328, align 2, !alias.scope !516, !noalias !513
  %329 = getelementptr i16, i16* %223, i64 48
  %330 = bitcast i16* %329 to <8 x i16>*
  %331 = load <8 x i16>, <8 x i16>* %330, align 2, !alias.scope !513
  %332 = zext <8 x i16> %331 to <8 x i32>
  %333 = mul nuw nsw <8 x i32> %217, %332
  %334 = getelementptr inbounds i16, i16* %223, i64 112
  %335 = bitcast i16* %334 to <8 x i16>*
  %336 = load <8 x i16>, <8 x i16>* %335, align 2, !alias.scope !513
  %337 = zext <8 x i16> %336 to <8 x i32>
  %338 = mul nuw nsw <8 x i32> %219, %337
  %339 = add nuw nsw <8 x i32> %333, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %340 = add nuw nsw <8 x i32> %339, %338
  %341 = lshr <8 x i32> %340, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %342 = trunc <8 x i32> %341 to <8 x i16>
  %343 = getelementptr inbounds i16, i16* %224, i64 48
  %344 = bitcast i16* %343 to <8 x i16>*
  store <8 x i16> %342, <8 x i16>* %344, align 2, !alias.scope !516, !noalias !513
  %345 = getelementptr i16, i16* %223, i64 56
  %346 = bitcast i16* %345 to <8 x i16>*
  %347 = load <8 x i16>, <8 x i16>* %346, align 2, !alias.scope !513
  %348 = zext <8 x i16> %347 to <8 x i32>
  %349 = mul nuw nsw <8 x i32> %217, %348
  %350 = getelementptr inbounds i16, i16* %223, i64 120
  %351 = bitcast i16* %350 to <8 x i16>*
  %352 = load <8 x i16>, <8 x i16>* %351, align 2, !alias.scope !513
  %353 = zext <8 x i16> %352 to <8 x i32>
  %354 = mul nuw nsw <8 x i32> %219, %353
  %355 = add nuw nsw <8 x i32> %349, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %356 = add nuw nsw <8 x i32> %355, %354
  %357 = lshr <8 x i32> %356, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %358 = trunc <8 x i32> %357 to <8 x i16>
  %359 = getelementptr inbounds i16, i16* %224, i64 56
  %360 = bitcast i16* %359 to <8 x i16>*
  store <8 x i16> %358, <8 x i16>* %360, align 2, !alias.scope !516, !noalias !513
  br label %393

361:                                              ; preds = %220, %361
  %362 = phi i64 [ %391, %361 ], [ 0, %220 ]
  %363 = phi i16* [ %390, %361 ], [ %223, %220 ]
  %364 = load i16, i16* %363, align 2
  %365 = zext i16 %364 to i32
  %366 = mul nuw nsw i32 %213, %365
  %367 = getelementptr inbounds i16, i16* %363, i64 64
  %368 = load i16, i16* %367, align 2
  %369 = zext i16 %368 to i32
  %370 = mul nuw nsw i32 %215, %369
  %371 = add nuw nsw i32 %366, 64
  %372 = add nuw nsw i32 %371, %370
  %373 = lshr i32 %372, 7
  %374 = trunc i32 %373 to i16
  %375 = getelementptr inbounds i16, i16* %224, i64 %362
  store i16 %374, i16* %375, align 2
  %376 = getelementptr inbounds i16, i16* %363, i64 1
  %377 = or i64 %362, 1
  %378 = load i16, i16* %376, align 2
  %379 = zext i16 %378 to i32
  %380 = mul nuw nsw i32 %213, %379
  %381 = getelementptr inbounds i16, i16* %363, i64 65
  %382 = load i16, i16* %381, align 2
  %383 = zext i16 %382 to i32
  %384 = mul nuw nsw i32 %215, %383
  %385 = add nuw nsw i32 %380, 64
  %386 = add nuw nsw i32 %385, %384
  %387 = lshr i32 %386, 7
  %388 = trunc i32 %387 to i16
  %389 = getelementptr inbounds i16, i16* %224, i64 %377
  store i16 %388, i16* %389, align 2
  %390 = getelementptr inbounds i16, i16* %363, i64 2
  %391 = add nuw nsw i64 %362, 2
  %392 = icmp eq i64 %391, 64
  br i1 %392, label %393, label %361, !llvm.loop !518

393:                                              ; preds = %361, %233
  %394 = phi i16* [ %234, %233 ], [ %390, %361 ]
  %395 = getelementptr inbounds i16, i16* %224, i64 64
  %396 = add nuw nsw i32 %222, 1
  %397 = icmp eq i32 %396, 32
  %398 = add i64 %221, 1
  br i1 %397, label %399, label %220

399:                                              ; preds = %393
  %400 = ptrtoint i8* %4 to i64
  %401 = shl i64 %400, 1
  %402 = inttoptr i64 %401 to i16*
  %403 = sext i32 %5 to i64
  br label %404

404:                                              ; preds = %441, %399
  %405 = phi i64 [ 0, %399 ], [ %438, %441 ]
  %406 = phi i64 [ 0, %399 ], [ %435, %441 ]
  %407 = phi i32 [ 0, %399 ], [ %444, %441 ]
  %408 = phi i16* [ %402, %399 ], [ %443, %441 ]
  %409 = phi i16* [ %208, %399 ], [ %442, %441 ]
  br label %410

410:                                              ; preds = %410, %404
  %411 = phi i64 [ %405, %404 ], [ %438, %410 ]
  %412 = phi i64 [ %406, %404 ], [ %435, %410 ]
  %413 = phi i64 [ 0, %404 ], [ %439, %410 ]
  %414 = getelementptr inbounds i16, i16* %409, i64 %413
  %415 = load i16, i16* %414, align 2
  %416 = zext i16 %415 to i32
  %417 = getelementptr inbounds i16, i16* %408, i64 %413
  %418 = load i16, i16* %417, align 2
  %419 = zext i16 %418 to i32
  %420 = sub nsw i32 %416, %419
  %421 = sext i32 %420 to i64
  %422 = add nsw i64 %412, %421
  %423 = mul nsw i32 %420, %420
  %424 = zext i32 %423 to i64
  %425 = add i64 %411, %424
  %426 = or i64 %413, 1
  %427 = getelementptr inbounds i16, i16* %409, i64 %426
  %428 = load i16, i16* %427, align 2
  %429 = zext i16 %428 to i32
  %430 = getelementptr inbounds i16, i16* %408, i64 %426
  %431 = load i16, i16* %430, align 2
  %432 = zext i16 %431 to i32
  %433 = sub nsw i32 %429, %432
  %434 = sext i32 %433 to i64
  %435 = add nsw i64 %422, %434
  %436 = mul nsw i32 %433, %433
  %437 = zext i32 %436 to i64
  %438 = add i64 %425, %437
  %439 = add nuw nsw i64 %413, 2
  %440 = icmp eq i64 %439, 64
  br i1 %440, label %441, label %410

441:                                              ; preds = %410
  %442 = getelementptr inbounds i16, i16* %409, i64 64
  %443 = getelementptr inbounds i16, i16* %408, i64 %403
  %444 = add nuw nsw i32 %407, 1
  %445 = icmp eq i32 %444, 32
  br i1 %445, label %446, label %404

446:                                              ; preds = %441
  %447 = add i64 %438, 8
  %448 = lshr i64 %447, 4
  %449 = trunc i64 %448 to i32
  store i32 %449, i32* %6, align 4
  %450 = and i64 %448, 4294967295
  %451 = shl i64 %435, 30
  %452 = add i64 %451, 2147483648
  %453 = ashr i64 %452, 32
  %454 = mul nsw i64 %453, %453
  %455 = lshr i64 %454, 11
  %456 = sub nsw i64 %450, %455
  %457 = icmp sgt i64 %456, -1
  %458 = trunc i64 %456 to i32
  %459 = select i1 %457, i32 %458, i32 0
  call void @llvm.lifetime.end.p0i8(i64 4096, i8* nonnull %11) #4
  call void @llvm.lifetime.end.p0i8(i64 4224, i8* nonnull %10) #4
  ret i32 %459
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_highbd_12_sub_pixel_variance64x32_c(i8*, i32, i32, i32, i8*, i32, i32* nocapture) local_unnamed_addr #2 {
  %8 = alloca [2112 x i16], align 16
  %9 = alloca [2048 x i16], align 16
  %10 = bitcast [2112 x i16]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4224, i8* nonnull %10) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %10, i8 -86, i64 4224, i1 false)
  %11 = bitcast [2048 x i16]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4096, i8* nonnull %11) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %11, i8 -86, i64 4096, i1 false)
  %12 = getelementptr inbounds [2112 x i16], [2112 x i16]* %8, i64 0, i64 0
  %13 = sext i32 %2 to i64
  %14 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %13, i64 0
  %15 = ptrtoint i8* %0 to i64
  %16 = shl i64 %15, 1
  %17 = inttoptr i64 %16 to i16*
  %18 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %13, i64 1
  %19 = add i32 %1, -64
  %20 = zext i32 %19 to i64
  %21 = load i8, i8* %14, align 2
  %22 = zext i8 %21 to i32
  %23 = load i8, i8* %18, align 1
  %24 = zext i8 %23 to i32
  %25 = insertelement <8 x i32> undef, i32 %22, i32 0
  %26 = shufflevector <8 x i32> %25, <8 x i32> undef, <8 x i32> zeroinitializer
  %27 = insertelement <8 x i32> undef, i32 %24, i32 0
  %28 = shufflevector <8 x i32> %27, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %29

29:                                               ; preds = %200, %7
  %30 = phi i64 [ %206, %200 ], [ 0, %7 ]
  %31 = phi i16* [ %202, %200 ], [ %17, %7 ]
  %32 = phi i32 [ %204, %200 ], [ 0, %7 ]
  %33 = phi i16* [ %203, %200 ], [ %12, %7 ]
  %34 = shl nuw nsw i64 %30, 6
  %35 = add i64 %34, 64
  %36 = getelementptr [2112 x i16], [2112 x i16]* %8, i64 0, i64 %35
  %37 = getelementptr [2112 x i16], [2112 x i16]* %8, i64 0, i64 %34
  %38 = getelementptr i16, i16* %31, i64 65
  %39 = icmp ult i16* %37, %38
  %40 = icmp ult i16* %31, %36
  %41 = and i1 %39, %40
  br i1 %41, label %170, label %42

42:                                               ; preds = %29
  %43 = getelementptr i16, i16* %31, i64 64
  %44 = bitcast i16* %31 to <8 x i16>*
  %45 = load <8 x i16>, <8 x i16>* %44, align 2, !alias.scope !519
  %46 = zext <8 x i16> %45 to <8 x i32>
  %47 = mul nuw nsw <8 x i32> %26, %46
  %48 = getelementptr inbounds i16, i16* %31, i64 1
  %49 = bitcast i16* %48 to <8 x i16>*
  %50 = load <8 x i16>, <8 x i16>* %49, align 2, !alias.scope !519
  %51 = zext <8 x i16> %50 to <8 x i32>
  %52 = mul nuw nsw <8 x i32> %28, %51
  %53 = add nuw nsw <8 x i32> %47, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %54 = add nuw nsw <8 x i32> %53, %52
  %55 = lshr <8 x i32> %54, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %56 = trunc <8 x i32> %55 to <8 x i16>
  %57 = bitcast i16* %33 to <8 x i16>*
  store <8 x i16> %56, <8 x i16>* %57, align 2, !alias.scope !522, !noalias !519
  %58 = getelementptr i16, i16* %31, i64 8
  %59 = bitcast i16* %58 to <8 x i16>*
  %60 = load <8 x i16>, <8 x i16>* %59, align 2, !alias.scope !519
  %61 = zext <8 x i16> %60 to <8 x i32>
  %62 = mul nuw nsw <8 x i32> %26, %61
  %63 = getelementptr inbounds i16, i16* %31, i64 9
  %64 = bitcast i16* %63 to <8 x i16>*
  %65 = load <8 x i16>, <8 x i16>* %64, align 2, !alias.scope !519
  %66 = zext <8 x i16> %65 to <8 x i32>
  %67 = mul nuw nsw <8 x i32> %28, %66
  %68 = add nuw nsw <8 x i32> %62, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %69 = add nuw nsw <8 x i32> %68, %67
  %70 = lshr <8 x i32> %69, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %71 = trunc <8 x i32> %70 to <8 x i16>
  %72 = getelementptr inbounds i16, i16* %33, i64 8
  %73 = bitcast i16* %72 to <8 x i16>*
  store <8 x i16> %71, <8 x i16>* %73, align 2, !alias.scope !522, !noalias !519
  %74 = getelementptr i16, i16* %31, i64 16
  %75 = bitcast i16* %74 to <8 x i16>*
  %76 = load <8 x i16>, <8 x i16>* %75, align 2, !alias.scope !519
  %77 = zext <8 x i16> %76 to <8 x i32>
  %78 = mul nuw nsw <8 x i32> %26, %77
  %79 = getelementptr inbounds i16, i16* %31, i64 17
  %80 = bitcast i16* %79 to <8 x i16>*
  %81 = load <8 x i16>, <8 x i16>* %80, align 2, !alias.scope !519
  %82 = zext <8 x i16> %81 to <8 x i32>
  %83 = mul nuw nsw <8 x i32> %28, %82
  %84 = add nuw nsw <8 x i32> %78, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %85 = add nuw nsw <8 x i32> %84, %83
  %86 = lshr <8 x i32> %85, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %87 = trunc <8 x i32> %86 to <8 x i16>
  %88 = getelementptr inbounds i16, i16* %33, i64 16
  %89 = bitcast i16* %88 to <8 x i16>*
  store <8 x i16> %87, <8 x i16>* %89, align 2, !alias.scope !522, !noalias !519
  %90 = getelementptr i16, i16* %31, i64 24
  %91 = bitcast i16* %90 to <8 x i16>*
  %92 = load <8 x i16>, <8 x i16>* %91, align 2, !alias.scope !519
  %93 = zext <8 x i16> %92 to <8 x i32>
  %94 = mul nuw nsw <8 x i32> %26, %93
  %95 = getelementptr inbounds i16, i16* %31, i64 25
  %96 = bitcast i16* %95 to <8 x i16>*
  %97 = load <8 x i16>, <8 x i16>* %96, align 2, !alias.scope !519
  %98 = zext <8 x i16> %97 to <8 x i32>
  %99 = mul nuw nsw <8 x i32> %28, %98
  %100 = add nuw nsw <8 x i32> %94, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %101 = add nuw nsw <8 x i32> %100, %99
  %102 = lshr <8 x i32> %101, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %103 = trunc <8 x i32> %102 to <8 x i16>
  %104 = getelementptr inbounds i16, i16* %33, i64 24
  %105 = bitcast i16* %104 to <8 x i16>*
  store <8 x i16> %103, <8 x i16>* %105, align 2, !alias.scope !522, !noalias !519
  %106 = getelementptr i16, i16* %31, i64 32
  %107 = bitcast i16* %106 to <8 x i16>*
  %108 = load <8 x i16>, <8 x i16>* %107, align 2, !alias.scope !519
  %109 = zext <8 x i16> %108 to <8 x i32>
  %110 = mul nuw nsw <8 x i32> %26, %109
  %111 = getelementptr inbounds i16, i16* %31, i64 33
  %112 = bitcast i16* %111 to <8 x i16>*
  %113 = load <8 x i16>, <8 x i16>* %112, align 2, !alias.scope !519
  %114 = zext <8 x i16> %113 to <8 x i32>
  %115 = mul nuw nsw <8 x i32> %28, %114
  %116 = add nuw nsw <8 x i32> %110, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %117 = add nuw nsw <8 x i32> %116, %115
  %118 = lshr <8 x i32> %117, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %119 = trunc <8 x i32> %118 to <8 x i16>
  %120 = getelementptr inbounds i16, i16* %33, i64 32
  %121 = bitcast i16* %120 to <8 x i16>*
  store <8 x i16> %119, <8 x i16>* %121, align 2, !alias.scope !522, !noalias !519
  %122 = getelementptr i16, i16* %31, i64 40
  %123 = bitcast i16* %122 to <8 x i16>*
  %124 = load <8 x i16>, <8 x i16>* %123, align 2, !alias.scope !519
  %125 = zext <8 x i16> %124 to <8 x i32>
  %126 = mul nuw nsw <8 x i32> %26, %125
  %127 = getelementptr inbounds i16, i16* %31, i64 41
  %128 = bitcast i16* %127 to <8 x i16>*
  %129 = load <8 x i16>, <8 x i16>* %128, align 2, !alias.scope !519
  %130 = zext <8 x i16> %129 to <8 x i32>
  %131 = mul nuw nsw <8 x i32> %28, %130
  %132 = add nuw nsw <8 x i32> %126, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %133 = add nuw nsw <8 x i32> %132, %131
  %134 = lshr <8 x i32> %133, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %135 = trunc <8 x i32> %134 to <8 x i16>
  %136 = getelementptr inbounds i16, i16* %33, i64 40
  %137 = bitcast i16* %136 to <8 x i16>*
  store <8 x i16> %135, <8 x i16>* %137, align 2, !alias.scope !522, !noalias !519
  %138 = getelementptr i16, i16* %31, i64 48
  %139 = bitcast i16* %138 to <8 x i16>*
  %140 = load <8 x i16>, <8 x i16>* %139, align 2, !alias.scope !519
  %141 = zext <8 x i16> %140 to <8 x i32>
  %142 = mul nuw nsw <8 x i32> %26, %141
  %143 = getelementptr inbounds i16, i16* %31, i64 49
  %144 = bitcast i16* %143 to <8 x i16>*
  %145 = load <8 x i16>, <8 x i16>* %144, align 2, !alias.scope !519
  %146 = zext <8 x i16> %145 to <8 x i32>
  %147 = mul nuw nsw <8 x i32> %28, %146
  %148 = add nuw nsw <8 x i32> %142, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %149 = add nuw nsw <8 x i32> %148, %147
  %150 = lshr <8 x i32> %149, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %151 = trunc <8 x i32> %150 to <8 x i16>
  %152 = getelementptr inbounds i16, i16* %33, i64 48
  %153 = bitcast i16* %152 to <8 x i16>*
  store <8 x i16> %151, <8 x i16>* %153, align 2, !alias.scope !522, !noalias !519
  %154 = getelementptr i16, i16* %31, i64 56
  %155 = bitcast i16* %154 to <8 x i16>*
  %156 = load <8 x i16>, <8 x i16>* %155, align 2, !alias.scope !519
  %157 = zext <8 x i16> %156 to <8 x i32>
  %158 = mul nuw nsw <8 x i32> %26, %157
  %159 = getelementptr inbounds i16, i16* %31, i64 57
  %160 = bitcast i16* %159 to <8 x i16>*
  %161 = load <8 x i16>, <8 x i16>* %160, align 2, !alias.scope !519
  %162 = zext <8 x i16> %161 to <8 x i32>
  %163 = mul nuw nsw <8 x i32> %28, %162
  %164 = add nuw nsw <8 x i32> %158, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %165 = add nuw nsw <8 x i32> %164, %163
  %166 = lshr <8 x i32> %165, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %167 = trunc <8 x i32> %166 to <8 x i16>
  %168 = getelementptr inbounds i16, i16* %33, i64 56
  %169 = bitcast i16* %168 to <8 x i16>*
  store <8 x i16> %167, <8 x i16>* %169, align 2, !alias.scope !522, !noalias !519
  br label %200

170:                                              ; preds = %29, %170
  %171 = phi i64 [ %198, %170 ], [ 0, %29 ]
  %172 = phi i16* [ %189, %170 ], [ %31, %29 ]
  %173 = load i16, i16* %172, align 2
  %174 = zext i16 %173 to i32
  %175 = mul nuw nsw i32 %22, %174
  %176 = getelementptr inbounds i16, i16* %172, i64 1
  %177 = load i16, i16* %176, align 2
  %178 = zext i16 %177 to i32
  %179 = mul nuw nsw i32 %24, %178
  %180 = add nuw nsw i32 %175, 64
  %181 = add nuw nsw i32 %180, %179
  %182 = lshr i32 %181, 7
  %183 = trunc i32 %182 to i16
  %184 = getelementptr inbounds i16, i16* %33, i64 %171
  store i16 %183, i16* %184, align 2
  %185 = or i64 %171, 1
  %186 = load i16, i16* %176, align 2
  %187 = zext i16 %186 to i32
  %188 = mul nuw nsw i32 %22, %187
  %189 = getelementptr inbounds i16, i16* %172, i64 2
  %190 = load i16, i16* %189, align 2
  %191 = zext i16 %190 to i32
  %192 = mul nuw nsw i32 %24, %191
  %193 = add nuw nsw i32 %188, 64
  %194 = add nuw nsw i32 %193, %192
  %195 = lshr i32 %194, 7
  %196 = trunc i32 %195 to i16
  %197 = getelementptr inbounds i16, i16* %33, i64 %185
  store i16 %196, i16* %197, align 2
  %198 = add nuw nsw i64 %171, 2
  %199 = icmp eq i64 %198, 64
  br i1 %199, label %200, label %170, !llvm.loop !524

200:                                              ; preds = %170, %42
  %201 = phi i16* [ %43, %42 ], [ %189, %170 ]
  %202 = getelementptr inbounds i16, i16* %201, i64 %20
  %203 = getelementptr inbounds i16, i16* %33, i64 64
  %204 = add nuw nsw i32 %32, 1
  %205 = icmp eq i32 %204, 33
  %206 = add i64 %30, 1
  br i1 %205, label %207, label %29

207:                                              ; preds = %200
  %208 = getelementptr inbounds [2048 x i16], [2048 x i16]* %9, i64 0, i64 0
  %209 = sext i32 %3 to i64
  %210 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %209, i64 0
  %211 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %209, i64 1
  %212 = load i8, i8* %210, align 2
  %213 = zext i8 %212 to i32
  %214 = load i8, i8* %211, align 1
  %215 = zext i8 %214 to i32
  %216 = insertelement <8 x i32> undef, i32 %213, i32 0
  %217 = shufflevector <8 x i32> %216, <8 x i32> undef, <8 x i32> zeroinitializer
  %218 = insertelement <8 x i32> undef, i32 %215, i32 0
  %219 = shufflevector <8 x i32> %218, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %220

220:                                              ; preds = %393, %207
  %221 = phi i64 [ %398, %393 ], [ 0, %207 ]
  %222 = phi i32 [ %396, %393 ], [ 0, %207 ]
  %223 = phi i16* [ %394, %393 ], [ %12, %207 ]
  %224 = phi i16* [ %395, %393 ], [ %208, %207 ]
  %225 = shl nuw nsw i64 %221, 6
  %226 = add i64 %225, 64
  %227 = getelementptr [2048 x i16], [2048 x i16]* %9, i64 0, i64 %226
  %228 = getelementptr [2048 x i16], [2048 x i16]* %9, i64 0, i64 %225
  %229 = getelementptr i16, i16* %223, i64 128
  %230 = icmp ult i16* %228, %229
  %231 = icmp ult i16* %223, %227
  %232 = and i1 %230, %231
  br i1 %232, label %361, label %233

233:                                              ; preds = %220
  %234 = getelementptr i16, i16* %223, i64 64
  %235 = bitcast i16* %223 to <8 x i16>*
  %236 = load <8 x i16>, <8 x i16>* %235, align 2, !alias.scope !525
  %237 = zext <8 x i16> %236 to <8 x i32>
  %238 = mul nuw nsw <8 x i32> %217, %237
  %239 = getelementptr inbounds i16, i16* %223, i64 64
  %240 = bitcast i16* %239 to <8 x i16>*
  %241 = load <8 x i16>, <8 x i16>* %240, align 2, !alias.scope !525
  %242 = zext <8 x i16> %241 to <8 x i32>
  %243 = mul nuw nsw <8 x i32> %219, %242
  %244 = add nuw nsw <8 x i32> %238, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %245 = add nuw nsw <8 x i32> %244, %243
  %246 = lshr <8 x i32> %245, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %247 = trunc <8 x i32> %246 to <8 x i16>
  %248 = bitcast i16* %224 to <8 x i16>*
  store <8 x i16> %247, <8 x i16>* %248, align 2, !alias.scope !528, !noalias !525
  %249 = getelementptr i16, i16* %223, i64 8
  %250 = bitcast i16* %249 to <8 x i16>*
  %251 = load <8 x i16>, <8 x i16>* %250, align 2, !alias.scope !525
  %252 = zext <8 x i16> %251 to <8 x i32>
  %253 = mul nuw nsw <8 x i32> %217, %252
  %254 = getelementptr inbounds i16, i16* %223, i64 72
  %255 = bitcast i16* %254 to <8 x i16>*
  %256 = load <8 x i16>, <8 x i16>* %255, align 2, !alias.scope !525
  %257 = zext <8 x i16> %256 to <8 x i32>
  %258 = mul nuw nsw <8 x i32> %219, %257
  %259 = add nuw nsw <8 x i32> %253, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %260 = add nuw nsw <8 x i32> %259, %258
  %261 = lshr <8 x i32> %260, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %262 = trunc <8 x i32> %261 to <8 x i16>
  %263 = getelementptr inbounds i16, i16* %224, i64 8
  %264 = bitcast i16* %263 to <8 x i16>*
  store <8 x i16> %262, <8 x i16>* %264, align 2, !alias.scope !528, !noalias !525
  %265 = getelementptr i16, i16* %223, i64 16
  %266 = bitcast i16* %265 to <8 x i16>*
  %267 = load <8 x i16>, <8 x i16>* %266, align 2, !alias.scope !525
  %268 = zext <8 x i16> %267 to <8 x i32>
  %269 = mul nuw nsw <8 x i32> %217, %268
  %270 = getelementptr inbounds i16, i16* %223, i64 80
  %271 = bitcast i16* %270 to <8 x i16>*
  %272 = load <8 x i16>, <8 x i16>* %271, align 2, !alias.scope !525
  %273 = zext <8 x i16> %272 to <8 x i32>
  %274 = mul nuw nsw <8 x i32> %219, %273
  %275 = add nuw nsw <8 x i32> %269, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %276 = add nuw nsw <8 x i32> %275, %274
  %277 = lshr <8 x i32> %276, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %278 = trunc <8 x i32> %277 to <8 x i16>
  %279 = getelementptr inbounds i16, i16* %224, i64 16
  %280 = bitcast i16* %279 to <8 x i16>*
  store <8 x i16> %278, <8 x i16>* %280, align 2, !alias.scope !528, !noalias !525
  %281 = getelementptr i16, i16* %223, i64 24
  %282 = bitcast i16* %281 to <8 x i16>*
  %283 = load <8 x i16>, <8 x i16>* %282, align 2, !alias.scope !525
  %284 = zext <8 x i16> %283 to <8 x i32>
  %285 = mul nuw nsw <8 x i32> %217, %284
  %286 = getelementptr inbounds i16, i16* %223, i64 88
  %287 = bitcast i16* %286 to <8 x i16>*
  %288 = load <8 x i16>, <8 x i16>* %287, align 2, !alias.scope !525
  %289 = zext <8 x i16> %288 to <8 x i32>
  %290 = mul nuw nsw <8 x i32> %219, %289
  %291 = add nuw nsw <8 x i32> %285, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %292 = add nuw nsw <8 x i32> %291, %290
  %293 = lshr <8 x i32> %292, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %294 = trunc <8 x i32> %293 to <8 x i16>
  %295 = getelementptr inbounds i16, i16* %224, i64 24
  %296 = bitcast i16* %295 to <8 x i16>*
  store <8 x i16> %294, <8 x i16>* %296, align 2, !alias.scope !528, !noalias !525
  %297 = getelementptr i16, i16* %223, i64 32
  %298 = bitcast i16* %297 to <8 x i16>*
  %299 = load <8 x i16>, <8 x i16>* %298, align 2, !alias.scope !525
  %300 = zext <8 x i16> %299 to <8 x i32>
  %301 = mul nuw nsw <8 x i32> %217, %300
  %302 = getelementptr inbounds i16, i16* %223, i64 96
  %303 = bitcast i16* %302 to <8 x i16>*
  %304 = load <8 x i16>, <8 x i16>* %303, align 2, !alias.scope !525
  %305 = zext <8 x i16> %304 to <8 x i32>
  %306 = mul nuw nsw <8 x i32> %219, %305
  %307 = add nuw nsw <8 x i32> %301, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %308 = add nuw nsw <8 x i32> %307, %306
  %309 = lshr <8 x i32> %308, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %310 = trunc <8 x i32> %309 to <8 x i16>
  %311 = getelementptr inbounds i16, i16* %224, i64 32
  %312 = bitcast i16* %311 to <8 x i16>*
  store <8 x i16> %310, <8 x i16>* %312, align 2, !alias.scope !528, !noalias !525
  %313 = getelementptr i16, i16* %223, i64 40
  %314 = bitcast i16* %313 to <8 x i16>*
  %315 = load <8 x i16>, <8 x i16>* %314, align 2, !alias.scope !525
  %316 = zext <8 x i16> %315 to <8 x i32>
  %317 = mul nuw nsw <8 x i32> %217, %316
  %318 = getelementptr inbounds i16, i16* %223, i64 104
  %319 = bitcast i16* %318 to <8 x i16>*
  %320 = load <8 x i16>, <8 x i16>* %319, align 2, !alias.scope !525
  %321 = zext <8 x i16> %320 to <8 x i32>
  %322 = mul nuw nsw <8 x i32> %219, %321
  %323 = add nuw nsw <8 x i32> %317, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %324 = add nuw nsw <8 x i32> %323, %322
  %325 = lshr <8 x i32> %324, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %326 = trunc <8 x i32> %325 to <8 x i16>
  %327 = getelementptr inbounds i16, i16* %224, i64 40
  %328 = bitcast i16* %327 to <8 x i16>*
  store <8 x i16> %326, <8 x i16>* %328, align 2, !alias.scope !528, !noalias !525
  %329 = getelementptr i16, i16* %223, i64 48
  %330 = bitcast i16* %329 to <8 x i16>*
  %331 = load <8 x i16>, <8 x i16>* %330, align 2, !alias.scope !525
  %332 = zext <8 x i16> %331 to <8 x i32>
  %333 = mul nuw nsw <8 x i32> %217, %332
  %334 = getelementptr inbounds i16, i16* %223, i64 112
  %335 = bitcast i16* %334 to <8 x i16>*
  %336 = load <8 x i16>, <8 x i16>* %335, align 2, !alias.scope !525
  %337 = zext <8 x i16> %336 to <8 x i32>
  %338 = mul nuw nsw <8 x i32> %219, %337
  %339 = add nuw nsw <8 x i32> %333, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %340 = add nuw nsw <8 x i32> %339, %338
  %341 = lshr <8 x i32> %340, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %342 = trunc <8 x i32> %341 to <8 x i16>
  %343 = getelementptr inbounds i16, i16* %224, i64 48
  %344 = bitcast i16* %343 to <8 x i16>*
  store <8 x i16> %342, <8 x i16>* %344, align 2, !alias.scope !528, !noalias !525
  %345 = getelementptr i16, i16* %223, i64 56
  %346 = bitcast i16* %345 to <8 x i16>*
  %347 = load <8 x i16>, <8 x i16>* %346, align 2, !alias.scope !525
  %348 = zext <8 x i16> %347 to <8 x i32>
  %349 = mul nuw nsw <8 x i32> %217, %348
  %350 = getelementptr inbounds i16, i16* %223, i64 120
  %351 = bitcast i16* %350 to <8 x i16>*
  %352 = load <8 x i16>, <8 x i16>* %351, align 2, !alias.scope !525
  %353 = zext <8 x i16> %352 to <8 x i32>
  %354 = mul nuw nsw <8 x i32> %219, %353
  %355 = add nuw nsw <8 x i32> %349, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %356 = add nuw nsw <8 x i32> %355, %354
  %357 = lshr <8 x i32> %356, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %358 = trunc <8 x i32> %357 to <8 x i16>
  %359 = getelementptr inbounds i16, i16* %224, i64 56
  %360 = bitcast i16* %359 to <8 x i16>*
  store <8 x i16> %358, <8 x i16>* %360, align 2, !alias.scope !528, !noalias !525
  br label %393

361:                                              ; preds = %220, %361
  %362 = phi i64 [ %391, %361 ], [ 0, %220 ]
  %363 = phi i16* [ %390, %361 ], [ %223, %220 ]
  %364 = load i16, i16* %363, align 2
  %365 = zext i16 %364 to i32
  %366 = mul nuw nsw i32 %213, %365
  %367 = getelementptr inbounds i16, i16* %363, i64 64
  %368 = load i16, i16* %367, align 2
  %369 = zext i16 %368 to i32
  %370 = mul nuw nsw i32 %215, %369
  %371 = add nuw nsw i32 %366, 64
  %372 = add nuw nsw i32 %371, %370
  %373 = lshr i32 %372, 7
  %374 = trunc i32 %373 to i16
  %375 = getelementptr inbounds i16, i16* %224, i64 %362
  store i16 %374, i16* %375, align 2
  %376 = getelementptr inbounds i16, i16* %363, i64 1
  %377 = or i64 %362, 1
  %378 = load i16, i16* %376, align 2
  %379 = zext i16 %378 to i32
  %380 = mul nuw nsw i32 %213, %379
  %381 = getelementptr inbounds i16, i16* %363, i64 65
  %382 = load i16, i16* %381, align 2
  %383 = zext i16 %382 to i32
  %384 = mul nuw nsw i32 %215, %383
  %385 = add nuw nsw i32 %380, 64
  %386 = add nuw nsw i32 %385, %384
  %387 = lshr i32 %386, 7
  %388 = trunc i32 %387 to i16
  %389 = getelementptr inbounds i16, i16* %224, i64 %377
  store i16 %388, i16* %389, align 2
  %390 = getelementptr inbounds i16, i16* %363, i64 2
  %391 = add nuw nsw i64 %362, 2
  %392 = icmp eq i64 %391, 64
  br i1 %392, label %393, label %361, !llvm.loop !530

393:                                              ; preds = %361, %233
  %394 = phi i16* [ %234, %233 ], [ %390, %361 ]
  %395 = getelementptr inbounds i16, i16* %224, i64 64
  %396 = add nuw nsw i32 %222, 1
  %397 = icmp eq i32 %396, 32
  %398 = add i64 %221, 1
  br i1 %397, label %399, label %220

399:                                              ; preds = %393
  %400 = ptrtoint i8* %4 to i64
  %401 = shl i64 %400, 1
  %402 = inttoptr i64 %401 to i16*
  %403 = sext i32 %5 to i64
  br label %404

404:                                              ; preds = %441, %399
  %405 = phi i64 [ 0, %399 ], [ %438, %441 ]
  %406 = phi i64 [ 0, %399 ], [ %435, %441 ]
  %407 = phi i32 [ 0, %399 ], [ %444, %441 ]
  %408 = phi i16* [ %402, %399 ], [ %443, %441 ]
  %409 = phi i16* [ %208, %399 ], [ %442, %441 ]
  br label %410

410:                                              ; preds = %410, %404
  %411 = phi i64 [ %405, %404 ], [ %438, %410 ]
  %412 = phi i64 [ %406, %404 ], [ %435, %410 ]
  %413 = phi i64 [ 0, %404 ], [ %439, %410 ]
  %414 = getelementptr inbounds i16, i16* %409, i64 %413
  %415 = load i16, i16* %414, align 2
  %416 = zext i16 %415 to i32
  %417 = getelementptr inbounds i16, i16* %408, i64 %413
  %418 = load i16, i16* %417, align 2
  %419 = zext i16 %418 to i32
  %420 = sub nsw i32 %416, %419
  %421 = sext i32 %420 to i64
  %422 = add nsw i64 %412, %421
  %423 = mul nsw i32 %420, %420
  %424 = zext i32 %423 to i64
  %425 = add i64 %411, %424
  %426 = or i64 %413, 1
  %427 = getelementptr inbounds i16, i16* %409, i64 %426
  %428 = load i16, i16* %427, align 2
  %429 = zext i16 %428 to i32
  %430 = getelementptr inbounds i16, i16* %408, i64 %426
  %431 = load i16, i16* %430, align 2
  %432 = zext i16 %431 to i32
  %433 = sub nsw i32 %429, %432
  %434 = sext i32 %433 to i64
  %435 = add nsw i64 %422, %434
  %436 = mul nsw i32 %433, %433
  %437 = zext i32 %436 to i64
  %438 = add i64 %425, %437
  %439 = add nuw nsw i64 %413, 2
  %440 = icmp eq i64 %439, 64
  br i1 %440, label %441, label %410

441:                                              ; preds = %410
  %442 = getelementptr inbounds i16, i16* %409, i64 64
  %443 = getelementptr inbounds i16, i16* %408, i64 %403
  %444 = add nuw nsw i32 %407, 1
  %445 = icmp eq i32 %444, 32
  br i1 %445, label %446, label %404

446:                                              ; preds = %441
  %447 = add i64 %438, 128
  %448 = lshr i64 %447, 8
  %449 = trunc i64 %448 to i32
  store i32 %449, i32* %6, align 4
  %450 = and i64 %448, 4294967295
  %451 = shl i64 %435, 28
  %452 = add i64 %451, 2147483648
  %453 = ashr i64 %452, 32
  %454 = mul nsw i64 %453, %453
  %455 = lshr i64 %454, 11
  %456 = sub nsw i64 %450, %455
  %457 = icmp sgt i64 %456, -1
  %458 = trunc i64 %456 to i32
  %459 = select i1 %457, i32 %458, i32 0
  call void @llvm.lifetime.end.p0i8(i64 4096, i8* nonnull %11) #4
  call void @llvm.lifetime.end.p0i8(i64 4224, i8* nonnull %10) #4
  ret i32 %459
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_highbd_8_sub_pixel_avg_variance64x32_c(i8*, i32, i32, i32, i8*, i32, i32* nocapture, i8*) local_unnamed_addr #2 {
  %9 = alloca [2112 x i16], align 16
  %10 = alloca [2048 x i16], align 16
  %11 = alloca [2048 x i16], align 16
  %12 = bitcast [2112 x i16]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4224, i8* nonnull %12) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %12, i8 -86, i64 4224, i1 false)
  %13 = bitcast [2048 x i16]* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4096, i8* nonnull %13) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %13, i8 -86, i64 4096, i1 false)
  %14 = bitcast [2048 x i16]* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4096, i8* nonnull %14) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %14, i8 -86, i64 4096, i1 false)
  %15 = getelementptr inbounds [2112 x i16], [2112 x i16]* %9, i64 0, i64 0
  %16 = sext i32 %2 to i64
  %17 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %16, i64 0
  %18 = ptrtoint i8* %0 to i64
  %19 = shl i64 %18, 1
  %20 = inttoptr i64 %19 to i16*
  %21 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %16, i64 1
  %22 = add i32 %1, -64
  %23 = zext i32 %22 to i64
  %24 = load i8, i8* %17, align 2
  %25 = zext i8 %24 to i32
  %26 = load i8, i8* %21, align 1
  %27 = zext i8 %26 to i32
  %28 = insertelement <8 x i32> undef, i32 %25, i32 0
  %29 = shufflevector <8 x i32> %28, <8 x i32> undef, <8 x i32> zeroinitializer
  %30 = insertelement <8 x i32> undef, i32 %27, i32 0
  %31 = shufflevector <8 x i32> %30, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %32

32:                                               ; preds = %203, %8
  %33 = phi i64 [ %209, %203 ], [ 0, %8 ]
  %34 = phi i16* [ %205, %203 ], [ %20, %8 ]
  %35 = phi i32 [ %207, %203 ], [ 0, %8 ]
  %36 = phi i16* [ %206, %203 ], [ %15, %8 ]
  %37 = shl nuw nsw i64 %33, 6
  %38 = add i64 %37, 64
  %39 = getelementptr [2112 x i16], [2112 x i16]* %9, i64 0, i64 %38
  %40 = getelementptr [2112 x i16], [2112 x i16]* %9, i64 0, i64 %37
  %41 = getelementptr i16, i16* %34, i64 65
  %42 = icmp ult i16* %40, %41
  %43 = icmp ult i16* %34, %39
  %44 = and i1 %42, %43
  br i1 %44, label %173, label %45

45:                                               ; preds = %32
  %46 = getelementptr i16, i16* %34, i64 64
  %47 = bitcast i16* %34 to <8 x i16>*
  %48 = load <8 x i16>, <8 x i16>* %47, align 2, !alias.scope !531
  %49 = zext <8 x i16> %48 to <8 x i32>
  %50 = mul nuw nsw <8 x i32> %29, %49
  %51 = getelementptr inbounds i16, i16* %34, i64 1
  %52 = bitcast i16* %51 to <8 x i16>*
  %53 = load <8 x i16>, <8 x i16>* %52, align 2, !alias.scope !531
  %54 = zext <8 x i16> %53 to <8 x i32>
  %55 = mul nuw nsw <8 x i32> %31, %54
  %56 = add nuw nsw <8 x i32> %50, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %57 = add nuw nsw <8 x i32> %56, %55
  %58 = lshr <8 x i32> %57, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %59 = trunc <8 x i32> %58 to <8 x i16>
  %60 = bitcast i16* %36 to <8 x i16>*
  store <8 x i16> %59, <8 x i16>* %60, align 2, !alias.scope !534, !noalias !531
  %61 = getelementptr i16, i16* %34, i64 8
  %62 = bitcast i16* %61 to <8 x i16>*
  %63 = load <8 x i16>, <8 x i16>* %62, align 2, !alias.scope !531
  %64 = zext <8 x i16> %63 to <8 x i32>
  %65 = mul nuw nsw <8 x i32> %29, %64
  %66 = getelementptr inbounds i16, i16* %34, i64 9
  %67 = bitcast i16* %66 to <8 x i16>*
  %68 = load <8 x i16>, <8 x i16>* %67, align 2, !alias.scope !531
  %69 = zext <8 x i16> %68 to <8 x i32>
  %70 = mul nuw nsw <8 x i32> %31, %69
  %71 = add nuw nsw <8 x i32> %65, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %72 = add nuw nsw <8 x i32> %71, %70
  %73 = lshr <8 x i32> %72, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %74 = trunc <8 x i32> %73 to <8 x i16>
  %75 = getelementptr inbounds i16, i16* %36, i64 8
  %76 = bitcast i16* %75 to <8 x i16>*
  store <8 x i16> %74, <8 x i16>* %76, align 2, !alias.scope !534, !noalias !531
  %77 = getelementptr i16, i16* %34, i64 16
  %78 = bitcast i16* %77 to <8 x i16>*
  %79 = load <8 x i16>, <8 x i16>* %78, align 2, !alias.scope !531
  %80 = zext <8 x i16> %79 to <8 x i32>
  %81 = mul nuw nsw <8 x i32> %29, %80
  %82 = getelementptr inbounds i16, i16* %34, i64 17
  %83 = bitcast i16* %82 to <8 x i16>*
  %84 = load <8 x i16>, <8 x i16>* %83, align 2, !alias.scope !531
  %85 = zext <8 x i16> %84 to <8 x i32>
  %86 = mul nuw nsw <8 x i32> %31, %85
  %87 = add nuw nsw <8 x i32> %81, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %88 = add nuw nsw <8 x i32> %87, %86
  %89 = lshr <8 x i32> %88, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %90 = trunc <8 x i32> %89 to <8 x i16>
  %91 = getelementptr inbounds i16, i16* %36, i64 16
  %92 = bitcast i16* %91 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %92, align 2, !alias.scope !534, !noalias !531
  %93 = getelementptr i16, i16* %34, i64 24
  %94 = bitcast i16* %93 to <8 x i16>*
  %95 = load <8 x i16>, <8 x i16>* %94, align 2, !alias.scope !531
  %96 = zext <8 x i16> %95 to <8 x i32>
  %97 = mul nuw nsw <8 x i32> %29, %96
  %98 = getelementptr inbounds i16, i16* %34, i64 25
  %99 = bitcast i16* %98 to <8 x i16>*
  %100 = load <8 x i16>, <8 x i16>* %99, align 2, !alias.scope !531
  %101 = zext <8 x i16> %100 to <8 x i32>
  %102 = mul nuw nsw <8 x i32> %31, %101
  %103 = add nuw nsw <8 x i32> %97, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %104 = add nuw nsw <8 x i32> %103, %102
  %105 = lshr <8 x i32> %104, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %106 = trunc <8 x i32> %105 to <8 x i16>
  %107 = getelementptr inbounds i16, i16* %36, i64 24
  %108 = bitcast i16* %107 to <8 x i16>*
  store <8 x i16> %106, <8 x i16>* %108, align 2, !alias.scope !534, !noalias !531
  %109 = getelementptr i16, i16* %34, i64 32
  %110 = bitcast i16* %109 to <8 x i16>*
  %111 = load <8 x i16>, <8 x i16>* %110, align 2, !alias.scope !531
  %112 = zext <8 x i16> %111 to <8 x i32>
  %113 = mul nuw nsw <8 x i32> %29, %112
  %114 = getelementptr inbounds i16, i16* %34, i64 33
  %115 = bitcast i16* %114 to <8 x i16>*
  %116 = load <8 x i16>, <8 x i16>* %115, align 2, !alias.scope !531
  %117 = zext <8 x i16> %116 to <8 x i32>
  %118 = mul nuw nsw <8 x i32> %31, %117
  %119 = add nuw nsw <8 x i32> %113, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %120 = add nuw nsw <8 x i32> %119, %118
  %121 = lshr <8 x i32> %120, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %122 = trunc <8 x i32> %121 to <8 x i16>
  %123 = getelementptr inbounds i16, i16* %36, i64 32
  %124 = bitcast i16* %123 to <8 x i16>*
  store <8 x i16> %122, <8 x i16>* %124, align 2, !alias.scope !534, !noalias !531
  %125 = getelementptr i16, i16* %34, i64 40
  %126 = bitcast i16* %125 to <8 x i16>*
  %127 = load <8 x i16>, <8 x i16>* %126, align 2, !alias.scope !531
  %128 = zext <8 x i16> %127 to <8 x i32>
  %129 = mul nuw nsw <8 x i32> %29, %128
  %130 = getelementptr inbounds i16, i16* %34, i64 41
  %131 = bitcast i16* %130 to <8 x i16>*
  %132 = load <8 x i16>, <8 x i16>* %131, align 2, !alias.scope !531
  %133 = zext <8 x i16> %132 to <8 x i32>
  %134 = mul nuw nsw <8 x i32> %31, %133
  %135 = add nuw nsw <8 x i32> %129, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %136 = add nuw nsw <8 x i32> %135, %134
  %137 = lshr <8 x i32> %136, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %138 = trunc <8 x i32> %137 to <8 x i16>
  %139 = getelementptr inbounds i16, i16* %36, i64 40
  %140 = bitcast i16* %139 to <8 x i16>*
  store <8 x i16> %138, <8 x i16>* %140, align 2, !alias.scope !534, !noalias !531
  %141 = getelementptr i16, i16* %34, i64 48
  %142 = bitcast i16* %141 to <8 x i16>*
  %143 = load <8 x i16>, <8 x i16>* %142, align 2, !alias.scope !531
  %144 = zext <8 x i16> %143 to <8 x i32>
  %145 = mul nuw nsw <8 x i32> %29, %144
  %146 = getelementptr inbounds i16, i16* %34, i64 49
  %147 = bitcast i16* %146 to <8 x i16>*
  %148 = load <8 x i16>, <8 x i16>* %147, align 2, !alias.scope !531
  %149 = zext <8 x i16> %148 to <8 x i32>
  %150 = mul nuw nsw <8 x i32> %31, %149
  %151 = add nuw nsw <8 x i32> %145, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %152 = add nuw nsw <8 x i32> %151, %150
  %153 = lshr <8 x i32> %152, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %154 = trunc <8 x i32> %153 to <8 x i16>
  %155 = getelementptr inbounds i16, i16* %36, i64 48
  %156 = bitcast i16* %155 to <8 x i16>*
  store <8 x i16> %154, <8 x i16>* %156, align 2, !alias.scope !534, !noalias !531
  %157 = getelementptr i16, i16* %34, i64 56
  %158 = bitcast i16* %157 to <8 x i16>*
  %159 = load <8 x i16>, <8 x i16>* %158, align 2, !alias.scope !531
  %160 = zext <8 x i16> %159 to <8 x i32>
  %161 = mul nuw nsw <8 x i32> %29, %160
  %162 = getelementptr inbounds i16, i16* %34, i64 57
  %163 = bitcast i16* %162 to <8 x i16>*
  %164 = load <8 x i16>, <8 x i16>* %163, align 2, !alias.scope !531
  %165 = zext <8 x i16> %164 to <8 x i32>
  %166 = mul nuw nsw <8 x i32> %31, %165
  %167 = add nuw nsw <8 x i32> %161, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %168 = add nuw nsw <8 x i32> %167, %166
  %169 = lshr <8 x i32> %168, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %170 = trunc <8 x i32> %169 to <8 x i16>
  %171 = getelementptr inbounds i16, i16* %36, i64 56
  %172 = bitcast i16* %171 to <8 x i16>*
  store <8 x i16> %170, <8 x i16>* %172, align 2, !alias.scope !534, !noalias !531
  br label %203

173:                                              ; preds = %32, %173
  %174 = phi i64 [ %201, %173 ], [ 0, %32 ]
  %175 = phi i16* [ %192, %173 ], [ %34, %32 ]
  %176 = load i16, i16* %175, align 2
  %177 = zext i16 %176 to i32
  %178 = mul nuw nsw i32 %25, %177
  %179 = getelementptr inbounds i16, i16* %175, i64 1
  %180 = load i16, i16* %179, align 2
  %181 = zext i16 %180 to i32
  %182 = mul nuw nsw i32 %27, %181
  %183 = add nuw nsw i32 %178, 64
  %184 = add nuw nsw i32 %183, %182
  %185 = lshr i32 %184, 7
  %186 = trunc i32 %185 to i16
  %187 = getelementptr inbounds i16, i16* %36, i64 %174
  store i16 %186, i16* %187, align 2
  %188 = or i64 %174, 1
  %189 = load i16, i16* %179, align 2
  %190 = zext i16 %189 to i32
  %191 = mul nuw nsw i32 %25, %190
  %192 = getelementptr inbounds i16, i16* %175, i64 2
  %193 = load i16, i16* %192, align 2
  %194 = zext i16 %193 to i32
  %195 = mul nuw nsw i32 %27, %194
  %196 = add nuw nsw i32 %191, 64
  %197 = add nuw nsw i32 %196, %195
  %198 = lshr i32 %197, 7
  %199 = trunc i32 %198 to i16
  %200 = getelementptr inbounds i16, i16* %36, i64 %188
  store i16 %199, i16* %200, align 2
  %201 = add nuw nsw i64 %174, 2
  %202 = icmp eq i64 %201, 64
  br i1 %202, label %203, label %173, !llvm.loop !536

203:                                              ; preds = %173, %45
  %204 = phi i16* [ %46, %45 ], [ %192, %173 ]
  %205 = getelementptr inbounds i16, i16* %204, i64 %23
  %206 = getelementptr inbounds i16, i16* %36, i64 64
  %207 = add nuw nsw i32 %35, 1
  %208 = icmp eq i32 %207, 33
  %209 = add i64 %33, 1
  br i1 %208, label %210, label %32

210:                                              ; preds = %203
  %211 = getelementptr inbounds [2048 x i16], [2048 x i16]* %10, i64 0, i64 0
  %212 = sext i32 %3 to i64
  %213 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %212, i64 0
  %214 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %212, i64 1
  %215 = load i8, i8* %213, align 2
  %216 = zext i8 %215 to i32
  %217 = load i8, i8* %214, align 1
  %218 = zext i8 %217 to i32
  %219 = insertelement <8 x i32> undef, i32 %216, i32 0
  %220 = shufflevector <8 x i32> %219, <8 x i32> undef, <8 x i32> zeroinitializer
  %221 = insertelement <8 x i32> undef, i32 %218, i32 0
  %222 = shufflevector <8 x i32> %221, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %223

223:                                              ; preds = %396, %210
  %224 = phi i64 [ %401, %396 ], [ 0, %210 ]
  %225 = phi i32 [ %399, %396 ], [ 0, %210 ]
  %226 = phi i16* [ %397, %396 ], [ %15, %210 ]
  %227 = phi i16* [ %398, %396 ], [ %211, %210 ]
  %228 = shl nuw nsw i64 %224, 6
  %229 = add i64 %228, 64
  %230 = getelementptr [2048 x i16], [2048 x i16]* %10, i64 0, i64 %229
  %231 = getelementptr [2048 x i16], [2048 x i16]* %10, i64 0, i64 %228
  %232 = getelementptr i16, i16* %226, i64 128
  %233 = icmp ult i16* %231, %232
  %234 = icmp ult i16* %226, %230
  %235 = and i1 %233, %234
  br i1 %235, label %364, label %236

236:                                              ; preds = %223
  %237 = getelementptr i16, i16* %226, i64 64
  %238 = bitcast i16* %226 to <8 x i16>*
  %239 = load <8 x i16>, <8 x i16>* %238, align 2, !alias.scope !537
  %240 = zext <8 x i16> %239 to <8 x i32>
  %241 = mul nuw nsw <8 x i32> %220, %240
  %242 = getelementptr inbounds i16, i16* %226, i64 64
  %243 = bitcast i16* %242 to <8 x i16>*
  %244 = load <8 x i16>, <8 x i16>* %243, align 2, !alias.scope !537
  %245 = zext <8 x i16> %244 to <8 x i32>
  %246 = mul nuw nsw <8 x i32> %222, %245
  %247 = add nuw nsw <8 x i32> %241, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %248 = add nuw nsw <8 x i32> %247, %246
  %249 = lshr <8 x i32> %248, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %250 = trunc <8 x i32> %249 to <8 x i16>
  %251 = bitcast i16* %227 to <8 x i16>*
  store <8 x i16> %250, <8 x i16>* %251, align 2, !alias.scope !540, !noalias !537
  %252 = getelementptr i16, i16* %226, i64 8
  %253 = bitcast i16* %252 to <8 x i16>*
  %254 = load <8 x i16>, <8 x i16>* %253, align 2, !alias.scope !537
  %255 = zext <8 x i16> %254 to <8 x i32>
  %256 = mul nuw nsw <8 x i32> %220, %255
  %257 = getelementptr inbounds i16, i16* %226, i64 72
  %258 = bitcast i16* %257 to <8 x i16>*
  %259 = load <8 x i16>, <8 x i16>* %258, align 2, !alias.scope !537
  %260 = zext <8 x i16> %259 to <8 x i32>
  %261 = mul nuw nsw <8 x i32> %222, %260
  %262 = add nuw nsw <8 x i32> %256, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %263 = add nuw nsw <8 x i32> %262, %261
  %264 = lshr <8 x i32> %263, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %265 = trunc <8 x i32> %264 to <8 x i16>
  %266 = getelementptr inbounds i16, i16* %227, i64 8
  %267 = bitcast i16* %266 to <8 x i16>*
  store <8 x i16> %265, <8 x i16>* %267, align 2, !alias.scope !540, !noalias !537
  %268 = getelementptr i16, i16* %226, i64 16
  %269 = bitcast i16* %268 to <8 x i16>*
  %270 = load <8 x i16>, <8 x i16>* %269, align 2, !alias.scope !537
  %271 = zext <8 x i16> %270 to <8 x i32>
  %272 = mul nuw nsw <8 x i32> %220, %271
  %273 = getelementptr inbounds i16, i16* %226, i64 80
  %274 = bitcast i16* %273 to <8 x i16>*
  %275 = load <8 x i16>, <8 x i16>* %274, align 2, !alias.scope !537
  %276 = zext <8 x i16> %275 to <8 x i32>
  %277 = mul nuw nsw <8 x i32> %222, %276
  %278 = add nuw nsw <8 x i32> %272, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %279 = add nuw nsw <8 x i32> %278, %277
  %280 = lshr <8 x i32> %279, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %281 = trunc <8 x i32> %280 to <8 x i16>
  %282 = getelementptr inbounds i16, i16* %227, i64 16
  %283 = bitcast i16* %282 to <8 x i16>*
  store <8 x i16> %281, <8 x i16>* %283, align 2, !alias.scope !540, !noalias !537
  %284 = getelementptr i16, i16* %226, i64 24
  %285 = bitcast i16* %284 to <8 x i16>*
  %286 = load <8 x i16>, <8 x i16>* %285, align 2, !alias.scope !537
  %287 = zext <8 x i16> %286 to <8 x i32>
  %288 = mul nuw nsw <8 x i32> %220, %287
  %289 = getelementptr inbounds i16, i16* %226, i64 88
  %290 = bitcast i16* %289 to <8 x i16>*
  %291 = load <8 x i16>, <8 x i16>* %290, align 2, !alias.scope !537
  %292 = zext <8 x i16> %291 to <8 x i32>
  %293 = mul nuw nsw <8 x i32> %222, %292
  %294 = add nuw nsw <8 x i32> %288, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %295 = add nuw nsw <8 x i32> %294, %293
  %296 = lshr <8 x i32> %295, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %297 = trunc <8 x i32> %296 to <8 x i16>
  %298 = getelementptr inbounds i16, i16* %227, i64 24
  %299 = bitcast i16* %298 to <8 x i16>*
  store <8 x i16> %297, <8 x i16>* %299, align 2, !alias.scope !540, !noalias !537
  %300 = getelementptr i16, i16* %226, i64 32
  %301 = bitcast i16* %300 to <8 x i16>*
  %302 = load <8 x i16>, <8 x i16>* %301, align 2, !alias.scope !537
  %303 = zext <8 x i16> %302 to <8 x i32>
  %304 = mul nuw nsw <8 x i32> %220, %303
  %305 = getelementptr inbounds i16, i16* %226, i64 96
  %306 = bitcast i16* %305 to <8 x i16>*
  %307 = load <8 x i16>, <8 x i16>* %306, align 2, !alias.scope !537
  %308 = zext <8 x i16> %307 to <8 x i32>
  %309 = mul nuw nsw <8 x i32> %222, %308
  %310 = add nuw nsw <8 x i32> %304, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %311 = add nuw nsw <8 x i32> %310, %309
  %312 = lshr <8 x i32> %311, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %313 = trunc <8 x i32> %312 to <8 x i16>
  %314 = getelementptr inbounds i16, i16* %227, i64 32
  %315 = bitcast i16* %314 to <8 x i16>*
  store <8 x i16> %313, <8 x i16>* %315, align 2, !alias.scope !540, !noalias !537
  %316 = getelementptr i16, i16* %226, i64 40
  %317 = bitcast i16* %316 to <8 x i16>*
  %318 = load <8 x i16>, <8 x i16>* %317, align 2, !alias.scope !537
  %319 = zext <8 x i16> %318 to <8 x i32>
  %320 = mul nuw nsw <8 x i32> %220, %319
  %321 = getelementptr inbounds i16, i16* %226, i64 104
  %322 = bitcast i16* %321 to <8 x i16>*
  %323 = load <8 x i16>, <8 x i16>* %322, align 2, !alias.scope !537
  %324 = zext <8 x i16> %323 to <8 x i32>
  %325 = mul nuw nsw <8 x i32> %222, %324
  %326 = add nuw nsw <8 x i32> %320, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %327 = add nuw nsw <8 x i32> %326, %325
  %328 = lshr <8 x i32> %327, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %329 = trunc <8 x i32> %328 to <8 x i16>
  %330 = getelementptr inbounds i16, i16* %227, i64 40
  %331 = bitcast i16* %330 to <8 x i16>*
  store <8 x i16> %329, <8 x i16>* %331, align 2, !alias.scope !540, !noalias !537
  %332 = getelementptr i16, i16* %226, i64 48
  %333 = bitcast i16* %332 to <8 x i16>*
  %334 = load <8 x i16>, <8 x i16>* %333, align 2, !alias.scope !537
  %335 = zext <8 x i16> %334 to <8 x i32>
  %336 = mul nuw nsw <8 x i32> %220, %335
  %337 = getelementptr inbounds i16, i16* %226, i64 112
  %338 = bitcast i16* %337 to <8 x i16>*
  %339 = load <8 x i16>, <8 x i16>* %338, align 2, !alias.scope !537
  %340 = zext <8 x i16> %339 to <8 x i32>
  %341 = mul nuw nsw <8 x i32> %222, %340
  %342 = add nuw nsw <8 x i32> %336, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %343 = add nuw nsw <8 x i32> %342, %341
  %344 = lshr <8 x i32> %343, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %345 = trunc <8 x i32> %344 to <8 x i16>
  %346 = getelementptr inbounds i16, i16* %227, i64 48
  %347 = bitcast i16* %346 to <8 x i16>*
  store <8 x i16> %345, <8 x i16>* %347, align 2, !alias.scope !540, !noalias !537
  %348 = getelementptr i16, i16* %226, i64 56
  %349 = bitcast i16* %348 to <8 x i16>*
  %350 = load <8 x i16>, <8 x i16>* %349, align 2, !alias.scope !537
  %351 = zext <8 x i16> %350 to <8 x i32>
  %352 = mul nuw nsw <8 x i32> %220, %351
  %353 = getelementptr inbounds i16, i16* %226, i64 120
  %354 = bitcast i16* %353 to <8 x i16>*
  %355 = load <8 x i16>, <8 x i16>* %354, align 2, !alias.scope !537
  %356 = zext <8 x i16> %355 to <8 x i32>
  %357 = mul nuw nsw <8 x i32> %222, %356
  %358 = add nuw nsw <8 x i32> %352, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %359 = add nuw nsw <8 x i32> %358, %357
  %360 = lshr <8 x i32> %359, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %361 = trunc <8 x i32> %360 to <8 x i16>
  %362 = getelementptr inbounds i16, i16* %227, i64 56
  %363 = bitcast i16* %362 to <8 x i16>*
  store <8 x i16> %361, <8 x i16>* %363, align 2, !alias.scope !540, !noalias !537
  br label %396

364:                                              ; preds = %223, %364
  %365 = phi i64 [ %394, %364 ], [ 0, %223 ]
  %366 = phi i16* [ %393, %364 ], [ %226, %223 ]
  %367 = load i16, i16* %366, align 2
  %368 = zext i16 %367 to i32
  %369 = mul nuw nsw i32 %216, %368
  %370 = getelementptr inbounds i16, i16* %366, i64 64
  %371 = load i16, i16* %370, align 2
  %372 = zext i16 %371 to i32
  %373 = mul nuw nsw i32 %218, %372
  %374 = add nuw nsw i32 %369, 64
  %375 = add nuw nsw i32 %374, %373
  %376 = lshr i32 %375, 7
  %377 = trunc i32 %376 to i16
  %378 = getelementptr inbounds i16, i16* %227, i64 %365
  store i16 %377, i16* %378, align 2
  %379 = getelementptr inbounds i16, i16* %366, i64 1
  %380 = or i64 %365, 1
  %381 = load i16, i16* %379, align 2
  %382 = zext i16 %381 to i32
  %383 = mul nuw nsw i32 %216, %382
  %384 = getelementptr inbounds i16, i16* %366, i64 65
  %385 = load i16, i16* %384, align 2
  %386 = zext i16 %385 to i32
  %387 = mul nuw nsw i32 %218, %386
  %388 = add nuw nsw i32 %383, 64
  %389 = add nuw nsw i32 %388, %387
  %390 = lshr i32 %389, 7
  %391 = trunc i32 %390 to i16
  %392 = getelementptr inbounds i16, i16* %227, i64 %380
  store i16 %391, i16* %392, align 2
  %393 = getelementptr inbounds i16, i16* %366, i64 2
  %394 = add nuw nsw i64 %365, 2
  %395 = icmp eq i64 %394, 64
  br i1 %395, label %396, label %364, !llvm.loop !542

396:                                              ; preds = %364, %236
  %397 = phi i16* [ %237, %236 ], [ %393, %364 ]
  %398 = getelementptr inbounds i16, i16* %227, i64 64
  %399 = add nuw nsw i32 %225, 1
  %400 = icmp eq i32 %399, 32
  %401 = add i64 %224, 1
  br i1 %400, label %402, label %223

402:                                              ; preds = %396
  %403 = getelementptr inbounds [2048 x i16], [2048 x i16]* %11, i64 0, i64 0
  %404 = ptrtoint i8* %7 to i64
  %405 = shl i64 %404, 1
  %406 = inttoptr i64 %405 to i16*
  br label %407

407:                                              ; preds = %565, %402
  %408 = phi i64 [ %571, %565 ], [ 0, %402 ]
  %409 = phi i16* [ %566, %565 ], [ %403, %402 ]
  %410 = phi i32 [ %569, %565 ], [ 0, %402 ]
  %411 = phi i16* [ %567, %565 ], [ %406, %402 ]
  %412 = phi i16* [ %568, %565 ], [ %211, %402 ]
  %413 = shl nuw nsw i64 %408, 6
  %414 = getelementptr [2048 x i16], [2048 x i16]* %11, i64 0, i64 %413
  %415 = add i64 %413, 64
  %416 = getelementptr [2048 x i16], [2048 x i16]* %11, i64 0, i64 %415
  %417 = getelementptr [2048 x i16], [2048 x i16]* %10, i64 0, i64 %415
  %418 = getelementptr [2048 x i16], [2048 x i16]* %10, i64 0, i64 %413
  %419 = getelementptr i16, i16* %406, i64 %415
  %420 = getelementptr i16, i16* %406, i64 %413
  %421 = icmp ult i16* %414, %419
  %422 = icmp ult i16* %420, %416
  %423 = and i1 %421, %422
  %424 = icmp ult i16* %414, %417
  %425 = icmp ult i16* %418, %416
  %426 = and i1 %424, %425
  %427 = or i1 %423, %426
  br i1 %427, label %538, label %428

428:                                              ; preds = %407
  %429 = bitcast i16* %411 to <8 x i16>*
  %430 = load <8 x i16>, <8 x i16>* %429, align 2, !alias.scope !543
  %431 = zext <8 x i16> %430 to <8 x i32>
  %432 = bitcast i16* %412 to <8 x i16>*
  %433 = load <8 x i16>, <8 x i16>* %432, align 2, !alias.scope !546
  %434 = zext <8 x i16> %433 to <8 x i32>
  %435 = add nuw nsw <8 x i32> %431, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %436 = add nuw nsw <8 x i32> %435, %434
  %437 = lshr <8 x i32> %436, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %438 = trunc <8 x i32> %437 to <8 x i16>
  %439 = bitcast i16* %409 to <8 x i16>*
  store <8 x i16> %438, <8 x i16>* %439, align 2, !alias.scope !548, !noalias !550
  %440 = getelementptr inbounds i16, i16* %411, i64 8
  %441 = bitcast i16* %440 to <8 x i16>*
  %442 = load <8 x i16>, <8 x i16>* %441, align 2, !alias.scope !543
  %443 = zext <8 x i16> %442 to <8 x i32>
  %444 = getelementptr inbounds i16, i16* %412, i64 8
  %445 = bitcast i16* %444 to <8 x i16>*
  %446 = load <8 x i16>, <8 x i16>* %445, align 2, !alias.scope !546
  %447 = zext <8 x i16> %446 to <8 x i32>
  %448 = add nuw nsw <8 x i32> %443, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %449 = add nuw nsw <8 x i32> %448, %447
  %450 = lshr <8 x i32> %449, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %451 = trunc <8 x i32> %450 to <8 x i16>
  %452 = getelementptr inbounds i16, i16* %409, i64 8
  %453 = bitcast i16* %452 to <8 x i16>*
  store <8 x i16> %451, <8 x i16>* %453, align 2, !alias.scope !548, !noalias !550
  %454 = getelementptr inbounds i16, i16* %411, i64 16
  %455 = bitcast i16* %454 to <8 x i16>*
  %456 = load <8 x i16>, <8 x i16>* %455, align 2, !alias.scope !543
  %457 = zext <8 x i16> %456 to <8 x i32>
  %458 = getelementptr inbounds i16, i16* %412, i64 16
  %459 = bitcast i16* %458 to <8 x i16>*
  %460 = load <8 x i16>, <8 x i16>* %459, align 2, !alias.scope !546
  %461 = zext <8 x i16> %460 to <8 x i32>
  %462 = add nuw nsw <8 x i32> %457, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %463 = add nuw nsw <8 x i32> %462, %461
  %464 = lshr <8 x i32> %463, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %465 = trunc <8 x i32> %464 to <8 x i16>
  %466 = getelementptr inbounds i16, i16* %409, i64 16
  %467 = bitcast i16* %466 to <8 x i16>*
  store <8 x i16> %465, <8 x i16>* %467, align 2, !alias.scope !548, !noalias !550
  %468 = getelementptr inbounds i16, i16* %411, i64 24
  %469 = bitcast i16* %468 to <8 x i16>*
  %470 = load <8 x i16>, <8 x i16>* %469, align 2, !alias.scope !543
  %471 = zext <8 x i16> %470 to <8 x i32>
  %472 = getelementptr inbounds i16, i16* %412, i64 24
  %473 = bitcast i16* %472 to <8 x i16>*
  %474 = load <8 x i16>, <8 x i16>* %473, align 2, !alias.scope !546
  %475 = zext <8 x i16> %474 to <8 x i32>
  %476 = add nuw nsw <8 x i32> %471, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %477 = add nuw nsw <8 x i32> %476, %475
  %478 = lshr <8 x i32> %477, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %479 = trunc <8 x i32> %478 to <8 x i16>
  %480 = getelementptr inbounds i16, i16* %409, i64 24
  %481 = bitcast i16* %480 to <8 x i16>*
  store <8 x i16> %479, <8 x i16>* %481, align 2, !alias.scope !548, !noalias !550
  %482 = getelementptr inbounds i16, i16* %411, i64 32
  %483 = bitcast i16* %482 to <8 x i16>*
  %484 = load <8 x i16>, <8 x i16>* %483, align 2, !alias.scope !543
  %485 = zext <8 x i16> %484 to <8 x i32>
  %486 = getelementptr inbounds i16, i16* %412, i64 32
  %487 = bitcast i16* %486 to <8 x i16>*
  %488 = load <8 x i16>, <8 x i16>* %487, align 2, !alias.scope !546
  %489 = zext <8 x i16> %488 to <8 x i32>
  %490 = add nuw nsw <8 x i32> %485, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %491 = add nuw nsw <8 x i32> %490, %489
  %492 = lshr <8 x i32> %491, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %493 = trunc <8 x i32> %492 to <8 x i16>
  %494 = getelementptr inbounds i16, i16* %409, i64 32
  %495 = bitcast i16* %494 to <8 x i16>*
  store <8 x i16> %493, <8 x i16>* %495, align 2, !alias.scope !548, !noalias !550
  %496 = getelementptr inbounds i16, i16* %411, i64 40
  %497 = bitcast i16* %496 to <8 x i16>*
  %498 = load <8 x i16>, <8 x i16>* %497, align 2, !alias.scope !543
  %499 = zext <8 x i16> %498 to <8 x i32>
  %500 = getelementptr inbounds i16, i16* %412, i64 40
  %501 = bitcast i16* %500 to <8 x i16>*
  %502 = load <8 x i16>, <8 x i16>* %501, align 2, !alias.scope !546
  %503 = zext <8 x i16> %502 to <8 x i32>
  %504 = add nuw nsw <8 x i32> %499, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %505 = add nuw nsw <8 x i32> %504, %503
  %506 = lshr <8 x i32> %505, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %507 = trunc <8 x i32> %506 to <8 x i16>
  %508 = getelementptr inbounds i16, i16* %409, i64 40
  %509 = bitcast i16* %508 to <8 x i16>*
  store <8 x i16> %507, <8 x i16>* %509, align 2, !alias.scope !548, !noalias !550
  %510 = getelementptr inbounds i16, i16* %411, i64 48
  %511 = bitcast i16* %510 to <8 x i16>*
  %512 = load <8 x i16>, <8 x i16>* %511, align 2, !alias.scope !543
  %513 = zext <8 x i16> %512 to <8 x i32>
  %514 = getelementptr inbounds i16, i16* %412, i64 48
  %515 = bitcast i16* %514 to <8 x i16>*
  %516 = load <8 x i16>, <8 x i16>* %515, align 2, !alias.scope !546
  %517 = zext <8 x i16> %516 to <8 x i32>
  %518 = add nuw nsw <8 x i32> %513, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %519 = add nuw nsw <8 x i32> %518, %517
  %520 = lshr <8 x i32> %519, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %521 = trunc <8 x i32> %520 to <8 x i16>
  %522 = getelementptr inbounds i16, i16* %409, i64 48
  %523 = bitcast i16* %522 to <8 x i16>*
  store <8 x i16> %521, <8 x i16>* %523, align 2, !alias.scope !548, !noalias !550
  %524 = getelementptr inbounds i16, i16* %411, i64 56
  %525 = bitcast i16* %524 to <8 x i16>*
  %526 = load <8 x i16>, <8 x i16>* %525, align 2, !alias.scope !543
  %527 = zext <8 x i16> %526 to <8 x i32>
  %528 = getelementptr inbounds i16, i16* %412, i64 56
  %529 = bitcast i16* %528 to <8 x i16>*
  %530 = load <8 x i16>, <8 x i16>* %529, align 2, !alias.scope !546
  %531 = zext <8 x i16> %530 to <8 x i32>
  %532 = add nuw nsw <8 x i32> %527, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %533 = add nuw nsw <8 x i32> %532, %531
  %534 = lshr <8 x i32> %533, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %535 = trunc <8 x i32> %534 to <8 x i16>
  %536 = getelementptr inbounds i16, i16* %409, i64 56
  %537 = bitcast i16* %536 to <8 x i16>*
  store <8 x i16> %535, <8 x i16>* %537, align 2, !alias.scope !548, !noalias !550
  br label %565

538:                                              ; preds = %407, %538
  %539 = phi i64 [ %563, %538 ], [ 0, %407 ]
  %540 = getelementptr inbounds i16, i16* %411, i64 %539
  %541 = load i16, i16* %540, align 2
  %542 = zext i16 %541 to i32
  %543 = getelementptr inbounds i16, i16* %412, i64 %539
  %544 = load i16, i16* %543, align 2
  %545 = zext i16 %544 to i32
  %546 = add nuw nsw i32 %542, 1
  %547 = add nuw nsw i32 %546, %545
  %548 = lshr i32 %547, 1
  %549 = trunc i32 %548 to i16
  %550 = getelementptr inbounds i16, i16* %409, i64 %539
  store i16 %549, i16* %550, align 2
  %551 = or i64 %539, 1
  %552 = getelementptr inbounds i16, i16* %411, i64 %551
  %553 = load i16, i16* %552, align 2
  %554 = zext i16 %553 to i32
  %555 = getelementptr inbounds i16, i16* %412, i64 %551
  %556 = load i16, i16* %555, align 2
  %557 = zext i16 %556 to i32
  %558 = add nuw nsw i32 %554, 1
  %559 = add nuw nsw i32 %558, %557
  %560 = lshr i32 %559, 1
  %561 = trunc i32 %560 to i16
  %562 = getelementptr inbounds i16, i16* %409, i64 %551
  store i16 %561, i16* %562, align 2
  %563 = add nuw nsw i64 %539, 2
  %564 = icmp eq i64 %563, 64
  br i1 %564, label %565, label %538, !llvm.loop !551

565:                                              ; preds = %538, %428
  %566 = getelementptr inbounds i16, i16* %409, i64 64
  %567 = getelementptr inbounds i16, i16* %411, i64 64
  %568 = getelementptr inbounds i16, i16* %412, i64 64
  %569 = add nuw nsw i32 %410, 1
  %570 = icmp eq i32 %569, 32
  %571 = add i64 %408, 1
  br i1 %570, label %572, label %407

572:                                              ; preds = %565
  %573 = ptrtoint i8* %4 to i64
  %574 = shl i64 %573, 1
  %575 = inttoptr i64 %574 to i16*
  %576 = sext i32 %5 to i64
  br label %577

577:                                              ; preds = %614, %572
  %578 = phi i64 [ 0, %572 ], [ %611, %614 ]
  %579 = phi i64 [ 0, %572 ], [ %608, %614 ]
  %580 = phi i32 [ 0, %572 ], [ %617, %614 ]
  %581 = phi i16* [ %575, %572 ], [ %616, %614 ]
  %582 = phi i16* [ %403, %572 ], [ %615, %614 ]
  br label %583

583:                                              ; preds = %583, %577
  %584 = phi i64 [ %578, %577 ], [ %611, %583 ]
  %585 = phi i64 [ %579, %577 ], [ %608, %583 ]
  %586 = phi i64 [ 0, %577 ], [ %612, %583 ]
  %587 = getelementptr inbounds i16, i16* %582, i64 %586
  %588 = load i16, i16* %587, align 2
  %589 = zext i16 %588 to i32
  %590 = getelementptr inbounds i16, i16* %581, i64 %586
  %591 = load i16, i16* %590, align 2
  %592 = zext i16 %591 to i32
  %593 = sub nsw i32 %589, %592
  %594 = sext i32 %593 to i64
  %595 = add nsw i64 %585, %594
  %596 = mul nsw i32 %593, %593
  %597 = zext i32 %596 to i64
  %598 = add i64 %584, %597
  %599 = or i64 %586, 1
  %600 = getelementptr inbounds i16, i16* %582, i64 %599
  %601 = load i16, i16* %600, align 2
  %602 = zext i16 %601 to i32
  %603 = getelementptr inbounds i16, i16* %581, i64 %599
  %604 = load i16, i16* %603, align 2
  %605 = zext i16 %604 to i32
  %606 = sub nsw i32 %602, %605
  %607 = sext i32 %606 to i64
  %608 = add nsw i64 %595, %607
  %609 = mul nsw i32 %606, %606
  %610 = zext i32 %609 to i64
  %611 = add i64 %598, %610
  %612 = add nuw nsw i64 %586, 2
  %613 = icmp eq i64 %612, 64
  br i1 %613, label %614, label %583

614:                                              ; preds = %583
  %615 = getelementptr inbounds i16, i16* %582, i64 64
  %616 = getelementptr inbounds i16, i16* %581, i64 %576
  %617 = add nuw nsw i32 %580, 1
  %618 = icmp eq i32 %617, 32
  br i1 %618, label %619, label %577

619:                                              ; preds = %614
  %620 = trunc i64 %611 to i32
  store i32 %620, i32* %6, align 4
  %621 = shl i64 %608, 32
  %622 = ashr exact i64 %621, 32
  %623 = mul nsw i64 %622, %622
  %624 = lshr i64 %623, 11
  %625 = trunc i64 %624 to i32
  %626 = sub i32 %620, %625
  call void @llvm.lifetime.end.p0i8(i64 4096, i8* nonnull %14) #4
  call void @llvm.lifetime.end.p0i8(i64 4096, i8* nonnull %13) #4
  call void @llvm.lifetime.end.p0i8(i64 4224, i8* nonnull %12) #4
  ret i32 %626
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_highbd_10_sub_pixel_avg_variance64x32_c(i8*, i32, i32, i32, i8*, i32, i32* nocapture, i8*) local_unnamed_addr #2 {
  %9 = alloca [2112 x i16], align 16
  %10 = alloca [2048 x i16], align 16
  %11 = alloca [2048 x i16], align 16
  %12 = bitcast [2112 x i16]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4224, i8* nonnull %12) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %12, i8 -86, i64 4224, i1 false)
  %13 = bitcast [2048 x i16]* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4096, i8* nonnull %13) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %13, i8 -86, i64 4096, i1 false)
  %14 = bitcast [2048 x i16]* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4096, i8* nonnull %14) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %14, i8 -86, i64 4096, i1 false)
  %15 = getelementptr inbounds [2112 x i16], [2112 x i16]* %9, i64 0, i64 0
  %16 = sext i32 %2 to i64
  %17 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %16, i64 0
  %18 = ptrtoint i8* %0 to i64
  %19 = shl i64 %18, 1
  %20 = inttoptr i64 %19 to i16*
  %21 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %16, i64 1
  %22 = add i32 %1, -64
  %23 = zext i32 %22 to i64
  %24 = load i8, i8* %17, align 2
  %25 = zext i8 %24 to i32
  %26 = load i8, i8* %21, align 1
  %27 = zext i8 %26 to i32
  %28 = insertelement <8 x i32> undef, i32 %25, i32 0
  %29 = shufflevector <8 x i32> %28, <8 x i32> undef, <8 x i32> zeroinitializer
  %30 = insertelement <8 x i32> undef, i32 %27, i32 0
  %31 = shufflevector <8 x i32> %30, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %32

32:                                               ; preds = %203, %8
  %33 = phi i64 [ %209, %203 ], [ 0, %8 ]
  %34 = phi i16* [ %205, %203 ], [ %20, %8 ]
  %35 = phi i32 [ %207, %203 ], [ 0, %8 ]
  %36 = phi i16* [ %206, %203 ], [ %15, %8 ]
  %37 = shl nuw nsw i64 %33, 6
  %38 = add i64 %37, 64
  %39 = getelementptr [2112 x i16], [2112 x i16]* %9, i64 0, i64 %38
  %40 = getelementptr [2112 x i16], [2112 x i16]* %9, i64 0, i64 %37
  %41 = getelementptr i16, i16* %34, i64 65
  %42 = icmp ult i16* %40, %41
  %43 = icmp ult i16* %34, %39
  %44 = and i1 %42, %43
  br i1 %44, label %173, label %45

45:                                               ; preds = %32
  %46 = getelementptr i16, i16* %34, i64 64
  %47 = bitcast i16* %34 to <8 x i16>*
  %48 = load <8 x i16>, <8 x i16>* %47, align 2, !alias.scope !552
  %49 = zext <8 x i16> %48 to <8 x i32>
  %50 = mul nuw nsw <8 x i32> %29, %49
  %51 = getelementptr inbounds i16, i16* %34, i64 1
  %52 = bitcast i16* %51 to <8 x i16>*
  %53 = load <8 x i16>, <8 x i16>* %52, align 2, !alias.scope !552
  %54 = zext <8 x i16> %53 to <8 x i32>
  %55 = mul nuw nsw <8 x i32> %31, %54
  %56 = add nuw nsw <8 x i32> %50, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %57 = add nuw nsw <8 x i32> %56, %55
  %58 = lshr <8 x i32> %57, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %59 = trunc <8 x i32> %58 to <8 x i16>
  %60 = bitcast i16* %36 to <8 x i16>*
  store <8 x i16> %59, <8 x i16>* %60, align 2, !alias.scope !555, !noalias !552
  %61 = getelementptr i16, i16* %34, i64 8
  %62 = bitcast i16* %61 to <8 x i16>*
  %63 = load <8 x i16>, <8 x i16>* %62, align 2, !alias.scope !552
  %64 = zext <8 x i16> %63 to <8 x i32>
  %65 = mul nuw nsw <8 x i32> %29, %64
  %66 = getelementptr inbounds i16, i16* %34, i64 9
  %67 = bitcast i16* %66 to <8 x i16>*
  %68 = load <8 x i16>, <8 x i16>* %67, align 2, !alias.scope !552
  %69 = zext <8 x i16> %68 to <8 x i32>
  %70 = mul nuw nsw <8 x i32> %31, %69
  %71 = add nuw nsw <8 x i32> %65, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %72 = add nuw nsw <8 x i32> %71, %70
  %73 = lshr <8 x i32> %72, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %74 = trunc <8 x i32> %73 to <8 x i16>
  %75 = getelementptr inbounds i16, i16* %36, i64 8
  %76 = bitcast i16* %75 to <8 x i16>*
  store <8 x i16> %74, <8 x i16>* %76, align 2, !alias.scope !555, !noalias !552
  %77 = getelementptr i16, i16* %34, i64 16
  %78 = bitcast i16* %77 to <8 x i16>*
  %79 = load <8 x i16>, <8 x i16>* %78, align 2, !alias.scope !552
  %80 = zext <8 x i16> %79 to <8 x i32>
  %81 = mul nuw nsw <8 x i32> %29, %80
  %82 = getelementptr inbounds i16, i16* %34, i64 17
  %83 = bitcast i16* %82 to <8 x i16>*
  %84 = load <8 x i16>, <8 x i16>* %83, align 2, !alias.scope !552
  %85 = zext <8 x i16> %84 to <8 x i32>
  %86 = mul nuw nsw <8 x i32> %31, %85
  %87 = add nuw nsw <8 x i32> %81, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %88 = add nuw nsw <8 x i32> %87, %86
  %89 = lshr <8 x i32> %88, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %90 = trunc <8 x i32> %89 to <8 x i16>
  %91 = getelementptr inbounds i16, i16* %36, i64 16
  %92 = bitcast i16* %91 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %92, align 2, !alias.scope !555, !noalias !552
  %93 = getelementptr i16, i16* %34, i64 24
  %94 = bitcast i16* %93 to <8 x i16>*
  %95 = load <8 x i16>, <8 x i16>* %94, align 2, !alias.scope !552
  %96 = zext <8 x i16> %95 to <8 x i32>
  %97 = mul nuw nsw <8 x i32> %29, %96
  %98 = getelementptr inbounds i16, i16* %34, i64 25
  %99 = bitcast i16* %98 to <8 x i16>*
  %100 = load <8 x i16>, <8 x i16>* %99, align 2, !alias.scope !552
  %101 = zext <8 x i16> %100 to <8 x i32>
  %102 = mul nuw nsw <8 x i32> %31, %101
  %103 = add nuw nsw <8 x i32> %97, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %104 = add nuw nsw <8 x i32> %103, %102
  %105 = lshr <8 x i32> %104, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %106 = trunc <8 x i32> %105 to <8 x i16>
  %107 = getelementptr inbounds i16, i16* %36, i64 24
  %108 = bitcast i16* %107 to <8 x i16>*
  store <8 x i16> %106, <8 x i16>* %108, align 2, !alias.scope !555, !noalias !552
  %109 = getelementptr i16, i16* %34, i64 32
  %110 = bitcast i16* %109 to <8 x i16>*
  %111 = load <8 x i16>, <8 x i16>* %110, align 2, !alias.scope !552
  %112 = zext <8 x i16> %111 to <8 x i32>
  %113 = mul nuw nsw <8 x i32> %29, %112
  %114 = getelementptr inbounds i16, i16* %34, i64 33
  %115 = bitcast i16* %114 to <8 x i16>*
  %116 = load <8 x i16>, <8 x i16>* %115, align 2, !alias.scope !552
  %117 = zext <8 x i16> %116 to <8 x i32>
  %118 = mul nuw nsw <8 x i32> %31, %117
  %119 = add nuw nsw <8 x i32> %113, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %120 = add nuw nsw <8 x i32> %119, %118
  %121 = lshr <8 x i32> %120, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %122 = trunc <8 x i32> %121 to <8 x i16>
  %123 = getelementptr inbounds i16, i16* %36, i64 32
  %124 = bitcast i16* %123 to <8 x i16>*
  store <8 x i16> %122, <8 x i16>* %124, align 2, !alias.scope !555, !noalias !552
  %125 = getelementptr i16, i16* %34, i64 40
  %126 = bitcast i16* %125 to <8 x i16>*
  %127 = load <8 x i16>, <8 x i16>* %126, align 2, !alias.scope !552
  %128 = zext <8 x i16> %127 to <8 x i32>
  %129 = mul nuw nsw <8 x i32> %29, %128
  %130 = getelementptr inbounds i16, i16* %34, i64 41
  %131 = bitcast i16* %130 to <8 x i16>*
  %132 = load <8 x i16>, <8 x i16>* %131, align 2, !alias.scope !552
  %133 = zext <8 x i16> %132 to <8 x i32>
  %134 = mul nuw nsw <8 x i32> %31, %133
  %135 = add nuw nsw <8 x i32> %129, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %136 = add nuw nsw <8 x i32> %135, %134
  %137 = lshr <8 x i32> %136, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %138 = trunc <8 x i32> %137 to <8 x i16>
  %139 = getelementptr inbounds i16, i16* %36, i64 40
  %140 = bitcast i16* %139 to <8 x i16>*
  store <8 x i16> %138, <8 x i16>* %140, align 2, !alias.scope !555, !noalias !552
  %141 = getelementptr i16, i16* %34, i64 48
  %142 = bitcast i16* %141 to <8 x i16>*
  %143 = load <8 x i16>, <8 x i16>* %142, align 2, !alias.scope !552
  %144 = zext <8 x i16> %143 to <8 x i32>
  %145 = mul nuw nsw <8 x i32> %29, %144
  %146 = getelementptr inbounds i16, i16* %34, i64 49
  %147 = bitcast i16* %146 to <8 x i16>*
  %148 = load <8 x i16>, <8 x i16>* %147, align 2, !alias.scope !552
  %149 = zext <8 x i16> %148 to <8 x i32>
  %150 = mul nuw nsw <8 x i32> %31, %149
  %151 = add nuw nsw <8 x i32> %145, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %152 = add nuw nsw <8 x i32> %151, %150
  %153 = lshr <8 x i32> %152, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %154 = trunc <8 x i32> %153 to <8 x i16>
  %155 = getelementptr inbounds i16, i16* %36, i64 48
  %156 = bitcast i16* %155 to <8 x i16>*
  store <8 x i16> %154, <8 x i16>* %156, align 2, !alias.scope !555, !noalias !552
  %157 = getelementptr i16, i16* %34, i64 56
  %158 = bitcast i16* %157 to <8 x i16>*
  %159 = load <8 x i16>, <8 x i16>* %158, align 2, !alias.scope !552
  %160 = zext <8 x i16> %159 to <8 x i32>
  %161 = mul nuw nsw <8 x i32> %29, %160
  %162 = getelementptr inbounds i16, i16* %34, i64 57
  %163 = bitcast i16* %162 to <8 x i16>*
  %164 = load <8 x i16>, <8 x i16>* %163, align 2, !alias.scope !552
  %165 = zext <8 x i16> %164 to <8 x i32>
  %166 = mul nuw nsw <8 x i32> %31, %165
  %167 = add nuw nsw <8 x i32> %161, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %168 = add nuw nsw <8 x i32> %167, %166
  %169 = lshr <8 x i32> %168, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %170 = trunc <8 x i32> %169 to <8 x i16>
  %171 = getelementptr inbounds i16, i16* %36, i64 56
  %172 = bitcast i16* %171 to <8 x i16>*
  store <8 x i16> %170, <8 x i16>* %172, align 2, !alias.scope !555, !noalias !552
  br label %203

173:                                              ; preds = %32, %173
  %174 = phi i64 [ %201, %173 ], [ 0, %32 ]
  %175 = phi i16* [ %192, %173 ], [ %34, %32 ]
  %176 = load i16, i16* %175, align 2
  %177 = zext i16 %176 to i32
  %178 = mul nuw nsw i32 %25, %177
  %179 = getelementptr inbounds i16, i16* %175, i64 1
  %180 = load i16, i16* %179, align 2
  %181 = zext i16 %180 to i32
  %182 = mul nuw nsw i32 %27, %181
  %183 = add nuw nsw i32 %178, 64
  %184 = add nuw nsw i32 %183, %182
  %185 = lshr i32 %184, 7
  %186 = trunc i32 %185 to i16
  %187 = getelementptr inbounds i16, i16* %36, i64 %174
  store i16 %186, i16* %187, align 2
  %188 = or i64 %174, 1
  %189 = load i16, i16* %179, align 2
  %190 = zext i16 %189 to i32
  %191 = mul nuw nsw i32 %25, %190
  %192 = getelementptr inbounds i16, i16* %175, i64 2
  %193 = load i16, i16* %192, align 2
  %194 = zext i16 %193 to i32
  %195 = mul nuw nsw i32 %27, %194
  %196 = add nuw nsw i32 %191, 64
  %197 = add nuw nsw i32 %196, %195
  %198 = lshr i32 %197, 7
  %199 = trunc i32 %198 to i16
  %200 = getelementptr inbounds i16, i16* %36, i64 %188
  store i16 %199, i16* %200, align 2
  %201 = add nuw nsw i64 %174, 2
  %202 = icmp eq i64 %201, 64
  br i1 %202, label %203, label %173, !llvm.loop !557

203:                                              ; preds = %173, %45
  %204 = phi i16* [ %46, %45 ], [ %192, %173 ]
  %205 = getelementptr inbounds i16, i16* %204, i64 %23
  %206 = getelementptr inbounds i16, i16* %36, i64 64
  %207 = add nuw nsw i32 %35, 1
  %208 = icmp eq i32 %207, 33
  %209 = add i64 %33, 1
  br i1 %208, label %210, label %32

210:                                              ; preds = %203
  %211 = getelementptr inbounds [2048 x i16], [2048 x i16]* %10, i64 0, i64 0
  %212 = sext i32 %3 to i64
  %213 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %212, i64 0
  %214 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %212, i64 1
  %215 = load i8, i8* %213, align 2
  %216 = zext i8 %215 to i32
  %217 = load i8, i8* %214, align 1
  %218 = zext i8 %217 to i32
  %219 = insertelement <8 x i32> undef, i32 %216, i32 0
  %220 = shufflevector <8 x i32> %219, <8 x i32> undef, <8 x i32> zeroinitializer
  %221 = insertelement <8 x i32> undef, i32 %218, i32 0
  %222 = shufflevector <8 x i32> %221, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %223

223:                                              ; preds = %396, %210
  %224 = phi i64 [ %401, %396 ], [ 0, %210 ]
  %225 = phi i32 [ %399, %396 ], [ 0, %210 ]
  %226 = phi i16* [ %397, %396 ], [ %15, %210 ]
  %227 = phi i16* [ %398, %396 ], [ %211, %210 ]
  %228 = shl nuw nsw i64 %224, 6
  %229 = add i64 %228, 64
  %230 = getelementptr [2048 x i16], [2048 x i16]* %10, i64 0, i64 %229
  %231 = getelementptr [2048 x i16], [2048 x i16]* %10, i64 0, i64 %228
  %232 = getelementptr i16, i16* %226, i64 128
  %233 = icmp ult i16* %231, %232
  %234 = icmp ult i16* %226, %230
  %235 = and i1 %233, %234
  br i1 %235, label %364, label %236

236:                                              ; preds = %223
  %237 = getelementptr i16, i16* %226, i64 64
  %238 = bitcast i16* %226 to <8 x i16>*
  %239 = load <8 x i16>, <8 x i16>* %238, align 2, !alias.scope !558
  %240 = zext <8 x i16> %239 to <8 x i32>
  %241 = mul nuw nsw <8 x i32> %220, %240
  %242 = getelementptr inbounds i16, i16* %226, i64 64
  %243 = bitcast i16* %242 to <8 x i16>*
  %244 = load <8 x i16>, <8 x i16>* %243, align 2, !alias.scope !558
  %245 = zext <8 x i16> %244 to <8 x i32>
  %246 = mul nuw nsw <8 x i32> %222, %245
  %247 = add nuw nsw <8 x i32> %241, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %248 = add nuw nsw <8 x i32> %247, %246
  %249 = lshr <8 x i32> %248, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %250 = trunc <8 x i32> %249 to <8 x i16>
  %251 = bitcast i16* %227 to <8 x i16>*
  store <8 x i16> %250, <8 x i16>* %251, align 2, !alias.scope !561, !noalias !558
  %252 = getelementptr i16, i16* %226, i64 8
  %253 = bitcast i16* %252 to <8 x i16>*
  %254 = load <8 x i16>, <8 x i16>* %253, align 2, !alias.scope !558
  %255 = zext <8 x i16> %254 to <8 x i32>
  %256 = mul nuw nsw <8 x i32> %220, %255
  %257 = getelementptr inbounds i16, i16* %226, i64 72
  %258 = bitcast i16* %257 to <8 x i16>*
  %259 = load <8 x i16>, <8 x i16>* %258, align 2, !alias.scope !558
  %260 = zext <8 x i16> %259 to <8 x i32>
  %261 = mul nuw nsw <8 x i32> %222, %260
  %262 = add nuw nsw <8 x i32> %256, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %263 = add nuw nsw <8 x i32> %262, %261
  %264 = lshr <8 x i32> %263, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %265 = trunc <8 x i32> %264 to <8 x i16>
  %266 = getelementptr inbounds i16, i16* %227, i64 8
  %267 = bitcast i16* %266 to <8 x i16>*
  store <8 x i16> %265, <8 x i16>* %267, align 2, !alias.scope !561, !noalias !558
  %268 = getelementptr i16, i16* %226, i64 16
  %269 = bitcast i16* %268 to <8 x i16>*
  %270 = load <8 x i16>, <8 x i16>* %269, align 2, !alias.scope !558
  %271 = zext <8 x i16> %270 to <8 x i32>
  %272 = mul nuw nsw <8 x i32> %220, %271
  %273 = getelementptr inbounds i16, i16* %226, i64 80
  %274 = bitcast i16* %273 to <8 x i16>*
  %275 = load <8 x i16>, <8 x i16>* %274, align 2, !alias.scope !558
  %276 = zext <8 x i16> %275 to <8 x i32>
  %277 = mul nuw nsw <8 x i32> %222, %276
  %278 = add nuw nsw <8 x i32> %272, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %279 = add nuw nsw <8 x i32> %278, %277
  %280 = lshr <8 x i32> %279, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %281 = trunc <8 x i32> %280 to <8 x i16>
  %282 = getelementptr inbounds i16, i16* %227, i64 16
  %283 = bitcast i16* %282 to <8 x i16>*
  store <8 x i16> %281, <8 x i16>* %283, align 2, !alias.scope !561, !noalias !558
  %284 = getelementptr i16, i16* %226, i64 24
  %285 = bitcast i16* %284 to <8 x i16>*
  %286 = load <8 x i16>, <8 x i16>* %285, align 2, !alias.scope !558
  %287 = zext <8 x i16> %286 to <8 x i32>
  %288 = mul nuw nsw <8 x i32> %220, %287
  %289 = getelementptr inbounds i16, i16* %226, i64 88
  %290 = bitcast i16* %289 to <8 x i16>*
  %291 = load <8 x i16>, <8 x i16>* %290, align 2, !alias.scope !558
  %292 = zext <8 x i16> %291 to <8 x i32>
  %293 = mul nuw nsw <8 x i32> %222, %292
  %294 = add nuw nsw <8 x i32> %288, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %295 = add nuw nsw <8 x i32> %294, %293
  %296 = lshr <8 x i32> %295, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %297 = trunc <8 x i32> %296 to <8 x i16>
  %298 = getelementptr inbounds i16, i16* %227, i64 24
  %299 = bitcast i16* %298 to <8 x i16>*
  store <8 x i16> %297, <8 x i16>* %299, align 2, !alias.scope !561, !noalias !558
  %300 = getelementptr i16, i16* %226, i64 32
  %301 = bitcast i16* %300 to <8 x i16>*
  %302 = load <8 x i16>, <8 x i16>* %301, align 2, !alias.scope !558
  %303 = zext <8 x i16> %302 to <8 x i32>
  %304 = mul nuw nsw <8 x i32> %220, %303
  %305 = getelementptr inbounds i16, i16* %226, i64 96
  %306 = bitcast i16* %305 to <8 x i16>*
  %307 = load <8 x i16>, <8 x i16>* %306, align 2, !alias.scope !558
  %308 = zext <8 x i16> %307 to <8 x i32>
  %309 = mul nuw nsw <8 x i32> %222, %308
  %310 = add nuw nsw <8 x i32> %304, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %311 = add nuw nsw <8 x i32> %310, %309
  %312 = lshr <8 x i32> %311, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %313 = trunc <8 x i32> %312 to <8 x i16>
  %314 = getelementptr inbounds i16, i16* %227, i64 32
  %315 = bitcast i16* %314 to <8 x i16>*
  store <8 x i16> %313, <8 x i16>* %315, align 2, !alias.scope !561, !noalias !558
  %316 = getelementptr i16, i16* %226, i64 40
  %317 = bitcast i16* %316 to <8 x i16>*
  %318 = load <8 x i16>, <8 x i16>* %317, align 2, !alias.scope !558
  %319 = zext <8 x i16> %318 to <8 x i32>
  %320 = mul nuw nsw <8 x i32> %220, %319
  %321 = getelementptr inbounds i16, i16* %226, i64 104
  %322 = bitcast i16* %321 to <8 x i16>*
  %323 = load <8 x i16>, <8 x i16>* %322, align 2, !alias.scope !558
  %324 = zext <8 x i16> %323 to <8 x i32>
  %325 = mul nuw nsw <8 x i32> %222, %324
  %326 = add nuw nsw <8 x i32> %320, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %327 = add nuw nsw <8 x i32> %326, %325
  %328 = lshr <8 x i32> %327, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %329 = trunc <8 x i32> %328 to <8 x i16>
  %330 = getelementptr inbounds i16, i16* %227, i64 40
  %331 = bitcast i16* %330 to <8 x i16>*
  store <8 x i16> %329, <8 x i16>* %331, align 2, !alias.scope !561, !noalias !558
  %332 = getelementptr i16, i16* %226, i64 48
  %333 = bitcast i16* %332 to <8 x i16>*
  %334 = load <8 x i16>, <8 x i16>* %333, align 2, !alias.scope !558
  %335 = zext <8 x i16> %334 to <8 x i32>
  %336 = mul nuw nsw <8 x i32> %220, %335
  %337 = getelementptr inbounds i16, i16* %226, i64 112
  %338 = bitcast i16* %337 to <8 x i16>*
  %339 = load <8 x i16>, <8 x i16>* %338, align 2, !alias.scope !558
  %340 = zext <8 x i16> %339 to <8 x i32>
  %341 = mul nuw nsw <8 x i32> %222, %340
  %342 = add nuw nsw <8 x i32> %336, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %343 = add nuw nsw <8 x i32> %342, %341
  %344 = lshr <8 x i32> %343, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %345 = trunc <8 x i32> %344 to <8 x i16>
  %346 = getelementptr inbounds i16, i16* %227, i64 48
  %347 = bitcast i16* %346 to <8 x i16>*
  store <8 x i16> %345, <8 x i16>* %347, align 2, !alias.scope !561, !noalias !558
  %348 = getelementptr i16, i16* %226, i64 56
  %349 = bitcast i16* %348 to <8 x i16>*
  %350 = load <8 x i16>, <8 x i16>* %349, align 2, !alias.scope !558
  %351 = zext <8 x i16> %350 to <8 x i32>
  %352 = mul nuw nsw <8 x i32> %220, %351
  %353 = getelementptr inbounds i16, i16* %226, i64 120
  %354 = bitcast i16* %353 to <8 x i16>*
  %355 = load <8 x i16>, <8 x i16>* %354, align 2, !alias.scope !558
  %356 = zext <8 x i16> %355 to <8 x i32>
  %357 = mul nuw nsw <8 x i32> %222, %356
  %358 = add nuw nsw <8 x i32> %352, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %359 = add nuw nsw <8 x i32> %358, %357
  %360 = lshr <8 x i32> %359, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %361 = trunc <8 x i32> %360 to <8 x i16>
  %362 = getelementptr inbounds i16, i16* %227, i64 56
  %363 = bitcast i16* %362 to <8 x i16>*
  store <8 x i16> %361, <8 x i16>* %363, align 2, !alias.scope !561, !noalias !558
  br label %396

364:                                              ; preds = %223, %364
  %365 = phi i64 [ %394, %364 ], [ 0, %223 ]
  %366 = phi i16* [ %393, %364 ], [ %226, %223 ]
  %367 = load i16, i16* %366, align 2
  %368 = zext i16 %367 to i32
  %369 = mul nuw nsw i32 %216, %368
  %370 = getelementptr inbounds i16, i16* %366, i64 64
  %371 = load i16, i16* %370, align 2
  %372 = zext i16 %371 to i32
  %373 = mul nuw nsw i32 %218, %372
  %374 = add nuw nsw i32 %369, 64
  %375 = add nuw nsw i32 %374, %373
  %376 = lshr i32 %375, 7
  %377 = trunc i32 %376 to i16
  %378 = getelementptr inbounds i16, i16* %227, i64 %365
  store i16 %377, i16* %378, align 2
  %379 = getelementptr inbounds i16, i16* %366, i64 1
  %380 = or i64 %365, 1
  %381 = load i16, i16* %379, align 2
  %382 = zext i16 %381 to i32
  %383 = mul nuw nsw i32 %216, %382
  %384 = getelementptr inbounds i16, i16* %366, i64 65
  %385 = load i16, i16* %384, align 2
  %386 = zext i16 %385 to i32
  %387 = mul nuw nsw i32 %218, %386
  %388 = add nuw nsw i32 %383, 64
  %389 = add nuw nsw i32 %388, %387
  %390 = lshr i32 %389, 7
  %391 = trunc i32 %390 to i16
  %392 = getelementptr inbounds i16, i16* %227, i64 %380
  store i16 %391, i16* %392, align 2
  %393 = getelementptr inbounds i16, i16* %366, i64 2
  %394 = add nuw nsw i64 %365, 2
  %395 = icmp eq i64 %394, 64
  br i1 %395, label %396, label %364, !llvm.loop !563

396:                                              ; preds = %364, %236
  %397 = phi i16* [ %237, %236 ], [ %393, %364 ]
  %398 = getelementptr inbounds i16, i16* %227, i64 64
  %399 = add nuw nsw i32 %225, 1
  %400 = icmp eq i32 %399, 32
  %401 = add i64 %224, 1
  br i1 %400, label %402, label %223

402:                                              ; preds = %396
  %403 = getelementptr inbounds [2048 x i16], [2048 x i16]* %11, i64 0, i64 0
  %404 = ptrtoint i8* %7 to i64
  %405 = shl i64 %404, 1
  %406 = inttoptr i64 %405 to i16*
  br label %407

407:                                              ; preds = %565, %402
  %408 = phi i64 [ %571, %565 ], [ 0, %402 ]
  %409 = phi i16* [ %566, %565 ], [ %403, %402 ]
  %410 = phi i32 [ %569, %565 ], [ 0, %402 ]
  %411 = phi i16* [ %567, %565 ], [ %406, %402 ]
  %412 = phi i16* [ %568, %565 ], [ %211, %402 ]
  %413 = shl nuw nsw i64 %408, 6
  %414 = getelementptr [2048 x i16], [2048 x i16]* %11, i64 0, i64 %413
  %415 = add i64 %413, 64
  %416 = getelementptr [2048 x i16], [2048 x i16]* %11, i64 0, i64 %415
  %417 = getelementptr [2048 x i16], [2048 x i16]* %10, i64 0, i64 %415
  %418 = getelementptr [2048 x i16], [2048 x i16]* %10, i64 0, i64 %413
  %419 = getelementptr i16, i16* %406, i64 %415
  %420 = getelementptr i16, i16* %406, i64 %413
  %421 = icmp ult i16* %414, %419
  %422 = icmp ult i16* %420, %416
  %423 = and i1 %421, %422
  %424 = icmp ult i16* %414, %417
  %425 = icmp ult i16* %418, %416
  %426 = and i1 %424, %425
  %427 = or i1 %423, %426
  br i1 %427, label %538, label %428

428:                                              ; preds = %407
  %429 = bitcast i16* %411 to <8 x i16>*
  %430 = load <8 x i16>, <8 x i16>* %429, align 2, !alias.scope !564
  %431 = zext <8 x i16> %430 to <8 x i32>
  %432 = bitcast i16* %412 to <8 x i16>*
  %433 = load <8 x i16>, <8 x i16>* %432, align 2, !alias.scope !567
  %434 = zext <8 x i16> %433 to <8 x i32>
  %435 = add nuw nsw <8 x i32> %431, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %436 = add nuw nsw <8 x i32> %435, %434
  %437 = lshr <8 x i32> %436, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %438 = trunc <8 x i32> %437 to <8 x i16>
  %439 = bitcast i16* %409 to <8 x i16>*
  store <8 x i16> %438, <8 x i16>* %439, align 2, !alias.scope !569, !noalias !571
  %440 = getelementptr inbounds i16, i16* %411, i64 8
  %441 = bitcast i16* %440 to <8 x i16>*
  %442 = load <8 x i16>, <8 x i16>* %441, align 2, !alias.scope !564
  %443 = zext <8 x i16> %442 to <8 x i32>
  %444 = getelementptr inbounds i16, i16* %412, i64 8
  %445 = bitcast i16* %444 to <8 x i16>*
  %446 = load <8 x i16>, <8 x i16>* %445, align 2, !alias.scope !567
  %447 = zext <8 x i16> %446 to <8 x i32>
  %448 = add nuw nsw <8 x i32> %443, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %449 = add nuw nsw <8 x i32> %448, %447
  %450 = lshr <8 x i32> %449, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %451 = trunc <8 x i32> %450 to <8 x i16>
  %452 = getelementptr inbounds i16, i16* %409, i64 8
  %453 = bitcast i16* %452 to <8 x i16>*
  store <8 x i16> %451, <8 x i16>* %453, align 2, !alias.scope !569, !noalias !571
  %454 = getelementptr inbounds i16, i16* %411, i64 16
  %455 = bitcast i16* %454 to <8 x i16>*
  %456 = load <8 x i16>, <8 x i16>* %455, align 2, !alias.scope !564
  %457 = zext <8 x i16> %456 to <8 x i32>
  %458 = getelementptr inbounds i16, i16* %412, i64 16
  %459 = bitcast i16* %458 to <8 x i16>*
  %460 = load <8 x i16>, <8 x i16>* %459, align 2, !alias.scope !567
  %461 = zext <8 x i16> %460 to <8 x i32>
  %462 = add nuw nsw <8 x i32> %457, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %463 = add nuw nsw <8 x i32> %462, %461
  %464 = lshr <8 x i32> %463, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %465 = trunc <8 x i32> %464 to <8 x i16>
  %466 = getelementptr inbounds i16, i16* %409, i64 16
  %467 = bitcast i16* %466 to <8 x i16>*
  store <8 x i16> %465, <8 x i16>* %467, align 2, !alias.scope !569, !noalias !571
  %468 = getelementptr inbounds i16, i16* %411, i64 24
  %469 = bitcast i16* %468 to <8 x i16>*
  %470 = load <8 x i16>, <8 x i16>* %469, align 2, !alias.scope !564
  %471 = zext <8 x i16> %470 to <8 x i32>
  %472 = getelementptr inbounds i16, i16* %412, i64 24
  %473 = bitcast i16* %472 to <8 x i16>*
  %474 = load <8 x i16>, <8 x i16>* %473, align 2, !alias.scope !567
  %475 = zext <8 x i16> %474 to <8 x i32>
  %476 = add nuw nsw <8 x i32> %471, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %477 = add nuw nsw <8 x i32> %476, %475
  %478 = lshr <8 x i32> %477, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %479 = trunc <8 x i32> %478 to <8 x i16>
  %480 = getelementptr inbounds i16, i16* %409, i64 24
  %481 = bitcast i16* %480 to <8 x i16>*
  store <8 x i16> %479, <8 x i16>* %481, align 2, !alias.scope !569, !noalias !571
  %482 = getelementptr inbounds i16, i16* %411, i64 32
  %483 = bitcast i16* %482 to <8 x i16>*
  %484 = load <8 x i16>, <8 x i16>* %483, align 2, !alias.scope !564
  %485 = zext <8 x i16> %484 to <8 x i32>
  %486 = getelementptr inbounds i16, i16* %412, i64 32
  %487 = bitcast i16* %486 to <8 x i16>*
  %488 = load <8 x i16>, <8 x i16>* %487, align 2, !alias.scope !567
  %489 = zext <8 x i16> %488 to <8 x i32>
  %490 = add nuw nsw <8 x i32> %485, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %491 = add nuw nsw <8 x i32> %490, %489
  %492 = lshr <8 x i32> %491, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %493 = trunc <8 x i32> %492 to <8 x i16>
  %494 = getelementptr inbounds i16, i16* %409, i64 32
  %495 = bitcast i16* %494 to <8 x i16>*
  store <8 x i16> %493, <8 x i16>* %495, align 2, !alias.scope !569, !noalias !571
  %496 = getelementptr inbounds i16, i16* %411, i64 40
  %497 = bitcast i16* %496 to <8 x i16>*
  %498 = load <8 x i16>, <8 x i16>* %497, align 2, !alias.scope !564
  %499 = zext <8 x i16> %498 to <8 x i32>
  %500 = getelementptr inbounds i16, i16* %412, i64 40
  %501 = bitcast i16* %500 to <8 x i16>*
  %502 = load <8 x i16>, <8 x i16>* %501, align 2, !alias.scope !567
  %503 = zext <8 x i16> %502 to <8 x i32>
  %504 = add nuw nsw <8 x i32> %499, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %505 = add nuw nsw <8 x i32> %504, %503
  %506 = lshr <8 x i32> %505, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %507 = trunc <8 x i32> %506 to <8 x i16>
  %508 = getelementptr inbounds i16, i16* %409, i64 40
  %509 = bitcast i16* %508 to <8 x i16>*
  store <8 x i16> %507, <8 x i16>* %509, align 2, !alias.scope !569, !noalias !571
  %510 = getelementptr inbounds i16, i16* %411, i64 48
  %511 = bitcast i16* %510 to <8 x i16>*
  %512 = load <8 x i16>, <8 x i16>* %511, align 2, !alias.scope !564
  %513 = zext <8 x i16> %512 to <8 x i32>
  %514 = getelementptr inbounds i16, i16* %412, i64 48
  %515 = bitcast i16* %514 to <8 x i16>*
  %516 = load <8 x i16>, <8 x i16>* %515, align 2, !alias.scope !567
  %517 = zext <8 x i16> %516 to <8 x i32>
  %518 = add nuw nsw <8 x i32> %513, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %519 = add nuw nsw <8 x i32> %518, %517
  %520 = lshr <8 x i32> %519, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %521 = trunc <8 x i32> %520 to <8 x i16>
  %522 = getelementptr inbounds i16, i16* %409, i64 48
  %523 = bitcast i16* %522 to <8 x i16>*
  store <8 x i16> %521, <8 x i16>* %523, align 2, !alias.scope !569, !noalias !571
  %524 = getelementptr inbounds i16, i16* %411, i64 56
  %525 = bitcast i16* %524 to <8 x i16>*
  %526 = load <8 x i16>, <8 x i16>* %525, align 2, !alias.scope !564
  %527 = zext <8 x i16> %526 to <8 x i32>
  %528 = getelementptr inbounds i16, i16* %412, i64 56
  %529 = bitcast i16* %528 to <8 x i16>*
  %530 = load <8 x i16>, <8 x i16>* %529, align 2, !alias.scope !567
  %531 = zext <8 x i16> %530 to <8 x i32>
  %532 = add nuw nsw <8 x i32> %527, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %533 = add nuw nsw <8 x i32> %532, %531
  %534 = lshr <8 x i32> %533, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %535 = trunc <8 x i32> %534 to <8 x i16>
  %536 = getelementptr inbounds i16, i16* %409, i64 56
  %537 = bitcast i16* %536 to <8 x i16>*
  store <8 x i16> %535, <8 x i16>* %537, align 2, !alias.scope !569, !noalias !571
  br label %565

538:                                              ; preds = %407, %538
  %539 = phi i64 [ %563, %538 ], [ 0, %407 ]
  %540 = getelementptr inbounds i16, i16* %411, i64 %539
  %541 = load i16, i16* %540, align 2
  %542 = zext i16 %541 to i32
  %543 = getelementptr inbounds i16, i16* %412, i64 %539
  %544 = load i16, i16* %543, align 2
  %545 = zext i16 %544 to i32
  %546 = add nuw nsw i32 %542, 1
  %547 = add nuw nsw i32 %546, %545
  %548 = lshr i32 %547, 1
  %549 = trunc i32 %548 to i16
  %550 = getelementptr inbounds i16, i16* %409, i64 %539
  store i16 %549, i16* %550, align 2
  %551 = or i64 %539, 1
  %552 = getelementptr inbounds i16, i16* %411, i64 %551
  %553 = load i16, i16* %552, align 2
  %554 = zext i16 %553 to i32
  %555 = getelementptr inbounds i16, i16* %412, i64 %551
  %556 = load i16, i16* %555, align 2
  %557 = zext i16 %556 to i32
  %558 = add nuw nsw i32 %554, 1
  %559 = add nuw nsw i32 %558, %557
  %560 = lshr i32 %559, 1
  %561 = trunc i32 %560 to i16
  %562 = getelementptr inbounds i16, i16* %409, i64 %551
  store i16 %561, i16* %562, align 2
  %563 = add nuw nsw i64 %539, 2
  %564 = icmp eq i64 %563, 64
  br i1 %564, label %565, label %538, !llvm.loop !572

565:                                              ; preds = %538, %428
  %566 = getelementptr inbounds i16, i16* %409, i64 64
  %567 = getelementptr inbounds i16, i16* %411, i64 64
  %568 = getelementptr inbounds i16, i16* %412, i64 64
  %569 = add nuw nsw i32 %410, 1
  %570 = icmp eq i32 %569, 32
  %571 = add i64 %408, 1
  br i1 %570, label %572, label %407

572:                                              ; preds = %565
  %573 = ptrtoint i8* %4 to i64
  %574 = shl i64 %573, 1
  %575 = inttoptr i64 %574 to i16*
  %576 = sext i32 %5 to i64
  br label %577

577:                                              ; preds = %614, %572
  %578 = phi i64 [ 0, %572 ], [ %611, %614 ]
  %579 = phi i64 [ 0, %572 ], [ %608, %614 ]
  %580 = phi i32 [ 0, %572 ], [ %617, %614 ]
  %581 = phi i16* [ %575, %572 ], [ %616, %614 ]
  %582 = phi i16* [ %403, %572 ], [ %615, %614 ]
  br label %583

583:                                              ; preds = %583, %577
  %584 = phi i64 [ %578, %577 ], [ %611, %583 ]
  %585 = phi i64 [ %579, %577 ], [ %608, %583 ]
  %586 = phi i64 [ 0, %577 ], [ %612, %583 ]
  %587 = getelementptr inbounds i16, i16* %582, i64 %586
  %588 = load i16, i16* %587, align 2
  %589 = zext i16 %588 to i32
  %590 = getelementptr inbounds i16, i16* %581, i64 %586
  %591 = load i16, i16* %590, align 2
  %592 = zext i16 %591 to i32
  %593 = sub nsw i32 %589, %592
  %594 = sext i32 %593 to i64
  %595 = add nsw i64 %585, %594
  %596 = mul nsw i32 %593, %593
  %597 = zext i32 %596 to i64
  %598 = add i64 %584, %597
  %599 = or i64 %586, 1
  %600 = getelementptr inbounds i16, i16* %582, i64 %599
  %601 = load i16, i16* %600, align 2
  %602 = zext i16 %601 to i32
  %603 = getelementptr inbounds i16, i16* %581, i64 %599
  %604 = load i16, i16* %603, align 2
  %605 = zext i16 %604 to i32
  %606 = sub nsw i32 %602, %605
  %607 = sext i32 %606 to i64
  %608 = add nsw i64 %595, %607
  %609 = mul nsw i32 %606, %606
  %610 = zext i32 %609 to i64
  %611 = add i64 %598, %610
  %612 = add nuw nsw i64 %586, 2
  %613 = icmp eq i64 %612, 64
  br i1 %613, label %614, label %583

614:                                              ; preds = %583
  %615 = getelementptr inbounds i16, i16* %582, i64 64
  %616 = getelementptr inbounds i16, i16* %581, i64 %576
  %617 = add nuw nsw i32 %580, 1
  %618 = icmp eq i32 %617, 32
  br i1 %618, label %619, label %577

619:                                              ; preds = %614
  %620 = add i64 %611, 8
  %621 = lshr i64 %620, 4
  %622 = trunc i64 %621 to i32
  store i32 %622, i32* %6, align 4
  %623 = and i64 %621, 4294967295
  %624 = shl i64 %608, 30
  %625 = add i64 %624, 2147483648
  %626 = ashr i64 %625, 32
  %627 = mul nsw i64 %626, %626
  %628 = lshr i64 %627, 11
  %629 = sub nsw i64 %623, %628
  %630 = icmp sgt i64 %629, -1
  %631 = trunc i64 %629 to i32
  %632 = select i1 %630, i32 %631, i32 0
  call void @llvm.lifetime.end.p0i8(i64 4096, i8* nonnull %14) #4
  call void @llvm.lifetime.end.p0i8(i64 4096, i8* nonnull %13) #4
  call void @llvm.lifetime.end.p0i8(i64 4224, i8* nonnull %12) #4
  ret i32 %632
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_highbd_12_sub_pixel_avg_variance64x32_c(i8*, i32, i32, i32, i8*, i32, i32* nocapture, i8*) local_unnamed_addr #2 {
  %9 = alloca [2112 x i16], align 16
  %10 = alloca [2048 x i16], align 16
  %11 = alloca [2048 x i16], align 16
  %12 = bitcast [2112 x i16]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4224, i8* nonnull %12) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %12, i8 -86, i64 4224, i1 false)
  %13 = bitcast [2048 x i16]* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4096, i8* nonnull %13) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %13, i8 -86, i64 4096, i1 false)
  %14 = bitcast [2048 x i16]* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4096, i8* nonnull %14) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %14, i8 -86, i64 4096, i1 false)
  %15 = getelementptr inbounds [2112 x i16], [2112 x i16]* %9, i64 0, i64 0
  %16 = sext i32 %2 to i64
  %17 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %16, i64 0
  %18 = ptrtoint i8* %0 to i64
  %19 = shl i64 %18, 1
  %20 = inttoptr i64 %19 to i16*
  %21 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %16, i64 1
  %22 = add i32 %1, -64
  %23 = zext i32 %22 to i64
  %24 = load i8, i8* %17, align 2
  %25 = zext i8 %24 to i32
  %26 = load i8, i8* %21, align 1
  %27 = zext i8 %26 to i32
  %28 = insertelement <8 x i32> undef, i32 %25, i32 0
  %29 = shufflevector <8 x i32> %28, <8 x i32> undef, <8 x i32> zeroinitializer
  %30 = insertelement <8 x i32> undef, i32 %27, i32 0
  %31 = shufflevector <8 x i32> %30, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %32

32:                                               ; preds = %203, %8
  %33 = phi i64 [ %209, %203 ], [ 0, %8 ]
  %34 = phi i16* [ %205, %203 ], [ %20, %8 ]
  %35 = phi i32 [ %207, %203 ], [ 0, %8 ]
  %36 = phi i16* [ %206, %203 ], [ %15, %8 ]
  %37 = shl nuw nsw i64 %33, 6
  %38 = add i64 %37, 64
  %39 = getelementptr [2112 x i16], [2112 x i16]* %9, i64 0, i64 %38
  %40 = getelementptr [2112 x i16], [2112 x i16]* %9, i64 0, i64 %37
  %41 = getelementptr i16, i16* %34, i64 65
  %42 = icmp ult i16* %40, %41
  %43 = icmp ult i16* %34, %39
  %44 = and i1 %42, %43
  br i1 %44, label %173, label %45

45:                                               ; preds = %32
  %46 = getelementptr i16, i16* %34, i64 64
  %47 = bitcast i16* %34 to <8 x i16>*
  %48 = load <8 x i16>, <8 x i16>* %47, align 2, !alias.scope !573
  %49 = zext <8 x i16> %48 to <8 x i32>
  %50 = mul nuw nsw <8 x i32> %29, %49
  %51 = getelementptr inbounds i16, i16* %34, i64 1
  %52 = bitcast i16* %51 to <8 x i16>*
  %53 = load <8 x i16>, <8 x i16>* %52, align 2, !alias.scope !573
  %54 = zext <8 x i16> %53 to <8 x i32>
  %55 = mul nuw nsw <8 x i32> %31, %54
  %56 = add nuw nsw <8 x i32> %50, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %57 = add nuw nsw <8 x i32> %56, %55
  %58 = lshr <8 x i32> %57, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %59 = trunc <8 x i32> %58 to <8 x i16>
  %60 = bitcast i16* %36 to <8 x i16>*
  store <8 x i16> %59, <8 x i16>* %60, align 2, !alias.scope !576, !noalias !573
  %61 = getelementptr i16, i16* %34, i64 8
  %62 = bitcast i16* %61 to <8 x i16>*
  %63 = load <8 x i16>, <8 x i16>* %62, align 2, !alias.scope !573
  %64 = zext <8 x i16> %63 to <8 x i32>
  %65 = mul nuw nsw <8 x i32> %29, %64
  %66 = getelementptr inbounds i16, i16* %34, i64 9
  %67 = bitcast i16* %66 to <8 x i16>*
  %68 = load <8 x i16>, <8 x i16>* %67, align 2, !alias.scope !573
  %69 = zext <8 x i16> %68 to <8 x i32>
  %70 = mul nuw nsw <8 x i32> %31, %69
  %71 = add nuw nsw <8 x i32> %65, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %72 = add nuw nsw <8 x i32> %71, %70
  %73 = lshr <8 x i32> %72, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %74 = trunc <8 x i32> %73 to <8 x i16>
  %75 = getelementptr inbounds i16, i16* %36, i64 8
  %76 = bitcast i16* %75 to <8 x i16>*
  store <8 x i16> %74, <8 x i16>* %76, align 2, !alias.scope !576, !noalias !573
  %77 = getelementptr i16, i16* %34, i64 16
  %78 = bitcast i16* %77 to <8 x i16>*
  %79 = load <8 x i16>, <8 x i16>* %78, align 2, !alias.scope !573
  %80 = zext <8 x i16> %79 to <8 x i32>
  %81 = mul nuw nsw <8 x i32> %29, %80
  %82 = getelementptr inbounds i16, i16* %34, i64 17
  %83 = bitcast i16* %82 to <8 x i16>*
  %84 = load <8 x i16>, <8 x i16>* %83, align 2, !alias.scope !573
  %85 = zext <8 x i16> %84 to <8 x i32>
  %86 = mul nuw nsw <8 x i32> %31, %85
  %87 = add nuw nsw <8 x i32> %81, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %88 = add nuw nsw <8 x i32> %87, %86
  %89 = lshr <8 x i32> %88, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %90 = trunc <8 x i32> %89 to <8 x i16>
  %91 = getelementptr inbounds i16, i16* %36, i64 16
  %92 = bitcast i16* %91 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %92, align 2, !alias.scope !576, !noalias !573
  %93 = getelementptr i16, i16* %34, i64 24
  %94 = bitcast i16* %93 to <8 x i16>*
  %95 = load <8 x i16>, <8 x i16>* %94, align 2, !alias.scope !573
  %96 = zext <8 x i16> %95 to <8 x i32>
  %97 = mul nuw nsw <8 x i32> %29, %96
  %98 = getelementptr inbounds i16, i16* %34, i64 25
  %99 = bitcast i16* %98 to <8 x i16>*
  %100 = load <8 x i16>, <8 x i16>* %99, align 2, !alias.scope !573
  %101 = zext <8 x i16> %100 to <8 x i32>
  %102 = mul nuw nsw <8 x i32> %31, %101
  %103 = add nuw nsw <8 x i32> %97, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %104 = add nuw nsw <8 x i32> %103, %102
  %105 = lshr <8 x i32> %104, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %106 = trunc <8 x i32> %105 to <8 x i16>
  %107 = getelementptr inbounds i16, i16* %36, i64 24
  %108 = bitcast i16* %107 to <8 x i16>*
  store <8 x i16> %106, <8 x i16>* %108, align 2, !alias.scope !576, !noalias !573
  %109 = getelementptr i16, i16* %34, i64 32
  %110 = bitcast i16* %109 to <8 x i16>*
  %111 = load <8 x i16>, <8 x i16>* %110, align 2, !alias.scope !573
  %112 = zext <8 x i16> %111 to <8 x i32>
  %113 = mul nuw nsw <8 x i32> %29, %112
  %114 = getelementptr inbounds i16, i16* %34, i64 33
  %115 = bitcast i16* %114 to <8 x i16>*
  %116 = load <8 x i16>, <8 x i16>* %115, align 2, !alias.scope !573
  %117 = zext <8 x i16> %116 to <8 x i32>
  %118 = mul nuw nsw <8 x i32> %31, %117
  %119 = add nuw nsw <8 x i32> %113, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %120 = add nuw nsw <8 x i32> %119, %118
  %121 = lshr <8 x i32> %120, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %122 = trunc <8 x i32> %121 to <8 x i16>
  %123 = getelementptr inbounds i16, i16* %36, i64 32
  %124 = bitcast i16* %123 to <8 x i16>*
  store <8 x i16> %122, <8 x i16>* %124, align 2, !alias.scope !576, !noalias !573
  %125 = getelementptr i16, i16* %34, i64 40
  %126 = bitcast i16* %125 to <8 x i16>*
  %127 = load <8 x i16>, <8 x i16>* %126, align 2, !alias.scope !573
  %128 = zext <8 x i16> %127 to <8 x i32>
  %129 = mul nuw nsw <8 x i32> %29, %128
  %130 = getelementptr inbounds i16, i16* %34, i64 41
  %131 = bitcast i16* %130 to <8 x i16>*
  %132 = load <8 x i16>, <8 x i16>* %131, align 2, !alias.scope !573
  %133 = zext <8 x i16> %132 to <8 x i32>
  %134 = mul nuw nsw <8 x i32> %31, %133
  %135 = add nuw nsw <8 x i32> %129, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %136 = add nuw nsw <8 x i32> %135, %134
  %137 = lshr <8 x i32> %136, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %138 = trunc <8 x i32> %137 to <8 x i16>
  %139 = getelementptr inbounds i16, i16* %36, i64 40
  %140 = bitcast i16* %139 to <8 x i16>*
  store <8 x i16> %138, <8 x i16>* %140, align 2, !alias.scope !576, !noalias !573
  %141 = getelementptr i16, i16* %34, i64 48
  %142 = bitcast i16* %141 to <8 x i16>*
  %143 = load <8 x i16>, <8 x i16>* %142, align 2, !alias.scope !573
  %144 = zext <8 x i16> %143 to <8 x i32>
  %145 = mul nuw nsw <8 x i32> %29, %144
  %146 = getelementptr inbounds i16, i16* %34, i64 49
  %147 = bitcast i16* %146 to <8 x i16>*
  %148 = load <8 x i16>, <8 x i16>* %147, align 2, !alias.scope !573
  %149 = zext <8 x i16> %148 to <8 x i32>
  %150 = mul nuw nsw <8 x i32> %31, %149
  %151 = add nuw nsw <8 x i32> %145, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %152 = add nuw nsw <8 x i32> %151, %150
  %153 = lshr <8 x i32> %152, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %154 = trunc <8 x i32> %153 to <8 x i16>
  %155 = getelementptr inbounds i16, i16* %36, i64 48
  %156 = bitcast i16* %155 to <8 x i16>*
  store <8 x i16> %154, <8 x i16>* %156, align 2, !alias.scope !576, !noalias !573
  %157 = getelementptr i16, i16* %34, i64 56
  %158 = bitcast i16* %157 to <8 x i16>*
  %159 = load <8 x i16>, <8 x i16>* %158, align 2, !alias.scope !573
  %160 = zext <8 x i16> %159 to <8 x i32>
  %161 = mul nuw nsw <8 x i32> %29, %160
  %162 = getelementptr inbounds i16, i16* %34, i64 57
  %163 = bitcast i16* %162 to <8 x i16>*
  %164 = load <8 x i16>, <8 x i16>* %163, align 2, !alias.scope !573
  %165 = zext <8 x i16> %164 to <8 x i32>
  %166 = mul nuw nsw <8 x i32> %31, %165
  %167 = add nuw nsw <8 x i32> %161, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %168 = add nuw nsw <8 x i32> %167, %166
  %169 = lshr <8 x i32> %168, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %170 = trunc <8 x i32> %169 to <8 x i16>
  %171 = getelementptr inbounds i16, i16* %36, i64 56
  %172 = bitcast i16* %171 to <8 x i16>*
  store <8 x i16> %170, <8 x i16>* %172, align 2, !alias.scope !576, !noalias !573
  br label %203

173:                                              ; preds = %32, %173
  %174 = phi i64 [ %201, %173 ], [ 0, %32 ]
  %175 = phi i16* [ %192, %173 ], [ %34, %32 ]
  %176 = load i16, i16* %175, align 2
  %177 = zext i16 %176 to i32
  %178 = mul nuw nsw i32 %25, %177
  %179 = getelementptr inbounds i16, i16* %175, i64 1
  %180 = load i16, i16* %179, align 2
  %181 = zext i16 %180 to i32
  %182 = mul nuw nsw i32 %27, %181
  %183 = add nuw nsw i32 %178, 64
  %184 = add nuw nsw i32 %183, %182
  %185 = lshr i32 %184, 7
  %186 = trunc i32 %185 to i16
  %187 = getelementptr inbounds i16, i16* %36, i64 %174
  store i16 %186, i16* %187, align 2
  %188 = or i64 %174, 1
  %189 = load i16, i16* %179, align 2
  %190 = zext i16 %189 to i32
  %191 = mul nuw nsw i32 %25, %190
  %192 = getelementptr inbounds i16, i16* %175, i64 2
  %193 = load i16, i16* %192, align 2
  %194 = zext i16 %193 to i32
  %195 = mul nuw nsw i32 %27, %194
  %196 = add nuw nsw i32 %191, 64
  %197 = add nuw nsw i32 %196, %195
  %198 = lshr i32 %197, 7
  %199 = trunc i32 %198 to i16
  %200 = getelementptr inbounds i16, i16* %36, i64 %188
  store i16 %199, i16* %200, align 2
  %201 = add nuw nsw i64 %174, 2
  %202 = icmp eq i64 %201, 64
  br i1 %202, label %203, label %173, !llvm.loop !578

203:                                              ; preds = %173, %45
  %204 = phi i16* [ %46, %45 ], [ %192, %173 ]
  %205 = getelementptr inbounds i16, i16* %204, i64 %23
  %206 = getelementptr inbounds i16, i16* %36, i64 64
  %207 = add nuw nsw i32 %35, 1
  %208 = icmp eq i32 %207, 33
  %209 = add i64 %33, 1
  br i1 %208, label %210, label %32

210:                                              ; preds = %203
  %211 = getelementptr inbounds [2048 x i16], [2048 x i16]* %10, i64 0, i64 0
  %212 = sext i32 %3 to i64
  %213 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %212, i64 0
  %214 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %212, i64 1
  %215 = load i8, i8* %213, align 2
  %216 = zext i8 %215 to i32
  %217 = load i8, i8* %214, align 1
  %218 = zext i8 %217 to i32
  %219 = insertelement <8 x i32> undef, i32 %216, i32 0
  %220 = shufflevector <8 x i32> %219, <8 x i32> undef, <8 x i32> zeroinitializer
  %221 = insertelement <8 x i32> undef, i32 %218, i32 0
  %222 = shufflevector <8 x i32> %221, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %223

223:                                              ; preds = %396, %210
  %224 = phi i64 [ %401, %396 ], [ 0, %210 ]
  %225 = phi i32 [ %399, %396 ], [ 0, %210 ]
  %226 = phi i16* [ %397, %396 ], [ %15, %210 ]
  %227 = phi i16* [ %398, %396 ], [ %211, %210 ]
  %228 = shl nuw nsw i64 %224, 6
  %229 = add i64 %228, 64
  %230 = getelementptr [2048 x i16], [2048 x i16]* %10, i64 0, i64 %229
  %231 = getelementptr [2048 x i16], [2048 x i16]* %10, i64 0, i64 %228
  %232 = getelementptr i16, i16* %226, i64 128
  %233 = icmp ult i16* %231, %232
  %234 = icmp ult i16* %226, %230
  %235 = and i1 %233, %234
  br i1 %235, label %364, label %236

236:                                              ; preds = %223
  %237 = getelementptr i16, i16* %226, i64 64
  %238 = bitcast i16* %226 to <8 x i16>*
  %239 = load <8 x i16>, <8 x i16>* %238, align 2, !alias.scope !579
  %240 = zext <8 x i16> %239 to <8 x i32>
  %241 = mul nuw nsw <8 x i32> %220, %240
  %242 = getelementptr inbounds i16, i16* %226, i64 64
  %243 = bitcast i16* %242 to <8 x i16>*
  %244 = load <8 x i16>, <8 x i16>* %243, align 2, !alias.scope !579
  %245 = zext <8 x i16> %244 to <8 x i32>
  %246 = mul nuw nsw <8 x i32> %222, %245
  %247 = add nuw nsw <8 x i32> %241, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %248 = add nuw nsw <8 x i32> %247, %246
  %249 = lshr <8 x i32> %248, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %250 = trunc <8 x i32> %249 to <8 x i16>
  %251 = bitcast i16* %227 to <8 x i16>*
  store <8 x i16> %250, <8 x i16>* %251, align 2, !alias.scope !582, !noalias !579
  %252 = getelementptr i16, i16* %226, i64 8
  %253 = bitcast i16* %252 to <8 x i16>*
  %254 = load <8 x i16>, <8 x i16>* %253, align 2, !alias.scope !579
  %255 = zext <8 x i16> %254 to <8 x i32>
  %256 = mul nuw nsw <8 x i32> %220, %255
  %257 = getelementptr inbounds i16, i16* %226, i64 72
  %258 = bitcast i16* %257 to <8 x i16>*
  %259 = load <8 x i16>, <8 x i16>* %258, align 2, !alias.scope !579
  %260 = zext <8 x i16> %259 to <8 x i32>
  %261 = mul nuw nsw <8 x i32> %222, %260
  %262 = add nuw nsw <8 x i32> %256, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %263 = add nuw nsw <8 x i32> %262, %261
  %264 = lshr <8 x i32> %263, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %265 = trunc <8 x i32> %264 to <8 x i16>
  %266 = getelementptr inbounds i16, i16* %227, i64 8
  %267 = bitcast i16* %266 to <8 x i16>*
  store <8 x i16> %265, <8 x i16>* %267, align 2, !alias.scope !582, !noalias !579
  %268 = getelementptr i16, i16* %226, i64 16
  %269 = bitcast i16* %268 to <8 x i16>*
  %270 = load <8 x i16>, <8 x i16>* %269, align 2, !alias.scope !579
  %271 = zext <8 x i16> %270 to <8 x i32>
  %272 = mul nuw nsw <8 x i32> %220, %271
  %273 = getelementptr inbounds i16, i16* %226, i64 80
  %274 = bitcast i16* %273 to <8 x i16>*
  %275 = load <8 x i16>, <8 x i16>* %274, align 2, !alias.scope !579
  %276 = zext <8 x i16> %275 to <8 x i32>
  %277 = mul nuw nsw <8 x i32> %222, %276
  %278 = add nuw nsw <8 x i32> %272, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %279 = add nuw nsw <8 x i32> %278, %277
  %280 = lshr <8 x i32> %279, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %281 = trunc <8 x i32> %280 to <8 x i16>
  %282 = getelementptr inbounds i16, i16* %227, i64 16
  %283 = bitcast i16* %282 to <8 x i16>*
  store <8 x i16> %281, <8 x i16>* %283, align 2, !alias.scope !582, !noalias !579
  %284 = getelementptr i16, i16* %226, i64 24
  %285 = bitcast i16* %284 to <8 x i16>*
  %286 = load <8 x i16>, <8 x i16>* %285, align 2, !alias.scope !579
  %287 = zext <8 x i16> %286 to <8 x i32>
  %288 = mul nuw nsw <8 x i32> %220, %287
  %289 = getelementptr inbounds i16, i16* %226, i64 88
  %290 = bitcast i16* %289 to <8 x i16>*
  %291 = load <8 x i16>, <8 x i16>* %290, align 2, !alias.scope !579
  %292 = zext <8 x i16> %291 to <8 x i32>
  %293 = mul nuw nsw <8 x i32> %222, %292
  %294 = add nuw nsw <8 x i32> %288, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %295 = add nuw nsw <8 x i32> %294, %293
  %296 = lshr <8 x i32> %295, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %297 = trunc <8 x i32> %296 to <8 x i16>
  %298 = getelementptr inbounds i16, i16* %227, i64 24
  %299 = bitcast i16* %298 to <8 x i16>*
  store <8 x i16> %297, <8 x i16>* %299, align 2, !alias.scope !582, !noalias !579
  %300 = getelementptr i16, i16* %226, i64 32
  %301 = bitcast i16* %300 to <8 x i16>*
  %302 = load <8 x i16>, <8 x i16>* %301, align 2, !alias.scope !579
  %303 = zext <8 x i16> %302 to <8 x i32>
  %304 = mul nuw nsw <8 x i32> %220, %303
  %305 = getelementptr inbounds i16, i16* %226, i64 96
  %306 = bitcast i16* %305 to <8 x i16>*
  %307 = load <8 x i16>, <8 x i16>* %306, align 2, !alias.scope !579
  %308 = zext <8 x i16> %307 to <8 x i32>
  %309 = mul nuw nsw <8 x i32> %222, %308
  %310 = add nuw nsw <8 x i32> %304, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %311 = add nuw nsw <8 x i32> %310, %309
  %312 = lshr <8 x i32> %311, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %313 = trunc <8 x i32> %312 to <8 x i16>
  %314 = getelementptr inbounds i16, i16* %227, i64 32
  %315 = bitcast i16* %314 to <8 x i16>*
  store <8 x i16> %313, <8 x i16>* %315, align 2, !alias.scope !582, !noalias !579
  %316 = getelementptr i16, i16* %226, i64 40
  %317 = bitcast i16* %316 to <8 x i16>*
  %318 = load <8 x i16>, <8 x i16>* %317, align 2, !alias.scope !579
  %319 = zext <8 x i16> %318 to <8 x i32>
  %320 = mul nuw nsw <8 x i32> %220, %319
  %321 = getelementptr inbounds i16, i16* %226, i64 104
  %322 = bitcast i16* %321 to <8 x i16>*
  %323 = load <8 x i16>, <8 x i16>* %322, align 2, !alias.scope !579
  %324 = zext <8 x i16> %323 to <8 x i32>
  %325 = mul nuw nsw <8 x i32> %222, %324
  %326 = add nuw nsw <8 x i32> %320, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %327 = add nuw nsw <8 x i32> %326, %325
  %328 = lshr <8 x i32> %327, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %329 = trunc <8 x i32> %328 to <8 x i16>
  %330 = getelementptr inbounds i16, i16* %227, i64 40
  %331 = bitcast i16* %330 to <8 x i16>*
  store <8 x i16> %329, <8 x i16>* %331, align 2, !alias.scope !582, !noalias !579
  %332 = getelementptr i16, i16* %226, i64 48
  %333 = bitcast i16* %332 to <8 x i16>*
  %334 = load <8 x i16>, <8 x i16>* %333, align 2, !alias.scope !579
  %335 = zext <8 x i16> %334 to <8 x i32>
  %336 = mul nuw nsw <8 x i32> %220, %335
  %337 = getelementptr inbounds i16, i16* %226, i64 112
  %338 = bitcast i16* %337 to <8 x i16>*
  %339 = load <8 x i16>, <8 x i16>* %338, align 2, !alias.scope !579
  %340 = zext <8 x i16> %339 to <8 x i32>
  %341 = mul nuw nsw <8 x i32> %222, %340
  %342 = add nuw nsw <8 x i32> %336, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %343 = add nuw nsw <8 x i32> %342, %341
  %344 = lshr <8 x i32> %343, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %345 = trunc <8 x i32> %344 to <8 x i16>
  %346 = getelementptr inbounds i16, i16* %227, i64 48
  %347 = bitcast i16* %346 to <8 x i16>*
  store <8 x i16> %345, <8 x i16>* %347, align 2, !alias.scope !582, !noalias !579
  %348 = getelementptr i16, i16* %226, i64 56
  %349 = bitcast i16* %348 to <8 x i16>*
  %350 = load <8 x i16>, <8 x i16>* %349, align 2, !alias.scope !579
  %351 = zext <8 x i16> %350 to <8 x i32>
  %352 = mul nuw nsw <8 x i32> %220, %351
  %353 = getelementptr inbounds i16, i16* %226, i64 120
  %354 = bitcast i16* %353 to <8 x i16>*
  %355 = load <8 x i16>, <8 x i16>* %354, align 2, !alias.scope !579
  %356 = zext <8 x i16> %355 to <8 x i32>
  %357 = mul nuw nsw <8 x i32> %222, %356
  %358 = add nuw nsw <8 x i32> %352, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %359 = add nuw nsw <8 x i32> %358, %357
  %360 = lshr <8 x i32> %359, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %361 = trunc <8 x i32> %360 to <8 x i16>
  %362 = getelementptr inbounds i16, i16* %227, i64 56
  %363 = bitcast i16* %362 to <8 x i16>*
  store <8 x i16> %361, <8 x i16>* %363, align 2, !alias.scope !582, !noalias !579
  br label %396

364:                                              ; preds = %223, %364
  %365 = phi i64 [ %394, %364 ], [ 0, %223 ]
  %366 = phi i16* [ %393, %364 ], [ %226, %223 ]
  %367 = load i16, i16* %366, align 2
  %368 = zext i16 %367 to i32
  %369 = mul nuw nsw i32 %216, %368
  %370 = getelementptr inbounds i16, i16* %366, i64 64
  %371 = load i16, i16* %370, align 2
  %372 = zext i16 %371 to i32
  %373 = mul nuw nsw i32 %218, %372
  %374 = add nuw nsw i32 %369, 64
  %375 = add nuw nsw i32 %374, %373
  %376 = lshr i32 %375, 7
  %377 = trunc i32 %376 to i16
  %378 = getelementptr inbounds i16, i16* %227, i64 %365
  store i16 %377, i16* %378, align 2
  %379 = getelementptr inbounds i16, i16* %366, i64 1
  %380 = or i64 %365, 1
  %381 = load i16, i16* %379, align 2
  %382 = zext i16 %381 to i32
  %383 = mul nuw nsw i32 %216, %382
  %384 = getelementptr inbounds i16, i16* %366, i64 65
  %385 = load i16, i16* %384, align 2
  %386 = zext i16 %385 to i32
  %387 = mul nuw nsw i32 %218, %386
  %388 = add nuw nsw i32 %383, 64
  %389 = add nuw nsw i32 %388, %387
  %390 = lshr i32 %389, 7
  %391 = trunc i32 %390 to i16
  %392 = getelementptr inbounds i16, i16* %227, i64 %380
  store i16 %391, i16* %392, align 2
  %393 = getelementptr inbounds i16, i16* %366, i64 2
  %394 = add nuw nsw i64 %365, 2
  %395 = icmp eq i64 %394, 64
  br i1 %395, label %396, label %364, !llvm.loop !584

396:                                              ; preds = %364, %236
  %397 = phi i16* [ %237, %236 ], [ %393, %364 ]
  %398 = getelementptr inbounds i16, i16* %227, i64 64
  %399 = add nuw nsw i32 %225, 1
  %400 = icmp eq i32 %399, 32
  %401 = add i64 %224, 1
  br i1 %400, label %402, label %223

402:                                              ; preds = %396
  %403 = getelementptr inbounds [2048 x i16], [2048 x i16]* %11, i64 0, i64 0
  %404 = ptrtoint i8* %7 to i64
  %405 = shl i64 %404, 1
  %406 = inttoptr i64 %405 to i16*
  br label %407

407:                                              ; preds = %565, %402
  %408 = phi i64 [ %571, %565 ], [ 0, %402 ]
  %409 = phi i16* [ %566, %565 ], [ %403, %402 ]
  %410 = phi i32 [ %569, %565 ], [ 0, %402 ]
  %411 = phi i16* [ %567, %565 ], [ %406, %402 ]
  %412 = phi i16* [ %568, %565 ], [ %211, %402 ]
  %413 = shl nuw nsw i64 %408, 6
  %414 = getelementptr [2048 x i16], [2048 x i16]* %11, i64 0, i64 %413
  %415 = add i64 %413, 64
  %416 = getelementptr [2048 x i16], [2048 x i16]* %11, i64 0, i64 %415
  %417 = getelementptr [2048 x i16], [2048 x i16]* %10, i64 0, i64 %415
  %418 = getelementptr [2048 x i16], [2048 x i16]* %10, i64 0, i64 %413
  %419 = getelementptr i16, i16* %406, i64 %415
  %420 = getelementptr i16, i16* %406, i64 %413
  %421 = icmp ult i16* %414, %419
  %422 = icmp ult i16* %420, %416
  %423 = and i1 %421, %422
  %424 = icmp ult i16* %414, %417
  %425 = icmp ult i16* %418, %416
  %426 = and i1 %424, %425
  %427 = or i1 %423, %426
  br i1 %427, label %538, label %428

428:                                              ; preds = %407
  %429 = bitcast i16* %411 to <8 x i16>*
  %430 = load <8 x i16>, <8 x i16>* %429, align 2, !alias.scope !585
  %431 = zext <8 x i16> %430 to <8 x i32>
  %432 = bitcast i16* %412 to <8 x i16>*
  %433 = load <8 x i16>, <8 x i16>* %432, align 2, !alias.scope !588
  %434 = zext <8 x i16> %433 to <8 x i32>
  %435 = add nuw nsw <8 x i32> %431, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %436 = add nuw nsw <8 x i32> %435, %434
  %437 = lshr <8 x i32> %436, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %438 = trunc <8 x i32> %437 to <8 x i16>
  %439 = bitcast i16* %409 to <8 x i16>*
  store <8 x i16> %438, <8 x i16>* %439, align 2, !alias.scope !590, !noalias !592
  %440 = getelementptr inbounds i16, i16* %411, i64 8
  %441 = bitcast i16* %440 to <8 x i16>*
  %442 = load <8 x i16>, <8 x i16>* %441, align 2, !alias.scope !585
  %443 = zext <8 x i16> %442 to <8 x i32>
  %444 = getelementptr inbounds i16, i16* %412, i64 8
  %445 = bitcast i16* %444 to <8 x i16>*
  %446 = load <8 x i16>, <8 x i16>* %445, align 2, !alias.scope !588
  %447 = zext <8 x i16> %446 to <8 x i32>
  %448 = add nuw nsw <8 x i32> %443, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %449 = add nuw nsw <8 x i32> %448, %447
  %450 = lshr <8 x i32> %449, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %451 = trunc <8 x i32> %450 to <8 x i16>
  %452 = getelementptr inbounds i16, i16* %409, i64 8
  %453 = bitcast i16* %452 to <8 x i16>*
  store <8 x i16> %451, <8 x i16>* %453, align 2, !alias.scope !590, !noalias !592
  %454 = getelementptr inbounds i16, i16* %411, i64 16
  %455 = bitcast i16* %454 to <8 x i16>*
  %456 = load <8 x i16>, <8 x i16>* %455, align 2, !alias.scope !585
  %457 = zext <8 x i16> %456 to <8 x i32>
  %458 = getelementptr inbounds i16, i16* %412, i64 16
  %459 = bitcast i16* %458 to <8 x i16>*
  %460 = load <8 x i16>, <8 x i16>* %459, align 2, !alias.scope !588
  %461 = zext <8 x i16> %460 to <8 x i32>
  %462 = add nuw nsw <8 x i32> %457, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %463 = add nuw nsw <8 x i32> %462, %461
  %464 = lshr <8 x i32> %463, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %465 = trunc <8 x i32> %464 to <8 x i16>
  %466 = getelementptr inbounds i16, i16* %409, i64 16
  %467 = bitcast i16* %466 to <8 x i16>*
  store <8 x i16> %465, <8 x i16>* %467, align 2, !alias.scope !590, !noalias !592
  %468 = getelementptr inbounds i16, i16* %411, i64 24
  %469 = bitcast i16* %468 to <8 x i16>*
  %470 = load <8 x i16>, <8 x i16>* %469, align 2, !alias.scope !585
  %471 = zext <8 x i16> %470 to <8 x i32>
  %472 = getelementptr inbounds i16, i16* %412, i64 24
  %473 = bitcast i16* %472 to <8 x i16>*
  %474 = load <8 x i16>, <8 x i16>* %473, align 2, !alias.scope !588
  %475 = zext <8 x i16> %474 to <8 x i32>
  %476 = add nuw nsw <8 x i32> %471, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %477 = add nuw nsw <8 x i32> %476, %475
  %478 = lshr <8 x i32> %477, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %479 = trunc <8 x i32> %478 to <8 x i16>
  %480 = getelementptr inbounds i16, i16* %409, i64 24
  %481 = bitcast i16* %480 to <8 x i16>*
  store <8 x i16> %479, <8 x i16>* %481, align 2, !alias.scope !590, !noalias !592
  %482 = getelementptr inbounds i16, i16* %411, i64 32
  %483 = bitcast i16* %482 to <8 x i16>*
  %484 = load <8 x i16>, <8 x i16>* %483, align 2, !alias.scope !585
  %485 = zext <8 x i16> %484 to <8 x i32>
  %486 = getelementptr inbounds i16, i16* %412, i64 32
  %487 = bitcast i16* %486 to <8 x i16>*
  %488 = load <8 x i16>, <8 x i16>* %487, align 2, !alias.scope !588
  %489 = zext <8 x i16> %488 to <8 x i32>
  %490 = add nuw nsw <8 x i32> %485, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %491 = add nuw nsw <8 x i32> %490, %489
  %492 = lshr <8 x i32> %491, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %493 = trunc <8 x i32> %492 to <8 x i16>
  %494 = getelementptr inbounds i16, i16* %409, i64 32
  %495 = bitcast i16* %494 to <8 x i16>*
  store <8 x i16> %493, <8 x i16>* %495, align 2, !alias.scope !590, !noalias !592
  %496 = getelementptr inbounds i16, i16* %411, i64 40
  %497 = bitcast i16* %496 to <8 x i16>*
  %498 = load <8 x i16>, <8 x i16>* %497, align 2, !alias.scope !585
  %499 = zext <8 x i16> %498 to <8 x i32>
  %500 = getelementptr inbounds i16, i16* %412, i64 40
  %501 = bitcast i16* %500 to <8 x i16>*
  %502 = load <8 x i16>, <8 x i16>* %501, align 2, !alias.scope !588
  %503 = zext <8 x i16> %502 to <8 x i32>
  %504 = add nuw nsw <8 x i32> %499, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %505 = add nuw nsw <8 x i32> %504, %503
  %506 = lshr <8 x i32> %505, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %507 = trunc <8 x i32> %506 to <8 x i16>
  %508 = getelementptr inbounds i16, i16* %409, i64 40
  %509 = bitcast i16* %508 to <8 x i16>*
  store <8 x i16> %507, <8 x i16>* %509, align 2, !alias.scope !590, !noalias !592
  %510 = getelementptr inbounds i16, i16* %411, i64 48
  %511 = bitcast i16* %510 to <8 x i16>*
  %512 = load <8 x i16>, <8 x i16>* %511, align 2, !alias.scope !585
  %513 = zext <8 x i16> %512 to <8 x i32>
  %514 = getelementptr inbounds i16, i16* %412, i64 48
  %515 = bitcast i16* %514 to <8 x i16>*
  %516 = load <8 x i16>, <8 x i16>* %515, align 2, !alias.scope !588
  %517 = zext <8 x i16> %516 to <8 x i32>
  %518 = add nuw nsw <8 x i32> %513, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %519 = add nuw nsw <8 x i32> %518, %517
  %520 = lshr <8 x i32> %519, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %521 = trunc <8 x i32> %520 to <8 x i16>
  %522 = getelementptr inbounds i16, i16* %409, i64 48
  %523 = bitcast i16* %522 to <8 x i16>*
  store <8 x i16> %521, <8 x i16>* %523, align 2, !alias.scope !590, !noalias !592
  %524 = getelementptr inbounds i16, i16* %411, i64 56
  %525 = bitcast i16* %524 to <8 x i16>*
  %526 = load <8 x i16>, <8 x i16>* %525, align 2, !alias.scope !585
  %527 = zext <8 x i16> %526 to <8 x i32>
  %528 = getelementptr inbounds i16, i16* %412, i64 56
  %529 = bitcast i16* %528 to <8 x i16>*
  %530 = load <8 x i16>, <8 x i16>* %529, align 2, !alias.scope !588
  %531 = zext <8 x i16> %530 to <8 x i32>
  %532 = add nuw nsw <8 x i32> %527, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %533 = add nuw nsw <8 x i32> %532, %531
  %534 = lshr <8 x i32> %533, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %535 = trunc <8 x i32> %534 to <8 x i16>
  %536 = getelementptr inbounds i16, i16* %409, i64 56
  %537 = bitcast i16* %536 to <8 x i16>*
  store <8 x i16> %535, <8 x i16>* %537, align 2, !alias.scope !590, !noalias !592
  br label %565

538:                                              ; preds = %407, %538
  %539 = phi i64 [ %563, %538 ], [ 0, %407 ]
  %540 = getelementptr inbounds i16, i16* %411, i64 %539
  %541 = load i16, i16* %540, align 2
  %542 = zext i16 %541 to i32
  %543 = getelementptr inbounds i16, i16* %412, i64 %539
  %544 = load i16, i16* %543, align 2
  %545 = zext i16 %544 to i32
  %546 = add nuw nsw i32 %542, 1
  %547 = add nuw nsw i32 %546, %545
  %548 = lshr i32 %547, 1
  %549 = trunc i32 %548 to i16
  %550 = getelementptr inbounds i16, i16* %409, i64 %539
  store i16 %549, i16* %550, align 2
  %551 = or i64 %539, 1
  %552 = getelementptr inbounds i16, i16* %411, i64 %551
  %553 = load i16, i16* %552, align 2
  %554 = zext i16 %553 to i32
  %555 = getelementptr inbounds i16, i16* %412, i64 %551
  %556 = load i16, i16* %555, align 2
  %557 = zext i16 %556 to i32
  %558 = add nuw nsw i32 %554, 1
  %559 = add nuw nsw i32 %558, %557
  %560 = lshr i32 %559, 1
  %561 = trunc i32 %560 to i16
  %562 = getelementptr inbounds i16, i16* %409, i64 %551
  store i16 %561, i16* %562, align 2
  %563 = add nuw nsw i64 %539, 2
  %564 = icmp eq i64 %563, 64
  br i1 %564, label %565, label %538, !llvm.loop !593

565:                                              ; preds = %538, %428
  %566 = getelementptr inbounds i16, i16* %409, i64 64
  %567 = getelementptr inbounds i16, i16* %411, i64 64
  %568 = getelementptr inbounds i16, i16* %412, i64 64
  %569 = add nuw nsw i32 %410, 1
  %570 = icmp eq i32 %569, 32
  %571 = add i64 %408, 1
  br i1 %570, label %572, label %407

572:                                              ; preds = %565
  %573 = ptrtoint i8* %4 to i64
  %574 = shl i64 %573, 1
  %575 = inttoptr i64 %574 to i16*
  %576 = sext i32 %5 to i64
  br label %577

577:                                              ; preds = %614, %572
  %578 = phi i64 [ 0, %572 ], [ %611, %614 ]
  %579 = phi i64 [ 0, %572 ], [ %608, %614 ]
  %580 = phi i32 [ 0, %572 ], [ %617, %614 ]
  %581 = phi i16* [ %575, %572 ], [ %616, %614 ]
  %582 = phi i16* [ %403, %572 ], [ %615, %614 ]
  br label %583

583:                                              ; preds = %583, %577
  %584 = phi i64 [ %578, %577 ], [ %611, %583 ]
  %585 = phi i64 [ %579, %577 ], [ %608, %583 ]
  %586 = phi i64 [ 0, %577 ], [ %612, %583 ]
  %587 = getelementptr inbounds i16, i16* %582, i64 %586
  %588 = load i16, i16* %587, align 2
  %589 = zext i16 %588 to i32
  %590 = getelementptr inbounds i16, i16* %581, i64 %586
  %591 = load i16, i16* %590, align 2
  %592 = zext i16 %591 to i32
  %593 = sub nsw i32 %589, %592
  %594 = sext i32 %593 to i64
  %595 = add nsw i64 %585, %594
  %596 = mul nsw i32 %593, %593
  %597 = zext i32 %596 to i64
  %598 = add i64 %584, %597
  %599 = or i64 %586, 1
  %600 = getelementptr inbounds i16, i16* %582, i64 %599
  %601 = load i16, i16* %600, align 2
  %602 = zext i16 %601 to i32
  %603 = getelementptr inbounds i16, i16* %581, i64 %599
  %604 = load i16, i16* %603, align 2
  %605 = zext i16 %604 to i32
  %606 = sub nsw i32 %602, %605
  %607 = sext i32 %606 to i64
  %608 = add nsw i64 %595, %607
  %609 = mul nsw i32 %606, %606
  %610 = zext i32 %609 to i64
  %611 = add i64 %598, %610
  %612 = add nuw nsw i64 %586, 2
  %613 = icmp eq i64 %612, 64
  br i1 %613, label %614, label %583

614:                                              ; preds = %583
  %615 = getelementptr inbounds i16, i16* %582, i64 64
  %616 = getelementptr inbounds i16, i16* %581, i64 %576
  %617 = add nuw nsw i32 %580, 1
  %618 = icmp eq i32 %617, 32
  br i1 %618, label %619, label %577

619:                                              ; preds = %614
  %620 = add i64 %611, 128
  %621 = lshr i64 %620, 8
  %622 = trunc i64 %621 to i32
  store i32 %622, i32* %6, align 4
  %623 = and i64 %621, 4294967295
  %624 = shl i64 %608, 28
  %625 = add i64 %624, 2147483648
  %626 = ashr i64 %625, 32
  %627 = mul nsw i64 %626, %626
  %628 = lshr i64 %627, 11
  %629 = sub nsw i64 %623, %628
  %630 = icmp sgt i64 %629, -1
  %631 = trunc i64 %629 to i32
  %632 = select i1 %630, i32 %631, i32 0
  call void @llvm.lifetime.end.p0i8(i64 4096, i8* nonnull %14) #4
  call void @llvm.lifetime.end.p0i8(i64 4096, i8* nonnull %13) #4
  call void @llvm.lifetime.end.p0i8(i64 4224, i8* nonnull %12) #4
  ret i32 %632
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_highbd_8_variance32x64_c(i8*, i32, i8*, i32, i32* nocapture) local_unnamed_addr #2 {
  %6 = ptrtoint i8* %2 to i64
  %7 = shl i64 %6, 1
  %8 = inttoptr i64 %7 to i16*
  %9 = ptrtoint i8* %0 to i64
  %10 = shl i64 %9, 1
  %11 = inttoptr i64 %10 to i16*
  %12 = sext i32 %1 to i64
  %13 = sext i32 %3 to i64
  br label %14

14:                                               ; preds = %51, %5
  %15 = phi i64 [ 0, %5 ], [ %48, %51 ]
  %16 = phi i64 [ 0, %5 ], [ %45, %51 ]
  %17 = phi i32 [ 0, %5 ], [ %54, %51 ]
  %18 = phi i16* [ %8, %5 ], [ %53, %51 ]
  %19 = phi i16* [ %11, %5 ], [ %52, %51 ]
  br label %20

20:                                               ; preds = %20, %14
  %21 = phi i64 [ %15, %14 ], [ %48, %20 ]
  %22 = phi i64 [ %16, %14 ], [ %45, %20 ]
  %23 = phi i64 [ 0, %14 ], [ %49, %20 ]
  %24 = getelementptr inbounds i16, i16* %19, i64 %23
  %25 = load i16, i16* %24, align 2
  %26 = zext i16 %25 to i32
  %27 = getelementptr inbounds i16, i16* %18, i64 %23
  %28 = load i16, i16* %27, align 2
  %29 = zext i16 %28 to i32
  %30 = sub nsw i32 %26, %29
  %31 = sext i32 %30 to i64
  %32 = add nsw i64 %22, %31
  %33 = mul nsw i32 %30, %30
  %34 = zext i32 %33 to i64
  %35 = add i64 %21, %34
  %36 = or i64 %23, 1
  %37 = getelementptr inbounds i16, i16* %19, i64 %36
  %38 = load i16, i16* %37, align 2
  %39 = zext i16 %38 to i32
  %40 = getelementptr inbounds i16, i16* %18, i64 %36
  %41 = load i16, i16* %40, align 2
  %42 = zext i16 %41 to i32
  %43 = sub nsw i32 %39, %42
  %44 = sext i32 %43 to i64
  %45 = add nsw i64 %32, %44
  %46 = mul nsw i32 %43, %43
  %47 = zext i32 %46 to i64
  %48 = add i64 %35, %47
  %49 = add nuw nsw i64 %23, 2
  %50 = icmp eq i64 %49, 32
  br i1 %50, label %51, label %20

51:                                               ; preds = %20
  %52 = getelementptr inbounds i16, i16* %19, i64 %12
  %53 = getelementptr inbounds i16, i16* %18, i64 %13
  %54 = add nuw nsw i32 %17, 1
  %55 = icmp eq i32 %54, 64
  br i1 %55, label %56, label %14

56:                                               ; preds = %51
  %57 = trunc i64 %48 to i32
  store i32 %57, i32* %4, align 4
  %58 = shl i64 %45, 32
  %59 = ashr exact i64 %58, 32
  %60 = mul nsw i64 %59, %59
  %61 = lshr i64 %60, 11
  %62 = trunc i64 %61 to i32
  %63 = sub i32 %57, %62
  ret i32 %63
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_highbd_10_variance32x64_c(i8*, i32, i8*, i32, i32* nocapture) local_unnamed_addr #2 {
  %6 = ptrtoint i8* %2 to i64
  %7 = shl i64 %6, 1
  %8 = inttoptr i64 %7 to i16*
  %9 = ptrtoint i8* %0 to i64
  %10 = shl i64 %9, 1
  %11 = inttoptr i64 %10 to i16*
  %12 = sext i32 %1 to i64
  %13 = sext i32 %3 to i64
  br label %14

14:                                               ; preds = %51, %5
  %15 = phi i64 [ 0, %5 ], [ %48, %51 ]
  %16 = phi i64 [ 0, %5 ], [ %45, %51 ]
  %17 = phi i32 [ 0, %5 ], [ %54, %51 ]
  %18 = phi i16* [ %8, %5 ], [ %53, %51 ]
  %19 = phi i16* [ %11, %5 ], [ %52, %51 ]
  br label %20

20:                                               ; preds = %20, %14
  %21 = phi i64 [ %15, %14 ], [ %48, %20 ]
  %22 = phi i64 [ %16, %14 ], [ %45, %20 ]
  %23 = phi i64 [ 0, %14 ], [ %49, %20 ]
  %24 = getelementptr inbounds i16, i16* %19, i64 %23
  %25 = load i16, i16* %24, align 2
  %26 = zext i16 %25 to i32
  %27 = getelementptr inbounds i16, i16* %18, i64 %23
  %28 = load i16, i16* %27, align 2
  %29 = zext i16 %28 to i32
  %30 = sub nsw i32 %26, %29
  %31 = sext i32 %30 to i64
  %32 = add nsw i64 %22, %31
  %33 = mul nsw i32 %30, %30
  %34 = zext i32 %33 to i64
  %35 = add i64 %21, %34
  %36 = or i64 %23, 1
  %37 = getelementptr inbounds i16, i16* %19, i64 %36
  %38 = load i16, i16* %37, align 2
  %39 = zext i16 %38 to i32
  %40 = getelementptr inbounds i16, i16* %18, i64 %36
  %41 = load i16, i16* %40, align 2
  %42 = zext i16 %41 to i32
  %43 = sub nsw i32 %39, %42
  %44 = sext i32 %43 to i64
  %45 = add nsw i64 %32, %44
  %46 = mul nsw i32 %43, %43
  %47 = zext i32 %46 to i64
  %48 = add i64 %35, %47
  %49 = add nuw nsw i64 %23, 2
  %50 = icmp eq i64 %49, 32
  br i1 %50, label %51, label %20

51:                                               ; preds = %20
  %52 = getelementptr inbounds i16, i16* %19, i64 %12
  %53 = getelementptr inbounds i16, i16* %18, i64 %13
  %54 = add nuw nsw i32 %17, 1
  %55 = icmp eq i32 %54, 64
  br i1 %55, label %56, label %14

56:                                               ; preds = %51
  %57 = add i64 %48, 8
  %58 = lshr i64 %57, 4
  %59 = trunc i64 %58 to i32
  store i32 %59, i32* %4, align 4
  %60 = and i64 %58, 4294967295
  %61 = shl i64 %45, 30
  %62 = add i64 %61, 2147483648
  %63 = ashr i64 %62, 32
  %64 = mul nsw i64 %63, %63
  %65 = lshr i64 %64, 11
  %66 = sub nsw i64 %60, %65
  %67 = icmp sgt i64 %66, -1
  %68 = trunc i64 %66 to i32
  %69 = select i1 %67, i32 %68, i32 0
  ret i32 %69
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_highbd_12_variance32x64_c(i8*, i32, i8*, i32, i32* nocapture) local_unnamed_addr #2 {
  %6 = ptrtoint i8* %2 to i64
  %7 = shl i64 %6, 1
  %8 = inttoptr i64 %7 to i16*
  %9 = ptrtoint i8* %0 to i64
  %10 = shl i64 %9, 1
  %11 = inttoptr i64 %10 to i16*
  %12 = sext i32 %1 to i64
  %13 = sext i32 %3 to i64
  br label %14

14:                                               ; preds = %51, %5
  %15 = phi i64 [ 0, %5 ], [ %48, %51 ]
  %16 = phi i64 [ 0, %5 ], [ %45, %51 ]
  %17 = phi i32 [ 0, %5 ], [ %54, %51 ]
  %18 = phi i16* [ %8, %5 ], [ %53, %51 ]
  %19 = phi i16* [ %11, %5 ], [ %52, %51 ]
  br label %20

20:                                               ; preds = %20, %14
  %21 = phi i64 [ %15, %14 ], [ %48, %20 ]
  %22 = phi i64 [ %16, %14 ], [ %45, %20 ]
  %23 = phi i64 [ 0, %14 ], [ %49, %20 ]
  %24 = getelementptr inbounds i16, i16* %19, i64 %23
  %25 = load i16, i16* %24, align 2
  %26 = zext i16 %25 to i32
  %27 = getelementptr inbounds i16, i16* %18, i64 %23
  %28 = load i16, i16* %27, align 2
  %29 = zext i16 %28 to i32
  %30 = sub nsw i32 %26, %29
  %31 = sext i32 %30 to i64
  %32 = add nsw i64 %22, %31
  %33 = mul nsw i32 %30, %30
  %34 = zext i32 %33 to i64
  %35 = add i64 %21, %34
  %36 = or i64 %23, 1
  %37 = getelementptr inbounds i16, i16* %19, i64 %36
  %38 = load i16, i16* %37, align 2
  %39 = zext i16 %38 to i32
  %40 = getelementptr inbounds i16, i16* %18, i64 %36
  %41 = load i16, i16* %40, align 2
  %42 = zext i16 %41 to i32
  %43 = sub nsw i32 %39, %42
  %44 = sext i32 %43 to i64
  %45 = add nsw i64 %32, %44
  %46 = mul nsw i32 %43, %43
  %47 = zext i32 %46 to i64
  %48 = add i64 %35, %47
  %49 = add nuw nsw i64 %23, 2
  %50 = icmp eq i64 %49, 32
  br i1 %50, label %51, label %20

51:                                               ; preds = %20
  %52 = getelementptr inbounds i16, i16* %19, i64 %12
  %53 = getelementptr inbounds i16, i16* %18, i64 %13
  %54 = add nuw nsw i32 %17, 1
  %55 = icmp eq i32 %54, 64
  br i1 %55, label %56, label %14

56:                                               ; preds = %51
  %57 = add i64 %48, 128
  %58 = lshr i64 %57, 8
  %59 = trunc i64 %58 to i32
  store i32 %59, i32* %4, align 4
  %60 = and i64 %58, 4294967295
  %61 = shl i64 %45, 28
  %62 = add i64 %61, 2147483648
  %63 = ashr i64 %62, 32
  %64 = mul nsw i64 %63, %63
  %65 = lshr i64 %64, 11
  %66 = sub nsw i64 %60, %65
  %67 = icmp sgt i64 %66, -1
  %68 = trunc i64 %66 to i32
  %69 = select i1 %67, i32 %68, i32 0
  ret i32 %69
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_highbd_8_sub_pixel_variance32x64_c(i8*, i32, i32, i32, i8*, i32, i32* nocapture) local_unnamed_addr #2 {
  %8 = alloca [2080 x i16], align 16
  %9 = alloca [2048 x i16], align 16
  %10 = bitcast [2080 x i16]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4160, i8* nonnull %10) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %10, i8 -86, i64 4160, i1 false)
  %11 = bitcast [2048 x i16]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4096, i8* nonnull %11) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %11, i8 -86, i64 4096, i1 false)
  %12 = getelementptr inbounds [2080 x i16], [2080 x i16]* %8, i64 0, i64 0
  %13 = sext i32 %2 to i64
  %14 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %13, i64 0
  %15 = ptrtoint i8* %0 to i64
  %16 = shl i64 %15, 1
  %17 = inttoptr i64 %16 to i16*
  %18 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %13, i64 1
  %19 = add i32 %1, -32
  %20 = zext i32 %19 to i64
  %21 = load i8, i8* %14, align 2
  %22 = zext i8 %21 to i32
  %23 = load i8, i8* %18, align 1
  %24 = zext i8 %23 to i32
  %25 = insertelement <8 x i32> undef, i32 %22, i32 0
  %26 = shufflevector <8 x i32> %25, <8 x i32> undef, <8 x i32> zeroinitializer
  %27 = insertelement <8 x i32> undef, i32 %24, i32 0
  %28 = shufflevector <8 x i32> %27, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %29

29:                                               ; preds = %136, %7
  %30 = phi i64 [ %142, %136 ], [ 0, %7 ]
  %31 = phi i16* [ %138, %136 ], [ %17, %7 ]
  %32 = phi i32 [ %140, %136 ], [ 0, %7 ]
  %33 = phi i16* [ %139, %136 ], [ %12, %7 ]
  %34 = shl nuw nsw i64 %30, 5
  %35 = add i64 %34, 32
  %36 = getelementptr [2080 x i16], [2080 x i16]* %8, i64 0, i64 %35
  %37 = getelementptr [2080 x i16], [2080 x i16]* %8, i64 0, i64 %34
  %38 = getelementptr i16, i16* %31, i64 33
  %39 = icmp ult i16* %37, %38
  %40 = icmp ult i16* %31, %36
  %41 = and i1 %39, %40
  br i1 %41, label %106, label %42

42:                                               ; preds = %29
  %43 = getelementptr i16, i16* %31, i64 32
  %44 = bitcast i16* %31 to <8 x i16>*
  %45 = load <8 x i16>, <8 x i16>* %44, align 2, !alias.scope !594
  %46 = zext <8 x i16> %45 to <8 x i32>
  %47 = mul nuw nsw <8 x i32> %26, %46
  %48 = getelementptr inbounds i16, i16* %31, i64 1
  %49 = bitcast i16* %48 to <8 x i16>*
  %50 = load <8 x i16>, <8 x i16>* %49, align 2, !alias.scope !594
  %51 = zext <8 x i16> %50 to <8 x i32>
  %52 = mul nuw nsw <8 x i32> %28, %51
  %53 = add nuw nsw <8 x i32> %47, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %54 = add nuw nsw <8 x i32> %53, %52
  %55 = lshr <8 x i32> %54, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %56 = trunc <8 x i32> %55 to <8 x i16>
  %57 = bitcast i16* %33 to <8 x i16>*
  store <8 x i16> %56, <8 x i16>* %57, align 2, !alias.scope !597, !noalias !594
  %58 = getelementptr i16, i16* %31, i64 8
  %59 = bitcast i16* %58 to <8 x i16>*
  %60 = load <8 x i16>, <8 x i16>* %59, align 2, !alias.scope !594
  %61 = zext <8 x i16> %60 to <8 x i32>
  %62 = mul nuw nsw <8 x i32> %26, %61
  %63 = getelementptr inbounds i16, i16* %31, i64 9
  %64 = bitcast i16* %63 to <8 x i16>*
  %65 = load <8 x i16>, <8 x i16>* %64, align 2, !alias.scope !594
  %66 = zext <8 x i16> %65 to <8 x i32>
  %67 = mul nuw nsw <8 x i32> %28, %66
  %68 = add nuw nsw <8 x i32> %62, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %69 = add nuw nsw <8 x i32> %68, %67
  %70 = lshr <8 x i32> %69, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %71 = trunc <8 x i32> %70 to <8 x i16>
  %72 = getelementptr inbounds i16, i16* %33, i64 8
  %73 = bitcast i16* %72 to <8 x i16>*
  store <8 x i16> %71, <8 x i16>* %73, align 2, !alias.scope !597, !noalias !594
  %74 = getelementptr i16, i16* %31, i64 16
  %75 = bitcast i16* %74 to <8 x i16>*
  %76 = load <8 x i16>, <8 x i16>* %75, align 2, !alias.scope !594
  %77 = zext <8 x i16> %76 to <8 x i32>
  %78 = mul nuw nsw <8 x i32> %26, %77
  %79 = getelementptr inbounds i16, i16* %31, i64 17
  %80 = bitcast i16* %79 to <8 x i16>*
  %81 = load <8 x i16>, <8 x i16>* %80, align 2, !alias.scope !594
  %82 = zext <8 x i16> %81 to <8 x i32>
  %83 = mul nuw nsw <8 x i32> %28, %82
  %84 = add nuw nsw <8 x i32> %78, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %85 = add nuw nsw <8 x i32> %84, %83
  %86 = lshr <8 x i32> %85, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %87 = trunc <8 x i32> %86 to <8 x i16>
  %88 = getelementptr inbounds i16, i16* %33, i64 16
  %89 = bitcast i16* %88 to <8 x i16>*
  store <8 x i16> %87, <8 x i16>* %89, align 2, !alias.scope !597, !noalias !594
  %90 = getelementptr i16, i16* %31, i64 24
  %91 = bitcast i16* %90 to <8 x i16>*
  %92 = load <8 x i16>, <8 x i16>* %91, align 2, !alias.scope !594
  %93 = zext <8 x i16> %92 to <8 x i32>
  %94 = mul nuw nsw <8 x i32> %26, %93
  %95 = getelementptr inbounds i16, i16* %31, i64 25
  %96 = bitcast i16* %95 to <8 x i16>*
  %97 = load <8 x i16>, <8 x i16>* %96, align 2, !alias.scope !594
  %98 = zext <8 x i16> %97 to <8 x i32>
  %99 = mul nuw nsw <8 x i32> %28, %98
  %100 = add nuw nsw <8 x i32> %94, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %101 = add nuw nsw <8 x i32> %100, %99
  %102 = lshr <8 x i32> %101, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %103 = trunc <8 x i32> %102 to <8 x i16>
  %104 = getelementptr inbounds i16, i16* %33, i64 24
  %105 = bitcast i16* %104 to <8 x i16>*
  store <8 x i16> %103, <8 x i16>* %105, align 2, !alias.scope !597, !noalias !594
  br label %136

106:                                              ; preds = %29, %106
  %107 = phi i64 [ %134, %106 ], [ 0, %29 ]
  %108 = phi i16* [ %125, %106 ], [ %31, %29 ]
  %109 = load i16, i16* %108, align 2
  %110 = zext i16 %109 to i32
  %111 = mul nuw nsw i32 %22, %110
  %112 = getelementptr inbounds i16, i16* %108, i64 1
  %113 = load i16, i16* %112, align 2
  %114 = zext i16 %113 to i32
  %115 = mul nuw nsw i32 %24, %114
  %116 = add nuw nsw i32 %111, 64
  %117 = add nuw nsw i32 %116, %115
  %118 = lshr i32 %117, 7
  %119 = trunc i32 %118 to i16
  %120 = getelementptr inbounds i16, i16* %33, i64 %107
  store i16 %119, i16* %120, align 2
  %121 = or i64 %107, 1
  %122 = load i16, i16* %112, align 2
  %123 = zext i16 %122 to i32
  %124 = mul nuw nsw i32 %22, %123
  %125 = getelementptr inbounds i16, i16* %108, i64 2
  %126 = load i16, i16* %125, align 2
  %127 = zext i16 %126 to i32
  %128 = mul nuw nsw i32 %24, %127
  %129 = add nuw nsw i32 %124, 64
  %130 = add nuw nsw i32 %129, %128
  %131 = lshr i32 %130, 7
  %132 = trunc i32 %131 to i16
  %133 = getelementptr inbounds i16, i16* %33, i64 %121
  store i16 %132, i16* %133, align 2
  %134 = add nuw nsw i64 %107, 2
  %135 = icmp eq i64 %134, 32
  br i1 %135, label %136, label %106, !llvm.loop !599

136:                                              ; preds = %106, %42
  %137 = phi i16* [ %43, %42 ], [ %125, %106 ]
  %138 = getelementptr inbounds i16, i16* %137, i64 %20
  %139 = getelementptr inbounds i16, i16* %33, i64 32
  %140 = add nuw nsw i32 %32, 1
  %141 = icmp eq i32 %140, 65
  %142 = add i64 %30, 1
  br i1 %141, label %143, label %29

143:                                              ; preds = %136
  %144 = getelementptr inbounds [2048 x i16], [2048 x i16]* %9, i64 0, i64 0
  %145 = sext i32 %3 to i64
  %146 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %145, i64 0
  %147 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %145, i64 1
  %148 = load i8, i8* %146, align 2
  %149 = zext i8 %148 to i32
  %150 = load i8, i8* %147, align 1
  %151 = zext i8 %150 to i32
  %152 = insertelement <8 x i32> undef, i32 %149, i32 0
  %153 = shufflevector <8 x i32> %152, <8 x i32> undef, <8 x i32> zeroinitializer
  %154 = insertelement <8 x i32> undef, i32 %151, i32 0
  %155 = shufflevector <8 x i32> %154, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %156

156:                                              ; preds = %265, %143
  %157 = phi i64 [ %270, %265 ], [ 0, %143 ]
  %158 = phi i32 [ %268, %265 ], [ 0, %143 ]
  %159 = phi i16* [ %266, %265 ], [ %12, %143 ]
  %160 = phi i16* [ %267, %265 ], [ %144, %143 ]
  %161 = shl nuw nsw i64 %157, 5
  %162 = add i64 %161, 32
  %163 = getelementptr [2048 x i16], [2048 x i16]* %9, i64 0, i64 %162
  %164 = getelementptr [2048 x i16], [2048 x i16]* %9, i64 0, i64 %161
  %165 = getelementptr i16, i16* %159, i64 64
  %166 = icmp ult i16* %164, %165
  %167 = icmp ult i16* %159, %163
  %168 = and i1 %166, %167
  br i1 %168, label %233, label %169

169:                                              ; preds = %156
  %170 = getelementptr i16, i16* %159, i64 32
  %171 = bitcast i16* %159 to <8 x i16>*
  %172 = load <8 x i16>, <8 x i16>* %171, align 2, !alias.scope !600
  %173 = zext <8 x i16> %172 to <8 x i32>
  %174 = mul nuw nsw <8 x i32> %153, %173
  %175 = getelementptr inbounds i16, i16* %159, i64 32
  %176 = bitcast i16* %175 to <8 x i16>*
  %177 = load <8 x i16>, <8 x i16>* %176, align 2, !alias.scope !600
  %178 = zext <8 x i16> %177 to <8 x i32>
  %179 = mul nuw nsw <8 x i32> %155, %178
  %180 = add nuw nsw <8 x i32> %174, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %181 = add nuw nsw <8 x i32> %180, %179
  %182 = lshr <8 x i32> %181, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %183 = trunc <8 x i32> %182 to <8 x i16>
  %184 = bitcast i16* %160 to <8 x i16>*
  store <8 x i16> %183, <8 x i16>* %184, align 2, !alias.scope !603, !noalias !600
  %185 = getelementptr i16, i16* %159, i64 8
  %186 = bitcast i16* %185 to <8 x i16>*
  %187 = load <8 x i16>, <8 x i16>* %186, align 2, !alias.scope !600
  %188 = zext <8 x i16> %187 to <8 x i32>
  %189 = mul nuw nsw <8 x i32> %153, %188
  %190 = getelementptr inbounds i16, i16* %159, i64 40
  %191 = bitcast i16* %190 to <8 x i16>*
  %192 = load <8 x i16>, <8 x i16>* %191, align 2, !alias.scope !600
  %193 = zext <8 x i16> %192 to <8 x i32>
  %194 = mul nuw nsw <8 x i32> %155, %193
  %195 = add nuw nsw <8 x i32> %189, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %196 = add nuw nsw <8 x i32> %195, %194
  %197 = lshr <8 x i32> %196, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %198 = trunc <8 x i32> %197 to <8 x i16>
  %199 = getelementptr inbounds i16, i16* %160, i64 8
  %200 = bitcast i16* %199 to <8 x i16>*
  store <8 x i16> %198, <8 x i16>* %200, align 2, !alias.scope !603, !noalias !600
  %201 = getelementptr i16, i16* %159, i64 16
  %202 = bitcast i16* %201 to <8 x i16>*
  %203 = load <8 x i16>, <8 x i16>* %202, align 2, !alias.scope !600
  %204 = zext <8 x i16> %203 to <8 x i32>
  %205 = mul nuw nsw <8 x i32> %153, %204
  %206 = getelementptr inbounds i16, i16* %159, i64 48
  %207 = bitcast i16* %206 to <8 x i16>*
  %208 = load <8 x i16>, <8 x i16>* %207, align 2, !alias.scope !600
  %209 = zext <8 x i16> %208 to <8 x i32>
  %210 = mul nuw nsw <8 x i32> %155, %209
  %211 = add nuw nsw <8 x i32> %205, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %212 = add nuw nsw <8 x i32> %211, %210
  %213 = lshr <8 x i32> %212, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %214 = trunc <8 x i32> %213 to <8 x i16>
  %215 = getelementptr inbounds i16, i16* %160, i64 16
  %216 = bitcast i16* %215 to <8 x i16>*
  store <8 x i16> %214, <8 x i16>* %216, align 2, !alias.scope !603, !noalias !600
  %217 = getelementptr i16, i16* %159, i64 24
  %218 = bitcast i16* %217 to <8 x i16>*
  %219 = load <8 x i16>, <8 x i16>* %218, align 2, !alias.scope !600
  %220 = zext <8 x i16> %219 to <8 x i32>
  %221 = mul nuw nsw <8 x i32> %153, %220
  %222 = getelementptr inbounds i16, i16* %159, i64 56
  %223 = bitcast i16* %222 to <8 x i16>*
  %224 = load <8 x i16>, <8 x i16>* %223, align 2, !alias.scope !600
  %225 = zext <8 x i16> %224 to <8 x i32>
  %226 = mul nuw nsw <8 x i32> %155, %225
  %227 = add nuw nsw <8 x i32> %221, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %228 = add nuw nsw <8 x i32> %227, %226
  %229 = lshr <8 x i32> %228, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %230 = trunc <8 x i32> %229 to <8 x i16>
  %231 = getelementptr inbounds i16, i16* %160, i64 24
  %232 = bitcast i16* %231 to <8 x i16>*
  store <8 x i16> %230, <8 x i16>* %232, align 2, !alias.scope !603, !noalias !600
  br label %265

233:                                              ; preds = %156, %233
  %234 = phi i64 [ %263, %233 ], [ 0, %156 ]
  %235 = phi i16* [ %262, %233 ], [ %159, %156 ]
  %236 = load i16, i16* %235, align 2
  %237 = zext i16 %236 to i32
  %238 = mul nuw nsw i32 %149, %237
  %239 = getelementptr inbounds i16, i16* %235, i64 32
  %240 = load i16, i16* %239, align 2
  %241 = zext i16 %240 to i32
  %242 = mul nuw nsw i32 %151, %241
  %243 = add nuw nsw i32 %238, 64
  %244 = add nuw nsw i32 %243, %242
  %245 = lshr i32 %244, 7
  %246 = trunc i32 %245 to i16
  %247 = getelementptr inbounds i16, i16* %160, i64 %234
  store i16 %246, i16* %247, align 2
  %248 = getelementptr inbounds i16, i16* %235, i64 1
  %249 = or i64 %234, 1
  %250 = load i16, i16* %248, align 2
  %251 = zext i16 %250 to i32
  %252 = mul nuw nsw i32 %149, %251
  %253 = getelementptr inbounds i16, i16* %235, i64 33
  %254 = load i16, i16* %253, align 2
  %255 = zext i16 %254 to i32
  %256 = mul nuw nsw i32 %151, %255
  %257 = add nuw nsw i32 %252, 64
  %258 = add nuw nsw i32 %257, %256
  %259 = lshr i32 %258, 7
  %260 = trunc i32 %259 to i16
  %261 = getelementptr inbounds i16, i16* %160, i64 %249
  store i16 %260, i16* %261, align 2
  %262 = getelementptr inbounds i16, i16* %235, i64 2
  %263 = add nuw nsw i64 %234, 2
  %264 = icmp eq i64 %263, 32
  br i1 %264, label %265, label %233, !llvm.loop !605

265:                                              ; preds = %233, %169
  %266 = phi i16* [ %170, %169 ], [ %262, %233 ]
  %267 = getelementptr inbounds i16, i16* %160, i64 32
  %268 = add nuw nsw i32 %158, 1
  %269 = icmp eq i32 %268, 64
  %270 = add i64 %157, 1
  br i1 %269, label %271, label %156

271:                                              ; preds = %265
  %272 = ptrtoint i8* %4 to i64
  %273 = shl i64 %272, 1
  %274 = inttoptr i64 %273 to i16*
  %275 = sext i32 %5 to i64
  br label %276

276:                                              ; preds = %313, %271
  %277 = phi i64 [ 0, %271 ], [ %310, %313 ]
  %278 = phi i64 [ 0, %271 ], [ %307, %313 ]
  %279 = phi i32 [ 0, %271 ], [ %316, %313 ]
  %280 = phi i16* [ %274, %271 ], [ %315, %313 ]
  %281 = phi i16* [ %144, %271 ], [ %314, %313 ]
  br label %282

282:                                              ; preds = %282, %276
  %283 = phi i64 [ %277, %276 ], [ %310, %282 ]
  %284 = phi i64 [ %278, %276 ], [ %307, %282 ]
  %285 = phi i64 [ 0, %276 ], [ %311, %282 ]
  %286 = getelementptr inbounds i16, i16* %281, i64 %285
  %287 = load i16, i16* %286, align 2
  %288 = zext i16 %287 to i32
  %289 = getelementptr inbounds i16, i16* %280, i64 %285
  %290 = load i16, i16* %289, align 2
  %291 = zext i16 %290 to i32
  %292 = sub nsw i32 %288, %291
  %293 = sext i32 %292 to i64
  %294 = add nsw i64 %284, %293
  %295 = mul nsw i32 %292, %292
  %296 = zext i32 %295 to i64
  %297 = add i64 %283, %296
  %298 = or i64 %285, 1
  %299 = getelementptr inbounds i16, i16* %281, i64 %298
  %300 = load i16, i16* %299, align 2
  %301 = zext i16 %300 to i32
  %302 = getelementptr inbounds i16, i16* %280, i64 %298
  %303 = load i16, i16* %302, align 2
  %304 = zext i16 %303 to i32
  %305 = sub nsw i32 %301, %304
  %306 = sext i32 %305 to i64
  %307 = add nsw i64 %294, %306
  %308 = mul nsw i32 %305, %305
  %309 = zext i32 %308 to i64
  %310 = add i64 %297, %309
  %311 = add nuw nsw i64 %285, 2
  %312 = icmp eq i64 %311, 32
  br i1 %312, label %313, label %282

313:                                              ; preds = %282
  %314 = getelementptr inbounds i16, i16* %281, i64 32
  %315 = getelementptr inbounds i16, i16* %280, i64 %275
  %316 = add nuw nsw i32 %279, 1
  %317 = icmp eq i32 %316, 64
  br i1 %317, label %318, label %276

318:                                              ; preds = %313
  %319 = trunc i64 %310 to i32
  store i32 %319, i32* %6, align 4
  %320 = shl i64 %307, 32
  %321 = ashr exact i64 %320, 32
  %322 = mul nsw i64 %321, %321
  %323 = lshr i64 %322, 11
  %324 = trunc i64 %323 to i32
  %325 = sub i32 %319, %324
  call void @llvm.lifetime.end.p0i8(i64 4096, i8* nonnull %11) #4
  call void @llvm.lifetime.end.p0i8(i64 4160, i8* nonnull %10) #4
  ret i32 %325
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_highbd_10_sub_pixel_variance32x64_c(i8*, i32, i32, i32, i8*, i32, i32* nocapture) local_unnamed_addr #2 {
  %8 = alloca [2080 x i16], align 16
  %9 = alloca [2048 x i16], align 16
  %10 = bitcast [2080 x i16]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4160, i8* nonnull %10) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %10, i8 -86, i64 4160, i1 false)
  %11 = bitcast [2048 x i16]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4096, i8* nonnull %11) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %11, i8 -86, i64 4096, i1 false)
  %12 = getelementptr inbounds [2080 x i16], [2080 x i16]* %8, i64 0, i64 0
  %13 = sext i32 %2 to i64
  %14 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %13, i64 0
  %15 = ptrtoint i8* %0 to i64
  %16 = shl i64 %15, 1
  %17 = inttoptr i64 %16 to i16*
  %18 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %13, i64 1
  %19 = add i32 %1, -32
  %20 = zext i32 %19 to i64
  %21 = load i8, i8* %14, align 2
  %22 = zext i8 %21 to i32
  %23 = load i8, i8* %18, align 1
  %24 = zext i8 %23 to i32
  %25 = insertelement <8 x i32> undef, i32 %22, i32 0
  %26 = shufflevector <8 x i32> %25, <8 x i32> undef, <8 x i32> zeroinitializer
  %27 = insertelement <8 x i32> undef, i32 %24, i32 0
  %28 = shufflevector <8 x i32> %27, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %29

29:                                               ; preds = %136, %7
  %30 = phi i64 [ %142, %136 ], [ 0, %7 ]
  %31 = phi i16* [ %138, %136 ], [ %17, %7 ]
  %32 = phi i32 [ %140, %136 ], [ 0, %7 ]
  %33 = phi i16* [ %139, %136 ], [ %12, %7 ]
  %34 = shl nuw nsw i64 %30, 5
  %35 = add i64 %34, 32
  %36 = getelementptr [2080 x i16], [2080 x i16]* %8, i64 0, i64 %35
  %37 = getelementptr [2080 x i16], [2080 x i16]* %8, i64 0, i64 %34
  %38 = getelementptr i16, i16* %31, i64 33
  %39 = icmp ult i16* %37, %38
  %40 = icmp ult i16* %31, %36
  %41 = and i1 %39, %40
  br i1 %41, label %106, label %42

42:                                               ; preds = %29
  %43 = getelementptr i16, i16* %31, i64 32
  %44 = bitcast i16* %31 to <8 x i16>*
  %45 = load <8 x i16>, <8 x i16>* %44, align 2, !alias.scope !606
  %46 = zext <8 x i16> %45 to <8 x i32>
  %47 = mul nuw nsw <8 x i32> %26, %46
  %48 = getelementptr inbounds i16, i16* %31, i64 1
  %49 = bitcast i16* %48 to <8 x i16>*
  %50 = load <8 x i16>, <8 x i16>* %49, align 2, !alias.scope !606
  %51 = zext <8 x i16> %50 to <8 x i32>
  %52 = mul nuw nsw <8 x i32> %28, %51
  %53 = add nuw nsw <8 x i32> %47, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %54 = add nuw nsw <8 x i32> %53, %52
  %55 = lshr <8 x i32> %54, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %56 = trunc <8 x i32> %55 to <8 x i16>
  %57 = bitcast i16* %33 to <8 x i16>*
  store <8 x i16> %56, <8 x i16>* %57, align 2, !alias.scope !609, !noalias !606
  %58 = getelementptr i16, i16* %31, i64 8
  %59 = bitcast i16* %58 to <8 x i16>*
  %60 = load <8 x i16>, <8 x i16>* %59, align 2, !alias.scope !606
  %61 = zext <8 x i16> %60 to <8 x i32>
  %62 = mul nuw nsw <8 x i32> %26, %61
  %63 = getelementptr inbounds i16, i16* %31, i64 9
  %64 = bitcast i16* %63 to <8 x i16>*
  %65 = load <8 x i16>, <8 x i16>* %64, align 2, !alias.scope !606
  %66 = zext <8 x i16> %65 to <8 x i32>
  %67 = mul nuw nsw <8 x i32> %28, %66
  %68 = add nuw nsw <8 x i32> %62, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %69 = add nuw nsw <8 x i32> %68, %67
  %70 = lshr <8 x i32> %69, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %71 = trunc <8 x i32> %70 to <8 x i16>
  %72 = getelementptr inbounds i16, i16* %33, i64 8
  %73 = bitcast i16* %72 to <8 x i16>*
  store <8 x i16> %71, <8 x i16>* %73, align 2, !alias.scope !609, !noalias !606
  %74 = getelementptr i16, i16* %31, i64 16
  %75 = bitcast i16* %74 to <8 x i16>*
  %76 = load <8 x i16>, <8 x i16>* %75, align 2, !alias.scope !606
  %77 = zext <8 x i16> %76 to <8 x i32>
  %78 = mul nuw nsw <8 x i32> %26, %77
  %79 = getelementptr inbounds i16, i16* %31, i64 17
  %80 = bitcast i16* %79 to <8 x i16>*
  %81 = load <8 x i16>, <8 x i16>* %80, align 2, !alias.scope !606
  %82 = zext <8 x i16> %81 to <8 x i32>
  %83 = mul nuw nsw <8 x i32> %28, %82
  %84 = add nuw nsw <8 x i32> %78, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %85 = add nuw nsw <8 x i32> %84, %83
  %86 = lshr <8 x i32> %85, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %87 = trunc <8 x i32> %86 to <8 x i16>
  %88 = getelementptr inbounds i16, i16* %33, i64 16
  %89 = bitcast i16* %88 to <8 x i16>*
  store <8 x i16> %87, <8 x i16>* %89, align 2, !alias.scope !609, !noalias !606
  %90 = getelementptr i16, i16* %31, i64 24
  %91 = bitcast i16* %90 to <8 x i16>*
  %92 = load <8 x i16>, <8 x i16>* %91, align 2, !alias.scope !606
  %93 = zext <8 x i16> %92 to <8 x i32>
  %94 = mul nuw nsw <8 x i32> %26, %93
  %95 = getelementptr inbounds i16, i16* %31, i64 25
  %96 = bitcast i16* %95 to <8 x i16>*
  %97 = load <8 x i16>, <8 x i16>* %96, align 2, !alias.scope !606
  %98 = zext <8 x i16> %97 to <8 x i32>
  %99 = mul nuw nsw <8 x i32> %28, %98
  %100 = add nuw nsw <8 x i32> %94, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %101 = add nuw nsw <8 x i32> %100, %99
  %102 = lshr <8 x i32> %101, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %103 = trunc <8 x i32> %102 to <8 x i16>
  %104 = getelementptr inbounds i16, i16* %33, i64 24
  %105 = bitcast i16* %104 to <8 x i16>*
  store <8 x i16> %103, <8 x i16>* %105, align 2, !alias.scope !609, !noalias !606
  br label %136

106:                                              ; preds = %29, %106
  %107 = phi i64 [ %134, %106 ], [ 0, %29 ]
  %108 = phi i16* [ %125, %106 ], [ %31, %29 ]
  %109 = load i16, i16* %108, align 2
  %110 = zext i16 %109 to i32
  %111 = mul nuw nsw i32 %22, %110
  %112 = getelementptr inbounds i16, i16* %108, i64 1
  %113 = load i16, i16* %112, align 2
  %114 = zext i16 %113 to i32
  %115 = mul nuw nsw i32 %24, %114
  %116 = add nuw nsw i32 %111, 64
  %117 = add nuw nsw i32 %116, %115
  %118 = lshr i32 %117, 7
  %119 = trunc i32 %118 to i16
  %120 = getelementptr inbounds i16, i16* %33, i64 %107
  store i16 %119, i16* %120, align 2
  %121 = or i64 %107, 1
  %122 = load i16, i16* %112, align 2
  %123 = zext i16 %122 to i32
  %124 = mul nuw nsw i32 %22, %123
  %125 = getelementptr inbounds i16, i16* %108, i64 2
  %126 = load i16, i16* %125, align 2
  %127 = zext i16 %126 to i32
  %128 = mul nuw nsw i32 %24, %127
  %129 = add nuw nsw i32 %124, 64
  %130 = add nuw nsw i32 %129, %128
  %131 = lshr i32 %130, 7
  %132 = trunc i32 %131 to i16
  %133 = getelementptr inbounds i16, i16* %33, i64 %121
  store i16 %132, i16* %133, align 2
  %134 = add nuw nsw i64 %107, 2
  %135 = icmp eq i64 %134, 32
  br i1 %135, label %136, label %106, !llvm.loop !611

136:                                              ; preds = %106, %42
  %137 = phi i16* [ %43, %42 ], [ %125, %106 ]
  %138 = getelementptr inbounds i16, i16* %137, i64 %20
  %139 = getelementptr inbounds i16, i16* %33, i64 32
  %140 = add nuw nsw i32 %32, 1
  %141 = icmp eq i32 %140, 65
  %142 = add i64 %30, 1
  br i1 %141, label %143, label %29

143:                                              ; preds = %136
  %144 = getelementptr inbounds [2048 x i16], [2048 x i16]* %9, i64 0, i64 0
  %145 = sext i32 %3 to i64
  %146 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %145, i64 0
  %147 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %145, i64 1
  %148 = load i8, i8* %146, align 2
  %149 = zext i8 %148 to i32
  %150 = load i8, i8* %147, align 1
  %151 = zext i8 %150 to i32
  %152 = insertelement <8 x i32> undef, i32 %149, i32 0
  %153 = shufflevector <8 x i32> %152, <8 x i32> undef, <8 x i32> zeroinitializer
  %154 = insertelement <8 x i32> undef, i32 %151, i32 0
  %155 = shufflevector <8 x i32> %154, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %156

156:                                              ; preds = %265, %143
  %157 = phi i64 [ %270, %265 ], [ 0, %143 ]
  %158 = phi i32 [ %268, %265 ], [ 0, %143 ]
  %159 = phi i16* [ %266, %265 ], [ %12, %143 ]
  %160 = phi i16* [ %267, %265 ], [ %144, %143 ]
  %161 = shl nuw nsw i64 %157, 5
  %162 = add i64 %161, 32
  %163 = getelementptr [2048 x i16], [2048 x i16]* %9, i64 0, i64 %162
  %164 = getelementptr [2048 x i16], [2048 x i16]* %9, i64 0, i64 %161
  %165 = getelementptr i16, i16* %159, i64 64
  %166 = icmp ult i16* %164, %165
  %167 = icmp ult i16* %159, %163
  %168 = and i1 %166, %167
  br i1 %168, label %233, label %169

169:                                              ; preds = %156
  %170 = getelementptr i16, i16* %159, i64 32
  %171 = bitcast i16* %159 to <8 x i16>*
  %172 = load <8 x i16>, <8 x i16>* %171, align 2, !alias.scope !612
  %173 = zext <8 x i16> %172 to <8 x i32>
  %174 = mul nuw nsw <8 x i32> %153, %173
  %175 = getelementptr inbounds i16, i16* %159, i64 32
  %176 = bitcast i16* %175 to <8 x i16>*
  %177 = load <8 x i16>, <8 x i16>* %176, align 2, !alias.scope !612
  %178 = zext <8 x i16> %177 to <8 x i32>
  %179 = mul nuw nsw <8 x i32> %155, %178
  %180 = add nuw nsw <8 x i32> %174, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %181 = add nuw nsw <8 x i32> %180, %179
  %182 = lshr <8 x i32> %181, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %183 = trunc <8 x i32> %182 to <8 x i16>
  %184 = bitcast i16* %160 to <8 x i16>*
  store <8 x i16> %183, <8 x i16>* %184, align 2, !alias.scope !615, !noalias !612
  %185 = getelementptr i16, i16* %159, i64 8
  %186 = bitcast i16* %185 to <8 x i16>*
  %187 = load <8 x i16>, <8 x i16>* %186, align 2, !alias.scope !612
  %188 = zext <8 x i16> %187 to <8 x i32>
  %189 = mul nuw nsw <8 x i32> %153, %188
  %190 = getelementptr inbounds i16, i16* %159, i64 40
  %191 = bitcast i16* %190 to <8 x i16>*
  %192 = load <8 x i16>, <8 x i16>* %191, align 2, !alias.scope !612
  %193 = zext <8 x i16> %192 to <8 x i32>
  %194 = mul nuw nsw <8 x i32> %155, %193
  %195 = add nuw nsw <8 x i32> %189, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %196 = add nuw nsw <8 x i32> %195, %194
  %197 = lshr <8 x i32> %196, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %198 = trunc <8 x i32> %197 to <8 x i16>
  %199 = getelementptr inbounds i16, i16* %160, i64 8
  %200 = bitcast i16* %199 to <8 x i16>*
  store <8 x i16> %198, <8 x i16>* %200, align 2, !alias.scope !615, !noalias !612
  %201 = getelementptr i16, i16* %159, i64 16
  %202 = bitcast i16* %201 to <8 x i16>*
  %203 = load <8 x i16>, <8 x i16>* %202, align 2, !alias.scope !612
  %204 = zext <8 x i16> %203 to <8 x i32>
  %205 = mul nuw nsw <8 x i32> %153, %204
  %206 = getelementptr inbounds i16, i16* %159, i64 48
  %207 = bitcast i16* %206 to <8 x i16>*
  %208 = load <8 x i16>, <8 x i16>* %207, align 2, !alias.scope !612
  %209 = zext <8 x i16> %208 to <8 x i32>
  %210 = mul nuw nsw <8 x i32> %155, %209
  %211 = add nuw nsw <8 x i32> %205, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %212 = add nuw nsw <8 x i32> %211, %210
  %213 = lshr <8 x i32> %212, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %214 = trunc <8 x i32> %213 to <8 x i16>
  %215 = getelementptr inbounds i16, i16* %160, i64 16
  %216 = bitcast i16* %215 to <8 x i16>*
  store <8 x i16> %214, <8 x i16>* %216, align 2, !alias.scope !615, !noalias !612
  %217 = getelementptr i16, i16* %159, i64 24
  %218 = bitcast i16* %217 to <8 x i16>*
  %219 = load <8 x i16>, <8 x i16>* %218, align 2, !alias.scope !612
  %220 = zext <8 x i16> %219 to <8 x i32>
  %221 = mul nuw nsw <8 x i32> %153, %220
  %222 = getelementptr inbounds i16, i16* %159, i64 56
  %223 = bitcast i16* %222 to <8 x i16>*
  %224 = load <8 x i16>, <8 x i16>* %223, align 2, !alias.scope !612
  %225 = zext <8 x i16> %224 to <8 x i32>
  %226 = mul nuw nsw <8 x i32> %155, %225
  %227 = add nuw nsw <8 x i32> %221, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %228 = add nuw nsw <8 x i32> %227, %226
  %229 = lshr <8 x i32> %228, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %230 = trunc <8 x i32> %229 to <8 x i16>
  %231 = getelementptr inbounds i16, i16* %160, i64 24
  %232 = bitcast i16* %231 to <8 x i16>*
  store <8 x i16> %230, <8 x i16>* %232, align 2, !alias.scope !615, !noalias !612
  br label %265

233:                                              ; preds = %156, %233
  %234 = phi i64 [ %263, %233 ], [ 0, %156 ]
  %235 = phi i16* [ %262, %233 ], [ %159, %156 ]
  %236 = load i16, i16* %235, align 2
  %237 = zext i16 %236 to i32
  %238 = mul nuw nsw i32 %149, %237
  %239 = getelementptr inbounds i16, i16* %235, i64 32
  %240 = load i16, i16* %239, align 2
  %241 = zext i16 %240 to i32
  %242 = mul nuw nsw i32 %151, %241
  %243 = add nuw nsw i32 %238, 64
  %244 = add nuw nsw i32 %243, %242
  %245 = lshr i32 %244, 7
  %246 = trunc i32 %245 to i16
  %247 = getelementptr inbounds i16, i16* %160, i64 %234
  store i16 %246, i16* %247, align 2
  %248 = getelementptr inbounds i16, i16* %235, i64 1
  %249 = or i64 %234, 1
  %250 = load i16, i16* %248, align 2
  %251 = zext i16 %250 to i32
  %252 = mul nuw nsw i32 %149, %251
  %253 = getelementptr inbounds i16, i16* %235, i64 33
  %254 = load i16, i16* %253, align 2
  %255 = zext i16 %254 to i32
  %256 = mul nuw nsw i32 %151, %255
  %257 = add nuw nsw i32 %252, 64
  %258 = add nuw nsw i32 %257, %256
  %259 = lshr i32 %258, 7
  %260 = trunc i32 %259 to i16
  %261 = getelementptr inbounds i16, i16* %160, i64 %249
  store i16 %260, i16* %261, align 2
  %262 = getelementptr inbounds i16, i16* %235, i64 2
  %263 = add nuw nsw i64 %234, 2
  %264 = icmp eq i64 %263, 32
  br i1 %264, label %265, label %233, !llvm.loop !617

265:                                              ; preds = %233, %169
  %266 = phi i16* [ %170, %169 ], [ %262, %233 ]
  %267 = getelementptr inbounds i16, i16* %160, i64 32
  %268 = add nuw nsw i32 %158, 1
  %269 = icmp eq i32 %268, 64
  %270 = add i64 %157, 1
  br i1 %269, label %271, label %156

271:                                              ; preds = %265
  %272 = ptrtoint i8* %4 to i64
  %273 = shl i64 %272, 1
  %274 = inttoptr i64 %273 to i16*
  %275 = sext i32 %5 to i64
  br label %276

276:                                              ; preds = %313, %271
  %277 = phi i64 [ 0, %271 ], [ %310, %313 ]
  %278 = phi i64 [ 0, %271 ], [ %307, %313 ]
  %279 = phi i32 [ 0, %271 ], [ %316, %313 ]
  %280 = phi i16* [ %274, %271 ], [ %315, %313 ]
  %281 = phi i16* [ %144, %271 ], [ %314, %313 ]
  br label %282

282:                                              ; preds = %282, %276
  %283 = phi i64 [ %277, %276 ], [ %310, %282 ]
  %284 = phi i64 [ %278, %276 ], [ %307, %282 ]
  %285 = phi i64 [ 0, %276 ], [ %311, %282 ]
  %286 = getelementptr inbounds i16, i16* %281, i64 %285
  %287 = load i16, i16* %286, align 2
  %288 = zext i16 %287 to i32
  %289 = getelementptr inbounds i16, i16* %280, i64 %285
  %290 = load i16, i16* %289, align 2
  %291 = zext i16 %290 to i32
  %292 = sub nsw i32 %288, %291
  %293 = sext i32 %292 to i64
  %294 = add nsw i64 %284, %293
  %295 = mul nsw i32 %292, %292
  %296 = zext i32 %295 to i64
  %297 = add i64 %283, %296
  %298 = or i64 %285, 1
  %299 = getelementptr inbounds i16, i16* %281, i64 %298
  %300 = load i16, i16* %299, align 2
  %301 = zext i16 %300 to i32
  %302 = getelementptr inbounds i16, i16* %280, i64 %298
  %303 = load i16, i16* %302, align 2
  %304 = zext i16 %303 to i32
  %305 = sub nsw i32 %301, %304
  %306 = sext i32 %305 to i64
  %307 = add nsw i64 %294, %306
  %308 = mul nsw i32 %305, %305
  %309 = zext i32 %308 to i64
  %310 = add i64 %297, %309
  %311 = add nuw nsw i64 %285, 2
  %312 = icmp eq i64 %311, 32
  br i1 %312, label %313, label %282

313:                                              ; preds = %282
  %314 = getelementptr inbounds i16, i16* %281, i64 32
  %315 = getelementptr inbounds i16, i16* %280, i64 %275
  %316 = add nuw nsw i32 %279, 1
  %317 = icmp eq i32 %316, 64
  br i1 %317, label %318, label %276

318:                                              ; preds = %313
  %319 = add i64 %310, 8
  %320 = lshr i64 %319, 4
  %321 = trunc i64 %320 to i32
  store i32 %321, i32* %6, align 4
  %322 = and i64 %320, 4294967295
  %323 = shl i64 %307, 30
  %324 = add i64 %323, 2147483648
  %325 = ashr i64 %324, 32
  %326 = mul nsw i64 %325, %325
  %327 = lshr i64 %326, 11
  %328 = sub nsw i64 %322, %327
  %329 = icmp sgt i64 %328, -1
  %330 = trunc i64 %328 to i32
  %331 = select i1 %329, i32 %330, i32 0
  call void @llvm.lifetime.end.p0i8(i64 4096, i8* nonnull %11) #4
  call void @llvm.lifetime.end.p0i8(i64 4160, i8* nonnull %10) #4
  ret i32 %331
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_highbd_12_sub_pixel_variance32x64_c(i8*, i32, i32, i32, i8*, i32, i32* nocapture) local_unnamed_addr #2 {
  %8 = alloca [2080 x i16], align 16
  %9 = alloca [2048 x i16], align 16
  %10 = bitcast [2080 x i16]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4160, i8* nonnull %10) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %10, i8 -86, i64 4160, i1 false)
  %11 = bitcast [2048 x i16]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4096, i8* nonnull %11) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %11, i8 -86, i64 4096, i1 false)
  %12 = getelementptr inbounds [2080 x i16], [2080 x i16]* %8, i64 0, i64 0
  %13 = sext i32 %2 to i64
  %14 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %13, i64 0
  %15 = ptrtoint i8* %0 to i64
  %16 = shl i64 %15, 1
  %17 = inttoptr i64 %16 to i16*
  %18 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %13, i64 1
  %19 = add i32 %1, -32
  %20 = zext i32 %19 to i64
  %21 = load i8, i8* %14, align 2
  %22 = zext i8 %21 to i32
  %23 = load i8, i8* %18, align 1
  %24 = zext i8 %23 to i32
  %25 = insertelement <8 x i32> undef, i32 %22, i32 0
  %26 = shufflevector <8 x i32> %25, <8 x i32> undef, <8 x i32> zeroinitializer
  %27 = insertelement <8 x i32> undef, i32 %24, i32 0
  %28 = shufflevector <8 x i32> %27, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %29

29:                                               ; preds = %136, %7
  %30 = phi i64 [ %142, %136 ], [ 0, %7 ]
  %31 = phi i16* [ %138, %136 ], [ %17, %7 ]
  %32 = phi i32 [ %140, %136 ], [ 0, %7 ]
  %33 = phi i16* [ %139, %136 ], [ %12, %7 ]
  %34 = shl nuw nsw i64 %30, 5
  %35 = add i64 %34, 32
  %36 = getelementptr [2080 x i16], [2080 x i16]* %8, i64 0, i64 %35
  %37 = getelementptr [2080 x i16], [2080 x i16]* %8, i64 0, i64 %34
  %38 = getelementptr i16, i16* %31, i64 33
  %39 = icmp ult i16* %37, %38
  %40 = icmp ult i16* %31, %36
  %41 = and i1 %39, %40
  br i1 %41, label %106, label %42

42:                                               ; preds = %29
  %43 = getelementptr i16, i16* %31, i64 32
  %44 = bitcast i16* %31 to <8 x i16>*
  %45 = load <8 x i16>, <8 x i16>* %44, align 2, !alias.scope !618
  %46 = zext <8 x i16> %45 to <8 x i32>
  %47 = mul nuw nsw <8 x i32> %26, %46
  %48 = getelementptr inbounds i16, i16* %31, i64 1
  %49 = bitcast i16* %48 to <8 x i16>*
  %50 = load <8 x i16>, <8 x i16>* %49, align 2, !alias.scope !618
  %51 = zext <8 x i16> %50 to <8 x i32>
  %52 = mul nuw nsw <8 x i32> %28, %51
  %53 = add nuw nsw <8 x i32> %47, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %54 = add nuw nsw <8 x i32> %53, %52
  %55 = lshr <8 x i32> %54, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %56 = trunc <8 x i32> %55 to <8 x i16>
  %57 = bitcast i16* %33 to <8 x i16>*
  store <8 x i16> %56, <8 x i16>* %57, align 2, !alias.scope !621, !noalias !618
  %58 = getelementptr i16, i16* %31, i64 8
  %59 = bitcast i16* %58 to <8 x i16>*
  %60 = load <8 x i16>, <8 x i16>* %59, align 2, !alias.scope !618
  %61 = zext <8 x i16> %60 to <8 x i32>
  %62 = mul nuw nsw <8 x i32> %26, %61
  %63 = getelementptr inbounds i16, i16* %31, i64 9
  %64 = bitcast i16* %63 to <8 x i16>*
  %65 = load <8 x i16>, <8 x i16>* %64, align 2, !alias.scope !618
  %66 = zext <8 x i16> %65 to <8 x i32>
  %67 = mul nuw nsw <8 x i32> %28, %66
  %68 = add nuw nsw <8 x i32> %62, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %69 = add nuw nsw <8 x i32> %68, %67
  %70 = lshr <8 x i32> %69, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %71 = trunc <8 x i32> %70 to <8 x i16>
  %72 = getelementptr inbounds i16, i16* %33, i64 8
  %73 = bitcast i16* %72 to <8 x i16>*
  store <8 x i16> %71, <8 x i16>* %73, align 2, !alias.scope !621, !noalias !618
  %74 = getelementptr i16, i16* %31, i64 16
  %75 = bitcast i16* %74 to <8 x i16>*
  %76 = load <8 x i16>, <8 x i16>* %75, align 2, !alias.scope !618
  %77 = zext <8 x i16> %76 to <8 x i32>
  %78 = mul nuw nsw <8 x i32> %26, %77
  %79 = getelementptr inbounds i16, i16* %31, i64 17
  %80 = bitcast i16* %79 to <8 x i16>*
  %81 = load <8 x i16>, <8 x i16>* %80, align 2, !alias.scope !618
  %82 = zext <8 x i16> %81 to <8 x i32>
  %83 = mul nuw nsw <8 x i32> %28, %82
  %84 = add nuw nsw <8 x i32> %78, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %85 = add nuw nsw <8 x i32> %84, %83
  %86 = lshr <8 x i32> %85, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %87 = trunc <8 x i32> %86 to <8 x i16>
  %88 = getelementptr inbounds i16, i16* %33, i64 16
  %89 = bitcast i16* %88 to <8 x i16>*
  store <8 x i16> %87, <8 x i16>* %89, align 2, !alias.scope !621, !noalias !618
  %90 = getelementptr i16, i16* %31, i64 24
  %91 = bitcast i16* %90 to <8 x i16>*
  %92 = load <8 x i16>, <8 x i16>* %91, align 2, !alias.scope !618
  %93 = zext <8 x i16> %92 to <8 x i32>
  %94 = mul nuw nsw <8 x i32> %26, %93
  %95 = getelementptr inbounds i16, i16* %31, i64 25
  %96 = bitcast i16* %95 to <8 x i16>*
  %97 = load <8 x i16>, <8 x i16>* %96, align 2, !alias.scope !618
  %98 = zext <8 x i16> %97 to <8 x i32>
  %99 = mul nuw nsw <8 x i32> %28, %98
  %100 = add nuw nsw <8 x i32> %94, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %101 = add nuw nsw <8 x i32> %100, %99
  %102 = lshr <8 x i32> %101, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %103 = trunc <8 x i32> %102 to <8 x i16>
  %104 = getelementptr inbounds i16, i16* %33, i64 24
  %105 = bitcast i16* %104 to <8 x i16>*
  store <8 x i16> %103, <8 x i16>* %105, align 2, !alias.scope !621, !noalias !618
  br label %136

106:                                              ; preds = %29, %106
  %107 = phi i64 [ %134, %106 ], [ 0, %29 ]
  %108 = phi i16* [ %125, %106 ], [ %31, %29 ]
  %109 = load i16, i16* %108, align 2
  %110 = zext i16 %109 to i32
  %111 = mul nuw nsw i32 %22, %110
  %112 = getelementptr inbounds i16, i16* %108, i64 1
  %113 = load i16, i16* %112, align 2
  %114 = zext i16 %113 to i32
  %115 = mul nuw nsw i32 %24, %114
  %116 = add nuw nsw i32 %111, 64
  %117 = add nuw nsw i32 %116, %115
  %118 = lshr i32 %117, 7
  %119 = trunc i32 %118 to i16
  %120 = getelementptr inbounds i16, i16* %33, i64 %107
  store i16 %119, i16* %120, align 2
  %121 = or i64 %107, 1
  %122 = load i16, i16* %112, align 2
  %123 = zext i16 %122 to i32
  %124 = mul nuw nsw i32 %22, %123
  %125 = getelementptr inbounds i16, i16* %108, i64 2
  %126 = load i16, i16* %125, align 2
  %127 = zext i16 %126 to i32
  %128 = mul nuw nsw i32 %24, %127
  %129 = add nuw nsw i32 %124, 64
  %130 = add nuw nsw i32 %129, %128
  %131 = lshr i32 %130, 7
  %132 = trunc i32 %131 to i16
  %133 = getelementptr inbounds i16, i16* %33, i64 %121
  store i16 %132, i16* %133, align 2
  %134 = add nuw nsw i64 %107, 2
  %135 = icmp eq i64 %134, 32
  br i1 %135, label %136, label %106, !llvm.loop !623

136:                                              ; preds = %106, %42
  %137 = phi i16* [ %43, %42 ], [ %125, %106 ]
  %138 = getelementptr inbounds i16, i16* %137, i64 %20
  %139 = getelementptr inbounds i16, i16* %33, i64 32
  %140 = add nuw nsw i32 %32, 1
  %141 = icmp eq i32 %140, 65
  %142 = add i64 %30, 1
  br i1 %141, label %143, label %29

143:                                              ; preds = %136
  %144 = getelementptr inbounds [2048 x i16], [2048 x i16]* %9, i64 0, i64 0
  %145 = sext i32 %3 to i64
  %146 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %145, i64 0
  %147 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %145, i64 1
  %148 = load i8, i8* %146, align 2
  %149 = zext i8 %148 to i32
  %150 = load i8, i8* %147, align 1
  %151 = zext i8 %150 to i32
  %152 = insertelement <8 x i32> undef, i32 %149, i32 0
  %153 = shufflevector <8 x i32> %152, <8 x i32> undef, <8 x i32> zeroinitializer
  %154 = insertelement <8 x i32> undef, i32 %151, i32 0
  %155 = shufflevector <8 x i32> %154, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %156

156:                                              ; preds = %265, %143
  %157 = phi i64 [ %270, %265 ], [ 0, %143 ]
  %158 = phi i32 [ %268, %265 ], [ 0, %143 ]
  %159 = phi i16* [ %266, %265 ], [ %12, %143 ]
  %160 = phi i16* [ %267, %265 ], [ %144, %143 ]
  %161 = shl nuw nsw i64 %157, 5
  %162 = add i64 %161, 32
  %163 = getelementptr [2048 x i16], [2048 x i16]* %9, i64 0, i64 %162
  %164 = getelementptr [2048 x i16], [2048 x i16]* %9, i64 0, i64 %161
  %165 = getelementptr i16, i16* %159, i64 64
  %166 = icmp ult i16* %164, %165
  %167 = icmp ult i16* %159, %163
  %168 = and i1 %166, %167
  br i1 %168, label %233, label %169

169:                                              ; preds = %156
  %170 = getelementptr i16, i16* %159, i64 32
  %171 = bitcast i16* %159 to <8 x i16>*
  %172 = load <8 x i16>, <8 x i16>* %171, align 2, !alias.scope !624
  %173 = zext <8 x i16> %172 to <8 x i32>
  %174 = mul nuw nsw <8 x i32> %153, %173
  %175 = getelementptr inbounds i16, i16* %159, i64 32
  %176 = bitcast i16* %175 to <8 x i16>*
  %177 = load <8 x i16>, <8 x i16>* %176, align 2, !alias.scope !624
  %178 = zext <8 x i16> %177 to <8 x i32>
  %179 = mul nuw nsw <8 x i32> %155, %178
  %180 = add nuw nsw <8 x i32> %174, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %181 = add nuw nsw <8 x i32> %180, %179
  %182 = lshr <8 x i32> %181, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %183 = trunc <8 x i32> %182 to <8 x i16>
  %184 = bitcast i16* %160 to <8 x i16>*
  store <8 x i16> %183, <8 x i16>* %184, align 2, !alias.scope !627, !noalias !624
  %185 = getelementptr i16, i16* %159, i64 8
  %186 = bitcast i16* %185 to <8 x i16>*
  %187 = load <8 x i16>, <8 x i16>* %186, align 2, !alias.scope !624
  %188 = zext <8 x i16> %187 to <8 x i32>
  %189 = mul nuw nsw <8 x i32> %153, %188
  %190 = getelementptr inbounds i16, i16* %159, i64 40
  %191 = bitcast i16* %190 to <8 x i16>*
  %192 = load <8 x i16>, <8 x i16>* %191, align 2, !alias.scope !624
  %193 = zext <8 x i16> %192 to <8 x i32>
  %194 = mul nuw nsw <8 x i32> %155, %193
  %195 = add nuw nsw <8 x i32> %189, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %196 = add nuw nsw <8 x i32> %195, %194
  %197 = lshr <8 x i32> %196, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %198 = trunc <8 x i32> %197 to <8 x i16>
  %199 = getelementptr inbounds i16, i16* %160, i64 8
  %200 = bitcast i16* %199 to <8 x i16>*
  store <8 x i16> %198, <8 x i16>* %200, align 2, !alias.scope !627, !noalias !624
  %201 = getelementptr i16, i16* %159, i64 16
  %202 = bitcast i16* %201 to <8 x i16>*
  %203 = load <8 x i16>, <8 x i16>* %202, align 2, !alias.scope !624
  %204 = zext <8 x i16> %203 to <8 x i32>
  %205 = mul nuw nsw <8 x i32> %153, %204
  %206 = getelementptr inbounds i16, i16* %159, i64 48
  %207 = bitcast i16* %206 to <8 x i16>*
  %208 = load <8 x i16>, <8 x i16>* %207, align 2, !alias.scope !624
  %209 = zext <8 x i16> %208 to <8 x i32>
  %210 = mul nuw nsw <8 x i32> %155, %209
  %211 = add nuw nsw <8 x i32> %205, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %212 = add nuw nsw <8 x i32> %211, %210
  %213 = lshr <8 x i32> %212, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %214 = trunc <8 x i32> %213 to <8 x i16>
  %215 = getelementptr inbounds i16, i16* %160, i64 16
  %216 = bitcast i16* %215 to <8 x i16>*
  store <8 x i16> %214, <8 x i16>* %216, align 2, !alias.scope !627, !noalias !624
  %217 = getelementptr i16, i16* %159, i64 24
  %218 = bitcast i16* %217 to <8 x i16>*
  %219 = load <8 x i16>, <8 x i16>* %218, align 2, !alias.scope !624
  %220 = zext <8 x i16> %219 to <8 x i32>
  %221 = mul nuw nsw <8 x i32> %153, %220
  %222 = getelementptr inbounds i16, i16* %159, i64 56
  %223 = bitcast i16* %222 to <8 x i16>*
  %224 = load <8 x i16>, <8 x i16>* %223, align 2, !alias.scope !624
  %225 = zext <8 x i16> %224 to <8 x i32>
  %226 = mul nuw nsw <8 x i32> %155, %225
  %227 = add nuw nsw <8 x i32> %221, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %228 = add nuw nsw <8 x i32> %227, %226
  %229 = lshr <8 x i32> %228, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %230 = trunc <8 x i32> %229 to <8 x i16>
  %231 = getelementptr inbounds i16, i16* %160, i64 24
  %232 = bitcast i16* %231 to <8 x i16>*
  store <8 x i16> %230, <8 x i16>* %232, align 2, !alias.scope !627, !noalias !624
  br label %265

233:                                              ; preds = %156, %233
  %234 = phi i64 [ %263, %233 ], [ 0, %156 ]
  %235 = phi i16* [ %262, %233 ], [ %159, %156 ]
  %236 = load i16, i16* %235, align 2
  %237 = zext i16 %236 to i32
  %238 = mul nuw nsw i32 %149, %237
  %239 = getelementptr inbounds i16, i16* %235, i64 32
  %240 = load i16, i16* %239, align 2
  %241 = zext i16 %240 to i32
  %242 = mul nuw nsw i32 %151, %241
  %243 = add nuw nsw i32 %238, 64
  %244 = add nuw nsw i32 %243, %242
  %245 = lshr i32 %244, 7
  %246 = trunc i32 %245 to i16
  %247 = getelementptr inbounds i16, i16* %160, i64 %234
  store i16 %246, i16* %247, align 2
  %248 = getelementptr inbounds i16, i16* %235, i64 1
  %249 = or i64 %234, 1
  %250 = load i16, i16* %248, align 2
  %251 = zext i16 %250 to i32
  %252 = mul nuw nsw i32 %149, %251
  %253 = getelementptr inbounds i16, i16* %235, i64 33
  %254 = load i16, i16* %253, align 2
  %255 = zext i16 %254 to i32
  %256 = mul nuw nsw i32 %151, %255
  %257 = add nuw nsw i32 %252, 64
  %258 = add nuw nsw i32 %257, %256
  %259 = lshr i32 %258, 7
  %260 = trunc i32 %259 to i16
  %261 = getelementptr inbounds i16, i16* %160, i64 %249
  store i16 %260, i16* %261, align 2
  %262 = getelementptr inbounds i16, i16* %235, i64 2
  %263 = add nuw nsw i64 %234, 2
  %264 = icmp eq i64 %263, 32
  br i1 %264, label %265, label %233, !llvm.loop !629

265:                                              ; preds = %233, %169
  %266 = phi i16* [ %170, %169 ], [ %262, %233 ]
  %267 = getelementptr inbounds i16, i16* %160, i64 32
  %268 = add nuw nsw i32 %158, 1
  %269 = icmp eq i32 %268, 64
  %270 = add i64 %157, 1
  br i1 %269, label %271, label %156

271:                                              ; preds = %265
  %272 = ptrtoint i8* %4 to i64
  %273 = shl i64 %272, 1
  %274 = inttoptr i64 %273 to i16*
  %275 = sext i32 %5 to i64
  br label %276

276:                                              ; preds = %313, %271
  %277 = phi i64 [ 0, %271 ], [ %310, %313 ]
  %278 = phi i64 [ 0, %271 ], [ %307, %313 ]
  %279 = phi i32 [ 0, %271 ], [ %316, %313 ]
  %280 = phi i16* [ %274, %271 ], [ %315, %313 ]
  %281 = phi i16* [ %144, %271 ], [ %314, %313 ]
  br label %282

282:                                              ; preds = %282, %276
  %283 = phi i64 [ %277, %276 ], [ %310, %282 ]
  %284 = phi i64 [ %278, %276 ], [ %307, %282 ]
  %285 = phi i64 [ 0, %276 ], [ %311, %282 ]
  %286 = getelementptr inbounds i16, i16* %281, i64 %285
  %287 = load i16, i16* %286, align 2
  %288 = zext i16 %287 to i32
  %289 = getelementptr inbounds i16, i16* %280, i64 %285
  %290 = load i16, i16* %289, align 2
  %291 = zext i16 %290 to i32
  %292 = sub nsw i32 %288, %291
  %293 = sext i32 %292 to i64
  %294 = add nsw i64 %284, %293
  %295 = mul nsw i32 %292, %292
  %296 = zext i32 %295 to i64
  %297 = add i64 %283, %296
  %298 = or i64 %285, 1
  %299 = getelementptr inbounds i16, i16* %281, i64 %298
  %300 = load i16, i16* %299, align 2
  %301 = zext i16 %300 to i32
  %302 = getelementptr inbounds i16, i16* %280, i64 %298
  %303 = load i16, i16* %302, align 2
  %304 = zext i16 %303 to i32
  %305 = sub nsw i32 %301, %304
  %306 = sext i32 %305 to i64
  %307 = add nsw i64 %294, %306
  %308 = mul nsw i32 %305, %305
  %309 = zext i32 %308 to i64
  %310 = add i64 %297, %309
  %311 = add nuw nsw i64 %285, 2
  %312 = icmp eq i64 %311, 32
  br i1 %312, label %313, label %282

313:                                              ; preds = %282
  %314 = getelementptr inbounds i16, i16* %281, i64 32
  %315 = getelementptr inbounds i16, i16* %280, i64 %275
  %316 = add nuw nsw i32 %279, 1
  %317 = icmp eq i32 %316, 64
  br i1 %317, label %318, label %276

318:                                              ; preds = %313
  %319 = add i64 %310, 128
  %320 = lshr i64 %319, 8
  %321 = trunc i64 %320 to i32
  store i32 %321, i32* %6, align 4
  %322 = and i64 %320, 4294967295
  %323 = shl i64 %307, 28
  %324 = add i64 %323, 2147483648
  %325 = ashr i64 %324, 32
  %326 = mul nsw i64 %325, %325
  %327 = lshr i64 %326, 11
  %328 = sub nsw i64 %322, %327
  %329 = icmp sgt i64 %328, -1
  %330 = trunc i64 %328 to i32
  %331 = select i1 %329, i32 %330, i32 0
  call void @llvm.lifetime.end.p0i8(i64 4096, i8* nonnull %11) #4
  call void @llvm.lifetime.end.p0i8(i64 4160, i8* nonnull %10) #4
  ret i32 %331
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_highbd_8_sub_pixel_avg_variance32x64_c(i8*, i32, i32, i32, i8*, i32, i32* nocapture, i8*) local_unnamed_addr #2 {
  %9 = alloca [2080 x i16], align 16
  %10 = alloca [2048 x i16], align 16
  %11 = alloca [2048 x i16], align 16
  %12 = bitcast [2080 x i16]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4160, i8* nonnull %12) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %12, i8 -86, i64 4160, i1 false)
  %13 = bitcast [2048 x i16]* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4096, i8* nonnull %13) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %13, i8 -86, i64 4096, i1 false)
  %14 = bitcast [2048 x i16]* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4096, i8* nonnull %14) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %14, i8 -86, i64 4096, i1 false)
  %15 = getelementptr inbounds [2080 x i16], [2080 x i16]* %9, i64 0, i64 0
  %16 = sext i32 %2 to i64
  %17 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %16, i64 0
  %18 = ptrtoint i8* %0 to i64
  %19 = shl i64 %18, 1
  %20 = inttoptr i64 %19 to i16*
  %21 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %16, i64 1
  %22 = add i32 %1, -32
  %23 = zext i32 %22 to i64
  %24 = load i8, i8* %17, align 2
  %25 = zext i8 %24 to i32
  %26 = load i8, i8* %21, align 1
  %27 = zext i8 %26 to i32
  %28 = insertelement <8 x i32> undef, i32 %25, i32 0
  %29 = shufflevector <8 x i32> %28, <8 x i32> undef, <8 x i32> zeroinitializer
  %30 = insertelement <8 x i32> undef, i32 %27, i32 0
  %31 = shufflevector <8 x i32> %30, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %32

32:                                               ; preds = %139, %8
  %33 = phi i64 [ %145, %139 ], [ 0, %8 ]
  %34 = phi i16* [ %141, %139 ], [ %20, %8 ]
  %35 = phi i32 [ %143, %139 ], [ 0, %8 ]
  %36 = phi i16* [ %142, %139 ], [ %15, %8 ]
  %37 = shl nuw nsw i64 %33, 5
  %38 = add i64 %37, 32
  %39 = getelementptr [2080 x i16], [2080 x i16]* %9, i64 0, i64 %38
  %40 = getelementptr [2080 x i16], [2080 x i16]* %9, i64 0, i64 %37
  %41 = getelementptr i16, i16* %34, i64 33
  %42 = icmp ult i16* %40, %41
  %43 = icmp ult i16* %34, %39
  %44 = and i1 %42, %43
  br i1 %44, label %109, label %45

45:                                               ; preds = %32
  %46 = getelementptr i16, i16* %34, i64 32
  %47 = bitcast i16* %34 to <8 x i16>*
  %48 = load <8 x i16>, <8 x i16>* %47, align 2, !alias.scope !630
  %49 = zext <8 x i16> %48 to <8 x i32>
  %50 = mul nuw nsw <8 x i32> %29, %49
  %51 = getelementptr inbounds i16, i16* %34, i64 1
  %52 = bitcast i16* %51 to <8 x i16>*
  %53 = load <8 x i16>, <8 x i16>* %52, align 2, !alias.scope !630
  %54 = zext <8 x i16> %53 to <8 x i32>
  %55 = mul nuw nsw <8 x i32> %31, %54
  %56 = add nuw nsw <8 x i32> %50, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %57 = add nuw nsw <8 x i32> %56, %55
  %58 = lshr <8 x i32> %57, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %59 = trunc <8 x i32> %58 to <8 x i16>
  %60 = bitcast i16* %36 to <8 x i16>*
  store <8 x i16> %59, <8 x i16>* %60, align 2, !alias.scope !633, !noalias !630
  %61 = getelementptr i16, i16* %34, i64 8
  %62 = bitcast i16* %61 to <8 x i16>*
  %63 = load <8 x i16>, <8 x i16>* %62, align 2, !alias.scope !630
  %64 = zext <8 x i16> %63 to <8 x i32>
  %65 = mul nuw nsw <8 x i32> %29, %64
  %66 = getelementptr inbounds i16, i16* %34, i64 9
  %67 = bitcast i16* %66 to <8 x i16>*
  %68 = load <8 x i16>, <8 x i16>* %67, align 2, !alias.scope !630
  %69 = zext <8 x i16> %68 to <8 x i32>
  %70 = mul nuw nsw <8 x i32> %31, %69
  %71 = add nuw nsw <8 x i32> %65, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %72 = add nuw nsw <8 x i32> %71, %70
  %73 = lshr <8 x i32> %72, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %74 = trunc <8 x i32> %73 to <8 x i16>
  %75 = getelementptr inbounds i16, i16* %36, i64 8
  %76 = bitcast i16* %75 to <8 x i16>*
  store <8 x i16> %74, <8 x i16>* %76, align 2, !alias.scope !633, !noalias !630
  %77 = getelementptr i16, i16* %34, i64 16
  %78 = bitcast i16* %77 to <8 x i16>*
  %79 = load <8 x i16>, <8 x i16>* %78, align 2, !alias.scope !630
  %80 = zext <8 x i16> %79 to <8 x i32>
  %81 = mul nuw nsw <8 x i32> %29, %80
  %82 = getelementptr inbounds i16, i16* %34, i64 17
  %83 = bitcast i16* %82 to <8 x i16>*
  %84 = load <8 x i16>, <8 x i16>* %83, align 2, !alias.scope !630
  %85 = zext <8 x i16> %84 to <8 x i32>
  %86 = mul nuw nsw <8 x i32> %31, %85
  %87 = add nuw nsw <8 x i32> %81, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %88 = add nuw nsw <8 x i32> %87, %86
  %89 = lshr <8 x i32> %88, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %90 = trunc <8 x i32> %89 to <8 x i16>
  %91 = getelementptr inbounds i16, i16* %36, i64 16
  %92 = bitcast i16* %91 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %92, align 2, !alias.scope !633, !noalias !630
  %93 = getelementptr i16, i16* %34, i64 24
  %94 = bitcast i16* %93 to <8 x i16>*
  %95 = load <8 x i16>, <8 x i16>* %94, align 2, !alias.scope !630
  %96 = zext <8 x i16> %95 to <8 x i32>
  %97 = mul nuw nsw <8 x i32> %29, %96
  %98 = getelementptr inbounds i16, i16* %34, i64 25
  %99 = bitcast i16* %98 to <8 x i16>*
  %100 = load <8 x i16>, <8 x i16>* %99, align 2, !alias.scope !630
  %101 = zext <8 x i16> %100 to <8 x i32>
  %102 = mul nuw nsw <8 x i32> %31, %101
  %103 = add nuw nsw <8 x i32> %97, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %104 = add nuw nsw <8 x i32> %103, %102
  %105 = lshr <8 x i32> %104, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %106 = trunc <8 x i32> %105 to <8 x i16>
  %107 = getelementptr inbounds i16, i16* %36, i64 24
  %108 = bitcast i16* %107 to <8 x i16>*
  store <8 x i16> %106, <8 x i16>* %108, align 2, !alias.scope !633, !noalias !630
  br label %139

109:                                              ; preds = %32, %109
  %110 = phi i64 [ %137, %109 ], [ 0, %32 ]
  %111 = phi i16* [ %128, %109 ], [ %34, %32 ]
  %112 = load i16, i16* %111, align 2
  %113 = zext i16 %112 to i32
  %114 = mul nuw nsw i32 %25, %113
  %115 = getelementptr inbounds i16, i16* %111, i64 1
  %116 = load i16, i16* %115, align 2
  %117 = zext i16 %116 to i32
  %118 = mul nuw nsw i32 %27, %117
  %119 = add nuw nsw i32 %114, 64
  %120 = add nuw nsw i32 %119, %118
  %121 = lshr i32 %120, 7
  %122 = trunc i32 %121 to i16
  %123 = getelementptr inbounds i16, i16* %36, i64 %110
  store i16 %122, i16* %123, align 2
  %124 = or i64 %110, 1
  %125 = load i16, i16* %115, align 2
  %126 = zext i16 %125 to i32
  %127 = mul nuw nsw i32 %25, %126
  %128 = getelementptr inbounds i16, i16* %111, i64 2
  %129 = load i16, i16* %128, align 2
  %130 = zext i16 %129 to i32
  %131 = mul nuw nsw i32 %27, %130
  %132 = add nuw nsw i32 %127, 64
  %133 = add nuw nsw i32 %132, %131
  %134 = lshr i32 %133, 7
  %135 = trunc i32 %134 to i16
  %136 = getelementptr inbounds i16, i16* %36, i64 %124
  store i16 %135, i16* %136, align 2
  %137 = add nuw nsw i64 %110, 2
  %138 = icmp eq i64 %137, 32
  br i1 %138, label %139, label %109, !llvm.loop !635

139:                                              ; preds = %109, %45
  %140 = phi i16* [ %46, %45 ], [ %128, %109 ]
  %141 = getelementptr inbounds i16, i16* %140, i64 %23
  %142 = getelementptr inbounds i16, i16* %36, i64 32
  %143 = add nuw nsw i32 %35, 1
  %144 = icmp eq i32 %143, 65
  %145 = add i64 %33, 1
  br i1 %144, label %146, label %32

146:                                              ; preds = %139
  %147 = getelementptr inbounds [2048 x i16], [2048 x i16]* %10, i64 0, i64 0
  %148 = sext i32 %3 to i64
  %149 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %148, i64 0
  %150 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %148, i64 1
  %151 = load i8, i8* %149, align 2
  %152 = zext i8 %151 to i32
  %153 = load i8, i8* %150, align 1
  %154 = zext i8 %153 to i32
  %155 = insertelement <8 x i32> undef, i32 %152, i32 0
  %156 = shufflevector <8 x i32> %155, <8 x i32> undef, <8 x i32> zeroinitializer
  %157 = insertelement <8 x i32> undef, i32 %154, i32 0
  %158 = shufflevector <8 x i32> %157, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %159

159:                                              ; preds = %268, %146
  %160 = phi i64 [ %273, %268 ], [ 0, %146 ]
  %161 = phi i32 [ %271, %268 ], [ 0, %146 ]
  %162 = phi i16* [ %269, %268 ], [ %15, %146 ]
  %163 = phi i16* [ %270, %268 ], [ %147, %146 ]
  %164 = shl nuw nsw i64 %160, 5
  %165 = add i64 %164, 32
  %166 = getelementptr [2048 x i16], [2048 x i16]* %10, i64 0, i64 %165
  %167 = getelementptr [2048 x i16], [2048 x i16]* %10, i64 0, i64 %164
  %168 = getelementptr i16, i16* %162, i64 64
  %169 = icmp ult i16* %167, %168
  %170 = icmp ult i16* %162, %166
  %171 = and i1 %169, %170
  br i1 %171, label %236, label %172

172:                                              ; preds = %159
  %173 = getelementptr i16, i16* %162, i64 32
  %174 = bitcast i16* %162 to <8 x i16>*
  %175 = load <8 x i16>, <8 x i16>* %174, align 2, !alias.scope !636
  %176 = zext <8 x i16> %175 to <8 x i32>
  %177 = mul nuw nsw <8 x i32> %156, %176
  %178 = getelementptr inbounds i16, i16* %162, i64 32
  %179 = bitcast i16* %178 to <8 x i16>*
  %180 = load <8 x i16>, <8 x i16>* %179, align 2, !alias.scope !636
  %181 = zext <8 x i16> %180 to <8 x i32>
  %182 = mul nuw nsw <8 x i32> %158, %181
  %183 = add nuw nsw <8 x i32> %177, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %184 = add nuw nsw <8 x i32> %183, %182
  %185 = lshr <8 x i32> %184, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %186 = trunc <8 x i32> %185 to <8 x i16>
  %187 = bitcast i16* %163 to <8 x i16>*
  store <8 x i16> %186, <8 x i16>* %187, align 2, !alias.scope !639, !noalias !636
  %188 = getelementptr i16, i16* %162, i64 8
  %189 = bitcast i16* %188 to <8 x i16>*
  %190 = load <8 x i16>, <8 x i16>* %189, align 2, !alias.scope !636
  %191 = zext <8 x i16> %190 to <8 x i32>
  %192 = mul nuw nsw <8 x i32> %156, %191
  %193 = getelementptr inbounds i16, i16* %162, i64 40
  %194 = bitcast i16* %193 to <8 x i16>*
  %195 = load <8 x i16>, <8 x i16>* %194, align 2, !alias.scope !636
  %196 = zext <8 x i16> %195 to <8 x i32>
  %197 = mul nuw nsw <8 x i32> %158, %196
  %198 = add nuw nsw <8 x i32> %192, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %199 = add nuw nsw <8 x i32> %198, %197
  %200 = lshr <8 x i32> %199, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %201 = trunc <8 x i32> %200 to <8 x i16>
  %202 = getelementptr inbounds i16, i16* %163, i64 8
  %203 = bitcast i16* %202 to <8 x i16>*
  store <8 x i16> %201, <8 x i16>* %203, align 2, !alias.scope !639, !noalias !636
  %204 = getelementptr i16, i16* %162, i64 16
  %205 = bitcast i16* %204 to <8 x i16>*
  %206 = load <8 x i16>, <8 x i16>* %205, align 2, !alias.scope !636
  %207 = zext <8 x i16> %206 to <8 x i32>
  %208 = mul nuw nsw <8 x i32> %156, %207
  %209 = getelementptr inbounds i16, i16* %162, i64 48
  %210 = bitcast i16* %209 to <8 x i16>*
  %211 = load <8 x i16>, <8 x i16>* %210, align 2, !alias.scope !636
  %212 = zext <8 x i16> %211 to <8 x i32>
  %213 = mul nuw nsw <8 x i32> %158, %212
  %214 = add nuw nsw <8 x i32> %208, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %215 = add nuw nsw <8 x i32> %214, %213
  %216 = lshr <8 x i32> %215, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %217 = trunc <8 x i32> %216 to <8 x i16>
  %218 = getelementptr inbounds i16, i16* %163, i64 16
  %219 = bitcast i16* %218 to <8 x i16>*
  store <8 x i16> %217, <8 x i16>* %219, align 2, !alias.scope !639, !noalias !636
  %220 = getelementptr i16, i16* %162, i64 24
  %221 = bitcast i16* %220 to <8 x i16>*
  %222 = load <8 x i16>, <8 x i16>* %221, align 2, !alias.scope !636
  %223 = zext <8 x i16> %222 to <8 x i32>
  %224 = mul nuw nsw <8 x i32> %156, %223
  %225 = getelementptr inbounds i16, i16* %162, i64 56
  %226 = bitcast i16* %225 to <8 x i16>*
  %227 = load <8 x i16>, <8 x i16>* %226, align 2, !alias.scope !636
  %228 = zext <8 x i16> %227 to <8 x i32>
  %229 = mul nuw nsw <8 x i32> %158, %228
  %230 = add nuw nsw <8 x i32> %224, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %231 = add nuw nsw <8 x i32> %230, %229
  %232 = lshr <8 x i32> %231, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %233 = trunc <8 x i32> %232 to <8 x i16>
  %234 = getelementptr inbounds i16, i16* %163, i64 24
  %235 = bitcast i16* %234 to <8 x i16>*
  store <8 x i16> %233, <8 x i16>* %235, align 2, !alias.scope !639, !noalias !636
  br label %268

236:                                              ; preds = %159, %236
  %237 = phi i64 [ %266, %236 ], [ 0, %159 ]
  %238 = phi i16* [ %265, %236 ], [ %162, %159 ]
  %239 = load i16, i16* %238, align 2
  %240 = zext i16 %239 to i32
  %241 = mul nuw nsw i32 %152, %240
  %242 = getelementptr inbounds i16, i16* %238, i64 32
  %243 = load i16, i16* %242, align 2
  %244 = zext i16 %243 to i32
  %245 = mul nuw nsw i32 %154, %244
  %246 = add nuw nsw i32 %241, 64
  %247 = add nuw nsw i32 %246, %245
  %248 = lshr i32 %247, 7
  %249 = trunc i32 %248 to i16
  %250 = getelementptr inbounds i16, i16* %163, i64 %237
  store i16 %249, i16* %250, align 2
  %251 = getelementptr inbounds i16, i16* %238, i64 1
  %252 = or i64 %237, 1
  %253 = load i16, i16* %251, align 2
  %254 = zext i16 %253 to i32
  %255 = mul nuw nsw i32 %152, %254
  %256 = getelementptr inbounds i16, i16* %238, i64 33
  %257 = load i16, i16* %256, align 2
  %258 = zext i16 %257 to i32
  %259 = mul nuw nsw i32 %154, %258
  %260 = add nuw nsw i32 %255, 64
  %261 = add nuw nsw i32 %260, %259
  %262 = lshr i32 %261, 7
  %263 = trunc i32 %262 to i16
  %264 = getelementptr inbounds i16, i16* %163, i64 %252
  store i16 %263, i16* %264, align 2
  %265 = getelementptr inbounds i16, i16* %238, i64 2
  %266 = add nuw nsw i64 %237, 2
  %267 = icmp eq i64 %266, 32
  br i1 %267, label %268, label %236, !llvm.loop !641

268:                                              ; preds = %236, %172
  %269 = phi i16* [ %173, %172 ], [ %265, %236 ]
  %270 = getelementptr inbounds i16, i16* %163, i64 32
  %271 = add nuw nsw i32 %161, 1
  %272 = icmp eq i32 %271, 64
  %273 = add i64 %160, 1
  br i1 %272, label %274, label %159

274:                                              ; preds = %268
  %275 = getelementptr inbounds [2048 x i16], [2048 x i16]* %11, i64 0, i64 0
  %276 = ptrtoint i8* %7 to i64
  %277 = shl i64 %276, 1
  %278 = inttoptr i64 %277 to i16*
  br label %279

279:                                              ; preds = %381, %274
  %280 = phi i64 [ %387, %381 ], [ 0, %274 ]
  %281 = phi i16* [ %382, %381 ], [ %275, %274 ]
  %282 = phi i32 [ %385, %381 ], [ 0, %274 ]
  %283 = phi i16* [ %383, %381 ], [ %278, %274 ]
  %284 = phi i16* [ %384, %381 ], [ %147, %274 ]
  %285 = shl nuw nsw i64 %280, 5
  %286 = getelementptr [2048 x i16], [2048 x i16]* %11, i64 0, i64 %285
  %287 = add i64 %285, 32
  %288 = getelementptr [2048 x i16], [2048 x i16]* %11, i64 0, i64 %287
  %289 = getelementptr [2048 x i16], [2048 x i16]* %10, i64 0, i64 %287
  %290 = getelementptr [2048 x i16], [2048 x i16]* %10, i64 0, i64 %285
  %291 = getelementptr i16, i16* %278, i64 %287
  %292 = getelementptr i16, i16* %278, i64 %285
  %293 = icmp ult i16* %286, %291
  %294 = icmp ult i16* %292, %288
  %295 = and i1 %293, %294
  %296 = icmp ult i16* %286, %289
  %297 = icmp ult i16* %290, %288
  %298 = and i1 %296, %297
  %299 = or i1 %295, %298
  br i1 %299, label %354, label %300

300:                                              ; preds = %279
  %301 = bitcast i16* %283 to <8 x i16>*
  %302 = load <8 x i16>, <8 x i16>* %301, align 2, !alias.scope !642
  %303 = zext <8 x i16> %302 to <8 x i32>
  %304 = bitcast i16* %284 to <8 x i16>*
  %305 = load <8 x i16>, <8 x i16>* %304, align 2, !alias.scope !645
  %306 = zext <8 x i16> %305 to <8 x i32>
  %307 = add nuw nsw <8 x i32> %303, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %308 = add nuw nsw <8 x i32> %307, %306
  %309 = lshr <8 x i32> %308, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %310 = trunc <8 x i32> %309 to <8 x i16>
  %311 = bitcast i16* %281 to <8 x i16>*
  store <8 x i16> %310, <8 x i16>* %311, align 2, !alias.scope !647, !noalias !649
  %312 = getelementptr inbounds i16, i16* %283, i64 8
  %313 = bitcast i16* %312 to <8 x i16>*
  %314 = load <8 x i16>, <8 x i16>* %313, align 2, !alias.scope !642
  %315 = zext <8 x i16> %314 to <8 x i32>
  %316 = getelementptr inbounds i16, i16* %284, i64 8
  %317 = bitcast i16* %316 to <8 x i16>*
  %318 = load <8 x i16>, <8 x i16>* %317, align 2, !alias.scope !645
  %319 = zext <8 x i16> %318 to <8 x i32>
  %320 = add nuw nsw <8 x i32> %315, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %321 = add nuw nsw <8 x i32> %320, %319
  %322 = lshr <8 x i32> %321, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %323 = trunc <8 x i32> %322 to <8 x i16>
  %324 = getelementptr inbounds i16, i16* %281, i64 8
  %325 = bitcast i16* %324 to <8 x i16>*
  store <8 x i16> %323, <8 x i16>* %325, align 2, !alias.scope !647, !noalias !649
  %326 = getelementptr inbounds i16, i16* %283, i64 16
  %327 = bitcast i16* %326 to <8 x i16>*
  %328 = load <8 x i16>, <8 x i16>* %327, align 2, !alias.scope !642
  %329 = zext <8 x i16> %328 to <8 x i32>
  %330 = getelementptr inbounds i16, i16* %284, i64 16
  %331 = bitcast i16* %330 to <8 x i16>*
  %332 = load <8 x i16>, <8 x i16>* %331, align 2, !alias.scope !645
  %333 = zext <8 x i16> %332 to <8 x i32>
  %334 = add nuw nsw <8 x i32> %329, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %335 = add nuw nsw <8 x i32> %334, %333
  %336 = lshr <8 x i32> %335, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %337 = trunc <8 x i32> %336 to <8 x i16>
  %338 = getelementptr inbounds i16, i16* %281, i64 16
  %339 = bitcast i16* %338 to <8 x i16>*
  store <8 x i16> %337, <8 x i16>* %339, align 2, !alias.scope !647, !noalias !649
  %340 = getelementptr inbounds i16, i16* %283, i64 24
  %341 = bitcast i16* %340 to <8 x i16>*
  %342 = load <8 x i16>, <8 x i16>* %341, align 2, !alias.scope !642
  %343 = zext <8 x i16> %342 to <8 x i32>
  %344 = getelementptr inbounds i16, i16* %284, i64 24
  %345 = bitcast i16* %344 to <8 x i16>*
  %346 = load <8 x i16>, <8 x i16>* %345, align 2, !alias.scope !645
  %347 = zext <8 x i16> %346 to <8 x i32>
  %348 = add nuw nsw <8 x i32> %343, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %349 = add nuw nsw <8 x i32> %348, %347
  %350 = lshr <8 x i32> %349, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %351 = trunc <8 x i32> %350 to <8 x i16>
  %352 = getelementptr inbounds i16, i16* %281, i64 24
  %353 = bitcast i16* %352 to <8 x i16>*
  store <8 x i16> %351, <8 x i16>* %353, align 2, !alias.scope !647, !noalias !649
  br label %381

354:                                              ; preds = %279, %354
  %355 = phi i64 [ %379, %354 ], [ 0, %279 ]
  %356 = getelementptr inbounds i16, i16* %283, i64 %355
  %357 = load i16, i16* %356, align 2
  %358 = zext i16 %357 to i32
  %359 = getelementptr inbounds i16, i16* %284, i64 %355
  %360 = load i16, i16* %359, align 2
  %361 = zext i16 %360 to i32
  %362 = add nuw nsw i32 %358, 1
  %363 = add nuw nsw i32 %362, %361
  %364 = lshr i32 %363, 1
  %365 = trunc i32 %364 to i16
  %366 = getelementptr inbounds i16, i16* %281, i64 %355
  store i16 %365, i16* %366, align 2
  %367 = or i64 %355, 1
  %368 = getelementptr inbounds i16, i16* %283, i64 %367
  %369 = load i16, i16* %368, align 2
  %370 = zext i16 %369 to i32
  %371 = getelementptr inbounds i16, i16* %284, i64 %367
  %372 = load i16, i16* %371, align 2
  %373 = zext i16 %372 to i32
  %374 = add nuw nsw i32 %370, 1
  %375 = add nuw nsw i32 %374, %373
  %376 = lshr i32 %375, 1
  %377 = trunc i32 %376 to i16
  %378 = getelementptr inbounds i16, i16* %281, i64 %367
  store i16 %377, i16* %378, align 2
  %379 = add nuw nsw i64 %355, 2
  %380 = icmp eq i64 %379, 32
  br i1 %380, label %381, label %354, !llvm.loop !650

381:                                              ; preds = %354, %300
  %382 = getelementptr inbounds i16, i16* %281, i64 32
  %383 = getelementptr inbounds i16, i16* %283, i64 32
  %384 = getelementptr inbounds i16, i16* %284, i64 32
  %385 = add nuw nsw i32 %282, 1
  %386 = icmp eq i32 %385, 64
  %387 = add i64 %280, 1
  br i1 %386, label %388, label %279

388:                                              ; preds = %381
  %389 = ptrtoint i8* %4 to i64
  %390 = shl i64 %389, 1
  %391 = inttoptr i64 %390 to i16*
  %392 = sext i32 %5 to i64
  br label %393

393:                                              ; preds = %430, %388
  %394 = phi i64 [ 0, %388 ], [ %427, %430 ]
  %395 = phi i64 [ 0, %388 ], [ %424, %430 ]
  %396 = phi i32 [ 0, %388 ], [ %433, %430 ]
  %397 = phi i16* [ %391, %388 ], [ %432, %430 ]
  %398 = phi i16* [ %275, %388 ], [ %431, %430 ]
  br label %399

399:                                              ; preds = %399, %393
  %400 = phi i64 [ %394, %393 ], [ %427, %399 ]
  %401 = phi i64 [ %395, %393 ], [ %424, %399 ]
  %402 = phi i64 [ 0, %393 ], [ %428, %399 ]
  %403 = getelementptr inbounds i16, i16* %398, i64 %402
  %404 = load i16, i16* %403, align 2
  %405 = zext i16 %404 to i32
  %406 = getelementptr inbounds i16, i16* %397, i64 %402
  %407 = load i16, i16* %406, align 2
  %408 = zext i16 %407 to i32
  %409 = sub nsw i32 %405, %408
  %410 = sext i32 %409 to i64
  %411 = add nsw i64 %401, %410
  %412 = mul nsw i32 %409, %409
  %413 = zext i32 %412 to i64
  %414 = add i64 %400, %413
  %415 = or i64 %402, 1
  %416 = getelementptr inbounds i16, i16* %398, i64 %415
  %417 = load i16, i16* %416, align 2
  %418 = zext i16 %417 to i32
  %419 = getelementptr inbounds i16, i16* %397, i64 %415
  %420 = load i16, i16* %419, align 2
  %421 = zext i16 %420 to i32
  %422 = sub nsw i32 %418, %421
  %423 = sext i32 %422 to i64
  %424 = add nsw i64 %411, %423
  %425 = mul nsw i32 %422, %422
  %426 = zext i32 %425 to i64
  %427 = add i64 %414, %426
  %428 = add nuw nsw i64 %402, 2
  %429 = icmp eq i64 %428, 32
  br i1 %429, label %430, label %399

430:                                              ; preds = %399
  %431 = getelementptr inbounds i16, i16* %398, i64 32
  %432 = getelementptr inbounds i16, i16* %397, i64 %392
  %433 = add nuw nsw i32 %396, 1
  %434 = icmp eq i32 %433, 64
  br i1 %434, label %435, label %393

435:                                              ; preds = %430
  %436 = trunc i64 %427 to i32
  store i32 %436, i32* %6, align 4
  %437 = shl i64 %424, 32
  %438 = ashr exact i64 %437, 32
  %439 = mul nsw i64 %438, %438
  %440 = lshr i64 %439, 11
  %441 = trunc i64 %440 to i32
  %442 = sub i32 %436, %441
  call void @llvm.lifetime.end.p0i8(i64 4096, i8* nonnull %14) #4
  call void @llvm.lifetime.end.p0i8(i64 4096, i8* nonnull %13) #4
  call void @llvm.lifetime.end.p0i8(i64 4160, i8* nonnull %12) #4
  ret i32 %442
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_highbd_10_sub_pixel_avg_variance32x64_c(i8*, i32, i32, i32, i8*, i32, i32* nocapture, i8*) local_unnamed_addr #2 {
  %9 = alloca [2080 x i16], align 16
  %10 = alloca [2048 x i16], align 16
  %11 = alloca [2048 x i16], align 16
  %12 = bitcast [2080 x i16]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4160, i8* nonnull %12) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %12, i8 -86, i64 4160, i1 false)
  %13 = bitcast [2048 x i16]* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4096, i8* nonnull %13) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %13, i8 -86, i64 4096, i1 false)
  %14 = bitcast [2048 x i16]* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4096, i8* nonnull %14) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %14, i8 -86, i64 4096, i1 false)
  %15 = getelementptr inbounds [2080 x i16], [2080 x i16]* %9, i64 0, i64 0
  %16 = sext i32 %2 to i64
  %17 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %16, i64 0
  %18 = ptrtoint i8* %0 to i64
  %19 = shl i64 %18, 1
  %20 = inttoptr i64 %19 to i16*
  %21 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %16, i64 1
  %22 = add i32 %1, -32
  %23 = zext i32 %22 to i64
  %24 = load i8, i8* %17, align 2
  %25 = zext i8 %24 to i32
  %26 = load i8, i8* %21, align 1
  %27 = zext i8 %26 to i32
  %28 = insertelement <8 x i32> undef, i32 %25, i32 0
  %29 = shufflevector <8 x i32> %28, <8 x i32> undef, <8 x i32> zeroinitializer
  %30 = insertelement <8 x i32> undef, i32 %27, i32 0
  %31 = shufflevector <8 x i32> %30, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %32

32:                                               ; preds = %139, %8
  %33 = phi i64 [ %145, %139 ], [ 0, %8 ]
  %34 = phi i16* [ %141, %139 ], [ %20, %8 ]
  %35 = phi i32 [ %143, %139 ], [ 0, %8 ]
  %36 = phi i16* [ %142, %139 ], [ %15, %8 ]
  %37 = shl nuw nsw i64 %33, 5
  %38 = add i64 %37, 32
  %39 = getelementptr [2080 x i16], [2080 x i16]* %9, i64 0, i64 %38
  %40 = getelementptr [2080 x i16], [2080 x i16]* %9, i64 0, i64 %37
  %41 = getelementptr i16, i16* %34, i64 33
  %42 = icmp ult i16* %40, %41
  %43 = icmp ult i16* %34, %39
  %44 = and i1 %42, %43
  br i1 %44, label %109, label %45

45:                                               ; preds = %32
  %46 = getelementptr i16, i16* %34, i64 32
  %47 = bitcast i16* %34 to <8 x i16>*
  %48 = load <8 x i16>, <8 x i16>* %47, align 2, !alias.scope !651
  %49 = zext <8 x i16> %48 to <8 x i32>
  %50 = mul nuw nsw <8 x i32> %29, %49
  %51 = getelementptr inbounds i16, i16* %34, i64 1
  %52 = bitcast i16* %51 to <8 x i16>*
  %53 = load <8 x i16>, <8 x i16>* %52, align 2, !alias.scope !651
  %54 = zext <8 x i16> %53 to <8 x i32>
  %55 = mul nuw nsw <8 x i32> %31, %54
  %56 = add nuw nsw <8 x i32> %50, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %57 = add nuw nsw <8 x i32> %56, %55
  %58 = lshr <8 x i32> %57, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %59 = trunc <8 x i32> %58 to <8 x i16>
  %60 = bitcast i16* %36 to <8 x i16>*
  store <8 x i16> %59, <8 x i16>* %60, align 2, !alias.scope !654, !noalias !651
  %61 = getelementptr i16, i16* %34, i64 8
  %62 = bitcast i16* %61 to <8 x i16>*
  %63 = load <8 x i16>, <8 x i16>* %62, align 2, !alias.scope !651
  %64 = zext <8 x i16> %63 to <8 x i32>
  %65 = mul nuw nsw <8 x i32> %29, %64
  %66 = getelementptr inbounds i16, i16* %34, i64 9
  %67 = bitcast i16* %66 to <8 x i16>*
  %68 = load <8 x i16>, <8 x i16>* %67, align 2, !alias.scope !651
  %69 = zext <8 x i16> %68 to <8 x i32>
  %70 = mul nuw nsw <8 x i32> %31, %69
  %71 = add nuw nsw <8 x i32> %65, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %72 = add nuw nsw <8 x i32> %71, %70
  %73 = lshr <8 x i32> %72, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %74 = trunc <8 x i32> %73 to <8 x i16>
  %75 = getelementptr inbounds i16, i16* %36, i64 8
  %76 = bitcast i16* %75 to <8 x i16>*
  store <8 x i16> %74, <8 x i16>* %76, align 2, !alias.scope !654, !noalias !651
  %77 = getelementptr i16, i16* %34, i64 16
  %78 = bitcast i16* %77 to <8 x i16>*
  %79 = load <8 x i16>, <8 x i16>* %78, align 2, !alias.scope !651
  %80 = zext <8 x i16> %79 to <8 x i32>
  %81 = mul nuw nsw <8 x i32> %29, %80
  %82 = getelementptr inbounds i16, i16* %34, i64 17
  %83 = bitcast i16* %82 to <8 x i16>*
  %84 = load <8 x i16>, <8 x i16>* %83, align 2, !alias.scope !651
  %85 = zext <8 x i16> %84 to <8 x i32>
  %86 = mul nuw nsw <8 x i32> %31, %85
  %87 = add nuw nsw <8 x i32> %81, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %88 = add nuw nsw <8 x i32> %87, %86
  %89 = lshr <8 x i32> %88, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %90 = trunc <8 x i32> %89 to <8 x i16>
  %91 = getelementptr inbounds i16, i16* %36, i64 16
  %92 = bitcast i16* %91 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %92, align 2, !alias.scope !654, !noalias !651
  %93 = getelementptr i16, i16* %34, i64 24
  %94 = bitcast i16* %93 to <8 x i16>*
  %95 = load <8 x i16>, <8 x i16>* %94, align 2, !alias.scope !651
  %96 = zext <8 x i16> %95 to <8 x i32>
  %97 = mul nuw nsw <8 x i32> %29, %96
  %98 = getelementptr inbounds i16, i16* %34, i64 25
  %99 = bitcast i16* %98 to <8 x i16>*
  %100 = load <8 x i16>, <8 x i16>* %99, align 2, !alias.scope !651
  %101 = zext <8 x i16> %100 to <8 x i32>
  %102 = mul nuw nsw <8 x i32> %31, %101
  %103 = add nuw nsw <8 x i32> %97, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %104 = add nuw nsw <8 x i32> %103, %102
  %105 = lshr <8 x i32> %104, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %106 = trunc <8 x i32> %105 to <8 x i16>
  %107 = getelementptr inbounds i16, i16* %36, i64 24
  %108 = bitcast i16* %107 to <8 x i16>*
  store <8 x i16> %106, <8 x i16>* %108, align 2, !alias.scope !654, !noalias !651
  br label %139

109:                                              ; preds = %32, %109
  %110 = phi i64 [ %137, %109 ], [ 0, %32 ]
  %111 = phi i16* [ %128, %109 ], [ %34, %32 ]
  %112 = load i16, i16* %111, align 2
  %113 = zext i16 %112 to i32
  %114 = mul nuw nsw i32 %25, %113
  %115 = getelementptr inbounds i16, i16* %111, i64 1
  %116 = load i16, i16* %115, align 2
  %117 = zext i16 %116 to i32
  %118 = mul nuw nsw i32 %27, %117
  %119 = add nuw nsw i32 %114, 64
  %120 = add nuw nsw i32 %119, %118
  %121 = lshr i32 %120, 7
  %122 = trunc i32 %121 to i16
  %123 = getelementptr inbounds i16, i16* %36, i64 %110
  store i16 %122, i16* %123, align 2
  %124 = or i64 %110, 1
  %125 = load i16, i16* %115, align 2
  %126 = zext i16 %125 to i32
  %127 = mul nuw nsw i32 %25, %126
  %128 = getelementptr inbounds i16, i16* %111, i64 2
  %129 = load i16, i16* %128, align 2
  %130 = zext i16 %129 to i32
  %131 = mul nuw nsw i32 %27, %130
  %132 = add nuw nsw i32 %127, 64
  %133 = add nuw nsw i32 %132, %131
  %134 = lshr i32 %133, 7
  %135 = trunc i32 %134 to i16
  %136 = getelementptr inbounds i16, i16* %36, i64 %124
  store i16 %135, i16* %136, align 2
  %137 = add nuw nsw i64 %110, 2
  %138 = icmp eq i64 %137, 32
  br i1 %138, label %139, label %109, !llvm.loop !656

139:                                              ; preds = %109, %45
  %140 = phi i16* [ %46, %45 ], [ %128, %109 ]
  %141 = getelementptr inbounds i16, i16* %140, i64 %23
  %142 = getelementptr inbounds i16, i16* %36, i64 32
  %143 = add nuw nsw i32 %35, 1
  %144 = icmp eq i32 %143, 65
  %145 = add i64 %33, 1
  br i1 %144, label %146, label %32

146:                                              ; preds = %139
  %147 = getelementptr inbounds [2048 x i16], [2048 x i16]* %10, i64 0, i64 0
  %148 = sext i32 %3 to i64
  %149 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %148, i64 0
  %150 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %148, i64 1
  %151 = load i8, i8* %149, align 2
  %152 = zext i8 %151 to i32
  %153 = load i8, i8* %150, align 1
  %154 = zext i8 %153 to i32
  %155 = insertelement <8 x i32> undef, i32 %152, i32 0
  %156 = shufflevector <8 x i32> %155, <8 x i32> undef, <8 x i32> zeroinitializer
  %157 = insertelement <8 x i32> undef, i32 %154, i32 0
  %158 = shufflevector <8 x i32> %157, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %159

159:                                              ; preds = %268, %146
  %160 = phi i64 [ %273, %268 ], [ 0, %146 ]
  %161 = phi i32 [ %271, %268 ], [ 0, %146 ]
  %162 = phi i16* [ %269, %268 ], [ %15, %146 ]
  %163 = phi i16* [ %270, %268 ], [ %147, %146 ]
  %164 = shl nuw nsw i64 %160, 5
  %165 = add i64 %164, 32
  %166 = getelementptr [2048 x i16], [2048 x i16]* %10, i64 0, i64 %165
  %167 = getelementptr [2048 x i16], [2048 x i16]* %10, i64 0, i64 %164
  %168 = getelementptr i16, i16* %162, i64 64
  %169 = icmp ult i16* %167, %168
  %170 = icmp ult i16* %162, %166
  %171 = and i1 %169, %170
  br i1 %171, label %236, label %172

172:                                              ; preds = %159
  %173 = getelementptr i16, i16* %162, i64 32
  %174 = bitcast i16* %162 to <8 x i16>*
  %175 = load <8 x i16>, <8 x i16>* %174, align 2, !alias.scope !657
  %176 = zext <8 x i16> %175 to <8 x i32>
  %177 = mul nuw nsw <8 x i32> %156, %176
  %178 = getelementptr inbounds i16, i16* %162, i64 32
  %179 = bitcast i16* %178 to <8 x i16>*
  %180 = load <8 x i16>, <8 x i16>* %179, align 2, !alias.scope !657
  %181 = zext <8 x i16> %180 to <8 x i32>
  %182 = mul nuw nsw <8 x i32> %158, %181
  %183 = add nuw nsw <8 x i32> %177, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %184 = add nuw nsw <8 x i32> %183, %182
  %185 = lshr <8 x i32> %184, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %186 = trunc <8 x i32> %185 to <8 x i16>
  %187 = bitcast i16* %163 to <8 x i16>*
  store <8 x i16> %186, <8 x i16>* %187, align 2, !alias.scope !660, !noalias !657
  %188 = getelementptr i16, i16* %162, i64 8
  %189 = bitcast i16* %188 to <8 x i16>*
  %190 = load <8 x i16>, <8 x i16>* %189, align 2, !alias.scope !657
  %191 = zext <8 x i16> %190 to <8 x i32>
  %192 = mul nuw nsw <8 x i32> %156, %191
  %193 = getelementptr inbounds i16, i16* %162, i64 40
  %194 = bitcast i16* %193 to <8 x i16>*
  %195 = load <8 x i16>, <8 x i16>* %194, align 2, !alias.scope !657
  %196 = zext <8 x i16> %195 to <8 x i32>
  %197 = mul nuw nsw <8 x i32> %158, %196
  %198 = add nuw nsw <8 x i32> %192, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %199 = add nuw nsw <8 x i32> %198, %197
  %200 = lshr <8 x i32> %199, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %201 = trunc <8 x i32> %200 to <8 x i16>
  %202 = getelementptr inbounds i16, i16* %163, i64 8
  %203 = bitcast i16* %202 to <8 x i16>*
  store <8 x i16> %201, <8 x i16>* %203, align 2, !alias.scope !660, !noalias !657
  %204 = getelementptr i16, i16* %162, i64 16
  %205 = bitcast i16* %204 to <8 x i16>*
  %206 = load <8 x i16>, <8 x i16>* %205, align 2, !alias.scope !657
  %207 = zext <8 x i16> %206 to <8 x i32>
  %208 = mul nuw nsw <8 x i32> %156, %207
  %209 = getelementptr inbounds i16, i16* %162, i64 48
  %210 = bitcast i16* %209 to <8 x i16>*
  %211 = load <8 x i16>, <8 x i16>* %210, align 2, !alias.scope !657
  %212 = zext <8 x i16> %211 to <8 x i32>
  %213 = mul nuw nsw <8 x i32> %158, %212
  %214 = add nuw nsw <8 x i32> %208, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %215 = add nuw nsw <8 x i32> %214, %213
  %216 = lshr <8 x i32> %215, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %217 = trunc <8 x i32> %216 to <8 x i16>
  %218 = getelementptr inbounds i16, i16* %163, i64 16
  %219 = bitcast i16* %218 to <8 x i16>*
  store <8 x i16> %217, <8 x i16>* %219, align 2, !alias.scope !660, !noalias !657
  %220 = getelementptr i16, i16* %162, i64 24
  %221 = bitcast i16* %220 to <8 x i16>*
  %222 = load <8 x i16>, <8 x i16>* %221, align 2, !alias.scope !657
  %223 = zext <8 x i16> %222 to <8 x i32>
  %224 = mul nuw nsw <8 x i32> %156, %223
  %225 = getelementptr inbounds i16, i16* %162, i64 56
  %226 = bitcast i16* %225 to <8 x i16>*
  %227 = load <8 x i16>, <8 x i16>* %226, align 2, !alias.scope !657
  %228 = zext <8 x i16> %227 to <8 x i32>
  %229 = mul nuw nsw <8 x i32> %158, %228
  %230 = add nuw nsw <8 x i32> %224, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %231 = add nuw nsw <8 x i32> %230, %229
  %232 = lshr <8 x i32> %231, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %233 = trunc <8 x i32> %232 to <8 x i16>
  %234 = getelementptr inbounds i16, i16* %163, i64 24
  %235 = bitcast i16* %234 to <8 x i16>*
  store <8 x i16> %233, <8 x i16>* %235, align 2, !alias.scope !660, !noalias !657
  br label %268

236:                                              ; preds = %159, %236
  %237 = phi i64 [ %266, %236 ], [ 0, %159 ]
  %238 = phi i16* [ %265, %236 ], [ %162, %159 ]
  %239 = load i16, i16* %238, align 2
  %240 = zext i16 %239 to i32
  %241 = mul nuw nsw i32 %152, %240
  %242 = getelementptr inbounds i16, i16* %238, i64 32
  %243 = load i16, i16* %242, align 2
  %244 = zext i16 %243 to i32
  %245 = mul nuw nsw i32 %154, %244
  %246 = add nuw nsw i32 %241, 64
  %247 = add nuw nsw i32 %246, %245
  %248 = lshr i32 %247, 7
  %249 = trunc i32 %248 to i16
  %250 = getelementptr inbounds i16, i16* %163, i64 %237
  store i16 %249, i16* %250, align 2
  %251 = getelementptr inbounds i16, i16* %238, i64 1
  %252 = or i64 %237, 1
  %253 = load i16, i16* %251, align 2
  %254 = zext i16 %253 to i32
  %255 = mul nuw nsw i32 %152, %254
  %256 = getelementptr inbounds i16, i16* %238, i64 33
  %257 = load i16, i16* %256, align 2
  %258 = zext i16 %257 to i32
  %259 = mul nuw nsw i32 %154, %258
  %260 = add nuw nsw i32 %255, 64
  %261 = add nuw nsw i32 %260, %259
  %262 = lshr i32 %261, 7
  %263 = trunc i32 %262 to i16
  %264 = getelementptr inbounds i16, i16* %163, i64 %252
  store i16 %263, i16* %264, align 2
  %265 = getelementptr inbounds i16, i16* %238, i64 2
  %266 = add nuw nsw i64 %237, 2
  %267 = icmp eq i64 %266, 32
  br i1 %267, label %268, label %236, !llvm.loop !662

268:                                              ; preds = %236, %172
  %269 = phi i16* [ %173, %172 ], [ %265, %236 ]
  %270 = getelementptr inbounds i16, i16* %163, i64 32
  %271 = add nuw nsw i32 %161, 1
  %272 = icmp eq i32 %271, 64
  %273 = add i64 %160, 1
  br i1 %272, label %274, label %159

274:                                              ; preds = %268
  %275 = getelementptr inbounds [2048 x i16], [2048 x i16]* %11, i64 0, i64 0
  %276 = ptrtoint i8* %7 to i64
  %277 = shl i64 %276, 1
  %278 = inttoptr i64 %277 to i16*
  br label %279

279:                                              ; preds = %381, %274
  %280 = phi i64 [ %387, %381 ], [ 0, %274 ]
  %281 = phi i16* [ %382, %381 ], [ %275, %274 ]
  %282 = phi i32 [ %385, %381 ], [ 0, %274 ]
  %283 = phi i16* [ %383, %381 ], [ %278, %274 ]
  %284 = phi i16* [ %384, %381 ], [ %147, %274 ]
  %285 = shl nuw nsw i64 %280, 5
  %286 = getelementptr [2048 x i16], [2048 x i16]* %11, i64 0, i64 %285
  %287 = add i64 %285, 32
  %288 = getelementptr [2048 x i16], [2048 x i16]* %11, i64 0, i64 %287
  %289 = getelementptr [2048 x i16], [2048 x i16]* %10, i64 0, i64 %287
  %290 = getelementptr [2048 x i16], [2048 x i16]* %10, i64 0, i64 %285
  %291 = getelementptr i16, i16* %278, i64 %287
  %292 = getelementptr i16, i16* %278, i64 %285
  %293 = icmp ult i16* %286, %291
  %294 = icmp ult i16* %292, %288
  %295 = and i1 %293, %294
  %296 = icmp ult i16* %286, %289
  %297 = icmp ult i16* %290, %288
  %298 = and i1 %296, %297
  %299 = or i1 %295, %298
  br i1 %299, label %354, label %300

300:                                              ; preds = %279
  %301 = bitcast i16* %283 to <8 x i16>*
  %302 = load <8 x i16>, <8 x i16>* %301, align 2, !alias.scope !663
  %303 = zext <8 x i16> %302 to <8 x i32>
  %304 = bitcast i16* %284 to <8 x i16>*
  %305 = load <8 x i16>, <8 x i16>* %304, align 2, !alias.scope !666
  %306 = zext <8 x i16> %305 to <8 x i32>
  %307 = add nuw nsw <8 x i32> %303, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %308 = add nuw nsw <8 x i32> %307, %306
  %309 = lshr <8 x i32> %308, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %310 = trunc <8 x i32> %309 to <8 x i16>
  %311 = bitcast i16* %281 to <8 x i16>*
  store <8 x i16> %310, <8 x i16>* %311, align 2, !alias.scope !668, !noalias !670
  %312 = getelementptr inbounds i16, i16* %283, i64 8
  %313 = bitcast i16* %312 to <8 x i16>*
  %314 = load <8 x i16>, <8 x i16>* %313, align 2, !alias.scope !663
  %315 = zext <8 x i16> %314 to <8 x i32>
  %316 = getelementptr inbounds i16, i16* %284, i64 8
  %317 = bitcast i16* %316 to <8 x i16>*
  %318 = load <8 x i16>, <8 x i16>* %317, align 2, !alias.scope !666
  %319 = zext <8 x i16> %318 to <8 x i32>
  %320 = add nuw nsw <8 x i32> %315, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %321 = add nuw nsw <8 x i32> %320, %319
  %322 = lshr <8 x i32> %321, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %323 = trunc <8 x i32> %322 to <8 x i16>
  %324 = getelementptr inbounds i16, i16* %281, i64 8
  %325 = bitcast i16* %324 to <8 x i16>*
  store <8 x i16> %323, <8 x i16>* %325, align 2, !alias.scope !668, !noalias !670
  %326 = getelementptr inbounds i16, i16* %283, i64 16
  %327 = bitcast i16* %326 to <8 x i16>*
  %328 = load <8 x i16>, <8 x i16>* %327, align 2, !alias.scope !663
  %329 = zext <8 x i16> %328 to <8 x i32>
  %330 = getelementptr inbounds i16, i16* %284, i64 16
  %331 = bitcast i16* %330 to <8 x i16>*
  %332 = load <8 x i16>, <8 x i16>* %331, align 2, !alias.scope !666
  %333 = zext <8 x i16> %332 to <8 x i32>
  %334 = add nuw nsw <8 x i32> %329, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %335 = add nuw nsw <8 x i32> %334, %333
  %336 = lshr <8 x i32> %335, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %337 = trunc <8 x i32> %336 to <8 x i16>
  %338 = getelementptr inbounds i16, i16* %281, i64 16
  %339 = bitcast i16* %338 to <8 x i16>*
  store <8 x i16> %337, <8 x i16>* %339, align 2, !alias.scope !668, !noalias !670
  %340 = getelementptr inbounds i16, i16* %283, i64 24
  %341 = bitcast i16* %340 to <8 x i16>*
  %342 = load <8 x i16>, <8 x i16>* %341, align 2, !alias.scope !663
  %343 = zext <8 x i16> %342 to <8 x i32>
  %344 = getelementptr inbounds i16, i16* %284, i64 24
  %345 = bitcast i16* %344 to <8 x i16>*
  %346 = load <8 x i16>, <8 x i16>* %345, align 2, !alias.scope !666
  %347 = zext <8 x i16> %346 to <8 x i32>
  %348 = add nuw nsw <8 x i32> %343, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %349 = add nuw nsw <8 x i32> %348, %347
  %350 = lshr <8 x i32> %349, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %351 = trunc <8 x i32> %350 to <8 x i16>
  %352 = getelementptr inbounds i16, i16* %281, i64 24
  %353 = bitcast i16* %352 to <8 x i16>*
  store <8 x i16> %351, <8 x i16>* %353, align 2, !alias.scope !668, !noalias !670
  br label %381

354:                                              ; preds = %279, %354
  %355 = phi i64 [ %379, %354 ], [ 0, %279 ]
  %356 = getelementptr inbounds i16, i16* %283, i64 %355
  %357 = load i16, i16* %356, align 2
  %358 = zext i16 %357 to i32
  %359 = getelementptr inbounds i16, i16* %284, i64 %355
  %360 = load i16, i16* %359, align 2
  %361 = zext i16 %360 to i32
  %362 = add nuw nsw i32 %358, 1
  %363 = add nuw nsw i32 %362, %361
  %364 = lshr i32 %363, 1
  %365 = trunc i32 %364 to i16
  %366 = getelementptr inbounds i16, i16* %281, i64 %355
  store i16 %365, i16* %366, align 2
  %367 = or i64 %355, 1
  %368 = getelementptr inbounds i16, i16* %283, i64 %367
  %369 = load i16, i16* %368, align 2
  %370 = zext i16 %369 to i32
  %371 = getelementptr inbounds i16, i16* %284, i64 %367
  %372 = load i16, i16* %371, align 2
  %373 = zext i16 %372 to i32
  %374 = add nuw nsw i32 %370, 1
  %375 = add nuw nsw i32 %374, %373
  %376 = lshr i32 %375, 1
  %377 = trunc i32 %376 to i16
  %378 = getelementptr inbounds i16, i16* %281, i64 %367
  store i16 %377, i16* %378, align 2
  %379 = add nuw nsw i64 %355, 2
  %380 = icmp eq i64 %379, 32
  br i1 %380, label %381, label %354, !llvm.loop !671

381:                                              ; preds = %354, %300
  %382 = getelementptr inbounds i16, i16* %281, i64 32
  %383 = getelementptr inbounds i16, i16* %283, i64 32
  %384 = getelementptr inbounds i16, i16* %284, i64 32
  %385 = add nuw nsw i32 %282, 1
  %386 = icmp eq i32 %385, 64
  %387 = add i64 %280, 1
  br i1 %386, label %388, label %279

388:                                              ; preds = %381
  %389 = ptrtoint i8* %4 to i64
  %390 = shl i64 %389, 1
  %391 = inttoptr i64 %390 to i16*
  %392 = sext i32 %5 to i64
  br label %393

393:                                              ; preds = %430, %388
  %394 = phi i64 [ 0, %388 ], [ %427, %430 ]
  %395 = phi i64 [ 0, %388 ], [ %424, %430 ]
  %396 = phi i32 [ 0, %388 ], [ %433, %430 ]
  %397 = phi i16* [ %391, %388 ], [ %432, %430 ]
  %398 = phi i16* [ %275, %388 ], [ %431, %430 ]
  br label %399

399:                                              ; preds = %399, %393
  %400 = phi i64 [ %394, %393 ], [ %427, %399 ]
  %401 = phi i64 [ %395, %393 ], [ %424, %399 ]
  %402 = phi i64 [ 0, %393 ], [ %428, %399 ]
  %403 = getelementptr inbounds i16, i16* %398, i64 %402
  %404 = load i16, i16* %403, align 2
  %405 = zext i16 %404 to i32
  %406 = getelementptr inbounds i16, i16* %397, i64 %402
  %407 = load i16, i16* %406, align 2
  %408 = zext i16 %407 to i32
  %409 = sub nsw i32 %405, %408
  %410 = sext i32 %409 to i64
  %411 = add nsw i64 %401, %410
  %412 = mul nsw i32 %409, %409
  %413 = zext i32 %412 to i64
  %414 = add i64 %400, %413
  %415 = or i64 %402, 1
  %416 = getelementptr inbounds i16, i16* %398, i64 %415
  %417 = load i16, i16* %416, align 2
  %418 = zext i16 %417 to i32
  %419 = getelementptr inbounds i16, i16* %397, i64 %415
  %420 = load i16, i16* %419, align 2
  %421 = zext i16 %420 to i32
  %422 = sub nsw i32 %418, %421
  %423 = sext i32 %422 to i64
  %424 = add nsw i64 %411, %423
  %425 = mul nsw i32 %422, %422
  %426 = zext i32 %425 to i64
  %427 = add i64 %414, %426
  %428 = add nuw nsw i64 %402, 2
  %429 = icmp eq i64 %428, 32
  br i1 %429, label %430, label %399

430:                                              ; preds = %399
  %431 = getelementptr inbounds i16, i16* %398, i64 32
  %432 = getelementptr inbounds i16, i16* %397, i64 %392
  %433 = add nuw nsw i32 %396, 1
  %434 = icmp eq i32 %433, 64
  br i1 %434, label %435, label %393

435:                                              ; preds = %430
  %436 = add i64 %427, 8
  %437 = lshr i64 %436, 4
  %438 = trunc i64 %437 to i32
  store i32 %438, i32* %6, align 4
  %439 = and i64 %437, 4294967295
  %440 = shl i64 %424, 30
  %441 = add i64 %440, 2147483648
  %442 = ashr i64 %441, 32
  %443 = mul nsw i64 %442, %442
  %444 = lshr i64 %443, 11
  %445 = sub nsw i64 %439, %444
  %446 = icmp sgt i64 %445, -1
  %447 = trunc i64 %445 to i32
  %448 = select i1 %446, i32 %447, i32 0
  call void @llvm.lifetime.end.p0i8(i64 4096, i8* nonnull %14) #4
  call void @llvm.lifetime.end.p0i8(i64 4096, i8* nonnull %13) #4
  call void @llvm.lifetime.end.p0i8(i64 4160, i8* nonnull %12) #4
  ret i32 %448
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_highbd_12_sub_pixel_avg_variance32x64_c(i8*, i32, i32, i32, i8*, i32, i32* nocapture, i8*) local_unnamed_addr #2 {
  %9 = alloca [2080 x i16], align 16
  %10 = alloca [2048 x i16], align 16
  %11 = alloca [2048 x i16], align 16
  %12 = bitcast [2080 x i16]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4160, i8* nonnull %12) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %12, i8 -86, i64 4160, i1 false)
  %13 = bitcast [2048 x i16]* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4096, i8* nonnull %13) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %13, i8 -86, i64 4096, i1 false)
  %14 = bitcast [2048 x i16]* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4096, i8* nonnull %14) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %14, i8 -86, i64 4096, i1 false)
  %15 = getelementptr inbounds [2080 x i16], [2080 x i16]* %9, i64 0, i64 0
  %16 = sext i32 %2 to i64
  %17 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %16, i64 0
  %18 = ptrtoint i8* %0 to i64
  %19 = shl i64 %18, 1
  %20 = inttoptr i64 %19 to i16*
  %21 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %16, i64 1
  %22 = add i32 %1, -32
  %23 = zext i32 %22 to i64
  %24 = load i8, i8* %17, align 2
  %25 = zext i8 %24 to i32
  %26 = load i8, i8* %21, align 1
  %27 = zext i8 %26 to i32
  %28 = insertelement <8 x i32> undef, i32 %25, i32 0
  %29 = shufflevector <8 x i32> %28, <8 x i32> undef, <8 x i32> zeroinitializer
  %30 = insertelement <8 x i32> undef, i32 %27, i32 0
  %31 = shufflevector <8 x i32> %30, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %32

32:                                               ; preds = %139, %8
  %33 = phi i64 [ %145, %139 ], [ 0, %8 ]
  %34 = phi i16* [ %141, %139 ], [ %20, %8 ]
  %35 = phi i32 [ %143, %139 ], [ 0, %8 ]
  %36 = phi i16* [ %142, %139 ], [ %15, %8 ]
  %37 = shl nuw nsw i64 %33, 5
  %38 = add i64 %37, 32
  %39 = getelementptr [2080 x i16], [2080 x i16]* %9, i64 0, i64 %38
  %40 = getelementptr [2080 x i16], [2080 x i16]* %9, i64 0, i64 %37
  %41 = getelementptr i16, i16* %34, i64 33
  %42 = icmp ult i16* %40, %41
  %43 = icmp ult i16* %34, %39
  %44 = and i1 %42, %43
  br i1 %44, label %109, label %45

45:                                               ; preds = %32
  %46 = getelementptr i16, i16* %34, i64 32
  %47 = bitcast i16* %34 to <8 x i16>*
  %48 = load <8 x i16>, <8 x i16>* %47, align 2, !alias.scope !672
  %49 = zext <8 x i16> %48 to <8 x i32>
  %50 = mul nuw nsw <8 x i32> %29, %49
  %51 = getelementptr inbounds i16, i16* %34, i64 1
  %52 = bitcast i16* %51 to <8 x i16>*
  %53 = load <8 x i16>, <8 x i16>* %52, align 2, !alias.scope !672
  %54 = zext <8 x i16> %53 to <8 x i32>
  %55 = mul nuw nsw <8 x i32> %31, %54
  %56 = add nuw nsw <8 x i32> %50, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %57 = add nuw nsw <8 x i32> %56, %55
  %58 = lshr <8 x i32> %57, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %59 = trunc <8 x i32> %58 to <8 x i16>
  %60 = bitcast i16* %36 to <8 x i16>*
  store <8 x i16> %59, <8 x i16>* %60, align 2, !alias.scope !675, !noalias !672
  %61 = getelementptr i16, i16* %34, i64 8
  %62 = bitcast i16* %61 to <8 x i16>*
  %63 = load <8 x i16>, <8 x i16>* %62, align 2, !alias.scope !672
  %64 = zext <8 x i16> %63 to <8 x i32>
  %65 = mul nuw nsw <8 x i32> %29, %64
  %66 = getelementptr inbounds i16, i16* %34, i64 9
  %67 = bitcast i16* %66 to <8 x i16>*
  %68 = load <8 x i16>, <8 x i16>* %67, align 2, !alias.scope !672
  %69 = zext <8 x i16> %68 to <8 x i32>
  %70 = mul nuw nsw <8 x i32> %31, %69
  %71 = add nuw nsw <8 x i32> %65, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %72 = add nuw nsw <8 x i32> %71, %70
  %73 = lshr <8 x i32> %72, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %74 = trunc <8 x i32> %73 to <8 x i16>
  %75 = getelementptr inbounds i16, i16* %36, i64 8
  %76 = bitcast i16* %75 to <8 x i16>*
  store <8 x i16> %74, <8 x i16>* %76, align 2, !alias.scope !675, !noalias !672
  %77 = getelementptr i16, i16* %34, i64 16
  %78 = bitcast i16* %77 to <8 x i16>*
  %79 = load <8 x i16>, <8 x i16>* %78, align 2, !alias.scope !672
  %80 = zext <8 x i16> %79 to <8 x i32>
  %81 = mul nuw nsw <8 x i32> %29, %80
  %82 = getelementptr inbounds i16, i16* %34, i64 17
  %83 = bitcast i16* %82 to <8 x i16>*
  %84 = load <8 x i16>, <8 x i16>* %83, align 2, !alias.scope !672
  %85 = zext <8 x i16> %84 to <8 x i32>
  %86 = mul nuw nsw <8 x i32> %31, %85
  %87 = add nuw nsw <8 x i32> %81, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %88 = add nuw nsw <8 x i32> %87, %86
  %89 = lshr <8 x i32> %88, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %90 = trunc <8 x i32> %89 to <8 x i16>
  %91 = getelementptr inbounds i16, i16* %36, i64 16
  %92 = bitcast i16* %91 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %92, align 2, !alias.scope !675, !noalias !672
  %93 = getelementptr i16, i16* %34, i64 24
  %94 = bitcast i16* %93 to <8 x i16>*
  %95 = load <8 x i16>, <8 x i16>* %94, align 2, !alias.scope !672
  %96 = zext <8 x i16> %95 to <8 x i32>
  %97 = mul nuw nsw <8 x i32> %29, %96
  %98 = getelementptr inbounds i16, i16* %34, i64 25
  %99 = bitcast i16* %98 to <8 x i16>*
  %100 = load <8 x i16>, <8 x i16>* %99, align 2, !alias.scope !672
  %101 = zext <8 x i16> %100 to <8 x i32>
  %102 = mul nuw nsw <8 x i32> %31, %101
  %103 = add nuw nsw <8 x i32> %97, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %104 = add nuw nsw <8 x i32> %103, %102
  %105 = lshr <8 x i32> %104, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %106 = trunc <8 x i32> %105 to <8 x i16>
  %107 = getelementptr inbounds i16, i16* %36, i64 24
  %108 = bitcast i16* %107 to <8 x i16>*
  store <8 x i16> %106, <8 x i16>* %108, align 2, !alias.scope !675, !noalias !672
  br label %139

109:                                              ; preds = %32, %109
  %110 = phi i64 [ %137, %109 ], [ 0, %32 ]
  %111 = phi i16* [ %128, %109 ], [ %34, %32 ]
  %112 = load i16, i16* %111, align 2
  %113 = zext i16 %112 to i32
  %114 = mul nuw nsw i32 %25, %113
  %115 = getelementptr inbounds i16, i16* %111, i64 1
  %116 = load i16, i16* %115, align 2
  %117 = zext i16 %116 to i32
  %118 = mul nuw nsw i32 %27, %117
  %119 = add nuw nsw i32 %114, 64
  %120 = add nuw nsw i32 %119, %118
  %121 = lshr i32 %120, 7
  %122 = trunc i32 %121 to i16
  %123 = getelementptr inbounds i16, i16* %36, i64 %110
  store i16 %122, i16* %123, align 2
  %124 = or i64 %110, 1
  %125 = load i16, i16* %115, align 2
  %126 = zext i16 %125 to i32
  %127 = mul nuw nsw i32 %25, %126
  %128 = getelementptr inbounds i16, i16* %111, i64 2
  %129 = load i16, i16* %128, align 2
  %130 = zext i16 %129 to i32
  %131 = mul nuw nsw i32 %27, %130
  %132 = add nuw nsw i32 %127, 64
  %133 = add nuw nsw i32 %132, %131
  %134 = lshr i32 %133, 7
  %135 = trunc i32 %134 to i16
  %136 = getelementptr inbounds i16, i16* %36, i64 %124
  store i16 %135, i16* %136, align 2
  %137 = add nuw nsw i64 %110, 2
  %138 = icmp eq i64 %137, 32
  br i1 %138, label %139, label %109, !llvm.loop !677

139:                                              ; preds = %109, %45
  %140 = phi i16* [ %46, %45 ], [ %128, %109 ]
  %141 = getelementptr inbounds i16, i16* %140, i64 %23
  %142 = getelementptr inbounds i16, i16* %36, i64 32
  %143 = add nuw nsw i32 %35, 1
  %144 = icmp eq i32 %143, 65
  %145 = add i64 %33, 1
  br i1 %144, label %146, label %32

146:                                              ; preds = %139
  %147 = getelementptr inbounds [2048 x i16], [2048 x i16]* %10, i64 0, i64 0
  %148 = sext i32 %3 to i64
  %149 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %148, i64 0
  %150 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %148, i64 1
  %151 = load i8, i8* %149, align 2
  %152 = zext i8 %151 to i32
  %153 = load i8, i8* %150, align 1
  %154 = zext i8 %153 to i32
  %155 = insertelement <8 x i32> undef, i32 %152, i32 0
  %156 = shufflevector <8 x i32> %155, <8 x i32> undef, <8 x i32> zeroinitializer
  %157 = insertelement <8 x i32> undef, i32 %154, i32 0
  %158 = shufflevector <8 x i32> %157, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %159

159:                                              ; preds = %268, %146
  %160 = phi i64 [ %273, %268 ], [ 0, %146 ]
  %161 = phi i32 [ %271, %268 ], [ 0, %146 ]
  %162 = phi i16* [ %269, %268 ], [ %15, %146 ]
  %163 = phi i16* [ %270, %268 ], [ %147, %146 ]
  %164 = shl nuw nsw i64 %160, 5
  %165 = add i64 %164, 32
  %166 = getelementptr [2048 x i16], [2048 x i16]* %10, i64 0, i64 %165
  %167 = getelementptr [2048 x i16], [2048 x i16]* %10, i64 0, i64 %164
  %168 = getelementptr i16, i16* %162, i64 64
  %169 = icmp ult i16* %167, %168
  %170 = icmp ult i16* %162, %166
  %171 = and i1 %169, %170
  br i1 %171, label %236, label %172

172:                                              ; preds = %159
  %173 = getelementptr i16, i16* %162, i64 32
  %174 = bitcast i16* %162 to <8 x i16>*
  %175 = load <8 x i16>, <8 x i16>* %174, align 2, !alias.scope !678
  %176 = zext <8 x i16> %175 to <8 x i32>
  %177 = mul nuw nsw <8 x i32> %156, %176
  %178 = getelementptr inbounds i16, i16* %162, i64 32
  %179 = bitcast i16* %178 to <8 x i16>*
  %180 = load <8 x i16>, <8 x i16>* %179, align 2, !alias.scope !678
  %181 = zext <8 x i16> %180 to <8 x i32>
  %182 = mul nuw nsw <8 x i32> %158, %181
  %183 = add nuw nsw <8 x i32> %177, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %184 = add nuw nsw <8 x i32> %183, %182
  %185 = lshr <8 x i32> %184, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %186 = trunc <8 x i32> %185 to <8 x i16>
  %187 = bitcast i16* %163 to <8 x i16>*
  store <8 x i16> %186, <8 x i16>* %187, align 2, !alias.scope !681, !noalias !678
  %188 = getelementptr i16, i16* %162, i64 8
  %189 = bitcast i16* %188 to <8 x i16>*
  %190 = load <8 x i16>, <8 x i16>* %189, align 2, !alias.scope !678
  %191 = zext <8 x i16> %190 to <8 x i32>
  %192 = mul nuw nsw <8 x i32> %156, %191
  %193 = getelementptr inbounds i16, i16* %162, i64 40
  %194 = bitcast i16* %193 to <8 x i16>*
  %195 = load <8 x i16>, <8 x i16>* %194, align 2, !alias.scope !678
  %196 = zext <8 x i16> %195 to <8 x i32>
  %197 = mul nuw nsw <8 x i32> %158, %196
  %198 = add nuw nsw <8 x i32> %192, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %199 = add nuw nsw <8 x i32> %198, %197
  %200 = lshr <8 x i32> %199, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %201 = trunc <8 x i32> %200 to <8 x i16>
  %202 = getelementptr inbounds i16, i16* %163, i64 8
  %203 = bitcast i16* %202 to <8 x i16>*
  store <8 x i16> %201, <8 x i16>* %203, align 2, !alias.scope !681, !noalias !678
  %204 = getelementptr i16, i16* %162, i64 16
  %205 = bitcast i16* %204 to <8 x i16>*
  %206 = load <8 x i16>, <8 x i16>* %205, align 2, !alias.scope !678
  %207 = zext <8 x i16> %206 to <8 x i32>
  %208 = mul nuw nsw <8 x i32> %156, %207
  %209 = getelementptr inbounds i16, i16* %162, i64 48
  %210 = bitcast i16* %209 to <8 x i16>*
  %211 = load <8 x i16>, <8 x i16>* %210, align 2, !alias.scope !678
  %212 = zext <8 x i16> %211 to <8 x i32>
  %213 = mul nuw nsw <8 x i32> %158, %212
  %214 = add nuw nsw <8 x i32> %208, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %215 = add nuw nsw <8 x i32> %214, %213
  %216 = lshr <8 x i32> %215, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %217 = trunc <8 x i32> %216 to <8 x i16>
  %218 = getelementptr inbounds i16, i16* %163, i64 16
  %219 = bitcast i16* %218 to <8 x i16>*
  store <8 x i16> %217, <8 x i16>* %219, align 2, !alias.scope !681, !noalias !678
  %220 = getelementptr i16, i16* %162, i64 24
  %221 = bitcast i16* %220 to <8 x i16>*
  %222 = load <8 x i16>, <8 x i16>* %221, align 2, !alias.scope !678
  %223 = zext <8 x i16> %222 to <8 x i32>
  %224 = mul nuw nsw <8 x i32> %156, %223
  %225 = getelementptr inbounds i16, i16* %162, i64 56
  %226 = bitcast i16* %225 to <8 x i16>*
  %227 = load <8 x i16>, <8 x i16>* %226, align 2, !alias.scope !678
  %228 = zext <8 x i16> %227 to <8 x i32>
  %229 = mul nuw nsw <8 x i32> %158, %228
  %230 = add nuw nsw <8 x i32> %224, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %231 = add nuw nsw <8 x i32> %230, %229
  %232 = lshr <8 x i32> %231, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %233 = trunc <8 x i32> %232 to <8 x i16>
  %234 = getelementptr inbounds i16, i16* %163, i64 24
  %235 = bitcast i16* %234 to <8 x i16>*
  store <8 x i16> %233, <8 x i16>* %235, align 2, !alias.scope !681, !noalias !678
  br label %268

236:                                              ; preds = %159, %236
  %237 = phi i64 [ %266, %236 ], [ 0, %159 ]
  %238 = phi i16* [ %265, %236 ], [ %162, %159 ]
  %239 = load i16, i16* %238, align 2
  %240 = zext i16 %239 to i32
  %241 = mul nuw nsw i32 %152, %240
  %242 = getelementptr inbounds i16, i16* %238, i64 32
  %243 = load i16, i16* %242, align 2
  %244 = zext i16 %243 to i32
  %245 = mul nuw nsw i32 %154, %244
  %246 = add nuw nsw i32 %241, 64
  %247 = add nuw nsw i32 %246, %245
  %248 = lshr i32 %247, 7
  %249 = trunc i32 %248 to i16
  %250 = getelementptr inbounds i16, i16* %163, i64 %237
  store i16 %249, i16* %250, align 2
  %251 = getelementptr inbounds i16, i16* %238, i64 1
  %252 = or i64 %237, 1
  %253 = load i16, i16* %251, align 2
  %254 = zext i16 %253 to i32
  %255 = mul nuw nsw i32 %152, %254
  %256 = getelementptr inbounds i16, i16* %238, i64 33
  %257 = load i16, i16* %256, align 2
  %258 = zext i16 %257 to i32
  %259 = mul nuw nsw i32 %154, %258
  %260 = add nuw nsw i32 %255, 64
  %261 = add nuw nsw i32 %260, %259
  %262 = lshr i32 %261, 7
  %263 = trunc i32 %262 to i16
  %264 = getelementptr inbounds i16, i16* %163, i64 %252
  store i16 %263, i16* %264, align 2
  %265 = getelementptr inbounds i16, i16* %238, i64 2
  %266 = add nuw nsw i64 %237, 2
  %267 = icmp eq i64 %266, 32
  br i1 %267, label %268, label %236, !llvm.loop !683

268:                                              ; preds = %236, %172
  %269 = phi i16* [ %173, %172 ], [ %265, %236 ]
  %270 = getelementptr inbounds i16, i16* %163, i64 32
  %271 = add nuw nsw i32 %161, 1
  %272 = icmp eq i32 %271, 64
  %273 = add i64 %160, 1
  br i1 %272, label %274, label %159

274:                                              ; preds = %268
  %275 = getelementptr inbounds [2048 x i16], [2048 x i16]* %11, i64 0, i64 0
  %276 = ptrtoint i8* %7 to i64
  %277 = shl i64 %276, 1
  %278 = inttoptr i64 %277 to i16*
  br label %279

279:                                              ; preds = %381, %274
  %280 = phi i64 [ %387, %381 ], [ 0, %274 ]
  %281 = phi i16* [ %382, %381 ], [ %275, %274 ]
  %282 = phi i32 [ %385, %381 ], [ 0, %274 ]
  %283 = phi i16* [ %383, %381 ], [ %278, %274 ]
  %284 = phi i16* [ %384, %381 ], [ %147, %274 ]
  %285 = shl nuw nsw i64 %280, 5
  %286 = getelementptr [2048 x i16], [2048 x i16]* %11, i64 0, i64 %285
  %287 = add i64 %285, 32
  %288 = getelementptr [2048 x i16], [2048 x i16]* %11, i64 0, i64 %287
  %289 = getelementptr [2048 x i16], [2048 x i16]* %10, i64 0, i64 %287
  %290 = getelementptr [2048 x i16], [2048 x i16]* %10, i64 0, i64 %285
  %291 = getelementptr i16, i16* %278, i64 %287
  %292 = getelementptr i16, i16* %278, i64 %285
  %293 = icmp ult i16* %286, %291
  %294 = icmp ult i16* %292, %288
  %295 = and i1 %293, %294
  %296 = icmp ult i16* %286, %289
  %297 = icmp ult i16* %290, %288
  %298 = and i1 %296, %297
  %299 = or i1 %295, %298
  br i1 %299, label %354, label %300

300:                                              ; preds = %279
  %301 = bitcast i16* %283 to <8 x i16>*
  %302 = load <8 x i16>, <8 x i16>* %301, align 2, !alias.scope !684
  %303 = zext <8 x i16> %302 to <8 x i32>
  %304 = bitcast i16* %284 to <8 x i16>*
  %305 = load <8 x i16>, <8 x i16>* %304, align 2, !alias.scope !687
  %306 = zext <8 x i16> %305 to <8 x i32>
  %307 = add nuw nsw <8 x i32> %303, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %308 = add nuw nsw <8 x i32> %307, %306
  %309 = lshr <8 x i32> %308, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %310 = trunc <8 x i32> %309 to <8 x i16>
  %311 = bitcast i16* %281 to <8 x i16>*
  store <8 x i16> %310, <8 x i16>* %311, align 2, !alias.scope !689, !noalias !691
  %312 = getelementptr inbounds i16, i16* %283, i64 8
  %313 = bitcast i16* %312 to <8 x i16>*
  %314 = load <8 x i16>, <8 x i16>* %313, align 2, !alias.scope !684
  %315 = zext <8 x i16> %314 to <8 x i32>
  %316 = getelementptr inbounds i16, i16* %284, i64 8
  %317 = bitcast i16* %316 to <8 x i16>*
  %318 = load <8 x i16>, <8 x i16>* %317, align 2, !alias.scope !687
  %319 = zext <8 x i16> %318 to <8 x i32>
  %320 = add nuw nsw <8 x i32> %315, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %321 = add nuw nsw <8 x i32> %320, %319
  %322 = lshr <8 x i32> %321, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %323 = trunc <8 x i32> %322 to <8 x i16>
  %324 = getelementptr inbounds i16, i16* %281, i64 8
  %325 = bitcast i16* %324 to <8 x i16>*
  store <8 x i16> %323, <8 x i16>* %325, align 2, !alias.scope !689, !noalias !691
  %326 = getelementptr inbounds i16, i16* %283, i64 16
  %327 = bitcast i16* %326 to <8 x i16>*
  %328 = load <8 x i16>, <8 x i16>* %327, align 2, !alias.scope !684
  %329 = zext <8 x i16> %328 to <8 x i32>
  %330 = getelementptr inbounds i16, i16* %284, i64 16
  %331 = bitcast i16* %330 to <8 x i16>*
  %332 = load <8 x i16>, <8 x i16>* %331, align 2, !alias.scope !687
  %333 = zext <8 x i16> %332 to <8 x i32>
  %334 = add nuw nsw <8 x i32> %329, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %335 = add nuw nsw <8 x i32> %334, %333
  %336 = lshr <8 x i32> %335, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %337 = trunc <8 x i32> %336 to <8 x i16>
  %338 = getelementptr inbounds i16, i16* %281, i64 16
  %339 = bitcast i16* %338 to <8 x i16>*
  store <8 x i16> %337, <8 x i16>* %339, align 2, !alias.scope !689, !noalias !691
  %340 = getelementptr inbounds i16, i16* %283, i64 24
  %341 = bitcast i16* %340 to <8 x i16>*
  %342 = load <8 x i16>, <8 x i16>* %341, align 2, !alias.scope !684
  %343 = zext <8 x i16> %342 to <8 x i32>
  %344 = getelementptr inbounds i16, i16* %284, i64 24
  %345 = bitcast i16* %344 to <8 x i16>*
  %346 = load <8 x i16>, <8 x i16>* %345, align 2, !alias.scope !687
  %347 = zext <8 x i16> %346 to <8 x i32>
  %348 = add nuw nsw <8 x i32> %343, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %349 = add nuw nsw <8 x i32> %348, %347
  %350 = lshr <8 x i32> %349, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %351 = trunc <8 x i32> %350 to <8 x i16>
  %352 = getelementptr inbounds i16, i16* %281, i64 24
  %353 = bitcast i16* %352 to <8 x i16>*
  store <8 x i16> %351, <8 x i16>* %353, align 2, !alias.scope !689, !noalias !691
  br label %381

354:                                              ; preds = %279, %354
  %355 = phi i64 [ %379, %354 ], [ 0, %279 ]
  %356 = getelementptr inbounds i16, i16* %283, i64 %355
  %357 = load i16, i16* %356, align 2
  %358 = zext i16 %357 to i32
  %359 = getelementptr inbounds i16, i16* %284, i64 %355
  %360 = load i16, i16* %359, align 2
  %361 = zext i16 %360 to i32
  %362 = add nuw nsw i32 %358, 1
  %363 = add nuw nsw i32 %362, %361
  %364 = lshr i32 %363, 1
  %365 = trunc i32 %364 to i16
  %366 = getelementptr inbounds i16, i16* %281, i64 %355
  store i16 %365, i16* %366, align 2
  %367 = or i64 %355, 1
  %368 = getelementptr inbounds i16, i16* %283, i64 %367
  %369 = load i16, i16* %368, align 2
  %370 = zext i16 %369 to i32
  %371 = getelementptr inbounds i16, i16* %284, i64 %367
  %372 = load i16, i16* %371, align 2
  %373 = zext i16 %372 to i32
  %374 = add nuw nsw i32 %370, 1
  %375 = add nuw nsw i32 %374, %373
  %376 = lshr i32 %375, 1
  %377 = trunc i32 %376 to i16
  %378 = getelementptr inbounds i16, i16* %281, i64 %367
  store i16 %377, i16* %378, align 2
  %379 = add nuw nsw i64 %355, 2
  %380 = icmp eq i64 %379, 32
  br i1 %380, label %381, label %354, !llvm.loop !692

381:                                              ; preds = %354, %300
  %382 = getelementptr inbounds i16, i16* %281, i64 32
  %383 = getelementptr inbounds i16, i16* %283, i64 32
  %384 = getelementptr inbounds i16, i16* %284, i64 32
  %385 = add nuw nsw i32 %282, 1
  %386 = icmp eq i32 %385, 64
  %387 = add i64 %280, 1
  br i1 %386, label %388, label %279

388:                                              ; preds = %381
  %389 = ptrtoint i8* %4 to i64
  %390 = shl i64 %389, 1
  %391 = inttoptr i64 %390 to i16*
  %392 = sext i32 %5 to i64
  br label %393

393:                                              ; preds = %430, %388
  %394 = phi i64 [ 0, %388 ], [ %427, %430 ]
  %395 = phi i64 [ 0, %388 ], [ %424, %430 ]
  %396 = phi i32 [ 0, %388 ], [ %433, %430 ]
  %397 = phi i16* [ %391, %388 ], [ %432, %430 ]
  %398 = phi i16* [ %275, %388 ], [ %431, %430 ]
  br label %399

399:                                              ; preds = %399, %393
  %400 = phi i64 [ %394, %393 ], [ %427, %399 ]
  %401 = phi i64 [ %395, %393 ], [ %424, %399 ]
  %402 = phi i64 [ 0, %393 ], [ %428, %399 ]
  %403 = getelementptr inbounds i16, i16* %398, i64 %402
  %404 = load i16, i16* %403, align 2
  %405 = zext i16 %404 to i32
  %406 = getelementptr inbounds i16, i16* %397, i64 %402
  %407 = load i16, i16* %406, align 2
  %408 = zext i16 %407 to i32
  %409 = sub nsw i32 %405, %408
  %410 = sext i32 %409 to i64
  %411 = add nsw i64 %401, %410
  %412 = mul nsw i32 %409, %409
  %413 = zext i32 %412 to i64
  %414 = add i64 %400, %413
  %415 = or i64 %402, 1
  %416 = getelementptr inbounds i16, i16* %398, i64 %415
  %417 = load i16, i16* %416, align 2
  %418 = zext i16 %417 to i32
  %419 = getelementptr inbounds i16, i16* %397, i64 %415
  %420 = load i16, i16* %419, align 2
  %421 = zext i16 %420 to i32
  %422 = sub nsw i32 %418, %421
  %423 = sext i32 %422 to i64
  %424 = add nsw i64 %411, %423
  %425 = mul nsw i32 %422, %422
  %426 = zext i32 %425 to i64
  %427 = add i64 %414, %426
  %428 = add nuw nsw i64 %402, 2
  %429 = icmp eq i64 %428, 32
  br i1 %429, label %430, label %399

430:                                              ; preds = %399
  %431 = getelementptr inbounds i16, i16* %398, i64 32
  %432 = getelementptr inbounds i16, i16* %397, i64 %392
  %433 = add nuw nsw i32 %396, 1
  %434 = icmp eq i32 %433, 64
  br i1 %434, label %435, label %393

435:                                              ; preds = %430
  %436 = add i64 %427, 128
  %437 = lshr i64 %436, 8
  %438 = trunc i64 %437 to i32
  store i32 %438, i32* %6, align 4
  %439 = and i64 %437, 4294967295
  %440 = shl i64 %424, 28
  %441 = add i64 %440, 2147483648
  %442 = ashr i64 %441, 32
  %443 = mul nsw i64 %442, %442
  %444 = lshr i64 %443, 11
  %445 = sub nsw i64 %439, %444
  %446 = icmp sgt i64 %445, -1
  %447 = trunc i64 %445 to i32
  %448 = select i1 %446, i32 %447, i32 0
  call void @llvm.lifetime.end.p0i8(i64 4096, i8* nonnull %14) #4
  call void @llvm.lifetime.end.p0i8(i64 4096, i8* nonnull %13) #4
  call void @llvm.lifetime.end.p0i8(i64 4160, i8* nonnull %12) #4
  ret i32 %448
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_highbd_8_variance32x32_c(i8*, i32, i8*, i32, i32* nocapture) local_unnamed_addr #2 {
  %6 = ptrtoint i8* %2 to i64
  %7 = shl i64 %6, 1
  %8 = inttoptr i64 %7 to i16*
  %9 = ptrtoint i8* %0 to i64
  %10 = shl i64 %9, 1
  %11 = inttoptr i64 %10 to i16*
  %12 = sext i32 %1 to i64
  %13 = sext i32 %3 to i64
  br label %14

14:                                               ; preds = %51, %5
  %15 = phi i64 [ 0, %5 ], [ %48, %51 ]
  %16 = phi i64 [ 0, %5 ], [ %45, %51 ]
  %17 = phi i32 [ 0, %5 ], [ %54, %51 ]
  %18 = phi i16* [ %8, %5 ], [ %53, %51 ]
  %19 = phi i16* [ %11, %5 ], [ %52, %51 ]
  br label %20

20:                                               ; preds = %20, %14
  %21 = phi i64 [ %15, %14 ], [ %48, %20 ]
  %22 = phi i64 [ %16, %14 ], [ %45, %20 ]
  %23 = phi i64 [ 0, %14 ], [ %49, %20 ]
  %24 = getelementptr inbounds i16, i16* %19, i64 %23
  %25 = load i16, i16* %24, align 2
  %26 = zext i16 %25 to i32
  %27 = getelementptr inbounds i16, i16* %18, i64 %23
  %28 = load i16, i16* %27, align 2
  %29 = zext i16 %28 to i32
  %30 = sub nsw i32 %26, %29
  %31 = sext i32 %30 to i64
  %32 = add nsw i64 %22, %31
  %33 = mul nsw i32 %30, %30
  %34 = zext i32 %33 to i64
  %35 = add i64 %21, %34
  %36 = or i64 %23, 1
  %37 = getelementptr inbounds i16, i16* %19, i64 %36
  %38 = load i16, i16* %37, align 2
  %39 = zext i16 %38 to i32
  %40 = getelementptr inbounds i16, i16* %18, i64 %36
  %41 = load i16, i16* %40, align 2
  %42 = zext i16 %41 to i32
  %43 = sub nsw i32 %39, %42
  %44 = sext i32 %43 to i64
  %45 = add nsw i64 %32, %44
  %46 = mul nsw i32 %43, %43
  %47 = zext i32 %46 to i64
  %48 = add i64 %35, %47
  %49 = add nuw nsw i64 %23, 2
  %50 = icmp eq i64 %49, 32
  br i1 %50, label %51, label %20

51:                                               ; preds = %20
  %52 = getelementptr inbounds i16, i16* %19, i64 %12
  %53 = getelementptr inbounds i16, i16* %18, i64 %13
  %54 = add nuw nsw i32 %17, 1
  %55 = icmp eq i32 %54, 32
  br i1 %55, label %56, label %14

56:                                               ; preds = %51
  %57 = trunc i64 %48 to i32
  store i32 %57, i32* %4, align 4
  %58 = shl i64 %45, 32
  %59 = ashr exact i64 %58, 32
  %60 = mul nsw i64 %59, %59
  %61 = lshr i64 %60, 10
  %62 = trunc i64 %61 to i32
  %63 = sub i32 %57, %62
  ret i32 %63
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_highbd_10_variance32x32_c(i8*, i32, i8*, i32, i32* nocapture) local_unnamed_addr #2 {
  %6 = ptrtoint i8* %2 to i64
  %7 = shl i64 %6, 1
  %8 = inttoptr i64 %7 to i16*
  %9 = ptrtoint i8* %0 to i64
  %10 = shl i64 %9, 1
  %11 = inttoptr i64 %10 to i16*
  %12 = sext i32 %1 to i64
  %13 = sext i32 %3 to i64
  br label %14

14:                                               ; preds = %51, %5
  %15 = phi i64 [ 0, %5 ], [ %48, %51 ]
  %16 = phi i64 [ 0, %5 ], [ %45, %51 ]
  %17 = phi i32 [ 0, %5 ], [ %54, %51 ]
  %18 = phi i16* [ %8, %5 ], [ %53, %51 ]
  %19 = phi i16* [ %11, %5 ], [ %52, %51 ]
  br label %20

20:                                               ; preds = %20, %14
  %21 = phi i64 [ %15, %14 ], [ %48, %20 ]
  %22 = phi i64 [ %16, %14 ], [ %45, %20 ]
  %23 = phi i64 [ 0, %14 ], [ %49, %20 ]
  %24 = getelementptr inbounds i16, i16* %19, i64 %23
  %25 = load i16, i16* %24, align 2
  %26 = zext i16 %25 to i32
  %27 = getelementptr inbounds i16, i16* %18, i64 %23
  %28 = load i16, i16* %27, align 2
  %29 = zext i16 %28 to i32
  %30 = sub nsw i32 %26, %29
  %31 = sext i32 %30 to i64
  %32 = add nsw i64 %22, %31
  %33 = mul nsw i32 %30, %30
  %34 = zext i32 %33 to i64
  %35 = add i64 %21, %34
  %36 = or i64 %23, 1
  %37 = getelementptr inbounds i16, i16* %19, i64 %36
  %38 = load i16, i16* %37, align 2
  %39 = zext i16 %38 to i32
  %40 = getelementptr inbounds i16, i16* %18, i64 %36
  %41 = load i16, i16* %40, align 2
  %42 = zext i16 %41 to i32
  %43 = sub nsw i32 %39, %42
  %44 = sext i32 %43 to i64
  %45 = add nsw i64 %32, %44
  %46 = mul nsw i32 %43, %43
  %47 = zext i32 %46 to i64
  %48 = add i64 %35, %47
  %49 = add nuw nsw i64 %23, 2
  %50 = icmp eq i64 %49, 32
  br i1 %50, label %51, label %20

51:                                               ; preds = %20
  %52 = getelementptr inbounds i16, i16* %19, i64 %12
  %53 = getelementptr inbounds i16, i16* %18, i64 %13
  %54 = add nuw nsw i32 %17, 1
  %55 = icmp eq i32 %54, 32
  br i1 %55, label %56, label %14

56:                                               ; preds = %51
  %57 = add i64 %48, 8
  %58 = lshr i64 %57, 4
  %59 = trunc i64 %58 to i32
  store i32 %59, i32* %4, align 4
  %60 = and i64 %58, 4294967295
  %61 = shl i64 %45, 30
  %62 = add i64 %61, 2147483648
  %63 = ashr i64 %62, 32
  %64 = mul nsw i64 %63, %63
  %65 = lshr i64 %64, 10
  %66 = sub nsw i64 %60, %65
  %67 = icmp sgt i64 %66, -1
  %68 = trunc i64 %66 to i32
  %69 = select i1 %67, i32 %68, i32 0
  ret i32 %69
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_highbd_12_variance32x32_c(i8*, i32, i8*, i32, i32* nocapture) local_unnamed_addr #2 {
  %6 = ptrtoint i8* %2 to i64
  %7 = shl i64 %6, 1
  %8 = inttoptr i64 %7 to i16*
  %9 = ptrtoint i8* %0 to i64
  %10 = shl i64 %9, 1
  %11 = inttoptr i64 %10 to i16*
  %12 = sext i32 %1 to i64
  %13 = sext i32 %3 to i64
  br label %14

14:                                               ; preds = %51, %5
  %15 = phi i64 [ 0, %5 ], [ %48, %51 ]
  %16 = phi i64 [ 0, %5 ], [ %45, %51 ]
  %17 = phi i32 [ 0, %5 ], [ %54, %51 ]
  %18 = phi i16* [ %8, %5 ], [ %53, %51 ]
  %19 = phi i16* [ %11, %5 ], [ %52, %51 ]
  br label %20

20:                                               ; preds = %20, %14
  %21 = phi i64 [ %15, %14 ], [ %48, %20 ]
  %22 = phi i64 [ %16, %14 ], [ %45, %20 ]
  %23 = phi i64 [ 0, %14 ], [ %49, %20 ]
  %24 = getelementptr inbounds i16, i16* %19, i64 %23
  %25 = load i16, i16* %24, align 2
  %26 = zext i16 %25 to i32
  %27 = getelementptr inbounds i16, i16* %18, i64 %23
  %28 = load i16, i16* %27, align 2
  %29 = zext i16 %28 to i32
  %30 = sub nsw i32 %26, %29
  %31 = sext i32 %30 to i64
  %32 = add nsw i64 %22, %31
  %33 = mul nsw i32 %30, %30
  %34 = zext i32 %33 to i64
  %35 = add i64 %21, %34
  %36 = or i64 %23, 1
  %37 = getelementptr inbounds i16, i16* %19, i64 %36
  %38 = load i16, i16* %37, align 2
  %39 = zext i16 %38 to i32
  %40 = getelementptr inbounds i16, i16* %18, i64 %36
  %41 = load i16, i16* %40, align 2
  %42 = zext i16 %41 to i32
  %43 = sub nsw i32 %39, %42
  %44 = sext i32 %43 to i64
  %45 = add nsw i64 %32, %44
  %46 = mul nsw i32 %43, %43
  %47 = zext i32 %46 to i64
  %48 = add i64 %35, %47
  %49 = add nuw nsw i64 %23, 2
  %50 = icmp eq i64 %49, 32
  br i1 %50, label %51, label %20

51:                                               ; preds = %20
  %52 = getelementptr inbounds i16, i16* %19, i64 %12
  %53 = getelementptr inbounds i16, i16* %18, i64 %13
  %54 = add nuw nsw i32 %17, 1
  %55 = icmp eq i32 %54, 32
  br i1 %55, label %56, label %14

56:                                               ; preds = %51
  %57 = add i64 %48, 128
  %58 = lshr i64 %57, 8
  %59 = trunc i64 %58 to i32
  store i32 %59, i32* %4, align 4
  %60 = and i64 %58, 4294967295
  %61 = shl i64 %45, 28
  %62 = add i64 %61, 2147483648
  %63 = ashr i64 %62, 32
  %64 = mul nsw i64 %63, %63
  %65 = lshr i64 %64, 10
  %66 = sub nsw i64 %60, %65
  %67 = icmp sgt i64 %66, -1
  %68 = trunc i64 %66 to i32
  %69 = select i1 %67, i32 %68, i32 0
  ret i32 %69
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_highbd_8_sub_pixel_variance32x32_c(i8*, i32, i32, i32, i8*, i32, i32* nocapture) local_unnamed_addr #2 {
  %8 = alloca [1056 x i16], align 16
  %9 = alloca [1024 x i16], align 16
  %10 = bitcast [1056 x i16]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2112, i8* nonnull %10) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %10, i8 -86, i64 2112, i1 false)
  %11 = bitcast [1024 x i16]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2048, i8* nonnull %11) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %11, i8 -86, i64 2048, i1 false)
  %12 = getelementptr inbounds [1056 x i16], [1056 x i16]* %8, i64 0, i64 0
  %13 = sext i32 %2 to i64
  %14 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %13, i64 0
  %15 = ptrtoint i8* %0 to i64
  %16 = shl i64 %15, 1
  %17 = inttoptr i64 %16 to i16*
  %18 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %13, i64 1
  %19 = add i32 %1, -32
  %20 = zext i32 %19 to i64
  %21 = load i8, i8* %14, align 2
  %22 = zext i8 %21 to i32
  %23 = load i8, i8* %18, align 1
  %24 = zext i8 %23 to i32
  %25 = insertelement <8 x i32> undef, i32 %22, i32 0
  %26 = shufflevector <8 x i32> %25, <8 x i32> undef, <8 x i32> zeroinitializer
  %27 = insertelement <8 x i32> undef, i32 %24, i32 0
  %28 = shufflevector <8 x i32> %27, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %29

29:                                               ; preds = %136, %7
  %30 = phi i64 [ %142, %136 ], [ 0, %7 ]
  %31 = phi i16* [ %138, %136 ], [ %17, %7 ]
  %32 = phi i32 [ %140, %136 ], [ 0, %7 ]
  %33 = phi i16* [ %139, %136 ], [ %12, %7 ]
  %34 = shl nuw nsw i64 %30, 5
  %35 = add i64 %34, 32
  %36 = getelementptr [1056 x i16], [1056 x i16]* %8, i64 0, i64 %35
  %37 = getelementptr [1056 x i16], [1056 x i16]* %8, i64 0, i64 %34
  %38 = getelementptr i16, i16* %31, i64 33
  %39 = icmp ult i16* %37, %38
  %40 = icmp ult i16* %31, %36
  %41 = and i1 %39, %40
  br i1 %41, label %106, label %42

42:                                               ; preds = %29
  %43 = getelementptr i16, i16* %31, i64 32
  %44 = bitcast i16* %31 to <8 x i16>*
  %45 = load <8 x i16>, <8 x i16>* %44, align 2, !alias.scope !693
  %46 = zext <8 x i16> %45 to <8 x i32>
  %47 = mul nuw nsw <8 x i32> %26, %46
  %48 = getelementptr inbounds i16, i16* %31, i64 1
  %49 = bitcast i16* %48 to <8 x i16>*
  %50 = load <8 x i16>, <8 x i16>* %49, align 2, !alias.scope !693
  %51 = zext <8 x i16> %50 to <8 x i32>
  %52 = mul nuw nsw <8 x i32> %28, %51
  %53 = add nuw nsw <8 x i32> %47, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %54 = add nuw nsw <8 x i32> %53, %52
  %55 = lshr <8 x i32> %54, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %56 = trunc <8 x i32> %55 to <8 x i16>
  %57 = bitcast i16* %33 to <8 x i16>*
  store <8 x i16> %56, <8 x i16>* %57, align 2, !alias.scope !696, !noalias !693
  %58 = getelementptr i16, i16* %31, i64 8
  %59 = bitcast i16* %58 to <8 x i16>*
  %60 = load <8 x i16>, <8 x i16>* %59, align 2, !alias.scope !693
  %61 = zext <8 x i16> %60 to <8 x i32>
  %62 = mul nuw nsw <8 x i32> %26, %61
  %63 = getelementptr inbounds i16, i16* %31, i64 9
  %64 = bitcast i16* %63 to <8 x i16>*
  %65 = load <8 x i16>, <8 x i16>* %64, align 2, !alias.scope !693
  %66 = zext <8 x i16> %65 to <8 x i32>
  %67 = mul nuw nsw <8 x i32> %28, %66
  %68 = add nuw nsw <8 x i32> %62, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %69 = add nuw nsw <8 x i32> %68, %67
  %70 = lshr <8 x i32> %69, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %71 = trunc <8 x i32> %70 to <8 x i16>
  %72 = getelementptr inbounds i16, i16* %33, i64 8
  %73 = bitcast i16* %72 to <8 x i16>*
  store <8 x i16> %71, <8 x i16>* %73, align 2, !alias.scope !696, !noalias !693
  %74 = getelementptr i16, i16* %31, i64 16
  %75 = bitcast i16* %74 to <8 x i16>*
  %76 = load <8 x i16>, <8 x i16>* %75, align 2, !alias.scope !693
  %77 = zext <8 x i16> %76 to <8 x i32>
  %78 = mul nuw nsw <8 x i32> %26, %77
  %79 = getelementptr inbounds i16, i16* %31, i64 17
  %80 = bitcast i16* %79 to <8 x i16>*
  %81 = load <8 x i16>, <8 x i16>* %80, align 2, !alias.scope !693
  %82 = zext <8 x i16> %81 to <8 x i32>
  %83 = mul nuw nsw <8 x i32> %28, %82
  %84 = add nuw nsw <8 x i32> %78, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %85 = add nuw nsw <8 x i32> %84, %83
  %86 = lshr <8 x i32> %85, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %87 = trunc <8 x i32> %86 to <8 x i16>
  %88 = getelementptr inbounds i16, i16* %33, i64 16
  %89 = bitcast i16* %88 to <8 x i16>*
  store <8 x i16> %87, <8 x i16>* %89, align 2, !alias.scope !696, !noalias !693
  %90 = getelementptr i16, i16* %31, i64 24
  %91 = bitcast i16* %90 to <8 x i16>*
  %92 = load <8 x i16>, <8 x i16>* %91, align 2, !alias.scope !693
  %93 = zext <8 x i16> %92 to <8 x i32>
  %94 = mul nuw nsw <8 x i32> %26, %93
  %95 = getelementptr inbounds i16, i16* %31, i64 25
  %96 = bitcast i16* %95 to <8 x i16>*
  %97 = load <8 x i16>, <8 x i16>* %96, align 2, !alias.scope !693
  %98 = zext <8 x i16> %97 to <8 x i32>
  %99 = mul nuw nsw <8 x i32> %28, %98
  %100 = add nuw nsw <8 x i32> %94, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %101 = add nuw nsw <8 x i32> %100, %99
  %102 = lshr <8 x i32> %101, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %103 = trunc <8 x i32> %102 to <8 x i16>
  %104 = getelementptr inbounds i16, i16* %33, i64 24
  %105 = bitcast i16* %104 to <8 x i16>*
  store <8 x i16> %103, <8 x i16>* %105, align 2, !alias.scope !696, !noalias !693
  br label %136

106:                                              ; preds = %29, %106
  %107 = phi i64 [ %134, %106 ], [ 0, %29 ]
  %108 = phi i16* [ %125, %106 ], [ %31, %29 ]
  %109 = load i16, i16* %108, align 2
  %110 = zext i16 %109 to i32
  %111 = mul nuw nsw i32 %22, %110
  %112 = getelementptr inbounds i16, i16* %108, i64 1
  %113 = load i16, i16* %112, align 2
  %114 = zext i16 %113 to i32
  %115 = mul nuw nsw i32 %24, %114
  %116 = add nuw nsw i32 %111, 64
  %117 = add nuw nsw i32 %116, %115
  %118 = lshr i32 %117, 7
  %119 = trunc i32 %118 to i16
  %120 = getelementptr inbounds i16, i16* %33, i64 %107
  store i16 %119, i16* %120, align 2
  %121 = or i64 %107, 1
  %122 = load i16, i16* %112, align 2
  %123 = zext i16 %122 to i32
  %124 = mul nuw nsw i32 %22, %123
  %125 = getelementptr inbounds i16, i16* %108, i64 2
  %126 = load i16, i16* %125, align 2
  %127 = zext i16 %126 to i32
  %128 = mul nuw nsw i32 %24, %127
  %129 = add nuw nsw i32 %124, 64
  %130 = add nuw nsw i32 %129, %128
  %131 = lshr i32 %130, 7
  %132 = trunc i32 %131 to i16
  %133 = getelementptr inbounds i16, i16* %33, i64 %121
  store i16 %132, i16* %133, align 2
  %134 = add nuw nsw i64 %107, 2
  %135 = icmp eq i64 %134, 32
  br i1 %135, label %136, label %106, !llvm.loop !698

136:                                              ; preds = %106, %42
  %137 = phi i16* [ %43, %42 ], [ %125, %106 ]
  %138 = getelementptr inbounds i16, i16* %137, i64 %20
  %139 = getelementptr inbounds i16, i16* %33, i64 32
  %140 = add nuw nsw i32 %32, 1
  %141 = icmp eq i32 %140, 33
  %142 = add i64 %30, 1
  br i1 %141, label %143, label %29

143:                                              ; preds = %136
  %144 = getelementptr inbounds [1024 x i16], [1024 x i16]* %9, i64 0, i64 0
  %145 = sext i32 %3 to i64
  %146 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %145, i64 0
  %147 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %145, i64 1
  %148 = load i8, i8* %146, align 2
  %149 = zext i8 %148 to i32
  %150 = load i8, i8* %147, align 1
  %151 = zext i8 %150 to i32
  %152 = insertelement <8 x i32> undef, i32 %149, i32 0
  %153 = shufflevector <8 x i32> %152, <8 x i32> undef, <8 x i32> zeroinitializer
  %154 = insertelement <8 x i32> undef, i32 %151, i32 0
  %155 = shufflevector <8 x i32> %154, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %156

156:                                              ; preds = %265, %143
  %157 = phi i64 [ %270, %265 ], [ 0, %143 ]
  %158 = phi i32 [ %268, %265 ], [ 0, %143 ]
  %159 = phi i16* [ %266, %265 ], [ %12, %143 ]
  %160 = phi i16* [ %267, %265 ], [ %144, %143 ]
  %161 = shl nuw nsw i64 %157, 5
  %162 = add i64 %161, 32
  %163 = getelementptr [1024 x i16], [1024 x i16]* %9, i64 0, i64 %162
  %164 = getelementptr [1024 x i16], [1024 x i16]* %9, i64 0, i64 %161
  %165 = getelementptr i16, i16* %159, i64 64
  %166 = icmp ult i16* %164, %165
  %167 = icmp ult i16* %159, %163
  %168 = and i1 %166, %167
  br i1 %168, label %233, label %169

169:                                              ; preds = %156
  %170 = getelementptr i16, i16* %159, i64 32
  %171 = bitcast i16* %159 to <8 x i16>*
  %172 = load <8 x i16>, <8 x i16>* %171, align 2, !alias.scope !699
  %173 = zext <8 x i16> %172 to <8 x i32>
  %174 = mul nuw nsw <8 x i32> %153, %173
  %175 = getelementptr inbounds i16, i16* %159, i64 32
  %176 = bitcast i16* %175 to <8 x i16>*
  %177 = load <8 x i16>, <8 x i16>* %176, align 2, !alias.scope !699
  %178 = zext <8 x i16> %177 to <8 x i32>
  %179 = mul nuw nsw <8 x i32> %155, %178
  %180 = add nuw nsw <8 x i32> %174, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %181 = add nuw nsw <8 x i32> %180, %179
  %182 = lshr <8 x i32> %181, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %183 = trunc <8 x i32> %182 to <8 x i16>
  %184 = bitcast i16* %160 to <8 x i16>*
  store <8 x i16> %183, <8 x i16>* %184, align 2, !alias.scope !702, !noalias !699
  %185 = getelementptr i16, i16* %159, i64 8
  %186 = bitcast i16* %185 to <8 x i16>*
  %187 = load <8 x i16>, <8 x i16>* %186, align 2, !alias.scope !699
  %188 = zext <8 x i16> %187 to <8 x i32>
  %189 = mul nuw nsw <8 x i32> %153, %188
  %190 = getelementptr inbounds i16, i16* %159, i64 40
  %191 = bitcast i16* %190 to <8 x i16>*
  %192 = load <8 x i16>, <8 x i16>* %191, align 2, !alias.scope !699
  %193 = zext <8 x i16> %192 to <8 x i32>
  %194 = mul nuw nsw <8 x i32> %155, %193
  %195 = add nuw nsw <8 x i32> %189, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %196 = add nuw nsw <8 x i32> %195, %194
  %197 = lshr <8 x i32> %196, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %198 = trunc <8 x i32> %197 to <8 x i16>
  %199 = getelementptr inbounds i16, i16* %160, i64 8
  %200 = bitcast i16* %199 to <8 x i16>*
  store <8 x i16> %198, <8 x i16>* %200, align 2, !alias.scope !702, !noalias !699
  %201 = getelementptr i16, i16* %159, i64 16
  %202 = bitcast i16* %201 to <8 x i16>*
  %203 = load <8 x i16>, <8 x i16>* %202, align 2, !alias.scope !699
  %204 = zext <8 x i16> %203 to <8 x i32>
  %205 = mul nuw nsw <8 x i32> %153, %204
  %206 = getelementptr inbounds i16, i16* %159, i64 48
  %207 = bitcast i16* %206 to <8 x i16>*
  %208 = load <8 x i16>, <8 x i16>* %207, align 2, !alias.scope !699
  %209 = zext <8 x i16> %208 to <8 x i32>
  %210 = mul nuw nsw <8 x i32> %155, %209
  %211 = add nuw nsw <8 x i32> %205, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %212 = add nuw nsw <8 x i32> %211, %210
  %213 = lshr <8 x i32> %212, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %214 = trunc <8 x i32> %213 to <8 x i16>
  %215 = getelementptr inbounds i16, i16* %160, i64 16
  %216 = bitcast i16* %215 to <8 x i16>*
  store <8 x i16> %214, <8 x i16>* %216, align 2, !alias.scope !702, !noalias !699
  %217 = getelementptr i16, i16* %159, i64 24
  %218 = bitcast i16* %217 to <8 x i16>*
  %219 = load <8 x i16>, <8 x i16>* %218, align 2, !alias.scope !699
  %220 = zext <8 x i16> %219 to <8 x i32>
  %221 = mul nuw nsw <8 x i32> %153, %220
  %222 = getelementptr inbounds i16, i16* %159, i64 56
  %223 = bitcast i16* %222 to <8 x i16>*
  %224 = load <8 x i16>, <8 x i16>* %223, align 2, !alias.scope !699
  %225 = zext <8 x i16> %224 to <8 x i32>
  %226 = mul nuw nsw <8 x i32> %155, %225
  %227 = add nuw nsw <8 x i32> %221, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %228 = add nuw nsw <8 x i32> %227, %226
  %229 = lshr <8 x i32> %228, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %230 = trunc <8 x i32> %229 to <8 x i16>
  %231 = getelementptr inbounds i16, i16* %160, i64 24
  %232 = bitcast i16* %231 to <8 x i16>*
  store <8 x i16> %230, <8 x i16>* %232, align 2, !alias.scope !702, !noalias !699
  br label %265

233:                                              ; preds = %156, %233
  %234 = phi i64 [ %263, %233 ], [ 0, %156 ]
  %235 = phi i16* [ %262, %233 ], [ %159, %156 ]
  %236 = load i16, i16* %235, align 2
  %237 = zext i16 %236 to i32
  %238 = mul nuw nsw i32 %149, %237
  %239 = getelementptr inbounds i16, i16* %235, i64 32
  %240 = load i16, i16* %239, align 2
  %241 = zext i16 %240 to i32
  %242 = mul nuw nsw i32 %151, %241
  %243 = add nuw nsw i32 %238, 64
  %244 = add nuw nsw i32 %243, %242
  %245 = lshr i32 %244, 7
  %246 = trunc i32 %245 to i16
  %247 = getelementptr inbounds i16, i16* %160, i64 %234
  store i16 %246, i16* %247, align 2
  %248 = getelementptr inbounds i16, i16* %235, i64 1
  %249 = or i64 %234, 1
  %250 = load i16, i16* %248, align 2
  %251 = zext i16 %250 to i32
  %252 = mul nuw nsw i32 %149, %251
  %253 = getelementptr inbounds i16, i16* %235, i64 33
  %254 = load i16, i16* %253, align 2
  %255 = zext i16 %254 to i32
  %256 = mul nuw nsw i32 %151, %255
  %257 = add nuw nsw i32 %252, 64
  %258 = add nuw nsw i32 %257, %256
  %259 = lshr i32 %258, 7
  %260 = trunc i32 %259 to i16
  %261 = getelementptr inbounds i16, i16* %160, i64 %249
  store i16 %260, i16* %261, align 2
  %262 = getelementptr inbounds i16, i16* %235, i64 2
  %263 = add nuw nsw i64 %234, 2
  %264 = icmp eq i64 %263, 32
  br i1 %264, label %265, label %233, !llvm.loop !704

265:                                              ; preds = %233, %169
  %266 = phi i16* [ %170, %169 ], [ %262, %233 ]
  %267 = getelementptr inbounds i16, i16* %160, i64 32
  %268 = add nuw nsw i32 %158, 1
  %269 = icmp eq i32 %268, 32
  %270 = add i64 %157, 1
  br i1 %269, label %271, label %156

271:                                              ; preds = %265
  %272 = ptrtoint i8* %4 to i64
  %273 = shl i64 %272, 1
  %274 = inttoptr i64 %273 to i16*
  %275 = sext i32 %5 to i64
  br label %276

276:                                              ; preds = %313, %271
  %277 = phi i64 [ 0, %271 ], [ %310, %313 ]
  %278 = phi i64 [ 0, %271 ], [ %307, %313 ]
  %279 = phi i32 [ 0, %271 ], [ %316, %313 ]
  %280 = phi i16* [ %274, %271 ], [ %315, %313 ]
  %281 = phi i16* [ %144, %271 ], [ %314, %313 ]
  br label %282

282:                                              ; preds = %282, %276
  %283 = phi i64 [ %277, %276 ], [ %310, %282 ]
  %284 = phi i64 [ %278, %276 ], [ %307, %282 ]
  %285 = phi i64 [ 0, %276 ], [ %311, %282 ]
  %286 = getelementptr inbounds i16, i16* %281, i64 %285
  %287 = load i16, i16* %286, align 2
  %288 = zext i16 %287 to i32
  %289 = getelementptr inbounds i16, i16* %280, i64 %285
  %290 = load i16, i16* %289, align 2
  %291 = zext i16 %290 to i32
  %292 = sub nsw i32 %288, %291
  %293 = sext i32 %292 to i64
  %294 = add nsw i64 %284, %293
  %295 = mul nsw i32 %292, %292
  %296 = zext i32 %295 to i64
  %297 = add i64 %283, %296
  %298 = or i64 %285, 1
  %299 = getelementptr inbounds i16, i16* %281, i64 %298
  %300 = load i16, i16* %299, align 2
  %301 = zext i16 %300 to i32
  %302 = getelementptr inbounds i16, i16* %280, i64 %298
  %303 = load i16, i16* %302, align 2
  %304 = zext i16 %303 to i32
  %305 = sub nsw i32 %301, %304
  %306 = sext i32 %305 to i64
  %307 = add nsw i64 %294, %306
  %308 = mul nsw i32 %305, %305
  %309 = zext i32 %308 to i64
  %310 = add i64 %297, %309
  %311 = add nuw nsw i64 %285, 2
  %312 = icmp eq i64 %311, 32
  br i1 %312, label %313, label %282

313:                                              ; preds = %282
  %314 = getelementptr inbounds i16, i16* %281, i64 32
  %315 = getelementptr inbounds i16, i16* %280, i64 %275
  %316 = add nuw nsw i32 %279, 1
  %317 = icmp eq i32 %316, 32
  br i1 %317, label %318, label %276

318:                                              ; preds = %313
  %319 = trunc i64 %310 to i32
  store i32 %319, i32* %6, align 4
  %320 = shl i64 %307, 32
  %321 = ashr exact i64 %320, 32
  %322 = mul nsw i64 %321, %321
  %323 = lshr i64 %322, 10
  %324 = trunc i64 %323 to i32
  %325 = sub i32 %319, %324
  call void @llvm.lifetime.end.p0i8(i64 2048, i8* nonnull %11) #4
  call void @llvm.lifetime.end.p0i8(i64 2112, i8* nonnull %10) #4
  ret i32 %325
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_highbd_10_sub_pixel_variance32x32_c(i8*, i32, i32, i32, i8*, i32, i32* nocapture) local_unnamed_addr #2 {
  %8 = alloca [1056 x i16], align 16
  %9 = alloca [1024 x i16], align 16
  %10 = bitcast [1056 x i16]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2112, i8* nonnull %10) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %10, i8 -86, i64 2112, i1 false)
  %11 = bitcast [1024 x i16]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2048, i8* nonnull %11) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %11, i8 -86, i64 2048, i1 false)
  %12 = getelementptr inbounds [1056 x i16], [1056 x i16]* %8, i64 0, i64 0
  %13 = sext i32 %2 to i64
  %14 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %13, i64 0
  %15 = ptrtoint i8* %0 to i64
  %16 = shl i64 %15, 1
  %17 = inttoptr i64 %16 to i16*
  %18 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %13, i64 1
  %19 = add i32 %1, -32
  %20 = zext i32 %19 to i64
  %21 = load i8, i8* %14, align 2
  %22 = zext i8 %21 to i32
  %23 = load i8, i8* %18, align 1
  %24 = zext i8 %23 to i32
  %25 = insertelement <8 x i32> undef, i32 %22, i32 0
  %26 = shufflevector <8 x i32> %25, <8 x i32> undef, <8 x i32> zeroinitializer
  %27 = insertelement <8 x i32> undef, i32 %24, i32 0
  %28 = shufflevector <8 x i32> %27, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %29

29:                                               ; preds = %136, %7
  %30 = phi i64 [ %142, %136 ], [ 0, %7 ]
  %31 = phi i16* [ %138, %136 ], [ %17, %7 ]
  %32 = phi i32 [ %140, %136 ], [ 0, %7 ]
  %33 = phi i16* [ %139, %136 ], [ %12, %7 ]
  %34 = shl nuw nsw i64 %30, 5
  %35 = add i64 %34, 32
  %36 = getelementptr [1056 x i16], [1056 x i16]* %8, i64 0, i64 %35
  %37 = getelementptr [1056 x i16], [1056 x i16]* %8, i64 0, i64 %34
  %38 = getelementptr i16, i16* %31, i64 33
  %39 = icmp ult i16* %37, %38
  %40 = icmp ult i16* %31, %36
  %41 = and i1 %39, %40
  br i1 %41, label %106, label %42

42:                                               ; preds = %29
  %43 = getelementptr i16, i16* %31, i64 32
  %44 = bitcast i16* %31 to <8 x i16>*
  %45 = load <8 x i16>, <8 x i16>* %44, align 2, !alias.scope !705
  %46 = zext <8 x i16> %45 to <8 x i32>
  %47 = mul nuw nsw <8 x i32> %26, %46
  %48 = getelementptr inbounds i16, i16* %31, i64 1
  %49 = bitcast i16* %48 to <8 x i16>*
  %50 = load <8 x i16>, <8 x i16>* %49, align 2, !alias.scope !705
  %51 = zext <8 x i16> %50 to <8 x i32>
  %52 = mul nuw nsw <8 x i32> %28, %51
  %53 = add nuw nsw <8 x i32> %47, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %54 = add nuw nsw <8 x i32> %53, %52
  %55 = lshr <8 x i32> %54, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %56 = trunc <8 x i32> %55 to <8 x i16>
  %57 = bitcast i16* %33 to <8 x i16>*
  store <8 x i16> %56, <8 x i16>* %57, align 2, !alias.scope !708, !noalias !705
  %58 = getelementptr i16, i16* %31, i64 8
  %59 = bitcast i16* %58 to <8 x i16>*
  %60 = load <8 x i16>, <8 x i16>* %59, align 2, !alias.scope !705
  %61 = zext <8 x i16> %60 to <8 x i32>
  %62 = mul nuw nsw <8 x i32> %26, %61
  %63 = getelementptr inbounds i16, i16* %31, i64 9
  %64 = bitcast i16* %63 to <8 x i16>*
  %65 = load <8 x i16>, <8 x i16>* %64, align 2, !alias.scope !705
  %66 = zext <8 x i16> %65 to <8 x i32>
  %67 = mul nuw nsw <8 x i32> %28, %66
  %68 = add nuw nsw <8 x i32> %62, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %69 = add nuw nsw <8 x i32> %68, %67
  %70 = lshr <8 x i32> %69, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %71 = trunc <8 x i32> %70 to <8 x i16>
  %72 = getelementptr inbounds i16, i16* %33, i64 8
  %73 = bitcast i16* %72 to <8 x i16>*
  store <8 x i16> %71, <8 x i16>* %73, align 2, !alias.scope !708, !noalias !705
  %74 = getelementptr i16, i16* %31, i64 16
  %75 = bitcast i16* %74 to <8 x i16>*
  %76 = load <8 x i16>, <8 x i16>* %75, align 2, !alias.scope !705
  %77 = zext <8 x i16> %76 to <8 x i32>
  %78 = mul nuw nsw <8 x i32> %26, %77
  %79 = getelementptr inbounds i16, i16* %31, i64 17
  %80 = bitcast i16* %79 to <8 x i16>*
  %81 = load <8 x i16>, <8 x i16>* %80, align 2, !alias.scope !705
  %82 = zext <8 x i16> %81 to <8 x i32>
  %83 = mul nuw nsw <8 x i32> %28, %82
  %84 = add nuw nsw <8 x i32> %78, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %85 = add nuw nsw <8 x i32> %84, %83
  %86 = lshr <8 x i32> %85, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %87 = trunc <8 x i32> %86 to <8 x i16>
  %88 = getelementptr inbounds i16, i16* %33, i64 16
  %89 = bitcast i16* %88 to <8 x i16>*
  store <8 x i16> %87, <8 x i16>* %89, align 2, !alias.scope !708, !noalias !705
  %90 = getelementptr i16, i16* %31, i64 24
  %91 = bitcast i16* %90 to <8 x i16>*
  %92 = load <8 x i16>, <8 x i16>* %91, align 2, !alias.scope !705
  %93 = zext <8 x i16> %92 to <8 x i32>
  %94 = mul nuw nsw <8 x i32> %26, %93
  %95 = getelementptr inbounds i16, i16* %31, i64 25
  %96 = bitcast i16* %95 to <8 x i16>*
  %97 = load <8 x i16>, <8 x i16>* %96, align 2, !alias.scope !705
  %98 = zext <8 x i16> %97 to <8 x i32>
  %99 = mul nuw nsw <8 x i32> %28, %98
  %100 = add nuw nsw <8 x i32> %94, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %101 = add nuw nsw <8 x i32> %100, %99
  %102 = lshr <8 x i32> %101, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %103 = trunc <8 x i32> %102 to <8 x i16>
  %104 = getelementptr inbounds i16, i16* %33, i64 24
  %105 = bitcast i16* %104 to <8 x i16>*
  store <8 x i16> %103, <8 x i16>* %105, align 2, !alias.scope !708, !noalias !705
  br label %136

106:                                              ; preds = %29, %106
  %107 = phi i64 [ %134, %106 ], [ 0, %29 ]
  %108 = phi i16* [ %125, %106 ], [ %31, %29 ]
  %109 = load i16, i16* %108, align 2
  %110 = zext i16 %109 to i32
  %111 = mul nuw nsw i32 %22, %110
  %112 = getelementptr inbounds i16, i16* %108, i64 1
  %113 = load i16, i16* %112, align 2
  %114 = zext i16 %113 to i32
  %115 = mul nuw nsw i32 %24, %114
  %116 = add nuw nsw i32 %111, 64
  %117 = add nuw nsw i32 %116, %115
  %118 = lshr i32 %117, 7
  %119 = trunc i32 %118 to i16
  %120 = getelementptr inbounds i16, i16* %33, i64 %107
  store i16 %119, i16* %120, align 2
  %121 = or i64 %107, 1
  %122 = load i16, i16* %112, align 2
  %123 = zext i16 %122 to i32
  %124 = mul nuw nsw i32 %22, %123
  %125 = getelementptr inbounds i16, i16* %108, i64 2
  %126 = load i16, i16* %125, align 2
  %127 = zext i16 %126 to i32
  %128 = mul nuw nsw i32 %24, %127
  %129 = add nuw nsw i32 %124, 64
  %130 = add nuw nsw i32 %129, %128
  %131 = lshr i32 %130, 7
  %132 = trunc i32 %131 to i16
  %133 = getelementptr inbounds i16, i16* %33, i64 %121
  store i16 %132, i16* %133, align 2
  %134 = add nuw nsw i64 %107, 2
  %135 = icmp eq i64 %134, 32
  br i1 %135, label %136, label %106, !llvm.loop !710

136:                                              ; preds = %106, %42
  %137 = phi i16* [ %43, %42 ], [ %125, %106 ]
  %138 = getelementptr inbounds i16, i16* %137, i64 %20
  %139 = getelementptr inbounds i16, i16* %33, i64 32
  %140 = add nuw nsw i32 %32, 1
  %141 = icmp eq i32 %140, 33
  %142 = add i64 %30, 1
  br i1 %141, label %143, label %29

143:                                              ; preds = %136
  %144 = getelementptr inbounds [1024 x i16], [1024 x i16]* %9, i64 0, i64 0
  %145 = sext i32 %3 to i64
  %146 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %145, i64 0
  %147 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %145, i64 1
  %148 = load i8, i8* %146, align 2
  %149 = zext i8 %148 to i32
  %150 = load i8, i8* %147, align 1
  %151 = zext i8 %150 to i32
  %152 = insertelement <8 x i32> undef, i32 %149, i32 0
  %153 = shufflevector <8 x i32> %152, <8 x i32> undef, <8 x i32> zeroinitializer
  %154 = insertelement <8 x i32> undef, i32 %151, i32 0
  %155 = shufflevector <8 x i32> %154, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %156

156:                                              ; preds = %265, %143
  %157 = phi i64 [ %270, %265 ], [ 0, %143 ]
  %158 = phi i32 [ %268, %265 ], [ 0, %143 ]
  %159 = phi i16* [ %266, %265 ], [ %12, %143 ]
  %160 = phi i16* [ %267, %265 ], [ %144, %143 ]
  %161 = shl nuw nsw i64 %157, 5
  %162 = add i64 %161, 32
  %163 = getelementptr [1024 x i16], [1024 x i16]* %9, i64 0, i64 %162
  %164 = getelementptr [1024 x i16], [1024 x i16]* %9, i64 0, i64 %161
  %165 = getelementptr i16, i16* %159, i64 64
  %166 = icmp ult i16* %164, %165
  %167 = icmp ult i16* %159, %163
  %168 = and i1 %166, %167
  br i1 %168, label %233, label %169

169:                                              ; preds = %156
  %170 = getelementptr i16, i16* %159, i64 32
  %171 = bitcast i16* %159 to <8 x i16>*
  %172 = load <8 x i16>, <8 x i16>* %171, align 2, !alias.scope !711
  %173 = zext <8 x i16> %172 to <8 x i32>
  %174 = mul nuw nsw <8 x i32> %153, %173
  %175 = getelementptr inbounds i16, i16* %159, i64 32
  %176 = bitcast i16* %175 to <8 x i16>*
  %177 = load <8 x i16>, <8 x i16>* %176, align 2, !alias.scope !711
  %178 = zext <8 x i16> %177 to <8 x i32>
  %179 = mul nuw nsw <8 x i32> %155, %178
  %180 = add nuw nsw <8 x i32> %174, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %181 = add nuw nsw <8 x i32> %180, %179
  %182 = lshr <8 x i32> %181, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %183 = trunc <8 x i32> %182 to <8 x i16>
  %184 = bitcast i16* %160 to <8 x i16>*
  store <8 x i16> %183, <8 x i16>* %184, align 2, !alias.scope !714, !noalias !711
  %185 = getelementptr i16, i16* %159, i64 8
  %186 = bitcast i16* %185 to <8 x i16>*
  %187 = load <8 x i16>, <8 x i16>* %186, align 2, !alias.scope !711
  %188 = zext <8 x i16> %187 to <8 x i32>
  %189 = mul nuw nsw <8 x i32> %153, %188
  %190 = getelementptr inbounds i16, i16* %159, i64 40
  %191 = bitcast i16* %190 to <8 x i16>*
  %192 = load <8 x i16>, <8 x i16>* %191, align 2, !alias.scope !711
  %193 = zext <8 x i16> %192 to <8 x i32>
  %194 = mul nuw nsw <8 x i32> %155, %193
  %195 = add nuw nsw <8 x i32> %189, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %196 = add nuw nsw <8 x i32> %195, %194
  %197 = lshr <8 x i32> %196, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %198 = trunc <8 x i32> %197 to <8 x i16>
  %199 = getelementptr inbounds i16, i16* %160, i64 8
  %200 = bitcast i16* %199 to <8 x i16>*
  store <8 x i16> %198, <8 x i16>* %200, align 2, !alias.scope !714, !noalias !711
  %201 = getelementptr i16, i16* %159, i64 16
  %202 = bitcast i16* %201 to <8 x i16>*
  %203 = load <8 x i16>, <8 x i16>* %202, align 2, !alias.scope !711
  %204 = zext <8 x i16> %203 to <8 x i32>
  %205 = mul nuw nsw <8 x i32> %153, %204
  %206 = getelementptr inbounds i16, i16* %159, i64 48
  %207 = bitcast i16* %206 to <8 x i16>*
  %208 = load <8 x i16>, <8 x i16>* %207, align 2, !alias.scope !711
  %209 = zext <8 x i16> %208 to <8 x i32>
  %210 = mul nuw nsw <8 x i32> %155, %209
  %211 = add nuw nsw <8 x i32> %205, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %212 = add nuw nsw <8 x i32> %211, %210
  %213 = lshr <8 x i32> %212, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %214 = trunc <8 x i32> %213 to <8 x i16>
  %215 = getelementptr inbounds i16, i16* %160, i64 16
  %216 = bitcast i16* %215 to <8 x i16>*
  store <8 x i16> %214, <8 x i16>* %216, align 2, !alias.scope !714, !noalias !711
  %217 = getelementptr i16, i16* %159, i64 24
  %218 = bitcast i16* %217 to <8 x i16>*
  %219 = load <8 x i16>, <8 x i16>* %218, align 2, !alias.scope !711
  %220 = zext <8 x i16> %219 to <8 x i32>
  %221 = mul nuw nsw <8 x i32> %153, %220
  %222 = getelementptr inbounds i16, i16* %159, i64 56
  %223 = bitcast i16* %222 to <8 x i16>*
  %224 = load <8 x i16>, <8 x i16>* %223, align 2, !alias.scope !711
  %225 = zext <8 x i16> %224 to <8 x i32>
  %226 = mul nuw nsw <8 x i32> %155, %225
  %227 = add nuw nsw <8 x i32> %221, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %228 = add nuw nsw <8 x i32> %227, %226
  %229 = lshr <8 x i32> %228, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %230 = trunc <8 x i32> %229 to <8 x i16>
  %231 = getelementptr inbounds i16, i16* %160, i64 24
  %232 = bitcast i16* %231 to <8 x i16>*
  store <8 x i16> %230, <8 x i16>* %232, align 2, !alias.scope !714, !noalias !711
  br label %265

233:                                              ; preds = %156, %233
  %234 = phi i64 [ %263, %233 ], [ 0, %156 ]
  %235 = phi i16* [ %262, %233 ], [ %159, %156 ]
  %236 = load i16, i16* %235, align 2
  %237 = zext i16 %236 to i32
  %238 = mul nuw nsw i32 %149, %237
  %239 = getelementptr inbounds i16, i16* %235, i64 32
  %240 = load i16, i16* %239, align 2
  %241 = zext i16 %240 to i32
  %242 = mul nuw nsw i32 %151, %241
  %243 = add nuw nsw i32 %238, 64
  %244 = add nuw nsw i32 %243, %242
  %245 = lshr i32 %244, 7
  %246 = trunc i32 %245 to i16
  %247 = getelementptr inbounds i16, i16* %160, i64 %234
  store i16 %246, i16* %247, align 2
  %248 = getelementptr inbounds i16, i16* %235, i64 1
  %249 = or i64 %234, 1
  %250 = load i16, i16* %248, align 2
  %251 = zext i16 %250 to i32
  %252 = mul nuw nsw i32 %149, %251
  %253 = getelementptr inbounds i16, i16* %235, i64 33
  %254 = load i16, i16* %253, align 2
  %255 = zext i16 %254 to i32
  %256 = mul nuw nsw i32 %151, %255
  %257 = add nuw nsw i32 %252, 64
  %258 = add nuw nsw i32 %257, %256
  %259 = lshr i32 %258, 7
  %260 = trunc i32 %259 to i16
  %261 = getelementptr inbounds i16, i16* %160, i64 %249
  store i16 %260, i16* %261, align 2
  %262 = getelementptr inbounds i16, i16* %235, i64 2
  %263 = add nuw nsw i64 %234, 2
  %264 = icmp eq i64 %263, 32
  br i1 %264, label %265, label %233, !llvm.loop !716

265:                                              ; preds = %233, %169
  %266 = phi i16* [ %170, %169 ], [ %262, %233 ]
  %267 = getelementptr inbounds i16, i16* %160, i64 32
  %268 = add nuw nsw i32 %158, 1
  %269 = icmp eq i32 %268, 32
  %270 = add i64 %157, 1
  br i1 %269, label %271, label %156

271:                                              ; preds = %265
  %272 = ptrtoint i8* %4 to i64
  %273 = shl i64 %272, 1
  %274 = inttoptr i64 %273 to i16*
  %275 = sext i32 %5 to i64
  br label %276

276:                                              ; preds = %313, %271
  %277 = phi i64 [ 0, %271 ], [ %310, %313 ]
  %278 = phi i64 [ 0, %271 ], [ %307, %313 ]
  %279 = phi i32 [ 0, %271 ], [ %316, %313 ]
  %280 = phi i16* [ %274, %271 ], [ %315, %313 ]
  %281 = phi i16* [ %144, %271 ], [ %314, %313 ]
  br label %282

282:                                              ; preds = %282, %276
  %283 = phi i64 [ %277, %276 ], [ %310, %282 ]
  %284 = phi i64 [ %278, %276 ], [ %307, %282 ]
  %285 = phi i64 [ 0, %276 ], [ %311, %282 ]
  %286 = getelementptr inbounds i16, i16* %281, i64 %285
  %287 = load i16, i16* %286, align 2
  %288 = zext i16 %287 to i32
  %289 = getelementptr inbounds i16, i16* %280, i64 %285
  %290 = load i16, i16* %289, align 2
  %291 = zext i16 %290 to i32
  %292 = sub nsw i32 %288, %291
  %293 = sext i32 %292 to i64
  %294 = add nsw i64 %284, %293
  %295 = mul nsw i32 %292, %292
  %296 = zext i32 %295 to i64
  %297 = add i64 %283, %296
  %298 = or i64 %285, 1
  %299 = getelementptr inbounds i16, i16* %281, i64 %298
  %300 = load i16, i16* %299, align 2
  %301 = zext i16 %300 to i32
  %302 = getelementptr inbounds i16, i16* %280, i64 %298
  %303 = load i16, i16* %302, align 2
  %304 = zext i16 %303 to i32
  %305 = sub nsw i32 %301, %304
  %306 = sext i32 %305 to i64
  %307 = add nsw i64 %294, %306
  %308 = mul nsw i32 %305, %305
  %309 = zext i32 %308 to i64
  %310 = add i64 %297, %309
  %311 = add nuw nsw i64 %285, 2
  %312 = icmp eq i64 %311, 32
  br i1 %312, label %313, label %282

313:                                              ; preds = %282
  %314 = getelementptr inbounds i16, i16* %281, i64 32
  %315 = getelementptr inbounds i16, i16* %280, i64 %275
  %316 = add nuw nsw i32 %279, 1
  %317 = icmp eq i32 %316, 32
  br i1 %317, label %318, label %276

318:                                              ; preds = %313
  %319 = add i64 %310, 8
  %320 = lshr i64 %319, 4
  %321 = trunc i64 %320 to i32
  store i32 %321, i32* %6, align 4
  %322 = and i64 %320, 4294967295
  %323 = shl i64 %307, 30
  %324 = add i64 %323, 2147483648
  %325 = ashr i64 %324, 32
  %326 = mul nsw i64 %325, %325
  %327 = lshr i64 %326, 10
  %328 = sub nsw i64 %322, %327
  %329 = icmp sgt i64 %328, -1
  %330 = trunc i64 %328 to i32
  %331 = select i1 %329, i32 %330, i32 0
  call void @llvm.lifetime.end.p0i8(i64 2048, i8* nonnull %11) #4
  call void @llvm.lifetime.end.p0i8(i64 2112, i8* nonnull %10) #4
  ret i32 %331
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_highbd_12_sub_pixel_variance32x32_c(i8*, i32, i32, i32, i8*, i32, i32* nocapture) local_unnamed_addr #2 {
  %8 = alloca [1056 x i16], align 16
  %9 = alloca [1024 x i16], align 16
  %10 = bitcast [1056 x i16]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2112, i8* nonnull %10) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %10, i8 -86, i64 2112, i1 false)
  %11 = bitcast [1024 x i16]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2048, i8* nonnull %11) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %11, i8 -86, i64 2048, i1 false)
  %12 = getelementptr inbounds [1056 x i16], [1056 x i16]* %8, i64 0, i64 0
  %13 = sext i32 %2 to i64
  %14 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %13, i64 0
  %15 = ptrtoint i8* %0 to i64
  %16 = shl i64 %15, 1
  %17 = inttoptr i64 %16 to i16*
  %18 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %13, i64 1
  %19 = add i32 %1, -32
  %20 = zext i32 %19 to i64
  %21 = load i8, i8* %14, align 2
  %22 = zext i8 %21 to i32
  %23 = load i8, i8* %18, align 1
  %24 = zext i8 %23 to i32
  %25 = insertelement <8 x i32> undef, i32 %22, i32 0
  %26 = shufflevector <8 x i32> %25, <8 x i32> undef, <8 x i32> zeroinitializer
  %27 = insertelement <8 x i32> undef, i32 %24, i32 0
  %28 = shufflevector <8 x i32> %27, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %29

29:                                               ; preds = %136, %7
  %30 = phi i64 [ %142, %136 ], [ 0, %7 ]
  %31 = phi i16* [ %138, %136 ], [ %17, %7 ]
  %32 = phi i32 [ %140, %136 ], [ 0, %7 ]
  %33 = phi i16* [ %139, %136 ], [ %12, %7 ]
  %34 = shl nuw nsw i64 %30, 5
  %35 = add i64 %34, 32
  %36 = getelementptr [1056 x i16], [1056 x i16]* %8, i64 0, i64 %35
  %37 = getelementptr [1056 x i16], [1056 x i16]* %8, i64 0, i64 %34
  %38 = getelementptr i16, i16* %31, i64 33
  %39 = icmp ult i16* %37, %38
  %40 = icmp ult i16* %31, %36
  %41 = and i1 %39, %40
  br i1 %41, label %106, label %42

42:                                               ; preds = %29
  %43 = getelementptr i16, i16* %31, i64 32
  %44 = bitcast i16* %31 to <8 x i16>*
  %45 = load <8 x i16>, <8 x i16>* %44, align 2, !alias.scope !717
  %46 = zext <8 x i16> %45 to <8 x i32>
  %47 = mul nuw nsw <8 x i32> %26, %46
  %48 = getelementptr inbounds i16, i16* %31, i64 1
  %49 = bitcast i16* %48 to <8 x i16>*
  %50 = load <8 x i16>, <8 x i16>* %49, align 2, !alias.scope !717
  %51 = zext <8 x i16> %50 to <8 x i32>
  %52 = mul nuw nsw <8 x i32> %28, %51
  %53 = add nuw nsw <8 x i32> %47, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %54 = add nuw nsw <8 x i32> %53, %52
  %55 = lshr <8 x i32> %54, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %56 = trunc <8 x i32> %55 to <8 x i16>
  %57 = bitcast i16* %33 to <8 x i16>*
  store <8 x i16> %56, <8 x i16>* %57, align 2, !alias.scope !720, !noalias !717
  %58 = getelementptr i16, i16* %31, i64 8
  %59 = bitcast i16* %58 to <8 x i16>*
  %60 = load <8 x i16>, <8 x i16>* %59, align 2, !alias.scope !717
  %61 = zext <8 x i16> %60 to <8 x i32>
  %62 = mul nuw nsw <8 x i32> %26, %61
  %63 = getelementptr inbounds i16, i16* %31, i64 9
  %64 = bitcast i16* %63 to <8 x i16>*
  %65 = load <8 x i16>, <8 x i16>* %64, align 2, !alias.scope !717
  %66 = zext <8 x i16> %65 to <8 x i32>
  %67 = mul nuw nsw <8 x i32> %28, %66
  %68 = add nuw nsw <8 x i32> %62, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %69 = add nuw nsw <8 x i32> %68, %67
  %70 = lshr <8 x i32> %69, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %71 = trunc <8 x i32> %70 to <8 x i16>
  %72 = getelementptr inbounds i16, i16* %33, i64 8
  %73 = bitcast i16* %72 to <8 x i16>*
  store <8 x i16> %71, <8 x i16>* %73, align 2, !alias.scope !720, !noalias !717
  %74 = getelementptr i16, i16* %31, i64 16
  %75 = bitcast i16* %74 to <8 x i16>*
  %76 = load <8 x i16>, <8 x i16>* %75, align 2, !alias.scope !717
  %77 = zext <8 x i16> %76 to <8 x i32>
  %78 = mul nuw nsw <8 x i32> %26, %77
  %79 = getelementptr inbounds i16, i16* %31, i64 17
  %80 = bitcast i16* %79 to <8 x i16>*
  %81 = load <8 x i16>, <8 x i16>* %80, align 2, !alias.scope !717
  %82 = zext <8 x i16> %81 to <8 x i32>
  %83 = mul nuw nsw <8 x i32> %28, %82
  %84 = add nuw nsw <8 x i32> %78, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %85 = add nuw nsw <8 x i32> %84, %83
  %86 = lshr <8 x i32> %85, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %87 = trunc <8 x i32> %86 to <8 x i16>
  %88 = getelementptr inbounds i16, i16* %33, i64 16
  %89 = bitcast i16* %88 to <8 x i16>*
  store <8 x i16> %87, <8 x i16>* %89, align 2, !alias.scope !720, !noalias !717
  %90 = getelementptr i16, i16* %31, i64 24
  %91 = bitcast i16* %90 to <8 x i16>*
  %92 = load <8 x i16>, <8 x i16>* %91, align 2, !alias.scope !717
  %93 = zext <8 x i16> %92 to <8 x i32>
  %94 = mul nuw nsw <8 x i32> %26, %93
  %95 = getelementptr inbounds i16, i16* %31, i64 25
  %96 = bitcast i16* %95 to <8 x i16>*
  %97 = load <8 x i16>, <8 x i16>* %96, align 2, !alias.scope !717
  %98 = zext <8 x i16> %97 to <8 x i32>
  %99 = mul nuw nsw <8 x i32> %28, %98
  %100 = add nuw nsw <8 x i32> %94, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %101 = add nuw nsw <8 x i32> %100, %99
  %102 = lshr <8 x i32> %101, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %103 = trunc <8 x i32> %102 to <8 x i16>
  %104 = getelementptr inbounds i16, i16* %33, i64 24
  %105 = bitcast i16* %104 to <8 x i16>*
  store <8 x i16> %103, <8 x i16>* %105, align 2, !alias.scope !720, !noalias !717
  br label %136

106:                                              ; preds = %29, %106
  %107 = phi i64 [ %134, %106 ], [ 0, %29 ]
  %108 = phi i16* [ %125, %106 ], [ %31, %29 ]
  %109 = load i16, i16* %108, align 2
  %110 = zext i16 %109 to i32
  %111 = mul nuw nsw i32 %22, %110
  %112 = getelementptr inbounds i16, i16* %108, i64 1
  %113 = load i16, i16* %112, align 2
  %114 = zext i16 %113 to i32
  %115 = mul nuw nsw i32 %24, %114
  %116 = add nuw nsw i32 %111, 64
  %117 = add nuw nsw i32 %116, %115
  %118 = lshr i32 %117, 7
  %119 = trunc i32 %118 to i16
  %120 = getelementptr inbounds i16, i16* %33, i64 %107
  store i16 %119, i16* %120, align 2
  %121 = or i64 %107, 1
  %122 = load i16, i16* %112, align 2
  %123 = zext i16 %122 to i32
  %124 = mul nuw nsw i32 %22, %123
  %125 = getelementptr inbounds i16, i16* %108, i64 2
  %126 = load i16, i16* %125, align 2
  %127 = zext i16 %126 to i32
  %128 = mul nuw nsw i32 %24, %127
  %129 = add nuw nsw i32 %124, 64
  %130 = add nuw nsw i32 %129, %128
  %131 = lshr i32 %130, 7
  %132 = trunc i32 %131 to i16
  %133 = getelementptr inbounds i16, i16* %33, i64 %121
  store i16 %132, i16* %133, align 2
  %134 = add nuw nsw i64 %107, 2
  %135 = icmp eq i64 %134, 32
  br i1 %135, label %136, label %106, !llvm.loop !722

136:                                              ; preds = %106, %42
  %137 = phi i16* [ %43, %42 ], [ %125, %106 ]
  %138 = getelementptr inbounds i16, i16* %137, i64 %20
  %139 = getelementptr inbounds i16, i16* %33, i64 32
  %140 = add nuw nsw i32 %32, 1
  %141 = icmp eq i32 %140, 33
  %142 = add i64 %30, 1
  br i1 %141, label %143, label %29

143:                                              ; preds = %136
  %144 = getelementptr inbounds [1024 x i16], [1024 x i16]* %9, i64 0, i64 0
  %145 = sext i32 %3 to i64
  %146 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %145, i64 0
  %147 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %145, i64 1
  %148 = load i8, i8* %146, align 2
  %149 = zext i8 %148 to i32
  %150 = load i8, i8* %147, align 1
  %151 = zext i8 %150 to i32
  %152 = insertelement <8 x i32> undef, i32 %149, i32 0
  %153 = shufflevector <8 x i32> %152, <8 x i32> undef, <8 x i32> zeroinitializer
  %154 = insertelement <8 x i32> undef, i32 %151, i32 0
  %155 = shufflevector <8 x i32> %154, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %156

156:                                              ; preds = %265, %143
  %157 = phi i64 [ %270, %265 ], [ 0, %143 ]
  %158 = phi i32 [ %268, %265 ], [ 0, %143 ]
  %159 = phi i16* [ %266, %265 ], [ %12, %143 ]
  %160 = phi i16* [ %267, %265 ], [ %144, %143 ]
  %161 = shl nuw nsw i64 %157, 5
  %162 = add i64 %161, 32
  %163 = getelementptr [1024 x i16], [1024 x i16]* %9, i64 0, i64 %162
  %164 = getelementptr [1024 x i16], [1024 x i16]* %9, i64 0, i64 %161
  %165 = getelementptr i16, i16* %159, i64 64
  %166 = icmp ult i16* %164, %165
  %167 = icmp ult i16* %159, %163
  %168 = and i1 %166, %167
  br i1 %168, label %233, label %169

169:                                              ; preds = %156
  %170 = getelementptr i16, i16* %159, i64 32
  %171 = bitcast i16* %159 to <8 x i16>*
  %172 = load <8 x i16>, <8 x i16>* %171, align 2, !alias.scope !723
  %173 = zext <8 x i16> %172 to <8 x i32>
  %174 = mul nuw nsw <8 x i32> %153, %173
  %175 = getelementptr inbounds i16, i16* %159, i64 32
  %176 = bitcast i16* %175 to <8 x i16>*
  %177 = load <8 x i16>, <8 x i16>* %176, align 2, !alias.scope !723
  %178 = zext <8 x i16> %177 to <8 x i32>
  %179 = mul nuw nsw <8 x i32> %155, %178
  %180 = add nuw nsw <8 x i32> %174, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %181 = add nuw nsw <8 x i32> %180, %179
  %182 = lshr <8 x i32> %181, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %183 = trunc <8 x i32> %182 to <8 x i16>
  %184 = bitcast i16* %160 to <8 x i16>*
  store <8 x i16> %183, <8 x i16>* %184, align 2, !alias.scope !726, !noalias !723
  %185 = getelementptr i16, i16* %159, i64 8
  %186 = bitcast i16* %185 to <8 x i16>*
  %187 = load <8 x i16>, <8 x i16>* %186, align 2, !alias.scope !723
  %188 = zext <8 x i16> %187 to <8 x i32>
  %189 = mul nuw nsw <8 x i32> %153, %188
  %190 = getelementptr inbounds i16, i16* %159, i64 40
  %191 = bitcast i16* %190 to <8 x i16>*
  %192 = load <8 x i16>, <8 x i16>* %191, align 2, !alias.scope !723
  %193 = zext <8 x i16> %192 to <8 x i32>
  %194 = mul nuw nsw <8 x i32> %155, %193
  %195 = add nuw nsw <8 x i32> %189, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %196 = add nuw nsw <8 x i32> %195, %194
  %197 = lshr <8 x i32> %196, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %198 = trunc <8 x i32> %197 to <8 x i16>
  %199 = getelementptr inbounds i16, i16* %160, i64 8
  %200 = bitcast i16* %199 to <8 x i16>*
  store <8 x i16> %198, <8 x i16>* %200, align 2, !alias.scope !726, !noalias !723
  %201 = getelementptr i16, i16* %159, i64 16
  %202 = bitcast i16* %201 to <8 x i16>*
  %203 = load <8 x i16>, <8 x i16>* %202, align 2, !alias.scope !723
  %204 = zext <8 x i16> %203 to <8 x i32>
  %205 = mul nuw nsw <8 x i32> %153, %204
  %206 = getelementptr inbounds i16, i16* %159, i64 48
  %207 = bitcast i16* %206 to <8 x i16>*
  %208 = load <8 x i16>, <8 x i16>* %207, align 2, !alias.scope !723
  %209 = zext <8 x i16> %208 to <8 x i32>
  %210 = mul nuw nsw <8 x i32> %155, %209
  %211 = add nuw nsw <8 x i32> %205, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %212 = add nuw nsw <8 x i32> %211, %210
  %213 = lshr <8 x i32> %212, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %214 = trunc <8 x i32> %213 to <8 x i16>
  %215 = getelementptr inbounds i16, i16* %160, i64 16
  %216 = bitcast i16* %215 to <8 x i16>*
  store <8 x i16> %214, <8 x i16>* %216, align 2, !alias.scope !726, !noalias !723
  %217 = getelementptr i16, i16* %159, i64 24
  %218 = bitcast i16* %217 to <8 x i16>*
  %219 = load <8 x i16>, <8 x i16>* %218, align 2, !alias.scope !723
  %220 = zext <8 x i16> %219 to <8 x i32>
  %221 = mul nuw nsw <8 x i32> %153, %220
  %222 = getelementptr inbounds i16, i16* %159, i64 56
  %223 = bitcast i16* %222 to <8 x i16>*
  %224 = load <8 x i16>, <8 x i16>* %223, align 2, !alias.scope !723
  %225 = zext <8 x i16> %224 to <8 x i32>
  %226 = mul nuw nsw <8 x i32> %155, %225
  %227 = add nuw nsw <8 x i32> %221, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %228 = add nuw nsw <8 x i32> %227, %226
  %229 = lshr <8 x i32> %228, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %230 = trunc <8 x i32> %229 to <8 x i16>
  %231 = getelementptr inbounds i16, i16* %160, i64 24
  %232 = bitcast i16* %231 to <8 x i16>*
  store <8 x i16> %230, <8 x i16>* %232, align 2, !alias.scope !726, !noalias !723
  br label %265

233:                                              ; preds = %156, %233
  %234 = phi i64 [ %263, %233 ], [ 0, %156 ]
  %235 = phi i16* [ %262, %233 ], [ %159, %156 ]
  %236 = load i16, i16* %235, align 2
  %237 = zext i16 %236 to i32
  %238 = mul nuw nsw i32 %149, %237
  %239 = getelementptr inbounds i16, i16* %235, i64 32
  %240 = load i16, i16* %239, align 2
  %241 = zext i16 %240 to i32
  %242 = mul nuw nsw i32 %151, %241
  %243 = add nuw nsw i32 %238, 64
  %244 = add nuw nsw i32 %243, %242
  %245 = lshr i32 %244, 7
  %246 = trunc i32 %245 to i16
  %247 = getelementptr inbounds i16, i16* %160, i64 %234
  store i16 %246, i16* %247, align 2
  %248 = getelementptr inbounds i16, i16* %235, i64 1
  %249 = or i64 %234, 1
  %250 = load i16, i16* %248, align 2
  %251 = zext i16 %250 to i32
  %252 = mul nuw nsw i32 %149, %251
  %253 = getelementptr inbounds i16, i16* %235, i64 33
  %254 = load i16, i16* %253, align 2
  %255 = zext i16 %254 to i32
  %256 = mul nuw nsw i32 %151, %255
  %257 = add nuw nsw i32 %252, 64
  %258 = add nuw nsw i32 %257, %256
  %259 = lshr i32 %258, 7
  %260 = trunc i32 %259 to i16
  %261 = getelementptr inbounds i16, i16* %160, i64 %249
  store i16 %260, i16* %261, align 2
  %262 = getelementptr inbounds i16, i16* %235, i64 2
  %263 = add nuw nsw i64 %234, 2
  %264 = icmp eq i64 %263, 32
  br i1 %264, label %265, label %233, !llvm.loop !728

265:                                              ; preds = %233, %169
  %266 = phi i16* [ %170, %169 ], [ %262, %233 ]
  %267 = getelementptr inbounds i16, i16* %160, i64 32
  %268 = add nuw nsw i32 %158, 1
  %269 = icmp eq i32 %268, 32
  %270 = add i64 %157, 1
  br i1 %269, label %271, label %156

271:                                              ; preds = %265
  %272 = ptrtoint i8* %4 to i64
  %273 = shl i64 %272, 1
  %274 = inttoptr i64 %273 to i16*
  %275 = sext i32 %5 to i64
  br label %276

276:                                              ; preds = %313, %271
  %277 = phi i64 [ 0, %271 ], [ %310, %313 ]
  %278 = phi i64 [ 0, %271 ], [ %307, %313 ]
  %279 = phi i32 [ 0, %271 ], [ %316, %313 ]
  %280 = phi i16* [ %274, %271 ], [ %315, %313 ]
  %281 = phi i16* [ %144, %271 ], [ %314, %313 ]
  br label %282

282:                                              ; preds = %282, %276
  %283 = phi i64 [ %277, %276 ], [ %310, %282 ]
  %284 = phi i64 [ %278, %276 ], [ %307, %282 ]
  %285 = phi i64 [ 0, %276 ], [ %311, %282 ]
  %286 = getelementptr inbounds i16, i16* %281, i64 %285
  %287 = load i16, i16* %286, align 2
  %288 = zext i16 %287 to i32
  %289 = getelementptr inbounds i16, i16* %280, i64 %285
  %290 = load i16, i16* %289, align 2
  %291 = zext i16 %290 to i32
  %292 = sub nsw i32 %288, %291
  %293 = sext i32 %292 to i64
  %294 = add nsw i64 %284, %293
  %295 = mul nsw i32 %292, %292
  %296 = zext i32 %295 to i64
  %297 = add i64 %283, %296
  %298 = or i64 %285, 1
  %299 = getelementptr inbounds i16, i16* %281, i64 %298
  %300 = load i16, i16* %299, align 2
  %301 = zext i16 %300 to i32
  %302 = getelementptr inbounds i16, i16* %280, i64 %298
  %303 = load i16, i16* %302, align 2
  %304 = zext i16 %303 to i32
  %305 = sub nsw i32 %301, %304
  %306 = sext i32 %305 to i64
  %307 = add nsw i64 %294, %306
  %308 = mul nsw i32 %305, %305
  %309 = zext i32 %308 to i64
  %310 = add i64 %297, %309
  %311 = add nuw nsw i64 %285, 2
  %312 = icmp eq i64 %311, 32
  br i1 %312, label %313, label %282

313:                                              ; preds = %282
  %314 = getelementptr inbounds i16, i16* %281, i64 32
  %315 = getelementptr inbounds i16, i16* %280, i64 %275
  %316 = add nuw nsw i32 %279, 1
  %317 = icmp eq i32 %316, 32
  br i1 %317, label %318, label %276

318:                                              ; preds = %313
  %319 = add i64 %310, 128
  %320 = lshr i64 %319, 8
  %321 = trunc i64 %320 to i32
  store i32 %321, i32* %6, align 4
  %322 = and i64 %320, 4294967295
  %323 = shl i64 %307, 28
  %324 = add i64 %323, 2147483648
  %325 = ashr i64 %324, 32
  %326 = mul nsw i64 %325, %325
  %327 = lshr i64 %326, 10
  %328 = sub nsw i64 %322, %327
  %329 = icmp sgt i64 %328, -1
  %330 = trunc i64 %328 to i32
  %331 = select i1 %329, i32 %330, i32 0
  call void @llvm.lifetime.end.p0i8(i64 2048, i8* nonnull %11) #4
  call void @llvm.lifetime.end.p0i8(i64 2112, i8* nonnull %10) #4
  ret i32 %331
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_highbd_8_sub_pixel_avg_variance32x32_c(i8*, i32, i32, i32, i8*, i32, i32* nocapture, i8*) local_unnamed_addr #2 {
  %9 = alloca [1056 x i16], align 16
  %10 = alloca [1024 x i16], align 16
  %11 = alloca [1024 x i16], align 16
  %12 = bitcast [1056 x i16]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2112, i8* nonnull %12) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %12, i8 -86, i64 2112, i1 false)
  %13 = bitcast [1024 x i16]* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2048, i8* nonnull %13) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %13, i8 -86, i64 2048, i1 false)
  %14 = bitcast [1024 x i16]* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2048, i8* nonnull %14) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %14, i8 -86, i64 2048, i1 false)
  %15 = getelementptr inbounds [1056 x i16], [1056 x i16]* %9, i64 0, i64 0
  %16 = sext i32 %2 to i64
  %17 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %16, i64 0
  %18 = ptrtoint i8* %0 to i64
  %19 = shl i64 %18, 1
  %20 = inttoptr i64 %19 to i16*
  %21 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %16, i64 1
  %22 = add i32 %1, -32
  %23 = zext i32 %22 to i64
  %24 = load i8, i8* %17, align 2
  %25 = zext i8 %24 to i32
  %26 = load i8, i8* %21, align 1
  %27 = zext i8 %26 to i32
  %28 = insertelement <8 x i32> undef, i32 %25, i32 0
  %29 = shufflevector <8 x i32> %28, <8 x i32> undef, <8 x i32> zeroinitializer
  %30 = insertelement <8 x i32> undef, i32 %27, i32 0
  %31 = shufflevector <8 x i32> %30, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %32

32:                                               ; preds = %139, %8
  %33 = phi i64 [ %145, %139 ], [ 0, %8 ]
  %34 = phi i16* [ %141, %139 ], [ %20, %8 ]
  %35 = phi i32 [ %143, %139 ], [ 0, %8 ]
  %36 = phi i16* [ %142, %139 ], [ %15, %8 ]
  %37 = shl nuw nsw i64 %33, 5
  %38 = add i64 %37, 32
  %39 = getelementptr [1056 x i16], [1056 x i16]* %9, i64 0, i64 %38
  %40 = getelementptr [1056 x i16], [1056 x i16]* %9, i64 0, i64 %37
  %41 = getelementptr i16, i16* %34, i64 33
  %42 = icmp ult i16* %40, %41
  %43 = icmp ult i16* %34, %39
  %44 = and i1 %42, %43
  br i1 %44, label %109, label %45

45:                                               ; preds = %32
  %46 = getelementptr i16, i16* %34, i64 32
  %47 = bitcast i16* %34 to <8 x i16>*
  %48 = load <8 x i16>, <8 x i16>* %47, align 2, !alias.scope !729
  %49 = zext <8 x i16> %48 to <8 x i32>
  %50 = mul nuw nsw <8 x i32> %29, %49
  %51 = getelementptr inbounds i16, i16* %34, i64 1
  %52 = bitcast i16* %51 to <8 x i16>*
  %53 = load <8 x i16>, <8 x i16>* %52, align 2, !alias.scope !729
  %54 = zext <8 x i16> %53 to <8 x i32>
  %55 = mul nuw nsw <8 x i32> %31, %54
  %56 = add nuw nsw <8 x i32> %50, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %57 = add nuw nsw <8 x i32> %56, %55
  %58 = lshr <8 x i32> %57, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %59 = trunc <8 x i32> %58 to <8 x i16>
  %60 = bitcast i16* %36 to <8 x i16>*
  store <8 x i16> %59, <8 x i16>* %60, align 2, !alias.scope !732, !noalias !729
  %61 = getelementptr i16, i16* %34, i64 8
  %62 = bitcast i16* %61 to <8 x i16>*
  %63 = load <8 x i16>, <8 x i16>* %62, align 2, !alias.scope !729
  %64 = zext <8 x i16> %63 to <8 x i32>
  %65 = mul nuw nsw <8 x i32> %29, %64
  %66 = getelementptr inbounds i16, i16* %34, i64 9
  %67 = bitcast i16* %66 to <8 x i16>*
  %68 = load <8 x i16>, <8 x i16>* %67, align 2, !alias.scope !729
  %69 = zext <8 x i16> %68 to <8 x i32>
  %70 = mul nuw nsw <8 x i32> %31, %69
  %71 = add nuw nsw <8 x i32> %65, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %72 = add nuw nsw <8 x i32> %71, %70
  %73 = lshr <8 x i32> %72, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %74 = trunc <8 x i32> %73 to <8 x i16>
  %75 = getelementptr inbounds i16, i16* %36, i64 8
  %76 = bitcast i16* %75 to <8 x i16>*
  store <8 x i16> %74, <8 x i16>* %76, align 2, !alias.scope !732, !noalias !729
  %77 = getelementptr i16, i16* %34, i64 16
  %78 = bitcast i16* %77 to <8 x i16>*
  %79 = load <8 x i16>, <8 x i16>* %78, align 2, !alias.scope !729
  %80 = zext <8 x i16> %79 to <8 x i32>
  %81 = mul nuw nsw <8 x i32> %29, %80
  %82 = getelementptr inbounds i16, i16* %34, i64 17
  %83 = bitcast i16* %82 to <8 x i16>*
  %84 = load <8 x i16>, <8 x i16>* %83, align 2, !alias.scope !729
  %85 = zext <8 x i16> %84 to <8 x i32>
  %86 = mul nuw nsw <8 x i32> %31, %85
  %87 = add nuw nsw <8 x i32> %81, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %88 = add nuw nsw <8 x i32> %87, %86
  %89 = lshr <8 x i32> %88, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %90 = trunc <8 x i32> %89 to <8 x i16>
  %91 = getelementptr inbounds i16, i16* %36, i64 16
  %92 = bitcast i16* %91 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %92, align 2, !alias.scope !732, !noalias !729
  %93 = getelementptr i16, i16* %34, i64 24
  %94 = bitcast i16* %93 to <8 x i16>*
  %95 = load <8 x i16>, <8 x i16>* %94, align 2, !alias.scope !729
  %96 = zext <8 x i16> %95 to <8 x i32>
  %97 = mul nuw nsw <8 x i32> %29, %96
  %98 = getelementptr inbounds i16, i16* %34, i64 25
  %99 = bitcast i16* %98 to <8 x i16>*
  %100 = load <8 x i16>, <8 x i16>* %99, align 2, !alias.scope !729
  %101 = zext <8 x i16> %100 to <8 x i32>
  %102 = mul nuw nsw <8 x i32> %31, %101
  %103 = add nuw nsw <8 x i32> %97, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %104 = add nuw nsw <8 x i32> %103, %102
  %105 = lshr <8 x i32> %104, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %106 = trunc <8 x i32> %105 to <8 x i16>
  %107 = getelementptr inbounds i16, i16* %36, i64 24
  %108 = bitcast i16* %107 to <8 x i16>*
  store <8 x i16> %106, <8 x i16>* %108, align 2, !alias.scope !732, !noalias !729
  br label %139

109:                                              ; preds = %32, %109
  %110 = phi i64 [ %137, %109 ], [ 0, %32 ]
  %111 = phi i16* [ %128, %109 ], [ %34, %32 ]
  %112 = load i16, i16* %111, align 2
  %113 = zext i16 %112 to i32
  %114 = mul nuw nsw i32 %25, %113
  %115 = getelementptr inbounds i16, i16* %111, i64 1
  %116 = load i16, i16* %115, align 2
  %117 = zext i16 %116 to i32
  %118 = mul nuw nsw i32 %27, %117
  %119 = add nuw nsw i32 %114, 64
  %120 = add nuw nsw i32 %119, %118
  %121 = lshr i32 %120, 7
  %122 = trunc i32 %121 to i16
  %123 = getelementptr inbounds i16, i16* %36, i64 %110
  store i16 %122, i16* %123, align 2
  %124 = or i64 %110, 1
  %125 = load i16, i16* %115, align 2
  %126 = zext i16 %125 to i32
  %127 = mul nuw nsw i32 %25, %126
  %128 = getelementptr inbounds i16, i16* %111, i64 2
  %129 = load i16, i16* %128, align 2
  %130 = zext i16 %129 to i32
  %131 = mul nuw nsw i32 %27, %130
  %132 = add nuw nsw i32 %127, 64
  %133 = add nuw nsw i32 %132, %131
  %134 = lshr i32 %133, 7
  %135 = trunc i32 %134 to i16
  %136 = getelementptr inbounds i16, i16* %36, i64 %124
  store i16 %135, i16* %136, align 2
  %137 = add nuw nsw i64 %110, 2
  %138 = icmp eq i64 %137, 32
  br i1 %138, label %139, label %109, !llvm.loop !734

139:                                              ; preds = %109, %45
  %140 = phi i16* [ %46, %45 ], [ %128, %109 ]
  %141 = getelementptr inbounds i16, i16* %140, i64 %23
  %142 = getelementptr inbounds i16, i16* %36, i64 32
  %143 = add nuw nsw i32 %35, 1
  %144 = icmp eq i32 %143, 33
  %145 = add i64 %33, 1
  br i1 %144, label %146, label %32

146:                                              ; preds = %139
  %147 = getelementptr inbounds [1024 x i16], [1024 x i16]* %10, i64 0, i64 0
  %148 = sext i32 %3 to i64
  %149 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %148, i64 0
  %150 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %148, i64 1
  %151 = load i8, i8* %149, align 2
  %152 = zext i8 %151 to i32
  %153 = load i8, i8* %150, align 1
  %154 = zext i8 %153 to i32
  %155 = insertelement <8 x i32> undef, i32 %152, i32 0
  %156 = shufflevector <8 x i32> %155, <8 x i32> undef, <8 x i32> zeroinitializer
  %157 = insertelement <8 x i32> undef, i32 %154, i32 0
  %158 = shufflevector <8 x i32> %157, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %159

159:                                              ; preds = %268, %146
  %160 = phi i64 [ %273, %268 ], [ 0, %146 ]
  %161 = phi i32 [ %271, %268 ], [ 0, %146 ]
  %162 = phi i16* [ %269, %268 ], [ %15, %146 ]
  %163 = phi i16* [ %270, %268 ], [ %147, %146 ]
  %164 = shl nuw nsw i64 %160, 5
  %165 = add i64 %164, 32
  %166 = getelementptr [1024 x i16], [1024 x i16]* %10, i64 0, i64 %165
  %167 = getelementptr [1024 x i16], [1024 x i16]* %10, i64 0, i64 %164
  %168 = getelementptr i16, i16* %162, i64 64
  %169 = icmp ult i16* %167, %168
  %170 = icmp ult i16* %162, %166
  %171 = and i1 %169, %170
  br i1 %171, label %236, label %172

172:                                              ; preds = %159
  %173 = getelementptr i16, i16* %162, i64 32
  %174 = bitcast i16* %162 to <8 x i16>*
  %175 = load <8 x i16>, <8 x i16>* %174, align 2, !alias.scope !735
  %176 = zext <8 x i16> %175 to <8 x i32>
  %177 = mul nuw nsw <8 x i32> %156, %176
  %178 = getelementptr inbounds i16, i16* %162, i64 32
  %179 = bitcast i16* %178 to <8 x i16>*
  %180 = load <8 x i16>, <8 x i16>* %179, align 2, !alias.scope !735
  %181 = zext <8 x i16> %180 to <8 x i32>
  %182 = mul nuw nsw <8 x i32> %158, %181
  %183 = add nuw nsw <8 x i32> %177, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %184 = add nuw nsw <8 x i32> %183, %182
  %185 = lshr <8 x i32> %184, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %186 = trunc <8 x i32> %185 to <8 x i16>
  %187 = bitcast i16* %163 to <8 x i16>*
  store <8 x i16> %186, <8 x i16>* %187, align 2, !alias.scope !738, !noalias !735
  %188 = getelementptr i16, i16* %162, i64 8
  %189 = bitcast i16* %188 to <8 x i16>*
  %190 = load <8 x i16>, <8 x i16>* %189, align 2, !alias.scope !735
  %191 = zext <8 x i16> %190 to <8 x i32>
  %192 = mul nuw nsw <8 x i32> %156, %191
  %193 = getelementptr inbounds i16, i16* %162, i64 40
  %194 = bitcast i16* %193 to <8 x i16>*
  %195 = load <8 x i16>, <8 x i16>* %194, align 2, !alias.scope !735
  %196 = zext <8 x i16> %195 to <8 x i32>
  %197 = mul nuw nsw <8 x i32> %158, %196
  %198 = add nuw nsw <8 x i32> %192, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %199 = add nuw nsw <8 x i32> %198, %197
  %200 = lshr <8 x i32> %199, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %201 = trunc <8 x i32> %200 to <8 x i16>
  %202 = getelementptr inbounds i16, i16* %163, i64 8
  %203 = bitcast i16* %202 to <8 x i16>*
  store <8 x i16> %201, <8 x i16>* %203, align 2, !alias.scope !738, !noalias !735
  %204 = getelementptr i16, i16* %162, i64 16
  %205 = bitcast i16* %204 to <8 x i16>*
  %206 = load <8 x i16>, <8 x i16>* %205, align 2, !alias.scope !735
  %207 = zext <8 x i16> %206 to <8 x i32>
  %208 = mul nuw nsw <8 x i32> %156, %207
  %209 = getelementptr inbounds i16, i16* %162, i64 48
  %210 = bitcast i16* %209 to <8 x i16>*
  %211 = load <8 x i16>, <8 x i16>* %210, align 2, !alias.scope !735
  %212 = zext <8 x i16> %211 to <8 x i32>
  %213 = mul nuw nsw <8 x i32> %158, %212
  %214 = add nuw nsw <8 x i32> %208, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %215 = add nuw nsw <8 x i32> %214, %213
  %216 = lshr <8 x i32> %215, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %217 = trunc <8 x i32> %216 to <8 x i16>
  %218 = getelementptr inbounds i16, i16* %163, i64 16
  %219 = bitcast i16* %218 to <8 x i16>*
  store <8 x i16> %217, <8 x i16>* %219, align 2, !alias.scope !738, !noalias !735
  %220 = getelementptr i16, i16* %162, i64 24
  %221 = bitcast i16* %220 to <8 x i16>*
  %222 = load <8 x i16>, <8 x i16>* %221, align 2, !alias.scope !735
  %223 = zext <8 x i16> %222 to <8 x i32>
  %224 = mul nuw nsw <8 x i32> %156, %223
  %225 = getelementptr inbounds i16, i16* %162, i64 56
  %226 = bitcast i16* %225 to <8 x i16>*
  %227 = load <8 x i16>, <8 x i16>* %226, align 2, !alias.scope !735
  %228 = zext <8 x i16> %227 to <8 x i32>
  %229 = mul nuw nsw <8 x i32> %158, %228
  %230 = add nuw nsw <8 x i32> %224, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %231 = add nuw nsw <8 x i32> %230, %229
  %232 = lshr <8 x i32> %231, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %233 = trunc <8 x i32> %232 to <8 x i16>
  %234 = getelementptr inbounds i16, i16* %163, i64 24
  %235 = bitcast i16* %234 to <8 x i16>*
  store <8 x i16> %233, <8 x i16>* %235, align 2, !alias.scope !738, !noalias !735
  br label %268

236:                                              ; preds = %159, %236
  %237 = phi i64 [ %266, %236 ], [ 0, %159 ]
  %238 = phi i16* [ %265, %236 ], [ %162, %159 ]
  %239 = load i16, i16* %238, align 2
  %240 = zext i16 %239 to i32
  %241 = mul nuw nsw i32 %152, %240
  %242 = getelementptr inbounds i16, i16* %238, i64 32
  %243 = load i16, i16* %242, align 2
  %244 = zext i16 %243 to i32
  %245 = mul nuw nsw i32 %154, %244
  %246 = add nuw nsw i32 %241, 64
  %247 = add nuw nsw i32 %246, %245
  %248 = lshr i32 %247, 7
  %249 = trunc i32 %248 to i16
  %250 = getelementptr inbounds i16, i16* %163, i64 %237
  store i16 %249, i16* %250, align 2
  %251 = getelementptr inbounds i16, i16* %238, i64 1
  %252 = or i64 %237, 1
  %253 = load i16, i16* %251, align 2
  %254 = zext i16 %253 to i32
  %255 = mul nuw nsw i32 %152, %254
  %256 = getelementptr inbounds i16, i16* %238, i64 33
  %257 = load i16, i16* %256, align 2
  %258 = zext i16 %257 to i32
  %259 = mul nuw nsw i32 %154, %258
  %260 = add nuw nsw i32 %255, 64
  %261 = add nuw nsw i32 %260, %259
  %262 = lshr i32 %261, 7
  %263 = trunc i32 %262 to i16
  %264 = getelementptr inbounds i16, i16* %163, i64 %252
  store i16 %263, i16* %264, align 2
  %265 = getelementptr inbounds i16, i16* %238, i64 2
  %266 = add nuw nsw i64 %237, 2
  %267 = icmp eq i64 %266, 32
  br i1 %267, label %268, label %236, !llvm.loop !740

268:                                              ; preds = %236, %172
  %269 = phi i16* [ %173, %172 ], [ %265, %236 ]
  %270 = getelementptr inbounds i16, i16* %163, i64 32
  %271 = add nuw nsw i32 %161, 1
  %272 = icmp eq i32 %271, 32
  %273 = add i64 %160, 1
  br i1 %272, label %274, label %159

274:                                              ; preds = %268
  %275 = getelementptr inbounds [1024 x i16], [1024 x i16]* %11, i64 0, i64 0
  %276 = ptrtoint i8* %7 to i64
  %277 = shl i64 %276, 1
  %278 = inttoptr i64 %277 to i16*
  br label %279

279:                                              ; preds = %381, %274
  %280 = phi i64 [ %387, %381 ], [ 0, %274 ]
  %281 = phi i16* [ %382, %381 ], [ %275, %274 ]
  %282 = phi i32 [ %385, %381 ], [ 0, %274 ]
  %283 = phi i16* [ %383, %381 ], [ %278, %274 ]
  %284 = phi i16* [ %384, %381 ], [ %147, %274 ]
  %285 = shl nuw nsw i64 %280, 5
  %286 = getelementptr [1024 x i16], [1024 x i16]* %11, i64 0, i64 %285
  %287 = add i64 %285, 32
  %288 = getelementptr [1024 x i16], [1024 x i16]* %11, i64 0, i64 %287
  %289 = getelementptr [1024 x i16], [1024 x i16]* %10, i64 0, i64 %287
  %290 = getelementptr [1024 x i16], [1024 x i16]* %10, i64 0, i64 %285
  %291 = getelementptr i16, i16* %278, i64 %287
  %292 = getelementptr i16, i16* %278, i64 %285
  %293 = icmp ult i16* %286, %291
  %294 = icmp ult i16* %292, %288
  %295 = and i1 %293, %294
  %296 = icmp ult i16* %286, %289
  %297 = icmp ult i16* %290, %288
  %298 = and i1 %296, %297
  %299 = or i1 %295, %298
  br i1 %299, label %354, label %300

300:                                              ; preds = %279
  %301 = bitcast i16* %283 to <8 x i16>*
  %302 = load <8 x i16>, <8 x i16>* %301, align 2, !alias.scope !741
  %303 = zext <8 x i16> %302 to <8 x i32>
  %304 = bitcast i16* %284 to <8 x i16>*
  %305 = load <8 x i16>, <8 x i16>* %304, align 2, !alias.scope !744
  %306 = zext <8 x i16> %305 to <8 x i32>
  %307 = add nuw nsw <8 x i32> %303, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %308 = add nuw nsw <8 x i32> %307, %306
  %309 = lshr <8 x i32> %308, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %310 = trunc <8 x i32> %309 to <8 x i16>
  %311 = bitcast i16* %281 to <8 x i16>*
  store <8 x i16> %310, <8 x i16>* %311, align 2, !alias.scope !746, !noalias !748
  %312 = getelementptr inbounds i16, i16* %283, i64 8
  %313 = bitcast i16* %312 to <8 x i16>*
  %314 = load <8 x i16>, <8 x i16>* %313, align 2, !alias.scope !741
  %315 = zext <8 x i16> %314 to <8 x i32>
  %316 = getelementptr inbounds i16, i16* %284, i64 8
  %317 = bitcast i16* %316 to <8 x i16>*
  %318 = load <8 x i16>, <8 x i16>* %317, align 2, !alias.scope !744
  %319 = zext <8 x i16> %318 to <8 x i32>
  %320 = add nuw nsw <8 x i32> %315, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %321 = add nuw nsw <8 x i32> %320, %319
  %322 = lshr <8 x i32> %321, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %323 = trunc <8 x i32> %322 to <8 x i16>
  %324 = getelementptr inbounds i16, i16* %281, i64 8
  %325 = bitcast i16* %324 to <8 x i16>*
  store <8 x i16> %323, <8 x i16>* %325, align 2, !alias.scope !746, !noalias !748
  %326 = getelementptr inbounds i16, i16* %283, i64 16
  %327 = bitcast i16* %326 to <8 x i16>*
  %328 = load <8 x i16>, <8 x i16>* %327, align 2, !alias.scope !741
  %329 = zext <8 x i16> %328 to <8 x i32>
  %330 = getelementptr inbounds i16, i16* %284, i64 16
  %331 = bitcast i16* %330 to <8 x i16>*
  %332 = load <8 x i16>, <8 x i16>* %331, align 2, !alias.scope !744
  %333 = zext <8 x i16> %332 to <8 x i32>
  %334 = add nuw nsw <8 x i32> %329, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %335 = add nuw nsw <8 x i32> %334, %333
  %336 = lshr <8 x i32> %335, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %337 = trunc <8 x i32> %336 to <8 x i16>
  %338 = getelementptr inbounds i16, i16* %281, i64 16
  %339 = bitcast i16* %338 to <8 x i16>*
  store <8 x i16> %337, <8 x i16>* %339, align 2, !alias.scope !746, !noalias !748
  %340 = getelementptr inbounds i16, i16* %283, i64 24
  %341 = bitcast i16* %340 to <8 x i16>*
  %342 = load <8 x i16>, <8 x i16>* %341, align 2, !alias.scope !741
  %343 = zext <8 x i16> %342 to <8 x i32>
  %344 = getelementptr inbounds i16, i16* %284, i64 24
  %345 = bitcast i16* %344 to <8 x i16>*
  %346 = load <8 x i16>, <8 x i16>* %345, align 2, !alias.scope !744
  %347 = zext <8 x i16> %346 to <8 x i32>
  %348 = add nuw nsw <8 x i32> %343, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %349 = add nuw nsw <8 x i32> %348, %347
  %350 = lshr <8 x i32> %349, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %351 = trunc <8 x i32> %350 to <8 x i16>
  %352 = getelementptr inbounds i16, i16* %281, i64 24
  %353 = bitcast i16* %352 to <8 x i16>*
  store <8 x i16> %351, <8 x i16>* %353, align 2, !alias.scope !746, !noalias !748
  br label %381

354:                                              ; preds = %279, %354
  %355 = phi i64 [ %379, %354 ], [ 0, %279 ]
  %356 = getelementptr inbounds i16, i16* %283, i64 %355
  %357 = load i16, i16* %356, align 2
  %358 = zext i16 %357 to i32
  %359 = getelementptr inbounds i16, i16* %284, i64 %355
  %360 = load i16, i16* %359, align 2
  %361 = zext i16 %360 to i32
  %362 = add nuw nsw i32 %358, 1
  %363 = add nuw nsw i32 %362, %361
  %364 = lshr i32 %363, 1
  %365 = trunc i32 %364 to i16
  %366 = getelementptr inbounds i16, i16* %281, i64 %355
  store i16 %365, i16* %366, align 2
  %367 = or i64 %355, 1
  %368 = getelementptr inbounds i16, i16* %283, i64 %367
  %369 = load i16, i16* %368, align 2
  %370 = zext i16 %369 to i32
  %371 = getelementptr inbounds i16, i16* %284, i64 %367
  %372 = load i16, i16* %371, align 2
  %373 = zext i16 %372 to i32
  %374 = add nuw nsw i32 %370, 1
  %375 = add nuw nsw i32 %374, %373
  %376 = lshr i32 %375, 1
  %377 = trunc i32 %376 to i16
  %378 = getelementptr inbounds i16, i16* %281, i64 %367
  store i16 %377, i16* %378, align 2
  %379 = add nuw nsw i64 %355, 2
  %380 = icmp eq i64 %379, 32
  br i1 %380, label %381, label %354, !llvm.loop !749

381:                                              ; preds = %354, %300
  %382 = getelementptr inbounds i16, i16* %281, i64 32
  %383 = getelementptr inbounds i16, i16* %283, i64 32
  %384 = getelementptr inbounds i16, i16* %284, i64 32
  %385 = add nuw nsw i32 %282, 1
  %386 = icmp eq i32 %385, 32
  %387 = add i64 %280, 1
  br i1 %386, label %388, label %279

388:                                              ; preds = %381
  %389 = ptrtoint i8* %4 to i64
  %390 = shl i64 %389, 1
  %391 = inttoptr i64 %390 to i16*
  %392 = sext i32 %5 to i64
  br label %393

393:                                              ; preds = %430, %388
  %394 = phi i64 [ 0, %388 ], [ %427, %430 ]
  %395 = phi i64 [ 0, %388 ], [ %424, %430 ]
  %396 = phi i32 [ 0, %388 ], [ %433, %430 ]
  %397 = phi i16* [ %391, %388 ], [ %432, %430 ]
  %398 = phi i16* [ %275, %388 ], [ %431, %430 ]
  br label %399

399:                                              ; preds = %399, %393
  %400 = phi i64 [ %394, %393 ], [ %427, %399 ]
  %401 = phi i64 [ %395, %393 ], [ %424, %399 ]
  %402 = phi i64 [ 0, %393 ], [ %428, %399 ]
  %403 = getelementptr inbounds i16, i16* %398, i64 %402
  %404 = load i16, i16* %403, align 2
  %405 = zext i16 %404 to i32
  %406 = getelementptr inbounds i16, i16* %397, i64 %402
  %407 = load i16, i16* %406, align 2
  %408 = zext i16 %407 to i32
  %409 = sub nsw i32 %405, %408
  %410 = sext i32 %409 to i64
  %411 = add nsw i64 %401, %410
  %412 = mul nsw i32 %409, %409
  %413 = zext i32 %412 to i64
  %414 = add i64 %400, %413
  %415 = or i64 %402, 1
  %416 = getelementptr inbounds i16, i16* %398, i64 %415
  %417 = load i16, i16* %416, align 2
  %418 = zext i16 %417 to i32
  %419 = getelementptr inbounds i16, i16* %397, i64 %415
  %420 = load i16, i16* %419, align 2
  %421 = zext i16 %420 to i32
  %422 = sub nsw i32 %418, %421
  %423 = sext i32 %422 to i64
  %424 = add nsw i64 %411, %423
  %425 = mul nsw i32 %422, %422
  %426 = zext i32 %425 to i64
  %427 = add i64 %414, %426
  %428 = add nuw nsw i64 %402, 2
  %429 = icmp eq i64 %428, 32
  br i1 %429, label %430, label %399

430:                                              ; preds = %399
  %431 = getelementptr inbounds i16, i16* %398, i64 32
  %432 = getelementptr inbounds i16, i16* %397, i64 %392
  %433 = add nuw nsw i32 %396, 1
  %434 = icmp eq i32 %433, 32
  br i1 %434, label %435, label %393

435:                                              ; preds = %430
  %436 = trunc i64 %427 to i32
  store i32 %436, i32* %6, align 4
  %437 = shl i64 %424, 32
  %438 = ashr exact i64 %437, 32
  %439 = mul nsw i64 %438, %438
  %440 = lshr i64 %439, 10
  %441 = trunc i64 %440 to i32
  %442 = sub i32 %436, %441
  call void @llvm.lifetime.end.p0i8(i64 2048, i8* nonnull %14) #4
  call void @llvm.lifetime.end.p0i8(i64 2048, i8* nonnull %13) #4
  call void @llvm.lifetime.end.p0i8(i64 2112, i8* nonnull %12) #4
  ret i32 %442
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_highbd_10_sub_pixel_avg_variance32x32_c(i8*, i32, i32, i32, i8*, i32, i32* nocapture, i8*) local_unnamed_addr #2 {
  %9 = alloca [1056 x i16], align 16
  %10 = alloca [1024 x i16], align 16
  %11 = alloca [1024 x i16], align 16
  %12 = bitcast [1056 x i16]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2112, i8* nonnull %12) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %12, i8 -86, i64 2112, i1 false)
  %13 = bitcast [1024 x i16]* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2048, i8* nonnull %13) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %13, i8 -86, i64 2048, i1 false)
  %14 = bitcast [1024 x i16]* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2048, i8* nonnull %14) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %14, i8 -86, i64 2048, i1 false)
  %15 = getelementptr inbounds [1056 x i16], [1056 x i16]* %9, i64 0, i64 0
  %16 = sext i32 %2 to i64
  %17 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %16, i64 0
  %18 = ptrtoint i8* %0 to i64
  %19 = shl i64 %18, 1
  %20 = inttoptr i64 %19 to i16*
  %21 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %16, i64 1
  %22 = add i32 %1, -32
  %23 = zext i32 %22 to i64
  %24 = load i8, i8* %17, align 2
  %25 = zext i8 %24 to i32
  %26 = load i8, i8* %21, align 1
  %27 = zext i8 %26 to i32
  %28 = insertelement <8 x i32> undef, i32 %25, i32 0
  %29 = shufflevector <8 x i32> %28, <8 x i32> undef, <8 x i32> zeroinitializer
  %30 = insertelement <8 x i32> undef, i32 %27, i32 0
  %31 = shufflevector <8 x i32> %30, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %32

32:                                               ; preds = %139, %8
  %33 = phi i64 [ %145, %139 ], [ 0, %8 ]
  %34 = phi i16* [ %141, %139 ], [ %20, %8 ]
  %35 = phi i32 [ %143, %139 ], [ 0, %8 ]
  %36 = phi i16* [ %142, %139 ], [ %15, %8 ]
  %37 = shl nuw nsw i64 %33, 5
  %38 = add i64 %37, 32
  %39 = getelementptr [1056 x i16], [1056 x i16]* %9, i64 0, i64 %38
  %40 = getelementptr [1056 x i16], [1056 x i16]* %9, i64 0, i64 %37
  %41 = getelementptr i16, i16* %34, i64 33
  %42 = icmp ult i16* %40, %41
  %43 = icmp ult i16* %34, %39
  %44 = and i1 %42, %43
  br i1 %44, label %109, label %45

45:                                               ; preds = %32
  %46 = getelementptr i16, i16* %34, i64 32
  %47 = bitcast i16* %34 to <8 x i16>*
  %48 = load <8 x i16>, <8 x i16>* %47, align 2, !alias.scope !750
  %49 = zext <8 x i16> %48 to <8 x i32>
  %50 = mul nuw nsw <8 x i32> %29, %49
  %51 = getelementptr inbounds i16, i16* %34, i64 1
  %52 = bitcast i16* %51 to <8 x i16>*
  %53 = load <8 x i16>, <8 x i16>* %52, align 2, !alias.scope !750
  %54 = zext <8 x i16> %53 to <8 x i32>
  %55 = mul nuw nsw <8 x i32> %31, %54
  %56 = add nuw nsw <8 x i32> %50, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %57 = add nuw nsw <8 x i32> %56, %55
  %58 = lshr <8 x i32> %57, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %59 = trunc <8 x i32> %58 to <8 x i16>
  %60 = bitcast i16* %36 to <8 x i16>*
  store <8 x i16> %59, <8 x i16>* %60, align 2, !alias.scope !753, !noalias !750
  %61 = getelementptr i16, i16* %34, i64 8
  %62 = bitcast i16* %61 to <8 x i16>*
  %63 = load <8 x i16>, <8 x i16>* %62, align 2, !alias.scope !750
  %64 = zext <8 x i16> %63 to <8 x i32>
  %65 = mul nuw nsw <8 x i32> %29, %64
  %66 = getelementptr inbounds i16, i16* %34, i64 9
  %67 = bitcast i16* %66 to <8 x i16>*
  %68 = load <8 x i16>, <8 x i16>* %67, align 2, !alias.scope !750
  %69 = zext <8 x i16> %68 to <8 x i32>
  %70 = mul nuw nsw <8 x i32> %31, %69
  %71 = add nuw nsw <8 x i32> %65, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %72 = add nuw nsw <8 x i32> %71, %70
  %73 = lshr <8 x i32> %72, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %74 = trunc <8 x i32> %73 to <8 x i16>
  %75 = getelementptr inbounds i16, i16* %36, i64 8
  %76 = bitcast i16* %75 to <8 x i16>*
  store <8 x i16> %74, <8 x i16>* %76, align 2, !alias.scope !753, !noalias !750
  %77 = getelementptr i16, i16* %34, i64 16
  %78 = bitcast i16* %77 to <8 x i16>*
  %79 = load <8 x i16>, <8 x i16>* %78, align 2, !alias.scope !750
  %80 = zext <8 x i16> %79 to <8 x i32>
  %81 = mul nuw nsw <8 x i32> %29, %80
  %82 = getelementptr inbounds i16, i16* %34, i64 17
  %83 = bitcast i16* %82 to <8 x i16>*
  %84 = load <8 x i16>, <8 x i16>* %83, align 2, !alias.scope !750
  %85 = zext <8 x i16> %84 to <8 x i32>
  %86 = mul nuw nsw <8 x i32> %31, %85
  %87 = add nuw nsw <8 x i32> %81, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %88 = add nuw nsw <8 x i32> %87, %86
  %89 = lshr <8 x i32> %88, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %90 = trunc <8 x i32> %89 to <8 x i16>
  %91 = getelementptr inbounds i16, i16* %36, i64 16
  %92 = bitcast i16* %91 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %92, align 2, !alias.scope !753, !noalias !750
  %93 = getelementptr i16, i16* %34, i64 24
  %94 = bitcast i16* %93 to <8 x i16>*
  %95 = load <8 x i16>, <8 x i16>* %94, align 2, !alias.scope !750
  %96 = zext <8 x i16> %95 to <8 x i32>
  %97 = mul nuw nsw <8 x i32> %29, %96
  %98 = getelementptr inbounds i16, i16* %34, i64 25
  %99 = bitcast i16* %98 to <8 x i16>*
  %100 = load <8 x i16>, <8 x i16>* %99, align 2, !alias.scope !750
  %101 = zext <8 x i16> %100 to <8 x i32>
  %102 = mul nuw nsw <8 x i32> %31, %101
  %103 = add nuw nsw <8 x i32> %97, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %104 = add nuw nsw <8 x i32> %103, %102
  %105 = lshr <8 x i32> %104, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %106 = trunc <8 x i32> %105 to <8 x i16>
  %107 = getelementptr inbounds i16, i16* %36, i64 24
  %108 = bitcast i16* %107 to <8 x i16>*
  store <8 x i16> %106, <8 x i16>* %108, align 2, !alias.scope !753, !noalias !750
  br label %139

109:                                              ; preds = %32, %109
  %110 = phi i64 [ %137, %109 ], [ 0, %32 ]
  %111 = phi i16* [ %128, %109 ], [ %34, %32 ]
  %112 = load i16, i16* %111, align 2
  %113 = zext i16 %112 to i32
  %114 = mul nuw nsw i32 %25, %113
  %115 = getelementptr inbounds i16, i16* %111, i64 1
  %116 = load i16, i16* %115, align 2
  %117 = zext i16 %116 to i32
  %118 = mul nuw nsw i32 %27, %117
  %119 = add nuw nsw i32 %114, 64
  %120 = add nuw nsw i32 %119, %118
  %121 = lshr i32 %120, 7
  %122 = trunc i32 %121 to i16
  %123 = getelementptr inbounds i16, i16* %36, i64 %110
  store i16 %122, i16* %123, align 2
  %124 = or i64 %110, 1
  %125 = load i16, i16* %115, align 2
  %126 = zext i16 %125 to i32
  %127 = mul nuw nsw i32 %25, %126
  %128 = getelementptr inbounds i16, i16* %111, i64 2
  %129 = load i16, i16* %128, align 2
  %130 = zext i16 %129 to i32
  %131 = mul nuw nsw i32 %27, %130
  %132 = add nuw nsw i32 %127, 64
  %133 = add nuw nsw i32 %132, %131
  %134 = lshr i32 %133, 7
  %135 = trunc i32 %134 to i16
  %136 = getelementptr inbounds i16, i16* %36, i64 %124
  store i16 %135, i16* %136, align 2
  %137 = add nuw nsw i64 %110, 2
  %138 = icmp eq i64 %137, 32
  br i1 %138, label %139, label %109, !llvm.loop !755

139:                                              ; preds = %109, %45
  %140 = phi i16* [ %46, %45 ], [ %128, %109 ]
  %141 = getelementptr inbounds i16, i16* %140, i64 %23
  %142 = getelementptr inbounds i16, i16* %36, i64 32
  %143 = add nuw nsw i32 %35, 1
  %144 = icmp eq i32 %143, 33
  %145 = add i64 %33, 1
  br i1 %144, label %146, label %32

146:                                              ; preds = %139
  %147 = getelementptr inbounds [1024 x i16], [1024 x i16]* %10, i64 0, i64 0
  %148 = sext i32 %3 to i64
  %149 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %148, i64 0
  %150 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %148, i64 1
  %151 = load i8, i8* %149, align 2
  %152 = zext i8 %151 to i32
  %153 = load i8, i8* %150, align 1
  %154 = zext i8 %153 to i32
  %155 = insertelement <8 x i32> undef, i32 %152, i32 0
  %156 = shufflevector <8 x i32> %155, <8 x i32> undef, <8 x i32> zeroinitializer
  %157 = insertelement <8 x i32> undef, i32 %154, i32 0
  %158 = shufflevector <8 x i32> %157, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %159

159:                                              ; preds = %268, %146
  %160 = phi i64 [ %273, %268 ], [ 0, %146 ]
  %161 = phi i32 [ %271, %268 ], [ 0, %146 ]
  %162 = phi i16* [ %269, %268 ], [ %15, %146 ]
  %163 = phi i16* [ %270, %268 ], [ %147, %146 ]
  %164 = shl nuw nsw i64 %160, 5
  %165 = add i64 %164, 32
  %166 = getelementptr [1024 x i16], [1024 x i16]* %10, i64 0, i64 %165
  %167 = getelementptr [1024 x i16], [1024 x i16]* %10, i64 0, i64 %164
  %168 = getelementptr i16, i16* %162, i64 64
  %169 = icmp ult i16* %167, %168
  %170 = icmp ult i16* %162, %166
  %171 = and i1 %169, %170
  br i1 %171, label %236, label %172

172:                                              ; preds = %159
  %173 = getelementptr i16, i16* %162, i64 32
  %174 = bitcast i16* %162 to <8 x i16>*
  %175 = load <8 x i16>, <8 x i16>* %174, align 2, !alias.scope !756
  %176 = zext <8 x i16> %175 to <8 x i32>
  %177 = mul nuw nsw <8 x i32> %156, %176
  %178 = getelementptr inbounds i16, i16* %162, i64 32
  %179 = bitcast i16* %178 to <8 x i16>*
  %180 = load <8 x i16>, <8 x i16>* %179, align 2, !alias.scope !756
  %181 = zext <8 x i16> %180 to <8 x i32>
  %182 = mul nuw nsw <8 x i32> %158, %181
  %183 = add nuw nsw <8 x i32> %177, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %184 = add nuw nsw <8 x i32> %183, %182
  %185 = lshr <8 x i32> %184, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %186 = trunc <8 x i32> %185 to <8 x i16>
  %187 = bitcast i16* %163 to <8 x i16>*
  store <8 x i16> %186, <8 x i16>* %187, align 2, !alias.scope !759, !noalias !756
  %188 = getelementptr i16, i16* %162, i64 8
  %189 = bitcast i16* %188 to <8 x i16>*
  %190 = load <8 x i16>, <8 x i16>* %189, align 2, !alias.scope !756
  %191 = zext <8 x i16> %190 to <8 x i32>
  %192 = mul nuw nsw <8 x i32> %156, %191
  %193 = getelementptr inbounds i16, i16* %162, i64 40
  %194 = bitcast i16* %193 to <8 x i16>*
  %195 = load <8 x i16>, <8 x i16>* %194, align 2, !alias.scope !756
  %196 = zext <8 x i16> %195 to <8 x i32>
  %197 = mul nuw nsw <8 x i32> %158, %196
  %198 = add nuw nsw <8 x i32> %192, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %199 = add nuw nsw <8 x i32> %198, %197
  %200 = lshr <8 x i32> %199, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %201 = trunc <8 x i32> %200 to <8 x i16>
  %202 = getelementptr inbounds i16, i16* %163, i64 8
  %203 = bitcast i16* %202 to <8 x i16>*
  store <8 x i16> %201, <8 x i16>* %203, align 2, !alias.scope !759, !noalias !756
  %204 = getelementptr i16, i16* %162, i64 16
  %205 = bitcast i16* %204 to <8 x i16>*
  %206 = load <8 x i16>, <8 x i16>* %205, align 2, !alias.scope !756
  %207 = zext <8 x i16> %206 to <8 x i32>
  %208 = mul nuw nsw <8 x i32> %156, %207
  %209 = getelementptr inbounds i16, i16* %162, i64 48
  %210 = bitcast i16* %209 to <8 x i16>*
  %211 = load <8 x i16>, <8 x i16>* %210, align 2, !alias.scope !756
  %212 = zext <8 x i16> %211 to <8 x i32>
  %213 = mul nuw nsw <8 x i32> %158, %212
  %214 = add nuw nsw <8 x i32> %208, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %215 = add nuw nsw <8 x i32> %214, %213
  %216 = lshr <8 x i32> %215, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %217 = trunc <8 x i32> %216 to <8 x i16>
  %218 = getelementptr inbounds i16, i16* %163, i64 16
  %219 = bitcast i16* %218 to <8 x i16>*
  store <8 x i16> %217, <8 x i16>* %219, align 2, !alias.scope !759, !noalias !756
  %220 = getelementptr i16, i16* %162, i64 24
  %221 = bitcast i16* %220 to <8 x i16>*
  %222 = load <8 x i16>, <8 x i16>* %221, align 2, !alias.scope !756
  %223 = zext <8 x i16> %222 to <8 x i32>
  %224 = mul nuw nsw <8 x i32> %156, %223
  %225 = getelementptr inbounds i16, i16* %162, i64 56
  %226 = bitcast i16* %225 to <8 x i16>*
  %227 = load <8 x i16>, <8 x i16>* %226, align 2, !alias.scope !756
  %228 = zext <8 x i16> %227 to <8 x i32>
  %229 = mul nuw nsw <8 x i32> %158, %228
  %230 = add nuw nsw <8 x i32> %224, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %231 = add nuw nsw <8 x i32> %230, %229
  %232 = lshr <8 x i32> %231, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %233 = trunc <8 x i32> %232 to <8 x i16>
  %234 = getelementptr inbounds i16, i16* %163, i64 24
  %235 = bitcast i16* %234 to <8 x i16>*
  store <8 x i16> %233, <8 x i16>* %235, align 2, !alias.scope !759, !noalias !756
  br label %268

236:                                              ; preds = %159, %236
  %237 = phi i64 [ %266, %236 ], [ 0, %159 ]
  %238 = phi i16* [ %265, %236 ], [ %162, %159 ]
  %239 = load i16, i16* %238, align 2
  %240 = zext i16 %239 to i32
  %241 = mul nuw nsw i32 %152, %240
  %242 = getelementptr inbounds i16, i16* %238, i64 32
  %243 = load i16, i16* %242, align 2
  %244 = zext i16 %243 to i32
  %245 = mul nuw nsw i32 %154, %244
  %246 = add nuw nsw i32 %241, 64
  %247 = add nuw nsw i32 %246, %245
  %248 = lshr i32 %247, 7
  %249 = trunc i32 %248 to i16
  %250 = getelementptr inbounds i16, i16* %163, i64 %237
  store i16 %249, i16* %250, align 2
  %251 = getelementptr inbounds i16, i16* %238, i64 1
  %252 = or i64 %237, 1
  %253 = load i16, i16* %251, align 2
  %254 = zext i16 %253 to i32
  %255 = mul nuw nsw i32 %152, %254
  %256 = getelementptr inbounds i16, i16* %238, i64 33
  %257 = load i16, i16* %256, align 2
  %258 = zext i16 %257 to i32
  %259 = mul nuw nsw i32 %154, %258
  %260 = add nuw nsw i32 %255, 64
  %261 = add nuw nsw i32 %260, %259
  %262 = lshr i32 %261, 7
  %263 = trunc i32 %262 to i16
  %264 = getelementptr inbounds i16, i16* %163, i64 %252
  store i16 %263, i16* %264, align 2
  %265 = getelementptr inbounds i16, i16* %238, i64 2
  %266 = add nuw nsw i64 %237, 2
  %267 = icmp eq i64 %266, 32
  br i1 %267, label %268, label %236, !llvm.loop !761

268:                                              ; preds = %236, %172
  %269 = phi i16* [ %173, %172 ], [ %265, %236 ]
  %270 = getelementptr inbounds i16, i16* %163, i64 32
  %271 = add nuw nsw i32 %161, 1
  %272 = icmp eq i32 %271, 32
  %273 = add i64 %160, 1
  br i1 %272, label %274, label %159

274:                                              ; preds = %268
  %275 = getelementptr inbounds [1024 x i16], [1024 x i16]* %11, i64 0, i64 0
  %276 = ptrtoint i8* %7 to i64
  %277 = shl i64 %276, 1
  %278 = inttoptr i64 %277 to i16*
  br label %279

279:                                              ; preds = %381, %274
  %280 = phi i64 [ %387, %381 ], [ 0, %274 ]
  %281 = phi i16* [ %382, %381 ], [ %275, %274 ]
  %282 = phi i32 [ %385, %381 ], [ 0, %274 ]
  %283 = phi i16* [ %383, %381 ], [ %278, %274 ]
  %284 = phi i16* [ %384, %381 ], [ %147, %274 ]
  %285 = shl nuw nsw i64 %280, 5
  %286 = getelementptr [1024 x i16], [1024 x i16]* %11, i64 0, i64 %285
  %287 = add i64 %285, 32
  %288 = getelementptr [1024 x i16], [1024 x i16]* %11, i64 0, i64 %287
  %289 = getelementptr [1024 x i16], [1024 x i16]* %10, i64 0, i64 %287
  %290 = getelementptr [1024 x i16], [1024 x i16]* %10, i64 0, i64 %285
  %291 = getelementptr i16, i16* %278, i64 %287
  %292 = getelementptr i16, i16* %278, i64 %285
  %293 = icmp ult i16* %286, %291
  %294 = icmp ult i16* %292, %288
  %295 = and i1 %293, %294
  %296 = icmp ult i16* %286, %289
  %297 = icmp ult i16* %290, %288
  %298 = and i1 %296, %297
  %299 = or i1 %295, %298
  br i1 %299, label %354, label %300

300:                                              ; preds = %279
  %301 = bitcast i16* %283 to <8 x i16>*
  %302 = load <8 x i16>, <8 x i16>* %301, align 2, !alias.scope !762
  %303 = zext <8 x i16> %302 to <8 x i32>
  %304 = bitcast i16* %284 to <8 x i16>*
  %305 = load <8 x i16>, <8 x i16>* %304, align 2, !alias.scope !765
  %306 = zext <8 x i16> %305 to <8 x i32>
  %307 = add nuw nsw <8 x i32> %303, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %308 = add nuw nsw <8 x i32> %307, %306
  %309 = lshr <8 x i32> %308, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %310 = trunc <8 x i32> %309 to <8 x i16>
  %311 = bitcast i16* %281 to <8 x i16>*
  store <8 x i16> %310, <8 x i16>* %311, align 2, !alias.scope !767, !noalias !769
  %312 = getelementptr inbounds i16, i16* %283, i64 8
  %313 = bitcast i16* %312 to <8 x i16>*
  %314 = load <8 x i16>, <8 x i16>* %313, align 2, !alias.scope !762
  %315 = zext <8 x i16> %314 to <8 x i32>
  %316 = getelementptr inbounds i16, i16* %284, i64 8
  %317 = bitcast i16* %316 to <8 x i16>*
  %318 = load <8 x i16>, <8 x i16>* %317, align 2, !alias.scope !765
  %319 = zext <8 x i16> %318 to <8 x i32>
  %320 = add nuw nsw <8 x i32> %315, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %321 = add nuw nsw <8 x i32> %320, %319
  %322 = lshr <8 x i32> %321, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %323 = trunc <8 x i32> %322 to <8 x i16>
  %324 = getelementptr inbounds i16, i16* %281, i64 8
  %325 = bitcast i16* %324 to <8 x i16>*
  store <8 x i16> %323, <8 x i16>* %325, align 2, !alias.scope !767, !noalias !769
  %326 = getelementptr inbounds i16, i16* %283, i64 16
  %327 = bitcast i16* %326 to <8 x i16>*
  %328 = load <8 x i16>, <8 x i16>* %327, align 2, !alias.scope !762
  %329 = zext <8 x i16> %328 to <8 x i32>
  %330 = getelementptr inbounds i16, i16* %284, i64 16
  %331 = bitcast i16* %330 to <8 x i16>*
  %332 = load <8 x i16>, <8 x i16>* %331, align 2, !alias.scope !765
  %333 = zext <8 x i16> %332 to <8 x i32>
  %334 = add nuw nsw <8 x i32> %329, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %335 = add nuw nsw <8 x i32> %334, %333
  %336 = lshr <8 x i32> %335, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %337 = trunc <8 x i32> %336 to <8 x i16>
  %338 = getelementptr inbounds i16, i16* %281, i64 16
  %339 = bitcast i16* %338 to <8 x i16>*
  store <8 x i16> %337, <8 x i16>* %339, align 2, !alias.scope !767, !noalias !769
  %340 = getelementptr inbounds i16, i16* %283, i64 24
  %341 = bitcast i16* %340 to <8 x i16>*
  %342 = load <8 x i16>, <8 x i16>* %341, align 2, !alias.scope !762
  %343 = zext <8 x i16> %342 to <8 x i32>
  %344 = getelementptr inbounds i16, i16* %284, i64 24
  %345 = bitcast i16* %344 to <8 x i16>*
  %346 = load <8 x i16>, <8 x i16>* %345, align 2, !alias.scope !765
  %347 = zext <8 x i16> %346 to <8 x i32>
  %348 = add nuw nsw <8 x i32> %343, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %349 = add nuw nsw <8 x i32> %348, %347
  %350 = lshr <8 x i32> %349, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %351 = trunc <8 x i32> %350 to <8 x i16>
  %352 = getelementptr inbounds i16, i16* %281, i64 24
  %353 = bitcast i16* %352 to <8 x i16>*
  store <8 x i16> %351, <8 x i16>* %353, align 2, !alias.scope !767, !noalias !769
  br label %381

354:                                              ; preds = %279, %354
  %355 = phi i64 [ %379, %354 ], [ 0, %279 ]
  %356 = getelementptr inbounds i16, i16* %283, i64 %355
  %357 = load i16, i16* %356, align 2
  %358 = zext i16 %357 to i32
  %359 = getelementptr inbounds i16, i16* %284, i64 %355
  %360 = load i16, i16* %359, align 2
  %361 = zext i16 %360 to i32
  %362 = add nuw nsw i32 %358, 1
  %363 = add nuw nsw i32 %362, %361
  %364 = lshr i32 %363, 1
  %365 = trunc i32 %364 to i16
  %366 = getelementptr inbounds i16, i16* %281, i64 %355
  store i16 %365, i16* %366, align 2
  %367 = or i64 %355, 1
  %368 = getelementptr inbounds i16, i16* %283, i64 %367
  %369 = load i16, i16* %368, align 2
  %370 = zext i16 %369 to i32
  %371 = getelementptr inbounds i16, i16* %284, i64 %367
  %372 = load i16, i16* %371, align 2
  %373 = zext i16 %372 to i32
  %374 = add nuw nsw i32 %370, 1
  %375 = add nuw nsw i32 %374, %373
  %376 = lshr i32 %375, 1
  %377 = trunc i32 %376 to i16
  %378 = getelementptr inbounds i16, i16* %281, i64 %367
  store i16 %377, i16* %378, align 2
  %379 = add nuw nsw i64 %355, 2
  %380 = icmp eq i64 %379, 32
  br i1 %380, label %381, label %354, !llvm.loop !770

381:                                              ; preds = %354, %300
  %382 = getelementptr inbounds i16, i16* %281, i64 32
  %383 = getelementptr inbounds i16, i16* %283, i64 32
  %384 = getelementptr inbounds i16, i16* %284, i64 32
  %385 = add nuw nsw i32 %282, 1
  %386 = icmp eq i32 %385, 32
  %387 = add i64 %280, 1
  br i1 %386, label %388, label %279

388:                                              ; preds = %381
  %389 = ptrtoint i8* %4 to i64
  %390 = shl i64 %389, 1
  %391 = inttoptr i64 %390 to i16*
  %392 = sext i32 %5 to i64
  br label %393

393:                                              ; preds = %430, %388
  %394 = phi i64 [ 0, %388 ], [ %427, %430 ]
  %395 = phi i64 [ 0, %388 ], [ %424, %430 ]
  %396 = phi i32 [ 0, %388 ], [ %433, %430 ]
  %397 = phi i16* [ %391, %388 ], [ %432, %430 ]
  %398 = phi i16* [ %275, %388 ], [ %431, %430 ]
  br label %399

399:                                              ; preds = %399, %393
  %400 = phi i64 [ %394, %393 ], [ %427, %399 ]
  %401 = phi i64 [ %395, %393 ], [ %424, %399 ]
  %402 = phi i64 [ 0, %393 ], [ %428, %399 ]
  %403 = getelementptr inbounds i16, i16* %398, i64 %402
  %404 = load i16, i16* %403, align 2
  %405 = zext i16 %404 to i32
  %406 = getelementptr inbounds i16, i16* %397, i64 %402
  %407 = load i16, i16* %406, align 2
  %408 = zext i16 %407 to i32
  %409 = sub nsw i32 %405, %408
  %410 = sext i32 %409 to i64
  %411 = add nsw i64 %401, %410
  %412 = mul nsw i32 %409, %409
  %413 = zext i32 %412 to i64
  %414 = add i64 %400, %413
  %415 = or i64 %402, 1
  %416 = getelementptr inbounds i16, i16* %398, i64 %415
  %417 = load i16, i16* %416, align 2
  %418 = zext i16 %417 to i32
  %419 = getelementptr inbounds i16, i16* %397, i64 %415
  %420 = load i16, i16* %419, align 2
  %421 = zext i16 %420 to i32
  %422 = sub nsw i32 %418, %421
  %423 = sext i32 %422 to i64
  %424 = add nsw i64 %411, %423
  %425 = mul nsw i32 %422, %422
  %426 = zext i32 %425 to i64
  %427 = add i64 %414, %426
  %428 = add nuw nsw i64 %402, 2
  %429 = icmp eq i64 %428, 32
  br i1 %429, label %430, label %399

430:                                              ; preds = %399
  %431 = getelementptr inbounds i16, i16* %398, i64 32
  %432 = getelementptr inbounds i16, i16* %397, i64 %392
  %433 = add nuw nsw i32 %396, 1
  %434 = icmp eq i32 %433, 32
  br i1 %434, label %435, label %393

435:                                              ; preds = %430
  %436 = add i64 %427, 8
  %437 = lshr i64 %436, 4
  %438 = trunc i64 %437 to i32
  store i32 %438, i32* %6, align 4
  %439 = and i64 %437, 4294967295
  %440 = shl i64 %424, 30
  %441 = add i64 %440, 2147483648
  %442 = ashr i64 %441, 32
  %443 = mul nsw i64 %442, %442
  %444 = lshr i64 %443, 10
  %445 = sub nsw i64 %439, %444
  %446 = icmp sgt i64 %445, -1
  %447 = trunc i64 %445 to i32
  %448 = select i1 %446, i32 %447, i32 0
  call void @llvm.lifetime.end.p0i8(i64 2048, i8* nonnull %14) #4
  call void @llvm.lifetime.end.p0i8(i64 2048, i8* nonnull %13) #4
  call void @llvm.lifetime.end.p0i8(i64 2112, i8* nonnull %12) #4
  ret i32 %448
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_highbd_12_sub_pixel_avg_variance32x32_c(i8*, i32, i32, i32, i8*, i32, i32* nocapture, i8*) local_unnamed_addr #2 {
  %9 = alloca [1056 x i16], align 16
  %10 = alloca [1024 x i16], align 16
  %11 = alloca [1024 x i16], align 16
  %12 = bitcast [1056 x i16]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2112, i8* nonnull %12) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %12, i8 -86, i64 2112, i1 false)
  %13 = bitcast [1024 x i16]* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2048, i8* nonnull %13) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %13, i8 -86, i64 2048, i1 false)
  %14 = bitcast [1024 x i16]* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2048, i8* nonnull %14) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %14, i8 -86, i64 2048, i1 false)
  %15 = getelementptr inbounds [1056 x i16], [1056 x i16]* %9, i64 0, i64 0
  %16 = sext i32 %2 to i64
  %17 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %16, i64 0
  %18 = ptrtoint i8* %0 to i64
  %19 = shl i64 %18, 1
  %20 = inttoptr i64 %19 to i16*
  %21 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %16, i64 1
  %22 = add i32 %1, -32
  %23 = zext i32 %22 to i64
  %24 = load i8, i8* %17, align 2
  %25 = zext i8 %24 to i32
  %26 = load i8, i8* %21, align 1
  %27 = zext i8 %26 to i32
  %28 = insertelement <8 x i32> undef, i32 %25, i32 0
  %29 = shufflevector <8 x i32> %28, <8 x i32> undef, <8 x i32> zeroinitializer
  %30 = insertelement <8 x i32> undef, i32 %27, i32 0
  %31 = shufflevector <8 x i32> %30, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %32

32:                                               ; preds = %139, %8
  %33 = phi i64 [ %145, %139 ], [ 0, %8 ]
  %34 = phi i16* [ %141, %139 ], [ %20, %8 ]
  %35 = phi i32 [ %143, %139 ], [ 0, %8 ]
  %36 = phi i16* [ %142, %139 ], [ %15, %8 ]
  %37 = shl nuw nsw i64 %33, 5
  %38 = add i64 %37, 32
  %39 = getelementptr [1056 x i16], [1056 x i16]* %9, i64 0, i64 %38
  %40 = getelementptr [1056 x i16], [1056 x i16]* %9, i64 0, i64 %37
  %41 = getelementptr i16, i16* %34, i64 33
  %42 = icmp ult i16* %40, %41
  %43 = icmp ult i16* %34, %39
  %44 = and i1 %42, %43
  br i1 %44, label %109, label %45

45:                                               ; preds = %32
  %46 = getelementptr i16, i16* %34, i64 32
  %47 = bitcast i16* %34 to <8 x i16>*
  %48 = load <8 x i16>, <8 x i16>* %47, align 2, !alias.scope !771
  %49 = zext <8 x i16> %48 to <8 x i32>
  %50 = mul nuw nsw <8 x i32> %29, %49
  %51 = getelementptr inbounds i16, i16* %34, i64 1
  %52 = bitcast i16* %51 to <8 x i16>*
  %53 = load <8 x i16>, <8 x i16>* %52, align 2, !alias.scope !771
  %54 = zext <8 x i16> %53 to <8 x i32>
  %55 = mul nuw nsw <8 x i32> %31, %54
  %56 = add nuw nsw <8 x i32> %50, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %57 = add nuw nsw <8 x i32> %56, %55
  %58 = lshr <8 x i32> %57, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %59 = trunc <8 x i32> %58 to <8 x i16>
  %60 = bitcast i16* %36 to <8 x i16>*
  store <8 x i16> %59, <8 x i16>* %60, align 2, !alias.scope !774, !noalias !771
  %61 = getelementptr i16, i16* %34, i64 8
  %62 = bitcast i16* %61 to <8 x i16>*
  %63 = load <8 x i16>, <8 x i16>* %62, align 2, !alias.scope !771
  %64 = zext <8 x i16> %63 to <8 x i32>
  %65 = mul nuw nsw <8 x i32> %29, %64
  %66 = getelementptr inbounds i16, i16* %34, i64 9
  %67 = bitcast i16* %66 to <8 x i16>*
  %68 = load <8 x i16>, <8 x i16>* %67, align 2, !alias.scope !771
  %69 = zext <8 x i16> %68 to <8 x i32>
  %70 = mul nuw nsw <8 x i32> %31, %69
  %71 = add nuw nsw <8 x i32> %65, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %72 = add nuw nsw <8 x i32> %71, %70
  %73 = lshr <8 x i32> %72, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %74 = trunc <8 x i32> %73 to <8 x i16>
  %75 = getelementptr inbounds i16, i16* %36, i64 8
  %76 = bitcast i16* %75 to <8 x i16>*
  store <8 x i16> %74, <8 x i16>* %76, align 2, !alias.scope !774, !noalias !771
  %77 = getelementptr i16, i16* %34, i64 16
  %78 = bitcast i16* %77 to <8 x i16>*
  %79 = load <8 x i16>, <8 x i16>* %78, align 2, !alias.scope !771
  %80 = zext <8 x i16> %79 to <8 x i32>
  %81 = mul nuw nsw <8 x i32> %29, %80
  %82 = getelementptr inbounds i16, i16* %34, i64 17
  %83 = bitcast i16* %82 to <8 x i16>*
  %84 = load <8 x i16>, <8 x i16>* %83, align 2, !alias.scope !771
  %85 = zext <8 x i16> %84 to <8 x i32>
  %86 = mul nuw nsw <8 x i32> %31, %85
  %87 = add nuw nsw <8 x i32> %81, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %88 = add nuw nsw <8 x i32> %87, %86
  %89 = lshr <8 x i32> %88, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %90 = trunc <8 x i32> %89 to <8 x i16>
  %91 = getelementptr inbounds i16, i16* %36, i64 16
  %92 = bitcast i16* %91 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %92, align 2, !alias.scope !774, !noalias !771
  %93 = getelementptr i16, i16* %34, i64 24
  %94 = bitcast i16* %93 to <8 x i16>*
  %95 = load <8 x i16>, <8 x i16>* %94, align 2, !alias.scope !771
  %96 = zext <8 x i16> %95 to <8 x i32>
  %97 = mul nuw nsw <8 x i32> %29, %96
  %98 = getelementptr inbounds i16, i16* %34, i64 25
  %99 = bitcast i16* %98 to <8 x i16>*
  %100 = load <8 x i16>, <8 x i16>* %99, align 2, !alias.scope !771
  %101 = zext <8 x i16> %100 to <8 x i32>
  %102 = mul nuw nsw <8 x i32> %31, %101
  %103 = add nuw nsw <8 x i32> %97, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %104 = add nuw nsw <8 x i32> %103, %102
  %105 = lshr <8 x i32> %104, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %106 = trunc <8 x i32> %105 to <8 x i16>
  %107 = getelementptr inbounds i16, i16* %36, i64 24
  %108 = bitcast i16* %107 to <8 x i16>*
  store <8 x i16> %106, <8 x i16>* %108, align 2, !alias.scope !774, !noalias !771
  br label %139

109:                                              ; preds = %32, %109
  %110 = phi i64 [ %137, %109 ], [ 0, %32 ]
  %111 = phi i16* [ %128, %109 ], [ %34, %32 ]
  %112 = load i16, i16* %111, align 2
  %113 = zext i16 %112 to i32
  %114 = mul nuw nsw i32 %25, %113
  %115 = getelementptr inbounds i16, i16* %111, i64 1
  %116 = load i16, i16* %115, align 2
  %117 = zext i16 %116 to i32
  %118 = mul nuw nsw i32 %27, %117
  %119 = add nuw nsw i32 %114, 64
  %120 = add nuw nsw i32 %119, %118
  %121 = lshr i32 %120, 7
  %122 = trunc i32 %121 to i16
  %123 = getelementptr inbounds i16, i16* %36, i64 %110
  store i16 %122, i16* %123, align 2
  %124 = or i64 %110, 1
  %125 = load i16, i16* %115, align 2
  %126 = zext i16 %125 to i32
  %127 = mul nuw nsw i32 %25, %126
  %128 = getelementptr inbounds i16, i16* %111, i64 2
  %129 = load i16, i16* %128, align 2
  %130 = zext i16 %129 to i32
  %131 = mul nuw nsw i32 %27, %130
  %132 = add nuw nsw i32 %127, 64
  %133 = add nuw nsw i32 %132, %131
  %134 = lshr i32 %133, 7
  %135 = trunc i32 %134 to i16
  %136 = getelementptr inbounds i16, i16* %36, i64 %124
  store i16 %135, i16* %136, align 2
  %137 = add nuw nsw i64 %110, 2
  %138 = icmp eq i64 %137, 32
  br i1 %138, label %139, label %109, !llvm.loop !776

139:                                              ; preds = %109, %45
  %140 = phi i16* [ %46, %45 ], [ %128, %109 ]
  %141 = getelementptr inbounds i16, i16* %140, i64 %23
  %142 = getelementptr inbounds i16, i16* %36, i64 32
  %143 = add nuw nsw i32 %35, 1
  %144 = icmp eq i32 %143, 33
  %145 = add i64 %33, 1
  br i1 %144, label %146, label %32

146:                                              ; preds = %139
  %147 = getelementptr inbounds [1024 x i16], [1024 x i16]* %10, i64 0, i64 0
  %148 = sext i32 %3 to i64
  %149 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %148, i64 0
  %150 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %148, i64 1
  %151 = load i8, i8* %149, align 2
  %152 = zext i8 %151 to i32
  %153 = load i8, i8* %150, align 1
  %154 = zext i8 %153 to i32
  %155 = insertelement <8 x i32> undef, i32 %152, i32 0
  %156 = shufflevector <8 x i32> %155, <8 x i32> undef, <8 x i32> zeroinitializer
  %157 = insertelement <8 x i32> undef, i32 %154, i32 0
  %158 = shufflevector <8 x i32> %157, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %159

159:                                              ; preds = %268, %146
  %160 = phi i64 [ %273, %268 ], [ 0, %146 ]
  %161 = phi i32 [ %271, %268 ], [ 0, %146 ]
  %162 = phi i16* [ %269, %268 ], [ %15, %146 ]
  %163 = phi i16* [ %270, %268 ], [ %147, %146 ]
  %164 = shl nuw nsw i64 %160, 5
  %165 = add i64 %164, 32
  %166 = getelementptr [1024 x i16], [1024 x i16]* %10, i64 0, i64 %165
  %167 = getelementptr [1024 x i16], [1024 x i16]* %10, i64 0, i64 %164
  %168 = getelementptr i16, i16* %162, i64 64
  %169 = icmp ult i16* %167, %168
  %170 = icmp ult i16* %162, %166
  %171 = and i1 %169, %170
  br i1 %171, label %236, label %172

172:                                              ; preds = %159
  %173 = getelementptr i16, i16* %162, i64 32
  %174 = bitcast i16* %162 to <8 x i16>*
  %175 = load <8 x i16>, <8 x i16>* %174, align 2, !alias.scope !777
  %176 = zext <8 x i16> %175 to <8 x i32>
  %177 = mul nuw nsw <8 x i32> %156, %176
  %178 = getelementptr inbounds i16, i16* %162, i64 32
  %179 = bitcast i16* %178 to <8 x i16>*
  %180 = load <8 x i16>, <8 x i16>* %179, align 2, !alias.scope !777
  %181 = zext <8 x i16> %180 to <8 x i32>
  %182 = mul nuw nsw <8 x i32> %158, %181
  %183 = add nuw nsw <8 x i32> %177, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %184 = add nuw nsw <8 x i32> %183, %182
  %185 = lshr <8 x i32> %184, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %186 = trunc <8 x i32> %185 to <8 x i16>
  %187 = bitcast i16* %163 to <8 x i16>*
  store <8 x i16> %186, <8 x i16>* %187, align 2, !alias.scope !780, !noalias !777
  %188 = getelementptr i16, i16* %162, i64 8
  %189 = bitcast i16* %188 to <8 x i16>*
  %190 = load <8 x i16>, <8 x i16>* %189, align 2, !alias.scope !777
  %191 = zext <8 x i16> %190 to <8 x i32>
  %192 = mul nuw nsw <8 x i32> %156, %191
  %193 = getelementptr inbounds i16, i16* %162, i64 40
  %194 = bitcast i16* %193 to <8 x i16>*
  %195 = load <8 x i16>, <8 x i16>* %194, align 2, !alias.scope !777
  %196 = zext <8 x i16> %195 to <8 x i32>
  %197 = mul nuw nsw <8 x i32> %158, %196
  %198 = add nuw nsw <8 x i32> %192, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %199 = add nuw nsw <8 x i32> %198, %197
  %200 = lshr <8 x i32> %199, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %201 = trunc <8 x i32> %200 to <8 x i16>
  %202 = getelementptr inbounds i16, i16* %163, i64 8
  %203 = bitcast i16* %202 to <8 x i16>*
  store <8 x i16> %201, <8 x i16>* %203, align 2, !alias.scope !780, !noalias !777
  %204 = getelementptr i16, i16* %162, i64 16
  %205 = bitcast i16* %204 to <8 x i16>*
  %206 = load <8 x i16>, <8 x i16>* %205, align 2, !alias.scope !777
  %207 = zext <8 x i16> %206 to <8 x i32>
  %208 = mul nuw nsw <8 x i32> %156, %207
  %209 = getelementptr inbounds i16, i16* %162, i64 48
  %210 = bitcast i16* %209 to <8 x i16>*
  %211 = load <8 x i16>, <8 x i16>* %210, align 2, !alias.scope !777
  %212 = zext <8 x i16> %211 to <8 x i32>
  %213 = mul nuw nsw <8 x i32> %158, %212
  %214 = add nuw nsw <8 x i32> %208, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %215 = add nuw nsw <8 x i32> %214, %213
  %216 = lshr <8 x i32> %215, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %217 = trunc <8 x i32> %216 to <8 x i16>
  %218 = getelementptr inbounds i16, i16* %163, i64 16
  %219 = bitcast i16* %218 to <8 x i16>*
  store <8 x i16> %217, <8 x i16>* %219, align 2, !alias.scope !780, !noalias !777
  %220 = getelementptr i16, i16* %162, i64 24
  %221 = bitcast i16* %220 to <8 x i16>*
  %222 = load <8 x i16>, <8 x i16>* %221, align 2, !alias.scope !777
  %223 = zext <8 x i16> %222 to <8 x i32>
  %224 = mul nuw nsw <8 x i32> %156, %223
  %225 = getelementptr inbounds i16, i16* %162, i64 56
  %226 = bitcast i16* %225 to <8 x i16>*
  %227 = load <8 x i16>, <8 x i16>* %226, align 2, !alias.scope !777
  %228 = zext <8 x i16> %227 to <8 x i32>
  %229 = mul nuw nsw <8 x i32> %158, %228
  %230 = add nuw nsw <8 x i32> %224, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %231 = add nuw nsw <8 x i32> %230, %229
  %232 = lshr <8 x i32> %231, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %233 = trunc <8 x i32> %232 to <8 x i16>
  %234 = getelementptr inbounds i16, i16* %163, i64 24
  %235 = bitcast i16* %234 to <8 x i16>*
  store <8 x i16> %233, <8 x i16>* %235, align 2, !alias.scope !780, !noalias !777
  br label %268

236:                                              ; preds = %159, %236
  %237 = phi i64 [ %266, %236 ], [ 0, %159 ]
  %238 = phi i16* [ %265, %236 ], [ %162, %159 ]
  %239 = load i16, i16* %238, align 2
  %240 = zext i16 %239 to i32
  %241 = mul nuw nsw i32 %152, %240
  %242 = getelementptr inbounds i16, i16* %238, i64 32
  %243 = load i16, i16* %242, align 2
  %244 = zext i16 %243 to i32
  %245 = mul nuw nsw i32 %154, %244
  %246 = add nuw nsw i32 %241, 64
  %247 = add nuw nsw i32 %246, %245
  %248 = lshr i32 %247, 7
  %249 = trunc i32 %248 to i16
  %250 = getelementptr inbounds i16, i16* %163, i64 %237
  store i16 %249, i16* %250, align 2
  %251 = getelementptr inbounds i16, i16* %238, i64 1
  %252 = or i64 %237, 1
  %253 = load i16, i16* %251, align 2
  %254 = zext i16 %253 to i32
  %255 = mul nuw nsw i32 %152, %254
  %256 = getelementptr inbounds i16, i16* %238, i64 33
  %257 = load i16, i16* %256, align 2
  %258 = zext i16 %257 to i32
  %259 = mul nuw nsw i32 %154, %258
  %260 = add nuw nsw i32 %255, 64
  %261 = add nuw nsw i32 %260, %259
  %262 = lshr i32 %261, 7
  %263 = trunc i32 %262 to i16
  %264 = getelementptr inbounds i16, i16* %163, i64 %252
  store i16 %263, i16* %264, align 2
  %265 = getelementptr inbounds i16, i16* %238, i64 2
  %266 = add nuw nsw i64 %237, 2
  %267 = icmp eq i64 %266, 32
  br i1 %267, label %268, label %236, !llvm.loop !782

268:                                              ; preds = %236, %172
  %269 = phi i16* [ %173, %172 ], [ %265, %236 ]
  %270 = getelementptr inbounds i16, i16* %163, i64 32
  %271 = add nuw nsw i32 %161, 1
  %272 = icmp eq i32 %271, 32
  %273 = add i64 %160, 1
  br i1 %272, label %274, label %159

274:                                              ; preds = %268
  %275 = getelementptr inbounds [1024 x i16], [1024 x i16]* %11, i64 0, i64 0
  %276 = ptrtoint i8* %7 to i64
  %277 = shl i64 %276, 1
  %278 = inttoptr i64 %277 to i16*
  br label %279

279:                                              ; preds = %381, %274
  %280 = phi i64 [ %387, %381 ], [ 0, %274 ]
  %281 = phi i16* [ %382, %381 ], [ %275, %274 ]
  %282 = phi i32 [ %385, %381 ], [ 0, %274 ]
  %283 = phi i16* [ %383, %381 ], [ %278, %274 ]
  %284 = phi i16* [ %384, %381 ], [ %147, %274 ]
  %285 = shl nuw nsw i64 %280, 5
  %286 = getelementptr [1024 x i16], [1024 x i16]* %11, i64 0, i64 %285
  %287 = add i64 %285, 32
  %288 = getelementptr [1024 x i16], [1024 x i16]* %11, i64 0, i64 %287
  %289 = getelementptr [1024 x i16], [1024 x i16]* %10, i64 0, i64 %287
  %290 = getelementptr [1024 x i16], [1024 x i16]* %10, i64 0, i64 %285
  %291 = getelementptr i16, i16* %278, i64 %287
  %292 = getelementptr i16, i16* %278, i64 %285
  %293 = icmp ult i16* %286, %291
  %294 = icmp ult i16* %292, %288
  %295 = and i1 %293, %294
  %296 = icmp ult i16* %286, %289
  %297 = icmp ult i16* %290, %288
  %298 = and i1 %296, %297
  %299 = or i1 %295, %298
  br i1 %299, label %354, label %300

300:                                              ; preds = %279
  %301 = bitcast i16* %283 to <8 x i16>*
  %302 = load <8 x i16>, <8 x i16>* %301, align 2, !alias.scope !783
  %303 = zext <8 x i16> %302 to <8 x i32>
  %304 = bitcast i16* %284 to <8 x i16>*
  %305 = load <8 x i16>, <8 x i16>* %304, align 2, !alias.scope !786
  %306 = zext <8 x i16> %305 to <8 x i32>
  %307 = add nuw nsw <8 x i32> %303, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %308 = add nuw nsw <8 x i32> %307, %306
  %309 = lshr <8 x i32> %308, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %310 = trunc <8 x i32> %309 to <8 x i16>
  %311 = bitcast i16* %281 to <8 x i16>*
  store <8 x i16> %310, <8 x i16>* %311, align 2, !alias.scope !788, !noalias !790
  %312 = getelementptr inbounds i16, i16* %283, i64 8
  %313 = bitcast i16* %312 to <8 x i16>*
  %314 = load <8 x i16>, <8 x i16>* %313, align 2, !alias.scope !783
  %315 = zext <8 x i16> %314 to <8 x i32>
  %316 = getelementptr inbounds i16, i16* %284, i64 8
  %317 = bitcast i16* %316 to <8 x i16>*
  %318 = load <8 x i16>, <8 x i16>* %317, align 2, !alias.scope !786
  %319 = zext <8 x i16> %318 to <8 x i32>
  %320 = add nuw nsw <8 x i32> %315, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %321 = add nuw nsw <8 x i32> %320, %319
  %322 = lshr <8 x i32> %321, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %323 = trunc <8 x i32> %322 to <8 x i16>
  %324 = getelementptr inbounds i16, i16* %281, i64 8
  %325 = bitcast i16* %324 to <8 x i16>*
  store <8 x i16> %323, <8 x i16>* %325, align 2, !alias.scope !788, !noalias !790
  %326 = getelementptr inbounds i16, i16* %283, i64 16
  %327 = bitcast i16* %326 to <8 x i16>*
  %328 = load <8 x i16>, <8 x i16>* %327, align 2, !alias.scope !783
  %329 = zext <8 x i16> %328 to <8 x i32>
  %330 = getelementptr inbounds i16, i16* %284, i64 16
  %331 = bitcast i16* %330 to <8 x i16>*
  %332 = load <8 x i16>, <8 x i16>* %331, align 2, !alias.scope !786
  %333 = zext <8 x i16> %332 to <8 x i32>
  %334 = add nuw nsw <8 x i32> %329, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %335 = add nuw nsw <8 x i32> %334, %333
  %336 = lshr <8 x i32> %335, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %337 = trunc <8 x i32> %336 to <8 x i16>
  %338 = getelementptr inbounds i16, i16* %281, i64 16
  %339 = bitcast i16* %338 to <8 x i16>*
  store <8 x i16> %337, <8 x i16>* %339, align 2, !alias.scope !788, !noalias !790
  %340 = getelementptr inbounds i16, i16* %283, i64 24
  %341 = bitcast i16* %340 to <8 x i16>*
  %342 = load <8 x i16>, <8 x i16>* %341, align 2, !alias.scope !783
  %343 = zext <8 x i16> %342 to <8 x i32>
  %344 = getelementptr inbounds i16, i16* %284, i64 24
  %345 = bitcast i16* %344 to <8 x i16>*
  %346 = load <8 x i16>, <8 x i16>* %345, align 2, !alias.scope !786
  %347 = zext <8 x i16> %346 to <8 x i32>
  %348 = add nuw nsw <8 x i32> %343, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %349 = add nuw nsw <8 x i32> %348, %347
  %350 = lshr <8 x i32> %349, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %351 = trunc <8 x i32> %350 to <8 x i16>
  %352 = getelementptr inbounds i16, i16* %281, i64 24
  %353 = bitcast i16* %352 to <8 x i16>*
  store <8 x i16> %351, <8 x i16>* %353, align 2, !alias.scope !788, !noalias !790
  br label %381

354:                                              ; preds = %279, %354
  %355 = phi i64 [ %379, %354 ], [ 0, %279 ]
  %356 = getelementptr inbounds i16, i16* %283, i64 %355
  %357 = load i16, i16* %356, align 2
  %358 = zext i16 %357 to i32
  %359 = getelementptr inbounds i16, i16* %284, i64 %355
  %360 = load i16, i16* %359, align 2
  %361 = zext i16 %360 to i32
  %362 = add nuw nsw i32 %358, 1
  %363 = add nuw nsw i32 %362, %361
  %364 = lshr i32 %363, 1
  %365 = trunc i32 %364 to i16
  %366 = getelementptr inbounds i16, i16* %281, i64 %355
  store i16 %365, i16* %366, align 2
  %367 = or i64 %355, 1
  %368 = getelementptr inbounds i16, i16* %283, i64 %367
  %369 = load i16, i16* %368, align 2
  %370 = zext i16 %369 to i32
  %371 = getelementptr inbounds i16, i16* %284, i64 %367
  %372 = load i16, i16* %371, align 2
  %373 = zext i16 %372 to i32
  %374 = add nuw nsw i32 %370, 1
  %375 = add nuw nsw i32 %374, %373
  %376 = lshr i32 %375, 1
  %377 = trunc i32 %376 to i16
  %378 = getelementptr inbounds i16, i16* %281, i64 %367
  store i16 %377, i16* %378, align 2
  %379 = add nuw nsw i64 %355, 2
  %380 = icmp eq i64 %379, 32
  br i1 %380, label %381, label %354, !llvm.loop !791

381:                                              ; preds = %354, %300
  %382 = getelementptr inbounds i16, i16* %281, i64 32
  %383 = getelementptr inbounds i16, i16* %283, i64 32
  %384 = getelementptr inbounds i16, i16* %284, i64 32
  %385 = add nuw nsw i32 %282, 1
  %386 = icmp eq i32 %385, 32
  %387 = add i64 %280, 1
  br i1 %386, label %388, label %279

388:                                              ; preds = %381
  %389 = ptrtoint i8* %4 to i64
  %390 = shl i64 %389, 1
  %391 = inttoptr i64 %390 to i16*
  %392 = sext i32 %5 to i64
  br label %393

393:                                              ; preds = %430, %388
  %394 = phi i64 [ 0, %388 ], [ %427, %430 ]
  %395 = phi i64 [ 0, %388 ], [ %424, %430 ]
  %396 = phi i32 [ 0, %388 ], [ %433, %430 ]
  %397 = phi i16* [ %391, %388 ], [ %432, %430 ]
  %398 = phi i16* [ %275, %388 ], [ %431, %430 ]
  br label %399

399:                                              ; preds = %399, %393
  %400 = phi i64 [ %394, %393 ], [ %427, %399 ]
  %401 = phi i64 [ %395, %393 ], [ %424, %399 ]
  %402 = phi i64 [ 0, %393 ], [ %428, %399 ]
  %403 = getelementptr inbounds i16, i16* %398, i64 %402
  %404 = load i16, i16* %403, align 2
  %405 = zext i16 %404 to i32
  %406 = getelementptr inbounds i16, i16* %397, i64 %402
  %407 = load i16, i16* %406, align 2
  %408 = zext i16 %407 to i32
  %409 = sub nsw i32 %405, %408
  %410 = sext i32 %409 to i64
  %411 = add nsw i64 %401, %410
  %412 = mul nsw i32 %409, %409
  %413 = zext i32 %412 to i64
  %414 = add i64 %400, %413
  %415 = or i64 %402, 1
  %416 = getelementptr inbounds i16, i16* %398, i64 %415
  %417 = load i16, i16* %416, align 2
  %418 = zext i16 %417 to i32
  %419 = getelementptr inbounds i16, i16* %397, i64 %415
  %420 = load i16, i16* %419, align 2
  %421 = zext i16 %420 to i32
  %422 = sub nsw i32 %418, %421
  %423 = sext i32 %422 to i64
  %424 = add nsw i64 %411, %423
  %425 = mul nsw i32 %422, %422
  %426 = zext i32 %425 to i64
  %427 = add i64 %414, %426
  %428 = add nuw nsw i64 %402, 2
  %429 = icmp eq i64 %428, 32
  br i1 %429, label %430, label %399

430:                                              ; preds = %399
  %431 = getelementptr inbounds i16, i16* %398, i64 32
  %432 = getelementptr inbounds i16, i16* %397, i64 %392
  %433 = add nuw nsw i32 %396, 1
  %434 = icmp eq i32 %433, 32
  br i1 %434, label %435, label %393

435:                                              ; preds = %430
  %436 = add i64 %427, 128
  %437 = lshr i64 %436, 8
  %438 = trunc i64 %437 to i32
  store i32 %438, i32* %6, align 4
  %439 = and i64 %437, 4294967295
  %440 = shl i64 %424, 28
  %441 = add i64 %440, 2147483648
  %442 = ashr i64 %441, 32
  %443 = mul nsw i64 %442, %442
  %444 = lshr i64 %443, 10
  %445 = sub nsw i64 %439, %444
  %446 = icmp sgt i64 %445, -1
  %447 = trunc i64 %445 to i32
  %448 = select i1 %446, i32 %447, i32 0
  call void @llvm.lifetime.end.p0i8(i64 2048, i8* nonnull %14) #4
  call void @llvm.lifetime.end.p0i8(i64 2048, i8* nonnull %13) #4
  call void @llvm.lifetime.end.p0i8(i64 2112, i8* nonnull %12) #4
  ret i32 %448
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_highbd_8_variance32x16_c(i8*, i32, i8*, i32, i32* nocapture) local_unnamed_addr #2 {
  %6 = ptrtoint i8* %2 to i64
  %7 = shl i64 %6, 1
  %8 = inttoptr i64 %7 to i16*
  %9 = ptrtoint i8* %0 to i64
  %10 = shl i64 %9, 1
  %11 = inttoptr i64 %10 to i16*
  %12 = sext i32 %1 to i64
  %13 = sext i32 %3 to i64
  br label %14

14:                                               ; preds = %51, %5
  %15 = phi i64 [ 0, %5 ], [ %48, %51 ]
  %16 = phi i64 [ 0, %5 ], [ %45, %51 ]
  %17 = phi i32 [ 0, %5 ], [ %54, %51 ]
  %18 = phi i16* [ %8, %5 ], [ %53, %51 ]
  %19 = phi i16* [ %11, %5 ], [ %52, %51 ]
  br label %20

20:                                               ; preds = %20, %14
  %21 = phi i64 [ %15, %14 ], [ %48, %20 ]
  %22 = phi i64 [ %16, %14 ], [ %45, %20 ]
  %23 = phi i64 [ 0, %14 ], [ %49, %20 ]
  %24 = getelementptr inbounds i16, i16* %19, i64 %23
  %25 = load i16, i16* %24, align 2
  %26 = zext i16 %25 to i32
  %27 = getelementptr inbounds i16, i16* %18, i64 %23
  %28 = load i16, i16* %27, align 2
  %29 = zext i16 %28 to i32
  %30 = sub nsw i32 %26, %29
  %31 = sext i32 %30 to i64
  %32 = add nsw i64 %22, %31
  %33 = mul nsw i32 %30, %30
  %34 = zext i32 %33 to i64
  %35 = add i64 %21, %34
  %36 = or i64 %23, 1
  %37 = getelementptr inbounds i16, i16* %19, i64 %36
  %38 = load i16, i16* %37, align 2
  %39 = zext i16 %38 to i32
  %40 = getelementptr inbounds i16, i16* %18, i64 %36
  %41 = load i16, i16* %40, align 2
  %42 = zext i16 %41 to i32
  %43 = sub nsw i32 %39, %42
  %44 = sext i32 %43 to i64
  %45 = add nsw i64 %32, %44
  %46 = mul nsw i32 %43, %43
  %47 = zext i32 %46 to i64
  %48 = add i64 %35, %47
  %49 = add nuw nsw i64 %23, 2
  %50 = icmp eq i64 %49, 32
  br i1 %50, label %51, label %20

51:                                               ; preds = %20
  %52 = getelementptr inbounds i16, i16* %19, i64 %12
  %53 = getelementptr inbounds i16, i16* %18, i64 %13
  %54 = add nuw nsw i32 %17, 1
  %55 = icmp eq i32 %54, 16
  br i1 %55, label %56, label %14

56:                                               ; preds = %51
  %57 = trunc i64 %48 to i32
  store i32 %57, i32* %4, align 4
  %58 = shl i64 %45, 32
  %59 = ashr exact i64 %58, 32
  %60 = mul nsw i64 %59, %59
  %61 = lshr i64 %60, 9
  %62 = trunc i64 %61 to i32
  %63 = sub i32 %57, %62
  ret i32 %63
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_highbd_10_variance32x16_c(i8*, i32, i8*, i32, i32* nocapture) local_unnamed_addr #2 {
  %6 = ptrtoint i8* %2 to i64
  %7 = shl i64 %6, 1
  %8 = inttoptr i64 %7 to i16*
  %9 = ptrtoint i8* %0 to i64
  %10 = shl i64 %9, 1
  %11 = inttoptr i64 %10 to i16*
  %12 = sext i32 %1 to i64
  %13 = sext i32 %3 to i64
  br label %14

14:                                               ; preds = %51, %5
  %15 = phi i64 [ 0, %5 ], [ %48, %51 ]
  %16 = phi i64 [ 0, %5 ], [ %45, %51 ]
  %17 = phi i32 [ 0, %5 ], [ %54, %51 ]
  %18 = phi i16* [ %8, %5 ], [ %53, %51 ]
  %19 = phi i16* [ %11, %5 ], [ %52, %51 ]
  br label %20

20:                                               ; preds = %20, %14
  %21 = phi i64 [ %15, %14 ], [ %48, %20 ]
  %22 = phi i64 [ %16, %14 ], [ %45, %20 ]
  %23 = phi i64 [ 0, %14 ], [ %49, %20 ]
  %24 = getelementptr inbounds i16, i16* %19, i64 %23
  %25 = load i16, i16* %24, align 2
  %26 = zext i16 %25 to i32
  %27 = getelementptr inbounds i16, i16* %18, i64 %23
  %28 = load i16, i16* %27, align 2
  %29 = zext i16 %28 to i32
  %30 = sub nsw i32 %26, %29
  %31 = sext i32 %30 to i64
  %32 = add nsw i64 %22, %31
  %33 = mul nsw i32 %30, %30
  %34 = zext i32 %33 to i64
  %35 = add i64 %21, %34
  %36 = or i64 %23, 1
  %37 = getelementptr inbounds i16, i16* %19, i64 %36
  %38 = load i16, i16* %37, align 2
  %39 = zext i16 %38 to i32
  %40 = getelementptr inbounds i16, i16* %18, i64 %36
  %41 = load i16, i16* %40, align 2
  %42 = zext i16 %41 to i32
  %43 = sub nsw i32 %39, %42
  %44 = sext i32 %43 to i64
  %45 = add nsw i64 %32, %44
  %46 = mul nsw i32 %43, %43
  %47 = zext i32 %46 to i64
  %48 = add i64 %35, %47
  %49 = add nuw nsw i64 %23, 2
  %50 = icmp eq i64 %49, 32
  br i1 %50, label %51, label %20

51:                                               ; preds = %20
  %52 = getelementptr inbounds i16, i16* %19, i64 %12
  %53 = getelementptr inbounds i16, i16* %18, i64 %13
  %54 = add nuw nsw i32 %17, 1
  %55 = icmp eq i32 %54, 16
  br i1 %55, label %56, label %14

56:                                               ; preds = %51
  %57 = add i64 %48, 8
  %58 = lshr i64 %57, 4
  %59 = trunc i64 %58 to i32
  store i32 %59, i32* %4, align 4
  %60 = and i64 %58, 4294967295
  %61 = shl i64 %45, 30
  %62 = add i64 %61, 2147483648
  %63 = ashr i64 %62, 32
  %64 = mul nsw i64 %63, %63
  %65 = lshr i64 %64, 9
  %66 = sub nsw i64 %60, %65
  %67 = icmp sgt i64 %66, -1
  %68 = trunc i64 %66 to i32
  %69 = select i1 %67, i32 %68, i32 0
  ret i32 %69
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_highbd_12_variance32x16_c(i8*, i32, i8*, i32, i32* nocapture) local_unnamed_addr #2 {
  %6 = ptrtoint i8* %2 to i64
  %7 = shl i64 %6, 1
  %8 = inttoptr i64 %7 to i16*
  %9 = ptrtoint i8* %0 to i64
  %10 = shl i64 %9, 1
  %11 = inttoptr i64 %10 to i16*
  %12 = sext i32 %1 to i64
  %13 = sext i32 %3 to i64
  br label %14

14:                                               ; preds = %51, %5
  %15 = phi i64 [ 0, %5 ], [ %48, %51 ]
  %16 = phi i64 [ 0, %5 ], [ %45, %51 ]
  %17 = phi i32 [ 0, %5 ], [ %54, %51 ]
  %18 = phi i16* [ %8, %5 ], [ %53, %51 ]
  %19 = phi i16* [ %11, %5 ], [ %52, %51 ]
  br label %20

20:                                               ; preds = %20, %14
  %21 = phi i64 [ %15, %14 ], [ %48, %20 ]
  %22 = phi i64 [ %16, %14 ], [ %45, %20 ]
  %23 = phi i64 [ 0, %14 ], [ %49, %20 ]
  %24 = getelementptr inbounds i16, i16* %19, i64 %23
  %25 = load i16, i16* %24, align 2
  %26 = zext i16 %25 to i32
  %27 = getelementptr inbounds i16, i16* %18, i64 %23
  %28 = load i16, i16* %27, align 2
  %29 = zext i16 %28 to i32
  %30 = sub nsw i32 %26, %29
  %31 = sext i32 %30 to i64
  %32 = add nsw i64 %22, %31
  %33 = mul nsw i32 %30, %30
  %34 = zext i32 %33 to i64
  %35 = add i64 %21, %34
  %36 = or i64 %23, 1
  %37 = getelementptr inbounds i16, i16* %19, i64 %36
  %38 = load i16, i16* %37, align 2
  %39 = zext i16 %38 to i32
  %40 = getelementptr inbounds i16, i16* %18, i64 %36
  %41 = load i16, i16* %40, align 2
  %42 = zext i16 %41 to i32
  %43 = sub nsw i32 %39, %42
  %44 = sext i32 %43 to i64
  %45 = add nsw i64 %32, %44
  %46 = mul nsw i32 %43, %43
  %47 = zext i32 %46 to i64
  %48 = add i64 %35, %47
  %49 = add nuw nsw i64 %23, 2
  %50 = icmp eq i64 %49, 32
  br i1 %50, label %51, label %20

51:                                               ; preds = %20
  %52 = getelementptr inbounds i16, i16* %19, i64 %12
  %53 = getelementptr inbounds i16, i16* %18, i64 %13
  %54 = add nuw nsw i32 %17, 1
  %55 = icmp eq i32 %54, 16
  br i1 %55, label %56, label %14

56:                                               ; preds = %51
  %57 = add i64 %48, 128
  %58 = lshr i64 %57, 8
  %59 = trunc i64 %58 to i32
  store i32 %59, i32* %4, align 4
  %60 = and i64 %58, 4294967295
  %61 = shl i64 %45, 28
  %62 = add i64 %61, 2147483648
  %63 = ashr i64 %62, 32
  %64 = mul nsw i64 %63, %63
  %65 = lshr i64 %64, 9
  %66 = sub nsw i64 %60, %65
  %67 = icmp sgt i64 %66, -1
  %68 = trunc i64 %66 to i32
  %69 = select i1 %67, i32 %68, i32 0
  ret i32 %69
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_highbd_8_sub_pixel_variance32x16_c(i8*, i32, i32, i32, i8*, i32, i32* nocapture) local_unnamed_addr #2 {
  %8 = alloca [544 x i16], align 16
  %9 = alloca [512 x i16], align 16
  %10 = bitcast [544 x i16]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1088, i8* nonnull %10) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %10, i8 -86, i64 1088, i1 false)
  %11 = bitcast [512 x i16]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %11) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %11, i8 -86, i64 1024, i1 false)
  %12 = getelementptr inbounds [544 x i16], [544 x i16]* %8, i64 0, i64 0
  %13 = sext i32 %2 to i64
  %14 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %13, i64 0
  %15 = ptrtoint i8* %0 to i64
  %16 = shl i64 %15, 1
  %17 = inttoptr i64 %16 to i16*
  %18 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %13, i64 1
  %19 = add i32 %1, -32
  %20 = zext i32 %19 to i64
  %21 = load i8, i8* %14, align 2
  %22 = zext i8 %21 to i32
  %23 = load i8, i8* %18, align 1
  %24 = zext i8 %23 to i32
  %25 = insertelement <8 x i32> undef, i32 %22, i32 0
  %26 = shufflevector <8 x i32> %25, <8 x i32> undef, <8 x i32> zeroinitializer
  %27 = insertelement <8 x i32> undef, i32 %24, i32 0
  %28 = shufflevector <8 x i32> %27, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %29

29:                                               ; preds = %136, %7
  %30 = phi i64 [ %142, %136 ], [ 0, %7 ]
  %31 = phi i16* [ %138, %136 ], [ %17, %7 ]
  %32 = phi i32 [ %140, %136 ], [ 0, %7 ]
  %33 = phi i16* [ %139, %136 ], [ %12, %7 ]
  %34 = shl nuw nsw i64 %30, 5
  %35 = add i64 %34, 32
  %36 = getelementptr [544 x i16], [544 x i16]* %8, i64 0, i64 %35
  %37 = getelementptr [544 x i16], [544 x i16]* %8, i64 0, i64 %34
  %38 = getelementptr i16, i16* %31, i64 33
  %39 = icmp ult i16* %37, %38
  %40 = icmp ult i16* %31, %36
  %41 = and i1 %39, %40
  br i1 %41, label %106, label %42

42:                                               ; preds = %29
  %43 = getelementptr i16, i16* %31, i64 32
  %44 = bitcast i16* %31 to <8 x i16>*
  %45 = load <8 x i16>, <8 x i16>* %44, align 2, !alias.scope !792
  %46 = zext <8 x i16> %45 to <8 x i32>
  %47 = mul nuw nsw <8 x i32> %26, %46
  %48 = getelementptr inbounds i16, i16* %31, i64 1
  %49 = bitcast i16* %48 to <8 x i16>*
  %50 = load <8 x i16>, <8 x i16>* %49, align 2, !alias.scope !792
  %51 = zext <8 x i16> %50 to <8 x i32>
  %52 = mul nuw nsw <8 x i32> %28, %51
  %53 = add nuw nsw <8 x i32> %47, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %54 = add nuw nsw <8 x i32> %53, %52
  %55 = lshr <8 x i32> %54, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %56 = trunc <8 x i32> %55 to <8 x i16>
  %57 = bitcast i16* %33 to <8 x i16>*
  store <8 x i16> %56, <8 x i16>* %57, align 2, !alias.scope !795, !noalias !792
  %58 = getelementptr i16, i16* %31, i64 8
  %59 = bitcast i16* %58 to <8 x i16>*
  %60 = load <8 x i16>, <8 x i16>* %59, align 2, !alias.scope !792
  %61 = zext <8 x i16> %60 to <8 x i32>
  %62 = mul nuw nsw <8 x i32> %26, %61
  %63 = getelementptr inbounds i16, i16* %31, i64 9
  %64 = bitcast i16* %63 to <8 x i16>*
  %65 = load <8 x i16>, <8 x i16>* %64, align 2, !alias.scope !792
  %66 = zext <8 x i16> %65 to <8 x i32>
  %67 = mul nuw nsw <8 x i32> %28, %66
  %68 = add nuw nsw <8 x i32> %62, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %69 = add nuw nsw <8 x i32> %68, %67
  %70 = lshr <8 x i32> %69, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %71 = trunc <8 x i32> %70 to <8 x i16>
  %72 = getelementptr inbounds i16, i16* %33, i64 8
  %73 = bitcast i16* %72 to <8 x i16>*
  store <8 x i16> %71, <8 x i16>* %73, align 2, !alias.scope !795, !noalias !792
  %74 = getelementptr i16, i16* %31, i64 16
  %75 = bitcast i16* %74 to <8 x i16>*
  %76 = load <8 x i16>, <8 x i16>* %75, align 2, !alias.scope !792
  %77 = zext <8 x i16> %76 to <8 x i32>
  %78 = mul nuw nsw <8 x i32> %26, %77
  %79 = getelementptr inbounds i16, i16* %31, i64 17
  %80 = bitcast i16* %79 to <8 x i16>*
  %81 = load <8 x i16>, <8 x i16>* %80, align 2, !alias.scope !792
  %82 = zext <8 x i16> %81 to <8 x i32>
  %83 = mul nuw nsw <8 x i32> %28, %82
  %84 = add nuw nsw <8 x i32> %78, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %85 = add nuw nsw <8 x i32> %84, %83
  %86 = lshr <8 x i32> %85, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %87 = trunc <8 x i32> %86 to <8 x i16>
  %88 = getelementptr inbounds i16, i16* %33, i64 16
  %89 = bitcast i16* %88 to <8 x i16>*
  store <8 x i16> %87, <8 x i16>* %89, align 2, !alias.scope !795, !noalias !792
  %90 = getelementptr i16, i16* %31, i64 24
  %91 = bitcast i16* %90 to <8 x i16>*
  %92 = load <8 x i16>, <8 x i16>* %91, align 2, !alias.scope !792
  %93 = zext <8 x i16> %92 to <8 x i32>
  %94 = mul nuw nsw <8 x i32> %26, %93
  %95 = getelementptr inbounds i16, i16* %31, i64 25
  %96 = bitcast i16* %95 to <8 x i16>*
  %97 = load <8 x i16>, <8 x i16>* %96, align 2, !alias.scope !792
  %98 = zext <8 x i16> %97 to <8 x i32>
  %99 = mul nuw nsw <8 x i32> %28, %98
  %100 = add nuw nsw <8 x i32> %94, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %101 = add nuw nsw <8 x i32> %100, %99
  %102 = lshr <8 x i32> %101, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %103 = trunc <8 x i32> %102 to <8 x i16>
  %104 = getelementptr inbounds i16, i16* %33, i64 24
  %105 = bitcast i16* %104 to <8 x i16>*
  store <8 x i16> %103, <8 x i16>* %105, align 2, !alias.scope !795, !noalias !792
  br label %136

106:                                              ; preds = %29, %106
  %107 = phi i64 [ %134, %106 ], [ 0, %29 ]
  %108 = phi i16* [ %125, %106 ], [ %31, %29 ]
  %109 = load i16, i16* %108, align 2
  %110 = zext i16 %109 to i32
  %111 = mul nuw nsw i32 %22, %110
  %112 = getelementptr inbounds i16, i16* %108, i64 1
  %113 = load i16, i16* %112, align 2
  %114 = zext i16 %113 to i32
  %115 = mul nuw nsw i32 %24, %114
  %116 = add nuw nsw i32 %111, 64
  %117 = add nuw nsw i32 %116, %115
  %118 = lshr i32 %117, 7
  %119 = trunc i32 %118 to i16
  %120 = getelementptr inbounds i16, i16* %33, i64 %107
  store i16 %119, i16* %120, align 2
  %121 = or i64 %107, 1
  %122 = load i16, i16* %112, align 2
  %123 = zext i16 %122 to i32
  %124 = mul nuw nsw i32 %22, %123
  %125 = getelementptr inbounds i16, i16* %108, i64 2
  %126 = load i16, i16* %125, align 2
  %127 = zext i16 %126 to i32
  %128 = mul nuw nsw i32 %24, %127
  %129 = add nuw nsw i32 %124, 64
  %130 = add nuw nsw i32 %129, %128
  %131 = lshr i32 %130, 7
  %132 = trunc i32 %131 to i16
  %133 = getelementptr inbounds i16, i16* %33, i64 %121
  store i16 %132, i16* %133, align 2
  %134 = add nuw nsw i64 %107, 2
  %135 = icmp eq i64 %134, 32
  br i1 %135, label %136, label %106, !llvm.loop !797

136:                                              ; preds = %106, %42
  %137 = phi i16* [ %43, %42 ], [ %125, %106 ]
  %138 = getelementptr inbounds i16, i16* %137, i64 %20
  %139 = getelementptr inbounds i16, i16* %33, i64 32
  %140 = add nuw nsw i32 %32, 1
  %141 = icmp eq i32 %140, 17
  %142 = add i64 %30, 1
  br i1 %141, label %143, label %29

143:                                              ; preds = %136
  %144 = getelementptr inbounds [512 x i16], [512 x i16]* %9, i64 0, i64 0
  %145 = sext i32 %3 to i64
  %146 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %145, i64 0
  %147 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %145, i64 1
  %148 = load i8, i8* %146, align 2
  %149 = zext i8 %148 to i32
  %150 = load i8, i8* %147, align 1
  %151 = zext i8 %150 to i32
  %152 = insertelement <8 x i32> undef, i32 %149, i32 0
  %153 = shufflevector <8 x i32> %152, <8 x i32> undef, <8 x i32> zeroinitializer
  %154 = insertelement <8 x i32> undef, i32 %151, i32 0
  %155 = shufflevector <8 x i32> %154, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %156

156:                                              ; preds = %265, %143
  %157 = phi i64 [ %270, %265 ], [ 0, %143 ]
  %158 = phi i32 [ %268, %265 ], [ 0, %143 ]
  %159 = phi i16* [ %266, %265 ], [ %12, %143 ]
  %160 = phi i16* [ %267, %265 ], [ %144, %143 ]
  %161 = shl nuw nsw i64 %157, 5
  %162 = add i64 %161, 32
  %163 = getelementptr [512 x i16], [512 x i16]* %9, i64 0, i64 %162
  %164 = getelementptr [512 x i16], [512 x i16]* %9, i64 0, i64 %161
  %165 = getelementptr i16, i16* %159, i64 64
  %166 = icmp ult i16* %164, %165
  %167 = icmp ult i16* %159, %163
  %168 = and i1 %166, %167
  br i1 %168, label %233, label %169

169:                                              ; preds = %156
  %170 = getelementptr i16, i16* %159, i64 32
  %171 = bitcast i16* %159 to <8 x i16>*
  %172 = load <8 x i16>, <8 x i16>* %171, align 2, !alias.scope !798
  %173 = zext <8 x i16> %172 to <8 x i32>
  %174 = mul nuw nsw <8 x i32> %153, %173
  %175 = getelementptr inbounds i16, i16* %159, i64 32
  %176 = bitcast i16* %175 to <8 x i16>*
  %177 = load <8 x i16>, <8 x i16>* %176, align 2, !alias.scope !798
  %178 = zext <8 x i16> %177 to <8 x i32>
  %179 = mul nuw nsw <8 x i32> %155, %178
  %180 = add nuw nsw <8 x i32> %174, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %181 = add nuw nsw <8 x i32> %180, %179
  %182 = lshr <8 x i32> %181, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %183 = trunc <8 x i32> %182 to <8 x i16>
  %184 = bitcast i16* %160 to <8 x i16>*
  store <8 x i16> %183, <8 x i16>* %184, align 2, !alias.scope !801, !noalias !798
  %185 = getelementptr i16, i16* %159, i64 8
  %186 = bitcast i16* %185 to <8 x i16>*
  %187 = load <8 x i16>, <8 x i16>* %186, align 2, !alias.scope !798
  %188 = zext <8 x i16> %187 to <8 x i32>
  %189 = mul nuw nsw <8 x i32> %153, %188
  %190 = getelementptr inbounds i16, i16* %159, i64 40
  %191 = bitcast i16* %190 to <8 x i16>*
  %192 = load <8 x i16>, <8 x i16>* %191, align 2, !alias.scope !798
  %193 = zext <8 x i16> %192 to <8 x i32>
  %194 = mul nuw nsw <8 x i32> %155, %193
  %195 = add nuw nsw <8 x i32> %189, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %196 = add nuw nsw <8 x i32> %195, %194
  %197 = lshr <8 x i32> %196, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %198 = trunc <8 x i32> %197 to <8 x i16>
  %199 = getelementptr inbounds i16, i16* %160, i64 8
  %200 = bitcast i16* %199 to <8 x i16>*
  store <8 x i16> %198, <8 x i16>* %200, align 2, !alias.scope !801, !noalias !798
  %201 = getelementptr i16, i16* %159, i64 16
  %202 = bitcast i16* %201 to <8 x i16>*
  %203 = load <8 x i16>, <8 x i16>* %202, align 2, !alias.scope !798
  %204 = zext <8 x i16> %203 to <8 x i32>
  %205 = mul nuw nsw <8 x i32> %153, %204
  %206 = getelementptr inbounds i16, i16* %159, i64 48
  %207 = bitcast i16* %206 to <8 x i16>*
  %208 = load <8 x i16>, <8 x i16>* %207, align 2, !alias.scope !798
  %209 = zext <8 x i16> %208 to <8 x i32>
  %210 = mul nuw nsw <8 x i32> %155, %209
  %211 = add nuw nsw <8 x i32> %205, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %212 = add nuw nsw <8 x i32> %211, %210
  %213 = lshr <8 x i32> %212, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %214 = trunc <8 x i32> %213 to <8 x i16>
  %215 = getelementptr inbounds i16, i16* %160, i64 16
  %216 = bitcast i16* %215 to <8 x i16>*
  store <8 x i16> %214, <8 x i16>* %216, align 2, !alias.scope !801, !noalias !798
  %217 = getelementptr i16, i16* %159, i64 24
  %218 = bitcast i16* %217 to <8 x i16>*
  %219 = load <8 x i16>, <8 x i16>* %218, align 2, !alias.scope !798
  %220 = zext <8 x i16> %219 to <8 x i32>
  %221 = mul nuw nsw <8 x i32> %153, %220
  %222 = getelementptr inbounds i16, i16* %159, i64 56
  %223 = bitcast i16* %222 to <8 x i16>*
  %224 = load <8 x i16>, <8 x i16>* %223, align 2, !alias.scope !798
  %225 = zext <8 x i16> %224 to <8 x i32>
  %226 = mul nuw nsw <8 x i32> %155, %225
  %227 = add nuw nsw <8 x i32> %221, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %228 = add nuw nsw <8 x i32> %227, %226
  %229 = lshr <8 x i32> %228, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %230 = trunc <8 x i32> %229 to <8 x i16>
  %231 = getelementptr inbounds i16, i16* %160, i64 24
  %232 = bitcast i16* %231 to <8 x i16>*
  store <8 x i16> %230, <8 x i16>* %232, align 2, !alias.scope !801, !noalias !798
  br label %265

233:                                              ; preds = %156, %233
  %234 = phi i64 [ %263, %233 ], [ 0, %156 ]
  %235 = phi i16* [ %262, %233 ], [ %159, %156 ]
  %236 = load i16, i16* %235, align 2
  %237 = zext i16 %236 to i32
  %238 = mul nuw nsw i32 %149, %237
  %239 = getelementptr inbounds i16, i16* %235, i64 32
  %240 = load i16, i16* %239, align 2
  %241 = zext i16 %240 to i32
  %242 = mul nuw nsw i32 %151, %241
  %243 = add nuw nsw i32 %238, 64
  %244 = add nuw nsw i32 %243, %242
  %245 = lshr i32 %244, 7
  %246 = trunc i32 %245 to i16
  %247 = getelementptr inbounds i16, i16* %160, i64 %234
  store i16 %246, i16* %247, align 2
  %248 = getelementptr inbounds i16, i16* %235, i64 1
  %249 = or i64 %234, 1
  %250 = load i16, i16* %248, align 2
  %251 = zext i16 %250 to i32
  %252 = mul nuw nsw i32 %149, %251
  %253 = getelementptr inbounds i16, i16* %235, i64 33
  %254 = load i16, i16* %253, align 2
  %255 = zext i16 %254 to i32
  %256 = mul nuw nsw i32 %151, %255
  %257 = add nuw nsw i32 %252, 64
  %258 = add nuw nsw i32 %257, %256
  %259 = lshr i32 %258, 7
  %260 = trunc i32 %259 to i16
  %261 = getelementptr inbounds i16, i16* %160, i64 %249
  store i16 %260, i16* %261, align 2
  %262 = getelementptr inbounds i16, i16* %235, i64 2
  %263 = add nuw nsw i64 %234, 2
  %264 = icmp eq i64 %263, 32
  br i1 %264, label %265, label %233, !llvm.loop !803

265:                                              ; preds = %233, %169
  %266 = phi i16* [ %170, %169 ], [ %262, %233 ]
  %267 = getelementptr inbounds i16, i16* %160, i64 32
  %268 = add nuw nsw i32 %158, 1
  %269 = icmp eq i32 %268, 16
  %270 = add i64 %157, 1
  br i1 %269, label %271, label %156

271:                                              ; preds = %265
  %272 = ptrtoint i8* %4 to i64
  %273 = shl i64 %272, 1
  %274 = inttoptr i64 %273 to i16*
  %275 = sext i32 %5 to i64
  br label %276

276:                                              ; preds = %313, %271
  %277 = phi i64 [ 0, %271 ], [ %310, %313 ]
  %278 = phi i64 [ 0, %271 ], [ %307, %313 ]
  %279 = phi i32 [ 0, %271 ], [ %316, %313 ]
  %280 = phi i16* [ %274, %271 ], [ %315, %313 ]
  %281 = phi i16* [ %144, %271 ], [ %314, %313 ]
  br label %282

282:                                              ; preds = %282, %276
  %283 = phi i64 [ %277, %276 ], [ %310, %282 ]
  %284 = phi i64 [ %278, %276 ], [ %307, %282 ]
  %285 = phi i64 [ 0, %276 ], [ %311, %282 ]
  %286 = getelementptr inbounds i16, i16* %281, i64 %285
  %287 = load i16, i16* %286, align 2
  %288 = zext i16 %287 to i32
  %289 = getelementptr inbounds i16, i16* %280, i64 %285
  %290 = load i16, i16* %289, align 2
  %291 = zext i16 %290 to i32
  %292 = sub nsw i32 %288, %291
  %293 = sext i32 %292 to i64
  %294 = add nsw i64 %284, %293
  %295 = mul nsw i32 %292, %292
  %296 = zext i32 %295 to i64
  %297 = add i64 %283, %296
  %298 = or i64 %285, 1
  %299 = getelementptr inbounds i16, i16* %281, i64 %298
  %300 = load i16, i16* %299, align 2
  %301 = zext i16 %300 to i32
  %302 = getelementptr inbounds i16, i16* %280, i64 %298
  %303 = load i16, i16* %302, align 2
  %304 = zext i16 %303 to i32
  %305 = sub nsw i32 %301, %304
  %306 = sext i32 %305 to i64
  %307 = add nsw i64 %294, %306
  %308 = mul nsw i32 %305, %305
  %309 = zext i32 %308 to i64
  %310 = add i64 %297, %309
  %311 = add nuw nsw i64 %285, 2
  %312 = icmp eq i64 %311, 32
  br i1 %312, label %313, label %282

313:                                              ; preds = %282
  %314 = getelementptr inbounds i16, i16* %281, i64 32
  %315 = getelementptr inbounds i16, i16* %280, i64 %275
  %316 = add nuw nsw i32 %279, 1
  %317 = icmp eq i32 %316, 16
  br i1 %317, label %318, label %276

318:                                              ; preds = %313
  %319 = trunc i64 %310 to i32
  store i32 %319, i32* %6, align 4
  %320 = shl i64 %307, 32
  %321 = ashr exact i64 %320, 32
  %322 = mul nsw i64 %321, %321
  %323 = lshr i64 %322, 9
  %324 = trunc i64 %323 to i32
  %325 = sub i32 %319, %324
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %11) #4
  call void @llvm.lifetime.end.p0i8(i64 1088, i8* nonnull %10) #4
  ret i32 %325
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_highbd_10_sub_pixel_variance32x16_c(i8*, i32, i32, i32, i8*, i32, i32* nocapture) local_unnamed_addr #2 {
  %8 = alloca [544 x i16], align 16
  %9 = alloca [512 x i16], align 16
  %10 = bitcast [544 x i16]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1088, i8* nonnull %10) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %10, i8 -86, i64 1088, i1 false)
  %11 = bitcast [512 x i16]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %11) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %11, i8 -86, i64 1024, i1 false)
  %12 = getelementptr inbounds [544 x i16], [544 x i16]* %8, i64 0, i64 0
  %13 = sext i32 %2 to i64
  %14 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %13, i64 0
  %15 = ptrtoint i8* %0 to i64
  %16 = shl i64 %15, 1
  %17 = inttoptr i64 %16 to i16*
  %18 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %13, i64 1
  %19 = add i32 %1, -32
  %20 = zext i32 %19 to i64
  %21 = load i8, i8* %14, align 2
  %22 = zext i8 %21 to i32
  %23 = load i8, i8* %18, align 1
  %24 = zext i8 %23 to i32
  %25 = insertelement <8 x i32> undef, i32 %22, i32 0
  %26 = shufflevector <8 x i32> %25, <8 x i32> undef, <8 x i32> zeroinitializer
  %27 = insertelement <8 x i32> undef, i32 %24, i32 0
  %28 = shufflevector <8 x i32> %27, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %29

29:                                               ; preds = %136, %7
  %30 = phi i64 [ %142, %136 ], [ 0, %7 ]
  %31 = phi i16* [ %138, %136 ], [ %17, %7 ]
  %32 = phi i32 [ %140, %136 ], [ 0, %7 ]
  %33 = phi i16* [ %139, %136 ], [ %12, %7 ]
  %34 = shl nuw nsw i64 %30, 5
  %35 = add i64 %34, 32
  %36 = getelementptr [544 x i16], [544 x i16]* %8, i64 0, i64 %35
  %37 = getelementptr [544 x i16], [544 x i16]* %8, i64 0, i64 %34
  %38 = getelementptr i16, i16* %31, i64 33
  %39 = icmp ult i16* %37, %38
  %40 = icmp ult i16* %31, %36
  %41 = and i1 %39, %40
  br i1 %41, label %106, label %42

42:                                               ; preds = %29
  %43 = getelementptr i16, i16* %31, i64 32
  %44 = bitcast i16* %31 to <8 x i16>*
  %45 = load <8 x i16>, <8 x i16>* %44, align 2, !alias.scope !804
  %46 = zext <8 x i16> %45 to <8 x i32>
  %47 = mul nuw nsw <8 x i32> %26, %46
  %48 = getelementptr inbounds i16, i16* %31, i64 1
  %49 = bitcast i16* %48 to <8 x i16>*
  %50 = load <8 x i16>, <8 x i16>* %49, align 2, !alias.scope !804
  %51 = zext <8 x i16> %50 to <8 x i32>
  %52 = mul nuw nsw <8 x i32> %28, %51
  %53 = add nuw nsw <8 x i32> %47, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %54 = add nuw nsw <8 x i32> %53, %52
  %55 = lshr <8 x i32> %54, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %56 = trunc <8 x i32> %55 to <8 x i16>
  %57 = bitcast i16* %33 to <8 x i16>*
  store <8 x i16> %56, <8 x i16>* %57, align 2, !alias.scope !807, !noalias !804
  %58 = getelementptr i16, i16* %31, i64 8
  %59 = bitcast i16* %58 to <8 x i16>*
  %60 = load <8 x i16>, <8 x i16>* %59, align 2, !alias.scope !804
  %61 = zext <8 x i16> %60 to <8 x i32>
  %62 = mul nuw nsw <8 x i32> %26, %61
  %63 = getelementptr inbounds i16, i16* %31, i64 9
  %64 = bitcast i16* %63 to <8 x i16>*
  %65 = load <8 x i16>, <8 x i16>* %64, align 2, !alias.scope !804
  %66 = zext <8 x i16> %65 to <8 x i32>
  %67 = mul nuw nsw <8 x i32> %28, %66
  %68 = add nuw nsw <8 x i32> %62, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %69 = add nuw nsw <8 x i32> %68, %67
  %70 = lshr <8 x i32> %69, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %71 = trunc <8 x i32> %70 to <8 x i16>
  %72 = getelementptr inbounds i16, i16* %33, i64 8
  %73 = bitcast i16* %72 to <8 x i16>*
  store <8 x i16> %71, <8 x i16>* %73, align 2, !alias.scope !807, !noalias !804
  %74 = getelementptr i16, i16* %31, i64 16
  %75 = bitcast i16* %74 to <8 x i16>*
  %76 = load <8 x i16>, <8 x i16>* %75, align 2, !alias.scope !804
  %77 = zext <8 x i16> %76 to <8 x i32>
  %78 = mul nuw nsw <8 x i32> %26, %77
  %79 = getelementptr inbounds i16, i16* %31, i64 17
  %80 = bitcast i16* %79 to <8 x i16>*
  %81 = load <8 x i16>, <8 x i16>* %80, align 2, !alias.scope !804
  %82 = zext <8 x i16> %81 to <8 x i32>
  %83 = mul nuw nsw <8 x i32> %28, %82
  %84 = add nuw nsw <8 x i32> %78, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %85 = add nuw nsw <8 x i32> %84, %83
  %86 = lshr <8 x i32> %85, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %87 = trunc <8 x i32> %86 to <8 x i16>
  %88 = getelementptr inbounds i16, i16* %33, i64 16
  %89 = bitcast i16* %88 to <8 x i16>*
  store <8 x i16> %87, <8 x i16>* %89, align 2, !alias.scope !807, !noalias !804
  %90 = getelementptr i16, i16* %31, i64 24
  %91 = bitcast i16* %90 to <8 x i16>*
  %92 = load <8 x i16>, <8 x i16>* %91, align 2, !alias.scope !804
  %93 = zext <8 x i16> %92 to <8 x i32>
  %94 = mul nuw nsw <8 x i32> %26, %93
  %95 = getelementptr inbounds i16, i16* %31, i64 25
  %96 = bitcast i16* %95 to <8 x i16>*
  %97 = load <8 x i16>, <8 x i16>* %96, align 2, !alias.scope !804
  %98 = zext <8 x i16> %97 to <8 x i32>
  %99 = mul nuw nsw <8 x i32> %28, %98
  %100 = add nuw nsw <8 x i32> %94, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %101 = add nuw nsw <8 x i32> %100, %99
  %102 = lshr <8 x i32> %101, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %103 = trunc <8 x i32> %102 to <8 x i16>
  %104 = getelementptr inbounds i16, i16* %33, i64 24
  %105 = bitcast i16* %104 to <8 x i16>*
  store <8 x i16> %103, <8 x i16>* %105, align 2, !alias.scope !807, !noalias !804
  br label %136

106:                                              ; preds = %29, %106
  %107 = phi i64 [ %134, %106 ], [ 0, %29 ]
  %108 = phi i16* [ %125, %106 ], [ %31, %29 ]
  %109 = load i16, i16* %108, align 2
  %110 = zext i16 %109 to i32
  %111 = mul nuw nsw i32 %22, %110
  %112 = getelementptr inbounds i16, i16* %108, i64 1
  %113 = load i16, i16* %112, align 2
  %114 = zext i16 %113 to i32
  %115 = mul nuw nsw i32 %24, %114
  %116 = add nuw nsw i32 %111, 64
  %117 = add nuw nsw i32 %116, %115
  %118 = lshr i32 %117, 7
  %119 = trunc i32 %118 to i16
  %120 = getelementptr inbounds i16, i16* %33, i64 %107
  store i16 %119, i16* %120, align 2
  %121 = or i64 %107, 1
  %122 = load i16, i16* %112, align 2
  %123 = zext i16 %122 to i32
  %124 = mul nuw nsw i32 %22, %123
  %125 = getelementptr inbounds i16, i16* %108, i64 2
  %126 = load i16, i16* %125, align 2
  %127 = zext i16 %126 to i32
  %128 = mul nuw nsw i32 %24, %127
  %129 = add nuw nsw i32 %124, 64
  %130 = add nuw nsw i32 %129, %128
  %131 = lshr i32 %130, 7
  %132 = trunc i32 %131 to i16
  %133 = getelementptr inbounds i16, i16* %33, i64 %121
  store i16 %132, i16* %133, align 2
  %134 = add nuw nsw i64 %107, 2
  %135 = icmp eq i64 %134, 32
  br i1 %135, label %136, label %106, !llvm.loop !809

136:                                              ; preds = %106, %42
  %137 = phi i16* [ %43, %42 ], [ %125, %106 ]
  %138 = getelementptr inbounds i16, i16* %137, i64 %20
  %139 = getelementptr inbounds i16, i16* %33, i64 32
  %140 = add nuw nsw i32 %32, 1
  %141 = icmp eq i32 %140, 17
  %142 = add i64 %30, 1
  br i1 %141, label %143, label %29

143:                                              ; preds = %136
  %144 = getelementptr inbounds [512 x i16], [512 x i16]* %9, i64 0, i64 0
  %145 = sext i32 %3 to i64
  %146 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %145, i64 0
  %147 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %145, i64 1
  %148 = load i8, i8* %146, align 2
  %149 = zext i8 %148 to i32
  %150 = load i8, i8* %147, align 1
  %151 = zext i8 %150 to i32
  %152 = insertelement <8 x i32> undef, i32 %149, i32 0
  %153 = shufflevector <8 x i32> %152, <8 x i32> undef, <8 x i32> zeroinitializer
  %154 = insertelement <8 x i32> undef, i32 %151, i32 0
  %155 = shufflevector <8 x i32> %154, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %156

156:                                              ; preds = %265, %143
  %157 = phi i64 [ %270, %265 ], [ 0, %143 ]
  %158 = phi i32 [ %268, %265 ], [ 0, %143 ]
  %159 = phi i16* [ %266, %265 ], [ %12, %143 ]
  %160 = phi i16* [ %267, %265 ], [ %144, %143 ]
  %161 = shl nuw nsw i64 %157, 5
  %162 = add i64 %161, 32
  %163 = getelementptr [512 x i16], [512 x i16]* %9, i64 0, i64 %162
  %164 = getelementptr [512 x i16], [512 x i16]* %9, i64 0, i64 %161
  %165 = getelementptr i16, i16* %159, i64 64
  %166 = icmp ult i16* %164, %165
  %167 = icmp ult i16* %159, %163
  %168 = and i1 %166, %167
  br i1 %168, label %233, label %169

169:                                              ; preds = %156
  %170 = getelementptr i16, i16* %159, i64 32
  %171 = bitcast i16* %159 to <8 x i16>*
  %172 = load <8 x i16>, <8 x i16>* %171, align 2, !alias.scope !810
  %173 = zext <8 x i16> %172 to <8 x i32>
  %174 = mul nuw nsw <8 x i32> %153, %173
  %175 = getelementptr inbounds i16, i16* %159, i64 32
  %176 = bitcast i16* %175 to <8 x i16>*
  %177 = load <8 x i16>, <8 x i16>* %176, align 2, !alias.scope !810
  %178 = zext <8 x i16> %177 to <8 x i32>
  %179 = mul nuw nsw <8 x i32> %155, %178
  %180 = add nuw nsw <8 x i32> %174, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %181 = add nuw nsw <8 x i32> %180, %179
  %182 = lshr <8 x i32> %181, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %183 = trunc <8 x i32> %182 to <8 x i16>
  %184 = bitcast i16* %160 to <8 x i16>*
  store <8 x i16> %183, <8 x i16>* %184, align 2, !alias.scope !813, !noalias !810
  %185 = getelementptr i16, i16* %159, i64 8
  %186 = bitcast i16* %185 to <8 x i16>*
  %187 = load <8 x i16>, <8 x i16>* %186, align 2, !alias.scope !810
  %188 = zext <8 x i16> %187 to <8 x i32>
  %189 = mul nuw nsw <8 x i32> %153, %188
  %190 = getelementptr inbounds i16, i16* %159, i64 40
  %191 = bitcast i16* %190 to <8 x i16>*
  %192 = load <8 x i16>, <8 x i16>* %191, align 2, !alias.scope !810
  %193 = zext <8 x i16> %192 to <8 x i32>
  %194 = mul nuw nsw <8 x i32> %155, %193
  %195 = add nuw nsw <8 x i32> %189, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %196 = add nuw nsw <8 x i32> %195, %194
  %197 = lshr <8 x i32> %196, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %198 = trunc <8 x i32> %197 to <8 x i16>
  %199 = getelementptr inbounds i16, i16* %160, i64 8
  %200 = bitcast i16* %199 to <8 x i16>*
  store <8 x i16> %198, <8 x i16>* %200, align 2, !alias.scope !813, !noalias !810
  %201 = getelementptr i16, i16* %159, i64 16
  %202 = bitcast i16* %201 to <8 x i16>*
  %203 = load <8 x i16>, <8 x i16>* %202, align 2, !alias.scope !810
  %204 = zext <8 x i16> %203 to <8 x i32>
  %205 = mul nuw nsw <8 x i32> %153, %204
  %206 = getelementptr inbounds i16, i16* %159, i64 48
  %207 = bitcast i16* %206 to <8 x i16>*
  %208 = load <8 x i16>, <8 x i16>* %207, align 2, !alias.scope !810
  %209 = zext <8 x i16> %208 to <8 x i32>
  %210 = mul nuw nsw <8 x i32> %155, %209
  %211 = add nuw nsw <8 x i32> %205, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %212 = add nuw nsw <8 x i32> %211, %210
  %213 = lshr <8 x i32> %212, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %214 = trunc <8 x i32> %213 to <8 x i16>
  %215 = getelementptr inbounds i16, i16* %160, i64 16
  %216 = bitcast i16* %215 to <8 x i16>*
  store <8 x i16> %214, <8 x i16>* %216, align 2, !alias.scope !813, !noalias !810
  %217 = getelementptr i16, i16* %159, i64 24
  %218 = bitcast i16* %217 to <8 x i16>*
  %219 = load <8 x i16>, <8 x i16>* %218, align 2, !alias.scope !810
  %220 = zext <8 x i16> %219 to <8 x i32>
  %221 = mul nuw nsw <8 x i32> %153, %220
  %222 = getelementptr inbounds i16, i16* %159, i64 56
  %223 = bitcast i16* %222 to <8 x i16>*
  %224 = load <8 x i16>, <8 x i16>* %223, align 2, !alias.scope !810
  %225 = zext <8 x i16> %224 to <8 x i32>
  %226 = mul nuw nsw <8 x i32> %155, %225
  %227 = add nuw nsw <8 x i32> %221, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %228 = add nuw nsw <8 x i32> %227, %226
  %229 = lshr <8 x i32> %228, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %230 = trunc <8 x i32> %229 to <8 x i16>
  %231 = getelementptr inbounds i16, i16* %160, i64 24
  %232 = bitcast i16* %231 to <8 x i16>*
  store <8 x i16> %230, <8 x i16>* %232, align 2, !alias.scope !813, !noalias !810
  br label %265

233:                                              ; preds = %156, %233
  %234 = phi i64 [ %263, %233 ], [ 0, %156 ]
  %235 = phi i16* [ %262, %233 ], [ %159, %156 ]
  %236 = load i16, i16* %235, align 2
  %237 = zext i16 %236 to i32
  %238 = mul nuw nsw i32 %149, %237
  %239 = getelementptr inbounds i16, i16* %235, i64 32
  %240 = load i16, i16* %239, align 2
  %241 = zext i16 %240 to i32
  %242 = mul nuw nsw i32 %151, %241
  %243 = add nuw nsw i32 %238, 64
  %244 = add nuw nsw i32 %243, %242
  %245 = lshr i32 %244, 7
  %246 = trunc i32 %245 to i16
  %247 = getelementptr inbounds i16, i16* %160, i64 %234
  store i16 %246, i16* %247, align 2
  %248 = getelementptr inbounds i16, i16* %235, i64 1
  %249 = or i64 %234, 1
  %250 = load i16, i16* %248, align 2
  %251 = zext i16 %250 to i32
  %252 = mul nuw nsw i32 %149, %251
  %253 = getelementptr inbounds i16, i16* %235, i64 33
  %254 = load i16, i16* %253, align 2
  %255 = zext i16 %254 to i32
  %256 = mul nuw nsw i32 %151, %255
  %257 = add nuw nsw i32 %252, 64
  %258 = add nuw nsw i32 %257, %256
  %259 = lshr i32 %258, 7
  %260 = trunc i32 %259 to i16
  %261 = getelementptr inbounds i16, i16* %160, i64 %249
  store i16 %260, i16* %261, align 2
  %262 = getelementptr inbounds i16, i16* %235, i64 2
  %263 = add nuw nsw i64 %234, 2
  %264 = icmp eq i64 %263, 32
  br i1 %264, label %265, label %233, !llvm.loop !815

265:                                              ; preds = %233, %169
  %266 = phi i16* [ %170, %169 ], [ %262, %233 ]
  %267 = getelementptr inbounds i16, i16* %160, i64 32
  %268 = add nuw nsw i32 %158, 1
  %269 = icmp eq i32 %268, 16
  %270 = add i64 %157, 1
  br i1 %269, label %271, label %156

271:                                              ; preds = %265
  %272 = ptrtoint i8* %4 to i64
  %273 = shl i64 %272, 1
  %274 = inttoptr i64 %273 to i16*
  %275 = sext i32 %5 to i64
  br label %276

276:                                              ; preds = %313, %271
  %277 = phi i64 [ 0, %271 ], [ %310, %313 ]
  %278 = phi i64 [ 0, %271 ], [ %307, %313 ]
  %279 = phi i32 [ 0, %271 ], [ %316, %313 ]
  %280 = phi i16* [ %274, %271 ], [ %315, %313 ]
  %281 = phi i16* [ %144, %271 ], [ %314, %313 ]
  br label %282

282:                                              ; preds = %282, %276
  %283 = phi i64 [ %277, %276 ], [ %310, %282 ]
  %284 = phi i64 [ %278, %276 ], [ %307, %282 ]
  %285 = phi i64 [ 0, %276 ], [ %311, %282 ]
  %286 = getelementptr inbounds i16, i16* %281, i64 %285
  %287 = load i16, i16* %286, align 2
  %288 = zext i16 %287 to i32
  %289 = getelementptr inbounds i16, i16* %280, i64 %285
  %290 = load i16, i16* %289, align 2
  %291 = zext i16 %290 to i32
  %292 = sub nsw i32 %288, %291
  %293 = sext i32 %292 to i64
  %294 = add nsw i64 %284, %293
  %295 = mul nsw i32 %292, %292
  %296 = zext i32 %295 to i64
  %297 = add i64 %283, %296
  %298 = or i64 %285, 1
  %299 = getelementptr inbounds i16, i16* %281, i64 %298
  %300 = load i16, i16* %299, align 2
  %301 = zext i16 %300 to i32
  %302 = getelementptr inbounds i16, i16* %280, i64 %298
  %303 = load i16, i16* %302, align 2
  %304 = zext i16 %303 to i32
  %305 = sub nsw i32 %301, %304
  %306 = sext i32 %305 to i64
  %307 = add nsw i64 %294, %306
  %308 = mul nsw i32 %305, %305
  %309 = zext i32 %308 to i64
  %310 = add i64 %297, %309
  %311 = add nuw nsw i64 %285, 2
  %312 = icmp eq i64 %311, 32
  br i1 %312, label %313, label %282

313:                                              ; preds = %282
  %314 = getelementptr inbounds i16, i16* %281, i64 32
  %315 = getelementptr inbounds i16, i16* %280, i64 %275
  %316 = add nuw nsw i32 %279, 1
  %317 = icmp eq i32 %316, 16
  br i1 %317, label %318, label %276

318:                                              ; preds = %313
  %319 = add i64 %310, 8
  %320 = lshr i64 %319, 4
  %321 = trunc i64 %320 to i32
  store i32 %321, i32* %6, align 4
  %322 = and i64 %320, 4294967295
  %323 = shl i64 %307, 30
  %324 = add i64 %323, 2147483648
  %325 = ashr i64 %324, 32
  %326 = mul nsw i64 %325, %325
  %327 = lshr i64 %326, 9
  %328 = sub nsw i64 %322, %327
  %329 = icmp sgt i64 %328, -1
  %330 = trunc i64 %328 to i32
  %331 = select i1 %329, i32 %330, i32 0
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %11) #4
  call void @llvm.lifetime.end.p0i8(i64 1088, i8* nonnull %10) #4
  ret i32 %331
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_highbd_12_sub_pixel_variance32x16_c(i8*, i32, i32, i32, i8*, i32, i32* nocapture) local_unnamed_addr #2 {
  %8 = alloca [544 x i16], align 16
  %9 = alloca [512 x i16], align 16
  %10 = bitcast [544 x i16]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1088, i8* nonnull %10) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %10, i8 -86, i64 1088, i1 false)
  %11 = bitcast [512 x i16]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %11) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %11, i8 -86, i64 1024, i1 false)
  %12 = getelementptr inbounds [544 x i16], [544 x i16]* %8, i64 0, i64 0
  %13 = sext i32 %2 to i64
  %14 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %13, i64 0
  %15 = ptrtoint i8* %0 to i64
  %16 = shl i64 %15, 1
  %17 = inttoptr i64 %16 to i16*
  %18 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %13, i64 1
  %19 = add i32 %1, -32
  %20 = zext i32 %19 to i64
  %21 = load i8, i8* %14, align 2
  %22 = zext i8 %21 to i32
  %23 = load i8, i8* %18, align 1
  %24 = zext i8 %23 to i32
  %25 = insertelement <8 x i32> undef, i32 %22, i32 0
  %26 = shufflevector <8 x i32> %25, <8 x i32> undef, <8 x i32> zeroinitializer
  %27 = insertelement <8 x i32> undef, i32 %24, i32 0
  %28 = shufflevector <8 x i32> %27, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %29

29:                                               ; preds = %136, %7
  %30 = phi i64 [ %142, %136 ], [ 0, %7 ]
  %31 = phi i16* [ %138, %136 ], [ %17, %7 ]
  %32 = phi i32 [ %140, %136 ], [ 0, %7 ]
  %33 = phi i16* [ %139, %136 ], [ %12, %7 ]
  %34 = shl nuw nsw i64 %30, 5
  %35 = add i64 %34, 32
  %36 = getelementptr [544 x i16], [544 x i16]* %8, i64 0, i64 %35
  %37 = getelementptr [544 x i16], [544 x i16]* %8, i64 0, i64 %34
  %38 = getelementptr i16, i16* %31, i64 33
  %39 = icmp ult i16* %37, %38
  %40 = icmp ult i16* %31, %36
  %41 = and i1 %39, %40
  br i1 %41, label %106, label %42

42:                                               ; preds = %29
  %43 = getelementptr i16, i16* %31, i64 32
  %44 = bitcast i16* %31 to <8 x i16>*
  %45 = load <8 x i16>, <8 x i16>* %44, align 2, !alias.scope !816
  %46 = zext <8 x i16> %45 to <8 x i32>
  %47 = mul nuw nsw <8 x i32> %26, %46
  %48 = getelementptr inbounds i16, i16* %31, i64 1
  %49 = bitcast i16* %48 to <8 x i16>*
  %50 = load <8 x i16>, <8 x i16>* %49, align 2, !alias.scope !816
  %51 = zext <8 x i16> %50 to <8 x i32>
  %52 = mul nuw nsw <8 x i32> %28, %51
  %53 = add nuw nsw <8 x i32> %47, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %54 = add nuw nsw <8 x i32> %53, %52
  %55 = lshr <8 x i32> %54, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %56 = trunc <8 x i32> %55 to <8 x i16>
  %57 = bitcast i16* %33 to <8 x i16>*
  store <8 x i16> %56, <8 x i16>* %57, align 2, !alias.scope !819, !noalias !816
  %58 = getelementptr i16, i16* %31, i64 8
  %59 = bitcast i16* %58 to <8 x i16>*
  %60 = load <8 x i16>, <8 x i16>* %59, align 2, !alias.scope !816
  %61 = zext <8 x i16> %60 to <8 x i32>
  %62 = mul nuw nsw <8 x i32> %26, %61
  %63 = getelementptr inbounds i16, i16* %31, i64 9
  %64 = bitcast i16* %63 to <8 x i16>*
  %65 = load <8 x i16>, <8 x i16>* %64, align 2, !alias.scope !816
  %66 = zext <8 x i16> %65 to <8 x i32>
  %67 = mul nuw nsw <8 x i32> %28, %66
  %68 = add nuw nsw <8 x i32> %62, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %69 = add nuw nsw <8 x i32> %68, %67
  %70 = lshr <8 x i32> %69, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %71 = trunc <8 x i32> %70 to <8 x i16>
  %72 = getelementptr inbounds i16, i16* %33, i64 8
  %73 = bitcast i16* %72 to <8 x i16>*
  store <8 x i16> %71, <8 x i16>* %73, align 2, !alias.scope !819, !noalias !816
  %74 = getelementptr i16, i16* %31, i64 16
  %75 = bitcast i16* %74 to <8 x i16>*
  %76 = load <8 x i16>, <8 x i16>* %75, align 2, !alias.scope !816
  %77 = zext <8 x i16> %76 to <8 x i32>
  %78 = mul nuw nsw <8 x i32> %26, %77
  %79 = getelementptr inbounds i16, i16* %31, i64 17
  %80 = bitcast i16* %79 to <8 x i16>*
  %81 = load <8 x i16>, <8 x i16>* %80, align 2, !alias.scope !816
  %82 = zext <8 x i16> %81 to <8 x i32>
  %83 = mul nuw nsw <8 x i32> %28, %82
  %84 = add nuw nsw <8 x i32> %78, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %85 = add nuw nsw <8 x i32> %84, %83
  %86 = lshr <8 x i32> %85, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %87 = trunc <8 x i32> %86 to <8 x i16>
  %88 = getelementptr inbounds i16, i16* %33, i64 16
  %89 = bitcast i16* %88 to <8 x i16>*
  store <8 x i16> %87, <8 x i16>* %89, align 2, !alias.scope !819, !noalias !816
  %90 = getelementptr i16, i16* %31, i64 24
  %91 = bitcast i16* %90 to <8 x i16>*
  %92 = load <8 x i16>, <8 x i16>* %91, align 2, !alias.scope !816
  %93 = zext <8 x i16> %92 to <8 x i32>
  %94 = mul nuw nsw <8 x i32> %26, %93
  %95 = getelementptr inbounds i16, i16* %31, i64 25
  %96 = bitcast i16* %95 to <8 x i16>*
  %97 = load <8 x i16>, <8 x i16>* %96, align 2, !alias.scope !816
  %98 = zext <8 x i16> %97 to <8 x i32>
  %99 = mul nuw nsw <8 x i32> %28, %98
  %100 = add nuw nsw <8 x i32> %94, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %101 = add nuw nsw <8 x i32> %100, %99
  %102 = lshr <8 x i32> %101, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %103 = trunc <8 x i32> %102 to <8 x i16>
  %104 = getelementptr inbounds i16, i16* %33, i64 24
  %105 = bitcast i16* %104 to <8 x i16>*
  store <8 x i16> %103, <8 x i16>* %105, align 2, !alias.scope !819, !noalias !816
  br label %136

106:                                              ; preds = %29, %106
  %107 = phi i64 [ %134, %106 ], [ 0, %29 ]
  %108 = phi i16* [ %125, %106 ], [ %31, %29 ]
  %109 = load i16, i16* %108, align 2
  %110 = zext i16 %109 to i32
  %111 = mul nuw nsw i32 %22, %110
  %112 = getelementptr inbounds i16, i16* %108, i64 1
  %113 = load i16, i16* %112, align 2
  %114 = zext i16 %113 to i32
  %115 = mul nuw nsw i32 %24, %114
  %116 = add nuw nsw i32 %111, 64
  %117 = add nuw nsw i32 %116, %115
  %118 = lshr i32 %117, 7
  %119 = trunc i32 %118 to i16
  %120 = getelementptr inbounds i16, i16* %33, i64 %107
  store i16 %119, i16* %120, align 2
  %121 = or i64 %107, 1
  %122 = load i16, i16* %112, align 2
  %123 = zext i16 %122 to i32
  %124 = mul nuw nsw i32 %22, %123
  %125 = getelementptr inbounds i16, i16* %108, i64 2
  %126 = load i16, i16* %125, align 2
  %127 = zext i16 %126 to i32
  %128 = mul nuw nsw i32 %24, %127
  %129 = add nuw nsw i32 %124, 64
  %130 = add nuw nsw i32 %129, %128
  %131 = lshr i32 %130, 7
  %132 = trunc i32 %131 to i16
  %133 = getelementptr inbounds i16, i16* %33, i64 %121
  store i16 %132, i16* %133, align 2
  %134 = add nuw nsw i64 %107, 2
  %135 = icmp eq i64 %134, 32
  br i1 %135, label %136, label %106, !llvm.loop !821

136:                                              ; preds = %106, %42
  %137 = phi i16* [ %43, %42 ], [ %125, %106 ]
  %138 = getelementptr inbounds i16, i16* %137, i64 %20
  %139 = getelementptr inbounds i16, i16* %33, i64 32
  %140 = add nuw nsw i32 %32, 1
  %141 = icmp eq i32 %140, 17
  %142 = add i64 %30, 1
  br i1 %141, label %143, label %29

143:                                              ; preds = %136
  %144 = getelementptr inbounds [512 x i16], [512 x i16]* %9, i64 0, i64 0
  %145 = sext i32 %3 to i64
  %146 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %145, i64 0
  %147 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %145, i64 1
  %148 = load i8, i8* %146, align 2
  %149 = zext i8 %148 to i32
  %150 = load i8, i8* %147, align 1
  %151 = zext i8 %150 to i32
  %152 = insertelement <8 x i32> undef, i32 %149, i32 0
  %153 = shufflevector <8 x i32> %152, <8 x i32> undef, <8 x i32> zeroinitializer
  %154 = insertelement <8 x i32> undef, i32 %151, i32 0
  %155 = shufflevector <8 x i32> %154, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %156

156:                                              ; preds = %265, %143
  %157 = phi i64 [ %270, %265 ], [ 0, %143 ]
  %158 = phi i32 [ %268, %265 ], [ 0, %143 ]
  %159 = phi i16* [ %266, %265 ], [ %12, %143 ]
  %160 = phi i16* [ %267, %265 ], [ %144, %143 ]
  %161 = shl nuw nsw i64 %157, 5
  %162 = add i64 %161, 32
  %163 = getelementptr [512 x i16], [512 x i16]* %9, i64 0, i64 %162
  %164 = getelementptr [512 x i16], [512 x i16]* %9, i64 0, i64 %161
  %165 = getelementptr i16, i16* %159, i64 64
  %166 = icmp ult i16* %164, %165
  %167 = icmp ult i16* %159, %163
  %168 = and i1 %166, %167
  br i1 %168, label %233, label %169

169:                                              ; preds = %156
  %170 = getelementptr i16, i16* %159, i64 32
  %171 = bitcast i16* %159 to <8 x i16>*
  %172 = load <8 x i16>, <8 x i16>* %171, align 2, !alias.scope !822
  %173 = zext <8 x i16> %172 to <8 x i32>
  %174 = mul nuw nsw <8 x i32> %153, %173
  %175 = getelementptr inbounds i16, i16* %159, i64 32
  %176 = bitcast i16* %175 to <8 x i16>*
  %177 = load <8 x i16>, <8 x i16>* %176, align 2, !alias.scope !822
  %178 = zext <8 x i16> %177 to <8 x i32>
  %179 = mul nuw nsw <8 x i32> %155, %178
  %180 = add nuw nsw <8 x i32> %174, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %181 = add nuw nsw <8 x i32> %180, %179
  %182 = lshr <8 x i32> %181, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %183 = trunc <8 x i32> %182 to <8 x i16>
  %184 = bitcast i16* %160 to <8 x i16>*
  store <8 x i16> %183, <8 x i16>* %184, align 2, !alias.scope !825, !noalias !822
  %185 = getelementptr i16, i16* %159, i64 8
  %186 = bitcast i16* %185 to <8 x i16>*
  %187 = load <8 x i16>, <8 x i16>* %186, align 2, !alias.scope !822
  %188 = zext <8 x i16> %187 to <8 x i32>
  %189 = mul nuw nsw <8 x i32> %153, %188
  %190 = getelementptr inbounds i16, i16* %159, i64 40
  %191 = bitcast i16* %190 to <8 x i16>*
  %192 = load <8 x i16>, <8 x i16>* %191, align 2, !alias.scope !822
  %193 = zext <8 x i16> %192 to <8 x i32>
  %194 = mul nuw nsw <8 x i32> %155, %193
  %195 = add nuw nsw <8 x i32> %189, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %196 = add nuw nsw <8 x i32> %195, %194
  %197 = lshr <8 x i32> %196, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %198 = trunc <8 x i32> %197 to <8 x i16>
  %199 = getelementptr inbounds i16, i16* %160, i64 8
  %200 = bitcast i16* %199 to <8 x i16>*
  store <8 x i16> %198, <8 x i16>* %200, align 2, !alias.scope !825, !noalias !822
  %201 = getelementptr i16, i16* %159, i64 16
  %202 = bitcast i16* %201 to <8 x i16>*
  %203 = load <8 x i16>, <8 x i16>* %202, align 2, !alias.scope !822
  %204 = zext <8 x i16> %203 to <8 x i32>
  %205 = mul nuw nsw <8 x i32> %153, %204
  %206 = getelementptr inbounds i16, i16* %159, i64 48
  %207 = bitcast i16* %206 to <8 x i16>*
  %208 = load <8 x i16>, <8 x i16>* %207, align 2, !alias.scope !822
  %209 = zext <8 x i16> %208 to <8 x i32>
  %210 = mul nuw nsw <8 x i32> %155, %209
  %211 = add nuw nsw <8 x i32> %205, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %212 = add nuw nsw <8 x i32> %211, %210
  %213 = lshr <8 x i32> %212, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %214 = trunc <8 x i32> %213 to <8 x i16>
  %215 = getelementptr inbounds i16, i16* %160, i64 16
  %216 = bitcast i16* %215 to <8 x i16>*
  store <8 x i16> %214, <8 x i16>* %216, align 2, !alias.scope !825, !noalias !822
  %217 = getelementptr i16, i16* %159, i64 24
  %218 = bitcast i16* %217 to <8 x i16>*
  %219 = load <8 x i16>, <8 x i16>* %218, align 2, !alias.scope !822
  %220 = zext <8 x i16> %219 to <8 x i32>
  %221 = mul nuw nsw <8 x i32> %153, %220
  %222 = getelementptr inbounds i16, i16* %159, i64 56
  %223 = bitcast i16* %222 to <8 x i16>*
  %224 = load <8 x i16>, <8 x i16>* %223, align 2, !alias.scope !822
  %225 = zext <8 x i16> %224 to <8 x i32>
  %226 = mul nuw nsw <8 x i32> %155, %225
  %227 = add nuw nsw <8 x i32> %221, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %228 = add nuw nsw <8 x i32> %227, %226
  %229 = lshr <8 x i32> %228, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %230 = trunc <8 x i32> %229 to <8 x i16>
  %231 = getelementptr inbounds i16, i16* %160, i64 24
  %232 = bitcast i16* %231 to <8 x i16>*
  store <8 x i16> %230, <8 x i16>* %232, align 2, !alias.scope !825, !noalias !822
  br label %265

233:                                              ; preds = %156, %233
  %234 = phi i64 [ %263, %233 ], [ 0, %156 ]
  %235 = phi i16* [ %262, %233 ], [ %159, %156 ]
  %236 = load i16, i16* %235, align 2
  %237 = zext i16 %236 to i32
  %238 = mul nuw nsw i32 %149, %237
  %239 = getelementptr inbounds i16, i16* %235, i64 32
  %240 = load i16, i16* %239, align 2
  %241 = zext i16 %240 to i32
  %242 = mul nuw nsw i32 %151, %241
  %243 = add nuw nsw i32 %238, 64
  %244 = add nuw nsw i32 %243, %242
  %245 = lshr i32 %244, 7
  %246 = trunc i32 %245 to i16
  %247 = getelementptr inbounds i16, i16* %160, i64 %234
  store i16 %246, i16* %247, align 2
  %248 = getelementptr inbounds i16, i16* %235, i64 1
  %249 = or i64 %234, 1
  %250 = load i16, i16* %248, align 2
  %251 = zext i16 %250 to i32
  %252 = mul nuw nsw i32 %149, %251
  %253 = getelementptr inbounds i16, i16* %235, i64 33
  %254 = load i16, i16* %253, align 2
  %255 = zext i16 %254 to i32
  %256 = mul nuw nsw i32 %151, %255
  %257 = add nuw nsw i32 %252, 64
  %258 = add nuw nsw i32 %257, %256
  %259 = lshr i32 %258, 7
  %260 = trunc i32 %259 to i16
  %261 = getelementptr inbounds i16, i16* %160, i64 %249
  store i16 %260, i16* %261, align 2
  %262 = getelementptr inbounds i16, i16* %235, i64 2
  %263 = add nuw nsw i64 %234, 2
  %264 = icmp eq i64 %263, 32
  br i1 %264, label %265, label %233, !llvm.loop !827

265:                                              ; preds = %233, %169
  %266 = phi i16* [ %170, %169 ], [ %262, %233 ]
  %267 = getelementptr inbounds i16, i16* %160, i64 32
  %268 = add nuw nsw i32 %158, 1
  %269 = icmp eq i32 %268, 16
  %270 = add i64 %157, 1
  br i1 %269, label %271, label %156

271:                                              ; preds = %265
  %272 = ptrtoint i8* %4 to i64
  %273 = shl i64 %272, 1
  %274 = inttoptr i64 %273 to i16*
  %275 = sext i32 %5 to i64
  br label %276

276:                                              ; preds = %313, %271
  %277 = phi i64 [ 0, %271 ], [ %310, %313 ]
  %278 = phi i64 [ 0, %271 ], [ %307, %313 ]
  %279 = phi i32 [ 0, %271 ], [ %316, %313 ]
  %280 = phi i16* [ %274, %271 ], [ %315, %313 ]
  %281 = phi i16* [ %144, %271 ], [ %314, %313 ]
  br label %282

282:                                              ; preds = %282, %276
  %283 = phi i64 [ %277, %276 ], [ %310, %282 ]
  %284 = phi i64 [ %278, %276 ], [ %307, %282 ]
  %285 = phi i64 [ 0, %276 ], [ %311, %282 ]
  %286 = getelementptr inbounds i16, i16* %281, i64 %285
  %287 = load i16, i16* %286, align 2
  %288 = zext i16 %287 to i32
  %289 = getelementptr inbounds i16, i16* %280, i64 %285
  %290 = load i16, i16* %289, align 2
  %291 = zext i16 %290 to i32
  %292 = sub nsw i32 %288, %291
  %293 = sext i32 %292 to i64
  %294 = add nsw i64 %284, %293
  %295 = mul nsw i32 %292, %292
  %296 = zext i32 %295 to i64
  %297 = add i64 %283, %296
  %298 = or i64 %285, 1
  %299 = getelementptr inbounds i16, i16* %281, i64 %298
  %300 = load i16, i16* %299, align 2
  %301 = zext i16 %300 to i32
  %302 = getelementptr inbounds i16, i16* %280, i64 %298
  %303 = load i16, i16* %302, align 2
  %304 = zext i16 %303 to i32
  %305 = sub nsw i32 %301, %304
  %306 = sext i32 %305 to i64
  %307 = add nsw i64 %294, %306
  %308 = mul nsw i32 %305, %305
  %309 = zext i32 %308 to i64
  %310 = add i64 %297, %309
  %311 = add nuw nsw i64 %285, 2
  %312 = icmp eq i64 %311, 32
  br i1 %312, label %313, label %282

313:                                              ; preds = %282
  %314 = getelementptr inbounds i16, i16* %281, i64 32
  %315 = getelementptr inbounds i16, i16* %280, i64 %275
  %316 = add nuw nsw i32 %279, 1
  %317 = icmp eq i32 %316, 16
  br i1 %317, label %318, label %276

318:                                              ; preds = %313
  %319 = add i64 %310, 128
  %320 = lshr i64 %319, 8
  %321 = trunc i64 %320 to i32
  store i32 %321, i32* %6, align 4
  %322 = and i64 %320, 4294967295
  %323 = shl i64 %307, 28
  %324 = add i64 %323, 2147483648
  %325 = ashr i64 %324, 32
  %326 = mul nsw i64 %325, %325
  %327 = lshr i64 %326, 9
  %328 = sub nsw i64 %322, %327
  %329 = icmp sgt i64 %328, -1
  %330 = trunc i64 %328 to i32
  %331 = select i1 %329, i32 %330, i32 0
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %11) #4
  call void @llvm.lifetime.end.p0i8(i64 1088, i8* nonnull %10) #4
  ret i32 %331
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_highbd_8_sub_pixel_avg_variance32x16_c(i8*, i32, i32, i32, i8*, i32, i32* nocapture, i8*) local_unnamed_addr #2 {
  %9 = alloca [544 x i16], align 16
  %10 = alloca [512 x i16], align 16
  %11 = alloca [512 x i16], align 16
  %12 = bitcast [544 x i16]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1088, i8* nonnull %12) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %12, i8 -86, i64 1088, i1 false)
  %13 = bitcast [512 x i16]* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %13) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %13, i8 -86, i64 1024, i1 false)
  %14 = bitcast [512 x i16]* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %14) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %14, i8 -86, i64 1024, i1 false)
  %15 = getelementptr inbounds [544 x i16], [544 x i16]* %9, i64 0, i64 0
  %16 = sext i32 %2 to i64
  %17 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %16, i64 0
  %18 = ptrtoint i8* %0 to i64
  %19 = shl i64 %18, 1
  %20 = inttoptr i64 %19 to i16*
  %21 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %16, i64 1
  %22 = add i32 %1, -32
  %23 = zext i32 %22 to i64
  %24 = load i8, i8* %17, align 2
  %25 = zext i8 %24 to i32
  %26 = load i8, i8* %21, align 1
  %27 = zext i8 %26 to i32
  %28 = insertelement <8 x i32> undef, i32 %25, i32 0
  %29 = shufflevector <8 x i32> %28, <8 x i32> undef, <8 x i32> zeroinitializer
  %30 = insertelement <8 x i32> undef, i32 %27, i32 0
  %31 = shufflevector <8 x i32> %30, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %32

32:                                               ; preds = %139, %8
  %33 = phi i64 [ %145, %139 ], [ 0, %8 ]
  %34 = phi i16* [ %141, %139 ], [ %20, %8 ]
  %35 = phi i32 [ %143, %139 ], [ 0, %8 ]
  %36 = phi i16* [ %142, %139 ], [ %15, %8 ]
  %37 = shl nuw nsw i64 %33, 5
  %38 = add i64 %37, 32
  %39 = getelementptr [544 x i16], [544 x i16]* %9, i64 0, i64 %38
  %40 = getelementptr [544 x i16], [544 x i16]* %9, i64 0, i64 %37
  %41 = getelementptr i16, i16* %34, i64 33
  %42 = icmp ult i16* %40, %41
  %43 = icmp ult i16* %34, %39
  %44 = and i1 %42, %43
  br i1 %44, label %109, label %45

45:                                               ; preds = %32
  %46 = getelementptr i16, i16* %34, i64 32
  %47 = bitcast i16* %34 to <8 x i16>*
  %48 = load <8 x i16>, <8 x i16>* %47, align 2, !alias.scope !828
  %49 = zext <8 x i16> %48 to <8 x i32>
  %50 = mul nuw nsw <8 x i32> %29, %49
  %51 = getelementptr inbounds i16, i16* %34, i64 1
  %52 = bitcast i16* %51 to <8 x i16>*
  %53 = load <8 x i16>, <8 x i16>* %52, align 2, !alias.scope !828
  %54 = zext <8 x i16> %53 to <8 x i32>
  %55 = mul nuw nsw <8 x i32> %31, %54
  %56 = add nuw nsw <8 x i32> %50, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %57 = add nuw nsw <8 x i32> %56, %55
  %58 = lshr <8 x i32> %57, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %59 = trunc <8 x i32> %58 to <8 x i16>
  %60 = bitcast i16* %36 to <8 x i16>*
  store <8 x i16> %59, <8 x i16>* %60, align 2, !alias.scope !831, !noalias !828
  %61 = getelementptr i16, i16* %34, i64 8
  %62 = bitcast i16* %61 to <8 x i16>*
  %63 = load <8 x i16>, <8 x i16>* %62, align 2, !alias.scope !828
  %64 = zext <8 x i16> %63 to <8 x i32>
  %65 = mul nuw nsw <8 x i32> %29, %64
  %66 = getelementptr inbounds i16, i16* %34, i64 9
  %67 = bitcast i16* %66 to <8 x i16>*
  %68 = load <8 x i16>, <8 x i16>* %67, align 2, !alias.scope !828
  %69 = zext <8 x i16> %68 to <8 x i32>
  %70 = mul nuw nsw <8 x i32> %31, %69
  %71 = add nuw nsw <8 x i32> %65, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %72 = add nuw nsw <8 x i32> %71, %70
  %73 = lshr <8 x i32> %72, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %74 = trunc <8 x i32> %73 to <8 x i16>
  %75 = getelementptr inbounds i16, i16* %36, i64 8
  %76 = bitcast i16* %75 to <8 x i16>*
  store <8 x i16> %74, <8 x i16>* %76, align 2, !alias.scope !831, !noalias !828
  %77 = getelementptr i16, i16* %34, i64 16
  %78 = bitcast i16* %77 to <8 x i16>*
  %79 = load <8 x i16>, <8 x i16>* %78, align 2, !alias.scope !828
  %80 = zext <8 x i16> %79 to <8 x i32>
  %81 = mul nuw nsw <8 x i32> %29, %80
  %82 = getelementptr inbounds i16, i16* %34, i64 17
  %83 = bitcast i16* %82 to <8 x i16>*
  %84 = load <8 x i16>, <8 x i16>* %83, align 2, !alias.scope !828
  %85 = zext <8 x i16> %84 to <8 x i32>
  %86 = mul nuw nsw <8 x i32> %31, %85
  %87 = add nuw nsw <8 x i32> %81, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %88 = add nuw nsw <8 x i32> %87, %86
  %89 = lshr <8 x i32> %88, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %90 = trunc <8 x i32> %89 to <8 x i16>
  %91 = getelementptr inbounds i16, i16* %36, i64 16
  %92 = bitcast i16* %91 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %92, align 2, !alias.scope !831, !noalias !828
  %93 = getelementptr i16, i16* %34, i64 24
  %94 = bitcast i16* %93 to <8 x i16>*
  %95 = load <8 x i16>, <8 x i16>* %94, align 2, !alias.scope !828
  %96 = zext <8 x i16> %95 to <8 x i32>
  %97 = mul nuw nsw <8 x i32> %29, %96
  %98 = getelementptr inbounds i16, i16* %34, i64 25
  %99 = bitcast i16* %98 to <8 x i16>*
  %100 = load <8 x i16>, <8 x i16>* %99, align 2, !alias.scope !828
  %101 = zext <8 x i16> %100 to <8 x i32>
  %102 = mul nuw nsw <8 x i32> %31, %101
  %103 = add nuw nsw <8 x i32> %97, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %104 = add nuw nsw <8 x i32> %103, %102
  %105 = lshr <8 x i32> %104, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %106 = trunc <8 x i32> %105 to <8 x i16>
  %107 = getelementptr inbounds i16, i16* %36, i64 24
  %108 = bitcast i16* %107 to <8 x i16>*
  store <8 x i16> %106, <8 x i16>* %108, align 2, !alias.scope !831, !noalias !828
  br label %139

109:                                              ; preds = %32, %109
  %110 = phi i64 [ %137, %109 ], [ 0, %32 ]
  %111 = phi i16* [ %128, %109 ], [ %34, %32 ]
  %112 = load i16, i16* %111, align 2
  %113 = zext i16 %112 to i32
  %114 = mul nuw nsw i32 %25, %113
  %115 = getelementptr inbounds i16, i16* %111, i64 1
  %116 = load i16, i16* %115, align 2
  %117 = zext i16 %116 to i32
  %118 = mul nuw nsw i32 %27, %117
  %119 = add nuw nsw i32 %114, 64
  %120 = add nuw nsw i32 %119, %118
  %121 = lshr i32 %120, 7
  %122 = trunc i32 %121 to i16
  %123 = getelementptr inbounds i16, i16* %36, i64 %110
  store i16 %122, i16* %123, align 2
  %124 = or i64 %110, 1
  %125 = load i16, i16* %115, align 2
  %126 = zext i16 %125 to i32
  %127 = mul nuw nsw i32 %25, %126
  %128 = getelementptr inbounds i16, i16* %111, i64 2
  %129 = load i16, i16* %128, align 2
  %130 = zext i16 %129 to i32
  %131 = mul nuw nsw i32 %27, %130
  %132 = add nuw nsw i32 %127, 64
  %133 = add nuw nsw i32 %132, %131
  %134 = lshr i32 %133, 7
  %135 = trunc i32 %134 to i16
  %136 = getelementptr inbounds i16, i16* %36, i64 %124
  store i16 %135, i16* %136, align 2
  %137 = add nuw nsw i64 %110, 2
  %138 = icmp eq i64 %137, 32
  br i1 %138, label %139, label %109, !llvm.loop !833

139:                                              ; preds = %109, %45
  %140 = phi i16* [ %46, %45 ], [ %128, %109 ]
  %141 = getelementptr inbounds i16, i16* %140, i64 %23
  %142 = getelementptr inbounds i16, i16* %36, i64 32
  %143 = add nuw nsw i32 %35, 1
  %144 = icmp eq i32 %143, 17
  %145 = add i64 %33, 1
  br i1 %144, label %146, label %32

146:                                              ; preds = %139
  %147 = getelementptr inbounds [512 x i16], [512 x i16]* %10, i64 0, i64 0
  %148 = sext i32 %3 to i64
  %149 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %148, i64 0
  %150 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %148, i64 1
  %151 = load i8, i8* %149, align 2
  %152 = zext i8 %151 to i32
  %153 = load i8, i8* %150, align 1
  %154 = zext i8 %153 to i32
  %155 = insertelement <8 x i32> undef, i32 %152, i32 0
  %156 = shufflevector <8 x i32> %155, <8 x i32> undef, <8 x i32> zeroinitializer
  %157 = insertelement <8 x i32> undef, i32 %154, i32 0
  %158 = shufflevector <8 x i32> %157, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %159

159:                                              ; preds = %268, %146
  %160 = phi i64 [ %273, %268 ], [ 0, %146 ]
  %161 = phi i32 [ %271, %268 ], [ 0, %146 ]
  %162 = phi i16* [ %269, %268 ], [ %15, %146 ]
  %163 = phi i16* [ %270, %268 ], [ %147, %146 ]
  %164 = shl nuw nsw i64 %160, 5
  %165 = add i64 %164, 32
  %166 = getelementptr [512 x i16], [512 x i16]* %10, i64 0, i64 %165
  %167 = getelementptr [512 x i16], [512 x i16]* %10, i64 0, i64 %164
  %168 = getelementptr i16, i16* %162, i64 64
  %169 = icmp ult i16* %167, %168
  %170 = icmp ult i16* %162, %166
  %171 = and i1 %169, %170
  br i1 %171, label %236, label %172

172:                                              ; preds = %159
  %173 = getelementptr i16, i16* %162, i64 32
  %174 = bitcast i16* %162 to <8 x i16>*
  %175 = load <8 x i16>, <8 x i16>* %174, align 2, !alias.scope !834
  %176 = zext <8 x i16> %175 to <8 x i32>
  %177 = mul nuw nsw <8 x i32> %156, %176
  %178 = getelementptr inbounds i16, i16* %162, i64 32
  %179 = bitcast i16* %178 to <8 x i16>*
  %180 = load <8 x i16>, <8 x i16>* %179, align 2, !alias.scope !834
  %181 = zext <8 x i16> %180 to <8 x i32>
  %182 = mul nuw nsw <8 x i32> %158, %181
  %183 = add nuw nsw <8 x i32> %177, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %184 = add nuw nsw <8 x i32> %183, %182
  %185 = lshr <8 x i32> %184, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %186 = trunc <8 x i32> %185 to <8 x i16>
  %187 = bitcast i16* %163 to <8 x i16>*
  store <8 x i16> %186, <8 x i16>* %187, align 2, !alias.scope !837, !noalias !834
  %188 = getelementptr i16, i16* %162, i64 8
  %189 = bitcast i16* %188 to <8 x i16>*
  %190 = load <8 x i16>, <8 x i16>* %189, align 2, !alias.scope !834
  %191 = zext <8 x i16> %190 to <8 x i32>
  %192 = mul nuw nsw <8 x i32> %156, %191
  %193 = getelementptr inbounds i16, i16* %162, i64 40
  %194 = bitcast i16* %193 to <8 x i16>*
  %195 = load <8 x i16>, <8 x i16>* %194, align 2, !alias.scope !834
  %196 = zext <8 x i16> %195 to <8 x i32>
  %197 = mul nuw nsw <8 x i32> %158, %196
  %198 = add nuw nsw <8 x i32> %192, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %199 = add nuw nsw <8 x i32> %198, %197
  %200 = lshr <8 x i32> %199, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %201 = trunc <8 x i32> %200 to <8 x i16>
  %202 = getelementptr inbounds i16, i16* %163, i64 8
  %203 = bitcast i16* %202 to <8 x i16>*
  store <8 x i16> %201, <8 x i16>* %203, align 2, !alias.scope !837, !noalias !834
  %204 = getelementptr i16, i16* %162, i64 16
  %205 = bitcast i16* %204 to <8 x i16>*
  %206 = load <8 x i16>, <8 x i16>* %205, align 2, !alias.scope !834
  %207 = zext <8 x i16> %206 to <8 x i32>
  %208 = mul nuw nsw <8 x i32> %156, %207
  %209 = getelementptr inbounds i16, i16* %162, i64 48
  %210 = bitcast i16* %209 to <8 x i16>*
  %211 = load <8 x i16>, <8 x i16>* %210, align 2, !alias.scope !834
  %212 = zext <8 x i16> %211 to <8 x i32>
  %213 = mul nuw nsw <8 x i32> %158, %212
  %214 = add nuw nsw <8 x i32> %208, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %215 = add nuw nsw <8 x i32> %214, %213
  %216 = lshr <8 x i32> %215, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %217 = trunc <8 x i32> %216 to <8 x i16>
  %218 = getelementptr inbounds i16, i16* %163, i64 16
  %219 = bitcast i16* %218 to <8 x i16>*
  store <8 x i16> %217, <8 x i16>* %219, align 2, !alias.scope !837, !noalias !834
  %220 = getelementptr i16, i16* %162, i64 24
  %221 = bitcast i16* %220 to <8 x i16>*
  %222 = load <8 x i16>, <8 x i16>* %221, align 2, !alias.scope !834
  %223 = zext <8 x i16> %222 to <8 x i32>
  %224 = mul nuw nsw <8 x i32> %156, %223
  %225 = getelementptr inbounds i16, i16* %162, i64 56
  %226 = bitcast i16* %225 to <8 x i16>*
  %227 = load <8 x i16>, <8 x i16>* %226, align 2, !alias.scope !834
  %228 = zext <8 x i16> %227 to <8 x i32>
  %229 = mul nuw nsw <8 x i32> %158, %228
  %230 = add nuw nsw <8 x i32> %224, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %231 = add nuw nsw <8 x i32> %230, %229
  %232 = lshr <8 x i32> %231, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %233 = trunc <8 x i32> %232 to <8 x i16>
  %234 = getelementptr inbounds i16, i16* %163, i64 24
  %235 = bitcast i16* %234 to <8 x i16>*
  store <8 x i16> %233, <8 x i16>* %235, align 2, !alias.scope !837, !noalias !834
  br label %268

236:                                              ; preds = %159, %236
  %237 = phi i64 [ %266, %236 ], [ 0, %159 ]
  %238 = phi i16* [ %265, %236 ], [ %162, %159 ]
  %239 = load i16, i16* %238, align 2
  %240 = zext i16 %239 to i32
  %241 = mul nuw nsw i32 %152, %240
  %242 = getelementptr inbounds i16, i16* %238, i64 32
  %243 = load i16, i16* %242, align 2
  %244 = zext i16 %243 to i32
  %245 = mul nuw nsw i32 %154, %244
  %246 = add nuw nsw i32 %241, 64
  %247 = add nuw nsw i32 %246, %245
  %248 = lshr i32 %247, 7
  %249 = trunc i32 %248 to i16
  %250 = getelementptr inbounds i16, i16* %163, i64 %237
  store i16 %249, i16* %250, align 2
  %251 = getelementptr inbounds i16, i16* %238, i64 1
  %252 = or i64 %237, 1
  %253 = load i16, i16* %251, align 2
  %254 = zext i16 %253 to i32
  %255 = mul nuw nsw i32 %152, %254
  %256 = getelementptr inbounds i16, i16* %238, i64 33
  %257 = load i16, i16* %256, align 2
  %258 = zext i16 %257 to i32
  %259 = mul nuw nsw i32 %154, %258
  %260 = add nuw nsw i32 %255, 64
  %261 = add nuw nsw i32 %260, %259
  %262 = lshr i32 %261, 7
  %263 = trunc i32 %262 to i16
  %264 = getelementptr inbounds i16, i16* %163, i64 %252
  store i16 %263, i16* %264, align 2
  %265 = getelementptr inbounds i16, i16* %238, i64 2
  %266 = add nuw nsw i64 %237, 2
  %267 = icmp eq i64 %266, 32
  br i1 %267, label %268, label %236, !llvm.loop !839

268:                                              ; preds = %236, %172
  %269 = phi i16* [ %173, %172 ], [ %265, %236 ]
  %270 = getelementptr inbounds i16, i16* %163, i64 32
  %271 = add nuw nsw i32 %161, 1
  %272 = icmp eq i32 %271, 16
  %273 = add i64 %160, 1
  br i1 %272, label %274, label %159

274:                                              ; preds = %268
  %275 = getelementptr inbounds [512 x i16], [512 x i16]* %11, i64 0, i64 0
  %276 = ptrtoint i8* %7 to i64
  %277 = shl i64 %276, 1
  %278 = inttoptr i64 %277 to i16*
  br label %279

279:                                              ; preds = %381, %274
  %280 = phi i64 [ %387, %381 ], [ 0, %274 ]
  %281 = phi i16* [ %382, %381 ], [ %275, %274 ]
  %282 = phi i32 [ %385, %381 ], [ 0, %274 ]
  %283 = phi i16* [ %383, %381 ], [ %278, %274 ]
  %284 = phi i16* [ %384, %381 ], [ %147, %274 ]
  %285 = shl nuw nsw i64 %280, 5
  %286 = getelementptr [512 x i16], [512 x i16]* %11, i64 0, i64 %285
  %287 = add i64 %285, 32
  %288 = getelementptr [512 x i16], [512 x i16]* %11, i64 0, i64 %287
  %289 = getelementptr [512 x i16], [512 x i16]* %10, i64 0, i64 %287
  %290 = getelementptr [512 x i16], [512 x i16]* %10, i64 0, i64 %285
  %291 = getelementptr i16, i16* %278, i64 %287
  %292 = getelementptr i16, i16* %278, i64 %285
  %293 = icmp ult i16* %286, %291
  %294 = icmp ult i16* %292, %288
  %295 = and i1 %293, %294
  %296 = icmp ult i16* %286, %289
  %297 = icmp ult i16* %290, %288
  %298 = and i1 %296, %297
  %299 = or i1 %295, %298
  br i1 %299, label %354, label %300

300:                                              ; preds = %279
  %301 = bitcast i16* %283 to <8 x i16>*
  %302 = load <8 x i16>, <8 x i16>* %301, align 2, !alias.scope !840
  %303 = zext <8 x i16> %302 to <8 x i32>
  %304 = bitcast i16* %284 to <8 x i16>*
  %305 = load <8 x i16>, <8 x i16>* %304, align 2, !alias.scope !843
  %306 = zext <8 x i16> %305 to <8 x i32>
  %307 = add nuw nsw <8 x i32> %303, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %308 = add nuw nsw <8 x i32> %307, %306
  %309 = lshr <8 x i32> %308, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %310 = trunc <8 x i32> %309 to <8 x i16>
  %311 = bitcast i16* %281 to <8 x i16>*
  store <8 x i16> %310, <8 x i16>* %311, align 2, !alias.scope !845, !noalias !847
  %312 = getelementptr inbounds i16, i16* %283, i64 8
  %313 = bitcast i16* %312 to <8 x i16>*
  %314 = load <8 x i16>, <8 x i16>* %313, align 2, !alias.scope !840
  %315 = zext <8 x i16> %314 to <8 x i32>
  %316 = getelementptr inbounds i16, i16* %284, i64 8
  %317 = bitcast i16* %316 to <8 x i16>*
  %318 = load <8 x i16>, <8 x i16>* %317, align 2, !alias.scope !843
  %319 = zext <8 x i16> %318 to <8 x i32>
  %320 = add nuw nsw <8 x i32> %315, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %321 = add nuw nsw <8 x i32> %320, %319
  %322 = lshr <8 x i32> %321, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %323 = trunc <8 x i32> %322 to <8 x i16>
  %324 = getelementptr inbounds i16, i16* %281, i64 8
  %325 = bitcast i16* %324 to <8 x i16>*
  store <8 x i16> %323, <8 x i16>* %325, align 2, !alias.scope !845, !noalias !847
  %326 = getelementptr inbounds i16, i16* %283, i64 16
  %327 = bitcast i16* %326 to <8 x i16>*
  %328 = load <8 x i16>, <8 x i16>* %327, align 2, !alias.scope !840
  %329 = zext <8 x i16> %328 to <8 x i32>
  %330 = getelementptr inbounds i16, i16* %284, i64 16
  %331 = bitcast i16* %330 to <8 x i16>*
  %332 = load <8 x i16>, <8 x i16>* %331, align 2, !alias.scope !843
  %333 = zext <8 x i16> %332 to <8 x i32>
  %334 = add nuw nsw <8 x i32> %329, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %335 = add nuw nsw <8 x i32> %334, %333
  %336 = lshr <8 x i32> %335, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %337 = trunc <8 x i32> %336 to <8 x i16>
  %338 = getelementptr inbounds i16, i16* %281, i64 16
  %339 = bitcast i16* %338 to <8 x i16>*
  store <8 x i16> %337, <8 x i16>* %339, align 2, !alias.scope !845, !noalias !847
  %340 = getelementptr inbounds i16, i16* %283, i64 24
  %341 = bitcast i16* %340 to <8 x i16>*
  %342 = load <8 x i16>, <8 x i16>* %341, align 2, !alias.scope !840
  %343 = zext <8 x i16> %342 to <8 x i32>
  %344 = getelementptr inbounds i16, i16* %284, i64 24
  %345 = bitcast i16* %344 to <8 x i16>*
  %346 = load <8 x i16>, <8 x i16>* %345, align 2, !alias.scope !843
  %347 = zext <8 x i16> %346 to <8 x i32>
  %348 = add nuw nsw <8 x i32> %343, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %349 = add nuw nsw <8 x i32> %348, %347
  %350 = lshr <8 x i32> %349, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %351 = trunc <8 x i32> %350 to <8 x i16>
  %352 = getelementptr inbounds i16, i16* %281, i64 24
  %353 = bitcast i16* %352 to <8 x i16>*
  store <8 x i16> %351, <8 x i16>* %353, align 2, !alias.scope !845, !noalias !847
  br label %381

354:                                              ; preds = %279, %354
  %355 = phi i64 [ %379, %354 ], [ 0, %279 ]
  %356 = getelementptr inbounds i16, i16* %283, i64 %355
  %357 = load i16, i16* %356, align 2
  %358 = zext i16 %357 to i32
  %359 = getelementptr inbounds i16, i16* %284, i64 %355
  %360 = load i16, i16* %359, align 2
  %361 = zext i16 %360 to i32
  %362 = add nuw nsw i32 %358, 1
  %363 = add nuw nsw i32 %362, %361
  %364 = lshr i32 %363, 1
  %365 = trunc i32 %364 to i16
  %366 = getelementptr inbounds i16, i16* %281, i64 %355
  store i16 %365, i16* %366, align 2
  %367 = or i64 %355, 1
  %368 = getelementptr inbounds i16, i16* %283, i64 %367
  %369 = load i16, i16* %368, align 2
  %370 = zext i16 %369 to i32
  %371 = getelementptr inbounds i16, i16* %284, i64 %367
  %372 = load i16, i16* %371, align 2
  %373 = zext i16 %372 to i32
  %374 = add nuw nsw i32 %370, 1
  %375 = add nuw nsw i32 %374, %373
  %376 = lshr i32 %375, 1
  %377 = trunc i32 %376 to i16
  %378 = getelementptr inbounds i16, i16* %281, i64 %367
  store i16 %377, i16* %378, align 2
  %379 = add nuw nsw i64 %355, 2
  %380 = icmp eq i64 %379, 32
  br i1 %380, label %381, label %354, !llvm.loop !848

381:                                              ; preds = %354, %300
  %382 = getelementptr inbounds i16, i16* %281, i64 32
  %383 = getelementptr inbounds i16, i16* %283, i64 32
  %384 = getelementptr inbounds i16, i16* %284, i64 32
  %385 = add nuw nsw i32 %282, 1
  %386 = icmp eq i32 %385, 16
  %387 = add i64 %280, 1
  br i1 %386, label %388, label %279

388:                                              ; preds = %381
  %389 = ptrtoint i8* %4 to i64
  %390 = shl i64 %389, 1
  %391 = inttoptr i64 %390 to i16*
  %392 = sext i32 %5 to i64
  br label %393

393:                                              ; preds = %430, %388
  %394 = phi i64 [ 0, %388 ], [ %427, %430 ]
  %395 = phi i64 [ 0, %388 ], [ %424, %430 ]
  %396 = phi i32 [ 0, %388 ], [ %433, %430 ]
  %397 = phi i16* [ %391, %388 ], [ %432, %430 ]
  %398 = phi i16* [ %275, %388 ], [ %431, %430 ]
  br label %399

399:                                              ; preds = %399, %393
  %400 = phi i64 [ %394, %393 ], [ %427, %399 ]
  %401 = phi i64 [ %395, %393 ], [ %424, %399 ]
  %402 = phi i64 [ 0, %393 ], [ %428, %399 ]
  %403 = getelementptr inbounds i16, i16* %398, i64 %402
  %404 = load i16, i16* %403, align 2
  %405 = zext i16 %404 to i32
  %406 = getelementptr inbounds i16, i16* %397, i64 %402
  %407 = load i16, i16* %406, align 2
  %408 = zext i16 %407 to i32
  %409 = sub nsw i32 %405, %408
  %410 = sext i32 %409 to i64
  %411 = add nsw i64 %401, %410
  %412 = mul nsw i32 %409, %409
  %413 = zext i32 %412 to i64
  %414 = add i64 %400, %413
  %415 = or i64 %402, 1
  %416 = getelementptr inbounds i16, i16* %398, i64 %415
  %417 = load i16, i16* %416, align 2
  %418 = zext i16 %417 to i32
  %419 = getelementptr inbounds i16, i16* %397, i64 %415
  %420 = load i16, i16* %419, align 2
  %421 = zext i16 %420 to i32
  %422 = sub nsw i32 %418, %421
  %423 = sext i32 %422 to i64
  %424 = add nsw i64 %411, %423
  %425 = mul nsw i32 %422, %422
  %426 = zext i32 %425 to i64
  %427 = add i64 %414, %426
  %428 = add nuw nsw i64 %402, 2
  %429 = icmp eq i64 %428, 32
  br i1 %429, label %430, label %399

430:                                              ; preds = %399
  %431 = getelementptr inbounds i16, i16* %398, i64 32
  %432 = getelementptr inbounds i16, i16* %397, i64 %392
  %433 = add nuw nsw i32 %396, 1
  %434 = icmp eq i32 %433, 16
  br i1 %434, label %435, label %393

435:                                              ; preds = %430
  %436 = trunc i64 %427 to i32
  store i32 %436, i32* %6, align 4
  %437 = shl i64 %424, 32
  %438 = ashr exact i64 %437, 32
  %439 = mul nsw i64 %438, %438
  %440 = lshr i64 %439, 9
  %441 = trunc i64 %440 to i32
  %442 = sub i32 %436, %441
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %14) #4
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %13) #4
  call void @llvm.lifetime.end.p0i8(i64 1088, i8* nonnull %12) #4
  ret i32 %442
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_highbd_10_sub_pixel_avg_variance32x16_c(i8*, i32, i32, i32, i8*, i32, i32* nocapture, i8*) local_unnamed_addr #2 {
  %9 = alloca [544 x i16], align 16
  %10 = alloca [512 x i16], align 16
  %11 = alloca [512 x i16], align 16
  %12 = bitcast [544 x i16]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1088, i8* nonnull %12) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %12, i8 -86, i64 1088, i1 false)
  %13 = bitcast [512 x i16]* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %13) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %13, i8 -86, i64 1024, i1 false)
  %14 = bitcast [512 x i16]* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %14) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %14, i8 -86, i64 1024, i1 false)
  %15 = getelementptr inbounds [544 x i16], [544 x i16]* %9, i64 0, i64 0
  %16 = sext i32 %2 to i64
  %17 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %16, i64 0
  %18 = ptrtoint i8* %0 to i64
  %19 = shl i64 %18, 1
  %20 = inttoptr i64 %19 to i16*
  %21 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %16, i64 1
  %22 = add i32 %1, -32
  %23 = zext i32 %22 to i64
  %24 = load i8, i8* %17, align 2
  %25 = zext i8 %24 to i32
  %26 = load i8, i8* %21, align 1
  %27 = zext i8 %26 to i32
  %28 = insertelement <8 x i32> undef, i32 %25, i32 0
  %29 = shufflevector <8 x i32> %28, <8 x i32> undef, <8 x i32> zeroinitializer
  %30 = insertelement <8 x i32> undef, i32 %27, i32 0
  %31 = shufflevector <8 x i32> %30, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %32

32:                                               ; preds = %139, %8
  %33 = phi i64 [ %145, %139 ], [ 0, %8 ]
  %34 = phi i16* [ %141, %139 ], [ %20, %8 ]
  %35 = phi i32 [ %143, %139 ], [ 0, %8 ]
  %36 = phi i16* [ %142, %139 ], [ %15, %8 ]
  %37 = shl nuw nsw i64 %33, 5
  %38 = add i64 %37, 32
  %39 = getelementptr [544 x i16], [544 x i16]* %9, i64 0, i64 %38
  %40 = getelementptr [544 x i16], [544 x i16]* %9, i64 0, i64 %37
  %41 = getelementptr i16, i16* %34, i64 33
  %42 = icmp ult i16* %40, %41
  %43 = icmp ult i16* %34, %39
  %44 = and i1 %42, %43
  br i1 %44, label %109, label %45

45:                                               ; preds = %32
  %46 = getelementptr i16, i16* %34, i64 32
  %47 = bitcast i16* %34 to <8 x i16>*
  %48 = load <8 x i16>, <8 x i16>* %47, align 2, !alias.scope !849
  %49 = zext <8 x i16> %48 to <8 x i32>
  %50 = mul nuw nsw <8 x i32> %29, %49
  %51 = getelementptr inbounds i16, i16* %34, i64 1
  %52 = bitcast i16* %51 to <8 x i16>*
  %53 = load <8 x i16>, <8 x i16>* %52, align 2, !alias.scope !849
  %54 = zext <8 x i16> %53 to <8 x i32>
  %55 = mul nuw nsw <8 x i32> %31, %54
  %56 = add nuw nsw <8 x i32> %50, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %57 = add nuw nsw <8 x i32> %56, %55
  %58 = lshr <8 x i32> %57, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %59 = trunc <8 x i32> %58 to <8 x i16>
  %60 = bitcast i16* %36 to <8 x i16>*
  store <8 x i16> %59, <8 x i16>* %60, align 2, !alias.scope !852, !noalias !849
  %61 = getelementptr i16, i16* %34, i64 8
  %62 = bitcast i16* %61 to <8 x i16>*
  %63 = load <8 x i16>, <8 x i16>* %62, align 2, !alias.scope !849
  %64 = zext <8 x i16> %63 to <8 x i32>
  %65 = mul nuw nsw <8 x i32> %29, %64
  %66 = getelementptr inbounds i16, i16* %34, i64 9
  %67 = bitcast i16* %66 to <8 x i16>*
  %68 = load <8 x i16>, <8 x i16>* %67, align 2, !alias.scope !849
  %69 = zext <8 x i16> %68 to <8 x i32>
  %70 = mul nuw nsw <8 x i32> %31, %69
  %71 = add nuw nsw <8 x i32> %65, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %72 = add nuw nsw <8 x i32> %71, %70
  %73 = lshr <8 x i32> %72, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %74 = trunc <8 x i32> %73 to <8 x i16>
  %75 = getelementptr inbounds i16, i16* %36, i64 8
  %76 = bitcast i16* %75 to <8 x i16>*
  store <8 x i16> %74, <8 x i16>* %76, align 2, !alias.scope !852, !noalias !849
  %77 = getelementptr i16, i16* %34, i64 16
  %78 = bitcast i16* %77 to <8 x i16>*
  %79 = load <8 x i16>, <8 x i16>* %78, align 2, !alias.scope !849
  %80 = zext <8 x i16> %79 to <8 x i32>
  %81 = mul nuw nsw <8 x i32> %29, %80
  %82 = getelementptr inbounds i16, i16* %34, i64 17
  %83 = bitcast i16* %82 to <8 x i16>*
  %84 = load <8 x i16>, <8 x i16>* %83, align 2, !alias.scope !849
  %85 = zext <8 x i16> %84 to <8 x i32>
  %86 = mul nuw nsw <8 x i32> %31, %85
  %87 = add nuw nsw <8 x i32> %81, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %88 = add nuw nsw <8 x i32> %87, %86
  %89 = lshr <8 x i32> %88, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %90 = trunc <8 x i32> %89 to <8 x i16>
  %91 = getelementptr inbounds i16, i16* %36, i64 16
  %92 = bitcast i16* %91 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %92, align 2, !alias.scope !852, !noalias !849
  %93 = getelementptr i16, i16* %34, i64 24
  %94 = bitcast i16* %93 to <8 x i16>*
  %95 = load <8 x i16>, <8 x i16>* %94, align 2, !alias.scope !849
  %96 = zext <8 x i16> %95 to <8 x i32>
  %97 = mul nuw nsw <8 x i32> %29, %96
  %98 = getelementptr inbounds i16, i16* %34, i64 25
  %99 = bitcast i16* %98 to <8 x i16>*
  %100 = load <8 x i16>, <8 x i16>* %99, align 2, !alias.scope !849
  %101 = zext <8 x i16> %100 to <8 x i32>
  %102 = mul nuw nsw <8 x i32> %31, %101
  %103 = add nuw nsw <8 x i32> %97, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %104 = add nuw nsw <8 x i32> %103, %102
  %105 = lshr <8 x i32> %104, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %106 = trunc <8 x i32> %105 to <8 x i16>
  %107 = getelementptr inbounds i16, i16* %36, i64 24
  %108 = bitcast i16* %107 to <8 x i16>*
  store <8 x i16> %106, <8 x i16>* %108, align 2, !alias.scope !852, !noalias !849
  br label %139

109:                                              ; preds = %32, %109
  %110 = phi i64 [ %137, %109 ], [ 0, %32 ]
  %111 = phi i16* [ %128, %109 ], [ %34, %32 ]
  %112 = load i16, i16* %111, align 2
  %113 = zext i16 %112 to i32
  %114 = mul nuw nsw i32 %25, %113
  %115 = getelementptr inbounds i16, i16* %111, i64 1
  %116 = load i16, i16* %115, align 2
  %117 = zext i16 %116 to i32
  %118 = mul nuw nsw i32 %27, %117
  %119 = add nuw nsw i32 %114, 64
  %120 = add nuw nsw i32 %119, %118
  %121 = lshr i32 %120, 7
  %122 = trunc i32 %121 to i16
  %123 = getelementptr inbounds i16, i16* %36, i64 %110
  store i16 %122, i16* %123, align 2
  %124 = or i64 %110, 1
  %125 = load i16, i16* %115, align 2
  %126 = zext i16 %125 to i32
  %127 = mul nuw nsw i32 %25, %126
  %128 = getelementptr inbounds i16, i16* %111, i64 2
  %129 = load i16, i16* %128, align 2
  %130 = zext i16 %129 to i32
  %131 = mul nuw nsw i32 %27, %130
  %132 = add nuw nsw i32 %127, 64
  %133 = add nuw nsw i32 %132, %131
  %134 = lshr i32 %133, 7
  %135 = trunc i32 %134 to i16
  %136 = getelementptr inbounds i16, i16* %36, i64 %124
  store i16 %135, i16* %136, align 2
  %137 = add nuw nsw i64 %110, 2
  %138 = icmp eq i64 %137, 32
  br i1 %138, label %139, label %109, !llvm.loop !854

139:                                              ; preds = %109, %45
  %140 = phi i16* [ %46, %45 ], [ %128, %109 ]
  %141 = getelementptr inbounds i16, i16* %140, i64 %23
  %142 = getelementptr inbounds i16, i16* %36, i64 32
  %143 = add nuw nsw i32 %35, 1
  %144 = icmp eq i32 %143, 17
  %145 = add i64 %33, 1
  br i1 %144, label %146, label %32

146:                                              ; preds = %139
  %147 = getelementptr inbounds [512 x i16], [512 x i16]* %10, i64 0, i64 0
  %148 = sext i32 %3 to i64
  %149 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %148, i64 0
  %150 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %148, i64 1
  %151 = load i8, i8* %149, align 2
  %152 = zext i8 %151 to i32
  %153 = load i8, i8* %150, align 1
  %154 = zext i8 %153 to i32
  %155 = insertelement <8 x i32> undef, i32 %152, i32 0
  %156 = shufflevector <8 x i32> %155, <8 x i32> undef, <8 x i32> zeroinitializer
  %157 = insertelement <8 x i32> undef, i32 %154, i32 0
  %158 = shufflevector <8 x i32> %157, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %159

159:                                              ; preds = %268, %146
  %160 = phi i64 [ %273, %268 ], [ 0, %146 ]
  %161 = phi i32 [ %271, %268 ], [ 0, %146 ]
  %162 = phi i16* [ %269, %268 ], [ %15, %146 ]
  %163 = phi i16* [ %270, %268 ], [ %147, %146 ]
  %164 = shl nuw nsw i64 %160, 5
  %165 = add i64 %164, 32
  %166 = getelementptr [512 x i16], [512 x i16]* %10, i64 0, i64 %165
  %167 = getelementptr [512 x i16], [512 x i16]* %10, i64 0, i64 %164
  %168 = getelementptr i16, i16* %162, i64 64
  %169 = icmp ult i16* %167, %168
  %170 = icmp ult i16* %162, %166
  %171 = and i1 %169, %170
  br i1 %171, label %236, label %172

172:                                              ; preds = %159
  %173 = getelementptr i16, i16* %162, i64 32
  %174 = bitcast i16* %162 to <8 x i16>*
  %175 = load <8 x i16>, <8 x i16>* %174, align 2, !alias.scope !855
  %176 = zext <8 x i16> %175 to <8 x i32>
  %177 = mul nuw nsw <8 x i32> %156, %176
  %178 = getelementptr inbounds i16, i16* %162, i64 32
  %179 = bitcast i16* %178 to <8 x i16>*
  %180 = load <8 x i16>, <8 x i16>* %179, align 2, !alias.scope !855
  %181 = zext <8 x i16> %180 to <8 x i32>
  %182 = mul nuw nsw <8 x i32> %158, %181
  %183 = add nuw nsw <8 x i32> %177, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %184 = add nuw nsw <8 x i32> %183, %182
  %185 = lshr <8 x i32> %184, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %186 = trunc <8 x i32> %185 to <8 x i16>
  %187 = bitcast i16* %163 to <8 x i16>*
  store <8 x i16> %186, <8 x i16>* %187, align 2, !alias.scope !858, !noalias !855
  %188 = getelementptr i16, i16* %162, i64 8
  %189 = bitcast i16* %188 to <8 x i16>*
  %190 = load <8 x i16>, <8 x i16>* %189, align 2, !alias.scope !855
  %191 = zext <8 x i16> %190 to <8 x i32>
  %192 = mul nuw nsw <8 x i32> %156, %191
  %193 = getelementptr inbounds i16, i16* %162, i64 40
  %194 = bitcast i16* %193 to <8 x i16>*
  %195 = load <8 x i16>, <8 x i16>* %194, align 2, !alias.scope !855
  %196 = zext <8 x i16> %195 to <8 x i32>
  %197 = mul nuw nsw <8 x i32> %158, %196
  %198 = add nuw nsw <8 x i32> %192, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %199 = add nuw nsw <8 x i32> %198, %197
  %200 = lshr <8 x i32> %199, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %201 = trunc <8 x i32> %200 to <8 x i16>
  %202 = getelementptr inbounds i16, i16* %163, i64 8
  %203 = bitcast i16* %202 to <8 x i16>*
  store <8 x i16> %201, <8 x i16>* %203, align 2, !alias.scope !858, !noalias !855
  %204 = getelementptr i16, i16* %162, i64 16
  %205 = bitcast i16* %204 to <8 x i16>*
  %206 = load <8 x i16>, <8 x i16>* %205, align 2, !alias.scope !855
  %207 = zext <8 x i16> %206 to <8 x i32>
  %208 = mul nuw nsw <8 x i32> %156, %207
  %209 = getelementptr inbounds i16, i16* %162, i64 48
  %210 = bitcast i16* %209 to <8 x i16>*
  %211 = load <8 x i16>, <8 x i16>* %210, align 2, !alias.scope !855
  %212 = zext <8 x i16> %211 to <8 x i32>
  %213 = mul nuw nsw <8 x i32> %158, %212
  %214 = add nuw nsw <8 x i32> %208, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %215 = add nuw nsw <8 x i32> %214, %213
  %216 = lshr <8 x i32> %215, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %217 = trunc <8 x i32> %216 to <8 x i16>
  %218 = getelementptr inbounds i16, i16* %163, i64 16
  %219 = bitcast i16* %218 to <8 x i16>*
  store <8 x i16> %217, <8 x i16>* %219, align 2, !alias.scope !858, !noalias !855
  %220 = getelementptr i16, i16* %162, i64 24
  %221 = bitcast i16* %220 to <8 x i16>*
  %222 = load <8 x i16>, <8 x i16>* %221, align 2, !alias.scope !855
  %223 = zext <8 x i16> %222 to <8 x i32>
  %224 = mul nuw nsw <8 x i32> %156, %223
  %225 = getelementptr inbounds i16, i16* %162, i64 56
  %226 = bitcast i16* %225 to <8 x i16>*
  %227 = load <8 x i16>, <8 x i16>* %226, align 2, !alias.scope !855
  %228 = zext <8 x i16> %227 to <8 x i32>
  %229 = mul nuw nsw <8 x i32> %158, %228
  %230 = add nuw nsw <8 x i32> %224, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %231 = add nuw nsw <8 x i32> %230, %229
  %232 = lshr <8 x i32> %231, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %233 = trunc <8 x i32> %232 to <8 x i16>
  %234 = getelementptr inbounds i16, i16* %163, i64 24
  %235 = bitcast i16* %234 to <8 x i16>*
  store <8 x i16> %233, <8 x i16>* %235, align 2, !alias.scope !858, !noalias !855
  br label %268

236:                                              ; preds = %159, %236
  %237 = phi i64 [ %266, %236 ], [ 0, %159 ]
  %238 = phi i16* [ %265, %236 ], [ %162, %159 ]
  %239 = load i16, i16* %238, align 2
  %240 = zext i16 %239 to i32
  %241 = mul nuw nsw i32 %152, %240
  %242 = getelementptr inbounds i16, i16* %238, i64 32
  %243 = load i16, i16* %242, align 2
  %244 = zext i16 %243 to i32
  %245 = mul nuw nsw i32 %154, %244
  %246 = add nuw nsw i32 %241, 64
  %247 = add nuw nsw i32 %246, %245
  %248 = lshr i32 %247, 7
  %249 = trunc i32 %248 to i16
  %250 = getelementptr inbounds i16, i16* %163, i64 %237
  store i16 %249, i16* %250, align 2
  %251 = getelementptr inbounds i16, i16* %238, i64 1
  %252 = or i64 %237, 1
  %253 = load i16, i16* %251, align 2
  %254 = zext i16 %253 to i32
  %255 = mul nuw nsw i32 %152, %254
  %256 = getelementptr inbounds i16, i16* %238, i64 33
  %257 = load i16, i16* %256, align 2
  %258 = zext i16 %257 to i32
  %259 = mul nuw nsw i32 %154, %258
  %260 = add nuw nsw i32 %255, 64
  %261 = add nuw nsw i32 %260, %259
  %262 = lshr i32 %261, 7
  %263 = trunc i32 %262 to i16
  %264 = getelementptr inbounds i16, i16* %163, i64 %252
  store i16 %263, i16* %264, align 2
  %265 = getelementptr inbounds i16, i16* %238, i64 2
  %266 = add nuw nsw i64 %237, 2
  %267 = icmp eq i64 %266, 32
  br i1 %267, label %268, label %236, !llvm.loop !860

268:                                              ; preds = %236, %172
  %269 = phi i16* [ %173, %172 ], [ %265, %236 ]
  %270 = getelementptr inbounds i16, i16* %163, i64 32
  %271 = add nuw nsw i32 %161, 1
  %272 = icmp eq i32 %271, 16
  %273 = add i64 %160, 1
  br i1 %272, label %274, label %159

274:                                              ; preds = %268
  %275 = getelementptr inbounds [512 x i16], [512 x i16]* %11, i64 0, i64 0
  %276 = ptrtoint i8* %7 to i64
  %277 = shl i64 %276, 1
  %278 = inttoptr i64 %277 to i16*
  br label %279

279:                                              ; preds = %381, %274
  %280 = phi i64 [ %387, %381 ], [ 0, %274 ]
  %281 = phi i16* [ %382, %381 ], [ %275, %274 ]
  %282 = phi i32 [ %385, %381 ], [ 0, %274 ]
  %283 = phi i16* [ %383, %381 ], [ %278, %274 ]
  %284 = phi i16* [ %384, %381 ], [ %147, %274 ]
  %285 = shl nuw nsw i64 %280, 5
  %286 = getelementptr [512 x i16], [512 x i16]* %11, i64 0, i64 %285
  %287 = add i64 %285, 32
  %288 = getelementptr [512 x i16], [512 x i16]* %11, i64 0, i64 %287
  %289 = getelementptr [512 x i16], [512 x i16]* %10, i64 0, i64 %287
  %290 = getelementptr [512 x i16], [512 x i16]* %10, i64 0, i64 %285
  %291 = getelementptr i16, i16* %278, i64 %287
  %292 = getelementptr i16, i16* %278, i64 %285
  %293 = icmp ult i16* %286, %291
  %294 = icmp ult i16* %292, %288
  %295 = and i1 %293, %294
  %296 = icmp ult i16* %286, %289
  %297 = icmp ult i16* %290, %288
  %298 = and i1 %296, %297
  %299 = or i1 %295, %298
  br i1 %299, label %354, label %300

300:                                              ; preds = %279
  %301 = bitcast i16* %283 to <8 x i16>*
  %302 = load <8 x i16>, <8 x i16>* %301, align 2, !alias.scope !861
  %303 = zext <8 x i16> %302 to <8 x i32>
  %304 = bitcast i16* %284 to <8 x i16>*
  %305 = load <8 x i16>, <8 x i16>* %304, align 2, !alias.scope !864
  %306 = zext <8 x i16> %305 to <8 x i32>
  %307 = add nuw nsw <8 x i32> %303, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %308 = add nuw nsw <8 x i32> %307, %306
  %309 = lshr <8 x i32> %308, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %310 = trunc <8 x i32> %309 to <8 x i16>
  %311 = bitcast i16* %281 to <8 x i16>*
  store <8 x i16> %310, <8 x i16>* %311, align 2, !alias.scope !866, !noalias !868
  %312 = getelementptr inbounds i16, i16* %283, i64 8
  %313 = bitcast i16* %312 to <8 x i16>*
  %314 = load <8 x i16>, <8 x i16>* %313, align 2, !alias.scope !861
  %315 = zext <8 x i16> %314 to <8 x i32>
  %316 = getelementptr inbounds i16, i16* %284, i64 8
  %317 = bitcast i16* %316 to <8 x i16>*
  %318 = load <8 x i16>, <8 x i16>* %317, align 2, !alias.scope !864
  %319 = zext <8 x i16> %318 to <8 x i32>
  %320 = add nuw nsw <8 x i32> %315, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %321 = add nuw nsw <8 x i32> %320, %319
  %322 = lshr <8 x i32> %321, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %323 = trunc <8 x i32> %322 to <8 x i16>
  %324 = getelementptr inbounds i16, i16* %281, i64 8
  %325 = bitcast i16* %324 to <8 x i16>*
  store <8 x i16> %323, <8 x i16>* %325, align 2, !alias.scope !866, !noalias !868
  %326 = getelementptr inbounds i16, i16* %283, i64 16
  %327 = bitcast i16* %326 to <8 x i16>*
  %328 = load <8 x i16>, <8 x i16>* %327, align 2, !alias.scope !861
  %329 = zext <8 x i16> %328 to <8 x i32>
  %330 = getelementptr inbounds i16, i16* %284, i64 16
  %331 = bitcast i16* %330 to <8 x i16>*
  %332 = load <8 x i16>, <8 x i16>* %331, align 2, !alias.scope !864
  %333 = zext <8 x i16> %332 to <8 x i32>
  %334 = add nuw nsw <8 x i32> %329, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %335 = add nuw nsw <8 x i32> %334, %333
  %336 = lshr <8 x i32> %335, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %337 = trunc <8 x i32> %336 to <8 x i16>
  %338 = getelementptr inbounds i16, i16* %281, i64 16
  %339 = bitcast i16* %338 to <8 x i16>*
  store <8 x i16> %337, <8 x i16>* %339, align 2, !alias.scope !866, !noalias !868
  %340 = getelementptr inbounds i16, i16* %283, i64 24
  %341 = bitcast i16* %340 to <8 x i16>*
  %342 = load <8 x i16>, <8 x i16>* %341, align 2, !alias.scope !861
  %343 = zext <8 x i16> %342 to <8 x i32>
  %344 = getelementptr inbounds i16, i16* %284, i64 24
  %345 = bitcast i16* %344 to <8 x i16>*
  %346 = load <8 x i16>, <8 x i16>* %345, align 2, !alias.scope !864
  %347 = zext <8 x i16> %346 to <8 x i32>
  %348 = add nuw nsw <8 x i32> %343, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %349 = add nuw nsw <8 x i32> %348, %347
  %350 = lshr <8 x i32> %349, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %351 = trunc <8 x i32> %350 to <8 x i16>
  %352 = getelementptr inbounds i16, i16* %281, i64 24
  %353 = bitcast i16* %352 to <8 x i16>*
  store <8 x i16> %351, <8 x i16>* %353, align 2, !alias.scope !866, !noalias !868
  br label %381

354:                                              ; preds = %279, %354
  %355 = phi i64 [ %379, %354 ], [ 0, %279 ]
  %356 = getelementptr inbounds i16, i16* %283, i64 %355
  %357 = load i16, i16* %356, align 2
  %358 = zext i16 %357 to i32
  %359 = getelementptr inbounds i16, i16* %284, i64 %355
  %360 = load i16, i16* %359, align 2
  %361 = zext i16 %360 to i32
  %362 = add nuw nsw i32 %358, 1
  %363 = add nuw nsw i32 %362, %361
  %364 = lshr i32 %363, 1
  %365 = trunc i32 %364 to i16
  %366 = getelementptr inbounds i16, i16* %281, i64 %355
  store i16 %365, i16* %366, align 2
  %367 = or i64 %355, 1
  %368 = getelementptr inbounds i16, i16* %283, i64 %367
  %369 = load i16, i16* %368, align 2
  %370 = zext i16 %369 to i32
  %371 = getelementptr inbounds i16, i16* %284, i64 %367
  %372 = load i16, i16* %371, align 2
  %373 = zext i16 %372 to i32
  %374 = add nuw nsw i32 %370, 1
  %375 = add nuw nsw i32 %374, %373
  %376 = lshr i32 %375, 1
  %377 = trunc i32 %376 to i16
  %378 = getelementptr inbounds i16, i16* %281, i64 %367
  store i16 %377, i16* %378, align 2
  %379 = add nuw nsw i64 %355, 2
  %380 = icmp eq i64 %379, 32
  br i1 %380, label %381, label %354, !llvm.loop !869

381:                                              ; preds = %354, %300
  %382 = getelementptr inbounds i16, i16* %281, i64 32
  %383 = getelementptr inbounds i16, i16* %283, i64 32
  %384 = getelementptr inbounds i16, i16* %284, i64 32
  %385 = add nuw nsw i32 %282, 1
  %386 = icmp eq i32 %385, 16
  %387 = add i64 %280, 1
  br i1 %386, label %388, label %279

388:                                              ; preds = %381
  %389 = ptrtoint i8* %4 to i64
  %390 = shl i64 %389, 1
  %391 = inttoptr i64 %390 to i16*
  %392 = sext i32 %5 to i64
  br label %393

393:                                              ; preds = %430, %388
  %394 = phi i64 [ 0, %388 ], [ %427, %430 ]
  %395 = phi i64 [ 0, %388 ], [ %424, %430 ]
  %396 = phi i32 [ 0, %388 ], [ %433, %430 ]
  %397 = phi i16* [ %391, %388 ], [ %432, %430 ]
  %398 = phi i16* [ %275, %388 ], [ %431, %430 ]
  br label %399

399:                                              ; preds = %399, %393
  %400 = phi i64 [ %394, %393 ], [ %427, %399 ]
  %401 = phi i64 [ %395, %393 ], [ %424, %399 ]
  %402 = phi i64 [ 0, %393 ], [ %428, %399 ]
  %403 = getelementptr inbounds i16, i16* %398, i64 %402
  %404 = load i16, i16* %403, align 2
  %405 = zext i16 %404 to i32
  %406 = getelementptr inbounds i16, i16* %397, i64 %402
  %407 = load i16, i16* %406, align 2
  %408 = zext i16 %407 to i32
  %409 = sub nsw i32 %405, %408
  %410 = sext i32 %409 to i64
  %411 = add nsw i64 %401, %410
  %412 = mul nsw i32 %409, %409
  %413 = zext i32 %412 to i64
  %414 = add i64 %400, %413
  %415 = or i64 %402, 1
  %416 = getelementptr inbounds i16, i16* %398, i64 %415
  %417 = load i16, i16* %416, align 2
  %418 = zext i16 %417 to i32
  %419 = getelementptr inbounds i16, i16* %397, i64 %415
  %420 = load i16, i16* %419, align 2
  %421 = zext i16 %420 to i32
  %422 = sub nsw i32 %418, %421
  %423 = sext i32 %422 to i64
  %424 = add nsw i64 %411, %423
  %425 = mul nsw i32 %422, %422
  %426 = zext i32 %425 to i64
  %427 = add i64 %414, %426
  %428 = add nuw nsw i64 %402, 2
  %429 = icmp eq i64 %428, 32
  br i1 %429, label %430, label %399

430:                                              ; preds = %399
  %431 = getelementptr inbounds i16, i16* %398, i64 32
  %432 = getelementptr inbounds i16, i16* %397, i64 %392
  %433 = add nuw nsw i32 %396, 1
  %434 = icmp eq i32 %433, 16
  br i1 %434, label %435, label %393

435:                                              ; preds = %430
  %436 = add i64 %427, 8
  %437 = lshr i64 %436, 4
  %438 = trunc i64 %437 to i32
  store i32 %438, i32* %6, align 4
  %439 = and i64 %437, 4294967295
  %440 = shl i64 %424, 30
  %441 = add i64 %440, 2147483648
  %442 = ashr i64 %441, 32
  %443 = mul nsw i64 %442, %442
  %444 = lshr i64 %443, 9
  %445 = sub nsw i64 %439, %444
  %446 = icmp sgt i64 %445, -1
  %447 = trunc i64 %445 to i32
  %448 = select i1 %446, i32 %447, i32 0
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %14) #4
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %13) #4
  call void @llvm.lifetime.end.p0i8(i64 1088, i8* nonnull %12) #4
  ret i32 %448
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_highbd_12_sub_pixel_avg_variance32x16_c(i8*, i32, i32, i32, i8*, i32, i32* nocapture, i8*) local_unnamed_addr #2 {
  %9 = alloca [544 x i16], align 16
  %10 = alloca [512 x i16], align 16
  %11 = alloca [512 x i16], align 16
  %12 = bitcast [544 x i16]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1088, i8* nonnull %12) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %12, i8 -86, i64 1088, i1 false)
  %13 = bitcast [512 x i16]* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %13) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %13, i8 -86, i64 1024, i1 false)
  %14 = bitcast [512 x i16]* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %14) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %14, i8 -86, i64 1024, i1 false)
  %15 = getelementptr inbounds [544 x i16], [544 x i16]* %9, i64 0, i64 0
  %16 = sext i32 %2 to i64
  %17 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %16, i64 0
  %18 = ptrtoint i8* %0 to i64
  %19 = shl i64 %18, 1
  %20 = inttoptr i64 %19 to i16*
  %21 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %16, i64 1
  %22 = add i32 %1, -32
  %23 = zext i32 %22 to i64
  %24 = load i8, i8* %17, align 2
  %25 = zext i8 %24 to i32
  %26 = load i8, i8* %21, align 1
  %27 = zext i8 %26 to i32
  %28 = insertelement <8 x i32> undef, i32 %25, i32 0
  %29 = shufflevector <8 x i32> %28, <8 x i32> undef, <8 x i32> zeroinitializer
  %30 = insertelement <8 x i32> undef, i32 %27, i32 0
  %31 = shufflevector <8 x i32> %30, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %32

32:                                               ; preds = %139, %8
  %33 = phi i64 [ %145, %139 ], [ 0, %8 ]
  %34 = phi i16* [ %141, %139 ], [ %20, %8 ]
  %35 = phi i32 [ %143, %139 ], [ 0, %8 ]
  %36 = phi i16* [ %142, %139 ], [ %15, %8 ]
  %37 = shl nuw nsw i64 %33, 5
  %38 = add i64 %37, 32
  %39 = getelementptr [544 x i16], [544 x i16]* %9, i64 0, i64 %38
  %40 = getelementptr [544 x i16], [544 x i16]* %9, i64 0, i64 %37
  %41 = getelementptr i16, i16* %34, i64 33
  %42 = icmp ult i16* %40, %41
  %43 = icmp ult i16* %34, %39
  %44 = and i1 %42, %43
  br i1 %44, label %109, label %45

45:                                               ; preds = %32
  %46 = getelementptr i16, i16* %34, i64 32
  %47 = bitcast i16* %34 to <8 x i16>*
  %48 = load <8 x i16>, <8 x i16>* %47, align 2, !alias.scope !870
  %49 = zext <8 x i16> %48 to <8 x i32>
  %50 = mul nuw nsw <8 x i32> %29, %49
  %51 = getelementptr inbounds i16, i16* %34, i64 1
  %52 = bitcast i16* %51 to <8 x i16>*
  %53 = load <8 x i16>, <8 x i16>* %52, align 2, !alias.scope !870
  %54 = zext <8 x i16> %53 to <8 x i32>
  %55 = mul nuw nsw <8 x i32> %31, %54
  %56 = add nuw nsw <8 x i32> %50, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %57 = add nuw nsw <8 x i32> %56, %55
  %58 = lshr <8 x i32> %57, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %59 = trunc <8 x i32> %58 to <8 x i16>
  %60 = bitcast i16* %36 to <8 x i16>*
  store <8 x i16> %59, <8 x i16>* %60, align 2, !alias.scope !873, !noalias !870
  %61 = getelementptr i16, i16* %34, i64 8
  %62 = bitcast i16* %61 to <8 x i16>*
  %63 = load <8 x i16>, <8 x i16>* %62, align 2, !alias.scope !870
  %64 = zext <8 x i16> %63 to <8 x i32>
  %65 = mul nuw nsw <8 x i32> %29, %64
  %66 = getelementptr inbounds i16, i16* %34, i64 9
  %67 = bitcast i16* %66 to <8 x i16>*
  %68 = load <8 x i16>, <8 x i16>* %67, align 2, !alias.scope !870
  %69 = zext <8 x i16> %68 to <8 x i32>
  %70 = mul nuw nsw <8 x i32> %31, %69
  %71 = add nuw nsw <8 x i32> %65, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %72 = add nuw nsw <8 x i32> %71, %70
  %73 = lshr <8 x i32> %72, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %74 = trunc <8 x i32> %73 to <8 x i16>
  %75 = getelementptr inbounds i16, i16* %36, i64 8
  %76 = bitcast i16* %75 to <8 x i16>*
  store <8 x i16> %74, <8 x i16>* %76, align 2, !alias.scope !873, !noalias !870
  %77 = getelementptr i16, i16* %34, i64 16
  %78 = bitcast i16* %77 to <8 x i16>*
  %79 = load <8 x i16>, <8 x i16>* %78, align 2, !alias.scope !870
  %80 = zext <8 x i16> %79 to <8 x i32>
  %81 = mul nuw nsw <8 x i32> %29, %80
  %82 = getelementptr inbounds i16, i16* %34, i64 17
  %83 = bitcast i16* %82 to <8 x i16>*
  %84 = load <8 x i16>, <8 x i16>* %83, align 2, !alias.scope !870
  %85 = zext <8 x i16> %84 to <8 x i32>
  %86 = mul nuw nsw <8 x i32> %31, %85
  %87 = add nuw nsw <8 x i32> %81, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %88 = add nuw nsw <8 x i32> %87, %86
  %89 = lshr <8 x i32> %88, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %90 = trunc <8 x i32> %89 to <8 x i16>
  %91 = getelementptr inbounds i16, i16* %36, i64 16
  %92 = bitcast i16* %91 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %92, align 2, !alias.scope !873, !noalias !870
  %93 = getelementptr i16, i16* %34, i64 24
  %94 = bitcast i16* %93 to <8 x i16>*
  %95 = load <8 x i16>, <8 x i16>* %94, align 2, !alias.scope !870
  %96 = zext <8 x i16> %95 to <8 x i32>
  %97 = mul nuw nsw <8 x i32> %29, %96
  %98 = getelementptr inbounds i16, i16* %34, i64 25
  %99 = bitcast i16* %98 to <8 x i16>*
  %100 = load <8 x i16>, <8 x i16>* %99, align 2, !alias.scope !870
  %101 = zext <8 x i16> %100 to <8 x i32>
  %102 = mul nuw nsw <8 x i32> %31, %101
  %103 = add nuw nsw <8 x i32> %97, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %104 = add nuw nsw <8 x i32> %103, %102
  %105 = lshr <8 x i32> %104, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %106 = trunc <8 x i32> %105 to <8 x i16>
  %107 = getelementptr inbounds i16, i16* %36, i64 24
  %108 = bitcast i16* %107 to <8 x i16>*
  store <8 x i16> %106, <8 x i16>* %108, align 2, !alias.scope !873, !noalias !870
  br label %139

109:                                              ; preds = %32, %109
  %110 = phi i64 [ %137, %109 ], [ 0, %32 ]
  %111 = phi i16* [ %128, %109 ], [ %34, %32 ]
  %112 = load i16, i16* %111, align 2
  %113 = zext i16 %112 to i32
  %114 = mul nuw nsw i32 %25, %113
  %115 = getelementptr inbounds i16, i16* %111, i64 1
  %116 = load i16, i16* %115, align 2
  %117 = zext i16 %116 to i32
  %118 = mul nuw nsw i32 %27, %117
  %119 = add nuw nsw i32 %114, 64
  %120 = add nuw nsw i32 %119, %118
  %121 = lshr i32 %120, 7
  %122 = trunc i32 %121 to i16
  %123 = getelementptr inbounds i16, i16* %36, i64 %110
  store i16 %122, i16* %123, align 2
  %124 = or i64 %110, 1
  %125 = load i16, i16* %115, align 2
  %126 = zext i16 %125 to i32
  %127 = mul nuw nsw i32 %25, %126
  %128 = getelementptr inbounds i16, i16* %111, i64 2
  %129 = load i16, i16* %128, align 2
  %130 = zext i16 %129 to i32
  %131 = mul nuw nsw i32 %27, %130
  %132 = add nuw nsw i32 %127, 64
  %133 = add nuw nsw i32 %132, %131
  %134 = lshr i32 %133, 7
  %135 = trunc i32 %134 to i16
  %136 = getelementptr inbounds i16, i16* %36, i64 %124
  store i16 %135, i16* %136, align 2
  %137 = add nuw nsw i64 %110, 2
  %138 = icmp eq i64 %137, 32
  br i1 %138, label %139, label %109, !llvm.loop !875

139:                                              ; preds = %109, %45
  %140 = phi i16* [ %46, %45 ], [ %128, %109 ]
  %141 = getelementptr inbounds i16, i16* %140, i64 %23
  %142 = getelementptr inbounds i16, i16* %36, i64 32
  %143 = add nuw nsw i32 %35, 1
  %144 = icmp eq i32 %143, 17
  %145 = add i64 %33, 1
  br i1 %144, label %146, label %32

146:                                              ; preds = %139
  %147 = getelementptr inbounds [512 x i16], [512 x i16]* %10, i64 0, i64 0
  %148 = sext i32 %3 to i64
  %149 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %148, i64 0
  %150 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %148, i64 1
  %151 = load i8, i8* %149, align 2
  %152 = zext i8 %151 to i32
  %153 = load i8, i8* %150, align 1
  %154 = zext i8 %153 to i32
  %155 = insertelement <8 x i32> undef, i32 %152, i32 0
  %156 = shufflevector <8 x i32> %155, <8 x i32> undef, <8 x i32> zeroinitializer
  %157 = insertelement <8 x i32> undef, i32 %154, i32 0
  %158 = shufflevector <8 x i32> %157, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %159

159:                                              ; preds = %268, %146
  %160 = phi i64 [ %273, %268 ], [ 0, %146 ]
  %161 = phi i32 [ %271, %268 ], [ 0, %146 ]
  %162 = phi i16* [ %269, %268 ], [ %15, %146 ]
  %163 = phi i16* [ %270, %268 ], [ %147, %146 ]
  %164 = shl nuw nsw i64 %160, 5
  %165 = add i64 %164, 32
  %166 = getelementptr [512 x i16], [512 x i16]* %10, i64 0, i64 %165
  %167 = getelementptr [512 x i16], [512 x i16]* %10, i64 0, i64 %164
  %168 = getelementptr i16, i16* %162, i64 64
  %169 = icmp ult i16* %167, %168
  %170 = icmp ult i16* %162, %166
  %171 = and i1 %169, %170
  br i1 %171, label %236, label %172

172:                                              ; preds = %159
  %173 = getelementptr i16, i16* %162, i64 32
  %174 = bitcast i16* %162 to <8 x i16>*
  %175 = load <8 x i16>, <8 x i16>* %174, align 2, !alias.scope !876
  %176 = zext <8 x i16> %175 to <8 x i32>
  %177 = mul nuw nsw <8 x i32> %156, %176
  %178 = getelementptr inbounds i16, i16* %162, i64 32
  %179 = bitcast i16* %178 to <8 x i16>*
  %180 = load <8 x i16>, <8 x i16>* %179, align 2, !alias.scope !876
  %181 = zext <8 x i16> %180 to <8 x i32>
  %182 = mul nuw nsw <8 x i32> %158, %181
  %183 = add nuw nsw <8 x i32> %177, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %184 = add nuw nsw <8 x i32> %183, %182
  %185 = lshr <8 x i32> %184, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %186 = trunc <8 x i32> %185 to <8 x i16>
  %187 = bitcast i16* %163 to <8 x i16>*
  store <8 x i16> %186, <8 x i16>* %187, align 2, !alias.scope !879, !noalias !876
  %188 = getelementptr i16, i16* %162, i64 8
  %189 = bitcast i16* %188 to <8 x i16>*
  %190 = load <8 x i16>, <8 x i16>* %189, align 2, !alias.scope !876
  %191 = zext <8 x i16> %190 to <8 x i32>
  %192 = mul nuw nsw <8 x i32> %156, %191
  %193 = getelementptr inbounds i16, i16* %162, i64 40
  %194 = bitcast i16* %193 to <8 x i16>*
  %195 = load <8 x i16>, <8 x i16>* %194, align 2, !alias.scope !876
  %196 = zext <8 x i16> %195 to <8 x i32>
  %197 = mul nuw nsw <8 x i32> %158, %196
  %198 = add nuw nsw <8 x i32> %192, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %199 = add nuw nsw <8 x i32> %198, %197
  %200 = lshr <8 x i32> %199, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %201 = trunc <8 x i32> %200 to <8 x i16>
  %202 = getelementptr inbounds i16, i16* %163, i64 8
  %203 = bitcast i16* %202 to <8 x i16>*
  store <8 x i16> %201, <8 x i16>* %203, align 2, !alias.scope !879, !noalias !876
  %204 = getelementptr i16, i16* %162, i64 16
  %205 = bitcast i16* %204 to <8 x i16>*
  %206 = load <8 x i16>, <8 x i16>* %205, align 2, !alias.scope !876
  %207 = zext <8 x i16> %206 to <8 x i32>
  %208 = mul nuw nsw <8 x i32> %156, %207
  %209 = getelementptr inbounds i16, i16* %162, i64 48
  %210 = bitcast i16* %209 to <8 x i16>*
  %211 = load <8 x i16>, <8 x i16>* %210, align 2, !alias.scope !876
  %212 = zext <8 x i16> %211 to <8 x i32>
  %213 = mul nuw nsw <8 x i32> %158, %212
  %214 = add nuw nsw <8 x i32> %208, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %215 = add nuw nsw <8 x i32> %214, %213
  %216 = lshr <8 x i32> %215, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %217 = trunc <8 x i32> %216 to <8 x i16>
  %218 = getelementptr inbounds i16, i16* %163, i64 16
  %219 = bitcast i16* %218 to <8 x i16>*
  store <8 x i16> %217, <8 x i16>* %219, align 2, !alias.scope !879, !noalias !876
  %220 = getelementptr i16, i16* %162, i64 24
  %221 = bitcast i16* %220 to <8 x i16>*
  %222 = load <8 x i16>, <8 x i16>* %221, align 2, !alias.scope !876
  %223 = zext <8 x i16> %222 to <8 x i32>
  %224 = mul nuw nsw <8 x i32> %156, %223
  %225 = getelementptr inbounds i16, i16* %162, i64 56
  %226 = bitcast i16* %225 to <8 x i16>*
  %227 = load <8 x i16>, <8 x i16>* %226, align 2, !alias.scope !876
  %228 = zext <8 x i16> %227 to <8 x i32>
  %229 = mul nuw nsw <8 x i32> %158, %228
  %230 = add nuw nsw <8 x i32> %224, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %231 = add nuw nsw <8 x i32> %230, %229
  %232 = lshr <8 x i32> %231, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %233 = trunc <8 x i32> %232 to <8 x i16>
  %234 = getelementptr inbounds i16, i16* %163, i64 24
  %235 = bitcast i16* %234 to <8 x i16>*
  store <8 x i16> %233, <8 x i16>* %235, align 2, !alias.scope !879, !noalias !876
  br label %268

236:                                              ; preds = %159, %236
  %237 = phi i64 [ %266, %236 ], [ 0, %159 ]
  %238 = phi i16* [ %265, %236 ], [ %162, %159 ]
  %239 = load i16, i16* %238, align 2
  %240 = zext i16 %239 to i32
  %241 = mul nuw nsw i32 %152, %240
  %242 = getelementptr inbounds i16, i16* %238, i64 32
  %243 = load i16, i16* %242, align 2
  %244 = zext i16 %243 to i32
  %245 = mul nuw nsw i32 %154, %244
  %246 = add nuw nsw i32 %241, 64
  %247 = add nuw nsw i32 %246, %245
  %248 = lshr i32 %247, 7
  %249 = trunc i32 %248 to i16
  %250 = getelementptr inbounds i16, i16* %163, i64 %237
  store i16 %249, i16* %250, align 2
  %251 = getelementptr inbounds i16, i16* %238, i64 1
  %252 = or i64 %237, 1
  %253 = load i16, i16* %251, align 2
  %254 = zext i16 %253 to i32
  %255 = mul nuw nsw i32 %152, %254
  %256 = getelementptr inbounds i16, i16* %238, i64 33
  %257 = load i16, i16* %256, align 2
  %258 = zext i16 %257 to i32
  %259 = mul nuw nsw i32 %154, %258
  %260 = add nuw nsw i32 %255, 64
  %261 = add nuw nsw i32 %260, %259
  %262 = lshr i32 %261, 7
  %263 = trunc i32 %262 to i16
  %264 = getelementptr inbounds i16, i16* %163, i64 %252
  store i16 %263, i16* %264, align 2
  %265 = getelementptr inbounds i16, i16* %238, i64 2
  %266 = add nuw nsw i64 %237, 2
  %267 = icmp eq i64 %266, 32
  br i1 %267, label %268, label %236, !llvm.loop !881

268:                                              ; preds = %236, %172
  %269 = phi i16* [ %173, %172 ], [ %265, %236 ]
  %270 = getelementptr inbounds i16, i16* %163, i64 32
  %271 = add nuw nsw i32 %161, 1
  %272 = icmp eq i32 %271, 16
  %273 = add i64 %160, 1
  br i1 %272, label %274, label %159

274:                                              ; preds = %268
  %275 = getelementptr inbounds [512 x i16], [512 x i16]* %11, i64 0, i64 0
  %276 = ptrtoint i8* %7 to i64
  %277 = shl i64 %276, 1
  %278 = inttoptr i64 %277 to i16*
  br label %279

279:                                              ; preds = %381, %274
  %280 = phi i64 [ %387, %381 ], [ 0, %274 ]
  %281 = phi i16* [ %382, %381 ], [ %275, %274 ]
  %282 = phi i32 [ %385, %381 ], [ 0, %274 ]
  %283 = phi i16* [ %383, %381 ], [ %278, %274 ]
  %284 = phi i16* [ %384, %381 ], [ %147, %274 ]
  %285 = shl nuw nsw i64 %280, 5
  %286 = getelementptr [512 x i16], [512 x i16]* %11, i64 0, i64 %285
  %287 = add i64 %285, 32
  %288 = getelementptr [512 x i16], [512 x i16]* %11, i64 0, i64 %287
  %289 = getelementptr [512 x i16], [512 x i16]* %10, i64 0, i64 %287
  %290 = getelementptr [512 x i16], [512 x i16]* %10, i64 0, i64 %285
  %291 = getelementptr i16, i16* %278, i64 %287
  %292 = getelementptr i16, i16* %278, i64 %285
  %293 = icmp ult i16* %286, %291
  %294 = icmp ult i16* %292, %288
  %295 = and i1 %293, %294
  %296 = icmp ult i16* %286, %289
  %297 = icmp ult i16* %290, %288
  %298 = and i1 %296, %297
  %299 = or i1 %295, %298
  br i1 %299, label %354, label %300

300:                                              ; preds = %279
  %301 = bitcast i16* %283 to <8 x i16>*
  %302 = load <8 x i16>, <8 x i16>* %301, align 2, !alias.scope !882
  %303 = zext <8 x i16> %302 to <8 x i32>
  %304 = bitcast i16* %284 to <8 x i16>*
  %305 = load <8 x i16>, <8 x i16>* %304, align 2, !alias.scope !885
  %306 = zext <8 x i16> %305 to <8 x i32>
  %307 = add nuw nsw <8 x i32> %303, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %308 = add nuw nsw <8 x i32> %307, %306
  %309 = lshr <8 x i32> %308, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %310 = trunc <8 x i32> %309 to <8 x i16>
  %311 = bitcast i16* %281 to <8 x i16>*
  store <8 x i16> %310, <8 x i16>* %311, align 2, !alias.scope !887, !noalias !889
  %312 = getelementptr inbounds i16, i16* %283, i64 8
  %313 = bitcast i16* %312 to <8 x i16>*
  %314 = load <8 x i16>, <8 x i16>* %313, align 2, !alias.scope !882
  %315 = zext <8 x i16> %314 to <8 x i32>
  %316 = getelementptr inbounds i16, i16* %284, i64 8
  %317 = bitcast i16* %316 to <8 x i16>*
  %318 = load <8 x i16>, <8 x i16>* %317, align 2, !alias.scope !885
  %319 = zext <8 x i16> %318 to <8 x i32>
  %320 = add nuw nsw <8 x i32> %315, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %321 = add nuw nsw <8 x i32> %320, %319
  %322 = lshr <8 x i32> %321, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %323 = trunc <8 x i32> %322 to <8 x i16>
  %324 = getelementptr inbounds i16, i16* %281, i64 8
  %325 = bitcast i16* %324 to <8 x i16>*
  store <8 x i16> %323, <8 x i16>* %325, align 2, !alias.scope !887, !noalias !889
  %326 = getelementptr inbounds i16, i16* %283, i64 16
  %327 = bitcast i16* %326 to <8 x i16>*
  %328 = load <8 x i16>, <8 x i16>* %327, align 2, !alias.scope !882
  %329 = zext <8 x i16> %328 to <8 x i32>
  %330 = getelementptr inbounds i16, i16* %284, i64 16
  %331 = bitcast i16* %330 to <8 x i16>*
  %332 = load <8 x i16>, <8 x i16>* %331, align 2, !alias.scope !885
  %333 = zext <8 x i16> %332 to <8 x i32>
  %334 = add nuw nsw <8 x i32> %329, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %335 = add nuw nsw <8 x i32> %334, %333
  %336 = lshr <8 x i32> %335, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %337 = trunc <8 x i32> %336 to <8 x i16>
  %338 = getelementptr inbounds i16, i16* %281, i64 16
  %339 = bitcast i16* %338 to <8 x i16>*
  store <8 x i16> %337, <8 x i16>* %339, align 2, !alias.scope !887, !noalias !889
  %340 = getelementptr inbounds i16, i16* %283, i64 24
  %341 = bitcast i16* %340 to <8 x i16>*
  %342 = load <8 x i16>, <8 x i16>* %341, align 2, !alias.scope !882
  %343 = zext <8 x i16> %342 to <8 x i32>
  %344 = getelementptr inbounds i16, i16* %284, i64 24
  %345 = bitcast i16* %344 to <8 x i16>*
  %346 = load <8 x i16>, <8 x i16>* %345, align 2, !alias.scope !885
  %347 = zext <8 x i16> %346 to <8 x i32>
  %348 = add nuw nsw <8 x i32> %343, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %349 = add nuw nsw <8 x i32> %348, %347
  %350 = lshr <8 x i32> %349, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %351 = trunc <8 x i32> %350 to <8 x i16>
  %352 = getelementptr inbounds i16, i16* %281, i64 24
  %353 = bitcast i16* %352 to <8 x i16>*
  store <8 x i16> %351, <8 x i16>* %353, align 2, !alias.scope !887, !noalias !889
  br label %381

354:                                              ; preds = %279, %354
  %355 = phi i64 [ %379, %354 ], [ 0, %279 ]
  %356 = getelementptr inbounds i16, i16* %283, i64 %355
  %357 = load i16, i16* %356, align 2
  %358 = zext i16 %357 to i32
  %359 = getelementptr inbounds i16, i16* %284, i64 %355
  %360 = load i16, i16* %359, align 2
  %361 = zext i16 %360 to i32
  %362 = add nuw nsw i32 %358, 1
  %363 = add nuw nsw i32 %362, %361
  %364 = lshr i32 %363, 1
  %365 = trunc i32 %364 to i16
  %366 = getelementptr inbounds i16, i16* %281, i64 %355
  store i16 %365, i16* %366, align 2
  %367 = or i64 %355, 1
  %368 = getelementptr inbounds i16, i16* %283, i64 %367
  %369 = load i16, i16* %368, align 2
  %370 = zext i16 %369 to i32
  %371 = getelementptr inbounds i16, i16* %284, i64 %367
  %372 = load i16, i16* %371, align 2
  %373 = zext i16 %372 to i32
  %374 = add nuw nsw i32 %370, 1
  %375 = add nuw nsw i32 %374, %373
  %376 = lshr i32 %375, 1
  %377 = trunc i32 %376 to i16
  %378 = getelementptr inbounds i16, i16* %281, i64 %367
  store i16 %377, i16* %378, align 2
  %379 = add nuw nsw i64 %355, 2
  %380 = icmp eq i64 %379, 32
  br i1 %380, label %381, label %354, !llvm.loop !890

381:                                              ; preds = %354, %300
  %382 = getelementptr inbounds i16, i16* %281, i64 32
  %383 = getelementptr inbounds i16, i16* %283, i64 32
  %384 = getelementptr inbounds i16, i16* %284, i64 32
  %385 = add nuw nsw i32 %282, 1
  %386 = icmp eq i32 %385, 16
  %387 = add i64 %280, 1
  br i1 %386, label %388, label %279

388:                                              ; preds = %381
  %389 = ptrtoint i8* %4 to i64
  %390 = shl i64 %389, 1
  %391 = inttoptr i64 %390 to i16*
  %392 = sext i32 %5 to i64
  br label %393

393:                                              ; preds = %430, %388
  %394 = phi i64 [ 0, %388 ], [ %427, %430 ]
  %395 = phi i64 [ 0, %388 ], [ %424, %430 ]
  %396 = phi i32 [ 0, %388 ], [ %433, %430 ]
  %397 = phi i16* [ %391, %388 ], [ %432, %430 ]
  %398 = phi i16* [ %275, %388 ], [ %431, %430 ]
  br label %399

399:                                              ; preds = %399, %393
  %400 = phi i64 [ %394, %393 ], [ %427, %399 ]
  %401 = phi i64 [ %395, %393 ], [ %424, %399 ]
  %402 = phi i64 [ 0, %393 ], [ %428, %399 ]
  %403 = getelementptr inbounds i16, i16* %398, i64 %402
  %404 = load i16, i16* %403, align 2
  %405 = zext i16 %404 to i32
  %406 = getelementptr inbounds i16, i16* %397, i64 %402
  %407 = load i16, i16* %406, align 2
  %408 = zext i16 %407 to i32
  %409 = sub nsw i32 %405, %408
  %410 = sext i32 %409 to i64
  %411 = add nsw i64 %401, %410
  %412 = mul nsw i32 %409, %409
  %413 = zext i32 %412 to i64
  %414 = add i64 %400, %413
  %415 = or i64 %402, 1
  %416 = getelementptr inbounds i16, i16* %398, i64 %415
  %417 = load i16, i16* %416, align 2
  %418 = zext i16 %417 to i32
  %419 = getelementptr inbounds i16, i16* %397, i64 %415
  %420 = load i16, i16* %419, align 2
  %421 = zext i16 %420 to i32
  %422 = sub nsw i32 %418, %421
  %423 = sext i32 %422 to i64
  %424 = add nsw i64 %411, %423
  %425 = mul nsw i32 %422, %422
  %426 = zext i32 %425 to i64
  %427 = add i64 %414, %426
  %428 = add nuw nsw i64 %402, 2
  %429 = icmp eq i64 %428, 32
  br i1 %429, label %430, label %399

430:                                              ; preds = %399
  %431 = getelementptr inbounds i16, i16* %398, i64 32
  %432 = getelementptr inbounds i16, i16* %397, i64 %392
  %433 = add nuw nsw i32 %396, 1
  %434 = icmp eq i32 %433, 16
  br i1 %434, label %435, label %393

435:                                              ; preds = %430
  %436 = add i64 %427, 128
  %437 = lshr i64 %436, 8
  %438 = trunc i64 %437 to i32
  store i32 %438, i32* %6, align 4
  %439 = and i64 %437, 4294967295
  %440 = shl i64 %424, 28
  %441 = add i64 %440, 2147483648
  %442 = ashr i64 %441, 32
  %443 = mul nsw i64 %442, %442
  %444 = lshr i64 %443, 9
  %445 = sub nsw i64 %439, %444
  %446 = icmp sgt i64 %445, -1
  %447 = trunc i64 %445 to i32
  %448 = select i1 %446, i32 %447, i32 0
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %14) #4
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %13) #4
  call void @llvm.lifetime.end.p0i8(i64 1088, i8* nonnull %12) #4
  ret i32 %448
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_highbd_8_variance16x32_c(i8*, i32, i8*, i32, i32* nocapture) local_unnamed_addr #2 {
  %6 = ptrtoint i8* %2 to i64
  %7 = shl i64 %6, 1
  %8 = inttoptr i64 %7 to i16*
  %9 = ptrtoint i8* %0 to i64
  %10 = shl i64 %9, 1
  %11 = inttoptr i64 %10 to i16*
  %12 = sext i32 %1 to i64
  %13 = sext i32 %3 to i64
  br label %14

14:                                               ; preds = %14, %5
  %15 = phi i64 [ 0, %5 ], [ %101, %14 ]
  %16 = phi i64 [ 0, %5 ], [ %97, %14 ]
  %17 = phi i32 [ 0, %5 ], [ %104, %14 ]
  %18 = phi i16* [ %8, %5 ], [ %103, %14 ]
  %19 = phi i16* [ %11, %5 ], [ %102, %14 ]
  %20 = bitcast i16* %19 to <16 x i16>*
  %21 = load <16 x i16>, <16 x i16>* %20, align 2
  %22 = zext <16 x i16> %21 to <16 x i32>
  %23 = bitcast i16* %18 to <16 x i16>*
  %24 = load <16 x i16>, <16 x i16>* %23, align 2
  %25 = zext <16 x i16> %24 to <16 x i32>
  %26 = sub nsw <16 x i32> %22, %25
  %27 = sext <16 x i32> %26 to <16 x i64>
  %28 = extractelement <16 x i32> %26, i32 0
  %29 = mul nsw i32 %28, %28
  %30 = zext i32 %29 to i64
  %31 = add i64 %15, %30
  %32 = extractelement <16 x i32> %26, i32 1
  %33 = mul nsw i32 %32, %32
  %34 = zext i32 %33 to i64
  %35 = add i64 %31, %34
  %36 = extractelement <16 x i32> %26, i32 2
  %37 = mul nsw i32 %36, %36
  %38 = zext i32 %37 to i64
  %39 = add i64 %35, %38
  %40 = extractelement <16 x i32> %26, i32 3
  %41 = mul nsw i32 %40, %40
  %42 = zext i32 %41 to i64
  %43 = add i64 %39, %42
  %44 = extractelement <16 x i32> %26, i32 4
  %45 = mul nsw i32 %44, %44
  %46 = zext i32 %45 to i64
  %47 = add i64 %43, %46
  %48 = extractelement <16 x i32> %26, i32 5
  %49 = mul nsw i32 %48, %48
  %50 = zext i32 %49 to i64
  %51 = add i64 %47, %50
  %52 = extractelement <16 x i32> %26, i32 6
  %53 = mul nsw i32 %52, %52
  %54 = zext i32 %53 to i64
  %55 = add i64 %51, %54
  %56 = extractelement <16 x i32> %26, i32 7
  %57 = mul nsw i32 %56, %56
  %58 = zext i32 %57 to i64
  %59 = add i64 %55, %58
  %60 = extractelement <16 x i32> %26, i32 8
  %61 = mul nsw i32 %60, %60
  %62 = zext i32 %61 to i64
  %63 = add i64 %59, %62
  %64 = extractelement <16 x i32> %26, i32 9
  %65 = mul nsw i32 %64, %64
  %66 = zext i32 %65 to i64
  %67 = add i64 %63, %66
  %68 = extractelement <16 x i32> %26, i32 10
  %69 = mul nsw i32 %68, %68
  %70 = zext i32 %69 to i64
  %71 = add i64 %67, %70
  %72 = extractelement <16 x i32> %26, i32 11
  %73 = mul nsw i32 %72, %72
  %74 = zext i32 %73 to i64
  %75 = add i64 %71, %74
  %76 = extractelement <16 x i32> %26, i32 12
  %77 = mul nsw i32 %76, %76
  %78 = zext i32 %77 to i64
  %79 = add i64 %75, %78
  %80 = extractelement <16 x i32> %26, i32 13
  %81 = mul nsw i32 %80, %80
  %82 = zext i32 %81 to i64
  %83 = add i64 %79, %82
  %84 = extractelement <16 x i32> %26, i32 14
  %85 = mul nsw i32 %84, %84
  %86 = zext i32 %85 to i64
  %87 = add i64 %83, %86
  %88 = shufflevector <16 x i64> %27, <16 x i64> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %89 = add nsw <16 x i64> %88, %27
  %90 = shufflevector <16 x i64> %89, <16 x i64> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %91 = add nsw <16 x i64> %89, %90
  %92 = shufflevector <16 x i64> %91, <16 x i64> undef, <16 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %93 = add nsw <16 x i64> %91, %92
  %94 = shufflevector <16 x i64> %93, <16 x i64> undef, <16 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %95 = add nsw <16 x i64> %93, %94
  %96 = extractelement <16 x i64> %95, i32 0
  %97 = add nsw i64 %96, %16
  %98 = extractelement <16 x i32> %26, i32 15
  %99 = mul nsw i32 %98, %98
  %100 = zext i32 %99 to i64
  %101 = add i64 %87, %100
  %102 = getelementptr inbounds i16, i16* %19, i64 %12
  %103 = getelementptr inbounds i16, i16* %18, i64 %13
  %104 = add nuw nsw i32 %17, 1
  %105 = icmp eq i32 %104, 32
  br i1 %105, label %106, label %14

106:                                              ; preds = %14
  %107 = trunc i64 %101 to i32
  store i32 %107, i32* %4, align 4
  %108 = shl i64 %97, 32
  %109 = ashr exact i64 %108, 32
  %110 = mul nsw i64 %109, %109
  %111 = lshr i64 %110, 9
  %112 = trunc i64 %111 to i32
  %113 = sub i32 %107, %112
  ret i32 %113
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_highbd_10_variance16x32_c(i8*, i32, i8*, i32, i32* nocapture) local_unnamed_addr #2 {
  %6 = ptrtoint i8* %2 to i64
  %7 = shl i64 %6, 1
  %8 = inttoptr i64 %7 to i16*
  %9 = ptrtoint i8* %0 to i64
  %10 = shl i64 %9, 1
  %11 = inttoptr i64 %10 to i16*
  %12 = sext i32 %1 to i64
  %13 = sext i32 %3 to i64
  br label %14

14:                                               ; preds = %14, %5
  %15 = phi i64 [ 0, %5 ], [ %101, %14 ]
  %16 = phi i64 [ 0, %5 ], [ %97, %14 ]
  %17 = phi i32 [ 0, %5 ], [ %104, %14 ]
  %18 = phi i16* [ %8, %5 ], [ %103, %14 ]
  %19 = phi i16* [ %11, %5 ], [ %102, %14 ]
  %20 = bitcast i16* %19 to <16 x i16>*
  %21 = load <16 x i16>, <16 x i16>* %20, align 2
  %22 = zext <16 x i16> %21 to <16 x i32>
  %23 = bitcast i16* %18 to <16 x i16>*
  %24 = load <16 x i16>, <16 x i16>* %23, align 2
  %25 = zext <16 x i16> %24 to <16 x i32>
  %26 = sub nsw <16 x i32> %22, %25
  %27 = sext <16 x i32> %26 to <16 x i64>
  %28 = extractelement <16 x i32> %26, i32 0
  %29 = mul nsw i32 %28, %28
  %30 = zext i32 %29 to i64
  %31 = add i64 %15, %30
  %32 = extractelement <16 x i32> %26, i32 1
  %33 = mul nsw i32 %32, %32
  %34 = zext i32 %33 to i64
  %35 = add i64 %31, %34
  %36 = extractelement <16 x i32> %26, i32 2
  %37 = mul nsw i32 %36, %36
  %38 = zext i32 %37 to i64
  %39 = add i64 %35, %38
  %40 = extractelement <16 x i32> %26, i32 3
  %41 = mul nsw i32 %40, %40
  %42 = zext i32 %41 to i64
  %43 = add i64 %39, %42
  %44 = extractelement <16 x i32> %26, i32 4
  %45 = mul nsw i32 %44, %44
  %46 = zext i32 %45 to i64
  %47 = add i64 %43, %46
  %48 = extractelement <16 x i32> %26, i32 5
  %49 = mul nsw i32 %48, %48
  %50 = zext i32 %49 to i64
  %51 = add i64 %47, %50
  %52 = extractelement <16 x i32> %26, i32 6
  %53 = mul nsw i32 %52, %52
  %54 = zext i32 %53 to i64
  %55 = add i64 %51, %54
  %56 = extractelement <16 x i32> %26, i32 7
  %57 = mul nsw i32 %56, %56
  %58 = zext i32 %57 to i64
  %59 = add i64 %55, %58
  %60 = extractelement <16 x i32> %26, i32 8
  %61 = mul nsw i32 %60, %60
  %62 = zext i32 %61 to i64
  %63 = add i64 %59, %62
  %64 = extractelement <16 x i32> %26, i32 9
  %65 = mul nsw i32 %64, %64
  %66 = zext i32 %65 to i64
  %67 = add i64 %63, %66
  %68 = extractelement <16 x i32> %26, i32 10
  %69 = mul nsw i32 %68, %68
  %70 = zext i32 %69 to i64
  %71 = add i64 %67, %70
  %72 = extractelement <16 x i32> %26, i32 11
  %73 = mul nsw i32 %72, %72
  %74 = zext i32 %73 to i64
  %75 = add i64 %71, %74
  %76 = extractelement <16 x i32> %26, i32 12
  %77 = mul nsw i32 %76, %76
  %78 = zext i32 %77 to i64
  %79 = add i64 %75, %78
  %80 = extractelement <16 x i32> %26, i32 13
  %81 = mul nsw i32 %80, %80
  %82 = zext i32 %81 to i64
  %83 = add i64 %79, %82
  %84 = extractelement <16 x i32> %26, i32 14
  %85 = mul nsw i32 %84, %84
  %86 = zext i32 %85 to i64
  %87 = add i64 %83, %86
  %88 = shufflevector <16 x i64> %27, <16 x i64> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %89 = add nsw <16 x i64> %88, %27
  %90 = shufflevector <16 x i64> %89, <16 x i64> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %91 = add nsw <16 x i64> %89, %90
  %92 = shufflevector <16 x i64> %91, <16 x i64> undef, <16 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %93 = add nsw <16 x i64> %91, %92
  %94 = shufflevector <16 x i64> %93, <16 x i64> undef, <16 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %95 = add nsw <16 x i64> %93, %94
  %96 = extractelement <16 x i64> %95, i32 0
  %97 = add nsw i64 %96, %16
  %98 = extractelement <16 x i32> %26, i32 15
  %99 = mul nsw i32 %98, %98
  %100 = zext i32 %99 to i64
  %101 = add i64 %87, %100
  %102 = getelementptr inbounds i16, i16* %19, i64 %12
  %103 = getelementptr inbounds i16, i16* %18, i64 %13
  %104 = add nuw nsw i32 %17, 1
  %105 = icmp eq i32 %104, 32
  br i1 %105, label %106, label %14

106:                                              ; preds = %14
  %107 = add i64 %101, 8
  %108 = lshr i64 %107, 4
  %109 = trunc i64 %108 to i32
  store i32 %109, i32* %4, align 4
  %110 = and i64 %108, 4294967295
  %111 = shl i64 %97, 30
  %112 = add i64 %111, 2147483648
  %113 = ashr i64 %112, 32
  %114 = mul nsw i64 %113, %113
  %115 = lshr i64 %114, 9
  %116 = sub nsw i64 %110, %115
  %117 = icmp sgt i64 %116, -1
  %118 = trunc i64 %116 to i32
  %119 = select i1 %117, i32 %118, i32 0
  ret i32 %119
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_highbd_12_variance16x32_c(i8*, i32, i8*, i32, i32* nocapture) local_unnamed_addr #2 {
  %6 = ptrtoint i8* %2 to i64
  %7 = shl i64 %6, 1
  %8 = inttoptr i64 %7 to i16*
  %9 = ptrtoint i8* %0 to i64
  %10 = shl i64 %9, 1
  %11 = inttoptr i64 %10 to i16*
  %12 = sext i32 %1 to i64
  %13 = sext i32 %3 to i64
  br label %14

14:                                               ; preds = %14, %5
  %15 = phi i64 [ 0, %5 ], [ %101, %14 ]
  %16 = phi i64 [ 0, %5 ], [ %97, %14 ]
  %17 = phi i32 [ 0, %5 ], [ %104, %14 ]
  %18 = phi i16* [ %8, %5 ], [ %103, %14 ]
  %19 = phi i16* [ %11, %5 ], [ %102, %14 ]
  %20 = bitcast i16* %19 to <16 x i16>*
  %21 = load <16 x i16>, <16 x i16>* %20, align 2
  %22 = zext <16 x i16> %21 to <16 x i32>
  %23 = bitcast i16* %18 to <16 x i16>*
  %24 = load <16 x i16>, <16 x i16>* %23, align 2
  %25 = zext <16 x i16> %24 to <16 x i32>
  %26 = sub nsw <16 x i32> %22, %25
  %27 = sext <16 x i32> %26 to <16 x i64>
  %28 = extractelement <16 x i32> %26, i32 0
  %29 = mul nsw i32 %28, %28
  %30 = zext i32 %29 to i64
  %31 = add i64 %15, %30
  %32 = extractelement <16 x i32> %26, i32 1
  %33 = mul nsw i32 %32, %32
  %34 = zext i32 %33 to i64
  %35 = add i64 %31, %34
  %36 = extractelement <16 x i32> %26, i32 2
  %37 = mul nsw i32 %36, %36
  %38 = zext i32 %37 to i64
  %39 = add i64 %35, %38
  %40 = extractelement <16 x i32> %26, i32 3
  %41 = mul nsw i32 %40, %40
  %42 = zext i32 %41 to i64
  %43 = add i64 %39, %42
  %44 = extractelement <16 x i32> %26, i32 4
  %45 = mul nsw i32 %44, %44
  %46 = zext i32 %45 to i64
  %47 = add i64 %43, %46
  %48 = extractelement <16 x i32> %26, i32 5
  %49 = mul nsw i32 %48, %48
  %50 = zext i32 %49 to i64
  %51 = add i64 %47, %50
  %52 = extractelement <16 x i32> %26, i32 6
  %53 = mul nsw i32 %52, %52
  %54 = zext i32 %53 to i64
  %55 = add i64 %51, %54
  %56 = extractelement <16 x i32> %26, i32 7
  %57 = mul nsw i32 %56, %56
  %58 = zext i32 %57 to i64
  %59 = add i64 %55, %58
  %60 = extractelement <16 x i32> %26, i32 8
  %61 = mul nsw i32 %60, %60
  %62 = zext i32 %61 to i64
  %63 = add i64 %59, %62
  %64 = extractelement <16 x i32> %26, i32 9
  %65 = mul nsw i32 %64, %64
  %66 = zext i32 %65 to i64
  %67 = add i64 %63, %66
  %68 = extractelement <16 x i32> %26, i32 10
  %69 = mul nsw i32 %68, %68
  %70 = zext i32 %69 to i64
  %71 = add i64 %67, %70
  %72 = extractelement <16 x i32> %26, i32 11
  %73 = mul nsw i32 %72, %72
  %74 = zext i32 %73 to i64
  %75 = add i64 %71, %74
  %76 = extractelement <16 x i32> %26, i32 12
  %77 = mul nsw i32 %76, %76
  %78 = zext i32 %77 to i64
  %79 = add i64 %75, %78
  %80 = extractelement <16 x i32> %26, i32 13
  %81 = mul nsw i32 %80, %80
  %82 = zext i32 %81 to i64
  %83 = add i64 %79, %82
  %84 = extractelement <16 x i32> %26, i32 14
  %85 = mul nsw i32 %84, %84
  %86 = zext i32 %85 to i64
  %87 = add i64 %83, %86
  %88 = shufflevector <16 x i64> %27, <16 x i64> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %89 = add nsw <16 x i64> %88, %27
  %90 = shufflevector <16 x i64> %89, <16 x i64> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %91 = add nsw <16 x i64> %89, %90
  %92 = shufflevector <16 x i64> %91, <16 x i64> undef, <16 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %93 = add nsw <16 x i64> %91, %92
  %94 = shufflevector <16 x i64> %93, <16 x i64> undef, <16 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %95 = add nsw <16 x i64> %93, %94
  %96 = extractelement <16 x i64> %95, i32 0
  %97 = add nsw i64 %96, %16
  %98 = extractelement <16 x i32> %26, i32 15
  %99 = mul nsw i32 %98, %98
  %100 = zext i32 %99 to i64
  %101 = add i64 %87, %100
  %102 = getelementptr inbounds i16, i16* %19, i64 %12
  %103 = getelementptr inbounds i16, i16* %18, i64 %13
  %104 = add nuw nsw i32 %17, 1
  %105 = icmp eq i32 %104, 32
  br i1 %105, label %106, label %14

106:                                              ; preds = %14
  %107 = add i64 %101, 128
  %108 = lshr i64 %107, 8
  %109 = trunc i64 %108 to i32
  store i32 %109, i32* %4, align 4
  %110 = and i64 %108, 4294967295
  %111 = shl i64 %97, 28
  %112 = add i64 %111, 2147483648
  %113 = ashr i64 %112, 32
  %114 = mul nsw i64 %113, %113
  %115 = lshr i64 %114, 9
  %116 = sub nsw i64 %110, %115
  %117 = icmp sgt i64 %116, -1
  %118 = trunc i64 %116 to i32
  %119 = select i1 %117, i32 %118, i32 0
  ret i32 %119
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_highbd_8_sub_pixel_variance16x32_c(i8*, i32, i32, i32, i8*, i32, i32* nocapture) local_unnamed_addr #2 {
  %8 = alloca [528 x i16], align 16
  %9 = alloca [512 x i16], align 16
  %10 = bitcast [528 x i16]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1056, i8* nonnull %10) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %10, i8 -86, i64 1056, i1 false)
  %11 = bitcast [512 x i16]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %11) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %11, i8 -86, i64 1024, i1 false)
  %12 = getelementptr inbounds [528 x i16], [528 x i16]* %8, i64 0, i64 0
  %13 = sext i32 %2 to i64
  %14 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %13, i64 0
  %15 = ptrtoint i8* %0 to i64
  %16 = shl i64 %15, 1
  %17 = inttoptr i64 %16 to i16*
  %18 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %13, i64 1
  %19 = add i32 %1, -16
  %20 = zext i32 %19 to i64
  %21 = load i8, i8* %14, align 2
  %22 = zext i8 %21 to i32
  %23 = load i8, i8* %18, align 1
  %24 = zext i8 %23 to i32
  %25 = insertelement <8 x i32> undef, i32 %22, i32 0
  %26 = shufflevector <8 x i32> %25, <8 x i32> undef, <8 x i32> zeroinitializer
  %27 = insertelement <8 x i32> undef, i32 %24, i32 0
  %28 = shufflevector <8 x i32> %27, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %29

29:                                               ; preds = %104, %7
  %30 = phi i64 [ %110, %104 ], [ 0, %7 ]
  %31 = phi i16* [ %106, %104 ], [ %17, %7 ]
  %32 = phi i32 [ %108, %104 ], [ 0, %7 ]
  %33 = phi i16* [ %107, %104 ], [ %12, %7 ]
  %34 = shl nuw nsw i64 %30, 4
  %35 = add i64 %34, 16
  %36 = getelementptr [528 x i16], [528 x i16]* %8, i64 0, i64 %35
  %37 = getelementptr [528 x i16], [528 x i16]* %8, i64 0, i64 %34
  %38 = getelementptr i16, i16* %31, i64 17
  %39 = icmp ult i16* %37, %38
  %40 = icmp ult i16* %31, %36
  %41 = and i1 %39, %40
  br i1 %41, label %74, label %42

42:                                               ; preds = %29
  %43 = getelementptr i16, i16* %31, i64 16
  %44 = bitcast i16* %31 to <8 x i16>*
  %45 = load <8 x i16>, <8 x i16>* %44, align 2, !alias.scope !891
  %46 = zext <8 x i16> %45 to <8 x i32>
  %47 = mul nuw nsw <8 x i32> %26, %46
  %48 = getelementptr inbounds i16, i16* %31, i64 1
  %49 = bitcast i16* %48 to <8 x i16>*
  %50 = load <8 x i16>, <8 x i16>* %49, align 2, !alias.scope !891
  %51 = zext <8 x i16> %50 to <8 x i32>
  %52 = mul nuw nsw <8 x i32> %28, %51
  %53 = add nuw nsw <8 x i32> %47, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %54 = add nuw nsw <8 x i32> %53, %52
  %55 = lshr <8 x i32> %54, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %56 = trunc <8 x i32> %55 to <8 x i16>
  %57 = bitcast i16* %33 to <8 x i16>*
  store <8 x i16> %56, <8 x i16>* %57, align 2, !alias.scope !894, !noalias !891
  %58 = getelementptr i16, i16* %31, i64 8
  %59 = bitcast i16* %58 to <8 x i16>*
  %60 = load <8 x i16>, <8 x i16>* %59, align 2, !alias.scope !891
  %61 = zext <8 x i16> %60 to <8 x i32>
  %62 = mul nuw nsw <8 x i32> %26, %61
  %63 = getelementptr inbounds i16, i16* %31, i64 9
  %64 = bitcast i16* %63 to <8 x i16>*
  %65 = load <8 x i16>, <8 x i16>* %64, align 2, !alias.scope !891
  %66 = zext <8 x i16> %65 to <8 x i32>
  %67 = mul nuw nsw <8 x i32> %28, %66
  %68 = add nuw nsw <8 x i32> %62, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %69 = add nuw nsw <8 x i32> %68, %67
  %70 = lshr <8 x i32> %69, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %71 = trunc <8 x i32> %70 to <8 x i16>
  %72 = getelementptr inbounds i16, i16* %33, i64 8
  %73 = bitcast i16* %72 to <8 x i16>*
  store <8 x i16> %71, <8 x i16>* %73, align 2, !alias.scope !894, !noalias !891
  br label %104

74:                                               ; preds = %29, %74
  %75 = phi i64 [ %102, %74 ], [ 0, %29 ]
  %76 = phi i16* [ %93, %74 ], [ %31, %29 ]
  %77 = load i16, i16* %76, align 2
  %78 = zext i16 %77 to i32
  %79 = mul nuw nsw i32 %22, %78
  %80 = getelementptr inbounds i16, i16* %76, i64 1
  %81 = load i16, i16* %80, align 2
  %82 = zext i16 %81 to i32
  %83 = mul nuw nsw i32 %24, %82
  %84 = add nuw nsw i32 %79, 64
  %85 = add nuw nsw i32 %84, %83
  %86 = lshr i32 %85, 7
  %87 = trunc i32 %86 to i16
  %88 = getelementptr inbounds i16, i16* %33, i64 %75
  store i16 %87, i16* %88, align 2
  %89 = or i64 %75, 1
  %90 = load i16, i16* %80, align 2
  %91 = zext i16 %90 to i32
  %92 = mul nuw nsw i32 %22, %91
  %93 = getelementptr inbounds i16, i16* %76, i64 2
  %94 = load i16, i16* %93, align 2
  %95 = zext i16 %94 to i32
  %96 = mul nuw nsw i32 %24, %95
  %97 = add nuw nsw i32 %92, 64
  %98 = add nuw nsw i32 %97, %96
  %99 = lshr i32 %98, 7
  %100 = trunc i32 %99 to i16
  %101 = getelementptr inbounds i16, i16* %33, i64 %89
  store i16 %100, i16* %101, align 2
  %102 = add nuw nsw i64 %75, 2
  %103 = icmp eq i64 %102, 16
  br i1 %103, label %104, label %74, !llvm.loop !896

104:                                              ; preds = %74, %42
  %105 = phi i16* [ %43, %42 ], [ %93, %74 ]
  %106 = getelementptr inbounds i16, i16* %105, i64 %20
  %107 = getelementptr inbounds i16, i16* %33, i64 16
  %108 = add nuw nsw i32 %32, 1
  %109 = icmp eq i32 %108, 33
  %110 = add i64 %30, 1
  br i1 %109, label %111, label %29

111:                                              ; preds = %104
  %112 = getelementptr inbounds [512 x i16], [512 x i16]* %9, i64 0, i64 0
  %113 = sext i32 %3 to i64
  %114 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %113, i64 0
  %115 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %113, i64 1
  %116 = load i8, i8* %114, align 2
  %117 = zext i8 %116 to i32
  %118 = load i8, i8* %115, align 1
  %119 = zext i8 %118 to i32
  %120 = insertelement <8 x i32> undef, i32 %117, i32 0
  %121 = shufflevector <8 x i32> %120, <8 x i32> undef, <8 x i32> zeroinitializer
  %122 = insertelement <8 x i32> undef, i32 %119, i32 0
  %123 = shufflevector <8 x i32> %122, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %124

124:                                              ; preds = %201, %111
  %125 = phi i64 [ %206, %201 ], [ 0, %111 ]
  %126 = phi i32 [ %204, %201 ], [ 0, %111 ]
  %127 = phi i16* [ %202, %201 ], [ %12, %111 ]
  %128 = phi i16* [ %203, %201 ], [ %112, %111 ]
  %129 = shl nuw nsw i64 %125, 4
  %130 = add i64 %129, 16
  %131 = getelementptr [512 x i16], [512 x i16]* %9, i64 0, i64 %130
  %132 = getelementptr [512 x i16], [512 x i16]* %9, i64 0, i64 %129
  %133 = getelementptr i16, i16* %127, i64 32
  %134 = icmp ult i16* %132, %133
  %135 = icmp ult i16* %127, %131
  %136 = and i1 %134, %135
  br i1 %136, label %169, label %137

137:                                              ; preds = %124
  %138 = getelementptr i16, i16* %127, i64 16
  %139 = bitcast i16* %127 to <8 x i16>*
  %140 = load <8 x i16>, <8 x i16>* %139, align 2, !alias.scope !897
  %141 = zext <8 x i16> %140 to <8 x i32>
  %142 = mul nuw nsw <8 x i32> %121, %141
  %143 = getelementptr inbounds i16, i16* %127, i64 16
  %144 = bitcast i16* %143 to <8 x i16>*
  %145 = load <8 x i16>, <8 x i16>* %144, align 2, !alias.scope !897
  %146 = zext <8 x i16> %145 to <8 x i32>
  %147 = mul nuw nsw <8 x i32> %123, %146
  %148 = add nuw nsw <8 x i32> %142, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %149 = add nuw nsw <8 x i32> %148, %147
  %150 = lshr <8 x i32> %149, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %151 = trunc <8 x i32> %150 to <8 x i16>
  %152 = bitcast i16* %128 to <8 x i16>*
  store <8 x i16> %151, <8 x i16>* %152, align 2, !alias.scope !900, !noalias !897
  %153 = getelementptr i16, i16* %127, i64 8
  %154 = bitcast i16* %153 to <8 x i16>*
  %155 = load <8 x i16>, <8 x i16>* %154, align 2, !alias.scope !897
  %156 = zext <8 x i16> %155 to <8 x i32>
  %157 = mul nuw nsw <8 x i32> %121, %156
  %158 = getelementptr inbounds i16, i16* %127, i64 24
  %159 = bitcast i16* %158 to <8 x i16>*
  %160 = load <8 x i16>, <8 x i16>* %159, align 2, !alias.scope !897
  %161 = zext <8 x i16> %160 to <8 x i32>
  %162 = mul nuw nsw <8 x i32> %123, %161
  %163 = add nuw nsw <8 x i32> %157, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %164 = add nuw nsw <8 x i32> %163, %162
  %165 = lshr <8 x i32> %164, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %166 = trunc <8 x i32> %165 to <8 x i16>
  %167 = getelementptr inbounds i16, i16* %128, i64 8
  %168 = bitcast i16* %167 to <8 x i16>*
  store <8 x i16> %166, <8 x i16>* %168, align 2, !alias.scope !900, !noalias !897
  br label %201

169:                                              ; preds = %124, %169
  %170 = phi i64 [ %199, %169 ], [ 0, %124 ]
  %171 = phi i16* [ %198, %169 ], [ %127, %124 ]
  %172 = load i16, i16* %171, align 2
  %173 = zext i16 %172 to i32
  %174 = mul nuw nsw i32 %117, %173
  %175 = getelementptr inbounds i16, i16* %171, i64 16
  %176 = load i16, i16* %175, align 2
  %177 = zext i16 %176 to i32
  %178 = mul nuw nsw i32 %119, %177
  %179 = add nuw nsw i32 %174, 64
  %180 = add nuw nsw i32 %179, %178
  %181 = lshr i32 %180, 7
  %182 = trunc i32 %181 to i16
  %183 = getelementptr inbounds i16, i16* %128, i64 %170
  store i16 %182, i16* %183, align 2
  %184 = getelementptr inbounds i16, i16* %171, i64 1
  %185 = or i64 %170, 1
  %186 = load i16, i16* %184, align 2
  %187 = zext i16 %186 to i32
  %188 = mul nuw nsw i32 %117, %187
  %189 = getelementptr inbounds i16, i16* %171, i64 17
  %190 = load i16, i16* %189, align 2
  %191 = zext i16 %190 to i32
  %192 = mul nuw nsw i32 %119, %191
  %193 = add nuw nsw i32 %188, 64
  %194 = add nuw nsw i32 %193, %192
  %195 = lshr i32 %194, 7
  %196 = trunc i32 %195 to i16
  %197 = getelementptr inbounds i16, i16* %128, i64 %185
  store i16 %196, i16* %197, align 2
  %198 = getelementptr inbounds i16, i16* %171, i64 2
  %199 = add nuw nsw i64 %170, 2
  %200 = icmp eq i64 %199, 16
  br i1 %200, label %201, label %169, !llvm.loop !902

201:                                              ; preds = %169, %137
  %202 = phi i16* [ %138, %137 ], [ %198, %169 ]
  %203 = getelementptr inbounds i16, i16* %128, i64 16
  %204 = add nuw nsw i32 %126, 1
  %205 = icmp eq i32 %204, 32
  %206 = add i64 %125, 1
  br i1 %205, label %207, label %124

207:                                              ; preds = %201
  %208 = ptrtoint [512 x i16]* %9 to i64
  %209 = lshr exact i64 %208, 1
  %210 = inttoptr i64 %209 to i8*
  %211 = call i32 @vpx_highbd_8_variance16x32_c(i8* nonnull %210, i32 16, i8* %4, i32 %5, i32* %6)
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %11) #4
  call void @llvm.lifetime.end.p0i8(i64 1056, i8* nonnull %10) #4
  ret i32 %211
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_highbd_10_sub_pixel_variance16x32_c(i8*, i32, i32, i32, i8*, i32, i32* nocapture) local_unnamed_addr #2 {
  %8 = alloca [528 x i16], align 16
  %9 = alloca [512 x i16], align 16
  %10 = bitcast [528 x i16]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1056, i8* nonnull %10) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %10, i8 -86, i64 1056, i1 false)
  %11 = bitcast [512 x i16]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %11) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %11, i8 -86, i64 1024, i1 false)
  %12 = getelementptr inbounds [528 x i16], [528 x i16]* %8, i64 0, i64 0
  %13 = sext i32 %2 to i64
  %14 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %13, i64 0
  %15 = ptrtoint i8* %0 to i64
  %16 = shl i64 %15, 1
  %17 = inttoptr i64 %16 to i16*
  %18 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %13, i64 1
  %19 = add i32 %1, -16
  %20 = zext i32 %19 to i64
  %21 = load i8, i8* %14, align 2
  %22 = zext i8 %21 to i32
  %23 = load i8, i8* %18, align 1
  %24 = zext i8 %23 to i32
  %25 = insertelement <8 x i32> undef, i32 %22, i32 0
  %26 = shufflevector <8 x i32> %25, <8 x i32> undef, <8 x i32> zeroinitializer
  %27 = insertelement <8 x i32> undef, i32 %24, i32 0
  %28 = shufflevector <8 x i32> %27, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %29

29:                                               ; preds = %104, %7
  %30 = phi i64 [ %110, %104 ], [ 0, %7 ]
  %31 = phi i16* [ %106, %104 ], [ %17, %7 ]
  %32 = phi i32 [ %108, %104 ], [ 0, %7 ]
  %33 = phi i16* [ %107, %104 ], [ %12, %7 ]
  %34 = shl nuw nsw i64 %30, 4
  %35 = add i64 %34, 16
  %36 = getelementptr [528 x i16], [528 x i16]* %8, i64 0, i64 %35
  %37 = getelementptr [528 x i16], [528 x i16]* %8, i64 0, i64 %34
  %38 = getelementptr i16, i16* %31, i64 17
  %39 = icmp ult i16* %37, %38
  %40 = icmp ult i16* %31, %36
  %41 = and i1 %39, %40
  br i1 %41, label %74, label %42

42:                                               ; preds = %29
  %43 = getelementptr i16, i16* %31, i64 16
  %44 = bitcast i16* %31 to <8 x i16>*
  %45 = load <8 x i16>, <8 x i16>* %44, align 2, !alias.scope !903
  %46 = zext <8 x i16> %45 to <8 x i32>
  %47 = mul nuw nsw <8 x i32> %26, %46
  %48 = getelementptr inbounds i16, i16* %31, i64 1
  %49 = bitcast i16* %48 to <8 x i16>*
  %50 = load <8 x i16>, <8 x i16>* %49, align 2, !alias.scope !903
  %51 = zext <8 x i16> %50 to <8 x i32>
  %52 = mul nuw nsw <8 x i32> %28, %51
  %53 = add nuw nsw <8 x i32> %47, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %54 = add nuw nsw <8 x i32> %53, %52
  %55 = lshr <8 x i32> %54, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %56 = trunc <8 x i32> %55 to <8 x i16>
  %57 = bitcast i16* %33 to <8 x i16>*
  store <8 x i16> %56, <8 x i16>* %57, align 2, !alias.scope !906, !noalias !903
  %58 = getelementptr i16, i16* %31, i64 8
  %59 = bitcast i16* %58 to <8 x i16>*
  %60 = load <8 x i16>, <8 x i16>* %59, align 2, !alias.scope !903
  %61 = zext <8 x i16> %60 to <8 x i32>
  %62 = mul nuw nsw <8 x i32> %26, %61
  %63 = getelementptr inbounds i16, i16* %31, i64 9
  %64 = bitcast i16* %63 to <8 x i16>*
  %65 = load <8 x i16>, <8 x i16>* %64, align 2, !alias.scope !903
  %66 = zext <8 x i16> %65 to <8 x i32>
  %67 = mul nuw nsw <8 x i32> %28, %66
  %68 = add nuw nsw <8 x i32> %62, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %69 = add nuw nsw <8 x i32> %68, %67
  %70 = lshr <8 x i32> %69, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %71 = trunc <8 x i32> %70 to <8 x i16>
  %72 = getelementptr inbounds i16, i16* %33, i64 8
  %73 = bitcast i16* %72 to <8 x i16>*
  store <8 x i16> %71, <8 x i16>* %73, align 2, !alias.scope !906, !noalias !903
  br label %104

74:                                               ; preds = %29, %74
  %75 = phi i64 [ %102, %74 ], [ 0, %29 ]
  %76 = phi i16* [ %93, %74 ], [ %31, %29 ]
  %77 = load i16, i16* %76, align 2
  %78 = zext i16 %77 to i32
  %79 = mul nuw nsw i32 %22, %78
  %80 = getelementptr inbounds i16, i16* %76, i64 1
  %81 = load i16, i16* %80, align 2
  %82 = zext i16 %81 to i32
  %83 = mul nuw nsw i32 %24, %82
  %84 = add nuw nsw i32 %79, 64
  %85 = add nuw nsw i32 %84, %83
  %86 = lshr i32 %85, 7
  %87 = trunc i32 %86 to i16
  %88 = getelementptr inbounds i16, i16* %33, i64 %75
  store i16 %87, i16* %88, align 2
  %89 = or i64 %75, 1
  %90 = load i16, i16* %80, align 2
  %91 = zext i16 %90 to i32
  %92 = mul nuw nsw i32 %22, %91
  %93 = getelementptr inbounds i16, i16* %76, i64 2
  %94 = load i16, i16* %93, align 2
  %95 = zext i16 %94 to i32
  %96 = mul nuw nsw i32 %24, %95
  %97 = add nuw nsw i32 %92, 64
  %98 = add nuw nsw i32 %97, %96
  %99 = lshr i32 %98, 7
  %100 = trunc i32 %99 to i16
  %101 = getelementptr inbounds i16, i16* %33, i64 %89
  store i16 %100, i16* %101, align 2
  %102 = add nuw nsw i64 %75, 2
  %103 = icmp eq i64 %102, 16
  br i1 %103, label %104, label %74, !llvm.loop !908

104:                                              ; preds = %74, %42
  %105 = phi i16* [ %43, %42 ], [ %93, %74 ]
  %106 = getelementptr inbounds i16, i16* %105, i64 %20
  %107 = getelementptr inbounds i16, i16* %33, i64 16
  %108 = add nuw nsw i32 %32, 1
  %109 = icmp eq i32 %108, 33
  %110 = add i64 %30, 1
  br i1 %109, label %111, label %29

111:                                              ; preds = %104
  %112 = getelementptr inbounds [512 x i16], [512 x i16]* %9, i64 0, i64 0
  %113 = sext i32 %3 to i64
  %114 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %113, i64 0
  %115 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %113, i64 1
  %116 = load i8, i8* %114, align 2
  %117 = zext i8 %116 to i32
  %118 = load i8, i8* %115, align 1
  %119 = zext i8 %118 to i32
  %120 = insertelement <8 x i32> undef, i32 %117, i32 0
  %121 = shufflevector <8 x i32> %120, <8 x i32> undef, <8 x i32> zeroinitializer
  %122 = insertelement <8 x i32> undef, i32 %119, i32 0
  %123 = shufflevector <8 x i32> %122, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %124

124:                                              ; preds = %201, %111
  %125 = phi i64 [ %206, %201 ], [ 0, %111 ]
  %126 = phi i32 [ %204, %201 ], [ 0, %111 ]
  %127 = phi i16* [ %202, %201 ], [ %12, %111 ]
  %128 = phi i16* [ %203, %201 ], [ %112, %111 ]
  %129 = shl nuw nsw i64 %125, 4
  %130 = add i64 %129, 16
  %131 = getelementptr [512 x i16], [512 x i16]* %9, i64 0, i64 %130
  %132 = getelementptr [512 x i16], [512 x i16]* %9, i64 0, i64 %129
  %133 = getelementptr i16, i16* %127, i64 32
  %134 = icmp ult i16* %132, %133
  %135 = icmp ult i16* %127, %131
  %136 = and i1 %134, %135
  br i1 %136, label %169, label %137

137:                                              ; preds = %124
  %138 = getelementptr i16, i16* %127, i64 16
  %139 = bitcast i16* %127 to <8 x i16>*
  %140 = load <8 x i16>, <8 x i16>* %139, align 2, !alias.scope !909
  %141 = zext <8 x i16> %140 to <8 x i32>
  %142 = mul nuw nsw <8 x i32> %121, %141
  %143 = getelementptr inbounds i16, i16* %127, i64 16
  %144 = bitcast i16* %143 to <8 x i16>*
  %145 = load <8 x i16>, <8 x i16>* %144, align 2, !alias.scope !909
  %146 = zext <8 x i16> %145 to <8 x i32>
  %147 = mul nuw nsw <8 x i32> %123, %146
  %148 = add nuw nsw <8 x i32> %142, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %149 = add nuw nsw <8 x i32> %148, %147
  %150 = lshr <8 x i32> %149, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %151 = trunc <8 x i32> %150 to <8 x i16>
  %152 = bitcast i16* %128 to <8 x i16>*
  store <8 x i16> %151, <8 x i16>* %152, align 2, !alias.scope !912, !noalias !909
  %153 = getelementptr i16, i16* %127, i64 8
  %154 = bitcast i16* %153 to <8 x i16>*
  %155 = load <8 x i16>, <8 x i16>* %154, align 2, !alias.scope !909
  %156 = zext <8 x i16> %155 to <8 x i32>
  %157 = mul nuw nsw <8 x i32> %121, %156
  %158 = getelementptr inbounds i16, i16* %127, i64 24
  %159 = bitcast i16* %158 to <8 x i16>*
  %160 = load <8 x i16>, <8 x i16>* %159, align 2, !alias.scope !909
  %161 = zext <8 x i16> %160 to <8 x i32>
  %162 = mul nuw nsw <8 x i32> %123, %161
  %163 = add nuw nsw <8 x i32> %157, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %164 = add nuw nsw <8 x i32> %163, %162
  %165 = lshr <8 x i32> %164, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %166 = trunc <8 x i32> %165 to <8 x i16>
  %167 = getelementptr inbounds i16, i16* %128, i64 8
  %168 = bitcast i16* %167 to <8 x i16>*
  store <8 x i16> %166, <8 x i16>* %168, align 2, !alias.scope !912, !noalias !909
  br label %201

169:                                              ; preds = %124, %169
  %170 = phi i64 [ %199, %169 ], [ 0, %124 ]
  %171 = phi i16* [ %198, %169 ], [ %127, %124 ]
  %172 = load i16, i16* %171, align 2
  %173 = zext i16 %172 to i32
  %174 = mul nuw nsw i32 %117, %173
  %175 = getelementptr inbounds i16, i16* %171, i64 16
  %176 = load i16, i16* %175, align 2
  %177 = zext i16 %176 to i32
  %178 = mul nuw nsw i32 %119, %177
  %179 = add nuw nsw i32 %174, 64
  %180 = add nuw nsw i32 %179, %178
  %181 = lshr i32 %180, 7
  %182 = trunc i32 %181 to i16
  %183 = getelementptr inbounds i16, i16* %128, i64 %170
  store i16 %182, i16* %183, align 2
  %184 = getelementptr inbounds i16, i16* %171, i64 1
  %185 = or i64 %170, 1
  %186 = load i16, i16* %184, align 2
  %187 = zext i16 %186 to i32
  %188 = mul nuw nsw i32 %117, %187
  %189 = getelementptr inbounds i16, i16* %171, i64 17
  %190 = load i16, i16* %189, align 2
  %191 = zext i16 %190 to i32
  %192 = mul nuw nsw i32 %119, %191
  %193 = add nuw nsw i32 %188, 64
  %194 = add nuw nsw i32 %193, %192
  %195 = lshr i32 %194, 7
  %196 = trunc i32 %195 to i16
  %197 = getelementptr inbounds i16, i16* %128, i64 %185
  store i16 %196, i16* %197, align 2
  %198 = getelementptr inbounds i16, i16* %171, i64 2
  %199 = add nuw nsw i64 %170, 2
  %200 = icmp eq i64 %199, 16
  br i1 %200, label %201, label %169, !llvm.loop !914

201:                                              ; preds = %169, %137
  %202 = phi i16* [ %138, %137 ], [ %198, %169 ]
  %203 = getelementptr inbounds i16, i16* %128, i64 16
  %204 = add nuw nsw i32 %126, 1
  %205 = icmp eq i32 %204, 32
  %206 = add i64 %125, 1
  br i1 %205, label %207, label %124

207:                                              ; preds = %201
  %208 = ptrtoint [512 x i16]* %9 to i64
  %209 = lshr exact i64 %208, 1
  %210 = inttoptr i64 %209 to i8*
  %211 = call i32 @vpx_highbd_10_variance16x32_c(i8* nonnull %210, i32 16, i8* %4, i32 %5, i32* %6)
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %11) #4
  call void @llvm.lifetime.end.p0i8(i64 1056, i8* nonnull %10) #4
  ret i32 %211
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_highbd_12_sub_pixel_variance16x32_c(i8*, i32, i32, i32, i8*, i32, i32* nocapture) local_unnamed_addr #2 {
  %8 = alloca [528 x i16], align 16
  %9 = alloca [512 x i16], align 16
  %10 = bitcast [528 x i16]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1056, i8* nonnull %10) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %10, i8 -86, i64 1056, i1 false)
  %11 = bitcast [512 x i16]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %11) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %11, i8 -86, i64 1024, i1 false)
  %12 = getelementptr inbounds [528 x i16], [528 x i16]* %8, i64 0, i64 0
  %13 = sext i32 %2 to i64
  %14 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %13, i64 0
  %15 = ptrtoint i8* %0 to i64
  %16 = shl i64 %15, 1
  %17 = inttoptr i64 %16 to i16*
  %18 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %13, i64 1
  %19 = add i32 %1, -16
  %20 = zext i32 %19 to i64
  %21 = load i8, i8* %14, align 2
  %22 = zext i8 %21 to i32
  %23 = load i8, i8* %18, align 1
  %24 = zext i8 %23 to i32
  %25 = insertelement <8 x i32> undef, i32 %22, i32 0
  %26 = shufflevector <8 x i32> %25, <8 x i32> undef, <8 x i32> zeroinitializer
  %27 = insertelement <8 x i32> undef, i32 %24, i32 0
  %28 = shufflevector <8 x i32> %27, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %29

29:                                               ; preds = %104, %7
  %30 = phi i64 [ %110, %104 ], [ 0, %7 ]
  %31 = phi i16* [ %106, %104 ], [ %17, %7 ]
  %32 = phi i32 [ %108, %104 ], [ 0, %7 ]
  %33 = phi i16* [ %107, %104 ], [ %12, %7 ]
  %34 = shl nuw nsw i64 %30, 4
  %35 = add i64 %34, 16
  %36 = getelementptr [528 x i16], [528 x i16]* %8, i64 0, i64 %35
  %37 = getelementptr [528 x i16], [528 x i16]* %8, i64 0, i64 %34
  %38 = getelementptr i16, i16* %31, i64 17
  %39 = icmp ult i16* %37, %38
  %40 = icmp ult i16* %31, %36
  %41 = and i1 %39, %40
  br i1 %41, label %74, label %42

42:                                               ; preds = %29
  %43 = getelementptr i16, i16* %31, i64 16
  %44 = bitcast i16* %31 to <8 x i16>*
  %45 = load <8 x i16>, <8 x i16>* %44, align 2, !alias.scope !915
  %46 = zext <8 x i16> %45 to <8 x i32>
  %47 = mul nuw nsw <8 x i32> %26, %46
  %48 = getelementptr inbounds i16, i16* %31, i64 1
  %49 = bitcast i16* %48 to <8 x i16>*
  %50 = load <8 x i16>, <8 x i16>* %49, align 2, !alias.scope !915
  %51 = zext <8 x i16> %50 to <8 x i32>
  %52 = mul nuw nsw <8 x i32> %28, %51
  %53 = add nuw nsw <8 x i32> %47, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %54 = add nuw nsw <8 x i32> %53, %52
  %55 = lshr <8 x i32> %54, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %56 = trunc <8 x i32> %55 to <8 x i16>
  %57 = bitcast i16* %33 to <8 x i16>*
  store <8 x i16> %56, <8 x i16>* %57, align 2, !alias.scope !918, !noalias !915
  %58 = getelementptr i16, i16* %31, i64 8
  %59 = bitcast i16* %58 to <8 x i16>*
  %60 = load <8 x i16>, <8 x i16>* %59, align 2, !alias.scope !915
  %61 = zext <8 x i16> %60 to <8 x i32>
  %62 = mul nuw nsw <8 x i32> %26, %61
  %63 = getelementptr inbounds i16, i16* %31, i64 9
  %64 = bitcast i16* %63 to <8 x i16>*
  %65 = load <8 x i16>, <8 x i16>* %64, align 2, !alias.scope !915
  %66 = zext <8 x i16> %65 to <8 x i32>
  %67 = mul nuw nsw <8 x i32> %28, %66
  %68 = add nuw nsw <8 x i32> %62, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %69 = add nuw nsw <8 x i32> %68, %67
  %70 = lshr <8 x i32> %69, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %71 = trunc <8 x i32> %70 to <8 x i16>
  %72 = getelementptr inbounds i16, i16* %33, i64 8
  %73 = bitcast i16* %72 to <8 x i16>*
  store <8 x i16> %71, <8 x i16>* %73, align 2, !alias.scope !918, !noalias !915
  br label %104

74:                                               ; preds = %29, %74
  %75 = phi i64 [ %102, %74 ], [ 0, %29 ]
  %76 = phi i16* [ %93, %74 ], [ %31, %29 ]
  %77 = load i16, i16* %76, align 2
  %78 = zext i16 %77 to i32
  %79 = mul nuw nsw i32 %22, %78
  %80 = getelementptr inbounds i16, i16* %76, i64 1
  %81 = load i16, i16* %80, align 2
  %82 = zext i16 %81 to i32
  %83 = mul nuw nsw i32 %24, %82
  %84 = add nuw nsw i32 %79, 64
  %85 = add nuw nsw i32 %84, %83
  %86 = lshr i32 %85, 7
  %87 = trunc i32 %86 to i16
  %88 = getelementptr inbounds i16, i16* %33, i64 %75
  store i16 %87, i16* %88, align 2
  %89 = or i64 %75, 1
  %90 = load i16, i16* %80, align 2
  %91 = zext i16 %90 to i32
  %92 = mul nuw nsw i32 %22, %91
  %93 = getelementptr inbounds i16, i16* %76, i64 2
  %94 = load i16, i16* %93, align 2
  %95 = zext i16 %94 to i32
  %96 = mul nuw nsw i32 %24, %95
  %97 = add nuw nsw i32 %92, 64
  %98 = add nuw nsw i32 %97, %96
  %99 = lshr i32 %98, 7
  %100 = trunc i32 %99 to i16
  %101 = getelementptr inbounds i16, i16* %33, i64 %89
  store i16 %100, i16* %101, align 2
  %102 = add nuw nsw i64 %75, 2
  %103 = icmp eq i64 %102, 16
  br i1 %103, label %104, label %74, !llvm.loop !920

104:                                              ; preds = %74, %42
  %105 = phi i16* [ %43, %42 ], [ %93, %74 ]
  %106 = getelementptr inbounds i16, i16* %105, i64 %20
  %107 = getelementptr inbounds i16, i16* %33, i64 16
  %108 = add nuw nsw i32 %32, 1
  %109 = icmp eq i32 %108, 33
  %110 = add i64 %30, 1
  br i1 %109, label %111, label %29

111:                                              ; preds = %104
  %112 = getelementptr inbounds [512 x i16], [512 x i16]* %9, i64 0, i64 0
  %113 = sext i32 %3 to i64
  %114 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %113, i64 0
  %115 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %113, i64 1
  %116 = load i8, i8* %114, align 2
  %117 = zext i8 %116 to i32
  %118 = load i8, i8* %115, align 1
  %119 = zext i8 %118 to i32
  %120 = insertelement <8 x i32> undef, i32 %117, i32 0
  %121 = shufflevector <8 x i32> %120, <8 x i32> undef, <8 x i32> zeroinitializer
  %122 = insertelement <8 x i32> undef, i32 %119, i32 0
  %123 = shufflevector <8 x i32> %122, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %124

124:                                              ; preds = %201, %111
  %125 = phi i64 [ %206, %201 ], [ 0, %111 ]
  %126 = phi i32 [ %204, %201 ], [ 0, %111 ]
  %127 = phi i16* [ %202, %201 ], [ %12, %111 ]
  %128 = phi i16* [ %203, %201 ], [ %112, %111 ]
  %129 = shl nuw nsw i64 %125, 4
  %130 = add i64 %129, 16
  %131 = getelementptr [512 x i16], [512 x i16]* %9, i64 0, i64 %130
  %132 = getelementptr [512 x i16], [512 x i16]* %9, i64 0, i64 %129
  %133 = getelementptr i16, i16* %127, i64 32
  %134 = icmp ult i16* %132, %133
  %135 = icmp ult i16* %127, %131
  %136 = and i1 %134, %135
  br i1 %136, label %169, label %137

137:                                              ; preds = %124
  %138 = getelementptr i16, i16* %127, i64 16
  %139 = bitcast i16* %127 to <8 x i16>*
  %140 = load <8 x i16>, <8 x i16>* %139, align 2, !alias.scope !921
  %141 = zext <8 x i16> %140 to <8 x i32>
  %142 = mul nuw nsw <8 x i32> %121, %141
  %143 = getelementptr inbounds i16, i16* %127, i64 16
  %144 = bitcast i16* %143 to <8 x i16>*
  %145 = load <8 x i16>, <8 x i16>* %144, align 2, !alias.scope !921
  %146 = zext <8 x i16> %145 to <8 x i32>
  %147 = mul nuw nsw <8 x i32> %123, %146
  %148 = add nuw nsw <8 x i32> %142, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %149 = add nuw nsw <8 x i32> %148, %147
  %150 = lshr <8 x i32> %149, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %151 = trunc <8 x i32> %150 to <8 x i16>
  %152 = bitcast i16* %128 to <8 x i16>*
  store <8 x i16> %151, <8 x i16>* %152, align 2, !alias.scope !924, !noalias !921
  %153 = getelementptr i16, i16* %127, i64 8
  %154 = bitcast i16* %153 to <8 x i16>*
  %155 = load <8 x i16>, <8 x i16>* %154, align 2, !alias.scope !921
  %156 = zext <8 x i16> %155 to <8 x i32>
  %157 = mul nuw nsw <8 x i32> %121, %156
  %158 = getelementptr inbounds i16, i16* %127, i64 24
  %159 = bitcast i16* %158 to <8 x i16>*
  %160 = load <8 x i16>, <8 x i16>* %159, align 2, !alias.scope !921
  %161 = zext <8 x i16> %160 to <8 x i32>
  %162 = mul nuw nsw <8 x i32> %123, %161
  %163 = add nuw nsw <8 x i32> %157, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %164 = add nuw nsw <8 x i32> %163, %162
  %165 = lshr <8 x i32> %164, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %166 = trunc <8 x i32> %165 to <8 x i16>
  %167 = getelementptr inbounds i16, i16* %128, i64 8
  %168 = bitcast i16* %167 to <8 x i16>*
  store <8 x i16> %166, <8 x i16>* %168, align 2, !alias.scope !924, !noalias !921
  br label %201

169:                                              ; preds = %124, %169
  %170 = phi i64 [ %199, %169 ], [ 0, %124 ]
  %171 = phi i16* [ %198, %169 ], [ %127, %124 ]
  %172 = load i16, i16* %171, align 2
  %173 = zext i16 %172 to i32
  %174 = mul nuw nsw i32 %117, %173
  %175 = getelementptr inbounds i16, i16* %171, i64 16
  %176 = load i16, i16* %175, align 2
  %177 = zext i16 %176 to i32
  %178 = mul nuw nsw i32 %119, %177
  %179 = add nuw nsw i32 %174, 64
  %180 = add nuw nsw i32 %179, %178
  %181 = lshr i32 %180, 7
  %182 = trunc i32 %181 to i16
  %183 = getelementptr inbounds i16, i16* %128, i64 %170
  store i16 %182, i16* %183, align 2
  %184 = getelementptr inbounds i16, i16* %171, i64 1
  %185 = or i64 %170, 1
  %186 = load i16, i16* %184, align 2
  %187 = zext i16 %186 to i32
  %188 = mul nuw nsw i32 %117, %187
  %189 = getelementptr inbounds i16, i16* %171, i64 17
  %190 = load i16, i16* %189, align 2
  %191 = zext i16 %190 to i32
  %192 = mul nuw nsw i32 %119, %191
  %193 = add nuw nsw i32 %188, 64
  %194 = add nuw nsw i32 %193, %192
  %195 = lshr i32 %194, 7
  %196 = trunc i32 %195 to i16
  %197 = getelementptr inbounds i16, i16* %128, i64 %185
  store i16 %196, i16* %197, align 2
  %198 = getelementptr inbounds i16, i16* %171, i64 2
  %199 = add nuw nsw i64 %170, 2
  %200 = icmp eq i64 %199, 16
  br i1 %200, label %201, label %169, !llvm.loop !926

201:                                              ; preds = %169, %137
  %202 = phi i16* [ %138, %137 ], [ %198, %169 ]
  %203 = getelementptr inbounds i16, i16* %128, i64 16
  %204 = add nuw nsw i32 %126, 1
  %205 = icmp eq i32 %204, 32
  %206 = add i64 %125, 1
  br i1 %205, label %207, label %124

207:                                              ; preds = %201
  %208 = ptrtoint [512 x i16]* %9 to i64
  %209 = lshr exact i64 %208, 1
  %210 = inttoptr i64 %209 to i8*
  %211 = call i32 @vpx_highbd_12_variance16x32_c(i8* nonnull %210, i32 16, i8* %4, i32 %5, i32* %6)
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %11) #4
  call void @llvm.lifetime.end.p0i8(i64 1056, i8* nonnull %10) #4
  ret i32 %211
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_highbd_8_sub_pixel_avg_variance16x32_c(i8*, i32, i32, i32, i8*, i32, i32* nocapture, i8*) local_unnamed_addr #2 {
  %9 = alloca [528 x i16], align 16
  %10 = alloca [512 x i16], align 16
  %11 = alloca [512 x i16], align 16
  %12 = bitcast [528 x i16]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1056, i8* nonnull %12) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %12, i8 -86, i64 1056, i1 false)
  %13 = bitcast [512 x i16]* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %13) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %13, i8 -86, i64 1024, i1 false)
  %14 = bitcast [512 x i16]* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %14) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %14, i8 -86, i64 1024, i1 false)
  %15 = getelementptr inbounds [528 x i16], [528 x i16]* %9, i64 0, i64 0
  %16 = sext i32 %2 to i64
  %17 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %16, i64 0
  %18 = ptrtoint i8* %0 to i64
  %19 = shl i64 %18, 1
  %20 = inttoptr i64 %19 to i16*
  %21 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %16, i64 1
  %22 = add i32 %1, -16
  %23 = zext i32 %22 to i64
  %24 = load i8, i8* %17, align 2
  %25 = zext i8 %24 to i32
  %26 = load i8, i8* %21, align 1
  %27 = zext i8 %26 to i32
  %28 = insertelement <8 x i32> undef, i32 %25, i32 0
  %29 = shufflevector <8 x i32> %28, <8 x i32> undef, <8 x i32> zeroinitializer
  %30 = insertelement <8 x i32> undef, i32 %27, i32 0
  %31 = shufflevector <8 x i32> %30, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %32

32:                                               ; preds = %107, %8
  %33 = phi i64 [ %113, %107 ], [ 0, %8 ]
  %34 = phi i16* [ %109, %107 ], [ %20, %8 ]
  %35 = phi i32 [ %111, %107 ], [ 0, %8 ]
  %36 = phi i16* [ %110, %107 ], [ %15, %8 ]
  %37 = shl nuw nsw i64 %33, 4
  %38 = add i64 %37, 16
  %39 = getelementptr [528 x i16], [528 x i16]* %9, i64 0, i64 %38
  %40 = getelementptr [528 x i16], [528 x i16]* %9, i64 0, i64 %37
  %41 = getelementptr i16, i16* %34, i64 17
  %42 = icmp ult i16* %40, %41
  %43 = icmp ult i16* %34, %39
  %44 = and i1 %42, %43
  br i1 %44, label %77, label %45

45:                                               ; preds = %32
  %46 = getelementptr i16, i16* %34, i64 16
  %47 = bitcast i16* %34 to <8 x i16>*
  %48 = load <8 x i16>, <8 x i16>* %47, align 2, !alias.scope !927
  %49 = zext <8 x i16> %48 to <8 x i32>
  %50 = mul nuw nsw <8 x i32> %29, %49
  %51 = getelementptr inbounds i16, i16* %34, i64 1
  %52 = bitcast i16* %51 to <8 x i16>*
  %53 = load <8 x i16>, <8 x i16>* %52, align 2, !alias.scope !927
  %54 = zext <8 x i16> %53 to <8 x i32>
  %55 = mul nuw nsw <8 x i32> %31, %54
  %56 = add nuw nsw <8 x i32> %50, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %57 = add nuw nsw <8 x i32> %56, %55
  %58 = lshr <8 x i32> %57, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %59 = trunc <8 x i32> %58 to <8 x i16>
  %60 = bitcast i16* %36 to <8 x i16>*
  store <8 x i16> %59, <8 x i16>* %60, align 2, !alias.scope !930, !noalias !927
  %61 = getelementptr i16, i16* %34, i64 8
  %62 = bitcast i16* %61 to <8 x i16>*
  %63 = load <8 x i16>, <8 x i16>* %62, align 2, !alias.scope !927
  %64 = zext <8 x i16> %63 to <8 x i32>
  %65 = mul nuw nsw <8 x i32> %29, %64
  %66 = getelementptr inbounds i16, i16* %34, i64 9
  %67 = bitcast i16* %66 to <8 x i16>*
  %68 = load <8 x i16>, <8 x i16>* %67, align 2, !alias.scope !927
  %69 = zext <8 x i16> %68 to <8 x i32>
  %70 = mul nuw nsw <8 x i32> %31, %69
  %71 = add nuw nsw <8 x i32> %65, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %72 = add nuw nsw <8 x i32> %71, %70
  %73 = lshr <8 x i32> %72, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %74 = trunc <8 x i32> %73 to <8 x i16>
  %75 = getelementptr inbounds i16, i16* %36, i64 8
  %76 = bitcast i16* %75 to <8 x i16>*
  store <8 x i16> %74, <8 x i16>* %76, align 2, !alias.scope !930, !noalias !927
  br label %107

77:                                               ; preds = %32, %77
  %78 = phi i64 [ %105, %77 ], [ 0, %32 ]
  %79 = phi i16* [ %96, %77 ], [ %34, %32 ]
  %80 = load i16, i16* %79, align 2
  %81 = zext i16 %80 to i32
  %82 = mul nuw nsw i32 %25, %81
  %83 = getelementptr inbounds i16, i16* %79, i64 1
  %84 = load i16, i16* %83, align 2
  %85 = zext i16 %84 to i32
  %86 = mul nuw nsw i32 %27, %85
  %87 = add nuw nsw i32 %82, 64
  %88 = add nuw nsw i32 %87, %86
  %89 = lshr i32 %88, 7
  %90 = trunc i32 %89 to i16
  %91 = getelementptr inbounds i16, i16* %36, i64 %78
  store i16 %90, i16* %91, align 2
  %92 = or i64 %78, 1
  %93 = load i16, i16* %83, align 2
  %94 = zext i16 %93 to i32
  %95 = mul nuw nsw i32 %25, %94
  %96 = getelementptr inbounds i16, i16* %79, i64 2
  %97 = load i16, i16* %96, align 2
  %98 = zext i16 %97 to i32
  %99 = mul nuw nsw i32 %27, %98
  %100 = add nuw nsw i32 %95, 64
  %101 = add nuw nsw i32 %100, %99
  %102 = lshr i32 %101, 7
  %103 = trunc i32 %102 to i16
  %104 = getelementptr inbounds i16, i16* %36, i64 %92
  store i16 %103, i16* %104, align 2
  %105 = add nuw nsw i64 %78, 2
  %106 = icmp eq i64 %105, 16
  br i1 %106, label %107, label %77, !llvm.loop !932

107:                                              ; preds = %77, %45
  %108 = phi i16* [ %46, %45 ], [ %96, %77 ]
  %109 = getelementptr inbounds i16, i16* %108, i64 %23
  %110 = getelementptr inbounds i16, i16* %36, i64 16
  %111 = add nuw nsw i32 %35, 1
  %112 = icmp eq i32 %111, 33
  %113 = add i64 %33, 1
  br i1 %112, label %114, label %32

114:                                              ; preds = %107
  %115 = getelementptr inbounds [512 x i16], [512 x i16]* %10, i64 0, i64 0
  %116 = sext i32 %3 to i64
  %117 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %116, i64 0
  %118 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %116, i64 1
  %119 = load i8, i8* %117, align 2
  %120 = zext i8 %119 to i32
  %121 = load i8, i8* %118, align 1
  %122 = zext i8 %121 to i32
  %123 = insertelement <8 x i32> undef, i32 %120, i32 0
  %124 = shufflevector <8 x i32> %123, <8 x i32> undef, <8 x i32> zeroinitializer
  %125 = insertelement <8 x i32> undef, i32 %122, i32 0
  %126 = shufflevector <8 x i32> %125, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %127

127:                                              ; preds = %204, %114
  %128 = phi i64 [ %209, %204 ], [ 0, %114 ]
  %129 = phi i32 [ %207, %204 ], [ 0, %114 ]
  %130 = phi i16* [ %205, %204 ], [ %15, %114 ]
  %131 = phi i16* [ %206, %204 ], [ %115, %114 ]
  %132 = shl nuw nsw i64 %128, 4
  %133 = add i64 %132, 16
  %134 = getelementptr [512 x i16], [512 x i16]* %10, i64 0, i64 %133
  %135 = getelementptr [512 x i16], [512 x i16]* %10, i64 0, i64 %132
  %136 = getelementptr i16, i16* %130, i64 32
  %137 = icmp ult i16* %135, %136
  %138 = icmp ult i16* %130, %134
  %139 = and i1 %137, %138
  br i1 %139, label %172, label %140

140:                                              ; preds = %127
  %141 = getelementptr i16, i16* %130, i64 16
  %142 = bitcast i16* %130 to <8 x i16>*
  %143 = load <8 x i16>, <8 x i16>* %142, align 2, !alias.scope !933
  %144 = zext <8 x i16> %143 to <8 x i32>
  %145 = mul nuw nsw <8 x i32> %124, %144
  %146 = getelementptr inbounds i16, i16* %130, i64 16
  %147 = bitcast i16* %146 to <8 x i16>*
  %148 = load <8 x i16>, <8 x i16>* %147, align 2, !alias.scope !933
  %149 = zext <8 x i16> %148 to <8 x i32>
  %150 = mul nuw nsw <8 x i32> %126, %149
  %151 = add nuw nsw <8 x i32> %145, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %152 = add nuw nsw <8 x i32> %151, %150
  %153 = lshr <8 x i32> %152, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %154 = trunc <8 x i32> %153 to <8 x i16>
  %155 = bitcast i16* %131 to <8 x i16>*
  store <8 x i16> %154, <8 x i16>* %155, align 2, !alias.scope !936, !noalias !933
  %156 = getelementptr i16, i16* %130, i64 8
  %157 = bitcast i16* %156 to <8 x i16>*
  %158 = load <8 x i16>, <8 x i16>* %157, align 2, !alias.scope !933
  %159 = zext <8 x i16> %158 to <8 x i32>
  %160 = mul nuw nsw <8 x i32> %124, %159
  %161 = getelementptr inbounds i16, i16* %130, i64 24
  %162 = bitcast i16* %161 to <8 x i16>*
  %163 = load <8 x i16>, <8 x i16>* %162, align 2, !alias.scope !933
  %164 = zext <8 x i16> %163 to <8 x i32>
  %165 = mul nuw nsw <8 x i32> %126, %164
  %166 = add nuw nsw <8 x i32> %160, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %167 = add nuw nsw <8 x i32> %166, %165
  %168 = lshr <8 x i32> %167, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %169 = trunc <8 x i32> %168 to <8 x i16>
  %170 = getelementptr inbounds i16, i16* %131, i64 8
  %171 = bitcast i16* %170 to <8 x i16>*
  store <8 x i16> %169, <8 x i16>* %171, align 2, !alias.scope !936, !noalias !933
  br label %204

172:                                              ; preds = %127, %172
  %173 = phi i64 [ %202, %172 ], [ 0, %127 ]
  %174 = phi i16* [ %201, %172 ], [ %130, %127 ]
  %175 = load i16, i16* %174, align 2
  %176 = zext i16 %175 to i32
  %177 = mul nuw nsw i32 %120, %176
  %178 = getelementptr inbounds i16, i16* %174, i64 16
  %179 = load i16, i16* %178, align 2
  %180 = zext i16 %179 to i32
  %181 = mul nuw nsw i32 %122, %180
  %182 = add nuw nsw i32 %177, 64
  %183 = add nuw nsw i32 %182, %181
  %184 = lshr i32 %183, 7
  %185 = trunc i32 %184 to i16
  %186 = getelementptr inbounds i16, i16* %131, i64 %173
  store i16 %185, i16* %186, align 2
  %187 = getelementptr inbounds i16, i16* %174, i64 1
  %188 = or i64 %173, 1
  %189 = load i16, i16* %187, align 2
  %190 = zext i16 %189 to i32
  %191 = mul nuw nsw i32 %120, %190
  %192 = getelementptr inbounds i16, i16* %174, i64 17
  %193 = load i16, i16* %192, align 2
  %194 = zext i16 %193 to i32
  %195 = mul nuw nsw i32 %122, %194
  %196 = add nuw nsw i32 %191, 64
  %197 = add nuw nsw i32 %196, %195
  %198 = lshr i32 %197, 7
  %199 = trunc i32 %198 to i16
  %200 = getelementptr inbounds i16, i16* %131, i64 %188
  store i16 %199, i16* %200, align 2
  %201 = getelementptr inbounds i16, i16* %174, i64 2
  %202 = add nuw nsw i64 %173, 2
  %203 = icmp eq i64 %202, 16
  br i1 %203, label %204, label %172, !llvm.loop !938

204:                                              ; preds = %172, %140
  %205 = phi i16* [ %141, %140 ], [ %201, %172 ]
  %206 = getelementptr inbounds i16, i16* %131, i64 16
  %207 = add nuw nsw i32 %129, 1
  %208 = icmp eq i32 %207, 32
  %209 = add i64 %128, 1
  br i1 %208, label %210, label %127

210:                                              ; preds = %204
  %211 = getelementptr inbounds [512 x i16], [512 x i16]* %11, i64 0, i64 0
  %212 = ptrtoint i8* %7 to i64
  %213 = shl i64 %212, 1
  %214 = inttoptr i64 %213 to i16*
  br label %215

215:                                              ; preds = %215, %210
  %216 = phi i16* [ %211, %210 ], [ %393, %215 ]
  %217 = phi i32 [ 0, %210 ], [ %396, %215 ]
  %218 = phi i16* [ %214, %210 ], [ %394, %215 ]
  %219 = phi i16* [ %115, %210 ], [ %395, %215 ]
  %220 = load i16, i16* %218, align 2
  %221 = zext i16 %220 to i32
  %222 = load i16, i16* %219, align 2
  %223 = zext i16 %222 to i32
  %224 = add nuw nsw i32 %221, 1
  %225 = add nuw nsw i32 %224, %223
  %226 = lshr i32 %225, 1
  %227 = trunc i32 %226 to i16
  store i16 %227, i16* %216, align 2
  %228 = getelementptr inbounds i16, i16* %218, i64 1
  %229 = load i16, i16* %228, align 2
  %230 = zext i16 %229 to i32
  %231 = getelementptr inbounds i16, i16* %219, i64 1
  %232 = load i16, i16* %231, align 2
  %233 = zext i16 %232 to i32
  %234 = add nuw nsw i32 %230, 1
  %235 = add nuw nsw i32 %234, %233
  %236 = lshr i32 %235, 1
  %237 = trunc i32 %236 to i16
  %238 = getelementptr inbounds i16, i16* %216, i64 1
  store i16 %237, i16* %238, align 2
  %239 = getelementptr inbounds i16, i16* %218, i64 2
  %240 = load i16, i16* %239, align 2
  %241 = zext i16 %240 to i32
  %242 = getelementptr inbounds i16, i16* %219, i64 2
  %243 = load i16, i16* %242, align 2
  %244 = zext i16 %243 to i32
  %245 = add nuw nsw i32 %241, 1
  %246 = add nuw nsw i32 %245, %244
  %247 = lshr i32 %246, 1
  %248 = trunc i32 %247 to i16
  %249 = getelementptr inbounds i16, i16* %216, i64 2
  store i16 %248, i16* %249, align 2
  %250 = getelementptr inbounds i16, i16* %218, i64 3
  %251 = load i16, i16* %250, align 2
  %252 = zext i16 %251 to i32
  %253 = getelementptr inbounds i16, i16* %219, i64 3
  %254 = load i16, i16* %253, align 2
  %255 = zext i16 %254 to i32
  %256 = add nuw nsw i32 %252, 1
  %257 = add nuw nsw i32 %256, %255
  %258 = lshr i32 %257, 1
  %259 = trunc i32 %258 to i16
  %260 = getelementptr inbounds i16, i16* %216, i64 3
  store i16 %259, i16* %260, align 2
  %261 = getelementptr inbounds i16, i16* %218, i64 4
  %262 = load i16, i16* %261, align 2
  %263 = zext i16 %262 to i32
  %264 = getelementptr inbounds i16, i16* %219, i64 4
  %265 = load i16, i16* %264, align 2
  %266 = zext i16 %265 to i32
  %267 = add nuw nsw i32 %263, 1
  %268 = add nuw nsw i32 %267, %266
  %269 = lshr i32 %268, 1
  %270 = trunc i32 %269 to i16
  %271 = getelementptr inbounds i16, i16* %216, i64 4
  store i16 %270, i16* %271, align 2
  %272 = getelementptr inbounds i16, i16* %218, i64 5
  %273 = load i16, i16* %272, align 2
  %274 = zext i16 %273 to i32
  %275 = getelementptr inbounds i16, i16* %219, i64 5
  %276 = load i16, i16* %275, align 2
  %277 = zext i16 %276 to i32
  %278 = add nuw nsw i32 %274, 1
  %279 = add nuw nsw i32 %278, %277
  %280 = lshr i32 %279, 1
  %281 = trunc i32 %280 to i16
  %282 = getelementptr inbounds i16, i16* %216, i64 5
  store i16 %281, i16* %282, align 2
  %283 = getelementptr inbounds i16, i16* %218, i64 6
  %284 = load i16, i16* %283, align 2
  %285 = zext i16 %284 to i32
  %286 = getelementptr inbounds i16, i16* %219, i64 6
  %287 = load i16, i16* %286, align 2
  %288 = zext i16 %287 to i32
  %289 = add nuw nsw i32 %285, 1
  %290 = add nuw nsw i32 %289, %288
  %291 = lshr i32 %290, 1
  %292 = trunc i32 %291 to i16
  %293 = getelementptr inbounds i16, i16* %216, i64 6
  store i16 %292, i16* %293, align 2
  %294 = getelementptr inbounds i16, i16* %218, i64 7
  %295 = load i16, i16* %294, align 2
  %296 = zext i16 %295 to i32
  %297 = getelementptr inbounds i16, i16* %219, i64 7
  %298 = load i16, i16* %297, align 2
  %299 = zext i16 %298 to i32
  %300 = add nuw nsw i32 %296, 1
  %301 = add nuw nsw i32 %300, %299
  %302 = lshr i32 %301, 1
  %303 = trunc i32 %302 to i16
  %304 = getelementptr inbounds i16, i16* %216, i64 7
  store i16 %303, i16* %304, align 2
  %305 = getelementptr inbounds i16, i16* %218, i64 8
  %306 = load i16, i16* %305, align 2
  %307 = zext i16 %306 to i32
  %308 = getelementptr inbounds i16, i16* %219, i64 8
  %309 = load i16, i16* %308, align 2
  %310 = zext i16 %309 to i32
  %311 = add nuw nsw i32 %307, 1
  %312 = add nuw nsw i32 %311, %310
  %313 = lshr i32 %312, 1
  %314 = trunc i32 %313 to i16
  %315 = getelementptr inbounds i16, i16* %216, i64 8
  store i16 %314, i16* %315, align 2
  %316 = getelementptr inbounds i16, i16* %218, i64 9
  %317 = load i16, i16* %316, align 2
  %318 = zext i16 %317 to i32
  %319 = getelementptr inbounds i16, i16* %219, i64 9
  %320 = load i16, i16* %319, align 2
  %321 = zext i16 %320 to i32
  %322 = add nuw nsw i32 %318, 1
  %323 = add nuw nsw i32 %322, %321
  %324 = lshr i32 %323, 1
  %325 = trunc i32 %324 to i16
  %326 = getelementptr inbounds i16, i16* %216, i64 9
  store i16 %325, i16* %326, align 2
  %327 = getelementptr inbounds i16, i16* %218, i64 10
  %328 = load i16, i16* %327, align 2
  %329 = zext i16 %328 to i32
  %330 = getelementptr inbounds i16, i16* %219, i64 10
  %331 = load i16, i16* %330, align 2
  %332 = zext i16 %331 to i32
  %333 = add nuw nsw i32 %329, 1
  %334 = add nuw nsw i32 %333, %332
  %335 = lshr i32 %334, 1
  %336 = trunc i32 %335 to i16
  %337 = getelementptr inbounds i16, i16* %216, i64 10
  store i16 %336, i16* %337, align 2
  %338 = getelementptr inbounds i16, i16* %218, i64 11
  %339 = load i16, i16* %338, align 2
  %340 = zext i16 %339 to i32
  %341 = getelementptr inbounds i16, i16* %219, i64 11
  %342 = load i16, i16* %341, align 2
  %343 = zext i16 %342 to i32
  %344 = add nuw nsw i32 %340, 1
  %345 = add nuw nsw i32 %344, %343
  %346 = lshr i32 %345, 1
  %347 = trunc i32 %346 to i16
  %348 = getelementptr inbounds i16, i16* %216, i64 11
  store i16 %347, i16* %348, align 2
  %349 = getelementptr inbounds i16, i16* %218, i64 12
  %350 = load i16, i16* %349, align 2
  %351 = zext i16 %350 to i32
  %352 = getelementptr inbounds i16, i16* %219, i64 12
  %353 = load i16, i16* %352, align 2
  %354 = zext i16 %353 to i32
  %355 = add nuw nsw i32 %351, 1
  %356 = add nuw nsw i32 %355, %354
  %357 = lshr i32 %356, 1
  %358 = trunc i32 %357 to i16
  %359 = getelementptr inbounds i16, i16* %216, i64 12
  store i16 %358, i16* %359, align 2
  %360 = getelementptr inbounds i16, i16* %218, i64 13
  %361 = load i16, i16* %360, align 2
  %362 = zext i16 %361 to i32
  %363 = getelementptr inbounds i16, i16* %219, i64 13
  %364 = load i16, i16* %363, align 2
  %365 = zext i16 %364 to i32
  %366 = add nuw nsw i32 %362, 1
  %367 = add nuw nsw i32 %366, %365
  %368 = lshr i32 %367, 1
  %369 = trunc i32 %368 to i16
  %370 = getelementptr inbounds i16, i16* %216, i64 13
  store i16 %369, i16* %370, align 2
  %371 = getelementptr inbounds i16, i16* %218, i64 14
  %372 = load i16, i16* %371, align 2
  %373 = zext i16 %372 to i32
  %374 = getelementptr inbounds i16, i16* %219, i64 14
  %375 = load i16, i16* %374, align 2
  %376 = zext i16 %375 to i32
  %377 = add nuw nsw i32 %373, 1
  %378 = add nuw nsw i32 %377, %376
  %379 = lshr i32 %378, 1
  %380 = trunc i32 %379 to i16
  %381 = getelementptr inbounds i16, i16* %216, i64 14
  store i16 %380, i16* %381, align 2
  %382 = getelementptr inbounds i16, i16* %218, i64 15
  %383 = load i16, i16* %382, align 2
  %384 = zext i16 %383 to i32
  %385 = getelementptr inbounds i16, i16* %219, i64 15
  %386 = load i16, i16* %385, align 2
  %387 = zext i16 %386 to i32
  %388 = add nuw nsw i32 %384, 1
  %389 = add nuw nsw i32 %388, %387
  %390 = lshr i32 %389, 1
  %391 = trunc i32 %390 to i16
  %392 = getelementptr inbounds i16, i16* %216, i64 15
  store i16 %391, i16* %392, align 2
  %393 = getelementptr inbounds i16, i16* %216, i64 16
  %394 = getelementptr inbounds i16, i16* %218, i64 16
  %395 = getelementptr inbounds i16, i16* %219, i64 16
  %396 = add nuw nsw i32 %217, 1
  %397 = icmp eq i32 %396, 32
  br i1 %397, label %398, label %215

398:                                              ; preds = %215
  %399 = ptrtoint [512 x i16]* %11 to i64
  %400 = lshr exact i64 %399, 1
  %401 = inttoptr i64 %400 to i8*
  %402 = call i32 @vpx_highbd_8_variance16x32_c(i8* nonnull %401, i32 16, i8* %4, i32 %5, i32* %6)
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %14) #4
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %13) #4
  call void @llvm.lifetime.end.p0i8(i64 1056, i8* nonnull %12) #4
  ret i32 %402
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_highbd_10_sub_pixel_avg_variance16x32_c(i8*, i32, i32, i32, i8*, i32, i32* nocapture, i8*) local_unnamed_addr #2 {
  %9 = alloca [528 x i16], align 16
  %10 = alloca [512 x i16], align 16
  %11 = alloca [512 x i16], align 16
  %12 = bitcast [528 x i16]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1056, i8* nonnull %12) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %12, i8 -86, i64 1056, i1 false)
  %13 = bitcast [512 x i16]* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %13) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %13, i8 -86, i64 1024, i1 false)
  %14 = bitcast [512 x i16]* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %14) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %14, i8 -86, i64 1024, i1 false)
  %15 = getelementptr inbounds [528 x i16], [528 x i16]* %9, i64 0, i64 0
  %16 = sext i32 %2 to i64
  %17 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %16, i64 0
  %18 = ptrtoint i8* %0 to i64
  %19 = shl i64 %18, 1
  %20 = inttoptr i64 %19 to i16*
  %21 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %16, i64 1
  %22 = add i32 %1, -16
  %23 = zext i32 %22 to i64
  %24 = load i8, i8* %17, align 2
  %25 = zext i8 %24 to i32
  %26 = load i8, i8* %21, align 1
  %27 = zext i8 %26 to i32
  %28 = insertelement <8 x i32> undef, i32 %25, i32 0
  %29 = shufflevector <8 x i32> %28, <8 x i32> undef, <8 x i32> zeroinitializer
  %30 = insertelement <8 x i32> undef, i32 %27, i32 0
  %31 = shufflevector <8 x i32> %30, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %32

32:                                               ; preds = %107, %8
  %33 = phi i64 [ %113, %107 ], [ 0, %8 ]
  %34 = phi i16* [ %109, %107 ], [ %20, %8 ]
  %35 = phi i32 [ %111, %107 ], [ 0, %8 ]
  %36 = phi i16* [ %110, %107 ], [ %15, %8 ]
  %37 = shl nuw nsw i64 %33, 4
  %38 = add i64 %37, 16
  %39 = getelementptr [528 x i16], [528 x i16]* %9, i64 0, i64 %38
  %40 = getelementptr [528 x i16], [528 x i16]* %9, i64 0, i64 %37
  %41 = getelementptr i16, i16* %34, i64 17
  %42 = icmp ult i16* %40, %41
  %43 = icmp ult i16* %34, %39
  %44 = and i1 %42, %43
  br i1 %44, label %77, label %45

45:                                               ; preds = %32
  %46 = getelementptr i16, i16* %34, i64 16
  %47 = bitcast i16* %34 to <8 x i16>*
  %48 = load <8 x i16>, <8 x i16>* %47, align 2, !alias.scope !939
  %49 = zext <8 x i16> %48 to <8 x i32>
  %50 = mul nuw nsw <8 x i32> %29, %49
  %51 = getelementptr inbounds i16, i16* %34, i64 1
  %52 = bitcast i16* %51 to <8 x i16>*
  %53 = load <8 x i16>, <8 x i16>* %52, align 2, !alias.scope !939
  %54 = zext <8 x i16> %53 to <8 x i32>
  %55 = mul nuw nsw <8 x i32> %31, %54
  %56 = add nuw nsw <8 x i32> %50, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %57 = add nuw nsw <8 x i32> %56, %55
  %58 = lshr <8 x i32> %57, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %59 = trunc <8 x i32> %58 to <8 x i16>
  %60 = bitcast i16* %36 to <8 x i16>*
  store <8 x i16> %59, <8 x i16>* %60, align 2, !alias.scope !942, !noalias !939
  %61 = getelementptr i16, i16* %34, i64 8
  %62 = bitcast i16* %61 to <8 x i16>*
  %63 = load <8 x i16>, <8 x i16>* %62, align 2, !alias.scope !939
  %64 = zext <8 x i16> %63 to <8 x i32>
  %65 = mul nuw nsw <8 x i32> %29, %64
  %66 = getelementptr inbounds i16, i16* %34, i64 9
  %67 = bitcast i16* %66 to <8 x i16>*
  %68 = load <8 x i16>, <8 x i16>* %67, align 2, !alias.scope !939
  %69 = zext <8 x i16> %68 to <8 x i32>
  %70 = mul nuw nsw <8 x i32> %31, %69
  %71 = add nuw nsw <8 x i32> %65, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %72 = add nuw nsw <8 x i32> %71, %70
  %73 = lshr <8 x i32> %72, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %74 = trunc <8 x i32> %73 to <8 x i16>
  %75 = getelementptr inbounds i16, i16* %36, i64 8
  %76 = bitcast i16* %75 to <8 x i16>*
  store <8 x i16> %74, <8 x i16>* %76, align 2, !alias.scope !942, !noalias !939
  br label %107

77:                                               ; preds = %32, %77
  %78 = phi i64 [ %105, %77 ], [ 0, %32 ]
  %79 = phi i16* [ %96, %77 ], [ %34, %32 ]
  %80 = load i16, i16* %79, align 2
  %81 = zext i16 %80 to i32
  %82 = mul nuw nsw i32 %25, %81
  %83 = getelementptr inbounds i16, i16* %79, i64 1
  %84 = load i16, i16* %83, align 2
  %85 = zext i16 %84 to i32
  %86 = mul nuw nsw i32 %27, %85
  %87 = add nuw nsw i32 %82, 64
  %88 = add nuw nsw i32 %87, %86
  %89 = lshr i32 %88, 7
  %90 = trunc i32 %89 to i16
  %91 = getelementptr inbounds i16, i16* %36, i64 %78
  store i16 %90, i16* %91, align 2
  %92 = or i64 %78, 1
  %93 = load i16, i16* %83, align 2
  %94 = zext i16 %93 to i32
  %95 = mul nuw nsw i32 %25, %94
  %96 = getelementptr inbounds i16, i16* %79, i64 2
  %97 = load i16, i16* %96, align 2
  %98 = zext i16 %97 to i32
  %99 = mul nuw nsw i32 %27, %98
  %100 = add nuw nsw i32 %95, 64
  %101 = add nuw nsw i32 %100, %99
  %102 = lshr i32 %101, 7
  %103 = trunc i32 %102 to i16
  %104 = getelementptr inbounds i16, i16* %36, i64 %92
  store i16 %103, i16* %104, align 2
  %105 = add nuw nsw i64 %78, 2
  %106 = icmp eq i64 %105, 16
  br i1 %106, label %107, label %77, !llvm.loop !944

107:                                              ; preds = %77, %45
  %108 = phi i16* [ %46, %45 ], [ %96, %77 ]
  %109 = getelementptr inbounds i16, i16* %108, i64 %23
  %110 = getelementptr inbounds i16, i16* %36, i64 16
  %111 = add nuw nsw i32 %35, 1
  %112 = icmp eq i32 %111, 33
  %113 = add i64 %33, 1
  br i1 %112, label %114, label %32

114:                                              ; preds = %107
  %115 = getelementptr inbounds [512 x i16], [512 x i16]* %10, i64 0, i64 0
  %116 = sext i32 %3 to i64
  %117 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %116, i64 0
  %118 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %116, i64 1
  %119 = load i8, i8* %117, align 2
  %120 = zext i8 %119 to i32
  %121 = load i8, i8* %118, align 1
  %122 = zext i8 %121 to i32
  %123 = insertelement <8 x i32> undef, i32 %120, i32 0
  %124 = shufflevector <8 x i32> %123, <8 x i32> undef, <8 x i32> zeroinitializer
  %125 = insertelement <8 x i32> undef, i32 %122, i32 0
  %126 = shufflevector <8 x i32> %125, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %127

127:                                              ; preds = %204, %114
  %128 = phi i64 [ %209, %204 ], [ 0, %114 ]
  %129 = phi i32 [ %207, %204 ], [ 0, %114 ]
  %130 = phi i16* [ %205, %204 ], [ %15, %114 ]
  %131 = phi i16* [ %206, %204 ], [ %115, %114 ]
  %132 = shl nuw nsw i64 %128, 4
  %133 = add i64 %132, 16
  %134 = getelementptr [512 x i16], [512 x i16]* %10, i64 0, i64 %133
  %135 = getelementptr [512 x i16], [512 x i16]* %10, i64 0, i64 %132
  %136 = getelementptr i16, i16* %130, i64 32
  %137 = icmp ult i16* %135, %136
  %138 = icmp ult i16* %130, %134
  %139 = and i1 %137, %138
  br i1 %139, label %172, label %140

140:                                              ; preds = %127
  %141 = getelementptr i16, i16* %130, i64 16
  %142 = bitcast i16* %130 to <8 x i16>*
  %143 = load <8 x i16>, <8 x i16>* %142, align 2, !alias.scope !945
  %144 = zext <8 x i16> %143 to <8 x i32>
  %145 = mul nuw nsw <8 x i32> %124, %144
  %146 = getelementptr inbounds i16, i16* %130, i64 16
  %147 = bitcast i16* %146 to <8 x i16>*
  %148 = load <8 x i16>, <8 x i16>* %147, align 2, !alias.scope !945
  %149 = zext <8 x i16> %148 to <8 x i32>
  %150 = mul nuw nsw <8 x i32> %126, %149
  %151 = add nuw nsw <8 x i32> %145, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %152 = add nuw nsw <8 x i32> %151, %150
  %153 = lshr <8 x i32> %152, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %154 = trunc <8 x i32> %153 to <8 x i16>
  %155 = bitcast i16* %131 to <8 x i16>*
  store <8 x i16> %154, <8 x i16>* %155, align 2, !alias.scope !948, !noalias !945
  %156 = getelementptr i16, i16* %130, i64 8
  %157 = bitcast i16* %156 to <8 x i16>*
  %158 = load <8 x i16>, <8 x i16>* %157, align 2, !alias.scope !945
  %159 = zext <8 x i16> %158 to <8 x i32>
  %160 = mul nuw nsw <8 x i32> %124, %159
  %161 = getelementptr inbounds i16, i16* %130, i64 24
  %162 = bitcast i16* %161 to <8 x i16>*
  %163 = load <8 x i16>, <8 x i16>* %162, align 2, !alias.scope !945
  %164 = zext <8 x i16> %163 to <8 x i32>
  %165 = mul nuw nsw <8 x i32> %126, %164
  %166 = add nuw nsw <8 x i32> %160, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %167 = add nuw nsw <8 x i32> %166, %165
  %168 = lshr <8 x i32> %167, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %169 = trunc <8 x i32> %168 to <8 x i16>
  %170 = getelementptr inbounds i16, i16* %131, i64 8
  %171 = bitcast i16* %170 to <8 x i16>*
  store <8 x i16> %169, <8 x i16>* %171, align 2, !alias.scope !948, !noalias !945
  br label %204

172:                                              ; preds = %127, %172
  %173 = phi i64 [ %202, %172 ], [ 0, %127 ]
  %174 = phi i16* [ %201, %172 ], [ %130, %127 ]
  %175 = load i16, i16* %174, align 2
  %176 = zext i16 %175 to i32
  %177 = mul nuw nsw i32 %120, %176
  %178 = getelementptr inbounds i16, i16* %174, i64 16
  %179 = load i16, i16* %178, align 2
  %180 = zext i16 %179 to i32
  %181 = mul nuw nsw i32 %122, %180
  %182 = add nuw nsw i32 %177, 64
  %183 = add nuw nsw i32 %182, %181
  %184 = lshr i32 %183, 7
  %185 = trunc i32 %184 to i16
  %186 = getelementptr inbounds i16, i16* %131, i64 %173
  store i16 %185, i16* %186, align 2
  %187 = getelementptr inbounds i16, i16* %174, i64 1
  %188 = or i64 %173, 1
  %189 = load i16, i16* %187, align 2
  %190 = zext i16 %189 to i32
  %191 = mul nuw nsw i32 %120, %190
  %192 = getelementptr inbounds i16, i16* %174, i64 17
  %193 = load i16, i16* %192, align 2
  %194 = zext i16 %193 to i32
  %195 = mul nuw nsw i32 %122, %194
  %196 = add nuw nsw i32 %191, 64
  %197 = add nuw nsw i32 %196, %195
  %198 = lshr i32 %197, 7
  %199 = trunc i32 %198 to i16
  %200 = getelementptr inbounds i16, i16* %131, i64 %188
  store i16 %199, i16* %200, align 2
  %201 = getelementptr inbounds i16, i16* %174, i64 2
  %202 = add nuw nsw i64 %173, 2
  %203 = icmp eq i64 %202, 16
  br i1 %203, label %204, label %172, !llvm.loop !950

204:                                              ; preds = %172, %140
  %205 = phi i16* [ %141, %140 ], [ %201, %172 ]
  %206 = getelementptr inbounds i16, i16* %131, i64 16
  %207 = add nuw nsw i32 %129, 1
  %208 = icmp eq i32 %207, 32
  %209 = add i64 %128, 1
  br i1 %208, label %210, label %127

210:                                              ; preds = %204
  %211 = getelementptr inbounds [512 x i16], [512 x i16]* %11, i64 0, i64 0
  %212 = ptrtoint i8* %7 to i64
  %213 = shl i64 %212, 1
  %214 = inttoptr i64 %213 to i16*
  br label %215

215:                                              ; preds = %215, %210
  %216 = phi i16* [ %211, %210 ], [ %393, %215 ]
  %217 = phi i32 [ 0, %210 ], [ %396, %215 ]
  %218 = phi i16* [ %214, %210 ], [ %394, %215 ]
  %219 = phi i16* [ %115, %210 ], [ %395, %215 ]
  %220 = load i16, i16* %218, align 2
  %221 = zext i16 %220 to i32
  %222 = load i16, i16* %219, align 2
  %223 = zext i16 %222 to i32
  %224 = add nuw nsw i32 %221, 1
  %225 = add nuw nsw i32 %224, %223
  %226 = lshr i32 %225, 1
  %227 = trunc i32 %226 to i16
  store i16 %227, i16* %216, align 2
  %228 = getelementptr inbounds i16, i16* %218, i64 1
  %229 = load i16, i16* %228, align 2
  %230 = zext i16 %229 to i32
  %231 = getelementptr inbounds i16, i16* %219, i64 1
  %232 = load i16, i16* %231, align 2
  %233 = zext i16 %232 to i32
  %234 = add nuw nsw i32 %230, 1
  %235 = add nuw nsw i32 %234, %233
  %236 = lshr i32 %235, 1
  %237 = trunc i32 %236 to i16
  %238 = getelementptr inbounds i16, i16* %216, i64 1
  store i16 %237, i16* %238, align 2
  %239 = getelementptr inbounds i16, i16* %218, i64 2
  %240 = load i16, i16* %239, align 2
  %241 = zext i16 %240 to i32
  %242 = getelementptr inbounds i16, i16* %219, i64 2
  %243 = load i16, i16* %242, align 2
  %244 = zext i16 %243 to i32
  %245 = add nuw nsw i32 %241, 1
  %246 = add nuw nsw i32 %245, %244
  %247 = lshr i32 %246, 1
  %248 = trunc i32 %247 to i16
  %249 = getelementptr inbounds i16, i16* %216, i64 2
  store i16 %248, i16* %249, align 2
  %250 = getelementptr inbounds i16, i16* %218, i64 3
  %251 = load i16, i16* %250, align 2
  %252 = zext i16 %251 to i32
  %253 = getelementptr inbounds i16, i16* %219, i64 3
  %254 = load i16, i16* %253, align 2
  %255 = zext i16 %254 to i32
  %256 = add nuw nsw i32 %252, 1
  %257 = add nuw nsw i32 %256, %255
  %258 = lshr i32 %257, 1
  %259 = trunc i32 %258 to i16
  %260 = getelementptr inbounds i16, i16* %216, i64 3
  store i16 %259, i16* %260, align 2
  %261 = getelementptr inbounds i16, i16* %218, i64 4
  %262 = load i16, i16* %261, align 2
  %263 = zext i16 %262 to i32
  %264 = getelementptr inbounds i16, i16* %219, i64 4
  %265 = load i16, i16* %264, align 2
  %266 = zext i16 %265 to i32
  %267 = add nuw nsw i32 %263, 1
  %268 = add nuw nsw i32 %267, %266
  %269 = lshr i32 %268, 1
  %270 = trunc i32 %269 to i16
  %271 = getelementptr inbounds i16, i16* %216, i64 4
  store i16 %270, i16* %271, align 2
  %272 = getelementptr inbounds i16, i16* %218, i64 5
  %273 = load i16, i16* %272, align 2
  %274 = zext i16 %273 to i32
  %275 = getelementptr inbounds i16, i16* %219, i64 5
  %276 = load i16, i16* %275, align 2
  %277 = zext i16 %276 to i32
  %278 = add nuw nsw i32 %274, 1
  %279 = add nuw nsw i32 %278, %277
  %280 = lshr i32 %279, 1
  %281 = trunc i32 %280 to i16
  %282 = getelementptr inbounds i16, i16* %216, i64 5
  store i16 %281, i16* %282, align 2
  %283 = getelementptr inbounds i16, i16* %218, i64 6
  %284 = load i16, i16* %283, align 2
  %285 = zext i16 %284 to i32
  %286 = getelementptr inbounds i16, i16* %219, i64 6
  %287 = load i16, i16* %286, align 2
  %288 = zext i16 %287 to i32
  %289 = add nuw nsw i32 %285, 1
  %290 = add nuw nsw i32 %289, %288
  %291 = lshr i32 %290, 1
  %292 = trunc i32 %291 to i16
  %293 = getelementptr inbounds i16, i16* %216, i64 6
  store i16 %292, i16* %293, align 2
  %294 = getelementptr inbounds i16, i16* %218, i64 7
  %295 = load i16, i16* %294, align 2
  %296 = zext i16 %295 to i32
  %297 = getelementptr inbounds i16, i16* %219, i64 7
  %298 = load i16, i16* %297, align 2
  %299 = zext i16 %298 to i32
  %300 = add nuw nsw i32 %296, 1
  %301 = add nuw nsw i32 %300, %299
  %302 = lshr i32 %301, 1
  %303 = trunc i32 %302 to i16
  %304 = getelementptr inbounds i16, i16* %216, i64 7
  store i16 %303, i16* %304, align 2
  %305 = getelementptr inbounds i16, i16* %218, i64 8
  %306 = load i16, i16* %305, align 2
  %307 = zext i16 %306 to i32
  %308 = getelementptr inbounds i16, i16* %219, i64 8
  %309 = load i16, i16* %308, align 2
  %310 = zext i16 %309 to i32
  %311 = add nuw nsw i32 %307, 1
  %312 = add nuw nsw i32 %311, %310
  %313 = lshr i32 %312, 1
  %314 = trunc i32 %313 to i16
  %315 = getelementptr inbounds i16, i16* %216, i64 8
  store i16 %314, i16* %315, align 2
  %316 = getelementptr inbounds i16, i16* %218, i64 9
  %317 = load i16, i16* %316, align 2
  %318 = zext i16 %317 to i32
  %319 = getelementptr inbounds i16, i16* %219, i64 9
  %320 = load i16, i16* %319, align 2
  %321 = zext i16 %320 to i32
  %322 = add nuw nsw i32 %318, 1
  %323 = add nuw nsw i32 %322, %321
  %324 = lshr i32 %323, 1
  %325 = trunc i32 %324 to i16
  %326 = getelementptr inbounds i16, i16* %216, i64 9
  store i16 %325, i16* %326, align 2
  %327 = getelementptr inbounds i16, i16* %218, i64 10
  %328 = load i16, i16* %327, align 2
  %329 = zext i16 %328 to i32
  %330 = getelementptr inbounds i16, i16* %219, i64 10
  %331 = load i16, i16* %330, align 2
  %332 = zext i16 %331 to i32
  %333 = add nuw nsw i32 %329, 1
  %334 = add nuw nsw i32 %333, %332
  %335 = lshr i32 %334, 1
  %336 = trunc i32 %335 to i16
  %337 = getelementptr inbounds i16, i16* %216, i64 10
  store i16 %336, i16* %337, align 2
  %338 = getelementptr inbounds i16, i16* %218, i64 11
  %339 = load i16, i16* %338, align 2
  %340 = zext i16 %339 to i32
  %341 = getelementptr inbounds i16, i16* %219, i64 11
  %342 = load i16, i16* %341, align 2
  %343 = zext i16 %342 to i32
  %344 = add nuw nsw i32 %340, 1
  %345 = add nuw nsw i32 %344, %343
  %346 = lshr i32 %345, 1
  %347 = trunc i32 %346 to i16
  %348 = getelementptr inbounds i16, i16* %216, i64 11
  store i16 %347, i16* %348, align 2
  %349 = getelementptr inbounds i16, i16* %218, i64 12
  %350 = load i16, i16* %349, align 2
  %351 = zext i16 %350 to i32
  %352 = getelementptr inbounds i16, i16* %219, i64 12
  %353 = load i16, i16* %352, align 2
  %354 = zext i16 %353 to i32
  %355 = add nuw nsw i32 %351, 1
  %356 = add nuw nsw i32 %355, %354
  %357 = lshr i32 %356, 1
  %358 = trunc i32 %357 to i16
  %359 = getelementptr inbounds i16, i16* %216, i64 12
  store i16 %358, i16* %359, align 2
  %360 = getelementptr inbounds i16, i16* %218, i64 13
  %361 = load i16, i16* %360, align 2
  %362 = zext i16 %361 to i32
  %363 = getelementptr inbounds i16, i16* %219, i64 13
  %364 = load i16, i16* %363, align 2
  %365 = zext i16 %364 to i32
  %366 = add nuw nsw i32 %362, 1
  %367 = add nuw nsw i32 %366, %365
  %368 = lshr i32 %367, 1
  %369 = trunc i32 %368 to i16
  %370 = getelementptr inbounds i16, i16* %216, i64 13
  store i16 %369, i16* %370, align 2
  %371 = getelementptr inbounds i16, i16* %218, i64 14
  %372 = load i16, i16* %371, align 2
  %373 = zext i16 %372 to i32
  %374 = getelementptr inbounds i16, i16* %219, i64 14
  %375 = load i16, i16* %374, align 2
  %376 = zext i16 %375 to i32
  %377 = add nuw nsw i32 %373, 1
  %378 = add nuw nsw i32 %377, %376
  %379 = lshr i32 %378, 1
  %380 = trunc i32 %379 to i16
  %381 = getelementptr inbounds i16, i16* %216, i64 14
  store i16 %380, i16* %381, align 2
  %382 = getelementptr inbounds i16, i16* %218, i64 15
  %383 = load i16, i16* %382, align 2
  %384 = zext i16 %383 to i32
  %385 = getelementptr inbounds i16, i16* %219, i64 15
  %386 = load i16, i16* %385, align 2
  %387 = zext i16 %386 to i32
  %388 = add nuw nsw i32 %384, 1
  %389 = add nuw nsw i32 %388, %387
  %390 = lshr i32 %389, 1
  %391 = trunc i32 %390 to i16
  %392 = getelementptr inbounds i16, i16* %216, i64 15
  store i16 %391, i16* %392, align 2
  %393 = getelementptr inbounds i16, i16* %216, i64 16
  %394 = getelementptr inbounds i16, i16* %218, i64 16
  %395 = getelementptr inbounds i16, i16* %219, i64 16
  %396 = add nuw nsw i32 %217, 1
  %397 = icmp eq i32 %396, 32
  br i1 %397, label %398, label %215

398:                                              ; preds = %215
  %399 = ptrtoint [512 x i16]* %11 to i64
  %400 = lshr exact i64 %399, 1
  %401 = inttoptr i64 %400 to i8*
  %402 = call i32 @vpx_highbd_10_variance16x32_c(i8* nonnull %401, i32 16, i8* %4, i32 %5, i32* %6)
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %14) #4
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %13) #4
  call void @llvm.lifetime.end.p0i8(i64 1056, i8* nonnull %12) #4
  ret i32 %402
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_highbd_12_sub_pixel_avg_variance16x32_c(i8*, i32, i32, i32, i8*, i32, i32* nocapture, i8*) local_unnamed_addr #2 {
  %9 = alloca [528 x i16], align 16
  %10 = alloca [512 x i16], align 16
  %11 = alloca [512 x i16], align 16
  %12 = bitcast [528 x i16]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1056, i8* nonnull %12) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %12, i8 -86, i64 1056, i1 false)
  %13 = bitcast [512 x i16]* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %13) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %13, i8 -86, i64 1024, i1 false)
  %14 = bitcast [512 x i16]* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %14) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %14, i8 -86, i64 1024, i1 false)
  %15 = getelementptr inbounds [528 x i16], [528 x i16]* %9, i64 0, i64 0
  %16 = sext i32 %2 to i64
  %17 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %16, i64 0
  %18 = ptrtoint i8* %0 to i64
  %19 = shl i64 %18, 1
  %20 = inttoptr i64 %19 to i16*
  %21 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %16, i64 1
  %22 = add i32 %1, -16
  %23 = zext i32 %22 to i64
  %24 = load i8, i8* %17, align 2
  %25 = zext i8 %24 to i32
  %26 = load i8, i8* %21, align 1
  %27 = zext i8 %26 to i32
  %28 = insertelement <8 x i32> undef, i32 %25, i32 0
  %29 = shufflevector <8 x i32> %28, <8 x i32> undef, <8 x i32> zeroinitializer
  %30 = insertelement <8 x i32> undef, i32 %27, i32 0
  %31 = shufflevector <8 x i32> %30, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %32

32:                                               ; preds = %107, %8
  %33 = phi i64 [ %113, %107 ], [ 0, %8 ]
  %34 = phi i16* [ %109, %107 ], [ %20, %8 ]
  %35 = phi i32 [ %111, %107 ], [ 0, %8 ]
  %36 = phi i16* [ %110, %107 ], [ %15, %8 ]
  %37 = shl nuw nsw i64 %33, 4
  %38 = add i64 %37, 16
  %39 = getelementptr [528 x i16], [528 x i16]* %9, i64 0, i64 %38
  %40 = getelementptr [528 x i16], [528 x i16]* %9, i64 0, i64 %37
  %41 = getelementptr i16, i16* %34, i64 17
  %42 = icmp ult i16* %40, %41
  %43 = icmp ult i16* %34, %39
  %44 = and i1 %42, %43
  br i1 %44, label %77, label %45

45:                                               ; preds = %32
  %46 = getelementptr i16, i16* %34, i64 16
  %47 = bitcast i16* %34 to <8 x i16>*
  %48 = load <8 x i16>, <8 x i16>* %47, align 2, !alias.scope !951
  %49 = zext <8 x i16> %48 to <8 x i32>
  %50 = mul nuw nsw <8 x i32> %29, %49
  %51 = getelementptr inbounds i16, i16* %34, i64 1
  %52 = bitcast i16* %51 to <8 x i16>*
  %53 = load <8 x i16>, <8 x i16>* %52, align 2, !alias.scope !951
  %54 = zext <8 x i16> %53 to <8 x i32>
  %55 = mul nuw nsw <8 x i32> %31, %54
  %56 = add nuw nsw <8 x i32> %50, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %57 = add nuw nsw <8 x i32> %56, %55
  %58 = lshr <8 x i32> %57, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %59 = trunc <8 x i32> %58 to <8 x i16>
  %60 = bitcast i16* %36 to <8 x i16>*
  store <8 x i16> %59, <8 x i16>* %60, align 2, !alias.scope !954, !noalias !951
  %61 = getelementptr i16, i16* %34, i64 8
  %62 = bitcast i16* %61 to <8 x i16>*
  %63 = load <8 x i16>, <8 x i16>* %62, align 2, !alias.scope !951
  %64 = zext <8 x i16> %63 to <8 x i32>
  %65 = mul nuw nsw <8 x i32> %29, %64
  %66 = getelementptr inbounds i16, i16* %34, i64 9
  %67 = bitcast i16* %66 to <8 x i16>*
  %68 = load <8 x i16>, <8 x i16>* %67, align 2, !alias.scope !951
  %69 = zext <8 x i16> %68 to <8 x i32>
  %70 = mul nuw nsw <8 x i32> %31, %69
  %71 = add nuw nsw <8 x i32> %65, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %72 = add nuw nsw <8 x i32> %71, %70
  %73 = lshr <8 x i32> %72, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %74 = trunc <8 x i32> %73 to <8 x i16>
  %75 = getelementptr inbounds i16, i16* %36, i64 8
  %76 = bitcast i16* %75 to <8 x i16>*
  store <8 x i16> %74, <8 x i16>* %76, align 2, !alias.scope !954, !noalias !951
  br label %107

77:                                               ; preds = %32, %77
  %78 = phi i64 [ %105, %77 ], [ 0, %32 ]
  %79 = phi i16* [ %96, %77 ], [ %34, %32 ]
  %80 = load i16, i16* %79, align 2
  %81 = zext i16 %80 to i32
  %82 = mul nuw nsw i32 %25, %81
  %83 = getelementptr inbounds i16, i16* %79, i64 1
  %84 = load i16, i16* %83, align 2
  %85 = zext i16 %84 to i32
  %86 = mul nuw nsw i32 %27, %85
  %87 = add nuw nsw i32 %82, 64
  %88 = add nuw nsw i32 %87, %86
  %89 = lshr i32 %88, 7
  %90 = trunc i32 %89 to i16
  %91 = getelementptr inbounds i16, i16* %36, i64 %78
  store i16 %90, i16* %91, align 2
  %92 = or i64 %78, 1
  %93 = load i16, i16* %83, align 2
  %94 = zext i16 %93 to i32
  %95 = mul nuw nsw i32 %25, %94
  %96 = getelementptr inbounds i16, i16* %79, i64 2
  %97 = load i16, i16* %96, align 2
  %98 = zext i16 %97 to i32
  %99 = mul nuw nsw i32 %27, %98
  %100 = add nuw nsw i32 %95, 64
  %101 = add nuw nsw i32 %100, %99
  %102 = lshr i32 %101, 7
  %103 = trunc i32 %102 to i16
  %104 = getelementptr inbounds i16, i16* %36, i64 %92
  store i16 %103, i16* %104, align 2
  %105 = add nuw nsw i64 %78, 2
  %106 = icmp eq i64 %105, 16
  br i1 %106, label %107, label %77, !llvm.loop !956

107:                                              ; preds = %77, %45
  %108 = phi i16* [ %46, %45 ], [ %96, %77 ]
  %109 = getelementptr inbounds i16, i16* %108, i64 %23
  %110 = getelementptr inbounds i16, i16* %36, i64 16
  %111 = add nuw nsw i32 %35, 1
  %112 = icmp eq i32 %111, 33
  %113 = add i64 %33, 1
  br i1 %112, label %114, label %32

114:                                              ; preds = %107
  %115 = getelementptr inbounds [512 x i16], [512 x i16]* %10, i64 0, i64 0
  %116 = sext i32 %3 to i64
  %117 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %116, i64 0
  %118 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %116, i64 1
  %119 = load i8, i8* %117, align 2
  %120 = zext i8 %119 to i32
  %121 = load i8, i8* %118, align 1
  %122 = zext i8 %121 to i32
  %123 = insertelement <8 x i32> undef, i32 %120, i32 0
  %124 = shufflevector <8 x i32> %123, <8 x i32> undef, <8 x i32> zeroinitializer
  %125 = insertelement <8 x i32> undef, i32 %122, i32 0
  %126 = shufflevector <8 x i32> %125, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %127

127:                                              ; preds = %204, %114
  %128 = phi i64 [ %209, %204 ], [ 0, %114 ]
  %129 = phi i32 [ %207, %204 ], [ 0, %114 ]
  %130 = phi i16* [ %205, %204 ], [ %15, %114 ]
  %131 = phi i16* [ %206, %204 ], [ %115, %114 ]
  %132 = shl nuw nsw i64 %128, 4
  %133 = add i64 %132, 16
  %134 = getelementptr [512 x i16], [512 x i16]* %10, i64 0, i64 %133
  %135 = getelementptr [512 x i16], [512 x i16]* %10, i64 0, i64 %132
  %136 = getelementptr i16, i16* %130, i64 32
  %137 = icmp ult i16* %135, %136
  %138 = icmp ult i16* %130, %134
  %139 = and i1 %137, %138
  br i1 %139, label %172, label %140

140:                                              ; preds = %127
  %141 = getelementptr i16, i16* %130, i64 16
  %142 = bitcast i16* %130 to <8 x i16>*
  %143 = load <8 x i16>, <8 x i16>* %142, align 2, !alias.scope !957
  %144 = zext <8 x i16> %143 to <8 x i32>
  %145 = mul nuw nsw <8 x i32> %124, %144
  %146 = getelementptr inbounds i16, i16* %130, i64 16
  %147 = bitcast i16* %146 to <8 x i16>*
  %148 = load <8 x i16>, <8 x i16>* %147, align 2, !alias.scope !957
  %149 = zext <8 x i16> %148 to <8 x i32>
  %150 = mul nuw nsw <8 x i32> %126, %149
  %151 = add nuw nsw <8 x i32> %145, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %152 = add nuw nsw <8 x i32> %151, %150
  %153 = lshr <8 x i32> %152, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %154 = trunc <8 x i32> %153 to <8 x i16>
  %155 = bitcast i16* %131 to <8 x i16>*
  store <8 x i16> %154, <8 x i16>* %155, align 2, !alias.scope !960, !noalias !957
  %156 = getelementptr i16, i16* %130, i64 8
  %157 = bitcast i16* %156 to <8 x i16>*
  %158 = load <8 x i16>, <8 x i16>* %157, align 2, !alias.scope !957
  %159 = zext <8 x i16> %158 to <8 x i32>
  %160 = mul nuw nsw <8 x i32> %124, %159
  %161 = getelementptr inbounds i16, i16* %130, i64 24
  %162 = bitcast i16* %161 to <8 x i16>*
  %163 = load <8 x i16>, <8 x i16>* %162, align 2, !alias.scope !957
  %164 = zext <8 x i16> %163 to <8 x i32>
  %165 = mul nuw nsw <8 x i32> %126, %164
  %166 = add nuw nsw <8 x i32> %160, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %167 = add nuw nsw <8 x i32> %166, %165
  %168 = lshr <8 x i32> %167, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %169 = trunc <8 x i32> %168 to <8 x i16>
  %170 = getelementptr inbounds i16, i16* %131, i64 8
  %171 = bitcast i16* %170 to <8 x i16>*
  store <8 x i16> %169, <8 x i16>* %171, align 2, !alias.scope !960, !noalias !957
  br label %204

172:                                              ; preds = %127, %172
  %173 = phi i64 [ %202, %172 ], [ 0, %127 ]
  %174 = phi i16* [ %201, %172 ], [ %130, %127 ]
  %175 = load i16, i16* %174, align 2
  %176 = zext i16 %175 to i32
  %177 = mul nuw nsw i32 %120, %176
  %178 = getelementptr inbounds i16, i16* %174, i64 16
  %179 = load i16, i16* %178, align 2
  %180 = zext i16 %179 to i32
  %181 = mul nuw nsw i32 %122, %180
  %182 = add nuw nsw i32 %177, 64
  %183 = add nuw nsw i32 %182, %181
  %184 = lshr i32 %183, 7
  %185 = trunc i32 %184 to i16
  %186 = getelementptr inbounds i16, i16* %131, i64 %173
  store i16 %185, i16* %186, align 2
  %187 = getelementptr inbounds i16, i16* %174, i64 1
  %188 = or i64 %173, 1
  %189 = load i16, i16* %187, align 2
  %190 = zext i16 %189 to i32
  %191 = mul nuw nsw i32 %120, %190
  %192 = getelementptr inbounds i16, i16* %174, i64 17
  %193 = load i16, i16* %192, align 2
  %194 = zext i16 %193 to i32
  %195 = mul nuw nsw i32 %122, %194
  %196 = add nuw nsw i32 %191, 64
  %197 = add nuw nsw i32 %196, %195
  %198 = lshr i32 %197, 7
  %199 = trunc i32 %198 to i16
  %200 = getelementptr inbounds i16, i16* %131, i64 %188
  store i16 %199, i16* %200, align 2
  %201 = getelementptr inbounds i16, i16* %174, i64 2
  %202 = add nuw nsw i64 %173, 2
  %203 = icmp eq i64 %202, 16
  br i1 %203, label %204, label %172, !llvm.loop !962

204:                                              ; preds = %172, %140
  %205 = phi i16* [ %141, %140 ], [ %201, %172 ]
  %206 = getelementptr inbounds i16, i16* %131, i64 16
  %207 = add nuw nsw i32 %129, 1
  %208 = icmp eq i32 %207, 32
  %209 = add i64 %128, 1
  br i1 %208, label %210, label %127

210:                                              ; preds = %204
  %211 = getelementptr inbounds [512 x i16], [512 x i16]* %11, i64 0, i64 0
  %212 = ptrtoint i8* %7 to i64
  %213 = shl i64 %212, 1
  %214 = inttoptr i64 %213 to i16*
  br label %215

215:                                              ; preds = %215, %210
  %216 = phi i16* [ %211, %210 ], [ %393, %215 ]
  %217 = phi i32 [ 0, %210 ], [ %396, %215 ]
  %218 = phi i16* [ %214, %210 ], [ %394, %215 ]
  %219 = phi i16* [ %115, %210 ], [ %395, %215 ]
  %220 = load i16, i16* %218, align 2
  %221 = zext i16 %220 to i32
  %222 = load i16, i16* %219, align 2
  %223 = zext i16 %222 to i32
  %224 = add nuw nsw i32 %221, 1
  %225 = add nuw nsw i32 %224, %223
  %226 = lshr i32 %225, 1
  %227 = trunc i32 %226 to i16
  store i16 %227, i16* %216, align 2
  %228 = getelementptr inbounds i16, i16* %218, i64 1
  %229 = load i16, i16* %228, align 2
  %230 = zext i16 %229 to i32
  %231 = getelementptr inbounds i16, i16* %219, i64 1
  %232 = load i16, i16* %231, align 2
  %233 = zext i16 %232 to i32
  %234 = add nuw nsw i32 %230, 1
  %235 = add nuw nsw i32 %234, %233
  %236 = lshr i32 %235, 1
  %237 = trunc i32 %236 to i16
  %238 = getelementptr inbounds i16, i16* %216, i64 1
  store i16 %237, i16* %238, align 2
  %239 = getelementptr inbounds i16, i16* %218, i64 2
  %240 = load i16, i16* %239, align 2
  %241 = zext i16 %240 to i32
  %242 = getelementptr inbounds i16, i16* %219, i64 2
  %243 = load i16, i16* %242, align 2
  %244 = zext i16 %243 to i32
  %245 = add nuw nsw i32 %241, 1
  %246 = add nuw nsw i32 %245, %244
  %247 = lshr i32 %246, 1
  %248 = trunc i32 %247 to i16
  %249 = getelementptr inbounds i16, i16* %216, i64 2
  store i16 %248, i16* %249, align 2
  %250 = getelementptr inbounds i16, i16* %218, i64 3
  %251 = load i16, i16* %250, align 2
  %252 = zext i16 %251 to i32
  %253 = getelementptr inbounds i16, i16* %219, i64 3
  %254 = load i16, i16* %253, align 2
  %255 = zext i16 %254 to i32
  %256 = add nuw nsw i32 %252, 1
  %257 = add nuw nsw i32 %256, %255
  %258 = lshr i32 %257, 1
  %259 = trunc i32 %258 to i16
  %260 = getelementptr inbounds i16, i16* %216, i64 3
  store i16 %259, i16* %260, align 2
  %261 = getelementptr inbounds i16, i16* %218, i64 4
  %262 = load i16, i16* %261, align 2
  %263 = zext i16 %262 to i32
  %264 = getelementptr inbounds i16, i16* %219, i64 4
  %265 = load i16, i16* %264, align 2
  %266 = zext i16 %265 to i32
  %267 = add nuw nsw i32 %263, 1
  %268 = add nuw nsw i32 %267, %266
  %269 = lshr i32 %268, 1
  %270 = trunc i32 %269 to i16
  %271 = getelementptr inbounds i16, i16* %216, i64 4
  store i16 %270, i16* %271, align 2
  %272 = getelementptr inbounds i16, i16* %218, i64 5
  %273 = load i16, i16* %272, align 2
  %274 = zext i16 %273 to i32
  %275 = getelementptr inbounds i16, i16* %219, i64 5
  %276 = load i16, i16* %275, align 2
  %277 = zext i16 %276 to i32
  %278 = add nuw nsw i32 %274, 1
  %279 = add nuw nsw i32 %278, %277
  %280 = lshr i32 %279, 1
  %281 = trunc i32 %280 to i16
  %282 = getelementptr inbounds i16, i16* %216, i64 5
  store i16 %281, i16* %282, align 2
  %283 = getelementptr inbounds i16, i16* %218, i64 6
  %284 = load i16, i16* %283, align 2
  %285 = zext i16 %284 to i32
  %286 = getelementptr inbounds i16, i16* %219, i64 6
  %287 = load i16, i16* %286, align 2
  %288 = zext i16 %287 to i32
  %289 = add nuw nsw i32 %285, 1
  %290 = add nuw nsw i32 %289, %288
  %291 = lshr i32 %290, 1
  %292 = trunc i32 %291 to i16
  %293 = getelementptr inbounds i16, i16* %216, i64 6
  store i16 %292, i16* %293, align 2
  %294 = getelementptr inbounds i16, i16* %218, i64 7
  %295 = load i16, i16* %294, align 2
  %296 = zext i16 %295 to i32
  %297 = getelementptr inbounds i16, i16* %219, i64 7
  %298 = load i16, i16* %297, align 2
  %299 = zext i16 %298 to i32
  %300 = add nuw nsw i32 %296, 1
  %301 = add nuw nsw i32 %300, %299
  %302 = lshr i32 %301, 1
  %303 = trunc i32 %302 to i16
  %304 = getelementptr inbounds i16, i16* %216, i64 7
  store i16 %303, i16* %304, align 2
  %305 = getelementptr inbounds i16, i16* %218, i64 8
  %306 = load i16, i16* %305, align 2
  %307 = zext i16 %306 to i32
  %308 = getelementptr inbounds i16, i16* %219, i64 8
  %309 = load i16, i16* %308, align 2
  %310 = zext i16 %309 to i32
  %311 = add nuw nsw i32 %307, 1
  %312 = add nuw nsw i32 %311, %310
  %313 = lshr i32 %312, 1
  %314 = trunc i32 %313 to i16
  %315 = getelementptr inbounds i16, i16* %216, i64 8
  store i16 %314, i16* %315, align 2
  %316 = getelementptr inbounds i16, i16* %218, i64 9
  %317 = load i16, i16* %316, align 2
  %318 = zext i16 %317 to i32
  %319 = getelementptr inbounds i16, i16* %219, i64 9
  %320 = load i16, i16* %319, align 2
  %321 = zext i16 %320 to i32
  %322 = add nuw nsw i32 %318, 1
  %323 = add nuw nsw i32 %322, %321
  %324 = lshr i32 %323, 1
  %325 = trunc i32 %324 to i16
  %326 = getelementptr inbounds i16, i16* %216, i64 9
  store i16 %325, i16* %326, align 2
  %327 = getelementptr inbounds i16, i16* %218, i64 10
  %328 = load i16, i16* %327, align 2
  %329 = zext i16 %328 to i32
  %330 = getelementptr inbounds i16, i16* %219, i64 10
  %331 = load i16, i16* %330, align 2
  %332 = zext i16 %331 to i32
  %333 = add nuw nsw i32 %329, 1
  %334 = add nuw nsw i32 %333, %332
  %335 = lshr i32 %334, 1
  %336 = trunc i32 %335 to i16
  %337 = getelementptr inbounds i16, i16* %216, i64 10
  store i16 %336, i16* %337, align 2
  %338 = getelementptr inbounds i16, i16* %218, i64 11
  %339 = load i16, i16* %338, align 2
  %340 = zext i16 %339 to i32
  %341 = getelementptr inbounds i16, i16* %219, i64 11
  %342 = load i16, i16* %341, align 2
  %343 = zext i16 %342 to i32
  %344 = add nuw nsw i32 %340, 1
  %345 = add nuw nsw i32 %344, %343
  %346 = lshr i32 %345, 1
  %347 = trunc i32 %346 to i16
  %348 = getelementptr inbounds i16, i16* %216, i64 11
  store i16 %347, i16* %348, align 2
  %349 = getelementptr inbounds i16, i16* %218, i64 12
  %350 = load i16, i16* %349, align 2
  %351 = zext i16 %350 to i32
  %352 = getelementptr inbounds i16, i16* %219, i64 12
  %353 = load i16, i16* %352, align 2
  %354 = zext i16 %353 to i32
  %355 = add nuw nsw i32 %351, 1
  %356 = add nuw nsw i32 %355, %354
  %357 = lshr i32 %356, 1
  %358 = trunc i32 %357 to i16
  %359 = getelementptr inbounds i16, i16* %216, i64 12
  store i16 %358, i16* %359, align 2
  %360 = getelementptr inbounds i16, i16* %218, i64 13
  %361 = load i16, i16* %360, align 2
  %362 = zext i16 %361 to i32
  %363 = getelementptr inbounds i16, i16* %219, i64 13
  %364 = load i16, i16* %363, align 2
  %365 = zext i16 %364 to i32
  %366 = add nuw nsw i32 %362, 1
  %367 = add nuw nsw i32 %366, %365
  %368 = lshr i32 %367, 1
  %369 = trunc i32 %368 to i16
  %370 = getelementptr inbounds i16, i16* %216, i64 13
  store i16 %369, i16* %370, align 2
  %371 = getelementptr inbounds i16, i16* %218, i64 14
  %372 = load i16, i16* %371, align 2
  %373 = zext i16 %372 to i32
  %374 = getelementptr inbounds i16, i16* %219, i64 14
  %375 = load i16, i16* %374, align 2
  %376 = zext i16 %375 to i32
  %377 = add nuw nsw i32 %373, 1
  %378 = add nuw nsw i32 %377, %376
  %379 = lshr i32 %378, 1
  %380 = trunc i32 %379 to i16
  %381 = getelementptr inbounds i16, i16* %216, i64 14
  store i16 %380, i16* %381, align 2
  %382 = getelementptr inbounds i16, i16* %218, i64 15
  %383 = load i16, i16* %382, align 2
  %384 = zext i16 %383 to i32
  %385 = getelementptr inbounds i16, i16* %219, i64 15
  %386 = load i16, i16* %385, align 2
  %387 = zext i16 %386 to i32
  %388 = add nuw nsw i32 %384, 1
  %389 = add nuw nsw i32 %388, %387
  %390 = lshr i32 %389, 1
  %391 = trunc i32 %390 to i16
  %392 = getelementptr inbounds i16, i16* %216, i64 15
  store i16 %391, i16* %392, align 2
  %393 = getelementptr inbounds i16, i16* %216, i64 16
  %394 = getelementptr inbounds i16, i16* %218, i64 16
  %395 = getelementptr inbounds i16, i16* %219, i64 16
  %396 = add nuw nsw i32 %217, 1
  %397 = icmp eq i32 %396, 32
  br i1 %397, label %398, label %215

398:                                              ; preds = %215
  %399 = ptrtoint [512 x i16]* %11 to i64
  %400 = lshr exact i64 %399, 1
  %401 = inttoptr i64 %400 to i8*
  %402 = call i32 @vpx_highbd_12_variance16x32_c(i8* nonnull %401, i32 16, i8* %4, i32 %5, i32* %6)
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %14) #4
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %13) #4
  call void @llvm.lifetime.end.p0i8(i64 1056, i8* nonnull %12) #4
  ret i32 %402
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_highbd_8_variance16x16_c(i8*, i32, i8*, i32, i32* nocapture) local_unnamed_addr #2 {
  %6 = ptrtoint i8* %2 to i64
  %7 = shl i64 %6, 1
  %8 = inttoptr i64 %7 to i16*
  %9 = ptrtoint i8* %0 to i64
  %10 = shl i64 %9, 1
  %11 = inttoptr i64 %10 to i16*
  %12 = sext i32 %1 to i64
  %13 = sext i32 %3 to i64
  br label %14

14:                                               ; preds = %14, %5
  %15 = phi i64 [ 0, %5 ], [ %101, %14 ]
  %16 = phi i64 [ 0, %5 ], [ %97, %14 ]
  %17 = phi i32 [ 0, %5 ], [ %104, %14 ]
  %18 = phi i16* [ %8, %5 ], [ %103, %14 ]
  %19 = phi i16* [ %11, %5 ], [ %102, %14 ]
  %20 = bitcast i16* %19 to <16 x i16>*
  %21 = load <16 x i16>, <16 x i16>* %20, align 2
  %22 = zext <16 x i16> %21 to <16 x i32>
  %23 = bitcast i16* %18 to <16 x i16>*
  %24 = load <16 x i16>, <16 x i16>* %23, align 2
  %25 = zext <16 x i16> %24 to <16 x i32>
  %26 = sub nsw <16 x i32> %22, %25
  %27 = sext <16 x i32> %26 to <16 x i64>
  %28 = extractelement <16 x i32> %26, i32 0
  %29 = mul nsw i32 %28, %28
  %30 = zext i32 %29 to i64
  %31 = add i64 %15, %30
  %32 = extractelement <16 x i32> %26, i32 1
  %33 = mul nsw i32 %32, %32
  %34 = zext i32 %33 to i64
  %35 = add i64 %31, %34
  %36 = extractelement <16 x i32> %26, i32 2
  %37 = mul nsw i32 %36, %36
  %38 = zext i32 %37 to i64
  %39 = add i64 %35, %38
  %40 = extractelement <16 x i32> %26, i32 3
  %41 = mul nsw i32 %40, %40
  %42 = zext i32 %41 to i64
  %43 = add i64 %39, %42
  %44 = extractelement <16 x i32> %26, i32 4
  %45 = mul nsw i32 %44, %44
  %46 = zext i32 %45 to i64
  %47 = add i64 %43, %46
  %48 = extractelement <16 x i32> %26, i32 5
  %49 = mul nsw i32 %48, %48
  %50 = zext i32 %49 to i64
  %51 = add i64 %47, %50
  %52 = extractelement <16 x i32> %26, i32 6
  %53 = mul nsw i32 %52, %52
  %54 = zext i32 %53 to i64
  %55 = add i64 %51, %54
  %56 = extractelement <16 x i32> %26, i32 7
  %57 = mul nsw i32 %56, %56
  %58 = zext i32 %57 to i64
  %59 = add i64 %55, %58
  %60 = extractelement <16 x i32> %26, i32 8
  %61 = mul nsw i32 %60, %60
  %62 = zext i32 %61 to i64
  %63 = add i64 %59, %62
  %64 = extractelement <16 x i32> %26, i32 9
  %65 = mul nsw i32 %64, %64
  %66 = zext i32 %65 to i64
  %67 = add i64 %63, %66
  %68 = extractelement <16 x i32> %26, i32 10
  %69 = mul nsw i32 %68, %68
  %70 = zext i32 %69 to i64
  %71 = add i64 %67, %70
  %72 = extractelement <16 x i32> %26, i32 11
  %73 = mul nsw i32 %72, %72
  %74 = zext i32 %73 to i64
  %75 = add i64 %71, %74
  %76 = extractelement <16 x i32> %26, i32 12
  %77 = mul nsw i32 %76, %76
  %78 = zext i32 %77 to i64
  %79 = add i64 %75, %78
  %80 = extractelement <16 x i32> %26, i32 13
  %81 = mul nsw i32 %80, %80
  %82 = zext i32 %81 to i64
  %83 = add i64 %79, %82
  %84 = extractelement <16 x i32> %26, i32 14
  %85 = mul nsw i32 %84, %84
  %86 = zext i32 %85 to i64
  %87 = add i64 %83, %86
  %88 = shufflevector <16 x i64> %27, <16 x i64> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %89 = add nsw <16 x i64> %88, %27
  %90 = shufflevector <16 x i64> %89, <16 x i64> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %91 = add nsw <16 x i64> %89, %90
  %92 = shufflevector <16 x i64> %91, <16 x i64> undef, <16 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %93 = add nsw <16 x i64> %91, %92
  %94 = shufflevector <16 x i64> %93, <16 x i64> undef, <16 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %95 = add nsw <16 x i64> %93, %94
  %96 = extractelement <16 x i64> %95, i32 0
  %97 = add nsw i64 %96, %16
  %98 = extractelement <16 x i32> %26, i32 15
  %99 = mul nsw i32 %98, %98
  %100 = zext i32 %99 to i64
  %101 = add i64 %87, %100
  %102 = getelementptr inbounds i16, i16* %19, i64 %12
  %103 = getelementptr inbounds i16, i16* %18, i64 %13
  %104 = add nuw nsw i32 %17, 1
  %105 = icmp eq i32 %104, 16
  br i1 %105, label %106, label %14

106:                                              ; preds = %14
  %107 = trunc i64 %101 to i32
  store i32 %107, i32* %4, align 4
  %108 = shl i64 %97, 32
  %109 = ashr exact i64 %108, 32
  %110 = mul nsw i64 %109, %109
  %111 = lshr i64 %110, 8
  %112 = trunc i64 %111 to i32
  %113 = sub i32 %107, %112
  ret i32 %113
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_highbd_10_variance16x16_c(i8*, i32, i8*, i32, i32* nocapture) local_unnamed_addr #2 {
  %6 = ptrtoint i8* %2 to i64
  %7 = shl i64 %6, 1
  %8 = inttoptr i64 %7 to i16*
  %9 = ptrtoint i8* %0 to i64
  %10 = shl i64 %9, 1
  %11 = inttoptr i64 %10 to i16*
  %12 = sext i32 %1 to i64
  %13 = sext i32 %3 to i64
  br label %14

14:                                               ; preds = %14, %5
  %15 = phi i64 [ 0, %5 ], [ %101, %14 ]
  %16 = phi i64 [ 0, %5 ], [ %97, %14 ]
  %17 = phi i32 [ 0, %5 ], [ %104, %14 ]
  %18 = phi i16* [ %8, %5 ], [ %103, %14 ]
  %19 = phi i16* [ %11, %5 ], [ %102, %14 ]
  %20 = bitcast i16* %19 to <16 x i16>*
  %21 = load <16 x i16>, <16 x i16>* %20, align 2
  %22 = zext <16 x i16> %21 to <16 x i32>
  %23 = bitcast i16* %18 to <16 x i16>*
  %24 = load <16 x i16>, <16 x i16>* %23, align 2
  %25 = zext <16 x i16> %24 to <16 x i32>
  %26 = sub nsw <16 x i32> %22, %25
  %27 = sext <16 x i32> %26 to <16 x i64>
  %28 = extractelement <16 x i32> %26, i32 0
  %29 = mul nsw i32 %28, %28
  %30 = zext i32 %29 to i64
  %31 = add i64 %15, %30
  %32 = extractelement <16 x i32> %26, i32 1
  %33 = mul nsw i32 %32, %32
  %34 = zext i32 %33 to i64
  %35 = add i64 %31, %34
  %36 = extractelement <16 x i32> %26, i32 2
  %37 = mul nsw i32 %36, %36
  %38 = zext i32 %37 to i64
  %39 = add i64 %35, %38
  %40 = extractelement <16 x i32> %26, i32 3
  %41 = mul nsw i32 %40, %40
  %42 = zext i32 %41 to i64
  %43 = add i64 %39, %42
  %44 = extractelement <16 x i32> %26, i32 4
  %45 = mul nsw i32 %44, %44
  %46 = zext i32 %45 to i64
  %47 = add i64 %43, %46
  %48 = extractelement <16 x i32> %26, i32 5
  %49 = mul nsw i32 %48, %48
  %50 = zext i32 %49 to i64
  %51 = add i64 %47, %50
  %52 = extractelement <16 x i32> %26, i32 6
  %53 = mul nsw i32 %52, %52
  %54 = zext i32 %53 to i64
  %55 = add i64 %51, %54
  %56 = extractelement <16 x i32> %26, i32 7
  %57 = mul nsw i32 %56, %56
  %58 = zext i32 %57 to i64
  %59 = add i64 %55, %58
  %60 = extractelement <16 x i32> %26, i32 8
  %61 = mul nsw i32 %60, %60
  %62 = zext i32 %61 to i64
  %63 = add i64 %59, %62
  %64 = extractelement <16 x i32> %26, i32 9
  %65 = mul nsw i32 %64, %64
  %66 = zext i32 %65 to i64
  %67 = add i64 %63, %66
  %68 = extractelement <16 x i32> %26, i32 10
  %69 = mul nsw i32 %68, %68
  %70 = zext i32 %69 to i64
  %71 = add i64 %67, %70
  %72 = extractelement <16 x i32> %26, i32 11
  %73 = mul nsw i32 %72, %72
  %74 = zext i32 %73 to i64
  %75 = add i64 %71, %74
  %76 = extractelement <16 x i32> %26, i32 12
  %77 = mul nsw i32 %76, %76
  %78 = zext i32 %77 to i64
  %79 = add i64 %75, %78
  %80 = extractelement <16 x i32> %26, i32 13
  %81 = mul nsw i32 %80, %80
  %82 = zext i32 %81 to i64
  %83 = add i64 %79, %82
  %84 = extractelement <16 x i32> %26, i32 14
  %85 = mul nsw i32 %84, %84
  %86 = zext i32 %85 to i64
  %87 = add i64 %83, %86
  %88 = shufflevector <16 x i64> %27, <16 x i64> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %89 = add nsw <16 x i64> %88, %27
  %90 = shufflevector <16 x i64> %89, <16 x i64> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %91 = add nsw <16 x i64> %89, %90
  %92 = shufflevector <16 x i64> %91, <16 x i64> undef, <16 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %93 = add nsw <16 x i64> %91, %92
  %94 = shufflevector <16 x i64> %93, <16 x i64> undef, <16 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %95 = add nsw <16 x i64> %93, %94
  %96 = extractelement <16 x i64> %95, i32 0
  %97 = add nsw i64 %96, %16
  %98 = extractelement <16 x i32> %26, i32 15
  %99 = mul nsw i32 %98, %98
  %100 = zext i32 %99 to i64
  %101 = add i64 %87, %100
  %102 = getelementptr inbounds i16, i16* %19, i64 %12
  %103 = getelementptr inbounds i16, i16* %18, i64 %13
  %104 = add nuw nsw i32 %17, 1
  %105 = icmp eq i32 %104, 16
  br i1 %105, label %106, label %14

106:                                              ; preds = %14
  %107 = add i64 %101, 8
  %108 = lshr i64 %107, 4
  %109 = trunc i64 %108 to i32
  store i32 %109, i32* %4, align 4
  %110 = and i64 %108, 4294967295
  %111 = shl i64 %97, 30
  %112 = add i64 %111, 2147483648
  %113 = ashr i64 %112, 32
  %114 = mul nsw i64 %113, %113
  %115 = lshr i64 %114, 8
  %116 = sub nsw i64 %110, %115
  %117 = icmp sgt i64 %116, -1
  %118 = trunc i64 %116 to i32
  %119 = select i1 %117, i32 %118, i32 0
  ret i32 %119
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_highbd_12_variance16x16_c(i8*, i32, i8*, i32, i32* nocapture) local_unnamed_addr #2 {
  %6 = ptrtoint i8* %2 to i64
  %7 = shl i64 %6, 1
  %8 = inttoptr i64 %7 to i16*
  %9 = ptrtoint i8* %0 to i64
  %10 = shl i64 %9, 1
  %11 = inttoptr i64 %10 to i16*
  %12 = sext i32 %1 to i64
  %13 = sext i32 %3 to i64
  br label %14

14:                                               ; preds = %14, %5
  %15 = phi i64 [ 0, %5 ], [ %101, %14 ]
  %16 = phi i64 [ 0, %5 ], [ %97, %14 ]
  %17 = phi i32 [ 0, %5 ], [ %104, %14 ]
  %18 = phi i16* [ %8, %5 ], [ %103, %14 ]
  %19 = phi i16* [ %11, %5 ], [ %102, %14 ]
  %20 = bitcast i16* %19 to <16 x i16>*
  %21 = load <16 x i16>, <16 x i16>* %20, align 2
  %22 = zext <16 x i16> %21 to <16 x i32>
  %23 = bitcast i16* %18 to <16 x i16>*
  %24 = load <16 x i16>, <16 x i16>* %23, align 2
  %25 = zext <16 x i16> %24 to <16 x i32>
  %26 = sub nsw <16 x i32> %22, %25
  %27 = sext <16 x i32> %26 to <16 x i64>
  %28 = extractelement <16 x i32> %26, i32 0
  %29 = mul nsw i32 %28, %28
  %30 = zext i32 %29 to i64
  %31 = add i64 %15, %30
  %32 = extractelement <16 x i32> %26, i32 1
  %33 = mul nsw i32 %32, %32
  %34 = zext i32 %33 to i64
  %35 = add i64 %31, %34
  %36 = extractelement <16 x i32> %26, i32 2
  %37 = mul nsw i32 %36, %36
  %38 = zext i32 %37 to i64
  %39 = add i64 %35, %38
  %40 = extractelement <16 x i32> %26, i32 3
  %41 = mul nsw i32 %40, %40
  %42 = zext i32 %41 to i64
  %43 = add i64 %39, %42
  %44 = extractelement <16 x i32> %26, i32 4
  %45 = mul nsw i32 %44, %44
  %46 = zext i32 %45 to i64
  %47 = add i64 %43, %46
  %48 = extractelement <16 x i32> %26, i32 5
  %49 = mul nsw i32 %48, %48
  %50 = zext i32 %49 to i64
  %51 = add i64 %47, %50
  %52 = extractelement <16 x i32> %26, i32 6
  %53 = mul nsw i32 %52, %52
  %54 = zext i32 %53 to i64
  %55 = add i64 %51, %54
  %56 = extractelement <16 x i32> %26, i32 7
  %57 = mul nsw i32 %56, %56
  %58 = zext i32 %57 to i64
  %59 = add i64 %55, %58
  %60 = extractelement <16 x i32> %26, i32 8
  %61 = mul nsw i32 %60, %60
  %62 = zext i32 %61 to i64
  %63 = add i64 %59, %62
  %64 = extractelement <16 x i32> %26, i32 9
  %65 = mul nsw i32 %64, %64
  %66 = zext i32 %65 to i64
  %67 = add i64 %63, %66
  %68 = extractelement <16 x i32> %26, i32 10
  %69 = mul nsw i32 %68, %68
  %70 = zext i32 %69 to i64
  %71 = add i64 %67, %70
  %72 = extractelement <16 x i32> %26, i32 11
  %73 = mul nsw i32 %72, %72
  %74 = zext i32 %73 to i64
  %75 = add i64 %71, %74
  %76 = extractelement <16 x i32> %26, i32 12
  %77 = mul nsw i32 %76, %76
  %78 = zext i32 %77 to i64
  %79 = add i64 %75, %78
  %80 = extractelement <16 x i32> %26, i32 13
  %81 = mul nsw i32 %80, %80
  %82 = zext i32 %81 to i64
  %83 = add i64 %79, %82
  %84 = extractelement <16 x i32> %26, i32 14
  %85 = mul nsw i32 %84, %84
  %86 = zext i32 %85 to i64
  %87 = add i64 %83, %86
  %88 = shufflevector <16 x i64> %27, <16 x i64> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %89 = add nsw <16 x i64> %88, %27
  %90 = shufflevector <16 x i64> %89, <16 x i64> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %91 = add nsw <16 x i64> %89, %90
  %92 = shufflevector <16 x i64> %91, <16 x i64> undef, <16 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %93 = add nsw <16 x i64> %91, %92
  %94 = shufflevector <16 x i64> %93, <16 x i64> undef, <16 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %95 = add nsw <16 x i64> %93, %94
  %96 = extractelement <16 x i64> %95, i32 0
  %97 = add nsw i64 %96, %16
  %98 = extractelement <16 x i32> %26, i32 15
  %99 = mul nsw i32 %98, %98
  %100 = zext i32 %99 to i64
  %101 = add i64 %87, %100
  %102 = getelementptr inbounds i16, i16* %19, i64 %12
  %103 = getelementptr inbounds i16, i16* %18, i64 %13
  %104 = add nuw nsw i32 %17, 1
  %105 = icmp eq i32 %104, 16
  br i1 %105, label %106, label %14

106:                                              ; preds = %14
  %107 = add i64 %101, 128
  %108 = lshr i64 %107, 8
  %109 = trunc i64 %108 to i32
  store i32 %109, i32* %4, align 4
  %110 = and i64 %108, 4294967295
  %111 = shl i64 %97, 28
  %112 = add i64 %111, 2147483648
  %113 = ashr i64 %112, 32
  %114 = mul nsw i64 %113, %113
  %115 = lshr i64 %114, 8
  %116 = sub nsw i64 %110, %115
  %117 = icmp sgt i64 %116, -1
  %118 = trunc i64 %116 to i32
  %119 = select i1 %117, i32 %118, i32 0
  ret i32 %119
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_highbd_8_sub_pixel_variance16x16_c(i8*, i32, i32, i32, i8*, i32, i32* nocapture) local_unnamed_addr #2 {
  %8 = alloca [272 x i16], align 16
  %9 = alloca [256 x i16], align 16
  %10 = bitcast [272 x i16]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 544, i8* nonnull %10) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %10, i8 -86, i64 544, i1 false)
  %11 = bitcast [256 x i16]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %11) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %11, i8 -86, i64 512, i1 false)
  %12 = getelementptr inbounds [272 x i16], [272 x i16]* %8, i64 0, i64 0
  %13 = sext i32 %2 to i64
  %14 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %13, i64 0
  %15 = ptrtoint i8* %0 to i64
  %16 = shl i64 %15, 1
  %17 = inttoptr i64 %16 to i16*
  %18 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %13, i64 1
  %19 = add i32 %1, -16
  %20 = zext i32 %19 to i64
  %21 = load i8, i8* %14, align 2
  %22 = zext i8 %21 to i32
  %23 = load i8, i8* %18, align 1
  %24 = zext i8 %23 to i32
  %25 = insertelement <8 x i32> undef, i32 %22, i32 0
  %26 = shufflevector <8 x i32> %25, <8 x i32> undef, <8 x i32> zeroinitializer
  %27 = insertelement <8 x i32> undef, i32 %24, i32 0
  %28 = shufflevector <8 x i32> %27, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %29

29:                                               ; preds = %104, %7
  %30 = phi i64 [ %110, %104 ], [ 0, %7 ]
  %31 = phi i16* [ %106, %104 ], [ %17, %7 ]
  %32 = phi i32 [ %108, %104 ], [ 0, %7 ]
  %33 = phi i16* [ %107, %104 ], [ %12, %7 ]
  %34 = shl nuw nsw i64 %30, 4
  %35 = add i64 %34, 16
  %36 = getelementptr [272 x i16], [272 x i16]* %8, i64 0, i64 %35
  %37 = getelementptr [272 x i16], [272 x i16]* %8, i64 0, i64 %34
  %38 = getelementptr i16, i16* %31, i64 17
  %39 = icmp ult i16* %37, %38
  %40 = icmp ult i16* %31, %36
  %41 = and i1 %39, %40
  br i1 %41, label %74, label %42

42:                                               ; preds = %29
  %43 = getelementptr i16, i16* %31, i64 16
  %44 = bitcast i16* %31 to <8 x i16>*
  %45 = load <8 x i16>, <8 x i16>* %44, align 2, !alias.scope !963
  %46 = zext <8 x i16> %45 to <8 x i32>
  %47 = mul nuw nsw <8 x i32> %26, %46
  %48 = getelementptr inbounds i16, i16* %31, i64 1
  %49 = bitcast i16* %48 to <8 x i16>*
  %50 = load <8 x i16>, <8 x i16>* %49, align 2, !alias.scope !963
  %51 = zext <8 x i16> %50 to <8 x i32>
  %52 = mul nuw nsw <8 x i32> %28, %51
  %53 = add nuw nsw <8 x i32> %47, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %54 = add nuw nsw <8 x i32> %53, %52
  %55 = lshr <8 x i32> %54, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %56 = trunc <8 x i32> %55 to <8 x i16>
  %57 = bitcast i16* %33 to <8 x i16>*
  store <8 x i16> %56, <8 x i16>* %57, align 2, !alias.scope !966, !noalias !963
  %58 = getelementptr i16, i16* %31, i64 8
  %59 = bitcast i16* %58 to <8 x i16>*
  %60 = load <8 x i16>, <8 x i16>* %59, align 2, !alias.scope !963
  %61 = zext <8 x i16> %60 to <8 x i32>
  %62 = mul nuw nsw <8 x i32> %26, %61
  %63 = getelementptr inbounds i16, i16* %31, i64 9
  %64 = bitcast i16* %63 to <8 x i16>*
  %65 = load <8 x i16>, <8 x i16>* %64, align 2, !alias.scope !963
  %66 = zext <8 x i16> %65 to <8 x i32>
  %67 = mul nuw nsw <8 x i32> %28, %66
  %68 = add nuw nsw <8 x i32> %62, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %69 = add nuw nsw <8 x i32> %68, %67
  %70 = lshr <8 x i32> %69, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %71 = trunc <8 x i32> %70 to <8 x i16>
  %72 = getelementptr inbounds i16, i16* %33, i64 8
  %73 = bitcast i16* %72 to <8 x i16>*
  store <8 x i16> %71, <8 x i16>* %73, align 2, !alias.scope !966, !noalias !963
  br label %104

74:                                               ; preds = %29, %74
  %75 = phi i64 [ %102, %74 ], [ 0, %29 ]
  %76 = phi i16* [ %93, %74 ], [ %31, %29 ]
  %77 = load i16, i16* %76, align 2
  %78 = zext i16 %77 to i32
  %79 = mul nuw nsw i32 %22, %78
  %80 = getelementptr inbounds i16, i16* %76, i64 1
  %81 = load i16, i16* %80, align 2
  %82 = zext i16 %81 to i32
  %83 = mul nuw nsw i32 %24, %82
  %84 = add nuw nsw i32 %79, 64
  %85 = add nuw nsw i32 %84, %83
  %86 = lshr i32 %85, 7
  %87 = trunc i32 %86 to i16
  %88 = getelementptr inbounds i16, i16* %33, i64 %75
  store i16 %87, i16* %88, align 2
  %89 = or i64 %75, 1
  %90 = load i16, i16* %80, align 2
  %91 = zext i16 %90 to i32
  %92 = mul nuw nsw i32 %22, %91
  %93 = getelementptr inbounds i16, i16* %76, i64 2
  %94 = load i16, i16* %93, align 2
  %95 = zext i16 %94 to i32
  %96 = mul nuw nsw i32 %24, %95
  %97 = add nuw nsw i32 %92, 64
  %98 = add nuw nsw i32 %97, %96
  %99 = lshr i32 %98, 7
  %100 = trunc i32 %99 to i16
  %101 = getelementptr inbounds i16, i16* %33, i64 %89
  store i16 %100, i16* %101, align 2
  %102 = add nuw nsw i64 %75, 2
  %103 = icmp eq i64 %102, 16
  br i1 %103, label %104, label %74, !llvm.loop !968

104:                                              ; preds = %74, %42
  %105 = phi i16* [ %43, %42 ], [ %93, %74 ]
  %106 = getelementptr inbounds i16, i16* %105, i64 %20
  %107 = getelementptr inbounds i16, i16* %33, i64 16
  %108 = add nuw nsw i32 %32, 1
  %109 = icmp eq i32 %108, 17
  %110 = add i64 %30, 1
  br i1 %109, label %111, label %29

111:                                              ; preds = %104
  %112 = getelementptr inbounds [256 x i16], [256 x i16]* %9, i64 0, i64 0
  %113 = sext i32 %3 to i64
  %114 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %113, i64 0
  %115 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %113, i64 1
  %116 = load i8, i8* %114, align 2
  %117 = zext i8 %116 to i32
  %118 = load i8, i8* %115, align 1
  %119 = zext i8 %118 to i32
  %120 = insertelement <8 x i32> undef, i32 %117, i32 0
  %121 = shufflevector <8 x i32> %120, <8 x i32> undef, <8 x i32> zeroinitializer
  %122 = insertelement <8 x i32> undef, i32 %119, i32 0
  %123 = shufflevector <8 x i32> %122, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %124

124:                                              ; preds = %201, %111
  %125 = phi i64 [ %206, %201 ], [ 0, %111 ]
  %126 = phi i32 [ %204, %201 ], [ 0, %111 ]
  %127 = phi i16* [ %202, %201 ], [ %12, %111 ]
  %128 = phi i16* [ %203, %201 ], [ %112, %111 ]
  %129 = shl nuw nsw i64 %125, 4
  %130 = add i64 %129, 16
  %131 = getelementptr [256 x i16], [256 x i16]* %9, i64 0, i64 %130
  %132 = getelementptr [256 x i16], [256 x i16]* %9, i64 0, i64 %129
  %133 = getelementptr i16, i16* %127, i64 32
  %134 = icmp ult i16* %132, %133
  %135 = icmp ult i16* %127, %131
  %136 = and i1 %134, %135
  br i1 %136, label %169, label %137

137:                                              ; preds = %124
  %138 = getelementptr i16, i16* %127, i64 16
  %139 = bitcast i16* %127 to <8 x i16>*
  %140 = load <8 x i16>, <8 x i16>* %139, align 2, !alias.scope !969
  %141 = zext <8 x i16> %140 to <8 x i32>
  %142 = mul nuw nsw <8 x i32> %121, %141
  %143 = getelementptr inbounds i16, i16* %127, i64 16
  %144 = bitcast i16* %143 to <8 x i16>*
  %145 = load <8 x i16>, <8 x i16>* %144, align 2, !alias.scope !969
  %146 = zext <8 x i16> %145 to <8 x i32>
  %147 = mul nuw nsw <8 x i32> %123, %146
  %148 = add nuw nsw <8 x i32> %142, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %149 = add nuw nsw <8 x i32> %148, %147
  %150 = lshr <8 x i32> %149, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %151 = trunc <8 x i32> %150 to <8 x i16>
  %152 = bitcast i16* %128 to <8 x i16>*
  store <8 x i16> %151, <8 x i16>* %152, align 2, !alias.scope !972, !noalias !969
  %153 = getelementptr i16, i16* %127, i64 8
  %154 = bitcast i16* %153 to <8 x i16>*
  %155 = load <8 x i16>, <8 x i16>* %154, align 2, !alias.scope !969
  %156 = zext <8 x i16> %155 to <8 x i32>
  %157 = mul nuw nsw <8 x i32> %121, %156
  %158 = getelementptr inbounds i16, i16* %127, i64 24
  %159 = bitcast i16* %158 to <8 x i16>*
  %160 = load <8 x i16>, <8 x i16>* %159, align 2, !alias.scope !969
  %161 = zext <8 x i16> %160 to <8 x i32>
  %162 = mul nuw nsw <8 x i32> %123, %161
  %163 = add nuw nsw <8 x i32> %157, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %164 = add nuw nsw <8 x i32> %163, %162
  %165 = lshr <8 x i32> %164, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %166 = trunc <8 x i32> %165 to <8 x i16>
  %167 = getelementptr inbounds i16, i16* %128, i64 8
  %168 = bitcast i16* %167 to <8 x i16>*
  store <8 x i16> %166, <8 x i16>* %168, align 2, !alias.scope !972, !noalias !969
  br label %201

169:                                              ; preds = %124, %169
  %170 = phi i64 [ %199, %169 ], [ 0, %124 ]
  %171 = phi i16* [ %198, %169 ], [ %127, %124 ]
  %172 = load i16, i16* %171, align 2
  %173 = zext i16 %172 to i32
  %174 = mul nuw nsw i32 %117, %173
  %175 = getelementptr inbounds i16, i16* %171, i64 16
  %176 = load i16, i16* %175, align 2
  %177 = zext i16 %176 to i32
  %178 = mul nuw nsw i32 %119, %177
  %179 = add nuw nsw i32 %174, 64
  %180 = add nuw nsw i32 %179, %178
  %181 = lshr i32 %180, 7
  %182 = trunc i32 %181 to i16
  %183 = getelementptr inbounds i16, i16* %128, i64 %170
  store i16 %182, i16* %183, align 2
  %184 = getelementptr inbounds i16, i16* %171, i64 1
  %185 = or i64 %170, 1
  %186 = load i16, i16* %184, align 2
  %187 = zext i16 %186 to i32
  %188 = mul nuw nsw i32 %117, %187
  %189 = getelementptr inbounds i16, i16* %171, i64 17
  %190 = load i16, i16* %189, align 2
  %191 = zext i16 %190 to i32
  %192 = mul nuw nsw i32 %119, %191
  %193 = add nuw nsw i32 %188, 64
  %194 = add nuw nsw i32 %193, %192
  %195 = lshr i32 %194, 7
  %196 = trunc i32 %195 to i16
  %197 = getelementptr inbounds i16, i16* %128, i64 %185
  store i16 %196, i16* %197, align 2
  %198 = getelementptr inbounds i16, i16* %171, i64 2
  %199 = add nuw nsw i64 %170, 2
  %200 = icmp eq i64 %199, 16
  br i1 %200, label %201, label %169, !llvm.loop !974

201:                                              ; preds = %169, %137
  %202 = phi i16* [ %138, %137 ], [ %198, %169 ]
  %203 = getelementptr inbounds i16, i16* %128, i64 16
  %204 = add nuw nsw i32 %126, 1
  %205 = icmp eq i32 %204, 16
  %206 = add i64 %125, 1
  br i1 %205, label %207, label %124

207:                                              ; preds = %201
  %208 = ptrtoint [256 x i16]* %9 to i64
  %209 = lshr exact i64 %208, 1
  %210 = inttoptr i64 %209 to i8*
  %211 = call i32 @vpx_highbd_8_variance16x16_c(i8* nonnull %210, i32 16, i8* %4, i32 %5, i32* %6)
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %11) #4
  call void @llvm.lifetime.end.p0i8(i64 544, i8* nonnull %10) #4
  ret i32 %211
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_highbd_10_sub_pixel_variance16x16_c(i8*, i32, i32, i32, i8*, i32, i32* nocapture) local_unnamed_addr #2 {
  %8 = alloca [272 x i16], align 16
  %9 = alloca [256 x i16], align 16
  %10 = bitcast [272 x i16]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 544, i8* nonnull %10) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %10, i8 -86, i64 544, i1 false)
  %11 = bitcast [256 x i16]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %11) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %11, i8 -86, i64 512, i1 false)
  %12 = getelementptr inbounds [272 x i16], [272 x i16]* %8, i64 0, i64 0
  %13 = sext i32 %2 to i64
  %14 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %13, i64 0
  %15 = ptrtoint i8* %0 to i64
  %16 = shl i64 %15, 1
  %17 = inttoptr i64 %16 to i16*
  %18 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %13, i64 1
  %19 = add i32 %1, -16
  %20 = zext i32 %19 to i64
  %21 = load i8, i8* %14, align 2
  %22 = zext i8 %21 to i32
  %23 = load i8, i8* %18, align 1
  %24 = zext i8 %23 to i32
  %25 = insertelement <8 x i32> undef, i32 %22, i32 0
  %26 = shufflevector <8 x i32> %25, <8 x i32> undef, <8 x i32> zeroinitializer
  %27 = insertelement <8 x i32> undef, i32 %24, i32 0
  %28 = shufflevector <8 x i32> %27, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %29

29:                                               ; preds = %104, %7
  %30 = phi i64 [ %110, %104 ], [ 0, %7 ]
  %31 = phi i16* [ %106, %104 ], [ %17, %7 ]
  %32 = phi i32 [ %108, %104 ], [ 0, %7 ]
  %33 = phi i16* [ %107, %104 ], [ %12, %7 ]
  %34 = shl nuw nsw i64 %30, 4
  %35 = add i64 %34, 16
  %36 = getelementptr [272 x i16], [272 x i16]* %8, i64 0, i64 %35
  %37 = getelementptr [272 x i16], [272 x i16]* %8, i64 0, i64 %34
  %38 = getelementptr i16, i16* %31, i64 17
  %39 = icmp ult i16* %37, %38
  %40 = icmp ult i16* %31, %36
  %41 = and i1 %39, %40
  br i1 %41, label %74, label %42

42:                                               ; preds = %29
  %43 = getelementptr i16, i16* %31, i64 16
  %44 = bitcast i16* %31 to <8 x i16>*
  %45 = load <8 x i16>, <8 x i16>* %44, align 2, !alias.scope !975
  %46 = zext <8 x i16> %45 to <8 x i32>
  %47 = mul nuw nsw <8 x i32> %26, %46
  %48 = getelementptr inbounds i16, i16* %31, i64 1
  %49 = bitcast i16* %48 to <8 x i16>*
  %50 = load <8 x i16>, <8 x i16>* %49, align 2, !alias.scope !975
  %51 = zext <8 x i16> %50 to <8 x i32>
  %52 = mul nuw nsw <8 x i32> %28, %51
  %53 = add nuw nsw <8 x i32> %47, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %54 = add nuw nsw <8 x i32> %53, %52
  %55 = lshr <8 x i32> %54, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %56 = trunc <8 x i32> %55 to <8 x i16>
  %57 = bitcast i16* %33 to <8 x i16>*
  store <8 x i16> %56, <8 x i16>* %57, align 2, !alias.scope !978, !noalias !975
  %58 = getelementptr i16, i16* %31, i64 8
  %59 = bitcast i16* %58 to <8 x i16>*
  %60 = load <8 x i16>, <8 x i16>* %59, align 2, !alias.scope !975
  %61 = zext <8 x i16> %60 to <8 x i32>
  %62 = mul nuw nsw <8 x i32> %26, %61
  %63 = getelementptr inbounds i16, i16* %31, i64 9
  %64 = bitcast i16* %63 to <8 x i16>*
  %65 = load <8 x i16>, <8 x i16>* %64, align 2, !alias.scope !975
  %66 = zext <8 x i16> %65 to <8 x i32>
  %67 = mul nuw nsw <8 x i32> %28, %66
  %68 = add nuw nsw <8 x i32> %62, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %69 = add nuw nsw <8 x i32> %68, %67
  %70 = lshr <8 x i32> %69, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %71 = trunc <8 x i32> %70 to <8 x i16>
  %72 = getelementptr inbounds i16, i16* %33, i64 8
  %73 = bitcast i16* %72 to <8 x i16>*
  store <8 x i16> %71, <8 x i16>* %73, align 2, !alias.scope !978, !noalias !975
  br label %104

74:                                               ; preds = %29, %74
  %75 = phi i64 [ %102, %74 ], [ 0, %29 ]
  %76 = phi i16* [ %93, %74 ], [ %31, %29 ]
  %77 = load i16, i16* %76, align 2
  %78 = zext i16 %77 to i32
  %79 = mul nuw nsw i32 %22, %78
  %80 = getelementptr inbounds i16, i16* %76, i64 1
  %81 = load i16, i16* %80, align 2
  %82 = zext i16 %81 to i32
  %83 = mul nuw nsw i32 %24, %82
  %84 = add nuw nsw i32 %79, 64
  %85 = add nuw nsw i32 %84, %83
  %86 = lshr i32 %85, 7
  %87 = trunc i32 %86 to i16
  %88 = getelementptr inbounds i16, i16* %33, i64 %75
  store i16 %87, i16* %88, align 2
  %89 = or i64 %75, 1
  %90 = load i16, i16* %80, align 2
  %91 = zext i16 %90 to i32
  %92 = mul nuw nsw i32 %22, %91
  %93 = getelementptr inbounds i16, i16* %76, i64 2
  %94 = load i16, i16* %93, align 2
  %95 = zext i16 %94 to i32
  %96 = mul nuw nsw i32 %24, %95
  %97 = add nuw nsw i32 %92, 64
  %98 = add nuw nsw i32 %97, %96
  %99 = lshr i32 %98, 7
  %100 = trunc i32 %99 to i16
  %101 = getelementptr inbounds i16, i16* %33, i64 %89
  store i16 %100, i16* %101, align 2
  %102 = add nuw nsw i64 %75, 2
  %103 = icmp eq i64 %102, 16
  br i1 %103, label %104, label %74, !llvm.loop !980

104:                                              ; preds = %74, %42
  %105 = phi i16* [ %43, %42 ], [ %93, %74 ]
  %106 = getelementptr inbounds i16, i16* %105, i64 %20
  %107 = getelementptr inbounds i16, i16* %33, i64 16
  %108 = add nuw nsw i32 %32, 1
  %109 = icmp eq i32 %108, 17
  %110 = add i64 %30, 1
  br i1 %109, label %111, label %29

111:                                              ; preds = %104
  %112 = getelementptr inbounds [256 x i16], [256 x i16]* %9, i64 0, i64 0
  %113 = sext i32 %3 to i64
  %114 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %113, i64 0
  %115 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %113, i64 1
  %116 = load i8, i8* %114, align 2
  %117 = zext i8 %116 to i32
  %118 = load i8, i8* %115, align 1
  %119 = zext i8 %118 to i32
  %120 = insertelement <8 x i32> undef, i32 %117, i32 0
  %121 = shufflevector <8 x i32> %120, <8 x i32> undef, <8 x i32> zeroinitializer
  %122 = insertelement <8 x i32> undef, i32 %119, i32 0
  %123 = shufflevector <8 x i32> %122, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %124

124:                                              ; preds = %201, %111
  %125 = phi i64 [ %206, %201 ], [ 0, %111 ]
  %126 = phi i32 [ %204, %201 ], [ 0, %111 ]
  %127 = phi i16* [ %202, %201 ], [ %12, %111 ]
  %128 = phi i16* [ %203, %201 ], [ %112, %111 ]
  %129 = shl nuw nsw i64 %125, 4
  %130 = add i64 %129, 16
  %131 = getelementptr [256 x i16], [256 x i16]* %9, i64 0, i64 %130
  %132 = getelementptr [256 x i16], [256 x i16]* %9, i64 0, i64 %129
  %133 = getelementptr i16, i16* %127, i64 32
  %134 = icmp ult i16* %132, %133
  %135 = icmp ult i16* %127, %131
  %136 = and i1 %134, %135
  br i1 %136, label %169, label %137

137:                                              ; preds = %124
  %138 = getelementptr i16, i16* %127, i64 16
  %139 = bitcast i16* %127 to <8 x i16>*
  %140 = load <8 x i16>, <8 x i16>* %139, align 2, !alias.scope !981
  %141 = zext <8 x i16> %140 to <8 x i32>
  %142 = mul nuw nsw <8 x i32> %121, %141
  %143 = getelementptr inbounds i16, i16* %127, i64 16
  %144 = bitcast i16* %143 to <8 x i16>*
  %145 = load <8 x i16>, <8 x i16>* %144, align 2, !alias.scope !981
  %146 = zext <8 x i16> %145 to <8 x i32>
  %147 = mul nuw nsw <8 x i32> %123, %146
  %148 = add nuw nsw <8 x i32> %142, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %149 = add nuw nsw <8 x i32> %148, %147
  %150 = lshr <8 x i32> %149, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %151 = trunc <8 x i32> %150 to <8 x i16>
  %152 = bitcast i16* %128 to <8 x i16>*
  store <8 x i16> %151, <8 x i16>* %152, align 2, !alias.scope !984, !noalias !981
  %153 = getelementptr i16, i16* %127, i64 8
  %154 = bitcast i16* %153 to <8 x i16>*
  %155 = load <8 x i16>, <8 x i16>* %154, align 2, !alias.scope !981
  %156 = zext <8 x i16> %155 to <8 x i32>
  %157 = mul nuw nsw <8 x i32> %121, %156
  %158 = getelementptr inbounds i16, i16* %127, i64 24
  %159 = bitcast i16* %158 to <8 x i16>*
  %160 = load <8 x i16>, <8 x i16>* %159, align 2, !alias.scope !981
  %161 = zext <8 x i16> %160 to <8 x i32>
  %162 = mul nuw nsw <8 x i32> %123, %161
  %163 = add nuw nsw <8 x i32> %157, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %164 = add nuw nsw <8 x i32> %163, %162
  %165 = lshr <8 x i32> %164, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %166 = trunc <8 x i32> %165 to <8 x i16>
  %167 = getelementptr inbounds i16, i16* %128, i64 8
  %168 = bitcast i16* %167 to <8 x i16>*
  store <8 x i16> %166, <8 x i16>* %168, align 2, !alias.scope !984, !noalias !981
  br label %201

169:                                              ; preds = %124, %169
  %170 = phi i64 [ %199, %169 ], [ 0, %124 ]
  %171 = phi i16* [ %198, %169 ], [ %127, %124 ]
  %172 = load i16, i16* %171, align 2
  %173 = zext i16 %172 to i32
  %174 = mul nuw nsw i32 %117, %173
  %175 = getelementptr inbounds i16, i16* %171, i64 16
  %176 = load i16, i16* %175, align 2
  %177 = zext i16 %176 to i32
  %178 = mul nuw nsw i32 %119, %177
  %179 = add nuw nsw i32 %174, 64
  %180 = add nuw nsw i32 %179, %178
  %181 = lshr i32 %180, 7
  %182 = trunc i32 %181 to i16
  %183 = getelementptr inbounds i16, i16* %128, i64 %170
  store i16 %182, i16* %183, align 2
  %184 = getelementptr inbounds i16, i16* %171, i64 1
  %185 = or i64 %170, 1
  %186 = load i16, i16* %184, align 2
  %187 = zext i16 %186 to i32
  %188 = mul nuw nsw i32 %117, %187
  %189 = getelementptr inbounds i16, i16* %171, i64 17
  %190 = load i16, i16* %189, align 2
  %191 = zext i16 %190 to i32
  %192 = mul nuw nsw i32 %119, %191
  %193 = add nuw nsw i32 %188, 64
  %194 = add nuw nsw i32 %193, %192
  %195 = lshr i32 %194, 7
  %196 = trunc i32 %195 to i16
  %197 = getelementptr inbounds i16, i16* %128, i64 %185
  store i16 %196, i16* %197, align 2
  %198 = getelementptr inbounds i16, i16* %171, i64 2
  %199 = add nuw nsw i64 %170, 2
  %200 = icmp eq i64 %199, 16
  br i1 %200, label %201, label %169, !llvm.loop !986

201:                                              ; preds = %169, %137
  %202 = phi i16* [ %138, %137 ], [ %198, %169 ]
  %203 = getelementptr inbounds i16, i16* %128, i64 16
  %204 = add nuw nsw i32 %126, 1
  %205 = icmp eq i32 %204, 16
  %206 = add i64 %125, 1
  br i1 %205, label %207, label %124

207:                                              ; preds = %201
  %208 = ptrtoint [256 x i16]* %9 to i64
  %209 = lshr exact i64 %208, 1
  %210 = inttoptr i64 %209 to i8*
  %211 = call i32 @vpx_highbd_10_variance16x16_c(i8* nonnull %210, i32 16, i8* %4, i32 %5, i32* %6)
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %11) #4
  call void @llvm.lifetime.end.p0i8(i64 544, i8* nonnull %10) #4
  ret i32 %211
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_highbd_12_sub_pixel_variance16x16_c(i8*, i32, i32, i32, i8*, i32, i32* nocapture) local_unnamed_addr #2 {
  %8 = alloca [272 x i16], align 16
  %9 = alloca [256 x i16], align 16
  %10 = bitcast [272 x i16]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 544, i8* nonnull %10) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %10, i8 -86, i64 544, i1 false)
  %11 = bitcast [256 x i16]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %11) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %11, i8 -86, i64 512, i1 false)
  %12 = getelementptr inbounds [272 x i16], [272 x i16]* %8, i64 0, i64 0
  %13 = sext i32 %2 to i64
  %14 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %13, i64 0
  %15 = ptrtoint i8* %0 to i64
  %16 = shl i64 %15, 1
  %17 = inttoptr i64 %16 to i16*
  %18 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %13, i64 1
  %19 = add i32 %1, -16
  %20 = zext i32 %19 to i64
  %21 = load i8, i8* %14, align 2
  %22 = zext i8 %21 to i32
  %23 = load i8, i8* %18, align 1
  %24 = zext i8 %23 to i32
  %25 = insertelement <8 x i32> undef, i32 %22, i32 0
  %26 = shufflevector <8 x i32> %25, <8 x i32> undef, <8 x i32> zeroinitializer
  %27 = insertelement <8 x i32> undef, i32 %24, i32 0
  %28 = shufflevector <8 x i32> %27, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %29

29:                                               ; preds = %104, %7
  %30 = phi i64 [ %110, %104 ], [ 0, %7 ]
  %31 = phi i16* [ %106, %104 ], [ %17, %7 ]
  %32 = phi i32 [ %108, %104 ], [ 0, %7 ]
  %33 = phi i16* [ %107, %104 ], [ %12, %7 ]
  %34 = shl nuw nsw i64 %30, 4
  %35 = add i64 %34, 16
  %36 = getelementptr [272 x i16], [272 x i16]* %8, i64 0, i64 %35
  %37 = getelementptr [272 x i16], [272 x i16]* %8, i64 0, i64 %34
  %38 = getelementptr i16, i16* %31, i64 17
  %39 = icmp ult i16* %37, %38
  %40 = icmp ult i16* %31, %36
  %41 = and i1 %39, %40
  br i1 %41, label %74, label %42

42:                                               ; preds = %29
  %43 = getelementptr i16, i16* %31, i64 16
  %44 = bitcast i16* %31 to <8 x i16>*
  %45 = load <8 x i16>, <8 x i16>* %44, align 2, !alias.scope !987
  %46 = zext <8 x i16> %45 to <8 x i32>
  %47 = mul nuw nsw <8 x i32> %26, %46
  %48 = getelementptr inbounds i16, i16* %31, i64 1
  %49 = bitcast i16* %48 to <8 x i16>*
  %50 = load <8 x i16>, <8 x i16>* %49, align 2, !alias.scope !987
  %51 = zext <8 x i16> %50 to <8 x i32>
  %52 = mul nuw nsw <8 x i32> %28, %51
  %53 = add nuw nsw <8 x i32> %47, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %54 = add nuw nsw <8 x i32> %53, %52
  %55 = lshr <8 x i32> %54, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %56 = trunc <8 x i32> %55 to <8 x i16>
  %57 = bitcast i16* %33 to <8 x i16>*
  store <8 x i16> %56, <8 x i16>* %57, align 2, !alias.scope !990, !noalias !987
  %58 = getelementptr i16, i16* %31, i64 8
  %59 = bitcast i16* %58 to <8 x i16>*
  %60 = load <8 x i16>, <8 x i16>* %59, align 2, !alias.scope !987
  %61 = zext <8 x i16> %60 to <8 x i32>
  %62 = mul nuw nsw <8 x i32> %26, %61
  %63 = getelementptr inbounds i16, i16* %31, i64 9
  %64 = bitcast i16* %63 to <8 x i16>*
  %65 = load <8 x i16>, <8 x i16>* %64, align 2, !alias.scope !987
  %66 = zext <8 x i16> %65 to <8 x i32>
  %67 = mul nuw nsw <8 x i32> %28, %66
  %68 = add nuw nsw <8 x i32> %62, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %69 = add nuw nsw <8 x i32> %68, %67
  %70 = lshr <8 x i32> %69, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %71 = trunc <8 x i32> %70 to <8 x i16>
  %72 = getelementptr inbounds i16, i16* %33, i64 8
  %73 = bitcast i16* %72 to <8 x i16>*
  store <8 x i16> %71, <8 x i16>* %73, align 2, !alias.scope !990, !noalias !987
  br label %104

74:                                               ; preds = %29, %74
  %75 = phi i64 [ %102, %74 ], [ 0, %29 ]
  %76 = phi i16* [ %93, %74 ], [ %31, %29 ]
  %77 = load i16, i16* %76, align 2
  %78 = zext i16 %77 to i32
  %79 = mul nuw nsw i32 %22, %78
  %80 = getelementptr inbounds i16, i16* %76, i64 1
  %81 = load i16, i16* %80, align 2
  %82 = zext i16 %81 to i32
  %83 = mul nuw nsw i32 %24, %82
  %84 = add nuw nsw i32 %79, 64
  %85 = add nuw nsw i32 %84, %83
  %86 = lshr i32 %85, 7
  %87 = trunc i32 %86 to i16
  %88 = getelementptr inbounds i16, i16* %33, i64 %75
  store i16 %87, i16* %88, align 2
  %89 = or i64 %75, 1
  %90 = load i16, i16* %80, align 2
  %91 = zext i16 %90 to i32
  %92 = mul nuw nsw i32 %22, %91
  %93 = getelementptr inbounds i16, i16* %76, i64 2
  %94 = load i16, i16* %93, align 2
  %95 = zext i16 %94 to i32
  %96 = mul nuw nsw i32 %24, %95
  %97 = add nuw nsw i32 %92, 64
  %98 = add nuw nsw i32 %97, %96
  %99 = lshr i32 %98, 7
  %100 = trunc i32 %99 to i16
  %101 = getelementptr inbounds i16, i16* %33, i64 %89
  store i16 %100, i16* %101, align 2
  %102 = add nuw nsw i64 %75, 2
  %103 = icmp eq i64 %102, 16
  br i1 %103, label %104, label %74, !llvm.loop !992

104:                                              ; preds = %74, %42
  %105 = phi i16* [ %43, %42 ], [ %93, %74 ]
  %106 = getelementptr inbounds i16, i16* %105, i64 %20
  %107 = getelementptr inbounds i16, i16* %33, i64 16
  %108 = add nuw nsw i32 %32, 1
  %109 = icmp eq i32 %108, 17
  %110 = add i64 %30, 1
  br i1 %109, label %111, label %29

111:                                              ; preds = %104
  %112 = getelementptr inbounds [256 x i16], [256 x i16]* %9, i64 0, i64 0
  %113 = sext i32 %3 to i64
  %114 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %113, i64 0
  %115 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %113, i64 1
  %116 = load i8, i8* %114, align 2
  %117 = zext i8 %116 to i32
  %118 = load i8, i8* %115, align 1
  %119 = zext i8 %118 to i32
  %120 = insertelement <8 x i32> undef, i32 %117, i32 0
  %121 = shufflevector <8 x i32> %120, <8 x i32> undef, <8 x i32> zeroinitializer
  %122 = insertelement <8 x i32> undef, i32 %119, i32 0
  %123 = shufflevector <8 x i32> %122, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %124

124:                                              ; preds = %201, %111
  %125 = phi i64 [ %206, %201 ], [ 0, %111 ]
  %126 = phi i32 [ %204, %201 ], [ 0, %111 ]
  %127 = phi i16* [ %202, %201 ], [ %12, %111 ]
  %128 = phi i16* [ %203, %201 ], [ %112, %111 ]
  %129 = shl nuw nsw i64 %125, 4
  %130 = add i64 %129, 16
  %131 = getelementptr [256 x i16], [256 x i16]* %9, i64 0, i64 %130
  %132 = getelementptr [256 x i16], [256 x i16]* %9, i64 0, i64 %129
  %133 = getelementptr i16, i16* %127, i64 32
  %134 = icmp ult i16* %132, %133
  %135 = icmp ult i16* %127, %131
  %136 = and i1 %134, %135
  br i1 %136, label %169, label %137

137:                                              ; preds = %124
  %138 = getelementptr i16, i16* %127, i64 16
  %139 = bitcast i16* %127 to <8 x i16>*
  %140 = load <8 x i16>, <8 x i16>* %139, align 2, !alias.scope !993
  %141 = zext <8 x i16> %140 to <8 x i32>
  %142 = mul nuw nsw <8 x i32> %121, %141
  %143 = getelementptr inbounds i16, i16* %127, i64 16
  %144 = bitcast i16* %143 to <8 x i16>*
  %145 = load <8 x i16>, <8 x i16>* %144, align 2, !alias.scope !993
  %146 = zext <8 x i16> %145 to <8 x i32>
  %147 = mul nuw nsw <8 x i32> %123, %146
  %148 = add nuw nsw <8 x i32> %142, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %149 = add nuw nsw <8 x i32> %148, %147
  %150 = lshr <8 x i32> %149, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %151 = trunc <8 x i32> %150 to <8 x i16>
  %152 = bitcast i16* %128 to <8 x i16>*
  store <8 x i16> %151, <8 x i16>* %152, align 2, !alias.scope !996, !noalias !993
  %153 = getelementptr i16, i16* %127, i64 8
  %154 = bitcast i16* %153 to <8 x i16>*
  %155 = load <8 x i16>, <8 x i16>* %154, align 2, !alias.scope !993
  %156 = zext <8 x i16> %155 to <8 x i32>
  %157 = mul nuw nsw <8 x i32> %121, %156
  %158 = getelementptr inbounds i16, i16* %127, i64 24
  %159 = bitcast i16* %158 to <8 x i16>*
  %160 = load <8 x i16>, <8 x i16>* %159, align 2, !alias.scope !993
  %161 = zext <8 x i16> %160 to <8 x i32>
  %162 = mul nuw nsw <8 x i32> %123, %161
  %163 = add nuw nsw <8 x i32> %157, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %164 = add nuw nsw <8 x i32> %163, %162
  %165 = lshr <8 x i32> %164, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %166 = trunc <8 x i32> %165 to <8 x i16>
  %167 = getelementptr inbounds i16, i16* %128, i64 8
  %168 = bitcast i16* %167 to <8 x i16>*
  store <8 x i16> %166, <8 x i16>* %168, align 2, !alias.scope !996, !noalias !993
  br label %201

169:                                              ; preds = %124, %169
  %170 = phi i64 [ %199, %169 ], [ 0, %124 ]
  %171 = phi i16* [ %198, %169 ], [ %127, %124 ]
  %172 = load i16, i16* %171, align 2
  %173 = zext i16 %172 to i32
  %174 = mul nuw nsw i32 %117, %173
  %175 = getelementptr inbounds i16, i16* %171, i64 16
  %176 = load i16, i16* %175, align 2
  %177 = zext i16 %176 to i32
  %178 = mul nuw nsw i32 %119, %177
  %179 = add nuw nsw i32 %174, 64
  %180 = add nuw nsw i32 %179, %178
  %181 = lshr i32 %180, 7
  %182 = trunc i32 %181 to i16
  %183 = getelementptr inbounds i16, i16* %128, i64 %170
  store i16 %182, i16* %183, align 2
  %184 = getelementptr inbounds i16, i16* %171, i64 1
  %185 = or i64 %170, 1
  %186 = load i16, i16* %184, align 2
  %187 = zext i16 %186 to i32
  %188 = mul nuw nsw i32 %117, %187
  %189 = getelementptr inbounds i16, i16* %171, i64 17
  %190 = load i16, i16* %189, align 2
  %191 = zext i16 %190 to i32
  %192 = mul nuw nsw i32 %119, %191
  %193 = add nuw nsw i32 %188, 64
  %194 = add nuw nsw i32 %193, %192
  %195 = lshr i32 %194, 7
  %196 = trunc i32 %195 to i16
  %197 = getelementptr inbounds i16, i16* %128, i64 %185
  store i16 %196, i16* %197, align 2
  %198 = getelementptr inbounds i16, i16* %171, i64 2
  %199 = add nuw nsw i64 %170, 2
  %200 = icmp eq i64 %199, 16
  br i1 %200, label %201, label %169, !llvm.loop !998

201:                                              ; preds = %169, %137
  %202 = phi i16* [ %138, %137 ], [ %198, %169 ]
  %203 = getelementptr inbounds i16, i16* %128, i64 16
  %204 = add nuw nsw i32 %126, 1
  %205 = icmp eq i32 %204, 16
  %206 = add i64 %125, 1
  br i1 %205, label %207, label %124

207:                                              ; preds = %201
  %208 = ptrtoint [256 x i16]* %9 to i64
  %209 = lshr exact i64 %208, 1
  %210 = inttoptr i64 %209 to i8*
  %211 = call i32 @vpx_highbd_12_variance16x16_c(i8* nonnull %210, i32 16, i8* %4, i32 %5, i32* %6)
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %11) #4
  call void @llvm.lifetime.end.p0i8(i64 544, i8* nonnull %10) #4
  ret i32 %211
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_highbd_8_sub_pixel_avg_variance16x16_c(i8*, i32, i32, i32, i8*, i32, i32* nocapture, i8*) local_unnamed_addr #2 {
  %9 = alloca [272 x i16], align 16
  %10 = alloca [256 x i16], align 16
  %11 = alloca [256 x i16], align 16
  %12 = bitcast [272 x i16]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 544, i8* nonnull %12) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %12, i8 -86, i64 544, i1 false)
  %13 = bitcast [256 x i16]* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %13) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %13, i8 -86, i64 512, i1 false)
  %14 = bitcast [256 x i16]* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %14) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %14, i8 -86, i64 512, i1 false)
  %15 = getelementptr inbounds [272 x i16], [272 x i16]* %9, i64 0, i64 0
  %16 = sext i32 %2 to i64
  %17 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %16, i64 0
  %18 = ptrtoint i8* %0 to i64
  %19 = shl i64 %18, 1
  %20 = inttoptr i64 %19 to i16*
  %21 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %16, i64 1
  %22 = add i32 %1, -16
  %23 = zext i32 %22 to i64
  %24 = load i8, i8* %17, align 2
  %25 = zext i8 %24 to i32
  %26 = load i8, i8* %21, align 1
  %27 = zext i8 %26 to i32
  %28 = insertelement <8 x i32> undef, i32 %25, i32 0
  %29 = shufflevector <8 x i32> %28, <8 x i32> undef, <8 x i32> zeroinitializer
  %30 = insertelement <8 x i32> undef, i32 %27, i32 0
  %31 = shufflevector <8 x i32> %30, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %32

32:                                               ; preds = %107, %8
  %33 = phi i64 [ %113, %107 ], [ 0, %8 ]
  %34 = phi i16* [ %109, %107 ], [ %20, %8 ]
  %35 = phi i32 [ %111, %107 ], [ 0, %8 ]
  %36 = phi i16* [ %110, %107 ], [ %15, %8 ]
  %37 = shl nuw nsw i64 %33, 4
  %38 = add i64 %37, 16
  %39 = getelementptr [272 x i16], [272 x i16]* %9, i64 0, i64 %38
  %40 = getelementptr [272 x i16], [272 x i16]* %9, i64 0, i64 %37
  %41 = getelementptr i16, i16* %34, i64 17
  %42 = icmp ult i16* %40, %41
  %43 = icmp ult i16* %34, %39
  %44 = and i1 %42, %43
  br i1 %44, label %77, label %45

45:                                               ; preds = %32
  %46 = getelementptr i16, i16* %34, i64 16
  %47 = bitcast i16* %34 to <8 x i16>*
  %48 = load <8 x i16>, <8 x i16>* %47, align 2, !alias.scope !999
  %49 = zext <8 x i16> %48 to <8 x i32>
  %50 = mul nuw nsw <8 x i32> %29, %49
  %51 = getelementptr inbounds i16, i16* %34, i64 1
  %52 = bitcast i16* %51 to <8 x i16>*
  %53 = load <8 x i16>, <8 x i16>* %52, align 2, !alias.scope !999
  %54 = zext <8 x i16> %53 to <8 x i32>
  %55 = mul nuw nsw <8 x i32> %31, %54
  %56 = add nuw nsw <8 x i32> %50, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %57 = add nuw nsw <8 x i32> %56, %55
  %58 = lshr <8 x i32> %57, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %59 = trunc <8 x i32> %58 to <8 x i16>
  %60 = bitcast i16* %36 to <8 x i16>*
  store <8 x i16> %59, <8 x i16>* %60, align 2, !alias.scope !1002, !noalias !999
  %61 = getelementptr i16, i16* %34, i64 8
  %62 = bitcast i16* %61 to <8 x i16>*
  %63 = load <8 x i16>, <8 x i16>* %62, align 2, !alias.scope !999
  %64 = zext <8 x i16> %63 to <8 x i32>
  %65 = mul nuw nsw <8 x i32> %29, %64
  %66 = getelementptr inbounds i16, i16* %34, i64 9
  %67 = bitcast i16* %66 to <8 x i16>*
  %68 = load <8 x i16>, <8 x i16>* %67, align 2, !alias.scope !999
  %69 = zext <8 x i16> %68 to <8 x i32>
  %70 = mul nuw nsw <8 x i32> %31, %69
  %71 = add nuw nsw <8 x i32> %65, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %72 = add nuw nsw <8 x i32> %71, %70
  %73 = lshr <8 x i32> %72, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %74 = trunc <8 x i32> %73 to <8 x i16>
  %75 = getelementptr inbounds i16, i16* %36, i64 8
  %76 = bitcast i16* %75 to <8 x i16>*
  store <8 x i16> %74, <8 x i16>* %76, align 2, !alias.scope !1002, !noalias !999
  br label %107

77:                                               ; preds = %32, %77
  %78 = phi i64 [ %105, %77 ], [ 0, %32 ]
  %79 = phi i16* [ %96, %77 ], [ %34, %32 ]
  %80 = load i16, i16* %79, align 2
  %81 = zext i16 %80 to i32
  %82 = mul nuw nsw i32 %25, %81
  %83 = getelementptr inbounds i16, i16* %79, i64 1
  %84 = load i16, i16* %83, align 2
  %85 = zext i16 %84 to i32
  %86 = mul nuw nsw i32 %27, %85
  %87 = add nuw nsw i32 %82, 64
  %88 = add nuw nsw i32 %87, %86
  %89 = lshr i32 %88, 7
  %90 = trunc i32 %89 to i16
  %91 = getelementptr inbounds i16, i16* %36, i64 %78
  store i16 %90, i16* %91, align 2
  %92 = or i64 %78, 1
  %93 = load i16, i16* %83, align 2
  %94 = zext i16 %93 to i32
  %95 = mul nuw nsw i32 %25, %94
  %96 = getelementptr inbounds i16, i16* %79, i64 2
  %97 = load i16, i16* %96, align 2
  %98 = zext i16 %97 to i32
  %99 = mul nuw nsw i32 %27, %98
  %100 = add nuw nsw i32 %95, 64
  %101 = add nuw nsw i32 %100, %99
  %102 = lshr i32 %101, 7
  %103 = trunc i32 %102 to i16
  %104 = getelementptr inbounds i16, i16* %36, i64 %92
  store i16 %103, i16* %104, align 2
  %105 = add nuw nsw i64 %78, 2
  %106 = icmp eq i64 %105, 16
  br i1 %106, label %107, label %77, !llvm.loop !1004

107:                                              ; preds = %77, %45
  %108 = phi i16* [ %46, %45 ], [ %96, %77 ]
  %109 = getelementptr inbounds i16, i16* %108, i64 %23
  %110 = getelementptr inbounds i16, i16* %36, i64 16
  %111 = add nuw nsw i32 %35, 1
  %112 = icmp eq i32 %111, 17
  %113 = add i64 %33, 1
  br i1 %112, label %114, label %32

114:                                              ; preds = %107
  %115 = getelementptr inbounds [256 x i16], [256 x i16]* %10, i64 0, i64 0
  %116 = sext i32 %3 to i64
  %117 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %116, i64 0
  %118 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %116, i64 1
  %119 = load i8, i8* %117, align 2
  %120 = zext i8 %119 to i32
  %121 = load i8, i8* %118, align 1
  %122 = zext i8 %121 to i32
  %123 = insertelement <8 x i32> undef, i32 %120, i32 0
  %124 = shufflevector <8 x i32> %123, <8 x i32> undef, <8 x i32> zeroinitializer
  %125 = insertelement <8 x i32> undef, i32 %122, i32 0
  %126 = shufflevector <8 x i32> %125, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %127

127:                                              ; preds = %204, %114
  %128 = phi i64 [ %209, %204 ], [ 0, %114 ]
  %129 = phi i32 [ %207, %204 ], [ 0, %114 ]
  %130 = phi i16* [ %205, %204 ], [ %15, %114 ]
  %131 = phi i16* [ %206, %204 ], [ %115, %114 ]
  %132 = shl nuw nsw i64 %128, 4
  %133 = add i64 %132, 16
  %134 = getelementptr [256 x i16], [256 x i16]* %10, i64 0, i64 %133
  %135 = getelementptr [256 x i16], [256 x i16]* %10, i64 0, i64 %132
  %136 = getelementptr i16, i16* %130, i64 32
  %137 = icmp ult i16* %135, %136
  %138 = icmp ult i16* %130, %134
  %139 = and i1 %137, %138
  br i1 %139, label %172, label %140

140:                                              ; preds = %127
  %141 = getelementptr i16, i16* %130, i64 16
  %142 = bitcast i16* %130 to <8 x i16>*
  %143 = load <8 x i16>, <8 x i16>* %142, align 2, !alias.scope !1005
  %144 = zext <8 x i16> %143 to <8 x i32>
  %145 = mul nuw nsw <8 x i32> %124, %144
  %146 = getelementptr inbounds i16, i16* %130, i64 16
  %147 = bitcast i16* %146 to <8 x i16>*
  %148 = load <8 x i16>, <8 x i16>* %147, align 2, !alias.scope !1005
  %149 = zext <8 x i16> %148 to <8 x i32>
  %150 = mul nuw nsw <8 x i32> %126, %149
  %151 = add nuw nsw <8 x i32> %145, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %152 = add nuw nsw <8 x i32> %151, %150
  %153 = lshr <8 x i32> %152, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %154 = trunc <8 x i32> %153 to <8 x i16>
  %155 = bitcast i16* %131 to <8 x i16>*
  store <8 x i16> %154, <8 x i16>* %155, align 2, !alias.scope !1008, !noalias !1005
  %156 = getelementptr i16, i16* %130, i64 8
  %157 = bitcast i16* %156 to <8 x i16>*
  %158 = load <8 x i16>, <8 x i16>* %157, align 2, !alias.scope !1005
  %159 = zext <8 x i16> %158 to <8 x i32>
  %160 = mul nuw nsw <8 x i32> %124, %159
  %161 = getelementptr inbounds i16, i16* %130, i64 24
  %162 = bitcast i16* %161 to <8 x i16>*
  %163 = load <8 x i16>, <8 x i16>* %162, align 2, !alias.scope !1005
  %164 = zext <8 x i16> %163 to <8 x i32>
  %165 = mul nuw nsw <8 x i32> %126, %164
  %166 = add nuw nsw <8 x i32> %160, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %167 = add nuw nsw <8 x i32> %166, %165
  %168 = lshr <8 x i32> %167, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %169 = trunc <8 x i32> %168 to <8 x i16>
  %170 = getelementptr inbounds i16, i16* %131, i64 8
  %171 = bitcast i16* %170 to <8 x i16>*
  store <8 x i16> %169, <8 x i16>* %171, align 2, !alias.scope !1008, !noalias !1005
  br label %204

172:                                              ; preds = %127, %172
  %173 = phi i64 [ %202, %172 ], [ 0, %127 ]
  %174 = phi i16* [ %201, %172 ], [ %130, %127 ]
  %175 = load i16, i16* %174, align 2
  %176 = zext i16 %175 to i32
  %177 = mul nuw nsw i32 %120, %176
  %178 = getelementptr inbounds i16, i16* %174, i64 16
  %179 = load i16, i16* %178, align 2
  %180 = zext i16 %179 to i32
  %181 = mul nuw nsw i32 %122, %180
  %182 = add nuw nsw i32 %177, 64
  %183 = add nuw nsw i32 %182, %181
  %184 = lshr i32 %183, 7
  %185 = trunc i32 %184 to i16
  %186 = getelementptr inbounds i16, i16* %131, i64 %173
  store i16 %185, i16* %186, align 2
  %187 = getelementptr inbounds i16, i16* %174, i64 1
  %188 = or i64 %173, 1
  %189 = load i16, i16* %187, align 2
  %190 = zext i16 %189 to i32
  %191 = mul nuw nsw i32 %120, %190
  %192 = getelementptr inbounds i16, i16* %174, i64 17
  %193 = load i16, i16* %192, align 2
  %194 = zext i16 %193 to i32
  %195 = mul nuw nsw i32 %122, %194
  %196 = add nuw nsw i32 %191, 64
  %197 = add nuw nsw i32 %196, %195
  %198 = lshr i32 %197, 7
  %199 = trunc i32 %198 to i16
  %200 = getelementptr inbounds i16, i16* %131, i64 %188
  store i16 %199, i16* %200, align 2
  %201 = getelementptr inbounds i16, i16* %174, i64 2
  %202 = add nuw nsw i64 %173, 2
  %203 = icmp eq i64 %202, 16
  br i1 %203, label %204, label %172, !llvm.loop !1010

204:                                              ; preds = %172, %140
  %205 = phi i16* [ %141, %140 ], [ %201, %172 ]
  %206 = getelementptr inbounds i16, i16* %131, i64 16
  %207 = add nuw nsw i32 %129, 1
  %208 = icmp eq i32 %207, 16
  %209 = add i64 %128, 1
  br i1 %208, label %210, label %127

210:                                              ; preds = %204
  %211 = getelementptr inbounds [256 x i16], [256 x i16]* %11, i64 0, i64 0
  %212 = ptrtoint i8* %7 to i64
  %213 = shl i64 %212, 1
  %214 = inttoptr i64 %213 to i16*
  br label %215

215:                                              ; preds = %215, %210
  %216 = phi i16* [ %211, %210 ], [ %393, %215 ]
  %217 = phi i32 [ 0, %210 ], [ %396, %215 ]
  %218 = phi i16* [ %214, %210 ], [ %394, %215 ]
  %219 = phi i16* [ %115, %210 ], [ %395, %215 ]
  %220 = load i16, i16* %218, align 2
  %221 = zext i16 %220 to i32
  %222 = load i16, i16* %219, align 2
  %223 = zext i16 %222 to i32
  %224 = add nuw nsw i32 %221, 1
  %225 = add nuw nsw i32 %224, %223
  %226 = lshr i32 %225, 1
  %227 = trunc i32 %226 to i16
  store i16 %227, i16* %216, align 2
  %228 = getelementptr inbounds i16, i16* %218, i64 1
  %229 = load i16, i16* %228, align 2
  %230 = zext i16 %229 to i32
  %231 = getelementptr inbounds i16, i16* %219, i64 1
  %232 = load i16, i16* %231, align 2
  %233 = zext i16 %232 to i32
  %234 = add nuw nsw i32 %230, 1
  %235 = add nuw nsw i32 %234, %233
  %236 = lshr i32 %235, 1
  %237 = trunc i32 %236 to i16
  %238 = getelementptr inbounds i16, i16* %216, i64 1
  store i16 %237, i16* %238, align 2
  %239 = getelementptr inbounds i16, i16* %218, i64 2
  %240 = load i16, i16* %239, align 2
  %241 = zext i16 %240 to i32
  %242 = getelementptr inbounds i16, i16* %219, i64 2
  %243 = load i16, i16* %242, align 2
  %244 = zext i16 %243 to i32
  %245 = add nuw nsw i32 %241, 1
  %246 = add nuw nsw i32 %245, %244
  %247 = lshr i32 %246, 1
  %248 = trunc i32 %247 to i16
  %249 = getelementptr inbounds i16, i16* %216, i64 2
  store i16 %248, i16* %249, align 2
  %250 = getelementptr inbounds i16, i16* %218, i64 3
  %251 = load i16, i16* %250, align 2
  %252 = zext i16 %251 to i32
  %253 = getelementptr inbounds i16, i16* %219, i64 3
  %254 = load i16, i16* %253, align 2
  %255 = zext i16 %254 to i32
  %256 = add nuw nsw i32 %252, 1
  %257 = add nuw nsw i32 %256, %255
  %258 = lshr i32 %257, 1
  %259 = trunc i32 %258 to i16
  %260 = getelementptr inbounds i16, i16* %216, i64 3
  store i16 %259, i16* %260, align 2
  %261 = getelementptr inbounds i16, i16* %218, i64 4
  %262 = load i16, i16* %261, align 2
  %263 = zext i16 %262 to i32
  %264 = getelementptr inbounds i16, i16* %219, i64 4
  %265 = load i16, i16* %264, align 2
  %266 = zext i16 %265 to i32
  %267 = add nuw nsw i32 %263, 1
  %268 = add nuw nsw i32 %267, %266
  %269 = lshr i32 %268, 1
  %270 = trunc i32 %269 to i16
  %271 = getelementptr inbounds i16, i16* %216, i64 4
  store i16 %270, i16* %271, align 2
  %272 = getelementptr inbounds i16, i16* %218, i64 5
  %273 = load i16, i16* %272, align 2
  %274 = zext i16 %273 to i32
  %275 = getelementptr inbounds i16, i16* %219, i64 5
  %276 = load i16, i16* %275, align 2
  %277 = zext i16 %276 to i32
  %278 = add nuw nsw i32 %274, 1
  %279 = add nuw nsw i32 %278, %277
  %280 = lshr i32 %279, 1
  %281 = trunc i32 %280 to i16
  %282 = getelementptr inbounds i16, i16* %216, i64 5
  store i16 %281, i16* %282, align 2
  %283 = getelementptr inbounds i16, i16* %218, i64 6
  %284 = load i16, i16* %283, align 2
  %285 = zext i16 %284 to i32
  %286 = getelementptr inbounds i16, i16* %219, i64 6
  %287 = load i16, i16* %286, align 2
  %288 = zext i16 %287 to i32
  %289 = add nuw nsw i32 %285, 1
  %290 = add nuw nsw i32 %289, %288
  %291 = lshr i32 %290, 1
  %292 = trunc i32 %291 to i16
  %293 = getelementptr inbounds i16, i16* %216, i64 6
  store i16 %292, i16* %293, align 2
  %294 = getelementptr inbounds i16, i16* %218, i64 7
  %295 = load i16, i16* %294, align 2
  %296 = zext i16 %295 to i32
  %297 = getelementptr inbounds i16, i16* %219, i64 7
  %298 = load i16, i16* %297, align 2
  %299 = zext i16 %298 to i32
  %300 = add nuw nsw i32 %296, 1
  %301 = add nuw nsw i32 %300, %299
  %302 = lshr i32 %301, 1
  %303 = trunc i32 %302 to i16
  %304 = getelementptr inbounds i16, i16* %216, i64 7
  store i16 %303, i16* %304, align 2
  %305 = getelementptr inbounds i16, i16* %218, i64 8
  %306 = load i16, i16* %305, align 2
  %307 = zext i16 %306 to i32
  %308 = getelementptr inbounds i16, i16* %219, i64 8
  %309 = load i16, i16* %308, align 2
  %310 = zext i16 %309 to i32
  %311 = add nuw nsw i32 %307, 1
  %312 = add nuw nsw i32 %311, %310
  %313 = lshr i32 %312, 1
  %314 = trunc i32 %313 to i16
  %315 = getelementptr inbounds i16, i16* %216, i64 8
  store i16 %314, i16* %315, align 2
  %316 = getelementptr inbounds i16, i16* %218, i64 9
  %317 = load i16, i16* %316, align 2
  %318 = zext i16 %317 to i32
  %319 = getelementptr inbounds i16, i16* %219, i64 9
  %320 = load i16, i16* %319, align 2
  %321 = zext i16 %320 to i32
  %322 = add nuw nsw i32 %318, 1
  %323 = add nuw nsw i32 %322, %321
  %324 = lshr i32 %323, 1
  %325 = trunc i32 %324 to i16
  %326 = getelementptr inbounds i16, i16* %216, i64 9
  store i16 %325, i16* %326, align 2
  %327 = getelementptr inbounds i16, i16* %218, i64 10
  %328 = load i16, i16* %327, align 2
  %329 = zext i16 %328 to i32
  %330 = getelementptr inbounds i16, i16* %219, i64 10
  %331 = load i16, i16* %330, align 2
  %332 = zext i16 %331 to i32
  %333 = add nuw nsw i32 %329, 1
  %334 = add nuw nsw i32 %333, %332
  %335 = lshr i32 %334, 1
  %336 = trunc i32 %335 to i16
  %337 = getelementptr inbounds i16, i16* %216, i64 10
  store i16 %336, i16* %337, align 2
  %338 = getelementptr inbounds i16, i16* %218, i64 11
  %339 = load i16, i16* %338, align 2
  %340 = zext i16 %339 to i32
  %341 = getelementptr inbounds i16, i16* %219, i64 11
  %342 = load i16, i16* %341, align 2
  %343 = zext i16 %342 to i32
  %344 = add nuw nsw i32 %340, 1
  %345 = add nuw nsw i32 %344, %343
  %346 = lshr i32 %345, 1
  %347 = trunc i32 %346 to i16
  %348 = getelementptr inbounds i16, i16* %216, i64 11
  store i16 %347, i16* %348, align 2
  %349 = getelementptr inbounds i16, i16* %218, i64 12
  %350 = load i16, i16* %349, align 2
  %351 = zext i16 %350 to i32
  %352 = getelementptr inbounds i16, i16* %219, i64 12
  %353 = load i16, i16* %352, align 2
  %354 = zext i16 %353 to i32
  %355 = add nuw nsw i32 %351, 1
  %356 = add nuw nsw i32 %355, %354
  %357 = lshr i32 %356, 1
  %358 = trunc i32 %357 to i16
  %359 = getelementptr inbounds i16, i16* %216, i64 12
  store i16 %358, i16* %359, align 2
  %360 = getelementptr inbounds i16, i16* %218, i64 13
  %361 = load i16, i16* %360, align 2
  %362 = zext i16 %361 to i32
  %363 = getelementptr inbounds i16, i16* %219, i64 13
  %364 = load i16, i16* %363, align 2
  %365 = zext i16 %364 to i32
  %366 = add nuw nsw i32 %362, 1
  %367 = add nuw nsw i32 %366, %365
  %368 = lshr i32 %367, 1
  %369 = trunc i32 %368 to i16
  %370 = getelementptr inbounds i16, i16* %216, i64 13
  store i16 %369, i16* %370, align 2
  %371 = getelementptr inbounds i16, i16* %218, i64 14
  %372 = load i16, i16* %371, align 2
  %373 = zext i16 %372 to i32
  %374 = getelementptr inbounds i16, i16* %219, i64 14
  %375 = load i16, i16* %374, align 2
  %376 = zext i16 %375 to i32
  %377 = add nuw nsw i32 %373, 1
  %378 = add nuw nsw i32 %377, %376
  %379 = lshr i32 %378, 1
  %380 = trunc i32 %379 to i16
  %381 = getelementptr inbounds i16, i16* %216, i64 14
  store i16 %380, i16* %381, align 2
  %382 = getelementptr inbounds i16, i16* %218, i64 15
  %383 = load i16, i16* %382, align 2
  %384 = zext i16 %383 to i32
  %385 = getelementptr inbounds i16, i16* %219, i64 15
  %386 = load i16, i16* %385, align 2
  %387 = zext i16 %386 to i32
  %388 = add nuw nsw i32 %384, 1
  %389 = add nuw nsw i32 %388, %387
  %390 = lshr i32 %389, 1
  %391 = trunc i32 %390 to i16
  %392 = getelementptr inbounds i16, i16* %216, i64 15
  store i16 %391, i16* %392, align 2
  %393 = getelementptr inbounds i16, i16* %216, i64 16
  %394 = getelementptr inbounds i16, i16* %218, i64 16
  %395 = getelementptr inbounds i16, i16* %219, i64 16
  %396 = add nuw nsw i32 %217, 1
  %397 = icmp eq i32 %396, 16
  br i1 %397, label %398, label %215

398:                                              ; preds = %215
  %399 = ptrtoint [256 x i16]* %11 to i64
  %400 = lshr exact i64 %399, 1
  %401 = inttoptr i64 %400 to i8*
  %402 = call i32 @vpx_highbd_8_variance16x16_c(i8* nonnull %401, i32 16, i8* %4, i32 %5, i32* %6)
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %14) #4
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %13) #4
  call void @llvm.lifetime.end.p0i8(i64 544, i8* nonnull %12) #4
  ret i32 %402
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_highbd_10_sub_pixel_avg_variance16x16_c(i8*, i32, i32, i32, i8*, i32, i32* nocapture, i8*) local_unnamed_addr #2 {
  %9 = alloca [272 x i16], align 16
  %10 = alloca [256 x i16], align 16
  %11 = alloca [256 x i16], align 16
  %12 = bitcast [272 x i16]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 544, i8* nonnull %12) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %12, i8 -86, i64 544, i1 false)
  %13 = bitcast [256 x i16]* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %13) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %13, i8 -86, i64 512, i1 false)
  %14 = bitcast [256 x i16]* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %14) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %14, i8 -86, i64 512, i1 false)
  %15 = getelementptr inbounds [272 x i16], [272 x i16]* %9, i64 0, i64 0
  %16 = sext i32 %2 to i64
  %17 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %16, i64 0
  %18 = ptrtoint i8* %0 to i64
  %19 = shl i64 %18, 1
  %20 = inttoptr i64 %19 to i16*
  %21 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %16, i64 1
  %22 = add i32 %1, -16
  %23 = zext i32 %22 to i64
  %24 = load i8, i8* %17, align 2
  %25 = zext i8 %24 to i32
  %26 = load i8, i8* %21, align 1
  %27 = zext i8 %26 to i32
  %28 = insertelement <8 x i32> undef, i32 %25, i32 0
  %29 = shufflevector <8 x i32> %28, <8 x i32> undef, <8 x i32> zeroinitializer
  %30 = insertelement <8 x i32> undef, i32 %27, i32 0
  %31 = shufflevector <8 x i32> %30, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %32

32:                                               ; preds = %107, %8
  %33 = phi i64 [ %113, %107 ], [ 0, %8 ]
  %34 = phi i16* [ %109, %107 ], [ %20, %8 ]
  %35 = phi i32 [ %111, %107 ], [ 0, %8 ]
  %36 = phi i16* [ %110, %107 ], [ %15, %8 ]
  %37 = shl nuw nsw i64 %33, 4
  %38 = add i64 %37, 16
  %39 = getelementptr [272 x i16], [272 x i16]* %9, i64 0, i64 %38
  %40 = getelementptr [272 x i16], [272 x i16]* %9, i64 0, i64 %37
  %41 = getelementptr i16, i16* %34, i64 17
  %42 = icmp ult i16* %40, %41
  %43 = icmp ult i16* %34, %39
  %44 = and i1 %42, %43
  br i1 %44, label %77, label %45

45:                                               ; preds = %32
  %46 = getelementptr i16, i16* %34, i64 16
  %47 = bitcast i16* %34 to <8 x i16>*
  %48 = load <8 x i16>, <8 x i16>* %47, align 2, !alias.scope !1011
  %49 = zext <8 x i16> %48 to <8 x i32>
  %50 = mul nuw nsw <8 x i32> %29, %49
  %51 = getelementptr inbounds i16, i16* %34, i64 1
  %52 = bitcast i16* %51 to <8 x i16>*
  %53 = load <8 x i16>, <8 x i16>* %52, align 2, !alias.scope !1011
  %54 = zext <8 x i16> %53 to <8 x i32>
  %55 = mul nuw nsw <8 x i32> %31, %54
  %56 = add nuw nsw <8 x i32> %50, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %57 = add nuw nsw <8 x i32> %56, %55
  %58 = lshr <8 x i32> %57, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %59 = trunc <8 x i32> %58 to <8 x i16>
  %60 = bitcast i16* %36 to <8 x i16>*
  store <8 x i16> %59, <8 x i16>* %60, align 2, !alias.scope !1014, !noalias !1011
  %61 = getelementptr i16, i16* %34, i64 8
  %62 = bitcast i16* %61 to <8 x i16>*
  %63 = load <8 x i16>, <8 x i16>* %62, align 2, !alias.scope !1011
  %64 = zext <8 x i16> %63 to <8 x i32>
  %65 = mul nuw nsw <8 x i32> %29, %64
  %66 = getelementptr inbounds i16, i16* %34, i64 9
  %67 = bitcast i16* %66 to <8 x i16>*
  %68 = load <8 x i16>, <8 x i16>* %67, align 2, !alias.scope !1011
  %69 = zext <8 x i16> %68 to <8 x i32>
  %70 = mul nuw nsw <8 x i32> %31, %69
  %71 = add nuw nsw <8 x i32> %65, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %72 = add nuw nsw <8 x i32> %71, %70
  %73 = lshr <8 x i32> %72, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %74 = trunc <8 x i32> %73 to <8 x i16>
  %75 = getelementptr inbounds i16, i16* %36, i64 8
  %76 = bitcast i16* %75 to <8 x i16>*
  store <8 x i16> %74, <8 x i16>* %76, align 2, !alias.scope !1014, !noalias !1011
  br label %107

77:                                               ; preds = %32, %77
  %78 = phi i64 [ %105, %77 ], [ 0, %32 ]
  %79 = phi i16* [ %96, %77 ], [ %34, %32 ]
  %80 = load i16, i16* %79, align 2
  %81 = zext i16 %80 to i32
  %82 = mul nuw nsw i32 %25, %81
  %83 = getelementptr inbounds i16, i16* %79, i64 1
  %84 = load i16, i16* %83, align 2
  %85 = zext i16 %84 to i32
  %86 = mul nuw nsw i32 %27, %85
  %87 = add nuw nsw i32 %82, 64
  %88 = add nuw nsw i32 %87, %86
  %89 = lshr i32 %88, 7
  %90 = trunc i32 %89 to i16
  %91 = getelementptr inbounds i16, i16* %36, i64 %78
  store i16 %90, i16* %91, align 2
  %92 = or i64 %78, 1
  %93 = load i16, i16* %83, align 2
  %94 = zext i16 %93 to i32
  %95 = mul nuw nsw i32 %25, %94
  %96 = getelementptr inbounds i16, i16* %79, i64 2
  %97 = load i16, i16* %96, align 2
  %98 = zext i16 %97 to i32
  %99 = mul nuw nsw i32 %27, %98
  %100 = add nuw nsw i32 %95, 64
  %101 = add nuw nsw i32 %100, %99
  %102 = lshr i32 %101, 7
  %103 = trunc i32 %102 to i16
  %104 = getelementptr inbounds i16, i16* %36, i64 %92
  store i16 %103, i16* %104, align 2
  %105 = add nuw nsw i64 %78, 2
  %106 = icmp eq i64 %105, 16
  br i1 %106, label %107, label %77, !llvm.loop !1016

107:                                              ; preds = %77, %45
  %108 = phi i16* [ %46, %45 ], [ %96, %77 ]
  %109 = getelementptr inbounds i16, i16* %108, i64 %23
  %110 = getelementptr inbounds i16, i16* %36, i64 16
  %111 = add nuw nsw i32 %35, 1
  %112 = icmp eq i32 %111, 17
  %113 = add i64 %33, 1
  br i1 %112, label %114, label %32

114:                                              ; preds = %107
  %115 = getelementptr inbounds [256 x i16], [256 x i16]* %10, i64 0, i64 0
  %116 = sext i32 %3 to i64
  %117 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %116, i64 0
  %118 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %116, i64 1
  %119 = load i8, i8* %117, align 2
  %120 = zext i8 %119 to i32
  %121 = load i8, i8* %118, align 1
  %122 = zext i8 %121 to i32
  %123 = insertelement <8 x i32> undef, i32 %120, i32 0
  %124 = shufflevector <8 x i32> %123, <8 x i32> undef, <8 x i32> zeroinitializer
  %125 = insertelement <8 x i32> undef, i32 %122, i32 0
  %126 = shufflevector <8 x i32> %125, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %127

127:                                              ; preds = %204, %114
  %128 = phi i64 [ %209, %204 ], [ 0, %114 ]
  %129 = phi i32 [ %207, %204 ], [ 0, %114 ]
  %130 = phi i16* [ %205, %204 ], [ %15, %114 ]
  %131 = phi i16* [ %206, %204 ], [ %115, %114 ]
  %132 = shl nuw nsw i64 %128, 4
  %133 = add i64 %132, 16
  %134 = getelementptr [256 x i16], [256 x i16]* %10, i64 0, i64 %133
  %135 = getelementptr [256 x i16], [256 x i16]* %10, i64 0, i64 %132
  %136 = getelementptr i16, i16* %130, i64 32
  %137 = icmp ult i16* %135, %136
  %138 = icmp ult i16* %130, %134
  %139 = and i1 %137, %138
  br i1 %139, label %172, label %140

140:                                              ; preds = %127
  %141 = getelementptr i16, i16* %130, i64 16
  %142 = bitcast i16* %130 to <8 x i16>*
  %143 = load <8 x i16>, <8 x i16>* %142, align 2, !alias.scope !1017
  %144 = zext <8 x i16> %143 to <8 x i32>
  %145 = mul nuw nsw <8 x i32> %124, %144
  %146 = getelementptr inbounds i16, i16* %130, i64 16
  %147 = bitcast i16* %146 to <8 x i16>*
  %148 = load <8 x i16>, <8 x i16>* %147, align 2, !alias.scope !1017
  %149 = zext <8 x i16> %148 to <8 x i32>
  %150 = mul nuw nsw <8 x i32> %126, %149
  %151 = add nuw nsw <8 x i32> %145, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %152 = add nuw nsw <8 x i32> %151, %150
  %153 = lshr <8 x i32> %152, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %154 = trunc <8 x i32> %153 to <8 x i16>
  %155 = bitcast i16* %131 to <8 x i16>*
  store <8 x i16> %154, <8 x i16>* %155, align 2, !alias.scope !1020, !noalias !1017
  %156 = getelementptr i16, i16* %130, i64 8
  %157 = bitcast i16* %156 to <8 x i16>*
  %158 = load <8 x i16>, <8 x i16>* %157, align 2, !alias.scope !1017
  %159 = zext <8 x i16> %158 to <8 x i32>
  %160 = mul nuw nsw <8 x i32> %124, %159
  %161 = getelementptr inbounds i16, i16* %130, i64 24
  %162 = bitcast i16* %161 to <8 x i16>*
  %163 = load <8 x i16>, <8 x i16>* %162, align 2, !alias.scope !1017
  %164 = zext <8 x i16> %163 to <8 x i32>
  %165 = mul nuw nsw <8 x i32> %126, %164
  %166 = add nuw nsw <8 x i32> %160, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %167 = add nuw nsw <8 x i32> %166, %165
  %168 = lshr <8 x i32> %167, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %169 = trunc <8 x i32> %168 to <8 x i16>
  %170 = getelementptr inbounds i16, i16* %131, i64 8
  %171 = bitcast i16* %170 to <8 x i16>*
  store <8 x i16> %169, <8 x i16>* %171, align 2, !alias.scope !1020, !noalias !1017
  br label %204

172:                                              ; preds = %127, %172
  %173 = phi i64 [ %202, %172 ], [ 0, %127 ]
  %174 = phi i16* [ %201, %172 ], [ %130, %127 ]
  %175 = load i16, i16* %174, align 2
  %176 = zext i16 %175 to i32
  %177 = mul nuw nsw i32 %120, %176
  %178 = getelementptr inbounds i16, i16* %174, i64 16
  %179 = load i16, i16* %178, align 2
  %180 = zext i16 %179 to i32
  %181 = mul nuw nsw i32 %122, %180
  %182 = add nuw nsw i32 %177, 64
  %183 = add nuw nsw i32 %182, %181
  %184 = lshr i32 %183, 7
  %185 = trunc i32 %184 to i16
  %186 = getelementptr inbounds i16, i16* %131, i64 %173
  store i16 %185, i16* %186, align 2
  %187 = getelementptr inbounds i16, i16* %174, i64 1
  %188 = or i64 %173, 1
  %189 = load i16, i16* %187, align 2
  %190 = zext i16 %189 to i32
  %191 = mul nuw nsw i32 %120, %190
  %192 = getelementptr inbounds i16, i16* %174, i64 17
  %193 = load i16, i16* %192, align 2
  %194 = zext i16 %193 to i32
  %195 = mul nuw nsw i32 %122, %194
  %196 = add nuw nsw i32 %191, 64
  %197 = add nuw nsw i32 %196, %195
  %198 = lshr i32 %197, 7
  %199 = trunc i32 %198 to i16
  %200 = getelementptr inbounds i16, i16* %131, i64 %188
  store i16 %199, i16* %200, align 2
  %201 = getelementptr inbounds i16, i16* %174, i64 2
  %202 = add nuw nsw i64 %173, 2
  %203 = icmp eq i64 %202, 16
  br i1 %203, label %204, label %172, !llvm.loop !1022

204:                                              ; preds = %172, %140
  %205 = phi i16* [ %141, %140 ], [ %201, %172 ]
  %206 = getelementptr inbounds i16, i16* %131, i64 16
  %207 = add nuw nsw i32 %129, 1
  %208 = icmp eq i32 %207, 16
  %209 = add i64 %128, 1
  br i1 %208, label %210, label %127

210:                                              ; preds = %204
  %211 = getelementptr inbounds [256 x i16], [256 x i16]* %11, i64 0, i64 0
  %212 = ptrtoint i8* %7 to i64
  %213 = shl i64 %212, 1
  %214 = inttoptr i64 %213 to i16*
  br label %215

215:                                              ; preds = %215, %210
  %216 = phi i16* [ %211, %210 ], [ %393, %215 ]
  %217 = phi i32 [ 0, %210 ], [ %396, %215 ]
  %218 = phi i16* [ %214, %210 ], [ %394, %215 ]
  %219 = phi i16* [ %115, %210 ], [ %395, %215 ]
  %220 = load i16, i16* %218, align 2
  %221 = zext i16 %220 to i32
  %222 = load i16, i16* %219, align 2
  %223 = zext i16 %222 to i32
  %224 = add nuw nsw i32 %221, 1
  %225 = add nuw nsw i32 %224, %223
  %226 = lshr i32 %225, 1
  %227 = trunc i32 %226 to i16
  store i16 %227, i16* %216, align 2
  %228 = getelementptr inbounds i16, i16* %218, i64 1
  %229 = load i16, i16* %228, align 2
  %230 = zext i16 %229 to i32
  %231 = getelementptr inbounds i16, i16* %219, i64 1
  %232 = load i16, i16* %231, align 2
  %233 = zext i16 %232 to i32
  %234 = add nuw nsw i32 %230, 1
  %235 = add nuw nsw i32 %234, %233
  %236 = lshr i32 %235, 1
  %237 = trunc i32 %236 to i16
  %238 = getelementptr inbounds i16, i16* %216, i64 1
  store i16 %237, i16* %238, align 2
  %239 = getelementptr inbounds i16, i16* %218, i64 2
  %240 = load i16, i16* %239, align 2
  %241 = zext i16 %240 to i32
  %242 = getelementptr inbounds i16, i16* %219, i64 2
  %243 = load i16, i16* %242, align 2
  %244 = zext i16 %243 to i32
  %245 = add nuw nsw i32 %241, 1
  %246 = add nuw nsw i32 %245, %244
  %247 = lshr i32 %246, 1
  %248 = trunc i32 %247 to i16
  %249 = getelementptr inbounds i16, i16* %216, i64 2
  store i16 %248, i16* %249, align 2
  %250 = getelementptr inbounds i16, i16* %218, i64 3
  %251 = load i16, i16* %250, align 2
  %252 = zext i16 %251 to i32
  %253 = getelementptr inbounds i16, i16* %219, i64 3
  %254 = load i16, i16* %253, align 2
  %255 = zext i16 %254 to i32
  %256 = add nuw nsw i32 %252, 1
  %257 = add nuw nsw i32 %256, %255
  %258 = lshr i32 %257, 1
  %259 = trunc i32 %258 to i16
  %260 = getelementptr inbounds i16, i16* %216, i64 3
  store i16 %259, i16* %260, align 2
  %261 = getelementptr inbounds i16, i16* %218, i64 4
  %262 = load i16, i16* %261, align 2
  %263 = zext i16 %262 to i32
  %264 = getelementptr inbounds i16, i16* %219, i64 4
  %265 = load i16, i16* %264, align 2
  %266 = zext i16 %265 to i32
  %267 = add nuw nsw i32 %263, 1
  %268 = add nuw nsw i32 %267, %266
  %269 = lshr i32 %268, 1
  %270 = trunc i32 %269 to i16
  %271 = getelementptr inbounds i16, i16* %216, i64 4
  store i16 %270, i16* %271, align 2
  %272 = getelementptr inbounds i16, i16* %218, i64 5
  %273 = load i16, i16* %272, align 2
  %274 = zext i16 %273 to i32
  %275 = getelementptr inbounds i16, i16* %219, i64 5
  %276 = load i16, i16* %275, align 2
  %277 = zext i16 %276 to i32
  %278 = add nuw nsw i32 %274, 1
  %279 = add nuw nsw i32 %278, %277
  %280 = lshr i32 %279, 1
  %281 = trunc i32 %280 to i16
  %282 = getelementptr inbounds i16, i16* %216, i64 5
  store i16 %281, i16* %282, align 2
  %283 = getelementptr inbounds i16, i16* %218, i64 6
  %284 = load i16, i16* %283, align 2
  %285 = zext i16 %284 to i32
  %286 = getelementptr inbounds i16, i16* %219, i64 6
  %287 = load i16, i16* %286, align 2
  %288 = zext i16 %287 to i32
  %289 = add nuw nsw i32 %285, 1
  %290 = add nuw nsw i32 %289, %288
  %291 = lshr i32 %290, 1
  %292 = trunc i32 %291 to i16
  %293 = getelementptr inbounds i16, i16* %216, i64 6
  store i16 %292, i16* %293, align 2
  %294 = getelementptr inbounds i16, i16* %218, i64 7
  %295 = load i16, i16* %294, align 2
  %296 = zext i16 %295 to i32
  %297 = getelementptr inbounds i16, i16* %219, i64 7
  %298 = load i16, i16* %297, align 2
  %299 = zext i16 %298 to i32
  %300 = add nuw nsw i32 %296, 1
  %301 = add nuw nsw i32 %300, %299
  %302 = lshr i32 %301, 1
  %303 = trunc i32 %302 to i16
  %304 = getelementptr inbounds i16, i16* %216, i64 7
  store i16 %303, i16* %304, align 2
  %305 = getelementptr inbounds i16, i16* %218, i64 8
  %306 = load i16, i16* %305, align 2
  %307 = zext i16 %306 to i32
  %308 = getelementptr inbounds i16, i16* %219, i64 8
  %309 = load i16, i16* %308, align 2
  %310 = zext i16 %309 to i32
  %311 = add nuw nsw i32 %307, 1
  %312 = add nuw nsw i32 %311, %310
  %313 = lshr i32 %312, 1
  %314 = trunc i32 %313 to i16
  %315 = getelementptr inbounds i16, i16* %216, i64 8
  store i16 %314, i16* %315, align 2
  %316 = getelementptr inbounds i16, i16* %218, i64 9
  %317 = load i16, i16* %316, align 2
  %318 = zext i16 %317 to i32
  %319 = getelementptr inbounds i16, i16* %219, i64 9
  %320 = load i16, i16* %319, align 2
  %321 = zext i16 %320 to i32
  %322 = add nuw nsw i32 %318, 1
  %323 = add nuw nsw i32 %322, %321
  %324 = lshr i32 %323, 1
  %325 = trunc i32 %324 to i16
  %326 = getelementptr inbounds i16, i16* %216, i64 9
  store i16 %325, i16* %326, align 2
  %327 = getelementptr inbounds i16, i16* %218, i64 10
  %328 = load i16, i16* %327, align 2
  %329 = zext i16 %328 to i32
  %330 = getelementptr inbounds i16, i16* %219, i64 10
  %331 = load i16, i16* %330, align 2
  %332 = zext i16 %331 to i32
  %333 = add nuw nsw i32 %329, 1
  %334 = add nuw nsw i32 %333, %332
  %335 = lshr i32 %334, 1
  %336 = trunc i32 %335 to i16
  %337 = getelementptr inbounds i16, i16* %216, i64 10
  store i16 %336, i16* %337, align 2
  %338 = getelementptr inbounds i16, i16* %218, i64 11
  %339 = load i16, i16* %338, align 2
  %340 = zext i16 %339 to i32
  %341 = getelementptr inbounds i16, i16* %219, i64 11
  %342 = load i16, i16* %341, align 2
  %343 = zext i16 %342 to i32
  %344 = add nuw nsw i32 %340, 1
  %345 = add nuw nsw i32 %344, %343
  %346 = lshr i32 %345, 1
  %347 = trunc i32 %346 to i16
  %348 = getelementptr inbounds i16, i16* %216, i64 11
  store i16 %347, i16* %348, align 2
  %349 = getelementptr inbounds i16, i16* %218, i64 12
  %350 = load i16, i16* %349, align 2
  %351 = zext i16 %350 to i32
  %352 = getelementptr inbounds i16, i16* %219, i64 12
  %353 = load i16, i16* %352, align 2
  %354 = zext i16 %353 to i32
  %355 = add nuw nsw i32 %351, 1
  %356 = add nuw nsw i32 %355, %354
  %357 = lshr i32 %356, 1
  %358 = trunc i32 %357 to i16
  %359 = getelementptr inbounds i16, i16* %216, i64 12
  store i16 %358, i16* %359, align 2
  %360 = getelementptr inbounds i16, i16* %218, i64 13
  %361 = load i16, i16* %360, align 2
  %362 = zext i16 %361 to i32
  %363 = getelementptr inbounds i16, i16* %219, i64 13
  %364 = load i16, i16* %363, align 2
  %365 = zext i16 %364 to i32
  %366 = add nuw nsw i32 %362, 1
  %367 = add nuw nsw i32 %366, %365
  %368 = lshr i32 %367, 1
  %369 = trunc i32 %368 to i16
  %370 = getelementptr inbounds i16, i16* %216, i64 13
  store i16 %369, i16* %370, align 2
  %371 = getelementptr inbounds i16, i16* %218, i64 14
  %372 = load i16, i16* %371, align 2
  %373 = zext i16 %372 to i32
  %374 = getelementptr inbounds i16, i16* %219, i64 14
  %375 = load i16, i16* %374, align 2
  %376 = zext i16 %375 to i32
  %377 = add nuw nsw i32 %373, 1
  %378 = add nuw nsw i32 %377, %376
  %379 = lshr i32 %378, 1
  %380 = trunc i32 %379 to i16
  %381 = getelementptr inbounds i16, i16* %216, i64 14
  store i16 %380, i16* %381, align 2
  %382 = getelementptr inbounds i16, i16* %218, i64 15
  %383 = load i16, i16* %382, align 2
  %384 = zext i16 %383 to i32
  %385 = getelementptr inbounds i16, i16* %219, i64 15
  %386 = load i16, i16* %385, align 2
  %387 = zext i16 %386 to i32
  %388 = add nuw nsw i32 %384, 1
  %389 = add nuw nsw i32 %388, %387
  %390 = lshr i32 %389, 1
  %391 = trunc i32 %390 to i16
  %392 = getelementptr inbounds i16, i16* %216, i64 15
  store i16 %391, i16* %392, align 2
  %393 = getelementptr inbounds i16, i16* %216, i64 16
  %394 = getelementptr inbounds i16, i16* %218, i64 16
  %395 = getelementptr inbounds i16, i16* %219, i64 16
  %396 = add nuw nsw i32 %217, 1
  %397 = icmp eq i32 %396, 16
  br i1 %397, label %398, label %215

398:                                              ; preds = %215
  %399 = ptrtoint [256 x i16]* %11 to i64
  %400 = lshr exact i64 %399, 1
  %401 = inttoptr i64 %400 to i8*
  %402 = call i32 @vpx_highbd_10_variance16x16_c(i8* nonnull %401, i32 16, i8* %4, i32 %5, i32* %6)
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %14) #4
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %13) #4
  call void @llvm.lifetime.end.p0i8(i64 544, i8* nonnull %12) #4
  ret i32 %402
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_highbd_12_sub_pixel_avg_variance16x16_c(i8*, i32, i32, i32, i8*, i32, i32* nocapture, i8*) local_unnamed_addr #2 {
  %9 = alloca [272 x i16], align 16
  %10 = alloca [256 x i16], align 16
  %11 = alloca [256 x i16], align 16
  %12 = bitcast [272 x i16]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 544, i8* nonnull %12) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %12, i8 -86, i64 544, i1 false)
  %13 = bitcast [256 x i16]* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %13) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %13, i8 -86, i64 512, i1 false)
  %14 = bitcast [256 x i16]* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %14) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %14, i8 -86, i64 512, i1 false)
  %15 = getelementptr inbounds [272 x i16], [272 x i16]* %9, i64 0, i64 0
  %16 = sext i32 %2 to i64
  %17 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %16, i64 0
  %18 = ptrtoint i8* %0 to i64
  %19 = shl i64 %18, 1
  %20 = inttoptr i64 %19 to i16*
  %21 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %16, i64 1
  %22 = add i32 %1, -16
  %23 = zext i32 %22 to i64
  %24 = load i8, i8* %17, align 2
  %25 = zext i8 %24 to i32
  %26 = load i8, i8* %21, align 1
  %27 = zext i8 %26 to i32
  %28 = insertelement <8 x i32> undef, i32 %25, i32 0
  %29 = shufflevector <8 x i32> %28, <8 x i32> undef, <8 x i32> zeroinitializer
  %30 = insertelement <8 x i32> undef, i32 %27, i32 0
  %31 = shufflevector <8 x i32> %30, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %32

32:                                               ; preds = %107, %8
  %33 = phi i64 [ %113, %107 ], [ 0, %8 ]
  %34 = phi i16* [ %109, %107 ], [ %20, %8 ]
  %35 = phi i32 [ %111, %107 ], [ 0, %8 ]
  %36 = phi i16* [ %110, %107 ], [ %15, %8 ]
  %37 = shl nuw nsw i64 %33, 4
  %38 = add i64 %37, 16
  %39 = getelementptr [272 x i16], [272 x i16]* %9, i64 0, i64 %38
  %40 = getelementptr [272 x i16], [272 x i16]* %9, i64 0, i64 %37
  %41 = getelementptr i16, i16* %34, i64 17
  %42 = icmp ult i16* %40, %41
  %43 = icmp ult i16* %34, %39
  %44 = and i1 %42, %43
  br i1 %44, label %77, label %45

45:                                               ; preds = %32
  %46 = getelementptr i16, i16* %34, i64 16
  %47 = bitcast i16* %34 to <8 x i16>*
  %48 = load <8 x i16>, <8 x i16>* %47, align 2, !alias.scope !1023
  %49 = zext <8 x i16> %48 to <8 x i32>
  %50 = mul nuw nsw <8 x i32> %29, %49
  %51 = getelementptr inbounds i16, i16* %34, i64 1
  %52 = bitcast i16* %51 to <8 x i16>*
  %53 = load <8 x i16>, <8 x i16>* %52, align 2, !alias.scope !1023
  %54 = zext <8 x i16> %53 to <8 x i32>
  %55 = mul nuw nsw <8 x i32> %31, %54
  %56 = add nuw nsw <8 x i32> %50, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %57 = add nuw nsw <8 x i32> %56, %55
  %58 = lshr <8 x i32> %57, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %59 = trunc <8 x i32> %58 to <8 x i16>
  %60 = bitcast i16* %36 to <8 x i16>*
  store <8 x i16> %59, <8 x i16>* %60, align 2, !alias.scope !1026, !noalias !1023
  %61 = getelementptr i16, i16* %34, i64 8
  %62 = bitcast i16* %61 to <8 x i16>*
  %63 = load <8 x i16>, <8 x i16>* %62, align 2, !alias.scope !1023
  %64 = zext <8 x i16> %63 to <8 x i32>
  %65 = mul nuw nsw <8 x i32> %29, %64
  %66 = getelementptr inbounds i16, i16* %34, i64 9
  %67 = bitcast i16* %66 to <8 x i16>*
  %68 = load <8 x i16>, <8 x i16>* %67, align 2, !alias.scope !1023
  %69 = zext <8 x i16> %68 to <8 x i32>
  %70 = mul nuw nsw <8 x i32> %31, %69
  %71 = add nuw nsw <8 x i32> %65, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %72 = add nuw nsw <8 x i32> %71, %70
  %73 = lshr <8 x i32> %72, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %74 = trunc <8 x i32> %73 to <8 x i16>
  %75 = getelementptr inbounds i16, i16* %36, i64 8
  %76 = bitcast i16* %75 to <8 x i16>*
  store <8 x i16> %74, <8 x i16>* %76, align 2, !alias.scope !1026, !noalias !1023
  br label %107

77:                                               ; preds = %32, %77
  %78 = phi i64 [ %105, %77 ], [ 0, %32 ]
  %79 = phi i16* [ %96, %77 ], [ %34, %32 ]
  %80 = load i16, i16* %79, align 2
  %81 = zext i16 %80 to i32
  %82 = mul nuw nsw i32 %25, %81
  %83 = getelementptr inbounds i16, i16* %79, i64 1
  %84 = load i16, i16* %83, align 2
  %85 = zext i16 %84 to i32
  %86 = mul nuw nsw i32 %27, %85
  %87 = add nuw nsw i32 %82, 64
  %88 = add nuw nsw i32 %87, %86
  %89 = lshr i32 %88, 7
  %90 = trunc i32 %89 to i16
  %91 = getelementptr inbounds i16, i16* %36, i64 %78
  store i16 %90, i16* %91, align 2
  %92 = or i64 %78, 1
  %93 = load i16, i16* %83, align 2
  %94 = zext i16 %93 to i32
  %95 = mul nuw nsw i32 %25, %94
  %96 = getelementptr inbounds i16, i16* %79, i64 2
  %97 = load i16, i16* %96, align 2
  %98 = zext i16 %97 to i32
  %99 = mul nuw nsw i32 %27, %98
  %100 = add nuw nsw i32 %95, 64
  %101 = add nuw nsw i32 %100, %99
  %102 = lshr i32 %101, 7
  %103 = trunc i32 %102 to i16
  %104 = getelementptr inbounds i16, i16* %36, i64 %92
  store i16 %103, i16* %104, align 2
  %105 = add nuw nsw i64 %78, 2
  %106 = icmp eq i64 %105, 16
  br i1 %106, label %107, label %77, !llvm.loop !1028

107:                                              ; preds = %77, %45
  %108 = phi i16* [ %46, %45 ], [ %96, %77 ]
  %109 = getelementptr inbounds i16, i16* %108, i64 %23
  %110 = getelementptr inbounds i16, i16* %36, i64 16
  %111 = add nuw nsw i32 %35, 1
  %112 = icmp eq i32 %111, 17
  %113 = add i64 %33, 1
  br i1 %112, label %114, label %32

114:                                              ; preds = %107
  %115 = getelementptr inbounds [256 x i16], [256 x i16]* %10, i64 0, i64 0
  %116 = sext i32 %3 to i64
  %117 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %116, i64 0
  %118 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %116, i64 1
  %119 = load i8, i8* %117, align 2
  %120 = zext i8 %119 to i32
  %121 = load i8, i8* %118, align 1
  %122 = zext i8 %121 to i32
  %123 = insertelement <8 x i32> undef, i32 %120, i32 0
  %124 = shufflevector <8 x i32> %123, <8 x i32> undef, <8 x i32> zeroinitializer
  %125 = insertelement <8 x i32> undef, i32 %122, i32 0
  %126 = shufflevector <8 x i32> %125, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %127

127:                                              ; preds = %204, %114
  %128 = phi i64 [ %209, %204 ], [ 0, %114 ]
  %129 = phi i32 [ %207, %204 ], [ 0, %114 ]
  %130 = phi i16* [ %205, %204 ], [ %15, %114 ]
  %131 = phi i16* [ %206, %204 ], [ %115, %114 ]
  %132 = shl nuw nsw i64 %128, 4
  %133 = add i64 %132, 16
  %134 = getelementptr [256 x i16], [256 x i16]* %10, i64 0, i64 %133
  %135 = getelementptr [256 x i16], [256 x i16]* %10, i64 0, i64 %132
  %136 = getelementptr i16, i16* %130, i64 32
  %137 = icmp ult i16* %135, %136
  %138 = icmp ult i16* %130, %134
  %139 = and i1 %137, %138
  br i1 %139, label %172, label %140

140:                                              ; preds = %127
  %141 = getelementptr i16, i16* %130, i64 16
  %142 = bitcast i16* %130 to <8 x i16>*
  %143 = load <8 x i16>, <8 x i16>* %142, align 2, !alias.scope !1029
  %144 = zext <8 x i16> %143 to <8 x i32>
  %145 = mul nuw nsw <8 x i32> %124, %144
  %146 = getelementptr inbounds i16, i16* %130, i64 16
  %147 = bitcast i16* %146 to <8 x i16>*
  %148 = load <8 x i16>, <8 x i16>* %147, align 2, !alias.scope !1029
  %149 = zext <8 x i16> %148 to <8 x i32>
  %150 = mul nuw nsw <8 x i32> %126, %149
  %151 = add nuw nsw <8 x i32> %145, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %152 = add nuw nsw <8 x i32> %151, %150
  %153 = lshr <8 x i32> %152, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %154 = trunc <8 x i32> %153 to <8 x i16>
  %155 = bitcast i16* %131 to <8 x i16>*
  store <8 x i16> %154, <8 x i16>* %155, align 2, !alias.scope !1032, !noalias !1029
  %156 = getelementptr i16, i16* %130, i64 8
  %157 = bitcast i16* %156 to <8 x i16>*
  %158 = load <8 x i16>, <8 x i16>* %157, align 2, !alias.scope !1029
  %159 = zext <8 x i16> %158 to <8 x i32>
  %160 = mul nuw nsw <8 x i32> %124, %159
  %161 = getelementptr inbounds i16, i16* %130, i64 24
  %162 = bitcast i16* %161 to <8 x i16>*
  %163 = load <8 x i16>, <8 x i16>* %162, align 2, !alias.scope !1029
  %164 = zext <8 x i16> %163 to <8 x i32>
  %165 = mul nuw nsw <8 x i32> %126, %164
  %166 = add nuw nsw <8 x i32> %160, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %167 = add nuw nsw <8 x i32> %166, %165
  %168 = lshr <8 x i32> %167, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %169 = trunc <8 x i32> %168 to <8 x i16>
  %170 = getelementptr inbounds i16, i16* %131, i64 8
  %171 = bitcast i16* %170 to <8 x i16>*
  store <8 x i16> %169, <8 x i16>* %171, align 2, !alias.scope !1032, !noalias !1029
  br label %204

172:                                              ; preds = %127, %172
  %173 = phi i64 [ %202, %172 ], [ 0, %127 ]
  %174 = phi i16* [ %201, %172 ], [ %130, %127 ]
  %175 = load i16, i16* %174, align 2
  %176 = zext i16 %175 to i32
  %177 = mul nuw nsw i32 %120, %176
  %178 = getelementptr inbounds i16, i16* %174, i64 16
  %179 = load i16, i16* %178, align 2
  %180 = zext i16 %179 to i32
  %181 = mul nuw nsw i32 %122, %180
  %182 = add nuw nsw i32 %177, 64
  %183 = add nuw nsw i32 %182, %181
  %184 = lshr i32 %183, 7
  %185 = trunc i32 %184 to i16
  %186 = getelementptr inbounds i16, i16* %131, i64 %173
  store i16 %185, i16* %186, align 2
  %187 = getelementptr inbounds i16, i16* %174, i64 1
  %188 = or i64 %173, 1
  %189 = load i16, i16* %187, align 2
  %190 = zext i16 %189 to i32
  %191 = mul nuw nsw i32 %120, %190
  %192 = getelementptr inbounds i16, i16* %174, i64 17
  %193 = load i16, i16* %192, align 2
  %194 = zext i16 %193 to i32
  %195 = mul nuw nsw i32 %122, %194
  %196 = add nuw nsw i32 %191, 64
  %197 = add nuw nsw i32 %196, %195
  %198 = lshr i32 %197, 7
  %199 = trunc i32 %198 to i16
  %200 = getelementptr inbounds i16, i16* %131, i64 %188
  store i16 %199, i16* %200, align 2
  %201 = getelementptr inbounds i16, i16* %174, i64 2
  %202 = add nuw nsw i64 %173, 2
  %203 = icmp eq i64 %202, 16
  br i1 %203, label %204, label %172, !llvm.loop !1034

204:                                              ; preds = %172, %140
  %205 = phi i16* [ %141, %140 ], [ %201, %172 ]
  %206 = getelementptr inbounds i16, i16* %131, i64 16
  %207 = add nuw nsw i32 %129, 1
  %208 = icmp eq i32 %207, 16
  %209 = add i64 %128, 1
  br i1 %208, label %210, label %127

210:                                              ; preds = %204
  %211 = getelementptr inbounds [256 x i16], [256 x i16]* %11, i64 0, i64 0
  %212 = ptrtoint i8* %7 to i64
  %213 = shl i64 %212, 1
  %214 = inttoptr i64 %213 to i16*
  br label %215

215:                                              ; preds = %215, %210
  %216 = phi i16* [ %211, %210 ], [ %393, %215 ]
  %217 = phi i32 [ 0, %210 ], [ %396, %215 ]
  %218 = phi i16* [ %214, %210 ], [ %394, %215 ]
  %219 = phi i16* [ %115, %210 ], [ %395, %215 ]
  %220 = load i16, i16* %218, align 2
  %221 = zext i16 %220 to i32
  %222 = load i16, i16* %219, align 2
  %223 = zext i16 %222 to i32
  %224 = add nuw nsw i32 %221, 1
  %225 = add nuw nsw i32 %224, %223
  %226 = lshr i32 %225, 1
  %227 = trunc i32 %226 to i16
  store i16 %227, i16* %216, align 2
  %228 = getelementptr inbounds i16, i16* %218, i64 1
  %229 = load i16, i16* %228, align 2
  %230 = zext i16 %229 to i32
  %231 = getelementptr inbounds i16, i16* %219, i64 1
  %232 = load i16, i16* %231, align 2
  %233 = zext i16 %232 to i32
  %234 = add nuw nsw i32 %230, 1
  %235 = add nuw nsw i32 %234, %233
  %236 = lshr i32 %235, 1
  %237 = trunc i32 %236 to i16
  %238 = getelementptr inbounds i16, i16* %216, i64 1
  store i16 %237, i16* %238, align 2
  %239 = getelementptr inbounds i16, i16* %218, i64 2
  %240 = load i16, i16* %239, align 2
  %241 = zext i16 %240 to i32
  %242 = getelementptr inbounds i16, i16* %219, i64 2
  %243 = load i16, i16* %242, align 2
  %244 = zext i16 %243 to i32
  %245 = add nuw nsw i32 %241, 1
  %246 = add nuw nsw i32 %245, %244
  %247 = lshr i32 %246, 1
  %248 = trunc i32 %247 to i16
  %249 = getelementptr inbounds i16, i16* %216, i64 2
  store i16 %248, i16* %249, align 2
  %250 = getelementptr inbounds i16, i16* %218, i64 3
  %251 = load i16, i16* %250, align 2
  %252 = zext i16 %251 to i32
  %253 = getelementptr inbounds i16, i16* %219, i64 3
  %254 = load i16, i16* %253, align 2
  %255 = zext i16 %254 to i32
  %256 = add nuw nsw i32 %252, 1
  %257 = add nuw nsw i32 %256, %255
  %258 = lshr i32 %257, 1
  %259 = trunc i32 %258 to i16
  %260 = getelementptr inbounds i16, i16* %216, i64 3
  store i16 %259, i16* %260, align 2
  %261 = getelementptr inbounds i16, i16* %218, i64 4
  %262 = load i16, i16* %261, align 2
  %263 = zext i16 %262 to i32
  %264 = getelementptr inbounds i16, i16* %219, i64 4
  %265 = load i16, i16* %264, align 2
  %266 = zext i16 %265 to i32
  %267 = add nuw nsw i32 %263, 1
  %268 = add nuw nsw i32 %267, %266
  %269 = lshr i32 %268, 1
  %270 = trunc i32 %269 to i16
  %271 = getelementptr inbounds i16, i16* %216, i64 4
  store i16 %270, i16* %271, align 2
  %272 = getelementptr inbounds i16, i16* %218, i64 5
  %273 = load i16, i16* %272, align 2
  %274 = zext i16 %273 to i32
  %275 = getelementptr inbounds i16, i16* %219, i64 5
  %276 = load i16, i16* %275, align 2
  %277 = zext i16 %276 to i32
  %278 = add nuw nsw i32 %274, 1
  %279 = add nuw nsw i32 %278, %277
  %280 = lshr i32 %279, 1
  %281 = trunc i32 %280 to i16
  %282 = getelementptr inbounds i16, i16* %216, i64 5
  store i16 %281, i16* %282, align 2
  %283 = getelementptr inbounds i16, i16* %218, i64 6
  %284 = load i16, i16* %283, align 2
  %285 = zext i16 %284 to i32
  %286 = getelementptr inbounds i16, i16* %219, i64 6
  %287 = load i16, i16* %286, align 2
  %288 = zext i16 %287 to i32
  %289 = add nuw nsw i32 %285, 1
  %290 = add nuw nsw i32 %289, %288
  %291 = lshr i32 %290, 1
  %292 = trunc i32 %291 to i16
  %293 = getelementptr inbounds i16, i16* %216, i64 6
  store i16 %292, i16* %293, align 2
  %294 = getelementptr inbounds i16, i16* %218, i64 7
  %295 = load i16, i16* %294, align 2
  %296 = zext i16 %295 to i32
  %297 = getelementptr inbounds i16, i16* %219, i64 7
  %298 = load i16, i16* %297, align 2
  %299 = zext i16 %298 to i32
  %300 = add nuw nsw i32 %296, 1
  %301 = add nuw nsw i32 %300, %299
  %302 = lshr i32 %301, 1
  %303 = trunc i32 %302 to i16
  %304 = getelementptr inbounds i16, i16* %216, i64 7
  store i16 %303, i16* %304, align 2
  %305 = getelementptr inbounds i16, i16* %218, i64 8
  %306 = load i16, i16* %305, align 2
  %307 = zext i16 %306 to i32
  %308 = getelementptr inbounds i16, i16* %219, i64 8
  %309 = load i16, i16* %308, align 2
  %310 = zext i16 %309 to i32
  %311 = add nuw nsw i32 %307, 1
  %312 = add nuw nsw i32 %311, %310
  %313 = lshr i32 %312, 1
  %314 = trunc i32 %313 to i16
  %315 = getelementptr inbounds i16, i16* %216, i64 8
  store i16 %314, i16* %315, align 2
  %316 = getelementptr inbounds i16, i16* %218, i64 9
  %317 = load i16, i16* %316, align 2
  %318 = zext i16 %317 to i32
  %319 = getelementptr inbounds i16, i16* %219, i64 9
  %320 = load i16, i16* %319, align 2
  %321 = zext i16 %320 to i32
  %322 = add nuw nsw i32 %318, 1
  %323 = add nuw nsw i32 %322, %321
  %324 = lshr i32 %323, 1
  %325 = trunc i32 %324 to i16
  %326 = getelementptr inbounds i16, i16* %216, i64 9
  store i16 %325, i16* %326, align 2
  %327 = getelementptr inbounds i16, i16* %218, i64 10
  %328 = load i16, i16* %327, align 2
  %329 = zext i16 %328 to i32
  %330 = getelementptr inbounds i16, i16* %219, i64 10
  %331 = load i16, i16* %330, align 2
  %332 = zext i16 %331 to i32
  %333 = add nuw nsw i32 %329, 1
  %334 = add nuw nsw i32 %333, %332
  %335 = lshr i32 %334, 1
  %336 = trunc i32 %335 to i16
  %337 = getelementptr inbounds i16, i16* %216, i64 10
  store i16 %336, i16* %337, align 2
  %338 = getelementptr inbounds i16, i16* %218, i64 11
  %339 = load i16, i16* %338, align 2
  %340 = zext i16 %339 to i32
  %341 = getelementptr inbounds i16, i16* %219, i64 11
  %342 = load i16, i16* %341, align 2
  %343 = zext i16 %342 to i32
  %344 = add nuw nsw i32 %340, 1
  %345 = add nuw nsw i32 %344, %343
  %346 = lshr i32 %345, 1
  %347 = trunc i32 %346 to i16
  %348 = getelementptr inbounds i16, i16* %216, i64 11
  store i16 %347, i16* %348, align 2
  %349 = getelementptr inbounds i16, i16* %218, i64 12
  %350 = load i16, i16* %349, align 2
  %351 = zext i16 %350 to i32
  %352 = getelementptr inbounds i16, i16* %219, i64 12
  %353 = load i16, i16* %352, align 2
  %354 = zext i16 %353 to i32
  %355 = add nuw nsw i32 %351, 1
  %356 = add nuw nsw i32 %355, %354
  %357 = lshr i32 %356, 1
  %358 = trunc i32 %357 to i16
  %359 = getelementptr inbounds i16, i16* %216, i64 12
  store i16 %358, i16* %359, align 2
  %360 = getelementptr inbounds i16, i16* %218, i64 13
  %361 = load i16, i16* %360, align 2
  %362 = zext i16 %361 to i32
  %363 = getelementptr inbounds i16, i16* %219, i64 13
  %364 = load i16, i16* %363, align 2
  %365 = zext i16 %364 to i32
  %366 = add nuw nsw i32 %362, 1
  %367 = add nuw nsw i32 %366, %365
  %368 = lshr i32 %367, 1
  %369 = trunc i32 %368 to i16
  %370 = getelementptr inbounds i16, i16* %216, i64 13
  store i16 %369, i16* %370, align 2
  %371 = getelementptr inbounds i16, i16* %218, i64 14
  %372 = load i16, i16* %371, align 2
  %373 = zext i16 %372 to i32
  %374 = getelementptr inbounds i16, i16* %219, i64 14
  %375 = load i16, i16* %374, align 2
  %376 = zext i16 %375 to i32
  %377 = add nuw nsw i32 %373, 1
  %378 = add nuw nsw i32 %377, %376
  %379 = lshr i32 %378, 1
  %380 = trunc i32 %379 to i16
  %381 = getelementptr inbounds i16, i16* %216, i64 14
  store i16 %380, i16* %381, align 2
  %382 = getelementptr inbounds i16, i16* %218, i64 15
  %383 = load i16, i16* %382, align 2
  %384 = zext i16 %383 to i32
  %385 = getelementptr inbounds i16, i16* %219, i64 15
  %386 = load i16, i16* %385, align 2
  %387 = zext i16 %386 to i32
  %388 = add nuw nsw i32 %384, 1
  %389 = add nuw nsw i32 %388, %387
  %390 = lshr i32 %389, 1
  %391 = trunc i32 %390 to i16
  %392 = getelementptr inbounds i16, i16* %216, i64 15
  store i16 %391, i16* %392, align 2
  %393 = getelementptr inbounds i16, i16* %216, i64 16
  %394 = getelementptr inbounds i16, i16* %218, i64 16
  %395 = getelementptr inbounds i16, i16* %219, i64 16
  %396 = add nuw nsw i32 %217, 1
  %397 = icmp eq i32 %396, 16
  br i1 %397, label %398, label %215

398:                                              ; preds = %215
  %399 = ptrtoint [256 x i16]* %11 to i64
  %400 = lshr exact i64 %399, 1
  %401 = inttoptr i64 %400 to i8*
  %402 = call i32 @vpx_highbd_12_variance16x16_c(i8* nonnull %401, i32 16, i8* %4, i32 %5, i32* %6)
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %14) #4
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %13) #4
  call void @llvm.lifetime.end.p0i8(i64 544, i8* nonnull %12) #4
  ret i32 %402
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_highbd_8_variance16x8_c(i8*, i32, i8*, i32, i32* nocapture) local_unnamed_addr #2 {
  %6 = ptrtoint i8* %2 to i64
  %7 = shl i64 %6, 1
  %8 = inttoptr i64 %7 to i16*
  %9 = ptrtoint i8* %0 to i64
  %10 = shl i64 %9, 1
  %11 = inttoptr i64 %10 to i16*
  %12 = sext i32 %1 to i64
  %13 = sext i32 %3 to i64
  br label %14

14:                                               ; preds = %14, %5
  %15 = phi i64 [ 0, %5 ], [ %101, %14 ]
  %16 = phi i64 [ 0, %5 ], [ %97, %14 ]
  %17 = phi i32 [ 0, %5 ], [ %104, %14 ]
  %18 = phi i16* [ %8, %5 ], [ %103, %14 ]
  %19 = phi i16* [ %11, %5 ], [ %102, %14 ]
  %20 = bitcast i16* %19 to <16 x i16>*
  %21 = load <16 x i16>, <16 x i16>* %20, align 2
  %22 = zext <16 x i16> %21 to <16 x i32>
  %23 = bitcast i16* %18 to <16 x i16>*
  %24 = load <16 x i16>, <16 x i16>* %23, align 2
  %25 = zext <16 x i16> %24 to <16 x i32>
  %26 = sub nsw <16 x i32> %22, %25
  %27 = sext <16 x i32> %26 to <16 x i64>
  %28 = extractelement <16 x i32> %26, i32 0
  %29 = mul nsw i32 %28, %28
  %30 = zext i32 %29 to i64
  %31 = add i64 %15, %30
  %32 = extractelement <16 x i32> %26, i32 1
  %33 = mul nsw i32 %32, %32
  %34 = zext i32 %33 to i64
  %35 = add i64 %31, %34
  %36 = extractelement <16 x i32> %26, i32 2
  %37 = mul nsw i32 %36, %36
  %38 = zext i32 %37 to i64
  %39 = add i64 %35, %38
  %40 = extractelement <16 x i32> %26, i32 3
  %41 = mul nsw i32 %40, %40
  %42 = zext i32 %41 to i64
  %43 = add i64 %39, %42
  %44 = extractelement <16 x i32> %26, i32 4
  %45 = mul nsw i32 %44, %44
  %46 = zext i32 %45 to i64
  %47 = add i64 %43, %46
  %48 = extractelement <16 x i32> %26, i32 5
  %49 = mul nsw i32 %48, %48
  %50 = zext i32 %49 to i64
  %51 = add i64 %47, %50
  %52 = extractelement <16 x i32> %26, i32 6
  %53 = mul nsw i32 %52, %52
  %54 = zext i32 %53 to i64
  %55 = add i64 %51, %54
  %56 = extractelement <16 x i32> %26, i32 7
  %57 = mul nsw i32 %56, %56
  %58 = zext i32 %57 to i64
  %59 = add i64 %55, %58
  %60 = extractelement <16 x i32> %26, i32 8
  %61 = mul nsw i32 %60, %60
  %62 = zext i32 %61 to i64
  %63 = add i64 %59, %62
  %64 = extractelement <16 x i32> %26, i32 9
  %65 = mul nsw i32 %64, %64
  %66 = zext i32 %65 to i64
  %67 = add i64 %63, %66
  %68 = extractelement <16 x i32> %26, i32 10
  %69 = mul nsw i32 %68, %68
  %70 = zext i32 %69 to i64
  %71 = add i64 %67, %70
  %72 = extractelement <16 x i32> %26, i32 11
  %73 = mul nsw i32 %72, %72
  %74 = zext i32 %73 to i64
  %75 = add i64 %71, %74
  %76 = extractelement <16 x i32> %26, i32 12
  %77 = mul nsw i32 %76, %76
  %78 = zext i32 %77 to i64
  %79 = add i64 %75, %78
  %80 = extractelement <16 x i32> %26, i32 13
  %81 = mul nsw i32 %80, %80
  %82 = zext i32 %81 to i64
  %83 = add i64 %79, %82
  %84 = extractelement <16 x i32> %26, i32 14
  %85 = mul nsw i32 %84, %84
  %86 = zext i32 %85 to i64
  %87 = add i64 %83, %86
  %88 = shufflevector <16 x i64> %27, <16 x i64> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %89 = add nsw <16 x i64> %88, %27
  %90 = shufflevector <16 x i64> %89, <16 x i64> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %91 = add nsw <16 x i64> %89, %90
  %92 = shufflevector <16 x i64> %91, <16 x i64> undef, <16 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %93 = add nsw <16 x i64> %91, %92
  %94 = shufflevector <16 x i64> %93, <16 x i64> undef, <16 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %95 = add nsw <16 x i64> %93, %94
  %96 = extractelement <16 x i64> %95, i32 0
  %97 = add nsw i64 %96, %16
  %98 = extractelement <16 x i32> %26, i32 15
  %99 = mul nsw i32 %98, %98
  %100 = zext i32 %99 to i64
  %101 = add i64 %87, %100
  %102 = getelementptr inbounds i16, i16* %19, i64 %12
  %103 = getelementptr inbounds i16, i16* %18, i64 %13
  %104 = add nuw nsw i32 %17, 1
  %105 = icmp eq i32 %104, 8
  br i1 %105, label %106, label %14

106:                                              ; preds = %14
  %107 = trunc i64 %101 to i32
  store i32 %107, i32* %4, align 4
  %108 = shl i64 %97, 32
  %109 = ashr exact i64 %108, 32
  %110 = mul nsw i64 %109, %109
  %111 = lshr i64 %110, 7
  %112 = trunc i64 %111 to i32
  %113 = sub i32 %107, %112
  ret i32 %113
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_highbd_10_variance16x8_c(i8*, i32, i8*, i32, i32* nocapture) local_unnamed_addr #2 {
  %6 = ptrtoint i8* %2 to i64
  %7 = shl i64 %6, 1
  %8 = inttoptr i64 %7 to i16*
  %9 = ptrtoint i8* %0 to i64
  %10 = shl i64 %9, 1
  %11 = inttoptr i64 %10 to i16*
  %12 = sext i32 %1 to i64
  %13 = sext i32 %3 to i64
  br label %14

14:                                               ; preds = %14, %5
  %15 = phi i64 [ 0, %5 ], [ %101, %14 ]
  %16 = phi i64 [ 0, %5 ], [ %97, %14 ]
  %17 = phi i32 [ 0, %5 ], [ %104, %14 ]
  %18 = phi i16* [ %8, %5 ], [ %103, %14 ]
  %19 = phi i16* [ %11, %5 ], [ %102, %14 ]
  %20 = bitcast i16* %19 to <16 x i16>*
  %21 = load <16 x i16>, <16 x i16>* %20, align 2
  %22 = zext <16 x i16> %21 to <16 x i32>
  %23 = bitcast i16* %18 to <16 x i16>*
  %24 = load <16 x i16>, <16 x i16>* %23, align 2
  %25 = zext <16 x i16> %24 to <16 x i32>
  %26 = sub nsw <16 x i32> %22, %25
  %27 = sext <16 x i32> %26 to <16 x i64>
  %28 = extractelement <16 x i32> %26, i32 0
  %29 = mul nsw i32 %28, %28
  %30 = zext i32 %29 to i64
  %31 = add i64 %15, %30
  %32 = extractelement <16 x i32> %26, i32 1
  %33 = mul nsw i32 %32, %32
  %34 = zext i32 %33 to i64
  %35 = add i64 %31, %34
  %36 = extractelement <16 x i32> %26, i32 2
  %37 = mul nsw i32 %36, %36
  %38 = zext i32 %37 to i64
  %39 = add i64 %35, %38
  %40 = extractelement <16 x i32> %26, i32 3
  %41 = mul nsw i32 %40, %40
  %42 = zext i32 %41 to i64
  %43 = add i64 %39, %42
  %44 = extractelement <16 x i32> %26, i32 4
  %45 = mul nsw i32 %44, %44
  %46 = zext i32 %45 to i64
  %47 = add i64 %43, %46
  %48 = extractelement <16 x i32> %26, i32 5
  %49 = mul nsw i32 %48, %48
  %50 = zext i32 %49 to i64
  %51 = add i64 %47, %50
  %52 = extractelement <16 x i32> %26, i32 6
  %53 = mul nsw i32 %52, %52
  %54 = zext i32 %53 to i64
  %55 = add i64 %51, %54
  %56 = extractelement <16 x i32> %26, i32 7
  %57 = mul nsw i32 %56, %56
  %58 = zext i32 %57 to i64
  %59 = add i64 %55, %58
  %60 = extractelement <16 x i32> %26, i32 8
  %61 = mul nsw i32 %60, %60
  %62 = zext i32 %61 to i64
  %63 = add i64 %59, %62
  %64 = extractelement <16 x i32> %26, i32 9
  %65 = mul nsw i32 %64, %64
  %66 = zext i32 %65 to i64
  %67 = add i64 %63, %66
  %68 = extractelement <16 x i32> %26, i32 10
  %69 = mul nsw i32 %68, %68
  %70 = zext i32 %69 to i64
  %71 = add i64 %67, %70
  %72 = extractelement <16 x i32> %26, i32 11
  %73 = mul nsw i32 %72, %72
  %74 = zext i32 %73 to i64
  %75 = add i64 %71, %74
  %76 = extractelement <16 x i32> %26, i32 12
  %77 = mul nsw i32 %76, %76
  %78 = zext i32 %77 to i64
  %79 = add i64 %75, %78
  %80 = extractelement <16 x i32> %26, i32 13
  %81 = mul nsw i32 %80, %80
  %82 = zext i32 %81 to i64
  %83 = add i64 %79, %82
  %84 = extractelement <16 x i32> %26, i32 14
  %85 = mul nsw i32 %84, %84
  %86 = zext i32 %85 to i64
  %87 = add i64 %83, %86
  %88 = shufflevector <16 x i64> %27, <16 x i64> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %89 = add nsw <16 x i64> %88, %27
  %90 = shufflevector <16 x i64> %89, <16 x i64> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %91 = add nsw <16 x i64> %89, %90
  %92 = shufflevector <16 x i64> %91, <16 x i64> undef, <16 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %93 = add nsw <16 x i64> %91, %92
  %94 = shufflevector <16 x i64> %93, <16 x i64> undef, <16 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %95 = add nsw <16 x i64> %93, %94
  %96 = extractelement <16 x i64> %95, i32 0
  %97 = add nsw i64 %96, %16
  %98 = extractelement <16 x i32> %26, i32 15
  %99 = mul nsw i32 %98, %98
  %100 = zext i32 %99 to i64
  %101 = add i64 %87, %100
  %102 = getelementptr inbounds i16, i16* %19, i64 %12
  %103 = getelementptr inbounds i16, i16* %18, i64 %13
  %104 = add nuw nsw i32 %17, 1
  %105 = icmp eq i32 %104, 8
  br i1 %105, label %106, label %14

106:                                              ; preds = %14
  %107 = add i64 %101, 8
  %108 = lshr i64 %107, 4
  %109 = trunc i64 %108 to i32
  store i32 %109, i32* %4, align 4
  %110 = and i64 %108, 4294967295
  %111 = shl i64 %97, 30
  %112 = add i64 %111, 2147483648
  %113 = ashr i64 %112, 32
  %114 = mul nsw i64 %113, %113
  %115 = lshr i64 %114, 7
  %116 = sub nsw i64 %110, %115
  %117 = icmp sgt i64 %116, -1
  %118 = trunc i64 %116 to i32
  %119 = select i1 %117, i32 %118, i32 0
  ret i32 %119
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_highbd_12_variance16x8_c(i8*, i32, i8*, i32, i32* nocapture) local_unnamed_addr #2 {
  %6 = ptrtoint i8* %2 to i64
  %7 = shl i64 %6, 1
  %8 = inttoptr i64 %7 to i16*
  %9 = ptrtoint i8* %0 to i64
  %10 = shl i64 %9, 1
  %11 = inttoptr i64 %10 to i16*
  %12 = sext i32 %1 to i64
  %13 = sext i32 %3 to i64
  br label %14

14:                                               ; preds = %14, %5
  %15 = phi i64 [ 0, %5 ], [ %101, %14 ]
  %16 = phi i64 [ 0, %5 ], [ %97, %14 ]
  %17 = phi i32 [ 0, %5 ], [ %104, %14 ]
  %18 = phi i16* [ %8, %5 ], [ %103, %14 ]
  %19 = phi i16* [ %11, %5 ], [ %102, %14 ]
  %20 = bitcast i16* %19 to <16 x i16>*
  %21 = load <16 x i16>, <16 x i16>* %20, align 2
  %22 = zext <16 x i16> %21 to <16 x i32>
  %23 = bitcast i16* %18 to <16 x i16>*
  %24 = load <16 x i16>, <16 x i16>* %23, align 2
  %25 = zext <16 x i16> %24 to <16 x i32>
  %26 = sub nsw <16 x i32> %22, %25
  %27 = sext <16 x i32> %26 to <16 x i64>
  %28 = extractelement <16 x i32> %26, i32 0
  %29 = mul nsw i32 %28, %28
  %30 = zext i32 %29 to i64
  %31 = add i64 %15, %30
  %32 = extractelement <16 x i32> %26, i32 1
  %33 = mul nsw i32 %32, %32
  %34 = zext i32 %33 to i64
  %35 = add i64 %31, %34
  %36 = extractelement <16 x i32> %26, i32 2
  %37 = mul nsw i32 %36, %36
  %38 = zext i32 %37 to i64
  %39 = add i64 %35, %38
  %40 = extractelement <16 x i32> %26, i32 3
  %41 = mul nsw i32 %40, %40
  %42 = zext i32 %41 to i64
  %43 = add i64 %39, %42
  %44 = extractelement <16 x i32> %26, i32 4
  %45 = mul nsw i32 %44, %44
  %46 = zext i32 %45 to i64
  %47 = add i64 %43, %46
  %48 = extractelement <16 x i32> %26, i32 5
  %49 = mul nsw i32 %48, %48
  %50 = zext i32 %49 to i64
  %51 = add i64 %47, %50
  %52 = extractelement <16 x i32> %26, i32 6
  %53 = mul nsw i32 %52, %52
  %54 = zext i32 %53 to i64
  %55 = add i64 %51, %54
  %56 = extractelement <16 x i32> %26, i32 7
  %57 = mul nsw i32 %56, %56
  %58 = zext i32 %57 to i64
  %59 = add i64 %55, %58
  %60 = extractelement <16 x i32> %26, i32 8
  %61 = mul nsw i32 %60, %60
  %62 = zext i32 %61 to i64
  %63 = add i64 %59, %62
  %64 = extractelement <16 x i32> %26, i32 9
  %65 = mul nsw i32 %64, %64
  %66 = zext i32 %65 to i64
  %67 = add i64 %63, %66
  %68 = extractelement <16 x i32> %26, i32 10
  %69 = mul nsw i32 %68, %68
  %70 = zext i32 %69 to i64
  %71 = add i64 %67, %70
  %72 = extractelement <16 x i32> %26, i32 11
  %73 = mul nsw i32 %72, %72
  %74 = zext i32 %73 to i64
  %75 = add i64 %71, %74
  %76 = extractelement <16 x i32> %26, i32 12
  %77 = mul nsw i32 %76, %76
  %78 = zext i32 %77 to i64
  %79 = add i64 %75, %78
  %80 = extractelement <16 x i32> %26, i32 13
  %81 = mul nsw i32 %80, %80
  %82 = zext i32 %81 to i64
  %83 = add i64 %79, %82
  %84 = extractelement <16 x i32> %26, i32 14
  %85 = mul nsw i32 %84, %84
  %86 = zext i32 %85 to i64
  %87 = add i64 %83, %86
  %88 = shufflevector <16 x i64> %27, <16 x i64> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %89 = add nsw <16 x i64> %88, %27
  %90 = shufflevector <16 x i64> %89, <16 x i64> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %91 = add nsw <16 x i64> %89, %90
  %92 = shufflevector <16 x i64> %91, <16 x i64> undef, <16 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %93 = add nsw <16 x i64> %91, %92
  %94 = shufflevector <16 x i64> %93, <16 x i64> undef, <16 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %95 = add nsw <16 x i64> %93, %94
  %96 = extractelement <16 x i64> %95, i32 0
  %97 = add nsw i64 %96, %16
  %98 = extractelement <16 x i32> %26, i32 15
  %99 = mul nsw i32 %98, %98
  %100 = zext i32 %99 to i64
  %101 = add i64 %87, %100
  %102 = getelementptr inbounds i16, i16* %19, i64 %12
  %103 = getelementptr inbounds i16, i16* %18, i64 %13
  %104 = add nuw nsw i32 %17, 1
  %105 = icmp eq i32 %104, 8
  br i1 %105, label %106, label %14

106:                                              ; preds = %14
  %107 = add i64 %101, 128
  %108 = lshr i64 %107, 8
  %109 = trunc i64 %108 to i32
  store i32 %109, i32* %4, align 4
  %110 = and i64 %108, 4294967295
  %111 = shl i64 %97, 28
  %112 = add i64 %111, 2147483648
  %113 = ashr i64 %112, 32
  %114 = mul nsw i64 %113, %113
  %115 = lshr i64 %114, 7
  %116 = sub nsw i64 %110, %115
  %117 = icmp sgt i64 %116, -1
  %118 = trunc i64 %116 to i32
  %119 = select i1 %117, i32 %118, i32 0
  ret i32 %119
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_highbd_8_sub_pixel_variance16x8_c(i8*, i32, i32, i32, i8*, i32, i32* nocapture) local_unnamed_addr #2 {
  %8 = alloca [144 x i16], align 16
  %9 = bitcast [144 x i16]* %8 to i8*
  %10 = alloca [128 x i16], align 16
  %11 = bitcast [128 x i16]* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 288, i8* nonnull %9) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %9, i8 -86, i64 288, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %11) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %11, i8 -86, i64 256, i1 false)
  %12 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 0
  %13 = sext i32 %2 to i64
  %14 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %13, i64 0
  %15 = ptrtoint i8* %0 to i64
  %16 = shl i64 %15, 1
  %17 = inttoptr i64 %16 to i16*
  %18 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %13, i64 1
  %19 = add i32 %1, -16
  %20 = zext i32 %19 to i64
  %21 = load i8, i8* %14, align 2
  %22 = zext i8 %21 to i32
  %23 = load i8, i8* %18, align 1
  %24 = zext i8 %23 to i32
  %25 = inttoptr i64 %16 to i8*
  %26 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 16
  %27 = bitcast i16* %26 to i8*
  %28 = getelementptr i16, i16* %17, i64 17
  %29 = bitcast i16* %28 to [144 x i16]*
  %30 = icmp ult [144 x i16]* %8, %29
  %31 = icmp ult i8* %25, %27
  %32 = and i1 %30, %31
  br i1 %32, label %69, label %33

33:                                               ; preds = %7
  %34 = insertelement <8 x i32> undef, i32 %22, i32 0
  %35 = shufflevector <8 x i32> %34, <8 x i32> undef, <8 x i32> zeroinitializer
  %36 = insertelement <8 x i32> undef, i32 %24, i32 0
  %37 = shufflevector <8 x i32> %36, <8 x i32> undef, <8 x i32> zeroinitializer
  %38 = getelementptr i16, i16* %17, i64 16
  %39 = inttoptr i64 %16 to <8 x i16>*
  %40 = load <8 x i16>, <8 x i16>* %39, align 2, !alias.scope !1035
  %41 = zext <8 x i16> %40 to <8 x i32>
  %42 = mul nuw nsw <8 x i32> %35, %41
  %43 = getelementptr inbounds i16, i16* %17, i64 1
  %44 = bitcast i16* %43 to <8 x i16>*
  %45 = load <8 x i16>, <8 x i16>* %44, align 2, !alias.scope !1035
  %46 = zext <8 x i16> %45 to <8 x i32>
  %47 = mul nuw nsw <8 x i32> %37, %46
  %48 = add nuw nsw <8 x i32> %42, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %49 = add nuw nsw <8 x i32> %48, %47
  %50 = lshr <8 x i32> %49, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %51 = trunc <8 x i32> %50 to <8 x i16>
  %52 = bitcast [144 x i16]* %8 to <8 x i16>*
  store <8 x i16> %51, <8 x i16>* %52, align 16, !alias.scope !1038, !noalias !1035
  %53 = getelementptr i16, i16* %17, i64 8
  %54 = bitcast i16* %53 to <8 x i16>*
  %55 = load <8 x i16>, <8 x i16>* %54, align 2, !alias.scope !1035
  %56 = zext <8 x i16> %55 to <8 x i32>
  %57 = mul nuw nsw <8 x i32> %35, %56
  %58 = getelementptr inbounds i16, i16* %17, i64 9
  %59 = bitcast i16* %58 to <8 x i16>*
  %60 = load <8 x i16>, <8 x i16>* %59, align 2, !alias.scope !1035
  %61 = zext <8 x i16> %60 to <8 x i32>
  %62 = mul nuw nsw <8 x i32> %37, %61
  %63 = add nuw nsw <8 x i32> %57, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %64 = add nuw nsw <8 x i32> %63, %62
  %65 = lshr <8 x i32> %64, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %66 = trunc <8 x i32> %65 to <8 x i16>
  %67 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 8
  %68 = bitcast i16* %67 to <8 x i16>*
  store <8 x i16> %66, <8 x i16>* %68, align 16, !alias.scope !1038, !noalias !1035
  br label %99

69:                                               ; preds = %7, %69
  %70 = phi i64 [ %97, %69 ], [ 0, %7 ]
  %71 = phi i16* [ %88, %69 ], [ %17, %7 ]
  %72 = load i16, i16* %71, align 2
  %73 = zext i16 %72 to i32
  %74 = mul nuw nsw i32 %22, %73
  %75 = getelementptr inbounds i16, i16* %71, i64 1
  %76 = load i16, i16* %75, align 2
  %77 = zext i16 %76 to i32
  %78 = mul nuw nsw i32 %24, %77
  %79 = add nuw nsw i32 %74, 64
  %80 = add nuw nsw i32 %79, %78
  %81 = lshr i32 %80, 7
  %82 = trunc i32 %81 to i16
  %83 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 %70
  store i16 %82, i16* %83, align 4
  %84 = or i64 %70, 1
  %85 = load i16, i16* %75, align 2
  %86 = zext i16 %85 to i32
  %87 = mul nuw nsw i32 %22, %86
  %88 = getelementptr inbounds i16, i16* %71, i64 2
  %89 = load i16, i16* %88, align 2
  %90 = zext i16 %89 to i32
  %91 = mul nuw nsw i32 %24, %90
  %92 = add nuw nsw i32 %87, 64
  %93 = add nuw nsw i32 %92, %91
  %94 = lshr i32 %93, 7
  %95 = trunc i32 %94 to i16
  %96 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 %84
  store i16 %95, i16* %96, align 2
  %97 = add nuw nsw i64 %70, 2
  %98 = icmp eq i64 %97, 16
  br i1 %98, label %99, label %69, !llvm.loop !1040

99:                                               ; preds = %69, %33
  %100 = phi i16* [ %38, %33 ], [ %88, %69 ]
  %101 = getelementptr inbounds i16, i16* %100, i64 %20
  %102 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 16
  %103 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 16
  %104 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 32
  %105 = add nuw nsw i64 %20, 17
  %106 = getelementptr i16, i16* %100, i64 %105
  %107 = icmp ult i16* %103, %106
  %108 = icmp ult i16* %101, %104
  %109 = and i1 %107, %108
  br i1 %109, label %721, label %110

110:                                              ; preds = %99
  %111 = insertelement <8 x i32> undef, i32 %22, i32 0
  %112 = shufflevector <8 x i32> %111, <8 x i32> undef, <8 x i32> zeroinitializer
  %113 = insertelement <8 x i32> undef, i32 %24, i32 0
  %114 = shufflevector <8 x i32> %113, <8 x i32> undef, <8 x i32> zeroinitializer
  %115 = getelementptr i16, i16* %101, i64 16
  %116 = bitcast i16* %101 to <8 x i16>*
  %117 = load <8 x i16>, <8 x i16>* %116, align 2, !alias.scope !1041
  %118 = zext <8 x i16> %117 to <8 x i32>
  %119 = mul nuw nsw <8 x i32> %112, %118
  %120 = getelementptr inbounds i16, i16* %101, i64 1
  %121 = bitcast i16* %120 to <8 x i16>*
  %122 = load <8 x i16>, <8 x i16>* %121, align 2, !alias.scope !1041
  %123 = zext <8 x i16> %122 to <8 x i32>
  %124 = mul nuw nsw <8 x i32> %114, %123
  %125 = add nuw nsw <8 x i32> %119, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %126 = add nuw nsw <8 x i32> %125, %124
  %127 = lshr <8 x i32> %126, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %128 = trunc <8 x i32> %127 to <8 x i16>
  %129 = bitcast i16* %102 to <8 x i16>*
  store <8 x i16> %128, <8 x i16>* %129, align 16, !alias.scope !1044, !noalias !1041
  %130 = getelementptr i16, i16* %101, i64 8
  %131 = bitcast i16* %130 to <8 x i16>*
  %132 = load <8 x i16>, <8 x i16>* %131, align 2, !alias.scope !1041
  %133 = zext <8 x i16> %132 to <8 x i32>
  %134 = mul nuw nsw <8 x i32> %112, %133
  %135 = getelementptr inbounds i16, i16* %130, i64 1
  %136 = bitcast i16* %135 to <8 x i16>*
  %137 = load <8 x i16>, <8 x i16>* %136, align 2, !alias.scope !1041
  %138 = zext <8 x i16> %137 to <8 x i32>
  %139 = mul nuw nsw <8 x i32> %114, %138
  %140 = add nuw nsw <8 x i32> %134, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %141 = add nuw nsw <8 x i32> %140, %139
  %142 = lshr <8 x i32> %141, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %143 = trunc <8 x i32> %142 to <8 x i16>
  %144 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 24
  %145 = bitcast i16* %144 to <8 x i16>*
  store <8 x i16> %143, <8 x i16>* %145, align 16, !alias.scope !1044, !noalias !1041
  br label %751

146:                                              ; preds = %1289, %146
  %147 = phi i64 [ %176, %146 ], [ 0, %1289 ]
  %148 = phi i16* [ %175, %146 ], [ %12, %1289 ]
  %149 = load i16, i16* %148, align 2
  %150 = zext i16 %149 to i32
  %151 = mul nuw nsw i32 %1294, %150
  %152 = getelementptr inbounds i16, i16* %148, i64 16
  %153 = load i16, i16* %152, align 2
  %154 = zext i16 %153 to i32
  %155 = mul nuw nsw i32 %1296, %154
  %156 = add nuw nsw i32 %151, 64
  %157 = add nuw nsw i32 %156, %155
  %158 = lshr i32 %157, 7
  %159 = trunc i32 %158 to i16
  %160 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 %147
  store i16 %159, i16* %160, align 4
  %161 = getelementptr inbounds i16, i16* %148, i64 1
  %162 = or i64 %147, 1
  %163 = load i16, i16* %161, align 2
  %164 = zext i16 %163 to i32
  %165 = mul nuw nsw i32 %1294, %164
  %166 = getelementptr inbounds i16, i16* %148, i64 17
  %167 = load i16, i16* %166, align 2
  %168 = zext i16 %167 to i32
  %169 = mul nuw nsw i32 %1296, %168
  %170 = add nuw nsw i32 %165, 64
  %171 = add nuw nsw i32 %170, %169
  %172 = lshr i32 %171, 7
  %173 = trunc i32 %172 to i16
  %174 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 %162
  store i16 %173, i16* %174, align 2
  %175 = getelementptr inbounds i16, i16* %148, i64 2
  %176 = add nuw nsw i64 %147, 2
  %177 = icmp eq i64 %176, 16
  br i1 %177, label %178, label %146, !llvm.loop !1046

178:                                              ; preds = %146, %1304
  %179 = phi i16* [ %1309, %1304 ], [ %175, %146 ]
  %180 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 16
  %181 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 16
  %182 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 32
  %183 = getelementptr i16, i16* %179, i64 32
  %184 = icmp ult i16* %181, %183
  %185 = icmp ult i16* %179, %182
  %186 = and i1 %184, %185
  br i1 %186, label %223, label %187

187:                                              ; preds = %178
  %188 = insertelement <8 x i32> undef, i32 %1294, i32 0
  %189 = shufflevector <8 x i32> %188, <8 x i32> undef, <8 x i32> zeroinitializer
  %190 = insertelement <8 x i32> undef, i32 %1296, i32 0
  %191 = shufflevector <8 x i32> %190, <8 x i32> undef, <8 x i32> zeroinitializer
  %192 = getelementptr i16, i16* %179, i64 16
  %193 = bitcast i16* %179 to <8 x i16>*
  %194 = load <8 x i16>, <8 x i16>* %193, align 2, !alias.scope !1047
  %195 = zext <8 x i16> %194 to <8 x i32>
  %196 = mul nuw nsw <8 x i32> %189, %195
  %197 = getelementptr inbounds i16, i16* %179, i64 16
  %198 = bitcast i16* %197 to <8 x i16>*
  %199 = load <8 x i16>, <8 x i16>* %198, align 2, !alias.scope !1047
  %200 = zext <8 x i16> %199 to <8 x i32>
  %201 = mul nuw nsw <8 x i32> %191, %200
  %202 = add nuw nsw <8 x i32> %196, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %203 = add nuw nsw <8 x i32> %202, %201
  %204 = lshr <8 x i32> %203, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %205 = trunc <8 x i32> %204 to <8 x i16>
  %206 = bitcast i16* %180 to <8 x i16>*
  store <8 x i16> %205, <8 x i16>* %206, align 16, !alias.scope !1050, !noalias !1047
  %207 = getelementptr i16, i16* %179, i64 8
  %208 = bitcast i16* %207 to <8 x i16>*
  %209 = load <8 x i16>, <8 x i16>* %208, align 2, !alias.scope !1047
  %210 = zext <8 x i16> %209 to <8 x i32>
  %211 = mul nuw nsw <8 x i32> %189, %210
  %212 = getelementptr inbounds i16, i16* %179, i64 24
  %213 = bitcast i16* %212 to <8 x i16>*
  %214 = load <8 x i16>, <8 x i16>* %213, align 2, !alias.scope !1047
  %215 = zext <8 x i16> %214 to <8 x i32>
  %216 = mul nuw nsw <8 x i32> %191, %215
  %217 = add nuw nsw <8 x i32> %211, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %218 = add nuw nsw <8 x i32> %217, %216
  %219 = lshr <8 x i32> %218, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %220 = trunc <8 x i32> %219 to <8 x i16>
  %221 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 24
  %222 = bitcast i16* %221 to <8 x i16>*
  store <8 x i16> %220, <8 x i16>* %222, align 16, !alias.scope !1050, !noalias !1047
  br label %255

223:                                              ; preds = %178, %223
  %224 = phi i64 [ %253, %223 ], [ 0, %178 ]
  %225 = phi i16* [ %252, %223 ], [ %179, %178 ]
  %226 = load i16, i16* %225, align 2
  %227 = zext i16 %226 to i32
  %228 = mul nuw nsw i32 %1294, %227
  %229 = getelementptr inbounds i16, i16* %225, i64 16
  %230 = load i16, i16* %229, align 2
  %231 = zext i16 %230 to i32
  %232 = mul nuw nsw i32 %1296, %231
  %233 = add nuw nsw i32 %228, 64
  %234 = add nuw nsw i32 %233, %232
  %235 = lshr i32 %234, 7
  %236 = trunc i32 %235 to i16
  %237 = getelementptr inbounds i16, i16* %180, i64 %224
  store i16 %236, i16* %237, align 4
  %238 = getelementptr inbounds i16, i16* %225, i64 1
  %239 = or i64 %224, 1
  %240 = load i16, i16* %238, align 2
  %241 = zext i16 %240 to i32
  %242 = mul nuw nsw i32 %1294, %241
  %243 = getelementptr inbounds i16, i16* %225, i64 17
  %244 = load i16, i16* %243, align 2
  %245 = zext i16 %244 to i32
  %246 = mul nuw nsw i32 %1296, %245
  %247 = add nuw nsw i32 %242, 64
  %248 = add nuw nsw i32 %247, %246
  %249 = lshr i32 %248, 7
  %250 = trunc i32 %249 to i16
  %251 = getelementptr inbounds i16, i16* %180, i64 %239
  store i16 %250, i16* %251, align 2
  %252 = getelementptr inbounds i16, i16* %225, i64 2
  %253 = add nuw nsw i64 %224, 2
  %254 = icmp eq i64 %253, 16
  br i1 %254, label %255, label %223, !llvm.loop !1052

255:                                              ; preds = %223, %187
  %256 = phi i16* [ %192, %187 ], [ %252, %223 ]
  %257 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 32
  %258 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 32
  %259 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 48
  %260 = getelementptr i16, i16* %256, i64 32
  %261 = icmp ult i16* %258, %260
  %262 = icmp ult i16* %256, %259
  %263 = and i1 %261, %262
  br i1 %263, label %300, label %264

264:                                              ; preds = %255
  %265 = insertelement <8 x i32> undef, i32 %1294, i32 0
  %266 = shufflevector <8 x i32> %265, <8 x i32> undef, <8 x i32> zeroinitializer
  %267 = insertelement <8 x i32> undef, i32 %1296, i32 0
  %268 = shufflevector <8 x i32> %267, <8 x i32> undef, <8 x i32> zeroinitializer
  %269 = getelementptr i16, i16* %256, i64 16
  %270 = bitcast i16* %256 to <8 x i16>*
  %271 = load <8 x i16>, <8 x i16>* %270, align 2, !alias.scope !1053
  %272 = zext <8 x i16> %271 to <8 x i32>
  %273 = mul nuw nsw <8 x i32> %266, %272
  %274 = getelementptr inbounds i16, i16* %256, i64 16
  %275 = bitcast i16* %274 to <8 x i16>*
  %276 = load <8 x i16>, <8 x i16>* %275, align 2, !alias.scope !1053
  %277 = zext <8 x i16> %276 to <8 x i32>
  %278 = mul nuw nsw <8 x i32> %268, %277
  %279 = add nuw nsw <8 x i32> %273, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %280 = add nuw nsw <8 x i32> %279, %278
  %281 = lshr <8 x i32> %280, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %282 = trunc <8 x i32> %281 to <8 x i16>
  %283 = bitcast i16* %257 to <8 x i16>*
  store <8 x i16> %282, <8 x i16>* %283, align 16, !alias.scope !1056, !noalias !1053
  %284 = getelementptr i16, i16* %256, i64 8
  %285 = bitcast i16* %284 to <8 x i16>*
  %286 = load <8 x i16>, <8 x i16>* %285, align 2, !alias.scope !1053
  %287 = zext <8 x i16> %286 to <8 x i32>
  %288 = mul nuw nsw <8 x i32> %266, %287
  %289 = getelementptr inbounds i16, i16* %256, i64 24
  %290 = bitcast i16* %289 to <8 x i16>*
  %291 = load <8 x i16>, <8 x i16>* %290, align 2, !alias.scope !1053
  %292 = zext <8 x i16> %291 to <8 x i32>
  %293 = mul nuw nsw <8 x i32> %268, %292
  %294 = add nuw nsw <8 x i32> %288, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %295 = add nuw nsw <8 x i32> %294, %293
  %296 = lshr <8 x i32> %295, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %297 = trunc <8 x i32> %296 to <8 x i16>
  %298 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 40
  %299 = bitcast i16* %298 to <8 x i16>*
  store <8 x i16> %297, <8 x i16>* %299, align 16, !alias.scope !1056, !noalias !1053
  br label %332

300:                                              ; preds = %255, %300
  %301 = phi i64 [ %330, %300 ], [ 0, %255 ]
  %302 = phi i16* [ %329, %300 ], [ %256, %255 ]
  %303 = load i16, i16* %302, align 2
  %304 = zext i16 %303 to i32
  %305 = mul nuw nsw i32 %1294, %304
  %306 = getelementptr inbounds i16, i16* %302, i64 16
  %307 = load i16, i16* %306, align 2
  %308 = zext i16 %307 to i32
  %309 = mul nuw nsw i32 %1296, %308
  %310 = add nuw nsw i32 %305, 64
  %311 = add nuw nsw i32 %310, %309
  %312 = lshr i32 %311, 7
  %313 = trunc i32 %312 to i16
  %314 = getelementptr inbounds i16, i16* %257, i64 %301
  store i16 %313, i16* %314, align 4
  %315 = getelementptr inbounds i16, i16* %302, i64 1
  %316 = or i64 %301, 1
  %317 = load i16, i16* %315, align 2
  %318 = zext i16 %317 to i32
  %319 = mul nuw nsw i32 %1294, %318
  %320 = getelementptr inbounds i16, i16* %302, i64 17
  %321 = load i16, i16* %320, align 2
  %322 = zext i16 %321 to i32
  %323 = mul nuw nsw i32 %1296, %322
  %324 = add nuw nsw i32 %319, 64
  %325 = add nuw nsw i32 %324, %323
  %326 = lshr i32 %325, 7
  %327 = trunc i32 %326 to i16
  %328 = getelementptr inbounds i16, i16* %257, i64 %316
  store i16 %327, i16* %328, align 2
  %329 = getelementptr inbounds i16, i16* %302, i64 2
  %330 = add nuw nsw i64 %301, 2
  %331 = icmp eq i64 %330, 16
  br i1 %331, label %332, label %300, !llvm.loop !1058

332:                                              ; preds = %300, %264
  %333 = phi i16* [ %269, %264 ], [ %329, %300 ]
  %334 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 48
  %335 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 48
  %336 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 64
  %337 = getelementptr i16, i16* %333, i64 32
  %338 = icmp ult i16* %335, %337
  %339 = icmp ult i16* %333, %336
  %340 = and i1 %338, %339
  br i1 %340, label %377, label %341

341:                                              ; preds = %332
  %342 = insertelement <8 x i32> undef, i32 %1294, i32 0
  %343 = shufflevector <8 x i32> %342, <8 x i32> undef, <8 x i32> zeroinitializer
  %344 = insertelement <8 x i32> undef, i32 %1296, i32 0
  %345 = shufflevector <8 x i32> %344, <8 x i32> undef, <8 x i32> zeroinitializer
  %346 = getelementptr i16, i16* %333, i64 16
  %347 = bitcast i16* %333 to <8 x i16>*
  %348 = load <8 x i16>, <8 x i16>* %347, align 2, !alias.scope !1059
  %349 = zext <8 x i16> %348 to <8 x i32>
  %350 = mul nuw nsw <8 x i32> %343, %349
  %351 = getelementptr inbounds i16, i16* %333, i64 16
  %352 = bitcast i16* %351 to <8 x i16>*
  %353 = load <8 x i16>, <8 x i16>* %352, align 2, !alias.scope !1059
  %354 = zext <8 x i16> %353 to <8 x i32>
  %355 = mul nuw nsw <8 x i32> %345, %354
  %356 = add nuw nsw <8 x i32> %350, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %357 = add nuw nsw <8 x i32> %356, %355
  %358 = lshr <8 x i32> %357, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %359 = trunc <8 x i32> %358 to <8 x i16>
  %360 = bitcast i16* %334 to <8 x i16>*
  store <8 x i16> %359, <8 x i16>* %360, align 16, !alias.scope !1062, !noalias !1059
  %361 = getelementptr i16, i16* %333, i64 8
  %362 = bitcast i16* %361 to <8 x i16>*
  %363 = load <8 x i16>, <8 x i16>* %362, align 2, !alias.scope !1059
  %364 = zext <8 x i16> %363 to <8 x i32>
  %365 = mul nuw nsw <8 x i32> %343, %364
  %366 = getelementptr inbounds i16, i16* %333, i64 24
  %367 = bitcast i16* %366 to <8 x i16>*
  %368 = load <8 x i16>, <8 x i16>* %367, align 2, !alias.scope !1059
  %369 = zext <8 x i16> %368 to <8 x i32>
  %370 = mul nuw nsw <8 x i32> %345, %369
  %371 = add nuw nsw <8 x i32> %365, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %372 = add nuw nsw <8 x i32> %371, %370
  %373 = lshr <8 x i32> %372, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %374 = trunc <8 x i32> %373 to <8 x i16>
  %375 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 56
  %376 = bitcast i16* %375 to <8 x i16>*
  store <8 x i16> %374, <8 x i16>* %376, align 16, !alias.scope !1062, !noalias !1059
  br label %409

377:                                              ; preds = %332, %377
  %378 = phi i64 [ %407, %377 ], [ 0, %332 ]
  %379 = phi i16* [ %406, %377 ], [ %333, %332 ]
  %380 = load i16, i16* %379, align 2
  %381 = zext i16 %380 to i32
  %382 = mul nuw nsw i32 %1294, %381
  %383 = getelementptr inbounds i16, i16* %379, i64 16
  %384 = load i16, i16* %383, align 2
  %385 = zext i16 %384 to i32
  %386 = mul nuw nsw i32 %1296, %385
  %387 = add nuw nsw i32 %382, 64
  %388 = add nuw nsw i32 %387, %386
  %389 = lshr i32 %388, 7
  %390 = trunc i32 %389 to i16
  %391 = getelementptr inbounds i16, i16* %334, i64 %378
  store i16 %390, i16* %391, align 4
  %392 = getelementptr inbounds i16, i16* %379, i64 1
  %393 = or i64 %378, 1
  %394 = load i16, i16* %392, align 2
  %395 = zext i16 %394 to i32
  %396 = mul nuw nsw i32 %1294, %395
  %397 = getelementptr inbounds i16, i16* %379, i64 17
  %398 = load i16, i16* %397, align 2
  %399 = zext i16 %398 to i32
  %400 = mul nuw nsw i32 %1296, %399
  %401 = add nuw nsw i32 %396, 64
  %402 = add nuw nsw i32 %401, %400
  %403 = lshr i32 %402, 7
  %404 = trunc i32 %403 to i16
  %405 = getelementptr inbounds i16, i16* %334, i64 %393
  store i16 %404, i16* %405, align 2
  %406 = getelementptr inbounds i16, i16* %379, i64 2
  %407 = add nuw nsw i64 %378, 2
  %408 = icmp eq i64 %407, 16
  br i1 %408, label %409, label %377, !llvm.loop !1064

409:                                              ; preds = %377, %341
  %410 = phi i16* [ %346, %341 ], [ %406, %377 ]
  %411 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 64
  %412 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 64
  %413 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 80
  %414 = getelementptr i16, i16* %410, i64 32
  %415 = icmp ult i16* %412, %414
  %416 = icmp ult i16* %410, %413
  %417 = and i1 %415, %416
  br i1 %417, label %454, label %418

418:                                              ; preds = %409
  %419 = insertelement <8 x i32> undef, i32 %1294, i32 0
  %420 = shufflevector <8 x i32> %419, <8 x i32> undef, <8 x i32> zeroinitializer
  %421 = insertelement <8 x i32> undef, i32 %1296, i32 0
  %422 = shufflevector <8 x i32> %421, <8 x i32> undef, <8 x i32> zeroinitializer
  %423 = getelementptr i16, i16* %410, i64 16
  %424 = bitcast i16* %410 to <8 x i16>*
  %425 = load <8 x i16>, <8 x i16>* %424, align 2, !alias.scope !1065
  %426 = zext <8 x i16> %425 to <8 x i32>
  %427 = mul nuw nsw <8 x i32> %420, %426
  %428 = getelementptr inbounds i16, i16* %410, i64 16
  %429 = bitcast i16* %428 to <8 x i16>*
  %430 = load <8 x i16>, <8 x i16>* %429, align 2, !alias.scope !1065
  %431 = zext <8 x i16> %430 to <8 x i32>
  %432 = mul nuw nsw <8 x i32> %422, %431
  %433 = add nuw nsw <8 x i32> %427, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %434 = add nuw nsw <8 x i32> %433, %432
  %435 = lshr <8 x i32> %434, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %436 = trunc <8 x i32> %435 to <8 x i16>
  %437 = bitcast i16* %411 to <8 x i16>*
  store <8 x i16> %436, <8 x i16>* %437, align 16, !alias.scope !1068, !noalias !1065
  %438 = getelementptr i16, i16* %410, i64 8
  %439 = bitcast i16* %438 to <8 x i16>*
  %440 = load <8 x i16>, <8 x i16>* %439, align 2, !alias.scope !1065
  %441 = zext <8 x i16> %440 to <8 x i32>
  %442 = mul nuw nsw <8 x i32> %420, %441
  %443 = getelementptr inbounds i16, i16* %410, i64 24
  %444 = bitcast i16* %443 to <8 x i16>*
  %445 = load <8 x i16>, <8 x i16>* %444, align 2, !alias.scope !1065
  %446 = zext <8 x i16> %445 to <8 x i32>
  %447 = mul nuw nsw <8 x i32> %422, %446
  %448 = add nuw nsw <8 x i32> %442, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %449 = add nuw nsw <8 x i32> %448, %447
  %450 = lshr <8 x i32> %449, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %451 = trunc <8 x i32> %450 to <8 x i16>
  %452 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 72
  %453 = bitcast i16* %452 to <8 x i16>*
  store <8 x i16> %451, <8 x i16>* %453, align 16, !alias.scope !1068, !noalias !1065
  br label %486

454:                                              ; preds = %409, %454
  %455 = phi i64 [ %484, %454 ], [ 0, %409 ]
  %456 = phi i16* [ %483, %454 ], [ %410, %409 ]
  %457 = load i16, i16* %456, align 2
  %458 = zext i16 %457 to i32
  %459 = mul nuw nsw i32 %1294, %458
  %460 = getelementptr inbounds i16, i16* %456, i64 16
  %461 = load i16, i16* %460, align 2
  %462 = zext i16 %461 to i32
  %463 = mul nuw nsw i32 %1296, %462
  %464 = add nuw nsw i32 %459, 64
  %465 = add nuw nsw i32 %464, %463
  %466 = lshr i32 %465, 7
  %467 = trunc i32 %466 to i16
  %468 = getelementptr inbounds i16, i16* %411, i64 %455
  store i16 %467, i16* %468, align 4
  %469 = getelementptr inbounds i16, i16* %456, i64 1
  %470 = or i64 %455, 1
  %471 = load i16, i16* %469, align 2
  %472 = zext i16 %471 to i32
  %473 = mul nuw nsw i32 %1294, %472
  %474 = getelementptr inbounds i16, i16* %456, i64 17
  %475 = load i16, i16* %474, align 2
  %476 = zext i16 %475 to i32
  %477 = mul nuw nsw i32 %1296, %476
  %478 = add nuw nsw i32 %473, 64
  %479 = add nuw nsw i32 %478, %477
  %480 = lshr i32 %479, 7
  %481 = trunc i32 %480 to i16
  %482 = getelementptr inbounds i16, i16* %411, i64 %470
  store i16 %481, i16* %482, align 2
  %483 = getelementptr inbounds i16, i16* %456, i64 2
  %484 = add nuw nsw i64 %455, 2
  %485 = icmp eq i64 %484, 16
  br i1 %485, label %486, label %454, !llvm.loop !1070

486:                                              ; preds = %454, %418
  %487 = phi i16* [ %423, %418 ], [ %483, %454 ]
  %488 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 80
  %489 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 80
  %490 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 96
  %491 = getelementptr i16, i16* %487, i64 32
  %492 = icmp ult i16* %489, %491
  %493 = icmp ult i16* %487, %490
  %494 = and i1 %492, %493
  br i1 %494, label %531, label %495

495:                                              ; preds = %486
  %496 = insertelement <8 x i32> undef, i32 %1294, i32 0
  %497 = shufflevector <8 x i32> %496, <8 x i32> undef, <8 x i32> zeroinitializer
  %498 = insertelement <8 x i32> undef, i32 %1296, i32 0
  %499 = shufflevector <8 x i32> %498, <8 x i32> undef, <8 x i32> zeroinitializer
  %500 = getelementptr i16, i16* %487, i64 16
  %501 = bitcast i16* %487 to <8 x i16>*
  %502 = load <8 x i16>, <8 x i16>* %501, align 2, !alias.scope !1071
  %503 = zext <8 x i16> %502 to <8 x i32>
  %504 = mul nuw nsw <8 x i32> %497, %503
  %505 = getelementptr inbounds i16, i16* %487, i64 16
  %506 = bitcast i16* %505 to <8 x i16>*
  %507 = load <8 x i16>, <8 x i16>* %506, align 2, !alias.scope !1071
  %508 = zext <8 x i16> %507 to <8 x i32>
  %509 = mul nuw nsw <8 x i32> %499, %508
  %510 = add nuw nsw <8 x i32> %504, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %511 = add nuw nsw <8 x i32> %510, %509
  %512 = lshr <8 x i32> %511, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %513 = trunc <8 x i32> %512 to <8 x i16>
  %514 = bitcast i16* %488 to <8 x i16>*
  store <8 x i16> %513, <8 x i16>* %514, align 16, !alias.scope !1074, !noalias !1071
  %515 = getelementptr i16, i16* %487, i64 8
  %516 = bitcast i16* %515 to <8 x i16>*
  %517 = load <8 x i16>, <8 x i16>* %516, align 2, !alias.scope !1071
  %518 = zext <8 x i16> %517 to <8 x i32>
  %519 = mul nuw nsw <8 x i32> %497, %518
  %520 = getelementptr inbounds i16, i16* %487, i64 24
  %521 = bitcast i16* %520 to <8 x i16>*
  %522 = load <8 x i16>, <8 x i16>* %521, align 2, !alias.scope !1071
  %523 = zext <8 x i16> %522 to <8 x i32>
  %524 = mul nuw nsw <8 x i32> %499, %523
  %525 = add nuw nsw <8 x i32> %519, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %526 = add nuw nsw <8 x i32> %525, %524
  %527 = lshr <8 x i32> %526, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %528 = trunc <8 x i32> %527 to <8 x i16>
  %529 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 88
  %530 = bitcast i16* %529 to <8 x i16>*
  store <8 x i16> %528, <8 x i16>* %530, align 16, !alias.scope !1074, !noalias !1071
  br label %563

531:                                              ; preds = %486, %531
  %532 = phi i64 [ %561, %531 ], [ 0, %486 ]
  %533 = phi i16* [ %560, %531 ], [ %487, %486 ]
  %534 = load i16, i16* %533, align 2
  %535 = zext i16 %534 to i32
  %536 = mul nuw nsw i32 %1294, %535
  %537 = getelementptr inbounds i16, i16* %533, i64 16
  %538 = load i16, i16* %537, align 2
  %539 = zext i16 %538 to i32
  %540 = mul nuw nsw i32 %1296, %539
  %541 = add nuw nsw i32 %536, 64
  %542 = add nuw nsw i32 %541, %540
  %543 = lshr i32 %542, 7
  %544 = trunc i32 %543 to i16
  %545 = getelementptr inbounds i16, i16* %488, i64 %532
  store i16 %544, i16* %545, align 4
  %546 = getelementptr inbounds i16, i16* %533, i64 1
  %547 = or i64 %532, 1
  %548 = load i16, i16* %546, align 2
  %549 = zext i16 %548 to i32
  %550 = mul nuw nsw i32 %1294, %549
  %551 = getelementptr inbounds i16, i16* %533, i64 17
  %552 = load i16, i16* %551, align 2
  %553 = zext i16 %552 to i32
  %554 = mul nuw nsw i32 %1296, %553
  %555 = add nuw nsw i32 %550, 64
  %556 = add nuw nsw i32 %555, %554
  %557 = lshr i32 %556, 7
  %558 = trunc i32 %557 to i16
  %559 = getelementptr inbounds i16, i16* %488, i64 %547
  store i16 %558, i16* %559, align 2
  %560 = getelementptr inbounds i16, i16* %533, i64 2
  %561 = add nuw nsw i64 %532, 2
  %562 = icmp eq i64 %561, 16
  br i1 %562, label %563, label %531, !llvm.loop !1076

563:                                              ; preds = %531, %495
  %564 = phi i16* [ %500, %495 ], [ %560, %531 ]
  %565 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 96
  %566 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 96
  %567 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 112
  %568 = getelementptr i16, i16* %564, i64 32
  %569 = icmp ult i16* %566, %568
  %570 = icmp ult i16* %564, %567
  %571 = and i1 %569, %570
  br i1 %571, label %608, label %572

572:                                              ; preds = %563
  %573 = insertelement <8 x i32> undef, i32 %1294, i32 0
  %574 = shufflevector <8 x i32> %573, <8 x i32> undef, <8 x i32> zeroinitializer
  %575 = insertelement <8 x i32> undef, i32 %1296, i32 0
  %576 = shufflevector <8 x i32> %575, <8 x i32> undef, <8 x i32> zeroinitializer
  %577 = getelementptr i16, i16* %564, i64 16
  %578 = bitcast i16* %564 to <8 x i16>*
  %579 = load <8 x i16>, <8 x i16>* %578, align 2, !alias.scope !1077
  %580 = zext <8 x i16> %579 to <8 x i32>
  %581 = mul nuw nsw <8 x i32> %574, %580
  %582 = getelementptr inbounds i16, i16* %564, i64 16
  %583 = bitcast i16* %582 to <8 x i16>*
  %584 = load <8 x i16>, <8 x i16>* %583, align 2, !alias.scope !1077
  %585 = zext <8 x i16> %584 to <8 x i32>
  %586 = mul nuw nsw <8 x i32> %576, %585
  %587 = add nuw nsw <8 x i32> %581, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %588 = add nuw nsw <8 x i32> %587, %586
  %589 = lshr <8 x i32> %588, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %590 = trunc <8 x i32> %589 to <8 x i16>
  %591 = bitcast i16* %565 to <8 x i16>*
  store <8 x i16> %590, <8 x i16>* %591, align 16, !alias.scope !1080, !noalias !1077
  %592 = getelementptr i16, i16* %564, i64 8
  %593 = bitcast i16* %592 to <8 x i16>*
  %594 = load <8 x i16>, <8 x i16>* %593, align 2, !alias.scope !1077
  %595 = zext <8 x i16> %594 to <8 x i32>
  %596 = mul nuw nsw <8 x i32> %574, %595
  %597 = getelementptr inbounds i16, i16* %564, i64 24
  %598 = bitcast i16* %597 to <8 x i16>*
  %599 = load <8 x i16>, <8 x i16>* %598, align 2, !alias.scope !1077
  %600 = zext <8 x i16> %599 to <8 x i32>
  %601 = mul nuw nsw <8 x i32> %576, %600
  %602 = add nuw nsw <8 x i32> %596, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %603 = add nuw nsw <8 x i32> %602, %601
  %604 = lshr <8 x i32> %603, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %605 = trunc <8 x i32> %604 to <8 x i16>
  %606 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 104
  %607 = bitcast i16* %606 to <8 x i16>*
  store <8 x i16> %605, <8 x i16>* %607, align 16, !alias.scope !1080, !noalias !1077
  br label %640

608:                                              ; preds = %563, %608
  %609 = phi i64 [ %638, %608 ], [ 0, %563 ]
  %610 = phi i16* [ %637, %608 ], [ %564, %563 ]
  %611 = load i16, i16* %610, align 2
  %612 = zext i16 %611 to i32
  %613 = mul nuw nsw i32 %1294, %612
  %614 = getelementptr inbounds i16, i16* %610, i64 16
  %615 = load i16, i16* %614, align 2
  %616 = zext i16 %615 to i32
  %617 = mul nuw nsw i32 %1296, %616
  %618 = add nuw nsw i32 %613, 64
  %619 = add nuw nsw i32 %618, %617
  %620 = lshr i32 %619, 7
  %621 = trunc i32 %620 to i16
  %622 = getelementptr inbounds i16, i16* %565, i64 %609
  store i16 %621, i16* %622, align 4
  %623 = getelementptr inbounds i16, i16* %610, i64 1
  %624 = or i64 %609, 1
  %625 = load i16, i16* %623, align 2
  %626 = zext i16 %625 to i32
  %627 = mul nuw nsw i32 %1294, %626
  %628 = getelementptr inbounds i16, i16* %610, i64 17
  %629 = load i16, i16* %628, align 2
  %630 = zext i16 %629 to i32
  %631 = mul nuw nsw i32 %1296, %630
  %632 = add nuw nsw i32 %627, 64
  %633 = add nuw nsw i32 %632, %631
  %634 = lshr i32 %633, 7
  %635 = trunc i32 %634 to i16
  %636 = getelementptr inbounds i16, i16* %565, i64 %624
  store i16 %635, i16* %636, align 2
  %637 = getelementptr inbounds i16, i16* %610, i64 2
  %638 = add nuw nsw i64 %609, 2
  %639 = icmp eq i64 %638, 16
  br i1 %639, label %640, label %608, !llvm.loop !1082

640:                                              ; preds = %608, %572
  %641 = phi i16* [ %577, %572 ], [ %637, %608 ]
  %642 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 112
  %643 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 112
  %644 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 1, i64 0
  %645 = getelementptr i16, i16* %641, i64 32
  %646 = icmp ult i16* %643, %645
  %647 = icmp ult i16* %641, %644
  %648 = and i1 %646, %647
  br i1 %648, label %684, label %649

649:                                              ; preds = %640
  %650 = insertelement <8 x i32> undef, i32 %1294, i32 0
  %651 = shufflevector <8 x i32> %650, <8 x i32> undef, <8 x i32> zeroinitializer
  %652 = insertelement <8 x i32> undef, i32 %1296, i32 0
  %653 = shufflevector <8 x i32> %652, <8 x i32> undef, <8 x i32> zeroinitializer
  %654 = bitcast i16* %641 to <8 x i16>*
  %655 = load <8 x i16>, <8 x i16>* %654, align 2, !alias.scope !1083
  %656 = zext <8 x i16> %655 to <8 x i32>
  %657 = mul nuw nsw <8 x i32> %651, %656
  %658 = getelementptr inbounds i16, i16* %641, i64 16
  %659 = bitcast i16* %658 to <8 x i16>*
  %660 = load <8 x i16>, <8 x i16>* %659, align 2, !alias.scope !1083
  %661 = zext <8 x i16> %660 to <8 x i32>
  %662 = mul nuw nsw <8 x i32> %653, %661
  %663 = add nuw nsw <8 x i32> %657, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %664 = add nuw nsw <8 x i32> %663, %662
  %665 = lshr <8 x i32> %664, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %666 = trunc <8 x i32> %665 to <8 x i16>
  %667 = bitcast i16* %642 to <8 x i16>*
  store <8 x i16> %666, <8 x i16>* %667, align 16, !alias.scope !1086, !noalias !1083
  %668 = getelementptr i16, i16* %641, i64 8
  %669 = bitcast i16* %668 to <8 x i16>*
  %670 = load <8 x i16>, <8 x i16>* %669, align 2, !alias.scope !1083
  %671 = zext <8 x i16> %670 to <8 x i32>
  %672 = mul nuw nsw <8 x i32> %651, %671
  %673 = getelementptr inbounds i16, i16* %641, i64 24
  %674 = bitcast i16* %673 to <8 x i16>*
  %675 = load <8 x i16>, <8 x i16>* %674, align 2, !alias.scope !1083
  %676 = zext <8 x i16> %675 to <8 x i32>
  %677 = mul nuw nsw <8 x i32> %653, %676
  %678 = add nuw nsw <8 x i32> %672, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %679 = add nuw nsw <8 x i32> %678, %677
  %680 = lshr <8 x i32> %679, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %681 = trunc <8 x i32> %680 to <8 x i16>
  %682 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 120
  %683 = bitcast i16* %682 to <8 x i16>*
  store <8 x i16> %681, <8 x i16>* %683, align 16, !alias.scope !1086, !noalias !1083
  br label %716

684:                                              ; preds = %640, %684
  %685 = phi i64 [ %714, %684 ], [ 0, %640 ]
  %686 = phi i16* [ %713, %684 ], [ %641, %640 ]
  %687 = load i16, i16* %686, align 2
  %688 = zext i16 %687 to i32
  %689 = mul nuw nsw i32 %1294, %688
  %690 = getelementptr inbounds i16, i16* %686, i64 16
  %691 = load i16, i16* %690, align 2
  %692 = zext i16 %691 to i32
  %693 = mul nuw nsw i32 %1296, %692
  %694 = add nuw nsw i32 %689, 64
  %695 = add nuw nsw i32 %694, %693
  %696 = lshr i32 %695, 7
  %697 = trunc i32 %696 to i16
  %698 = getelementptr inbounds i16, i16* %642, i64 %685
  store i16 %697, i16* %698, align 4
  %699 = getelementptr inbounds i16, i16* %686, i64 1
  %700 = or i64 %685, 1
  %701 = load i16, i16* %699, align 2
  %702 = zext i16 %701 to i32
  %703 = mul nuw nsw i32 %1294, %702
  %704 = getelementptr inbounds i16, i16* %686, i64 17
  %705 = load i16, i16* %704, align 2
  %706 = zext i16 %705 to i32
  %707 = mul nuw nsw i32 %1296, %706
  %708 = add nuw nsw i32 %703, 64
  %709 = add nuw nsw i32 %708, %707
  %710 = lshr i32 %709, 7
  %711 = trunc i32 %710 to i16
  %712 = getelementptr inbounds i16, i16* %642, i64 %700
  store i16 %711, i16* %712, align 2
  %713 = getelementptr inbounds i16, i16* %686, i64 2
  %714 = add nuw nsw i64 %685, 2
  %715 = icmp eq i64 %714, 16
  br i1 %715, label %716, label %684, !llvm.loop !1088

716:                                              ; preds = %684, %649
  %717 = ptrtoint [128 x i16]* %10 to i64
  %718 = lshr exact i64 %717, 1
  %719 = inttoptr i64 %718 to i8*
  %720 = call i32 @vpx_highbd_8_variance16x8_c(i8* nonnull %719, i32 16, i8* %4, i32 %5, i32* %6)
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %11) #4
  call void @llvm.lifetime.end.p0i8(i64 288, i8* nonnull %9) #4
  ret i32 %720

721:                                              ; preds = %99, %721
  %722 = phi i64 [ %749, %721 ], [ 0, %99 ]
  %723 = phi i16* [ %740, %721 ], [ %101, %99 ]
  %724 = load i16, i16* %723, align 2
  %725 = zext i16 %724 to i32
  %726 = mul nuw nsw i32 %22, %725
  %727 = getelementptr inbounds i16, i16* %723, i64 1
  %728 = load i16, i16* %727, align 2
  %729 = zext i16 %728 to i32
  %730 = mul nuw nsw i32 %24, %729
  %731 = add nuw nsw i32 %726, 64
  %732 = add nuw nsw i32 %731, %730
  %733 = lshr i32 %732, 7
  %734 = trunc i32 %733 to i16
  %735 = getelementptr inbounds i16, i16* %102, i64 %722
  store i16 %734, i16* %735, align 4
  %736 = or i64 %722, 1
  %737 = load i16, i16* %727, align 2
  %738 = zext i16 %737 to i32
  %739 = mul nuw nsw i32 %22, %738
  %740 = getelementptr inbounds i16, i16* %723, i64 2
  %741 = load i16, i16* %740, align 2
  %742 = zext i16 %741 to i32
  %743 = mul nuw nsw i32 %24, %742
  %744 = add nuw nsw i32 %739, 64
  %745 = add nuw nsw i32 %744, %743
  %746 = lshr i32 %745, 7
  %747 = trunc i32 %746 to i16
  %748 = getelementptr inbounds i16, i16* %102, i64 %736
  store i16 %747, i16* %748, align 2
  %749 = add nuw nsw i64 %722, 2
  %750 = icmp eq i64 %749, 16
  br i1 %750, label %751, label %721, !llvm.loop !1089

751:                                              ; preds = %721, %110
  %752 = phi i16* [ %115, %110 ], [ %740, %721 ]
  %753 = getelementptr inbounds i16, i16* %752, i64 %20
  %754 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 32
  %755 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 32
  %756 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 48
  %757 = add nuw nsw i64 %20, 17
  %758 = getelementptr i16, i16* %752, i64 %757
  %759 = icmp ult i16* %755, %758
  %760 = icmp ult i16* %753, %756
  %761 = and i1 %759, %760
  br i1 %761, label %798, label %762

762:                                              ; preds = %751
  %763 = insertelement <8 x i32> undef, i32 %22, i32 0
  %764 = shufflevector <8 x i32> %763, <8 x i32> undef, <8 x i32> zeroinitializer
  %765 = insertelement <8 x i32> undef, i32 %24, i32 0
  %766 = shufflevector <8 x i32> %765, <8 x i32> undef, <8 x i32> zeroinitializer
  %767 = getelementptr i16, i16* %753, i64 16
  %768 = bitcast i16* %753 to <8 x i16>*
  %769 = load <8 x i16>, <8 x i16>* %768, align 2, !alias.scope !1090
  %770 = zext <8 x i16> %769 to <8 x i32>
  %771 = mul nuw nsw <8 x i32> %764, %770
  %772 = getelementptr inbounds i16, i16* %753, i64 1
  %773 = bitcast i16* %772 to <8 x i16>*
  %774 = load <8 x i16>, <8 x i16>* %773, align 2, !alias.scope !1090
  %775 = zext <8 x i16> %774 to <8 x i32>
  %776 = mul nuw nsw <8 x i32> %766, %775
  %777 = add nuw nsw <8 x i32> %771, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %778 = add nuw nsw <8 x i32> %777, %776
  %779 = lshr <8 x i32> %778, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %780 = trunc <8 x i32> %779 to <8 x i16>
  %781 = bitcast i16* %754 to <8 x i16>*
  store <8 x i16> %780, <8 x i16>* %781, align 16, !alias.scope !1093, !noalias !1090
  %782 = getelementptr i16, i16* %753, i64 8
  %783 = bitcast i16* %782 to <8 x i16>*
  %784 = load <8 x i16>, <8 x i16>* %783, align 2, !alias.scope !1090
  %785 = zext <8 x i16> %784 to <8 x i32>
  %786 = mul nuw nsw <8 x i32> %764, %785
  %787 = getelementptr inbounds i16, i16* %782, i64 1
  %788 = bitcast i16* %787 to <8 x i16>*
  %789 = load <8 x i16>, <8 x i16>* %788, align 2, !alias.scope !1090
  %790 = zext <8 x i16> %789 to <8 x i32>
  %791 = mul nuw nsw <8 x i32> %766, %790
  %792 = add nuw nsw <8 x i32> %786, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %793 = add nuw nsw <8 x i32> %792, %791
  %794 = lshr <8 x i32> %793, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %795 = trunc <8 x i32> %794 to <8 x i16>
  %796 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 40
  %797 = bitcast i16* %796 to <8 x i16>*
  store <8 x i16> %795, <8 x i16>* %797, align 16, !alias.scope !1093, !noalias !1090
  br label %828

798:                                              ; preds = %751, %798
  %799 = phi i64 [ %826, %798 ], [ 0, %751 ]
  %800 = phi i16* [ %817, %798 ], [ %753, %751 ]
  %801 = load i16, i16* %800, align 2
  %802 = zext i16 %801 to i32
  %803 = mul nuw nsw i32 %22, %802
  %804 = getelementptr inbounds i16, i16* %800, i64 1
  %805 = load i16, i16* %804, align 2
  %806 = zext i16 %805 to i32
  %807 = mul nuw nsw i32 %24, %806
  %808 = add nuw nsw i32 %803, 64
  %809 = add nuw nsw i32 %808, %807
  %810 = lshr i32 %809, 7
  %811 = trunc i32 %810 to i16
  %812 = getelementptr inbounds i16, i16* %754, i64 %799
  store i16 %811, i16* %812, align 4
  %813 = or i64 %799, 1
  %814 = load i16, i16* %804, align 2
  %815 = zext i16 %814 to i32
  %816 = mul nuw nsw i32 %22, %815
  %817 = getelementptr inbounds i16, i16* %800, i64 2
  %818 = load i16, i16* %817, align 2
  %819 = zext i16 %818 to i32
  %820 = mul nuw nsw i32 %24, %819
  %821 = add nuw nsw i32 %816, 64
  %822 = add nuw nsw i32 %821, %820
  %823 = lshr i32 %822, 7
  %824 = trunc i32 %823 to i16
  %825 = getelementptr inbounds i16, i16* %754, i64 %813
  store i16 %824, i16* %825, align 2
  %826 = add nuw nsw i64 %799, 2
  %827 = icmp eq i64 %826, 16
  br i1 %827, label %828, label %798, !llvm.loop !1095

828:                                              ; preds = %798, %762
  %829 = phi i16* [ %767, %762 ], [ %817, %798 ]
  %830 = getelementptr inbounds i16, i16* %829, i64 %20
  %831 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 48
  %832 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 48
  %833 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 64
  %834 = add nuw nsw i64 %20, 17
  %835 = getelementptr i16, i16* %829, i64 %834
  %836 = icmp ult i16* %832, %835
  %837 = icmp ult i16* %830, %833
  %838 = and i1 %836, %837
  br i1 %838, label %875, label %839

839:                                              ; preds = %828
  %840 = insertelement <8 x i32> undef, i32 %22, i32 0
  %841 = shufflevector <8 x i32> %840, <8 x i32> undef, <8 x i32> zeroinitializer
  %842 = insertelement <8 x i32> undef, i32 %24, i32 0
  %843 = shufflevector <8 x i32> %842, <8 x i32> undef, <8 x i32> zeroinitializer
  %844 = getelementptr i16, i16* %830, i64 16
  %845 = bitcast i16* %830 to <8 x i16>*
  %846 = load <8 x i16>, <8 x i16>* %845, align 2, !alias.scope !1096
  %847 = zext <8 x i16> %846 to <8 x i32>
  %848 = mul nuw nsw <8 x i32> %841, %847
  %849 = getelementptr inbounds i16, i16* %830, i64 1
  %850 = bitcast i16* %849 to <8 x i16>*
  %851 = load <8 x i16>, <8 x i16>* %850, align 2, !alias.scope !1096
  %852 = zext <8 x i16> %851 to <8 x i32>
  %853 = mul nuw nsw <8 x i32> %843, %852
  %854 = add nuw nsw <8 x i32> %848, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %855 = add nuw nsw <8 x i32> %854, %853
  %856 = lshr <8 x i32> %855, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %857 = trunc <8 x i32> %856 to <8 x i16>
  %858 = bitcast i16* %831 to <8 x i16>*
  store <8 x i16> %857, <8 x i16>* %858, align 16, !alias.scope !1099, !noalias !1096
  %859 = getelementptr i16, i16* %830, i64 8
  %860 = bitcast i16* %859 to <8 x i16>*
  %861 = load <8 x i16>, <8 x i16>* %860, align 2, !alias.scope !1096
  %862 = zext <8 x i16> %861 to <8 x i32>
  %863 = mul nuw nsw <8 x i32> %841, %862
  %864 = getelementptr inbounds i16, i16* %859, i64 1
  %865 = bitcast i16* %864 to <8 x i16>*
  %866 = load <8 x i16>, <8 x i16>* %865, align 2, !alias.scope !1096
  %867 = zext <8 x i16> %866 to <8 x i32>
  %868 = mul nuw nsw <8 x i32> %843, %867
  %869 = add nuw nsw <8 x i32> %863, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %870 = add nuw nsw <8 x i32> %869, %868
  %871 = lshr <8 x i32> %870, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %872 = trunc <8 x i32> %871 to <8 x i16>
  %873 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 56
  %874 = bitcast i16* %873 to <8 x i16>*
  store <8 x i16> %872, <8 x i16>* %874, align 16, !alias.scope !1099, !noalias !1096
  br label %905

875:                                              ; preds = %828, %875
  %876 = phi i64 [ %903, %875 ], [ 0, %828 ]
  %877 = phi i16* [ %894, %875 ], [ %830, %828 ]
  %878 = load i16, i16* %877, align 2
  %879 = zext i16 %878 to i32
  %880 = mul nuw nsw i32 %22, %879
  %881 = getelementptr inbounds i16, i16* %877, i64 1
  %882 = load i16, i16* %881, align 2
  %883 = zext i16 %882 to i32
  %884 = mul nuw nsw i32 %24, %883
  %885 = add nuw nsw i32 %880, 64
  %886 = add nuw nsw i32 %885, %884
  %887 = lshr i32 %886, 7
  %888 = trunc i32 %887 to i16
  %889 = getelementptr inbounds i16, i16* %831, i64 %876
  store i16 %888, i16* %889, align 4
  %890 = or i64 %876, 1
  %891 = load i16, i16* %881, align 2
  %892 = zext i16 %891 to i32
  %893 = mul nuw nsw i32 %22, %892
  %894 = getelementptr inbounds i16, i16* %877, i64 2
  %895 = load i16, i16* %894, align 2
  %896 = zext i16 %895 to i32
  %897 = mul nuw nsw i32 %24, %896
  %898 = add nuw nsw i32 %893, 64
  %899 = add nuw nsw i32 %898, %897
  %900 = lshr i32 %899, 7
  %901 = trunc i32 %900 to i16
  %902 = getelementptr inbounds i16, i16* %831, i64 %890
  store i16 %901, i16* %902, align 2
  %903 = add nuw nsw i64 %876, 2
  %904 = icmp eq i64 %903, 16
  br i1 %904, label %905, label %875, !llvm.loop !1101

905:                                              ; preds = %875, %839
  %906 = phi i16* [ %844, %839 ], [ %894, %875 ]
  %907 = getelementptr inbounds i16, i16* %906, i64 %20
  %908 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 64
  %909 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 64
  %910 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 80
  %911 = add nuw nsw i64 %20, 17
  %912 = getelementptr i16, i16* %906, i64 %911
  %913 = icmp ult i16* %909, %912
  %914 = icmp ult i16* %907, %910
  %915 = and i1 %913, %914
  br i1 %915, label %952, label %916

916:                                              ; preds = %905
  %917 = insertelement <8 x i32> undef, i32 %22, i32 0
  %918 = shufflevector <8 x i32> %917, <8 x i32> undef, <8 x i32> zeroinitializer
  %919 = insertelement <8 x i32> undef, i32 %24, i32 0
  %920 = shufflevector <8 x i32> %919, <8 x i32> undef, <8 x i32> zeroinitializer
  %921 = getelementptr i16, i16* %907, i64 16
  %922 = bitcast i16* %907 to <8 x i16>*
  %923 = load <8 x i16>, <8 x i16>* %922, align 2, !alias.scope !1102
  %924 = zext <8 x i16> %923 to <8 x i32>
  %925 = mul nuw nsw <8 x i32> %918, %924
  %926 = getelementptr inbounds i16, i16* %907, i64 1
  %927 = bitcast i16* %926 to <8 x i16>*
  %928 = load <8 x i16>, <8 x i16>* %927, align 2, !alias.scope !1102
  %929 = zext <8 x i16> %928 to <8 x i32>
  %930 = mul nuw nsw <8 x i32> %920, %929
  %931 = add nuw nsw <8 x i32> %925, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %932 = add nuw nsw <8 x i32> %931, %930
  %933 = lshr <8 x i32> %932, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %934 = trunc <8 x i32> %933 to <8 x i16>
  %935 = bitcast i16* %908 to <8 x i16>*
  store <8 x i16> %934, <8 x i16>* %935, align 16, !alias.scope !1105, !noalias !1102
  %936 = getelementptr i16, i16* %907, i64 8
  %937 = bitcast i16* %936 to <8 x i16>*
  %938 = load <8 x i16>, <8 x i16>* %937, align 2, !alias.scope !1102
  %939 = zext <8 x i16> %938 to <8 x i32>
  %940 = mul nuw nsw <8 x i32> %918, %939
  %941 = getelementptr inbounds i16, i16* %936, i64 1
  %942 = bitcast i16* %941 to <8 x i16>*
  %943 = load <8 x i16>, <8 x i16>* %942, align 2, !alias.scope !1102
  %944 = zext <8 x i16> %943 to <8 x i32>
  %945 = mul nuw nsw <8 x i32> %920, %944
  %946 = add nuw nsw <8 x i32> %940, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %947 = add nuw nsw <8 x i32> %946, %945
  %948 = lshr <8 x i32> %947, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %949 = trunc <8 x i32> %948 to <8 x i16>
  %950 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 72
  %951 = bitcast i16* %950 to <8 x i16>*
  store <8 x i16> %949, <8 x i16>* %951, align 16, !alias.scope !1105, !noalias !1102
  br label %982

952:                                              ; preds = %905, %952
  %953 = phi i64 [ %980, %952 ], [ 0, %905 ]
  %954 = phi i16* [ %971, %952 ], [ %907, %905 ]
  %955 = load i16, i16* %954, align 2
  %956 = zext i16 %955 to i32
  %957 = mul nuw nsw i32 %22, %956
  %958 = getelementptr inbounds i16, i16* %954, i64 1
  %959 = load i16, i16* %958, align 2
  %960 = zext i16 %959 to i32
  %961 = mul nuw nsw i32 %24, %960
  %962 = add nuw nsw i32 %957, 64
  %963 = add nuw nsw i32 %962, %961
  %964 = lshr i32 %963, 7
  %965 = trunc i32 %964 to i16
  %966 = getelementptr inbounds i16, i16* %908, i64 %953
  store i16 %965, i16* %966, align 4
  %967 = or i64 %953, 1
  %968 = load i16, i16* %958, align 2
  %969 = zext i16 %968 to i32
  %970 = mul nuw nsw i32 %22, %969
  %971 = getelementptr inbounds i16, i16* %954, i64 2
  %972 = load i16, i16* %971, align 2
  %973 = zext i16 %972 to i32
  %974 = mul nuw nsw i32 %24, %973
  %975 = add nuw nsw i32 %970, 64
  %976 = add nuw nsw i32 %975, %974
  %977 = lshr i32 %976, 7
  %978 = trunc i32 %977 to i16
  %979 = getelementptr inbounds i16, i16* %908, i64 %967
  store i16 %978, i16* %979, align 2
  %980 = add nuw nsw i64 %953, 2
  %981 = icmp eq i64 %980, 16
  br i1 %981, label %982, label %952, !llvm.loop !1107

982:                                              ; preds = %952, %916
  %983 = phi i16* [ %921, %916 ], [ %971, %952 ]
  %984 = getelementptr inbounds i16, i16* %983, i64 %20
  %985 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 80
  %986 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 80
  %987 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 96
  %988 = add nuw nsw i64 %20, 17
  %989 = getelementptr i16, i16* %983, i64 %988
  %990 = icmp ult i16* %986, %989
  %991 = icmp ult i16* %984, %987
  %992 = and i1 %990, %991
  br i1 %992, label %1029, label %993

993:                                              ; preds = %982
  %994 = insertelement <8 x i32> undef, i32 %22, i32 0
  %995 = shufflevector <8 x i32> %994, <8 x i32> undef, <8 x i32> zeroinitializer
  %996 = insertelement <8 x i32> undef, i32 %24, i32 0
  %997 = shufflevector <8 x i32> %996, <8 x i32> undef, <8 x i32> zeroinitializer
  %998 = getelementptr i16, i16* %984, i64 16
  %999 = bitcast i16* %984 to <8 x i16>*
  %1000 = load <8 x i16>, <8 x i16>* %999, align 2, !alias.scope !1108
  %1001 = zext <8 x i16> %1000 to <8 x i32>
  %1002 = mul nuw nsw <8 x i32> %995, %1001
  %1003 = getelementptr inbounds i16, i16* %984, i64 1
  %1004 = bitcast i16* %1003 to <8 x i16>*
  %1005 = load <8 x i16>, <8 x i16>* %1004, align 2, !alias.scope !1108
  %1006 = zext <8 x i16> %1005 to <8 x i32>
  %1007 = mul nuw nsw <8 x i32> %997, %1006
  %1008 = add nuw nsw <8 x i32> %1002, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %1009 = add nuw nsw <8 x i32> %1008, %1007
  %1010 = lshr <8 x i32> %1009, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %1011 = trunc <8 x i32> %1010 to <8 x i16>
  %1012 = bitcast i16* %985 to <8 x i16>*
  store <8 x i16> %1011, <8 x i16>* %1012, align 16, !alias.scope !1111, !noalias !1108
  %1013 = getelementptr i16, i16* %984, i64 8
  %1014 = bitcast i16* %1013 to <8 x i16>*
  %1015 = load <8 x i16>, <8 x i16>* %1014, align 2, !alias.scope !1108
  %1016 = zext <8 x i16> %1015 to <8 x i32>
  %1017 = mul nuw nsw <8 x i32> %995, %1016
  %1018 = getelementptr inbounds i16, i16* %1013, i64 1
  %1019 = bitcast i16* %1018 to <8 x i16>*
  %1020 = load <8 x i16>, <8 x i16>* %1019, align 2, !alias.scope !1108
  %1021 = zext <8 x i16> %1020 to <8 x i32>
  %1022 = mul nuw nsw <8 x i32> %997, %1021
  %1023 = add nuw nsw <8 x i32> %1017, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %1024 = add nuw nsw <8 x i32> %1023, %1022
  %1025 = lshr <8 x i32> %1024, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %1026 = trunc <8 x i32> %1025 to <8 x i16>
  %1027 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 88
  %1028 = bitcast i16* %1027 to <8 x i16>*
  store <8 x i16> %1026, <8 x i16>* %1028, align 16, !alias.scope !1111, !noalias !1108
  br label %1059

1029:                                             ; preds = %982, %1029
  %1030 = phi i64 [ %1057, %1029 ], [ 0, %982 ]
  %1031 = phi i16* [ %1048, %1029 ], [ %984, %982 ]
  %1032 = load i16, i16* %1031, align 2
  %1033 = zext i16 %1032 to i32
  %1034 = mul nuw nsw i32 %22, %1033
  %1035 = getelementptr inbounds i16, i16* %1031, i64 1
  %1036 = load i16, i16* %1035, align 2
  %1037 = zext i16 %1036 to i32
  %1038 = mul nuw nsw i32 %24, %1037
  %1039 = add nuw nsw i32 %1034, 64
  %1040 = add nuw nsw i32 %1039, %1038
  %1041 = lshr i32 %1040, 7
  %1042 = trunc i32 %1041 to i16
  %1043 = getelementptr inbounds i16, i16* %985, i64 %1030
  store i16 %1042, i16* %1043, align 4
  %1044 = or i64 %1030, 1
  %1045 = load i16, i16* %1035, align 2
  %1046 = zext i16 %1045 to i32
  %1047 = mul nuw nsw i32 %22, %1046
  %1048 = getelementptr inbounds i16, i16* %1031, i64 2
  %1049 = load i16, i16* %1048, align 2
  %1050 = zext i16 %1049 to i32
  %1051 = mul nuw nsw i32 %24, %1050
  %1052 = add nuw nsw i32 %1047, 64
  %1053 = add nuw nsw i32 %1052, %1051
  %1054 = lshr i32 %1053, 7
  %1055 = trunc i32 %1054 to i16
  %1056 = getelementptr inbounds i16, i16* %985, i64 %1044
  store i16 %1055, i16* %1056, align 2
  %1057 = add nuw nsw i64 %1030, 2
  %1058 = icmp eq i64 %1057, 16
  br i1 %1058, label %1059, label %1029, !llvm.loop !1113

1059:                                             ; preds = %1029, %993
  %1060 = phi i16* [ %998, %993 ], [ %1048, %1029 ]
  %1061 = getelementptr inbounds i16, i16* %1060, i64 %20
  %1062 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 96
  %1063 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 96
  %1064 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 112
  %1065 = add nuw nsw i64 %20, 17
  %1066 = getelementptr i16, i16* %1060, i64 %1065
  %1067 = icmp ult i16* %1063, %1066
  %1068 = icmp ult i16* %1061, %1064
  %1069 = and i1 %1067, %1068
  br i1 %1069, label %1106, label %1070

1070:                                             ; preds = %1059
  %1071 = insertelement <8 x i32> undef, i32 %22, i32 0
  %1072 = shufflevector <8 x i32> %1071, <8 x i32> undef, <8 x i32> zeroinitializer
  %1073 = insertelement <8 x i32> undef, i32 %24, i32 0
  %1074 = shufflevector <8 x i32> %1073, <8 x i32> undef, <8 x i32> zeroinitializer
  %1075 = getelementptr i16, i16* %1061, i64 16
  %1076 = bitcast i16* %1061 to <8 x i16>*
  %1077 = load <8 x i16>, <8 x i16>* %1076, align 2, !alias.scope !1114
  %1078 = zext <8 x i16> %1077 to <8 x i32>
  %1079 = mul nuw nsw <8 x i32> %1072, %1078
  %1080 = getelementptr inbounds i16, i16* %1061, i64 1
  %1081 = bitcast i16* %1080 to <8 x i16>*
  %1082 = load <8 x i16>, <8 x i16>* %1081, align 2, !alias.scope !1114
  %1083 = zext <8 x i16> %1082 to <8 x i32>
  %1084 = mul nuw nsw <8 x i32> %1074, %1083
  %1085 = add nuw nsw <8 x i32> %1079, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %1086 = add nuw nsw <8 x i32> %1085, %1084
  %1087 = lshr <8 x i32> %1086, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %1088 = trunc <8 x i32> %1087 to <8 x i16>
  %1089 = bitcast i16* %1062 to <8 x i16>*
  store <8 x i16> %1088, <8 x i16>* %1089, align 16, !alias.scope !1117, !noalias !1114
  %1090 = getelementptr i16, i16* %1061, i64 8
  %1091 = bitcast i16* %1090 to <8 x i16>*
  %1092 = load <8 x i16>, <8 x i16>* %1091, align 2, !alias.scope !1114
  %1093 = zext <8 x i16> %1092 to <8 x i32>
  %1094 = mul nuw nsw <8 x i32> %1072, %1093
  %1095 = getelementptr inbounds i16, i16* %1090, i64 1
  %1096 = bitcast i16* %1095 to <8 x i16>*
  %1097 = load <8 x i16>, <8 x i16>* %1096, align 2, !alias.scope !1114
  %1098 = zext <8 x i16> %1097 to <8 x i32>
  %1099 = mul nuw nsw <8 x i32> %1074, %1098
  %1100 = add nuw nsw <8 x i32> %1094, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %1101 = add nuw nsw <8 x i32> %1100, %1099
  %1102 = lshr <8 x i32> %1101, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %1103 = trunc <8 x i32> %1102 to <8 x i16>
  %1104 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 104
  %1105 = bitcast i16* %1104 to <8 x i16>*
  store <8 x i16> %1103, <8 x i16>* %1105, align 16, !alias.scope !1117, !noalias !1114
  br label %1136

1106:                                             ; preds = %1059, %1106
  %1107 = phi i64 [ %1134, %1106 ], [ 0, %1059 ]
  %1108 = phi i16* [ %1125, %1106 ], [ %1061, %1059 ]
  %1109 = load i16, i16* %1108, align 2
  %1110 = zext i16 %1109 to i32
  %1111 = mul nuw nsw i32 %22, %1110
  %1112 = getelementptr inbounds i16, i16* %1108, i64 1
  %1113 = load i16, i16* %1112, align 2
  %1114 = zext i16 %1113 to i32
  %1115 = mul nuw nsw i32 %24, %1114
  %1116 = add nuw nsw i32 %1111, 64
  %1117 = add nuw nsw i32 %1116, %1115
  %1118 = lshr i32 %1117, 7
  %1119 = trunc i32 %1118 to i16
  %1120 = getelementptr inbounds i16, i16* %1062, i64 %1107
  store i16 %1119, i16* %1120, align 4
  %1121 = or i64 %1107, 1
  %1122 = load i16, i16* %1112, align 2
  %1123 = zext i16 %1122 to i32
  %1124 = mul nuw nsw i32 %22, %1123
  %1125 = getelementptr inbounds i16, i16* %1108, i64 2
  %1126 = load i16, i16* %1125, align 2
  %1127 = zext i16 %1126 to i32
  %1128 = mul nuw nsw i32 %24, %1127
  %1129 = add nuw nsw i32 %1124, 64
  %1130 = add nuw nsw i32 %1129, %1128
  %1131 = lshr i32 %1130, 7
  %1132 = trunc i32 %1131 to i16
  %1133 = getelementptr inbounds i16, i16* %1062, i64 %1121
  store i16 %1132, i16* %1133, align 2
  %1134 = add nuw nsw i64 %1107, 2
  %1135 = icmp eq i64 %1134, 16
  br i1 %1135, label %1136, label %1106, !llvm.loop !1119

1136:                                             ; preds = %1106, %1070
  %1137 = phi i16* [ %1075, %1070 ], [ %1125, %1106 ]
  %1138 = getelementptr inbounds i16, i16* %1137, i64 %20
  %1139 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 112
  %1140 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 112
  %1141 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 128
  %1142 = add nuw nsw i64 %20, 17
  %1143 = getelementptr i16, i16* %1137, i64 %1142
  %1144 = icmp ult i16* %1140, %1143
  %1145 = icmp ult i16* %1138, %1141
  %1146 = and i1 %1144, %1145
  br i1 %1146, label %1183, label %1147

1147:                                             ; preds = %1136
  %1148 = insertelement <8 x i32> undef, i32 %22, i32 0
  %1149 = shufflevector <8 x i32> %1148, <8 x i32> undef, <8 x i32> zeroinitializer
  %1150 = insertelement <8 x i32> undef, i32 %24, i32 0
  %1151 = shufflevector <8 x i32> %1150, <8 x i32> undef, <8 x i32> zeroinitializer
  %1152 = getelementptr i16, i16* %1138, i64 16
  %1153 = bitcast i16* %1138 to <8 x i16>*
  %1154 = load <8 x i16>, <8 x i16>* %1153, align 2, !alias.scope !1120
  %1155 = zext <8 x i16> %1154 to <8 x i32>
  %1156 = mul nuw nsw <8 x i32> %1149, %1155
  %1157 = getelementptr inbounds i16, i16* %1138, i64 1
  %1158 = bitcast i16* %1157 to <8 x i16>*
  %1159 = load <8 x i16>, <8 x i16>* %1158, align 2, !alias.scope !1120
  %1160 = zext <8 x i16> %1159 to <8 x i32>
  %1161 = mul nuw nsw <8 x i32> %1151, %1160
  %1162 = add nuw nsw <8 x i32> %1156, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %1163 = add nuw nsw <8 x i32> %1162, %1161
  %1164 = lshr <8 x i32> %1163, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %1165 = trunc <8 x i32> %1164 to <8 x i16>
  %1166 = bitcast i16* %1139 to <8 x i16>*
  store <8 x i16> %1165, <8 x i16>* %1166, align 16, !alias.scope !1123, !noalias !1120
  %1167 = getelementptr i16, i16* %1138, i64 8
  %1168 = bitcast i16* %1167 to <8 x i16>*
  %1169 = load <8 x i16>, <8 x i16>* %1168, align 2, !alias.scope !1120
  %1170 = zext <8 x i16> %1169 to <8 x i32>
  %1171 = mul nuw nsw <8 x i32> %1149, %1170
  %1172 = getelementptr inbounds i16, i16* %1167, i64 1
  %1173 = bitcast i16* %1172 to <8 x i16>*
  %1174 = load <8 x i16>, <8 x i16>* %1173, align 2, !alias.scope !1120
  %1175 = zext <8 x i16> %1174 to <8 x i32>
  %1176 = mul nuw nsw <8 x i32> %1151, %1175
  %1177 = add nuw nsw <8 x i32> %1171, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %1178 = add nuw nsw <8 x i32> %1177, %1176
  %1179 = lshr <8 x i32> %1178, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %1180 = trunc <8 x i32> %1179 to <8 x i16>
  %1181 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 120
  %1182 = bitcast i16* %1181 to <8 x i16>*
  store <8 x i16> %1180, <8 x i16>* %1182, align 16, !alias.scope !1123, !noalias !1120
  br label %1213

1183:                                             ; preds = %1136, %1183
  %1184 = phi i64 [ %1211, %1183 ], [ 0, %1136 ]
  %1185 = phi i16* [ %1202, %1183 ], [ %1138, %1136 ]
  %1186 = load i16, i16* %1185, align 2
  %1187 = zext i16 %1186 to i32
  %1188 = mul nuw nsw i32 %22, %1187
  %1189 = getelementptr inbounds i16, i16* %1185, i64 1
  %1190 = load i16, i16* %1189, align 2
  %1191 = zext i16 %1190 to i32
  %1192 = mul nuw nsw i32 %24, %1191
  %1193 = add nuw nsw i32 %1188, 64
  %1194 = add nuw nsw i32 %1193, %1192
  %1195 = lshr i32 %1194, 7
  %1196 = trunc i32 %1195 to i16
  %1197 = getelementptr inbounds i16, i16* %1139, i64 %1184
  store i16 %1196, i16* %1197, align 4
  %1198 = or i64 %1184, 1
  %1199 = load i16, i16* %1189, align 2
  %1200 = zext i16 %1199 to i32
  %1201 = mul nuw nsw i32 %22, %1200
  %1202 = getelementptr inbounds i16, i16* %1185, i64 2
  %1203 = load i16, i16* %1202, align 2
  %1204 = zext i16 %1203 to i32
  %1205 = mul nuw nsw i32 %24, %1204
  %1206 = add nuw nsw i32 %1201, 64
  %1207 = add nuw nsw i32 %1206, %1205
  %1208 = lshr i32 %1207, 7
  %1209 = trunc i32 %1208 to i16
  %1210 = getelementptr inbounds i16, i16* %1139, i64 %1198
  store i16 %1209, i16* %1210, align 2
  %1211 = add nuw nsw i64 %1184, 2
  %1212 = icmp eq i64 %1211, 16
  br i1 %1212, label %1213, label %1183, !llvm.loop !1125

1213:                                             ; preds = %1183, %1147
  %1214 = phi i16* [ %1152, %1147 ], [ %1202, %1183 ]
  %1215 = getelementptr inbounds i16, i16* %1214, i64 %20
  %1216 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 128
  %1217 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 128
  %1218 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 1, i64 0
  %1219 = add nuw nsw i64 %20, 17
  %1220 = getelementptr i16, i16* %1214, i64 %1219
  %1221 = icmp ult i16* %1217, %1220
  %1222 = icmp ult i16* %1215, %1218
  %1223 = and i1 %1221, %1222
  br i1 %1223, label %1259, label %1224

1224:                                             ; preds = %1213
  %1225 = insertelement <8 x i32> undef, i32 %22, i32 0
  %1226 = shufflevector <8 x i32> %1225, <8 x i32> undef, <8 x i32> zeroinitializer
  %1227 = insertelement <8 x i32> undef, i32 %24, i32 0
  %1228 = shufflevector <8 x i32> %1227, <8 x i32> undef, <8 x i32> zeroinitializer
  %1229 = bitcast i16* %1215 to <8 x i16>*
  %1230 = load <8 x i16>, <8 x i16>* %1229, align 2, !alias.scope !1126
  %1231 = zext <8 x i16> %1230 to <8 x i32>
  %1232 = mul nuw nsw <8 x i32> %1226, %1231
  %1233 = getelementptr inbounds i16, i16* %1215, i64 1
  %1234 = bitcast i16* %1233 to <8 x i16>*
  %1235 = load <8 x i16>, <8 x i16>* %1234, align 2, !alias.scope !1126
  %1236 = zext <8 x i16> %1235 to <8 x i32>
  %1237 = mul nuw nsw <8 x i32> %1228, %1236
  %1238 = add nuw nsw <8 x i32> %1232, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %1239 = add nuw nsw <8 x i32> %1238, %1237
  %1240 = lshr <8 x i32> %1239, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %1241 = trunc <8 x i32> %1240 to <8 x i16>
  %1242 = bitcast i16* %1216 to <8 x i16>*
  store <8 x i16> %1241, <8 x i16>* %1242, align 16, !alias.scope !1129, !noalias !1126
  %1243 = getelementptr i16, i16* %1215, i64 8
  %1244 = bitcast i16* %1243 to <8 x i16>*
  %1245 = load <8 x i16>, <8 x i16>* %1244, align 2, !alias.scope !1126
  %1246 = zext <8 x i16> %1245 to <8 x i32>
  %1247 = mul nuw nsw <8 x i32> %1226, %1246
  %1248 = getelementptr inbounds i16, i16* %1243, i64 1
  %1249 = bitcast i16* %1248 to <8 x i16>*
  %1250 = load <8 x i16>, <8 x i16>* %1249, align 2, !alias.scope !1126
  %1251 = zext <8 x i16> %1250 to <8 x i32>
  %1252 = mul nuw nsw <8 x i32> %1228, %1251
  %1253 = add nuw nsw <8 x i32> %1247, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %1254 = add nuw nsw <8 x i32> %1253, %1252
  %1255 = lshr <8 x i32> %1254, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %1256 = trunc <8 x i32> %1255 to <8 x i16>
  %1257 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 136
  %1258 = bitcast i16* %1257 to <8 x i16>*
  store <8 x i16> %1256, <8 x i16>* %1258, align 16, !alias.scope !1129, !noalias !1126
  br label %1289

1259:                                             ; preds = %1213, %1259
  %1260 = phi i64 [ %1287, %1259 ], [ 0, %1213 ]
  %1261 = phi i16* [ %1278, %1259 ], [ %1215, %1213 ]
  %1262 = load i16, i16* %1261, align 2
  %1263 = zext i16 %1262 to i32
  %1264 = mul nuw nsw i32 %22, %1263
  %1265 = getelementptr inbounds i16, i16* %1261, i64 1
  %1266 = load i16, i16* %1265, align 2
  %1267 = zext i16 %1266 to i32
  %1268 = mul nuw nsw i32 %24, %1267
  %1269 = add nuw nsw i32 %1264, 64
  %1270 = add nuw nsw i32 %1269, %1268
  %1271 = lshr i32 %1270, 7
  %1272 = trunc i32 %1271 to i16
  %1273 = getelementptr inbounds i16, i16* %1216, i64 %1260
  store i16 %1272, i16* %1273, align 4
  %1274 = or i64 %1260, 1
  %1275 = load i16, i16* %1265, align 2
  %1276 = zext i16 %1275 to i32
  %1277 = mul nuw nsw i32 %22, %1276
  %1278 = getelementptr inbounds i16, i16* %1261, i64 2
  %1279 = load i16, i16* %1278, align 2
  %1280 = zext i16 %1279 to i32
  %1281 = mul nuw nsw i32 %24, %1280
  %1282 = add nuw nsw i32 %1277, 64
  %1283 = add nuw nsw i32 %1282, %1281
  %1284 = lshr i32 %1283, 7
  %1285 = trunc i32 %1284 to i16
  %1286 = getelementptr inbounds i16, i16* %1216, i64 %1274
  store i16 %1285, i16* %1286, align 2
  %1287 = add nuw nsw i64 %1260, 2
  %1288 = icmp eq i64 %1287, 16
  br i1 %1288, label %1289, label %1259, !llvm.loop !1131

1289:                                             ; preds = %1259, %1224
  %1290 = sext i32 %3 to i64
  %1291 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %1290, i64 0
  %1292 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %1290, i64 1
  %1293 = load i8, i8* %1291, align 2
  %1294 = zext i8 %1293 to i32
  %1295 = load i8, i8* %1292, align 1
  %1296 = zext i8 %1295 to i32
  %1297 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 16
  %1298 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 32
  %1299 = bitcast i16* %1298 to [128 x i16]*
  %1300 = icmp ult [128 x i16]* %10, %1299
  %1301 = bitcast i16* %1297 to [144 x i16]*
  %1302 = icmp ult [144 x i16]* %8, %1301
  %1303 = and i1 %1300, %1302
  br i1 %1303, label %146, label %1304

1304:                                             ; preds = %1289
  %1305 = insertelement <8 x i32> undef, i32 %1294, i32 0
  %1306 = shufflevector <8 x i32> %1305, <8 x i32> undef, <8 x i32> zeroinitializer
  %1307 = insertelement <8 x i32> undef, i32 %1296, i32 0
  %1308 = shufflevector <8 x i32> %1307, <8 x i32> undef, <8 x i32> zeroinitializer
  %1309 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 16
  %1310 = bitcast [144 x i16]* %8 to <8 x i16>*
  %1311 = load <8 x i16>, <8 x i16>* %1310, align 16, !alias.scope !1132
  %1312 = zext <8 x i16> %1311 to <8 x i32>
  %1313 = mul nuw nsw <8 x i32> %1306, %1312
  %1314 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 16
  %1315 = bitcast i16* %1314 to <8 x i16>*
  %1316 = load <8 x i16>, <8 x i16>* %1315, align 16, !alias.scope !1132
  %1317 = zext <8 x i16> %1316 to <8 x i32>
  %1318 = mul nuw nsw <8 x i32> %1308, %1317
  %1319 = add nuw nsw <8 x i32> %1313, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %1320 = add nuw nsw <8 x i32> %1319, %1318
  %1321 = lshr <8 x i32> %1320, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %1322 = trunc <8 x i32> %1321 to <8 x i16>
  %1323 = bitcast [128 x i16]* %10 to <8 x i16>*
  store <8 x i16> %1322, <8 x i16>* %1323, align 16, !alias.scope !1135, !noalias !1132
  %1324 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 8
  %1325 = bitcast i16* %1324 to <8 x i16>*
  %1326 = load <8 x i16>, <8 x i16>* %1325, align 16, !alias.scope !1132
  %1327 = zext <8 x i16> %1326 to <8 x i32>
  %1328 = mul nuw nsw <8 x i32> %1306, %1327
  %1329 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 24
  %1330 = bitcast i16* %1329 to <8 x i16>*
  %1331 = load <8 x i16>, <8 x i16>* %1330, align 16, !alias.scope !1132
  %1332 = zext <8 x i16> %1331 to <8 x i32>
  %1333 = mul nuw nsw <8 x i32> %1308, %1332
  %1334 = add nuw nsw <8 x i32> %1328, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %1335 = add nuw nsw <8 x i32> %1334, %1333
  %1336 = lshr <8 x i32> %1335, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %1337 = trunc <8 x i32> %1336 to <8 x i16>
  %1338 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 8
  %1339 = bitcast i16* %1338 to <8 x i16>*
  store <8 x i16> %1337, <8 x i16>* %1339, align 16, !alias.scope !1135, !noalias !1132
  br label %178
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_highbd_10_sub_pixel_variance16x8_c(i8*, i32, i32, i32, i8*, i32, i32* nocapture) local_unnamed_addr #2 {
  %8 = alloca [144 x i16], align 16
  %9 = bitcast [144 x i16]* %8 to i8*
  %10 = alloca [128 x i16], align 16
  %11 = bitcast [128 x i16]* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 288, i8* nonnull %9) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %9, i8 -86, i64 288, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %11) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %11, i8 -86, i64 256, i1 false)
  %12 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 0
  %13 = sext i32 %2 to i64
  %14 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %13, i64 0
  %15 = ptrtoint i8* %0 to i64
  %16 = shl i64 %15, 1
  %17 = inttoptr i64 %16 to i16*
  %18 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %13, i64 1
  %19 = add i32 %1, -16
  %20 = zext i32 %19 to i64
  %21 = load i8, i8* %14, align 2
  %22 = zext i8 %21 to i32
  %23 = load i8, i8* %18, align 1
  %24 = zext i8 %23 to i32
  %25 = inttoptr i64 %16 to i8*
  %26 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 16
  %27 = bitcast i16* %26 to i8*
  %28 = getelementptr i16, i16* %17, i64 17
  %29 = bitcast i16* %28 to [144 x i16]*
  %30 = icmp ult [144 x i16]* %8, %29
  %31 = icmp ult i8* %25, %27
  %32 = and i1 %30, %31
  br i1 %32, label %69, label %33

33:                                               ; preds = %7
  %34 = insertelement <8 x i32> undef, i32 %22, i32 0
  %35 = shufflevector <8 x i32> %34, <8 x i32> undef, <8 x i32> zeroinitializer
  %36 = insertelement <8 x i32> undef, i32 %24, i32 0
  %37 = shufflevector <8 x i32> %36, <8 x i32> undef, <8 x i32> zeroinitializer
  %38 = getelementptr i16, i16* %17, i64 16
  %39 = inttoptr i64 %16 to <8 x i16>*
  %40 = load <8 x i16>, <8 x i16>* %39, align 2, !alias.scope !1137
  %41 = zext <8 x i16> %40 to <8 x i32>
  %42 = mul nuw nsw <8 x i32> %35, %41
  %43 = getelementptr inbounds i16, i16* %17, i64 1
  %44 = bitcast i16* %43 to <8 x i16>*
  %45 = load <8 x i16>, <8 x i16>* %44, align 2, !alias.scope !1137
  %46 = zext <8 x i16> %45 to <8 x i32>
  %47 = mul nuw nsw <8 x i32> %37, %46
  %48 = add nuw nsw <8 x i32> %42, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %49 = add nuw nsw <8 x i32> %48, %47
  %50 = lshr <8 x i32> %49, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %51 = trunc <8 x i32> %50 to <8 x i16>
  %52 = bitcast [144 x i16]* %8 to <8 x i16>*
  store <8 x i16> %51, <8 x i16>* %52, align 16, !alias.scope !1140, !noalias !1137
  %53 = getelementptr i16, i16* %17, i64 8
  %54 = bitcast i16* %53 to <8 x i16>*
  %55 = load <8 x i16>, <8 x i16>* %54, align 2, !alias.scope !1137
  %56 = zext <8 x i16> %55 to <8 x i32>
  %57 = mul nuw nsw <8 x i32> %35, %56
  %58 = getelementptr inbounds i16, i16* %17, i64 9
  %59 = bitcast i16* %58 to <8 x i16>*
  %60 = load <8 x i16>, <8 x i16>* %59, align 2, !alias.scope !1137
  %61 = zext <8 x i16> %60 to <8 x i32>
  %62 = mul nuw nsw <8 x i32> %37, %61
  %63 = add nuw nsw <8 x i32> %57, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %64 = add nuw nsw <8 x i32> %63, %62
  %65 = lshr <8 x i32> %64, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %66 = trunc <8 x i32> %65 to <8 x i16>
  %67 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 8
  %68 = bitcast i16* %67 to <8 x i16>*
  store <8 x i16> %66, <8 x i16>* %68, align 16, !alias.scope !1140, !noalias !1137
  br label %99

69:                                               ; preds = %7, %69
  %70 = phi i64 [ %97, %69 ], [ 0, %7 ]
  %71 = phi i16* [ %88, %69 ], [ %17, %7 ]
  %72 = load i16, i16* %71, align 2
  %73 = zext i16 %72 to i32
  %74 = mul nuw nsw i32 %22, %73
  %75 = getelementptr inbounds i16, i16* %71, i64 1
  %76 = load i16, i16* %75, align 2
  %77 = zext i16 %76 to i32
  %78 = mul nuw nsw i32 %24, %77
  %79 = add nuw nsw i32 %74, 64
  %80 = add nuw nsw i32 %79, %78
  %81 = lshr i32 %80, 7
  %82 = trunc i32 %81 to i16
  %83 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 %70
  store i16 %82, i16* %83, align 4
  %84 = or i64 %70, 1
  %85 = load i16, i16* %75, align 2
  %86 = zext i16 %85 to i32
  %87 = mul nuw nsw i32 %22, %86
  %88 = getelementptr inbounds i16, i16* %71, i64 2
  %89 = load i16, i16* %88, align 2
  %90 = zext i16 %89 to i32
  %91 = mul nuw nsw i32 %24, %90
  %92 = add nuw nsw i32 %87, 64
  %93 = add nuw nsw i32 %92, %91
  %94 = lshr i32 %93, 7
  %95 = trunc i32 %94 to i16
  %96 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 %84
  store i16 %95, i16* %96, align 2
  %97 = add nuw nsw i64 %70, 2
  %98 = icmp eq i64 %97, 16
  br i1 %98, label %99, label %69, !llvm.loop !1142

99:                                               ; preds = %69, %33
  %100 = phi i16* [ %38, %33 ], [ %88, %69 ]
  %101 = getelementptr inbounds i16, i16* %100, i64 %20
  %102 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 16
  %103 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 16
  %104 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 32
  %105 = add nuw nsw i64 %20, 17
  %106 = getelementptr i16, i16* %100, i64 %105
  %107 = icmp ult i16* %103, %106
  %108 = icmp ult i16* %101, %104
  %109 = and i1 %107, %108
  br i1 %109, label %721, label %110

110:                                              ; preds = %99
  %111 = insertelement <8 x i32> undef, i32 %22, i32 0
  %112 = shufflevector <8 x i32> %111, <8 x i32> undef, <8 x i32> zeroinitializer
  %113 = insertelement <8 x i32> undef, i32 %24, i32 0
  %114 = shufflevector <8 x i32> %113, <8 x i32> undef, <8 x i32> zeroinitializer
  %115 = getelementptr i16, i16* %101, i64 16
  %116 = bitcast i16* %101 to <8 x i16>*
  %117 = load <8 x i16>, <8 x i16>* %116, align 2, !alias.scope !1143
  %118 = zext <8 x i16> %117 to <8 x i32>
  %119 = mul nuw nsw <8 x i32> %112, %118
  %120 = getelementptr inbounds i16, i16* %101, i64 1
  %121 = bitcast i16* %120 to <8 x i16>*
  %122 = load <8 x i16>, <8 x i16>* %121, align 2, !alias.scope !1143
  %123 = zext <8 x i16> %122 to <8 x i32>
  %124 = mul nuw nsw <8 x i32> %114, %123
  %125 = add nuw nsw <8 x i32> %119, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %126 = add nuw nsw <8 x i32> %125, %124
  %127 = lshr <8 x i32> %126, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %128 = trunc <8 x i32> %127 to <8 x i16>
  %129 = bitcast i16* %102 to <8 x i16>*
  store <8 x i16> %128, <8 x i16>* %129, align 16, !alias.scope !1146, !noalias !1143
  %130 = getelementptr i16, i16* %101, i64 8
  %131 = bitcast i16* %130 to <8 x i16>*
  %132 = load <8 x i16>, <8 x i16>* %131, align 2, !alias.scope !1143
  %133 = zext <8 x i16> %132 to <8 x i32>
  %134 = mul nuw nsw <8 x i32> %112, %133
  %135 = getelementptr inbounds i16, i16* %130, i64 1
  %136 = bitcast i16* %135 to <8 x i16>*
  %137 = load <8 x i16>, <8 x i16>* %136, align 2, !alias.scope !1143
  %138 = zext <8 x i16> %137 to <8 x i32>
  %139 = mul nuw nsw <8 x i32> %114, %138
  %140 = add nuw nsw <8 x i32> %134, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %141 = add nuw nsw <8 x i32> %140, %139
  %142 = lshr <8 x i32> %141, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %143 = trunc <8 x i32> %142 to <8 x i16>
  %144 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 24
  %145 = bitcast i16* %144 to <8 x i16>*
  store <8 x i16> %143, <8 x i16>* %145, align 16, !alias.scope !1146, !noalias !1143
  br label %751

146:                                              ; preds = %1289, %146
  %147 = phi i64 [ %176, %146 ], [ 0, %1289 ]
  %148 = phi i16* [ %175, %146 ], [ %12, %1289 ]
  %149 = load i16, i16* %148, align 2
  %150 = zext i16 %149 to i32
  %151 = mul nuw nsw i32 %1294, %150
  %152 = getelementptr inbounds i16, i16* %148, i64 16
  %153 = load i16, i16* %152, align 2
  %154 = zext i16 %153 to i32
  %155 = mul nuw nsw i32 %1296, %154
  %156 = add nuw nsw i32 %151, 64
  %157 = add nuw nsw i32 %156, %155
  %158 = lshr i32 %157, 7
  %159 = trunc i32 %158 to i16
  %160 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 %147
  store i16 %159, i16* %160, align 4
  %161 = getelementptr inbounds i16, i16* %148, i64 1
  %162 = or i64 %147, 1
  %163 = load i16, i16* %161, align 2
  %164 = zext i16 %163 to i32
  %165 = mul nuw nsw i32 %1294, %164
  %166 = getelementptr inbounds i16, i16* %148, i64 17
  %167 = load i16, i16* %166, align 2
  %168 = zext i16 %167 to i32
  %169 = mul nuw nsw i32 %1296, %168
  %170 = add nuw nsw i32 %165, 64
  %171 = add nuw nsw i32 %170, %169
  %172 = lshr i32 %171, 7
  %173 = trunc i32 %172 to i16
  %174 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 %162
  store i16 %173, i16* %174, align 2
  %175 = getelementptr inbounds i16, i16* %148, i64 2
  %176 = add nuw nsw i64 %147, 2
  %177 = icmp eq i64 %176, 16
  br i1 %177, label %178, label %146, !llvm.loop !1148

178:                                              ; preds = %146, %1304
  %179 = phi i16* [ %1309, %1304 ], [ %175, %146 ]
  %180 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 16
  %181 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 16
  %182 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 32
  %183 = getelementptr i16, i16* %179, i64 32
  %184 = icmp ult i16* %181, %183
  %185 = icmp ult i16* %179, %182
  %186 = and i1 %184, %185
  br i1 %186, label %223, label %187

187:                                              ; preds = %178
  %188 = insertelement <8 x i32> undef, i32 %1294, i32 0
  %189 = shufflevector <8 x i32> %188, <8 x i32> undef, <8 x i32> zeroinitializer
  %190 = insertelement <8 x i32> undef, i32 %1296, i32 0
  %191 = shufflevector <8 x i32> %190, <8 x i32> undef, <8 x i32> zeroinitializer
  %192 = getelementptr i16, i16* %179, i64 16
  %193 = bitcast i16* %179 to <8 x i16>*
  %194 = load <8 x i16>, <8 x i16>* %193, align 2, !alias.scope !1149
  %195 = zext <8 x i16> %194 to <8 x i32>
  %196 = mul nuw nsw <8 x i32> %189, %195
  %197 = getelementptr inbounds i16, i16* %179, i64 16
  %198 = bitcast i16* %197 to <8 x i16>*
  %199 = load <8 x i16>, <8 x i16>* %198, align 2, !alias.scope !1149
  %200 = zext <8 x i16> %199 to <8 x i32>
  %201 = mul nuw nsw <8 x i32> %191, %200
  %202 = add nuw nsw <8 x i32> %196, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %203 = add nuw nsw <8 x i32> %202, %201
  %204 = lshr <8 x i32> %203, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %205 = trunc <8 x i32> %204 to <8 x i16>
  %206 = bitcast i16* %180 to <8 x i16>*
  store <8 x i16> %205, <8 x i16>* %206, align 16, !alias.scope !1152, !noalias !1149
  %207 = getelementptr i16, i16* %179, i64 8
  %208 = bitcast i16* %207 to <8 x i16>*
  %209 = load <8 x i16>, <8 x i16>* %208, align 2, !alias.scope !1149
  %210 = zext <8 x i16> %209 to <8 x i32>
  %211 = mul nuw nsw <8 x i32> %189, %210
  %212 = getelementptr inbounds i16, i16* %179, i64 24
  %213 = bitcast i16* %212 to <8 x i16>*
  %214 = load <8 x i16>, <8 x i16>* %213, align 2, !alias.scope !1149
  %215 = zext <8 x i16> %214 to <8 x i32>
  %216 = mul nuw nsw <8 x i32> %191, %215
  %217 = add nuw nsw <8 x i32> %211, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %218 = add nuw nsw <8 x i32> %217, %216
  %219 = lshr <8 x i32> %218, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %220 = trunc <8 x i32> %219 to <8 x i16>
  %221 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 24
  %222 = bitcast i16* %221 to <8 x i16>*
  store <8 x i16> %220, <8 x i16>* %222, align 16, !alias.scope !1152, !noalias !1149
  br label %255

223:                                              ; preds = %178, %223
  %224 = phi i64 [ %253, %223 ], [ 0, %178 ]
  %225 = phi i16* [ %252, %223 ], [ %179, %178 ]
  %226 = load i16, i16* %225, align 2
  %227 = zext i16 %226 to i32
  %228 = mul nuw nsw i32 %1294, %227
  %229 = getelementptr inbounds i16, i16* %225, i64 16
  %230 = load i16, i16* %229, align 2
  %231 = zext i16 %230 to i32
  %232 = mul nuw nsw i32 %1296, %231
  %233 = add nuw nsw i32 %228, 64
  %234 = add nuw nsw i32 %233, %232
  %235 = lshr i32 %234, 7
  %236 = trunc i32 %235 to i16
  %237 = getelementptr inbounds i16, i16* %180, i64 %224
  store i16 %236, i16* %237, align 4
  %238 = getelementptr inbounds i16, i16* %225, i64 1
  %239 = or i64 %224, 1
  %240 = load i16, i16* %238, align 2
  %241 = zext i16 %240 to i32
  %242 = mul nuw nsw i32 %1294, %241
  %243 = getelementptr inbounds i16, i16* %225, i64 17
  %244 = load i16, i16* %243, align 2
  %245 = zext i16 %244 to i32
  %246 = mul nuw nsw i32 %1296, %245
  %247 = add nuw nsw i32 %242, 64
  %248 = add nuw nsw i32 %247, %246
  %249 = lshr i32 %248, 7
  %250 = trunc i32 %249 to i16
  %251 = getelementptr inbounds i16, i16* %180, i64 %239
  store i16 %250, i16* %251, align 2
  %252 = getelementptr inbounds i16, i16* %225, i64 2
  %253 = add nuw nsw i64 %224, 2
  %254 = icmp eq i64 %253, 16
  br i1 %254, label %255, label %223, !llvm.loop !1154

255:                                              ; preds = %223, %187
  %256 = phi i16* [ %192, %187 ], [ %252, %223 ]
  %257 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 32
  %258 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 32
  %259 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 48
  %260 = getelementptr i16, i16* %256, i64 32
  %261 = icmp ult i16* %258, %260
  %262 = icmp ult i16* %256, %259
  %263 = and i1 %261, %262
  br i1 %263, label %300, label %264

264:                                              ; preds = %255
  %265 = insertelement <8 x i32> undef, i32 %1294, i32 0
  %266 = shufflevector <8 x i32> %265, <8 x i32> undef, <8 x i32> zeroinitializer
  %267 = insertelement <8 x i32> undef, i32 %1296, i32 0
  %268 = shufflevector <8 x i32> %267, <8 x i32> undef, <8 x i32> zeroinitializer
  %269 = getelementptr i16, i16* %256, i64 16
  %270 = bitcast i16* %256 to <8 x i16>*
  %271 = load <8 x i16>, <8 x i16>* %270, align 2, !alias.scope !1155
  %272 = zext <8 x i16> %271 to <8 x i32>
  %273 = mul nuw nsw <8 x i32> %266, %272
  %274 = getelementptr inbounds i16, i16* %256, i64 16
  %275 = bitcast i16* %274 to <8 x i16>*
  %276 = load <8 x i16>, <8 x i16>* %275, align 2, !alias.scope !1155
  %277 = zext <8 x i16> %276 to <8 x i32>
  %278 = mul nuw nsw <8 x i32> %268, %277
  %279 = add nuw nsw <8 x i32> %273, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %280 = add nuw nsw <8 x i32> %279, %278
  %281 = lshr <8 x i32> %280, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %282 = trunc <8 x i32> %281 to <8 x i16>
  %283 = bitcast i16* %257 to <8 x i16>*
  store <8 x i16> %282, <8 x i16>* %283, align 16, !alias.scope !1158, !noalias !1155
  %284 = getelementptr i16, i16* %256, i64 8
  %285 = bitcast i16* %284 to <8 x i16>*
  %286 = load <8 x i16>, <8 x i16>* %285, align 2, !alias.scope !1155
  %287 = zext <8 x i16> %286 to <8 x i32>
  %288 = mul nuw nsw <8 x i32> %266, %287
  %289 = getelementptr inbounds i16, i16* %256, i64 24
  %290 = bitcast i16* %289 to <8 x i16>*
  %291 = load <8 x i16>, <8 x i16>* %290, align 2, !alias.scope !1155
  %292 = zext <8 x i16> %291 to <8 x i32>
  %293 = mul nuw nsw <8 x i32> %268, %292
  %294 = add nuw nsw <8 x i32> %288, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %295 = add nuw nsw <8 x i32> %294, %293
  %296 = lshr <8 x i32> %295, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %297 = trunc <8 x i32> %296 to <8 x i16>
  %298 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 40
  %299 = bitcast i16* %298 to <8 x i16>*
  store <8 x i16> %297, <8 x i16>* %299, align 16, !alias.scope !1158, !noalias !1155
  br label %332

300:                                              ; preds = %255, %300
  %301 = phi i64 [ %330, %300 ], [ 0, %255 ]
  %302 = phi i16* [ %329, %300 ], [ %256, %255 ]
  %303 = load i16, i16* %302, align 2
  %304 = zext i16 %303 to i32
  %305 = mul nuw nsw i32 %1294, %304
  %306 = getelementptr inbounds i16, i16* %302, i64 16
  %307 = load i16, i16* %306, align 2
  %308 = zext i16 %307 to i32
  %309 = mul nuw nsw i32 %1296, %308
  %310 = add nuw nsw i32 %305, 64
  %311 = add nuw nsw i32 %310, %309
  %312 = lshr i32 %311, 7
  %313 = trunc i32 %312 to i16
  %314 = getelementptr inbounds i16, i16* %257, i64 %301
  store i16 %313, i16* %314, align 4
  %315 = getelementptr inbounds i16, i16* %302, i64 1
  %316 = or i64 %301, 1
  %317 = load i16, i16* %315, align 2
  %318 = zext i16 %317 to i32
  %319 = mul nuw nsw i32 %1294, %318
  %320 = getelementptr inbounds i16, i16* %302, i64 17
  %321 = load i16, i16* %320, align 2
  %322 = zext i16 %321 to i32
  %323 = mul nuw nsw i32 %1296, %322
  %324 = add nuw nsw i32 %319, 64
  %325 = add nuw nsw i32 %324, %323
  %326 = lshr i32 %325, 7
  %327 = trunc i32 %326 to i16
  %328 = getelementptr inbounds i16, i16* %257, i64 %316
  store i16 %327, i16* %328, align 2
  %329 = getelementptr inbounds i16, i16* %302, i64 2
  %330 = add nuw nsw i64 %301, 2
  %331 = icmp eq i64 %330, 16
  br i1 %331, label %332, label %300, !llvm.loop !1160

332:                                              ; preds = %300, %264
  %333 = phi i16* [ %269, %264 ], [ %329, %300 ]
  %334 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 48
  %335 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 48
  %336 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 64
  %337 = getelementptr i16, i16* %333, i64 32
  %338 = icmp ult i16* %335, %337
  %339 = icmp ult i16* %333, %336
  %340 = and i1 %338, %339
  br i1 %340, label %377, label %341

341:                                              ; preds = %332
  %342 = insertelement <8 x i32> undef, i32 %1294, i32 0
  %343 = shufflevector <8 x i32> %342, <8 x i32> undef, <8 x i32> zeroinitializer
  %344 = insertelement <8 x i32> undef, i32 %1296, i32 0
  %345 = shufflevector <8 x i32> %344, <8 x i32> undef, <8 x i32> zeroinitializer
  %346 = getelementptr i16, i16* %333, i64 16
  %347 = bitcast i16* %333 to <8 x i16>*
  %348 = load <8 x i16>, <8 x i16>* %347, align 2, !alias.scope !1161
  %349 = zext <8 x i16> %348 to <8 x i32>
  %350 = mul nuw nsw <8 x i32> %343, %349
  %351 = getelementptr inbounds i16, i16* %333, i64 16
  %352 = bitcast i16* %351 to <8 x i16>*
  %353 = load <8 x i16>, <8 x i16>* %352, align 2, !alias.scope !1161
  %354 = zext <8 x i16> %353 to <8 x i32>
  %355 = mul nuw nsw <8 x i32> %345, %354
  %356 = add nuw nsw <8 x i32> %350, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %357 = add nuw nsw <8 x i32> %356, %355
  %358 = lshr <8 x i32> %357, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %359 = trunc <8 x i32> %358 to <8 x i16>
  %360 = bitcast i16* %334 to <8 x i16>*
  store <8 x i16> %359, <8 x i16>* %360, align 16, !alias.scope !1164, !noalias !1161
  %361 = getelementptr i16, i16* %333, i64 8
  %362 = bitcast i16* %361 to <8 x i16>*
  %363 = load <8 x i16>, <8 x i16>* %362, align 2, !alias.scope !1161
  %364 = zext <8 x i16> %363 to <8 x i32>
  %365 = mul nuw nsw <8 x i32> %343, %364
  %366 = getelementptr inbounds i16, i16* %333, i64 24
  %367 = bitcast i16* %366 to <8 x i16>*
  %368 = load <8 x i16>, <8 x i16>* %367, align 2, !alias.scope !1161
  %369 = zext <8 x i16> %368 to <8 x i32>
  %370 = mul nuw nsw <8 x i32> %345, %369
  %371 = add nuw nsw <8 x i32> %365, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %372 = add nuw nsw <8 x i32> %371, %370
  %373 = lshr <8 x i32> %372, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %374 = trunc <8 x i32> %373 to <8 x i16>
  %375 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 56
  %376 = bitcast i16* %375 to <8 x i16>*
  store <8 x i16> %374, <8 x i16>* %376, align 16, !alias.scope !1164, !noalias !1161
  br label %409

377:                                              ; preds = %332, %377
  %378 = phi i64 [ %407, %377 ], [ 0, %332 ]
  %379 = phi i16* [ %406, %377 ], [ %333, %332 ]
  %380 = load i16, i16* %379, align 2
  %381 = zext i16 %380 to i32
  %382 = mul nuw nsw i32 %1294, %381
  %383 = getelementptr inbounds i16, i16* %379, i64 16
  %384 = load i16, i16* %383, align 2
  %385 = zext i16 %384 to i32
  %386 = mul nuw nsw i32 %1296, %385
  %387 = add nuw nsw i32 %382, 64
  %388 = add nuw nsw i32 %387, %386
  %389 = lshr i32 %388, 7
  %390 = trunc i32 %389 to i16
  %391 = getelementptr inbounds i16, i16* %334, i64 %378
  store i16 %390, i16* %391, align 4
  %392 = getelementptr inbounds i16, i16* %379, i64 1
  %393 = or i64 %378, 1
  %394 = load i16, i16* %392, align 2
  %395 = zext i16 %394 to i32
  %396 = mul nuw nsw i32 %1294, %395
  %397 = getelementptr inbounds i16, i16* %379, i64 17
  %398 = load i16, i16* %397, align 2
  %399 = zext i16 %398 to i32
  %400 = mul nuw nsw i32 %1296, %399
  %401 = add nuw nsw i32 %396, 64
  %402 = add nuw nsw i32 %401, %400
  %403 = lshr i32 %402, 7
  %404 = trunc i32 %403 to i16
  %405 = getelementptr inbounds i16, i16* %334, i64 %393
  store i16 %404, i16* %405, align 2
  %406 = getelementptr inbounds i16, i16* %379, i64 2
  %407 = add nuw nsw i64 %378, 2
  %408 = icmp eq i64 %407, 16
  br i1 %408, label %409, label %377, !llvm.loop !1166

409:                                              ; preds = %377, %341
  %410 = phi i16* [ %346, %341 ], [ %406, %377 ]
  %411 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 64
  %412 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 64
  %413 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 80
  %414 = getelementptr i16, i16* %410, i64 32
  %415 = icmp ult i16* %412, %414
  %416 = icmp ult i16* %410, %413
  %417 = and i1 %415, %416
  br i1 %417, label %454, label %418

418:                                              ; preds = %409
  %419 = insertelement <8 x i32> undef, i32 %1294, i32 0
  %420 = shufflevector <8 x i32> %419, <8 x i32> undef, <8 x i32> zeroinitializer
  %421 = insertelement <8 x i32> undef, i32 %1296, i32 0
  %422 = shufflevector <8 x i32> %421, <8 x i32> undef, <8 x i32> zeroinitializer
  %423 = getelementptr i16, i16* %410, i64 16
  %424 = bitcast i16* %410 to <8 x i16>*
  %425 = load <8 x i16>, <8 x i16>* %424, align 2, !alias.scope !1167
  %426 = zext <8 x i16> %425 to <8 x i32>
  %427 = mul nuw nsw <8 x i32> %420, %426
  %428 = getelementptr inbounds i16, i16* %410, i64 16
  %429 = bitcast i16* %428 to <8 x i16>*
  %430 = load <8 x i16>, <8 x i16>* %429, align 2, !alias.scope !1167
  %431 = zext <8 x i16> %430 to <8 x i32>
  %432 = mul nuw nsw <8 x i32> %422, %431
  %433 = add nuw nsw <8 x i32> %427, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %434 = add nuw nsw <8 x i32> %433, %432
  %435 = lshr <8 x i32> %434, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %436 = trunc <8 x i32> %435 to <8 x i16>
  %437 = bitcast i16* %411 to <8 x i16>*
  store <8 x i16> %436, <8 x i16>* %437, align 16, !alias.scope !1170, !noalias !1167
  %438 = getelementptr i16, i16* %410, i64 8
  %439 = bitcast i16* %438 to <8 x i16>*
  %440 = load <8 x i16>, <8 x i16>* %439, align 2, !alias.scope !1167
  %441 = zext <8 x i16> %440 to <8 x i32>
  %442 = mul nuw nsw <8 x i32> %420, %441
  %443 = getelementptr inbounds i16, i16* %410, i64 24
  %444 = bitcast i16* %443 to <8 x i16>*
  %445 = load <8 x i16>, <8 x i16>* %444, align 2, !alias.scope !1167
  %446 = zext <8 x i16> %445 to <8 x i32>
  %447 = mul nuw nsw <8 x i32> %422, %446
  %448 = add nuw nsw <8 x i32> %442, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %449 = add nuw nsw <8 x i32> %448, %447
  %450 = lshr <8 x i32> %449, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %451 = trunc <8 x i32> %450 to <8 x i16>
  %452 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 72
  %453 = bitcast i16* %452 to <8 x i16>*
  store <8 x i16> %451, <8 x i16>* %453, align 16, !alias.scope !1170, !noalias !1167
  br label %486

454:                                              ; preds = %409, %454
  %455 = phi i64 [ %484, %454 ], [ 0, %409 ]
  %456 = phi i16* [ %483, %454 ], [ %410, %409 ]
  %457 = load i16, i16* %456, align 2
  %458 = zext i16 %457 to i32
  %459 = mul nuw nsw i32 %1294, %458
  %460 = getelementptr inbounds i16, i16* %456, i64 16
  %461 = load i16, i16* %460, align 2
  %462 = zext i16 %461 to i32
  %463 = mul nuw nsw i32 %1296, %462
  %464 = add nuw nsw i32 %459, 64
  %465 = add nuw nsw i32 %464, %463
  %466 = lshr i32 %465, 7
  %467 = trunc i32 %466 to i16
  %468 = getelementptr inbounds i16, i16* %411, i64 %455
  store i16 %467, i16* %468, align 4
  %469 = getelementptr inbounds i16, i16* %456, i64 1
  %470 = or i64 %455, 1
  %471 = load i16, i16* %469, align 2
  %472 = zext i16 %471 to i32
  %473 = mul nuw nsw i32 %1294, %472
  %474 = getelementptr inbounds i16, i16* %456, i64 17
  %475 = load i16, i16* %474, align 2
  %476 = zext i16 %475 to i32
  %477 = mul nuw nsw i32 %1296, %476
  %478 = add nuw nsw i32 %473, 64
  %479 = add nuw nsw i32 %478, %477
  %480 = lshr i32 %479, 7
  %481 = trunc i32 %480 to i16
  %482 = getelementptr inbounds i16, i16* %411, i64 %470
  store i16 %481, i16* %482, align 2
  %483 = getelementptr inbounds i16, i16* %456, i64 2
  %484 = add nuw nsw i64 %455, 2
  %485 = icmp eq i64 %484, 16
  br i1 %485, label %486, label %454, !llvm.loop !1172

486:                                              ; preds = %454, %418
  %487 = phi i16* [ %423, %418 ], [ %483, %454 ]
  %488 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 80
  %489 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 80
  %490 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 96
  %491 = getelementptr i16, i16* %487, i64 32
  %492 = icmp ult i16* %489, %491
  %493 = icmp ult i16* %487, %490
  %494 = and i1 %492, %493
  br i1 %494, label %531, label %495

495:                                              ; preds = %486
  %496 = insertelement <8 x i32> undef, i32 %1294, i32 0
  %497 = shufflevector <8 x i32> %496, <8 x i32> undef, <8 x i32> zeroinitializer
  %498 = insertelement <8 x i32> undef, i32 %1296, i32 0
  %499 = shufflevector <8 x i32> %498, <8 x i32> undef, <8 x i32> zeroinitializer
  %500 = getelementptr i16, i16* %487, i64 16
  %501 = bitcast i16* %487 to <8 x i16>*
  %502 = load <8 x i16>, <8 x i16>* %501, align 2, !alias.scope !1173
  %503 = zext <8 x i16> %502 to <8 x i32>
  %504 = mul nuw nsw <8 x i32> %497, %503
  %505 = getelementptr inbounds i16, i16* %487, i64 16
  %506 = bitcast i16* %505 to <8 x i16>*
  %507 = load <8 x i16>, <8 x i16>* %506, align 2, !alias.scope !1173
  %508 = zext <8 x i16> %507 to <8 x i32>
  %509 = mul nuw nsw <8 x i32> %499, %508
  %510 = add nuw nsw <8 x i32> %504, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %511 = add nuw nsw <8 x i32> %510, %509
  %512 = lshr <8 x i32> %511, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %513 = trunc <8 x i32> %512 to <8 x i16>
  %514 = bitcast i16* %488 to <8 x i16>*
  store <8 x i16> %513, <8 x i16>* %514, align 16, !alias.scope !1176, !noalias !1173
  %515 = getelementptr i16, i16* %487, i64 8
  %516 = bitcast i16* %515 to <8 x i16>*
  %517 = load <8 x i16>, <8 x i16>* %516, align 2, !alias.scope !1173
  %518 = zext <8 x i16> %517 to <8 x i32>
  %519 = mul nuw nsw <8 x i32> %497, %518
  %520 = getelementptr inbounds i16, i16* %487, i64 24
  %521 = bitcast i16* %520 to <8 x i16>*
  %522 = load <8 x i16>, <8 x i16>* %521, align 2, !alias.scope !1173
  %523 = zext <8 x i16> %522 to <8 x i32>
  %524 = mul nuw nsw <8 x i32> %499, %523
  %525 = add nuw nsw <8 x i32> %519, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %526 = add nuw nsw <8 x i32> %525, %524
  %527 = lshr <8 x i32> %526, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %528 = trunc <8 x i32> %527 to <8 x i16>
  %529 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 88
  %530 = bitcast i16* %529 to <8 x i16>*
  store <8 x i16> %528, <8 x i16>* %530, align 16, !alias.scope !1176, !noalias !1173
  br label %563

531:                                              ; preds = %486, %531
  %532 = phi i64 [ %561, %531 ], [ 0, %486 ]
  %533 = phi i16* [ %560, %531 ], [ %487, %486 ]
  %534 = load i16, i16* %533, align 2
  %535 = zext i16 %534 to i32
  %536 = mul nuw nsw i32 %1294, %535
  %537 = getelementptr inbounds i16, i16* %533, i64 16
  %538 = load i16, i16* %537, align 2
  %539 = zext i16 %538 to i32
  %540 = mul nuw nsw i32 %1296, %539
  %541 = add nuw nsw i32 %536, 64
  %542 = add nuw nsw i32 %541, %540
  %543 = lshr i32 %542, 7
  %544 = trunc i32 %543 to i16
  %545 = getelementptr inbounds i16, i16* %488, i64 %532
  store i16 %544, i16* %545, align 4
  %546 = getelementptr inbounds i16, i16* %533, i64 1
  %547 = or i64 %532, 1
  %548 = load i16, i16* %546, align 2
  %549 = zext i16 %548 to i32
  %550 = mul nuw nsw i32 %1294, %549
  %551 = getelementptr inbounds i16, i16* %533, i64 17
  %552 = load i16, i16* %551, align 2
  %553 = zext i16 %552 to i32
  %554 = mul nuw nsw i32 %1296, %553
  %555 = add nuw nsw i32 %550, 64
  %556 = add nuw nsw i32 %555, %554
  %557 = lshr i32 %556, 7
  %558 = trunc i32 %557 to i16
  %559 = getelementptr inbounds i16, i16* %488, i64 %547
  store i16 %558, i16* %559, align 2
  %560 = getelementptr inbounds i16, i16* %533, i64 2
  %561 = add nuw nsw i64 %532, 2
  %562 = icmp eq i64 %561, 16
  br i1 %562, label %563, label %531, !llvm.loop !1178

563:                                              ; preds = %531, %495
  %564 = phi i16* [ %500, %495 ], [ %560, %531 ]
  %565 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 96
  %566 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 96
  %567 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 112
  %568 = getelementptr i16, i16* %564, i64 32
  %569 = icmp ult i16* %566, %568
  %570 = icmp ult i16* %564, %567
  %571 = and i1 %569, %570
  br i1 %571, label %608, label %572

572:                                              ; preds = %563
  %573 = insertelement <8 x i32> undef, i32 %1294, i32 0
  %574 = shufflevector <8 x i32> %573, <8 x i32> undef, <8 x i32> zeroinitializer
  %575 = insertelement <8 x i32> undef, i32 %1296, i32 0
  %576 = shufflevector <8 x i32> %575, <8 x i32> undef, <8 x i32> zeroinitializer
  %577 = getelementptr i16, i16* %564, i64 16
  %578 = bitcast i16* %564 to <8 x i16>*
  %579 = load <8 x i16>, <8 x i16>* %578, align 2, !alias.scope !1179
  %580 = zext <8 x i16> %579 to <8 x i32>
  %581 = mul nuw nsw <8 x i32> %574, %580
  %582 = getelementptr inbounds i16, i16* %564, i64 16
  %583 = bitcast i16* %582 to <8 x i16>*
  %584 = load <8 x i16>, <8 x i16>* %583, align 2, !alias.scope !1179
  %585 = zext <8 x i16> %584 to <8 x i32>
  %586 = mul nuw nsw <8 x i32> %576, %585
  %587 = add nuw nsw <8 x i32> %581, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %588 = add nuw nsw <8 x i32> %587, %586
  %589 = lshr <8 x i32> %588, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %590 = trunc <8 x i32> %589 to <8 x i16>
  %591 = bitcast i16* %565 to <8 x i16>*
  store <8 x i16> %590, <8 x i16>* %591, align 16, !alias.scope !1182, !noalias !1179
  %592 = getelementptr i16, i16* %564, i64 8
  %593 = bitcast i16* %592 to <8 x i16>*
  %594 = load <8 x i16>, <8 x i16>* %593, align 2, !alias.scope !1179
  %595 = zext <8 x i16> %594 to <8 x i32>
  %596 = mul nuw nsw <8 x i32> %574, %595
  %597 = getelementptr inbounds i16, i16* %564, i64 24
  %598 = bitcast i16* %597 to <8 x i16>*
  %599 = load <8 x i16>, <8 x i16>* %598, align 2, !alias.scope !1179
  %600 = zext <8 x i16> %599 to <8 x i32>
  %601 = mul nuw nsw <8 x i32> %576, %600
  %602 = add nuw nsw <8 x i32> %596, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %603 = add nuw nsw <8 x i32> %602, %601
  %604 = lshr <8 x i32> %603, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %605 = trunc <8 x i32> %604 to <8 x i16>
  %606 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 104
  %607 = bitcast i16* %606 to <8 x i16>*
  store <8 x i16> %605, <8 x i16>* %607, align 16, !alias.scope !1182, !noalias !1179
  br label %640

608:                                              ; preds = %563, %608
  %609 = phi i64 [ %638, %608 ], [ 0, %563 ]
  %610 = phi i16* [ %637, %608 ], [ %564, %563 ]
  %611 = load i16, i16* %610, align 2
  %612 = zext i16 %611 to i32
  %613 = mul nuw nsw i32 %1294, %612
  %614 = getelementptr inbounds i16, i16* %610, i64 16
  %615 = load i16, i16* %614, align 2
  %616 = zext i16 %615 to i32
  %617 = mul nuw nsw i32 %1296, %616
  %618 = add nuw nsw i32 %613, 64
  %619 = add nuw nsw i32 %618, %617
  %620 = lshr i32 %619, 7
  %621 = trunc i32 %620 to i16
  %622 = getelementptr inbounds i16, i16* %565, i64 %609
  store i16 %621, i16* %622, align 4
  %623 = getelementptr inbounds i16, i16* %610, i64 1
  %624 = or i64 %609, 1
  %625 = load i16, i16* %623, align 2
  %626 = zext i16 %625 to i32
  %627 = mul nuw nsw i32 %1294, %626
  %628 = getelementptr inbounds i16, i16* %610, i64 17
  %629 = load i16, i16* %628, align 2
  %630 = zext i16 %629 to i32
  %631 = mul nuw nsw i32 %1296, %630
  %632 = add nuw nsw i32 %627, 64
  %633 = add nuw nsw i32 %632, %631
  %634 = lshr i32 %633, 7
  %635 = trunc i32 %634 to i16
  %636 = getelementptr inbounds i16, i16* %565, i64 %624
  store i16 %635, i16* %636, align 2
  %637 = getelementptr inbounds i16, i16* %610, i64 2
  %638 = add nuw nsw i64 %609, 2
  %639 = icmp eq i64 %638, 16
  br i1 %639, label %640, label %608, !llvm.loop !1184

640:                                              ; preds = %608, %572
  %641 = phi i16* [ %577, %572 ], [ %637, %608 ]
  %642 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 112
  %643 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 112
  %644 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 1, i64 0
  %645 = getelementptr i16, i16* %641, i64 32
  %646 = icmp ult i16* %643, %645
  %647 = icmp ult i16* %641, %644
  %648 = and i1 %646, %647
  br i1 %648, label %684, label %649

649:                                              ; preds = %640
  %650 = insertelement <8 x i32> undef, i32 %1294, i32 0
  %651 = shufflevector <8 x i32> %650, <8 x i32> undef, <8 x i32> zeroinitializer
  %652 = insertelement <8 x i32> undef, i32 %1296, i32 0
  %653 = shufflevector <8 x i32> %652, <8 x i32> undef, <8 x i32> zeroinitializer
  %654 = bitcast i16* %641 to <8 x i16>*
  %655 = load <8 x i16>, <8 x i16>* %654, align 2, !alias.scope !1185
  %656 = zext <8 x i16> %655 to <8 x i32>
  %657 = mul nuw nsw <8 x i32> %651, %656
  %658 = getelementptr inbounds i16, i16* %641, i64 16
  %659 = bitcast i16* %658 to <8 x i16>*
  %660 = load <8 x i16>, <8 x i16>* %659, align 2, !alias.scope !1185
  %661 = zext <8 x i16> %660 to <8 x i32>
  %662 = mul nuw nsw <8 x i32> %653, %661
  %663 = add nuw nsw <8 x i32> %657, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %664 = add nuw nsw <8 x i32> %663, %662
  %665 = lshr <8 x i32> %664, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %666 = trunc <8 x i32> %665 to <8 x i16>
  %667 = bitcast i16* %642 to <8 x i16>*
  store <8 x i16> %666, <8 x i16>* %667, align 16, !alias.scope !1188, !noalias !1185
  %668 = getelementptr i16, i16* %641, i64 8
  %669 = bitcast i16* %668 to <8 x i16>*
  %670 = load <8 x i16>, <8 x i16>* %669, align 2, !alias.scope !1185
  %671 = zext <8 x i16> %670 to <8 x i32>
  %672 = mul nuw nsw <8 x i32> %651, %671
  %673 = getelementptr inbounds i16, i16* %641, i64 24
  %674 = bitcast i16* %673 to <8 x i16>*
  %675 = load <8 x i16>, <8 x i16>* %674, align 2, !alias.scope !1185
  %676 = zext <8 x i16> %675 to <8 x i32>
  %677 = mul nuw nsw <8 x i32> %653, %676
  %678 = add nuw nsw <8 x i32> %672, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %679 = add nuw nsw <8 x i32> %678, %677
  %680 = lshr <8 x i32> %679, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %681 = trunc <8 x i32> %680 to <8 x i16>
  %682 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 120
  %683 = bitcast i16* %682 to <8 x i16>*
  store <8 x i16> %681, <8 x i16>* %683, align 16, !alias.scope !1188, !noalias !1185
  br label %716

684:                                              ; preds = %640, %684
  %685 = phi i64 [ %714, %684 ], [ 0, %640 ]
  %686 = phi i16* [ %713, %684 ], [ %641, %640 ]
  %687 = load i16, i16* %686, align 2
  %688 = zext i16 %687 to i32
  %689 = mul nuw nsw i32 %1294, %688
  %690 = getelementptr inbounds i16, i16* %686, i64 16
  %691 = load i16, i16* %690, align 2
  %692 = zext i16 %691 to i32
  %693 = mul nuw nsw i32 %1296, %692
  %694 = add nuw nsw i32 %689, 64
  %695 = add nuw nsw i32 %694, %693
  %696 = lshr i32 %695, 7
  %697 = trunc i32 %696 to i16
  %698 = getelementptr inbounds i16, i16* %642, i64 %685
  store i16 %697, i16* %698, align 4
  %699 = getelementptr inbounds i16, i16* %686, i64 1
  %700 = or i64 %685, 1
  %701 = load i16, i16* %699, align 2
  %702 = zext i16 %701 to i32
  %703 = mul nuw nsw i32 %1294, %702
  %704 = getelementptr inbounds i16, i16* %686, i64 17
  %705 = load i16, i16* %704, align 2
  %706 = zext i16 %705 to i32
  %707 = mul nuw nsw i32 %1296, %706
  %708 = add nuw nsw i32 %703, 64
  %709 = add nuw nsw i32 %708, %707
  %710 = lshr i32 %709, 7
  %711 = trunc i32 %710 to i16
  %712 = getelementptr inbounds i16, i16* %642, i64 %700
  store i16 %711, i16* %712, align 2
  %713 = getelementptr inbounds i16, i16* %686, i64 2
  %714 = add nuw nsw i64 %685, 2
  %715 = icmp eq i64 %714, 16
  br i1 %715, label %716, label %684, !llvm.loop !1190

716:                                              ; preds = %684, %649
  %717 = ptrtoint [128 x i16]* %10 to i64
  %718 = lshr exact i64 %717, 1
  %719 = inttoptr i64 %718 to i8*
  %720 = call i32 @vpx_highbd_10_variance16x8_c(i8* nonnull %719, i32 16, i8* %4, i32 %5, i32* %6)
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %11) #4
  call void @llvm.lifetime.end.p0i8(i64 288, i8* nonnull %9) #4
  ret i32 %720

721:                                              ; preds = %99, %721
  %722 = phi i64 [ %749, %721 ], [ 0, %99 ]
  %723 = phi i16* [ %740, %721 ], [ %101, %99 ]
  %724 = load i16, i16* %723, align 2
  %725 = zext i16 %724 to i32
  %726 = mul nuw nsw i32 %22, %725
  %727 = getelementptr inbounds i16, i16* %723, i64 1
  %728 = load i16, i16* %727, align 2
  %729 = zext i16 %728 to i32
  %730 = mul nuw nsw i32 %24, %729
  %731 = add nuw nsw i32 %726, 64
  %732 = add nuw nsw i32 %731, %730
  %733 = lshr i32 %732, 7
  %734 = trunc i32 %733 to i16
  %735 = getelementptr inbounds i16, i16* %102, i64 %722
  store i16 %734, i16* %735, align 4
  %736 = or i64 %722, 1
  %737 = load i16, i16* %727, align 2
  %738 = zext i16 %737 to i32
  %739 = mul nuw nsw i32 %22, %738
  %740 = getelementptr inbounds i16, i16* %723, i64 2
  %741 = load i16, i16* %740, align 2
  %742 = zext i16 %741 to i32
  %743 = mul nuw nsw i32 %24, %742
  %744 = add nuw nsw i32 %739, 64
  %745 = add nuw nsw i32 %744, %743
  %746 = lshr i32 %745, 7
  %747 = trunc i32 %746 to i16
  %748 = getelementptr inbounds i16, i16* %102, i64 %736
  store i16 %747, i16* %748, align 2
  %749 = add nuw nsw i64 %722, 2
  %750 = icmp eq i64 %749, 16
  br i1 %750, label %751, label %721, !llvm.loop !1191

751:                                              ; preds = %721, %110
  %752 = phi i16* [ %115, %110 ], [ %740, %721 ]
  %753 = getelementptr inbounds i16, i16* %752, i64 %20
  %754 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 32
  %755 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 32
  %756 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 48
  %757 = add nuw nsw i64 %20, 17
  %758 = getelementptr i16, i16* %752, i64 %757
  %759 = icmp ult i16* %755, %758
  %760 = icmp ult i16* %753, %756
  %761 = and i1 %759, %760
  br i1 %761, label %798, label %762

762:                                              ; preds = %751
  %763 = insertelement <8 x i32> undef, i32 %22, i32 0
  %764 = shufflevector <8 x i32> %763, <8 x i32> undef, <8 x i32> zeroinitializer
  %765 = insertelement <8 x i32> undef, i32 %24, i32 0
  %766 = shufflevector <8 x i32> %765, <8 x i32> undef, <8 x i32> zeroinitializer
  %767 = getelementptr i16, i16* %753, i64 16
  %768 = bitcast i16* %753 to <8 x i16>*
  %769 = load <8 x i16>, <8 x i16>* %768, align 2, !alias.scope !1192
  %770 = zext <8 x i16> %769 to <8 x i32>
  %771 = mul nuw nsw <8 x i32> %764, %770
  %772 = getelementptr inbounds i16, i16* %753, i64 1
  %773 = bitcast i16* %772 to <8 x i16>*
  %774 = load <8 x i16>, <8 x i16>* %773, align 2, !alias.scope !1192
  %775 = zext <8 x i16> %774 to <8 x i32>
  %776 = mul nuw nsw <8 x i32> %766, %775
  %777 = add nuw nsw <8 x i32> %771, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %778 = add nuw nsw <8 x i32> %777, %776
  %779 = lshr <8 x i32> %778, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %780 = trunc <8 x i32> %779 to <8 x i16>
  %781 = bitcast i16* %754 to <8 x i16>*
  store <8 x i16> %780, <8 x i16>* %781, align 16, !alias.scope !1195, !noalias !1192
  %782 = getelementptr i16, i16* %753, i64 8
  %783 = bitcast i16* %782 to <8 x i16>*
  %784 = load <8 x i16>, <8 x i16>* %783, align 2, !alias.scope !1192
  %785 = zext <8 x i16> %784 to <8 x i32>
  %786 = mul nuw nsw <8 x i32> %764, %785
  %787 = getelementptr inbounds i16, i16* %782, i64 1
  %788 = bitcast i16* %787 to <8 x i16>*
  %789 = load <8 x i16>, <8 x i16>* %788, align 2, !alias.scope !1192
  %790 = zext <8 x i16> %789 to <8 x i32>
  %791 = mul nuw nsw <8 x i32> %766, %790
  %792 = add nuw nsw <8 x i32> %786, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %793 = add nuw nsw <8 x i32> %792, %791
  %794 = lshr <8 x i32> %793, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %795 = trunc <8 x i32> %794 to <8 x i16>
  %796 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 40
  %797 = bitcast i16* %796 to <8 x i16>*
  store <8 x i16> %795, <8 x i16>* %797, align 16, !alias.scope !1195, !noalias !1192
  br label %828

798:                                              ; preds = %751, %798
  %799 = phi i64 [ %826, %798 ], [ 0, %751 ]
  %800 = phi i16* [ %817, %798 ], [ %753, %751 ]
  %801 = load i16, i16* %800, align 2
  %802 = zext i16 %801 to i32
  %803 = mul nuw nsw i32 %22, %802
  %804 = getelementptr inbounds i16, i16* %800, i64 1
  %805 = load i16, i16* %804, align 2
  %806 = zext i16 %805 to i32
  %807 = mul nuw nsw i32 %24, %806
  %808 = add nuw nsw i32 %803, 64
  %809 = add nuw nsw i32 %808, %807
  %810 = lshr i32 %809, 7
  %811 = trunc i32 %810 to i16
  %812 = getelementptr inbounds i16, i16* %754, i64 %799
  store i16 %811, i16* %812, align 4
  %813 = or i64 %799, 1
  %814 = load i16, i16* %804, align 2
  %815 = zext i16 %814 to i32
  %816 = mul nuw nsw i32 %22, %815
  %817 = getelementptr inbounds i16, i16* %800, i64 2
  %818 = load i16, i16* %817, align 2
  %819 = zext i16 %818 to i32
  %820 = mul nuw nsw i32 %24, %819
  %821 = add nuw nsw i32 %816, 64
  %822 = add nuw nsw i32 %821, %820
  %823 = lshr i32 %822, 7
  %824 = trunc i32 %823 to i16
  %825 = getelementptr inbounds i16, i16* %754, i64 %813
  store i16 %824, i16* %825, align 2
  %826 = add nuw nsw i64 %799, 2
  %827 = icmp eq i64 %826, 16
  br i1 %827, label %828, label %798, !llvm.loop !1197

828:                                              ; preds = %798, %762
  %829 = phi i16* [ %767, %762 ], [ %817, %798 ]
  %830 = getelementptr inbounds i16, i16* %829, i64 %20
  %831 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 48
  %832 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 48
  %833 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 64
  %834 = add nuw nsw i64 %20, 17
  %835 = getelementptr i16, i16* %829, i64 %834
  %836 = icmp ult i16* %832, %835
  %837 = icmp ult i16* %830, %833
  %838 = and i1 %836, %837
  br i1 %838, label %875, label %839

839:                                              ; preds = %828
  %840 = insertelement <8 x i32> undef, i32 %22, i32 0
  %841 = shufflevector <8 x i32> %840, <8 x i32> undef, <8 x i32> zeroinitializer
  %842 = insertelement <8 x i32> undef, i32 %24, i32 0
  %843 = shufflevector <8 x i32> %842, <8 x i32> undef, <8 x i32> zeroinitializer
  %844 = getelementptr i16, i16* %830, i64 16
  %845 = bitcast i16* %830 to <8 x i16>*
  %846 = load <8 x i16>, <8 x i16>* %845, align 2, !alias.scope !1198
  %847 = zext <8 x i16> %846 to <8 x i32>
  %848 = mul nuw nsw <8 x i32> %841, %847
  %849 = getelementptr inbounds i16, i16* %830, i64 1
  %850 = bitcast i16* %849 to <8 x i16>*
  %851 = load <8 x i16>, <8 x i16>* %850, align 2, !alias.scope !1198
  %852 = zext <8 x i16> %851 to <8 x i32>
  %853 = mul nuw nsw <8 x i32> %843, %852
  %854 = add nuw nsw <8 x i32> %848, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %855 = add nuw nsw <8 x i32> %854, %853
  %856 = lshr <8 x i32> %855, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %857 = trunc <8 x i32> %856 to <8 x i16>
  %858 = bitcast i16* %831 to <8 x i16>*
  store <8 x i16> %857, <8 x i16>* %858, align 16, !alias.scope !1201, !noalias !1198
  %859 = getelementptr i16, i16* %830, i64 8
  %860 = bitcast i16* %859 to <8 x i16>*
  %861 = load <8 x i16>, <8 x i16>* %860, align 2, !alias.scope !1198
  %862 = zext <8 x i16> %861 to <8 x i32>
  %863 = mul nuw nsw <8 x i32> %841, %862
  %864 = getelementptr inbounds i16, i16* %859, i64 1
  %865 = bitcast i16* %864 to <8 x i16>*
  %866 = load <8 x i16>, <8 x i16>* %865, align 2, !alias.scope !1198
  %867 = zext <8 x i16> %866 to <8 x i32>
  %868 = mul nuw nsw <8 x i32> %843, %867
  %869 = add nuw nsw <8 x i32> %863, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %870 = add nuw nsw <8 x i32> %869, %868
  %871 = lshr <8 x i32> %870, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %872 = trunc <8 x i32> %871 to <8 x i16>
  %873 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 56
  %874 = bitcast i16* %873 to <8 x i16>*
  store <8 x i16> %872, <8 x i16>* %874, align 16, !alias.scope !1201, !noalias !1198
  br label %905

875:                                              ; preds = %828, %875
  %876 = phi i64 [ %903, %875 ], [ 0, %828 ]
  %877 = phi i16* [ %894, %875 ], [ %830, %828 ]
  %878 = load i16, i16* %877, align 2
  %879 = zext i16 %878 to i32
  %880 = mul nuw nsw i32 %22, %879
  %881 = getelementptr inbounds i16, i16* %877, i64 1
  %882 = load i16, i16* %881, align 2
  %883 = zext i16 %882 to i32
  %884 = mul nuw nsw i32 %24, %883
  %885 = add nuw nsw i32 %880, 64
  %886 = add nuw nsw i32 %885, %884
  %887 = lshr i32 %886, 7
  %888 = trunc i32 %887 to i16
  %889 = getelementptr inbounds i16, i16* %831, i64 %876
  store i16 %888, i16* %889, align 4
  %890 = or i64 %876, 1
  %891 = load i16, i16* %881, align 2
  %892 = zext i16 %891 to i32
  %893 = mul nuw nsw i32 %22, %892
  %894 = getelementptr inbounds i16, i16* %877, i64 2
  %895 = load i16, i16* %894, align 2
  %896 = zext i16 %895 to i32
  %897 = mul nuw nsw i32 %24, %896
  %898 = add nuw nsw i32 %893, 64
  %899 = add nuw nsw i32 %898, %897
  %900 = lshr i32 %899, 7
  %901 = trunc i32 %900 to i16
  %902 = getelementptr inbounds i16, i16* %831, i64 %890
  store i16 %901, i16* %902, align 2
  %903 = add nuw nsw i64 %876, 2
  %904 = icmp eq i64 %903, 16
  br i1 %904, label %905, label %875, !llvm.loop !1203

905:                                              ; preds = %875, %839
  %906 = phi i16* [ %844, %839 ], [ %894, %875 ]
  %907 = getelementptr inbounds i16, i16* %906, i64 %20
  %908 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 64
  %909 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 64
  %910 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 80
  %911 = add nuw nsw i64 %20, 17
  %912 = getelementptr i16, i16* %906, i64 %911
  %913 = icmp ult i16* %909, %912
  %914 = icmp ult i16* %907, %910
  %915 = and i1 %913, %914
  br i1 %915, label %952, label %916

916:                                              ; preds = %905
  %917 = insertelement <8 x i32> undef, i32 %22, i32 0
  %918 = shufflevector <8 x i32> %917, <8 x i32> undef, <8 x i32> zeroinitializer
  %919 = insertelement <8 x i32> undef, i32 %24, i32 0
  %920 = shufflevector <8 x i32> %919, <8 x i32> undef, <8 x i32> zeroinitializer
  %921 = getelementptr i16, i16* %907, i64 16
  %922 = bitcast i16* %907 to <8 x i16>*
  %923 = load <8 x i16>, <8 x i16>* %922, align 2, !alias.scope !1204
  %924 = zext <8 x i16> %923 to <8 x i32>
  %925 = mul nuw nsw <8 x i32> %918, %924
  %926 = getelementptr inbounds i16, i16* %907, i64 1
  %927 = bitcast i16* %926 to <8 x i16>*
  %928 = load <8 x i16>, <8 x i16>* %927, align 2, !alias.scope !1204
  %929 = zext <8 x i16> %928 to <8 x i32>
  %930 = mul nuw nsw <8 x i32> %920, %929
  %931 = add nuw nsw <8 x i32> %925, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %932 = add nuw nsw <8 x i32> %931, %930
  %933 = lshr <8 x i32> %932, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %934 = trunc <8 x i32> %933 to <8 x i16>
  %935 = bitcast i16* %908 to <8 x i16>*
  store <8 x i16> %934, <8 x i16>* %935, align 16, !alias.scope !1207, !noalias !1204
  %936 = getelementptr i16, i16* %907, i64 8
  %937 = bitcast i16* %936 to <8 x i16>*
  %938 = load <8 x i16>, <8 x i16>* %937, align 2, !alias.scope !1204
  %939 = zext <8 x i16> %938 to <8 x i32>
  %940 = mul nuw nsw <8 x i32> %918, %939
  %941 = getelementptr inbounds i16, i16* %936, i64 1
  %942 = bitcast i16* %941 to <8 x i16>*
  %943 = load <8 x i16>, <8 x i16>* %942, align 2, !alias.scope !1204
  %944 = zext <8 x i16> %943 to <8 x i32>
  %945 = mul nuw nsw <8 x i32> %920, %944
  %946 = add nuw nsw <8 x i32> %940, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %947 = add nuw nsw <8 x i32> %946, %945
  %948 = lshr <8 x i32> %947, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %949 = trunc <8 x i32> %948 to <8 x i16>
  %950 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 72
  %951 = bitcast i16* %950 to <8 x i16>*
  store <8 x i16> %949, <8 x i16>* %951, align 16, !alias.scope !1207, !noalias !1204
  br label %982

952:                                              ; preds = %905, %952
  %953 = phi i64 [ %980, %952 ], [ 0, %905 ]
  %954 = phi i16* [ %971, %952 ], [ %907, %905 ]
  %955 = load i16, i16* %954, align 2
  %956 = zext i16 %955 to i32
  %957 = mul nuw nsw i32 %22, %956
  %958 = getelementptr inbounds i16, i16* %954, i64 1
  %959 = load i16, i16* %958, align 2
  %960 = zext i16 %959 to i32
  %961 = mul nuw nsw i32 %24, %960
  %962 = add nuw nsw i32 %957, 64
  %963 = add nuw nsw i32 %962, %961
  %964 = lshr i32 %963, 7
  %965 = trunc i32 %964 to i16
  %966 = getelementptr inbounds i16, i16* %908, i64 %953
  store i16 %965, i16* %966, align 4
  %967 = or i64 %953, 1
  %968 = load i16, i16* %958, align 2
  %969 = zext i16 %968 to i32
  %970 = mul nuw nsw i32 %22, %969
  %971 = getelementptr inbounds i16, i16* %954, i64 2
  %972 = load i16, i16* %971, align 2
  %973 = zext i16 %972 to i32
  %974 = mul nuw nsw i32 %24, %973
  %975 = add nuw nsw i32 %970, 64
  %976 = add nuw nsw i32 %975, %974
  %977 = lshr i32 %976, 7
  %978 = trunc i32 %977 to i16
  %979 = getelementptr inbounds i16, i16* %908, i64 %967
  store i16 %978, i16* %979, align 2
  %980 = add nuw nsw i64 %953, 2
  %981 = icmp eq i64 %980, 16
  br i1 %981, label %982, label %952, !llvm.loop !1209

982:                                              ; preds = %952, %916
  %983 = phi i16* [ %921, %916 ], [ %971, %952 ]
  %984 = getelementptr inbounds i16, i16* %983, i64 %20
  %985 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 80
  %986 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 80
  %987 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 96
  %988 = add nuw nsw i64 %20, 17
  %989 = getelementptr i16, i16* %983, i64 %988
  %990 = icmp ult i16* %986, %989
  %991 = icmp ult i16* %984, %987
  %992 = and i1 %990, %991
  br i1 %992, label %1029, label %993

993:                                              ; preds = %982
  %994 = insertelement <8 x i32> undef, i32 %22, i32 0
  %995 = shufflevector <8 x i32> %994, <8 x i32> undef, <8 x i32> zeroinitializer
  %996 = insertelement <8 x i32> undef, i32 %24, i32 0
  %997 = shufflevector <8 x i32> %996, <8 x i32> undef, <8 x i32> zeroinitializer
  %998 = getelementptr i16, i16* %984, i64 16
  %999 = bitcast i16* %984 to <8 x i16>*
  %1000 = load <8 x i16>, <8 x i16>* %999, align 2, !alias.scope !1210
  %1001 = zext <8 x i16> %1000 to <8 x i32>
  %1002 = mul nuw nsw <8 x i32> %995, %1001
  %1003 = getelementptr inbounds i16, i16* %984, i64 1
  %1004 = bitcast i16* %1003 to <8 x i16>*
  %1005 = load <8 x i16>, <8 x i16>* %1004, align 2, !alias.scope !1210
  %1006 = zext <8 x i16> %1005 to <8 x i32>
  %1007 = mul nuw nsw <8 x i32> %997, %1006
  %1008 = add nuw nsw <8 x i32> %1002, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %1009 = add nuw nsw <8 x i32> %1008, %1007
  %1010 = lshr <8 x i32> %1009, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %1011 = trunc <8 x i32> %1010 to <8 x i16>
  %1012 = bitcast i16* %985 to <8 x i16>*
  store <8 x i16> %1011, <8 x i16>* %1012, align 16, !alias.scope !1213, !noalias !1210
  %1013 = getelementptr i16, i16* %984, i64 8
  %1014 = bitcast i16* %1013 to <8 x i16>*
  %1015 = load <8 x i16>, <8 x i16>* %1014, align 2, !alias.scope !1210
  %1016 = zext <8 x i16> %1015 to <8 x i32>
  %1017 = mul nuw nsw <8 x i32> %995, %1016
  %1018 = getelementptr inbounds i16, i16* %1013, i64 1
  %1019 = bitcast i16* %1018 to <8 x i16>*
  %1020 = load <8 x i16>, <8 x i16>* %1019, align 2, !alias.scope !1210
  %1021 = zext <8 x i16> %1020 to <8 x i32>
  %1022 = mul nuw nsw <8 x i32> %997, %1021
  %1023 = add nuw nsw <8 x i32> %1017, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %1024 = add nuw nsw <8 x i32> %1023, %1022
  %1025 = lshr <8 x i32> %1024, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %1026 = trunc <8 x i32> %1025 to <8 x i16>
  %1027 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 88
  %1028 = bitcast i16* %1027 to <8 x i16>*
  store <8 x i16> %1026, <8 x i16>* %1028, align 16, !alias.scope !1213, !noalias !1210
  br label %1059

1029:                                             ; preds = %982, %1029
  %1030 = phi i64 [ %1057, %1029 ], [ 0, %982 ]
  %1031 = phi i16* [ %1048, %1029 ], [ %984, %982 ]
  %1032 = load i16, i16* %1031, align 2
  %1033 = zext i16 %1032 to i32
  %1034 = mul nuw nsw i32 %22, %1033
  %1035 = getelementptr inbounds i16, i16* %1031, i64 1
  %1036 = load i16, i16* %1035, align 2
  %1037 = zext i16 %1036 to i32
  %1038 = mul nuw nsw i32 %24, %1037
  %1039 = add nuw nsw i32 %1034, 64
  %1040 = add nuw nsw i32 %1039, %1038
  %1041 = lshr i32 %1040, 7
  %1042 = trunc i32 %1041 to i16
  %1043 = getelementptr inbounds i16, i16* %985, i64 %1030
  store i16 %1042, i16* %1043, align 4
  %1044 = or i64 %1030, 1
  %1045 = load i16, i16* %1035, align 2
  %1046 = zext i16 %1045 to i32
  %1047 = mul nuw nsw i32 %22, %1046
  %1048 = getelementptr inbounds i16, i16* %1031, i64 2
  %1049 = load i16, i16* %1048, align 2
  %1050 = zext i16 %1049 to i32
  %1051 = mul nuw nsw i32 %24, %1050
  %1052 = add nuw nsw i32 %1047, 64
  %1053 = add nuw nsw i32 %1052, %1051
  %1054 = lshr i32 %1053, 7
  %1055 = trunc i32 %1054 to i16
  %1056 = getelementptr inbounds i16, i16* %985, i64 %1044
  store i16 %1055, i16* %1056, align 2
  %1057 = add nuw nsw i64 %1030, 2
  %1058 = icmp eq i64 %1057, 16
  br i1 %1058, label %1059, label %1029, !llvm.loop !1215

1059:                                             ; preds = %1029, %993
  %1060 = phi i16* [ %998, %993 ], [ %1048, %1029 ]
  %1061 = getelementptr inbounds i16, i16* %1060, i64 %20
  %1062 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 96
  %1063 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 96
  %1064 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 112
  %1065 = add nuw nsw i64 %20, 17
  %1066 = getelementptr i16, i16* %1060, i64 %1065
  %1067 = icmp ult i16* %1063, %1066
  %1068 = icmp ult i16* %1061, %1064
  %1069 = and i1 %1067, %1068
  br i1 %1069, label %1106, label %1070

1070:                                             ; preds = %1059
  %1071 = insertelement <8 x i32> undef, i32 %22, i32 0
  %1072 = shufflevector <8 x i32> %1071, <8 x i32> undef, <8 x i32> zeroinitializer
  %1073 = insertelement <8 x i32> undef, i32 %24, i32 0
  %1074 = shufflevector <8 x i32> %1073, <8 x i32> undef, <8 x i32> zeroinitializer
  %1075 = getelementptr i16, i16* %1061, i64 16
  %1076 = bitcast i16* %1061 to <8 x i16>*
  %1077 = load <8 x i16>, <8 x i16>* %1076, align 2, !alias.scope !1216
  %1078 = zext <8 x i16> %1077 to <8 x i32>
  %1079 = mul nuw nsw <8 x i32> %1072, %1078
  %1080 = getelementptr inbounds i16, i16* %1061, i64 1
  %1081 = bitcast i16* %1080 to <8 x i16>*
  %1082 = load <8 x i16>, <8 x i16>* %1081, align 2, !alias.scope !1216
  %1083 = zext <8 x i16> %1082 to <8 x i32>
  %1084 = mul nuw nsw <8 x i32> %1074, %1083
  %1085 = add nuw nsw <8 x i32> %1079, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %1086 = add nuw nsw <8 x i32> %1085, %1084
  %1087 = lshr <8 x i32> %1086, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %1088 = trunc <8 x i32> %1087 to <8 x i16>
  %1089 = bitcast i16* %1062 to <8 x i16>*
  store <8 x i16> %1088, <8 x i16>* %1089, align 16, !alias.scope !1219, !noalias !1216
  %1090 = getelementptr i16, i16* %1061, i64 8
  %1091 = bitcast i16* %1090 to <8 x i16>*
  %1092 = load <8 x i16>, <8 x i16>* %1091, align 2, !alias.scope !1216
  %1093 = zext <8 x i16> %1092 to <8 x i32>
  %1094 = mul nuw nsw <8 x i32> %1072, %1093
  %1095 = getelementptr inbounds i16, i16* %1090, i64 1
  %1096 = bitcast i16* %1095 to <8 x i16>*
  %1097 = load <8 x i16>, <8 x i16>* %1096, align 2, !alias.scope !1216
  %1098 = zext <8 x i16> %1097 to <8 x i32>
  %1099 = mul nuw nsw <8 x i32> %1074, %1098
  %1100 = add nuw nsw <8 x i32> %1094, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %1101 = add nuw nsw <8 x i32> %1100, %1099
  %1102 = lshr <8 x i32> %1101, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %1103 = trunc <8 x i32> %1102 to <8 x i16>
  %1104 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 104
  %1105 = bitcast i16* %1104 to <8 x i16>*
  store <8 x i16> %1103, <8 x i16>* %1105, align 16, !alias.scope !1219, !noalias !1216
  br label %1136

1106:                                             ; preds = %1059, %1106
  %1107 = phi i64 [ %1134, %1106 ], [ 0, %1059 ]
  %1108 = phi i16* [ %1125, %1106 ], [ %1061, %1059 ]
  %1109 = load i16, i16* %1108, align 2
  %1110 = zext i16 %1109 to i32
  %1111 = mul nuw nsw i32 %22, %1110
  %1112 = getelementptr inbounds i16, i16* %1108, i64 1
  %1113 = load i16, i16* %1112, align 2
  %1114 = zext i16 %1113 to i32
  %1115 = mul nuw nsw i32 %24, %1114
  %1116 = add nuw nsw i32 %1111, 64
  %1117 = add nuw nsw i32 %1116, %1115
  %1118 = lshr i32 %1117, 7
  %1119 = trunc i32 %1118 to i16
  %1120 = getelementptr inbounds i16, i16* %1062, i64 %1107
  store i16 %1119, i16* %1120, align 4
  %1121 = or i64 %1107, 1
  %1122 = load i16, i16* %1112, align 2
  %1123 = zext i16 %1122 to i32
  %1124 = mul nuw nsw i32 %22, %1123
  %1125 = getelementptr inbounds i16, i16* %1108, i64 2
  %1126 = load i16, i16* %1125, align 2
  %1127 = zext i16 %1126 to i32
  %1128 = mul nuw nsw i32 %24, %1127
  %1129 = add nuw nsw i32 %1124, 64
  %1130 = add nuw nsw i32 %1129, %1128
  %1131 = lshr i32 %1130, 7
  %1132 = trunc i32 %1131 to i16
  %1133 = getelementptr inbounds i16, i16* %1062, i64 %1121
  store i16 %1132, i16* %1133, align 2
  %1134 = add nuw nsw i64 %1107, 2
  %1135 = icmp eq i64 %1134, 16
  br i1 %1135, label %1136, label %1106, !llvm.loop !1221

1136:                                             ; preds = %1106, %1070
  %1137 = phi i16* [ %1075, %1070 ], [ %1125, %1106 ]
  %1138 = getelementptr inbounds i16, i16* %1137, i64 %20
  %1139 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 112
  %1140 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 112
  %1141 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 128
  %1142 = add nuw nsw i64 %20, 17
  %1143 = getelementptr i16, i16* %1137, i64 %1142
  %1144 = icmp ult i16* %1140, %1143
  %1145 = icmp ult i16* %1138, %1141
  %1146 = and i1 %1144, %1145
  br i1 %1146, label %1183, label %1147

1147:                                             ; preds = %1136
  %1148 = insertelement <8 x i32> undef, i32 %22, i32 0
  %1149 = shufflevector <8 x i32> %1148, <8 x i32> undef, <8 x i32> zeroinitializer
  %1150 = insertelement <8 x i32> undef, i32 %24, i32 0
  %1151 = shufflevector <8 x i32> %1150, <8 x i32> undef, <8 x i32> zeroinitializer
  %1152 = getelementptr i16, i16* %1138, i64 16
  %1153 = bitcast i16* %1138 to <8 x i16>*
  %1154 = load <8 x i16>, <8 x i16>* %1153, align 2, !alias.scope !1222
  %1155 = zext <8 x i16> %1154 to <8 x i32>
  %1156 = mul nuw nsw <8 x i32> %1149, %1155
  %1157 = getelementptr inbounds i16, i16* %1138, i64 1
  %1158 = bitcast i16* %1157 to <8 x i16>*
  %1159 = load <8 x i16>, <8 x i16>* %1158, align 2, !alias.scope !1222
  %1160 = zext <8 x i16> %1159 to <8 x i32>
  %1161 = mul nuw nsw <8 x i32> %1151, %1160
  %1162 = add nuw nsw <8 x i32> %1156, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %1163 = add nuw nsw <8 x i32> %1162, %1161
  %1164 = lshr <8 x i32> %1163, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %1165 = trunc <8 x i32> %1164 to <8 x i16>
  %1166 = bitcast i16* %1139 to <8 x i16>*
  store <8 x i16> %1165, <8 x i16>* %1166, align 16, !alias.scope !1225, !noalias !1222
  %1167 = getelementptr i16, i16* %1138, i64 8
  %1168 = bitcast i16* %1167 to <8 x i16>*
  %1169 = load <8 x i16>, <8 x i16>* %1168, align 2, !alias.scope !1222
  %1170 = zext <8 x i16> %1169 to <8 x i32>
  %1171 = mul nuw nsw <8 x i32> %1149, %1170
  %1172 = getelementptr inbounds i16, i16* %1167, i64 1
  %1173 = bitcast i16* %1172 to <8 x i16>*
  %1174 = load <8 x i16>, <8 x i16>* %1173, align 2, !alias.scope !1222
  %1175 = zext <8 x i16> %1174 to <8 x i32>
  %1176 = mul nuw nsw <8 x i32> %1151, %1175
  %1177 = add nuw nsw <8 x i32> %1171, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %1178 = add nuw nsw <8 x i32> %1177, %1176
  %1179 = lshr <8 x i32> %1178, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %1180 = trunc <8 x i32> %1179 to <8 x i16>
  %1181 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 120
  %1182 = bitcast i16* %1181 to <8 x i16>*
  store <8 x i16> %1180, <8 x i16>* %1182, align 16, !alias.scope !1225, !noalias !1222
  br label %1213

1183:                                             ; preds = %1136, %1183
  %1184 = phi i64 [ %1211, %1183 ], [ 0, %1136 ]
  %1185 = phi i16* [ %1202, %1183 ], [ %1138, %1136 ]
  %1186 = load i16, i16* %1185, align 2
  %1187 = zext i16 %1186 to i32
  %1188 = mul nuw nsw i32 %22, %1187
  %1189 = getelementptr inbounds i16, i16* %1185, i64 1
  %1190 = load i16, i16* %1189, align 2
  %1191 = zext i16 %1190 to i32
  %1192 = mul nuw nsw i32 %24, %1191
  %1193 = add nuw nsw i32 %1188, 64
  %1194 = add nuw nsw i32 %1193, %1192
  %1195 = lshr i32 %1194, 7
  %1196 = trunc i32 %1195 to i16
  %1197 = getelementptr inbounds i16, i16* %1139, i64 %1184
  store i16 %1196, i16* %1197, align 4
  %1198 = or i64 %1184, 1
  %1199 = load i16, i16* %1189, align 2
  %1200 = zext i16 %1199 to i32
  %1201 = mul nuw nsw i32 %22, %1200
  %1202 = getelementptr inbounds i16, i16* %1185, i64 2
  %1203 = load i16, i16* %1202, align 2
  %1204 = zext i16 %1203 to i32
  %1205 = mul nuw nsw i32 %24, %1204
  %1206 = add nuw nsw i32 %1201, 64
  %1207 = add nuw nsw i32 %1206, %1205
  %1208 = lshr i32 %1207, 7
  %1209 = trunc i32 %1208 to i16
  %1210 = getelementptr inbounds i16, i16* %1139, i64 %1198
  store i16 %1209, i16* %1210, align 2
  %1211 = add nuw nsw i64 %1184, 2
  %1212 = icmp eq i64 %1211, 16
  br i1 %1212, label %1213, label %1183, !llvm.loop !1227

1213:                                             ; preds = %1183, %1147
  %1214 = phi i16* [ %1152, %1147 ], [ %1202, %1183 ]
  %1215 = getelementptr inbounds i16, i16* %1214, i64 %20
  %1216 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 128
  %1217 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 128
  %1218 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 1, i64 0
  %1219 = add nuw nsw i64 %20, 17
  %1220 = getelementptr i16, i16* %1214, i64 %1219
  %1221 = icmp ult i16* %1217, %1220
  %1222 = icmp ult i16* %1215, %1218
  %1223 = and i1 %1221, %1222
  br i1 %1223, label %1259, label %1224

1224:                                             ; preds = %1213
  %1225 = insertelement <8 x i32> undef, i32 %22, i32 0
  %1226 = shufflevector <8 x i32> %1225, <8 x i32> undef, <8 x i32> zeroinitializer
  %1227 = insertelement <8 x i32> undef, i32 %24, i32 0
  %1228 = shufflevector <8 x i32> %1227, <8 x i32> undef, <8 x i32> zeroinitializer
  %1229 = bitcast i16* %1215 to <8 x i16>*
  %1230 = load <8 x i16>, <8 x i16>* %1229, align 2, !alias.scope !1228
  %1231 = zext <8 x i16> %1230 to <8 x i32>
  %1232 = mul nuw nsw <8 x i32> %1226, %1231
  %1233 = getelementptr inbounds i16, i16* %1215, i64 1
  %1234 = bitcast i16* %1233 to <8 x i16>*
  %1235 = load <8 x i16>, <8 x i16>* %1234, align 2, !alias.scope !1228
  %1236 = zext <8 x i16> %1235 to <8 x i32>
  %1237 = mul nuw nsw <8 x i32> %1228, %1236
  %1238 = add nuw nsw <8 x i32> %1232, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %1239 = add nuw nsw <8 x i32> %1238, %1237
  %1240 = lshr <8 x i32> %1239, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %1241 = trunc <8 x i32> %1240 to <8 x i16>
  %1242 = bitcast i16* %1216 to <8 x i16>*
  store <8 x i16> %1241, <8 x i16>* %1242, align 16, !alias.scope !1231, !noalias !1228
  %1243 = getelementptr i16, i16* %1215, i64 8
  %1244 = bitcast i16* %1243 to <8 x i16>*
  %1245 = load <8 x i16>, <8 x i16>* %1244, align 2, !alias.scope !1228
  %1246 = zext <8 x i16> %1245 to <8 x i32>
  %1247 = mul nuw nsw <8 x i32> %1226, %1246
  %1248 = getelementptr inbounds i16, i16* %1243, i64 1
  %1249 = bitcast i16* %1248 to <8 x i16>*
  %1250 = load <8 x i16>, <8 x i16>* %1249, align 2, !alias.scope !1228
  %1251 = zext <8 x i16> %1250 to <8 x i32>
  %1252 = mul nuw nsw <8 x i32> %1228, %1251
  %1253 = add nuw nsw <8 x i32> %1247, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %1254 = add nuw nsw <8 x i32> %1253, %1252
  %1255 = lshr <8 x i32> %1254, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %1256 = trunc <8 x i32> %1255 to <8 x i16>
  %1257 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 136
  %1258 = bitcast i16* %1257 to <8 x i16>*
  store <8 x i16> %1256, <8 x i16>* %1258, align 16, !alias.scope !1231, !noalias !1228
  br label %1289

1259:                                             ; preds = %1213, %1259
  %1260 = phi i64 [ %1287, %1259 ], [ 0, %1213 ]
  %1261 = phi i16* [ %1278, %1259 ], [ %1215, %1213 ]
  %1262 = load i16, i16* %1261, align 2
  %1263 = zext i16 %1262 to i32
  %1264 = mul nuw nsw i32 %22, %1263
  %1265 = getelementptr inbounds i16, i16* %1261, i64 1
  %1266 = load i16, i16* %1265, align 2
  %1267 = zext i16 %1266 to i32
  %1268 = mul nuw nsw i32 %24, %1267
  %1269 = add nuw nsw i32 %1264, 64
  %1270 = add nuw nsw i32 %1269, %1268
  %1271 = lshr i32 %1270, 7
  %1272 = trunc i32 %1271 to i16
  %1273 = getelementptr inbounds i16, i16* %1216, i64 %1260
  store i16 %1272, i16* %1273, align 4
  %1274 = or i64 %1260, 1
  %1275 = load i16, i16* %1265, align 2
  %1276 = zext i16 %1275 to i32
  %1277 = mul nuw nsw i32 %22, %1276
  %1278 = getelementptr inbounds i16, i16* %1261, i64 2
  %1279 = load i16, i16* %1278, align 2
  %1280 = zext i16 %1279 to i32
  %1281 = mul nuw nsw i32 %24, %1280
  %1282 = add nuw nsw i32 %1277, 64
  %1283 = add nuw nsw i32 %1282, %1281
  %1284 = lshr i32 %1283, 7
  %1285 = trunc i32 %1284 to i16
  %1286 = getelementptr inbounds i16, i16* %1216, i64 %1274
  store i16 %1285, i16* %1286, align 2
  %1287 = add nuw nsw i64 %1260, 2
  %1288 = icmp eq i64 %1287, 16
  br i1 %1288, label %1289, label %1259, !llvm.loop !1233

1289:                                             ; preds = %1259, %1224
  %1290 = sext i32 %3 to i64
  %1291 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %1290, i64 0
  %1292 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %1290, i64 1
  %1293 = load i8, i8* %1291, align 2
  %1294 = zext i8 %1293 to i32
  %1295 = load i8, i8* %1292, align 1
  %1296 = zext i8 %1295 to i32
  %1297 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 16
  %1298 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 32
  %1299 = bitcast i16* %1298 to [128 x i16]*
  %1300 = icmp ult [128 x i16]* %10, %1299
  %1301 = bitcast i16* %1297 to [144 x i16]*
  %1302 = icmp ult [144 x i16]* %8, %1301
  %1303 = and i1 %1300, %1302
  br i1 %1303, label %146, label %1304

1304:                                             ; preds = %1289
  %1305 = insertelement <8 x i32> undef, i32 %1294, i32 0
  %1306 = shufflevector <8 x i32> %1305, <8 x i32> undef, <8 x i32> zeroinitializer
  %1307 = insertelement <8 x i32> undef, i32 %1296, i32 0
  %1308 = shufflevector <8 x i32> %1307, <8 x i32> undef, <8 x i32> zeroinitializer
  %1309 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 16
  %1310 = bitcast [144 x i16]* %8 to <8 x i16>*
  %1311 = load <8 x i16>, <8 x i16>* %1310, align 16, !alias.scope !1234
  %1312 = zext <8 x i16> %1311 to <8 x i32>
  %1313 = mul nuw nsw <8 x i32> %1306, %1312
  %1314 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 16
  %1315 = bitcast i16* %1314 to <8 x i16>*
  %1316 = load <8 x i16>, <8 x i16>* %1315, align 16, !alias.scope !1234
  %1317 = zext <8 x i16> %1316 to <8 x i32>
  %1318 = mul nuw nsw <8 x i32> %1308, %1317
  %1319 = add nuw nsw <8 x i32> %1313, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %1320 = add nuw nsw <8 x i32> %1319, %1318
  %1321 = lshr <8 x i32> %1320, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %1322 = trunc <8 x i32> %1321 to <8 x i16>
  %1323 = bitcast [128 x i16]* %10 to <8 x i16>*
  store <8 x i16> %1322, <8 x i16>* %1323, align 16, !alias.scope !1237, !noalias !1234
  %1324 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 8
  %1325 = bitcast i16* %1324 to <8 x i16>*
  %1326 = load <8 x i16>, <8 x i16>* %1325, align 16, !alias.scope !1234
  %1327 = zext <8 x i16> %1326 to <8 x i32>
  %1328 = mul nuw nsw <8 x i32> %1306, %1327
  %1329 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 24
  %1330 = bitcast i16* %1329 to <8 x i16>*
  %1331 = load <8 x i16>, <8 x i16>* %1330, align 16, !alias.scope !1234
  %1332 = zext <8 x i16> %1331 to <8 x i32>
  %1333 = mul nuw nsw <8 x i32> %1308, %1332
  %1334 = add nuw nsw <8 x i32> %1328, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %1335 = add nuw nsw <8 x i32> %1334, %1333
  %1336 = lshr <8 x i32> %1335, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %1337 = trunc <8 x i32> %1336 to <8 x i16>
  %1338 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 8
  %1339 = bitcast i16* %1338 to <8 x i16>*
  store <8 x i16> %1337, <8 x i16>* %1339, align 16, !alias.scope !1237, !noalias !1234
  br label %178
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_highbd_12_sub_pixel_variance16x8_c(i8*, i32, i32, i32, i8*, i32, i32* nocapture) local_unnamed_addr #2 {
  %8 = alloca [144 x i16], align 16
  %9 = bitcast [144 x i16]* %8 to i8*
  %10 = alloca [128 x i16], align 16
  %11 = bitcast [128 x i16]* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 288, i8* nonnull %9) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %9, i8 -86, i64 288, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %11) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %11, i8 -86, i64 256, i1 false)
  %12 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 0
  %13 = sext i32 %2 to i64
  %14 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %13, i64 0
  %15 = ptrtoint i8* %0 to i64
  %16 = shl i64 %15, 1
  %17 = inttoptr i64 %16 to i16*
  %18 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %13, i64 1
  %19 = add i32 %1, -16
  %20 = zext i32 %19 to i64
  %21 = load i8, i8* %14, align 2
  %22 = zext i8 %21 to i32
  %23 = load i8, i8* %18, align 1
  %24 = zext i8 %23 to i32
  %25 = inttoptr i64 %16 to i8*
  %26 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 16
  %27 = bitcast i16* %26 to i8*
  %28 = getelementptr i16, i16* %17, i64 17
  %29 = bitcast i16* %28 to [144 x i16]*
  %30 = icmp ult [144 x i16]* %8, %29
  %31 = icmp ult i8* %25, %27
  %32 = and i1 %30, %31
  br i1 %32, label %69, label %33

33:                                               ; preds = %7
  %34 = insertelement <8 x i32> undef, i32 %22, i32 0
  %35 = shufflevector <8 x i32> %34, <8 x i32> undef, <8 x i32> zeroinitializer
  %36 = insertelement <8 x i32> undef, i32 %24, i32 0
  %37 = shufflevector <8 x i32> %36, <8 x i32> undef, <8 x i32> zeroinitializer
  %38 = getelementptr i16, i16* %17, i64 16
  %39 = inttoptr i64 %16 to <8 x i16>*
  %40 = load <8 x i16>, <8 x i16>* %39, align 2, !alias.scope !1239
  %41 = zext <8 x i16> %40 to <8 x i32>
  %42 = mul nuw nsw <8 x i32> %35, %41
  %43 = getelementptr inbounds i16, i16* %17, i64 1
  %44 = bitcast i16* %43 to <8 x i16>*
  %45 = load <8 x i16>, <8 x i16>* %44, align 2, !alias.scope !1239
  %46 = zext <8 x i16> %45 to <8 x i32>
  %47 = mul nuw nsw <8 x i32> %37, %46
  %48 = add nuw nsw <8 x i32> %42, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %49 = add nuw nsw <8 x i32> %48, %47
  %50 = lshr <8 x i32> %49, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %51 = trunc <8 x i32> %50 to <8 x i16>
  %52 = bitcast [144 x i16]* %8 to <8 x i16>*
  store <8 x i16> %51, <8 x i16>* %52, align 16, !alias.scope !1242, !noalias !1239
  %53 = getelementptr i16, i16* %17, i64 8
  %54 = bitcast i16* %53 to <8 x i16>*
  %55 = load <8 x i16>, <8 x i16>* %54, align 2, !alias.scope !1239
  %56 = zext <8 x i16> %55 to <8 x i32>
  %57 = mul nuw nsw <8 x i32> %35, %56
  %58 = getelementptr inbounds i16, i16* %17, i64 9
  %59 = bitcast i16* %58 to <8 x i16>*
  %60 = load <8 x i16>, <8 x i16>* %59, align 2, !alias.scope !1239
  %61 = zext <8 x i16> %60 to <8 x i32>
  %62 = mul nuw nsw <8 x i32> %37, %61
  %63 = add nuw nsw <8 x i32> %57, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %64 = add nuw nsw <8 x i32> %63, %62
  %65 = lshr <8 x i32> %64, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %66 = trunc <8 x i32> %65 to <8 x i16>
  %67 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 8
  %68 = bitcast i16* %67 to <8 x i16>*
  store <8 x i16> %66, <8 x i16>* %68, align 16, !alias.scope !1242, !noalias !1239
  br label %99

69:                                               ; preds = %7, %69
  %70 = phi i64 [ %97, %69 ], [ 0, %7 ]
  %71 = phi i16* [ %88, %69 ], [ %17, %7 ]
  %72 = load i16, i16* %71, align 2
  %73 = zext i16 %72 to i32
  %74 = mul nuw nsw i32 %22, %73
  %75 = getelementptr inbounds i16, i16* %71, i64 1
  %76 = load i16, i16* %75, align 2
  %77 = zext i16 %76 to i32
  %78 = mul nuw nsw i32 %24, %77
  %79 = add nuw nsw i32 %74, 64
  %80 = add nuw nsw i32 %79, %78
  %81 = lshr i32 %80, 7
  %82 = trunc i32 %81 to i16
  %83 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 %70
  store i16 %82, i16* %83, align 4
  %84 = or i64 %70, 1
  %85 = load i16, i16* %75, align 2
  %86 = zext i16 %85 to i32
  %87 = mul nuw nsw i32 %22, %86
  %88 = getelementptr inbounds i16, i16* %71, i64 2
  %89 = load i16, i16* %88, align 2
  %90 = zext i16 %89 to i32
  %91 = mul nuw nsw i32 %24, %90
  %92 = add nuw nsw i32 %87, 64
  %93 = add nuw nsw i32 %92, %91
  %94 = lshr i32 %93, 7
  %95 = trunc i32 %94 to i16
  %96 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 %84
  store i16 %95, i16* %96, align 2
  %97 = add nuw nsw i64 %70, 2
  %98 = icmp eq i64 %97, 16
  br i1 %98, label %99, label %69, !llvm.loop !1244

99:                                               ; preds = %69, %33
  %100 = phi i16* [ %38, %33 ], [ %88, %69 ]
  %101 = getelementptr inbounds i16, i16* %100, i64 %20
  %102 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 16
  %103 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 16
  %104 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 32
  %105 = add nuw nsw i64 %20, 17
  %106 = getelementptr i16, i16* %100, i64 %105
  %107 = icmp ult i16* %103, %106
  %108 = icmp ult i16* %101, %104
  %109 = and i1 %107, %108
  br i1 %109, label %721, label %110

110:                                              ; preds = %99
  %111 = insertelement <8 x i32> undef, i32 %22, i32 0
  %112 = shufflevector <8 x i32> %111, <8 x i32> undef, <8 x i32> zeroinitializer
  %113 = insertelement <8 x i32> undef, i32 %24, i32 0
  %114 = shufflevector <8 x i32> %113, <8 x i32> undef, <8 x i32> zeroinitializer
  %115 = getelementptr i16, i16* %101, i64 16
  %116 = bitcast i16* %101 to <8 x i16>*
  %117 = load <8 x i16>, <8 x i16>* %116, align 2, !alias.scope !1245
  %118 = zext <8 x i16> %117 to <8 x i32>
  %119 = mul nuw nsw <8 x i32> %112, %118
  %120 = getelementptr inbounds i16, i16* %101, i64 1
  %121 = bitcast i16* %120 to <8 x i16>*
  %122 = load <8 x i16>, <8 x i16>* %121, align 2, !alias.scope !1245
  %123 = zext <8 x i16> %122 to <8 x i32>
  %124 = mul nuw nsw <8 x i32> %114, %123
  %125 = add nuw nsw <8 x i32> %119, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %126 = add nuw nsw <8 x i32> %125, %124
  %127 = lshr <8 x i32> %126, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %128 = trunc <8 x i32> %127 to <8 x i16>
  %129 = bitcast i16* %102 to <8 x i16>*
  store <8 x i16> %128, <8 x i16>* %129, align 16, !alias.scope !1248, !noalias !1245
  %130 = getelementptr i16, i16* %101, i64 8
  %131 = bitcast i16* %130 to <8 x i16>*
  %132 = load <8 x i16>, <8 x i16>* %131, align 2, !alias.scope !1245
  %133 = zext <8 x i16> %132 to <8 x i32>
  %134 = mul nuw nsw <8 x i32> %112, %133
  %135 = getelementptr inbounds i16, i16* %130, i64 1
  %136 = bitcast i16* %135 to <8 x i16>*
  %137 = load <8 x i16>, <8 x i16>* %136, align 2, !alias.scope !1245
  %138 = zext <8 x i16> %137 to <8 x i32>
  %139 = mul nuw nsw <8 x i32> %114, %138
  %140 = add nuw nsw <8 x i32> %134, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %141 = add nuw nsw <8 x i32> %140, %139
  %142 = lshr <8 x i32> %141, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %143 = trunc <8 x i32> %142 to <8 x i16>
  %144 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 24
  %145 = bitcast i16* %144 to <8 x i16>*
  store <8 x i16> %143, <8 x i16>* %145, align 16, !alias.scope !1248, !noalias !1245
  br label %751

146:                                              ; preds = %1289, %146
  %147 = phi i64 [ %176, %146 ], [ 0, %1289 ]
  %148 = phi i16* [ %175, %146 ], [ %12, %1289 ]
  %149 = load i16, i16* %148, align 2
  %150 = zext i16 %149 to i32
  %151 = mul nuw nsw i32 %1294, %150
  %152 = getelementptr inbounds i16, i16* %148, i64 16
  %153 = load i16, i16* %152, align 2
  %154 = zext i16 %153 to i32
  %155 = mul nuw nsw i32 %1296, %154
  %156 = add nuw nsw i32 %151, 64
  %157 = add nuw nsw i32 %156, %155
  %158 = lshr i32 %157, 7
  %159 = trunc i32 %158 to i16
  %160 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 %147
  store i16 %159, i16* %160, align 4
  %161 = getelementptr inbounds i16, i16* %148, i64 1
  %162 = or i64 %147, 1
  %163 = load i16, i16* %161, align 2
  %164 = zext i16 %163 to i32
  %165 = mul nuw nsw i32 %1294, %164
  %166 = getelementptr inbounds i16, i16* %148, i64 17
  %167 = load i16, i16* %166, align 2
  %168 = zext i16 %167 to i32
  %169 = mul nuw nsw i32 %1296, %168
  %170 = add nuw nsw i32 %165, 64
  %171 = add nuw nsw i32 %170, %169
  %172 = lshr i32 %171, 7
  %173 = trunc i32 %172 to i16
  %174 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 %162
  store i16 %173, i16* %174, align 2
  %175 = getelementptr inbounds i16, i16* %148, i64 2
  %176 = add nuw nsw i64 %147, 2
  %177 = icmp eq i64 %176, 16
  br i1 %177, label %178, label %146, !llvm.loop !1250

178:                                              ; preds = %146, %1304
  %179 = phi i16* [ %1309, %1304 ], [ %175, %146 ]
  %180 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 16
  %181 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 16
  %182 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 32
  %183 = getelementptr i16, i16* %179, i64 32
  %184 = icmp ult i16* %181, %183
  %185 = icmp ult i16* %179, %182
  %186 = and i1 %184, %185
  br i1 %186, label %223, label %187

187:                                              ; preds = %178
  %188 = insertelement <8 x i32> undef, i32 %1294, i32 0
  %189 = shufflevector <8 x i32> %188, <8 x i32> undef, <8 x i32> zeroinitializer
  %190 = insertelement <8 x i32> undef, i32 %1296, i32 0
  %191 = shufflevector <8 x i32> %190, <8 x i32> undef, <8 x i32> zeroinitializer
  %192 = getelementptr i16, i16* %179, i64 16
  %193 = bitcast i16* %179 to <8 x i16>*
  %194 = load <8 x i16>, <8 x i16>* %193, align 2, !alias.scope !1251
  %195 = zext <8 x i16> %194 to <8 x i32>
  %196 = mul nuw nsw <8 x i32> %189, %195
  %197 = getelementptr inbounds i16, i16* %179, i64 16
  %198 = bitcast i16* %197 to <8 x i16>*
  %199 = load <8 x i16>, <8 x i16>* %198, align 2, !alias.scope !1251
  %200 = zext <8 x i16> %199 to <8 x i32>
  %201 = mul nuw nsw <8 x i32> %191, %200
  %202 = add nuw nsw <8 x i32> %196, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %203 = add nuw nsw <8 x i32> %202, %201
  %204 = lshr <8 x i32> %203, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %205 = trunc <8 x i32> %204 to <8 x i16>
  %206 = bitcast i16* %180 to <8 x i16>*
  store <8 x i16> %205, <8 x i16>* %206, align 16, !alias.scope !1254, !noalias !1251
  %207 = getelementptr i16, i16* %179, i64 8
  %208 = bitcast i16* %207 to <8 x i16>*
  %209 = load <8 x i16>, <8 x i16>* %208, align 2, !alias.scope !1251
  %210 = zext <8 x i16> %209 to <8 x i32>
  %211 = mul nuw nsw <8 x i32> %189, %210
  %212 = getelementptr inbounds i16, i16* %179, i64 24
  %213 = bitcast i16* %212 to <8 x i16>*
  %214 = load <8 x i16>, <8 x i16>* %213, align 2, !alias.scope !1251
  %215 = zext <8 x i16> %214 to <8 x i32>
  %216 = mul nuw nsw <8 x i32> %191, %215
  %217 = add nuw nsw <8 x i32> %211, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %218 = add nuw nsw <8 x i32> %217, %216
  %219 = lshr <8 x i32> %218, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %220 = trunc <8 x i32> %219 to <8 x i16>
  %221 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 24
  %222 = bitcast i16* %221 to <8 x i16>*
  store <8 x i16> %220, <8 x i16>* %222, align 16, !alias.scope !1254, !noalias !1251
  br label %255

223:                                              ; preds = %178, %223
  %224 = phi i64 [ %253, %223 ], [ 0, %178 ]
  %225 = phi i16* [ %252, %223 ], [ %179, %178 ]
  %226 = load i16, i16* %225, align 2
  %227 = zext i16 %226 to i32
  %228 = mul nuw nsw i32 %1294, %227
  %229 = getelementptr inbounds i16, i16* %225, i64 16
  %230 = load i16, i16* %229, align 2
  %231 = zext i16 %230 to i32
  %232 = mul nuw nsw i32 %1296, %231
  %233 = add nuw nsw i32 %228, 64
  %234 = add nuw nsw i32 %233, %232
  %235 = lshr i32 %234, 7
  %236 = trunc i32 %235 to i16
  %237 = getelementptr inbounds i16, i16* %180, i64 %224
  store i16 %236, i16* %237, align 4
  %238 = getelementptr inbounds i16, i16* %225, i64 1
  %239 = or i64 %224, 1
  %240 = load i16, i16* %238, align 2
  %241 = zext i16 %240 to i32
  %242 = mul nuw nsw i32 %1294, %241
  %243 = getelementptr inbounds i16, i16* %225, i64 17
  %244 = load i16, i16* %243, align 2
  %245 = zext i16 %244 to i32
  %246 = mul nuw nsw i32 %1296, %245
  %247 = add nuw nsw i32 %242, 64
  %248 = add nuw nsw i32 %247, %246
  %249 = lshr i32 %248, 7
  %250 = trunc i32 %249 to i16
  %251 = getelementptr inbounds i16, i16* %180, i64 %239
  store i16 %250, i16* %251, align 2
  %252 = getelementptr inbounds i16, i16* %225, i64 2
  %253 = add nuw nsw i64 %224, 2
  %254 = icmp eq i64 %253, 16
  br i1 %254, label %255, label %223, !llvm.loop !1256

255:                                              ; preds = %223, %187
  %256 = phi i16* [ %192, %187 ], [ %252, %223 ]
  %257 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 32
  %258 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 32
  %259 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 48
  %260 = getelementptr i16, i16* %256, i64 32
  %261 = icmp ult i16* %258, %260
  %262 = icmp ult i16* %256, %259
  %263 = and i1 %261, %262
  br i1 %263, label %300, label %264

264:                                              ; preds = %255
  %265 = insertelement <8 x i32> undef, i32 %1294, i32 0
  %266 = shufflevector <8 x i32> %265, <8 x i32> undef, <8 x i32> zeroinitializer
  %267 = insertelement <8 x i32> undef, i32 %1296, i32 0
  %268 = shufflevector <8 x i32> %267, <8 x i32> undef, <8 x i32> zeroinitializer
  %269 = getelementptr i16, i16* %256, i64 16
  %270 = bitcast i16* %256 to <8 x i16>*
  %271 = load <8 x i16>, <8 x i16>* %270, align 2, !alias.scope !1257
  %272 = zext <8 x i16> %271 to <8 x i32>
  %273 = mul nuw nsw <8 x i32> %266, %272
  %274 = getelementptr inbounds i16, i16* %256, i64 16
  %275 = bitcast i16* %274 to <8 x i16>*
  %276 = load <8 x i16>, <8 x i16>* %275, align 2, !alias.scope !1257
  %277 = zext <8 x i16> %276 to <8 x i32>
  %278 = mul nuw nsw <8 x i32> %268, %277
  %279 = add nuw nsw <8 x i32> %273, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %280 = add nuw nsw <8 x i32> %279, %278
  %281 = lshr <8 x i32> %280, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %282 = trunc <8 x i32> %281 to <8 x i16>
  %283 = bitcast i16* %257 to <8 x i16>*
  store <8 x i16> %282, <8 x i16>* %283, align 16, !alias.scope !1260, !noalias !1257
  %284 = getelementptr i16, i16* %256, i64 8
  %285 = bitcast i16* %284 to <8 x i16>*
  %286 = load <8 x i16>, <8 x i16>* %285, align 2, !alias.scope !1257
  %287 = zext <8 x i16> %286 to <8 x i32>
  %288 = mul nuw nsw <8 x i32> %266, %287
  %289 = getelementptr inbounds i16, i16* %256, i64 24
  %290 = bitcast i16* %289 to <8 x i16>*
  %291 = load <8 x i16>, <8 x i16>* %290, align 2, !alias.scope !1257
  %292 = zext <8 x i16> %291 to <8 x i32>
  %293 = mul nuw nsw <8 x i32> %268, %292
  %294 = add nuw nsw <8 x i32> %288, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %295 = add nuw nsw <8 x i32> %294, %293
  %296 = lshr <8 x i32> %295, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %297 = trunc <8 x i32> %296 to <8 x i16>
  %298 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 40
  %299 = bitcast i16* %298 to <8 x i16>*
  store <8 x i16> %297, <8 x i16>* %299, align 16, !alias.scope !1260, !noalias !1257
  br label %332

300:                                              ; preds = %255, %300
  %301 = phi i64 [ %330, %300 ], [ 0, %255 ]
  %302 = phi i16* [ %329, %300 ], [ %256, %255 ]
  %303 = load i16, i16* %302, align 2
  %304 = zext i16 %303 to i32
  %305 = mul nuw nsw i32 %1294, %304
  %306 = getelementptr inbounds i16, i16* %302, i64 16
  %307 = load i16, i16* %306, align 2
  %308 = zext i16 %307 to i32
  %309 = mul nuw nsw i32 %1296, %308
  %310 = add nuw nsw i32 %305, 64
  %311 = add nuw nsw i32 %310, %309
  %312 = lshr i32 %311, 7
  %313 = trunc i32 %312 to i16
  %314 = getelementptr inbounds i16, i16* %257, i64 %301
  store i16 %313, i16* %314, align 4
  %315 = getelementptr inbounds i16, i16* %302, i64 1
  %316 = or i64 %301, 1
  %317 = load i16, i16* %315, align 2
  %318 = zext i16 %317 to i32
  %319 = mul nuw nsw i32 %1294, %318
  %320 = getelementptr inbounds i16, i16* %302, i64 17
  %321 = load i16, i16* %320, align 2
  %322 = zext i16 %321 to i32
  %323 = mul nuw nsw i32 %1296, %322
  %324 = add nuw nsw i32 %319, 64
  %325 = add nuw nsw i32 %324, %323
  %326 = lshr i32 %325, 7
  %327 = trunc i32 %326 to i16
  %328 = getelementptr inbounds i16, i16* %257, i64 %316
  store i16 %327, i16* %328, align 2
  %329 = getelementptr inbounds i16, i16* %302, i64 2
  %330 = add nuw nsw i64 %301, 2
  %331 = icmp eq i64 %330, 16
  br i1 %331, label %332, label %300, !llvm.loop !1262

332:                                              ; preds = %300, %264
  %333 = phi i16* [ %269, %264 ], [ %329, %300 ]
  %334 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 48
  %335 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 48
  %336 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 64
  %337 = getelementptr i16, i16* %333, i64 32
  %338 = icmp ult i16* %335, %337
  %339 = icmp ult i16* %333, %336
  %340 = and i1 %338, %339
  br i1 %340, label %377, label %341

341:                                              ; preds = %332
  %342 = insertelement <8 x i32> undef, i32 %1294, i32 0
  %343 = shufflevector <8 x i32> %342, <8 x i32> undef, <8 x i32> zeroinitializer
  %344 = insertelement <8 x i32> undef, i32 %1296, i32 0
  %345 = shufflevector <8 x i32> %344, <8 x i32> undef, <8 x i32> zeroinitializer
  %346 = getelementptr i16, i16* %333, i64 16
  %347 = bitcast i16* %333 to <8 x i16>*
  %348 = load <8 x i16>, <8 x i16>* %347, align 2, !alias.scope !1263
  %349 = zext <8 x i16> %348 to <8 x i32>
  %350 = mul nuw nsw <8 x i32> %343, %349
  %351 = getelementptr inbounds i16, i16* %333, i64 16
  %352 = bitcast i16* %351 to <8 x i16>*
  %353 = load <8 x i16>, <8 x i16>* %352, align 2, !alias.scope !1263
  %354 = zext <8 x i16> %353 to <8 x i32>
  %355 = mul nuw nsw <8 x i32> %345, %354
  %356 = add nuw nsw <8 x i32> %350, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %357 = add nuw nsw <8 x i32> %356, %355
  %358 = lshr <8 x i32> %357, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %359 = trunc <8 x i32> %358 to <8 x i16>
  %360 = bitcast i16* %334 to <8 x i16>*
  store <8 x i16> %359, <8 x i16>* %360, align 16, !alias.scope !1266, !noalias !1263
  %361 = getelementptr i16, i16* %333, i64 8
  %362 = bitcast i16* %361 to <8 x i16>*
  %363 = load <8 x i16>, <8 x i16>* %362, align 2, !alias.scope !1263
  %364 = zext <8 x i16> %363 to <8 x i32>
  %365 = mul nuw nsw <8 x i32> %343, %364
  %366 = getelementptr inbounds i16, i16* %333, i64 24
  %367 = bitcast i16* %366 to <8 x i16>*
  %368 = load <8 x i16>, <8 x i16>* %367, align 2, !alias.scope !1263
  %369 = zext <8 x i16> %368 to <8 x i32>
  %370 = mul nuw nsw <8 x i32> %345, %369
  %371 = add nuw nsw <8 x i32> %365, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %372 = add nuw nsw <8 x i32> %371, %370
  %373 = lshr <8 x i32> %372, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %374 = trunc <8 x i32> %373 to <8 x i16>
  %375 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 56
  %376 = bitcast i16* %375 to <8 x i16>*
  store <8 x i16> %374, <8 x i16>* %376, align 16, !alias.scope !1266, !noalias !1263
  br label %409

377:                                              ; preds = %332, %377
  %378 = phi i64 [ %407, %377 ], [ 0, %332 ]
  %379 = phi i16* [ %406, %377 ], [ %333, %332 ]
  %380 = load i16, i16* %379, align 2
  %381 = zext i16 %380 to i32
  %382 = mul nuw nsw i32 %1294, %381
  %383 = getelementptr inbounds i16, i16* %379, i64 16
  %384 = load i16, i16* %383, align 2
  %385 = zext i16 %384 to i32
  %386 = mul nuw nsw i32 %1296, %385
  %387 = add nuw nsw i32 %382, 64
  %388 = add nuw nsw i32 %387, %386
  %389 = lshr i32 %388, 7
  %390 = trunc i32 %389 to i16
  %391 = getelementptr inbounds i16, i16* %334, i64 %378
  store i16 %390, i16* %391, align 4
  %392 = getelementptr inbounds i16, i16* %379, i64 1
  %393 = or i64 %378, 1
  %394 = load i16, i16* %392, align 2
  %395 = zext i16 %394 to i32
  %396 = mul nuw nsw i32 %1294, %395
  %397 = getelementptr inbounds i16, i16* %379, i64 17
  %398 = load i16, i16* %397, align 2
  %399 = zext i16 %398 to i32
  %400 = mul nuw nsw i32 %1296, %399
  %401 = add nuw nsw i32 %396, 64
  %402 = add nuw nsw i32 %401, %400
  %403 = lshr i32 %402, 7
  %404 = trunc i32 %403 to i16
  %405 = getelementptr inbounds i16, i16* %334, i64 %393
  store i16 %404, i16* %405, align 2
  %406 = getelementptr inbounds i16, i16* %379, i64 2
  %407 = add nuw nsw i64 %378, 2
  %408 = icmp eq i64 %407, 16
  br i1 %408, label %409, label %377, !llvm.loop !1268

409:                                              ; preds = %377, %341
  %410 = phi i16* [ %346, %341 ], [ %406, %377 ]
  %411 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 64
  %412 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 64
  %413 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 80
  %414 = getelementptr i16, i16* %410, i64 32
  %415 = icmp ult i16* %412, %414
  %416 = icmp ult i16* %410, %413
  %417 = and i1 %415, %416
  br i1 %417, label %454, label %418

418:                                              ; preds = %409
  %419 = insertelement <8 x i32> undef, i32 %1294, i32 0
  %420 = shufflevector <8 x i32> %419, <8 x i32> undef, <8 x i32> zeroinitializer
  %421 = insertelement <8 x i32> undef, i32 %1296, i32 0
  %422 = shufflevector <8 x i32> %421, <8 x i32> undef, <8 x i32> zeroinitializer
  %423 = getelementptr i16, i16* %410, i64 16
  %424 = bitcast i16* %410 to <8 x i16>*
  %425 = load <8 x i16>, <8 x i16>* %424, align 2, !alias.scope !1269
  %426 = zext <8 x i16> %425 to <8 x i32>
  %427 = mul nuw nsw <8 x i32> %420, %426
  %428 = getelementptr inbounds i16, i16* %410, i64 16
  %429 = bitcast i16* %428 to <8 x i16>*
  %430 = load <8 x i16>, <8 x i16>* %429, align 2, !alias.scope !1269
  %431 = zext <8 x i16> %430 to <8 x i32>
  %432 = mul nuw nsw <8 x i32> %422, %431
  %433 = add nuw nsw <8 x i32> %427, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %434 = add nuw nsw <8 x i32> %433, %432
  %435 = lshr <8 x i32> %434, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %436 = trunc <8 x i32> %435 to <8 x i16>
  %437 = bitcast i16* %411 to <8 x i16>*
  store <8 x i16> %436, <8 x i16>* %437, align 16, !alias.scope !1272, !noalias !1269
  %438 = getelementptr i16, i16* %410, i64 8
  %439 = bitcast i16* %438 to <8 x i16>*
  %440 = load <8 x i16>, <8 x i16>* %439, align 2, !alias.scope !1269
  %441 = zext <8 x i16> %440 to <8 x i32>
  %442 = mul nuw nsw <8 x i32> %420, %441
  %443 = getelementptr inbounds i16, i16* %410, i64 24
  %444 = bitcast i16* %443 to <8 x i16>*
  %445 = load <8 x i16>, <8 x i16>* %444, align 2, !alias.scope !1269
  %446 = zext <8 x i16> %445 to <8 x i32>
  %447 = mul nuw nsw <8 x i32> %422, %446
  %448 = add nuw nsw <8 x i32> %442, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %449 = add nuw nsw <8 x i32> %448, %447
  %450 = lshr <8 x i32> %449, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %451 = trunc <8 x i32> %450 to <8 x i16>
  %452 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 72
  %453 = bitcast i16* %452 to <8 x i16>*
  store <8 x i16> %451, <8 x i16>* %453, align 16, !alias.scope !1272, !noalias !1269
  br label %486

454:                                              ; preds = %409, %454
  %455 = phi i64 [ %484, %454 ], [ 0, %409 ]
  %456 = phi i16* [ %483, %454 ], [ %410, %409 ]
  %457 = load i16, i16* %456, align 2
  %458 = zext i16 %457 to i32
  %459 = mul nuw nsw i32 %1294, %458
  %460 = getelementptr inbounds i16, i16* %456, i64 16
  %461 = load i16, i16* %460, align 2
  %462 = zext i16 %461 to i32
  %463 = mul nuw nsw i32 %1296, %462
  %464 = add nuw nsw i32 %459, 64
  %465 = add nuw nsw i32 %464, %463
  %466 = lshr i32 %465, 7
  %467 = trunc i32 %466 to i16
  %468 = getelementptr inbounds i16, i16* %411, i64 %455
  store i16 %467, i16* %468, align 4
  %469 = getelementptr inbounds i16, i16* %456, i64 1
  %470 = or i64 %455, 1
  %471 = load i16, i16* %469, align 2
  %472 = zext i16 %471 to i32
  %473 = mul nuw nsw i32 %1294, %472
  %474 = getelementptr inbounds i16, i16* %456, i64 17
  %475 = load i16, i16* %474, align 2
  %476 = zext i16 %475 to i32
  %477 = mul nuw nsw i32 %1296, %476
  %478 = add nuw nsw i32 %473, 64
  %479 = add nuw nsw i32 %478, %477
  %480 = lshr i32 %479, 7
  %481 = trunc i32 %480 to i16
  %482 = getelementptr inbounds i16, i16* %411, i64 %470
  store i16 %481, i16* %482, align 2
  %483 = getelementptr inbounds i16, i16* %456, i64 2
  %484 = add nuw nsw i64 %455, 2
  %485 = icmp eq i64 %484, 16
  br i1 %485, label %486, label %454, !llvm.loop !1274

486:                                              ; preds = %454, %418
  %487 = phi i16* [ %423, %418 ], [ %483, %454 ]
  %488 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 80
  %489 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 80
  %490 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 96
  %491 = getelementptr i16, i16* %487, i64 32
  %492 = icmp ult i16* %489, %491
  %493 = icmp ult i16* %487, %490
  %494 = and i1 %492, %493
  br i1 %494, label %531, label %495

495:                                              ; preds = %486
  %496 = insertelement <8 x i32> undef, i32 %1294, i32 0
  %497 = shufflevector <8 x i32> %496, <8 x i32> undef, <8 x i32> zeroinitializer
  %498 = insertelement <8 x i32> undef, i32 %1296, i32 0
  %499 = shufflevector <8 x i32> %498, <8 x i32> undef, <8 x i32> zeroinitializer
  %500 = getelementptr i16, i16* %487, i64 16
  %501 = bitcast i16* %487 to <8 x i16>*
  %502 = load <8 x i16>, <8 x i16>* %501, align 2, !alias.scope !1275
  %503 = zext <8 x i16> %502 to <8 x i32>
  %504 = mul nuw nsw <8 x i32> %497, %503
  %505 = getelementptr inbounds i16, i16* %487, i64 16
  %506 = bitcast i16* %505 to <8 x i16>*
  %507 = load <8 x i16>, <8 x i16>* %506, align 2, !alias.scope !1275
  %508 = zext <8 x i16> %507 to <8 x i32>
  %509 = mul nuw nsw <8 x i32> %499, %508
  %510 = add nuw nsw <8 x i32> %504, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %511 = add nuw nsw <8 x i32> %510, %509
  %512 = lshr <8 x i32> %511, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %513 = trunc <8 x i32> %512 to <8 x i16>
  %514 = bitcast i16* %488 to <8 x i16>*
  store <8 x i16> %513, <8 x i16>* %514, align 16, !alias.scope !1278, !noalias !1275
  %515 = getelementptr i16, i16* %487, i64 8
  %516 = bitcast i16* %515 to <8 x i16>*
  %517 = load <8 x i16>, <8 x i16>* %516, align 2, !alias.scope !1275
  %518 = zext <8 x i16> %517 to <8 x i32>
  %519 = mul nuw nsw <8 x i32> %497, %518
  %520 = getelementptr inbounds i16, i16* %487, i64 24
  %521 = bitcast i16* %520 to <8 x i16>*
  %522 = load <8 x i16>, <8 x i16>* %521, align 2, !alias.scope !1275
  %523 = zext <8 x i16> %522 to <8 x i32>
  %524 = mul nuw nsw <8 x i32> %499, %523
  %525 = add nuw nsw <8 x i32> %519, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %526 = add nuw nsw <8 x i32> %525, %524
  %527 = lshr <8 x i32> %526, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %528 = trunc <8 x i32> %527 to <8 x i16>
  %529 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 88
  %530 = bitcast i16* %529 to <8 x i16>*
  store <8 x i16> %528, <8 x i16>* %530, align 16, !alias.scope !1278, !noalias !1275
  br label %563

531:                                              ; preds = %486, %531
  %532 = phi i64 [ %561, %531 ], [ 0, %486 ]
  %533 = phi i16* [ %560, %531 ], [ %487, %486 ]
  %534 = load i16, i16* %533, align 2
  %535 = zext i16 %534 to i32
  %536 = mul nuw nsw i32 %1294, %535
  %537 = getelementptr inbounds i16, i16* %533, i64 16
  %538 = load i16, i16* %537, align 2
  %539 = zext i16 %538 to i32
  %540 = mul nuw nsw i32 %1296, %539
  %541 = add nuw nsw i32 %536, 64
  %542 = add nuw nsw i32 %541, %540
  %543 = lshr i32 %542, 7
  %544 = trunc i32 %543 to i16
  %545 = getelementptr inbounds i16, i16* %488, i64 %532
  store i16 %544, i16* %545, align 4
  %546 = getelementptr inbounds i16, i16* %533, i64 1
  %547 = or i64 %532, 1
  %548 = load i16, i16* %546, align 2
  %549 = zext i16 %548 to i32
  %550 = mul nuw nsw i32 %1294, %549
  %551 = getelementptr inbounds i16, i16* %533, i64 17
  %552 = load i16, i16* %551, align 2
  %553 = zext i16 %552 to i32
  %554 = mul nuw nsw i32 %1296, %553
  %555 = add nuw nsw i32 %550, 64
  %556 = add nuw nsw i32 %555, %554
  %557 = lshr i32 %556, 7
  %558 = trunc i32 %557 to i16
  %559 = getelementptr inbounds i16, i16* %488, i64 %547
  store i16 %558, i16* %559, align 2
  %560 = getelementptr inbounds i16, i16* %533, i64 2
  %561 = add nuw nsw i64 %532, 2
  %562 = icmp eq i64 %561, 16
  br i1 %562, label %563, label %531, !llvm.loop !1280

563:                                              ; preds = %531, %495
  %564 = phi i16* [ %500, %495 ], [ %560, %531 ]
  %565 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 96
  %566 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 96
  %567 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 112
  %568 = getelementptr i16, i16* %564, i64 32
  %569 = icmp ult i16* %566, %568
  %570 = icmp ult i16* %564, %567
  %571 = and i1 %569, %570
  br i1 %571, label %608, label %572

572:                                              ; preds = %563
  %573 = insertelement <8 x i32> undef, i32 %1294, i32 0
  %574 = shufflevector <8 x i32> %573, <8 x i32> undef, <8 x i32> zeroinitializer
  %575 = insertelement <8 x i32> undef, i32 %1296, i32 0
  %576 = shufflevector <8 x i32> %575, <8 x i32> undef, <8 x i32> zeroinitializer
  %577 = getelementptr i16, i16* %564, i64 16
  %578 = bitcast i16* %564 to <8 x i16>*
  %579 = load <8 x i16>, <8 x i16>* %578, align 2, !alias.scope !1281
  %580 = zext <8 x i16> %579 to <8 x i32>
  %581 = mul nuw nsw <8 x i32> %574, %580
  %582 = getelementptr inbounds i16, i16* %564, i64 16
  %583 = bitcast i16* %582 to <8 x i16>*
  %584 = load <8 x i16>, <8 x i16>* %583, align 2, !alias.scope !1281
  %585 = zext <8 x i16> %584 to <8 x i32>
  %586 = mul nuw nsw <8 x i32> %576, %585
  %587 = add nuw nsw <8 x i32> %581, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %588 = add nuw nsw <8 x i32> %587, %586
  %589 = lshr <8 x i32> %588, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %590 = trunc <8 x i32> %589 to <8 x i16>
  %591 = bitcast i16* %565 to <8 x i16>*
  store <8 x i16> %590, <8 x i16>* %591, align 16, !alias.scope !1284, !noalias !1281
  %592 = getelementptr i16, i16* %564, i64 8
  %593 = bitcast i16* %592 to <8 x i16>*
  %594 = load <8 x i16>, <8 x i16>* %593, align 2, !alias.scope !1281
  %595 = zext <8 x i16> %594 to <8 x i32>
  %596 = mul nuw nsw <8 x i32> %574, %595
  %597 = getelementptr inbounds i16, i16* %564, i64 24
  %598 = bitcast i16* %597 to <8 x i16>*
  %599 = load <8 x i16>, <8 x i16>* %598, align 2, !alias.scope !1281
  %600 = zext <8 x i16> %599 to <8 x i32>
  %601 = mul nuw nsw <8 x i32> %576, %600
  %602 = add nuw nsw <8 x i32> %596, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %603 = add nuw nsw <8 x i32> %602, %601
  %604 = lshr <8 x i32> %603, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %605 = trunc <8 x i32> %604 to <8 x i16>
  %606 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 104
  %607 = bitcast i16* %606 to <8 x i16>*
  store <8 x i16> %605, <8 x i16>* %607, align 16, !alias.scope !1284, !noalias !1281
  br label %640

608:                                              ; preds = %563, %608
  %609 = phi i64 [ %638, %608 ], [ 0, %563 ]
  %610 = phi i16* [ %637, %608 ], [ %564, %563 ]
  %611 = load i16, i16* %610, align 2
  %612 = zext i16 %611 to i32
  %613 = mul nuw nsw i32 %1294, %612
  %614 = getelementptr inbounds i16, i16* %610, i64 16
  %615 = load i16, i16* %614, align 2
  %616 = zext i16 %615 to i32
  %617 = mul nuw nsw i32 %1296, %616
  %618 = add nuw nsw i32 %613, 64
  %619 = add nuw nsw i32 %618, %617
  %620 = lshr i32 %619, 7
  %621 = trunc i32 %620 to i16
  %622 = getelementptr inbounds i16, i16* %565, i64 %609
  store i16 %621, i16* %622, align 4
  %623 = getelementptr inbounds i16, i16* %610, i64 1
  %624 = or i64 %609, 1
  %625 = load i16, i16* %623, align 2
  %626 = zext i16 %625 to i32
  %627 = mul nuw nsw i32 %1294, %626
  %628 = getelementptr inbounds i16, i16* %610, i64 17
  %629 = load i16, i16* %628, align 2
  %630 = zext i16 %629 to i32
  %631 = mul nuw nsw i32 %1296, %630
  %632 = add nuw nsw i32 %627, 64
  %633 = add nuw nsw i32 %632, %631
  %634 = lshr i32 %633, 7
  %635 = trunc i32 %634 to i16
  %636 = getelementptr inbounds i16, i16* %565, i64 %624
  store i16 %635, i16* %636, align 2
  %637 = getelementptr inbounds i16, i16* %610, i64 2
  %638 = add nuw nsw i64 %609, 2
  %639 = icmp eq i64 %638, 16
  br i1 %639, label %640, label %608, !llvm.loop !1286

640:                                              ; preds = %608, %572
  %641 = phi i16* [ %577, %572 ], [ %637, %608 ]
  %642 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 112
  %643 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 112
  %644 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 1, i64 0
  %645 = getelementptr i16, i16* %641, i64 32
  %646 = icmp ult i16* %643, %645
  %647 = icmp ult i16* %641, %644
  %648 = and i1 %646, %647
  br i1 %648, label %684, label %649

649:                                              ; preds = %640
  %650 = insertelement <8 x i32> undef, i32 %1294, i32 0
  %651 = shufflevector <8 x i32> %650, <8 x i32> undef, <8 x i32> zeroinitializer
  %652 = insertelement <8 x i32> undef, i32 %1296, i32 0
  %653 = shufflevector <8 x i32> %652, <8 x i32> undef, <8 x i32> zeroinitializer
  %654 = bitcast i16* %641 to <8 x i16>*
  %655 = load <8 x i16>, <8 x i16>* %654, align 2, !alias.scope !1287
  %656 = zext <8 x i16> %655 to <8 x i32>
  %657 = mul nuw nsw <8 x i32> %651, %656
  %658 = getelementptr inbounds i16, i16* %641, i64 16
  %659 = bitcast i16* %658 to <8 x i16>*
  %660 = load <8 x i16>, <8 x i16>* %659, align 2, !alias.scope !1287
  %661 = zext <8 x i16> %660 to <8 x i32>
  %662 = mul nuw nsw <8 x i32> %653, %661
  %663 = add nuw nsw <8 x i32> %657, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %664 = add nuw nsw <8 x i32> %663, %662
  %665 = lshr <8 x i32> %664, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %666 = trunc <8 x i32> %665 to <8 x i16>
  %667 = bitcast i16* %642 to <8 x i16>*
  store <8 x i16> %666, <8 x i16>* %667, align 16, !alias.scope !1290, !noalias !1287
  %668 = getelementptr i16, i16* %641, i64 8
  %669 = bitcast i16* %668 to <8 x i16>*
  %670 = load <8 x i16>, <8 x i16>* %669, align 2, !alias.scope !1287
  %671 = zext <8 x i16> %670 to <8 x i32>
  %672 = mul nuw nsw <8 x i32> %651, %671
  %673 = getelementptr inbounds i16, i16* %641, i64 24
  %674 = bitcast i16* %673 to <8 x i16>*
  %675 = load <8 x i16>, <8 x i16>* %674, align 2, !alias.scope !1287
  %676 = zext <8 x i16> %675 to <8 x i32>
  %677 = mul nuw nsw <8 x i32> %653, %676
  %678 = add nuw nsw <8 x i32> %672, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %679 = add nuw nsw <8 x i32> %678, %677
  %680 = lshr <8 x i32> %679, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %681 = trunc <8 x i32> %680 to <8 x i16>
  %682 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 120
  %683 = bitcast i16* %682 to <8 x i16>*
  store <8 x i16> %681, <8 x i16>* %683, align 16, !alias.scope !1290, !noalias !1287
  br label %716

684:                                              ; preds = %640, %684
  %685 = phi i64 [ %714, %684 ], [ 0, %640 ]
  %686 = phi i16* [ %713, %684 ], [ %641, %640 ]
  %687 = load i16, i16* %686, align 2
  %688 = zext i16 %687 to i32
  %689 = mul nuw nsw i32 %1294, %688
  %690 = getelementptr inbounds i16, i16* %686, i64 16
  %691 = load i16, i16* %690, align 2
  %692 = zext i16 %691 to i32
  %693 = mul nuw nsw i32 %1296, %692
  %694 = add nuw nsw i32 %689, 64
  %695 = add nuw nsw i32 %694, %693
  %696 = lshr i32 %695, 7
  %697 = trunc i32 %696 to i16
  %698 = getelementptr inbounds i16, i16* %642, i64 %685
  store i16 %697, i16* %698, align 4
  %699 = getelementptr inbounds i16, i16* %686, i64 1
  %700 = or i64 %685, 1
  %701 = load i16, i16* %699, align 2
  %702 = zext i16 %701 to i32
  %703 = mul nuw nsw i32 %1294, %702
  %704 = getelementptr inbounds i16, i16* %686, i64 17
  %705 = load i16, i16* %704, align 2
  %706 = zext i16 %705 to i32
  %707 = mul nuw nsw i32 %1296, %706
  %708 = add nuw nsw i32 %703, 64
  %709 = add nuw nsw i32 %708, %707
  %710 = lshr i32 %709, 7
  %711 = trunc i32 %710 to i16
  %712 = getelementptr inbounds i16, i16* %642, i64 %700
  store i16 %711, i16* %712, align 2
  %713 = getelementptr inbounds i16, i16* %686, i64 2
  %714 = add nuw nsw i64 %685, 2
  %715 = icmp eq i64 %714, 16
  br i1 %715, label %716, label %684, !llvm.loop !1292

716:                                              ; preds = %684, %649
  %717 = ptrtoint [128 x i16]* %10 to i64
  %718 = lshr exact i64 %717, 1
  %719 = inttoptr i64 %718 to i8*
  %720 = call i32 @vpx_highbd_12_variance16x8_c(i8* nonnull %719, i32 16, i8* %4, i32 %5, i32* %6)
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %11) #4
  call void @llvm.lifetime.end.p0i8(i64 288, i8* nonnull %9) #4
  ret i32 %720

721:                                              ; preds = %99, %721
  %722 = phi i64 [ %749, %721 ], [ 0, %99 ]
  %723 = phi i16* [ %740, %721 ], [ %101, %99 ]
  %724 = load i16, i16* %723, align 2
  %725 = zext i16 %724 to i32
  %726 = mul nuw nsw i32 %22, %725
  %727 = getelementptr inbounds i16, i16* %723, i64 1
  %728 = load i16, i16* %727, align 2
  %729 = zext i16 %728 to i32
  %730 = mul nuw nsw i32 %24, %729
  %731 = add nuw nsw i32 %726, 64
  %732 = add nuw nsw i32 %731, %730
  %733 = lshr i32 %732, 7
  %734 = trunc i32 %733 to i16
  %735 = getelementptr inbounds i16, i16* %102, i64 %722
  store i16 %734, i16* %735, align 4
  %736 = or i64 %722, 1
  %737 = load i16, i16* %727, align 2
  %738 = zext i16 %737 to i32
  %739 = mul nuw nsw i32 %22, %738
  %740 = getelementptr inbounds i16, i16* %723, i64 2
  %741 = load i16, i16* %740, align 2
  %742 = zext i16 %741 to i32
  %743 = mul nuw nsw i32 %24, %742
  %744 = add nuw nsw i32 %739, 64
  %745 = add nuw nsw i32 %744, %743
  %746 = lshr i32 %745, 7
  %747 = trunc i32 %746 to i16
  %748 = getelementptr inbounds i16, i16* %102, i64 %736
  store i16 %747, i16* %748, align 2
  %749 = add nuw nsw i64 %722, 2
  %750 = icmp eq i64 %749, 16
  br i1 %750, label %751, label %721, !llvm.loop !1293

751:                                              ; preds = %721, %110
  %752 = phi i16* [ %115, %110 ], [ %740, %721 ]
  %753 = getelementptr inbounds i16, i16* %752, i64 %20
  %754 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 32
  %755 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 32
  %756 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 48
  %757 = add nuw nsw i64 %20, 17
  %758 = getelementptr i16, i16* %752, i64 %757
  %759 = icmp ult i16* %755, %758
  %760 = icmp ult i16* %753, %756
  %761 = and i1 %759, %760
  br i1 %761, label %798, label %762

762:                                              ; preds = %751
  %763 = insertelement <8 x i32> undef, i32 %22, i32 0
  %764 = shufflevector <8 x i32> %763, <8 x i32> undef, <8 x i32> zeroinitializer
  %765 = insertelement <8 x i32> undef, i32 %24, i32 0
  %766 = shufflevector <8 x i32> %765, <8 x i32> undef, <8 x i32> zeroinitializer
  %767 = getelementptr i16, i16* %753, i64 16
  %768 = bitcast i16* %753 to <8 x i16>*
  %769 = load <8 x i16>, <8 x i16>* %768, align 2, !alias.scope !1294
  %770 = zext <8 x i16> %769 to <8 x i32>
  %771 = mul nuw nsw <8 x i32> %764, %770
  %772 = getelementptr inbounds i16, i16* %753, i64 1
  %773 = bitcast i16* %772 to <8 x i16>*
  %774 = load <8 x i16>, <8 x i16>* %773, align 2, !alias.scope !1294
  %775 = zext <8 x i16> %774 to <8 x i32>
  %776 = mul nuw nsw <8 x i32> %766, %775
  %777 = add nuw nsw <8 x i32> %771, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %778 = add nuw nsw <8 x i32> %777, %776
  %779 = lshr <8 x i32> %778, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %780 = trunc <8 x i32> %779 to <8 x i16>
  %781 = bitcast i16* %754 to <8 x i16>*
  store <8 x i16> %780, <8 x i16>* %781, align 16, !alias.scope !1297, !noalias !1294
  %782 = getelementptr i16, i16* %753, i64 8
  %783 = bitcast i16* %782 to <8 x i16>*
  %784 = load <8 x i16>, <8 x i16>* %783, align 2, !alias.scope !1294
  %785 = zext <8 x i16> %784 to <8 x i32>
  %786 = mul nuw nsw <8 x i32> %764, %785
  %787 = getelementptr inbounds i16, i16* %782, i64 1
  %788 = bitcast i16* %787 to <8 x i16>*
  %789 = load <8 x i16>, <8 x i16>* %788, align 2, !alias.scope !1294
  %790 = zext <8 x i16> %789 to <8 x i32>
  %791 = mul nuw nsw <8 x i32> %766, %790
  %792 = add nuw nsw <8 x i32> %786, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %793 = add nuw nsw <8 x i32> %792, %791
  %794 = lshr <8 x i32> %793, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %795 = trunc <8 x i32> %794 to <8 x i16>
  %796 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 40
  %797 = bitcast i16* %796 to <8 x i16>*
  store <8 x i16> %795, <8 x i16>* %797, align 16, !alias.scope !1297, !noalias !1294
  br label %828

798:                                              ; preds = %751, %798
  %799 = phi i64 [ %826, %798 ], [ 0, %751 ]
  %800 = phi i16* [ %817, %798 ], [ %753, %751 ]
  %801 = load i16, i16* %800, align 2
  %802 = zext i16 %801 to i32
  %803 = mul nuw nsw i32 %22, %802
  %804 = getelementptr inbounds i16, i16* %800, i64 1
  %805 = load i16, i16* %804, align 2
  %806 = zext i16 %805 to i32
  %807 = mul nuw nsw i32 %24, %806
  %808 = add nuw nsw i32 %803, 64
  %809 = add nuw nsw i32 %808, %807
  %810 = lshr i32 %809, 7
  %811 = trunc i32 %810 to i16
  %812 = getelementptr inbounds i16, i16* %754, i64 %799
  store i16 %811, i16* %812, align 4
  %813 = or i64 %799, 1
  %814 = load i16, i16* %804, align 2
  %815 = zext i16 %814 to i32
  %816 = mul nuw nsw i32 %22, %815
  %817 = getelementptr inbounds i16, i16* %800, i64 2
  %818 = load i16, i16* %817, align 2
  %819 = zext i16 %818 to i32
  %820 = mul nuw nsw i32 %24, %819
  %821 = add nuw nsw i32 %816, 64
  %822 = add nuw nsw i32 %821, %820
  %823 = lshr i32 %822, 7
  %824 = trunc i32 %823 to i16
  %825 = getelementptr inbounds i16, i16* %754, i64 %813
  store i16 %824, i16* %825, align 2
  %826 = add nuw nsw i64 %799, 2
  %827 = icmp eq i64 %826, 16
  br i1 %827, label %828, label %798, !llvm.loop !1299

828:                                              ; preds = %798, %762
  %829 = phi i16* [ %767, %762 ], [ %817, %798 ]
  %830 = getelementptr inbounds i16, i16* %829, i64 %20
  %831 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 48
  %832 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 48
  %833 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 64
  %834 = add nuw nsw i64 %20, 17
  %835 = getelementptr i16, i16* %829, i64 %834
  %836 = icmp ult i16* %832, %835
  %837 = icmp ult i16* %830, %833
  %838 = and i1 %836, %837
  br i1 %838, label %875, label %839

839:                                              ; preds = %828
  %840 = insertelement <8 x i32> undef, i32 %22, i32 0
  %841 = shufflevector <8 x i32> %840, <8 x i32> undef, <8 x i32> zeroinitializer
  %842 = insertelement <8 x i32> undef, i32 %24, i32 0
  %843 = shufflevector <8 x i32> %842, <8 x i32> undef, <8 x i32> zeroinitializer
  %844 = getelementptr i16, i16* %830, i64 16
  %845 = bitcast i16* %830 to <8 x i16>*
  %846 = load <8 x i16>, <8 x i16>* %845, align 2, !alias.scope !1300
  %847 = zext <8 x i16> %846 to <8 x i32>
  %848 = mul nuw nsw <8 x i32> %841, %847
  %849 = getelementptr inbounds i16, i16* %830, i64 1
  %850 = bitcast i16* %849 to <8 x i16>*
  %851 = load <8 x i16>, <8 x i16>* %850, align 2, !alias.scope !1300
  %852 = zext <8 x i16> %851 to <8 x i32>
  %853 = mul nuw nsw <8 x i32> %843, %852
  %854 = add nuw nsw <8 x i32> %848, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %855 = add nuw nsw <8 x i32> %854, %853
  %856 = lshr <8 x i32> %855, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %857 = trunc <8 x i32> %856 to <8 x i16>
  %858 = bitcast i16* %831 to <8 x i16>*
  store <8 x i16> %857, <8 x i16>* %858, align 16, !alias.scope !1303, !noalias !1300
  %859 = getelementptr i16, i16* %830, i64 8
  %860 = bitcast i16* %859 to <8 x i16>*
  %861 = load <8 x i16>, <8 x i16>* %860, align 2, !alias.scope !1300
  %862 = zext <8 x i16> %861 to <8 x i32>
  %863 = mul nuw nsw <8 x i32> %841, %862
  %864 = getelementptr inbounds i16, i16* %859, i64 1
  %865 = bitcast i16* %864 to <8 x i16>*
  %866 = load <8 x i16>, <8 x i16>* %865, align 2, !alias.scope !1300
  %867 = zext <8 x i16> %866 to <8 x i32>
  %868 = mul nuw nsw <8 x i32> %843, %867
  %869 = add nuw nsw <8 x i32> %863, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %870 = add nuw nsw <8 x i32> %869, %868
  %871 = lshr <8 x i32> %870, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %872 = trunc <8 x i32> %871 to <8 x i16>
  %873 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 56
  %874 = bitcast i16* %873 to <8 x i16>*
  store <8 x i16> %872, <8 x i16>* %874, align 16, !alias.scope !1303, !noalias !1300
  br label %905

875:                                              ; preds = %828, %875
  %876 = phi i64 [ %903, %875 ], [ 0, %828 ]
  %877 = phi i16* [ %894, %875 ], [ %830, %828 ]
  %878 = load i16, i16* %877, align 2
  %879 = zext i16 %878 to i32
  %880 = mul nuw nsw i32 %22, %879
  %881 = getelementptr inbounds i16, i16* %877, i64 1
  %882 = load i16, i16* %881, align 2
  %883 = zext i16 %882 to i32
  %884 = mul nuw nsw i32 %24, %883
  %885 = add nuw nsw i32 %880, 64
  %886 = add nuw nsw i32 %885, %884
  %887 = lshr i32 %886, 7
  %888 = trunc i32 %887 to i16
  %889 = getelementptr inbounds i16, i16* %831, i64 %876
  store i16 %888, i16* %889, align 4
  %890 = or i64 %876, 1
  %891 = load i16, i16* %881, align 2
  %892 = zext i16 %891 to i32
  %893 = mul nuw nsw i32 %22, %892
  %894 = getelementptr inbounds i16, i16* %877, i64 2
  %895 = load i16, i16* %894, align 2
  %896 = zext i16 %895 to i32
  %897 = mul nuw nsw i32 %24, %896
  %898 = add nuw nsw i32 %893, 64
  %899 = add nuw nsw i32 %898, %897
  %900 = lshr i32 %899, 7
  %901 = trunc i32 %900 to i16
  %902 = getelementptr inbounds i16, i16* %831, i64 %890
  store i16 %901, i16* %902, align 2
  %903 = add nuw nsw i64 %876, 2
  %904 = icmp eq i64 %903, 16
  br i1 %904, label %905, label %875, !llvm.loop !1305

905:                                              ; preds = %875, %839
  %906 = phi i16* [ %844, %839 ], [ %894, %875 ]
  %907 = getelementptr inbounds i16, i16* %906, i64 %20
  %908 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 64
  %909 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 64
  %910 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 80
  %911 = add nuw nsw i64 %20, 17
  %912 = getelementptr i16, i16* %906, i64 %911
  %913 = icmp ult i16* %909, %912
  %914 = icmp ult i16* %907, %910
  %915 = and i1 %913, %914
  br i1 %915, label %952, label %916

916:                                              ; preds = %905
  %917 = insertelement <8 x i32> undef, i32 %22, i32 0
  %918 = shufflevector <8 x i32> %917, <8 x i32> undef, <8 x i32> zeroinitializer
  %919 = insertelement <8 x i32> undef, i32 %24, i32 0
  %920 = shufflevector <8 x i32> %919, <8 x i32> undef, <8 x i32> zeroinitializer
  %921 = getelementptr i16, i16* %907, i64 16
  %922 = bitcast i16* %907 to <8 x i16>*
  %923 = load <8 x i16>, <8 x i16>* %922, align 2, !alias.scope !1306
  %924 = zext <8 x i16> %923 to <8 x i32>
  %925 = mul nuw nsw <8 x i32> %918, %924
  %926 = getelementptr inbounds i16, i16* %907, i64 1
  %927 = bitcast i16* %926 to <8 x i16>*
  %928 = load <8 x i16>, <8 x i16>* %927, align 2, !alias.scope !1306
  %929 = zext <8 x i16> %928 to <8 x i32>
  %930 = mul nuw nsw <8 x i32> %920, %929
  %931 = add nuw nsw <8 x i32> %925, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %932 = add nuw nsw <8 x i32> %931, %930
  %933 = lshr <8 x i32> %932, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %934 = trunc <8 x i32> %933 to <8 x i16>
  %935 = bitcast i16* %908 to <8 x i16>*
  store <8 x i16> %934, <8 x i16>* %935, align 16, !alias.scope !1309, !noalias !1306
  %936 = getelementptr i16, i16* %907, i64 8
  %937 = bitcast i16* %936 to <8 x i16>*
  %938 = load <8 x i16>, <8 x i16>* %937, align 2, !alias.scope !1306
  %939 = zext <8 x i16> %938 to <8 x i32>
  %940 = mul nuw nsw <8 x i32> %918, %939
  %941 = getelementptr inbounds i16, i16* %936, i64 1
  %942 = bitcast i16* %941 to <8 x i16>*
  %943 = load <8 x i16>, <8 x i16>* %942, align 2, !alias.scope !1306
  %944 = zext <8 x i16> %943 to <8 x i32>
  %945 = mul nuw nsw <8 x i32> %920, %944
  %946 = add nuw nsw <8 x i32> %940, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %947 = add nuw nsw <8 x i32> %946, %945
  %948 = lshr <8 x i32> %947, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %949 = trunc <8 x i32> %948 to <8 x i16>
  %950 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 72
  %951 = bitcast i16* %950 to <8 x i16>*
  store <8 x i16> %949, <8 x i16>* %951, align 16, !alias.scope !1309, !noalias !1306
  br label %982

952:                                              ; preds = %905, %952
  %953 = phi i64 [ %980, %952 ], [ 0, %905 ]
  %954 = phi i16* [ %971, %952 ], [ %907, %905 ]
  %955 = load i16, i16* %954, align 2
  %956 = zext i16 %955 to i32
  %957 = mul nuw nsw i32 %22, %956
  %958 = getelementptr inbounds i16, i16* %954, i64 1
  %959 = load i16, i16* %958, align 2
  %960 = zext i16 %959 to i32
  %961 = mul nuw nsw i32 %24, %960
  %962 = add nuw nsw i32 %957, 64
  %963 = add nuw nsw i32 %962, %961
  %964 = lshr i32 %963, 7
  %965 = trunc i32 %964 to i16
  %966 = getelementptr inbounds i16, i16* %908, i64 %953
  store i16 %965, i16* %966, align 4
  %967 = or i64 %953, 1
  %968 = load i16, i16* %958, align 2
  %969 = zext i16 %968 to i32
  %970 = mul nuw nsw i32 %22, %969
  %971 = getelementptr inbounds i16, i16* %954, i64 2
  %972 = load i16, i16* %971, align 2
  %973 = zext i16 %972 to i32
  %974 = mul nuw nsw i32 %24, %973
  %975 = add nuw nsw i32 %970, 64
  %976 = add nuw nsw i32 %975, %974
  %977 = lshr i32 %976, 7
  %978 = trunc i32 %977 to i16
  %979 = getelementptr inbounds i16, i16* %908, i64 %967
  store i16 %978, i16* %979, align 2
  %980 = add nuw nsw i64 %953, 2
  %981 = icmp eq i64 %980, 16
  br i1 %981, label %982, label %952, !llvm.loop !1311

982:                                              ; preds = %952, %916
  %983 = phi i16* [ %921, %916 ], [ %971, %952 ]
  %984 = getelementptr inbounds i16, i16* %983, i64 %20
  %985 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 80
  %986 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 80
  %987 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 96
  %988 = add nuw nsw i64 %20, 17
  %989 = getelementptr i16, i16* %983, i64 %988
  %990 = icmp ult i16* %986, %989
  %991 = icmp ult i16* %984, %987
  %992 = and i1 %990, %991
  br i1 %992, label %1029, label %993

993:                                              ; preds = %982
  %994 = insertelement <8 x i32> undef, i32 %22, i32 0
  %995 = shufflevector <8 x i32> %994, <8 x i32> undef, <8 x i32> zeroinitializer
  %996 = insertelement <8 x i32> undef, i32 %24, i32 0
  %997 = shufflevector <8 x i32> %996, <8 x i32> undef, <8 x i32> zeroinitializer
  %998 = getelementptr i16, i16* %984, i64 16
  %999 = bitcast i16* %984 to <8 x i16>*
  %1000 = load <8 x i16>, <8 x i16>* %999, align 2, !alias.scope !1312
  %1001 = zext <8 x i16> %1000 to <8 x i32>
  %1002 = mul nuw nsw <8 x i32> %995, %1001
  %1003 = getelementptr inbounds i16, i16* %984, i64 1
  %1004 = bitcast i16* %1003 to <8 x i16>*
  %1005 = load <8 x i16>, <8 x i16>* %1004, align 2, !alias.scope !1312
  %1006 = zext <8 x i16> %1005 to <8 x i32>
  %1007 = mul nuw nsw <8 x i32> %997, %1006
  %1008 = add nuw nsw <8 x i32> %1002, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %1009 = add nuw nsw <8 x i32> %1008, %1007
  %1010 = lshr <8 x i32> %1009, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %1011 = trunc <8 x i32> %1010 to <8 x i16>
  %1012 = bitcast i16* %985 to <8 x i16>*
  store <8 x i16> %1011, <8 x i16>* %1012, align 16, !alias.scope !1315, !noalias !1312
  %1013 = getelementptr i16, i16* %984, i64 8
  %1014 = bitcast i16* %1013 to <8 x i16>*
  %1015 = load <8 x i16>, <8 x i16>* %1014, align 2, !alias.scope !1312
  %1016 = zext <8 x i16> %1015 to <8 x i32>
  %1017 = mul nuw nsw <8 x i32> %995, %1016
  %1018 = getelementptr inbounds i16, i16* %1013, i64 1
  %1019 = bitcast i16* %1018 to <8 x i16>*
  %1020 = load <8 x i16>, <8 x i16>* %1019, align 2, !alias.scope !1312
  %1021 = zext <8 x i16> %1020 to <8 x i32>
  %1022 = mul nuw nsw <8 x i32> %997, %1021
  %1023 = add nuw nsw <8 x i32> %1017, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %1024 = add nuw nsw <8 x i32> %1023, %1022
  %1025 = lshr <8 x i32> %1024, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %1026 = trunc <8 x i32> %1025 to <8 x i16>
  %1027 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 88
  %1028 = bitcast i16* %1027 to <8 x i16>*
  store <8 x i16> %1026, <8 x i16>* %1028, align 16, !alias.scope !1315, !noalias !1312
  br label %1059

1029:                                             ; preds = %982, %1029
  %1030 = phi i64 [ %1057, %1029 ], [ 0, %982 ]
  %1031 = phi i16* [ %1048, %1029 ], [ %984, %982 ]
  %1032 = load i16, i16* %1031, align 2
  %1033 = zext i16 %1032 to i32
  %1034 = mul nuw nsw i32 %22, %1033
  %1035 = getelementptr inbounds i16, i16* %1031, i64 1
  %1036 = load i16, i16* %1035, align 2
  %1037 = zext i16 %1036 to i32
  %1038 = mul nuw nsw i32 %24, %1037
  %1039 = add nuw nsw i32 %1034, 64
  %1040 = add nuw nsw i32 %1039, %1038
  %1041 = lshr i32 %1040, 7
  %1042 = trunc i32 %1041 to i16
  %1043 = getelementptr inbounds i16, i16* %985, i64 %1030
  store i16 %1042, i16* %1043, align 4
  %1044 = or i64 %1030, 1
  %1045 = load i16, i16* %1035, align 2
  %1046 = zext i16 %1045 to i32
  %1047 = mul nuw nsw i32 %22, %1046
  %1048 = getelementptr inbounds i16, i16* %1031, i64 2
  %1049 = load i16, i16* %1048, align 2
  %1050 = zext i16 %1049 to i32
  %1051 = mul nuw nsw i32 %24, %1050
  %1052 = add nuw nsw i32 %1047, 64
  %1053 = add nuw nsw i32 %1052, %1051
  %1054 = lshr i32 %1053, 7
  %1055 = trunc i32 %1054 to i16
  %1056 = getelementptr inbounds i16, i16* %985, i64 %1044
  store i16 %1055, i16* %1056, align 2
  %1057 = add nuw nsw i64 %1030, 2
  %1058 = icmp eq i64 %1057, 16
  br i1 %1058, label %1059, label %1029, !llvm.loop !1317

1059:                                             ; preds = %1029, %993
  %1060 = phi i16* [ %998, %993 ], [ %1048, %1029 ]
  %1061 = getelementptr inbounds i16, i16* %1060, i64 %20
  %1062 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 96
  %1063 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 96
  %1064 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 112
  %1065 = add nuw nsw i64 %20, 17
  %1066 = getelementptr i16, i16* %1060, i64 %1065
  %1067 = icmp ult i16* %1063, %1066
  %1068 = icmp ult i16* %1061, %1064
  %1069 = and i1 %1067, %1068
  br i1 %1069, label %1106, label %1070

1070:                                             ; preds = %1059
  %1071 = insertelement <8 x i32> undef, i32 %22, i32 0
  %1072 = shufflevector <8 x i32> %1071, <8 x i32> undef, <8 x i32> zeroinitializer
  %1073 = insertelement <8 x i32> undef, i32 %24, i32 0
  %1074 = shufflevector <8 x i32> %1073, <8 x i32> undef, <8 x i32> zeroinitializer
  %1075 = getelementptr i16, i16* %1061, i64 16
  %1076 = bitcast i16* %1061 to <8 x i16>*
  %1077 = load <8 x i16>, <8 x i16>* %1076, align 2, !alias.scope !1318
  %1078 = zext <8 x i16> %1077 to <8 x i32>
  %1079 = mul nuw nsw <8 x i32> %1072, %1078
  %1080 = getelementptr inbounds i16, i16* %1061, i64 1
  %1081 = bitcast i16* %1080 to <8 x i16>*
  %1082 = load <8 x i16>, <8 x i16>* %1081, align 2, !alias.scope !1318
  %1083 = zext <8 x i16> %1082 to <8 x i32>
  %1084 = mul nuw nsw <8 x i32> %1074, %1083
  %1085 = add nuw nsw <8 x i32> %1079, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %1086 = add nuw nsw <8 x i32> %1085, %1084
  %1087 = lshr <8 x i32> %1086, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %1088 = trunc <8 x i32> %1087 to <8 x i16>
  %1089 = bitcast i16* %1062 to <8 x i16>*
  store <8 x i16> %1088, <8 x i16>* %1089, align 16, !alias.scope !1321, !noalias !1318
  %1090 = getelementptr i16, i16* %1061, i64 8
  %1091 = bitcast i16* %1090 to <8 x i16>*
  %1092 = load <8 x i16>, <8 x i16>* %1091, align 2, !alias.scope !1318
  %1093 = zext <8 x i16> %1092 to <8 x i32>
  %1094 = mul nuw nsw <8 x i32> %1072, %1093
  %1095 = getelementptr inbounds i16, i16* %1090, i64 1
  %1096 = bitcast i16* %1095 to <8 x i16>*
  %1097 = load <8 x i16>, <8 x i16>* %1096, align 2, !alias.scope !1318
  %1098 = zext <8 x i16> %1097 to <8 x i32>
  %1099 = mul nuw nsw <8 x i32> %1074, %1098
  %1100 = add nuw nsw <8 x i32> %1094, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %1101 = add nuw nsw <8 x i32> %1100, %1099
  %1102 = lshr <8 x i32> %1101, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %1103 = trunc <8 x i32> %1102 to <8 x i16>
  %1104 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 104
  %1105 = bitcast i16* %1104 to <8 x i16>*
  store <8 x i16> %1103, <8 x i16>* %1105, align 16, !alias.scope !1321, !noalias !1318
  br label %1136

1106:                                             ; preds = %1059, %1106
  %1107 = phi i64 [ %1134, %1106 ], [ 0, %1059 ]
  %1108 = phi i16* [ %1125, %1106 ], [ %1061, %1059 ]
  %1109 = load i16, i16* %1108, align 2
  %1110 = zext i16 %1109 to i32
  %1111 = mul nuw nsw i32 %22, %1110
  %1112 = getelementptr inbounds i16, i16* %1108, i64 1
  %1113 = load i16, i16* %1112, align 2
  %1114 = zext i16 %1113 to i32
  %1115 = mul nuw nsw i32 %24, %1114
  %1116 = add nuw nsw i32 %1111, 64
  %1117 = add nuw nsw i32 %1116, %1115
  %1118 = lshr i32 %1117, 7
  %1119 = trunc i32 %1118 to i16
  %1120 = getelementptr inbounds i16, i16* %1062, i64 %1107
  store i16 %1119, i16* %1120, align 4
  %1121 = or i64 %1107, 1
  %1122 = load i16, i16* %1112, align 2
  %1123 = zext i16 %1122 to i32
  %1124 = mul nuw nsw i32 %22, %1123
  %1125 = getelementptr inbounds i16, i16* %1108, i64 2
  %1126 = load i16, i16* %1125, align 2
  %1127 = zext i16 %1126 to i32
  %1128 = mul nuw nsw i32 %24, %1127
  %1129 = add nuw nsw i32 %1124, 64
  %1130 = add nuw nsw i32 %1129, %1128
  %1131 = lshr i32 %1130, 7
  %1132 = trunc i32 %1131 to i16
  %1133 = getelementptr inbounds i16, i16* %1062, i64 %1121
  store i16 %1132, i16* %1133, align 2
  %1134 = add nuw nsw i64 %1107, 2
  %1135 = icmp eq i64 %1134, 16
  br i1 %1135, label %1136, label %1106, !llvm.loop !1323

1136:                                             ; preds = %1106, %1070
  %1137 = phi i16* [ %1075, %1070 ], [ %1125, %1106 ]
  %1138 = getelementptr inbounds i16, i16* %1137, i64 %20
  %1139 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 112
  %1140 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 112
  %1141 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 128
  %1142 = add nuw nsw i64 %20, 17
  %1143 = getelementptr i16, i16* %1137, i64 %1142
  %1144 = icmp ult i16* %1140, %1143
  %1145 = icmp ult i16* %1138, %1141
  %1146 = and i1 %1144, %1145
  br i1 %1146, label %1183, label %1147

1147:                                             ; preds = %1136
  %1148 = insertelement <8 x i32> undef, i32 %22, i32 0
  %1149 = shufflevector <8 x i32> %1148, <8 x i32> undef, <8 x i32> zeroinitializer
  %1150 = insertelement <8 x i32> undef, i32 %24, i32 0
  %1151 = shufflevector <8 x i32> %1150, <8 x i32> undef, <8 x i32> zeroinitializer
  %1152 = getelementptr i16, i16* %1138, i64 16
  %1153 = bitcast i16* %1138 to <8 x i16>*
  %1154 = load <8 x i16>, <8 x i16>* %1153, align 2, !alias.scope !1324
  %1155 = zext <8 x i16> %1154 to <8 x i32>
  %1156 = mul nuw nsw <8 x i32> %1149, %1155
  %1157 = getelementptr inbounds i16, i16* %1138, i64 1
  %1158 = bitcast i16* %1157 to <8 x i16>*
  %1159 = load <8 x i16>, <8 x i16>* %1158, align 2, !alias.scope !1324
  %1160 = zext <8 x i16> %1159 to <8 x i32>
  %1161 = mul nuw nsw <8 x i32> %1151, %1160
  %1162 = add nuw nsw <8 x i32> %1156, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %1163 = add nuw nsw <8 x i32> %1162, %1161
  %1164 = lshr <8 x i32> %1163, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %1165 = trunc <8 x i32> %1164 to <8 x i16>
  %1166 = bitcast i16* %1139 to <8 x i16>*
  store <8 x i16> %1165, <8 x i16>* %1166, align 16, !alias.scope !1327, !noalias !1324
  %1167 = getelementptr i16, i16* %1138, i64 8
  %1168 = bitcast i16* %1167 to <8 x i16>*
  %1169 = load <8 x i16>, <8 x i16>* %1168, align 2, !alias.scope !1324
  %1170 = zext <8 x i16> %1169 to <8 x i32>
  %1171 = mul nuw nsw <8 x i32> %1149, %1170
  %1172 = getelementptr inbounds i16, i16* %1167, i64 1
  %1173 = bitcast i16* %1172 to <8 x i16>*
  %1174 = load <8 x i16>, <8 x i16>* %1173, align 2, !alias.scope !1324
  %1175 = zext <8 x i16> %1174 to <8 x i32>
  %1176 = mul nuw nsw <8 x i32> %1151, %1175
  %1177 = add nuw nsw <8 x i32> %1171, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %1178 = add nuw nsw <8 x i32> %1177, %1176
  %1179 = lshr <8 x i32> %1178, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %1180 = trunc <8 x i32> %1179 to <8 x i16>
  %1181 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 120
  %1182 = bitcast i16* %1181 to <8 x i16>*
  store <8 x i16> %1180, <8 x i16>* %1182, align 16, !alias.scope !1327, !noalias !1324
  br label %1213

1183:                                             ; preds = %1136, %1183
  %1184 = phi i64 [ %1211, %1183 ], [ 0, %1136 ]
  %1185 = phi i16* [ %1202, %1183 ], [ %1138, %1136 ]
  %1186 = load i16, i16* %1185, align 2
  %1187 = zext i16 %1186 to i32
  %1188 = mul nuw nsw i32 %22, %1187
  %1189 = getelementptr inbounds i16, i16* %1185, i64 1
  %1190 = load i16, i16* %1189, align 2
  %1191 = zext i16 %1190 to i32
  %1192 = mul nuw nsw i32 %24, %1191
  %1193 = add nuw nsw i32 %1188, 64
  %1194 = add nuw nsw i32 %1193, %1192
  %1195 = lshr i32 %1194, 7
  %1196 = trunc i32 %1195 to i16
  %1197 = getelementptr inbounds i16, i16* %1139, i64 %1184
  store i16 %1196, i16* %1197, align 4
  %1198 = or i64 %1184, 1
  %1199 = load i16, i16* %1189, align 2
  %1200 = zext i16 %1199 to i32
  %1201 = mul nuw nsw i32 %22, %1200
  %1202 = getelementptr inbounds i16, i16* %1185, i64 2
  %1203 = load i16, i16* %1202, align 2
  %1204 = zext i16 %1203 to i32
  %1205 = mul nuw nsw i32 %24, %1204
  %1206 = add nuw nsw i32 %1201, 64
  %1207 = add nuw nsw i32 %1206, %1205
  %1208 = lshr i32 %1207, 7
  %1209 = trunc i32 %1208 to i16
  %1210 = getelementptr inbounds i16, i16* %1139, i64 %1198
  store i16 %1209, i16* %1210, align 2
  %1211 = add nuw nsw i64 %1184, 2
  %1212 = icmp eq i64 %1211, 16
  br i1 %1212, label %1213, label %1183, !llvm.loop !1329

1213:                                             ; preds = %1183, %1147
  %1214 = phi i16* [ %1152, %1147 ], [ %1202, %1183 ]
  %1215 = getelementptr inbounds i16, i16* %1214, i64 %20
  %1216 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 128
  %1217 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 128
  %1218 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 1, i64 0
  %1219 = add nuw nsw i64 %20, 17
  %1220 = getelementptr i16, i16* %1214, i64 %1219
  %1221 = icmp ult i16* %1217, %1220
  %1222 = icmp ult i16* %1215, %1218
  %1223 = and i1 %1221, %1222
  br i1 %1223, label %1259, label %1224

1224:                                             ; preds = %1213
  %1225 = insertelement <8 x i32> undef, i32 %22, i32 0
  %1226 = shufflevector <8 x i32> %1225, <8 x i32> undef, <8 x i32> zeroinitializer
  %1227 = insertelement <8 x i32> undef, i32 %24, i32 0
  %1228 = shufflevector <8 x i32> %1227, <8 x i32> undef, <8 x i32> zeroinitializer
  %1229 = bitcast i16* %1215 to <8 x i16>*
  %1230 = load <8 x i16>, <8 x i16>* %1229, align 2, !alias.scope !1330
  %1231 = zext <8 x i16> %1230 to <8 x i32>
  %1232 = mul nuw nsw <8 x i32> %1226, %1231
  %1233 = getelementptr inbounds i16, i16* %1215, i64 1
  %1234 = bitcast i16* %1233 to <8 x i16>*
  %1235 = load <8 x i16>, <8 x i16>* %1234, align 2, !alias.scope !1330
  %1236 = zext <8 x i16> %1235 to <8 x i32>
  %1237 = mul nuw nsw <8 x i32> %1228, %1236
  %1238 = add nuw nsw <8 x i32> %1232, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %1239 = add nuw nsw <8 x i32> %1238, %1237
  %1240 = lshr <8 x i32> %1239, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %1241 = trunc <8 x i32> %1240 to <8 x i16>
  %1242 = bitcast i16* %1216 to <8 x i16>*
  store <8 x i16> %1241, <8 x i16>* %1242, align 16, !alias.scope !1333, !noalias !1330
  %1243 = getelementptr i16, i16* %1215, i64 8
  %1244 = bitcast i16* %1243 to <8 x i16>*
  %1245 = load <8 x i16>, <8 x i16>* %1244, align 2, !alias.scope !1330
  %1246 = zext <8 x i16> %1245 to <8 x i32>
  %1247 = mul nuw nsw <8 x i32> %1226, %1246
  %1248 = getelementptr inbounds i16, i16* %1243, i64 1
  %1249 = bitcast i16* %1248 to <8 x i16>*
  %1250 = load <8 x i16>, <8 x i16>* %1249, align 2, !alias.scope !1330
  %1251 = zext <8 x i16> %1250 to <8 x i32>
  %1252 = mul nuw nsw <8 x i32> %1228, %1251
  %1253 = add nuw nsw <8 x i32> %1247, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %1254 = add nuw nsw <8 x i32> %1253, %1252
  %1255 = lshr <8 x i32> %1254, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %1256 = trunc <8 x i32> %1255 to <8 x i16>
  %1257 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 136
  %1258 = bitcast i16* %1257 to <8 x i16>*
  store <8 x i16> %1256, <8 x i16>* %1258, align 16, !alias.scope !1333, !noalias !1330
  br label %1289

1259:                                             ; preds = %1213, %1259
  %1260 = phi i64 [ %1287, %1259 ], [ 0, %1213 ]
  %1261 = phi i16* [ %1278, %1259 ], [ %1215, %1213 ]
  %1262 = load i16, i16* %1261, align 2
  %1263 = zext i16 %1262 to i32
  %1264 = mul nuw nsw i32 %22, %1263
  %1265 = getelementptr inbounds i16, i16* %1261, i64 1
  %1266 = load i16, i16* %1265, align 2
  %1267 = zext i16 %1266 to i32
  %1268 = mul nuw nsw i32 %24, %1267
  %1269 = add nuw nsw i32 %1264, 64
  %1270 = add nuw nsw i32 %1269, %1268
  %1271 = lshr i32 %1270, 7
  %1272 = trunc i32 %1271 to i16
  %1273 = getelementptr inbounds i16, i16* %1216, i64 %1260
  store i16 %1272, i16* %1273, align 4
  %1274 = or i64 %1260, 1
  %1275 = load i16, i16* %1265, align 2
  %1276 = zext i16 %1275 to i32
  %1277 = mul nuw nsw i32 %22, %1276
  %1278 = getelementptr inbounds i16, i16* %1261, i64 2
  %1279 = load i16, i16* %1278, align 2
  %1280 = zext i16 %1279 to i32
  %1281 = mul nuw nsw i32 %24, %1280
  %1282 = add nuw nsw i32 %1277, 64
  %1283 = add nuw nsw i32 %1282, %1281
  %1284 = lshr i32 %1283, 7
  %1285 = trunc i32 %1284 to i16
  %1286 = getelementptr inbounds i16, i16* %1216, i64 %1274
  store i16 %1285, i16* %1286, align 2
  %1287 = add nuw nsw i64 %1260, 2
  %1288 = icmp eq i64 %1287, 16
  br i1 %1288, label %1289, label %1259, !llvm.loop !1335

1289:                                             ; preds = %1259, %1224
  %1290 = sext i32 %3 to i64
  %1291 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %1290, i64 0
  %1292 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %1290, i64 1
  %1293 = load i8, i8* %1291, align 2
  %1294 = zext i8 %1293 to i32
  %1295 = load i8, i8* %1292, align 1
  %1296 = zext i8 %1295 to i32
  %1297 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 16
  %1298 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 32
  %1299 = bitcast i16* %1298 to [128 x i16]*
  %1300 = icmp ult [128 x i16]* %10, %1299
  %1301 = bitcast i16* %1297 to [144 x i16]*
  %1302 = icmp ult [144 x i16]* %8, %1301
  %1303 = and i1 %1300, %1302
  br i1 %1303, label %146, label %1304

1304:                                             ; preds = %1289
  %1305 = insertelement <8 x i32> undef, i32 %1294, i32 0
  %1306 = shufflevector <8 x i32> %1305, <8 x i32> undef, <8 x i32> zeroinitializer
  %1307 = insertelement <8 x i32> undef, i32 %1296, i32 0
  %1308 = shufflevector <8 x i32> %1307, <8 x i32> undef, <8 x i32> zeroinitializer
  %1309 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 16
  %1310 = bitcast [144 x i16]* %8 to <8 x i16>*
  %1311 = load <8 x i16>, <8 x i16>* %1310, align 16, !alias.scope !1336
  %1312 = zext <8 x i16> %1311 to <8 x i32>
  %1313 = mul nuw nsw <8 x i32> %1306, %1312
  %1314 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 16
  %1315 = bitcast i16* %1314 to <8 x i16>*
  %1316 = load <8 x i16>, <8 x i16>* %1315, align 16, !alias.scope !1336
  %1317 = zext <8 x i16> %1316 to <8 x i32>
  %1318 = mul nuw nsw <8 x i32> %1308, %1317
  %1319 = add nuw nsw <8 x i32> %1313, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %1320 = add nuw nsw <8 x i32> %1319, %1318
  %1321 = lshr <8 x i32> %1320, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %1322 = trunc <8 x i32> %1321 to <8 x i16>
  %1323 = bitcast [128 x i16]* %10 to <8 x i16>*
  store <8 x i16> %1322, <8 x i16>* %1323, align 16, !alias.scope !1339, !noalias !1336
  %1324 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 8
  %1325 = bitcast i16* %1324 to <8 x i16>*
  %1326 = load <8 x i16>, <8 x i16>* %1325, align 16, !alias.scope !1336
  %1327 = zext <8 x i16> %1326 to <8 x i32>
  %1328 = mul nuw nsw <8 x i32> %1306, %1327
  %1329 = getelementptr inbounds [144 x i16], [144 x i16]* %8, i64 0, i64 24
  %1330 = bitcast i16* %1329 to <8 x i16>*
  %1331 = load <8 x i16>, <8 x i16>* %1330, align 16, !alias.scope !1336
  %1332 = zext <8 x i16> %1331 to <8 x i32>
  %1333 = mul nuw nsw <8 x i32> %1308, %1332
  %1334 = add nuw nsw <8 x i32> %1328, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %1335 = add nuw nsw <8 x i32> %1334, %1333
  %1336 = lshr <8 x i32> %1335, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %1337 = trunc <8 x i32> %1336 to <8 x i16>
  %1338 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 8
  %1339 = bitcast i16* %1338 to <8 x i16>*
  store <8 x i16> %1337, <8 x i16>* %1339, align 16, !alias.scope !1339, !noalias !1336
  br label %178
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_highbd_8_sub_pixel_avg_variance16x8_c(i8*, i32, i32, i32, i8*, i32, i32* nocapture, i8*) local_unnamed_addr #2 {
  %9 = alloca [144 x i16], align 16
  %10 = bitcast [144 x i16]* %9 to i8*
  %11 = alloca [128 x i16], align 16
  %12 = bitcast [128 x i16]* %11 to i8*
  %13 = alloca [128 x i16], align 16
  call void @llvm.lifetime.start.p0i8(i64 288, i8* nonnull %10) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %10, i8 -86, i64 288, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %12) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %12, i8 -86, i64 256, i1 false)
  %14 = bitcast [128 x i16]* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %14) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %14, i8 -86, i64 256, i1 false)
  %15 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 0
  %16 = sext i32 %2 to i64
  %17 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %16, i64 0
  %18 = ptrtoint i8* %0 to i64
  %19 = shl i64 %18, 1
  %20 = inttoptr i64 %19 to i16*
  %21 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %16, i64 1
  %22 = add i32 %1, -16
  %23 = zext i32 %22 to i64
  %24 = load i8, i8* %17, align 2
  %25 = zext i8 %24 to i32
  %26 = load i8, i8* %21, align 1
  %27 = zext i8 %26 to i32
  %28 = inttoptr i64 %19 to i8*
  %29 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 16
  %30 = bitcast i16* %29 to i8*
  %31 = getelementptr i16, i16* %20, i64 17
  %32 = bitcast i16* %31 to [144 x i16]*
  %33 = icmp ult [144 x i16]* %9, %32
  %34 = icmp ult i8* %28, %30
  %35 = and i1 %33, %34
  br i1 %35, label %72, label %36

36:                                               ; preds = %8
  %37 = insertelement <8 x i32> undef, i32 %25, i32 0
  %38 = shufflevector <8 x i32> %37, <8 x i32> undef, <8 x i32> zeroinitializer
  %39 = insertelement <8 x i32> undef, i32 %27, i32 0
  %40 = shufflevector <8 x i32> %39, <8 x i32> undef, <8 x i32> zeroinitializer
  %41 = getelementptr i16, i16* %20, i64 16
  %42 = inttoptr i64 %19 to <8 x i16>*
  %43 = load <8 x i16>, <8 x i16>* %42, align 2, !alias.scope !1341
  %44 = zext <8 x i16> %43 to <8 x i32>
  %45 = mul nuw nsw <8 x i32> %38, %44
  %46 = getelementptr inbounds i16, i16* %20, i64 1
  %47 = bitcast i16* %46 to <8 x i16>*
  %48 = load <8 x i16>, <8 x i16>* %47, align 2, !alias.scope !1341
  %49 = zext <8 x i16> %48 to <8 x i32>
  %50 = mul nuw nsw <8 x i32> %40, %49
  %51 = add nuw nsw <8 x i32> %45, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %52 = add nuw nsw <8 x i32> %51, %50
  %53 = lshr <8 x i32> %52, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %54 = trunc <8 x i32> %53 to <8 x i16>
  %55 = bitcast [144 x i16]* %9 to <8 x i16>*
  store <8 x i16> %54, <8 x i16>* %55, align 16, !alias.scope !1344, !noalias !1341
  %56 = getelementptr i16, i16* %20, i64 8
  %57 = bitcast i16* %56 to <8 x i16>*
  %58 = load <8 x i16>, <8 x i16>* %57, align 2, !alias.scope !1341
  %59 = zext <8 x i16> %58 to <8 x i32>
  %60 = mul nuw nsw <8 x i32> %38, %59
  %61 = getelementptr inbounds i16, i16* %20, i64 9
  %62 = bitcast i16* %61 to <8 x i16>*
  %63 = load <8 x i16>, <8 x i16>* %62, align 2, !alias.scope !1341
  %64 = zext <8 x i16> %63 to <8 x i32>
  %65 = mul nuw nsw <8 x i32> %40, %64
  %66 = add nuw nsw <8 x i32> %60, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %67 = add nuw nsw <8 x i32> %66, %65
  %68 = lshr <8 x i32> %67, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %69 = trunc <8 x i32> %68 to <8 x i16>
  %70 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 8
  %71 = bitcast i16* %70 to <8 x i16>*
  store <8 x i16> %69, <8 x i16>* %71, align 16, !alias.scope !1344, !noalias !1341
  br label %102

72:                                               ; preds = %8, %72
  %73 = phi i64 [ %100, %72 ], [ 0, %8 ]
  %74 = phi i16* [ %91, %72 ], [ %20, %8 ]
  %75 = load i16, i16* %74, align 2
  %76 = zext i16 %75 to i32
  %77 = mul nuw nsw i32 %25, %76
  %78 = getelementptr inbounds i16, i16* %74, i64 1
  %79 = load i16, i16* %78, align 2
  %80 = zext i16 %79 to i32
  %81 = mul nuw nsw i32 %27, %80
  %82 = add nuw nsw i32 %77, 64
  %83 = add nuw nsw i32 %82, %81
  %84 = lshr i32 %83, 7
  %85 = trunc i32 %84 to i16
  %86 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 %73
  store i16 %85, i16* %86, align 4
  %87 = or i64 %73, 1
  %88 = load i16, i16* %78, align 2
  %89 = zext i16 %88 to i32
  %90 = mul nuw nsw i32 %25, %89
  %91 = getelementptr inbounds i16, i16* %74, i64 2
  %92 = load i16, i16* %91, align 2
  %93 = zext i16 %92 to i32
  %94 = mul nuw nsw i32 %27, %93
  %95 = add nuw nsw i32 %90, 64
  %96 = add nuw nsw i32 %95, %94
  %97 = lshr i32 %96, 7
  %98 = trunc i32 %97 to i16
  %99 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 %87
  store i16 %98, i16* %99, align 2
  %100 = add nuw nsw i64 %73, 2
  %101 = icmp eq i64 %100, 16
  br i1 %101, label %102, label %72, !llvm.loop !1346

102:                                              ; preds = %72, %36
  %103 = phi i16* [ %41, %36 ], [ %91, %72 ]
  %104 = getelementptr inbounds i16, i16* %103, i64 %23
  %105 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 16
  %106 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 16
  %107 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 32
  %108 = add nuw nsw i64 %23, 17
  %109 = getelementptr i16, i16* %103, i64 %108
  %110 = icmp ult i16* %106, %109
  %111 = icmp ult i16* %104, %107
  %112 = and i1 %110, %111
  br i1 %112, label %912, label %113

113:                                              ; preds = %102
  %114 = insertelement <8 x i32> undef, i32 %25, i32 0
  %115 = shufflevector <8 x i32> %114, <8 x i32> undef, <8 x i32> zeroinitializer
  %116 = insertelement <8 x i32> undef, i32 %27, i32 0
  %117 = shufflevector <8 x i32> %116, <8 x i32> undef, <8 x i32> zeroinitializer
  %118 = getelementptr i16, i16* %104, i64 16
  %119 = bitcast i16* %104 to <8 x i16>*
  %120 = load <8 x i16>, <8 x i16>* %119, align 2, !alias.scope !1347
  %121 = zext <8 x i16> %120 to <8 x i32>
  %122 = mul nuw nsw <8 x i32> %115, %121
  %123 = getelementptr inbounds i16, i16* %104, i64 1
  %124 = bitcast i16* %123 to <8 x i16>*
  %125 = load <8 x i16>, <8 x i16>* %124, align 2, !alias.scope !1347
  %126 = zext <8 x i16> %125 to <8 x i32>
  %127 = mul nuw nsw <8 x i32> %117, %126
  %128 = add nuw nsw <8 x i32> %122, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %129 = add nuw nsw <8 x i32> %128, %127
  %130 = lshr <8 x i32> %129, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %131 = trunc <8 x i32> %130 to <8 x i16>
  %132 = bitcast i16* %105 to <8 x i16>*
  store <8 x i16> %131, <8 x i16>* %132, align 16, !alias.scope !1350, !noalias !1347
  %133 = getelementptr i16, i16* %104, i64 8
  %134 = bitcast i16* %133 to <8 x i16>*
  %135 = load <8 x i16>, <8 x i16>* %134, align 2, !alias.scope !1347
  %136 = zext <8 x i16> %135 to <8 x i32>
  %137 = mul nuw nsw <8 x i32> %115, %136
  %138 = getelementptr inbounds i16, i16* %133, i64 1
  %139 = bitcast i16* %138 to <8 x i16>*
  %140 = load <8 x i16>, <8 x i16>* %139, align 2, !alias.scope !1347
  %141 = zext <8 x i16> %140 to <8 x i32>
  %142 = mul nuw nsw <8 x i32> %117, %141
  %143 = add nuw nsw <8 x i32> %137, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %144 = add nuw nsw <8 x i32> %143, %142
  %145 = lshr <8 x i32> %144, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %146 = trunc <8 x i32> %145 to <8 x i16>
  %147 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 24
  %148 = bitcast i16* %147 to <8 x i16>*
  store <8 x i16> %146, <8 x i16>* %148, align 16, !alias.scope !1350, !noalias !1347
  br label %942

149:                                              ; preds = %1480, %149
  %150 = phi i64 [ %179, %149 ], [ 0, %1480 ]
  %151 = phi i16* [ %178, %149 ], [ %15, %1480 ]
  %152 = load i16, i16* %151, align 2
  %153 = zext i16 %152 to i32
  %154 = mul nuw nsw i32 %1486, %153
  %155 = getelementptr inbounds i16, i16* %151, i64 16
  %156 = load i16, i16* %155, align 2
  %157 = zext i16 %156 to i32
  %158 = mul nuw nsw i32 %1488, %157
  %159 = add nuw nsw i32 %154, 64
  %160 = add nuw nsw i32 %159, %158
  %161 = lshr i32 %160, 7
  %162 = trunc i32 %161 to i16
  %163 = getelementptr inbounds [128 x i16], [128 x i16]* %11, i64 0, i64 %150
  store i16 %162, i16* %163, align 4
  %164 = getelementptr inbounds i16, i16* %151, i64 1
  %165 = or i64 %150, 1
  %166 = load i16, i16* %164, align 2
  %167 = zext i16 %166 to i32
  %168 = mul nuw nsw i32 %1486, %167
  %169 = getelementptr inbounds i16, i16* %151, i64 17
  %170 = load i16, i16* %169, align 2
  %171 = zext i16 %170 to i32
  %172 = mul nuw nsw i32 %1488, %171
  %173 = add nuw nsw i32 %168, 64
  %174 = add nuw nsw i32 %173, %172
  %175 = lshr i32 %174, 7
  %176 = trunc i32 %175 to i16
  %177 = getelementptr inbounds [128 x i16], [128 x i16]* %11, i64 0, i64 %165
  store i16 %176, i16* %177, align 2
  %178 = getelementptr inbounds i16, i16* %151, i64 2
  %179 = add nuw nsw i64 %150, 2
  %180 = icmp eq i64 %179, 16
  br i1 %180, label %181, label %149, !llvm.loop !1352

181:                                              ; preds = %149, %1496
  %182 = phi i16* [ %1501, %1496 ], [ %178, %149 ]
  %183 = getelementptr inbounds [128 x i16], [128 x i16]* %11, i64 0, i64 16
  %184 = getelementptr inbounds [128 x i16], [128 x i16]* %11, i64 0, i64 16
  %185 = getelementptr inbounds [128 x i16], [128 x i16]* %11, i64 0, i64 32
  %186 = getelementptr i16, i16* %182, i64 32
  %187 = icmp ult i16* %184, %186
  %188 = icmp ult i16* %182, %185
  %189 = and i1 %187, %188
  br i1 %189, label %414, label %190

190:                                              ; preds = %181
  %191 = insertelement <8 x i32> undef, i32 %1486, i32 0
  %192 = shufflevector <8 x i32> %191, <8 x i32> undef, <8 x i32> zeroinitializer
  %193 = insertelement <8 x i32> undef, i32 %1488, i32 0
  %194 = shufflevector <8 x i32> %193, <8 x i32> undef, <8 x i32> zeroinitializer
  %195 = getelementptr i16, i16* %182, i64 16
  %196 = bitcast i16* %182 to <8 x i16>*
  %197 = load <8 x i16>, <8 x i16>* %196, align 2, !alias.scope !1353
  %198 = zext <8 x i16> %197 to <8 x i32>
  %199 = mul nuw nsw <8 x i32> %192, %198
  %200 = getelementptr inbounds i16, i16* %182, i64 16
  %201 = bitcast i16* %200 to <8 x i16>*
  %202 = load <8 x i16>, <8 x i16>* %201, align 2, !alias.scope !1353
  %203 = zext <8 x i16> %202 to <8 x i32>
  %204 = mul nuw nsw <8 x i32> %194, %203
  %205 = add nuw nsw <8 x i32> %199, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %206 = add nuw nsw <8 x i32> %205, %204
  %207 = lshr <8 x i32> %206, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %208 = trunc <8 x i32> %207 to <8 x i16>
  %209 = bitcast i16* %183 to <8 x i16>*
  store <8 x i16> %208, <8 x i16>* %209, align 16, !alias.scope !1356, !noalias !1353
  %210 = getelementptr i16, i16* %182, i64 8
  %211 = bitcast i16* %210 to <8 x i16>*
  %212 = load <8 x i16>, <8 x i16>* %211, align 2, !alias.scope !1353
  %213 = zext <8 x i16> %212 to <8 x i32>
  %214 = mul nuw nsw <8 x i32> %192, %213
  %215 = getelementptr inbounds i16, i16* %182, i64 24
  %216 = bitcast i16* %215 to <8 x i16>*
  %217 = load <8 x i16>, <8 x i16>* %216, align 2, !alias.scope !1353
  %218 = zext <8 x i16> %217 to <8 x i32>
  %219 = mul nuw nsw <8 x i32> %194, %218
  %220 = add nuw nsw <8 x i32> %214, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %221 = add nuw nsw <8 x i32> %220, %219
  %222 = lshr <8 x i32> %221, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %223 = trunc <8 x i32> %222 to <8 x i16>
  %224 = getelementptr inbounds [128 x i16], [128 x i16]* %11, i64 0, i64 24
  %225 = bitcast i16* %224 to <8 x i16>*
  store <8 x i16> %223, <8 x i16>* %225, align 16, !alias.scope !1356, !noalias !1353
  br label %446

226:                                              ; preds = %226, %907
  %227 = phi i16* [ %908, %907 ], [ %404, %226 ]
  %228 = phi i32 [ 0, %907 ], [ %407, %226 ]
  %229 = phi i16* [ %911, %907 ], [ %405, %226 ]
  %230 = phi i16* [ %1481, %907 ], [ %406, %226 ]
  %231 = load i16, i16* %229, align 2
  %232 = zext i16 %231 to i32
  %233 = load i16, i16* %230, align 2
  %234 = zext i16 %233 to i32
  %235 = add nuw nsw i32 %232, 1
  %236 = add nuw nsw i32 %235, %234
  %237 = lshr i32 %236, 1
  %238 = trunc i32 %237 to i16
  store i16 %238, i16* %227, align 2
  %239 = getelementptr inbounds i16, i16* %229, i64 1
  %240 = load i16, i16* %239, align 2
  %241 = zext i16 %240 to i32
  %242 = getelementptr inbounds i16, i16* %230, i64 1
  %243 = load i16, i16* %242, align 2
  %244 = zext i16 %243 to i32
  %245 = add nuw nsw i32 %241, 1
  %246 = add nuw nsw i32 %245, %244
  %247 = lshr i32 %246, 1
  %248 = trunc i32 %247 to i16
  %249 = getelementptr inbounds i16, i16* %227, i64 1
  store i16 %248, i16* %249, align 2
  %250 = getelementptr inbounds i16, i16* %229, i64 2
  %251 = load i16, i16* %250, align 2
  %252 = zext i16 %251 to i32
  %253 = getelementptr inbounds i16, i16* %230, i64 2
  %254 = load i16, i16* %253, align 2
  %255 = zext i16 %254 to i32
  %256 = add nuw nsw i32 %252, 1
  %257 = add nuw nsw i32 %256, %255
  %258 = lshr i32 %257, 1
  %259 = trunc i32 %258 to i16
  %260 = getelementptr inbounds i16, i16* %227, i64 2
  store i16 %259, i16* %260, align 2
  %261 = getelementptr inbounds i16, i16* %229, i64 3
  %262 = load i16, i16* %261, align 2
  %263 = zext i16 %262 to i32
  %264 = getelementptr inbounds i16, i16* %230, i64 3
  %265 = load i16, i16* %264, align 2
  %266 = zext i16 %265 to i32
  %267 = add nuw nsw i32 %263, 1
  %268 = add nuw nsw i32 %267, %266
  %269 = lshr i32 %268, 1
  %270 = trunc i32 %269 to i16
  %271 = getelementptr inbounds i16, i16* %227, i64 3
  store i16 %270, i16* %271, align 2
  %272 = getelementptr inbounds i16, i16* %229, i64 4
  %273 = load i16, i16* %272, align 2
  %274 = zext i16 %273 to i32
  %275 = getelementptr inbounds i16, i16* %230, i64 4
  %276 = load i16, i16* %275, align 2
  %277 = zext i16 %276 to i32
  %278 = add nuw nsw i32 %274, 1
  %279 = add nuw nsw i32 %278, %277
  %280 = lshr i32 %279, 1
  %281 = trunc i32 %280 to i16
  %282 = getelementptr inbounds i16, i16* %227, i64 4
  store i16 %281, i16* %282, align 2
  %283 = getelementptr inbounds i16, i16* %229, i64 5
  %284 = load i16, i16* %283, align 2
  %285 = zext i16 %284 to i32
  %286 = getelementptr inbounds i16, i16* %230, i64 5
  %287 = load i16, i16* %286, align 2
  %288 = zext i16 %287 to i32
  %289 = add nuw nsw i32 %285, 1
  %290 = add nuw nsw i32 %289, %288
  %291 = lshr i32 %290, 1
  %292 = trunc i32 %291 to i16
  %293 = getelementptr inbounds i16, i16* %227, i64 5
  store i16 %292, i16* %293, align 2
  %294 = getelementptr inbounds i16, i16* %229, i64 6
  %295 = load i16, i16* %294, align 2
  %296 = zext i16 %295 to i32
  %297 = getelementptr inbounds i16, i16* %230, i64 6
  %298 = load i16, i16* %297, align 2
  %299 = zext i16 %298 to i32
  %300 = add nuw nsw i32 %296, 1
  %301 = add nuw nsw i32 %300, %299
  %302 = lshr i32 %301, 1
  %303 = trunc i32 %302 to i16
  %304 = getelementptr inbounds i16, i16* %227, i64 6
  store i16 %303, i16* %304, align 2
  %305 = getelementptr inbounds i16, i16* %229, i64 7
  %306 = load i16, i16* %305, align 2
  %307 = zext i16 %306 to i32
  %308 = getelementptr inbounds i16, i16* %230, i64 7
  %309 = load i16, i16* %308, align 2
  %310 = zext i16 %309 to i32
  %311 = add nuw nsw i32 %307, 1
  %312 = add nuw nsw i32 %311, %310
  %313 = lshr i32 %312, 1
  %314 = trunc i32 %313 to i16
  %315 = getelementptr inbounds i16, i16* %227, i64 7
  store i16 %314, i16* %315, align 2
  %316 = getelementptr inbounds i16, i16* %229, i64 8
  %317 = load i16, i16* %316, align 2
  %318 = zext i16 %317 to i32
  %319 = getelementptr inbounds i16, i16* %230, i64 8
  %320 = load i16, i16* %319, align 2
  %321 = zext i16 %320 to i32
  %322 = add nuw nsw i32 %318, 1
  %323 = add nuw nsw i32 %322, %321
  %324 = lshr i32 %323, 1
  %325 = trunc i32 %324 to i16
  %326 = getelementptr inbounds i16, i16* %227, i64 8
  store i16 %325, i16* %326, align 2
  %327 = getelementptr inbounds i16, i16* %229, i64 9
  %328 = load i16, i16* %327, align 2
  %329 = zext i16 %328 to i32
  %330 = getelementptr inbounds i16, i16* %230, i64 9
  %331 = load i16, i16* %330, align 2
  %332 = zext i16 %331 to i32
  %333 = add nuw nsw i32 %329, 1
  %334 = add nuw nsw i32 %333, %332
  %335 = lshr i32 %334, 1
  %336 = trunc i32 %335 to i16
  %337 = getelementptr inbounds i16, i16* %227, i64 9
  store i16 %336, i16* %337, align 2
  %338 = getelementptr inbounds i16, i16* %229, i64 10
  %339 = load i16, i16* %338, align 2
  %340 = zext i16 %339 to i32
  %341 = getelementptr inbounds i16, i16* %230, i64 10
  %342 = load i16, i16* %341, align 2
  %343 = zext i16 %342 to i32
  %344 = add nuw nsw i32 %340, 1
  %345 = add nuw nsw i32 %344, %343
  %346 = lshr i32 %345, 1
  %347 = trunc i32 %346 to i16
  %348 = getelementptr inbounds i16, i16* %227, i64 10
  store i16 %347, i16* %348, align 2
  %349 = getelementptr inbounds i16, i16* %229, i64 11
  %350 = load i16, i16* %349, align 2
  %351 = zext i16 %350 to i32
  %352 = getelementptr inbounds i16, i16* %230, i64 11
  %353 = load i16, i16* %352, align 2
  %354 = zext i16 %353 to i32
  %355 = add nuw nsw i32 %351, 1
  %356 = add nuw nsw i32 %355, %354
  %357 = lshr i32 %356, 1
  %358 = trunc i32 %357 to i16
  %359 = getelementptr inbounds i16, i16* %227, i64 11
  store i16 %358, i16* %359, align 2
  %360 = getelementptr inbounds i16, i16* %229, i64 12
  %361 = load i16, i16* %360, align 2
  %362 = zext i16 %361 to i32
  %363 = getelementptr inbounds i16, i16* %230, i64 12
  %364 = load i16, i16* %363, align 2
  %365 = zext i16 %364 to i32
  %366 = add nuw nsw i32 %362, 1
  %367 = add nuw nsw i32 %366, %365
  %368 = lshr i32 %367, 1
  %369 = trunc i32 %368 to i16
  %370 = getelementptr inbounds i16, i16* %227, i64 12
  store i16 %369, i16* %370, align 2
  %371 = getelementptr inbounds i16, i16* %229, i64 13
  %372 = load i16, i16* %371, align 2
  %373 = zext i16 %372 to i32
  %374 = getelementptr inbounds i16, i16* %230, i64 13
  %375 = load i16, i16* %374, align 2
  %376 = zext i16 %375 to i32
  %377 = add nuw nsw i32 %373, 1
  %378 = add nuw nsw i32 %377, %376
  %379 = lshr i32 %378, 1
  %380 = trunc i32 %379 to i16
  %381 = getelementptr inbounds i16, i16* %227, i64 13
  store i16 %380, i16* %381, align 2
  %382 = getelementptr inbounds i16, i16* %229, i64 14
  %383 = load i16, i16* %382, align 2
  %384 = zext i16 %383 to i32
  %385 = getelementptr inbounds i16, i16* %230, i64 14
  %386 = load i16, i16* %385, align 2
  %387 = zext i16 %386 to i32
  %388 = add nuw nsw i32 %384, 1
  %389 = add nuw nsw i32 %388, %387
  %390 = lshr i32 %389, 1
  %391 = trunc i32 %390 to i16
  %392 = getelementptr inbounds i16, i16* %227, i64 14
  store i16 %391, i16* %392, align 2
  %393 = getelementptr inbounds i16, i16* %229, i64 15
  %394 = load i16, i16* %393, align 2
  %395 = zext i16 %394 to i32
  %396 = getelementptr inbounds i16, i16* %230, i64 15
  %397 = load i16, i16* %396, align 2
  %398 = zext i16 %397 to i32
  %399 = add nuw nsw i32 %395, 1
  %400 = add nuw nsw i32 %399, %398
  %401 = lshr i32 %400, 1
  %402 = trunc i32 %401 to i16
  %403 = getelementptr inbounds i16, i16* %227, i64 15
  store i16 %402, i16* %403, align 2
  %404 = getelementptr inbounds i16, i16* %227, i64 16
  %405 = getelementptr inbounds i16, i16* %229, i64 16
  %406 = getelementptr inbounds i16, i16* %230, i64 16
  %407 = add nuw nsw i32 %228, 1
  %408 = icmp eq i32 %407, 8
  br i1 %408, label %409, label %226

409:                                              ; preds = %226
  %410 = ptrtoint [128 x i16]* %13 to i64
  %411 = lshr exact i64 %410, 1
  %412 = inttoptr i64 %411 to i8*
  %413 = call i32 @vpx_highbd_8_variance16x8_c(i8* nonnull %412, i32 16, i8* %4, i32 %5, i32* %6)
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %14) #4
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %12) #4
  call void @llvm.lifetime.end.p0i8(i64 288, i8* nonnull %10) #4
  ret i32 %413

414:                                              ; preds = %181, %414
  %415 = phi i64 [ %444, %414 ], [ 0, %181 ]
  %416 = phi i16* [ %443, %414 ], [ %182, %181 ]
  %417 = load i16, i16* %416, align 2
  %418 = zext i16 %417 to i32
  %419 = mul nuw nsw i32 %1486, %418
  %420 = getelementptr inbounds i16, i16* %416, i64 16
  %421 = load i16, i16* %420, align 2
  %422 = zext i16 %421 to i32
  %423 = mul nuw nsw i32 %1488, %422
  %424 = add nuw nsw i32 %419, 64
  %425 = add nuw nsw i32 %424, %423
  %426 = lshr i32 %425, 7
  %427 = trunc i32 %426 to i16
  %428 = getelementptr inbounds i16, i16* %183, i64 %415
  store i16 %427, i16* %428, align 4
  %429 = getelementptr inbounds i16, i16* %416, i64 1
  %430 = or i64 %415, 1
  %431 = load i16, i16* %429, align 2
  %432 = zext i16 %431 to i32
  %433 = mul nuw nsw i32 %1486, %432
  %434 = getelementptr inbounds i16, i16* %416, i64 17
  %435 = load i16, i16* %434, align 2
  %436 = zext i16 %435 to i32
  %437 = mul nuw nsw i32 %1488, %436
  %438 = add nuw nsw i32 %433, 64
  %439 = add nuw nsw i32 %438, %437
  %440 = lshr i32 %439, 7
  %441 = trunc i32 %440 to i16
  %442 = getelementptr inbounds i16, i16* %183, i64 %430
  store i16 %441, i16* %442, align 2
  %443 = getelementptr inbounds i16, i16* %416, i64 2
  %444 = add nuw nsw i64 %415, 2
  %445 = icmp eq i64 %444, 16
  br i1 %445, label %446, label %414, !llvm.loop !1358

446:                                              ; preds = %414, %190
  %447 = phi i16* [ %195, %190 ], [ %443, %414 ]
  %448 = getelementptr inbounds [128 x i16], [128 x i16]* %11, i64 0, i64 32
  %449 = getelementptr inbounds [128 x i16], [128 x i16]* %11, i64 0, i64 32
  %450 = getelementptr inbounds [128 x i16], [128 x i16]* %11, i64 0, i64 48
  %451 = getelementptr i16, i16* %447, i64 32
  %452 = icmp ult i16* %449, %451
  %453 = icmp ult i16* %447, %450
  %454 = and i1 %452, %453
  br i1 %454, label %491, label %455

455:                                              ; preds = %446
  %456 = insertelement <8 x i32> undef, i32 %1486, i32 0
  %457 = shufflevector <8 x i32> %456, <8 x i32> undef, <8 x i32> zeroinitializer
  %458 = insertelement <8 x i32> undef, i32 %1488, i32 0
  %459 = shufflevector <8 x i32> %458, <8 x i32> undef, <8 x i32> zeroinitializer
  %460 = getelementptr i16, i16* %447, i64 16
  %461 = bitcast i16* %447 to <8 x i16>*
  %462 = load <8 x i16>, <8 x i16>* %461, align 2, !alias.scope !1359
  %463 = zext <8 x i16> %462 to <8 x i32>
  %464 = mul nuw nsw <8 x i32> %457, %463
  %465 = getelementptr inbounds i16, i16* %447, i64 16
  %466 = bitcast i16* %465 to <8 x i16>*
  %467 = load <8 x i16>, <8 x i16>* %466, align 2, !alias.scope !1359
  %468 = zext <8 x i16> %467 to <8 x i32>
  %469 = mul nuw nsw <8 x i32> %459, %468
  %470 = add nuw nsw <8 x i32> %464, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %471 = add nuw nsw <8 x i32> %470, %469
  %472 = lshr <8 x i32> %471, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %473 = trunc <8 x i32> %472 to <8 x i16>
  %474 = bitcast i16* %448 to <8 x i16>*
  store <8 x i16> %473, <8 x i16>* %474, align 16, !alias.scope !1362, !noalias !1359
  %475 = getelementptr i16, i16* %447, i64 8
  %476 = bitcast i16* %475 to <8 x i16>*
  %477 = load <8 x i16>, <8 x i16>* %476, align 2, !alias.scope !1359
  %478 = zext <8 x i16> %477 to <8 x i32>
  %479 = mul nuw nsw <8 x i32> %457, %478
  %480 = getelementptr inbounds i16, i16* %447, i64 24
  %481 = bitcast i16* %480 to <8 x i16>*
  %482 = load <8 x i16>, <8 x i16>* %481, align 2, !alias.scope !1359
  %483 = zext <8 x i16> %482 to <8 x i32>
  %484 = mul nuw nsw <8 x i32> %459, %483
  %485 = add nuw nsw <8 x i32> %479, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %486 = add nuw nsw <8 x i32> %485, %484
  %487 = lshr <8 x i32> %486, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %488 = trunc <8 x i32> %487 to <8 x i16>
  %489 = getelementptr inbounds [128 x i16], [128 x i16]* %11, i64 0, i64 40
  %490 = bitcast i16* %489 to <8 x i16>*
  store <8 x i16> %488, <8 x i16>* %490, align 16, !alias.scope !1362, !noalias !1359
  br label %523

491:                                              ; preds = %446, %491
  %492 = phi i64 [ %521, %491 ], [ 0, %446 ]
  %493 = phi i16* [ %520, %491 ], [ %447, %446 ]
  %494 = load i16, i16* %493, align 2
  %495 = zext i16 %494 to i32
  %496 = mul nuw nsw i32 %1486, %495
  %497 = getelementptr inbounds i16, i16* %493, i64 16
  %498 = load i16, i16* %497, align 2
  %499 = zext i16 %498 to i32
  %500 = mul nuw nsw i32 %1488, %499
  %501 = add nuw nsw i32 %496, 64
  %502 = add nuw nsw i32 %501, %500
  %503 = lshr i32 %502, 7
  %504 = trunc i32 %503 to i16
  %505 = getelementptr inbounds i16, i16* %448, i64 %492
  store i16 %504, i16* %505, align 4
  %506 = getelementptr inbounds i16, i16* %493, i64 1
  %507 = or i64 %492, 1
  %508 = load i16, i16* %506, align 2
  %509 = zext i16 %508 to i32
  %510 = mul nuw nsw i32 %1486, %509
  %511 = getelementptr inbounds i16, i16* %493, i64 17
  %512 = load i16, i16* %511, align 2
  %513 = zext i16 %512 to i32
  %514 = mul nuw nsw i32 %1488, %513
  %515 = add nuw nsw i32 %510, 64
  %516 = add nuw nsw i32 %515, %514
  %517 = lshr i32 %516, 7
  %518 = trunc i32 %517 to i16
  %519 = getelementptr inbounds i16, i16* %448, i64 %507
  store i16 %518, i16* %519, align 2
  %520 = getelementptr inbounds i16, i16* %493, i64 2
  %521 = add nuw nsw i64 %492, 2
  %522 = icmp eq i64 %521, 16
  br i1 %522, label %523, label %491, !llvm.loop !1364

523:                                              ; preds = %491, %455
  %524 = phi i16* [ %460, %455 ], [ %520, %491 ]
  %525 = getelementptr inbounds [128 x i16], [128 x i16]* %11, i64 0, i64 48
  %526 = getelementptr inbounds [128 x i16], [128 x i16]* %11, i64 0, i64 48
  %527 = getelementptr inbounds [128 x i16], [128 x i16]* %11, i64 0, i64 64
  %528 = getelementptr i16, i16* %524, i64 32
  %529 = icmp ult i16* %526, %528
  %530 = icmp ult i16* %524, %527
  %531 = and i1 %529, %530
  br i1 %531, label %568, label %532

532:                                              ; preds = %523
  %533 = insertelement <8 x i32> undef, i32 %1486, i32 0
  %534 = shufflevector <8 x i32> %533, <8 x i32> undef, <8 x i32> zeroinitializer
  %535 = insertelement <8 x i32> undef, i32 %1488, i32 0
  %536 = shufflevector <8 x i32> %535, <8 x i32> undef, <8 x i32> zeroinitializer
  %537 = getelementptr i16, i16* %524, i64 16
  %538 = bitcast i16* %524 to <8 x i16>*
  %539 = load <8 x i16>, <8 x i16>* %538, align 2, !alias.scope !1365
  %540 = zext <8 x i16> %539 to <8 x i32>
  %541 = mul nuw nsw <8 x i32> %534, %540
  %542 = getelementptr inbounds i16, i16* %524, i64 16
  %543 = bitcast i16* %542 to <8 x i16>*
  %544 = load <8 x i16>, <8 x i16>* %543, align 2, !alias.scope !1365
  %545 = zext <8 x i16> %544 to <8 x i32>
  %546 = mul nuw nsw <8 x i32> %536, %545
  %547 = add nuw nsw <8 x i32> %541, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %548 = add nuw nsw <8 x i32> %547, %546
  %549 = lshr <8 x i32> %548, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %550 = trunc <8 x i32> %549 to <8 x i16>
  %551 = bitcast i16* %525 to <8 x i16>*
  store <8 x i16> %550, <8 x i16>* %551, align 16, !alias.scope !1368, !noalias !1365
  %552 = getelementptr i16, i16* %524, i64 8
  %553 = bitcast i16* %552 to <8 x i16>*
  %554 = load <8 x i16>, <8 x i16>* %553, align 2, !alias.scope !1365
  %555 = zext <8 x i16> %554 to <8 x i32>
  %556 = mul nuw nsw <8 x i32> %534, %555
  %557 = getelementptr inbounds i16, i16* %524, i64 24
  %558 = bitcast i16* %557 to <8 x i16>*
  %559 = load <8 x i16>, <8 x i16>* %558, align 2, !alias.scope !1365
  %560 = zext <8 x i16> %559 to <8 x i32>
  %561 = mul nuw nsw <8 x i32> %536, %560
  %562 = add nuw nsw <8 x i32> %556, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %563 = add nuw nsw <8 x i32> %562, %561
  %564 = lshr <8 x i32> %563, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %565 = trunc <8 x i32> %564 to <8 x i16>
  %566 = getelementptr inbounds [128 x i16], [128 x i16]* %11, i64 0, i64 56
  %567 = bitcast i16* %566 to <8 x i16>*
  store <8 x i16> %565, <8 x i16>* %567, align 16, !alias.scope !1368, !noalias !1365
  br label %600

568:                                              ; preds = %523, %568
  %569 = phi i64 [ %598, %568 ], [ 0, %523 ]
  %570 = phi i16* [ %597, %568 ], [ %524, %523 ]
  %571 = load i16, i16* %570, align 2
  %572 = zext i16 %571 to i32
  %573 = mul nuw nsw i32 %1486, %572
  %574 = getelementptr inbounds i16, i16* %570, i64 16
  %575 = load i16, i16* %574, align 2
  %576 = zext i16 %575 to i32
  %577 = mul nuw nsw i32 %1488, %576
  %578 = add nuw nsw i32 %573, 64
  %579 = add nuw nsw i32 %578, %577
  %580 = lshr i32 %579, 7
  %581 = trunc i32 %580 to i16
  %582 = getelementptr inbounds i16, i16* %525, i64 %569
  store i16 %581, i16* %582, align 4
  %583 = getelementptr inbounds i16, i16* %570, i64 1
  %584 = or i64 %569, 1
  %585 = load i16, i16* %583, align 2
  %586 = zext i16 %585 to i32
  %587 = mul nuw nsw i32 %1486, %586
  %588 = getelementptr inbounds i16, i16* %570, i64 17
  %589 = load i16, i16* %588, align 2
  %590 = zext i16 %589 to i32
  %591 = mul nuw nsw i32 %1488, %590
  %592 = add nuw nsw i32 %587, 64
  %593 = add nuw nsw i32 %592, %591
  %594 = lshr i32 %593, 7
  %595 = trunc i32 %594 to i16
  %596 = getelementptr inbounds i16, i16* %525, i64 %584
  store i16 %595, i16* %596, align 2
  %597 = getelementptr inbounds i16, i16* %570, i64 2
  %598 = add nuw nsw i64 %569, 2
  %599 = icmp eq i64 %598, 16
  br i1 %599, label %600, label %568, !llvm.loop !1370

600:                                              ; preds = %568, %532
  %601 = phi i16* [ %537, %532 ], [ %597, %568 ]
  %602 = getelementptr inbounds [128 x i16], [128 x i16]* %11, i64 0, i64 64
  %603 = getelementptr inbounds [128 x i16], [128 x i16]* %11, i64 0, i64 64
  %604 = getelementptr inbounds [128 x i16], [128 x i16]* %11, i64 0, i64 80
  %605 = getelementptr i16, i16* %601, i64 32
  %606 = icmp ult i16* %603, %605
  %607 = icmp ult i16* %601, %604
  %608 = and i1 %606, %607
  br i1 %608, label %645, label %609

609:                                              ; preds = %600
  %610 = insertelement <8 x i32> undef, i32 %1486, i32 0
  %611 = shufflevector <8 x i32> %610, <8 x i32> undef, <8 x i32> zeroinitializer
  %612 = insertelement <8 x i32> undef, i32 %1488, i32 0
  %613 = shufflevector <8 x i32> %612, <8 x i32> undef, <8 x i32> zeroinitializer
  %614 = getelementptr i16, i16* %601, i64 16
  %615 = bitcast i16* %601 to <8 x i16>*
  %616 = load <8 x i16>, <8 x i16>* %615, align 2, !alias.scope !1371
  %617 = zext <8 x i16> %616 to <8 x i32>
  %618 = mul nuw nsw <8 x i32> %611, %617
  %619 = getelementptr inbounds i16, i16* %601, i64 16
  %620 = bitcast i16* %619 to <8 x i16>*
  %621 = load <8 x i16>, <8 x i16>* %620, align 2, !alias.scope !1371
  %622 = zext <8 x i16> %621 to <8 x i32>
  %623 = mul nuw nsw <8 x i32> %613, %622
  %624 = add nuw nsw <8 x i32> %618, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %625 = add nuw nsw <8 x i32> %624, %623
  %626 = lshr <8 x i32> %625, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %627 = trunc <8 x i32> %626 to <8 x i16>
  %628 = bitcast i16* %602 to <8 x i16>*
  store <8 x i16> %627, <8 x i16>* %628, align 16, !alias.scope !1374, !noalias !1371
  %629 = getelementptr i16, i16* %601, i64 8
  %630 = bitcast i16* %629 to <8 x i16>*
  %631 = load <8 x i16>, <8 x i16>* %630, align 2, !alias.scope !1371
  %632 = zext <8 x i16> %631 to <8 x i32>
  %633 = mul nuw nsw <8 x i32> %611, %632
  %634 = getelementptr inbounds i16, i16* %601, i64 24
  %635 = bitcast i16* %634 to <8 x i16>*
  %636 = load <8 x i16>, <8 x i16>* %635, align 2, !alias.scope !1371
  %637 = zext <8 x i16> %636 to <8 x i32>
  %638 = mul nuw nsw <8 x i32> %613, %637
  %639 = add nuw nsw <8 x i32> %633, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %640 = add nuw nsw <8 x i32> %639, %638
  %641 = lshr <8 x i32> %640, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %642 = trunc <8 x i32> %641 to <8 x i16>
  %643 = getelementptr inbounds [128 x i16], [128 x i16]* %11, i64 0, i64 72
  %644 = bitcast i16* %643 to <8 x i16>*
  store <8 x i16> %642, <8 x i16>* %644, align 16, !alias.scope !1374, !noalias !1371
  br label %677

645:                                              ; preds = %600, %645
  %646 = phi i64 [ %675, %645 ], [ 0, %600 ]
  %647 = phi i16* [ %674, %645 ], [ %601, %600 ]
  %648 = load i16, i16* %647, align 2
  %649 = zext i16 %648 to i32
  %650 = mul nuw nsw i32 %1486, %649
  %651 = getelementptr inbounds i16, i16* %647, i64 16
  %652 = load i16, i16* %651, align 2
  %653 = zext i16 %652 to i32
  %654 = mul nuw nsw i32 %1488, %653
  %655 = add nuw nsw i32 %650, 64
  %656 = add nuw nsw i32 %655, %654
  %657 = lshr i32 %656, 7
  %658 = trunc i32 %657 to i16
  %659 = getelementptr inbounds i16, i16* %602, i64 %646
  store i16 %658, i16* %659, align 4
  %660 = getelementptr inbounds i16, i16* %647, i64 1
  %661 = or i64 %646, 1
  %662 = load i16, i16* %660, align 2
  %663 = zext i16 %662 to i32
  %664 = mul nuw nsw i32 %1486, %663
  %665 = getelementptr inbounds i16, i16* %647, i64 17
  %666 = load i16, i16* %665, align 2
  %667 = zext i16 %666 to i32
  %668 = mul nuw nsw i32 %1488, %667
  %669 = add nuw nsw i32 %664, 64
  %670 = add nuw nsw i32 %669, %668
  %671 = lshr i32 %670, 7
  %672 = trunc i32 %671 to i16
  %673 = getelementptr inbounds i16, i16* %602, i64 %661
  store i16 %672, i16* %673, align 2
  %674 = getelementptr inbounds i16, i16* %647, i64 2
  %675 = add nuw nsw i64 %646, 2
  %676 = icmp eq i64 %675, 16
  br i1 %676, label %677, label %645, !llvm.loop !1376

677:                                              ; preds = %645, %609
  %678 = phi i16* [ %614, %609 ], [ %674, %645 ]
  %679 = getelementptr inbounds [128 x i16], [128 x i16]* %11, i64 0, i64 80
  %680 = getelementptr inbounds [128 x i16], [128 x i16]* %11, i64 0, i64 80
  %681 = getelementptr inbounds [128 x i16], [128 x i16]* %11, i64 0, i64 96
  %682 = getelementptr i16, i16* %678, i64 32
  %683 = icmp ult i16* %680, %682
  %684 = icmp ult i16* %678, %681
  %685 = and i1 %683, %684
  br i1 %685, label %722, label %686

686:                                              ; preds = %677
  %687 = insertelement <8 x i32> undef, i32 %1486, i32 0
  %688 = shufflevector <8 x i32> %687, <8 x i32> undef, <8 x i32> zeroinitializer
  %689 = insertelement <8 x i32> undef, i32 %1488, i32 0
  %690 = shufflevector <8 x i32> %689, <8 x i32> undef, <8 x i32> zeroinitializer
  %691 = getelementptr i16, i16* %678, i64 16
  %692 = bitcast i16* %678 to <8 x i16>*
  %693 = load <8 x i16>, <8 x i16>* %692, align 2, !alias.scope !1377
  %694 = zext <8 x i16> %693 to <8 x i32>
  %695 = mul nuw nsw <8 x i32> %688, %694
  %696 = getelementptr inbounds i16, i16* %678, i64 16
  %697 = bitcast i16* %696 to <8 x i16>*
  %698 = load <8 x i16>, <8 x i16>* %697, align 2, !alias.scope !1377
  %699 = zext <8 x i16> %698 to <8 x i32>
  %700 = mul nuw nsw <8 x i32> %690, %699
  %701 = add nuw nsw <8 x i32> %695, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %702 = add nuw nsw <8 x i32> %701, %700
  %703 = lshr <8 x i32> %702, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %704 = trunc <8 x i32> %703 to <8 x i16>
  %705 = bitcast i16* %679 to <8 x i16>*
  store <8 x i16> %704, <8 x i16>* %705, align 16, !alias.scope !1380, !noalias !1377
  %706 = getelementptr i16, i16* %678, i64 8
  %707 = bitcast i16* %706 to <8 x i16>*
  %708 = load <8 x i16>, <8 x i16>* %707, align 2, !alias.scope !1377
  %709 = zext <8 x i16> %708 to <8 x i32>
  %710 = mul nuw nsw <8 x i32> %688, %709
  %711 = getelementptr inbounds i16, i16* %678, i64 24
  %712 = bitcast i16* %711 to <8 x i16>*
  %713 = load <8 x i16>, <8 x i16>* %712, align 2, !alias.scope !1377
  %714 = zext <8 x i16> %713 to <8 x i32>
  %715 = mul nuw nsw <8 x i32> %690, %714
  %716 = add nuw nsw <8 x i32> %710, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %717 = add nuw nsw <8 x i32> %716, %715
  %718 = lshr <8 x i32> %717, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %719 = trunc <8 x i32> %718 to <8 x i16>
  %720 = getelementptr inbounds [128 x i16], [128 x i16]* %11, i64 0, i64 88
  %721 = bitcast i16* %720 to <8 x i16>*
  store <8 x i16> %719, <8 x i16>* %721, align 16, !alias.scope !1380, !noalias !1377
  br label %754

722:                                              ; preds = %677, %722
  %723 = phi i64 [ %752, %722 ], [ 0, %677 ]
  %724 = phi i16* [ %751, %722 ], [ %678, %677 ]
  %725 = load i16, i16* %724, align 2
  %726 = zext i16 %725 to i32
  %727 = mul nuw nsw i32 %1486, %726
  %728 = getelementptr inbounds i16, i16* %724, i64 16
  %729 = load i16, i16* %728, align 2
  %730 = zext i16 %729 to i32
  %731 = mul nuw nsw i32 %1488, %730
  %732 = add nuw nsw i32 %727, 64
  %733 = add nuw nsw i32 %732, %731
  %734 = lshr i32 %733, 7
  %735 = trunc i32 %734 to i16
  %736 = getelementptr inbounds i16, i16* %679, i64 %723
  store i16 %735, i16* %736, align 4
  %737 = getelementptr inbounds i16, i16* %724, i64 1
  %738 = or i64 %723, 1
  %739 = load i16, i16* %737, align 2
  %740 = zext i16 %739 to i32
  %741 = mul nuw nsw i32 %1486, %740
  %742 = getelementptr inbounds i16, i16* %724, i64 17
  %743 = load i16, i16* %742, align 2
  %744 = zext i16 %743 to i32
  %745 = mul nuw nsw i32 %1488, %744
  %746 = add nuw nsw i32 %741, 64
  %747 = add nuw nsw i32 %746, %745
  %748 = lshr i32 %747, 7
  %749 = trunc i32 %748 to i16
  %750 = getelementptr inbounds i16, i16* %679, i64 %738
  store i16 %749, i16* %750, align 2
  %751 = getelementptr inbounds i16, i16* %724, i64 2
  %752 = add nuw nsw i64 %723, 2
  %753 = icmp eq i64 %752, 16
  br i1 %753, label %754, label %722, !llvm.loop !1382

754:                                              ; preds = %722, %686
  %755 = phi i16* [ %691, %686 ], [ %751, %722 ]
  %756 = getelementptr inbounds [128 x i16], [128 x i16]* %11, i64 0, i64 96
  %757 = getelementptr inbounds [128 x i16], [128 x i16]* %11, i64 0, i64 96
  %758 = getelementptr inbounds [128 x i16], [128 x i16]* %11, i64 0, i64 112
  %759 = getelementptr i16, i16* %755, i64 32
  %760 = icmp ult i16* %757, %759
  %761 = icmp ult i16* %755, %758
  %762 = and i1 %760, %761
  br i1 %762, label %799, label %763

763:                                              ; preds = %754
  %764 = insertelement <8 x i32> undef, i32 %1486, i32 0
  %765 = shufflevector <8 x i32> %764, <8 x i32> undef, <8 x i32> zeroinitializer
  %766 = insertelement <8 x i32> undef, i32 %1488, i32 0
  %767 = shufflevector <8 x i32> %766, <8 x i32> undef, <8 x i32> zeroinitializer
  %768 = getelementptr i16, i16* %755, i64 16
  %769 = bitcast i16* %755 to <8 x i16>*
  %770 = load <8 x i16>, <8 x i16>* %769, align 2, !alias.scope !1383
  %771 = zext <8 x i16> %770 to <8 x i32>
  %772 = mul nuw nsw <8 x i32> %765, %771
  %773 = getelementptr inbounds i16, i16* %755, i64 16
  %774 = bitcast i16* %773 to <8 x i16>*
  %775 = load <8 x i16>, <8 x i16>* %774, align 2, !alias.scope !1383
  %776 = zext <8 x i16> %775 to <8 x i32>
  %777 = mul nuw nsw <8 x i32> %767, %776
  %778 = add nuw nsw <8 x i32> %772, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %779 = add nuw nsw <8 x i32> %778, %777
  %780 = lshr <8 x i32> %779, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %781 = trunc <8 x i32> %780 to <8 x i16>
  %782 = bitcast i16* %756 to <8 x i16>*
  store <8 x i16> %781, <8 x i16>* %782, align 16, !alias.scope !1386, !noalias !1383
  %783 = getelementptr i16, i16* %755, i64 8
  %784 = bitcast i16* %783 to <8 x i16>*
  %785 = load <8 x i16>, <8 x i16>* %784, align 2, !alias.scope !1383
  %786 = zext <8 x i16> %785 to <8 x i32>
  %787 = mul nuw nsw <8 x i32> %765, %786
  %788 = getelementptr inbounds i16, i16* %755, i64 24
  %789 = bitcast i16* %788 to <8 x i16>*
  %790 = load <8 x i16>, <8 x i16>* %789, align 2, !alias.scope !1383
  %791 = zext <8 x i16> %790 to <8 x i32>
  %792 = mul nuw nsw <8 x i32> %767, %791
  %793 = add nuw nsw <8 x i32> %787, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %794 = add nuw nsw <8 x i32> %793, %792
  %795 = lshr <8 x i32> %794, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %796 = trunc <8 x i32> %795 to <8 x i16>
  %797 = getelementptr inbounds [128 x i16], [128 x i16]* %11, i64 0, i64 104
  %798 = bitcast i16* %797 to <8 x i16>*
  store <8 x i16> %796, <8 x i16>* %798, align 16, !alias.scope !1386, !noalias !1383
  br label %831

799:                                              ; preds = %754, %799
  %800 = phi i64 [ %829, %799 ], [ 0, %754 ]
  %801 = phi i16* [ %828, %799 ], [ %755, %754 ]
  %802 = load i16, i16* %801, align 2
  %803 = zext i16 %802 to i32
  %804 = mul nuw nsw i32 %1486, %803
  %805 = getelementptr inbounds i16, i16* %801, i64 16
  %806 = load i16, i16* %805, align 2
  %807 = zext i16 %806 to i32
  %808 = mul nuw nsw i32 %1488, %807
  %809 = add nuw nsw i32 %804, 64
  %810 = add nuw nsw i32 %809, %808
  %811 = lshr i32 %810, 7
  %812 = trunc i32 %811 to i16
  %813 = getelementptr inbounds i16, i16* %756, i64 %800
  store i16 %812, i16* %813, align 4
  %814 = getelementptr inbounds i16, i16* %801, i64 1
  %815 = or i64 %800, 1
  %816 = load i16, i16* %814, align 2
  %817 = zext i16 %816 to i32
  %818 = mul nuw nsw i32 %1486, %817
  %819 = getelementptr inbounds i16, i16* %801, i64 17
  %820 = load i16, i16* %819, align 2
  %821 = zext i16 %820 to i32
  %822 = mul nuw nsw i32 %1488, %821
  %823 = add nuw nsw i32 %818, 64
  %824 = add nuw nsw i32 %823, %822
  %825 = lshr i32 %824, 7
  %826 = trunc i32 %825 to i16
  %827 = getelementptr inbounds i16, i16* %756, i64 %815
  store i16 %826, i16* %827, align 2
  %828 = getelementptr inbounds i16, i16* %801, i64 2
  %829 = add nuw nsw i64 %800, 2
  %830 = icmp eq i64 %829, 16
  br i1 %830, label %831, label %799, !llvm.loop !1388

831:                                              ; preds = %799, %763
  %832 = phi i16* [ %768, %763 ], [ %828, %799 ]
  %833 = getelementptr inbounds [128 x i16], [128 x i16]* %11, i64 0, i64 112
  %834 = getelementptr inbounds [128 x i16], [128 x i16]* %11, i64 0, i64 112
  %835 = getelementptr inbounds [128 x i16], [128 x i16]* %11, i64 1, i64 0
  %836 = getelementptr i16, i16* %832, i64 32
  %837 = icmp ult i16* %834, %836
  %838 = icmp ult i16* %832, %835
  %839 = and i1 %837, %838
  br i1 %839, label %875, label %840

840:                                              ; preds = %831
  %841 = insertelement <8 x i32> undef, i32 %1486, i32 0
  %842 = shufflevector <8 x i32> %841, <8 x i32> undef, <8 x i32> zeroinitializer
  %843 = insertelement <8 x i32> undef, i32 %1488, i32 0
  %844 = shufflevector <8 x i32> %843, <8 x i32> undef, <8 x i32> zeroinitializer
  %845 = bitcast i16* %832 to <8 x i16>*
  %846 = load <8 x i16>, <8 x i16>* %845, align 2, !alias.scope !1389
  %847 = zext <8 x i16> %846 to <8 x i32>
  %848 = mul nuw nsw <8 x i32> %842, %847
  %849 = getelementptr inbounds i16, i16* %832, i64 16
  %850 = bitcast i16* %849 to <8 x i16>*
  %851 = load <8 x i16>, <8 x i16>* %850, align 2, !alias.scope !1389
  %852 = zext <8 x i16> %851 to <8 x i32>
  %853 = mul nuw nsw <8 x i32> %844, %852
  %854 = add nuw nsw <8 x i32> %848, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %855 = add nuw nsw <8 x i32> %854, %853
  %856 = lshr <8 x i32> %855, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %857 = trunc <8 x i32> %856 to <8 x i16>
  %858 = bitcast i16* %833 to <8 x i16>*
  store <8 x i16> %857, <8 x i16>* %858, align 16, !alias.scope !1392, !noalias !1389
  %859 = getelementptr i16, i16* %832, i64 8
  %860 = bitcast i16* %859 to <8 x i16>*
  %861 = load <8 x i16>, <8 x i16>* %860, align 2, !alias.scope !1389
  %862 = zext <8 x i16> %861 to <8 x i32>
  %863 = mul nuw nsw <8 x i32> %842, %862
  %864 = getelementptr inbounds i16, i16* %832, i64 24
  %865 = bitcast i16* %864 to <8 x i16>*
  %866 = load <8 x i16>, <8 x i16>* %865, align 2, !alias.scope !1389
  %867 = zext <8 x i16> %866 to <8 x i32>
  %868 = mul nuw nsw <8 x i32> %844, %867
  %869 = add nuw nsw <8 x i32> %863, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %870 = add nuw nsw <8 x i32> %869, %868
  %871 = lshr <8 x i32> %870, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %872 = trunc <8 x i32> %871 to <8 x i16>
  %873 = getelementptr inbounds [128 x i16], [128 x i16]* %11, i64 0, i64 120
  %874 = bitcast i16* %873 to <8 x i16>*
  store <8 x i16> %872, <8 x i16>* %874, align 16, !alias.scope !1392, !noalias !1389
  br label %907

875:                                              ; preds = %831, %875
  %876 = phi i64 [ %905, %875 ], [ 0, %831 ]
  %877 = phi i16* [ %904, %875 ], [ %832, %831 ]
  %878 = load i16, i16* %877, align 2
  %879 = zext i16 %878 to i32
  %880 = mul nuw nsw i32 %1486, %879
  %881 = getelementptr inbounds i16, i16* %877, i64 16
  %882 = load i16, i16* %881, align 2
  %883 = zext i16 %882 to i32
  %884 = mul nuw nsw i32 %1488, %883
  %885 = add nuw nsw i32 %880, 64
  %886 = add nuw nsw i32 %885, %884
  %887 = lshr i32 %886, 7
  %888 = trunc i32 %887 to i16
  %889 = getelementptr inbounds i16, i16* %833, i64 %876
  store i16 %888, i16* %889, align 4
  %890 = getelementptr inbounds i16, i16* %877, i64 1
  %891 = or i64 %876, 1
  %892 = load i16, i16* %890, align 2
  %893 = zext i16 %892 to i32
  %894 = mul nuw nsw i32 %1486, %893
  %895 = getelementptr inbounds i16, i16* %877, i64 17
  %896 = load i16, i16* %895, align 2
  %897 = zext i16 %896 to i32
  %898 = mul nuw nsw i32 %1488, %897
  %899 = add nuw nsw i32 %894, 64
  %900 = add nuw nsw i32 %899, %898
  %901 = lshr i32 %900, 7
  %902 = trunc i32 %901 to i16
  %903 = getelementptr inbounds i16, i16* %833, i64 %891
  store i16 %902, i16* %903, align 2
  %904 = getelementptr inbounds i16, i16* %877, i64 2
  %905 = add nuw nsw i64 %876, 2
  %906 = icmp eq i64 %905, 16
  br i1 %906, label %907, label %875, !llvm.loop !1394

907:                                              ; preds = %875, %840
  %908 = getelementptr inbounds [128 x i16], [128 x i16]* %13, i64 0, i64 0
  %909 = ptrtoint i8* %7 to i64
  %910 = shl i64 %909, 1
  %911 = inttoptr i64 %910 to i16*
  br label %226

912:                                              ; preds = %102, %912
  %913 = phi i64 [ %940, %912 ], [ 0, %102 ]
  %914 = phi i16* [ %931, %912 ], [ %104, %102 ]
  %915 = load i16, i16* %914, align 2
  %916 = zext i16 %915 to i32
  %917 = mul nuw nsw i32 %25, %916
  %918 = getelementptr inbounds i16, i16* %914, i64 1
  %919 = load i16, i16* %918, align 2
  %920 = zext i16 %919 to i32
  %921 = mul nuw nsw i32 %27, %920
  %922 = add nuw nsw i32 %917, 64
  %923 = add nuw nsw i32 %922, %921
  %924 = lshr i32 %923, 7
  %925 = trunc i32 %924 to i16
  %926 = getelementptr inbounds i16, i16* %105, i64 %913
  store i16 %925, i16* %926, align 4
  %927 = or i64 %913, 1
  %928 = load i16, i16* %918, align 2
  %929 = zext i16 %928 to i32
  %930 = mul nuw nsw i32 %25, %929
  %931 = getelementptr inbounds i16, i16* %914, i64 2
  %932 = load i16, i16* %931, align 2
  %933 = zext i16 %932 to i32
  %934 = mul nuw nsw i32 %27, %933
  %935 = add nuw nsw i32 %930, 64
  %936 = add nuw nsw i32 %935, %934
  %937 = lshr i32 %936, 7
  %938 = trunc i32 %937 to i16
  %939 = getelementptr inbounds i16, i16* %105, i64 %927
  store i16 %938, i16* %939, align 2
  %940 = add nuw nsw i64 %913, 2
  %941 = icmp eq i64 %940, 16
  br i1 %941, label %942, label %912, !llvm.loop !1395

942:                                              ; preds = %912, %113
  %943 = phi i16* [ %118, %113 ], [ %931, %912 ]
  %944 = getelementptr inbounds i16, i16* %943, i64 %23
  %945 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 32
  %946 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 32
  %947 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 48
  %948 = add nuw nsw i64 %23, 17
  %949 = getelementptr i16, i16* %943, i64 %948
  %950 = icmp ult i16* %946, %949
  %951 = icmp ult i16* %944, %947
  %952 = and i1 %950, %951
  br i1 %952, label %989, label %953

953:                                              ; preds = %942
  %954 = insertelement <8 x i32> undef, i32 %25, i32 0
  %955 = shufflevector <8 x i32> %954, <8 x i32> undef, <8 x i32> zeroinitializer
  %956 = insertelement <8 x i32> undef, i32 %27, i32 0
  %957 = shufflevector <8 x i32> %956, <8 x i32> undef, <8 x i32> zeroinitializer
  %958 = getelementptr i16, i16* %944, i64 16
  %959 = bitcast i16* %944 to <8 x i16>*
  %960 = load <8 x i16>, <8 x i16>* %959, align 2, !alias.scope !1396
  %961 = zext <8 x i16> %960 to <8 x i32>
  %962 = mul nuw nsw <8 x i32> %955, %961
  %963 = getelementptr inbounds i16, i16* %944, i64 1
  %964 = bitcast i16* %963 to <8 x i16>*
  %965 = load <8 x i16>, <8 x i16>* %964, align 2, !alias.scope !1396
  %966 = zext <8 x i16> %965 to <8 x i32>
  %967 = mul nuw nsw <8 x i32> %957, %966
  %968 = add nuw nsw <8 x i32> %962, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %969 = add nuw nsw <8 x i32> %968, %967
  %970 = lshr <8 x i32> %969, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %971 = trunc <8 x i32> %970 to <8 x i16>
  %972 = bitcast i16* %945 to <8 x i16>*
  store <8 x i16> %971, <8 x i16>* %972, align 16, !alias.scope !1399, !noalias !1396
  %973 = getelementptr i16, i16* %944, i64 8
  %974 = bitcast i16* %973 to <8 x i16>*
  %975 = load <8 x i16>, <8 x i16>* %974, align 2, !alias.scope !1396
  %976 = zext <8 x i16> %975 to <8 x i32>
  %977 = mul nuw nsw <8 x i32> %955, %976
  %978 = getelementptr inbounds i16, i16* %973, i64 1
  %979 = bitcast i16* %978 to <8 x i16>*
  %980 = load <8 x i16>, <8 x i16>* %979, align 2, !alias.scope !1396
  %981 = zext <8 x i16> %980 to <8 x i32>
  %982 = mul nuw nsw <8 x i32> %957, %981
  %983 = add nuw nsw <8 x i32> %977, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %984 = add nuw nsw <8 x i32> %983, %982
  %985 = lshr <8 x i32> %984, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %986 = trunc <8 x i32> %985 to <8 x i16>
  %987 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 40
  %988 = bitcast i16* %987 to <8 x i16>*
  store <8 x i16> %986, <8 x i16>* %988, align 16, !alias.scope !1399, !noalias !1396
  br label %1019

989:                                              ; preds = %942, %989
  %990 = phi i64 [ %1017, %989 ], [ 0, %942 ]
  %991 = phi i16* [ %1008, %989 ], [ %944, %942 ]
  %992 = load i16, i16* %991, align 2
  %993 = zext i16 %992 to i32
  %994 = mul nuw nsw i32 %25, %993
  %995 = getelementptr inbounds i16, i16* %991, i64 1
  %996 = load i16, i16* %995, align 2
  %997 = zext i16 %996 to i32
  %998 = mul nuw nsw i32 %27, %997
  %999 = add nuw nsw i32 %994, 64
  %1000 = add nuw nsw i32 %999, %998
  %1001 = lshr i32 %1000, 7
  %1002 = trunc i32 %1001 to i16
  %1003 = getelementptr inbounds i16, i16* %945, i64 %990
  store i16 %1002, i16* %1003, align 4
  %1004 = or i64 %990, 1
  %1005 = load i16, i16* %995, align 2
  %1006 = zext i16 %1005 to i32
  %1007 = mul nuw nsw i32 %25, %1006
  %1008 = getelementptr inbounds i16, i16* %991, i64 2
  %1009 = load i16, i16* %1008, align 2
  %1010 = zext i16 %1009 to i32
  %1011 = mul nuw nsw i32 %27, %1010
  %1012 = add nuw nsw i32 %1007, 64
  %1013 = add nuw nsw i32 %1012, %1011
  %1014 = lshr i32 %1013, 7
  %1015 = trunc i32 %1014 to i16
  %1016 = getelementptr inbounds i16, i16* %945, i64 %1004
  store i16 %1015, i16* %1016, align 2
  %1017 = add nuw nsw i64 %990, 2
  %1018 = icmp eq i64 %1017, 16
  br i1 %1018, label %1019, label %989, !llvm.loop !1401

1019:                                             ; preds = %989, %953
  %1020 = phi i16* [ %958, %953 ], [ %1008, %989 ]
  %1021 = getelementptr inbounds i16, i16* %1020, i64 %23
  %1022 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 48
  %1023 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 48
  %1024 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 64
  %1025 = add nuw nsw i64 %23, 17
  %1026 = getelementptr i16, i16* %1020, i64 %1025
  %1027 = icmp ult i16* %1023, %1026
  %1028 = icmp ult i16* %1021, %1024
  %1029 = and i1 %1027, %1028
  br i1 %1029, label %1066, label %1030

1030:                                             ; preds = %1019
  %1031 = insertelement <8 x i32> undef, i32 %25, i32 0
  %1032 = shufflevector <8 x i32> %1031, <8 x i32> undef, <8 x i32> zeroinitializer
  %1033 = insertelement <8 x i32> undef, i32 %27, i32 0
  %1034 = shufflevector <8 x i32> %1033, <8 x i32> undef, <8 x i32> zeroinitializer
  %1035 = getelementptr i16, i16* %1021, i64 16
  %1036 = bitcast i16* %1021 to <8 x i16>*
  %1037 = load <8 x i16>, <8 x i16>* %1036, align 2, !alias.scope !1402
  %1038 = zext <8 x i16> %1037 to <8 x i32>
  %1039 = mul nuw nsw <8 x i32> %1032, %1038
  %1040 = getelementptr inbounds i16, i16* %1021, i64 1
  %1041 = bitcast i16* %1040 to <8 x i16>*
  %1042 = load <8 x i16>, <8 x i16>* %1041, align 2, !alias.scope !1402
  %1043 = zext <8 x i16> %1042 to <8 x i32>
  %1044 = mul nuw nsw <8 x i32> %1034, %1043
  %1045 = add nuw nsw <8 x i32> %1039, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %1046 = add nuw nsw <8 x i32> %1045, %1044
  %1047 = lshr <8 x i32> %1046, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %1048 = trunc <8 x i32> %1047 to <8 x i16>
  %1049 = bitcast i16* %1022 to <8 x i16>*
  store <8 x i16> %1048, <8 x i16>* %1049, align 16, !alias.scope !1405, !noalias !1402
  %1050 = getelementptr i16, i16* %1021, i64 8
  %1051 = bitcast i16* %1050 to <8 x i16>*
  %1052 = load <8 x i16>, <8 x i16>* %1051, align 2, !alias.scope !1402
  %1053 = zext <8 x i16> %1052 to <8 x i32>
  %1054 = mul nuw nsw <8 x i32> %1032, %1053
  %1055 = getelementptr inbounds i16, i16* %1050, i64 1
  %1056 = bitcast i16* %1055 to <8 x i16>*
  %1057 = load <8 x i16>, <8 x i16>* %1056, align 2, !alias.scope !1402
  %1058 = zext <8 x i16> %1057 to <8 x i32>
  %1059 = mul nuw nsw <8 x i32> %1034, %1058
  %1060 = add nuw nsw <8 x i32> %1054, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %1061 = add nuw nsw <8 x i32> %1060, %1059
  %1062 = lshr <8 x i32> %1061, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %1063 = trunc <8 x i32> %1062 to <8 x i16>
  %1064 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 56
  %1065 = bitcast i16* %1064 to <8 x i16>*
  store <8 x i16> %1063, <8 x i16>* %1065, align 16, !alias.scope !1405, !noalias !1402
  br label %1096

1066:                                             ; preds = %1019, %1066
  %1067 = phi i64 [ %1094, %1066 ], [ 0, %1019 ]
  %1068 = phi i16* [ %1085, %1066 ], [ %1021, %1019 ]
  %1069 = load i16, i16* %1068, align 2
  %1070 = zext i16 %1069 to i32
  %1071 = mul nuw nsw i32 %25, %1070
  %1072 = getelementptr inbounds i16, i16* %1068, i64 1
  %1073 = load i16, i16* %1072, align 2
  %1074 = zext i16 %1073 to i32
  %1075 = mul nuw nsw i32 %27, %1074
  %1076 = add nuw nsw i32 %1071, 64
  %1077 = add nuw nsw i32 %1076, %1075
  %1078 = lshr i32 %1077, 7
  %1079 = trunc i32 %1078 to i16
  %1080 = getelementptr inbounds i16, i16* %1022, i64 %1067
  store i16 %1079, i16* %1080, align 4
  %1081 = or i64 %1067, 1
  %1082 = load i16, i16* %1072, align 2
  %1083 = zext i16 %1082 to i32
  %1084 = mul nuw nsw i32 %25, %1083
  %1085 = getelementptr inbounds i16, i16* %1068, i64 2
  %1086 = load i16, i16* %1085, align 2
  %1087 = zext i16 %1086 to i32
  %1088 = mul nuw nsw i32 %27, %1087
  %1089 = add nuw nsw i32 %1084, 64
  %1090 = add nuw nsw i32 %1089, %1088
  %1091 = lshr i32 %1090, 7
  %1092 = trunc i32 %1091 to i16
  %1093 = getelementptr inbounds i16, i16* %1022, i64 %1081
  store i16 %1092, i16* %1093, align 2
  %1094 = add nuw nsw i64 %1067, 2
  %1095 = icmp eq i64 %1094, 16
  br i1 %1095, label %1096, label %1066, !llvm.loop !1407

1096:                                             ; preds = %1066, %1030
  %1097 = phi i16* [ %1035, %1030 ], [ %1085, %1066 ]
  %1098 = getelementptr inbounds i16, i16* %1097, i64 %23
  %1099 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 64
  %1100 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 64
  %1101 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 80
  %1102 = add nuw nsw i64 %23, 17
  %1103 = getelementptr i16, i16* %1097, i64 %1102
  %1104 = icmp ult i16* %1100, %1103
  %1105 = icmp ult i16* %1098, %1101
  %1106 = and i1 %1104, %1105
  br i1 %1106, label %1143, label %1107

1107:                                             ; preds = %1096
  %1108 = insertelement <8 x i32> undef, i32 %25, i32 0
  %1109 = shufflevector <8 x i32> %1108, <8 x i32> undef, <8 x i32> zeroinitializer
  %1110 = insertelement <8 x i32> undef, i32 %27, i32 0
  %1111 = shufflevector <8 x i32> %1110, <8 x i32> undef, <8 x i32> zeroinitializer
  %1112 = getelementptr i16, i16* %1098, i64 16
  %1113 = bitcast i16* %1098 to <8 x i16>*
  %1114 = load <8 x i16>, <8 x i16>* %1113, align 2, !alias.scope !1408
  %1115 = zext <8 x i16> %1114 to <8 x i32>
  %1116 = mul nuw nsw <8 x i32> %1109, %1115
  %1117 = getelementptr inbounds i16, i16* %1098, i64 1
  %1118 = bitcast i16* %1117 to <8 x i16>*
  %1119 = load <8 x i16>, <8 x i16>* %1118, align 2, !alias.scope !1408
  %1120 = zext <8 x i16> %1119 to <8 x i32>
  %1121 = mul nuw nsw <8 x i32> %1111, %1120
  %1122 = add nuw nsw <8 x i32> %1116, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %1123 = add nuw nsw <8 x i32> %1122, %1121
  %1124 = lshr <8 x i32> %1123, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %1125 = trunc <8 x i32> %1124 to <8 x i16>
  %1126 = bitcast i16* %1099 to <8 x i16>*
  store <8 x i16> %1125, <8 x i16>* %1126, align 16, !alias.scope !1411, !noalias !1408
  %1127 = getelementptr i16, i16* %1098, i64 8
  %1128 = bitcast i16* %1127 to <8 x i16>*
  %1129 = load <8 x i16>, <8 x i16>* %1128, align 2, !alias.scope !1408
  %1130 = zext <8 x i16> %1129 to <8 x i32>
  %1131 = mul nuw nsw <8 x i32> %1109, %1130
  %1132 = getelementptr inbounds i16, i16* %1127, i64 1
  %1133 = bitcast i16* %1132 to <8 x i16>*
  %1134 = load <8 x i16>, <8 x i16>* %1133, align 2, !alias.scope !1408
  %1135 = zext <8 x i16> %1134 to <8 x i32>
  %1136 = mul nuw nsw <8 x i32> %1111, %1135
  %1137 = add nuw nsw <8 x i32> %1131, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %1138 = add nuw nsw <8 x i32> %1137, %1136
  %1139 = lshr <8 x i32> %1138, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %1140 = trunc <8 x i32> %1139 to <8 x i16>
  %1141 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 72
  %1142 = bitcast i16* %1141 to <8 x i16>*
  store <8 x i16> %1140, <8 x i16>* %1142, align 16, !alias.scope !1411, !noalias !1408
  br label %1173

1143:                                             ; preds = %1096, %1143
  %1144 = phi i64 [ %1171, %1143 ], [ 0, %1096 ]
  %1145 = phi i16* [ %1162, %1143 ], [ %1098, %1096 ]
  %1146 = load i16, i16* %1145, align 2
  %1147 = zext i16 %1146 to i32
  %1148 = mul nuw nsw i32 %25, %1147
  %1149 = getelementptr inbounds i16, i16* %1145, i64 1
  %1150 = load i16, i16* %1149, align 2
  %1151 = zext i16 %1150 to i32
  %1152 = mul nuw nsw i32 %27, %1151
  %1153 = add nuw nsw i32 %1148, 64
  %1154 = add nuw nsw i32 %1153, %1152
  %1155 = lshr i32 %1154, 7
  %1156 = trunc i32 %1155 to i16
  %1157 = getelementptr inbounds i16, i16* %1099, i64 %1144
  store i16 %1156, i16* %1157, align 4
  %1158 = or i64 %1144, 1
  %1159 = load i16, i16* %1149, align 2
  %1160 = zext i16 %1159 to i32
  %1161 = mul nuw nsw i32 %25, %1160
  %1162 = getelementptr inbounds i16, i16* %1145, i64 2
  %1163 = load i16, i16* %1162, align 2
  %1164 = zext i16 %1163 to i32
  %1165 = mul nuw nsw i32 %27, %1164
  %1166 = add nuw nsw i32 %1161, 64
  %1167 = add nuw nsw i32 %1166, %1165
  %1168 = lshr i32 %1167, 7
  %1169 = trunc i32 %1168 to i16
  %1170 = getelementptr inbounds i16, i16* %1099, i64 %1158
  store i16 %1169, i16* %1170, align 2
  %1171 = add nuw nsw i64 %1144, 2
  %1172 = icmp eq i64 %1171, 16
  br i1 %1172, label %1173, label %1143, !llvm.loop !1413

1173:                                             ; preds = %1143, %1107
  %1174 = phi i16* [ %1112, %1107 ], [ %1162, %1143 ]
  %1175 = getelementptr inbounds i16, i16* %1174, i64 %23
  %1176 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 80
  %1177 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 80
  %1178 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 96
  %1179 = add nuw nsw i64 %23, 17
  %1180 = getelementptr i16, i16* %1174, i64 %1179
  %1181 = icmp ult i16* %1177, %1180
  %1182 = icmp ult i16* %1175, %1178
  %1183 = and i1 %1181, %1182
  br i1 %1183, label %1220, label %1184

1184:                                             ; preds = %1173
  %1185 = insertelement <8 x i32> undef, i32 %25, i32 0
  %1186 = shufflevector <8 x i32> %1185, <8 x i32> undef, <8 x i32> zeroinitializer
  %1187 = insertelement <8 x i32> undef, i32 %27, i32 0
  %1188 = shufflevector <8 x i32> %1187, <8 x i32> undef, <8 x i32> zeroinitializer
  %1189 = getelementptr i16, i16* %1175, i64 16
  %1190 = bitcast i16* %1175 to <8 x i16>*
  %1191 = load <8 x i16>, <8 x i16>* %1190, align 2, !alias.scope !1414
  %1192 = zext <8 x i16> %1191 to <8 x i32>
  %1193 = mul nuw nsw <8 x i32> %1186, %1192
  %1194 = getelementptr inbounds i16, i16* %1175, i64 1
  %1195 = bitcast i16* %1194 to <8 x i16>*
  %1196 = load <8 x i16>, <8 x i16>* %1195, align 2, !alias.scope !1414
  %1197 = zext <8 x i16> %1196 to <8 x i32>
  %1198 = mul nuw nsw <8 x i32> %1188, %1197
  %1199 = add nuw nsw <8 x i32> %1193, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %1200 = add nuw nsw <8 x i32> %1199, %1198
  %1201 = lshr <8 x i32> %1200, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %1202 = trunc <8 x i32> %1201 to <8 x i16>
  %1203 = bitcast i16* %1176 to <8 x i16>*
  store <8 x i16> %1202, <8 x i16>* %1203, align 16, !alias.scope !1417, !noalias !1414
  %1204 = getelementptr i16, i16* %1175, i64 8
  %1205 = bitcast i16* %1204 to <8 x i16>*
  %1206 = load <8 x i16>, <8 x i16>* %1205, align 2, !alias.scope !1414
  %1207 = zext <8 x i16> %1206 to <8 x i32>
  %1208 = mul nuw nsw <8 x i32> %1186, %1207
  %1209 = getelementptr inbounds i16, i16* %1204, i64 1
  %1210 = bitcast i16* %1209 to <8 x i16>*
  %1211 = load <8 x i16>, <8 x i16>* %1210, align 2, !alias.scope !1414
  %1212 = zext <8 x i16> %1211 to <8 x i32>
  %1213 = mul nuw nsw <8 x i32> %1188, %1212
  %1214 = add nuw nsw <8 x i32> %1208, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %1215 = add nuw nsw <8 x i32> %1214, %1213
  %1216 = lshr <8 x i32> %1215, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %1217 = trunc <8 x i32> %1216 to <8 x i16>
  %1218 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 88
  %1219 = bitcast i16* %1218 to <8 x i16>*
  store <8 x i16> %1217, <8 x i16>* %1219, align 16, !alias.scope !1417, !noalias !1414
  br label %1250

1220:                                             ; preds = %1173, %1220
  %1221 = phi i64 [ %1248, %1220 ], [ 0, %1173 ]
  %1222 = phi i16* [ %1239, %1220 ], [ %1175, %1173 ]
  %1223 = load i16, i16* %1222, align 2
  %1224 = zext i16 %1223 to i32
  %1225 = mul nuw nsw i32 %25, %1224
  %1226 = getelementptr inbounds i16, i16* %1222, i64 1
  %1227 = load i16, i16* %1226, align 2
  %1228 = zext i16 %1227 to i32
  %1229 = mul nuw nsw i32 %27, %1228
  %1230 = add nuw nsw i32 %1225, 64
  %1231 = add nuw nsw i32 %1230, %1229
  %1232 = lshr i32 %1231, 7
  %1233 = trunc i32 %1232 to i16
  %1234 = getelementptr inbounds i16, i16* %1176, i64 %1221
  store i16 %1233, i16* %1234, align 4
  %1235 = or i64 %1221, 1
  %1236 = load i16, i16* %1226, align 2
  %1237 = zext i16 %1236 to i32
  %1238 = mul nuw nsw i32 %25, %1237
  %1239 = getelementptr inbounds i16, i16* %1222, i64 2
  %1240 = load i16, i16* %1239, align 2
  %1241 = zext i16 %1240 to i32
  %1242 = mul nuw nsw i32 %27, %1241
  %1243 = add nuw nsw i32 %1238, 64
  %1244 = add nuw nsw i32 %1243, %1242
  %1245 = lshr i32 %1244, 7
  %1246 = trunc i32 %1245 to i16
  %1247 = getelementptr inbounds i16, i16* %1176, i64 %1235
  store i16 %1246, i16* %1247, align 2
  %1248 = add nuw nsw i64 %1221, 2
  %1249 = icmp eq i64 %1248, 16
  br i1 %1249, label %1250, label %1220, !llvm.loop !1419

1250:                                             ; preds = %1220, %1184
  %1251 = phi i16* [ %1189, %1184 ], [ %1239, %1220 ]
  %1252 = getelementptr inbounds i16, i16* %1251, i64 %23
  %1253 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 96
  %1254 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 96
  %1255 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 112
  %1256 = add nuw nsw i64 %23, 17
  %1257 = getelementptr i16, i16* %1251, i64 %1256
  %1258 = icmp ult i16* %1254, %1257
  %1259 = icmp ult i16* %1252, %1255
  %1260 = and i1 %1258, %1259
  br i1 %1260, label %1297, label %1261

1261:                                             ; preds = %1250
  %1262 = insertelement <8 x i32> undef, i32 %25, i32 0
  %1263 = shufflevector <8 x i32> %1262, <8 x i32> undef, <8 x i32> zeroinitializer
  %1264 = insertelement <8 x i32> undef, i32 %27, i32 0
  %1265 = shufflevector <8 x i32> %1264, <8 x i32> undef, <8 x i32> zeroinitializer
  %1266 = getelementptr i16, i16* %1252, i64 16
  %1267 = bitcast i16* %1252 to <8 x i16>*
  %1268 = load <8 x i16>, <8 x i16>* %1267, align 2, !alias.scope !1420
  %1269 = zext <8 x i16> %1268 to <8 x i32>
  %1270 = mul nuw nsw <8 x i32> %1263, %1269
  %1271 = getelementptr inbounds i16, i16* %1252, i64 1
  %1272 = bitcast i16* %1271 to <8 x i16>*
  %1273 = load <8 x i16>, <8 x i16>* %1272, align 2, !alias.scope !1420
  %1274 = zext <8 x i16> %1273 to <8 x i32>
  %1275 = mul nuw nsw <8 x i32> %1265, %1274
  %1276 = add nuw nsw <8 x i32> %1270, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %1277 = add nuw nsw <8 x i32> %1276, %1275
  %1278 = lshr <8 x i32> %1277, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %1279 = trunc <8 x i32> %1278 to <8 x i16>
  %1280 = bitcast i16* %1253 to <8 x i16>*
  store <8 x i16> %1279, <8 x i16>* %1280, align 16, !alias.scope !1423, !noalias !1420
  %1281 = getelementptr i16, i16* %1252, i64 8
  %1282 = bitcast i16* %1281 to <8 x i16>*
  %1283 = load <8 x i16>, <8 x i16>* %1282, align 2, !alias.scope !1420
  %1284 = zext <8 x i16> %1283 to <8 x i32>
  %1285 = mul nuw nsw <8 x i32> %1263, %1284
  %1286 = getelementptr inbounds i16, i16* %1281, i64 1
  %1287 = bitcast i16* %1286 to <8 x i16>*
  %1288 = load <8 x i16>, <8 x i16>* %1287, align 2, !alias.scope !1420
  %1289 = zext <8 x i16> %1288 to <8 x i32>
  %1290 = mul nuw nsw <8 x i32> %1265, %1289
  %1291 = add nuw nsw <8 x i32> %1285, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %1292 = add nuw nsw <8 x i32> %1291, %1290
  %1293 = lshr <8 x i32> %1292, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %1294 = trunc <8 x i32> %1293 to <8 x i16>
  %1295 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 104
  %1296 = bitcast i16* %1295 to <8 x i16>*
  store <8 x i16> %1294, <8 x i16>* %1296, align 16, !alias.scope !1423, !noalias !1420
  br label %1327

1297:                                             ; preds = %1250, %1297
  %1298 = phi i64 [ %1325, %1297 ], [ 0, %1250 ]
  %1299 = phi i16* [ %1316, %1297 ], [ %1252, %1250 ]
  %1300 = load i16, i16* %1299, align 2
  %1301 = zext i16 %1300 to i32
  %1302 = mul nuw nsw i32 %25, %1301
  %1303 = getelementptr inbounds i16, i16* %1299, i64 1
  %1304 = load i16, i16* %1303, align 2
  %1305 = zext i16 %1304 to i32
  %1306 = mul nuw nsw i32 %27, %1305
  %1307 = add nuw nsw i32 %1302, 64
  %1308 = add nuw nsw i32 %1307, %1306
  %1309 = lshr i32 %1308, 7
  %1310 = trunc i32 %1309 to i16
  %1311 = getelementptr inbounds i16, i16* %1253, i64 %1298
  store i16 %1310, i16* %1311, align 4
  %1312 = or i64 %1298, 1
  %1313 = load i16, i16* %1303, align 2
  %1314 = zext i16 %1313 to i32
  %1315 = mul nuw nsw i32 %25, %1314
  %1316 = getelementptr inbounds i16, i16* %1299, i64 2
  %1317 = load i16, i16* %1316, align 2
  %1318 = zext i16 %1317 to i32
  %1319 = mul nuw nsw i32 %27, %1318
  %1320 = add nuw nsw i32 %1315, 64
  %1321 = add nuw nsw i32 %1320, %1319
  %1322 = lshr i32 %1321, 7
  %1323 = trunc i32 %1322 to i16
  %1324 = getelementptr inbounds i16, i16* %1253, i64 %1312
  store i16 %1323, i16* %1324, align 2
  %1325 = add nuw nsw i64 %1298, 2
  %1326 = icmp eq i64 %1325, 16
  br i1 %1326, label %1327, label %1297, !llvm.loop !1425

1327:                                             ; preds = %1297, %1261
  %1328 = phi i16* [ %1266, %1261 ], [ %1316, %1297 ]
  %1329 = getelementptr inbounds i16, i16* %1328, i64 %23
  %1330 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 112
  %1331 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 112
  %1332 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 128
  %1333 = add nuw nsw i64 %23, 17
  %1334 = getelementptr i16, i16* %1328, i64 %1333
  %1335 = icmp ult i16* %1331, %1334
  %1336 = icmp ult i16* %1329, %1332
  %1337 = and i1 %1335, %1336
  br i1 %1337, label %1374, label %1338

1338:                                             ; preds = %1327
  %1339 = insertelement <8 x i32> undef, i32 %25, i32 0
  %1340 = shufflevector <8 x i32> %1339, <8 x i32> undef, <8 x i32> zeroinitializer
  %1341 = insertelement <8 x i32> undef, i32 %27, i32 0
  %1342 = shufflevector <8 x i32> %1341, <8 x i32> undef, <8 x i32> zeroinitializer
  %1343 = getelementptr i16, i16* %1329, i64 16
  %1344 = bitcast i16* %1329 to <8 x i16>*
  %1345 = load <8 x i16>, <8 x i16>* %1344, align 2, !alias.scope !1426
  %1346 = zext <8 x i16> %1345 to <8 x i32>
  %1347 = mul nuw nsw <8 x i32> %1340, %1346
  %1348 = getelementptr inbounds i16, i16* %1329, i64 1
  %1349 = bitcast i16* %1348 to <8 x i16>*
  %1350 = load <8 x i16>, <8 x i16>* %1349, align 2, !alias.scope !1426
  %1351 = zext <8 x i16> %1350 to <8 x i32>
  %1352 = mul nuw nsw <8 x i32> %1342, %1351
  %1353 = add nuw nsw <8 x i32> %1347, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %1354 = add nuw nsw <8 x i32> %1353, %1352
  %1355 = lshr <8 x i32> %1354, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %1356 = trunc <8 x i32> %1355 to <8 x i16>
  %1357 = bitcast i16* %1330 to <8 x i16>*
  store <8 x i16> %1356, <8 x i16>* %1357, align 16, !alias.scope !1429, !noalias !1426
  %1358 = getelementptr i16, i16* %1329, i64 8
  %1359 = bitcast i16* %1358 to <8 x i16>*
  %1360 = load <8 x i16>, <8 x i16>* %1359, align 2, !alias.scope !1426
  %1361 = zext <8 x i16> %1360 to <8 x i32>
  %1362 = mul nuw nsw <8 x i32> %1340, %1361
  %1363 = getelementptr inbounds i16, i16* %1358, i64 1
  %1364 = bitcast i16* %1363 to <8 x i16>*
  %1365 = load <8 x i16>, <8 x i16>* %1364, align 2, !alias.scope !1426
  %1366 = zext <8 x i16> %1365 to <8 x i32>
  %1367 = mul nuw nsw <8 x i32> %1342, %1366
  %1368 = add nuw nsw <8 x i32> %1362, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %1369 = add nuw nsw <8 x i32> %1368, %1367
  %1370 = lshr <8 x i32> %1369, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %1371 = trunc <8 x i32> %1370 to <8 x i16>
  %1372 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 120
  %1373 = bitcast i16* %1372 to <8 x i16>*
  store <8 x i16> %1371, <8 x i16>* %1373, align 16, !alias.scope !1429, !noalias !1426
  br label %1404

1374:                                             ; preds = %1327, %1374
  %1375 = phi i64 [ %1402, %1374 ], [ 0, %1327 ]
  %1376 = phi i16* [ %1393, %1374 ], [ %1329, %1327 ]
  %1377 = load i16, i16* %1376, align 2
  %1378 = zext i16 %1377 to i32
  %1379 = mul nuw nsw i32 %25, %1378
  %1380 = getelementptr inbounds i16, i16* %1376, i64 1
  %1381 = load i16, i16* %1380, align 2
  %1382 = zext i16 %1381 to i32
  %1383 = mul nuw nsw i32 %27, %1382
  %1384 = add nuw nsw i32 %1379, 64
  %1385 = add nuw nsw i32 %1384, %1383
  %1386 = lshr i32 %1385, 7
  %1387 = trunc i32 %1386 to i16
  %1388 = getelementptr inbounds i16, i16* %1330, i64 %1375
  store i16 %1387, i16* %1388, align 4
  %1389 = or i64 %1375, 1
  %1390 = load i16, i16* %1380, align 2
  %1391 = zext i16 %1390 to i32
  %1392 = mul nuw nsw i32 %25, %1391
  %1393 = getelementptr inbounds i16, i16* %1376, i64 2
  %1394 = load i16, i16* %1393, align 2
  %1395 = zext i16 %1394 to i32
  %1396 = mul nuw nsw i32 %27, %1395
  %1397 = add nuw nsw i32 %1392, 64
  %1398 = add nuw nsw i32 %1397, %1396
  %1399 = lshr i32 %1398, 7
  %1400 = trunc i32 %1399 to i16
  %1401 = getelementptr inbounds i16, i16* %1330, i64 %1389
  store i16 %1400, i16* %1401, align 2
  %1402 = add nuw nsw i64 %1375, 2
  %1403 = icmp eq i64 %1402, 16
  br i1 %1403, label %1404, label %1374, !llvm.loop !1431

1404:                                             ; preds = %1374, %1338
  %1405 = phi i16* [ %1343, %1338 ], [ %1393, %1374 ]
  %1406 = getelementptr inbounds i16, i16* %1405, i64 %23
  %1407 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 128
  %1408 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 128
  %1409 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 1, i64 0
  %1410 = add nuw nsw i64 %23, 17
  %1411 = getelementptr i16, i16* %1405, i64 %1410
  %1412 = icmp ult i16* %1408, %1411
  %1413 = icmp ult i16* %1406, %1409
  %1414 = and i1 %1412, %1413
  br i1 %1414, label %1450, label %1415

1415:                                             ; preds = %1404
  %1416 = insertelement <8 x i32> undef, i32 %25, i32 0
  %1417 = shufflevector <8 x i32> %1416, <8 x i32> undef, <8 x i32> zeroinitializer
  %1418 = insertelement <8 x i32> undef, i32 %27, i32 0
  %1419 = shufflevector <8 x i32> %1418, <8 x i32> undef, <8 x i32> zeroinitializer
  %1420 = bitcast i16* %1406 to <8 x i16>*
  %1421 = load <8 x i16>, <8 x i16>* %1420, align 2, !alias.scope !1432
  %1422 = zext <8 x i16> %1421 to <8 x i32>
  %1423 = mul nuw nsw <8 x i32> %1417, %1422
  %1424 = getelementptr inbounds i16, i16* %1406, i64 1
  %1425 = bitcast i16* %1424 to <8 x i16>*
  %1426 = load <8 x i16>, <8 x i16>* %1425, align 2, !alias.scope !1432
  %1427 = zext <8 x i16> %1426 to <8 x i32>
  %1428 = mul nuw nsw <8 x i32> %1419, %1427
  %1429 = add nuw nsw <8 x i32> %1423, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %1430 = add nuw nsw <8 x i32> %1429, %1428
  %1431 = lshr <8 x i32> %1430, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %1432 = trunc <8 x i32> %1431 to <8 x i16>
  %1433 = bitcast i16* %1407 to <8 x i16>*
  store <8 x i16> %1432, <8 x i16>* %1433, align 16, !alias.scope !1435, !noalias !1432
  %1434 = getelementptr i16, i16* %1406, i64 8
  %1435 = bitcast i16* %1434 to <8 x i16>*
  %1436 = load <8 x i16>, <8 x i16>* %1435, align 2, !alias.scope !1432
  %1437 = zext <8 x i16> %1436 to <8 x i32>
  %1438 = mul nuw nsw <8 x i32> %1417, %1437
  %1439 = getelementptr inbounds i16, i16* %1434, i64 1
  %1440 = bitcast i16* %1439 to <8 x i16>*
  %1441 = load <8 x i16>, <8 x i16>* %1440, align 2, !alias.scope !1432
  %1442 = zext <8 x i16> %1441 to <8 x i32>
  %1443 = mul nuw nsw <8 x i32> %1419, %1442
  %1444 = add nuw nsw <8 x i32> %1438, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %1445 = add nuw nsw <8 x i32> %1444, %1443
  %1446 = lshr <8 x i32> %1445, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %1447 = trunc <8 x i32> %1446 to <8 x i16>
  %1448 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 136
  %1449 = bitcast i16* %1448 to <8 x i16>*
  store <8 x i16> %1447, <8 x i16>* %1449, align 16, !alias.scope !1435, !noalias !1432
  br label %1480

1450:                                             ; preds = %1404, %1450
  %1451 = phi i64 [ %1478, %1450 ], [ 0, %1404 ]
  %1452 = phi i16* [ %1469, %1450 ], [ %1406, %1404 ]
  %1453 = load i16, i16* %1452, align 2
  %1454 = zext i16 %1453 to i32
  %1455 = mul nuw nsw i32 %25, %1454
  %1456 = getelementptr inbounds i16, i16* %1452, i64 1
  %1457 = load i16, i16* %1456, align 2
  %1458 = zext i16 %1457 to i32
  %1459 = mul nuw nsw i32 %27, %1458
  %1460 = add nuw nsw i32 %1455, 64
  %1461 = add nuw nsw i32 %1460, %1459
  %1462 = lshr i32 %1461, 7
  %1463 = trunc i32 %1462 to i16
  %1464 = getelementptr inbounds i16, i16* %1407, i64 %1451
  store i16 %1463, i16* %1464, align 4
  %1465 = or i64 %1451, 1
  %1466 = load i16, i16* %1456, align 2
  %1467 = zext i16 %1466 to i32
  %1468 = mul nuw nsw i32 %25, %1467
  %1469 = getelementptr inbounds i16, i16* %1452, i64 2
  %1470 = load i16, i16* %1469, align 2
  %1471 = zext i16 %1470 to i32
  %1472 = mul nuw nsw i32 %27, %1471
  %1473 = add nuw nsw i32 %1468, 64
  %1474 = add nuw nsw i32 %1473, %1472
  %1475 = lshr i32 %1474, 7
  %1476 = trunc i32 %1475 to i16
  %1477 = getelementptr inbounds i16, i16* %1407, i64 %1465
  store i16 %1476, i16* %1477, align 2
  %1478 = add nuw nsw i64 %1451, 2
  %1479 = icmp eq i64 %1478, 16
  br i1 %1479, label %1480, label %1450, !llvm.loop !1437

1480:                                             ; preds = %1450, %1415
  %1481 = getelementptr inbounds [128 x i16], [128 x i16]* %11, i64 0, i64 0
  %1482 = sext i32 %3 to i64
  %1483 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %1482, i64 0
  %1484 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %1482, i64 1
  %1485 = load i8, i8* %1483, align 2
  %1486 = zext i8 %1485 to i32
  %1487 = load i8, i8* %1484, align 1
  %1488 = zext i8 %1487 to i32
  %1489 = getelementptr inbounds [128 x i16], [128 x i16]* %11, i64 0, i64 16
  %1490 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 32
  %1491 = bitcast i16* %1490 to [128 x i16]*
  %1492 = icmp ult [128 x i16]* %11, %1491
  %1493 = bitcast i16* %1489 to [144 x i16]*
  %1494 = icmp ult [144 x i16]* %9, %1493
  %1495 = and i1 %1492, %1494
  br i1 %1495, label %149, label %1496

1496:                                             ; preds = %1480
  %1497 = insertelement <8 x i32> undef, i32 %1486, i32 0
  %1498 = shufflevector <8 x i32> %1497, <8 x i32> undef, <8 x i32> zeroinitializer
  %1499 = insertelement <8 x i32> undef, i32 %1488, i32 0
  %1500 = shufflevector <8 x i32> %1499, <8 x i32> undef, <8 x i32> zeroinitializer
  %1501 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 16
  %1502 = bitcast [144 x i16]* %9 to <8 x i16>*
  %1503 = load <8 x i16>, <8 x i16>* %1502, align 16, !alias.scope !1438
  %1504 = zext <8 x i16> %1503 to <8 x i32>
  %1505 = mul nuw nsw <8 x i32> %1498, %1504
  %1506 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 16
  %1507 = bitcast i16* %1506 to <8 x i16>*
  %1508 = load <8 x i16>, <8 x i16>* %1507, align 16, !alias.scope !1438
  %1509 = zext <8 x i16> %1508 to <8 x i32>
  %1510 = mul nuw nsw <8 x i32> %1500, %1509
  %1511 = add nuw nsw <8 x i32> %1505, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %1512 = add nuw nsw <8 x i32> %1511, %1510
  %1513 = lshr <8 x i32> %1512, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %1514 = trunc <8 x i32> %1513 to <8 x i16>
  %1515 = bitcast [128 x i16]* %11 to <8 x i16>*
  store <8 x i16> %1514, <8 x i16>* %1515, align 16, !alias.scope !1441, !noalias !1438
  %1516 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 8
  %1517 = bitcast i16* %1516 to <8 x i16>*
  %1518 = load <8 x i16>, <8 x i16>* %1517, align 16, !alias.scope !1438
  %1519 = zext <8 x i16> %1518 to <8 x i32>
  %1520 = mul nuw nsw <8 x i32> %1498, %1519
  %1521 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 24
  %1522 = bitcast i16* %1521 to <8 x i16>*
  %1523 = load <8 x i16>, <8 x i16>* %1522, align 16, !alias.scope !1438
  %1524 = zext <8 x i16> %1523 to <8 x i32>
  %1525 = mul nuw nsw <8 x i32> %1500, %1524
  %1526 = add nuw nsw <8 x i32> %1520, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %1527 = add nuw nsw <8 x i32> %1526, %1525
  %1528 = lshr <8 x i32> %1527, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %1529 = trunc <8 x i32> %1528 to <8 x i16>
  %1530 = getelementptr inbounds [128 x i16], [128 x i16]* %11, i64 0, i64 8
  %1531 = bitcast i16* %1530 to <8 x i16>*
  store <8 x i16> %1529, <8 x i16>* %1531, align 16, !alias.scope !1441, !noalias !1438
  br label %181
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_highbd_10_sub_pixel_avg_variance16x8_c(i8*, i32, i32, i32, i8*, i32, i32* nocapture, i8*) local_unnamed_addr #2 {
  %9 = alloca [144 x i16], align 16
  %10 = bitcast [144 x i16]* %9 to i8*
  %11 = alloca [128 x i16], align 16
  %12 = bitcast [128 x i16]* %11 to i8*
  %13 = alloca [128 x i16], align 16
  call void @llvm.lifetime.start.p0i8(i64 288, i8* nonnull %10) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %10, i8 -86, i64 288, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %12) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %12, i8 -86, i64 256, i1 false)
  %14 = bitcast [128 x i16]* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %14) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %14, i8 -86, i64 256, i1 false)
  %15 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 0
  %16 = sext i32 %2 to i64
  %17 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %16, i64 0
  %18 = ptrtoint i8* %0 to i64
  %19 = shl i64 %18, 1
  %20 = inttoptr i64 %19 to i16*
  %21 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %16, i64 1
  %22 = add i32 %1, -16
  %23 = zext i32 %22 to i64
  %24 = load i8, i8* %17, align 2
  %25 = zext i8 %24 to i32
  %26 = load i8, i8* %21, align 1
  %27 = zext i8 %26 to i32
  %28 = inttoptr i64 %19 to i8*
  %29 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 16
  %30 = bitcast i16* %29 to i8*
  %31 = getelementptr i16, i16* %20, i64 17
  %32 = bitcast i16* %31 to [144 x i16]*
  %33 = icmp ult [144 x i16]* %9, %32
  %34 = icmp ult i8* %28, %30
  %35 = and i1 %33, %34
  br i1 %35, label %72, label %36

36:                                               ; preds = %8
  %37 = insertelement <8 x i32> undef, i32 %25, i32 0
  %38 = shufflevector <8 x i32> %37, <8 x i32> undef, <8 x i32> zeroinitializer
  %39 = insertelement <8 x i32> undef, i32 %27, i32 0
  %40 = shufflevector <8 x i32> %39, <8 x i32> undef, <8 x i32> zeroinitializer
  %41 = getelementptr i16, i16* %20, i64 16
  %42 = inttoptr i64 %19 to <8 x i16>*
  %43 = load <8 x i16>, <8 x i16>* %42, align 2, !alias.scope !1443
  %44 = zext <8 x i16> %43 to <8 x i32>
  %45 = mul nuw nsw <8 x i32> %38, %44
  %46 = getelementptr inbounds i16, i16* %20, i64 1
  %47 = bitcast i16* %46 to <8 x i16>*
  %48 = load <8 x i16>, <8 x i16>* %47, align 2, !alias.scope !1443
  %49 = zext <8 x i16> %48 to <8 x i32>
  %50 = mul nuw nsw <8 x i32> %40, %49
  %51 = add nuw nsw <8 x i32> %45, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %52 = add nuw nsw <8 x i32> %51, %50
  %53 = lshr <8 x i32> %52, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %54 = trunc <8 x i32> %53 to <8 x i16>
  %55 = bitcast [144 x i16]* %9 to <8 x i16>*
  store <8 x i16> %54, <8 x i16>* %55, align 16, !alias.scope !1446, !noalias !1443
  %56 = getelementptr i16, i16* %20, i64 8
  %57 = bitcast i16* %56 to <8 x i16>*
  %58 = load <8 x i16>, <8 x i16>* %57, align 2, !alias.scope !1443
  %59 = zext <8 x i16> %58 to <8 x i32>
  %60 = mul nuw nsw <8 x i32> %38, %59
  %61 = getelementptr inbounds i16, i16* %20, i64 9
  %62 = bitcast i16* %61 to <8 x i16>*
  %63 = load <8 x i16>, <8 x i16>* %62, align 2, !alias.scope !1443
  %64 = zext <8 x i16> %63 to <8 x i32>
  %65 = mul nuw nsw <8 x i32> %40, %64
  %66 = add nuw nsw <8 x i32> %60, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %67 = add nuw nsw <8 x i32> %66, %65
  %68 = lshr <8 x i32> %67, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %69 = trunc <8 x i32> %68 to <8 x i16>
  %70 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 8
  %71 = bitcast i16* %70 to <8 x i16>*
  store <8 x i16> %69, <8 x i16>* %71, align 16, !alias.scope !1446, !noalias !1443
  br label %102

72:                                               ; preds = %8, %72
  %73 = phi i64 [ %100, %72 ], [ 0, %8 ]
  %74 = phi i16* [ %91, %72 ], [ %20, %8 ]
  %75 = load i16, i16* %74, align 2
  %76 = zext i16 %75 to i32
  %77 = mul nuw nsw i32 %25, %76
  %78 = getelementptr inbounds i16, i16* %74, i64 1
  %79 = load i16, i16* %78, align 2
  %80 = zext i16 %79 to i32
  %81 = mul nuw nsw i32 %27, %80
  %82 = add nuw nsw i32 %77, 64
  %83 = add nuw nsw i32 %82, %81
  %84 = lshr i32 %83, 7
  %85 = trunc i32 %84 to i16
  %86 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 %73
  store i16 %85, i16* %86, align 4
  %87 = or i64 %73, 1
  %88 = load i16, i16* %78, align 2
  %89 = zext i16 %88 to i32
  %90 = mul nuw nsw i32 %25, %89
  %91 = getelementptr inbounds i16, i16* %74, i64 2
  %92 = load i16, i16* %91, align 2
  %93 = zext i16 %92 to i32
  %94 = mul nuw nsw i32 %27, %93
  %95 = add nuw nsw i32 %90, 64
  %96 = add nuw nsw i32 %95, %94
  %97 = lshr i32 %96, 7
  %98 = trunc i32 %97 to i16
  %99 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 %87
  store i16 %98, i16* %99, align 2
  %100 = add nuw nsw i64 %73, 2
  %101 = icmp eq i64 %100, 16
  br i1 %101, label %102, label %72, !llvm.loop !1448

102:                                              ; preds = %72, %36
  %103 = phi i16* [ %41, %36 ], [ %91, %72 ]
  %104 = getelementptr inbounds i16, i16* %103, i64 %23
  %105 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 16
  %106 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 16
  %107 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 32
  %108 = add nuw nsw i64 %23, 17
  %109 = getelementptr i16, i16* %103, i64 %108
  %110 = icmp ult i16* %106, %109
  %111 = icmp ult i16* %104, %107
  %112 = and i1 %110, %111
  br i1 %112, label %912, label %113

113:                                              ; preds = %102
  %114 = insertelement <8 x i32> undef, i32 %25, i32 0
  %115 = shufflevector <8 x i32> %114, <8 x i32> undef, <8 x i32> zeroinitializer
  %116 = insertelement <8 x i32> undef, i32 %27, i32 0
  %117 = shufflevector <8 x i32> %116, <8 x i32> undef, <8 x i32> zeroinitializer
  %118 = getelementptr i16, i16* %104, i64 16
  %119 = bitcast i16* %104 to <8 x i16>*
  %120 = load <8 x i16>, <8 x i16>* %119, align 2, !alias.scope !1449
  %121 = zext <8 x i16> %120 to <8 x i32>
  %122 = mul nuw nsw <8 x i32> %115, %121
  %123 = getelementptr inbounds i16, i16* %104, i64 1
  %124 = bitcast i16* %123 to <8 x i16>*
  %125 = load <8 x i16>, <8 x i16>* %124, align 2, !alias.scope !1449
  %126 = zext <8 x i16> %125 to <8 x i32>
  %127 = mul nuw nsw <8 x i32> %117, %126
  %128 = add nuw nsw <8 x i32> %122, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %129 = add nuw nsw <8 x i32> %128, %127
  %130 = lshr <8 x i32> %129, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %131 = trunc <8 x i32> %130 to <8 x i16>
  %132 = bitcast i16* %105 to <8 x i16>*
  store <8 x i16> %131, <8 x i16>* %132, align 16, !alias.scope !1452, !noalias !1449
  %133 = getelementptr i16, i16* %104, i64 8
  %134 = bitcast i16* %133 to <8 x i16>*
  %135 = load <8 x i16>, <8 x i16>* %134, align 2, !alias.scope !1449
  %136 = zext <8 x i16> %135 to <8 x i32>
  %137 = mul nuw nsw <8 x i32> %115, %136
  %138 = getelementptr inbounds i16, i16* %133, i64 1
  %139 = bitcast i16* %138 to <8 x i16>*
  %140 = load <8 x i16>, <8 x i16>* %139, align 2, !alias.scope !1449
  %141 = zext <8 x i16> %140 to <8 x i32>
  %142 = mul nuw nsw <8 x i32> %117, %141
  %143 = add nuw nsw <8 x i32> %137, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %144 = add nuw nsw <8 x i32> %143, %142
  %145 = lshr <8 x i32> %144, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %146 = trunc <8 x i32> %145 to <8 x i16>
  %147 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 24
  %148 = bitcast i16* %147 to <8 x i16>*
  store <8 x i16> %146, <8 x i16>* %148, align 16, !alias.scope !1452, !noalias !1449
  br label %942

149:                                              ; preds = %1480, %149
  %150 = phi i64 [ %179, %149 ], [ 0, %1480 ]
  %151 = phi i16* [ %178, %149 ], [ %15, %1480 ]
  %152 = load i16, i16* %151, align 2
  %153 = zext i16 %152 to i32
  %154 = mul nuw nsw i32 %1486, %153
  %155 = getelementptr inbounds i16, i16* %151, i64 16
  %156 = load i16, i16* %155, align 2
  %157 = zext i16 %156 to i32
  %158 = mul nuw nsw i32 %1488, %157
  %159 = add nuw nsw i32 %154, 64
  %160 = add nuw nsw i32 %159, %158
  %161 = lshr i32 %160, 7
  %162 = trunc i32 %161 to i16
  %163 = getelementptr inbounds [128 x i16], [128 x i16]* %11, i64 0, i64 %150
  store i16 %162, i16* %163, align 4
  %164 = getelementptr inbounds i16, i16* %151, i64 1
  %165 = or i64 %150, 1
  %166 = load i16, i16* %164, align 2
  %167 = zext i16 %166 to i32
  %168 = mul nuw nsw i32 %1486, %167
  %169 = getelementptr inbounds i16, i16* %151, i64 17
  %170 = load i16, i16* %169, align 2
  %171 = zext i16 %170 to i32
  %172 = mul nuw nsw i32 %1488, %171
  %173 = add nuw nsw i32 %168, 64
  %174 = add nuw nsw i32 %173, %172
  %175 = lshr i32 %174, 7
  %176 = trunc i32 %175 to i16
  %177 = getelementptr inbounds [128 x i16], [128 x i16]* %11, i64 0, i64 %165
  store i16 %176, i16* %177, align 2
  %178 = getelementptr inbounds i16, i16* %151, i64 2
  %179 = add nuw nsw i64 %150, 2
  %180 = icmp eq i64 %179, 16
  br i1 %180, label %181, label %149, !llvm.loop !1454

181:                                              ; preds = %149, %1496
  %182 = phi i16* [ %1501, %1496 ], [ %178, %149 ]
  %183 = getelementptr inbounds [128 x i16], [128 x i16]* %11, i64 0, i64 16
  %184 = getelementptr inbounds [128 x i16], [128 x i16]* %11, i64 0, i64 16
  %185 = getelementptr inbounds [128 x i16], [128 x i16]* %11, i64 0, i64 32
  %186 = getelementptr i16, i16* %182, i64 32
  %187 = icmp ult i16* %184, %186
  %188 = icmp ult i16* %182, %185
  %189 = and i1 %187, %188
  br i1 %189, label %414, label %190

190:                                              ; preds = %181
  %191 = insertelement <8 x i32> undef, i32 %1486, i32 0
  %192 = shufflevector <8 x i32> %191, <8 x i32> undef, <8 x i32> zeroinitializer
  %193 = insertelement <8 x i32> undef, i32 %1488, i32 0
  %194 = shufflevector <8 x i32> %193, <8 x i32> undef, <8 x i32> zeroinitializer
  %195 = getelementptr i16, i16* %182, i64 16
  %196 = bitcast i16* %182 to <8 x i16>*
  %197 = load <8 x i16>, <8 x i16>* %196, align 2, !alias.scope !1455
  %198 = zext <8 x i16> %197 to <8 x i32>
  %199 = mul nuw nsw <8 x i32> %192, %198
  %200 = getelementptr inbounds i16, i16* %182, i64 16
  %201 = bitcast i16* %200 to <8 x i16>*
  %202 = load <8 x i16>, <8 x i16>* %201, align 2, !alias.scope !1455
  %203 = zext <8 x i16> %202 to <8 x i32>
  %204 = mul nuw nsw <8 x i32> %194, %203
  %205 = add nuw nsw <8 x i32> %199, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %206 = add nuw nsw <8 x i32> %205, %204
  %207 = lshr <8 x i32> %206, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %208 = trunc <8 x i32> %207 to <8 x i16>
  %209 = bitcast i16* %183 to <8 x i16>*
  store <8 x i16> %208, <8 x i16>* %209, align 16, !alias.scope !1458, !noalias !1455
  %210 = getelementptr i16, i16* %182, i64 8
  %211 = bitcast i16* %210 to <8 x i16>*
  %212 = load <8 x i16>, <8 x i16>* %211, align 2, !alias.scope !1455
  %213 = zext <8 x i16> %212 to <8 x i32>
  %214 = mul nuw nsw <8 x i32> %192, %213
  %215 = getelementptr inbounds i16, i16* %182, i64 24
  %216 = bitcast i16* %215 to <8 x i16>*
  %217 = load <8 x i16>, <8 x i16>* %216, align 2, !alias.scope !1455
  %218 = zext <8 x i16> %217 to <8 x i32>
  %219 = mul nuw nsw <8 x i32> %194, %218
  %220 = add nuw nsw <8 x i32> %214, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %221 = add nuw nsw <8 x i32> %220, %219
  %222 = lshr <8 x i32> %221, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %223 = trunc <8 x i32> %222 to <8 x i16>
  %224 = getelementptr inbounds [128 x i16], [128 x i16]* %11, i64 0, i64 24
  %225 = bitcast i16* %224 to <8 x i16>*
  store <8 x i16> %223, <8 x i16>* %225, align 16, !alias.scope !1458, !noalias !1455
  br label %446

226:                                              ; preds = %226, %907
  %227 = phi i16* [ %908, %907 ], [ %404, %226 ]
  %228 = phi i32 [ 0, %907 ], [ %407, %226 ]
  %229 = phi i16* [ %911, %907 ], [ %405, %226 ]
  %230 = phi i16* [ %1481, %907 ], [ %406, %226 ]
  %231 = load i16, i16* %229, align 2
  %232 = zext i16 %231 to i32
  %233 = load i16, i16* %230, align 2
  %234 = zext i16 %233 to i32
  %235 = add nuw nsw i32 %232, 1
  %236 = add nuw nsw i32 %235, %234
  %237 = lshr i32 %236, 1
  %238 = trunc i32 %237 to i16
  store i16 %238, i16* %227, align 2
  %239 = getelementptr inbounds i16, i16* %229, i64 1
  %240 = load i16, i16* %239, align 2
  %241 = zext i16 %240 to i32
  %242 = getelementptr inbounds i16, i16* %230, i64 1
  %243 = load i16, i16* %242, align 2
  %244 = zext i16 %243 to i32
  %245 = add nuw nsw i32 %241, 1
  %246 = add nuw nsw i32 %245, %244
  %247 = lshr i32 %246, 1
  %248 = trunc i32 %247 to i16
  %249 = getelementptr inbounds i16, i16* %227, i64 1
  store i16 %248, i16* %249, align 2
  %250 = getelementptr inbounds i16, i16* %229, i64 2
  %251 = load i16, i16* %250, align 2
  %252 = zext i16 %251 to i32
  %253 = getelementptr inbounds i16, i16* %230, i64 2
  %254 = load i16, i16* %253, align 2
  %255 = zext i16 %254 to i32
  %256 = add nuw nsw i32 %252, 1
  %257 = add nuw nsw i32 %256, %255
  %258 = lshr i32 %257, 1
  %259 = trunc i32 %258 to i16
  %260 = getelementptr inbounds i16, i16* %227, i64 2
  store i16 %259, i16* %260, align 2
  %261 = getelementptr inbounds i16, i16* %229, i64 3
  %262 = load i16, i16* %261, align 2
  %263 = zext i16 %262 to i32
  %264 = getelementptr inbounds i16, i16* %230, i64 3
  %265 = load i16, i16* %264, align 2
  %266 = zext i16 %265 to i32
  %267 = add nuw nsw i32 %263, 1
  %268 = add nuw nsw i32 %267, %266
  %269 = lshr i32 %268, 1
  %270 = trunc i32 %269 to i16
  %271 = getelementptr inbounds i16, i16* %227, i64 3
  store i16 %270, i16* %271, align 2
  %272 = getelementptr inbounds i16, i16* %229, i64 4
  %273 = load i16, i16* %272, align 2
  %274 = zext i16 %273 to i32
  %275 = getelementptr inbounds i16, i16* %230, i64 4
  %276 = load i16, i16* %275, align 2
  %277 = zext i16 %276 to i32
  %278 = add nuw nsw i32 %274, 1
  %279 = add nuw nsw i32 %278, %277
  %280 = lshr i32 %279, 1
  %281 = trunc i32 %280 to i16
  %282 = getelementptr inbounds i16, i16* %227, i64 4
  store i16 %281, i16* %282, align 2
  %283 = getelementptr inbounds i16, i16* %229, i64 5
  %284 = load i16, i16* %283, align 2
  %285 = zext i16 %284 to i32
  %286 = getelementptr inbounds i16, i16* %230, i64 5
  %287 = load i16, i16* %286, align 2
  %288 = zext i16 %287 to i32
  %289 = add nuw nsw i32 %285, 1
  %290 = add nuw nsw i32 %289, %288
  %291 = lshr i32 %290, 1
  %292 = trunc i32 %291 to i16
  %293 = getelementptr inbounds i16, i16* %227, i64 5
  store i16 %292, i16* %293, align 2
  %294 = getelementptr inbounds i16, i16* %229, i64 6
  %295 = load i16, i16* %294, align 2
  %296 = zext i16 %295 to i32
  %297 = getelementptr inbounds i16, i16* %230, i64 6
  %298 = load i16, i16* %297, align 2
  %299 = zext i16 %298 to i32
  %300 = add nuw nsw i32 %296, 1
  %301 = add nuw nsw i32 %300, %299
  %302 = lshr i32 %301, 1
  %303 = trunc i32 %302 to i16
  %304 = getelementptr inbounds i16, i16* %227, i64 6
  store i16 %303, i16* %304, align 2
  %305 = getelementptr inbounds i16, i16* %229, i64 7
  %306 = load i16, i16* %305, align 2
  %307 = zext i16 %306 to i32
  %308 = getelementptr inbounds i16, i16* %230, i64 7
  %309 = load i16, i16* %308, align 2
  %310 = zext i16 %309 to i32
  %311 = add nuw nsw i32 %307, 1
  %312 = add nuw nsw i32 %311, %310
  %313 = lshr i32 %312, 1
  %314 = trunc i32 %313 to i16
  %315 = getelementptr inbounds i16, i16* %227, i64 7
  store i16 %314, i16* %315, align 2
  %316 = getelementptr inbounds i16, i16* %229, i64 8
  %317 = load i16, i16* %316, align 2
  %318 = zext i16 %317 to i32
  %319 = getelementptr inbounds i16, i16* %230, i64 8
  %320 = load i16, i16* %319, align 2
  %321 = zext i16 %320 to i32
  %322 = add nuw nsw i32 %318, 1
  %323 = add nuw nsw i32 %322, %321
  %324 = lshr i32 %323, 1
  %325 = trunc i32 %324 to i16
  %326 = getelementptr inbounds i16, i16* %227, i64 8
  store i16 %325, i16* %326, align 2
  %327 = getelementptr inbounds i16, i16* %229, i64 9
  %328 = load i16, i16* %327, align 2
  %329 = zext i16 %328 to i32
  %330 = getelementptr inbounds i16, i16* %230, i64 9
  %331 = load i16, i16* %330, align 2
  %332 = zext i16 %331 to i32
  %333 = add nuw nsw i32 %329, 1
  %334 = add nuw nsw i32 %333, %332
  %335 = lshr i32 %334, 1
  %336 = trunc i32 %335 to i16
  %337 = getelementptr inbounds i16, i16* %227, i64 9
  store i16 %336, i16* %337, align 2
  %338 = getelementptr inbounds i16, i16* %229, i64 10
  %339 = load i16, i16* %338, align 2
  %340 = zext i16 %339 to i32
  %341 = getelementptr inbounds i16, i16* %230, i64 10
  %342 = load i16, i16* %341, align 2
  %343 = zext i16 %342 to i32
  %344 = add nuw nsw i32 %340, 1
  %345 = add nuw nsw i32 %344, %343
  %346 = lshr i32 %345, 1
  %347 = trunc i32 %346 to i16
  %348 = getelementptr inbounds i16, i16* %227, i64 10
  store i16 %347, i16* %348, align 2
  %349 = getelementptr inbounds i16, i16* %229, i64 11
  %350 = load i16, i16* %349, align 2
  %351 = zext i16 %350 to i32
  %352 = getelementptr inbounds i16, i16* %230, i64 11
  %353 = load i16, i16* %352, align 2
  %354 = zext i16 %353 to i32
  %355 = add nuw nsw i32 %351, 1
  %356 = add nuw nsw i32 %355, %354
  %357 = lshr i32 %356, 1
  %358 = trunc i32 %357 to i16
  %359 = getelementptr inbounds i16, i16* %227, i64 11
  store i16 %358, i16* %359, align 2
  %360 = getelementptr inbounds i16, i16* %229, i64 12
  %361 = load i16, i16* %360, align 2
  %362 = zext i16 %361 to i32
  %363 = getelementptr inbounds i16, i16* %230, i64 12
  %364 = load i16, i16* %363, align 2
  %365 = zext i16 %364 to i32
  %366 = add nuw nsw i32 %362, 1
  %367 = add nuw nsw i32 %366, %365
  %368 = lshr i32 %367, 1
  %369 = trunc i32 %368 to i16
  %370 = getelementptr inbounds i16, i16* %227, i64 12
  store i16 %369, i16* %370, align 2
  %371 = getelementptr inbounds i16, i16* %229, i64 13
  %372 = load i16, i16* %371, align 2
  %373 = zext i16 %372 to i32
  %374 = getelementptr inbounds i16, i16* %230, i64 13
  %375 = load i16, i16* %374, align 2
  %376 = zext i16 %375 to i32
  %377 = add nuw nsw i32 %373, 1
  %378 = add nuw nsw i32 %377, %376
  %379 = lshr i32 %378, 1
  %380 = trunc i32 %379 to i16
  %381 = getelementptr inbounds i16, i16* %227, i64 13
  store i16 %380, i16* %381, align 2
  %382 = getelementptr inbounds i16, i16* %229, i64 14
  %383 = load i16, i16* %382, align 2
  %384 = zext i16 %383 to i32
  %385 = getelementptr inbounds i16, i16* %230, i64 14
  %386 = load i16, i16* %385, align 2
  %387 = zext i16 %386 to i32
  %388 = add nuw nsw i32 %384, 1
  %389 = add nuw nsw i32 %388, %387
  %390 = lshr i32 %389, 1
  %391 = trunc i32 %390 to i16
  %392 = getelementptr inbounds i16, i16* %227, i64 14
  store i16 %391, i16* %392, align 2
  %393 = getelementptr inbounds i16, i16* %229, i64 15
  %394 = load i16, i16* %393, align 2
  %395 = zext i16 %394 to i32
  %396 = getelementptr inbounds i16, i16* %230, i64 15
  %397 = load i16, i16* %396, align 2
  %398 = zext i16 %397 to i32
  %399 = add nuw nsw i32 %395, 1
  %400 = add nuw nsw i32 %399, %398
  %401 = lshr i32 %400, 1
  %402 = trunc i32 %401 to i16
  %403 = getelementptr inbounds i16, i16* %227, i64 15
  store i16 %402, i16* %403, align 2
  %404 = getelementptr inbounds i16, i16* %227, i64 16
  %405 = getelementptr inbounds i16, i16* %229, i64 16
  %406 = getelementptr inbounds i16, i16* %230, i64 16
  %407 = add nuw nsw i32 %228, 1
  %408 = icmp eq i32 %407, 8
  br i1 %408, label %409, label %226

409:                                              ; preds = %226
  %410 = ptrtoint [128 x i16]* %13 to i64
  %411 = lshr exact i64 %410, 1
  %412 = inttoptr i64 %411 to i8*
  %413 = call i32 @vpx_highbd_10_variance16x8_c(i8* nonnull %412, i32 16, i8* %4, i32 %5, i32* %6)
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %14) #4
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %12) #4
  call void @llvm.lifetime.end.p0i8(i64 288, i8* nonnull %10) #4
  ret i32 %413

414:                                              ; preds = %181, %414
  %415 = phi i64 [ %444, %414 ], [ 0, %181 ]
  %416 = phi i16* [ %443, %414 ], [ %182, %181 ]
  %417 = load i16, i16* %416, align 2
  %418 = zext i16 %417 to i32
  %419 = mul nuw nsw i32 %1486, %418
  %420 = getelementptr inbounds i16, i16* %416, i64 16
  %421 = load i16, i16* %420, align 2
  %422 = zext i16 %421 to i32
  %423 = mul nuw nsw i32 %1488, %422
  %424 = add nuw nsw i32 %419, 64
  %425 = add nuw nsw i32 %424, %423
  %426 = lshr i32 %425, 7
  %427 = trunc i32 %426 to i16
  %428 = getelementptr inbounds i16, i16* %183, i64 %415
  store i16 %427, i16* %428, align 4
  %429 = getelementptr inbounds i16, i16* %416, i64 1
  %430 = or i64 %415, 1
  %431 = load i16, i16* %429, align 2
  %432 = zext i16 %431 to i32
  %433 = mul nuw nsw i32 %1486, %432
  %434 = getelementptr inbounds i16, i16* %416, i64 17
  %435 = load i16, i16* %434, align 2
  %436 = zext i16 %435 to i32
  %437 = mul nuw nsw i32 %1488, %436
  %438 = add nuw nsw i32 %433, 64
  %439 = add nuw nsw i32 %438, %437
  %440 = lshr i32 %439, 7
  %441 = trunc i32 %440 to i16
  %442 = getelementptr inbounds i16, i16* %183, i64 %430
  store i16 %441, i16* %442, align 2
  %443 = getelementptr inbounds i16, i16* %416, i64 2
  %444 = add nuw nsw i64 %415, 2
  %445 = icmp eq i64 %444, 16
  br i1 %445, label %446, label %414, !llvm.loop !1460

446:                                              ; preds = %414, %190
  %447 = phi i16* [ %195, %190 ], [ %443, %414 ]
  %448 = getelementptr inbounds [128 x i16], [128 x i16]* %11, i64 0, i64 32
  %449 = getelementptr inbounds [128 x i16], [128 x i16]* %11, i64 0, i64 32
  %450 = getelementptr inbounds [128 x i16], [128 x i16]* %11, i64 0, i64 48
  %451 = getelementptr i16, i16* %447, i64 32
  %452 = icmp ult i16* %449, %451
  %453 = icmp ult i16* %447, %450
  %454 = and i1 %452, %453
  br i1 %454, label %491, label %455

455:                                              ; preds = %446
  %456 = insertelement <8 x i32> undef, i32 %1486, i32 0
  %457 = shufflevector <8 x i32> %456, <8 x i32> undef, <8 x i32> zeroinitializer
  %458 = insertelement <8 x i32> undef, i32 %1488, i32 0
  %459 = shufflevector <8 x i32> %458, <8 x i32> undef, <8 x i32> zeroinitializer
  %460 = getelementptr i16, i16* %447, i64 16
  %461 = bitcast i16* %447 to <8 x i16>*
  %462 = load <8 x i16>, <8 x i16>* %461, align 2, !alias.scope !1461
  %463 = zext <8 x i16> %462 to <8 x i32>
  %464 = mul nuw nsw <8 x i32> %457, %463
  %465 = getelementptr inbounds i16, i16* %447, i64 16
  %466 = bitcast i16* %465 to <8 x i16>*
  %467 = load <8 x i16>, <8 x i16>* %466, align 2, !alias.scope !1461
  %468 = zext <8 x i16> %467 to <8 x i32>
  %469 = mul nuw nsw <8 x i32> %459, %468
  %470 = add nuw nsw <8 x i32> %464, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %471 = add nuw nsw <8 x i32> %470, %469
  %472 = lshr <8 x i32> %471, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %473 = trunc <8 x i32> %472 to <8 x i16>
  %474 = bitcast i16* %448 to <8 x i16>*
  store <8 x i16> %473, <8 x i16>* %474, align 16, !alias.scope !1464, !noalias !1461
  %475 = getelementptr i16, i16* %447, i64 8
  %476 = bitcast i16* %475 to <8 x i16>*
  %477 = load <8 x i16>, <8 x i16>* %476, align 2, !alias.scope !1461
  %478 = zext <8 x i16> %477 to <8 x i32>
  %479 = mul nuw nsw <8 x i32> %457, %478
  %480 = getelementptr inbounds i16, i16* %447, i64 24
  %481 = bitcast i16* %480 to <8 x i16>*
  %482 = load <8 x i16>, <8 x i16>* %481, align 2, !alias.scope !1461
  %483 = zext <8 x i16> %482 to <8 x i32>
  %484 = mul nuw nsw <8 x i32> %459, %483
  %485 = add nuw nsw <8 x i32> %479, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %486 = add nuw nsw <8 x i32> %485, %484
  %487 = lshr <8 x i32> %486, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %488 = trunc <8 x i32> %487 to <8 x i16>
  %489 = getelementptr inbounds [128 x i16], [128 x i16]* %11, i64 0, i64 40
  %490 = bitcast i16* %489 to <8 x i16>*
  store <8 x i16> %488, <8 x i16>* %490, align 16, !alias.scope !1464, !noalias !1461
  br label %523

491:                                              ; preds = %446, %491
  %492 = phi i64 [ %521, %491 ], [ 0, %446 ]
  %493 = phi i16* [ %520, %491 ], [ %447, %446 ]
  %494 = load i16, i16* %493, align 2
  %495 = zext i16 %494 to i32
  %496 = mul nuw nsw i32 %1486, %495
  %497 = getelementptr inbounds i16, i16* %493, i64 16
  %498 = load i16, i16* %497, align 2
  %499 = zext i16 %498 to i32
  %500 = mul nuw nsw i32 %1488, %499
  %501 = add nuw nsw i32 %496, 64
  %502 = add nuw nsw i32 %501, %500
  %503 = lshr i32 %502, 7
  %504 = trunc i32 %503 to i16
  %505 = getelementptr inbounds i16, i16* %448, i64 %492
  store i16 %504, i16* %505, align 4
  %506 = getelementptr inbounds i16, i16* %493, i64 1
  %507 = or i64 %492, 1
  %508 = load i16, i16* %506, align 2
  %509 = zext i16 %508 to i32
  %510 = mul nuw nsw i32 %1486, %509
  %511 = getelementptr inbounds i16, i16* %493, i64 17
  %512 = load i16, i16* %511, align 2
  %513 = zext i16 %512 to i32
  %514 = mul nuw nsw i32 %1488, %513
  %515 = add nuw nsw i32 %510, 64
  %516 = add nuw nsw i32 %515, %514
  %517 = lshr i32 %516, 7
  %518 = trunc i32 %517 to i16
  %519 = getelementptr inbounds i16, i16* %448, i64 %507
  store i16 %518, i16* %519, align 2
  %520 = getelementptr inbounds i16, i16* %493, i64 2
  %521 = add nuw nsw i64 %492, 2
  %522 = icmp eq i64 %521, 16
  br i1 %522, label %523, label %491, !llvm.loop !1466

523:                                              ; preds = %491, %455
  %524 = phi i16* [ %460, %455 ], [ %520, %491 ]
  %525 = getelementptr inbounds [128 x i16], [128 x i16]* %11, i64 0, i64 48
  %526 = getelementptr inbounds [128 x i16], [128 x i16]* %11, i64 0, i64 48
  %527 = getelementptr inbounds [128 x i16], [128 x i16]* %11, i64 0, i64 64
  %528 = getelementptr i16, i16* %524, i64 32
  %529 = icmp ult i16* %526, %528
  %530 = icmp ult i16* %524, %527
  %531 = and i1 %529, %530
  br i1 %531, label %568, label %532

532:                                              ; preds = %523
  %533 = insertelement <8 x i32> undef, i32 %1486, i32 0
  %534 = shufflevector <8 x i32> %533, <8 x i32> undef, <8 x i32> zeroinitializer
  %535 = insertelement <8 x i32> undef, i32 %1488, i32 0
  %536 = shufflevector <8 x i32> %535, <8 x i32> undef, <8 x i32> zeroinitializer
  %537 = getelementptr i16, i16* %524, i64 16
  %538 = bitcast i16* %524 to <8 x i16>*
  %539 = load <8 x i16>, <8 x i16>* %538, align 2, !alias.scope !1467
  %540 = zext <8 x i16> %539 to <8 x i32>
  %541 = mul nuw nsw <8 x i32> %534, %540
  %542 = getelementptr inbounds i16, i16* %524, i64 16
  %543 = bitcast i16* %542 to <8 x i16>*
  %544 = load <8 x i16>, <8 x i16>* %543, align 2, !alias.scope !1467
  %545 = zext <8 x i16> %544 to <8 x i32>
  %546 = mul nuw nsw <8 x i32> %536, %545
  %547 = add nuw nsw <8 x i32> %541, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %548 = add nuw nsw <8 x i32> %547, %546
  %549 = lshr <8 x i32> %548, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %550 = trunc <8 x i32> %549 to <8 x i16>
  %551 = bitcast i16* %525 to <8 x i16>*
  store <8 x i16> %550, <8 x i16>* %551, align 16, !alias.scope !1470, !noalias !1467
  %552 = getelementptr i16, i16* %524, i64 8
  %553 = bitcast i16* %552 to <8 x i16>*
  %554 = load <8 x i16>, <8 x i16>* %553, align 2, !alias.scope !1467
  %555 = zext <8 x i16> %554 to <8 x i32>
  %556 = mul nuw nsw <8 x i32> %534, %555
  %557 = getelementptr inbounds i16, i16* %524, i64 24
  %558 = bitcast i16* %557 to <8 x i16>*
  %559 = load <8 x i16>, <8 x i16>* %558, align 2, !alias.scope !1467
  %560 = zext <8 x i16> %559 to <8 x i32>
  %561 = mul nuw nsw <8 x i32> %536, %560
  %562 = add nuw nsw <8 x i32> %556, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %563 = add nuw nsw <8 x i32> %562, %561
  %564 = lshr <8 x i32> %563, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %565 = trunc <8 x i32> %564 to <8 x i16>
  %566 = getelementptr inbounds [128 x i16], [128 x i16]* %11, i64 0, i64 56
  %567 = bitcast i16* %566 to <8 x i16>*
  store <8 x i16> %565, <8 x i16>* %567, align 16, !alias.scope !1470, !noalias !1467
  br label %600

568:                                              ; preds = %523, %568
  %569 = phi i64 [ %598, %568 ], [ 0, %523 ]
  %570 = phi i16* [ %597, %568 ], [ %524, %523 ]
  %571 = load i16, i16* %570, align 2
  %572 = zext i16 %571 to i32
  %573 = mul nuw nsw i32 %1486, %572
  %574 = getelementptr inbounds i16, i16* %570, i64 16
  %575 = load i16, i16* %574, align 2
  %576 = zext i16 %575 to i32
  %577 = mul nuw nsw i32 %1488, %576
  %578 = add nuw nsw i32 %573, 64
  %579 = add nuw nsw i32 %578, %577
  %580 = lshr i32 %579, 7
  %581 = trunc i32 %580 to i16
  %582 = getelementptr inbounds i16, i16* %525, i64 %569
  store i16 %581, i16* %582, align 4
  %583 = getelementptr inbounds i16, i16* %570, i64 1
  %584 = or i64 %569, 1
  %585 = load i16, i16* %583, align 2
  %586 = zext i16 %585 to i32
  %587 = mul nuw nsw i32 %1486, %586
  %588 = getelementptr inbounds i16, i16* %570, i64 17
  %589 = load i16, i16* %588, align 2
  %590 = zext i16 %589 to i32
  %591 = mul nuw nsw i32 %1488, %590
  %592 = add nuw nsw i32 %587, 64
  %593 = add nuw nsw i32 %592, %591
  %594 = lshr i32 %593, 7
  %595 = trunc i32 %594 to i16
  %596 = getelementptr inbounds i16, i16* %525, i64 %584
  store i16 %595, i16* %596, align 2
  %597 = getelementptr inbounds i16, i16* %570, i64 2
  %598 = add nuw nsw i64 %569, 2
  %599 = icmp eq i64 %598, 16
  br i1 %599, label %600, label %568, !llvm.loop !1472

600:                                              ; preds = %568, %532
  %601 = phi i16* [ %537, %532 ], [ %597, %568 ]
  %602 = getelementptr inbounds [128 x i16], [128 x i16]* %11, i64 0, i64 64
  %603 = getelementptr inbounds [128 x i16], [128 x i16]* %11, i64 0, i64 64
  %604 = getelementptr inbounds [128 x i16], [128 x i16]* %11, i64 0, i64 80
  %605 = getelementptr i16, i16* %601, i64 32
  %606 = icmp ult i16* %603, %605
  %607 = icmp ult i16* %601, %604
  %608 = and i1 %606, %607
  br i1 %608, label %645, label %609

609:                                              ; preds = %600
  %610 = insertelement <8 x i32> undef, i32 %1486, i32 0
  %611 = shufflevector <8 x i32> %610, <8 x i32> undef, <8 x i32> zeroinitializer
  %612 = insertelement <8 x i32> undef, i32 %1488, i32 0
  %613 = shufflevector <8 x i32> %612, <8 x i32> undef, <8 x i32> zeroinitializer
  %614 = getelementptr i16, i16* %601, i64 16
  %615 = bitcast i16* %601 to <8 x i16>*
  %616 = load <8 x i16>, <8 x i16>* %615, align 2, !alias.scope !1473
  %617 = zext <8 x i16> %616 to <8 x i32>
  %618 = mul nuw nsw <8 x i32> %611, %617
  %619 = getelementptr inbounds i16, i16* %601, i64 16
  %620 = bitcast i16* %619 to <8 x i16>*
  %621 = load <8 x i16>, <8 x i16>* %620, align 2, !alias.scope !1473
  %622 = zext <8 x i16> %621 to <8 x i32>
  %623 = mul nuw nsw <8 x i32> %613, %622
  %624 = add nuw nsw <8 x i32> %618, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %625 = add nuw nsw <8 x i32> %624, %623
  %626 = lshr <8 x i32> %625, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %627 = trunc <8 x i32> %626 to <8 x i16>
  %628 = bitcast i16* %602 to <8 x i16>*
  store <8 x i16> %627, <8 x i16>* %628, align 16, !alias.scope !1476, !noalias !1473
  %629 = getelementptr i16, i16* %601, i64 8
  %630 = bitcast i16* %629 to <8 x i16>*
  %631 = load <8 x i16>, <8 x i16>* %630, align 2, !alias.scope !1473
  %632 = zext <8 x i16> %631 to <8 x i32>
  %633 = mul nuw nsw <8 x i32> %611, %632
  %634 = getelementptr inbounds i16, i16* %601, i64 24
  %635 = bitcast i16* %634 to <8 x i16>*
  %636 = load <8 x i16>, <8 x i16>* %635, align 2, !alias.scope !1473
  %637 = zext <8 x i16> %636 to <8 x i32>
  %638 = mul nuw nsw <8 x i32> %613, %637
  %639 = add nuw nsw <8 x i32> %633, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %640 = add nuw nsw <8 x i32> %639, %638
  %641 = lshr <8 x i32> %640, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %642 = trunc <8 x i32> %641 to <8 x i16>
  %643 = getelementptr inbounds [128 x i16], [128 x i16]* %11, i64 0, i64 72
  %644 = bitcast i16* %643 to <8 x i16>*
  store <8 x i16> %642, <8 x i16>* %644, align 16, !alias.scope !1476, !noalias !1473
  br label %677

645:                                              ; preds = %600, %645
  %646 = phi i64 [ %675, %645 ], [ 0, %600 ]
  %647 = phi i16* [ %674, %645 ], [ %601, %600 ]
  %648 = load i16, i16* %647, align 2
  %649 = zext i16 %648 to i32
  %650 = mul nuw nsw i32 %1486, %649
  %651 = getelementptr inbounds i16, i16* %647, i64 16
  %652 = load i16, i16* %651, align 2
  %653 = zext i16 %652 to i32
  %654 = mul nuw nsw i32 %1488, %653
  %655 = add nuw nsw i32 %650, 64
  %656 = add nuw nsw i32 %655, %654
  %657 = lshr i32 %656, 7
  %658 = trunc i32 %657 to i16
  %659 = getelementptr inbounds i16, i16* %602, i64 %646
  store i16 %658, i16* %659, align 4
  %660 = getelementptr inbounds i16, i16* %647, i64 1
  %661 = or i64 %646, 1
  %662 = load i16, i16* %660, align 2
  %663 = zext i16 %662 to i32
  %664 = mul nuw nsw i32 %1486, %663
  %665 = getelementptr inbounds i16, i16* %647, i64 17
  %666 = load i16, i16* %665, align 2
  %667 = zext i16 %666 to i32
  %668 = mul nuw nsw i32 %1488, %667
  %669 = add nuw nsw i32 %664, 64
  %670 = add nuw nsw i32 %669, %668
  %671 = lshr i32 %670, 7
  %672 = trunc i32 %671 to i16
  %673 = getelementptr inbounds i16, i16* %602, i64 %661
  store i16 %672, i16* %673, align 2
  %674 = getelementptr inbounds i16, i16* %647, i64 2
  %675 = add nuw nsw i64 %646, 2
  %676 = icmp eq i64 %675, 16
  br i1 %676, label %677, label %645, !llvm.loop !1478

677:                                              ; preds = %645, %609
  %678 = phi i16* [ %614, %609 ], [ %674, %645 ]
  %679 = getelementptr inbounds [128 x i16], [128 x i16]* %11, i64 0, i64 80
  %680 = getelementptr inbounds [128 x i16], [128 x i16]* %11, i64 0, i64 80
  %681 = getelementptr inbounds [128 x i16], [128 x i16]* %11, i64 0, i64 96
  %682 = getelementptr i16, i16* %678, i64 32
  %683 = icmp ult i16* %680, %682
  %684 = icmp ult i16* %678, %681
  %685 = and i1 %683, %684
  br i1 %685, label %722, label %686

686:                                              ; preds = %677
  %687 = insertelement <8 x i32> undef, i32 %1486, i32 0
  %688 = shufflevector <8 x i32> %687, <8 x i32> undef, <8 x i32> zeroinitializer
  %689 = insertelement <8 x i32> undef, i32 %1488, i32 0
  %690 = shufflevector <8 x i32> %689, <8 x i32> undef, <8 x i32> zeroinitializer
  %691 = getelementptr i16, i16* %678, i64 16
  %692 = bitcast i16* %678 to <8 x i16>*
  %693 = load <8 x i16>, <8 x i16>* %692, align 2, !alias.scope !1479
  %694 = zext <8 x i16> %693 to <8 x i32>
  %695 = mul nuw nsw <8 x i32> %688, %694
  %696 = getelementptr inbounds i16, i16* %678, i64 16
  %697 = bitcast i16* %696 to <8 x i16>*
  %698 = load <8 x i16>, <8 x i16>* %697, align 2, !alias.scope !1479
  %699 = zext <8 x i16> %698 to <8 x i32>
  %700 = mul nuw nsw <8 x i32> %690, %699
  %701 = add nuw nsw <8 x i32> %695, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %702 = add nuw nsw <8 x i32> %701, %700
  %703 = lshr <8 x i32> %702, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %704 = trunc <8 x i32> %703 to <8 x i16>
  %705 = bitcast i16* %679 to <8 x i16>*
  store <8 x i16> %704, <8 x i16>* %705, align 16, !alias.scope !1482, !noalias !1479
  %706 = getelementptr i16, i16* %678, i64 8
  %707 = bitcast i16* %706 to <8 x i16>*
  %708 = load <8 x i16>, <8 x i16>* %707, align 2, !alias.scope !1479
  %709 = zext <8 x i16> %708 to <8 x i32>
  %710 = mul nuw nsw <8 x i32> %688, %709
  %711 = getelementptr inbounds i16, i16* %678, i64 24
  %712 = bitcast i16* %711 to <8 x i16>*
  %713 = load <8 x i16>, <8 x i16>* %712, align 2, !alias.scope !1479
  %714 = zext <8 x i16> %713 to <8 x i32>
  %715 = mul nuw nsw <8 x i32> %690, %714
  %716 = add nuw nsw <8 x i32> %710, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %717 = add nuw nsw <8 x i32> %716, %715
  %718 = lshr <8 x i32> %717, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %719 = trunc <8 x i32> %718 to <8 x i16>
  %720 = getelementptr inbounds [128 x i16], [128 x i16]* %11, i64 0, i64 88
  %721 = bitcast i16* %720 to <8 x i16>*
  store <8 x i16> %719, <8 x i16>* %721, align 16, !alias.scope !1482, !noalias !1479
  br label %754

722:                                              ; preds = %677, %722
  %723 = phi i64 [ %752, %722 ], [ 0, %677 ]
  %724 = phi i16* [ %751, %722 ], [ %678, %677 ]
  %725 = load i16, i16* %724, align 2
  %726 = zext i16 %725 to i32
  %727 = mul nuw nsw i32 %1486, %726
  %728 = getelementptr inbounds i16, i16* %724, i64 16
  %729 = load i16, i16* %728, align 2
  %730 = zext i16 %729 to i32
  %731 = mul nuw nsw i32 %1488, %730
  %732 = add nuw nsw i32 %727, 64
  %733 = add nuw nsw i32 %732, %731
  %734 = lshr i32 %733, 7
  %735 = trunc i32 %734 to i16
  %736 = getelementptr inbounds i16, i16* %679, i64 %723
  store i16 %735, i16* %736, align 4
  %737 = getelementptr inbounds i16, i16* %724, i64 1
  %738 = or i64 %723, 1
  %739 = load i16, i16* %737, align 2
  %740 = zext i16 %739 to i32
  %741 = mul nuw nsw i32 %1486, %740
  %742 = getelementptr inbounds i16, i16* %724, i64 17
  %743 = load i16, i16* %742, align 2
  %744 = zext i16 %743 to i32
  %745 = mul nuw nsw i32 %1488, %744
  %746 = add nuw nsw i32 %741, 64
  %747 = add nuw nsw i32 %746, %745
  %748 = lshr i32 %747, 7
  %749 = trunc i32 %748 to i16
  %750 = getelementptr inbounds i16, i16* %679, i64 %738
  store i16 %749, i16* %750, align 2
  %751 = getelementptr inbounds i16, i16* %724, i64 2
  %752 = add nuw nsw i64 %723, 2
  %753 = icmp eq i64 %752, 16
  br i1 %753, label %754, label %722, !llvm.loop !1484

754:                                              ; preds = %722, %686
  %755 = phi i16* [ %691, %686 ], [ %751, %722 ]
  %756 = getelementptr inbounds [128 x i16], [128 x i16]* %11, i64 0, i64 96
  %757 = getelementptr inbounds [128 x i16], [128 x i16]* %11, i64 0, i64 96
  %758 = getelementptr inbounds [128 x i16], [128 x i16]* %11, i64 0, i64 112
  %759 = getelementptr i16, i16* %755, i64 32
  %760 = icmp ult i16* %757, %759
  %761 = icmp ult i16* %755, %758
  %762 = and i1 %760, %761
  br i1 %762, label %799, label %763

763:                                              ; preds = %754
  %764 = insertelement <8 x i32> undef, i32 %1486, i32 0
  %765 = shufflevector <8 x i32> %764, <8 x i32> undef, <8 x i32> zeroinitializer
  %766 = insertelement <8 x i32> undef, i32 %1488, i32 0
  %767 = shufflevector <8 x i32> %766, <8 x i32> undef, <8 x i32> zeroinitializer
  %768 = getelementptr i16, i16* %755, i64 16
  %769 = bitcast i16* %755 to <8 x i16>*
  %770 = load <8 x i16>, <8 x i16>* %769, align 2, !alias.scope !1485
  %771 = zext <8 x i16> %770 to <8 x i32>
  %772 = mul nuw nsw <8 x i32> %765, %771
  %773 = getelementptr inbounds i16, i16* %755, i64 16
  %774 = bitcast i16* %773 to <8 x i16>*
  %775 = load <8 x i16>, <8 x i16>* %774, align 2, !alias.scope !1485
  %776 = zext <8 x i16> %775 to <8 x i32>
  %777 = mul nuw nsw <8 x i32> %767, %776
  %778 = add nuw nsw <8 x i32> %772, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %779 = add nuw nsw <8 x i32> %778, %777
  %780 = lshr <8 x i32> %779, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %781 = trunc <8 x i32> %780 to <8 x i16>
  %782 = bitcast i16* %756 to <8 x i16>*
  store <8 x i16> %781, <8 x i16>* %782, align 16, !alias.scope !1488, !noalias !1485
  %783 = getelementptr i16, i16* %755, i64 8
  %784 = bitcast i16* %783 to <8 x i16>*
  %785 = load <8 x i16>, <8 x i16>* %784, align 2, !alias.scope !1485
  %786 = zext <8 x i16> %785 to <8 x i32>
  %787 = mul nuw nsw <8 x i32> %765, %786
  %788 = getelementptr inbounds i16, i16* %755, i64 24
  %789 = bitcast i16* %788 to <8 x i16>*
  %790 = load <8 x i16>, <8 x i16>* %789, align 2, !alias.scope !1485
  %791 = zext <8 x i16> %790 to <8 x i32>
  %792 = mul nuw nsw <8 x i32> %767, %791
  %793 = add nuw nsw <8 x i32> %787, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %794 = add nuw nsw <8 x i32> %793, %792
  %795 = lshr <8 x i32> %794, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %796 = trunc <8 x i32> %795 to <8 x i16>
  %797 = getelementptr inbounds [128 x i16], [128 x i16]* %11, i64 0, i64 104
  %798 = bitcast i16* %797 to <8 x i16>*
  store <8 x i16> %796, <8 x i16>* %798, align 16, !alias.scope !1488, !noalias !1485
  br label %831

799:                                              ; preds = %754, %799
  %800 = phi i64 [ %829, %799 ], [ 0, %754 ]
  %801 = phi i16* [ %828, %799 ], [ %755, %754 ]
  %802 = load i16, i16* %801, align 2
  %803 = zext i16 %802 to i32
  %804 = mul nuw nsw i32 %1486, %803
  %805 = getelementptr inbounds i16, i16* %801, i64 16
  %806 = load i16, i16* %805, align 2
  %807 = zext i16 %806 to i32
  %808 = mul nuw nsw i32 %1488, %807
  %809 = add nuw nsw i32 %804, 64
  %810 = add nuw nsw i32 %809, %808
  %811 = lshr i32 %810, 7
  %812 = trunc i32 %811 to i16
  %813 = getelementptr inbounds i16, i16* %756, i64 %800
  store i16 %812, i16* %813, align 4
  %814 = getelementptr inbounds i16, i16* %801, i64 1
  %815 = or i64 %800, 1
  %816 = load i16, i16* %814, align 2
  %817 = zext i16 %816 to i32
  %818 = mul nuw nsw i32 %1486, %817
  %819 = getelementptr inbounds i16, i16* %801, i64 17
  %820 = load i16, i16* %819, align 2
  %821 = zext i16 %820 to i32
  %822 = mul nuw nsw i32 %1488, %821
  %823 = add nuw nsw i32 %818, 64
  %824 = add nuw nsw i32 %823, %822
  %825 = lshr i32 %824, 7
  %826 = trunc i32 %825 to i16
  %827 = getelementptr inbounds i16, i16* %756, i64 %815
  store i16 %826, i16* %827, align 2
  %828 = getelementptr inbounds i16, i16* %801, i64 2
  %829 = add nuw nsw i64 %800, 2
  %830 = icmp eq i64 %829, 16
  br i1 %830, label %831, label %799, !llvm.loop !1490

831:                                              ; preds = %799, %763
  %832 = phi i16* [ %768, %763 ], [ %828, %799 ]
  %833 = getelementptr inbounds [128 x i16], [128 x i16]* %11, i64 0, i64 112
  %834 = getelementptr inbounds [128 x i16], [128 x i16]* %11, i64 0, i64 112
  %835 = getelementptr inbounds [128 x i16], [128 x i16]* %11, i64 1, i64 0
  %836 = getelementptr i16, i16* %832, i64 32
  %837 = icmp ult i16* %834, %836
  %838 = icmp ult i16* %832, %835
  %839 = and i1 %837, %838
  br i1 %839, label %875, label %840

840:                                              ; preds = %831
  %841 = insertelement <8 x i32> undef, i32 %1486, i32 0
  %842 = shufflevector <8 x i32> %841, <8 x i32> undef, <8 x i32> zeroinitializer
  %843 = insertelement <8 x i32> undef, i32 %1488, i32 0
  %844 = shufflevector <8 x i32> %843, <8 x i32> undef, <8 x i32> zeroinitializer
  %845 = bitcast i16* %832 to <8 x i16>*
  %846 = load <8 x i16>, <8 x i16>* %845, align 2, !alias.scope !1491
  %847 = zext <8 x i16> %846 to <8 x i32>
  %848 = mul nuw nsw <8 x i32> %842, %847
  %849 = getelementptr inbounds i16, i16* %832, i64 16
  %850 = bitcast i16* %849 to <8 x i16>*
  %851 = load <8 x i16>, <8 x i16>* %850, align 2, !alias.scope !1491
  %852 = zext <8 x i16> %851 to <8 x i32>
  %853 = mul nuw nsw <8 x i32> %844, %852
  %854 = add nuw nsw <8 x i32> %848, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %855 = add nuw nsw <8 x i32> %854, %853
  %856 = lshr <8 x i32> %855, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %857 = trunc <8 x i32> %856 to <8 x i16>
  %858 = bitcast i16* %833 to <8 x i16>*
  store <8 x i16> %857, <8 x i16>* %858, align 16, !alias.scope !1494, !noalias !1491
  %859 = getelementptr i16, i16* %832, i64 8
  %860 = bitcast i16* %859 to <8 x i16>*
  %861 = load <8 x i16>, <8 x i16>* %860, align 2, !alias.scope !1491
  %862 = zext <8 x i16> %861 to <8 x i32>
  %863 = mul nuw nsw <8 x i32> %842, %862
  %864 = getelementptr inbounds i16, i16* %832, i64 24
  %865 = bitcast i16* %864 to <8 x i16>*
  %866 = load <8 x i16>, <8 x i16>* %865, align 2, !alias.scope !1491
  %867 = zext <8 x i16> %866 to <8 x i32>
  %868 = mul nuw nsw <8 x i32> %844, %867
  %869 = add nuw nsw <8 x i32> %863, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %870 = add nuw nsw <8 x i32> %869, %868
  %871 = lshr <8 x i32> %870, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %872 = trunc <8 x i32> %871 to <8 x i16>
  %873 = getelementptr inbounds [128 x i16], [128 x i16]* %11, i64 0, i64 120
  %874 = bitcast i16* %873 to <8 x i16>*
  store <8 x i16> %872, <8 x i16>* %874, align 16, !alias.scope !1494, !noalias !1491
  br label %907

875:                                              ; preds = %831, %875
  %876 = phi i64 [ %905, %875 ], [ 0, %831 ]
  %877 = phi i16* [ %904, %875 ], [ %832, %831 ]
  %878 = load i16, i16* %877, align 2
  %879 = zext i16 %878 to i32
  %880 = mul nuw nsw i32 %1486, %879
  %881 = getelementptr inbounds i16, i16* %877, i64 16
  %882 = load i16, i16* %881, align 2
  %883 = zext i16 %882 to i32
  %884 = mul nuw nsw i32 %1488, %883
  %885 = add nuw nsw i32 %880, 64
  %886 = add nuw nsw i32 %885, %884
  %887 = lshr i32 %886, 7
  %888 = trunc i32 %887 to i16
  %889 = getelementptr inbounds i16, i16* %833, i64 %876
  store i16 %888, i16* %889, align 4
  %890 = getelementptr inbounds i16, i16* %877, i64 1
  %891 = or i64 %876, 1
  %892 = load i16, i16* %890, align 2
  %893 = zext i16 %892 to i32
  %894 = mul nuw nsw i32 %1486, %893
  %895 = getelementptr inbounds i16, i16* %877, i64 17
  %896 = load i16, i16* %895, align 2
  %897 = zext i16 %896 to i32
  %898 = mul nuw nsw i32 %1488, %897
  %899 = add nuw nsw i32 %894, 64
  %900 = add nuw nsw i32 %899, %898
  %901 = lshr i32 %900, 7
  %902 = trunc i32 %901 to i16
  %903 = getelementptr inbounds i16, i16* %833, i64 %891
  store i16 %902, i16* %903, align 2
  %904 = getelementptr inbounds i16, i16* %877, i64 2
  %905 = add nuw nsw i64 %876, 2
  %906 = icmp eq i64 %905, 16
  br i1 %906, label %907, label %875, !llvm.loop !1496

907:                                              ; preds = %875, %840
  %908 = getelementptr inbounds [128 x i16], [128 x i16]* %13, i64 0, i64 0
  %909 = ptrtoint i8* %7 to i64
  %910 = shl i64 %909, 1
  %911 = inttoptr i64 %910 to i16*
  br label %226

912:                                              ; preds = %102, %912
  %913 = phi i64 [ %940, %912 ], [ 0, %102 ]
  %914 = phi i16* [ %931, %912 ], [ %104, %102 ]
  %915 = load i16, i16* %914, align 2
  %916 = zext i16 %915 to i32
  %917 = mul nuw nsw i32 %25, %916
  %918 = getelementptr inbounds i16, i16* %914, i64 1
  %919 = load i16, i16* %918, align 2
  %920 = zext i16 %919 to i32
  %921 = mul nuw nsw i32 %27, %920
  %922 = add nuw nsw i32 %917, 64
  %923 = add nuw nsw i32 %922, %921
  %924 = lshr i32 %923, 7
  %925 = trunc i32 %924 to i16
  %926 = getelementptr inbounds i16, i16* %105, i64 %913
  store i16 %925, i16* %926, align 4
  %927 = or i64 %913, 1
  %928 = load i16, i16* %918, align 2
  %929 = zext i16 %928 to i32
  %930 = mul nuw nsw i32 %25, %929
  %931 = getelementptr inbounds i16, i16* %914, i64 2
  %932 = load i16, i16* %931, align 2
  %933 = zext i16 %932 to i32
  %934 = mul nuw nsw i32 %27, %933
  %935 = add nuw nsw i32 %930, 64
  %936 = add nuw nsw i32 %935, %934
  %937 = lshr i32 %936, 7
  %938 = trunc i32 %937 to i16
  %939 = getelementptr inbounds i16, i16* %105, i64 %927
  store i16 %938, i16* %939, align 2
  %940 = add nuw nsw i64 %913, 2
  %941 = icmp eq i64 %940, 16
  br i1 %941, label %942, label %912, !llvm.loop !1497

942:                                              ; preds = %912, %113
  %943 = phi i16* [ %118, %113 ], [ %931, %912 ]
  %944 = getelementptr inbounds i16, i16* %943, i64 %23
  %945 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 32
  %946 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 32
  %947 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 48
  %948 = add nuw nsw i64 %23, 17
  %949 = getelementptr i16, i16* %943, i64 %948
  %950 = icmp ult i16* %946, %949
  %951 = icmp ult i16* %944, %947
  %952 = and i1 %950, %951
  br i1 %952, label %989, label %953

953:                                              ; preds = %942
  %954 = insertelement <8 x i32> undef, i32 %25, i32 0
  %955 = shufflevector <8 x i32> %954, <8 x i32> undef, <8 x i32> zeroinitializer
  %956 = insertelement <8 x i32> undef, i32 %27, i32 0
  %957 = shufflevector <8 x i32> %956, <8 x i32> undef, <8 x i32> zeroinitializer
  %958 = getelementptr i16, i16* %944, i64 16
  %959 = bitcast i16* %944 to <8 x i16>*
  %960 = load <8 x i16>, <8 x i16>* %959, align 2, !alias.scope !1498
  %961 = zext <8 x i16> %960 to <8 x i32>
  %962 = mul nuw nsw <8 x i32> %955, %961
  %963 = getelementptr inbounds i16, i16* %944, i64 1
  %964 = bitcast i16* %963 to <8 x i16>*
  %965 = load <8 x i16>, <8 x i16>* %964, align 2, !alias.scope !1498
  %966 = zext <8 x i16> %965 to <8 x i32>
  %967 = mul nuw nsw <8 x i32> %957, %966
  %968 = add nuw nsw <8 x i32> %962, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %969 = add nuw nsw <8 x i32> %968, %967
  %970 = lshr <8 x i32> %969, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %971 = trunc <8 x i32> %970 to <8 x i16>
  %972 = bitcast i16* %945 to <8 x i16>*
  store <8 x i16> %971, <8 x i16>* %972, align 16, !alias.scope !1501, !noalias !1498
  %973 = getelementptr i16, i16* %944, i64 8
  %974 = bitcast i16* %973 to <8 x i16>*
  %975 = load <8 x i16>, <8 x i16>* %974, align 2, !alias.scope !1498
  %976 = zext <8 x i16> %975 to <8 x i32>
  %977 = mul nuw nsw <8 x i32> %955, %976
  %978 = getelementptr inbounds i16, i16* %973, i64 1
  %979 = bitcast i16* %978 to <8 x i16>*
  %980 = load <8 x i16>, <8 x i16>* %979, align 2, !alias.scope !1498
  %981 = zext <8 x i16> %980 to <8 x i32>
  %982 = mul nuw nsw <8 x i32> %957, %981
  %983 = add nuw nsw <8 x i32> %977, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %984 = add nuw nsw <8 x i32> %983, %982
  %985 = lshr <8 x i32> %984, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %986 = trunc <8 x i32> %985 to <8 x i16>
  %987 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 40
  %988 = bitcast i16* %987 to <8 x i16>*
  store <8 x i16> %986, <8 x i16>* %988, align 16, !alias.scope !1501, !noalias !1498
  br label %1019

989:                                              ; preds = %942, %989
  %990 = phi i64 [ %1017, %989 ], [ 0, %942 ]
  %991 = phi i16* [ %1008, %989 ], [ %944, %942 ]
  %992 = load i16, i16* %991, align 2
  %993 = zext i16 %992 to i32
  %994 = mul nuw nsw i32 %25, %993
  %995 = getelementptr inbounds i16, i16* %991, i64 1
  %996 = load i16, i16* %995, align 2
  %997 = zext i16 %996 to i32
  %998 = mul nuw nsw i32 %27, %997
  %999 = add nuw nsw i32 %994, 64
  %1000 = add nuw nsw i32 %999, %998
  %1001 = lshr i32 %1000, 7
  %1002 = trunc i32 %1001 to i16
  %1003 = getelementptr inbounds i16, i16* %945, i64 %990
  store i16 %1002, i16* %1003, align 4
  %1004 = or i64 %990, 1
  %1005 = load i16, i16* %995, align 2
  %1006 = zext i16 %1005 to i32
  %1007 = mul nuw nsw i32 %25, %1006
  %1008 = getelementptr inbounds i16, i16* %991, i64 2
  %1009 = load i16, i16* %1008, align 2
  %1010 = zext i16 %1009 to i32
  %1011 = mul nuw nsw i32 %27, %1010
  %1012 = add nuw nsw i32 %1007, 64
  %1013 = add nuw nsw i32 %1012, %1011
  %1014 = lshr i32 %1013, 7
  %1015 = trunc i32 %1014 to i16
  %1016 = getelementptr inbounds i16, i16* %945, i64 %1004
  store i16 %1015, i16* %1016, align 2
  %1017 = add nuw nsw i64 %990, 2
  %1018 = icmp eq i64 %1017, 16
  br i1 %1018, label %1019, label %989, !llvm.loop !1503

1019:                                             ; preds = %989, %953
  %1020 = phi i16* [ %958, %953 ], [ %1008, %989 ]
  %1021 = getelementptr inbounds i16, i16* %1020, i64 %23
  %1022 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 48
  %1023 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 48
  %1024 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 64
  %1025 = add nuw nsw i64 %23, 17
  %1026 = getelementptr i16, i16* %1020, i64 %1025
  %1027 = icmp ult i16* %1023, %1026
  %1028 = icmp ult i16* %1021, %1024
  %1029 = and i1 %1027, %1028
  br i1 %1029, label %1066, label %1030

1030:                                             ; preds = %1019
  %1031 = insertelement <8 x i32> undef, i32 %25, i32 0
  %1032 = shufflevector <8 x i32> %1031, <8 x i32> undef, <8 x i32> zeroinitializer
  %1033 = insertelement <8 x i32> undef, i32 %27, i32 0
  %1034 = shufflevector <8 x i32> %1033, <8 x i32> undef, <8 x i32> zeroinitializer
  %1035 = getelementptr i16, i16* %1021, i64 16
  %1036 = bitcast i16* %1021 to <8 x i16>*
  %1037 = load <8 x i16>, <8 x i16>* %1036, align 2, !alias.scope !1504
  %1038 = zext <8 x i16> %1037 to <8 x i32>
  %1039 = mul nuw nsw <8 x i32> %1032, %1038
  %1040 = getelementptr inbounds i16, i16* %1021, i64 1
  %1041 = bitcast i16* %1040 to <8 x i16>*
  %1042 = load <8 x i16>, <8 x i16>* %1041, align 2, !alias.scope !1504
  %1043 = zext <8 x i16> %1042 to <8 x i32>
  %1044 = mul nuw nsw <8 x i32> %1034, %1043
  %1045 = add nuw nsw <8 x i32> %1039, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %1046 = add nuw nsw <8 x i32> %1045, %1044
  %1047 = lshr <8 x i32> %1046, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %1048 = trunc <8 x i32> %1047 to <8 x i16>
  %1049 = bitcast i16* %1022 to <8 x i16>*
  store <8 x i16> %1048, <8 x i16>* %1049, align 16, !alias.scope !1507, !noalias !1504
  %1050 = getelementptr i16, i16* %1021, i64 8
  %1051 = bitcast i16* %1050 to <8 x i16>*
  %1052 = load <8 x i16>, <8 x i16>* %1051, align 2, !alias.scope !1504
  %1053 = zext <8 x i16> %1052 to <8 x i32>
  %1054 = mul nuw nsw <8 x i32> %1032, %1053
  %1055 = getelementptr inbounds i16, i16* %1050, i64 1
  %1056 = bitcast i16* %1055 to <8 x i16>*
  %1057 = load <8 x i16>, <8 x i16>* %1056, align 2, !alias.scope !1504
  %1058 = zext <8 x i16> %1057 to <8 x i32>
  %1059 = mul nuw nsw <8 x i32> %1034, %1058
  %1060 = add nuw nsw <8 x i32> %1054, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %1061 = add nuw nsw <8 x i32> %1060, %1059
  %1062 = lshr <8 x i32> %1061, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %1063 = trunc <8 x i32> %1062 to <8 x i16>
  %1064 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 56
  %1065 = bitcast i16* %1064 to <8 x i16>*
  store <8 x i16> %1063, <8 x i16>* %1065, align 16, !alias.scope !1507, !noalias !1504
  br label %1096

1066:                                             ; preds = %1019, %1066
  %1067 = phi i64 [ %1094, %1066 ], [ 0, %1019 ]
  %1068 = phi i16* [ %1085, %1066 ], [ %1021, %1019 ]
  %1069 = load i16, i16* %1068, align 2
  %1070 = zext i16 %1069 to i32
  %1071 = mul nuw nsw i32 %25, %1070
  %1072 = getelementptr inbounds i16, i16* %1068, i64 1
  %1073 = load i16, i16* %1072, align 2
  %1074 = zext i16 %1073 to i32
  %1075 = mul nuw nsw i32 %27, %1074
  %1076 = add nuw nsw i32 %1071, 64
  %1077 = add nuw nsw i32 %1076, %1075
  %1078 = lshr i32 %1077, 7
  %1079 = trunc i32 %1078 to i16
  %1080 = getelementptr inbounds i16, i16* %1022, i64 %1067
  store i16 %1079, i16* %1080, align 4
  %1081 = or i64 %1067, 1
  %1082 = load i16, i16* %1072, align 2
  %1083 = zext i16 %1082 to i32
  %1084 = mul nuw nsw i32 %25, %1083
  %1085 = getelementptr inbounds i16, i16* %1068, i64 2
  %1086 = load i16, i16* %1085, align 2
  %1087 = zext i16 %1086 to i32
  %1088 = mul nuw nsw i32 %27, %1087
  %1089 = add nuw nsw i32 %1084, 64
  %1090 = add nuw nsw i32 %1089, %1088
  %1091 = lshr i32 %1090, 7
  %1092 = trunc i32 %1091 to i16
  %1093 = getelementptr inbounds i16, i16* %1022, i64 %1081
  store i16 %1092, i16* %1093, align 2
  %1094 = add nuw nsw i64 %1067, 2
  %1095 = icmp eq i64 %1094, 16
  br i1 %1095, label %1096, label %1066, !llvm.loop !1509

1096:                                             ; preds = %1066, %1030
  %1097 = phi i16* [ %1035, %1030 ], [ %1085, %1066 ]
  %1098 = getelementptr inbounds i16, i16* %1097, i64 %23
  %1099 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 64
  %1100 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 64
  %1101 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 80
  %1102 = add nuw nsw i64 %23, 17
  %1103 = getelementptr i16, i16* %1097, i64 %1102
  %1104 = icmp ult i16* %1100, %1103
  %1105 = icmp ult i16* %1098, %1101
  %1106 = and i1 %1104, %1105
  br i1 %1106, label %1143, label %1107

1107:                                             ; preds = %1096
  %1108 = insertelement <8 x i32> undef, i32 %25, i32 0
  %1109 = shufflevector <8 x i32> %1108, <8 x i32> undef, <8 x i32> zeroinitializer
  %1110 = insertelement <8 x i32> undef, i32 %27, i32 0
  %1111 = shufflevector <8 x i32> %1110, <8 x i32> undef, <8 x i32> zeroinitializer
  %1112 = getelementptr i16, i16* %1098, i64 16
  %1113 = bitcast i16* %1098 to <8 x i16>*
  %1114 = load <8 x i16>, <8 x i16>* %1113, align 2, !alias.scope !1510
  %1115 = zext <8 x i16> %1114 to <8 x i32>
  %1116 = mul nuw nsw <8 x i32> %1109, %1115
  %1117 = getelementptr inbounds i16, i16* %1098, i64 1
  %1118 = bitcast i16* %1117 to <8 x i16>*
  %1119 = load <8 x i16>, <8 x i16>* %1118, align 2, !alias.scope !1510
  %1120 = zext <8 x i16> %1119 to <8 x i32>
  %1121 = mul nuw nsw <8 x i32> %1111, %1120
  %1122 = add nuw nsw <8 x i32> %1116, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %1123 = add nuw nsw <8 x i32> %1122, %1121
  %1124 = lshr <8 x i32> %1123, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %1125 = trunc <8 x i32> %1124 to <8 x i16>
  %1126 = bitcast i16* %1099 to <8 x i16>*
  store <8 x i16> %1125, <8 x i16>* %1126, align 16, !alias.scope !1513, !noalias !1510
  %1127 = getelementptr i16, i16* %1098, i64 8
  %1128 = bitcast i16* %1127 to <8 x i16>*
  %1129 = load <8 x i16>, <8 x i16>* %1128, align 2, !alias.scope !1510
  %1130 = zext <8 x i16> %1129 to <8 x i32>
  %1131 = mul nuw nsw <8 x i32> %1109, %1130
  %1132 = getelementptr inbounds i16, i16* %1127, i64 1
  %1133 = bitcast i16* %1132 to <8 x i16>*
  %1134 = load <8 x i16>, <8 x i16>* %1133, align 2, !alias.scope !1510
  %1135 = zext <8 x i16> %1134 to <8 x i32>
  %1136 = mul nuw nsw <8 x i32> %1111, %1135
  %1137 = add nuw nsw <8 x i32> %1131, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %1138 = add nuw nsw <8 x i32> %1137, %1136
  %1139 = lshr <8 x i32> %1138, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %1140 = trunc <8 x i32> %1139 to <8 x i16>
  %1141 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 72
  %1142 = bitcast i16* %1141 to <8 x i16>*
  store <8 x i16> %1140, <8 x i16>* %1142, align 16, !alias.scope !1513, !noalias !1510
  br label %1173

1143:                                             ; preds = %1096, %1143
  %1144 = phi i64 [ %1171, %1143 ], [ 0, %1096 ]
  %1145 = phi i16* [ %1162, %1143 ], [ %1098, %1096 ]
  %1146 = load i16, i16* %1145, align 2
  %1147 = zext i16 %1146 to i32
  %1148 = mul nuw nsw i32 %25, %1147
  %1149 = getelementptr inbounds i16, i16* %1145, i64 1
  %1150 = load i16, i16* %1149, align 2
  %1151 = zext i16 %1150 to i32
  %1152 = mul nuw nsw i32 %27, %1151
  %1153 = add nuw nsw i32 %1148, 64
  %1154 = add nuw nsw i32 %1153, %1152
  %1155 = lshr i32 %1154, 7
  %1156 = trunc i32 %1155 to i16
  %1157 = getelementptr inbounds i16, i16* %1099, i64 %1144
  store i16 %1156, i16* %1157, align 4
  %1158 = or i64 %1144, 1
  %1159 = load i16, i16* %1149, align 2
  %1160 = zext i16 %1159 to i32
  %1161 = mul nuw nsw i32 %25, %1160
  %1162 = getelementptr inbounds i16, i16* %1145, i64 2
  %1163 = load i16, i16* %1162, align 2
  %1164 = zext i16 %1163 to i32
  %1165 = mul nuw nsw i32 %27, %1164
  %1166 = add nuw nsw i32 %1161, 64
  %1167 = add nuw nsw i32 %1166, %1165
  %1168 = lshr i32 %1167, 7
  %1169 = trunc i32 %1168 to i16
  %1170 = getelementptr inbounds i16, i16* %1099, i64 %1158
  store i16 %1169, i16* %1170, align 2
  %1171 = add nuw nsw i64 %1144, 2
  %1172 = icmp eq i64 %1171, 16
  br i1 %1172, label %1173, label %1143, !llvm.loop !1515

1173:                                             ; preds = %1143, %1107
  %1174 = phi i16* [ %1112, %1107 ], [ %1162, %1143 ]
  %1175 = getelementptr inbounds i16, i16* %1174, i64 %23
  %1176 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 80
  %1177 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 80
  %1178 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 96
  %1179 = add nuw nsw i64 %23, 17
  %1180 = getelementptr i16, i16* %1174, i64 %1179
  %1181 = icmp ult i16* %1177, %1180
  %1182 = icmp ult i16* %1175, %1178
  %1183 = and i1 %1181, %1182
  br i1 %1183, label %1220, label %1184

1184:                                             ; preds = %1173
  %1185 = insertelement <8 x i32> undef, i32 %25, i32 0
  %1186 = shufflevector <8 x i32> %1185, <8 x i32> undef, <8 x i32> zeroinitializer
  %1187 = insertelement <8 x i32> undef, i32 %27, i32 0
  %1188 = shufflevector <8 x i32> %1187, <8 x i32> undef, <8 x i32> zeroinitializer
  %1189 = getelementptr i16, i16* %1175, i64 16
  %1190 = bitcast i16* %1175 to <8 x i16>*
  %1191 = load <8 x i16>, <8 x i16>* %1190, align 2, !alias.scope !1516
  %1192 = zext <8 x i16> %1191 to <8 x i32>
  %1193 = mul nuw nsw <8 x i32> %1186, %1192
  %1194 = getelementptr inbounds i16, i16* %1175, i64 1
  %1195 = bitcast i16* %1194 to <8 x i16>*
  %1196 = load <8 x i16>, <8 x i16>* %1195, align 2, !alias.scope !1516
  %1197 = zext <8 x i16> %1196 to <8 x i32>
  %1198 = mul nuw nsw <8 x i32> %1188, %1197
  %1199 = add nuw nsw <8 x i32> %1193, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %1200 = add nuw nsw <8 x i32> %1199, %1198
  %1201 = lshr <8 x i32> %1200, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %1202 = trunc <8 x i32> %1201 to <8 x i16>
  %1203 = bitcast i16* %1176 to <8 x i16>*
  store <8 x i16> %1202, <8 x i16>* %1203, align 16, !alias.scope !1519, !noalias !1516
  %1204 = getelementptr i16, i16* %1175, i64 8
  %1205 = bitcast i16* %1204 to <8 x i16>*
  %1206 = load <8 x i16>, <8 x i16>* %1205, align 2, !alias.scope !1516
  %1207 = zext <8 x i16> %1206 to <8 x i32>
  %1208 = mul nuw nsw <8 x i32> %1186, %1207
  %1209 = getelementptr inbounds i16, i16* %1204, i64 1
  %1210 = bitcast i16* %1209 to <8 x i16>*
  %1211 = load <8 x i16>, <8 x i16>* %1210, align 2, !alias.scope !1516
  %1212 = zext <8 x i16> %1211 to <8 x i32>
  %1213 = mul nuw nsw <8 x i32> %1188, %1212
  %1214 = add nuw nsw <8 x i32> %1208, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %1215 = add nuw nsw <8 x i32> %1214, %1213
  %1216 = lshr <8 x i32> %1215, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %1217 = trunc <8 x i32> %1216 to <8 x i16>
  %1218 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 88
  %1219 = bitcast i16* %1218 to <8 x i16>*
  store <8 x i16> %1217, <8 x i16>* %1219, align 16, !alias.scope !1519, !noalias !1516
  br label %1250

1220:                                             ; preds = %1173, %1220
  %1221 = phi i64 [ %1248, %1220 ], [ 0, %1173 ]
  %1222 = phi i16* [ %1239, %1220 ], [ %1175, %1173 ]
  %1223 = load i16, i16* %1222, align 2
  %1224 = zext i16 %1223 to i32
  %1225 = mul nuw nsw i32 %25, %1224
  %1226 = getelementptr inbounds i16, i16* %1222, i64 1
  %1227 = load i16, i16* %1226, align 2
  %1228 = zext i16 %1227 to i32
  %1229 = mul nuw nsw i32 %27, %1228
  %1230 = add nuw nsw i32 %1225, 64
  %1231 = add nuw nsw i32 %1230, %1229
  %1232 = lshr i32 %1231, 7
  %1233 = trunc i32 %1232 to i16
  %1234 = getelementptr inbounds i16, i16* %1176, i64 %1221
  store i16 %1233, i16* %1234, align 4
  %1235 = or i64 %1221, 1
  %1236 = load i16, i16* %1226, align 2
  %1237 = zext i16 %1236 to i32
  %1238 = mul nuw nsw i32 %25, %1237
  %1239 = getelementptr inbounds i16, i16* %1222, i64 2
  %1240 = load i16, i16* %1239, align 2
  %1241 = zext i16 %1240 to i32
  %1242 = mul nuw nsw i32 %27, %1241
  %1243 = add nuw nsw i32 %1238, 64
  %1244 = add nuw nsw i32 %1243, %1242
  %1245 = lshr i32 %1244, 7
  %1246 = trunc i32 %1245 to i16
  %1247 = getelementptr inbounds i16, i16* %1176, i64 %1235
  store i16 %1246, i16* %1247, align 2
  %1248 = add nuw nsw i64 %1221, 2
  %1249 = icmp eq i64 %1248, 16
  br i1 %1249, label %1250, label %1220, !llvm.loop !1521

1250:                                             ; preds = %1220, %1184
  %1251 = phi i16* [ %1189, %1184 ], [ %1239, %1220 ]
  %1252 = getelementptr inbounds i16, i16* %1251, i64 %23
  %1253 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 96
  %1254 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 96
  %1255 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 112
  %1256 = add nuw nsw i64 %23, 17
  %1257 = getelementptr i16, i16* %1251, i64 %1256
  %1258 = icmp ult i16* %1254, %1257
  %1259 = icmp ult i16* %1252, %1255
  %1260 = and i1 %1258, %1259
  br i1 %1260, label %1297, label %1261

1261:                                             ; preds = %1250
  %1262 = insertelement <8 x i32> undef, i32 %25, i32 0
  %1263 = shufflevector <8 x i32> %1262, <8 x i32> undef, <8 x i32> zeroinitializer
  %1264 = insertelement <8 x i32> undef, i32 %27, i32 0
  %1265 = shufflevector <8 x i32> %1264, <8 x i32> undef, <8 x i32> zeroinitializer
  %1266 = getelementptr i16, i16* %1252, i64 16
  %1267 = bitcast i16* %1252 to <8 x i16>*
  %1268 = load <8 x i16>, <8 x i16>* %1267, align 2, !alias.scope !1522
  %1269 = zext <8 x i16> %1268 to <8 x i32>
  %1270 = mul nuw nsw <8 x i32> %1263, %1269
  %1271 = getelementptr inbounds i16, i16* %1252, i64 1
  %1272 = bitcast i16* %1271 to <8 x i16>*
  %1273 = load <8 x i16>, <8 x i16>* %1272, align 2, !alias.scope !1522
  %1274 = zext <8 x i16> %1273 to <8 x i32>
  %1275 = mul nuw nsw <8 x i32> %1265, %1274
  %1276 = add nuw nsw <8 x i32> %1270, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %1277 = add nuw nsw <8 x i32> %1276, %1275
  %1278 = lshr <8 x i32> %1277, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %1279 = trunc <8 x i32> %1278 to <8 x i16>
  %1280 = bitcast i16* %1253 to <8 x i16>*
  store <8 x i16> %1279, <8 x i16>* %1280, align 16, !alias.scope !1525, !noalias !1522
  %1281 = getelementptr i16, i16* %1252, i64 8
  %1282 = bitcast i16* %1281 to <8 x i16>*
  %1283 = load <8 x i16>, <8 x i16>* %1282, align 2, !alias.scope !1522
  %1284 = zext <8 x i16> %1283 to <8 x i32>
  %1285 = mul nuw nsw <8 x i32> %1263, %1284
  %1286 = getelementptr inbounds i16, i16* %1281, i64 1
  %1287 = bitcast i16* %1286 to <8 x i16>*
  %1288 = load <8 x i16>, <8 x i16>* %1287, align 2, !alias.scope !1522
  %1289 = zext <8 x i16> %1288 to <8 x i32>
  %1290 = mul nuw nsw <8 x i32> %1265, %1289
  %1291 = add nuw nsw <8 x i32> %1285, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %1292 = add nuw nsw <8 x i32> %1291, %1290
  %1293 = lshr <8 x i32> %1292, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %1294 = trunc <8 x i32> %1293 to <8 x i16>
  %1295 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 104
  %1296 = bitcast i16* %1295 to <8 x i16>*
  store <8 x i16> %1294, <8 x i16>* %1296, align 16, !alias.scope !1525, !noalias !1522
  br label %1327

1297:                                             ; preds = %1250, %1297
  %1298 = phi i64 [ %1325, %1297 ], [ 0, %1250 ]
  %1299 = phi i16* [ %1316, %1297 ], [ %1252, %1250 ]
  %1300 = load i16, i16* %1299, align 2
  %1301 = zext i16 %1300 to i32
  %1302 = mul nuw nsw i32 %25, %1301
  %1303 = getelementptr inbounds i16, i16* %1299, i64 1
  %1304 = load i16, i16* %1303, align 2
  %1305 = zext i16 %1304 to i32
  %1306 = mul nuw nsw i32 %27, %1305
  %1307 = add nuw nsw i32 %1302, 64
  %1308 = add nuw nsw i32 %1307, %1306
  %1309 = lshr i32 %1308, 7
  %1310 = trunc i32 %1309 to i16
  %1311 = getelementptr inbounds i16, i16* %1253, i64 %1298
  store i16 %1310, i16* %1311, align 4
  %1312 = or i64 %1298, 1
  %1313 = load i16, i16* %1303, align 2
  %1314 = zext i16 %1313 to i32
  %1315 = mul nuw nsw i32 %25, %1314
  %1316 = getelementptr inbounds i16, i16* %1299, i64 2
  %1317 = load i16, i16* %1316, align 2
  %1318 = zext i16 %1317 to i32
  %1319 = mul nuw nsw i32 %27, %1318
  %1320 = add nuw nsw i32 %1315, 64
  %1321 = add nuw nsw i32 %1320, %1319
  %1322 = lshr i32 %1321, 7
  %1323 = trunc i32 %1322 to i16
  %1324 = getelementptr inbounds i16, i16* %1253, i64 %1312
  store i16 %1323, i16* %1324, align 2
  %1325 = add nuw nsw i64 %1298, 2
  %1326 = icmp eq i64 %1325, 16
  br i1 %1326, label %1327, label %1297, !llvm.loop !1527

1327:                                             ; preds = %1297, %1261
  %1328 = phi i16* [ %1266, %1261 ], [ %1316, %1297 ]
  %1329 = getelementptr inbounds i16, i16* %1328, i64 %23
  %1330 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 112
  %1331 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 112
  %1332 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 128
  %1333 = add nuw nsw i64 %23, 17
  %1334 = getelementptr i16, i16* %1328, i64 %1333
  %1335 = icmp ult i16* %1331, %1334
  %1336 = icmp ult i16* %1329, %1332
  %1337 = and i1 %1335, %1336
  br i1 %1337, label %1374, label %1338

1338:                                             ; preds = %1327
  %1339 = insertelement <8 x i32> undef, i32 %25, i32 0
  %1340 = shufflevector <8 x i32> %1339, <8 x i32> undef, <8 x i32> zeroinitializer
  %1341 = insertelement <8 x i32> undef, i32 %27, i32 0
  %1342 = shufflevector <8 x i32> %1341, <8 x i32> undef, <8 x i32> zeroinitializer
  %1343 = getelementptr i16, i16* %1329, i64 16
  %1344 = bitcast i16* %1329 to <8 x i16>*
  %1345 = load <8 x i16>, <8 x i16>* %1344, align 2, !alias.scope !1528
  %1346 = zext <8 x i16> %1345 to <8 x i32>
  %1347 = mul nuw nsw <8 x i32> %1340, %1346
  %1348 = getelementptr inbounds i16, i16* %1329, i64 1
  %1349 = bitcast i16* %1348 to <8 x i16>*
  %1350 = load <8 x i16>, <8 x i16>* %1349, align 2, !alias.scope !1528
  %1351 = zext <8 x i16> %1350 to <8 x i32>
  %1352 = mul nuw nsw <8 x i32> %1342, %1351
  %1353 = add nuw nsw <8 x i32> %1347, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %1354 = add nuw nsw <8 x i32> %1353, %1352
  %1355 = lshr <8 x i32> %1354, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %1356 = trunc <8 x i32> %1355 to <8 x i16>
  %1357 = bitcast i16* %1330 to <8 x i16>*
  store <8 x i16> %1356, <8 x i16>* %1357, align 16, !alias.scope !1531, !noalias !1528
  %1358 = getelementptr i16, i16* %1329, i64 8
  %1359 = bitcast i16* %1358 to <8 x i16>*
  %1360 = load <8 x i16>, <8 x i16>* %1359, align 2, !alias.scope !1528
  %1361 = zext <8 x i16> %1360 to <8 x i32>
  %1362 = mul nuw nsw <8 x i32> %1340, %1361
  %1363 = getelementptr inbounds i16, i16* %1358, i64 1
  %1364 = bitcast i16* %1363 to <8 x i16>*
  %1365 = load <8 x i16>, <8 x i16>* %1364, align 2, !alias.scope !1528
  %1366 = zext <8 x i16> %1365 to <8 x i32>
  %1367 = mul nuw nsw <8 x i32> %1342, %1366
  %1368 = add nuw nsw <8 x i32> %1362, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %1369 = add nuw nsw <8 x i32> %1368, %1367
  %1370 = lshr <8 x i32> %1369, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %1371 = trunc <8 x i32> %1370 to <8 x i16>
  %1372 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 120
  %1373 = bitcast i16* %1372 to <8 x i16>*
  store <8 x i16> %1371, <8 x i16>* %1373, align 16, !alias.scope !1531, !noalias !1528
  br label %1404

1374:                                             ; preds = %1327, %1374
  %1375 = phi i64 [ %1402, %1374 ], [ 0, %1327 ]
  %1376 = phi i16* [ %1393, %1374 ], [ %1329, %1327 ]
  %1377 = load i16, i16* %1376, align 2
  %1378 = zext i16 %1377 to i32
  %1379 = mul nuw nsw i32 %25, %1378
  %1380 = getelementptr inbounds i16, i16* %1376, i64 1
  %1381 = load i16, i16* %1380, align 2
  %1382 = zext i16 %1381 to i32
  %1383 = mul nuw nsw i32 %27, %1382
  %1384 = add nuw nsw i32 %1379, 64
  %1385 = add nuw nsw i32 %1384, %1383
  %1386 = lshr i32 %1385, 7
  %1387 = trunc i32 %1386 to i16
  %1388 = getelementptr inbounds i16, i16* %1330, i64 %1375
  store i16 %1387, i16* %1388, align 4
  %1389 = or i64 %1375, 1
  %1390 = load i16, i16* %1380, align 2
  %1391 = zext i16 %1390 to i32
  %1392 = mul nuw nsw i32 %25, %1391
  %1393 = getelementptr inbounds i16, i16* %1376, i64 2
  %1394 = load i16, i16* %1393, align 2
  %1395 = zext i16 %1394 to i32
  %1396 = mul nuw nsw i32 %27, %1395
  %1397 = add nuw nsw i32 %1392, 64
  %1398 = add nuw nsw i32 %1397, %1396
  %1399 = lshr i32 %1398, 7
  %1400 = trunc i32 %1399 to i16
  %1401 = getelementptr inbounds i16, i16* %1330, i64 %1389
  store i16 %1400, i16* %1401, align 2
  %1402 = add nuw nsw i64 %1375, 2
  %1403 = icmp eq i64 %1402, 16
  br i1 %1403, label %1404, label %1374, !llvm.loop !1533

1404:                                             ; preds = %1374, %1338
  %1405 = phi i16* [ %1343, %1338 ], [ %1393, %1374 ]
  %1406 = getelementptr inbounds i16, i16* %1405, i64 %23
  %1407 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 128
  %1408 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 128
  %1409 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 1, i64 0
  %1410 = add nuw nsw i64 %23, 17
  %1411 = getelementptr i16, i16* %1405, i64 %1410
  %1412 = icmp ult i16* %1408, %1411
  %1413 = icmp ult i16* %1406, %1409
  %1414 = and i1 %1412, %1413
  br i1 %1414, label %1450, label %1415

1415:                                             ; preds = %1404
  %1416 = insertelement <8 x i32> undef, i32 %25, i32 0
  %1417 = shufflevector <8 x i32> %1416, <8 x i32> undef, <8 x i32> zeroinitializer
  %1418 = insertelement <8 x i32> undef, i32 %27, i32 0
  %1419 = shufflevector <8 x i32> %1418, <8 x i32> undef, <8 x i32> zeroinitializer
  %1420 = bitcast i16* %1406 to <8 x i16>*
  %1421 = load <8 x i16>, <8 x i16>* %1420, align 2, !alias.scope !1534
  %1422 = zext <8 x i16> %1421 to <8 x i32>
  %1423 = mul nuw nsw <8 x i32> %1417, %1422
  %1424 = getelementptr inbounds i16, i16* %1406, i64 1
  %1425 = bitcast i16* %1424 to <8 x i16>*
  %1426 = load <8 x i16>, <8 x i16>* %1425, align 2, !alias.scope !1534
  %1427 = zext <8 x i16> %1426 to <8 x i32>
  %1428 = mul nuw nsw <8 x i32> %1419, %1427
  %1429 = add nuw nsw <8 x i32> %1423, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %1430 = add nuw nsw <8 x i32> %1429, %1428
  %1431 = lshr <8 x i32> %1430, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %1432 = trunc <8 x i32> %1431 to <8 x i16>
  %1433 = bitcast i16* %1407 to <8 x i16>*
  store <8 x i16> %1432, <8 x i16>* %1433, align 16, !alias.scope !1537, !noalias !1534
  %1434 = getelementptr i16, i16* %1406, i64 8
  %1435 = bitcast i16* %1434 to <8 x i16>*
  %1436 = load <8 x i16>, <8 x i16>* %1435, align 2, !alias.scope !1534
  %1437 = zext <8 x i16> %1436 to <8 x i32>
  %1438 = mul nuw nsw <8 x i32> %1417, %1437
  %1439 = getelementptr inbounds i16, i16* %1434, i64 1
  %1440 = bitcast i16* %1439 to <8 x i16>*
  %1441 = load <8 x i16>, <8 x i16>* %1440, align 2, !alias.scope !1534
  %1442 = zext <8 x i16> %1441 to <8 x i32>
  %1443 = mul nuw nsw <8 x i32> %1419, %1442
  %1444 = add nuw nsw <8 x i32> %1438, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %1445 = add nuw nsw <8 x i32> %1444, %1443
  %1446 = lshr <8 x i32> %1445, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %1447 = trunc <8 x i32> %1446 to <8 x i16>
  %1448 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 136
  %1449 = bitcast i16* %1448 to <8 x i16>*
  store <8 x i16> %1447, <8 x i16>* %1449, align 16, !alias.scope !1537, !noalias !1534
  br label %1480

1450:                                             ; preds = %1404, %1450
  %1451 = phi i64 [ %1478, %1450 ], [ 0, %1404 ]
  %1452 = phi i16* [ %1469, %1450 ], [ %1406, %1404 ]
  %1453 = load i16, i16* %1452, align 2
  %1454 = zext i16 %1453 to i32
  %1455 = mul nuw nsw i32 %25, %1454
  %1456 = getelementptr inbounds i16, i16* %1452, i64 1
  %1457 = load i16, i16* %1456, align 2
  %1458 = zext i16 %1457 to i32
  %1459 = mul nuw nsw i32 %27, %1458
  %1460 = add nuw nsw i32 %1455, 64
  %1461 = add nuw nsw i32 %1460, %1459
  %1462 = lshr i32 %1461, 7
  %1463 = trunc i32 %1462 to i16
  %1464 = getelementptr inbounds i16, i16* %1407, i64 %1451
  store i16 %1463, i16* %1464, align 4
  %1465 = or i64 %1451, 1
  %1466 = load i16, i16* %1456, align 2
  %1467 = zext i16 %1466 to i32
  %1468 = mul nuw nsw i32 %25, %1467
  %1469 = getelementptr inbounds i16, i16* %1452, i64 2
  %1470 = load i16, i16* %1469, align 2
  %1471 = zext i16 %1470 to i32
  %1472 = mul nuw nsw i32 %27, %1471
  %1473 = add nuw nsw i32 %1468, 64
  %1474 = add nuw nsw i32 %1473, %1472
  %1475 = lshr i32 %1474, 7
  %1476 = trunc i32 %1475 to i16
  %1477 = getelementptr inbounds i16, i16* %1407, i64 %1465
  store i16 %1476, i16* %1477, align 2
  %1478 = add nuw nsw i64 %1451, 2
  %1479 = icmp eq i64 %1478, 16
  br i1 %1479, label %1480, label %1450, !llvm.loop !1539

1480:                                             ; preds = %1450, %1415
  %1481 = getelementptr inbounds [128 x i16], [128 x i16]* %11, i64 0, i64 0
  %1482 = sext i32 %3 to i64
  %1483 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %1482, i64 0
  %1484 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %1482, i64 1
  %1485 = load i8, i8* %1483, align 2
  %1486 = zext i8 %1485 to i32
  %1487 = load i8, i8* %1484, align 1
  %1488 = zext i8 %1487 to i32
  %1489 = getelementptr inbounds [128 x i16], [128 x i16]* %11, i64 0, i64 16
  %1490 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 32
  %1491 = bitcast i16* %1490 to [128 x i16]*
  %1492 = icmp ult [128 x i16]* %11, %1491
  %1493 = bitcast i16* %1489 to [144 x i16]*
  %1494 = icmp ult [144 x i16]* %9, %1493
  %1495 = and i1 %1492, %1494
  br i1 %1495, label %149, label %1496

1496:                                             ; preds = %1480
  %1497 = insertelement <8 x i32> undef, i32 %1486, i32 0
  %1498 = shufflevector <8 x i32> %1497, <8 x i32> undef, <8 x i32> zeroinitializer
  %1499 = insertelement <8 x i32> undef, i32 %1488, i32 0
  %1500 = shufflevector <8 x i32> %1499, <8 x i32> undef, <8 x i32> zeroinitializer
  %1501 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 16
  %1502 = bitcast [144 x i16]* %9 to <8 x i16>*
  %1503 = load <8 x i16>, <8 x i16>* %1502, align 16, !alias.scope !1540
  %1504 = zext <8 x i16> %1503 to <8 x i32>
  %1505 = mul nuw nsw <8 x i32> %1498, %1504
  %1506 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 16
  %1507 = bitcast i16* %1506 to <8 x i16>*
  %1508 = load <8 x i16>, <8 x i16>* %1507, align 16, !alias.scope !1540
  %1509 = zext <8 x i16> %1508 to <8 x i32>
  %1510 = mul nuw nsw <8 x i32> %1500, %1509
  %1511 = add nuw nsw <8 x i32> %1505, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %1512 = add nuw nsw <8 x i32> %1511, %1510
  %1513 = lshr <8 x i32> %1512, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %1514 = trunc <8 x i32> %1513 to <8 x i16>
  %1515 = bitcast [128 x i16]* %11 to <8 x i16>*
  store <8 x i16> %1514, <8 x i16>* %1515, align 16, !alias.scope !1543, !noalias !1540
  %1516 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 8
  %1517 = bitcast i16* %1516 to <8 x i16>*
  %1518 = load <8 x i16>, <8 x i16>* %1517, align 16, !alias.scope !1540
  %1519 = zext <8 x i16> %1518 to <8 x i32>
  %1520 = mul nuw nsw <8 x i32> %1498, %1519
  %1521 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 24
  %1522 = bitcast i16* %1521 to <8 x i16>*
  %1523 = load <8 x i16>, <8 x i16>* %1522, align 16, !alias.scope !1540
  %1524 = zext <8 x i16> %1523 to <8 x i32>
  %1525 = mul nuw nsw <8 x i32> %1500, %1524
  %1526 = add nuw nsw <8 x i32> %1520, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %1527 = add nuw nsw <8 x i32> %1526, %1525
  %1528 = lshr <8 x i32> %1527, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %1529 = trunc <8 x i32> %1528 to <8 x i16>
  %1530 = getelementptr inbounds [128 x i16], [128 x i16]* %11, i64 0, i64 8
  %1531 = bitcast i16* %1530 to <8 x i16>*
  store <8 x i16> %1529, <8 x i16>* %1531, align 16, !alias.scope !1543, !noalias !1540
  br label %181
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_highbd_12_sub_pixel_avg_variance16x8_c(i8*, i32, i32, i32, i8*, i32, i32* nocapture, i8*) local_unnamed_addr #2 {
  %9 = alloca [144 x i16], align 16
  %10 = bitcast [144 x i16]* %9 to i8*
  %11 = alloca [128 x i16], align 16
  %12 = bitcast [128 x i16]* %11 to i8*
  %13 = alloca [128 x i16], align 16
  call void @llvm.lifetime.start.p0i8(i64 288, i8* nonnull %10) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %10, i8 -86, i64 288, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %12) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %12, i8 -86, i64 256, i1 false)
  %14 = bitcast [128 x i16]* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %14) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %14, i8 -86, i64 256, i1 false)
  %15 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 0
  %16 = sext i32 %2 to i64
  %17 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %16, i64 0
  %18 = ptrtoint i8* %0 to i64
  %19 = shl i64 %18, 1
  %20 = inttoptr i64 %19 to i16*
  %21 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %16, i64 1
  %22 = add i32 %1, -16
  %23 = zext i32 %22 to i64
  %24 = load i8, i8* %17, align 2
  %25 = zext i8 %24 to i32
  %26 = load i8, i8* %21, align 1
  %27 = zext i8 %26 to i32
  %28 = inttoptr i64 %19 to i8*
  %29 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 16
  %30 = bitcast i16* %29 to i8*
  %31 = getelementptr i16, i16* %20, i64 17
  %32 = bitcast i16* %31 to [144 x i16]*
  %33 = icmp ult [144 x i16]* %9, %32
  %34 = icmp ult i8* %28, %30
  %35 = and i1 %33, %34
  br i1 %35, label %72, label %36

36:                                               ; preds = %8
  %37 = insertelement <8 x i32> undef, i32 %25, i32 0
  %38 = shufflevector <8 x i32> %37, <8 x i32> undef, <8 x i32> zeroinitializer
  %39 = insertelement <8 x i32> undef, i32 %27, i32 0
  %40 = shufflevector <8 x i32> %39, <8 x i32> undef, <8 x i32> zeroinitializer
  %41 = getelementptr i16, i16* %20, i64 16
  %42 = inttoptr i64 %19 to <8 x i16>*
  %43 = load <8 x i16>, <8 x i16>* %42, align 2, !alias.scope !1545
  %44 = zext <8 x i16> %43 to <8 x i32>
  %45 = mul nuw nsw <8 x i32> %38, %44
  %46 = getelementptr inbounds i16, i16* %20, i64 1
  %47 = bitcast i16* %46 to <8 x i16>*
  %48 = load <8 x i16>, <8 x i16>* %47, align 2, !alias.scope !1545
  %49 = zext <8 x i16> %48 to <8 x i32>
  %50 = mul nuw nsw <8 x i32> %40, %49
  %51 = add nuw nsw <8 x i32> %45, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %52 = add nuw nsw <8 x i32> %51, %50
  %53 = lshr <8 x i32> %52, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %54 = trunc <8 x i32> %53 to <8 x i16>
  %55 = bitcast [144 x i16]* %9 to <8 x i16>*
  store <8 x i16> %54, <8 x i16>* %55, align 16, !alias.scope !1548, !noalias !1545
  %56 = getelementptr i16, i16* %20, i64 8
  %57 = bitcast i16* %56 to <8 x i16>*
  %58 = load <8 x i16>, <8 x i16>* %57, align 2, !alias.scope !1545
  %59 = zext <8 x i16> %58 to <8 x i32>
  %60 = mul nuw nsw <8 x i32> %38, %59
  %61 = getelementptr inbounds i16, i16* %20, i64 9
  %62 = bitcast i16* %61 to <8 x i16>*
  %63 = load <8 x i16>, <8 x i16>* %62, align 2, !alias.scope !1545
  %64 = zext <8 x i16> %63 to <8 x i32>
  %65 = mul nuw nsw <8 x i32> %40, %64
  %66 = add nuw nsw <8 x i32> %60, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %67 = add nuw nsw <8 x i32> %66, %65
  %68 = lshr <8 x i32> %67, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %69 = trunc <8 x i32> %68 to <8 x i16>
  %70 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 8
  %71 = bitcast i16* %70 to <8 x i16>*
  store <8 x i16> %69, <8 x i16>* %71, align 16, !alias.scope !1548, !noalias !1545
  br label %102

72:                                               ; preds = %8, %72
  %73 = phi i64 [ %100, %72 ], [ 0, %8 ]
  %74 = phi i16* [ %91, %72 ], [ %20, %8 ]
  %75 = load i16, i16* %74, align 2
  %76 = zext i16 %75 to i32
  %77 = mul nuw nsw i32 %25, %76
  %78 = getelementptr inbounds i16, i16* %74, i64 1
  %79 = load i16, i16* %78, align 2
  %80 = zext i16 %79 to i32
  %81 = mul nuw nsw i32 %27, %80
  %82 = add nuw nsw i32 %77, 64
  %83 = add nuw nsw i32 %82, %81
  %84 = lshr i32 %83, 7
  %85 = trunc i32 %84 to i16
  %86 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 %73
  store i16 %85, i16* %86, align 4
  %87 = or i64 %73, 1
  %88 = load i16, i16* %78, align 2
  %89 = zext i16 %88 to i32
  %90 = mul nuw nsw i32 %25, %89
  %91 = getelementptr inbounds i16, i16* %74, i64 2
  %92 = load i16, i16* %91, align 2
  %93 = zext i16 %92 to i32
  %94 = mul nuw nsw i32 %27, %93
  %95 = add nuw nsw i32 %90, 64
  %96 = add nuw nsw i32 %95, %94
  %97 = lshr i32 %96, 7
  %98 = trunc i32 %97 to i16
  %99 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 %87
  store i16 %98, i16* %99, align 2
  %100 = add nuw nsw i64 %73, 2
  %101 = icmp eq i64 %100, 16
  br i1 %101, label %102, label %72, !llvm.loop !1550

102:                                              ; preds = %72, %36
  %103 = phi i16* [ %41, %36 ], [ %91, %72 ]
  %104 = getelementptr inbounds i16, i16* %103, i64 %23
  %105 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 16
  %106 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 16
  %107 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 32
  %108 = add nuw nsw i64 %23, 17
  %109 = getelementptr i16, i16* %103, i64 %108
  %110 = icmp ult i16* %106, %109
  %111 = icmp ult i16* %104, %107
  %112 = and i1 %110, %111
  br i1 %112, label %912, label %113

113:                                              ; preds = %102
  %114 = insertelement <8 x i32> undef, i32 %25, i32 0
  %115 = shufflevector <8 x i32> %114, <8 x i32> undef, <8 x i32> zeroinitializer
  %116 = insertelement <8 x i32> undef, i32 %27, i32 0
  %117 = shufflevector <8 x i32> %116, <8 x i32> undef, <8 x i32> zeroinitializer
  %118 = getelementptr i16, i16* %104, i64 16
  %119 = bitcast i16* %104 to <8 x i16>*
  %120 = load <8 x i16>, <8 x i16>* %119, align 2, !alias.scope !1551
  %121 = zext <8 x i16> %120 to <8 x i32>
  %122 = mul nuw nsw <8 x i32> %115, %121
  %123 = getelementptr inbounds i16, i16* %104, i64 1
  %124 = bitcast i16* %123 to <8 x i16>*
  %125 = load <8 x i16>, <8 x i16>* %124, align 2, !alias.scope !1551
  %126 = zext <8 x i16> %125 to <8 x i32>
  %127 = mul nuw nsw <8 x i32> %117, %126
  %128 = add nuw nsw <8 x i32> %122, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %129 = add nuw nsw <8 x i32> %128, %127
  %130 = lshr <8 x i32> %129, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %131 = trunc <8 x i32> %130 to <8 x i16>
  %132 = bitcast i16* %105 to <8 x i16>*
  store <8 x i16> %131, <8 x i16>* %132, align 16, !alias.scope !1554, !noalias !1551
  %133 = getelementptr i16, i16* %104, i64 8
  %134 = bitcast i16* %133 to <8 x i16>*
  %135 = load <8 x i16>, <8 x i16>* %134, align 2, !alias.scope !1551
  %136 = zext <8 x i16> %135 to <8 x i32>
  %137 = mul nuw nsw <8 x i32> %115, %136
  %138 = getelementptr inbounds i16, i16* %133, i64 1
  %139 = bitcast i16* %138 to <8 x i16>*
  %140 = load <8 x i16>, <8 x i16>* %139, align 2, !alias.scope !1551
  %141 = zext <8 x i16> %140 to <8 x i32>
  %142 = mul nuw nsw <8 x i32> %117, %141
  %143 = add nuw nsw <8 x i32> %137, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %144 = add nuw nsw <8 x i32> %143, %142
  %145 = lshr <8 x i32> %144, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %146 = trunc <8 x i32> %145 to <8 x i16>
  %147 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 24
  %148 = bitcast i16* %147 to <8 x i16>*
  store <8 x i16> %146, <8 x i16>* %148, align 16, !alias.scope !1554, !noalias !1551
  br label %942

149:                                              ; preds = %1480, %149
  %150 = phi i64 [ %179, %149 ], [ 0, %1480 ]
  %151 = phi i16* [ %178, %149 ], [ %15, %1480 ]
  %152 = load i16, i16* %151, align 2
  %153 = zext i16 %152 to i32
  %154 = mul nuw nsw i32 %1486, %153
  %155 = getelementptr inbounds i16, i16* %151, i64 16
  %156 = load i16, i16* %155, align 2
  %157 = zext i16 %156 to i32
  %158 = mul nuw nsw i32 %1488, %157
  %159 = add nuw nsw i32 %154, 64
  %160 = add nuw nsw i32 %159, %158
  %161 = lshr i32 %160, 7
  %162 = trunc i32 %161 to i16
  %163 = getelementptr inbounds [128 x i16], [128 x i16]* %11, i64 0, i64 %150
  store i16 %162, i16* %163, align 4
  %164 = getelementptr inbounds i16, i16* %151, i64 1
  %165 = or i64 %150, 1
  %166 = load i16, i16* %164, align 2
  %167 = zext i16 %166 to i32
  %168 = mul nuw nsw i32 %1486, %167
  %169 = getelementptr inbounds i16, i16* %151, i64 17
  %170 = load i16, i16* %169, align 2
  %171 = zext i16 %170 to i32
  %172 = mul nuw nsw i32 %1488, %171
  %173 = add nuw nsw i32 %168, 64
  %174 = add nuw nsw i32 %173, %172
  %175 = lshr i32 %174, 7
  %176 = trunc i32 %175 to i16
  %177 = getelementptr inbounds [128 x i16], [128 x i16]* %11, i64 0, i64 %165
  store i16 %176, i16* %177, align 2
  %178 = getelementptr inbounds i16, i16* %151, i64 2
  %179 = add nuw nsw i64 %150, 2
  %180 = icmp eq i64 %179, 16
  br i1 %180, label %181, label %149, !llvm.loop !1556

181:                                              ; preds = %149, %1496
  %182 = phi i16* [ %1501, %1496 ], [ %178, %149 ]
  %183 = getelementptr inbounds [128 x i16], [128 x i16]* %11, i64 0, i64 16
  %184 = getelementptr inbounds [128 x i16], [128 x i16]* %11, i64 0, i64 16
  %185 = getelementptr inbounds [128 x i16], [128 x i16]* %11, i64 0, i64 32
  %186 = getelementptr i16, i16* %182, i64 32
  %187 = icmp ult i16* %184, %186
  %188 = icmp ult i16* %182, %185
  %189 = and i1 %187, %188
  br i1 %189, label %414, label %190

190:                                              ; preds = %181
  %191 = insertelement <8 x i32> undef, i32 %1486, i32 0
  %192 = shufflevector <8 x i32> %191, <8 x i32> undef, <8 x i32> zeroinitializer
  %193 = insertelement <8 x i32> undef, i32 %1488, i32 0
  %194 = shufflevector <8 x i32> %193, <8 x i32> undef, <8 x i32> zeroinitializer
  %195 = getelementptr i16, i16* %182, i64 16
  %196 = bitcast i16* %182 to <8 x i16>*
  %197 = load <8 x i16>, <8 x i16>* %196, align 2, !alias.scope !1557
  %198 = zext <8 x i16> %197 to <8 x i32>
  %199 = mul nuw nsw <8 x i32> %192, %198
  %200 = getelementptr inbounds i16, i16* %182, i64 16
  %201 = bitcast i16* %200 to <8 x i16>*
  %202 = load <8 x i16>, <8 x i16>* %201, align 2, !alias.scope !1557
  %203 = zext <8 x i16> %202 to <8 x i32>
  %204 = mul nuw nsw <8 x i32> %194, %203
  %205 = add nuw nsw <8 x i32> %199, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %206 = add nuw nsw <8 x i32> %205, %204
  %207 = lshr <8 x i32> %206, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %208 = trunc <8 x i32> %207 to <8 x i16>
  %209 = bitcast i16* %183 to <8 x i16>*
  store <8 x i16> %208, <8 x i16>* %209, align 16, !alias.scope !1560, !noalias !1557
  %210 = getelementptr i16, i16* %182, i64 8
  %211 = bitcast i16* %210 to <8 x i16>*
  %212 = load <8 x i16>, <8 x i16>* %211, align 2, !alias.scope !1557
  %213 = zext <8 x i16> %212 to <8 x i32>
  %214 = mul nuw nsw <8 x i32> %192, %213
  %215 = getelementptr inbounds i16, i16* %182, i64 24
  %216 = bitcast i16* %215 to <8 x i16>*
  %217 = load <8 x i16>, <8 x i16>* %216, align 2, !alias.scope !1557
  %218 = zext <8 x i16> %217 to <8 x i32>
  %219 = mul nuw nsw <8 x i32> %194, %218
  %220 = add nuw nsw <8 x i32> %214, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %221 = add nuw nsw <8 x i32> %220, %219
  %222 = lshr <8 x i32> %221, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %223 = trunc <8 x i32> %222 to <8 x i16>
  %224 = getelementptr inbounds [128 x i16], [128 x i16]* %11, i64 0, i64 24
  %225 = bitcast i16* %224 to <8 x i16>*
  store <8 x i16> %223, <8 x i16>* %225, align 16, !alias.scope !1560, !noalias !1557
  br label %446

226:                                              ; preds = %226, %907
  %227 = phi i16* [ %908, %907 ], [ %404, %226 ]
  %228 = phi i32 [ 0, %907 ], [ %407, %226 ]
  %229 = phi i16* [ %911, %907 ], [ %405, %226 ]
  %230 = phi i16* [ %1481, %907 ], [ %406, %226 ]
  %231 = load i16, i16* %229, align 2
  %232 = zext i16 %231 to i32
  %233 = load i16, i16* %230, align 2
  %234 = zext i16 %233 to i32
  %235 = add nuw nsw i32 %232, 1
  %236 = add nuw nsw i32 %235, %234
  %237 = lshr i32 %236, 1
  %238 = trunc i32 %237 to i16
  store i16 %238, i16* %227, align 2
  %239 = getelementptr inbounds i16, i16* %229, i64 1
  %240 = load i16, i16* %239, align 2
  %241 = zext i16 %240 to i32
  %242 = getelementptr inbounds i16, i16* %230, i64 1
  %243 = load i16, i16* %242, align 2
  %244 = zext i16 %243 to i32
  %245 = add nuw nsw i32 %241, 1
  %246 = add nuw nsw i32 %245, %244
  %247 = lshr i32 %246, 1
  %248 = trunc i32 %247 to i16
  %249 = getelementptr inbounds i16, i16* %227, i64 1
  store i16 %248, i16* %249, align 2
  %250 = getelementptr inbounds i16, i16* %229, i64 2
  %251 = load i16, i16* %250, align 2
  %252 = zext i16 %251 to i32
  %253 = getelementptr inbounds i16, i16* %230, i64 2
  %254 = load i16, i16* %253, align 2
  %255 = zext i16 %254 to i32
  %256 = add nuw nsw i32 %252, 1
  %257 = add nuw nsw i32 %256, %255
  %258 = lshr i32 %257, 1
  %259 = trunc i32 %258 to i16
  %260 = getelementptr inbounds i16, i16* %227, i64 2
  store i16 %259, i16* %260, align 2
  %261 = getelementptr inbounds i16, i16* %229, i64 3
  %262 = load i16, i16* %261, align 2
  %263 = zext i16 %262 to i32
  %264 = getelementptr inbounds i16, i16* %230, i64 3
  %265 = load i16, i16* %264, align 2
  %266 = zext i16 %265 to i32
  %267 = add nuw nsw i32 %263, 1
  %268 = add nuw nsw i32 %267, %266
  %269 = lshr i32 %268, 1
  %270 = trunc i32 %269 to i16
  %271 = getelementptr inbounds i16, i16* %227, i64 3
  store i16 %270, i16* %271, align 2
  %272 = getelementptr inbounds i16, i16* %229, i64 4
  %273 = load i16, i16* %272, align 2
  %274 = zext i16 %273 to i32
  %275 = getelementptr inbounds i16, i16* %230, i64 4
  %276 = load i16, i16* %275, align 2
  %277 = zext i16 %276 to i32
  %278 = add nuw nsw i32 %274, 1
  %279 = add nuw nsw i32 %278, %277
  %280 = lshr i32 %279, 1
  %281 = trunc i32 %280 to i16
  %282 = getelementptr inbounds i16, i16* %227, i64 4
  store i16 %281, i16* %282, align 2
  %283 = getelementptr inbounds i16, i16* %229, i64 5
  %284 = load i16, i16* %283, align 2
  %285 = zext i16 %284 to i32
  %286 = getelementptr inbounds i16, i16* %230, i64 5
  %287 = load i16, i16* %286, align 2
  %288 = zext i16 %287 to i32
  %289 = add nuw nsw i32 %285, 1
  %290 = add nuw nsw i32 %289, %288
  %291 = lshr i32 %290, 1
  %292 = trunc i32 %291 to i16
  %293 = getelementptr inbounds i16, i16* %227, i64 5
  store i16 %292, i16* %293, align 2
  %294 = getelementptr inbounds i16, i16* %229, i64 6
  %295 = load i16, i16* %294, align 2
  %296 = zext i16 %295 to i32
  %297 = getelementptr inbounds i16, i16* %230, i64 6
  %298 = load i16, i16* %297, align 2
  %299 = zext i16 %298 to i32
  %300 = add nuw nsw i32 %296, 1
  %301 = add nuw nsw i32 %300, %299
  %302 = lshr i32 %301, 1
  %303 = trunc i32 %302 to i16
  %304 = getelementptr inbounds i16, i16* %227, i64 6
  store i16 %303, i16* %304, align 2
  %305 = getelementptr inbounds i16, i16* %229, i64 7
  %306 = load i16, i16* %305, align 2
  %307 = zext i16 %306 to i32
  %308 = getelementptr inbounds i16, i16* %230, i64 7
  %309 = load i16, i16* %308, align 2
  %310 = zext i16 %309 to i32
  %311 = add nuw nsw i32 %307, 1
  %312 = add nuw nsw i32 %311, %310
  %313 = lshr i32 %312, 1
  %314 = trunc i32 %313 to i16
  %315 = getelementptr inbounds i16, i16* %227, i64 7
  store i16 %314, i16* %315, align 2
  %316 = getelementptr inbounds i16, i16* %229, i64 8
  %317 = load i16, i16* %316, align 2
  %318 = zext i16 %317 to i32
  %319 = getelementptr inbounds i16, i16* %230, i64 8
  %320 = load i16, i16* %319, align 2
  %321 = zext i16 %320 to i32
  %322 = add nuw nsw i32 %318, 1
  %323 = add nuw nsw i32 %322, %321
  %324 = lshr i32 %323, 1
  %325 = trunc i32 %324 to i16
  %326 = getelementptr inbounds i16, i16* %227, i64 8
  store i16 %325, i16* %326, align 2
  %327 = getelementptr inbounds i16, i16* %229, i64 9
  %328 = load i16, i16* %327, align 2
  %329 = zext i16 %328 to i32
  %330 = getelementptr inbounds i16, i16* %230, i64 9
  %331 = load i16, i16* %330, align 2
  %332 = zext i16 %331 to i32
  %333 = add nuw nsw i32 %329, 1
  %334 = add nuw nsw i32 %333, %332
  %335 = lshr i32 %334, 1
  %336 = trunc i32 %335 to i16
  %337 = getelementptr inbounds i16, i16* %227, i64 9
  store i16 %336, i16* %337, align 2
  %338 = getelementptr inbounds i16, i16* %229, i64 10
  %339 = load i16, i16* %338, align 2
  %340 = zext i16 %339 to i32
  %341 = getelementptr inbounds i16, i16* %230, i64 10
  %342 = load i16, i16* %341, align 2
  %343 = zext i16 %342 to i32
  %344 = add nuw nsw i32 %340, 1
  %345 = add nuw nsw i32 %344, %343
  %346 = lshr i32 %345, 1
  %347 = trunc i32 %346 to i16
  %348 = getelementptr inbounds i16, i16* %227, i64 10
  store i16 %347, i16* %348, align 2
  %349 = getelementptr inbounds i16, i16* %229, i64 11
  %350 = load i16, i16* %349, align 2
  %351 = zext i16 %350 to i32
  %352 = getelementptr inbounds i16, i16* %230, i64 11
  %353 = load i16, i16* %352, align 2
  %354 = zext i16 %353 to i32
  %355 = add nuw nsw i32 %351, 1
  %356 = add nuw nsw i32 %355, %354
  %357 = lshr i32 %356, 1
  %358 = trunc i32 %357 to i16
  %359 = getelementptr inbounds i16, i16* %227, i64 11
  store i16 %358, i16* %359, align 2
  %360 = getelementptr inbounds i16, i16* %229, i64 12
  %361 = load i16, i16* %360, align 2
  %362 = zext i16 %361 to i32
  %363 = getelementptr inbounds i16, i16* %230, i64 12
  %364 = load i16, i16* %363, align 2
  %365 = zext i16 %364 to i32
  %366 = add nuw nsw i32 %362, 1
  %367 = add nuw nsw i32 %366, %365
  %368 = lshr i32 %367, 1
  %369 = trunc i32 %368 to i16
  %370 = getelementptr inbounds i16, i16* %227, i64 12
  store i16 %369, i16* %370, align 2
  %371 = getelementptr inbounds i16, i16* %229, i64 13
  %372 = load i16, i16* %371, align 2
  %373 = zext i16 %372 to i32
  %374 = getelementptr inbounds i16, i16* %230, i64 13
  %375 = load i16, i16* %374, align 2
  %376 = zext i16 %375 to i32
  %377 = add nuw nsw i32 %373, 1
  %378 = add nuw nsw i32 %377, %376
  %379 = lshr i32 %378, 1
  %380 = trunc i32 %379 to i16
  %381 = getelementptr inbounds i16, i16* %227, i64 13
  store i16 %380, i16* %381, align 2
  %382 = getelementptr inbounds i16, i16* %229, i64 14
  %383 = load i16, i16* %382, align 2
  %384 = zext i16 %383 to i32
  %385 = getelementptr inbounds i16, i16* %230, i64 14
  %386 = load i16, i16* %385, align 2
  %387 = zext i16 %386 to i32
  %388 = add nuw nsw i32 %384, 1
  %389 = add nuw nsw i32 %388, %387
  %390 = lshr i32 %389, 1
  %391 = trunc i32 %390 to i16
  %392 = getelementptr inbounds i16, i16* %227, i64 14
  store i16 %391, i16* %392, align 2
  %393 = getelementptr inbounds i16, i16* %229, i64 15
  %394 = load i16, i16* %393, align 2
  %395 = zext i16 %394 to i32
  %396 = getelementptr inbounds i16, i16* %230, i64 15
  %397 = load i16, i16* %396, align 2
  %398 = zext i16 %397 to i32
  %399 = add nuw nsw i32 %395, 1
  %400 = add nuw nsw i32 %399, %398
  %401 = lshr i32 %400, 1
  %402 = trunc i32 %401 to i16
  %403 = getelementptr inbounds i16, i16* %227, i64 15
  store i16 %402, i16* %403, align 2
  %404 = getelementptr inbounds i16, i16* %227, i64 16
  %405 = getelementptr inbounds i16, i16* %229, i64 16
  %406 = getelementptr inbounds i16, i16* %230, i64 16
  %407 = add nuw nsw i32 %228, 1
  %408 = icmp eq i32 %407, 8
  br i1 %408, label %409, label %226

409:                                              ; preds = %226
  %410 = ptrtoint [128 x i16]* %13 to i64
  %411 = lshr exact i64 %410, 1
  %412 = inttoptr i64 %411 to i8*
  %413 = call i32 @vpx_highbd_12_variance16x8_c(i8* nonnull %412, i32 16, i8* %4, i32 %5, i32* %6)
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %14) #4
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %12) #4
  call void @llvm.lifetime.end.p0i8(i64 288, i8* nonnull %10) #4
  ret i32 %413

414:                                              ; preds = %181, %414
  %415 = phi i64 [ %444, %414 ], [ 0, %181 ]
  %416 = phi i16* [ %443, %414 ], [ %182, %181 ]
  %417 = load i16, i16* %416, align 2
  %418 = zext i16 %417 to i32
  %419 = mul nuw nsw i32 %1486, %418
  %420 = getelementptr inbounds i16, i16* %416, i64 16
  %421 = load i16, i16* %420, align 2
  %422 = zext i16 %421 to i32
  %423 = mul nuw nsw i32 %1488, %422
  %424 = add nuw nsw i32 %419, 64
  %425 = add nuw nsw i32 %424, %423
  %426 = lshr i32 %425, 7
  %427 = trunc i32 %426 to i16
  %428 = getelementptr inbounds i16, i16* %183, i64 %415
  store i16 %427, i16* %428, align 4
  %429 = getelementptr inbounds i16, i16* %416, i64 1
  %430 = or i64 %415, 1
  %431 = load i16, i16* %429, align 2
  %432 = zext i16 %431 to i32
  %433 = mul nuw nsw i32 %1486, %432
  %434 = getelementptr inbounds i16, i16* %416, i64 17
  %435 = load i16, i16* %434, align 2
  %436 = zext i16 %435 to i32
  %437 = mul nuw nsw i32 %1488, %436
  %438 = add nuw nsw i32 %433, 64
  %439 = add nuw nsw i32 %438, %437
  %440 = lshr i32 %439, 7
  %441 = trunc i32 %440 to i16
  %442 = getelementptr inbounds i16, i16* %183, i64 %430
  store i16 %441, i16* %442, align 2
  %443 = getelementptr inbounds i16, i16* %416, i64 2
  %444 = add nuw nsw i64 %415, 2
  %445 = icmp eq i64 %444, 16
  br i1 %445, label %446, label %414, !llvm.loop !1562

446:                                              ; preds = %414, %190
  %447 = phi i16* [ %195, %190 ], [ %443, %414 ]
  %448 = getelementptr inbounds [128 x i16], [128 x i16]* %11, i64 0, i64 32
  %449 = getelementptr inbounds [128 x i16], [128 x i16]* %11, i64 0, i64 32
  %450 = getelementptr inbounds [128 x i16], [128 x i16]* %11, i64 0, i64 48
  %451 = getelementptr i16, i16* %447, i64 32
  %452 = icmp ult i16* %449, %451
  %453 = icmp ult i16* %447, %450
  %454 = and i1 %452, %453
  br i1 %454, label %491, label %455

455:                                              ; preds = %446
  %456 = insertelement <8 x i32> undef, i32 %1486, i32 0
  %457 = shufflevector <8 x i32> %456, <8 x i32> undef, <8 x i32> zeroinitializer
  %458 = insertelement <8 x i32> undef, i32 %1488, i32 0
  %459 = shufflevector <8 x i32> %458, <8 x i32> undef, <8 x i32> zeroinitializer
  %460 = getelementptr i16, i16* %447, i64 16
  %461 = bitcast i16* %447 to <8 x i16>*
  %462 = load <8 x i16>, <8 x i16>* %461, align 2, !alias.scope !1563
  %463 = zext <8 x i16> %462 to <8 x i32>
  %464 = mul nuw nsw <8 x i32> %457, %463
  %465 = getelementptr inbounds i16, i16* %447, i64 16
  %466 = bitcast i16* %465 to <8 x i16>*
  %467 = load <8 x i16>, <8 x i16>* %466, align 2, !alias.scope !1563
  %468 = zext <8 x i16> %467 to <8 x i32>
  %469 = mul nuw nsw <8 x i32> %459, %468
  %470 = add nuw nsw <8 x i32> %464, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %471 = add nuw nsw <8 x i32> %470, %469
  %472 = lshr <8 x i32> %471, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %473 = trunc <8 x i32> %472 to <8 x i16>
  %474 = bitcast i16* %448 to <8 x i16>*
  store <8 x i16> %473, <8 x i16>* %474, align 16, !alias.scope !1566, !noalias !1563
  %475 = getelementptr i16, i16* %447, i64 8
  %476 = bitcast i16* %475 to <8 x i16>*
  %477 = load <8 x i16>, <8 x i16>* %476, align 2, !alias.scope !1563
  %478 = zext <8 x i16> %477 to <8 x i32>
  %479 = mul nuw nsw <8 x i32> %457, %478
  %480 = getelementptr inbounds i16, i16* %447, i64 24
  %481 = bitcast i16* %480 to <8 x i16>*
  %482 = load <8 x i16>, <8 x i16>* %481, align 2, !alias.scope !1563
  %483 = zext <8 x i16> %482 to <8 x i32>
  %484 = mul nuw nsw <8 x i32> %459, %483
  %485 = add nuw nsw <8 x i32> %479, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %486 = add nuw nsw <8 x i32> %485, %484
  %487 = lshr <8 x i32> %486, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %488 = trunc <8 x i32> %487 to <8 x i16>
  %489 = getelementptr inbounds [128 x i16], [128 x i16]* %11, i64 0, i64 40
  %490 = bitcast i16* %489 to <8 x i16>*
  store <8 x i16> %488, <8 x i16>* %490, align 16, !alias.scope !1566, !noalias !1563
  br label %523

491:                                              ; preds = %446, %491
  %492 = phi i64 [ %521, %491 ], [ 0, %446 ]
  %493 = phi i16* [ %520, %491 ], [ %447, %446 ]
  %494 = load i16, i16* %493, align 2
  %495 = zext i16 %494 to i32
  %496 = mul nuw nsw i32 %1486, %495
  %497 = getelementptr inbounds i16, i16* %493, i64 16
  %498 = load i16, i16* %497, align 2
  %499 = zext i16 %498 to i32
  %500 = mul nuw nsw i32 %1488, %499
  %501 = add nuw nsw i32 %496, 64
  %502 = add nuw nsw i32 %501, %500
  %503 = lshr i32 %502, 7
  %504 = trunc i32 %503 to i16
  %505 = getelementptr inbounds i16, i16* %448, i64 %492
  store i16 %504, i16* %505, align 4
  %506 = getelementptr inbounds i16, i16* %493, i64 1
  %507 = or i64 %492, 1
  %508 = load i16, i16* %506, align 2
  %509 = zext i16 %508 to i32
  %510 = mul nuw nsw i32 %1486, %509
  %511 = getelementptr inbounds i16, i16* %493, i64 17
  %512 = load i16, i16* %511, align 2
  %513 = zext i16 %512 to i32
  %514 = mul nuw nsw i32 %1488, %513
  %515 = add nuw nsw i32 %510, 64
  %516 = add nuw nsw i32 %515, %514
  %517 = lshr i32 %516, 7
  %518 = trunc i32 %517 to i16
  %519 = getelementptr inbounds i16, i16* %448, i64 %507
  store i16 %518, i16* %519, align 2
  %520 = getelementptr inbounds i16, i16* %493, i64 2
  %521 = add nuw nsw i64 %492, 2
  %522 = icmp eq i64 %521, 16
  br i1 %522, label %523, label %491, !llvm.loop !1568

523:                                              ; preds = %491, %455
  %524 = phi i16* [ %460, %455 ], [ %520, %491 ]
  %525 = getelementptr inbounds [128 x i16], [128 x i16]* %11, i64 0, i64 48
  %526 = getelementptr inbounds [128 x i16], [128 x i16]* %11, i64 0, i64 48
  %527 = getelementptr inbounds [128 x i16], [128 x i16]* %11, i64 0, i64 64
  %528 = getelementptr i16, i16* %524, i64 32
  %529 = icmp ult i16* %526, %528
  %530 = icmp ult i16* %524, %527
  %531 = and i1 %529, %530
  br i1 %531, label %568, label %532

532:                                              ; preds = %523
  %533 = insertelement <8 x i32> undef, i32 %1486, i32 0
  %534 = shufflevector <8 x i32> %533, <8 x i32> undef, <8 x i32> zeroinitializer
  %535 = insertelement <8 x i32> undef, i32 %1488, i32 0
  %536 = shufflevector <8 x i32> %535, <8 x i32> undef, <8 x i32> zeroinitializer
  %537 = getelementptr i16, i16* %524, i64 16
  %538 = bitcast i16* %524 to <8 x i16>*
  %539 = load <8 x i16>, <8 x i16>* %538, align 2, !alias.scope !1569
  %540 = zext <8 x i16> %539 to <8 x i32>
  %541 = mul nuw nsw <8 x i32> %534, %540
  %542 = getelementptr inbounds i16, i16* %524, i64 16
  %543 = bitcast i16* %542 to <8 x i16>*
  %544 = load <8 x i16>, <8 x i16>* %543, align 2, !alias.scope !1569
  %545 = zext <8 x i16> %544 to <8 x i32>
  %546 = mul nuw nsw <8 x i32> %536, %545
  %547 = add nuw nsw <8 x i32> %541, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %548 = add nuw nsw <8 x i32> %547, %546
  %549 = lshr <8 x i32> %548, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %550 = trunc <8 x i32> %549 to <8 x i16>
  %551 = bitcast i16* %525 to <8 x i16>*
  store <8 x i16> %550, <8 x i16>* %551, align 16, !alias.scope !1572, !noalias !1569
  %552 = getelementptr i16, i16* %524, i64 8
  %553 = bitcast i16* %552 to <8 x i16>*
  %554 = load <8 x i16>, <8 x i16>* %553, align 2, !alias.scope !1569
  %555 = zext <8 x i16> %554 to <8 x i32>
  %556 = mul nuw nsw <8 x i32> %534, %555
  %557 = getelementptr inbounds i16, i16* %524, i64 24
  %558 = bitcast i16* %557 to <8 x i16>*
  %559 = load <8 x i16>, <8 x i16>* %558, align 2, !alias.scope !1569
  %560 = zext <8 x i16> %559 to <8 x i32>
  %561 = mul nuw nsw <8 x i32> %536, %560
  %562 = add nuw nsw <8 x i32> %556, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %563 = add nuw nsw <8 x i32> %562, %561
  %564 = lshr <8 x i32> %563, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %565 = trunc <8 x i32> %564 to <8 x i16>
  %566 = getelementptr inbounds [128 x i16], [128 x i16]* %11, i64 0, i64 56
  %567 = bitcast i16* %566 to <8 x i16>*
  store <8 x i16> %565, <8 x i16>* %567, align 16, !alias.scope !1572, !noalias !1569
  br label %600

568:                                              ; preds = %523, %568
  %569 = phi i64 [ %598, %568 ], [ 0, %523 ]
  %570 = phi i16* [ %597, %568 ], [ %524, %523 ]
  %571 = load i16, i16* %570, align 2
  %572 = zext i16 %571 to i32
  %573 = mul nuw nsw i32 %1486, %572
  %574 = getelementptr inbounds i16, i16* %570, i64 16
  %575 = load i16, i16* %574, align 2
  %576 = zext i16 %575 to i32
  %577 = mul nuw nsw i32 %1488, %576
  %578 = add nuw nsw i32 %573, 64
  %579 = add nuw nsw i32 %578, %577
  %580 = lshr i32 %579, 7
  %581 = trunc i32 %580 to i16
  %582 = getelementptr inbounds i16, i16* %525, i64 %569
  store i16 %581, i16* %582, align 4
  %583 = getelementptr inbounds i16, i16* %570, i64 1
  %584 = or i64 %569, 1
  %585 = load i16, i16* %583, align 2
  %586 = zext i16 %585 to i32
  %587 = mul nuw nsw i32 %1486, %586
  %588 = getelementptr inbounds i16, i16* %570, i64 17
  %589 = load i16, i16* %588, align 2
  %590 = zext i16 %589 to i32
  %591 = mul nuw nsw i32 %1488, %590
  %592 = add nuw nsw i32 %587, 64
  %593 = add nuw nsw i32 %592, %591
  %594 = lshr i32 %593, 7
  %595 = trunc i32 %594 to i16
  %596 = getelementptr inbounds i16, i16* %525, i64 %584
  store i16 %595, i16* %596, align 2
  %597 = getelementptr inbounds i16, i16* %570, i64 2
  %598 = add nuw nsw i64 %569, 2
  %599 = icmp eq i64 %598, 16
  br i1 %599, label %600, label %568, !llvm.loop !1574

600:                                              ; preds = %568, %532
  %601 = phi i16* [ %537, %532 ], [ %597, %568 ]
  %602 = getelementptr inbounds [128 x i16], [128 x i16]* %11, i64 0, i64 64
  %603 = getelementptr inbounds [128 x i16], [128 x i16]* %11, i64 0, i64 64
  %604 = getelementptr inbounds [128 x i16], [128 x i16]* %11, i64 0, i64 80
  %605 = getelementptr i16, i16* %601, i64 32
  %606 = icmp ult i16* %603, %605
  %607 = icmp ult i16* %601, %604
  %608 = and i1 %606, %607
  br i1 %608, label %645, label %609

609:                                              ; preds = %600
  %610 = insertelement <8 x i32> undef, i32 %1486, i32 0
  %611 = shufflevector <8 x i32> %610, <8 x i32> undef, <8 x i32> zeroinitializer
  %612 = insertelement <8 x i32> undef, i32 %1488, i32 0
  %613 = shufflevector <8 x i32> %612, <8 x i32> undef, <8 x i32> zeroinitializer
  %614 = getelementptr i16, i16* %601, i64 16
  %615 = bitcast i16* %601 to <8 x i16>*
  %616 = load <8 x i16>, <8 x i16>* %615, align 2, !alias.scope !1575
  %617 = zext <8 x i16> %616 to <8 x i32>
  %618 = mul nuw nsw <8 x i32> %611, %617
  %619 = getelementptr inbounds i16, i16* %601, i64 16
  %620 = bitcast i16* %619 to <8 x i16>*
  %621 = load <8 x i16>, <8 x i16>* %620, align 2, !alias.scope !1575
  %622 = zext <8 x i16> %621 to <8 x i32>
  %623 = mul nuw nsw <8 x i32> %613, %622
  %624 = add nuw nsw <8 x i32> %618, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %625 = add nuw nsw <8 x i32> %624, %623
  %626 = lshr <8 x i32> %625, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %627 = trunc <8 x i32> %626 to <8 x i16>
  %628 = bitcast i16* %602 to <8 x i16>*
  store <8 x i16> %627, <8 x i16>* %628, align 16, !alias.scope !1578, !noalias !1575
  %629 = getelementptr i16, i16* %601, i64 8
  %630 = bitcast i16* %629 to <8 x i16>*
  %631 = load <8 x i16>, <8 x i16>* %630, align 2, !alias.scope !1575
  %632 = zext <8 x i16> %631 to <8 x i32>
  %633 = mul nuw nsw <8 x i32> %611, %632
  %634 = getelementptr inbounds i16, i16* %601, i64 24
  %635 = bitcast i16* %634 to <8 x i16>*
  %636 = load <8 x i16>, <8 x i16>* %635, align 2, !alias.scope !1575
  %637 = zext <8 x i16> %636 to <8 x i32>
  %638 = mul nuw nsw <8 x i32> %613, %637
  %639 = add nuw nsw <8 x i32> %633, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %640 = add nuw nsw <8 x i32> %639, %638
  %641 = lshr <8 x i32> %640, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %642 = trunc <8 x i32> %641 to <8 x i16>
  %643 = getelementptr inbounds [128 x i16], [128 x i16]* %11, i64 0, i64 72
  %644 = bitcast i16* %643 to <8 x i16>*
  store <8 x i16> %642, <8 x i16>* %644, align 16, !alias.scope !1578, !noalias !1575
  br label %677

645:                                              ; preds = %600, %645
  %646 = phi i64 [ %675, %645 ], [ 0, %600 ]
  %647 = phi i16* [ %674, %645 ], [ %601, %600 ]
  %648 = load i16, i16* %647, align 2
  %649 = zext i16 %648 to i32
  %650 = mul nuw nsw i32 %1486, %649
  %651 = getelementptr inbounds i16, i16* %647, i64 16
  %652 = load i16, i16* %651, align 2
  %653 = zext i16 %652 to i32
  %654 = mul nuw nsw i32 %1488, %653
  %655 = add nuw nsw i32 %650, 64
  %656 = add nuw nsw i32 %655, %654
  %657 = lshr i32 %656, 7
  %658 = trunc i32 %657 to i16
  %659 = getelementptr inbounds i16, i16* %602, i64 %646
  store i16 %658, i16* %659, align 4
  %660 = getelementptr inbounds i16, i16* %647, i64 1
  %661 = or i64 %646, 1
  %662 = load i16, i16* %660, align 2
  %663 = zext i16 %662 to i32
  %664 = mul nuw nsw i32 %1486, %663
  %665 = getelementptr inbounds i16, i16* %647, i64 17
  %666 = load i16, i16* %665, align 2
  %667 = zext i16 %666 to i32
  %668 = mul nuw nsw i32 %1488, %667
  %669 = add nuw nsw i32 %664, 64
  %670 = add nuw nsw i32 %669, %668
  %671 = lshr i32 %670, 7
  %672 = trunc i32 %671 to i16
  %673 = getelementptr inbounds i16, i16* %602, i64 %661
  store i16 %672, i16* %673, align 2
  %674 = getelementptr inbounds i16, i16* %647, i64 2
  %675 = add nuw nsw i64 %646, 2
  %676 = icmp eq i64 %675, 16
  br i1 %676, label %677, label %645, !llvm.loop !1580

677:                                              ; preds = %645, %609
  %678 = phi i16* [ %614, %609 ], [ %674, %645 ]
  %679 = getelementptr inbounds [128 x i16], [128 x i16]* %11, i64 0, i64 80
  %680 = getelementptr inbounds [128 x i16], [128 x i16]* %11, i64 0, i64 80
  %681 = getelementptr inbounds [128 x i16], [128 x i16]* %11, i64 0, i64 96
  %682 = getelementptr i16, i16* %678, i64 32
  %683 = icmp ult i16* %680, %682
  %684 = icmp ult i16* %678, %681
  %685 = and i1 %683, %684
  br i1 %685, label %722, label %686

686:                                              ; preds = %677
  %687 = insertelement <8 x i32> undef, i32 %1486, i32 0
  %688 = shufflevector <8 x i32> %687, <8 x i32> undef, <8 x i32> zeroinitializer
  %689 = insertelement <8 x i32> undef, i32 %1488, i32 0
  %690 = shufflevector <8 x i32> %689, <8 x i32> undef, <8 x i32> zeroinitializer
  %691 = getelementptr i16, i16* %678, i64 16
  %692 = bitcast i16* %678 to <8 x i16>*
  %693 = load <8 x i16>, <8 x i16>* %692, align 2, !alias.scope !1581
  %694 = zext <8 x i16> %693 to <8 x i32>
  %695 = mul nuw nsw <8 x i32> %688, %694
  %696 = getelementptr inbounds i16, i16* %678, i64 16
  %697 = bitcast i16* %696 to <8 x i16>*
  %698 = load <8 x i16>, <8 x i16>* %697, align 2, !alias.scope !1581
  %699 = zext <8 x i16> %698 to <8 x i32>
  %700 = mul nuw nsw <8 x i32> %690, %699
  %701 = add nuw nsw <8 x i32> %695, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %702 = add nuw nsw <8 x i32> %701, %700
  %703 = lshr <8 x i32> %702, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %704 = trunc <8 x i32> %703 to <8 x i16>
  %705 = bitcast i16* %679 to <8 x i16>*
  store <8 x i16> %704, <8 x i16>* %705, align 16, !alias.scope !1584, !noalias !1581
  %706 = getelementptr i16, i16* %678, i64 8
  %707 = bitcast i16* %706 to <8 x i16>*
  %708 = load <8 x i16>, <8 x i16>* %707, align 2, !alias.scope !1581
  %709 = zext <8 x i16> %708 to <8 x i32>
  %710 = mul nuw nsw <8 x i32> %688, %709
  %711 = getelementptr inbounds i16, i16* %678, i64 24
  %712 = bitcast i16* %711 to <8 x i16>*
  %713 = load <8 x i16>, <8 x i16>* %712, align 2, !alias.scope !1581
  %714 = zext <8 x i16> %713 to <8 x i32>
  %715 = mul nuw nsw <8 x i32> %690, %714
  %716 = add nuw nsw <8 x i32> %710, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %717 = add nuw nsw <8 x i32> %716, %715
  %718 = lshr <8 x i32> %717, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %719 = trunc <8 x i32> %718 to <8 x i16>
  %720 = getelementptr inbounds [128 x i16], [128 x i16]* %11, i64 0, i64 88
  %721 = bitcast i16* %720 to <8 x i16>*
  store <8 x i16> %719, <8 x i16>* %721, align 16, !alias.scope !1584, !noalias !1581
  br label %754

722:                                              ; preds = %677, %722
  %723 = phi i64 [ %752, %722 ], [ 0, %677 ]
  %724 = phi i16* [ %751, %722 ], [ %678, %677 ]
  %725 = load i16, i16* %724, align 2
  %726 = zext i16 %725 to i32
  %727 = mul nuw nsw i32 %1486, %726
  %728 = getelementptr inbounds i16, i16* %724, i64 16
  %729 = load i16, i16* %728, align 2
  %730 = zext i16 %729 to i32
  %731 = mul nuw nsw i32 %1488, %730
  %732 = add nuw nsw i32 %727, 64
  %733 = add nuw nsw i32 %732, %731
  %734 = lshr i32 %733, 7
  %735 = trunc i32 %734 to i16
  %736 = getelementptr inbounds i16, i16* %679, i64 %723
  store i16 %735, i16* %736, align 4
  %737 = getelementptr inbounds i16, i16* %724, i64 1
  %738 = or i64 %723, 1
  %739 = load i16, i16* %737, align 2
  %740 = zext i16 %739 to i32
  %741 = mul nuw nsw i32 %1486, %740
  %742 = getelementptr inbounds i16, i16* %724, i64 17
  %743 = load i16, i16* %742, align 2
  %744 = zext i16 %743 to i32
  %745 = mul nuw nsw i32 %1488, %744
  %746 = add nuw nsw i32 %741, 64
  %747 = add nuw nsw i32 %746, %745
  %748 = lshr i32 %747, 7
  %749 = trunc i32 %748 to i16
  %750 = getelementptr inbounds i16, i16* %679, i64 %738
  store i16 %749, i16* %750, align 2
  %751 = getelementptr inbounds i16, i16* %724, i64 2
  %752 = add nuw nsw i64 %723, 2
  %753 = icmp eq i64 %752, 16
  br i1 %753, label %754, label %722, !llvm.loop !1586

754:                                              ; preds = %722, %686
  %755 = phi i16* [ %691, %686 ], [ %751, %722 ]
  %756 = getelementptr inbounds [128 x i16], [128 x i16]* %11, i64 0, i64 96
  %757 = getelementptr inbounds [128 x i16], [128 x i16]* %11, i64 0, i64 96
  %758 = getelementptr inbounds [128 x i16], [128 x i16]* %11, i64 0, i64 112
  %759 = getelementptr i16, i16* %755, i64 32
  %760 = icmp ult i16* %757, %759
  %761 = icmp ult i16* %755, %758
  %762 = and i1 %760, %761
  br i1 %762, label %799, label %763

763:                                              ; preds = %754
  %764 = insertelement <8 x i32> undef, i32 %1486, i32 0
  %765 = shufflevector <8 x i32> %764, <8 x i32> undef, <8 x i32> zeroinitializer
  %766 = insertelement <8 x i32> undef, i32 %1488, i32 0
  %767 = shufflevector <8 x i32> %766, <8 x i32> undef, <8 x i32> zeroinitializer
  %768 = getelementptr i16, i16* %755, i64 16
  %769 = bitcast i16* %755 to <8 x i16>*
  %770 = load <8 x i16>, <8 x i16>* %769, align 2, !alias.scope !1587
  %771 = zext <8 x i16> %770 to <8 x i32>
  %772 = mul nuw nsw <8 x i32> %765, %771
  %773 = getelementptr inbounds i16, i16* %755, i64 16
  %774 = bitcast i16* %773 to <8 x i16>*
  %775 = load <8 x i16>, <8 x i16>* %774, align 2, !alias.scope !1587
  %776 = zext <8 x i16> %775 to <8 x i32>
  %777 = mul nuw nsw <8 x i32> %767, %776
  %778 = add nuw nsw <8 x i32> %772, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %779 = add nuw nsw <8 x i32> %778, %777
  %780 = lshr <8 x i32> %779, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %781 = trunc <8 x i32> %780 to <8 x i16>
  %782 = bitcast i16* %756 to <8 x i16>*
  store <8 x i16> %781, <8 x i16>* %782, align 16, !alias.scope !1590, !noalias !1587
  %783 = getelementptr i16, i16* %755, i64 8
  %784 = bitcast i16* %783 to <8 x i16>*
  %785 = load <8 x i16>, <8 x i16>* %784, align 2, !alias.scope !1587
  %786 = zext <8 x i16> %785 to <8 x i32>
  %787 = mul nuw nsw <8 x i32> %765, %786
  %788 = getelementptr inbounds i16, i16* %755, i64 24
  %789 = bitcast i16* %788 to <8 x i16>*
  %790 = load <8 x i16>, <8 x i16>* %789, align 2, !alias.scope !1587
  %791 = zext <8 x i16> %790 to <8 x i32>
  %792 = mul nuw nsw <8 x i32> %767, %791
  %793 = add nuw nsw <8 x i32> %787, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %794 = add nuw nsw <8 x i32> %793, %792
  %795 = lshr <8 x i32> %794, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %796 = trunc <8 x i32> %795 to <8 x i16>
  %797 = getelementptr inbounds [128 x i16], [128 x i16]* %11, i64 0, i64 104
  %798 = bitcast i16* %797 to <8 x i16>*
  store <8 x i16> %796, <8 x i16>* %798, align 16, !alias.scope !1590, !noalias !1587
  br label %831

799:                                              ; preds = %754, %799
  %800 = phi i64 [ %829, %799 ], [ 0, %754 ]
  %801 = phi i16* [ %828, %799 ], [ %755, %754 ]
  %802 = load i16, i16* %801, align 2
  %803 = zext i16 %802 to i32
  %804 = mul nuw nsw i32 %1486, %803
  %805 = getelementptr inbounds i16, i16* %801, i64 16
  %806 = load i16, i16* %805, align 2
  %807 = zext i16 %806 to i32
  %808 = mul nuw nsw i32 %1488, %807
  %809 = add nuw nsw i32 %804, 64
  %810 = add nuw nsw i32 %809, %808
  %811 = lshr i32 %810, 7
  %812 = trunc i32 %811 to i16
  %813 = getelementptr inbounds i16, i16* %756, i64 %800
  store i16 %812, i16* %813, align 4
  %814 = getelementptr inbounds i16, i16* %801, i64 1
  %815 = or i64 %800, 1
  %816 = load i16, i16* %814, align 2
  %817 = zext i16 %816 to i32
  %818 = mul nuw nsw i32 %1486, %817
  %819 = getelementptr inbounds i16, i16* %801, i64 17
  %820 = load i16, i16* %819, align 2
  %821 = zext i16 %820 to i32
  %822 = mul nuw nsw i32 %1488, %821
  %823 = add nuw nsw i32 %818, 64
  %824 = add nuw nsw i32 %823, %822
  %825 = lshr i32 %824, 7
  %826 = trunc i32 %825 to i16
  %827 = getelementptr inbounds i16, i16* %756, i64 %815
  store i16 %826, i16* %827, align 2
  %828 = getelementptr inbounds i16, i16* %801, i64 2
  %829 = add nuw nsw i64 %800, 2
  %830 = icmp eq i64 %829, 16
  br i1 %830, label %831, label %799, !llvm.loop !1592

831:                                              ; preds = %799, %763
  %832 = phi i16* [ %768, %763 ], [ %828, %799 ]
  %833 = getelementptr inbounds [128 x i16], [128 x i16]* %11, i64 0, i64 112
  %834 = getelementptr inbounds [128 x i16], [128 x i16]* %11, i64 0, i64 112
  %835 = getelementptr inbounds [128 x i16], [128 x i16]* %11, i64 1, i64 0
  %836 = getelementptr i16, i16* %832, i64 32
  %837 = icmp ult i16* %834, %836
  %838 = icmp ult i16* %832, %835
  %839 = and i1 %837, %838
  br i1 %839, label %875, label %840

840:                                              ; preds = %831
  %841 = insertelement <8 x i32> undef, i32 %1486, i32 0
  %842 = shufflevector <8 x i32> %841, <8 x i32> undef, <8 x i32> zeroinitializer
  %843 = insertelement <8 x i32> undef, i32 %1488, i32 0
  %844 = shufflevector <8 x i32> %843, <8 x i32> undef, <8 x i32> zeroinitializer
  %845 = bitcast i16* %832 to <8 x i16>*
  %846 = load <8 x i16>, <8 x i16>* %845, align 2, !alias.scope !1593
  %847 = zext <8 x i16> %846 to <8 x i32>
  %848 = mul nuw nsw <8 x i32> %842, %847
  %849 = getelementptr inbounds i16, i16* %832, i64 16
  %850 = bitcast i16* %849 to <8 x i16>*
  %851 = load <8 x i16>, <8 x i16>* %850, align 2, !alias.scope !1593
  %852 = zext <8 x i16> %851 to <8 x i32>
  %853 = mul nuw nsw <8 x i32> %844, %852
  %854 = add nuw nsw <8 x i32> %848, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %855 = add nuw nsw <8 x i32> %854, %853
  %856 = lshr <8 x i32> %855, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %857 = trunc <8 x i32> %856 to <8 x i16>
  %858 = bitcast i16* %833 to <8 x i16>*
  store <8 x i16> %857, <8 x i16>* %858, align 16, !alias.scope !1596, !noalias !1593
  %859 = getelementptr i16, i16* %832, i64 8
  %860 = bitcast i16* %859 to <8 x i16>*
  %861 = load <8 x i16>, <8 x i16>* %860, align 2, !alias.scope !1593
  %862 = zext <8 x i16> %861 to <8 x i32>
  %863 = mul nuw nsw <8 x i32> %842, %862
  %864 = getelementptr inbounds i16, i16* %832, i64 24
  %865 = bitcast i16* %864 to <8 x i16>*
  %866 = load <8 x i16>, <8 x i16>* %865, align 2, !alias.scope !1593
  %867 = zext <8 x i16> %866 to <8 x i32>
  %868 = mul nuw nsw <8 x i32> %844, %867
  %869 = add nuw nsw <8 x i32> %863, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %870 = add nuw nsw <8 x i32> %869, %868
  %871 = lshr <8 x i32> %870, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %872 = trunc <8 x i32> %871 to <8 x i16>
  %873 = getelementptr inbounds [128 x i16], [128 x i16]* %11, i64 0, i64 120
  %874 = bitcast i16* %873 to <8 x i16>*
  store <8 x i16> %872, <8 x i16>* %874, align 16, !alias.scope !1596, !noalias !1593
  br label %907

875:                                              ; preds = %831, %875
  %876 = phi i64 [ %905, %875 ], [ 0, %831 ]
  %877 = phi i16* [ %904, %875 ], [ %832, %831 ]
  %878 = load i16, i16* %877, align 2
  %879 = zext i16 %878 to i32
  %880 = mul nuw nsw i32 %1486, %879
  %881 = getelementptr inbounds i16, i16* %877, i64 16
  %882 = load i16, i16* %881, align 2
  %883 = zext i16 %882 to i32
  %884 = mul nuw nsw i32 %1488, %883
  %885 = add nuw nsw i32 %880, 64
  %886 = add nuw nsw i32 %885, %884
  %887 = lshr i32 %886, 7
  %888 = trunc i32 %887 to i16
  %889 = getelementptr inbounds i16, i16* %833, i64 %876
  store i16 %888, i16* %889, align 4
  %890 = getelementptr inbounds i16, i16* %877, i64 1
  %891 = or i64 %876, 1
  %892 = load i16, i16* %890, align 2
  %893 = zext i16 %892 to i32
  %894 = mul nuw nsw i32 %1486, %893
  %895 = getelementptr inbounds i16, i16* %877, i64 17
  %896 = load i16, i16* %895, align 2
  %897 = zext i16 %896 to i32
  %898 = mul nuw nsw i32 %1488, %897
  %899 = add nuw nsw i32 %894, 64
  %900 = add nuw nsw i32 %899, %898
  %901 = lshr i32 %900, 7
  %902 = trunc i32 %901 to i16
  %903 = getelementptr inbounds i16, i16* %833, i64 %891
  store i16 %902, i16* %903, align 2
  %904 = getelementptr inbounds i16, i16* %877, i64 2
  %905 = add nuw nsw i64 %876, 2
  %906 = icmp eq i64 %905, 16
  br i1 %906, label %907, label %875, !llvm.loop !1598

907:                                              ; preds = %875, %840
  %908 = getelementptr inbounds [128 x i16], [128 x i16]* %13, i64 0, i64 0
  %909 = ptrtoint i8* %7 to i64
  %910 = shl i64 %909, 1
  %911 = inttoptr i64 %910 to i16*
  br label %226

912:                                              ; preds = %102, %912
  %913 = phi i64 [ %940, %912 ], [ 0, %102 ]
  %914 = phi i16* [ %931, %912 ], [ %104, %102 ]
  %915 = load i16, i16* %914, align 2
  %916 = zext i16 %915 to i32
  %917 = mul nuw nsw i32 %25, %916
  %918 = getelementptr inbounds i16, i16* %914, i64 1
  %919 = load i16, i16* %918, align 2
  %920 = zext i16 %919 to i32
  %921 = mul nuw nsw i32 %27, %920
  %922 = add nuw nsw i32 %917, 64
  %923 = add nuw nsw i32 %922, %921
  %924 = lshr i32 %923, 7
  %925 = trunc i32 %924 to i16
  %926 = getelementptr inbounds i16, i16* %105, i64 %913
  store i16 %925, i16* %926, align 4
  %927 = or i64 %913, 1
  %928 = load i16, i16* %918, align 2
  %929 = zext i16 %928 to i32
  %930 = mul nuw nsw i32 %25, %929
  %931 = getelementptr inbounds i16, i16* %914, i64 2
  %932 = load i16, i16* %931, align 2
  %933 = zext i16 %932 to i32
  %934 = mul nuw nsw i32 %27, %933
  %935 = add nuw nsw i32 %930, 64
  %936 = add nuw nsw i32 %935, %934
  %937 = lshr i32 %936, 7
  %938 = trunc i32 %937 to i16
  %939 = getelementptr inbounds i16, i16* %105, i64 %927
  store i16 %938, i16* %939, align 2
  %940 = add nuw nsw i64 %913, 2
  %941 = icmp eq i64 %940, 16
  br i1 %941, label %942, label %912, !llvm.loop !1599

942:                                              ; preds = %912, %113
  %943 = phi i16* [ %118, %113 ], [ %931, %912 ]
  %944 = getelementptr inbounds i16, i16* %943, i64 %23
  %945 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 32
  %946 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 32
  %947 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 48
  %948 = add nuw nsw i64 %23, 17
  %949 = getelementptr i16, i16* %943, i64 %948
  %950 = icmp ult i16* %946, %949
  %951 = icmp ult i16* %944, %947
  %952 = and i1 %950, %951
  br i1 %952, label %989, label %953

953:                                              ; preds = %942
  %954 = insertelement <8 x i32> undef, i32 %25, i32 0
  %955 = shufflevector <8 x i32> %954, <8 x i32> undef, <8 x i32> zeroinitializer
  %956 = insertelement <8 x i32> undef, i32 %27, i32 0
  %957 = shufflevector <8 x i32> %956, <8 x i32> undef, <8 x i32> zeroinitializer
  %958 = getelementptr i16, i16* %944, i64 16
  %959 = bitcast i16* %944 to <8 x i16>*
  %960 = load <8 x i16>, <8 x i16>* %959, align 2, !alias.scope !1600
  %961 = zext <8 x i16> %960 to <8 x i32>
  %962 = mul nuw nsw <8 x i32> %955, %961
  %963 = getelementptr inbounds i16, i16* %944, i64 1
  %964 = bitcast i16* %963 to <8 x i16>*
  %965 = load <8 x i16>, <8 x i16>* %964, align 2, !alias.scope !1600
  %966 = zext <8 x i16> %965 to <8 x i32>
  %967 = mul nuw nsw <8 x i32> %957, %966
  %968 = add nuw nsw <8 x i32> %962, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %969 = add nuw nsw <8 x i32> %968, %967
  %970 = lshr <8 x i32> %969, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %971 = trunc <8 x i32> %970 to <8 x i16>
  %972 = bitcast i16* %945 to <8 x i16>*
  store <8 x i16> %971, <8 x i16>* %972, align 16, !alias.scope !1603, !noalias !1600
  %973 = getelementptr i16, i16* %944, i64 8
  %974 = bitcast i16* %973 to <8 x i16>*
  %975 = load <8 x i16>, <8 x i16>* %974, align 2, !alias.scope !1600
  %976 = zext <8 x i16> %975 to <8 x i32>
  %977 = mul nuw nsw <8 x i32> %955, %976
  %978 = getelementptr inbounds i16, i16* %973, i64 1
  %979 = bitcast i16* %978 to <8 x i16>*
  %980 = load <8 x i16>, <8 x i16>* %979, align 2, !alias.scope !1600
  %981 = zext <8 x i16> %980 to <8 x i32>
  %982 = mul nuw nsw <8 x i32> %957, %981
  %983 = add nuw nsw <8 x i32> %977, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %984 = add nuw nsw <8 x i32> %983, %982
  %985 = lshr <8 x i32> %984, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %986 = trunc <8 x i32> %985 to <8 x i16>
  %987 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 40
  %988 = bitcast i16* %987 to <8 x i16>*
  store <8 x i16> %986, <8 x i16>* %988, align 16, !alias.scope !1603, !noalias !1600
  br label %1019

989:                                              ; preds = %942, %989
  %990 = phi i64 [ %1017, %989 ], [ 0, %942 ]
  %991 = phi i16* [ %1008, %989 ], [ %944, %942 ]
  %992 = load i16, i16* %991, align 2
  %993 = zext i16 %992 to i32
  %994 = mul nuw nsw i32 %25, %993
  %995 = getelementptr inbounds i16, i16* %991, i64 1
  %996 = load i16, i16* %995, align 2
  %997 = zext i16 %996 to i32
  %998 = mul nuw nsw i32 %27, %997
  %999 = add nuw nsw i32 %994, 64
  %1000 = add nuw nsw i32 %999, %998
  %1001 = lshr i32 %1000, 7
  %1002 = trunc i32 %1001 to i16
  %1003 = getelementptr inbounds i16, i16* %945, i64 %990
  store i16 %1002, i16* %1003, align 4
  %1004 = or i64 %990, 1
  %1005 = load i16, i16* %995, align 2
  %1006 = zext i16 %1005 to i32
  %1007 = mul nuw nsw i32 %25, %1006
  %1008 = getelementptr inbounds i16, i16* %991, i64 2
  %1009 = load i16, i16* %1008, align 2
  %1010 = zext i16 %1009 to i32
  %1011 = mul nuw nsw i32 %27, %1010
  %1012 = add nuw nsw i32 %1007, 64
  %1013 = add nuw nsw i32 %1012, %1011
  %1014 = lshr i32 %1013, 7
  %1015 = trunc i32 %1014 to i16
  %1016 = getelementptr inbounds i16, i16* %945, i64 %1004
  store i16 %1015, i16* %1016, align 2
  %1017 = add nuw nsw i64 %990, 2
  %1018 = icmp eq i64 %1017, 16
  br i1 %1018, label %1019, label %989, !llvm.loop !1605

1019:                                             ; preds = %989, %953
  %1020 = phi i16* [ %958, %953 ], [ %1008, %989 ]
  %1021 = getelementptr inbounds i16, i16* %1020, i64 %23
  %1022 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 48
  %1023 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 48
  %1024 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 64
  %1025 = add nuw nsw i64 %23, 17
  %1026 = getelementptr i16, i16* %1020, i64 %1025
  %1027 = icmp ult i16* %1023, %1026
  %1028 = icmp ult i16* %1021, %1024
  %1029 = and i1 %1027, %1028
  br i1 %1029, label %1066, label %1030

1030:                                             ; preds = %1019
  %1031 = insertelement <8 x i32> undef, i32 %25, i32 0
  %1032 = shufflevector <8 x i32> %1031, <8 x i32> undef, <8 x i32> zeroinitializer
  %1033 = insertelement <8 x i32> undef, i32 %27, i32 0
  %1034 = shufflevector <8 x i32> %1033, <8 x i32> undef, <8 x i32> zeroinitializer
  %1035 = getelementptr i16, i16* %1021, i64 16
  %1036 = bitcast i16* %1021 to <8 x i16>*
  %1037 = load <8 x i16>, <8 x i16>* %1036, align 2, !alias.scope !1606
  %1038 = zext <8 x i16> %1037 to <8 x i32>
  %1039 = mul nuw nsw <8 x i32> %1032, %1038
  %1040 = getelementptr inbounds i16, i16* %1021, i64 1
  %1041 = bitcast i16* %1040 to <8 x i16>*
  %1042 = load <8 x i16>, <8 x i16>* %1041, align 2, !alias.scope !1606
  %1043 = zext <8 x i16> %1042 to <8 x i32>
  %1044 = mul nuw nsw <8 x i32> %1034, %1043
  %1045 = add nuw nsw <8 x i32> %1039, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %1046 = add nuw nsw <8 x i32> %1045, %1044
  %1047 = lshr <8 x i32> %1046, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %1048 = trunc <8 x i32> %1047 to <8 x i16>
  %1049 = bitcast i16* %1022 to <8 x i16>*
  store <8 x i16> %1048, <8 x i16>* %1049, align 16, !alias.scope !1609, !noalias !1606
  %1050 = getelementptr i16, i16* %1021, i64 8
  %1051 = bitcast i16* %1050 to <8 x i16>*
  %1052 = load <8 x i16>, <8 x i16>* %1051, align 2, !alias.scope !1606
  %1053 = zext <8 x i16> %1052 to <8 x i32>
  %1054 = mul nuw nsw <8 x i32> %1032, %1053
  %1055 = getelementptr inbounds i16, i16* %1050, i64 1
  %1056 = bitcast i16* %1055 to <8 x i16>*
  %1057 = load <8 x i16>, <8 x i16>* %1056, align 2, !alias.scope !1606
  %1058 = zext <8 x i16> %1057 to <8 x i32>
  %1059 = mul nuw nsw <8 x i32> %1034, %1058
  %1060 = add nuw nsw <8 x i32> %1054, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %1061 = add nuw nsw <8 x i32> %1060, %1059
  %1062 = lshr <8 x i32> %1061, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %1063 = trunc <8 x i32> %1062 to <8 x i16>
  %1064 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 56
  %1065 = bitcast i16* %1064 to <8 x i16>*
  store <8 x i16> %1063, <8 x i16>* %1065, align 16, !alias.scope !1609, !noalias !1606
  br label %1096

1066:                                             ; preds = %1019, %1066
  %1067 = phi i64 [ %1094, %1066 ], [ 0, %1019 ]
  %1068 = phi i16* [ %1085, %1066 ], [ %1021, %1019 ]
  %1069 = load i16, i16* %1068, align 2
  %1070 = zext i16 %1069 to i32
  %1071 = mul nuw nsw i32 %25, %1070
  %1072 = getelementptr inbounds i16, i16* %1068, i64 1
  %1073 = load i16, i16* %1072, align 2
  %1074 = zext i16 %1073 to i32
  %1075 = mul nuw nsw i32 %27, %1074
  %1076 = add nuw nsw i32 %1071, 64
  %1077 = add nuw nsw i32 %1076, %1075
  %1078 = lshr i32 %1077, 7
  %1079 = trunc i32 %1078 to i16
  %1080 = getelementptr inbounds i16, i16* %1022, i64 %1067
  store i16 %1079, i16* %1080, align 4
  %1081 = or i64 %1067, 1
  %1082 = load i16, i16* %1072, align 2
  %1083 = zext i16 %1082 to i32
  %1084 = mul nuw nsw i32 %25, %1083
  %1085 = getelementptr inbounds i16, i16* %1068, i64 2
  %1086 = load i16, i16* %1085, align 2
  %1087 = zext i16 %1086 to i32
  %1088 = mul nuw nsw i32 %27, %1087
  %1089 = add nuw nsw i32 %1084, 64
  %1090 = add nuw nsw i32 %1089, %1088
  %1091 = lshr i32 %1090, 7
  %1092 = trunc i32 %1091 to i16
  %1093 = getelementptr inbounds i16, i16* %1022, i64 %1081
  store i16 %1092, i16* %1093, align 2
  %1094 = add nuw nsw i64 %1067, 2
  %1095 = icmp eq i64 %1094, 16
  br i1 %1095, label %1096, label %1066, !llvm.loop !1611

1096:                                             ; preds = %1066, %1030
  %1097 = phi i16* [ %1035, %1030 ], [ %1085, %1066 ]
  %1098 = getelementptr inbounds i16, i16* %1097, i64 %23
  %1099 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 64
  %1100 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 64
  %1101 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 80
  %1102 = add nuw nsw i64 %23, 17
  %1103 = getelementptr i16, i16* %1097, i64 %1102
  %1104 = icmp ult i16* %1100, %1103
  %1105 = icmp ult i16* %1098, %1101
  %1106 = and i1 %1104, %1105
  br i1 %1106, label %1143, label %1107

1107:                                             ; preds = %1096
  %1108 = insertelement <8 x i32> undef, i32 %25, i32 0
  %1109 = shufflevector <8 x i32> %1108, <8 x i32> undef, <8 x i32> zeroinitializer
  %1110 = insertelement <8 x i32> undef, i32 %27, i32 0
  %1111 = shufflevector <8 x i32> %1110, <8 x i32> undef, <8 x i32> zeroinitializer
  %1112 = getelementptr i16, i16* %1098, i64 16
  %1113 = bitcast i16* %1098 to <8 x i16>*
  %1114 = load <8 x i16>, <8 x i16>* %1113, align 2, !alias.scope !1612
  %1115 = zext <8 x i16> %1114 to <8 x i32>
  %1116 = mul nuw nsw <8 x i32> %1109, %1115
  %1117 = getelementptr inbounds i16, i16* %1098, i64 1
  %1118 = bitcast i16* %1117 to <8 x i16>*
  %1119 = load <8 x i16>, <8 x i16>* %1118, align 2, !alias.scope !1612
  %1120 = zext <8 x i16> %1119 to <8 x i32>
  %1121 = mul nuw nsw <8 x i32> %1111, %1120
  %1122 = add nuw nsw <8 x i32> %1116, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %1123 = add nuw nsw <8 x i32> %1122, %1121
  %1124 = lshr <8 x i32> %1123, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %1125 = trunc <8 x i32> %1124 to <8 x i16>
  %1126 = bitcast i16* %1099 to <8 x i16>*
  store <8 x i16> %1125, <8 x i16>* %1126, align 16, !alias.scope !1615, !noalias !1612
  %1127 = getelementptr i16, i16* %1098, i64 8
  %1128 = bitcast i16* %1127 to <8 x i16>*
  %1129 = load <8 x i16>, <8 x i16>* %1128, align 2, !alias.scope !1612
  %1130 = zext <8 x i16> %1129 to <8 x i32>
  %1131 = mul nuw nsw <8 x i32> %1109, %1130
  %1132 = getelementptr inbounds i16, i16* %1127, i64 1
  %1133 = bitcast i16* %1132 to <8 x i16>*
  %1134 = load <8 x i16>, <8 x i16>* %1133, align 2, !alias.scope !1612
  %1135 = zext <8 x i16> %1134 to <8 x i32>
  %1136 = mul nuw nsw <8 x i32> %1111, %1135
  %1137 = add nuw nsw <8 x i32> %1131, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %1138 = add nuw nsw <8 x i32> %1137, %1136
  %1139 = lshr <8 x i32> %1138, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %1140 = trunc <8 x i32> %1139 to <8 x i16>
  %1141 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 72
  %1142 = bitcast i16* %1141 to <8 x i16>*
  store <8 x i16> %1140, <8 x i16>* %1142, align 16, !alias.scope !1615, !noalias !1612
  br label %1173

1143:                                             ; preds = %1096, %1143
  %1144 = phi i64 [ %1171, %1143 ], [ 0, %1096 ]
  %1145 = phi i16* [ %1162, %1143 ], [ %1098, %1096 ]
  %1146 = load i16, i16* %1145, align 2
  %1147 = zext i16 %1146 to i32
  %1148 = mul nuw nsw i32 %25, %1147
  %1149 = getelementptr inbounds i16, i16* %1145, i64 1
  %1150 = load i16, i16* %1149, align 2
  %1151 = zext i16 %1150 to i32
  %1152 = mul nuw nsw i32 %27, %1151
  %1153 = add nuw nsw i32 %1148, 64
  %1154 = add nuw nsw i32 %1153, %1152
  %1155 = lshr i32 %1154, 7
  %1156 = trunc i32 %1155 to i16
  %1157 = getelementptr inbounds i16, i16* %1099, i64 %1144
  store i16 %1156, i16* %1157, align 4
  %1158 = or i64 %1144, 1
  %1159 = load i16, i16* %1149, align 2
  %1160 = zext i16 %1159 to i32
  %1161 = mul nuw nsw i32 %25, %1160
  %1162 = getelementptr inbounds i16, i16* %1145, i64 2
  %1163 = load i16, i16* %1162, align 2
  %1164 = zext i16 %1163 to i32
  %1165 = mul nuw nsw i32 %27, %1164
  %1166 = add nuw nsw i32 %1161, 64
  %1167 = add nuw nsw i32 %1166, %1165
  %1168 = lshr i32 %1167, 7
  %1169 = trunc i32 %1168 to i16
  %1170 = getelementptr inbounds i16, i16* %1099, i64 %1158
  store i16 %1169, i16* %1170, align 2
  %1171 = add nuw nsw i64 %1144, 2
  %1172 = icmp eq i64 %1171, 16
  br i1 %1172, label %1173, label %1143, !llvm.loop !1617

1173:                                             ; preds = %1143, %1107
  %1174 = phi i16* [ %1112, %1107 ], [ %1162, %1143 ]
  %1175 = getelementptr inbounds i16, i16* %1174, i64 %23
  %1176 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 80
  %1177 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 80
  %1178 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 96
  %1179 = add nuw nsw i64 %23, 17
  %1180 = getelementptr i16, i16* %1174, i64 %1179
  %1181 = icmp ult i16* %1177, %1180
  %1182 = icmp ult i16* %1175, %1178
  %1183 = and i1 %1181, %1182
  br i1 %1183, label %1220, label %1184

1184:                                             ; preds = %1173
  %1185 = insertelement <8 x i32> undef, i32 %25, i32 0
  %1186 = shufflevector <8 x i32> %1185, <8 x i32> undef, <8 x i32> zeroinitializer
  %1187 = insertelement <8 x i32> undef, i32 %27, i32 0
  %1188 = shufflevector <8 x i32> %1187, <8 x i32> undef, <8 x i32> zeroinitializer
  %1189 = getelementptr i16, i16* %1175, i64 16
  %1190 = bitcast i16* %1175 to <8 x i16>*
  %1191 = load <8 x i16>, <8 x i16>* %1190, align 2, !alias.scope !1618
  %1192 = zext <8 x i16> %1191 to <8 x i32>
  %1193 = mul nuw nsw <8 x i32> %1186, %1192
  %1194 = getelementptr inbounds i16, i16* %1175, i64 1
  %1195 = bitcast i16* %1194 to <8 x i16>*
  %1196 = load <8 x i16>, <8 x i16>* %1195, align 2, !alias.scope !1618
  %1197 = zext <8 x i16> %1196 to <8 x i32>
  %1198 = mul nuw nsw <8 x i32> %1188, %1197
  %1199 = add nuw nsw <8 x i32> %1193, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %1200 = add nuw nsw <8 x i32> %1199, %1198
  %1201 = lshr <8 x i32> %1200, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %1202 = trunc <8 x i32> %1201 to <8 x i16>
  %1203 = bitcast i16* %1176 to <8 x i16>*
  store <8 x i16> %1202, <8 x i16>* %1203, align 16, !alias.scope !1621, !noalias !1618
  %1204 = getelementptr i16, i16* %1175, i64 8
  %1205 = bitcast i16* %1204 to <8 x i16>*
  %1206 = load <8 x i16>, <8 x i16>* %1205, align 2, !alias.scope !1618
  %1207 = zext <8 x i16> %1206 to <8 x i32>
  %1208 = mul nuw nsw <8 x i32> %1186, %1207
  %1209 = getelementptr inbounds i16, i16* %1204, i64 1
  %1210 = bitcast i16* %1209 to <8 x i16>*
  %1211 = load <8 x i16>, <8 x i16>* %1210, align 2, !alias.scope !1618
  %1212 = zext <8 x i16> %1211 to <8 x i32>
  %1213 = mul nuw nsw <8 x i32> %1188, %1212
  %1214 = add nuw nsw <8 x i32> %1208, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %1215 = add nuw nsw <8 x i32> %1214, %1213
  %1216 = lshr <8 x i32> %1215, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %1217 = trunc <8 x i32> %1216 to <8 x i16>
  %1218 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 88
  %1219 = bitcast i16* %1218 to <8 x i16>*
  store <8 x i16> %1217, <8 x i16>* %1219, align 16, !alias.scope !1621, !noalias !1618
  br label %1250

1220:                                             ; preds = %1173, %1220
  %1221 = phi i64 [ %1248, %1220 ], [ 0, %1173 ]
  %1222 = phi i16* [ %1239, %1220 ], [ %1175, %1173 ]
  %1223 = load i16, i16* %1222, align 2
  %1224 = zext i16 %1223 to i32
  %1225 = mul nuw nsw i32 %25, %1224
  %1226 = getelementptr inbounds i16, i16* %1222, i64 1
  %1227 = load i16, i16* %1226, align 2
  %1228 = zext i16 %1227 to i32
  %1229 = mul nuw nsw i32 %27, %1228
  %1230 = add nuw nsw i32 %1225, 64
  %1231 = add nuw nsw i32 %1230, %1229
  %1232 = lshr i32 %1231, 7
  %1233 = trunc i32 %1232 to i16
  %1234 = getelementptr inbounds i16, i16* %1176, i64 %1221
  store i16 %1233, i16* %1234, align 4
  %1235 = or i64 %1221, 1
  %1236 = load i16, i16* %1226, align 2
  %1237 = zext i16 %1236 to i32
  %1238 = mul nuw nsw i32 %25, %1237
  %1239 = getelementptr inbounds i16, i16* %1222, i64 2
  %1240 = load i16, i16* %1239, align 2
  %1241 = zext i16 %1240 to i32
  %1242 = mul nuw nsw i32 %27, %1241
  %1243 = add nuw nsw i32 %1238, 64
  %1244 = add nuw nsw i32 %1243, %1242
  %1245 = lshr i32 %1244, 7
  %1246 = trunc i32 %1245 to i16
  %1247 = getelementptr inbounds i16, i16* %1176, i64 %1235
  store i16 %1246, i16* %1247, align 2
  %1248 = add nuw nsw i64 %1221, 2
  %1249 = icmp eq i64 %1248, 16
  br i1 %1249, label %1250, label %1220, !llvm.loop !1623

1250:                                             ; preds = %1220, %1184
  %1251 = phi i16* [ %1189, %1184 ], [ %1239, %1220 ]
  %1252 = getelementptr inbounds i16, i16* %1251, i64 %23
  %1253 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 96
  %1254 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 96
  %1255 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 112
  %1256 = add nuw nsw i64 %23, 17
  %1257 = getelementptr i16, i16* %1251, i64 %1256
  %1258 = icmp ult i16* %1254, %1257
  %1259 = icmp ult i16* %1252, %1255
  %1260 = and i1 %1258, %1259
  br i1 %1260, label %1297, label %1261

1261:                                             ; preds = %1250
  %1262 = insertelement <8 x i32> undef, i32 %25, i32 0
  %1263 = shufflevector <8 x i32> %1262, <8 x i32> undef, <8 x i32> zeroinitializer
  %1264 = insertelement <8 x i32> undef, i32 %27, i32 0
  %1265 = shufflevector <8 x i32> %1264, <8 x i32> undef, <8 x i32> zeroinitializer
  %1266 = getelementptr i16, i16* %1252, i64 16
  %1267 = bitcast i16* %1252 to <8 x i16>*
  %1268 = load <8 x i16>, <8 x i16>* %1267, align 2, !alias.scope !1624
  %1269 = zext <8 x i16> %1268 to <8 x i32>
  %1270 = mul nuw nsw <8 x i32> %1263, %1269
  %1271 = getelementptr inbounds i16, i16* %1252, i64 1
  %1272 = bitcast i16* %1271 to <8 x i16>*
  %1273 = load <8 x i16>, <8 x i16>* %1272, align 2, !alias.scope !1624
  %1274 = zext <8 x i16> %1273 to <8 x i32>
  %1275 = mul nuw nsw <8 x i32> %1265, %1274
  %1276 = add nuw nsw <8 x i32> %1270, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %1277 = add nuw nsw <8 x i32> %1276, %1275
  %1278 = lshr <8 x i32> %1277, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %1279 = trunc <8 x i32> %1278 to <8 x i16>
  %1280 = bitcast i16* %1253 to <8 x i16>*
  store <8 x i16> %1279, <8 x i16>* %1280, align 16, !alias.scope !1627, !noalias !1624
  %1281 = getelementptr i16, i16* %1252, i64 8
  %1282 = bitcast i16* %1281 to <8 x i16>*
  %1283 = load <8 x i16>, <8 x i16>* %1282, align 2, !alias.scope !1624
  %1284 = zext <8 x i16> %1283 to <8 x i32>
  %1285 = mul nuw nsw <8 x i32> %1263, %1284
  %1286 = getelementptr inbounds i16, i16* %1281, i64 1
  %1287 = bitcast i16* %1286 to <8 x i16>*
  %1288 = load <8 x i16>, <8 x i16>* %1287, align 2, !alias.scope !1624
  %1289 = zext <8 x i16> %1288 to <8 x i32>
  %1290 = mul nuw nsw <8 x i32> %1265, %1289
  %1291 = add nuw nsw <8 x i32> %1285, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %1292 = add nuw nsw <8 x i32> %1291, %1290
  %1293 = lshr <8 x i32> %1292, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %1294 = trunc <8 x i32> %1293 to <8 x i16>
  %1295 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 104
  %1296 = bitcast i16* %1295 to <8 x i16>*
  store <8 x i16> %1294, <8 x i16>* %1296, align 16, !alias.scope !1627, !noalias !1624
  br label %1327

1297:                                             ; preds = %1250, %1297
  %1298 = phi i64 [ %1325, %1297 ], [ 0, %1250 ]
  %1299 = phi i16* [ %1316, %1297 ], [ %1252, %1250 ]
  %1300 = load i16, i16* %1299, align 2
  %1301 = zext i16 %1300 to i32
  %1302 = mul nuw nsw i32 %25, %1301
  %1303 = getelementptr inbounds i16, i16* %1299, i64 1
  %1304 = load i16, i16* %1303, align 2
  %1305 = zext i16 %1304 to i32
  %1306 = mul nuw nsw i32 %27, %1305
  %1307 = add nuw nsw i32 %1302, 64
  %1308 = add nuw nsw i32 %1307, %1306
  %1309 = lshr i32 %1308, 7
  %1310 = trunc i32 %1309 to i16
  %1311 = getelementptr inbounds i16, i16* %1253, i64 %1298
  store i16 %1310, i16* %1311, align 4
  %1312 = or i64 %1298, 1
  %1313 = load i16, i16* %1303, align 2
  %1314 = zext i16 %1313 to i32
  %1315 = mul nuw nsw i32 %25, %1314
  %1316 = getelementptr inbounds i16, i16* %1299, i64 2
  %1317 = load i16, i16* %1316, align 2
  %1318 = zext i16 %1317 to i32
  %1319 = mul nuw nsw i32 %27, %1318
  %1320 = add nuw nsw i32 %1315, 64
  %1321 = add nuw nsw i32 %1320, %1319
  %1322 = lshr i32 %1321, 7
  %1323 = trunc i32 %1322 to i16
  %1324 = getelementptr inbounds i16, i16* %1253, i64 %1312
  store i16 %1323, i16* %1324, align 2
  %1325 = add nuw nsw i64 %1298, 2
  %1326 = icmp eq i64 %1325, 16
  br i1 %1326, label %1327, label %1297, !llvm.loop !1629

1327:                                             ; preds = %1297, %1261
  %1328 = phi i16* [ %1266, %1261 ], [ %1316, %1297 ]
  %1329 = getelementptr inbounds i16, i16* %1328, i64 %23
  %1330 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 112
  %1331 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 112
  %1332 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 128
  %1333 = add nuw nsw i64 %23, 17
  %1334 = getelementptr i16, i16* %1328, i64 %1333
  %1335 = icmp ult i16* %1331, %1334
  %1336 = icmp ult i16* %1329, %1332
  %1337 = and i1 %1335, %1336
  br i1 %1337, label %1374, label %1338

1338:                                             ; preds = %1327
  %1339 = insertelement <8 x i32> undef, i32 %25, i32 0
  %1340 = shufflevector <8 x i32> %1339, <8 x i32> undef, <8 x i32> zeroinitializer
  %1341 = insertelement <8 x i32> undef, i32 %27, i32 0
  %1342 = shufflevector <8 x i32> %1341, <8 x i32> undef, <8 x i32> zeroinitializer
  %1343 = getelementptr i16, i16* %1329, i64 16
  %1344 = bitcast i16* %1329 to <8 x i16>*
  %1345 = load <8 x i16>, <8 x i16>* %1344, align 2, !alias.scope !1630
  %1346 = zext <8 x i16> %1345 to <8 x i32>
  %1347 = mul nuw nsw <8 x i32> %1340, %1346
  %1348 = getelementptr inbounds i16, i16* %1329, i64 1
  %1349 = bitcast i16* %1348 to <8 x i16>*
  %1350 = load <8 x i16>, <8 x i16>* %1349, align 2, !alias.scope !1630
  %1351 = zext <8 x i16> %1350 to <8 x i32>
  %1352 = mul nuw nsw <8 x i32> %1342, %1351
  %1353 = add nuw nsw <8 x i32> %1347, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %1354 = add nuw nsw <8 x i32> %1353, %1352
  %1355 = lshr <8 x i32> %1354, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %1356 = trunc <8 x i32> %1355 to <8 x i16>
  %1357 = bitcast i16* %1330 to <8 x i16>*
  store <8 x i16> %1356, <8 x i16>* %1357, align 16, !alias.scope !1633, !noalias !1630
  %1358 = getelementptr i16, i16* %1329, i64 8
  %1359 = bitcast i16* %1358 to <8 x i16>*
  %1360 = load <8 x i16>, <8 x i16>* %1359, align 2, !alias.scope !1630
  %1361 = zext <8 x i16> %1360 to <8 x i32>
  %1362 = mul nuw nsw <8 x i32> %1340, %1361
  %1363 = getelementptr inbounds i16, i16* %1358, i64 1
  %1364 = bitcast i16* %1363 to <8 x i16>*
  %1365 = load <8 x i16>, <8 x i16>* %1364, align 2, !alias.scope !1630
  %1366 = zext <8 x i16> %1365 to <8 x i32>
  %1367 = mul nuw nsw <8 x i32> %1342, %1366
  %1368 = add nuw nsw <8 x i32> %1362, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %1369 = add nuw nsw <8 x i32> %1368, %1367
  %1370 = lshr <8 x i32> %1369, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %1371 = trunc <8 x i32> %1370 to <8 x i16>
  %1372 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 120
  %1373 = bitcast i16* %1372 to <8 x i16>*
  store <8 x i16> %1371, <8 x i16>* %1373, align 16, !alias.scope !1633, !noalias !1630
  br label %1404

1374:                                             ; preds = %1327, %1374
  %1375 = phi i64 [ %1402, %1374 ], [ 0, %1327 ]
  %1376 = phi i16* [ %1393, %1374 ], [ %1329, %1327 ]
  %1377 = load i16, i16* %1376, align 2
  %1378 = zext i16 %1377 to i32
  %1379 = mul nuw nsw i32 %25, %1378
  %1380 = getelementptr inbounds i16, i16* %1376, i64 1
  %1381 = load i16, i16* %1380, align 2
  %1382 = zext i16 %1381 to i32
  %1383 = mul nuw nsw i32 %27, %1382
  %1384 = add nuw nsw i32 %1379, 64
  %1385 = add nuw nsw i32 %1384, %1383
  %1386 = lshr i32 %1385, 7
  %1387 = trunc i32 %1386 to i16
  %1388 = getelementptr inbounds i16, i16* %1330, i64 %1375
  store i16 %1387, i16* %1388, align 4
  %1389 = or i64 %1375, 1
  %1390 = load i16, i16* %1380, align 2
  %1391 = zext i16 %1390 to i32
  %1392 = mul nuw nsw i32 %25, %1391
  %1393 = getelementptr inbounds i16, i16* %1376, i64 2
  %1394 = load i16, i16* %1393, align 2
  %1395 = zext i16 %1394 to i32
  %1396 = mul nuw nsw i32 %27, %1395
  %1397 = add nuw nsw i32 %1392, 64
  %1398 = add nuw nsw i32 %1397, %1396
  %1399 = lshr i32 %1398, 7
  %1400 = trunc i32 %1399 to i16
  %1401 = getelementptr inbounds i16, i16* %1330, i64 %1389
  store i16 %1400, i16* %1401, align 2
  %1402 = add nuw nsw i64 %1375, 2
  %1403 = icmp eq i64 %1402, 16
  br i1 %1403, label %1404, label %1374, !llvm.loop !1635

1404:                                             ; preds = %1374, %1338
  %1405 = phi i16* [ %1343, %1338 ], [ %1393, %1374 ]
  %1406 = getelementptr inbounds i16, i16* %1405, i64 %23
  %1407 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 128
  %1408 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 128
  %1409 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 1, i64 0
  %1410 = add nuw nsw i64 %23, 17
  %1411 = getelementptr i16, i16* %1405, i64 %1410
  %1412 = icmp ult i16* %1408, %1411
  %1413 = icmp ult i16* %1406, %1409
  %1414 = and i1 %1412, %1413
  br i1 %1414, label %1450, label %1415

1415:                                             ; preds = %1404
  %1416 = insertelement <8 x i32> undef, i32 %25, i32 0
  %1417 = shufflevector <8 x i32> %1416, <8 x i32> undef, <8 x i32> zeroinitializer
  %1418 = insertelement <8 x i32> undef, i32 %27, i32 0
  %1419 = shufflevector <8 x i32> %1418, <8 x i32> undef, <8 x i32> zeroinitializer
  %1420 = bitcast i16* %1406 to <8 x i16>*
  %1421 = load <8 x i16>, <8 x i16>* %1420, align 2, !alias.scope !1636
  %1422 = zext <8 x i16> %1421 to <8 x i32>
  %1423 = mul nuw nsw <8 x i32> %1417, %1422
  %1424 = getelementptr inbounds i16, i16* %1406, i64 1
  %1425 = bitcast i16* %1424 to <8 x i16>*
  %1426 = load <8 x i16>, <8 x i16>* %1425, align 2, !alias.scope !1636
  %1427 = zext <8 x i16> %1426 to <8 x i32>
  %1428 = mul nuw nsw <8 x i32> %1419, %1427
  %1429 = add nuw nsw <8 x i32> %1423, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %1430 = add nuw nsw <8 x i32> %1429, %1428
  %1431 = lshr <8 x i32> %1430, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %1432 = trunc <8 x i32> %1431 to <8 x i16>
  %1433 = bitcast i16* %1407 to <8 x i16>*
  store <8 x i16> %1432, <8 x i16>* %1433, align 16, !alias.scope !1639, !noalias !1636
  %1434 = getelementptr i16, i16* %1406, i64 8
  %1435 = bitcast i16* %1434 to <8 x i16>*
  %1436 = load <8 x i16>, <8 x i16>* %1435, align 2, !alias.scope !1636
  %1437 = zext <8 x i16> %1436 to <8 x i32>
  %1438 = mul nuw nsw <8 x i32> %1417, %1437
  %1439 = getelementptr inbounds i16, i16* %1434, i64 1
  %1440 = bitcast i16* %1439 to <8 x i16>*
  %1441 = load <8 x i16>, <8 x i16>* %1440, align 2, !alias.scope !1636
  %1442 = zext <8 x i16> %1441 to <8 x i32>
  %1443 = mul nuw nsw <8 x i32> %1419, %1442
  %1444 = add nuw nsw <8 x i32> %1438, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %1445 = add nuw nsw <8 x i32> %1444, %1443
  %1446 = lshr <8 x i32> %1445, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %1447 = trunc <8 x i32> %1446 to <8 x i16>
  %1448 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 136
  %1449 = bitcast i16* %1448 to <8 x i16>*
  store <8 x i16> %1447, <8 x i16>* %1449, align 16, !alias.scope !1639, !noalias !1636
  br label %1480

1450:                                             ; preds = %1404, %1450
  %1451 = phi i64 [ %1478, %1450 ], [ 0, %1404 ]
  %1452 = phi i16* [ %1469, %1450 ], [ %1406, %1404 ]
  %1453 = load i16, i16* %1452, align 2
  %1454 = zext i16 %1453 to i32
  %1455 = mul nuw nsw i32 %25, %1454
  %1456 = getelementptr inbounds i16, i16* %1452, i64 1
  %1457 = load i16, i16* %1456, align 2
  %1458 = zext i16 %1457 to i32
  %1459 = mul nuw nsw i32 %27, %1458
  %1460 = add nuw nsw i32 %1455, 64
  %1461 = add nuw nsw i32 %1460, %1459
  %1462 = lshr i32 %1461, 7
  %1463 = trunc i32 %1462 to i16
  %1464 = getelementptr inbounds i16, i16* %1407, i64 %1451
  store i16 %1463, i16* %1464, align 4
  %1465 = or i64 %1451, 1
  %1466 = load i16, i16* %1456, align 2
  %1467 = zext i16 %1466 to i32
  %1468 = mul nuw nsw i32 %25, %1467
  %1469 = getelementptr inbounds i16, i16* %1452, i64 2
  %1470 = load i16, i16* %1469, align 2
  %1471 = zext i16 %1470 to i32
  %1472 = mul nuw nsw i32 %27, %1471
  %1473 = add nuw nsw i32 %1468, 64
  %1474 = add nuw nsw i32 %1473, %1472
  %1475 = lshr i32 %1474, 7
  %1476 = trunc i32 %1475 to i16
  %1477 = getelementptr inbounds i16, i16* %1407, i64 %1465
  store i16 %1476, i16* %1477, align 2
  %1478 = add nuw nsw i64 %1451, 2
  %1479 = icmp eq i64 %1478, 16
  br i1 %1479, label %1480, label %1450, !llvm.loop !1641

1480:                                             ; preds = %1450, %1415
  %1481 = getelementptr inbounds [128 x i16], [128 x i16]* %11, i64 0, i64 0
  %1482 = sext i32 %3 to i64
  %1483 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %1482, i64 0
  %1484 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %1482, i64 1
  %1485 = load i8, i8* %1483, align 2
  %1486 = zext i8 %1485 to i32
  %1487 = load i8, i8* %1484, align 1
  %1488 = zext i8 %1487 to i32
  %1489 = getelementptr inbounds [128 x i16], [128 x i16]* %11, i64 0, i64 16
  %1490 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 32
  %1491 = bitcast i16* %1490 to [128 x i16]*
  %1492 = icmp ult [128 x i16]* %11, %1491
  %1493 = bitcast i16* %1489 to [144 x i16]*
  %1494 = icmp ult [144 x i16]* %9, %1493
  %1495 = and i1 %1492, %1494
  br i1 %1495, label %149, label %1496

1496:                                             ; preds = %1480
  %1497 = insertelement <8 x i32> undef, i32 %1486, i32 0
  %1498 = shufflevector <8 x i32> %1497, <8 x i32> undef, <8 x i32> zeroinitializer
  %1499 = insertelement <8 x i32> undef, i32 %1488, i32 0
  %1500 = shufflevector <8 x i32> %1499, <8 x i32> undef, <8 x i32> zeroinitializer
  %1501 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 16
  %1502 = bitcast [144 x i16]* %9 to <8 x i16>*
  %1503 = load <8 x i16>, <8 x i16>* %1502, align 16, !alias.scope !1642
  %1504 = zext <8 x i16> %1503 to <8 x i32>
  %1505 = mul nuw nsw <8 x i32> %1498, %1504
  %1506 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 16
  %1507 = bitcast i16* %1506 to <8 x i16>*
  %1508 = load <8 x i16>, <8 x i16>* %1507, align 16, !alias.scope !1642
  %1509 = zext <8 x i16> %1508 to <8 x i32>
  %1510 = mul nuw nsw <8 x i32> %1500, %1509
  %1511 = add nuw nsw <8 x i32> %1505, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %1512 = add nuw nsw <8 x i32> %1511, %1510
  %1513 = lshr <8 x i32> %1512, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %1514 = trunc <8 x i32> %1513 to <8 x i16>
  %1515 = bitcast [128 x i16]* %11 to <8 x i16>*
  store <8 x i16> %1514, <8 x i16>* %1515, align 16, !alias.scope !1645, !noalias !1642
  %1516 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 8
  %1517 = bitcast i16* %1516 to <8 x i16>*
  %1518 = load <8 x i16>, <8 x i16>* %1517, align 16, !alias.scope !1642
  %1519 = zext <8 x i16> %1518 to <8 x i32>
  %1520 = mul nuw nsw <8 x i32> %1498, %1519
  %1521 = getelementptr inbounds [144 x i16], [144 x i16]* %9, i64 0, i64 24
  %1522 = bitcast i16* %1521 to <8 x i16>*
  %1523 = load <8 x i16>, <8 x i16>* %1522, align 16, !alias.scope !1642
  %1524 = zext <8 x i16> %1523 to <8 x i32>
  %1525 = mul nuw nsw <8 x i32> %1500, %1524
  %1526 = add nuw nsw <8 x i32> %1520, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %1527 = add nuw nsw <8 x i32> %1526, %1525
  %1528 = lshr <8 x i32> %1527, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %1529 = trunc <8 x i32> %1528 to <8 x i16>
  %1530 = getelementptr inbounds [128 x i16], [128 x i16]* %11, i64 0, i64 8
  %1531 = bitcast i16* %1530 to <8 x i16>*
  store <8 x i16> %1529, <8 x i16>* %1531, align 16, !alias.scope !1645, !noalias !1642
  br label %181
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_highbd_8_variance8x16_c(i8*, i32, i8*, i32, i32* nocapture) local_unnamed_addr #2 {
  %6 = ptrtoint i8* %2 to i64
  %7 = shl i64 %6, 1
  %8 = inttoptr i64 %7 to i16*
  %9 = ptrtoint i8* %0 to i64
  %10 = shl i64 %9, 1
  %11 = inttoptr i64 %10 to i16*
  %12 = sext i32 %1 to i64
  %13 = sext i32 %3 to i64
  br label %14

14:                                               ; preds = %14, %5
  %15 = phi i64 [ 0, %5 ], [ %67, %14 ]
  %16 = phi i64 [ 0, %5 ], [ %63, %14 ]
  %17 = phi i32 [ 0, %5 ], [ %70, %14 ]
  %18 = phi i16* [ %8, %5 ], [ %69, %14 ]
  %19 = phi i16* [ %11, %5 ], [ %68, %14 ]
  %20 = bitcast i16* %19 to <8 x i16>*
  %21 = load <8 x i16>, <8 x i16>* %20, align 2
  %22 = zext <8 x i16> %21 to <8 x i32>
  %23 = bitcast i16* %18 to <8 x i16>*
  %24 = load <8 x i16>, <8 x i16>* %23, align 2
  %25 = zext <8 x i16> %24 to <8 x i32>
  %26 = sub nsw <8 x i32> %22, %25
  %27 = sext <8 x i32> %26 to <8 x i64>
  %28 = extractelement <8 x i32> %26, i32 0
  %29 = mul nsw i32 %28, %28
  %30 = zext i32 %29 to i64
  %31 = add i64 %15, %30
  %32 = extractelement <8 x i32> %26, i32 1
  %33 = mul nsw i32 %32, %32
  %34 = zext i32 %33 to i64
  %35 = add i64 %31, %34
  %36 = extractelement <8 x i32> %26, i32 2
  %37 = mul nsw i32 %36, %36
  %38 = zext i32 %37 to i64
  %39 = add i64 %35, %38
  %40 = extractelement <8 x i32> %26, i32 3
  %41 = mul nsw i32 %40, %40
  %42 = zext i32 %41 to i64
  %43 = add i64 %39, %42
  %44 = extractelement <8 x i32> %26, i32 4
  %45 = mul nsw i32 %44, %44
  %46 = zext i32 %45 to i64
  %47 = add i64 %43, %46
  %48 = extractelement <8 x i32> %26, i32 5
  %49 = mul nsw i32 %48, %48
  %50 = zext i32 %49 to i64
  %51 = add i64 %47, %50
  %52 = extractelement <8 x i32> %26, i32 6
  %53 = mul nsw i32 %52, %52
  %54 = zext i32 %53 to i64
  %55 = add i64 %51, %54
  %56 = shufflevector <8 x i64> %27, <8 x i64> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %57 = add nsw <8 x i64> %56, %27
  %58 = shufflevector <8 x i64> %57, <8 x i64> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %59 = add nsw <8 x i64> %57, %58
  %60 = shufflevector <8 x i64> %59, <8 x i64> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %61 = add nsw <8 x i64> %59, %60
  %62 = extractelement <8 x i64> %61, i32 0
  %63 = add nsw i64 %62, %16
  %64 = extractelement <8 x i32> %26, i32 7
  %65 = mul nsw i32 %64, %64
  %66 = zext i32 %65 to i64
  %67 = add i64 %55, %66
  %68 = getelementptr inbounds i16, i16* %19, i64 %12
  %69 = getelementptr inbounds i16, i16* %18, i64 %13
  %70 = add nuw nsw i32 %17, 1
  %71 = icmp eq i32 %70, 16
  br i1 %71, label %72, label %14

72:                                               ; preds = %14
  %73 = trunc i64 %67 to i32
  store i32 %73, i32* %4, align 4
  %74 = shl i64 %63, 32
  %75 = ashr exact i64 %74, 32
  %76 = mul nsw i64 %75, %75
  %77 = lshr i64 %76, 7
  %78 = trunc i64 %77 to i32
  %79 = sub i32 %73, %78
  ret i32 %79
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_highbd_10_variance8x16_c(i8*, i32, i8*, i32, i32* nocapture) local_unnamed_addr #2 {
  %6 = ptrtoint i8* %2 to i64
  %7 = shl i64 %6, 1
  %8 = inttoptr i64 %7 to i16*
  %9 = ptrtoint i8* %0 to i64
  %10 = shl i64 %9, 1
  %11 = inttoptr i64 %10 to i16*
  %12 = sext i32 %1 to i64
  %13 = sext i32 %3 to i64
  br label %14

14:                                               ; preds = %14, %5
  %15 = phi i64 [ 0, %5 ], [ %67, %14 ]
  %16 = phi i64 [ 0, %5 ], [ %63, %14 ]
  %17 = phi i32 [ 0, %5 ], [ %70, %14 ]
  %18 = phi i16* [ %8, %5 ], [ %69, %14 ]
  %19 = phi i16* [ %11, %5 ], [ %68, %14 ]
  %20 = bitcast i16* %19 to <8 x i16>*
  %21 = load <8 x i16>, <8 x i16>* %20, align 2
  %22 = zext <8 x i16> %21 to <8 x i32>
  %23 = bitcast i16* %18 to <8 x i16>*
  %24 = load <8 x i16>, <8 x i16>* %23, align 2
  %25 = zext <8 x i16> %24 to <8 x i32>
  %26 = sub nsw <8 x i32> %22, %25
  %27 = sext <8 x i32> %26 to <8 x i64>
  %28 = extractelement <8 x i32> %26, i32 0
  %29 = mul nsw i32 %28, %28
  %30 = zext i32 %29 to i64
  %31 = add i64 %15, %30
  %32 = extractelement <8 x i32> %26, i32 1
  %33 = mul nsw i32 %32, %32
  %34 = zext i32 %33 to i64
  %35 = add i64 %31, %34
  %36 = extractelement <8 x i32> %26, i32 2
  %37 = mul nsw i32 %36, %36
  %38 = zext i32 %37 to i64
  %39 = add i64 %35, %38
  %40 = extractelement <8 x i32> %26, i32 3
  %41 = mul nsw i32 %40, %40
  %42 = zext i32 %41 to i64
  %43 = add i64 %39, %42
  %44 = extractelement <8 x i32> %26, i32 4
  %45 = mul nsw i32 %44, %44
  %46 = zext i32 %45 to i64
  %47 = add i64 %43, %46
  %48 = extractelement <8 x i32> %26, i32 5
  %49 = mul nsw i32 %48, %48
  %50 = zext i32 %49 to i64
  %51 = add i64 %47, %50
  %52 = extractelement <8 x i32> %26, i32 6
  %53 = mul nsw i32 %52, %52
  %54 = zext i32 %53 to i64
  %55 = add i64 %51, %54
  %56 = shufflevector <8 x i64> %27, <8 x i64> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %57 = add nsw <8 x i64> %56, %27
  %58 = shufflevector <8 x i64> %57, <8 x i64> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %59 = add nsw <8 x i64> %57, %58
  %60 = shufflevector <8 x i64> %59, <8 x i64> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %61 = add nsw <8 x i64> %59, %60
  %62 = extractelement <8 x i64> %61, i32 0
  %63 = add nsw i64 %62, %16
  %64 = extractelement <8 x i32> %26, i32 7
  %65 = mul nsw i32 %64, %64
  %66 = zext i32 %65 to i64
  %67 = add i64 %55, %66
  %68 = getelementptr inbounds i16, i16* %19, i64 %12
  %69 = getelementptr inbounds i16, i16* %18, i64 %13
  %70 = add nuw nsw i32 %17, 1
  %71 = icmp eq i32 %70, 16
  br i1 %71, label %72, label %14

72:                                               ; preds = %14
  %73 = add i64 %67, 8
  %74 = lshr i64 %73, 4
  %75 = trunc i64 %74 to i32
  store i32 %75, i32* %4, align 4
  %76 = and i64 %74, 4294967295
  %77 = shl i64 %63, 30
  %78 = add i64 %77, 2147483648
  %79 = ashr i64 %78, 32
  %80 = mul nsw i64 %79, %79
  %81 = lshr i64 %80, 7
  %82 = sub nsw i64 %76, %81
  %83 = icmp sgt i64 %82, -1
  %84 = trunc i64 %82 to i32
  %85 = select i1 %83, i32 %84, i32 0
  ret i32 %85
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_highbd_12_variance8x16_c(i8*, i32, i8*, i32, i32* nocapture) local_unnamed_addr #2 {
  %6 = ptrtoint i8* %2 to i64
  %7 = shl i64 %6, 1
  %8 = inttoptr i64 %7 to i16*
  %9 = ptrtoint i8* %0 to i64
  %10 = shl i64 %9, 1
  %11 = inttoptr i64 %10 to i16*
  %12 = sext i32 %1 to i64
  %13 = sext i32 %3 to i64
  br label %14

14:                                               ; preds = %14, %5
  %15 = phi i64 [ 0, %5 ], [ %67, %14 ]
  %16 = phi i64 [ 0, %5 ], [ %63, %14 ]
  %17 = phi i32 [ 0, %5 ], [ %70, %14 ]
  %18 = phi i16* [ %8, %5 ], [ %69, %14 ]
  %19 = phi i16* [ %11, %5 ], [ %68, %14 ]
  %20 = bitcast i16* %19 to <8 x i16>*
  %21 = load <8 x i16>, <8 x i16>* %20, align 2
  %22 = zext <8 x i16> %21 to <8 x i32>
  %23 = bitcast i16* %18 to <8 x i16>*
  %24 = load <8 x i16>, <8 x i16>* %23, align 2
  %25 = zext <8 x i16> %24 to <8 x i32>
  %26 = sub nsw <8 x i32> %22, %25
  %27 = sext <8 x i32> %26 to <8 x i64>
  %28 = extractelement <8 x i32> %26, i32 0
  %29 = mul nsw i32 %28, %28
  %30 = zext i32 %29 to i64
  %31 = add i64 %15, %30
  %32 = extractelement <8 x i32> %26, i32 1
  %33 = mul nsw i32 %32, %32
  %34 = zext i32 %33 to i64
  %35 = add i64 %31, %34
  %36 = extractelement <8 x i32> %26, i32 2
  %37 = mul nsw i32 %36, %36
  %38 = zext i32 %37 to i64
  %39 = add i64 %35, %38
  %40 = extractelement <8 x i32> %26, i32 3
  %41 = mul nsw i32 %40, %40
  %42 = zext i32 %41 to i64
  %43 = add i64 %39, %42
  %44 = extractelement <8 x i32> %26, i32 4
  %45 = mul nsw i32 %44, %44
  %46 = zext i32 %45 to i64
  %47 = add i64 %43, %46
  %48 = extractelement <8 x i32> %26, i32 5
  %49 = mul nsw i32 %48, %48
  %50 = zext i32 %49 to i64
  %51 = add i64 %47, %50
  %52 = extractelement <8 x i32> %26, i32 6
  %53 = mul nsw i32 %52, %52
  %54 = zext i32 %53 to i64
  %55 = add i64 %51, %54
  %56 = shufflevector <8 x i64> %27, <8 x i64> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %57 = add nsw <8 x i64> %56, %27
  %58 = shufflevector <8 x i64> %57, <8 x i64> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %59 = add nsw <8 x i64> %57, %58
  %60 = shufflevector <8 x i64> %59, <8 x i64> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %61 = add nsw <8 x i64> %59, %60
  %62 = extractelement <8 x i64> %61, i32 0
  %63 = add nsw i64 %62, %16
  %64 = extractelement <8 x i32> %26, i32 7
  %65 = mul nsw i32 %64, %64
  %66 = zext i32 %65 to i64
  %67 = add i64 %55, %66
  %68 = getelementptr inbounds i16, i16* %19, i64 %12
  %69 = getelementptr inbounds i16, i16* %18, i64 %13
  %70 = add nuw nsw i32 %17, 1
  %71 = icmp eq i32 %70, 16
  br i1 %71, label %72, label %14

72:                                               ; preds = %14
  %73 = add i64 %67, 128
  %74 = lshr i64 %73, 8
  %75 = trunc i64 %74 to i32
  store i32 %75, i32* %4, align 4
  %76 = and i64 %74, 4294967295
  %77 = shl i64 %63, 28
  %78 = add i64 %77, 2147483648
  %79 = ashr i64 %78, 32
  %80 = mul nsw i64 %79, %79
  %81 = lshr i64 %80, 7
  %82 = sub nsw i64 %76, %81
  %83 = icmp sgt i64 %82, -1
  %84 = trunc i64 %82 to i32
  %85 = select i1 %83, i32 %84, i32 0
  ret i32 %85
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_highbd_8_sub_pixel_variance8x16_c(i8*, i32, i32, i32, i8*, i32, i32* nocapture) local_unnamed_addr #2 {
  %8 = alloca [136 x i16], align 16
  %9 = alloca [128 x i16], align 16
  %10 = bitcast [136 x i16]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 272, i8* nonnull %10) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %10, i8 -86, i64 272, i1 false)
  %11 = bitcast [128 x i16]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %11) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %11, i8 -86, i64 256, i1 false)
  %12 = getelementptr inbounds [136 x i16], [136 x i16]* %8, i64 0, i64 0
  %13 = sext i32 %2 to i64
  %14 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %13, i64 0
  %15 = ptrtoint i8* %0 to i64
  %16 = shl i64 %15, 1
  %17 = inttoptr i64 %16 to i16*
  %18 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %13, i64 1
  %19 = add i32 %1, -8
  %20 = zext i32 %19 to i64
  %21 = load i8, i8* %14, align 2
  %22 = zext i8 %21 to i32
  %23 = load i8, i8* %18, align 1
  %24 = zext i8 %23 to i32
  br label %25

25:                                               ; preds = %25, %7
  %26 = phi i16* [ %17, %7 ], [ %124, %25 ]
  %27 = phi i32 [ 0, %7 ], [ %126, %25 ]
  %28 = phi i16* [ %12, %7 ], [ %125, %25 ]
  %29 = load i16, i16* %26, align 2
  %30 = zext i16 %29 to i32
  %31 = mul nuw nsw i32 %22, %30
  %32 = getelementptr inbounds i16, i16* %26, i64 1
  %33 = load i16, i16* %32, align 2
  %34 = zext i16 %33 to i32
  %35 = mul nuw nsw i32 %24, %34
  %36 = add nuw nsw i32 %31, 64
  %37 = add nuw nsw i32 %36, %35
  %38 = lshr i32 %37, 7
  %39 = trunc i32 %38 to i16
  store i16 %39, i16* %28, align 2
  %40 = load i16, i16* %32, align 2
  %41 = zext i16 %40 to i32
  %42 = mul nuw nsw i32 %22, %41
  %43 = getelementptr inbounds i16, i16* %26, i64 2
  %44 = load i16, i16* %43, align 2
  %45 = zext i16 %44 to i32
  %46 = mul nuw nsw i32 %24, %45
  %47 = add nuw nsw i32 %42, 64
  %48 = add nuw nsw i32 %47, %46
  %49 = lshr i32 %48, 7
  %50 = trunc i32 %49 to i16
  %51 = getelementptr inbounds i16, i16* %28, i64 1
  store i16 %50, i16* %51, align 2
  %52 = load i16, i16* %43, align 2
  %53 = zext i16 %52 to i32
  %54 = mul nuw nsw i32 %22, %53
  %55 = getelementptr inbounds i16, i16* %26, i64 3
  %56 = load i16, i16* %55, align 2
  %57 = zext i16 %56 to i32
  %58 = mul nuw nsw i32 %24, %57
  %59 = add nuw nsw i32 %54, 64
  %60 = add nuw nsw i32 %59, %58
  %61 = lshr i32 %60, 7
  %62 = trunc i32 %61 to i16
  %63 = getelementptr inbounds i16, i16* %28, i64 2
  store i16 %62, i16* %63, align 2
  %64 = load i16, i16* %55, align 2
  %65 = zext i16 %64 to i32
  %66 = mul nuw nsw i32 %22, %65
  %67 = getelementptr inbounds i16, i16* %26, i64 4
  %68 = load i16, i16* %67, align 2
  %69 = zext i16 %68 to i32
  %70 = mul nuw nsw i32 %24, %69
  %71 = add nuw nsw i32 %66, 64
  %72 = add nuw nsw i32 %71, %70
  %73 = lshr i32 %72, 7
  %74 = trunc i32 %73 to i16
  %75 = getelementptr inbounds i16, i16* %28, i64 3
  store i16 %74, i16* %75, align 2
  %76 = load i16, i16* %67, align 2
  %77 = zext i16 %76 to i32
  %78 = mul nuw nsw i32 %22, %77
  %79 = getelementptr inbounds i16, i16* %26, i64 5
  %80 = load i16, i16* %79, align 2
  %81 = zext i16 %80 to i32
  %82 = mul nuw nsw i32 %24, %81
  %83 = add nuw nsw i32 %78, 64
  %84 = add nuw nsw i32 %83, %82
  %85 = lshr i32 %84, 7
  %86 = trunc i32 %85 to i16
  %87 = getelementptr inbounds i16, i16* %28, i64 4
  store i16 %86, i16* %87, align 2
  %88 = load i16, i16* %79, align 2
  %89 = zext i16 %88 to i32
  %90 = mul nuw nsw i32 %22, %89
  %91 = getelementptr inbounds i16, i16* %26, i64 6
  %92 = load i16, i16* %91, align 2
  %93 = zext i16 %92 to i32
  %94 = mul nuw nsw i32 %24, %93
  %95 = add nuw nsw i32 %90, 64
  %96 = add nuw nsw i32 %95, %94
  %97 = lshr i32 %96, 7
  %98 = trunc i32 %97 to i16
  %99 = getelementptr inbounds i16, i16* %28, i64 5
  store i16 %98, i16* %99, align 2
  %100 = load i16, i16* %91, align 2
  %101 = zext i16 %100 to i32
  %102 = mul nuw nsw i32 %22, %101
  %103 = getelementptr inbounds i16, i16* %26, i64 7
  %104 = load i16, i16* %103, align 2
  %105 = zext i16 %104 to i32
  %106 = mul nuw nsw i32 %24, %105
  %107 = add nuw nsw i32 %102, 64
  %108 = add nuw nsw i32 %107, %106
  %109 = lshr i32 %108, 7
  %110 = trunc i32 %109 to i16
  %111 = getelementptr inbounds i16, i16* %28, i64 6
  store i16 %110, i16* %111, align 2
  %112 = load i16, i16* %103, align 2
  %113 = zext i16 %112 to i32
  %114 = mul nuw nsw i32 %22, %113
  %115 = getelementptr inbounds i16, i16* %26, i64 8
  %116 = load i16, i16* %115, align 2
  %117 = zext i16 %116 to i32
  %118 = mul nuw nsw i32 %24, %117
  %119 = add nuw nsw i32 %114, 64
  %120 = add nuw nsw i32 %119, %118
  %121 = lshr i32 %120, 7
  %122 = trunc i32 %121 to i16
  %123 = getelementptr inbounds i16, i16* %28, i64 7
  store i16 %122, i16* %123, align 2
  %124 = getelementptr inbounds i16, i16* %115, i64 %20
  %125 = getelementptr inbounds i16, i16* %28, i64 8
  %126 = add nuw nsw i32 %27, 1
  %127 = icmp eq i32 %126, 17
  br i1 %127, label %128, label %25

128:                                              ; preds = %25
  %129 = getelementptr inbounds [128 x i16], [128 x i16]* %9, i64 0, i64 0
  %130 = sext i32 %3 to i64
  %131 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %130, i64 0
  %132 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %130, i64 1
  %133 = load i8, i8* %131, align 2
  %134 = zext i8 %133 to i32
  %135 = load i8, i8* %132, align 1
  %136 = zext i8 %135 to i32
  %137 = insertelement <8 x i32> undef, i32 %134, i32 0
  %138 = shufflevector <8 x i32> %137, <8 x i32> undef, <8 x i32> zeroinitializer
  %139 = insertelement <8 x i32> undef, i32 %136, i32 0
  %140 = shufflevector <8 x i32> %139, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %141

141:                                              ; preds = %141, %128
  %142 = phi i32 [ 0, %128 ], [ %177, %141 ]
  %143 = phi i16* [ %12, %128 ], [ %175, %141 ]
  %144 = phi i16* [ %129, %128 ], [ %176, %141 ]
  %145 = getelementptr inbounds i16, i16* %143, i64 8
  %146 = bitcast i16* %143 to <8 x i16>*
  %147 = load <8 x i16>, <8 x i16>* %146, align 2
  %148 = zext <8 x i16> %147 to <8 x i32>
  %149 = mul nuw nsw <8 x i32> %138, %148
  %150 = bitcast i16* %145 to <8 x i16>*
  %151 = load <8 x i16>, <8 x i16>* %150, align 2
  %152 = zext <8 x i16> %151 to <8 x i32>
  %153 = mul nuw nsw <8 x i32> %140, %152
  %154 = add nuw nsw <8 x i32> %149, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %155 = add nuw nsw <8 x i32> %154, %153
  %156 = lshr <8 x i32> %155, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %157 = trunc <8 x i32> %156 to <8 x i16>
  %158 = bitcast i16* %144 to <8 x i16>*
  store <8 x i16> %157, <8 x i16>* %158, align 2
  %159 = getelementptr inbounds i16, i16* %143, i64 8
  %160 = getelementptr inbounds i16, i16* %144, i64 8
  %161 = getelementptr inbounds i16, i16* %143, i64 16
  %162 = bitcast i16* %159 to <8 x i16>*
  %163 = load <8 x i16>, <8 x i16>* %162, align 2
  %164 = zext <8 x i16> %163 to <8 x i32>
  %165 = mul nuw nsw <8 x i32> %138, %164
  %166 = bitcast i16* %161 to <8 x i16>*
  %167 = load <8 x i16>, <8 x i16>* %166, align 2
  %168 = zext <8 x i16> %167 to <8 x i32>
  %169 = mul nuw nsw <8 x i32> %140, %168
  %170 = add nuw nsw <8 x i32> %165, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %171 = add nuw nsw <8 x i32> %170, %169
  %172 = lshr <8 x i32> %171, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %173 = trunc <8 x i32> %172 to <8 x i16>
  %174 = bitcast i16* %160 to <8 x i16>*
  store <8 x i16> %173, <8 x i16>* %174, align 2
  %175 = getelementptr inbounds i16, i16* %143, i64 16
  %176 = getelementptr inbounds i16, i16* %144, i64 16
  %177 = add nuw nsw i32 %142, 2
  %178 = icmp eq i32 %177, 16
  br i1 %178, label %179, label %141

179:                                              ; preds = %141
  %180 = ptrtoint [128 x i16]* %9 to i64
  %181 = lshr exact i64 %180, 1
  %182 = inttoptr i64 %181 to i8*
  %183 = call i32 @vpx_highbd_8_variance8x16_c(i8* nonnull %182, i32 8, i8* %4, i32 %5, i32* %6)
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %11) #4
  call void @llvm.lifetime.end.p0i8(i64 272, i8* nonnull %10) #4
  ret i32 %183
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_highbd_10_sub_pixel_variance8x16_c(i8*, i32, i32, i32, i8*, i32, i32* nocapture) local_unnamed_addr #2 {
  %8 = alloca [136 x i16], align 16
  %9 = alloca [128 x i16], align 16
  %10 = bitcast [136 x i16]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 272, i8* nonnull %10) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %10, i8 -86, i64 272, i1 false)
  %11 = bitcast [128 x i16]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %11) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %11, i8 -86, i64 256, i1 false)
  %12 = getelementptr inbounds [136 x i16], [136 x i16]* %8, i64 0, i64 0
  %13 = sext i32 %2 to i64
  %14 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %13, i64 0
  %15 = ptrtoint i8* %0 to i64
  %16 = shl i64 %15, 1
  %17 = inttoptr i64 %16 to i16*
  %18 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %13, i64 1
  %19 = add i32 %1, -8
  %20 = zext i32 %19 to i64
  %21 = load i8, i8* %14, align 2
  %22 = zext i8 %21 to i32
  %23 = load i8, i8* %18, align 1
  %24 = zext i8 %23 to i32
  br label %25

25:                                               ; preds = %25, %7
  %26 = phi i16* [ %17, %7 ], [ %124, %25 ]
  %27 = phi i32 [ 0, %7 ], [ %126, %25 ]
  %28 = phi i16* [ %12, %7 ], [ %125, %25 ]
  %29 = load i16, i16* %26, align 2
  %30 = zext i16 %29 to i32
  %31 = mul nuw nsw i32 %22, %30
  %32 = getelementptr inbounds i16, i16* %26, i64 1
  %33 = load i16, i16* %32, align 2
  %34 = zext i16 %33 to i32
  %35 = mul nuw nsw i32 %24, %34
  %36 = add nuw nsw i32 %31, 64
  %37 = add nuw nsw i32 %36, %35
  %38 = lshr i32 %37, 7
  %39 = trunc i32 %38 to i16
  store i16 %39, i16* %28, align 2
  %40 = load i16, i16* %32, align 2
  %41 = zext i16 %40 to i32
  %42 = mul nuw nsw i32 %22, %41
  %43 = getelementptr inbounds i16, i16* %26, i64 2
  %44 = load i16, i16* %43, align 2
  %45 = zext i16 %44 to i32
  %46 = mul nuw nsw i32 %24, %45
  %47 = add nuw nsw i32 %42, 64
  %48 = add nuw nsw i32 %47, %46
  %49 = lshr i32 %48, 7
  %50 = trunc i32 %49 to i16
  %51 = getelementptr inbounds i16, i16* %28, i64 1
  store i16 %50, i16* %51, align 2
  %52 = load i16, i16* %43, align 2
  %53 = zext i16 %52 to i32
  %54 = mul nuw nsw i32 %22, %53
  %55 = getelementptr inbounds i16, i16* %26, i64 3
  %56 = load i16, i16* %55, align 2
  %57 = zext i16 %56 to i32
  %58 = mul nuw nsw i32 %24, %57
  %59 = add nuw nsw i32 %54, 64
  %60 = add nuw nsw i32 %59, %58
  %61 = lshr i32 %60, 7
  %62 = trunc i32 %61 to i16
  %63 = getelementptr inbounds i16, i16* %28, i64 2
  store i16 %62, i16* %63, align 2
  %64 = load i16, i16* %55, align 2
  %65 = zext i16 %64 to i32
  %66 = mul nuw nsw i32 %22, %65
  %67 = getelementptr inbounds i16, i16* %26, i64 4
  %68 = load i16, i16* %67, align 2
  %69 = zext i16 %68 to i32
  %70 = mul nuw nsw i32 %24, %69
  %71 = add nuw nsw i32 %66, 64
  %72 = add nuw nsw i32 %71, %70
  %73 = lshr i32 %72, 7
  %74 = trunc i32 %73 to i16
  %75 = getelementptr inbounds i16, i16* %28, i64 3
  store i16 %74, i16* %75, align 2
  %76 = load i16, i16* %67, align 2
  %77 = zext i16 %76 to i32
  %78 = mul nuw nsw i32 %22, %77
  %79 = getelementptr inbounds i16, i16* %26, i64 5
  %80 = load i16, i16* %79, align 2
  %81 = zext i16 %80 to i32
  %82 = mul nuw nsw i32 %24, %81
  %83 = add nuw nsw i32 %78, 64
  %84 = add nuw nsw i32 %83, %82
  %85 = lshr i32 %84, 7
  %86 = trunc i32 %85 to i16
  %87 = getelementptr inbounds i16, i16* %28, i64 4
  store i16 %86, i16* %87, align 2
  %88 = load i16, i16* %79, align 2
  %89 = zext i16 %88 to i32
  %90 = mul nuw nsw i32 %22, %89
  %91 = getelementptr inbounds i16, i16* %26, i64 6
  %92 = load i16, i16* %91, align 2
  %93 = zext i16 %92 to i32
  %94 = mul nuw nsw i32 %24, %93
  %95 = add nuw nsw i32 %90, 64
  %96 = add nuw nsw i32 %95, %94
  %97 = lshr i32 %96, 7
  %98 = trunc i32 %97 to i16
  %99 = getelementptr inbounds i16, i16* %28, i64 5
  store i16 %98, i16* %99, align 2
  %100 = load i16, i16* %91, align 2
  %101 = zext i16 %100 to i32
  %102 = mul nuw nsw i32 %22, %101
  %103 = getelementptr inbounds i16, i16* %26, i64 7
  %104 = load i16, i16* %103, align 2
  %105 = zext i16 %104 to i32
  %106 = mul nuw nsw i32 %24, %105
  %107 = add nuw nsw i32 %102, 64
  %108 = add nuw nsw i32 %107, %106
  %109 = lshr i32 %108, 7
  %110 = trunc i32 %109 to i16
  %111 = getelementptr inbounds i16, i16* %28, i64 6
  store i16 %110, i16* %111, align 2
  %112 = load i16, i16* %103, align 2
  %113 = zext i16 %112 to i32
  %114 = mul nuw nsw i32 %22, %113
  %115 = getelementptr inbounds i16, i16* %26, i64 8
  %116 = load i16, i16* %115, align 2
  %117 = zext i16 %116 to i32
  %118 = mul nuw nsw i32 %24, %117
  %119 = add nuw nsw i32 %114, 64
  %120 = add nuw nsw i32 %119, %118
  %121 = lshr i32 %120, 7
  %122 = trunc i32 %121 to i16
  %123 = getelementptr inbounds i16, i16* %28, i64 7
  store i16 %122, i16* %123, align 2
  %124 = getelementptr inbounds i16, i16* %115, i64 %20
  %125 = getelementptr inbounds i16, i16* %28, i64 8
  %126 = add nuw nsw i32 %27, 1
  %127 = icmp eq i32 %126, 17
  br i1 %127, label %128, label %25

128:                                              ; preds = %25
  %129 = getelementptr inbounds [128 x i16], [128 x i16]* %9, i64 0, i64 0
  %130 = sext i32 %3 to i64
  %131 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %130, i64 0
  %132 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %130, i64 1
  %133 = load i8, i8* %131, align 2
  %134 = zext i8 %133 to i32
  %135 = load i8, i8* %132, align 1
  %136 = zext i8 %135 to i32
  %137 = insertelement <8 x i32> undef, i32 %134, i32 0
  %138 = shufflevector <8 x i32> %137, <8 x i32> undef, <8 x i32> zeroinitializer
  %139 = insertelement <8 x i32> undef, i32 %136, i32 0
  %140 = shufflevector <8 x i32> %139, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %141

141:                                              ; preds = %141, %128
  %142 = phi i32 [ 0, %128 ], [ %177, %141 ]
  %143 = phi i16* [ %12, %128 ], [ %175, %141 ]
  %144 = phi i16* [ %129, %128 ], [ %176, %141 ]
  %145 = getelementptr inbounds i16, i16* %143, i64 8
  %146 = bitcast i16* %143 to <8 x i16>*
  %147 = load <8 x i16>, <8 x i16>* %146, align 2
  %148 = zext <8 x i16> %147 to <8 x i32>
  %149 = mul nuw nsw <8 x i32> %138, %148
  %150 = bitcast i16* %145 to <8 x i16>*
  %151 = load <8 x i16>, <8 x i16>* %150, align 2
  %152 = zext <8 x i16> %151 to <8 x i32>
  %153 = mul nuw nsw <8 x i32> %140, %152
  %154 = add nuw nsw <8 x i32> %149, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %155 = add nuw nsw <8 x i32> %154, %153
  %156 = lshr <8 x i32> %155, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %157 = trunc <8 x i32> %156 to <8 x i16>
  %158 = bitcast i16* %144 to <8 x i16>*
  store <8 x i16> %157, <8 x i16>* %158, align 2
  %159 = getelementptr inbounds i16, i16* %143, i64 8
  %160 = getelementptr inbounds i16, i16* %144, i64 8
  %161 = getelementptr inbounds i16, i16* %143, i64 16
  %162 = bitcast i16* %159 to <8 x i16>*
  %163 = load <8 x i16>, <8 x i16>* %162, align 2
  %164 = zext <8 x i16> %163 to <8 x i32>
  %165 = mul nuw nsw <8 x i32> %138, %164
  %166 = bitcast i16* %161 to <8 x i16>*
  %167 = load <8 x i16>, <8 x i16>* %166, align 2
  %168 = zext <8 x i16> %167 to <8 x i32>
  %169 = mul nuw nsw <8 x i32> %140, %168
  %170 = add nuw nsw <8 x i32> %165, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %171 = add nuw nsw <8 x i32> %170, %169
  %172 = lshr <8 x i32> %171, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %173 = trunc <8 x i32> %172 to <8 x i16>
  %174 = bitcast i16* %160 to <8 x i16>*
  store <8 x i16> %173, <8 x i16>* %174, align 2
  %175 = getelementptr inbounds i16, i16* %143, i64 16
  %176 = getelementptr inbounds i16, i16* %144, i64 16
  %177 = add nuw nsw i32 %142, 2
  %178 = icmp eq i32 %177, 16
  br i1 %178, label %179, label %141

179:                                              ; preds = %141
  %180 = ptrtoint [128 x i16]* %9 to i64
  %181 = lshr exact i64 %180, 1
  %182 = inttoptr i64 %181 to i8*
  %183 = call i32 @vpx_highbd_10_variance8x16_c(i8* nonnull %182, i32 8, i8* %4, i32 %5, i32* %6)
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %11) #4
  call void @llvm.lifetime.end.p0i8(i64 272, i8* nonnull %10) #4
  ret i32 %183
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_highbd_12_sub_pixel_variance8x16_c(i8*, i32, i32, i32, i8*, i32, i32* nocapture) local_unnamed_addr #2 {
  %8 = alloca [136 x i16], align 16
  %9 = alloca [128 x i16], align 16
  %10 = bitcast [136 x i16]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 272, i8* nonnull %10) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %10, i8 -86, i64 272, i1 false)
  %11 = bitcast [128 x i16]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %11) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %11, i8 -86, i64 256, i1 false)
  %12 = getelementptr inbounds [136 x i16], [136 x i16]* %8, i64 0, i64 0
  %13 = sext i32 %2 to i64
  %14 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %13, i64 0
  %15 = ptrtoint i8* %0 to i64
  %16 = shl i64 %15, 1
  %17 = inttoptr i64 %16 to i16*
  %18 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %13, i64 1
  %19 = add i32 %1, -8
  %20 = zext i32 %19 to i64
  %21 = load i8, i8* %14, align 2
  %22 = zext i8 %21 to i32
  %23 = load i8, i8* %18, align 1
  %24 = zext i8 %23 to i32
  br label %25

25:                                               ; preds = %25, %7
  %26 = phi i16* [ %17, %7 ], [ %124, %25 ]
  %27 = phi i32 [ 0, %7 ], [ %126, %25 ]
  %28 = phi i16* [ %12, %7 ], [ %125, %25 ]
  %29 = load i16, i16* %26, align 2
  %30 = zext i16 %29 to i32
  %31 = mul nuw nsw i32 %22, %30
  %32 = getelementptr inbounds i16, i16* %26, i64 1
  %33 = load i16, i16* %32, align 2
  %34 = zext i16 %33 to i32
  %35 = mul nuw nsw i32 %24, %34
  %36 = add nuw nsw i32 %31, 64
  %37 = add nuw nsw i32 %36, %35
  %38 = lshr i32 %37, 7
  %39 = trunc i32 %38 to i16
  store i16 %39, i16* %28, align 2
  %40 = load i16, i16* %32, align 2
  %41 = zext i16 %40 to i32
  %42 = mul nuw nsw i32 %22, %41
  %43 = getelementptr inbounds i16, i16* %26, i64 2
  %44 = load i16, i16* %43, align 2
  %45 = zext i16 %44 to i32
  %46 = mul nuw nsw i32 %24, %45
  %47 = add nuw nsw i32 %42, 64
  %48 = add nuw nsw i32 %47, %46
  %49 = lshr i32 %48, 7
  %50 = trunc i32 %49 to i16
  %51 = getelementptr inbounds i16, i16* %28, i64 1
  store i16 %50, i16* %51, align 2
  %52 = load i16, i16* %43, align 2
  %53 = zext i16 %52 to i32
  %54 = mul nuw nsw i32 %22, %53
  %55 = getelementptr inbounds i16, i16* %26, i64 3
  %56 = load i16, i16* %55, align 2
  %57 = zext i16 %56 to i32
  %58 = mul nuw nsw i32 %24, %57
  %59 = add nuw nsw i32 %54, 64
  %60 = add nuw nsw i32 %59, %58
  %61 = lshr i32 %60, 7
  %62 = trunc i32 %61 to i16
  %63 = getelementptr inbounds i16, i16* %28, i64 2
  store i16 %62, i16* %63, align 2
  %64 = load i16, i16* %55, align 2
  %65 = zext i16 %64 to i32
  %66 = mul nuw nsw i32 %22, %65
  %67 = getelementptr inbounds i16, i16* %26, i64 4
  %68 = load i16, i16* %67, align 2
  %69 = zext i16 %68 to i32
  %70 = mul nuw nsw i32 %24, %69
  %71 = add nuw nsw i32 %66, 64
  %72 = add nuw nsw i32 %71, %70
  %73 = lshr i32 %72, 7
  %74 = trunc i32 %73 to i16
  %75 = getelementptr inbounds i16, i16* %28, i64 3
  store i16 %74, i16* %75, align 2
  %76 = load i16, i16* %67, align 2
  %77 = zext i16 %76 to i32
  %78 = mul nuw nsw i32 %22, %77
  %79 = getelementptr inbounds i16, i16* %26, i64 5
  %80 = load i16, i16* %79, align 2
  %81 = zext i16 %80 to i32
  %82 = mul nuw nsw i32 %24, %81
  %83 = add nuw nsw i32 %78, 64
  %84 = add nuw nsw i32 %83, %82
  %85 = lshr i32 %84, 7
  %86 = trunc i32 %85 to i16
  %87 = getelementptr inbounds i16, i16* %28, i64 4
  store i16 %86, i16* %87, align 2
  %88 = load i16, i16* %79, align 2
  %89 = zext i16 %88 to i32
  %90 = mul nuw nsw i32 %22, %89
  %91 = getelementptr inbounds i16, i16* %26, i64 6
  %92 = load i16, i16* %91, align 2
  %93 = zext i16 %92 to i32
  %94 = mul nuw nsw i32 %24, %93
  %95 = add nuw nsw i32 %90, 64
  %96 = add nuw nsw i32 %95, %94
  %97 = lshr i32 %96, 7
  %98 = trunc i32 %97 to i16
  %99 = getelementptr inbounds i16, i16* %28, i64 5
  store i16 %98, i16* %99, align 2
  %100 = load i16, i16* %91, align 2
  %101 = zext i16 %100 to i32
  %102 = mul nuw nsw i32 %22, %101
  %103 = getelementptr inbounds i16, i16* %26, i64 7
  %104 = load i16, i16* %103, align 2
  %105 = zext i16 %104 to i32
  %106 = mul nuw nsw i32 %24, %105
  %107 = add nuw nsw i32 %102, 64
  %108 = add nuw nsw i32 %107, %106
  %109 = lshr i32 %108, 7
  %110 = trunc i32 %109 to i16
  %111 = getelementptr inbounds i16, i16* %28, i64 6
  store i16 %110, i16* %111, align 2
  %112 = load i16, i16* %103, align 2
  %113 = zext i16 %112 to i32
  %114 = mul nuw nsw i32 %22, %113
  %115 = getelementptr inbounds i16, i16* %26, i64 8
  %116 = load i16, i16* %115, align 2
  %117 = zext i16 %116 to i32
  %118 = mul nuw nsw i32 %24, %117
  %119 = add nuw nsw i32 %114, 64
  %120 = add nuw nsw i32 %119, %118
  %121 = lshr i32 %120, 7
  %122 = trunc i32 %121 to i16
  %123 = getelementptr inbounds i16, i16* %28, i64 7
  store i16 %122, i16* %123, align 2
  %124 = getelementptr inbounds i16, i16* %115, i64 %20
  %125 = getelementptr inbounds i16, i16* %28, i64 8
  %126 = add nuw nsw i32 %27, 1
  %127 = icmp eq i32 %126, 17
  br i1 %127, label %128, label %25

128:                                              ; preds = %25
  %129 = getelementptr inbounds [128 x i16], [128 x i16]* %9, i64 0, i64 0
  %130 = sext i32 %3 to i64
  %131 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %130, i64 0
  %132 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %130, i64 1
  %133 = load i8, i8* %131, align 2
  %134 = zext i8 %133 to i32
  %135 = load i8, i8* %132, align 1
  %136 = zext i8 %135 to i32
  %137 = insertelement <8 x i32> undef, i32 %134, i32 0
  %138 = shufflevector <8 x i32> %137, <8 x i32> undef, <8 x i32> zeroinitializer
  %139 = insertelement <8 x i32> undef, i32 %136, i32 0
  %140 = shufflevector <8 x i32> %139, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %141

141:                                              ; preds = %141, %128
  %142 = phi i32 [ 0, %128 ], [ %177, %141 ]
  %143 = phi i16* [ %12, %128 ], [ %175, %141 ]
  %144 = phi i16* [ %129, %128 ], [ %176, %141 ]
  %145 = getelementptr inbounds i16, i16* %143, i64 8
  %146 = bitcast i16* %143 to <8 x i16>*
  %147 = load <8 x i16>, <8 x i16>* %146, align 2
  %148 = zext <8 x i16> %147 to <8 x i32>
  %149 = mul nuw nsw <8 x i32> %138, %148
  %150 = bitcast i16* %145 to <8 x i16>*
  %151 = load <8 x i16>, <8 x i16>* %150, align 2
  %152 = zext <8 x i16> %151 to <8 x i32>
  %153 = mul nuw nsw <8 x i32> %140, %152
  %154 = add nuw nsw <8 x i32> %149, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %155 = add nuw nsw <8 x i32> %154, %153
  %156 = lshr <8 x i32> %155, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %157 = trunc <8 x i32> %156 to <8 x i16>
  %158 = bitcast i16* %144 to <8 x i16>*
  store <8 x i16> %157, <8 x i16>* %158, align 2
  %159 = getelementptr inbounds i16, i16* %143, i64 8
  %160 = getelementptr inbounds i16, i16* %144, i64 8
  %161 = getelementptr inbounds i16, i16* %143, i64 16
  %162 = bitcast i16* %159 to <8 x i16>*
  %163 = load <8 x i16>, <8 x i16>* %162, align 2
  %164 = zext <8 x i16> %163 to <8 x i32>
  %165 = mul nuw nsw <8 x i32> %138, %164
  %166 = bitcast i16* %161 to <8 x i16>*
  %167 = load <8 x i16>, <8 x i16>* %166, align 2
  %168 = zext <8 x i16> %167 to <8 x i32>
  %169 = mul nuw nsw <8 x i32> %140, %168
  %170 = add nuw nsw <8 x i32> %165, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %171 = add nuw nsw <8 x i32> %170, %169
  %172 = lshr <8 x i32> %171, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %173 = trunc <8 x i32> %172 to <8 x i16>
  %174 = bitcast i16* %160 to <8 x i16>*
  store <8 x i16> %173, <8 x i16>* %174, align 2
  %175 = getelementptr inbounds i16, i16* %143, i64 16
  %176 = getelementptr inbounds i16, i16* %144, i64 16
  %177 = add nuw nsw i32 %142, 2
  %178 = icmp eq i32 %177, 16
  br i1 %178, label %179, label %141

179:                                              ; preds = %141
  %180 = ptrtoint [128 x i16]* %9 to i64
  %181 = lshr exact i64 %180, 1
  %182 = inttoptr i64 %181 to i8*
  %183 = call i32 @vpx_highbd_12_variance8x16_c(i8* nonnull %182, i32 8, i8* %4, i32 %5, i32* %6)
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %11) #4
  call void @llvm.lifetime.end.p0i8(i64 272, i8* nonnull %10) #4
  ret i32 %183
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_highbd_8_sub_pixel_avg_variance8x16_c(i8*, i32, i32, i32, i8*, i32, i32* nocapture, i8*) local_unnamed_addr #2 {
  %9 = alloca [136 x i16], align 16
  %10 = alloca [128 x i16], align 16
  %11 = alloca [128 x i16], align 16
  %12 = bitcast [136 x i16]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 272, i8* nonnull %12) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %12, i8 -86, i64 272, i1 false)
  %13 = bitcast [128 x i16]* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %13) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %13, i8 -86, i64 256, i1 false)
  %14 = bitcast [128 x i16]* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %14) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %14, i8 -86, i64 256, i1 false)
  %15 = getelementptr inbounds [136 x i16], [136 x i16]* %9, i64 0, i64 0
  %16 = sext i32 %2 to i64
  %17 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %16, i64 0
  %18 = ptrtoint i8* %0 to i64
  %19 = shl i64 %18, 1
  %20 = inttoptr i64 %19 to i16*
  %21 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %16, i64 1
  %22 = add i32 %1, -8
  %23 = zext i32 %22 to i64
  %24 = load i8, i8* %17, align 2
  %25 = zext i8 %24 to i32
  %26 = load i8, i8* %21, align 1
  %27 = zext i8 %26 to i32
  br label %28

28:                                               ; preds = %28, %8
  %29 = phi i16* [ %20, %8 ], [ %127, %28 ]
  %30 = phi i32 [ 0, %8 ], [ %129, %28 ]
  %31 = phi i16* [ %15, %8 ], [ %128, %28 ]
  %32 = load i16, i16* %29, align 2
  %33 = zext i16 %32 to i32
  %34 = mul nuw nsw i32 %25, %33
  %35 = getelementptr inbounds i16, i16* %29, i64 1
  %36 = load i16, i16* %35, align 2
  %37 = zext i16 %36 to i32
  %38 = mul nuw nsw i32 %27, %37
  %39 = add nuw nsw i32 %34, 64
  %40 = add nuw nsw i32 %39, %38
  %41 = lshr i32 %40, 7
  %42 = trunc i32 %41 to i16
  store i16 %42, i16* %31, align 2
  %43 = load i16, i16* %35, align 2
  %44 = zext i16 %43 to i32
  %45 = mul nuw nsw i32 %25, %44
  %46 = getelementptr inbounds i16, i16* %29, i64 2
  %47 = load i16, i16* %46, align 2
  %48 = zext i16 %47 to i32
  %49 = mul nuw nsw i32 %27, %48
  %50 = add nuw nsw i32 %45, 64
  %51 = add nuw nsw i32 %50, %49
  %52 = lshr i32 %51, 7
  %53 = trunc i32 %52 to i16
  %54 = getelementptr inbounds i16, i16* %31, i64 1
  store i16 %53, i16* %54, align 2
  %55 = load i16, i16* %46, align 2
  %56 = zext i16 %55 to i32
  %57 = mul nuw nsw i32 %25, %56
  %58 = getelementptr inbounds i16, i16* %29, i64 3
  %59 = load i16, i16* %58, align 2
  %60 = zext i16 %59 to i32
  %61 = mul nuw nsw i32 %27, %60
  %62 = add nuw nsw i32 %57, 64
  %63 = add nuw nsw i32 %62, %61
  %64 = lshr i32 %63, 7
  %65 = trunc i32 %64 to i16
  %66 = getelementptr inbounds i16, i16* %31, i64 2
  store i16 %65, i16* %66, align 2
  %67 = load i16, i16* %58, align 2
  %68 = zext i16 %67 to i32
  %69 = mul nuw nsw i32 %25, %68
  %70 = getelementptr inbounds i16, i16* %29, i64 4
  %71 = load i16, i16* %70, align 2
  %72 = zext i16 %71 to i32
  %73 = mul nuw nsw i32 %27, %72
  %74 = add nuw nsw i32 %69, 64
  %75 = add nuw nsw i32 %74, %73
  %76 = lshr i32 %75, 7
  %77 = trunc i32 %76 to i16
  %78 = getelementptr inbounds i16, i16* %31, i64 3
  store i16 %77, i16* %78, align 2
  %79 = load i16, i16* %70, align 2
  %80 = zext i16 %79 to i32
  %81 = mul nuw nsw i32 %25, %80
  %82 = getelementptr inbounds i16, i16* %29, i64 5
  %83 = load i16, i16* %82, align 2
  %84 = zext i16 %83 to i32
  %85 = mul nuw nsw i32 %27, %84
  %86 = add nuw nsw i32 %81, 64
  %87 = add nuw nsw i32 %86, %85
  %88 = lshr i32 %87, 7
  %89 = trunc i32 %88 to i16
  %90 = getelementptr inbounds i16, i16* %31, i64 4
  store i16 %89, i16* %90, align 2
  %91 = load i16, i16* %82, align 2
  %92 = zext i16 %91 to i32
  %93 = mul nuw nsw i32 %25, %92
  %94 = getelementptr inbounds i16, i16* %29, i64 6
  %95 = load i16, i16* %94, align 2
  %96 = zext i16 %95 to i32
  %97 = mul nuw nsw i32 %27, %96
  %98 = add nuw nsw i32 %93, 64
  %99 = add nuw nsw i32 %98, %97
  %100 = lshr i32 %99, 7
  %101 = trunc i32 %100 to i16
  %102 = getelementptr inbounds i16, i16* %31, i64 5
  store i16 %101, i16* %102, align 2
  %103 = load i16, i16* %94, align 2
  %104 = zext i16 %103 to i32
  %105 = mul nuw nsw i32 %25, %104
  %106 = getelementptr inbounds i16, i16* %29, i64 7
  %107 = load i16, i16* %106, align 2
  %108 = zext i16 %107 to i32
  %109 = mul nuw nsw i32 %27, %108
  %110 = add nuw nsw i32 %105, 64
  %111 = add nuw nsw i32 %110, %109
  %112 = lshr i32 %111, 7
  %113 = trunc i32 %112 to i16
  %114 = getelementptr inbounds i16, i16* %31, i64 6
  store i16 %113, i16* %114, align 2
  %115 = load i16, i16* %106, align 2
  %116 = zext i16 %115 to i32
  %117 = mul nuw nsw i32 %25, %116
  %118 = getelementptr inbounds i16, i16* %29, i64 8
  %119 = load i16, i16* %118, align 2
  %120 = zext i16 %119 to i32
  %121 = mul nuw nsw i32 %27, %120
  %122 = add nuw nsw i32 %117, 64
  %123 = add nuw nsw i32 %122, %121
  %124 = lshr i32 %123, 7
  %125 = trunc i32 %124 to i16
  %126 = getelementptr inbounds i16, i16* %31, i64 7
  store i16 %125, i16* %126, align 2
  %127 = getelementptr inbounds i16, i16* %118, i64 %23
  %128 = getelementptr inbounds i16, i16* %31, i64 8
  %129 = add nuw nsw i32 %30, 1
  %130 = icmp eq i32 %129, 17
  br i1 %130, label %131, label %28

131:                                              ; preds = %28
  %132 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 0
  %133 = sext i32 %3 to i64
  %134 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %133, i64 0
  %135 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %133, i64 1
  %136 = load i8, i8* %134, align 2
  %137 = zext i8 %136 to i32
  %138 = load i8, i8* %135, align 1
  %139 = zext i8 %138 to i32
  %140 = insertelement <8 x i32> undef, i32 %137, i32 0
  %141 = shufflevector <8 x i32> %140, <8 x i32> undef, <8 x i32> zeroinitializer
  %142 = insertelement <8 x i32> undef, i32 %139, i32 0
  %143 = shufflevector <8 x i32> %142, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %144

144:                                              ; preds = %144, %131
  %145 = phi i32 [ 0, %131 ], [ %180, %144 ]
  %146 = phi i16* [ %15, %131 ], [ %178, %144 ]
  %147 = phi i16* [ %132, %131 ], [ %179, %144 ]
  %148 = getelementptr inbounds i16, i16* %146, i64 8
  %149 = bitcast i16* %146 to <8 x i16>*
  %150 = load <8 x i16>, <8 x i16>* %149, align 2
  %151 = zext <8 x i16> %150 to <8 x i32>
  %152 = mul nuw nsw <8 x i32> %141, %151
  %153 = bitcast i16* %148 to <8 x i16>*
  %154 = load <8 x i16>, <8 x i16>* %153, align 2
  %155 = zext <8 x i16> %154 to <8 x i32>
  %156 = mul nuw nsw <8 x i32> %143, %155
  %157 = add nuw nsw <8 x i32> %152, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %158 = add nuw nsw <8 x i32> %157, %156
  %159 = lshr <8 x i32> %158, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %160 = trunc <8 x i32> %159 to <8 x i16>
  %161 = bitcast i16* %147 to <8 x i16>*
  store <8 x i16> %160, <8 x i16>* %161, align 2
  %162 = getelementptr inbounds i16, i16* %146, i64 8
  %163 = getelementptr inbounds i16, i16* %147, i64 8
  %164 = getelementptr inbounds i16, i16* %146, i64 16
  %165 = bitcast i16* %162 to <8 x i16>*
  %166 = load <8 x i16>, <8 x i16>* %165, align 2
  %167 = zext <8 x i16> %166 to <8 x i32>
  %168 = mul nuw nsw <8 x i32> %141, %167
  %169 = bitcast i16* %164 to <8 x i16>*
  %170 = load <8 x i16>, <8 x i16>* %169, align 2
  %171 = zext <8 x i16> %170 to <8 x i32>
  %172 = mul nuw nsw <8 x i32> %143, %171
  %173 = add nuw nsw <8 x i32> %168, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %174 = add nuw nsw <8 x i32> %173, %172
  %175 = lshr <8 x i32> %174, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %176 = trunc <8 x i32> %175 to <8 x i16>
  %177 = bitcast i16* %163 to <8 x i16>*
  store <8 x i16> %176, <8 x i16>* %177, align 2
  %178 = getelementptr inbounds i16, i16* %146, i64 16
  %179 = getelementptr inbounds i16, i16* %147, i64 16
  %180 = add nuw nsw i32 %145, 2
  %181 = icmp eq i32 %180, 16
  br i1 %181, label %182, label %144

182:                                              ; preds = %144
  %183 = getelementptr inbounds [128 x i16], [128 x i16]* %11, i64 0, i64 0
  %184 = ptrtoint i8* %7 to i64
  %185 = shl i64 %184, 1
  %186 = inttoptr i64 %185 to i16*
  br label %187

187:                                              ; preds = %187, %182
  %188 = phi i16* [ %183, %182 ], [ %277, %187 ]
  %189 = phi i32 [ 0, %182 ], [ %280, %187 ]
  %190 = phi i16* [ %186, %182 ], [ %278, %187 ]
  %191 = phi i16* [ %132, %182 ], [ %279, %187 ]
  %192 = load i16, i16* %190, align 2
  %193 = zext i16 %192 to i32
  %194 = load i16, i16* %191, align 2
  %195 = zext i16 %194 to i32
  %196 = add nuw nsw i32 %193, 1
  %197 = add nuw nsw i32 %196, %195
  %198 = lshr i32 %197, 1
  %199 = trunc i32 %198 to i16
  store i16 %199, i16* %188, align 2
  %200 = getelementptr inbounds i16, i16* %190, i64 1
  %201 = load i16, i16* %200, align 2
  %202 = zext i16 %201 to i32
  %203 = getelementptr inbounds i16, i16* %191, i64 1
  %204 = load i16, i16* %203, align 2
  %205 = zext i16 %204 to i32
  %206 = add nuw nsw i32 %202, 1
  %207 = add nuw nsw i32 %206, %205
  %208 = lshr i32 %207, 1
  %209 = trunc i32 %208 to i16
  %210 = getelementptr inbounds i16, i16* %188, i64 1
  store i16 %209, i16* %210, align 2
  %211 = getelementptr inbounds i16, i16* %190, i64 2
  %212 = load i16, i16* %211, align 2
  %213 = zext i16 %212 to i32
  %214 = getelementptr inbounds i16, i16* %191, i64 2
  %215 = load i16, i16* %214, align 2
  %216 = zext i16 %215 to i32
  %217 = add nuw nsw i32 %213, 1
  %218 = add nuw nsw i32 %217, %216
  %219 = lshr i32 %218, 1
  %220 = trunc i32 %219 to i16
  %221 = getelementptr inbounds i16, i16* %188, i64 2
  store i16 %220, i16* %221, align 2
  %222 = getelementptr inbounds i16, i16* %190, i64 3
  %223 = load i16, i16* %222, align 2
  %224 = zext i16 %223 to i32
  %225 = getelementptr inbounds i16, i16* %191, i64 3
  %226 = load i16, i16* %225, align 2
  %227 = zext i16 %226 to i32
  %228 = add nuw nsw i32 %224, 1
  %229 = add nuw nsw i32 %228, %227
  %230 = lshr i32 %229, 1
  %231 = trunc i32 %230 to i16
  %232 = getelementptr inbounds i16, i16* %188, i64 3
  store i16 %231, i16* %232, align 2
  %233 = getelementptr inbounds i16, i16* %190, i64 4
  %234 = load i16, i16* %233, align 2
  %235 = zext i16 %234 to i32
  %236 = getelementptr inbounds i16, i16* %191, i64 4
  %237 = load i16, i16* %236, align 2
  %238 = zext i16 %237 to i32
  %239 = add nuw nsw i32 %235, 1
  %240 = add nuw nsw i32 %239, %238
  %241 = lshr i32 %240, 1
  %242 = trunc i32 %241 to i16
  %243 = getelementptr inbounds i16, i16* %188, i64 4
  store i16 %242, i16* %243, align 2
  %244 = getelementptr inbounds i16, i16* %190, i64 5
  %245 = load i16, i16* %244, align 2
  %246 = zext i16 %245 to i32
  %247 = getelementptr inbounds i16, i16* %191, i64 5
  %248 = load i16, i16* %247, align 2
  %249 = zext i16 %248 to i32
  %250 = add nuw nsw i32 %246, 1
  %251 = add nuw nsw i32 %250, %249
  %252 = lshr i32 %251, 1
  %253 = trunc i32 %252 to i16
  %254 = getelementptr inbounds i16, i16* %188, i64 5
  store i16 %253, i16* %254, align 2
  %255 = getelementptr inbounds i16, i16* %190, i64 6
  %256 = load i16, i16* %255, align 2
  %257 = zext i16 %256 to i32
  %258 = getelementptr inbounds i16, i16* %191, i64 6
  %259 = load i16, i16* %258, align 2
  %260 = zext i16 %259 to i32
  %261 = add nuw nsw i32 %257, 1
  %262 = add nuw nsw i32 %261, %260
  %263 = lshr i32 %262, 1
  %264 = trunc i32 %263 to i16
  %265 = getelementptr inbounds i16, i16* %188, i64 6
  store i16 %264, i16* %265, align 2
  %266 = getelementptr inbounds i16, i16* %190, i64 7
  %267 = load i16, i16* %266, align 2
  %268 = zext i16 %267 to i32
  %269 = getelementptr inbounds i16, i16* %191, i64 7
  %270 = load i16, i16* %269, align 2
  %271 = zext i16 %270 to i32
  %272 = add nuw nsw i32 %268, 1
  %273 = add nuw nsw i32 %272, %271
  %274 = lshr i32 %273, 1
  %275 = trunc i32 %274 to i16
  %276 = getelementptr inbounds i16, i16* %188, i64 7
  store i16 %275, i16* %276, align 2
  %277 = getelementptr inbounds i16, i16* %188, i64 8
  %278 = getelementptr inbounds i16, i16* %190, i64 8
  %279 = getelementptr inbounds i16, i16* %191, i64 8
  %280 = add nuw nsw i32 %189, 1
  %281 = icmp eq i32 %280, 16
  br i1 %281, label %282, label %187

282:                                              ; preds = %187
  %283 = ptrtoint [128 x i16]* %11 to i64
  %284 = lshr exact i64 %283, 1
  %285 = inttoptr i64 %284 to i8*
  %286 = call i32 @vpx_highbd_8_variance8x16_c(i8* nonnull %285, i32 8, i8* %4, i32 %5, i32* %6)
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %14) #4
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %13) #4
  call void @llvm.lifetime.end.p0i8(i64 272, i8* nonnull %12) #4
  ret i32 %286
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_highbd_10_sub_pixel_avg_variance8x16_c(i8*, i32, i32, i32, i8*, i32, i32* nocapture, i8*) local_unnamed_addr #2 {
  %9 = alloca [136 x i16], align 16
  %10 = alloca [128 x i16], align 16
  %11 = alloca [128 x i16], align 16
  %12 = bitcast [136 x i16]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 272, i8* nonnull %12) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %12, i8 -86, i64 272, i1 false)
  %13 = bitcast [128 x i16]* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %13) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %13, i8 -86, i64 256, i1 false)
  %14 = bitcast [128 x i16]* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %14) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %14, i8 -86, i64 256, i1 false)
  %15 = getelementptr inbounds [136 x i16], [136 x i16]* %9, i64 0, i64 0
  %16 = sext i32 %2 to i64
  %17 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %16, i64 0
  %18 = ptrtoint i8* %0 to i64
  %19 = shl i64 %18, 1
  %20 = inttoptr i64 %19 to i16*
  %21 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %16, i64 1
  %22 = add i32 %1, -8
  %23 = zext i32 %22 to i64
  %24 = load i8, i8* %17, align 2
  %25 = zext i8 %24 to i32
  %26 = load i8, i8* %21, align 1
  %27 = zext i8 %26 to i32
  br label %28

28:                                               ; preds = %28, %8
  %29 = phi i16* [ %20, %8 ], [ %127, %28 ]
  %30 = phi i32 [ 0, %8 ], [ %129, %28 ]
  %31 = phi i16* [ %15, %8 ], [ %128, %28 ]
  %32 = load i16, i16* %29, align 2
  %33 = zext i16 %32 to i32
  %34 = mul nuw nsw i32 %25, %33
  %35 = getelementptr inbounds i16, i16* %29, i64 1
  %36 = load i16, i16* %35, align 2
  %37 = zext i16 %36 to i32
  %38 = mul nuw nsw i32 %27, %37
  %39 = add nuw nsw i32 %34, 64
  %40 = add nuw nsw i32 %39, %38
  %41 = lshr i32 %40, 7
  %42 = trunc i32 %41 to i16
  store i16 %42, i16* %31, align 2
  %43 = load i16, i16* %35, align 2
  %44 = zext i16 %43 to i32
  %45 = mul nuw nsw i32 %25, %44
  %46 = getelementptr inbounds i16, i16* %29, i64 2
  %47 = load i16, i16* %46, align 2
  %48 = zext i16 %47 to i32
  %49 = mul nuw nsw i32 %27, %48
  %50 = add nuw nsw i32 %45, 64
  %51 = add nuw nsw i32 %50, %49
  %52 = lshr i32 %51, 7
  %53 = trunc i32 %52 to i16
  %54 = getelementptr inbounds i16, i16* %31, i64 1
  store i16 %53, i16* %54, align 2
  %55 = load i16, i16* %46, align 2
  %56 = zext i16 %55 to i32
  %57 = mul nuw nsw i32 %25, %56
  %58 = getelementptr inbounds i16, i16* %29, i64 3
  %59 = load i16, i16* %58, align 2
  %60 = zext i16 %59 to i32
  %61 = mul nuw nsw i32 %27, %60
  %62 = add nuw nsw i32 %57, 64
  %63 = add nuw nsw i32 %62, %61
  %64 = lshr i32 %63, 7
  %65 = trunc i32 %64 to i16
  %66 = getelementptr inbounds i16, i16* %31, i64 2
  store i16 %65, i16* %66, align 2
  %67 = load i16, i16* %58, align 2
  %68 = zext i16 %67 to i32
  %69 = mul nuw nsw i32 %25, %68
  %70 = getelementptr inbounds i16, i16* %29, i64 4
  %71 = load i16, i16* %70, align 2
  %72 = zext i16 %71 to i32
  %73 = mul nuw nsw i32 %27, %72
  %74 = add nuw nsw i32 %69, 64
  %75 = add nuw nsw i32 %74, %73
  %76 = lshr i32 %75, 7
  %77 = trunc i32 %76 to i16
  %78 = getelementptr inbounds i16, i16* %31, i64 3
  store i16 %77, i16* %78, align 2
  %79 = load i16, i16* %70, align 2
  %80 = zext i16 %79 to i32
  %81 = mul nuw nsw i32 %25, %80
  %82 = getelementptr inbounds i16, i16* %29, i64 5
  %83 = load i16, i16* %82, align 2
  %84 = zext i16 %83 to i32
  %85 = mul nuw nsw i32 %27, %84
  %86 = add nuw nsw i32 %81, 64
  %87 = add nuw nsw i32 %86, %85
  %88 = lshr i32 %87, 7
  %89 = trunc i32 %88 to i16
  %90 = getelementptr inbounds i16, i16* %31, i64 4
  store i16 %89, i16* %90, align 2
  %91 = load i16, i16* %82, align 2
  %92 = zext i16 %91 to i32
  %93 = mul nuw nsw i32 %25, %92
  %94 = getelementptr inbounds i16, i16* %29, i64 6
  %95 = load i16, i16* %94, align 2
  %96 = zext i16 %95 to i32
  %97 = mul nuw nsw i32 %27, %96
  %98 = add nuw nsw i32 %93, 64
  %99 = add nuw nsw i32 %98, %97
  %100 = lshr i32 %99, 7
  %101 = trunc i32 %100 to i16
  %102 = getelementptr inbounds i16, i16* %31, i64 5
  store i16 %101, i16* %102, align 2
  %103 = load i16, i16* %94, align 2
  %104 = zext i16 %103 to i32
  %105 = mul nuw nsw i32 %25, %104
  %106 = getelementptr inbounds i16, i16* %29, i64 7
  %107 = load i16, i16* %106, align 2
  %108 = zext i16 %107 to i32
  %109 = mul nuw nsw i32 %27, %108
  %110 = add nuw nsw i32 %105, 64
  %111 = add nuw nsw i32 %110, %109
  %112 = lshr i32 %111, 7
  %113 = trunc i32 %112 to i16
  %114 = getelementptr inbounds i16, i16* %31, i64 6
  store i16 %113, i16* %114, align 2
  %115 = load i16, i16* %106, align 2
  %116 = zext i16 %115 to i32
  %117 = mul nuw nsw i32 %25, %116
  %118 = getelementptr inbounds i16, i16* %29, i64 8
  %119 = load i16, i16* %118, align 2
  %120 = zext i16 %119 to i32
  %121 = mul nuw nsw i32 %27, %120
  %122 = add nuw nsw i32 %117, 64
  %123 = add nuw nsw i32 %122, %121
  %124 = lshr i32 %123, 7
  %125 = trunc i32 %124 to i16
  %126 = getelementptr inbounds i16, i16* %31, i64 7
  store i16 %125, i16* %126, align 2
  %127 = getelementptr inbounds i16, i16* %118, i64 %23
  %128 = getelementptr inbounds i16, i16* %31, i64 8
  %129 = add nuw nsw i32 %30, 1
  %130 = icmp eq i32 %129, 17
  br i1 %130, label %131, label %28

131:                                              ; preds = %28
  %132 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 0
  %133 = sext i32 %3 to i64
  %134 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %133, i64 0
  %135 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %133, i64 1
  %136 = load i8, i8* %134, align 2
  %137 = zext i8 %136 to i32
  %138 = load i8, i8* %135, align 1
  %139 = zext i8 %138 to i32
  %140 = insertelement <8 x i32> undef, i32 %137, i32 0
  %141 = shufflevector <8 x i32> %140, <8 x i32> undef, <8 x i32> zeroinitializer
  %142 = insertelement <8 x i32> undef, i32 %139, i32 0
  %143 = shufflevector <8 x i32> %142, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %144

144:                                              ; preds = %144, %131
  %145 = phi i32 [ 0, %131 ], [ %180, %144 ]
  %146 = phi i16* [ %15, %131 ], [ %178, %144 ]
  %147 = phi i16* [ %132, %131 ], [ %179, %144 ]
  %148 = getelementptr inbounds i16, i16* %146, i64 8
  %149 = bitcast i16* %146 to <8 x i16>*
  %150 = load <8 x i16>, <8 x i16>* %149, align 2
  %151 = zext <8 x i16> %150 to <8 x i32>
  %152 = mul nuw nsw <8 x i32> %141, %151
  %153 = bitcast i16* %148 to <8 x i16>*
  %154 = load <8 x i16>, <8 x i16>* %153, align 2
  %155 = zext <8 x i16> %154 to <8 x i32>
  %156 = mul nuw nsw <8 x i32> %143, %155
  %157 = add nuw nsw <8 x i32> %152, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %158 = add nuw nsw <8 x i32> %157, %156
  %159 = lshr <8 x i32> %158, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %160 = trunc <8 x i32> %159 to <8 x i16>
  %161 = bitcast i16* %147 to <8 x i16>*
  store <8 x i16> %160, <8 x i16>* %161, align 2
  %162 = getelementptr inbounds i16, i16* %146, i64 8
  %163 = getelementptr inbounds i16, i16* %147, i64 8
  %164 = getelementptr inbounds i16, i16* %146, i64 16
  %165 = bitcast i16* %162 to <8 x i16>*
  %166 = load <8 x i16>, <8 x i16>* %165, align 2
  %167 = zext <8 x i16> %166 to <8 x i32>
  %168 = mul nuw nsw <8 x i32> %141, %167
  %169 = bitcast i16* %164 to <8 x i16>*
  %170 = load <8 x i16>, <8 x i16>* %169, align 2
  %171 = zext <8 x i16> %170 to <8 x i32>
  %172 = mul nuw nsw <8 x i32> %143, %171
  %173 = add nuw nsw <8 x i32> %168, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %174 = add nuw nsw <8 x i32> %173, %172
  %175 = lshr <8 x i32> %174, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %176 = trunc <8 x i32> %175 to <8 x i16>
  %177 = bitcast i16* %163 to <8 x i16>*
  store <8 x i16> %176, <8 x i16>* %177, align 2
  %178 = getelementptr inbounds i16, i16* %146, i64 16
  %179 = getelementptr inbounds i16, i16* %147, i64 16
  %180 = add nuw nsw i32 %145, 2
  %181 = icmp eq i32 %180, 16
  br i1 %181, label %182, label %144

182:                                              ; preds = %144
  %183 = getelementptr inbounds [128 x i16], [128 x i16]* %11, i64 0, i64 0
  %184 = ptrtoint i8* %7 to i64
  %185 = shl i64 %184, 1
  %186 = inttoptr i64 %185 to i16*
  br label %187

187:                                              ; preds = %187, %182
  %188 = phi i16* [ %183, %182 ], [ %277, %187 ]
  %189 = phi i32 [ 0, %182 ], [ %280, %187 ]
  %190 = phi i16* [ %186, %182 ], [ %278, %187 ]
  %191 = phi i16* [ %132, %182 ], [ %279, %187 ]
  %192 = load i16, i16* %190, align 2
  %193 = zext i16 %192 to i32
  %194 = load i16, i16* %191, align 2
  %195 = zext i16 %194 to i32
  %196 = add nuw nsw i32 %193, 1
  %197 = add nuw nsw i32 %196, %195
  %198 = lshr i32 %197, 1
  %199 = trunc i32 %198 to i16
  store i16 %199, i16* %188, align 2
  %200 = getelementptr inbounds i16, i16* %190, i64 1
  %201 = load i16, i16* %200, align 2
  %202 = zext i16 %201 to i32
  %203 = getelementptr inbounds i16, i16* %191, i64 1
  %204 = load i16, i16* %203, align 2
  %205 = zext i16 %204 to i32
  %206 = add nuw nsw i32 %202, 1
  %207 = add nuw nsw i32 %206, %205
  %208 = lshr i32 %207, 1
  %209 = trunc i32 %208 to i16
  %210 = getelementptr inbounds i16, i16* %188, i64 1
  store i16 %209, i16* %210, align 2
  %211 = getelementptr inbounds i16, i16* %190, i64 2
  %212 = load i16, i16* %211, align 2
  %213 = zext i16 %212 to i32
  %214 = getelementptr inbounds i16, i16* %191, i64 2
  %215 = load i16, i16* %214, align 2
  %216 = zext i16 %215 to i32
  %217 = add nuw nsw i32 %213, 1
  %218 = add nuw nsw i32 %217, %216
  %219 = lshr i32 %218, 1
  %220 = trunc i32 %219 to i16
  %221 = getelementptr inbounds i16, i16* %188, i64 2
  store i16 %220, i16* %221, align 2
  %222 = getelementptr inbounds i16, i16* %190, i64 3
  %223 = load i16, i16* %222, align 2
  %224 = zext i16 %223 to i32
  %225 = getelementptr inbounds i16, i16* %191, i64 3
  %226 = load i16, i16* %225, align 2
  %227 = zext i16 %226 to i32
  %228 = add nuw nsw i32 %224, 1
  %229 = add nuw nsw i32 %228, %227
  %230 = lshr i32 %229, 1
  %231 = trunc i32 %230 to i16
  %232 = getelementptr inbounds i16, i16* %188, i64 3
  store i16 %231, i16* %232, align 2
  %233 = getelementptr inbounds i16, i16* %190, i64 4
  %234 = load i16, i16* %233, align 2
  %235 = zext i16 %234 to i32
  %236 = getelementptr inbounds i16, i16* %191, i64 4
  %237 = load i16, i16* %236, align 2
  %238 = zext i16 %237 to i32
  %239 = add nuw nsw i32 %235, 1
  %240 = add nuw nsw i32 %239, %238
  %241 = lshr i32 %240, 1
  %242 = trunc i32 %241 to i16
  %243 = getelementptr inbounds i16, i16* %188, i64 4
  store i16 %242, i16* %243, align 2
  %244 = getelementptr inbounds i16, i16* %190, i64 5
  %245 = load i16, i16* %244, align 2
  %246 = zext i16 %245 to i32
  %247 = getelementptr inbounds i16, i16* %191, i64 5
  %248 = load i16, i16* %247, align 2
  %249 = zext i16 %248 to i32
  %250 = add nuw nsw i32 %246, 1
  %251 = add nuw nsw i32 %250, %249
  %252 = lshr i32 %251, 1
  %253 = trunc i32 %252 to i16
  %254 = getelementptr inbounds i16, i16* %188, i64 5
  store i16 %253, i16* %254, align 2
  %255 = getelementptr inbounds i16, i16* %190, i64 6
  %256 = load i16, i16* %255, align 2
  %257 = zext i16 %256 to i32
  %258 = getelementptr inbounds i16, i16* %191, i64 6
  %259 = load i16, i16* %258, align 2
  %260 = zext i16 %259 to i32
  %261 = add nuw nsw i32 %257, 1
  %262 = add nuw nsw i32 %261, %260
  %263 = lshr i32 %262, 1
  %264 = trunc i32 %263 to i16
  %265 = getelementptr inbounds i16, i16* %188, i64 6
  store i16 %264, i16* %265, align 2
  %266 = getelementptr inbounds i16, i16* %190, i64 7
  %267 = load i16, i16* %266, align 2
  %268 = zext i16 %267 to i32
  %269 = getelementptr inbounds i16, i16* %191, i64 7
  %270 = load i16, i16* %269, align 2
  %271 = zext i16 %270 to i32
  %272 = add nuw nsw i32 %268, 1
  %273 = add nuw nsw i32 %272, %271
  %274 = lshr i32 %273, 1
  %275 = trunc i32 %274 to i16
  %276 = getelementptr inbounds i16, i16* %188, i64 7
  store i16 %275, i16* %276, align 2
  %277 = getelementptr inbounds i16, i16* %188, i64 8
  %278 = getelementptr inbounds i16, i16* %190, i64 8
  %279 = getelementptr inbounds i16, i16* %191, i64 8
  %280 = add nuw nsw i32 %189, 1
  %281 = icmp eq i32 %280, 16
  br i1 %281, label %282, label %187

282:                                              ; preds = %187
  %283 = ptrtoint [128 x i16]* %11 to i64
  %284 = lshr exact i64 %283, 1
  %285 = inttoptr i64 %284 to i8*
  %286 = call i32 @vpx_highbd_10_variance8x16_c(i8* nonnull %285, i32 8, i8* %4, i32 %5, i32* %6)
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %14) #4
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %13) #4
  call void @llvm.lifetime.end.p0i8(i64 272, i8* nonnull %12) #4
  ret i32 %286
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_highbd_12_sub_pixel_avg_variance8x16_c(i8*, i32, i32, i32, i8*, i32, i32* nocapture, i8*) local_unnamed_addr #2 {
  %9 = alloca [136 x i16], align 16
  %10 = alloca [128 x i16], align 16
  %11 = alloca [128 x i16], align 16
  %12 = bitcast [136 x i16]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 272, i8* nonnull %12) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %12, i8 -86, i64 272, i1 false)
  %13 = bitcast [128 x i16]* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %13) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %13, i8 -86, i64 256, i1 false)
  %14 = bitcast [128 x i16]* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %14) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %14, i8 -86, i64 256, i1 false)
  %15 = getelementptr inbounds [136 x i16], [136 x i16]* %9, i64 0, i64 0
  %16 = sext i32 %2 to i64
  %17 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %16, i64 0
  %18 = ptrtoint i8* %0 to i64
  %19 = shl i64 %18, 1
  %20 = inttoptr i64 %19 to i16*
  %21 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %16, i64 1
  %22 = add i32 %1, -8
  %23 = zext i32 %22 to i64
  %24 = load i8, i8* %17, align 2
  %25 = zext i8 %24 to i32
  %26 = load i8, i8* %21, align 1
  %27 = zext i8 %26 to i32
  br label %28

28:                                               ; preds = %28, %8
  %29 = phi i16* [ %20, %8 ], [ %127, %28 ]
  %30 = phi i32 [ 0, %8 ], [ %129, %28 ]
  %31 = phi i16* [ %15, %8 ], [ %128, %28 ]
  %32 = load i16, i16* %29, align 2
  %33 = zext i16 %32 to i32
  %34 = mul nuw nsw i32 %25, %33
  %35 = getelementptr inbounds i16, i16* %29, i64 1
  %36 = load i16, i16* %35, align 2
  %37 = zext i16 %36 to i32
  %38 = mul nuw nsw i32 %27, %37
  %39 = add nuw nsw i32 %34, 64
  %40 = add nuw nsw i32 %39, %38
  %41 = lshr i32 %40, 7
  %42 = trunc i32 %41 to i16
  store i16 %42, i16* %31, align 2
  %43 = load i16, i16* %35, align 2
  %44 = zext i16 %43 to i32
  %45 = mul nuw nsw i32 %25, %44
  %46 = getelementptr inbounds i16, i16* %29, i64 2
  %47 = load i16, i16* %46, align 2
  %48 = zext i16 %47 to i32
  %49 = mul nuw nsw i32 %27, %48
  %50 = add nuw nsw i32 %45, 64
  %51 = add nuw nsw i32 %50, %49
  %52 = lshr i32 %51, 7
  %53 = trunc i32 %52 to i16
  %54 = getelementptr inbounds i16, i16* %31, i64 1
  store i16 %53, i16* %54, align 2
  %55 = load i16, i16* %46, align 2
  %56 = zext i16 %55 to i32
  %57 = mul nuw nsw i32 %25, %56
  %58 = getelementptr inbounds i16, i16* %29, i64 3
  %59 = load i16, i16* %58, align 2
  %60 = zext i16 %59 to i32
  %61 = mul nuw nsw i32 %27, %60
  %62 = add nuw nsw i32 %57, 64
  %63 = add nuw nsw i32 %62, %61
  %64 = lshr i32 %63, 7
  %65 = trunc i32 %64 to i16
  %66 = getelementptr inbounds i16, i16* %31, i64 2
  store i16 %65, i16* %66, align 2
  %67 = load i16, i16* %58, align 2
  %68 = zext i16 %67 to i32
  %69 = mul nuw nsw i32 %25, %68
  %70 = getelementptr inbounds i16, i16* %29, i64 4
  %71 = load i16, i16* %70, align 2
  %72 = zext i16 %71 to i32
  %73 = mul nuw nsw i32 %27, %72
  %74 = add nuw nsw i32 %69, 64
  %75 = add nuw nsw i32 %74, %73
  %76 = lshr i32 %75, 7
  %77 = trunc i32 %76 to i16
  %78 = getelementptr inbounds i16, i16* %31, i64 3
  store i16 %77, i16* %78, align 2
  %79 = load i16, i16* %70, align 2
  %80 = zext i16 %79 to i32
  %81 = mul nuw nsw i32 %25, %80
  %82 = getelementptr inbounds i16, i16* %29, i64 5
  %83 = load i16, i16* %82, align 2
  %84 = zext i16 %83 to i32
  %85 = mul nuw nsw i32 %27, %84
  %86 = add nuw nsw i32 %81, 64
  %87 = add nuw nsw i32 %86, %85
  %88 = lshr i32 %87, 7
  %89 = trunc i32 %88 to i16
  %90 = getelementptr inbounds i16, i16* %31, i64 4
  store i16 %89, i16* %90, align 2
  %91 = load i16, i16* %82, align 2
  %92 = zext i16 %91 to i32
  %93 = mul nuw nsw i32 %25, %92
  %94 = getelementptr inbounds i16, i16* %29, i64 6
  %95 = load i16, i16* %94, align 2
  %96 = zext i16 %95 to i32
  %97 = mul nuw nsw i32 %27, %96
  %98 = add nuw nsw i32 %93, 64
  %99 = add nuw nsw i32 %98, %97
  %100 = lshr i32 %99, 7
  %101 = trunc i32 %100 to i16
  %102 = getelementptr inbounds i16, i16* %31, i64 5
  store i16 %101, i16* %102, align 2
  %103 = load i16, i16* %94, align 2
  %104 = zext i16 %103 to i32
  %105 = mul nuw nsw i32 %25, %104
  %106 = getelementptr inbounds i16, i16* %29, i64 7
  %107 = load i16, i16* %106, align 2
  %108 = zext i16 %107 to i32
  %109 = mul nuw nsw i32 %27, %108
  %110 = add nuw nsw i32 %105, 64
  %111 = add nuw nsw i32 %110, %109
  %112 = lshr i32 %111, 7
  %113 = trunc i32 %112 to i16
  %114 = getelementptr inbounds i16, i16* %31, i64 6
  store i16 %113, i16* %114, align 2
  %115 = load i16, i16* %106, align 2
  %116 = zext i16 %115 to i32
  %117 = mul nuw nsw i32 %25, %116
  %118 = getelementptr inbounds i16, i16* %29, i64 8
  %119 = load i16, i16* %118, align 2
  %120 = zext i16 %119 to i32
  %121 = mul nuw nsw i32 %27, %120
  %122 = add nuw nsw i32 %117, 64
  %123 = add nuw nsw i32 %122, %121
  %124 = lshr i32 %123, 7
  %125 = trunc i32 %124 to i16
  %126 = getelementptr inbounds i16, i16* %31, i64 7
  store i16 %125, i16* %126, align 2
  %127 = getelementptr inbounds i16, i16* %118, i64 %23
  %128 = getelementptr inbounds i16, i16* %31, i64 8
  %129 = add nuw nsw i32 %30, 1
  %130 = icmp eq i32 %129, 17
  br i1 %130, label %131, label %28

131:                                              ; preds = %28
  %132 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 0
  %133 = sext i32 %3 to i64
  %134 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %133, i64 0
  %135 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %133, i64 1
  %136 = load i8, i8* %134, align 2
  %137 = zext i8 %136 to i32
  %138 = load i8, i8* %135, align 1
  %139 = zext i8 %138 to i32
  %140 = insertelement <8 x i32> undef, i32 %137, i32 0
  %141 = shufflevector <8 x i32> %140, <8 x i32> undef, <8 x i32> zeroinitializer
  %142 = insertelement <8 x i32> undef, i32 %139, i32 0
  %143 = shufflevector <8 x i32> %142, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %144

144:                                              ; preds = %144, %131
  %145 = phi i32 [ 0, %131 ], [ %180, %144 ]
  %146 = phi i16* [ %15, %131 ], [ %178, %144 ]
  %147 = phi i16* [ %132, %131 ], [ %179, %144 ]
  %148 = getelementptr inbounds i16, i16* %146, i64 8
  %149 = bitcast i16* %146 to <8 x i16>*
  %150 = load <8 x i16>, <8 x i16>* %149, align 2
  %151 = zext <8 x i16> %150 to <8 x i32>
  %152 = mul nuw nsw <8 x i32> %141, %151
  %153 = bitcast i16* %148 to <8 x i16>*
  %154 = load <8 x i16>, <8 x i16>* %153, align 2
  %155 = zext <8 x i16> %154 to <8 x i32>
  %156 = mul nuw nsw <8 x i32> %143, %155
  %157 = add nuw nsw <8 x i32> %152, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %158 = add nuw nsw <8 x i32> %157, %156
  %159 = lshr <8 x i32> %158, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %160 = trunc <8 x i32> %159 to <8 x i16>
  %161 = bitcast i16* %147 to <8 x i16>*
  store <8 x i16> %160, <8 x i16>* %161, align 2
  %162 = getelementptr inbounds i16, i16* %146, i64 8
  %163 = getelementptr inbounds i16, i16* %147, i64 8
  %164 = getelementptr inbounds i16, i16* %146, i64 16
  %165 = bitcast i16* %162 to <8 x i16>*
  %166 = load <8 x i16>, <8 x i16>* %165, align 2
  %167 = zext <8 x i16> %166 to <8 x i32>
  %168 = mul nuw nsw <8 x i32> %141, %167
  %169 = bitcast i16* %164 to <8 x i16>*
  %170 = load <8 x i16>, <8 x i16>* %169, align 2
  %171 = zext <8 x i16> %170 to <8 x i32>
  %172 = mul nuw nsw <8 x i32> %143, %171
  %173 = add nuw nsw <8 x i32> %168, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %174 = add nuw nsw <8 x i32> %173, %172
  %175 = lshr <8 x i32> %174, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %176 = trunc <8 x i32> %175 to <8 x i16>
  %177 = bitcast i16* %163 to <8 x i16>*
  store <8 x i16> %176, <8 x i16>* %177, align 2
  %178 = getelementptr inbounds i16, i16* %146, i64 16
  %179 = getelementptr inbounds i16, i16* %147, i64 16
  %180 = add nuw nsw i32 %145, 2
  %181 = icmp eq i32 %180, 16
  br i1 %181, label %182, label %144

182:                                              ; preds = %144
  %183 = getelementptr inbounds [128 x i16], [128 x i16]* %11, i64 0, i64 0
  %184 = ptrtoint i8* %7 to i64
  %185 = shl i64 %184, 1
  %186 = inttoptr i64 %185 to i16*
  br label %187

187:                                              ; preds = %187, %182
  %188 = phi i16* [ %183, %182 ], [ %277, %187 ]
  %189 = phi i32 [ 0, %182 ], [ %280, %187 ]
  %190 = phi i16* [ %186, %182 ], [ %278, %187 ]
  %191 = phi i16* [ %132, %182 ], [ %279, %187 ]
  %192 = load i16, i16* %190, align 2
  %193 = zext i16 %192 to i32
  %194 = load i16, i16* %191, align 2
  %195 = zext i16 %194 to i32
  %196 = add nuw nsw i32 %193, 1
  %197 = add nuw nsw i32 %196, %195
  %198 = lshr i32 %197, 1
  %199 = trunc i32 %198 to i16
  store i16 %199, i16* %188, align 2
  %200 = getelementptr inbounds i16, i16* %190, i64 1
  %201 = load i16, i16* %200, align 2
  %202 = zext i16 %201 to i32
  %203 = getelementptr inbounds i16, i16* %191, i64 1
  %204 = load i16, i16* %203, align 2
  %205 = zext i16 %204 to i32
  %206 = add nuw nsw i32 %202, 1
  %207 = add nuw nsw i32 %206, %205
  %208 = lshr i32 %207, 1
  %209 = trunc i32 %208 to i16
  %210 = getelementptr inbounds i16, i16* %188, i64 1
  store i16 %209, i16* %210, align 2
  %211 = getelementptr inbounds i16, i16* %190, i64 2
  %212 = load i16, i16* %211, align 2
  %213 = zext i16 %212 to i32
  %214 = getelementptr inbounds i16, i16* %191, i64 2
  %215 = load i16, i16* %214, align 2
  %216 = zext i16 %215 to i32
  %217 = add nuw nsw i32 %213, 1
  %218 = add nuw nsw i32 %217, %216
  %219 = lshr i32 %218, 1
  %220 = trunc i32 %219 to i16
  %221 = getelementptr inbounds i16, i16* %188, i64 2
  store i16 %220, i16* %221, align 2
  %222 = getelementptr inbounds i16, i16* %190, i64 3
  %223 = load i16, i16* %222, align 2
  %224 = zext i16 %223 to i32
  %225 = getelementptr inbounds i16, i16* %191, i64 3
  %226 = load i16, i16* %225, align 2
  %227 = zext i16 %226 to i32
  %228 = add nuw nsw i32 %224, 1
  %229 = add nuw nsw i32 %228, %227
  %230 = lshr i32 %229, 1
  %231 = trunc i32 %230 to i16
  %232 = getelementptr inbounds i16, i16* %188, i64 3
  store i16 %231, i16* %232, align 2
  %233 = getelementptr inbounds i16, i16* %190, i64 4
  %234 = load i16, i16* %233, align 2
  %235 = zext i16 %234 to i32
  %236 = getelementptr inbounds i16, i16* %191, i64 4
  %237 = load i16, i16* %236, align 2
  %238 = zext i16 %237 to i32
  %239 = add nuw nsw i32 %235, 1
  %240 = add nuw nsw i32 %239, %238
  %241 = lshr i32 %240, 1
  %242 = trunc i32 %241 to i16
  %243 = getelementptr inbounds i16, i16* %188, i64 4
  store i16 %242, i16* %243, align 2
  %244 = getelementptr inbounds i16, i16* %190, i64 5
  %245 = load i16, i16* %244, align 2
  %246 = zext i16 %245 to i32
  %247 = getelementptr inbounds i16, i16* %191, i64 5
  %248 = load i16, i16* %247, align 2
  %249 = zext i16 %248 to i32
  %250 = add nuw nsw i32 %246, 1
  %251 = add nuw nsw i32 %250, %249
  %252 = lshr i32 %251, 1
  %253 = trunc i32 %252 to i16
  %254 = getelementptr inbounds i16, i16* %188, i64 5
  store i16 %253, i16* %254, align 2
  %255 = getelementptr inbounds i16, i16* %190, i64 6
  %256 = load i16, i16* %255, align 2
  %257 = zext i16 %256 to i32
  %258 = getelementptr inbounds i16, i16* %191, i64 6
  %259 = load i16, i16* %258, align 2
  %260 = zext i16 %259 to i32
  %261 = add nuw nsw i32 %257, 1
  %262 = add nuw nsw i32 %261, %260
  %263 = lshr i32 %262, 1
  %264 = trunc i32 %263 to i16
  %265 = getelementptr inbounds i16, i16* %188, i64 6
  store i16 %264, i16* %265, align 2
  %266 = getelementptr inbounds i16, i16* %190, i64 7
  %267 = load i16, i16* %266, align 2
  %268 = zext i16 %267 to i32
  %269 = getelementptr inbounds i16, i16* %191, i64 7
  %270 = load i16, i16* %269, align 2
  %271 = zext i16 %270 to i32
  %272 = add nuw nsw i32 %268, 1
  %273 = add nuw nsw i32 %272, %271
  %274 = lshr i32 %273, 1
  %275 = trunc i32 %274 to i16
  %276 = getelementptr inbounds i16, i16* %188, i64 7
  store i16 %275, i16* %276, align 2
  %277 = getelementptr inbounds i16, i16* %188, i64 8
  %278 = getelementptr inbounds i16, i16* %190, i64 8
  %279 = getelementptr inbounds i16, i16* %191, i64 8
  %280 = add nuw nsw i32 %189, 1
  %281 = icmp eq i32 %280, 16
  br i1 %281, label %282, label %187

282:                                              ; preds = %187
  %283 = ptrtoint [128 x i16]* %11 to i64
  %284 = lshr exact i64 %283, 1
  %285 = inttoptr i64 %284 to i8*
  %286 = call i32 @vpx_highbd_12_variance8x16_c(i8* nonnull %285, i32 8, i8* %4, i32 %5, i32* %6)
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %14) #4
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %13) #4
  call void @llvm.lifetime.end.p0i8(i64 272, i8* nonnull %12) #4
  ret i32 %286
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_highbd_8_variance8x8_c(i8*, i32, i8*, i32, i32* nocapture) local_unnamed_addr #2 {
  %6 = ptrtoint i8* %2 to i64
  %7 = shl i64 %6, 1
  %8 = inttoptr i64 %7 to i16*
  %9 = ptrtoint i8* %0 to i64
  %10 = shl i64 %9, 1
  %11 = inttoptr i64 %10 to i16*
  %12 = sext i32 %1 to i64
  %13 = sext i32 %3 to i64
  br label %14

14:                                               ; preds = %14, %5
  %15 = phi i64 [ 0, %5 ], [ %67, %14 ]
  %16 = phi i64 [ 0, %5 ], [ %63, %14 ]
  %17 = phi i32 [ 0, %5 ], [ %70, %14 ]
  %18 = phi i16* [ %8, %5 ], [ %69, %14 ]
  %19 = phi i16* [ %11, %5 ], [ %68, %14 ]
  %20 = bitcast i16* %19 to <8 x i16>*
  %21 = load <8 x i16>, <8 x i16>* %20, align 2
  %22 = zext <8 x i16> %21 to <8 x i32>
  %23 = bitcast i16* %18 to <8 x i16>*
  %24 = load <8 x i16>, <8 x i16>* %23, align 2
  %25 = zext <8 x i16> %24 to <8 x i32>
  %26 = sub nsw <8 x i32> %22, %25
  %27 = sext <8 x i32> %26 to <8 x i64>
  %28 = extractelement <8 x i32> %26, i32 0
  %29 = mul nsw i32 %28, %28
  %30 = zext i32 %29 to i64
  %31 = add i64 %15, %30
  %32 = extractelement <8 x i32> %26, i32 1
  %33 = mul nsw i32 %32, %32
  %34 = zext i32 %33 to i64
  %35 = add i64 %31, %34
  %36 = extractelement <8 x i32> %26, i32 2
  %37 = mul nsw i32 %36, %36
  %38 = zext i32 %37 to i64
  %39 = add i64 %35, %38
  %40 = extractelement <8 x i32> %26, i32 3
  %41 = mul nsw i32 %40, %40
  %42 = zext i32 %41 to i64
  %43 = add i64 %39, %42
  %44 = extractelement <8 x i32> %26, i32 4
  %45 = mul nsw i32 %44, %44
  %46 = zext i32 %45 to i64
  %47 = add i64 %43, %46
  %48 = extractelement <8 x i32> %26, i32 5
  %49 = mul nsw i32 %48, %48
  %50 = zext i32 %49 to i64
  %51 = add i64 %47, %50
  %52 = extractelement <8 x i32> %26, i32 6
  %53 = mul nsw i32 %52, %52
  %54 = zext i32 %53 to i64
  %55 = add i64 %51, %54
  %56 = shufflevector <8 x i64> %27, <8 x i64> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %57 = add nsw <8 x i64> %56, %27
  %58 = shufflevector <8 x i64> %57, <8 x i64> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %59 = add nsw <8 x i64> %57, %58
  %60 = shufflevector <8 x i64> %59, <8 x i64> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %61 = add nsw <8 x i64> %59, %60
  %62 = extractelement <8 x i64> %61, i32 0
  %63 = add nsw i64 %62, %16
  %64 = extractelement <8 x i32> %26, i32 7
  %65 = mul nsw i32 %64, %64
  %66 = zext i32 %65 to i64
  %67 = add i64 %55, %66
  %68 = getelementptr inbounds i16, i16* %19, i64 %12
  %69 = getelementptr inbounds i16, i16* %18, i64 %13
  %70 = add nuw nsw i32 %17, 1
  %71 = icmp eq i32 %70, 8
  br i1 %71, label %72, label %14

72:                                               ; preds = %14
  %73 = trunc i64 %67 to i32
  store i32 %73, i32* %4, align 4
  %74 = shl i64 %63, 32
  %75 = ashr exact i64 %74, 32
  %76 = mul nsw i64 %75, %75
  %77 = lshr i64 %76, 6
  %78 = trunc i64 %77 to i32
  %79 = sub i32 %73, %78
  ret i32 %79
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_highbd_10_variance8x8_c(i8*, i32, i8*, i32, i32* nocapture) local_unnamed_addr #2 {
  %6 = ptrtoint i8* %2 to i64
  %7 = shl i64 %6, 1
  %8 = inttoptr i64 %7 to i16*
  %9 = ptrtoint i8* %0 to i64
  %10 = shl i64 %9, 1
  %11 = inttoptr i64 %10 to i16*
  %12 = sext i32 %1 to i64
  %13 = sext i32 %3 to i64
  br label %14

14:                                               ; preds = %14, %5
  %15 = phi i64 [ 0, %5 ], [ %67, %14 ]
  %16 = phi i64 [ 0, %5 ], [ %63, %14 ]
  %17 = phi i32 [ 0, %5 ], [ %70, %14 ]
  %18 = phi i16* [ %8, %5 ], [ %69, %14 ]
  %19 = phi i16* [ %11, %5 ], [ %68, %14 ]
  %20 = bitcast i16* %19 to <8 x i16>*
  %21 = load <8 x i16>, <8 x i16>* %20, align 2
  %22 = zext <8 x i16> %21 to <8 x i32>
  %23 = bitcast i16* %18 to <8 x i16>*
  %24 = load <8 x i16>, <8 x i16>* %23, align 2
  %25 = zext <8 x i16> %24 to <8 x i32>
  %26 = sub nsw <8 x i32> %22, %25
  %27 = sext <8 x i32> %26 to <8 x i64>
  %28 = extractelement <8 x i32> %26, i32 0
  %29 = mul nsw i32 %28, %28
  %30 = zext i32 %29 to i64
  %31 = add i64 %15, %30
  %32 = extractelement <8 x i32> %26, i32 1
  %33 = mul nsw i32 %32, %32
  %34 = zext i32 %33 to i64
  %35 = add i64 %31, %34
  %36 = extractelement <8 x i32> %26, i32 2
  %37 = mul nsw i32 %36, %36
  %38 = zext i32 %37 to i64
  %39 = add i64 %35, %38
  %40 = extractelement <8 x i32> %26, i32 3
  %41 = mul nsw i32 %40, %40
  %42 = zext i32 %41 to i64
  %43 = add i64 %39, %42
  %44 = extractelement <8 x i32> %26, i32 4
  %45 = mul nsw i32 %44, %44
  %46 = zext i32 %45 to i64
  %47 = add i64 %43, %46
  %48 = extractelement <8 x i32> %26, i32 5
  %49 = mul nsw i32 %48, %48
  %50 = zext i32 %49 to i64
  %51 = add i64 %47, %50
  %52 = extractelement <8 x i32> %26, i32 6
  %53 = mul nsw i32 %52, %52
  %54 = zext i32 %53 to i64
  %55 = add i64 %51, %54
  %56 = shufflevector <8 x i64> %27, <8 x i64> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %57 = add nsw <8 x i64> %56, %27
  %58 = shufflevector <8 x i64> %57, <8 x i64> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %59 = add nsw <8 x i64> %57, %58
  %60 = shufflevector <8 x i64> %59, <8 x i64> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %61 = add nsw <8 x i64> %59, %60
  %62 = extractelement <8 x i64> %61, i32 0
  %63 = add nsw i64 %62, %16
  %64 = extractelement <8 x i32> %26, i32 7
  %65 = mul nsw i32 %64, %64
  %66 = zext i32 %65 to i64
  %67 = add i64 %55, %66
  %68 = getelementptr inbounds i16, i16* %19, i64 %12
  %69 = getelementptr inbounds i16, i16* %18, i64 %13
  %70 = add nuw nsw i32 %17, 1
  %71 = icmp eq i32 %70, 8
  br i1 %71, label %72, label %14

72:                                               ; preds = %14
  %73 = add i64 %67, 8
  %74 = lshr i64 %73, 4
  %75 = trunc i64 %74 to i32
  store i32 %75, i32* %4, align 4
  %76 = and i64 %74, 4294967295
  %77 = shl i64 %63, 30
  %78 = add i64 %77, 2147483648
  %79 = ashr i64 %78, 32
  %80 = mul nsw i64 %79, %79
  %81 = lshr i64 %80, 6
  %82 = sub nsw i64 %76, %81
  %83 = icmp sgt i64 %82, -1
  %84 = trunc i64 %82 to i32
  %85 = select i1 %83, i32 %84, i32 0
  ret i32 %85
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_highbd_12_variance8x8_c(i8*, i32, i8*, i32, i32* nocapture) local_unnamed_addr #2 {
  %6 = ptrtoint i8* %2 to i64
  %7 = shl i64 %6, 1
  %8 = inttoptr i64 %7 to i16*
  %9 = ptrtoint i8* %0 to i64
  %10 = shl i64 %9, 1
  %11 = inttoptr i64 %10 to i16*
  %12 = sext i32 %1 to i64
  %13 = sext i32 %3 to i64
  br label %14

14:                                               ; preds = %14, %5
  %15 = phi i64 [ 0, %5 ], [ %67, %14 ]
  %16 = phi i64 [ 0, %5 ], [ %63, %14 ]
  %17 = phi i32 [ 0, %5 ], [ %70, %14 ]
  %18 = phi i16* [ %8, %5 ], [ %69, %14 ]
  %19 = phi i16* [ %11, %5 ], [ %68, %14 ]
  %20 = bitcast i16* %19 to <8 x i16>*
  %21 = load <8 x i16>, <8 x i16>* %20, align 2
  %22 = zext <8 x i16> %21 to <8 x i32>
  %23 = bitcast i16* %18 to <8 x i16>*
  %24 = load <8 x i16>, <8 x i16>* %23, align 2
  %25 = zext <8 x i16> %24 to <8 x i32>
  %26 = sub nsw <8 x i32> %22, %25
  %27 = sext <8 x i32> %26 to <8 x i64>
  %28 = extractelement <8 x i32> %26, i32 0
  %29 = mul nsw i32 %28, %28
  %30 = zext i32 %29 to i64
  %31 = add i64 %15, %30
  %32 = extractelement <8 x i32> %26, i32 1
  %33 = mul nsw i32 %32, %32
  %34 = zext i32 %33 to i64
  %35 = add i64 %31, %34
  %36 = extractelement <8 x i32> %26, i32 2
  %37 = mul nsw i32 %36, %36
  %38 = zext i32 %37 to i64
  %39 = add i64 %35, %38
  %40 = extractelement <8 x i32> %26, i32 3
  %41 = mul nsw i32 %40, %40
  %42 = zext i32 %41 to i64
  %43 = add i64 %39, %42
  %44 = extractelement <8 x i32> %26, i32 4
  %45 = mul nsw i32 %44, %44
  %46 = zext i32 %45 to i64
  %47 = add i64 %43, %46
  %48 = extractelement <8 x i32> %26, i32 5
  %49 = mul nsw i32 %48, %48
  %50 = zext i32 %49 to i64
  %51 = add i64 %47, %50
  %52 = extractelement <8 x i32> %26, i32 6
  %53 = mul nsw i32 %52, %52
  %54 = zext i32 %53 to i64
  %55 = add i64 %51, %54
  %56 = shufflevector <8 x i64> %27, <8 x i64> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %57 = add nsw <8 x i64> %56, %27
  %58 = shufflevector <8 x i64> %57, <8 x i64> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %59 = add nsw <8 x i64> %57, %58
  %60 = shufflevector <8 x i64> %59, <8 x i64> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %61 = add nsw <8 x i64> %59, %60
  %62 = extractelement <8 x i64> %61, i32 0
  %63 = add nsw i64 %62, %16
  %64 = extractelement <8 x i32> %26, i32 7
  %65 = mul nsw i32 %64, %64
  %66 = zext i32 %65 to i64
  %67 = add i64 %55, %66
  %68 = getelementptr inbounds i16, i16* %19, i64 %12
  %69 = getelementptr inbounds i16, i16* %18, i64 %13
  %70 = add nuw nsw i32 %17, 1
  %71 = icmp eq i32 %70, 8
  br i1 %71, label %72, label %14

72:                                               ; preds = %14
  %73 = add i64 %67, 128
  %74 = lshr i64 %73, 8
  %75 = trunc i64 %74 to i32
  store i32 %75, i32* %4, align 4
  %76 = and i64 %74, 4294967295
  %77 = shl i64 %63, 28
  %78 = add i64 %77, 2147483648
  %79 = ashr i64 %78, 32
  %80 = mul nsw i64 %79, %79
  %81 = lshr i64 %80, 6
  %82 = sub nsw i64 %76, %81
  %83 = icmp sgt i64 %82, -1
  %84 = trunc i64 %82 to i32
  %85 = select i1 %83, i32 %84, i32 0
  ret i32 %85
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_highbd_8_sub_pixel_variance8x8_c(i8*, i32, i32, i32, i8*, i32, i32* nocapture) local_unnamed_addr #2 {
  %8 = alloca [72 x i16], align 16
  %9 = alloca [64 x i16], align 16
  %10 = bitcast [72 x i16]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 144, i8* nonnull %10) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %10, i8 -86, i64 144, i1 false)
  %11 = bitcast [64 x i16]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %11) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %11, i8 -86, i64 128, i1 false)
  %12 = getelementptr inbounds [72 x i16], [72 x i16]* %8, i64 0, i64 0
  %13 = sext i32 %2 to i64
  %14 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %13, i64 0
  %15 = ptrtoint i8* %0 to i64
  %16 = shl i64 %15, 1
  %17 = inttoptr i64 %16 to i16*
  %18 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %13, i64 1
  %19 = add i32 %1, -8
  %20 = zext i32 %19 to i64
  %21 = load i8, i8* %14, align 2
  %22 = zext i8 %21 to i32
  %23 = load i8, i8* %18, align 1
  %24 = zext i8 %23 to i32
  br label %25

25:                                               ; preds = %25, %7
  %26 = phi i16* [ %17, %7 ], [ %124, %25 ]
  %27 = phi i32 [ 0, %7 ], [ %126, %25 ]
  %28 = phi i16* [ %12, %7 ], [ %125, %25 ]
  %29 = load i16, i16* %26, align 2
  %30 = zext i16 %29 to i32
  %31 = mul nuw nsw i32 %22, %30
  %32 = getelementptr inbounds i16, i16* %26, i64 1
  %33 = load i16, i16* %32, align 2
  %34 = zext i16 %33 to i32
  %35 = mul nuw nsw i32 %24, %34
  %36 = add nuw nsw i32 %31, 64
  %37 = add nuw nsw i32 %36, %35
  %38 = lshr i32 %37, 7
  %39 = trunc i32 %38 to i16
  store i16 %39, i16* %28, align 2
  %40 = load i16, i16* %32, align 2
  %41 = zext i16 %40 to i32
  %42 = mul nuw nsw i32 %22, %41
  %43 = getelementptr inbounds i16, i16* %26, i64 2
  %44 = load i16, i16* %43, align 2
  %45 = zext i16 %44 to i32
  %46 = mul nuw nsw i32 %24, %45
  %47 = add nuw nsw i32 %42, 64
  %48 = add nuw nsw i32 %47, %46
  %49 = lshr i32 %48, 7
  %50 = trunc i32 %49 to i16
  %51 = getelementptr inbounds i16, i16* %28, i64 1
  store i16 %50, i16* %51, align 2
  %52 = load i16, i16* %43, align 2
  %53 = zext i16 %52 to i32
  %54 = mul nuw nsw i32 %22, %53
  %55 = getelementptr inbounds i16, i16* %26, i64 3
  %56 = load i16, i16* %55, align 2
  %57 = zext i16 %56 to i32
  %58 = mul nuw nsw i32 %24, %57
  %59 = add nuw nsw i32 %54, 64
  %60 = add nuw nsw i32 %59, %58
  %61 = lshr i32 %60, 7
  %62 = trunc i32 %61 to i16
  %63 = getelementptr inbounds i16, i16* %28, i64 2
  store i16 %62, i16* %63, align 2
  %64 = load i16, i16* %55, align 2
  %65 = zext i16 %64 to i32
  %66 = mul nuw nsw i32 %22, %65
  %67 = getelementptr inbounds i16, i16* %26, i64 4
  %68 = load i16, i16* %67, align 2
  %69 = zext i16 %68 to i32
  %70 = mul nuw nsw i32 %24, %69
  %71 = add nuw nsw i32 %66, 64
  %72 = add nuw nsw i32 %71, %70
  %73 = lshr i32 %72, 7
  %74 = trunc i32 %73 to i16
  %75 = getelementptr inbounds i16, i16* %28, i64 3
  store i16 %74, i16* %75, align 2
  %76 = load i16, i16* %67, align 2
  %77 = zext i16 %76 to i32
  %78 = mul nuw nsw i32 %22, %77
  %79 = getelementptr inbounds i16, i16* %26, i64 5
  %80 = load i16, i16* %79, align 2
  %81 = zext i16 %80 to i32
  %82 = mul nuw nsw i32 %24, %81
  %83 = add nuw nsw i32 %78, 64
  %84 = add nuw nsw i32 %83, %82
  %85 = lshr i32 %84, 7
  %86 = trunc i32 %85 to i16
  %87 = getelementptr inbounds i16, i16* %28, i64 4
  store i16 %86, i16* %87, align 2
  %88 = load i16, i16* %79, align 2
  %89 = zext i16 %88 to i32
  %90 = mul nuw nsw i32 %22, %89
  %91 = getelementptr inbounds i16, i16* %26, i64 6
  %92 = load i16, i16* %91, align 2
  %93 = zext i16 %92 to i32
  %94 = mul nuw nsw i32 %24, %93
  %95 = add nuw nsw i32 %90, 64
  %96 = add nuw nsw i32 %95, %94
  %97 = lshr i32 %96, 7
  %98 = trunc i32 %97 to i16
  %99 = getelementptr inbounds i16, i16* %28, i64 5
  store i16 %98, i16* %99, align 2
  %100 = load i16, i16* %91, align 2
  %101 = zext i16 %100 to i32
  %102 = mul nuw nsw i32 %22, %101
  %103 = getelementptr inbounds i16, i16* %26, i64 7
  %104 = load i16, i16* %103, align 2
  %105 = zext i16 %104 to i32
  %106 = mul nuw nsw i32 %24, %105
  %107 = add nuw nsw i32 %102, 64
  %108 = add nuw nsw i32 %107, %106
  %109 = lshr i32 %108, 7
  %110 = trunc i32 %109 to i16
  %111 = getelementptr inbounds i16, i16* %28, i64 6
  store i16 %110, i16* %111, align 2
  %112 = load i16, i16* %103, align 2
  %113 = zext i16 %112 to i32
  %114 = mul nuw nsw i32 %22, %113
  %115 = getelementptr inbounds i16, i16* %26, i64 8
  %116 = load i16, i16* %115, align 2
  %117 = zext i16 %116 to i32
  %118 = mul nuw nsw i32 %24, %117
  %119 = add nuw nsw i32 %114, 64
  %120 = add nuw nsw i32 %119, %118
  %121 = lshr i32 %120, 7
  %122 = trunc i32 %121 to i16
  %123 = getelementptr inbounds i16, i16* %28, i64 7
  store i16 %122, i16* %123, align 2
  %124 = getelementptr inbounds i16, i16* %115, i64 %20
  %125 = getelementptr inbounds i16, i16* %28, i64 8
  %126 = add nuw nsw i32 %27, 1
  %127 = icmp eq i32 %126, 9
  br i1 %127, label %128, label %25

128:                                              ; preds = %25
  %129 = sext i32 %3 to i64
  %130 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %129, i64 0
  %131 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %129, i64 1
  %132 = load i8, i8* %130, align 2
  %133 = zext i8 %132 to i32
  %134 = load i8, i8* %131, align 1
  %135 = zext i8 %134 to i32
  %136 = insertelement <8 x i32> undef, i32 %133, i32 0
  %137 = shufflevector <8 x i32> %136, <8 x i32> undef, <8 x i32> zeroinitializer
  %138 = insertelement <8 x i32> undef, i32 %135, i32 0
  %139 = shufflevector <8 x i32> %138, <8 x i32> undef, <8 x i32> zeroinitializer
  %140 = getelementptr inbounds [72 x i16], [72 x i16]* %8, i64 0, i64 8
  %141 = bitcast [72 x i16]* %8 to <8 x i16>*
  %142 = load <8 x i16>, <8 x i16>* %141, align 16
  %143 = zext <8 x i16> %142 to <8 x i32>
  %144 = mul nuw nsw <8 x i32> %137, %143
  %145 = bitcast i16* %140 to <8 x i16>*
  %146 = load <8 x i16>, <8 x i16>* %145, align 16
  %147 = zext <8 x i16> %146 to <8 x i32>
  %148 = mul nuw nsw <8 x i32> %139, %147
  %149 = add nuw nsw <8 x i32> %144, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %150 = add nuw nsw <8 x i32> %149, %148
  %151 = lshr <8 x i32> %150, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %152 = trunc <8 x i32> %151 to <8 x i16>
  %153 = bitcast [64 x i16]* %9 to <8 x i16>*
  store <8 x i16> %152, <8 x i16>* %153, align 16
  %154 = getelementptr inbounds [72 x i16], [72 x i16]* %8, i64 0, i64 8
  %155 = getelementptr inbounds [64 x i16], [64 x i16]* %9, i64 0, i64 8
  %156 = getelementptr inbounds [72 x i16], [72 x i16]* %8, i64 0, i64 16
  %157 = bitcast i16* %154 to <8 x i16>*
  %158 = load <8 x i16>, <8 x i16>* %157, align 16
  %159 = zext <8 x i16> %158 to <8 x i32>
  %160 = mul nuw nsw <8 x i32> %137, %159
  %161 = bitcast i16* %156 to <8 x i16>*
  %162 = load <8 x i16>, <8 x i16>* %161, align 16
  %163 = zext <8 x i16> %162 to <8 x i32>
  %164 = mul nuw nsw <8 x i32> %139, %163
  %165 = add nuw nsw <8 x i32> %160, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %166 = add nuw nsw <8 x i32> %165, %164
  %167 = lshr <8 x i32> %166, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %168 = trunc <8 x i32> %167 to <8 x i16>
  %169 = bitcast i16* %155 to <8 x i16>*
  store <8 x i16> %168, <8 x i16>* %169, align 16
  %170 = getelementptr inbounds [72 x i16], [72 x i16]* %8, i64 0, i64 16
  %171 = getelementptr inbounds [64 x i16], [64 x i16]* %9, i64 0, i64 16
  %172 = getelementptr inbounds [72 x i16], [72 x i16]* %8, i64 0, i64 24
  %173 = bitcast i16* %170 to <8 x i16>*
  %174 = load <8 x i16>, <8 x i16>* %173, align 16
  %175 = zext <8 x i16> %174 to <8 x i32>
  %176 = mul nuw nsw <8 x i32> %137, %175
  %177 = bitcast i16* %172 to <8 x i16>*
  %178 = load <8 x i16>, <8 x i16>* %177, align 16
  %179 = zext <8 x i16> %178 to <8 x i32>
  %180 = mul nuw nsw <8 x i32> %139, %179
  %181 = add nuw nsw <8 x i32> %176, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %182 = add nuw nsw <8 x i32> %181, %180
  %183 = lshr <8 x i32> %182, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %184 = trunc <8 x i32> %183 to <8 x i16>
  %185 = bitcast i16* %171 to <8 x i16>*
  store <8 x i16> %184, <8 x i16>* %185, align 16
  %186 = getelementptr inbounds [72 x i16], [72 x i16]* %8, i64 0, i64 24
  %187 = getelementptr inbounds [64 x i16], [64 x i16]* %9, i64 0, i64 24
  %188 = getelementptr inbounds [72 x i16], [72 x i16]* %8, i64 0, i64 32
  %189 = bitcast i16* %186 to <8 x i16>*
  %190 = load <8 x i16>, <8 x i16>* %189, align 16
  %191 = zext <8 x i16> %190 to <8 x i32>
  %192 = mul nuw nsw <8 x i32> %137, %191
  %193 = bitcast i16* %188 to <8 x i16>*
  %194 = load <8 x i16>, <8 x i16>* %193, align 16
  %195 = zext <8 x i16> %194 to <8 x i32>
  %196 = mul nuw nsw <8 x i32> %139, %195
  %197 = add nuw nsw <8 x i32> %192, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %198 = add nuw nsw <8 x i32> %197, %196
  %199 = lshr <8 x i32> %198, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %200 = trunc <8 x i32> %199 to <8 x i16>
  %201 = bitcast i16* %187 to <8 x i16>*
  store <8 x i16> %200, <8 x i16>* %201, align 16
  %202 = getelementptr inbounds [72 x i16], [72 x i16]* %8, i64 0, i64 32
  %203 = getelementptr inbounds [64 x i16], [64 x i16]* %9, i64 0, i64 32
  %204 = getelementptr inbounds [72 x i16], [72 x i16]* %8, i64 0, i64 40
  %205 = bitcast i16* %202 to <8 x i16>*
  %206 = load <8 x i16>, <8 x i16>* %205, align 16
  %207 = zext <8 x i16> %206 to <8 x i32>
  %208 = mul nuw nsw <8 x i32> %137, %207
  %209 = bitcast i16* %204 to <8 x i16>*
  %210 = load <8 x i16>, <8 x i16>* %209, align 16
  %211 = zext <8 x i16> %210 to <8 x i32>
  %212 = mul nuw nsw <8 x i32> %139, %211
  %213 = add nuw nsw <8 x i32> %208, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %214 = add nuw nsw <8 x i32> %213, %212
  %215 = lshr <8 x i32> %214, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %216 = trunc <8 x i32> %215 to <8 x i16>
  %217 = bitcast i16* %203 to <8 x i16>*
  store <8 x i16> %216, <8 x i16>* %217, align 16
  %218 = getelementptr inbounds [72 x i16], [72 x i16]* %8, i64 0, i64 40
  %219 = getelementptr inbounds [64 x i16], [64 x i16]* %9, i64 0, i64 40
  %220 = getelementptr inbounds [72 x i16], [72 x i16]* %8, i64 0, i64 48
  %221 = bitcast i16* %218 to <8 x i16>*
  %222 = load <8 x i16>, <8 x i16>* %221, align 16
  %223 = zext <8 x i16> %222 to <8 x i32>
  %224 = mul nuw nsw <8 x i32> %137, %223
  %225 = bitcast i16* %220 to <8 x i16>*
  %226 = load <8 x i16>, <8 x i16>* %225, align 16
  %227 = zext <8 x i16> %226 to <8 x i32>
  %228 = mul nuw nsw <8 x i32> %139, %227
  %229 = add nuw nsw <8 x i32> %224, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %230 = add nuw nsw <8 x i32> %229, %228
  %231 = lshr <8 x i32> %230, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %232 = trunc <8 x i32> %231 to <8 x i16>
  %233 = bitcast i16* %219 to <8 x i16>*
  store <8 x i16> %232, <8 x i16>* %233, align 16
  %234 = getelementptr inbounds [72 x i16], [72 x i16]* %8, i64 0, i64 48
  %235 = getelementptr inbounds [64 x i16], [64 x i16]* %9, i64 0, i64 48
  %236 = getelementptr inbounds [72 x i16], [72 x i16]* %8, i64 0, i64 56
  %237 = bitcast i16* %234 to <8 x i16>*
  %238 = load <8 x i16>, <8 x i16>* %237, align 16
  %239 = zext <8 x i16> %238 to <8 x i32>
  %240 = mul nuw nsw <8 x i32> %137, %239
  %241 = bitcast i16* %236 to <8 x i16>*
  %242 = load <8 x i16>, <8 x i16>* %241, align 16
  %243 = zext <8 x i16> %242 to <8 x i32>
  %244 = mul nuw nsw <8 x i32> %139, %243
  %245 = add nuw nsw <8 x i32> %240, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %246 = add nuw nsw <8 x i32> %245, %244
  %247 = lshr <8 x i32> %246, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %248 = trunc <8 x i32> %247 to <8 x i16>
  %249 = bitcast i16* %235 to <8 x i16>*
  store <8 x i16> %248, <8 x i16>* %249, align 16
  %250 = getelementptr inbounds [72 x i16], [72 x i16]* %8, i64 0, i64 56
  %251 = getelementptr inbounds [64 x i16], [64 x i16]* %9, i64 0, i64 56
  %252 = getelementptr inbounds [72 x i16], [72 x i16]* %8, i64 0, i64 64
  %253 = bitcast i16* %250 to <8 x i16>*
  %254 = load <8 x i16>, <8 x i16>* %253, align 16
  %255 = zext <8 x i16> %254 to <8 x i32>
  %256 = mul nuw nsw <8 x i32> %137, %255
  %257 = bitcast i16* %252 to <8 x i16>*
  %258 = load <8 x i16>, <8 x i16>* %257, align 16
  %259 = zext <8 x i16> %258 to <8 x i32>
  %260 = mul nuw nsw <8 x i32> %139, %259
  %261 = add nuw nsw <8 x i32> %256, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %262 = add nuw nsw <8 x i32> %261, %260
  %263 = lshr <8 x i32> %262, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %264 = trunc <8 x i32> %263 to <8 x i16>
  %265 = bitcast i16* %251 to <8 x i16>*
  store <8 x i16> %264, <8 x i16>* %265, align 16
  %266 = ptrtoint [64 x i16]* %9 to i64
  %267 = lshr exact i64 %266, 1
  %268 = inttoptr i64 %267 to i8*
  %269 = call i32 @vpx_highbd_8_variance8x8_c(i8* nonnull %268, i32 8, i8* %4, i32 %5, i32* %6)
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %11) #4
  call void @llvm.lifetime.end.p0i8(i64 144, i8* nonnull %10) #4
  ret i32 %269
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_highbd_10_sub_pixel_variance8x8_c(i8*, i32, i32, i32, i8*, i32, i32* nocapture) local_unnamed_addr #2 {
  %8 = alloca [72 x i16], align 16
  %9 = alloca [64 x i16], align 16
  %10 = bitcast [72 x i16]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 144, i8* nonnull %10) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %10, i8 -86, i64 144, i1 false)
  %11 = bitcast [64 x i16]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %11) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %11, i8 -86, i64 128, i1 false)
  %12 = getelementptr inbounds [72 x i16], [72 x i16]* %8, i64 0, i64 0
  %13 = sext i32 %2 to i64
  %14 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %13, i64 0
  %15 = ptrtoint i8* %0 to i64
  %16 = shl i64 %15, 1
  %17 = inttoptr i64 %16 to i16*
  %18 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %13, i64 1
  %19 = add i32 %1, -8
  %20 = zext i32 %19 to i64
  %21 = load i8, i8* %14, align 2
  %22 = zext i8 %21 to i32
  %23 = load i8, i8* %18, align 1
  %24 = zext i8 %23 to i32
  br label %25

25:                                               ; preds = %25, %7
  %26 = phi i16* [ %17, %7 ], [ %124, %25 ]
  %27 = phi i32 [ 0, %7 ], [ %126, %25 ]
  %28 = phi i16* [ %12, %7 ], [ %125, %25 ]
  %29 = load i16, i16* %26, align 2
  %30 = zext i16 %29 to i32
  %31 = mul nuw nsw i32 %22, %30
  %32 = getelementptr inbounds i16, i16* %26, i64 1
  %33 = load i16, i16* %32, align 2
  %34 = zext i16 %33 to i32
  %35 = mul nuw nsw i32 %24, %34
  %36 = add nuw nsw i32 %31, 64
  %37 = add nuw nsw i32 %36, %35
  %38 = lshr i32 %37, 7
  %39 = trunc i32 %38 to i16
  store i16 %39, i16* %28, align 2
  %40 = load i16, i16* %32, align 2
  %41 = zext i16 %40 to i32
  %42 = mul nuw nsw i32 %22, %41
  %43 = getelementptr inbounds i16, i16* %26, i64 2
  %44 = load i16, i16* %43, align 2
  %45 = zext i16 %44 to i32
  %46 = mul nuw nsw i32 %24, %45
  %47 = add nuw nsw i32 %42, 64
  %48 = add nuw nsw i32 %47, %46
  %49 = lshr i32 %48, 7
  %50 = trunc i32 %49 to i16
  %51 = getelementptr inbounds i16, i16* %28, i64 1
  store i16 %50, i16* %51, align 2
  %52 = load i16, i16* %43, align 2
  %53 = zext i16 %52 to i32
  %54 = mul nuw nsw i32 %22, %53
  %55 = getelementptr inbounds i16, i16* %26, i64 3
  %56 = load i16, i16* %55, align 2
  %57 = zext i16 %56 to i32
  %58 = mul nuw nsw i32 %24, %57
  %59 = add nuw nsw i32 %54, 64
  %60 = add nuw nsw i32 %59, %58
  %61 = lshr i32 %60, 7
  %62 = trunc i32 %61 to i16
  %63 = getelementptr inbounds i16, i16* %28, i64 2
  store i16 %62, i16* %63, align 2
  %64 = load i16, i16* %55, align 2
  %65 = zext i16 %64 to i32
  %66 = mul nuw nsw i32 %22, %65
  %67 = getelementptr inbounds i16, i16* %26, i64 4
  %68 = load i16, i16* %67, align 2
  %69 = zext i16 %68 to i32
  %70 = mul nuw nsw i32 %24, %69
  %71 = add nuw nsw i32 %66, 64
  %72 = add nuw nsw i32 %71, %70
  %73 = lshr i32 %72, 7
  %74 = trunc i32 %73 to i16
  %75 = getelementptr inbounds i16, i16* %28, i64 3
  store i16 %74, i16* %75, align 2
  %76 = load i16, i16* %67, align 2
  %77 = zext i16 %76 to i32
  %78 = mul nuw nsw i32 %22, %77
  %79 = getelementptr inbounds i16, i16* %26, i64 5
  %80 = load i16, i16* %79, align 2
  %81 = zext i16 %80 to i32
  %82 = mul nuw nsw i32 %24, %81
  %83 = add nuw nsw i32 %78, 64
  %84 = add nuw nsw i32 %83, %82
  %85 = lshr i32 %84, 7
  %86 = trunc i32 %85 to i16
  %87 = getelementptr inbounds i16, i16* %28, i64 4
  store i16 %86, i16* %87, align 2
  %88 = load i16, i16* %79, align 2
  %89 = zext i16 %88 to i32
  %90 = mul nuw nsw i32 %22, %89
  %91 = getelementptr inbounds i16, i16* %26, i64 6
  %92 = load i16, i16* %91, align 2
  %93 = zext i16 %92 to i32
  %94 = mul nuw nsw i32 %24, %93
  %95 = add nuw nsw i32 %90, 64
  %96 = add nuw nsw i32 %95, %94
  %97 = lshr i32 %96, 7
  %98 = trunc i32 %97 to i16
  %99 = getelementptr inbounds i16, i16* %28, i64 5
  store i16 %98, i16* %99, align 2
  %100 = load i16, i16* %91, align 2
  %101 = zext i16 %100 to i32
  %102 = mul nuw nsw i32 %22, %101
  %103 = getelementptr inbounds i16, i16* %26, i64 7
  %104 = load i16, i16* %103, align 2
  %105 = zext i16 %104 to i32
  %106 = mul nuw nsw i32 %24, %105
  %107 = add nuw nsw i32 %102, 64
  %108 = add nuw nsw i32 %107, %106
  %109 = lshr i32 %108, 7
  %110 = trunc i32 %109 to i16
  %111 = getelementptr inbounds i16, i16* %28, i64 6
  store i16 %110, i16* %111, align 2
  %112 = load i16, i16* %103, align 2
  %113 = zext i16 %112 to i32
  %114 = mul nuw nsw i32 %22, %113
  %115 = getelementptr inbounds i16, i16* %26, i64 8
  %116 = load i16, i16* %115, align 2
  %117 = zext i16 %116 to i32
  %118 = mul nuw nsw i32 %24, %117
  %119 = add nuw nsw i32 %114, 64
  %120 = add nuw nsw i32 %119, %118
  %121 = lshr i32 %120, 7
  %122 = trunc i32 %121 to i16
  %123 = getelementptr inbounds i16, i16* %28, i64 7
  store i16 %122, i16* %123, align 2
  %124 = getelementptr inbounds i16, i16* %115, i64 %20
  %125 = getelementptr inbounds i16, i16* %28, i64 8
  %126 = add nuw nsw i32 %27, 1
  %127 = icmp eq i32 %126, 9
  br i1 %127, label %128, label %25

128:                                              ; preds = %25
  %129 = sext i32 %3 to i64
  %130 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %129, i64 0
  %131 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %129, i64 1
  %132 = load i8, i8* %130, align 2
  %133 = zext i8 %132 to i32
  %134 = load i8, i8* %131, align 1
  %135 = zext i8 %134 to i32
  %136 = insertelement <8 x i32> undef, i32 %133, i32 0
  %137 = shufflevector <8 x i32> %136, <8 x i32> undef, <8 x i32> zeroinitializer
  %138 = insertelement <8 x i32> undef, i32 %135, i32 0
  %139 = shufflevector <8 x i32> %138, <8 x i32> undef, <8 x i32> zeroinitializer
  %140 = getelementptr inbounds [72 x i16], [72 x i16]* %8, i64 0, i64 8
  %141 = bitcast [72 x i16]* %8 to <8 x i16>*
  %142 = load <8 x i16>, <8 x i16>* %141, align 16
  %143 = zext <8 x i16> %142 to <8 x i32>
  %144 = mul nuw nsw <8 x i32> %137, %143
  %145 = bitcast i16* %140 to <8 x i16>*
  %146 = load <8 x i16>, <8 x i16>* %145, align 16
  %147 = zext <8 x i16> %146 to <8 x i32>
  %148 = mul nuw nsw <8 x i32> %139, %147
  %149 = add nuw nsw <8 x i32> %144, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %150 = add nuw nsw <8 x i32> %149, %148
  %151 = lshr <8 x i32> %150, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %152 = trunc <8 x i32> %151 to <8 x i16>
  %153 = bitcast [64 x i16]* %9 to <8 x i16>*
  store <8 x i16> %152, <8 x i16>* %153, align 16
  %154 = getelementptr inbounds [72 x i16], [72 x i16]* %8, i64 0, i64 8
  %155 = getelementptr inbounds [64 x i16], [64 x i16]* %9, i64 0, i64 8
  %156 = getelementptr inbounds [72 x i16], [72 x i16]* %8, i64 0, i64 16
  %157 = bitcast i16* %154 to <8 x i16>*
  %158 = load <8 x i16>, <8 x i16>* %157, align 16
  %159 = zext <8 x i16> %158 to <8 x i32>
  %160 = mul nuw nsw <8 x i32> %137, %159
  %161 = bitcast i16* %156 to <8 x i16>*
  %162 = load <8 x i16>, <8 x i16>* %161, align 16
  %163 = zext <8 x i16> %162 to <8 x i32>
  %164 = mul nuw nsw <8 x i32> %139, %163
  %165 = add nuw nsw <8 x i32> %160, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %166 = add nuw nsw <8 x i32> %165, %164
  %167 = lshr <8 x i32> %166, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %168 = trunc <8 x i32> %167 to <8 x i16>
  %169 = bitcast i16* %155 to <8 x i16>*
  store <8 x i16> %168, <8 x i16>* %169, align 16
  %170 = getelementptr inbounds [72 x i16], [72 x i16]* %8, i64 0, i64 16
  %171 = getelementptr inbounds [64 x i16], [64 x i16]* %9, i64 0, i64 16
  %172 = getelementptr inbounds [72 x i16], [72 x i16]* %8, i64 0, i64 24
  %173 = bitcast i16* %170 to <8 x i16>*
  %174 = load <8 x i16>, <8 x i16>* %173, align 16
  %175 = zext <8 x i16> %174 to <8 x i32>
  %176 = mul nuw nsw <8 x i32> %137, %175
  %177 = bitcast i16* %172 to <8 x i16>*
  %178 = load <8 x i16>, <8 x i16>* %177, align 16
  %179 = zext <8 x i16> %178 to <8 x i32>
  %180 = mul nuw nsw <8 x i32> %139, %179
  %181 = add nuw nsw <8 x i32> %176, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %182 = add nuw nsw <8 x i32> %181, %180
  %183 = lshr <8 x i32> %182, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %184 = trunc <8 x i32> %183 to <8 x i16>
  %185 = bitcast i16* %171 to <8 x i16>*
  store <8 x i16> %184, <8 x i16>* %185, align 16
  %186 = getelementptr inbounds [72 x i16], [72 x i16]* %8, i64 0, i64 24
  %187 = getelementptr inbounds [64 x i16], [64 x i16]* %9, i64 0, i64 24
  %188 = getelementptr inbounds [72 x i16], [72 x i16]* %8, i64 0, i64 32
  %189 = bitcast i16* %186 to <8 x i16>*
  %190 = load <8 x i16>, <8 x i16>* %189, align 16
  %191 = zext <8 x i16> %190 to <8 x i32>
  %192 = mul nuw nsw <8 x i32> %137, %191
  %193 = bitcast i16* %188 to <8 x i16>*
  %194 = load <8 x i16>, <8 x i16>* %193, align 16
  %195 = zext <8 x i16> %194 to <8 x i32>
  %196 = mul nuw nsw <8 x i32> %139, %195
  %197 = add nuw nsw <8 x i32> %192, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %198 = add nuw nsw <8 x i32> %197, %196
  %199 = lshr <8 x i32> %198, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %200 = trunc <8 x i32> %199 to <8 x i16>
  %201 = bitcast i16* %187 to <8 x i16>*
  store <8 x i16> %200, <8 x i16>* %201, align 16
  %202 = getelementptr inbounds [72 x i16], [72 x i16]* %8, i64 0, i64 32
  %203 = getelementptr inbounds [64 x i16], [64 x i16]* %9, i64 0, i64 32
  %204 = getelementptr inbounds [72 x i16], [72 x i16]* %8, i64 0, i64 40
  %205 = bitcast i16* %202 to <8 x i16>*
  %206 = load <8 x i16>, <8 x i16>* %205, align 16
  %207 = zext <8 x i16> %206 to <8 x i32>
  %208 = mul nuw nsw <8 x i32> %137, %207
  %209 = bitcast i16* %204 to <8 x i16>*
  %210 = load <8 x i16>, <8 x i16>* %209, align 16
  %211 = zext <8 x i16> %210 to <8 x i32>
  %212 = mul nuw nsw <8 x i32> %139, %211
  %213 = add nuw nsw <8 x i32> %208, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %214 = add nuw nsw <8 x i32> %213, %212
  %215 = lshr <8 x i32> %214, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %216 = trunc <8 x i32> %215 to <8 x i16>
  %217 = bitcast i16* %203 to <8 x i16>*
  store <8 x i16> %216, <8 x i16>* %217, align 16
  %218 = getelementptr inbounds [72 x i16], [72 x i16]* %8, i64 0, i64 40
  %219 = getelementptr inbounds [64 x i16], [64 x i16]* %9, i64 0, i64 40
  %220 = getelementptr inbounds [72 x i16], [72 x i16]* %8, i64 0, i64 48
  %221 = bitcast i16* %218 to <8 x i16>*
  %222 = load <8 x i16>, <8 x i16>* %221, align 16
  %223 = zext <8 x i16> %222 to <8 x i32>
  %224 = mul nuw nsw <8 x i32> %137, %223
  %225 = bitcast i16* %220 to <8 x i16>*
  %226 = load <8 x i16>, <8 x i16>* %225, align 16
  %227 = zext <8 x i16> %226 to <8 x i32>
  %228 = mul nuw nsw <8 x i32> %139, %227
  %229 = add nuw nsw <8 x i32> %224, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %230 = add nuw nsw <8 x i32> %229, %228
  %231 = lshr <8 x i32> %230, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %232 = trunc <8 x i32> %231 to <8 x i16>
  %233 = bitcast i16* %219 to <8 x i16>*
  store <8 x i16> %232, <8 x i16>* %233, align 16
  %234 = getelementptr inbounds [72 x i16], [72 x i16]* %8, i64 0, i64 48
  %235 = getelementptr inbounds [64 x i16], [64 x i16]* %9, i64 0, i64 48
  %236 = getelementptr inbounds [72 x i16], [72 x i16]* %8, i64 0, i64 56
  %237 = bitcast i16* %234 to <8 x i16>*
  %238 = load <8 x i16>, <8 x i16>* %237, align 16
  %239 = zext <8 x i16> %238 to <8 x i32>
  %240 = mul nuw nsw <8 x i32> %137, %239
  %241 = bitcast i16* %236 to <8 x i16>*
  %242 = load <8 x i16>, <8 x i16>* %241, align 16
  %243 = zext <8 x i16> %242 to <8 x i32>
  %244 = mul nuw nsw <8 x i32> %139, %243
  %245 = add nuw nsw <8 x i32> %240, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %246 = add nuw nsw <8 x i32> %245, %244
  %247 = lshr <8 x i32> %246, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %248 = trunc <8 x i32> %247 to <8 x i16>
  %249 = bitcast i16* %235 to <8 x i16>*
  store <8 x i16> %248, <8 x i16>* %249, align 16
  %250 = getelementptr inbounds [72 x i16], [72 x i16]* %8, i64 0, i64 56
  %251 = getelementptr inbounds [64 x i16], [64 x i16]* %9, i64 0, i64 56
  %252 = getelementptr inbounds [72 x i16], [72 x i16]* %8, i64 0, i64 64
  %253 = bitcast i16* %250 to <8 x i16>*
  %254 = load <8 x i16>, <8 x i16>* %253, align 16
  %255 = zext <8 x i16> %254 to <8 x i32>
  %256 = mul nuw nsw <8 x i32> %137, %255
  %257 = bitcast i16* %252 to <8 x i16>*
  %258 = load <8 x i16>, <8 x i16>* %257, align 16
  %259 = zext <8 x i16> %258 to <8 x i32>
  %260 = mul nuw nsw <8 x i32> %139, %259
  %261 = add nuw nsw <8 x i32> %256, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %262 = add nuw nsw <8 x i32> %261, %260
  %263 = lshr <8 x i32> %262, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %264 = trunc <8 x i32> %263 to <8 x i16>
  %265 = bitcast i16* %251 to <8 x i16>*
  store <8 x i16> %264, <8 x i16>* %265, align 16
  %266 = ptrtoint [64 x i16]* %9 to i64
  %267 = lshr exact i64 %266, 1
  %268 = inttoptr i64 %267 to i8*
  %269 = call i32 @vpx_highbd_10_variance8x8_c(i8* nonnull %268, i32 8, i8* %4, i32 %5, i32* %6)
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %11) #4
  call void @llvm.lifetime.end.p0i8(i64 144, i8* nonnull %10) #4
  ret i32 %269
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_highbd_12_sub_pixel_variance8x8_c(i8*, i32, i32, i32, i8*, i32, i32* nocapture) local_unnamed_addr #2 {
  %8 = alloca [72 x i16], align 16
  %9 = alloca [64 x i16], align 16
  %10 = bitcast [72 x i16]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 144, i8* nonnull %10) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %10, i8 -86, i64 144, i1 false)
  %11 = bitcast [64 x i16]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %11) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %11, i8 -86, i64 128, i1 false)
  %12 = getelementptr inbounds [72 x i16], [72 x i16]* %8, i64 0, i64 0
  %13 = sext i32 %2 to i64
  %14 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %13, i64 0
  %15 = ptrtoint i8* %0 to i64
  %16 = shl i64 %15, 1
  %17 = inttoptr i64 %16 to i16*
  %18 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %13, i64 1
  %19 = add i32 %1, -8
  %20 = zext i32 %19 to i64
  %21 = load i8, i8* %14, align 2
  %22 = zext i8 %21 to i32
  %23 = load i8, i8* %18, align 1
  %24 = zext i8 %23 to i32
  br label %25

25:                                               ; preds = %25, %7
  %26 = phi i16* [ %17, %7 ], [ %124, %25 ]
  %27 = phi i32 [ 0, %7 ], [ %126, %25 ]
  %28 = phi i16* [ %12, %7 ], [ %125, %25 ]
  %29 = load i16, i16* %26, align 2
  %30 = zext i16 %29 to i32
  %31 = mul nuw nsw i32 %22, %30
  %32 = getelementptr inbounds i16, i16* %26, i64 1
  %33 = load i16, i16* %32, align 2
  %34 = zext i16 %33 to i32
  %35 = mul nuw nsw i32 %24, %34
  %36 = add nuw nsw i32 %31, 64
  %37 = add nuw nsw i32 %36, %35
  %38 = lshr i32 %37, 7
  %39 = trunc i32 %38 to i16
  store i16 %39, i16* %28, align 2
  %40 = load i16, i16* %32, align 2
  %41 = zext i16 %40 to i32
  %42 = mul nuw nsw i32 %22, %41
  %43 = getelementptr inbounds i16, i16* %26, i64 2
  %44 = load i16, i16* %43, align 2
  %45 = zext i16 %44 to i32
  %46 = mul nuw nsw i32 %24, %45
  %47 = add nuw nsw i32 %42, 64
  %48 = add nuw nsw i32 %47, %46
  %49 = lshr i32 %48, 7
  %50 = trunc i32 %49 to i16
  %51 = getelementptr inbounds i16, i16* %28, i64 1
  store i16 %50, i16* %51, align 2
  %52 = load i16, i16* %43, align 2
  %53 = zext i16 %52 to i32
  %54 = mul nuw nsw i32 %22, %53
  %55 = getelementptr inbounds i16, i16* %26, i64 3
  %56 = load i16, i16* %55, align 2
  %57 = zext i16 %56 to i32
  %58 = mul nuw nsw i32 %24, %57
  %59 = add nuw nsw i32 %54, 64
  %60 = add nuw nsw i32 %59, %58
  %61 = lshr i32 %60, 7
  %62 = trunc i32 %61 to i16
  %63 = getelementptr inbounds i16, i16* %28, i64 2
  store i16 %62, i16* %63, align 2
  %64 = load i16, i16* %55, align 2
  %65 = zext i16 %64 to i32
  %66 = mul nuw nsw i32 %22, %65
  %67 = getelementptr inbounds i16, i16* %26, i64 4
  %68 = load i16, i16* %67, align 2
  %69 = zext i16 %68 to i32
  %70 = mul nuw nsw i32 %24, %69
  %71 = add nuw nsw i32 %66, 64
  %72 = add nuw nsw i32 %71, %70
  %73 = lshr i32 %72, 7
  %74 = trunc i32 %73 to i16
  %75 = getelementptr inbounds i16, i16* %28, i64 3
  store i16 %74, i16* %75, align 2
  %76 = load i16, i16* %67, align 2
  %77 = zext i16 %76 to i32
  %78 = mul nuw nsw i32 %22, %77
  %79 = getelementptr inbounds i16, i16* %26, i64 5
  %80 = load i16, i16* %79, align 2
  %81 = zext i16 %80 to i32
  %82 = mul nuw nsw i32 %24, %81
  %83 = add nuw nsw i32 %78, 64
  %84 = add nuw nsw i32 %83, %82
  %85 = lshr i32 %84, 7
  %86 = trunc i32 %85 to i16
  %87 = getelementptr inbounds i16, i16* %28, i64 4
  store i16 %86, i16* %87, align 2
  %88 = load i16, i16* %79, align 2
  %89 = zext i16 %88 to i32
  %90 = mul nuw nsw i32 %22, %89
  %91 = getelementptr inbounds i16, i16* %26, i64 6
  %92 = load i16, i16* %91, align 2
  %93 = zext i16 %92 to i32
  %94 = mul nuw nsw i32 %24, %93
  %95 = add nuw nsw i32 %90, 64
  %96 = add nuw nsw i32 %95, %94
  %97 = lshr i32 %96, 7
  %98 = trunc i32 %97 to i16
  %99 = getelementptr inbounds i16, i16* %28, i64 5
  store i16 %98, i16* %99, align 2
  %100 = load i16, i16* %91, align 2
  %101 = zext i16 %100 to i32
  %102 = mul nuw nsw i32 %22, %101
  %103 = getelementptr inbounds i16, i16* %26, i64 7
  %104 = load i16, i16* %103, align 2
  %105 = zext i16 %104 to i32
  %106 = mul nuw nsw i32 %24, %105
  %107 = add nuw nsw i32 %102, 64
  %108 = add nuw nsw i32 %107, %106
  %109 = lshr i32 %108, 7
  %110 = trunc i32 %109 to i16
  %111 = getelementptr inbounds i16, i16* %28, i64 6
  store i16 %110, i16* %111, align 2
  %112 = load i16, i16* %103, align 2
  %113 = zext i16 %112 to i32
  %114 = mul nuw nsw i32 %22, %113
  %115 = getelementptr inbounds i16, i16* %26, i64 8
  %116 = load i16, i16* %115, align 2
  %117 = zext i16 %116 to i32
  %118 = mul nuw nsw i32 %24, %117
  %119 = add nuw nsw i32 %114, 64
  %120 = add nuw nsw i32 %119, %118
  %121 = lshr i32 %120, 7
  %122 = trunc i32 %121 to i16
  %123 = getelementptr inbounds i16, i16* %28, i64 7
  store i16 %122, i16* %123, align 2
  %124 = getelementptr inbounds i16, i16* %115, i64 %20
  %125 = getelementptr inbounds i16, i16* %28, i64 8
  %126 = add nuw nsw i32 %27, 1
  %127 = icmp eq i32 %126, 9
  br i1 %127, label %128, label %25

128:                                              ; preds = %25
  %129 = sext i32 %3 to i64
  %130 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %129, i64 0
  %131 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %129, i64 1
  %132 = load i8, i8* %130, align 2
  %133 = zext i8 %132 to i32
  %134 = load i8, i8* %131, align 1
  %135 = zext i8 %134 to i32
  %136 = insertelement <8 x i32> undef, i32 %133, i32 0
  %137 = shufflevector <8 x i32> %136, <8 x i32> undef, <8 x i32> zeroinitializer
  %138 = insertelement <8 x i32> undef, i32 %135, i32 0
  %139 = shufflevector <8 x i32> %138, <8 x i32> undef, <8 x i32> zeroinitializer
  %140 = getelementptr inbounds [72 x i16], [72 x i16]* %8, i64 0, i64 8
  %141 = bitcast [72 x i16]* %8 to <8 x i16>*
  %142 = load <8 x i16>, <8 x i16>* %141, align 16
  %143 = zext <8 x i16> %142 to <8 x i32>
  %144 = mul nuw nsw <8 x i32> %137, %143
  %145 = bitcast i16* %140 to <8 x i16>*
  %146 = load <8 x i16>, <8 x i16>* %145, align 16
  %147 = zext <8 x i16> %146 to <8 x i32>
  %148 = mul nuw nsw <8 x i32> %139, %147
  %149 = add nuw nsw <8 x i32> %144, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %150 = add nuw nsw <8 x i32> %149, %148
  %151 = lshr <8 x i32> %150, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %152 = trunc <8 x i32> %151 to <8 x i16>
  %153 = bitcast [64 x i16]* %9 to <8 x i16>*
  store <8 x i16> %152, <8 x i16>* %153, align 16
  %154 = getelementptr inbounds [72 x i16], [72 x i16]* %8, i64 0, i64 8
  %155 = getelementptr inbounds [64 x i16], [64 x i16]* %9, i64 0, i64 8
  %156 = getelementptr inbounds [72 x i16], [72 x i16]* %8, i64 0, i64 16
  %157 = bitcast i16* %154 to <8 x i16>*
  %158 = load <8 x i16>, <8 x i16>* %157, align 16
  %159 = zext <8 x i16> %158 to <8 x i32>
  %160 = mul nuw nsw <8 x i32> %137, %159
  %161 = bitcast i16* %156 to <8 x i16>*
  %162 = load <8 x i16>, <8 x i16>* %161, align 16
  %163 = zext <8 x i16> %162 to <8 x i32>
  %164 = mul nuw nsw <8 x i32> %139, %163
  %165 = add nuw nsw <8 x i32> %160, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %166 = add nuw nsw <8 x i32> %165, %164
  %167 = lshr <8 x i32> %166, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %168 = trunc <8 x i32> %167 to <8 x i16>
  %169 = bitcast i16* %155 to <8 x i16>*
  store <8 x i16> %168, <8 x i16>* %169, align 16
  %170 = getelementptr inbounds [72 x i16], [72 x i16]* %8, i64 0, i64 16
  %171 = getelementptr inbounds [64 x i16], [64 x i16]* %9, i64 0, i64 16
  %172 = getelementptr inbounds [72 x i16], [72 x i16]* %8, i64 0, i64 24
  %173 = bitcast i16* %170 to <8 x i16>*
  %174 = load <8 x i16>, <8 x i16>* %173, align 16
  %175 = zext <8 x i16> %174 to <8 x i32>
  %176 = mul nuw nsw <8 x i32> %137, %175
  %177 = bitcast i16* %172 to <8 x i16>*
  %178 = load <8 x i16>, <8 x i16>* %177, align 16
  %179 = zext <8 x i16> %178 to <8 x i32>
  %180 = mul nuw nsw <8 x i32> %139, %179
  %181 = add nuw nsw <8 x i32> %176, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %182 = add nuw nsw <8 x i32> %181, %180
  %183 = lshr <8 x i32> %182, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %184 = trunc <8 x i32> %183 to <8 x i16>
  %185 = bitcast i16* %171 to <8 x i16>*
  store <8 x i16> %184, <8 x i16>* %185, align 16
  %186 = getelementptr inbounds [72 x i16], [72 x i16]* %8, i64 0, i64 24
  %187 = getelementptr inbounds [64 x i16], [64 x i16]* %9, i64 0, i64 24
  %188 = getelementptr inbounds [72 x i16], [72 x i16]* %8, i64 0, i64 32
  %189 = bitcast i16* %186 to <8 x i16>*
  %190 = load <8 x i16>, <8 x i16>* %189, align 16
  %191 = zext <8 x i16> %190 to <8 x i32>
  %192 = mul nuw nsw <8 x i32> %137, %191
  %193 = bitcast i16* %188 to <8 x i16>*
  %194 = load <8 x i16>, <8 x i16>* %193, align 16
  %195 = zext <8 x i16> %194 to <8 x i32>
  %196 = mul nuw nsw <8 x i32> %139, %195
  %197 = add nuw nsw <8 x i32> %192, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %198 = add nuw nsw <8 x i32> %197, %196
  %199 = lshr <8 x i32> %198, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %200 = trunc <8 x i32> %199 to <8 x i16>
  %201 = bitcast i16* %187 to <8 x i16>*
  store <8 x i16> %200, <8 x i16>* %201, align 16
  %202 = getelementptr inbounds [72 x i16], [72 x i16]* %8, i64 0, i64 32
  %203 = getelementptr inbounds [64 x i16], [64 x i16]* %9, i64 0, i64 32
  %204 = getelementptr inbounds [72 x i16], [72 x i16]* %8, i64 0, i64 40
  %205 = bitcast i16* %202 to <8 x i16>*
  %206 = load <8 x i16>, <8 x i16>* %205, align 16
  %207 = zext <8 x i16> %206 to <8 x i32>
  %208 = mul nuw nsw <8 x i32> %137, %207
  %209 = bitcast i16* %204 to <8 x i16>*
  %210 = load <8 x i16>, <8 x i16>* %209, align 16
  %211 = zext <8 x i16> %210 to <8 x i32>
  %212 = mul nuw nsw <8 x i32> %139, %211
  %213 = add nuw nsw <8 x i32> %208, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %214 = add nuw nsw <8 x i32> %213, %212
  %215 = lshr <8 x i32> %214, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %216 = trunc <8 x i32> %215 to <8 x i16>
  %217 = bitcast i16* %203 to <8 x i16>*
  store <8 x i16> %216, <8 x i16>* %217, align 16
  %218 = getelementptr inbounds [72 x i16], [72 x i16]* %8, i64 0, i64 40
  %219 = getelementptr inbounds [64 x i16], [64 x i16]* %9, i64 0, i64 40
  %220 = getelementptr inbounds [72 x i16], [72 x i16]* %8, i64 0, i64 48
  %221 = bitcast i16* %218 to <8 x i16>*
  %222 = load <8 x i16>, <8 x i16>* %221, align 16
  %223 = zext <8 x i16> %222 to <8 x i32>
  %224 = mul nuw nsw <8 x i32> %137, %223
  %225 = bitcast i16* %220 to <8 x i16>*
  %226 = load <8 x i16>, <8 x i16>* %225, align 16
  %227 = zext <8 x i16> %226 to <8 x i32>
  %228 = mul nuw nsw <8 x i32> %139, %227
  %229 = add nuw nsw <8 x i32> %224, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %230 = add nuw nsw <8 x i32> %229, %228
  %231 = lshr <8 x i32> %230, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %232 = trunc <8 x i32> %231 to <8 x i16>
  %233 = bitcast i16* %219 to <8 x i16>*
  store <8 x i16> %232, <8 x i16>* %233, align 16
  %234 = getelementptr inbounds [72 x i16], [72 x i16]* %8, i64 0, i64 48
  %235 = getelementptr inbounds [64 x i16], [64 x i16]* %9, i64 0, i64 48
  %236 = getelementptr inbounds [72 x i16], [72 x i16]* %8, i64 0, i64 56
  %237 = bitcast i16* %234 to <8 x i16>*
  %238 = load <8 x i16>, <8 x i16>* %237, align 16
  %239 = zext <8 x i16> %238 to <8 x i32>
  %240 = mul nuw nsw <8 x i32> %137, %239
  %241 = bitcast i16* %236 to <8 x i16>*
  %242 = load <8 x i16>, <8 x i16>* %241, align 16
  %243 = zext <8 x i16> %242 to <8 x i32>
  %244 = mul nuw nsw <8 x i32> %139, %243
  %245 = add nuw nsw <8 x i32> %240, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %246 = add nuw nsw <8 x i32> %245, %244
  %247 = lshr <8 x i32> %246, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %248 = trunc <8 x i32> %247 to <8 x i16>
  %249 = bitcast i16* %235 to <8 x i16>*
  store <8 x i16> %248, <8 x i16>* %249, align 16
  %250 = getelementptr inbounds [72 x i16], [72 x i16]* %8, i64 0, i64 56
  %251 = getelementptr inbounds [64 x i16], [64 x i16]* %9, i64 0, i64 56
  %252 = getelementptr inbounds [72 x i16], [72 x i16]* %8, i64 0, i64 64
  %253 = bitcast i16* %250 to <8 x i16>*
  %254 = load <8 x i16>, <8 x i16>* %253, align 16
  %255 = zext <8 x i16> %254 to <8 x i32>
  %256 = mul nuw nsw <8 x i32> %137, %255
  %257 = bitcast i16* %252 to <8 x i16>*
  %258 = load <8 x i16>, <8 x i16>* %257, align 16
  %259 = zext <8 x i16> %258 to <8 x i32>
  %260 = mul nuw nsw <8 x i32> %139, %259
  %261 = add nuw nsw <8 x i32> %256, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %262 = add nuw nsw <8 x i32> %261, %260
  %263 = lshr <8 x i32> %262, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %264 = trunc <8 x i32> %263 to <8 x i16>
  %265 = bitcast i16* %251 to <8 x i16>*
  store <8 x i16> %264, <8 x i16>* %265, align 16
  %266 = ptrtoint [64 x i16]* %9 to i64
  %267 = lshr exact i64 %266, 1
  %268 = inttoptr i64 %267 to i8*
  %269 = call i32 @vpx_highbd_12_variance8x8_c(i8* nonnull %268, i32 8, i8* %4, i32 %5, i32* %6)
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %11) #4
  call void @llvm.lifetime.end.p0i8(i64 144, i8* nonnull %10) #4
  ret i32 %269
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_highbd_8_sub_pixel_avg_variance8x8_c(i8*, i32, i32, i32, i8*, i32, i32* nocapture, i8*) local_unnamed_addr #2 {
  %9 = alloca [72 x i16], align 16
  %10 = alloca [64 x i16], align 16
  %11 = alloca [64 x i16], align 16
  %12 = bitcast [72 x i16]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 144, i8* nonnull %12) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %12, i8 -86, i64 144, i1 false)
  %13 = bitcast [64 x i16]* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %13) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %13, i8 -86, i64 128, i1 false)
  %14 = bitcast [64 x i16]* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %14) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %14, i8 -86, i64 128, i1 false)
  %15 = getelementptr inbounds [72 x i16], [72 x i16]* %9, i64 0, i64 0
  %16 = sext i32 %2 to i64
  %17 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %16, i64 0
  %18 = ptrtoint i8* %0 to i64
  %19 = shl i64 %18, 1
  %20 = inttoptr i64 %19 to i16*
  %21 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %16, i64 1
  %22 = add i32 %1, -8
  %23 = zext i32 %22 to i64
  %24 = load i8, i8* %17, align 2
  %25 = zext i8 %24 to i32
  %26 = load i8, i8* %21, align 1
  %27 = zext i8 %26 to i32
  br label %28

28:                                               ; preds = %28, %8
  %29 = phi i16* [ %20, %8 ], [ %127, %28 ]
  %30 = phi i32 [ 0, %8 ], [ %129, %28 ]
  %31 = phi i16* [ %15, %8 ], [ %128, %28 ]
  %32 = load i16, i16* %29, align 2
  %33 = zext i16 %32 to i32
  %34 = mul nuw nsw i32 %25, %33
  %35 = getelementptr inbounds i16, i16* %29, i64 1
  %36 = load i16, i16* %35, align 2
  %37 = zext i16 %36 to i32
  %38 = mul nuw nsw i32 %27, %37
  %39 = add nuw nsw i32 %34, 64
  %40 = add nuw nsw i32 %39, %38
  %41 = lshr i32 %40, 7
  %42 = trunc i32 %41 to i16
  store i16 %42, i16* %31, align 2
  %43 = load i16, i16* %35, align 2
  %44 = zext i16 %43 to i32
  %45 = mul nuw nsw i32 %25, %44
  %46 = getelementptr inbounds i16, i16* %29, i64 2
  %47 = load i16, i16* %46, align 2
  %48 = zext i16 %47 to i32
  %49 = mul nuw nsw i32 %27, %48
  %50 = add nuw nsw i32 %45, 64
  %51 = add nuw nsw i32 %50, %49
  %52 = lshr i32 %51, 7
  %53 = trunc i32 %52 to i16
  %54 = getelementptr inbounds i16, i16* %31, i64 1
  store i16 %53, i16* %54, align 2
  %55 = load i16, i16* %46, align 2
  %56 = zext i16 %55 to i32
  %57 = mul nuw nsw i32 %25, %56
  %58 = getelementptr inbounds i16, i16* %29, i64 3
  %59 = load i16, i16* %58, align 2
  %60 = zext i16 %59 to i32
  %61 = mul nuw nsw i32 %27, %60
  %62 = add nuw nsw i32 %57, 64
  %63 = add nuw nsw i32 %62, %61
  %64 = lshr i32 %63, 7
  %65 = trunc i32 %64 to i16
  %66 = getelementptr inbounds i16, i16* %31, i64 2
  store i16 %65, i16* %66, align 2
  %67 = load i16, i16* %58, align 2
  %68 = zext i16 %67 to i32
  %69 = mul nuw nsw i32 %25, %68
  %70 = getelementptr inbounds i16, i16* %29, i64 4
  %71 = load i16, i16* %70, align 2
  %72 = zext i16 %71 to i32
  %73 = mul nuw nsw i32 %27, %72
  %74 = add nuw nsw i32 %69, 64
  %75 = add nuw nsw i32 %74, %73
  %76 = lshr i32 %75, 7
  %77 = trunc i32 %76 to i16
  %78 = getelementptr inbounds i16, i16* %31, i64 3
  store i16 %77, i16* %78, align 2
  %79 = load i16, i16* %70, align 2
  %80 = zext i16 %79 to i32
  %81 = mul nuw nsw i32 %25, %80
  %82 = getelementptr inbounds i16, i16* %29, i64 5
  %83 = load i16, i16* %82, align 2
  %84 = zext i16 %83 to i32
  %85 = mul nuw nsw i32 %27, %84
  %86 = add nuw nsw i32 %81, 64
  %87 = add nuw nsw i32 %86, %85
  %88 = lshr i32 %87, 7
  %89 = trunc i32 %88 to i16
  %90 = getelementptr inbounds i16, i16* %31, i64 4
  store i16 %89, i16* %90, align 2
  %91 = load i16, i16* %82, align 2
  %92 = zext i16 %91 to i32
  %93 = mul nuw nsw i32 %25, %92
  %94 = getelementptr inbounds i16, i16* %29, i64 6
  %95 = load i16, i16* %94, align 2
  %96 = zext i16 %95 to i32
  %97 = mul nuw nsw i32 %27, %96
  %98 = add nuw nsw i32 %93, 64
  %99 = add nuw nsw i32 %98, %97
  %100 = lshr i32 %99, 7
  %101 = trunc i32 %100 to i16
  %102 = getelementptr inbounds i16, i16* %31, i64 5
  store i16 %101, i16* %102, align 2
  %103 = load i16, i16* %94, align 2
  %104 = zext i16 %103 to i32
  %105 = mul nuw nsw i32 %25, %104
  %106 = getelementptr inbounds i16, i16* %29, i64 7
  %107 = load i16, i16* %106, align 2
  %108 = zext i16 %107 to i32
  %109 = mul nuw nsw i32 %27, %108
  %110 = add nuw nsw i32 %105, 64
  %111 = add nuw nsw i32 %110, %109
  %112 = lshr i32 %111, 7
  %113 = trunc i32 %112 to i16
  %114 = getelementptr inbounds i16, i16* %31, i64 6
  store i16 %113, i16* %114, align 2
  %115 = load i16, i16* %106, align 2
  %116 = zext i16 %115 to i32
  %117 = mul nuw nsw i32 %25, %116
  %118 = getelementptr inbounds i16, i16* %29, i64 8
  %119 = load i16, i16* %118, align 2
  %120 = zext i16 %119 to i32
  %121 = mul nuw nsw i32 %27, %120
  %122 = add nuw nsw i32 %117, 64
  %123 = add nuw nsw i32 %122, %121
  %124 = lshr i32 %123, 7
  %125 = trunc i32 %124 to i16
  %126 = getelementptr inbounds i16, i16* %31, i64 7
  store i16 %125, i16* %126, align 2
  %127 = getelementptr inbounds i16, i16* %118, i64 %23
  %128 = getelementptr inbounds i16, i16* %31, i64 8
  %129 = add nuw nsw i32 %30, 1
  %130 = icmp eq i32 %129, 9
  br i1 %130, label %131, label %28

131:                                              ; preds = %28
  %132 = sext i32 %3 to i64
  %133 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %132, i64 0
  %134 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %132, i64 1
  %135 = load i8, i8* %133, align 2
  %136 = zext i8 %135 to i32
  %137 = load i8, i8* %134, align 1
  %138 = zext i8 %137 to i32
  %139 = insertelement <8 x i32> undef, i32 %136, i32 0
  %140 = shufflevector <8 x i32> %139, <8 x i32> undef, <8 x i32> zeroinitializer
  %141 = insertelement <8 x i32> undef, i32 %138, i32 0
  %142 = shufflevector <8 x i32> %141, <8 x i32> undef, <8 x i32> zeroinitializer
  %143 = getelementptr inbounds [64 x i16], [64 x i16]* %10, i64 0, i64 0
  %144 = getelementptr inbounds [72 x i16], [72 x i16]* %9, i64 0, i64 8
  %145 = bitcast [72 x i16]* %9 to <8 x i16>*
  %146 = load <8 x i16>, <8 x i16>* %145, align 16
  %147 = zext <8 x i16> %146 to <8 x i32>
  %148 = mul nuw nsw <8 x i32> %140, %147
  %149 = bitcast i16* %144 to <8 x i16>*
  %150 = load <8 x i16>, <8 x i16>* %149, align 16
  %151 = zext <8 x i16> %150 to <8 x i32>
  %152 = mul nuw nsw <8 x i32> %142, %151
  %153 = add nuw nsw <8 x i32> %148, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %154 = add nuw nsw <8 x i32> %153, %152
  %155 = lshr <8 x i32> %154, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %156 = trunc <8 x i32> %155 to <8 x i16>
  %157 = bitcast [64 x i16]* %10 to <8 x i16>*
  store <8 x i16> %156, <8 x i16>* %157, align 16
  %158 = getelementptr inbounds [72 x i16], [72 x i16]* %9, i64 0, i64 8
  %159 = getelementptr inbounds [64 x i16], [64 x i16]* %10, i64 0, i64 8
  %160 = getelementptr inbounds [72 x i16], [72 x i16]* %9, i64 0, i64 16
  %161 = bitcast i16* %158 to <8 x i16>*
  %162 = load <8 x i16>, <8 x i16>* %161, align 16
  %163 = zext <8 x i16> %162 to <8 x i32>
  %164 = mul nuw nsw <8 x i32> %140, %163
  %165 = bitcast i16* %160 to <8 x i16>*
  %166 = load <8 x i16>, <8 x i16>* %165, align 16
  %167 = zext <8 x i16> %166 to <8 x i32>
  %168 = mul nuw nsw <8 x i32> %142, %167
  %169 = add nuw nsw <8 x i32> %164, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %170 = add nuw nsw <8 x i32> %169, %168
  %171 = lshr <8 x i32> %170, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %172 = trunc <8 x i32> %171 to <8 x i16>
  %173 = bitcast i16* %159 to <8 x i16>*
  store <8 x i16> %172, <8 x i16>* %173, align 16
  %174 = getelementptr inbounds [72 x i16], [72 x i16]* %9, i64 0, i64 16
  %175 = getelementptr inbounds [64 x i16], [64 x i16]* %10, i64 0, i64 16
  %176 = getelementptr inbounds [72 x i16], [72 x i16]* %9, i64 0, i64 24
  %177 = bitcast i16* %174 to <8 x i16>*
  %178 = load <8 x i16>, <8 x i16>* %177, align 16
  %179 = zext <8 x i16> %178 to <8 x i32>
  %180 = mul nuw nsw <8 x i32> %140, %179
  %181 = bitcast i16* %176 to <8 x i16>*
  %182 = load <8 x i16>, <8 x i16>* %181, align 16
  %183 = zext <8 x i16> %182 to <8 x i32>
  %184 = mul nuw nsw <8 x i32> %142, %183
  %185 = add nuw nsw <8 x i32> %180, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %186 = add nuw nsw <8 x i32> %185, %184
  %187 = lshr <8 x i32> %186, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %188 = trunc <8 x i32> %187 to <8 x i16>
  %189 = bitcast i16* %175 to <8 x i16>*
  store <8 x i16> %188, <8 x i16>* %189, align 16
  %190 = getelementptr inbounds [72 x i16], [72 x i16]* %9, i64 0, i64 24
  %191 = getelementptr inbounds [64 x i16], [64 x i16]* %10, i64 0, i64 24
  %192 = getelementptr inbounds [72 x i16], [72 x i16]* %9, i64 0, i64 32
  %193 = bitcast i16* %190 to <8 x i16>*
  %194 = load <8 x i16>, <8 x i16>* %193, align 16
  %195 = zext <8 x i16> %194 to <8 x i32>
  %196 = mul nuw nsw <8 x i32> %140, %195
  %197 = bitcast i16* %192 to <8 x i16>*
  %198 = load <8 x i16>, <8 x i16>* %197, align 16
  %199 = zext <8 x i16> %198 to <8 x i32>
  %200 = mul nuw nsw <8 x i32> %142, %199
  %201 = add nuw nsw <8 x i32> %196, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %202 = add nuw nsw <8 x i32> %201, %200
  %203 = lshr <8 x i32> %202, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %204 = trunc <8 x i32> %203 to <8 x i16>
  %205 = bitcast i16* %191 to <8 x i16>*
  store <8 x i16> %204, <8 x i16>* %205, align 16
  %206 = getelementptr inbounds [72 x i16], [72 x i16]* %9, i64 0, i64 32
  %207 = getelementptr inbounds [64 x i16], [64 x i16]* %10, i64 0, i64 32
  %208 = getelementptr inbounds [72 x i16], [72 x i16]* %9, i64 0, i64 40
  %209 = bitcast i16* %206 to <8 x i16>*
  %210 = load <8 x i16>, <8 x i16>* %209, align 16
  %211 = zext <8 x i16> %210 to <8 x i32>
  %212 = mul nuw nsw <8 x i32> %140, %211
  %213 = bitcast i16* %208 to <8 x i16>*
  %214 = load <8 x i16>, <8 x i16>* %213, align 16
  %215 = zext <8 x i16> %214 to <8 x i32>
  %216 = mul nuw nsw <8 x i32> %142, %215
  %217 = add nuw nsw <8 x i32> %212, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %218 = add nuw nsw <8 x i32> %217, %216
  %219 = lshr <8 x i32> %218, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %220 = trunc <8 x i32> %219 to <8 x i16>
  %221 = bitcast i16* %207 to <8 x i16>*
  store <8 x i16> %220, <8 x i16>* %221, align 16
  %222 = getelementptr inbounds [72 x i16], [72 x i16]* %9, i64 0, i64 40
  %223 = getelementptr inbounds [64 x i16], [64 x i16]* %10, i64 0, i64 40
  %224 = getelementptr inbounds [72 x i16], [72 x i16]* %9, i64 0, i64 48
  %225 = bitcast i16* %222 to <8 x i16>*
  %226 = load <8 x i16>, <8 x i16>* %225, align 16
  %227 = zext <8 x i16> %226 to <8 x i32>
  %228 = mul nuw nsw <8 x i32> %140, %227
  %229 = bitcast i16* %224 to <8 x i16>*
  %230 = load <8 x i16>, <8 x i16>* %229, align 16
  %231 = zext <8 x i16> %230 to <8 x i32>
  %232 = mul nuw nsw <8 x i32> %142, %231
  %233 = add nuw nsw <8 x i32> %228, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %234 = add nuw nsw <8 x i32> %233, %232
  %235 = lshr <8 x i32> %234, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %236 = trunc <8 x i32> %235 to <8 x i16>
  %237 = bitcast i16* %223 to <8 x i16>*
  store <8 x i16> %236, <8 x i16>* %237, align 16
  %238 = getelementptr inbounds [72 x i16], [72 x i16]* %9, i64 0, i64 48
  %239 = getelementptr inbounds [64 x i16], [64 x i16]* %10, i64 0, i64 48
  %240 = getelementptr inbounds [72 x i16], [72 x i16]* %9, i64 0, i64 56
  %241 = bitcast i16* %238 to <8 x i16>*
  %242 = load <8 x i16>, <8 x i16>* %241, align 16
  %243 = zext <8 x i16> %242 to <8 x i32>
  %244 = mul nuw nsw <8 x i32> %140, %243
  %245 = bitcast i16* %240 to <8 x i16>*
  %246 = load <8 x i16>, <8 x i16>* %245, align 16
  %247 = zext <8 x i16> %246 to <8 x i32>
  %248 = mul nuw nsw <8 x i32> %142, %247
  %249 = add nuw nsw <8 x i32> %244, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %250 = add nuw nsw <8 x i32> %249, %248
  %251 = lshr <8 x i32> %250, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %252 = trunc <8 x i32> %251 to <8 x i16>
  %253 = bitcast i16* %239 to <8 x i16>*
  store <8 x i16> %252, <8 x i16>* %253, align 16
  %254 = getelementptr inbounds [72 x i16], [72 x i16]* %9, i64 0, i64 56
  %255 = getelementptr inbounds [64 x i16], [64 x i16]* %10, i64 0, i64 56
  %256 = getelementptr inbounds [72 x i16], [72 x i16]* %9, i64 0, i64 64
  %257 = bitcast i16* %254 to <8 x i16>*
  %258 = load <8 x i16>, <8 x i16>* %257, align 16
  %259 = zext <8 x i16> %258 to <8 x i32>
  %260 = mul nuw nsw <8 x i32> %140, %259
  %261 = bitcast i16* %256 to <8 x i16>*
  %262 = load <8 x i16>, <8 x i16>* %261, align 16
  %263 = zext <8 x i16> %262 to <8 x i32>
  %264 = mul nuw nsw <8 x i32> %142, %263
  %265 = add nuw nsw <8 x i32> %260, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %266 = add nuw nsw <8 x i32> %265, %264
  %267 = lshr <8 x i32> %266, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %268 = trunc <8 x i32> %267 to <8 x i16>
  %269 = bitcast i16* %255 to <8 x i16>*
  store <8 x i16> %268, <8 x i16>* %269, align 16
  %270 = getelementptr inbounds [64 x i16], [64 x i16]* %11, i64 0, i64 0
  %271 = ptrtoint i8* %7 to i64
  %272 = shl i64 %271, 1
  %273 = inttoptr i64 %272 to i16*
  br label %274

274:                                              ; preds = %274, %131
  %275 = phi i16* [ %270, %131 ], [ %364, %274 ]
  %276 = phi i32 [ 0, %131 ], [ %367, %274 ]
  %277 = phi i16* [ %273, %131 ], [ %365, %274 ]
  %278 = phi i16* [ %143, %131 ], [ %366, %274 ]
  %279 = load i16, i16* %277, align 2
  %280 = zext i16 %279 to i32
  %281 = load i16, i16* %278, align 2
  %282 = zext i16 %281 to i32
  %283 = add nuw nsw i32 %280, 1
  %284 = add nuw nsw i32 %283, %282
  %285 = lshr i32 %284, 1
  %286 = trunc i32 %285 to i16
  store i16 %286, i16* %275, align 2
  %287 = getelementptr inbounds i16, i16* %277, i64 1
  %288 = load i16, i16* %287, align 2
  %289 = zext i16 %288 to i32
  %290 = getelementptr inbounds i16, i16* %278, i64 1
  %291 = load i16, i16* %290, align 2
  %292 = zext i16 %291 to i32
  %293 = add nuw nsw i32 %289, 1
  %294 = add nuw nsw i32 %293, %292
  %295 = lshr i32 %294, 1
  %296 = trunc i32 %295 to i16
  %297 = getelementptr inbounds i16, i16* %275, i64 1
  store i16 %296, i16* %297, align 2
  %298 = getelementptr inbounds i16, i16* %277, i64 2
  %299 = load i16, i16* %298, align 2
  %300 = zext i16 %299 to i32
  %301 = getelementptr inbounds i16, i16* %278, i64 2
  %302 = load i16, i16* %301, align 2
  %303 = zext i16 %302 to i32
  %304 = add nuw nsw i32 %300, 1
  %305 = add nuw nsw i32 %304, %303
  %306 = lshr i32 %305, 1
  %307 = trunc i32 %306 to i16
  %308 = getelementptr inbounds i16, i16* %275, i64 2
  store i16 %307, i16* %308, align 2
  %309 = getelementptr inbounds i16, i16* %277, i64 3
  %310 = load i16, i16* %309, align 2
  %311 = zext i16 %310 to i32
  %312 = getelementptr inbounds i16, i16* %278, i64 3
  %313 = load i16, i16* %312, align 2
  %314 = zext i16 %313 to i32
  %315 = add nuw nsw i32 %311, 1
  %316 = add nuw nsw i32 %315, %314
  %317 = lshr i32 %316, 1
  %318 = trunc i32 %317 to i16
  %319 = getelementptr inbounds i16, i16* %275, i64 3
  store i16 %318, i16* %319, align 2
  %320 = getelementptr inbounds i16, i16* %277, i64 4
  %321 = load i16, i16* %320, align 2
  %322 = zext i16 %321 to i32
  %323 = getelementptr inbounds i16, i16* %278, i64 4
  %324 = load i16, i16* %323, align 2
  %325 = zext i16 %324 to i32
  %326 = add nuw nsw i32 %322, 1
  %327 = add nuw nsw i32 %326, %325
  %328 = lshr i32 %327, 1
  %329 = trunc i32 %328 to i16
  %330 = getelementptr inbounds i16, i16* %275, i64 4
  store i16 %329, i16* %330, align 2
  %331 = getelementptr inbounds i16, i16* %277, i64 5
  %332 = load i16, i16* %331, align 2
  %333 = zext i16 %332 to i32
  %334 = getelementptr inbounds i16, i16* %278, i64 5
  %335 = load i16, i16* %334, align 2
  %336 = zext i16 %335 to i32
  %337 = add nuw nsw i32 %333, 1
  %338 = add nuw nsw i32 %337, %336
  %339 = lshr i32 %338, 1
  %340 = trunc i32 %339 to i16
  %341 = getelementptr inbounds i16, i16* %275, i64 5
  store i16 %340, i16* %341, align 2
  %342 = getelementptr inbounds i16, i16* %277, i64 6
  %343 = load i16, i16* %342, align 2
  %344 = zext i16 %343 to i32
  %345 = getelementptr inbounds i16, i16* %278, i64 6
  %346 = load i16, i16* %345, align 2
  %347 = zext i16 %346 to i32
  %348 = add nuw nsw i32 %344, 1
  %349 = add nuw nsw i32 %348, %347
  %350 = lshr i32 %349, 1
  %351 = trunc i32 %350 to i16
  %352 = getelementptr inbounds i16, i16* %275, i64 6
  store i16 %351, i16* %352, align 2
  %353 = getelementptr inbounds i16, i16* %277, i64 7
  %354 = load i16, i16* %353, align 2
  %355 = zext i16 %354 to i32
  %356 = getelementptr inbounds i16, i16* %278, i64 7
  %357 = load i16, i16* %356, align 2
  %358 = zext i16 %357 to i32
  %359 = add nuw nsw i32 %355, 1
  %360 = add nuw nsw i32 %359, %358
  %361 = lshr i32 %360, 1
  %362 = trunc i32 %361 to i16
  %363 = getelementptr inbounds i16, i16* %275, i64 7
  store i16 %362, i16* %363, align 2
  %364 = getelementptr inbounds i16, i16* %275, i64 8
  %365 = getelementptr inbounds i16, i16* %277, i64 8
  %366 = getelementptr inbounds i16, i16* %278, i64 8
  %367 = add nuw nsw i32 %276, 1
  %368 = icmp eq i32 %367, 8
  br i1 %368, label %369, label %274

369:                                              ; preds = %274
  %370 = ptrtoint [64 x i16]* %11 to i64
  %371 = lshr exact i64 %370, 1
  %372 = inttoptr i64 %371 to i8*
  %373 = call i32 @vpx_highbd_8_variance8x8_c(i8* nonnull %372, i32 8, i8* %4, i32 %5, i32* %6)
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %14) #4
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %13) #4
  call void @llvm.lifetime.end.p0i8(i64 144, i8* nonnull %12) #4
  ret i32 %373
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_highbd_10_sub_pixel_avg_variance8x8_c(i8*, i32, i32, i32, i8*, i32, i32* nocapture, i8*) local_unnamed_addr #2 {
  %9 = alloca [72 x i16], align 16
  %10 = alloca [64 x i16], align 16
  %11 = alloca [64 x i16], align 16
  %12 = bitcast [72 x i16]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 144, i8* nonnull %12) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %12, i8 -86, i64 144, i1 false)
  %13 = bitcast [64 x i16]* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %13) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %13, i8 -86, i64 128, i1 false)
  %14 = bitcast [64 x i16]* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %14) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %14, i8 -86, i64 128, i1 false)
  %15 = getelementptr inbounds [72 x i16], [72 x i16]* %9, i64 0, i64 0
  %16 = sext i32 %2 to i64
  %17 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %16, i64 0
  %18 = ptrtoint i8* %0 to i64
  %19 = shl i64 %18, 1
  %20 = inttoptr i64 %19 to i16*
  %21 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %16, i64 1
  %22 = add i32 %1, -8
  %23 = zext i32 %22 to i64
  %24 = load i8, i8* %17, align 2
  %25 = zext i8 %24 to i32
  %26 = load i8, i8* %21, align 1
  %27 = zext i8 %26 to i32
  br label %28

28:                                               ; preds = %28, %8
  %29 = phi i16* [ %20, %8 ], [ %127, %28 ]
  %30 = phi i32 [ 0, %8 ], [ %129, %28 ]
  %31 = phi i16* [ %15, %8 ], [ %128, %28 ]
  %32 = load i16, i16* %29, align 2
  %33 = zext i16 %32 to i32
  %34 = mul nuw nsw i32 %25, %33
  %35 = getelementptr inbounds i16, i16* %29, i64 1
  %36 = load i16, i16* %35, align 2
  %37 = zext i16 %36 to i32
  %38 = mul nuw nsw i32 %27, %37
  %39 = add nuw nsw i32 %34, 64
  %40 = add nuw nsw i32 %39, %38
  %41 = lshr i32 %40, 7
  %42 = trunc i32 %41 to i16
  store i16 %42, i16* %31, align 2
  %43 = load i16, i16* %35, align 2
  %44 = zext i16 %43 to i32
  %45 = mul nuw nsw i32 %25, %44
  %46 = getelementptr inbounds i16, i16* %29, i64 2
  %47 = load i16, i16* %46, align 2
  %48 = zext i16 %47 to i32
  %49 = mul nuw nsw i32 %27, %48
  %50 = add nuw nsw i32 %45, 64
  %51 = add nuw nsw i32 %50, %49
  %52 = lshr i32 %51, 7
  %53 = trunc i32 %52 to i16
  %54 = getelementptr inbounds i16, i16* %31, i64 1
  store i16 %53, i16* %54, align 2
  %55 = load i16, i16* %46, align 2
  %56 = zext i16 %55 to i32
  %57 = mul nuw nsw i32 %25, %56
  %58 = getelementptr inbounds i16, i16* %29, i64 3
  %59 = load i16, i16* %58, align 2
  %60 = zext i16 %59 to i32
  %61 = mul nuw nsw i32 %27, %60
  %62 = add nuw nsw i32 %57, 64
  %63 = add nuw nsw i32 %62, %61
  %64 = lshr i32 %63, 7
  %65 = trunc i32 %64 to i16
  %66 = getelementptr inbounds i16, i16* %31, i64 2
  store i16 %65, i16* %66, align 2
  %67 = load i16, i16* %58, align 2
  %68 = zext i16 %67 to i32
  %69 = mul nuw nsw i32 %25, %68
  %70 = getelementptr inbounds i16, i16* %29, i64 4
  %71 = load i16, i16* %70, align 2
  %72 = zext i16 %71 to i32
  %73 = mul nuw nsw i32 %27, %72
  %74 = add nuw nsw i32 %69, 64
  %75 = add nuw nsw i32 %74, %73
  %76 = lshr i32 %75, 7
  %77 = trunc i32 %76 to i16
  %78 = getelementptr inbounds i16, i16* %31, i64 3
  store i16 %77, i16* %78, align 2
  %79 = load i16, i16* %70, align 2
  %80 = zext i16 %79 to i32
  %81 = mul nuw nsw i32 %25, %80
  %82 = getelementptr inbounds i16, i16* %29, i64 5
  %83 = load i16, i16* %82, align 2
  %84 = zext i16 %83 to i32
  %85 = mul nuw nsw i32 %27, %84
  %86 = add nuw nsw i32 %81, 64
  %87 = add nuw nsw i32 %86, %85
  %88 = lshr i32 %87, 7
  %89 = trunc i32 %88 to i16
  %90 = getelementptr inbounds i16, i16* %31, i64 4
  store i16 %89, i16* %90, align 2
  %91 = load i16, i16* %82, align 2
  %92 = zext i16 %91 to i32
  %93 = mul nuw nsw i32 %25, %92
  %94 = getelementptr inbounds i16, i16* %29, i64 6
  %95 = load i16, i16* %94, align 2
  %96 = zext i16 %95 to i32
  %97 = mul nuw nsw i32 %27, %96
  %98 = add nuw nsw i32 %93, 64
  %99 = add nuw nsw i32 %98, %97
  %100 = lshr i32 %99, 7
  %101 = trunc i32 %100 to i16
  %102 = getelementptr inbounds i16, i16* %31, i64 5
  store i16 %101, i16* %102, align 2
  %103 = load i16, i16* %94, align 2
  %104 = zext i16 %103 to i32
  %105 = mul nuw nsw i32 %25, %104
  %106 = getelementptr inbounds i16, i16* %29, i64 7
  %107 = load i16, i16* %106, align 2
  %108 = zext i16 %107 to i32
  %109 = mul nuw nsw i32 %27, %108
  %110 = add nuw nsw i32 %105, 64
  %111 = add nuw nsw i32 %110, %109
  %112 = lshr i32 %111, 7
  %113 = trunc i32 %112 to i16
  %114 = getelementptr inbounds i16, i16* %31, i64 6
  store i16 %113, i16* %114, align 2
  %115 = load i16, i16* %106, align 2
  %116 = zext i16 %115 to i32
  %117 = mul nuw nsw i32 %25, %116
  %118 = getelementptr inbounds i16, i16* %29, i64 8
  %119 = load i16, i16* %118, align 2
  %120 = zext i16 %119 to i32
  %121 = mul nuw nsw i32 %27, %120
  %122 = add nuw nsw i32 %117, 64
  %123 = add nuw nsw i32 %122, %121
  %124 = lshr i32 %123, 7
  %125 = trunc i32 %124 to i16
  %126 = getelementptr inbounds i16, i16* %31, i64 7
  store i16 %125, i16* %126, align 2
  %127 = getelementptr inbounds i16, i16* %118, i64 %23
  %128 = getelementptr inbounds i16, i16* %31, i64 8
  %129 = add nuw nsw i32 %30, 1
  %130 = icmp eq i32 %129, 9
  br i1 %130, label %131, label %28

131:                                              ; preds = %28
  %132 = sext i32 %3 to i64
  %133 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %132, i64 0
  %134 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %132, i64 1
  %135 = load i8, i8* %133, align 2
  %136 = zext i8 %135 to i32
  %137 = load i8, i8* %134, align 1
  %138 = zext i8 %137 to i32
  %139 = insertelement <8 x i32> undef, i32 %136, i32 0
  %140 = shufflevector <8 x i32> %139, <8 x i32> undef, <8 x i32> zeroinitializer
  %141 = insertelement <8 x i32> undef, i32 %138, i32 0
  %142 = shufflevector <8 x i32> %141, <8 x i32> undef, <8 x i32> zeroinitializer
  %143 = getelementptr inbounds [64 x i16], [64 x i16]* %10, i64 0, i64 0
  %144 = getelementptr inbounds [72 x i16], [72 x i16]* %9, i64 0, i64 8
  %145 = bitcast [72 x i16]* %9 to <8 x i16>*
  %146 = load <8 x i16>, <8 x i16>* %145, align 16
  %147 = zext <8 x i16> %146 to <8 x i32>
  %148 = mul nuw nsw <8 x i32> %140, %147
  %149 = bitcast i16* %144 to <8 x i16>*
  %150 = load <8 x i16>, <8 x i16>* %149, align 16
  %151 = zext <8 x i16> %150 to <8 x i32>
  %152 = mul nuw nsw <8 x i32> %142, %151
  %153 = add nuw nsw <8 x i32> %148, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %154 = add nuw nsw <8 x i32> %153, %152
  %155 = lshr <8 x i32> %154, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %156 = trunc <8 x i32> %155 to <8 x i16>
  %157 = bitcast [64 x i16]* %10 to <8 x i16>*
  store <8 x i16> %156, <8 x i16>* %157, align 16
  %158 = getelementptr inbounds [72 x i16], [72 x i16]* %9, i64 0, i64 8
  %159 = getelementptr inbounds [64 x i16], [64 x i16]* %10, i64 0, i64 8
  %160 = getelementptr inbounds [72 x i16], [72 x i16]* %9, i64 0, i64 16
  %161 = bitcast i16* %158 to <8 x i16>*
  %162 = load <8 x i16>, <8 x i16>* %161, align 16
  %163 = zext <8 x i16> %162 to <8 x i32>
  %164 = mul nuw nsw <8 x i32> %140, %163
  %165 = bitcast i16* %160 to <8 x i16>*
  %166 = load <8 x i16>, <8 x i16>* %165, align 16
  %167 = zext <8 x i16> %166 to <8 x i32>
  %168 = mul nuw nsw <8 x i32> %142, %167
  %169 = add nuw nsw <8 x i32> %164, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %170 = add nuw nsw <8 x i32> %169, %168
  %171 = lshr <8 x i32> %170, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %172 = trunc <8 x i32> %171 to <8 x i16>
  %173 = bitcast i16* %159 to <8 x i16>*
  store <8 x i16> %172, <8 x i16>* %173, align 16
  %174 = getelementptr inbounds [72 x i16], [72 x i16]* %9, i64 0, i64 16
  %175 = getelementptr inbounds [64 x i16], [64 x i16]* %10, i64 0, i64 16
  %176 = getelementptr inbounds [72 x i16], [72 x i16]* %9, i64 0, i64 24
  %177 = bitcast i16* %174 to <8 x i16>*
  %178 = load <8 x i16>, <8 x i16>* %177, align 16
  %179 = zext <8 x i16> %178 to <8 x i32>
  %180 = mul nuw nsw <8 x i32> %140, %179
  %181 = bitcast i16* %176 to <8 x i16>*
  %182 = load <8 x i16>, <8 x i16>* %181, align 16
  %183 = zext <8 x i16> %182 to <8 x i32>
  %184 = mul nuw nsw <8 x i32> %142, %183
  %185 = add nuw nsw <8 x i32> %180, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %186 = add nuw nsw <8 x i32> %185, %184
  %187 = lshr <8 x i32> %186, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %188 = trunc <8 x i32> %187 to <8 x i16>
  %189 = bitcast i16* %175 to <8 x i16>*
  store <8 x i16> %188, <8 x i16>* %189, align 16
  %190 = getelementptr inbounds [72 x i16], [72 x i16]* %9, i64 0, i64 24
  %191 = getelementptr inbounds [64 x i16], [64 x i16]* %10, i64 0, i64 24
  %192 = getelementptr inbounds [72 x i16], [72 x i16]* %9, i64 0, i64 32
  %193 = bitcast i16* %190 to <8 x i16>*
  %194 = load <8 x i16>, <8 x i16>* %193, align 16
  %195 = zext <8 x i16> %194 to <8 x i32>
  %196 = mul nuw nsw <8 x i32> %140, %195
  %197 = bitcast i16* %192 to <8 x i16>*
  %198 = load <8 x i16>, <8 x i16>* %197, align 16
  %199 = zext <8 x i16> %198 to <8 x i32>
  %200 = mul nuw nsw <8 x i32> %142, %199
  %201 = add nuw nsw <8 x i32> %196, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %202 = add nuw nsw <8 x i32> %201, %200
  %203 = lshr <8 x i32> %202, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %204 = trunc <8 x i32> %203 to <8 x i16>
  %205 = bitcast i16* %191 to <8 x i16>*
  store <8 x i16> %204, <8 x i16>* %205, align 16
  %206 = getelementptr inbounds [72 x i16], [72 x i16]* %9, i64 0, i64 32
  %207 = getelementptr inbounds [64 x i16], [64 x i16]* %10, i64 0, i64 32
  %208 = getelementptr inbounds [72 x i16], [72 x i16]* %9, i64 0, i64 40
  %209 = bitcast i16* %206 to <8 x i16>*
  %210 = load <8 x i16>, <8 x i16>* %209, align 16
  %211 = zext <8 x i16> %210 to <8 x i32>
  %212 = mul nuw nsw <8 x i32> %140, %211
  %213 = bitcast i16* %208 to <8 x i16>*
  %214 = load <8 x i16>, <8 x i16>* %213, align 16
  %215 = zext <8 x i16> %214 to <8 x i32>
  %216 = mul nuw nsw <8 x i32> %142, %215
  %217 = add nuw nsw <8 x i32> %212, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %218 = add nuw nsw <8 x i32> %217, %216
  %219 = lshr <8 x i32> %218, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %220 = trunc <8 x i32> %219 to <8 x i16>
  %221 = bitcast i16* %207 to <8 x i16>*
  store <8 x i16> %220, <8 x i16>* %221, align 16
  %222 = getelementptr inbounds [72 x i16], [72 x i16]* %9, i64 0, i64 40
  %223 = getelementptr inbounds [64 x i16], [64 x i16]* %10, i64 0, i64 40
  %224 = getelementptr inbounds [72 x i16], [72 x i16]* %9, i64 0, i64 48
  %225 = bitcast i16* %222 to <8 x i16>*
  %226 = load <8 x i16>, <8 x i16>* %225, align 16
  %227 = zext <8 x i16> %226 to <8 x i32>
  %228 = mul nuw nsw <8 x i32> %140, %227
  %229 = bitcast i16* %224 to <8 x i16>*
  %230 = load <8 x i16>, <8 x i16>* %229, align 16
  %231 = zext <8 x i16> %230 to <8 x i32>
  %232 = mul nuw nsw <8 x i32> %142, %231
  %233 = add nuw nsw <8 x i32> %228, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %234 = add nuw nsw <8 x i32> %233, %232
  %235 = lshr <8 x i32> %234, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %236 = trunc <8 x i32> %235 to <8 x i16>
  %237 = bitcast i16* %223 to <8 x i16>*
  store <8 x i16> %236, <8 x i16>* %237, align 16
  %238 = getelementptr inbounds [72 x i16], [72 x i16]* %9, i64 0, i64 48
  %239 = getelementptr inbounds [64 x i16], [64 x i16]* %10, i64 0, i64 48
  %240 = getelementptr inbounds [72 x i16], [72 x i16]* %9, i64 0, i64 56
  %241 = bitcast i16* %238 to <8 x i16>*
  %242 = load <8 x i16>, <8 x i16>* %241, align 16
  %243 = zext <8 x i16> %242 to <8 x i32>
  %244 = mul nuw nsw <8 x i32> %140, %243
  %245 = bitcast i16* %240 to <8 x i16>*
  %246 = load <8 x i16>, <8 x i16>* %245, align 16
  %247 = zext <8 x i16> %246 to <8 x i32>
  %248 = mul nuw nsw <8 x i32> %142, %247
  %249 = add nuw nsw <8 x i32> %244, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %250 = add nuw nsw <8 x i32> %249, %248
  %251 = lshr <8 x i32> %250, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %252 = trunc <8 x i32> %251 to <8 x i16>
  %253 = bitcast i16* %239 to <8 x i16>*
  store <8 x i16> %252, <8 x i16>* %253, align 16
  %254 = getelementptr inbounds [72 x i16], [72 x i16]* %9, i64 0, i64 56
  %255 = getelementptr inbounds [64 x i16], [64 x i16]* %10, i64 0, i64 56
  %256 = getelementptr inbounds [72 x i16], [72 x i16]* %9, i64 0, i64 64
  %257 = bitcast i16* %254 to <8 x i16>*
  %258 = load <8 x i16>, <8 x i16>* %257, align 16
  %259 = zext <8 x i16> %258 to <8 x i32>
  %260 = mul nuw nsw <8 x i32> %140, %259
  %261 = bitcast i16* %256 to <8 x i16>*
  %262 = load <8 x i16>, <8 x i16>* %261, align 16
  %263 = zext <8 x i16> %262 to <8 x i32>
  %264 = mul nuw nsw <8 x i32> %142, %263
  %265 = add nuw nsw <8 x i32> %260, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %266 = add nuw nsw <8 x i32> %265, %264
  %267 = lshr <8 x i32> %266, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %268 = trunc <8 x i32> %267 to <8 x i16>
  %269 = bitcast i16* %255 to <8 x i16>*
  store <8 x i16> %268, <8 x i16>* %269, align 16
  %270 = getelementptr inbounds [64 x i16], [64 x i16]* %11, i64 0, i64 0
  %271 = ptrtoint i8* %7 to i64
  %272 = shl i64 %271, 1
  %273 = inttoptr i64 %272 to i16*
  br label %274

274:                                              ; preds = %274, %131
  %275 = phi i16* [ %270, %131 ], [ %364, %274 ]
  %276 = phi i32 [ 0, %131 ], [ %367, %274 ]
  %277 = phi i16* [ %273, %131 ], [ %365, %274 ]
  %278 = phi i16* [ %143, %131 ], [ %366, %274 ]
  %279 = load i16, i16* %277, align 2
  %280 = zext i16 %279 to i32
  %281 = load i16, i16* %278, align 2
  %282 = zext i16 %281 to i32
  %283 = add nuw nsw i32 %280, 1
  %284 = add nuw nsw i32 %283, %282
  %285 = lshr i32 %284, 1
  %286 = trunc i32 %285 to i16
  store i16 %286, i16* %275, align 2
  %287 = getelementptr inbounds i16, i16* %277, i64 1
  %288 = load i16, i16* %287, align 2
  %289 = zext i16 %288 to i32
  %290 = getelementptr inbounds i16, i16* %278, i64 1
  %291 = load i16, i16* %290, align 2
  %292 = zext i16 %291 to i32
  %293 = add nuw nsw i32 %289, 1
  %294 = add nuw nsw i32 %293, %292
  %295 = lshr i32 %294, 1
  %296 = trunc i32 %295 to i16
  %297 = getelementptr inbounds i16, i16* %275, i64 1
  store i16 %296, i16* %297, align 2
  %298 = getelementptr inbounds i16, i16* %277, i64 2
  %299 = load i16, i16* %298, align 2
  %300 = zext i16 %299 to i32
  %301 = getelementptr inbounds i16, i16* %278, i64 2
  %302 = load i16, i16* %301, align 2
  %303 = zext i16 %302 to i32
  %304 = add nuw nsw i32 %300, 1
  %305 = add nuw nsw i32 %304, %303
  %306 = lshr i32 %305, 1
  %307 = trunc i32 %306 to i16
  %308 = getelementptr inbounds i16, i16* %275, i64 2
  store i16 %307, i16* %308, align 2
  %309 = getelementptr inbounds i16, i16* %277, i64 3
  %310 = load i16, i16* %309, align 2
  %311 = zext i16 %310 to i32
  %312 = getelementptr inbounds i16, i16* %278, i64 3
  %313 = load i16, i16* %312, align 2
  %314 = zext i16 %313 to i32
  %315 = add nuw nsw i32 %311, 1
  %316 = add nuw nsw i32 %315, %314
  %317 = lshr i32 %316, 1
  %318 = trunc i32 %317 to i16
  %319 = getelementptr inbounds i16, i16* %275, i64 3
  store i16 %318, i16* %319, align 2
  %320 = getelementptr inbounds i16, i16* %277, i64 4
  %321 = load i16, i16* %320, align 2
  %322 = zext i16 %321 to i32
  %323 = getelementptr inbounds i16, i16* %278, i64 4
  %324 = load i16, i16* %323, align 2
  %325 = zext i16 %324 to i32
  %326 = add nuw nsw i32 %322, 1
  %327 = add nuw nsw i32 %326, %325
  %328 = lshr i32 %327, 1
  %329 = trunc i32 %328 to i16
  %330 = getelementptr inbounds i16, i16* %275, i64 4
  store i16 %329, i16* %330, align 2
  %331 = getelementptr inbounds i16, i16* %277, i64 5
  %332 = load i16, i16* %331, align 2
  %333 = zext i16 %332 to i32
  %334 = getelementptr inbounds i16, i16* %278, i64 5
  %335 = load i16, i16* %334, align 2
  %336 = zext i16 %335 to i32
  %337 = add nuw nsw i32 %333, 1
  %338 = add nuw nsw i32 %337, %336
  %339 = lshr i32 %338, 1
  %340 = trunc i32 %339 to i16
  %341 = getelementptr inbounds i16, i16* %275, i64 5
  store i16 %340, i16* %341, align 2
  %342 = getelementptr inbounds i16, i16* %277, i64 6
  %343 = load i16, i16* %342, align 2
  %344 = zext i16 %343 to i32
  %345 = getelementptr inbounds i16, i16* %278, i64 6
  %346 = load i16, i16* %345, align 2
  %347 = zext i16 %346 to i32
  %348 = add nuw nsw i32 %344, 1
  %349 = add nuw nsw i32 %348, %347
  %350 = lshr i32 %349, 1
  %351 = trunc i32 %350 to i16
  %352 = getelementptr inbounds i16, i16* %275, i64 6
  store i16 %351, i16* %352, align 2
  %353 = getelementptr inbounds i16, i16* %277, i64 7
  %354 = load i16, i16* %353, align 2
  %355 = zext i16 %354 to i32
  %356 = getelementptr inbounds i16, i16* %278, i64 7
  %357 = load i16, i16* %356, align 2
  %358 = zext i16 %357 to i32
  %359 = add nuw nsw i32 %355, 1
  %360 = add nuw nsw i32 %359, %358
  %361 = lshr i32 %360, 1
  %362 = trunc i32 %361 to i16
  %363 = getelementptr inbounds i16, i16* %275, i64 7
  store i16 %362, i16* %363, align 2
  %364 = getelementptr inbounds i16, i16* %275, i64 8
  %365 = getelementptr inbounds i16, i16* %277, i64 8
  %366 = getelementptr inbounds i16, i16* %278, i64 8
  %367 = add nuw nsw i32 %276, 1
  %368 = icmp eq i32 %367, 8
  br i1 %368, label %369, label %274

369:                                              ; preds = %274
  %370 = ptrtoint [64 x i16]* %11 to i64
  %371 = lshr exact i64 %370, 1
  %372 = inttoptr i64 %371 to i8*
  %373 = call i32 @vpx_highbd_10_variance8x8_c(i8* nonnull %372, i32 8, i8* %4, i32 %5, i32* %6)
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %14) #4
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %13) #4
  call void @llvm.lifetime.end.p0i8(i64 144, i8* nonnull %12) #4
  ret i32 %373
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_highbd_12_sub_pixel_avg_variance8x8_c(i8*, i32, i32, i32, i8*, i32, i32* nocapture, i8*) local_unnamed_addr #2 {
  %9 = alloca [72 x i16], align 16
  %10 = alloca [64 x i16], align 16
  %11 = alloca [64 x i16], align 16
  %12 = bitcast [72 x i16]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 144, i8* nonnull %12) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %12, i8 -86, i64 144, i1 false)
  %13 = bitcast [64 x i16]* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %13) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %13, i8 -86, i64 128, i1 false)
  %14 = bitcast [64 x i16]* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %14) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %14, i8 -86, i64 128, i1 false)
  %15 = getelementptr inbounds [72 x i16], [72 x i16]* %9, i64 0, i64 0
  %16 = sext i32 %2 to i64
  %17 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %16, i64 0
  %18 = ptrtoint i8* %0 to i64
  %19 = shl i64 %18, 1
  %20 = inttoptr i64 %19 to i16*
  %21 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %16, i64 1
  %22 = add i32 %1, -8
  %23 = zext i32 %22 to i64
  %24 = load i8, i8* %17, align 2
  %25 = zext i8 %24 to i32
  %26 = load i8, i8* %21, align 1
  %27 = zext i8 %26 to i32
  br label %28

28:                                               ; preds = %28, %8
  %29 = phi i16* [ %20, %8 ], [ %127, %28 ]
  %30 = phi i32 [ 0, %8 ], [ %129, %28 ]
  %31 = phi i16* [ %15, %8 ], [ %128, %28 ]
  %32 = load i16, i16* %29, align 2
  %33 = zext i16 %32 to i32
  %34 = mul nuw nsw i32 %25, %33
  %35 = getelementptr inbounds i16, i16* %29, i64 1
  %36 = load i16, i16* %35, align 2
  %37 = zext i16 %36 to i32
  %38 = mul nuw nsw i32 %27, %37
  %39 = add nuw nsw i32 %34, 64
  %40 = add nuw nsw i32 %39, %38
  %41 = lshr i32 %40, 7
  %42 = trunc i32 %41 to i16
  store i16 %42, i16* %31, align 2
  %43 = load i16, i16* %35, align 2
  %44 = zext i16 %43 to i32
  %45 = mul nuw nsw i32 %25, %44
  %46 = getelementptr inbounds i16, i16* %29, i64 2
  %47 = load i16, i16* %46, align 2
  %48 = zext i16 %47 to i32
  %49 = mul nuw nsw i32 %27, %48
  %50 = add nuw nsw i32 %45, 64
  %51 = add nuw nsw i32 %50, %49
  %52 = lshr i32 %51, 7
  %53 = trunc i32 %52 to i16
  %54 = getelementptr inbounds i16, i16* %31, i64 1
  store i16 %53, i16* %54, align 2
  %55 = load i16, i16* %46, align 2
  %56 = zext i16 %55 to i32
  %57 = mul nuw nsw i32 %25, %56
  %58 = getelementptr inbounds i16, i16* %29, i64 3
  %59 = load i16, i16* %58, align 2
  %60 = zext i16 %59 to i32
  %61 = mul nuw nsw i32 %27, %60
  %62 = add nuw nsw i32 %57, 64
  %63 = add nuw nsw i32 %62, %61
  %64 = lshr i32 %63, 7
  %65 = trunc i32 %64 to i16
  %66 = getelementptr inbounds i16, i16* %31, i64 2
  store i16 %65, i16* %66, align 2
  %67 = load i16, i16* %58, align 2
  %68 = zext i16 %67 to i32
  %69 = mul nuw nsw i32 %25, %68
  %70 = getelementptr inbounds i16, i16* %29, i64 4
  %71 = load i16, i16* %70, align 2
  %72 = zext i16 %71 to i32
  %73 = mul nuw nsw i32 %27, %72
  %74 = add nuw nsw i32 %69, 64
  %75 = add nuw nsw i32 %74, %73
  %76 = lshr i32 %75, 7
  %77 = trunc i32 %76 to i16
  %78 = getelementptr inbounds i16, i16* %31, i64 3
  store i16 %77, i16* %78, align 2
  %79 = load i16, i16* %70, align 2
  %80 = zext i16 %79 to i32
  %81 = mul nuw nsw i32 %25, %80
  %82 = getelementptr inbounds i16, i16* %29, i64 5
  %83 = load i16, i16* %82, align 2
  %84 = zext i16 %83 to i32
  %85 = mul nuw nsw i32 %27, %84
  %86 = add nuw nsw i32 %81, 64
  %87 = add nuw nsw i32 %86, %85
  %88 = lshr i32 %87, 7
  %89 = trunc i32 %88 to i16
  %90 = getelementptr inbounds i16, i16* %31, i64 4
  store i16 %89, i16* %90, align 2
  %91 = load i16, i16* %82, align 2
  %92 = zext i16 %91 to i32
  %93 = mul nuw nsw i32 %25, %92
  %94 = getelementptr inbounds i16, i16* %29, i64 6
  %95 = load i16, i16* %94, align 2
  %96 = zext i16 %95 to i32
  %97 = mul nuw nsw i32 %27, %96
  %98 = add nuw nsw i32 %93, 64
  %99 = add nuw nsw i32 %98, %97
  %100 = lshr i32 %99, 7
  %101 = trunc i32 %100 to i16
  %102 = getelementptr inbounds i16, i16* %31, i64 5
  store i16 %101, i16* %102, align 2
  %103 = load i16, i16* %94, align 2
  %104 = zext i16 %103 to i32
  %105 = mul nuw nsw i32 %25, %104
  %106 = getelementptr inbounds i16, i16* %29, i64 7
  %107 = load i16, i16* %106, align 2
  %108 = zext i16 %107 to i32
  %109 = mul nuw nsw i32 %27, %108
  %110 = add nuw nsw i32 %105, 64
  %111 = add nuw nsw i32 %110, %109
  %112 = lshr i32 %111, 7
  %113 = trunc i32 %112 to i16
  %114 = getelementptr inbounds i16, i16* %31, i64 6
  store i16 %113, i16* %114, align 2
  %115 = load i16, i16* %106, align 2
  %116 = zext i16 %115 to i32
  %117 = mul nuw nsw i32 %25, %116
  %118 = getelementptr inbounds i16, i16* %29, i64 8
  %119 = load i16, i16* %118, align 2
  %120 = zext i16 %119 to i32
  %121 = mul nuw nsw i32 %27, %120
  %122 = add nuw nsw i32 %117, 64
  %123 = add nuw nsw i32 %122, %121
  %124 = lshr i32 %123, 7
  %125 = trunc i32 %124 to i16
  %126 = getelementptr inbounds i16, i16* %31, i64 7
  store i16 %125, i16* %126, align 2
  %127 = getelementptr inbounds i16, i16* %118, i64 %23
  %128 = getelementptr inbounds i16, i16* %31, i64 8
  %129 = add nuw nsw i32 %30, 1
  %130 = icmp eq i32 %129, 9
  br i1 %130, label %131, label %28

131:                                              ; preds = %28
  %132 = sext i32 %3 to i64
  %133 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %132, i64 0
  %134 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %132, i64 1
  %135 = load i8, i8* %133, align 2
  %136 = zext i8 %135 to i32
  %137 = load i8, i8* %134, align 1
  %138 = zext i8 %137 to i32
  %139 = insertelement <8 x i32> undef, i32 %136, i32 0
  %140 = shufflevector <8 x i32> %139, <8 x i32> undef, <8 x i32> zeroinitializer
  %141 = insertelement <8 x i32> undef, i32 %138, i32 0
  %142 = shufflevector <8 x i32> %141, <8 x i32> undef, <8 x i32> zeroinitializer
  %143 = getelementptr inbounds [64 x i16], [64 x i16]* %10, i64 0, i64 0
  %144 = getelementptr inbounds [72 x i16], [72 x i16]* %9, i64 0, i64 8
  %145 = bitcast [72 x i16]* %9 to <8 x i16>*
  %146 = load <8 x i16>, <8 x i16>* %145, align 16
  %147 = zext <8 x i16> %146 to <8 x i32>
  %148 = mul nuw nsw <8 x i32> %140, %147
  %149 = bitcast i16* %144 to <8 x i16>*
  %150 = load <8 x i16>, <8 x i16>* %149, align 16
  %151 = zext <8 x i16> %150 to <8 x i32>
  %152 = mul nuw nsw <8 x i32> %142, %151
  %153 = add nuw nsw <8 x i32> %148, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %154 = add nuw nsw <8 x i32> %153, %152
  %155 = lshr <8 x i32> %154, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %156 = trunc <8 x i32> %155 to <8 x i16>
  %157 = bitcast [64 x i16]* %10 to <8 x i16>*
  store <8 x i16> %156, <8 x i16>* %157, align 16
  %158 = getelementptr inbounds [72 x i16], [72 x i16]* %9, i64 0, i64 8
  %159 = getelementptr inbounds [64 x i16], [64 x i16]* %10, i64 0, i64 8
  %160 = getelementptr inbounds [72 x i16], [72 x i16]* %9, i64 0, i64 16
  %161 = bitcast i16* %158 to <8 x i16>*
  %162 = load <8 x i16>, <8 x i16>* %161, align 16
  %163 = zext <8 x i16> %162 to <8 x i32>
  %164 = mul nuw nsw <8 x i32> %140, %163
  %165 = bitcast i16* %160 to <8 x i16>*
  %166 = load <8 x i16>, <8 x i16>* %165, align 16
  %167 = zext <8 x i16> %166 to <8 x i32>
  %168 = mul nuw nsw <8 x i32> %142, %167
  %169 = add nuw nsw <8 x i32> %164, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %170 = add nuw nsw <8 x i32> %169, %168
  %171 = lshr <8 x i32> %170, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %172 = trunc <8 x i32> %171 to <8 x i16>
  %173 = bitcast i16* %159 to <8 x i16>*
  store <8 x i16> %172, <8 x i16>* %173, align 16
  %174 = getelementptr inbounds [72 x i16], [72 x i16]* %9, i64 0, i64 16
  %175 = getelementptr inbounds [64 x i16], [64 x i16]* %10, i64 0, i64 16
  %176 = getelementptr inbounds [72 x i16], [72 x i16]* %9, i64 0, i64 24
  %177 = bitcast i16* %174 to <8 x i16>*
  %178 = load <8 x i16>, <8 x i16>* %177, align 16
  %179 = zext <8 x i16> %178 to <8 x i32>
  %180 = mul nuw nsw <8 x i32> %140, %179
  %181 = bitcast i16* %176 to <8 x i16>*
  %182 = load <8 x i16>, <8 x i16>* %181, align 16
  %183 = zext <8 x i16> %182 to <8 x i32>
  %184 = mul nuw nsw <8 x i32> %142, %183
  %185 = add nuw nsw <8 x i32> %180, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %186 = add nuw nsw <8 x i32> %185, %184
  %187 = lshr <8 x i32> %186, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %188 = trunc <8 x i32> %187 to <8 x i16>
  %189 = bitcast i16* %175 to <8 x i16>*
  store <8 x i16> %188, <8 x i16>* %189, align 16
  %190 = getelementptr inbounds [72 x i16], [72 x i16]* %9, i64 0, i64 24
  %191 = getelementptr inbounds [64 x i16], [64 x i16]* %10, i64 0, i64 24
  %192 = getelementptr inbounds [72 x i16], [72 x i16]* %9, i64 0, i64 32
  %193 = bitcast i16* %190 to <8 x i16>*
  %194 = load <8 x i16>, <8 x i16>* %193, align 16
  %195 = zext <8 x i16> %194 to <8 x i32>
  %196 = mul nuw nsw <8 x i32> %140, %195
  %197 = bitcast i16* %192 to <8 x i16>*
  %198 = load <8 x i16>, <8 x i16>* %197, align 16
  %199 = zext <8 x i16> %198 to <8 x i32>
  %200 = mul nuw nsw <8 x i32> %142, %199
  %201 = add nuw nsw <8 x i32> %196, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %202 = add nuw nsw <8 x i32> %201, %200
  %203 = lshr <8 x i32> %202, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %204 = trunc <8 x i32> %203 to <8 x i16>
  %205 = bitcast i16* %191 to <8 x i16>*
  store <8 x i16> %204, <8 x i16>* %205, align 16
  %206 = getelementptr inbounds [72 x i16], [72 x i16]* %9, i64 0, i64 32
  %207 = getelementptr inbounds [64 x i16], [64 x i16]* %10, i64 0, i64 32
  %208 = getelementptr inbounds [72 x i16], [72 x i16]* %9, i64 0, i64 40
  %209 = bitcast i16* %206 to <8 x i16>*
  %210 = load <8 x i16>, <8 x i16>* %209, align 16
  %211 = zext <8 x i16> %210 to <8 x i32>
  %212 = mul nuw nsw <8 x i32> %140, %211
  %213 = bitcast i16* %208 to <8 x i16>*
  %214 = load <8 x i16>, <8 x i16>* %213, align 16
  %215 = zext <8 x i16> %214 to <8 x i32>
  %216 = mul nuw nsw <8 x i32> %142, %215
  %217 = add nuw nsw <8 x i32> %212, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %218 = add nuw nsw <8 x i32> %217, %216
  %219 = lshr <8 x i32> %218, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %220 = trunc <8 x i32> %219 to <8 x i16>
  %221 = bitcast i16* %207 to <8 x i16>*
  store <8 x i16> %220, <8 x i16>* %221, align 16
  %222 = getelementptr inbounds [72 x i16], [72 x i16]* %9, i64 0, i64 40
  %223 = getelementptr inbounds [64 x i16], [64 x i16]* %10, i64 0, i64 40
  %224 = getelementptr inbounds [72 x i16], [72 x i16]* %9, i64 0, i64 48
  %225 = bitcast i16* %222 to <8 x i16>*
  %226 = load <8 x i16>, <8 x i16>* %225, align 16
  %227 = zext <8 x i16> %226 to <8 x i32>
  %228 = mul nuw nsw <8 x i32> %140, %227
  %229 = bitcast i16* %224 to <8 x i16>*
  %230 = load <8 x i16>, <8 x i16>* %229, align 16
  %231 = zext <8 x i16> %230 to <8 x i32>
  %232 = mul nuw nsw <8 x i32> %142, %231
  %233 = add nuw nsw <8 x i32> %228, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %234 = add nuw nsw <8 x i32> %233, %232
  %235 = lshr <8 x i32> %234, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %236 = trunc <8 x i32> %235 to <8 x i16>
  %237 = bitcast i16* %223 to <8 x i16>*
  store <8 x i16> %236, <8 x i16>* %237, align 16
  %238 = getelementptr inbounds [72 x i16], [72 x i16]* %9, i64 0, i64 48
  %239 = getelementptr inbounds [64 x i16], [64 x i16]* %10, i64 0, i64 48
  %240 = getelementptr inbounds [72 x i16], [72 x i16]* %9, i64 0, i64 56
  %241 = bitcast i16* %238 to <8 x i16>*
  %242 = load <8 x i16>, <8 x i16>* %241, align 16
  %243 = zext <8 x i16> %242 to <8 x i32>
  %244 = mul nuw nsw <8 x i32> %140, %243
  %245 = bitcast i16* %240 to <8 x i16>*
  %246 = load <8 x i16>, <8 x i16>* %245, align 16
  %247 = zext <8 x i16> %246 to <8 x i32>
  %248 = mul nuw nsw <8 x i32> %142, %247
  %249 = add nuw nsw <8 x i32> %244, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %250 = add nuw nsw <8 x i32> %249, %248
  %251 = lshr <8 x i32> %250, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %252 = trunc <8 x i32> %251 to <8 x i16>
  %253 = bitcast i16* %239 to <8 x i16>*
  store <8 x i16> %252, <8 x i16>* %253, align 16
  %254 = getelementptr inbounds [72 x i16], [72 x i16]* %9, i64 0, i64 56
  %255 = getelementptr inbounds [64 x i16], [64 x i16]* %10, i64 0, i64 56
  %256 = getelementptr inbounds [72 x i16], [72 x i16]* %9, i64 0, i64 64
  %257 = bitcast i16* %254 to <8 x i16>*
  %258 = load <8 x i16>, <8 x i16>* %257, align 16
  %259 = zext <8 x i16> %258 to <8 x i32>
  %260 = mul nuw nsw <8 x i32> %140, %259
  %261 = bitcast i16* %256 to <8 x i16>*
  %262 = load <8 x i16>, <8 x i16>* %261, align 16
  %263 = zext <8 x i16> %262 to <8 x i32>
  %264 = mul nuw nsw <8 x i32> %142, %263
  %265 = add nuw nsw <8 x i32> %260, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %266 = add nuw nsw <8 x i32> %265, %264
  %267 = lshr <8 x i32> %266, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %268 = trunc <8 x i32> %267 to <8 x i16>
  %269 = bitcast i16* %255 to <8 x i16>*
  store <8 x i16> %268, <8 x i16>* %269, align 16
  %270 = getelementptr inbounds [64 x i16], [64 x i16]* %11, i64 0, i64 0
  %271 = ptrtoint i8* %7 to i64
  %272 = shl i64 %271, 1
  %273 = inttoptr i64 %272 to i16*
  br label %274

274:                                              ; preds = %274, %131
  %275 = phi i16* [ %270, %131 ], [ %364, %274 ]
  %276 = phi i32 [ 0, %131 ], [ %367, %274 ]
  %277 = phi i16* [ %273, %131 ], [ %365, %274 ]
  %278 = phi i16* [ %143, %131 ], [ %366, %274 ]
  %279 = load i16, i16* %277, align 2
  %280 = zext i16 %279 to i32
  %281 = load i16, i16* %278, align 2
  %282 = zext i16 %281 to i32
  %283 = add nuw nsw i32 %280, 1
  %284 = add nuw nsw i32 %283, %282
  %285 = lshr i32 %284, 1
  %286 = trunc i32 %285 to i16
  store i16 %286, i16* %275, align 2
  %287 = getelementptr inbounds i16, i16* %277, i64 1
  %288 = load i16, i16* %287, align 2
  %289 = zext i16 %288 to i32
  %290 = getelementptr inbounds i16, i16* %278, i64 1
  %291 = load i16, i16* %290, align 2
  %292 = zext i16 %291 to i32
  %293 = add nuw nsw i32 %289, 1
  %294 = add nuw nsw i32 %293, %292
  %295 = lshr i32 %294, 1
  %296 = trunc i32 %295 to i16
  %297 = getelementptr inbounds i16, i16* %275, i64 1
  store i16 %296, i16* %297, align 2
  %298 = getelementptr inbounds i16, i16* %277, i64 2
  %299 = load i16, i16* %298, align 2
  %300 = zext i16 %299 to i32
  %301 = getelementptr inbounds i16, i16* %278, i64 2
  %302 = load i16, i16* %301, align 2
  %303 = zext i16 %302 to i32
  %304 = add nuw nsw i32 %300, 1
  %305 = add nuw nsw i32 %304, %303
  %306 = lshr i32 %305, 1
  %307 = trunc i32 %306 to i16
  %308 = getelementptr inbounds i16, i16* %275, i64 2
  store i16 %307, i16* %308, align 2
  %309 = getelementptr inbounds i16, i16* %277, i64 3
  %310 = load i16, i16* %309, align 2
  %311 = zext i16 %310 to i32
  %312 = getelementptr inbounds i16, i16* %278, i64 3
  %313 = load i16, i16* %312, align 2
  %314 = zext i16 %313 to i32
  %315 = add nuw nsw i32 %311, 1
  %316 = add nuw nsw i32 %315, %314
  %317 = lshr i32 %316, 1
  %318 = trunc i32 %317 to i16
  %319 = getelementptr inbounds i16, i16* %275, i64 3
  store i16 %318, i16* %319, align 2
  %320 = getelementptr inbounds i16, i16* %277, i64 4
  %321 = load i16, i16* %320, align 2
  %322 = zext i16 %321 to i32
  %323 = getelementptr inbounds i16, i16* %278, i64 4
  %324 = load i16, i16* %323, align 2
  %325 = zext i16 %324 to i32
  %326 = add nuw nsw i32 %322, 1
  %327 = add nuw nsw i32 %326, %325
  %328 = lshr i32 %327, 1
  %329 = trunc i32 %328 to i16
  %330 = getelementptr inbounds i16, i16* %275, i64 4
  store i16 %329, i16* %330, align 2
  %331 = getelementptr inbounds i16, i16* %277, i64 5
  %332 = load i16, i16* %331, align 2
  %333 = zext i16 %332 to i32
  %334 = getelementptr inbounds i16, i16* %278, i64 5
  %335 = load i16, i16* %334, align 2
  %336 = zext i16 %335 to i32
  %337 = add nuw nsw i32 %333, 1
  %338 = add nuw nsw i32 %337, %336
  %339 = lshr i32 %338, 1
  %340 = trunc i32 %339 to i16
  %341 = getelementptr inbounds i16, i16* %275, i64 5
  store i16 %340, i16* %341, align 2
  %342 = getelementptr inbounds i16, i16* %277, i64 6
  %343 = load i16, i16* %342, align 2
  %344 = zext i16 %343 to i32
  %345 = getelementptr inbounds i16, i16* %278, i64 6
  %346 = load i16, i16* %345, align 2
  %347 = zext i16 %346 to i32
  %348 = add nuw nsw i32 %344, 1
  %349 = add nuw nsw i32 %348, %347
  %350 = lshr i32 %349, 1
  %351 = trunc i32 %350 to i16
  %352 = getelementptr inbounds i16, i16* %275, i64 6
  store i16 %351, i16* %352, align 2
  %353 = getelementptr inbounds i16, i16* %277, i64 7
  %354 = load i16, i16* %353, align 2
  %355 = zext i16 %354 to i32
  %356 = getelementptr inbounds i16, i16* %278, i64 7
  %357 = load i16, i16* %356, align 2
  %358 = zext i16 %357 to i32
  %359 = add nuw nsw i32 %355, 1
  %360 = add nuw nsw i32 %359, %358
  %361 = lshr i32 %360, 1
  %362 = trunc i32 %361 to i16
  %363 = getelementptr inbounds i16, i16* %275, i64 7
  store i16 %362, i16* %363, align 2
  %364 = getelementptr inbounds i16, i16* %275, i64 8
  %365 = getelementptr inbounds i16, i16* %277, i64 8
  %366 = getelementptr inbounds i16, i16* %278, i64 8
  %367 = add nuw nsw i32 %276, 1
  %368 = icmp eq i32 %367, 8
  br i1 %368, label %369, label %274

369:                                              ; preds = %274
  %370 = ptrtoint [64 x i16]* %11 to i64
  %371 = lshr exact i64 %370, 1
  %372 = inttoptr i64 %371 to i8*
  %373 = call i32 @vpx_highbd_12_variance8x8_c(i8* nonnull %372, i32 8, i8* %4, i32 %5, i32* %6)
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %14) #4
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %13) #4
  call void @llvm.lifetime.end.p0i8(i64 144, i8* nonnull %12) #4
  ret i32 %373
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_highbd_8_variance8x4_c(i8*, i32, i8*, i32, i32* nocapture) local_unnamed_addr #2 {
  %6 = ptrtoint i8* %2 to i64
  %7 = shl i64 %6, 1
  %8 = ptrtoint i8* %0 to i64
  %9 = shl i64 %8, 1
  %10 = sext i32 %1 to i64
  %11 = sext i32 %3 to i64
  %12 = inttoptr i64 %7 to i16*
  %13 = inttoptr i64 %9 to i16*
  %14 = inttoptr i64 %9 to <8 x i16>*
  %15 = load <8 x i16>, <8 x i16>* %14, align 2
  %16 = zext <8 x i16> %15 to <8 x i32>
  %17 = inttoptr i64 %7 to <8 x i16>*
  %18 = load <8 x i16>, <8 x i16>* %17, align 2
  %19 = zext <8 x i16> %18 to <8 x i32>
  %20 = sub nsw <8 x i32> %16, %19
  %21 = sext <8 x i32> %20 to <8 x i64>
  %22 = extractelement <8 x i32> %20, i32 0
  %23 = mul nsw i32 %22, %22
  %24 = extractelement <8 x i32> %20, i32 1
  %25 = mul nsw i32 %24, %24
  %26 = add nuw i32 %23, %25
  %27 = extractelement <8 x i32> %20, i32 2
  %28 = mul nsw i32 %27, %27
  %29 = add i32 %26, %28
  %30 = extractelement <8 x i32> %20, i32 3
  %31 = mul nsw i32 %30, %30
  %32 = add i32 %29, %31
  %33 = extractelement <8 x i32> %20, i32 4
  %34 = mul nsw i32 %33, %33
  %35 = add i32 %32, %34
  %36 = extractelement <8 x i32> %20, i32 5
  %37 = mul nsw i32 %36, %36
  %38 = add i32 %35, %37
  %39 = extractelement <8 x i32> %20, i32 6
  %40 = mul nsw i32 %39, %39
  %41 = add i32 %38, %40
  %42 = shufflevector <8 x i64> %21, <8 x i64> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %43 = add nsw <8 x i64> %42, %21
  %44 = shufflevector <8 x i64> %43, <8 x i64> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %45 = add nsw <8 x i64> %43, %44
  %46 = shufflevector <8 x i64> %45, <8 x i64> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %47 = add nsw <8 x i64> %45, %46
  %48 = extractelement <8 x i64> %47, i32 0
  %49 = extractelement <8 x i32> %20, i32 7
  %50 = mul nsw i32 %49, %49
  %51 = add i32 %41, %50
  %52 = getelementptr inbounds i16, i16* %13, i64 %10
  %53 = getelementptr inbounds i16, i16* %12, i64 %11
  %54 = bitcast i16* %52 to <8 x i16>*
  %55 = load <8 x i16>, <8 x i16>* %54, align 2
  %56 = zext <8 x i16> %55 to <8 x i32>
  %57 = bitcast i16* %53 to <8 x i16>*
  %58 = load <8 x i16>, <8 x i16>* %57, align 2
  %59 = zext <8 x i16> %58 to <8 x i32>
  %60 = sub nsw <8 x i32> %56, %59
  %61 = sext <8 x i32> %60 to <8 x i64>
  %62 = extractelement <8 x i32> %60, i32 0
  %63 = mul nsw i32 %62, %62
  %64 = add i32 %51, %63
  %65 = extractelement <8 x i32> %60, i32 1
  %66 = mul nsw i32 %65, %65
  %67 = add i32 %64, %66
  %68 = extractelement <8 x i32> %60, i32 2
  %69 = mul nsw i32 %68, %68
  %70 = add i32 %67, %69
  %71 = extractelement <8 x i32> %60, i32 3
  %72 = mul nsw i32 %71, %71
  %73 = add i32 %70, %72
  %74 = extractelement <8 x i32> %60, i32 4
  %75 = mul nsw i32 %74, %74
  %76 = add i32 %73, %75
  %77 = extractelement <8 x i32> %60, i32 5
  %78 = mul nsw i32 %77, %77
  %79 = add i32 %76, %78
  %80 = extractelement <8 x i32> %60, i32 6
  %81 = mul nsw i32 %80, %80
  %82 = add i32 %79, %81
  %83 = shufflevector <8 x i64> %61, <8 x i64> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %84 = add nsw <8 x i64> %83, %61
  %85 = shufflevector <8 x i64> %84, <8 x i64> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %86 = add nsw <8 x i64> %84, %85
  %87 = shufflevector <8 x i64> %86, <8 x i64> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %88 = add nsw <8 x i64> %86, %87
  %89 = extractelement <8 x i64> %88, i32 0
  %90 = add nsw i64 %89, %48
  %91 = extractelement <8 x i32> %60, i32 7
  %92 = mul nsw i32 %91, %91
  %93 = add i32 %82, %92
  %94 = getelementptr inbounds i16, i16* %52, i64 %10
  %95 = getelementptr inbounds i16, i16* %53, i64 %11
  %96 = bitcast i16* %94 to <8 x i16>*
  %97 = load <8 x i16>, <8 x i16>* %96, align 2
  %98 = zext <8 x i16> %97 to <8 x i32>
  %99 = bitcast i16* %95 to <8 x i16>*
  %100 = load <8 x i16>, <8 x i16>* %99, align 2
  %101 = zext <8 x i16> %100 to <8 x i32>
  %102 = sub nsw <8 x i32> %98, %101
  %103 = sext <8 x i32> %102 to <8 x i64>
  %104 = extractelement <8 x i32> %102, i32 0
  %105 = mul nsw i32 %104, %104
  %106 = add i32 %93, %105
  %107 = extractelement <8 x i32> %102, i32 1
  %108 = mul nsw i32 %107, %107
  %109 = add i32 %106, %108
  %110 = extractelement <8 x i32> %102, i32 2
  %111 = mul nsw i32 %110, %110
  %112 = add i32 %109, %111
  %113 = extractelement <8 x i32> %102, i32 3
  %114 = mul nsw i32 %113, %113
  %115 = add i32 %112, %114
  %116 = extractelement <8 x i32> %102, i32 4
  %117 = mul nsw i32 %116, %116
  %118 = add i32 %115, %117
  %119 = extractelement <8 x i32> %102, i32 5
  %120 = mul nsw i32 %119, %119
  %121 = add i32 %118, %120
  %122 = extractelement <8 x i32> %102, i32 6
  %123 = mul nsw i32 %122, %122
  %124 = add i32 %121, %123
  %125 = shufflevector <8 x i64> %103, <8 x i64> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %126 = add nsw <8 x i64> %125, %103
  %127 = shufflevector <8 x i64> %126, <8 x i64> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %128 = add nsw <8 x i64> %126, %127
  %129 = shufflevector <8 x i64> %128, <8 x i64> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %130 = add nsw <8 x i64> %128, %129
  %131 = extractelement <8 x i64> %130, i32 0
  %132 = add nsw i64 %131, %90
  %133 = extractelement <8 x i32> %102, i32 7
  %134 = mul nsw i32 %133, %133
  %135 = add i32 %124, %134
  %136 = getelementptr inbounds i16, i16* %94, i64 %10
  %137 = getelementptr inbounds i16, i16* %95, i64 %11
  %138 = bitcast i16* %136 to <8 x i16>*
  %139 = load <8 x i16>, <8 x i16>* %138, align 2
  %140 = zext <8 x i16> %139 to <8 x i32>
  %141 = bitcast i16* %137 to <8 x i16>*
  %142 = load <8 x i16>, <8 x i16>* %141, align 2
  %143 = zext <8 x i16> %142 to <8 x i32>
  %144 = sub nsw <8 x i32> %140, %143
  %145 = sext <8 x i32> %144 to <8 x i64>
  %146 = extractelement <8 x i32> %144, i32 0
  %147 = mul nsw i32 %146, %146
  %148 = add i32 %135, %147
  %149 = extractelement <8 x i32> %144, i32 1
  %150 = mul nsw i32 %149, %149
  %151 = add i32 %148, %150
  %152 = extractelement <8 x i32> %144, i32 2
  %153 = mul nsw i32 %152, %152
  %154 = add i32 %151, %153
  %155 = extractelement <8 x i32> %144, i32 3
  %156 = mul nsw i32 %155, %155
  %157 = add i32 %154, %156
  %158 = extractelement <8 x i32> %144, i32 4
  %159 = mul nsw i32 %158, %158
  %160 = add i32 %157, %159
  %161 = extractelement <8 x i32> %144, i32 5
  %162 = mul nsw i32 %161, %161
  %163 = add i32 %160, %162
  %164 = extractelement <8 x i32> %144, i32 6
  %165 = mul nsw i32 %164, %164
  %166 = add i32 %163, %165
  %167 = shufflevector <8 x i64> %145, <8 x i64> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %168 = add nsw <8 x i64> %167, %145
  %169 = shufflevector <8 x i64> %168, <8 x i64> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %170 = add nsw <8 x i64> %168, %169
  %171 = shufflevector <8 x i64> %170, <8 x i64> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %172 = add nsw <8 x i64> %170, %171
  %173 = extractelement <8 x i64> %172, i32 0
  %174 = add nsw i64 %173, %132
  %175 = extractelement <8 x i32> %144, i32 7
  %176 = mul nsw i32 %175, %175
  %177 = add i32 %166, %176
  store i32 %177, i32* %4, align 4
  %178 = shl i64 %174, 32
  %179 = ashr exact i64 %178, 32
  %180 = mul nsw i64 %179, %179
  %181 = lshr i64 %180, 5
  %182 = trunc i64 %181 to i32
  %183 = sub i32 %177, %182
  ret i32 %183
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_highbd_10_variance8x4_c(i8*, i32, i8*, i32, i32* nocapture) local_unnamed_addr #2 {
  %6 = ptrtoint i8* %2 to i64
  %7 = shl i64 %6, 1
  %8 = ptrtoint i8* %0 to i64
  %9 = shl i64 %8, 1
  %10 = sext i32 %1 to i64
  %11 = sext i32 %3 to i64
  %12 = inttoptr i64 %7 to i16*
  %13 = inttoptr i64 %9 to i16*
  %14 = inttoptr i64 %9 to <8 x i16>*
  %15 = load <8 x i16>, <8 x i16>* %14, align 2
  %16 = zext <8 x i16> %15 to <8 x i32>
  %17 = inttoptr i64 %7 to <8 x i16>*
  %18 = load <8 x i16>, <8 x i16>* %17, align 2
  %19 = zext <8 x i16> %18 to <8 x i32>
  %20 = sub nsw <8 x i32> %16, %19
  %21 = sext <8 x i32> %20 to <8 x i64>
  %22 = extractelement <8 x i32> %20, i32 0
  %23 = mul nsw i32 %22, %22
  %24 = extractelement <8 x i32> %20, i32 1
  %25 = mul nsw i32 %24, %24
  %26 = add nuw i32 %23, %25
  %27 = zext i32 %26 to i64
  %28 = extractelement <8 x i32> %20, i32 2
  %29 = mul nsw i32 %28, %28
  %30 = zext i32 %29 to i64
  %31 = add nuw nsw i64 %27, %30
  %32 = extractelement <8 x i32> %20, i32 3
  %33 = mul nsw i32 %32, %32
  %34 = zext i32 %33 to i64
  %35 = add nuw nsw i64 %31, %34
  %36 = extractelement <8 x i32> %20, i32 4
  %37 = mul nsw i32 %36, %36
  %38 = zext i32 %37 to i64
  %39 = add nuw nsw i64 %35, %38
  %40 = extractelement <8 x i32> %20, i32 5
  %41 = mul nsw i32 %40, %40
  %42 = zext i32 %41 to i64
  %43 = add nuw nsw i64 %39, %42
  %44 = extractelement <8 x i32> %20, i32 6
  %45 = mul nsw i32 %44, %44
  %46 = zext i32 %45 to i64
  %47 = add nuw nsw i64 %43, %46
  %48 = shufflevector <8 x i64> %21, <8 x i64> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %49 = add nsw <8 x i64> %48, %21
  %50 = shufflevector <8 x i64> %49, <8 x i64> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %51 = add nsw <8 x i64> %49, %50
  %52 = shufflevector <8 x i64> %51, <8 x i64> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %53 = add nsw <8 x i64> %51, %52
  %54 = extractelement <8 x i64> %53, i32 0
  %55 = extractelement <8 x i32> %20, i32 7
  %56 = mul nsw i32 %55, %55
  %57 = zext i32 %56 to i64
  %58 = add nuw nsw i64 %47, %57
  %59 = getelementptr inbounds i16, i16* %13, i64 %10
  %60 = getelementptr inbounds i16, i16* %12, i64 %11
  %61 = bitcast i16* %59 to <8 x i16>*
  %62 = load <8 x i16>, <8 x i16>* %61, align 2
  %63 = zext <8 x i16> %62 to <8 x i32>
  %64 = bitcast i16* %60 to <8 x i16>*
  %65 = load <8 x i16>, <8 x i16>* %64, align 2
  %66 = zext <8 x i16> %65 to <8 x i32>
  %67 = sub nsw <8 x i32> %63, %66
  %68 = sext <8 x i32> %67 to <8 x i64>
  %69 = extractelement <8 x i32> %67, i32 0
  %70 = mul nsw i32 %69, %69
  %71 = zext i32 %70 to i64
  %72 = add i64 %58, %71
  %73 = extractelement <8 x i32> %67, i32 1
  %74 = mul nsw i32 %73, %73
  %75 = zext i32 %74 to i64
  %76 = add i64 %72, %75
  %77 = extractelement <8 x i32> %67, i32 2
  %78 = mul nsw i32 %77, %77
  %79 = zext i32 %78 to i64
  %80 = add i64 %76, %79
  %81 = extractelement <8 x i32> %67, i32 3
  %82 = mul nsw i32 %81, %81
  %83 = zext i32 %82 to i64
  %84 = add i64 %80, %83
  %85 = extractelement <8 x i32> %67, i32 4
  %86 = mul nsw i32 %85, %85
  %87 = zext i32 %86 to i64
  %88 = add i64 %84, %87
  %89 = extractelement <8 x i32> %67, i32 5
  %90 = mul nsw i32 %89, %89
  %91 = zext i32 %90 to i64
  %92 = add i64 %88, %91
  %93 = extractelement <8 x i32> %67, i32 6
  %94 = mul nsw i32 %93, %93
  %95 = zext i32 %94 to i64
  %96 = add i64 %92, %95
  %97 = shufflevector <8 x i64> %68, <8 x i64> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %98 = add nsw <8 x i64> %97, %68
  %99 = shufflevector <8 x i64> %98, <8 x i64> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %100 = add nsw <8 x i64> %98, %99
  %101 = shufflevector <8 x i64> %100, <8 x i64> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %102 = add nsw <8 x i64> %100, %101
  %103 = extractelement <8 x i64> %102, i32 0
  %104 = add nsw i64 %103, %54
  %105 = extractelement <8 x i32> %67, i32 7
  %106 = mul nsw i32 %105, %105
  %107 = zext i32 %106 to i64
  %108 = add i64 %96, %107
  %109 = getelementptr inbounds i16, i16* %59, i64 %10
  %110 = getelementptr inbounds i16, i16* %60, i64 %11
  %111 = bitcast i16* %109 to <8 x i16>*
  %112 = load <8 x i16>, <8 x i16>* %111, align 2
  %113 = zext <8 x i16> %112 to <8 x i32>
  %114 = bitcast i16* %110 to <8 x i16>*
  %115 = load <8 x i16>, <8 x i16>* %114, align 2
  %116 = zext <8 x i16> %115 to <8 x i32>
  %117 = sub nsw <8 x i32> %113, %116
  %118 = sext <8 x i32> %117 to <8 x i64>
  %119 = extractelement <8 x i32> %117, i32 0
  %120 = mul nsw i32 %119, %119
  %121 = zext i32 %120 to i64
  %122 = add i64 %108, %121
  %123 = extractelement <8 x i32> %117, i32 1
  %124 = mul nsw i32 %123, %123
  %125 = zext i32 %124 to i64
  %126 = add i64 %122, %125
  %127 = extractelement <8 x i32> %117, i32 2
  %128 = mul nsw i32 %127, %127
  %129 = zext i32 %128 to i64
  %130 = add i64 %126, %129
  %131 = extractelement <8 x i32> %117, i32 3
  %132 = mul nsw i32 %131, %131
  %133 = zext i32 %132 to i64
  %134 = add i64 %130, %133
  %135 = extractelement <8 x i32> %117, i32 4
  %136 = mul nsw i32 %135, %135
  %137 = zext i32 %136 to i64
  %138 = add i64 %134, %137
  %139 = extractelement <8 x i32> %117, i32 5
  %140 = mul nsw i32 %139, %139
  %141 = zext i32 %140 to i64
  %142 = add i64 %138, %141
  %143 = extractelement <8 x i32> %117, i32 6
  %144 = mul nsw i32 %143, %143
  %145 = zext i32 %144 to i64
  %146 = add i64 %142, %145
  %147 = shufflevector <8 x i64> %118, <8 x i64> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %148 = add nsw <8 x i64> %147, %118
  %149 = shufflevector <8 x i64> %148, <8 x i64> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %150 = add nsw <8 x i64> %148, %149
  %151 = shufflevector <8 x i64> %150, <8 x i64> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %152 = add nsw <8 x i64> %150, %151
  %153 = extractelement <8 x i64> %152, i32 0
  %154 = add nsw i64 %153, %104
  %155 = extractelement <8 x i32> %117, i32 7
  %156 = mul nsw i32 %155, %155
  %157 = zext i32 %156 to i64
  %158 = add i64 %146, %157
  %159 = getelementptr inbounds i16, i16* %109, i64 %10
  %160 = getelementptr inbounds i16, i16* %110, i64 %11
  %161 = bitcast i16* %159 to <8 x i16>*
  %162 = load <8 x i16>, <8 x i16>* %161, align 2
  %163 = zext <8 x i16> %162 to <8 x i32>
  %164 = bitcast i16* %160 to <8 x i16>*
  %165 = load <8 x i16>, <8 x i16>* %164, align 2
  %166 = zext <8 x i16> %165 to <8 x i32>
  %167 = sub nsw <8 x i32> %163, %166
  %168 = sext <8 x i32> %167 to <8 x i64>
  %169 = extractelement <8 x i32> %167, i32 0
  %170 = mul nsw i32 %169, %169
  %171 = zext i32 %170 to i64
  %172 = add i64 %158, %171
  %173 = extractelement <8 x i32> %167, i32 1
  %174 = mul nsw i32 %173, %173
  %175 = zext i32 %174 to i64
  %176 = add i64 %172, %175
  %177 = extractelement <8 x i32> %167, i32 2
  %178 = mul nsw i32 %177, %177
  %179 = zext i32 %178 to i64
  %180 = add i64 %176, %179
  %181 = extractelement <8 x i32> %167, i32 3
  %182 = mul nsw i32 %181, %181
  %183 = zext i32 %182 to i64
  %184 = add i64 %180, %183
  %185 = extractelement <8 x i32> %167, i32 4
  %186 = mul nsw i32 %185, %185
  %187 = zext i32 %186 to i64
  %188 = add i64 %184, %187
  %189 = extractelement <8 x i32> %167, i32 5
  %190 = mul nsw i32 %189, %189
  %191 = zext i32 %190 to i64
  %192 = add i64 %188, %191
  %193 = extractelement <8 x i32> %167, i32 6
  %194 = mul nsw i32 %193, %193
  %195 = zext i32 %194 to i64
  %196 = add i64 %192, %195
  %197 = shufflevector <8 x i64> %168, <8 x i64> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %198 = add nsw <8 x i64> %197, %168
  %199 = shufflevector <8 x i64> %198, <8 x i64> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %200 = add nsw <8 x i64> %198, %199
  %201 = shufflevector <8 x i64> %200, <8 x i64> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %202 = add nsw <8 x i64> %200, %201
  %203 = extractelement <8 x i64> %202, i32 0
  %204 = add nsw i64 %203, %154
  %205 = extractelement <8 x i32> %167, i32 7
  %206 = mul nsw i32 %205, %205
  %207 = zext i32 %206 to i64
  %208 = add i64 %196, %207
  %209 = add i64 %208, 8
  %210 = lshr i64 %209, 4
  %211 = trunc i64 %210 to i32
  store i32 %211, i32* %4, align 4
  %212 = and i64 %210, 4294967295
  %213 = shl i64 %204, 30
  %214 = add i64 %213, 2147483648
  %215 = ashr i64 %214, 32
  %216 = mul nsw i64 %215, %215
  %217 = lshr i64 %216, 5
  %218 = sub nsw i64 %212, %217
  %219 = icmp sgt i64 %218, -1
  %220 = trunc i64 %218 to i32
  %221 = select i1 %219, i32 %220, i32 0
  ret i32 %221
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_highbd_12_variance8x4_c(i8*, i32, i8*, i32, i32* nocapture) local_unnamed_addr #2 {
  %6 = ptrtoint i8* %2 to i64
  %7 = shl i64 %6, 1
  %8 = ptrtoint i8* %0 to i64
  %9 = shl i64 %8, 1
  %10 = sext i32 %1 to i64
  %11 = sext i32 %3 to i64
  %12 = inttoptr i64 %7 to i16*
  %13 = inttoptr i64 %9 to i16*
  %14 = inttoptr i64 %9 to <8 x i16>*
  %15 = load <8 x i16>, <8 x i16>* %14, align 2
  %16 = zext <8 x i16> %15 to <8 x i32>
  %17 = inttoptr i64 %7 to <8 x i16>*
  %18 = load <8 x i16>, <8 x i16>* %17, align 2
  %19 = zext <8 x i16> %18 to <8 x i32>
  %20 = sub nsw <8 x i32> %16, %19
  %21 = sext <8 x i32> %20 to <8 x i64>
  %22 = extractelement <8 x i32> %20, i32 0
  %23 = mul nsw i32 %22, %22
  %24 = extractelement <8 x i32> %20, i32 1
  %25 = mul nsw i32 %24, %24
  %26 = add nuw i32 %23, %25
  %27 = zext i32 %26 to i64
  %28 = extractelement <8 x i32> %20, i32 2
  %29 = mul nsw i32 %28, %28
  %30 = zext i32 %29 to i64
  %31 = add nuw nsw i64 %27, %30
  %32 = extractelement <8 x i32> %20, i32 3
  %33 = mul nsw i32 %32, %32
  %34 = zext i32 %33 to i64
  %35 = add nuw nsw i64 %31, %34
  %36 = extractelement <8 x i32> %20, i32 4
  %37 = mul nsw i32 %36, %36
  %38 = zext i32 %37 to i64
  %39 = add nuw nsw i64 %35, %38
  %40 = extractelement <8 x i32> %20, i32 5
  %41 = mul nsw i32 %40, %40
  %42 = zext i32 %41 to i64
  %43 = add nuw nsw i64 %39, %42
  %44 = extractelement <8 x i32> %20, i32 6
  %45 = mul nsw i32 %44, %44
  %46 = zext i32 %45 to i64
  %47 = add nuw nsw i64 %43, %46
  %48 = shufflevector <8 x i64> %21, <8 x i64> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %49 = add nsw <8 x i64> %48, %21
  %50 = shufflevector <8 x i64> %49, <8 x i64> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %51 = add nsw <8 x i64> %49, %50
  %52 = shufflevector <8 x i64> %51, <8 x i64> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %53 = add nsw <8 x i64> %51, %52
  %54 = extractelement <8 x i64> %53, i32 0
  %55 = extractelement <8 x i32> %20, i32 7
  %56 = mul nsw i32 %55, %55
  %57 = zext i32 %56 to i64
  %58 = add nuw nsw i64 %47, %57
  %59 = getelementptr inbounds i16, i16* %13, i64 %10
  %60 = getelementptr inbounds i16, i16* %12, i64 %11
  %61 = bitcast i16* %59 to <8 x i16>*
  %62 = load <8 x i16>, <8 x i16>* %61, align 2
  %63 = zext <8 x i16> %62 to <8 x i32>
  %64 = bitcast i16* %60 to <8 x i16>*
  %65 = load <8 x i16>, <8 x i16>* %64, align 2
  %66 = zext <8 x i16> %65 to <8 x i32>
  %67 = sub nsw <8 x i32> %63, %66
  %68 = sext <8 x i32> %67 to <8 x i64>
  %69 = extractelement <8 x i32> %67, i32 0
  %70 = mul nsw i32 %69, %69
  %71 = zext i32 %70 to i64
  %72 = add i64 %58, %71
  %73 = extractelement <8 x i32> %67, i32 1
  %74 = mul nsw i32 %73, %73
  %75 = zext i32 %74 to i64
  %76 = add i64 %72, %75
  %77 = extractelement <8 x i32> %67, i32 2
  %78 = mul nsw i32 %77, %77
  %79 = zext i32 %78 to i64
  %80 = add i64 %76, %79
  %81 = extractelement <8 x i32> %67, i32 3
  %82 = mul nsw i32 %81, %81
  %83 = zext i32 %82 to i64
  %84 = add i64 %80, %83
  %85 = extractelement <8 x i32> %67, i32 4
  %86 = mul nsw i32 %85, %85
  %87 = zext i32 %86 to i64
  %88 = add i64 %84, %87
  %89 = extractelement <8 x i32> %67, i32 5
  %90 = mul nsw i32 %89, %89
  %91 = zext i32 %90 to i64
  %92 = add i64 %88, %91
  %93 = extractelement <8 x i32> %67, i32 6
  %94 = mul nsw i32 %93, %93
  %95 = zext i32 %94 to i64
  %96 = add i64 %92, %95
  %97 = shufflevector <8 x i64> %68, <8 x i64> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %98 = add nsw <8 x i64> %97, %68
  %99 = shufflevector <8 x i64> %98, <8 x i64> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %100 = add nsw <8 x i64> %98, %99
  %101 = shufflevector <8 x i64> %100, <8 x i64> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %102 = add nsw <8 x i64> %100, %101
  %103 = extractelement <8 x i64> %102, i32 0
  %104 = add nsw i64 %103, %54
  %105 = extractelement <8 x i32> %67, i32 7
  %106 = mul nsw i32 %105, %105
  %107 = zext i32 %106 to i64
  %108 = add i64 %96, %107
  %109 = getelementptr inbounds i16, i16* %59, i64 %10
  %110 = getelementptr inbounds i16, i16* %60, i64 %11
  %111 = bitcast i16* %109 to <8 x i16>*
  %112 = load <8 x i16>, <8 x i16>* %111, align 2
  %113 = zext <8 x i16> %112 to <8 x i32>
  %114 = bitcast i16* %110 to <8 x i16>*
  %115 = load <8 x i16>, <8 x i16>* %114, align 2
  %116 = zext <8 x i16> %115 to <8 x i32>
  %117 = sub nsw <8 x i32> %113, %116
  %118 = sext <8 x i32> %117 to <8 x i64>
  %119 = extractelement <8 x i32> %117, i32 0
  %120 = mul nsw i32 %119, %119
  %121 = zext i32 %120 to i64
  %122 = add i64 %108, %121
  %123 = extractelement <8 x i32> %117, i32 1
  %124 = mul nsw i32 %123, %123
  %125 = zext i32 %124 to i64
  %126 = add i64 %122, %125
  %127 = extractelement <8 x i32> %117, i32 2
  %128 = mul nsw i32 %127, %127
  %129 = zext i32 %128 to i64
  %130 = add i64 %126, %129
  %131 = extractelement <8 x i32> %117, i32 3
  %132 = mul nsw i32 %131, %131
  %133 = zext i32 %132 to i64
  %134 = add i64 %130, %133
  %135 = extractelement <8 x i32> %117, i32 4
  %136 = mul nsw i32 %135, %135
  %137 = zext i32 %136 to i64
  %138 = add i64 %134, %137
  %139 = extractelement <8 x i32> %117, i32 5
  %140 = mul nsw i32 %139, %139
  %141 = zext i32 %140 to i64
  %142 = add i64 %138, %141
  %143 = extractelement <8 x i32> %117, i32 6
  %144 = mul nsw i32 %143, %143
  %145 = zext i32 %144 to i64
  %146 = add i64 %142, %145
  %147 = shufflevector <8 x i64> %118, <8 x i64> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %148 = add nsw <8 x i64> %147, %118
  %149 = shufflevector <8 x i64> %148, <8 x i64> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %150 = add nsw <8 x i64> %148, %149
  %151 = shufflevector <8 x i64> %150, <8 x i64> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %152 = add nsw <8 x i64> %150, %151
  %153 = extractelement <8 x i64> %152, i32 0
  %154 = add nsw i64 %153, %104
  %155 = extractelement <8 x i32> %117, i32 7
  %156 = mul nsw i32 %155, %155
  %157 = zext i32 %156 to i64
  %158 = add i64 %146, %157
  %159 = getelementptr inbounds i16, i16* %109, i64 %10
  %160 = getelementptr inbounds i16, i16* %110, i64 %11
  %161 = bitcast i16* %159 to <8 x i16>*
  %162 = load <8 x i16>, <8 x i16>* %161, align 2
  %163 = zext <8 x i16> %162 to <8 x i32>
  %164 = bitcast i16* %160 to <8 x i16>*
  %165 = load <8 x i16>, <8 x i16>* %164, align 2
  %166 = zext <8 x i16> %165 to <8 x i32>
  %167 = sub nsw <8 x i32> %163, %166
  %168 = sext <8 x i32> %167 to <8 x i64>
  %169 = extractelement <8 x i32> %167, i32 0
  %170 = mul nsw i32 %169, %169
  %171 = zext i32 %170 to i64
  %172 = add i64 %158, %171
  %173 = extractelement <8 x i32> %167, i32 1
  %174 = mul nsw i32 %173, %173
  %175 = zext i32 %174 to i64
  %176 = add i64 %172, %175
  %177 = extractelement <8 x i32> %167, i32 2
  %178 = mul nsw i32 %177, %177
  %179 = zext i32 %178 to i64
  %180 = add i64 %176, %179
  %181 = extractelement <8 x i32> %167, i32 3
  %182 = mul nsw i32 %181, %181
  %183 = zext i32 %182 to i64
  %184 = add i64 %180, %183
  %185 = extractelement <8 x i32> %167, i32 4
  %186 = mul nsw i32 %185, %185
  %187 = zext i32 %186 to i64
  %188 = add i64 %184, %187
  %189 = extractelement <8 x i32> %167, i32 5
  %190 = mul nsw i32 %189, %189
  %191 = zext i32 %190 to i64
  %192 = add i64 %188, %191
  %193 = extractelement <8 x i32> %167, i32 6
  %194 = mul nsw i32 %193, %193
  %195 = zext i32 %194 to i64
  %196 = add i64 %192, %195
  %197 = shufflevector <8 x i64> %168, <8 x i64> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %198 = add nsw <8 x i64> %197, %168
  %199 = shufflevector <8 x i64> %198, <8 x i64> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %200 = add nsw <8 x i64> %198, %199
  %201 = shufflevector <8 x i64> %200, <8 x i64> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %202 = add nsw <8 x i64> %200, %201
  %203 = extractelement <8 x i64> %202, i32 0
  %204 = add nsw i64 %203, %154
  %205 = extractelement <8 x i32> %167, i32 7
  %206 = mul nsw i32 %205, %205
  %207 = zext i32 %206 to i64
  %208 = add i64 %196, %207
  %209 = add i64 %208, 128
  %210 = lshr i64 %209, 8
  %211 = trunc i64 %210 to i32
  store i32 %211, i32* %4, align 4
  %212 = and i64 %210, 4294967295
  %213 = shl i64 %204, 28
  %214 = add i64 %213, 2147483648
  %215 = ashr i64 %214, 32
  %216 = mul nsw i64 %215, %215
  %217 = lshr i64 %216, 5
  %218 = sub nsw i64 %212, %217
  %219 = icmp sgt i64 %218, -1
  %220 = trunc i64 %218 to i32
  %221 = select i1 %219, i32 %220, i32 0
  ret i32 %221
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_highbd_8_sub_pixel_variance8x4_c(i8*, i32, i32, i32, i8*, i32, i32* nocapture) local_unnamed_addr #2 {
  %8 = alloca [40 x i16], align 16
  %9 = alloca [32 x i16], align 16
  %10 = bitcast [40 x i16]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %10) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %10, i8 -86, i64 80, i1 false)
  %11 = bitcast [32 x i16]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %11) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %11, i8 -86, i64 64, i1 false)
  %12 = getelementptr inbounds [40 x i16], [40 x i16]* %8, i64 0, i64 0
  %13 = sext i32 %2 to i64
  %14 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %13, i64 0
  %15 = ptrtoint i8* %0 to i64
  %16 = shl i64 %15, 1
  %17 = inttoptr i64 %16 to i16*
  %18 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %13, i64 1
  %19 = add i32 %1, -8
  %20 = zext i32 %19 to i64
  %21 = load i8, i8* %14, align 2
  %22 = zext i8 %21 to i32
  %23 = load i8, i8* %18, align 1
  %24 = zext i8 %23 to i32
  br label %25

25:                                               ; preds = %25, %7
  %26 = phi i16* [ %17, %7 ], [ %124, %25 ]
  %27 = phi i32 [ 0, %7 ], [ %126, %25 ]
  %28 = phi i16* [ %12, %7 ], [ %125, %25 ]
  %29 = load i16, i16* %26, align 2
  %30 = zext i16 %29 to i32
  %31 = mul nuw nsw i32 %22, %30
  %32 = getelementptr inbounds i16, i16* %26, i64 1
  %33 = load i16, i16* %32, align 2
  %34 = zext i16 %33 to i32
  %35 = mul nuw nsw i32 %24, %34
  %36 = add nuw nsw i32 %31, 64
  %37 = add nuw nsw i32 %36, %35
  %38 = lshr i32 %37, 7
  %39 = trunc i32 %38 to i16
  store i16 %39, i16* %28, align 2
  %40 = load i16, i16* %32, align 2
  %41 = zext i16 %40 to i32
  %42 = mul nuw nsw i32 %22, %41
  %43 = getelementptr inbounds i16, i16* %26, i64 2
  %44 = load i16, i16* %43, align 2
  %45 = zext i16 %44 to i32
  %46 = mul nuw nsw i32 %24, %45
  %47 = add nuw nsw i32 %42, 64
  %48 = add nuw nsw i32 %47, %46
  %49 = lshr i32 %48, 7
  %50 = trunc i32 %49 to i16
  %51 = getelementptr inbounds i16, i16* %28, i64 1
  store i16 %50, i16* %51, align 2
  %52 = load i16, i16* %43, align 2
  %53 = zext i16 %52 to i32
  %54 = mul nuw nsw i32 %22, %53
  %55 = getelementptr inbounds i16, i16* %26, i64 3
  %56 = load i16, i16* %55, align 2
  %57 = zext i16 %56 to i32
  %58 = mul nuw nsw i32 %24, %57
  %59 = add nuw nsw i32 %54, 64
  %60 = add nuw nsw i32 %59, %58
  %61 = lshr i32 %60, 7
  %62 = trunc i32 %61 to i16
  %63 = getelementptr inbounds i16, i16* %28, i64 2
  store i16 %62, i16* %63, align 2
  %64 = load i16, i16* %55, align 2
  %65 = zext i16 %64 to i32
  %66 = mul nuw nsw i32 %22, %65
  %67 = getelementptr inbounds i16, i16* %26, i64 4
  %68 = load i16, i16* %67, align 2
  %69 = zext i16 %68 to i32
  %70 = mul nuw nsw i32 %24, %69
  %71 = add nuw nsw i32 %66, 64
  %72 = add nuw nsw i32 %71, %70
  %73 = lshr i32 %72, 7
  %74 = trunc i32 %73 to i16
  %75 = getelementptr inbounds i16, i16* %28, i64 3
  store i16 %74, i16* %75, align 2
  %76 = load i16, i16* %67, align 2
  %77 = zext i16 %76 to i32
  %78 = mul nuw nsw i32 %22, %77
  %79 = getelementptr inbounds i16, i16* %26, i64 5
  %80 = load i16, i16* %79, align 2
  %81 = zext i16 %80 to i32
  %82 = mul nuw nsw i32 %24, %81
  %83 = add nuw nsw i32 %78, 64
  %84 = add nuw nsw i32 %83, %82
  %85 = lshr i32 %84, 7
  %86 = trunc i32 %85 to i16
  %87 = getelementptr inbounds i16, i16* %28, i64 4
  store i16 %86, i16* %87, align 2
  %88 = load i16, i16* %79, align 2
  %89 = zext i16 %88 to i32
  %90 = mul nuw nsw i32 %22, %89
  %91 = getelementptr inbounds i16, i16* %26, i64 6
  %92 = load i16, i16* %91, align 2
  %93 = zext i16 %92 to i32
  %94 = mul nuw nsw i32 %24, %93
  %95 = add nuw nsw i32 %90, 64
  %96 = add nuw nsw i32 %95, %94
  %97 = lshr i32 %96, 7
  %98 = trunc i32 %97 to i16
  %99 = getelementptr inbounds i16, i16* %28, i64 5
  store i16 %98, i16* %99, align 2
  %100 = load i16, i16* %91, align 2
  %101 = zext i16 %100 to i32
  %102 = mul nuw nsw i32 %22, %101
  %103 = getelementptr inbounds i16, i16* %26, i64 7
  %104 = load i16, i16* %103, align 2
  %105 = zext i16 %104 to i32
  %106 = mul nuw nsw i32 %24, %105
  %107 = add nuw nsw i32 %102, 64
  %108 = add nuw nsw i32 %107, %106
  %109 = lshr i32 %108, 7
  %110 = trunc i32 %109 to i16
  %111 = getelementptr inbounds i16, i16* %28, i64 6
  store i16 %110, i16* %111, align 2
  %112 = load i16, i16* %103, align 2
  %113 = zext i16 %112 to i32
  %114 = mul nuw nsw i32 %22, %113
  %115 = getelementptr inbounds i16, i16* %26, i64 8
  %116 = load i16, i16* %115, align 2
  %117 = zext i16 %116 to i32
  %118 = mul nuw nsw i32 %24, %117
  %119 = add nuw nsw i32 %114, 64
  %120 = add nuw nsw i32 %119, %118
  %121 = lshr i32 %120, 7
  %122 = trunc i32 %121 to i16
  %123 = getelementptr inbounds i16, i16* %28, i64 7
  store i16 %122, i16* %123, align 2
  %124 = getelementptr inbounds i16, i16* %115, i64 %20
  %125 = getelementptr inbounds i16, i16* %28, i64 8
  %126 = add nuw nsw i32 %27, 1
  %127 = icmp eq i32 %126, 5
  br i1 %127, label %128, label %25

128:                                              ; preds = %25
  %129 = sext i32 %3 to i64
  %130 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %129, i64 0
  %131 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %129, i64 1
  %132 = load i8, i8* %130, align 2
  %133 = zext i8 %132 to i32
  %134 = load i8, i8* %131, align 1
  %135 = zext i8 %134 to i32
  %136 = insertelement <8 x i32> undef, i32 %133, i32 0
  %137 = shufflevector <8 x i32> %136, <8 x i32> undef, <8 x i32> zeroinitializer
  %138 = insertelement <8 x i32> undef, i32 %135, i32 0
  %139 = shufflevector <8 x i32> %138, <8 x i32> undef, <8 x i32> zeroinitializer
  %140 = getelementptr inbounds [40 x i16], [40 x i16]* %8, i64 0, i64 8
  %141 = bitcast [40 x i16]* %8 to <8 x i16>*
  %142 = load <8 x i16>, <8 x i16>* %141, align 16
  %143 = zext <8 x i16> %142 to <8 x i32>
  %144 = mul nuw nsw <8 x i32> %137, %143
  %145 = bitcast i16* %140 to <8 x i16>*
  %146 = load <8 x i16>, <8 x i16>* %145, align 16
  %147 = zext <8 x i16> %146 to <8 x i32>
  %148 = mul nuw nsw <8 x i32> %139, %147
  %149 = add nuw nsw <8 x i32> %144, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %150 = add nuw nsw <8 x i32> %149, %148
  %151 = lshr <8 x i32> %150, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %152 = trunc <8 x i32> %151 to <8 x i16>
  %153 = bitcast [32 x i16]* %9 to <8 x i16>*
  store <8 x i16> %152, <8 x i16>* %153, align 16
  %154 = getelementptr inbounds [40 x i16], [40 x i16]* %8, i64 0, i64 8
  %155 = getelementptr inbounds [32 x i16], [32 x i16]* %9, i64 0, i64 8
  %156 = getelementptr inbounds [40 x i16], [40 x i16]* %8, i64 0, i64 16
  %157 = bitcast i16* %154 to <8 x i16>*
  %158 = load <8 x i16>, <8 x i16>* %157, align 16
  %159 = zext <8 x i16> %158 to <8 x i32>
  %160 = mul nuw nsw <8 x i32> %137, %159
  %161 = bitcast i16* %156 to <8 x i16>*
  %162 = load <8 x i16>, <8 x i16>* %161, align 16
  %163 = zext <8 x i16> %162 to <8 x i32>
  %164 = mul nuw nsw <8 x i32> %139, %163
  %165 = add nuw nsw <8 x i32> %160, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %166 = add nuw nsw <8 x i32> %165, %164
  %167 = lshr <8 x i32> %166, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %168 = trunc <8 x i32> %167 to <8 x i16>
  %169 = bitcast i16* %155 to <8 x i16>*
  store <8 x i16> %168, <8 x i16>* %169, align 16
  %170 = getelementptr inbounds [40 x i16], [40 x i16]* %8, i64 0, i64 16
  %171 = getelementptr inbounds [32 x i16], [32 x i16]* %9, i64 0, i64 16
  %172 = getelementptr inbounds [40 x i16], [40 x i16]* %8, i64 0, i64 24
  %173 = bitcast i16* %170 to <8 x i16>*
  %174 = load <8 x i16>, <8 x i16>* %173, align 16
  %175 = zext <8 x i16> %174 to <8 x i32>
  %176 = mul nuw nsw <8 x i32> %137, %175
  %177 = bitcast i16* %172 to <8 x i16>*
  %178 = load <8 x i16>, <8 x i16>* %177, align 16
  %179 = zext <8 x i16> %178 to <8 x i32>
  %180 = mul nuw nsw <8 x i32> %139, %179
  %181 = add nuw nsw <8 x i32> %176, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %182 = add nuw nsw <8 x i32> %181, %180
  %183 = lshr <8 x i32> %182, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %184 = trunc <8 x i32> %183 to <8 x i16>
  %185 = bitcast i16* %171 to <8 x i16>*
  store <8 x i16> %184, <8 x i16>* %185, align 16
  %186 = getelementptr inbounds [40 x i16], [40 x i16]* %8, i64 0, i64 24
  %187 = getelementptr inbounds [32 x i16], [32 x i16]* %9, i64 0, i64 24
  %188 = getelementptr inbounds [40 x i16], [40 x i16]* %8, i64 0, i64 32
  %189 = bitcast i16* %186 to <8 x i16>*
  %190 = load <8 x i16>, <8 x i16>* %189, align 16
  %191 = zext <8 x i16> %190 to <8 x i32>
  %192 = mul nuw nsw <8 x i32> %137, %191
  %193 = bitcast i16* %188 to <8 x i16>*
  %194 = load <8 x i16>, <8 x i16>* %193, align 16
  %195 = zext <8 x i16> %194 to <8 x i32>
  %196 = mul nuw nsw <8 x i32> %139, %195
  %197 = add nuw nsw <8 x i32> %192, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %198 = add nuw nsw <8 x i32> %197, %196
  %199 = lshr <8 x i32> %198, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %200 = trunc <8 x i32> %199 to <8 x i16>
  %201 = bitcast i16* %187 to <8 x i16>*
  store <8 x i16> %200, <8 x i16>* %201, align 16
  %202 = ptrtoint [32 x i16]* %9 to i64
  %203 = lshr exact i64 %202, 1
  %204 = inttoptr i64 %203 to i8*
  %205 = call i32 @vpx_highbd_8_variance8x4_c(i8* nonnull %204, i32 8, i8* %4, i32 %5, i32* %6)
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %11) #4
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %10) #4
  ret i32 %205
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_highbd_10_sub_pixel_variance8x4_c(i8*, i32, i32, i32, i8*, i32, i32* nocapture) local_unnamed_addr #2 {
  %8 = alloca [40 x i16], align 16
  %9 = alloca [32 x i16], align 16
  %10 = bitcast [40 x i16]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %10) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %10, i8 -86, i64 80, i1 false)
  %11 = bitcast [32 x i16]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %11) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %11, i8 -86, i64 64, i1 false)
  %12 = getelementptr inbounds [40 x i16], [40 x i16]* %8, i64 0, i64 0
  %13 = sext i32 %2 to i64
  %14 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %13, i64 0
  %15 = ptrtoint i8* %0 to i64
  %16 = shl i64 %15, 1
  %17 = inttoptr i64 %16 to i16*
  %18 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %13, i64 1
  %19 = add i32 %1, -8
  %20 = zext i32 %19 to i64
  %21 = load i8, i8* %14, align 2
  %22 = zext i8 %21 to i32
  %23 = load i8, i8* %18, align 1
  %24 = zext i8 %23 to i32
  br label %25

25:                                               ; preds = %25, %7
  %26 = phi i16* [ %17, %7 ], [ %124, %25 ]
  %27 = phi i32 [ 0, %7 ], [ %126, %25 ]
  %28 = phi i16* [ %12, %7 ], [ %125, %25 ]
  %29 = load i16, i16* %26, align 2
  %30 = zext i16 %29 to i32
  %31 = mul nuw nsw i32 %22, %30
  %32 = getelementptr inbounds i16, i16* %26, i64 1
  %33 = load i16, i16* %32, align 2
  %34 = zext i16 %33 to i32
  %35 = mul nuw nsw i32 %24, %34
  %36 = add nuw nsw i32 %31, 64
  %37 = add nuw nsw i32 %36, %35
  %38 = lshr i32 %37, 7
  %39 = trunc i32 %38 to i16
  store i16 %39, i16* %28, align 2
  %40 = load i16, i16* %32, align 2
  %41 = zext i16 %40 to i32
  %42 = mul nuw nsw i32 %22, %41
  %43 = getelementptr inbounds i16, i16* %26, i64 2
  %44 = load i16, i16* %43, align 2
  %45 = zext i16 %44 to i32
  %46 = mul nuw nsw i32 %24, %45
  %47 = add nuw nsw i32 %42, 64
  %48 = add nuw nsw i32 %47, %46
  %49 = lshr i32 %48, 7
  %50 = trunc i32 %49 to i16
  %51 = getelementptr inbounds i16, i16* %28, i64 1
  store i16 %50, i16* %51, align 2
  %52 = load i16, i16* %43, align 2
  %53 = zext i16 %52 to i32
  %54 = mul nuw nsw i32 %22, %53
  %55 = getelementptr inbounds i16, i16* %26, i64 3
  %56 = load i16, i16* %55, align 2
  %57 = zext i16 %56 to i32
  %58 = mul nuw nsw i32 %24, %57
  %59 = add nuw nsw i32 %54, 64
  %60 = add nuw nsw i32 %59, %58
  %61 = lshr i32 %60, 7
  %62 = trunc i32 %61 to i16
  %63 = getelementptr inbounds i16, i16* %28, i64 2
  store i16 %62, i16* %63, align 2
  %64 = load i16, i16* %55, align 2
  %65 = zext i16 %64 to i32
  %66 = mul nuw nsw i32 %22, %65
  %67 = getelementptr inbounds i16, i16* %26, i64 4
  %68 = load i16, i16* %67, align 2
  %69 = zext i16 %68 to i32
  %70 = mul nuw nsw i32 %24, %69
  %71 = add nuw nsw i32 %66, 64
  %72 = add nuw nsw i32 %71, %70
  %73 = lshr i32 %72, 7
  %74 = trunc i32 %73 to i16
  %75 = getelementptr inbounds i16, i16* %28, i64 3
  store i16 %74, i16* %75, align 2
  %76 = load i16, i16* %67, align 2
  %77 = zext i16 %76 to i32
  %78 = mul nuw nsw i32 %22, %77
  %79 = getelementptr inbounds i16, i16* %26, i64 5
  %80 = load i16, i16* %79, align 2
  %81 = zext i16 %80 to i32
  %82 = mul nuw nsw i32 %24, %81
  %83 = add nuw nsw i32 %78, 64
  %84 = add nuw nsw i32 %83, %82
  %85 = lshr i32 %84, 7
  %86 = trunc i32 %85 to i16
  %87 = getelementptr inbounds i16, i16* %28, i64 4
  store i16 %86, i16* %87, align 2
  %88 = load i16, i16* %79, align 2
  %89 = zext i16 %88 to i32
  %90 = mul nuw nsw i32 %22, %89
  %91 = getelementptr inbounds i16, i16* %26, i64 6
  %92 = load i16, i16* %91, align 2
  %93 = zext i16 %92 to i32
  %94 = mul nuw nsw i32 %24, %93
  %95 = add nuw nsw i32 %90, 64
  %96 = add nuw nsw i32 %95, %94
  %97 = lshr i32 %96, 7
  %98 = trunc i32 %97 to i16
  %99 = getelementptr inbounds i16, i16* %28, i64 5
  store i16 %98, i16* %99, align 2
  %100 = load i16, i16* %91, align 2
  %101 = zext i16 %100 to i32
  %102 = mul nuw nsw i32 %22, %101
  %103 = getelementptr inbounds i16, i16* %26, i64 7
  %104 = load i16, i16* %103, align 2
  %105 = zext i16 %104 to i32
  %106 = mul nuw nsw i32 %24, %105
  %107 = add nuw nsw i32 %102, 64
  %108 = add nuw nsw i32 %107, %106
  %109 = lshr i32 %108, 7
  %110 = trunc i32 %109 to i16
  %111 = getelementptr inbounds i16, i16* %28, i64 6
  store i16 %110, i16* %111, align 2
  %112 = load i16, i16* %103, align 2
  %113 = zext i16 %112 to i32
  %114 = mul nuw nsw i32 %22, %113
  %115 = getelementptr inbounds i16, i16* %26, i64 8
  %116 = load i16, i16* %115, align 2
  %117 = zext i16 %116 to i32
  %118 = mul nuw nsw i32 %24, %117
  %119 = add nuw nsw i32 %114, 64
  %120 = add nuw nsw i32 %119, %118
  %121 = lshr i32 %120, 7
  %122 = trunc i32 %121 to i16
  %123 = getelementptr inbounds i16, i16* %28, i64 7
  store i16 %122, i16* %123, align 2
  %124 = getelementptr inbounds i16, i16* %115, i64 %20
  %125 = getelementptr inbounds i16, i16* %28, i64 8
  %126 = add nuw nsw i32 %27, 1
  %127 = icmp eq i32 %126, 5
  br i1 %127, label %128, label %25

128:                                              ; preds = %25
  %129 = sext i32 %3 to i64
  %130 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %129, i64 0
  %131 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %129, i64 1
  %132 = load i8, i8* %130, align 2
  %133 = zext i8 %132 to i32
  %134 = load i8, i8* %131, align 1
  %135 = zext i8 %134 to i32
  %136 = insertelement <8 x i32> undef, i32 %133, i32 0
  %137 = shufflevector <8 x i32> %136, <8 x i32> undef, <8 x i32> zeroinitializer
  %138 = insertelement <8 x i32> undef, i32 %135, i32 0
  %139 = shufflevector <8 x i32> %138, <8 x i32> undef, <8 x i32> zeroinitializer
  %140 = getelementptr inbounds [40 x i16], [40 x i16]* %8, i64 0, i64 8
  %141 = bitcast [40 x i16]* %8 to <8 x i16>*
  %142 = load <8 x i16>, <8 x i16>* %141, align 16
  %143 = zext <8 x i16> %142 to <8 x i32>
  %144 = mul nuw nsw <8 x i32> %137, %143
  %145 = bitcast i16* %140 to <8 x i16>*
  %146 = load <8 x i16>, <8 x i16>* %145, align 16
  %147 = zext <8 x i16> %146 to <8 x i32>
  %148 = mul nuw nsw <8 x i32> %139, %147
  %149 = add nuw nsw <8 x i32> %144, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %150 = add nuw nsw <8 x i32> %149, %148
  %151 = lshr <8 x i32> %150, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %152 = trunc <8 x i32> %151 to <8 x i16>
  %153 = bitcast [32 x i16]* %9 to <8 x i16>*
  store <8 x i16> %152, <8 x i16>* %153, align 16
  %154 = getelementptr inbounds [40 x i16], [40 x i16]* %8, i64 0, i64 8
  %155 = getelementptr inbounds [32 x i16], [32 x i16]* %9, i64 0, i64 8
  %156 = getelementptr inbounds [40 x i16], [40 x i16]* %8, i64 0, i64 16
  %157 = bitcast i16* %154 to <8 x i16>*
  %158 = load <8 x i16>, <8 x i16>* %157, align 16
  %159 = zext <8 x i16> %158 to <8 x i32>
  %160 = mul nuw nsw <8 x i32> %137, %159
  %161 = bitcast i16* %156 to <8 x i16>*
  %162 = load <8 x i16>, <8 x i16>* %161, align 16
  %163 = zext <8 x i16> %162 to <8 x i32>
  %164 = mul nuw nsw <8 x i32> %139, %163
  %165 = add nuw nsw <8 x i32> %160, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %166 = add nuw nsw <8 x i32> %165, %164
  %167 = lshr <8 x i32> %166, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %168 = trunc <8 x i32> %167 to <8 x i16>
  %169 = bitcast i16* %155 to <8 x i16>*
  store <8 x i16> %168, <8 x i16>* %169, align 16
  %170 = getelementptr inbounds [40 x i16], [40 x i16]* %8, i64 0, i64 16
  %171 = getelementptr inbounds [32 x i16], [32 x i16]* %9, i64 0, i64 16
  %172 = getelementptr inbounds [40 x i16], [40 x i16]* %8, i64 0, i64 24
  %173 = bitcast i16* %170 to <8 x i16>*
  %174 = load <8 x i16>, <8 x i16>* %173, align 16
  %175 = zext <8 x i16> %174 to <8 x i32>
  %176 = mul nuw nsw <8 x i32> %137, %175
  %177 = bitcast i16* %172 to <8 x i16>*
  %178 = load <8 x i16>, <8 x i16>* %177, align 16
  %179 = zext <8 x i16> %178 to <8 x i32>
  %180 = mul nuw nsw <8 x i32> %139, %179
  %181 = add nuw nsw <8 x i32> %176, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %182 = add nuw nsw <8 x i32> %181, %180
  %183 = lshr <8 x i32> %182, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %184 = trunc <8 x i32> %183 to <8 x i16>
  %185 = bitcast i16* %171 to <8 x i16>*
  store <8 x i16> %184, <8 x i16>* %185, align 16
  %186 = getelementptr inbounds [40 x i16], [40 x i16]* %8, i64 0, i64 24
  %187 = getelementptr inbounds [32 x i16], [32 x i16]* %9, i64 0, i64 24
  %188 = getelementptr inbounds [40 x i16], [40 x i16]* %8, i64 0, i64 32
  %189 = bitcast i16* %186 to <8 x i16>*
  %190 = load <8 x i16>, <8 x i16>* %189, align 16
  %191 = zext <8 x i16> %190 to <8 x i32>
  %192 = mul nuw nsw <8 x i32> %137, %191
  %193 = bitcast i16* %188 to <8 x i16>*
  %194 = load <8 x i16>, <8 x i16>* %193, align 16
  %195 = zext <8 x i16> %194 to <8 x i32>
  %196 = mul nuw nsw <8 x i32> %139, %195
  %197 = add nuw nsw <8 x i32> %192, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %198 = add nuw nsw <8 x i32> %197, %196
  %199 = lshr <8 x i32> %198, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %200 = trunc <8 x i32> %199 to <8 x i16>
  %201 = bitcast i16* %187 to <8 x i16>*
  store <8 x i16> %200, <8 x i16>* %201, align 16
  %202 = ptrtoint [32 x i16]* %9 to i64
  %203 = lshr exact i64 %202, 1
  %204 = inttoptr i64 %203 to i8*
  %205 = call i32 @vpx_highbd_10_variance8x4_c(i8* nonnull %204, i32 8, i8* %4, i32 %5, i32* %6)
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %11) #4
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %10) #4
  ret i32 %205
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_highbd_12_sub_pixel_variance8x4_c(i8*, i32, i32, i32, i8*, i32, i32* nocapture) local_unnamed_addr #2 {
  %8 = alloca [40 x i16], align 16
  %9 = alloca [32 x i16], align 16
  %10 = bitcast [40 x i16]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %10) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %10, i8 -86, i64 80, i1 false)
  %11 = bitcast [32 x i16]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %11) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %11, i8 -86, i64 64, i1 false)
  %12 = getelementptr inbounds [40 x i16], [40 x i16]* %8, i64 0, i64 0
  %13 = sext i32 %2 to i64
  %14 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %13, i64 0
  %15 = ptrtoint i8* %0 to i64
  %16 = shl i64 %15, 1
  %17 = inttoptr i64 %16 to i16*
  %18 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %13, i64 1
  %19 = add i32 %1, -8
  %20 = zext i32 %19 to i64
  %21 = load i8, i8* %14, align 2
  %22 = zext i8 %21 to i32
  %23 = load i8, i8* %18, align 1
  %24 = zext i8 %23 to i32
  br label %25

25:                                               ; preds = %25, %7
  %26 = phi i16* [ %17, %7 ], [ %124, %25 ]
  %27 = phi i32 [ 0, %7 ], [ %126, %25 ]
  %28 = phi i16* [ %12, %7 ], [ %125, %25 ]
  %29 = load i16, i16* %26, align 2
  %30 = zext i16 %29 to i32
  %31 = mul nuw nsw i32 %22, %30
  %32 = getelementptr inbounds i16, i16* %26, i64 1
  %33 = load i16, i16* %32, align 2
  %34 = zext i16 %33 to i32
  %35 = mul nuw nsw i32 %24, %34
  %36 = add nuw nsw i32 %31, 64
  %37 = add nuw nsw i32 %36, %35
  %38 = lshr i32 %37, 7
  %39 = trunc i32 %38 to i16
  store i16 %39, i16* %28, align 2
  %40 = load i16, i16* %32, align 2
  %41 = zext i16 %40 to i32
  %42 = mul nuw nsw i32 %22, %41
  %43 = getelementptr inbounds i16, i16* %26, i64 2
  %44 = load i16, i16* %43, align 2
  %45 = zext i16 %44 to i32
  %46 = mul nuw nsw i32 %24, %45
  %47 = add nuw nsw i32 %42, 64
  %48 = add nuw nsw i32 %47, %46
  %49 = lshr i32 %48, 7
  %50 = trunc i32 %49 to i16
  %51 = getelementptr inbounds i16, i16* %28, i64 1
  store i16 %50, i16* %51, align 2
  %52 = load i16, i16* %43, align 2
  %53 = zext i16 %52 to i32
  %54 = mul nuw nsw i32 %22, %53
  %55 = getelementptr inbounds i16, i16* %26, i64 3
  %56 = load i16, i16* %55, align 2
  %57 = zext i16 %56 to i32
  %58 = mul nuw nsw i32 %24, %57
  %59 = add nuw nsw i32 %54, 64
  %60 = add nuw nsw i32 %59, %58
  %61 = lshr i32 %60, 7
  %62 = trunc i32 %61 to i16
  %63 = getelementptr inbounds i16, i16* %28, i64 2
  store i16 %62, i16* %63, align 2
  %64 = load i16, i16* %55, align 2
  %65 = zext i16 %64 to i32
  %66 = mul nuw nsw i32 %22, %65
  %67 = getelementptr inbounds i16, i16* %26, i64 4
  %68 = load i16, i16* %67, align 2
  %69 = zext i16 %68 to i32
  %70 = mul nuw nsw i32 %24, %69
  %71 = add nuw nsw i32 %66, 64
  %72 = add nuw nsw i32 %71, %70
  %73 = lshr i32 %72, 7
  %74 = trunc i32 %73 to i16
  %75 = getelementptr inbounds i16, i16* %28, i64 3
  store i16 %74, i16* %75, align 2
  %76 = load i16, i16* %67, align 2
  %77 = zext i16 %76 to i32
  %78 = mul nuw nsw i32 %22, %77
  %79 = getelementptr inbounds i16, i16* %26, i64 5
  %80 = load i16, i16* %79, align 2
  %81 = zext i16 %80 to i32
  %82 = mul nuw nsw i32 %24, %81
  %83 = add nuw nsw i32 %78, 64
  %84 = add nuw nsw i32 %83, %82
  %85 = lshr i32 %84, 7
  %86 = trunc i32 %85 to i16
  %87 = getelementptr inbounds i16, i16* %28, i64 4
  store i16 %86, i16* %87, align 2
  %88 = load i16, i16* %79, align 2
  %89 = zext i16 %88 to i32
  %90 = mul nuw nsw i32 %22, %89
  %91 = getelementptr inbounds i16, i16* %26, i64 6
  %92 = load i16, i16* %91, align 2
  %93 = zext i16 %92 to i32
  %94 = mul nuw nsw i32 %24, %93
  %95 = add nuw nsw i32 %90, 64
  %96 = add nuw nsw i32 %95, %94
  %97 = lshr i32 %96, 7
  %98 = trunc i32 %97 to i16
  %99 = getelementptr inbounds i16, i16* %28, i64 5
  store i16 %98, i16* %99, align 2
  %100 = load i16, i16* %91, align 2
  %101 = zext i16 %100 to i32
  %102 = mul nuw nsw i32 %22, %101
  %103 = getelementptr inbounds i16, i16* %26, i64 7
  %104 = load i16, i16* %103, align 2
  %105 = zext i16 %104 to i32
  %106 = mul nuw nsw i32 %24, %105
  %107 = add nuw nsw i32 %102, 64
  %108 = add nuw nsw i32 %107, %106
  %109 = lshr i32 %108, 7
  %110 = trunc i32 %109 to i16
  %111 = getelementptr inbounds i16, i16* %28, i64 6
  store i16 %110, i16* %111, align 2
  %112 = load i16, i16* %103, align 2
  %113 = zext i16 %112 to i32
  %114 = mul nuw nsw i32 %22, %113
  %115 = getelementptr inbounds i16, i16* %26, i64 8
  %116 = load i16, i16* %115, align 2
  %117 = zext i16 %116 to i32
  %118 = mul nuw nsw i32 %24, %117
  %119 = add nuw nsw i32 %114, 64
  %120 = add nuw nsw i32 %119, %118
  %121 = lshr i32 %120, 7
  %122 = trunc i32 %121 to i16
  %123 = getelementptr inbounds i16, i16* %28, i64 7
  store i16 %122, i16* %123, align 2
  %124 = getelementptr inbounds i16, i16* %115, i64 %20
  %125 = getelementptr inbounds i16, i16* %28, i64 8
  %126 = add nuw nsw i32 %27, 1
  %127 = icmp eq i32 %126, 5
  br i1 %127, label %128, label %25

128:                                              ; preds = %25
  %129 = sext i32 %3 to i64
  %130 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %129, i64 0
  %131 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %129, i64 1
  %132 = load i8, i8* %130, align 2
  %133 = zext i8 %132 to i32
  %134 = load i8, i8* %131, align 1
  %135 = zext i8 %134 to i32
  %136 = insertelement <8 x i32> undef, i32 %133, i32 0
  %137 = shufflevector <8 x i32> %136, <8 x i32> undef, <8 x i32> zeroinitializer
  %138 = insertelement <8 x i32> undef, i32 %135, i32 0
  %139 = shufflevector <8 x i32> %138, <8 x i32> undef, <8 x i32> zeroinitializer
  %140 = getelementptr inbounds [40 x i16], [40 x i16]* %8, i64 0, i64 8
  %141 = bitcast [40 x i16]* %8 to <8 x i16>*
  %142 = load <8 x i16>, <8 x i16>* %141, align 16
  %143 = zext <8 x i16> %142 to <8 x i32>
  %144 = mul nuw nsw <8 x i32> %137, %143
  %145 = bitcast i16* %140 to <8 x i16>*
  %146 = load <8 x i16>, <8 x i16>* %145, align 16
  %147 = zext <8 x i16> %146 to <8 x i32>
  %148 = mul nuw nsw <8 x i32> %139, %147
  %149 = add nuw nsw <8 x i32> %144, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %150 = add nuw nsw <8 x i32> %149, %148
  %151 = lshr <8 x i32> %150, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %152 = trunc <8 x i32> %151 to <8 x i16>
  %153 = bitcast [32 x i16]* %9 to <8 x i16>*
  store <8 x i16> %152, <8 x i16>* %153, align 16
  %154 = getelementptr inbounds [40 x i16], [40 x i16]* %8, i64 0, i64 8
  %155 = getelementptr inbounds [32 x i16], [32 x i16]* %9, i64 0, i64 8
  %156 = getelementptr inbounds [40 x i16], [40 x i16]* %8, i64 0, i64 16
  %157 = bitcast i16* %154 to <8 x i16>*
  %158 = load <8 x i16>, <8 x i16>* %157, align 16
  %159 = zext <8 x i16> %158 to <8 x i32>
  %160 = mul nuw nsw <8 x i32> %137, %159
  %161 = bitcast i16* %156 to <8 x i16>*
  %162 = load <8 x i16>, <8 x i16>* %161, align 16
  %163 = zext <8 x i16> %162 to <8 x i32>
  %164 = mul nuw nsw <8 x i32> %139, %163
  %165 = add nuw nsw <8 x i32> %160, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %166 = add nuw nsw <8 x i32> %165, %164
  %167 = lshr <8 x i32> %166, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %168 = trunc <8 x i32> %167 to <8 x i16>
  %169 = bitcast i16* %155 to <8 x i16>*
  store <8 x i16> %168, <8 x i16>* %169, align 16
  %170 = getelementptr inbounds [40 x i16], [40 x i16]* %8, i64 0, i64 16
  %171 = getelementptr inbounds [32 x i16], [32 x i16]* %9, i64 0, i64 16
  %172 = getelementptr inbounds [40 x i16], [40 x i16]* %8, i64 0, i64 24
  %173 = bitcast i16* %170 to <8 x i16>*
  %174 = load <8 x i16>, <8 x i16>* %173, align 16
  %175 = zext <8 x i16> %174 to <8 x i32>
  %176 = mul nuw nsw <8 x i32> %137, %175
  %177 = bitcast i16* %172 to <8 x i16>*
  %178 = load <8 x i16>, <8 x i16>* %177, align 16
  %179 = zext <8 x i16> %178 to <8 x i32>
  %180 = mul nuw nsw <8 x i32> %139, %179
  %181 = add nuw nsw <8 x i32> %176, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %182 = add nuw nsw <8 x i32> %181, %180
  %183 = lshr <8 x i32> %182, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %184 = trunc <8 x i32> %183 to <8 x i16>
  %185 = bitcast i16* %171 to <8 x i16>*
  store <8 x i16> %184, <8 x i16>* %185, align 16
  %186 = getelementptr inbounds [40 x i16], [40 x i16]* %8, i64 0, i64 24
  %187 = getelementptr inbounds [32 x i16], [32 x i16]* %9, i64 0, i64 24
  %188 = getelementptr inbounds [40 x i16], [40 x i16]* %8, i64 0, i64 32
  %189 = bitcast i16* %186 to <8 x i16>*
  %190 = load <8 x i16>, <8 x i16>* %189, align 16
  %191 = zext <8 x i16> %190 to <8 x i32>
  %192 = mul nuw nsw <8 x i32> %137, %191
  %193 = bitcast i16* %188 to <8 x i16>*
  %194 = load <8 x i16>, <8 x i16>* %193, align 16
  %195 = zext <8 x i16> %194 to <8 x i32>
  %196 = mul nuw nsw <8 x i32> %139, %195
  %197 = add nuw nsw <8 x i32> %192, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %198 = add nuw nsw <8 x i32> %197, %196
  %199 = lshr <8 x i32> %198, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %200 = trunc <8 x i32> %199 to <8 x i16>
  %201 = bitcast i16* %187 to <8 x i16>*
  store <8 x i16> %200, <8 x i16>* %201, align 16
  %202 = ptrtoint [32 x i16]* %9 to i64
  %203 = lshr exact i64 %202, 1
  %204 = inttoptr i64 %203 to i8*
  %205 = call i32 @vpx_highbd_12_variance8x4_c(i8* nonnull %204, i32 8, i8* %4, i32 %5, i32* %6)
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %11) #4
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %10) #4
  ret i32 %205
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_highbd_8_sub_pixel_avg_variance8x4_c(i8*, i32, i32, i32, i8*, i32, i32* nocapture, i8*) local_unnamed_addr #2 {
  %9 = alloca [40 x i16], align 16
  %10 = alloca [32 x i16], align 16
  %11 = alloca [32 x i16], align 16
  %12 = bitcast [40 x i16]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %12) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %12, i8 -86, i64 80, i1 false)
  %13 = bitcast [32 x i16]* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %13) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %13, i8 -86, i64 64, i1 false)
  %14 = bitcast [32 x i16]* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %14) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %14, i8 -86, i64 64, i1 false)
  %15 = getelementptr inbounds [40 x i16], [40 x i16]* %9, i64 0, i64 0
  %16 = sext i32 %2 to i64
  %17 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %16, i64 0
  %18 = ptrtoint i8* %0 to i64
  %19 = shl i64 %18, 1
  %20 = inttoptr i64 %19 to i16*
  %21 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %16, i64 1
  %22 = add i32 %1, -8
  %23 = zext i32 %22 to i64
  %24 = load i8, i8* %17, align 2
  %25 = zext i8 %24 to i32
  %26 = load i8, i8* %21, align 1
  %27 = zext i8 %26 to i32
  br label %28

28:                                               ; preds = %28, %8
  %29 = phi i16* [ %20, %8 ], [ %127, %28 ]
  %30 = phi i32 [ 0, %8 ], [ %129, %28 ]
  %31 = phi i16* [ %15, %8 ], [ %128, %28 ]
  %32 = load i16, i16* %29, align 2
  %33 = zext i16 %32 to i32
  %34 = mul nuw nsw i32 %25, %33
  %35 = getelementptr inbounds i16, i16* %29, i64 1
  %36 = load i16, i16* %35, align 2
  %37 = zext i16 %36 to i32
  %38 = mul nuw nsw i32 %27, %37
  %39 = add nuw nsw i32 %34, 64
  %40 = add nuw nsw i32 %39, %38
  %41 = lshr i32 %40, 7
  %42 = trunc i32 %41 to i16
  store i16 %42, i16* %31, align 2
  %43 = load i16, i16* %35, align 2
  %44 = zext i16 %43 to i32
  %45 = mul nuw nsw i32 %25, %44
  %46 = getelementptr inbounds i16, i16* %29, i64 2
  %47 = load i16, i16* %46, align 2
  %48 = zext i16 %47 to i32
  %49 = mul nuw nsw i32 %27, %48
  %50 = add nuw nsw i32 %45, 64
  %51 = add nuw nsw i32 %50, %49
  %52 = lshr i32 %51, 7
  %53 = trunc i32 %52 to i16
  %54 = getelementptr inbounds i16, i16* %31, i64 1
  store i16 %53, i16* %54, align 2
  %55 = load i16, i16* %46, align 2
  %56 = zext i16 %55 to i32
  %57 = mul nuw nsw i32 %25, %56
  %58 = getelementptr inbounds i16, i16* %29, i64 3
  %59 = load i16, i16* %58, align 2
  %60 = zext i16 %59 to i32
  %61 = mul nuw nsw i32 %27, %60
  %62 = add nuw nsw i32 %57, 64
  %63 = add nuw nsw i32 %62, %61
  %64 = lshr i32 %63, 7
  %65 = trunc i32 %64 to i16
  %66 = getelementptr inbounds i16, i16* %31, i64 2
  store i16 %65, i16* %66, align 2
  %67 = load i16, i16* %58, align 2
  %68 = zext i16 %67 to i32
  %69 = mul nuw nsw i32 %25, %68
  %70 = getelementptr inbounds i16, i16* %29, i64 4
  %71 = load i16, i16* %70, align 2
  %72 = zext i16 %71 to i32
  %73 = mul nuw nsw i32 %27, %72
  %74 = add nuw nsw i32 %69, 64
  %75 = add nuw nsw i32 %74, %73
  %76 = lshr i32 %75, 7
  %77 = trunc i32 %76 to i16
  %78 = getelementptr inbounds i16, i16* %31, i64 3
  store i16 %77, i16* %78, align 2
  %79 = load i16, i16* %70, align 2
  %80 = zext i16 %79 to i32
  %81 = mul nuw nsw i32 %25, %80
  %82 = getelementptr inbounds i16, i16* %29, i64 5
  %83 = load i16, i16* %82, align 2
  %84 = zext i16 %83 to i32
  %85 = mul nuw nsw i32 %27, %84
  %86 = add nuw nsw i32 %81, 64
  %87 = add nuw nsw i32 %86, %85
  %88 = lshr i32 %87, 7
  %89 = trunc i32 %88 to i16
  %90 = getelementptr inbounds i16, i16* %31, i64 4
  store i16 %89, i16* %90, align 2
  %91 = load i16, i16* %82, align 2
  %92 = zext i16 %91 to i32
  %93 = mul nuw nsw i32 %25, %92
  %94 = getelementptr inbounds i16, i16* %29, i64 6
  %95 = load i16, i16* %94, align 2
  %96 = zext i16 %95 to i32
  %97 = mul nuw nsw i32 %27, %96
  %98 = add nuw nsw i32 %93, 64
  %99 = add nuw nsw i32 %98, %97
  %100 = lshr i32 %99, 7
  %101 = trunc i32 %100 to i16
  %102 = getelementptr inbounds i16, i16* %31, i64 5
  store i16 %101, i16* %102, align 2
  %103 = load i16, i16* %94, align 2
  %104 = zext i16 %103 to i32
  %105 = mul nuw nsw i32 %25, %104
  %106 = getelementptr inbounds i16, i16* %29, i64 7
  %107 = load i16, i16* %106, align 2
  %108 = zext i16 %107 to i32
  %109 = mul nuw nsw i32 %27, %108
  %110 = add nuw nsw i32 %105, 64
  %111 = add nuw nsw i32 %110, %109
  %112 = lshr i32 %111, 7
  %113 = trunc i32 %112 to i16
  %114 = getelementptr inbounds i16, i16* %31, i64 6
  store i16 %113, i16* %114, align 2
  %115 = load i16, i16* %106, align 2
  %116 = zext i16 %115 to i32
  %117 = mul nuw nsw i32 %25, %116
  %118 = getelementptr inbounds i16, i16* %29, i64 8
  %119 = load i16, i16* %118, align 2
  %120 = zext i16 %119 to i32
  %121 = mul nuw nsw i32 %27, %120
  %122 = add nuw nsw i32 %117, 64
  %123 = add nuw nsw i32 %122, %121
  %124 = lshr i32 %123, 7
  %125 = trunc i32 %124 to i16
  %126 = getelementptr inbounds i16, i16* %31, i64 7
  store i16 %125, i16* %126, align 2
  %127 = getelementptr inbounds i16, i16* %118, i64 %23
  %128 = getelementptr inbounds i16, i16* %31, i64 8
  %129 = add nuw nsw i32 %30, 1
  %130 = icmp eq i32 %129, 5
  br i1 %130, label %131, label %28

131:                                              ; preds = %28
  %132 = sext i32 %3 to i64
  %133 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %132, i64 0
  %134 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %132, i64 1
  %135 = load i8, i8* %133, align 2
  %136 = zext i8 %135 to i32
  %137 = load i8, i8* %134, align 1
  %138 = zext i8 %137 to i32
  %139 = insertelement <8 x i32> undef, i32 %136, i32 0
  %140 = shufflevector <8 x i32> %139, <8 x i32> undef, <8 x i32> zeroinitializer
  %141 = insertelement <8 x i32> undef, i32 %138, i32 0
  %142 = shufflevector <8 x i32> %141, <8 x i32> undef, <8 x i32> zeroinitializer
  %143 = getelementptr inbounds [32 x i16], [32 x i16]* %10, i64 0, i64 0
  %144 = getelementptr inbounds [40 x i16], [40 x i16]* %9, i64 0, i64 8
  %145 = bitcast [40 x i16]* %9 to <8 x i16>*
  %146 = load <8 x i16>, <8 x i16>* %145, align 16
  %147 = zext <8 x i16> %146 to <8 x i32>
  %148 = mul nuw nsw <8 x i32> %140, %147
  %149 = bitcast i16* %144 to <8 x i16>*
  %150 = load <8 x i16>, <8 x i16>* %149, align 16
  %151 = zext <8 x i16> %150 to <8 x i32>
  %152 = mul nuw nsw <8 x i32> %142, %151
  %153 = add nuw nsw <8 x i32> %148, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %154 = add nuw nsw <8 x i32> %153, %152
  %155 = lshr <8 x i32> %154, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %156 = trunc <8 x i32> %155 to <8 x i16>
  %157 = bitcast [32 x i16]* %10 to <8 x i16>*
  store <8 x i16> %156, <8 x i16>* %157, align 16
  %158 = getelementptr inbounds [40 x i16], [40 x i16]* %9, i64 0, i64 8
  %159 = getelementptr inbounds [32 x i16], [32 x i16]* %10, i64 0, i64 8
  %160 = getelementptr inbounds [40 x i16], [40 x i16]* %9, i64 0, i64 16
  %161 = bitcast i16* %158 to <8 x i16>*
  %162 = load <8 x i16>, <8 x i16>* %161, align 16
  %163 = zext <8 x i16> %162 to <8 x i32>
  %164 = mul nuw nsw <8 x i32> %140, %163
  %165 = bitcast i16* %160 to <8 x i16>*
  %166 = load <8 x i16>, <8 x i16>* %165, align 16
  %167 = zext <8 x i16> %166 to <8 x i32>
  %168 = mul nuw nsw <8 x i32> %142, %167
  %169 = add nuw nsw <8 x i32> %164, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %170 = add nuw nsw <8 x i32> %169, %168
  %171 = lshr <8 x i32> %170, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %172 = trunc <8 x i32> %171 to <8 x i16>
  %173 = bitcast i16* %159 to <8 x i16>*
  store <8 x i16> %172, <8 x i16>* %173, align 16
  %174 = getelementptr inbounds [40 x i16], [40 x i16]* %9, i64 0, i64 16
  %175 = getelementptr inbounds [32 x i16], [32 x i16]* %10, i64 0, i64 16
  %176 = getelementptr inbounds [40 x i16], [40 x i16]* %9, i64 0, i64 24
  %177 = bitcast i16* %174 to <8 x i16>*
  %178 = load <8 x i16>, <8 x i16>* %177, align 16
  %179 = zext <8 x i16> %178 to <8 x i32>
  %180 = mul nuw nsw <8 x i32> %140, %179
  %181 = bitcast i16* %176 to <8 x i16>*
  %182 = load <8 x i16>, <8 x i16>* %181, align 16
  %183 = zext <8 x i16> %182 to <8 x i32>
  %184 = mul nuw nsw <8 x i32> %142, %183
  %185 = add nuw nsw <8 x i32> %180, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %186 = add nuw nsw <8 x i32> %185, %184
  %187 = lshr <8 x i32> %186, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %188 = trunc <8 x i32> %187 to <8 x i16>
  %189 = bitcast i16* %175 to <8 x i16>*
  store <8 x i16> %188, <8 x i16>* %189, align 16
  %190 = getelementptr inbounds [40 x i16], [40 x i16]* %9, i64 0, i64 24
  %191 = getelementptr inbounds [32 x i16], [32 x i16]* %10, i64 0, i64 24
  %192 = getelementptr inbounds [40 x i16], [40 x i16]* %9, i64 0, i64 32
  %193 = bitcast i16* %190 to <8 x i16>*
  %194 = load <8 x i16>, <8 x i16>* %193, align 16
  %195 = zext <8 x i16> %194 to <8 x i32>
  %196 = mul nuw nsw <8 x i32> %140, %195
  %197 = bitcast i16* %192 to <8 x i16>*
  %198 = load <8 x i16>, <8 x i16>* %197, align 16
  %199 = zext <8 x i16> %198 to <8 x i32>
  %200 = mul nuw nsw <8 x i32> %142, %199
  %201 = add nuw nsw <8 x i32> %196, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %202 = add nuw nsw <8 x i32> %201, %200
  %203 = lshr <8 x i32> %202, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %204 = trunc <8 x i32> %203 to <8 x i16>
  %205 = bitcast i16* %191 to <8 x i16>*
  store <8 x i16> %204, <8 x i16>* %205, align 16
  %206 = getelementptr inbounds [32 x i16], [32 x i16]* %11, i64 0, i64 0
  %207 = ptrtoint i8* %7 to i64
  %208 = shl i64 %207, 1
  %209 = inttoptr i64 %208 to i16*
  br label %210

210:                                              ; preds = %210, %131
  %211 = phi i16* [ %206, %131 ], [ %300, %210 ]
  %212 = phi i32 [ 0, %131 ], [ %303, %210 ]
  %213 = phi i16* [ %209, %131 ], [ %301, %210 ]
  %214 = phi i16* [ %143, %131 ], [ %302, %210 ]
  %215 = load i16, i16* %213, align 2
  %216 = zext i16 %215 to i32
  %217 = load i16, i16* %214, align 2
  %218 = zext i16 %217 to i32
  %219 = add nuw nsw i32 %216, 1
  %220 = add nuw nsw i32 %219, %218
  %221 = lshr i32 %220, 1
  %222 = trunc i32 %221 to i16
  store i16 %222, i16* %211, align 2
  %223 = getelementptr inbounds i16, i16* %213, i64 1
  %224 = load i16, i16* %223, align 2
  %225 = zext i16 %224 to i32
  %226 = getelementptr inbounds i16, i16* %214, i64 1
  %227 = load i16, i16* %226, align 2
  %228 = zext i16 %227 to i32
  %229 = add nuw nsw i32 %225, 1
  %230 = add nuw nsw i32 %229, %228
  %231 = lshr i32 %230, 1
  %232 = trunc i32 %231 to i16
  %233 = getelementptr inbounds i16, i16* %211, i64 1
  store i16 %232, i16* %233, align 2
  %234 = getelementptr inbounds i16, i16* %213, i64 2
  %235 = load i16, i16* %234, align 2
  %236 = zext i16 %235 to i32
  %237 = getelementptr inbounds i16, i16* %214, i64 2
  %238 = load i16, i16* %237, align 2
  %239 = zext i16 %238 to i32
  %240 = add nuw nsw i32 %236, 1
  %241 = add nuw nsw i32 %240, %239
  %242 = lshr i32 %241, 1
  %243 = trunc i32 %242 to i16
  %244 = getelementptr inbounds i16, i16* %211, i64 2
  store i16 %243, i16* %244, align 2
  %245 = getelementptr inbounds i16, i16* %213, i64 3
  %246 = load i16, i16* %245, align 2
  %247 = zext i16 %246 to i32
  %248 = getelementptr inbounds i16, i16* %214, i64 3
  %249 = load i16, i16* %248, align 2
  %250 = zext i16 %249 to i32
  %251 = add nuw nsw i32 %247, 1
  %252 = add nuw nsw i32 %251, %250
  %253 = lshr i32 %252, 1
  %254 = trunc i32 %253 to i16
  %255 = getelementptr inbounds i16, i16* %211, i64 3
  store i16 %254, i16* %255, align 2
  %256 = getelementptr inbounds i16, i16* %213, i64 4
  %257 = load i16, i16* %256, align 2
  %258 = zext i16 %257 to i32
  %259 = getelementptr inbounds i16, i16* %214, i64 4
  %260 = load i16, i16* %259, align 2
  %261 = zext i16 %260 to i32
  %262 = add nuw nsw i32 %258, 1
  %263 = add nuw nsw i32 %262, %261
  %264 = lshr i32 %263, 1
  %265 = trunc i32 %264 to i16
  %266 = getelementptr inbounds i16, i16* %211, i64 4
  store i16 %265, i16* %266, align 2
  %267 = getelementptr inbounds i16, i16* %213, i64 5
  %268 = load i16, i16* %267, align 2
  %269 = zext i16 %268 to i32
  %270 = getelementptr inbounds i16, i16* %214, i64 5
  %271 = load i16, i16* %270, align 2
  %272 = zext i16 %271 to i32
  %273 = add nuw nsw i32 %269, 1
  %274 = add nuw nsw i32 %273, %272
  %275 = lshr i32 %274, 1
  %276 = trunc i32 %275 to i16
  %277 = getelementptr inbounds i16, i16* %211, i64 5
  store i16 %276, i16* %277, align 2
  %278 = getelementptr inbounds i16, i16* %213, i64 6
  %279 = load i16, i16* %278, align 2
  %280 = zext i16 %279 to i32
  %281 = getelementptr inbounds i16, i16* %214, i64 6
  %282 = load i16, i16* %281, align 2
  %283 = zext i16 %282 to i32
  %284 = add nuw nsw i32 %280, 1
  %285 = add nuw nsw i32 %284, %283
  %286 = lshr i32 %285, 1
  %287 = trunc i32 %286 to i16
  %288 = getelementptr inbounds i16, i16* %211, i64 6
  store i16 %287, i16* %288, align 2
  %289 = getelementptr inbounds i16, i16* %213, i64 7
  %290 = load i16, i16* %289, align 2
  %291 = zext i16 %290 to i32
  %292 = getelementptr inbounds i16, i16* %214, i64 7
  %293 = load i16, i16* %292, align 2
  %294 = zext i16 %293 to i32
  %295 = add nuw nsw i32 %291, 1
  %296 = add nuw nsw i32 %295, %294
  %297 = lshr i32 %296, 1
  %298 = trunc i32 %297 to i16
  %299 = getelementptr inbounds i16, i16* %211, i64 7
  store i16 %298, i16* %299, align 2
  %300 = getelementptr inbounds i16, i16* %211, i64 8
  %301 = getelementptr inbounds i16, i16* %213, i64 8
  %302 = getelementptr inbounds i16, i16* %214, i64 8
  %303 = add nuw nsw i32 %212, 1
  %304 = icmp eq i32 %303, 4
  br i1 %304, label %305, label %210

305:                                              ; preds = %210
  %306 = ptrtoint [32 x i16]* %11 to i64
  %307 = lshr exact i64 %306, 1
  %308 = inttoptr i64 %307 to i8*
  %309 = call i32 @vpx_highbd_8_variance8x4_c(i8* nonnull %308, i32 8, i8* %4, i32 %5, i32* %6)
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %14) #4
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %13) #4
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %12) #4
  ret i32 %309
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_highbd_10_sub_pixel_avg_variance8x4_c(i8*, i32, i32, i32, i8*, i32, i32* nocapture, i8*) local_unnamed_addr #2 {
  %9 = alloca [40 x i16], align 16
  %10 = alloca [32 x i16], align 16
  %11 = alloca [32 x i16], align 16
  %12 = bitcast [40 x i16]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %12) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %12, i8 -86, i64 80, i1 false)
  %13 = bitcast [32 x i16]* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %13) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %13, i8 -86, i64 64, i1 false)
  %14 = bitcast [32 x i16]* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %14) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %14, i8 -86, i64 64, i1 false)
  %15 = getelementptr inbounds [40 x i16], [40 x i16]* %9, i64 0, i64 0
  %16 = sext i32 %2 to i64
  %17 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %16, i64 0
  %18 = ptrtoint i8* %0 to i64
  %19 = shl i64 %18, 1
  %20 = inttoptr i64 %19 to i16*
  %21 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %16, i64 1
  %22 = add i32 %1, -8
  %23 = zext i32 %22 to i64
  %24 = load i8, i8* %17, align 2
  %25 = zext i8 %24 to i32
  %26 = load i8, i8* %21, align 1
  %27 = zext i8 %26 to i32
  br label %28

28:                                               ; preds = %28, %8
  %29 = phi i16* [ %20, %8 ], [ %127, %28 ]
  %30 = phi i32 [ 0, %8 ], [ %129, %28 ]
  %31 = phi i16* [ %15, %8 ], [ %128, %28 ]
  %32 = load i16, i16* %29, align 2
  %33 = zext i16 %32 to i32
  %34 = mul nuw nsw i32 %25, %33
  %35 = getelementptr inbounds i16, i16* %29, i64 1
  %36 = load i16, i16* %35, align 2
  %37 = zext i16 %36 to i32
  %38 = mul nuw nsw i32 %27, %37
  %39 = add nuw nsw i32 %34, 64
  %40 = add nuw nsw i32 %39, %38
  %41 = lshr i32 %40, 7
  %42 = trunc i32 %41 to i16
  store i16 %42, i16* %31, align 2
  %43 = load i16, i16* %35, align 2
  %44 = zext i16 %43 to i32
  %45 = mul nuw nsw i32 %25, %44
  %46 = getelementptr inbounds i16, i16* %29, i64 2
  %47 = load i16, i16* %46, align 2
  %48 = zext i16 %47 to i32
  %49 = mul nuw nsw i32 %27, %48
  %50 = add nuw nsw i32 %45, 64
  %51 = add nuw nsw i32 %50, %49
  %52 = lshr i32 %51, 7
  %53 = trunc i32 %52 to i16
  %54 = getelementptr inbounds i16, i16* %31, i64 1
  store i16 %53, i16* %54, align 2
  %55 = load i16, i16* %46, align 2
  %56 = zext i16 %55 to i32
  %57 = mul nuw nsw i32 %25, %56
  %58 = getelementptr inbounds i16, i16* %29, i64 3
  %59 = load i16, i16* %58, align 2
  %60 = zext i16 %59 to i32
  %61 = mul nuw nsw i32 %27, %60
  %62 = add nuw nsw i32 %57, 64
  %63 = add nuw nsw i32 %62, %61
  %64 = lshr i32 %63, 7
  %65 = trunc i32 %64 to i16
  %66 = getelementptr inbounds i16, i16* %31, i64 2
  store i16 %65, i16* %66, align 2
  %67 = load i16, i16* %58, align 2
  %68 = zext i16 %67 to i32
  %69 = mul nuw nsw i32 %25, %68
  %70 = getelementptr inbounds i16, i16* %29, i64 4
  %71 = load i16, i16* %70, align 2
  %72 = zext i16 %71 to i32
  %73 = mul nuw nsw i32 %27, %72
  %74 = add nuw nsw i32 %69, 64
  %75 = add nuw nsw i32 %74, %73
  %76 = lshr i32 %75, 7
  %77 = trunc i32 %76 to i16
  %78 = getelementptr inbounds i16, i16* %31, i64 3
  store i16 %77, i16* %78, align 2
  %79 = load i16, i16* %70, align 2
  %80 = zext i16 %79 to i32
  %81 = mul nuw nsw i32 %25, %80
  %82 = getelementptr inbounds i16, i16* %29, i64 5
  %83 = load i16, i16* %82, align 2
  %84 = zext i16 %83 to i32
  %85 = mul nuw nsw i32 %27, %84
  %86 = add nuw nsw i32 %81, 64
  %87 = add nuw nsw i32 %86, %85
  %88 = lshr i32 %87, 7
  %89 = trunc i32 %88 to i16
  %90 = getelementptr inbounds i16, i16* %31, i64 4
  store i16 %89, i16* %90, align 2
  %91 = load i16, i16* %82, align 2
  %92 = zext i16 %91 to i32
  %93 = mul nuw nsw i32 %25, %92
  %94 = getelementptr inbounds i16, i16* %29, i64 6
  %95 = load i16, i16* %94, align 2
  %96 = zext i16 %95 to i32
  %97 = mul nuw nsw i32 %27, %96
  %98 = add nuw nsw i32 %93, 64
  %99 = add nuw nsw i32 %98, %97
  %100 = lshr i32 %99, 7
  %101 = trunc i32 %100 to i16
  %102 = getelementptr inbounds i16, i16* %31, i64 5
  store i16 %101, i16* %102, align 2
  %103 = load i16, i16* %94, align 2
  %104 = zext i16 %103 to i32
  %105 = mul nuw nsw i32 %25, %104
  %106 = getelementptr inbounds i16, i16* %29, i64 7
  %107 = load i16, i16* %106, align 2
  %108 = zext i16 %107 to i32
  %109 = mul nuw nsw i32 %27, %108
  %110 = add nuw nsw i32 %105, 64
  %111 = add nuw nsw i32 %110, %109
  %112 = lshr i32 %111, 7
  %113 = trunc i32 %112 to i16
  %114 = getelementptr inbounds i16, i16* %31, i64 6
  store i16 %113, i16* %114, align 2
  %115 = load i16, i16* %106, align 2
  %116 = zext i16 %115 to i32
  %117 = mul nuw nsw i32 %25, %116
  %118 = getelementptr inbounds i16, i16* %29, i64 8
  %119 = load i16, i16* %118, align 2
  %120 = zext i16 %119 to i32
  %121 = mul nuw nsw i32 %27, %120
  %122 = add nuw nsw i32 %117, 64
  %123 = add nuw nsw i32 %122, %121
  %124 = lshr i32 %123, 7
  %125 = trunc i32 %124 to i16
  %126 = getelementptr inbounds i16, i16* %31, i64 7
  store i16 %125, i16* %126, align 2
  %127 = getelementptr inbounds i16, i16* %118, i64 %23
  %128 = getelementptr inbounds i16, i16* %31, i64 8
  %129 = add nuw nsw i32 %30, 1
  %130 = icmp eq i32 %129, 5
  br i1 %130, label %131, label %28

131:                                              ; preds = %28
  %132 = sext i32 %3 to i64
  %133 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %132, i64 0
  %134 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %132, i64 1
  %135 = load i8, i8* %133, align 2
  %136 = zext i8 %135 to i32
  %137 = load i8, i8* %134, align 1
  %138 = zext i8 %137 to i32
  %139 = insertelement <8 x i32> undef, i32 %136, i32 0
  %140 = shufflevector <8 x i32> %139, <8 x i32> undef, <8 x i32> zeroinitializer
  %141 = insertelement <8 x i32> undef, i32 %138, i32 0
  %142 = shufflevector <8 x i32> %141, <8 x i32> undef, <8 x i32> zeroinitializer
  %143 = getelementptr inbounds [32 x i16], [32 x i16]* %10, i64 0, i64 0
  %144 = getelementptr inbounds [40 x i16], [40 x i16]* %9, i64 0, i64 8
  %145 = bitcast [40 x i16]* %9 to <8 x i16>*
  %146 = load <8 x i16>, <8 x i16>* %145, align 16
  %147 = zext <8 x i16> %146 to <8 x i32>
  %148 = mul nuw nsw <8 x i32> %140, %147
  %149 = bitcast i16* %144 to <8 x i16>*
  %150 = load <8 x i16>, <8 x i16>* %149, align 16
  %151 = zext <8 x i16> %150 to <8 x i32>
  %152 = mul nuw nsw <8 x i32> %142, %151
  %153 = add nuw nsw <8 x i32> %148, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %154 = add nuw nsw <8 x i32> %153, %152
  %155 = lshr <8 x i32> %154, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %156 = trunc <8 x i32> %155 to <8 x i16>
  %157 = bitcast [32 x i16]* %10 to <8 x i16>*
  store <8 x i16> %156, <8 x i16>* %157, align 16
  %158 = getelementptr inbounds [40 x i16], [40 x i16]* %9, i64 0, i64 8
  %159 = getelementptr inbounds [32 x i16], [32 x i16]* %10, i64 0, i64 8
  %160 = getelementptr inbounds [40 x i16], [40 x i16]* %9, i64 0, i64 16
  %161 = bitcast i16* %158 to <8 x i16>*
  %162 = load <8 x i16>, <8 x i16>* %161, align 16
  %163 = zext <8 x i16> %162 to <8 x i32>
  %164 = mul nuw nsw <8 x i32> %140, %163
  %165 = bitcast i16* %160 to <8 x i16>*
  %166 = load <8 x i16>, <8 x i16>* %165, align 16
  %167 = zext <8 x i16> %166 to <8 x i32>
  %168 = mul nuw nsw <8 x i32> %142, %167
  %169 = add nuw nsw <8 x i32> %164, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %170 = add nuw nsw <8 x i32> %169, %168
  %171 = lshr <8 x i32> %170, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %172 = trunc <8 x i32> %171 to <8 x i16>
  %173 = bitcast i16* %159 to <8 x i16>*
  store <8 x i16> %172, <8 x i16>* %173, align 16
  %174 = getelementptr inbounds [40 x i16], [40 x i16]* %9, i64 0, i64 16
  %175 = getelementptr inbounds [32 x i16], [32 x i16]* %10, i64 0, i64 16
  %176 = getelementptr inbounds [40 x i16], [40 x i16]* %9, i64 0, i64 24
  %177 = bitcast i16* %174 to <8 x i16>*
  %178 = load <8 x i16>, <8 x i16>* %177, align 16
  %179 = zext <8 x i16> %178 to <8 x i32>
  %180 = mul nuw nsw <8 x i32> %140, %179
  %181 = bitcast i16* %176 to <8 x i16>*
  %182 = load <8 x i16>, <8 x i16>* %181, align 16
  %183 = zext <8 x i16> %182 to <8 x i32>
  %184 = mul nuw nsw <8 x i32> %142, %183
  %185 = add nuw nsw <8 x i32> %180, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %186 = add nuw nsw <8 x i32> %185, %184
  %187 = lshr <8 x i32> %186, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %188 = trunc <8 x i32> %187 to <8 x i16>
  %189 = bitcast i16* %175 to <8 x i16>*
  store <8 x i16> %188, <8 x i16>* %189, align 16
  %190 = getelementptr inbounds [40 x i16], [40 x i16]* %9, i64 0, i64 24
  %191 = getelementptr inbounds [32 x i16], [32 x i16]* %10, i64 0, i64 24
  %192 = getelementptr inbounds [40 x i16], [40 x i16]* %9, i64 0, i64 32
  %193 = bitcast i16* %190 to <8 x i16>*
  %194 = load <8 x i16>, <8 x i16>* %193, align 16
  %195 = zext <8 x i16> %194 to <8 x i32>
  %196 = mul nuw nsw <8 x i32> %140, %195
  %197 = bitcast i16* %192 to <8 x i16>*
  %198 = load <8 x i16>, <8 x i16>* %197, align 16
  %199 = zext <8 x i16> %198 to <8 x i32>
  %200 = mul nuw nsw <8 x i32> %142, %199
  %201 = add nuw nsw <8 x i32> %196, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %202 = add nuw nsw <8 x i32> %201, %200
  %203 = lshr <8 x i32> %202, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %204 = trunc <8 x i32> %203 to <8 x i16>
  %205 = bitcast i16* %191 to <8 x i16>*
  store <8 x i16> %204, <8 x i16>* %205, align 16
  %206 = getelementptr inbounds [32 x i16], [32 x i16]* %11, i64 0, i64 0
  %207 = ptrtoint i8* %7 to i64
  %208 = shl i64 %207, 1
  %209 = inttoptr i64 %208 to i16*
  br label %210

210:                                              ; preds = %210, %131
  %211 = phi i16* [ %206, %131 ], [ %300, %210 ]
  %212 = phi i32 [ 0, %131 ], [ %303, %210 ]
  %213 = phi i16* [ %209, %131 ], [ %301, %210 ]
  %214 = phi i16* [ %143, %131 ], [ %302, %210 ]
  %215 = load i16, i16* %213, align 2
  %216 = zext i16 %215 to i32
  %217 = load i16, i16* %214, align 2
  %218 = zext i16 %217 to i32
  %219 = add nuw nsw i32 %216, 1
  %220 = add nuw nsw i32 %219, %218
  %221 = lshr i32 %220, 1
  %222 = trunc i32 %221 to i16
  store i16 %222, i16* %211, align 2
  %223 = getelementptr inbounds i16, i16* %213, i64 1
  %224 = load i16, i16* %223, align 2
  %225 = zext i16 %224 to i32
  %226 = getelementptr inbounds i16, i16* %214, i64 1
  %227 = load i16, i16* %226, align 2
  %228 = zext i16 %227 to i32
  %229 = add nuw nsw i32 %225, 1
  %230 = add nuw nsw i32 %229, %228
  %231 = lshr i32 %230, 1
  %232 = trunc i32 %231 to i16
  %233 = getelementptr inbounds i16, i16* %211, i64 1
  store i16 %232, i16* %233, align 2
  %234 = getelementptr inbounds i16, i16* %213, i64 2
  %235 = load i16, i16* %234, align 2
  %236 = zext i16 %235 to i32
  %237 = getelementptr inbounds i16, i16* %214, i64 2
  %238 = load i16, i16* %237, align 2
  %239 = zext i16 %238 to i32
  %240 = add nuw nsw i32 %236, 1
  %241 = add nuw nsw i32 %240, %239
  %242 = lshr i32 %241, 1
  %243 = trunc i32 %242 to i16
  %244 = getelementptr inbounds i16, i16* %211, i64 2
  store i16 %243, i16* %244, align 2
  %245 = getelementptr inbounds i16, i16* %213, i64 3
  %246 = load i16, i16* %245, align 2
  %247 = zext i16 %246 to i32
  %248 = getelementptr inbounds i16, i16* %214, i64 3
  %249 = load i16, i16* %248, align 2
  %250 = zext i16 %249 to i32
  %251 = add nuw nsw i32 %247, 1
  %252 = add nuw nsw i32 %251, %250
  %253 = lshr i32 %252, 1
  %254 = trunc i32 %253 to i16
  %255 = getelementptr inbounds i16, i16* %211, i64 3
  store i16 %254, i16* %255, align 2
  %256 = getelementptr inbounds i16, i16* %213, i64 4
  %257 = load i16, i16* %256, align 2
  %258 = zext i16 %257 to i32
  %259 = getelementptr inbounds i16, i16* %214, i64 4
  %260 = load i16, i16* %259, align 2
  %261 = zext i16 %260 to i32
  %262 = add nuw nsw i32 %258, 1
  %263 = add nuw nsw i32 %262, %261
  %264 = lshr i32 %263, 1
  %265 = trunc i32 %264 to i16
  %266 = getelementptr inbounds i16, i16* %211, i64 4
  store i16 %265, i16* %266, align 2
  %267 = getelementptr inbounds i16, i16* %213, i64 5
  %268 = load i16, i16* %267, align 2
  %269 = zext i16 %268 to i32
  %270 = getelementptr inbounds i16, i16* %214, i64 5
  %271 = load i16, i16* %270, align 2
  %272 = zext i16 %271 to i32
  %273 = add nuw nsw i32 %269, 1
  %274 = add nuw nsw i32 %273, %272
  %275 = lshr i32 %274, 1
  %276 = trunc i32 %275 to i16
  %277 = getelementptr inbounds i16, i16* %211, i64 5
  store i16 %276, i16* %277, align 2
  %278 = getelementptr inbounds i16, i16* %213, i64 6
  %279 = load i16, i16* %278, align 2
  %280 = zext i16 %279 to i32
  %281 = getelementptr inbounds i16, i16* %214, i64 6
  %282 = load i16, i16* %281, align 2
  %283 = zext i16 %282 to i32
  %284 = add nuw nsw i32 %280, 1
  %285 = add nuw nsw i32 %284, %283
  %286 = lshr i32 %285, 1
  %287 = trunc i32 %286 to i16
  %288 = getelementptr inbounds i16, i16* %211, i64 6
  store i16 %287, i16* %288, align 2
  %289 = getelementptr inbounds i16, i16* %213, i64 7
  %290 = load i16, i16* %289, align 2
  %291 = zext i16 %290 to i32
  %292 = getelementptr inbounds i16, i16* %214, i64 7
  %293 = load i16, i16* %292, align 2
  %294 = zext i16 %293 to i32
  %295 = add nuw nsw i32 %291, 1
  %296 = add nuw nsw i32 %295, %294
  %297 = lshr i32 %296, 1
  %298 = trunc i32 %297 to i16
  %299 = getelementptr inbounds i16, i16* %211, i64 7
  store i16 %298, i16* %299, align 2
  %300 = getelementptr inbounds i16, i16* %211, i64 8
  %301 = getelementptr inbounds i16, i16* %213, i64 8
  %302 = getelementptr inbounds i16, i16* %214, i64 8
  %303 = add nuw nsw i32 %212, 1
  %304 = icmp eq i32 %303, 4
  br i1 %304, label %305, label %210

305:                                              ; preds = %210
  %306 = ptrtoint [32 x i16]* %11 to i64
  %307 = lshr exact i64 %306, 1
  %308 = inttoptr i64 %307 to i8*
  %309 = call i32 @vpx_highbd_10_variance8x4_c(i8* nonnull %308, i32 8, i8* %4, i32 %5, i32* %6)
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %14) #4
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %13) #4
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %12) #4
  ret i32 %309
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_highbd_12_sub_pixel_avg_variance8x4_c(i8*, i32, i32, i32, i8*, i32, i32* nocapture, i8*) local_unnamed_addr #2 {
  %9 = alloca [40 x i16], align 16
  %10 = alloca [32 x i16], align 16
  %11 = alloca [32 x i16], align 16
  %12 = bitcast [40 x i16]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %12) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %12, i8 -86, i64 80, i1 false)
  %13 = bitcast [32 x i16]* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %13) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %13, i8 -86, i64 64, i1 false)
  %14 = bitcast [32 x i16]* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %14) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %14, i8 -86, i64 64, i1 false)
  %15 = getelementptr inbounds [40 x i16], [40 x i16]* %9, i64 0, i64 0
  %16 = sext i32 %2 to i64
  %17 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %16, i64 0
  %18 = ptrtoint i8* %0 to i64
  %19 = shl i64 %18, 1
  %20 = inttoptr i64 %19 to i16*
  %21 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %16, i64 1
  %22 = add i32 %1, -8
  %23 = zext i32 %22 to i64
  %24 = load i8, i8* %17, align 2
  %25 = zext i8 %24 to i32
  %26 = load i8, i8* %21, align 1
  %27 = zext i8 %26 to i32
  br label %28

28:                                               ; preds = %28, %8
  %29 = phi i16* [ %20, %8 ], [ %127, %28 ]
  %30 = phi i32 [ 0, %8 ], [ %129, %28 ]
  %31 = phi i16* [ %15, %8 ], [ %128, %28 ]
  %32 = load i16, i16* %29, align 2
  %33 = zext i16 %32 to i32
  %34 = mul nuw nsw i32 %25, %33
  %35 = getelementptr inbounds i16, i16* %29, i64 1
  %36 = load i16, i16* %35, align 2
  %37 = zext i16 %36 to i32
  %38 = mul nuw nsw i32 %27, %37
  %39 = add nuw nsw i32 %34, 64
  %40 = add nuw nsw i32 %39, %38
  %41 = lshr i32 %40, 7
  %42 = trunc i32 %41 to i16
  store i16 %42, i16* %31, align 2
  %43 = load i16, i16* %35, align 2
  %44 = zext i16 %43 to i32
  %45 = mul nuw nsw i32 %25, %44
  %46 = getelementptr inbounds i16, i16* %29, i64 2
  %47 = load i16, i16* %46, align 2
  %48 = zext i16 %47 to i32
  %49 = mul nuw nsw i32 %27, %48
  %50 = add nuw nsw i32 %45, 64
  %51 = add nuw nsw i32 %50, %49
  %52 = lshr i32 %51, 7
  %53 = trunc i32 %52 to i16
  %54 = getelementptr inbounds i16, i16* %31, i64 1
  store i16 %53, i16* %54, align 2
  %55 = load i16, i16* %46, align 2
  %56 = zext i16 %55 to i32
  %57 = mul nuw nsw i32 %25, %56
  %58 = getelementptr inbounds i16, i16* %29, i64 3
  %59 = load i16, i16* %58, align 2
  %60 = zext i16 %59 to i32
  %61 = mul nuw nsw i32 %27, %60
  %62 = add nuw nsw i32 %57, 64
  %63 = add nuw nsw i32 %62, %61
  %64 = lshr i32 %63, 7
  %65 = trunc i32 %64 to i16
  %66 = getelementptr inbounds i16, i16* %31, i64 2
  store i16 %65, i16* %66, align 2
  %67 = load i16, i16* %58, align 2
  %68 = zext i16 %67 to i32
  %69 = mul nuw nsw i32 %25, %68
  %70 = getelementptr inbounds i16, i16* %29, i64 4
  %71 = load i16, i16* %70, align 2
  %72 = zext i16 %71 to i32
  %73 = mul nuw nsw i32 %27, %72
  %74 = add nuw nsw i32 %69, 64
  %75 = add nuw nsw i32 %74, %73
  %76 = lshr i32 %75, 7
  %77 = trunc i32 %76 to i16
  %78 = getelementptr inbounds i16, i16* %31, i64 3
  store i16 %77, i16* %78, align 2
  %79 = load i16, i16* %70, align 2
  %80 = zext i16 %79 to i32
  %81 = mul nuw nsw i32 %25, %80
  %82 = getelementptr inbounds i16, i16* %29, i64 5
  %83 = load i16, i16* %82, align 2
  %84 = zext i16 %83 to i32
  %85 = mul nuw nsw i32 %27, %84
  %86 = add nuw nsw i32 %81, 64
  %87 = add nuw nsw i32 %86, %85
  %88 = lshr i32 %87, 7
  %89 = trunc i32 %88 to i16
  %90 = getelementptr inbounds i16, i16* %31, i64 4
  store i16 %89, i16* %90, align 2
  %91 = load i16, i16* %82, align 2
  %92 = zext i16 %91 to i32
  %93 = mul nuw nsw i32 %25, %92
  %94 = getelementptr inbounds i16, i16* %29, i64 6
  %95 = load i16, i16* %94, align 2
  %96 = zext i16 %95 to i32
  %97 = mul nuw nsw i32 %27, %96
  %98 = add nuw nsw i32 %93, 64
  %99 = add nuw nsw i32 %98, %97
  %100 = lshr i32 %99, 7
  %101 = trunc i32 %100 to i16
  %102 = getelementptr inbounds i16, i16* %31, i64 5
  store i16 %101, i16* %102, align 2
  %103 = load i16, i16* %94, align 2
  %104 = zext i16 %103 to i32
  %105 = mul nuw nsw i32 %25, %104
  %106 = getelementptr inbounds i16, i16* %29, i64 7
  %107 = load i16, i16* %106, align 2
  %108 = zext i16 %107 to i32
  %109 = mul nuw nsw i32 %27, %108
  %110 = add nuw nsw i32 %105, 64
  %111 = add nuw nsw i32 %110, %109
  %112 = lshr i32 %111, 7
  %113 = trunc i32 %112 to i16
  %114 = getelementptr inbounds i16, i16* %31, i64 6
  store i16 %113, i16* %114, align 2
  %115 = load i16, i16* %106, align 2
  %116 = zext i16 %115 to i32
  %117 = mul nuw nsw i32 %25, %116
  %118 = getelementptr inbounds i16, i16* %29, i64 8
  %119 = load i16, i16* %118, align 2
  %120 = zext i16 %119 to i32
  %121 = mul nuw nsw i32 %27, %120
  %122 = add nuw nsw i32 %117, 64
  %123 = add nuw nsw i32 %122, %121
  %124 = lshr i32 %123, 7
  %125 = trunc i32 %124 to i16
  %126 = getelementptr inbounds i16, i16* %31, i64 7
  store i16 %125, i16* %126, align 2
  %127 = getelementptr inbounds i16, i16* %118, i64 %23
  %128 = getelementptr inbounds i16, i16* %31, i64 8
  %129 = add nuw nsw i32 %30, 1
  %130 = icmp eq i32 %129, 5
  br i1 %130, label %131, label %28

131:                                              ; preds = %28
  %132 = sext i32 %3 to i64
  %133 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %132, i64 0
  %134 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %132, i64 1
  %135 = load i8, i8* %133, align 2
  %136 = zext i8 %135 to i32
  %137 = load i8, i8* %134, align 1
  %138 = zext i8 %137 to i32
  %139 = insertelement <8 x i32> undef, i32 %136, i32 0
  %140 = shufflevector <8 x i32> %139, <8 x i32> undef, <8 x i32> zeroinitializer
  %141 = insertelement <8 x i32> undef, i32 %138, i32 0
  %142 = shufflevector <8 x i32> %141, <8 x i32> undef, <8 x i32> zeroinitializer
  %143 = getelementptr inbounds [32 x i16], [32 x i16]* %10, i64 0, i64 0
  %144 = getelementptr inbounds [40 x i16], [40 x i16]* %9, i64 0, i64 8
  %145 = bitcast [40 x i16]* %9 to <8 x i16>*
  %146 = load <8 x i16>, <8 x i16>* %145, align 16
  %147 = zext <8 x i16> %146 to <8 x i32>
  %148 = mul nuw nsw <8 x i32> %140, %147
  %149 = bitcast i16* %144 to <8 x i16>*
  %150 = load <8 x i16>, <8 x i16>* %149, align 16
  %151 = zext <8 x i16> %150 to <8 x i32>
  %152 = mul nuw nsw <8 x i32> %142, %151
  %153 = add nuw nsw <8 x i32> %148, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %154 = add nuw nsw <8 x i32> %153, %152
  %155 = lshr <8 x i32> %154, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %156 = trunc <8 x i32> %155 to <8 x i16>
  %157 = bitcast [32 x i16]* %10 to <8 x i16>*
  store <8 x i16> %156, <8 x i16>* %157, align 16
  %158 = getelementptr inbounds [40 x i16], [40 x i16]* %9, i64 0, i64 8
  %159 = getelementptr inbounds [32 x i16], [32 x i16]* %10, i64 0, i64 8
  %160 = getelementptr inbounds [40 x i16], [40 x i16]* %9, i64 0, i64 16
  %161 = bitcast i16* %158 to <8 x i16>*
  %162 = load <8 x i16>, <8 x i16>* %161, align 16
  %163 = zext <8 x i16> %162 to <8 x i32>
  %164 = mul nuw nsw <8 x i32> %140, %163
  %165 = bitcast i16* %160 to <8 x i16>*
  %166 = load <8 x i16>, <8 x i16>* %165, align 16
  %167 = zext <8 x i16> %166 to <8 x i32>
  %168 = mul nuw nsw <8 x i32> %142, %167
  %169 = add nuw nsw <8 x i32> %164, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %170 = add nuw nsw <8 x i32> %169, %168
  %171 = lshr <8 x i32> %170, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %172 = trunc <8 x i32> %171 to <8 x i16>
  %173 = bitcast i16* %159 to <8 x i16>*
  store <8 x i16> %172, <8 x i16>* %173, align 16
  %174 = getelementptr inbounds [40 x i16], [40 x i16]* %9, i64 0, i64 16
  %175 = getelementptr inbounds [32 x i16], [32 x i16]* %10, i64 0, i64 16
  %176 = getelementptr inbounds [40 x i16], [40 x i16]* %9, i64 0, i64 24
  %177 = bitcast i16* %174 to <8 x i16>*
  %178 = load <8 x i16>, <8 x i16>* %177, align 16
  %179 = zext <8 x i16> %178 to <8 x i32>
  %180 = mul nuw nsw <8 x i32> %140, %179
  %181 = bitcast i16* %176 to <8 x i16>*
  %182 = load <8 x i16>, <8 x i16>* %181, align 16
  %183 = zext <8 x i16> %182 to <8 x i32>
  %184 = mul nuw nsw <8 x i32> %142, %183
  %185 = add nuw nsw <8 x i32> %180, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %186 = add nuw nsw <8 x i32> %185, %184
  %187 = lshr <8 x i32> %186, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %188 = trunc <8 x i32> %187 to <8 x i16>
  %189 = bitcast i16* %175 to <8 x i16>*
  store <8 x i16> %188, <8 x i16>* %189, align 16
  %190 = getelementptr inbounds [40 x i16], [40 x i16]* %9, i64 0, i64 24
  %191 = getelementptr inbounds [32 x i16], [32 x i16]* %10, i64 0, i64 24
  %192 = getelementptr inbounds [40 x i16], [40 x i16]* %9, i64 0, i64 32
  %193 = bitcast i16* %190 to <8 x i16>*
  %194 = load <8 x i16>, <8 x i16>* %193, align 16
  %195 = zext <8 x i16> %194 to <8 x i32>
  %196 = mul nuw nsw <8 x i32> %140, %195
  %197 = bitcast i16* %192 to <8 x i16>*
  %198 = load <8 x i16>, <8 x i16>* %197, align 16
  %199 = zext <8 x i16> %198 to <8 x i32>
  %200 = mul nuw nsw <8 x i32> %142, %199
  %201 = add nuw nsw <8 x i32> %196, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %202 = add nuw nsw <8 x i32> %201, %200
  %203 = lshr <8 x i32> %202, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %204 = trunc <8 x i32> %203 to <8 x i16>
  %205 = bitcast i16* %191 to <8 x i16>*
  store <8 x i16> %204, <8 x i16>* %205, align 16
  %206 = getelementptr inbounds [32 x i16], [32 x i16]* %11, i64 0, i64 0
  %207 = ptrtoint i8* %7 to i64
  %208 = shl i64 %207, 1
  %209 = inttoptr i64 %208 to i16*
  br label %210

210:                                              ; preds = %210, %131
  %211 = phi i16* [ %206, %131 ], [ %300, %210 ]
  %212 = phi i32 [ 0, %131 ], [ %303, %210 ]
  %213 = phi i16* [ %209, %131 ], [ %301, %210 ]
  %214 = phi i16* [ %143, %131 ], [ %302, %210 ]
  %215 = load i16, i16* %213, align 2
  %216 = zext i16 %215 to i32
  %217 = load i16, i16* %214, align 2
  %218 = zext i16 %217 to i32
  %219 = add nuw nsw i32 %216, 1
  %220 = add nuw nsw i32 %219, %218
  %221 = lshr i32 %220, 1
  %222 = trunc i32 %221 to i16
  store i16 %222, i16* %211, align 2
  %223 = getelementptr inbounds i16, i16* %213, i64 1
  %224 = load i16, i16* %223, align 2
  %225 = zext i16 %224 to i32
  %226 = getelementptr inbounds i16, i16* %214, i64 1
  %227 = load i16, i16* %226, align 2
  %228 = zext i16 %227 to i32
  %229 = add nuw nsw i32 %225, 1
  %230 = add nuw nsw i32 %229, %228
  %231 = lshr i32 %230, 1
  %232 = trunc i32 %231 to i16
  %233 = getelementptr inbounds i16, i16* %211, i64 1
  store i16 %232, i16* %233, align 2
  %234 = getelementptr inbounds i16, i16* %213, i64 2
  %235 = load i16, i16* %234, align 2
  %236 = zext i16 %235 to i32
  %237 = getelementptr inbounds i16, i16* %214, i64 2
  %238 = load i16, i16* %237, align 2
  %239 = zext i16 %238 to i32
  %240 = add nuw nsw i32 %236, 1
  %241 = add nuw nsw i32 %240, %239
  %242 = lshr i32 %241, 1
  %243 = trunc i32 %242 to i16
  %244 = getelementptr inbounds i16, i16* %211, i64 2
  store i16 %243, i16* %244, align 2
  %245 = getelementptr inbounds i16, i16* %213, i64 3
  %246 = load i16, i16* %245, align 2
  %247 = zext i16 %246 to i32
  %248 = getelementptr inbounds i16, i16* %214, i64 3
  %249 = load i16, i16* %248, align 2
  %250 = zext i16 %249 to i32
  %251 = add nuw nsw i32 %247, 1
  %252 = add nuw nsw i32 %251, %250
  %253 = lshr i32 %252, 1
  %254 = trunc i32 %253 to i16
  %255 = getelementptr inbounds i16, i16* %211, i64 3
  store i16 %254, i16* %255, align 2
  %256 = getelementptr inbounds i16, i16* %213, i64 4
  %257 = load i16, i16* %256, align 2
  %258 = zext i16 %257 to i32
  %259 = getelementptr inbounds i16, i16* %214, i64 4
  %260 = load i16, i16* %259, align 2
  %261 = zext i16 %260 to i32
  %262 = add nuw nsw i32 %258, 1
  %263 = add nuw nsw i32 %262, %261
  %264 = lshr i32 %263, 1
  %265 = trunc i32 %264 to i16
  %266 = getelementptr inbounds i16, i16* %211, i64 4
  store i16 %265, i16* %266, align 2
  %267 = getelementptr inbounds i16, i16* %213, i64 5
  %268 = load i16, i16* %267, align 2
  %269 = zext i16 %268 to i32
  %270 = getelementptr inbounds i16, i16* %214, i64 5
  %271 = load i16, i16* %270, align 2
  %272 = zext i16 %271 to i32
  %273 = add nuw nsw i32 %269, 1
  %274 = add nuw nsw i32 %273, %272
  %275 = lshr i32 %274, 1
  %276 = trunc i32 %275 to i16
  %277 = getelementptr inbounds i16, i16* %211, i64 5
  store i16 %276, i16* %277, align 2
  %278 = getelementptr inbounds i16, i16* %213, i64 6
  %279 = load i16, i16* %278, align 2
  %280 = zext i16 %279 to i32
  %281 = getelementptr inbounds i16, i16* %214, i64 6
  %282 = load i16, i16* %281, align 2
  %283 = zext i16 %282 to i32
  %284 = add nuw nsw i32 %280, 1
  %285 = add nuw nsw i32 %284, %283
  %286 = lshr i32 %285, 1
  %287 = trunc i32 %286 to i16
  %288 = getelementptr inbounds i16, i16* %211, i64 6
  store i16 %287, i16* %288, align 2
  %289 = getelementptr inbounds i16, i16* %213, i64 7
  %290 = load i16, i16* %289, align 2
  %291 = zext i16 %290 to i32
  %292 = getelementptr inbounds i16, i16* %214, i64 7
  %293 = load i16, i16* %292, align 2
  %294 = zext i16 %293 to i32
  %295 = add nuw nsw i32 %291, 1
  %296 = add nuw nsw i32 %295, %294
  %297 = lshr i32 %296, 1
  %298 = trunc i32 %297 to i16
  %299 = getelementptr inbounds i16, i16* %211, i64 7
  store i16 %298, i16* %299, align 2
  %300 = getelementptr inbounds i16, i16* %211, i64 8
  %301 = getelementptr inbounds i16, i16* %213, i64 8
  %302 = getelementptr inbounds i16, i16* %214, i64 8
  %303 = add nuw nsw i32 %212, 1
  %304 = icmp eq i32 %303, 4
  br i1 %304, label %305, label %210

305:                                              ; preds = %210
  %306 = ptrtoint [32 x i16]* %11 to i64
  %307 = lshr exact i64 %306, 1
  %308 = inttoptr i64 %307 to i8*
  %309 = call i32 @vpx_highbd_12_variance8x4_c(i8* nonnull %308, i32 8, i8* %4, i32 %5, i32* %6)
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %14) #4
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %13) #4
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %12) #4
  ret i32 %309
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_highbd_8_variance4x8_c(i8*, i32, i8*, i32, i32* nocapture) local_unnamed_addr #2 {
  %6 = ptrtoint i8* %2 to i64
  %7 = shl i64 %6, 1
  %8 = inttoptr i64 %7 to i16*
  %9 = ptrtoint i8* %0 to i64
  %10 = shl i64 %9, 1
  %11 = inttoptr i64 %10 to i16*
  %12 = sext i32 %1 to i64
  %13 = sext i32 %3 to i64
  br label %14

14:                                               ; preds = %14, %5
  %15 = phi i64 [ 0, %5 ], [ %49, %14 ]
  %16 = phi i64 [ 0, %5 ], [ %45, %14 ]
  %17 = phi i32 [ 0, %5 ], [ %52, %14 ]
  %18 = phi i16* [ %8, %5 ], [ %51, %14 ]
  %19 = phi i16* [ %11, %5 ], [ %50, %14 ]
  %20 = bitcast i16* %19 to <4 x i16>*
  %21 = load <4 x i16>, <4 x i16>* %20, align 2
  %22 = zext <4 x i16> %21 to <4 x i32>
  %23 = bitcast i16* %18 to <4 x i16>*
  %24 = load <4 x i16>, <4 x i16>* %23, align 2
  %25 = zext <4 x i16> %24 to <4 x i32>
  %26 = sub nsw <4 x i32> %22, %25
  %27 = sext <4 x i32> %26 to <4 x i64>
  %28 = extractelement <4 x i32> %26, i32 0
  %29 = mul nsw i32 %28, %28
  %30 = zext i32 %29 to i64
  %31 = add i64 %15, %30
  %32 = extractelement <4 x i32> %26, i32 1
  %33 = mul nsw i32 %32, %32
  %34 = zext i32 %33 to i64
  %35 = add i64 %31, %34
  %36 = extractelement <4 x i32> %26, i32 2
  %37 = mul nsw i32 %36, %36
  %38 = zext i32 %37 to i64
  %39 = add i64 %35, %38
  %40 = shufflevector <4 x i64> %27, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %41 = add nsw <4 x i64> %40, %27
  %42 = shufflevector <4 x i64> %41, <4 x i64> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %43 = add nsw <4 x i64> %41, %42
  %44 = extractelement <4 x i64> %43, i32 0
  %45 = add nsw i64 %44, %16
  %46 = extractelement <4 x i32> %26, i32 3
  %47 = mul nsw i32 %46, %46
  %48 = zext i32 %47 to i64
  %49 = add i64 %39, %48
  %50 = getelementptr inbounds i16, i16* %19, i64 %12
  %51 = getelementptr inbounds i16, i16* %18, i64 %13
  %52 = add nuw nsw i32 %17, 1
  %53 = icmp eq i32 %52, 8
  br i1 %53, label %54, label %14

54:                                               ; preds = %14
  %55 = trunc i64 %49 to i32
  store i32 %55, i32* %4, align 4
  %56 = shl i64 %45, 32
  %57 = ashr exact i64 %56, 32
  %58 = mul nsw i64 %57, %57
  %59 = lshr i64 %58, 5
  %60 = trunc i64 %59 to i32
  %61 = sub i32 %55, %60
  ret i32 %61
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_highbd_10_variance4x8_c(i8*, i32, i8*, i32, i32* nocapture) local_unnamed_addr #2 {
  %6 = ptrtoint i8* %2 to i64
  %7 = shl i64 %6, 1
  %8 = inttoptr i64 %7 to i16*
  %9 = ptrtoint i8* %0 to i64
  %10 = shl i64 %9, 1
  %11 = inttoptr i64 %10 to i16*
  %12 = sext i32 %1 to i64
  %13 = sext i32 %3 to i64
  br label %14

14:                                               ; preds = %14, %5
  %15 = phi i64 [ 0, %5 ], [ %49, %14 ]
  %16 = phi i64 [ 0, %5 ], [ %45, %14 ]
  %17 = phi i32 [ 0, %5 ], [ %52, %14 ]
  %18 = phi i16* [ %8, %5 ], [ %51, %14 ]
  %19 = phi i16* [ %11, %5 ], [ %50, %14 ]
  %20 = bitcast i16* %19 to <4 x i16>*
  %21 = load <4 x i16>, <4 x i16>* %20, align 2
  %22 = zext <4 x i16> %21 to <4 x i32>
  %23 = bitcast i16* %18 to <4 x i16>*
  %24 = load <4 x i16>, <4 x i16>* %23, align 2
  %25 = zext <4 x i16> %24 to <4 x i32>
  %26 = sub nsw <4 x i32> %22, %25
  %27 = sext <4 x i32> %26 to <4 x i64>
  %28 = extractelement <4 x i32> %26, i32 0
  %29 = mul nsw i32 %28, %28
  %30 = zext i32 %29 to i64
  %31 = add i64 %15, %30
  %32 = extractelement <4 x i32> %26, i32 1
  %33 = mul nsw i32 %32, %32
  %34 = zext i32 %33 to i64
  %35 = add i64 %31, %34
  %36 = extractelement <4 x i32> %26, i32 2
  %37 = mul nsw i32 %36, %36
  %38 = zext i32 %37 to i64
  %39 = add i64 %35, %38
  %40 = shufflevector <4 x i64> %27, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %41 = add nsw <4 x i64> %40, %27
  %42 = shufflevector <4 x i64> %41, <4 x i64> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %43 = add nsw <4 x i64> %41, %42
  %44 = extractelement <4 x i64> %43, i32 0
  %45 = add nsw i64 %44, %16
  %46 = extractelement <4 x i32> %26, i32 3
  %47 = mul nsw i32 %46, %46
  %48 = zext i32 %47 to i64
  %49 = add i64 %39, %48
  %50 = getelementptr inbounds i16, i16* %19, i64 %12
  %51 = getelementptr inbounds i16, i16* %18, i64 %13
  %52 = add nuw nsw i32 %17, 1
  %53 = icmp eq i32 %52, 8
  br i1 %53, label %54, label %14

54:                                               ; preds = %14
  %55 = add i64 %49, 8
  %56 = lshr i64 %55, 4
  %57 = trunc i64 %56 to i32
  store i32 %57, i32* %4, align 4
  %58 = and i64 %56, 4294967295
  %59 = shl i64 %45, 30
  %60 = add i64 %59, 2147483648
  %61 = ashr i64 %60, 32
  %62 = mul nsw i64 %61, %61
  %63 = lshr i64 %62, 5
  %64 = sub nsw i64 %58, %63
  %65 = icmp sgt i64 %64, -1
  %66 = trunc i64 %64 to i32
  %67 = select i1 %65, i32 %66, i32 0
  ret i32 %67
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_highbd_12_variance4x8_c(i8*, i32, i8*, i32, i32* nocapture) local_unnamed_addr #2 {
  %6 = ptrtoint i8* %2 to i64
  %7 = shl i64 %6, 1
  %8 = inttoptr i64 %7 to i16*
  %9 = ptrtoint i8* %0 to i64
  %10 = shl i64 %9, 1
  %11 = inttoptr i64 %10 to i16*
  %12 = sext i32 %1 to i64
  %13 = sext i32 %3 to i64
  br label %14

14:                                               ; preds = %14, %5
  %15 = phi i64 [ 0, %5 ], [ %49, %14 ]
  %16 = phi i64 [ 0, %5 ], [ %45, %14 ]
  %17 = phi i32 [ 0, %5 ], [ %52, %14 ]
  %18 = phi i16* [ %8, %5 ], [ %51, %14 ]
  %19 = phi i16* [ %11, %5 ], [ %50, %14 ]
  %20 = bitcast i16* %19 to <4 x i16>*
  %21 = load <4 x i16>, <4 x i16>* %20, align 2
  %22 = zext <4 x i16> %21 to <4 x i32>
  %23 = bitcast i16* %18 to <4 x i16>*
  %24 = load <4 x i16>, <4 x i16>* %23, align 2
  %25 = zext <4 x i16> %24 to <4 x i32>
  %26 = sub nsw <4 x i32> %22, %25
  %27 = sext <4 x i32> %26 to <4 x i64>
  %28 = extractelement <4 x i32> %26, i32 0
  %29 = mul nsw i32 %28, %28
  %30 = zext i32 %29 to i64
  %31 = add i64 %15, %30
  %32 = extractelement <4 x i32> %26, i32 1
  %33 = mul nsw i32 %32, %32
  %34 = zext i32 %33 to i64
  %35 = add i64 %31, %34
  %36 = extractelement <4 x i32> %26, i32 2
  %37 = mul nsw i32 %36, %36
  %38 = zext i32 %37 to i64
  %39 = add i64 %35, %38
  %40 = shufflevector <4 x i64> %27, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %41 = add nsw <4 x i64> %40, %27
  %42 = shufflevector <4 x i64> %41, <4 x i64> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %43 = add nsw <4 x i64> %41, %42
  %44 = extractelement <4 x i64> %43, i32 0
  %45 = add nsw i64 %44, %16
  %46 = extractelement <4 x i32> %26, i32 3
  %47 = mul nsw i32 %46, %46
  %48 = zext i32 %47 to i64
  %49 = add i64 %39, %48
  %50 = getelementptr inbounds i16, i16* %19, i64 %12
  %51 = getelementptr inbounds i16, i16* %18, i64 %13
  %52 = add nuw nsw i32 %17, 1
  %53 = icmp eq i32 %52, 8
  br i1 %53, label %54, label %14

54:                                               ; preds = %14
  %55 = add i64 %49, 128
  %56 = lshr i64 %55, 8
  %57 = trunc i64 %56 to i32
  store i32 %57, i32* %4, align 4
  %58 = and i64 %56, 4294967295
  %59 = shl i64 %45, 28
  %60 = add i64 %59, 2147483648
  %61 = ashr i64 %60, 32
  %62 = mul nsw i64 %61, %61
  %63 = lshr i64 %62, 5
  %64 = sub nsw i64 %58, %63
  %65 = icmp sgt i64 %64, -1
  %66 = trunc i64 %64 to i32
  %67 = select i1 %65, i32 %66, i32 0
  ret i32 %67
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_highbd_8_sub_pixel_variance4x8_c(i8*, i32, i32, i32, i8*, i32, i32* nocapture) local_unnamed_addr #2 {
  %8 = alloca [36 x i16], align 16
  %9 = alloca [32 x i16], align 16
  %10 = bitcast [36 x i16]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %10) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %10, i8 -86, i64 72, i1 false)
  %11 = bitcast [32 x i16]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %11) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %11, i8 -86, i64 64, i1 false)
  %12 = getelementptr inbounds [36 x i16], [36 x i16]* %8, i64 0, i64 0
  %13 = sext i32 %2 to i64
  %14 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %13, i64 0
  %15 = ptrtoint i8* %0 to i64
  %16 = shl i64 %15, 1
  %17 = inttoptr i64 %16 to i16*
  %18 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %13, i64 1
  %19 = add i32 %1, -4
  %20 = zext i32 %19 to i64
  %21 = load i8, i8* %14, align 2
  %22 = zext i8 %21 to i32
  %23 = load i8, i8* %18, align 1
  %24 = zext i8 %23 to i32
  br label %25

25:                                               ; preds = %25, %7
  %26 = phi i16* [ %17, %7 ], [ %76, %25 ]
  %27 = phi i32 [ 0, %7 ], [ %78, %25 ]
  %28 = phi i16* [ %12, %7 ], [ %77, %25 ]
  %29 = load i16, i16* %26, align 2
  %30 = zext i16 %29 to i32
  %31 = mul nuw nsw i32 %22, %30
  %32 = getelementptr inbounds i16, i16* %26, i64 1
  %33 = load i16, i16* %32, align 2
  %34 = zext i16 %33 to i32
  %35 = mul nuw nsw i32 %24, %34
  %36 = add nuw nsw i32 %31, 64
  %37 = add nuw nsw i32 %36, %35
  %38 = lshr i32 %37, 7
  %39 = trunc i32 %38 to i16
  store i16 %39, i16* %28, align 2
  %40 = load i16, i16* %32, align 2
  %41 = zext i16 %40 to i32
  %42 = mul nuw nsw i32 %22, %41
  %43 = getelementptr inbounds i16, i16* %26, i64 2
  %44 = load i16, i16* %43, align 2
  %45 = zext i16 %44 to i32
  %46 = mul nuw nsw i32 %24, %45
  %47 = add nuw nsw i32 %42, 64
  %48 = add nuw nsw i32 %47, %46
  %49 = lshr i32 %48, 7
  %50 = trunc i32 %49 to i16
  %51 = getelementptr inbounds i16, i16* %28, i64 1
  store i16 %50, i16* %51, align 2
  %52 = load i16, i16* %43, align 2
  %53 = zext i16 %52 to i32
  %54 = mul nuw nsw i32 %22, %53
  %55 = getelementptr inbounds i16, i16* %26, i64 3
  %56 = load i16, i16* %55, align 2
  %57 = zext i16 %56 to i32
  %58 = mul nuw nsw i32 %24, %57
  %59 = add nuw nsw i32 %54, 64
  %60 = add nuw nsw i32 %59, %58
  %61 = lshr i32 %60, 7
  %62 = trunc i32 %61 to i16
  %63 = getelementptr inbounds i16, i16* %28, i64 2
  store i16 %62, i16* %63, align 2
  %64 = load i16, i16* %55, align 2
  %65 = zext i16 %64 to i32
  %66 = mul nuw nsw i32 %22, %65
  %67 = getelementptr inbounds i16, i16* %26, i64 4
  %68 = load i16, i16* %67, align 2
  %69 = zext i16 %68 to i32
  %70 = mul nuw nsw i32 %24, %69
  %71 = add nuw nsw i32 %66, 64
  %72 = add nuw nsw i32 %71, %70
  %73 = lshr i32 %72, 7
  %74 = trunc i32 %73 to i16
  %75 = getelementptr inbounds i16, i16* %28, i64 3
  store i16 %74, i16* %75, align 2
  %76 = getelementptr inbounds i16, i16* %67, i64 %20
  %77 = getelementptr inbounds i16, i16* %28, i64 4
  %78 = add nuw nsw i32 %27, 1
  %79 = icmp eq i32 %78, 9
  br i1 %79, label %80, label %25

80:                                               ; preds = %25
  %81 = getelementptr inbounds [32 x i16], [32 x i16]* %9, i64 0, i64 0
  %82 = sext i32 %3 to i64
  %83 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %82, i64 0
  %84 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %82, i64 1
  %85 = load i8, i8* %83, align 2
  %86 = zext i8 %85 to i32
  %87 = load i8, i8* %84, align 1
  %88 = zext i8 %87 to i32
  %89 = load i16, i16* %12, align 16
  br label %90

90:                                               ; preds = %90, %80
  %91 = phi i16 [ %89, %80 ], [ %98, %90 ]
  %92 = phi i32 [ 0, %80 ], [ %146, %90 ]
  %93 = phi i16* [ %12, %80 ], [ %144, %90 ]
  %94 = phi i16* [ %81, %80 ], [ %145, %90 ]
  %95 = zext i16 %91 to i32
  %96 = mul nuw nsw i32 %86, %95
  %97 = getelementptr inbounds i16, i16* %93, i64 4
  %98 = load i16, i16* %97, align 2
  %99 = zext i16 %98 to i32
  %100 = mul nuw nsw i32 %88, %99
  %101 = add nuw nsw i32 %96, 64
  %102 = add nuw nsw i32 %101, %100
  %103 = lshr i32 %102, 7
  %104 = trunc i32 %103 to i16
  store i16 %104, i16* %94, align 2
  %105 = getelementptr inbounds i16, i16* %93, i64 1
  %106 = load i16, i16* %105, align 2
  %107 = zext i16 %106 to i32
  %108 = mul nuw nsw i32 %86, %107
  %109 = getelementptr inbounds i16, i16* %93, i64 5
  %110 = load i16, i16* %109, align 2
  %111 = zext i16 %110 to i32
  %112 = mul nuw nsw i32 %88, %111
  %113 = add nuw nsw i32 %108, 64
  %114 = add nuw nsw i32 %113, %112
  %115 = lshr i32 %114, 7
  %116 = trunc i32 %115 to i16
  %117 = getelementptr inbounds i16, i16* %94, i64 1
  store i16 %116, i16* %117, align 2
  %118 = getelementptr inbounds i16, i16* %93, i64 2
  %119 = load i16, i16* %118, align 2
  %120 = zext i16 %119 to i32
  %121 = mul nuw nsw i32 %86, %120
  %122 = getelementptr inbounds i16, i16* %93, i64 6
  %123 = load i16, i16* %122, align 2
  %124 = zext i16 %123 to i32
  %125 = mul nuw nsw i32 %88, %124
  %126 = add nuw nsw i32 %121, 64
  %127 = add nuw nsw i32 %126, %125
  %128 = lshr i32 %127, 7
  %129 = trunc i32 %128 to i16
  %130 = getelementptr inbounds i16, i16* %94, i64 2
  store i16 %129, i16* %130, align 2
  %131 = getelementptr inbounds i16, i16* %93, i64 3
  %132 = load i16, i16* %131, align 2
  %133 = zext i16 %132 to i32
  %134 = mul nuw nsw i32 %86, %133
  %135 = getelementptr inbounds i16, i16* %93, i64 7
  %136 = load i16, i16* %135, align 2
  %137 = zext i16 %136 to i32
  %138 = mul nuw nsw i32 %88, %137
  %139 = add nuw nsw i32 %134, 64
  %140 = add nuw nsw i32 %139, %138
  %141 = lshr i32 %140, 7
  %142 = trunc i32 %141 to i16
  %143 = getelementptr inbounds i16, i16* %94, i64 3
  store i16 %142, i16* %143, align 2
  %144 = getelementptr inbounds i16, i16* %93, i64 4
  %145 = getelementptr inbounds i16, i16* %94, i64 4
  %146 = add nuw nsw i32 %92, 1
  %147 = icmp eq i32 %146, 8
  br i1 %147, label %148, label %90

148:                                              ; preds = %90
  %149 = ptrtoint i8* %4 to i64
  %150 = shl i64 %149, 1
  %151 = inttoptr i64 %150 to i16*
  %152 = sext i32 %5 to i64
  br label %153

153:                                              ; preds = %153, %148
  %154 = phi i64 [ 0, %148 ], [ %188, %153 ]
  %155 = phi i64 [ 0, %148 ], [ %184, %153 ]
  %156 = phi i32 [ 0, %148 ], [ %191, %153 ]
  %157 = phi i16* [ %151, %148 ], [ %190, %153 ]
  %158 = phi i16* [ %81, %148 ], [ %189, %153 ]
  %159 = bitcast i16* %158 to <4 x i16>*
  %160 = load <4 x i16>, <4 x i16>* %159, align 2
  %161 = zext <4 x i16> %160 to <4 x i32>
  %162 = bitcast i16* %157 to <4 x i16>*
  %163 = load <4 x i16>, <4 x i16>* %162, align 2
  %164 = zext <4 x i16> %163 to <4 x i32>
  %165 = sub nsw <4 x i32> %161, %164
  %166 = sext <4 x i32> %165 to <4 x i64>
  %167 = extractelement <4 x i32> %165, i32 0
  %168 = mul nsw i32 %167, %167
  %169 = zext i32 %168 to i64
  %170 = add i64 %154, %169
  %171 = extractelement <4 x i32> %165, i32 1
  %172 = mul nsw i32 %171, %171
  %173 = zext i32 %172 to i64
  %174 = add i64 %170, %173
  %175 = extractelement <4 x i32> %165, i32 2
  %176 = mul nsw i32 %175, %175
  %177 = zext i32 %176 to i64
  %178 = add i64 %174, %177
  %179 = shufflevector <4 x i64> %166, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %180 = add nsw <4 x i64> %179, %166
  %181 = shufflevector <4 x i64> %180, <4 x i64> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %182 = add nsw <4 x i64> %180, %181
  %183 = extractelement <4 x i64> %182, i32 0
  %184 = add nsw i64 %183, %155
  %185 = extractelement <4 x i32> %165, i32 3
  %186 = mul nsw i32 %185, %185
  %187 = zext i32 %186 to i64
  %188 = add i64 %178, %187
  %189 = getelementptr inbounds i16, i16* %158, i64 4
  %190 = getelementptr inbounds i16, i16* %157, i64 %152
  %191 = add nuw nsw i32 %156, 1
  %192 = icmp eq i32 %191, 8
  br i1 %192, label %193, label %153

193:                                              ; preds = %153
  %194 = trunc i64 %188 to i32
  store i32 %194, i32* %6, align 4
  %195 = shl i64 %184, 32
  %196 = ashr exact i64 %195, 32
  %197 = mul nsw i64 %196, %196
  %198 = lshr i64 %197, 5
  %199 = trunc i64 %198 to i32
  %200 = sub i32 %194, %199
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %11) #4
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %10) #4
  ret i32 %200
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_highbd_10_sub_pixel_variance4x8_c(i8*, i32, i32, i32, i8*, i32, i32* nocapture) local_unnamed_addr #2 {
  %8 = alloca [36 x i16], align 16
  %9 = alloca [32 x i16], align 16
  %10 = bitcast [36 x i16]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %10) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %10, i8 -86, i64 72, i1 false)
  %11 = bitcast [32 x i16]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %11) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %11, i8 -86, i64 64, i1 false)
  %12 = getelementptr inbounds [36 x i16], [36 x i16]* %8, i64 0, i64 0
  %13 = sext i32 %2 to i64
  %14 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %13, i64 0
  %15 = ptrtoint i8* %0 to i64
  %16 = shl i64 %15, 1
  %17 = inttoptr i64 %16 to i16*
  %18 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %13, i64 1
  %19 = add i32 %1, -4
  %20 = zext i32 %19 to i64
  %21 = load i8, i8* %14, align 2
  %22 = zext i8 %21 to i32
  %23 = load i8, i8* %18, align 1
  %24 = zext i8 %23 to i32
  br label %25

25:                                               ; preds = %25, %7
  %26 = phi i16* [ %17, %7 ], [ %76, %25 ]
  %27 = phi i32 [ 0, %7 ], [ %78, %25 ]
  %28 = phi i16* [ %12, %7 ], [ %77, %25 ]
  %29 = load i16, i16* %26, align 2
  %30 = zext i16 %29 to i32
  %31 = mul nuw nsw i32 %22, %30
  %32 = getelementptr inbounds i16, i16* %26, i64 1
  %33 = load i16, i16* %32, align 2
  %34 = zext i16 %33 to i32
  %35 = mul nuw nsw i32 %24, %34
  %36 = add nuw nsw i32 %31, 64
  %37 = add nuw nsw i32 %36, %35
  %38 = lshr i32 %37, 7
  %39 = trunc i32 %38 to i16
  store i16 %39, i16* %28, align 2
  %40 = load i16, i16* %32, align 2
  %41 = zext i16 %40 to i32
  %42 = mul nuw nsw i32 %22, %41
  %43 = getelementptr inbounds i16, i16* %26, i64 2
  %44 = load i16, i16* %43, align 2
  %45 = zext i16 %44 to i32
  %46 = mul nuw nsw i32 %24, %45
  %47 = add nuw nsw i32 %42, 64
  %48 = add nuw nsw i32 %47, %46
  %49 = lshr i32 %48, 7
  %50 = trunc i32 %49 to i16
  %51 = getelementptr inbounds i16, i16* %28, i64 1
  store i16 %50, i16* %51, align 2
  %52 = load i16, i16* %43, align 2
  %53 = zext i16 %52 to i32
  %54 = mul nuw nsw i32 %22, %53
  %55 = getelementptr inbounds i16, i16* %26, i64 3
  %56 = load i16, i16* %55, align 2
  %57 = zext i16 %56 to i32
  %58 = mul nuw nsw i32 %24, %57
  %59 = add nuw nsw i32 %54, 64
  %60 = add nuw nsw i32 %59, %58
  %61 = lshr i32 %60, 7
  %62 = trunc i32 %61 to i16
  %63 = getelementptr inbounds i16, i16* %28, i64 2
  store i16 %62, i16* %63, align 2
  %64 = load i16, i16* %55, align 2
  %65 = zext i16 %64 to i32
  %66 = mul nuw nsw i32 %22, %65
  %67 = getelementptr inbounds i16, i16* %26, i64 4
  %68 = load i16, i16* %67, align 2
  %69 = zext i16 %68 to i32
  %70 = mul nuw nsw i32 %24, %69
  %71 = add nuw nsw i32 %66, 64
  %72 = add nuw nsw i32 %71, %70
  %73 = lshr i32 %72, 7
  %74 = trunc i32 %73 to i16
  %75 = getelementptr inbounds i16, i16* %28, i64 3
  store i16 %74, i16* %75, align 2
  %76 = getelementptr inbounds i16, i16* %67, i64 %20
  %77 = getelementptr inbounds i16, i16* %28, i64 4
  %78 = add nuw nsw i32 %27, 1
  %79 = icmp eq i32 %78, 9
  br i1 %79, label %80, label %25

80:                                               ; preds = %25
  %81 = getelementptr inbounds [32 x i16], [32 x i16]* %9, i64 0, i64 0
  %82 = sext i32 %3 to i64
  %83 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %82, i64 0
  %84 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %82, i64 1
  %85 = load i8, i8* %83, align 2
  %86 = zext i8 %85 to i32
  %87 = load i8, i8* %84, align 1
  %88 = zext i8 %87 to i32
  %89 = load i16, i16* %12, align 16
  br label %90

90:                                               ; preds = %90, %80
  %91 = phi i16 [ %89, %80 ], [ %98, %90 ]
  %92 = phi i32 [ 0, %80 ], [ %146, %90 ]
  %93 = phi i16* [ %12, %80 ], [ %144, %90 ]
  %94 = phi i16* [ %81, %80 ], [ %145, %90 ]
  %95 = zext i16 %91 to i32
  %96 = mul nuw nsw i32 %86, %95
  %97 = getelementptr inbounds i16, i16* %93, i64 4
  %98 = load i16, i16* %97, align 2
  %99 = zext i16 %98 to i32
  %100 = mul nuw nsw i32 %88, %99
  %101 = add nuw nsw i32 %96, 64
  %102 = add nuw nsw i32 %101, %100
  %103 = lshr i32 %102, 7
  %104 = trunc i32 %103 to i16
  store i16 %104, i16* %94, align 2
  %105 = getelementptr inbounds i16, i16* %93, i64 1
  %106 = load i16, i16* %105, align 2
  %107 = zext i16 %106 to i32
  %108 = mul nuw nsw i32 %86, %107
  %109 = getelementptr inbounds i16, i16* %93, i64 5
  %110 = load i16, i16* %109, align 2
  %111 = zext i16 %110 to i32
  %112 = mul nuw nsw i32 %88, %111
  %113 = add nuw nsw i32 %108, 64
  %114 = add nuw nsw i32 %113, %112
  %115 = lshr i32 %114, 7
  %116 = trunc i32 %115 to i16
  %117 = getelementptr inbounds i16, i16* %94, i64 1
  store i16 %116, i16* %117, align 2
  %118 = getelementptr inbounds i16, i16* %93, i64 2
  %119 = load i16, i16* %118, align 2
  %120 = zext i16 %119 to i32
  %121 = mul nuw nsw i32 %86, %120
  %122 = getelementptr inbounds i16, i16* %93, i64 6
  %123 = load i16, i16* %122, align 2
  %124 = zext i16 %123 to i32
  %125 = mul nuw nsw i32 %88, %124
  %126 = add nuw nsw i32 %121, 64
  %127 = add nuw nsw i32 %126, %125
  %128 = lshr i32 %127, 7
  %129 = trunc i32 %128 to i16
  %130 = getelementptr inbounds i16, i16* %94, i64 2
  store i16 %129, i16* %130, align 2
  %131 = getelementptr inbounds i16, i16* %93, i64 3
  %132 = load i16, i16* %131, align 2
  %133 = zext i16 %132 to i32
  %134 = mul nuw nsw i32 %86, %133
  %135 = getelementptr inbounds i16, i16* %93, i64 7
  %136 = load i16, i16* %135, align 2
  %137 = zext i16 %136 to i32
  %138 = mul nuw nsw i32 %88, %137
  %139 = add nuw nsw i32 %134, 64
  %140 = add nuw nsw i32 %139, %138
  %141 = lshr i32 %140, 7
  %142 = trunc i32 %141 to i16
  %143 = getelementptr inbounds i16, i16* %94, i64 3
  store i16 %142, i16* %143, align 2
  %144 = getelementptr inbounds i16, i16* %93, i64 4
  %145 = getelementptr inbounds i16, i16* %94, i64 4
  %146 = add nuw nsw i32 %92, 1
  %147 = icmp eq i32 %146, 8
  br i1 %147, label %148, label %90

148:                                              ; preds = %90
  %149 = ptrtoint i8* %4 to i64
  %150 = shl i64 %149, 1
  %151 = inttoptr i64 %150 to i16*
  %152 = sext i32 %5 to i64
  br label %153

153:                                              ; preds = %153, %148
  %154 = phi i64 [ 0, %148 ], [ %188, %153 ]
  %155 = phi i64 [ 0, %148 ], [ %184, %153 ]
  %156 = phi i32 [ 0, %148 ], [ %191, %153 ]
  %157 = phi i16* [ %151, %148 ], [ %190, %153 ]
  %158 = phi i16* [ %81, %148 ], [ %189, %153 ]
  %159 = bitcast i16* %158 to <4 x i16>*
  %160 = load <4 x i16>, <4 x i16>* %159, align 2
  %161 = zext <4 x i16> %160 to <4 x i32>
  %162 = bitcast i16* %157 to <4 x i16>*
  %163 = load <4 x i16>, <4 x i16>* %162, align 2
  %164 = zext <4 x i16> %163 to <4 x i32>
  %165 = sub nsw <4 x i32> %161, %164
  %166 = sext <4 x i32> %165 to <4 x i64>
  %167 = extractelement <4 x i32> %165, i32 0
  %168 = mul nsw i32 %167, %167
  %169 = zext i32 %168 to i64
  %170 = add i64 %154, %169
  %171 = extractelement <4 x i32> %165, i32 1
  %172 = mul nsw i32 %171, %171
  %173 = zext i32 %172 to i64
  %174 = add i64 %170, %173
  %175 = extractelement <4 x i32> %165, i32 2
  %176 = mul nsw i32 %175, %175
  %177 = zext i32 %176 to i64
  %178 = add i64 %174, %177
  %179 = shufflevector <4 x i64> %166, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %180 = add nsw <4 x i64> %179, %166
  %181 = shufflevector <4 x i64> %180, <4 x i64> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %182 = add nsw <4 x i64> %180, %181
  %183 = extractelement <4 x i64> %182, i32 0
  %184 = add nsw i64 %183, %155
  %185 = extractelement <4 x i32> %165, i32 3
  %186 = mul nsw i32 %185, %185
  %187 = zext i32 %186 to i64
  %188 = add i64 %178, %187
  %189 = getelementptr inbounds i16, i16* %158, i64 4
  %190 = getelementptr inbounds i16, i16* %157, i64 %152
  %191 = add nuw nsw i32 %156, 1
  %192 = icmp eq i32 %191, 8
  br i1 %192, label %193, label %153

193:                                              ; preds = %153
  %194 = add i64 %188, 8
  %195 = lshr i64 %194, 4
  %196 = trunc i64 %195 to i32
  store i32 %196, i32* %6, align 4
  %197 = and i64 %195, 4294967295
  %198 = shl i64 %184, 30
  %199 = add i64 %198, 2147483648
  %200 = ashr i64 %199, 32
  %201 = mul nsw i64 %200, %200
  %202 = lshr i64 %201, 5
  %203 = sub nsw i64 %197, %202
  %204 = icmp sgt i64 %203, -1
  %205 = trunc i64 %203 to i32
  %206 = select i1 %204, i32 %205, i32 0
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %11) #4
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %10) #4
  ret i32 %206
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_highbd_12_sub_pixel_variance4x8_c(i8*, i32, i32, i32, i8*, i32, i32* nocapture) local_unnamed_addr #2 {
  %8 = alloca [36 x i16], align 16
  %9 = alloca [32 x i16], align 16
  %10 = bitcast [36 x i16]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %10) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %10, i8 -86, i64 72, i1 false)
  %11 = bitcast [32 x i16]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %11) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %11, i8 -86, i64 64, i1 false)
  %12 = getelementptr inbounds [36 x i16], [36 x i16]* %8, i64 0, i64 0
  %13 = sext i32 %2 to i64
  %14 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %13, i64 0
  %15 = ptrtoint i8* %0 to i64
  %16 = shl i64 %15, 1
  %17 = inttoptr i64 %16 to i16*
  %18 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %13, i64 1
  %19 = add i32 %1, -4
  %20 = zext i32 %19 to i64
  %21 = load i8, i8* %14, align 2
  %22 = zext i8 %21 to i32
  %23 = load i8, i8* %18, align 1
  %24 = zext i8 %23 to i32
  br label %25

25:                                               ; preds = %25, %7
  %26 = phi i16* [ %17, %7 ], [ %76, %25 ]
  %27 = phi i32 [ 0, %7 ], [ %78, %25 ]
  %28 = phi i16* [ %12, %7 ], [ %77, %25 ]
  %29 = load i16, i16* %26, align 2
  %30 = zext i16 %29 to i32
  %31 = mul nuw nsw i32 %22, %30
  %32 = getelementptr inbounds i16, i16* %26, i64 1
  %33 = load i16, i16* %32, align 2
  %34 = zext i16 %33 to i32
  %35 = mul nuw nsw i32 %24, %34
  %36 = add nuw nsw i32 %31, 64
  %37 = add nuw nsw i32 %36, %35
  %38 = lshr i32 %37, 7
  %39 = trunc i32 %38 to i16
  store i16 %39, i16* %28, align 2
  %40 = load i16, i16* %32, align 2
  %41 = zext i16 %40 to i32
  %42 = mul nuw nsw i32 %22, %41
  %43 = getelementptr inbounds i16, i16* %26, i64 2
  %44 = load i16, i16* %43, align 2
  %45 = zext i16 %44 to i32
  %46 = mul nuw nsw i32 %24, %45
  %47 = add nuw nsw i32 %42, 64
  %48 = add nuw nsw i32 %47, %46
  %49 = lshr i32 %48, 7
  %50 = trunc i32 %49 to i16
  %51 = getelementptr inbounds i16, i16* %28, i64 1
  store i16 %50, i16* %51, align 2
  %52 = load i16, i16* %43, align 2
  %53 = zext i16 %52 to i32
  %54 = mul nuw nsw i32 %22, %53
  %55 = getelementptr inbounds i16, i16* %26, i64 3
  %56 = load i16, i16* %55, align 2
  %57 = zext i16 %56 to i32
  %58 = mul nuw nsw i32 %24, %57
  %59 = add nuw nsw i32 %54, 64
  %60 = add nuw nsw i32 %59, %58
  %61 = lshr i32 %60, 7
  %62 = trunc i32 %61 to i16
  %63 = getelementptr inbounds i16, i16* %28, i64 2
  store i16 %62, i16* %63, align 2
  %64 = load i16, i16* %55, align 2
  %65 = zext i16 %64 to i32
  %66 = mul nuw nsw i32 %22, %65
  %67 = getelementptr inbounds i16, i16* %26, i64 4
  %68 = load i16, i16* %67, align 2
  %69 = zext i16 %68 to i32
  %70 = mul nuw nsw i32 %24, %69
  %71 = add nuw nsw i32 %66, 64
  %72 = add nuw nsw i32 %71, %70
  %73 = lshr i32 %72, 7
  %74 = trunc i32 %73 to i16
  %75 = getelementptr inbounds i16, i16* %28, i64 3
  store i16 %74, i16* %75, align 2
  %76 = getelementptr inbounds i16, i16* %67, i64 %20
  %77 = getelementptr inbounds i16, i16* %28, i64 4
  %78 = add nuw nsw i32 %27, 1
  %79 = icmp eq i32 %78, 9
  br i1 %79, label %80, label %25

80:                                               ; preds = %25
  %81 = getelementptr inbounds [32 x i16], [32 x i16]* %9, i64 0, i64 0
  %82 = sext i32 %3 to i64
  %83 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %82, i64 0
  %84 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %82, i64 1
  %85 = load i8, i8* %83, align 2
  %86 = zext i8 %85 to i32
  %87 = load i8, i8* %84, align 1
  %88 = zext i8 %87 to i32
  %89 = load i16, i16* %12, align 16
  br label %90

90:                                               ; preds = %90, %80
  %91 = phi i16 [ %89, %80 ], [ %98, %90 ]
  %92 = phi i32 [ 0, %80 ], [ %146, %90 ]
  %93 = phi i16* [ %12, %80 ], [ %144, %90 ]
  %94 = phi i16* [ %81, %80 ], [ %145, %90 ]
  %95 = zext i16 %91 to i32
  %96 = mul nuw nsw i32 %86, %95
  %97 = getelementptr inbounds i16, i16* %93, i64 4
  %98 = load i16, i16* %97, align 2
  %99 = zext i16 %98 to i32
  %100 = mul nuw nsw i32 %88, %99
  %101 = add nuw nsw i32 %96, 64
  %102 = add nuw nsw i32 %101, %100
  %103 = lshr i32 %102, 7
  %104 = trunc i32 %103 to i16
  store i16 %104, i16* %94, align 2
  %105 = getelementptr inbounds i16, i16* %93, i64 1
  %106 = load i16, i16* %105, align 2
  %107 = zext i16 %106 to i32
  %108 = mul nuw nsw i32 %86, %107
  %109 = getelementptr inbounds i16, i16* %93, i64 5
  %110 = load i16, i16* %109, align 2
  %111 = zext i16 %110 to i32
  %112 = mul nuw nsw i32 %88, %111
  %113 = add nuw nsw i32 %108, 64
  %114 = add nuw nsw i32 %113, %112
  %115 = lshr i32 %114, 7
  %116 = trunc i32 %115 to i16
  %117 = getelementptr inbounds i16, i16* %94, i64 1
  store i16 %116, i16* %117, align 2
  %118 = getelementptr inbounds i16, i16* %93, i64 2
  %119 = load i16, i16* %118, align 2
  %120 = zext i16 %119 to i32
  %121 = mul nuw nsw i32 %86, %120
  %122 = getelementptr inbounds i16, i16* %93, i64 6
  %123 = load i16, i16* %122, align 2
  %124 = zext i16 %123 to i32
  %125 = mul nuw nsw i32 %88, %124
  %126 = add nuw nsw i32 %121, 64
  %127 = add nuw nsw i32 %126, %125
  %128 = lshr i32 %127, 7
  %129 = trunc i32 %128 to i16
  %130 = getelementptr inbounds i16, i16* %94, i64 2
  store i16 %129, i16* %130, align 2
  %131 = getelementptr inbounds i16, i16* %93, i64 3
  %132 = load i16, i16* %131, align 2
  %133 = zext i16 %132 to i32
  %134 = mul nuw nsw i32 %86, %133
  %135 = getelementptr inbounds i16, i16* %93, i64 7
  %136 = load i16, i16* %135, align 2
  %137 = zext i16 %136 to i32
  %138 = mul nuw nsw i32 %88, %137
  %139 = add nuw nsw i32 %134, 64
  %140 = add nuw nsw i32 %139, %138
  %141 = lshr i32 %140, 7
  %142 = trunc i32 %141 to i16
  %143 = getelementptr inbounds i16, i16* %94, i64 3
  store i16 %142, i16* %143, align 2
  %144 = getelementptr inbounds i16, i16* %93, i64 4
  %145 = getelementptr inbounds i16, i16* %94, i64 4
  %146 = add nuw nsw i32 %92, 1
  %147 = icmp eq i32 %146, 8
  br i1 %147, label %148, label %90

148:                                              ; preds = %90
  %149 = ptrtoint i8* %4 to i64
  %150 = shl i64 %149, 1
  %151 = inttoptr i64 %150 to i16*
  %152 = sext i32 %5 to i64
  br label %153

153:                                              ; preds = %153, %148
  %154 = phi i64 [ 0, %148 ], [ %188, %153 ]
  %155 = phi i64 [ 0, %148 ], [ %184, %153 ]
  %156 = phi i32 [ 0, %148 ], [ %191, %153 ]
  %157 = phi i16* [ %151, %148 ], [ %190, %153 ]
  %158 = phi i16* [ %81, %148 ], [ %189, %153 ]
  %159 = bitcast i16* %158 to <4 x i16>*
  %160 = load <4 x i16>, <4 x i16>* %159, align 2
  %161 = zext <4 x i16> %160 to <4 x i32>
  %162 = bitcast i16* %157 to <4 x i16>*
  %163 = load <4 x i16>, <4 x i16>* %162, align 2
  %164 = zext <4 x i16> %163 to <4 x i32>
  %165 = sub nsw <4 x i32> %161, %164
  %166 = sext <4 x i32> %165 to <4 x i64>
  %167 = extractelement <4 x i32> %165, i32 0
  %168 = mul nsw i32 %167, %167
  %169 = zext i32 %168 to i64
  %170 = add i64 %154, %169
  %171 = extractelement <4 x i32> %165, i32 1
  %172 = mul nsw i32 %171, %171
  %173 = zext i32 %172 to i64
  %174 = add i64 %170, %173
  %175 = extractelement <4 x i32> %165, i32 2
  %176 = mul nsw i32 %175, %175
  %177 = zext i32 %176 to i64
  %178 = add i64 %174, %177
  %179 = shufflevector <4 x i64> %166, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %180 = add nsw <4 x i64> %179, %166
  %181 = shufflevector <4 x i64> %180, <4 x i64> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %182 = add nsw <4 x i64> %180, %181
  %183 = extractelement <4 x i64> %182, i32 0
  %184 = add nsw i64 %183, %155
  %185 = extractelement <4 x i32> %165, i32 3
  %186 = mul nsw i32 %185, %185
  %187 = zext i32 %186 to i64
  %188 = add i64 %178, %187
  %189 = getelementptr inbounds i16, i16* %158, i64 4
  %190 = getelementptr inbounds i16, i16* %157, i64 %152
  %191 = add nuw nsw i32 %156, 1
  %192 = icmp eq i32 %191, 8
  br i1 %192, label %193, label %153

193:                                              ; preds = %153
  %194 = add i64 %188, 128
  %195 = lshr i64 %194, 8
  %196 = trunc i64 %195 to i32
  store i32 %196, i32* %6, align 4
  %197 = and i64 %195, 4294967295
  %198 = shl i64 %184, 28
  %199 = add i64 %198, 2147483648
  %200 = ashr i64 %199, 32
  %201 = mul nsw i64 %200, %200
  %202 = lshr i64 %201, 5
  %203 = sub nsw i64 %197, %202
  %204 = icmp sgt i64 %203, -1
  %205 = trunc i64 %203 to i32
  %206 = select i1 %204, i32 %205, i32 0
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %11) #4
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %10) #4
  ret i32 %206
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_highbd_8_sub_pixel_avg_variance4x8_c(i8*, i32, i32, i32, i8*, i32, i32* nocapture, i8*) local_unnamed_addr #2 {
  %9 = alloca [36 x i16], align 16
  %10 = alloca [32 x i16], align 16
  %11 = alloca [32 x i16], align 16
  %12 = bitcast [36 x i16]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %12) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %12, i8 -86, i64 72, i1 false)
  %13 = bitcast [32 x i16]* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %13) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %13, i8 -86, i64 64, i1 false)
  %14 = bitcast [32 x i16]* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %14) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %14, i8 -86, i64 64, i1 false)
  %15 = getelementptr inbounds [36 x i16], [36 x i16]* %9, i64 0, i64 0
  %16 = sext i32 %2 to i64
  %17 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %16, i64 0
  %18 = ptrtoint i8* %0 to i64
  %19 = shl i64 %18, 1
  %20 = inttoptr i64 %19 to i16*
  %21 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %16, i64 1
  %22 = add i32 %1, -4
  %23 = zext i32 %22 to i64
  %24 = load i8, i8* %17, align 2
  %25 = zext i8 %24 to i32
  %26 = load i8, i8* %21, align 1
  %27 = zext i8 %26 to i32
  br label %28

28:                                               ; preds = %28, %8
  %29 = phi i16* [ %20, %8 ], [ %79, %28 ]
  %30 = phi i32 [ 0, %8 ], [ %81, %28 ]
  %31 = phi i16* [ %15, %8 ], [ %80, %28 ]
  %32 = load i16, i16* %29, align 2
  %33 = zext i16 %32 to i32
  %34 = mul nuw nsw i32 %25, %33
  %35 = getelementptr inbounds i16, i16* %29, i64 1
  %36 = load i16, i16* %35, align 2
  %37 = zext i16 %36 to i32
  %38 = mul nuw nsw i32 %27, %37
  %39 = add nuw nsw i32 %34, 64
  %40 = add nuw nsw i32 %39, %38
  %41 = lshr i32 %40, 7
  %42 = trunc i32 %41 to i16
  store i16 %42, i16* %31, align 2
  %43 = load i16, i16* %35, align 2
  %44 = zext i16 %43 to i32
  %45 = mul nuw nsw i32 %25, %44
  %46 = getelementptr inbounds i16, i16* %29, i64 2
  %47 = load i16, i16* %46, align 2
  %48 = zext i16 %47 to i32
  %49 = mul nuw nsw i32 %27, %48
  %50 = add nuw nsw i32 %45, 64
  %51 = add nuw nsw i32 %50, %49
  %52 = lshr i32 %51, 7
  %53 = trunc i32 %52 to i16
  %54 = getelementptr inbounds i16, i16* %31, i64 1
  store i16 %53, i16* %54, align 2
  %55 = load i16, i16* %46, align 2
  %56 = zext i16 %55 to i32
  %57 = mul nuw nsw i32 %25, %56
  %58 = getelementptr inbounds i16, i16* %29, i64 3
  %59 = load i16, i16* %58, align 2
  %60 = zext i16 %59 to i32
  %61 = mul nuw nsw i32 %27, %60
  %62 = add nuw nsw i32 %57, 64
  %63 = add nuw nsw i32 %62, %61
  %64 = lshr i32 %63, 7
  %65 = trunc i32 %64 to i16
  %66 = getelementptr inbounds i16, i16* %31, i64 2
  store i16 %65, i16* %66, align 2
  %67 = load i16, i16* %58, align 2
  %68 = zext i16 %67 to i32
  %69 = mul nuw nsw i32 %25, %68
  %70 = getelementptr inbounds i16, i16* %29, i64 4
  %71 = load i16, i16* %70, align 2
  %72 = zext i16 %71 to i32
  %73 = mul nuw nsw i32 %27, %72
  %74 = add nuw nsw i32 %69, 64
  %75 = add nuw nsw i32 %74, %73
  %76 = lshr i32 %75, 7
  %77 = trunc i32 %76 to i16
  %78 = getelementptr inbounds i16, i16* %31, i64 3
  store i16 %77, i16* %78, align 2
  %79 = getelementptr inbounds i16, i16* %70, i64 %23
  %80 = getelementptr inbounds i16, i16* %31, i64 4
  %81 = add nuw nsw i32 %30, 1
  %82 = icmp eq i32 %81, 9
  br i1 %82, label %83, label %28

83:                                               ; preds = %28
  %84 = getelementptr inbounds [32 x i16], [32 x i16]* %10, i64 0, i64 0
  %85 = sext i32 %3 to i64
  %86 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %85, i64 0
  %87 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %85, i64 1
  %88 = load i8, i8* %86, align 2
  %89 = zext i8 %88 to i32
  %90 = load i8, i8* %87, align 1
  %91 = zext i8 %90 to i32
  %92 = load i16, i16* %15, align 16
  br label %93

93:                                               ; preds = %93, %83
  %94 = phi i16 [ %92, %83 ], [ %101, %93 ]
  %95 = phi i32 [ 0, %83 ], [ %149, %93 ]
  %96 = phi i16* [ %15, %83 ], [ %147, %93 ]
  %97 = phi i16* [ %84, %83 ], [ %148, %93 ]
  %98 = zext i16 %94 to i32
  %99 = mul nuw nsw i32 %89, %98
  %100 = getelementptr inbounds i16, i16* %96, i64 4
  %101 = load i16, i16* %100, align 2
  %102 = zext i16 %101 to i32
  %103 = mul nuw nsw i32 %91, %102
  %104 = add nuw nsw i32 %99, 64
  %105 = add nuw nsw i32 %104, %103
  %106 = lshr i32 %105, 7
  %107 = trunc i32 %106 to i16
  store i16 %107, i16* %97, align 2
  %108 = getelementptr inbounds i16, i16* %96, i64 1
  %109 = load i16, i16* %108, align 2
  %110 = zext i16 %109 to i32
  %111 = mul nuw nsw i32 %89, %110
  %112 = getelementptr inbounds i16, i16* %96, i64 5
  %113 = load i16, i16* %112, align 2
  %114 = zext i16 %113 to i32
  %115 = mul nuw nsw i32 %91, %114
  %116 = add nuw nsw i32 %111, 64
  %117 = add nuw nsw i32 %116, %115
  %118 = lshr i32 %117, 7
  %119 = trunc i32 %118 to i16
  %120 = getelementptr inbounds i16, i16* %97, i64 1
  store i16 %119, i16* %120, align 2
  %121 = getelementptr inbounds i16, i16* %96, i64 2
  %122 = load i16, i16* %121, align 2
  %123 = zext i16 %122 to i32
  %124 = mul nuw nsw i32 %89, %123
  %125 = getelementptr inbounds i16, i16* %96, i64 6
  %126 = load i16, i16* %125, align 2
  %127 = zext i16 %126 to i32
  %128 = mul nuw nsw i32 %91, %127
  %129 = add nuw nsw i32 %124, 64
  %130 = add nuw nsw i32 %129, %128
  %131 = lshr i32 %130, 7
  %132 = trunc i32 %131 to i16
  %133 = getelementptr inbounds i16, i16* %97, i64 2
  store i16 %132, i16* %133, align 2
  %134 = getelementptr inbounds i16, i16* %96, i64 3
  %135 = load i16, i16* %134, align 2
  %136 = zext i16 %135 to i32
  %137 = mul nuw nsw i32 %89, %136
  %138 = getelementptr inbounds i16, i16* %96, i64 7
  %139 = load i16, i16* %138, align 2
  %140 = zext i16 %139 to i32
  %141 = mul nuw nsw i32 %91, %140
  %142 = add nuw nsw i32 %137, 64
  %143 = add nuw nsw i32 %142, %141
  %144 = lshr i32 %143, 7
  %145 = trunc i32 %144 to i16
  %146 = getelementptr inbounds i16, i16* %97, i64 3
  store i16 %145, i16* %146, align 2
  %147 = getelementptr inbounds i16, i16* %96, i64 4
  %148 = getelementptr inbounds i16, i16* %97, i64 4
  %149 = add nuw nsw i32 %95, 1
  %150 = icmp eq i32 %149, 8
  br i1 %150, label %151, label %93

151:                                              ; preds = %93
  %152 = getelementptr inbounds [32 x i16], [32 x i16]* %11, i64 0, i64 0
  %153 = ptrtoint i8* %7 to i64
  %154 = shl i64 %153, 1
  %155 = inttoptr i64 %154 to i16*
  br label %156

156:                                              ; preds = %156, %151
  %157 = phi i16* [ %152, %151 ], [ %202, %156 ]
  %158 = phi i32 [ 0, %151 ], [ %205, %156 ]
  %159 = phi i16* [ %155, %151 ], [ %203, %156 ]
  %160 = phi i16* [ %84, %151 ], [ %204, %156 ]
  %161 = load i16, i16* %159, align 2
  %162 = zext i16 %161 to i32
  %163 = load i16, i16* %160, align 2
  %164 = zext i16 %163 to i32
  %165 = add nuw nsw i32 %162, 1
  %166 = add nuw nsw i32 %165, %164
  %167 = lshr i32 %166, 1
  %168 = trunc i32 %167 to i16
  store i16 %168, i16* %157, align 2
  %169 = getelementptr inbounds i16, i16* %159, i64 1
  %170 = load i16, i16* %169, align 2
  %171 = zext i16 %170 to i32
  %172 = getelementptr inbounds i16, i16* %160, i64 1
  %173 = load i16, i16* %172, align 2
  %174 = zext i16 %173 to i32
  %175 = add nuw nsw i32 %171, 1
  %176 = add nuw nsw i32 %175, %174
  %177 = lshr i32 %176, 1
  %178 = trunc i32 %177 to i16
  %179 = getelementptr inbounds i16, i16* %157, i64 1
  store i16 %178, i16* %179, align 2
  %180 = getelementptr inbounds i16, i16* %159, i64 2
  %181 = load i16, i16* %180, align 2
  %182 = zext i16 %181 to i32
  %183 = getelementptr inbounds i16, i16* %160, i64 2
  %184 = load i16, i16* %183, align 2
  %185 = zext i16 %184 to i32
  %186 = add nuw nsw i32 %182, 1
  %187 = add nuw nsw i32 %186, %185
  %188 = lshr i32 %187, 1
  %189 = trunc i32 %188 to i16
  %190 = getelementptr inbounds i16, i16* %157, i64 2
  store i16 %189, i16* %190, align 2
  %191 = getelementptr inbounds i16, i16* %159, i64 3
  %192 = load i16, i16* %191, align 2
  %193 = zext i16 %192 to i32
  %194 = getelementptr inbounds i16, i16* %160, i64 3
  %195 = load i16, i16* %194, align 2
  %196 = zext i16 %195 to i32
  %197 = add nuw nsw i32 %193, 1
  %198 = add nuw nsw i32 %197, %196
  %199 = lshr i32 %198, 1
  %200 = trunc i32 %199 to i16
  %201 = getelementptr inbounds i16, i16* %157, i64 3
  store i16 %200, i16* %201, align 2
  %202 = getelementptr inbounds i16, i16* %157, i64 4
  %203 = getelementptr inbounds i16, i16* %159, i64 4
  %204 = getelementptr inbounds i16, i16* %160, i64 4
  %205 = add nuw nsw i32 %158, 1
  %206 = icmp eq i32 %205, 8
  br i1 %206, label %207, label %156

207:                                              ; preds = %156
  %208 = ptrtoint i8* %4 to i64
  %209 = shl i64 %208, 1
  %210 = inttoptr i64 %209 to i16*
  %211 = sext i32 %5 to i64
  br label %212

212:                                              ; preds = %212, %207
  %213 = phi i64 [ 0, %207 ], [ %247, %212 ]
  %214 = phi i64 [ 0, %207 ], [ %243, %212 ]
  %215 = phi i32 [ 0, %207 ], [ %250, %212 ]
  %216 = phi i16* [ %210, %207 ], [ %249, %212 ]
  %217 = phi i16* [ %152, %207 ], [ %248, %212 ]
  %218 = bitcast i16* %217 to <4 x i16>*
  %219 = load <4 x i16>, <4 x i16>* %218, align 2
  %220 = zext <4 x i16> %219 to <4 x i32>
  %221 = bitcast i16* %216 to <4 x i16>*
  %222 = load <4 x i16>, <4 x i16>* %221, align 2
  %223 = zext <4 x i16> %222 to <4 x i32>
  %224 = sub nsw <4 x i32> %220, %223
  %225 = sext <4 x i32> %224 to <4 x i64>
  %226 = extractelement <4 x i32> %224, i32 0
  %227 = mul nsw i32 %226, %226
  %228 = zext i32 %227 to i64
  %229 = add i64 %213, %228
  %230 = extractelement <4 x i32> %224, i32 1
  %231 = mul nsw i32 %230, %230
  %232 = zext i32 %231 to i64
  %233 = add i64 %229, %232
  %234 = extractelement <4 x i32> %224, i32 2
  %235 = mul nsw i32 %234, %234
  %236 = zext i32 %235 to i64
  %237 = add i64 %233, %236
  %238 = shufflevector <4 x i64> %225, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %239 = add nsw <4 x i64> %238, %225
  %240 = shufflevector <4 x i64> %239, <4 x i64> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %241 = add nsw <4 x i64> %239, %240
  %242 = extractelement <4 x i64> %241, i32 0
  %243 = add nsw i64 %242, %214
  %244 = extractelement <4 x i32> %224, i32 3
  %245 = mul nsw i32 %244, %244
  %246 = zext i32 %245 to i64
  %247 = add i64 %237, %246
  %248 = getelementptr inbounds i16, i16* %217, i64 4
  %249 = getelementptr inbounds i16, i16* %216, i64 %211
  %250 = add nuw nsw i32 %215, 1
  %251 = icmp eq i32 %250, 8
  br i1 %251, label %252, label %212

252:                                              ; preds = %212
  %253 = trunc i64 %247 to i32
  store i32 %253, i32* %6, align 4
  %254 = shl i64 %243, 32
  %255 = ashr exact i64 %254, 32
  %256 = mul nsw i64 %255, %255
  %257 = lshr i64 %256, 5
  %258 = trunc i64 %257 to i32
  %259 = sub i32 %253, %258
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %14) #4
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %13) #4
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %12) #4
  ret i32 %259
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_highbd_10_sub_pixel_avg_variance4x8_c(i8*, i32, i32, i32, i8*, i32, i32* nocapture, i8*) local_unnamed_addr #2 {
  %9 = alloca [36 x i16], align 16
  %10 = alloca [32 x i16], align 16
  %11 = alloca [32 x i16], align 16
  %12 = bitcast [36 x i16]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %12) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %12, i8 -86, i64 72, i1 false)
  %13 = bitcast [32 x i16]* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %13) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %13, i8 -86, i64 64, i1 false)
  %14 = bitcast [32 x i16]* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %14) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %14, i8 -86, i64 64, i1 false)
  %15 = getelementptr inbounds [36 x i16], [36 x i16]* %9, i64 0, i64 0
  %16 = sext i32 %2 to i64
  %17 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %16, i64 0
  %18 = ptrtoint i8* %0 to i64
  %19 = shl i64 %18, 1
  %20 = inttoptr i64 %19 to i16*
  %21 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %16, i64 1
  %22 = add i32 %1, -4
  %23 = zext i32 %22 to i64
  %24 = load i8, i8* %17, align 2
  %25 = zext i8 %24 to i32
  %26 = load i8, i8* %21, align 1
  %27 = zext i8 %26 to i32
  br label %28

28:                                               ; preds = %28, %8
  %29 = phi i16* [ %20, %8 ], [ %79, %28 ]
  %30 = phi i32 [ 0, %8 ], [ %81, %28 ]
  %31 = phi i16* [ %15, %8 ], [ %80, %28 ]
  %32 = load i16, i16* %29, align 2
  %33 = zext i16 %32 to i32
  %34 = mul nuw nsw i32 %25, %33
  %35 = getelementptr inbounds i16, i16* %29, i64 1
  %36 = load i16, i16* %35, align 2
  %37 = zext i16 %36 to i32
  %38 = mul nuw nsw i32 %27, %37
  %39 = add nuw nsw i32 %34, 64
  %40 = add nuw nsw i32 %39, %38
  %41 = lshr i32 %40, 7
  %42 = trunc i32 %41 to i16
  store i16 %42, i16* %31, align 2
  %43 = load i16, i16* %35, align 2
  %44 = zext i16 %43 to i32
  %45 = mul nuw nsw i32 %25, %44
  %46 = getelementptr inbounds i16, i16* %29, i64 2
  %47 = load i16, i16* %46, align 2
  %48 = zext i16 %47 to i32
  %49 = mul nuw nsw i32 %27, %48
  %50 = add nuw nsw i32 %45, 64
  %51 = add nuw nsw i32 %50, %49
  %52 = lshr i32 %51, 7
  %53 = trunc i32 %52 to i16
  %54 = getelementptr inbounds i16, i16* %31, i64 1
  store i16 %53, i16* %54, align 2
  %55 = load i16, i16* %46, align 2
  %56 = zext i16 %55 to i32
  %57 = mul nuw nsw i32 %25, %56
  %58 = getelementptr inbounds i16, i16* %29, i64 3
  %59 = load i16, i16* %58, align 2
  %60 = zext i16 %59 to i32
  %61 = mul nuw nsw i32 %27, %60
  %62 = add nuw nsw i32 %57, 64
  %63 = add nuw nsw i32 %62, %61
  %64 = lshr i32 %63, 7
  %65 = trunc i32 %64 to i16
  %66 = getelementptr inbounds i16, i16* %31, i64 2
  store i16 %65, i16* %66, align 2
  %67 = load i16, i16* %58, align 2
  %68 = zext i16 %67 to i32
  %69 = mul nuw nsw i32 %25, %68
  %70 = getelementptr inbounds i16, i16* %29, i64 4
  %71 = load i16, i16* %70, align 2
  %72 = zext i16 %71 to i32
  %73 = mul nuw nsw i32 %27, %72
  %74 = add nuw nsw i32 %69, 64
  %75 = add nuw nsw i32 %74, %73
  %76 = lshr i32 %75, 7
  %77 = trunc i32 %76 to i16
  %78 = getelementptr inbounds i16, i16* %31, i64 3
  store i16 %77, i16* %78, align 2
  %79 = getelementptr inbounds i16, i16* %70, i64 %23
  %80 = getelementptr inbounds i16, i16* %31, i64 4
  %81 = add nuw nsw i32 %30, 1
  %82 = icmp eq i32 %81, 9
  br i1 %82, label %83, label %28

83:                                               ; preds = %28
  %84 = getelementptr inbounds [32 x i16], [32 x i16]* %10, i64 0, i64 0
  %85 = sext i32 %3 to i64
  %86 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %85, i64 0
  %87 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %85, i64 1
  %88 = load i8, i8* %86, align 2
  %89 = zext i8 %88 to i32
  %90 = load i8, i8* %87, align 1
  %91 = zext i8 %90 to i32
  %92 = load i16, i16* %15, align 16
  br label %93

93:                                               ; preds = %93, %83
  %94 = phi i16 [ %92, %83 ], [ %101, %93 ]
  %95 = phi i32 [ 0, %83 ], [ %149, %93 ]
  %96 = phi i16* [ %15, %83 ], [ %147, %93 ]
  %97 = phi i16* [ %84, %83 ], [ %148, %93 ]
  %98 = zext i16 %94 to i32
  %99 = mul nuw nsw i32 %89, %98
  %100 = getelementptr inbounds i16, i16* %96, i64 4
  %101 = load i16, i16* %100, align 2
  %102 = zext i16 %101 to i32
  %103 = mul nuw nsw i32 %91, %102
  %104 = add nuw nsw i32 %99, 64
  %105 = add nuw nsw i32 %104, %103
  %106 = lshr i32 %105, 7
  %107 = trunc i32 %106 to i16
  store i16 %107, i16* %97, align 2
  %108 = getelementptr inbounds i16, i16* %96, i64 1
  %109 = load i16, i16* %108, align 2
  %110 = zext i16 %109 to i32
  %111 = mul nuw nsw i32 %89, %110
  %112 = getelementptr inbounds i16, i16* %96, i64 5
  %113 = load i16, i16* %112, align 2
  %114 = zext i16 %113 to i32
  %115 = mul nuw nsw i32 %91, %114
  %116 = add nuw nsw i32 %111, 64
  %117 = add nuw nsw i32 %116, %115
  %118 = lshr i32 %117, 7
  %119 = trunc i32 %118 to i16
  %120 = getelementptr inbounds i16, i16* %97, i64 1
  store i16 %119, i16* %120, align 2
  %121 = getelementptr inbounds i16, i16* %96, i64 2
  %122 = load i16, i16* %121, align 2
  %123 = zext i16 %122 to i32
  %124 = mul nuw nsw i32 %89, %123
  %125 = getelementptr inbounds i16, i16* %96, i64 6
  %126 = load i16, i16* %125, align 2
  %127 = zext i16 %126 to i32
  %128 = mul nuw nsw i32 %91, %127
  %129 = add nuw nsw i32 %124, 64
  %130 = add nuw nsw i32 %129, %128
  %131 = lshr i32 %130, 7
  %132 = trunc i32 %131 to i16
  %133 = getelementptr inbounds i16, i16* %97, i64 2
  store i16 %132, i16* %133, align 2
  %134 = getelementptr inbounds i16, i16* %96, i64 3
  %135 = load i16, i16* %134, align 2
  %136 = zext i16 %135 to i32
  %137 = mul nuw nsw i32 %89, %136
  %138 = getelementptr inbounds i16, i16* %96, i64 7
  %139 = load i16, i16* %138, align 2
  %140 = zext i16 %139 to i32
  %141 = mul nuw nsw i32 %91, %140
  %142 = add nuw nsw i32 %137, 64
  %143 = add nuw nsw i32 %142, %141
  %144 = lshr i32 %143, 7
  %145 = trunc i32 %144 to i16
  %146 = getelementptr inbounds i16, i16* %97, i64 3
  store i16 %145, i16* %146, align 2
  %147 = getelementptr inbounds i16, i16* %96, i64 4
  %148 = getelementptr inbounds i16, i16* %97, i64 4
  %149 = add nuw nsw i32 %95, 1
  %150 = icmp eq i32 %149, 8
  br i1 %150, label %151, label %93

151:                                              ; preds = %93
  %152 = getelementptr inbounds [32 x i16], [32 x i16]* %11, i64 0, i64 0
  %153 = ptrtoint i8* %7 to i64
  %154 = shl i64 %153, 1
  %155 = inttoptr i64 %154 to i16*
  br label %156

156:                                              ; preds = %156, %151
  %157 = phi i16* [ %152, %151 ], [ %202, %156 ]
  %158 = phi i32 [ 0, %151 ], [ %205, %156 ]
  %159 = phi i16* [ %155, %151 ], [ %203, %156 ]
  %160 = phi i16* [ %84, %151 ], [ %204, %156 ]
  %161 = load i16, i16* %159, align 2
  %162 = zext i16 %161 to i32
  %163 = load i16, i16* %160, align 2
  %164 = zext i16 %163 to i32
  %165 = add nuw nsw i32 %162, 1
  %166 = add nuw nsw i32 %165, %164
  %167 = lshr i32 %166, 1
  %168 = trunc i32 %167 to i16
  store i16 %168, i16* %157, align 2
  %169 = getelementptr inbounds i16, i16* %159, i64 1
  %170 = load i16, i16* %169, align 2
  %171 = zext i16 %170 to i32
  %172 = getelementptr inbounds i16, i16* %160, i64 1
  %173 = load i16, i16* %172, align 2
  %174 = zext i16 %173 to i32
  %175 = add nuw nsw i32 %171, 1
  %176 = add nuw nsw i32 %175, %174
  %177 = lshr i32 %176, 1
  %178 = trunc i32 %177 to i16
  %179 = getelementptr inbounds i16, i16* %157, i64 1
  store i16 %178, i16* %179, align 2
  %180 = getelementptr inbounds i16, i16* %159, i64 2
  %181 = load i16, i16* %180, align 2
  %182 = zext i16 %181 to i32
  %183 = getelementptr inbounds i16, i16* %160, i64 2
  %184 = load i16, i16* %183, align 2
  %185 = zext i16 %184 to i32
  %186 = add nuw nsw i32 %182, 1
  %187 = add nuw nsw i32 %186, %185
  %188 = lshr i32 %187, 1
  %189 = trunc i32 %188 to i16
  %190 = getelementptr inbounds i16, i16* %157, i64 2
  store i16 %189, i16* %190, align 2
  %191 = getelementptr inbounds i16, i16* %159, i64 3
  %192 = load i16, i16* %191, align 2
  %193 = zext i16 %192 to i32
  %194 = getelementptr inbounds i16, i16* %160, i64 3
  %195 = load i16, i16* %194, align 2
  %196 = zext i16 %195 to i32
  %197 = add nuw nsw i32 %193, 1
  %198 = add nuw nsw i32 %197, %196
  %199 = lshr i32 %198, 1
  %200 = trunc i32 %199 to i16
  %201 = getelementptr inbounds i16, i16* %157, i64 3
  store i16 %200, i16* %201, align 2
  %202 = getelementptr inbounds i16, i16* %157, i64 4
  %203 = getelementptr inbounds i16, i16* %159, i64 4
  %204 = getelementptr inbounds i16, i16* %160, i64 4
  %205 = add nuw nsw i32 %158, 1
  %206 = icmp eq i32 %205, 8
  br i1 %206, label %207, label %156

207:                                              ; preds = %156
  %208 = ptrtoint i8* %4 to i64
  %209 = shl i64 %208, 1
  %210 = inttoptr i64 %209 to i16*
  %211 = sext i32 %5 to i64
  br label %212

212:                                              ; preds = %212, %207
  %213 = phi i64 [ 0, %207 ], [ %247, %212 ]
  %214 = phi i64 [ 0, %207 ], [ %243, %212 ]
  %215 = phi i32 [ 0, %207 ], [ %250, %212 ]
  %216 = phi i16* [ %210, %207 ], [ %249, %212 ]
  %217 = phi i16* [ %152, %207 ], [ %248, %212 ]
  %218 = bitcast i16* %217 to <4 x i16>*
  %219 = load <4 x i16>, <4 x i16>* %218, align 2
  %220 = zext <4 x i16> %219 to <4 x i32>
  %221 = bitcast i16* %216 to <4 x i16>*
  %222 = load <4 x i16>, <4 x i16>* %221, align 2
  %223 = zext <4 x i16> %222 to <4 x i32>
  %224 = sub nsw <4 x i32> %220, %223
  %225 = sext <4 x i32> %224 to <4 x i64>
  %226 = extractelement <4 x i32> %224, i32 0
  %227 = mul nsw i32 %226, %226
  %228 = zext i32 %227 to i64
  %229 = add i64 %213, %228
  %230 = extractelement <4 x i32> %224, i32 1
  %231 = mul nsw i32 %230, %230
  %232 = zext i32 %231 to i64
  %233 = add i64 %229, %232
  %234 = extractelement <4 x i32> %224, i32 2
  %235 = mul nsw i32 %234, %234
  %236 = zext i32 %235 to i64
  %237 = add i64 %233, %236
  %238 = shufflevector <4 x i64> %225, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %239 = add nsw <4 x i64> %238, %225
  %240 = shufflevector <4 x i64> %239, <4 x i64> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %241 = add nsw <4 x i64> %239, %240
  %242 = extractelement <4 x i64> %241, i32 0
  %243 = add nsw i64 %242, %214
  %244 = extractelement <4 x i32> %224, i32 3
  %245 = mul nsw i32 %244, %244
  %246 = zext i32 %245 to i64
  %247 = add i64 %237, %246
  %248 = getelementptr inbounds i16, i16* %217, i64 4
  %249 = getelementptr inbounds i16, i16* %216, i64 %211
  %250 = add nuw nsw i32 %215, 1
  %251 = icmp eq i32 %250, 8
  br i1 %251, label %252, label %212

252:                                              ; preds = %212
  %253 = add i64 %247, 8
  %254 = lshr i64 %253, 4
  %255 = trunc i64 %254 to i32
  store i32 %255, i32* %6, align 4
  %256 = and i64 %254, 4294967295
  %257 = shl i64 %243, 30
  %258 = add i64 %257, 2147483648
  %259 = ashr i64 %258, 32
  %260 = mul nsw i64 %259, %259
  %261 = lshr i64 %260, 5
  %262 = sub nsw i64 %256, %261
  %263 = icmp sgt i64 %262, -1
  %264 = trunc i64 %262 to i32
  %265 = select i1 %263, i32 %264, i32 0
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %14) #4
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %13) #4
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %12) #4
  ret i32 %265
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_highbd_12_sub_pixel_avg_variance4x8_c(i8*, i32, i32, i32, i8*, i32, i32* nocapture, i8*) local_unnamed_addr #2 {
  %9 = alloca [36 x i16], align 16
  %10 = alloca [32 x i16], align 16
  %11 = alloca [32 x i16], align 16
  %12 = bitcast [36 x i16]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %12) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %12, i8 -86, i64 72, i1 false)
  %13 = bitcast [32 x i16]* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %13) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %13, i8 -86, i64 64, i1 false)
  %14 = bitcast [32 x i16]* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %14) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %14, i8 -86, i64 64, i1 false)
  %15 = getelementptr inbounds [36 x i16], [36 x i16]* %9, i64 0, i64 0
  %16 = sext i32 %2 to i64
  %17 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %16, i64 0
  %18 = ptrtoint i8* %0 to i64
  %19 = shl i64 %18, 1
  %20 = inttoptr i64 %19 to i16*
  %21 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %16, i64 1
  %22 = add i32 %1, -4
  %23 = zext i32 %22 to i64
  %24 = load i8, i8* %17, align 2
  %25 = zext i8 %24 to i32
  %26 = load i8, i8* %21, align 1
  %27 = zext i8 %26 to i32
  br label %28

28:                                               ; preds = %28, %8
  %29 = phi i16* [ %20, %8 ], [ %79, %28 ]
  %30 = phi i32 [ 0, %8 ], [ %81, %28 ]
  %31 = phi i16* [ %15, %8 ], [ %80, %28 ]
  %32 = load i16, i16* %29, align 2
  %33 = zext i16 %32 to i32
  %34 = mul nuw nsw i32 %25, %33
  %35 = getelementptr inbounds i16, i16* %29, i64 1
  %36 = load i16, i16* %35, align 2
  %37 = zext i16 %36 to i32
  %38 = mul nuw nsw i32 %27, %37
  %39 = add nuw nsw i32 %34, 64
  %40 = add nuw nsw i32 %39, %38
  %41 = lshr i32 %40, 7
  %42 = trunc i32 %41 to i16
  store i16 %42, i16* %31, align 2
  %43 = load i16, i16* %35, align 2
  %44 = zext i16 %43 to i32
  %45 = mul nuw nsw i32 %25, %44
  %46 = getelementptr inbounds i16, i16* %29, i64 2
  %47 = load i16, i16* %46, align 2
  %48 = zext i16 %47 to i32
  %49 = mul nuw nsw i32 %27, %48
  %50 = add nuw nsw i32 %45, 64
  %51 = add nuw nsw i32 %50, %49
  %52 = lshr i32 %51, 7
  %53 = trunc i32 %52 to i16
  %54 = getelementptr inbounds i16, i16* %31, i64 1
  store i16 %53, i16* %54, align 2
  %55 = load i16, i16* %46, align 2
  %56 = zext i16 %55 to i32
  %57 = mul nuw nsw i32 %25, %56
  %58 = getelementptr inbounds i16, i16* %29, i64 3
  %59 = load i16, i16* %58, align 2
  %60 = zext i16 %59 to i32
  %61 = mul nuw nsw i32 %27, %60
  %62 = add nuw nsw i32 %57, 64
  %63 = add nuw nsw i32 %62, %61
  %64 = lshr i32 %63, 7
  %65 = trunc i32 %64 to i16
  %66 = getelementptr inbounds i16, i16* %31, i64 2
  store i16 %65, i16* %66, align 2
  %67 = load i16, i16* %58, align 2
  %68 = zext i16 %67 to i32
  %69 = mul nuw nsw i32 %25, %68
  %70 = getelementptr inbounds i16, i16* %29, i64 4
  %71 = load i16, i16* %70, align 2
  %72 = zext i16 %71 to i32
  %73 = mul nuw nsw i32 %27, %72
  %74 = add nuw nsw i32 %69, 64
  %75 = add nuw nsw i32 %74, %73
  %76 = lshr i32 %75, 7
  %77 = trunc i32 %76 to i16
  %78 = getelementptr inbounds i16, i16* %31, i64 3
  store i16 %77, i16* %78, align 2
  %79 = getelementptr inbounds i16, i16* %70, i64 %23
  %80 = getelementptr inbounds i16, i16* %31, i64 4
  %81 = add nuw nsw i32 %30, 1
  %82 = icmp eq i32 %81, 9
  br i1 %82, label %83, label %28

83:                                               ; preds = %28
  %84 = getelementptr inbounds [32 x i16], [32 x i16]* %10, i64 0, i64 0
  %85 = sext i32 %3 to i64
  %86 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %85, i64 0
  %87 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %85, i64 1
  %88 = load i8, i8* %86, align 2
  %89 = zext i8 %88 to i32
  %90 = load i8, i8* %87, align 1
  %91 = zext i8 %90 to i32
  %92 = load i16, i16* %15, align 16
  br label %93

93:                                               ; preds = %93, %83
  %94 = phi i16 [ %92, %83 ], [ %101, %93 ]
  %95 = phi i32 [ 0, %83 ], [ %149, %93 ]
  %96 = phi i16* [ %15, %83 ], [ %147, %93 ]
  %97 = phi i16* [ %84, %83 ], [ %148, %93 ]
  %98 = zext i16 %94 to i32
  %99 = mul nuw nsw i32 %89, %98
  %100 = getelementptr inbounds i16, i16* %96, i64 4
  %101 = load i16, i16* %100, align 2
  %102 = zext i16 %101 to i32
  %103 = mul nuw nsw i32 %91, %102
  %104 = add nuw nsw i32 %99, 64
  %105 = add nuw nsw i32 %104, %103
  %106 = lshr i32 %105, 7
  %107 = trunc i32 %106 to i16
  store i16 %107, i16* %97, align 2
  %108 = getelementptr inbounds i16, i16* %96, i64 1
  %109 = load i16, i16* %108, align 2
  %110 = zext i16 %109 to i32
  %111 = mul nuw nsw i32 %89, %110
  %112 = getelementptr inbounds i16, i16* %96, i64 5
  %113 = load i16, i16* %112, align 2
  %114 = zext i16 %113 to i32
  %115 = mul nuw nsw i32 %91, %114
  %116 = add nuw nsw i32 %111, 64
  %117 = add nuw nsw i32 %116, %115
  %118 = lshr i32 %117, 7
  %119 = trunc i32 %118 to i16
  %120 = getelementptr inbounds i16, i16* %97, i64 1
  store i16 %119, i16* %120, align 2
  %121 = getelementptr inbounds i16, i16* %96, i64 2
  %122 = load i16, i16* %121, align 2
  %123 = zext i16 %122 to i32
  %124 = mul nuw nsw i32 %89, %123
  %125 = getelementptr inbounds i16, i16* %96, i64 6
  %126 = load i16, i16* %125, align 2
  %127 = zext i16 %126 to i32
  %128 = mul nuw nsw i32 %91, %127
  %129 = add nuw nsw i32 %124, 64
  %130 = add nuw nsw i32 %129, %128
  %131 = lshr i32 %130, 7
  %132 = trunc i32 %131 to i16
  %133 = getelementptr inbounds i16, i16* %97, i64 2
  store i16 %132, i16* %133, align 2
  %134 = getelementptr inbounds i16, i16* %96, i64 3
  %135 = load i16, i16* %134, align 2
  %136 = zext i16 %135 to i32
  %137 = mul nuw nsw i32 %89, %136
  %138 = getelementptr inbounds i16, i16* %96, i64 7
  %139 = load i16, i16* %138, align 2
  %140 = zext i16 %139 to i32
  %141 = mul nuw nsw i32 %91, %140
  %142 = add nuw nsw i32 %137, 64
  %143 = add nuw nsw i32 %142, %141
  %144 = lshr i32 %143, 7
  %145 = trunc i32 %144 to i16
  %146 = getelementptr inbounds i16, i16* %97, i64 3
  store i16 %145, i16* %146, align 2
  %147 = getelementptr inbounds i16, i16* %96, i64 4
  %148 = getelementptr inbounds i16, i16* %97, i64 4
  %149 = add nuw nsw i32 %95, 1
  %150 = icmp eq i32 %149, 8
  br i1 %150, label %151, label %93

151:                                              ; preds = %93
  %152 = getelementptr inbounds [32 x i16], [32 x i16]* %11, i64 0, i64 0
  %153 = ptrtoint i8* %7 to i64
  %154 = shl i64 %153, 1
  %155 = inttoptr i64 %154 to i16*
  br label %156

156:                                              ; preds = %156, %151
  %157 = phi i16* [ %152, %151 ], [ %202, %156 ]
  %158 = phi i32 [ 0, %151 ], [ %205, %156 ]
  %159 = phi i16* [ %155, %151 ], [ %203, %156 ]
  %160 = phi i16* [ %84, %151 ], [ %204, %156 ]
  %161 = load i16, i16* %159, align 2
  %162 = zext i16 %161 to i32
  %163 = load i16, i16* %160, align 2
  %164 = zext i16 %163 to i32
  %165 = add nuw nsw i32 %162, 1
  %166 = add nuw nsw i32 %165, %164
  %167 = lshr i32 %166, 1
  %168 = trunc i32 %167 to i16
  store i16 %168, i16* %157, align 2
  %169 = getelementptr inbounds i16, i16* %159, i64 1
  %170 = load i16, i16* %169, align 2
  %171 = zext i16 %170 to i32
  %172 = getelementptr inbounds i16, i16* %160, i64 1
  %173 = load i16, i16* %172, align 2
  %174 = zext i16 %173 to i32
  %175 = add nuw nsw i32 %171, 1
  %176 = add nuw nsw i32 %175, %174
  %177 = lshr i32 %176, 1
  %178 = trunc i32 %177 to i16
  %179 = getelementptr inbounds i16, i16* %157, i64 1
  store i16 %178, i16* %179, align 2
  %180 = getelementptr inbounds i16, i16* %159, i64 2
  %181 = load i16, i16* %180, align 2
  %182 = zext i16 %181 to i32
  %183 = getelementptr inbounds i16, i16* %160, i64 2
  %184 = load i16, i16* %183, align 2
  %185 = zext i16 %184 to i32
  %186 = add nuw nsw i32 %182, 1
  %187 = add nuw nsw i32 %186, %185
  %188 = lshr i32 %187, 1
  %189 = trunc i32 %188 to i16
  %190 = getelementptr inbounds i16, i16* %157, i64 2
  store i16 %189, i16* %190, align 2
  %191 = getelementptr inbounds i16, i16* %159, i64 3
  %192 = load i16, i16* %191, align 2
  %193 = zext i16 %192 to i32
  %194 = getelementptr inbounds i16, i16* %160, i64 3
  %195 = load i16, i16* %194, align 2
  %196 = zext i16 %195 to i32
  %197 = add nuw nsw i32 %193, 1
  %198 = add nuw nsw i32 %197, %196
  %199 = lshr i32 %198, 1
  %200 = trunc i32 %199 to i16
  %201 = getelementptr inbounds i16, i16* %157, i64 3
  store i16 %200, i16* %201, align 2
  %202 = getelementptr inbounds i16, i16* %157, i64 4
  %203 = getelementptr inbounds i16, i16* %159, i64 4
  %204 = getelementptr inbounds i16, i16* %160, i64 4
  %205 = add nuw nsw i32 %158, 1
  %206 = icmp eq i32 %205, 8
  br i1 %206, label %207, label %156

207:                                              ; preds = %156
  %208 = ptrtoint i8* %4 to i64
  %209 = shl i64 %208, 1
  %210 = inttoptr i64 %209 to i16*
  %211 = sext i32 %5 to i64
  br label %212

212:                                              ; preds = %212, %207
  %213 = phi i64 [ 0, %207 ], [ %247, %212 ]
  %214 = phi i64 [ 0, %207 ], [ %243, %212 ]
  %215 = phi i32 [ 0, %207 ], [ %250, %212 ]
  %216 = phi i16* [ %210, %207 ], [ %249, %212 ]
  %217 = phi i16* [ %152, %207 ], [ %248, %212 ]
  %218 = bitcast i16* %217 to <4 x i16>*
  %219 = load <4 x i16>, <4 x i16>* %218, align 2
  %220 = zext <4 x i16> %219 to <4 x i32>
  %221 = bitcast i16* %216 to <4 x i16>*
  %222 = load <4 x i16>, <4 x i16>* %221, align 2
  %223 = zext <4 x i16> %222 to <4 x i32>
  %224 = sub nsw <4 x i32> %220, %223
  %225 = sext <4 x i32> %224 to <4 x i64>
  %226 = extractelement <4 x i32> %224, i32 0
  %227 = mul nsw i32 %226, %226
  %228 = zext i32 %227 to i64
  %229 = add i64 %213, %228
  %230 = extractelement <4 x i32> %224, i32 1
  %231 = mul nsw i32 %230, %230
  %232 = zext i32 %231 to i64
  %233 = add i64 %229, %232
  %234 = extractelement <4 x i32> %224, i32 2
  %235 = mul nsw i32 %234, %234
  %236 = zext i32 %235 to i64
  %237 = add i64 %233, %236
  %238 = shufflevector <4 x i64> %225, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %239 = add nsw <4 x i64> %238, %225
  %240 = shufflevector <4 x i64> %239, <4 x i64> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %241 = add nsw <4 x i64> %239, %240
  %242 = extractelement <4 x i64> %241, i32 0
  %243 = add nsw i64 %242, %214
  %244 = extractelement <4 x i32> %224, i32 3
  %245 = mul nsw i32 %244, %244
  %246 = zext i32 %245 to i64
  %247 = add i64 %237, %246
  %248 = getelementptr inbounds i16, i16* %217, i64 4
  %249 = getelementptr inbounds i16, i16* %216, i64 %211
  %250 = add nuw nsw i32 %215, 1
  %251 = icmp eq i32 %250, 8
  br i1 %251, label %252, label %212

252:                                              ; preds = %212
  %253 = add i64 %247, 128
  %254 = lshr i64 %253, 8
  %255 = trunc i64 %254 to i32
  store i32 %255, i32* %6, align 4
  %256 = and i64 %254, 4294967295
  %257 = shl i64 %243, 28
  %258 = add i64 %257, 2147483648
  %259 = ashr i64 %258, 32
  %260 = mul nsw i64 %259, %259
  %261 = lshr i64 %260, 5
  %262 = sub nsw i64 %256, %261
  %263 = icmp sgt i64 %262, -1
  %264 = trunc i64 %262 to i32
  %265 = select i1 %263, i32 %264, i32 0
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %14) #4
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %13) #4
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %12) #4
  ret i32 %265
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_highbd_8_variance4x4_c(i8*, i32, i8*, i32, i32* nocapture) local_unnamed_addr #2 {
  %6 = ptrtoint i8* %2 to i64
  %7 = shl i64 %6, 1
  %8 = inttoptr i64 %7 to i16*
  %9 = ptrtoint i8* %0 to i64
  %10 = shl i64 %9, 1
  %11 = inttoptr i64 %10 to i16*
  %12 = sext i32 %1 to i64
  %13 = sext i32 %3 to i64
  %14 = load i16, i16* %11, align 2
  %15 = zext i16 %14 to i32
  %16 = load i16, i16* %8, align 2
  %17 = zext i16 %16 to i32
  %18 = sub nsw i32 %15, %17
  %19 = mul nsw i32 %18, %18
  %20 = getelementptr inbounds i16, i16* %11, i64 1
  %21 = load i16, i16* %20, align 2
  %22 = zext i16 %21 to i32
  %23 = getelementptr inbounds i16, i16* %8, i64 1
  %24 = load i16, i16* %23, align 2
  %25 = zext i16 %24 to i32
  %26 = sub nsw i32 %22, %25
  %27 = add nsw i32 %18, %26
  %28 = mul nsw i32 %26, %26
  %29 = add nuw i32 %19, %28
  %30 = getelementptr inbounds i16, i16* %11, i64 2
  %31 = load i16, i16* %30, align 2
  %32 = zext i16 %31 to i32
  %33 = getelementptr inbounds i16, i16* %8, i64 2
  %34 = load i16, i16* %33, align 2
  %35 = zext i16 %34 to i32
  %36 = sub nsw i32 %32, %35
  %37 = add nsw i32 %27, %36
  %38 = mul nsw i32 %36, %36
  %39 = add i32 %29, %38
  %40 = getelementptr inbounds i16, i16* %11, i64 3
  %41 = load i16, i16* %40, align 2
  %42 = zext i16 %41 to i32
  %43 = getelementptr inbounds i16, i16* %8, i64 3
  %44 = load i16, i16* %43, align 2
  %45 = zext i16 %44 to i32
  %46 = sub nsw i32 %42, %45
  %47 = add nsw i32 %37, %46
  %48 = mul nsw i32 %46, %46
  %49 = add i32 %39, %48
  %50 = getelementptr inbounds i16, i16* %11, i64 %12
  %51 = getelementptr inbounds i16, i16* %8, i64 %13
  %52 = load i16, i16* %50, align 2
  %53 = zext i16 %52 to i32
  %54 = load i16, i16* %51, align 2
  %55 = zext i16 %54 to i32
  %56 = sub nsw i32 %53, %55
  %57 = add nsw i32 %47, %56
  %58 = mul nsw i32 %56, %56
  %59 = add i32 %49, %58
  %60 = getelementptr inbounds i16, i16* %50, i64 1
  %61 = load i16, i16* %60, align 2
  %62 = zext i16 %61 to i32
  %63 = getelementptr inbounds i16, i16* %51, i64 1
  %64 = load i16, i16* %63, align 2
  %65 = zext i16 %64 to i32
  %66 = sub nsw i32 %62, %65
  %67 = add nsw i32 %57, %66
  %68 = sext i32 %67 to i64
  %69 = mul nsw i32 %66, %66
  %70 = add i32 %59, %69
  %71 = getelementptr inbounds i16, i16* %50, i64 2
  %72 = load i16, i16* %71, align 2
  %73 = zext i16 %72 to i32
  %74 = getelementptr inbounds i16, i16* %51, i64 2
  %75 = load i16, i16* %74, align 2
  %76 = zext i16 %75 to i32
  %77 = sub nsw i32 %73, %76
  %78 = sext i32 %77 to i64
  %79 = add nsw i64 %68, %78
  %80 = mul nsw i32 %77, %77
  %81 = add i32 %70, %80
  %82 = getelementptr inbounds i16, i16* %50, i64 3
  %83 = load i16, i16* %82, align 2
  %84 = zext i16 %83 to i32
  %85 = getelementptr inbounds i16, i16* %51, i64 3
  %86 = load i16, i16* %85, align 2
  %87 = zext i16 %86 to i32
  %88 = sub nsw i32 %84, %87
  %89 = sext i32 %88 to i64
  %90 = add nsw i64 %79, %89
  %91 = mul nsw i32 %88, %88
  %92 = add i32 %81, %91
  %93 = getelementptr inbounds i16, i16* %50, i64 %12
  %94 = getelementptr inbounds i16, i16* %51, i64 %13
  %95 = load i16, i16* %93, align 2
  %96 = zext i16 %95 to i32
  %97 = load i16, i16* %94, align 2
  %98 = zext i16 %97 to i32
  %99 = sub nsw i32 %96, %98
  %100 = sext i32 %99 to i64
  %101 = add nsw i64 %90, %100
  %102 = mul nsw i32 %99, %99
  %103 = add i32 %92, %102
  %104 = getelementptr inbounds i16, i16* %93, i64 1
  %105 = load i16, i16* %104, align 2
  %106 = zext i16 %105 to i32
  %107 = getelementptr inbounds i16, i16* %94, i64 1
  %108 = load i16, i16* %107, align 2
  %109 = zext i16 %108 to i32
  %110 = sub nsw i32 %106, %109
  %111 = sext i32 %110 to i64
  %112 = add nsw i64 %101, %111
  %113 = mul nsw i32 %110, %110
  %114 = add i32 %103, %113
  %115 = getelementptr inbounds i16, i16* %93, i64 2
  %116 = load i16, i16* %115, align 2
  %117 = zext i16 %116 to i32
  %118 = getelementptr inbounds i16, i16* %94, i64 2
  %119 = load i16, i16* %118, align 2
  %120 = zext i16 %119 to i32
  %121 = sub nsw i32 %117, %120
  %122 = sext i32 %121 to i64
  %123 = add nsw i64 %112, %122
  %124 = mul nsw i32 %121, %121
  %125 = add i32 %114, %124
  %126 = getelementptr inbounds i16, i16* %93, i64 3
  %127 = load i16, i16* %126, align 2
  %128 = zext i16 %127 to i32
  %129 = getelementptr inbounds i16, i16* %94, i64 3
  %130 = load i16, i16* %129, align 2
  %131 = zext i16 %130 to i32
  %132 = sub nsw i32 %128, %131
  %133 = sext i32 %132 to i64
  %134 = add nsw i64 %123, %133
  %135 = mul nsw i32 %132, %132
  %136 = add i32 %125, %135
  %137 = getelementptr inbounds i16, i16* %93, i64 %12
  %138 = getelementptr inbounds i16, i16* %94, i64 %13
  %139 = load i16, i16* %137, align 2
  %140 = zext i16 %139 to i32
  %141 = load i16, i16* %138, align 2
  %142 = zext i16 %141 to i32
  %143 = sub nsw i32 %140, %142
  %144 = zext i32 %143 to i64
  %145 = add nsw i64 %134, %144
  %146 = mul nsw i32 %143, %143
  %147 = add i32 %136, %146
  %148 = getelementptr inbounds i16, i16* %137, i64 1
  %149 = load i16, i16* %148, align 2
  %150 = zext i16 %149 to i32
  %151 = getelementptr inbounds i16, i16* %138, i64 1
  %152 = load i16, i16* %151, align 2
  %153 = zext i16 %152 to i32
  %154 = sub nsw i32 %150, %153
  %155 = zext i32 %154 to i64
  %156 = add nsw i64 %145, %155
  %157 = mul nsw i32 %154, %154
  %158 = add i32 %147, %157
  %159 = getelementptr inbounds i16, i16* %137, i64 2
  %160 = load i16, i16* %159, align 2
  %161 = zext i16 %160 to i32
  %162 = getelementptr inbounds i16, i16* %138, i64 2
  %163 = load i16, i16* %162, align 2
  %164 = zext i16 %163 to i32
  %165 = sub nsw i32 %161, %164
  %166 = zext i32 %165 to i64
  %167 = add nsw i64 %156, %166
  %168 = mul nsw i32 %165, %165
  %169 = add i32 %158, %168
  %170 = getelementptr inbounds i16, i16* %137, i64 3
  %171 = load i16, i16* %170, align 2
  %172 = zext i16 %171 to i32
  %173 = getelementptr inbounds i16, i16* %138, i64 3
  %174 = load i16, i16* %173, align 2
  %175 = zext i16 %174 to i32
  %176 = sub nsw i32 %172, %175
  %177 = zext i32 %176 to i64
  %178 = add nsw i64 %167, %177
  %179 = mul nsw i32 %176, %176
  %180 = add i32 %169, %179
  store i32 %180, i32* %4, align 4
  %181 = shl i64 %178, 32
  %182 = ashr exact i64 %181, 32
  %183 = mul nsw i64 %182, %182
  %184 = lshr i64 %183, 4
  %185 = trunc i64 %184 to i32
  %186 = sub i32 %180, %185
  ret i32 %186
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_highbd_10_variance4x4_c(i8*, i32, i8*, i32, i32* nocapture) local_unnamed_addr #2 {
  %6 = ptrtoint i8* %2 to i64
  %7 = shl i64 %6, 1
  %8 = inttoptr i64 %7 to i16*
  %9 = ptrtoint i8* %0 to i64
  %10 = shl i64 %9, 1
  %11 = inttoptr i64 %10 to i16*
  %12 = sext i32 %1 to i64
  %13 = sext i32 %3 to i64
  %14 = load i16, i16* %11, align 2
  %15 = zext i16 %14 to i32
  %16 = load i16, i16* %8, align 2
  %17 = zext i16 %16 to i32
  %18 = sub nsw i32 %15, %17
  %19 = mul nsw i32 %18, %18
  %20 = getelementptr inbounds i16, i16* %11, i64 1
  %21 = load i16, i16* %20, align 2
  %22 = zext i16 %21 to i32
  %23 = getelementptr inbounds i16, i16* %8, i64 1
  %24 = load i16, i16* %23, align 2
  %25 = zext i16 %24 to i32
  %26 = sub nsw i32 %22, %25
  %27 = add nsw i32 %18, %26
  %28 = mul nsw i32 %26, %26
  %29 = add nuw i32 %19, %28
  %30 = zext i32 %29 to i64
  %31 = getelementptr inbounds i16, i16* %11, i64 2
  %32 = load i16, i16* %31, align 2
  %33 = zext i16 %32 to i32
  %34 = getelementptr inbounds i16, i16* %8, i64 2
  %35 = load i16, i16* %34, align 2
  %36 = zext i16 %35 to i32
  %37 = sub nsw i32 %33, %36
  %38 = add nsw i32 %27, %37
  %39 = mul nsw i32 %37, %37
  %40 = zext i32 %39 to i64
  %41 = add nuw nsw i64 %30, %40
  %42 = getelementptr inbounds i16, i16* %11, i64 3
  %43 = load i16, i16* %42, align 2
  %44 = zext i16 %43 to i32
  %45 = getelementptr inbounds i16, i16* %8, i64 3
  %46 = load i16, i16* %45, align 2
  %47 = zext i16 %46 to i32
  %48 = sub nsw i32 %44, %47
  %49 = add nsw i32 %38, %48
  %50 = mul nsw i32 %48, %48
  %51 = zext i32 %50 to i64
  %52 = add nuw nsw i64 %41, %51
  %53 = getelementptr inbounds i16, i16* %11, i64 %12
  %54 = getelementptr inbounds i16, i16* %8, i64 %13
  %55 = load i16, i16* %53, align 2
  %56 = zext i16 %55 to i32
  %57 = load i16, i16* %54, align 2
  %58 = zext i16 %57 to i32
  %59 = sub nsw i32 %56, %58
  %60 = add nsw i32 %49, %59
  %61 = mul nsw i32 %59, %59
  %62 = zext i32 %61 to i64
  %63 = add nuw nsw i64 %52, %62
  %64 = getelementptr inbounds i16, i16* %53, i64 1
  %65 = load i16, i16* %64, align 2
  %66 = zext i16 %65 to i32
  %67 = getelementptr inbounds i16, i16* %54, i64 1
  %68 = load i16, i16* %67, align 2
  %69 = zext i16 %68 to i32
  %70 = sub nsw i32 %66, %69
  %71 = add nsw i32 %60, %70
  %72 = sext i32 %71 to i64
  %73 = mul nsw i32 %70, %70
  %74 = zext i32 %73 to i64
  %75 = add nuw nsw i64 %63, %74
  %76 = getelementptr inbounds i16, i16* %53, i64 2
  %77 = load i16, i16* %76, align 2
  %78 = zext i16 %77 to i32
  %79 = getelementptr inbounds i16, i16* %54, i64 2
  %80 = load i16, i16* %79, align 2
  %81 = zext i16 %80 to i32
  %82 = sub nsw i32 %78, %81
  %83 = sext i32 %82 to i64
  %84 = add nsw i64 %72, %83
  %85 = mul nsw i32 %82, %82
  %86 = zext i32 %85 to i64
  %87 = add nuw nsw i64 %75, %86
  %88 = getelementptr inbounds i16, i16* %53, i64 3
  %89 = load i16, i16* %88, align 2
  %90 = zext i16 %89 to i32
  %91 = getelementptr inbounds i16, i16* %54, i64 3
  %92 = load i16, i16* %91, align 2
  %93 = zext i16 %92 to i32
  %94 = sub nsw i32 %90, %93
  %95 = sext i32 %94 to i64
  %96 = add nsw i64 %84, %95
  %97 = mul nsw i32 %94, %94
  %98 = zext i32 %97 to i64
  %99 = add nuw nsw i64 %87, %98
  %100 = getelementptr inbounds i16, i16* %53, i64 %12
  %101 = getelementptr inbounds i16, i16* %54, i64 %13
  %102 = load i16, i16* %100, align 2
  %103 = zext i16 %102 to i32
  %104 = load i16, i16* %101, align 2
  %105 = zext i16 %104 to i32
  %106 = sub nsw i32 %103, %105
  %107 = sext i32 %106 to i64
  %108 = add nsw i64 %96, %107
  %109 = mul nsw i32 %106, %106
  %110 = zext i32 %109 to i64
  %111 = add nuw nsw i64 %99, %110
  %112 = getelementptr inbounds i16, i16* %100, i64 1
  %113 = load i16, i16* %112, align 2
  %114 = zext i16 %113 to i32
  %115 = getelementptr inbounds i16, i16* %101, i64 1
  %116 = load i16, i16* %115, align 2
  %117 = zext i16 %116 to i32
  %118 = sub nsw i32 %114, %117
  %119 = sext i32 %118 to i64
  %120 = add nsw i64 %108, %119
  %121 = mul nsw i32 %118, %118
  %122 = zext i32 %121 to i64
  %123 = add nuw nsw i64 %111, %122
  %124 = getelementptr inbounds i16, i16* %100, i64 2
  %125 = load i16, i16* %124, align 2
  %126 = zext i16 %125 to i32
  %127 = getelementptr inbounds i16, i16* %101, i64 2
  %128 = load i16, i16* %127, align 2
  %129 = zext i16 %128 to i32
  %130 = sub nsw i32 %126, %129
  %131 = sext i32 %130 to i64
  %132 = add nsw i64 %120, %131
  %133 = mul nsw i32 %130, %130
  %134 = zext i32 %133 to i64
  %135 = add nuw nsw i64 %123, %134
  %136 = getelementptr inbounds i16, i16* %100, i64 3
  %137 = load i16, i16* %136, align 2
  %138 = zext i16 %137 to i32
  %139 = getelementptr inbounds i16, i16* %101, i64 3
  %140 = load i16, i16* %139, align 2
  %141 = zext i16 %140 to i32
  %142 = sub nsw i32 %138, %141
  %143 = sext i32 %142 to i64
  %144 = add nsw i64 %132, %143
  %145 = mul nsw i32 %142, %142
  %146 = zext i32 %145 to i64
  %147 = add nuw nsw i64 %135, %146
  %148 = getelementptr inbounds i16, i16* %100, i64 %12
  %149 = getelementptr inbounds i16, i16* %101, i64 %13
  %150 = load i16, i16* %148, align 2
  %151 = zext i16 %150 to i32
  %152 = load i16, i16* %149, align 2
  %153 = zext i16 %152 to i32
  %154 = sub nsw i32 %151, %153
  %155 = sext i32 %154 to i64
  %156 = add nsw i64 %144, %155
  %157 = mul nsw i32 %154, %154
  %158 = zext i32 %157 to i64
  %159 = add nuw nsw i64 %147, %158
  %160 = getelementptr inbounds i16, i16* %148, i64 1
  %161 = load i16, i16* %160, align 2
  %162 = zext i16 %161 to i32
  %163 = getelementptr inbounds i16, i16* %149, i64 1
  %164 = load i16, i16* %163, align 2
  %165 = zext i16 %164 to i32
  %166 = sub nsw i32 %162, %165
  %167 = sext i32 %166 to i64
  %168 = add nsw i64 %156, %167
  %169 = mul nsw i32 %166, %166
  %170 = zext i32 %169 to i64
  %171 = add nuw nsw i64 %159, %170
  %172 = getelementptr inbounds i16, i16* %148, i64 2
  %173 = load i16, i16* %172, align 2
  %174 = zext i16 %173 to i32
  %175 = getelementptr inbounds i16, i16* %149, i64 2
  %176 = load i16, i16* %175, align 2
  %177 = zext i16 %176 to i32
  %178 = sub nsw i32 %174, %177
  %179 = sext i32 %178 to i64
  %180 = add nsw i64 %168, %179
  %181 = mul nsw i32 %178, %178
  %182 = zext i32 %181 to i64
  %183 = add nuw nsw i64 %171, %182
  %184 = getelementptr inbounds i16, i16* %148, i64 3
  %185 = load i16, i16* %184, align 2
  %186 = zext i16 %185 to i32
  %187 = getelementptr inbounds i16, i16* %149, i64 3
  %188 = load i16, i16* %187, align 2
  %189 = zext i16 %188 to i32
  %190 = sub nsw i32 %186, %189
  %191 = sext i32 %190 to i64
  %192 = add nsw i64 %180, %191
  %193 = mul nsw i32 %190, %190
  %194 = zext i32 %193 to i64
  %195 = add nuw nsw i64 %183, %194
  %196 = add nuw nsw i64 %195, 8
  %197 = lshr i64 %196, 4
  %198 = trunc i64 %197 to i32
  store i32 %198, i32* %4, align 4
  %199 = and i64 %197, 4294967295
  %200 = shl i64 %192, 30
  %201 = add i64 %200, 2147483648
  %202 = ashr i64 %201, 32
  %203 = mul nsw i64 %202, %202
  %204 = lshr i64 %203, 4
  %205 = sub nsw i64 %199, %204
  %206 = icmp sgt i64 %205, -1
  %207 = trunc i64 %205 to i32
  %208 = select i1 %206, i32 %207, i32 0
  ret i32 %208
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_highbd_12_variance4x4_c(i8*, i32, i8*, i32, i32* nocapture) local_unnamed_addr #2 {
  %6 = ptrtoint i8* %2 to i64
  %7 = shl i64 %6, 1
  %8 = inttoptr i64 %7 to i16*
  %9 = ptrtoint i8* %0 to i64
  %10 = shl i64 %9, 1
  %11 = inttoptr i64 %10 to i16*
  %12 = sext i32 %1 to i64
  %13 = sext i32 %3 to i64
  %14 = load i16, i16* %11, align 2
  %15 = zext i16 %14 to i32
  %16 = load i16, i16* %8, align 2
  %17 = zext i16 %16 to i32
  %18 = sub nsw i32 %15, %17
  %19 = mul nsw i32 %18, %18
  %20 = getelementptr inbounds i16, i16* %11, i64 1
  %21 = load i16, i16* %20, align 2
  %22 = zext i16 %21 to i32
  %23 = getelementptr inbounds i16, i16* %8, i64 1
  %24 = load i16, i16* %23, align 2
  %25 = zext i16 %24 to i32
  %26 = sub nsw i32 %22, %25
  %27 = add nsw i32 %18, %26
  %28 = mul nsw i32 %26, %26
  %29 = add nuw i32 %19, %28
  %30 = zext i32 %29 to i64
  %31 = getelementptr inbounds i16, i16* %11, i64 2
  %32 = load i16, i16* %31, align 2
  %33 = zext i16 %32 to i32
  %34 = getelementptr inbounds i16, i16* %8, i64 2
  %35 = load i16, i16* %34, align 2
  %36 = zext i16 %35 to i32
  %37 = sub nsw i32 %33, %36
  %38 = add nsw i32 %27, %37
  %39 = mul nsw i32 %37, %37
  %40 = zext i32 %39 to i64
  %41 = add nuw nsw i64 %30, %40
  %42 = getelementptr inbounds i16, i16* %11, i64 3
  %43 = load i16, i16* %42, align 2
  %44 = zext i16 %43 to i32
  %45 = getelementptr inbounds i16, i16* %8, i64 3
  %46 = load i16, i16* %45, align 2
  %47 = zext i16 %46 to i32
  %48 = sub nsw i32 %44, %47
  %49 = add nsw i32 %38, %48
  %50 = mul nsw i32 %48, %48
  %51 = zext i32 %50 to i64
  %52 = add nuw nsw i64 %41, %51
  %53 = getelementptr inbounds i16, i16* %11, i64 %12
  %54 = getelementptr inbounds i16, i16* %8, i64 %13
  %55 = load i16, i16* %53, align 2
  %56 = zext i16 %55 to i32
  %57 = load i16, i16* %54, align 2
  %58 = zext i16 %57 to i32
  %59 = sub nsw i32 %56, %58
  %60 = add nsw i32 %49, %59
  %61 = mul nsw i32 %59, %59
  %62 = zext i32 %61 to i64
  %63 = add nuw nsw i64 %52, %62
  %64 = getelementptr inbounds i16, i16* %53, i64 1
  %65 = load i16, i16* %64, align 2
  %66 = zext i16 %65 to i32
  %67 = getelementptr inbounds i16, i16* %54, i64 1
  %68 = load i16, i16* %67, align 2
  %69 = zext i16 %68 to i32
  %70 = sub nsw i32 %66, %69
  %71 = add nsw i32 %60, %70
  %72 = sext i32 %71 to i64
  %73 = mul nsw i32 %70, %70
  %74 = zext i32 %73 to i64
  %75 = add nuw nsw i64 %63, %74
  %76 = getelementptr inbounds i16, i16* %53, i64 2
  %77 = load i16, i16* %76, align 2
  %78 = zext i16 %77 to i32
  %79 = getelementptr inbounds i16, i16* %54, i64 2
  %80 = load i16, i16* %79, align 2
  %81 = zext i16 %80 to i32
  %82 = sub nsw i32 %78, %81
  %83 = sext i32 %82 to i64
  %84 = add nsw i64 %72, %83
  %85 = mul nsw i32 %82, %82
  %86 = zext i32 %85 to i64
  %87 = add nuw nsw i64 %75, %86
  %88 = getelementptr inbounds i16, i16* %53, i64 3
  %89 = load i16, i16* %88, align 2
  %90 = zext i16 %89 to i32
  %91 = getelementptr inbounds i16, i16* %54, i64 3
  %92 = load i16, i16* %91, align 2
  %93 = zext i16 %92 to i32
  %94 = sub nsw i32 %90, %93
  %95 = sext i32 %94 to i64
  %96 = add nsw i64 %84, %95
  %97 = mul nsw i32 %94, %94
  %98 = zext i32 %97 to i64
  %99 = add nuw nsw i64 %87, %98
  %100 = getelementptr inbounds i16, i16* %53, i64 %12
  %101 = getelementptr inbounds i16, i16* %54, i64 %13
  %102 = load i16, i16* %100, align 2
  %103 = zext i16 %102 to i32
  %104 = load i16, i16* %101, align 2
  %105 = zext i16 %104 to i32
  %106 = sub nsw i32 %103, %105
  %107 = sext i32 %106 to i64
  %108 = add nsw i64 %96, %107
  %109 = mul nsw i32 %106, %106
  %110 = zext i32 %109 to i64
  %111 = add nuw nsw i64 %99, %110
  %112 = getelementptr inbounds i16, i16* %100, i64 1
  %113 = load i16, i16* %112, align 2
  %114 = zext i16 %113 to i32
  %115 = getelementptr inbounds i16, i16* %101, i64 1
  %116 = load i16, i16* %115, align 2
  %117 = zext i16 %116 to i32
  %118 = sub nsw i32 %114, %117
  %119 = sext i32 %118 to i64
  %120 = add nsw i64 %108, %119
  %121 = mul nsw i32 %118, %118
  %122 = zext i32 %121 to i64
  %123 = add nuw nsw i64 %111, %122
  %124 = getelementptr inbounds i16, i16* %100, i64 2
  %125 = load i16, i16* %124, align 2
  %126 = zext i16 %125 to i32
  %127 = getelementptr inbounds i16, i16* %101, i64 2
  %128 = load i16, i16* %127, align 2
  %129 = zext i16 %128 to i32
  %130 = sub nsw i32 %126, %129
  %131 = sext i32 %130 to i64
  %132 = add nsw i64 %120, %131
  %133 = mul nsw i32 %130, %130
  %134 = zext i32 %133 to i64
  %135 = add nuw nsw i64 %123, %134
  %136 = getelementptr inbounds i16, i16* %100, i64 3
  %137 = load i16, i16* %136, align 2
  %138 = zext i16 %137 to i32
  %139 = getelementptr inbounds i16, i16* %101, i64 3
  %140 = load i16, i16* %139, align 2
  %141 = zext i16 %140 to i32
  %142 = sub nsw i32 %138, %141
  %143 = sext i32 %142 to i64
  %144 = add nsw i64 %132, %143
  %145 = mul nsw i32 %142, %142
  %146 = zext i32 %145 to i64
  %147 = add nuw nsw i64 %135, %146
  %148 = getelementptr inbounds i16, i16* %100, i64 %12
  %149 = getelementptr inbounds i16, i16* %101, i64 %13
  %150 = load i16, i16* %148, align 2
  %151 = zext i16 %150 to i32
  %152 = load i16, i16* %149, align 2
  %153 = zext i16 %152 to i32
  %154 = sub nsw i32 %151, %153
  %155 = sext i32 %154 to i64
  %156 = add nsw i64 %144, %155
  %157 = mul nsw i32 %154, %154
  %158 = zext i32 %157 to i64
  %159 = add nuw nsw i64 %147, %158
  %160 = getelementptr inbounds i16, i16* %148, i64 1
  %161 = load i16, i16* %160, align 2
  %162 = zext i16 %161 to i32
  %163 = getelementptr inbounds i16, i16* %149, i64 1
  %164 = load i16, i16* %163, align 2
  %165 = zext i16 %164 to i32
  %166 = sub nsw i32 %162, %165
  %167 = sext i32 %166 to i64
  %168 = add nsw i64 %156, %167
  %169 = mul nsw i32 %166, %166
  %170 = zext i32 %169 to i64
  %171 = add nuw nsw i64 %159, %170
  %172 = getelementptr inbounds i16, i16* %148, i64 2
  %173 = load i16, i16* %172, align 2
  %174 = zext i16 %173 to i32
  %175 = getelementptr inbounds i16, i16* %149, i64 2
  %176 = load i16, i16* %175, align 2
  %177 = zext i16 %176 to i32
  %178 = sub nsw i32 %174, %177
  %179 = sext i32 %178 to i64
  %180 = add nsw i64 %168, %179
  %181 = mul nsw i32 %178, %178
  %182 = zext i32 %181 to i64
  %183 = add nuw nsw i64 %171, %182
  %184 = getelementptr inbounds i16, i16* %148, i64 3
  %185 = load i16, i16* %184, align 2
  %186 = zext i16 %185 to i32
  %187 = getelementptr inbounds i16, i16* %149, i64 3
  %188 = load i16, i16* %187, align 2
  %189 = zext i16 %188 to i32
  %190 = sub nsw i32 %186, %189
  %191 = sext i32 %190 to i64
  %192 = add nsw i64 %180, %191
  %193 = mul nsw i32 %190, %190
  %194 = zext i32 %193 to i64
  %195 = add nuw nsw i64 %183, %194
  %196 = add nuw nsw i64 %195, 128
  %197 = lshr i64 %196, 8
  %198 = trunc i64 %197 to i32
  store i32 %198, i32* %4, align 4
  %199 = and i64 %197, 4294967295
  %200 = shl i64 %192, 28
  %201 = add i64 %200, 2147483648
  %202 = ashr i64 %201, 32
  %203 = mul nsw i64 %202, %202
  %204 = lshr i64 %203, 4
  %205 = sub nsw i64 %199, %204
  %206 = icmp sgt i64 %205, -1
  %207 = trunc i64 %205 to i32
  %208 = select i1 %206, i32 %207, i32 0
  ret i32 %208
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_highbd_8_sub_pixel_variance4x4_c(i8*, i32, i32, i32, i8*, i32, i32* nocapture) local_unnamed_addr #2 {
  %8 = alloca [20 x i16], align 16
  %9 = alloca [16 x i16], align 16
  %10 = bitcast [20 x i16]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %10) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %10, i8 -86, i64 40, i1 false)
  %11 = bitcast [16 x i16]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %11) #4
  %12 = sext i32 %2 to i64
  %13 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %12, i64 0
  %14 = ptrtoint i8* %0 to i64
  %15 = shl i64 %14, 1
  %16 = inttoptr i64 %15 to i16*
  %17 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %12, i64 1
  %18 = add i32 %1, -4
  %19 = zext i32 %18 to i64
  %20 = bitcast [16 x i16]* %9 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %20, i8 -86, i64 32, i1 false)
  %21 = load i8, i8* %13, align 2
  %22 = zext i8 %21 to i32
  %23 = load i8, i8* %17, align 1
  %24 = zext i8 %23 to i32
  %25 = getelementptr inbounds [20 x i16], [20 x i16]* %8, i64 0, i64 0
  %26 = load i16, i16* %16, align 2
  %27 = zext i16 %26 to i32
  %28 = mul nuw nsw i32 %22, %27
  %29 = getelementptr inbounds i16, i16* %16, i64 1
  %30 = load i16, i16* %29, align 2
  %31 = zext i16 %30 to i32
  %32 = mul nuw nsw i32 %24, %31
  %33 = add nuw nsw i32 %28, 64
  %34 = add nuw nsw i32 %33, %32
  %35 = lshr i32 %34, 7
  %36 = trunc i32 %35 to i16
  store i16 %36, i16* %25, align 16
  %37 = load i16, i16* %29, align 2
  %38 = zext i16 %37 to i32
  %39 = mul nuw nsw i32 %22, %38
  %40 = getelementptr inbounds i16, i16* %16, i64 2
  %41 = load i16, i16* %40, align 2
  %42 = zext i16 %41 to i32
  %43 = mul nuw nsw i32 %24, %42
  %44 = add nuw nsw i32 %39, 64
  %45 = add nuw nsw i32 %44, %43
  %46 = lshr i32 %45, 7
  %47 = trunc i32 %46 to i16
  %48 = getelementptr inbounds [20 x i16], [20 x i16]* %8, i64 0, i64 1
  store i16 %47, i16* %48, align 2
  %49 = load i16, i16* %40, align 2
  %50 = zext i16 %49 to i32
  %51 = mul nuw nsw i32 %22, %50
  %52 = getelementptr inbounds i16, i16* %16, i64 3
  %53 = load i16, i16* %52, align 2
  %54 = zext i16 %53 to i32
  %55 = mul nuw nsw i32 %24, %54
  %56 = add nuw nsw i32 %51, 64
  %57 = add nuw nsw i32 %56, %55
  %58 = lshr i32 %57, 7
  %59 = trunc i32 %58 to i16
  %60 = getelementptr inbounds [20 x i16], [20 x i16]* %8, i64 0, i64 2
  store i16 %59, i16* %60, align 4
  %61 = load i16, i16* %52, align 2
  %62 = zext i16 %61 to i32
  %63 = mul nuw nsw i32 %22, %62
  %64 = getelementptr inbounds i16, i16* %16, i64 4
  %65 = load i16, i16* %64, align 2
  %66 = zext i16 %65 to i32
  %67 = mul nuw nsw i32 %24, %66
  %68 = add nuw nsw i32 %63, 64
  %69 = add nuw nsw i32 %68, %67
  %70 = lshr i32 %69, 7
  %71 = trunc i32 %70 to i16
  %72 = getelementptr inbounds [20 x i16], [20 x i16]* %8, i64 0, i64 3
  store i16 %71, i16* %72, align 2
  %73 = getelementptr inbounds i16, i16* %64, i64 %19
  %74 = getelementptr inbounds [20 x i16], [20 x i16]* %8, i64 0, i64 4
  %75 = load i16, i16* %73, align 2
  %76 = zext i16 %75 to i32
  %77 = mul nuw nsw i32 %22, %76
  %78 = getelementptr inbounds i16, i16* %73, i64 1
  %79 = load i16, i16* %78, align 2
  %80 = zext i16 %79 to i32
  %81 = mul nuw nsw i32 %24, %80
  %82 = add nuw nsw i32 %77, 64
  %83 = add nuw nsw i32 %82, %81
  %84 = lshr i32 %83, 7
  %85 = trunc i32 %84 to i16
  store i16 %85, i16* %74, align 8
  %86 = load i16, i16* %78, align 2
  %87 = zext i16 %86 to i32
  %88 = mul nuw nsw i32 %22, %87
  %89 = getelementptr inbounds i16, i16* %73, i64 2
  %90 = load i16, i16* %89, align 2
  %91 = zext i16 %90 to i32
  %92 = mul nuw nsw i32 %24, %91
  %93 = add nuw nsw i32 %88, 64
  %94 = add nuw nsw i32 %93, %92
  %95 = lshr i32 %94, 7
  %96 = trunc i32 %95 to i16
  %97 = getelementptr inbounds [20 x i16], [20 x i16]* %8, i64 0, i64 5
  store i16 %96, i16* %97, align 2
  %98 = load i16, i16* %89, align 2
  %99 = zext i16 %98 to i32
  %100 = mul nuw nsw i32 %22, %99
  %101 = getelementptr inbounds i16, i16* %73, i64 3
  %102 = load i16, i16* %101, align 2
  %103 = zext i16 %102 to i32
  %104 = mul nuw nsw i32 %24, %103
  %105 = add nuw nsw i32 %100, 64
  %106 = add nuw nsw i32 %105, %104
  %107 = lshr i32 %106, 7
  %108 = trunc i32 %107 to i16
  %109 = getelementptr inbounds [20 x i16], [20 x i16]* %8, i64 0, i64 6
  store i16 %108, i16* %109, align 4
  %110 = load i16, i16* %101, align 2
  %111 = zext i16 %110 to i32
  %112 = mul nuw nsw i32 %22, %111
  %113 = getelementptr inbounds i16, i16* %73, i64 4
  %114 = load i16, i16* %113, align 2
  %115 = zext i16 %114 to i32
  %116 = mul nuw nsw i32 %24, %115
  %117 = add nuw nsw i32 %112, 64
  %118 = add nuw nsw i32 %117, %116
  %119 = lshr i32 %118, 7
  %120 = trunc i32 %119 to i16
  %121 = getelementptr inbounds [20 x i16], [20 x i16]* %8, i64 0, i64 7
  store i16 %120, i16* %121, align 2
  %122 = getelementptr inbounds i16, i16* %113, i64 %19
  %123 = getelementptr inbounds [20 x i16], [20 x i16]* %8, i64 0, i64 8
  %124 = load i16, i16* %122, align 2
  %125 = zext i16 %124 to i32
  %126 = mul nuw nsw i32 %22, %125
  %127 = getelementptr inbounds i16, i16* %122, i64 1
  %128 = load i16, i16* %127, align 2
  %129 = zext i16 %128 to i32
  %130 = mul nuw nsw i32 %24, %129
  %131 = add nuw nsw i32 %126, 64
  %132 = add nuw nsw i32 %131, %130
  %133 = lshr i32 %132, 7
  %134 = trunc i32 %133 to i16
  store i16 %134, i16* %123, align 16
  %135 = load i16, i16* %127, align 2
  %136 = zext i16 %135 to i32
  %137 = mul nuw nsw i32 %22, %136
  %138 = getelementptr inbounds i16, i16* %122, i64 2
  %139 = load i16, i16* %138, align 2
  %140 = zext i16 %139 to i32
  %141 = mul nuw nsw i32 %24, %140
  %142 = add nuw nsw i32 %137, 64
  %143 = add nuw nsw i32 %142, %141
  %144 = lshr i32 %143, 7
  %145 = trunc i32 %144 to i16
  %146 = getelementptr inbounds [20 x i16], [20 x i16]* %8, i64 0, i64 9
  store i16 %145, i16* %146, align 2
  %147 = load i16, i16* %138, align 2
  %148 = zext i16 %147 to i32
  %149 = mul nuw nsw i32 %22, %148
  %150 = getelementptr inbounds i16, i16* %122, i64 3
  %151 = load i16, i16* %150, align 2
  %152 = zext i16 %151 to i32
  %153 = mul nuw nsw i32 %24, %152
  %154 = add nuw nsw i32 %149, 64
  %155 = add nuw nsw i32 %154, %153
  %156 = lshr i32 %155, 7
  %157 = trunc i32 %156 to i16
  %158 = getelementptr inbounds [20 x i16], [20 x i16]* %8, i64 0, i64 10
  store i16 %157, i16* %158, align 4
  %159 = load i16, i16* %150, align 2
  %160 = zext i16 %159 to i32
  %161 = mul nuw nsw i32 %22, %160
  %162 = getelementptr inbounds i16, i16* %122, i64 4
  %163 = load i16, i16* %162, align 2
  %164 = zext i16 %163 to i32
  %165 = mul nuw nsw i32 %24, %164
  %166 = add nuw nsw i32 %161, 64
  %167 = add nuw nsw i32 %166, %165
  %168 = lshr i32 %167, 7
  %169 = trunc i32 %168 to i16
  %170 = getelementptr inbounds [20 x i16], [20 x i16]* %8, i64 0, i64 11
  store i16 %169, i16* %170, align 2
  %171 = getelementptr inbounds i16, i16* %162, i64 %19
  %172 = getelementptr inbounds [20 x i16], [20 x i16]* %8, i64 0, i64 12
  %173 = load i16, i16* %171, align 2
  %174 = zext i16 %173 to i32
  %175 = mul nuw nsw i32 %22, %174
  %176 = getelementptr inbounds i16, i16* %171, i64 1
  %177 = load i16, i16* %176, align 2
  %178 = zext i16 %177 to i32
  %179 = mul nuw nsw i32 %24, %178
  %180 = add nuw nsw i32 %175, 64
  %181 = add nuw nsw i32 %180, %179
  %182 = lshr i32 %181, 7
  %183 = trunc i32 %182 to i16
  store i16 %183, i16* %172, align 8
  %184 = load i16, i16* %176, align 2
  %185 = zext i16 %184 to i32
  %186 = mul nuw nsw i32 %22, %185
  %187 = getelementptr inbounds i16, i16* %171, i64 2
  %188 = load i16, i16* %187, align 2
  %189 = zext i16 %188 to i32
  %190 = mul nuw nsw i32 %24, %189
  %191 = add nuw nsw i32 %186, 64
  %192 = add nuw nsw i32 %191, %190
  %193 = lshr i32 %192, 7
  %194 = trunc i32 %193 to i16
  %195 = getelementptr inbounds [20 x i16], [20 x i16]* %8, i64 0, i64 13
  store i16 %194, i16* %195, align 2
  %196 = load i16, i16* %187, align 2
  %197 = zext i16 %196 to i32
  %198 = mul nuw nsw i32 %22, %197
  %199 = getelementptr inbounds i16, i16* %171, i64 3
  %200 = load i16, i16* %199, align 2
  %201 = zext i16 %200 to i32
  %202 = mul nuw nsw i32 %24, %201
  %203 = add nuw nsw i32 %198, 64
  %204 = add nuw nsw i32 %203, %202
  %205 = lshr i32 %204, 7
  %206 = trunc i32 %205 to i16
  %207 = getelementptr inbounds [20 x i16], [20 x i16]* %8, i64 0, i64 14
  store i16 %206, i16* %207, align 4
  %208 = load i16, i16* %199, align 2
  %209 = zext i16 %208 to i32
  %210 = mul nuw nsw i32 %22, %209
  %211 = getelementptr inbounds i16, i16* %171, i64 4
  %212 = load i16, i16* %211, align 2
  %213 = zext i16 %212 to i32
  %214 = mul nuw nsw i32 %24, %213
  %215 = add nuw nsw i32 %210, 64
  %216 = add nuw nsw i32 %215, %214
  %217 = lshr i32 %216, 7
  %218 = trunc i32 %217 to i16
  %219 = getelementptr inbounds [20 x i16], [20 x i16]* %8, i64 0, i64 15
  store i16 %218, i16* %219, align 2
  %220 = getelementptr inbounds i16, i16* %211, i64 %19
  %221 = getelementptr inbounds [20 x i16], [20 x i16]* %8, i64 0, i64 16
  %222 = load i16, i16* %220, align 2
  %223 = zext i16 %222 to i32
  %224 = mul nuw nsw i32 %22, %223
  %225 = getelementptr inbounds i16, i16* %220, i64 1
  %226 = load i16, i16* %225, align 2
  %227 = zext i16 %226 to i32
  %228 = mul nuw nsw i32 %24, %227
  %229 = add nuw nsw i32 %224, 64
  %230 = add nuw nsw i32 %229, %228
  %231 = lshr i32 %230, 7
  %232 = trunc i32 %231 to i16
  store i16 %232, i16* %221, align 16
  %233 = load i16, i16* %225, align 2
  %234 = zext i16 %233 to i32
  %235 = mul nuw nsw i32 %22, %234
  %236 = getelementptr inbounds i16, i16* %220, i64 2
  %237 = load i16, i16* %236, align 2
  %238 = zext i16 %237 to i32
  %239 = mul nuw nsw i32 %24, %238
  %240 = add nuw nsw i32 %235, 64
  %241 = add nuw nsw i32 %240, %239
  %242 = lshr i32 %241, 7
  %243 = trunc i32 %242 to i16
  %244 = getelementptr inbounds [20 x i16], [20 x i16]* %8, i64 0, i64 17
  store i16 %243, i16* %244, align 2
  %245 = load i16, i16* %236, align 2
  %246 = zext i16 %245 to i32
  %247 = mul nuw nsw i32 %22, %246
  %248 = getelementptr inbounds i16, i16* %220, i64 3
  %249 = load i16, i16* %248, align 2
  %250 = zext i16 %249 to i32
  %251 = mul nuw nsw i32 %24, %250
  %252 = add nuw nsw i32 %247, 64
  %253 = add nuw nsw i32 %252, %251
  %254 = lshr i32 %253, 7
  %255 = trunc i32 %254 to i16
  %256 = getelementptr inbounds [20 x i16], [20 x i16]* %8, i64 0, i64 18
  store i16 %255, i16* %256, align 4
  %257 = load i16, i16* %248, align 2
  %258 = zext i16 %257 to i32
  %259 = mul nuw nsw i32 %22, %258
  %260 = getelementptr inbounds i16, i16* %220, i64 4
  %261 = load i16, i16* %260, align 2
  %262 = zext i16 %261 to i32
  %263 = mul nuw nsw i32 %24, %262
  %264 = add nuw nsw i32 %259, 64
  %265 = add nuw nsw i32 %264, %263
  %266 = lshr i32 %265, 7
  %267 = trunc i32 %266 to i16
  %268 = getelementptr inbounds [20 x i16], [20 x i16]* %8, i64 0, i64 19
  store i16 %267, i16* %268, align 2
  %269 = sext i32 %3 to i64
  %270 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %269, i64 0
  %271 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %269, i64 1
  %272 = load i8, i8* %270, align 2
  %273 = zext i8 %272 to i32
  %274 = load i8, i8* %271, align 1
  %275 = zext i8 %274 to i32
  %276 = getelementptr inbounds [20 x i16], [20 x i16]* %8, i64 0, i64 5
  %277 = load i16, i16* %276, align 2
  %278 = zext i16 %277 to i32
  %279 = getelementptr inbounds [20 x i16], [20 x i16]* %8, i64 0, i64 6
  %280 = load i16, i16* %279, align 4
  %281 = zext i16 %280 to i32
  %282 = getelementptr inbounds [20 x i16], [20 x i16]* %8, i64 0, i64 7
  %283 = load i16, i16* %282, align 2
  %284 = zext i16 %283 to i32
  %285 = getelementptr inbounds [20 x i16], [20 x i16]* %8, i64 0, i64 8
  %286 = load i16, i16* %285, align 16
  %287 = zext i16 %286 to i32
  %288 = getelementptr inbounds [20 x i16], [20 x i16]* %8, i64 0, i64 9
  %289 = load i16, i16* %288, align 2
  %290 = zext i16 %289 to i32
  %291 = getelementptr inbounds [20 x i16], [20 x i16]* %8, i64 0, i64 10
  %292 = load i16, i16* %291, align 4
  %293 = zext i16 %292 to i32
  %294 = bitcast [20 x i16]* %8 to <8 x i16>*
  %295 = load <8 x i16>, <8 x i16>* %294, align 16
  %296 = zext <8 x i16> %295 to <8 x i32>
  %297 = insertelement <8 x i32> undef, i32 %273, i32 0
  %298 = shufflevector <8 x i32> %297, <8 x i32> undef, <8 x i32> zeroinitializer
  %299 = mul nuw nsw <8 x i32> %298, %296
  %300 = getelementptr inbounds [20 x i16], [20 x i16]* %8, i64 0, i64 11
  %301 = load i16, i16* %300, align 2
  %302 = zext i16 %301 to i32
  %303 = insertelement <8 x i32> undef, i32 %275, i32 0
  %304 = shufflevector <8 x i32> %303, <8 x i32> undef, <8 x i32> zeroinitializer
  %305 = extractelement <8 x i32> %296, i32 4
  %306 = insertelement <8 x i32> undef, i32 %305, i32 0
  %307 = insertelement <8 x i32> %306, i32 %278, i32 1
  %308 = insertelement <8 x i32> %307, i32 %281, i32 2
  %309 = insertelement <8 x i32> %308, i32 %284, i32 3
  %310 = insertelement <8 x i32> %309, i32 %287, i32 4
  %311 = insertelement <8 x i32> %310, i32 %290, i32 5
  %312 = insertelement <8 x i32> %311, i32 %293, i32 6
  %313 = insertelement <8 x i32> %312, i32 %302, i32 7
  %314 = mul nuw nsw <8 x i32> %304, %313
  %315 = add nuw nsw <8 x i32> %299, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %316 = add nuw nsw <8 x i32> %315, %314
  %317 = lshr <8 x i32> %316, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %318 = trunc <8 x i32> %317 to <8 x i16>
  %319 = bitcast [16 x i16]* %9 to <8 x i16>*
  store <8 x i16> %318, <8 x i16>* %319, align 16
  %320 = getelementptr inbounds [20 x i16], [20 x i16]* %8, i64 0, i64 8
  %321 = getelementptr inbounds [16 x i16], [16 x i16]* %9, i64 0, i64 8
  %322 = getelementptr inbounds [20 x i16], [20 x i16]* %8, i64 0, i64 12
  %323 = bitcast i16* %320 to <8 x i16>*
  %324 = load <8 x i16>, <8 x i16>* %323, align 16
  %325 = zext <8 x i16> %324 to <8 x i32>
  %326 = mul nuw nsw <8 x i32> %298, %325
  %327 = bitcast i16* %322 to <8 x i16>*
  %328 = load <8 x i16>, <8 x i16>* %327, align 8
  %329 = zext <8 x i16> %328 to <8 x i32>
  %330 = mul nuw nsw <8 x i32> %304, %329
  %331 = add nuw nsw <8 x i32> %326, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %332 = add nuw nsw <8 x i32> %331, %330
  %333 = lshr <8 x i32> %332, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %334 = trunc <8 x i32> %333 to <8 x i16>
  %335 = bitcast i16* %321 to <8 x i16>*
  store <8 x i16> %334, <8 x i16>* %335, align 16
  %336 = ptrtoint [16 x i16]* %9 to i64
  %337 = lshr exact i64 %336, 1
  %338 = inttoptr i64 %337 to i8*
  %339 = call i32 @vpx_highbd_8_variance4x4_c(i8* nonnull %338, i32 4, i8* %4, i32 %5, i32* %6)
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %11) #4
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %10) #4
  ret i32 %339
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_highbd_10_sub_pixel_variance4x4_c(i8*, i32, i32, i32, i8*, i32, i32* nocapture) local_unnamed_addr #2 {
  %8 = alloca [20 x i16], align 16
  %9 = alloca [16 x i16], align 16
  %10 = bitcast [20 x i16]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %10) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %10, i8 -86, i64 40, i1 false)
  %11 = bitcast [16 x i16]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %11) #4
  %12 = sext i32 %2 to i64
  %13 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %12, i64 0
  %14 = ptrtoint i8* %0 to i64
  %15 = shl i64 %14, 1
  %16 = inttoptr i64 %15 to i16*
  %17 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %12, i64 1
  %18 = add i32 %1, -4
  %19 = zext i32 %18 to i64
  %20 = bitcast [16 x i16]* %9 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %20, i8 -86, i64 32, i1 false)
  %21 = load i8, i8* %13, align 2
  %22 = zext i8 %21 to i32
  %23 = load i8, i8* %17, align 1
  %24 = zext i8 %23 to i32
  %25 = getelementptr inbounds [20 x i16], [20 x i16]* %8, i64 0, i64 0
  %26 = load i16, i16* %16, align 2
  %27 = zext i16 %26 to i32
  %28 = mul nuw nsw i32 %22, %27
  %29 = getelementptr inbounds i16, i16* %16, i64 1
  %30 = load i16, i16* %29, align 2
  %31 = zext i16 %30 to i32
  %32 = mul nuw nsw i32 %24, %31
  %33 = add nuw nsw i32 %28, 64
  %34 = add nuw nsw i32 %33, %32
  %35 = lshr i32 %34, 7
  %36 = trunc i32 %35 to i16
  store i16 %36, i16* %25, align 16
  %37 = load i16, i16* %29, align 2
  %38 = zext i16 %37 to i32
  %39 = mul nuw nsw i32 %22, %38
  %40 = getelementptr inbounds i16, i16* %16, i64 2
  %41 = load i16, i16* %40, align 2
  %42 = zext i16 %41 to i32
  %43 = mul nuw nsw i32 %24, %42
  %44 = add nuw nsw i32 %39, 64
  %45 = add nuw nsw i32 %44, %43
  %46 = lshr i32 %45, 7
  %47 = trunc i32 %46 to i16
  %48 = getelementptr inbounds [20 x i16], [20 x i16]* %8, i64 0, i64 1
  store i16 %47, i16* %48, align 2
  %49 = load i16, i16* %40, align 2
  %50 = zext i16 %49 to i32
  %51 = mul nuw nsw i32 %22, %50
  %52 = getelementptr inbounds i16, i16* %16, i64 3
  %53 = load i16, i16* %52, align 2
  %54 = zext i16 %53 to i32
  %55 = mul nuw nsw i32 %24, %54
  %56 = add nuw nsw i32 %51, 64
  %57 = add nuw nsw i32 %56, %55
  %58 = lshr i32 %57, 7
  %59 = trunc i32 %58 to i16
  %60 = getelementptr inbounds [20 x i16], [20 x i16]* %8, i64 0, i64 2
  store i16 %59, i16* %60, align 4
  %61 = load i16, i16* %52, align 2
  %62 = zext i16 %61 to i32
  %63 = mul nuw nsw i32 %22, %62
  %64 = getelementptr inbounds i16, i16* %16, i64 4
  %65 = load i16, i16* %64, align 2
  %66 = zext i16 %65 to i32
  %67 = mul nuw nsw i32 %24, %66
  %68 = add nuw nsw i32 %63, 64
  %69 = add nuw nsw i32 %68, %67
  %70 = lshr i32 %69, 7
  %71 = trunc i32 %70 to i16
  %72 = getelementptr inbounds [20 x i16], [20 x i16]* %8, i64 0, i64 3
  store i16 %71, i16* %72, align 2
  %73 = getelementptr inbounds i16, i16* %64, i64 %19
  %74 = getelementptr inbounds [20 x i16], [20 x i16]* %8, i64 0, i64 4
  %75 = load i16, i16* %73, align 2
  %76 = zext i16 %75 to i32
  %77 = mul nuw nsw i32 %22, %76
  %78 = getelementptr inbounds i16, i16* %73, i64 1
  %79 = load i16, i16* %78, align 2
  %80 = zext i16 %79 to i32
  %81 = mul nuw nsw i32 %24, %80
  %82 = add nuw nsw i32 %77, 64
  %83 = add nuw nsw i32 %82, %81
  %84 = lshr i32 %83, 7
  %85 = trunc i32 %84 to i16
  store i16 %85, i16* %74, align 8
  %86 = load i16, i16* %78, align 2
  %87 = zext i16 %86 to i32
  %88 = mul nuw nsw i32 %22, %87
  %89 = getelementptr inbounds i16, i16* %73, i64 2
  %90 = load i16, i16* %89, align 2
  %91 = zext i16 %90 to i32
  %92 = mul nuw nsw i32 %24, %91
  %93 = add nuw nsw i32 %88, 64
  %94 = add nuw nsw i32 %93, %92
  %95 = lshr i32 %94, 7
  %96 = trunc i32 %95 to i16
  %97 = getelementptr inbounds [20 x i16], [20 x i16]* %8, i64 0, i64 5
  store i16 %96, i16* %97, align 2
  %98 = load i16, i16* %89, align 2
  %99 = zext i16 %98 to i32
  %100 = mul nuw nsw i32 %22, %99
  %101 = getelementptr inbounds i16, i16* %73, i64 3
  %102 = load i16, i16* %101, align 2
  %103 = zext i16 %102 to i32
  %104 = mul nuw nsw i32 %24, %103
  %105 = add nuw nsw i32 %100, 64
  %106 = add nuw nsw i32 %105, %104
  %107 = lshr i32 %106, 7
  %108 = trunc i32 %107 to i16
  %109 = getelementptr inbounds [20 x i16], [20 x i16]* %8, i64 0, i64 6
  store i16 %108, i16* %109, align 4
  %110 = load i16, i16* %101, align 2
  %111 = zext i16 %110 to i32
  %112 = mul nuw nsw i32 %22, %111
  %113 = getelementptr inbounds i16, i16* %73, i64 4
  %114 = load i16, i16* %113, align 2
  %115 = zext i16 %114 to i32
  %116 = mul nuw nsw i32 %24, %115
  %117 = add nuw nsw i32 %112, 64
  %118 = add nuw nsw i32 %117, %116
  %119 = lshr i32 %118, 7
  %120 = trunc i32 %119 to i16
  %121 = getelementptr inbounds [20 x i16], [20 x i16]* %8, i64 0, i64 7
  store i16 %120, i16* %121, align 2
  %122 = getelementptr inbounds i16, i16* %113, i64 %19
  %123 = getelementptr inbounds [20 x i16], [20 x i16]* %8, i64 0, i64 8
  %124 = load i16, i16* %122, align 2
  %125 = zext i16 %124 to i32
  %126 = mul nuw nsw i32 %22, %125
  %127 = getelementptr inbounds i16, i16* %122, i64 1
  %128 = load i16, i16* %127, align 2
  %129 = zext i16 %128 to i32
  %130 = mul nuw nsw i32 %24, %129
  %131 = add nuw nsw i32 %126, 64
  %132 = add nuw nsw i32 %131, %130
  %133 = lshr i32 %132, 7
  %134 = trunc i32 %133 to i16
  store i16 %134, i16* %123, align 16
  %135 = load i16, i16* %127, align 2
  %136 = zext i16 %135 to i32
  %137 = mul nuw nsw i32 %22, %136
  %138 = getelementptr inbounds i16, i16* %122, i64 2
  %139 = load i16, i16* %138, align 2
  %140 = zext i16 %139 to i32
  %141 = mul nuw nsw i32 %24, %140
  %142 = add nuw nsw i32 %137, 64
  %143 = add nuw nsw i32 %142, %141
  %144 = lshr i32 %143, 7
  %145 = trunc i32 %144 to i16
  %146 = getelementptr inbounds [20 x i16], [20 x i16]* %8, i64 0, i64 9
  store i16 %145, i16* %146, align 2
  %147 = load i16, i16* %138, align 2
  %148 = zext i16 %147 to i32
  %149 = mul nuw nsw i32 %22, %148
  %150 = getelementptr inbounds i16, i16* %122, i64 3
  %151 = load i16, i16* %150, align 2
  %152 = zext i16 %151 to i32
  %153 = mul nuw nsw i32 %24, %152
  %154 = add nuw nsw i32 %149, 64
  %155 = add nuw nsw i32 %154, %153
  %156 = lshr i32 %155, 7
  %157 = trunc i32 %156 to i16
  %158 = getelementptr inbounds [20 x i16], [20 x i16]* %8, i64 0, i64 10
  store i16 %157, i16* %158, align 4
  %159 = load i16, i16* %150, align 2
  %160 = zext i16 %159 to i32
  %161 = mul nuw nsw i32 %22, %160
  %162 = getelementptr inbounds i16, i16* %122, i64 4
  %163 = load i16, i16* %162, align 2
  %164 = zext i16 %163 to i32
  %165 = mul nuw nsw i32 %24, %164
  %166 = add nuw nsw i32 %161, 64
  %167 = add nuw nsw i32 %166, %165
  %168 = lshr i32 %167, 7
  %169 = trunc i32 %168 to i16
  %170 = getelementptr inbounds [20 x i16], [20 x i16]* %8, i64 0, i64 11
  store i16 %169, i16* %170, align 2
  %171 = getelementptr inbounds i16, i16* %162, i64 %19
  %172 = getelementptr inbounds [20 x i16], [20 x i16]* %8, i64 0, i64 12
  %173 = load i16, i16* %171, align 2
  %174 = zext i16 %173 to i32
  %175 = mul nuw nsw i32 %22, %174
  %176 = getelementptr inbounds i16, i16* %171, i64 1
  %177 = load i16, i16* %176, align 2
  %178 = zext i16 %177 to i32
  %179 = mul nuw nsw i32 %24, %178
  %180 = add nuw nsw i32 %175, 64
  %181 = add nuw nsw i32 %180, %179
  %182 = lshr i32 %181, 7
  %183 = trunc i32 %182 to i16
  store i16 %183, i16* %172, align 8
  %184 = load i16, i16* %176, align 2
  %185 = zext i16 %184 to i32
  %186 = mul nuw nsw i32 %22, %185
  %187 = getelementptr inbounds i16, i16* %171, i64 2
  %188 = load i16, i16* %187, align 2
  %189 = zext i16 %188 to i32
  %190 = mul nuw nsw i32 %24, %189
  %191 = add nuw nsw i32 %186, 64
  %192 = add nuw nsw i32 %191, %190
  %193 = lshr i32 %192, 7
  %194 = trunc i32 %193 to i16
  %195 = getelementptr inbounds [20 x i16], [20 x i16]* %8, i64 0, i64 13
  store i16 %194, i16* %195, align 2
  %196 = load i16, i16* %187, align 2
  %197 = zext i16 %196 to i32
  %198 = mul nuw nsw i32 %22, %197
  %199 = getelementptr inbounds i16, i16* %171, i64 3
  %200 = load i16, i16* %199, align 2
  %201 = zext i16 %200 to i32
  %202 = mul nuw nsw i32 %24, %201
  %203 = add nuw nsw i32 %198, 64
  %204 = add nuw nsw i32 %203, %202
  %205 = lshr i32 %204, 7
  %206 = trunc i32 %205 to i16
  %207 = getelementptr inbounds [20 x i16], [20 x i16]* %8, i64 0, i64 14
  store i16 %206, i16* %207, align 4
  %208 = load i16, i16* %199, align 2
  %209 = zext i16 %208 to i32
  %210 = mul nuw nsw i32 %22, %209
  %211 = getelementptr inbounds i16, i16* %171, i64 4
  %212 = load i16, i16* %211, align 2
  %213 = zext i16 %212 to i32
  %214 = mul nuw nsw i32 %24, %213
  %215 = add nuw nsw i32 %210, 64
  %216 = add nuw nsw i32 %215, %214
  %217 = lshr i32 %216, 7
  %218 = trunc i32 %217 to i16
  %219 = getelementptr inbounds [20 x i16], [20 x i16]* %8, i64 0, i64 15
  store i16 %218, i16* %219, align 2
  %220 = getelementptr inbounds i16, i16* %211, i64 %19
  %221 = getelementptr inbounds [20 x i16], [20 x i16]* %8, i64 0, i64 16
  %222 = load i16, i16* %220, align 2
  %223 = zext i16 %222 to i32
  %224 = mul nuw nsw i32 %22, %223
  %225 = getelementptr inbounds i16, i16* %220, i64 1
  %226 = load i16, i16* %225, align 2
  %227 = zext i16 %226 to i32
  %228 = mul nuw nsw i32 %24, %227
  %229 = add nuw nsw i32 %224, 64
  %230 = add nuw nsw i32 %229, %228
  %231 = lshr i32 %230, 7
  %232 = trunc i32 %231 to i16
  store i16 %232, i16* %221, align 16
  %233 = load i16, i16* %225, align 2
  %234 = zext i16 %233 to i32
  %235 = mul nuw nsw i32 %22, %234
  %236 = getelementptr inbounds i16, i16* %220, i64 2
  %237 = load i16, i16* %236, align 2
  %238 = zext i16 %237 to i32
  %239 = mul nuw nsw i32 %24, %238
  %240 = add nuw nsw i32 %235, 64
  %241 = add nuw nsw i32 %240, %239
  %242 = lshr i32 %241, 7
  %243 = trunc i32 %242 to i16
  %244 = getelementptr inbounds [20 x i16], [20 x i16]* %8, i64 0, i64 17
  store i16 %243, i16* %244, align 2
  %245 = load i16, i16* %236, align 2
  %246 = zext i16 %245 to i32
  %247 = mul nuw nsw i32 %22, %246
  %248 = getelementptr inbounds i16, i16* %220, i64 3
  %249 = load i16, i16* %248, align 2
  %250 = zext i16 %249 to i32
  %251 = mul nuw nsw i32 %24, %250
  %252 = add nuw nsw i32 %247, 64
  %253 = add nuw nsw i32 %252, %251
  %254 = lshr i32 %253, 7
  %255 = trunc i32 %254 to i16
  %256 = getelementptr inbounds [20 x i16], [20 x i16]* %8, i64 0, i64 18
  store i16 %255, i16* %256, align 4
  %257 = load i16, i16* %248, align 2
  %258 = zext i16 %257 to i32
  %259 = mul nuw nsw i32 %22, %258
  %260 = getelementptr inbounds i16, i16* %220, i64 4
  %261 = load i16, i16* %260, align 2
  %262 = zext i16 %261 to i32
  %263 = mul nuw nsw i32 %24, %262
  %264 = add nuw nsw i32 %259, 64
  %265 = add nuw nsw i32 %264, %263
  %266 = lshr i32 %265, 7
  %267 = trunc i32 %266 to i16
  %268 = getelementptr inbounds [20 x i16], [20 x i16]* %8, i64 0, i64 19
  store i16 %267, i16* %268, align 2
  %269 = sext i32 %3 to i64
  %270 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %269, i64 0
  %271 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %269, i64 1
  %272 = load i8, i8* %270, align 2
  %273 = zext i8 %272 to i32
  %274 = load i8, i8* %271, align 1
  %275 = zext i8 %274 to i32
  %276 = getelementptr inbounds [20 x i16], [20 x i16]* %8, i64 0, i64 5
  %277 = load i16, i16* %276, align 2
  %278 = zext i16 %277 to i32
  %279 = getelementptr inbounds [20 x i16], [20 x i16]* %8, i64 0, i64 6
  %280 = load i16, i16* %279, align 4
  %281 = zext i16 %280 to i32
  %282 = getelementptr inbounds [20 x i16], [20 x i16]* %8, i64 0, i64 7
  %283 = load i16, i16* %282, align 2
  %284 = zext i16 %283 to i32
  %285 = getelementptr inbounds [20 x i16], [20 x i16]* %8, i64 0, i64 8
  %286 = load i16, i16* %285, align 16
  %287 = zext i16 %286 to i32
  %288 = getelementptr inbounds [20 x i16], [20 x i16]* %8, i64 0, i64 9
  %289 = load i16, i16* %288, align 2
  %290 = zext i16 %289 to i32
  %291 = getelementptr inbounds [20 x i16], [20 x i16]* %8, i64 0, i64 10
  %292 = load i16, i16* %291, align 4
  %293 = zext i16 %292 to i32
  %294 = bitcast [20 x i16]* %8 to <8 x i16>*
  %295 = load <8 x i16>, <8 x i16>* %294, align 16
  %296 = zext <8 x i16> %295 to <8 x i32>
  %297 = insertelement <8 x i32> undef, i32 %273, i32 0
  %298 = shufflevector <8 x i32> %297, <8 x i32> undef, <8 x i32> zeroinitializer
  %299 = mul nuw nsw <8 x i32> %298, %296
  %300 = getelementptr inbounds [20 x i16], [20 x i16]* %8, i64 0, i64 11
  %301 = load i16, i16* %300, align 2
  %302 = zext i16 %301 to i32
  %303 = insertelement <8 x i32> undef, i32 %275, i32 0
  %304 = shufflevector <8 x i32> %303, <8 x i32> undef, <8 x i32> zeroinitializer
  %305 = extractelement <8 x i32> %296, i32 4
  %306 = insertelement <8 x i32> undef, i32 %305, i32 0
  %307 = insertelement <8 x i32> %306, i32 %278, i32 1
  %308 = insertelement <8 x i32> %307, i32 %281, i32 2
  %309 = insertelement <8 x i32> %308, i32 %284, i32 3
  %310 = insertelement <8 x i32> %309, i32 %287, i32 4
  %311 = insertelement <8 x i32> %310, i32 %290, i32 5
  %312 = insertelement <8 x i32> %311, i32 %293, i32 6
  %313 = insertelement <8 x i32> %312, i32 %302, i32 7
  %314 = mul nuw nsw <8 x i32> %304, %313
  %315 = add nuw nsw <8 x i32> %299, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %316 = add nuw nsw <8 x i32> %315, %314
  %317 = lshr <8 x i32> %316, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %318 = trunc <8 x i32> %317 to <8 x i16>
  %319 = bitcast [16 x i16]* %9 to <8 x i16>*
  store <8 x i16> %318, <8 x i16>* %319, align 16
  %320 = getelementptr inbounds [20 x i16], [20 x i16]* %8, i64 0, i64 8
  %321 = getelementptr inbounds [16 x i16], [16 x i16]* %9, i64 0, i64 8
  %322 = getelementptr inbounds [20 x i16], [20 x i16]* %8, i64 0, i64 12
  %323 = bitcast i16* %320 to <8 x i16>*
  %324 = load <8 x i16>, <8 x i16>* %323, align 16
  %325 = zext <8 x i16> %324 to <8 x i32>
  %326 = mul nuw nsw <8 x i32> %298, %325
  %327 = bitcast i16* %322 to <8 x i16>*
  %328 = load <8 x i16>, <8 x i16>* %327, align 8
  %329 = zext <8 x i16> %328 to <8 x i32>
  %330 = mul nuw nsw <8 x i32> %304, %329
  %331 = add nuw nsw <8 x i32> %326, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %332 = add nuw nsw <8 x i32> %331, %330
  %333 = lshr <8 x i32> %332, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %334 = trunc <8 x i32> %333 to <8 x i16>
  %335 = bitcast i16* %321 to <8 x i16>*
  store <8 x i16> %334, <8 x i16>* %335, align 16
  %336 = ptrtoint [16 x i16]* %9 to i64
  %337 = lshr exact i64 %336, 1
  %338 = inttoptr i64 %337 to i8*
  %339 = call i32 @vpx_highbd_10_variance4x4_c(i8* nonnull %338, i32 4, i8* %4, i32 %5, i32* %6)
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %11) #4
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %10) #4
  ret i32 %339
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_highbd_12_sub_pixel_variance4x4_c(i8*, i32, i32, i32, i8*, i32, i32* nocapture) local_unnamed_addr #2 {
  %8 = alloca [20 x i16], align 16
  %9 = alloca [16 x i16], align 16
  %10 = bitcast [20 x i16]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %10) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %10, i8 -86, i64 40, i1 false)
  %11 = bitcast [16 x i16]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %11) #4
  %12 = sext i32 %2 to i64
  %13 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %12, i64 0
  %14 = ptrtoint i8* %0 to i64
  %15 = shl i64 %14, 1
  %16 = inttoptr i64 %15 to i16*
  %17 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %12, i64 1
  %18 = add i32 %1, -4
  %19 = zext i32 %18 to i64
  %20 = bitcast [16 x i16]* %9 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %20, i8 -86, i64 32, i1 false)
  %21 = load i8, i8* %13, align 2
  %22 = zext i8 %21 to i32
  %23 = load i8, i8* %17, align 1
  %24 = zext i8 %23 to i32
  %25 = getelementptr inbounds [20 x i16], [20 x i16]* %8, i64 0, i64 0
  %26 = load i16, i16* %16, align 2
  %27 = zext i16 %26 to i32
  %28 = mul nuw nsw i32 %22, %27
  %29 = getelementptr inbounds i16, i16* %16, i64 1
  %30 = load i16, i16* %29, align 2
  %31 = zext i16 %30 to i32
  %32 = mul nuw nsw i32 %24, %31
  %33 = add nuw nsw i32 %28, 64
  %34 = add nuw nsw i32 %33, %32
  %35 = lshr i32 %34, 7
  %36 = trunc i32 %35 to i16
  store i16 %36, i16* %25, align 16
  %37 = load i16, i16* %29, align 2
  %38 = zext i16 %37 to i32
  %39 = mul nuw nsw i32 %22, %38
  %40 = getelementptr inbounds i16, i16* %16, i64 2
  %41 = load i16, i16* %40, align 2
  %42 = zext i16 %41 to i32
  %43 = mul nuw nsw i32 %24, %42
  %44 = add nuw nsw i32 %39, 64
  %45 = add nuw nsw i32 %44, %43
  %46 = lshr i32 %45, 7
  %47 = trunc i32 %46 to i16
  %48 = getelementptr inbounds [20 x i16], [20 x i16]* %8, i64 0, i64 1
  store i16 %47, i16* %48, align 2
  %49 = load i16, i16* %40, align 2
  %50 = zext i16 %49 to i32
  %51 = mul nuw nsw i32 %22, %50
  %52 = getelementptr inbounds i16, i16* %16, i64 3
  %53 = load i16, i16* %52, align 2
  %54 = zext i16 %53 to i32
  %55 = mul nuw nsw i32 %24, %54
  %56 = add nuw nsw i32 %51, 64
  %57 = add nuw nsw i32 %56, %55
  %58 = lshr i32 %57, 7
  %59 = trunc i32 %58 to i16
  %60 = getelementptr inbounds [20 x i16], [20 x i16]* %8, i64 0, i64 2
  store i16 %59, i16* %60, align 4
  %61 = load i16, i16* %52, align 2
  %62 = zext i16 %61 to i32
  %63 = mul nuw nsw i32 %22, %62
  %64 = getelementptr inbounds i16, i16* %16, i64 4
  %65 = load i16, i16* %64, align 2
  %66 = zext i16 %65 to i32
  %67 = mul nuw nsw i32 %24, %66
  %68 = add nuw nsw i32 %63, 64
  %69 = add nuw nsw i32 %68, %67
  %70 = lshr i32 %69, 7
  %71 = trunc i32 %70 to i16
  %72 = getelementptr inbounds [20 x i16], [20 x i16]* %8, i64 0, i64 3
  store i16 %71, i16* %72, align 2
  %73 = getelementptr inbounds i16, i16* %64, i64 %19
  %74 = getelementptr inbounds [20 x i16], [20 x i16]* %8, i64 0, i64 4
  %75 = load i16, i16* %73, align 2
  %76 = zext i16 %75 to i32
  %77 = mul nuw nsw i32 %22, %76
  %78 = getelementptr inbounds i16, i16* %73, i64 1
  %79 = load i16, i16* %78, align 2
  %80 = zext i16 %79 to i32
  %81 = mul nuw nsw i32 %24, %80
  %82 = add nuw nsw i32 %77, 64
  %83 = add nuw nsw i32 %82, %81
  %84 = lshr i32 %83, 7
  %85 = trunc i32 %84 to i16
  store i16 %85, i16* %74, align 8
  %86 = load i16, i16* %78, align 2
  %87 = zext i16 %86 to i32
  %88 = mul nuw nsw i32 %22, %87
  %89 = getelementptr inbounds i16, i16* %73, i64 2
  %90 = load i16, i16* %89, align 2
  %91 = zext i16 %90 to i32
  %92 = mul nuw nsw i32 %24, %91
  %93 = add nuw nsw i32 %88, 64
  %94 = add nuw nsw i32 %93, %92
  %95 = lshr i32 %94, 7
  %96 = trunc i32 %95 to i16
  %97 = getelementptr inbounds [20 x i16], [20 x i16]* %8, i64 0, i64 5
  store i16 %96, i16* %97, align 2
  %98 = load i16, i16* %89, align 2
  %99 = zext i16 %98 to i32
  %100 = mul nuw nsw i32 %22, %99
  %101 = getelementptr inbounds i16, i16* %73, i64 3
  %102 = load i16, i16* %101, align 2
  %103 = zext i16 %102 to i32
  %104 = mul nuw nsw i32 %24, %103
  %105 = add nuw nsw i32 %100, 64
  %106 = add nuw nsw i32 %105, %104
  %107 = lshr i32 %106, 7
  %108 = trunc i32 %107 to i16
  %109 = getelementptr inbounds [20 x i16], [20 x i16]* %8, i64 0, i64 6
  store i16 %108, i16* %109, align 4
  %110 = load i16, i16* %101, align 2
  %111 = zext i16 %110 to i32
  %112 = mul nuw nsw i32 %22, %111
  %113 = getelementptr inbounds i16, i16* %73, i64 4
  %114 = load i16, i16* %113, align 2
  %115 = zext i16 %114 to i32
  %116 = mul nuw nsw i32 %24, %115
  %117 = add nuw nsw i32 %112, 64
  %118 = add nuw nsw i32 %117, %116
  %119 = lshr i32 %118, 7
  %120 = trunc i32 %119 to i16
  %121 = getelementptr inbounds [20 x i16], [20 x i16]* %8, i64 0, i64 7
  store i16 %120, i16* %121, align 2
  %122 = getelementptr inbounds i16, i16* %113, i64 %19
  %123 = getelementptr inbounds [20 x i16], [20 x i16]* %8, i64 0, i64 8
  %124 = load i16, i16* %122, align 2
  %125 = zext i16 %124 to i32
  %126 = mul nuw nsw i32 %22, %125
  %127 = getelementptr inbounds i16, i16* %122, i64 1
  %128 = load i16, i16* %127, align 2
  %129 = zext i16 %128 to i32
  %130 = mul nuw nsw i32 %24, %129
  %131 = add nuw nsw i32 %126, 64
  %132 = add nuw nsw i32 %131, %130
  %133 = lshr i32 %132, 7
  %134 = trunc i32 %133 to i16
  store i16 %134, i16* %123, align 16
  %135 = load i16, i16* %127, align 2
  %136 = zext i16 %135 to i32
  %137 = mul nuw nsw i32 %22, %136
  %138 = getelementptr inbounds i16, i16* %122, i64 2
  %139 = load i16, i16* %138, align 2
  %140 = zext i16 %139 to i32
  %141 = mul nuw nsw i32 %24, %140
  %142 = add nuw nsw i32 %137, 64
  %143 = add nuw nsw i32 %142, %141
  %144 = lshr i32 %143, 7
  %145 = trunc i32 %144 to i16
  %146 = getelementptr inbounds [20 x i16], [20 x i16]* %8, i64 0, i64 9
  store i16 %145, i16* %146, align 2
  %147 = load i16, i16* %138, align 2
  %148 = zext i16 %147 to i32
  %149 = mul nuw nsw i32 %22, %148
  %150 = getelementptr inbounds i16, i16* %122, i64 3
  %151 = load i16, i16* %150, align 2
  %152 = zext i16 %151 to i32
  %153 = mul nuw nsw i32 %24, %152
  %154 = add nuw nsw i32 %149, 64
  %155 = add nuw nsw i32 %154, %153
  %156 = lshr i32 %155, 7
  %157 = trunc i32 %156 to i16
  %158 = getelementptr inbounds [20 x i16], [20 x i16]* %8, i64 0, i64 10
  store i16 %157, i16* %158, align 4
  %159 = load i16, i16* %150, align 2
  %160 = zext i16 %159 to i32
  %161 = mul nuw nsw i32 %22, %160
  %162 = getelementptr inbounds i16, i16* %122, i64 4
  %163 = load i16, i16* %162, align 2
  %164 = zext i16 %163 to i32
  %165 = mul nuw nsw i32 %24, %164
  %166 = add nuw nsw i32 %161, 64
  %167 = add nuw nsw i32 %166, %165
  %168 = lshr i32 %167, 7
  %169 = trunc i32 %168 to i16
  %170 = getelementptr inbounds [20 x i16], [20 x i16]* %8, i64 0, i64 11
  store i16 %169, i16* %170, align 2
  %171 = getelementptr inbounds i16, i16* %162, i64 %19
  %172 = getelementptr inbounds [20 x i16], [20 x i16]* %8, i64 0, i64 12
  %173 = load i16, i16* %171, align 2
  %174 = zext i16 %173 to i32
  %175 = mul nuw nsw i32 %22, %174
  %176 = getelementptr inbounds i16, i16* %171, i64 1
  %177 = load i16, i16* %176, align 2
  %178 = zext i16 %177 to i32
  %179 = mul nuw nsw i32 %24, %178
  %180 = add nuw nsw i32 %175, 64
  %181 = add nuw nsw i32 %180, %179
  %182 = lshr i32 %181, 7
  %183 = trunc i32 %182 to i16
  store i16 %183, i16* %172, align 8
  %184 = load i16, i16* %176, align 2
  %185 = zext i16 %184 to i32
  %186 = mul nuw nsw i32 %22, %185
  %187 = getelementptr inbounds i16, i16* %171, i64 2
  %188 = load i16, i16* %187, align 2
  %189 = zext i16 %188 to i32
  %190 = mul nuw nsw i32 %24, %189
  %191 = add nuw nsw i32 %186, 64
  %192 = add nuw nsw i32 %191, %190
  %193 = lshr i32 %192, 7
  %194 = trunc i32 %193 to i16
  %195 = getelementptr inbounds [20 x i16], [20 x i16]* %8, i64 0, i64 13
  store i16 %194, i16* %195, align 2
  %196 = load i16, i16* %187, align 2
  %197 = zext i16 %196 to i32
  %198 = mul nuw nsw i32 %22, %197
  %199 = getelementptr inbounds i16, i16* %171, i64 3
  %200 = load i16, i16* %199, align 2
  %201 = zext i16 %200 to i32
  %202 = mul nuw nsw i32 %24, %201
  %203 = add nuw nsw i32 %198, 64
  %204 = add nuw nsw i32 %203, %202
  %205 = lshr i32 %204, 7
  %206 = trunc i32 %205 to i16
  %207 = getelementptr inbounds [20 x i16], [20 x i16]* %8, i64 0, i64 14
  store i16 %206, i16* %207, align 4
  %208 = load i16, i16* %199, align 2
  %209 = zext i16 %208 to i32
  %210 = mul nuw nsw i32 %22, %209
  %211 = getelementptr inbounds i16, i16* %171, i64 4
  %212 = load i16, i16* %211, align 2
  %213 = zext i16 %212 to i32
  %214 = mul nuw nsw i32 %24, %213
  %215 = add nuw nsw i32 %210, 64
  %216 = add nuw nsw i32 %215, %214
  %217 = lshr i32 %216, 7
  %218 = trunc i32 %217 to i16
  %219 = getelementptr inbounds [20 x i16], [20 x i16]* %8, i64 0, i64 15
  store i16 %218, i16* %219, align 2
  %220 = getelementptr inbounds i16, i16* %211, i64 %19
  %221 = getelementptr inbounds [20 x i16], [20 x i16]* %8, i64 0, i64 16
  %222 = load i16, i16* %220, align 2
  %223 = zext i16 %222 to i32
  %224 = mul nuw nsw i32 %22, %223
  %225 = getelementptr inbounds i16, i16* %220, i64 1
  %226 = load i16, i16* %225, align 2
  %227 = zext i16 %226 to i32
  %228 = mul nuw nsw i32 %24, %227
  %229 = add nuw nsw i32 %224, 64
  %230 = add nuw nsw i32 %229, %228
  %231 = lshr i32 %230, 7
  %232 = trunc i32 %231 to i16
  store i16 %232, i16* %221, align 16
  %233 = load i16, i16* %225, align 2
  %234 = zext i16 %233 to i32
  %235 = mul nuw nsw i32 %22, %234
  %236 = getelementptr inbounds i16, i16* %220, i64 2
  %237 = load i16, i16* %236, align 2
  %238 = zext i16 %237 to i32
  %239 = mul nuw nsw i32 %24, %238
  %240 = add nuw nsw i32 %235, 64
  %241 = add nuw nsw i32 %240, %239
  %242 = lshr i32 %241, 7
  %243 = trunc i32 %242 to i16
  %244 = getelementptr inbounds [20 x i16], [20 x i16]* %8, i64 0, i64 17
  store i16 %243, i16* %244, align 2
  %245 = load i16, i16* %236, align 2
  %246 = zext i16 %245 to i32
  %247 = mul nuw nsw i32 %22, %246
  %248 = getelementptr inbounds i16, i16* %220, i64 3
  %249 = load i16, i16* %248, align 2
  %250 = zext i16 %249 to i32
  %251 = mul nuw nsw i32 %24, %250
  %252 = add nuw nsw i32 %247, 64
  %253 = add nuw nsw i32 %252, %251
  %254 = lshr i32 %253, 7
  %255 = trunc i32 %254 to i16
  %256 = getelementptr inbounds [20 x i16], [20 x i16]* %8, i64 0, i64 18
  store i16 %255, i16* %256, align 4
  %257 = load i16, i16* %248, align 2
  %258 = zext i16 %257 to i32
  %259 = mul nuw nsw i32 %22, %258
  %260 = getelementptr inbounds i16, i16* %220, i64 4
  %261 = load i16, i16* %260, align 2
  %262 = zext i16 %261 to i32
  %263 = mul nuw nsw i32 %24, %262
  %264 = add nuw nsw i32 %259, 64
  %265 = add nuw nsw i32 %264, %263
  %266 = lshr i32 %265, 7
  %267 = trunc i32 %266 to i16
  %268 = getelementptr inbounds [20 x i16], [20 x i16]* %8, i64 0, i64 19
  store i16 %267, i16* %268, align 2
  %269 = sext i32 %3 to i64
  %270 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %269, i64 0
  %271 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %269, i64 1
  %272 = load i8, i8* %270, align 2
  %273 = zext i8 %272 to i32
  %274 = load i8, i8* %271, align 1
  %275 = zext i8 %274 to i32
  %276 = getelementptr inbounds [20 x i16], [20 x i16]* %8, i64 0, i64 5
  %277 = load i16, i16* %276, align 2
  %278 = zext i16 %277 to i32
  %279 = getelementptr inbounds [20 x i16], [20 x i16]* %8, i64 0, i64 6
  %280 = load i16, i16* %279, align 4
  %281 = zext i16 %280 to i32
  %282 = getelementptr inbounds [20 x i16], [20 x i16]* %8, i64 0, i64 7
  %283 = load i16, i16* %282, align 2
  %284 = zext i16 %283 to i32
  %285 = getelementptr inbounds [20 x i16], [20 x i16]* %8, i64 0, i64 8
  %286 = load i16, i16* %285, align 16
  %287 = zext i16 %286 to i32
  %288 = getelementptr inbounds [20 x i16], [20 x i16]* %8, i64 0, i64 9
  %289 = load i16, i16* %288, align 2
  %290 = zext i16 %289 to i32
  %291 = getelementptr inbounds [20 x i16], [20 x i16]* %8, i64 0, i64 10
  %292 = load i16, i16* %291, align 4
  %293 = zext i16 %292 to i32
  %294 = bitcast [20 x i16]* %8 to <8 x i16>*
  %295 = load <8 x i16>, <8 x i16>* %294, align 16
  %296 = zext <8 x i16> %295 to <8 x i32>
  %297 = insertelement <8 x i32> undef, i32 %273, i32 0
  %298 = shufflevector <8 x i32> %297, <8 x i32> undef, <8 x i32> zeroinitializer
  %299 = mul nuw nsw <8 x i32> %298, %296
  %300 = getelementptr inbounds [20 x i16], [20 x i16]* %8, i64 0, i64 11
  %301 = load i16, i16* %300, align 2
  %302 = zext i16 %301 to i32
  %303 = insertelement <8 x i32> undef, i32 %275, i32 0
  %304 = shufflevector <8 x i32> %303, <8 x i32> undef, <8 x i32> zeroinitializer
  %305 = extractelement <8 x i32> %296, i32 4
  %306 = insertelement <8 x i32> undef, i32 %305, i32 0
  %307 = insertelement <8 x i32> %306, i32 %278, i32 1
  %308 = insertelement <8 x i32> %307, i32 %281, i32 2
  %309 = insertelement <8 x i32> %308, i32 %284, i32 3
  %310 = insertelement <8 x i32> %309, i32 %287, i32 4
  %311 = insertelement <8 x i32> %310, i32 %290, i32 5
  %312 = insertelement <8 x i32> %311, i32 %293, i32 6
  %313 = insertelement <8 x i32> %312, i32 %302, i32 7
  %314 = mul nuw nsw <8 x i32> %304, %313
  %315 = add nuw nsw <8 x i32> %299, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %316 = add nuw nsw <8 x i32> %315, %314
  %317 = lshr <8 x i32> %316, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %318 = trunc <8 x i32> %317 to <8 x i16>
  %319 = bitcast [16 x i16]* %9 to <8 x i16>*
  store <8 x i16> %318, <8 x i16>* %319, align 16
  %320 = getelementptr inbounds [20 x i16], [20 x i16]* %8, i64 0, i64 8
  %321 = getelementptr inbounds [16 x i16], [16 x i16]* %9, i64 0, i64 8
  %322 = getelementptr inbounds [20 x i16], [20 x i16]* %8, i64 0, i64 12
  %323 = bitcast i16* %320 to <8 x i16>*
  %324 = load <8 x i16>, <8 x i16>* %323, align 16
  %325 = zext <8 x i16> %324 to <8 x i32>
  %326 = mul nuw nsw <8 x i32> %298, %325
  %327 = bitcast i16* %322 to <8 x i16>*
  %328 = load <8 x i16>, <8 x i16>* %327, align 8
  %329 = zext <8 x i16> %328 to <8 x i32>
  %330 = mul nuw nsw <8 x i32> %304, %329
  %331 = add nuw nsw <8 x i32> %326, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %332 = add nuw nsw <8 x i32> %331, %330
  %333 = lshr <8 x i32> %332, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %334 = trunc <8 x i32> %333 to <8 x i16>
  %335 = bitcast i16* %321 to <8 x i16>*
  store <8 x i16> %334, <8 x i16>* %335, align 16
  %336 = ptrtoint [16 x i16]* %9 to i64
  %337 = lshr exact i64 %336, 1
  %338 = inttoptr i64 %337 to i8*
  %339 = call i32 @vpx_highbd_12_variance4x4_c(i8* nonnull %338, i32 4, i8* %4, i32 %5, i32* %6)
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %11) #4
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %10) #4
  ret i32 %339
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_highbd_8_sub_pixel_avg_variance4x4_c(i8*, i32, i32, i32, i8*, i32, i32* nocapture, i8*) local_unnamed_addr #2 {
  %9 = alloca [20 x i16], align 16
  %10 = alloca [16 x i16], align 16
  %11 = alloca [16 x i16], align 16
  %12 = bitcast [20 x i16]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %12) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %12, i8 -86, i64 40, i1 false)
  %13 = bitcast [16 x i16]* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %13) #4
  %14 = bitcast [16 x i16]* %11 to i8*
  %15 = bitcast [16 x i16]* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %15, i8 -86, i64 32, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %14) #4
  %16 = sext i32 %2 to i64
  %17 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %16, i64 0
  %18 = ptrtoint i8* %0 to i64
  %19 = shl i64 %18, 1
  %20 = inttoptr i64 %19 to i16*
  %21 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %16, i64 1
  %22 = add i32 %1, -4
  %23 = zext i32 %22 to i64
  %24 = bitcast [16 x i16]* %11 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %24, i8 -86, i64 32, i1 false)
  %25 = load i8, i8* %17, align 2
  %26 = zext i8 %25 to i32
  %27 = load i8, i8* %21, align 1
  %28 = zext i8 %27 to i32
  %29 = getelementptr inbounds [20 x i16], [20 x i16]* %9, i64 0, i64 0
  %30 = load i16, i16* %20, align 2
  %31 = zext i16 %30 to i32
  %32 = mul nuw nsw i32 %26, %31
  %33 = getelementptr inbounds i16, i16* %20, i64 1
  %34 = load i16, i16* %33, align 2
  %35 = zext i16 %34 to i32
  %36 = mul nuw nsw i32 %28, %35
  %37 = add nuw nsw i32 %32, 64
  %38 = add nuw nsw i32 %37, %36
  %39 = lshr i32 %38, 7
  %40 = trunc i32 %39 to i16
  store i16 %40, i16* %29, align 16
  %41 = load i16, i16* %33, align 2
  %42 = zext i16 %41 to i32
  %43 = mul nuw nsw i32 %26, %42
  %44 = getelementptr inbounds i16, i16* %20, i64 2
  %45 = load i16, i16* %44, align 2
  %46 = zext i16 %45 to i32
  %47 = mul nuw nsw i32 %28, %46
  %48 = add nuw nsw i32 %43, 64
  %49 = add nuw nsw i32 %48, %47
  %50 = lshr i32 %49, 7
  %51 = trunc i32 %50 to i16
  %52 = getelementptr inbounds [20 x i16], [20 x i16]* %9, i64 0, i64 1
  store i16 %51, i16* %52, align 2
  %53 = load i16, i16* %44, align 2
  %54 = zext i16 %53 to i32
  %55 = mul nuw nsw i32 %26, %54
  %56 = getelementptr inbounds i16, i16* %20, i64 3
  %57 = load i16, i16* %56, align 2
  %58 = zext i16 %57 to i32
  %59 = mul nuw nsw i32 %28, %58
  %60 = add nuw nsw i32 %55, 64
  %61 = add nuw nsw i32 %60, %59
  %62 = lshr i32 %61, 7
  %63 = trunc i32 %62 to i16
  %64 = getelementptr inbounds [20 x i16], [20 x i16]* %9, i64 0, i64 2
  store i16 %63, i16* %64, align 4
  %65 = load i16, i16* %56, align 2
  %66 = zext i16 %65 to i32
  %67 = mul nuw nsw i32 %26, %66
  %68 = getelementptr inbounds i16, i16* %20, i64 4
  %69 = load i16, i16* %68, align 2
  %70 = zext i16 %69 to i32
  %71 = mul nuw nsw i32 %28, %70
  %72 = add nuw nsw i32 %67, 64
  %73 = add nuw nsw i32 %72, %71
  %74 = lshr i32 %73, 7
  %75 = trunc i32 %74 to i16
  %76 = getelementptr inbounds [20 x i16], [20 x i16]* %9, i64 0, i64 3
  store i16 %75, i16* %76, align 2
  %77 = getelementptr inbounds i16, i16* %68, i64 %23
  %78 = getelementptr inbounds [20 x i16], [20 x i16]* %9, i64 0, i64 4
  %79 = load i16, i16* %77, align 2
  %80 = zext i16 %79 to i32
  %81 = mul nuw nsw i32 %26, %80
  %82 = getelementptr inbounds i16, i16* %77, i64 1
  %83 = load i16, i16* %82, align 2
  %84 = zext i16 %83 to i32
  %85 = mul nuw nsw i32 %28, %84
  %86 = add nuw nsw i32 %81, 64
  %87 = add nuw nsw i32 %86, %85
  %88 = lshr i32 %87, 7
  %89 = trunc i32 %88 to i16
  store i16 %89, i16* %78, align 8
  %90 = load i16, i16* %82, align 2
  %91 = zext i16 %90 to i32
  %92 = mul nuw nsw i32 %26, %91
  %93 = getelementptr inbounds i16, i16* %77, i64 2
  %94 = load i16, i16* %93, align 2
  %95 = zext i16 %94 to i32
  %96 = mul nuw nsw i32 %28, %95
  %97 = add nuw nsw i32 %92, 64
  %98 = add nuw nsw i32 %97, %96
  %99 = lshr i32 %98, 7
  %100 = trunc i32 %99 to i16
  %101 = getelementptr inbounds [20 x i16], [20 x i16]* %9, i64 0, i64 5
  store i16 %100, i16* %101, align 2
  %102 = load i16, i16* %93, align 2
  %103 = zext i16 %102 to i32
  %104 = mul nuw nsw i32 %26, %103
  %105 = getelementptr inbounds i16, i16* %77, i64 3
  %106 = load i16, i16* %105, align 2
  %107 = zext i16 %106 to i32
  %108 = mul nuw nsw i32 %28, %107
  %109 = add nuw nsw i32 %104, 64
  %110 = add nuw nsw i32 %109, %108
  %111 = lshr i32 %110, 7
  %112 = trunc i32 %111 to i16
  %113 = getelementptr inbounds [20 x i16], [20 x i16]* %9, i64 0, i64 6
  store i16 %112, i16* %113, align 4
  %114 = load i16, i16* %105, align 2
  %115 = zext i16 %114 to i32
  %116 = mul nuw nsw i32 %26, %115
  %117 = getelementptr inbounds i16, i16* %77, i64 4
  %118 = load i16, i16* %117, align 2
  %119 = zext i16 %118 to i32
  %120 = mul nuw nsw i32 %28, %119
  %121 = add nuw nsw i32 %116, 64
  %122 = add nuw nsw i32 %121, %120
  %123 = lshr i32 %122, 7
  %124 = trunc i32 %123 to i16
  %125 = getelementptr inbounds [20 x i16], [20 x i16]* %9, i64 0, i64 7
  store i16 %124, i16* %125, align 2
  %126 = getelementptr inbounds i16, i16* %117, i64 %23
  %127 = getelementptr inbounds [20 x i16], [20 x i16]* %9, i64 0, i64 8
  %128 = load i16, i16* %126, align 2
  %129 = zext i16 %128 to i32
  %130 = mul nuw nsw i32 %26, %129
  %131 = getelementptr inbounds i16, i16* %126, i64 1
  %132 = load i16, i16* %131, align 2
  %133 = zext i16 %132 to i32
  %134 = mul nuw nsw i32 %28, %133
  %135 = add nuw nsw i32 %130, 64
  %136 = add nuw nsw i32 %135, %134
  %137 = lshr i32 %136, 7
  %138 = trunc i32 %137 to i16
  store i16 %138, i16* %127, align 16
  %139 = load i16, i16* %131, align 2
  %140 = zext i16 %139 to i32
  %141 = mul nuw nsw i32 %26, %140
  %142 = getelementptr inbounds i16, i16* %126, i64 2
  %143 = load i16, i16* %142, align 2
  %144 = zext i16 %143 to i32
  %145 = mul nuw nsw i32 %28, %144
  %146 = add nuw nsw i32 %141, 64
  %147 = add nuw nsw i32 %146, %145
  %148 = lshr i32 %147, 7
  %149 = trunc i32 %148 to i16
  %150 = getelementptr inbounds [20 x i16], [20 x i16]* %9, i64 0, i64 9
  store i16 %149, i16* %150, align 2
  %151 = load i16, i16* %142, align 2
  %152 = zext i16 %151 to i32
  %153 = mul nuw nsw i32 %26, %152
  %154 = getelementptr inbounds i16, i16* %126, i64 3
  %155 = load i16, i16* %154, align 2
  %156 = zext i16 %155 to i32
  %157 = mul nuw nsw i32 %28, %156
  %158 = add nuw nsw i32 %153, 64
  %159 = add nuw nsw i32 %158, %157
  %160 = lshr i32 %159, 7
  %161 = trunc i32 %160 to i16
  %162 = getelementptr inbounds [20 x i16], [20 x i16]* %9, i64 0, i64 10
  store i16 %161, i16* %162, align 4
  %163 = load i16, i16* %154, align 2
  %164 = zext i16 %163 to i32
  %165 = mul nuw nsw i32 %26, %164
  %166 = getelementptr inbounds i16, i16* %126, i64 4
  %167 = load i16, i16* %166, align 2
  %168 = zext i16 %167 to i32
  %169 = mul nuw nsw i32 %28, %168
  %170 = add nuw nsw i32 %165, 64
  %171 = add nuw nsw i32 %170, %169
  %172 = lshr i32 %171, 7
  %173 = trunc i32 %172 to i16
  %174 = getelementptr inbounds [20 x i16], [20 x i16]* %9, i64 0, i64 11
  store i16 %173, i16* %174, align 2
  %175 = getelementptr inbounds i16, i16* %166, i64 %23
  %176 = getelementptr inbounds [20 x i16], [20 x i16]* %9, i64 0, i64 12
  %177 = load i16, i16* %175, align 2
  %178 = zext i16 %177 to i32
  %179 = mul nuw nsw i32 %26, %178
  %180 = getelementptr inbounds i16, i16* %175, i64 1
  %181 = load i16, i16* %180, align 2
  %182 = zext i16 %181 to i32
  %183 = mul nuw nsw i32 %28, %182
  %184 = add nuw nsw i32 %179, 64
  %185 = add nuw nsw i32 %184, %183
  %186 = lshr i32 %185, 7
  %187 = trunc i32 %186 to i16
  store i16 %187, i16* %176, align 8
  %188 = load i16, i16* %180, align 2
  %189 = zext i16 %188 to i32
  %190 = mul nuw nsw i32 %26, %189
  %191 = getelementptr inbounds i16, i16* %175, i64 2
  %192 = load i16, i16* %191, align 2
  %193 = zext i16 %192 to i32
  %194 = mul nuw nsw i32 %28, %193
  %195 = add nuw nsw i32 %190, 64
  %196 = add nuw nsw i32 %195, %194
  %197 = lshr i32 %196, 7
  %198 = trunc i32 %197 to i16
  %199 = getelementptr inbounds [20 x i16], [20 x i16]* %9, i64 0, i64 13
  store i16 %198, i16* %199, align 2
  %200 = load i16, i16* %191, align 2
  %201 = zext i16 %200 to i32
  %202 = mul nuw nsw i32 %26, %201
  %203 = getelementptr inbounds i16, i16* %175, i64 3
  %204 = load i16, i16* %203, align 2
  %205 = zext i16 %204 to i32
  %206 = mul nuw nsw i32 %28, %205
  %207 = add nuw nsw i32 %202, 64
  %208 = add nuw nsw i32 %207, %206
  %209 = lshr i32 %208, 7
  %210 = trunc i32 %209 to i16
  %211 = getelementptr inbounds [20 x i16], [20 x i16]* %9, i64 0, i64 14
  store i16 %210, i16* %211, align 4
  %212 = load i16, i16* %203, align 2
  %213 = zext i16 %212 to i32
  %214 = mul nuw nsw i32 %26, %213
  %215 = getelementptr inbounds i16, i16* %175, i64 4
  %216 = load i16, i16* %215, align 2
  %217 = zext i16 %216 to i32
  %218 = mul nuw nsw i32 %28, %217
  %219 = add nuw nsw i32 %214, 64
  %220 = add nuw nsw i32 %219, %218
  %221 = lshr i32 %220, 7
  %222 = trunc i32 %221 to i16
  %223 = getelementptr inbounds [20 x i16], [20 x i16]* %9, i64 0, i64 15
  store i16 %222, i16* %223, align 2
  %224 = getelementptr inbounds i16, i16* %215, i64 %23
  %225 = getelementptr inbounds [20 x i16], [20 x i16]* %9, i64 0, i64 16
  %226 = load i16, i16* %224, align 2
  %227 = zext i16 %226 to i32
  %228 = mul nuw nsw i32 %26, %227
  %229 = getelementptr inbounds i16, i16* %224, i64 1
  %230 = load i16, i16* %229, align 2
  %231 = zext i16 %230 to i32
  %232 = mul nuw nsw i32 %28, %231
  %233 = add nuw nsw i32 %228, 64
  %234 = add nuw nsw i32 %233, %232
  %235 = lshr i32 %234, 7
  %236 = trunc i32 %235 to i16
  store i16 %236, i16* %225, align 16
  %237 = load i16, i16* %229, align 2
  %238 = zext i16 %237 to i32
  %239 = mul nuw nsw i32 %26, %238
  %240 = getelementptr inbounds i16, i16* %224, i64 2
  %241 = load i16, i16* %240, align 2
  %242 = zext i16 %241 to i32
  %243 = mul nuw nsw i32 %28, %242
  %244 = add nuw nsw i32 %239, 64
  %245 = add nuw nsw i32 %244, %243
  %246 = lshr i32 %245, 7
  %247 = trunc i32 %246 to i16
  %248 = getelementptr inbounds [20 x i16], [20 x i16]* %9, i64 0, i64 17
  store i16 %247, i16* %248, align 2
  %249 = load i16, i16* %240, align 2
  %250 = zext i16 %249 to i32
  %251 = mul nuw nsw i32 %26, %250
  %252 = getelementptr inbounds i16, i16* %224, i64 3
  %253 = load i16, i16* %252, align 2
  %254 = zext i16 %253 to i32
  %255 = mul nuw nsw i32 %28, %254
  %256 = add nuw nsw i32 %251, 64
  %257 = add nuw nsw i32 %256, %255
  %258 = lshr i32 %257, 7
  %259 = trunc i32 %258 to i16
  %260 = getelementptr inbounds [20 x i16], [20 x i16]* %9, i64 0, i64 18
  store i16 %259, i16* %260, align 4
  %261 = load i16, i16* %252, align 2
  %262 = zext i16 %261 to i32
  %263 = mul nuw nsw i32 %26, %262
  %264 = getelementptr inbounds i16, i16* %224, i64 4
  %265 = load i16, i16* %264, align 2
  %266 = zext i16 %265 to i32
  %267 = mul nuw nsw i32 %28, %266
  %268 = add nuw nsw i32 %263, 64
  %269 = add nuw nsw i32 %268, %267
  %270 = lshr i32 %269, 7
  %271 = trunc i32 %270 to i16
  %272 = getelementptr inbounds [20 x i16], [20 x i16]* %9, i64 0, i64 19
  store i16 %271, i16* %272, align 2
  %273 = sext i32 %3 to i64
  %274 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %273, i64 0
  %275 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %273, i64 1
  %276 = load i8, i8* %274, align 2
  %277 = zext i8 %276 to i32
  %278 = load i8, i8* %275, align 1
  %279 = zext i8 %278 to i32
  %280 = getelementptr inbounds [20 x i16], [20 x i16]* %9, i64 0, i64 5
  %281 = load i16, i16* %280, align 2
  %282 = zext i16 %281 to i32
  %283 = getelementptr inbounds [20 x i16], [20 x i16]* %9, i64 0, i64 6
  %284 = load i16, i16* %283, align 4
  %285 = zext i16 %284 to i32
  %286 = getelementptr inbounds [20 x i16], [20 x i16]* %9, i64 0, i64 7
  %287 = load i16, i16* %286, align 2
  %288 = zext i16 %287 to i32
  %289 = getelementptr inbounds [20 x i16], [20 x i16]* %9, i64 0, i64 8
  %290 = load i16, i16* %289, align 16
  %291 = zext i16 %290 to i32
  %292 = getelementptr inbounds [20 x i16], [20 x i16]* %9, i64 0, i64 9
  %293 = load i16, i16* %292, align 2
  %294 = zext i16 %293 to i32
  %295 = getelementptr inbounds [20 x i16], [20 x i16]* %9, i64 0, i64 10
  %296 = load i16, i16* %295, align 4
  %297 = zext i16 %296 to i32
  %298 = bitcast [20 x i16]* %9 to <8 x i16>*
  %299 = load <8 x i16>, <8 x i16>* %298, align 16
  %300 = zext <8 x i16> %299 to <8 x i32>
  %301 = insertelement <8 x i32> undef, i32 %277, i32 0
  %302 = shufflevector <8 x i32> %301, <8 x i32> undef, <8 x i32> zeroinitializer
  %303 = mul nuw nsw <8 x i32> %302, %300
  %304 = getelementptr inbounds [20 x i16], [20 x i16]* %9, i64 0, i64 11
  %305 = load i16, i16* %304, align 2
  %306 = zext i16 %305 to i32
  %307 = insertelement <8 x i32> undef, i32 %279, i32 0
  %308 = shufflevector <8 x i32> %307, <8 x i32> undef, <8 x i32> zeroinitializer
  %309 = extractelement <8 x i32> %300, i32 4
  %310 = insertelement <8 x i32> undef, i32 %309, i32 0
  %311 = insertelement <8 x i32> %310, i32 %282, i32 1
  %312 = insertelement <8 x i32> %311, i32 %285, i32 2
  %313 = insertelement <8 x i32> %312, i32 %288, i32 3
  %314 = insertelement <8 x i32> %313, i32 %291, i32 4
  %315 = insertelement <8 x i32> %314, i32 %294, i32 5
  %316 = insertelement <8 x i32> %315, i32 %297, i32 6
  %317 = insertelement <8 x i32> %316, i32 %306, i32 7
  %318 = mul nuw nsw <8 x i32> %308, %317
  %319 = add nuw nsw <8 x i32> %303, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %320 = add nuw nsw <8 x i32> %319, %318
  %321 = lshr <8 x i32> %320, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %322 = trunc <8 x i32> %321 to <8 x i16>
  %323 = bitcast [16 x i16]* %10 to <8 x i16>*
  store <8 x i16> %322, <8 x i16>* %323, align 16
  %324 = getelementptr inbounds [20 x i16], [20 x i16]* %9, i64 0, i64 8
  %325 = getelementptr inbounds [16 x i16], [16 x i16]* %10, i64 0, i64 8
  %326 = getelementptr inbounds [20 x i16], [20 x i16]* %9, i64 0, i64 12
  %327 = bitcast i16* %324 to <8 x i16>*
  %328 = load <8 x i16>, <8 x i16>* %327, align 16
  %329 = zext <8 x i16> %328 to <8 x i32>
  %330 = mul nuw nsw <8 x i32> %302, %329
  %331 = bitcast i16* %326 to <8 x i16>*
  %332 = load <8 x i16>, <8 x i16>* %331, align 8
  %333 = zext <8 x i16> %332 to <8 x i32>
  %334 = mul nuw nsw <8 x i32> %308, %333
  %335 = add nuw nsw <8 x i32> %330, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %336 = add nuw nsw <8 x i32> %335, %334
  %337 = lshr <8 x i32> %336, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %338 = trunc <8 x i32> %337 to <8 x i16>
  %339 = bitcast i16* %325 to <8 x i16>*
  store <8 x i16> %338, <8 x i16>* %339, align 16
  %340 = ptrtoint i8* %7 to i64
  %341 = shl i64 %340, 1
  %342 = inttoptr i64 %341 to i16*
  %343 = inttoptr i64 %341 to <8 x i16>*
  %344 = load <8 x i16>, <8 x i16>* %343, align 2
  %345 = zext <8 x i16> %344 to <8 x i32>
  %346 = bitcast [16 x i16]* %10 to <8 x i16>*
  %347 = load <8 x i16>, <8 x i16>* %346, align 16
  %348 = zext <8 x i16> %347 to <8 x i32>
  %349 = add nuw nsw <8 x i32> %345, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %350 = add nuw nsw <8 x i32> %349, %348
  %351 = lshr <8 x i32> %350, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %352 = trunc <8 x i32> %351 to <8 x i16>
  %353 = bitcast [16 x i16]* %11 to <8 x i16>*
  store <8 x i16> %352, <8 x i16>* %353, align 16
  %354 = getelementptr inbounds [16 x i16], [16 x i16]* %11, i64 0, i64 8
  %355 = getelementptr inbounds i16, i16* %342, i64 8
  %356 = bitcast i16* %355 to <8 x i16>*
  %357 = load <8 x i16>, <8 x i16>* %356, align 2
  %358 = zext <8 x i16> %357 to <8 x i32>
  %359 = bitcast i16* %325 to <8 x i16>*
  %360 = load <8 x i16>, <8 x i16>* %359, align 16
  %361 = zext <8 x i16> %360 to <8 x i32>
  %362 = add nuw nsw <8 x i32> %358, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %363 = add nuw nsw <8 x i32> %362, %361
  %364 = lshr <8 x i32> %363, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %365 = trunc <8 x i32> %364 to <8 x i16>
  %366 = bitcast i16* %354 to <8 x i16>*
  store <8 x i16> %365, <8 x i16>* %366, align 16
  %367 = ptrtoint [16 x i16]* %11 to i64
  %368 = lshr exact i64 %367, 1
  %369 = inttoptr i64 %368 to i8*
  %370 = call i32 @vpx_highbd_8_variance4x4_c(i8* nonnull %369, i32 4, i8* %4, i32 %5, i32* %6)
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %14) #4
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %13) #4
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %12) #4
  ret i32 %370
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_highbd_10_sub_pixel_avg_variance4x4_c(i8*, i32, i32, i32, i8*, i32, i32* nocapture, i8*) local_unnamed_addr #2 {
  %9 = alloca [20 x i16], align 16
  %10 = alloca [16 x i16], align 16
  %11 = alloca [16 x i16], align 16
  %12 = bitcast [20 x i16]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %12) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %12, i8 -86, i64 40, i1 false)
  %13 = bitcast [16 x i16]* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %13) #4
  %14 = bitcast [16 x i16]* %11 to i8*
  %15 = bitcast [16 x i16]* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %15, i8 -86, i64 32, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %14) #4
  %16 = sext i32 %2 to i64
  %17 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %16, i64 0
  %18 = ptrtoint i8* %0 to i64
  %19 = shl i64 %18, 1
  %20 = inttoptr i64 %19 to i16*
  %21 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %16, i64 1
  %22 = add i32 %1, -4
  %23 = zext i32 %22 to i64
  %24 = bitcast [16 x i16]* %11 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %24, i8 -86, i64 32, i1 false)
  %25 = load i8, i8* %17, align 2
  %26 = zext i8 %25 to i32
  %27 = load i8, i8* %21, align 1
  %28 = zext i8 %27 to i32
  %29 = getelementptr inbounds [20 x i16], [20 x i16]* %9, i64 0, i64 0
  %30 = load i16, i16* %20, align 2
  %31 = zext i16 %30 to i32
  %32 = mul nuw nsw i32 %26, %31
  %33 = getelementptr inbounds i16, i16* %20, i64 1
  %34 = load i16, i16* %33, align 2
  %35 = zext i16 %34 to i32
  %36 = mul nuw nsw i32 %28, %35
  %37 = add nuw nsw i32 %32, 64
  %38 = add nuw nsw i32 %37, %36
  %39 = lshr i32 %38, 7
  %40 = trunc i32 %39 to i16
  store i16 %40, i16* %29, align 16
  %41 = load i16, i16* %33, align 2
  %42 = zext i16 %41 to i32
  %43 = mul nuw nsw i32 %26, %42
  %44 = getelementptr inbounds i16, i16* %20, i64 2
  %45 = load i16, i16* %44, align 2
  %46 = zext i16 %45 to i32
  %47 = mul nuw nsw i32 %28, %46
  %48 = add nuw nsw i32 %43, 64
  %49 = add nuw nsw i32 %48, %47
  %50 = lshr i32 %49, 7
  %51 = trunc i32 %50 to i16
  %52 = getelementptr inbounds [20 x i16], [20 x i16]* %9, i64 0, i64 1
  store i16 %51, i16* %52, align 2
  %53 = load i16, i16* %44, align 2
  %54 = zext i16 %53 to i32
  %55 = mul nuw nsw i32 %26, %54
  %56 = getelementptr inbounds i16, i16* %20, i64 3
  %57 = load i16, i16* %56, align 2
  %58 = zext i16 %57 to i32
  %59 = mul nuw nsw i32 %28, %58
  %60 = add nuw nsw i32 %55, 64
  %61 = add nuw nsw i32 %60, %59
  %62 = lshr i32 %61, 7
  %63 = trunc i32 %62 to i16
  %64 = getelementptr inbounds [20 x i16], [20 x i16]* %9, i64 0, i64 2
  store i16 %63, i16* %64, align 4
  %65 = load i16, i16* %56, align 2
  %66 = zext i16 %65 to i32
  %67 = mul nuw nsw i32 %26, %66
  %68 = getelementptr inbounds i16, i16* %20, i64 4
  %69 = load i16, i16* %68, align 2
  %70 = zext i16 %69 to i32
  %71 = mul nuw nsw i32 %28, %70
  %72 = add nuw nsw i32 %67, 64
  %73 = add nuw nsw i32 %72, %71
  %74 = lshr i32 %73, 7
  %75 = trunc i32 %74 to i16
  %76 = getelementptr inbounds [20 x i16], [20 x i16]* %9, i64 0, i64 3
  store i16 %75, i16* %76, align 2
  %77 = getelementptr inbounds i16, i16* %68, i64 %23
  %78 = getelementptr inbounds [20 x i16], [20 x i16]* %9, i64 0, i64 4
  %79 = load i16, i16* %77, align 2
  %80 = zext i16 %79 to i32
  %81 = mul nuw nsw i32 %26, %80
  %82 = getelementptr inbounds i16, i16* %77, i64 1
  %83 = load i16, i16* %82, align 2
  %84 = zext i16 %83 to i32
  %85 = mul nuw nsw i32 %28, %84
  %86 = add nuw nsw i32 %81, 64
  %87 = add nuw nsw i32 %86, %85
  %88 = lshr i32 %87, 7
  %89 = trunc i32 %88 to i16
  store i16 %89, i16* %78, align 8
  %90 = load i16, i16* %82, align 2
  %91 = zext i16 %90 to i32
  %92 = mul nuw nsw i32 %26, %91
  %93 = getelementptr inbounds i16, i16* %77, i64 2
  %94 = load i16, i16* %93, align 2
  %95 = zext i16 %94 to i32
  %96 = mul nuw nsw i32 %28, %95
  %97 = add nuw nsw i32 %92, 64
  %98 = add nuw nsw i32 %97, %96
  %99 = lshr i32 %98, 7
  %100 = trunc i32 %99 to i16
  %101 = getelementptr inbounds [20 x i16], [20 x i16]* %9, i64 0, i64 5
  store i16 %100, i16* %101, align 2
  %102 = load i16, i16* %93, align 2
  %103 = zext i16 %102 to i32
  %104 = mul nuw nsw i32 %26, %103
  %105 = getelementptr inbounds i16, i16* %77, i64 3
  %106 = load i16, i16* %105, align 2
  %107 = zext i16 %106 to i32
  %108 = mul nuw nsw i32 %28, %107
  %109 = add nuw nsw i32 %104, 64
  %110 = add nuw nsw i32 %109, %108
  %111 = lshr i32 %110, 7
  %112 = trunc i32 %111 to i16
  %113 = getelementptr inbounds [20 x i16], [20 x i16]* %9, i64 0, i64 6
  store i16 %112, i16* %113, align 4
  %114 = load i16, i16* %105, align 2
  %115 = zext i16 %114 to i32
  %116 = mul nuw nsw i32 %26, %115
  %117 = getelementptr inbounds i16, i16* %77, i64 4
  %118 = load i16, i16* %117, align 2
  %119 = zext i16 %118 to i32
  %120 = mul nuw nsw i32 %28, %119
  %121 = add nuw nsw i32 %116, 64
  %122 = add nuw nsw i32 %121, %120
  %123 = lshr i32 %122, 7
  %124 = trunc i32 %123 to i16
  %125 = getelementptr inbounds [20 x i16], [20 x i16]* %9, i64 0, i64 7
  store i16 %124, i16* %125, align 2
  %126 = getelementptr inbounds i16, i16* %117, i64 %23
  %127 = getelementptr inbounds [20 x i16], [20 x i16]* %9, i64 0, i64 8
  %128 = load i16, i16* %126, align 2
  %129 = zext i16 %128 to i32
  %130 = mul nuw nsw i32 %26, %129
  %131 = getelementptr inbounds i16, i16* %126, i64 1
  %132 = load i16, i16* %131, align 2
  %133 = zext i16 %132 to i32
  %134 = mul nuw nsw i32 %28, %133
  %135 = add nuw nsw i32 %130, 64
  %136 = add nuw nsw i32 %135, %134
  %137 = lshr i32 %136, 7
  %138 = trunc i32 %137 to i16
  store i16 %138, i16* %127, align 16
  %139 = load i16, i16* %131, align 2
  %140 = zext i16 %139 to i32
  %141 = mul nuw nsw i32 %26, %140
  %142 = getelementptr inbounds i16, i16* %126, i64 2
  %143 = load i16, i16* %142, align 2
  %144 = zext i16 %143 to i32
  %145 = mul nuw nsw i32 %28, %144
  %146 = add nuw nsw i32 %141, 64
  %147 = add nuw nsw i32 %146, %145
  %148 = lshr i32 %147, 7
  %149 = trunc i32 %148 to i16
  %150 = getelementptr inbounds [20 x i16], [20 x i16]* %9, i64 0, i64 9
  store i16 %149, i16* %150, align 2
  %151 = load i16, i16* %142, align 2
  %152 = zext i16 %151 to i32
  %153 = mul nuw nsw i32 %26, %152
  %154 = getelementptr inbounds i16, i16* %126, i64 3
  %155 = load i16, i16* %154, align 2
  %156 = zext i16 %155 to i32
  %157 = mul nuw nsw i32 %28, %156
  %158 = add nuw nsw i32 %153, 64
  %159 = add nuw nsw i32 %158, %157
  %160 = lshr i32 %159, 7
  %161 = trunc i32 %160 to i16
  %162 = getelementptr inbounds [20 x i16], [20 x i16]* %9, i64 0, i64 10
  store i16 %161, i16* %162, align 4
  %163 = load i16, i16* %154, align 2
  %164 = zext i16 %163 to i32
  %165 = mul nuw nsw i32 %26, %164
  %166 = getelementptr inbounds i16, i16* %126, i64 4
  %167 = load i16, i16* %166, align 2
  %168 = zext i16 %167 to i32
  %169 = mul nuw nsw i32 %28, %168
  %170 = add nuw nsw i32 %165, 64
  %171 = add nuw nsw i32 %170, %169
  %172 = lshr i32 %171, 7
  %173 = trunc i32 %172 to i16
  %174 = getelementptr inbounds [20 x i16], [20 x i16]* %9, i64 0, i64 11
  store i16 %173, i16* %174, align 2
  %175 = getelementptr inbounds i16, i16* %166, i64 %23
  %176 = getelementptr inbounds [20 x i16], [20 x i16]* %9, i64 0, i64 12
  %177 = load i16, i16* %175, align 2
  %178 = zext i16 %177 to i32
  %179 = mul nuw nsw i32 %26, %178
  %180 = getelementptr inbounds i16, i16* %175, i64 1
  %181 = load i16, i16* %180, align 2
  %182 = zext i16 %181 to i32
  %183 = mul nuw nsw i32 %28, %182
  %184 = add nuw nsw i32 %179, 64
  %185 = add nuw nsw i32 %184, %183
  %186 = lshr i32 %185, 7
  %187 = trunc i32 %186 to i16
  store i16 %187, i16* %176, align 8
  %188 = load i16, i16* %180, align 2
  %189 = zext i16 %188 to i32
  %190 = mul nuw nsw i32 %26, %189
  %191 = getelementptr inbounds i16, i16* %175, i64 2
  %192 = load i16, i16* %191, align 2
  %193 = zext i16 %192 to i32
  %194 = mul nuw nsw i32 %28, %193
  %195 = add nuw nsw i32 %190, 64
  %196 = add nuw nsw i32 %195, %194
  %197 = lshr i32 %196, 7
  %198 = trunc i32 %197 to i16
  %199 = getelementptr inbounds [20 x i16], [20 x i16]* %9, i64 0, i64 13
  store i16 %198, i16* %199, align 2
  %200 = load i16, i16* %191, align 2
  %201 = zext i16 %200 to i32
  %202 = mul nuw nsw i32 %26, %201
  %203 = getelementptr inbounds i16, i16* %175, i64 3
  %204 = load i16, i16* %203, align 2
  %205 = zext i16 %204 to i32
  %206 = mul nuw nsw i32 %28, %205
  %207 = add nuw nsw i32 %202, 64
  %208 = add nuw nsw i32 %207, %206
  %209 = lshr i32 %208, 7
  %210 = trunc i32 %209 to i16
  %211 = getelementptr inbounds [20 x i16], [20 x i16]* %9, i64 0, i64 14
  store i16 %210, i16* %211, align 4
  %212 = load i16, i16* %203, align 2
  %213 = zext i16 %212 to i32
  %214 = mul nuw nsw i32 %26, %213
  %215 = getelementptr inbounds i16, i16* %175, i64 4
  %216 = load i16, i16* %215, align 2
  %217 = zext i16 %216 to i32
  %218 = mul nuw nsw i32 %28, %217
  %219 = add nuw nsw i32 %214, 64
  %220 = add nuw nsw i32 %219, %218
  %221 = lshr i32 %220, 7
  %222 = trunc i32 %221 to i16
  %223 = getelementptr inbounds [20 x i16], [20 x i16]* %9, i64 0, i64 15
  store i16 %222, i16* %223, align 2
  %224 = getelementptr inbounds i16, i16* %215, i64 %23
  %225 = getelementptr inbounds [20 x i16], [20 x i16]* %9, i64 0, i64 16
  %226 = load i16, i16* %224, align 2
  %227 = zext i16 %226 to i32
  %228 = mul nuw nsw i32 %26, %227
  %229 = getelementptr inbounds i16, i16* %224, i64 1
  %230 = load i16, i16* %229, align 2
  %231 = zext i16 %230 to i32
  %232 = mul nuw nsw i32 %28, %231
  %233 = add nuw nsw i32 %228, 64
  %234 = add nuw nsw i32 %233, %232
  %235 = lshr i32 %234, 7
  %236 = trunc i32 %235 to i16
  store i16 %236, i16* %225, align 16
  %237 = load i16, i16* %229, align 2
  %238 = zext i16 %237 to i32
  %239 = mul nuw nsw i32 %26, %238
  %240 = getelementptr inbounds i16, i16* %224, i64 2
  %241 = load i16, i16* %240, align 2
  %242 = zext i16 %241 to i32
  %243 = mul nuw nsw i32 %28, %242
  %244 = add nuw nsw i32 %239, 64
  %245 = add nuw nsw i32 %244, %243
  %246 = lshr i32 %245, 7
  %247 = trunc i32 %246 to i16
  %248 = getelementptr inbounds [20 x i16], [20 x i16]* %9, i64 0, i64 17
  store i16 %247, i16* %248, align 2
  %249 = load i16, i16* %240, align 2
  %250 = zext i16 %249 to i32
  %251 = mul nuw nsw i32 %26, %250
  %252 = getelementptr inbounds i16, i16* %224, i64 3
  %253 = load i16, i16* %252, align 2
  %254 = zext i16 %253 to i32
  %255 = mul nuw nsw i32 %28, %254
  %256 = add nuw nsw i32 %251, 64
  %257 = add nuw nsw i32 %256, %255
  %258 = lshr i32 %257, 7
  %259 = trunc i32 %258 to i16
  %260 = getelementptr inbounds [20 x i16], [20 x i16]* %9, i64 0, i64 18
  store i16 %259, i16* %260, align 4
  %261 = load i16, i16* %252, align 2
  %262 = zext i16 %261 to i32
  %263 = mul nuw nsw i32 %26, %262
  %264 = getelementptr inbounds i16, i16* %224, i64 4
  %265 = load i16, i16* %264, align 2
  %266 = zext i16 %265 to i32
  %267 = mul nuw nsw i32 %28, %266
  %268 = add nuw nsw i32 %263, 64
  %269 = add nuw nsw i32 %268, %267
  %270 = lshr i32 %269, 7
  %271 = trunc i32 %270 to i16
  %272 = getelementptr inbounds [20 x i16], [20 x i16]* %9, i64 0, i64 19
  store i16 %271, i16* %272, align 2
  %273 = sext i32 %3 to i64
  %274 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %273, i64 0
  %275 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %273, i64 1
  %276 = load i8, i8* %274, align 2
  %277 = zext i8 %276 to i32
  %278 = load i8, i8* %275, align 1
  %279 = zext i8 %278 to i32
  %280 = getelementptr inbounds [20 x i16], [20 x i16]* %9, i64 0, i64 5
  %281 = load i16, i16* %280, align 2
  %282 = zext i16 %281 to i32
  %283 = getelementptr inbounds [20 x i16], [20 x i16]* %9, i64 0, i64 6
  %284 = load i16, i16* %283, align 4
  %285 = zext i16 %284 to i32
  %286 = getelementptr inbounds [20 x i16], [20 x i16]* %9, i64 0, i64 7
  %287 = load i16, i16* %286, align 2
  %288 = zext i16 %287 to i32
  %289 = getelementptr inbounds [20 x i16], [20 x i16]* %9, i64 0, i64 8
  %290 = load i16, i16* %289, align 16
  %291 = zext i16 %290 to i32
  %292 = getelementptr inbounds [20 x i16], [20 x i16]* %9, i64 0, i64 9
  %293 = load i16, i16* %292, align 2
  %294 = zext i16 %293 to i32
  %295 = getelementptr inbounds [20 x i16], [20 x i16]* %9, i64 0, i64 10
  %296 = load i16, i16* %295, align 4
  %297 = zext i16 %296 to i32
  %298 = bitcast [20 x i16]* %9 to <8 x i16>*
  %299 = load <8 x i16>, <8 x i16>* %298, align 16
  %300 = zext <8 x i16> %299 to <8 x i32>
  %301 = insertelement <8 x i32> undef, i32 %277, i32 0
  %302 = shufflevector <8 x i32> %301, <8 x i32> undef, <8 x i32> zeroinitializer
  %303 = mul nuw nsw <8 x i32> %302, %300
  %304 = getelementptr inbounds [20 x i16], [20 x i16]* %9, i64 0, i64 11
  %305 = load i16, i16* %304, align 2
  %306 = zext i16 %305 to i32
  %307 = insertelement <8 x i32> undef, i32 %279, i32 0
  %308 = shufflevector <8 x i32> %307, <8 x i32> undef, <8 x i32> zeroinitializer
  %309 = extractelement <8 x i32> %300, i32 4
  %310 = insertelement <8 x i32> undef, i32 %309, i32 0
  %311 = insertelement <8 x i32> %310, i32 %282, i32 1
  %312 = insertelement <8 x i32> %311, i32 %285, i32 2
  %313 = insertelement <8 x i32> %312, i32 %288, i32 3
  %314 = insertelement <8 x i32> %313, i32 %291, i32 4
  %315 = insertelement <8 x i32> %314, i32 %294, i32 5
  %316 = insertelement <8 x i32> %315, i32 %297, i32 6
  %317 = insertelement <8 x i32> %316, i32 %306, i32 7
  %318 = mul nuw nsw <8 x i32> %308, %317
  %319 = add nuw nsw <8 x i32> %303, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %320 = add nuw nsw <8 x i32> %319, %318
  %321 = lshr <8 x i32> %320, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %322 = trunc <8 x i32> %321 to <8 x i16>
  %323 = bitcast [16 x i16]* %10 to <8 x i16>*
  store <8 x i16> %322, <8 x i16>* %323, align 16
  %324 = getelementptr inbounds [20 x i16], [20 x i16]* %9, i64 0, i64 8
  %325 = getelementptr inbounds [16 x i16], [16 x i16]* %10, i64 0, i64 8
  %326 = getelementptr inbounds [20 x i16], [20 x i16]* %9, i64 0, i64 12
  %327 = bitcast i16* %324 to <8 x i16>*
  %328 = load <8 x i16>, <8 x i16>* %327, align 16
  %329 = zext <8 x i16> %328 to <8 x i32>
  %330 = mul nuw nsw <8 x i32> %302, %329
  %331 = bitcast i16* %326 to <8 x i16>*
  %332 = load <8 x i16>, <8 x i16>* %331, align 8
  %333 = zext <8 x i16> %332 to <8 x i32>
  %334 = mul nuw nsw <8 x i32> %308, %333
  %335 = add nuw nsw <8 x i32> %330, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %336 = add nuw nsw <8 x i32> %335, %334
  %337 = lshr <8 x i32> %336, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %338 = trunc <8 x i32> %337 to <8 x i16>
  %339 = bitcast i16* %325 to <8 x i16>*
  store <8 x i16> %338, <8 x i16>* %339, align 16
  %340 = ptrtoint i8* %7 to i64
  %341 = shl i64 %340, 1
  %342 = inttoptr i64 %341 to i16*
  %343 = inttoptr i64 %341 to <8 x i16>*
  %344 = load <8 x i16>, <8 x i16>* %343, align 2
  %345 = zext <8 x i16> %344 to <8 x i32>
  %346 = bitcast [16 x i16]* %10 to <8 x i16>*
  %347 = load <8 x i16>, <8 x i16>* %346, align 16
  %348 = zext <8 x i16> %347 to <8 x i32>
  %349 = add nuw nsw <8 x i32> %345, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %350 = add nuw nsw <8 x i32> %349, %348
  %351 = lshr <8 x i32> %350, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %352 = trunc <8 x i32> %351 to <8 x i16>
  %353 = bitcast [16 x i16]* %11 to <8 x i16>*
  store <8 x i16> %352, <8 x i16>* %353, align 16
  %354 = getelementptr inbounds [16 x i16], [16 x i16]* %11, i64 0, i64 8
  %355 = getelementptr inbounds i16, i16* %342, i64 8
  %356 = bitcast i16* %355 to <8 x i16>*
  %357 = load <8 x i16>, <8 x i16>* %356, align 2
  %358 = zext <8 x i16> %357 to <8 x i32>
  %359 = bitcast i16* %325 to <8 x i16>*
  %360 = load <8 x i16>, <8 x i16>* %359, align 16
  %361 = zext <8 x i16> %360 to <8 x i32>
  %362 = add nuw nsw <8 x i32> %358, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %363 = add nuw nsw <8 x i32> %362, %361
  %364 = lshr <8 x i32> %363, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %365 = trunc <8 x i32> %364 to <8 x i16>
  %366 = bitcast i16* %354 to <8 x i16>*
  store <8 x i16> %365, <8 x i16>* %366, align 16
  %367 = ptrtoint [16 x i16]* %11 to i64
  %368 = lshr exact i64 %367, 1
  %369 = inttoptr i64 %368 to i8*
  %370 = call i32 @vpx_highbd_10_variance4x4_c(i8* nonnull %369, i32 4, i8* %4, i32 %5, i32* %6)
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %14) #4
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %13) #4
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %12) #4
  ret i32 %370
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_highbd_12_sub_pixel_avg_variance4x4_c(i8*, i32, i32, i32, i8*, i32, i32* nocapture, i8*) local_unnamed_addr #2 {
  %9 = alloca [20 x i16], align 16
  %10 = alloca [16 x i16], align 16
  %11 = alloca [16 x i16], align 16
  %12 = bitcast [20 x i16]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %12) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %12, i8 -86, i64 40, i1 false)
  %13 = bitcast [16 x i16]* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %13) #4
  %14 = bitcast [16 x i16]* %11 to i8*
  %15 = bitcast [16 x i16]* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %15, i8 -86, i64 32, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %14) #4
  %16 = sext i32 %2 to i64
  %17 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %16, i64 0
  %18 = ptrtoint i8* %0 to i64
  %19 = shl i64 %18, 1
  %20 = inttoptr i64 %19 to i16*
  %21 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %16, i64 1
  %22 = add i32 %1, -4
  %23 = zext i32 %22 to i64
  %24 = bitcast [16 x i16]* %11 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %24, i8 -86, i64 32, i1 false)
  %25 = load i8, i8* %17, align 2
  %26 = zext i8 %25 to i32
  %27 = load i8, i8* %21, align 1
  %28 = zext i8 %27 to i32
  %29 = getelementptr inbounds [20 x i16], [20 x i16]* %9, i64 0, i64 0
  %30 = load i16, i16* %20, align 2
  %31 = zext i16 %30 to i32
  %32 = mul nuw nsw i32 %26, %31
  %33 = getelementptr inbounds i16, i16* %20, i64 1
  %34 = load i16, i16* %33, align 2
  %35 = zext i16 %34 to i32
  %36 = mul nuw nsw i32 %28, %35
  %37 = add nuw nsw i32 %32, 64
  %38 = add nuw nsw i32 %37, %36
  %39 = lshr i32 %38, 7
  %40 = trunc i32 %39 to i16
  store i16 %40, i16* %29, align 16
  %41 = load i16, i16* %33, align 2
  %42 = zext i16 %41 to i32
  %43 = mul nuw nsw i32 %26, %42
  %44 = getelementptr inbounds i16, i16* %20, i64 2
  %45 = load i16, i16* %44, align 2
  %46 = zext i16 %45 to i32
  %47 = mul nuw nsw i32 %28, %46
  %48 = add nuw nsw i32 %43, 64
  %49 = add nuw nsw i32 %48, %47
  %50 = lshr i32 %49, 7
  %51 = trunc i32 %50 to i16
  %52 = getelementptr inbounds [20 x i16], [20 x i16]* %9, i64 0, i64 1
  store i16 %51, i16* %52, align 2
  %53 = load i16, i16* %44, align 2
  %54 = zext i16 %53 to i32
  %55 = mul nuw nsw i32 %26, %54
  %56 = getelementptr inbounds i16, i16* %20, i64 3
  %57 = load i16, i16* %56, align 2
  %58 = zext i16 %57 to i32
  %59 = mul nuw nsw i32 %28, %58
  %60 = add nuw nsw i32 %55, 64
  %61 = add nuw nsw i32 %60, %59
  %62 = lshr i32 %61, 7
  %63 = trunc i32 %62 to i16
  %64 = getelementptr inbounds [20 x i16], [20 x i16]* %9, i64 0, i64 2
  store i16 %63, i16* %64, align 4
  %65 = load i16, i16* %56, align 2
  %66 = zext i16 %65 to i32
  %67 = mul nuw nsw i32 %26, %66
  %68 = getelementptr inbounds i16, i16* %20, i64 4
  %69 = load i16, i16* %68, align 2
  %70 = zext i16 %69 to i32
  %71 = mul nuw nsw i32 %28, %70
  %72 = add nuw nsw i32 %67, 64
  %73 = add nuw nsw i32 %72, %71
  %74 = lshr i32 %73, 7
  %75 = trunc i32 %74 to i16
  %76 = getelementptr inbounds [20 x i16], [20 x i16]* %9, i64 0, i64 3
  store i16 %75, i16* %76, align 2
  %77 = getelementptr inbounds i16, i16* %68, i64 %23
  %78 = getelementptr inbounds [20 x i16], [20 x i16]* %9, i64 0, i64 4
  %79 = load i16, i16* %77, align 2
  %80 = zext i16 %79 to i32
  %81 = mul nuw nsw i32 %26, %80
  %82 = getelementptr inbounds i16, i16* %77, i64 1
  %83 = load i16, i16* %82, align 2
  %84 = zext i16 %83 to i32
  %85 = mul nuw nsw i32 %28, %84
  %86 = add nuw nsw i32 %81, 64
  %87 = add nuw nsw i32 %86, %85
  %88 = lshr i32 %87, 7
  %89 = trunc i32 %88 to i16
  store i16 %89, i16* %78, align 8
  %90 = load i16, i16* %82, align 2
  %91 = zext i16 %90 to i32
  %92 = mul nuw nsw i32 %26, %91
  %93 = getelementptr inbounds i16, i16* %77, i64 2
  %94 = load i16, i16* %93, align 2
  %95 = zext i16 %94 to i32
  %96 = mul nuw nsw i32 %28, %95
  %97 = add nuw nsw i32 %92, 64
  %98 = add nuw nsw i32 %97, %96
  %99 = lshr i32 %98, 7
  %100 = trunc i32 %99 to i16
  %101 = getelementptr inbounds [20 x i16], [20 x i16]* %9, i64 0, i64 5
  store i16 %100, i16* %101, align 2
  %102 = load i16, i16* %93, align 2
  %103 = zext i16 %102 to i32
  %104 = mul nuw nsw i32 %26, %103
  %105 = getelementptr inbounds i16, i16* %77, i64 3
  %106 = load i16, i16* %105, align 2
  %107 = zext i16 %106 to i32
  %108 = mul nuw nsw i32 %28, %107
  %109 = add nuw nsw i32 %104, 64
  %110 = add nuw nsw i32 %109, %108
  %111 = lshr i32 %110, 7
  %112 = trunc i32 %111 to i16
  %113 = getelementptr inbounds [20 x i16], [20 x i16]* %9, i64 0, i64 6
  store i16 %112, i16* %113, align 4
  %114 = load i16, i16* %105, align 2
  %115 = zext i16 %114 to i32
  %116 = mul nuw nsw i32 %26, %115
  %117 = getelementptr inbounds i16, i16* %77, i64 4
  %118 = load i16, i16* %117, align 2
  %119 = zext i16 %118 to i32
  %120 = mul nuw nsw i32 %28, %119
  %121 = add nuw nsw i32 %116, 64
  %122 = add nuw nsw i32 %121, %120
  %123 = lshr i32 %122, 7
  %124 = trunc i32 %123 to i16
  %125 = getelementptr inbounds [20 x i16], [20 x i16]* %9, i64 0, i64 7
  store i16 %124, i16* %125, align 2
  %126 = getelementptr inbounds i16, i16* %117, i64 %23
  %127 = getelementptr inbounds [20 x i16], [20 x i16]* %9, i64 0, i64 8
  %128 = load i16, i16* %126, align 2
  %129 = zext i16 %128 to i32
  %130 = mul nuw nsw i32 %26, %129
  %131 = getelementptr inbounds i16, i16* %126, i64 1
  %132 = load i16, i16* %131, align 2
  %133 = zext i16 %132 to i32
  %134 = mul nuw nsw i32 %28, %133
  %135 = add nuw nsw i32 %130, 64
  %136 = add nuw nsw i32 %135, %134
  %137 = lshr i32 %136, 7
  %138 = trunc i32 %137 to i16
  store i16 %138, i16* %127, align 16
  %139 = load i16, i16* %131, align 2
  %140 = zext i16 %139 to i32
  %141 = mul nuw nsw i32 %26, %140
  %142 = getelementptr inbounds i16, i16* %126, i64 2
  %143 = load i16, i16* %142, align 2
  %144 = zext i16 %143 to i32
  %145 = mul nuw nsw i32 %28, %144
  %146 = add nuw nsw i32 %141, 64
  %147 = add nuw nsw i32 %146, %145
  %148 = lshr i32 %147, 7
  %149 = trunc i32 %148 to i16
  %150 = getelementptr inbounds [20 x i16], [20 x i16]* %9, i64 0, i64 9
  store i16 %149, i16* %150, align 2
  %151 = load i16, i16* %142, align 2
  %152 = zext i16 %151 to i32
  %153 = mul nuw nsw i32 %26, %152
  %154 = getelementptr inbounds i16, i16* %126, i64 3
  %155 = load i16, i16* %154, align 2
  %156 = zext i16 %155 to i32
  %157 = mul nuw nsw i32 %28, %156
  %158 = add nuw nsw i32 %153, 64
  %159 = add nuw nsw i32 %158, %157
  %160 = lshr i32 %159, 7
  %161 = trunc i32 %160 to i16
  %162 = getelementptr inbounds [20 x i16], [20 x i16]* %9, i64 0, i64 10
  store i16 %161, i16* %162, align 4
  %163 = load i16, i16* %154, align 2
  %164 = zext i16 %163 to i32
  %165 = mul nuw nsw i32 %26, %164
  %166 = getelementptr inbounds i16, i16* %126, i64 4
  %167 = load i16, i16* %166, align 2
  %168 = zext i16 %167 to i32
  %169 = mul nuw nsw i32 %28, %168
  %170 = add nuw nsw i32 %165, 64
  %171 = add nuw nsw i32 %170, %169
  %172 = lshr i32 %171, 7
  %173 = trunc i32 %172 to i16
  %174 = getelementptr inbounds [20 x i16], [20 x i16]* %9, i64 0, i64 11
  store i16 %173, i16* %174, align 2
  %175 = getelementptr inbounds i16, i16* %166, i64 %23
  %176 = getelementptr inbounds [20 x i16], [20 x i16]* %9, i64 0, i64 12
  %177 = load i16, i16* %175, align 2
  %178 = zext i16 %177 to i32
  %179 = mul nuw nsw i32 %26, %178
  %180 = getelementptr inbounds i16, i16* %175, i64 1
  %181 = load i16, i16* %180, align 2
  %182 = zext i16 %181 to i32
  %183 = mul nuw nsw i32 %28, %182
  %184 = add nuw nsw i32 %179, 64
  %185 = add nuw nsw i32 %184, %183
  %186 = lshr i32 %185, 7
  %187 = trunc i32 %186 to i16
  store i16 %187, i16* %176, align 8
  %188 = load i16, i16* %180, align 2
  %189 = zext i16 %188 to i32
  %190 = mul nuw nsw i32 %26, %189
  %191 = getelementptr inbounds i16, i16* %175, i64 2
  %192 = load i16, i16* %191, align 2
  %193 = zext i16 %192 to i32
  %194 = mul nuw nsw i32 %28, %193
  %195 = add nuw nsw i32 %190, 64
  %196 = add nuw nsw i32 %195, %194
  %197 = lshr i32 %196, 7
  %198 = trunc i32 %197 to i16
  %199 = getelementptr inbounds [20 x i16], [20 x i16]* %9, i64 0, i64 13
  store i16 %198, i16* %199, align 2
  %200 = load i16, i16* %191, align 2
  %201 = zext i16 %200 to i32
  %202 = mul nuw nsw i32 %26, %201
  %203 = getelementptr inbounds i16, i16* %175, i64 3
  %204 = load i16, i16* %203, align 2
  %205 = zext i16 %204 to i32
  %206 = mul nuw nsw i32 %28, %205
  %207 = add nuw nsw i32 %202, 64
  %208 = add nuw nsw i32 %207, %206
  %209 = lshr i32 %208, 7
  %210 = trunc i32 %209 to i16
  %211 = getelementptr inbounds [20 x i16], [20 x i16]* %9, i64 0, i64 14
  store i16 %210, i16* %211, align 4
  %212 = load i16, i16* %203, align 2
  %213 = zext i16 %212 to i32
  %214 = mul nuw nsw i32 %26, %213
  %215 = getelementptr inbounds i16, i16* %175, i64 4
  %216 = load i16, i16* %215, align 2
  %217 = zext i16 %216 to i32
  %218 = mul nuw nsw i32 %28, %217
  %219 = add nuw nsw i32 %214, 64
  %220 = add nuw nsw i32 %219, %218
  %221 = lshr i32 %220, 7
  %222 = trunc i32 %221 to i16
  %223 = getelementptr inbounds [20 x i16], [20 x i16]* %9, i64 0, i64 15
  store i16 %222, i16* %223, align 2
  %224 = getelementptr inbounds i16, i16* %215, i64 %23
  %225 = getelementptr inbounds [20 x i16], [20 x i16]* %9, i64 0, i64 16
  %226 = load i16, i16* %224, align 2
  %227 = zext i16 %226 to i32
  %228 = mul nuw nsw i32 %26, %227
  %229 = getelementptr inbounds i16, i16* %224, i64 1
  %230 = load i16, i16* %229, align 2
  %231 = zext i16 %230 to i32
  %232 = mul nuw nsw i32 %28, %231
  %233 = add nuw nsw i32 %228, 64
  %234 = add nuw nsw i32 %233, %232
  %235 = lshr i32 %234, 7
  %236 = trunc i32 %235 to i16
  store i16 %236, i16* %225, align 16
  %237 = load i16, i16* %229, align 2
  %238 = zext i16 %237 to i32
  %239 = mul nuw nsw i32 %26, %238
  %240 = getelementptr inbounds i16, i16* %224, i64 2
  %241 = load i16, i16* %240, align 2
  %242 = zext i16 %241 to i32
  %243 = mul nuw nsw i32 %28, %242
  %244 = add nuw nsw i32 %239, 64
  %245 = add nuw nsw i32 %244, %243
  %246 = lshr i32 %245, 7
  %247 = trunc i32 %246 to i16
  %248 = getelementptr inbounds [20 x i16], [20 x i16]* %9, i64 0, i64 17
  store i16 %247, i16* %248, align 2
  %249 = load i16, i16* %240, align 2
  %250 = zext i16 %249 to i32
  %251 = mul nuw nsw i32 %26, %250
  %252 = getelementptr inbounds i16, i16* %224, i64 3
  %253 = load i16, i16* %252, align 2
  %254 = zext i16 %253 to i32
  %255 = mul nuw nsw i32 %28, %254
  %256 = add nuw nsw i32 %251, 64
  %257 = add nuw nsw i32 %256, %255
  %258 = lshr i32 %257, 7
  %259 = trunc i32 %258 to i16
  %260 = getelementptr inbounds [20 x i16], [20 x i16]* %9, i64 0, i64 18
  store i16 %259, i16* %260, align 4
  %261 = load i16, i16* %252, align 2
  %262 = zext i16 %261 to i32
  %263 = mul nuw nsw i32 %26, %262
  %264 = getelementptr inbounds i16, i16* %224, i64 4
  %265 = load i16, i16* %264, align 2
  %266 = zext i16 %265 to i32
  %267 = mul nuw nsw i32 %28, %266
  %268 = add nuw nsw i32 %263, 64
  %269 = add nuw nsw i32 %268, %267
  %270 = lshr i32 %269, 7
  %271 = trunc i32 %270 to i16
  %272 = getelementptr inbounds [20 x i16], [20 x i16]* %9, i64 0, i64 19
  store i16 %271, i16* %272, align 2
  %273 = sext i32 %3 to i64
  %274 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %273, i64 0
  %275 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @bilinear_filters, i64 0, i64 %273, i64 1
  %276 = load i8, i8* %274, align 2
  %277 = zext i8 %276 to i32
  %278 = load i8, i8* %275, align 1
  %279 = zext i8 %278 to i32
  %280 = getelementptr inbounds [20 x i16], [20 x i16]* %9, i64 0, i64 5
  %281 = load i16, i16* %280, align 2
  %282 = zext i16 %281 to i32
  %283 = getelementptr inbounds [20 x i16], [20 x i16]* %9, i64 0, i64 6
  %284 = load i16, i16* %283, align 4
  %285 = zext i16 %284 to i32
  %286 = getelementptr inbounds [20 x i16], [20 x i16]* %9, i64 0, i64 7
  %287 = load i16, i16* %286, align 2
  %288 = zext i16 %287 to i32
  %289 = getelementptr inbounds [20 x i16], [20 x i16]* %9, i64 0, i64 8
  %290 = load i16, i16* %289, align 16
  %291 = zext i16 %290 to i32
  %292 = getelementptr inbounds [20 x i16], [20 x i16]* %9, i64 0, i64 9
  %293 = load i16, i16* %292, align 2
  %294 = zext i16 %293 to i32
  %295 = getelementptr inbounds [20 x i16], [20 x i16]* %9, i64 0, i64 10
  %296 = load i16, i16* %295, align 4
  %297 = zext i16 %296 to i32
  %298 = bitcast [20 x i16]* %9 to <8 x i16>*
  %299 = load <8 x i16>, <8 x i16>* %298, align 16
  %300 = zext <8 x i16> %299 to <8 x i32>
  %301 = insertelement <8 x i32> undef, i32 %277, i32 0
  %302 = shufflevector <8 x i32> %301, <8 x i32> undef, <8 x i32> zeroinitializer
  %303 = mul nuw nsw <8 x i32> %302, %300
  %304 = getelementptr inbounds [20 x i16], [20 x i16]* %9, i64 0, i64 11
  %305 = load i16, i16* %304, align 2
  %306 = zext i16 %305 to i32
  %307 = insertelement <8 x i32> undef, i32 %279, i32 0
  %308 = shufflevector <8 x i32> %307, <8 x i32> undef, <8 x i32> zeroinitializer
  %309 = extractelement <8 x i32> %300, i32 4
  %310 = insertelement <8 x i32> undef, i32 %309, i32 0
  %311 = insertelement <8 x i32> %310, i32 %282, i32 1
  %312 = insertelement <8 x i32> %311, i32 %285, i32 2
  %313 = insertelement <8 x i32> %312, i32 %288, i32 3
  %314 = insertelement <8 x i32> %313, i32 %291, i32 4
  %315 = insertelement <8 x i32> %314, i32 %294, i32 5
  %316 = insertelement <8 x i32> %315, i32 %297, i32 6
  %317 = insertelement <8 x i32> %316, i32 %306, i32 7
  %318 = mul nuw nsw <8 x i32> %308, %317
  %319 = add nuw nsw <8 x i32> %303, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %320 = add nuw nsw <8 x i32> %319, %318
  %321 = lshr <8 x i32> %320, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %322 = trunc <8 x i32> %321 to <8 x i16>
  %323 = bitcast [16 x i16]* %10 to <8 x i16>*
  store <8 x i16> %322, <8 x i16>* %323, align 16
  %324 = getelementptr inbounds [20 x i16], [20 x i16]* %9, i64 0, i64 8
  %325 = getelementptr inbounds [16 x i16], [16 x i16]* %10, i64 0, i64 8
  %326 = getelementptr inbounds [20 x i16], [20 x i16]* %9, i64 0, i64 12
  %327 = bitcast i16* %324 to <8 x i16>*
  %328 = load <8 x i16>, <8 x i16>* %327, align 16
  %329 = zext <8 x i16> %328 to <8 x i32>
  %330 = mul nuw nsw <8 x i32> %302, %329
  %331 = bitcast i16* %326 to <8 x i16>*
  %332 = load <8 x i16>, <8 x i16>* %331, align 8
  %333 = zext <8 x i16> %332 to <8 x i32>
  %334 = mul nuw nsw <8 x i32> %308, %333
  %335 = add nuw nsw <8 x i32> %330, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %336 = add nuw nsw <8 x i32> %335, %334
  %337 = lshr <8 x i32> %336, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %338 = trunc <8 x i32> %337 to <8 x i16>
  %339 = bitcast i16* %325 to <8 x i16>*
  store <8 x i16> %338, <8 x i16>* %339, align 16
  %340 = ptrtoint i8* %7 to i64
  %341 = shl i64 %340, 1
  %342 = inttoptr i64 %341 to i16*
  %343 = inttoptr i64 %341 to <8 x i16>*
  %344 = load <8 x i16>, <8 x i16>* %343, align 2
  %345 = zext <8 x i16> %344 to <8 x i32>
  %346 = bitcast [16 x i16]* %10 to <8 x i16>*
  %347 = load <8 x i16>, <8 x i16>* %346, align 16
  %348 = zext <8 x i16> %347 to <8 x i32>
  %349 = add nuw nsw <8 x i32> %345, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %350 = add nuw nsw <8 x i32> %349, %348
  %351 = lshr <8 x i32> %350, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %352 = trunc <8 x i32> %351 to <8 x i16>
  %353 = bitcast [16 x i16]* %11 to <8 x i16>*
  store <8 x i16> %352, <8 x i16>* %353, align 16
  %354 = getelementptr inbounds [16 x i16], [16 x i16]* %11, i64 0, i64 8
  %355 = getelementptr inbounds i16, i16* %342, i64 8
  %356 = bitcast i16* %355 to <8 x i16>*
  %357 = load <8 x i16>, <8 x i16>* %356, align 2
  %358 = zext <8 x i16> %357 to <8 x i32>
  %359 = bitcast i16* %325 to <8 x i16>*
  %360 = load <8 x i16>, <8 x i16>* %359, align 16
  %361 = zext <8 x i16> %360 to <8 x i32>
  %362 = add nuw nsw <8 x i32> %358, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %363 = add nuw nsw <8 x i32> %362, %361
  %364 = lshr <8 x i32> %363, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %365 = trunc <8 x i32> %364 to <8 x i16>
  %366 = bitcast i16* %354 to <8 x i16>*
  store <8 x i16> %365, <8 x i16>* %366, align 16
  %367 = ptrtoint [16 x i16]* %11 to i64
  %368 = lshr exact i64 %367, 1
  %369 = inttoptr i64 %368 to i8*
  %370 = call i32 @vpx_highbd_12_variance4x4_c(i8* nonnull %369, i32 4, i8* %4, i32 %5, i32* %6)
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %14) #4
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %13) #4
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %12) #4
  ret i32 %370
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @vpx_highbd_8_get8x8var_c(i8*, i32, i8*, i32, i32* nocapture, i32* nocapture) local_unnamed_addr #3 {
  %7 = ptrtoint i8* %2 to i64
  %8 = shl i64 %7, 1
  %9 = inttoptr i64 %8 to i16*
  %10 = ptrtoint i8* %0 to i64
  %11 = shl i64 %10, 1
  %12 = inttoptr i64 %11 to i16*
  %13 = sext i32 %1 to i64
  %14 = sext i32 %3 to i64
  br label %15

15:                                               ; preds = %15, %6
  %16 = phi i64 [ 0, %6 ], [ %68, %15 ]
  %17 = phi i64 [ 0, %6 ], [ %64, %15 ]
  %18 = phi i32 [ 0, %6 ], [ %71, %15 ]
  %19 = phi i16* [ %9, %6 ], [ %70, %15 ]
  %20 = phi i16* [ %12, %6 ], [ %69, %15 ]
  %21 = bitcast i16* %20 to <8 x i16>*
  %22 = load <8 x i16>, <8 x i16>* %21, align 2
  %23 = zext <8 x i16> %22 to <8 x i32>
  %24 = bitcast i16* %19 to <8 x i16>*
  %25 = load <8 x i16>, <8 x i16>* %24, align 2
  %26 = zext <8 x i16> %25 to <8 x i32>
  %27 = sub nsw <8 x i32> %23, %26
  %28 = sext <8 x i32> %27 to <8 x i64>
  %29 = extractelement <8 x i32> %27, i32 0
  %30 = mul nsw i32 %29, %29
  %31 = zext i32 %30 to i64
  %32 = add i64 %16, %31
  %33 = extractelement <8 x i32> %27, i32 1
  %34 = mul nsw i32 %33, %33
  %35 = zext i32 %34 to i64
  %36 = add i64 %32, %35
  %37 = extractelement <8 x i32> %27, i32 2
  %38 = mul nsw i32 %37, %37
  %39 = zext i32 %38 to i64
  %40 = add i64 %36, %39
  %41 = extractelement <8 x i32> %27, i32 3
  %42 = mul nsw i32 %41, %41
  %43 = zext i32 %42 to i64
  %44 = add i64 %40, %43
  %45 = extractelement <8 x i32> %27, i32 4
  %46 = mul nsw i32 %45, %45
  %47 = zext i32 %46 to i64
  %48 = add i64 %44, %47
  %49 = extractelement <8 x i32> %27, i32 5
  %50 = mul nsw i32 %49, %49
  %51 = zext i32 %50 to i64
  %52 = add i64 %48, %51
  %53 = extractelement <8 x i32> %27, i32 6
  %54 = mul nsw i32 %53, %53
  %55 = zext i32 %54 to i64
  %56 = add i64 %52, %55
  %57 = shufflevector <8 x i64> %28, <8 x i64> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %58 = add nsw <8 x i64> %57, %28
  %59 = shufflevector <8 x i64> %58, <8 x i64> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %60 = add nsw <8 x i64> %58, %59
  %61 = shufflevector <8 x i64> %60, <8 x i64> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %62 = add nsw <8 x i64> %60, %61
  %63 = extractelement <8 x i64> %62, i32 0
  %64 = add nsw i64 %63, %17
  %65 = extractelement <8 x i32> %27, i32 7
  %66 = mul nsw i32 %65, %65
  %67 = zext i32 %66 to i64
  %68 = add i64 %56, %67
  %69 = getelementptr inbounds i16, i16* %20, i64 %13
  %70 = getelementptr inbounds i16, i16* %19, i64 %14
  %71 = add nuw nsw i32 %18, 1
  %72 = icmp eq i32 %71, 8
  br i1 %72, label %73, label %15

73:                                               ; preds = %15
  %74 = trunc i64 %68 to i32
  store i32 %74, i32* %4, align 4
  %75 = trunc i64 %64 to i32
  store i32 %75, i32* %5, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @vpx_highbd_10_get8x8var_c(i8*, i32, i8*, i32, i32* nocapture, i32* nocapture) local_unnamed_addr #3 {
  %7 = ptrtoint i8* %2 to i64
  %8 = shl i64 %7, 1
  %9 = inttoptr i64 %8 to i16*
  %10 = ptrtoint i8* %0 to i64
  %11 = shl i64 %10, 1
  %12 = inttoptr i64 %11 to i16*
  %13 = sext i32 %1 to i64
  %14 = sext i32 %3 to i64
  br label %15

15:                                               ; preds = %15, %6
  %16 = phi i64 [ 0, %6 ], [ %68, %15 ]
  %17 = phi i64 [ 0, %6 ], [ %64, %15 ]
  %18 = phi i32 [ 0, %6 ], [ %71, %15 ]
  %19 = phi i16* [ %9, %6 ], [ %70, %15 ]
  %20 = phi i16* [ %12, %6 ], [ %69, %15 ]
  %21 = bitcast i16* %20 to <8 x i16>*
  %22 = load <8 x i16>, <8 x i16>* %21, align 2
  %23 = zext <8 x i16> %22 to <8 x i32>
  %24 = bitcast i16* %19 to <8 x i16>*
  %25 = load <8 x i16>, <8 x i16>* %24, align 2
  %26 = zext <8 x i16> %25 to <8 x i32>
  %27 = sub nsw <8 x i32> %23, %26
  %28 = sext <8 x i32> %27 to <8 x i64>
  %29 = extractelement <8 x i32> %27, i32 0
  %30 = mul nsw i32 %29, %29
  %31 = zext i32 %30 to i64
  %32 = add i64 %16, %31
  %33 = extractelement <8 x i32> %27, i32 1
  %34 = mul nsw i32 %33, %33
  %35 = zext i32 %34 to i64
  %36 = add i64 %32, %35
  %37 = extractelement <8 x i32> %27, i32 2
  %38 = mul nsw i32 %37, %37
  %39 = zext i32 %38 to i64
  %40 = add i64 %36, %39
  %41 = extractelement <8 x i32> %27, i32 3
  %42 = mul nsw i32 %41, %41
  %43 = zext i32 %42 to i64
  %44 = add i64 %40, %43
  %45 = extractelement <8 x i32> %27, i32 4
  %46 = mul nsw i32 %45, %45
  %47 = zext i32 %46 to i64
  %48 = add i64 %44, %47
  %49 = extractelement <8 x i32> %27, i32 5
  %50 = mul nsw i32 %49, %49
  %51 = zext i32 %50 to i64
  %52 = add i64 %48, %51
  %53 = extractelement <8 x i32> %27, i32 6
  %54 = mul nsw i32 %53, %53
  %55 = zext i32 %54 to i64
  %56 = add i64 %52, %55
  %57 = shufflevector <8 x i64> %28, <8 x i64> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %58 = add nsw <8 x i64> %57, %28
  %59 = shufflevector <8 x i64> %58, <8 x i64> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %60 = add nsw <8 x i64> %58, %59
  %61 = shufflevector <8 x i64> %60, <8 x i64> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %62 = add nsw <8 x i64> %60, %61
  %63 = extractelement <8 x i64> %62, i32 0
  %64 = add nsw i64 %63, %17
  %65 = extractelement <8 x i32> %27, i32 7
  %66 = mul nsw i32 %65, %65
  %67 = zext i32 %66 to i64
  %68 = add i64 %56, %67
  %69 = getelementptr inbounds i16, i16* %20, i64 %13
  %70 = getelementptr inbounds i16, i16* %19, i64 %14
  %71 = add nuw nsw i32 %18, 1
  %72 = icmp eq i32 %71, 8
  br i1 %72, label %73, label %15

73:                                               ; preds = %15
  %74 = add i64 %68, 8
  %75 = lshr i64 %74, 4
  %76 = trunc i64 %75 to i32
  store i32 %76, i32* %4, align 4
  %77 = add nsw i64 %64, 2
  %78 = lshr i64 %77, 2
  %79 = trunc i64 %78 to i32
  store i32 %79, i32* %5, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @vpx_highbd_12_get8x8var_c(i8*, i32, i8*, i32, i32* nocapture, i32* nocapture) local_unnamed_addr #3 {
  %7 = ptrtoint i8* %2 to i64
  %8 = shl i64 %7, 1
  %9 = inttoptr i64 %8 to i16*
  %10 = ptrtoint i8* %0 to i64
  %11 = shl i64 %10, 1
  %12 = inttoptr i64 %11 to i16*
  %13 = sext i32 %1 to i64
  %14 = sext i32 %3 to i64
  br label %15

15:                                               ; preds = %15, %6
  %16 = phi i64 [ 0, %6 ], [ %68, %15 ]
  %17 = phi i64 [ 0, %6 ], [ %64, %15 ]
  %18 = phi i32 [ 0, %6 ], [ %71, %15 ]
  %19 = phi i16* [ %9, %6 ], [ %70, %15 ]
  %20 = phi i16* [ %12, %6 ], [ %69, %15 ]
  %21 = bitcast i16* %20 to <8 x i16>*
  %22 = load <8 x i16>, <8 x i16>* %21, align 2
  %23 = zext <8 x i16> %22 to <8 x i32>
  %24 = bitcast i16* %19 to <8 x i16>*
  %25 = load <8 x i16>, <8 x i16>* %24, align 2
  %26 = zext <8 x i16> %25 to <8 x i32>
  %27 = sub nsw <8 x i32> %23, %26
  %28 = sext <8 x i32> %27 to <8 x i64>
  %29 = extractelement <8 x i32> %27, i32 0
  %30 = mul nsw i32 %29, %29
  %31 = zext i32 %30 to i64
  %32 = add i64 %16, %31
  %33 = extractelement <8 x i32> %27, i32 1
  %34 = mul nsw i32 %33, %33
  %35 = zext i32 %34 to i64
  %36 = add i64 %32, %35
  %37 = extractelement <8 x i32> %27, i32 2
  %38 = mul nsw i32 %37, %37
  %39 = zext i32 %38 to i64
  %40 = add i64 %36, %39
  %41 = extractelement <8 x i32> %27, i32 3
  %42 = mul nsw i32 %41, %41
  %43 = zext i32 %42 to i64
  %44 = add i64 %40, %43
  %45 = extractelement <8 x i32> %27, i32 4
  %46 = mul nsw i32 %45, %45
  %47 = zext i32 %46 to i64
  %48 = add i64 %44, %47
  %49 = extractelement <8 x i32> %27, i32 5
  %50 = mul nsw i32 %49, %49
  %51 = zext i32 %50 to i64
  %52 = add i64 %48, %51
  %53 = extractelement <8 x i32> %27, i32 6
  %54 = mul nsw i32 %53, %53
  %55 = zext i32 %54 to i64
  %56 = add i64 %52, %55
  %57 = shufflevector <8 x i64> %28, <8 x i64> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %58 = add nsw <8 x i64> %57, %28
  %59 = shufflevector <8 x i64> %58, <8 x i64> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %60 = add nsw <8 x i64> %58, %59
  %61 = shufflevector <8 x i64> %60, <8 x i64> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %62 = add nsw <8 x i64> %60, %61
  %63 = extractelement <8 x i64> %62, i32 0
  %64 = add nsw i64 %63, %17
  %65 = extractelement <8 x i32> %27, i32 7
  %66 = mul nsw i32 %65, %65
  %67 = zext i32 %66 to i64
  %68 = add i64 %56, %67
  %69 = getelementptr inbounds i16, i16* %20, i64 %13
  %70 = getelementptr inbounds i16, i16* %19, i64 %14
  %71 = add nuw nsw i32 %18, 1
  %72 = icmp eq i32 %71, 8
  br i1 %72, label %73, label %15

73:                                               ; preds = %15
  %74 = add i64 %68, 128
  %75 = lshr i64 %74, 8
  %76 = trunc i64 %75 to i32
  store i32 %76, i32* %4, align 4
  %77 = add nsw i64 %64, 8
  %78 = lshr i64 %77, 4
  %79 = trunc i64 %78 to i32
  store i32 %79, i32* %5, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @vpx_highbd_8_get16x16var_c(i8*, i32, i8*, i32, i32* nocapture, i32* nocapture) local_unnamed_addr #3 {
  %7 = ptrtoint i8* %2 to i64
  %8 = shl i64 %7, 1
  %9 = inttoptr i64 %8 to i16*
  %10 = ptrtoint i8* %0 to i64
  %11 = shl i64 %10, 1
  %12 = inttoptr i64 %11 to i16*
  %13 = sext i32 %1 to i64
  %14 = sext i32 %3 to i64
  br label %15

15:                                               ; preds = %15, %6
  %16 = phi i64 [ 0, %6 ], [ %102, %15 ]
  %17 = phi i64 [ 0, %6 ], [ %98, %15 ]
  %18 = phi i32 [ 0, %6 ], [ %105, %15 ]
  %19 = phi i16* [ %9, %6 ], [ %104, %15 ]
  %20 = phi i16* [ %12, %6 ], [ %103, %15 ]
  %21 = bitcast i16* %20 to <16 x i16>*
  %22 = load <16 x i16>, <16 x i16>* %21, align 2
  %23 = zext <16 x i16> %22 to <16 x i32>
  %24 = bitcast i16* %19 to <16 x i16>*
  %25 = load <16 x i16>, <16 x i16>* %24, align 2
  %26 = zext <16 x i16> %25 to <16 x i32>
  %27 = sub nsw <16 x i32> %23, %26
  %28 = sext <16 x i32> %27 to <16 x i64>
  %29 = extractelement <16 x i32> %27, i32 0
  %30 = mul nsw i32 %29, %29
  %31 = zext i32 %30 to i64
  %32 = add i64 %16, %31
  %33 = extractelement <16 x i32> %27, i32 1
  %34 = mul nsw i32 %33, %33
  %35 = zext i32 %34 to i64
  %36 = add i64 %32, %35
  %37 = extractelement <16 x i32> %27, i32 2
  %38 = mul nsw i32 %37, %37
  %39 = zext i32 %38 to i64
  %40 = add i64 %36, %39
  %41 = extractelement <16 x i32> %27, i32 3
  %42 = mul nsw i32 %41, %41
  %43 = zext i32 %42 to i64
  %44 = add i64 %40, %43
  %45 = extractelement <16 x i32> %27, i32 4
  %46 = mul nsw i32 %45, %45
  %47 = zext i32 %46 to i64
  %48 = add i64 %44, %47
  %49 = extractelement <16 x i32> %27, i32 5
  %50 = mul nsw i32 %49, %49
  %51 = zext i32 %50 to i64
  %52 = add i64 %48, %51
  %53 = extractelement <16 x i32> %27, i32 6
  %54 = mul nsw i32 %53, %53
  %55 = zext i32 %54 to i64
  %56 = add i64 %52, %55
  %57 = extractelement <16 x i32> %27, i32 7
  %58 = mul nsw i32 %57, %57
  %59 = zext i32 %58 to i64
  %60 = add i64 %56, %59
  %61 = extractelement <16 x i32> %27, i32 8
  %62 = mul nsw i32 %61, %61
  %63 = zext i32 %62 to i64
  %64 = add i64 %60, %63
  %65 = extractelement <16 x i32> %27, i32 9
  %66 = mul nsw i32 %65, %65
  %67 = zext i32 %66 to i64
  %68 = add i64 %64, %67
  %69 = extractelement <16 x i32> %27, i32 10
  %70 = mul nsw i32 %69, %69
  %71 = zext i32 %70 to i64
  %72 = add i64 %68, %71
  %73 = extractelement <16 x i32> %27, i32 11
  %74 = mul nsw i32 %73, %73
  %75 = zext i32 %74 to i64
  %76 = add i64 %72, %75
  %77 = extractelement <16 x i32> %27, i32 12
  %78 = mul nsw i32 %77, %77
  %79 = zext i32 %78 to i64
  %80 = add i64 %76, %79
  %81 = extractelement <16 x i32> %27, i32 13
  %82 = mul nsw i32 %81, %81
  %83 = zext i32 %82 to i64
  %84 = add i64 %80, %83
  %85 = extractelement <16 x i32> %27, i32 14
  %86 = mul nsw i32 %85, %85
  %87 = zext i32 %86 to i64
  %88 = add i64 %84, %87
  %89 = shufflevector <16 x i64> %28, <16 x i64> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %90 = add nsw <16 x i64> %89, %28
  %91 = shufflevector <16 x i64> %90, <16 x i64> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %92 = add nsw <16 x i64> %90, %91
  %93 = shufflevector <16 x i64> %92, <16 x i64> undef, <16 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %94 = add nsw <16 x i64> %92, %93
  %95 = shufflevector <16 x i64> %94, <16 x i64> undef, <16 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %96 = add nsw <16 x i64> %94, %95
  %97 = extractelement <16 x i64> %96, i32 0
  %98 = add nsw i64 %97, %17
  %99 = extractelement <16 x i32> %27, i32 15
  %100 = mul nsw i32 %99, %99
  %101 = zext i32 %100 to i64
  %102 = add i64 %88, %101
  %103 = getelementptr inbounds i16, i16* %20, i64 %13
  %104 = getelementptr inbounds i16, i16* %19, i64 %14
  %105 = add nuw nsw i32 %18, 1
  %106 = icmp eq i32 %105, 16
  br i1 %106, label %107, label %15

107:                                              ; preds = %15
  %108 = trunc i64 %102 to i32
  store i32 %108, i32* %4, align 4
  %109 = trunc i64 %98 to i32
  store i32 %109, i32* %5, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @vpx_highbd_10_get16x16var_c(i8*, i32, i8*, i32, i32* nocapture, i32* nocapture) local_unnamed_addr #3 {
  %7 = ptrtoint i8* %2 to i64
  %8 = shl i64 %7, 1
  %9 = inttoptr i64 %8 to i16*
  %10 = ptrtoint i8* %0 to i64
  %11 = shl i64 %10, 1
  %12 = inttoptr i64 %11 to i16*
  %13 = sext i32 %1 to i64
  %14 = sext i32 %3 to i64
  br label %15

15:                                               ; preds = %15, %6
  %16 = phi i64 [ 0, %6 ], [ %102, %15 ]
  %17 = phi i64 [ 0, %6 ], [ %98, %15 ]
  %18 = phi i32 [ 0, %6 ], [ %105, %15 ]
  %19 = phi i16* [ %9, %6 ], [ %104, %15 ]
  %20 = phi i16* [ %12, %6 ], [ %103, %15 ]
  %21 = bitcast i16* %20 to <16 x i16>*
  %22 = load <16 x i16>, <16 x i16>* %21, align 2
  %23 = zext <16 x i16> %22 to <16 x i32>
  %24 = bitcast i16* %19 to <16 x i16>*
  %25 = load <16 x i16>, <16 x i16>* %24, align 2
  %26 = zext <16 x i16> %25 to <16 x i32>
  %27 = sub nsw <16 x i32> %23, %26
  %28 = sext <16 x i32> %27 to <16 x i64>
  %29 = extractelement <16 x i32> %27, i32 0
  %30 = mul nsw i32 %29, %29
  %31 = zext i32 %30 to i64
  %32 = add i64 %16, %31
  %33 = extractelement <16 x i32> %27, i32 1
  %34 = mul nsw i32 %33, %33
  %35 = zext i32 %34 to i64
  %36 = add i64 %32, %35
  %37 = extractelement <16 x i32> %27, i32 2
  %38 = mul nsw i32 %37, %37
  %39 = zext i32 %38 to i64
  %40 = add i64 %36, %39
  %41 = extractelement <16 x i32> %27, i32 3
  %42 = mul nsw i32 %41, %41
  %43 = zext i32 %42 to i64
  %44 = add i64 %40, %43
  %45 = extractelement <16 x i32> %27, i32 4
  %46 = mul nsw i32 %45, %45
  %47 = zext i32 %46 to i64
  %48 = add i64 %44, %47
  %49 = extractelement <16 x i32> %27, i32 5
  %50 = mul nsw i32 %49, %49
  %51 = zext i32 %50 to i64
  %52 = add i64 %48, %51
  %53 = extractelement <16 x i32> %27, i32 6
  %54 = mul nsw i32 %53, %53
  %55 = zext i32 %54 to i64
  %56 = add i64 %52, %55
  %57 = extractelement <16 x i32> %27, i32 7
  %58 = mul nsw i32 %57, %57
  %59 = zext i32 %58 to i64
  %60 = add i64 %56, %59
  %61 = extractelement <16 x i32> %27, i32 8
  %62 = mul nsw i32 %61, %61
  %63 = zext i32 %62 to i64
  %64 = add i64 %60, %63
  %65 = extractelement <16 x i32> %27, i32 9
  %66 = mul nsw i32 %65, %65
  %67 = zext i32 %66 to i64
  %68 = add i64 %64, %67
  %69 = extractelement <16 x i32> %27, i32 10
  %70 = mul nsw i32 %69, %69
  %71 = zext i32 %70 to i64
  %72 = add i64 %68, %71
  %73 = extractelement <16 x i32> %27, i32 11
  %74 = mul nsw i32 %73, %73
  %75 = zext i32 %74 to i64
  %76 = add i64 %72, %75
  %77 = extractelement <16 x i32> %27, i32 12
  %78 = mul nsw i32 %77, %77
  %79 = zext i32 %78 to i64
  %80 = add i64 %76, %79
  %81 = extractelement <16 x i32> %27, i32 13
  %82 = mul nsw i32 %81, %81
  %83 = zext i32 %82 to i64
  %84 = add i64 %80, %83
  %85 = extractelement <16 x i32> %27, i32 14
  %86 = mul nsw i32 %85, %85
  %87 = zext i32 %86 to i64
  %88 = add i64 %84, %87
  %89 = shufflevector <16 x i64> %28, <16 x i64> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %90 = add nsw <16 x i64> %89, %28
  %91 = shufflevector <16 x i64> %90, <16 x i64> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %92 = add nsw <16 x i64> %90, %91
  %93 = shufflevector <16 x i64> %92, <16 x i64> undef, <16 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %94 = add nsw <16 x i64> %92, %93
  %95 = shufflevector <16 x i64> %94, <16 x i64> undef, <16 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %96 = add nsw <16 x i64> %94, %95
  %97 = extractelement <16 x i64> %96, i32 0
  %98 = add nsw i64 %97, %17
  %99 = extractelement <16 x i32> %27, i32 15
  %100 = mul nsw i32 %99, %99
  %101 = zext i32 %100 to i64
  %102 = add i64 %88, %101
  %103 = getelementptr inbounds i16, i16* %20, i64 %13
  %104 = getelementptr inbounds i16, i16* %19, i64 %14
  %105 = add nuw nsw i32 %18, 1
  %106 = icmp eq i32 %105, 16
  br i1 %106, label %107, label %15

107:                                              ; preds = %15
  %108 = add i64 %102, 8
  %109 = lshr i64 %108, 4
  %110 = trunc i64 %109 to i32
  store i32 %110, i32* %4, align 4
  %111 = add nsw i64 %98, 2
  %112 = lshr i64 %111, 2
  %113 = trunc i64 %112 to i32
  store i32 %113, i32* %5, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @vpx_highbd_12_get16x16var_c(i8*, i32, i8*, i32, i32* nocapture, i32* nocapture) local_unnamed_addr #3 {
  %7 = ptrtoint i8* %2 to i64
  %8 = shl i64 %7, 1
  %9 = inttoptr i64 %8 to i16*
  %10 = ptrtoint i8* %0 to i64
  %11 = shl i64 %10, 1
  %12 = inttoptr i64 %11 to i16*
  %13 = sext i32 %1 to i64
  %14 = sext i32 %3 to i64
  br label %15

15:                                               ; preds = %15, %6
  %16 = phi i64 [ 0, %6 ], [ %102, %15 ]
  %17 = phi i64 [ 0, %6 ], [ %98, %15 ]
  %18 = phi i32 [ 0, %6 ], [ %105, %15 ]
  %19 = phi i16* [ %9, %6 ], [ %104, %15 ]
  %20 = phi i16* [ %12, %6 ], [ %103, %15 ]
  %21 = bitcast i16* %20 to <16 x i16>*
  %22 = load <16 x i16>, <16 x i16>* %21, align 2
  %23 = zext <16 x i16> %22 to <16 x i32>
  %24 = bitcast i16* %19 to <16 x i16>*
  %25 = load <16 x i16>, <16 x i16>* %24, align 2
  %26 = zext <16 x i16> %25 to <16 x i32>
  %27 = sub nsw <16 x i32> %23, %26
  %28 = sext <16 x i32> %27 to <16 x i64>
  %29 = extractelement <16 x i32> %27, i32 0
  %30 = mul nsw i32 %29, %29
  %31 = zext i32 %30 to i64
  %32 = add i64 %16, %31
  %33 = extractelement <16 x i32> %27, i32 1
  %34 = mul nsw i32 %33, %33
  %35 = zext i32 %34 to i64
  %36 = add i64 %32, %35
  %37 = extractelement <16 x i32> %27, i32 2
  %38 = mul nsw i32 %37, %37
  %39 = zext i32 %38 to i64
  %40 = add i64 %36, %39
  %41 = extractelement <16 x i32> %27, i32 3
  %42 = mul nsw i32 %41, %41
  %43 = zext i32 %42 to i64
  %44 = add i64 %40, %43
  %45 = extractelement <16 x i32> %27, i32 4
  %46 = mul nsw i32 %45, %45
  %47 = zext i32 %46 to i64
  %48 = add i64 %44, %47
  %49 = extractelement <16 x i32> %27, i32 5
  %50 = mul nsw i32 %49, %49
  %51 = zext i32 %50 to i64
  %52 = add i64 %48, %51
  %53 = extractelement <16 x i32> %27, i32 6
  %54 = mul nsw i32 %53, %53
  %55 = zext i32 %54 to i64
  %56 = add i64 %52, %55
  %57 = extractelement <16 x i32> %27, i32 7
  %58 = mul nsw i32 %57, %57
  %59 = zext i32 %58 to i64
  %60 = add i64 %56, %59
  %61 = extractelement <16 x i32> %27, i32 8
  %62 = mul nsw i32 %61, %61
  %63 = zext i32 %62 to i64
  %64 = add i64 %60, %63
  %65 = extractelement <16 x i32> %27, i32 9
  %66 = mul nsw i32 %65, %65
  %67 = zext i32 %66 to i64
  %68 = add i64 %64, %67
  %69 = extractelement <16 x i32> %27, i32 10
  %70 = mul nsw i32 %69, %69
  %71 = zext i32 %70 to i64
  %72 = add i64 %68, %71
  %73 = extractelement <16 x i32> %27, i32 11
  %74 = mul nsw i32 %73, %73
  %75 = zext i32 %74 to i64
  %76 = add i64 %72, %75
  %77 = extractelement <16 x i32> %27, i32 12
  %78 = mul nsw i32 %77, %77
  %79 = zext i32 %78 to i64
  %80 = add i64 %76, %79
  %81 = extractelement <16 x i32> %27, i32 13
  %82 = mul nsw i32 %81, %81
  %83 = zext i32 %82 to i64
  %84 = add i64 %80, %83
  %85 = extractelement <16 x i32> %27, i32 14
  %86 = mul nsw i32 %85, %85
  %87 = zext i32 %86 to i64
  %88 = add i64 %84, %87
  %89 = shufflevector <16 x i64> %28, <16 x i64> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %90 = add nsw <16 x i64> %89, %28
  %91 = shufflevector <16 x i64> %90, <16 x i64> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %92 = add nsw <16 x i64> %90, %91
  %93 = shufflevector <16 x i64> %92, <16 x i64> undef, <16 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %94 = add nsw <16 x i64> %92, %93
  %95 = shufflevector <16 x i64> %94, <16 x i64> undef, <16 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %96 = add nsw <16 x i64> %94, %95
  %97 = extractelement <16 x i64> %96, i32 0
  %98 = add nsw i64 %97, %17
  %99 = extractelement <16 x i32> %27, i32 15
  %100 = mul nsw i32 %99, %99
  %101 = zext i32 %100 to i64
  %102 = add i64 %88, %101
  %103 = getelementptr inbounds i16, i16* %20, i64 %13
  %104 = getelementptr inbounds i16, i16* %19, i64 %14
  %105 = add nuw nsw i32 %18, 1
  %106 = icmp eq i32 %105, 16
  br i1 %106, label %107, label %15

107:                                              ; preds = %15
  %108 = add i64 %102, 128
  %109 = lshr i64 %108, 8
  %110 = trunc i64 %109 to i32
  store i32 %110, i32* %4, align 4
  %111 = add nsw i64 %98, 8
  %112 = lshr i64 %111, 4
  %113 = trunc i64 %112 to i32
  store i32 %113, i32* %5, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_highbd_8_mse16x16_c(i8*, i32, i8*, i32, i32* nocapture) local_unnamed_addr #2 {
  %6 = ptrtoint i8* %2 to i64
  %7 = shl i64 %6, 1
  %8 = inttoptr i64 %7 to i16*
  %9 = ptrtoint i8* %0 to i64
  %10 = shl i64 %9, 1
  %11 = inttoptr i64 %10 to i16*
  %12 = sext i32 %1 to i64
  %13 = sext i32 %3 to i64
  br label %14

14:                                               ; preds = %14, %5
  %15 = phi i64 [ 0, %5 ], [ %37, %14 ]
  %16 = phi i32 [ 0, %5 ], [ %40, %14 ]
  %17 = phi i16* [ %8, %5 ], [ %39, %14 ]
  %18 = phi i16* [ %11, %5 ], [ %38, %14 ]
  %19 = bitcast i16* %18 to <16 x i16>*
  %20 = load <16 x i16>, <16 x i16>* %19, align 2
  %21 = zext <16 x i16> %20 to <16 x i32>
  %22 = bitcast i16* %17 to <16 x i16>*
  %23 = load <16 x i16>, <16 x i16>* %22, align 2
  %24 = zext <16 x i16> %23 to <16 x i32>
  %25 = sub nsw <16 x i32> %21, %24
  %26 = mul nsw <16 x i32> %25, %25
  %27 = zext <16 x i32> %26 to <16 x i64>
  %28 = shufflevector <16 x i64> %27, <16 x i64> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %29 = add <16 x i64> %28, %27
  %30 = shufflevector <16 x i64> %29, <16 x i64> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %31 = add <16 x i64> %29, %30
  %32 = shufflevector <16 x i64> %31, <16 x i64> undef, <16 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %33 = add <16 x i64> %31, %32
  %34 = shufflevector <16 x i64> %33, <16 x i64> undef, <16 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %35 = add <16 x i64> %33, %34
  %36 = extractelement <16 x i64> %35, i32 0
  %37 = add i64 %36, %15
  %38 = getelementptr inbounds i16, i16* %18, i64 %12
  %39 = getelementptr inbounds i16, i16* %17, i64 %13
  %40 = add nuw nsw i32 %16, 1
  %41 = icmp eq i32 %40, 16
  br i1 %41, label %42, label %14

42:                                               ; preds = %14
  %43 = trunc i64 %37 to i32
  store i32 %43, i32* %4, align 4
  ret i32 %43
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_highbd_10_mse16x16_c(i8*, i32, i8*, i32, i32* nocapture) local_unnamed_addr #2 {
  %6 = ptrtoint i8* %2 to i64
  %7 = shl i64 %6, 1
  %8 = inttoptr i64 %7 to i16*
  %9 = ptrtoint i8* %0 to i64
  %10 = shl i64 %9, 1
  %11 = inttoptr i64 %10 to i16*
  %12 = sext i32 %1 to i64
  %13 = sext i32 %3 to i64
  br label %14

14:                                               ; preds = %14, %5
  %15 = phi i64 [ 0, %5 ], [ %37, %14 ]
  %16 = phi i32 [ 0, %5 ], [ %40, %14 ]
  %17 = phi i16* [ %8, %5 ], [ %39, %14 ]
  %18 = phi i16* [ %11, %5 ], [ %38, %14 ]
  %19 = bitcast i16* %18 to <16 x i16>*
  %20 = load <16 x i16>, <16 x i16>* %19, align 2
  %21 = zext <16 x i16> %20 to <16 x i32>
  %22 = bitcast i16* %17 to <16 x i16>*
  %23 = load <16 x i16>, <16 x i16>* %22, align 2
  %24 = zext <16 x i16> %23 to <16 x i32>
  %25 = sub nsw <16 x i32> %21, %24
  %26 = mul nsw <16 x i32> %25, %25
  %27 = zext <16 x i32> %26 to <16 x i64>
  %28 = shufflevector <16 x i64> %27, <16 x i64> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %29 = add <16 x i64> %28, %27
  %30 = shufflevector <16 x i64> %29, <16 x i64> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %31 = add <16 x i64> %29, %30
  %32 = shufflevector <16 x i64> %31, <16 x i64> undef, <16 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %33 = add <16 x i64> %31, %32
  %34 = shufflevector <16 x i64> %33, <16 x i64> undef, <16 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %35 = add <16 x i64> %33, %34
  %36 = extractelement <16 x i64> %35, i32 0
  %37 = add i64 %36, %15
  %38 = getelementptr inbounds i16, i16* %18, i64 %12
  %39 = getelementptr inbounds i16, i16* %17, i64 %13
  %40 = add nuw nsw i32 %16, 1
  %41 = icmp eq i32 %40, 16
  br i1 %41, label %42, label %14

42:                                               ; preds = %14
  %43 = add i64 %37, 8
  %44 = lshr i64 %43, 4
  %45 = trunc i64 %44 to i32
  store i32 %45, i32* %4, align 4
  ret i32 %45
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_highbd_12_mse16x16_c(i8*, i32, i8*, i32, i32* nocapture) local_unnamed_addr #2 {
  %6 = ptrtoint i8* %2 to i64
  %7 = shl i64 %6, 1
  %8 = inttoptr i64 %7 to i16*
  %9 = ptrtoint i8* %0 to i64
  %10 = shl i64 %9, 1
  %11 = inttoptr i64 %10 to i16*
  %12 = sext i32 %1 to i64
  %13 = sext i32 %3 to i64
  br label %14

14:                                               ; preds = %14, %5
  %15 = phi i64 [ 0, %5 ], [ %37, %14 ]
  %16 = phi i32 [ 0, %5 ], [ %40, %14 ]
  %17 = phi i16* [ %8, %5 ], [ %39, %14 ]
  %18 = phi i16* [ %11, %5 ], [ %38, %14 ]
  %19 = bitcast i16* %18 to <16 x i16>*
  %20 = load <16 x i16>, <16 x i16>* %19, align 2
  %21 = zext <16 x i16> %20 to <16 x i32>
  %22 = bitcast i16* %17 to <16 x i16>*
  %23 = load <16 x i16>, <16 x i16>* %22, align 2
  %24 = zext <16 x i16> %23 to <16 x i32>
  %25 = sub nsw <16 x i32> %21, %24
  %26 = mul nsw <16 x i32> %25, %25
  %27 = zext <16 x i32> %26 to <16 x i64>
  %28 = shufflevector <16 x i64> %27, <16 x i64> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %29 = add <16 x i64> %28, %27
  %30 = shufflevector <16 x i64> %29, <16 x i64> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %31 = add <16 x i64> %29, %30
  %32 = shufflevector <16 x i64> %31, <16 x i64> undef, <16 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %33 = add <16 x i64> %31, %32
  %34 = shufflevector <16 x i64> %33, <16 x i64> undef, <16 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %35 = add <16 x i64> %33, %34
  %36 = extractelement <16 x i64> %35, i32 0
  %37 = add i64 %36, %15
  %38 = getelementptr inbounds i16, i16* %18, i64 %12
  %39 = getelementptr inbounds i16, i16* %17, i64 %13
  %40 = add nuw nsw i32 %16, 1
  %41 = icmp eq i32 %40, 16
  br i1 %41, label %42, label %14

42:                                               ; preds = %14
  %43 = add i64 %37, 128
  %44 = lshr i64 %43, 8
  %45 = trunc i64 %44 to i32
  store i32 %45, i32* %4, align 4
  ret i32 %45
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_highbd_8_mse16x8_c(i8*, i32, i8*, i32, i32* nocapture) local_unnamed_addr #2 {
  %6 = ptrtoint i8* %2 to i64
  %7 = shl i64 %6, 1
  %8 = ptrtoint i8* %0 to i64
  %9 = shl i64 %8, 1
  %10 = sext i32 %1 to i64
  %11 = sext i32 %3 to i64
  %12 = inttoptr i64 %7 to i16*
  %13 = inttoptr i64 %9 to i16*
  %14 = inttoptr i64 %9 to <16 x i16>*
  %15 = load <16 x i16>, <16 x i16>* %14, align 2
  %16 = zext <16 x i16> %15 to <16 x i32>
  %17 = inttoptr i64 %7 to <16 x i16>*
  %18 = load <16 x i16>, <16 x i16>* %17, align 2
  %19 = zext <16 x i16> %18 to <16 x i32>
  %20 = sub nsw <16 x i32> %16, %19
  %21 = mul nsw <16 x i32> %20, %20
  %22 = zext <16 x i32> %21 to <16 x i64>
  %23 = shufflevector <16 x i64> %22, <16 x i64> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %24 = add <16 x i64> %23, %22
  %25 = shufflevector <16 x i64> %24, <16 x i64> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %26 = add <16 x i64> %24, %25
  %27 = shufflevector <16 x i64> %26, <16 x i64> undef, <16 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %28 = add <16 x i64> %26, %27
  %29 = shufflevector <16 x i64> %28, <16 x i64> undef, <16 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %30 = add <16 x i64> %28, %29
  %31 = extractelement <16 x i64> %30, i32 0
  %32 = getelementptr inbounds i16, i16* %13, i64 %10
  %33 = getelementptr inbounds i16, i16* %12, i64 %11
  %34 = bitcast i16* %32 to <16 x i16>*
  %35 = load <16 x i16>, <16 x i16>* %34, align 2
  %36 = zext <16 x i16> %35 to <16 x i32>
  %37 = bitcast i16* %33 to <16 x i16>*
  %38 = load <16 x i16>, <16 x i16>* %37, align 2
  %39 = zext <16 x i16> %38 to <16 x i32>
  %40 = sub nsw <16 x i32> %36, %39
  %41 = mul nsw <16 x i32> %40, %40
  %42 = zext <16 x i32> %41 to <16 x i64>
  %43 = shufflevector <16 x i64> %42, <16 x i64> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %44 = add <16 x i64> %43, %42
  %45 = shufflevector <16 x i64> %44, <16 x i64> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %46 = add <16 x i64> %44, %45
  %47 = shufflevector <16 x i64> %46, <16 x i64> undef, <16 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %48 = add <16 x i64> %46, %47
  %49 = shufflevector <16 x i64> %48, <16 x i64> undef, <16 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %50 = add <16 x i64> %48, %49
  %51 = extractelement <16 x i64> %50, i32 0
  %52 = add i64 %51, %31
  %53 = getelementptr inbounds i16, i16* %32, i64 %10
  %54 = getelementptr inbounds i16, i16* %33, i64 %11
  %55 = bitcast i16* %53 to <16 x i16>*
  %56 = load <16 x i16>, <16 x i16>* %55, align 2
  %57 = zext <16 x i16> %56 to <16 x i32>
  %58 = bitcast i16* %54 to <16 x i16>*
  %59 = load <16 x i16>, <16 x i16>* %58, align 2
  %60 = zext <16 x i16> %59 to <16 x i32>
  %61 = sub nsw <16 x i32> %57, %60
  %62 = mul nsw <16 x i32> %61, %61
  %63 = zext <16 x i32> %62 to <16 x i64>
  %64 = shufflevector <16 x i64> %63, <16 x i64> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %65 = add <16 x i64> %64, %63
  %66 = shufflevector <16 x i64> %65, <16 x i64> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %67 = add <16 x i64> %65, %66
  %68 = shufflevector <16 x i64> %67, <16 x i64> undef, <16 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %69 = add <16 x i64> %67, %68
  %70 = shufflevector <16 x i64> %69, <16 x i64> undef, <16 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %71 = add <16 x i64> %69, %70
  %72 = extractelement <16 x i64> %71, i32 0
  %73 = add i64 %72, %52
  %74 = getelementptr inbounds i16, i16* %53, i64 %10
  %75 = getelementptr inbounds i16, i16* %54, i64 %11
  %76 = bitcast i16* %74 to <16 x i16>*
  %77 = load <16 x i16>, <16 x i16>* %76, align 2
  %78 = zext <16 x i16> %77 to <16 x i32>
  %79 = bitcast i16* %75 to <16 x i16>*
  %80 = load <16 x i16>, <16 x i16>* %79, align 2
  %81 = zext <16 x i16> %80 to <16 x i32>
  %82 = sub nsw <16 x i32> %78, %81
  %83 = mul nsw <16 x i32> %82, %82
  %84 = zext <16 x i32> %83 to <16 x i64>
  %85 = shufflevector <16 x i64> %84, <16 x i64> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %86 = add <16 x i64> %85, %84
  %87 = shufflevector <16 x i64> %86, <16 x i64> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %88 = add <16 x i64> %86, %87
  %89 = shufflevector <16 x i64> %88, <16 x i64> undef, <16 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %90 = add <16 x i64> %88, %89
  %91 = shufflevector <16 x i64> %90, <16 x i64> undef, <16 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %92 = add <16 x i64> %90, %91
  %93 = extractelement <16 x i64> %92, i32 0
  %94 = add i64 %93, %73
  %95 = getelementptr inbounds i16, i16* %74, i64 %10
  %96 = getelementptr inbounds i16, i16* %75, i64 %11
  %97 = bitcast i16* %95 to <16 x i16>*
  %98 = load <16 x i16>, <16 x i16>* %97, align 2
  %99 = zext <16 x i16> %98 to <16 x i32>
  %100 = bitcast i16* %96 to <16 x i16>*
  %101 = load <16 x i16>, <16 x i16>* %100, align 2
  %102 = zext <16 x i16> %101 to <16 x i32>
  %103 = sub nsw <16 x i32> %99, %102
  %104 = mul nsw <16 x i32> %103, %103
  %105 = zext <16 x i32> %104 to <16 x i64>
  %106 = shufflevector <16 x i64> %105, <16 x i64> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %107 = add <16 x i64> %106, %105
  %108 = shufflevector <16 x i64> %107, <16 x i64> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %109 = add <16 x i64> %107, %108
  %110 = shufflevector <16 x i64> %109, <16 x i64> undef, <16 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %111 = add <16 x i64> %109, %110
  %112 = shufflevector <16 x i64> %111, <16 x i64> undef, <16 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %113 = add <16 x i64> %111, %112
  %114 = extractelement <16 x i64> %113, i32 0
  %115 = add i64 %114, %94
  %116 = getelementptr inbounds i16, i16* %95, i64 %10
  %117 = getelementptr inbounds i16, i16* %96, i64 %11
  %118 = bitcast i16* %116 to <16 x i16>*
  %119 = load <16 x i16>, <16 x i16>* %118, align 2
  %120 = zext <16 x i16> %119 to <16 x i32>
  %121 = bitcast i16* %117 to <16 x i16>*
  %122 = load <16 x i16>, <16 x i16>* %121, align 2
  %123 = zext <16 x i16> %122 to <16 x i32>
  %124 = sub nsw <16 x i32> %120, %123
  %125 = mul nsw <16 x i32> %124, %124
  %126 = zext <16 x i32> %125 to <16 x i64>
  %127 = shufflevector <16 x i64> %126, <16 x i64> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %128 = add <16 x i64> %127, %126
  %129 = shufflevector <16 x i64> %128, <16 x i64> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %130 = add <16 x i64> %128, %129
  %131 = shufflevector <16 x i64> %130, <16 x i64> undef, <16 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %132 = add <16 x i64> %130, %131
  %133 = shufflevector <16 x i64> %132, <16 x i64> undef, <16 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %134 = add <16 x i64> %132, %133
  %135 = extractelement <16 x i64> %134, i32 0
  %136 = add i64 %135, %115
  %137 = getelementptr inbounds i16, i16* %116, i64 %10
  %138 = getelementptr inbounds i16, i16* %117, i64 %11
  %139 = bitcast i16* %137 to <16 x i16>*
  %140 = load <16 x i16>, <16 x i16>* %139, align 2
  %141 = zext <16 x i16> %140 to <16 x i32>
  %142 = bitcast i16* %138 to <16 x i16>*
  %143 = load <16 x i16>, <16 x i16>* %142, align 2
  %144 = zext <16 x i16> %143 to <16 x i32>
  %145 = sub nsw <16 x i32> %141, %144
  %146 = mul nsw <16 x i32> %145, %145
  %147 = zext <16 x i32> %146 to <16 x i64>
  %148 = shufflevector <16 x i64> %147, <16 x i64> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %149 = add <16 x i64> %148, %147
  %150 = shufflevector <16 x i64> %149, <16 x i64> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %151 = add <16 x i64> %149, %150
  %152 = shufflevector <16 x i64> %151, <16 x i64> undef, <16 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %153 = add <16 x i64> %151, %152
  %154 = shufflevector <16 x i64> %153, <16 x i64> undef, <16 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %155 = add <16 x i64> %153, %154
  %156 = extractelement <16 x i64> %155, i32 0
  %157 = add i64 %156, %136
  %158 = getelementptr inbounds i16, i16* %137, i64 %10
  %159 = getelementptr inbounds i16, i16* %138, i64 %11
  %160 = bitcast i16* %158 to <16 x i16>*
  %161 = load <16 x i16>, <16 x i16>* %160, align 2
  %162 = zext <16 x i16> %161 to <16 x i32>
  %163 = bitcast i16* %159 to <16 x i16>*
  %164 = load <16 x i16>, <16 x i16>* %163, align 2
  %165 = zext <16 x i16> %164 to <16 x i32>
  %166 = sub nsw <16 x i32> %162, %165
  %167 = mul nsw <16 x i32> %166, %166
  %168 = zext <16 x i32> %167 to <16 x i64>
  %169 = shufflevector <16 x i64> %168, <16 x i64> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %170 = add <16 x i64> %169, %168
  %171 = shufflevector <16 x i64> %170, <16 x i64> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %172 = add <16 x i64> %170, %171
  %173 = shufflevector <16 x i64> %172, <16 x i64> undef, <16 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %174 = add <16 x i64> %172, %173
  %175 = shufflevector <16 x i64> %174, <16 x i64> undef, <16 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %176 = add <16 x i64> %174, %175
  %177 = extractelement <16 x i64> %176, i32 0
  %178 = add i64 %177, %157
  %179 = trunc i64 %178 to i32
  store i32 %179, i32* %4, align 4
  ret i32 %179
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_highbd_10_mse16x8_c(i8*, i32, i8*, i32, i32* nocapture) local_unnamed_addr #2 {
  %6 = ptrtoint i8* %2 to i64
  %7 = shl i64 %6, 1
  %8 = ptrtoint i8* %0 to i64
  %9 = shl i64 %8, 1
  %10 = sext i32 %1 to i64
  %11 = sext i32 %3 to i64
  %12 = inttoptr i64 %7 to i16*
  %13 = inttoptr i64 %9 to i16*
  %14 = inttoptr i64 %9 to <16 x i16>*
  %15 = load <16 x i16>, <16 x i16>* %14, align 2
  %16 = zext <16 x i16> %15 to <16 x i32>
  %17 = inttoptr i64 %7 to <16 x i16>*
  %18 = load <16 x i16>, <16 x i16>* %17, align 2
  %19 = zext <16 x i16> %18 to <16 x i32>
  %20 = sub nsw <16 x i32> %16, %19
  %21 = mul nsw <16 x i32> %20, %20
  %22 = zext <16 x i32> %21 to <16 x i64>
  %23 = shufflevector <16 x i64> %22, <16 x i64> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %24 = add <16 x i64> %23, %22
  %25 = shufflevector <16 x i64> %24, <16 x i64> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %26 = add <16 x i64> %24, %25
  %27 = shufflevector <16 x i64> %26, <16 x i64> undef, <16 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %28 = add <16 x i64> %26, %27
  %29 = shufflevector <16 x i64> %28, <16 x i64> undef, <16 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %30 = add <16 x i64> %28, %29
  %31 = extractelement <16 x i64> %30, i32 0
  %32 = getelementptr inbounds i16, i16* %13, i64 %10
  %33 = getelementptr inbounds i16, i16* %12, i64 %11
  %34 = bitcast i16* %32 to <16 x i16>*
  %35 = load <16 x i16>, <16 x i16>* %34, align 2
  %36 = zext <16 x i16> %35 to <16 x i32>
  %37 = bitcast i16* %33 to <16 x i16>*
  %38 = load <16 x i16>, <16 x i16>* %37, align 2
  %39 = zext <16 x i16> %38 to <16 x i32>
  %40 = sub nsw <16 x i32> %36, %39
  %41 = mul nsw <16 x i32> %40, %40
  %42 = zext <16 x i32> %41 to <16 x i64>
  %43 = shufflevector <16 x i64> %42, <16 x i64> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %44 = add <16 x i64> %43, %42
  %45 = shufflevector <16 x i64> %44, <16 x i64> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %46 = add <16 x i64> %44, %45
  %47 = shufflevector <16 x i64> %46, <16 x i64> undef, <16 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %48 = add <16 x i64> %46, %47
  %49 = shufflevector <16 x i64> %48, <16 x i64> undef, <16 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %50 = add <16 x i64> %48, %49
  %51 = extractelement <16 x i64> %50, i32 0
  %52 = add i64 %51, %31
  %53 = getelementptr inbounds i16, i16* %32, i64 %10
  %54 = getelementptr inbounds i16, i16* %33, i64 %11
  %55 = bitcast i16* %53 to <16 x i16>*
  %56 = load <16 x i16>, <16 x i16>* %55, align 2
  %57 = zext <16 x i16> %56 to <16 x i32>
  %58 = bitcast i16* %54 to <16 x i16>*
  %59 = load <16 x i16>, <16 x i16>* %58, align 2
  %60 = zext <16 x i16> %59 to <16 x i32>
  %61 = sub nsw <16 x i32> %57, %60
  %62 = mul nsw <16 x i32> %61, %61
  %63 = zext <16 x i32> %62 to <16 x i64>
  %64 = shufflevector <16 x i64> %63, <16 x i64> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %65 = add <16 x i64> %64, %63
  %66 = shufflevector <16 x i64> %65, <16 x i64> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %67 = add <16 x i64> %65, %66
  %68 = shufflevector <16 x i64> %67, <16 x i64> undef, <16 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %69 = add <16 x i64> %67, %68
  %70 = shufflevector <16 x i64> %69, <16 x i64> undef, <16 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %71 = add <16 x i64> %69, %70
  %72 = extractelement <16 x i64> %71, i32 0
  %73 = add i64 %72, %52
  %74 = getelementptr inbounds i16, i16* %53, i64 %10
  %75 = getelementptr inbounds i16, i16* %54, i64 %11
  %76 = bitcast i16* %74 to <16 x i16>*
  %77 = load <16 x i16>, <16 x i16>* %76, align 2
  %78 = zext <16 x i16> %77 to <16 x i32>
  %79 = bitcast i16* %75 to <16 x i16>*
  %80 = load <16 x i16>, <16 x i16>* %79, align 2
  %81 = zext <16 x i16> %80 to <16 x i32>
  %82 = sub nsw <16 x i32> %78, %81
  %83 = mul nsw <16 x i32> %82, %82
  %84 = zext <16 x i32> %83 to <16 x i64>
  %85 = shufflevector <16 x i64> %84, <16 x i64> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %86 = add <16 x i64> %85, %84
  %87 = shufflevector <16 x i64> %86, <16 x i64> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %88 = add <16 x i64> %86, %87
  %89 = shufflevector <16 x i64> %88, <16 x i64> undef, <16 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %90 = add <16 x i64> %88, %89
  %91 = shufflevector <16 x i64> %90, <16 x i64> undef, <16 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %92 = add <16 x i64> %90, %91
  %93 = extractelement <16 x i64> %92, i32 0
  %94 = add i64 %93, %73
  %95 = getelementptr inbounds i16, i16* %74, i64 %10
  %96 = getelementptr inbounds i16, i16* %75, i64 %11
  %97 = bitcast i16* %95 to <16 x i16>*
  %98 = load <16 x i16>, <16 x i16>* %97, align 2
  %99 = zext <16 x i16> %98 to <16 x i32>
  %100 = bitcast i16* %96 to <16 x i16>*
  %101 = load <16 x i16>, <16 x i16>* %100, align 2
  %102 = zext <16 x i16> %101 to <16 x i32>
  %103 = sub nsw <16 x i32> %99, %102
  %104 = mul nsw <16 x i32> %103, %103
  %105 = zext <16 x i32> %104 to <16 x i64>
  %106 = shufflevector <16 x i64> %105, <16 x i64> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %107 = add <16 x i64> %106, %105
  %108 = shufflevector <16 x i64> %107, <16 x i64> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %109 = add <16 x i64> %107, %108
  %110 = shufflevector <16 x i64> %109, <16 x i64> undef, <16 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %111 = add <16 x i64> %109, %110
  %112 = shufflevector <16 x i64> %111, <16 x i64> undef, <16 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %113 = add <16 x i64> %111, %112
  %114 = extractelement <16 x i64> %113, i32 0
  %115 = add i64 %114, %94
  %116 = getelementptr inbounds i16, i16* %95, i64 %10
  %117 = getelementptr inbounds i16, i16* %96, i64 %11
  %118 = bitcast i16* %116 to <16 x i16>*
  %119 = load <16 x i16>, <16 x i16>* %118, align 2
  %120 = zext <16 x i16> %119 to <16 x i32>
  %121 = bitcast i16* %117 to <16 x i16>*
  %122 = load <16 x i16>, <16 x i16>* %121, align 2
  %123 = zext <16 x i16> %122 to <16 x i32>
  %124 = sub nsw <16 x i32> %120, %123
  %125 = mul nsw <16 x i32> %124, %124
  %126 = zext <16 x i32> %125 to <16 x i64>
  %127 = shufflevector <16 x i64> %126, <16 x i64> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %128 = add <16 x i64> %127, %126
  %129 = shufflevector <16 x i64> %128, <16 x i64> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %130 = add <16 x i64> %128, %129
  %131 = shufflevector <16 x i64> %130, <16 x i64> undef, <16 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %132 = add <16 x i64> %130, %131
  %133 = shufflevector <16 x i64> %132, <16 x i64> undef, <16 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %134 = add <16 x i64> %132, %133
  %135 = extractelement <16 x i64> %134, i32 0
  %136 = add i64 %135, %115
  %137 = getelementptr inbounds i16, i16* %116, i64 %10
  %138 = getelementptr inbounds i16, i16* %117, i64 %11
  %139 = bitcast i16* %137 to <16 x i16>*
  %140 = load <16 x i16>, <16 x i16>* %139, align 2
  %141 = zext <16 x i16> %140 to <16 x i32>
  %142 = bitcast i16* %138 to <16 x i16>*
  %143 = load <16 x i16>, <16 x i16>* %142, align 2
  %144 = zext <16 x i16> %143 to <16 x i32>
  %145 = sub nsw <16 x i32> %141, %144
  %146 = mul nsw <16 x i32> %145, %145
  %147 = zext <16 x i32> %146 to <16 x i64>
  %148 = shufflevector <16 x i64> %147, <16 x i64> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %149 = add <16 x i64> %148, %147
  %150 = shufflevector <16 x i64> %149, <16 x i64> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %151 = add <16 x i64> %149, %150
  %152 = shufflevector <16 x i64> %151, <16 x i64> undef, <16 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %153 = add <16 x i64> %151, %152
  %154 = shufflevector <16 x i64> %153, <16 x i64> undef, <16 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %155 = add <16 x i64> %153, %154
  %156 = extractelement <16 x i64> %155, i32 0
  %157 = add i64 %156, %136
  %158 = getelementptr inbounds i16, i16* %137, i64 %10
  %159 = getelementptr inbounds i16, i16* %138, i64 %11
  %160 = bitcast i16* %158 to <16 x i16>*
  %161 = load <16 x i16>, <16 x i16>* %160, align 2
  %162 = zext <16 x i16> %161 to <16 x i32>
  %163 = bitcast i16* %159 to <16 x i16>*
  %164 = load <16 x i16>, <16 x i16>* %163, align 2
  %165 = zext <16 x i16> %164 to <16 x i32>
  %166 = sub nsw <16 x i32> %162, %165
  %167 = mul nsw <16 x i32> %166, %166
  %168 = zext <16 x i32> %167 to <16 x i64>
  %169 = shufflevector <16 x i64> %168, <16 x i64> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %170 = add <16 x i64> %169, %168
  %171 = shufflevector <16 x i64> %170, <16 x i64> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %172 = add <16 x i64> %170, %171
  %173 = shufflevector <16 x i64> %172, <16 x i64> undef, <16 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %174 = add <16 x i64> %172, %173
  %175 = shufflevector <16 x i64> %174, <16 x i64> undef, <16 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %176 = add <16 x i64> %174, %175
  %177 = extractelement <16 x i64> %176, i32 0
  %178 = add i64 %177, %157
  %179 = add i64 %178, 8
  %180 = lshr i64 %179, 4
  %181 = trunc i64 %180 to i32
  store i32 %181, i32* %4, align 4
  ret i32 %181
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_highbd_12_mse16x8_c(i8*, i32, i8*, i32, i32* nocapture) local_unnamed_addr #2 {
  %6 = ptrtoint i8* %2 to i64
  %7 = shl i64 %6, 1
  %8 = ptrtoint i8* %0 to i64
  %9 = shl i64 %8, 1
  %10 = sext i32 %1 to i64
  %11 = sext i32 %3 to i64
  %12 = inttoptr i64 %7 to i16*
  %13 = inttoptr i64 %9 to i16*
  %14 = inttoptr i64 %9 to <16 x i16>*
  %15 = load <16 x i16>, <16 x i16>* %14, align 2
  %16 = zext <16 x i16> %15 to <16 x i32>
  %17 = inttoptr i64 %7 to <16 x i16>*
  %18 = load <16 x i16>, <16 x i16>* %17, align 2
  %19 = zext <16 x i16> %18 to <16 x i32>
  %20 = sub nsw <16 x i32> %16, %19
  %21 = mul nsw <16 x i32> %20, %20
  %22 = zext <16 x i32> %21 to <16 x i64>
  %23 = shufflevector <16 x i64> %22, <16 x i64> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %24 = add <16 x i64> %23, %22
  %25 = shufflevector <16 x i64> %24, <16 x i64> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %26 = add <16 x i64> %24, %25
  %27 = shufflevector <16 x i64> %26, <16 x i64> undef, <16 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %28 = add <16 x i64> %26, %27
  %29 = shufflevector <16 x i64> %28, <16 x i64> undef, <16 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %30 = add <16 x i64> %28, %29
  %31 = extractelement <16 x i64> %30, i32 0
  %32 = getelementptr inbounds i16, i16* %13, i64 %10
  %33 = getelementptr inbounds i16, i16* %12, i64 %11
  %34 = bitcast i16* %32 to <16 x i16>*
  %35 = load <16 x i16>, <16 x i16>* %34, align 2
  %36 = zext <16 x i16> %35 to <16 x i32>
  %37 = bitcast i16* %33 to <16 x i16>*
  %38 = load <16 x i16>, <16 x i16>* %37, align 2
  %39 = zext <16 x i16> %38 to <16 x i32>
  %40 = sub nsw <16 x i32> %36, %39
  %41 = mul nsw <16 x i32> %40, %40
  %42 = zext <16 x i32> %41 to <16 x i64>
  %43 = shufflevector <16 x i64> %42, <16 x i64> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %44 = add <16 x i64> %43, %42
  %45 = shufflevector <16 x i64> %44, <16 x i64> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %46 = add <16 x i64> %44, %45
  %47 = shufflevector <16 x i64> %46, <16 x i64> undef, <16 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %48 = add <16 x i64> %46, %47
  %49 = shufflevector <16 x i64> %48, <16 x i64> undef, <16 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %50 = add <16 x i64> %48, %49
  %51 = extractelement <16 x i64> %50, i32 0
  %52 = add i64 %51, %31
  %53 = getelementptr inbounds i16, i16* %32, i64 %10
  %54 = getelementptr inbounds i16, i16* %33, i64 %11
  %55 = bitcast i16* %53 to <16 x i16>*
  %56 = load <16 x i16>, <16 x i16>* %55, align 2
  %57 = zext <16 x i16> %56 to <16 x i32>
  %58 = bitcast i16* %54 to <16 x i16>*
  %59 = load <16 x i16>, <16 x i16>* %58, align 2
  %60 = zext <16 x i16> %59 to <16 x i32>
  %61 = sub nsw <16 x i32> %57, %60
  %62 = mul nsw <16 x i32> %61, %61
  %63 = zext <16 x i32> %62 to <16 x i64>
  %64 = shufflevector <16 x i64> %63, <16 x i64> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %65 = add <16 x i64> %64, %63
  %66 = shufflevector <16 x i64> %65, <16 x i64> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %67 = add <16 x i64> %65, %66
  %68 = shufflevector <16 x i64> %67, <16 x i64> undef, <16 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %69 = add <16 x i64> %67, %68
  %70 = shufflevector <16 x i64> %69, <16 x i64> undef, <16 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %71 = add <16 x i64> %69, %70
  %72 = extractelement <16 x i64> %71, i32 0
  %73 = add i64 %72, %52
  %74 = getelementptr inbounds i16, i16* %53, i64 %10
  %75 = getelementptr inbounds i16, i16* %54, i64 %11
  %76 = bitcast i16* %74 to <16 x i16>*
  %77 = load <16 x i16>, <16 x i16>* %76, align 2
  %78 = zext <16 x i16> %77 to <16 x i32>
  %79 = bitcast i16* %75 to <16 x i16>*
  %80 = load <16 x i16>, <16 x i16>* %79, align 2
  %81 = zext <16 x i16> %80 to <16 x i32>
  %82 = sub nsw <16 x i32> %78, %81
  %83 = mul nsw <16 x i32> %82, %82
  %84 = zext <16 x i32> %83 to <16 x i64>
  %85 = shufflevector <16 x i64> %84, <16 x i64> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %86 = add <16 x i64> %85, %84
  %87 = shufflevector <16 x i64> %86, <16 x i64> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %88 = add <16 x i64> %86, %87
  %89 = shufflevector <16 x i64> %88, <16 x i64> undef, <16 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %90 = add <16 x i64> %88, %89
  %91 = shufflevector <16 x i64> %90, <16 x i64> undef, <16 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %92 = add <16 x i64> %90, %91
  %93 = extractelement <16 x i64> %92, i32 0
  %94 = add i64 %93, %73
  %95 = getelementptr inbounds i16, i16* %74, i64 %10
  %96 = getelementptr inbounds i16, i16* %75, i64 %11
  %97 = bitcast i16* %95 to <16 x i16>*
  %98 = load <16 x i16>, <16 x i16>* %97, align 2
  %99 = zext <16 x i16> %98 to <16 x i32>
  %100 = bitcast i16* %96 to <16 x i16>*
  %101 = load <16 x i16>, <16 x i16>* %100, align 2
  %102 = zext <16 x i16> %101 to <16 x i32>
  %103 = sub nsw <16 x i32> %99, %102
  %104 = mul nsw <16 x i32> %103, %103
  %105 = zext <16 x i32> %104 to <16 x i64>
  %106 = shufflevector <16 x i64> %105, <16 x i64> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %107 = add <16 x i64> %106, %105
  %108 = shufflevector <16 x i64> %107, <16 x i64> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %109 = add <16 x i64> %107, %108
  %110 = shufflevector <16 x i64> %109, <16 x i64> undef, <16 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %111 = add <16 x i64> %109, %110
  %112 = shufflevector <16 x i64> %111, <16 x i64> undef, <16 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %113 = add <16 x i64> %111, %112
  %114 = extractelement <16 x i64> %113, i32 0
  %115 = add i64 %114, %94
  %116 = getelementptr inbounds i16, i16* %95, i64 %10
  %117 = getelementptr inbounds i16, i16* %96, i64 %11
  %118 = bitcast i16* %116 to <16 x i16>*
  %119 = load <16 x i16>, <16 x i16>* %118, align 2
  %120 = zext <16 x i16> %119 to <16 x i32>
  %121 = bitcast i16* %117 to <16 x i16>*
  %122 = load <16 x i16>, <16 x i16>* %121, align 2
  %123 = zext <16 x i16> %122 to <16 x i32>
  %124 = sub nsw <16 x i32> %120, %123
  %125 = mul nsw <16 x i32> %124, %124
  %126 = zext <16 x i32> %125 to <16 x i64>
  %127 = shufflevector <16 x i64> %126, <16 x i64> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %128 = add <16 x i64> %127, %126
  %129 = shufflevector <16 x i64> %128, <16 x i64> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %130 = add <16 x i64> %128, %129
  %131 = shufflevector <16 x i64> %130, <16 x i64> undef, <16 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %132 = add <16 x i64> %130, %131
  %133 = shufflevector <16 x i64> %132, <16 x i64> undef, <16 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %134 = add <16 x i64> %132, %133
  %135 = extractelement <16 x i64> %134, i32 0
  %136 = add i64 %135, %115
  %137 = getelementptr inbounds i16, i16* %116, i64 %10
  %138 = getelementptr inbounds i16, i16* %117, i64 %11
  %139 = bitcast i16* %137 to <16 x i16>*
  %140 = load <16 x i16>, <16 x i16>* %139, align 2
  %141 = zext <16 x i16> %140 to <16 x i32>
  %142 = bitcast i16* %138 to <16 x i16>*
  %143 = load <16 x i16>, <16 x i16>* %142, align 2
  %144 = zext <16 x i16> %143 to <16 x i32>
  %145 = sub nsw <16 x i32> %141, %144
  %146 = mul nsw <16 x i32> %145, %145
  %147 = zext <16 x i32> %146 to <16 x i64>
  %148 = shufflevector <16 x i64> %147, <16 x i64> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %149 = add <16 x i64> %148, %147
  %150 = shufflevector <16 x i64> %149, <16 x i64> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %151 = add <16 x i64> %149, %150
  %152 = shufflevector <16 x i64> %151, <16 x i64> undef, <16 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %153 = add <16 x i64> %151, %152
  %154 = shufflevector <16 x i64> %153, <16 x i64> undef, <16 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %155 = add <16 x i64> %153, %154
  %156 = extractelement <16 x i64> %155, i32 0
  %157 = add i64 %156, %136
  %158 = getelementptr inbounds i16, i16* %137, i64 %10
  %159 = getelementptr inbounds i16, i16* %138, i64 %11
  %160 = bitcast i16* %158 to <16 x i16>*
  %161 = load <16 x i16>, <16 x i16>* %160, align 2
  %162 = zext <16 x i16> %161 to <16 x i32>
  %163 = bitcast i16* %159 to <16 x i16>*
  %164 = load <16 x i16>, <16 x i16>* %163, align 2
  %165 = zext <16 x i16> %164 to <16 x i32>
  %166 = sub nsw <16 x i32> %162, %165
  %167 = mul nsw <16 x i32> %166, %166
  %168 = zext <16 x i32> %167 to <16 x i64>
  %169 = shufflevector <16 x i64> %168, <16 x i64> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %170 = add <16 x i64> %169, %168
  %171 = shufflevector <16 x i64> %170, <16 x i64> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %172 = add <16 x i64> %170, %171
  %173 = shufflevector <16 x i64> %172, <16 x i64> undef, <16 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %174 = add <16 x i64> %172, %173
  %175 = shufflevector <16 x i64> %174, <16 x i64> undef, <16 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %176 = add <16 x i64> %174, %175
  %177 = extractelement <16 x i64> %176, i32 0
  %178 = add i64 %177, %157
  %179 = add i64 %178, 128
  %180 = lshr i64 %179, 8
  %181 = trunc i64 %180 to i32
  store i32 %181, i32* %4, align 4
  ret i32 %181
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_highbd_8_mse8x16_c(i8*, i32, i8*, i32, i32* nocapture) local_unnamed_addr #2 {
  %6 = ptrtoint i8* %2 to i64
  %7 = shl i64 %6, 1
  %8 = inttoptr i64 %7 to i16*
  %9 = ptrtoint i8* %0 to i64
  %10 = shl i64 %9, 1
  %11 = inttoptr i64 %10 to i16*
  %12 = sext i32 %1 to i64
  %13 = sext i32 %3 to i64
  br label %14

14:                                               ; preds = %14, %5
  %15 = phi i64 [ 0, %5 ], [ %35, %14 ]
  %16 = phi i32 [ 0, %5 ], [ %38, %14 ]
  %17 = phi i16* [ %8, %5 ], [ %37, %14 ]
  %18 = phi i16* [ %11, %5 ], [ %36, %14 ]
  %19 = bitcast i16* %18 to <8 x i16>*
  %20 = load <8 x i16>, <8 x i16>* %19, align 2
  %21 = zext <8 x i16> %20 to <8 x i32>
  %22 = bitcast i16* %17 to <8 x i16>*
  %23 = load <8 x i16>, <8 x i16>* %22, align 2
  %24 = zext <8 x i16> %23 to <8 x i32>
  %25 = sub nsw <8 x i32> %21, %24
  %26 = mul nsw <8 x i32> %25, %25
  %27 = zext <8 x i32> %26 to <8 x i64>
  %28 = shufflevector <8 x i64> %27, <8 x i64> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %29 = add <8 x i64> %28, %27
  %30 = shufflevector <8 x i64> %29, <8 x i64> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %31 = add <8 x i64> %29, %30
  %32 = shufflevector <8 x i64> %31, <8 x i64> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %33 = add <8 x i64> %31, %32
  %34 = extractelement <8 x i64> %33, i32 0
  %35 = add i64 %34, %15
  %36 = getelementptr inbounds i16, i16* %18, i64 %12
  %37 = getelementptr inbounds i16, i16* %17, i64 %13
  %38 = add nuw nsw i32 %16, 1
  %39 = icmp eq i32 %38, 16
  br i1 %39, label %40, label %14

40:                                               ; preds = %14
  %41 = trunc i64 %35 to i32
  store i32 %41, i32* %4, align 4
  ret i32 %41
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_highbd_10_mse8x16_c(i8*, i32, i8*, i32, i32* nocapture) local_unnamed_addr #2 {
  %6 = ptrtoint i8* %2 to i64
  %7 = shl i64 %6, 1
  %8 = inttoptr i64 %7 to i16*
  %9 = ptrtoint i8* %0 to i64
  %10 = shl i64 %9, 1
  %11 = inttoptr i64 %10 to i16*
  %12 = sext i32 %1 to i64
  %13 = sext i32 %3 to i64
  br label %14

14:                                               ; preds = %14, %5
  %15 = phi i64 [ 0, %5 ], [ %35, %14 ]
  %16 = phi i32 [ 0, %5 ], [ %38, %14 ]
  %17 = phi i16* [ %8, %5 ], [ %37, %14 ]
  %18 = phi i16* [ %11, %5 ], [ %36, %14 ]
  %19 = bitcast i16* %18 to <8 x i16>*
  %20 = load <8 x i16>, <8 x i16>* %19, align 2
  %21 = zext <8 x i16> %20 to <8 x i32>
  %22 = bitcast i16* %17 to <8 x i16>*
  %23 = load <8 x i16>, <8 x i16>* %22, align 2
  %24 = zext <8 x i16> %23 to <8 x i32>
  %25 = sub nsw <8 x i32> %21, %24
  %26 = mul nsw <8 x i32> %25, %25
  %27 = zext <8 x i32> %26 to <8 x i64>
  %28 = shufflevector <8 x i64> %27, <8 x i64> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %29 = add <8 x i64> %28, %27
  %30 = shufflevector <8 x i64> %29, <8 x i64> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %31 = add <8 x i64> %29, %30
  %32 = shufflevector <8 x i64> %31, <8 x i64> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %33 = add <8 x i64> %31, %32
  %34 = extractelement <8 x i64> %33, i32 0
  %35 = add i64 %34, %15
  %36 = getelementptr inbounds i16, i16* %18, i64 %12
  %37 = getelementptr inbounds i16, i16* %17, i64 %13
  %38 = add nuw nsw i32 %16, 1
  %39 = icmp eq i32 %38, 16
  br i1 %39, label %40, label %14

40:                                               ; preds = %14
  %41 = add i64 %35, 8
  %42 = lshr i64 %41, 4
  %43 = trunc i64 %42 to i32
  store i32 %43, i32* %4, align 4
  ret i32 %43
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_highbd_12_mse8x16_c(i8*, i32, i8*, i32, i32* nocapture) local_unnamed_addr #2 {
  %6 = ptrtoint i8* %2 to i64
  %7 = shl i64 %6, 1
  %8 = inttoptr i64 %7 to i16*
  %9 = ptrtoint i8* %0 to i64
  %10 = shl i64 %9, 1
  %11 = inttoptr i64 %10 to i16*
  %12 = sext i32 %1 to i64
  %13 = sext i32 %3 to i64
  br label %14

14:                                               ; preds = %14, %5
  %15 = phi i64 [ 0, %5 ], [ %35, %14 ]
  %16 = phi i32 [ 0, %5 ], [ %38, %14 ]
  %17 = phi i16* [ %8, %5 ], [ %37, %14 ]
  %18 = phi i16* [ %11, %5 ], [ %36, %14 ]
  %19 = bitcast i16* %18 to <8 x i16>*
  %20 = load <8 x i16>, <8 x i16>* %19, align 2
  %21 = zext <8 x i16> %20 to <8 x i32>
  %22 = bitcast i16* %17 to <8 x i16>*
  %23 = load <8 x i16>, <8 x i16>* %22, align 2
  %24 = zext <8 x i16> %23 to <8 x i32>
  %25 = sub nsw <8 x i32> %21, %24
  %26 = mul nsw <8 x i32> %25, %25
  %27 = zext <8 x i32> %26 to <8 x i64>
  %28 = shufflevector <8 x i64> %27, <8 x i64> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %29 = add <8 x i64> %28, %27
  %30 = shufflevector <8 x i64> %29, <8 x i64> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %31 = add <8 x i64> %29, %30
  %32 = shufflevector <8 x i64> %31, <8 x i64> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %33 = add <8 x i64> %31, %32
  %34 = extractelement <8 x i64> %33, i32 0
  %35 = add i64 %34, %15
  %36 = getelementptr inbounds i16, i16* %18, i64 %12
  %37 = getelementptr inbounds i16, i16* %17, i64 %13
  %38 = add nuw nsw i32 %16, 1
  %39 = icmp eq i32 %38, 16
  br i1 %39, label %40, label %14

40:                                               ; preds = %14
  %41 = add i64 %35, 128
  %42 = lshr i64 %41, 8
  %43 = trunc i64 %42 to i32
  store i32 %43, i32* %4, align 4
  ret i32 %43
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_highbd_8_mse8x8_c(i8*, i32, i8*, i32, i32* nocapture) local_unnamed_addr #2 {
  %6 = ptrtoint i8* %2 to i64
  %7 = shl i64 %6, 1
  %8 = ptrtoint i8* %0 to i64
  %9 = shl i64 %8, 1
  %10 = sext i32 %1 to i64
  %11 = sext i32 %3 to i64
  %12 = inttoptr i64 %7 to i16*
  %13 = inttoptr i64 %9 to i16*
  %14 = inttoptr i64 %9 to <8 x i16>*
  %15 = load <8 x i16>, <8 x i16>* %14, align 2
  %16 = zext <8 x i16> %15 to <8 x i32>
  %17 = inttoptr i64 %7 to <8 x i16>*
  %18 = load <8 x i16>, <8 x i16>* %17, align 2
  %19 = zext <8 x i16> %18 to <8 x i32>
  %20 = sub nsw <8 x i32> %16, %19
  %21 = mul nsw <8 x i32> %20, %20
  %22 = zext <8 x i32> %21 to <8 x i64>
  %23 = shufflevector <8 x i64> %22, <8 x i64> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %24 = add <8 x i64> %23, %22
  %25 = shufflevector <8 x i64> %24, <8 x i64> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %26 = add <8 x i64> %24, %25
  %27 = shufflevector <8 x i64> %26, <8 x i64> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %28 = add <8 x i64> %26, %27
  %29 = extractelement <8 x i64> %28, i32 0
  %30 = getelementptr inbounds i16, i16* %13, i64 %10
  %31 = getelementptr inbounds i16, i16* %12, i64 %11
  %32 = bitcast i16* %30 to <8 x i16>*
  %33 = load <8 x i16>, <8 x i16>* %32, align 2
  %34 = zext <8 x i16> %33 to <8 x i32>
  %35 = bitcast i16* %31 to <8 x i16>*
  %36 = load <8 x i16>, <8 x i16>* %35, align 2
  %37 = zext <8 x i16> %36 to <8 x i32>
  %38 = sub nsw <8 x i32> %34, %37
  %39 = mul nsw <8 x i32> %38, %38
  %40 = zext <8 x i32> %39 to <8 x i64>
  %41 = shufflevector <8 x i64> %40, <8 x i64> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %42 = add <8 x i64> %41, %40
  %43 = shufflevector <8 x i64> %42, <8 x i64> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %44 = add <8 x i64> %42, %43
  %45 = shufflevector <8 x i64> %44, <8 x i64> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %46 = add <8 x i64> %44, %45
  %47 = extractelement <8 x i64> %46, i32 0
  %48 = add i64 %47, %29
  %49 = getelementptr inbounds i16, i16* %30, i64 %10
  %50 = getelementptr inbounds i16, i16* %31, i64 %11
  %51 = bitcast i16* %49 to <8 x i16>*
  %52 = load <8 x i16>, <8 x i16>* %51, align 2
  %53 = zext <8 x i16> %52 to <8 x i32>
  %54 = bitcast i16* %50 to <8 x i16>*
  %55 = load <8 x i16>, <8 x i16>* %54, align 2
  %56 = zext <8 x i16> %55 to <8 x i32>
  %57 = sub nsw <8 x i32> %53, %56
  %58 = mul nsw <8 x i32> %57, %57
  %59 = zext <8 x i32> %58 to <8 x i64>
  %60 = shufflevector <8 x i64> %59, <8 x i64> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %61 = add <8 x i64> %60, %59
  %62 = shufflevector <8 x i64> %61, <8 x i64> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %63 = add <8 x i64> %61, %62
  %64 = shufflevector <8 x i64> %63, <8 x i64> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %65 = add <8 x i64> %63, %64
  %66 = extractelement <8 x i64> %65, i32 0
  %67 = add i64 %66, %48
  %68 = getelementptr inbounds i16, i16* %49, i64 %10
  %69 = getelementptr inbounds i16, i16* %50, i64 %11
  %70 = bitcast i16* %68 to <8 x i16>*
  %71 = load <8 x i16>, <8 x i16>* %70, align 2
  %72 = zext <8 x i16> %71 to <8 x i32>
  %73 = bitcast i16* %69 to <8 x i16>*
  %74 = load <8 x i16>, <8 x i16>* %73, align 2
  %75 = zext <8 x i16> %74 to <8 x i32>
  %76 = sub nsw <8 x i32> %72, %75
  %77 = mul nsw <8 x i32> %76, %76
  %78 = zext <8 x i32> %77 to <8 x i64>
  %79 = shufflevector <8 x i64> %78, <8 x i64> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %80 = add <8 x i64> %79, %78
  %81 = shufflevector <8 x i64> %80, <8 x i64> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %82 = add <8 x i64> %80, %81
  %83 = shufflevector <8 x i64> %82, <8 x i64> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %84 = add <8 x i64> %82, %83
  %85 = extractelement <8 x i64> %84, i32 0
  %86 = add i64 %85, %67
  %87 = getelementptr inbounds i16, i16* %68, i64 %10
  %88 = getelementptr inbounds i16, i16* %69, i64 %11
  %89 = bitcast i16* %87 to <8 x i16>*
  %90 = load <8 x i16>, <8 x i16>* %89, align 2
  %91 = zext <8 x i16> %90 to <8 x i32>
  %92 = bitcast i16* %88 to <8 x i16>*
  %93 = load <8 x i16>, <8 x i16>* %92, align 2
  %94 = zext <8 x i16> %93 to <8 x i32>
  %95 = sub nsw <8 x i32> %91, %94
  %96 = mul nsw <8 x i32> %95, %95
  %97 = zext <8 x i32> %96 to <8 x i64>
  %98 = shufflevector <8 x i64> %97, <8 x i64> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %99 = add <8 x i64> %98, %97
  %100 = shufflevector <8 x i64> %99, <8 x i64> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %101 = add <8 x i64> %99, %100
  %102 = shufflevector <8 x i64> %101, <8 x i64> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %103 = add <8 x i64> %101, %102
  %104 = extractelement <8 x i64> %103, i32 0
  %105 = add i64 %104, %86
  %106 = getelementptr inbounds i16, i16* %87, i64 %10
  %107 = getelementptr inbounds i16, i16* %88, i64 %11
  %108 = bitcast i16* %106 to <8 x i16>*
  %109 = load <8 x i16>, <8 x i16>* %108, align 2
  %110 = zext <8 x i16> %109 to <8 x i32>
  %111 = bitcast i16* %107 to <8 x i16>*
  %112 = load <8 x i16>, <8 x i16>* %111, align 2
  %113 = zext <8 x i16> %112 to <8 x i32>
  %114 = sub nsw <8 x i32> %110, %113
  %115 = mul nsw <8 x i32> %114, %114
  %116 = zext <8 x i32> %115 to <8 x i64>
  %117 = shufflevector <8 x i64> %116, <8 x i64> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %118 = add <8 x i64> %117, %116
  %119 = shufflevector <8 x i64> %118, <8 x i64> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %120 = add <8 x i64> %118, %119
  %121 = shufflevector <8 x i64> %120, <8 x i64> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %122 = add <8 x i64> %120, %121
  %123 = extractelement <8 x i64> %122, i32 0
  %124 = add i64 %123, %105
  %125 = getelementptr inbounds i16, i16* %106, i64 %10
  %126 = getelementptr inbounds i16, i16* %107, i64 %11
  %127 = bitcast i16* %125 to <8 x i16>*
  %128 = load <8 x i16>, <8 x i16>* %127, align 2
  %129 = zext <8 x i16> %128 to <8 x i32>
  %130 = bitcast i16* %126 to <8 x i16>*
  %131 = load <8 x i16>, <8 x i16>* %130, align 2
  %132 = zext <8 x i16> %131 to <8 x i32>
  %133 = sub nsw <8 x i32> %129, %132
  %134 = mul nsw <8 x i32> %133, %133
  %135 = zext <8 x i32> %134 to <8 x i64>
  %136 = shufflevector <8 x i64> %135, <8 x i64> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %137 = add <8 x i64> %136, %135
  %138 = shufflevector <8 x i64> %137, <8 x i64> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %139 = add <8 x i64> %137, %138
  %140 = shufflevector <8 x i64> %139, <8 x i64> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %141 = add <8 x i64> %139, %140
  %142 = extractelement <8 x i64> %141, i32 0
  %143 = add i64 %142, %124
  %144 = getelementptr inbounds i16, i16* %125, i64 %10
  %145 = getelementptr inbounds i16, i16* %126, i64 %11
  %146 = bitcast i16* %144 to <8 x i16>*
  %147 = load <8 x i16>, <8 x i16>* %146, align 2
  %148 = zext <8 x i16> %147 to <8 x i32>
  %149 = bitcast i16* %145 to <8 x i16>*
  %150 = load <8 x i16>, <8 x i16>* %149, align 2
  %151 = zext <8 x i16> %150 to <8 x i32>
  %152 = sub nsw <8 x i32> %148, %151
  %153 = mul nsw <8 x i32> %152, %152
  %154 = zext <8 x i32> %153 to <8 x i64>
  %155 = shufflevector <8 x i64> %154, <8 x i64> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %156 = add <8 x i64> %155, %154
  %157 = shufflevector <8 x i64> %156, <8 x i64> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %158 = add <8 x i64> %156, %157
  %159 = shufflevector <8 x i64> %158, <8 x i64> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %160 = add <8 x i64> %158, %159
  %161 = extractelement <8 x i64> %160, i32 0
  %162 = add i64 %161, %143
  %163 = trunc i64 %162 to i32
  store i32 %163, i32* %4, align 4
  ret i32 %163
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_highbd_10_mse8x8_c(i8*, i32, i8*, i32, i32* nocapture) local_unnamed_addr #2 {
  %6 = ptrtoint i8* %2 to i64
  %7 = shl i64 %6, 1
  %8 = ptrtoint i8* %0 to i64
  %9 = shl i64 %8, 1
  %10 = sext i32 %1 to i64
  %11 = sext i32 %3 to i64
  %12 = inttoptr i64 %7 to i16*
  %13 = inttoptr i64 %9 to i16*
  %14 = inttoptr i64 %9 to <8 x i16>*
  %15 = load <8 x i16>, <8 x i16>* %14, align 2
  %16 = zext <8 x i16> %15 to <8 x i32>
  %17 = inttoptr i64 %7 to <8 x i16>*
  %18 = load <8 x i16>, <8 x i16>* %17, align 2
  %19 = zext <8 x i16> %18 to <8 x i32>
  %20 = sub nsw <8 x i32> %16, %19
  %21 = mul nsw <8 x i32> %20, %20
  %22 = zext <8 x i32> %21 to <8 x i64>
  %23 = shufflevector <8 x i64> %22, <8 x i64> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %24 = add <8 x i64> %23, %22
  %25 = shufflevector <8 x i64> %24, <8 x i64> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %26 = add <8 x i64> %24, %25
  %27 = shufflevector <8 x i64> %26, <8 x i64> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %28 = add <8 x i64> %26, %27
  %29 = extractelement <8 x i64> %28, i32 0
  %30 = getelementptr inbounds i16, i16* %13, i64 %10
  %31 = getelementptr inbounds i16, i16* %12, i64 %11
  %32 = bitcast i16* %30 to <8 x i16>*
  %33 = load <8 x i16>, <8 x i16>* %32, align 2
  %34 = zext <8 x i16> %33 to <8 x i32>
  %35 = bitcast i16* %31 to <8 x i16>*
  %36 = load <8 x i16>, <8 x i16>* %35, align 2
  %37 = zext <8 x i16> %36 to <8 x i32>
  %38 = sub nsw <8 x i32> %34, %37
  %39 = mul nsw <8 x i32> %38, %38
  %40 = zext <8 x i32> %39 to <8 x i64>
  %41 = shufflevector <8 x i64> %40, <8 x i64> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %42 = add <8 x i64> %41, %40
  %43 = shufflevector <8 x i64> %42, <8 x i64> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %44 = add <8 x i64> %42, %43
  %45 = shufflevector <8 x i64> %44, <8 x i64> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %46 = add <8 x i64> %44, %45
  %47 = extractelement <8 x i64> %46, i32 0
  %48 = add i64 %47, %29
  %49 = getelementptr inbounds i16, i16* %30, i64 %10
  %50 = getelementptr inbounds i16, i16* %31, i64 %11
  %51 = bitcast i16* %49 to <8 x i16>*
  %52 = load <8 x i16>, <8 x i16>* %51, align 2
  %53 = zext <8 x i16> %52 to <8 x i32>
  %54 = bitcast i16* %50 to <8 x i16>*
  %55 = load <8 x i16>, <8 x i16>* %54, align 2
  %56 = zext <8 x i16> %55 to <8 x i32>
  %57 = sub nsw <8 x i32> %53, %56
  %58 = mul nsw <8 x i32> %57, %57
  %59 = zext <8 x i32> %58 to <8 x i64>
  %60 = shufflevector <8 x i64> %59, <8 x i64> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %61 = add <8 x i64> %60, %59
  %62 = shufflevector <8 x i64> %61, <8 x i64> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %63 = add <8 x i64> %61, %62
  %64 = shufflevector <8 x i64> %63, <8 x i64> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %65 = add <8 x i64> %63, %64
  %66 = extractelement <8 x i64> %65, i32 0
  %67 = add i64 %66, %48
  %68 = getelementptr inbounds i16, i16* %49, i64 %10
  %69 = getelementptr inbounds i16, i16* %50, i64 %11
  %70 = bitcast i16* %68 to <8 x i16>*
  %71 = load <8 x i16>, <8 x i16>* %70, align 2
  %72 = zext <8 x i16> %71 to <8 x i32>
  %73 = bitcast i16* %69 to <8 x i16>*
  %74 = load <8 x i16>, <8 x i16>* %73, align 2
  %75 = zext <8 x i16> %74 to <8 x i32>
  %76 = sub nsw <8 x i32> %72, %75
  %77 = mul nsw <8 x i32> %76, %76
  %78 = zext <8 x i32> %77 to <8 x i64>
  %79 = shufflevector <8 x i64> %78, <8 x i64> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %80 = add <8 x i64> %79, %78
  %81 = shufflevector <8 x i64> %80, <8 x i64> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %82 = add <8 x i64> %80, %81
  %83 = shufflevector <8 x i64> %82, <8 x i64> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %84 = add <8 x i64> %82, %83
  %85 = extractelement <8 x i64> %84, i32 0
  %86 = add i64 %85, %67
  %87 = getelementptr inbounds i16, i16* %68, i64 %10
  %88 = getelementptr inbounds i16, i16* %69, i64 %11
  %89 = bitcast i16* %87 to <8 x i16>*
  %90 = load <8 x i16>, <8 x i16>* %89, align 2
  %91 = zext <8 x i16> %90 to <8 x i32>
  %92 = bitcast i16* %88 to <8 x i16>*
  %93 = load <8 x i16>, <8 x i16>* %92, align 2
  %94 = zext <8 x i16> %93 to <8 x i32>
  %95 = sub nsw <8 x i32> %91, %94
  %96 = mul nsw <8 x i32> %95, %95
  %97 = zext <8 x i32> %96 to <8 x i64>
  %98 = shufflevector <8 x i64> %97, <8 x i64> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %99 = add <8 x i64> %98, %97
  %100 = shufflevector <8 x i64> %99, <8 x i64> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %101 = add <8 x i64> %99, %100
  %102 = shufflevector <8 x i64> %101, <8 x i64> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %103 = add <8 x i64> %101, %102
  %104 = extractelement <8 x i64> %103, i32 0
  %105 = add i64 %104, %86
  %106 = getelementptr inbounds i16, i16* %87, i64 %10
  %107 = getelementptr inbounds i16, i16* %88, i64 %11
  %108 = bitcast i16* %106 to <8 x i16>*
  %109 = load <8 x i16>, <8 x i16>* %108, align 2
  %110 = zext <8 x i16> %109 to <8 x i32>
  %111 = bitcast i16* %107 to <8 x i16>*
  %112 = load <8 x i16>, <8 x i16>* %111, align 2
  %113 = zext <8 x i16> %112 to <8 x i32>
  %114 = sub nsw <8 x i32> %110, %113
  %115 = mul nsw <8 x i32> %114, %114
  %116 = zext <8 x i32> %115 to <8 x i64>
  %117 = shufflevector <8 x i64> %116, <8 x i64> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %118 = add <8 x i64> %117, %116
  %119 = shufflevector <8 x i64> %118, <8 x i64> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %120 = add <8 x i64> %118, %119
  %121 = shufflevector <8 x i64> %120, <8 x i64> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %122 = add <8 x i64> %120, %121
  %123 = extractelement <8 x i64> %122, i32 0
  %124 = add i64 %123, %105
  %125 = getelementptr inbounds i16, i16* %106, i64 %10
  %126 = getelementptr inbounds i16, i16* %107, i64 %11
  %127 = bitcast i16* %125 to <8 x i16>*
  %128 = load <8 x i16>, <8 x i16>* %127, align 2
  %129 = zext <8 x i16> %128 to <8 x i32>
  %130 = bitcast i16* %126 to <8 x i16>*
  %131 = load <8 x i16>, <8 x i16>* %130, align 2
  %132 = zext <8 x i16> %131 to <8 x i32>
  %133 = sub nsw <8 x i32> %129, %132
  %134 = mul nsw <8 x i32> %133, %133
  %135 = zext <8 x i32> %134 to <8 x i64>
  %136 = shufflevector <8 x i64> %135, <8 x i64> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %137 = add <8 x i64> %136, %135
  %138 = shufflevector <8 x i64> %137, <8 x i64> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %139 = add <8 x i64> %137, %138
  %140 = shufflevector <8 x i64> %139, <8 x i64> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %141 = add <8 x i64> %139, %140
  %142 = extractelement <8 x i64> %141, i32 0
  %143 = add i64 %142, %124
  %144 = getelementptr inbounds i16, i16* %125, i64 %10
  %145 = getelementptr inbounds i16, i16* %126, i64 %11
  %146 = bitcast i16* %144 to <8 x i16>*
  %147 = load <8 x i16>, <8 x i16>* %146, align 2
  %148 = zext <8 x i16> %147 to <8 x i32>
  %149 = bitcast i16* %145 to <8 x i16>*
  %150 = load <8 x i16>, <8 x i16>* %149, align 2
  %151 = zext <8 x i16> %150 to <8 x i32>
  %152 = sub nsw <8 x i32> %148, %151
  %153 = mul nsw <8 x i32> %152, %152
  %154 = zext <8 x i32> %153 to <8 x i64>
  %155 = shufflevector <8 x i64> %154, <8 x i64> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %156 = add <8 x i64> %155, %154
  %157 = shufflevector <8 x i64> %156, <8 x i64> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %158 = add <8 x i64> %156, %157
  %159 = shufflevector <8 x i64> %158, <8 x i64> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %160 = add <8 x i64> %158, %159
  %161 = extractelement <8 x i64> %160, i32 0
  %162 = add i64 %161, %143
  %163 = add i64 %162, 8
  %164 = lshr i64 %163, 4
  %165 = trunc i64 %164 to i32
  store i32 %165, i32* %4, align 4
  ret i32 %165
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_highbd_12_mse8x8_c(i8*, i32, i8*, i32, i32* nocapture) local_unnamed_addr #2 {
  %6 = ptrtoint i8* %2 to i64
  %7 = shl i64 %6, 1
  %8 = ptrtoint i8* %0 to i64
  %9 = shl i64 %8, 1
  %10 = sext i32 %1 to i64
  %11 = sext i32 %3 to i64
  %12 = inttoptr i64 %7 to i16*
  %13 = inttoptr i64 %9 to i16*
  %14 = inttoptr i64 %9 to <8 x i16>*
  %15 = load <8 x i16>, <8 x i16>* %14, align 2
  %16 = zext <8 x i16> %15 to <8 x i32>
  %17 = inttoptr i64 %7 to <8 x i16>*
  %18 = load <8 x i16>, <8 x i16>* %17, align 2
  %19 = zext <8 x i16> %18 to <8 x i32>
  %20 = sub nsw <8 x i32> %16, %19
  %21 = mul nsw <8 x i32> %20, %20
  %22 = zext <8 x i32> %21 to <8 x i64>
  %23 = shufflevector <8 x i64> %22, <8 x i64> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %24 = add <8 x i64> %23, %22
  %25 = shufflevector <8 x i64> %24, <8 x i64> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %26 = add <8 x i64> %24, %25
  %27 = shufflevector <8 x i64> %26, <8 x i64> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %28 = add <8 x i64> %26, %27
  %29 = extractelement <8 x i64> %28, i32 0
  %30 = getelementptr inbounds i16, i16* %13, i64 %10
  %31 = getelementptr inbounds i16, i16* %12, i64 %11
  %32 = bitcast i16* %30 to <8 x i16>*
  %33 = load <8 x i16>, <8 x i16>* %32, align 2
  %34 = zext <8 x i16> %33 to <8 x i32>
  %35 = bitcast i16* %31 to <8 x i16>*
  %36 = load <8 x i16>, <8 x i16>* %35, align 2
  %37 = zext <8 x i16> %36 to <8 x i32>
  %38 = sub nsw <8 x i32> %34, %37
  %39 = mul nsw <8 x i32> %38, %38
  %40 = zext <8 x i32> %39 to <8 x i64>
  %41 = shufflevector <8 x i64> %40, <8 x i64> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %42 = add <8 x i64> %41, %40
  %43 = shufflevector <8 x i64> %42, <8 x i64> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %44 = add <8 x i64> %42, %43
  %45 = shufflevector <8 x i64> %44, <8 x i64> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %46 = add <8 x i64> %44, %45
  %47 = extractelement <8 x i64> %46, i32 0
  %48 = add i64 %47, %29
  %49 = getelementptr inbounds i16, i16* %30, i64 %10
  %50 = getelementptr inbounds i16, i16* %31, i64 %11
  %51 = bitcast i16* %49 to <8 x i16>*
  %52 = load <8 x i16>, <8 x i16>* %51, align 2
  %53 = zext <8 x i16> %52 to <8 x i32>
  %54 = bitcast i16* %50 to <8 x i16>*
  %55 = load <8 x i16>, <8 x i16>* %54, align 2
  %56 = zext <8 x i16> %55 to <8 x i32>
  %57 = sub nsw <8 x i32> %53, %56
  %58 = mul nsw <8 x i32> %57, %57
  %59 = zext <8 x i32> %58 to <8 x i64>
  %60 = shufflevector <8 x i64> %59, <8 x i64> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %61 = add <8 x i64> %60, %59
  %62 = shufflevector <8 x i64> %61, <8 x i64> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %63 = add <8 x i64> %61, %62
  %64 = shufflevector <8 x i64> %63, <8 x i64> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %65 = add <8 x i64> %63, %64
  %66 = extractelement <8 x i64> %65, i32 0
  %67 = add i64 %66, %48
  %68 = getelementptr inbounds i16, i16* %49, i64 %10
  %69 = getelementptr inbounds i16, i16* %50, i64 %11
  %70 = bitcast i16* %68 to <8 x i16>*
  %71 = load <8 x i16>, <8 x i16>* %70, align 2
  %72 = zext <8 x i16> %71 to <8 x i32>
  %73 = bitcast i16* %69 to <8 x i16>*
  %74 = load <8 x i16>, <8 x i16>* %73, align 2
  %75 = zext <8 x i16> %74 to <8 x i32>
  %76 = sub nsw <8 x i32> %72, %75
  %77 = mul nsw <8 x i32> %76, %76
  %78 = zext <8 x i32> %77 to <8 x i64>
  %79 = shufflevector <8 x i64> %78, <8 x i64> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %80 = add <8 x i64> %79, %78
  %81 = shufflevector <8 x i64> %80, <8 x i64> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %82 = add <8 x i64> %80, %81
  %83 = shufflevector <8 x i64> %82, <8 x i64> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %84 = add <8 x i64> %82, %83
  %85 = extractelement <8 x i64> %84, i32 0
  %86 = add i64 %85, %67
  %87 = getelementptr inbounds i16, i16* %68, i64 %10
  %88 = getelementptr inbounds i16, i16* %69, i64 %11
  %89 = bitcast i16* %87 to <8 x i16>*
  %90 = load <8 x i16>, <8 x i16>* %89, align 2
  %91 = zext <8 x i16> %90 to <8 x i32>
  %92 = bitcast i16* %88 to <8 x i16>*
  %93 = load <8 x i16>, <8 x i16>* %92, align 2
  %94 = zext <8 x i16> %93 to <8 x i32>
  %95 = sub nsw <8 x i32> %91, %94
  %96 = mul nsw <8 x i32> %95, %95
  %97 = zext <8 x i32> %96 to <8 x i64>
  %98 = shufflevector <8 x i64> %97, <8 x i64> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %99 = add <8 x i64> %98, %97
  %100 = shufflevector <8 x i64> %99, <8 x i64> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %101 = add <8 x i64> %99, %100
  %102 = shufflevector <8 x i64> %101, <8 x i64> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %103 = add <8 x i64> %101, %102
  %104 = extractelement <8 x i64> %103, i32 0
  %105 = add i64 %104, %86
  %106 = getelementptr inbounds i16, i16* %87, i64 %10
  %107 = getelementptr inbounds i16, i16* %88, i64 %11
  %108 = bitcast i16* %106 to <8 x i16>*
  %109 = load <8 x i16>, <8 x i16>* %108, align 2
  %110 = zext <8 x i16> %109 to <8 x i32>
  %111 = bitcast i16* %107 to <8 x i16>*
  %112 = load <8 x i16>, <8 x i16>* %111, align 2
  %113 = zext <8 x i16> %112 to <8 x i32>
  %114 = sub nsw <8 x i32> %110, %113
  %115 = mul nsw <8 x i32> %114, %114
  %116 = zext <8 x i32> %115 to <8 x i64>
  %117 = shufflevector <8 x i64> %116, <8 x i64> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %118 = add <8 x i64> %117, %116
  %119 = shufflevector <8 x i64> %118, <8 x i64> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %120 = add <8 x i64> %118, %119
  %121 = shufflevector <8 x i64> %120, <8 x i64> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %122 = add <8 x i64> %120, %121
  %123 = extractelement <8 x i64> %122, i32 0
  %124 = add i64 %123, %105
  %125 = getelementptr inbounds i16, i16* %106, i64 %10
  %126 = getelementptr inbounds i16, i16* %107, i64 %11
  %127 = bitcast i16* %125 to <8 x i16>*
  %128 = load <8 x i16>, <8 x i16>* %127, align 2
  %129 = zext <8 x i16> %128 to <8 x i32>
  %130 = bitcast i16* %126 to <8 x i16>*
  %131 = load <8 x i16>, <8 x i16>* %130, align 2
  %132 = zext <8 x i16> %131 to <8 x i32>
  %133 = sub nsw <8 x i32> %129, %132
  %134 = mul nsw <8 x i32> %133, %133
  %135 = zext <8 x i32> %134 to <8 x i64>
  %136 = shufflevector <8 x i64> %135, <8 x i64> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %137 = add <8 x i64> %136, %135
  %138 = shufflevector <8 x i64> %137, <8 x i64> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %139 = add <8 x i64> %137, %138
  %140 = shufflevector <8 x i64> %139, <8 x i64> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %141 = add <8 x i64> %139, %140
  %142 = extractelement <8 x i64> %141, i32 0
  %143 = add i64 %142, %124
  %144 = getelementptr inbounds i16, i16* %125, i64 %10
  %145 = getelementptr inbounds i16, i16* %126, i64 %11
  %146 = bitcast i16* %144 to <8 x i16>*
  %147 = load <8 x i16>, <8 x i16>* %146, align 2
  %148 = zext <8 x i16> %147 to <8 x i32>
  %149 = bitcast i16* %145 to <8 x i16>*
  %150 = load <8 x i16>, <8 x i16>* %149, align 2
  %151 = zext <8 x i16> %150 to <8 x i32>
  %152 = sub nsw <8 x i32> %148, %151
  %153 = mul nsw <8 x i32> %152, %152
  %154 = zext <8 x i32> %153 to <8 x i64>
  %155 = shufflevector <8 x i64> %154, <8 x i64> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %156 = add <8 x i64> %155, %154
  %157 = shufflevector <8 x i64> %156, <8 x i64> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %158 = add <8 x i64> %156, %157
  %159 = shufflevector <8 x i64> %158, <8 x i64> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %160 = add <8 x i64> %158, %159
  %161 = extractelement <8 x i64> %160, i32 0
  %162 = add i64 %161, %143
  %163 = add i64 %162, 128
  %164 = lshr i64 %163, 8
  %165 = trunc i64 %164 to i32
  store i32 %165, i32* %4, align 4
  ret i32 %165
}

attributes #0 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = !{!5}
!5 = distinct !{!5, !6}
!6 = distinct !{!6, !"LVerDomain"}
!7 = !{!8}
!8 = distinct !{!8, !6}
!9 = distinct !{!9, !3}
!10 = !{!11}
!11 = distinct !{!11, !12}
!12 = distinct !{!12, !"LVerDomain"}
!13 = !{!14}
!14 = distinct !{!14, !12}
!15 = distinct !{!15, !3}
!16 = !{!17}
!17 = distinct !{!17, !18}
!18 = distinct !{!18, !"LVerDomain"}
!19 = !{!20}
!20 = distinct !{!20, !18}
!21 = distinct !{!21, !3}
!22 = !{!23}
!23 = distinct !{!23, !24}
!24 = distinct !{!24, !"LVerDomain"}
!25 = !{!26}
!26 = distinct !{!26, !24}
!27 = distinct !{!27, !3}
!28 = !{!29}
!29 = distinct !{!29, !30}
!30 = distinct !{!30, !"LVerDomain"}
!31 = !{!32}
!32 = distinct !{!32, !30}
!33 = !{!34}
!34 = distinct !{!34, !30}
!35 = !{!29, !32}
!36 = distinct !{!36, !3}
!37 = distinct !{!37, !3}
!38 = !{!39}
!39 = distinct !{!39, !40}
!40 = distinct !{!40, !"LVerDomain"}
!41 = !{!42}
!42 = distinct !{!42, !40}
!43 = distinct !{!43, !3}
!44 = !{!45}
!45 = distinct !{!45, !46}
!46 = distinct !{!46, !"LVerDomain"}
!47 = !{!48}
!48 = distinct !{!48, !46}
!49 = distinct !{!49, !3}
!50 = !{!51}
!51 = distinct !{!51, !52}
!52 = distinct !{!52, !"LVerDomain"}
!53 = !{!54}
!54 = distinct !{!54, !52}
!55 = distinct !{!55, !3}
!56 = !{!57}
!57 = distinct !{!57, !58}
!58 = distinct !{!58, !"LVerDomain"}
!59 = !{!60}
!60 = distinct !{!60, !58}
!61 = distinct !{!61, !3}
!62 = !{!63}
!63 = distinct !{!63, !64}
!64 = distinct !{!64, !"LVerDomain"}
!65 = !{!66}
!66 = distinct !{!66, !64}
!67 = distinct !{!67, !3}
!68 = !{!69}
!69 = distinct !{!69, !70}
!70 = distinct !{!70, !"LVerDomain"}
!71 = !{!72}
!72 = distinct !{!72, !70}
!73 = distinct !{!73, !3}
!74 = !{!75}
!75 = distinct !{!75, !76}
!76 = distinct !{!76, !"LVerDomain"}
!77 = !{!78}
!78 = distinct !{!78, !76}
!79 = distinct !{!79, !3}
!80 = !{!81}
!81 = distinct !{!81, !82}
!82 = distinct !{!82, !"LVerDomain"}
!83 = !{!84}
!84 = distinct !{!84, !82}
!85 = distinct !{!85, !3}
!86 = !{!87}
!87 = distinct !{!87, !88}
!88 = distinct !{!88, !"LVerDomain"}
!89 = !{!90}
!90 = distinct !{!90, !88}
!91 = distinct !{!91, !3}
!92 = !{!93}
!93 = distinct !{!93, !94}
!94 = distinct !{!94, !"LVerDomain"}
!95 = !{!96}
!96 = distinct !{!96, !94}
!97 = distinct !{!97, !3}
!98 = !{!99}
!99 = distinct !{!99, !100}
!100 = distinct !{!100, !"LVerDomain"}
!101 = !{!102}
!102 = distinct !{!102, !100}
!103 = distinct !{!103, !3}
!104 = !{!105}
!105 = distinct !{!105, !106}
!106 = distinct !{!106, !"LVerDomain"}
!107 = !{!108}
!108 = distinct !{!108, !106}
!109 = distinct !{!109, !3}
!110 = !{!111}
!111 = distinct !{!111, !112}
!112 = distinct !{!112, !"LVerDomain"}
!113 = !{!114}
!114 = distinct !{!114, !112}
!115 = distinct !{!115, !3}
!116 = !{!117}
!117 = distinct !{!117, !118}
!118 = distinct !{!118, !"LVerDomain"}
!119 = !{!120}
!120 = distinct !{!120, !118}
!121 = distinct !{!121, !3}
!122 = !{!123}
!123 = distinct !{!123, !124}
!124 = distinct !{!124, !"LVerDomain"}
!125 = !{!126}
!126 = distinct !{!126, !124}
!127 = distinct !{!127, !3}
!128 = !{!129}
!129 = distinct !{!129, !130}
!130 = distinct !{!130, !"LVerDomain"}
!131 = !{!132}
!132 = distinct !{!132, !130}
!133 = distinct !{!133, !3}
!134 = !{!135}
!135 = distinct !{!135, !136}
!136 = distinct !{!136, !"LVerDomain"}
!137 = !{!138}
!138 = distinct !{!138, !136}
!139 = distinct !{!139, !3}
!140 = !{!141}
!141 = distinct !{!141, !142}
!142 = distinct !{!142, !"LVerDomain"}
!143 = !{!144}
!144 = distinct !{!144, !142}
!145 = distinct !{!145, !3}
!146 = !{!147}
!147 = distinct !{!147, !148}
!148 = distinct !{!148, !"LVerDomain"}
!149 = !{!150}
!150 = distinct !{!150, !148}
!151 = distinct !{!151, !3}
!152 = !{!153}
!153 = distinct !{!153, !154}
!154 = distinct !{!154, !"LVerDomain"}
!155 = !{!156}
!156 = distinct !{!156, !154}
!157 = distinct !{!157, !3}
!158 = !{!159}
!159 = distinct !{!159, !160}
!160 = distinct !{!160, !"LVerDomain"}
!161 = !{!162}
!162 = distinct !{!162, !160}
!163 = distinct !{!163, !3}
!164 = !{!165}
!165 = distinct !{!165, !166}
!166 = distinct !{!166, !"LVerDomain"}
!167 = !{!168}
!168 = distinct !{!168, !166}
!169 = distinct !{!169, !3}
!170 = !{!171}
!171 = distinct !{!171, !172}
!172 = distinct !{!172, !"LVerDomain"}
!173 = !{!174}
!174 = distinct !{!174, !172}
!175 = distinct !{!175, !3}
!176 = !{!177}
!177 = distinct !{!177, !178}
!178 = distinct !{!178, !"LVerDomain"}
!179 = !{!180}
!180 = distinct !{!180, !178}
!181 = distinct !{!181, !3}
!182 = !{!183}
!183 = distinct !{!183, !184}
!184 = distinct !{!184, !"LVerDomain"}
!185 = !{!186}
!186 = distinct !{!186, !184}
!187 = distinct !{!187, !3}
!188 = !{!189}
!189 = distinct !{!189, !190}
!190 = distinct !{!190, !"LVerDomain"}
!191 = !{!192}
!192 = distinct !{!192, !190}
!193 = distinct !{!193, !3}
!194 = !{!195}
!195 = distinct !{!195, !196}
!196 = distinct !{!196, !"LVerDomain"}
!197 = !{!198}
!198 = distinct !{!198, !196}
!199 = distinct !{!199, !3}
!200 = !{!201}
!201 = distinct !{!201, !202}
!202 = distinct !{!202, !"LVerDomain"}
!203 = !{!204}
!204 = distinct !{!204, !202}
!205 = distinct !{!205, !3}
!206 = !{!207}
!207 = distinct !{!207, !208}
!208 = distinct !{!208, !"LVerDomain"}
!209 = !{!210}
!210 = distinct !{!210, !208}
!211 = distinct !{!211, !3}
!212 = !{!213}
!213 = distinct !{!213, !214}
!214 = distinct !{!214, !"LVerDomain"}
!215 = !{!216}
!216 = distinct !{!216, !214}
!217 = distinct !{!217, !3}
!218 = !{!219}
!219 = distinct !{!219, !220}
!220 = distinct !{!220, !"LVerDomain"}
!221 = !{!222}
!222 = distinct !{!222, !220}
!223 = distinct !{!223, !3}
!224 = !{!225}
!225 = distinct !{!225, !226}
!226 = distinct !{!226, !"LVerDomain"}
!227 = !{!228}
!228 = distinct !{!228, !226}
!229 = distinct !{!229, !3}
!230 = !{!231}
!231 = distinct !{!231, !232}
!232 = distinct !{!232, !"LVerDomain"}
!233 = !{!234}
!234 = distinct !{!234, !232}
!235 = distinct !{!235, !3}
!236 = distinct !{!236, !3}
!237 = !{!238}
!238 = distinct !{!238, !239}
!239 = distinct !{!239, !"LVerDomain"}
!240 = !{!241}
!241 = distinct !{!241, !239}
!242 = distinct !{!242, !3}
!243 = !{!244}
!244 = distinct !{!244, !245}
!245 = distinct !{!245, !"LVerDomain"}
!246 = !{!247}
!247 = distinct !{!247, !245}
!248 = distinct !{!248, !3}
!249 = !{!250}
!250 = distinct !{!250, !251}
!251 = distinct !{!251, !"LVerDomain"}
!252 = !{!253}
!253 = distinct !{!253, !251}
!254 = distinct !{!254, !3}
!255 = !{!256}
!256 = distinct !{!256, !257}
!257 = distinct !{!257, !"LVerDomain"}
!258 = !{!259}
!259 = distinct !{!259, !257}
!260 = distinct !{!260, !3}
!261 = !{!262}
!262 = distinct !{!262, !263}
!263 = distinct !{!263, !"LVerDomain"}
!264 = !{!265}
!265 = distinct !{!265, !263}
!266 = distinct !{!266, !3}
!267 = !{!268}
!268 = distinct !{!268, !269}
!269 = distinct !{!269, !"LVerDomain"}
!270 = !{!271}
!271 = distinct !{!271, !269}
!272 = distinct !{!272, !3}
!273 = !{!274}
!274 = distinct !{!274, !275}
!275 = distinct !{!275, !"LVerDomain"}
!276 = !{!277}
!277 = distinct !{!277, !275}
!278 = distinct !{!278, !3}
!279 = !{!280}
!280 = distinct !{!280, !281}
!281 = distinct !{!281, !"LVerDomain"}
!282 = !{!283}
!283 = distinct !{!283, !281}
!284 = !{!285}
!285 = distinct !{!285, !286}
!286 = distinct !{!286, !"LVerDomain"}
!287 = !{!288}
!288 = distinct !{!288, !286}
!289 = distinct !{!289, !3}
!290 = !{!291}
!291 = distinct !{!291, !292}
!292 = distinct !{!292, !"LVerDomain"}
!293 = !{!294}
!294 = distinct !{!294, !292}
!295 = distinct !{!295, !3}
!296 = !{!297}
!297 = distinct !{!297, !298}
!298 = distinct !{!298, !"LVerDomain"}
!299 = !{!300}
!300 = distinct !{!300, !298}
!301 = distinct !{!301, !3}
!302 = !{!303}
!303 = distinct !{!303, !304}
!304 = distinct !{!304, !"LVerDomain"}
!305 = !{!306}
!306 = distinct !{!306, !304}
!307 = distinct !{!307, !3}
!308 = !{!309}
!309 = distinct !{!309, !310}
!310 = distinct !{!310, !"LVerDomain"}
!311 = !{!312}
!312 = distinct !{!312, !310}
!313 = distinct !{!313, !3}
!314 = !{!315}
!315 = distinct !{!315, !316}
!316 = distinct !{!316, !"LVerDomain"}
!317 = !{!318}
!318 = distinct !{!318, !316}
!319 = distinct !{!319, !3}
!320 = !{!321}
!321 = distinct !{!321, !322}
!322 = distinct !{!322, !"LVerDomain"}
!323 = !{!324}
!324 = distinct !{!324, !322}
!325 = distinct !{!325, !3}
!326 = !{!327}
!327 = distinct !{!327, !328}
!328 = distinct !{!328, !"LVerDomain"}
!329 = !{!330}
!330 = distinct !{!330, !328}
!331 = distinct !{!331, !3}
!332 = !{!333}
!333 = distinct !{!333, !334}
!334 = distinct !{!334, !"LVerDomain"}
!335 = !{!336}
!336 = distinct !{!336, !334}
!337 = distinct !{!337, !3}
!338 = distinct !{!338, !3}
!339 = !{!340}
!340 = distinct !{!340, !341}
!341 = distinct !{!341, !"LVerDomain"}
!342 = !{!343}
!343 = distinct !{!343, !341}
!344 = distinct !{!344, !3}
!345 = !{!346}
!346 = distinct !{!346, !347}
!347 = distinct !{!347, !"LVerDomain"}
!348 = !{!349}
!349 = distinct !{!349, !347}
!350 = distinct !{!350, !3}
!351 = !{!352}
!352 = distinct !{!352, !353}
!353 = distinct !{!353, !"LVerDomain"}
!354 = !{!355}
!355 = distinct !{!355, !353}
!356 = distinct !{!356, !3}
!357 = !{!358}
!358 = distinct !{!358, !359}
!359 = distinct !{!359, !"LVerDomain"}
!360 = !{!361}
!361 = distinct !{!361, !359}
!362 = distinct !{!362, !3}
!363 = !{!364}
!364 = distinct !{!364, !365}
!365 = distinct !{!365, !"LVerDomain"}
!366 = !{!367}
!367 = distinct !{!367, !365}
!368 = distinct !{!368, !3}
!369 = !{!370}
!370 = distinct !{!370, !371}
!371 = distinct !{!371, !"LVerDomain"}
!372 = !{!373}
!373 = distinct !{!373, !371}
!374 = distinct !{!374, !3}
!375 = !{!376}
!376 = distinct !{!376, !377}
!377 = distinct !{!377, !"LVerDomain"}
!378 = !{!379}
!379 = distinct !{!379, !377}
!380 = distinct !{!380, !3}
!381 = !{!382}
!382 = distinct !{!382, !383}
!383 = distinct !{!383, !"LVerDomain"}
!384 = !{!385}
!385 = distinct !{!385, !383}
!386 = !{!387}
!387 = distinct !{!387, !388}
!388 = distinct !{!388, !"LVerDomain"}
!389 = !{!390}
!390 = distinct !{!390, !388}
!391 = distinct !{!391, !3}
!392 = !{!393}
!393 = distinct !{!393, !394}
!394 = distinct !{!394, !"LVerDomain"}
!395 = !{!396}
!396 = distinct !{!396, !394}
!397 = distinct !{!397, !3}
!398 = !{!399}
!399 = distinct !{!399, !400}
!400 = distinct !{!400, !"LVerDomain"}
!401 = !{!402}
!402 = distinct !{!402, !400}
!403 = distinct !{!403, !3}
!404 = !{!405}
!405 = distinct !{!405, !406}
!406 = distinct !{!406, !"LVerDomain"}
!407 = !{!408}
!408 = distinct !{!408, !406}
!409 = distinct !{!409, !3}
!410 = !{!411}
!411 = distinct !{!411, !412}
!412 = distinct !{!412, !"LVerDomain"}
!413 = !{!414}
!414 = distinct !{!414, !412}
!415 = distinct !{!415, !3}
!416 = !{!417}
!417 = distinct !{!417, !418}
!418 = distinct !{!418, !"LVerDomain"}
!419 = !{!420}
!420 = distinct !{!420, !418}
!421 = distinct !{!421, !3}
!422 = !{!423}
!423 = distinct !{!423, !424}
!424 = distinct !{!424, !"LVerDomain"}
!425 = !{!426}
!426 = distinct !{!426, !424}
!427 = distinct !{!427, !3}
!428 = !{!429}
!429 = distinct !{!429, !430}
!430 = distinct !{!430, !"LVerDomain"}
!431 = !{!432}
!432 = distinct !{!432, !430}
!433 = distinct !{!433, !3}
!434 = !{!435}
!435 = distinct !{!435, !436}
!436 = distinct !{!436, !"LVerDomain"}
!437 = !{!438}
!438 = distinct !{!438, !436}
!439 = !{!440}
!440 = distinct !{!440, !436}
!441 = !{!435, !438}
!442 = distinct !{!442, !3}
!443 = !{!444}
!444 = distinct !{!444, !445}
!445 = distinct !{!445, !"LVerDomain"}
!446 = !{!447}
!447 = distinct !{!447, !445}
!448 = !{!449}
!449 = distinct !{!449, !445}
!450 = !{!444, !447}
!451 = distinct !{!451, !3}
!452 = distinct !{!452, !3}
!453 = !{!454}
!454 = distinct !{!454, !455}
!455 = distinct !{!455, !"LVerDomain"}
!456 = !{!457}
!457 = distinct !{!457, !455}
!458 = distinct !{!458, !3}
!459 = !{!460}
!460 = distinct !{!460, !461}
!461 = distinct !{!461, !"LVerDomain"}
!462 = !{!463}
!463 = distinct !{!463, !461}
!464 = distinct !{!464, !3}
!465 = !{!466}
!466 = distinct !{!466, !467}
!467 = distinct !{!467, !"LVerDomain"}
!468 = !{!469}
!469 = distinct !{!469, !467}
!470 = !{!471}
!471 = distinct !{!471, !467}
!472 = !{!466, !469}
!473 = distinct !{!473, !3}
!474 = !{!475}
!475 = distinct !{!475, !476}
!476 = distinct !{!476, !"LVerDomain"}
!477 = !{!478}
!478 = distinct !{!478, !476}
!479 = distinct !{!479, !3}
!480 = !{!481}
!481 = distinct !{!481, !482}
!482 = distinct !{!482, !"LVerDomain"}
!483 = !{!484}
!484 = distinct !{!484, !482}
!485 = distinct !{!485, !3}
!486 = !{!487}
!487 = distinct !{!487, !488}
!488 = distinct !{!488, !"LVerDomain"}
!489 = !{!490}
!490 = distinct !{!490, !488}
!491 = !{!492}
!492 = distinct !{!492, !488}
!493 = !{!487, !490}
!494 = distinct !{!494, !3}
!495 = !{!496}
!496 = distinct !{!496, !497}
!497 = distinct !{!497, !"LVerDomain"}
!498 = !{!499}
!499 = distinct !{!499, !497}
!500 = distinct !{!500, !3}
!501 = !{!502}
!502 = distinct !{!502, !503}
!503 = distinct !{!503, !"LVerDomain"}
!504 = !{!505}
!505 = distinct !{!505, !503}
!506 = distinct !{!506, !3}
!507 = !{!508}
!508 = distinct !{!508, !509}
!509 = distinct !{!509, !"LVerDomain"}
!510 = !{!511}
!511 = distinct !{!511, !509}
!512 = distinct !{!512, !3}
!513 = !{!514}
!514 = distinct !{!514, !515}
!515 = distinct !{!515, !"LVerDomain"}
!516 = !{!517}
!517 = distinct !{!517, !515}
!518 = distinct !{!518, !3}
!519 = !{!520}
!520 = distinct !{!520, !521}
!521 = distinct !{!521, !"LVerDomain"}
!522 = !{!523}
!523 = distinct !{!523, !521}
!524 = distinct !{!524, !3}
!525 = !{!526}
!526 = distinct !{!526, !527}
!527 = distinct !{!527, !"LVerDomain"}
!528 = !{!529}
!529 = distinct !{!529, !527}
!530 = distinct !{!530, !3}
!531 = !{!532}
!532 = distinct !{!532, !533}
!533 = distinct !{!533, !"LVerDomain"}
!534 = !{!535}
!535 = distinct !{!535, !533}
!536 = distinct !{!536, !3}
!537 = !{!538}
!538 = distinct !{!538, !539}
!539 = distinct !{!539, !"LVerDomain"}
!540 = !{!541}
!541 = distinct !{!541, !539}
!542 = distinct !{!542, !3}
!543 = !{!544}
!544 = distinct !{!544, !545}
!545 = distinct !{!545, !"LVerDomain"}
!546 = !{!547}
!547 = distinct !{!547, !545}
!548 = !{!549}
!549 = distinct !{!549, !545}
!550 = !{!544, !547}
!551 = distinct !{!551, !3}
!552 = !{!553}
!553 = distinct !{!553, !554}
!554 = distinct !{!554, !"LVerDomain"}
!555 = !{!556}
!556 = distinct !{!556, !554}
!557 = distinct !{!557, !3}
!558 = !{!559}
!559 = distinct !{!559, !560}
!560 = distinct !{!560, !"LVerDomain"}
!561 = !{!562}
!562 = distinct !{!562, !560}
!563 = distinct !{!563, !3}
!564 = !{!565}
!565 = distinct !{!565, !566}
!566 = distinct !{!566, !"LVerDomain"}
!567 = !{!568}
!568 = distinct !{!568, !566}
!569 = !{!570}
!570 = distinct !{!570, !566}
!571 = !{!565, !568}
!572 = distinct !{!572, !3}
!573 = !{!574}
!574 = distinct !{!574, !575}
!575 = distinct !{!575, !"LVerDomain"}
!576 = !{!577}
!577 = distinct !{!577, !575}
!578 = distinct !{!578, !3}
!579 = !{!580}
!580 = distinct !{!580, !581}
!581 = distinct !{!581, !"LVerDomain"}
!582 = !{!583}
!583 = distinct !{!583, !581}
!584 = distinct !{!584, !3}
!585 = !{!586}
!586 = distinct !{!586, !587}
!587 = distinct !{!587, !"LVerDomain"}
!588 = !{!589}
!589 = distinct !{!589, !587}
!590 = !{!591}
!591 = distinct !{!591, !587}
!592 = !{!586, !589}
!593 = distinct !{!593, !3}
!594 = !{!595}
!595 = distinct !{!595, !596}
!596 = distinct !{!596, !"LVerDomain"}
!597 = !{!598}
!598 = distinct !{!598, !596}
!599 = distinct !{!599, !3}
!600 = !{!601}
!601 = distinct !{!601, !602}
!602 = distinct !{!602, !"LVerDomain"}
!603 = !{!604}
!604 = distinct !{!604, !602}
!605 = distinct !{!605, !3}
!606 = !{!607}
!607 = distinct !{!607, !608}
!608 = distinct !{!608, !"LVerDomain"}
!609 = !{!610}
!610 = distinct !{!610, !608}
!611 = distinct !{!611, !3}
!612 = !{!613}
!613 = distinct !{!613, !614}
!614 = distinct !{!614, !"LVerDomain"}
!615 = !{!616}
!616 = distinct !{!616, !614}
!617 = distinct !{!617, !3}
!618 = !{!619}
!619 = distinct !{!619, !620}
!620 = distinct !{!620, !"LVerDomain"}
!621 = !{!622}
!622 = distinct !{!622, !620}
!623 = distinct !{!623, !3}
!624 = !{!625}
!625 = distinct !{!625, !626}
!626 = distinct !{!626, !"LVerDomain"}
!627 = !{!628}
!628 = distinct !{!628, !626}
!629 = distinct !{!629, !3}
!630 = !{!631}
!631 = distinct !{!631, !632}
!632 = distinct !{!632, !"LVerDomain"}
!633 = !{!634}
!634 = distinct !{!634, !632}
!635 = distinct !{!635, !3}
!636 = !{!637}
!637 = distinct !{!637, !638}
!638 = distinct !{!638, !"LVerDomain"}
!639 = !{!640}
!640 = distinct !{!640, !638}
!641 = distinct !{!641, !3}
!642 = !{!643}
!643 = distinct !{!643, !644}
!644 = distinct !{!644, !"LVerDomain"}
!645 = !{!646}
!646 = distinct !{!646, !644}
!647 = !{!648}
!648 = distinct !{!648, !644}
!649 = !{!643, !646}
!650 = distinct !{!650, !3}
!651 = !{!652}
!652 = distinct !{!652, !653}
!653 = distinct !{!653, !"LVerDomain"}
!654 = !{!655}
!655 = distinct !{!655, !653}
!656 = distinct !{!656, !3}
!657 = !{!658}
!658 = distinct !{!658, !659}
!659 = distinct !{!659, !"LVerDomain"}
!660 = !{!661}
!661 = distinct !{!661, !659}
!662 = distinct !{!662, !3}
!663 = !{!664}
!664 = distinct !{!664, !665}
!665 = distinct !{!665, !"LVerDomain"}
!666 = !{!667}
!667 = distinct !{!667, !665}
!668 = !{!669}
!669 = distinct !{!669, !665}
!670 = !{!664, !667}
!671 = distinct !{!671, !3}
!672 = !{!673}
!673 = distinct !{!673, !674}
!674 = distinct !{!674, !"LVerDomain"}
!675 = !{!676}
!676 = distinct !{!676, !674}
!677 = distinct !{!677, !3}
!678 = !{!679}
!679 = distinct !{!679, !680}
!680 = distinct !{!680, !"LVerDomain"}
!681 = !{!682}
!682 = distinct !{!682, !680}
!683 = distinct !{!683, !3}
!684 = !{!685}
!685 = distinct !{!685, !686}
!686 = distinct !{!686, !"LVerDomain"}
!687 = !{!688}
!688 = distinct !{!688, !686}
!689 = !{!690}
!690 = distinct !{!690, !686}
!691 = !{!685, !688}
!692 = distinct !{!692, !3}
!693 = !{!694}
!694 = distinct !{!694, !695}
!695 = distinct !{!695, !"LVerDomain"}
!696 = !{!697}
!697 = distinct !{!697, !695}
!698 = distinct !{!698, !3}
!699 = !{!700}
!700 = distinct !{!700, !701}
!701 = distinct !{!701, !"LVerDomain"}
!702 = !{!703}
!703 = distinct !{!703, !701}
!704 = distinct !{!704, !3}
!705 = !{!706}
!706 = distinct !{!706, !707}
!707 = distinct !{!707, !"LVerDomain"}
!708 = !{!709}
!709 = distinct !{!709, !707}
!710 = distinct !{!710, !3}
!711 = !{!712}
!712 = distinct !{!712, !713}
!713 = distinct !{!713, !"LVerDomain"}
!714 = !{!715}
!715 = distinct !{!715, !713}
!716 = distinct !{!716, !3}
!717 = !{!718}
!718 = distinct !{!718, !719}
!719 = distinct !{!719, !"LVerDomain"}
!720 = !{!721}
!721 = distinct !{!721, !719}
!722 = distinct !{!722, !3}
!723 = !{!724}
!724 = distinct !{!724, !725}
!725 = distinct !{!725, !"LVerDomain"}
!726 = !{!727}
!727 = distinct !{!727, !725}
!728 = distinct !{!728, !3}
!729 = !{!730}
!730 = distinct !{!730, !731}
!731 = distinct !{!731, !"LVerDomain"}
!732 = !{!733}
!733 = distinct !{!733, !731}
!734 = distinct !{!734, !3}
!735 = !{!736}
!736 = distinct !{!736, !737}
!737 = distinct !{!737, !"LVerDomain"}
!738 = !{!739}
!739 = distinct !{!739, !737}
!740 = distinct !{!740, !3}
!741 = !{!742}
!742 = distinct !{!742, !743}
!743 = distinct !{!743, !"LVerDomain"}
!744 = !{!745}
!745 = distinct !{!745, !743}
!746 = !{!747}
!747 = distinct !{!747, !743}
!748 = !{!742, !745}
!749 = distinct !{!749, !3}
!750 = !{!751}
!751 = distinct !{!751, !752}
!752 = distinct !{!752, !"LVerDomain"}
!753 = !{!754}
!754 = distinct !{!754, !752}
!755 = distinct !{!755, !3}
!756 = !{!757}
!757 = distinct !{!757, !758}
!758 = distinct !{!758, !"LVerDomain"}
!759 = !{!760}
!760 = distinct !{!760, !758}
!761 = distinct !{!761, !3}
!762 = !{!763}
!763 = distinct !{!763, !764}
!764 = distinct !{!764, !"LVerDomain"}
!765 = !{!766}
!766 = distinct !{!766, !764}
!767 = !{!768}
!768 = distinct !{!768, !764}
!769 = !{!763, !766}
!770 = distinct !{!770, !3}
!771 = !{!772}
!772 = distinct !{!772, !773}
!773 = distinct !{!773, !"LVerDomain"}
!774 = !{!775}
!775 = distinct !{!775, !773}
!776 = distinct !{!776, !3}
!777 = !{!778}
!778 = distinct !{!778, !779}
!779 = distinct !{!779, !"LVerDomain"}
!780 = !{!781}
!781 = distinct !{!781, !779}
!782 = distinct !{!782, !3}
!783 = !{!784}
!784 = distinct !{!784, !785}
!785 = distinct !{!785, !"LVerDomain"}
!786 = !{!787}
!787 = distinct !{!787, !785}
!788 = !{!789}
!789 = distinct !{!789, !785}
!790 = !{!784, !787}
!791 = distinct !{!791, !3}
!792 = !{!793}
!793 = distinct !{!793, !794}
!794 = distinct !{!794, !"LVerDomain"}
!795 = !{!796}
!796 = distinct !{!796, !794}
!797 = distinct !{!797, !3}
!798 = !{!799}
!799 = distinct !{!799, !800}
!800 = distinct !{!800, !"LVerDomain"}
!801 = !{!802}
!802 = distinct !{!802, !800}
!803 = distinct !{!803, !3}
!804 = !{!805}
!805 = distinct !{!805, !806}
!806 = distinct !{!806, !"LVerDomain"}
!807 = !{!808}
!808 = distinct !{!808, !806}
!809 = distinct !{!809, !3}
!810 = !{!811}
!811 = distinct !{!811, !812}
!812 = distinct !{!812, !"LVerDomain"}
!813 = !{!814}
!814 = distinct !{!814, !812}
!815 = distinct !{!815, !3}
!816 = !{!817}
!817 = distinct !{!817, !818}
!818 = distinct !{!818, !"LVerDomain"}
!819 = !{!820}
!820 = distinct !{!820, !818}
!821 = distinct !{!821, !3}
!822 = !{!823}
!823 = distinct !{!823, !824}
!824 = distinct !{!824, !"LVerDomain"}
!825 = !{!826}
!826 = distinct !{!826, !824}
!827 = distinct !{!827, !3}
!828 = !{!829}
!829 = distinct !{!829, !830}
!830 = distinct !{!830, !"LVerDomain"}
!831 = !{!832}
!832 = distinct !{!832, !830}
!833 = distinct !{!833, !3}
!834 = !{!835}
!835 = distinct !{!835, !836}
!836 = distinct !{!836, !"LVerDomain"}
!837 = !{!838}
!838 = distinct !{!838, !836}
!839 = distinct !{!839, !3}
!840 = !{!841}
!841 = distinct !{!841, !842}
!842 = distinct !{!842, !"LVerDomain"}
!843 = !{!844}
!844 = distinct !{!844, !842}
!845 = !{!846}
!846 = distinct !{!846, !842}
!847 = !{!841, !844}
!848 = distinct !{!848, !3}
!849 = !{!850}
!850 = distinct !{!850, !851}
!851 = distinct !{!851, !"LVerDomain"}
!852 = !{!853}
!853 = distinct !{!853, !851}
!854 = distinct !{!854, !3}
!855 = !{!856}
!856 = distinct !{!856, !857}
!857 = distinct !{!857, !"LVerDomain"}
!858 = !{!859}
!859 = distinct !{!859, !857}
!860 = distinct !{!860, !3}
!861 = !{!862}
!862 = distinct !{!862, !863}
!863 = distinct !{!863, !"LVerDomain"}
!864 = !{!865}
!865 = distinct !{!865, !863}
!866 = !{!867}
!867 = distinct !{!867, !863}
!868 = !{!862, !865}
!869 = distinct !{!869, !3}
!870 = !{!871}
!871 = distinct !{!871, !872}
!872 = distinct !{!872, !"LVerDomain"}
!873 = !{!874}
!874 = distinct !{!874, !872}
!875 = distinct !{!875, !3}
!876 = !{!877}
!877 = distinct !{!877, !878}
!878 = distinct !{!878, !"LVerDomain"}
!879 = !{!880}
!880 = distinct !{!880, !878}
!881 = distinct !{!881, !3}
!882 = !{!883}
!883 = distinct !{!883, !884}
!884 = distinct !{!884, !"LVerDomain"}
!885 = !{!886}
!886 = distinct !{!886, !884}
!887 = !{!888}
!888 = distinct !{!888, !884}
!889 = !{!883, !886}
!890 = distinct !{!890, !3}
!891 = !{!892}
!892 = distinct !{!892, !893}
!893 = distinct !{!893, !"LVerDomain"}
!894 = !{!895}
!895 = distinct !{!895, !893}
!896 = distinct !{!896, !3}
!897 = !{!898}
!898 = distinct !{!898, !899}
!899 = distinct !{!899, !"LVerDomain"}
!900 = !{!901}
!901 = distinct !{!901, !899}
!902 = distinct !{!902, !3}
!903 = !{!904}
!904 = distinct !{!904, !905}
!905 = distinct !{!905, !"LVerDomain"}
!906 = !{!907}
!907 = distinct !{!907, !905}
!908 = distinct !{!908, !3}
!909 = !{!910}
!910 = distinct !{!910, !911}
!911 = distinct !{!911, !"LVerDomain"}
!912 = !{!913}
!913 = distinct !{!913, !911}
!914 = distinct !{!914, !3}
!915 = !{!916}
!916 = distinct !{!916, !917}
!917 = distinct !{!917, !"LVerDomain"}
!918 = !{!919}
!919 = distinct !{!919, !917}
!920 = distinct !{!920, !3}
!921 = !{!922}
!922 = distinct !{!922, !923}
!923 = distinct !{!923, !"LVerDomain"}
!924 = !{!925}
!925 = distinct !{!925, !923}
!926 = distinct !{!926, !3}
!927 = !{!928}
!928 = distinct !{!928, !929}
!929 = distinct !{!929, !"LVerDomain"}
!930 = !{!931}
!931 = distinct !{!931, !929}
!932 = distinct !{!932, !3}
!933 = !{!934}
!934 = distinct !{!934, !935}
!935 = distinct !{!935, !"LVerDomain"}
!936 = !{!937}
!937 = distinct !{!937, !935}
!938 = distinct !{!938, !3}
!939 = !{!940}
!940 = distinct !{!940, !941}
!941 = distinct !{!941, !"LVerDomain"}
!942 = !{!943}
!943 = distinct !{!943, !941}
!944 = distinct !{!944, !3}
!945 = !{!946}
!946 = distinct !{!946, !947}
!947 = distinct !{!947, !"LVerDomain"}
!948 = !{!949}
!949 = distinct !{!949, !947}
!950 = distinct !{!950, !3}
!951 = !{!952}
!952 = distinct !{!952, !953}
!953 = distinct !{!953, !"LVerDomain"}
!954 = !{!955}
!955 = distinct !{!955, !953}
!956 = distinct !{!956, !3}
!957 = !{!958}
!958 = distinct !{!958, !959}
!959 = distinct !{!959, !"LVerDomain"}
!960 = !{!961}
!961 = distinct !{!961, !959}
!962 = distinct !{!962, !3}
!963 = !{!964}
!964 = distinct !{!964, !965}
!965 = distinct !{!965, !"LVerDomain"}
!966 = !{!967}
!967 = distinct !{!967, !965}
!968 = distinct !{!968, !3}
!969 = !{!970}
!970 = distinct !{!970, !971}
!971 = distinct !{!971, !"LVerDomain"}
!972 = !{!973}
!973 = distinct !{!973, !971}
!974 = distinct !{!974, !3}
!975 = !{!976}
!976 = distinct !{!976, !977}
!977 = distinct !{!977, !"LVerDomain"}
!978 = !{!979}
!979 = distinct !{!979, !977}
!980 = distinct !{!980, !3}
!981 = !{!982}
!982 = distinct !{!982, !983}
!983 = distinct !{!983, !"LVerDomain"}
!984 = !{!985}
!985 = distinct !{!985, !983}
!986 = distinct !{!986, !3}
!987 = !{!988}
!988 = distinct !{!988, !989}
!989 = distinct !{!989, !"LVerDomain"}
!990 = !{!991}
!991 = distinct !{!991, !989}
!992 = distinct !{!992, !3}
!993 = !{!994}
!994 = distinct !{!994, !995}
!995 = distinct !{!995, !"LVerDomain"}
!996 = !{!997}
!997 = distinct !{!997, !995}
!998 = distinct !{!998, !3}
!999 = !{!1000}
!1000 = distinct !{!1000, !1001}
!1001 = distinct !{!1001, !"LVerDomain"}
!1002 = !{!1003}
!1003 = distinct !{!1003, !1001}
!1004 = distinct !{!1004, !3}
!1005 = !{!1006}
!1006 = distinct !{!1006, !1007}
!1007 = distinct !{!1007, !"LVerDomain"}
!1008 = !{!1009}
!1009 = distinct !{!1009, !1007}
!1010 = distinct !{!1010, !3}
!1011 = !{!1012}
!1012 = distinct !{!1012, !1013}
!1013 = distinct !{!1013, !"LVerDomain"}
!1014 = !{!1015}
!1015 = distinct !{!1015, !1013}
!1016 = distinct !{!1016, !3}
!1017 = !{!1018}
!1018 = distinct !{!1018, !1019}
!1019 = distinct !{!1019, !"LVerDomain"}
!1020 = !{!1021}
!1021 = distinct !{!1021, !1019}
!1022 = distinct !{!1022, !3}
!1023 = !{!1024}
!1024 = distinct !{!1024, !1025}
!1025 = distinct !{!1025, !"LVerDomain"}
!1026 = !{!1027}
!1027 = distinct !{!1027, !1025}
!1028 = distinct !{!1028, !3}
!1029 = !{!1030}
!1030 = distinct !{!1030, !1031}
!1031 = distinct !{!1031, !"LVerDomain"}
!1032 = !{!1033}
!1033 = distinct !{!1033, !1031}
!1034 = distinct !{!1034, !3}
!1035 = !{!1036}
!1036 = distinct !{!1036, !1037}
!1037 = distinct !{!1037, !"LVerDomain"}
!1038 = !{!1039}
!1039 = distinct !{!1039, !1037}
!1040 = distinct !{!1040, !3}
!1041 = !{!1042}
!1042 = distinct !{!1042, !1043}
!1043 = distinct !{!1043, !"LVerDomain"}
!1044 = !{!1045}
!1045 = distinct !{!1045, !1043}
!1046 = distinct !{!1046, !3}
!1047 = !{!1048}
!1048 = distinct !{!1048, !1049}
!1049 = distinct !{!1049, !"LVerDomain"}
!1050 = !{!1051}
!1051 = distinct !{!1051, !1049}
!1052 = distinct !{!1052, !3}
!1053 = !{!1054}
!1054 = distinct !{!1054, !1055}
!1055 = distinct !{!1055, !"LVerDomain"}
!1056 = !{!1057}
!1057 = distinct !{!1057, !1055}
!1058 = distinct !{!1058, !3}
!1059 = !{!1060}
!1060 = distinct !{!1060, !1061}
!1061 = distinct !{!1061, !"LVerDomain"}
!1062 = !{!1063}
!1063 = distinct !{!1063, !1061}
!1064 = distinct !{!1064, !3}
!1065 = !{!1066}
!1066 = distinct !{!1066, !1067}
!1067 = distinct !{!1067, !"LVerDomain"}
!1068 = !{!1069}
!1069 = distinct !{!1069, !1067}
!1070 = distinct !{!1070, !3}
!1071 = !{!1072}
!1072 = distinct !{!1072, !1073}
!1073 = distinct !{!1073, !"LVerDomain"}
!1074 = !{!1075}
!1075 = distinct !{!1075, !1073}
!1076 = distinct !{!1076, !3}
!1077 = !{!1078}
!1078 = distinct !{!1078, !1079}
!1079 = distinct !{!1079, !"LVerDomain"}
!1080 = !{!1081}
!1081 = distinct !{!1081, !1079}
!1082 = distinct !{!1082, !3}
!1083 = !{!1084}
!1084 = distinct !{!1084, !1085}
!1085 = distinct !{!1085, !"LVerDomain"}
!1086 = !{!1087}
!1087 = distinct !{!1087, !1085}
!1088 = distinct !{!1088, !3}
!1089 = distinct !{!1089, !3}
!1090 = !{!1091}
!1091 = distinct !{!1091, !1092}
!1092 = distinct !{!1092, !"LVerDomain"}
!1093 = !{!1094}
!1094 = distinct !{!1094, !1092}
!1095 = distinct !{!1095, !3}
!1096 = !{!1097}
!1097 = distinct !{!1097, !1098}
!1098 = distinct !{!1098, !"LVerDomain"}
!1099 = !{!1100}
!1100 = distinct !{!1100, !1098}
!1101 = distinct !{!1101, !3}
!1102 = !{!1103}
!1103 = distinct !{!1103, !1104}
!1104 = distinct !{!1104, !"LVerDomain"}
!1105 = !{!1106}
!1106 = distinct !{!1106, !1104}
!1107 = distinct !{!1107, !3}
!1108 = !{!1109}
!1109 = distinct !{!1109, !1110}
!1110 = distinct !{!1110, !"LVerDomain"}
!1111 = !{!1112}
!1112 = distinct !{!1112, !1110}
!1113 = distinct !{!1113, !3}
!1114 = !{!1115}
!1115 = distinct !{!1115, !1116}
!1116 = distinct !{!1116, !"LVerDomain"}
!1117 = !{!1118}
!1118 = distinct !{!1118, !1116}
!1119 = distinct !{!1119, !3}
!1120 = !{!1121}
!1121 = distinct !{!1121, !1122}
!1122 = distinct !{!1122, !"LVerDomain"}
!1123 = !{!1124}
!1124 = distinct !{!1124, !1122}
!1125 = distinct !{!1125, !3}
!1126 = !{!1127}
!1127 = distinct !{!1127, !1128}
!1128 = distinct !{!1128, !"LVerDomain"}
!1129 = !{!1130}
!1130 = distinct !{!1130, !1128}
!1131 = distinct !{!1131, !3}
!1132 = !{!1133}
!1133 = distinct !{!1133, !1134}
!1134 = distinct !{!1134, !"LVerDomain"}
!1135 = !{!1136}
!1136 = distinct !{!1136, !1134}
!1137 = !{!1138}
!1138 = distinct !{!1138, !1139}
!1139 = distinct !{!1139, !"LVerDomain"}
!1140 = !{!1141}
!1141 = distinct !{!1141, !1139}
!1142 = distinct !{!1142, !3}
!1143 = !{!1144}
!1144 = distinct !{!1144, !1145}
!1145 = distinct !{!1145, !"LVerDomain"}
!1146 = !{!1147}
!1147 = distinct !{!1147, !1145}
!1148 = distinct !{!1148, !3}
!1149 = !{!1150}
!1150 = distinct !{!1150, !1151}
!1151 = distinct !{!1151, !"LVerDomain"}
!1152 = !{!1153}
!1153 = distinct !{!1153, !1151}
!1154 = distinct !{!1154, !3}
!1155 = !{!1156}
!1156 = distinct !{!1156, !1157}
!1157 = distinct !{!1157, !"LVerDomain"}
!1158 = !{!1159}
!1159 = distinct !{!1159, !1157}
!1160 = distinct !{!1160, !3}
!1161 = !{!1162}
!1162 = distinct !{!1162, !1163}
!1163 = distinct !{!1163, !"LVerDomain"}
!1164 = !{!1165}
!1165 = distinct !{!1165, !1163}
!1166 = distinct !{!1166, !3}
!1167 = !{!1168}
!1168 = distinct !{!1168, !1169}
!1169 = distinct !{!1169, !"LVerDomain"}
!1170 = !{!1171}
!1171 = distinct !{!1171, !1169}
!1172 = distinct !{!1172, !3}
!1173 = !{!1174}
!1174 = distinct !{!1174, !1175}
!1175 = distinct !{!1175, !"LVerDomain"}
!1176 = !{!1177}
!1177 = distinct !{!1177, !1175}
!1178 = distinct !{!1178, !3}
!1179 = !{!1180}
!1180 = distinct !{!1180, !1181}
!1181 = distinct !{!1181, !"LVerDomain"}
!1182 = !{!1183}
!1183 = distinct !{!1183, !1181}
!1184 = distinct !{!1184, !3}
!1185 = !{!1186}
!1186 = distinct !{!1186, !1187}
!1187 = distinct !{!1187, !"LVerDomain"}
!1188 = !{!1189}
!1189 = distinct !{!1189, !1187}
!1190 = distinct !{!1190, !3}
!1191 = distinct !{!1191, !3}
!1192 = !{!1193}
!1193 = distinct !{!1193, !1194}
!1194 = distinct !{!1194, !"LVerDomain"}
!1195 = !{!1196}
!1196 = distinct !{!1196, !1194}
!1197 = distinct !{!1197, !3}
!1198 = !{!1199}
!1199 = distinct !{!1199, !1200}
!1200 = distinct !{!1200, !"LVerDomain"}
!1201 = !{!1202}
!1202 = distinct !{!1202, !1200}
!1203 = distinct !{!1203, !3}
!1204 = !{!1205}
!1205 = distinct !{!1205, !1206}
!1206 = distinct !{!1206, !"LVerDomain"}
!1207 = !{!1208}
!1208 = distinct !{!1208, !1206}
!1209 = distinct !{!1209, !3}
!1210 = !{!1211}
!1211 = distinct !{!1211, !1212}
!1212 = distinct !{!1212, !"LVerDomain"}
!1213 = !{!1214}
!1214 = distinct !{!1214, !1212}
!1215 = distinct !{!1215, !3}
!1216 = !{!1217}
!1217 = distinct !{!1217, !1218}
!1218 = distinct !{!1218, !"LVerDomain"}
!1219 = !{!1220}
!1220 = distinct !{!1220, !1218}
!1221 = distinct !{!1221, !3}
!1222 = !{!1223}
!1223 = distinct !{!1223, !1224}
!1224 = distinct !{!1224, !"LVerDomain"}
!1225 = !{!1226}
!1226 = distinct !{!1226, !1224}
!1227 = distinct !{!1227, !3}
!1228 = !{!1229}
!1229 = distinct !{!1229, !1230}
!1230 = distinct !{!1230, !"LVerDomain"}
!1231 = !{!1232}
!1232 = distinct !{!1232, !1230}
!1233 = distinct !{!1233, !3}
!1234 = !{!1235}
!1235 = distinct !{!1235, !1236}
!1236 = distinct !{!1236, !"LVerDomain"}
!1237 = !{!1238}
!1238 = distinct !{!1238, !1236}
!1239 = !{!1240}
!1240 = distinct !{!1240, !1241}
!1241 = distinct !{!1241, !"LVerDomain"}
!1242 = !{!1243}
!1243 = distinct !{!1243, !1241}
!1244 = distinct !{!1244, !3}
!1245 = !{!1246}
!1246 = distinct !{!1246, !1247}
!1247 = distinct !{!1247, !"LVerDomain"}
!1248 = !{!1249}
!1249 = distinct !{!1249, !1247}
!1250 = distinct !{!1250, !3}
!1251 = !{!1252}
!1252 = distinct !{!1252, !1253}
!1253 = distinct !{!1253, !"LVerDomain"}
!1254 = !{!1255}
!1255 = distinct !{!1255, !1253}
!1256 = distinct !{!1256, !3}
!1257 = !{!1258}
!1258 = distinct !{!1258, !1259}
!1259 = distinct !{!1259, !"LVerDomain"}
!1260 = !{!1261}
!1261 = distinct !{!1261, !1259}
!1262 = distinct !{!1262, !3}
!1263 = !{!1264}
!1264 = distinct !{!1264, !1265}
!1265 = distinct !{!1265, !"LVerDomain"}
!1266 = !{!1267}
!1267 = distinct !{!1267, !1265}
!1268 = distinct !{!1268, !3}
!1269 = !{!1270}
!1270 = distinct !{!1270, !1271}
!1271 = distinct !{!1271, !"LVerDomain"}
!1272 = !{!1273}
!1273 = distinct !{!1273, !1271}
!1274 = distinct !{!1274, !3}
!1275 = !{!1276}
!1276 = distinct !{!1276, !1277}
!1277 = distinct !{!1277, !"LVerDomain"}
!1278 = !{!1279}
!1279 = distinct !{!1279, !1277}
!1280 = distinct !{!1280, !3}
!1281 = !{!1282}
!1282 = distinct !{!1282, !1283}
!1283 = distinct !{!1283, !"LVerDomain"}
!1284 = !{!1285}
!1285 = distinct !{!1285, !1283}
!1286 = distinct !{!1286, !3}
!1287 = !{!1288}
!1288 = distinct !{!1288, !1289}
!1289 = distinct !{!1289, !"LVerDomain"}
!1290 = !{!1291}
!1291 = distinct !{!1291, !1289}
!1292 = distinct !{!1292, !3}
!1293 = distinct !{!1293, !3}
!1294 = !{!1295}
!1295 = distinct !{!1295, !1296}
!1296 = distinct !{!1296, !"LVerDomain"}
!1297 = !{!1298}
!1298 = distinct !{!1298, !1296}
!1299 = distinct !{!1299, !3}
!1300 = !{!1301}
!1301 = distinct !{!1301, !1302}
!1302 = distinct !{!1302, !"LVerDomain"}
!1303 = !{!1304}
!1304 = distinct !{!1304, !1302}
!1305 = distinct !{!1305, !3}
!1306 = !{!1307}
!1307 = distinct !{!1307, !1308}
!1308 = distinct !{!1308, !"LVerDomain"}
!1309 = !{!1310}
!1310 = distinct !{!1310, !1308}
!1311 = distinct !{!1311, !3}
!1312 = !{!1313}
!1313 = distinct !{!1313, !1314}
!1314 = distinct !{!1314, !"LVerDomain"}
!1315 = !{!1316}
!1316 = distinct !{!1316, !1314}
!1317 = distinct !{!1317, !3}
!1318 = !{!1319}
!1319 = distinct !{!1319, !1320}
!1320 = distinct !{!1320, !"LVerDomain"}
!1321 = !{!1322}
!1322 = distinct !{!1322, !1320}
!1323 = distinct !{!1323, !3}
!1324 = !{!1325}
!1325 = distinct !{!1325, !1326}
!1326 = distinct !{!1326, !"LVerDomain"}
!1327 = !{!1328}
!1328 = distinct !{!1328, !1326}
!1329 = distinct !{!1329, !3}
!1330 = !{!1331}
!1331 = distinct !{!1331, !1332}
!1332 = distinct !{!1332, !"LVerDomain"}
!1333 = !{!1334}
!1334 = distinct !{!1334, !1332}
!1335 = distinct !{!1335, !3}
!1336 = !{!1337}
!1337 = distinct !{!1337, !1338}
!1338 = distinct !{!1338, !"LVerDomain"}
!1339 = !{!1340}
!1340 = distinct !{!1340, !1338}
!1341 = !{!1342}
!1342 = distinct !{!1342, !1343}
!1343 = distinct !{!1343, !"LVerDomain"}
!1344 = !{!1345}
!1345 = distinct !{!1345, !1343}
!1346 = distinct !{!1346, !3}
!1347 = !{!1348}
!1348 = distinct !{!1348, !1349}
!1349 = distinct !{!1349, !"LVerDomain"}
!1350 = !{!1351}
!1351 = distinct !{!1351, !1349}
!1352 = distinct !{!1352, !3}
!1353 = !{!1354}
!1354 = distinct !{!1354, !1355}
!1355 = distinct !{!1355, !"LVerDomain"}
!1356 = !{!1357}
!1357 = distinct !{!1357, !1355}
!1358 = distinct !{!1358, !3}
!1359 = !{!1360}
!1360 = distinct !{!1360, !1361}
!1361 = distinct !{!1361, !"LVerDomain"}
!1362 = !{!1363}
!1363 = distinct !{!1363, !1361}
!1364 = distinct !{!1364, !3}
!1365 = !{!1366}
!1366 = distinct !{!1366, !1367}
!1367 = distinct !{!1367, !"LVerDomain"}
!1368 = !{!1369}
!1369 = distinct !{!1369, !1367}
!1370 = distinct !{!1370, !3}
!1371 = !{!1372}
!1372 = distinct !{!1372, !1373}
!1373 = distinct !{!1373, !"LVerDomain"}
!1374 = !{!1375}
!1375 = distinct !{!1375, !1373}
!1376 = distinct !{!1376, !3}
!1377 = !{!1378}
!1378 = distinct !{!1378, !1379}
!1379 = distinct !{!1379, !"LVerDomain"}
!1380 = !{!1381}
!1381 = distinct !{!1381, !1379}
!1382 = distinct !{!1382, !3}
!1383 = !{!1384}
!1384 = distinct !{!1384, !1385}
!1385 = distinct !{!1385, !"LVerDomain"}
!1386 = !{!1387}
!1387 = distinct !{!1387, !1385}
!1388 = distinct !{!1388, !3}
!1389 = !{!1390}
!1390 = distinct !{!1390, !1391}
!1391 = distinct !{!1391, !"LVerDomain"}
!1392 = !{!1393}
!1393 = distinct !{!1393, !1391}
!1394 = distinct !{!1394, !3}
!1395 = distinct !{!1395, !3}
!1396 = !{!1397}
!1397 = distinct !{!1397, !1398}
!1398 = distinct !{!1398, !"LVerDomain"}
!1399 = !{!1400}
!1400 = distinct !{!1400, !1398}
!1401 = distinct !{!1401, !3}
!1402 = !{!1403}
!1403 = distinct !{!1403, !1404}
!1404 = distinct !{!1404, !"LVerDomain"}
!1405 = !{!1406}
!1406 = distinct !{!1406, !1404}
!1407 = distinct !{!1407, !3}
!1408 = !{!1409}
!1409 = distinct !{!1409, !1410}
!1410 = distinct !{!1410, !"LVerDomain"}
!1411 = !{!1412}
!1412 = distinct !{!1412, !1410}
!1413 = distinct !{!1413, !3}
!1414 = !{!1415}
!1415 = distinct !{!1415, !1416}
!1416 = distinct !{!1416, !"LVerDomain"}
!1417 = !{!1418}
!1418 = distinct !{!1418, !1416}
!1419 = distinct !{!1419, !3}
!1420 = !{!1421}
!1421 = distinct !{!1421, !1422}
!1422 = distinct !{!1422, !"LVerDomain"}
!1423 = !{!1424}
!1424 = distinct !{!1424, !1422}
!1425 = distinct !{!1425, !3}
!1426 = !{!1427}
!1427 = distinct !{!1427, !1428}
!1428 = distinct !{!1428, !"LVerDomain"}
!1429 = !{!1430}
!1430 = distinct !{!1430, !1428}
!1431 = distinct !{!1431, !3}
!1432 = !{!1433}
!1433 = distinct !{!1433, !1434}
!1434 = distinct !{!1434, !"LVerDomain"}
!1435 = !{!1436}
!1436 = distinct !{!1436, !1434}
!1437 = distinct !{!1437, !3}
!1438 = !{!1439}
!1439 = distinct !{!1439, !1440}
!1440 = distinct !{!1440, !"LVerDomain"}
!1441 = !{!1442}
!1442 = distinct !{!1442, !1440}
!1443 = !{!1444}
!1444 = distinct !{!1444, !1445}
!1445 = distinct !{!1445, !"LVerDomain"}
!1446 = !{!1447}
!1447 = distinct !{!1447, !1445}
!1448 = distinct !{!1448, !3}
!1449 = !{!1450}
!1450 = distinct !{!1450, !1451}
!1451 = distinct !{!1451, !"LVerDomain"}
!1452 = !{!1453}
!1453 = distinct !{!1453, !1451}
!1454 = distinct !{!1454, !3}
!1455 = !{!1456}
!1456 = distinct !{!1456, !1457}
!1457 = distinct !{!1457, !"LVerDomain"}
!1458 = !{!1459}
!1459 = distinct !{!1459, !1457}
!1460 = distinct !{!1460, !3}
!1461 = !{!1462}
!1462 = distinct !{!1462, !1463}
!1463 = distinct !{!1463, !"LVerDomain"}
!1464 = !{!1465}
!1465 = distinct !{!1465, !1463}
!1466 = distinct !{!1466, !3}
!1467 = !{!1468}
!1468 = distinct !{!1468, !1469}
!1469 = distinct !{!1469, !"LVerDomain"}
!1470 = !{!1471}
!1471 = distinct !{!1471, !1469}
!1472 = distinct !{!1472, !3}
!1473 = !{!1474}
!1474 = distinct !{!1474, !1475}
!1475 = distinct !{!1475, !"LVerDomain"}
!1476 = !{!1477}
!1477 = distinct !{!1477, !1475}
!1478 = distinct !{!1478, !3}
!1479 = !{!1480}
!1480 = distinct !{!1480, !1481}
!1481 = distinct !{!1481, !"LVerDomain"}
!1482 = !{!1483}
!1483 = distinct !{!1483, !1481}
!1484 = distinct !{!1484, !3}
!1485 = !{!1486}
!1486 = distinct !{!1486, !1487}
!1487 = distinct !{!1487, !"LVerDomain"}
!1488 = !{!1489}
!1489 = distinct !{!1489, !1487}
!1490 = distinct !{!1490, !3}
!1491 = !{!1492}
!1492 = distinct !{!1492, !1493}
!1493 = distinct !{!1493, !"LVerDomain"}
!1494 = !{!1495}
!1495 = distinct !{!1495, !1493}
!1496 = distinct !{!1496, !3}
!1497 = distinct !{!1497, !3}
!1498 = !{!1499}
!1499 = distinct !{!1499, !1500}
!1500 = distinct !{!1500, !"LVerDomain"}
!1501 = !{!1502}
!1502 = distinct !{!1502, !1500}
!1503 = distinct !{!1503, !3}
!1504 = !{!1505}
!1505 = distinct !{!1505, !1506}
!1506 = distinct !{!1506, !"LVerDomain"}
!1507 = !{!1508}
!1508 = distinct !{!1508, !1506}
!1509 = distinct !{!1509, !3}
!1510 = !{!1511}
!1511 = distinct !{!1511, !1512}
!1512 = distinct !{!1512, !"LVerDomain"}
!1513 = !{!1514}
!1514 = distinct !{!1514, !1512}
!1515 = distinct !{!1515, !3}
!1516 = !{!1517}
!1517 = distinct !{!1517, !1518}
!1518 = distinct !{!1518, !"LVerDomain"}
!1519 = !{!1520}
!1520 = distinct !{!1520, !1518}
!1521 = distinct !{!1521, !3}
!1522 = !{!1523}
!1523 = distinct !{!1523, !1524}
!1524 = distinct !{!1524, !"LVerDomain"}
!1525 = !{!1526}
!1526 = distinct !{!1526, !1524}
!1527 = distinct !{!1527, !3}
!1528 = !{!1529}
!1529 = distinct !{!1529, !1530}
!1530 = distinct !{!1530, !"LVerDomain"}
!1531 = !{!1532}
!1532 = distinct !{!1532, !1530}
!1533 = distinct !{!1533, !3}
!1534 = !{!1535}
!1535 = distinct !{!1535, !1536}
!1536 = distinct !{!1536, !"LVerDomain"}
!1537 = !{!1538}
!1538 = distinct !{!1538, !1536}
!1539 = distinct !{!1539, !3}
!1540 = !{!1541}
!1541 = distinct !{!1541, !1542}
!1542 = distinct !{!1542, !"LVerDomain"}
!1543 = !{!1544}
!1544 = distinct !{!1544, !1542}
!1545 = !{!1546}
!1546 = distinct !{!1546, !1547}
!1547 = distinct !{!1547, !"LVerDomain"}
!1548 = !{!1549}
!1549 = distinct !{!1549, !1547}
!1550 = distinct !{!1550, !3}
!1551 = !{!1552}
!1552 = distinct !{!1552, !1553}
!1553 = distinct !{!1553, !"LVerDomain"}
!1554 = !{!1555}
!1555 = distinct !{!1555, !1553}
!1556 = distinct !{!1556, !3}
!1557 = !{!1558}
!1558 = distinct !{!1558, !1559}
!1559 = distinct !{!1559, !"LVerDomain"}
!1560 = !{!1561}
!1561 = distinct !{!1561, !1559}
!1562 = distinct !{!1562, !3}
!1563 = !{!1564}
!1564 = distinct !{!1564, !1565}
!1565 = distinct !{!1565, !"LVerDomain"}
!1566 = !{!1567}
!1567 = distinct !{!1567, !1565}
!1568 = distinct !{!1568, !3}
!1569 = !{!1570}
!1570 = distinct !{!1570, !1571}
!1571 = distinct !{!1571, !"LVerDomain"}
!1572 = !{!1573}
!1573 = distinct !{!1573, !1571}
!1574 = distinct !{!1574, !3}
!1575 = !{!1576}
!1576 = distinct !{!1576, !1577}
!1577 = distinct !{!1577, !"LVerDomain"}
!1578 = !{!1579}
!1579 = distinct !{!1579, !1577}
!1580 = distinct !{!1580, !3}
!1581 = !{!1582}
!1582 = distinct !{!1582, !1583}
!1583 = distinct !{!1583, !"LVerDomain"}
!1584 = !{!1585}
!1585 = distinct !{!1585, !1583}
!1586 = distinct !{!1586, !3}
!1587 = !{!1588}
!1588 = distinct !{!1588, !1589}
!1589 = distinct !{!1589, !"LVerDomain"}
!1590 = !{!1591}
!1591 = distinct !{!1591, !1589}
!1592 = distinct !{!1592, !3}
!1593 = !{!1594}
!1594 = distinct !{!1594, !1595}
!1595 = distinct !{!1595, !"LVerDomain"}
!1596 = !{!1597}
!1597 = distinct !{!1597, !1595}
!1598 = distinct !{!1598, !3}
!1599 = distinct !{!1599, !3}
!1600 = !{!1601}
!1601 = distinct !{!1601, !1602}
!1602 = distinct !{!1602, !"LVerDomain"}
!1603 = !{!1604}
!1604 = distinct !{!1604, !1602}
!1605 = distinct !{!1605, !3}
!1606 = !{!1607}
!1607 = distinct !{!1607, !1608}
!1608 = distinct !{!1608, !"LVerDomain"}
!1609 = !{!1610}
!1610 = distinct !{!1610, !1608}
!1611 = distinct !{!1611, !3}
!1612 = !{!1613}
!1613 = distinct !{!1613, !1614}
!1614 = distinct !{!1614, !"LVerDomain"}
!1615 = !{!1616}
!1616 = distinct !{!1616, !1614}
!1617 = distinct !{!1617, !3}
!1618 = !{!1619}
!1619 = distinct !{!1619, !1620}
!1620 = distinct !{!1620, !"LVerDomain"}
!1621 = !{!1622}
!1622 = distinct !{!1622, !1620}
!1623 = distinct !{!1623, !3}
!1624 = !{!1625}
!1625 = distinct !{!1625, !1626}
!1626 = distinct !{!1626, !"LVerDomain"}
!1627 = !{!1628}
!1628 = distinct !{!1628, !1626}
!1629 = distinct !{!1629, !3}
!1630 = !{!1631}
!1631 = distinct !{!1631, !1632}
!1632 = distinct !{!1632, !"LVerDomain"}
!1633 = !{!1634}
!1634 = distinct !{!1634, !1632}
!1635 = distinct !{!1635, !3}
!1636 = !{!1637}
!1637 = distinct !{!1637, !1638}
!1638 = distinct !{!1638, !"LVerDomain"}
!1639 = !{!1640}
!1640 = distinct !{!1640, !1638}
!1641 = distinct !{!1641, !3}
!1642 = !{!1643}
!1643 = distinct !{!1643, !1644}
!1644 = distinct !{!1644, !"LVerDomain"}
!1645 = !{!1646}
!1646 = distinct !{!1646, !1644}
