; ModuleID = '../../third_party/libaom/source/libaom/aom_dsp/x86/adaptive_quantize_sse2.c'
source_filename = "../../third_party/libaom/source/libaom/aom_dsp/x86/adaptive_quantize_sse2.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_quantize_b_adaptive_sse2(i32* nocapture readonly, i64, i16* nocapture readonly, i16* nocapture readonly, i16* nocapture readonly, i16* nocapture readonly, i32* nocapture, i32* nocapture, i16* nocapture readonly, i16* nocapture, i16* nocapture readonly, i16* nocapture readonly) local_unnamed_addr #0 {
  %13 = alloca <2 x i64>, align 16
  %14 = bitcast <2 x i64>* %13 to [4 x i32]*
  %15 = bitcast <2 x i64>* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %15) #4
  %16 = getelementptr inbounds [4 x i32], [4 x i32]* %14, i64 0, i64 1
  %17 = getelementptr inbounds [4 x i32], [4 x i32]* %14, i64 0, i64 2
  %18 = getelementptr inbounds [4 x i32], [4 x i32]* %14, i64 0, i64 3
  %19 = load i16, i16* %8, align 2
  %20 = sext i16 %19 to i32
  %21 = mul nsw i32 %20, 325
  %22 = add nsw i32 %21, 64
  %23 = ashr i32 %22, 7
  %24 = load i16, i16* %2, align 2
  %25 = sext i16 %24 to i32
  %26 = shl nsw i32 %25, 5
  %27 = add nsw i32 %26, -1
  %28 = add nsw i32 %27, %23
  %29 = bitcast <2 x i64>* %13 to i32*
  store i32 %28, i32* %29, align 16
  %30 = getelementptr inbounds i16, i16* %8, i64 1
  %31 = load i16, i16* %30, align 2
  %32 = sext i16 %31 to i32
  %33 = mul nsw i32 %32, 325
  %34 = add nsw i32 %33, 64
  %35 = ashr i32 %34, 7
  %36 = getelementptr inbounds i16, i16* %2, i64 1
  %37 = load i16, i16* %36, align 2
  %38 = sext i16 %37 to i32
  %39 = shl nsw i32 %38, 5
  %40 = add nsw i32 %39, -1
  %41 = add nsw i32 %40, %35
  store i32 %41, i32* %16, align 4
  store i32 %41, i32* %18, align 4
  store i32 %41, i32* %17, align 8
  %42 = load <2 x i64>, <2 x i64>* %13, align 16
  %43 = shufflevector <2 x i64> %42, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %44 = bitcast i16* %2 to <8 x i16>*
  %45 = load <8 x i16>, <8 x i16>* %44, align 16
  %46 = bitcast i16* %3 to <2 x i64>*
  %47 = load <2 x i64>, <2 x i64>* %46, align 16
  %48 = bitcast i16* %4 to <2 x i64>*
  %49 = load <2 x i64>, <2 x i64>* %48, align 16
  %50 = add <8 x i16> %45, <i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1>
  %51 = bitcast <8 x i16> %50 to <2 x i64>
  %52 = bitcast i16* %8 to <2 x i64>*
  %53 = load <2 x i64>, <2 x i64>* %52, align 16
  %54 = bitcast i16* %5 to <2 x i64>*
  %55 = load <2 x i64>, <2 x i64>* %54, align 16
  %56 = bitcast i32* %0 to <4 x i32>*
  %57 = load <4 x i32>, <4 x i32>* %56, align 16
  %58 = getelementptr inbounds i32, i32* %0, i64 4
  %59 = bitcast i32* %58 to <4 x i32>*
  %60 = load <4 x i32>, <4 x i32>* %59, align 16
  %61 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %57, <4 x i32> %60) #4
  %62 = getelementptr inbounds i32, i32* %0, i64 8
  %63 = bitcast i32* %62 to <4 x i32>*
  %64 = load <4 x i32>, <4 x i32>* %63, align 16
  %65 = getelementptr inbounds i32, i32* %0, i64 12
  %66 = bitcast i32* %65 to <4 x i32>*
  %67 = load <4 x i32>, <4 x i32>* %66, align 16
  %68 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %64, <4 x i32> %67) #4
  %69 = ashr <8 x i16> %61, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %70 = ashr <8 x i16> %68, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %71 = xor <8 x i16> %69, %61
  %72 = sub <8 x i16> %71, %69
  %73 = xor <8 x i16> %70, %68
  %74 = sub <8 x i16> %73, %70
  %75 = shufflevector <8 x i16> %72, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %76 = shufflevector <8 x i16> %72, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %77 = shufflevector <8 x i16> %74, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %78 = shufflevector <8 x i16> %74, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %79 = bitcast <8 x i16> %75 to <4 x i32>
  %80 = shl <4 x i32> %79, <i32 5, i32 5, i32 5, i32 5>
  %81 = bitcast <2 x i64> %42 to <4 x i32>
  %82 = icmp sgt <4 x i32> %80, %81
  %83 = sext <4 x i1> %82 to <4 x i32>
  %84 = bitcast <8 x i16> %76 to <4 x i32>
  %85 = shl <4 x i32> %84, <i32 5, i32 5, i32 5, i32 5>
  %86 = bitcast <2 x i64> %43 to <4 x i32>
  %87 = icmp sgt <4 x i32> %85, %86
  %88 = sext <4 x i1> %87 to <4 x i32>
  %89 = bitcast <8 x i16> %77 to <4 x i32>
  %90 = shl <4 x i32> %89, <i32 5, i32 5, i32 5, i32 5>
  %91 = icmp sgt <4 x i32> %90, %86
  %92 = sext <4 x i1> %91 to <4 x i32>
  %93 = bitcast <8 x i16> %78 to <4 x i32>
  %94 = shl <4 x i32> %93, <i32 5, i32 5, i32 5, i32 5>
  %95 = icmp sgt <4 x i32> %94, %86
  %96 = sext <4 x i1> %95 to <4 x i32>
  %97 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %83, <4 x i32> %88) #4
  %98 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %92, <4 x i32> %96) #4
  %99 = or <8 x i16> %98, %97
  %100 = bitcast <8 x i16> %99 to <16 x i8>
  %101 = icmp slt <16 x i8> %100, zeroinitializer
  %102 = bitcast <16 x i1> %101 to i16
  %103 = icmp eq i16 %102, 0
  br i1 %103, label %114, label %104

104:                                              ; preds = %12
  %105 = bitcast i16* %11 to <8 x i16>*
  %106 = load <8 x i16>, <8 x i16>* %105, align 16
  %107 = getelementptr inbounds i16, i16* %11, i64 8
  %108 = bitcast i16* %107 to <8 x i16>*
  %109 = load <8 x i16>, <8 x i16>* %108, align 16
  %110 = and <8 x i16> %106, %97
  %111 = and <8 x i16> %109, %98
  %112 = icmp sgt <8 x i16> %110, %111
  %113 = select <8 x i1> %112, <8 x i16> %110, <8 x i16> %111
  br label %114

114:                                              ; preds = %12, %104
  %115 = phi i32 [ 0, %12 ], [ 1, %104 ]
  %116 = phi <8 x i16> [ zeroinitializer, %12 ], [ %113, %104 ]
  %117 = icmp sgt <8 x i16> %116, zeroinitializer
  %118 = select <8 x i1> %117, <8 x i16> %116, <8 x i16> zeroinitializer
  %119 = icmp sgt <8 x i16> %72, %50
  %120 = sext <8 x i1> %119 to <8 x i16>
  %121 = shufflevector <2 x i64> %51, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %122 = bitcast <2 x i64> %121 to <8 x i16>
  %123 = icmp sgt <8 x i16> %74, %122
  %124 = sext <8 x i1> %123 to <8 x i16>
  %125 = or <8 x i1> %123, %119
  %126 = sext <8 x i1> %125 to <8 x i16>
  %127 = bitcast <8 x i16> %126 to <16 x i8>
  %128 = icmp slt <16 x i8> %127, zeroinitializer
  %129 = bitcast <16 x i1> %128 to i16
  %130 = icmp eq i16 %129, 0
  br i1 %130, label %131, label %138

131:                                              ; preds = %114
  %132 = bitcast i32* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %132, i8 0, i64 64, i1 false)
  %133 = shufflevector <2 x i64> %47, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %134 = shufflevector <2 x i64> %49, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %135 = shufflevector <2 x i64> %55, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %136 = shufflevector <2 x i64> %53, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %137 = bitcast i32* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %137, i8 0, i64 64, i1 false)
  br label %204

138:                                              ; preds = %114
  %139 = bitcast i16* %11 to <8 x i16>*
  %140 = load <8 x i16>, <8 x i16>* %139, align 16
  %141 = getelementptr inbounds i16, i16* %11, i64 8
  %142 = bitcast i16* %141 to <8 x i16>*
  %143 = load <8 x i16>, <8 x i16>* %142, align 16
  %144 = and <8 x i16> %140, %120
  %145 = and <8 x i16> %143, %124
  %146 = icmp sgt <8 x i16> %144, %145
  %147 = select <8 x i1> %146, <8 x i16> %144, <8 x i16> %145
  %148 = icmp sgt <8 x i16> %147, zeroinitializer
  %149 = select <8 x i1> %148, <8 x i16> %147, <8 x i16> zeroinitializer
  %150 = bitcast <2 x i64> %47 to <8 x i16>
  %151 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %72, <8 x i16> %150) #4
  %152 = bitcast <2 x i64> %49 to <8 x i16>
  %153 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %151, <8 x i16> %152) #4
  %154 = add <8 x i16> %153, %151
  %155 = bitcast <2 x i64> %55 to <8 x i16>
  %156 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %154, <8 x i16> %155) #4
  %157 = shufflevector <2 x i64> %47, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %158 = shufflevector <2 x i64> %49, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %159 = shufflevector <2 x i64> %55, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %160 = bitcast <2 x i64> %157 to <8 x i16>
  %161 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %74, <8 x i16> %160) #4
  %162 = bitcast <2 x i64> %158 to <8 x i16>
  %163 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %161, <8 x i16> %162) #4
  %164 = add <8 x i16> %163, %161
  %165 = bitcast <2 x i64> %159 to <8 x i16>
  %166 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %164, <8 x i16> %165) #4
  %167 = xor <8 x i16> %156, %69
  %168 = sub <8 x i16> %167, %69
  %169 = xor <8 x i16> %166, %70
  %170 = sub <8 x i16> %169, %70
  %171 = and <8 x i16> %168, %120
  %172 = and <8 x i16> %170, %124
  %173 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %171, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #4
  %174 = shufflevector <8 x i16> %171, <8 x i16> %173, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %175 = shufflevector <8 x i16> %171, <8 x i16> %173, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %176 = bitcast i32* %6 to <8 x i16>*
  store <8 x i16> %174, <8 x i16>* %176, align 16
  %177 = getelementptr inbounds i32, i32* %6, i64 4
  %178 = bitcast i32* %177 to <8 x i16>*
  store <8 x i16> %175, <8 x i16>* %178, align 16
  %179 = getelementptr inbounds i32, i32* %6, i64 8
  %180 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %172, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #4
  %181 = shufflevector <8 x i16> %172, <8 x i16> %180, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %182 = shufflevector <8 x i16> %172, <8 x i16> %180, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %183 = bitcast i32* %179 to <8 x i16>*
  store <8 x i16> %181, <8 x i16>* %183, align 16
  %184 = getelementptr inbounds i32, i32* %6, i64 12
  %185 = bitcast i32* %184 to <8 x i16>*
  store <8 x i16> %182, <8 x i16>* %185, align 16
  %186 = bitcast <2 x i64> %53 to <8 x i16>
  %187 = mul <8 x i16> %171, %186
  %188 = shufflevector <2 x i64> %53, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %189 = bitcast <2 x i64> %188 to <8 x i16>
  %190 = mul <8 x i16> %172, %189
  %191 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %187, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #4
  %192 = shufflevector <8 x i16> %187, <8 x i16> %191, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %193 = shufflevector <8 x i16> %187, <8 x i16> %191, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %194 = bitcast i32* %7 to <8 x i16>*
  store <8 x i16> %192, <8 x i16>* %194, align 16
  %195 = getelementptr inbounds i32, i32* %7, i64 4
  %196 = bitcast i32* %195 to <8 x i16>*
  store <8 x i16> %193, <8 x i16>* %196, align 16
  %197 = getelementptr inbounds i32, i32* %7, i64 8
  %198 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %190, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #4
  %199 = shufflevector <8 x i16> %190, <8 x i16> %198, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %200 = shufflevector <8 x i16> %190, <8 x i16> %198, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %201 = bitcast i32* %197 to <8 x i16>*
  store <8 x i16> %199, <8 x i16>* %201, align 16
  %202 = getelementptr inbounds i32, i32* %7, i64 12
  %203 = bitcast i32* %202 to <8 x i16>*
  store <8 x i16> %200, <8 x i16>* %203, align 16
  br label %204

204:                                              ; preds = %138, %131
  %205 = phi <8 x i16> [ zeroinitializer, %131 ], [ %149, %138 ]
  %206 = phi i32 [ 0, %131 ], [ 1, %138 ]
  %207 = phi <2 x i64> [ %133, %131 ], [ %157, %138 ]
  %208 = phi <2 x i64> [ %134, %131 ], [ %158, %138 ]
  %209 = phi <2 x i64> [ %136, %131 ], [ %188, %138 ]
  %210 = phi <2 x i64> [ %135, %131 ], [ %159, %138 ]
  %211 = icmp sgt i64 %1, 16
  br i1 %211, label %212, label %368

212:                                              ; preds = %204
  %213 = bitcast <2 x i64> %207 to <8 x i16>
  %214 = bitcast <2 x i64> %208 to <8 x i16>
  %215 = bitcast <2 x i64> %210 to <8 x i16>
  %216 = bitcast <2 x i64> %209 to <8 x i16>
  br label %217

217:                                              ; preds = %212, %307
  %218 = phi i64 [ 16, %212 ], [ %310, %307 ]
  %219 = phi <8 x i16> [ %205, %212 ], [ %308, %307 ]
  %220 = phi <8 x i16> [ %118, %212 ], [ %285, %307 ]
  %221 = phi i32 [ %206, %212 ], [ %309, %307 ]
  %222 = phi i32 [ %115, %212 ], [ %282, %307 ]
  %223 = getelementptr inbounds i32, i32* %0, i64 %218
  %224 = bitcast i32* %223 to <4 x i32>*
  %225 = load <4 x i32>, <4 x i32>* %224, align 16
  %226 = getelementptr inbounds i32, i32* %223, i64 4
  %227 = bitcast i32* %226 to <4 x i32>*
  %228 = load <4 x i32>, <4 x i32>* %227, align 16
  %229 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %225, <4 x i32> %228) #4
  %230 = getelementptr inbounds i32, i32* %223, i64 8
  %231 = bitcast i32* %230 to <4 x i32>*
  %232 = load <4 x i32>, <4 x i32>* %231, align 16
  %233 = getelementptr inbounds i32, i32* %230, i64 4
  %234 = bitcast i32* %233 to <4 x i32>*
  %235 = load <4 x i32>, <4 x i32>* %234, align 16
  %236 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %232, <4 x i32> %235) #4
  %237 = ashr <8 x i16> %229, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %238 = ashr <8 x i16> %236, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %239 = xor <8 x i16> %237, %229
  %240 = sub <8 x i16> %239, %237
  %241 = xor <8 x i16> %238, %236
  %242 = sub <8 x i16> %241, %238
  %243 = getelementptr inbounds i16, i16* %11, i64 %218
  %244 = shufflevector <8 x i16> %240, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %245 = shufflevector <8 x i16> %240, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %246 = shufflevector <8 x i16> %242, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %247 = shufflevector <8 x i16> %242, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %248 = bitcast <8 x i16> %244 to <4 x i32>
  %249 = shl <4 x i32> %248, <i32 5, i32 5, i32 5, i32 5>
  %250 = icmp sgt <4 x i32> %249, %86
  %251 = sext <4 x i1> %250 to <4 x i32>
  %252 = bitcast <8 x i16> %245 to <4 x i32>
  %253 = shl <4 x i32> %252, <i32 5, i32 5, i32 5, i32 5>
  %254 = icmp sgt <4 x i32> %253, %86
  %255 = sext <4 x i1> %254 to <4 x i32>
  %256 = bitcast <8 x i16> %246 to <4 x i32>
  %257 = shl <4 x i32> %256, <i32 5, i32 5, i32 5, i32 5>
  %258 = icmp sgt <4 x i32> %257, %86
  %259 = sext <4 x i1> %258 to <4 x i32>
  %260 = bitcast <8 x i16> %247 to <4 x i32>
  %261 = shl <4 x i32> %260, <i32 5, i32 5, i32 5, i32 5>
  %262 = icmp sgt <4 x i32> %261, %86
  %263 = sext <4 x i1> %262 to <4 x i32>
  %264 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %251, <4 x i32> %255) #4
  %265 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %259, <4 x i32> %263) #4
  %266 = or <8 x i16> %265, %264
  %267 = bitcast <8 x i16> %266 to <16 x i8>
  %268 = icmp slt <16 x i8> %267, zeroinitializer
  %269 = bitcast <16 x i1> %268 to i16
  %270 = icmp eq i16 %269, 0
  br i1 %270, label %281, label %271

271:                                              ; preds = %217
  %272 = bitcast i16* %243 to <8 x i16>*
  %273 = load <8 x i16>, <8 x i16>* %272, align 16
  %274 = getelementptr inbounds i16, i16* %243, i64 8
  %275 = bitcast i16* %274 to <8 x i16>*
  %276 = load <8 x i16>, <8 x i16>* %275, align 16
  %277 = and <8 x i16> %273, %264
  %278 = and <8 x i16> %276, %265
  %279 = icmp sgt <8 x i16> %277, %278
  %280 = select <8 x i1> %279, <8 x i16> %277, <8 x i16> %278
  br label %281

281:                                              ; preds = %217, %271
  %282 = phi i32 [ %222, %217 ], [ 1, %271 ]
  %283 = phi <8 x i16> [ zeroinitializer, %217 ], [ %280, %271 ]
  %284 = icmp sgt <8 x i16> %283, %220
  %285 = select <8 x i1> %284, <8 x i16> %283, <8 x i16> %220
  %286 = icmp sgt <8 x i16> %240, %122
  %287 = sext <8 x i1> %286 to <8 x i16>
  %288 = icmp sgt <8 x i16> %242, %122
  %289 = sext <8 x i1> %288 to <8 x i16>
  %290 = or <8 x i1> %288, %286
  %291 = sext <8 x i1> %290 to <8 x i16>
  %292 = bitcast <8 x i16> %291 to <16 x i8>
  %293 = icmp slt <16 x i8> %292, zeroinitializer
  %294 = bitcast <16 x i1> %293 to i16
  %295 = icmp eq i16 %294, 0
  br i1 %295, label %296, label %312

296:                                              ; preds = %281
  %297 = icmp sgt <8 x i16> %219, zeroinitializer
  %298 = select <8 x i1> %297, <8 x i16> %219, <8 x i16> zeroinitializer
  %299 = getelementptr inbounds i32, i32* %6, i64 %218
  %300 = bitcast i32* %299 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %300, align 16
  %301 = getelementptr inbounds i32, i32* %299, i64 4
  %302 = getelementptr inbounds i32, i32* %7, i64 %218
  %303 = bitcast i32* %302 to <2 x i64>*
  %304 = bitcast i32* %301 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %304, i8 0, i64 48, i1 false)
  store <2 x i64> zeroinitializer, <2 x i64>* %303, align 16
  %305 = getelementptr inbounds i32, i32* %302, i64 4
  %306 = bitcast i32* %305 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %306, i8 0, i64 48, i1 false)
  br label %307

307:                                              ; preds = %296, %312
  %308 = phi <8 x i16> [ %298, %296 ], [ %323, %312 ]
  %309 = phi i32 [ %221, %296 ], [ 1, %312 ]
  %310 = add nuw i64 %218, 16
  %311 = icmp slt i64 %310, %1
  br i1 %311, label %217, label %368

312:                                              ; preds = %281
  %313 = bitcast i16* %243 to <8 x i16>*
  %314 = load <8 x i16>, <8 x i16>* %313, align 16
  %315 = getelementptr inbounds i16, i16* %243, i64 8
  %316 = bitcast i16* %315 to <8 x i16>*
  %317 = load <8 x i16>, <8 x i16>* %316, align 16
  %318 = and <8 x i16> %314, %287
  %319 = and <8 x i16> %317, %289
  %320 = icmp sgt <8 x i16> %318, %319
  %321 = select <8 x i1> %320, <8 x i16> %318, <8 x i16> %319
  %322 = icmp sgt <8 x i16> %321, %219
  %323 = select <8 x i1> %322, <8 x i16> %321, <8 x i16> %219
  %324 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %240, <8 x i16> %213) #4
  %325 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %324, <8 x i16> %214) #4
  %326 = add <8 x i16> %325, %324
  %327 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %326, <8 x i16> %215) #4
  %328 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %242, <8 x i16> %213) #4
  %329 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %328, <8 x i16> %214) #4
  %330 = add <8 x i16> %329, %328
  %331 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %330, <8 x i16> %215) #4
  %332 = xor <8 x i16> %327, %237
  %333 = sub <8 x i16> %332, %237
  %334 = xor <8 x i16> %331, %238
  %335 = sub <8 x i16> %334, %238
  %336 = and <8 x i16> %333, %287
  %337 = and <8 x i16> %335, %289
  %338 = getelementptr inbounds i32, i32* %6, i64 %218
  %339 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %336, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #4
  %340 = shufflevector <8 x i16> %336, <8 x i16> %339, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %341 = shufflevector <8 x i16> %336, <8 x i16> %339, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %342 = bitcast i32* %338 to <8 x i16>*
  store <8 x i16> %340, <8 x i16>* %342, align 16
  %343 = getelementptr inbounds i32, i32* %338, i64 4
  %344 = bitcast i32* %343 to <8 x i16>*
  store <8 x i16> %341, <8 x i16>* %344, align 16
  %345 = getelementptr inbounds i32, i32* %338, i64 8
  %346 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %337, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #4
  %347 = shufflevector <8 x i16> %337, <8 x i16> %346, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %348 = shufflevector <8 x i16> %337, <8 x i16> %346, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %349 = bitcast i32* %345 to <8 x i16>*
  store <8 x i16> %347, <8 x i16>* %349, align 16
  %350 = getelementptr inbounds i32, i32* %345, i64 4
  %351 = bitcast i32* %350 to <8 x i16>*
  store <8 x i16> %348, <8 x i16>* %351, align 16
  %352 = mul <8 x i16> %336, %216
  %353 = mul <8 x i16> %337, %216
  %354 = getelementptr inbounds i32, i32* %7, i64 %218
  %355 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %352, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #4
  %356 = shufflevector <8 x i16> %352, <8 x i16> %355, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %357 = shufflevector <8 x i16> %352, <8 x i16> %355, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %358 = bitcast i32* %354 to <8 x i16>*
  store <8 x i16> %356, <8 x i16>* %358, align 16
  %359 = getelementptr inbounds i32, i32* %354, i64 4
  %360 = bitcast i32* %359 to <8 x i16>*
  store <8 x i16> %357, <8 x i16>* %360, align 16
  %361 = getelementptr inbounds i32, i32* %354, i64 8
  %362 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %353, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #4
  %363 = shufflevector <8 x i16> %353, <8 x i16> %362, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %364 = shufflevector <8 x i16> %353, <8 x i16> %362, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %365 = bitcast i32* %361 to <8 x i16>*
  store <8 x i16> %363, <8 x i16>* %365, align 16
  %366 = getelementptr inbounds i32, i32* %361, i64 4
  %367 = bitcast i32* %366 to <8 x i16>*
  store <8 x i16> %364, <8 x i16>* %367, align 16
  br label %307

368:                                              ; preds = %307, %204
  %369 = phi i32 [ %115, %204 ], [ %282, %307 ]
  %370 = phi i32 [ %206, %204 ], [ %309, %307 ]
  %371 = phi <8 x i16> [ %118, %204 ], [ %285, %307 ]
  %372 = phi <8 x i16> [ %205, %204 ], [ %308, %307 ]
  %373 = bitcast <8 x i16> %372 to <2 x i64>
  %374 = icmp eq i32 %369, 0
  br i1 %374, label %394, label %375

375:                                              ; preds = %368
  %376 = bitcast <8 x i16> %371 to <2 x i64>
  %377 = shufflevector <2 x i64> %376, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %378 = bitcast <2 x i64> %377 to <8 x i16>
  %379 = icmp slt <8 x i16> %371, %378
  %380 = select <8 x i1> %379, <8 x i16> %378, <8 x i16> %371
  %381 = bitcast <8 x i16> %380 to <4 x i32>
  %382 = shufflevector <4 x i32> %381, <4 x i32> undef, <4 x i32> <i32 1, i32 0, i32 0, i32 0>
  %383 = bitcast <4 x i32> %382 to <8 x i16>
  %384 = icmp slt <8 x i16> %380, %383
  %385 = select <8 x i1> %384, <8 x i16> %383, <8 x i16> %380
  %386 = bitcast <8 x i16> %385 to <4 x i32>
  %387 = lshr <4 x i32> %386, <i32 16, i32 16, i32 16, i32 16>
  %388 = bitcast <4 x i32> %387 to <8 x i16>
  %389 = icmp sgt <8 x i16> %385, %388
  %390 = select <8 x i1> %389, <8 x i16> %385, <8 x i16> %388
  %391 = extractelement <8 x i16> %390, i64 0
  %392 = zext i16 %391 to i32
  %393 = add nuw nsw i32 %392, 1
  br label %394

394:                                              ; preds = %368, %375
  %395 = phi i32 [ %393, %375 ], [ 0, %368 ]
  %396 = icmp eq i32 %370, 0
  br i1 %396, label %414, label %397

397:                                              ; preds = %394
  %398 = shufflevector <2 x i64> %373, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %399 = bitcast <2 x i64> %398 to <8 x i16>
  %400 = icmp slt <8 x i16> %372, %399
  %401 = select <8 x i1> %400, <8 x i16> %399, <8 x i16> %372
  %402 = bitcast <8 x i16> %401 to <4 x i32>
  %403 = shufflevector <4 x i32> %402, <4 x i32> undef, <4 x i32> <i32 1, i32 0, i32 0, i32 0>
  %404 = bitcast <4 x i32> %403 to <8 x i16>
  %405 = icmp slt <8 x i16> %401, %404
  %406 = select <8 x i1> %405, <8 x i16> %404, <8 x i16> %401
  %407 = bitcast <8 x i16> %406 to <4 x i32>
  %408 = lshr <4 x i32> %407, <i32 16, i32 16, i32 16, i32 16>
  %409 = bitcast <4 x i32> %408 to <8 x i16>
  %410 = icmp sgt <8 x i16> %406, %409
  %411 = select <8 x i1> %410, <8 x i16> %406, <8 x i16> %409
  %412 = extractelement <8 x i16> %411, i64 0
  %413 = zext i16 %412 to i32
  br label %414

414:                                              ; preds = %394, %397
  %415 = phi i32 [ %413, %397 ], [ -1, %394 ]
  %416 = icmp slt i32 %415, %395
  br i1 %416, label %420, label %417

417:                                              ; preds = %414
  %418 = sext i32 %415 to i64
  %419 = sext i32 %395 to i64
  br label %422

420:                                              ; preds = %422, %414
  %421 = zext i32 %395 to i64
  br label %431

422:                                              ; preds = %417, %422
  %423 = phi i64 [ %418, %417 ], [ %429, %422 ]
  %424 = getelementptr inbounds i16, i16* %10, i64 %423
  %425 = load i16, i16* %424, align 2
  %426 = sext i16 %425 to i64
  %427 = getelementptr inbounds i32, i32* %6, i64 %426
  store i32 0, i32* %427, align 4
  %428 = getelementptr inbounds i32, i32* %7, i64 %426
  store i32 0, i32* %428, align 4
  %429 = add nsw i64 %423, -1
  %430 = icmp sgt i64 %423, %419
  br i1 %430, label %422, label %420

431:                                              ; preds = %420, %435
  %432 = phi i64 [ %421, %420 ], [ %433, %435 ]
  %433 = add nsw i64 %432, -1
  %434 = icmp sgt i64 %432, 0
  br i1 %434, label %435, label %445

435:                                              ; preds = %431
  %436 = getelementptr inbounds i16, i16* %10, i64 %433
  %437 = load i16, i16* %436, align 2
  %438 = sext i16 %437 to i64
  %439 = getelementptr inbounds i32, i32* %6, i64 %438
  %440 = load i32, i32* %439, align 4
  %441 = icmp eq i32 %440, 0
  br i1 %441, label %431, label %442

442:                                              ; preds = %435
  %443 = trunc i64 %433 to i16
  %444 = add i16 %443, 1
  br label %445

445:                                              ; preds = %431, %442
  %446 = phi i16 [ %444, %442 ], [ 0, %431 ]
  store i16 %446, i16* %9, align 2
  %447 = icmp sgt i32 %395, 0
  br i1 %447, label %448, label %462

448:                                              ; preds = %445, %448
  %449 = phi i64 [ %459, %448 ], [ 0, %445 ]
  %450 = phi i32 [ %458, %448 ], [ -1, %445 ]
  %451 = getelementptr inbounds i16, i16* %10, i64 %449
  %452 = load i16, i16* %451, align 2
  %453 = sext i16 %452 to i64
  %454 = getelementptr inbounds i32, i32* %6, i64 %453
  %455 = load i32, i32* %454, align 4
  %456 = icmp eq i32 %455, 0
  %457 = trunc i64 %449 to i32
  %458 = select i1 %456, i32 %450, i32 %457
  %459 = add nuw nsw i64 %449, 1
  %460 = icmp ult i64 %459, %421
  %461 = and i1 %456, %460
  br i1 %461, label %448, label %462

462:                                              ; preds = %448, %445
  %463 = phi i32 [ -1, %445 ], [ %458, %448 ]
  %464 = zext i16 %446 to i32
  %465 = add nsw i32 %464, -1
  %466 = icmp ne i16 %446, 0
  %467 = icmp eq i32 %463, %465
  %468 = and i1 %466, %467
  br i1 %468, label %469, label %499

469:                                              ; preds = %462
  %470 = sext i32 %463 to i64
  %471 = getelementptr inbounds i16, i16* %10, i64 %470
  %472 = load i16, i16* %471, align 2
  %473 = sext i16 %472 to i64
  %474 = getelementptr inbounds i32, i32* %6, i64 %473
  %475 = load i32, i32* %474, align 4
  switch i32 %475, label %499 [
    i32 1, label %476
    i32 -1, label %476
  ]

476:                                              ; preds = %469, %469
  %477 = getelementptr inbounds i32, i32* %0, i64 %473
  %478 = load i32, i32* %477, align 4
  %479 = shl nsw i32 %478, 5
  %480 = ashr i32 %478, 31
  %481 = xor i32 %479, %480
  %482 = sub nsw i32 %481, %480
  %483 = icmp ne i16 %472, 0
  %484 = zext i1 %483 to i64
  %485 = getelementptr inbounds i16, i16* %8, i64 %484
  %486 = load i16, i16* %485, align 2
  %487 = sext i16 %486 to i32
  %488 = mul nsw i32 %487, 525
  %489 = add nsw i32 %488, 64
  %490 = ashr i32 %489, 7
  %491 = getelementptr inbounds i16, i16* %2, i64 %484
  %492 = load i16, i16* %491, align 2
  %493 = sext i16 %492 to i32
  %494 = shl nsw i32 %493, 5
  %495 = add nsw i32 %490, %494
  %496 = icmp slt i32 %482, %495
  br i1 %496, label %497, label %499

497:                                              ; preds = %476
  store i32 0, i32* %474, align 4
  %498 = getelementptr inbounds i32, i32* %7, i64 %473
  store i32 0, i32* %498, align 4
  store i16 0, i16* %9, align 2
  br label %499

499:                                              ; preds = %469, %497, %476, %462
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %15) #4
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_quantize_b_32x32_adaptive_sse2(i32* nocapture readonly, i64, i16* nocapture readonly, i16* nocapture readonly, i16* nocapture readonly, i16* nocapture readonly, i32* nocapture, i32* nocapture, i16* nocapture readonly, i16* nocapture, i16* nocapture readonly, i16* nocapture readonly) local_unnamed_addr #0 {
  %13 = alloca [2 x i32], align 4
  %14 = alloca <2 x i64>, align 16
  %15 = bitcast <2 x i64>* %14 to [4 x i32]*
  %16 = bitcast [2 x i32]* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %16) #4
  %17 = getelementptr inbounds [2 x i32], [2 x i32]* %13, i64 0, i64 0
  %18 = getelementptr inbounds [2 x i32], [2 x i32]* %13, i64 0, i64 1
  %19 = load i16, i16* %2, align 2
  %20 = sext i16 %19 to i32
  %21 = add nsw i32 %20, 1
  %22 = ashr i32 %21, 1
  store i32 %22, i32* %17, align 4
  %23 = getelementptr inbounds i16, i16* %2, i64 1
  %24 = load i16, i16* %23, align 2
  %25 = sext i16 %24 to i32
  %26 = add nsw i32 %25, 1
  %27 = ashr i32 %26, 1
  store i32 %27, i32* %18, align 4
  %28 = bitcast <2 x i64>* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %28) #4
  %29 = getelementptr inbounds [4 x i32], [4 x i32]* %15, i64 0, i64 1
  %30 = getelementptr inbounds [4 x i32], [4 x i32]* %15, i64 0, i64 2
  %31 = getelementptr inbounds [4 x i32], [4 x i32]* %15, i64 0, i64 3
  %32 = load i16, i16* %8, align 2
  %33 = sext i16 %32 to i32
  %34 = mul nsw i32 %33, 325
  %35 = add nsw i32 %34, 64
  %36 = ashr i32 %35, 7
  %37 = shl nsw i32 %22, 5
  %38 = add nsw i32 %37, -1
  %39 = add nsw i32 %38, %36
  %40 = bitcast <2 x i64>* %14 to i32*
  store i32 %39, i32* %40, align 16
  %41 = getelementptr inbounds i16, i16* %8, i64 1
  %42 = load i16, i16* %41, align 2
  %43 = sext i16 %42 to i32
  %44 = mul nsw i32 %43, 325
  %45 = add nsw i32 %44, 64
  %46 = ashr i32 %45, 7
  %47 = shl nsw i32 %27, 5
  %48 = add nsw i32 %47, -1
  %49 = add nsw i32 %48, %46
  store i32 %49, i32* %29, align 4
  store i32 %49, i32* %31, align 4
  store i32 %49, i32* %30, align 8
  %50 = load <2 x i64>, <2 x i64>* %14, align 16
  %51 = shufflevector <2 x i64> %50, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %52 = bitcast i16* %2 to <8 x i16>*
  %53 = load <8 x i16>, <8 x i16>* %52, align 16
  %54 = bitcast i16* %3 to <8 x i16>*
  %55 = load <8 x i16>, <8 x i16>* %54, align 16
  %56 = bitcast i16* %4 to <2 x i64>*
  %57 = load <2 x i64>, <2 x i64>* %56, align 16
  %58 = bitcast i16* %8 to <2 x i64>*
  %59 = load <2 x i64>, <2 x i64>* %58, align 16
  %60 = bitcast i16* %5 to <2 x i64>*
  %61 = load <2 x i64>, <2 x i64>* %60, align 16
  %62 = add <8 x i16> %53, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %63 = add <8 x i16> %55, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %64 = lshr <8 x i16> %62, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %65 = lshr <8 x i16> %63, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %66 = bitcast <8 x i16> %65 to <2 x i64>
  %67 = add <8 x i16> %64, <i16 undef, i16 undef, i16 undef, i16 undef, i16 -1, i16 -1, i16 -1, i16 -1>
  %68 = bitcast <8 x i16> %67 to <2 x i64>
  %69 = bitcast i32* %0 to <4 x i32>*
  %70 = load <4 x i32>, <4 x i32>* %69, align 16
  %71 = getelementptr inbounds i32, i32* %0, i64 4
  %72 = bitcast i32* %71 to <4 x i32>*
  %73 = load <4 x i32>, <4 x i32>* %72, align 16
  %74 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %70, <4 x i32> %73) #4
  %75 = getelementptr inbounds i32, i32* %0, i64 8
  %76 = bitcast i32* %75 to <4 x i32>*
  %77 = load <4 x i32>, <4 x i32>* %76, align 16
  %78 = getelementptr inbounds i32, i32* %0, i64 12
  %79 = bitcast i32* %78 to <4 x i32>*
  %80 = load <4 x i32>, <4 x i32>* %79, align 16
  %81 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %77, <4 x i32> %80) #4
  %82 = ashr <8 x i16> %74, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %83 = ashr <8 x i16> %81, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %84 = xor <8 x i16> %82, %74
  %85 = sub <8 x i16> %84, %82
  %86 = xor <8 x i16> %83, %81
  %87 = sub <8 x i16> %86, %83
  %88 = shufflevector <8 x i16> %85, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %89 = shufflevector <8 x i16> %85, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %90 = shufflevector <8 x i16> %87, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %91 = shufflevector <8 x i16> %87, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %92 = bitcast <8 x i16> %88 to <4 x i32>
  %93 = shl <4 x i32> %92, <i32 5, i32 5, i32 5, i32 5>
  %94 = bitcast <2 x i64> %50 to <4 x i32>
  %95 = icmp sgt <4 x i32> %93, %94
  %96 = sext <4 x i1> %95 to <4 x i32>
  %97 = bitcast <8 x i16> %89 to <4 x i32>
  %98 = shl <4 x i32> %97, <i32 5, i32 5, i32 5, i32 5>
  %99 = bitcast <2 x i64> %51 to <4 x i32>
  %100 = icmp sgt <4 x i32> %98, %99
  %101 = sext <4 x i1> %100 to <4 x i32>
  %102 = bitcast <8 x i16> %90 to <4 x i32>
  %103 = shl <4 x i32> %102, <i32 5, i32 5, i32 5, i32 5>
  %104 = icmp sgt <4 x i32> %103, %99
  %105 = sext <4 x i1> %104 to <4 x i32>
  %106 = bitcast <8 x i16> %91 to <4 x i32>
  %107 = shl <4 x i32> %106, <i32 5, i32 5, i32 5, i32 5>
  %108 = icmp sgt <4 x i32> %107, %99
  %109 = sext <4 x i1> %108 to <4 x i32>
  %110 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %96, <4 x i32> %101) #4
  %111 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %105, <4 x i32> %109) #4
  %112 = or <8 x i16> %111, %110
  %113 = bitcast <8 x i16> %112 to <16 x i8>
  %114 = icmp slt <16 x i8> %113, zeroinitializer
  %115 = bitcast <16 x i1> %114 to i16
  %116 = icmp eq i16 %115, 0
  br i1 %116, label %127, label %117

117:                                              ; preds = %12
  %118 = bitcast i16* %11 to <8 x i16>*
  %119 = load <8 x i16>, <8 x i16>* %118, align 16
  %120 = getelementptr inbounds i16, i16* %11, i64 8
  %121 = bitcast i16* %120 to <8 x i16>*
  %122 = load <8 x i16>, <8 x i16>* %121, align 16
  %123 = and <8 x i16> %119, %110
  %124 = and <8 x i16> %122, %111
  %125 = icmp sgt <8 x i16> %123, %124
  %126 = select <8 x i1> %125, <8 x i16> %123, <8 x i16> %124
  br label %127

127:                                              ; preds = %12, %117
  %128 = phi i32 [ 0, %12 ], [ 1, %117 ]
  %129 = phi <8 x i16> [ zeroinitializer, %12 ], [ %126, %117 ]
  %130 = icmp sgt <8 x i16> %129, zeroinitializer
  %131 = select <8 x i1> %130, <8 x i16> %129, <8 x i16> zeroinitializer
  %132 = icmp sge <8 x i16> %85, %64
  %133 = sext <8 x i1> %132 to <8 x i16>
  %134 = shufflevector <2 x i64> %68, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %135 = bitcast <2 x i64> %134 to <8 x i16>
  %136 = icmp sgt <8 x i16> %87, %135
  %137 = sext <8 x i1> %136 to <8 x i16>
  %138 = or <8 x i1> %136, %132
  %139 = sext <8 x i1> %138 to <8 x i16>
  %140 = bitcast <8 x i16> %139 to <16 x i8>
  %141 = icmp slt <16 x i8> %140, zeroinitializer
  %142 = bitcast <16 x i1> %141 to i16
  %143 = icmp eq i16 %142, 0
  br i1 %143, label %144, label %151

144:                                              ; preds = %127
  %145 = bitcast i32* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %145, i8 0, i64 64, i1 false)
  %146 = shufflevector <2 x i64> %66, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %147 = shufflevector <2 x i64> %57, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %148 = shufflevector <2 x i64> %61, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %149 = shufflevector <2 x i64> %59, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %150 = bitcast i32* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %150, i8 0, i64 64, i1 false)
  br label %254

151:                                              ; preds = %127
  %152 = bitcast i16* %11 to <8 x i16>*
  %153 = load <8 x i16>, <8 x i16>* %152, align 16
  %154 = getelementptr inbounds i16, i16* %11, i64 8
  %155 = bitcast i16* %154 to <8 x i16>*
  %156 = load <8 x i16>, <8 x i16>* %155, align 16
  %157 = and <8 x i16> %153, %133
  %158 = and <8 x i16> %156, %137
  %159 = icmp sgt <8 x i16> %157, %158
  %160 = select <8 x i1> %159, <8 x i16> %157, <8 x i16> %158
  %161 = icmp sgt <8 x i16> %160, zeroinitializer
  %162 = select <8 x i1> %161, <8 x i16> %160, <8 x i16> zeroinitializer
  %163 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %85, <8 x i16> %65) #4
  %164 = bitcast <2 x i64> %57 to <8 x i16>
  %165 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %163, <8 x i16> %164) #4
  %166 = add <8 x i16> %165, %163
  %167 = bitcast <2 x i64> %61 to <8 x i16>
  %168 = mul <8 x i16> %166, %167
  %169 = lshr <8 x i16> %168, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %170 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %166, <8 x i16> %167) #4
  %171 = shl <8 x i16> %170, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %172 = or <8 x i16> %169, %171
  %173 = shufflevector <2 x i64> %66, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %174 = shufflevector <2 x i64> %57, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %175 = shufflevector <2 x i64> %61, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %176 = bitcast <2 x i64> %173 to <8 x i16>
  %177 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %87, <8 x i16> %176) #4
  %178 = bitcast <2 x i64> %174 to <8 x i16>
  %179 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %177, <8 x i16> %178) #4
  %180 = add <8 x i16> %179, %177
  %181 = bitcast <2 x i64> %175 to <8 x i16>
  %182 = mul <8 x i16> %180, %181
  %183 = lshr <8 x i16> %182, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %184 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %180, <8 x i16> %181) #4
  %185 = shl <8 x i16> %184, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %186 = or <8 x i16> %183, %185
  %187 = xor <8 x i16> %172, %82
  %188 = sub <8 x i16> %187, %82
  %189 = xor <8 x i16> %186, %83
  %190 = sub <8 x i16> %189, %83
  %191 = and <8 x i16> %188, %133
  %192 = and <8 x i16> %190, %137
  %193 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %191, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #4
  %194 = shufflevector <8 x i16> %191, <8 x i16> %193, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %195 = shufflevector <8 x i16> %191, <8 x i16> %193, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %196 = bitcast i32* %6 to <8 x i16>*
  store <8 x i16> %194, <8 x i16>* %196, align 16
  %197 = getelementptr inbounds i32, i32* %6, i64 4
  %198 = bitcast i32* %197 to <8 x i16>*
  store <8 x i16> %195, <8 x i16>* %198, align 16
  %199 = getelementptr inbounds i32, i32* %6, i64 8
  %200 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %192, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #4
  %201 = shufflevector <8 x i16> %192, <8 x i16> %200, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %202 = shufflevector <8 x i16> %192, <8 x i16> %200, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %203 = bitcast i32* %199 to <8 x i16>*
  store <8 x i16> %201, <8 x i16>* %203, align 16
  %204 = getelementptr inbounds i32, i32* %6, i64 12
  %205 = bitcast i32* %204 to <8 x i16>*
  store <8 x i16> %202, <8 x i16>* %205, align 16
  %206 = ashr <8 x i16> %191, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %207 = xor <8 x i16> %206, %191
  %208 = sub <8 x i16> %207, %206
  %209 = shufflevector <8 x i16> %206, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %210 = shufflevector <8 x i16> %206, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %211 = bitcast <2 x i64> %59 to <8 x i16>
  %212 = mul <8 x i16> %208, %211
  %213 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %208, <8 x i16> %211) #4
  %214 = shufflevector <8 x i16> %212, <8 x i16> %213, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %215 = shufflevector <8 x i16> %212, <8 x i16> %213, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %216 = bitcast <8 x i16> %214 to <4 x i32>
  %217 = lshr <4 x i32> %216, <i32 1, i32 1, i32 1, i32 1>
  %218 = bitcast <8 x i16> %215 to <4 x i32>
  %219 = lshr <4 x i32> %218, <i32 1, i32 1, i32 1, i32 1>
  %220 = bitcast <8 x i16> %209 to <4 x i32>
  %221 = xor <4 x i32> %217, %220
  %222 = sub <4 x i32> %221, %220
  %223 = bitcast <8 x i16> %210 to <4 x i32>
  %224 = xor <4 x i32> %219, %223
  %225 = sub <4 x i32> %224, %223
  %226 = bitcast i32* %7 to <4 x i32>*
  store <4 x i32> %222, <4 x i32>* %226, align 16
  %227 = getelementptr inbounds i32, i32* %7, i64 4
  %228 = bitcast i32* %227 to <4 x i32>*
  store <4 x i32> %225, <4 x i32>* %228, align 16
  %229 = shufflevector <2 x i64> %59, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %230 = getelementptr inbounds i32, i32* %7, i64 8
  %231 = ashr <8 x i16> %192, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %232 = xor <8 x i16> %231, %192
  %233 = sub <8 x i16> %232, %231
  %234 = shufflevector <8 x i16> %231, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %235 = shufflevector <8 x i16> %231, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %236 = bitcast <2 x i64> %229 to <8 x i16>
  %237 = mul <8 x i16> %233, %236
  %238 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %233, <8 x i16> %236) #4
  %239 = shufflevector <8 x i16> %237, <8 x i16> %238, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %240 = shufflevector <8 x i16> %237, <8 x i16> %238, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %241 = bitcast <8 x i16> %239 to <4 x i32>
  %242 = lshr <4 x i32> %241, <i32 1, i32 1, i32 1, i32 1>
  %243 = bitcast <8 x i16> %240 to <4 x i32>
  %244 = lshr <4 x i32> %243, <i32 1, i32 1, i32 1, i32 1>
  %245 = bitcast <8 x i16> %234 to <4 x i32>
  %246 = xor <4 x i32> %242, %245
  %247 = sub <4 x i32> %246, %245
  %248 = bitcast <8 x i16> %235 to <4 x i32>
  %249 = xor <4 x i32> %244, %248
  %250 = sub <4 x i32> %249, %248
  %251 = bitcast i32* %230 to <4 x i32>*
  store <4 x i32> %247, <4 x i32>* %251, align 16
  %252 = getelementptr inbounds i32, i32* %7, i64 12
  %253 = bitcast i32* %252 to <4 x i32>*
  store <4 x i32> %250, <4 x i32>* %253, align 16
  br label %254

254:                                              ; preds = %151, %144
  %255 = phi <8 x i16> [ zeroinitializer, %144 ], [ %162, %151 ]
  %256 = phi i32 [ 0, %144 ], [ 1, %151 ]
  %257 = phi <2 x i64> [ %148, %144 ], [ %175, %151 ]
  %258 = phi <2 x i64> [ %149, %144 ], [ %229, %151 ]
  %259 = phi <2 x i64> [ %147, %144 ], [ %174, %151 ]
  %260 = phi <2 x i64> [ %146, %144 ], [ %173, %151 ]
  %261 = icmp sgt i64 %1, 16
  br i1 %261, label %262, label %456

262:                                              ; preds = %254
  %263 = bitcast <2 x i64> %260 to <8 x i16>
  %264 = bitcast <2 x i64> %259 to <8 x i16>
  %265 = bitcast <2 x i64> %257 to <8 x i16>
  %266 = bitcast <2 x i64> %258 to <8 x i16>
  br label %267

267:                                              ; preds = %262, %357
  %268 = phi i64 [ 16, %262 ], [ %360, %357 ]
  %269 = phi <8 x i16> [ %255, %262 ], [ %358, %357 ]
  %270 = phi <8 x i16> [ %131, %262 ], [ %335, %357 ]
  %271 = phi i32 [ %256, %262 ], [ %359, %357 ]
  %272 = phi i32 [ %128, %262 ], [ %332, %357 ]
  %273 = getelementptr inbounds i32, i32* %0, i64 %268
  %274 = bitcast i32* %273 to <4 x i32>*
  %275 = load <4 x i32>, <4 x i32>* %274, align 16
  %276 = getelementptr inbounds i32, i32* %273, i64 4
  %277 = bitcast i32* %276 to <4 x i32>*
  %278 = load <4 x i32>, <4 x i32>* %277, align 16
  %279 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %275, <4 x i32> %278) #4
  %280 = getelementptr inbounds i32, i32* %273, i64 8
  %281 = bitcast i32* %280 to <4 x i32>*
  %282 = load <4 x i32>, <4 x i32>* %281, align 16
  %283 = getelementptr inbounds i32, i32* %280, i64 4
  %284 = bitcast i32* %283 to <4 x i32>*
  %285 = load <4 x i32>, <4 x i32>* %284, align 16
  %286 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %282, <4 x i32> %285) #4
  %287 = ashr <8 x i16> %279, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %288 = ashr <8 x i16> %286, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %289 = xor <8 x i16> %287, %279
  %290 = sub <8 x i16> %289, %287
  %291 = xor <8 x i16> %288, %286
  %292 = sub <8 x i16> %291, %288
  %293 = getelementptr inbounds i16, i16* %11, i64 %268
  %294 = shufflevector <8 x i16> %290, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %295 = shufflevector <8 x i16> %290, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %296 = shufflevector <8 x i16> %292, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %297 = shufflevector <8 x i16> %292, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %298 = bitcast <8 x i16> %294 to <4 x i32>
  %299 = shl <4 x i32> %298, <i32 5, i32 5, i32 5, i32 5>
  %300 = icmp sgt <4 x i32> %299, %99
  %301 = sext <4 x i1> %300 to <4 x i32>
  %302 = bitcast <8 x i16> %295 to <4 x i32>
  %303 = shl <4 x i32> %302, <i32 5, i32 5, i32 5, i32 5>
  %304 = icmp sgt <4 x i32> %303, %99
  %305 = sext <4 x i1> %304 to <4 x i32>
  %306 = bitcast <8 x i16> %296 to <4 x i32>
  %307 = shl <4 x i32> %306, <i32 5, i32 5, i32 5, i32 5>
  %308 = icmp sgt <4 x i32> %307, %99
  %309 = sext <4 x i1> %308 to <4 x i32>
  %310 = bitcast <8 x i16> %297 to <4 x i32>
  %311 = shl <4 x i32> %310, <i32 5, i32 5, i32 5, i32 5>
  %312 = icmp sgt <4 x i32> %311, %99
  %313 = sext <4 x i1> %312 to <4 x i32>
  %314 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %301, <4 x i32> %305) #4
  %315 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %309, <4 x i32> %313) #4
  %316 = or <8 x i16> %315, %314
  %317 = bitcast <8 x i16> %316 to <16 x i8>
  %318 = icmp slt <16 x i8> %317, zeroinitializer
  %319 = bitcast <16 x i1> %318 to i16
  %320 = icmp eq i16 %319, 0
  br i1 %320, label %331, label %321

321:                                              ; preds = %267
  %322 = bitcast i16* %293 to <8 x i16>*
  %323 = load <8 x i16>, <8 x i16>* %322, align 16
  %324 = getelementptr inbounds i16, i16* %293, i64 8
  %325 = bitcast i16* %324 to <8 x i16>*
  %326 = load <8 x i16>, <8 x i16>* %325, align 16
  %327 = and <8 x i16> %323, %314
  %328 = and <8 x i16> %326, %315
  %329 = icmp sgt <8 x i16> %327, %328
  %330 = select <8 x i1> %329, <8 x i16> %327, <8 x i16> %328
  br label %331

331:                                              ; preds = %267, %321
  %332 = phi i32 [ %272, %267 ], [ 1, %321 ]
  %333 = phi <8 x i16> [ zeroinitializer, %267 ], [ %330, %321 ]
  %334 = icmp sgt <8 x i16> %333, %270
  %335 = select <8 x i1> %334, <8 x i16> %333, <8 x i16> %270
  %336 = icmp sgt <8 x i16> %290, %135
  %337 = sext <8 x i1> %336 to <8 x i16>
  %338 = icmp sgt <8 x i16> %292, %135
  %339 = sext <8 x i1> %338 to <8 x i16>
  %340 = or <8 x i1> %338, %336
  %341 = sext <8 x i1> %340 to <8 x i16>
  %342 = bitcast <8 x i16> %341 to <16 x i8>
  %343 = icmp slt <16 x i8> %342, zeroinitializer
  %344 = bitcast <16 x i1> %343 to i16
  %345 = icmp eq i16 %344, 0
  br i1 %345, label %346, label %362

346:                                              ; preds = %331
  %347 = icmp sgt <8 x i16> %269, zeroinitializer
  %348 = select <8 x i1> %347, <8 x i16> %269, <8 x i16> zeroinitializer
  %349 = getelementptr inbounds i32, i32* %6, i64 %268
  %350 = bitcast i32* %349 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %350, align 16
  %351 = getelementptr inbounds i32, i32* %349, i64 4
  %352 = getelementptr inbounds i32, i32* %7, i64 %268
  %353 = bitcast i32* %352 to <2 x i64>*
  %354 = bitcast i32* %351 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %354, i8 0, i64 48, i1 false)
  store <2 x i64> zeroinitializer, <2 x i64>* %353, align 16
  %355 = getelementptr inbounds i32, i32* %352, i64 4
  %356 = bitcast i32* %355 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %356, i8 0, i64 48, i1 false)
  br label %357

357:                                              ; preds = %346, %362
  %358 = phi <8 x i16> [ %348, %346 ], [ %373, %362 ]
  %359 = phi i32 [ %271, %346 ], [ 1, %362 ]
  %360 = add nuw i64 %268, 16
  %361 = icmp slt i64 %360, %1
  br i1 %361, label %267, label %456

362:                                              ; preds = %331
  %363 = bitcast i16* %293 to <8 x i16>*
  %364 = load <8 x i16>, <8 x i16>* %363, align 16
  %365 = getelementptr inbounds i16, i16* %293, i64 8
  %366 = bitcast i16* %365 to <8 x i16>*
  %367 = load <8 x i16>, <8 x i16>* %366, align 16
  %368 = and <8 x i16> %364, %337
  %369 = and <8 x i16> %367, %339
  %370 = icmp sgt <8 x i16> %368, %369
  %371 = select <8 x i1> %370, <8 x i16> %368, <8 x i16> %369
  %372 = icmp sgt <8 x i16> %371, %269
  %373 = select <8 x i1> %372, <8 x i16> %371, <8 x i16> %269
  %374 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %290, <8 x i16> %263) #4
  %375 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %374, <8 x i16> %264) #4
  %376 = add <8 x i16> %375, %374
  %377 = mul <8 x i16> %376, %265
  %378 = lshr <8 x i16> %377, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %379 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %376, <8 x i16> %265) #4
  %380 = shl <8 x i16> %379, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %381 = or <8 x i16> %378, %380
  %382 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %292, <8 x i16> %263) #4
  %383 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %382, <8 x i16> %264) #4
  %384 = add <8 x i16> %383, %382
  %385 = mul <8 x i16> %384, %265
  %386 = lshr <8 x i16> %385, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %387 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %384, <8 x i16> %265) #4
  %388 = shl <8 x i16> %387, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %389 = or <8 x i16> %386, %388
  %390 = xor <8 x i16> %381, %287
  %391 = sub <8 x i16> %390, %287
  %392 = xor <8 x i16> %389, %288
  %393 = sub <8 x i16> %392, %288
  %394 = and <8 x i16> %391, %337
  %395 = and <8 x i16> %393, %339
  %396 = getelementptr inbounds i32, i32* %6, i64 %268
  %397 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %394, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #4
  %398 = shufflevector <8 x i16> %394, <8 x i16> %397, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %399 = shufflevector <8 x i16> %394, <8 x i16> %397, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %400 = bitcast i32* %396 to <8 x i16>*
  store <8 x i16> %398, <8 x i16>* %400, align 16
  %401 = getelementptr inbounds i32, i32* %396, i64 4
  %402 = bitcast i32* %401 to <8 x i16>*
  store <8 x i16> %399, <8 x i16>* %402, align 16
  %403 = getelementptr inbounds i32, i32* %396, i64 8
  %404 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %395, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #4
  %405 = shufflevector <8 x i16> %395, <8 x i16> %404, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %406 = shufflevector <8 x i16> %395, <8 x i16> %404, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %407 = bitcast i32* %403 to <8 x i16>*
  store <8 x i16> %405, <8 x i16>* %407, align 16
  %408 = getelementptr inbounds i32, i32* %403, i64 4
  %409 = bitcast i32* %408 to <8 x i16>*
  store <8 x i16> %406, <8 x i16>* %409, align 16
  %410 = getelementptr inbounds i32, i32* %7, i64 %268
  %411 = ashr <8 x i16> %394, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %412 = xor <8 x i16> %411, %394
  %413 = sub <8 x i16> %412, %411
  %414 = shufflevector <8 x i16> %411, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %415 = shufflevector <8 x i16> %411, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %416 = mul <8 x i16> %413, %266
  %417 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %413, <8 x i16> %266) #4
  %418 = shufflevector <8 x i16> %416, <8 x i16> %417, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %419 = shufflevector <8 x i16> %416, <8 x i16> %417, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %420 = bitcast <8 x i16> %418 to <4 x i32>
  %421 = lshr <4 x i32> %420, <i32 1, i32 1, i32 1, i32 1>
  %422 = bitcast <8 x i16> %419 to <4 x i32>
  %423 = lshr <4 x i32> %422, <i32 1, i32 1, i32 1, i32 1>
  %424 = bitcast <8 x i16> %414 to <4 x i32>
  %425 = xor <4 x i32> %421, %424
  %426 = sub <4 x i32> %425, %424
  %427 = bitcast <8 x i16> %415 to <4 x i32>
  %428 = xor <4 x i32> %423, %427
  %429 = sub <4 x i32> %428, %427
  %430 = bitcast i32* %410 to <4 x i32>*
  store <4 x i32> %426, <4 x i32>* %430, align 16
  %431 = getelementptr inbounds i32, i32* %410, i64 4
  %432 = bitcast i32* %431 to <4 x i32>*
  store <4 x i32> %429, <4 x i32>* %432, align 16
  %433 = getelementptr inbounds i32, i32* %410, i64 8
  %434 = ashr <8 x i16> %395, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %435 = xor <8 x i16> %434, %395
  %436 = sub <8 x i16> %435, %434
  %437 = shufflevector <8 x i16> %434, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %438 = shufflevector <8 x i16> %434, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %439 = mul <8 x i16> %436, %266
  %440 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %436, <8 x i16> %266) #4
  %441 = shufflevector <8 x i16> %439, <8 x i16> %440, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %442 = shufflevector <8 x i16> %439, <8 x i16> %440, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %443 = bitcast <8 x i16> %441 to <4 x i32>
  %444 = lshr <4 x i32> %443, <i32 1, i32 1, i32 1, i32 1>
  %445 = bitcast <8 x i16> %442 to <4 x i32>
  %446 = lshr <4 x i32> %445, <i32 1, i32 1, i32 1, i32 1>
  %447 = bitcast <8 x i16> %437 to <4 x i32>
  %448 = xor <4 x i32> %444, %447
  %449 = sub <4 x i32> %448, %447
  %450 = bitcast <8 x i16> %438 to <4 x i32>
  %451 = xor <4 x i32> %446, %450
  %452 = sub <4 x i32> %451, %450
  %453 = bitcast i32* %433 to <4 x i32>*
  store <4 x i32> %449, <4 x i32>* %453, align 16
  %454 = getelementptr inbounds i32, i32* %433, i64 4
  %455 = bitcast i32* %454 to <4 x i32>*
  store <4 x i32> %452, <4 x i32>* %455, align 16
  br label %357

456:                                              ; preds = %357, %254
  %457 = phi i32 [ %128, %254 ], [ %332, %357 ]
  %458 = phi i32 [ %256, %254 ], [ %359, %357 ]
  %459 = phi <8 x i16> [ %131, %254 ], [ %335, %357 ]
  %460 = phi <8 x i16> [ %255, %254 ], [ %358, %357 ]
  %461 = bitcast <8 x i16> %460 to <2 x i64>
  %462 = icmp eq i32 %457, 0
  br i1 %462, label %482, label %463

463:                                              ; preds = %456
  %464 = bitcast <8 x i16> %459 to <2 x i64>
  %465 = shufflevector <2 x i64> %464, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %466 = bitcast <2 x i64> %465 to <8 x i16>
  %467 = icmp slt <8 x i16> %459, %466
  %468 = select <8 x i1> %467, <8 x i16> %466, <8 x i16> %459
  %469 = bitcast <8 x i16> %468 to <4 x i32>
  %470 = shufflevector <4 x i32> %469, <4 x i32> undef, <4 x i32> <i32 1, i32 0, i32 0, i32 0>
  %471 = bitcast <4 x i32> %470 to <8 x i16>
  %472 = icmp slt <8 x i16> %468, %471
  %473 = select <8 x i1> %472, <8 x i16> %471, <8 x i16> %468
  %474 = bitcast <8 x i16> %473 to <4 x i32>
  %475 = lshr <4 x i32> %474, <i32 16, i32 16, i32 16, i32 16>
  %476 = bitcast <4 x i32> %475 to <8 x i16>
  %477 = icmp sgt <8 x i16> %473, %476
  %478 = select <8 x i1> %477, <8 x i16> %473, <8 x i16> %476
  %479 = extractelement <8 x i16> %478, i64 0
  %480 = zext i16 %479 to i32
  %481 = add nuw nsw i32 %480, 1
  br label %482

482:                                              ; preds = %456, %463
  %483 = phi i32 [ %481, %463 ], [ 0, %456 ]
  %484 = icmp eq i32 %458, 0
  br i1 %484, label %502, label %485

485:                                              ; preds = %482
  %486 = shufflevector <2 x i64> %461, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %487 = bitcast <2 x i64> %486 to <8 x i16>
  %488 = icmp slt <8 x i16> %460, %487
  %489 = select <8 x i1> %488, <8 x i16> %487, <8 x i16> %460
  %490 = bitcast <8 x i16> %489 to <4 x i32>
  %491 = shufflevector <4 x i32> %490, <4 x i32> undef, <4 x i32> <i32 1, i32 0, i32 0, i32 0>
  %492 = bitcast <4 x i32> %491 to <8 x i16>
  %493 = icmp slt <8 x i16> %489, %492
  %494 = select <8 x i1> %493, <8 x i16> %492, <8 x i16> %489
  %495 = bitcast <8 x i16> %494 to <4 x i32>
  %496 = lshr <4 x i32> %495, <i32 16, i32 16, i32 16, i32 16>
  %497 = bitcast <4 x i32> %496 to <8 x i16>
  %498 = icmp sgt <8 x i16> %494, %497
  %499 = select <8 x i1> %498, <8 x i16> %494, <8 x i16> %497
  %500 = extractelement <8 x i16> %499, i64 0
  %501 = zext i16 %500 to i32
  br label %502

502:                                              ; preds = %482, %485
  %503 = phi i32 [ %501, %485 ], [ -1, %482 ]
  %504 = icmp slt i32 %503, %483
  br i1 %504, label %508, label %505

505:                                              ; preds = %502
  %506 = sext i32 %503 to i64
  %507 = sext i32 %483 to i64
  br label %510

508:                                              ; preds = %510, %502
  %509 = zext i32 %483 to i64
  br label %519

510:                                              ; preds = %505, %510
  %511 = phi i64 [ %506, %505 ], [ %517, %510 ]
  %512 = getelementptr inbounds i16, i16* %10, i64 %511
  %513 = load i16, i16* %512, align 2
  %514 = sext i16 %513 to i64
  %515 = getelementptr inbounds i32, i32* %6, i64 %514
  store i32 0, i32* %515, align 4
  %516 = getelementptr inbounds i32, i32* %7, i64 %514
  store i32 0, i32* %516, align 4
  %517 = add nsw i64 %511, -1
  %518 = icmp sgt i64 %511, %507
  br i1 %518, label %510, label %508

519:                                              ; preds = %508, %523
  %520 = phi i64 [ %509, %508 ], [ %521, %523 ]
  %521 = add nsw i64 %520, -1
  %522 = icmp sgt i64 %520, 0
  br i1 %522, label %523, label %533

523:                                              ; preds = %519
  %524 = getelementptr inbounds i16, i16* %10, i64 %521
  %525 = load i16, i16* %524, align 2
  %526 = sext i16 %525 to i64
  %527 = getelementptr inbounds i32, i32* %6, i64 %526
  %528 = load i32, i32* %527, align 4
  %529 = icmp eq i32 %528, 0
  br i1 %529, label %519, label %530

530:                                              ; preds = %523
  %531 = trunc i64 %521 to i16
  %532 = add i16 %531, 1
  br label %533

533:                                              ; preds = %519, %530
  %534 = phi i16 [ %532, %530 ], [ 0, %519 ]
  store i16 %534, i16* %9, align 2
  %535 = icmp sgt i32 %483, 0
  br i1 %535, label %536, label %550

536:                                              ; preds = %533, %536
  %537 = phi i64 [ %547, %536 ], [ 0, %533 ]
  %538 = phi i32 [ %546, %536 ], [ -1, %533 ]
  %539 = getelementptr inbounds i16, i16* %10, i64 %537
  %540 = load i16, i16* %539, align 2
  %541 = sext i16 %540 to i64
  %542 = getelementptr inbounds i32, i32* %6, i64 %541
  %543 = load i32, i32* %542, align 4
  %544 = icmp eq i32 %543, 0
  %545 = trunc i64 %537 to i32
  %546 = select i1 %544, i32 %538, i32 %545
  %547 = add nuw nsw i64 %537, 1
  %548 = icmp ult i64 %547, %509
  %549 = and i1 %544, %548
  br i1 %549, label %536, label %550

550:                                              ; preds = %536, %533
  %551 = phi i32 [ -1, %533 ], [ %546, %536 ]
  %552 = zext i16 %534 to i32
  %553 = add nsw i32 %552, -1
  %554 = icmp ne i16 %534, 0
  %555 = icmp eq i32 %551, %553
  %556 = and i1 %554, %555
  br i1 %556, label %557, label %586

557:                                              ; preds = %550
  %558 = sext i32 %551 to i64
  %559 = getelementptr inbounds i16, i16* %10, i64 %558
  %560 = load i16, i16* %559, align 2
  %561 = sext i16 %560 to i64
  %562 = getelementptr inbounds i32, i32* %6, i64 %561
  %563 = load i32, i32* %562, align 4
  switch i32 %563, label %586 [
    i32 1, label %564
    i32 -1, label %564
  ]

564:                                              ; preds = %557, %557
  %565 = getelementptr inbounds i32, i32* %0, i64 %561
  %566 = load i32, i32* %565, align 4
  %567 = shl nsw i32 %566, 5
  %568 = ashr i32 %566, 31
  %569 = xor i32 %567, %568
  %570 = sub nsw i32 %569, %568
  %571 = icmp ne i16 %560, 0
  %572 = zext i1 %571 to i64
  %573 = getelementptr inbounds i16, i16* %8, i64 %572
  %574 = load i16, i16* %573, align 2
  %575 = sext i16 %574 to i32
  %576 = mul nsw i32 %575, 525
  %577 = add nsw i32 %576, 64
  %578 = ashr i32 %577, 7
  %579 = getelementptr inbounds [2 x i32], [2 x i32]* %13, i64 0, i64 %572
  %580 = load i32, i32* %579, align 4
  %581 = shl i32 %580, 5
  %582 = add nsw i32 %578, %581
  %583 = icmp slt i32 %570, %582
  br i1 %583, label %584, label %586

584:                                              ; preds = %564
  store i32 0, i32* %562, align 4
  %585 = getelementptr inbounds i32, i32* %7, i64 %561
  store i32 0, i32* %585, align 4
  store i16 0, i16* %9, align 2
  br label %586

586:                                              ; preds = %557, %584, %564, %550
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %28) #4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_quantize_b_64x64_adaptive_sse2(i32* nocapture readonly, i64, i16* nocapture readonly, i16* nocapture readonly, i16* nocapture readonly, i16* nocapture readonly, i32* nocapture, i32* nocapture, i16* nocapture readonly, i16* nocapture, i16* nocapture readonly, i16* nocapture readonly) local_unnamed_addr #0 {
  %13 = alloca [2 x i32], align 4
  %14 = alloca <2 x i64>, align 16
  %15 = bitcast <2 x i64>* %14 to [4 x i32]*
  %16 = bitcast [2 x i32]* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %16) #4
  %17 = getelementptr inbounds [2 x i32], [2 x i32]* %13, i64 0, i64 0
  %18 = getelementptr inbounds [2 x i32], [2 x i32]* %13, i64 0, i64 1
  %19 = load i16, i16* %2, align 2
  %20 = sext i16 %19 to i32
  %21 = add nsw i32 %20, 2
  %22 = ashr i32 %21, 2
  store i32 %22, i32* %17, align 4
  %23 = getelementptr inbounds i16, i16* %2, i64 1
  %24 = load i16, i16* %23, align 2
  %25 = sext i16 %24 to i32
  %26 = add nsw i32 %25, 2
  %27 = ashr i32 %26, 2
  store i32 %27, i32* %18, align 4
  %28 = bitcast <2 x i64>* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %28) #4
  %29 = getelementptr inbounds [4 x i32], [4 x i32]* %15, i64 0, i64 1
  %30 = getelementptr inbounds [4 x i32], [4 x i32]* %15, i64 0, i64 2
  %31 = getelementptr inbounds [4 x i32], [4 x i32]* %15, i64 0, i64 3
  %32 = load i16, i16* %8, align 2
  %33 = sext i16 %32 to i32
  %34 = mul nsw i32 %33, 325
  %35 = add nsw i32 %34, 64
  %36 = ashr i32 %35, 7
  %37 = shl nsw i32 %22, 5
  %38 = add nsw i32 %37, -1
  %39 = add nsw i32 %38, %36
  %40 = bitcast <2 x i64>* %14 to i32*
  store i32 %39, i32* %40, align 16
  %41 = getelementptr inbounds i16, i16* %8, i64 1
  %42 = load i16, i16* %41, align 2
  %43 = sext i16 %42 to i32
  %44 = mul nsw i32 %43, 325
  %45 = add nsw i32 %44, 64
  %46 = ashr i32 %45, 7
  %47 = shl nsw i32 %27, 5
  %48 = add nsw i32 %47, -1
  %49 = add nsw i32 %48, %46
  store i32 %49, i32* %29, align 4
  store i32 %49, i32* %31, align 4
  store i32 %49, i32* %30, align 8
  %50 = load <2 x i64>, <2 x i64>* %14, align 16
  %51 = shufflevector <2 x i64> %50, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %52 = bitcast i16* %2 to <8 x i16>*
  %53 = load <8 x i16>, <8 x i16>* %52, align 16
  %54 = bitcast i16* %3 to <8 x i16>*
  %55 = load <8 x i16>, <8 x i16>* %54, align 16
  %56 = bitcast i16* %4 to <2 x i64>*
  %57 = load <2 x i64>, <2 x i64>* %56, align 16
  %58 = bitcast i16* %8 to <2 x i64>*
  %59 = load <2 x i64>, <2 x i64>* %58, align 16
  %60 = bitcast i16* %5 to <2 x i64>*
  %61 = load <2 x i64>, <2 x i64>* %60, align 16
  %62 = add <8 x i16> %53, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %63 = add <8 x i16> %55, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %64 = lshr <8 x i16> %62, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %65 = lshr <8 x i16> %63, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %66 = bitcast <8 x i16> %65 to <2 x i64>
  %67 = add <8 x i16> %64, <i16 undef, i16 undef, i16 undef, i16 undef, i16 -1, i16 -1, i16 -1, i16 -1>
  %68 = bitcast <8 x i16> %67 to <2 x i64>
  %69 = bitcast i32* %0 to <4 x i32>*
  %70 = load <4 x i32>, <4 x i32>* %69, align 16
  %71 = getelementptr inbounds i32, i32* %0, i64 4
  %72 = bitcast i32* %71 to <4 x i32>*
  %73 = load <4 x i32>, <4 x i32>* %72, align 16
  %74 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %70, <4 x i32> %73) #4
  %75 = getelementptr inbounds i32, i32* %0, i64 8
  %76 = bitcast i32* %75 to <4 x i32>*
  %77 = load <4 x i32>, <4 x i32>* %76, align 16
  %78 = getelementptr inbounds i32, i32* %0, i64 12
  %79 = bitcast i32* %78 to <4 x i32>*
  %80 = load <4 x i32>, <4 x i32>* %79, align 16
  %81 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %77, <4 x i32> %80) #4
  %82 = ashr <8 x i16> %74, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %83 = ashr <8 x i16> %81, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %84 = xor <8 x i16> %82, %74
  %85 = sub <8 x i16> %84, %82
  %86 = xor <8 x i16> %83, %81
  %87 = sub <8 x i16> %86, %83
  %88 = shufflevector <8 x i16> %85, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %89 = shufflevector <8 x i16> %85, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %90 = shufflevector <8 x i16> %87, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %91 = shufflevector <8 x i16> %87, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %92 = bitcast <8 x i16> %88 to <4 x i32>
  %93 = shl <4 x i32> %92, <i32 5, i32 5, i32 5, i32 5>
  %94 = bitcast <2 x i64> %50 to <4 x i32>
  %95 = icmp sgt <4 x i32> %93, %94
  %96 = sext <4 x i1> %95 to <4 x i32>
  %97 = bitcast <8 x i16> %89 to <4 x i32>
  %98 = shl <4 x i32> %97, <i32 5, i32 5, i32 5, i32 5>
  %99 = bitcast <2 x i64> %51 to <4 x i32>
  %100 = icmp sgt <4 x i32> %98, %99
  %101 = sext <4 x i1> %100 to <4 x i32>
  %102 = bitcast <8 x i16> %90 to <4 x i32>
  %103 = shl <4 x i32> %102, <i32 5, i32 5, i32 5, i32 5>
  %104 = icmp sgt <4 x i32> %103, %99
  %105 = sext <4 x i1> %104 to <4 x i32>
  %106 = bitcast <8 x i16> %91 to <4 x i32>
  %107 = shl <4 x i32> %106, <i32 5, i32 5, i32 5, i32 5>
  %108 = icmp sgt <4 x i32> %107, %99
  %109 = sext <4 x i1> %108 to <4 x i32>
  %110 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %96, <4 x i32> %101) #4
  %111 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %105, <4 x i32> %109) #4
  %112 = or <8 x i16> %111, %110
  %113 = bitcast <8 x i16> %112 to <16 x i8>
  %114 = icmp slt <16 x i8> %113, zeroinitializer
  %115 = bitcast <16 x i1> %114 to i16
  %116 = icmp eq i16 %115, 0
  br i1 %116, label %127, label %117

117:                                              ; preds = %12
  %118 = bitcast i16* %11 to <8 x i16>*
  %119 = load <8 x i16>, <8 x i16>* %118, align 16
  %120 = getelementptr inbounds i16, i16* %11, i64 8
  %121 = bitcast i16* %120 to <8 x i16>*
  %122 = load <8 x i16>, <8 x i16>* %121, align 16
  %123 = and <8 x i16> %119, %110
  %124 = and <8 x i16> %122, %111
  %125 = icmp sgt <8 x i16> %123, %124
  %126 = select <8 x i1> %125, <8 x i16> %123, <8 x i16> %124
  br label %127

127:                                              ; preds = %12, %117
  %128 = phi i32 [ 0, %12 ], [ 1, %117 ]
  %129 = phi <8 x i16> [ zeroinitializer, %12 ], [ %126, %117 ]
  %130 = icmp sgt <8 x i16> %129, zeroinitializer
  %131 = select <8 x i1> %130, <8 x i16> %129, <8 x i16> zeroinitializer
  %132 = icmp sge <8 x i16> %85, %64
  %133 = sext <8 x i1> %132 to <8 x i16>
  %134 = shufflevector <2 x i64> %68, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %135 = bitcast <2 x i64> %134 to <8 x i16>
  %136 = icmp sgt <8 x i16> %87, %135
  %137 = sext <8 x i1> %136 to <8 x i16>
  %138 = or <8 x i1> %136, %132
  %139 = sext <8 x i1> %138 to <8 x i16>
  %140 = bitcast <8 x i16> %139 to <16 x i8>
  %141 = icmp slt <16 x i8> %140, zeroinitializer
  %142 = bitcast <16 x i1> %141 to i16
  %143 = icmp eq i16 %142, 0
  br i1 %143, label %144, label %151

144:                                              ; preds = %127
  %145 = bitcast i32* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %145, i8 0, i64 64, i1 false)
  %146 = shufflevector <2 x i64> %66, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %147 = shufflevector <2 x i64> %57, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %148 = shufflevector <2 x i64> %61, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %149 = shufflevector <2 x i64> %59, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %150 = bitcast i32* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %150, i8 0, i64 64, i1 false)
  br label %254

151:                                              ; preds = %127
  %152 = bitcast i16* %11 to <8 x i16>*
  %153 = load <8 x i16>, <8 x i16>* %152, align 16
  %154 = getelementptr inbounds i16, i16* %11, i64 8
  %155 = bitcast i16* %154 to <8 x i16>*
  %156 = load <8 x i16>, <8 x i16>* %155, align 16
  %157 = and <8 x i16> %153, %133
  %158 = and <8 x i16> %156, %137
  %159 = icmp sgt <8 x i16> %157, %158
  %160 = select <8 x i1> %159, <8 x i16> %157, <8 x i16> %158
  %161 = icmp sgt <8 x i16> %160, zeroinitializer
  %162 = select <8 x i1> %161, <8 x i16> %160, <8 x i16> zeroinitializer
  %163 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %85, <8 x i16> %65) #4
  %164 = bitcast <2 x i64> %57 to <8 x i16>
  %165 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %163, <8 x i16> %164) #4
  %166 = add <8 x i16> %165, %163
  %167 = bitcast <2 x i64> %61 to <8 x i16>
  %168 = mul <8 x i16> %166, %167
  %169 = lshr <8 x i16> %168, <i16 14, i16 14, i16 14, i16 14, i16 14, i16 14, i16 14, i16 14>
  %170 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %166, <8 x i16> %167) #4
  %171 = shl <8 x i16> %170, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %172 = or <8 x i16> %169, %171
  %173 = shufflevector <2 x i64> %66, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %174 = shufflevector <2 x i64> %57, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %175 = shufflevector <2 x i64> %61, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %176 = bitcast <2 x i64> %173 to <8 x i16>
  %177 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %87, <8 x i16> %176) #4
  %178 = bitcast <2 x i64> %174 to <8 x i16>
  %179 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %177, <8 x i16> %178) #4
  %180 = add <8 x i16> %179, %177
  %181 = bitcast <2 x i64> %175 to <8 x i16>
  %182 = mul <8 x i16> %180, %181
  %183 = lshr <8 x i16> %182, <i16 14, i16 14, i16 14, i16 14, i16 14, i16 14, i16 14, i16 14>
  %184 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %180, <8 x i16> %181) #4
  %185 = shl <8 x i16> %184, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %186 = or <8 x i16> %183, %185
  %187 = xor <8 x i16> %172, %82
  %188 = sub <8 x i16> %187, %82
  %189 = xor <8 x i16> %186, %83
  %190 = sub <8 x i16> %189, %83
  %191 = and <8 x i16> %188, %133
  %192 = and <8 x i16> %190, %137
  %193 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %191, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #4
  %194 = shufflevector <8 x i16> %191, <8 x i16> %193, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %195 = shufflevector <8 x i16> %191, <8 x i16> %193, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %196 = bitcast i32* %6 to <8 x i16>*
  store <8 x i16> %194, <8 x i16>* %196, align 16
  %197 = getelementptr inbounds i32, i32* %6, i64 4
  %198 = bitcast i32* %197 to <8 x i16>*
  store <8 x i16> %195, <8 x i16>* %198, align 16
  %199 = getelementptr inbounds i32, i32* %6, i64 8
  %200 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %192, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #4
  %201 = shufflevector <8 x i16> %192, <8 x i16> %200, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %202 = shufflevector <8 x i16> %192, <8 x i16> %200, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %203 = bitcast i32* %199 to <8 x i16>*
  store <8 x i16> %201, <8 x i16>* %203, align 16
  %204 = getelementptr inbounds i32, i32* %6, i64 12
  %205 = bitcast i32* %204 to <8 x i16>*
  store <8 x i16> %202, <8 x i16>* %205, align 16
  %206 = ashr <8 x i16> %191, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %207 = xor <8 x i16> %206, %191
  %208 = sub <8 x i16> %207, %206
  %209 = shufflevector <8 x i16> %206, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %210 = shufflevector <8 x i16> %206, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %211 = bitcast <2 x i64> %59 to <8 x i16>
  %212 = mul <8 x i16> %208, %211
  %213 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %208, <8 x i16> %211) #4
  %214 = shufflevector <8 x i16> %212, <8 x i16> %213, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %215 = shufflevector <8 x i16> %212, <8 x i16> %213, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %216 = bitcast <8 x i16> %214 to <4 x i32>
  %217 = lshr <4 x i32> %216, <i32 2, i32 2, i32 2, i32 2>
  %218 = bitcast <8 x i16> %215 to <4 x i32>
  %219 = lshr <4 x i32> %218, <i32 2, i32 2, i32 2, i32 2>
  %220 = bitcast <8 x i16> %209 to <4 x i32>
  %221 = xor <4 x i32> %217, %220
  %222 = sub <4 x i32> %221, %220
  %223 = bitcast <8 x i16> %210 to <4 x i32>
  %224 = xor <4 x i32> %219, %223
  %225 = sub <4 x i32> %224, %223
  %226 = bitcast i32* %7 to <4 x i32>*
  store <4 x i32> %222, <4 x i32>* %226, align 16
  %227 = getelementptr inbounds i32, i32* %7, i64 4
  %228 = bitcast i32* %227 to <4 x i32>*
  store <4 x i32> %225, <4 x i32>* %228, align 16
  %229 = shufflevector <2 x i64> %59, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %230 = getelementptr inbounds i32, i32* %7, i64 8
  %231 = ashr <8 x i16> %192, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %232 = xor <8 x i16> %231, %192
  %233 = sub <8 x i16> %232, %231
  %234 = shufflevector <8 x i16> %231, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %235 = shufflevector <8 x i16> %231, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %236 = bitcast <2 x i64> %229 to <8 x i16>
  %237 = mul <8 x i16> %233, %236
  %238 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %233, <8 x i16> %236) #4
  %239 = shufflevector <8 x i16> %237, <8 x i16> %238, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %240 = shufflevector <8 x i16> %237, <8 x i16> %238, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %241 = bitcast <8 x i16> %239 to <4 x i32>
  %242 = lshr <4 x i32> %241, <i32 2, i32 2, i32 2, i32 2>
  %243 = bitcast <8 x i16> %240 to <4 x i32>
  %244 = lshr <4 x i32> %243, <i32 2, i32 2, i32 2, i32 2>
  %245 = bitcast <8 x i16> %234 to <4 x i32>
  %246 = xor <4 x i32> %242, %245
  %247 = sub <4 x i32> %246, %245
  %248 = bitcast <8 x i16> %235 to <4 x i32>
  %249 = xor <4 x i32> %244, %248
  %250 = sub <4 x i32> %249, %248
  %251 = bitcast i32* %230 to <4 x i32>*
  store <4 x i32> %247, <4 x i32>* %251, align 16
  %252 = getelementptr inbounds i32, i32* %7, i64 12
  %253 = bitcast i32* %252 to <4 x i32>*
  store <4 x i32> %250, <4 x i32>* %253, align 16
  br label %254

254:                                              ; preds = %151, %144
  %255 = phi <8 x i16> [ zeroinitializer, %144 ], [ %162, %151 ]
  %256 = phi i32 [ 0, %144 ], [ 1, %151 ]
  %257 = phi <2 x i64> [ %148, %144 ], [ %175, %151 ]
  %258 = phi <2 x i64> [ %149, %144 ], [ %229, %151 ]
  %259 = phi <2 x i64> [ %147, %144 ], [ %174, %151 ]
  %260 = phi <2 x i64> [ %146, %144 ], [ %173, %151 ]
  %261 = icmp sgt i64 %1, 16
  br i1 %261, label %262, label %456

262:                                              ; preds = %254
  %263 = bitcast <2 x i64> %260 to <8 x i16>
  %264 = bitcast <2 x i64> %259 to <8 x i16>
  %265 = bitcast <2 x i64> %257 to <8 x i16>
  %266 = bitcast <2 x i64> %258 to <8 x i16>
  br label %267

267:                                              ; preds = %262, %357
  %268 = phi i64 [ 16, %262 ], [ %360, %357 ]
  %269 = phi <8 x i16> [ %255, %262 ], [ %358, %357 ]
  %270 = phi <8 x i16> [ %131, %262 ], [ %335, %357 ]
  %271 = phi i32 [ %256, %262 ], [ %359, %357 ]
  %272 = phi i32 [ %128, %262 ], [ %332, %357 ]
  %273 = getelementptr inbounds i32, i32* %0, i64 %268
  %274 = bitcast i32* %273 to <4 x i32>*
  %275 = load <4 x i32>, <4 x i32>* %274, align 16
  %276 = getelementptr inbounds i32, i32* %273, i64 4
  %277 = bitcast i32* %276 to <4 x i32>*
  %278 = load <4 x i32>, <4 x i32>* %277, align 16
  %279 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %275, <4 x i32> %278) #4
  %280 = getelementptr inbounds i32, i32* %273, i64 8
  %281 = bitcast i32* %280 to <4 x i32>*
  %282 = load <4 x i32>, <4 x i32>* %281, align 16
  %283 = getelementptr inbounds i32, i32* %280, i64 4
  %284 = bitcast i32* %283 to <4 x i32>*
  %285 = load <4 x i32>, <4 x i32>* %284, align 16
  %286 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %282, <4 x i32> %285) #4
  %287 = ashr <8 x i16> %279, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %288 = ashr <8 x i16> %286, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %289 = xor <8 x i16> %287, %279
  %290 = sub <8 x i16> %289, %287
  %291 = xor <8 x i16> %288, %286
  %292 = sub <8 x i16> %291, %288
  %293 = getelementptr inbounds i16, i16* %11, i64 %268
  %294 = shufflevector <8 x i16> %290, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %295 = shufflevector <8 x i16> %290, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %296 = shufflevector <8 x i16> %292, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %297 = shufflevector <8 x i16> %292, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %298 = bitcast <8 x i16> %294 to <4 x i32>
  %299 = shl <4 x i32> %298, <i32 5, i32 5, i32 5, i32 5>
  %300 = icmp sgt <4 x i32> %299, %99
  %301 = sext <4 x i1> %300 to <4 x i32>
  %302 = bitcast <8 x i16> %295 to <4 x i32>
  %303 = shl <4 x i32> %302, <i32 5, i32 5, i32 5, i32 5>
  %304 = icmp sgt <4 x i32> %303, %99
  %305 = sext <4 x i1> %304 to <4 x i32>
  %306 = bitcast <8 x i16> %296 to <4 x i32>
  %307 = shl <4 x i32> %306, <i32 5, i32 5, i32 5, i32 5>
  %308 = icmp sgt <4 x i32> %307, %99
  %309 = sext <4 x i1> %308 to <4 x i32>
  %310 = bitcast <8 x i16> %297 to <4 x i32>
  %311 = shl <4 x i32> %310, <i32 5, i32 5, i32 5, i32 5>
  %312 = icmp sgt <4 x i32> %311, %99
  %313 = sext <4 x i1> %312 to <4 x i32>
  %314 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %301, <4 x i32> %305) #4
  %315 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %309, <4 x i32> %313) #4
  %316 = or <8 x i16> %315, %314
  %317 = bitcast <8 x i16> %316 to <16 x i8>
  %318 = icmp slt <16 x i8> %317, zeroinitializer
  %319 = bitcast <16 x i1> %318 to i16
  %320 = icmp eq i16 %319, 0
  br i1 %320, label %331, label %321

321:                                              ; preds = %267
  %322 = bitcast i16* %293 to <8 x i16>*
  %323 = load <8 x i16>, <8 x i16>* %322, align 16
  %324 = getelementptr inbounds i16, i16* %293, i64 8
  %325 = bitcast i16* %324 to <8 x i16>*
  %326 = load <8 x i16>, <8 x i16>* %325, align 16
  %327 = and <8 x i16> %323, %314
  %328 = and <8 x i16> %326, %315
  %329 = icmp sgt <8 x i16> %327, %328
  %330 = select <8 x i1> %329, <8 x i16> %327, <8 x i16> %328
  br label %331

331:                                              ; preds = %267, %321
  %332 = phi i32 [ %272, %267 ], [ 1, %321 ]
  %333 = phi <8 x i16> [ zeroinitializer, %267 ], [ %330, %321 ]
  %334 = icmp sgt <8 x i16> %333, %270
  %335 = select <8 x i1> %334, <8 x i16> %333, <8 x i16> %270
  %336 = icmp sgt <8 x i16> %290, %135
  %337 = sext <8 x i1> %336 to <8 x i16>
  %338 = icmp sgt <8 x i16> %292, %135
  %339 = sext <8 x i1> %338 to <8 x i16>
  %340 = or <8 x i1> %338, %336
  %341 = sext <8 x i1> %340 to <8 x i16>
  %342 = bitcast <8 x i16> %341 to <16 x i8>
  %343 = icmp slt <16 x i8> %342, zeroinitializer
  %344 = bitcast <16 x i1> %343 to i16
  %345 = icmp eq i16 %344, 0
  br i1 %345, label %346, label %362

346:                                              ; preds = %331
  %347 = icmp sgt <8 x i16> %269, zeroinitializer
  %348 = select <8 x i1> %347, <8 x i16> %269, <8 x i16> zeroinitializer
  %349 = getelementptr inbounds i32, i32* %6, i64 %268
  %350 = bitcast i32* %349 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %350, align 16
  %351 = getelementptr inbounds i32, i32* %349, i64 4
  %352 = getelementptr inbounds i32, i32* %7, i64 %268
  %353 = bitcast i32* %352 to <2 x i64>*
  %354 = bitcast i32* %351 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %354, i8 0, i64 48, i1 false)
  store <2 x i64> zeroinitializer, <2 x i64>* %353, align 16
  %355 = getelementptr inbounds i32, i32* %352, i64 4
  %356 = bitcast i32* %355 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %356, i8 0, i64 48, i1 false)
  br label %357

357:                                              ; preds = %346, %362
  %358 = phi <8 x i16> [ %348, %346 ], [ %373, %362 ]
  %359 = phi i32 [ %271, %346 ], [ 1, %362 ]
  %360 = add nuw i64 %268, 16
  %361 = icmp slt i64 %360, %1
  br i1 %361, label %267, label %456

362:                                              ; preds = %331
  %363 = bitcast i16* %293 to <8 x i16>*
  %364 = load <8 x i16>, <8 x i16>* %363, align 16
  %365 = getelementptr inbounds i16, i16* %293, i64 8
  %366 = bitcast i16* %365 to <8 x i16>*
  %367 = load <8 x i16>, <8 x i16>* %366, align 16
  %368 = and <8 x i16> %364, %337
  %369 = and <8 x i16> %367, %339
  %370 = icmp sgt <8 x i16> %368, %369
  %371 = select <8 x i1> %370, <8 x i16> %368, <8 x i16> %369
  %372 = icmp sgt <8 x i16> %371, %269
  %373 = select <8 x i1> %372, <8 x i16> %371, <8 x i16> %269
  %374 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %290, <8 x i16> %263) #4
  %375 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %374, <8 x i16> %264) #4
  %376 = add <8 x i16> %375, %374
  %377 = mul <8 x i16> %376, %265
  %378 = lshr <8 x i16> %377, <i16 14, i16 14, i16 14, i16 14, i16 14, i16 14, i16 14, i16 14>
  %379 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %376, <8 x i16> %265) #4
  %380 = shl <8 x i16> %379, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %381 = or <8 x i16> %378, %380
  %382 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %292, <8 x i16> %263) #4
  %383 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %382, <8 x i16> %264) #4
  %384 = add <8 x i16> %383, %382
  %385 = mul <8 x i16> %384, %265
  %386 = lshr <8 x i16> %385, <i16 14, i16 14, i16 14, i16 14, i16 14, i16 14, i16 14, i16 14>
  %387 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %384, <8 x i16> %265) #4
  %388 = shl <8 x i16> %387, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %389 = or <8 x i16> %386, %388
  %390 = xor <8 x i16> %381, %287
  %391 = sub <8 x i16> %390, %287
  %392 = xor <8 x i16> %389, %288
  %393 = sub <8 x i16> %392, %288
  %394 = and <8 x i16> %391, %337
  %395 = and <8 x i16> %393, %339
  %396 = getelementptr inbounds i32, i32* %6, i64 %268
  %397 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %394, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #4
  %398 = shufflevector <8 x i16> %394, <8 x i16> %397, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %399 = shufflevector <8 x i16> %394, <8 x i16> %397, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %400 = bitcast i32* %396 to <8 x i16>*
  store <8 x i16> %398, <8 x i16>* %400, align 16
  %401 = getelementptr inbounds i32, i32* %396, i64 4
  %402 = bitcast i32* %401 to <8 x i16>*
  store <8 x i16> %399, <8 x i16>* %402, align 16
  %403 = getelementptr inbounds i32, i32* %396, i64 8
  %404 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %395, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #4
  %405 = shufflevector <8 x i16> %395, <8 x i16> %404, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %406 = shufflevector <8 x i16> %395, <8 x i16> %404, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %407 = bitcast i32* %403 to <8 x i16>*
  store <8 x i16> %405, <8 x i16>* %407, align 16
  %408 = getelementptr inbounds i32, i32* %403, i64 4
  %409 = bitcast i32* %408 to <8 x i16>*
  store <8 x i16> %406, <8 x i16>* %409, align 16
  %410 = getelementptr inbounds i32, i32* %7, i64 %268
  %411 = ashr <8 x i16> %394, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %412 = xor <8 x i16> %411, %394
  %413 = sub <8 x i16> %412, %411
  %414 = shufflevector <8 x i16> %411, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %415 = shufflevector <8 x i16> %411, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %416 = mul <8 x i16> %413, %266
  %417 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %413, <8 x i16> %266) #4
  %418 = shufflevector <8 x i16> %416, <8 x i16> %417, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %419 = shufflevector <8 x i16> %416, <8 x i16> %417, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %420 = bitcast <8 x i16> %418 to <4 x i32>
  %421 = lshr <4 x i32> %420, <i32 2, i32 2, i32 2, i32 2>
  %422 = bitcast <8 x i16> %419 to <4 x i32>
  %423 = lshr <4 x i32> %422, <i32 2, i32 2, i32 2, i32 2>
  %424 = bitcast <8 x i16> %414 to <4 x i32>
  %425 = xor <4 x i32> %421, %424
  %426 = sub <4 x i32> %425, %424
  %427 = bitcast <8 x i16> %415 to <4 x i32>
  %428 = xor <4 x i32> %423, %427
  %429 = sub <4 x i32> %428, %427
  %430 = bitcast i32* %410 to <4 x i32>*
  store <4 x i32> %426, <4 x i32>* %430, align 16
  %431 = getelementptr inbounds i32, i32* %410, i64 4
  %432 = bitcast i32* %431 to <4 x i32>*
  store <4 x i32> %429, <4 x i32>* %432, align 16
  %433 = getelementptr inbounds i32, i32* %410, i64 8
  %434 = ashr <8 x i16> %395, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %435 = xor <8 x i16> %434, %395
  %436 = sub <8 x i16> %435, %434
  %437 = shufflevector <8 x i16> %434, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %438 = shufflevector <8 x i16> %434, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %439 = mul <8 x i16> %436, %266
  %440 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %436, <8 x i16> %266) #4
  %441 = shufflevector <8 x i16> %439, <8 x i16> %440, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %442 = shufflevector <8 x i16> %439, <8 x i16> %440, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %443 = bitcast <8 x i16> %441 to <4 x i32>
  %444 = lshr <4 x i32> %443, <i32 2, i32 2, i32 2, i32 2>
  %445 = bitcast <8 x i16> %442 to <4 x i32>
  %446 = lshr <4 x i32> %445, <i32 2, i32 2, i32 2, i32 2>
  %447 = bitcast <8 x i16> %437 to <4 x i32>
  %448 = xor <4 x i32> %444, %447
  %449 = sub <4 x i32> %448, %447
  %450 = bitcast <8 x i16> %438 to <4 x i32>
  %451 = xor <4 x i32> %446, %450
  %452 = sub <4 x i32> %451, %450
  %453 = bitcast i32* %433 to <4 x i32>*
  store <4 x i32> %449, <4 x i32>* %453, align 16
  %454 = getelementptr inbounds i32, i32* %433, i64 4
  %455 = bitcast i32* %454 to <4 x i32>*
  store <4 x i32> %452, <4 x i32>* %455, align 16
  br label %357

456:                                              ; preds = %357, %254
  %457 = phi i32 [ %128, %254 ], [ %332, %357 ]
  %458 = phi i32 [ %256, %254 ], [ %359, %357 ]
  %459 = phi <8 x i16> [ %131, %254 ], [ %335, %357 ]
  %460 = phi <8 x i16> [ %255, %254 ], [ %358, %357 ]
  %461 = bitcast <8 x i16> %460 to <2 x i64>
  %462 = icmp eq i32 %457, 0
  br i1 %462, label %482, label %463

463:                                              ; preds = %456
  %464 = bitcast <8 x i16> %459 to <2 x i64>
  %465 = shufflevector <2 x i64> %464, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %466 = bitcast <2 x i64> %465 to <8 x i16>
  %467 = icmp slt <8 x i16> %459, %466
  %468 = select <8 x i1> %467, <8 x i16> %466, <8 x i16> %459
  %469 = bitcast <8 x i16> %468 to <4 x i32>
  %470 = shufflevector <4 x i32> %469, <4 x i32> undef, <4 x i32> <i32 1, i32 0, i32 0, i32 0>
  %471 = bitcast <4 x i32> %470 to <8 x i16>
  %472 = icmp slt <8 x i16> %468, %471
  %473 = select <8 x i1> %472, <8 x i16> %471, <8 x i16> %468
  %474 = bitcast <8 x i16> %473 to <4 x i32>
  %475 = lshr <4 x i32> %474, <i32 16, i32 16, i32 16, i32 16>
  %476 = bitcast <4 x i32> %475 to <8 x i16>
  %477 = icmp sgt <8 x i16> %473, %476
  %478 = select <8 x i1> %477, <8 x i16> %473, <8 x i16> %476
  %479 = extractelement <8 x i16> %478, i64 0
  %480 = zext i16 %479 to i32
  %481 = add nuw nsw i32 %480, 1
  br label %482

482:                                              ; preds = %456, %463
  %483 = phi i32 [ %481, %463 ], [ 0, %456 ]
  %484 = icmp eq i32 %458, 0
  br i1 %484, label %502, label %485

485:                                              ; preds = %482
  %486 = shufflevector <2 x i64> %461, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %487 = bitcast <2 x i64> %486 to <8 x i16>
  %488 = icmp slt <8 x i16> %460, %487
  %489 = select <8 x i1> %488, <8 x i16> %487, <8 x i16> %460
  %490 = bitcast <8 x i16> %489 to <4 x i32>
  %491 = shufflevector <4 x i32> %490, <4 x i32> undef, <4 x i32> <i32 1, i32 0, i32 0, i32 0>
  %492 = bitcast <4 x i32> %491 to <8 x i16>
  %493 = icmp slt <8 x i16> %489, %492
  %494 = select <8 x i1> %493, <8 x i16> %492, <8 x i16> %489
  %495 = bitcast <8 x i16> %494 to <4 x i32>
  %496 = lshr <4 x i32> %495, <i32 16, i32 16, i32 16, i32 16>
  %497 = bitcast <4 x i32> %496 to <8 x i16>
  %498 = icmp sgt <8 x i16> %494, %497
  %499 = select <8 x i1> %498, <8 x i16> %494, <8 x i16> %497
  %500 = extractelement <8 x i16> %499, i64 0
  %501 = zext i16 %500 to i32
  br label %502

502:                                              ; preds = %482, %485
  %503 = phi i32 [ %501, %485 ], [ -1, %482 ]
  %504 = icmp slt i32 %503, %483
  br i1 %504, label %508, label %505

505:                                              ; preds = %502
  %506 = sext i32 %503 to i64
  %507 = sext i32 %483 to i64
  br label %510

508:                                              ; preds = %510, %502
  %509 = zext i32 %483 to i64
  br label %519

510:                                              ; preds = %505, %510
  %511 = phi i64 [ %506, %505 ], [ %517, %510 ]
  %512 = getelementptr inbounds i16, i16* %10, i64 %511
  %513 = load i16, i16* %512, align 2
  %514 = sext i16 %513 to i64
  %515 = getelementptr inbounds i32, i32* %6, i64 %514
  store i32 0, i32* %515, align 4
  %516 = getelementptr inbounds i32, i32* %7, i64 %514
  store i32 0, i32* %516, align 4
  %517 = add nsw i64 %511, -1
  %518 = icmp sgt i64 %511, %507
  br i1 %518, label %510, label %508

519:                                              ; preds = %508, %523
  %520 = phi i64 [ %509, %508 ], [ %521, %523 ]
  %521 = add nsw i64 %520, -1
  %522 = icmp sgt i64 %520, 0
  br i1 %522, label %523, label %533

523:                                              ; preds = %519
  %524 = getelementptr inbounds i16, i16* %10, i64 %521
  %525 = load i16, i16* %524, align 2
  %526 = sext i16 %525 to i64
  %527 = getelementptr inbounds i32, i32* %6, i64 %526
  %528 = load i32, i32* %527, align 4
  %529 = icmp eq i32 %528, 0
  br i1 %529, label %519, label %530

530:                                              ; preds = %523
  %531 = trunc i64 %521 to i16
  %532 = add i16 %531, 1
  br label %533

533:                                              ; preds = %519, %530
  %534 = phi i16 [ %532, %530 ], [ 0, %519 ]
  store i16 %534, i16* %9, align 2
  %535 = icmp sgt i32 %483, 0
  br i1 %535, label %536, label %550

536:                                              ; preds = %533, %536
  %537 = phi i64 [ %547, %536 ], [ 0, %533 ]
  %538 = phi i32 [ %546, %536 ], [ -1, %533 ]
  %539 = getelementptr inbounds i16, i16* %10, i64 %537
  %540 = load i16, i16* %539, align 2
  %541 = sext i16 %540 to i64
  %542 = getelementptr inbounds i32, i32* %6, i64 %541
  %543 = load i32, i32* %542, align 4
  %544 = icmp eq i32 %543, 0
  %545 = trunc i64 %537 to i32
  %546 = select i1 %544, i32 %538, i32 %545
  %547 = add nuw nsw i64 %537, 1
  %548 = icmp ult i64 %547, %509
  %549 = and i1 %544, %548
  br i1 %549, label %536, label %550

550:                                              ; preds = %536, %533
  %551 = phi i32 [ -1, %533 ], [ %546, %536 ]
  %552 = zext i16 %534 to i32
  %553 = add nsw i32 %552, -1
  %554 = icmp ne i16 %534, 0
  %555 = icmp eq i32 %551, %553
  %556 = and i1 %554, %555
  br i1 %556, label %557, label %586

557:                                              ; preds = %550
  %558 = sext i32 %551 to i64
  %559 = getelementptr inbounds i16, i16* %10, i64 %558
  %560 = load i16, i16* %559, align 2
  %561 = sext i16 %560 to i64
  %562 = getelementptr inbounds i32, i32* %6, i64 %561
  %563 = load i32, i32* %562, align 4
  switch i32 %563, label %586 [
    i32 1, label %564
    i32 -1, label %564
  ]

564:                                              ; preds = %557, %557
  %565 = getelementptr inbounds i32, i32* %0, i64 %561
  %566 = load i32, i32* %565, align 4
  %567 = shl nsw i32 %566, 5
  %568 = ashr i32 %566, 31
  %569 = xor i32 %567, %568
  %570 = sub nsw i32 %569, %568
  %571 = icmp ne i16 %560, 0
  %572 = zext i1 %571 to i64
  %573 = getelementptr inbounds i16, i16* %8, i64 %572
  %574 = load i16, i16* %573, align 2
  %575 = sext i16 %574 to i32
  %576 = mul nsw i32 %575, 525
  %577 = add nsw i32 %576, 64
  %578 = ashr i32 %577, 7
  %579 = getelementptr inbounds [2 x i32], [2 x i32]* %13, i64 0, i64 %572
  %580 = load i32, i32* %579, align 4
  %581 = shl i32 %580, 5
  %582 = add nsw i32 %578, %581
  %583 = icmp slt i32 %570, %582
  br i1 %583, label %584, label %586

584:                                              ; preds = %564
  store i32 0, i32* %562, align 4
  %585 = getelementptr inbounds i32, i32* %7, i64 %561
  store i32 0, i32* %585, align 4
  store i16 0, i16* %9, align 2
  br label %586

586:                                              ; preds = %557, %584, %564, %550
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %28) #4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #4
  ret void
}

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32>, <4 x i32>) #2

; Function Attrs: nounwind readnone speculatable
declare <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16>, <8 x i16>) #3

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16>, <8 x i16>) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readnone speculatable }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
