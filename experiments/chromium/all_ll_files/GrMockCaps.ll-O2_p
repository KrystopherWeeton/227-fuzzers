; ModuleID = '../../third_party/skia/src/gpu/mock/GrMockCaps.cpp'
source_filename = "../../third_party/skia/src/gpu/mock/GrMockCaps.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.GrProgramDesc = type <{ %class.SkSTArray, i32, [4 x i8] }>
%class.SkSTArray = type { %class.SkAlignedSTStorage, %class.SkTArray }
%class.SkAlignedSTStorage = type { [132 x i8] }
%class.SkTArray = type { i32*, i64 }
%class.GrMockCaps = type { %class.GrCaps.base, i8, %struct.GrMockOptions, [4 x i8] }
%class.GrCaps.base = type <{ %class.SkRefCnt.base, [4 x i8], %class.sk_sp, i48, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [4 x i8], i64, %class.GrDriverBugWorkarounds, i8 }>
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%class.sk_sp = type { %class.GrShaderCaps* }
%class.GrShaderCaps = type <{ %class.SkRefCnt.base, i32, i56, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i32, i32, i32, [4 x i8] }>
%class.GrDriverBugWorkarounds = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.GrMockOptions = type <{ i8, i8, i8, i8, i32, i32, i32, i32, i32, i32, [31 x %"struct.GrMockOptions::ConfigOptions"], [4 x %"struct.GrMockOptions::ConfigOptions"], i8, i8, i8, i8, i32, i32, i8, i8, i8, i8 }>
%"struct.GrMockOptions::ConfigOptions" = type <{ i32, i8, [3 x i8] }>
%class.GrRenderTarget = type opaque
%class.GrProgramInfo = type opaque
%class.GrCaps = type <{ %class.SkRefCnt.base, [4 x i8], %class.sk_sp, i48, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [4 x i8], i64, %class.GrDriverBugWorkarounds, i8, i8 }>
%class.GrBackendFormat = type { i32, i8, %union.anon, i32, [4 x i8] }
%union.anon = type { %struct.anon }
%struct.anon = type { i32, [4 x i8], %struct.GrVkYcbcrConversionInfo }
%struct.GrVkYcbcrConversionInfo = type <{ i32, [4 x i8], i64, i32, i32, i32, i32, i32, i32, i32, [4 x i8] }>
%class.SkRefCntBase = type <{ i32 (...)**, %"struct.std::__1::atomic", [4 x i8] }>
%class.GrSurface = type { %class.GrGpuResource, %struct.SkISize, i32, i8, %class.sk_sp.4 }
%class.GrGpuResource = type { i32 (...)**, %class.GrIORef, i32, i32, %"class.std::__1::chrono::time_point", %class.GrScratchKey, %class.GrUniqueKey, %class.GrGpu*, i64, i8, i8, %"class.GrGpuResource::UniqueID" }
%class.GrIORef = type { %"struct.std::__1::atomic", %"struct.std::__1::atomic" }
%"class.std::__1::chrono::time_point" = type { %"class.std::__1::chrono::duration" }
%"class.std::__1::chrono::duration" = type { i64 }
%class.GrScratchKey = type { %class.GrResourceKey }
%class.GrResourceKey = type { %class.SkAutoSTMalloc }
%class.SkAutoSTMalloc = type <{ i32*, %union.anon.2, [4 x i8] }>
%union.anon.2 = type { [7 x i32] }
%class.GrUniqueKey = type { %class.GrResourceKey, %class.sk_sp.3, i8* }
%class.sk_sp.3 = type { %class.SkData* }
%class.SkData = type { %class.SkNVRefCnt, void (i8*, i8*)*, i8*, i8*, i64 }
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%class.GrGpu = type opaque
%"class.GrGpuResource::UniqueID" = type { i32 }
%struct.SkISize = type { i32, i32 }
%class.sk_sp.4 = type { %class.GrRefCntedCallback* }
%class.GrRefCntedCallback = type { %class.SkNVRefCnt.5, void (i8*)*, i8* }
%class.SkNVRefCnt.5 = type { %"struct.std::__1::atomic" }
%class.GrRenderTargetProxy = type <{ i32 (...)**, i8, i8, i8, i8, %struct.SkIRect, [4 x i8], %class.sk_sp.6, [4 x i8], [4 x i8], %class.GrSurfaceProxy }>
%struct.SkIRect = type { i32, i32, i32, i32 }
%class.sk_sp.6 = type { %class.GrArenas* }
%class.GrArenas = type { %class.SkNVRefCnt.7, [4 x i8], %class.SkArenaAlloc, %class.GrSubRunAllocator }
%class.SkNVRefCnt.7 = type { %"struct.std::__1::atomic" }
%class.SkArenaAlloc = type <{ i8*, i8*, i8*, %class.SkFibBlockSizes, [4 x i8] }>
%class.SkFibBlockSizes = type { i32 }
%class.GrSubRunAllocator = type { %class.GrBagOfBytes }
%class.GrBagOfBytes = type { i8*, i32, %class.SkFibBlockSizes.8 }
%class.SkFibBlockSizes.8 = type { i32 }
%class.GrSurfaceProxy = type { i32 (...)**, %class.SkNVRefCnt.9, %class.sk_sp.10, i32, [4 x i8], %class.GrBackendFormat, %struct.SkISize, i32, i8, i32, %"class.GrSurfaceProxy::UniqueID", %"class.std::__1::function", i8, i8, i8, i8, i32, %"struct.std::__1::atomic.38" }
%class.SkNVRefCnt.9 = type { %"struct.std::__1::atomic" }
%class.sk_sp.10 = type { %class.GrSurface* }
%"class.GrSurfaceProxy::UniqueID" = type { i32 }
%"class.std::__1::function" = type { %"class.std::__1::__function::__policy_func" }
%"class.std::__1::__function::__policy_func" = type { %"union.std::__1::__function::__policy_storage", %"struct.std::__1::__function::__policy_invoker", %"struct.std::__1::__function::__policy"* }
%"union.std::__1::__function::__policy_storage" = type { i8*, [8 x i8] }
%"struct.std::__1::__function::__policy_invoker" = type { void (%"struct.GrSurfaceProxy::LazyCallbackResult"*, %"union.std::__1::__function::__policy_storage"*, %class.GrResourceProvider*, %"struct.GrSurfaceProxy::LazySurfaceDesc"*)* }
%"struct.GrSurfaceProxy::LazyCallbackResult" = type <{ %class.sk_sp.10, i32, i8, [3 x i8] }>
%class.GrResourceProvider = type { %class.GrResourceCache*, %class.GrGpu*, %class.sk_sp.36, %class.sk_sp.37, %class.sk_sp.37 }
%class.GrResourceCache = type { %class.GrProxyProvider*, %class.GrThreadSafeCache*, i32, %class.SkTDPQueue, %class.SkTDArray, %class.SkTMultiMap, %class.SkTDynamicHash.12, i64, i64, i32, i64, i64, i32, [4 x i8], %"class.SkMessageBus<GrUniqueKeyInvalidatedMessage, unsigned int, true>::Inbox", %"class.SkMessageBus<GrTextureFreedMessage, GrDirectContext::DirectContextID, true>::Inbox", %class.SkTHashMap, %"class.GrDirectContext::DirectContextID", i32, %class.GrSingleOwner* }
%class.GrProxyProvider = type opaque
%class.GrThreadSafeCache = type opaque
%class.SkTDPQueue = type { %class.SkTDArray }
%class.SkTDArray = type { %class.GrGpuResource**, i32, i32 }
%class.SkTMultiMap = type <{ %class.SkTDynamicHash, i32, [4 x i8] }>
%class.SkTDynamicHash = type { %class.SkTHashTable }
%class.SkTHashTable = type { i32, i32, %class.SkAutoTArray }
%class.SkAutoTArray = type { %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.SkTHashTable<SkTMultiMap<GrGpuResource, GrScratchKey, GrResourceCache::ScratchMapTraits>::ValueList *, GrScratchKey, SkTDynamicHash<SkTMultiMap<GrGpuResource, GrScratchKey, GrResourceCache::ScratchMapTraits>::ValueList, GrScratchKey, SkTMultiMap<GrGpuResource, GrScratchKey, GrResourceCache::ScratchMapTraits>::ValueList>::AdaptedTraits>::Slot"* }
%"struct.SkTHashTable<SkTMultiMap<GrGpuResource, GrScratchKey, GrResourceCache::ScratchMapTraits>::ValueList *, GrScratchKey, SkTDynamicHash<SkTMultiMap<GrGpuResource, GrScratchKey, GrResourceCache::ScratchMapTraits>::ValueList, GrScratchKey, SkTMultiMap<GrGpuResource, GrScratchKey, GrResourceCache::ScratchMapTraits>::ValueList>::AdaptedTraits>::Slot" = type opaque
%class.SkTDynamicHash.12 = type { %class.SkTHashTable.13 }
%class.SkTHashTable.13 = type { i32, i32, %class.SkAutoTArray.14 }
%class.SkAutoTArray.14 = type { %"class.std::__1::unique_ptr.15" }
%"class.std::__1::unique_ptr.15" = type { %"class.std::__1::__compressed_pair.16" }
%"class.std::__1::__compressed_pair.16" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"struct.std::__1::__compressed_pair_elem.17" = type { %"struct.SkTHashTable<GrGpuResource *, GrUniqueKey, SkTDynamicHash<GrGpuResource, GrUniqueKey, GrResourceCache::UniqueHashTraits>::AdaptedTraits>::Slot"* }
%"struct.SkTHashTable<GrGpuResource *, GrUniqueKey, SkTDynamicHash<GrGpuResource, GrUniqueKey, GrResourceCache::UniqueHashTraits>::AdaptedTraits>::Slot" = type <{ %class.GrGpuResource*, i32, [4 x i8] }>
%"class.SkMessageBus<GrUniqueKeyInvalidatedMessage, unsigned int, true>::Inbox" = type <{ %class.SkTArray.21, %class.SkMutex, i32, [4 x i8] }>
%class.SkTArray.21 = type { %class.GrUniqueKeyInvalidatedMessage*, i64 }
%class.GrUniqueKeyInvalidatedMessage = type <{ %class.GrUniqueKey, i32, i8, [3 x i8] }>
%class.SkMutex = type { %class.SkSemaphore }
%class.SkSemaphore = type { %"struct.std::__1::atomic", %class.SkOnce, %"struct.SkSemaphore::OSSemaphore"* }
%class.SkOnce = type { %"struct.std::__1::atomic.22" }
%"struct.std::__1::atomic.22" = type { %"struct.std::__1::__atomic_base.23" }
%"struct.std::__1::__atomic_base.23" = type { %"struct.std::__1::__atomic_base.24" }
%"struct.std::__1::__atomic_base.24" = type { %"struct.std::__1::__cxx_atomic_impl.25" }
%"struct.std::__1::__cxx_atomic_impl.25" = type { %"struct.std::__1::__cxx_atomic_base_impl.26" }
%"struct.std::__1::__cxx_atomic_base_impl.26" = type { i8 }
%"struct.SkSemaphore::OSSemaphore" = type opaque
%"class.SkMessageBus<GrTextureFreedMessage, GrDirectContext::DirectContextID, true>::Inbox" = type <{ %class.SkTArray.27, %class.SkMutex, %"class.GrDirectContext::DirectContextID", [4 x i8] }>
%class.SkTArray.27 = type { %struct.GrTextureFreedMessage*, i64 }
%struct.GrTextureFreedMessage = type <{ %class.GrTexture*, %"class.GrDirectContext::DirectContextID", [4 x i8] }>
%class.GrTexture = type <{ i32 (...)**, i32, i32, i32, [4 x i8], %class.GrSurface }>
%class.SkTHashMap = type { %class.SkTHashTable.28 }
%class.SkTHashTable.28 = type { i32, i32, %class.SkAutoTArray.29 }
%class.SkAutoTArray.29 = type { %"class.std::__1::unique_ptr.30" }
%"class.std::__1::unique_ptr.30" = type { %"class.std::__1::__compressed_pair.31" }
%"class.std::__1::__compressed_pair.31" = type { %"struct.std::__1::__compressed_pair_elem.32" }
%"struct.std::__1::__compressed_pair_elem.32" = type { %"struct.SkTHashTable<SkTHashMap<unsigned int, GrResourceCache::TextureAwaitingUnref, SkGoodHash>::Pair, unsigned int, SkTHashMap<unsigned int, GrResourceCache::TextureAwaitingUnref, SkGoodHash>::Pair>::Slot"* }
%"struct.SkTHashTable<SkTHashMap<unsigned int, GrResourceCache::TextureAwaitingUnref, SkGoodHash>::Pair, unsigned int, SkTHashMap<unsigned int, GrResourceCache::TextureAwaitingUnref, SkGoodHash>::Pair>::Slot" = type opaque
%"class.GrDirectContext::DirectContextID" = type { i32 }
%class.GrSingleOwner = type { i8 }
%class.sk_sp.36 = type { %class.GrCaps* }
%class.sk_sp.37 = type { %class.GrGpuBuffer* }
%class.GrGpuBuffer = type { %class.GrGpuResource, %class.GrBuffer, i8*, i64, i32, i32 }
%class.GrBuffer = type { i32 (...)** }
%"struct.GrSurfaceProxy::LazySurfaceDesc" = type <{ %struct.SkISize, i32, i8, i8, [2 x i8], i32, [4 x i8], %class.GrBackendFormat*, i8, i8, [6 x i8] }>
%"struct.std::__1::__function::__policy" = type { i8* (i8*)*, void (i8*)*, i8, %"class.std::type_info"* }
%"class.std::type_info" = type { i32 (...)**, i8* }
%"struct.std::__1::atomic.38" = type { %"struct.std::__1::__atomic_base.39" }
%"struct.std::__1::__atomic_base.39" = type { %"struct.std::__1::__atomic_base.40" }
%"struct.std::__1::__atomic_base.40" = type { %"struct.std::__1::__cxx_atomic_impl.41" }
%"struct.std::__1::__cxx_atomic_impl.41" = type { %"struct.std::__1::__cxx_atomic_base_impl.42" }
%"struct.std::__1::__cxx_atomic_base_impl.42" = type { i64 }
%class.GrSwizzle = type { i16 }
%class.GrProcessorKeyBuilder = type { i32 (...)**, %class.SkTArray*, i32, i32 }
%struct.GrContextOptions = type { i8, i32, i32, i32, %class.SkExecutor*, i8, i8, i8, i8, i8, i64, float, float, i32, i8, i8, i32, i32, i8, i8, i32, %"class.GrContextOptions::PersistentCache"*, i32, %"class.GrContextOptions::ShaderErrorHandler"*, i32, i32, i8, i8, %class.GrDriverBugWorkarounds }
%class.SkExecutor = type opaque
%"class.GrContextOptions::PersistentCache" = type { i32 (...)** }
%"class.GrContextOptions::ShaderErrorHandler" = type { i32 (...)** }
%class.SkJSONWriter = type opaque
%struct.SkIPoint = type { i32, i32 }
%class.GrBackendRenderTarget = type { i8, i8, i32, i32, i32, i32, i32, %union.anon.43, %class.sk_sp.44 }
%union.anon.43 = type { %struct.GrGLFramebufferInfo, [136 x i8] }
%struct.GrGLFramebufferInfo = type { i32, i32 }
%class.sk_sp.44 = type { %class.GrBackendSurfaceMutableStateImpl* }
%class.GrBackendSurfaceMutableStateImpl = type opaque

$_ZN10GrMockCapsD0Ev = comdat any

$_ZNK12SkRefCntBase16internal_disposeEv = comdat any

$_ZNK10GrMockCaps12isFormatSRGBERK15GrBackendFormat = comdat any

$_ZNK10GrMockCaps18isFormatTexturableERK15GrBackendFormat = comdat any

$_ZNK10GrMockCaps16isFormatCopyableERK15GrBackendFormat = comdat any

$_ZNK10GrMockCaps26maxRenderTargetSampleCountERK15GrBackendFormat = comdat any

$_ZNK10GrMockCaps29isFormatAsColorTypeRenderableE11GrColorTypeRK15GrBackendFormati = comdat any

$_ZNK10GrMockCaps18isFormatRenderableERK15GrBackendFormati = comdat any

$_ZNK10GrMockCaps26getRenderTargetSampleCountEiRK15GrBackendFormat = comdat any

$_ZNK10GrMockCaps25surfaceSupportsReadPixelsEPK9GrSurface = comdat any

$_ZNK10GrMockCaps29supportedWritePixelsColorTypeE11GrColorTypeRK15GrBackendFormatS0_ = comdat any

$_ZNK6GrCaps22getDstCopyRestrictionsEPK19GrRenderTargetProxy11GrColorType = comdat any

$_ZNK10GrMockCaps35getBackendFormatFromCompressionTypeEN7SkImage15CompressionTypeE = comdat any

$_ZNK10GrMockCaps15getWriteSwizzleERK15GrBackendFormat11GrColorType = comdat any

$_ZNK6GrCaps18addExtraSamplerKeyEP21GrProcessorKeyBuilder14GrSamplerStateRK15GrBackendFormat = comdat any

$_ZNK6GrCaps33getExtraSurfaceFlagsForDeferredRTEv = comdat any

$_ZNK6GrCaps21onSupportsDynamicMSAAEPK19GrRenderTargetProxy = comdat any

$_ZN6GrCaps23onApplyOptionsOverridesERK16GrContextOptions = comdat any

$_ZNK6GrCaps10onDumpJSONEP12SkJSONWriter = comdat any

$_ZNK10GrMockCaps28onSurfaceSupportsWritePixelsEPK9GrSurface = comdat any

$_ZNK10GrMockCaps16onCanCopySurfaceEPK14GrSurfaceProxyS2_RK7SkIRectRK8SkIPoint = comdat any

$_ZNK10GrMockCaps25onGetDefaultBackendFormatE11GrColorType = comdat any

$_ZNK6GrCaps34onIsWindowRectanglesSupportedForRTERK21GrBackendRenderTarget = comdat any

$_ZNK10GrMockCaps33onAreColorTypeAndFormatCompatibleE11GrColorTypeRK15GrBackendFormat = comdat any

$_ZNK10GrMockCaps30onSupportedReadPixelsColorTypeE11GrColorTypeRK15GrBackendFormatS0_ = comdat any

$_ZNK10GrMockCaps16onGetReadSwizzleERK15GrBackendFormat11GrColorType = comdat any

$_ZNK6GrCaps26onGetDstSampleTypeForProxyEPK19GrRenderTargetProxy = comdat any

$_ZN6GrCapsD2Ev = comdat any

$_ZN6GrCapsD0Ev = comdat any

$_ZN9GrSwizzleC2EPKc = comdat any

$_ZTV6GrCaps = comdat any

@_ZTV10GrMockCaps = hidden unnamed_addr constant { [32 x i8*] } { [32 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.GrCaps*)* @_ZN6GrCapsD2Ev to i8*), i8* bitcast (void (%class.GrMockCaps*)* @_ZN10GrMockCapsD0Ev to i8*), i8* bitcast (void (%class.SkRefCntBase*)* @_ZNK12SkRefCntBase16internal_disposeEv to i8*), i8* bitcast (i1 (%class.GrMockCaps*, %class.GrBackendFormat*)* @_ZNK10GrMockCaps12isFormatSRGBERK15GrBackendFormat to i8*), i8* bitcast (i1 (%class.GrMockCaps*, %class.GrBackendFormat*)* @_ZNK10GrMockCaps18isFormatTexturableERK15GrBackendFormat to i8*), i8* bitcast (i1 (%class.GrMockCaps*, %class.GrBackendFormat*)* @_ZNK10GrMockCaps16isFormatCopyableERK15GrBackendFormat to i8*), i8* bitcast (i32 (%class.GrMockCaps*, %class.GrBackendFormat*)* @_ZNK10GrMockCaps26maxRenderTargetSampleCountERK15GrBackendFormat to i8*), i8* bitcast (i1 (%class.GrMockCaps*, i32, %class.GrBackendFormat*, i32)* @_ZNK10GrMockCaps29isFormatAsColorTypeRenderableE11GrColorTypeRK15GrBackendFormati to i8*), i8* bitcast (i1 (%class.GrMockCaps*, %class.GrBackendFormat*, i32)* @_ZNK10GrMockCaps18isFormatRenderableERK15GrBackendFormati to i8*), i8* bitcast (i32 (%class.GrMockCaps*, i32, %class.GrBackendFormat*)* @_ZNK10GrMockCaps26getRenderTargetSampleCountEiRK15GrBackendFormat to i8*), i8* bitcast (i32 (%class.GrMockCaps*, %class.GrSurface*)* @_ZNK10GrMockCaps25surfaceSupportsReadPixelsEPK9GrSurface to i8*), i8* bitcast ({ i32, i64 } (%class.GrMockCaps*, i32, %class.GrBackendFormat*, i32)* @_ZNK10GrMockCaps29supportedWritePixelsColorTypeE11GrColorTypeRK15GrBackendFormatS0_ to i8*), i8* bitcast (i16 (%class.GrCaps*, %class.GrRenderTargetProxy*, i32)* @_ZNK6GrCaps22getDstCopyRestrictionsEPK19GrRenderTargetProxy11GrColorType to i8*), i8* bitcast (void (%class.GrBackendFormat*, %class.GrMockCaps*, i32)* @_ZNK10GrMockCaps35getBackendFormatFromCompressionTypeEN7SkImage15CompressionTypeE to i8*), i8* bitcast (void (%class.GrSwizzle*, %class.GrMockCaps*, %class.GrBackendFormat*, i32)* @_ZNK10GrMockCaps15getWriteSwizzleERK15GrBackendFormat11GrColorType to i8*), i8* bitcast (i64 (%class.GrMockCaps*, %class.GrBackendFormat*)* @_ZNK10GrMockCaps16computeFormatKeyERK15GrBackendFormat to i8*), i8* bitcast (void (%class.GrCaps*, %class.GrProcessorKeyBuilder*, i64, i32, %class.GrBackendFormat*)* @_ZNK6GrCaps18addExtraSamplerKeyEP21GrProcessorKeyBuilder14GrSamplerStateRK15GrBackendFormat to i8*), i8* bitcast (void (%class.GrProgramDesc*, %class.GrMockCaps*, %class.GrRenderTarget*, %class.GrProgramInfo*, i32)* @_ZNK10GrMockCaps8makeDescEP14GrRenderTargetRK13GrProgramInfoN6GrCaps24ProgramDescOverrideFlagsE to i8*), i8* bitcast (i32 (%class.GrCaps*)* @_ZNK6GrCaps33getExtraSurfaceFlagsForDeferredRTEv to i8*), i8* bitcast (i1 (%class.GrCaps*, %class.GrRenderTargetProxy*)* @_ZNK6GrCaps21onSupportsDynamicMSAAEPK19GrRenderTargetProxy to i8*), i8* bitcast (void (%class.GrCaps*, %struct.GrContextOptions*)* @_ZN6GrCaps23onApplyOptionsOverridesERK16GrContextOptions to i8*), i8* bitcast (void (%class.GrCaps*, %class.SkJSONWriter*)* @_ZNK6GrCaps10onDumpJSONEP12SkJSONWriter to i8*), i8* bitcast (i1 (%class.GrMockCaps*, %class.GrSurface*)* @_ZNK10GrMockCaps28onSurfaceSupportsWritePixelsEPK9GrSurface to i8*), i8* bitcast (i1 (%class.GrMockCaps*, %class.GrSurfaceProxy*, %class.GrSurfaceProxy*, %struct.SkIRect*, %struct.SkIPoint*)* @_ZNK10GrMockCaps16onCanCopySurfaceEPK14GrSurfaceProxyS2_RK7SkIRectRK8SkIPoint to i8*), i8* bitcast (void (%class.GrBackendFormat*, %class.GrMockCaps*, i32)* @_ZNK10GrMockCaps25onGetDefaultBackendFormatE11GrColorType to i8*), i8* bitcast (i1 (%class.GrCaps*, %class.GrBackendRenderTarget*)* @_ZNK6GrCaps34onIsWindowRectanglesSupportedForRTERK21GrBackendRenderTarget to i8*), i8* bitcast (i1 (%class.GrMockCaps*, i32, %class.GrBackendFormat*)* @_ZNK10GrMockCaps33onAreColorTypeAndFormatCompatibleE11GrColorTypeRK15GrBackendFormat to i8*), i8* bitcast ({ i32, i64 } (%class.GrMockCaps*, i32, %class.GrBackendFormat*, i32)* @_ZNK10GrMockCaps30onSupportedReadPixelsColorTypeE11GrColorTypeRK15GrBackendFormatS0_ to i8*), i8* bitcast (void (%class.GrSwizzle*, %class.GrMockCaps*, %class.GrBackendFormat*, i32)* @_ZNK10GrMockCaps16onGetReadSwizzleERK15GrBackendFormat11GrColorType to i8*), i8* bitcast (i32 (%class.GrCaps*, %class.GrRenderTargetProxy*)* @_ZNK6GrCaps26onGetDstSampleTypeForProxyEPK19GrRenderTargetProxy to i8*)] }, align 8
@_ZTV6GrCaps = linkonce_odr hidden unnamed_addr constant { [32 x i8*] } { [32 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.GrCaps*)* @_ZN6GrCapsD2Ev to i8*), i8* bitcast (void (%class.GrCaps*)* @_ZN6GrCapsD0Ev to i8*), i8* bitcast (void (%class.SkRefCntBase*)* @_ZNK12SkRefCntBase16internal_disposeEv to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (i16 (%class.GrCaps*, %class.GrRenderTargetProxy*, i32)* @_ZNK6GrCaps22getDstCopyRestrictionsEPK19GrRenderTargetProxy11GrColorType to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void (%class.GrCaps*, %class.GrProcessorKeyBuilder*, i64, i32, %class.GrBackendFormat*)* @_ZNK6GrCaps18addExtraSamplerKeyEP21GrProcessorKeyBuilder14GrSamplerStateRK15GrBackendFormat to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (i32 (%class.GrCaps*)* @_ZNK6GrCaps33getExtraSurfaceFlagsForDeferredRTEv to i8*), i8* bitcast (i1 (%class.GrCaps*, %class.GrRenderTargetProxy*)* @_ZNK6GrCaps21onSupportsDynamicMSAAEPK19GrRenderTargetProxy to i8*), i8* bitcast (void (%class.GrCaps*, %struct.GrContextOptions*)* @_ZN6GrCaps23onApplyOptionsOverridesERK16GrContextOptions to i8*), i8* bitcast (void (%class.GrCaps*, %class.SkJSONWriter*)* @_ZNK6GrCaps10onDumpJSONEP12SkJSONWriter to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (i1 (%class.GrCaps*, %class.GrBackendRenderTarget*)* @_ZNK6GrCaps34onIsWindowRectanglesSupportedForRTERK21GrBackendRenderTarget to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (i32 (%class.GrCaps*, %class.GrRenderTargetProxy*)* @_ZNK6GrCaps26onGetDstSampleTypeForProxyEPK19GrRenderTargetProxy to i8*)] }, comdat, align 8
@.str = private unnamed_addr constant [5 x i8] c"rgba\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK10GrMockCaps8makeDescEP14GrRenderTargetRK13GrProgramInfoN6GrCaps24ProgramDescOverrideFlagsE(%class.GrProgramDesc* noalias sret, %class.GrMockCaps*, %class.GrRenderTarget* nocapture readnone, %class.GrProgramInfo*, i32) unnamed_addr #0 align 2 {
  %6 = getelementptr inbounds %class.GrProgramDesc, %class.GrProgramDesc* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %6, i8 -86, i64 160, i1 false)
  %7 = getelementptr inbounds %class.GrProgramDesc, %class.GrProgramDesc* %0, i64 0, i32 0, i32 0, i32 0, i64 136
  %8 = getelementptr inbounds %class.GrProgramDesc, %class.GrProgramDesc* %0, i64 0, i32 0, i32 0, i32 0, i64 144
  %9 = bitcast i8* %8 to i64*
  %10 = bitcast i8* %7 to i8**
  store i8* %6, i8** %10, align 8
  store i64 283467841536, i64* %9, align 8
  %11 = getelementptr inbounds %class.GrProgramDesc, %class.GrProgramDesc* %0, i64 0, i32 1
  store i32 0, i32* %11, align 8
  %12 = bitcast %class.GrMockCaps* %1 to %class.GrCaps*
  tail call void @_ZN13GrProgramDesc5BuildEPS_RK13GrProgramInfoRK6GrCaps(%class.GrProgramDesc* %0, %class.GrProgramInfo* %3, %class.GrCaps* dereferenceable(232) %12) #8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @_ZN13GrProgramDesc5BuildEPS_RK13GrProgramInfoRK6GrCaps(%class.GrProgramDesc*, %class.GrProgramInfo*, %class.GrCaps* dereferenceable(232)) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZNK10GrMockCaps16computeFormatKeyERK15GrBackendFormat(%class.GrMockCaps* nocapture readnone, %class.GrBackendFormat* dereferenceable(72)) unnamed_addr #0 align 2 {
  %3 = tail call i32 @_ZNK15GrBackendFormat15asMockColorTypeEv(%class.GrBackendFormat* %1) #8
  %4 = sext i32 %3 to i64
  ret i64 %4
}

declare i32 @_ZNK15GrBackendFormat15asMockColorTypeEv(%class.GrBackendFormat*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN10GrMockCapsD0Ev(%class.GrMockCaps*) unnamed_addr #3 comdat align 2 {
  %2 = getelementptr inbounds %class.GrMockCaps, %class.GrMockCaps* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [32 x i8*] }, { [32 x i8*] }* @_ZTV6GrCaps, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %class.GrMockCaps, %class.GrMockCaps* %0, i64 0, i32 0, i32 19
  tail call void @_ZN22GrDriverBugWorkaroundsD1Ev(%class.GrDriverBugWorkarounds* %3) #8
  %4 = getelementptr inbounds %class.GrMockCaps, %class.GrMockCaps* %0, i64 0, i32 0, i32 2, i32 0
  %5 = load %class.GrShaderCaps*, %class.GrShaderCaps** %4, align 8
  %6 = icmp eq %class.GrShaderCaps* %5, null
  br i1 %6, label %17, label %7

7:                                                ; preds = %1
  %8 = getelementptr inbounds %class.GrShaderCaps, %class.GrShaderCaps* %5, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %9 = atomicrmw add i32* %8, i32 -1 acq_rel
  %10 = icmp eq i32 %9, 1
  br i1 %10, label %11, label %17

11:                                               ; preds = %7
  %12 = bitcast %class.GrShaderCaps* %5 to %class.SkRefCntBase*
  %13 = bitcast %class.GrShaderCaps* %5 to void (%class.SkRefCntBase*)***
  %14 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %13, align 8
  %15 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %14, i64 2
  %16 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %15, align 8
  tail call void %16(%class.SkRefCntBase* nonnull %12) #8
  br label %17

17:                                               ; preds = %1, %7, %11
  %18 = bitcast %class.GrMockCaps* %0 to i8*
  tail call void @_ZdlPv(i8* %18) #9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK12SkRefCntBase16internal_disposeEv(%class.SkRefCntBase*) unnamed_addr #0 comdat align 2 {
  %2 = icmp eq %class.SkRefCntBase* %0, null
  br i1 %2, label %8, label %3

3:                                                ; preds = %1
  %4 = bitcast %class.SkRefCntBase* %0 to void (%class.SkRefCntBase*)***
  %5 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %4, align 8
  %6 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %5, i64 1
  %7 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %6, align 8
  tail call void %7(%class.SkRefCntBase* nonnull %0) #8
  br label %8

8:                                                ; preds = %3, %1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK10GrMockCaps12isFormatSRGBERK15GrBackendFormat(%class.GrMockCaps*, %class.GrBackendFormat* dereferenceable(72)) unnamed_addr #0 comdat align 2 {
  %3 = tail call i32 @_ZNK15GrBackendFormat21asMockCompressionTypeEv(%class.GrBackendFormat* %1) #8
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %5, label %12

5:                                                ; preds = %2
  %6 = tail call i32 @_ZNK15GrBackendFormat15asMockColorTypeEv(%class.GrBackendFormat* %1) #8
  %7 = icmp ult i32 %6, 31
  br i1 %7, label %9, label %8

8:                                                ; preds = %5
  tail call void @llvm.trap() #8
  unreachable

9:                                                ; preds = %5
  %10 = trunc i32 %6 to i31
  %11 = icmp eq i31 %10, 5
  ret i1 %11

12:                                               ; preds = %2
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK10GrMockCaps18isFormatTexturableERK15GrBackendFormat(%class.GrMockCaps*, %class.GrBackendFormat* dereferenceable(72)) unnamed_addr #0 comdat align 2 {
  %3 = tail call i32 @_ZNK15GrBackendFormat21asMockCompressionTypeEv(%class.GrBackendFormat* %1) #8
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %8, label %5

5:                                                ; preds = %2
  %6 = sext i32 %3 to i64
  %7 = getelementptr inbounds %class.GrMockCaps, %class.GrMockCaps* %0, i64 0, i32 2, i32 11, i64 %6, i32 1
  br label %12

8:                                                ; preds = %2
  %9 = tail call i32 @_ZNK15GrBackendFormat15asMockColorTypeEv(%class.GrBackendFormat* %1) #8
  %10 = sext i32 %9 to i64
  %11 = getelementptr inbounds %class.GrMockCaps, %class.GrMockCaps* %0, i64 0, i32 2, i32 10, i64 %10, i32 1
  br label %12

12:                                               ; preds = %8, %5
  %13 = phi i8* [ %7, %5 ], [ %11, %8 ]
  %14 = load i8, i8* %13, align 4, !range !2
  %15 = icmp ne i8 %14, 0
  ret i1 %15
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK10GrMockCaps16isFormatCopyableERK15GrBackendFormat(%class.GrMockCaps*, %class.GrBackendFormat* dereferenceable(72)) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK10GrMockCaps26maxRenderTargetSampleCountERK15GrBackendFormat(%class.GrMockCaps*, %class.GrBackendFormat* dereferenceable(72)) unnamed_addr #0 comdat align 2 {
  %3 = tail call i32 @_ZNK15GrBackendFormat21asMockCompressionTypeEv(%class.GrBackendFormat* %1) #8
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %5, label %14

5:                                                ; preds = %2
  %6 = tail call i32 @_ZNK15GrBackendFormat15asMockColorTypeEv(%class.GrBackendFormat* %1) #8
  %7 = sext i32 %6 to i64
  %8 = getelementptr inbounds %class.GrMockCaps, %class.GrMockCaps* %0, i64 0, i32 2, i32 10, i64 %7, i32 0
  %9 = load i32, i32* %8, align 4
  %10 = icmp eq i32 %9, 1
  %11 = zext i1 %10 to i32
  %12 = icmp eq i32 %9, 2
  %13 = select i1 %12, i32 16, i32 %11
  br label %14

14:                                               ; preds = %2, %5
  %15 = phi i32 [ %13, %5 ], [ 0, %2 ]
  ret i32 %15
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK10GrMockCaps29isFormatAsColorTypeRenderableE11GrColorTypeRK15GrBackendFormati(%class.GrMockCaps*, i32, %class.GrBackendFormat* dereferenceable(72), i32) unnamed_addr #0 comdat align 2 {
  %5 = icmp eq i32 %1, 6
  br i1 %5, label %12, label %6

6:                                                ; preds = %4
  %7 = bitcast %class.GrMockCaps* %0 to i1 (%class.GrMockCaps*, %class.GrBackendFormat*, i32)***
  %8 = load i1 (%class.GrMockCaps*, %class.GrBackendFormat*, i32)**, i1 (%class.GrMockCaps*, %class.GrBackendFormat*, i32)*** %7, align 8
  %9 = getelementptr inbounds i1 (%class.GrMockCaps*, %class.GrBackendFormat*, i32)*, i1 (%class.GrMockCaps*, %class.GrBackendFormat*, i32)** %8, i64 8
  %10 = load i1 (%class.GrMockCaps*, %class.GrBackendFormat*, i32)*, i1 (%class.GrMockCaps*, %class.GrBackendFormat*, i32)** %9, align 8
  %11 = tail call zeroext i1 %10(%class.GrMockCaps* %0, %class.GrBackendFormat* dereferenceable(72) %2, i32 %3) #8
  br label %12

12:                                               ; preds = %4, %6
  %13 = phi i1 [ %11, %6 ], [ false, %4 ]
  ret i1 %13
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK10GrMockCaps18isFormatRenderableERK15GrBackendFormati(%class.GrMockCaps*, %class.GrBackendFormat* dereferenceable(72), i32) unnamed_addr #0 comdat align 2 {
  %4 = tail call i32 @_ZNK15GrBackendFormat21asMockCompressionTypeEv(%class.GrBackendFormat* %1) #8
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %6, label %16

6:                                                ; preds = %3
  %7 = tail call i32 @_ZNK15GrBackendFormat15asMockColorTypeEv(%class.GrBackendFormat* %1) #8
  %8 = sext i32 %7 to i64
  %9 = getelementptr inbounds %class.GrMockCaps, %class.GrMockCaps* %0, i64 0, i32 2, i32 10, i64 %8, i32 0
  %10 = load i32, i32* %9, align 4
  %11 = icmp eq i32 %10, 1
  %12 = zext i1 %11 to i32
  %13 = icmp eq i32 %10, 2
  %14 = select i1 %13, i32 16, i32 %12
  %15 = icmp sge i32 %14, %2
  br label %16

16:                                               ; preds = %3, %6
  %17 = phi i1 [ %15, %6 ], [ false, %3 ]
  ret i1 %17
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK10GrMockCaps26getRenderTargetSampleCountEiRK15GrBackendFormat(%class.GrMockCaps*, i32, %class.GrBackendFormat* dereferenceable(72)) unnamed_addr #0 comdat align 2 {
  %4 = tail call i32 @_ZNK15GrBackendFormat21asMockCompressionTypeEv(%class.GrBackendFormat* %2) #8
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %6, label %23

6:                                                ; preds = %3
  %7 = tail call i32 @_ZNK15GrBackendFormat15asMockColorTypeEv(%class.GrBackendFormat* %2) #8
  %8 = icmp sgt i32 %1, 1
  %9 = select i1 %8, i32 %1, i32 1
  %10 = sext i32 %7 to i64
  %11 = getelementptr inbounds %class.GrMockCaps, %class.GrMockCaps* %0, i64 0, i32 2, i32 10, i64 %10, i32 0
  %12 = load i32, i32* %11, align 4
  switch i32 %12, label %23 [
    i32 2, label %16
    i32 1, label %13
  ]

13:                                               ; preds = %6
  %14 = icmp slt i32 %9, 2
  %15 = zext i1 %14 to i32
  br label %23

16:                                               ; preds = %6
  %17 = icmp sgt i32 %9, 16
  br i1 %17, label %23, label %18

18:                                               ; preds = %16
  %19 = add nsw i32 %9, -1
  %20 = tail call i32 @llvm.ctlz.i32(i32 %19, i1 false) #8, !range !3
  %21 = sub nuw nsw i32 32, %20
  %22 = shl i32 1, %21
  br label %23

23:                                               ; preds = %18, %16, %13, %6, %3
  %24 = phi i32 [ 0, %3 ], [ %15, %13 ], [ %22, %18 ], [ 0, %16 ], [ 0, %6 ]
  ret i32 %24
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK10GrMockCaps25surfaceSupportsReadPixelsEPK9GrSurface(%class.GrMockCaps*, %class.GrSurface*) unnamed_addr #0 comdat align 2 {
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { i32, i64 } @_ZNK10GrMockCaps29supportedWritePixelsColorTypeE11GrColorTypeRK15GrBackendFormatS0_(%class.GrMockCaps*, i32, %class.GrBackendFormat* dereferenceable(72), i32) unnamed_addr #0 comdat align 2 {
  %5 = insertvalue { i32, i64 } undef, i32 %1, 0
  %6 = insertvalue { i32, i64 } %5, i64 1, 1
  ret { i32, i64 } %6
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i16 @_ZNK6GrCaps22getDstCopyRestrictionsEPK19GrRenderTargetProxy11GrColorType(%class.GrCaps*, %class.GrRenderTargetProxy*, i32) unnamed_addr #0 comdat align 2 {
  ret i16 0
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK10GrMockCaps35getBackendFormatFromCompressionTypeEN7SkImage15CompressionTypeE(%class.GrBackendFormat* noalias sret, %class.GrMockCaps*, i32) unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %class.GrBackendFormat, %class.GrBackendFormat* %0, i64 0, i32 0
  store i32 5, i32* %4, align 8
  %5 = getelementptr inbounds %class.GrBackendFormat, %class.GrBackendFormat* %0, i64 0, i32 1
  store i8 0, i8* %5, align 4
  %6 = getelementptr inbounds %class.GrBackendFormat, %class.GrBackendFormat* %0, i64 0, i32 3
  store i32 0, i32* %6, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK10GrMockCaps15getWriteSwizzleERK15GrBackendFormat11GrColorType(%class.GrSwizzle* noalias sret, %class.GrMockCaps*, %class.GrBackendFormat* dereferenceable(72), i32) unnamed_addr #0 comdat align 2 {
  tail call void @_ZN9GrSwizzleC2EPKc(%class.GrSwizzle* %0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0))
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK6GrCaps18addExtraSamplerKeyEP21GrProcessorKeyBuilder14GrSamplerStateRK15GrBackendFormat(%class.GrCaps*, %class.GrProcessorKeyBuilder*, i64, i32, %class.GrBackendFormat* dereferenceable(72)) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK6GrCaps33getExtraSurfaceFlagsForDeferredRTEv(%class.GrCaps*) unnamed_addr #0 comdat align 2 {
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK6GrCaps21onSupportsDynamicMSAAEPK19GrRenderTargetProxy(%class.GrCaps*, %class.GrRenderTargetProxy*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6GrCaps23onApplyOptionsOverridesERK16GrContextOptions(%class.GrCaps*, %struct.GrContextOptions* dereferenceable(240)) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK6GrCaps10onDumpJSONEP12SkJSONWriter(%class.GrCaps*, %class.SkJSONWriter*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK10GrMockCaps28onSurfaceSupportsWritePixelsEPK9GrSurface(%class.GrMockCaps*, %class.GrSurface*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK10GrMockCaps16onCanCopySurfaceEPK14GrSurfaceProxyS2_RK7SkIRectRK8SkIPoint(%class.GrMockCaps*, %class.GrSurfaceProxy*, %class.GrSurfaceProxy*, %struct.SkIRect* dereferenceable(16), %struct.SkIPoint* dereferenceable(8)) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK10GrMockCaps25onGetDefaultBackendFormatE11GrColorType(%class.GrBackendFormat* noalias sret, %class.GrMockCaps*, i32) unnamed_addr #0 comdat align 2 {
  tail call void @_ZN15GrBackendFormat8MakeMockE11GrColorTypeN7SkImage15CompressionTypeEb(%class.GrBackendFormat* sret %0, i32 %2, i32 0, i1 zeroext false) #8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK6GrCaps34onIsWindowRectanglesSupportedForRTERK21GrBackendRenderTarget(%class.GrCaps*, %class.GrBackendRenderTarget* dereferenceable(176)) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK10GrMockCaps33onAreColorTypeAndFormatCompatibleE11GrColorTypeRK15GrBackendFormat(%class.GrMockCaps*, i32, %class.GrBackendFormat* dereferenceable(72)) unnamed_addr #0 comdat align 2 {
  %4 = icmp eq i32 %1, 0
  br i1 %4, label %18, label %5

5:                                                ; preds = %3
  %6 = tail call i32 @_ZNK15GrBackendFormat21asMockCompressionTypeEv(%class.GrBackendFormat* %2) #8
  %7 = add i32 %6, -1
  %8 = icmp ult i32 %7, 2
  br i1 %8, label %9, label %11

9:                                                ; preds = %5
  %10 = icmp eq i32 %1, 6
  br label %18

11:                                               ; preds = %5
  %12 = icmp eq i32 %6, 3
  br i1 %12, label %13, label %15

13:                                               ; preds = %11
  %14 = icmp eq i32 %1, 4
  br label %18

15:                                               ; preds = %11
  %16 = tail call i32 @_ZNK15GrBackendFormat15asMockColorTypeEv(%class.GrBackendFormat* %2) #8
  %17 = icmp eq i32 %16, %1
  br label %18

18:                                               ; preds = %9, %13, %15, %3
  %19 = phi i1 [ false, %3 ], [ %10, %9 ], [ %14, %13 ], [ %17, %15 ]
  ret i1 %19
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { i32, i64 } @_ZNK10GrMockCaps30onSupportedReadPixelsColorTypeE11GrColorTypeRK15GrBackendFormatS0_(%class.GrMockCaps*, i32, %class.GrBackendFormat* dereferenceable(72), i32) unnamed_addr #0 comdat align 2 {
  %5 = insertvalue { i32, i64 } undef, i32 %1, 0
  %6 = insertvalue { i32, i64 } %5, i64 1, 1
  ret { i32, i64 } %6
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK10GrMockCaps16onGetReadSwizzleERK15GrBackendFormat11GrColorType(%class.GrSwizzle* noalias sret, %class.GrMockCaps*, %class.GrBackendFormat* dereferenceable(72), i32) unnamed_addr #0 comdat align 2 {
  tail call void @_ZN9GrSwizzleC2EPKc(%class.GrSwizzle* %0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0))
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK6GrCaps26onGetDstSampleTypeForProxyEPK19GrRenderTargetProxy(%class.GrCaps*, %class.GrRenderTargetProxy*) unnamed_addr #0 comdat align 2 {
  ret i32 1
}

; Function Attrs: nounwind
declare void @_ZN22GrDriverBugWorkaroundsD1Ev(%class.GrDriverBugWorkarounds*) unnamed_addr #4

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6GrCapsD2Ev(%class.GrCaps*) unnamed_addr #3 comdat align 2 {
  %2 = getelementptr inbounds %class.GrCaps, %class.GrCaps* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [32 x i8*] }, { [32 x i8*] }* @_ZTV6GrCaps, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %class.GrCaps, %class.GrCaps* %0, i64 0, i32 19
  tail call void @_ZN22GrDriverBugWorkaroundsD1Ev(%class.GrDriverBugWorkarounds* %3) #8
  %4 = getelementptr inbounds %class.GrCaps, %class.GrCaps* %0, i64 0, i32 2, i32 0
  %5 = load %class.GrShaderCaps*, %class.GrShaderCaps** %4, align 8
  %6 = icmp eq %class.GrShaderCaps* %5, null
  br i1 %6, label %17, label %7

7:                                                ; preds = %1
  %8 = getelementptr inbounds %class.GrShaderCaps, %class.GrShaderCaps* %5, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %9 = atomicrmw add i32* %8, i32 -1 acq_rel
  %10 = icmp eq i32 %9, 1
  br i1 %10, label %11, label %17

11:                                               ; preds = %7
  %12 = bitcast %class.GrShaderCaps* %5 to %class.SkRefCntBase*
  %13 = bitcast %class.GrShaderCaps* %5 to void (%class.SkRefCntBase*)***
  %14 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %13, align 8
  %15 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %14, i64 2
  %16 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %15, align 8
  tail call void %16(%class.SkRefCntBase* nonnull %12) #8
  br label %17

17:                                               ; preds = %1, %7, %11
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6GrCapsD0Ev(%class.GrCaps*) unnamed_addr #3 comdat align 2 {
  tail call void @llvm.trap() #10
  unreachable
}

declare void @__cxa_pure_virtual() unnamed_addr

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #5

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #6

declare i32 @_ZNK15GrBackendFormat21asMockCompressionTypeEv(%class.GrBackendFormat*) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #7

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN9GrSwizzleC2EPKc(%class.GrSwizzle*, i8*) unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.GrSwizzle, %class.GrSwizzle* %0, i64 0, i32 0
  %4 = load i8, i8* %1, align 1
  %5 = sext i8 %4 to i32
  switch i32 %5, label %11 [
    i32 114, label %12
    i32 103, label %6
    i32 98, label %7
    i32 97, label %8
    i32 48, label %9
    i32 49, label %10
  ]

6:                                                ; preds = %2
  br label %12

7:                                                ; preds = %2
  br label %12

8:                                                ; preds = %2
  br label %12

9:                                                ; preds = %2
  br label %12

10:                                               ; preds = %2
  br label %12

11:                                               ; preds = %2
  tail call void @llvm.trap() #8
  unreachable

12:                                               ; preds = %2, %6, %7, %8, %9, %10
  %13 = phi i16 [ 5, %10 ], [ 4, %9 ], [ 3, %8 ], [ 2, %7 ], [ 1, %6 ], [ 0, %2 ]
  %14 = getelementptr inbounds i8, i8* %1, i64 1
  %15 = load i8, i8* %14, align 1
  %16 = sext i8 %15 to i32
  switch i32 %16, label %22 [
    i32 114, label %23
    i32 103, label %17
    i32 98, label %18
    i32 97, label %19
    i32 48, label %20
    i32 49, label %21
  ]

17:                                               ; preds = %12
  br label %23

18:                                               ; preds = %12
  br label %23

19:                                               ; preds = %12
  br label %23

20:                                               ; preds = %12
  br label %23

21:                                               ; preds = %12
  br label %23

22:                                               ; preds = %12
  tail call void @llvm.trap() #8
  unreachable

23:                                               ; preds = %12, %17, %18, %19, %20, %21
  %24 = phi i16 [ 80, %21 ], [ 64, %20 ], [ 48, %19 ], [ 32, %18 ], [ 16, %17 ], [ 0, %12 ]
  %25 = or i16 %24, %13
  %26 = getelementptr inbounds i8, i8* %1, i64 2
  %27 = load i8, i8* %26, align 1
  %28 = sext i8 %27 to i32
  switch i32 %28, label %34 [
    i32 114, label %35
    i32 103, label %29
    i32 98, label %30
    i32 97, label %31
    i32 48, label %32
    i32 49, label %33
  ]

29:                                               ; preds = %23
  br label %35

30:                                               ; preds = %23
  br label %35

31:                                               ; preds = %23
  br label %35

32:                                               ; preds = %23
  br label %35

33:                                               ; preds = %23
  br label %35

34:                                               ; preds = %23
  tail call void @llvm.trap() #8
  unreachable

35:                                               ; preds = %23, %29, %30, %31, %32, %33
  %36 = phi i16 [ 1280, %33 ], [ 1024, %32 ], [ 768, %31 ], [ 512, %30 ], [ 256, %29 ], [ 0, %23 ]
  %37 = or i16 %25, %36
  %38 = getelementptr inbounds i8, i8* %1, i64 3
  %39 = load i8, i8* %38, align 1
  %40 = sext i8 %39 to i32
  switch i32 %40, label %46 [
    i32 114, label %47
    i32 103, label %41
    i32 98, label %42
    i32 97, label %43
    i32 48, label %44
    i32 49, label %45
  ]

41:                                               ; preds = %35
  br label %47

42:                                               ; preds = %35
  br label %47

43:                                               ; preds = %35
  br label %47

44:                                               ; preds = %35
  br label %47

45:                                               ; preds = %35
  br label %47

46:                                               ; preds = %35
  tail call void @llvm.trap() #8
  unreachable

47:                                               ; preds = %35, %41, %42, %43, %44, %45
  %48 = phi i16 [ 20480, %45 ], [ 16384, %44 ], [ 12288, %43 ], [ 8192, %42 ], [ 4096, %41 ], [ 0, %35 ]
  %49 = or i16 %37, %48
  store i16 %49, i16* %3, align 2
  ret void
}

declare void @_ZN15GrBackendFormat8MakeMockE11GrColorTypeN7SkImage15CompressionTypeEb(%class.GrBackendFormat* sret, i32, i32, i1 zeroext) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { cold noreturn nounwind }
attributes #6 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readnone speculatable }
attributes #8 = { nounwind }
attributes #9 = { builtin nounwind }
attributes #10 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{i32 0, i32 33}
