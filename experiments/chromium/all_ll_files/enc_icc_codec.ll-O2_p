; ModuleID = '../../third_party/libjxl/src/lib/jxl/enc_icc_codec.cc'
source_filename = "../../third_party/libjxl/src/lib/jxl/enc_icc_codec.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.std::__1::array" = type { [4 x i8] }
%"class.jxl::PaddedBytes" = type { i64, i64, %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.std::__1::array"*, %"struct.std::__1::array"*, %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %"struct.std::__1::array"* }
%"class.std::__1::vector.4" = type { %"class.std::__1::__vector_base.5" }
%"class.std::__1::__vector_base.5" = type { i64*, i64*, %"class.std::__1::__compressed_pair.6" }
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::__compressed_pair_elem.7" = type { i64* }
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.11", %"class.std::__1::__compressed_pair.16" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.11" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"struct.std::__1::__compressed_pair_elem.12" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.16" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"struct.std::__1::__compressed_pair_elem.17" = type { i64 }
%"class.std::__1::__tree_node" = type { %"class.std::__1::__tree_node_base.base", %"struct.std::__1::__value_type" }
%"class.std::__1::__tree_node_base.base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8 }>
%"struct.std::__1::__value_type" = type { %"struct.std::__1::pair" }
%"struct.std::__1::pair" = type { i64, i64 }
%"class.std::__1::__vector_base_common" = type { i8 }
%"struct.jxl::BitWriter" = type { i64, %"class.jxl::PaddedBytes", %"class.jxl::BitWriter::Allotment"* }
%"class.jxl::BitWriter::Allotment" = type { i64, i64, i64, i8, %"class.jxl::BitWriter::Allotment"* }
%"struct.jxl::AuxOut" = type { %"struct.std::__1::array.19", i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, %"struct.std::__1::array.20", %"struct.std::__1::array.20", i32, %"class.std::__1::basic_string", i64, %"class.std::__1::function", %"class.std::__1::function.27" }
%"struct.std::__1::array.19" = type { [21 x %"struct.jxl::AuxOut::LayerTotals"] }
%"struct.jxl::AuxOut::LayerTotals" = type { i64, i64, i64, i64, double }
%"struct.std::__1::array.20" = type { [8 x i32] }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.21" }
%"class.std::__1::__compressed_pair.21" = type { %"struct.std::__1::__compressed_pair_elem.22" }
%"struct.std::__1::__compressed_pair_elem.22" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::function" = type { %"class.std::__1::__function::__policy_func" }
%"class.std::__1::__function::__policy_func" = type { %"union.std::__1::__function::__policy_storage", %"struct.std::__1::__function::__policy_invoker", %"struct.std::__1::__function::__policy"* }
%"union.std::__1::__function::__policy_storage" = type { i8*, [8 x i8] }
%"struct.std::__1::__function::__policy_invoker" = type { i1 (%"union.std::__1::__function::__policy_storage"*, i8*, %"class.jxl::Image3"*)* }
%"class.jxl::Image3" = type { [3 x %"class.jxl::Plane"] }
%"class.jxl::Plane" = type { %"struct.jxl::PlaneBase" }
%"struct.jxl::PlaneBase" = type { i32, i32, i32, i32, i64, %"class.std::__1::unique_ptr" }
%"struct.std::__1::__function::__policy" = type { i8* (i8*)*, void (i8*)*, i8, %"class.std::type_info"* }
%"class.std::type_info" = type { i32 (...)**, i8* }
%"class.std::__1::function.27" = type { %"class.std::__1::__function::__policy_func.31" }
%"class.std::__1::__function::__policy_func.31" = type { %"union.std::__1::__function::__policy_storage", %"struct.std::__1::__function::__policy_invoker.32", %"struct.std::__1::__function::__policy"* }
%"struct.std::__1::__function::__policy_invoker.32" = type { i32 (%"union.std::__1::__function::__policy_storage"*, %"class.jxl::CodecInOut"*, %"class.std::__1::basic_string"*)* }
%"class.jxl::CodecInOut" = type { %"struct.jxl::SizeConstraints", %"class.jxl::DecoderHints", i32, float, i64, %"struct.jxl::Blobs", %"struct.jxl::CodecMetadata", %"class.jxl::ImageBundle", %"class.std::__1::vector.131", i8, i64 }
%"struct.jxl::SizeConstraints" = type { i32, i32, i64 }
%"class.jxl::DecoderHints" = type { %"class.std::__1::vector.33" }
%"class.std::__1::vector.33" = type { %"class.std::__1::__vector_base.34" }
%"class.std::__1::__vector_base.34" = type { %"struct.jxl::DecoderHints::KeyValue"*, %"struct.jxl::DecoderHints::KeyValue"*, %"class.std::__1::__compressed_pair.35" }
%"struct.jxl::DecoderHints::KeyValue" = type { %"class.std::__1::basic_string", %"class.std::__1::basic_string" }
%"class.std::__1::__compressed_pair.35" = type { %"struct.std::__1::__compressed_pair_elem.36" }
%"struct.std::__1::__compressed_pair_elem.36" = type { %"struct.jxl::DecoderHints::KeyValue"* }
%"struct.jxl::Blobs" = type { %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes" }
%"struct.jxl::CodecMetadata" = type { %"struct.jxl::ImageMetadata", %"class.jxl::SizeHeader", %"struct.jxl::CustomTransformData" }
%"struct.jxl::ImageMetadata" = type <{ %"class.jxl::Fields", i8, [7 x i8], %"struct.jxl::BitDepth", i8, i8, [6 x i8], %"struct.jxl::ColorEncoding", i32, i8, i8, i8, i8, %"class.jxl::SizeHeader", %"struct.jxl::ToneMapping", i32, [4 x i8], %"class.std::__1::vector.40", %"struct.jxl::CustomTransformData", %"class.jxl::PreviewHeader", %"struct.jxl::AnimationHeader", i64, i8, [7 x i8] }>
%"class.jxl::Fields" = type { i32 (...)** }
%"struct.jxl::BitDepth" = type <{ %"class.jxl::Fields", i8, [3 x i8], i32, i32, [4 x i8] }>
%"struct.jxl::ColorEncoding" = type { %"class.jxl::Fields", i8, i32, i32, %"struct.jxl::CustomTransferFunction", i32, i8, i8, %"class.jxl::PaddedBytes", i32, %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy" }
%"struct.jxl::CustomTransferFunction" = type { %"class.jxl::Fields", i32, i8, i32, i32 }
%"struct.jxl::Customxy" = type { %"class.jxl::Fields", i32, i32 }
%"struct.jxl::ToneMapping" = type <{ %"class.jxl::Fields", i8, [3 x i8], float, float, i8, [3 x i8], float, [4 x i8] }>
%"class.std::__1::vector.40" = type { %"class.std::__1::__vector_base.41" }
%"class.std::__1::__vector_base.41" = type { %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"*, %"class.std::__1::__compressed_pair.42" }
%"struct.jxl::ExtraChannelInfo" = type { %"class.jxl::Fields", i8, i32, %"struct.jxl::BitDepth", i32, %"class.std::__1::basic_string", i8, [4 x float], i32 }
%"class.std::__1::__compressed_pair.42" = type { %"struct.std::__1::__compressed_pair_elem.43" }
%"struct.std::__1::__compressed_pair_elem.43" = type { %"struct.jxl::ExtraChannelInfo"* }
%"class.jxl::PreviewHeader" = type { %"class.jxl::Fields", i8, i32, i32, i32, i32, i32 }
%"struct.jxl::AnimationHeader" = type <{ %"class.jxl::Fields", i32, i32, i32, i8, [3 x i8] }>
%"class.jxl::SizeHeader" = type { %"class.jxl::Fields", i8, i32, i32, i32, i32, i32 }
%"struct.jxl::CustomTransformData" = type <{ %"class.jxl::Fields", i8, i8, [6 x i8], %"struct.jxl::OpsinInverseMatrix", i32, [15 x float], [55 x float], [210 x float], [4 x i8] }>
%"struct.jxl::OpsinInverseMatrix" = type <{ %"class.jxl::Fields", i8, [3 x i8], [9 x float], [3 x float], [4 x float], [4 x i8] }>
%"class.jxl::ImageBundle" = type { %"class.std::__1::unique_ptr.47", i32, [4 x i8], %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::FrameOrigin", i32, i8, i8, %"class.std::__1::basic_string", %"struct.jxl::ImageMetadata"*, %"class.jxl::Image3", %"struct.jxl::ColorEncoding", %"class.std::__1::vector.124", i64 }
%"class.std::__1::unique_ptr.47" = type { %"class.std::__1::__compressed_pair.48" }
%"class.std::__1::__compressed_pair.48" = type { %"struct.std::__1::__compressed_pair_elem.49" }
%"struct.std::__1::__compressed_pair_elem.49" = type { %"struct.jxl::jpeg::JPEGData"* }
%"struct.jxl::jpeg::JPEGData" = type { %"class.jxl::Fields", i32, i32, i32, %"class.std::__1::vector.50", %"class.std::__1::vector.63", %"class.std::__1::vector.50", %"class.std::__1::vector.70", %"class.std::__1::vector.78", %"class.std::__1::vector.87", %"class.std::__1::vector.101", %"class.std::__1::vector.52", %"class.std::__1::vector.50", %"class.std::__1::vector.52", i32, i8, %"class.std::__1::vector.52" }
%"class.std::__1::vector.63" = type { %"class.std::__1::__vector_base.64" }
%"class.std::__1::__vector_base.64" = type { i32*, i32*, %"class.std::__1::__compressed_pair.65" }
%"class.std::__1::__compressed_pair.65" = type { %"struct.std::__1::__compressed_pair_elem.66" }
%"struct.std::__1::__compressed_pair_elem.66" = type { i32* }
%"class.std::__1::vector.70" = type { %"class.std::__1::__vector_base.71" }
%"class.std::__1::__vector_base.71" = type { %"struct.jxl::jpeg::JPEGQuantTable"*, %"struct.jxl::jpeg::JPEGQuantTable"*, %"class.std::__1::__compressed_pair.73" }
%"struct.jxl::jpeg::JPEGQuantTable" = type <{ %"struct.std::__1::array.72", i32, i32, i8, [3 x i8] }>
%"struct.std::__1::array.72" = type { [64 x i32] }
%"class.std::__1::__compressed_pair.73" = type { %"struct.std::__1::__compressed_pair_elem.74" }
%"struct.std::__1::__compressed_pair_elem.74" = type { %"struct.jxl::jpeg::JPEGQuantTable"* }
%"class.std::__1::vector.78" = type { %"class.std::__1::__vector_base.79" }
%"class.std::__1::__vector_base.79" = type { %"struct.jxl::jpeg::JPEGHuffmanCode"*, %"struct.jxl::jpeg::JPEGHuffmanCode"*, %"class.std::__1::__compressed_pair.82" }
%"struct.jxl::jpeg::JPEGHuffmanCode" = type <{ %"struct.std::__1::array.80", %"struct.std::__1::array.81", i32, i8, [3 x i8] }>
%"struct.std::__1::array.80" = type { [17 x i32] }
%"struct.std::__1::array.81" = type { [257 x i32] }
%"class.std::__1::__compressed_pair.82" = type { %"struct.std::__1::__compressed_pair_elem.83" }
%"struct.std::__1::__compressed_pair_elem.83" = type { %"struct.jxl::jpeg::JPEGHuffmanCode"* }
%"class.std::__1::vector.87" = type { %"class.std::__1::__vector_base.88" }
%"class.std::__1::__vector_base.88" = type { %"struct.jxl::jpeg::JPEGComponent"*, %"struct.jxl::jpeg::JPEGComponent"*, %"class.std::__1::__compressed_pair.96" }
%"struct.jxl::jpeg::JPEGComponent" = type { i32, i32, i32, i32, i32, i32, %"class.std::__1::vector.89" }
%"class.std::__1::vector.89" = type { %"class.std::__1::__vector_base.90" }
%"class.std::__1::__vector_base.90" = type { i16*, i16*, %"class.std::__1::__compressed_pair.91" }
%"class.std::__1::__compressed_pair.91" = type { %"struct.std::__1::__compressed_pair_elem.92" }
%"struct.std::__1::__compressed_pair_elem.92" = type { i16* }
%"class.std::__1::__compressed_pair.96" = type { %"struct.std::__1::__compressed_pair_elem.97" }
%"struct.std::__1::__compressed_pair_elem.97" = type { %"struct.jxl::jpeg::JPEGComponent"* }
%"class.std::__1::vector.101" = type { %"class.std::__1::__vector_base.102" }
%"class.std::__1::__vector_base.102" = type { %"struct.jxl::jpeg::JPEGScanInfo"*, %"struct.jxl::jpeg::JPEGScanInfo"*, %"class.std::__1::__compressed_pair.118" }
%"struct.jxl::jpeg::JPEGScanInfo" = type { i32, i32, i32, i32, i32, %"struct.std::__1::array.103", i32, %"class.std::__1::vector.104", %"class.std::__1::vector.111" }
%"struct.std::__1::array.103" = type { [4 x %"struct.jxl::jpeg::JPEGComponentScanInfo"] }
%"struct.jxl::jpeg::JPEGComponentScanInfo" = type { i32, i32, i32 }
%"class.std::__1::vector.104" = type { %"class.std::__1::__vector_base.105" }
%"class.std::__1::__vector_base.105" = type { i32*, i32*, %"class.std::__1::__compressed_pair.106" }
%"class.std::__1::__compressed_pair.106" = type { %"struct.std::__1::__compressed_pair_elem.107" }
%"struct.std::__1::__compressed_pair_elem.107" = type { i32* }
%"class.std::__1::vector.111" = type { %"class.std::__1::__vector_base.112" }
%"class.std::__1::__vector_base.112" = type { %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"*, %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"*, %"class.std::__1::__compressed_pair.113" }
%"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo" = type { i32, i32 }
%"class.std::__1::__compressed_pair.113" = type { %"struct.std::__1::__compressed_pair_elem.114" }
%"struct.std::__1::__compressed_pair_elem.114" = type { %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"* }
%"class.std::__1::__compressed_pair.118" = type { %"struct.std::__1::__compressed_pair_elem.119" }
%"struct.std::__1::__compressed_pair_elem.119" = type { %"struct.jxl::jpeg::JPEGScanInfo"* }
%"class.std::__1::vector.50" = type { %"class.std::__1::__vector_base.51" }
%"class.std::__1::__vector_base.51" = type { %"class.std::__1::vector.52"*, %"class.std::__1::vector.52"*, %"class.std::__1::__compressed_pair.58" }
%"class.std::__1::__compressed_pair.58" = type { %"struct.std::__1::__compressed_pair_elem.59" }
%"struct.std::__1::__compressed_pair_elem.59" = type { %"class.std::__1::vector.52"* }
%"class.std::__1::vector.52" = type { %"class.std::__1::__vector_base.53" }
%"class.std::__1::__vector_base.53" = type { i8*, i8*, %"class.std::__1::__compressed_pair.54" }
%"class.std::__1::__compressed_pair.54" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.jxl::YCbCrChromaSubsampling" = type <{ %"class.jxl::Fields", [3 x i32], i8, i8, [2 x i8] }>
%"struct.jxl::FrameOrigin" = type { i32, i32 }
%"class.std::__1::vector.124" = type { %"class.std::__1::__vector_base.125" }
%"class.std::__1::__vector_base.125" = type { %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.std::__1::__compressed_pair.126" }
%"class.std::__1::__compressed_pair.126" = type { %"struct.std::__1::__compressed_pair_elem.127" }
%"struct.std::__1::__compressed_pair_elem.127" = type { %"class.jxl::Plane"* }
%"class.std::__1::vector.131" = type { %"class.std::__1::__vector_base.132" }
%"class.std::__1::__vector_base.132" = type { %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"*, %"class.std::__1::__compressed_pair.133" }
%"class.std::__1::__compressed_pair.133" = type { %"struct.std::__1::__compressed_pair_elem.134" }
%"struct.std::__1::__compressed_pair_elem.134" = type { %"class.jxl::ImageBundle"* }
%"class.std::__1::vector.138" = type { %"class.std::__1::__vector_base.139" }
%"class.std::__1::__vector_base.139" = type { %"class.std::__1::vector.140"*, %"class.std::__1::vector.140"*, %"class.std::__1::__compressed_pair.147" }
%"class.std::__1::vector.140" = type { %"class.std::__1::__vector_base.141" }
%"class.std::__1::__vector_base.141" = type { %"struct.jxl::Token"*, %"struct.jxl::Token"*, %"class.std::__1::__compressed_pair.142" }
%"struct.jxl::Token" = type { i32, i32 }
%"class.std::__1::__compressed_pair.142" = type { %"struct.std::__1::__compressed_pair_elem.143" }
%"struct.std::__1::__compressed_pair_elem.143" = type { %"struct.jxl::Token"* }
%"class.std::__1::__compressed_pair.147" = type { %"struct.std::__1::__compressed_pair_elem.148" }
%"struct.std::__1::__compressed_pair_elem.148" = type { %"class.std::__1::vector.140"* }
%"struct.jxl::HistogramParams" = type <{ i32, i32, i32, i32, %"class.std::__1::vector.4", i64, i8, [7 x i8] }>
%"struct.jxl::EntropyEncodingData" = type { %"class.std::__1::vector.152", i8, %"class.std::__1::vector.160", %"struct.jxl::LZ77Params" }
%"class.std::__1::vector.152" = type { %"class.std::__1::__vector_base.153" }
%"class.std::__1::__vector_base.153" = type { %"class.std::__1::vector.154"*, %"class.std::__1::vector.154"*, %"class.std::__1::__compressed_pair.155" }
%"class.std::__1::vector.154" = type { %"class.std::__1::__vector_base.167" }
%"class.std::__1::__vector_base.167" = type { %"struct.jxl::ANSEncSymbolInfo"*, %"struct.jxl::ANSEncSymbolInfo"*, %"class.std::__1::__compressed_pair.175" }
%"struct.jxl::ANSEncSymbolInfo" = type <{ i16, [6 x i8], %"class.std::__1::vector.168", i64, i8, i8, i16, [4 x i8] }>
%"class.std::__1::vector.168" = type { %"class.std::__1::__vector_base.169" }
%"class.std::__1::__vector_base.169" = type { i16*, i16*, %"class.std::__1::__compressed_pair.170" }
%"class.std::__1::__compressed_pair.170" = type { %"struct.std::__1::__compressed_pair_elem.171" }
%"struct.std::__1::__compressed_pair_elem.171" = type { i16* }
%"class.std::__1::__compressed_pair.175" = type { %"struct.std::__1::__compressed_pair_elem.176" }
%"struct.std::__1::__compressed_pair_elem.176" = type { %"struct.jxl::ANSEncSymbolInfo"* }
%"class.std::__1::__compressed_pair.155" = type { %"struct.std::__1::__compressed_pair_elem.156" }
%"struct.std::__1::__compressed_pair_elem.156" = type { %"class.std::__1::vector.154"* }
%"class.std::__1::vector.160" = type { %"class.std::__1::__vector_base.161" }
%"class.std::__1::__vector_base.161" = type { %"struct.jxl::HybridUintConfig"*, %"struct.jxl::HybridUintConfig"*, %"class.std::__1::__compressed_pair.162" }
%"struct.jxl::HybridUintConfig" = type { i32, i32, i32, i32 }
%"class.std::__1::__compressed_pair.162" = type { %"struct.std::__1::__compressed_pair_elem.163" }
%"struct.std::__1::__compressed_pair_elem.163" = type { %"struct.jxl::HybridUintConfig"* }
%"struct.jxl::LZ77Params" = type { %"class.jxl::Fields", i8, i32, i32, %"struct.jxl::HybridUintConfig", i64 }

$_ZN3jxl11PaddedBytesixEm = comdat any

$_ZN3jxl11PaddedBytesD2Ev = comdat any

$_ZN3jxl11PaddedBytesC2Em = comdat any

$_ZNSt3__16__treeINS_12__value_typeImmEENS_19__map_value_compareImS2_NS_4lessImEELb1EEENS_9allocatorIS2_EEE7destroyEPNS_11__tree_nodeIS2_PvEE = comdat any

$_ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_ = comdat any

@_ZN3jxlL11kTagStringsE = internal unnamed_addr constant [17 x %"struct.std::__1::array"*] [%"struct.std::__1::array"* @_ZN3jxlL8kCprtTagE, %"struct.std::__1::array"* @_ZN3jxlL8kWtptTagE, %"struct.std::__1::array"* @_ZN3jxlL8kBkptTagE, %"struct.std::__1::array"* @_ZN3jxlL8kRxyzTagE, %"struct.std::__1::array"* @_ZN3jxlL8kGxyzTagE, %"struct.std::__1::array"* @_ZN3jxlL8kBxyzTagE, %"struct.std::__1::array"* @_ZN3jxlL8kKxyzTagE, %"struct.std::__1::array"* @_ZN3jxlL8kRtrcTagE, %"struct.std::__1::array"* @_ZN3jxlL8kGtrcTagE, %"struct.std::__1::array"* @_ZN3jxlL8kBtrcTagE, %"struct.std::__1::array"* @_ZN3jxlL8kKtrcTagE, %"struct.std::__1::array"* @_ZN3jxlL8kChadTagE, %"struct.std::__1::array"* @_ZN3jxlL8kDescTagE, %"struct.std::__1::array"* @_ZN3jxlL8kChrmTagE, %"struct.std::__1::array"* @_ZN3jxlL8kDmndTagE, %"struct.std::__1::array"* @_ZN3jxlL8kDmddTagE, %"struct.std::__1::array"* @_ZN3jxlL8kLumiTagE], align 16
@_ZN3jxlL8kRtrcTagE = internal constant %"struct.std::__1::array" { [4 x i8] c"rTRC" }, align 1
@_ZN3jxlL8kGtrcTagE = internal constant %"struct.std::__1::array" { [4 x i8] c"gTRC" }, align 1
@_ZN3jxlL8kBtrcTagE = internal constant %"struct.std::__1::array" { [4 x i8] c"bTRC" }, align 1
@_ZN3jxlL8kRxyzTagE = internal constant %"struct.std::__1::array" { [4 x i8] c"rXYZ" }, align 1
@_ZN3jxlL8kGxyzTagE = internal constant %"struct.std::__1::array" { [4 x i8] c"gXYZ" }, align 1
@_ZN3jxlL8kBxyzTagE = internal constant %"struct.std::__1::array" { [4 x i8] c"bXYZ" }, align 1
@_ZN3jxlL8kKxyzTagE = internal constant %"struct.std::__1::array" { [4 x i8] c"kXYZ" }, align 1
@_ZN3jxlL8kWtptTagE = internal constant %"struct.std::__1::array" { [4 x i8] c"wtpt" }, align 1
@_ZN3jxlL8kBkptTagE = internal constant %"struct.std::__1::array" { [4 x i8] c"bkpt" }, align 1
@_ZN3jxlL8kLumiTagE = internal constant %"struct.std::__1::array" { [4 x i8] c"lumi" }, align 1
@.str.1 = private unnamed_addr constant [54 x i8] c"../../third_party/libjxl/src/lib/jxl/enc_icc_codec.cc\00", align 1
@.str.6 = private unnamed_addr constant [22 x i8] c"%s:%d: JXL_CHECK: %s\0A\00", align 1
@.str.7 = private unnamed_addr constant [54 x i8] c"EncodeVarInt(value, data->size(), &pos, data->data())\00", align 1
@.str.8 = private unnamed_addr constant [23 x i8] c"%s:%d: JXL_ASSERT: %s\0A\00", align 1
@.str.9 = private unnamed_addr constant [57 x i8] c"../../third_party/libjxl/src/lib/jxl/base/padded_bytes.h\00", align 1
@.str.10 = private unnamed_addr constant [12 x i8] c"i <= size()\00", align 1
@_ZN3jxlL8kCprtTagE = internal constant %"struct.std::__1::array" { [4 x i8] c"cprt" }, align 1
@_ZN3jxlL8kKtrcTagE = internal constant %"struct.std::__1::array" { [4 x i8] c"kTRC" }, align 1
@_ZN3jxlL8kChadTagE = internal constant %"struct.std::__1::array" { [4 x i8] c"chad" }, align 1
@_ZN3jxlL8kDescTagE = internal constant %"struct.std::__1::array" { [4 x i8] c"desc" }, align 1
@_ZN3jxlL8kChrmTagE = internal constant %"struct.std::__1::array" { [4 x i8] c"chrm" }, align 1
@_ZN3jxlL8kDmndTagE = internal constant %"struct.std::__1::array" { [4 x i8] c"dmnd" }, align 1
@_ZN3jxlL8kDmddTagE = internal constant %"struct.std::__1::array" { [4 x i8] c"dmdd" }, align 1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3jxl10PredictICCEPKhmPNS_11PaddedBytesE(i8*, i64, %"class.jxl::PaddedBytes"*) local_unnamed_addr #0 {
  %4 = alloca %"class.jxl::PaddedBytes", align 8
  %5 = alloca %"class.jxl::PaddedBytes", align 8
  %6 = alloca %"class.jxl::PaddedBytes", align 8
  %7 = alloca %"class.std::__1::vector", align 8
  %8 = alloca %"class.std::__1::vector.4", align 8
  %9 = alloca %"class.std::__1::vector.4", align 8
  %10 = alloca %"class.std::__1::map", align 8
  %11 = alloca i64, align 8
  %12 = alloca i32, align 4
  %13 = bitcast i32* %12 to %"struct.std::__1::array"*
  %14 = alloca %"class.jxl::PaddedBytes", align 8
  %15 = alloca %"class.jxl::PaddedBytes", align 8
  %16 = bitcast %"class.jxl::PaddedBytes"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %16) #9
  %17 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %4, i64 0, i32 0
  %18 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %4, i64 0, i32 1
  %19 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %4, i64 0, i32 2, i32 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %16, i8 0, i64 24, i1 false) #9
  %20 = bitcast %"class.jxl::PaddedBytes"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %20) #9
  %21 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %5, i64 0, i32 0
  %22 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %5, i64 0, i32 1
  %23 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %5, i64 0, i32 2, i32 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %20, i8 0, i64 24, i1 false) #9
  tail call fastcc void @_ZN3jxl12_GLOBAL__N_112EncodeVarIntEmPNS_11PaddedBytesE(i64 %1, %"class.jxl::PaddedBytes"* %2)
  %24 = bitcast %"class.jxl::PaddedBytes"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %24) #9
  %25 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %6, i64 0, i32 0
  %26 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %6, i64 0, i32 2, i32 0, i32 0, i32 0
  %27 = bitcast %"class.jxl::PaddedBytes"* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %27, i8 -86, i64 24, i1 false)
  call void @_ZN3jxl26ICCInitialHeaderPredictionEv(%"class.jxl::PaddedBytes"* nonnull sret %6) #9
  %28 = trunc i64 %1 to i32
  call void @_ZN3jxl12EncodeUint32EmjPNS_11PaddedBytesE(i64 0, i32 %28, %"class.jxl::PaddedBytes"* nonnull %6) #9
  %29 = icmp eq i64 %1, 0
  br i1 %29, label %68, label %32

30:                                               ; preds = %63
  %31 = icmp ult i64 %1, 129
  br i1 %31, label %68, label %100

32:                                               ; preds = %3, %63
  %33 = phi i64 [ %64, %63 ], [ 0, %3 ]
  %34 = load i8*, i8** %26, align 8
  call void @_ZN3jxl16ICCPredictHeaderEPKhmPhm(i8* %0, i64 %1, i8* %34, i64 %33) #9
  %35 = load i64, i64* %25, align 8
  %36 = icmp ult i64 %35, %33
  br i1 %36, label %37, label %40

37:                                               ; preds = %32
  %38 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.9, i64 0, i64 0), i32 180, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.10, i64 0, i64 0)) #9
  %39 = call zeroext i1 @_ZN3jxl5AbortEv() #10
  unreachable

40:                                               ; preds = %32
  %41 = getelementptr inbounds i8, i8* %0, i64 %33
  %42 = load i8, i8* %41, align 1
  %43 = load i8*, i8** %26, align 8
  %44 = getelementptr inbounds i8, i8* %43, i64 %33
  %45 = load i8, i8* %44, align 1
  %46 = sub i8 %42, %45
  %47 = load i64, i64* %21, align 8
  %48 = load i64, i64* %22, align 8
  %49 = icmp eq i64 %47, %48
  br i1 %49, label %52, label %50

50:                                               ; preds = %40
  %51 = load i8*, i8** %23, align 8
  br label %58

52:                                               ; preds = %40
  %53 = add i64 %47, 1
  call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* nonnull %5, i64 %53) #9
  %54 = load i8*, i8** %23, align 8
  %55 = icmp eq i8* %54, null
  br i1 %55, label %63, label %56

56:                                               ; preds = %52
  %57 = load i64, i64* %21, align 8
  br label %58

58:                                               ; preds = %56, %50
  %59 = phi i8* [ %54, %56 ], [ %51, %50 ]
  %60 = phi i64 [ %57, %56 ], [ %47, %50 ]
  %61 = add i64 %60, 1
  store i64 %61, i64* %21, align 8
  %62 = getelementptr inbounds i8, i8* %59, i64 %60
  store i8 %46, i8* %62, align 1
  br label %63

63:                                               ; preds = %52, %58
  %64 = add nuw nsw i64 %33, 1
  %65 = icmp ult i64 %64, 128
  %66 = icmp ult i64 %64, %1
  %67 = and i1 %65, %66
  br i1 %67, label %32, label %30

68:                                               ; preds = %3, %30
  call fastcc void @_ZN3jxl12_GLOBAL__N_112EncodeVarIntEmPNS_11PaddedBytesE(i64 0, %"class.jxl::PaddedBytes"* %2)
  %69 = load i64, i64* %21, align 8
  %70 = icmp eq i64 %69, 0
  br i1 %70, label %1667, label %71

71:                                               ; preds = %68
  %72 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %2, i64 0, i32 0
  %73 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %2, i64 0, i32 1
  %74 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %2, i64 0, i32 2, i32 0, i32 0, i32 0
  br label %75

75:                                               ; preds = %71, %96
  %76 = phi i64 [ 0, %71 ], [ %97, %96 ]
  %77 = load i8*, i8** %23, align 8
  %78 = getelementptr inbounds i8, i8* %77, i64 %76
  %79 = load i8, i8* %78, align 1
  %80 = load i64, i64* %72, align 8
  %81 = load i64, i64* %73, align 8
  %82 = icmp eq i64 %80, %81
  br i1 %82, label %85, label %83

83:                                               ; preds = %75
  %84 = load i8*, i8** %74, align 8
  br label %91

85:                                               ; preds = %75
  %86 = add i64 %80, 1
  call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* %2, i64 %86) #9
  %87 = load i8*, i8** %74, align 8
  %88 = icmp eq i8* %87, null
  br i1 %88, label %96, label %89

89:                                               ; preds = %85
  %90 = load i64, i64* %72, align 8
  br label %91

91:                                               ; preds = %89, %83
  %92 = phi i8* [ %87, %89 ], [ %84, %83 ]
  %93 = phi i64 [ %90, %89 ], [ %80, %83 ]
  %94 = add i64 %93, 1
  store i64 %94, i64* %72, align 8
  %95 = getelementptr inbounds i8, i8* %92, i64 %93
  store i8 %79, i8* %95, align 1
  br label %96

96:                                               ; preds = %85, %91
  %97 = add nuw i64 %76, 1
  %98 = load i64, i64* %21, align 8
  %99 = icmp ult i64 %97, %98
  br i1 %99, label %75, label %1667

100:                                              ; preds = %30
  %101 = bitcast %"class.std::__1::vector"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %101) #9
  %102 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %7, i64 0, i32 0, i32 0
  %103 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %7, i64 0, i32 0, i32 1
  %104 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %7, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %101, i8 0, i64 24, i1 false) #9
  %105 = bitcast %"class.std::__1::vector.4"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %105) #9
  %106 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %8, i64 0, i32 0, i32 0
  %107 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %8, i64 0, i32 0, i32 1
  %108 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %8, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %105, i8 0, i64 24, i1 false) #9
  %109 = bitcast %"class.std::__1::vector.4"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %109) #9
  %110 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %9, i64 0, i32 0, i32 0
  %111 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %9, i64 0, i32 0, i32 1
  %112 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %9, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %109, i8 0, i64 24, i1 false) #9
  %113 = bitcast %"class.std::__1::map"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %113) #9
  %114 = getelementptr inbounds %"class.std::__1::map", %"class.std::__1::map"* %10, i64 0, i32 0, i32 0
  %115 = getelementptr inbounds %"class.std::__1::map", %"class.std::__1::map"* %10, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %116 = getelementptr inbounds %"class.std::__1::map", %"class.std::__1::map"* %10, i64 0, i32 0, i32 2, i32 0, i32 0
  %117 = getelementptr inbounds %"class.std::__1::map", %"class.std::__1::map"* %10, i64 0, i32 0, i32 1, i32 0, i32 0
  %118 = bitcast %"class.std::__1::__tree_node_base"** %115 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %118, i8 0, i64 16, i1 false) #9
  store %"class.std::__1::__tree_end_node"* %117, %"class.std::__1::__tree_end_node"** %114, align 8
  %119 = bitcast i64* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %119) #9
  store i64 128, i64* %11, align 8
  %120 = icmp ugt i64 %1, 131
  br i1 %120, label %121, label %694

121:                                              ; preds = %100
  %122 = call i32 @_ZN3jxl12DecodeUint32EPKhmm(i8* %0, i64 %1, i64 128) #9
  %123 = zext i32 %122 to i64
  %124 = load i64, i64* %11, align 8
  %125 = add i64 %124, 4
  store i64 %125, i64* %11, align 8
  %126 = add nuw nsw i64 %123, 1
  call fastcc void @_ZN3jxl12_GLOBAL__N_112EncodeVarIntEmPNS_11PaddedBytesE(i64 %126, %"class.jxl::PaddedBytes"* nonnull %4)
  %127 = icmp eq i32 %122, 0
  br i1 %127, label %694, label %128

128:                                              ; preds = %121
  %129 = mul nuw nsw i64 %123, 12
  %130 = add nuw nsw i64 %129, 128
  %131 = bitcast i32* %12 to i8*
  %132 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %13, i64 0, i32 0, i64 1
  %133 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %13, i64 0, i32 0, i64 2
  %134 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %13, i64 0, i32 0, i64 3
  %135 = bitcast %"struct.std::__1::array"** %103 to i64*
  %136 = bitcast %"class.std::__1::vector"* %7 to i64*
  %137 = bitcast %"struct.std::__1::array"** %104 to i64*
  %138 = bitcast i64** %107 to i64*
  %139 = bitcast %"class.std::__1::vector.4"* %8 to i64*
  %140 = bitcast i64** %108 to i64*
  %141 = bitcast i64** %111 to i64*
  %142 = bitcast %"class.std::__1::vector.4"* %9 to i64*
  %143 = bitcast i64** %112 to i64*
  %144 = bitcast %"class.std::__1::__tree_end_node"* %117 to %"class.std::__1::__tree_node"**
  %145 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %117, i64 0, i32 0
  %146 = bitcast %"class.std::__1::map"* %10 to i64*
  br label %147

147:                                              ; preds = %128, %691
  %148 = phi i64 [ %130, %128 ], [ %220, %691 ]
  %149 = phi i32 [ 0, %128 ], [ %161, %691 ]
  %150 = phi i64 [ 0, %128 ], [ %692, %691 ]
  %151 = load i64, i64* %11, align 8
  %152 = add i64 %151, 12
  %153 = icmp ugt i64 %152, %1
  br i1 %153, label %694, label %154

154:                                              ; preds = %147
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %131) #9
  store i32 -1431655766, i32* %12, align 4
  %155 = call i32 @_ZN3jxl13DecodeKeywordEPKhmm(i8* %0, i64 %1, i64 %151) #9
  store i32 %155, i32* %12, align 4
  %156 = load i64, i64* %11, align 8
  %157 = add i64 %156, 4
  %158 = call i32 @_ZN3jxl12DecodeUint32EPKhmm(i8* %0, i64 %1, i64 %157) #9
  %159 = load i64, i64* %11, align 8
  %160 = add i64 %159, 8
  %161 = call i32 @_ZN3jxl12DecodeUint32EPKhmm(i8* %0, i64 %1, i64 %160) #9
  %162 = load i64, i64* %11, align 8
  %163 = add i64 %162, 12
  store i64 %163, i64* %11, align 8
  %164 = load %"struct.std::__1::array"*, %"struct.std::__1::array"** %103, align 8
  %165 = load %"struct.std::__1::array"*, %"struct.std::__1::array"** %104, align 8
  %166 = icmp eq %"struct.std::__1::array"* %164, %165
  %167 = ptrtoint %"struct.std::__1::array"* %165 to i64
  br i1 %166, label %173, label %168

168:                                              ; preds = %154
  %169 = bitcast %"struct.std::__1::array"* %164 to i32*
  %170 = load i32, i32* %12, align 4
  store i32 %170, i32* %169, align 1
  %171 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %164, i64 1
  %172 = ptrtoint %"struct.std::__1::array"* %171 to i64
  store i64 %172, i64* %135, align 8
  br label %219

173:                                              ; preds = %154
  %174 = ptrtoint %"struct.std::__1::array"* %164 to i64
  %175 = load i64, i64* %136, align 8
  %176 = sub i64 %174, %175
  %177 = ashr exact i64 %176, 2
  %178 = add nsw i64 %177, 1
  %179 = icmp ugt i64 %178, 4611686018427387903
  %180 = inttoptr i64 %175 to %"struct.std::__1::array"*
  br i1 %179, label %181, label %183

181:                                              ; preds = %173
  %182 = bitcast %"class.std::__1::vector"* %7 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %182) #10
  unreachable

183:                                              ; preds = %173
  %184 = sub i64 %167, %175
  %185 = ashr exact i64 %184, 2
  %186 = icmp ult i64 %185, 2305843009213693951
  br i1 %186, label %187, label %195

187:                                              ; preds = %183
  %188 = ashr exact i64 %184, 1
  %189 = icmp ult i64 %188, %178
  %190 = select i1 %189, i64 %178, i64 %188
  %191 = icmp eq i64 %190, 0
  br i1 %191, label %200, label %192

192:                                              ; preds = %187
  %193 = icmp ugt i64 %190, 4611686018427387903
  br i1 %193, label %194, label %195

194:                                              ; preds = %192
  call void @abort() #10
  unreachable

195:                                              ; preds = %192, %183
  %196 = phi i64 [ %190, %192 ], [ 4611686018427387903, %183 ]
  %197 = shl i64 %196, 2
  %198 = call i8* @_Znwm(i64 %197) #11
  %199 = bitcast i8* %198 to %"struct.std::__1::array"*
  br label %200

200:                                              ; preds = %195, %187
  %201 = phi i64 [ %196, %195 ], [ 0, %187 ]
  %202 = phi %"struct.std::__1::array"* [ %199, %195 ], [ null, %187 ]
  %203 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %202, i64 %177
  %204 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %202, i64 %201
  %205 = ptrtoint %"struct.std::__1::array"* %204 to i64
  %206 = bitcast %"struct.std::__1::array"* %203 to i32*
  %207 = load i32, i32* %12, align 4
  store i32 %207, i32* %206, align 1
  %208 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %203, i64 1
  %209 = ptrtoint %"struct.std::__1::array"* %208 to i64
  %210 = ptrtoint %"struct.std::__1::array"* %202 to i64
  %211 = icmp sgt i64 %176, 0
  br i1 %211, label %212, label %215

212:                                              ; preds = %200
  %213 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %202, i64 0, i32 0, i64 0
  %214 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %180, i64 0, i32 0, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %213, i8* align 1 %214, i64 %176, i1 false) #9
  br label %215

215:                                              ; preds = %212, %200
  store i64 %210, i64* %136, align 8
  store i64 %209, i64* %135, align 8
  store i64 %205, i64* %137, align 8
  %216 = icmp eq i64 %175, 0
  br i1 %216, label %219, label %217

217:                                              ; preds = %215
  %218 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %180, i64 0, i32 0, i64 0
  call void @_ZdlPv(i8* %218) #11
  br label %219

219:                                              ; preds = %168, %215, %217
  %220 = zext i32 %158 to i64
  %221 = load i64*, i64** %107, align 8
  %222 = load i64*, i64** %108, align 8
  %223 = icmp ult i64* %221, %222
  %224 = ptrtoint i64* %222 to i64
  br i1 %223, label %225, label %228

225:                                              ; preds = %219
  store i64 %220, i64* %221, align 8
  %226 = getelementptr inbounds i64, i64* %221, i64 1
  %227 = ptrtoint i64* %226 to i64
  store i64 %227, i64* %138, align 8
  br label %271

228:                                              ; preds = %219
  %229 = ptrtoint i64* %221 to i64
  %230 = load i64, i64* %139, align 8
  %231 = sub i64 %229, %230
  %232 = ashr exact i64 %231, 3
  %233 = add nsw i64 %232, 1
  %234 = icmp ugt i64 %233, 2305843009213693951
  br i1 %234, label %235, label %237

235:                                              ; preds = %228
  %236 = bitcast %"class.std::__1::vector.4"* %8 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %236) #10
  unreachable

237:                                              ; preds = %228
  %238 = sub i64 %224, %230
  %239 = ashr exact i64 %238, 3
  %240 = icmp ult i64 %239, 1152921504606846975
  br i1 %240, label %241, label %249

241:                                              ; preds = %237
  %242 = ashr exact i64 %238, 2
  %243 = icmp ult i64 %242, %233
  %244 = select i1 %243, i64 %233, i64 %242
  %245 = icmp eq i64 %244, 0
  br i1 %245, label %254, label %246

246:                                              ; preds = %241
  %247 = icmp ugt i64 %244, 2305843009213693951
  br i1 %247, label %248, label %249

248:                                              ; preds = %246
  call void @abort() #10
  unreachable

249:                                              ; preds = %246, %237
  %250 = phi i64 [ %244, %246 ], [ 2305843009213693951, %237 ]
  %251 = shl i64 %250, 3
  %252 = call i8* @_Znwm(i64 %251) #11
  %253 = bitcast i8* %252 to i64*
  br label %254

254:                                              ; preds = %249, %241
  %255 = phi i64 [ %250, %249 ], [ 0, %241 ]
  %256 = phi i8* [ %252, %249 ], [ null, %241 ]
  %257 = phi i64* [ %253, %249 ], [ null, %241 ]
  %258 = getelementptr inbounds i64, i64* %257, i64 %232
  %259 = getelementptr inbounds i64, i64* %257, i64 %255
  %260 = ptrtoint i64* %259 to i64
  store i64 %220, i64* %258, align 8
  %261 = getelementptr inbounds i64, i64* %258, i64 1
  %262 = ptrtoint i64* %261 to i64
  %263 = ptrtoint i64* %257 to i64
  %264 = icmp sgt i64 %231, 0
  br i1 %264, label %265, label %267

265:                                              ; preds = %254
  %266 = inttoptr i64 %230 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %256, i8* align 8 %266, i64 %231, i1 false) #9
  br label %267

267:                                              ; preds = %265, %254
  store i64 %263, i64* %139, align 8
  store i64 %262, i64* %138, align 8
  store i64 %260, i64* %140, align 8
  %268 = icmp eq i64 %230, 0
  br i1 %268, label %271, label %269

269:                                              ; preds = %267
  %270 = inttoptr i64 %230 to i8*
  call void @_ZdlPv(i8* %270) #11
  br label %271

271:                                              ; preds = %225, %267, %269
  %272 = zext i32 %161 to i64
  %273 = load i64*, i64** %111, align 8
  %274 = load i64*, i64** %112, align 8
  %275 = icmp ult i64* %273, %274
  %276 = ptrtoint i64* %274 to i64
  br i1 %275, label %277, label %280

277:                                              ; preds = %271
  store i64 %272, i64* %273, align 8
  %278 = getelementptr inbounds i64, i64* %273, i64 1
  %279 = ptrtoint i64* %278 to i64
  store i64 %279, i64* %141, align 8
  br label %323

280:                                              ; preds = %271
  %281 = ptrtoint i64* %273 to i64
  %282 = load i64, i64* %142, align 8
  %283 = sub i64 %281, %282
  %284 = ashr exact i64 %283, 3
  %285 = add nsw i64 %284, 1
  %286 = icmp ugt i64 %285, 2305843009213693951
  br i1 %286, label %287, label %289

287:                                              ; preds = %280
  %288 = bitcast %"class.std::__1::vector.4"* %9 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %288) #10
  unreachable

289:                                              ; preds = %280
  %290 = sub i64 %276, %282
  %291 = ashr exact i64 %290, 3
  %292 = icmp ult i64 %291, 1152921504606846975
  br i1 %292, label %293, label %301

293:                                              ; preds = %289
  %294 = ashr exact i64 %290, 2
  %295 = icmp ult i64 %294, %285
  %296 = select i1 %295, i64 %285, i64 %294
  %297 = icmp eq i64 %296, 0
  br i1 %297, label %306, label %298

298:                                              ; preds = %293
  %299 = icmp ugt i64 %296, 2305843009213693951
  br i1 %299, label %300, label %301

300:                                              ; preds = %298
  call void @abort() #10
  unreachable

301:                                              ; preds = %298, %289
  %302 = phi i64 [ %296, %298 ], [ 2305843009213693951, %289 ]
  %303 = shl i64 %302, 3
  %304 = call i8* @_Znwm(i64 %303) #11
  %305 = bitcast i8* %304 to i64*
  br label %306

306:                                              ; preds = %301, %293
  %307 = phi i64 [ %302, %301 ], [ 0, %293 ]
  %308 = phi i8* [ %304, %301 ], [ null, %293 ]
  %309 = phi i64* [ %305, %301 ], [ null, %293 ]
  %310 = getelementptr inbounds i64, i64* %309, i64 %284
  %311 = getelementptr inbounds i64, i64* %309, i64 %307
  %312 = ptrtoint i64* %311 to i64
  store i64 %272, i64* %310, align 8
  %313 = getelementptr inbounds i64, i64* %310, i64 1
  %314 = ptrtoint i64* %313 to i64
  %315 = ptrtoint i64* %309 to i64
  %316 = icmp sgt i64 %283, 0
  br i1 %316, label %317, label %319

317:                                              ; preds = %306
  %318 = inttoptr i64 %282 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %308, i8* align 8 %318, i64 %283, i1 false) #9
  br label %319

319:                                              ; preds = %317, %306
  store i64 %315, i64* %142, align 8
  store i64 %314, i64* %141, align 8
  store i64 %312, i64* %143, align 8
  %320 = icmp eq i64 %282, 0
  br i1 %320, label %323, label %321

321:                                              ; preds = %319
  %322 = inttoptr i64 %282 to i8*
  call void @_ZdlPv(i8* %322) #11
  br label %323

323:                                              ; preds = %277, %319, %321
  %324 = load i64, i64* %135, align 8
  %325 = load i64, i64* %136, align 8
  %326 = sub i64 %324, %325
  %327 = ashr exact i64 %326, 2
  %328 = add nsw i64 %327, -1
  %329 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %144, align 8
  %330 = icmp eq %"class.std::__1::__tree_node"* %329, null
  br i1 %330, label %357, label %331

331:                                              ; preds = %323, %353
  %332 = phi %"class.std::__1::__tree_node"* [ %356, %353 ], [ %329, %323 ]
  %333 = phi %"class.std::__1::__tree_node_base"** [ %355, %353 ], [ %115, %323 ]
  %334 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %332, i64 0, i32 1, i32 0, i32 0
  %335 = load i64, i64* %334, align 8
  %336 = icmp ugt i64 %335, %220
  br i1 %336, label %337, label %343

337:                                              ; preds = %331
  %338 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %332, i64 0, i32 0, i32 0, i32 0
  %339 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %338, align 8
  %340 = icmp eq %"class.std::__1::__tree_node_base"* %339, null
  br i1 %340, label %341, label %353

341:                                              ; preds = %337
  %342 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %332, i64 0, i32 0, i32 0
  br label %357

343:                                              ; preds = %331
  %344 = icmp ult i64 %335, %220
  br i1 %344, label %345, label %351

345:                                              ; preds = %343
  %346 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %332, i64 0, i32 0, i32 1
  %347 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %346, align 8
  %348 = icmp eq %"class.std::__1::__tree_node_base"* %347, null
  br i1 %348, label %349, label %353

349:                                              ; preds = %345
  %350 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %332, i64 0, i32 0, i32 0
  br label %357

351:                                              ; preds = %343
  %352 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %332, i64 0, i32 0, i32 0
  br label %357

353:                                              ; preds = %345, %337
  %354 = phi %"class.std::__1::__tree_node_base"* [ %339, %337 ], [ %347, %345 ]
  %355 = phi %"class.std::__1::__tree_node_base"** [ %338, %337 ], [ %346, %345 ]
  %356 = bitcast %"class.std::__1::__tree_node_base"* %354 to %"class.std::__1::__tree_node"*
  br label %331

357:                                              ; preds = %323, %351, %349, %341
  %358 = phi %"class.std::__1::__tree_end_node"* [ %342, %341 ], [ %350, %349 ], [ %352, %351 ], [ %117, %323 ]
  %359 = phi %"class.std::__1::__tree_node_base"** [ %338, %341 ], [ %346, %349 ], [ %333, %351 ], [ %145, %323 ]
  %360 = bitcast %"class.std::__1::__tree_node_base"** %359 to %"class.std::__1::__tree_node"**
  %361 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %360, align 8
  %362 = icmp eq %"class.std::__1::__tree_node"* %361, null
  br i1 %362, label %363, label %386

363:                                              ; preds = %357
  %364 = call i8* @_Znwm(i64 48) #11, !noalias !2
  %365 = getelementptr inbounds i8, i8* %364, i64 32
  %366 = bitcast i8* %365 to i64*
  store i64 %220, i64* %366, align 8, !noalias !2
  %367 = getelementptr inbounds i8, i8* %364, i64 40
  %368 = bitcast i8* %367 to i64*
  store i64 0, i64* %368, align 8, !noalias !2
  %369 = bitcast i8* %364 to %"class.std::__1::__tree_node"*
  %370 = bitcast i8* %364 to %"class.std::__1::__tree_node_base"*
  %371 = getelementptr inbounds i8, i8* %364, i64 16
  %372 = bitcast i8* %371 to %"class.std::__1::__tree_end_node"**
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %364, i8 0, i64 16, i1 false) #9
  store %"class.std::__1::__tree_end_node"* %358, %"class.std::__1::__tree_end_node"** %372, align 8
  %373 = bitcast %"class.std::__1::__tree_node_base"** %359 to i8**
  store i8* %364, i8** %373, align 8
  %374 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %114, align 8
  %375 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %374, i64 0, i32 0
  %376 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %375, align 8
  %377 = icmp eq %"class.std::__1::__tree_node_base"* %376, null
  br i1 %377, label %381, label %378

378:                                              ; preds = %363
  %379 = ptrtoint %"class.std::__1::__tree_node_base"* %376 to i64
  store i64 %379, i64* %146, align 8
  %380 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %359, align 8
  br label %381

381:                                              ; preds = %378, %363
  %382 = phi %"class.std::__1::__tree_node_base"* [ %370, %363 ], [ %380, %378 ]
  %383 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %115, align 8
  call void @_ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_(%"class.std::__1::__tree_node_base"* %383, %"class.std::__1::__tree_node_base"* %382) #9
  %384 = load i64, i64* %116, align 8
  %385 = add i64 %384, 1
  store i64 %385, i64* %116, align 8
  br label %386

386:                                              ; preds = %357, %381
  %387 = phi %"class.std::__1::__tree_node"* [ %369, %381 ], [ %361, %357 ]
  %388 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %387, i64 0, i32 1, i32 0, i32 1
  store i64 %328, i64* %388, align 8
  %389 = load i8, i8* %131, align 4
  %390 = load i8, i8* %132, align 1
  %391 = load i8, i8* %133, align 2
  %392 = load i8, i8* %134, align 1
  br label %393

393:                                              ; preds = %415, %386
  %394 = phi i64 [ 0, %386 ], [ %416, %415 ]
  %395 = getelementptr inbounds [17 x %"struct.std::__1::array"*], [17 x %"struct.std::__1::array"*]* @_ZN3jxlL11kTagStringsE, i64 0, i64 %394
  %396 = load %"struct.std::__1::array"*, %"struct.std::__1::array"** %395, align 8
  %397 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %396, i64 0, i32 0, i64 0
  %398 = load i8, i8* %397, align 1
  %399 = icmp eq i8 %389, %398
  br i1 %399, label %400, label %415

400:                                              ; preds = %393
  %401 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %396, i64 0, i32 0, i64 1
  %402 = load i8, i8* %401, align 1
  %403 = icmp eq i8 %390, %402
  br i1 %403, label %404, label %415

404:                                              ; preds = %400
  %405 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %396, i64 0, i32 0, i64 2
  %406 = load i8, i8* %405, align 1
  %407 = icmp eq i8 %391, %406
  br i1 %407, label %408, label %415

408:                                              ; preds = %404
  %409 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %396, i64 0, i32 0, i64 3
  %410 = load i8, i8* %409, align 1
  %411 = icmp eq i8 %392, %410
  br i1 %411, label %412, label %415

412:                                              ; preds = %408
  %413 = trunc i64 %394 to i8
  %414 = add nuw nsw i8 %413, 4
  br label %418

415:                                              ; preds = %393, %400, %404, %408
  %416 = add nuw nsw i64 %394, 1
  %417 = icmp eq i64 %416, 17
  br i1 %417, label %418, label %393

418:                                              ; preds = %415, %412
  %419 = phi i8 [ %414, %412 ], [ 1, %415 ]
  %420 = icmp eq i8 %389, 114
  br i1 %420, label %421, label %589

421:                                              ; preds = %418
  %422 = icmp eq i8 %390, 84
  br i1 %422, label %423, label %538

423:                                              ; preds = %421
  %424 = icmp eq i8 %391, 82
  %425 = icmp eq i8 %392, 67
  %426 = and i1 %424, %425
  br i1 %426, label %427, label %529

427:                                              ; preds = %423
  %428 = load i64, i64* %11, align 8
  %429 = add i64 %428, 24
  %430 = icmp ult i64 %429, %1
  br i1 %430, label %431, label %529

431:                                              ; preds = %427
  %432 = call i32 @_ZN3jxl13DecodeKeywordEPKhmm(i8* %0, i64 %1, i64 %428) #9
  %433 = load i64, i64* %11, align 8
  %434 = add i64 %433, 12
  %435 = call i32 @_ZN3jxl13DecodeKeywordEPKhmm(i8* %0, i64 %1, i64 %434) #9
  %436 = and i32 %435, 16777215
  %437 = icmp eq i32 %436, 5395554
  br i1 %437, label %438, label %529

438:                                              ; preds = %431
  %439 = icmp eq i32 %432, 1129469031
  %440 = and i32 %435, -16777216
  %441 = icmp eq i32 %440, 1124073472
  %442 = and i1 %439, %441
  br i1 %442, label %443, label %529

443:                                              ; preds = %438
  %444 = load i64, i64* %11, align 8
  %445 = add i64 %444, -8
  %446 = getelementptr inbounds i8, i8* %0, i64 %445
  %447 = add i64 %444, 4
  %448 = getelementptr inbounds i8, i8* %0, i64 %447
  %449 = load i8, i8* %448, align 1
  %450 = add i64 %444, 16
  %451 = getelementptr inbounds i8, i8* %0, i64 %450
  %452 = load i8, i8* %451, align 1
  %453 = add i64 %444, 5
  %454 = getelementptr inbounds i8, i8* %0, i64 %453
  %455 = load i8, i8* %454, align 1
  %456 = add i64 %444, 17
  %457 = getelementptr inbounds i8, i8* %0, i64 %456
  %458 = load i8, i8* %457, align 1
  %459 = add i64 %444, 6
  %460 = getelementptr inbounds i8, i8* %0, i64 %459
  %461 = load i8, i8* %460, align 1
  %462 = add i64 %444, 18
  %463 = getelementptr inbounds i8, i8* %0, i64 %462
  %464 = load i8, i8* %463, align 1
  %465 = add i64 %444, 7
  %466 = getelementptr inbounds i8, i8* %0, i64 %465
  %467 = load i8, i8* %466, align 1
  %468 = add i64 %444, 19
  %469 = getelementptr inbounds i8, i8* %0, i64 %468
  %470 = load i8, i8* %469, align 1
  %471 = add i64 %444, 8
  %472 = getelementptr inbounds i8, i8* %0, i64 %471
  %473 = load i8, i8* %472, align 1
  %474 = add i64 %444, 20
  %475 = getelementptr inbounds i8, i8* %0, i64 %474
  %476 = load i8, i8* %475, align 1
  %477 = add i64 %444, 9
  %478 = getelementptr inbounds i8, i8* %0, i64 %477
  %479 = load i8, i8* %478, align 1
  %480 = add i64 %444, 21
  %481 = getelementptr inbounds i8, i8* %0, i64 %480
  %482 = load i8, i8* %481, align 1
  %483 = add i64 %444, 10
  %484 = getelementptr inbounds i8, i8* %0, i64 %483
  %485 = load i8, i8* %484, align 1
  %486 = add i64 %444, 22
  %487 = getelementptr inbounds i8, i8* %0, i64 %486
  %488 = load i8, i8* %487, align 1
  %489 = bitcast i8* %446 to <8 x i8>*
  %490 = load <8 x i8>, <8 x i8>* %489, align 1
  %491 = shufflevector <8 x i8> %490, <8 x i8> undef, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %492 = shufflevector <8 x i8> %491, <8 x i8> undef, <16 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7>
  %493 = add i64 %444, 11
  %494 = getelementptr inbounds i8, i8* %0, i64 %493
  %495 = load i8, i8* %494, align 1
  %496 = add i64 %444, 23
  %497 = getelementptr inbounds i8, i8* %0, i64 %496
  %498 = load i8, i8* %497, align 1
  %499 = insertelement <16 x i8> undef, i8 %495, i32 0
  %500 = insertelement <16 x i8> %499, i8 %498, i32 1
  %501 = insertelement <16 x i8> %500, i8 %485, i32 2
  %502 = insertelement <16 x i8> %501, i8 %488, i32 3
  %503 = insertelement <16 x i8> %502, i8 %479, i32 4
  %504 = insertelement <16 x i8> %503, i8 %482, i32 5
  %505 = insertelement <16 x i8> %504, i8 %473, i32 6
  %506 = insertelement <16 x i8> %505, i8 %476, i32 7
  %507 = insertelement <16 x i8> %506, i8 %467, i32 8
  %508 = insertelement <16 x i8> %507, i8 %470, i32 9
  %509 = insertelement <16 x i8> %508, i8 %461, i32 10
  %510 = insertelement <16 x i8> %509, i8 %464, i32 11
  %511 = insertelement <16 x i8> %510, i8 %455, i32 12
  %512 = insertelement <16 x i8> %511, i8 %458, i32 13
  %513 = insertelement <16 x i8> %512, i8 %449, i32 14
  %514 = insertelement <16 x i8> %513, i8 %452, i32 15
  %515 = icmp eq <16 x i8> %492, %514
  %516 = shufflevector <16 x i1> %515, <16 x i1> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %517 = and <16 x i1> %515, %516
  %518 = shufflevector <16 x i1> %517, <16 x i1> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %519 = and <16 x i1> %517, %518
  %520 = shufflevector <16 x i1> %519, <16 x i1> undef, <16 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %521 = and <16 x i1> %519, %520
  %522 = shufflevector <16 x i1> %521, <16 x i1> undef, <16 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %523 = and <16 x i1> %521, %522
  %524 = extractelement <16 x i1> %523, i32 0
  br i1 %524, label %525, label %529

525:                                              ; preds = %443
  %526 = load i64, i64* %11, align 8
  %527 = add i64 %526, 24
  store i64 %527, i64* %11, align 8
  %528 = add i64 %150, 2
  br label %529

529:                                              ; preds = %443, %431, %438, %423, %525, %427
  %530 = phi i8 [ %419, %431 ], [ %419, %438 ], [ %419, %423 ], [ %419, %443 ], [ 2, %525 ], [ %419, %427 ]
  %531 = phi i64 [ %150, %431 ], [ %150, %438 ], [ %150, %423 ], [ %150, %443 ], [ %528, %525 ], [ %150, %427 ]
  %532 = load i8, i8* %131, align 4
  %533 = icmp eq i8 %532, 114
  br i1 %533, label %534, label %589

534:                                              ; preds = %529
  %535 = load i8, i8* %132, align 1
  %536 = load i8, i8* %133, align 2
  %537 = load i8, i8* %134, align 1
  br label %538

538:                                              ; preds = %421, %534
  %539 = phi i8 [ %537, %534 ], [ %392, %421 ]
  %540 = phi i8 [ %536, %534 ], [ %391, %421 ]
  %541 = phi i8 [ %535, %534 ], [ %390, %421 ]
  %542 = phi i64 [ %531, %534 ], [ %150, %421 ]
  %543 = phi i8 [ %530, %534 ], [ %419, %421 ]
  %544 = icmp eq i8 %541, 88
  %545 = icmp eq i8 %540, 89
  %546 = and i1 %544, %545
  %547 = icmp eq i8 %539, 90
  %548 = and i1 %546, %547
  br i1 %548, label %549, label %589

549:                                              ; preds = %538
  %550 = load i64, i64* %11, align 8
  %551 = add i64 %550, 24
  %552 = icmp ult i64 %551, %1
  br i1 %552, label %553, label %589

553:                                              ; preds = %549
  %554 = call i32 @_ZN3jxl13DecodeKeywordEPKhmm(i8* %0, i64 %1, i64 %550) #9
  %555 = icmp eq i32 %554, 1515804775
  %556 = load i64, i64* %11, align 8
  %557 = add i64 %556, 12
  %558 = call i32 @_ZN3jxl13DecodeKeywordEPKhmm(i8* %0, i64 %1, i64 %557) #9
  %559 = icmp eq i32 %558, 1515804770
  %560 = and i1 %555, %559
  %561 = load i64, i64* %11, align 8
  %562 = add i64 %561, 4
  %563 = call i32 @_ZN3jxl12DecodeUint32EPKhmm(i8* %0, i64 %1, i64 %562) #9
  %564 = load i64, i64* %11, align 8
  %565 = add i64 %564, 16
  %566 = call i32 @_ZN3jxl12DecodeUint32EPKhmm(i8* %0, i64 %1, i64 %565) #9
  %567 = load i64, i64* %11, align 8
  %568 = add i64 %567, 8
  %569 = call i32 @_ZN3jxl12DecodeUint32EPKhmm(i8* %0, i64 %1, i64 %568) #9
  %570 = load i64, i64* %11, align 8
  %571 = add i64 %570, 20
  %572 = call i32 @_ZN3jxl12DecodeUint32EPKhmm(i8* %0, i64 %1, i64 %571) #9
  %573 = icmp eq i32 %161, 20
  %574 = and i1 %573, %560
  %575 = icmp eq i32 %569, 20
  %576 = and i1 %574, %575
  %577 = icmp eq i32 %572, 20
  %578 = and i1 %576, %577
  %579 = add i32 %158, 20
  %580 = icmp eq i32 %563, %579
  %581 = and i1 %580, %578
  %582 = add i32 %158, 40
  %583 = icmp eq i32 %566, %582
  %584 = and i1 %583, %581
  br i1 %584, label %585, label %589

585:                                              ; preds = %553
  %586 = load i64, i64* %11, align 8
  %587 = add i64 %586, 24
  store i64 %587, i64* %11, align 8
  %588 = add i64 %542, 2
  br label %589

589:                                              ; preds = %418, %529, %538, %553, %585, %549
  %590 = phi i8 [ %543, %549 ], [ 3, %585 ], [ %543, %553 ], [ %530, %529 ], [ %543, %538 ], [ %419, %418 ]
  %591 = phi i64 [ %542, %549 ], [ %588, %585 ], [ %542, %553 ], [ %531, %529 ], [ %542, %538 ], [ %150, %418 ]
  %592 = zext i32 %149 to i64
  %593 = add nsw i64 %148, %592
  %594 = icmp eq i64 %593, %220
  %595 = or i8 %590, 64
  %596 = select i1 %594, i8 %590, i8 %595
  %597 = load i8, i8* %131, align 4
  switch i8 %597, label %660 [
    i8 114, label %598
    i8 103, label %607
    i8 98, label %616
    i8 107, label %625
    i8 119, label %634
    i8 108, label %650
  ]

598:                                              ; preds = %589
  %599 = load i8, i8* %132, align 1
  %600 = icmp eq i8 %599, 88
  %601 = load i8, i8* %133, align 2
  %602 = icmp eq i8 %601, 89
  %603 = and i1 %600, %602
  %604 = load i8, i8* %134, align 1
  %605 = icmp eq i8 %604, 90
  %606 = and i1 %603, %605
  br i1 %606, label %659, label %660

607:                                              ; preds = %589
  %608 = load i8, i8* %132, align 1
  %609 = icmp eq i8 %608, 88
  %610 = load i8, i8* %133, align 2
  %611 = icmp eq i8 %610, 89
  %612 = and i1 %609, %611
  %613 = load i8, i8* %134, align 1
  %614 = icmp eq i8 %613, 90
  %615 = and i1 %612, %614
  br i1 %615, label %659, label %660

616:                                              ; preds = %589
  %617 = load i8, i8* %132, align 1
  %618 = icmp eq i8 %617, 88
  %619 = load i8, i8* %133, align 2
  br i1 %618, label %620, label %643

620:                                              ; preds = %616
  %621 = icmp eq i8 %619, 89
  %622 = load i8, i8* %134, align 1
  %623 = icmp eq i8 %622, 90
  %624 = and i1 %621, %623
  br i1 %624, label %659, label %660

625:                                              ; preds = %589
  %626 = load i8, i8* %132, align 1
  %627 = load i8, i8* %133, align 2
  %628 = icmp eq i8 %626, 88
  %629 = icmp eq i8 %627, 89
  %630 = and i1 %628, %629
  %631 = load i8, i8* %134, align 1
  %632 = icmp eq i8 %631, 90
  %633 = and i1 %630, %632
  br i1 %633, label %659, label %660

634:                                              ; preds = %589
  %635 = load i8, i8* %132, align 1
  %636 = load i8, i8* %133, align 2
  %637 = icmp eq i8 %635, 116
  %638 = icmp eq i8 %636, 112
  %639 = and i1 %637, %638
  %640 = load i8, i8* %134, align 1
  %641 = icmp eq i8 %640, 116
  %642 = and i1 %639, %641
  br i1 %642, label %659, label %660

643:                                              ; preds = %616
  %644 = load i8, i8* %134, align 1
  %645 = icmp eq i8 %617, 107
  %646 = icmp eq i8 %619, 112
  %647 = and i1 %645, %646
  %648 = icmp eq i8 %644, 116
  %649 = and i1 %647, %648
  br i1 %649, label %659, label %660

650:                                              ; preds = %589
  %651 = load i8, i8* %132, align 1
  %652 = load i8, i8* %133, align 2
  %653 = icmp eq i8 %651, 117
  %654 = icmp eq i8 %652, 109
  %655 = and i1 %653, %654
  %656 = load i8, i8* %134, align 1
  %657 = icmp eq i8 %656, 105
  %658 = and i1 %655, %657
  br i1 %658, label %659, label %660

659:                                              ; preds = %634, %620, %607, %650, %643, %625, %598
  br label %660

660:                                              ; preds = %643, %634, %625, %607, %598, %589, %620, %650, %659
  %661 = phi i64 [ 20, %659 ], [ %592, %650 ], [ %592, %620 ], [ %592, %589 ], [ %592, %598 ], [ %592, %607 ], [ %592, %625 ], [ %592, %634 ], [ %592, %643 ]
  %662 = icmp eq i64 %661, %272
  %663 = or i8 %596, -128
  %664 = select i1 %662, i8 %596, i8 %663
  %665 = load i64, i64* %17, align 8
  %666 = load i64, i64* %18, align 8
  %667 = icmp eq i64 %665, %666
  br i1 %667, label %670, label %668

668:                                              ; preds = %660
  %669 = load i8*, i8** %19, align 8
  br label %676

670:                                              ; preds = %660
  %671 = add i64 %665, 1
  call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* nonnull %4, i64 %671) #9
  %672 = load i8*, i8** %19, align 8
  %673 = icmp eq i8* %672, null
  br i1 %673, label %681, label %674

674:                                              ; preds = %670
  %675 = load i64, i64* %17, align 8
  br label %676

676:                                              ; preds = %674, %668
  %677 = phi i8* [ %672, %674 ], [ %669, %668 ]
  %678 = phi i64 [ %675, %674 ], [ %665, %668 ]
  %679 = add i64 %678, 1
  store i64 %679, i64* %17, align 8
  %680 = getelementptr inbounds i8, i8* %677, i64 %678
  store i8 %664, i8* %680, align 1
  br label %681

681:                                              ; preds = %670, %676
  %682 = icmp eq i8 %590, 1
  br i1 %682, label %683, label %684

683:                                              ; preds = %681
  call void @_ZN3jxl13AppendKeywordERKNSt3__15arrayIhLm4EEEPNS_11PaddedBytesE(%"struct.std::__1::array"* nonnull dereferenceable(4) %13, %"class.jxl::PaddedBytes"* nonnull %5) #9
  br label %684

684:                                              ; preds = %683, %681
  %685 = and i8 %664, 64
  %686 = icmp eq i8 %685, 0
  br i1 %686, label %688, label %687

687:                                              ; preds = %684
  call fastcc void @_ZN3jxl12_GLOBAL__N_112EncodeVarIntEmPNS_11PaddedBytesE(i64 %220, %"class.jxl::PaddedBytes"* nonnull %4)
  br label %688

688:                                              ; preds = %684, %687
  %689 = icmp slt i8 %664, 0
  br i1 %689, label %690, label %691

690:                                              ; preds = %688
  call fastcc void @_ZN3jxl12_GLOBAL__N_112EncodeVarIntEmPNS_11PaddedBytesE(i64 %272, %"class.jxl::PaddedBytes"* nonnull %4)
  br label %691

691:                                              ; preds = %690, %688
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %131) #9
  %692 = add i64 %591, 1
  %693 = icmp ult i64 %692, %123
  br i1 %693, label %147, label %694

694:                                              ; preds = %147, %691, %121, %100
  %695 = load i64, i64* %17, align 8
  %696 = load i64, i64* %18, align 8
  %697 = icmp eq i64 %695, %696
  br i1 %697, label %700, label %698

698:                                              ; preds = %694
  %699 = load i8*, i8** %19, align 8
  br label %706

700:                                              ; preds = %694
  %701 = add i64 %695, 1
  call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* nonnull %4, i64 %701) #9
  %702 = load i8*, i8** %19, align 8
  %703 = icmp eq i8* %702, null
  br i1 %703, label %711, label %704

704:                                              ; preds = %700
  %705 = load i64, i64* %17, align 8
  br label %706

706:                                              ; preds = %704, %698
  %707 = phi i8* [ %702, %704 ], [ %699, %698 ]
  %708 = phi i64 [ %705, %704 ], [ %695, %698 ]
  %709 = add i64 %708, 1
  store i64 %709, i64* %17, align 8
  %710 = getelementptr inbounds i8, i8* %707, i64 %708
  store i8 0, i8* %710, align 1
  br label %711

711:                                              ; preds = %700, %706
  %712 = load i64, i64* %11, align 8
  %713 = bitcast %"class.jxl::PaddedBytes"* %14 to i8*
  %714 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %14, i64 0, i32 0
  %715 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %14, i64 0, i32 1
  %716 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %14, i64 0, i32 2, i32 0, i32 0, i32 0
  %717 = bitcast %"class.jxl::PaddedBytes"* %15 to i8*
  %718 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %15, i64 0, i32 0
  %719 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %15, i64 0, i32 1
  %720 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %15, i64 0, i32 2, i32 0, i32 0, i32 0
  %721 = bitcast %"class.std::__1::__tree_end_node"* %117 to %"class.std::__1::__tree_node"**
  %722 = bitcast %"class.std::__1::map"* %10 to i64*
  %723 = icmp ugt i64 %712, %1
  br i1 %723, label %1577, label %724

724:                                              ; preds = %711, %1574
  %725 = phi i64 [ %1563, %1574 ], [ 0, %711 ]
  %726 = phi i64 [ %1562, %1574 ], [ 0, %711 ]
  %727 = phi i64 [ %1561, %1574 ], [ 0, %711 ]
  %728 = phi i64 [ %1560, %1574 ], [ %712, %711 ]
  %729 = phi i32 [ %1559, %1574 ], [ undef, %711 ]
  %730 = phi i8 [ %1558, %1574 ], [ -86, %711 ]
  %731 = phi i8 [ %1557, %1574 ], [ -86, %711 ]
  %732 = phi i8 [ %1556, %1574 ], [ -86, %711 ]
  %733 = phi i8 [ %1555, %1574 ], [ -86, %711 ]
  %734 = phi i64 [ %1575, %1574 ], [ %712, %711 ]
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %713) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %713, i8 0, i64 24, i1 false) #9
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %717) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %717, i8 0, i64 24, i1 false) #9
  %735 = add i64 %725, %726
  %736 = icmp ugt i64 %734, %735
  %737 = select i1 %736, i8 0, i8 %733
  %738 = select i1 %736, i8 0, i8 %732
  %739 = select i1 %736, i8 0, i8 %731
  %740 = select i1 %736, i8 0, i8 %730
  %741 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %721, align 8
  %742 = icmp eq %"class.std::__1::__tree_node"* %741, null
  br i1 %742, label %1031, label %743

743:                                              ; preds = %724, %755
  %744 = phi %"class.std::__1::__tree_node"* [ %757, %755 ], [ %741, %724 ]
  %745 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %744, i64 0, i32 1, i32 0, i32 0
  %746 = load i64, i64* %745, align 8
  %747 = icmp ult i64 %734, %746
  br i1 %747, label %748, label %750

748:                                              ; preds = %743
  %749 = bitcast %"class.std::__1::__tree_node"* %744 to %"class.std::__1::__tree_node"**
  br label %755

750:                                              ; preds = %743
  %751 = icmp ult i64 %746, %734
  br i1 %751, label %752, label %759

752:                                              ; preds = %750
  %753 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %744, i64 0, i32 0, i32 1
  %754 = bitcast %"class.std::__1::__tree_node_base"** %753 to %"class.std::__1::__tree_node"**
  br label %755

755:                                              ; preds = %752, %748
  %756 = phi %"class.std::__1::__tree_node"** [ %749, %748 ], [ %754, %752 ]
  %757 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %756, align 8
  %758 = icmp eq %"class.std::__1::__tree_node"* %757, null
  br i1 %758, label %1031, label %743

759:                                              ; preds = %750
  %760 = add i64 %734, 4
  %761 = icmp ugt i64 %760, %1
  br i1 %761, label %1031, label %762

762:                                              ; preds = %759, %778
  %763 = phi %"class.std::__1::__tree_node"* [ %781, %778 ], [ %741, %759 ]
  %764 = phi %"class.std::__1::__tree_node_base"** [ %780, %778 ], [ %115, %759 ]
  %765 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %763, i64 0, i32 1, i32 0, i32 0
  %766 = load i64, i64* %765, align 8
  %767 = icmp ult i64 %734, %766
  br i1 %767, label %768, label %772

768:                                              ; preds = %762
  %769 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %763, i64 0, i32 0, i32 0, i32 0
  %770 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %769, align 8
  %771 = icmp eq %"class.std::__1::__tree_node_base"* %770, null
  br i1 %771, label %782, label %778

772:                                              ; preds = %762
  %773 = icmp ult i64 %766, %734
  br i1 %773, label %774, label %782

774:                                              ; preds = %772
  %775 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %763, i64 0, i32 0, i32 1
  %776 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %775, align 8
  %777 = icmp eq %"class.std::__1::__tree_node_base"* %776, null
  br i1 %777, label %782, label %778

778:                                              ; preds = %774, %768
  %779 = phi %"class.std::__1::__tree_node_base"* [ %770, %768 ], [ %776, %774 ]
  %780 = phi %"class.std::__1::__tree_node_base"** [ %769, %768 ], [ %775, %774 ]
  %781 = bitcast %"class.std::__1::__tree_node_base"* %779 to %"class.std::__1::__tree_node"*
  br label %762

782:                                              ; preds = %772, %774, %768
  %783 = phi %"class.std::__1::__tree_node_base"** [ %769, %768 ], [ %775, %774 ], [ %764, %772 ]
  %784 = bitcast %"class.std::__1::__tree_node_base"** %783 to %"class.std::__1::__tree_node"**
  %785 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %784, align 8
  %786 = icmp eq %"class.std::__1::__tree_node"* %785, null
  br i1 %786, label %787, label %812

787:                                              ; preds = %782
  %788 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %763, i64 0, i32 0, i32 0
  %789 = call i8* @_Znwm(i64 48) #11, !noalias !5
  %790 = getelementptr inbounds i8, i8* %789, i64 32
  %791 = bitcast i8* %790 to i64*
  store i64 %734, i64* %791, align 8, !noalias !5
  %792 = getelementptr inbounds i8, i8* %789, i64 40
  %793 = bitcast i8* %792 to i64*
  store i64 0, i64* %793, align 8, !noalias !5
  %794 = bitcast i8* %789 to %"class.std::__1::__tree_node"*
  %795 = bitcast i8* %789 to %"class.std::__1::__tree_node_base"*
  %796 = getelementptr inbounds i8, i8* %789, i64 16
  %797 = bitcast i8* %796 to %"class.std::__1::__tree_end_node"**
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %789, i8 0, i64 16, i1 false) #9
  store %"class.std::__1::__tree_end_node"* %788, %"class.std::__1::__tree_end_node"** %797, align 8
  %798 = bitcast %"class.std::__1::__tree_node_base"** %783 to i8**
  store i8* %789, i8** %798, align 8
  %799 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %114, align 8
  %800 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %799, i64 0, i32 0
  %801 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %800, align 8
  %802 = icmp eq %"class.std::__1::__tree_node_base"* %801, null
  br i1 %802, label %806, label %803

803:                                              ; preds = %787
  %804 = ptrtoint %"class.std::__1::__tree_node_base"* %801 to i64
  store i64 %804, i64* %722, align 8
  %805 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %783, align 8
  br label %806

806:                                              ; preds = %803, %787
  %807 = phi %"class.std::__1::__tree_node_base"* [ %795, %787 ], [ %805, %803 ]
  %808 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %115, align 8
  call void @_ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_(%"class.std::__1::__tree_node_base"* %808, %"class.std::__1::__tree_node_base"* %807) #9
  %809 = load i64, i64* %116, align 8
  %810 = add i64 %809, 1
  store i64 %810, i64* %116, align 8
  %811 = load i64, i64* %11, align 8
  br label %812

812:                                              ; preds = %782, %806
  %813 = phi i64 [ %811, %806 ], [ %734, %782 ]
  %814 = phi %"class.std::__1::__tree_node"* [ %794, %806 ], [ %785, %782 ]
  %815 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %814, i64 0, i32 1, i32 0, i32 1
  %816 = load i64, i64* %815, align 8
  %817 = call i32 @_ZN3jxl13DecodeKeywordEPKhmm(i8* %0, i64 %1, i64 %813) #9
  %818 = trunc i32 %817 to i8
  %819 = lshr i32 %817, 8
  %820 = trunc i32 %819 to i8
  %821 = lshr i32 %817, 16
  %822 = trunc i32 %821 to i8
  %823 = lshr i32 %817, 24
  %824 = trunc i32 %823 to i8
  %825 = load i64*, i64** %106, align 8
  %826 = getelementptr inbounds i64, i64* %825, i64 %816
  %827 = load i64, i64* %826, align 8
  %828 = load i64*, i64** %110, align 8
  %829 = getelementptr inbounds i64, i64* %828, i64 %816
  %830 = load i64, i64* %829, align 8
  switch i8 %818, label %1031 [
    i8 109, label %831
    i8 99, label %934
  ]

831:                                              ; preds = %812
  %832 = icmp eq i8 %820, 108
  br i1 %832, label %833, label %1039

833:                                              ; preds = %831
  %834 = icmp eq i8 %822, 117
  br i1 %834, label %835, label %1240

835:                                              ; preds = %833
  %836 = icmp eq i8 %824, 99
  br i1 %836, label %837, label %1240

837:                                              ; preds = %835
  %838 = load i64, i64* %11, align 8
  %839 = add i64 %838, %830
  %840 = icmp ule i64 %839, %1
  %841 = icmp ugt i64 %830, 8
  %842 = and i1 %841, %840
  br i1 %842, label %843, label %1240

843:                                              ; preds = %837
  %844 = add i64 %838, 4
  %845 = getelementptr inbounds i8, i8* %0, i64 %844
  %846 = load i8, i8* %845, align 1
  %847 = icmp eq i8 %846, 0
  br i1 %847, label %848, label %1240

848:                                              ; preds = %843
  %849 = add i64 %838, 5
  %850 = getelementptr inbounds i8, i8* %0, i64 %849
  %851 = load i8, i8* %850, align 1
  %852 = icmp eq i8 %851, 0
  br i1 %852, label %853, label %1240

853:                                              ; preds = %848
  %854 = add i64 %838, 6
  %855 = getelementptr inbounds i8, i8* %0, i64 %854
  %856 = load i8, i8* %855, align 1
  %857 = icmp eq i8 %856, 0
  br i1 %857, label %858, label %1240

858:                                              ; preds = %853
  %859 = add i64 %838, 7
  %860 = getelementptr inbounds i8, i8* %0, i64 %859
  %861 = load i8, i8* %860, align 1
  %862 = icmp eq i8 %861, 0
  br i1 %862, label %863, label %1240

863:                                              ; preds = %858
  %864 = add i64 %830, -8
  %865 = load i64, i64* %714, align 8
  %866 = load i64, i64* %715, align 8
  %867 = icmp eq i64 %865, %866
  br i1 %867, label %870, label %868

868:                                              ; preds = %863
  %869 = load i8*, i8** %716, align 8
  br label %876

870:                                              ; preds = %863
  %871 = add i64 %865, 1
  call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* nonnull %14, i64 %871) #9
  %872 = load i8*, i8** %716, align 8
  %873 = icmp eq i8* %872, null
  br i1 %873, label %881, label %874

874:                                              ; preds = %870
  %875 = load i64, i64* %714, align 8
  br label %876

876:                                              ; preds = %874, %868
  %877 = phi i8* [ %872, %874 ], [ %869, %868 ]
  %878 = phi i64 [ %875, %874 ], [ %865, %868 ]
  %879 = add i64 %878, 1
  store i64 %879, i64* %714, align 8
  %880 = getelementptr inbounds i8, i8* %877, i64 %878
  store i8 19, i8* %880, align 1
  br label %881

881:                                              ; preds = %870, %876
  %882 = load i64, i64* %11, align 8
  %883 = add i64 %882, 8
  store i64 %883, i64* %11, align 8
  %884 = load i64, i64* %714, align 8
  %885 = load i64, i64* %715, align 8
  %886 = icmp eq i64 %884, %885
  br i1 %886, label %889, label %887

887:                                              ; preds = %881
  %888 = load i8*, i8** %716, align 8
  br label %895

889:                                              ; preds = %881
  %890 = add i64 %884, 1
  call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* nonnull %14, i64 %890) #9
  %891 = load i8*, i8** %716, align 8
  %892 = icmp eq i8* %891, null
  br i1 %892, label %900, label %893

893:                                              ; preds = %889
  %894 = load i64, i64* %714, align 8
  br label %895

895:                                              ; preds = %893, %887
  %896 = phi i8* [ %891, %893 ], [ %888, %887 ]
  %897 = phi i64 [ %894, %893 ], [ %884, %887 ]
  %898 = add i64 %897, 1
  store i64 %898, i64* %714, align 8
  %899 = getelementptr inbounds i8, i8* %896, i64 %897
  store i8 2, i8* %899, align 1
  br label %900

900:                                              ; preds = %895, %889
  call fastcc void @_ZN3jxl12_GLOBAL__N_112EncodeVarIntEmPNS_11PaddedBytesE(i64 %864, %"class.jxl::PaddedBytes"* nonnull %14)
  %901 = load i64, i64* %718, align 8
  %902 = load i64, i64* %11, align 8
  br label %906

903:                                              ; preds = %927
  %904 = load i8*, i8** %720, align 8
  %905 = getelementptr inbounds i8, i8* %904, i64 %901
  call fastcc void @_ZN3jxl12_GLOBAL__N_19UnshuffleEPhmm(i8* %905, i64 %864, i64 2)
  br label %1240

906:                                              ; preds = %932, %900
  %907 = phi i64 [ %933, %932 ], [ %901, %900 ]
  %908 = phi i64 [ %929, %932 ], [ %902, %900 ]
  %909 = phi i64 [ %930, %932 ], [ 0, %900 ]
  %910 = getelementptr inbounds i8, i8* %0, i64 %908
  %911 = load i8, i8* %910, align 1
  %912 = load i64, i64* %719, align 8
  %913 = icmp eq i64 %907, %912
  br i1 %913, label %916, label %914

914:                                              ; preds = %906
  %915 = load i8*, i8** %720, align 8
  br label %922

916:                                              ; preds = %906
  %917 = add i64 %907, 1
  call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* nonnull %15, i64 %917) #9
  %918 = load i8*, i8** %720, align 8
  %919 = icmp eq i8* %918, null
  br i1 %919, label %927, label %920

920:                                              ; preds = %916
  %921 = load i64, i64* %718, align 8
  br label %922

922:                                              ; preds = %920, %914
  %923 = phi i8* [ %918, %920 ], [ %915, %914 ]
  %924 = phi i64 [ %921, %920 ], [ %907, %914 ]
  %925 = add i64 %924, 1
  store i64 %925, i64* %718, align 8
  %926 = getelementptr inbounds i8, i8* %923, i64 %924
  store i8 %911, i8* %926, align 1
  br label %927

927:                                              ; preds = %916, %922
  %928 = load i64, i64* %11, align 8
  %929 = add i64 %928, 1
  store i64 %929, i64* %11, align 8
  %930 = add nuw i64 %909, 1
  %931 = icmp eq i64 %930, %864
  br i1 %931, label %903, label %932

932:                                              ; preds = %927
  %933 = load i64, i64* %718, align 8
  br label %906

934:                                              ; preds = %812
  %935 = icmp eq i8 %820, 117
  br i1 %935, label %936, label %1240

936:                                              ; preds = %934
  %937 = icmp eq i8 %822, 114
  br i1 %937, label %938, label %1240

938:                                              ; preds = %936
  %939 = icmp eq i8 %824, 118
  br i1 %939, label %940, label %1240

940:                                              ; preds = %938
  %941 = load i64, i64* %11, align 8
  %942 = add i64 %941, %830
  %943 = icmp ule i64 %942, %1
  %944 = icmp ugt i64 %830, 8
  %945 = and i1 %944, %943
  br i1 %945, label %946, label %1240

946:                                              ; preds = %940
  %947 = add i64 %941, 4
  %948 = getelementptr inbounds i8, i8* %0, i64 %947
  %949 = load i8, i8* %948, align 1
  %950 = icmp eq i8 %949, 0
  br i1 %950, label %951, label %1240

951:                                              ; preds = %946
  %952 = add i64 %941, 5
  %953 = getelementptr inbounds i8, i8* %0, i64 %952
  %954 = load i8, i8* %953, align 1
  %955 = icmp eq i8 %954, 0
  br i1 %955, label %956, label %1240

956:                                              ; preds = %951
  %957 = add i64 %941, 6
  %958 = getelementptr inbounds i8, i8* %0, i64 %957
  %959 = load i8, i8* %958, align 1
  %960 = icmp eq i8 %959, 0
  br i1 %960, label %961, label %1240

961:                                              ; preds = %956
  %962 = add i64 %941, 7
  %963 = getelementptr inbounds i8, i8* %0, i64 %962
  %964 = load i8, i8* %963, align 1
  %965 = icmp eq i8 %964, 0
  br i1 %965, label %966, label %1240

966:                                              ; preds = %961
  %967 = add i64 %830, -8
  %968 = add i64 %830, -25
  %969 = icmp ult i64 %968, 268435439
  br i1 %969, label %970, label %1240

970:                                              ; preds = %966
  %971 = add i64 %941, %967
  %972 = icmp ule i64 %971, %1
  %973 = icmp ne i64 %941, 0
  %974 = and i1 %973, %972
  br i1 %974, label %975, label %1240

975:                                              ; preds = %970
  %976 = load i64, i64* %714, align 8
  %977 = load i64, i64* %715, align 8
  %978 = icmp eq i64 %976, %977
  br i1 %978, label %981, label %979

979:                                              ; preds = %975
  %980 = load i8*, i8** %716, align 8
  br label %987

981:                                              ; preds = %975
  %982 = add i64 %976, 1
  call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* nonnull %14, i64 %982) #9
  %983 = load i8*, i8** %716, align 8
  %984 = icmp eq i8* %983, null
  br i1 %984, label %992, label %985

985:                                              ; preds = %981
  %986 = load i64, i64* %714, align 8
  br label %987

987:                                              ; preds = %985, %979
  %988 = phi i8* [ %983, %985 ], [ %980, %979 ]
  %989 = phi i64 [ %986, %985 ], [ %976, %979 ]
  %990 = add i64 %989, 1
  store i64 %990, i64* %714, align 8
  %991 = getelementptr inbounds i8, i8* %988, i64 %989
  store i8 21, i8* %991, align 1
  br label %992

992:                                              ; preds = %981, %987
  %993 = load i64, i64* %11, align 8
  %994 = add i64 %993, 8
  store i64 %994, i64* %11, align 8
  %995 = load i64, i64* %714, align 8
  %996 = load i64, i64* %715, align 8
  %997 = icmp eq i64 %995, %996
  br i1 %997, label %1000, label %998

998:                                              ; preds = %992
  %999 = load i8*, i8** %716, align 8
  br label %1006

1000:                                             ; preds = %992
  %1001 = add i64 %995, 1
  call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* nonnull %14, i64 %1001) #9
  %1002 = load i8*, i8** %716, align 8
  %1003 = icmp eq i8* %1002, null
  br i1 %1003, label %1011, label %1004

1004:                                             ; preds = %1000
  %1005 = load i64, i64* %714, align 8
  br label %1006

1006:                                             ; preds = %1004, %998
  %1007 = phi i8* [ %1002, %1004 ], [ %999, %998 ]
  %1008 = phi i64 [ %1005, %1004 ], [ %995, %998 ]
  %1009 = add i64 %1008, 1
  store i64 %1009, i64* %714, align 8
  %1010 = getelementptr inbounds i8, i8* %1007, i64 %1008
  store i8 4, i8* %1010, align 1
  br label %1011

1011:                                             ; preds = %1000, %1006
  %1012 = load i64, i64* %714, align 8
  %1013 = load i64, i64* %715, align 8
  %1014 = icmp eq i64 %1012, %1013
  br i1 %1014, label %1017, label %1015

1015:                                             ; preds = %1011
  %1016 = load i8*, i8** %716, align 8
  br label %1023

1017:                                             ; preds = %1011
  %1018 = add i64 %1012, 1
  call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* nonnull %14, i64 %1018) #9
  %1019 = load i8*, i8** %716, align 8
  %1020 = icmp eq i8* %1019, null
  br i1 %1020, label %1028, label %1021

1021:                                             ; preds = %1017
  %1022 = load i64, i64* %714, align 8
  br label %1023

1023:                                             ; preds = %1021, %1015
  %1024 = phi i8* [ %1019, %1021 ], [ %1016, %1015 ]
  %1025 = phi i64 [ %1022, %1021 ], [ %1012, %1015 ]
  %1026 = add i64 %1025, 1
  store i64 %1026, i64* %714, align 8
  %1027 = getelementptr inbounds i8, i8* %1024, i64 %1025
  store i8 5, i8* %1027, align 1
  br label %1028

1028:                                             ; preds = %1017, %1023
  call fastcc void @_ZN3jxl12_GLOBAL__N_112EncodeVarIntEmPNS_11PaddedBytesE(i64 %967, %"class.jxl::PaddedBytes"* nonnull %14)
  %1029 = call fastcc i32 @_ZN3jxl12_GLOBAL__N_117PredictAndShuffleEmmimPKhmPmPNS_11PaddedBytesE(i64 2, i64 2, i32 1, i64 %967, i8* %0, i64 %1, i64* nonnull %11, %"class.jxl::PaddedBytes"* nonnull %15)
  %1030 = icmp eq i32 %1029, 0
  br i1 %1030, label %1240, label %1554

1031:                                             ; preds = %755, %812, %724, %759
  %1032 = phi i8 [ %737, %759 ], [ %737, %724 ], [ %824, %812 ], [ %737, %755 ]
  %1033 = phi i8 [ %738, %759 ], [ %738, %724 ], [ %822, %812 ], [ %738, %755 ]
  %1034 = phi i8 [ %739, %759 ], [ %739, %724 ], [ %820, %812 ], [ %739, %755 ]
  %1035 = phi i8 [ %740, %759 ], [ %740, %724 ], [ %818, %812 ], [ %740, %755 ]
  %1036 = phi i64 [ %726, %759 ], [ %726, %724 ], [ %830, %812 ], [ %726, %755 ]
  %1037 = phi i64 [ %725, %759 ], [ %725, %724 ], [ %827, %812 ], [ %725, %755 ]
  %1038 = icmp eq i8 %1035, 109
  br i1 %1038, label %1039, label %1240

1039:                                             ; preds = %831, %1031
  %1040 = phi i64 [ %1037, %1031 ], [ %827, %831 ]
  %1041 = phi i64 [ %1036, %1031 ], [ %830, %831 ]
  %1042 = phi i8 [ %1034, %1031 ], [ %820, %831 ]
  %1043 = phi i8 [ %1033, %1031 ], [ %822, %831 ]
  %1044 = phi i8 [ %1032, %1031 ], [ %824, %831 ]
  switch i8 %1042, label %1240 [
    i8 65, label %1045
    i8 66, label %1049
  ]

1045:                                             ; preds = %1039
  %1046 = icmp eq i8 %1043, 66
  br i1 %1046, label %1047, label %1240

1047:                                             ; preds = %1045
  %1048 = icmp eq i8 %1044, 32
  br i1 %1048, label %1053, label %1240

1049:                                             ; preds = %1039
  %1050 = icmp eq i8 %1043, 65
  br i1 %1050, label %1051, label %1240

1051:                                             ; preds = %1049
  %1052 = icmp eq i8 %1044, 32
  br i1 %1052, label %1053, label %1240

1053:                                             ; preds = %1051, %1047
  %1054 = phi i8 [ 66, %1051 ], [ 65, %1047 ]
  %1055 = phi i8 [ 65, %1051 ], [ 66, %1047 ]
  %1056 = load i64, i64* %11, align 8
  %1057 = call i32 @_ZN3jxl13DecodeKeywordEPKhmm(i8* %0, i64 %1, i64 %1056) #9
  %1058 = lshr i32 %1057, 8
  %1059 = trunc i32 %1058 to i8
  %1060 = lshr i32 %1057, 16
  %1061 = trunc i32 %1060 to i8
  %1062 = lshr i32 %1057, 24
  %1063 = trunc i32 %1062 to i8
  %1064 = load i64, i64* %11, align 8
  %1065 = add i64 %1064, 12
  %1066 = icmp ult i64 %1065, %1
  br i1 %1066, label %1067, label %1135

1067:                                             ; preds = %1053
  %1068 = trunc i32 %1057 to i8
  switch i8 %1068, label %1135 [
    i8 99, label %1069
    i8 118, label %1075
  ]

1069:                                             ; preds = %1067
  %1070 = icmp eq i8 %1059, 117
  %1071 = icmp eq i8 %1061, 114
  %1072 = and i1 %1070, %1071
  %1073 = icmp eq i8 %1063, 118
  %1074 = and i1 %1073, %1072
  br i1 %1074, label %1081, label %1135

1075:                                             ; preds = %1067
  %1076 = icmp eq i8 %1059, 99
  %1077 = icmp eq i8 %1061, 103
  %1078 = and i1 %1076, %1077
  %1079 = icmp eq i8 %1063, 116
  %1080 = and i1 %1079, %1078
  br i1 %1080, label %1081, label %1135

1081:                                             ; preds = %1075, %1069
  %1082 = add i64 %1064, 4
  %1083 = call i32 @_ZN3jxl12DecodeUint32EPKhmm(i8* %0, i64 %1, i64 %1082) #9
  %1084 = icmp eq i32 %1083, 0
  br i1 %1084, label %1085, label %1135

1085:                                             ; preds = %1081
  %1086 = load i64, i64* %11, align 8
  %1087 = add i64 %1086, 8
  %1088 = call i32 @_ZN3jxl12DecodeUint32EPKhmm(i8* %0, i64 %1, i64 %1087) #9
  %1089 = shl i32 %1088, 1
  %1090 = add i32 %1089, -17
  %1091 = icmp ult i32 %1090, 268435439
  br i1 %1091, label %1092, label %1135

1092:                                             ; preds = %1085
  %1093 = load i64, i64* %11, align 8
  %1094 = add i64 %1093, 12
  %1095 = zext i32 %1089 to i64
  %1096 = add i64 %1094, %1095
  %1097 = icmp ugt i64 %1096, %1
  br i1 %1097, label %1135, label %1098

1098:                                             ; preds = %1092
  store i64 %1094, i64* %11, align 8
  %1099 = load i64, i64* %714, align 8
  %1100 = load i64, i64* %715, align 8
  %1101 = icmp eq i64 %1099, %1100
  br i1 %1101, label %1104, label %1102

1102:                                             ; preds = %1098
  %1103 = load i8*, i8** %716, align 8
  br label %1110

1104:                                             ; preds = %1098
  %1105 = add i64 %1099, 1
  call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* nonnull %14, i64 %1105) #9
  %1106 = load i8*, i8** %716, align 8
  %1107 = icmp eq i8* %1106, null
  br i1 %1107, label %1115, label %1108

1108:                                             ; preds = %1104
  %1109 = load i64, i64* %714, align 8
  br label %1110

1110:                                             ; preds = %1108, %1102
  %1111 = phi i8* [ %1106, %1108 ], [ %1103, %1102 ]
  %1112 = phi i64 [ %1109, %1108 ], [ %1099, %1102 ]
  %1113 = add i64 %1112, 1
  store i64 %1113, i64* %714, align 8
  %1114 = getelementptr inbounds i8, i8* %1111, i64 %1112
  store i8 4, i8* %1114, align 1
  br label %1115

1115:                                             ; preds = %1104, %1110
  %1116 = load i64, i64* %714, align 8
  %1117 = load i64, i64* %715, align 8
  %1118 = icmp eq i64 %1116, %1117
  br i1 %1118, label %1121, label %1119

1119:                                             ; preds = %1115
  %1120 = load i8*, i8** %716, align 8
  br label %1127

1121:                                             ; preds = %1115
  %1122 = add i64 %1116, 1
  call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* nonnull %14, i64 %1122) #9
  %1123 = load i8*, i8** %716, align 8
  %1124 = icmp eq i8* %1123, null
  br i1 %1124, label %1132, label %1125

1125:                                             ; preds = %1121
  %1126 = load i64, i64* %714, align 8
  br label %1127

1127:                                             ; preds = %1125, %1119
  %1128 = phi i8* [ %1123, %1125 ], [ %1120, %1119 ]
  %1129 = phi i64 [ %1126, %1125 ], [ %1116, %1119 ]
  %1130 = add i64 %1129, 1
  store i64 %1130, i64* %714, align 8
  %1131 = getelementptr inbounds i8, i8* %1128, i64 %1129
  store i8 5, i8* %1131, align 1
  br label %1132

1132:                                             ; preds = %1121, %1127
  call fastcc void @_ZN3jxl12_GLOBAL__N_112EncodeVarIntEmPNS_11PaddedBytesE(i64 %1095, %"class.jxl::PaddedBytes"* nonnull %14)
  %1133 = call fastcc i32 @_ZN3jxl12_GLOBAL__N_117PredictAndShuffleEmmimPKhmPmPNS_11PaddedBytesE(i64 2, i64 2, i32 1, i64 %1095, i8* %0, i64 %1, i64* nonnull %11, %"class.jxl::PaddedBytes"* nonnull %15)
  %1134 = icmp eq i32 %1133, 0
  br i1 %1134, label %1135, label %1554

1135:                                             ; preds = %1067, %1132, %1085, %1092, %1069, %1075, %1081, %1053
  %1136 = phi i32 [ %729, %1081 ], [ %729, %1053 ], [ %729, %1075 ], [ %729, %1069 ], [ %729, %1085 ], [ %729, %1092 ], [ 0, %1132 ], [ %729, %1067 ]
  %1137 = phi i64 [ %734, %1081 ], [ %734, %1053 ], [ %734, %1075 ], [ %734, %1069 ], [ %734, %1085 ], [ %734, %1092 ], [ %1094, %1132 ], [ %734, %1067 ]
  %1138 = load i64, i64* %11, align 8
  %1139 = add i64 %1040, 24
  %1140 = icmp eq i64 %1138, %1139
  %1141 = add i64 %1138, 4
  %1142 = icmp ult i64 %1141, %1
  %1143 = and i1 %1140, %1142
  br i1 %1143, label %1144, label %1149

1144:                                             ; preds = %1135
  %1145 = call i32 @_ZN3jxl12DecodeUint32EPKhmm(i8* %0, i64 %1, i64 %1138) #9
  %1146 = zext i32 %1145 to i64
  %1147 = add i64 %1040, %1146
  %1148 = load i64, i64* %11, align 8
  br label %1149

1149:                                             ; preds = %1144, %1135
  %1150 = phi i64 [ %1148, %1144 ], [ %1138, %1135 ]
  %1151 = phi i64 [ %1147, %1144 ], [ %727, %1135 ]
  %1152 = icmp eq i64 %1150, %1151
  br i1 %1152, label %1153, label %1240

1153:                                             ; preds = %1149
  %1154 = add i64 %1150, 16
  %1155 = icmp ult i64 %1154, %1
  br i1 %1155, label %1156, label %1240

1156:                                             ; preds = %1153
  %1157 = add i64 %1040, 8
  %1158 = getelementptr inbounds i8, i8* %0, i64 %1157
  %1159 = load i8, i8* %1158, align 1
  %1160 = zext i8 %1159 to i64
  %1161 = add i64 %1040, 9
  %1162 = getelementptr inbounds i8, i8* %0, i64 %1161
  %1163 = load i8, i8* %1162, align 1
  %1164 = zext i8 %1163 to i64
  %1165 = getelementptr inbounds i8, i8* %0, i64 %1154
  %1166 = load i8, i8* %1165, align 1
  %1167 = zext i8 %1166 to i64
  %1168 = mul nuw nsw i64 %1167, %1164
  %1169 = icmp eq i8 %1159, 0
  br i1 %1169, label %1175, label %1170

1170:                                             ; preds = %1156, %1182
  %1171 = phi i64 [ %1187, %1182 ], [ 0, %1156 ]
  %1172 = phi i64 [ %1186, %1182 ], [ %1168, %1156 ]
  %1173 = add nuw i64 %1171, %1150
  %1174 = icmp ult i64 %1173, %1
  br i1 %1174, label %1182, label %1175

1175:                                             ; preds = %1170, %1182, %1156
  %1176 = phi i64 [ %1168, %1156 ], [ %1186, %1182 ], [ %1172, %1170 ]
  %1177 = add i8 %1166, -1
  %1178 = icmp ult i8 %1177, 2
  %1179 = add i64 %1176, -65
  %1180 = icmp ult i64 %1179, 268435391
  %1181 = and i1 %1178, %1180
  br i1 %1181, label %1189, label %1240

1182:                                             ; preds = %1170
  %1183 = getelementptr inbounds i8, i8* %0, i64 %1173
  %1184 = load i8, i8* %1183, align 1
  %1185 = zext i8 %1184 to i64
  %1186 = mul i64 %1172, %1185
  %1187 = add nuw nsw i64 %1171, 1
  %1188 = icmp eq i64 %1187, %1160
  br i1 %1188, label %1175, label %1170

1189:                                             ; preds = %1175
  %1190 = add i64 %1176, %1150
  %1191 = icmp ule i64 %1190, %1
  %1192 = shl nuw nsw i64 %1168, 2
  %1193 = icmp ugt i64 %1150, %1192
  %1194 = and i1 %1193, %1191
  br i1 %1194, label %1195, label %1240

1195:                                             ; preds = %1189
  %1196 = load i64, i64* %714, align 8
  %1197 = load i64, i64* %715, align 8
  %1198 = icmp eq i64 %1196, %1197
  br i1 %1198, label %1201, label %1199

1199:                                             ; preds = %1195
  %1200 = load i8*, i8** %716, align 8
  br label %1207

1201:                                             ; preds = %1195
  %1202 = add i64 %1196, 1
  call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* nonnull %14, i64 %1202) #9
  %1203 = load i8*, i8** %716, align 8
  %1204 = icmp eq i8* %1203, null
  br i1 %1204, label %1212, label %1205

1205:                                             ; preds = %1201
  %1206 = load i64, i64* %714, align 8
  br label %1207

1207:                                             ; preds = %1205, %1199
  %1208 = phi i8* [ %1203, %1205 ], [ %1200, %1199 ]
  %1209 = phi i64 [ %1206, %1205 ], [ %1196, %1199 ]
  %1210 = add i64 %1209, 1
  store i64 %1210, i64* %714, align 8
  %1211 = getelementptr inbounds i8, i8* %1208, i64 %1209
  store i8 4, i8* %1211, align 1
  br label %1212

1212:                                             ; preds = %1201, %1207
  %1213 = icmp eq i64 %1168, %1167
  %1214 = select i1 %1213, i8 0, i8 16
  %1215 = or i8 %1214, %1177
  %1216 = or i8 %1215, 4
  %1217 = load i64, i64* %714, align 8
  %1218 = load i64, i64* %715, align 8
  %1219 = icmp eq i64 %1217, %1218
  br i1 %1219, label %1222, label %1220

1220:                                             ; preds = %1212
  %1221 = load i8*, i8** %716, align 8
  br label %1228

1222:                                             ; preds = %1212
  %1223 = add i64 %1217, 1
  call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* nonnull %14, i64 %1223) #9
  %1224 = load i8*, i8** %716, align 8
  %1225 = icmp eq i8* %1224, null
  br i1 %1225, label %1233, label %1226

1226:                                             ; preds = %1222
  %1227 = load i64, i64* %714, align 8
  br label %1228

1228:                                             ; preds = %1226, %1220
  %1229 = phi i8* [ %1224, %1226 ], [ %1221, %1220 ]
  %1230 = phi i64 [ %1227, %1226 ], [ %1217, %1220 ]
  %1231 = add i64 %1230, 1
  store i64 %1231, i64* %714, align 8
  %1232 = getelementptr inbounds i8, i8* %1229, i64 %1230
  store i8 %1216, i8* %1232, align 1
  br label %1233

1233:                                             ; preds = %1222, %1228
  %1234 = and i8 %1215, 16
  %1235 = icmp eq i8 %1234, 0
  br i1 %1235, label %1237, label %1236

1236:                                             ; preds = %1233
  call fastcc void @_ZN3jxl12_GLOBAL__N_112EncodeVarIntEmPNS_11PaddedBytesE(i64 %1168, %"class.jxl::PaddedBytes"* nonnull %14)
  br label %1237

1237:                                             ; preds = %1233, %1236
  call fastcc void @_ZN3jxl12_GLOBAL__N_112EncodeVarIntEmPNS_11PaddedBytesE(i64 %1176, %"class.jxl::PaddedBytes"* nonnull %14)
  %1238 = call fastcc i32 @_ZN3jxl12_GLOBAL__N_117PredictAndShuffleEmmimPKhmPmPNS_11PaddedBytesE(i64 %1168, i64 %1167, i32 1, i64 %1176, i8* %0, i64 %1, i64* nonnull %11, %"class.jxl::PaddedBytes"* nonnull %15)
  %1239 = icmp eq i32 %1238, 0
  br i1 %1239, label %1240, label %1554

1240:                                             ; preds = %903, %1039, %858, %853, %848, %843, %837, %835, %833, %1028, %966, %970, %934, %936, %938, %940, %946, %951, %956, %961, %1237, %1175, %1189, %1149, %1153, %1047, %1045, %1049, %1031, %1051
  %1241 = phi i64 [ %1040, %1051 ], [ %1040, %1049 ], [ %1037, %1031 ], [ %1040, %1045 ], [ %1040, %1047 ], [ %1040, %1149 ], [ %1040, %1153 ], [ %1040, %1189 ], [ %1040, %1175 ], [ %1040, %1237 ], [ %827, %961 ], [ %827, %956 ], [ %827, %951 ], [ %827, %946 ], [ %827, %940 ], [ %827, %938 ], [ %827, %936 ], [ %827, %934 ], [ %827, %970 ], [ %827, %966 ], [ %827, %1028 ], [ %827, %833 ], [ %827, %835 ], [ %827, %837 ], [ %827, %843 ], [ %827, %848 ], [ %827, %853 ], [ %827, %858 ], [ %1040, %1039 ], [ %827, %903 ]
  %1242 = phi i64 [ %1041, %1051 ], [ %1041, %1049 ], [ %1036, %1031 ], [ %1041, %1045 ], [ %1041, %1047 ], [ %1041, %1149 ], [ %1041, %1153 ], [ %1041, %1189 ], [ %1041, %1175 ], [ %1041, %1237 ], [ %830, %961 ], [ %830, %956 ], [ %830, %951 ], [ %830, %946 ], [ %830, %940 ], [ %830, %938 ], [ %830, %936 ], [ %830, %934 ], [ %830, %970 ], [ %830, %966 ], [ %830, %1028 ], [ %830, %833 ], [ %830, %835 ], [ %830, %837 ], [ %830, %843 ], [ %830, %848 ], [ %830, %853 ], [ %830, %858 ], [ %1041, %1039 ], [ %830, %903 ]
  %1243 = phi i8 [ 109, %1051 ], [ 109, %1049 ], [ %1035, %1031 ], [ 109, %1045 ], [ 109, %1047 ], [ 109, %1149 ], [ 109, %1153 ], [ 109, %1189 ], [ 109, %1175 ], [ 109, %1237 ], [ 99, %961 ], [ 99, %956 ], [ 99, %951 ], [ 99, %946 ], [ 99, %940 ], [ 99, %938 ], [ 99, %936 ], [ 99, %934 ], [ 99, %970 ], [ 99, %966 ], [ 99, %1028 ], [ 109, %833 ], [ 109, %835 ], [ 109, %837 ], [ 109, %843 ], [ 109, %848 ], [ 109, %853 ], [ 109, %858 ], [ 109, %1039 ], [ 109, %903 ]
  %1244 = phi i8 [ 66, %1051 ], [ 66, %1049 ], [ %1034, %1031 ], [ 65, %1045 ], [ 65, %1047 ], [ %1054, %1149 ], [ %1054, %1153 ], [ %1054, %1189 ], [ %1054, %1175 ], [ %1054, %1237 ], [ 117, %961 ], [ 117, %956 ], [ 117, %951 ], [ 117, %946 ], [ 117, %940 ], [ 117, %938 ], [ 117, %936 ], [ %820, %934 ], [ 117, %970 ], [ 117, %966 ], [ 117, %1028 ], [ 108, %833 ], [ 108, %835 ], [ 108, %837 ], [ 108, %843 ], [ 108, %848 ], [ 108, %853 ], [ 108, %858 ], [ %1042, %1039 ], [ 108, %903 ]
  %1245 = phi i8 [ 65, %1051 ], [ %1043, %1049 ], [ %1033, %1031 ], [ %1043, %1045 ], [ 66, %1047 ], [ %1055, %1149 ], [ %1055, %1153 ], [ %1055, %1189 ], [ %1055, %1175 ], [ %1055, %1237 ], [ 114, %961 ], [ 114, %956 ], [ 114, %951 ], [ 114, %946 ], [ 114, %940 ], [ 114, %938 ], [ %822, %936 ], [ %822, %934 ], [ 114, %970 ], [ 114, %966 ], [ 114, %1028 ], [ %822, %833 ], [ 117, %835 ], [ 117, %837 ], [ 117, %843 ], [ 117, %848 ], [ 117, %853 ], [ 117, %858 ], [ %1043, %1039 ], [ 117, %903 ]
  %1246 = phi i8 [ %1044, %1051 ], [ %1044, %1049 ], [ %1032, %1031 ], [ %1044, %1045 ], [ %1044, %1047 ], [ 32, %1149 ], [ 32, %1153 ], [ 32, %1189 ], [ 32, %1175 ], [ 32, %1237 ], [ 118, %961 ], [ 118, %956 ], [ 118, %951 ], [ 118, %946 ], [ 118, %940 ], [ %824, %938 ], [ %824, %936 ], [ %824, %934 ], [ 118, %970 ], [ 118, %966 ], [ 118, %1028 ], [ %824, %833 ], [ %824, %835 ], [ 99, %837 ], [ 99, %843 ], [ 99, %848 ], [ 99, %853 ], [ 99, %858 ], [ %1044, %1039 ], [ 99, %903 ]
  %1247 = phi i32 [ %729, %1051 ], [ %729, %1049 ], [ %729, %1031 ], [ %729, %1045 ], [ %729, %1047 ], [ %1136, %1149 ], [ %1136, %1153 ], [ %1136, %1189 ], [ %1136, %1175 ], [ 0, %1237 ], [ %729, %961 ], [ %729, %956 ], [ %729, %951 ], [ %729, %946 ], [ %729, %940 ], [ %729, %938 ], [ %729, %936 ], [ %729, %934 ], [ %729, %970 ], [ %729, %966 ], [ 0, %1028 ], [ %729, %833 ], [ %729, %835 ], [ %729, %837 ], [ %729, %843 ], [ %729, %848 ], [ %729, %853 ], [ %729, %858 ], [ %729, %1039 ], [ %729, %903 ]
  %1248 = phi i64 [ %734, %1051 ], [ %734, %1049 ], [ %734, %1031 ], [ %734, %1045 ], [ %734, %1047 ], [ %1137, %1149 ], [ %1137, %1153 ], [ %1137, %1189 ], [ %1137, %1175 ], [ %1137, %1237 ], [ %734, %961 ], [ %734, %956 ], [ %734, %951 ], [ %734, %946 ], [ %734, %940 ], [ %734, %938 ], [ %734, %936 ], [ %734, %934 ], [ %734, %970 ], [ %734, %966 ], [ %734, %1028 ], [ %734, %833 ], [ %734, %835 ], [ %734, %837 ], [ %734, %843 ], [ %734, %848 ], [ %734, %853 ], [ %734, %858 ], [ %734, %1039 ], [ %734, %903 ]
  %1249 = phi i64 [ %727, %1051 ], [ %727, %1049 ], [ %727, %1031 ], [ %727, %1045 ], [ %727, %1047 ], [ %1151, %1149 ], [ %1150, %1153 ], [ %1150, %1189 ], [ %1150, %1175 ], [ %1150, %1237 ], [ %727, %961 ], [ %727, %956 ], [ %727, %951 ], [ %727, %946 ], [ %727, %940 ], [ %727, %938 ], [ %727, %936 ], [ %727, %934 ], [ %727, %970 ], [ %727, %966 ], [ %727, %1028 ], [ %727, %833 ], [ %727, %835 ], [ %727, %837 ], [ %727, %843 ], [ %727, %848 ], [ %727, %853 ], [ %727, %858 ], [ %727, %1039 ], [ %727, %903 ]
  %1250 = load i64, i64* %714, align 8
  %1251 = load i64, i64* %718, align 8
  %1252 = or i64 %1250, %1251
  %1253 = icmp eq i64 %1252, 0
  br i1 %1253, label %1254, label %1436

1254:                                             ; preds = %1240
  %1255 = icmp eq i8 %1243, 103
  %1256 = icmp eq i8 %1244, 98
  %1257 = and i1 %1255, %1256
  %1258 = icmp eq i8 %1245, 100
  %1259 = and i1 %1257, %1258
  %1260 = icmp eq i8 %1246, 32
  %1261 = and i1 %1259, %1260
  br i1 %1261, label %1262, label %1312

1262:                                             ; preds = %1254
  %1263 = load i64, i64* %11, align 8
  %1264 = add i64 %1241, 8
  %1265 = icmp eq i64 %1263, %1264
  br i1 %1265, label %1266, label %1312

1266:                                             ; preds = %1262
  %1267 = add i64 %1242, -8
  %1268 = add i64 %1267, %1263
  %1269 = icmp ule i64 %1268, %1
  %1270 = icmp ugt i64 %1263, 16
  %1271 = and i1 %1270, %1269
  %1272 = icmp ugt i64 %1242, 8
  %1273 = and i1 %1272, %1271
  br i1 %1273, label %1274, label %1312

1274:                                             ; preds = %1266
  %1275 = load i64, i64* %715, align 8
  %1276 = icmp eq i64 %1275, 0
  br i1 %1276, label %1279, label %1277

1277:                                             ; preds = %1274
  %1278 = load i8*, i8** %716, align 8
  br label %1284

1279:                                             ; preds = %1274
  call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* nonnull %14, i64 1) #9
  %1280 = load i8*, i8** %716, align 8
  %1281 = icmp eq i8* %1280, null
  br i1 %1281, label %1289, label %1282

1282:                                             ; preds = %1279
  %1283 = load i64, i64* %714, align 8
  br label %1284

1284:                                             ; preds = %1282, %1277
  %1285 = phi i8* [ %1280, %1282 ], [ %1278, %1277 ]
  %1286 = phi i64 [ %1283, %1282 ], [ 0, %1277 ]
  %1287 = add i64 %1286, 1
  store i64 %1287, i64* %714, align 8
  %1288 = getelementptr inbounds i8, i8* %1285, i64 %1286
  store i8 4, i8* %1288, align 1
  br label %1289

1289:                                             ; preds = %1279, %1284
  %1290 = load i64, i64* %714, align 8
  %1291 = load i64, i64* %715, align 8
  %1292 = icmp eq i64 %1290, %1291
  br i1 %1292, label %1295, label %1293

1293:                                             ; preds = %1289
  %1294 = load i8*, i8** %716, align 8
  br label %1301

1295:                                             ; preds = %1289
  %1296 = add i64 %1290, 1
  call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* nonnull %14, i64 %1296) #9
  %1297 = load i8*, i8** %716, align 8
  %1298 = icmp eq i8* %1297, null
  br i1 %1298, label %1306, label %1299

1299:                                             ; preds = %1295
  %1300 = load i64, i64* %714, align 8
  br label %1301

1301:                                             ; preds = %1299, %1293
  %1302 = phi i8* [ %1297, %1299 ], [ %1294, %1293 ]
  %1303 = phi i64 [ %1300, %1299 ], [ %1290, %1293 ]
  %1304 = add i64 %1303, 1
  store i64 %1304, i64* %714, align 8
  %1305 = getelementptr inbounds i8, i8* %1302, i64 %1303
  store i8 3, i8* %1305, align 1
  br label %1306

1306:                                             ; preds = %1295, %1301
  call fastcc void @_ZN3jxl12_GLOBAL__N_112EncodeVarIntEmPNS_11PaddedBytesE(i64 %1267, %"class.jxl::PaddedBytes"* nonnull %14)
  %1307 = call fastcc i32 @_ZN3jxl12_GLOBAL__N_117PredictAndShuffleEmmimPKhmPmPNS_11PaddedBytesE(i64 4, i64 4, i32 0, i64 %1267, i8* %0, i64 %1, i64* nonnull %11, %"class.jxl::PaddedBytes"* nonnull %15)
  %1308 = icmp eq i32 %1307, 0
  br i1 %1308, label %1309, label %1554

1309:                                             ; preds = %1306
  %1310 = load i64, i64* %714, align 8
  %1311 = load i64, i64* %718, align 8
  br label %1312

1312:                                             ; preds = %1309, %1254, %1266, %1262
  %1313 = phi i64 [ 0, %1262 ], [ 0, %1266 ], [ 0, %1254 ], [ %1311, %1309 ]
  %1314 = phi i64 [ 0, %1262 ], [ 0, %1266 ], [ 0, %1254 ], [ %1310, %1309 ]
  %1315 = phi i32 [ %1247, %1262 ], [ %1247, %1266 ], [ %1247, %1254 ], [ 0, %1309 ]
  %1316 = or i64 %1313, %1314
  %1317 = icmp eq i64 %1316, 0
  br i1 %1317, label %1318, label %1427

1318:                                             ; preds = %1312
  %1319 = load i64, i64* %11, align 8
  %1320 = add i64 %1319, 20
  %1321 = icmp ugt i64 %1320, %1
  br i1 %1321, label %1377, label %1322

1322:                                             ; preds = %1318
  %1323 = call i32 @_ZN3jxl13DecodeKeywordEPKhmm(i8* %0, i64 %1, i64 %1319) #9
  %1324 = icmp eq i32 %1323, 542792024
  br i1 %1324, label %1325, label %1377

1325:                                             ; preds = %1322
  %1326 = load i64, i64* %11, align 8
  %1327 = add i64 %1326, 4
  %1328 = call i32 @_ZN3jxl12DecodeUint32EPKhmm(i8* %0, i64 %1, i64 %1327) #9
  %1329 = icmp eq i32 %1328, 0
  br i1 %1329, label %1330, label %1377

1330:                                             ; preds = %1325
  %1331 = load i64, i64* %714, align 8
  %1332 = load i64, i64* %715, align 8
  %1333 = icmp eq i64 %1331, %1332
  br i1 %1333, label %1336, label %1334

1334:                                             ; preds = %1330
  %1335 = load i8*, i8** %716, align 8
  br label %1342

1336:                                             ; preds = %1330
  %1337 = add i64 %1331, 1
  call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* nonnull %14, i64 %1337) #9
  %1338 = load i8*, i8** %716, align 8
  %1339 = icmp eq i8* %1338, null
  br i1 %1339, label %1347, label %1340

1340:                                             ; preds = %1336
  %1341 = load i64, i64* %714, align 8
  br label %1342

1342:                                             ; preds = %1340, %1334
  %1343 = phi i8* [ %1338, %1340 ], [ %1335, %1334 ]
  %1344 = phi i64 [ %1341, %1340 ], [ %1331, %1334 ]
  %1345 = add i64 %1344, 1
  store i64 %1345, i64* %714, align 8
  %1346 = getelementptr inbounds i8, i8* %1343, i64 %1344
  store i8 10, i8* %1346, align 1
  br label %1347

1347:                                             ; preds = %1336, %1342
  %1348 = load i64, i64* %11, align 8
  %1349 = add i64 %1348, 8
  store i64 %1349, i64* %11, align 8
  br label %1350

1350:                                             ; preds = %1375, %1347
  %1351 = phi i64 [ %1349, %1347 ], [ %1376, %1375 ]
  %1352 = phi i64 [ 0, %1347 ], [ %1373, %1375 ]
  %1353 = add i64 %1351, 1
  store i64 %1353, i64* %11, align 8
  %1354 = getelementptr inbounds i8, i8* %0, i64 %1351
  %1355 = load i8, i8* %1354, align 1
  %1356 = load i64, i64* %718, align 8
  %1357 = load i64, i64* %719, align 8
  %1358 = icmp eq i64 %1356, %1357
  br i1 %1358, label %1361, label %1359

1359:                                             ; preds = %1350
  %1360 = load i8*, i8** %720, align 8
  br label %1367

1361:                                             ; preds = %1350
  %1362 = add i64 %1356, 1
  call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* nonnull %15, i64 %1362) #9
  %1363 = load i8*, i8** %720, align 8
  %1364 = icmp eq i8* %1363, null
  br i1 %1364, label %1372, label %1365

1365:                                             ; preds = %1361
  %1366 = load i64, i64* %718, align 8
  br label %1367

1367:                                             ; preds = %1365, %1359
  %1368 = phi i8* [ %1363, %1365 ], [ %1360, %1359 ]
  %1369 = phi i64 [ %1366, %1365 ], [ %1356, %1359 ]
  %1370 = add i64 %1369, 1
  store i64 %1370, i64* %718, align 8
  %1371 = getelementptr inbounds i8, i8* %1368, i64 %1369
  store i8 %1355, i8* %1371, align 1
  br label %1372

1372:                                             ; preds = %1361, %1367
  %1373 = add nuw nsw i64 %1352, 1
  %1374 = icmp eq i64 %1373, 12
  br i1 %1374, label %1377, label %1375

1375:                                             ; preds = %1372
  %1376 = load i64, i64* %11, align 8
  br label %1350

1377:                                             ; preds = %1372, %1322, %1325, %1318
  %1378 = load i64, i64* %714, align 8
  %1379 = load i64, i64* %718, align 8
  %1380 = or i64 %1378, %1379
  %1381 = icmp eq i64 %1380, 0
  br i1 %1381, label %1382, label %1436

1382:                                             ; preds = %1377
  %1383 = load i64, i64* %11, align 8
  %1384 = add i64 %1383, 8
  %1385 = icmp ugt i64 %1384, %1
  br i1 %1385, label %1427, label %1386

1386:                                             ; preds = %1382
  %1387 = add i64 %1383, 4
  %1388 = call i32 @_ZN3jxl12DecodeUint32EPKhmm(i8* %0, i64 %1, i64 %1387) #9
  %1389 = icmp eq i32 %1388, 0
  br i1 %1389, label %1390, label %1427

1390:                                             ; preds = %1386
  %1391 = load i64, i64* %11, align 8
  %1392 = call i32 @_ZN3jxl13DecodeKeywordEPKhmm(i8* %0, i64 %1, i64 %1391) #9
  %1393 = trunc i32 %1392 to i8
  %1394 = lshr i32 %1392, 8
  %1395 = trunc i32 %1394 to i8
  %1396 = lshr i32 %1392, 16
  %1397 = trunc i32 %1396 to i8
  %1398 = lshr i32 %1392, 24
  %1399 = trunc i32 %1398 to i8
  switch i8 %1393, label %1427 [
    i8 88, label %1400
    i8 100, label %1681
    i8 116, label %1687
    i8 109, label %1693
    i8 112, label %1699
    i8 99, label %1705
    i8 115, label %1711
    i8 103, label %1717
  ]

1400:                                             ; preds = %1390
  %1401 = icmp eq i8 %1395, 89
  %1402 = icmp eq i8 %1397, 90
  %1403 = and i1 %1401, %1402
  %1404 = icmp eq i8 %1399, 32
  %1405 = and i1 %1403, %1404
  br i1 %1405, label %1406, label %1427

1406:                                             ; preds = %1717, %1711, %1705, %1699, %1693, %1687, %1681, %1400
  %1407 = phi i8 [ 16, %1400 ], [ 17, %1681 ], [ 18, %1687 ], [ 19, %1693 ], [ 20, %1699 ], [ 21, %1705 ], [ 22, %1711 ], [ 23, %1717 ]
  %1408 = load i64, i64* %714, align 8
  %1409 = load i64, i64* %715, align 8
  %1410 = icmp eq i64 %1408, %1409
  br i1 %1410, label %1413, label %1411

1411:                                             ; preds = %1406
  %1412 = load i8*, i8** %716, align 8
  br label %1419

1413:                                             ; preds = %1406
  %1414 = add i64 %1408, 1
  call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* nonnull %14, i64 %1414) #9
  %1415 = load i8*, i8** %716, align 8
  %1416 = icmp eq i8* %1415, null
  br i1 %1416, label %1424, label %1417

1417:                                             ; preds = %1413
  %1418 = load i64, i64* %714, align 8
  br label %1419

1419:                                             ; preds = %1417, %1411
  %1420 = phi i8* [ %1415, %1417 ], [ %1412, %1411 ]
  %1421 = phi i64 [ %1418, %1417 ], [ %1408, %1411 ]
  %1422 = add i64 %1421, 1
  store i64 %1422, i64* %714, align 8
  %1423 = getelementptr inbounds i8, i8* %1420, i64 %1421
  store i8 %1407, i8* %1423, align 1
  br label %1424

1424:                                             ; preds = %1413, %1419
  %1425 = load i64, i64* %11, align 8
  %1426 = add i64 %1425, 8
  store i64 %1426, i64* %11, align 8
  br label %1427

1427:                                             ; preds = %1390, %1400, %1681, %1687, %1705, %1699, %1693, %1711, %1717, %1312, %1424, %1382, %1386
  %1428 = load i64, i64* %714, align 8
  %1429 = icmp eq i64 %1428, 0
  br i1 %1429, label %1430, label %1436

1430:                                             ; preds = %1427
  %1431 = load i64, i64* %718, align 8
  %1432 = icmp ne i64 %1431, 0
  %1433 = load i64, i64* %11, align 8
  %1434 = icmp eq i64 %1433, %1
  %1435 = or i1 %1432, %1434
  br i1 %1435, label %1436, label %1544

1436:                                             ; preds = %1240, %1377, %1430, %1427
  %1437 = phi i32 [ %1315, %1430 ], [ %1315, %1427 ], [ %1315, %1377 ], [ %1247, %1240 ]
  %1438 = icmp ugt i64 %1248, %728
  br i1 %1438, label %1439, label %1481

1439:                                             ; preds = %1436
  %1440 = load i64, i64* %17, align 8
  %1441 = load i64, i64* %18, align 8
  %1442 = icmp eq i64 %1440, %1441
  br i1 %1442, label %1445, label %1443

1443:                                             ; preds = %1439
  %1444 = load i8*, i8** %19, align 8
  br label %1451

1445:                                             ; preds = %1439
  %1446 = add i64 %1440, 1
  call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* nonnull %4, i64 %1446) #9
  %1447 = load i8*, i8** %19, align 8
  %1448 = icmp eq i8* %1447, null
  br i1 %1448, label %1456, label %1449

1449:                                             ; preds = %1445
  %1450 = load i64, i64* %17, align 8
  br label %1451

1451:                                             ; preds = %1449, %1443
  %1452 = phi i8* [ %1447, %1449 ], [ %1444, %1443 ]
  %1453 = phi i64 [ %1450, %1449 ], [ %1440, %1443 ]
  %1454 = add i64 %1453, 1
  store i64 %1454, i64* %17, align 8
  %1455 = getelementptr inbounds i8, i8* %1452, i64 %1453
  store i8 1, i8* %1455, align 1
  br label %1456

1456:                                             ; preds = %1451, %1445
  %1457 = sub i64 %1248, %728
  call fastcc void @_ZN3jxl12_GLOBAL__N_112EncodeVarIntEmPNS_11PaddedBytesE(i64 %1457, %"class.jxl::PaddedBytes"* nonnull %4)
  br label %1458

1458:                                             ; preds = %1479, %1456
  %1459 = phi i64 [ %1460, %1479 ], [ %728, %1456 ]
  %1460 = add i64 %1459, 1
  %1461 = getelementptr inbounds i8, i8* %0, i64 %1459
  %1462 = load i8, i8* %1461, align 1
  %1463 = load i64, i64* %21, align 8
  %1464 = load i64, i64* %22, align 8
  %1465 = icmp eq i64 %1463, %1464
  br i1 %1465, label %1468, label %1466

1466:                                             ; preds = %1458
  %1467 = load i8*, i8** %23, align 8
  br label %1474

1468:                                             ; preds = %1458
  %1469 = add i64 %1463, 1
  call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* nonnull %5, i64 %1469) #9
  %1470 = load i8*, i8** %23, align 8
  %1471 = icmp eq i8* %1470, null
  br i1 %1471, label %1479, label %1472

1472:                                             ; preds = %1468
  %1473 = load i64, i64* %21, align 8
  br label %1474

1474:                                             ; preds = %1472, %1466
  %1475 = phi i8* [ %1470, %1472 ], [ %1467, %1466 ]
  %1476 = phi i64 [ %1473, %1472 ], [ %1463, %1466 ]
  %1477 = add i64 %1476, 1
  store i64 %1477, i64* %21, align 8
  %1478 = getelementptr inbounds i8, i8* %1475, i64 %1476
  store i8 %1462, i8* %1478, align 1
  br label %1479

1479:                                             ; preds = %1468, %1474
  %1480 = icmp eq i64 %1460, %1248
  br i1 %1480, label %1481, label %1458

1481:                                             ; preds = %1479, %1436
  %1482 = load i64, i64* %714, align 8
  %1483 = icmp eq i64 %1482, 0
  br i1 %1483, label %1484, label %1488

1484:                                             ; preds = %1509, %1481
  %1485 = phi i64 [ 0, %1481 ], [ %1511, %1509 ]
  %1486 = load i64, i64* %718, align 8
  %1487 = icmp eq i64 %1486, 0
  br i1 %1487, label %1515, label %1519

1488:                                             ; preds = %1481, %1509
  %1489 = phi i64 [ %1510, %1509 ], [ 0, %1481 ]
  %1490 = load i8*, i8** %716, align 8
  %1491 = getelementptr inbounds i8, i8* %1490, i64 %1489
  %1492 = load i8, i8* %1491, align 1
  %1493 = load i64, i64* %17, align 8
  %1494 = load i64, i64* %18, align 8
  %1495 = icmp eq i64 %1493, %1494
  br i1 %1495, label %1498, label %1496

1496:                                             ; preds = %1488
  %1497 = load i8*, i8** %19, align 8
  br label %1504

1498:                                             ; preds = %1488
  %1499 = add i64 %1493, 1
  call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* nonnull %4, i64 %1499) #9
  %1500 = load i8*, i8** %19, align 8
  %1501 = icmp eq i8* %1500, null
  br i1 %1501, label %1509, label %1502

1502:                                             ; preds = %1498
  %1503 = load i64, i64* %17, align 8
  br label %1504

1504:                                             ; preds = %1502, %1496
  %1505 = phi i8* [ %1500, %1502 ], [ %1497, %1496 ]
  %1506 = phi i64 [ %1503, %1502 ], [ %1493, %1496 ]
  %1507 = add i64 %1506, 1
  store i64 %1507, i64* %17, align 8
  %1508 = getelementptr inbounds i8, i8* %1505, i64 %1506
  store i8 %1492, i8* %1508, align 1
  br label %1509

1509:                                             ; preds = %1498, %1504
  %1510 = add nuw i64 %1489, 1
  %1511 = load i64, i64* %714, align 8
  %1512 = icmp ult i64 %1510, %1511
  br i1 %1512, label %1488, label %1484

1513:                                             ; preds = %1540
  %1514 = load i64, i64* %714, align 8
  br label %1515

1515:                                             ; preds = %1513, %1484
  %1516 = phi i64 [ %1514, %1513 ], [ %1485, %1484 ]
  %1517 = phi i64 [ %1542, %1513 ], [ 0, %1484 ]
  %1518 = load i64, i64* %11, align 8
  br label %1544

1519:                                             ; preds = %1484, %1540
  %1520 = phi i64 [ %1541, %1540 ], [ 0, %1484 ]
  %1521 = load i8*, i8** %720, align 8
  %1522 = getelementptr inbounds i8, i8* %1521, i64 %1520
  %1523 = load i8, i8* %1522, align 1
  %1524 = load i64, i64* %21, align 8
  %1525 = load i64, i64* %22, align 8
  %1526 = icmp eq i64 %1524, %1525
  br i1 %1526, label %1529, label %1527

1527:                                             ; preds = %1519
  %1528 = load i8*, i8** %23, align 8
  br label %1535

1529:                                             ; preds = %1519
  %1530 = add i64 %1524, 1
  call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* nonnull %5, i64 %1530) #9
  %1531 = load i8*, i8** %23, align 8
  %1532 = icmp eq i8* %1531, null
  br i1 %1532, label %1540, label %1533

1533:                                             ; preds = %1529
  %1534 = load i64, i64* %21, align 8
  br label %1535

1535:                                             ; preds = %1533, %1527
  %1536 = phi i8* [ %1531, %1533 ], [ %1528, %1527 ]
  %1537 = phi i64 [ %1534, %1533 ], [ %1524, %1527 ]
  %1538 = add i64 %1537, 1
  store i64 %1538, i64* %21, align 8
  %1539 = getelementptr inbounds i8, i8* %1536, i64 %1537
  store i8 %1523, i8* %1539, align 1
  br label %1540

1540:                                             ; preds = %1529, %1535
  %1541 = add nuw i64 %1520, 1
  %1542 = load i64, i64* %718, align 8
  %1543 = icmp ult i64 %1541, %1542
  br i1 %1543, label %1519, label %1513

1544:                                             ; preds = %1430, %1515
  %1545 = phi i64 [ %1518, %1515 ], [ %1433, %1430 ]
  %1546 = phi i64 [ %1517, %1515 ], [ 0, %1430 ]
  %1547 = phi i64 [ %1516, %1515 ], [ 0, %1430 ]
  %1548 = phi i32 [ %1437, %1515 ], [ %1315, %1430 ]
  %1549 = phi i64 [ %1518, %1515 ], [ %728, %1430 ]
  %1550 = or i64 %1546, %1547
  %1551 = icmp eq i64 %1550, 0
  br i1 %1551, label %1552, label %1554

1552:                                             ; preds = %1544
  %1553 = add i64 %1545, 1
  store i64 %1553, i64* %11, align 8
  br label %1554

1554:                                             ; preds = %1306, %1132, %1237, %1028, %1544, %1552
  %1555 = phi i8 [ %1246, %1552 ], [ %1246, %1544 ], [ 118, %1028 ], [ 32, %1237 ], [ 32, %1132 ], [ 32, %1306 ]
  %1556 = phi i8 [ %1245, %1552 ], [ %1245, %1544 ], [ 114, %1028 ], [ %1055, %1237 ], [ %1055, %1132 ], [ 100, %1306 ]
  %1557 = phi i8 [ %1244, %1552 ], [ %1244, %1544 ], [ 117, %1028 ], [ %1054, %1237 ], [ %1054, %1132 ], [ 98, %1306 ]
  %1558 = phi i8 [ %1243, %1552 ], [ %1243, %1544 ], [ 99, %1028 ], [ 109, %1237 ], [ 109, %1132 ], [ 103, %1306 ]
  %1559 = phi i32 [ %1548, %1552 ], [ %1548, %1544 ], [ %1029, %1028 ], [ %1238, %1237 ], [ %1133, %1132 ], [ %1307, %1306 ]
  %1560 = phi i64 [ %1549, %1552 ], [ %1549, %1544 ], [ %728, %1028 ], [ %728, %1237 ], [ %728, %1132 ], [ %728, %1306 ]
  %1561 = phi i64 [ %1249, %1552 ], [ %1249, %1544 ], [ %727, %1028 ], [ %1150, %1237 ], [ %727, %1132 ], [ %1249, %1306 ]
  %1562 = phi i64 [ %1242, %1552 ], [ %1242, %1544 ], [ %830, %1028 ], [ %1041, %1237 ], [ %1041, %1132 ], [ %1242, %1306 ]
  %1563 = phi i64 [ %1241, %1552 ], [ %1241, %1544 ], [ %827, %1028 ], [ %1040, %1237 ], [ %1040, %1132 ], [ %1241, %1306 ]
  %1564 = phi i32 [ 0, %1552 ], [ 0, %1544 ], [ 1, %1028 ], [ 1, %1237 ], [ 1, %1132 ], [ 1, %1306 ]
  %1565 = load i8*, i8** %720, align 8
  store i8* null, i8** %720, align 8
  %1566 = icmp eq i8* %1565, null
  br i1 %1566, label %1568, label %1567

1567:                                             ; preds = %1554
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %1565) #9
  br label %1568

1568:                                             ; preds = %1554, %1567
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %717) #9
  %1569 = load i8*, i8** %716, align 8
  store i8* null, i8** %716, align 8
  %1570 = icmp eq i8* %1569, null
  br i1 %1570, label %1572, label %1571

1571:                                             ; preds = %1568
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %1569) #9
  br label %1572

1572:                                             ; preds = %1568, %1571
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %713) #9
  %1573 = icmp eq i32 %1564, 0
  br i1 %1573, label %1574, label %1642

1574:                                             ; preds = %1572
  %1575 = load i64, i64* %11, align 8
  %1576 = icmp ugt i64 %1575, %1
  br i1 %1576, label %1577, label %724

1577:                                             ; preds = %1574, %711
  %1578 = load i64, i64* %17, align 8
  call fastcc void @_ZN3jxl12_GLOBAL__N_112EncodeVarIntEmPNS_11PaddedBytesE(i64 %1578, %"class.jxl::PaddedBytes"* %2)
  %1579 = load i64, i64* %17, align 8
  %1580 = icmp eq i64 %1579, 0
  br i1 %1580, label %1585, label %1581

1581:                                             ; preds = %1577
  %1582 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %2, i64 0, i32 0
  %1583 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %2, i64 0, i32 1
  %1584 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %2, i64 0, i32 2, i32 0, i32 0, i32 0
  br label %1592

1585:                                             ; preds = %1613, %1577
  %1586 = load i64, i64* %21, align 8
  %1587 = icmp eq i64 %1586, 0
  br i1 %1587, label %1642, label %1588

1588:                                             ; preds = %1585
  %1589 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %2, i64 0, i32 0
  %1590 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %2, i64 0, i32 1
  %1591 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %2, i64 0, i32 2, i32 0, i32 0, i32 0
  br label %1617

1592:                                             ; preds = %1581, %1613
  %1593 = phi i64 [ 0, %1581 ], [ %1614, %1613 ]
  %1594 = load i8*, i8** %19, align 8
  %1595 = getelementptr inbounds i8, i8* %1594, i64 %1593
  %1596 = load i8, i8* %1595, align 1
  %1597 = load i64, i64* %1582, align 8
  %1598 = load i64, i64* %1583, align 8
  %1599 = icmp eq i64 %1597, %1598
  br i1 %1599, label %1602, label %1600

1600:                                             ; preds = %1592
  %1601 = load i8*, i8** %1584, align 8
  br label %1608

1602:                                             ; preds = %1592
  %1603 = add i64 %1597, 1
  call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* %2, i64 %1603) #9
  %1604 = load i8*, i8** %1584, align 8
  %1605 = icmp eq i8* %1604, null
  br i1 %1605, label %1613, label %1606

1606:                                             ; preds = %1602
  %1607 = load i64, i64* %1582, align 8
  br label %1608

1608:                                             ; preds = %1606, %1600
  %1609 = phi i8* [ %1604, %1606 ], [ %1601, %1600 ]
  %1610 = phi i64 [ %1607, %1606 ], [ %1597, %1600 ]
  %1611 = add i64 %1610, 1
  store i64 %1611, i64* %1582, align 8
  %1612 = getelementptr inbounds i8, i8* %1609, i64 %1610
  store i8 %1596, i8* %1612, align 1
  br label %1613

1613:                                             ; preds = %1602, %1608
  %1614 = add nuw i64 %1593, 1
  %1615 = load i64, i64* %17, align 8
  %1616 = icmp ult i64 %1614, %1615
  br i1 %1616, label %1592, label %1585

1617:                                             ; preds = %1588, %1638
  %1618 = phi i64 [ 0, %1588 ], [ %1639, %1638 ]
  %1619 = load i8*, i8** %23, align 8
  %1620 = getelementptr inbounds i8, i8* %1619, i64 %1618
  %1621 = load i8, i8* %1620, align 1
  %1622 = load i64, i64* %1589, align 8
  %1623 = load i64, i64* %1590, align 8
  %1624 = icmp eq i64 %1622, %1623
  br i1 %1624, label %1627, label %1625

1625:                                             ; preds = %1617
  %1626 = load i8*, i8** %1591, align 8
  br label %1633

1627:                                             ; preds = %1617
  %1628 = add i64 %1622, 1
  call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* %2, i64 %1628) #9
  %1629 = load i8*, i8** %1591, align 8
  %1630 = icmp eq i8* %1629, null
  br i1 %1630, label %1638, label %1631

1631:                                             ; preds = %1627
  %1632 = load i64, i64* %1589, align 8
  br label %1633

1633:                                             ; preds = %1631, %1625
  %1634 = phi i8* [ %1629, %1631 ], [ %1626, %1625 ]
  %1635 = phi i64 [ %1632, %1631 ], [ %1622, %1625 ]
  %1636 = add i64 %1635, 1
  store i64 %1636, i64* %1589, align 8
  %1637 = getelementptr inbounds i8, i8* %1634, i64 %1635
  store i8 %1621, i8* %1637, align 1
  br label %1638

1638:                                             ; preds = %1627, %1633
  %1639 = add nuw i64 %1618, 1
  %1640 = load i64, i64* %21, align 8
  %1641 = icmp ult i64 %1639, %1640
  br i1 %1641, label %1617, label %1642

1642:                                             ; preds = %1572, %1638, %1585
  %1643 = phi i32 [ 0, %1585 ], [ 0, %1638 ], [ %1559, %1572 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %119) #9
  %1644 = getelementptr inbounds %"class.std::__1::map", %"class.std::__1::map"* %10, i64 0, i32 0
  %1645 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %721, align 8
  call void @_ZNSt3__16__treeINS_12__value_typeImmEENS_19__map_value_compareImS2_NS_4lessImEELb1EEENS_9allocatorIS2_EEE7destroyEPNS_11__tree_nodeIS2_PvEE(%"class.std::__1::__tree"* nonnull %1644, %"class.std::__1::__tree_node"* %1645) #9
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %113) #9
  %1646 = load i64*, i64** %110, align 8
  %1647 = icmp eq i64* %1646, null
  br i1 %1647, label %1652, label %1648

1648:                                             ; preds = %1642
  %1649 = ptrtoint i64* %1646 to i64
  %1650 = bitcast i64** %111 to i64*
  store i64 %1649, i64* %1650, align 8
  %1651 = bitcast i64* %1646 to i8*
  call void @_ZdlPv(i8* %1651) #11
  br label %1652

1652:                                             ; preds = %1642, %1648
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %109) #9
  %1653 = load i64*, i64** %106, align 8
  %1654 = icmp eq i64* %1653, null
  br i1 %1654, label %1659, label %1655

1655:                                             ; preds = %1652
  %1656 = ptrtoint i64* %1653 to i64
  %1657 = bitcast i64** %107 to i64*
  store i64 %1656, i64* %1657, align 8
  %1658 = bitcast i64* %1653 to i8*
  call void @_ZdlPv(i8* %1658) #11
  br label %1659

1659:                                             ; preds = %1652, %1655
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %105) #9
  %1660 = load %"struct.std::__1::array"*, %"struct.std::__1::array"** %102, align 8
  %1661 = icmp eq %"struct.std::__1::array"* %1660, null
  br i1 %1661, label %1666, label %1662

1662:                                             ; preds = %1659
  %1663 = ptrtoint %"struct.std::__1::array"* %1660 to i64
  %1664 = bitcast %"struct.std::__1::array"** %103 to i64*
  store i64 %1663, i64* %1664, align 8
  %1665 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %1660, i64 0, i32 0, i64 0
  call void @_ZdlPv(i8* %1665) #11
  br label %1666

1666:                                             ; preds = %1659, %1662
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %101) #9
  br label %1667

1667:                                             ; preds = %96, %68, %1666
  %1668 = phi i32 [ %1643, %1666 ], [ 0, %68 ], [ 0, %96 ]
  %1669 = load i8*, i8** %26, align 8
  store i8* null, i8** %26, align 8
  %1670 = icmp eq i8* %1669, null
  br i1 %1670, label %1672, label %1671

1671:                                             ; preds = %1667
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %1669) #9
  br label %1672

1672:                                             ; preds = %1667, %1671
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %24) #9
  %1673 = load i8*, i8** %23, align 8
  store i8* null, i8** %23, align 8
  %1674 = icmp eq i8* %1673, null
  br i1 %1674, label %1676, label %1675

1675:                                             ; preds = %1672
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %1673) #9
  br label %1676

1676:                                             ; preds = %1672, %1675
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %20) #9
  %1677 = load i8*, i8** %19, align 8
  store i8* null, i8** %19, align 8
  %1678 = icmp eq i8* %1677, null
  br i1 %1678, label %1680, label %1679

1679:                                             ; preds = %1676
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %1677) #9
  br label %1680

1680:                                             ; preds = %1676, %1679
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %16) #9
  ret i32 %1668

1681:                                             ; preds = %1390
  %1682 = icmp eq i8 %1395, 101
  %1683 = icmp eq i8 %1397, 115
  %1684 = and i1 %1682, %1683
  %1685 = icmp eq i8 %1399, 99
  %1686 = and i1 %1684, %1685
  br i1 %1686, label %1406, label %1427

1687:                                             ; preds = %1390
  %1688 = icmp eq i8 %1395, 101
  %1689 = icmp eq i8 %1397, 120
  %1690 = and i1 %1688, %1689
  %1691 = icmp eq i8 %1399, 116
  %1692 = and i1 %1690, %1691
  br i1 %1692, label %1406, label %1427

1693:                                             ; preds = %1390
  %1694 = icmp eq i8 %1395, 108
  %1695 = icmp eq i8 %1397, 117
  %1696 = and i1 %1694, %1695
  %1697 = icmp eq i8 %1399, 99
  %1698 = and i1 %1696, %1697
  br i1 %1698, label %1406, label %1427

1699:                                             ; preds = %1390
  %1700 = icmp eq i8 %1395, 97
  %1701 = icmp eq i8 %1397, 114
  %1702 = and i1 %1700, %1701
  %1703 = icmp eq i8 %1399, 97
  %1704 = and i1 %1702, %1703
  br i1 %1704, label %1406, label %1427

1705:                                             ; preds = %1390
  %1706 = icmp eq i8 %1395, 117
  %1707 = icmp eq i8 %1397, 114
  %1708 = and i1 %1706, %1707
  %1709 = icmp eq i8 %1399, 118
  %1710 = and i1 %1708, %1709
  br i1 %1710, label %1406, label %1427

1711:                                             ; preds = %1390
  %1712 = icmp eq i8 %1395, 102
  %1713 = icmp eq i8 %1397, 51
  %1714 = and i1 %1712, %1713
  %1715 = icmp eq i8 %1399, 50
  %1716 = and i1 %1714, %1715
  br i1 %1716, label %1406, label %1427

1717:                                             ; preds = %1390
  %1718 = icmp eq i8 %1395, 98
  %1719 = icmp eq i8 %1397, 100
  %1720 = and i1 %1718, %1719
  %1721 = icmp eq i8 %1399, 32
  %1722 = and i1 %1720, %1721
  br i1 %1722, label %1406, label %1427
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN3jxl12_GLOBAL__N_112EncodeVarIntEmPNS_11PaddedBytesE(i64, %"class.jxl::PaddedBytes"*) unnamed_addr #0 {
  %3 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %1, i64 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = add i64 %4, 9
  %6 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %1, i64 0, i32 1
  %7 = load i64, i64* %6, align 8
  %8 = icmp ult i64 %7, %5
  br i1 %8, label %9, label %10

9:                                                ; preds = %2
  tail call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* %1, i64 %5) #9
  br label %10

10:                                               ; preds = %2, %9
  %11 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %1, i64 0, i32 2, i32 0, i32 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = icmp eq i8* %12, null
  %14 = select i1 %13, i64 0, i64 %5
  store i64 %14, i64* %3, align 8
  %15 = icmp ugt i64 %0, 127
  %16 = icmp ugt i64 %4, %14
  br i1 %15, label %17, label %29

17:                                               ; preds = %10, %21
  %18 = phi i1 [ %28, %21 ], [ %16, %10 ]
  %19 = phi i64 [ %24, %21 ], [ %4, %10 ]
  %20 = phi i64 [ %26, %21 ], [ %0, %10 ]
  br i1 %18, label %33, label %21

21:                                               ; preds = %17
  %22 = trunc i64 %20 to i8
  %23 = or i8 %22, -128
  %24 = add i64 %19, 1
  %25 = getelementptr inbounds i8, i8* %12, i64 %19
  store i8 %23, i8* %25, align 1
  %26 = lshr i64 %20, 7
  %27 = icmp ugt i64 %20, 16383
  %28 = icmp ugt i64 %24, %14
  br i1 %27, label %17, label %29

29:                                               ; preds = %21, %10
  %30 = phi i64 [ %0, %10 ], [ %26, %21 ]
  %31 = phi i64 [ %4, %10 ], [ %24, %21 ]
  %32 = phi i1 [ %16, %10 ], [ %28, %21 ]
  br i1 %32, label %33, label %36

33:                                               ; preds = %17, %29
  %34 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.6, i64 0, i64 0), i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.1, i64 0, i64 0), i32 53, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.7, i64 0, i64 0)) #9
  %35 = tail call zeroext i1 @_ZN3jxl5AbortEv() #10
  unreachable

36:                                               ; preds = %29
  %37 = trunc i64 %30 to i8
  %38 = and i8 %37, 127
  %39 = add i64 %31, 1
  %40 = getelementptr inbounds i8, i8* %12, i64 %31
  store i8 %38, i8* %40, align 1
  %41 = load i64, i64* %6, align 8
  %42 = icmp ult i64 %41, %39
  br i1 %42, label %43, label %44

43:                                               ; preds = %36
  tail call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* %1, i64 %39) #9
  br label %44

44:                                               ; preds = %36, %43
  %45 = load i8*, i8** %11, align 8
  %46 = icmp eq i8* %45, null
  %47 = select i1 %46, i64 0, i64 %39
  store i64 %47, i64* %3, align 8
  ret void
}

declare void @_ZN3jxl26ICCInitialHeaderPredictionEv(%"class.jxl::PaddedBytes"* sret) local_unnamed_addr #2

declare void @_ZN3jxl12EncodeUint32EmjPNS_11PaddedBytesE(i64, i32, %"class.jxl::PaddedBytes"*) local_unnamed_addr #2

declare void @_ZN3jxl16ICCPredictHeaderEPKhmPhm(i8*, i64, i8*, i64) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(1) i8* @_ZN3jxl11PaddedBytesixEm(%"class.jxl::PaddedBytes"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %0, i64 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = icmp ult i64 %4, %1
  br i1 %5, label %6, label %9

6:                                                ; preds = %2
  %7 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.9, i64 0, i64 0), i32 180, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.10, i64 0, i64 0)) #9
  %8 = tail call zeroext i1 @_ZN3jxl5AbortEv() #10
  unreachable

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr inbounds i8, i8* %11, i64 %1
  ret i8* %12
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare i32 @_ZN3jxl12DecodeUint32EPKhmm(i8*, i64, i64) local_unnamed_addr #2

declare i32 @_ZN3jxl13DecodeKeywordEPKhmm(i8*, i64, i64) local_unnamed_addr #2

declare void @_ZN3jxl13AppendKeywordERKNSt3__15arrayIhLm4EEEPNS_11PaddedBytesE(%"struct.std::__1::array"* dereferenceable(4), %"class.jxl::PaddedBytes"*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN3jxl12_GLOBAL__N_19UnshuffleEPhmm(i8* nocapture, i64, i64) unnamed_addr #0 {
  %4 = alloca %"class.jxl::PaddedBytes", align 8
  %5 = add i64 %1, -1
  %6 = add i64 %5, %2
  %7 = udiv i64 %6, %2
  %8 = bitcast %"class.jxl::PaddedBytes"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %8) #9
  %9 = bitcast %"class.jxl::PaddedBytes"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %9, i8 -86, i64 24, i1 false)
  call void @_ZN3jxl11PaddedBytesC2Em(%"class.jxl::PaddedBytes"* nonnull %4, i64 %1)
  %10 = icmp eq i64 %1, 0
  br i1 %10, label %26, label %12

11:                                               ; preds = %12
  br i1 %10, label %26, label %27

12:                                               ; preds = %3, %12
  %13 = phi i64 [ %24, %12 ], [ 0, %3 ]
  %14 = phi i64 [ %23, %12 ], [ 0, %3 ]
  %15 = phi i64 [ %22, %12 ], [ 0, %3 ]
  %16 = getelementptr inbounds i8, i8* %0, i64 %13
  %17 = load i8, i8* %16, align 1
  %18 = call dereferenceable(1) i8* @_ZN3jxl11PaddedBytesixEm(%"class.jxl::PaddedBytes"* nonnull %4, i64 %14)
  store i8 %17, i8* %18, align 1
  %19 = add i64 %14, %7
  %20 = icmp ult i64 %19, %1
  %21 = add i64 %15, 1
  %22 = select i1 %20, i64 %15, i64 %21
  %23 = select i1 %20, i64 %19, i64 %21
  %24 = add nuw i64 %13, 1
  %25 = icmp eq i64 %24, %1
  br i1 %25, label %11, label %12

26:                                               ; preds = %27, %3, %11
  call void @_ZN3jxl11PaddedBytesD2Ev(%"class.jxl::PaddedBytes"* nonnull %4) #9
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %8) #9
  ret void

27:                                               ; preds = %11, %27
  %28 = phi i64 [ %32, %27 ], [ 0, %11 ]
  %29 = call dereferenceable(1) i8* @_ZN3jxl11PaddedBytesixEm(%"class.jxl::PaddedBytes"* nonnull %4, i64 %28)
  %30 = load i8, i8* %29, align 1
  %31 = getelementptr inbounds i8, i8* %0, i64 %28
  store i8 %30, i8* %31, align 1
  %32 = add nuw i64 %28, 1
  %33 = icmp eq i64 %32, %1
  br i1 %33, label %26, label %27
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @_ZN3jxl12_GLOBAL__N_117PredictAndShuffleEmmimPKhmPmPNS_11PaddedBytesE(i64, i64, i32, i64, i8*, i64, i64* nocapture, %"class.jxl::PaddedBytes"*) unnamed_addr #0 {
  %9 = load i64, i64* %6, align 8
  %10 = tail call i32 @_ZN3jxl16CheckOutOfBoundsEmmm(i64 %9, i64 %3, i64 %5) #9
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %12, label %66

12:                                               ; preds = %8
  %13 = load i64, i64* %6, align 8
  %14 = icmp eq i64 %13, 0
  br i1 %14, label %66, label %15

15:                                               ; preds = %12
  %16 = add i64 %13, -1
  %17 = lshr i64 %16, 2
  %18 = icmp ult i64 %17, %0
  %19 = shl i64 %0, 2
  %20 = icmp ult i64 %13, %19
  %21 = or i1 %20, %18
  br i1 %21, label %66, label %22

22:                                               ; preds = %15
  %23 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %7, i64 0, i32 0
  %24 = load i64, i64* %23, align 8
  %25 = icmp eq i64 %3, 0
  br i1 %25, label %29, label %26

26:                                               ; preds = %22
  %27 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %7, i64 0, i32 1
  %28 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %7, i64 0, i32 2, i32 0, i32 0, i32 0
  br label %33

29:                                               ; preds = %58, %22
  %30 = phi i64 [ %13, %22 ], [ %60, %58 ]
  %31 = add i64 %30, %3
  store i64 %31, i64* %6, align 8
  %32 = icmp ugt i64 %1, 1
  br i1 %32, label %62, label %66

33:                                               ; preds = %58, %26
  %34 = phi i64 [ %13, %26 ], [ %60, %58 ]
  %35 = phi i64 [ 0, %26 ], [ %59, %58 ]
  %36 = tail call zeroext i8 @_ZN3jxl21LinearPredictICCValueEPKhmmmmi(i8* %4, i64 %34, i64 %35, i64 %0, i64 %1, i32 %2) #9
  %37 = load i64, i64* %6, align 8
  %38 = add i64 %37, %35
  %39 = getelementptr inbounds i8, i8* %4, i64 %38
  %40 = load i8, i8* %39, align 1
  %41 = sub i8 %40, %36
  %42 = load i64, i64* %23, align 8
  %43 = load i64, i64* %27, align 8
  %44 = icmp eq i64 %42, %43
  br i1 %44, label %47, label %45

45:                                               ; preds = %33
  %46 = load i8*, i8** %28, align 8
  br label %53

47:                                               ; preds = %33
  %48 = add i64 %42, 1
  tail call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* %7, i64 %48) #9
  %49 = load i8*, i8** %28, align 8
  %50 = icmp eq i8* %49, null
  br i1 %50, label %58, label %51

51:                                               ; preds = %47
  %52 = load i64, i64* %23, align 8
  br label %53

53:                                               ; preds = %51, %45
  %54 = phi i8* [ %49, %51 ], [ %46, %45 ]
  %55 = phi i64 [ %52, %51 ], [ %42, %45 ]
  %56 = add i64 %55, 1
  store i64 %56, i64* %23, align 8
  %57 = getelementptr inbounds i8, i8* %54, i64 %55
  store i8 %41, i8* %57, align 1
  br label %58

58:                                               ; preds = %47, %53
  %59 = add nuw i64 %35, 1
  %60 = load i64, i64* %6, align 8
  %61 = icmp eq i64 %59, %3
  br i1 %61, label %29, label %33

62:                                               ; preds = %29
  %63 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %7, i64 0, i32 2, i32 0, i32 0, i32 0
  %64 = load i8*, i8** %63, align 8
  %65 = getelementptr inbounds i8, i8* %64, i64 %24
  tail call fastcc void @_ZN3jxl12_GLOBAL__N_19UnshuffleEPhmm(i8* %65, i64 %3, i64 %1)
  br label %66

66:                                               ; preds = %29, %62, %15, %12, %8
  %67 = phi i32 [ %10, %8 ], [ 1, %12 ], [ 1, %15 ], [ 0, %62 ], [ 0, %29 ]
  ret i32 %67
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl11PaddedBytesD2Ev(%"class.jxl::PaddedBytes"*) unnamed_addr #3 comdat align 2 {
  %2 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %3 = load i8*, i8** %2, align 8
  store i8* null, i8** %2, align 8
  %4 = icmp eq i8* %3, null
  br i1 %4, label %6, label %5

5:                                                ; preds = %1
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %3) #9
  br label %6

6:                                                ; preds = %1, %5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3jxl8WriteICCERKNS_11PaddedBytesEPNS_9BitWriterEmPNS_6AuxOutE(%"class.jxl::PaddedBytes"* nocapture readonly dereferenceable(24), %"struct.jxl::BitWriter"* noalias, i64, %"struct.jxl::AuxOut"* noalias) local_unnamed_addr #0 {
  %5 = alloca %"class.jxl::PaddedBytes", align 8
  %6 = alloca %"class.std::__1::vector.138", align 8
  %7 = alloca %"class.jxl::BitWriter::Allotment", align 8
  %8 = alloca %"struct.jxl::HistogramParams", align 8
  %9 = alloca %"struct.jxl::EntropyEncodingData", align 8
  %10 = alloca %"class.std::__1::vector.52", align 8
  %11 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %0, i64 0, i32 0
  %12 = load i64, i64* %11, align 8
  %13 = icmp eq i64 %12, 0
  br i1 %13, label %282, label %14

14:                                               ; preds = %4
  %15 = bitcast %"class.jxl::PaddedBytes"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %15) #9
  %16 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %5, i64 0, i32 0
  %17 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %5, i64 0, i32 2, i32 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %15, i8 0, i64 24, i1 false) #9
  %18 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %19 = load i8*, i8** %18, align 8
  %20 = call i32 @_ZN3jxl10PredictICCEPKhmPNS_11PaddedBytesE(i8* %19, i64 %12, %"class.jxl::PaddedBytes"* nonnull %5)
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %276

22:                                               ; preds = %14
  %23 = bitcast %"class.std::__1::vector.138"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %23) #9
  %24 = getelementptr inbounds %"class.std::__1::vector.138", %"class.std::__1::vector.138"* %6, i64 0, i32 0, i32 0
  %25 = getelementptr inbounds %"class.std::__1::vector.138", %"class.std::__1::vector.138"* %6, i64 0, i32 0, i32 1
  %26 = getelementptr inbounds %"class.std::__1::vector.138", %"class.std::__1::vector.138"* %6, i64 0, i32 0, i32 2, i32 0, i32 0
  %27 = call i8* @_Znwm(i64 24) #11
  %28 = bitcast %"class.std::__1::vector.138"* %6 to i8**
  store i8* %27, i8** %28, align 8
  %29 = getelementptr inbounds i8, i8* %27, i64 24
  %30 = bitcast %"class.std::__1::vector.140"** %26 to i8**
  store i8* %29, i8** %30, align 8
  %31 = bitcast %"class.std::__1::vector.140"** %25 to i64*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %27, i8 0, i64 24, i1 false) #9
  %32 = ptrtoint i8* %29 to i64
  store i64 %32, i64* %31, align 8
  %33 = bitcast %"class.jxl::BitWriter::Allotment"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %33) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %33, i8 -86, i64 40, i1 false)
  call void @_ZN3jxl9BitWriter9AllotmentC1EPS0_m(%"class.jxl::BitWriter::Allotment"* nonnull %7, %"struct.jxl::BitWriter"* %1, i64 128) #9
  %34 = load i64, i64* %16, align 8
  %35 = call i32 @_ZN3jxl8U64Coder5WriteEmPNS_9BitWriterE(i64 %34, %"struct.jxl::BitWriter"* %1) #9
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %37, label %250

37:                                               ; preds = %22
  call void @_ZN3jxl16ReclaimAndChargeEPNS_9BitWriterEPNS0_9AllotmentEmPNS_6AuxOutE(%"struct.jxl::BitWriter"* %1, %"class.jxl::BitWriter::Allotment"* nonnull %7, i64 %2, %"struct.jxl::AuxOut"* %3) #9
  %38 = load i64, i64* %16, align 8
  %39 = icmp eq i64 %38, 0
  br i1 %39, label %40, label %129

40:                                               ; preds = %246, %37
  %41 = bitcast %"struct.jxl::HistogramParams"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %41) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %41, i8 -86, i64 56, i1 false)
  %42 = getelementptr inbounds %"struct.jxl::HistogramParams", %"struct.jxl::HistogramParams"* %8, i64 0, i32 0
  store i32 2, i32* %42, align 8
  %43 = getelementptr inbounds %"struct.jxl::HistogramParams", %"struct.jxl::HistogramParams"* %8, i64 0, i32 1
  store i32 3, i32* %43, align 4
  %44 = getelementptr inbounds %"struct.jxl::HistogramParams", %"struct.jxl::HistogramParams"* %8, i64 0, i32 2
  %45 = getelementptr inbounds %"struct.jxl::HistogramParams", %"struct.jxl::HistogramParams"* %8, i64 0, i32 3
  store i32 2, i32* %45, align 4
  %46 = getelementptr inbounds %"struct.jxl::HistogramParams", %"struct.jxl::HistogramParams"* %8, i64 0, i32 4
  %47 = bitcast %"class.std::__1::vector.4"* %46 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %47, i8 0, i64 24, i1 false) #9
  %48 = getelementptr inbounds %"struct.jxl::HistogramParams", %"struct.jxl::HistogramParams"* %8, i64 0, i32 5
  store i64 -1, i64* %48, align 8
  %49 = getelementptr inbounds %"struct.jxl::HistogramParams", %"struct.jxl::HistogramParams"* %8, i64 0, i32 6
  store i8 0, i8* %49, align 8
  store i32 3, i32* %44, align 8
  %50 = bitcast %"struct.jxl::EntropyEncodingData"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 104, i8* nonnull %50) #9
  %51 = getelementptr inbounds %"struct.jxl::EntropyEncodingData", %"struct.jxl::EntropyEncodingData"* %9, i64 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %51, i8 -86, i64 80, i1 false)
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %50, i8 0, i64 24, i1 false) #9
  %52 = getelementptr inbounds %"struct.jxl::EntropyEncodingData", %"struct.jxl::EntropyEncodingData"* %9, i64 0, i32 2
  %53 = bitcast %"class.std::__1::vector.160"* %52 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %53, i8 0, i64 24, i1 false) #9
  %54 = getelementptr inbounds %"struct.jxl::EntropyEncodingData", %"struct.jxl::EntropyEncodingData"* %9, i64 0, i32 3
  call void @_ZN3jxl10LZ77ParamsC1Ev(%"struct.jxl::LZ77Params"* %54) #9
  %55 = bitcast %"class.std::__1::vector.52"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %55) #9
  %56 = getelementptr inbounds %"class.std::__1::vector.52", %"class.std::__1::vector.52"* %10, i64 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %55, i8 0, i64 24, i1 false) #9
  store i8 1, i8* %49, align 8
  %57 = call i64 @_ZN3jxl24BuildAndEncodeHistogramsERKNS_15HistogramParamsEmRNSt3__16vectorINS4_INS_5TokenENS3_9allocatorIS5_EEEENS6_IS8_EEEEPNS_19EntropyEncodingDataEPNS4_IhNS6_IhEEEEPNS_9BitWriterEmPNS_6AuxOutE(%"struct.jxl::HistogramParams"* nonnull dereferenceable(56) %8, i64 41, %"class.std::__1::vector.138"* nonnull dereferenceable(24) %6, %"struct.jxl::EntropyEncodingData"* nonnull %9, %"class.std::__1::vector.52"* nonnull %10, %"struct.jxl::BitWriter"* %1, i64 %2, %"struct.jxl::AuxOut"* %3) #9
  %58 = load %"class.std::__1::vector.140"*, %"class.std::__1::vector.140"** %24, align 8
  call void @_ZN3jxl11WriteTokensERKNSt3__16vectorINS_5TokenENS0_9allocatorIS2_EEEERKNS_19EntropyEncodingDataERKNS1_IhNS3_IhEEEEPNS_9BitWriterEmPNS_6AuxOutE(%"class.std::__1::vector.140"* dereferenceable(24) %58, %"struct.jxl::EntropyEncodingData"* nonnull dereferenceable(104) %9, %"class.std::__1::vector.52"* nonnull dereferenceable(24) %10, %"struct.jxl::BitWriter"* %1, i64 %2, %"struct.jxl::AuxOut"* %3) #9
  %59 = load i8*, i8** %56, align 8
  %60 = icmp eq i8* %59, null
  br i1 %60, label %65, label %61

61:                                               ; preds = %40
  %62 = getelementptr inbounds %"class.std::__1::vector.52", %"class.std::__1::vector.52"* %10, i64 0, i32 0, i32 1
  %63 = ptrtoint i8* %59 to i64
  %64 = bitcast i8** %62 to i64*
  store i64 %63, i64* %64, align 8
  call void @_ZdlPv(i8* nonnull %59) #11
  br label %65

65:                                               ; preds = %40, %61
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %55) #9
  %66 = getelementptr inbounds %"struct.jxl::EntropyEncodingData", %"struct.jxl::EntropyEncodingData"* %9, i64 0, i32 2, i32 0, i32 0
  %67 = load %"struct.jxl::HybridUintConfig"*, %"struct.jxl::HybridUintConfig"** %66, align 8
  %68 = icmp eq %"struct.jxl::HybridUintConfig"* %67, null
  br i1 %68, label %74, label %69

69:                                               ; preds = %65
  %70 = ptrtoint %"struct.jxl::HybridUintConfig"* %67 to i64
  %71 = getelementptr inbounds %"struct.jxl::EntropyEncodingData", %"struct.jxl::EntropyEncodingData"* %9, i64 0, i32 2, i32 0, i32 1
  %72 = bitcast %"struct.jxl::HybridUintConfig"** %71 to i64*
  store i64 %70, i64* %72, align 8
  %73 = bitcast %"struct.jxl::HybridUintConfig"* %67 to i8*
  call void @_ZdlPv(i8* %73) #11
  br label %74

74:                                               ; preds = %69, %65
  %75 = getelementptr inbounds %"struct.jxl::EntropyEncodingData", %"struct.jxl::EntropyEncodingData"* %9, i64 0, i32 0, i32 0, i32 0
  %76 = load %"class.std::__1::vector.154"*, %"class.std::__1::vector.154"** %75, align 8
  %77 = icmp eq %"class.std::__1::vector.154"* %76, null
  br i1 %77, label %119, label %78

78:                                               ; preds = %74
  %79 = bitcast %"class.std::__1::vector.154"* %76 to i8*
  %80 = getelementptr inbounds %"struct.jxl::EntropyEncodingData", %"struct.jxl::EntropyEncodingData"* %9, i64 0, i32 0, i32 0, i32 1
  %81 = load %"class.std::__1::vector.154"*, %"class.std::__1::vector.154"** %80, align 8
  %82 = icmp eq %"class.std::__1::vector.154"* %81, %76
  br i1 %82, label %117, label %83

83:                                               ; preds = %78, %112
  %84 = phi %"class.std::__1::vector.154"* [ %85, %112 ], [ %81, %78 ]
  %85 = getelementptr inbounds %"class.std::__1::vector.154", %"class.std::__1::vector.154"* %84, i64 -1
  %86 = getelementptr inbounds %"class.std::__1::vector.154", %"class.std::__1::vector.154"* %85, i64 0, i32 0, i32 0
  %87 = load %"struct.jxl::ANSEncSymbolInfo"*, %"struct.jxl::ANSEncSymbolInfo"** %86, align 8
  %88 = icmp eq %"struct.jxl::ANSEncSymbolInfo"* %87, null
  br i1 %88, label %112, label %89

89:                                               ; preds = %83
  %90 = bitcast %"struct.jxl::ANSEncSymbolInfo"* %87 to i8*
  %91 = getelementptr inbounds %"class.std::__1::vector.154", %"class.std::__1::vector.154"* %84, i64 -1, i32 0, i32 1
  %92 = load %"struct.jxl::ANSEncSymbolInfo"*, %"struct.jxl::ANSEncSymbolInfo"** %91, align 8
  %93 = icmp eq %"struct.jxl::ANSEncSymbolInfo"* %92, %87
  br i1 %93, label %110, label %94

94:                                               ; preds = %89, %105
  %95 = phi %"struct.jxl::ANSEncSymbolInfo"* [ %96, %105 ], [ %92, %89 ]
  %96 = getelementptr inbounds %"struct.jxl::ANSEncSymbolInfo", %"struct.jxl::ANSEncSymbolInfo"* %95, i64 -1
  %97 = getelementptr inbounds %"struct.jxl::ANSEncSymbolInfo", %"struct.jxl::ANSEncSymbolInfo"* %95, i64 -1, i32 2, i32 0, i32 0
  %98 = load i16*, i16** %97, align 8
  %99 = icmp eq i16* %98, null
  br i1 %99, label %105, label %100

100:                                              ; preds = %94
  %101 = ptrtoint i16* %98 to i64
  %102 = getelementptr inbounds %"struct.jxl::ANSEncSymbolInfo", %"struct.jxl::ANSEncSymbolInfo"* %95, i64 -1, i32 2, i32 0, i32 1
  %103 = bitcast i16** %102 to i64*
  store i64 %101, i64* %103, align 8
  %104 = bitcast i16* %98 to i8*
  call void @_ZdlPv(i8* %104) #11
  br label %105

105:                                              ; preds = %100, %94
  %106 = icmp eq %"struct.jxl::ANSEncSymbolInfo"* %96, %87
  br i1 %106, label %107, label %94

107:                                              ; preds = %105
  %108 = bitcast %"class.std::__1::vector.154"* %85 to i8**
  %109 = load i8*, i8** %108, align 8
  br label %110

110:                                              ; preds = %107, %89
  %111 = phi i8* [ %109, %107 ], [ %90, %89 ]
  store %"struct.jxl::ANSEncSymbolInfo"* %87, %"struct.jxl::ANSEncSymbolInfo"** %91, align 8
  call void @_ZdlPv(i8* %111) #11
  br label %112

112:                                              ; preds = %110, %83
  %113 = icmp eq %"class.std::__1::vector.154"* %85, %76
  br i1 %113, label %114, label %83

114:                                              ; preds = %112
  %115 = bitcast %"struct.jxl::EntropyEncodingData"* %9 to i8**
  %116 = load i8*, i8** %115, align 8
  br label %117

117:                                              ; preds = %114, %78
  %118 = phi i8* [ %116, %114 ], [ %79, %78 ]
  store %"class.std::__1::vector.154"* %76, %"class.std::__1::vector.154"** %80, align 8
  call void @_ZdlPv(i8* %118) #11
  br label %119

119:                                              ; preds = %74, %117
  call void @llvm.lifetime.end.p0i8(i64 104, i8* nonnull %50) #9
  %120 = getelementptr inbounds %"struct.jxl::HistogramParams", %"struct.jxl::HistogramParams"* %8, i64 0, i32 4, i32 0, i32 0
  %121 = load i64*, i64** %120, align 8
  %122 = icmp eq i64* %121, null
  br i1 %122, label %128, label %123

123:                                              ; preds = %119
  %124 = ptrtoint i64* %121 to i64
  %125 = getelementptr inbounds %"struct.jxl::HistogramParams", %"struct.jxl::HistogramParams"* %8, i64 0, i32 4, i32 0, i32 1
  %126 = bitcast i64** %125 to i64*
  store i64 %124, i64* %126, align 8
  %127 = bitcast i64* %121 to i8*
  call void @_ZdlPv(i8* %127) #11
  br label %128

128:                                              ; preds = %119, %123
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %41) #9
  br label %250

129:                                              ; preds = %37, %246
  %130 = phi i64 [ %248, %246 ], [ %38, %37 ]
  %131 = phi i64 [ %247, %246 ], [ 0, %37 ]
  %132 = load %"class.std::__1::vector.140"*, %"class.std::__1::vector.140"** %24, align 8
  %133 = icmp eq i64 %131, 0
  br i1 %133, label %156, label %134

134:                                              ; preds = %129
  %135 = add i64 %131, -1
  %136 = icmp ult i64 %130, %135
  br i1 %136, label %137, label %140

137:                                              ; preds = %134
  %138 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.9, i64 0, i64 0), i32 180, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.10, i64 0, i64 0)) #9
  %139 = call zeroext i1 @_ZN3jxl5AbortEv() #10
  unreachable

140:                                              ; preds = %134
  %141 = load i8*, i8** %17, align 8
  %142 = getelementptr inbounds i8, i8* %141, i64 %135
  %143 = load i8, i8* %142, align 1
  %144 = zext i8 %143 to i64
  %145 = icmp ugt i64 %131, 1
  br i1 %145, label %146, label %156

146:                                              ; preds = %140
  %147 = add i64 %131, -2
  %148 = icmp ult i64 %130, %147
  br i1 %148, label %149, label %152

149:                                              ; preds = %146
  %150 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.9, i64 0, i64 0), i32 180, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.10, i64 0, i64 0)) #9
  %151 = call zeroext i1 @_ZN3jxl5AbortEv() #10
  unreachable

152:                                              ; preds = %146
  %153 = getelementptr inbounds i8, i8* %141, i64 %147
  %154 = load i8, i8* %153, align 1
  %155 = zext i8 %154 to i64
  br label %156

156:                                              ; preds = %129, %140, %152
  %157 = phi i64 [ %144, %152 ], [ %144, %140 ], [ 0, %129 ]
  %158 = phi i64 [ %155, %152 ], [ 0, %140 ], [ 0, %129 ]
  %159 = call i64 @_ZN3jxl13ICCANSContextEmmm(i64 %131, i64 %157, i64 %158) #9
  %160 = load i64, i64* %16, align 8
  %161 = icmp ult i64 %160, %131
  br i1 %161, label %162, label %165

162:                                              ; preds = %156
  %163 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.9, i64 0, i64 0), i32 180, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.10, i64 0, i64 0)) #9
  %164 = call zeroext i1 @_ZN3jxl5AbortEv() #10
  unreachable

165:                                              ; preds = %156
  %166 = load i8*, i8** %17, align 8
  %167 = getelementptr inbounds i8, i8* %166, i64 %131
  %168 = getelementptr inbounds %"class.std::__1::vector.140", %"class.std::__1::vector.140"* %132, i64 0, i32 0, i32 1
  %169 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %168, align 8
  %170 = getelementptr inbounds %"class.std::__1::vector.140", %"class.std::__1::vector.140"* %132, i64 0, i32 0, i32 2, i32 0, i32 0
  %171 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %170, align 8
  %172 = icmp ult %"struct.jxl::Token"* %169, %171
  %173 = ptrtoint %"struct.jxl::Token"* %171 to i64
  br i1 %172, label %174, label %184

174:                                              ; preds = %165
  %175 = trunc i64 %159 to i32
  %176 = load i8, i8* %167, align 1
  %177 = zext i8 %176 to i32
  %178 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %169, i64 0, i32 0
  %179 = shl i32 %175, 1
  store i32 %179, i32* %178, align 4
  %180 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %169, i64 0, i32 1
  store i32 %177, i32* %180, align 4
  %181 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %169, i64 1
  %182 = ptrtoint %"struct.jxl::Token"* %181 to i64
  %183 = bitcast %"struct.jxl::Token"** %168 to i64*
  store i64 %182, i64* %183, align 8
  br label %246

184:                                              ; preds = %165
  %185 = ptrtoint %"struct.jxl::Token"* %169 to i64
  %186 = bitcast %"struct.jxl::Token"** %168 to i64*
  %187 = bitcast %"class.std::__1::vector.140"* %132 to i64*
  %188 = load i64, i64* %187, align 8
  %189 = sub i64 %185, %188
  %190 = ashr exact i64 %189, 3
  %191 = add nsw i64 %190, 1
  %192 = icmp ugt i64 %191, 2305843009213693951
  br i1 %192, label %193, label %195

193:                                              ; preds = %184
  %194 = bitcast %"class.std::__1::vector.140"* %132 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %194) #10
  unreachable

195:                                              ; preds = %184
  %196 = bitcast %"struct.jxl::Token"** %170 to i64*
  %197 = sub i64 %173, %188
  %198 = ashr exact i64 %197, 3
  %199 = icmp ult i64 %198, 1152921504606846975
  br i1 %199, label %200, label %208

200:                                              ; preds = %195
  %201 = ashr exact i64 %197, 2
  %202 = icmp ult i64 %201, %191
  %203 = select i1 %202, i64 %191, i64 %201
  %204 = icmp eq i64 %203, 0
  br i1 %204, label %213, label %205

205:                                              ; preds = %200
  %206 = icmp ugt i64 %203, 2305843009213693951
  br i1 %206, label %207, label %208

207:                                              ; preds = %205
  call void @abort() #10
  unreachable

208:                                              ; preds = %205, %195
  %209 = phi i64 [ %203, %205 ], [ 2305843009213693951, %195 ]
  %210 = shl i64 %209, 3
  %211 = call i8* @_Znwm(i64 %210) #11
  %212 = bitcast i8* %211 to %"struct.jxl::Token"*
  br label %213

213:                                              ; preds = %208, %200
  %214 = phi i64 [ %209, %208 ], [ 0, %200 ]
  %215 = phi %"struct.jxl::Token"* [ %212, %208 ], [ null, %200 ]
  %216 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %215, i64 %190
  %217 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %215, i64 %214
  %218 = ptrtoint %"struct.jxl::Token"* %217 to i64
  %219 = trunc i64 %159 to i32
  %220 = load i8, i8* %167, align 1
  %221 = zext i8 %220 to i32
  %222 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %216, i64 0, i32 0
  %223 = shl i32 %219, 1
  store i32 %223, i32* %222, align 4
  %224 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %215, i64 %190, i32 1
  store i32 %221, i32* %224, align 4
  %225 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %216, i64 1
  %226 = ptrtoint %"struct.jxl::Token"* %225 to i64
  %227 = getelementptr inbounds %"class.std::__1::vector.140", %"class.std::__1::vector.140"* %132, i64 0, i32 0, i32 0
  %228 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %227, align 8
  %229 = load i64, i64* %186, align 8
  %230 = ptrtoint %"struct.jxl::Token"* %228 to i64
  %231 = sub i64 %229, %230
  %232 = ashr exact i64 %231, 3
  %233 = sub nsw i64 0, %232
  %234 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %216, i64 %233
  %235 = ptrtoint %"struct.jxl::Token"* %234 to i64
  %236 = icmp sgt i64 %231, 0
  br i1 %236, label %237, label %241

237:                                              ; preds = %213
  %238 = bitcast %"struct.jxl::Token"* %234 to i8*
  %239 = bitcast %"struct.jxl::Token"* %228 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %238, i8* align 4 %239, i64 %231, i1 false) #9
  %240 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %227, align 8
  br label %241

241:                                              ; preds = %237, %213
  %242 = phi %"struct.jxl::Token"* [ %228, %213 ], [ %240, %237 ]
  store i64 %235, i64* %187, align 8
  store i64 %226, i64* %186, align 8
  store i64 %218, i64* %196, align 8
  %243 = icmp eq %"struct.jxl::Token"* %242, null
  br i1 %243, label %246, label %244

244:                                              ; preds = %241
  %245 = bitcast %"struct.jxl::Token"* %242 to i8*
  call void @_ZdlPv(i8* %245) #11
  br label %246

246:                                              ; preds = %244, %241, %174
  %247 = add nuw i64 %131, 1
  %248 = load i64, i64* %16, align 8
  %249 = icmp ult i64 %247, %248
  br i1 %249, label %129, label %40

250:                                              ; preds = %22, %128
  %251 = phi i32 [ 0, %128 ], [ %35, %22 ]
  call void @_ZN3jxl9BitWriter9AllotmentD1Ev(%"class.jxl::BitWriter::Allotment"* nonnull %7) #9
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %33) #9
  %252 = load %"class.std::__1::vector.140"*, %"class.std::__1::vector.140"** %24, align 8
  %253 = icmp eq %"class.std::__1::vector.140"* %252, null
  br i1 %253, label %275, label %254

254:                                              ; preds = %250
  %255 = bitcast %"class.std::__1::vector.140"* %252 to i8*
  %256 = load %"class.std::__1::vector.140"*, %"class.std::__1::vector.140"** %25, align 8
  %257 = icmp eq %"class.std::__1::vector.140"* %256, %252
  br i1 %257, label %273, label %258

258:                                              ; preds = %254, %269
  %259 = phi %"class.std::__1::vector.140"* [ %260, %269 ], [ %256, %254 ]
  %260 = getelementptr inbounds %"class.std::__1::vector.140", %"class.std::__1::vector.140"* %259, i64 -1
  %261 = getelementptr inbounds %"class.std::__1::vector.140", %"class.std::__1::vector.140"* %260, i64 0, i32 0, i32 0
  %262 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %261, align 8
  %263 = icmp eq %"struct.jxl::Token"* %262, null
  br i1 %263, label %269, label %264

264:                                              ; preds = %258
  %265 = ptrtoint %"struct.jxl::Token"* %262 to i64
  %266 = getelementptr inbounds %"class.std::__1::vector.140", %"class.std::__1::vector.140"* %259, i64 -1, i32 0, i32 1
  %267 = bitcast %"struct.jxl::Token"** %266 to i64*
  store i64 %265, i64* %267, align 8
  %268 = bitcast %"struct.jxl::Token"* %262 to i8*
  call void @_ZdlPv(i8* %268) #11
  br label %269

269:                                              ; preds = %264, %258
  %270 = icmp eq %"class.std::__1::vector.140"* %260, %252
  br i1 %270, label %271, label %258

271:                                              ; preds = %269
  %272 = load i8*, i8** %28, align 8
  br label %273

273:                                              ; preds = %271, %254
  %274 = phi i8* [ %272, %271 ], [ %255, %254 ]
  store %"class.std::__1::vector.140"* %252, %"class.std::__1::vector.140"** %25, align 8
  call void @_ZdlPv(i8* %274) #11
  br label %275

275:                                              ; preds = %250, %273
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %23) #9
  br label %276

276:                                              ; preds = %14, %275
  %277 = phi i32 [ %251, %275 ], [ %20, %14 ]
  %278 = load i8*, i8** %17, align 8
  store i8* null, i8** %17, align 8
  %279 = icmp eq i8* %278, null
  br i1 %279, label %281, label %280

280:                                              ; preds = %276
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %278) #9
  br label %281

281:                                              ; preds = %276, %280
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %15) #9
  br label %282

282:                                              ; preds = %4, %281
  %283 = phi i32 [ %277, %281 ], [ 1, %4 ]
  ret i32 %283
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @_ZN3jxl9BitWriter9AllotmentC1EPS0_m(%"class.jxl::BitWriter::Allotment"*, %"struct.jxl::BitWriter"*, i64) unnamed_addr #2

declare i32 @_ZN3jxl8U64Coder5WriteEmPNS_9BitWriterE(i64, %"struct.jxl::BitWriter"*) local_unnamed_addr #2

declare void @_ZN3jxl16ReclaimAndChargeEPNS_9BitWriterEPNS0_9AllotmentEmPNS_6AuxOutE(%"struct.jxl::BitWriter"*, %"class.jxl::BitWriter::Allotment"*, i64, %"struct.jxl::AuxOut"*) local_unnamed_addr #2

declare i64 @_ZN3jxl13ICCANSContextEmmm(i64, i64, i64) local_unnamed_addr #2

declare i64 @_ZN3jxl24BuildAndEncodeHistogramsERKNS_15HistogramParamsEmRNSt3__16vectorINS4_INS_5TokenENS3_9allocatorIS5_EEEENS6_IS8_EEEEPNS_19EntropyEncodingDataEPNS4_IhNS6_IhEEEEPNS_9BitWriterEmPNS_6AuxOutE(%"struct.jxl::HistogramParams"* dereferenceable(56), i64, %"class.std::__1::vector.138"* dereferenceable(24), %"struct.jxl::EntropyEncodingData"*, %"class.std::__1::vector.52"*, %"struct.jxl::BitWriter"*, i64, %"struct.jxl::AuxOut"*) local_unnamed_addr #2

declare void @_ZN3jxl11WriteTokensERKNSt3__16vectorINS_5TokenENS0_9allocatorIS2_EEEERKNS_19EntropyEncodingDataERKNS1_IhNS3_IhEEEEPNS_9BitWriterEmPNS_6AuxOutE(%"class.std::__1::vector.140"* dereferenceable(24), %"struct.jxl::EntropyEncodingData"* dereferenceable(104), %"class.std::__1::vector.52"* dereferenceable(24), %"struct.jxl::BitWriter"*, i64, %"struct.jxl::AuxOut"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN3jxl9BitWriter9AllotmentD1Ev(%"class.jxl::BitWriter::Allotment"*) unnamed_addr #4

declare zeroext i1 @_ZN3jxl5DebugEPKcz(i8*, ...) local_unnamed_addr #2

; Function Attrs: noreturn
declare zeroext i1 @_ZN3jxl5AbortEv() local_unnamed_addr #5

declare void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"*, i64) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl11PaddedBytesC2Em(%"class.jxl::PaddedBytes"*, i64) unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  %4 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %0, i64 0, i32 1
  %5 = icmp eq i64 %1, 0
  %6 = bitcast i64* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %6, i8 0, i64 16, i1 false)
  br i1 %5, label %8, label %7

7:                                                ; preds = %2
  tail call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* %0, i64 %1) #9
  br label %8

8:                                                ; preds = %2, %7
  ret void
}

declare i32 @_ZN3jxl16CheckOutOfBoundsEmmm(i64, i64, i64) local_unnamed_addr #2

declare zeroext i8 @_ZN3jxl21LinearPredictICCValueEPKhmmmmi(i8*, i64, i64, i64, i64, i32) local_unnamed_addr #2

declare void @_ZN3jxl12CacheAligned4FreeEPKv(i8*) local_unnamed_addr #2

declare void @_ZN3jxl10LZ77ParamsC1Ev(%"struct.jxl::LZ77Params"*) unnamed_addr #2

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16__treeINS_12__value_typeImmEENS_19__map_value_compareImS2_NS_4lessImEELb1EEENS_9allocatorIS2_EEE7destroyEPNS_11__tree_nodeIS2_PvEE(%"class.std::__1::__tree"*, %"class.std::__1::__tree_node"*) local_unnamed_addr #0 comdat align 2 {
  %3 = icmp eq %"class.std::__1::__tree_node"* %1, null
  br i1 %3, label %11, label %4

4:                                                ; preds = %2
  %5 = bitcast %"class.std::__1::__tree_node"* %1 to %"class.std::__1::__tree_node"**
  %6 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %5, align 8
  tail call void @_ZNSt3__16__treeINS_12__value_typeImmEENS_19__map_value_compareImS2_NS_4lessImEELb1EEENS_9allocatorIS2_EEE7destroyEPNS_11__tree_nodeIS2_PvEE(%"class.std::__1::__tree"* %0, %"class.std::__1::__tree_node"* %6) #9
  %7 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %1, i64 0, i32 0, i32 1
  %8 = bitcast %"class.std::__1::__tree_node_base"** %7 to %"class.std::__1::__tree_node"**
  %9 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %8, align 8
  tail call void @_ZNSt3__16__treeINS_12__value_typeImmEENS_19__map_value_compareImS2_NS_4lessImEELb1EEENS_9allocatorIS2_EEE7destroyEPNS_11__tree_nodeIS2_PvEE(%"class.std::__1::__tree"* %0, %"class.std::__1::__tree_node"* %9) #9
  %10 = bitcast %"class.std::__1::__tree_node"* %1 to i8*
  tail call void @_ZdlPv(i8* %10) #11
  ret void

11:                                               ; preds = %2
  ret void
}

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #5

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #7

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #8

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_(%"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"*) local_unnamed_addr #0 comdat {
  %3 = icmp eq %"class.std::__1::__tree_node_base"* %1, %0
  %4 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %1, i64 0, i32 3
  %5 = zext i1 %3 to i8
  store i8 %5, i8* %4, align 8
  br i1 %3, label %156, label %6

6:                                                ; preds = %2, %149
  %7 = phi %"class.std::__1::__tree_node_base"* [ %20, %149 ], [ %1, %2 ]
  %8 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %7, i64 0, i32 2
  %9 = bitcast %"class.std::__1::__tree_end_node"** %8 to %"class.std::__1::__tree_node_base"**
  %10 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %9, align 8
  %11 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 3
  %12 = load i8, i8* %11, align 8, !range !8
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %14, label %156

14:                                               ; preds = %6
  %15 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 2
  %16 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %15, align 8
  %17 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %16, i64 0, i32 0
  %18 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %17, align 8
  %19 = icmp eq %"class.std::__1::__tree_node_base"* %18, %10
  %20 = bitcast %"class.std::__1::__tree_end_node"* %16 to %"class.std::__1::__tree_node_base"*
  br i1 %19, label %21, label %87

21:                                               ; preds = %14
  %22 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %16, i64 1, i32 0
  %23 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %22, align 8
  %24 = icmp eq %"class.std::__1::__tree_node_base"* %23, null
  br i1 %24, label %29, label %25

25:                                               ; preds = %21
  %26 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %23, i64 0, i32 3
  %27 = load i8, i8* %26, align 8, !range !8
  %28 = icmp eq i8 %27, 0
  br i1 %28, label %149, label %29

29:                                               ; preds = %25, %21
  %30 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 2
  %31 = bitcast %"class.std::__1::__tree_end_node"* %16 to %"class.std::__1::__tree_node_base"*
  %32 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 0, i32 0
  %33 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %32, align 8
  %34 = icmp eq %"class.std::__1::__tree_node_base"* %33, %7
  br i1 %34, label %61, label %35

35:                                               ; preds = %29
  %36 = ptrtoint %"class.std::__1::__tree_end_node"* %16 to i64
  %37 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 1
  %38 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %37, align 8
  %39 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %38, i64 0, i32 0, i32 0
  %40 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %39, align 8
  store %"class.std::__1::__tree_node_base"* %40, %"class.std::__1::__tree_node_base"** %37, align 8
  %41 = icmp eq %"class.std::__1::__tree_node_base"* %40, null
  br i1 %41, label %47, label %42

42:                                               ; preds = %35
  %43 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 0
  %44 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %40, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %43, %"class.std::__1::__tree_end_node"** %44, align 8
  %45 = bitcast %"class.std::__1::__tree_end_node"** %30 to i64*
  %46 = load i64, i64* %45, align 8
  br label %47

47:                                               ; preds = %35, %42
  %48 = phi i64 [ %46, %42 ], [ %36, %35 ]
  %49 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %38, i64 0, i32 2
  %50 = bitcast %"class.std::__1::__tree_end_node"** %49 to i64*
  store i64 %48, i64* %50, align 8
  %51 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %30, align 8
  %52 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %51, i64 0, i32 0
  %53 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %52, align 8
  %54 = icmp eq %"class.std::__1::__tree_node_base"* %53, %10
  %55 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %51, i64 1, i32 0
  %56 = select i1 %54, %"class.std::__1::__tree_node_base"** %52, %"class.std::__1::__tree_node_base"** %55
  store %"class.std::__1::__tree_node_base"* %38, %"class.std::__1::__tree_node_base"** %56, align 8
  store %"class.std::__1::__tree_node_base"* %10, %"class.std::__1::__tree_node_base"** %39, align 8
  %57 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %38, i64 0, i32 0
  store %"class.std::__1::__tree_end_node"* %57, %"class.std::__1::__tree_end_node"** %30, align 8
  %58 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %38, i64 0, i32 2
  %59 = bitcast %"class.std::__1::__tree_end_node"** %58 to %"class.std::__1::__tree_node_base"**
  %60 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %59, align 8
  br label %61

61:                                               ; preds = %47, %29
  %62 = phi %"class.std::__1::__tree_node_base"* [ %31, %29 ], [ %60, %47 ]
  %63 = phi %"class.std::__1::__tree_node_base"* [ %10, %29 ], [ %38, %47 ]
  %64 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %63, i64 0, i32 3
  store i8 1, i8* %64, align 8
  %65 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %62, i64 0, i32 3
  store i8 0, i8* %65, align 8
  %66 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %62, i64 0, i32 0, i32 0
  %67 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %66, align 8
  %68 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %67, i64 0, i32 1
  %69 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %68, align 8
  store %"class.std::__1::__tree_node_base"* %69, %"class.std::__1::__tree_node_base"** %66, align 8
  %70 = icmp eq %"class.std::__1::__tree_node_base"* %69, null
  br i1 %70, label %74, label %71

71:                                               ; preds = %61
  %72 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %62, i64 0, i32 0
  %73 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %69, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %72, %"class.std::__1::__tree_end_node"** %73, align 8
  br label %74

74:                                               ; preds = %71, %61
  %75 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %62, i64 0, i32 2
  %76 = bitcast %"class.std::__1::__tree_end_node"** %75 to i64*
  %77 = load i64, i64* %76, align 8
  %78 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %67, i64 0, i32 2
  %79 = bitcast %"class.std::__1::__tree_end_node"** %78 to i64*
  store i64 %77, i64* %79, align 8
  %80 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %75, align 8
  %81 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %80, i64 0, i32 0
  %82 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %81, align 8
  %83 = icmp eq %"class.std::__1::__tree_node_base"* %82, %62
  %84 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %80, i64 1, i32 0
  %85 = select i1 %83, %"class.std::__1::__tree_node_base"** %81, %"class.std::__1::__tree_node_base"** %84
  store %"class.std::__1::__tree_node_base"* %67, %"class.std::__1::__tree_node_base"** %85, align 8
  store %"class.std::__1::__tree_node_base"* %62, %"class.std::__1::__tree_node_base"** %68, align 8
  %86 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %67, i64 0, i32 0
  store %"class.std::__1::__tree_end_node"* %86, %"class.std::__1::__tree_end_node"** %75, align 8
  br label %156

87:                                               ; preds = %14
  %88 = icmp eq %"class.std::__1::__tree_node_base"* %18, null
  br i1 %88, label %93, label %89

89:                                               ; preds = %87
  %90 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %18, i64 0, i32 3
  %91 = load i8, i8* %90, align 8, !range !8
  %92 = icmp eq i8 %91, 0
  br i1 %92, label %149, label %93

93:                                               ; preds = %89, %87
  %94 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 2
  %95 = bitcast %"class.std::__1::__tree_end_node"* %16 to %"class.std::__1::__tree_node_base"*
  %96 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 0, i32 0
  %97 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %96, align 8
  %98 = icmp eq %"class.std::__1::__tree_node_base"* %97, %7
  br i1 %98, label %99, label %123

99:                                               ; preds = %93
  %100 = ptrtoint %"class.std::__1::__tree_end_node"* %16 to i64
  %101 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 0, i32 0
  %102 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %7, i64 0, i32 1
  %103 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %102, align 8
  store %"class.std::__1::__tree_node_base"* %103, %"class.std::__1::__tree_node_base"** %101, align 8
  %104 = icmp eq %"class.std::__1::__tree_node_base"* %103, null
  br i1 %104, label %110, label %105

105:                                              ; preds = %99
  %106 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 0
  %107 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %103, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %106, %"class.std::__1::__tree_end_node"** %107, align 8
  %108 = bitcast %"class.std::__1::__tree_end_node"** %94 to i64*
  %109 = load i64, i64* %108, align 8
  br label %110

110:                                              ; preds = %99, %105
  %111 = phi i64 [ %109, %105 ], [ %100, %99 ]
  %112 = bitcast %"class.std::__1::__tree_end_node"** %8 to i64*
  store i64 %111, i64* %112, align 8
  %113 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %94, align 8
  %114 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %113, i64 0, i32 0
  %115 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %114, align 8
  %116 = icmp eq %"class.std::__1::__tree_node_base"* %115, %10
  %117 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %113, i64 1, i32 0
  %118 = select i1 %116, %"class.std::__1::__tree_node_base"** %114, %"class.std::__1::__tree_node_base"** %117
  store %"class.std::__1::__tree_node_base"* %7, %"class.std::__1::__tree_node_base"** %118, align 8
  store %"class.std::__1::__tree_node_base"* %10, %"class.std::__1::__tree_node_base"** %102, align 8
  %119 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %7, i64 0, i32 0
  store %"class.std::__1::__tree_end_node"* %119, %"class.std::__1::__tree_end_node"** %94, align 8
  %120 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %7, i64 0, i32 2
  %121 = bitcast %"class.std::__1::__tree_end_node"** %120 to %"class.std::__1::__tree_node_base"**
  %122 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %121, align 8
  br label %123

123:                                              ; preds = %93, %110
  %124 = phi %"class.std::__1::__tree_node_base"* [ %122, %110 ], [ %95, %93 ]
  %125 = phi %"class.std::__1::__tree_node_base"* [ %7, %110 ], [ %10, %93 ]
  %126 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %125, i64 0, i32 3
  store i8 1, i8* %126, align 8
  %127 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %124, i64 0, i32 3
  store i8 0, i8* %127, align 8
  %128 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %124, i64 0, i32 1
  %129 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %128, align 8
  %130 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %129, i64 0, i32 0, i32 0
  %131 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %130, align 8
  store %"class.std::__1::__tree_node_base"* %131, %"class.std::__1::__tree_node_base"** %128, align 8
  %132 = icmp eq %"class.std::__1::__tree_node_base"* %131, null
  br i1 %132, label %136, label %133

133:                                              ; preds = %123
  %134 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %124, i64 0, i32 0
  %135 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %131, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %134, %"class.std::__1::__tree_end_node"** %135, align 8
  br label %136

136:                                              ; preds = %133, %123
  %137 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %124, i64 0, i32 2
  %138 = bitcast %"class.std::__1::__tree_end_node"** %137 to i64*
  %139 = load i64, i64* %138, align 8
  %140 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %129, i64 0, i32 2
  %141 = bitcast %"class.std::__1::__tree_end_node"** %140 to i64*
  store i64 %139, i64* %141, align 8
  %142 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %137, align 8
  %143 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %142, i64 0, i32 0
  %144 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %143, align 8
  %145 = icmp eq %"class.std::__1::__tree_node_base"* %144, %124
  %146 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %142, i64 1, i32 0
  %147 = select i1 %145, %"class.std::__1::__tree_node_base"** %143, %"class.std::__1::__tree_node_base"** %146
  store %"class.std::__1::__tree_node_base"* %129, %"class.std::__1::__tree_node_base"** %147, align 8
  store %"class.std::__1::__tree_node_base"* %124, %"class.std::__1::__tree_node_base"** %130, align 8
  %148 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %129, i64 0, i32 0
  store %"class.std::__1::__tree_end_node"* %148, %"class.std::__1::__tree_end_node"** %137, align 8
  br label %156

149:                                              ; preds = %89, %25
  %150 = phi i8* [ %26, %25 ], [ %90, %89 ]
  store i8 1, i8* %11, align 8
  %151 = icmp eq %"class.std::__1::__tree_node_base"* %20, %0
  %152 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %16, i64 3
  %153 = bitcast %"class.std::__1::__tree_end_node"* %152 to i8*
  %154 = zext i1 %151 to i8
  store i8 %154, i8* %153, align 8
  store i8 1, i8* %150, align 8
  %155 = icmp eq %"class.std::__1::__tree_node_base"* %20, %0
  br i1 %155, label %156, label %6

156:                                              ; preds = %6, %149, %2, %136, %74
  ret void
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }
attributes #10 = { noreturn nounwind }
attributes #11 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZNSt3__16__treeINS_12__value_typeImmEENS_19__map_value_compareImS2_NS_4lessImEELb1EEENS_9allocatorIS2_EEE16__construct_nodeIJRKNS_21piecewise_construct_tENS_5tupleIJOmEEENSE_IJEEEEEENS_10unique_ptrINS_11__tree_nodeIS2_PvEENS_22__tree_node_destructorINS7_ISL_EEEEEEDpOT_: argument 0"}
!4 = distinct !{!4, !"_ZNSt3__16__treeINS_12__value_typeImmEENS_19__map_value_compareImS2_NS_4lessImEELb1EEENS_9allocatorIS2_EEE16__construct_nodeIJRKNS_21piecewise_construct_tENS_5tupleIJOmEEENSE_IJEEEEEENS_10unique_ptrINS_11__tree_nodeIS2_PvEENS_22__tree_node_destructorINS7_ISL_EEEEEEDpOT_"}
!5 = !{!6}
!6 = distinct !{!6, !7, !"_ZNSt3__16__treeINS_12__value_typeImmEENS_19__map_value_compareImS2_NS_4lessImEELb1EEENS_9allocatorIS2_EEE16__construct_nodeIJRKNS_21piecewise_construct_tENS_5tupleIJRKmEEENSE_IJEEEEEENS_10unique_ptrINS_11__tree_nodeIS2_PvEENS_22__tree_node_destructorINS7_ISM_EEEEEEDpOT_: argument 0"}
!7 = distinct !{!7, !"_ZNSt3__16__treeINS_12__value_typeImmEENS_19__map_value_compareImS2_NS_4lessImEELb1EEENS_9allocatorIS2_EEE16__construct_nodeIJRKNS_21piecewise_construct_tENS_5tupleIJRKmEEENSE_IJEEEEEENS_10unique_ptrINS_11__tree_nodeIS2_PvEENS_22__tree_node_destructorINS7_ISM_EEEEEEDpOT_"}
!8 = !{i8 0, i8 2}
