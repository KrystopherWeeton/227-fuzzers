; ModuleID = '../../third_party/ffmpeg/libavutil/file_open.c'
source_filename = "../../third_party/ffmpeg/libavutil/file_open.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver fmemopen, fmemopen@GLIBC_2.2.5"
module asm ".symver glob, glob@GLIBC_2.2.5"
module asm ".symver glob64, glob64@GLIBC_2.2.5"
module asm ".symver quick_exit, quick_exit@GLIBC_2.10"

%struct.AVClass = type { i8*, i8* (i8*)*, %struct.AVOption*, i32, i32, i32, i8* (i8*, i8*)*, %struct.AVClass* (%struct.AVClass*)*, i32, i32 (i8*)*, i32 (%struct.AVOptionRanges**, i8*, i8*, i32)*, %struct.AVClass* (i8**)* }
%struct.AVOption = type opaque
%struct.AVOptionRanges = type opaque
%struct.__va_list_tag = type { i32, i32, i8*, i8* }
%struct.FileLogContext = type { %struct.AVClass*, i32, i8* }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque

@.str = private unnamed_addr constant [29 x i8] c"Failed to set close on exec\0A\00", align 1
@file_log_ctx_class = internal constant %struct.AVClass { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.4, i32 0, i32 0), i8* (i8*)* @av_default_item_name, %struct.AVOption* null, i32 3687524, i32 8, i32 16, i8* (i8*, i8*)* null, %struct.AVClass* (%struct.AVClass*)* null, i32 0, i32 (i8*)* null, i32 (%struct.AVOptionRanges**, i8*, i8*, i32)* null, %struct.AVClass* (i8**)* null }, align 8
@.str.1 = private unnamed_addr constant [40 x i8] c"ff_tempfile: Cannot allocate file name\0A\00", align 1
@.str.2 = private unnamed_addr constant [14 x i8] c"/tmp/%sXXXXXX\00", align 1
@.str.3 = private unnamed_addr constant [44 x i8] c"ff_tempfile: Cannot open temporary file %s\0A\00", align 1
@.str.4 = private unnamed_addr constant [9 x i8] c"TEMPFILE\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @avpriv_open(i8* nocapture readonly, i32, ...) local_unnamed_addr #0 {
  %3 = alloca [1 x %struct.__va_list_tag], align 16
  %4 = bitcast [1 x %struct.__va_list_tag]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %4) #2
  %5 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %3, i64 0, i64 0, i32 0
  %6 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %3, i64 0, i64 0, i32 2
  %7 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %3, i64 0, i64 0, i32 3
  %8 = bitcast [1 x %struct.__va_list_tag]* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %8, i8 -86, i64 24, i1 false)
  call void @llvm.va_start(i8* nonnull %4)
  %9 = and i32 %1, 64
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %26, label %11

11:                                               ; preds = %2
  %12 = load i32, i32* %5, align 16
  %13 = icmp ult i32 %12, 41
  br i1 %13, label %14, label %19

14:                                               ; preds = %11
  %15 = load i8*, i8** %7, align 16
  %16 = sext i32 %12 to i64
  %17 = getelementptr i8, i8* %15, i64 %16
  %18 = add nuw nsw i32 %12, 8
  store i32 %18, i32* %5, align 16
  br label %22

19:                                               ; preds = %11
  %20 = load i8*, i8** %6, align 8
  %21 = getelementptr i8, i8* %20, i64 8
  store i8* %21, i8** %6, align 8
  br label %22

22:                                               ; preds = %19, %14
  %23 = phi i8* [ %17, %14 ], [ %20, %19 ]
  %24 = bitcast i8* %23 to i32*
  %25 = load i32, i32* %24, align 4
  br label %26

26:                                               ; preds = %2, %22
  %27 = phi i32 [ %25, %22 ], [ 0, %2 ]
  call void @llvm.va_end(i8* nonnull %4)
  %28 = or i32 %1, 524288
  %29 = call i32 (i8*, i32, ...) @open64(i8* %0, i32 %28, i32 %27) #2
  %30 = icmp eq i32 %29, -1
  br i1 %30, label %35, label %31

31:                                               ; preds = %26
  %32 = call i32 (i32, i32, ...) @fcntl(i32 %29, i32 2, i32 1) #2
  %33 = icmp eq i32 %32, -1
  br i1 %33, label %34, label %35

34:                                               ; preds = %31
  call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 48, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str, i64 0, i64 0)) #2
  br label %35

35:                                               ; preds = %26, %31, %34
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %4) #2
  ret i32 %29
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind
declare void @llvm.va_start(i8*) #2

; Function Attrs: nounwind
declare void @llvm.va_end(i8*) #2

; Function Attrs: nofree
declare i32 @open64(i8* nocapture readonly, i32, ...) local_unnamed_addr #3

declare i32 @fcntl(i32, i32, ...) local_unnamed_addr #4

declare void @av_log(i8*, i32, i8*, ...) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @avpriv_tempfile(i8*, i8**, i32, i8*) local_unnamed_addr #0 {
  %5 = alloca %struct.FileLogContext, align 8
  %6 = bitcast %struct.FileLogContext* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %6) #2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 -86, i64 16, i1 false)
  %7 = getelementptr inbounds %struct.FileLogContext, %struct.FileLogContext* %5, i64 0, i32 0
  store %struct.AVClass* @file_log_ctx_class, %struct.AVClass** %7, align 8
  %8 = getelementptr inbounds %struct.FileLogContext, %struct.FileLogContext* %5, i64 0, i32 1
  store i32 %2, i32* %8, align 8
  %9 = getelementptr inbounds %struct.FileLogContext, %struct.FileLogContext* %5, i64 0, i32 2
  store i8* %3, i8** %9, align 8
  %10 = tail call i64 @strlen(i8* %0) #8
  %11 = add i64 %10, 12
  %12 = tail call noalias i8* @av_malloc(i64 %11) #2
  store i8* %12, i8** %1, align 8
  %13 = icmp eq i8* %12, null
  br i1 %13, label %14, label %15

14:                                               ; preds = %4
  call void (i8*, i32, i8*, ...) @av_log(i8* nonnull %6, i32 16, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.1, i64 0, i64 0)) #2
  br label %26

15:                                               ; preds = %4
  %16 = tail call i32 (i8*, i64, i8*, ...) @snprintf(i8* nonnull %12, i64 %11, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0), i8* %0) #2
  %17 = load i8*, i8** %1, align 8
  %18 = tail call i32 @mkstemp64(i8* %17) #2
  %19 = icmp slt i32 %18, 0
  br i1 %19, label %20, label %26

20:                                               ; preds = %15
  %21 = tail call i32* @__errno_location() #9
  %22 = load i32, i32* %21, align 4
  %23 = sub nsw i32 0, %22
  %24 = load i8*, i8** %1, align 8
  call void (i8*, i32, i8*, ...) @av_log(i8* nonnull %6, i32 16, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.3, i64 0, i64 0), i8* %24) #2
  %25 = bitcast i8** %1 to i8*
  call void @av_freep(i8* %25) #2
  br label %26

26:                                               ; preds = %15, %20, %14
  %27 = phi i32 [ %23, %20 ], [ -12, %14 ], [ %18, %15 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %6) #2
  ret i32 %27
}

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #5

declare noalias i8* @av_malloc(i64) local_unnamed_addr #4

; Function Attrs: nofree nounwind
declare i32 @snprintf(i8* nocapture, i64, i8* nocapture readonly, ...) local_unnamed_addr #6

declare i32 @mkstemp64(i8*) local_unnamed_addr #4

; Function Attrs: nounwind readnone
declare i32* @__errno_location() local_unnamed_addr #7

declare void @av_freep(i8*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden noalias %struct._IO_FILE* @av_fopen_utf8(i8* nocapture readonly, i8* nocapture readonly) local_unnamed_addr #0 {
  %3 = load i8, i8* %1, align 1
  %4 = sext i8 %3 to i32
  switch i32 %4, label %9 [
    i32 114, label %6
    i32 119, label %5
    i32 97, label %8
  ]

5:                                                ; preds = %2
  br label %6

6:                                                ; preds = %2, %8, %5
  %7 = phi i32 [ 0, %2 ], [ 577, %5 ], [ 1089, %8 ]
  br label %18

8:                                                ; preds = %2
  br label %6

9:                                                ; preds = %2
  %10 = tail call i32* @__errno_location() #9
  store i32 22, i32* %10, align 4
  br label %28

11:                                               ; preds = %18, %11
  %12 = phi i8* [ %13, %11 ], [ %20, %18 ]
  %13 = getelementptr inbounds i8, i8* %12, i64 1
  %14 = load i8, i8* %13, align 1
  switch i8 %14, label %21 [
    i8 0, label %23
    i8 43, label %15
    i8 98, label %11
  ]

15:                                               ; preds = %11
  %16 = and i32 %19, -4
  %17 = or i32 %16, 2
  br label %18

18:                                               ; preds = %6, %15
  %19 = phi i32 [ %7, %6 ], [ %17, %15 ]
  %20 = phi i8* [ %1, %6 ], [ %13, %15 ]
  br label %11

21:                                               ; preds = %11
  %22 = tail call i32* @__errno_location() #9
  store i32 22, i32* %22, align 4
  br label %28

23:                                               ; preds = %11
  %24 = tail call i32 (i8*, i32, ...) @avpriv_open(i8* %0, i32 %19, i32 438)
  %25 = icmp eq i32 %24, -1
  br i1 %25, label %28, label %26

26:                                               ; preds = %23
  %27 = tail call %struct._IO_FILE* @fdopen(i32 %24, i8* %1) #2
  br label %28

28:                                               ; preds = %23, %26, %21, %9
  %29 = phi %struct._IO_FILE* [ null, %9 ], [ null, %21 ], [ %27, %26 ], [ null, %23 ]
  ret %struct._IO_FILE* %29
}

; Function Attrs: nofree nounwind
declare noalias %struct._IO_FILE* @fdopen(i32, i8* nocapture readonly) local_unnamed_addr #6

declare i8* @av_default_item_name(i8*) #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind }
attributes #3 = { nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind readonly }
attributes #9 = { nounwind readnone }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
