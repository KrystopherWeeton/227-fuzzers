; ModuleID = '../../third_party/boringssl/src/crypto/blake2/blake2.c'
source_filename = "../../third_party/boringssl/src/crypto/blake2/blake2.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.blake2b_state_st = type { [8 x i64], i64, i64, %union.anon, i64 }
%union.anon = type { [16 x i64] }

@kIV = internal unnamed_addr constant [8 x i64] [i64 7640891576956012808, i64 -4942790177534073029, i64 4354685564936845355, i64 -6534734903238641935, i64 5840696475078001361, i64 -7276294671716946913, i64 2270897969802886507, i64 6620516959819538809], align 16
@kSigma = internal unnamed_addr constant [160 x i8] c"\00\01\02\03\04\05\06\07\08\09\0A\0B\0C\0D\0E\0F\0E\0A\04\08\09\0F\0D\06\01\0C\00\02\0B\07\05\03\0B\08\0C\00\05\02\0F\0D\0A\0E\03\06\07\01\09\04\07\09\03\01\0D\0C\0B\0E\02\06\05\0A\04\00\0F\08\09\00\05\07\02\04\0A\0F\0E\01\0B\0C\06\08\03\0D\02\0C\06\0A\00\0B\08\03\04\0D\07\05\0F\0E\01\09\0C\05\01\0F\0E\0D\04\0A\00\07\06\03\09\02\08\0B\0D\0B\07\0E\0C\01\03\09\05\00\0F\04\08\06\02\0A\06\0F\0E\09\0B\03\00\08\0C\02\0D\07\01\04\0A\05\0A\02\08\04\07\06\01\05\0F\0B\09\0E\03\0C\0D\00", align 16

; Function Attrs: nounwind ssp uwtable
define hidden void @BLAKE2B256_Init(%struct.blake2b_state_st* nocapture) local_unnamed_addr #0 {
  %2 = bitcast %struct.blake2b_state_st* %0 to i8*
  %3 = getelementptr %struct.blake2b_state_st, %struct.blake2b_state_st* %0, i64 0, i32 1
  %4 = bitcast i64* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 1 %4, i8 0, i64 152, i1 false)
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %2, i8* align 16 bitcast ([8 x i64]* @kIV to i8*), i64 64, i1 false) #2
  %5 = getelementptr inbounds %struct.blake2b_state_st, %struct.blake2b_state_st* %0, i64 0, i32 0, i64 0
  store i64 7640891576939301160, i64* %5, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @BLAKE2B256_Update(%struct.blake2b_state_st* nocapture, i8* nocapture readonly, i64) local_unnamed_addr #0 {
  %4 = alloca [16 x i64], align 16
  %5 = getelementptr inbounds %struct.blake2b_state_st, %struct.blake2b_state_st* %0, i64 0, i32 4
  %6 = load i64, i64* %5, align 8
  %7 = sub i64 128, %6
  %8 = icmp ugt i64 %7, %2
  %9 = select i1 %8, i64 %2, i64 %7
  %10 = getelementptr inbounds %struct.blake2b_state_st, %struct.blake2b_state_st* %0, i64 0, i32 3
  %11 = icmp eq i64 %9, 0
  br i1 %11, label %16, label %12

12:                                               ; preds = %3
  %13 = bitcast %union.anon* %10 to [128 x i8]*
  %14 = getelementptr inbounds [128 x i8], [128 x i8]* %13, i64 0, i64 %6
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %14, i8* align 1 %1, i64 %9, i1 false) #2
  %15 = load i64, i64* %5, align 8
  br label %16

16:                                               ; preds = %3, %12
  %17 = phi i64 [ %6, %3 ], [ %15, %12 ]
  %18 = add i64 %17, %9
  store i64 %18, i64* %5, align 8
  %19 = sub i64 %2, %9
  %20 = icmp eq i64 %19, 0
  br i1 %20, label %45, label %21

21:                                               ; preds = %16
  %22 = getelementptr inbounds i8, i8* %1, i64 %9
  %23 = getelementptr inbounds %union.anon, %union.anon* %10, i64 0, i32 0, i64 0
  tail call fastcc void @blake2b_transform(%struct.blake2b_state_st* %0, i64* %23, i64 128, i32 0)
  store i64 0, i64* %5, align 8
  %24 = icmp ugt i64 %19, 128
  br i1 %24, label %25, label %41

25:                                               ; preds = %21
  %26 = bitcast [16 x i64]* %4 to i8*
  %27 = getelementptr inbounds [16 x i64], [16 x i64]* %4, i64 0, i64 0
  %28 = add i64 %2, -128
  %29 = add i64 %2, -129
  %30 = sub i64 %29, %9
  %31 = and i64 %30, -128
  br label %32

32:                                               ; preds = %25, %32
  %33 = phi i8* [ %22, %25 ], [ %35, %32 ]
  %34 = phi i64 [ %19, %25 ], [ %36, %32 ]
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %26) #2
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %26, i8* align 1 %33, i64 128, i1 false) #2
  call fastcc void @blake2b_transform(%struct.blake2b_state_st* %0, i64* nonnull %27, i64 128, i32 0)
  %35 = getelementptr inbounds i8, i8* %33, i64 128
  %36 = add i64 %34, -128
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %26) #2
  %37 = icmp ugt i64 %36, 128
  br i1 %37, label %32, label %38

38:                                               ; preds = %32
  %39 = sub i64 %28, %9
  %40 = sub i64 %39, %31
  br label %41

41:                                               ; preds = %38, %21
  %42 = phi i64 [ %19, %21 ], [ %40, %38 ]
  %43 = phi i8* [ %22, %21 ], [ %35, %38 ]
  %44 = bitcast %union.anon* %10 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %44, i8* align 1 %43, i64 %42, i1 false) #2
  store i64 %42, i64* %5, align 8
  br label %45

45:                                               ; preds = %16, %41
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @blake2b_transform(%struct.blake2b_state_st* nocapture, i64* nocapture readonly, i64, i32) unnamed_addr #0 {
  %5 = alloca [16 x i64], align 16
  %6 = bitcast [16 x i64]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %6) #2
  %7 = getelementptr inbounds [16 x i64], [16 x i64]* %5, i64 0, i64 0
  %8 = bitcast %struct.blake2b_state_st* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %6, i8* align 1 %8, i64 64, i1 false) #2
  %9 = getelementptr inbounds [16 x i64], [16 x i64]* %5, i64 0, i64 8
  %10 = bitcast i64* %9 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %10, i8* align 16 bitcast ([8 x i64]* @kIV to i8*), i64 64, i1 false) #2
  %11 = getelementptr inbounds %struct.blake2b_state_st, %struct.blake2b_state_st* %0, i64 0, i32 1
  %12 = load i64, i64* %11, align 8
  %13 = add i64 %12, %2
  store i64 %13, i64* %11, align 8
  %14 = icmp ult i64 %13, %2
  %15 = getelementptr inbounds %struct.blake2b_state_st, %struct.blake2b_state_st* %0, i64 0, i32 2
  %16 = load i64, i64* %15, align 8
  br i1 %14, label %17, label %19

17:                                               ; preds = %4
  %18 = add i64 %16, 1
  store i64 %18, i64* %15, align 8
  br label %19

19:                                               ; preds = %4, %17
  %20 = phi i64 [ %18, %17 ], [ %16, %4 ]
  %21 = getelementptr inbounds [16 x i64], [16 x i64]* %5, i64 0, i64 12
  %22 = xor i64 %13, 5840696475078001361
  store i64 %22, i64* %21, align 16
  %23 = getelementptr inbounds [16 x i64], [16 x i64]* %5, i64 0, i64 13
  %24 = xor i64 %20, -7276294671716946913
  store i64 %24, i64* %23, align 8
  %25 = icmp eq i32 %3, 0
  br i1 %25, label %28, label %26

26:                                               ; preds = %19
  %27 = getelementptr inbounds [16 x i64], [16 x i64]* %5, i64 0, i64 14
  store i64 -2270897969802886508, i64* %27, align 16
  br label %28

28:                                               ; preds = %19, %26
  %29 = phi i64 [ 2270897969802886507, %19 ], [ -2270897969802886508, %26 ]
  %30 = getelementptr inbounds [16 x i64], [16 x i64]* %5, i64 0, i64 4
  %31 = getelementptr inbounds [16 x i64], [16 x i64]* %5, i64 0, i64 1
  %32 = getelementptr inbounds [16 x i64], [16 x i64]* %5, i64 0, i64 5
  %33 = getelementptr inbounds [16 x i64], [16 x i64]* %5, i64 0, i64 2
  %34 = getelementptr inbounds [16 x i64], [16 x i64]* %5, i64 0, i64 6
  %35 = getelementptr inbounds [16 x i64], [16 x i64]* %5, i64 0, i64 3
  %36 = getelementptr inbounds [16 x i64], [16 x i64]* %5, i64 0, i64 7
  %37 = load i64, i64* %7, align 16
  %38 = load i64, i64* %30, align 16
  %39 = load i64, i64* %31, align 8
  %40 = load i64, i64* %32, align 8
  %41 = load i64, i64* %33, align 16
  %42 = load i64, i64* %34, align 16
  %43 = load i64, i64* %35, align 8
  %44 = load i64, i64* %36, align 8
  br label %78

45:                                               ; preds = %78
  %46 = getelementptr inbounds %struct.blake2b_state_st, %struct.blake2b_state_st* %0, i64 0, i32 0, i64 0
  %47 = load i64, i64* %46, align 8
  %48 = xor i64 %47, %250
  %49 = xor i64 %319, %48
  store i64 %49, i64* %46, align 8
  %50 = getelementptr inbounds %struct.blake2b_state_st, %struct.blake2b_state_st* %0, i64 0, i32 0, i64 1
  %51 = load i64, i64* %50, align 8
  %52 = xor i64 %51, %282
  %53 = xor i64 %351, %52
  store i64 %53, i64* %50, align 8
  %54 = getelementptr inbounds %struct.blake2b_state_st, %struct.blake2b_state_st* %0, i64 0, i32 0, i64 2
  %55 = load i64, i64* %54, align 8
  %56 = xor i64 %55, %314
  %57 = xor i64 %255, %56
  store i64 %57, i64* %54, align 8
  %58 = getelementptr inbounds %struct.blake2b_state_st, %struct.blake2b_state_st* %0, i64 0, i32 0, i64 3
  %59 = load i64, i64* %58, align 8
  %60 = xor i64 %59, %346
  %61 = xor i64 %287, %60
  store i64 %61, i64* %58, align 8
  %62 = getelementptr inbounds %struct.blake2b_state_st, %struct.blake2b_state_st* %0, i64 0, i32 0, i64 4
  %63 = load i64, i64* %62, align 8
  %64 = xor i64 %63, %355
  %65 = xor i64 %286, %64
  store i64 %65, i64* %62, align 8
  %66 = getelementptr inbounds %struct.blake2b_state_st, %struct.blake2b_state_st* %0, i64 0, i32 0, i64 5
  %67 = load i64, i64* %66, align 8
  %68 = xor i64 %67, %259
  %69 = xor i64 %318, %68
  store i64 %69, i64* %66, align 8
  %70 = getelementptr inbounds %struct.blake2b_state_st, %struct.blake2b_state_st* %0, i64 0, i32 0, i64 6
  %71 = load i64, i64* %70, align 8
  %72 = xor i64 %71, %291
  %73 = xor i64 %350, %72
  store i64 %73, i64* %70, align 8
  %74 = getelementptr inbounds %struct.blake2b_state_st, %struct.blake2b_state_st* %0, i64 0, i32 0, i64 7
  %75 = load i64, i64* %74, align 8
  %76 = xor i64 %75, %323
  %77 = xor i64 %254, %76
  store i64 %77, i64* %74, align 8
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %6) #2
  ret void

78:                                               ; preds = %78, %28
  %79 = phi i64 [ -6534734903238641935, %28 ], [ %287, %78 ]
  %80 = phi i64 [ 6620516959819538809, %28 ], [ %254, %78 ]
  %81 = phi i64 [ %44, %28 ], [ %323, %78 ]
  %82 = phi i64 [ %43, %28 ], [ %346, %78 ]
  %83 = phi i64 [ 4354685564936845355, %28 ], [ %255, %78 ]
  %84 = phi i64 [ %29, %28 ], [ %350, %78 ]
  %85 = phi i64 [ %42, %28 ], [ %291, %78 ]
  %86 = phi i64 [ %41, %28 ], [ %314, %78 ]
  %87 = phi i64 [ -4942790177534073029, %28 ], [ %351, %78 ]
  %88 = phi i64 [ %24, %28 ], [ %318, %78 ]
  %89 = phi i64 [ %40, %28 ], [ %259, %78 ]
  %90 = phi i64 [ %39, %28 ], [ %282, %78 ]
  %91 = phi i64 [ 7640891576956012808, %28 ], [ %319, %78 ]
  %92 = phi i64 [ %22, %28 ], [ %286, %78 ]
  %93 = phi i64 [ %38, %28 ], [ %355, %78 ]
  %94 = phi i64 [ %37, %28 ], [ %250, %78 ]
  %95 = phi i32 [ 0, %28 ], [ %356, %78 ]
  %96 = trunc i32 %95 to i8
  %97 = urem i8 %96, 10
  %98 = shl nuw i8 %97, 4
  %99 = zext i8 %98 to i64
  %100 = getelementptr inbounds [160 x i8], [160 x i8]* @kSigma, i64 0, i64 %99
  %101 = load i8, i8* %100, align 16
  %102 = zext i8 %101 to i64
  %103 = getelementptr inbounds i64, i64* %1, i64 %102
  %104 = load i64, i64* %103, align 8
  %105 = getelementptr inbounds i8, i8* %100, i64 1
  %106 = load i8, i8* %105, align 1
  %107 = zext i8 %106 to i64
  %108 = getelementptr inbounds i64, i64* %1, i64 %107
  %109 = load i64, i64* %108, align 8
  %110 = add i64 %94, %104
  %111 = add i64 %110, %93
  %112 = xor i64 %92, %111
  %113 = lshr i64 %112, 32
  %114 = shl i64 %112, 32
  %115 = or i64 %113, %114
  %116 = add i64 %115, %91
  %117 = xor i64 %116, %93
  %118 = lshr i64 %117, 24
  %119 = shl i64 %117, 40
  %120 = or i64 %118, %119
  %121 = add i64 %111, %109
  %122 = add i64 %121, %120
  %123 = xor i64 %122, %115
  %124 = lshr i64 %123, 16
  %125 = shl i64 %123, 48
  %126 = or i64 %124, %125
  %127 = add i64 %126, %116
  %128 = xor i64 %127, %120
  %129 = lshr i64 %128, 63
  %130 = shl i64 %128, 1
  %131 = or i64 %129, %130
  %132 = getelementptr inbounds i8, i8* %100, i64 2
  %133 = load i8, i8* %132, align 2
  %134 = zext i8 %133 to i64
  %135 = getelementptr inbounds i64, i64* %1, i64 %134
  %136 = load i64, i64* %135, align 8
  %137 = getelementptr inbounds i8, i8* %100, i64 3
  %138 = load i8, i8* %137, align 1
  %139 = zext i8 %138 to i64
  %140 = getelementptr inbounds i64, i64* %1, i64 %139
  %141 = load i64, i64* %140, align 8
  %142 = add i64 %90, %136
  %143 = add i64 %142, %89
  %144 = xor i64 %88, %143
  %145 = lshr i64 %144, 32
  %146 = shl i64 %144, 32
  %147 = or i64 %145, %146
  %148 = add i64 %147, %87
  %149 = xor i64 %148, %89
  %150 = lshr i64 %149, 24
  %151 = shl i64 %149, 40
  %152 = or i64 %150, %151
  %153 = add i64 %143, %141
  %154 = add i64 %153, %152
  %155 = xor i64 %154, %147
  %156 = lshr i64 %155, 16
  %157 = shl i64 %155, 48
  %158 = or i64 %156, %157
  %159 = add i64 %158, %148
  %160 = xor i64 %159, %152
  %161 = lshr i64 %160, 63
  %162 = shl i64 %160, 1
  %163 = or i64 %161, %162
  %164 = getelementptr inbounds i8, i8* %100, i64 4
  %165 = load i8, i8* %164, align 4
  %166 = zext i8 %165 to i64
  %167 = getelementptr inbounds i64, i64* %1, i64 %166
  %168 = load i64, i64* %167, align 8
  %169 = getelementptr inbounds i8, i8* %100, i64 5
  %170 = load i8, i8* %169, align 1
  %171 = zext i8 %170 to i64
  %172 = getelementptr inbounds i64, i64* %1, i64 %171
  %173 = load i64, i64* %172, align 8
  %174 = add i64 %86, %168
  %175 = add i64 %174, %85
  %176 = xor i64 %84, %175
  %177 = lshr i64 %176, 32
  %178 = shl i64 %176, 32
  %179 = or i64 %177, %178
  %180 = add i64 %179, %83
  %181 = xor i64 %180, %85
  %182 = lshr i64 %181, 24
  %183 = shl i64 %181, 40
  %184 = or i64 %182, %183
  %185 = add i64 %175, %173
  %186 = add i64 %185, %184
  %187 = xor i64 %186, %179
  %188 = lshr i64 %187, 16
  %189 = shl i64 %187, 48
  %190 = or i64 %188, %189
  %191 = add i64 %190, %180
  %192 = xor i64 %191, %184
  %193 = lshr i64 %192, 63
  %194 = shl i64 %192, 1
  %195 = or i64 %193, %194
  %196 = getelementptr inbounds i8, i8* %100, i64 6
  %197 = load i8, i8* %196, align 2
  %198 = zext i8 %197 to i64
  %199 = getelementptr inbounds i64, i64* %1, i64 %198
  %200 = load i64, i64* %199, align 8
  %201 = getelementptr inbounds i8, i8* %100, i64 7
  %202 = load i8, i8* %201, align 1
  %203 = zext i8 %202 to i64
  %204 = getelementptr inbounds i64, i64* %1, i64 %203
  %205 = load i64, i64* %204, align 8
  %206 = add i64 %82, %200
  %207 = add i64 %206, %81
  %208 = xor i64 %80, %207
  %209 = lshr i64 %208, 32
  %210 = shl i64 %208, 32
  %211 = or i64 %209, %210
  %212 = add i64 %211, %79
  %213 = xor i64 %212, %81
  %214 = lshr i64 %213, 24
  %215 = shl i64 %213, 40
  %216 = or i64 %214, %215
  %217 = add i64 %207, %205
  %218 = add i64 %217, %216
  %219 = xor i64 %218, %211
  %220 = lshr i64 %219, 16
  %221 = shl i64 %219, 48
  %222 = or i64 %220, %221
  %223 = add i64 %222, %212
  %224 = xor i64 %223, %216
  %225 = lshr i64 %224, 63
  %226 = shl i64 %224, 1
  %227 = or i64 %225, %226
  %228 = getelementptr inbounds i8, i8* %100, i64 8
  %229 = load i8, i8* %228, align 8
  %230 = zext i8 %229 to i64
  %231 = getelementptr inbounds i64, i64* %1, i64 %230
  %232 = load i64, i64* %231, align 8
  %233 = getelementptr inbounds i8, i8* %100, i64 9
  %234 = load i8, i8* %233, align 1
  %235 = zext i8 %234 to i64
  %236 = getelementptr inbounds i64, i64* %1, i64 %235
  %237 = load i64, i64* %236, align 8
  %238 = add i64 %163, %122
  %239 = add i64 %238, %232
  %240 = xor i64 %239, %222
  %241 = lshr i64 %240, 32
  %242 = shl i64 %240, 32
  %243 = or i64 %241, %242
  %244 = add i64 %243, %191
  %245 = xor i64 %244, %163
  %246 = lshr i64 %245, 24
  %247 = shl i64 %245, 40
  %248 = or i64 %246, %247
  %249 = add i64 %239, %237
  %250 = add i64 %249, %248
  %251 = xor i64 %250, %243
  %252 = lshr i64 %251, 16
  %253 = shl i64 %251, 48
  %254 = or i64 %252, %253
  %255 = add i64 %254, %244
  %256 = xor i64 %255, %248
  %257 = lshr i64 %256, 63
  %258 = shl i64 %256, 1
  %259 = or i64 %257, %258
  %260 = getelementptr inbounds i8, i8* %100, i64 10
  %261 = load i8, i8* %260, align 2
  %262 = zext i8 %261 to i64
  %263 = getelementptr inbounds i64, i64* %1, i64 %262
  %264 = load i64, i64* %263, align 8
  %265 = getelementptr inbounds i8, i8* %100, i64 11
  %266 = load i8, i8* %265, align 1
  %267 = zext i8 %266 to i64
  %268 = getelementptr inbounds i64, i64* %1, i64 %267
  %269 = load i64, i64* %268, align 8
  %270 = add i64 %195, %154
  %271 = add i64 %270, %264
  %272 = xor i64 %271, %126
  %273 = lshr i64 %272, 32
  %274 = shl i64 %272, 32
  %275 = or i64 %273, %274
  %276 = add i64 %275, %223
  %277 = xor i64 %276, %195
  %278 = lshr i64 %277, 24
  %279 = shl i64 %277, 40
  %280 = or i64 %278, %279
  %281 = add i64 %271, %269
  %282 = add i64 %281, %280
  %283 = xor i64 %282, %275
  %284 = lshr i64 %283, 16
  %285 = shl i64 %283, 48
  %286 = or i64 %284, %285
  %287 = add i64 %286, %276
  %288 = xor i64 %287, %280
  %289 = lshr i64 %288, 63
  %290 = shl i64 %288, 1
  %291 = or i64 %289, %290
  %292 = getelementptr inbounds i8, i8* %100, i64 12
  %293 = load i8, i8* %292, align 4
  %294 = zext i8 %293 to i64
  %295 = getelementptr inbounds i64, i64* %1, i64 %294
  %296 = load i64, i64* %295, align 8
  %297 = getelementptr inbounds i8, i8* %100, i64 13
  %298 = load i8, i8* %297, align 1
  %299 = zext i8 %298 to i64
  %300 = getelementptr inbounds i64, i64* %1, i64 %299
  %301 = load i64, i64* %300, align 8
  %302 = add i64 %227, %186
  %303 = add i64 %302, %296
  %304 = xor i64 %303, %158
  %305 = lshr i64 %304, 32
  %306 = shl i64 %304, 32
  %307 = or i64 %305, %306
  %308 = add i64 %307, %127
  %309 = xor i64 %308, %227
  %310 = lshr i64 %309, 24
  %311 = shl i64 %309, 40
  %312 = or i64 %310, %311
  %313 = add i64 %303, %301
  %314 = add i64 %313, %312
  %315 = xor i64 %314, %307
  %316 = lshr i64 %315, 16
  %317 = shl i64 %315, 48
  %318 = or i64 %316, %317
  %319 = add i64 %318, %308
  %320 = xor i64 %319, %312
  %321 = lshr i64 %320, 63
  %322 = shl i64 %320, 1
  %323 = or i64 %321, %322
  %324 = getelementptr inbounds i8, i8* %100, i64 14
  %325 = load i8, i8* %324, align 2
  %326 = zext i8 %325 to i64
  %327 = getelementptr inbounds i64, i64* %1, i64 %326
  %328 = load i64, i64* %327, align 8
  %329 = getelementptr inbounds i8, i8* %100, i64 15
  %330 = load i8, i8* %329, align 1
  %331 = zext i8 %330 to i64
  %332 = getelementptr inbounds i64, i64* %1, i64 %331
  %333 = load i64, i64* %332, align 8
  %334 = add i64 %218, %131
  %335 = add i64 %334, %328
  %336 = xor i64 %335, %190
  %337 = lshr i64 %336, 32
  %338 = shl i64 %336, 32
  %339 = or i64 %337, %338
  %340 = add i64 %339, %159
  %341 = xor i64 %340, %131
  %342 = lshr i64 %341, 24
  %343 = shl i64 %341, 40
  %344 = or i64 %342, %343
  %345 = add i64 %335, %333
  %346 = add i64 %345, %344
  %347 = xor i64 %346, %339
  %348 = lshr i64 %347, 16
  %349 = shl i64 %347, 48
  %350 = or i64 %348, %349
  %351 = add i64 %350, %340
  %352 = xor i64 %351, %344
  %353 = lshr i64 %352, 63
  %354 = shl i64 %352, 1
  %355 = or i64 %353, %354
  %356 = add nuw nsw i32 %95, 1
  %357 = icmp eq i32 %356, 12
  br i1 %357, label %45, label %78
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @BLAKE2B256_Final(i8* nocapture, %struct.blake2b_state_st* nocapture) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.blake2b_state_st, %struct.blake2b_state_st* %1, i64 0, i32 3
  %4 = getelementptr inbounds %struct.blake2b_state_st, %struct.blake2b_state_st* %1, i64 0, i32 4
  %5 = load i64, i64* %4, align 8
  %6 = sub i64 128, %5
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %12, label %8

8:                                                ; preds = %2
  %9 = bitcast %union.anon* %3 to [128 x i8]*
  %10 = getelementptr inbounds [128 x i8], [128 x i8]* %9, i64 0, i64 %5
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %10, i8 0, i64 %6, i1 false) #2
  %11 = load i64, i64* %4, align 8
  br label %12

12:                                               ; preds = %2, %8
  %13 = phi i64 [ %5, %2 ], [ %11, %8 ]
  %14 = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0, i64 0
  tail call fastcc void @blake2b_transform(%struct.blake2b_state_st* %1, i64* %14, i64 %13, i32 1)
  %15 = bitcast %struct.blake2b_state_st* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %0, i8* align 8 %15, i64 32, i1 false)
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @BLAKE2B256(i8* nocapture readonly, i64, i8* nocapture) local_unnamed_addr #0 {
  %4 = alloca [16 x i64], align 16
  %5 = alloca %struct.blake2b_state_st, align 8
  %6 = bitcast %struct.blake2b_state_st* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 216, i8* nonnull %6) #2
  %7 = getelementptr inbounds %struct.blake2b_state_st, %struct.blake2b_state_st* %5, i64 0, i32 1
  %8 = bitcast i64* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %8, i8 0, i64 152, i1 false) #2
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %6, i8* align 16 bitcast ([8 x i64]* @kIV to i8*), i64 64, i1 false) #2
  %9 = getelementptr inbounds %struct.blake2b_state_st, %struct.blake2b_state_st* %5, i64 0, i32 0, i64 0
  store i64 7640891576939301160, i64* %9, align 8
  %10 = getelementptr inbounds %struct.blake2b_state_st, %struct.blake2b_state_st* %5, i64 0, i32 4
  %11 = icmp ult i64 %1, 128
  %12 = select i1 %11, i64 %1, i64 128
  %13 = getelementptr inbounds %struct.blake2b_state_st, %struct.blake2b_state_st* %5, i64 0, i32 3
  %14 = icmp eq i64 %12, 0
  br i1 %14, label %18, label %15

15:                                               ; preds = %3
  %16 = bitcast %union.anon* %13 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %16, i8* align 1 %0, i64 %12, i1 false) #2
  %17 = load i64, i64* %10, align 8
  br label %18

18:                                               ; preds = %15, %3
  %19 = phi i64 [ 0, %3 ], [ %17, %15 ]
  %20 = add i64 %19, %12
  store i64 %20, i64* %10, align 8
  %21 = sub i64 %1, %12
  %22 = icmp eq i64 %21, 0
  br i1 %22, label %47, label %23

23:                                               ; preds = %18
  %24 = getelementptr inbounds i8, i8* %0, i64 %12
  %25 = getelementptr inbounds %union.anon, %union.anon* %13, i64 0, i32 0, i64 0
  call fastcc void @blake2b_transform(%struct.blake2b_state_st* nonnull %5, i64* %25, i64 128, i32 0) #2
  store i64 0, i64* %10, align 8
  %26 = icmp ugt i64 %21, 128
  br i1 %26, label %27, label %43

27:                                               ; preds = %23
  %28 = bitcast [16 x i64]* %4 to i8*
  %29 = getelementptr inbounds [16 x i64], [16 x i64]* %4, i64 0, i64 0
  %30 = add i64 %1, -129
  %31 = sub i64 %30, %12
  br label %32

32:                                               ; preds = %32, %27
  %33 = phi i8* [ %24, %27 ], [ %35, %32 ]
  %34 = phi i64 [ %21, %27 ], [ %36, %32 ]
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %28) #2
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %28, i8* align 1 %33, i64 128, i1 false) #2
  call fastcc void @blake2b_transform(%struct.blake2b_state_st* nonnull %5, i64* nonnull %29, i64 128, i32 0) #2
  %35 = getelementptr inbounds i8, i8* %33, i64 128
  %36 = add i64 %34, -128
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %28) #2
  %37 = icmp ugt i64 %36, 128
  br i1 %37, label %32, label %38

38:                                               ; preds = %32
  %39 = add i64 %1, -128
  %40 = and i64 %31, -128
  %41 = sub i64 %39, %12
  %42 = sub i64 %41, %40
  br label %43

43:                                               ; preds = %38, %23
  %44 = phi i64 [ %21, %23 ], [ %42, %38 ]
  %45 = phi i8* [ %24, %23 ], [ %35, %38 ]
  %46 = bitcast %union.anon* %13 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %46, i8* align 1 %45, i64 %44, i1 false) #2
  store i64 %44, i64* %10, align 8
  br label %47

47:                                               ; preds = %18, %43
  %48 = phi i64 [ %20, %18 ], [ %44, %43 ]
  %49 = sub i64 128, %48
  %50 = icmp eq i64 %49, 0
  br i1 %50, label %55, label %51

51:                                               ; preds = %47
  %52 = bitcast %union.anon* %13 to [128 x i8]*
  %53 = getelementptr inbounds [128 x i8], [128 x i8]* %52, i64 0, i64 %48
  call void @llvm.memset.p0i8.i64(i8* align 1 %53, i8 0, i64 %49, i1 false) #2
  %54 = load i64, i64* %10, align 8
  br label %55

55:                                               ; preds = %47, %51
  %56 = phi i64 [ %48, %47 ], [ %54, %51 ]
  %57 = getelementptr inbounds %union.anon, %union.anon* %13, i64 0, i32 0, i64 0
  call fastcc void @blake2b_transform(%struct.blake2b_state_st* nonnull %5, i64* %57, i64 %56, i32 1) #2
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %2, i8* nonnull align 8 %6, i64 32, i1 false) #2
  call void @llvm.lifetime.end.p0i8(i64 216, i8* nonnull %6) #2
  ret void
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
