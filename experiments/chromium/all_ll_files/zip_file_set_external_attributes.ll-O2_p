; ModuleID = '../../third_party/libzip/src/lib/zip_file_set_external_attributes.c'
source_filename = "../../third_party/libzip/src/lib/zip_file_set_external_attributes.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.zip = type { %struct.zip_source*, i32, %struct.zip_error, i32, i32, i8*, %struct.zip_string*, %struct.zip_string*, i8, i64, i64, %struct.zip_entry*, i32, i32, %struct.zip_source**, %struct.zip_hash*, %struct.zip_progress* }
%struct.zip_source = type { %struct.zip_source*, %union.anon, i8*, %struct.zip_error, i64, i32, i32, i8, %struct.zip*, i32, i8, i8 }
%union.anon = type { i64 (i8*, i8*, i64, i32)* }
%struct.zip_error = type { i32, i32, i8* }
%struct.zip_string = type { i8*, i16, i32, i8*, i32 }
%struct.zip_entry = type { %struct.zip_dirent*, %struct.zip_dirent*, %struct.zip_source*, i8 }
%struct.zip_dirent = type { i32, i8, i8, i8, i16, i16, i16, i32, i64, i32, i64, i64, %struct.zip_string*, %struct.zip_extra_field*, %struct.zip_string*, i32, i16, i32, i64, i16, i16, i8* }
%struct.zip_extra_field = type { %struct.zip_extra_field*, i32, i16, i16, i8* }
%struct.zip_hash = type opaque
%struct.zip_progress = type opaque

; Function Attrs: nounwind ssp uwtable
define hidden i32 @zip_file_set_external_attributes(%struct.zip*, i64, i32, i8 zeroext, i32) local_unnamed_addr #0 {
  %6 = tail call %struct.zip_dirent* @_zip_get_dirent(%struct.zip* %0, i64 %1, i32 0, %struct.zip_error* null) #2
  %7 = icmp eq %struct.zip_dirent* %6, null
  br i1 %7, label %77, label %8

8:                                                ; preds = %5
  %9 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 4
  %10 = load i32, i32* %9, align 4
  %11 = and i32 %10, 2
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %15, label %13

13:                                               ; preds = %8
  %14 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 2
  tail call void @zip_error_set(%struct.zip_error* %14, i32 25, i32 0) #2
  br label %77

15:                                               ; preds = %8
  %16 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 11
  %17 = load %struct.zip_entry*, %struct.zip_entry** %16, align 8
  %18 = getelementptr inbounds %struct.zip_entry, %struct.zip_entry* %17, i64 %1, i32 0
  %19 = load %struct.zip_dirent*, %struct.zip_dirent** %18, align 8
  %20 = icmp eq %struct.zip_dirent* %19, null
  br i1 %20, label %28, label %21

21:                                               ; preds = %15
  %22 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %19, i64 0, i32 4
  %23 = load i16, i16* %22, align 8
  %24 = lshr i16 %23, 8
  %25 = zext i16 %24 to i32
  %26 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %19, i64 0, i32 17
  %27 = load i32, i32* %26, align 8
  br label %28

28:                                               ; preds = %15, %21
  %29 = phi i32 [ %25, %21 ], [ 3, %15 ]
  %30 = phi i32 [ %27, %21 ], [ -2118778880, %15 ]
  %31 = zext i8 %3 to i32
  %32 = icmp ne i32 %29, %31
  %33 = icmp ne i32 %30, %4
  %34 = or i1 %32, %33
  %35 = getelementptr inbounds %struct.zip_entry, %struct.zip_entry* %17, i64 %1, i32 1
  %36 = load %struct.zip_dirent*, %struct.zip_dirent** %35, align 8
  %37 = icmp eq %struct.zip_dirent* %36, null
  br i1 %34, label %38, label %58

38:                                               ; preds = %28
  br i1 %37, label %39, label %44

39:                                               ; preds = %38
  %40 = tail call %struct.zip_dirent* @_zip_dirent_clone(%struct.zip_dirent* %19) #2
  store %struct.zip_dirent* %40, %struct.zip_dirent** %35, align 8
  %41 = icmp eq %struct.zip_dirent* %40, null
  br i1 %41, label %42, label %44

42:                                               ; preds = %39
  %43 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 2
  tail call void @zip_error_set(%struct.zip_error* %43, i32 14, i32 0) #2
  br label %77

44:                                               ; preds = %39, %38
  %45 = phi %struct.zip_dirent* [ %40, %39 ], [ %36, %38 ]
  %46 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %45, i64 0, i32 4
  %47 = load i16, i16* %46, align 8
  %48 = and i16 %47, 255
  %49 = zext i8 %3 to i16
  %50 = shl nuw i16 %49, 8
  %51 = or i16 %48, %50
  store i16 %51, i16* %46, align 8
  %52 = load %struct.zip_dirent*, %struct.zip_dirent** %35, align 8
  %53 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %52, i64 0, i32 17
  store i32 %4, i32* %53, align 8
  %54 = load %struct.zip_dirent*, %struct.zip_dirent** %35, align 8
  %55 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %54, i64 0, i32 0
  %56 = load i32, i32* %55, align 8
  %57 = or i32 %56, 16
  store i32 %57, i32* %55, align 8
  br label %77

58:                                               ; preds = %28
  br i1 %37, label %77, label %59

59:                                               ; preds = %58
  %60 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %36, i64 0, i32 0
  %61 = load i32, i32* %60, align 8
  %62 = and i32 %61, -17
  store i32 %62, i32* %60, align 8
  %63 = load %struct.zip_dirent*, %struct.zip_dirent** %35, align 8
  %64 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %63, i64 0, i32 0
  %65 = load i32, i32* %64, align 8
  %66 = icmp eq i32 %65, 0
  br i1 %66, label %67, label %68

67:                                               ; preds = %59
  tail call void @_zip_dirent_free(%struct.zip_dirent* %63) #2
  store %struct.zip_dirent* null, %struct.zip_dirent** %35, align 8
  br label %77

68:                                               ; preds = %59
  %69 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %63, i64 0, i32 4
  %70 = load i16, i16* %69, align 8
  %71 = and i16 %70, 255
  %72 = trunc i32 %29 to i16
  %73 = shl i16 %72, 8
  %74 = or i16 %71, %73
  store i16 %74, i16* %69, align 8
  %75 = load %struct.zip_dirent*, %struct.zip_dirent** %35, align 8
  %76 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %75, i64 0, i32 17
  store i32 %4, i32* %76, align 8
  br label %77

77:                                               ; preds = %44, %67, %68, %58, %5, %42, %13
  %78 = phi i32 [ -1, %13 ], [ -1, %42 ], [ -1, %5 ], [ 0, %58 ], [ 0, %68 ], [ 0, %67 ], [ 0, %44 ]
  ret i32 %78
}

declare %struct.zip_dirent* @_zip_get_dirent(%struct.zip*, i64, i32, %struct.zip_error*) local_unnamed_addr #1

declare void @zip_error_set(%struct.zip_error*, i32, i32) local_unnamed_addr #1

declare %struct.zip_dirent* @_zip_dirent_clone(%struct.zip_dirent*) local_unnamed_addr #1

declare void @_zip_dirent_free(%struct.zip_dirent*) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
