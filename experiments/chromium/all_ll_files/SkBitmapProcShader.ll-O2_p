; ModuleID = '../../third_party/skia/src/shaders/SkBitmapProcShader.cpp'
source_filename = "../../third_party/skia/src/shaders/SkBitmapProcShader.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.SkShaderBase::Context" = type <{ i32 (...)**, %class.SkShaderBase*, %class.SkMatrix, %class.SkMatrix, i8, [7 x i8] }>
%class.SkMatrix = type { [9 x float], i32 }
%class.SkShaderBase = type { %class.SkShader.base, %class.SkMatrix, [4 x i8] }
%class.SkShader.base = type { %class.SkFlattenable.base }
%class.SkFlattenable.base = type { %class.SkRefCnt.base }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%struct.SkSamplingOptions = type { i8, %struct.SkCubicResampler, i32, i32 }
%struct.SkCubicResampler = type { float, float }
%class.SkImage_Base = type opaque
%"struct.SkShaderBase::ContextRec" = type <{ %class.SkMatrix*, %class.SkMatrix*, i32, [4 x i8], %class.SkColorSpace*, i8, i8, [6 x i8] }>
%class.SkColorSpace = type <{ %class.SkNVRefCnt, i32, i32, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %class.SkOnce, [3 x i8] }>
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%struct.skcms_TransferFunction = type { float, float, float, float, float, float, float }
%struct.skcms_Matrix3x3 = type { [3 x [3 x float]] }
%class.SkOnce = type { %"struct.std::__1::atomic.1" }
%"struct.std::__1::atomic.1" = type { %"struct.std::__1::__atomic_base.2" }
%"struct.std::__1::__atomic_base.2" = type { %"struct.std::__1::__atomic_base.3" }
%"struct.std::__1::__atomic_base.3" = type { %"struct.std::__1::__cxx_atomic_impl.4" }
%"struct.std::__1::__cxx_atomic_impl.4" = type { %"struct.std::__1::__cxx_atomic_base_impl.5" }
%"struct.std::__1::__cxx_atomic_base_impl.5" = type { i8 }
%class.SkArenaAlloc = type <{ i8*, i8*, i8*, %class.SkFibBlockSizes, [4 x i8] }>
%class.SkFibBlockSizes = type { i32 }
%struct.SkBitmapProcState = type { %class.SkImage_Base*, %class.SkPixmap, %class.SkMatrix, i8, i32, i32, i8, void (%class.SkMatrix*, float, float, %struct.SkPoint*)*, i64, i64, i32, i32, i16, [6 x i8], %class.SkSTArenaAlloc, void (i8*, i32, i32, i32*, i32)*, void (%struct.SkBitmapProcState*, i32*, i32, i32, i32)*, void (%struct.SkBitmapProcState*, i32*, i32, i32*)* }
%class.SkPixmap = type { i8*, i64, %struct.SkImageInfo }
%struct.SkImageInfo = type { %class.SkColorInfo, %struct.SkISize }
%class.SkColorInfo = type { %class.sk_sp, i32, i32 }
%class.sk_sp = type { %class.SkColorSpace* }
%struct.SkISize = type { i32, i32 }
%struct.SkPoint = type { float, float }
%class.SkSTArenaAlloc = type { %"struct.std::__1::array", %class.SkArenaAlloc.base, [4 x i8] }
%"struct.std::__1::array" = type { [136 x i8] }
%class.SkArenaAlloc.base = type <{ i8*, i8*, i8*, %class.SkFibBlockSizes }>
%class.BitmapProcShaderContext = type <{ %"class.SkShaderBase::Context.base", [7 x i8], %struct.SkBitmapProcState*, i32, [4 x i8] }>
%"class.SkShaderBase::Context.base" = type <{ i32 (...)**, %class.SkShaderBase*, %class.SkMatrix, %class.SkMatrix, i8 }>

$_ZZN12SkArenaAlloc4makeIZNS_4makeI17SkBitmapProcStateJRPK12SkImage_BaseR10SkTileModeS8_EEEPT_DpOT0_EUlPvE_EEDTclfp_LDnEEEOS9_ENUlPcE_8__invokeESI_ = comdat any

$_ZZN12SkArenaAlloc4makeIZNS_4makeI23BitmapProcShaderContextJRK12SkShaderBaseRKNS3_10ContextRecERP17SkBitmapProcStateEEEPT_DpOT0_EUlPvE_EEDTclfp_LDnEEEOSC_ENUlPcE_8__invokeESL_ = comdat any

$_ZN23BitmapProcShaderContextD0Ev = comdat any

$_ZNK23BitmapProcShaderContext8getFlagsEv = comdat any

$_ZN23BitmapProcShaderContext9shadeSpanEiiPji = comdat any

$_ZTV23BitmapProcShaderContext = comdat any

@_ZTV23BitmapProcShaderContext = linkonce_odr hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.SkShaderBase::Context"*)* @_ZN12SkShaderBase7ContextD2Ev to i8*), i8* bitcast (void (%class.BitmapProcShaderContext*)* @_ZN23BitmapProcShaderContextD0Ev to i8*), i8* bitcast (i32 (%class.BitmapProcShaderContext*)* @_ZNK23BitmapProcShaderContext8getFlagsEv to i8*), i8* bitcast (void (%class.BitmapProcShaderContext*, i32, i32, i32*, i32)* @_ZN23BitmapProcShaderContext9shadeSpanEiiPji to i8*)] }, comdat, align 8

; Function Attrs: nounwind ssp uwtable
define hidden %"class.SkShaderBase::Context"* @_ZN24SkBitmapProcLegacyShader11MakeContextERK12SkShaderBase10SkTileModeS3_RK17SkSamplingOptionsPK12SkImage_BaseRKNS0_10ContextRecEP12SkArenaAlloc(%class.SkShaderBase* dereferenceable(56), i32, i32, %struct.SkSamplingOptions* dereferenceable(20), %class.SkImage_Base*, %"struct.SkShaderBase::ContextRec"* dereferenceable(40), %class.SkArenaAlloc*) local_unnamed_addr #0 align 2 {
  %8 = alloca %class.SkMatrix, align 16
  %9 = bitcast %class.SkMatrix* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %9) #6
  %10 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %8, i64 0, i32 1
  %11 = bitcast %class.SkMatrix* %8 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %11, align 16
  %12 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %8, i64 0, i32 0, i64 4
  %13 = bitcast float* %12 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %13, align 16
  %14 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %8, i64 0, i32 0, i64 8
  store float 1.000000e+00, float* %14, align 16
  store i32 16, i32* %10, align 4
  %15 = getelementptr inbounds %"struct.SkShaderBase::ContextRec", %"struct.SkShaderBase::ContextRec"* %5, i64 0, i32 0
  %16 = load %class.SkMatrix*, %class.SkMatrix** %15, align 8
  %17 = getelementptr inbounds %"struct.SkShaderBase::ContextRec", %"struct.SkShaderBase::ContextRec"* %5, i64 0, i32 1
  %18 = load %class.SkMatrix*, %class.SkMatrix** %17, align 8
  %19 = call zeroext i1 @_ZNK12SkShaderBase19computeTotalInverseERK8SkMatrixPS1_PS0_(%class.SkShaderBase* %0, %class.SkMatrix* dereferenceable(40) %16, %class.SkMatrix* %18, %class.SkMatrix* nonnull %8) #6
  br i1 %19, label %20, label %88

20:                                               ; preds = %7
  %21 = call i8* @_ZN12SkArenaAlloc21allocObjectWithFooterEjj(%class.SkArenaAlloc* %6, i32 345, i32 8) #6
  %22 = getelementptr inbounds %class.SkArenaAlloc, %class.SkArenaAlloc* %6, i64 0, i32 1
  %23 = bitcast i8** %22 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = ptrtoint i8* %21 to i64
  %26 = sub i64 %25, %24
  %27 = trunc i64 %26 to i32
  %28 = getelementptr inbounds i8, i8* %21, i64 336
  store i8* %28, i8** %22, align 8
  call void @_ZN12SkArenaAlloc13installFooterEPFPcS0_Ej(%class.SkArenaAlloc* %6, i8* (i8*)* nonnull @_ZZN12SkArenaAlloc4makeIZNS_4makeI17SkBitmapProcStateJRPK12SkImage_BaseR10SkTileModeS8_EEEPT_DpOT0_EUlPvE_EEDTclfp_LDnEEEOS9_ENUlPcE_8__invokeESI_, i32 %27) #6
  %29 = bitcast i8* %21 to %struct.SkBitmapProcState*
  call void @_ZN17SkBitmapProcStateC1EPK12SkImage_Base10SkTileModeS3_(%struct.SkBitmapProcState* %29, %class.SkImage_Base* %4, i32 %1, i32 %2) #6
  %30 = getelementptr inbounds %"struct.SkShaderBase::ContextRec", %"struct.SkShaderBase::ContextRec"* %5, i64 0, i32 5
  %31 = load i8, i8* %30, align 8
  %32 = call zeroext i1 @_ZN17SkBitmapProcState4initERK8SkMatrixhRK17SkSamplingOptions(%struct.SkBitmapProcState* %29, %class.SkMatrix* nonnull dereferenceable(40) %8, i8 zeroext %31, %struct.SkSamplingOptions* dereferenceable(20) %3) #6
  br i1 %32, label %33, label %88

33:                                               ; preds = %20
  %34 = call zeroext i1 @_ZN17SkBitmapProcState11chooseProcsEv(%struct.SkBitmapProcState* %29) #6
  br i1 %34, label %35, label %88

35:                                               ; preds = %33
  %36 = call i8* @_ZN12SkArenaAlloc21allocObjectWithFooterEjj(%class.SkArenaAlloc* %6, i32 129, i32 8) #6
  %37 = load i64, i64* %23, align 8
  %38 = ptrtoint i8* %36 to i64
  %39 = sub i64 %38, %37
  %40 = trunc i64 %39 to i32
  %41 = getelementptr inbounds i8, i8* %36, i64 120
  store i8* %41, i8** %22, align 8
  call void @_ZN12SkArenaAlloc13installFooterEPFPcS0_Ej(%class.SkArenaAlloc* %6, i8* (i8*)* nonnull @_ZZN12SkArenaAlloc4makeIZNS_4makeI23BitmapProcShaderContextJRK12SkShaderBaseRKNS3_10ContextRecERP17SkBitmapProcStateEEEPT_DpOT0_EUlPvE_EEDTclfp_LDnEEEOSC_ENUlPcE_8__invokeESL_, i32 %40) #6
  %42 = bitcast i8* %36 to %"class.SkShaderBase::Context"*
  call void @_ZN12SkShaderBase7ContextC2ERKS_RKNS_10ContextRecE(%"class.SkShaderBase::Context"* %42, %class.SkShaderBase* dereferenceable(56) %0, %"struct.SkShaderBase::ContextRec"* dereferenceable(40) %5) #6
  %43 = bitcast i8* %36 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTV23BitmapProcShaderContext, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %43, align 8
  %44 = getelementptr inbounds i8, i8* %36, i64 104
  %45 = bitcast i8* %44 to %struct.SkBitmapProcState**
  %46 = bitcast i8* %44 to i8**
  store i8* %21, i8** %46, align 8
  %47 = getelementptr inbounds i8, i8* %36, i64 112
  %48 = bitcast i8* %47 to i32*
  store i32 0, i32* %48, align 8
  %49 = getelementptr inbounds i8, i8* %21, i64 36
  %50 = bitcast i8* %49 to i32*
  %51 = load i32, i32* %50, align 4
  %52 = icmp eq i32 %51, 1
  br i1 %52, label %58, label %53

53:                                               ; preds = %35
  %54 = getelementptr inbounds i8, i8* %21, i64 32
  %55 = bitcast i8* %54 to i32*
  %56 = load i32, i32* %55, align 8
  %57 = call zeroext i1 @_Z25SkColorTypeIsAlwaysOpaque11SkColorType(i32 %56) #6
  br i1 %57, label %58, label %65

58:                                               ; preds = %53, %35
  %59 = getelementptr inbounds i8, i8* %36, i64 96
  %60 = load i8, i8* %59, align 8
  %61 = icmp eq i8 %60, -1
  br i1 %61, label %62, label %65

62:                                               ; preds = %58
  %63 = load i32, i32* %48, align 8
  %64 = or i32 %63, 1
  store i32 %64, i32* %48, align 8
  br label %65

65:                                               ; preds = %62, %58, %53
  %66 = load %struct.SkBitmapProcState*, %struct.SkBitmapProcState** %45, align 8
  %67 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %66, i64 0, i32 1, i32 2, i32 1, i32 1
  %68 = load i32, i32* %67, align 4
  %69 = icmp eq i32 %68, 1
  br i1 %69, label %70, label %88

70:                                               ; preds = %65
  %71 = getelementptr inbounds i8, i8* %36, i64 92
  %72 = bitcast i8* %71 to i32*
  %73 = load i32, i32* %72, align 4
  %74 = trunc i32 %73 to i8
  %75 = icmp slt i8 %74, 0
  br i1 %75, label %76, label %81

76:                                               ; preds = %70
  %77 = getelementptr inbounds i8, i8* %36, i64 56
  %78 = bitcast i8* %77 to %class.SkMatrix*
  %79 = call zeroext i8 @_ZNK8SkMatrix15computeTypeMaskEv(%class.SkMatrix* %78) #6
  %80 = zext i8 %79 to i32
  store i32 %80, i32* %72, align 4
  br label %81

81:                                               ; preds = %76, %70
  %82 = phi i32 [ %80, %76 ], [ %73, %70 ]
  %83 = and i32 %82, 12
  %84 = icmp eq i32 %83, 0
  br i1 %84, label %85, label %88

85:                                               ; preds = %81
  %86 = load i32, i32* %48, align 8
  %87 = or i32 %86, 2
  store i32 %87, i32* %48, align 8
  br label %88

88:                                               ; preds = %85, %81, %65, %20, %33, %7
  %89 = phi %"class.SkShaderBase::Context"* [ null, %7 ], [ null, %33 ], [ null, %20 ], [ %42, %65 ], [ %42, %81 ], [ %42, %85 ]
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %9) #6
  ret %"class.SkShaderBase::Context"* %89
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare zeroext i1 @_ZNK12SkShaderBase19computeTotalInverseERK8SkMatrixPS1_PS0_(%class.SkShaderBase*, %class.SkMatrix* dereferenceable(40), %class.SkMatrix*, %class.SkMatrix*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare zeroext i1 @_ZN17SkBitmapProcState4initERK8SkMatrixhRK17SkSamplingOptions(%struct.SkBitmapProcState*, %class.SkMatrix* dereferenceable(40), i8 zeroext, %struct.SkSamplingOptions* dereferenceable(20)) local_unnamed_addr #2

declare zeroext i1 @_ZN17SkBitmapProcState11chooseProcsEv(%struct.SkBitmapProcState*) local_unnamed_addr #2

declare i8* @_ZN12SkArenaAlloc21allocObjectWithFooterEjj(%class.SkArenaAlloc*, i32, i32) local_unnamed_addr #2

declare void @_ZN12SkArenaAlloc13installFooterEPFPcS0_Ej(%class.SkArenaAlloc*, i8* (i8*)*, i32) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZZN12SkArenaAlloc4makeIZNS_4makeI17SkBitmapProcStateJRPK12SkImage_BaseR10SkTileModeS8_EEEPT_DpOT0_EUlPvE_EEDTclfp_LDnEEEOS9_ENUlPcE_8__invokeESI_(i8*) #3 comdat align 2 {
  %2 = getelementptr inbounds i8, i8* %0, i64 -345
  %3 = getelementptr inbounds i8, i8* %0, i64 -65
  %4 = bitcast i8* %3 to %class.SkArenaAlloc*
  tail call void @_ZN12SkArenaAllocD2Ev(%class.SkArenaAlloc* %4) #6
  %5 = getelementptr inbounds i8, i8* %0, i64 -321
  %6 = bitcast i8* %5 to %class.SkColorSpace**
  %7 = load %class.SkColorSpace*, %class.SkColorSpace** %6, align 8
  %8 = icmp eq %class.SkColorSpace* %7, null
  br i1 %8, label %15, label %9

9:                                                ; preds = %1
  %10 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %11 = atomicrmw add i32* %10, i32 -1 acq_rel
  %12 = icmp eq i32 %11, 1
  br i1 %12, label %13, label %15

13:                                               ; preds = %9
  %14 = bitcast %class.SkColorSpace* %7 to i8*
  tail call void @_ZdlPv(i8* %14) #7
  br label %15

15:                                               ; preds = %1, %9, %13
  ret i8* %2
}

; Function Attrs: nounwind
declare void @_ZN12SkArenaAllocD2Ev(%class.SkArenaAlloc*) unnamed_addr #4

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #5

declare void @_ZN17SkBitmapProcStateC1EPK12SkImage_Base10SkTileModeS3_(%struct.SkBitmapProcState*, %class.SkImage_Base*, i32, i32) unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZZN12SkArenaAlloc4makeIZNS_4makeI23BitmapProcShaderContextJRK12SkShaderBaseRKNS3_10ContextRecERP17SkBitmapProcStateEEEPT_DpOT0_EUlPvE_EEDTclfp_LDnEEEOSC_ENUlPcE_8__invokeESL_(i8*) #3 comdat align 2 {
  %2 = getelementptr inbounds i8, i8* %0, i64 -129
  %3 = bitcast i8* %2 to %class.BitmapProcShaderContext*
  %4 = bitcast i8* %2 to void (%class.BitmapProcShaderContext*)***
  %5 = load void (%class.BitmapProcShaderContext*)**, void (%class.BitmapProcShaderContext*)*** %4, align 8
  %6 = load void (%class.BitmapProcShaderContext*)*, void (%class.BitmapProcShaderContext*)** %5, align 8
  tail call void %6(%class.BitmapProcShaderContext* %3) #6
  ret i8* %2
}

declare void @_ZN12SkShaderBase7ContextC2ERKS_RKNS_10ContextRecE(%"class.SkShaderBase::Context"*, %class.SkShaderBase* dereferenceable(56), %"struct.SkShaderBase::ContextRec"* dereferenceable(40)) unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN12SkShaderBase7ContextD2Ev(%"class.SkShaderBase::Context"*) unnamed_addr #4

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN23BitmapProcShaderContextD0Ev(%class.BitmapProcShaderContext*) unnamed_addr #3 comdat align 2 {
  %2 = bitcast %class.BitmapProcShaderContext* %0 to %"class.SkShaderBase::Context"*
  tail call void @_ZN12SkShaderBase7ContextD2Ev(%"class.SkShaderBase::Context"* %2) #6
  %3 = bitcast %class.BitmapProcShaderContext* %0 to i8*
  tail call void @_ZdlPv(i8* %3) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK23BitmapProcShaderContext8getFlagsEv(%class.BitmapProcShaderContext*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %class.BitmapProcShaderContext, %class.BitmapProcShaderContext* %0, i64 0, i32 3
  %3 = load i32, i32* %2, align 8
  ret i32 %3
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN23BitmapProcShaderContext9shadeSpanEiiPji(%class.BitmapProcShaderContext*, i32, i32, i32*, i32) unnamed_addr #0 comdat align 2 {
  %6 = alloca [128 x i32], align 16
  %7 = getelementptr inbounds %class.BitmapProcShaderContext, %class.BitmapProcShaderContext* %0, i64 0, i32 2
  %8 = load %struct.SkBitmapProcState*, %struct.SkBitmapProcState** %7, align 8
  %9 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %8, i64 0, i32 15
  %10 = load void (i8*, i32, i32, i32*, i32)*, void (i8*, i32, i32, i32*, i32)** %9, align 8
  %11 = icmp eq void (i8*, i32, i32, i32*, i32)* %10, null
  br i1 %11, label %14, label %12

12:                                               ; preds = %5
  %13 = bitcast %struct.SkBitmapProcState* %8 to i8*
  tail call void %10(i8* %13, i32 %1, i32 %2, i32* %3, i32 %4) #6
  br label %35

14:                                               ; preds = %5
  %15 = bitcast [128 x i32]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %15) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %15, i8 -86, i64 512, i1 false)
  %16 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %8, i64 0, i32 16
  %17 = load void (%struct.SkBitmapProcState*, i32*, i32, i32, i32)*, void (%struct.SkBitmapProcState*, i32*, i32, i32, i32)** %16, align 8
  %18 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %8, i64 0, i32 17
  %19 = load void (%struct.SkBitmapProcState*, i32*, i32, i32*)*, void (%struct.SkBitmapProcState*, i32*, i32, i32*)** %18, align 8
  %20 = tail call i32 @_ZNK17SkBitmapProcState21maxCountForBufferSizeEm(%struct.SkBitmapProcState* %8, i64 512) #6
  %21 = getelementptr inbounds [128 x i32], [128 x i32]* %6, i64 0, i64 0
  br label %22

22:                                               ; preds = %22, %14
  %23 = phi i32 [ %4, %14 ], [ %28, %22 ]
  %24 = phi i32* [ %3, %14 ], [ %31, %22 ]
  %25 = phi i32 [ %1, %14 ], [ %33, %22 ]
  %26 = icmp slt i32 %20, %23
  %27 = select i1 %26, i32 %20, i32 %23
  call void %17(%struct.SkBitmapProcState* dereferenceable(336) %8, i32* nonnull %21, i32 %27, i32 %25, i32 %2) #6
  call void %19(%struct.SkBitmapProcState* dereferenceable(336) %8, i32* nonnull %21, i32 %27, i32* %24) #6
  %28 = sub nsw i32 %23, %27
  %29 = icmp eq i32 %28, 0
  %30 = sext i32 %27 to i64
  %31 = getelementptr inbounds i32, i32* %24, i64 %30
  %32 = select i1 %29, i32 0, i32 %27
  %33 = add nsw i32 %32, %25
  br i1 %29, label %34, label %22

34:                                               ; preds = %22
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %15) #6
  br label %35

35:                                               ; preds = %34, %12
  ret void
}

declare zeroext i1 @_Z25SkColorTypeIsAlwaysOpaque11SkColorType(i32) local_unnamed_addr #2

declare zeroext i8 @_ZNK8SkMatrix15computeTypeMaskEv(%class.SkMatrix*) local_unnamed_addr #2

declare i32 @_ZNK17SkBitmapProcState21maxCountForBufferSizeEm(%struct.SkBitmapProcState*, i64) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }
attributes #7 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
