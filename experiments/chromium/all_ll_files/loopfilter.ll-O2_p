; ModuleID = '../../third_party/libvpx/source/libvpx/vpx_dsp/loopfilter.c'
source_filename = "../../third_party/libvpx/source/libvpx/vpx_dsp/loopfilter.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @vpx_lpf_horizontal_4_c(i8* nocapture, i32, i8* nocapture readonly, i8* nocapture readonly, i8* nocapture readonly) local_unnamed_addr #0 {
  %6 = mul nsw i32 %1, -4
  %7 = sext i32 %6 to i64
  %8 = mul nsw i32 %1, -3
  %9 = sext i32 %8 to i64
  %10 = mul nsw i32 %1, -2
  %11 = sext i32 %10 to i64
  %12 = sub nsw i32 0, %1
  %13 = sext i32 %12 to i64
  %14 = sext i32 %1 to i64
  %15 = shl nsw i32 %1, 1
  %16 = sext i32 %15 to i64
  %17 = mul nsw i32 %1, 3
  %18 = sext i32 %17 to i64
  %19 = sub nsw i64 0, %16
  %20 = sub nsw i64 0, %14
  br label %21

21:                                               ; preds = %21, %5
  %22 = phi i8* [ %0, %5 ], [ %183, %21 ]
  %23 = phi i32 [ 0, %5 ], [ %184, %21 ]
  %24 = getelementptr inbounds i8, i8* %22, i64 %7
  %25 = load i8, i8* %24, align 1
  %26 = getelementptr inbounds i8, i8* %22, i64 %9
  %27 = load i8, i8* %26, align 1
  %28 = getelementptr inbounds i8, i8* %22, i64 %11
  %29 = load i8, i8* %28, align 1
  %30 = getelementptr inbounds i8, i8* %22, i64 %13
  %31 = load i8, i8* %30, align 1
  %32 = load i8, i8* %22, align 1
  %33 = getelementptr inbounds i8, i8* %22, i64 %14
  %34 = load i8, i8* %33, align 1
  %35 = getelementptr inbounds i8, i8* %22, i64 %16
  %36 = load i8, i8* %35, align 1
  %37 = getelementptr inbounds i8, i8* %22, i64 %18
  %38 = load i8, i8* %37, align 1
  %39 = load i8, i8* %3, align 1
  %40 = load i8, i8* %2, align 1
  %41 = zext i8 %25 to i32
  %42 = zext i8 %27 to i32
  %43 = sub nsw i32 %41, %42
  %44 = icmp slt i32 %43, 0
  %45 = sub nsw i32 0, %43
  %46 = select i1 %44, i32 %45, i32 %43
  %47 = zext i8 %39 to i32
  %48 = icmp sgt i32 %46, %47
  %49 = zext i8 %29 to i32
  %50 = sub nsw i32 %42, %49
  %51 = icmp slt i32 %50, 0
  %52 = sub nsw i32 0, %50
  %53 = select i1 %51, i32 %52, i32 %50
  %54 = icmp sgt i32 %53, %47
  %55 = or i1 %48, %54
  %56 = zext i8 %31 to i32
  %57 = sub nsw i32 %49, %56
  %58 = icmp slt i32 %57, 0
  %59 = sub nsw i32 0, %57
  %60 = select i1 %58, i32 %59, i32 %57
  %61 = icmp sgt i32 %60, %47
  %62 = or i1 %61, %55
  %63 = zext i8 %34 to i32
  %64 = zext i8 %32 to i32
  %65 = sub nsw i32 %63, %64
  %66 = icmp slt i32 %65, 0
  %67 = sub nsw i32 0, %65
  %68 = select i1 %66, i32 %67, i32 %65
  %69 = icmp sgt i32 %68, %47
  %70 = or i1 %69, %62
  %71 = zext i8 %36 to i32
  %72 = sub nsw i32 %71, %63
  %73 = icmp slt i32 %72, 0
  %74 = sub nsw i32 0, %72
  %75 = select i1 %73, i32 %74, i32 %72
  %76 = icmp sgt i32 %75, %47
  %77 = or i1 %76, %70
  %78 = zext i8 %38 to i32
  %79 = sub nsw i32 %78, %71
  %80 = icmp slt i32 %79, 0
  %81 = sub nsw i32 0, %79
  %82 = select i1 %80, i32 %81, i32 %79
  %83 = icmp sgt i32 %82, %47
  %84 = or i1 %83, %77
  %85 = sub nsw i32 %56, %64
  %86 = icmp slt i32 %85, 0
  %87 = sub nsw i32 0, %85
  %88 = select i1 %86, i32 %87, i32 %85
  %89 = shl nuw nsw i32 %88, 1
  %90 = sub nsw i32 %49, %63
  %91 = icmp slt i32 %90, 0
  %92 = sub nsw i32 0, %90
  %93 = select i1 %91, i32 %92, i32 %90
  %94 = lshr i32 %93, 1
  %95 = add nuw nsw i32 %94, %89
  %96 = zext i8 %40 to i32
  %97 = icmp sgt i32 %95, %96
  %98 = or i1 %97, %84
  %99 = load i8, i8* %4, align 1
  %100 = getelementptr inbounds i8, i8* %22, i64 %19
  %101 = getelementptr inbounds i8, i8* %22, i64 %20
  %102 = load i8, i8* %100, align 1
  %103 = xor i8 %102, -128
  %104 = load i8, i8* %101, align 1
  %105 = xor i8 %104, -128
  %106 = xor i8 %32, -128
  %107 = xor i8 %34, -128
  %108 = zext i8 %102 to i32
  %109 = zext i8 %104 to i32
  %110 = sub nsw i32 %108, %109
  %111 = icmp slt i32 %110, 0
  %112 = sub nsw i32 0, %110
  %113 = select i1 %111, i32 %112, i32 %110
  %114 = zext i8 %99 to i32
  %115 = icmp sgt i32 %113, %114
  %116 = icmp sgt i32 %68, %114
  %117 = or i1 %116, %115
  %118 = sext i1 %117 to i8
  %119 = sext i8 %103 to i32
  %120 = sext i8 %107 to i32
  %121 = sub nsw i32 %119, %120
  %122 = icmp slt i32 %121, 127
  %123 = select i1 %122, i32 %121, i32 127
  %124 = icmp sgt i32 %123, -128
  %125 = select i1 %124, i32 %123, i32 -128
  %126 = trunc i32 %125 to i8
  %127 = and i8 %126, %118
  %128 = sext i8 %127 to i32
  %129 = sext i8 %106 to i32
  %130 = sext i8 %105 to i32
  %131 = sub nsw i32 %129, %130
  %132 = mul nsw i32 %131, 3
  %133 = add nsw i32 %132, %128
  %134 = icmp slt i32 %133, 127
  %135 = select i1 %134, i32 %133, i32 127
  %136 = icmp sgt i32 %135, -128
  %137 = select i1 %136, i32 %135, i32 -128
  %138 = trunc i32 %137 to i8
  %139 = select i1 %98, i8 0, i8 %138
  %140 = icmp slt i8 %139, 123
  %141 = select i1 %140, i8 %139, i8 123
  %142 = add nsw i8 %141, 4
  %143 = ashr i8 %142, 3
  %144 = icmp slt i8 %139, 124
  %145 = select i1 %144, i8 %139, i8 124
  %146 = add nsw i8 %145, 3
  %147 = ashr i8 %146, 3
  %148 = sext i8 %143 to i32
  %149 = sub nsw i32 %129, %148
  %150 = icmp slt i32 %149, 127
  %151 = select i1 %150, i32 %149, i32 127
  %152 = icmp sgt i32 %151, -128
  %153 = select i1 %152, i32 %151, i32 -128
  %154 = trunc i32 %153 to i8
  %155 = xor i8 %154, -128
  store i8 %155, i8* %22, align 1
  %156 = sext i8 %147 to i32
  %157 = add nsw i32 %156, %130
  %158 = icmp slt i32 %157, 127
  %159 = select i1 %158, i32 %157, i32 127
  %160 = icmp sgt i32 %159, -128
  %161 = select i1 %160, i32 %159, i32 -128
  %162 = trunc i32 %161 to i8
  %163 = xor i8 %162, -128
  store i8 %163, i8* %101, align 1
  %164 = add nsw i8 %143, 1
  %165 = ashr i8 %164, 1
  %166 = xor i8 %118, -1
  %167 = and i8 %165, %166
  %168 = sext i8 %167 to i32
  %169 = sub nsw i32 %120, %168
  %170 = icmp slt i32 %169, 127
  %171 = select i1 %170, i32 %169, i32 127
  %172 = icmp sgt i32 %171, -128
  %173 = select i1 %172, i32 %171, i32 -128
  %174 = trunc i32 %173 to i8
  %175 = xor i8 %174, -128
  store i8 %175, i8* %33, align 1
  %176 = add nsw i32 %168, %119
  %177 = icmp slt i32 %176, 127
  %178 = select i1 %177, i32 %176, i32 127
  %179 = icmp sgt i32 %178, -128
  %180 = select i1 %179, i32 %178, i32 -128
  %181 = trunc i32 %180 to i8
  %182 = xor i8 %181, -128
  store i8 %182, i8* %100, align 1
  %183 = getelementptr inbounds i8, i8* %22, i64 1
  %184 = add nuw nsw i32 %23, 1
  %185 = icmp eq i32 %184, 8
  br i1 %185, label %186, label %21

186:                                              ; preds = %21
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @vpx_lpf_horizontal_4_dual_c(i8* nocapture, i32, i8* nocapture readonly, i8* nocapture readonly, i8* nocapture readonly, i8* nocapture readonly, i8* nocapture readonly, i8* nocapture readonly) local_unnamed_addr #0 {
  tail call void @vpx_lpf_horizontal_4_c(i8* %0, i32 %1, i8* %2, i8* %3, i8* %4)
  %9 = getelementptr inbounds i8, i8* %0, i64 8
  tail call void @vpx_lpf_horizontal_4_c(i8* %9, i32 %1, i8* %5, i8* %6, i8* %7)
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @vpx_lpf_vertical_4_c(i8* nocapture, i32, i8* nocapture readonly, i8* nocapture readonly, i8* nocapture readonly) local_unnamed_addr #0 {
  %6 = sext i32 %1 to i64
  %7 = icmp eq i32 %1, 1
  br i1 %7, label %163, label %8

8:                                                ; preds = %5, %8
  %9 = phi i8* [ %160, %8 ], [ %0, %5 ]
  %10 = phi i32 [ %161, %8 ], [ 0, %5 ]
  %11 = getelementptr inbounds i8, i8* %9, i64 -4
  %12 = load i8, i8* %11, align 1
  %13 = getelementptr inbounds i8, i8* %9, i64 -3
  %14 = load i8, i8* %13, align 1
  %15 = getelementptr inbounds i8, i8* %9, i64 -2
  %16 = load i8, i8* %15, align 1
  %17 = getelementptr inbounds i8, i8* %9, i64 -1
  %18 = load i8, i8* %17, align 1
  %19 = load i8, i8* %9, align 1
  %20 = getelementptr inbounds i8, i8* %9, i64 1
  %21 = load i8, i8* %20, align 1
  %22 = getelementptr inbounds i8, i8* %9, i64 2
  %23 = load i8, i8* %22, align 1
  %24 = getelementptr inbounds i8, i8* %9, i64 3
  %25 = load i8, i8* %24, align 1
  %26 = load i8, i8* %3, align 1
  %27 = load i8, i8* %2, align 1
  %28 = zext i8 %12 to i32
  %29 = zext i8 %14 to i32
  %30 = sub nsw i32 %28, %29
  %31 = icmp slt i32 %30, 0
  %32 = sub nsw i32 0, %30
  %33 = select i1 %31, i32 %32, i32 %30
  %34 = zext i8 %26 to i32
  %35 = icmp sgt i32 %33, %34
  %36 = zext i8 %16 to i32
  %37 = sub nsw i32 %29, %36
  %38 = icmp slt i32 %37, 0
  %39 = sub nsw i32 0, %37
  %40 = select i1 %38, i32 %39, i32 %37
  %41 = icmp sgt i32 %40, %34
  %42 = or i1 %35, %41
  %43 = zext i8 %18 to i32
  %44 = sub nsw i32 %36, %43
  %45 = icmp slt i32 %44, 0
  %46 = sub nsw i32 0, %44
  %47 = select i1 %45, i32 %46, i32 %44
  %48 = icmp sgt i32 %47, %34
  %49 = or i1 %48, %42
  %50 = zext i8 %21 to i32
  %51 = zext i8 %19 to i32
  %52 = sub nsw i32 %50, %51
  %53 = icmp slt i32 %52, 0
  %54 = sub nsw i32 0, %52
  %55 = select i1 %53, i32 %54, i32 %52
  %56 = icmp sgt i32 %55, %34
  %57 = or i1 %56, %49
  %58 = zext i8 %23 to i32
  %59 = sub nsw i32 %58, %50
  %60 = icmp slt i32 %59, 0
  %61 = sub nsw i32 0, %59
  %62 = select i1 %60, i32 %61, i32 %59
  %63 = icmp sgt i32 %62, %34
  %64 = or i1 %63, %57
  %65 = zext i8 %25 to i32
  %66 = sub nsw i32 %65, %58
  %67 = icmp slt i32 %66, 0
  %68 = sub nsw i32 0, %66
  %69 = select i1 %67, i32 %68, i32 %66
  %70 = icmp sgt i32 %69, %34
  %71 = or i1 %70, %64
  %72 = sub nsw i32 %43, %51
  %73 = icmp slt i32 %72, 0
  %74 = sub nsw i32 0, %72
  %75 = select i1 %73, i32 %74, i32 %72
  %76 = shl nuw nsw i32 %75, 1
  %77 = sub nsw i32 %36, %50
  %78 = icmp slt i32 %77, 0
  %79 = sub nsw i32 0, %77
  %80 = select i1 %78, i32 %79, i32 %77
  %81 = lshr i32 %80, 1
  %82 = add nuw nsw i32 %81, %76
  %83 = zext i8 %27 to i32
  %84 = icmp sgt i32 %82, %83
  %85 = or i1 %84, %71
  %86 = load i8, i8* %4, align 1
  %87 = xor i8 %16, -128
  %88 = xor i8 %18, -128
  %89 = xor i8 %19, -128
  %90 = xor i8 %21, -128
  %91 = zext i8 %86 to i32
  %92 = icmp sgt i32 %47, %91
  %93 = icmp sgt i32 %55, %91
  %94 = or i1 %92, %93
  %95 = sext i1 %94 to i8
  %96 = sext i8 %87 to i32
  %97 = sext i8 %90 to i32
  %98 = sub nsw i32 %96, %97
  %99 = icmp slt i32 %98, 127
  %100 = select i1 %99, i32 %98, i32 127
  %101 = icmp sgt i32 %100, -128
  %102 = select i1 %101, i32 %100, i32 -128
  %103 = trunc i32 %102 to i8
  %104 = and i8 %95, %103
  %105 = sext i8 %104 to i32
  %106 = sext i8 %89 to i32
  %107 = sext i8 %88 to i32
  %108 = sub nsw i32 %106, %107
  %109 = mul nsw i32 %108, 3
  %110 = add nsw i32 %109, %105
  %111 = icmp slt i32 %110, 127
  %112 = select i1 %111, i32 %110, i32 127
  %113 = icmp sgt i32 %112, -128
  %114 = select i1 %113, i32 %112, i32 -128
  %115 = trunc i32 %114 to i8
  %116 = select i1 %85, i8 0, i8 %115
  %117 = icmp slt i8 %116, 123
  %118 = select i1 %117, i8 %116, i8 123
  %119 = add nsw i8 %118, 4
  %120 = ashr i8 %119, 3
  %121 = icmp slt i8 %116, 124
  %122 = select i1 %121, i8 %116, i8 124
  %123 = add nsw i8 %122, 3
  %124 = ashr i8 %123, 3
  %125 = sext i8 %120 to i32
  %126 = sub nsw i32 %106, %125
  %127 = icmp slt i32 %126, 127
  %128 = select i1 %127, i32 %126, i32 127
  %129 = icmp sgt i32 %128, -128
  %130 = select i1 %129, i32 %128, i32 -128
  %131 = trunc i32 %130 to i8
  %132 = xor i8 %131, -128
  store i8 %132, i8* %9, align 1
  %133 = sext i8 %124 to i32
  %134 = add nsw i32 %133, %107
  %135 = icmp slt i32 %134, 127
  %136 = select i1 %135, i32 %134, i32 127
  %137 = icmp sgt i32 %136, -128
  %138 = select i1 %137, i32 %136, i32 -128
  %139 = trunc i32 %138 to i8
  %140 = xor i8 %139, -128
  store i8 %140, i8* %17, align 1
  %141 = add nsw i8 %120, 1
  %142 = ashr i8 %141, 1
  %143 = xor i8 %95, -1
  %144 = and i8 %142, %143
  %145 = sext i8 %144 to i32
  %146 = sub nsw i32 %97, %145
  %147 = icmp slt i32 %146, 127
  %148 = select i1 %147, i32 %146, i32 127
  %149 = icmp sgt i32 %148, -128
  %150 = select i1 %149, i32 %148, i32 -128
  %151 = trunc i32 %150 to i8
  %152 = xor i8 %151, -128
  store i8 %152, i8* %20, align 1
  %153 = add nsw i32 %145, %96
  %154 = icmp slt i32 %153, 127
  %155 = select i1 %154, i32 %153, i32 127
  %156 = icmp sgt i32 %155, -128
  %157 = select i1 %156, i32 %155, i32 -128
  %158 = trunc i32 %157 to i8
  %159 = xor i8 %158, -128
  store i8 %159, i8* %15, align 1
  %160 = getelementptr inbounds i8, i8* %9, i64 %6
  %161 = add nuw nsw i32 %10, 1
  %162 = icmp eq i32 %161, 8
  br i1 %162, label %320, label %8

163:                                              ; preds = %5
  %164 = load i8, i8* %0, align 1
  br label %165

165:                                              ; preds = %165, %163
  %166 = phi i8 [ %164, %163 ], [ %309, %165 ]
  %167 = phi i8* [ %0, %163 ], [ %317, %165 ]
  %168 = phi i32 [ 0, %163 ], [ %318, %165 ]
  %169 = getelementptr inbounds i8, i8* %167, i64 -4
  %170 = load i8, i8* %169, align 1
  %171 = getelementptr inbounds i8, i8* %167, i64 -3
  %172 = load i8, i8* %171, align 1
  %173 = getelementptr inbounds i8, i8* %167, i64 -2
  %174 = load i8, i8* %173, align 1
  %175 = getelementptr inbounds i8, i8* %167, i64 -1
  %176 = load i8, i8* %175, align 1
  %177 = getelementptr inbounds i8, i8* %167, i64 1
  %178 = load i8, i8* %177, align 1
  %179 = getelementptr inbounds i8, i8* %167, i64 2
  %180 = load i8, i8* %179, align 1
  %181 = getelementptr inbounds i8, i8* %167, i64 3
  %182 = load i8, i8* %181, align 1
  %183 = load i8, i8* %3, align 1
  %184 = load i8, i8* %2, align 1
  %185 = zext i8 %170 to i32
  %186 = zext i8 %172 to i32
  %187 = sub nsw i32 %185, %186
  %188 = icmp slt i32 %187, 0
  %189 = sub nsw i32 0, %187
  %190 = select i1 %188, i32 %189, i32 %187
  %191 = zext i8 %183 to i32
  %192 = icmp sgt i32 %190, %191
  %193 = zext i8 %174 to i32
  %194 = sub nsw i32 %186, %193
  %195 = icmp slt i32 %194, 0
  %196 = sub nsw i32 0, %194
  %197 = select i1 %195, i32 %196, i32 %194
  %198 = icmp sgt i32 %197, %191
  %199 = or i1 %192, %198
  %200 = zext i8 %176 to i32
  %201 = sub nsw i32 %193, %200
  %202 = icmp slt i32 %201, 0
  %203 = sub nsw i32 0, %201
  %204 = select i1 %202, i32 %203, i32 %201
  %205 = icmp sgt i32 %204, %191
  %206 = or i1 %205, %199
  %207 = zext i8 %178 to i32
  %208 = zext i8 %166 to i32
  %209 = sub nsw i32 %207, %208
  %210 = icmp slt i32 %209, 0
  %211 = sub nsw i32 0, %209
  %212 = select i1 %210, i32 %211, i32 %209
  %213 = icmp sgt i32 %212, %191
  %214 = or i1 %213, %206
  %215 = zext i8 %180 to i32
  %216 = sub nsw i32 %215, %207
  %217 = icmp slt i32 %216, 0
  %218 = sub nsw i32 0, %216
  %219 = select i1 %217, i32 %218, i32 %216
  %220 = icmp sgt i32 %219, %191
  %221 = or i1 %220, %214
  %222 = zext i8 %182 to i32
  %223 = sub nsw i32 %222, %215
  %224 = icmp slt i32 %223, 0
  %225 = sub nsw i32 0, %223
  %226 = select i1 %224, i32 %225, i32 %223
  %227 = icmp sgt i32 %226, %191
  %228 = or i1 %227, %221
  %229 = sub nsw i32 %200, %208
  %230 = icmp slt i32 %229, 0
  %231 = sub nsw i32 0, %229
  %232 = select i1 %230, i32 %231, i32 %229
  %233 = shl nuw nsw i32 %232, 1
  %234 = sub nsw i32 %193, %207
  %235 = icmp slt i32 %234, 0
  %236 = sub nsw i32 0, %234
  %237 = select i1 %235, i32 %236, i32 %234
  %238 = lshr i32 %237, 1
  %239 = add nuw nsw i32 %238, %233
  %240 = zext i8 %184 to i32
  %241 = icmp sgt i32 %239, %240
  %242 = or i1 %241, %228
  %243 = load i8, i8* %4, align 1
  %244 = xor i8 %174, -128
  %245 = xor i8 %176, -128
  %246 = xor i8 %166, -128
  %247 = xor i8 %178, -128
  %248 = zext i8 %243 to i32
  %249 = icmp sgt i32 %204, %248
  %250 = icmp sgt i32 %212, %248
  %251 = or i1 %249, %250
  %252 = sext i1 %251 to i8
  %253 = sext i8 %244 to i32
  %254 = sext i8 %247 to i32
  %255 = sub nsw i32 %253, %254
  %256 = icmp slt i32 %255, 127
  %257 = select i1 %256, i32 %255, i32 127
  %258 = icmp sgt i32 %257, -128
  %259 = select i1 %258, i32 %257, i32 -128
  %260 = trunc i32 %259 to i8
  %261 = and i8 %252, %260
  %262 = sext i8 %261 to i32
  %263 = sext i8 %246 to i32
  %264 = sext i8 %245 to i32
  %265 = sub nsw i32 %263, %264
  %266 = mul nsw i32 %265, 3
  %267 = add nsw i32 %266, %262
  %268 = icmp slt i32 %267, 127
  %269 = select i1 %268, i32 %267, i32 127
  %270 = icmp sgt i32 %269, -128
  %271 = select i1 %270, i32 %269, i32 -128
  %272 = trunc i32 %271 to i8
  %273 = select i1 %242, i8 0, i8 %272
  %274 = icmp slt i8 %273, 123
  %275 = select i1 %274, i8 %273, i8 123
  %276 = add nsw i8 %275, 4
  %277 = ashr i8 %276, 3
  %278 = icmp slt i8 %273, 124
  %279 = select i1 %278, i8 %273, i8 124
  %280 = add nsw i8 %279, 3
  %281 = ashr i8 %280, 3
  %282 = sext i8 %277 to i32
  %283 = sub nsw i32 %263, %282
  %284 = icmp slt i32 %283, 127
  %285 = select i1 %284, i32 %283, i32 127
  %286 = icmp sgt i32 %285, -128
  %287 = select i1 %286, i32 %285, i32 -128
  %288 = trunc i32 %287 to i8
  %289 = xor i8 %288, -128
  store i8 %289, i8* %167, align 1
  %290 = sext i8 %281 to i32
  %291 = add nsw i32 %290, %264
  %292 = icmp slt i32 %291, 127
  %293 = select i1 %292, i32 %291, i32 127
  %294 = icmp sgt i32 %293, -128
  %295 = select i1 %294, i32 %293, i32 -128
  %296 = trunc i32 %295 to i8
  %297 = xor i8 %296, -128
  store i8 %297, i8* %175, align 1
  %298 = add nsw i8 %277, 1
  %299 = ashr i8 %298, 1
  %300 = xor i8 %252, -1
  %301 = and i8 %299, %300
  %302 = sext i8 %301 to i32
  %303 = sub nsw i32 %254, %302
  %304 = icmp slt i32 %303, 127
  %305 = select i1 %304, i32 %303, i32 127
  %306 = icmp sgt i32 %305, -128
  %307 = select i1 %306, i32 %305, i32 -128
  %308 = trunc i32 %307 to i8
  %309 = xor i8 %308, -128
  store i8 %309, i8* %177, align 1
  %310 = add nsw i32 %302, %253
  %311 = icmp slt i32 %310, 127
  %312 = select i1 %311, i32 %310, i32 127
  %313 = icmp sgt i32 %312, -128
  %314 = select i1 %313, i32 %312, i32 -128
  %315 = trunc i32 %314 to i8
  %316 = xor i8 %315, -128
  store i8 %316, i8* %173, align 1
  %317 = getelementptr inbounds i8, i8* %167, i64 %6
  %318 = add nuw nsw i32 %168, 1
  %319 = icmp eq i32 %318, 8
  br i1 %319, label %320, label %165

320:                                              ; preds = %8, %165
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @vpx_lpf_vertical_4_dual_c(i8* nocapture, i32, i8* nocapture readonly, i8* nocapture readonly, i8* nocapture readonly, i8* nocapture readonly, i8* nocapture readonly, i8* nocapture readonly) local_unnamed_addr #0 {
  tail call void @vpx_lpf_vertical_4_c(i8* %0, i32 %1, i8* %2, i8* %3, i8* %4)
  %9 = shl nsw i32 %1, 3
  %10 = sext i32 %9 to i64
  %11 = getelementptr inbounds i8, i8* %0, i64 %10
  tail call void @vpx_lpf_vertical_4_c(i8* %11, i32 %1, i8* %5, i8* %6, i8* %7)
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @vpx_lpf_horizontal_8_c(i8* nocapture, i32, i8* nocapture readonly, i8* nocapture readonly, i8* nocapture readonly) local_unnamed_addr #0 {
  %6 = mul nsw i32 %1, -4
  %7 = sext i32 %6 to i64
  %8 = mul nsw i32 %1, -3
  %9 = sext i32 %8 to i64
  %10 = mul nsw i32 %1, -2
  %11 = sext i32 %10 to i64
  %12 = sub nsw i32 0, %1
  %13 = sext i32 %12 to i64
  %14 = sext i32 %1 to i64
  %15 = shl nsw i32 %1, 1
  %16 = sext i32 %15 to i64
  %17 = mul nsw i32 %1, 3
  %18 = sext i32 %17 to i64
  %19 = shl nsw i32 %1, 2
  %20 = sext i32 %19 to i64
  %21 = sub nsw i64 0, %20
  %22 = sub nsw i64 0, %18
  %23 = sub nsw i64 0, %16
  %24 = sub nsw i64 0, %14
  br label %25

25:                                               ; preds = %25, %5
  %26 = phi i8* [ %0, %5 ], [ %139, %25 ]
  %27 = phi i32 [ 0, %5 ], [ %140, %25 ]
  %28 = getelementptr inbounds i8, i8* %26, i64 %7
  %29 = load i8, i8* %28, align 1
  %30 = getelementptr inbounds i8, i8* %26, i64 %9
  %31 = load i8, i8* %30, align 1
  %32 = getelementptr inbounds i8, i8* %26, i64 %11
  %33 = load i8, i8* %32, align 1
  %34 = getelementptr inbounds i8, i8* %26, i64 %13
  %35 = load i8, i8* %34, align 1
  %36 = load i8, i8* %26, align 1
  %37 = getelementptr inbounds i8, i8* %26, i64 %14
  %38 = load i8, i8* %37, align 1
  %39 = getelementptr inbounds i8, i8* %26, i64 %16
  %40 = load i8, i8* %39, align 1
  %41 = getelementptr inbounds i8, i8* %26, i64 %18
  %42 = load i8, i8* %41, align 1
  %43 = load i8, i8* %3, align 1
  %44 = load i8, i8* %2, align 1
  %45 = zext i8 %29 to i32
  %46 = zext i8 %31 to i32
  %47 = sub nsw i32 %45, %46
  %48 = icmp slt i32 %47, 0
  %49 = sub nsw i32 0, %47
  %50 = select i1 %48, i32 %49, i32 %47
  %51 = zext i8 %43 to i32
  %52 = icmp sgt i32 %50, %51
  %53 = zext i8 %33 to i32
  %54 = sub nsw i32 %46, %53
  %55 = icmp slt i32 %54, 0
  %56 = sub nsw i32 0, %54
  %57 = select i1 %55, i32 %56, i32 %54
  %58 = icmp sgt i32 %57, %51
  %59 = or i1 %52, %58
  %60 = zext i8 %35 to i32
  %61 = sub nsw i32 %53, %60
  %62 = icmp slt i32 %61, 0
  %63 = sub nsw i32 0, %61
  %64 = select i1 %62, i32 %63, i32 %61
  %65 = icmp sgt i32 %64, %51
  %66 = or i1 %65, %59
  %67 = zext i8 %38 to i32
  %68 = zext i8 %36 to i32
  %69 = sub nsw i32 %67, %68
  %70 = icmp slt i32 %69, 0
  %71 = sub nsw i32 0, %69
  %72 = select i1 %70, i32 %71, i32 %69
  %73 = icmp sgt i32 %72, %51
  %74 = or i1 %73, %66
  %75 = zext i8 %40 to i32
  %76 = sub nsw i32 %75, %67
  %77 = icmp slt i32 %76, 0
  %78 = sub nsw i32 0, %76
  %79 = select i1 %77, i32 %78, i32 %76
  %80 = icmp sgt i32 %79, %51
  %81 = or i1 %80, %74
  %82 = zext i8 %42 to i32
  %83 = sub nsw i32 %82, %75
  %84 = icmp slt i32 %83, 0
  %85 = sub nsw i32 0, %83
  %86 = select i1 %84, i32 %85, i32 %83
  %87 = icmp sgt i32 %86, %51
  %88 = or i1 %87, %81
  %89 = sub nsw i32 %60, %68
  %90 = icmp slt i32 %89, 0
  %91 = sub nsw i32 0, %89
  %92 = select i1 %90, i32 %91, i32 %89
  %93 = shl nuw nsw i32 %92, 1
  %94 = sub nsw i32 %53, %67
  %95 = icmp slt i32 %94, 0
  %96 = sub nsw i32 0, %94
  %97 = select i1 %95, i32 %96, i32 %94
  %98 = lshr i32 %97, 1
  %99 = add nuw nsw i32 %98, %93
  %100 = zext i8 %44 to i32
  %101 = icmp sgt i32 %99, %100
  %102 = or i1 %101, %88
  %103 = xor i1 %102, true
  %104 = sext i1 %103 to i8
  %105 = icmp sgt i32 %64, 1
  %106 = icmp sgt i32 %72, 1
  %107 = or i1 %105, %106
  %108 = sub nsw i32 %46, %60
  %109 = icmp slt i32 %108, 0
  %110 = sub nsw i32 0, %108
  %111 = select i1 %109, i32 %110, i32 %108
  %112 = icmp sgt i32 %111, 1
  %113 = or i1 %112, %107
  %114 = sub nsw i32 %75, %68
  %115 = icmp slt i32 %114, 0
  %116 = sub nsw i32 0, %114
  %117 = select i1 %115, i32 %116, i32 %114
  %118 = icmp sgt i32 %117, 1
  %119 = or i1 %118, %113
  %120 = sub nsw i32 %45, %60
  %121 = icmp slt i32 %120, 0
  %122 = sub nsw i32 0, %120
  %123 = select i1 %121, i32 %122, i32 %120
  %124 = icmp sgt i32 %123, 1
  %125 = or i1 %124, %119
  %126 = sub nsw i32 %82, %68
  %127 = icmp slt i32 %126, 0
  %128 = sub nsw i32 0, %126
  %129 = select i1 %127, i32 %128, i32 %126
  %130 = icmp sgt i32 %129, 1
  %131 = or i1 %130, %125
  %132 = xor i1 %131, true
  %133 = sext i1 %132 to i8
  %134 = load i8, i8* %4, align 1
  %135 = getelementptr inbounds i8, i8* %26, i64 %21
  %136 = getelementptr inbounds i8, i8* %26, i64 %22
  %137 = getelementptr inbounds i8, i8* %26, i64 %23
  %138 = getelementptr inbounds i8, i8* %26, i64 %24
  tail call fastcc void @filter8(i8 signext %104, i8 zeroext %134, i8 zeroext %133, i8* %135, i8* %136, i8* %137, i8* %138, i8* %26, i8* %37, i8* %39, i8* %41)
  %139 = getelementptr inbounds i8, i8* %26, i64 1
  %140 = add nuw nsw i32 %27, 1
  %141 = icmp eq i32 %140, 8
  br i1 %141, label %142, label %25

142:                                              ; preds = %25
  ret void
}

; Function Attrs: inlinehint nofree norecurse nounwind ssp uwtable
define internal fastcc void @filter8(i8 signext, i8 zeroext, i8 zeroext, i8* nocapture readonly, i8* nocapture, i8* nocapture, i8* nocapture, i8* nocapture, i8* nocapture, i8* nocapture, i8* nocapture readonly) unnamed_addr #1 {
  %12 = icmp eq i8 %2, 0
  %13 = icmp eq i8 %0, 0
  %14 = or i1 %13, %12
  br i1 %14, label %83, label %15

15:                                               ; preds = %11
  %16 = load i8, i8* %3, align 1
  %17 = load i8, i8* %4, align 1
  %18 = load i8, i8* %5, align 1
  %19 = load i8, i8* %6, align 1
  %20 = load i8, i8* %7, align 1
  %21 = load i8, i8* %8, align 1
  %22 = load i8, i8* %9, align 1
  %23 = load i8, i8* %10, align 1
  %24 = zext i8 %16 to i32
  %25 = mul nuw nsw i32 %24, 3
  %26 = zext i8 %17 to i32
  %27 = shl nuw nsw i32 %26, 1
  %28 = zext i8 %18 to i32
  %29 = zext i8 %19 to i32
  %30 = zext i8 %20 to i32
  %31 = add nuw nsw i32 %29, 4
  %32 = add nuw nsw i32 %31, %25
  %33 = add nuw nsw i32 %32, %27
  %34 = add nuw nsw i32 %33, %28
  %35 = add nuw nsw i32 %34, %30
  %36 = lshr i32 %35, 3
  %37 = trunc i32 %36 to i8
  store i8 %37, i8* %4, align 1
  %38 = zext i8 %21 to i32
  %39 = add nuw nsw i32 %28, %24
  %40 = shl nuw nsw i32 %39, 1
  %41 = add nuw nsw i32 %31, %26
  %42 = add nuw nsw i32 %41, %30
  %43 = add nuw nsw i32 %42, %40
  %44 = add nuw nsw i32 %43, %38
  %45 = lshr i32 %44, 3
  %46 = trunc i32 %45 to i8
  store i8 %46, i8* %5, align 1
  %47 = shl nuw nsw i32 %29, 1
  %48 = zext i8 %22 to i32
  %49 = add nuw nsw i32 %30, 4
  %50 = add nuw nsw i32 %49, %24
  %51 = add nuw nsw i32 %50, %26
  %52 = add nuw nsw i32 %51, %28
  %53 = add nuw nsw i32 %52, %47
  %54 = add nuw nsw i32 %53, %38
  %55 = add nuw nsw i32 %54, %48
  %56 = lshr i32 %55, 3
  %57 = trunc i32 %56 to i8
  store i8 %57, i8* %6, align 1
  %58 = shl nuw nsw i32 %30, 1
  %59 = zext i8 %23 to i32
  %60 = add nuw nsw i32 %41, %28
  %61 = add nuw nsw i32 %60, %58
  %62 = add nuw nsw i32 %61, %38
  %63 = add nuw nsw i32 %62, %48
  %64 = add nuw nsw i32 %63, %59
  %65 = lshr i32 %64, 3
  %66 = trunc i32 %65 to i8
  store i8 %66, i8* %7, align 1
  %67 = add nuw nsw i32 %59, %38
  %68 = shl nuw nsw i32 %67, 1
  %69 = add nuw nsw i32 %31, %28
  %70 = add nuw nsw i32 %69, %30
  %71 = add nuw nsw i32 %70, %48
  %72 = add nuw nsw i32 %71, %68
  %73 = lshr i32 %72, 3
  %74 = trunc i32 %73 to i8
  store i8 %74, i8* %8, align 1
  %75 = shl nuw nsw i32 %48, 1
  %76 = mul nuw nsw i32 %59, 3
  %77 = add nuw nsw i32 %31, %30
  %78 = add nuw nsw i32 %77, %38
  %79 = add nuw nsw i32 %78, %75
  %80 = add nuw nsw i32 %79, %76
  %81 = lshr i32 %80, 3
  %82 = trunc i32 %81 to i8
  store i8 %82, i8* %9, align 1
  br label %173

83:                                               ; preds = %11
  %84 = load i8, i8* %5, align 1
  %85 = xor i8 %84, -128
  %86 = load i8, i8* %6, align 1
  %87 = xor i8 %86, -128
  %88 = load i8, i8* %7, align 1
  %89 = xor i8 %88, -128
  %90 = load i8, i8* %8, align 1
  %91 = xor i8 %90, -128
  %92 = zext i8 %84 to i32
  %93 = zext i8 %86 to i32
  %94 = sub nsw i32 %92, %93
  %95 = icmp slt i32 %94, 0
  %96 = sub nsw i32 0, %94
  %97 = select i1 %95, i32 %96, i32 %94
  %98 = zext i8 %1 to i32
  %99 = icmp sgt i32 %97, %98
  %100 = zext i8 %90 to i32
  %101 = zext i8 %88 to i32
  %102 = sub nsw i32 %100, %101
  %103 = icmp slt i32 %102, 0
  %104 = sub nsw i32 0, %102
  %105 = select i1 %103, i32 %104, i32 %102
  %106 = icmp sgt i32 %105, %98
  %107 = or i1 %99, %106
  %108 = sext i1 %107 to i8
  %109 = sext i8 %85 to i32
  %110 = sext i8 %91 to i32
  %111 = sub nsw i32 %109, %110
  %112 = icmp slt i32 %111, 127
  %113 = select i1 %112, i32 %111, i32 127
  %114 = icmp sgt i32 %113, -128
  %115 = select i1 %114, i32 %113, i32 -128
  %116 = trunc i32 %115 to i8
  %117 = and i8 %116, %108
  %118 = sext i8 %117 to i32
  %119 = sext i8 %89 to i32
  %120 = sext i8 %87 to i32
  %121 = sub nsw i32 %119, %120
  %122 = mul nsw i32 %121, 3
  %123 = add nsw i32 %122, %118
  %124 = icmp slt i32 %123, 127
  %125 = select i1 %124, i32 %123, i32 127
  %126 = icmp sgt i32 %125, -128
  %127 = select i1 %126, i32 %125, i32 -128
  %128 = trunc i32 %127 to i8
  %129 = and i8 %128, %0
  %130 = icmp slt i8 %129, 123
  %131 = select i1 %130, i8 %129, i8 123
  %132 = add nsw i8 %131, 4
  %133 = ashr i8 %132, 3
  %134 = icmp slt i8 %129, 124
  %135 = select i1 %134, i8 %129, i8 124
  %136 = add nsw i8 %135, 3
  %137 = ashr i8 %136, 3
  %138 = sext i8 %133 to i32
  %139 = sub nsw i32 %119, %138
  %140 = icmp slt i32 %139, 127
  %141 = select i1 %140, i32 %139, i32 127
  %142 = icmp sgt i32 %141, -128
  %143 = select i1 %142, i32 %141, i32 -128
  %144 = trunc i32 %143 to i8
  %145 = xor i8 %144, -128
  store i8 %145, i8* %7, align 1
  %146 = sext i8 %137 to i32
  %147 = add nsw i32 %146, %120
  %148 = icmp slt i32 %147, 127
  %149 = select i1 %148, i32 %147, i32 127
  %150 = icmp sgt i32 %149, -128
  %151 = select i1 %150, i32 %149, i32 -128
  %152 = trunc i32 %151 to i8
  %153 = xor i8 %152, -128
  store i8 %153, i8* %6, align 1
  %154 = add nsw i8 %133, 1
  %155 = ashr i8 %154, 1
  %156 = xor i8 %108, -1
  %157 = and i8 %155, %156
  %158 = sext i8 %157 to i32
  %159 = sub nsw i32 %110, %158
  %160 = icmp slt i32 %159, 127
  %161 = select i1 %160, i32 %159, i32 127
  %162 = icmp sgt i32 %161, -128
  %163 = select i1 %162, i32 %161, i32 -128
  %164 = trunc i32 %163 to i8
  %165 = xor i8 %164, -128
  store i8 %165, i8* %8, align 1
  %166 = add nsw i32 %158, %109
  %167 = icmp slt i32 %166, 127
  %168 = select i1 %167, i32 %166, i32 127
  %169 = icmp sgt i32 %168, -128
  %170 = select i1 %169, i32 %168, i32 -128
  %171 = trunc i32 %170 to i8
  %172 = xor i8 %171, -128
  store i8 %172, i8* %5, align 1
  br label %173

173:                                              ; preds = %83, %15
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @vpx_lpf_horizontal_8_dual_c(i8* nocapture, i32, i8* nocapture readonly, i8* nocapture readonly, i8* nocapture readonly, i8* nocapture readonly, i8* nocapture readonly, i8* nocapture readonly) local_unnamed_addr #0 {
  tail call void @vpx_lpf_horizontal_8_c(i8* %0, i32 %1, i8* %2, i8* %3, i8* %4)
  %9 = getelementptr inbounds i8, i8* %0, i64 8
  tail call void @vpx_lpf_horizontal_8_c(i8* %9, i32 %1, i8* %5, i8* %6, i8* %7)
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @vpx_lpf_vertical_8_c(i8* nocapture, i32, i8* nocapture readonly, i8* nocapture readonly, i8* nocapture readonly) local_unnamed_addr #0 {
  %6 = sext i32 %1 to i64
  br label %7

7:                                                ; preds = %7, %5
  %8 = phi i8* [ %0, %5 ], [ %117, %7 ]
  %9 = phi i32 [ 0, %5 ], [ %118, %7 ]
  %10 = getelementptr inbounds i8, i8* %8, i64 -4
  %11 = load i8, i8* %10, align 1
  %12 = getelementptr inbounds i8, i8* %8, i64 -3
  %13 = load i8, i8* %12, align 1
  %14 = getelementptr inbounds i8, i8* %8, i64 -2
  %15 = load i8, i8* %14, align 1
  %16 = getelementptr inbounds i8, i8* %8, i64 -1
  %17 = load i8, i8* %16, align 1
  %18 = load i8, i8* %8, align 1
  %19 = getelementptr inbounds i8, i8* %8, i64 1
  %20 = load i8, i8* %19, align 1
  %21 = getelementptr inbounds i8, i8* %8, i64 2
  %22 = load i8, i8* %21, align 1
  %23 = getelementptr inbounds i8, i8* %8, i64 3
  %24 = load i8, i8* %23, align 1
  %25 = load i8, i8* %3, align 1
  %26 = load i8, i8* %2, align 1
  %27 = zext i8 %11 to i32
  %28 = zext i8 %13 to i32
  %29 = sub nsw i32 %27, %28
  %30 = icmp slt i32 %29, 0
  %31 = sub nsw i32 0, %29
  %32 = select i1 %30, i32 %31, i32 %29
  %33 = zext i8 %25 to i32
  %34 = icmp sgt i32 %32, %33
  %35 = zext i8 %15 to i32
  %36 = sub nsw i32 %28, %35
  %37 = icmp slt i32 %36, 0
  %38 = sub nsw i32 0, %36
  %39 = select i1 %37, i32 %38, i32 %36
  %40 = icmp sgt i32 %39, %33
  %41 = or i1 %34, %40
  %42 = zext i8 %17 to i32
  %43 = sub nsw i32 %35, %42
  %44 = icmp slt i32 %43, 0
  %45 = sub nsw i32 0, %43
  %46 = select i1 %44, i32 %45, i32 %43
  %47 = icmp sgt i32 %46, %33
  %48 = or i1 %47, %41
  %49 = zext i8 %20 to i32
  %50 = zext i8 %18 to i32
  %51 = sub nsw i32 %49, %50
  %52 = icmp slt i32 %51, 0
  %53 = sub nsw i32 0, %51
  %54 = select i1 %52, i32 %53, i32 %51
  %55 = icmp sgt i32 %54, %33
  %56 = or i1 %55, %48
  %57 = zext i8 %22 to i32
  %58 = sub nsw i32 %57, %49
  %59 = icmp slt i32 %58, 0
  %60 = sub nsw i32 0, %58
  %61 = select i1 %59, i32 %60, i32 %58
  %62 = icmp sgt i32 %61, %33
  %63 = or i1 %62, %56
  %64 = zext i8 %24 to i32
  %65 = sub nsw i32 %64, %57
  %66 = icmp slt i32 %65, 0
  %67 = sub nsw i32 0, %65
  %68 = select i1 %66, i32 %67, i32 %65
  %69 = icmp sgt i32 %68, %33
  %70 = or i1 %69, %63
  %71 = sub nsw i32 %42, %50
  %72 = icmp slt i32 %71, 0
  %73 = sub nsw i32 0, %71
  %74 = select i1 %72, i32 %73, i32 %71
  %75 = shl nuw nsw i32 %74, 1
  %76 = sub nsw i32 %35, %49
  %77 = icmp slt i32 %76, 0
  %78 = sub nsw i32 0, %76
  %79 = select i1 %77, i32 %78, i32 %76
  %80 = lshr i32 %79, 1
  %81 = add nuw nsw i32 %80, %75
  %82 = zext i8 %26 to i32
  %83 = icmp sgt i32 %81, %82
  %84 = or i1 %83, %70
  %85 = xor i1 %84, true
  %86 = sext i1 %85 to i8
  %87 = icmp sgt i32 %46, 1
  %88 = icmp sgt i32 %54, 1
  %89 = or i1 %87, %88
  %90 = sub nsw i32 %28, %42
  %91 = icmp slt i32 %90, 0
  %92 = sub nsw i32 0, %90
  %93 = select i1 %91, i32 %92, i32 %90
  %94 = icmp sgt i32 %93, 1
  %95 = or i1 %94, %89
  %96 = sub nsw i32 %57, %50
  %97 = icmp slt i32 %96, 0
  %98 = sub nsw i32 0, %96
  %99 = select i1 %97, i32 %98, i32 %96
  %100 = icmp sgt i32 %99, 1
  %101 = or i1 %100, %95
  %102 = sub nsw i32 %27, %42
  %103 = icmp slt i32 %102, 0
  %104 = sub nsw i32 0, %102
  %105 = select i1 %103, i32 %104, i32 %102
  %106 = icmp sgt i32 %105, 1
  %107 = or i1 %106, %101
  %108 = sub nsw i32 %64, %50
  %109 = icmp slt i32 %108, 0
  %110 = sub nsw i32 0, %108
  %111 = select i1 %109, i32 %110, i32 %108
  %112 = icmp sgt i32 %111, 1
  %113 = or i1 %112, %107
  %114 = xor i1 %113, true
  %115 = sext i1 %114 to i8
  %116 = load i8, i8* %4, align 1
  tail call fastcc void @filter8(i8 signext %86, i8 zeroext %116, i8 zeroext %115, i8* %10, i8* %12, i8* %14, i8* %16, i8* %8, i8* %19, i8* %21, i8* %23)
  %117 = getelementptr inbounds i8, i8* %8, i64 %6
  %118 = add nuw nsw i32 %9, 1
  %119 = icmp eq i32 %118, 8
  br i1 %119, label %120, label %7

120:                                              ; preds = %7
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @vpx_lpf_vertical_8_dual_c(i8* nocapture, i32, i8* nocapture readonly, i8* nocapture readonly, i8* nocapture readonly, i8* nocapture readonly, i8* nocapture readonly, i8* nocapture readonly) local_unnamed_addr #0 {
  tail call void @vpx_lpf_vertical_8_c(i8* %0, i32 %1, i8* %2, i8* %3, i8* %4)
  %9 = shl nsw i32 %1, 3
  %10 = sext i32 %9 to i64
  %11 = getelementptr inbounds i8, i8* %0, i64 %10
  tail call void @vpx_lpf_vertical_8_c(i8* %11, i32 %1, i8* %5, i8* %6, i8* %7)
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @vpx_lpf_horizontal_16_c(i8*, i32, i8* nocapture readonly, i8* nocapture readonly, i8* nocapture readonly) local_unnamed_addr #0 {
  tail call fastcc void @mb_lpf_horizontal_edge_w(i8* %0, i32 %1, i8* %2, i8* %3, i8* %4, i32 1)
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal fastcc void @mb_lpf_horizontal_edge_w(i8*, i32, i8* nocapture readonly, i8* nocapture readonly, i8* nocapture readonly, i32) unnamed_addr #0 {
  %7 = shl nsw i32 %5, 3
  %8 = icmp sgt i32 %5, 0
  br i1 %8, label %9, label %213

9:                                                ; preds = %6
  %10 = mul nsw i32 %1, -4
  %11 = sext i32 %10 to i64
  %12 = mul nsw i32 %1, -3
  %13 = sext i32 %12 to i64
  %14 = mul nsw i32 %1, -2
  %15 = sext i32 %14 to i64
  %16 = sub nsw i32 0, %1
  %17 = sext i32 %16 to i64
  %18 = sext i32 %1 to i64
  %19 = shl nsw i32 %1, 1
  %20 = sext i32 %19 to i64
  %21 = mul nsw i32 %1, 3
  %22 = sext i32 %21 to i64
  %23 = mul nsw i32 %1, -8
  %24 = sext i32 %23 to i64
  %25 = mul nsw i32 %1, -7
  %26 = sext i32 %25 to i64
  %27 = mul nsw i32 %1, -6
  %28 = sext i32 %27 to i64
  %29 = mul nsw i32 %1, -5
  %30 = sext i32 %29 to i64
  %31 = shl nsw i32 %1, 2
  %32 = sext i32 %31 to i64
  %33 = mul nsw i32 %1, 5
  %34 = sext i32 %33 to i64
  %35 = mul nsw i32 %1, 6
  %36 = sext i32 %35 to i64
  %37 = mul nsw i32 %1, 7
  %38 = sext i32 %37 to i64
  %39 = shl nsw i32 %1, 3
  %40 = sext i32 %39 to i64
  %41 = sub nsw i64 0, %40
  %42 = sub nsw i64 0, %38
  %43 = sub nsw i64 0, %36
  %44 = sub nsw i64 0, %34
  %45 = sub nsw i64 0, %32
  %46 = sub nsw i64 0, %22
  %47 = sub nsw i64 0, %20
  %48 = sub nsw i64 0, %18
  br label %49

49:                                               ; preds = %9, %49
  %50 = phi i8* [ %0, %9 ], [ %210, %49 ]
  %51 = phi i32 [ 0, %9 ], [ %211, %49 ]
  %52 = getelementptr inbounds i8, i8* %50, i64 %11
  %53 = load i8, i8* %52, align 1
  %54 = getelementptr inbounds i8, i8* %50, i64 %13
  %55 = load i8, i8* %54, align 1
  %56 = getelementptr inbounds i8, i8* %50, i64 %15
  %57 = load i8, i8* %56, align 1
  %58 = getelementptr inbounds i8, i8* %50, i64 %17
  %59 = load i8, i8* %58, align 1
  %60 = load i8, i8* %50, align 1
  %61 = getelementptr inbounds i8, i8* %50, i64 %18
  %62 = load i8, i8* %61, align 1
  %63 = getelementptr inbounds i8, i8* %50, i64 %20
  %64 = load i8, i8* %63, align 1
  %65 = getelementptr inbounds i8, i8* %50, i64 %22
  %66 = load i8, i8* %65, align 1
  %67 = load i8, i8* %3, align 1
  %68 = load i8, i8* %2, align 1
  %69 = zext i8 %53 to i32
  %70 = zext i8 %55 to i32
  %71 = sub nsw i32 %69, %70
  %72 = icmp slt i32 %71, 0
  %73 = sub nsw i32 0, %71
  %74 = select i1 %72, i32 %73, i32 %71
  %75 = zext i8 %67 to i32
  %76 = icmp sgt i32 %74, %75
  %77 = zext i8 %57 to i32
  %78 = sub nsw i32 %70, %77
  %79 = icmp slt i32 %78, 0
  %80 = sub nsw i32 0, %78
  %81 = select i1 %79, i32 %80, i32 %78
  %82 = icmp sgt i32 %81, %75
  %83 = or i1 %76, %82
  %84 = insertelement <2 x i8> undef, i8 %59, i32 0
  %85 = insertelement <2 x i8> %84, i8 %60, i32 1
  %86 = zext <2 x i8> %85 to <2 x i32>
  %87 = shufflevector <2 x i32> %86, <2 x i32> undef, <8 x i32> <i32 0, i32 1, i32 1, i32 0, i32 1, i32 0, i32 0, i32 1>
  %88 = extractelement <2 x i32> %86, i32 0
  %89 = sub nsw i32 %77, %88
  %90 = icmp slt i32 %89, 0
  %91 = sub nsw i32 0, %89
  %92 = select i1 %90, i32 %91, i32 %89
  %93 = icmp sgt i32 %92, %75
  %94 = or i1 %93, %83
  %95 = zext i8 %62 to i32
  %96 = extractelement <2 x i32> %86, i32 1
  %97 = sub nsw i32 %95, %96
  %98 = icmp slt i32 %97, 0
  %99 = sub nsw i32 0, %97
  %100 = select i1 %98, i32 %99, i32 %97
  %101 = icmp sgt i32 %100, %75
  %102 = or i1 %101, %94
  %103 = zext i8 %64 to i32
  %104 = sub nsw i32 %103, %95
  %105 = icmp slt i32 %104, 0
  %106 = sub nsw i32 0, %104
  %107 = select i1 %105, i32 %106, i32 %104
  %108 = icmp sgt i32 %107, %75
  %109 = or i1 %108, %102
  %110 = zext i8 %66 to i32
  %111 = sub nsw i32 %110, %103
  %112 = icmp slt i32 %111, 0
  %113 = sub nsw i32 0, %111
  %114 = select i1 %112, i32 %113, i32 %111
  %115 = icmp sgt i32 %114, %75
  %116 = or i1 %115, %109
  %117 = sub nsw i32 %88, %96
  %118 = icmp slt i32 %117, 0
  %119 = sub nsw i32 0, %117
  %120 = select i1 %118, i32 %119, i32 %117
  %121 = shl nuw nsw i32 %120, 1
  %122 = sub nsw i32 %77, %95
  %123 = icmp slt i32 %122, 0
  %124 = sub nsw i32 0, %122
  %125 = select i1 %123, i32 %124, i32 %122
  %126 = lshr i32 %125, 1
  %127 = add nuw nsw i32 %126, %121
  %128 = zext i8 %68 to i32
  %129 = icmp sgt i32 %127, %128
  %130 = or i1 %129, %116
  %131 = xor i1 %130, true
  %132 = sext i1 %131 to i8
  %133 = icmp sgt i32 %92, 1
  %134 = icmp sgt i32 %100, 1
  %135 = or i1 %133, %134
  %136 = sub nsw i32 %70, %88
  %137 = icmp slt i32 %136, 0
  %138 = sub nsw i32 0, %136
  %139 = select i1 %137, i32 %138, i32 %136
  %140 = icmp sgt i32 %139, 1
  %141 = or i1 %140, %135
  %142 = sub nsw i32 %103, %96
  %143 = icmp slt i32 %142, 0
  %144 = sub nsw i32 0, %142
  %145 = select i1 %143, i32 %144, i32 %142
  %146 = icmp sgt i32 %145, 1
  %147 = or i1 %146, %141
  %148 = sub nsw i32 %69, %88
  %149 = icmp slt i32 %148, 0
  %150 = sub nsw i32 0, %148
  %151 = select i1 %149, i32 %150, i32 %148
  %152 = icmp sgt i32 %151, 1
  %153 = or i1 %152, %147
  %154 = sub nsw i32 %110, %96
  %155 = icmp slt i32 %154, 0
  %156 = sub nsw i32 0, %154
  %157 = select i1 %155, i32 %156, i32 %154
  %158 = icmp sgt i32 %157, 1
  %159 = or i1 %158, %153
  %160 = xor i1 %159, true
  %161 = sext i1 %160 to i8
  %162 = getelementptr inbounds i8, i8* %50, i64 %24
  %163 = load i8, i8* %162, align 1
  %164 = getelementptr inbounds i8, i8* %50, i64 %26
  %165 = load i8, i8* %164, align 1
  %166 = getelementptr inbounds i8, i8* %50, i64 %28
  %167 = load i8, i8* %166, align 1
  %168 = getelementptr inbounds i8, i8* %50, i64 %30
  %169 = load i8, i8* %168, align 1
  %170 = getelementptr inbounds i8, i8* %50, i64 %32
  %171 = load i8, i8* %170, align 1
  %172 = getelementptr inbounds i8, i8* %50, i64 %34
  %173 = load i8, i8* %172, align 1
  %174 = getelementptr inbounds i8, i8* %50, i64 %36
  %175 = load i8, i8* %174, align 1
  %176 = getelementptr inbounds i8, i8* %50, i64 %38
  %177 = load i8, i8* %176, align 1
  %178 = insertelement <8 x i8> undef, i8 %163, i32 0
  %179 = insertelement <8 x i8> %178, i8 %177, i32 1
  %180 = insertelement <8 x i8> %179, i8 %175, i32 2
  %181 = insertelement <8 x i8> %180, i8 %165, i32 3
  %182 = insertelement <8 x i8> %181, i8 %173, i32 4
  %183 = insertelement <8 x i8> %182, i8 %167, i32 5
  %184 = insertelement <8 x i8> %183, i8 %169, i32 6
  %185 = insertelement <8 x i8> %184, i8 %171, i32 7
  %186 = zext <8 x i8> %185 to <8 x i32>
  %187 = sub nsw <8 x i32> %186, %87
  %188 = icmp slt <8 x i32> %187, zeroinitializer
  %189 = sub nsw <8 x i32> zeroinitializer, %187
  %190 = select <8 x i1> %188, <8 x i32> %189, <8 x i32> %187
  %191 = icmp sgt <8 x i32> %190, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %192 = shufflevector <8 x i1> %191, <8 x i1> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %193 = or <8 x i1> %191, %192
  %194 = shufflevector <8 x i1> %193, <8 x i1> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %195 = or <8 x i1> %193, %194
  %196 = shufflevector <8 x i1> %195, <8 x i1> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %197 = or <8 x i1> %195, %196
  %198 = extractelement <8 x i1> %197, i32 0
  %199 = xor i1 %198, true
  %200 = sext i1 %199 to i8
  %201 = load i8, i8* %4, align 1
  %202 = getelementptr inbounds i8, i8* %50, i64 %41
  %203 = getelementptr inbounds i8, i8* %50, i64 %42
  %204 = getelementptr inbounds i8, i8* %50, i64 %43
  %205 = getelementptr inbounds i8, i8* %50, i64 %44
  %206 = getelementptr inbounds i8, i8* %50, i64 %45
  %207 = getelementptr inbounds i8, i8* %50, i64 %46
  %208 = getelementptr inbounds i8, i8* %50, i64 %47
  %209 = getelementptr inbounds i8, i8* %50, i64 %48
  tail call fastcc void @filter16(i8 signext %132, i8 zeroext %201, i8 zeroext %161, i8 zeroext %200, i8* %202, i8* %203, i8* %204, i8* %205, i8* %206, i8* %207, i8* %208, i8* %209, i8* %50, i8* %61, i8* %63, i8* %65, i8* %170, i8* %172, i8* %174, i8* %176)
  %210 = getelementptr inbounds i8, i8* %50, i64 1
  %211 = add nuw nsw i32 %51, 1
  %212 = icmp slt i32 %211, %7
  br i1 %212, label %49, label %213

213:                                              ; preds = %49, %6
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @vpx_lpf_horizontal_16_dual_c(i8*, i32, i8* nocapture readonly, i8* nocapture readonly, i8* nocapture readonly) local_unnamed_addr #0 {
  tail call fastcc void @mb_lpf_horizontal_edge_w(i8* %0, i32 %1, i8* %2, i8* %3, i8* %4, i32 2)
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @vpx_lpf_vertical_16_c(i8* nocapture, i32, i8* nocapture readonly, i8* nocapture readonly, i8* nocapture readonly) local_unnamed_addr #0 {
  tail call fastcc void @mb_lpf_vertical_edge_w(i8* %0, i32 %1, i8* %2, i8* %3, i8* %4, i32 8)
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal fastcc void @mb_lpf_vertical_edge_w(i8* nocapture, i32, i8* nocapture readonly, i8* nocapture readonly, i8* nocapture readonly, i32) unnamed_addr #0 {
  %7 = icmp sgt i32 %5, 0
  br i1 %7, label %8, label %164

8:                                                ; preds = %6
  %9 = sext i32 %1 to i64
  br label %10

10:                                               ; preds = %10, %8
  %11 = phi i8* [ %0, %8 ], [ %161, %10 ]
  %12 = phi i32 [ 0, %8 ], [ %162, %10 ]
  %13 = getelementptr inbounds i8, i8* %11, i64 -4
  %14 = load i8, i8* %13, align 1
  %15 = getelementptr inbounds i8, i8* %11, i64 -3
  %16 = load i8, i8* %15, align 1
  %17 = getelementptr inbounds i8, i8* %11, i64 -2
  %18 = load i8, i8* %17, align 1
  %19 = getelementptr inbounds i8, i8* %11, i64 -1
  %20 = bitcast i8* %19 to <2 x i8>*
  %21 = load <2 x i8>, <2 x i8>* %20, align 1
  %22 = getelementptr inbounds i8, i8* %11, i64 1
  %23 = load i8, i8* %22, align 1
  %24 = getelementptr inbounds i8, i8* %11, i64 2
  %25 = load i8, i8* %24, align 1
  %26 = getelementptr inbounds i8, i8* %11, i64 3
  %27 = load i8, i8* %26, align 1
  %28 = load i8, i8* %3, align 1
  %29 = load i8, i8* %2, align 1
  %30 = zext i8 %14 to i32
  %31 = zext i8 %16 to i32
  %32 = sub nsw i32 %30, %31
  %33 = icmp slt i32 %32, 0
  %34 = sub nsw i32 0, %32
  %35 = select i1 %33, i32 %34, i32 %32
  %36 = zext i8 %28 to i32
  %37 = icmp sgt i32 %35, %36
  %38 = zext i8 %18 to i32
  %39 = sub nsw i32 %31, %38
  %40 = icmp slt i32 %39, 0
  %41 = sub nsw i32 0, %39
  %42 = select i1 %40, i32 %41, i32 %39
  %43 = icmp sgt i32 %42, %36
  %44 = or i1 %37, %43
  %45 = zext <2 x i8> %21 to <2 x i32>
  %46 = shufflevector <2 x i32> %45, <2 x i32> undef, <8 x i32> <i32 0, i32 1, i32 1, i32 0, i32 1, i32 0, i32 0, i32 1>
  %47 = extractelement <2 x i32> %45, i32 0
  %48 = sub nsw i32 %38, %47
  %49 = icmp slt i32 %48, 0
  %50 = sub nsw i32 0, %48
  %51 = select i1 %49, i32 %50, i32 %48
  %52 = icmp sgt i32 %51, %36
  %53 = or i1 %52, %44
  %54 = zext i8 %23 to i32
  %55 = extractelement <2 x i32> %45, i32 1
  %56 = sub nsw i32 %54, %55
  %57 = icmp slt i32 %56, 0
  %58 = sub nsw i32 0, %56
  %59 = select i1 %57, i32 %58, i32 %56
  %60 = icmp sgt i32 %59, %36
  %61 = or i1 %60, %53
  %62 = zext i8 %25 to i32
  %63 = sub nsw i32 %62, %54
  %64 = icmp slt i32 %63, 0
  %65 = sub nsw i32 0, %63
  %66 = select i1 %64, i32 %65, i32 %63
  %67 = icmp sgt i32 %66, %36
  %68 = or i1 %67, %61
  %69 = zext i8 %27 to i32
  %70 = sub nsw i32 %69, %62
  %71 = icmp slt i32 %70, 0
  %72 = sub nsw i32 0, %70
  %73 = select i1 %71, i32 %72, i32 %70
  %74 = icmp sgt i32 %73, %36
  %75 = or i1 %74, %68
  %76 = sub nsw i32 %47, %55
  %77 = icmp slt i32 %76, 0
  %78 = sub nsw i32 0, %76
  %79 = select i1 %77, i32 %78, i32 %76
  %80 = shl nuw nsw i32 %79, 1
  %81 = sub nsw i32 %38, %54
  %82 = icmp slt i32 %81, 0
  %83 = sub nsw i32 0, %81
  %84 = select i1 %82, i32 %83, i32 %81
  %85 = lshr i32 %84, 1
  %86 = add nuw nsw i32 %85, %80
  %87 = zext i8 %29 to i32
  %88 = icmp sgt i32 %86, %87
  %89 = or i1 %88, %75
  %90 = xor i1 %89, true
  %91 = sext i1 %90 to i8
  %92 = icmp sgt i32 %51, 1
  %93 = icmp sgt i32 %59, 1
  %94 = or i1 %92, %93
  %95 = sub nsw i32 %31, %47
  %96 = icmp slt i32 %95, 0
  %97 = sub nsw i32 0, %95
  %98 = select i1 %96, i32 %97, i32 %95
  %99 = icmp sgt i32 %98, 1
  %100 = or i1 %99, %94
  %101 = sub nsw i32 %62, %55
  %102 = icmp slt i32 %101, 0
  %103 = sub nsw i32 0, %101
  %104 = select i1 %102, i32 %103, i32 %101
  %105 = icmp sgt i32 %104, 1
  %106 = or i1 %105, %100
  %107 = sub nsw i32 %30, %47
  %108 = icmp slt i32 %107, 0
  %109 = sub nsw i32 0, %107
  %110 = select i1 %108, i32 %109, i32 %107
  %111 = icmp sgt i32 %110, 1
  %112 = or i1 %111, %106
  %113 = sub nsw i32 %69, %55
  %114 = icmp slt i32 %113, 0
  %115 = sub nsw i32 0, %113
  %116 = select i1 %114, i32 %115, i32 %113
  %117 = icmp sgt i32 %116, 1
  %118 = or i1 %117, %112
  %119 = xor i1 %118, true
  %120 = sext i1 %119 to i8
  %121 = getelementptr inbounds i8, i8* %11, i64 -8
  %122 = load i8, i8* %121, align 1
  %123 = getelementptr inbounds i8, i8* %11, i64 -7
  %124 = load i8, i8* %123, align 1
  %125 = getelementptr inbounds i8, i8* %11, i64 -6
  %126 = load i8, i8* %125, align 1
  %127 = getelementptr inbounds i8, i8* %11, i64 -5
  %128 = load i8, i8* %127, align 1
  %129 = getelementptr inbounds i8, i8* %11, i64 4
  %130 = load i8, i8* %129, align 1
  %131 = getelementptr inbounds i8, i8* %11, i64 5
  %132 = load i8, i8* %131, align 1
  %133 = getelementptr inbounds i8, i8* %11, i64 6
  %134 = load i8, i8* %133, align 1
  %135 = getelementptr inbounds i8, i8* %11, i64 7
  %136 = load i8, i8* %135, align 1
  %137 = insertelement <8 x i8> undef, i8 %122, i32 0
  %138 = insertelement <8 x i8> %137, i8 %136, i32 1
  %139 = insertelement <8 x i8> %138, i8 %134, i32 2
  %140 = insertelement <8 x i8> %139, i8 %124, i32 3
  %141 = insertelement <8 x i8> %140, i8 %132, i32 4
  %142 = insertelement <8 x i8> %141, i8 %126, i32 5
  %143 = insertelement <8 x i8> %142, i8 %128, i32 6
  %144 = insertelement <8 x i8> %143, i8 %130, i32 7
  %145 = zext <8 x i8> %144 to <8 x i32>
  %146 = sub nsw <8 x i32> %145, %46
  %147 = icmp slt <8 x i32> %146, zeroinitializer
  %148 = sub nsw <8 x i32> zeroinitializer, %146
  %149 = select <8 x i1> %147, <8 x i32> %148, <8 x i32> %146
  %150 = icmp sgt <8 x i32> %149, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %151 = shufflevector <8 x i1> %150, <8 x i1> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %152 = or <8 x i1> %150, %151
  %153 = shufflevector <8 x i1> %152, <8 x i1> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %154 = or <8 x i1> %152, %153
  %155 = shufflevector <8 x i1> %154, <8 x i1> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %156 = or <8 x i1> %154, %155
  %157 = extractelement <8 x i1> %156, i32 0
  %158 = xor i1 %157, true
  %159 = sext i1 %158 to i8
  %160 = load i8, i8* %4, align 1
  tail call fastcc void @filter16(i8 signext %91, i8 zeroext %160, i8 zeroext %120, i8 zeroext %159, i8* %121, i8* %123, i8* %125, i8* %127, i8* %13, i8* %15, i8* %17, i8* %19, i8* %11, i8* %22, i8* %24, i8* %26, i8* %129, i8* %131, i8* %133, i8* %135)
  %161 = getelementptr inbounds i8, i8* %11, i64 %9
  %162 = add nuw nsw i32 %12, 1
  %163 = icmp eq i32 %162, %5
  br i1 %163, label %164, label %10

164:                                              ; preds = %10, %6
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @vpx_lpf_vertical_16_dual_c(i8* nocapture, i32, i8* nocapture readonly, i8* nocapture readonly, i8* nocapture readonly) local_unnamed_addr #0 {
  tail call fastcc void @mb_lpf_vertical_edge_w(i8* %0, i32 %1, i8* %2, i8* %3, i8* %4, i32 16)
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @vpx_highbd_lpf_horizontal_4_c(i16* nocapture, i32, i8* nocapture readonly, i8* nocapture readonly, i8* nocapture readonly, i32) local_unnamed_addr #0 {
  %7 = mul nsw i32 %1, -4
  %8 = sext i32 %7 to i64
  %9 = mul nsw i32 %1, -3
  %10 = sext i32 %9 to i64
  %11 = mul nsw i32 %1, -2
  %12 = sext i32 %11 to i64
  %13 = sub nsw i32 0, %1
  %14 = sext i32 %13 to i64
  %15 = sext i32 %1 to i64
  %16 = shl nsw i32 %1, 1
  %17 = sext i32 %16 to i64
  %18 = mul nsw i32 %1, 3
  %19 = sext i32 %18 to i64
  %20 = add nsw i32 %5, -8
  %21 = sub nsw i64 0, %17
  %22 = sub nsw i64 0, %15
  br label %23

23:                                               ; preds = %23, %6
  %24 = phi i16* [ %0, %6 ], [ %109, %23 ]
  %25 = phi i32 [ 0, %6 ], [ %110, %23 ]
  %26 = getelementptr inbounds i16, i16* %24, i64 %8
  %27 = load i16, i16* %26, align 2
  %28 = getelementptr inbounds i16, i16* %24, i64 %10
  %29 = load i16, i16* %28, align 2
  %30 = getelementptr inbounds i16, i16* %24, i64 %12
  %31 = load i16, i16* %30, align 2
  %32 = getelementptr inbounds i16, i16* %24, i64 %14
  %33 = load i16, i16* %32, align 2
  %34 = load i16, i16* %24, align 2
  %35 = getelementptr inbounds i16, i16* %24, i64 %15
  %36 = load i16, i16* %35, align 2
  %37 = getelementptr inbounds i16, i16* %24, i64 %17
  %38 = load i16, i16* %37, align 2
  %39 = getelementptr inbounds i16, i16* %24, i64 %19
  %40 = load i16, i16* %39, align 2
  %41 = load i8, i8* %3, align 1
  %42 = load i8, i8* %2, align 1
  %43 = zext i8 %41 to i32
  %44 = shl i32 %43, %20
  %45 = zext i8 %42 to i32
  %46 = shl i32 %45, %20
  %47 = zext i16 %27 to i32
  %48 = zext i16 %29 to i32
  %49 = sub nsw i32 %47, %48
  %50 = icmp slt i32 %49, 0
  %51 = sub nsw i32 0, %49
  %52 = select i1 %50, i32 %51, i32 %49
  %53 = shl i32 %44, 16
  %54 = ashr exact i32 %53, 16
  %55 = icmp sgt i32 %52, %54
  %56 = insertelement <4 x i16> undef, i16 %40, i32 0
  %57 = insertelement <4 x i16> %56, i16 %38, i32 1
  %58 = insertelement <4 x i16> %57, i16 %36, i32 2
  %59 = insertelement <4 x i16> %58, i16 %31, i32 3
  %60 = zext <4 x i16> %59 to <4 x i32>
  %61 = extractelement <4 x i32> %60, i32 3
  %62 = sub nsw i32 %48, %61
  %63 = icmp slt i32 %62, 0
  %64 = sub nsw i32 0, %62
  %65 = select i1 %63, i32 %64, i32 %62
  %66 = icmp sgt i32 %65, %54
  %67 = zext i16 %33 to i32
  %68 = zext i16 %34 to i32
  %69 = extractelement <4 x i32> %60, i32 1
  %70 = insertelement <4 x i32> undef, i32 %69, i32 0
  %71 = extractelement <4 x i32> %60, i32 2
  %72 = insertelement <4 x i32> %70, i32 %71, i32 1
  %73 = insertelement <4 x i32> %72, i32 %68, i32 2
  %74 = insertelement <4 x i32> %73, i32 %67, i32 3
  %75 = sub nsw <4 x i32> %60, %74
  %76 = icmp slt <4 x i32> %75, zeroinitializer
  %77 = sub nsw <4 x i32> zeroinitializer, %75
  %78 = select <4 x i1> %76, <4 x i32> %77, <4 x i32> %75
  %79 = insertelement <4 x i32> undef, i32 %54, i32 0
  %80 = shufflevector <4 x i32> %79, <4 x i32> undef, <4 x i32> zeroinitializer
  %81 = icmp sgt <4 x i32> %78, %80
  %82 = shufflevector <4 x i1> %81, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %83 = or <4 x i1> %81, %82
  %84 = shufflevector <4 x i1> %83, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %85 = or <4 x i1> %83, %84
  %86 = extractelement <4 x i1> %85, i32 0
  %87 = or i1 %86, %55
  %88 = or i1 %87, %66
  %89 = sub nsw i32 %67, %68
  %90 = icmp slt i32 %89, 0
  %91 = sub nsw i32 0, %89
  %92 = select i1 %90, i32 %91, i32 %89
  %93 = shl nuw nsw i32 %92, 1
  %94 = sub nsw i32 %61, %71
  %95 = icmp slt i32 %94, 0
  %96 = sub nsw i32 0, %94
  %97 = select i1 %95, i32 %96, i32 %94
  %98 = lshr i32 %97, 1
  %99 = add nuw nsw i32 %98, %93
  %100 = shl i32 %46, 16
  %101 = ashr exact i32 %100, 16
  %102 = icmp sgt i32 %99, %101
  %103 = or i1 %102, %88
  %104 = xor i1 %103, true
  %105 = sext i1 %104 to i8
  %106 = load i8, i8* %4, align 1
  %107 = getelementptr inbounds i16, i16* %24, i64 %21
  %108 = getelementptr inbounds i16, i16* %24, i64 %22
  tail call fastcc void @highbd_filter4(i8 signext %105, i8 zeroext %106, i16* %107, i16* %108, i16* %24, i16* %35, i32 %5)
  %109 = getelementptr inbounds i16, i16* %24, i64 1
  %110 = add nuw nsw i32 %25, 1
  %111 = icmp eq i32 %110, 8
  br i1 %111, label %112, label %23

112:                                              ; preds = %23
  ret void
}

; Function Attrs: inlinehint nofree norecurse nounwind ssp uwtable
define internal fastcc void @highbd_filter4(i8 signext, i8 zeroext, i16* nocapture, i16* nocapture, i16* nocapture, i16* nocapture, i32) unnamed_addr #1 {
  %8 = add nsw i32 %6, -8
  %9 = load i16, i16* %2, align 2
  %10 = shl i32 128, %8
  %11 = trunc i32 %10 to i16
  %12 = sub i16 %9, %11
  %13 = load i16, i16* %3, align 2
  %14 = sub i16 %13, %11
  %15 = load i16, i16* %4, align 2
  %16 = sub i16 %15, %11
  %17 = load i16, i16* %5, align 2
  %18 = sub i16 %17, %11
  %19 = zext i8 %1 to i32
  %20 = shl i32 %19, %8
  %21 = zext i16 %9 to i32
  %22 = zext i16 %13 to i32
  %23 = sub nsw i32 %21, %22
  %24 = icmp slt i32 %23, 0
  %25 = sub nsw i32 0, %23
  %26 = select i1 %24, i32 %25, i32 %23
  %27 = shl i32 %20, 16
  %28 = ashr exact i32 %27, 16
  %29 = icmp sgt i32 %26, %28
  %30 = zext i16 %17 to i32
  %31 = zext i16 %15 to i32
  %32 = sub nsw i32 %30, %31
  %33 = icmp slt i32 %32, 0
  %34 = sub nsw i32 0, %32
  %35 = select i1 %33, i32 %34, i32 %32
  %36 = icmp sgt i32 %35, %28
  %37 = or i1 %29, %36
  %38 = sext i1 %37 to i16
  %39 = sext i16 %12 to i32
  %40 = sext i16 %18 to i32
  %41 = sub nsw i32 %39, %40
  switch i32 %6, label %174 [
    i32 10, label %42
    i32 12, label %108
  ]

42:                                               ; preds = %7
  %43 = icmp slt i32 %41, 511
  %44 = select i1 %43, i32 %41, i32 511
  %45 = icmp sgt i32 %44, -512
  %46 = select i1 %45, i32 %44, i32 -512
  %47 = trunc i32 %46 to i16
  %48 = and i16 %47, %38
  %49 = sext i16 %48 to i32
  %50 = sext i16 %16 to i32
  %51 = sext i16 %14 to i32
  %52 = sub nsw i32 %50, %51
  %53 = mul nsw i32 %52, 3
  %54 = add nsw i32 %53, %49
  %55 = icmp slt i32 %54, 511
  %56 = select i1 %55, i32 %54, i32 511
  %57 = icmp sgt i32 %56, -512
  %58 = select i1 %57, i32 %56, i32 -512
  %59 = sext i8 %0 to i32
  %60 = and i32 %58, %59
  %61 = icmp slt i32 %60, 507
  %62 = select i1 %61, i32 %60, i32 507
  %63 = icmp sgt i32 %62, -516
  %64 = select i1 %63, i32 %62, i32 -516
  %65 = trunc i32 %64 to i16
  %66 = add nsw i16 %65, 4
  %67 = ashr i16 %66, 3
  %68 = icmp slt i32 %60, 508
  %69 = select i1 %68, i32 %60, i32 508
  %70 = icmp sgt i32 %69, -515
  %71 = select i1 %70, i32 %69, i32 -515
  %72 = trunc i32 %71 to i16
  %73 = add nsw i16 %72, 3
  %74 = ashr i16 %73, 3
  %75 = sext i16 %67 to i32
  %76 = sub nsw i32 %50, %75
  %77 = icmp slt i32 %76, 511
  %78 = select i1 %77, i32 %76, i32 511
  %79 = icmp sgt i32 %78, -512
  %80 = select i1 %79, i32 %78, i32 -512
  %81 = trunc i32 %80 to i16
  %82 = add i16 %81, %11
  store i16 %82, i16* %4, align 2
  %83 = sext i16 %74 to i32
  %84 = add nsw i32 %83, %51
  %85 = icmp slt i32 %84, 511
  %86 = select i1 %85, i32 %84, i32 511
  %87 = icmp sgt i32 %86, -512
  %88 = select i1 %87, i32 %86, i32 -512
  %89 = trunc i32 %88 to i16
  %90 = add i16 %89, %11
  store i16 %90, i16* %3, align 2
  %91 = add nsw i16 %67, 1
  %92 = ashr i16 %91, 1
  %93 = xor i16 %38, -1
  %94 = and i16 %92, %93
  %95 = sext i16 %94 to i32
  %96 = sub nsw i32 %40, %95
  %97 = icmp slt i32 %96, 511
  %98 = select i1 %97, i32 %96, i32 511
  %99 = icmp sgt i32 %98, -512
  %100 = select i1 %99, i32 %98, i32 -512
  %101 = trunc i32 %100 to i16
  %102 = add i16 %101, %11
  store i16 %102, i16* %5, align 2
  %103 = add nsw i32 %95, %39
  %104 = icmp slt i32 %103, 511
  %105 = select i1 %104, i32 %103, i32 511
  %106 = icmp sgt i32 %105, -512
  %107 = select i1 %106, i32 %105, i32 -512
  br label %240

108:                                              ; preds = %7
  %109 = icmp slt i32 %41, 2047
  %110 = select i1 %109, i32 %41, i32 2047
  %111 = icmp sgt i32 %110, -2048
  %112 = select i1 %111, i32 %110, i32 -2048
  %113 = trunc i32 %112 to i16
  %114 = and i16 %113, %38
  %115 = sext i16 %114 to i32
  %116 = sext i16 %16 to i32
  %117 = sext i16 %14 to i32
  %118 = sub nsw i32 %116, %117
  %119 = mul nsw i32 %118, 3
  %120 = add nsw i32 %119, %115
  %121 = icmp slt i32 %120, 2047
  %122 = select i1 %121, i32 %120, i32 2047
  %123 = icmp sgt i32 %122, -2048
  %124 = select i1 %123, i32 %122, i32 -2048
  %125 = sext i8 %0 to i32
  %126 = and i32 %124, %125
  %127 = icmp slt i32 %126, 2043
  %128 = select i1 %127, i32 %126, i32 2043
  %129 = icmp sgt i32 %128, -2052
  %130 = select i1 %129, i32 %128, i32 -2052
  %131 = trunc i32 %130 to i16
  %132 = add nsw i16 %131, 4
  %133 = ashr i16 %132, 3
  %134 = icmp slt i32 %126, 2044
  %135 = select i1 %134, i32 %126, i32 2044
  %136 = icmp sgt i32 %135, -2051
  %137 = select i1 %136, i32 %135, i32 -2051
  %138 = trunc i32 %137 to i16
  %139 = add nsw i16 %138, 3
  %140 = ashr i16 %139, 3
  %141 = sext i16 %133 to i32
  %142 = sub nsw i32 %116, %141
  %143 = icmp slt i32 %142, 2047
  %144 = select i1 %143, i32 %142, i32 2047
  %145 = icmp sgt i32 %144, -2048
  %146 = select i1 %145, i32 %144, i32 -2048
  %147 = trunc i32 %146 to i16
  %148 = add i16 %147, %11
  store i16 %148, i16* %4, align 2
  %149 = sext i16 %140 to i32
  %150 = add nsw i32 %149, %117
  %151 = icmp slt i32 %150, 2047
  %152 = select i1 %151, i32 %150, i32 2047
  %153 = icmp sgt i32 %152, -2048
  %154 = select i1 %153, i32 %152, i32 -2048
  %155 = trunc i32 %154 to i16
  %156 = add i16 %155, %11
  store i16 %156, i16* %3, align 2
  %157 = add nsw i16 %133, 1
  %158 = ashr i16 %157, 1
  %159 = xor i16 %38, -1
  %160 = and i16 %158, %159
  %161 = sext i16 %160 to i32
  %162 = sub nsw i32 %40, %161
  %163 = icmp slt i32 %162, 2047
  %164 = select i1 %163, i32 %162, i32 2047
  %165 = icmp sgt i32 %164, -2048
  %166 = select i1 %165, i32 %164, i32 -2048
  %167 = trunc i32 %166 to i16
  %168 = add i16 %167, %11
  store i16 %168, i16* %5, align 2
  %169 = add nsw i32 %161, %39
  %170 = icmp slt i32 %169, 2047
  %171 = select i1 %170, i32 %169, i32 2047
  %172 = icmp sgt i32 %171, -2048
  %173 = select i1 %172, i32 %171, i32 -2048
  br label %240

174:                                              ; preds = %7
  %175 = icmp slt i32 %41, 127
  %176 = select i1 %175, i32 %41, i32 127
  %177 = icmp sgt i32 %176, -128
  %178 = select i1 %177, i32 %176, i32 -128
  %179 = trunc i32 %178 to i16
  %180 = and i16 %179, %38
  %181 = sext i16 %180 to i32
  %182 = sext i16 %16 to i32
  %183 = sext i16 %14 to i32
  %184 = sub nsw i32 %182, %183
  %185 = mul nsw i32 %184, 3
  %186 = add nsw i32 %185, %181
  %187 = icmp slt i32 %186, 127
  %188 = select i1 %187, i32 %186, i32 127
  %189 = icmp sgt i32 %188, -128
  %190 = select i1 %189, i32 %188, i32 -128
  %191 = sext i8 %0 to i32
  %192 = and i32 %190, %191
  %193 = icmp slt i32 %192, 123
  %194 = select i1 %193, i32 %192, i32 123
  %195 = icmp sgt i32 %194, -132
  %196 = select i1 %195, i32 %194, i32 -132
  %197 = trunc i32 %196 to i16
  %198 = add nsw i16 %197, 4
  %199 = ashr i16 %198, 3
  %200 = icmp slt i32 %192, 124
  %201 = select i1 %200, i32 %192, i32 124
  %202 = icmp sgt i32 %201, -131
  %203 = select i1 %202, i32 %201, i32 -131
  %204 = trunc i32 %203 to i16
  %205 = add nsw i16 %204, 3
  %206 = ashr i16 %205, 3
  %207 = sext i16 %199 to i32
  %208 = sub nsw i32 %182, %207
  %209 = icmp slt i32 %208, 127
  %210 = select i1 %209, i32 %208, i32 127
  %211 = icmp sgt i32 %210, -128
  %212 = select i1 %211, i32 %210, i32 -128
  %213 = trunc i32 %212 to i16
  %214 = add i16 %213, %11
  store i16 %214, i16* %4, align 2
  %215 = sext i16 %206 to i32
  %216 = add nsw i32 %215, %183
  %217 = icmp slt i32 %216, 127
  %218 = select i1 %217, i32 %216, i32 127
  %219 = icmp sgt i32 %218, -128
  %220 = select i1 %219, i32 %218, i32 -128
  %221 = trunc i32 %220 to i16
  %222 = add i16 %221, %11
  store i16 %222, i16* %3, align 2
  %223 = add nsw i16 %199, 1
  %224 = ashr i16 %223, 1
  %225 = xor i16 %38, -1
  %226 = and i16 %224, %225
  %227 = sext i16 %226 to i32
  %228 = sub nsw i32 %40, %227
  %229 = icmp slt i32 %228, 127
  %230 = select i1 %229, i32 %228, i32 127
  %231 = icmp sgt i32 %230, -128
  %232 = select i1 %231, i32 %230, i32 -128
  %233 = trunc i32 %232 to i16
  %234 = add i16 %233, %11
  store i16 %234, i16* %5, align 2
  %235 = add nsw i32 %227, %39
  %236 = icmp slt i32 %235, 127
  %237 = select i1 %236, i32 %235, i32 127
  %238 = icmp sgt i32 %237, -128
  %239 = select i1 %238, i32 %237, i32 -128
  br label %240

240:                                              ; preds = %42, %108, %174
  %241 = phi i32 [ %239, %174 ], [ %173, %108 ], [ %107, %42 ]
  %242 = trunc i32 %241 to i16
  %243 = add i16 %242, %11
  store i16 %243, i16* %2, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @vpx_highbd_lpf_horizontal_4_dual_c(i16* nocapture, i32, i8* nocapture readonly, i8* nocapture readonly, i8* nocapture readonly, i8* nocapture readonly, i8* nocapture readonly, i8* nocapture readonly, i32) local_unnamed_addr #0 {
  tail call void @vpx_highbd_lpf_horizontal_4_c(i16* %0, i32 %1, i8* %2, i8* %3, i8* %4, i32 %8)
  %10 = getelementptr inbounds i16, i16* %0, i64 8
  tail call void @vpx_highbd_lpf_horizontal_4_c(i16* %10, i32 %1, i8* %5, i8* %6, i8* %7, i32 %8)
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @vpx_highbd_lpf_vertical_4_c(i16* nocapture, i32, i8* nocapture readonly, i8* nocapture readonly, i8* nocapture readonly, i32) local_unnamed_addr #0 {
  %7 = add nsw i32 %5, -8
  %8 = sext i32 %1 to i64
  br label %9

9:                                                ; preds = %9, %6
  %10 = phi i16* [ %0, %6 ], [ %93, %9 ]
  %11 = phi i32 [ 0, %6 ], [ %94, %9 ]
  %12 = getelementptr inbounds i16, i16* %10, i64 -4
  %13 = load i16, i16* %12, align 2
  %14 = getelementptr inbounds i16, i16* %10, i64 -3
  %15 = load i16, i16* %14, align 2
  %16 = getelementptr inbounds i16, i16* %10, i64 -2
  %17 = load i16, i16* %16, align 2
  %18 = getelementptr inbounds i16, i16* %10, i64 -1
  %19 = load i16, i16* %18, align 2
  %20 = load i16, i16* %10, align 2
  %21 = getelementptr inbounds i16, i16* %10, i64 1
  %22 = load i16, i16* %21, align 2
  %23 = getelementptr inbounds i16, i16* %10, i64 2
  %24 = load i16, i16* %23, align 2
  %25 = getelementptr inbounds i16, i16* %10, i64 3
  %26 = load i16, i16* %25, align 2
  %27 = load i8, i8* %3, align 1
  %28 = load i8, i8* %2, align 1
  %29 = zext i8 %27 to i32
  %30 = shl i32 %29, %7
  %31 = zext i8 %28 to i32
  %32 = shl i32 %31, %7
  %33 = zext i16 %13 to i32
  %34 = zext i16 %15 to i32
  %35 = sub nsw i32 %33, %34
  %36 = icmp slt i32 %35, 0
  %37 = sub nsw i32 0, %35
  %38 = select i1 %36, i32 %37, i32 %35
  %39 = shl i32 %30, 16
  %40 = ashr exact i32 %39, 16
  %41 = icmp sgt i32 %38, %40
  %42 = insertelement <4 x i16> undef, i16 %26, i32 0
  %43 = insertelement <4 x i16> %42, i16 %24, i32 1
  %44 = insertelement <4 x i16> %43, i16 %22, i32 2
  %45 = insertelement <4 x i16> %44, i16 %17, i32 3
  %46 = zext <4 x i16> %45 to <4 x i32>
  %47 = extractelement <4 x i32> %46, i32 3
  %48 = sub nsw i32 %34, %47
  %49 = icmp slt i32 %48, 0
  %50 = sub nsw i32 0, %48
  %51 = select i1 %49, i32 %50, i32 %48
  %52 = icmp sgt i32 %51, %40
  %53 = zext i16 %19 to i32
  %54 = zext i16 %20 to i32
  %55 = extractelement <4 x i32> %46, i32 1
  %56 = insertelement <4 x i32> undef, i32 %55, i32 0
  %57 = extractelement <4 x i32> %46, i32 2
  %58 = insertelement <4 x i32> %56, i32 %57, i32 1
  %59 = insertelement <4 x i32> %58, i32 %54, i32 2
  %60 = insertelement <4 x i32> %59, i32 %53, i32 3
  %61 = sub nsw <4 x i32> %46, %60
  %62 = icmp slt <4 x i32> %61, zeroinitializer
  %63 = sub nsw <4 x i32> zeroinitializer, %61
  %64 = select <4 x i1> %62, <4 x i32> %63, <4 x i32> %61
  %65 = insertelement <4 x i32> undef, i32 %40, i32 0
  %66 = shufflevector <4 x i32> %65, <4 x i32> undef, <4 x i32> zeroinitializer
  %67 = icmp sgt <4 x i32> %64, %66
  %68 = shufflevector <4 x i1> %67, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %69 = or <4 x i1> %67, %68
  %70 = shufflevector <4 x i1> %69, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %71 = or <4 x i1> %69, %70
  %72 = extractelement <4 x i1> %71, i32 0
  %73 = or i1 %72, %41
  %74 = or i1 %73, %52
  %75 = sub nsw i32 %53, %54
  %76 = icmp slt i32 %75, 0
  %77 = sub nsw i32 0, %75
  %78 = select i1 %76, i32 %77, i32 %75
  %79 = shl nuw nsw i32 %78, 1
  %80 = sub nsw i32 %47, %57
  %81 = icmp slt i32 %80, 0
  %82 = sub nsw i32 0, %80
  %83 = select i1 %81, i32 %82, i32 %80
  %84 = lshr i32 %83, 1
  %85 = add nuw nsw i32 %84, %79
  %86 = shl i32 %32, 16
  %87 = ashr exact i32 %86, 16
  %88 = icmp sgt i32 %85, %87
  %89 = or i1 %88, %74
  %90 = xor i1 %89, true
  %91 = sext i1 %90 to i8
  %92 = load i8, i8* %4, align 1
  tail call fastcc void @highbd_filter4(i8 signext %91, i8 zeroext %92, i16* %16, i16* %18, i16* %10, i16* %21, i32 %5)
  %93 = getelementptr inbounds i16, i16* %10, i64 %8
  %94 = add nuw nsw i32 %11, 1
  %95 = icmp eq i32 %94, 8
  br i1 %95, label %96, label %9

96:                                               ; preds = %9
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @vpx_highbd_lpf_vertical_4_dual_c(i16* nocapture, i32, i8* nocapture readonly, i8* nocapture readonly, i8* nocapture readonly, i8* nocapture readonly, i8* nocapture readonly, i8* nocapture readonly, i32) local_unnamed_addr #0 {
  tail call void @vpx_highbd_lpf_vertical_4_c(i16* %0, i32 %1, i8* %2, i8* %3, i8* %4, i32 %8)
  %10 = shl nsw i32 %1, 3
  %11 = sext i32 %10 to i64
  %12 = getelementptr inbounds i16, i16* %0, i64 %11
  tail call void @vpx_highbd_lpf_vertical_4_c(i16* %12, i32 %1, i8* %5, i8* %6, i8* %7, i32 %8)
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @vpx_highbd_lpf_horizontal_8_c(i16* nocapture, i32, i8* nocapture readonly, i8* nocapture readonly, i8* nocapture readonly, i32) local_unnamed_addr #0 {
  %7 = mul nsw i32 %1, -4
  %8 = sext i32 %7 to i64
  %9 = mul nsw i32 %1, -3
  %10 = sext i32 %9 to i64
  %11 = mul nsw i32 %1, -2
  %12 = sext i32 %11 to i64
  %13 = sub nsw i32 0, %1
  %14 = sext i32 %13 to i64
  %15 = sext i32 %1 to i64
  %16 = shl nsw i32 %1, 1
  %17 = sext i32 %16 to i64
  %18 = mul nsw i32 %1, 3
  %19 = sext i32 %18 to i64
  %20 = add nsw i32 %5, -8
  %21 = shl i32 65536, %20
  %22 = ashr exact i32 %21, 16
  %23 = sub nsw i64 0, %19
  %24 = sub nsw i64 0, %17
  %25 = sub nsw i64 0, %15
  %26 = shl nsw i32 %1, 2
  %27 = sext i32 %26 to i64
  %28 = sub nsw i64 0, %27
  br label %29

29:                                               ; preds = %206, %6
  %30 = phi i16* [ %0, %6 ], [ %207, %206 ]
  %31 = phi i32 [ 0, %6 ], [ %208, %206 ]
  %32 = getelementptr inbounds i16, i16* %30, i64 %8
  %33 = load i16, i16* %32, align 2
  %34 = getelementptr inbounds i16, i16* %30, i64 %10
  %35 = load i16, i16* %34, align 2
  %36 = getelementptr inbounds i16, i16* %30, i64 %12
  %37 = load i16, i16* %36, align 2
  %38 = getelementptr inbounds i16, i16* %30, i64 %14
  %39 = load i16, i16* %38, align 2
  %40 = load i16, i16* %30, align 2
  %41 = getelementptr inbounds i16, i16* %30, i64 %15
  %42 = load i16, i16* %41, align 2
  %43 = getelementptr inbounds i16, i16* %30, i64 %17
  %44 = load i16, i16* %43, align 2
  %45 = getelementptr inbounds i16, i16* %30, i64 %19
  %46 = load i16, i16* %45, align 2
  %47 = load i8, i8* %3, align 1
  %48 = load i8, i8* %2, align 1
  %49 = zext i8 %47 to i32
  %50 = shl i32 %49, %20
  %51 = zext i8 %48 to i32
  %52 = shl i32 %51, %20
  %53 = zext i16 %33 to i32
  %54 = zext i16 %35 to i32
  %55 = sub nsw i32 %53, %54
  %56 = icmp slt i32 %55, 0
  %57 = sub nsw i32 0, %55
  %58 = select i1 %56, i32 %57, i32 %55
  %59 = shl i32 %50, 16
  %60 = ashr exact i32 %59, 16
  %61 = icmp sgt i32 %58, %60
  %62 = zext i16 %37 to i32
  %63 = sub nsw i32 %54, %62
  %64 = icmp slt i32 %63, 0
  %65 = sub nsw i32 0, %63
  %66 = select i1 %64, i32 %65, i32 %63
  %67 = icmp sgt i32 %66, %60
  %68 = or i1 %61, %67
  %69 = zext i16 %39 to i32
  %70 = sub nsw i32 %62, %69
  %71 = icmp slt i32 %70, 0
  %72 = sub nsw i32 0, %70
  %73 = select i1 %71, i32 %72, i32 %70
  %74 = icmp sgt i32 %73, %60
  %75 = or i1 %74, %68
  %76 = zext i16 %42 to i32
  %77 = zext i16 %40 to i32
  %78 = sub nsw i32 %76, %77
  %79 = icmp slt i32 %78, 0
  %80 = sub nsw i32 0, %78
  %81 = select i1 %79, i32 %80, i32 %78
  %82 = icmp sgt i32 %81, %60
  %83 = or i1 %82, %75
  %84 = zext i16 %44 to i32
  %85 = sub nsw i32 %84, %76
  %86 = icmp slt i32 %85, 0
  %87 = sub nsw i32 0, %85
  %88 = select i1 %86, i32 %87, i32 %85
  %89 = icmp sgt i32 %88, %60
  %90 = or i1 %89, %83
  %91 = zext i16 %46 to i32
  %92 = sub nsw i32 %91, %84
  %93 = icmp slt i32 %92, 0
  %94 = sub nsw i32 0, %92
  %95 = select i1 %93, i32 %94, i32 %92
  %96 = icmp sgt i32 %95, %60
  %97 = or i1 %96, %90
  %98 = sub nsw i32 %69, %77
  %99 = icmp slt i32 %98, 0
  %100 = sub nsw i32 0, %98
  %101 = select i1 %99, i32 %100, i32 %98
  %102 = shl nuw nsw i32 %101, 1
  %103 = sub nsw i32 %62, %76
  %104 = icmp slt i32 %103, 0
  %105 = sub nsw i32 0, %103
  %106 = select i1 %104, i32 %105, i32 %103
  %107 = lshr i32 %106, 1
  %108 = add nuw nsw i32 %107, %102
  %109 = shl i32 %52, 16
  %110 = ashr exact i32 %109, 16
  %111 = icmp sgt i32 %108, %110
  %112 = or i1 %111, %97
  %113 = icmp sgt i32 %73, %22
  %114 = icmp sgt i32 %81, %22
  %115 = or i1 %113, %114
  %116 = sub nsw i32 %54, %69
  %117 = icmp slt i32 %116, 0
  %118 = sub nsw i32 0, %116
  %119 = select i1 %117, i32 %118, i32 %116
  %120 = icmp sgt i32 %119, %22
  %121 = or i1 %120, %115
  %122 = sub nsw i32 %84, %77
  %123 = icmp slt i32 %122, 0
  %124 = sub nsw i32 0, %122
  %125 = select i1 %123, i32 %124, i32 %122
  %126 = icmp sgt i32 %125, %22
  %127 = or i1 %126, %121
  %128 = sub nsw i32 %53, %69
  %129 = icmp slt i32 %128, 0
  %130 = sub nsw i32 0, %128
  %131 = select i1 %129, i32 %130, i32 %128
  %132 = icmp sgt i32 %131, %22
  %133 = or i1 %132, %127
  %134 = sub nsw i32 %91, %77
  %135 = icmp slt i32 %134, 0
  %136 = sub nsw i32 0, %134
  %137 = select i1 %135, i32 %136, i32 %134
  %138 = icmp sgt i32 %137, %22
  %139 = or i1 %138, %133
  %140 = getelementptr inbounds i16, i16* %30, i64 %23
  %141 = getelementptr inbounds i16, i16* %30, i64 %24
  %142 = getelementptr inbounds i16, i16* %30, i64 %25
  %143 = or i1 %139, %112
  br i1 %143, label %202, label %144

144:                                              ; preds = %29
  %145 = getelementptr inbounds i16, i16* %30, i64 %28
  %146 = load i16, i16* %145, align 2
  %147 = load i16, i16* %140, align 2
  %148 = load i16, i16* %141, align 2
  %149 = load i16, i16* %142, align 2
  %150 = zext i16 %146 to i32
  %151 = mul nuw nsw i32 %150, 3
  %152 = zext i16 %147 to i32
  %153 = shl nuw nsw i32 %152, 1
  %154 = zext i16 %148 to i32
  %155 = zext i16 %149 to i32
  %156 = add nuw nsw i32 %155, 4
  %157 = add nuw nsw i32 %154, %77
  %158 = add nuw nsw i32 %157, %151
  %159 = add nuw nsw i32 %158, %153
  %160 = add nuw nsw i32 %159, %156
  %161 = lshr i32 %160, 3
  %162 = trunc i32 %161 to i16
  store i16 %162, i16* %140, align 2
  %163 = add nuw nsw i32 %154, %150
  %164 = shl nuw nsw i32 %163, 1
  %165 = add nuw nsw i32 %156, %152
  %166 = add nuw nsw i32 %76, %77
  %167 = add nuw nsw i32 %166, %164
  %168 = add nuw nsw i32 %167, %165
  %169 = lshr i32 %168, 3
  %170 = trunc i32 %169 to i16
  store i16 %170, i16* %141, align 2
  %171 = shl nuw nsw i32 %155, 1
  %172 = add nuw nsw i32 %166, 4
  %173 = add nuw nsw i32 %172, %84
  %174 = add nuw nsw i32 %173, %150
  %175 = add nuw nsw i32 %174, %152
  %176 = add nuw nsw i32 %175, %154
  %177 = add nuw nsw i32 %176, %171
  %178 = lshr i32 %177, 3
  %179 = trunc i32 %178 to i16
  store i16 %179, i16* %142, align 2
  %180 = shl nuw nsw i32 %77, 1
  %181 = add nuw nsw i32 %154, %84
  %182 = add nuw nsw i32 %181, %180
  %183 = add nuw nsw i32 %182, %76
  %184 = add nuw nsw i32 %183, %91
  %185 = add nuw nsw i32 %184, %165
  %186 = lshr i32 %185, 3
  %187 = trunc i32 %186 to i16
  store i16 %187, i16* %30, align 2
  %188 = add nuw nsw i32 %91, %76
  %189 = shl nuw nsw i32 %188, 1
  %190 = add nuw nsw i32 %181, %77
  %191 = add nuw nsw i32 %190, %189
  %192 = add nuw nsw i32 %191, %156
  %193 = lshr i32 %192, 3
  %194 = trunc i32 %193 to i16
  store i16 %194, i16* %41, align 2
  %195 = shl nuw nsw i32 %84, 1
  %196 = mul nuw nsw i32 %91, 3
  %197 = add nuw nsw i32 %166, %195
  %198 = add nuw nsw i32 %197, %196
  %199 = add nuw nsw i32 %198, %156
  %200 = lshr i32 %199, 3
  %201 = trunc i32 %200 to i16
  store i16 %201, i16* %43, align 2
  br label %206

202:                                              ; preds = %29
  %203 = xor i1 %112, true
  %204 = sext i1 %203 to i8
  %205 = load i8, i8* %4, align 1
  tail call fastcc void @highbd_filter4(i8 signext %204, i8 zeroext %205, i16* %141, i16* %142, i16* %30, i16* %41, i32 %5) #2
  br label %206

206:                                              ; preds = %144, %202
  %207 = getelementptr inbounds i16, i16* %30, i64 1
  %208 = add nuw nsw i32 %31, 1
  %209 = icmp eq i32 %208, 8
  br i1 %209, label %210, label %29

210:                                              ; preds = %206
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @vpx_highbd_lpf_horizontal_8_dual_c(i16* nocapture, i32, i8* nocapture readonly, i8* nocapture readonly, i8* nocapture readonly, i8* nocapture readonly, i8* nocapture readonly, i8* nocapture readonly, i32) local_unnamed_addr #0 {
  tail call void @vpx_highbd_lpf_horizontal_8_c(i16* %0, i32 %1, i8* %2, i8* %3, i8* %4, i32 %8)
  %10 = getelementptr inbounds i16, i16* %0, i64 8
  tail call void @vpx_highbd_lpf_horizontal_8_c(i16* %10, i32 %1, i8* %5, i8* %6, i8* %7, i32 %8)
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @vpx_highbd_lpf_vertical_8_c(i16* nocapture, i32, i8* nocapture readonly, i8* nocapture readonly, i8* nocapture readonly, i32) local_unnamed_addr #0 {
  %7 = add nsw i32 %5, -8
  %8 = shl i32 65536, %7
  %9 = ashr exact i32 %8, 16
  %10 = sext i32 %1 to i64
  br label %11

11:                                               ; preds = %177, %6
  %12 = phi i16* [ %0, %6 ], [ %178, %177 ]
  %13 = phi i32 [ 0, %6 ], [ %179, %177 ]
  %14 = getelementptr inbounds i16, i16* %12, i64 -4
  %15 = load i16, i16* %14, align 2
  %16 = getelementptr inbounds i16, i16* %12, i64 -3
  %17 = load i16, i16* %16, align 2
  %18 = getelementptr inbounds i16, i16* %12, i64 -2
  %19 = load i16, i16* %18, align 2
  %20 = getelementptr inbounds i16, i16* %12, i64 -1
  %21 = load i16, i16* %20, align 2
  %22 = load i16, i16* %12, align 2
  %23 = getelementptr inbounds i16, i16* %12, i64 1
  %24 = load i16, i16* %23, align 2
  %25 = getelementptr inbounds i16, i16* %12, i64 2
  %26 = load i16, i16* %25, align 2
  %27 = getelementptr inbounds i16, i16* %12, i64 3
  %28 = load i16, i16* %27, align 2
  %29 = load i8, i8* %3, align 1
  %30 = load i8, i8* %2, align 1
  %31 = zext i8 %29 to i32
  %32 = shl i32 %31, %7
  %33 = zext i8 %30 to i32
  %34 = shl i32 %33, %7
  %35 = zext i16 %15 to i32
  %36 = zext i16 %17 to i32
  %37 = sub nsw i32 %35, %36
  %38 = icmp slt i32 %37, 0
  %39 = sub nsw i32 0, %37
  %40 = select i1 %38, i32 %39, i32 %37
  %41 = shl i32 %32, 16
  %42 = ashr exact i32 %41, 16
  %43 = icmp sgt i32 %40, %42
  %44 = zext i16 %19 to i32
  %45 = sub nsw i32 %36, %44
  %46 = icmp slt i32 %45, 0
  %47 = sub nsw i32 0, %45
  %48 = select i1 %46, i32 %47, i32 %45
  %49 = icmp sgt i32 %48, %42
  %50 = or i1 %43, %49
  %51 = zext i16 %21 to i32
  %52 = sub nsw i32 %44, %51
  %53 = icmp slt i32 %52, 0
  %54 = sub nsw i32 0, %52
  %55 = select i1 %53, i32 %54, i32 %52
  %56 = icmp sgt i32 %55, %42
  %57 = or i1 %56, %50
  %58 = zext i16 %24 to i32
  %59 = zext i16 %22 to i32
  %60 = sub nsw i32 %58, %59
  %61 = icmp slt i32 %60, 0
  %62 = sub nsw i32 0, %60
  %63 = select i1 %61, i32 %62, i32 %60
  %64 = icmp sgt i32 %63, %42
  %65 = or i1 %64, %57
  %66 = zext i16 %26 to i32
  %67 = sub nsw i32 %66, %58
  %68 = icmp slt i32 %67, 0
  %69 = sub nsw i32 0, %67
  %70 = select i1 %68, i32 %69, i32 %67
  %71 = icmp sgt i32 %70, %42
  %72 = or i1 %71, %65
  %73 = zext i16 %28 to i32
  %74 = sub nsw i32 %73, %66
  %75 = icmp slt i32 %74, 0
  %76 = sub nsw i32 0, %74
  %77 = select i1 %75, i32 %76, i32 %74
  %78 = icmp sgt i32 %77, %42
  %79 = or i1 %78, %72
  %80 = sub nsw i32 %51, %59
  %81 = icmp slt i32 %80, 0
  %82 = sub nsw i32 0, %80
  %83 = select i1 %81, i32 %82, i32 %80
  %84 = shl nuw nsw i32 %83, 1
  %85 = sub nsw i32 %44, %58
  %86 = icmp slt i32 %85, 0
  %87 = sub nsw i32 0, %85
  %88 = select i1 %86, i32 %87, i32 %85
  %89 = lshr i32 %88, 1
  %90 = add nuw nsw i32 %89, %84
  %91 = shl i32 %34, 16
  %92 = ashr exact i32 %91, 16
  %93 = icmp sgt i32 %90, %92
  %94 = or i1 %93, %79
  %95 = icmp sgt i32 %55, %9
  %96 = icmp sgt i32 %63, %9
  %97 = or i1 %95, %96
  %98 = sub nsw i32 %36, %51
  %99 = icmp slt i32 %98, 0
  %100 = sub nsw i32 0, %98
  %101 = select i1 %99, i32 %100, i32 %98
  %102 = icmp sgt i32 %101, %9
  %103 = or i1 %102, %97
  %104 = sub nsw i32 %66, %59
  %105 = icmp slt i32 %104, 0
  %106 = sub nsw i32 0, %104
  %107 = select i1 %105, i32 %106, i32 %104
  %108 = icmp sgt i32 %107, %9
  %109 = or i1 %108, %103
  %110 = sub nsw i32 %35, %51
  %111 = icmp slt i32 %110, 0
  %112 = sub nsw i32 0, %110
  %113 = select i1 %111, i32 %112, i32 %110
  %114 = icmp sgt i32 %113, %9
  %115 = or i1 %114, %109
  %116 = sub nsw i32 %73, %59
  %117 = icmp slt i32 %116, 0
  %118 = sub nsw i32 0, %116
  %119 = select i1 %117, i32 %118, i32 %116
  %120 = icmp sgt i32 %119, %9
  %121 = or i1 %120, %115
  %122 = or i1 %121, %94
  br i1 %122, label %173, label %123

123:                                              ; preds = %11
  %124 = mul nuw nsw i32 %35, 3
  %125 = shl nuw nsw i32 %36, 1
  %126 = add nuw nsw i32 %51, 4
  %127 = add nuw nsw i32 %126, %59
  %128 = add nuw nsw i32 %127, %124
  %129 = add nuw nsw i32 %128, %125
  %130 = add nuw nsw i32 %129, %44
  %131 = lshr i32 %130, 3
  %132 = trunc i32 %131 to i16
  store i16 %132, i16* %16, align 2
  %133 = add nuw nsw i32 %44, %35
  %134 = shl nuw nsw i32 %133, 1
  %135 = add nuw nsw i32 %126, %36
  %136 = add nuw nsw i32 %58, %59
  %137 = add nuw nsw i32 %136, %134
  %138 = add nuw nsw i32 %137, %135
  %139 = lshr i32 %138, 3
  %140 = trunc i32 %139 to i16
  store i16 %140, i16* %18, align 2
  %141 = shl nuw nsw i32 %51, 1
  %142 = add nuw nsw i32 %59, %44
  %143 = add nuw nsw i32 %142, 4
  %144 = add nuw nsw i32 %143, %35
  %145 = add nuw nsw i32 %144, %36
  %146 = add nuw nsw i32 %145, %141
  %147 = add nuw nsw i32 %146, %58
  %148 = add nuw nsw i32 %147, %66
  %149 = lshr i32 %148, 3
  %150 = trunc i32 %149 to i16
  store i16 %150, i16* %20, align 2
  %151 = shl nuw nsw i32 %59, 1
  %152 = add nuw nsw i32 %66, %44
  %153 = add nuw nsw i32 %152, %135
  %154 = add nuw nsw i32 %153, %151
  %155 = add nuw nsw i32 %154, %58
  %156 = add nuw nsw i32 %155, %73
  %157 = lshr i32 %156, 3
  %158 = trunc i32 %157 to i16
  store i16 %158, i16* %12, align 2
  %159 = add nuw nsw i32 %73, %58
  %160 = shl nuw nsw i32 %159, 1
  %161 = add nuw nsw i32 %127, %44
  %162 = add nuw nsw i32 %161, %66
  %163 = add nuw nsw i32 %162, %160
  %164 = lshr i32 %163, 3
  %165 = trunc i32 %164 to i16
  store i16 %165, i16* %23, align 2
  %166 = shl nuw nsw i32 %66, 1
  %167 = mul nuw nsw i32 %73, 3
  %168 = add nuw nsw i32 %127, %58
  %169 = add nuw nsw i32 %168, %166
  %170 = add nuw nsw i32 %169, %167
  %171 = lshr i32 %170, 3
  %172 = trunc i32 %171 to i16
  store i16 %172, i16* %25, align 2
  br label %177

173:                                              ; preds = %11
  %174 = xor i1 %94, true
  %175 = sext i1 %174 to i8
  %176 = load i8, i8* %4, align 1
  tail call fastcc void @highbd_filter4(i8 signext %175, i8 zeroext %176, i16* %18, i16* %20, i16* %12, i16* %23, i32 %5) #2
  br label %177

177:                                              ; preds = %123, %173
  %178 = getelementptr inbounds i16, i16* %12, i64 %10
  %179 = add nuw nsw i32 %13, 1
  %180 = icmp eq i32 %179, 8
  br i1 %180, label %181, label %11

181:                                              ; preds = %177
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @vpx_highbd_lpf_vertical_8_dual_c(i16* nocapture, i32, i8* nocapture readonly, i8* nocapture readonly, i8* nocapture readonly, i8* nocapture readonly, i8* nocapture readonly, i8* nocapture readonly, i32) local_unnamed_addr #0 {
  tail call void @vpx_highbd_lpf_vertical_8_c(i16* %0, i32 %1, i8* %2, i8* %3, i8* %4, i32 %8)
  %10 = shl nsw i32 %1, 3
  %11 = sext i32 %10 to i64
  %12 = getelementptr inbounds i16, i16* %0, i64 %11
  tail call void @vpx_highbd_lpf_vertical_8_c(i16* %12, i32 %1, i8* %5, i8* %6, i8* %7, i32 %8)
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @vpx_highbd_lpf_horizontal_16_c(i16*, i32, i8* nocapture readonly, i8* nocapture readonly, i8* nocapture readonly, i32) local_unnamed_addr #0 {
  tail call fastcc void @highbd_mb_lpf_horizontal_edge_w(i16* %0, i32 %1, i8* %2, i8* %3, i8* %4, i32 1, i32 %5)
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal fastcc void @highbd_mb_lpf_horizontal_edge_w(i16*, i32, i8* nocapture readonly, i8* nocapture readonly, i8* nocapture readonly, i32, i32) unnamed_addr #0 {
  %8 = shl nsw i32 %5, 3
  %9 = icmp sgt i32 %5, 0
  br i1 %9, label %10, label %225

10:                                               ; preds = %7
  %11 = mul nsw i32 %1, -4
  %12 = sext i32 %11 to i64
  %13 = mul nsw i32 %1, -3
  %14 = sext i32 %13 to i64
  %15 = mul nsw i32 %1, -2
  %16 = sext i32 %15 to i64
  %17 = sub nsw i32 0, %1
  %18 = sext i32 %17 to i64
  %19 = sext i32 %1 to i64
  %20 = shl nsw i32 %1, 1
  %21 = sext i32 %20 to i64
  %22 = mul nsw i32 %1, 3
  %23 = sext i32 %22 to i64
  %24 = add nsw i32 %6, -8
  %25 = shl i32 65536, %24
  %26 = ashr exact i32 %25, 16
  %27 = mul nsw i32 %1, -8
  %28 = sext i32 %27 to i64
  %29 = mul nsw i32 %1, -7
  %30 = sext i32 %29 to i64
  %31 = mul nsw i32 %1, -6
  %32 = sext i32 %31 to i64
  %33 = mul nsw i32 %1, -5
  %34 = sext i32 %33 to i64
  %35 = shl nsw i32 %1, 2
  %36 = sext i32 %35 to i64
  %37 = mul nsw i32 %1, 5
  %38 = sext i32 %37 to i64
  %39 = mul nsw i32 %1, 6
  %40 = sext i32 %39 to i64
  %41 = mul nsw i32 %1, 7
  %42 = sext i32 %41 to i64
  %43 = shl nsw i32 %1, 3
  %44 = sext i32 %43 to i64
  %45 = sub nsw i64 0, %44
  %46 = sub nsw i64 0, %42
  %47 = sub nsw i64 0, %40
  %48 = sub nsw i64 0, %38
  %49 = sub nsw i64 0, %36
  %50 = sub nsw i64 0, %23
  %51 = sub nsw i64 0, %21
  %52 = sub nsw i64 0, %19
  %53 = insertelement <8 x i32> undef, i32 %26, i32 0
  %54 = shufflevector <8 x i32> %53, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %55

55:                                               ; preds = %10, %55
  %56 = phi i16* [ %0, %10 ], [ %222, %55 ]
  %57 = phi i32 [ 0, %10 ], [ %223, %55 ]
  %58 = getelementptr inbounds i16, i16* %56, i64 %12
  %59 = load i16, i16* %58, align 2
  %60 = getelementptr inbounds i16, i16* %56, i64 %14
  %61 = load i16, i16* %60, align 2
  %62 = getelementptr inbounds i16, i16* %56, i64 %16
  %63 = load i16, i16* %62, align 2
  %64 = getelementptr inbounds i16, i16* %56, i64 %18
  %65 = load i16, i16* %64, align 2
  %66 = load i16, i16* %56, align 2
  %67 = getelementptr inbounds i16, i16* %56, i64 %19
  %68 = load i16, i16* %67, align 2
  %69 = getelementptr inbounds i16, i16* %56, i64 %21
  %70 = load i16, i16* %69, align 2
  %71 = getelementptr inbounds i16, i16* %56, i64 %23
  %72 = load i16, i16* %71, align 2
  %73 = load i8, i8* %3, align 1
  %74 = load i8, i8* %2, align 1
  %75 = zext i8 %73 to i32
  %76 = shl i32 %75, %24
  %77 = zext i8 %74 to i32
  %78 = shl i32 %77, %24
  %79 = zext i16 %59 to i32
  %80 = zext i16 %61 to i32
  %81 = sub nsw i32 %79, %80
  %82 = icmp slt i32 %81, 0
  %83 = sub nsw i32 0, %81
  %84 = select i1 %82, i32 %83, i32 %81
  %85 = shl i32 %76, 16
  %86 = ashr exact i32 %85, 16
  %87 = icmp sgt i32 %84, %86
  %88 = zext i16 %63 to i32
  %89 = sub nsw i32 %80, %88
  %90 = icmp slt i32 %89, 0
  %91 = sub nsw i32 0, %89
  %92 = select i1 %90, i32 %91, i32 %89
  %93 = icmp sgt i32 %92, %86
  %94 = or i1 %87, %93
  %95 = insertelement <2 x i16> undef, i16 %65, i32 0
  %96 = insertelement <2 x i16> %95, i16 %66, i32 1
  %97 = zext <2 x i16> %96 to <2 x i32>
  %98 = shufflevector <2 x i32> %97, <2 x i32> undef, <8 x i32> <i32 0, i32 1, i32 1, i32 0, i32 1, i32 0, i32 0, i32 1>
  %99 = extractelement <2 x i32> %97, i32 0
  %100 = sub nsw i32 %88, %99
  %101 = icmp slt i32 %100, 0
  %102 = sub nsw i32 0, %100
  %103 = select i1 %101, i32 %102, i32 %100
  %104 = icmp sgt i32 %103, %86
  %105 = or i1 %104, %94
  %106 = zext i16 %68 to i32
  %107 = extractelement <2 x i32> %97, i32 1
  %108 = sub nsw i32 %106, %107
  %109 = icmp slt i32 %108, 0
  %110 = sub nsw i32 0, %108
  %111 = select i1 %109, i32 %110, i32 %108
  %112 = icmp sgt i32 %111, %86
  %113 = or i1 %112, %105
  %114 = zext i16 %70 to i32
  %115 = sub nsw i32 %114, %106
  %116 = icmp slt i32 %115, 0
  %117 = sub nsw i32 0, %115
  %118 = select i1 %116, i32 %117, i32 %115
  %119 = icmp sgt i32 %118, %86
  %120 = or i1 %119, %113
  %121 = zext i16 %72 to i32
  %122 = sub nsw i32 %121, %114
  %123 = icmp slt i32 %122, 0
  %124 = sub nsw i32 0, %122
  %125 = select i1 %123, i32 %124, i32 %122
  %126 = icmp sgt i32 %125, %86
  %127 = or i1 %126, %120
  %128 = sub nsw i32 %99, %107
  %129 = icmp slt i32 %128, 0
  %130 = sub nsw i32 0, %128
  %131 = select i1 %129, i32 %130, i32 %128
  %132 = shl nuw nsw i32 %131, 1
  %133 = sub nsw i32 %88, %106
  %134 = icmp slt i32 %133, 0
  %135 = sub nsw i32 0, %133
  %136 = select i1 %134, i32 %135, i32 %133
  %137 = lshr i32 %136, 1
  %138 = add nuw nsw i32 %137, %132
  %139 = shl i32 %78, 16
  %140 = ashr exact i32 %139, 16
  %141 = icmp sgt i32 %138, %140
  %142 = or i1 %141, %127
  %143 = xor i1 %142, true
  %144 = sext i1 %143 to i8
  %145 = icmp sgt i32 %103, %26
  %146 = icmp sgt i32 %111, %26
  %147 = or i1 %145, %146
  %148 = sub nsw i32 %80, %99
  %149 = icmp slt i32 %148, 0
  %150 = sub nsw i32 0, %148
  %151 = select i1 %149, i32 %150, i32 %148
  %152 = icmp sgt i32 %151, %26
  %153 = or i1 %152, %147
  %154 = sub nsw i32 %114, %107
  %155 = icmp slt i32 %154, 0
  %156 = sub nsw i32 0, %154
  %157 = select i1 %155, i32 %156, i32 %154
  %158 = icmp sgt i32 %157, %26
  %159 = or i1 %158, %153
  %160 = sub nsw i32 %79, %99
  %161 = icmp slt i32 %160, 0
  %162 = sub nsw i32 0, %160
  %163 = select i1 %161, i32 %162, i32 %160
  %164 = icmp sgt i32 %163, %26
  %165 = or i1 %164, %159
  %166 = sub nsw i32 %121, %107
  %167 = icmp slt i32 %166, 0
  %168 = sub nsw i32 0, %166
  %169 = select i1 %167, i32 %168, i32 %166
  %170 = icmp sgt i32 %169, %26
  %171 = or i1 %170, %165
  %172 = xor i1 %171, true
  %173 = sext i1 %172 to i8
  %174 = getelementptr inbounds i16, i16* %56, i64 %28
  %175 = load i16, i16* %174, align 2
  %176 = getelementptr inbounds i16, i16* %56, i64 %30
  %177 = load i16, i16* %176, align 2
  %178 = getelementptr inbounds i16, i16* %56, i64 %32
  %179 = load i16, i16* %178, align 2
  %180 = getelementptr inbounds i16, i16* %56, i64 %34
  %181 = load i16, i16* %180, align 2
  %182 = getelementptr inbounds i16, i16* %56, i64 %36
  %183 = load i16, i16* %182, align 2
  %184 = getelementptr inbounds i16, i16* %56, i64 %38
  %185 = load i16, i16* %184, align 2
  %186 = getelementptr inbounds i16, i16* %56, i64 %40
  %187 = load i16, i16* %186, align 2
  %188 = getelementptr inbounds i16, i16* %56, i64 %42
  %189 = load i16, i16* %188, align 2
  %190 = insertelement <8 x i16> undef, i16 %175, i32 0
  %191 = insertelement <8 x i16> %190, i16 %189, i32 1
  %192 = insertelement <8 x i16> %191, i16 %187, i32 2
  %193 = insertelement <8 x i16> %192, i16 %177, i32 3
  %194 = insertelement <8 x i16> %193, i16 %185, i32 4
  %195 = insertelement <8 x i16> %194, i16 %179, i32 5
  %196 = insertelement <8 x i16> %195, i16 %181, i32 6
  %197 = insertelement <8 x i16> %196, i16 %183, i32 7
  %198 = zext <8 x i16> %197 to <8 x i32>
  %199 = sub nsw <8 x i32> %198, %98
  %200 = icmp slt <8 x i32> %199, zeroinitializer
  %201 = sub nsw <8 x i32> zeroinitializer, %199
  %202 = select <8 x i1> %200, <8 x i32> %201, <8 x i32> %199
  %203 = icmp sgt <8 x i32> %202, %54
  %204 = shufflevector <8 x i1> %203, <8 x i1> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %205 = or <8 x i1> %203, %204
  %206 = shufflevector <8 x i1> %205, <8 x i1> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %207 = or <8 x i1> %205, %206
  %208 = shufflevector <8 x i1> %207, <8 x i1> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %209 = or <8 x i1> %207, %208
  %210 = extractelement <8 x i1> %209, i32 0
  %211 = xor i1 %210, true
  %212 = sext i1 %211 to i8
  %213 = load i8, i8* %4, align 1
  %214 = getelementptr inbounds i16, i16* %56, i64 %45
  %215 = getelementptr inbounds i16, i16* %56, i64 %46
  %216 = getelementptr inbounds i16, i16* %56, i64 %47
  %217 = getelementptr inbounds i16, i16* %56, i64 %48
  %218 = getelementptr inbounds i16, i16* %56, i64 %49
  %219 = getelementptr inbounds i16, i16* %56, i64 %50
  %220 = getelementptr inbounds i16, i16* %56, i64 %51
  %221 = getelementptr inbounds i16, i16* %56, i64 %52
  tail call fastcc void @highbd_filter16(i8 signext %144, i8 zeroext %213, i8 zeroext %173, i8 zeroext %212, i16* %214, i16* %215, i16* %216, i16* %217, i16* %218, i16* %219, i16* %220, i16* %221, i16* %56, i16* %67, i16* %69, i16* %71, i16* %182, i16* %184, i16* %186, i16* %188, i32 %6)
  %222 = getelementptr inbounds i16, i16* %56, i64 1
  %223 = add nuw nsw i32 %57, 1
  %224 = icmp slt i32 %223, %8
  br i1 %224, label %55, label %225

225:                                              ; preds = %55, %7
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @vpx_highbd_lpf_horizontal_16_dual_c(i16*, i32, i8* nocapture readonly, i8* nocapture readonly, i8* nocapture readonly, i32) local_unnamed_addr #0 {
  tail call fastcc void @highbd_mb_lpf_horizontal_edge_w(i16* %0, i32 %1, i8* %2, i8* %3, i8* %4, i32 2, i32 %5)
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @vpx_highbd_lpf_vertical_16_c(i16* nocapture, i32, i8* nocapture readonly, i8* nocapture readonly, i8* nocapture readonly, i32) local_unnamed_addr #0 {
  tail call fastcc void @highbd_mb_lpf_vertical_edge_w(i16* %0, i32 %1, i8* %2, i8* %3, i8* %4, i32 8, i32 %5)
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal fastcc void @highbd_mb_lpf_vertical_edge_w(i16* nocapture, i32, i8* nocapture readonly, i8* nocapture readonly, i8* nocapture readonly, i32, i32) unnamed_addr #0 {
  %8 = icmp sgt i32 %5, 0
  br i1 %8, label %9, label %176

9:                                                ; preds = %7
  %10 = add nsw i32 %6, -8
  %11 = shl i32 65536, %10
  %12 = ashr exact i32 %11, 16
  %13 = sext i32 %1 to i64
  %14 = insertelement <8 x i32> undef, i32 %12, i32 0
  %15 = shufflevector <8 x i32> %14, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %16

16:                                               ; preds = %16, %9
  %17 = phi i16* [ %0, %9 ], [ %173, %16 ]
  %18 = phi i32 [ 0, %9 ], [ %174, %16 ]
  %19 = getelementptr inbounds i16, i16* %17, i64 -4
  %20 = load i16, i16* %19, align 2
  %21 = getelementptr inbounds i16, i16* %17, i64 -3
  %22 = load i16, i16* %21, align 2
  %23 = getelementptr inbounds i16, i16* %17, i64 -2
  %24 = load i16, i16* %23, align 2
  %25 = getelementptr inbounds i16, i16* %17, i64 -1
  %26 = bitcast i16* %25 to <2 x i16>*
  %27 = load <2 x i16>, <2 x i16>* %26, align 2
  %28 = getelementptr inbounds i16, i16* %17, i64 1
  %29 = load i16, i16* %28, align 2
  %30 = getelementptr inbounds i16, i16* %17, i64 2
  %31 = load i16, i16* %30, align 2
  %32 = getelementptr inbounds i16, i16* %17, i64 3
  %33 = load i16, i16* %32, align 2
  %34 = load i8, i8* %3, align 1
  %35 = load i8, i8* %2, align 1
  %36 = zext i8 %34 to i32
  %37 = shl i32 %36, %10
  %38 = zext i8 %35 to i32
  %39 = shl i32 %38, %10
  %40 = zext i16 %20 to i32
  %41 = zext i16 %22 to i32
  %42 = sub nsw i32 %40, %41
  %43 = icmp slt i32 %42, 0
  %44 = sub nsw i32 0, %42
  %45 = select i1 %43, i32 %44, i32 %42
  %46 = shl i32 %37, 16
  %47 = ashr exact i32 %46, 16
  %48 = icmp sgt i32 %45, %47
  %49 = zext i16 %24 to i32
  %50 = sub nsw i32 %41, %49
  %51 = icmp slt i32 %50, 0
  %52 = sub nsw i32 0, %50
  %53 = select i1 %51, i32 %52, i32 %50
  %54 = icmp sgt i32 %53, %47
  %55 = or i1 %48, %54
  %56 = zext <2 x i16> %27 to <2 x i32>
  %57 = shufflevector <2 x i32> %56, <2 x i32> undef, <8 x i32> <i32 0, i32 1, i32 1, i32 0, i32 1, i32 0, i32 0, i32 1>
  %58 = extractelement <2 x i32> %56, i32 0
  %59 = sub nsw i32 %49, %58
  %60 = icmp slt i32 %59, 0
  %61 = sub nsw i32 0, %59
  %62 = select i1 %60, i32 %61, i32 %59
  %63 = icmp sgt i32 %62, %47
  %64 = or i1 %63, %55
  %65 = zext i16 %29 to i32
  %66 = extractelement <2 x i32> %56, i32 1
  %67 = sub nsw i32 %65, %66
  %68 = icmp slt i32 %67, 0
  %69 = sub nsw i32 0, %67
  %70 = select i1 %68, i32 %69, i32 %67
  %71 = icmp sgt i32 %70, %47
  %72 = or i1 %71, %64
  %73 = zext i16 %31 to i32
  %74 = sub nsw i32 %73, %65
  %75 = icmp slt i32 %74, 0
  %76 = sub nsw i32 0, %74
  %77 = select i1 %75, i32 %76, i32 %74
  %78 = icmp sgt i32 %77, %47
  %79 = or i1 %78, %72
  %80 = zext i16 %33 to i32
  %81 = sub nsw i32 %80, %73
  %82 = icmp slt i32 %81, 0
  %83 = sub nsw i32 0, %81
  %84 = select i1 %82, i32 %83, i32 %81
  %85 = icmp sgt i32 %84, %47
  %86 = or i1 %85, %79
  %87 = sub nsw i32 %58, %66
  %88 = icmp slt i32 %87, 0
  %89 = sub nsw i32 0, %87
  %90 = select i1 %88, i32 %89, i32 %87
  %91 = shl nuw nsw i32 %90, 1
  %92 = sub nsw i32 %49, %65
  %93 = icmp slt i32 %92, 0
  %94 = sub nsw i32 0, %92
  %95 = select i1 %93, i32 %94, i32 %92
  %96 = lshr i32 %95, 1
  %97 = add nuw nsw i32 %96, %91
  %98 = shl i32 %39, 16
  %99 = ashr exact i32 %98, 16
  %100 = icmp sgt i32 %97, %99
  %101 = or i1 %100, %86
  %102 = xor i1 %101, true
  %103 = sext i1 %102 to i8
  %104 = icmp sgt i32 %62, %12
  %105 = icmp sgt i32 %70, %12
  %106 = or i1 %104, %105
  %107 = sub nsw i32 %41, %58
  %108 = icmp slt i32 %107, 0
  %109 = sub nsw i32 0, %107
  %110 = select i1 %108, i32 %109, i32 %107
  %111 = icmp sgt i32 %110, %12
  %112 = or i1 %111, %106
  %113 = sub nsw i32 %73, %66
  %114 = icmp slt i32 %113, 0
  %115 = sub nsw i32 0, %113
  %116 = select i1 %114, i32 %115, i32 %113
  %117 = icmp sgt i32 %116, %12
  %118 = or i1 %117, %112
  %119 = sub nsw i32 %40, %58
  %120 = icmp slt i32 %119, 0
  %121 = sub nsw i32 0, %119
  %122 = select i1 %120, i32 %121, i32 %119
  %123 = icmp sgt i32 %122, %12
  %124 = or i1 %123, %118
  %125 = sub nsw i32 %80, %66
  %126 = icmp slt i32 %125, 0
  %127 = sub nsw i32 0, %125
  %128 = select i1 %126, i32 %127, i32 %125
  %129 = icmp sgt i32 %128, %12
  %130 = or i1 %129, %124
  %131 = xor i1 %130, true
  %132 = sext i1 %131 to i8
  %133 = getelementptr inbounds i16, i16* %17, i64 -8
  %134 = load i16, i16* %133, align 2
  %135 = getelementptr inbounds i16, i16* %17, i64 -7
  %136 = load i16, i16* %135, align 2
  %137 = getelementptr inbounds i16, i16* %17, i64 -6
  %138 = load i16, i16* %137, align 2
  %139 = getelementptr inbounds i16, i16* %17, i64 -5
  %140 = load i16, i16* %139, align 2
  %141 = getelementptr inbounds i16, i16* %17, i64 4
  %142 = load i16, i16* %141, align 2
  %143 = getelementptr inbounds i16, i16* %17, i64 5
  %144 = load i16, i16* %143, align 2
  %145 = getelementptr inbounds i16, i16* %17, i64 6
  %146 = load i16, i16* %145, align 2
  %147 = getelementptr inbounds i16, i16* %17, i64 7
  %148 = load i16, i16* %147, align 2
  %149 = insertelement <8 x i16> undef, i16 %134, i32 0
  %150 = insertelement <8 x i16> %149, i16 %148, i32 1
  %151 = insertelement <8 x i16> %150, i16 %146, i32 2
  %152 = insertelement <8 x i16> %151, i16 %136, i32 3
  %153 = insertelement <8 x i16> %152, i16 %144, i32 4
  %154 = insertelement <8 x i16> %153, i16 %138, i32 5
  %155 = insertelement <8 x i16> %154, i16 %140, i32 6
  %156 = insertelement <8 x i16> %155, i16 %142, i32 7
  %157 = zext <8 x i16> %156 to <8 x i32>
  %158 = sub nsw <8 x i32> %157, %57
  %159 = icmp slt <8 x i32> %158, zeroinitializer
  %160 = sub nsw <8 x i32> zeroinitializer, %158
  %161 = select <8 x i1> %159, <8 x i32> %160, <8 x i32> %158
  %162 = icmp sgt <8 x i32> %161, %15
  %163 = shufflevector <8 x i1> %162, <8 x i1> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %164 = or <8 x i1> %162, %163
  %165 = shufflevector <8 x i1> %164, <8 x i1> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %166 = or <8 x i1> %164, %165
  %167 = shufflevector <8 x i1> %166, <8 x i1> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %168 = or <8 x i1> %166, %167
  %169 = extractelement <8 x i1> %168, i32 0
  %170 = xor i1 %169, true
  %171 = sext i1 %170 to i8
  %172 = load i8, i8* %4, align 1
  tail call fastcc void @highbd_filter16(i8 signext %103, i8 zeroext %172, i8 zeroext %132, i8 zeroext %171, i16* %133, i16* %135, i16* %137, i16* %139, i16* %19, i16* %21, i16* %23, i16* %25, i16* %17, i16* %28, i16* %30, i16* %32, i16* %141, i16* %143, i16* %145, i16* %147, i32 %6)
  %173 = getelementptr inbounds i16, i16* %17, i64 %13
  %174 = add nuw nsw i32 %18, 1
  %175 = icmp eq i32 %174, %5
  br i1 %175, label %176, label %16

176:                                              ; preds = %16, %7
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @vpx_highbd_lpf_vertical_16_dual_c(i16* nocapture, i32, i8* nocapture readonly, i8* nocapture readonly, i8* nocapture readonly, i32) local_unnamed_addr #0 {
  tail call fastcc void @highbd_mb_lpf_vertical_edge_w(i16* %0, i32 %1, i8* %2, i8* %3, i8* %4, i32 16, i32 %5)
  ret void
}

; Function Attrs: inlinehint nofree norecurse nounwind ssp uwtable
define internal fastcc void @filter16(i8 signext, i8 zeroext, i8 zeroext, i8 zeroext, i8* nocapture readonly, i8* nocapture, i8* nocapture, i8* nocapture, i8* nocapture, i8* nocapture, i8* nocapture, i8* nocapture, i8* nocapture, i8* nocapture, i8* nocapture, i8* nocapture, i8* nocapture, i8* nocapture, i8* nocapture, i8* nocapture readonly) unnamed_addr #1 {
  %21 = icmp eq i8 %3, 0
  %22 = icmp eq i8 %2, 0
  %23 = or i1 %22, %21
  %24 = icmp eq i8 %0, 0
  %25 = or i1 %24, %23
  br i1 %25, label %269, label %26

26:                                               ; preds = %20
  %27 = load i8, i8* %4, align 1
  %28 = load i8, i8* %5, align 1
  %29 = load i8, i8* %6, align 1
  %30 = load i8, i8* %7, align 1
  %31 = load i8, i8* %8, align 1
  %32 = load i8, i8* %9, align 1
  %33 = load i8, i8* %10, align 1
  %34 = load i8, i8* %11, align 1
  %35 = load i8, i8* %12, align 1
  %36 = load i8, i8* %13, align 1
  %37 = load i8, i8* %14, align 1
  %38 = load i8, i8* %15, align 1
  %39 = load i8, i8* %16, align 1
  %40 = load i8, i8* %17, align 1
  %41 = load i8, i8* %18, align 1
  %42 = load i8, i8* %19, align 1
  %43 = zext i8 %27 to i32
  %44 = mul nuw nsw i32 %43, 7
  %45 = zext i8 %28 to i32
  %46 = shl nuw nsw i32 %45, 1
  %47 = zext i8 %29 to i32
  %48 = zext i8 %30 to i32
  %49 = zext i8 %31 to i32
  %50 = zext i8 %32 to i32
  %51 = zext i8 %33 to i32
  %52 = zext i8 %34 to i32
  %53 = zext i8 %35 to i32
  %54 = add nuw nsw i32 %52, 8
  %55 = add nuw nsw i32 %54, %44
  %56 = add nuw nsw i32 %55, %46
  %57 = add nuw nsw i32 %56, %47
  %58 = add nuw nsw i32 %57, %48
  %59 = add nuw nsw i32 %58, %49
  %60 = add nuw nsw i32 %59, %50
  %61 = add nuw nsw i32 %60, %51
  %62 = add nuw nsw i32 %61, %53
  %63 = lshr i32 %62, 4
  %64 = trunc i32 %63 to i8
  store i8 %64, i8* %5, align 1
  %65 = mul nuw nsw i32 %43, 6
  %66 = shl nuw nsw i32 %47, 1
  %67 = zext i8 %36 to i32
  %68 = add nuw nsw i32 %45, 8
  %69 = add nuw nsw i32 %68, %65
  %70 = add nuw nsw i32 %69, %66
  %71 = add nuw nsw i32 %70, %48
  %72 = add nuw nsw i32 %71, %49
  %73 = add nuw nsw i32 %72, %50
  %74 = add nuw nsw i32 %73, %51
  %75 = add nuw nsw i32 %74, %52
  %76 = add nuw nsw i32 %75, %53
  %77 = add nuw nsw i32 %76, %67
  %78 = lshr i32 %77, 4
  %79 = trunc i32 %78 to i8
  store i8 %79, i8* %6, align 1
  %80 = mul nuw nsw i32 %43, 5
  %81 = shl nuw nsw i32 %48, 1
  %82 = zext i8 %37 to i32
  %83 = add nuw nsw i32 %68, %80
  %84 = add nuw nsw i32 %83, %47
  %85 = add nuw nsw i32 %84, %81
  %86 = add nuw nsw i32 %85, %49
  %87 = add nuw nsw i32 %86, %50
  %88 = add nuw nsw i32 %87, %51
  %89 = add nuw nsw i32 %88, %52
  %90 = add nuw nsw i32 %89, %53
  %91 = add nuw nsw i32 %90, %67
  %92 = add nuw nsw i32 %91, %82
  %93 = lshr i32 %92, 4
  %94 = trunc i32 %93 to i8
  store i8 %94, i8* %7, align 1
  %95 = shl nuw nsw i32 %43, 2
  %96 = shl nuw nsw i32 %49, 1
  %97 = zext i8 %38 to i32
  %98 = add nuw nsw i32 %68, %95
  %99 = add nuw nsw i32 %98, %47
  %100 = add nuw nsw i32 %99, %48
  %101 = add nuw nsw i32 %100, %96
  %102 = add nuw nsw i32 %101, %50
  %103 = add nuw nsw i32 %102, %51
  %104 = add nuw nsw i32 %103, %52
  %105 = add nuw nsw i32 %104, %53
  %106 = add nuw nsw i32 %105, %67
  %107 = add nuw nsw i32 %106, %82
  %108 = add nuw nsw i32 %107, %97
  %109 = lshr i32 %108, 4
  %110 = trunc i32 %109 to i8
  store i8 %110, i8* %8, align 1
  %111 = mul nuw nsw i32 %43, 3
  %112 = shl nuw nsw i32 %50, 1
  %113 = zext i8 %39 to i32
  %114 = add nuw nsw i32 %68, %111
  %115 = add nuw nsw i32 %114, %47
  %116 = add nuw nsw i32 %115, %48
  %117 = add nuw nsw i32 %116, %49
  %118 = add nuw nsw i32 %117, %112
  %119 = add nuw nsw i32 %118, %51
  %120 = add nuw nsw i32 %119, %52
  %121 = add nuw nsw i32 %120, %53
  %122 = add nuw nsw i32 %121, %67
  %123 = add nuw nsw i32 %122, %82
  %124 = add nuw nsw i32 %123, %97
  %125 = add nuw nsw i32 %124, %113
  %126 = lshr i32 %125, 4
  %127 = trunc i32 %126 to i8
  store i8 %127, i8* %9, align 1
  %128 = zext i8 %40 to i32
  %129 = add nuw nsw i32 %51, %43
  %130 = shl nuw nsw i32 %129, 1
  %131 = add nuw nsw i32 %68, %47
  %132 = add nuw nsw i32 %131, %48
  %133 = add nuw nsw i32 %132, %49
  %134 = add nuw nsw i32 %133, %50
  %135 = add nuw nsw i32 %134, %52
  %136 = add nuw nsw i32 %135, %53
  %137 = add nuw nsw i32 %136, %130
  %138 = add nuw nsw i32 %137, %67
  %139 = add nuw nsw i32 %138, %82
  %140 = add nuw nsw i32 %139, %97
  %141 = add nuw nsw i32 %140, %113
  %142 = add nuw nsw i32 %141, %128
  %143 = lshr i32 %142, 4
  %144 = trunc i32 %143 to i8
  store i8 %144, i8* %10, align 1
  %145 = shl nuw nsw i32 %52, 1
  %146 = zext i8 %41 to i32
  %147 = add nuw nsw i32 %43, 8
  %148 = add nuw nsw i32 %147, %45
  %149 = add nuw nsw i32 %148, %47
  %150 = add nuw nsw i32 %149, %48
  %151 = add nuw nsw i32 %150, %49
  %152 = add nuw nsw i32 %151, %50
  %153 = add nuw nsw i32 %152, %51
  %154 = add nuw nsw i32 %153, %145
  %155 = add nuw nsw i32 %154, %53
  %156 = add nuw nsw i32 %155, %67
  %157 = add nuw nsw i32 %156, %82
  %158 = add nuw nsw i32 %157, %97
  %159 = add nuw nsw i32 %158, %113
  %160 = add nuw nsw i32 %159, %128
  %161 = add nuw nsw i32 %160, %146
  %162 = lshr i32 %161, 4
  %163 = trunc i32 %162 to i8
  store i8 %163, i8* %11, align 1
  %164 = shl nuw nsw i32 %53, 1
  %165 = zext i8 %42 to i32
  %166 = add nuw nsw i32 %134, %51
  %167 = add nuw nsw i32 %166, %52
  %168 = add nuw nsw i32 %167, %164
  %169 = add nuw nsw i32 %168, %67
  %170 = add nuw nsw i32 %169, %82
  %171 = add nuw nsw i32 %170, %97
  %172 = add nuw nsw i32 %171, %113
  %173 = add nuw nsw i32 %172, %128
  %174 = add nuw nsw i32 %173, %146
  %175 = add nuw nsw i32 %174, %165
  %176 = lshr i32 %175, 4
  %177 = trunc i32 %176 to i8
  store i8 %177, i8* %12, align 1
  %178 = add nuw nsw i32 %165, %67
  %179 = shl nuw nsw i32 %178, 1
  %180 = add nuw nsw i32 %47, 8
  %181 = add nuw nsw i32 %180, %48
  %182 = add nuw nsw i32 %181, %49
  %183 = add nuw nsw i32 %182, %50
  %184 = add nuw nsw i32 %183, %51
  %185 = add nuw nsw i32 %184, %52
  %186 = add nuw nsw i32 %185, %53
  %187 = add nuw nsw i32 %186, %82
  %188 = add nuw nsw i32 %187, %97
  %189 = add nuw nsw i32 %188, %113
  %190 = add nuw nsw i32 %189, %128
  %191 = add nuw nsw i32 %190, %146
  %192 = add nuw nsw i32 %191, %179
  %193 = lshr i32 %192, 4
  %194 = trunc i32 %193 to i8
  store i8 %194, i8* %13, align 1
  %195 = shl nuw nsw i32 %82, 1
  %196 = mul nuw nsw i32 %165, 3
  %197 = add nuw nsw i32 %48, 8
  %198 = add nuw nsw i32 %197, %49
  %199 = add nuw nsw i32 %198, %50
  %200 = add nuw nsw i32 %199, %51
  %201 = add nuw nsw i32 %200, %52
  %202 = add nuw nsw i32 %201, %53
  %203 = add nuw nsw i32 %202, %67
  %204 = add nuw nsw i32 %203, %195
  %205 = add nuw nsw i32 %204, %97
  %206 = add nuw nsw i32 %205, %113
  %207 = add nuw nsw i32 %206, %128
  %208 = add nuw nsw i32 %207, %146
  %209 = add nuw nsw i32 %208, %196
  %210 = lshr i32 %209, 4
  %211 = trunc i32 %210 to i8
  store i8 %211, i8* %14, align 1
  %212 = shl nuw nsw i32 %97, 1
  %213 = shl nuw nsw i32 %165, 2
  %214 = add nuw nsw i32 %49, 8
  %215 = add nuw nsw i32 %214, %50
  %216 = add nuw nsw i32 %215, %51
  %217 = add nuw nsw i32 %216, %52
  %218 = add nuw nsw i32 %217, %53
  %219 = add nuw nsw i32 %218, %67
  %220 = add nuw nsw i32 %219, %82
  %221 = add nuw nsw i32 %220, %212
  %222 = add nuw nsw i32 %221, %113
  %223 = add nuw nsw i32 %222, %128
  %224 = add nuw nsw i32 %223, %146
  %225 = add nuw nsw i32 %224, %213
  %226 = lshr i32 %225, 4
  %227 = trunc i32 %226 to i8
  store i8 %227, i8* %15, align 1
  %228 = shl nuw nsw i32 %113, 1
  %229 = mul nuw nsw i32 %165, 5
  %230 = add nuw nsw i32 %50, 8
  %231 = add nuw nsw i32 %230, %51
  %232 = add nuw nsw i32 %231, %52
  %233 = add nuw nsw i32 %232, %53
  %234 = add nuw nsw i32 %233, %67
  %235 = add nuw nsw i32 %234, %82
  %236 = add nuw nsw i32 %235, %97
  %237 = add nuw nsw i32 %236, %228
  %238 = add nuw nsw i32 %237, %128
  %239 = add nuw nsw i32 %238, %146
  %240 = add nuw nsw i32 %239, %229
  %241 = lshr i32 %240, 4
  %242 = trunc i32 %241 to i8
  store i8 %242, i8* %16, align 1
  %243 = shl nuw nsw i32 %128, 1
  %244 = mul nuw nsw i32 %165, 6
  %245 = add nuw nsw i32 %51, 8
  %246 = add nuw nsw i32 %245, %52
  %247 = add nuw nsw i32 %246, %53
  %248 = add nuw nsw i32 %247, %67
  %249 = add nuw nsw i32 %248, %82
  %250 = add nuw nsw i32 %249, %97
  %251 = add nuw nsw i32 %250, %113
  %252 = add nuw nsw i32 %251, %243
  %253 = add nuw nsw i32 %252, %146
  %254 = add nuw nsw i32 %253, %244
  %255 = lshr i32 %254, 4
  %256 = trunc i32 %255 to i8
  store i8 %256, i8* %17, align 1
  %257 = shl nuw nsw i32 %146, 1
  %258 = mul nuw nsw i32 %165, 7
  %259 = add nuw nsw i32 %54, %53
  %260 = add nuw nsw i32 %259, %67
  %261 = add nuw nsw i32 %260, %82
  %262 = add nuw nsw i32 %261, %97
  %263 = add nuw nsw i32 %262, %113
  %264 = add nuw nsw i32 %263, %128
  %265 = add nuw nsw i32 %264, %257
  %266 = add nuw nsw i32 %265, %258
  %267 = lshr i32 %266, 4
  %268 = trunc i32 %267 to i8
  store i8 %268, i8* %18, align 1
  br label %270

269:                                              ; preds = %20
  tail call fastcc void @filter8(i8 signext %0, i8 zeroext %1, i8 zeroext %2, i8* %8, i8* %9, i8* %10, i8* %11, i8* %12, i8* %13, i8* %14, i8* %15)
  br label %270

270:                                              ; preds = %269, %26
  ret void
}

; Function Attrs: inlinehint nofree norecurse nounwind ssp uwtable
define internal fastcc void @highbd_filter16(i8 signext, i8 zeroext, i8 zeroext, i8 zeroext, i16* nocapture readonly, i16* nocapture, i16* nocapture, i16* nocapture, i16* nocapture, i16* nocapture, i16* nocapture, i16* nocapture, i16* nocapture, i16* nocapture, i16* nocapture, i16* nocapture, i16* nocapture, i16* nocapture, i16* nocapture, i16* nocapture readonly, i32) unnamed_addr #1 {
  %22 = icmp eq i8 %3, 0
  %23 = icmp eq i8 %2, 0
  %24 = or i1 %23, %22
  %25 = icmp eq i8 %0, 0
  %26 = or i1 %25, %24
  br i1 %26, label %270, label %27

27:                                               ; preds = %21
  %28 = load i16, i16* %4, align 2
  %29 = load i16, i16* %5, align 2
  %30 = load i16, i16* %6, align 2
  %31 = load i16, i16* %7, align 2
  %32 = load i16, i16* %8, align 2
  %33 = load i16, i16* %9, align 2
  %34 = load i16, i16* %10, align 2
  %35 = load i16, i16* %11, align 2
  %36 = load i16, i16* %12, align 2
  %37 = load i16, i16* %13, align 2
  %38 = load i16, i16* %14, align 2
  %39 = load i16, i16* %15, align 2
  %40 = load i16, i16* %16, align 2
  %41 = load i16, i16* %17, align 2
  %42 = load i16, i16* %18, align 2
  %43 = load i16, i16* %19, align 2
  %44 = zext i16 %28 to i32
  %45 = mul nuw nsw i32 %44, 7
  %46 = zext i16 %29 to i32
  %47 = shl nuw nsw i32 %46, 1
  %48 = zext i16 %30 to i32
  %49 = zext i16 %31 to i32
  %50 = zext i16 %32 to i32
  %51 = zext i16 %33 to i32
  %52 = zext i16 %34 to i32
  %53 = zext i16 %35 to i32
  %54 = zext i16 %36 to i32
  %55 = add nuw nsw i32 %53, 8
  %56 = add nuw nsw i32 %55, %45
  %57 = add nuw nsw i32 %56, %47
  %58 = add nuw nsw i32 %57, %48
  %59 = add nuw nsw i32 %58, %49
  %60 = add nuw nsw i32 %59, %50
  %61 = add nuw nsw i32 %60, %51
  %62 = add nuw nsw i32 %61, %52
  %63 = add nuw nsw i32 %62, %54
  %64 = lshr i32 %63, 4
  %65 = trunc i32 %64 to i16
  store i16 %65, i16* %5, align 2
  %66 = mul nuw nsw i32 %44, 6
  %67 = shl nuw nsw i32 %48, 1
  %68 = zext i16 %37 to i32
  %69 = add nuw nsw i32 %46, 8
  %70 = add nuw nsw i32 %69, %66
  %71 = add nuw nsw i32 %70, %67
  %72 = add nuw nsw i32 %71, %49
  %73 = add nuw nsw i32 %72, %50
  %74 = add nuw nsw i32 %73, %51
  %75 = add nuw nsw i32 %74, %52
  %76 = add nuw nsw i32 %75, %53
  %77 = add nuw nsw i32 %76, %54
  %78 = add nuw nsw i32 %77, %68
  %79 = lshr i32 %78, 4
  %80 = trunc i32 %79 to i16
  store i16 %80, i16* %6, align 2
  %81 = mul nuw nsw i32 %44, 5
  %82 = shl nuw nsw i32 %49, 1
  %83 = zext i16 %38 to i32
  %84 = add nuw nsw i32 %69, %81
  %85 = add nuw nsw i32 %84, %48
  %86 = add nuw nsw i32 %85, %82
  %87 = add nuw nsw i32 %86, %50
  %88 = add nuw nsw i32 %87, %51
  %89 = add nuw nsw i32 %88, %52
  %90 = add nuw nsw i32 %89, %53
  %91 = add nuw nsw i32 %90, %54
  %92 = add nuw nsw i32 %91, %68
  %93 = add nuw nsw i32 %92, %83
  %94 = lshr i32 %93, 4
  %95 = trunc i32 %94 to i16
  store i16 %95, i16* %7, align 2
  %96 = shl nuw nsw i32 %44, 2
  %97 = shl nuw nsw i32 %50, 1
  %98 = zext i16 %39 to i32
  %99 = add nuw nsw i32 %69, %96
  %100 = add nuw nsw i32 %99, %48
  %101 = add nuw nsw i32 %100, %49
  %102 = add nuw nsw i32 %101, %97
  %103 = add nuw nsw i32 %102, %51
  %104 = add nuw nsw i32 %103, %52
  %105 = add nuw nsw i32 %104, %53
  %106 = add nuw nsw i32 %105, %54
  %107 = add nuw nsw i32 %106, %68
  %108 = add nuw nsw i32 %107, %83
  %109 = add nuw nsw i32 %108, %98
  %110 = lshr i32 %109, 4
  %111 = trunc i32 %110 to i16
  store i16 %111, i16* %8, align 2
  %112 = mul nuw nsw i32 %44, 3
  %113 = shl nuw nsw i32 %51, 1
  %114 = zext i16 %40 to i32
  %115 = add nuw nsw i32 %69, %112
  %116 = add nuw nsw i32 %115, %48
  %117 = add nuw nsw i32 %116, %49
  %118 = add nuw nsw i32 %117, %50
  %119 = add nuw nsw i32 %118, %113
  %120 = add nuw nsw i32 %119, %52
  %121 = add nuw nsw i32 %120, %53
  %122 = add nuw nsw i32 %121, %54
  %123 = add nuw nsw i32 %122, %68
  %124 = add nuw nsw i32 %123, %83
  %125 = add nuw nsw i32 %124, %98
  %126 = add nuw nsw i32 %125, %114
  %127 = lshr i32 %126, 4
  %128 = trunc i32 %127 to i16
  store i16 %128, i16* %9, align 2
  %129 = zext i16 %41 to i32
  %130 = add nuw nsw i32 %52, %44
  %131 = shl nuw nsw i32 %130, 1
  %132 = add nuw nsw i32 %69, %48
  %133 = add nuw nsw i32 %132, %49
  %134 = add nuw nsw i32 %133, %50
  %135 = add nuw nsw i32 %134, %51
  %136 = add nuw nsw i32 %135, %53
  %137 = add nuw nsw i32 %136, %54
  %138 = add nuw nsw i32 %137, %131
  %139 = add nuw nsw i32 %138, %68
  %140 = add nuw nsw i32 %139, %83
  %141 = add nuw nsw i32 %140, %98
  %142 = add nuw nsw i32 %141, %114
  %143 = add nuw nsw i32 %142, %129
  %144 = lshr i32 %143, 4
  %145 = trunc i32 %144 to i16
  store i16 %145, i16* %10, align 2
  %146 = shl nuw nsw i32 %53, 1
  %147 = zext i16 %42 to i32
  %148 = add nuw nsw i32 %44, 8
  %149 = add nuw nsw i32 %148, %46
  %150 = add nuw nsw i32 %149, %48
  %151 = add nuw nsw i32 %150, %49
  %152 = add nuw nsw i32 %151, %50
  %153 = add nuw nsw i32 %152, %51
  %154 = add nuw nsw i32 %153, %52
  %155 = add nuw nsw i32 %154, %146
  %156 = add nuw nsw i32 %155, %54
  %157 = add nuw nsw i32 %156, %68
  %158 = add nuw nsw i32 %157, %83
  %159 = add nuw nsw i32 %158, %98
  %160 = add nuw nsw i32 %159, %114
  %161 = add nuw nsw i32 %160, %129
  %162 = add nuw nsw i32 %161, %147
  %163 = lshr i32 %162, 4
  %164 = trunc i32 %163 to i16
  store i16 %164, i16* %11, align 2
  %165 = shl nuw nsw i32 %54, 1
  %166 = zext i16 %43 to i32
  %167 = add nuw nsw i32 %135, %52
  %168 = add nuw nsw i32 %167, %53
  %169 = add nuw nsw i32 %168, %165
  %170 = add nuw nsw i32 %169, %68
  %171 = add nuw nsw i32 %170, %83
  %172 = add nuw nsw i32 %171, %98
  %173 = add nuw nsw i32 %172, %114
  %174 = add nuw nsw i32 %173, %129
  %175 = add nuw nsw i32 %174, %147
  %176 = add nuw nsw i32 %175, %166
  %177 = lshr i32 %176, 4
  %178 = trunc i32 %177 to i16
  store i16 %178, i16* %12, align 2
  %179 = add nuw nsw i32 %166, %68
  %180 = shl nuw nsw i32 %179, 1
  %181 = add nuw nsw i32 %48, 8
  %182 = add nuw nsw i32 %181, %49
  %183 = add nuw nsw i32 %182, %50
  %184 = add nuw nsw i32 %183, %51
  %185 = add nuw nsw i32 %184, %52
  %186 = add nuw nsw i32 %185, %53
  %187 = add nuw nsw i32 %186, %54
  %188 = add nuw nsw i32 %187, %83
  %189 = add nuw nsw i32 %188, %98
  %190 = add nuw nsw i32 %189, %114
  %191 = add nuw nsw i32 %190, %129
  %192 = add nuw nsw i32 %191, %147
  %193 = add nuw nsw i32 %192, %180
  %194 = lshr i32 %193, 4
  %195 = trunc i32 %194 to i16
  store i16 %195, i16* %13, align 2
  %196 = shl nuw nsw i32 %83, 1
  %197 = mul nuw nsw i32 %166, 3
  %198 = add nuw nsw i32 %49, 8
  %199 = add nuw nsw i32 %198, %50
  %200 = add nuw nsw i32 %199, %51
  %201 = add nuw nsw i32 %200, %52
  %202 = add nuw nsw i32 %201, %53
  %203 = add nuw nsw i32 %202, %54
  %204 = add nuw nsw i32 %203, %68
  %205 = add nuw nsw i32 %204, %196
  %206 = add nuw nsw i32 %205, %98
  %207 = add nuw nsw i32 %206, %114
  %208 = add nuw nsw i32 %207, %129
  %209 = add nuw nsw i32 %208, %147
  %210 = add nuw nsw i32 %209, %197
  %211 = lshr i32 %210, 4
  %212 = trunc i32 %211 to i16
  store i16 %212, i16* %14, align 2
  %213 = shl nuw nsw i32 %98, 1
  %214 = shl nuw nsw i32 %166, 2
  %215 = add nuw nsw i32 %50, 8
  %216 = add nuw nsw i32 %215, %51
  %217 = add nuw nsw i32 %216, %52
  %218 = add nuw nsw i32 %217, %53
  %219 = add nuw nsw i32 %218, %54
  %220 = add nuw nsw i32 %219, %68
  %221 = add nuw nsw i32 %220, %83
  %222 = add nuw nsw i32 %221, %213
  %223 = add nuw nsw i32 %222, %114
  %224 = add nuw nsw i32 %223, %129
  %225 = add nuw nsw i32 %224, %147
  %226 = add nuw nsw i32 %225, %214
  %227 = lshr i32 %226, 4
  %228 = trunc i32 %227 to i16
  store i16 %228, i16* %15, align 2
  %229 = shl nuw nsw i32 %114, 1
  %230 = mul nuw nsw i32 %166, 5
  %231 = add nuw nsw i32 %51, 8
  %232 = add nuw nsw i32 %231, %52
  %233 = add nuw nsw i32 %232, %53
  %234 = add nuw nsw i32 %233, %54
  %235 = add nuw nsw i32 %234, %68
  %236 = add nuw nsw i32 %235, %83
  %237 = add nuw nsw i32 %236, %98
  %238 = add nuw nsw i32 %237, %229
  %239 = add nuw nsw i32 %238, %129
  %240 = add nuw nsw i32 %239, %147
  %241 = add nuw nsw i32 %240, %230
  %242 = lshr i32 %241, 4
  %243 = trunc i32 %242 to i16
  store i16 %243, i16* %16, align 2
  %244 = shl nuw nsw i32 %129, 1
  %245 = mul nuw nsw i32 %166, 6
  %246 = add nuw nsw i32 %52, 8
  %247 = add nuw nsw i32 %246, %53
  %248 = add nuw nsw i32 %247, %54
  %249 = add nuw nsw i32 %248, %68
  %250 = add nuw nsw i32 %249, %83
  %251 = add nuw nsw i32 %250, %98
  %252 = add nuw nsw i32 %251, %114
  %253 = add nuw nsw i32 %252, %244
  %254 = add nuw nsw i32 %253, %147
  %255 = add nuw nsw i32 %254, %245
  %256 = lshr i32 %255, 4
  %257 = trunc i32 %256 to i16
  store i16 %257, i16* %17, align 2
  %258 = shl nuw nsw i32 %147, 1
  %259 = mul nuw nsw i32 %166, 7
  %260 = add nuw nsw i32 %55, %54
  %261 = add nuw nsw i32 %260, %68
  %262 = add nuw nsw i32 %261, %83
  %263 = add nuw nsw i32 %262, %98
  %264 = add nuw nsw i32 %263, %114
  %265 = add nuw nsw i32 %264, %129
  %266 = add nuw nsw i32 %265, %258
  %267 = add nuw nsw i32 %266, %259
  %268 = lshr i32 %267, 4
  %269 = trunc i32 %268 to i16
  store i16 %269, i16* %18, align 2
  br label %339

270:                                              ; preds = %21
  %271 = or i1 %25, %23
  br i1 %271, label %338, label %272

272:                                              ; preds = %270
  %273 = load i16, i16* %8, align 2
  %274 = load i16, i16* %9, align 2
  %275 = load i16, i16* %10, align 2
  %276 = load i16, i16* %11, align 2
  %277 = load i16, i16* %12, align 2
  %278 = load i16, i16* %13, align 2
  %279 = load i16, i16* %14, align 2
  %280 = load i16, i16* %15, align 2
  %281 = zext i16 %273 to i32
  %282 = mul nuw nsw i32 %281, 3
  %283 = zext i16 %274 to i32
  %284 = shl nuw nsw i32 %283, 1
  %285 = zext i16 %275 to i32
  %286 = zext i16 %276 to i32
  %287 = zext i16 %277 to i32
  %288 = add nuw nsw i32 %286, 4
  %289 = add nuw nsw i32 %288, %287
  %290 = add nuw nsw i32 %289, %282
  %291 = add nuw nsw i32 %290, %284
  %292 = add nuw nsw i32 %291, %285
  %293 = lshr i32 %292, 3
  %294 = trunc i32 %293 to i16
  store i16 %294, i16* %9, align 2
  %295 = zext i16 %278 to i32
  %296 = add nuw nsw i32 %285, %281
  %297 = shl nuw nsw i32 %296, 1
  %298 = add nuw nsw i32 %288, %283
  %299 = add nuw nsw i32 %295, %287
  %300 = add nuw nsw i32 %299, %297
  %301 = add nuw nsw i32 %300, %298
  %302 = lshr i32 %301, 3
  %303 = trunc i32 %302 to i16
  store i16 %303, i16* %10, align 2
  %304 = shl nuw nsw i32 %286, 1
  %305 = zext i16 %279 to i32
  %306 = add nuw nsw i32 %287, %285
  %307 = add nuw nsw i32 %306, 4
  %308 = add nuw nsw i32 %307, %281
  %309 = add nuw nsw i32 %308, %283
  %310 = add nuw nsw i32 %309, %304
  %311 = add nuw nsw i32 %310, %295
  %312 = add nuw nsw i32 %311, %305
  %313 = lshr i32 %312, 3
  %314 = trunc i32 %313 to i16
  store i16 %314, i16* %11, align 2
  %315 = shl nuw nsw i32 %287, 1
  %316 = zext i16 %280 to i32
  %317 = add nuw nsw i32 %305, %285
  %318 = add nuw nsw i32 %317, %298
  %319 = add nuw nsw i32 %318, %315
  %320 = add nuw nsw i32 %319, %295
  %321 = add nuw nsw i32 %320, %316
  %322 = lshr i32 %321, 3
  %323 = trunc i32 %322 to i16
  store i16 %323, i16* %12, align 2
  %324 = add nuw nsw i32 %316, %295
  %325 = shl nuw nsw i32 %324, 1
  %326 = add nuw nsw i32 %289, %285
  %327 = add nuw nsw i32 %326, %305
  %328 = add nuw nsw i32 %327, %325
  %329 = lshr i32 %328, 3
  %330 = trunc i32 %329 to i16
  store i16 %330, i16* %13, align 2
  %331 = shl nuw nsw i32 %305, 1
  %332 = mul nuw nsw i32 %316, 3
  %333 = add nuw nsw i32 %289, %295
  %334 = add nuw nsw i32 %333, %331
  %335 = add nuw nsw i32 %334, %332
  %336 = lshr i32 %335, 3
  %337 = trunc i32 %336 to i16
  store i16 %337, i16* %14, align 2
  br label %339

338:                                              ; preds = %270
  tail call fastcc void @highbd_filter4(i8 signext %0, i8 zeroext %1, i16* %10, i16* %11, i16* %12, i16* %13, i32 %20) #2
  br label %339

339:                                              ; preds = %338, %272, %27
  ret void
}

attributes #0 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { inlinehint nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
