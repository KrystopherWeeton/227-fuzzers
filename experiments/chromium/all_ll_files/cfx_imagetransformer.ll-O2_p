; ModuleID = '../../third_party/pdfium/core/fxge/dib/cfx_imagetransformer.cpp'
source_filename = "../../third_party/pdfium/core/fxge/dib/cfx_imagetransformer.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.CFX_ImageTransformer = type { %"class.fxcrt::RetainPtr", %class.CFX_Matrix, %struct.FX_RECT, %struct.FX_RECT, %class.CFX_Matrix, %"class.std::__1::unique_ptr.10", %class.CFX_BitmapStorer, %struct.FXDIB_ResampleOptions, i32 }
%"class.fxcrt::RetainPtr" = type { %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %class.CFX_DIBBase* }
%class.CFX_DIBBase = type { %"class.fxcrt::Retainable", i16, i32, i32, i32, %"class.fxcrt::RetainPtr.0", %"class.std::__1::vector" }
%"class.fxcrt::Retainable" = type { i32 (...)**, i64 }
%"class.fxcrt::RetainPtr.0" = type { %"class.std::__1::unique_ptr.1" }
%"class.std::__1::unique_ptr.1" = type { %"class.std::__1::__compressed_pair.2" }
%"class.std::__1::__compressed_pair.2" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.std::__1::__compressed_pair_elem.3" = type { %class.CFX_DIBitmap* }
%class.CFX_DIBitmap = type { %class.CFX_DIBBase, %"class.fxcrt::MaybeOwned" }
%"class.fxcrt::MaybeOwned" = type { %"class.std::__1::unique_ptr.20", %"class.fxcrt::UnownedPtr.24" }
%"class.std::__1::unique_ptr.20" = type { %"class.std::__1::__compressed_pair.21" }
%"class.std::__1::__compressed_pair.21" = type { %"struct.std::__1::__compressed_pair_elem.22" }
%"struct.std::__1::__compressed_pair_elem.22" = type { i8* }
%"class.fxcrt::UnownedPtr.24" = type { i8* }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i32*, i32*, %"class.std::__1::__compressed_pair.5" }
%"class.std::__1::__compressed_pair.5" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"struct.std::__1::__compressed_pair_elem.6" = type { i32* }
%struct.FX_RECT = type { i32, i32, i32, i32 }
%class.CFX_Matrix = type { float, float, float, float, float, float }
%"class.std::__1::unique_ptr.10" = type { %"class.std::__1::__compressed_pair.11" }
%"class.std::__1::__compressed_pair.11" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"struct.std::__1::__compressed_pair_elem.12" = type { %class.CFX_ImageStretcher* }
%class.CFX_ImageStretcher = type <{ %"class.fxcrt::UnownedPtr", %"class.fxcrt::RetainPtr", %"class.std::__1::unique_ptr.13", %struct.FXDIB_ResampleOptions, i32, i32, %struct.FX_RECT, i16, [2 x i8] }>
%"class.fxcrt::UnownedPtr" = type { %class.ScanlineComposerIface* }
%class.ScanlineComposerIface = type { i32 (...)** }
%"class.std::__1::unique_ptr.13" = type { %"class.std::__1::__compressed_pair.14" }
%"class.std::__1::__compressed_pair.14" = type { %"struct.std::__1::__compressed_pair_elem.15" }
%"struct.std::__1::__compressed_pair_elem.15" = type { %class.CStretchEngine* }
%class.CStretchEngine = type opaque
%class.CFX_BitmapStorer = type { %class.ScanlineComposerIface, %"class.fxcrt::RetainPtr.0" }
%struct.FXDIB_ResampleOptions = type { i8, i8, i8, i8 }
%class.CFX_FloatRect = type { float, float, float, float }
%class.PauseIndicatorIface = type opaque
%"struct.CFX_ImageTransformer::CalcData" = type <{ %class.CFX_DIBitmap*, %class.CFX_Matrix*, i8*, i32, [4 x i8] }>

@_ZN20CFX_ImageTransformerC1ERKN5fxcrt9RetainPtrI11CFX_DIBBaseEERK10CFX_MatrixRK21FXDIB_ResampleOptionsPK7FX_RECT = hidden unnamed_addr alias void (%class.CFX_ImageTransformer*, %"class.fxcrt::RetainPtr"*, %class.CFX_Matrix*, %struct.FXDIB_ResampleOptions*, %struct.FX_RECT*), void (%class.CFX_ImageTransformer*, %"class.fxcrt::RetainPtr"*, %class.CFX_Matrix*, %struct.FXDIB_ResampleOptions*, %struct.FX_RECT*)* @_ZN20CFX_ImageTransformerC2ERKN5fxcrt9RetainPtrI11CFX_DIBBaseEERK10CFX_MatrixRK21FXDIB_ResampleOptionsPK7FX_RECT
@_ZN20CFX_ImageTransformerD1Ev = hidden unnamed_addr alias void (%class.CFX_ImageTransformer*), void (%class.CFX_ImageTransformer*)* @_ZN20CFX_ImageTransformerD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN20CFX_ImageTransformerC2ERKN5fxcrt9RetainPtrI11CFX_DIBBaseEERK10CFX_MatrixRK21FXDIB_ResampleOptionsPK7FX_RECT(%class.CFX_ImageTransformer*, %"class.fxcrt::RetainPtr"* nocapture readonly dereferenceable(8), %class.CFX_Matrix* nocapture readonly dereferenceable(24), %struct.FXDIB_ResampleOptions* nocapture readonly dereferenceable(4), %struct.FX_RECT*) unnamed_addr #0 align 2 {
  %6 = alloca %struct.FX_RECT, align 4
  %7 = alloca { <2 x float>, <2 x float> }, align 8
  %8 = bitcast { <2 x float>, <2 x float> }* %7 to %class.CFX_FloatRect*
  %9 = alloca %struct.FX_RECT, align 8
  %10 = alloca %class.CFX_Matrix, align 16
  %11 = alloca %class.CFX_Matrix, align 4
  %12 = alloca { i64, i64 }, align 8
  %13 = bitcast { i64, i64 }* %12 to %struct.FX_RECT*
  %14 = alloca { <2 x float>, <2 x float> }, align 8
  %15 = bitcast { <2 x float>, <2 x float> }* %14 to %class.CFX_FloatRect*
  %16 = alloca %class.CFX_FloatRect, align 4
  %17 = getelementptr inbounds %class.CFX_ImageTransformer, %class.CFX_ImageTransformer* %0, i64 0, i32 0
  %18 = getelementptr inbounds %"class.fxcrt::RetainPtr", %"class.fxcrt::RetainPtr"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %19 = load %class.CFX_DIBBase*, %class.CFX_DIBBase** %18, align 8
  %20 = ptrtoint %class.CFX_DIBBase* %19 to i64
  %21 = bitcast %class.CFX_ImageTransformer* %0 to i64*
  store i64 %20, i64* %21, align 8
  %22 = icmp eq %class.CFX_DIBBase* %19, null
  br i1 %22, label %27, label %23

23:                                               ; preds = %5
  %24 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %19, i64 0, i32 0, i32 1
  %25 = load i64, i64* %24, align 8
  %26 = add nsw i64 %25, 1
  store i64 %26, i64* %24, align 8
  br label %27

27:                                               ; preds = %5, %23
  %28 = getelementptr inbounds %class.CFX_ImageTransformer, %class.CFX_ImageTransformer* %0, i64 0, i32 1
  %29 = bitcast %class.CFX_Matrix* %28 to i8*
  %30 = bitcast %class.CFX_Matrix* %2 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %29, i8* align 4 %30, i64 24, i1 false)
  %31 = getelementptr inbounds %class.CFX_ImageTransformer, %class.CFX_ImageTransformer* %0, i64 0, i32 2
  %32 = bitcast %struct.FX_RECT* %31 to i8*
  %33 = getelementptr inbounds %class.CFX_ImageTransformer, %class.CFX_ImageTransformer* %0, i64 0, i32 3
  %34 = bitcast %struct.FX_RECT* %33 to i8*
  %35 = getelementptr inbounds %class.CFX_ImageTransformer, %class.CFX_ImageTransformer* %0, i64 0, i32 4
  %36 = bitcast %struct.FX_RECT* %31 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %36, i8 0, i64 32, i1 false)
  %37 = bitcast %class.CFX_Matrix* %35 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00>, <4 x float>* %37, align 4
  %38 = getelementptr inbounds %class.CFX_ImageTransformer, %class.CFX_ImageTransformer* %0, i64 0, i32 4, i32 4
  %39 = getelementptr inbounds %class.CFX_ImageTransformer, %class.CFX_ImageTransformer* %0, i64 0, i32 5
  %40 = bitcast %"class.std::__1::unique_ptr.10"* %39 to i64*
  %41 = getelementptr inbounds %class.CFX_ImageTransformer, %class.CFX_ImageTransformer* %0, i64 0, i32 6
  %42 = bitcast float* %38 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %42, i8 0, i64 16, i1 false)
  tail call void @_ZN16CFX_BitmapStorerC1Ev(%class.CFX_BitmapStorer* %41) #8
  %43 = getelementptr inbounds %class.CFX_ImageTransformer, %class.CFX_ImageTransformer* %0, i64 0, i32 7
  %44 = bitcast %struct.FXDIB_ResampleOptions* %3 to i32*
  %45 = bitcast %struct.FXDIB_ResampleOptions* %43 to i32*
  %46 = load i32, i32* %44, align 1
  store i32 %46, i32* %45, align 8
  %47 = getelementptr inbounds %class.CFX_ImageTransformer, %class.CFX_ImageTransformer* %0, i64 0, i32 8
  store i32 0, i32* %47, align 4
  %48 = bitcast { <2 x float>, <2 x float> }* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %48) #8
  %49 = tail call { <2 x float>, <2 x float> } @_ZNK10CFX_Matrix11GetUnitRectEv(%class.CFX_Matrix* %28) #8
  %50 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %7, i64 0, i32 0
  %51 = extractvalue { <2 x float>, <2 x float> } %49, 0
  store <2 x float> %51, <2 x float>* %50, align 8
  %52 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %7, i64 0, i32 1
  %53 = extractvalue { <2 x float>, <2 x float> } %49, 1
  store <2 x float> %53, <2 x float>* %52, align 8
  %54 = call { i64, i64 } @_ZNK13CFX_FloatRect14GetClosestRectEv(%class.CFX_FloatRect* nonnull %8) #8
  %55 = extractvalue { i64, i64 } %54, 0
  %56 = trunc i64 %55 to i32
  %57 = lshr i64 %55, 32
  %58 = trunc i64 %57 to i32
  %59 = extractvalue { i64, i64 } %54, 1
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %48) #8
  %60 = bitcast %struct.FX_RECT* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %60) #8
  %61 = getelementptr inbounds %struct.FX_RECT, %struct.FX_RECT* %9, i64 0, i32 0
  %62 = getelementptr inbounds %struct.FX_RECT, %struct.FX_RECT* %9, i64 0, i32 1
  %63 = getelementptr inbounds %struct.FX_RECT, %struct.FX_RECT* %9, i64 0, i32 2
  %64 = getelementptr inbounds %struct.FX_RECT, %struct.FX_RECT* %9, i64 0, i32 3
  %65 = bitcast %struct.FX_RECT* %9 to i64*
  store i64 %55, i64* %65, align 8
  %66 = bitcast i32* %63 to i64*
  store i64 %59, i64* %66, align 8
  %67 = icmp eq %struct.FX_RECT* %4, null
  %68 = trunc i64 %59 to i32
  br i1 %67, label %72, label %69

69:                                               ; preds = %27
  call void @_ZN7FX_RECT9IntersectERKS_(%struct.FX_RECT* nonnull %9, %struct.FX_RECT* nonnull dereferenceable(16) %4) #8
  %70 = load i32, i32* %63, align 8
  %71 = load i32, i32* %61, align 8
  br label %72

72:                                               ; preds = %27, %69
  %73 = phi i32 [ %56, %27 ], [ %71, %69 ]
  %74 = phi i32 [ %68, %27 ], [ %70, %69 ]
  %75 = icmp sgt i32 %74, %73
  br i1 %75, label %76, label %258

76:                                               ; preds = %72
  %77 = load i32, i32* %64, align 4
  %78 = load i32, i32* %62, align 4
  %79 = icmp sgt i32 %77, %78
  br i1 %79, label %80, label %258

80:                                               ; preds = %76
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %34, i8* nonnull align 8 %60, i64 16, i1 false)
  %81 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %28, i64 0, i32 0
  %82 = load float, float* %81, align 8
  %83 = call float @llvm.fabs.f32(float %82) #8
  %84 = getelementptr inbounds %class.CFX_ImageTransformer, %class.CFX_ImageTransformer* %0, i64 0, i32 1, i32 1
  %85 = load float, float* %84, align 4
  %86 = call float @llvm.fabs.f32(float %85) #8
  %87 = fdiv float %86, 2.000000e+01
  %88 = fcmp olt float %83, %87
  br i1 %88, label %89, label %130

89:                                               ; preds = %80
  %90 = getelementptr inbounds %class.CFX_ImageTransformer, %class.CFX_ImageTransformer* %0, i64 0, i32 1, i32 3
  %91 = load float, float* %90, align 4
  %92 = call float @llvm.fabs.f32(float %91) #8
  %93 = getelementptr inbounds %class.CFX_ImageTransformer, %class.CFX_ImageTransformer* %0, i64 0, i32 1, i32 2
  %94 = load float, float* %93, align 8
  %95 = call float @llvm.fabs.f32(float %94) #8
  %96 = fdiv float %95, 2.000000e+01
  %97 = fcmp olt float %92, %96
  %98 = fcmp olt float %83, 5.000000e-01
  %99 = and i1 %98, %97
  %100 = fcmp olt float %92, 5.000000e-01
  %101 = and i1 %100, %99
  br i1 %101, label %102, label %130

102:                                              ; preds = %89
  %103 = sub nsw i32 %68, %56
  %104 = lshr i64 %59, 32
  %105 = trunc i64 %104 to i32
  %106 = sub nsw i32 %105, %58
  %107 = sub i32 %73, %56
  store i32 %107, i32* %61, align 8
  %108 = sub i32 %74, %56
  store i32 %108, i32* %63, align 8
  %109 = sub i32 %78, %58
  store i32 %109, i32* %62, align 4
  %110 = sub i32 %77, %58
  store i32 %110, i32* %64, align 4
  %111 = fcmp ogt float %94, 0.000000e+00
  %112 = fcmp olt float %85, 0.000000e+00
  %113 = call { i64, i64 } @_Z17FXDIB_SwapClipBoxRK7FX_RECTiibb(%struct.FX_RECT* nonnull dereferenceable(16) %9, i32 %103, i32 %106, i1 zeroext %111, i1 zeroext %112) #8
  %114 = extractvalue { i64, i64 } %113, 0
  %115 = extractvalue { i64, i64 } %113, 1
  store i64 %114, i64* %65, align 8
  store i64 %115, i64* %66, align 8
  %116 = call i8* @_Znwm(i64 56) #9
  %117 = bitcast i8* %116 to %class.CFX_ImageStretcher*
  %118 = getelementptr inbounds %class.CFX_BitmapStorer, %class.CFX_BitmapStorer* %41, i64 0, i32 0
  call void @_ZN18CFX_ImageStretcherC1EP21ScanlineComposerIfaceRKN5fxcrt9RetainPtrI11CFX_DIBBaseEEiiRK7FX_RECTRK21FXDIB_ResampleOptions(%class.CFX_ImageStretcher* nonnull %117, %class.ScanlineComposerIface* %118, %"class.fxcrt::RetainPtr"* dereferenceable(8) %17, i32 %106, i32 %103, %struct.FX_RECT* nonnull dereferenceable(16) %9, %struct.FXDIB_ResampleOptions* dereferenceable(4) %43) #8
  %119 = ptrtoint i8* %116 to i64
  %120 = getelementptr inbounds %"class.std::__1::unique_ptr.10", %"class.std::__1::unique_ptr.10"* %39, i64 0, i32 0, i32 0, i32 0
  %121 = load %class.CFX_ImageStretcher*, %class.CFX_ImageStretcher** %120, align 8
  store i64 %119, i64* %40, align 8
  %122 = icmp eq %class.CFX_ImageStretcher* %121, null
  %123 = bitcast i8* %116 to %class.CFX_ImageStretcher*
  br i1 %122, label %127, label %124

124:                                              ; preds = %102
  call void @_ZN18CFX_ImageStretcherD1Ev(%class.CFX_ImageStretcher* nonnull %121) #8
  %125 = bitcast %class.CFX_ImageStretcher* %121 to i8*
  call void @_ZdlPv(i8* %125) #9
  %126 = load %class.CFX_ImageStretcher*, %class.CFX_ImageStretcher** %120, align 8
  br label %127

127:                                              ; preds = %124, %102
  %128 = phi %class.CFX_ImageStretcher* [ %126, %124 ], [ %123, %102 ]
  %129 = call zeroext i1 @_ZN18CFX_ImageStretcher5StartEv(%class.CFX_ImageStretcher* %128) #8
  store i32 2, i32* %47, align 4
  br label %258

130:                                              ; preds = %89, %80
  %131 = fcmp olt float %86, 0x3FA99999A0000000
  br i1 %131, label %132, label %169

132:                                              ; preds = %130
  %133 = getelementptr inbounds %class.CFX_ImageTransformer, %class.CFX_ImageTransformer* %0, i64 0, i32 1, i32 2
  %134 = load float, float* %133, align 8
  %135 = call float @llvm.fabs.f32(float %134) #8
  %136 = fcmp olt float %135, 0x3FA99999A0000000
  br i1 %136, label %137, label %169

137:                                              ; preds = %132
  %138 = fcmp ogt float %82, 0.000000e+00
  %139 = call float @llvm.ceil.f32(float %82) #8
  %140 = call float @llvm.floor.f32(float %82) #8
  %141 = select i1 %138, float %139, float %140
  %142 = fptosi float %141 to i32
  %143 = getelementptr inbounds %class.CFX_ImageTransformer, %class.CFX_ImageTransformer* %0, i64 0, i32 1, i32 3
  %144 = load float, float* %143, align 4
  %145 = fcmp ogt float %144, 0.000000e+00
  %146 = call float @llvm.ceil.f32(float %144) #8
  %147 = call float @llvm.floor.f32(float %144) #8
  %148 = select i1 %145, float %146, float %147
  %149 = fsub float -0.000000e+00, %148
  %150 = fptosi float %149 to i32
  %151 = sub i32 %73, %56
  store i32 %151, i32* %61, align 8
  %152 = sub i32 %74, %56
  store i32 %152, i32* %63, align 8
  %153 = sub i32 %78, %58
  store i32 %153, i32* %62, align 4
  %154 = sub i32 %77, %58
  store i32 %154, i32* %64, align 4
  %155 = call i8* @_Znwm(i64 56) #9
  %156 = bitcast i8* %155 to %class.CFX_ImageStretcher*
  %157 = getelementptr inbounds %class.CFX_BitmapStorer, %class.CFX_BitmapStorer* %41, i64 0, i32 0
  call void @_ZN18CFX_ImageStretcherC1EP21ScanlineComposerIfaceRKN5fxcrt9RetainPtrI11CFX_DIBBaseEEiiRK7FX_RECTRK21FXDIB_ResampleOptions(%class.CFX_ImageStretcher* nonnull %156, %class.ScanlineComposerIface* %157, %"class.fxcrt::RetainPtr"* dereferenceable(8) %17, i32 %142, i32 %150, %struct.FX_RECT* nonnull dereferenceable(16) %9, %struct.FXDIB_ResampleOptions* dereferenceable(4) %43) #8
  %158 = ptrtoint i8* %155 to i64
  %159 = getelementptr inbounds %"class.std::__1::unique_ptr.10", %"class.std::__1::unique_ptr.10"* %39, i64 0, i32 0, i32 0, i32 0
  %160 = load %class.CFX_ImageStretcher*, %class.CFX_ImageStretcher** %159, align 8
  store i64 %158, i64* %40, align 8
  %161 = icmp eq %class.CFX_ImageStretcher* %160, null
  %162 = bitcast i8* %155 to %class.CFX_ImageStretcher*
  br i1 %161, label %166, label %163

163:                                              ; preds = %137
  call void @_ZN18CFX_ImageStretcherD1Ev(%class.CFX_ImageStretcher* nonnull %160) #8
  %164 = bitcast %class.CFX_ImageStretcher* %160 to i8*
  call void @_ZdlPv(i8* %164) #9
  %165 = load %class.CFX_ImageStretcher*, %class.CFX_ImageStretcher** %159, align 8
  br label %166

166:                                              ; preds = %163, %137
  %167 = phi %class.CFX_ImageStretcher* [ %165, %163 ], [ %162, %137 ]
  %168 = call zeroext i1 @_ZN18CFX_ImageStretcher5StartEv(%class.CFX_ImageStretcher* %167) #8
  store i32 1, i32* %47, align 4
  br label %258

169:                                              ; preds = %132, %130
  %170 = fmul float %82, %82
  %171 = fmul float %85, %85
  %172 = fadd float %170, %171
  %173 = call float @sqrtf(float %172) #8
  %174 = getelementptr inbounds %class.CFX_ImageTransformer, %class.CFX_ImageTransformer* %0, i64 0, i32 1, i32 2
  %175 = load float, float* %174, align 8
  %176 = fmul float %175, %175
  %177 = getelementptr inbounds %class.CFX_ImageTransformer, %class.CFX_ImageTransformer* %0, i64 0, i32 1, i32 3
  %178 = load float, float* %177, align 4
  %179 = fmul float %178, %178
  %180 = fadd float %176, %179
  %181 = call float @sqrtf(float %180) #8
  %182 = insertelement <2 x float> undef, float %181, i32 0
  %183 = insertelement <2 x float> %182, float %173, i32 1
  %184 = call <2 x float> @llvm.ceil.v2f32(<2 x float> %183)
  %185 = fptosi <2 x float> %184 to <2 x i32>
  %186 = bitcast %class.CFX_Matrix* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %186) #8
  %187 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %10, i64 0, i32 4
  %188 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %10, i64 0, i32 5
  %189 = sitofp <2 x i32> %185 to <2 x float>
  %190 = shufflevector <2 x float> %189, <2 x float> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %191 = bitcast %class.CFX_Matrix* %28 to <4 x float>*
  %192 = load <4 x float>, <4 x float>* %191, align 8
  %193 = shufflevector <4 x float> %192, <4 x float> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %194 = fdiv <4 x float> %193, %190
  %195 = getelementptr inbounds %class.CFX_ImageTransformer, %class.CFX_ImageTransformer* %0, i64 0, i32 1, i32 4
  %196 = load float, float* %195, align 8
  %197 = getelementptr inbounds %class.CFX_ImageTransformer, %class.CFX_ImageTransformer* %0, i64 0, i32 1, i32 5
  %198 = load float, float* %197, align 4
  %199 = fmul <4 x float> %194, zeroinitializer
  %200 = extractelement <4 x float> %194, i32 0
  %201 = extractelement <4 x float> %194, i32 1
  %202 = shufflevector <4 x float> %194, <4 x float> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %203 = fadd <4 x float> %199, %202
  %204 = fsub <4 x float> %199, %202
  %205 = shufflevector <4 x float> %203, <4 x float> %204, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %206 = extractelement <2 x float> %189, i32 0
  %207 = fmul float %200, %206
  %208 = extractelement <4 x float> %199, i32 2
  %209 = fadd float %208, %207
  %210 = fadd float %196, %209
  %211 = fmul float %201, %206
  %212 = extractelement <4 x float> %199, i32 3
  %213 = fadd float %212, %211
  %214 = fadd float %198, %213
  %215 = bitcast %class.CFX_Matrix* %10 to <4 x float>*
  store <4 x float> %205, <4 x float>* %215, align 16
  store float %210, float* %187, align 16
  store float %214, float* %188, align 4
  %216 = bitcast %class.CFX_Matrix* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %216) #8
  %217 = bitcast %class.CFX_Matrix* %11 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %217, i8 -1, i64 24, i1 false)
  call void @_ZNK10CFX_Matrix10GetInverseEv(%class.CFX_Matrix* nonnull sret %11, %class.CFX_Matrix* nonnull %10) #8
  %218 = bitcast { i64, i64 }* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %218) #8
  %219 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %12, i64 0, i32 1
  %220 = bitcast { <2 x float>, <2 x float> }* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %220) #8
  %221 = bitcast %class.CFX_FloatRect* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %221) #8
  call void @_ZN13CFX_FloatRectC1ERK7FX_RECT(%class.CFX_FloatRect* nonnull %16, %struct.FX_RECT* nonnull dereferenceable(16) %9) #8
  %222 = call { <2 x float>, <2 x float> } @_ZNK10CFX_Matrix13TransformRectERK13CFX_FloatRect(%class.CFX_Matrix* nonnull %11, %class.CFX_FloatRect* nonnull dereferenceable(16) %16) #8
  %223 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %14, i64 0, i32 0
  %224 = extractvalue { <2 x float>, <2 x float> } %222, 0
  store <2 x float> %224, <2 x float>* %223, align 8
  %225 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %14, i64 0, i32 1
  %226 = extractvalue { <2 x float>, <2 x float> } %222, 1
  store <2 x float> %226, <2 x float>* %225, align 8
  %227 = call { i64, i64 } @_ZNK13CFX_FloatRect12GetOuterRectEv(%class.CFX_FloatRect* nonnull %15) #8
  %228 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %12, i64 0, i32 0
  %229 = extractvalue { i64, i64 } %227, 0
  store i64 %229, i64* %228, align 8
  %230 = extractvalue { i64, i64 } %227, 1
  store i64 %230, i64* %219, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %221) #8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %220) #8
  %231 = call zeroext i1 @_ZNK7FX_RECT5ValidEv(%struct.FX_RECT* nonnull %13) #8
  br i1 %231, label %232, label %257

232:                                              ; preds = %169
  %233 = bitcast %struct.FX_RECT* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %233) #8
  %234 = getelementptr inbounds %struct.FX_RECT, %struct.FX_RECT* %6, i64 0, i32 0
  store i32 0, i32* %234, align 4
  %235 = getelementptr inbounds %struct.FX_RECT, %struct.FX_RECT* %6, i64 0, i32 1
  store i32 0, i32* %235, align 4
  %236 = getelementptr inbounds %struct.FX_RECT, %struct.FX_RECT* %6, i64 0, i32 2
  %237 = extractelement <2 x i32> %185, i32 1
  store i32 %237, i32* %236, align 4
  %238 = getelementptr inbounds %struct.FX_RECT, %struct.FX_RECT* %6, i64 0, i32 3
  %239 = extractelement <2 x i32> %185, i32 0
  store i32 %239, i32* %238, align 4
  call void @_ZN7FX_RECT9IntersectERKS_(%struct.FX_RECT* nonnull %13, %struct.FX_RECT* nonnull dereferenceable(16) %6) #8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %233) #8
  %240 = call zeroext i1 @_ZNK7FX_RECT5ValidEv(%struct.FX_RECT* nonnull %13) #8
  br i1 %240, label %241, label %257

241:                                              ; preds = %232
  %242 = bitcast %class.CFX_Matrix* %35 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %242, i8* nonnull align 4 %216, i64 24, i1 false)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %32, i8* nonnull align 8 %218, i64 16, i1 false)
  %243 = call i8* @_Znwm(i64 56) #9
  %244 = bitcast i8* %243 to %class.CFX_ImageStretcher*
  %245 = getelementptr inbounds %class.CFX_BitmapStorer, %class.CFX_BitmapStorer* %41, i64 0, i32 0
  call void @_ZN18CFX_ImageStretcherC1EP21ScanlineComposerIfaceRKN5fxcrt9RetainPtrI11CFX_DIBBaseEEiiRK7FX_RECTRK21FXDIB_ResampleOptions(%class.CFX_ImageStretcher* nonnull %244, %class.ScanlineComposerIface* %245, %"class.fxcrt::RetainPtr"* dereferenceable(8) %17, i32 %237, i32 %239, %struct.FX_RECT* dereferenceable(16) %31, %struct.FXDIB_ResampleOptions* dereferenceable(4) %43) #8
  %246 = ptrtoint i8* %243 to i64
  %247 = getelementptr inbounds %"class.std::__1::unique_ptr.10", %"class.std::__1::unique_ptr.10"* %39, i64 0, i32 0, i32 0, i32 0
  %248 = load %class.CFX_ImageStretcher*, %class.CFX_ImageStretcher** %247, align 8
  store i64 %246, i64* %40, align 8
  %249 = icmp eq %class.CFX_ImageStretcher* %248, null
  %250 = bitcast i8* %243 to %class.CFX_ImageStretcher*
  br i1 %249, label %254, label %251

251:                                              ; preds = %241
  call void @_ZN18CFX_ImageStretcherD1Ev(%class.CFX_ImageStretcher* nonnull %248) #8
  %252 = bitcast %class.CFX_ImageStretcher* %248 to i8*
  call void @_ZdlPv(i8* %252) #9
  %253 = load %class.CFX_ImageStretcher*, %class.CFX_ImageStretcher** %247, align 8
  br label %254

254:                                              ; preds = %251, %241
  %255 = phi %class.CFX_ImageStretcher* [ %253, %251 ], [ %250, %241 ]
  %256 = call zeroext i1 @_ZN18CFX_ImageStretcher5StartEv(%class.CFX_ImageStretcher* %255) #8
  store i32 3, i32* %47, align 4
  br label %257

257:                                              ; preds = %232, %169, %254
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %218) #8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %216) #8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %186) #8
  br label %258

258:                                              ; preds = %76, %72, %257, %166, %127
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %60) #8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare void @_ZN16CFX_BitmapStorerC1Ev(%class.CFX_BitmapStorer*) unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare { <2 x float>, <2 x float> } @_ZNK10CFX_Matrix11GetUnitRectEv(%class.CFX_Matrix*) local_unnamed_addr #2

declare { i64, i64 } @_ZNK13CFX_FloatRect14GetClosestRectEv(%class.CFX_FloatRect*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZN7FX_RECT9IntersectERKS_(%struct.FX_RECT*, %struct.FX_RECT* dereferenceable(16)) local_unnamed_addr #2

declare { i64, i64 } @_Z17FXDIB_SwapClipBoxRK7FX_RECTiibb(%struct.FX_RECT* dereferenceable(16), i32, i32, i1 zeroext, i1 zeroext) local_unnamed_addr #2

declare zeroext i1 @_ZN18CFX_ImageStretcher5StartEv(%class.CFX_ImageStretcher*) local_unnamed_addr #2

declare void @_ZNK10CFX_Matrix10GetInverseEv(%class.CFX_Matrix* sret, %class.CFX_Matrix*) local_unnamed_addr #2

declare { <2 x float>, <2 x float> } @_ZNK10CFX_Matrix13TransformRectERK13CFX_FloatRect(%class.CFX_Matrix*, %class.CFX_FloatRect* dereferenceable(16)) local_unnamed_addr #2

declare void @_ZN13CFX_FloatRectC1ERK7FX_RECT(%class.CFX_FloatRect*, %struct.FX_RECT* dereferenceable(16)) unnamed_addr #2

declare { i64, i64 } @_ZNK13CFX_FloatRect12GetOuterRectEv(%class.CFX_FloatRect*) local_unnamed_addr #2

declare zeroext i1 @_ZNK7FX_RECT5ValidEv(%struct.FX_RECT*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN20CFX_ImageTransformerD2Ev(%class.CFX_ImageTransformer*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CFX_ImageTransformer, %class.CFX_ImageTransformer* %0, i64 0, i32 6
  tail call void @_ZN16CFX_BitmapStorerD1Ev(%class.CFX_BitmapStorer* %2) #8
  %3 = getelementptr inbounds %class.CFX_ImageTransformer, %class.CFX_ImageTransformer* %0, i64 0, i32 5, i32 0, i32 0, i32 0
  %4 = load %class.CFX_ImageStretcher*, %class.CFX_ImageStretcher** %3, align 8
  store %class.CFX_ImageStretcher* null, %class.CFX_ImageStretcher** %3, align 8
  %5 = icmp eq %class.CFX_ImageStretcher* %4, null
  br i1 %5, label %8, label %6

6:                                                ; preds = %1
  tail call void @_ZN18CFX_ImageStretcherD1Ev(%class.CFX_ImageStretcher* nonnull %4) #8
  %7 = bitcast %class.CFX_ImageStretcher* %4 to i8*
  tail call void @_ZdlPv(i8* %7) #9
  br label %8

8:                                                ; preds = %1, %6
  %9 = getelementptr inbounds %class.CFX_ImageTransformer, %class.CFX_ImageTransformer* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %10 = load %class.CFX_DIBBase*, %class.CFX_DIBBase** %9, align 8
  store %class.CFX_DIBBase* null, %class.CFX_DIBBase** %9, align 8
  %11 = icmp eq %class.CFX_DIBBase* %10, null
  br i1 %11, label %23, label %12

12:                                               ; preds = %8
  %13 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %10, i64 0, i32 0, i32 1
  %14 = load i64, i64* %13, align 8
  %15 = add nsw i64 %14, -1
  store i64 %15, i64* %13, align 8
  %16 = icmp eq i64 %15, 0
  br i1 %16, label %17, label %23

17:                                               ; preds = %12
  %18 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %10, i64 0, i32 0
  %19 = bitcast %class.CFX_DIBBase* %10 to void (%"class.fxcrt::Retainable"*)***
  %20 = load void (%"class.fxcrt::Retainable"*)**, void (%"class.fxcrt::Retainable"*)*** %19, align 8
  %21 = getelementptr inbounds void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %20, i64 1
  %22 = load void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %21, align 8
  tail call void %22(%"class.fxcrt::Retainable"* nonnull %18) #8
  br label %23

23:                                               ; preds = %8, %12, %17
  ret void
}

; Function Attrs: nounwind
declare void @_ZN16CFX_BitmapStorerD1Ev(%class.CFX_BitmapStorer*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN20CFX_ImageTransformer8ContinueEP19PauseIndicatorIface(%class.CFX_ImageTransformer*, %class.PauseIndicatorIface*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.CFX_ImageTransformer, %class.CFX_ImageTransformer* %0, i64 0, i32 8
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %14, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %class.CFX_ImageTransformer, %class.CFX_ImageTransformer* %0, i64 0, i32 5, i32 0, i32 0, i32 0
  %8 = load %class.CFX_ImageStretcher*, %class.CFX_ImageStretcher** %7, align 8
  %9 = tail call zeroext i1 @_ZN18CFX_ImageStretcher8ContinueEP19PauseIndicatorIface(%class.CFX_ImageStretcher* %8, %class.PauseIndicatorIface* %1) #8
  br i1 %9, label %14, label %10

10:                                               ; preds = %6
  %11 = load i32, i32* %3, align 4
  switch i32 %11, label %14 [
    i32 3, label %13
    i32 2, label %12
  ]

12:                                               ; preds = %10
  tail call void @_ZN20CFX_ImageTransformer14ContinueRotateEP19PauseIndicatorIface(%class.CFX_ImageTransformer* %0, %class.PauseIndicatorIface* undef)
  br label %14

13:                                               ; preds = %10
  tail call void @_ZN20CFX_ImageTransformer13ContinueOtherEP19PauseIndicatorIface(%class.CFX_ImageTransformer* %0, %class.PauseIndicatorIface* undef)
  br label %14

14:                                               ; preds = %12, %13, %10, %6, %2
  %15 = phi i1 [ false, %2 ], [ true, %6 ], [ false, %10 ], [ false, %13 ], [ false, %12 ]
  ret i1 %15
}

declare zeroext i1 @_ZN18CFX_ImageStretcher8ContinueEP19PauseIndicatorIface(%class.CFX_ImageStretcher*, %class.PauseIndicatorIface*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN20CFX_ImageTransformer14ContinueRotateEP19PauseIndicatorIface(%class.CFX_ImageTransformer*, %class.PauseIndicatorIface* nocapture readnone) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.fxcrt::RetainPtr.0", align 8
  %4 = getelementptr inbounds %class.CFX_ImageTransformer, %class.CFX_ImageTransformer* %0, i64 0, i32 6
  %5 = getelementptr inbounds %class.CFX_ImageTransformer, %class.CFX_ImageTransformer* %0, i64 0, i32 6, i32 1, i32 0, i32 0, i32 0, i32 0
  %6 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %5, align 8, !noalias !2
  %7 = icmp eq %class.CFX_DIBitmap* %6, null
  br i1 %7, label %67, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %6, i64 0, i32 0, i32 0, i32 1
  %10 = load i64, i64* %9, align 8, !noalias !3
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %14, label %12

12:                                               ; preds = %8
  %13 = bitcast %"class.fxcrt::RetainPtr.0"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %13) #8
  br label %23

14:                                               ; preds = %8
  %15 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %6, i64 0, i32 0, i32 0
  %16 = bitcast %class.CFX_DIBitmap* %6 to void (%"class.fxcrt::Retainable"*)***
  %17 = load void (%"class.fxcrt::Retainable"*)**, void (%"class.fxcrt::Retainable"*)*** %16, align 8
  %18 = getelementptr inbounds void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %17, i64 1
  %19 = load void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %18, align 8
  tail call void %19(%"class.fxcrt::Retainable"* nonnull %15) #8
  %20 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %5, align 8, !noalias !6
  %21 = bitcast %"class.fxcrt::RetainPtr.0"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %21) #8
  %22 = icmp eq %class.CFX_DIBitmap* %20, null
  br i1 %22, label %29, label %23

23:                                               ; preds = %12, %14
  %24 = phi i8* [ %13, %12 ], [ %21, %14 ]
  %25 = phi %class.CFX_DIBitmap* [ %6, %12 ], [ %20, %14 ]
  %26 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %25, i64 0, i32 0, i32 0, i32 1
  %27 = load i64, i64* %26, align 8, !noalias !6
  %28 = add nsw i64 %27, 1
  store i64 %28, i64* %26, align 8, !noalias !6
  br label %29

29:                                               ; preds = %14, %23
  %30 = phi i1 [ true, %14 ], [ false, %23 ]
  %31 = phi i8* [ %21, %14 ], [ %24, %23 ]
  %32 = phi %class.CFX_DIBitmap* [ null, %14 ], [ %25, %23 ]
  %33 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %32, i64 0, i32 0
  %34 = getelementptr inbounds %class.CFX_ImageTransformer, %class.CFX_ImageTransformer* %0, i64 0, i32 1, i32 2
  %35 = load float, float* %34, align 8
  %36 = fcmp ogt float %35, 0.000000e+00
  %37 = getelementptr inbounds %class.CFX_ImageTransformer, %class.CFX_ImageTransformer* %0, i64 0, i32 1, i32 1
  %38 = load float, float* %37, align 4
  %39 = fcmp olt float %38, 0.000000e+00
  call void @_ZNK11CFX_DIBBase6SwapXYEbb(%"class.fxcrt::RetainPtr.0"* nonnull sret %3, %class.CFX_DIBBase* %33, i1 zeroext %36, i1 zeroext %39) #8
  call void @_ZN16CFX_BitmapStorer7ReplaceEON5fxcrt9RetainPtrI12CFX_DIBitmapEE(%class.CFX_BitmapStorer* %4, %"class.fxcrt::RetainPtr.0"* nonnull dereferenceable(8) %3) #8
  %40 = getelementptr inbounds %"class.fxcrt::RetainPtr.0", %"class.fxcrt::RetainPtr.0"* %3, i64 0, i32 0, i32 0, i32 0, i32 0
  %41 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %40, align 8
  store %class.CFX_DIBitmap* null, %class.CFX_DIBitmap** %40, align 8
  %42 = icmp eq %class.CFX_DIBitmap* %41, null
  br i1 %42, label %54, label %43

43:                                               ; preds = %29
  %44 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %41, i64 0, i32 0, i32 0, i32 1
  %45 = load i64, i64* %44, align 8
  %46 = add nsw i64 %45, -1
  store i64 %46, i64* %44, align 8
  %47 = icmp eq i64 %46, 0
  br i1 %47, label %48, label %54

48:                                               ; preds = %43
  %49 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %41, i64 0, i32 0, i32 0
  %50 = bitcast %class.CFX_DIBitmap* %41 to void (%"class.fxcrt::Retainable"*)***
  %51 = load void (%"class.fxcrt::Retainable"*)**, void (%"class.fxcrt::Retainable"*)*** %50, align 8
  %52 = getelementptr inbounds void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %51, i64 1
  %53 = load void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %52, align 8
  call void %53(%"class.fxcrt::Retainable"* nonnull %49) #8
  br label %54

54:                                               ; preds = %29, %43, %48
  br i1 %30, label %66, label %55

55:                                               ; preds = %54
  %56 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %32, i64 0, i32 0, i32 0, i32 1
  %57 = load i64, i64* %56, align 8
  %58 = add nsw i64 %57, -1
  store i64 %58, i64* %56, align 8
  %59 = icmp eq i64 %58, 0
  br i1 %59, label %60, label %66

60:                                               ; preds = %55
  %61 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %32, i64 0, i32 0, i32 0
  %62 = bitcast %class.CFX_DIBitmap* %32 to void (%"class.fxcrt::Retainable"*)***
  %63 = load void (%"class.fxcrt::Retainable"*)**, void (%"class.fxcrt::Retainable"*)*** %62, align 8
  %64 = getelementptr inbounds void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %63, i64 1
  %65 = load void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %64, align 8
  call void %65(%"class.fxcrt::Retainable"* nonnull %61) #8
  br label %66

66:                                               ; preds = %54, %55, %60
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %31) #8
  br label %67

67:                                               ; preds = %2, %66
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN20CFX_ImageTransformer13ContinueOtherEP19PauseIndicatorIface(%class.CFX_ImageTransformer*, %class.PauseIndicatorIface* nocapture readnone) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.fxcrt::RetainPtr.0", align 8
  %4 = alloca %"class.fxcrt::RetainPtr", align 8
  %5 = alloca %"class.fxcrt::RetainPtr.0", align 8
  %6 = alloca %class.CFX_Matrix, align 16
  %7 = alloca %"struct.CFX_ImageTransformer::CalcData", align 8
  %8 = alloca %"struct.CFX_ImageTransformer::CalcData", align 8
  %9 = getelementptr inbounds %class.CFX_ImageTransformer, %class.CFX_ImageTransformer* %0, i64 0, i32 6
  %10 = getelementptr inbounds %class.CFX_ImageTransformer, %class.CFX_ImageTransformer* %0, i64 0, i32 6, i32 1, i32 0, i32 0, i32 0, i32 0
  %11 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %10, align 8, !noalias !9
  %12 = icmp eq %class.CFX_DIBitmap* %11, null
  br i1 %12, label %308, label %13

13:                                               ; preds = %2
  %14 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %11, i64 0, i32 0, i32 0, i32 1
  %15 = load i64, i64* %14, align 8, !noalias !9
  %16 = icmp eq i64 %15, 0
  br i1 %16, label %17, label %23

17:                                               ; preds = %13
  %18 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %11, i64 0, i32 0, i32 0
  %19 = bitcast %class.CFX_DIBitmap* %11 to void (%"class.fxcrt::Retainable"*)***
  %20 = load void (%"class.fxcrt::Retainable"*)**, void (%"class.fxcrt::Retainable"*)*** %19, align 8
  %21 = getelementptr inbounds void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %20, i64 1
  %22 = load void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %21, align 8
  tail call void %22(%"class.fxcrt::Retainable"* nonnull %18) #8
  br label %23

23:                                               ; preds = %13, %17
  %24 = bitcast %"class.fxcrt::RetainPtr.0"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %24) #8
  %25 = getelementptr inbounds %"class.fxcrt::RetainPtr.0", %"class.fxcrt::RetainPtr.0"* %3, i64 0, i32 0, i32 0, i32 0, i32 0
  %26 = tail call i8* @_Znwm(i64 80) #9, !noalias !12
  %27 = bitcast i8* %26 to %class.CFX_DIBitmap*
  tail call void @_ZN12CFX_DIBitmapC1Ev(%class.CFX_DIBitmap* nonnull %27) #8, !noalias !12
  %28 = ptrtoint i8* %26 to i64
  %29 = bitcast %"class.fxcrt::RetainPtr.0"* %3 to i64*
  store i64 %28, i64* %29, align 8, !alias.scope !12
  %30 = getelementptr inbounds i8, i8* %26, i64 8
  %31 = bitcast i8* %30 to i64*
  %32 = load i64, i64* %31, align 8, !noalias !12
  %33 = add nsw i64 %32, 1
  store i64 %33, i64* %31, align 8, !noalias !12
  %34 = bitcast %"class.fxcrt::RetainPtr"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %34) #8
  %35 = getelementptr inbounds %class.CFX_ImageTransformer, %class.CFX_ImageTransformer* %0, i64 0, i32 5, i32 0, i32 0, i32 0
  %36 = load %class.CFX_ImageStretcher*, %class.CFX_ImageStretcher** %35, align 8
  call void @_ZN18CFX_ImageStretcher6sourceEv(%"class.fxcrt::RetainPtr"* nonnull sret %4, %class.CFX_ImageStretcher* %36) #8
  %37 = getelementptr inbounds %"class.fxcrt::RetainPtr", %"class.fxcrt::RetainPtr"* %4, i64 0, i32 0, i32 0, i32 0, i32 0
  %38 = load %class.CFX_DIBBase*, %class.CFX_DIBBase** %37, align 8
  %39 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %38, i64 0, i32 1
  %40 = load i16, i16* %39, align 8
  %41 = and i16 %40, 256
  %42 = icmp eq i16 %41, 0
  %43 = select i1 %42, i16 544, i16 264
  store %class.CFX_DIBBase* null, %class.CFX_DIBBase** %37, align 8
  %44 = icmp eq %class.CFX_DIBBase* %38, null
  %45 = bitcast i8* %26 to %class.CFX_DIBitmap*
  br i1 %44, label %58, label %46

46:                                               ; preds = %23
  %47 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %38, i64 0, i32 0, i32 1
  %48 = load i64, i64* %47, align 8
  %49 = add nsw i64 %48, -1
  store i64 %49, i64* %47, align 8
  %50 = icmp eq i64 %49, 0
  br i1 %50, label %51, label %58

51:                                               ; preds = %46
  %52 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %38, i64 0, i32 0
  %53 = bitcast %class.CFX_DIBBase* %38 to void (%"class.fxcrt::Retainable"*)***
  %54 = load void (%"class.fxcrt::Retainable"*)**, void (%"class.fxcrt::Retainable"*)*** %53, align 8
  %55 = getelementptr inbounds void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %54, i64 1
  %56 = load void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %55, align 8
  call void %56(%"class.fxcrt::Retainable"* nonnull %52) #8
  %57 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %25, align 8
  br label %58

58:                                               ; preds = %23, %46, %51
  %59 = phi %class.CFX_DIBitmap* [ %45, %23 ], [ %45, %46 ], [ %57, %51 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %34) #8
  %60 = getelementptr inbounds %class.CFX_ImageTransformer, %class.CFX_ImageTransformer* %0, i64 0, i32 3, i32 2
  %61 = load i32, i32* %60, align 4
  %62 = getelementptr inbounds %class.CFX_ImageTransformer, %class.CFX_ImageTransformer* %0, i64 0, i32 3, i32 0
  %63 = load i32, i32* %62, align 4
  %64 = sub nsw i32 %61, %63
  %65 = getelementptr inbounds %class.CFX_ImageTransformer, %class.CFX_ImageTransformer* %0, i64 0, i32 3, i32 3
  %66 = load i32, i32* %65, align 4
  %67 = getelementptr inbounds %class.CFX_ImageTransformer, %class.CFX_ImageTransformer* %0, i64 0, i32 3, i32 1
  %68 = load i32, i32* %67, align 4
  %69 = sub nsw i32 %66, %68
  %70 = call zeroext i1 @_ZN12CFX_DIBitmap6CreateEii12FXDIB_Format(%class.CFX_DIBitmap* %59, i32 %64, i32 %69, i16 zeroext %43) #8
  br i1 %70, label %71, label %293

71:                                               ; preds = %58
  %72 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %10, align 8, !noalias !15
  %73 = icmp eq %class.CFX_DIBitmap* %72, null
  br i1 %73, label %74, label %76

74:                                               ; preds = %71
  %75 = call i8* @_ZN11CFX_DIBBase18GetAlphaMaskBufferEv(%class.CFX_DIBBase* null) #8
  br label %91

76:                                               ; preds = %71
  %77 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %72, i64 0, i32 0, i32 0, i32 1
  %78 = load i64, i64* %77, align 8, !noalias !15
  %79 = add nsw i64 %78, 1
  store i64 %79, i64* %77, align 8, !noalias !15
  %80 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %72, i64 0, i32 0
  %81 = call i8* @_ZN11CFX_DIBBase18GetAlphaMaskBufferEv(%class.CFX_DIBBase* %80) #8
  %82 = load i64, i64* %77, align 8
  %83 = add nsw i64 %82, -1
  store i64 %83, i64* %77, align 8
  %84 = icmp eq i64 %83, 0
  br i1 %84, label %85, label %91

85:                                               ; preds = %76
  %86 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %72, i64 0, i32 0, i32 0
  %87 = bitcast %class.CFX_DIBitmap* %72 to void (%"class.fxcrt::Retainable"*)***
  %88 = load void (%"class.fxcrt::Retainable"*)**, void (%"class.fxcrt::Retainable"*)*** %87, align 8
  %89 = getelementptr inbounds void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %88, i64 1
  %90 = load void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %89, align 8
  call void %90(%"class.fxcrt::Retainable"* nonnull %86) #8
  br label %91

91:                                               ; preds = %74, %76, %85
  %92 = phi i8* [ %75, %74 ], [ %81, %76 ], [ %81, %85 ]
  %93 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %25, align 8
  call void @_ZN12CFX_DIBitmap5ClearEj(%class.CFX_DIBitmap* %93, i32 0) #8
  %94 = bitcast %"class.fxcrt::RetainPtr.0"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %94) #8
  %95 = getelementptr inbounds %"class.fxcrt::RetainPtr.0", %"class.fxcrt::RetainPtr.0"* %5, i64 0, i32 0, i32 0, i32 0, i32 0
  store %class.CFX_DIBitmap* inttoptr (i64 -6148914691236517206 to %class.CFX_DIBitmap*), %class.CFX_DIBitmap** %95, align 8
  %96 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %93, i64 0, i32 0
  call void @_ZN11CFX_DIBBase12GetAlphaMaskEv(%"class.fxcrt::RetainPtr.0"* nonnull sret %5, %class.CFX_DIBBase* %96) #8
  %97 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %95, align 8
  %98 = icmp eq %class.CFX_DIBitmap* %97, null
  br i1 %98, label %100, label %99

99:                                               ; preds = %91
  call void @_ZN12CFX_DIBitmap5ClearEj(%class.CFX_DIBitmap* nonnull %97, i32 0) #8
  br label %100

100:                                              ; preds = %91, %99
  %101 = bitcast %class.CFX_Matrix* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %101) #8
  %102 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %6, i64 0, i32 4
  %103 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %6, i64 0, i32 5
  %104 = load i32, i32* %62, align 8
  %105 = sitofp i32 %104 to float
  %106 = load i32, i32* %67, align 4
  %107 = sitofp i32 %106 to float
  %108 = getelementptr inbounds %class.CFX_ImageTransformer, %class.CFX_ImageTransformer* %0, i64 0, i32 4, i32 0
  %109 = bitcast float* %108 to <4 x float>*
  %110 = load <4 x float>, <4 x float>* %109, align 4, !noalias !18
  %111 = extractelement <4 x float> %110, i32 2
  %112 = extractelement <4 x float> %110, i32 3
  %113 = extractelement <4 x float> %110, i32 0
  %114 = extractelement <4 x float> %110, i32 1
  %115 = fmul <4 x float> %110, zeroinitializer
  %116 = shufflevector <4 x float> %115, <4 x float> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %117 = fadd <4 x float> %110, %116
  %118 = fmul float %113, %105
  %119 = fmul float %111, %107
  %120 = fadd float %118, %119
  %121 = getelementptr inbounds %class.CFX_ImageTransformer, %class.CFX_ImageTransformer* %0, i64 0, i32 4, i32 4
  %122 = load float, float* %121, align 4, !noalias !18
  %123 = fadd float %120, %122
  %124 = fmul float %114, %105
  %125 = fmul float %112, %107
  %126 = fadd float %124, %125
  %127 = getelementptr inbounds %class.CFX_ImageTransformer, %class.CFX_ImageTransformer* %0, i64 0, i32 4, i32 5
  %128 = load float, float* %127, align 4, !noalias !18
  %129 = fadd float %126, %128
  %130 = bitcast %class.CFX_Matrix* %6 to <4 x float>*
  store <4 x float> %117, <4 x float>* %130, align 16
  store float %123, float* %102, align 16
  store float %129, float* %103, align 4
  %131 = getelementptr inbounds %class.CFX_ImageTransformer, %class.CFX_ImageTransformer* %0, i64 0, i32 2, i32 0
  %132 = load i32, i32* %131, align 8
  %133 = sub nsw i32 0, %132
  %134 = getelementptr inbounds %class.CFX_ImageTransformer, %class.CFX_ImageTransformer* %0, i64 0, i32 2, i32 1
  %135 = load i32, i32* %134, align 4
  %136 = sub nsw i32 0, %135
  %137 = sitofp i32 %133 to float
  %138 = sitofp i32 %136 to float
  call void @_ZN10CFX_Matrix9TranslateEff(%class.CFX_Matrix* nonnull %6, float %137, float %138) #8
  %139 = icmp eq i8* %92, null
  %140 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %95, align 8
  %141 = icmp ne %class.CFX_DIBitmap* %140, null
  br i1 %139, label %142, label %144

142:                                              ; preds = %100
  br i1 %141, label %143, label %173

143:                                              ; preds = %142
  call void @_ZN12CFX_DIBitmap5ClearEj(%class.CFX_DIBitmap* nonnull %140, i32 -16777216) #8
  br label %173

144:                                              ; preds = %100
  br i1 %141, label %145, label %173

145:                                              ; preds = %144
  %146 = bitcast %"struct.CFX_ImageTransformer::CalcData"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %146) #8
  %147 = getelementptr inbounds %"struct.CFX_ImageTransformer::CalcData", %"struct.CFX_ImageTransformer::CalcData"* %7, i64 0, i32 0
  %148 = getelementptr inbounds %"struct.CFX_ImageTransformer::CalcData", %"struct.CFX_ImageTransformer::CalcData"* %7, i64 0, i32 1
  %149 = getelementptr inbounds %"struct.CFX_ImageTransformer::CalcData", %"struct.CFX_ImageTransformer::CalcData"* %7, i64 0, i32 2
  %150 = getelementptr inbounds %"struct.CFX_ImageTransformer::CalcData", %"struct.CFX_ImageTransformer::CalcData"* %7, i64 0, i32 3
  %151 = getelementptr inbounds %"struct.CFX_ImageTransformer::CalcData", %"struct.CFX_ImageTransformer::CalcData"* %7, i64 0, i32 3
  %152 = bitcast i32* %151 to i64*
  store i64 -6148914691236517206, i64* %152, align 8
  store %class.CFX_DIBitmap* %140, %class.CFX_DIBitmap** %147, align 8
  store %class.CFX_Matrix* %6, %class.CFX_Matrix** %148, align 8
  store i8* %92, i8** %149, align 8
  %153 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %10, align 8, !noalias !21
  %154 = icmp eq %class.CFX_DIBitmap* %153, null
  br i1 %154, label %155, label %157

155:                                              ; preds = %145
  %156 = call i32 @_ZNK11CFX_DIBBase17GetAlphaMaskPitchEv(%class.CFX_DIBBase* null) #8
  store i32 %156, i32* %150, align 8
  br label %172

157:                                              ; preds = %145
  %158 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %153, i64 0, i32 0, i32 0, i32 1
  %159 = load i64, i64* %158, align 8, !noalias !21
  %160 = add nsw i64 %159, 1
  store i64 %160, i64* %158, align 8, !noalias !21
  %161 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %153, i64 0, i32 0
  %162 = call i32 @_ZNK11CFX_DIBBase17GetAlphaMaskPitchEv(%class.CFX_DIBBase* %161) #8
  store i32 %162, i32* %150, align 8
  %163 = load i64, i64* %158, align 8
  %164 = add nsw i64 %163, -1
  store i64 %164, i64* %158, align 8
  %165 = icmp eq i64 %164, 0
  br i1 %165, label %166, label %172

166:                                              ; preds = %157
  %167 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %153, i64 0, i32 0, i32 0
  %168 = bitcast %class.CFX_DIBitmap* %153 to void (%"class.fxcrt::Retainable"*)***
  %169 = load void (%"class.fxcrt::Retainable"*)**, void (%"class.fxcrt::Retainable"*)*** %168, align 8
  %170 = getelementptr inbounds void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %169, i64 1
  %171 = load void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %170, align 8
  call void %171(%"class.fxcrt::Retainable"* nonnull %167) #8
  br label %172

172:                                              ; preds = %155, %157, %166
  call void @_ZN20CFX_ImageTransformer8CalcMaskERKNS_8CalcDataE(%class.CFX_ImageTransformer* %0, %"struct.CFX_ImageTransformer::CalcData"* nonnull dereferenceable(32) %7)
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %146) #8
  br label %173

173:                                              ; preds = %142, %144, %172, %143
  %174 = bitcast %"struct.CFX_ImageTransformer::CalcData"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %174) #8
  %175 = getelementptr inbounds %"struct.CFX_ImageTransformer::CalcData", %"struct.CFX_ImageTransformer::CalcData"* %8, i64 0, i32 1
  %176 = getelementptr inbounds %"struct.CFX_ImageTransformer::CalcData", %"struct.CFX_ImageTransformer::CalcData"* %8, i64 0, i32 2
  %177 = getelementptr inbounds %"struct.CFX_ImageTransformer::CalcData", %"struct.CFX_ImageTransformer::CalcData"* %8, i64 0, i32 3
  %178 = getelementptr inbounds %"struct.CFX_ImageTransformer::CalcData", %"struct.CFX_ImageTransformer::CalcData"* %8, i64 0, i32 2
  %179 = bitcast i8** %178 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %179, i8 -86, i64 16, i1 false)
  %180 = load i64, i64* %29, align 8
  %181 = bitcast %"struct.CFX_ImageTransformer::CalcData"* %8 to i64*
  store i64 %180, i64* %181, align 8
  store %class.CFX_Matrix* %6, %class.CFX_Matrix** %175, align 8
  %182 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %10, align 8, !noalias !24
  %183 = icmp eq %class.CFX_DIBitmap* %182, null
  br i1 %183, label %188, label %184

184:                                              ; preds = %173
  %185 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %182, i64 0, i32 0, i32 0, i32 1
  %186 = load i64, i64* %185, align 8, !noalias !24
  %187 = add nsw i64 %186, 1
  store i64 %187, i64* %185, align 8, !noalias !24
  br label %188

188:                                              ; preds = %173, %184
  %189 = bitcast %class.CFX_DIBitmap* %182 to i8* (%class.CFX_DIBitmap*)***
  %190 = load i8* (%class.CFX_DIBitmap*)**, i8* (%class.CFX_DIBitmap*)*** %189, align 8
  %191 = getelementptr inbounds i8* (%class.CFX_DIBitmap*)*, i8* (%class.CFX_DIBitmap*)** %190, i64 2
  %192 = load i8* (%class.CFX_DIBitmap*)*, i8* (%class.CFX_DIBitmap*)** %191, align 8
  %193 = call i8* %192(%class.CFX_DIBitmap* %182) #8
  store i8* %193, i8** %176, align 8
  %194 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %10, align 8, !noalias !27
  %195 = icmp eq %class.CFX_DIBitmap* %194, null
  br i1 %195, label %196, label %198

196:                                              ; preds = %188
  %197 = load i32, i32* inttoptr (i64 28 to i32*), align 4
  store i32 %197, i32* %177, align 8
  br label %213

198:                                              ; preds = %188
  %199 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %194, i64 0, i32 0, i32 0, i32 1
  %200 = load i64, i64* %199, align 8, !noalias !27
  %201 = add nsw i64 %200, 1
  store i64 %201, i64* %199, align 8, !noalias !27
  %202 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %194, i64 0, i32 0, i32 4
  %203 = load i32, i32* %202, align 4
  store i32 %203, i32* %177, align 8
  %204 = load i64, i64* %199, align 8
  %205 = add nsw i64 %204, -1
  store i64 %205, i64* %199, align 8
  %206 = icmp eq i64 %205, 0
  br i1 %206, label %207, label %213

207:                                              ; preds = %198
  %208 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %194, i64 0, i32 0, i32 0
  %209 = bitcast %class.CFX_DIBitmap* %194 to void (%"class.fxcrt::Retainable"*)***
  %210 = load void (%"class.fxcrt::Retainable"*)**, void (%"class.fxcrt::Retainable"*)*** %209, align 8
  %211 = getelementptr inbounds void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %210, i64 1
  %212 = load void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %211, align 8
  call void %212(%"class.fxcrt::Retainable"* nonnull %208) #8
  br label %213

213:                                              ; preds = %196, %198, %207
  br i1 %183, label %225, label %214

214:                                              ; preds = %213
  %215 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %182, i64 0, i32 0, i32 0, i32 1
  %216 = load i64, i64* %215, align 8
  %217 = add nsw i64 %216, -1
  store i64 %217, i64* %215, align 8
  %218 = icmp eq i64 %217, 0
  br i1 %218, label %219, label %225

219:                                              ; preds = %214
  %220 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %182, i64 0, i32 0, i32 0
  %221 = bitcast %class.CFX_DIBitmap* %182 to void (%"class.fxcrt::Retainable"*)***
  %222 = load void (%"class.fxcrt::Retainable"*)**, void (%"class.fxcrt::Retainable"*)*** %221, align 8
  %223 = getelementptr inbounds void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %222, i64 1
  %224 = load void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %223, align 8
  call void %224(%"class.fxcrt::Retainable"* nonnull %220) #8
  br label %225

225:                                              ; preds = %213, %214, %219
  %226 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %10, align 8, !noalias !30
  %227 = icmp eq %class.CFX_DIBitmap* %226, null
  br i1 %227, label %228, label %232

228:                                              ; preds = %225
  %229 = load i16, i16* inttoptr (i64 16 to i16*), align 16
  %230 = and i16 %229, 256
  %231 = icmp eq i16 %230, 0
  br i1 %231, label %248, label %247

232:                                              ; preds = %225
  %233 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %226, i64 0, i32 0, i32 0, i32 1
  %234 = load i64, i64* %233, align 8, !noalias !30
  %235 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %226, i64 0, i32 0, i32 1
  %236 = load i16, i16* %235, align 8
  %237 = and i16 %236, 256
  %238 = icmp ne i16 %237, 0
  store i64 %234, i64* %233, align 8
  %239 = icmp eq i64 %234, 0
  br i1 %239, label %240, label %246

240:                                              ; preds = %232
  %241 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %226, i64 0, i32 0, i32 0
  %242 = bitcast %class.CFX_DIBitmap* %226 to void (%"class.fxcrt::Retainable"*)***
  %243 = load void (%"class.fxcrt::Retainable"*)**, void (%"class.fxcrt::Retainable"*)*** %242, align 8
  %244 = getelementptr inbounds void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %243, i64 1
  %245 = load void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %244, align 8
  call void %245(%"class.fxcrt::Retainable"* nonnull %241) #8
  br i1 %238, label %247, label %248

246:                                              ; preds = %232
  br i1 %238, label %247, label %248

247:                                              ; preds = %228, %240, %246
  call void @_ZN20CFX_ImageTransformer9CalcAlphaERKNS_8CalcDataE(%class.CFX_ImageTransformer* %0, %"struct.CFX_ImageTransformer::CalcData"* nonnull dereferenceable(32) %8)
  br label %277

248:                                              ; preds = %228, %240, %246
  %249 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %10, align 8, !noalias !33
  %250 = icmp eq %class.CFX_DIBitmap* %249, null
  br i1 %250, label %251, label %255

251:                                              ; preds = %248
  %252 = load i16, i16* inttoptr (i64 16 to i16*), align 16
  %253 = and i16 %252, 255
  %254 = zext i16 %253 to i32
  br label %269

255:                                              ; preds = %248
  %256 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %249, i64 0, i32 0, i32 0, i32 1
  %257 = load i64, i64* %256, align 8, !noalias !33
  %258 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %249, i64 0, i32 0, i32 1
  %259 = load i16, i16* %258, align 8
  %260 = and i16 %259, 255
  %261 = zext i16 %260 to i32
  store i64 %257, i64* %256, align 8
  %262 = icmp eq i64 %257, 0
  br i1 %262, label %263, label %269

263:                                              ; preds = %255
  %264 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %249, i64 0, i32 0, i32 0
  %265 = bitcast %class.CFX_DIBitmap* %249 to void (%"class.fxcrt::Retainable"*)***
  %266 = load void (%"class.fxcrt::Retainable"*)**, void (%"class.fxcrt::Retainable"*)*** %265, align 8
  %267 = getelementptr inbounds void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %266, i64 1
  %268 = load void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %267, align 8
  call void %268(%"class.fxcrt::Retainable"* nonnull %264) #8
  br label %269

269:                                              ; preds = %251, %255, %263
  %270 = phi i32 [ %254, %251 ], [ %261, %255 ], [ %261, %263 ]
  %271 = and i32 %270, 65528
  %272 = icmp eq i32 %271, 8
  br i1 %272, label %273, label %274

273:                                              ; preds = %269
  call void @_ZN20CFX_ImageTransformer8CalcMonoERKNS_8CalcDataE(%class.CFX_ImageTransformer* %0, %"struct.CFX_ImageTransformer::CalcData"* nonnull dereferenceable(32) %8)
  br label %277

274:                                              ; preds = %269
  %275 = lshr i32 %270, 3
  %276 = and i32 %275, 31
  call void @_ZN20CFX_ImageTransformer9CalcColorERKNS_8CalcDataE12FXDIB_Formati(%class.CFX_ImageTransformer* %0, %"struct.CFX_ImageTransformer::CalcData"* nonnull dereferenceable(32) %8, i16 zeroext %43, i32 %276)
  br label %277

277:                                              ; preds = %273, %274, %247
  call void @_ZN16CFX_BitmapStorer7ReplaceEON5fxcrt9RetainPtrI12CFX_DIBitmapEE(%class.CFX_BitmapStorer* %9, %"class.fxcrt::RetainPtr.0"* nonnull dereferenceable(8) %3) #8
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %174) #8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %101) #8
  %278 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %95, align 8
  store %class.CFX_DIBitmap* null, %class.CFX_DIBitmap** %95, align 8
  %279 = icmp eq %class.CFX_DIBitmap* %278, null
  br i1 %279, label %291, label %280

280:                                              ; preds = %277
  %281 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %278, i64 0, i32 0, i32 0, i32 1
  %282 = load i64, i64* %281, align 8
  %283 = add nsw i64 %282, -1
  store i64 %283, i64* %281, align 8
  %284 = icmp eq i64 %283, 0
  br i1 %284, label %285, label %291

285:                                              ; preds = %280
  %286 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %278, i64 0, i32 0, i32 0
  %287 = bitcast %class.CFX_DIBitmap* %278 to void (%"class.fxcrt::Retainable"*)***
  %288 = load void (%"class.fxcrt::Retainable"*)**, void (%"class.fxcrt::Retainable"*)*** %287, align 8
  %289 = getelementptr inbounds void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %288, i64 1
  %290 = load void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %289, align 8
  call void %290(%"class.fxcrt::Retainable"* nonnull %286) #8
  br label %291

291:                                              ; preds = %277, %280, %285
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %94) #8
  %292 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %25, align 8
  br label %293

293:                                              ; preds = %58, %291
  %294 = phi %class.CFX_DIBitmap* [ %59, %58 ], [ %292, %291 ]
  store %class.CFX_DIBitmap* null, %class.CFX_DIBitmap** %25, align 8
  %295 = icmp eq %class.CFX_DIBitmap* %294, null
  br i1 %295, label %307, label %296

296:                                              ; preds = %293
  %297 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %294, i64 0, i32 0, i32 0, i32 1
  %298 = load i64, i64* %297, align 8
  %299 = add nsw i64 %298, -1
  store i64 %299, i64* %297, align 8
  %300 = icmp eq i64 %299, 0
  br i1 %300, label %301, label %307

301:                                              ; preds = %296
  %302 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %294, i64 0, i32 0, i32 0
  %303 = bitcast %class.CFX_DIBitmap* %294 to void (%"class.fxcrt::Retainable"*)***
  %304 = load void (%"class.fxcrt::Retainable"*)**, void (%"class.fxcrt::Retainable"*)*** %303, align 8
  %305 = getelementptr inbounds void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %304, i64 1
  %306 = load void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %305, align 8
  call void %306(%"class.fxcrt::Retainable"* nonnull %302) #8
  br label %307

307:                                              ; preds = %293, %296, %301
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %24) #8
  br label %308

308:                                              ; preds = %2, %307
  ret void
}

declare void @_ZN16CFX_BitmapStorer7ReplaceEON5fxcrt9RetainPtrI12CFX_DIBitmapEE(%class.CFX_BitmapStorer*, %"class.fxcrt::RetainPtr.0"* dereferenceable(8)) local_unnamed_addr #2

declare void @_ZNK11CFX_DIBBase6SwapXYEbb(%"class.fxcrt::RetainPtr.0"* sret, %class.CFX_DIBBase*, i1 zeroext, i1 zeroext) local_unnamed_addr #2

declare void @_ZN18CFX_ImageStretcher6sourceEv(%"class.fxcrt::RetainPtr"* sret, %class.CFX_ImageStretcher*) local_unnamed_addr #2

declare zeroext i1 @_ZN12CFX_DIBitmap6CreateEii12FXDIB_Format(%class.CFX_DIBitmap*, i32, i32, i16 zeroext) local_unnamed_addr #2

declare i8* @_ZN11CFX_DIBBase18GetAlphaMaskBufferEv(%class.CFX_DIBBase*) local_unnamed_addr #2

declare void @_ZN12CFX_DIBitmap5ClearEj(%class.CFX_DIBitmap*, i32) local_unnamed_addr #2

declare void @_ZN11CFX_DIBBase12GetAlphaMaskEv(%"class.fxcrt::RetainPtr.0"* sret, %class.CFX_DIBBase*) local_unnamed_addr #2

declare i32 @_ZNK11CFX_DIBBase17GetAlphaMaskPitchEv(%class.CFX_DIBBase*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN20CFX_ImageTransformer8CalcMaskERKNS_8CalcDataE(%class.CFX_ImageTransformer* nocapture readonly, %"struct.CFX_ImageTransformer::CalcData"* dereferenceable(32)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"struct.CFX_ImageTransformer::CalcData", %"struct.CFX_ImageTransformer::CalcData"* %1, i64 0, i32 1
  %4 = load %class.CFX_Matrix*, %class.CFX_Matrix** %3, align 8
  %5 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %4, i64 0, i32 0
  %6 = load float, float* %5, align 4
  %7 = fmul float %6, 2.560000e+02
  %8 = tail call i32 @FXSYS_roundf(float %7) #8
  %9 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %4, i64 0, i32 1
  %10 = load float, float* %9, align 4
  %11 = fmul float %10, 2.560000e+02
  %12 = tail call i32 @FXSYS_roundf(float %11) #8
  %13 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %4, i64 0, i32 2
  %14 = load float, float* %13, align 4
  %15 = fmul float %14, 2.560000e+02
  %16 = tail call i32 @FXSYS_roundf(float %15) #8
  %17 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %4, i64 0, i32 3
  %18 = load float, float* %17, align 4
  %19 = fmul float %18, 2.560000e+02
  %20 = tail call i32 @FXSYS_roundf(float %19) #8
  %21 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %4, i64 0, i32 4
  %22 = load float, float* %21, align 4
  %23 = fmul float %22, 2.560000e+02
  %24 = tail call i32 @FXSYS_roundf(float %23) #8
  %25 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %4, i64 0, i32 5
  %26 = load float, float* %25, align 4
  %27 = fmul float %26, 2.560000e+02
  %28 = tail call i32 @FXSYS_roundf(float %27) #8
  %29 = getelementptr inbounds %class.CFX_ImageTransformer, %class.CFX_ImageTransformer* %0, i64 0, i32 3, i32 3
  %30 = load i32, i32* %29, align 4
  %31 = getelementptr inbounds %class.CFX_ImageTransformer, %class.CFX_ImageTransformer* %0, i64 0, i32 3, i32 1
  %32 = load i32, i32* %31, align 4
  %33 = icmp sgt i32 %30, %32
  br i1 %33, label %34, label %185

34:                                               ; preds = %2
  %35 = bitcast %"struct.CFX_ImageTransformer::CalcData"* %1 to %class.CFX_DIBBase**
  %36 = getelementptr inbounds %class.CFX_ImageTransformer, %class.CFX_ImageTransformer* %0, i64 0, i32 3, i32 2
  %37 = getelementptr inbounds %class.CFX_ImageTransformer, %class.CFX_ImageTransformer* %0, i64 0, i32 3, i32 0
  %38 = sitofp i32 %8 to float
  %39 = sitofp i32 %16 to float
  %40 = sitofp i32 %24 to float
  %41 = sitofp i32 %12 to float
  %42 = sitofp i32 %20 to float
  %43 = sitofp i32 %28 to float
  %44 = getelementptr inbounds %class.CFX_ImageTransformer, %class.CFX_ImageTransformer* %0, i64 0, i32 2, i32 2
  %45 = getelementptr inbounds %class.CFX_ImageTransformer, %class.CFX_ImageTransformer* %0, i64 0, i32 2, i32 0
  %46 = getelementptr inbounds %class.CFX_ImageTransformer, %class.CFX_ImageTransformer* %0, i64 0, i32 2, i32 3
  %47 = getelementptr inbounds %class.CFX_ImageTransformer, %class.CFX_ImageTransformer* %0, i64 0, i32 2, i32 1
  %48 = getelementptr inbounds %"struct.CFX_ImageTransformer::CalcData", %"struct.CFX_ImageTransformer::CalcData"* %1, i64 0, i32 3
  %49 = getelementptr inbounds %"struct.CFX_ImageTransformer::CalcData", %"struct.CFX_ImageTransformer::CalcData"* %1, i64 0, i32 2
  br label %50

50:                                               ; preds = %65, %34
  %51 = phi i32 [ 0, %34 ], [ %66, %65 ]
  %52 = load %class.CFX_DIBBase*, %class.CFX_DIBBase** %35, align 8
  %53 = bitcast %class.CFX_DIBBase* %52 to i8* (%class.CFX_DIBBase*, i32)***
  %54 = load i8* (%class.CFX_DIBBase*, i32)**, i8* (%class.CFX_DIBBase*, i32)*** %53, align 8
  %55 = getelementptr inbounds i8* (%class.CFX_DIBBase*, i32)*, i8* (%class.CFX_DIBBase*, i32)** %54, i64 3
  %56 = load i8* (%class.CFX_DIBBase*, i32)*, i8* (%class.CFX_DIBBase*, i32)** %55, align 8
  %57 = tail call i8* %56(%class.CFX_DIBBase* %52, i32 %51) #8
  %58 = load i32, i32* %36, align 4
  %59 = load i32, i32* %37, align 4
  %60 = icmp sgt i32 %58, %59
  br i1 %60, label %61, label %65

61:                                               ; preds = %50
  %62 = sitofp i32 %51 to float
  %63 = fmul float %39, %62
  %64 = fmul float %42, %62
  br label %71

65:                                               ; preds = %178, %50
  %66 = add nuw nsw i32 %51, 1
  %67 = load i32, i32* %29, align 4
  %68 = load i32, i32* %31, align 4
  %69 = sub nsw i32 %67, %68
  %70 = icmp slt i32 %66, %69
  br i1 %70, label %50, label %185

71:                                               ; preds = %178, %61
  %72 = phi i32 [ %59, %61 ], [ %179, %178 ]
  %73 = phi i32 [ %58, %61 ], [ %180, %178 ]
  %74 = phi i32 [ 0, %61 ], [ %182, %178 ]
  %75 = phi i8* [ %57, %61 ], [ %181, %178 ]
  %76 = sitofp i32 %74 to float
  %77 = fmul float %38, %76
  %78 = fadd float %63, %77
  %79 = fadd float %78, %40
  %80 = fadd float %79, 1.280000e+02
  %81 = fmul float %41, %76
  %82 = fadd float %64, %81
  %83 = fadd float %82, %43
  %84 = fadd float %83, 1.280000e+02
  %85 = fmul float %80, 3.906250e-03
  %86 = fcmp ult float %85, 0xC1E0000000000000
  %87 = fcmp ugt float %85, 0x41DFFFFFE0000000
  %88 = fcmp ogt float %85, 0xC1E0000000000000
  %89 = select i1 %88, float %85, float 0xC1E0000000000000
  %90 = fptosi float %89 to i32
  %91 = select i1 %86, i32 0, i32 2147483647
  %92 = select i1 %87, i32 %91, i32 %90
  %93 = fmul float %84, 3.906250e-03
  %94 = fcmp ult float %93, 0xC1E0000000000000
  %95 = fcmp ugt float %93, 0x41DFFFFFE0000000
  %96 = fcmp ogt float %93, 0xC1E0000000000000
  %97 = select i1 %96, float %93, float 0xC1E0000000000000
  %98 = fptosi float %97 to i32
  %99 = select i1 %94, i32 0, i32 2147483647
  %100 = select i1 %95, i32 %99, i32 %98
  %101 = fptosi float %80 to i32
  %102 = srem i32 %101, 256
  %103 = fptosi float %84 to i32
  %104 = srem i32 %103, 256
  %105 = icmp ugt i32 %102, -256
  %106 = add nsw i32 %102, 256
  %107 = select i1 %105, i32 %106, i32 %102
  %108 = icmp ugt i32 %104, -256
  %109 = add nsw i32 %104, 256
  %110 = select i1 %108, i32 %109, i32 %104
  %111 = icmp sgt i32 %92, -1
  br i1 %111, label %112, label %178, !prof !36

112:                                              ; preds = %71
  %113 = load i32, i32* %44, align 4
  %114 = load i32, i32* %45, align 4
  %115 = sub nsw i32 %113, %114
  %116 = icmp sge i32 %115, %92
  %117 = icmp sgt i32 %100, -1
  %118 = and i1 %117, %116
  br i1 %118, label %119, label %178, !prof !36

119:                                              ; preds = %112
  %120 = load i32, i32* %46, align 4
  %121 = load i32, i32* %47, align 4
  %122 = sub nsw i32 %120, %121
  %123 = icmp slt i32 %122, %100
  br i1 %123, label %178, label %124, !prof !37

124:                                              ; preds = %119
  %125 = icmp eq i32 %92, %115
  %126 = zext i1 %125 to i32
  %127 = sub nsw i32 %92, %126
  %128 = icmp eq i32 %100, %122
  %129 = zext i1 %128 to i32
  %130 = sub nsw i32 %100, %129
  %131 = add nsw i32 %127, 1
  %132 = add nsw i32 %130, 1
  %133 = icmp eq i32 %131, %115
  %134 = select i1 %133, i32 %127, i32 %131
  %135 = icmp eq i32 %132, %122
  %136 = select i1 %135, i32 %130, i32 %132
  %137 = load i32, i32* %48, align 8
  %138 = mul i32 %137, %130
  %139 = mul i32 %137, %136
  %140 = load i8*, i8** %49, align 8
  %141 = sub nuw nsw i32 255, %107
  %142 = sext i32 %138 to i64
  %143 = getelementptr inbounds i8, i8* %140, i64 %142
  %144 = sext i32 %139 to i64
  %145 = getelementptr inbounds i8, i8* %140, i64 %144
  %146 = sext i32 %127 to i64
  %147 = getelementptr inbounds i8, i8* %143, i64 %146
  %148 = sext i32 %134 to i64
  %149 = getelementptr inbounds i8, i8* %143, i64 %148
  %150 = getelementptr inbounds i8, i8* %145, i64 %146
  %151 = getelementptr inbounds i8, i8* %145, i64 %148
  %152 = load i8, i8* %147, align 1
  %153 = zext i8 %152 to i32
  %154 = mul nsw i32 %141, %153
  %155 = load i8, i8* %149, align 1
  %156 = zext i8 %155 to i32
  %157 = mul nsw i32 %107, %156
  %158 = add nuw nsw i32 %157, %154
  %159 = lshr i32 %158, 8
  %160 = load i8, i8* %150, align 1
  %161 = zext i8 %160 to i32
  %162 = mul nsw i32 %141, %161
  %163 = load i8, i8* %151, align 1
  %164 = zext i8 %163 to i32
  %165 = mul nsw i32 %107, %164
  %166 = add nuw nsw i32 %165, %162
  %167 = lshr i32 %166, 8
  %168 = and i32 %159, 255
  %169 = sub nuw nsw i32 255, %110
  %170 = mul nsw i32 %168, %169
  %171 = and i32 %167, 255
  %172 = mul nsw i32 %171, %110
  %173 = add nuw nsw i32 %172, %170
  %174 = lshr i32 %173, 8
  %175 = trunc i32 %174 to i8
  store i8 %175, i8* %75, align 1
  %176 = load i32, i32* %36, align 4
  %177 = load i32, i32* %37, align 4
  br label %178

178:                                              ; preds = %124, %119, %112, %71
  %179 = phi i32 [ %72, %119 ], [ %72, %71 ], [ %72, %112 ], [ %177, %124 ]
  %180 = phi i32 [ %73, %119 ], [ %73, %71 ], [ %73, %112 ], [ %176, %124 ]
  %181 = getelementptr inbounds i8, i8* %75, i64 1
  %182 = add nuw nsw i32 %74, 1
  %183 = sub nsw i32 %180, %179
  %184 = icmp slt i32 %182, %183
  br i1 %184, label %71, label %65

185:                                              ; preds = %65, %2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN20CFX_ImageTransformer9CalcAlphaERKNS_8CalcDataE(%class.CFX_ImageTransformer* nocapture readonly, %"struct.CFX_ImageTransformer::CalcData"* dereferenceable(32)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"struct.CFX_ImageTransformer::CalcData", %"struct.CFX_ImageTransformer::CalcData"* %1, i64 0, i32 1
  %4 = load %class.CFX_Matrix*, %class.CFX_Matrix** %3, align 8
  %5 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %4, i64 0, i32 0
  %6 = load float, float* %5, align 4
  %7 = fmul float %6, 2.560000e+02
  %8 = tail call i32 @FXSYS_roundf(float %7) #8
  %9 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %4, i64 0, i32 1
  %10 = load float, float* %9, align 4
  %11 = fmul float %10, 2.560000e+02
  %12 = tail call i32 @FXSYS_roundf(float %11) #8
  %13 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %4, i64 0, i32 2
  %14 = load float, float* %13, align 4
  %15 = fmul float %14, 2.560000e+02
  %16 = tail call i32 @FXSYS_roundf(float %15) #8
  %17 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %4, i64 0, i32 3
  %18 = load float, float* %17, align 4
  %19 = fmul float %18, 2.560000e+02
  %20 = tail call i32 @FXSYS_roundf(float %19) #8
  %21 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %4, i64 0, i32 4
  %22 = load float, float* %21, align 4
  %23 = fmul float %22, 2.560000e+02
  %24 = tail call i32 @FXSYS_roundf(float %23) #8
  %25 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %4, i64 0, i32 5
  %26 = load float, float* %25, align 4
  %27 = fmul float %26, 2.560000e+02
  %28 = tail call i32 @FXSYS_roundf(float %27) #8
  %29 = getelementptr inbounds %class.CFX_ImageTransformer, %class.CFX_ImageTransformer* %0, i64 0, i32 3, i32 3
  %30 = load i32, i32* %29, align 4
  %31 = getelementptr inbounds %class.CFX_ImageTransformer, %class.CFX_ImageTransformer* %0, i64 0, i32 3, i32 1
  %32 = load i32, i32* %31, align 4
  %33 = icmp sgt i32 %30, %32
  br i1 %33, label %34, label %185

34:                                               ; preds = %2
  %35 = bitcast %"struct.CFX_ImageTransformer::CalcData"* %1 to %class.CFX_DIBBase**
  %36 = getelementptr inbounds %class.CFX_ImageTransformer, %class.CFX_ImageTransformer* %0, i64 0, i32 3, i32 2
  %37 = getelementptr inbounds %class.CFX_ImageTransformer, %class.CFX_ImageTransformer* %0, i64 0, i32 3, i32 0
  %38 = sitofp i32 %8 to float
  %39 = sitofp i32 %16 to float
  %40 = sitofp i32 %24 to float
  %41 = sitofp i32 %12 to float
  %42 = sitofp i32 %20 to float
  %43 = sitofp i32 %28 to float
  %44 = getelementptr inbounds %class.CFX_ImageTransformer, %class.CFX_ImageTransformer* %0, i64 0, i32 2, i32 2
  %45 = getelementptr inbounds %class.CFX_ImageTransformer, %class.CFX_ImageTransformer* %0, i64 0, i32 2, i32 0
  %46 = getelementptr inbounds %class.CFX_ImageTransformer, %class.CFX_ImageTransformer* %0, i64 0, i32 2, i32 3
  %47 = getelementptr inbounds %class.CFX_ImageTransformer, %class.CFX_ImageTransformer* %0, i64 0, i32 2, i32 1
  %48 = getelementptr inbounds %"struct.CFX_ImageTransformer::CalcData", %"struct.CFX_ImageTransformer::CalcData"* %1, i64 0, i32 3
  %49 = getelementptr inbounds %"struct.CFX_ImageTransformer::CalcData", %"struct.CFX_ImageTransformer::CalcData"* %1, i64 0, i32 2
  br label %50

50:                                               ; preds = %65, %34
  %51 = phi i32 [ 0, %34 ], [ %66, %65 ]
  %52 = load %class.CFX_DIBBase*, %class.CFX_DIBBase** %35, align 8
  %53 = bitcast %class.CFX_DIBBase* %52 to i8* (%class.CFX_DIBBase*, i32)***
  %54 = load i8* (%class.CFX_DIBBase*, i32)**, i8* (%class.CFX_DIBBase*, i32)*** %53, align 8
  %55 = getelementptr inbounds i8* (%class.CFX_DIBBase*, i32)*, i8* (%class.CFX_DIBBase*, i32)** %54, i64 3
  %56 = load i8* (%class.CFX_DIBBase*, i32)*, i8* (%class.CFX_DIBBase*, i32)** %55, align 8
  %57 = tail call i8* %56(%class.CFX_DIBBase* %52, i32 %51) #8
  %58 = load i32, i32* %36, align 4
  %59 = load i32, i32* %37, align 4
  %60 = icmp sgt i32 %58, %59
  br i1 %60, label %61, label %65

61:                                               ; preds = %50
  %62 = sitofp i32 %51 to float
  %63 = fmul float %39, %62
  %64 = fmul float %42, %62
  br label %71

65:                                               ; preds = %178, %50
  %66 = add nuw nsw i32 %51, 1
  %67 = load i32, i32* %29, align 4
  %68 = load i32, i32* %31, align 4
  %69 = sub nsw i32 %67, %68
  %70 = icmp slt i32 %66, %69
  br i1 %70, label %50, label %185

71:                                               ; preds = %178, %61
  %72 = phi i32 [ %59, %61 ], [ %179, %178 ]
  %73 = phi i32 [ %58, %61 ], [ %180, %178 ]
  %74 = phi i32 [ 0, %61 ], [ %182, %178 ]
  %75 = phi i8* [ %57, %61 ], [ %181, %178 ]
  %76 = sitofp i32 %74 to float
  %77 = fmul float %38, %76
  %78 = fadd float %63, %77
  %79 = fadd float %78, %40
  %80 = fadd float %79, 1.280000e+02
  %81 = fmul float %41, %76
  %82 = fadd float %64, %81
  %83 = fadd float %82, %43
  %84 = fadd float %83, 1.280000e+02
  %85 = fmul float %80, 3.906250e-03
  %86 = fcmp ult float %85, 0xC1E0000000000000
  %87 = fcmp ugt float %85, 0x41DFFFFFE0000000
  %88 = fcmp ogt float %85, 0xC1E0000000000000
  %89 = select i1 %88, float %85, float 0xC1E0000000000000
  %90 = fptosi float %89 to i32
  %91 = select i1 %86, i32 0, i32 2147483647
  %92 = select i1 %87, i32 %91, i32 %90
  %93 = fmul float %84, 3.906250e-03
  %94 = fcmp ult float %93, 0xC1E0000000000000
  %95 = fcmp ugt float %93, 0x41DFFFFFE0000000
  %96 = fcmp ogt float %93, 0xC1E0000000000000
  %97 = select i1 %96, float %93, float 0xC1E0000000000000
  %98 = fptosi float %97 to i32
  %99 = select i1 %94, i32 0, i32 2147483647
  %100 = select i1 %95, i32 %99, i32 %98
  %101 = fptosi float %80 to i32
  %102 = srem i32 %101, 256
  %103 = fptosi float %84 to i32
  %104 = srem i32 %103, 256
  %105 = icmp ugt i32 %102, -256
  %106 = add nsw i32 %102, 256
  %107 = select i1 %105, i32 %106, i32 %102
  %108 = icmp ugt i32 %104, -256
  %109 = add nsw i32 %104, 256
  %110 = select i1 %108, i32 %109, i32 %104
  %111 = icmp sgt i32 %92, -1
  br i1 %111, label %112, label %178, !prof !36

112:                                              ; preds = %71
  %113 = load i32, i32* %44, align 4
  %114 = load i32, i32* %45, align 4
  %115 = sub nsw i32 %113, %114
  %116 = icmp sge i32 %115, %92
  %117 = icmp sgt i32 %100, -1
  %118 = and i1 %117, %116
  br i1 %118, label %119, label %178, !prof !36

119:                                              ; preds = %112
  %120 = load i32, i32* %46, align 4
  %121 = load i32, i32* %47, align 4
  %122 = sub nsw i32 %120, %121
  %123 = icmp slt i32 %122, %100
  br i1 %123, label %178, label %124, !prof !37

124:                                              ; preds = %119
  %125 = icmp eq i32 %92, %115
  %126 = zext i1 %125 to i32
  %127 = sub nsw i32 %92, %126
  %128 = icmp eq i32 %100, %122
  %129 = zext i1 %128 to i32
  %130 = sub nsw i32 %100, %129
  %131 = add nsw i32 %127, 1
  %132 = add nsw i32 %130, 1
  %133 = icmp eq i32 %131, %115
  %134 = select i1 %133, i32 %127, i32 %131
  %135 = icmp eq i32 %132, %122
  %136 = select i1 %135, i32 %130, i32 %132
  %137 = load i32, i32* %48, align 8
  %138 = mul i32 %137, %130
  %139 = mul i32 %137, %136
  %140 = load i8*, i8** %49, align 8
  %141 = sub nuw nsw i32 255, %107
  %142 = sext i32 %138 to i64
  %143 = getelementptr inbounds i8, i8* %140, i64 %142
  %144 = sext i32 %139 to i64
  %145 = getelementptr inbounds i8, i8* %140, i64 %144
  %146 = sext i32 %127 to i64
  %147 = getelementptr inbounds i8, i8* %143, i64 %146
  %148 = sext i32 %134 to i64
  %149 = getelementptr inbounds i8, i8* %143, i64 %148
  %150 = getelementptr inbounds i8, i8* %145, i64 %146
  %151 = getelementptr inbounds i8, i8* %145, i64 %148
  %152 = load i8, i8* %147, align 1
  %153 = zext i8 %152 to i32
  %154 = mul nsw i32 %141, %153
  %155 = load i8, i8* %149, align 1
  %156 = zext i8 %155 to i32
  %157 = mul nsw i32 %107, %156
  %158 = add nuw nsw i32 %157, %154
  %159 = lshr i32 %158, 8
  %160 = load i8, i8* %150, align 1
  %161 = zext i8 %160 to i32
  %162 = mul nsw i32 %141, %161
  %163 = load i8, i8* %151, align 1
  %164 = zext i8 %163 to i32
  %165 = mul nsw i32 %107, %164
  %166 = add nuw nsw i32 %165, %162
  %167 = lshr i32 %166, 8
  %168 = and i32 %159, 255
  %169 = sub nuw nsw i32 255, %110
  %170 = mul nsw i32 %168, %169
  %171 = and i32 %167, 255
  %172 = mul nsw i32 %171, %110
  %173 = add nuw nsw i32 %172, %170
  %174 = lshr i32 %173, 8
  %175 = trunc i32 %174 to i8
  store i8 %175, i8* %75, align 1
  %176 = load i32, i32* %36, align 4
  %177 = load i32, i32* %37, align 4
  br label %178

178:                                              ; preds = %124, %119, %112, %71
  %179 = phi i32 [ %72, %119 ], [ %72, %71 ], [ %72, %112 ], [ %177, %124 ]
  %180 = phi i32 [ %73, %119 ], [ %73, %71 ], [ %73, %112 ], [ %176, %124 ]
  %181 = getelementptr inbounds i8, i8* %75, i64 1
  %182 = add nuw nsw i32 %74, 1
  %183 = sub nsw i32 %180, %179
  %184 = icmp slt i32 %182, %183
  br i1 %184, label %71, label %65

185:                                              ; preds = %65, %2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN20CFX_ImageTransformer8CalcMonoERKNS_8CalcDataE(%class.CFX_ImageTransformer* nocapture readonly, %"struct.CFX_ImageTransformer::CalcData"* dereferenceable(32)) local_unnamed_addr #0 align 2 {
  %3 = alloca [256 x i32], align 16
  %4 = bitcast [256 x i32]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %4) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %4, i8 -86, i64 1024, i1 false)
  %5 = getelementptr inbounds %class.CFX_ImageTransformer, %class.CFX_ImageTransformer* %0, i64 0, i32 6, i32 1, i32 0, i32 0, i32 0, i32 0
  %6 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %5, align 8, !noalias !38
  %7 = icmp eq %class.CFX_DIBitmap* %6, null
  br i1 %7, label %8, label %34

8:                                                ; preds = %2
  %9 = load i32*, i32** inttoptr (i64 40 to i32**), align 8
  %10 = load i32*, i32** inttoptr (i64 48 to i32**), align 16
  %11 = icmp eq i32* %9, %10
  br i1 %11, label %12, label %50

12:                                               ; preds = %8, %43, %49
  br label %13

13:                                               ; preds = %12, %13
  %14 = phi i64 [ %31, %13 ], [ 0, %12 ]
  %15 = phi <4 x i32> [ %32, %13 ], [ <i32 0, i32 1, i32 2, i32 3>, %12 ]
  %16 = add <4 x i32> %15, <i32 4, i32 4, i32 4, i32 4>
  %17 = shl <4 x i32> %15, <i32 16, i32 16, i32 16, i32 16>
  %18 = shl <4 x i32> %16, <i32 16, i32 16, i32 16, i32 16>
  %19 = shl <4 x i32> %15, <i32 8, i32 8, i32 8, i32 8>
  %20 = shl <4 x i32> %16, <i32 8, i32 8, i32 8, i32 8>
  %21 = or <4 x i32> %19, %15
  %22 = or <4 x i32> %20, %16
  %23 = or <4 x i32> %21, %17
  %24 = or <4 x i32> %22, %18
  %25 = or <4 x i32> %23, <i32 -16777216, i32 -16777216, i32 -16777216, i32 -16777216>
  %26 = or <4 x i32> %24, <i32 -16777216, i32 -16777216, i32 -16777216, i32 -16777216>
  %27 = getelementptr inbounds [256 x i32], [256 x i32]* %3, i64 0, i64 %14
  %28 = bitcast i32* %27 to <4 x i32>*
  store <4 x i32> %25, <4 x i32>* %28, align 16
  %29 = getelementptr inbounds i32, i32* %27, i64 4
  %30 = bitcast i32* %29 to <4 x i32>*
  store <4 x i32> %26, <4 x i32>* %30, align 16
  %31 = add i64 %14, 8
  %32 = add <4 x i32> %15, <i32 8, i32 8, i32 8, i32 8>
  %33 = icmp eq i64 %31, 256
  br i1 %33, label %98, label %13, !llvm.loop !41

34:                                               ; preds = %2
  %35 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %6, i64 0, i32 0, i32 0, i32 1
  %36 = load i64, i64* %35, align 8, !noalias !38
  %37 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %6, i64 0, i32 0, i32 6, i32 0, i32 0
  %38 = load i32*, i32** %37, align 8
  %39 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %6, i64 0, i32 0, i32 6, i32 0, i32 1
  %40 = load i32*, i32** %39, align 8
  %41 = icmp ne i32* %38, %40
  store i64 %36, i64* %35, align 8
  %42 = icmp eq i64 %36, 0
  br i1 %42, label %43, label %49

43:                                               ; preds = %34
  %44 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %6, i64 0, i32 0, i32 0
  %45 = bitcast %class.CFX_DIBitmap* %6 to void (%"class.fxcrt::Retainable"*)***
  %46 = load void (%"class.fxcrt::Retainable"*)**, void (%"class.fxcrt::Retainable"*)*** %45, align 8
  %47 = getelementptr inbounds void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %46, i64 1
  %48 = load void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %47, align 8
  tail call void %48(%"class.fxcrt::Retainable"* nonnull %44) #8
  br i1 %41, label %50, label %12

49:                                               ; preds = %34
  br i1 %41, label %50, label %12

50:                                               ; preds = %8, %43, %49
  %51 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %5, align 8, !noalias !43
  %52 = icmp eq %class.CFX_DIBitmap* %51, null
  br i1 %52, label %53, label %62

53:                                               ; preds = %50
  %54 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %51, i64 0, i32 0, i32 6
  %55 = bitcast %"class.std::__1::vector"* %54 to i64*
  %56 = load i64, i64* %55, align 8, !noalias !46
  %57 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %51, i64 0, i32 0, i32 6, i32 0, i32 1
  %58 = bitcast i32** %57 to i64*
  %59 = load i64, i64* %58, align 8, !noalias !46
  %60 = sub i64 %59, %56
  %61 = ashr exact i64 %60, 2
  br label %84

62:                                               ; preds = %50
  %63 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %51, i64 0, i32 0, i32 0, i32 1
  %64 = load i64, i64* %63, align 8, !noalias !43
  %65 = add nsw i64 %64, 1
  store i64 %65, i64* %63, align 8, !noalias !43
  %66 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %51, i64 0, i32 0, i32 6
  %67 = bitcast %"class.std::__1::vector"* %66 to i64*
  %68 = load i64, i64* %67, align 8, !noalias !46
  %69 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %51, i64 0, i32 0, i32 6, i32 0, i32 1
  %70 = bitcast i32** %69 to i64*
  %71 = load i64, i64* %70, align 8, !noalias !46
  %72 = sub i64 %71, %68
  %73 = ashr exact i64 %72, 2
  %74 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %51, i64 0, i32 0, i32 0, i32 1
  %75 = load i64, i64* %74, align 8
  %76 = add nsw i64 %75, -1
  store i64 %76, i64* %74, align 8
  %77 = icmp eq i64 %76, 0
  br i1 %77, label %78, label %84

78:                                               ; preds = %62
  %79 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %51, i64 0, i32 0, i32 0
  %80 = bitcast %class.CFX_DIBitmap* %51 to void (%"class.fxcrt::Retainable"*)***
  %81 = load void (%"class.fxcrt::Retainable"*)**, void (%"class.fxcrt::Retainable"*)*** %80, align 8
  %82 = getelementptr inbounds void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %81, i64 1
  %83 = load void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %82, align 8
  tail call void %83(%"class.fxcrt::Retainable"* nonnull %79) #8
  br label %84

84:                                               ; preds = %53, %62, %78
  %85 = phi i64 [ %61, %53 ], [ %73, %62 ], [ %73, %78 ]
  %86 = phi i64 [ %56, %53 ], [ %68, %62 ], [ %68, %78 ]
  %87 = inttoptr i64 %86 to i32*
  br label %88

88:                                               ; preds = %304, %84
  %89 = phi i64 [ 0, %84 ], [ %308, %304 ]
  %90 = icmp eq i64 %89, %85
  br i1 %90, label %91, label %92, !prof !37

91:                                               ; preds = %298, %292, %92, %88
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #8, !srcloc !49
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #8, !srcloc !50
  unreachable

92:                                               ; preds = %88
  %93 = getelementptr inbounds i32, i32* %87, i64 %89
  %94 = load i32, i32* %93, align 4
  %95 = getelementptr inbounds [256 x i32], [256 x i32]* %3, i64 0, i64 %89
  store i32 %94, i32* %95, align 16
  %96 = or i64 %89, 1
  %97 = icmp eq i64 %96, %85
  br i1 %97, label %91, label %292, !prof !37

98:                                               ; preds = %304, %13
  %99 = bitcast %"struct.CFX_ImageTransformer::CalcData"* %1 to %class.CFX_DIBBase**
  %100 = load %class.CFX_DIBBase*, %class.CFX_DIBBase** %99, align 8
  %101 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %100, i64 0, i32 1
  %102 = load i16, i16* %101, align 8
  %103 = getelementptr inbounds %"struct.CFX_ImageTransformer::CalcData", %"struct.CFX_ImageTransformer::CalcData"* %1, i64 0, i32 1
  %104 = load %class.CFX_Matrix*, %class.CFX_Matrix** %103, align 8
  %105 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %104, i64 0, i32 0
  %106 = load float, float* %105, align 4
  %107 = fmul float %106, 2.560000e+02
  %108 = tail call i32 @FXSYS_roundf(float %107) #8
  %109 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %104, i64 0, i32 1
  %110 = load float, float* %109, align 4
  %111 = fmul float %110, 2.560000e+02
  %112 = tail call i32 @FXSYS_roundf(float %111) #8
  %113 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %104, i64 0, i32 2
  %114 = load float, float* %113, align 4
  %115 = fmul float %114, 2.560000e+02
  %116 = tail call i32 @FXSYS_roundf(float %115) #8
  %117 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %104, i64 0, i32 3
  %118 = load float, float* %117, align 4
  %119 = fmul float %118, 2.560000e+02
  %120 = tail call i32 @FXSYS_roundf(float %119) #8
  %121 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %104, i64 0, i32 4
  %122 = load float, float* %121, align 4
  %123 = fmul float %122, 2.560000e+02
  %124 = tail call i32 @FXSYS_roundf(float %123) #8
  %125 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %104, i64 0, i32 5
  %126 = load float, float* %125, align 4
  %127 = fmul float %126, 2.560000e+02
  %128 = tail call i32 @FXSYS_roundf(float %127) #8
  %129 = getelementptr inbounds %class.CFX_ImageTransformer, %class.CFX_ImageTransformer* %0, i64 0, i32 3, i32 3
  %130 = load i32, i32* %129, align 4
  %131 = getelementptr inbounds %class.CFX_ImageTransformer, %class.CFX_ImageTransformer* %0, i64 0, i32 3, i32 1
  %132 = load i32, i32* %131, align 4
  %133 = icmp sgt i32 %130, %132
  br i1 %133, label %134, label %291

134:                                              ; preds = %98
  %135 = lshr i16 %102, 3
  %136 = and i16 %135, 31
  %137 = getelementptr inbounds %class.CFX_ImageTransformer, %class.CFX_ImageTransformer* %0, i64 0, i32 3, i32 2
  %138 = getelementptr inbounds %class.CFX_ImageTransformer, %class.CFX_ImageTransformer* %0, i64 0, i32 3, i32 0
  %139 = sitofp i32 %108 to float
  %140 = sitofp i32 %116 to float
  %141 = sitofp i32 %124 to float
  %142 = sitofp i32 %112 to float
  %143 = sitofp i32 %120 to float
  %144 = sitofp i32 %128 to float
  %145 = getelementptr inbounds %class.CFX_ImageTransformer, %class.CFX_ImageTransformer* %0, i64 0, i32 2, i32 2
  %146 = getelementptr inbounds %class.CFX_ImageTransformer, %class.CFX_ImageTransformer* %0, i64 0, i32 2, i32 0
  %147 = getelementptr inbounds %class.CFX_ImageTransformer, %class.CFX_ImageTransformer* %0, i64 0, i32 2, i32 3
  %148 = getelementptr inbounds %class.CFX_ImageTransformer, %class.CFX_ImageTransformer* %0, i64 0, i32 2, i32 1
  %149 = getelementptr inbounds %"struct.CFX_ImageTransformer::CalcData", %"struct.CFX_ImageTransformer::CalcData"* %1, i64 0, i32 3
  %150 = zext i16 %136 to i64
  %151 = getelementptr inbounds %"struct.CFX_ImageTransformer::CalcData", %"struct.CFX_ImageTransformer::CalcData"* %1, i64 0, i32 2
  br label %152

152:                                              ; preds = %167, %134
  %153 = phi i32 [ 0, %134 ], [ %168, %167 ]
  %154 = load %class.CFX_DIBBase*, %class.CFX_DIBBase** %99, align 8
  %155 = bitcast %class.CFX_DIBBase* %154 to i8* (%class.CFX_DIBBase*, i32)***
  %156 = load i8* (%class.CFX_DIBBase*, i32)**, i8* (%class.CFX_DIBBase*, i32)*** %155, align 8
  %157 = getelementptr inbounds i8* (%class.CFX_DIBBase*, i32)*, i8* (%class.CFX_DIBBase*, i32)** %156, i64 3
  %158 = load i8* (%class.CFX_DIBBase*, i32)*, i8* (%class.CFX_DIBBase*, i32)** %157, align 8
  %159 = tail call i8* %158(%class.CFX_DIBBase* %154, i32 %153) #8
  %160 = load i32, i32* %137, align 4
  %161 = load i32, i32* %138, align 4
  %162 = icmp sgt i32 %160, %161
  br i1 %162, label %163, label %167

163:                                              ; preds = %152
  %164 = sitofp i32 %153 to float
  %165 = fmul float %140, %164
  %166 = fmul float %143, %164
  br label %173

167:                                              ; preds = %284, %152
  %168 = add nuw nsw i32 %153, 1
  %169 = load i32, i32* %129, align 4
  %170 = load i32, i32* %131, align 4
  %171 = sub nsw i32 %169, %170
  %172 = icmp slt i32 %168, %171
  br i1 %172, label %152, label %291

173:                                              ; preds = %284, %163
  %174 = phi i32 [ %161, %163 ], [ %285, %284 ]
  %175 = phi i32 [ %160, %163 ], [ %286, %284 ]
  %176 = phi i32 [ 0, %163 ], [ %288, %284 ]
  %177 = phi i8* [ %159, %163 ], [ %287, %284 ]
  %178 = sitofp i32 %176 to float
  %179 = fmul float %139, %178
  %180 = fadd float %165, %179
  %181 = fadd float %180, %141
  %182 = fadd float %181, 1.280000e+02
  %183 = fmul float %142, %178
  %184 = fadd float %166, %183
  %185 = fadd float %184, %144
  %186 = fadd float %185, 1.280000e+02
  %187 = fmul float %182, 3.906250e-03
  %188 = fcmp ult float %187, 0xC1E0000000000000
  %189 = fcmp ugt float %187, 0x41DFFFFFE0000000
  %190 = fcmp ogt float %187, 0xC1E0000000000000
  %191 = select i1 %190, float %187, float 0xC1E0000000000000
  %192 = fptosi float %191 to i32
  %193 = select i1 %188, i32 0, i32 2147483647
  %194 = select i1 %189, i32 %193, i32 %192
  %195 = fmul float %186, 3.906250e-03
  %196 = fcmp ult float %195, 0xC1E0000000000000
  %197 = fcmp ugt float %195, 0x41DFFFFFE0000000
  %198 = fcmp ogt float %195, 0xC1E0000000000000
  %199 = select i1 %198, float %195, float 0xC1E0000000000000
  %200 = fptosi float %199 to i32
  %201 = select i1 %196, i32 0, i32 2147483647
  %202 = select i1 %197, i32 %201, i32 %200
  %203 = fptosi float %182 to i32
  %204 = srem i32 %203, 256
  %205 = fptosi float %186 to i32
  %206 = srem i32 %205, 256
  %207 = icmp ugt i32 %204, -256
  %208 = add nsw i32 %204, 256
  %209 = select i1 %207, i32 %208, i32 %204
  %210 = icmp ugt i32 %206, -256
  %211 = add nsw i32 %206, 256
  %212 = select i1 %210, i32 %211, i32 %206
  %213 = icmp sgt i32 %194, -1
  br i1 %213, label %214, label %284, !prof !36

214:                                              ; preds = %173
  %215 = load i32, i32* %145, align 4
  %216 = load i32, i32* %146, align 4
  %217 = sub nsw i32 %215, %216
  %218 = icmp sge i32 %217, %194
  %219 = icmp sgt i32 %202, -1
  %220 = and i1 %219, %218
  br i1 %220, label %221, label %284, !prof !36

221:                                              ; preds = %214
  %222 = load i32, i32* %147, align 4
  %223 = load i32, i32* %148, align 4
  %224 = sub nsw i32 %222, %223
  %225 = icmp slt i32 %224, %202
  br i1 %225, label %284, label %226, !prof !37

226:                                              ; preds = %221
  %227 = icmp eq i32 %194, %217
  %228 = zext i1 %227 to i32
  %229 = sub nsw i32 %194, %228
  %230 = icmp eq i32 %202, %224
  %231 = zext i1 %230 to i32
  %232 = sub nsw i32 %202, %231
  %233 = add nsw i32 %229, 1
  %234 = add nsw i32 %232, 1
  %235 = icmp eq i32 %233, %217
  %236 = select i1 %235, i32 %229, i32 %233
  %237 = icmp eq i32 %234, %224
  %238 = select i1 %237, i32 %232, i32 %234
  %239 = load i32, i32* %149, align 8
  %240 = mul i32 %239, %232
  %241 = mul i32 %239, %238
  %242 = load i8*, i8** %151, align 8
  %243 = sub nuw nsw i32 255, %209
  %244 = sext i32 %240 to i64
  %245 = getelementptr inbounds i8, i8* %242, i64 %244
  %246 = sext i32 %241 to i64
  %247 = getelementptr inbounds i8, i8* %242, i64 %246
  %248 = sext i32 %229 to i64
  %249 = getelementptr inbounds i8, i8* %245, i64 %248
  %250 = sext i32 %236 to i64
  %251 = getelementptr inbounds i8, i8* %245, i64 %250
  %252 = getelementptr inbounds i8, i8* %247, i64 %248
  %253 = getelementptr inbounds i8, i8* %247, i64 %250
  %254 = load i8, i8* %249, align 1
  %255 = zext i8 %254 to i32
  %256 = mul nsw i32 %243, %255
  %257 = load i8, i8* %251, align 1
  %258 = zext i8 %257 to i32
  %259 = mul nsw i32 %209, %258
  %260 = add nuw nsw i32 %259, %256
  %261 = lshr i32 %260, 8
  %262 = load i8, i8* %252, align 1
  %263 = zext i8 %262 to i32
  %264 = mul nsw i32 %243, %263
  %265 = load i8, i8* %253, align 1
  %266 = zext i8 %265 to i32
  %267 = mul nsw i32 %209, %266
  %268 = add nuw nsw i32 %267, %264
  %269 = lshr i32 %268, 8
  %270 = and i32 %261, 255
  %271 = sub nuw nsw i32 255, %212
  %272 = mul nsw i32 %270, %271
  %273 = and i32 %269, 255
  %274 = mul nsw i32 %273, %212
  %275 = add nuw nsw i32 %274, %272
  %276 = lshr i32 %275, 8
  %277 = and i32 %276, 255
  %278 = zext i32 %277 to i64
  %279 = getelementptr inbounds [256 x i32], [256 x i32]* %3, i64 0, i64 %278
  %280 = load i32, i32* %279, align 4
  %281 = bitcast i8* %177 to i32*
  store i32 %280, i32* %281, align 4
  %282 = load i32, i32* %137, align 4
  %283 = load i32, i32* %138, align 4
  br label %284

284:                                              ; preds = %226, %221, %214, %173
  %285 = phi i32 [ %174, %221 ], [ %174, %173 ], [ %174, %214 ], [ %283, %226 ]
  %286 = phi i32 [ %175, %221 ], [ %175, %173 ], [ %175, %214 ], [ %282, %226 ]
  %287 = getelementptr inbounds i8, i8* %177, i64 %150
  %288 = add nuw nsw i32 %176, 1
  %289 = sub nsw i32 %286, %285
  %290 = icmp slt i32 %288, %289
  br i1 %290, label %173, label %167

291:                                              ; preds = %167, %98
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %4) #8
  ret void

292:                                              ; preds = %92
  %293 = getelementptr inbounds i32, i32* %87, i64 %96
  %294 = load i32, i32* %293, align 4
  %295 = getelementptr inbounds [256 x i32], [256 x i32]* %3, i64 0, i64 %96
  store i32 %294, i32* %295, align 4
  %296 = or i64 %89, 2
  %297 = icmp eq i64 %296, %85
  br i1 %297, label %91, label %298, !prof !37

298:                                              ; preds = %292
  %299 = getelementptr inbounds i32, i32* %87, i64 %296
  %300 = load i32, i32* %299, align 4
  %301 = getelementptr inbounds [256 x i32], [256 x i32]* %3, i64 0, i64 %296
  store i32 %300, i32* %301, align 8
  %302 = or i64 %89, 3
  %303 = icmp eq i64 %302, %85
  br i1 %303, label %91, label %304, !prof !37

304:                                              ; preds = %298
  %305 = getelementptr inbounds i32, i32* %87, i64 %302
  %306 = load i32, i32* %305, align 4
  %307 = getelementptr inbounds [256 x i32], [256 x i32]* %3, i64 0, i64 %302
  store i32 %306, i32* %307, align 4
  %308 = add nuw nsw i64 %89, 4
  %309 = icmp eq i64 %308, 256
  br i1 %309, label %98, label %88
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN20CFX_ImageTransformer9CalcColorERKNS_8CalcDataE12FXDIB_Formati(%class.CFX_ImageTransformer* nocapture readonly, %"struct.CFX_ImageTransformer::CalcData"* dereferenceable(32), i16 zeroext, i32) local_unnamed_addr #0 align 2 {
  %5 = bitcast %"struct.CFX_ImageTransformer::CalcData"* %1 to %class.CFX_DIBBase**
  %6 = load %class.CFX_DIBBase*, %class.CFX_DIBBase** %5, align 8
  %7 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %6, i64 0, i32 1
  %8 = load i16, i16* %7, align 8
  %9 = lshr i16 %8, 3
  %10 = and i16 %9, 31
  %11 = getelementptr inbounds %class.CFX_ImageTransformer, %class.CFX_ImageTransformer* %0, i64 0, i32 6, i32 1, i32 0, i32 0, i32 0, i32 0
  %12 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %11, align 8, !noalias !51
  %13 = icmp eq %class.CFX_DIBitmap* %12, null
  br i1 %13, label %14, label %18

14:                                               ; preds = %4
  %15 = load i16, i16* inttoptr (i64 16 to i16*), align 16
  %16 = and i16 %15, 512
  %17 = icmp eq i16 %16, 0
  br i1 %17, label %33, label %279

18:                                               ; preds = %4
  %19 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %12, i64 0, i32 0, i32 0, i32 1
  %20 = load i64, i64* %19, align 8, !noalias !51
  %21 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %12, i64 0, i32 0, i32 1
  %22 = load i16, i16* %21, align 8
  %23 = and i16 %22, 512
  %24 = icmp ne i16 %23, 0
  store i64 %20, i64* %19, align 8
  %25 = icmp eq i64 %20, 0
  br i1 %25, label %26, label %32

26:                                               ; preds = %18
  %27 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %12, i64 0, i32 0, i32 0
  %28 = bitcast %class.CFX_DIBitmap* %12 to void (%"class.fxcrt::Retainable"*)***
  %29 = load void (%"class.fxcrt::Retainable"*)**, void (%"class.fxcrt::Retainable"*)*** %28, align 8
  %30 = getelementptr inbounds void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %29, i64 1
  %31 = load void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %30, align 8
  tail call void %31(%"class.fxcrt::Retainable"* nonnull %27) #8
  br i1 %24, label %279, label %33

32:                                               ; preds = %18
  br i1 %24, label %279, label %33

33:                                               ; preds = %14, %26, %32
  %34 = getelementptr inbounds %"struct.CFX_ImageTransformer::CalcData", %"struct.CFX_ImageTransformer::CalcData"* %1, i64 0, i32 1
  %35 = load %class.CFX_Matrix*, %class.CFX_Matrix** %34, align 8
  %36 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %35, i64 0, i32 0
  %37 = load float, float* %36, align 4
  %38 = fmul float %37, 2.560000e+02
  %39 = tail call i32 @FXSYS_roundf(float %38) #8
  %40 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %35, i64 0, i32 1
  %41 = load float, float* %40, align 4
  %42 = fmul float %41, 2.560000e+02
  %43 = tail call i32 @FXSYS_roundf(float %42) #8
  %44 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %35, i64 0, i32 2
  %45 = load float, float* %44, align 4
  %46 = fmul float %45, 2.560000e+02
  %47 = tail call i32 @FXSYS_roundf(float %46) #8
  %48 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %35, i64 0, i32 3
  %49 = load float, float* %48, align 4
  %50 = fmul float %49, 2.560000e+02
  %51 = tail call i32 @FXSYS_roundf(float %50) #8
  %52 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %35, i64 0, i32 4
  %53 = load float, float* %52, align 4
  %54 = fmul float %53, 2.560000e+02
  %55 = tail call i32 @FXSYS_roundf(float %54) #8
  %56 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %35, i64 0, i32 5
  %57 = load float, float* %56, align 4
  %58 = fmul float %57, 2.560000e+02
  %59 = tail call i32 @FXSYS_roundf(float %58) #8
  %60 = getelementptr inbounds %class.CFX_ImageTransformer, %class.CFX_ImageTransformer* %0, i64 0, i32 3, i32 3
  %61 = load i32, i32* %60, align 4
  %62 = getelementptr inbounds %class.CFX_ImageTransformer, %class.CFX_ImageTransformer* %0, i64 0, i32 3, i32 1
  %63 = load i32, i32* %62, align 4
  %64 = icmp sgt i32 %61, %63
  br i1 %64, label %65, label %802

65:                                               ; preds = %33
  %66 = getelementptr inbounds %class.CFX_ImageTransformer, %class.CFX_ImageTransformer* %0, i64 0, i32 3, i32 2
  %67 = getelementptr inbounds %class.CFX_ImageTransformer, %class.CFX_ImageTransformer* %0, i64 0, i32 3, i32 0
  %68 = sitofp i32 %39 to float
  %69 = sitofp i32 %47 to float
  %70 = sitofp i32 %55 to float
  %71 = sitofp i32 %43 to float
  %72 = sitofp i32 %51 to float
  %73 = sitofp i32 %59 to float
  %74 = getelementptr inbounds %class.CFX_ImageTransformer, %class.CFX_ImageTransformer* %0, i64 0, i32 2, i32 2
  %75 = getelementptr inbounds %class.CFX_ImageTransformer, %class.CFX_ImageTransformer* %0, i64 0, i32 2, i32 0
  %76 = getelementptr inbounds %class.CFX_ImageTransformer, %class.CFX_ImageTransformer* %0, i64 0, i32 2, i32 3
  %77 = getelementptr inbounds %class.CFX_ImageTransformer, %class.CFX_ImageTransformer* %0, i64 0, i32 2, i32 1
  %78 = getelementptr inbounds %"struct.CFX_ImageTransformer::CalcData", %"struct.CFX_ImageTransformer::CalcData"* %1, i64 0, i32 3
  %79 = zext i16 %10 to i64
  %80 = getelementptr inbounds %"struct.CFX_ImageTransformer::CalcData", %"struct.CFX_ImageTransformer::CalcData"* %1, i64 0, i32 2
  br label %81

81:                                               ; preds = %96, %65
  %82 = phi i32 [ 0, %65 ], [ %97, %96 ]
  %83 = load %class.CFX_DIBBase*, %class.CFX_DIBBase** %5, align 8
  %84 = bitcast %class.CFX_DIBBase* %83 to i8* (%class.CFX_DIBBase*, i32)***
  %85 = load i8* (%class.CFX_DIBBase*, i32)**, i8* (%class.CFX_DIBBase*, i32)*** %84, align 8
  %86 = getelementptr inbounds i8* (%class.CFX_DIBBase*, i32)*, i8* (%class.CFX_DIBBase*, i32)** %85, i64 3
  %87 = load i8* (%class.CFX_DIBBase*, i32)*, i8* (%class.CFX_DIBBase*, i32)** %86, align 8
  %88 = tail call i8* %87(%class.CFX_DIBBase* %83, i32 %82) #8
  %89 = load i32, i32* %66, align 4
  %90 = load i32, i32* %67, align 4
  %91 = icmp sgt i32 %89, %90
  br i1 %91, label %92, label %96

92:                                               ; preds = %81
  %93 = sitofp i32 %82 to float
  %94 = fmul float %69, %93
  %95 = fmul float %72, %93
  br label %102

96:                                               ; preds = %272, %81
  %97 = add nuw nsw i32 %82, 1
  %98 = load i32, i32* %60, align 4
  %99 = load i32, i32* %62, align 4
  %100 = sub nsw i32 %98, %99
  %101 = icmp slt i32 %97, %100
  br i1 %101, label %81, label %802

102:                                              ; preds = %272, %92
  %103 = phi i32 [ %90, %92 ], [ %273, %272 ]
  %104 = phi i32 [ %89, %92 ], [ %274, %272 ]
  %105 = phi i32 [ 0, %92 ], [ %276, %272 ]
  %106 = phi i8* [ %88, %92 ], [ %275, %272 ]
  %107 = sitofp i32 %105 to float
  %108 = fmul float %68, %107
  %109 = fadd float %94, %108
  %110 = fadd float %109, %70
  %111 = fadd float %110, 1.280000e+02
  %112 = fmul float %71, %107
  %113 = fadd float %95, %112
  %114 = fadd float %113, %73
  %115 = fadd float %114, 1.280000e+02
  %116 = fmul float %111, 3.906250e-03
  %117 = fcmp ult float %116, 0xC1E0000000000000
  %118 = fcmp ugt float %116, 0x41DFFFFFE0000000
  %119 = fcmp ogt float %116, 0xC1E0000000000000
  %120 = select i1 %119, float %116, float 0xC1E0000000000000
  %121 = fptosi float %120 to i32
  %122 = select i1 %117, i32 0, i32 2147483647
  %123 = select i1 %118, i32 %122, i32 %121
  %124 = fmul float %115, 3.906250e-03
  %125 = fcmp ult float %124, 0xC1E0000000000000
  %126 = fcmp ugt float %124, 0x41DFFFFFE0000000
  %127 = fcmp ogt float %124, 0xC1E0000000000000
  %128 = select i1 %127, float %124, float 0xC1E0000000000000
  %129 = fptosi float %128 to i32
  %130 = select i1 %125, i32 0, i32 2147483647
  %131 = select i1 %126, i32 %130, i32 %129
  %132 = fptosi float %111 to i32
  %133 = srem i32 %132, 256
  %134 = fptosi float %115 to i32
  %135 = srem i32 %134, 256
  %136 = icmp ugt i32 %133, -256
  %137 = add nsw i32 %133, 256
  %138 = select i1 %136, i32 %137, i32 %133
  %139 = icmp ugt i32 %135, -256
  %140 = add nsw i32 %135, 256
  %141 = select i1 %139, i32 %140, i32 %135
  %142 = icmp sgt i32 %123, -1
  br i1 %142, label %143, label %272, !prof !36

143:                                              ; preds = %102
  %144 = load i32, i32* %74, align 4
  %145 = load i32, i32* %75, align 4
  %146 = sub nsw i32 %144, %145
  %147 = icmp sge i32 %146, %123
  %148 = icmp sgt i32 %131, -1
  %149 = and i1 %148, %147
  br i1 %149, label %150, label %272, !prof !36

150:                                              ; preds = %143
  %151 = load i32, i32* %76, align 4
  %152 = load i32, i32* %77, align 4
  %153 = sub nsw i32 %151, %152
  %154 = icmp slt i32 %153, %131
  br i1 %154, label %272, label %155, !prof !37

155:                                              ; preds = %150
  %156 = icmp eq i32 %123, %146
  %157 = zext i1 %156 to i32
  %158 = sub nsw i32 %123, %157
  %159 = icmp eq i32 %131, %153
  %160 = zext i1 %159 to i32
  %161 = sub nsw i32 %131, %160
  %162 = add nsw i32 %158, 1
  %163 = add nsw i32 %161, 1
  %164 = icmp eq i32 %162, %146
  %165 = select i1 %164, i32 %158, i32 %162
  %166 = icmp eq i32 %163, %153
  %167 = select i1 %166, i32 %161, i32 %163
  %168 = load i32, i32* %78, align 8
  %169 = mul i32 %168, %161
  %170 = mul i32 %168, %167
  %171 = load i8*, i8** %80, align 8
  %172 = sub nuw nsw i32 255, %138
  %173 = mul nsw i32 %158, %3
  %174 = mul nsw i32 %165, %3
  %175 = sext i32 %169 to i64
  %176 = getelementptr inbounds i8, i8* %171, i64 %175
  %177 = sext i32 %170 to i64
  %178 = getelementptr inbounds i8, i8* %171, i64 %177
  %179 = sext i32 %173 to i64
  %180 = getelementptr inbounds i8, i8* %176, i64 %179
  %181 = sext i32 %174 to i64
  %182 = getelementptr inbounds i8, i8* %176, i64 %181
  %183 = getelementptr inbounds i8, i8* %178, i64 %179
  %184 = getelementptr inbounds i8, i8* %178, i64 %181
  %185 = load i8, i8* %180, align 1
  %186 = zext i8 %185 to i32
  %187 = mul nsw i32 %172, %186
  %188 = load i8, i8* %182, align 1
  %189 = zext i8 %188 to i32
  %190 = mul nsw i32 %138, %189
  %191 = add nuw nsw i32 %190, %187
  %192 = lshr i32 %191, 8
  %193 = load i8, i8* %183, align 1
  %194 = zext i8 %193 to i32
  %195 = mul nsw i32 %172, %194
  %196 = load i8, i8* %184, align 1
  %197 = zext i8 %196 to i32
  %198 = mul nsw i32 %138, %197
  %199 = add nuw nsw i32 %198, %195
  %200 = lshr i32 %199, 8
  %201 = and i32 %192, 255
  %202 = sub nuw nsw i32 255, %141
  %203 = mul nsw i32 %201, %202
  %204 = and i32 %200, 255
  %205 = mul nsw i32 %204, %141
  %206 = add nuw nsw i32 %205, %203
  %207 = lshr i32 %206, 8
  %208 = getelementptr inbounds i8, i8* %176, i64 1
  %209 = getelementptr inbounds i8, i8* %178, i64 1
  %210 = getelementptr inbounds i8, i8* %208, i64 %179
  %211 = getelementptr inbounds i8, i8* %208, i64 %181
  %212 = getelementptr inbounds i8, i8* %209, i64 %179
  %213 = getelementptr inbounds i8, i8* %209, i64 %181
  %214 = load i8, i8* %210, align 1
  %215 = zext i8 %214 to i32
  %216 = mul nsw i32 %172, %215
  %217 = load i8, i8* %211, align 1
  %218 = zext i8 %217 to i32
  %219 = mul nsw i32 %138, %218
  %220 = add nuw nsw i32 %219, %216
  %221 = lshr i32 %220, 8
  %222 = load i8, i8* %212, align 1
  %223 = zext i8 %222 to i32
  %224 = mul nsw i32 %172, %223
  %225 = load i8, i8* %213, align 1
  %226 = zext i8 %225 to i32
  %227 = mul nsw i32 %138, %226
  %228 = add nuw nsw i32 %227, %224
  %229 = lshr i32 %228, 8
  %230 = and i32 %221, 255
  %231 = mul nsw i32 %230, %202
  %232 = and i32 %229, 255
  %233 = mul nsw i32 %232, %141
  %234 = add nuw nsw i32 %233, %231
  %235 = getelementptr inbounds i8, i8* %176, i64 2
  %236 = getelementptr inbounds i8, i8* %178, i64 2
  %237 = getelementptr inbounds i8, i8* %235, i64 %179
  %238 = getelementptr inbounds i8, i8* %235, i64 %181
  %239 = getelementptr inbounds i8, i8* %236, i64 %179
  %240 = getelementptr inbounds i8, i8* %236, i64 %181
  %241 = load i8, i8* %237, align 1
  %242 = zext i8 %241 to i32
  %243 = mul nsw i32 %172, %242
  %244 = load i8, i8* %238, align 1
  %245 = zext i8 %244 to i32
  %246 = mul nsw i32 %138, %245
  %247 = add nuw nsw i32 %246, %243
  %248 = lshr i32 %247, 8
  %249 = load i8, i8* %239, align 1
  %250 = zext i8 %249 to i32
  %251 = mul nsw i32 %172, %250
  %252 = load i8, i8* %240, align 1
  %253 = zext i8 %252 to i32
  %254 = mul nsw i32 %138, %253
  %255 = add nuw nsw i32 %254, %251
  %256 = lshr i32 %255, 8
  %257 = and i32 %248, 255
  %258 = mul nsw i32 %257, %202
  %259 = and i32 %256, 255
  %260 = mul nsw i32 %259, %141
  %261 = add nuw nsw i32 %260, %258
  %262 = and i32 %234, 65280
  %263 = and i32 %207, 255
  %264 = shl nsw i32 %261, 8
  %265 = and i32 %264, 16711680
  %266 = or i32 %263, %262
  %267 = or i32 %266, %265
  %268 = or i32 %267, -16777216
  %269 = bitcast i8* %106 to i32*
  store i32 %268, i32* %269, align 4
  %270 = load i32, i32* %66, align 4
  %271 = load i32, i32* %67, align 4
  br label %272

272:                                              ; preds = %155, %150, %143, %102
  %273 = phi i32 [ %103, %150 ], [ %103, %102 ], [ %103, %143 ], [ %271, %155 ]
  %274 = phi i32 [ %104, %150 ], [ %104, %102 ], [ %104, %143 ], [ %270, %155 ]
  %275 = getelementptr inbounds i8, i8* %106, i64 %79
  %276 = add nuw nsw i32 %105, 1
  %277 = sub nsw i32 %274, %273
  %278 = icmp slt i32 %276, %277
  br i1 %278, label %102, label %96

279:                                              ; preds = %14, %26, %32
  %280 = icmp eq i16 %2, 544
  %281 = getelementptr inbounds %class.CFX_ImageTransformer, %class.CFX_ImageTransformer* %0, i64 0, i32 3
  %282 = getelementptr inbounds %class.CFX_ImageTransformer, %class.CFX_ImageTransformer* %0, i64 0, i32 2
  %283 = getelementptr inbounds %"struct.CFX_ImageTransformer::CalcData", %"struct.CFX_ImageTransformer::CalcData"* %1, i64 0, i32 1
  %284 = load %class.CFX_Matrix*, %class.CFX_Matrix** %283, align 8
  %285 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %284, i64 0, i32 0
  %286 = load float, float* %285, align 4
  %287 = fmul float %286, 2.560000e+02
  %288 = tail call i32 @FXSYS_roundf(float %287) #8
  %289 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %284, i64 0, i32 1
  %290 = load float, float* %289, align 4
  %291 = fmul float %290, 2.560000e+02
  %292 = tail call i32 @FXSYS_roundf(float %291) #8
  %293 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %284, i64 0, i32 2
  %294 = load float, float* %293, align 4
  %295 = fmul float %294, 2.560000e+02
  %296 = tail call i32 @FXSYS_roundf(float %295) #8
  %297 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %284, i64 0, i32 3
  %298 = load float, float* %297, align 4
  %299 = fmul float %298, 2.560000e+02
  %300 = tail call i32 @FXSYS_roundf(float %299) #8
  %301 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %284, i64 0, i32 4
  %302 = load float, float* %301, align 4
  %303 = fmul float %302, 2.560000e+02
  %304 = tail call i32 @FXSYS_roundf(float %303) #8
  %305 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %284, i64 0, i32 5
  %306 = load float, float* %305, align 4
  %307 = fmul float %306, 2.560000e+02
  %308 = tail call i32 @FXSYS_roundf(float %307) #8
  %309 = getelementptr inbounds %class.CFX_ImageTransformer, %class.CFX_ImageTransformer* %0, i64 0, i32 3, i32 3
  %310 = load i32, i32* %309, align 4
  %311 = getelementptr inbounds %class.CFX_ImageTransformer, %class.CFX_ImageTransformer* %0, i64 0, i32 3, i32 1
  %312 = load i32, i32* %311, align 4
  %313 = icmp sgt i32 %310, %312
  br i1 %280, label %314, label %558

314:                                              ; preds = %279
  br i1 %313, label %315, label %802

315:                                              ; preds = %314
  %316 = getelementptr inbounds %class.CFX_ImageTransformer, %class.CFX_ImageTransformer* %0, i64 0, i32 3, i32 2
  %317 = getelementptr inbounds %struct.FX_RECT, %struct.FX_RECT* %281, i64 0, i32 0
  %318 = sitofp i32 %288 to float
  %319 = sitofp i32 %296 to float
  %320 = sitofp i32 %304 to float
  %321 = sitofp i32 %292 to float
  %322 = sitofp i32 %300 to float
  %323 = sitofp i32 %308 to float
  %324 = getelementptr inbounds %class.CFX_ImageTransformer, %class.CFX_ImageTransformer* %0, i64 0, i32 2, i32 2
  %325 = getelementptr inbounds %struct.FX_RECT, %struct.FX_RECT* %282, i64 0, i32 0
  %326 = getelementptr inbounds %class.CFX_ImageTransformer, %class.CFX_ImageTransformer* %0, i64 0, i32 2, i32 3
  %327 = getelementptr inbounds %class.CFX_ImageTransformer, %class.CFX_ImageTransformer* %0, i64 0, i32 2, i32 1
  %328 = getelementptr inbounds %"struct.CFX_ImageTransformer::CalcData", %"struct.CFX_ImageTransformer::CalcData"* %1, i64 0, i32 3
  %329 = zext i16 %10 to i64
  %330 = getelementptr inbounds %"struct.CFX_ImageTransformer::CalcData", %"struct.CFX_ImageTransformer::CalcData"* %1, i64 0, i32 2
  br label %331

331:                                              ; preds = %346, %315
  %332 = phi i32 [ 0, %315 ], [ %347, %346 ]
  %333 = load %class.CFX_DIBBase*, %class.CFX_DIBBase** %5, align 8
  %334 = bitcast %class.CFX_DIBBase* %333 to i8* (%class.CFX_DIBBase*, i32)***
  %335 = load i8* (%class.CFX_DIBBase*, i32)**, i8* (%class.CFX_DIBBase*, i32)*** %334, align 8
  %336 = getelementptr inbounds i8* (%class.CFX_DIBBase*, i32)*, i8* (%class.CFX_DIBBase*, i32)** %335, i64 3
  %337 = load i8* (%class.CFX_DIBBase*, i32)*, i8* (%class.CFX_DIBBase*, i32)** %336, align 8
  %338 = tail call i8* %337(%class.CFX_DIBBase* %333, i32 %332) #8
  %339 = load i32, i32* %316, align 4
  %340 = load i32, i32* %317, align 4
  %341 = icmp sgt i32 %339, %340
  br i1 %341, label %342, label %346

342:                                              ; preds = %331
  %343 = sitofp i32 %332 to float
  %344 = fmul float %319, %343
  %345 = fmul float %322, %343
  br label %352

346:                                              ; preds = %551, %331
  %347 = add nuw nsw i32 %332, 1
  %348 = load i32, i32* %309, align 4
  %349 = load i32, i32* %311, align 4
  %350 = sub nsw i32 %348, %349
  %351 = icmp slt i32 %347, %350
  br i1 %351, label %331, label %802

352:                                              ; preds = %551, %342
  %353 = phi i32 [ %340, %342 ], [ %552, %551 ]
  %354 = phi i32 [ %339, %342 ], [ %553, %551 ]
  %355 = phi i32 [ 0, %342 ], [ %555, %551 ]
  %356 = phi i8* [ %338, %342 ], [ %554, %551 ]
  %357 = sitofp i32 %355 to float
  %358 = fmul float %318, %357
  %359 = fadd float %344, %358
  %360 = fadd float %359, %320
  %361 = fadd float %360, 1.280000e+02
  %362 = fmul float %321, %357
  %363 = fadd float %345, %362
  %364 = fadd float %363, %323
  %365 = fadd float %364, 1.280000e+02
  %366 = fmul float %361, 3.906250e-03
  %367 = fcmp ult float %366, 0xC1E0000000000000
  %368 = fcmp ugt float %366, 0x41DFFFFFE0000000
  %369 = fcmp ogt float %366, 0xC1E0000000000000
  %370 = select i1 %369, float %366, float 0xC1E0000000000000
  %371 = fptosi float %370 to i32
  %372 = select i1 %367, i32 0, i32 2147483647
  %373 = select i1 %368, i32 %372, i32 %371
  %374 = fmul float %365, 3.906250e-03
  %375 = fcmp ult float %374, 0xC1E0000000000000
  %376 = fcmp ugt float %374, 0x41DFFFFFE0000000
  %377 = fcmp ogt float %374, 0xC1E0000000000000
  %378 = select i1 %377, float %374, float 0xC1E0000000000000
  %379 = fptosi float %378 to i32
  %380 = select i1 %375, i32 0, i32 2147483647
  %381 = select i1 %376, i32 %380, i32 %379
  %382 = fptosi float %361 to i32
  %383 = srem i32 %382, 256
  %384 = fptosi float %365 to i32
  %385 = srem i32 %384, 256
  %386 = icmp ugt i32 %383, -256
  %387 = add nsw i32 %383, 256
  %388 = select i1 %386, i32 %387, i32 %383
  %389 = icmp ugt i32 %385, -256
  %390 = add nsw i32 %385, 256
  %391 = select i1 %389, i32 %390, i32 %385
  %392 = icmp sgt i32 %373, -1
  br i1 %392, label %393, label %551, !prof !36

393:                                              ; preds = %352
  %394 = load i32, i32* %324, align 4
  %395 = load i32, i32* %325, align 4
  %396 = sub nsw i32 %394, %395
  %397 = icmp sge i32 %396, %373
  %398 = icmp sgt i32 %381, -1
  %399 = and i1 %398, %397
  br i1 %399, label %400, label %551, !prof !36

400:                                              ; preds = %393
  %401 = load i32, i32* %326, align 4
  %402 = load i32, i32* %327, align 4
  %403 = sub nsw i32 %401, %402
  %404 = icmp slt i32 %403, %381
  br i1 %404, label %551, label %405, !prof !37

405:                                              ; preds = %400
  %406 = icmp eq i32 %373, %396
  %407 = zext i1 %406 to i32
  %408 = sub nsw i32 %373, %407
  %409 = icmp eq i32 %381, %403
  %410 = zext i1 %409 to i32
  %411 = sub nsw i32 %381, %410
  %412 = add nsw i32 %408, 1
  %413 = add nsw i32 %411, 1
  %414 = icmp eq i32 %412, %396
  %415 = select i1 %414, i32 %408, i32 %412
  %416 = icmp eq i32 %413, %403
  %417 = select i1 %416, i32 %411, i32 %413
  %418 = load i32, i32* %328, align 8
  %419 = mul i32 %418, %411
  %420 = mul i32 %418, %417
  %421 = load i8*, i8** %330, align 8
  %422 = sub nuw nsw i32 255, %388
  %423 = mul nsw i32 %408, %3
  %424 = mul nsw i32 %415, %3
  %425 = sext i32 %419 to i64
  %426 = getelementptr inbounds i8, i8* %421, i64 %425
  %427 = sext i32 %420 to i64
  %428 = getelementptr inbounds i8, i8* %421, i64 %427
  %429 = sext i32 %423 to i64
  %430 = getelementptr inbounds i8, i8* %426, i64 %429
  %431 = sext i32 %424 to i64
  %432 = getelementptr inbounds i8, i8* %426, i64 %431
  %433 = getelementptr inbounds i8, i8* %428, i64 %429
  %434 = getelementptr inbounds i8, i8* %428, i64 %431
  %435 = load i8, i8* %430, align 1
  %436 = zext i8 %435 to i32
  %437 = mul nsw i32 %422, %436
  %438 = load i8, i8* %432, align 1
  %439 = zext i8 %438 to i32
  %440 = mul nsw i32 %388, %439
  %441 = add nuw nsw i32 %440, %437
  %442 = lshr i32 %441, 8
  %443 = load i8, i8* %433, align 1
  %444 = zext i8 %443 to i32
  %445 = mul nsw i32 %422, %444
  %446 = load i8, i8* %434, align 1
  %447 = zext i8 %446 to i32
  %448 = mul nsw i32 %388, %447
  %449 = add nuw nsw i32 %448, %445
  %450 = lshr i32 %449, 8
  %451 = and i32 %442, 255
  %452 = sub nuw nsw i32 255, %391
  %453 = mul nsw i32 %451, %452
  %454 = and i32 %450, 255
  %455 = mul nsw i32 %454, %391
  %456 = add nuw nsw i32 %455, %453
  %457 = lshr i32 %456, 8
  %458 = getelementptr inbounds i8, i8* %426, i64 1
  %459 = getelementptr inbounds i8, i8* %428, i64 1
  %460 = getelementptr inbounds i8, i8* %458, i64 %429
  %461 = getelementptr inbounds i8, i8* %458, i64 %431
  %462 = getelementptr inbounds i8, i8* %459, i64 %429
  %463 = getelementptr inbounds i8, i8* %459, i64 %431
  %464 = load i8, i8* %460, align 1
  %465 = zext i8 %464 to i32
  %466 = mul nsw i32 %422, %465
  %467 = load i8, i8* %461, align 1
  %468 = zext i8 %467 to i32
  %469 = mul nsw i32 %388, %468
  %470 = add nuw nsw i32 %469, %466
  %471 = lshr i32 %470, 8
  %472 = load i8, i8* %462, align 1
  %473 = zext i8 %472 to i32
  %474 = mul nsw i32 %422, %473
  %475 = load i8, i8* %463, align 1
  %476 = zext i8 %475 to i32
  %477 = mul nsw i32 %388, %476
  %478 = add nuw nsw i32 %477, %474
  %479 = lshr i32 %478, 8
  %480 = and i32 %471, 255
  %481 = mul nsw i32 %480, %452
  %482 = and i32 %479, 255
  %483 = mul nsw i32 %482, %391
  %484 = add nuw nsw i32 %483, %481
  %485 = getelementptr inbounds i8, i8* %426, i64 2
  %486 = getelementptr inbounds i8, i8* %428, i64 2
  %487 = getelementptr inbounds i8, i8* %485, i64 %429
  %488 = getelementptr inbounds i8, i8* %485, i64 %431
  %489 = getelementptr inbounds i8, i8* %486, i64 %429
  %490 = getelementptr inbounds i8, i8* %486, i64 %431
  %491 = load i8, i8* %487, align 1
  %492 = zext i8 %491 to i32
  %493 = mul nsw i32 %422, %492
  %494 = load i8, i8* %488, align 1
  %495 = zext i8 %494 to i32
  %496 = mul nsw i32 %388, %495
  %497 = add nuw nsw i32 %496, %493
  %498 = lshr i32 %497, 8
  %499 = load i8, i8* %489, align 1
  %500 = zext i8 %499 to i32
  %501 = mul nsw i32 %422, %500
  %502 = load i8, i8* %490, align 1
  %503 = zext i8 %502 to i32
  %504 = mul nsw i32 %388, %503
  %505 = add nuw nsw i32 %504, %501
  %506 = lshr i32 %505, 8
  %507 = and i32 %498, 255
  %508 = mul nsw i32 %507, %452
  %509 = and i32 %506, 255
  %510 = mul nsw i32 %509, %391
  %511 = add nuw nsw i32 %510, %508
  %512 = getelementptr inbounds i8, i8* %426, i64 3
  %513 = getelementptr inbounds i8, i8* %428, i64 3
  %514 = getelementptr inbounds i8, i8* %512, i64 %429
  %515 = getelementptr inbounds i8, i8* %512, i64 %431
  %516 = getelementptr inbounds i8, i8* %513, i64 %429
  %517 = getelementptr inbounds i8, i8* %513, i64 %431
  %518 = load i8, i8* %514, align 1
  %519 = zext i8 %518 to i32
  %520 = mul nsw i32 %422, %519
  %521 = load i8, i8* %515, align 1
  %522 = zext i8 %521 to i32
  %523 = mul nsw i32 %388, %522
  %524 = add nuw nsw i32 %523, %520
  %525 = lshr i32 %524, 8
  %526 = load i8, i8* %516, align 1
  %527 = zext i8 %526 to i32
  %528 = mul nsw i32 %422, %527
  %529 = load i8, i8* %517, align 1
  %530 = zext i8 %529 to i32
  %531 = mul nsw i32 %388, %530
  %532 = add nuw nsw i32 %531, %528
  %533 = lshr i32 %532, 8
  %534 = and i32 %525, 255
  %535 = mul nsw i32 %534, %452
  %536 = and i32 %533, 255
  %537 = mul nsw i32 %536, %391
  %538 = add nuw nsw i32 %537, %535
  %539 = lshr i32 %538, 8
  %540 = and i32 %484, 65280
  %541 = and i32 %457, 255
  %542 = shl i32 %539, 24
  %543 = shl nsw i32 %511, 8
  %544 = and i32 %543, 16711680
  %545 = or i32 %540, %541
  %546 = or i32 %545, %544
  %547 = or i32 %546, %542
  %548 = bitcast i8* %356 to i32*
  store i32 %547, i32* %548, align 4
  %549 = load i32, i32* %316, align 4
  %550 = load i32, i32* %317, align 4
  br label %551

551:                                              ; preds = %405, %400, %393, %352
  %552 = phi i32 [ %353, %400 ], [ %353, %352 ], [ %353, %393 ], [ %550, %405 ]
  %553 = phi i32 [ %354, %400 ], [ %354, %352 ], [ %354, %393 ], [ %549, %405 ]
  %554 = getelementptr inbounds i8, i8* %356, i64 %329
  %555 = add nuw nsw i32 %355, 1
  %556 = sub nsw i32 %553, %552
  %557 = icmp slt i32 %555, %556
  br i1 %557, label %352, label %346

558:                                              ; preds = %279
  br i1 %313, label %559, label %802

559:                                              ; preds = %558
  %560 = getelementptr inbounds %class.CFX_ImageTransformer, %class.CFX_ImageTransformer* %0, i64 0, i32 3, i32 2
  %561 = getelementptr inbounds %struct.FX_RECT, %struct.FX_RECT* %281, i64 0, i32 0
  %562 = sitofp i32 %288 to float
  %563 = sitofp i32 %296 to float
  %564 = sitofp i32 %304 to float
  %565 = sitofp i32 %292 to float
  %566 = sitofp i32 %300 to float
  %567 = sitofp i32 %308 to float
  %568 = getelementptr inbounds %class.CFX_ImageTransformer, %class.CFX_ImageTransformer* %0, i64 0, i32 2, i32 2
  %569 = getelementptr inbounds %struct.FX_RECT, %struct.FX_RECT* %282, i64 0, i32 0
  %570 = getelementptr inbounds %class.CFX_ImageTransformer, %class.CFX_ImageTransformer* %0, i64 0, i32 2, i32 3
  %571 = getelementptr inbounds %class.CFX_ImageTransformer, %class.CFX_ImageTransformer* %0, i64 0, i32 2, i32 1
  %572 = getelementptr inbounds %"struct.CFX_ImageTransformer::CalcData", %"struct.CFX_ImageTransformer::CalcData"* %1, i64 0, i32 3
  %573 = zext i16 %10 to i64
  %574 = getelementptr inbounds %"struct.CFX_ImageTransformer::CalcData", %"struct.CFX_ImageTransformer::CalcData"* %1, i64 0, i32 2
  br label %575

575:                                              ; preds = %590, %559
  %576 = phi i32 [ 0, %559 ], [ %591, %590 ]
  %577 = load %class.CFX_DIBBase*, %class.CFX_DIBBase** %5, align 8
  %578 = bitcast %class.CFX_DIBBase* %577 to i8* (%class.CFX_DIBBase*, i32)***
  %579 = load i8* (%class.CFX_DIBBase*, i32)**, i8* (%class.CFX_DIBBase*, i32)*** %578, align 8
  %580 = getelementptr inbounds i8* (%class.CFX_DIBBase*, i32)*, i8* (%class.CFX_DIBBase*, i32)** %579, i64 3
  %581 = load i8* (%class.CFX_DIBBase*, i32)*, i8* (%class.CFX_DIBBase*, i32)** %580, align 8
  %582 = tail call i8* %581(%class.CFX_DIBBase* %577, i32 %576) #8
  %583 = load i32, i32* %560, align 4
  %584 = load i32, i32* %561, align 4
  %585 = icmp sgt i32 %583, %584
  br i1 %585, label %586, label %590

586:                                              ; preds = %575
  %587 = sitofp i32 %576 to float
  %588 = fmul float %563, %587
  %589 = fmul float %566, %587
  br label %596

590:                                              ; preds = %795, %575
  %591 = add nuw nsw i32 %576, 1
  %592 = load i32, i32* %309, align 4
  %593 = load i32, i32* %311, align 4
  %594 = sub nsw i32 %592, %593
  %595 = icmp slt i32 %591, %594
  br i1 %595, label %575, label %802

596:                                              ; preds = %795, %586
  %597 = phi i32 [ %584, %586 ], [ %796, %795 ]
  %598 = phi i32 [ %583, %586 ], [ %797, %795 ]
  %599 = phi i32 [ 0, %586 ], [ %799, %795 ]
  %600 = phi i8* [ %582, %586 ], [ %798, %795 ]
  %601 = sitofp i32 %599 to float
  %602 = fmul float %562, %601
  %603 = fadd float %588, %602
  %604 = fadd float %603, %564
  %605 = fadd float %604, 1.280000e+02
  %606 = fmul float %565, %601
  %607 = fadd float %589, %606
  %608 = fadd float %607, %567
  %609 = fadd float %608, 1.280000e+02
  %610 = fmul float %605, 3.906250e-03
  %611 = fcmp ult float %610, 0xC1E0000000000000
  %612 = fcmp ugt float %610, 0x41DFFFFFE0000000
  %613 = fcmp ogt float %610, 0xC1E0000000000000
  %614 = select i1 %613, float %610, float 0xC1E0000000000000
  %615 = fptosi float %614 to i32
  %616 = select i1 %611, i32 0, i32 2147483647
  %617 = select i1 %612, i32 %616, i32 %615
  %618 = fmul float %609, 3.906250e-03
  %619 = fcmp ult float %618, 0xC1E0000000000000
  %620 = fcmp ugt float %618, 0x41DFFFFFE0000000
  %621 = fcmp ogt float %618, 0xC1E0000000000000
  %622 = select i1 %621, float %618, float 0xC1E0000000000000
  %623 = fptosi float %622 to i32
  %624 = select i1 %619, i32 0, i32 2147483647
  %625 = select i1 %620, i32 %624, i32 %623
  %626 = fptosi float %605 to i32
  %627 = srem i32 %626, 256
  %628 = fptosi float %609 to i32
  %629 = srem i32 %628, 256
  %630 = icmp ugt i32 %627, -256
  %631 = add nsw i32 %627, 256
  %632 = select i1 %630, i32 %631, i32 %627
  %633 = icmp ugt i32 %629, -256
  %634 = add nsw i32 %629, 256
  %635 = select i1 %633, i32 %634, i32 %629
  %636 = icmp sgt i32 %617, -1
  br i1 %636, label %637, label %795, !prof !36

637:                                              ; preds = %596
  %638 = load i32, i32* %568, align 4
  %639 = load i32, i32* %569, align 4
  %640 = sub nsw i32 %638, %639
  %641 = icmp sge i32 %640, %617
  %642 = icmp sgt i32 %625, -1
  %643 = and i1 %642, %641
  br i1 %643, label %644, label %795, !prof !36

644:                                              ; preds = %637
  %645 = load i32, i32* %570, align 4
  %646 = load i32, i32* %571, align 4
  %647 = sub nsw i32 %645, %646
  %648 = icmp slt i32 %647, %625
  br i1 %648, label %795, label %649, !prof !37

649:                                              ; preds = %644
  %650 = icmp eq i32 %617, %640
  %651 = zext i1 %650 to i32
  %652 = sub nsw i32 %617, %651
  %653 = icmp eq i32 %625, %647
  %654 = zext i1 %653 to i32
  %655 = sub nsw i32 %625, %654
  %656 = add nsw i32 %652, 1
  %657 = add nsw i32 %655, 1
  %658 = icmp eq i32 %656, %640
  %659 = select i1 %658, i32 %652, i32 %656
  %660 = icmp eq i32 %657, %647
  %661 = select i1 %660, i32 %655, i32 %657
  %662 = load i32, i32* %572, align 8
  %663 = mul i32 %662, %655
  %664 = mul i32 %662, %661
  %665 = load i8*, i8** %574, align 8
  %666 = sub nuw nsw i32 255, %632
  %667 = mul nsw i32 %652, %3
  %668 = mul nsw i32 %659, %3
  %669 = sext i32 %663 to i64
  %670 = getelementptr inbounds i8, i8* %665, i64 %669
  %671 = sext i32 %664 to i64
  %672 = getelementptr inbounds i8, i8* %665, i64 %671
  %673 = sext i32 %667 to i64
  %674 = getelementptr inbounds i8, i8* %670, i64 %673
  %675 = sext i32 %668 to i64
  %676 = getelementptr inbounds i8, i8* %670, i64 %675
  %677 = getelementptr inbounds i8, i8* %672, i64 %673
  %678 = getelementptr inbounds i8, i8* %672, i64 %675
  %679 = load i8, i8* %674, align 1
  %680 = zext i8 %679 to i32
  %681 = mul nsw i32 %666, %680
  %682 = load i8, i8* %676, align 1
  %683 = zext i8 %682 to i32
  %684 = mul nsw i32 %632, %683
  %685 = add nuw nsw i32 %684, %681
  %686 = lshr i32 %685, 8
  %687 = load i8, i8* %677, align 1
  %688 = zext i8 %687 to i32
  %689 = mul nsw i32 %666, %688
  %690 = load i8, i8* %678, align 1
  %691 = zext i8 %690 to i32
  %692 = mul nsw i32 %632, %691
  %693 = add nuw nsw i32 %692, %689
  %694 = lshr i32 %693, 8
  %695 = and i32 %686, 255
  %696 = sub nuw nsw i32 255, %635
  %697 = mul nsw i32 %695, %696
  %698 = and i32 %694, 255
  %699 = mul nsw i32 %698, %635
  %700 = add nuw nsw i32 %699, %697
  %701 = lshr i32 %700, 8
  %702 = getelementptr inbounds i8, i8* %670, i64 1
  %703 = getelementptr inbounds i8, i8* %672, i64 1
  %704 = getelementptr inbounds i8, i8* %702, i64 %673
  %705 = getelementptr inbounds i8, i8* %702, i64 %675
  %706 = getelementptr inbounds i8, i8* %703, i64 %673
  %707 = getelementptr inbounds i8, i8* %703, i64 %675
  %708 = load i8, i8* %704, align 1
  %709 = zext i8 %708 to i32
  %710 = mul nsw i32 %666, %709
  %711 = load i8, i8* %705, align 1
  %712 = zext i8 %711 to i32
  %713 = mul nsw i32 %632, %712
  %714 = add nuw nsw i32 %713, %710
  %715 = lshr i32 %714, 8
  %716 = load i8, i8* %706, align 1
  %717 = zext i8 %716 to i32
  %718 = mul nsw i32 %666, %717
  %719 = load i8, i8* %707, align 1
  %720 = zext i8 %719 to i32
  %721 = mul nsw i32 %632, %720
  %722 = add nuw nsw i32 %721, %718
  %723 = lshr i32 %722, 8
  %724 = and i32 %715, 255
  %725 = mul nsw i32 %724, %696
  %726 = and i32 %723, 255
  %727 = mul nsw i32 %726, %635
  %728 = add nuw nsw i32 %727, %725
  %729 = getelementptr inbounds i8, i8* %670, i64 2
  %730 = getelementptr inbounds i8, i8* %672, i64 2
  %731 = getelementptr inbounds i8, i8* %729, i64 %673
  %732 = getelementptr inbounds i8, i8* %729, i64 %675
  %733 = getelementptr inbounds i8, i8* %730, i64 %673
  %734 = getelementptr inbounds i8, i8* %730, i64 %675
  %735 = load i8, i8* %731, align 1
  %736 = zext i8 %735 to i32
  %737 = mul nsw i32 %666, %736
  %738 = load i8, i8* %732, align 1
  %739 = zext i8 %738 to i32
  %740 = mul nsw i32 %632, %739
  %741 = add nuw nsw i32 %740, %737
  %742 = lshr i32 %741, 8
  %743 = load i8, i8* %733, align 1
  %744 = zext i8 %743 to i32
  %745 = mul nsw i32 %666, %744
  %746 = load i8, i8* %734, align 1
  %747 = zext i8 %746 to i32
  %748 = mul nsw i32 %632, %747
  %749 = add nuw nsw i32 %748, %745
  %750 = lshr i32 %749, 8
  %751 = and i32 %742, 255
  %752 = mul nsw i32 %751, %696
  %753 = and i32 %750, 255
  %754 = mul nsw i32 %753, %635
  %755 = add nuw nsw i32 %754, %752
  %756 = getelementptr inbounds i8, i8* %670, i64 3
  %757 = getelementptr inbounds i8, i8* %672, i64 3
  %758 = getelementptr inbounds i8, i8* %756, i64 %673
  %759 = getelementptr inbounds i8, i8* %756, i64 %675
  %760 = getelementptr inbounds i8, i8* %757, i64 %673
  %761 = getelementptr inbounds i8, i8* %757, i64 %675
  %762 = load i8, i8* %758, align 1
  %763 = zext i8 %762 to i32
  %764 = mul nsw i32 %666, %763
  %765 = load i8, i8* %759, align 1
  %766 = zext i8 %765 to i32
  %767 = mul nsw i32 %632, %766
  %768 = add nuw nsw i32 %767, %764
  %769 = lshr i32 %768, 8
  %770 = load i8, i8* %760, align 1
  %771 = zext i8 %770 to i32
  %772 = mul nsw i32 %666, %771
  %773 = load i8, i8* %761, align 1
  %774 = zext i8 %773 to i32
  %775 = mul nsw i32 %632, %774
  %776 = add nuw nsw i32 %775, %772
  %777 = lshr i32 %776, 8
  %778 = and i32 %769, 255
  %779 = mul nsw i32 %778, %696
  %780 = and i32 %777, 255
  %781 = mul nsw i32 %780, %635
  %782 = add nuw nsw i32 %781, %779
  %783 = lshr i32 %782, 8
  %784 = and i32 %701, 255
  %785 = and i32 %728, 65280
  %786 = or i32 %785, %784
  %787 = shl nsw i32 %755, 8
  %788 = and i32 %787, 16711680
  %789 = or i32 %786, %788
  %790 = shl i32 %783, 24
  %791 = or i32 %789, %790
  %792 = bitcast i8* %600 to i32*
  store i32 %791, i32* %792, align 4
  %793 = load i32, i32* %560, align 4
  %794 = load i32, i32* %561, align 4
  br label %795

795:                                              ; preds = %649, %644, %637, %596
  %796 = phi i32 [ %597, %644 ], [ %597, %596 ], [ %597, %637 ], [ %794, %649 ]
  %797 = phi i32 [ %598, %644 ], [ %598, %596 ], [ %598, %637 ], [ %793, %649 ]
  %798 = getelementptr inbounds i8, i8* %600, i64 %573
  %799 = add nuw nsw i32 %599, 1
  %800 = sub nsw i32 %797, %796
  %801 = icmp slt i32 %799, %800
  br i1 %801, label %596, label %590

802:                                              ; preds = %590, %346, %96, %558, %314, %33
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN20CFX_ImageTransformer12DetachBitmapEv(%"class.fxcrt::RetainPtr.0"* noalias sret, %class.CFX_ImageTransformer*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.CFX_ImageTransformer, %class.CFX_ImageTransformer* %1, i64 0, i32 6
  tail call void @_ZN16CFX_BitmapStorer6DetachEv(%"class.fxcrt::RetainPtr.0"* sret %0, %class.CFX_BitmapStorer* %3) #8
  ret void
}

declare void @_ZN16CFX_BitmapStorer6DetachEv(%"class.fxcrt::RetainPtr.0"* sret, %class.CFX_BitmapStorer*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind readnone speculatable
declare float @llvm.fabs.f32(float) #4

; Function Attrs: nounwind readnone speculatable
declare float @llvm.ceil.f32(float) #4

; Function Attrs: nounwind readnone speculatable
declare float @llvm.floor.f32(float) #4

; Function Attrs: nofree nounwind
declare float @sqrtf(float) local_unnamed_addr #5

declare void @_ZN10CFX_Matrix9TranslateEff(%class.CFX_Matrix*, float, float) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN18CFX_ImageStretcherD1Ev(%class.CFX_ImageStretcher*) unnamed_addr #3

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #6

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #7

declare void @_ZN18CFX_ImageStretcherC1EP21ScanlineComposerIfaceRKN5fxcrt9RetainPtrI11CFX_DIBBaseEEiiRK7FX_RECTRK21FXDIB_ResampleOptions(%class.CFX_ImageStretcher*, %class.ScanlineComposerIface*, %"class.fxcrt::RetainPtr"* dereferenceable(8), i32, i32, %struct.FX_RECT* dereferenceable(16), %struct.FXDIB_ResampleOptions* dereferenceable(4)) unnamed_addr #2

declare void @_ZN12CFX_DIBitmapC1Ev(%class.CFX_DIBitmap*) unnamed_addr #2

declare i32 @FXSYS_roundf(float) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare <2 x float> @llvm.ceil.v2f32(<2 x float>) #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone speculatable }
attributes #5 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }
attributes #9 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{}
!3 = !{!4}
!4 = distinct !{!4, !5, !"_ZN16CFX_BitmapStorer9GetBitmapEv: argument 0"}
!5 = distinct !{!5, !"_ZN16CFX_BitmapStorer9GetBitmapEv"}
!6 = !{!7}
!7 = distinct !{!7, !8, !"_ZN16CFX_BitmapStorer9GetBitmapEv: argument 0"}
!8 = distinct !{!8, !"_ZN16CFX_BitmapStorer9GetBitmapEv"}
!9 = !{!10}
!10 = distinct !{!10, !11, !"_ZN16CFX_BitmapStorer9GetBitmapEv: argument 0"}
!11 = distinct !{!11, !"_ZN16CFX_BitmapStorer9GetBitmapEv"}
!12 = !{!13}
!13 = distinct !{!13, !14, !"_ZN6pdfium10MakeRetainI12CFX_DIBitmapJEEEN5fxcrt9RetainPtrIT_EEDpOT0_: argument 0"}
!14 = distinct !{!14, !"_ZN6pdfium10MakeRetainI12CFX_DIBitmapJEEEN5fxcrt9RetainPtrIT_EEDpOT0_"}
!15 = !{!16}
!16 = distinct !{!16, !17, !"_ZN16CFX_BitmapStorer9GetBitmapEv: argument 0"}
!17 = distinct !{!17, !"_ZN16CFX_BitmapStorer9GetBitmapEv"}
!18 = !{!19}
!19 = distinct !{!19, !20, !"_ZNK10CFX_MatrixmlERKS_: argument 0"}
!20 = distinct !{!20, !"_ZNK10CFX_MatrixmlERKS_"}
!21 = !{!22}
!22 = distinct !{!22, !23, !"_ZN16CFX_BitmapStorer9GetBitmapEv: argument 0"}
!23 = distinct !{!23, !"_ZN16CFX_BitmapStorer9GetBitmapEv"}
!24 = !{!25}
!25 = distinct !{!25, !26, !"_ZN16CFX_BitmapStorer9GetBitmapEv: argument 0"}
!26 = distinct !{!26, !"_ZN16CFX_BitmapStorer9GetBitmapEv"}
!27 = !{!28}
!28 = distinct !{!28, !29, !"_ZN16CFX_BitmapStorer9GetBitmapEv: argument 0"}
!29 = distinct !{!29, !"_ZN16CFX_BitmapStorer9GetBitmapEv"}
!30 = !{!31}
!31 = distinct !{!31, !32, !"_ZN16CFX_BitmapStorer9GetBitmapEv: argument 0"}
!32 = distinct !{!32, !"_ZN16CFX_BitmapStorer9GetBitmapEv"}
!33 = !{!34}
!34 = distinct !{!34, !35, !"_ZN16CFX_BitmapStorer9GetBitmapEv: argument 0"}
!35 = distinct !{!35, !"_ZN16CFX_BitmapStorer9GetBitmapEv"}
!36 = !{!"branch_weights", i32 2146410443, i32 1073205}
!37 = !{!"branch_weights", i32 1, i32 2000}
!38 = !{!39}
!39 = distinct !{!39, !40, !"_ZN16CFX_BitmapStorer9GetBitmapEv: argument 0"}
!40 = distinct !{!40, !"_ZN16CFX_BitmapStorer9GetBitmapEv"}
!41 = distinct !{!41, !42}
!42 = !{!"llvm.loop.isvectorized", i32 1}
!43 = !{!44}
!44 = distinct !{!44, !45, !"_ZN16CFX_BitmapStorer9GetBitmapEv: argument 0"}
!45 = distinct !{!45, !"_ZN16CFX_BitmapStorer9GetBitmapEv"}
!46 = !{!47}
!47 = distinct !{!47, !48, !"_ZNK11CFX_DIBBase14GetPaletteSpanEv: argument 0"}
!48 = distinct !{!48, !"_ZNK11CFX_DIBBase14GetPaletteSpanEv"}
!49 = !{i32 -2143813504}
!50 = !{i32 -2143813483}
!51 = !{!52}
!52 = distinct !{!52, !53, !"_ZN16CFX_BitmapStorer9GetBitmapEv: argument 0"}
!53 = distinct !{!53, !"_ZN16CFX_BitmapStorer9GetBitmapEv"}
